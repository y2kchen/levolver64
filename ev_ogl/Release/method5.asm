; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\method5.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_get_extra
EXTRN	_dymem:DWORD
EXTRN	_web:BYTE
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
;	COMDAT _get_extra
_TEXT	SEGMENT
_id$ = 8						; size = 4
_n$ = 12						; size = 4
_get_extra PROC						; COMDAT

; 348  : { int type = id_type(id);

	push	ebp
	mov	ebp, esp

; 349  : 
; 350  :   return ( (char*)elptr(id) + EXTRAS(type)[n].offset);

	mov	ecx, DWORD PTR _id$[ebp]
	mov	eax, ecx
	push	esi
	mov	esi, DWORD PTR _n$[ebp]
	shr	eax, 29					; 0000001dH
	imul	esi, 240				; 000000f0H
	imul	eax, 112				; 00000070H
	mov	edx, DWORD PTR _web[eax+12]
	push	edi
	mov	edi, DWORD PTR _web[eax+104]
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _dymem
	add	edi, esi
	add	eax, DWORD PTR [edi+ecx+64]
	pop	edi
	pop	esi

; 351  : }

	pop	ebp
	ret	0
_get_extra ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DG@EAIIMJGF@Facet?5extra?5attribute?5form_facto@ ; `string'
PUBLIC	??_C@_0FI@EFLANGHN@Facet?5extra?5attribute?5form_facto@ ; `string'
PUBLIC	??_C@_0N@KCLCABBK@form_factors?$AA@		; `string'
PUBLIC	??_C@_0EJ@KEHOBPO@Facet?5extra?5attribute?5theta?5miss@ ; `string'
PUBLIC	??_C@_09PEGDDLNL@SVK_theta?$AA@			; `string'
PUBLIC	??_C@_0EJ@NMBCOLCN@Facet?5extra?5attribute?5alpha?5miss@ ; `string'
PUBLIC	??_C@_09CAADPDIK@SVK_alpha?$AA@			; `string'
PUBLIC	??_C@_0EF@ILMMIHDD@Facet?5extra?5attribute?5SVK_mu?5mis@ ; `string'
PUBLIC	??_C@_06EHDJLCN@SVK_mu?$AA@			; `string'
PUBLIC	??_C@_0EJ@DIAHEJFN@Facet?5extra?5attribute?5SVK_lambda@ ; `string'
PUBLIC	??_C@_0L@FNOEDAIJ@SVK_lambda?$AA@		; `string'
PUBLIC	??_C@_0DJ@DHLGNDKG@Saint?9Veant?5?9?5Kirchhoff?5method?5o@ ; `string'
PUBLIC	??_C@_0DH@OEBBOMID@Saint?9Veant?5?9?5Kirchhoff?5method?5o@ ; `string'
PUBLIC	_SVK_init
EXTRN	_form_factors_attr:DWORD
EXTRN	_find_attribute:PROC
EXTRN	_kb_error:PROC
_BSS	SEGMENT
_theta_attr DD	01H DUP (?)
_alpha_attr DD	01H DUP (?)
_mu_attr DD	01H DUP (?)
_lambda_attr DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0DG@EAIIMJGF@Facet?5extra?5attribute?5form_facto@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\method5.c
CONST	SEGMENT
??_C@_0DG@EAIIMJGF@Facet?5extra?5attribute?5form_facto@ DB 'Facet extra a'
	DB	'ttribute form_factors must have size 3.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FI@EFLANGHN@Facet?5extra?5attribute?5form_facto@
CONST	SEGMENT
??_C@_0FI@EFLANGHN@Facet?5extra?5attribute?5form_facto@ DB 'Facet extra a'
	DB	'ttribute form_factors real[3] missing. Needed by Saint-Veant '
	DB	'- Kirchhoff.', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KCLCABBK@form_factors?$AA@
CONST	SEGMENT
??_C@_0N@KCLCABBK@form_factors?$AA@ DB 'form_factors', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@KEHOBPO@Facet?5extra?5attribute?5theta?5miss@
CONST	SEGMENT
??_C@_0EJ@KEHOBPO@Facet?5extra?5attribute?5theta?5miss@ DB 'Facet extra a'
	DB	'ttribute theta missing. Needed by Saint-Veant - Kirchhoff.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_09PEGDDLNL@SVK_theta?$AA@
CONST	SEGMENT
??_C@_09PEGDDLNL@SVK_theta?$AA@ DB 'SVK_theta', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@NMBCOLCN@Facet?5extra?5attribute?5alpha?5miss@
CONST	SEGMENT
??_C@_0EJ@NMBCOLCN@Facet?5extra?5attribute?5alpha?5miss@ DB 'Facet extra '
	DB	'attribute alpha missing. Needed by Saint-Veant - Kirchhoff.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_09CAADPDIK@SVK_alpha?$AA@
CONST	SEGMENT
??_C@_09CAADPDIK@SVK_alpha?$AA@ DB 'SVK_alpha', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@ILMMIHDD@Facet?5extra?5attribute?5SVK_mu?5mis@
CONST	SEGMENT
??_C@_0EF@ILMMIHDD@Facet?5extra?5attribute?5SVK_mu?5mis@ DB 'Facet extra '
	DB	'attribute SVK_mu missing. Needed by SVK_elastic method.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_06EHDJLCN@SVK_mu?$AA@
CONST	SEGMENT
??_C@_06EHDJLCN@SVK_mu?$AA@ DB 'SVK_mu', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@DIAHEJFN@Facet?5extra?5attribute?5SVK_lambda@
CONST	SEGMENT
??_C@_0EJ@DIAHEJFN@Facet?5extra?5attribute?5SVK_lambda@ DB 'Facet extra a'
	DB	'ttribute SVK_lambda missing. Needed by SVK_elastic method.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FNOEDAIJ@SVK_lambda?$AA@
CONST	SEGMENT
??_C@_0L@FNOEDAIJ@SVK_lambda?$AA@ DB 'SVK_lambda', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@DHLGNDKG@Saint?9Veant?5?9?5Kirchhoff?5method?5o@
CONST	SEGMENT
??_C@_0DJ@DHLGNDKG@Saint?9Veant?5?9?5Kirchhoff?5method?5o@ DB 'Saint-Vean'
	DB	't - Kirchhoff method only for SOAPFILM model.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@OEBBOMID@Saint?9Veant?5?9?5Kirchhoff?5method?5o@
CONST	SEGMENT
??_C@_0DH@OEBBOMID@Saint?9Veant?5?9?5Kirchhoff?5method?5o@ DB 'Saint-Vean'
	DB	't - Kirchhoff method only for LINEAR model.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _SVK_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_SVK_init PROC						; COMDAT

; 49   :   if ( web.modeltype != LINEAR )

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN8@SVK_init

; 50   :      kb_error(2811,"Saint-Veant - Kirchhoff method only for LINEAR model.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DH@OEBBOMID@Saint?9Veant?5?9?5Kirchhoff?5method?5o@
	push	2811					; 00000afbH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN8@SVK_init:

; 51   : 
; 52   :   if ( web.dimension != 2 )

	cmp	DWORD PTR _web+620, 2
	je	SHORT $LN7@SVK_init

; 53   :      kb_error(2812,"Saint-Veant - Kirchhoff method only for SOAPFILM model.\n",
; 54   :         RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DJ@DHLGNDKG@Saint?9Veant?5?9?5Kirchhoff?5method?5o@
	push	2812					; 00000afcH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN7@SVK_init:

; 55   : 
; 56   :   /* extra edge atribute */
; 57   :   lambda_attr = find_attribute(FACET,LAMBDA_NAME);

	push	OFFSET ??_C@_0L@FNOEDAIJ@SVK_lambda?$AA@
	push	2
	call	_find_attribute
	add	esp, 8
	mov	DWORD PTR _lambda_attr, eax

; 58   :   if ( lambda_attr < 0 ) /* not found */

	test	eax, eax
	jns	SHORT $LN6@SVK_init

; 59   :      kb_error(2813,"Facet extra attribute SVK_lambda missing. Needed by SVK_elastic method.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0EJ@DIAHEJFN@Facet?5extra?5attribute?5SVK_lambda@
	push	2813					; 00000afdH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN6@SVK_init:

; 60   :   mu_attr = find_attribute(FACET,MU_NAME);

	push	OFFSET ??_C@_06EHDJLCN@SVK_mu?$AA@
	push	2
	call	_find_attribute
	add	esp, 8
	mov	DWORD PTR _mu_attr, eax

; 61   :   if ( mu_attr < 0 ) /* not found */

	test	eax, eax
	jns	SHORT $LN5@SVK_init

; 62   :      kb_error(2814,"Facet extra attribute SVK_mu missing. Needed by SVK_elastic method.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0EF@ILMMIHDD@Facet?5extra?5attribute?5SVK_mu?5mis@
	push	2814					; 00000afeH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN5@SVK_init:

; 63   : 
; 64   :   alpha_attr = find_attribute(FACET,ALPHA_NAME);

	push	OFFSET ??_C@_09CAADPDIK@SVK_alpha?$AA@
	push	2
	call	_find_attribute
	add	esp, 8
	mov	DWORD PTR _alpha_attr, eax

; 65   :   if ( alpha_attr < 0 ) /* not found */

	test	eax, eax
	jns	SHORT $LN4@SVK_init

; 66   :      kb_error(2815,"Facet extra attribute alpha missing. Needed by Saint-Veant - Kirchhoff.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0EJ@NMBCOLCN@Facet?5extra?5attribute?5alpha?5miss@
	push	2815					; 00000affH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN4@SVK_init:

; 67   : 
; 68   :   theta_attr = find_attribute(FACET,THETA_NAME);

	push	OFFSET ??_C@_09PEGDDLNL@SVK_theta?$AA@
	push	2
	call	_find_attribute
	add	esp, 8
	mov	DWORD PTR _theta_attr, eax

; 69   :   if ( theta_attr < 0 ) /* not found */

	test	eax, eax
	jns	SHORT $LN3@SVK_init

; 70   :      kb_error(2816,"Facet extra attribute theta missing. Needed by Saint-Veant - Kirchhoff.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0EJ@KEHOBPO@Facet?5extra?5attribute?5theta?5miss@
	push	2816					; 00000b00H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN3@SVK_init:

; 71   : 
; 72   :   form_factors_attr = find_attribute(FACET,FORM_FACTORS_NAME);

	push	OFFSET ??_C@_0N@KCLCABBK@form_factors?$AA@
	push	2
	call	_find_attribute
	add	esp, 8
	mov	DWORD PTR _form_factors_attr, eax

; 73   :   if ( form_factors_attr < 0 ) /* not found */

	test	eax, eax
	jns	SHORT $LN2@SVK_init

; 74   :      kb_error(2817,"Facet extra attribute form_factors real[3] missing. Needed by Saint-Veant - Kirchhoff.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0FI@EFLANGHN@Facet?5extra?5attribute?5form_facto@
	push	2817					; 00000b01H
	call	_kb_error
	mov	eax, DWORD PTR _form_factors_attr
	add	esp, 12					; 0000000cH
$LN2@SVK_init:

; 75   : 
; 76   :   if ( EXTRAS(FACET)[form_factors_attr].array_spec.datacount != 3 )

	mov	ecx, DWORD PTR _dymem
	imul	eax, 240				; 000000f0H
	add	eax, DWORD PTR _web+328
	cmp	DWORD PTR [eax+ecx+88], 3
	je	SHORT $LN1@SVK_init

; 77   :      kb_error(2818,"Facet extra attribute form_factors must have size 3.\n",
; 78   :         RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DG@EAIIMJGF@Facet?5extra?5attribute?5form_facto@
	push	2818					; 00000b02H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@SVK_init:

; 79   : } // end SVK_init()

	ret	0
_SVK_init ENDP
_TEXT	ENDS
PUBLIC	__real@4018000000000000
PUBLIC	__real@4010000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	??_C@_0CP@FBBJGIMO@?5SVK_elastic?3?5Facet?5?$CFd?5has?5unstr@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_SVK_all
EXTRN	_dot:PROC
EXTRN	_sprintf:PROC
EXTRN	_errmsg:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CIsqrt:PROC
;	COMDAT __real@4018000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT ??_C@_0CP@FBBJGIMO@?5SVK_elastic?3?5Facet?5?$CFd?5has?5unstr@
CONST	SEGMENT
??_C@_0CP@FBBJGIMO@?5SVK_elastic?3?5Facet?5?$CFd?5has?5unstr@ DB ' SVK_el'
	DB	'astic: Facet %d has unstrained area 0.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\method5.c
CONST	ENDS
;	COMDAT _SVK_all
_TEXT	SEGMENT
tv1397 = -2488						; size = 8
_c22$ = -2480						; size = 8
tv1439 = -2472						; size = 8
_ddpsirdc22dc22$ = -2472				; size = 8
_c12$ = -2464						; size = 8
tv1447 = -2456						; size = 8
_dpsirdc22$ = -2456					; size = 8
tv1423 = -2448						; size = 8
_f12$ = -2448						; size = 8
tv1405 = -2440						; size = 8
_q12$ = -2440						; size = 8
tv1422 = -2432						; size = 8
_mu$ = -2432						; size = 8
tv1575 = -2424						; size = 8
tv1453 = -2424						; size = 8
_ddpsirdc22dc11$ = -2424				; size = 8
tv1404 = -2416						; size = 8
_dpsirdc11$ = -2416					; size = 8
tv1608 = -2408						; size = 8
tv1459 = -2408						; size = 8
_ddpsirdc21dc12$ = -2408				; size = 8
tv1378 = -2400						; size = 8
_energy$ = -2400					; size = 8
tv1450 = -2392						; size = 8
tv1437 = -2392						; size = 8
_area$ = -2392						; size = 8
tv1508 = -2384						; size = 8
_theta$ = -2384						; size = 8
tv1512 = -2376						; size = 8
_alpha$ = -2376						; size = 8
tv1395 = -2368						; size = 8
_dpsirdc12$ = -2368					; size = 8
_f_info$GSCopy$ = -2360					; size = 4
_c21$ = -2356						; size = 8
tv4359 = -2352						; size = 4
_q11$ = -2348						; size = 8
tv4440 = -2344						; size = 4
_q22$ = -2340						; size = 8
tv4436 = -2336						; size = 4
tv1465 = -2332						; size = 8
tv1456 = -2332						; size = 8
tv1409 = -2332						; size = 8
_dpsirdc21$ = -2332					; size = 8
_lambda$ = -2324					; size = 8
tv4438 = -2320						; size = 4
tv1516 = -2316						; size = 8
tv1442 = -2316						; size = 8
tv1380 = -2316						; size = 8
_f11$ = -2316						; size = 8
_det$ = -2316						; size = 8
_ddc11dv$ = -2308					; size = 432
_ddc21dv$ = -1876					; size = 432
_ddc12dv$ = -1444					; size = 432
_ddc22dv$ = -1012					; size = 432
_dc21dv$ = -580						; size = 144
_dc22dv$ = -436						; size = 144
_dc12dv$ = -292						; size = 144
_dc11dv$ = -148						; size = 144
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_mode$ = 12						; size = 4
_SVK_all PROC						; COMDAT

; 93   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2488				; 000009b8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _f_info$[ebp]

; 94   :   REAL *s;  /* pointer to extra attributes */
; 95   :   REAL **side; 
; 96   :   REAL q11,q12,q22;  /* Q entries */
; 97   :   REAL det;    /* det S */
; 98   :   REAL lambda;  /* lambda coefficient  */
; 99   :   REAL area;  /* reference area of facet (area of facet in initial configuration - undeformed facet)*/
; 100  :   REAL mu; /* mu coefficient  */
; 101  :   REAL alpha; /* Thermic dilatation coefficient */
; 102  :   REAL theta ; /* Relative variation of temperture to the the reference state's temperature*/
; 103  :   REAL f11,f12,f22;
; 104  :   REAL c11,c12,c21,c22;
; 105  :   REAL energy;
; 106  :   REAL dc11dv[FACET_VERTS][MAXCOORD];
; 107  :   REAL dc12dv[FACET_VERTS][MAXCOORD];
; 108  :   REAL dc21dv[FACET_VERTS][MAXCOORD];
; 109  :   REAL dc22dv[FACET_VERTS][MAXCOORD];
; 110  :   REAL ddc11dv[FACET_VERTS][MAXCOORD][FACET_VERTS];
; 111  :   REAL ddc12dv[FACET_VERTS][MAXCOORD][FACET_VERTS];
; 112  :   REAL ddc21dv[FACET_VERTS][MAXCOORD][FACET_VERTS];
; 113  :   REAL ddc22dv[FACET_VERTS][MAXCOORD][FACET_VERTS];
; 114  : 
; 115  :   /* Potential derivatives */
; 116  :   REAL dpsirdc11,dpsirdc12,dpsirdc21,dpsirdc22;
; 117  :   REAL ddpsirdc11dc11, ddpsirdc11dc12, ddpsirdc11dc21, ddpsirdc11dc22;
; 118  :   REAL ddpsirdc12dc11, ddpsirdc12dc12, ddpsirdc12dc21, ddpsirdc12dc22;
; 119  :   REAL ddpsirdc21dc11, ddpsirdc21dc12, ddpsirdc21dc21, ddpsirdc21dc22;
; 120  :   REAL ddpsirdc22dc11, ddpsirdc22dc12, ddpsirdc22dc21, ddpsirdc22dc22;
; 121  : 
; 122  :   int i,j,ii,jj;
; 123  :   
; 124  :   lambda = *(REAL*)get_extra(f_info->id,lambda_attr);

	mov	ecx, DWORD PTR [eax]

; 264  :         for ( jj = 0 ; jj < FACET_VERTS  ; jj++ )

	mov	DWORD PTR _f_info$GSCopy$[ebp], eax
	push	ebx
	push	esi
	mov	ebx, DWORD PTR _mu_attr
	push	edi
	imul	ebx, 240				; 000000f0H
	mov	edi, DWORD PTR _lambda_attr
	mov	eax, ecx
	imul	edi, 240				; 000000f0H
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	esi, DWORD PTR _web[eax+12]
	mov	eax, DWORD PTR _web[eax+104]
	add	eax, edi
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+edx*4]
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+edx+64]
	fld	QWORD PTR [esi+eax]
	mov	eax, ecx
	shr	eax, 29					; 0000001dH
	fstp	QWORD PTR _lambda$[ebp]
	imul	eax, 112				; 00000070H
	mov	edi, DWORD PTR _web[eax+12]
	mov	eax, DWORD PTR _web[eax+104]
	add	eax, ebx
	mov	eax, DWORD PTR [eax+edx+64]
	mov	ebx, DWORD PTR _alpha_attr
	mov	esi, ecx
	imul	ebx, 240				; 000000f0H
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edi+esi*4]
	fld	QWORD PTR [esi+eax]
	mov	eax, ecx
	shr	eax, 29					; 0000001dH
	fstp	QWORD PTR _mu$[ebp]
	imul	eax, 112				; 00000070H
	mov	edi, DWORD PTR _web[eax+12]
	mov	eax, DWORD PTR _web[eax+104]
	add	eax, ebx
	mov	eax, DWORD PTR [eax+edx+64]
	mov	ebx, DWORD PTR _theta_attr
	mov	esi, ecx
	imul	ebx, 240				; 000000f0H
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edi+esi*4]
	fld	QWORD PTR [esi+eax]
	mov	eax, ecx
	shr	eax, 29					; 0000001dH
	fstp	QWORD PTR _alpha$[ebp]
	imul	eax, 112				; 00000070H
	mov	edi, DWORD PTR _web[eax+12]
	mov	eax, DWORD PTR _web[eax+104]
	add	eax, ebx
	mov	eax, DWORD PTR [eax+edx+64]
	mov	ebx, DWORD PTR _form_factors_attr
	mov	esi, ecx
	imul	ebx, 240				; 000000f0H
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edi+esi*4]
	fld	QWORD PTR [esi+eax]
	mov	eax, ecx
	shr	eax, 29					; 0000001dH
	fstp	QWORD PTR _theta$[ebp]
	imul	eax, 112				; 00000070H
	mov	edi, DWORD PTR _web[eax+12]
	mov	eax, DWORD PTR _web[eax+104]
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edi+esi*4]
	add	eax, ebx
	add	esi, DWORD PTR [eax+edx+64]
	fld	QWORD PTR [esi+8]
	fld	QWORD PTR [esi+16]
	fmul	QWORD PTR [esi]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)

; 125  :   mu = *(REAL*)get_extra(f_info->id,mu_attr);
; 126  :   alpha = *(REAL*)get_extra(f_info->id,alpha_attr);
; 127  :   theta = *(REAL*)get_extra(f_info->id,theta_attr);
; 128  : 
; 129  :   s = (REAL*)get_extra(f_info->id,form_factors_attr);
; 130  :   det = s[0]*s[2] - s[1]*s[1];
; 131  :   if ( det <= 0.0 )

	fst	QWORD PTR _det$[ebp]
	mov	ebx, 1767				; 000006e7H
	fldz
	fcom	ST(1)
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN73@SVK_all

; 136  :         kb_error(2895,errmsg,RECOVERABLE);

	fstp	ST(1)
	cmp	DWORD PTR _mode$[ebp], ebx
	je	$LN32@SVK_all

; 132  :      { 
; 133  :         if ( mode == METHOD_VALUE ) return 0.0;
; 134  :         sprintf(errmsg," SVK_elastic: Facet %d has unstrained area 0.\n",
; 135  :           ordinal(f_info->id)+1);

	fstp	ST(0)
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN34@SVK_all
	and	ecx, 134217727				; 07ffffffH
	jmp	SHORT $LN35@SVK_all
$LN34@SVK_all:
	or	ecx, -1
$LN35@SVK_all:
	inc	ecx
	push	ecx
	push	OFFSET ??_C@_0CP@FBBJGIMO@?5SVK_elastic?3?5Facet?5?$CFd?5has?5unstr@
	push	OFFSET _errmsg
	call	_sprintf

; 136  :         kb_error(2895,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2895					; 00000b4fH
	call	_kb_error
	fld	QWORD PTR _det$[ebp]
	add	esp, 24					; 00000018H
	jmp	SHORT $LN70@SVK_all
$LN73@SVK_all:
	fstp	ST(0)
$LN70@SVK_all:

; 137  :      }
; 138  : 
; 139  :   area = sqrt(det)/2.0;

	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000

; 140  :   
; 141  :   q11 = s[2]/det; q12 = -s[1]/det; q22 = s[0]/det;
; 142  : 
; 143  :   side = f_info->sides[0];

	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [edi+1276]
	fstp	QWORD PTR _area$[ebp]

; 144  :   f11 = SDIM_dot(side[0],side[0]);

	mov	edx, DWORD PTR _web+616
	fld	QWORD PTR [esi+16]
	push	edx
	fld	QWORD PTR _det$[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _q11$[ebp]
	fld	QWORD PTR [esi+8]
	fdiv	ST(0), ST(1)
	fchs
	fstp	QWORD PTR _q12$[ebp]
	fdivr	QWORD PTR [esi]
	mov	esi, DWORD PTR [ecx]
	mov	eax, DWORD PTR [esi]
	push	eax
	push	eax
	fstp	QWORD PTR _q22$[ebp]
	call	_dot
	fstp	QWORD PTR _f11$[ebp]

; 145  :   f12 = SDIM_dot(side[0],side[1]);

	mov	eax, DWORD PTR _web+616
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	push	eax
	push	ecx
	push	edx
	call	_dot
	fstp	QWORD PTR _f12$[ebp]

; 146  :   f22 = SDIM_dot(side[1],side[1]);

	mov	ecx, DWORD PTR _web+616
	mov	eax, DWORD PTR [esi+4]
	push	ecx
	push	eax
	push	eax
	call	_dot

; 147  : 
; 148  :   c11 = f11*q11 + f12*q12;

	fld	QWORD PTR _f12$[ebp]
	fld	ST(0)
	add	esp, 36					; 00000024H
	fld	QWORD PTR _q12$[ebp]
	fmul	ST(1), ST(0)
	fld	QWORD PTR _f11$[ebp]
	fld	QWORD PTR _q11$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fadd	ST(0), ST(3)

; 149  :   c12 = f11*q12 + f12*q22;

	fld	ST(4)
	fmul	QWORD PTR _q22$[ebp]
	fld	QWORD PTR _f11$[ebp]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _c12$[ebp]

; 150  :   c21 = f12*q11 + f22*q12;

	fld	ST(5)
	fmul	ST(0), ST(3)
	fxch	ST(5)
	fmulp	ST(2), ST(0)
	fxch	ST(4)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _c21$[ebp]

; 151  :   c22 = f12*q12 + f22*q22;

	fxch	ST(3)
	fmul	QWORD PTR _q22$[ebp]
	faddp	ST(1), ST(0)
	fst	QWORD PTR _c22$[ebp]

; 152  : 
; 153  :  /*
; 154  :  This exression of the potential takes into account the plane stress condition : Sig33 = 0, 
; 155  :  This condition leads to the expression of c33, which can be written as a
; 156  :  function of c11 and c22 : c33 = -(lambda*(c11+c22-3)-2*mu)/(lambda+2*mu)
; 157  :  */
; 158  : 
; 159  :   energy =area*((2.0*mu+3.0*lambda)*alpha*theta*(-(2.0*mu+3.0*lambda)*alpha*theta-2.0*mu*(c11+c22-2.0))+((c22*c22+c11*c11+2.0*c12*c21+2.0-2.0*c11-2.0*c22)*mu*mu+(c11*c22+c12*c21+c22*c22+c11*c11+3.0-3.0*c11-3.0*c22)*lambda*mu))/(2.0*lambda+4.0*mu);

	fld	ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv1378[ebp]
	fld	ST(1)
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv1380[ebp]
	fld	ST(1)
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv1395[ebp]
	fld	ST(1)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv1397[ebp]
	fld	QWORD PTR _mu$[ebp]
	fld	ST(0)
	fmul	ST(0), ST(2)
	fst	QWORD PTR tv1404[ebp]
	fld	QWORD PTR _lambda$[ebp]
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv1405[ebp]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR _alpha$[ebp]
	fmul	QWORD PTR _theta$[ebp]
	fstp	QWORD PTR tv1409[ebp]
	fld	QWORD PTR _lambda$[ebp]
	fmul	ST(0), ST(3)
	fst	QWORD PTR tv1422[ebp]
	fld	ST(2)
	fmul	QWORD PTR __real@4010000000000000
	faddp	ST(1), ST(0)
	fstp	QWORD PTR tv1423[ebp]
	fld	QWORD PTR _c21$[ebp]
	fmul	QWORD PTR _c12$[ebp]
	fld	ST(4)
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fadd	QWORD PTR tv1378[ebp]
	fadd	QWORD PTR tv1380[ebp]
	fadd	ST(0), ST(1)
	fld	ST(5)
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fxch	ST(4)
	fmulp	ST(1), ST(0)
	fsubp	ST(3), ST(0)
	fxch	ST(2)
	fmul	QWORD PTR _lambda$[ebp]
	fmul	ST(0), ST(2)
	fld	QWORD PTR _c12$[ebp]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR _c21$[ebp]
	fld	QWORD PTR tv1380[ebp]
	fadd	QWORD PTR tv1378[ebp]
	faddp	ST(1), ST(0)
	fadd	ST(0), ST(2)
	fsub	QWORD PTR tv1395[ebp]
	fsub	QWORD PTR tv1397[ebp]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv1409[ebp]
	fchs
	fld	QWORD PTR _c22$[ebp]
	fadd	ST(0), ST(5)
	fsub	ST(0), ST(3)
	fmul	QWORD PTR tv1404[ebp]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR tv1409[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _area$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fdiv	QWORD PTR tv1423[ebp]
	fst	QWORD PTR _energy$[ebp]

; 160  : 	      
; 161  :   if ( mode == METHOD_VALUE ) return energy;

	cmp	DWORD PTR _mode$[ebp], ebx
	jne	SHORT $LN79@SVK_all
	fstp	ST(2)
	pop	edi
	fstp	ST(2)
	pop	esi
	fstp	ST(3)
	pop	ebx
	fstp	ST(1)
	fstp	ST(0)

; 281  : } // end SVK_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN79@SVK_all:

; 162  : 
; 163  :   /* gradient */
; 164  : 
; 165  :   for ( i = 0 ; i < SDIM  ; i++ )

	mov	ebx, DWORD PTR _web+616
	fstp	ST(0)
	xor	eax, eax
	test	ebx, ebx
	jle	$LN65@SVK_all
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
$LN66@SVK_all:

; 166  :   {
; 167  :      dc11dv[1][i] = 2*side[0][i]*q11 + side[1][i]*q12;

	fld	QWORD PTR [ecx+eax*8]
	inc	eax
	fmul	ST(0), ST(5)
	fld	QWORD PTR [edx+eax*8-8]
	fmul	ST(0), ST(3)
	fst	QWORD PTR tv1437[ebp]
	fmul	QWORD PTR _q11$[ebp]
	fadd	ST(0), ST(1)
	fst	QWORD PTR tv1439[ebp]
	fstp	QWORD PTR _dc11dv$[ebp+eax*8+40]

; 168  :      dc11dv[2][i] =                          side[0][i]*q12;

	fld	QWORD PTR [edx+eax*8-8]
	fmul	ST(0), ST(6)
	fst	QWORD PTR tv1442[ebp]
	fstp	QWORD PTR _dc11dv$[ebp+eax*8+88]

; 169  :      dc12dv[1][i] = 2*side[0][i]*q12 + side[1][i]*q22;

	fld	QWORD PTR [ecx+eax*8-8]
	fmul	QWORD PTR _q22$[ebp]
	fld	QWORD PTR tv1437[ebp]
	fmul	ST(0), ST(7)
	faddp	ST(1), ST(0)
	fst	QWORD PTR tv1447[ebp]
	fstp	QWORD PTR _dc12dv$[ebp+eax*8+40]

; 170  :      dc12dv[2][i] =                          side[0][i]*q22;

	fld	QWORD PTR [edx+eax*8-8]
	fmul	QWORD PTR _q22$[ebp]
	fst	QWORD PTR tv1450[ebp]
	fstp	QWORD PTR _dc12dv$[ebp+eax*8+88]

; 171  :      dc21dv[1][i] = side[1][i]*q11;

	fld	QWORD PTR [ecx+eax*8-8]
	fld	QWORD PTR _q11$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv1453[ebp]
	fstp	QWORD PTR _dc21dv$[ebp+eax*8+40]

; 172  :      dc21dv[2][i] = side[0][i]*q11 + 2*side[1][i]*q12;

	fld	QWORD PTR [ecx+eax*8-8]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR tv1456[ebp]
	fmul	QWORD PTR [edx+eax*8-8]
	fld	QWORD PTR tv1456[ebp]
	fmul	ST(0), ST(7)
	faddp	ST(1), ST(0)
	fst	QWORD PTR tv1459[ebp]
	fstp	QWORD PTR _dc21dv$[ebp+eax*8+88]

; 173  :      dc22dv[1][i] = side[1][i]*q12;

	fst	QWORD PTR _dc22dv$[ebp+eax*8+40]

; 174  :      dc22dv[2][i] = side[0][i]*q12 + 2*side[1][i]*q22;

	fld	QWORD PTR tv1456[ebp]
	fmul	QWORD PTR _q22$[ebp]
	fld	QWORD PTR tv1442[ebp]
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv1465[ebp]
	fstp	QWORD PTR _dc22dv$[ebp+eax*8+88]

; 175  :      dc11dv[0][i] = -(dc11dv[1][i] + dc11dv[2][i]);

	fadd	QWORD PTR tv1439[ebp]
	fchs
	fstp	QWORD PTR _dc11dv$[ebp+eax*8-8]

; 176  :      dc12dv[0][i] = -(dc12dv[1][i] + dc12dv[2][i]);

	fld	QWORD PTR tv1450[ebp]
	fadd	QWORD PTR tv1447[ebp]
	fchs
	fstp	QWORD PTR _dc12dv$[ebp+eax*8-8]

; 177  :      dc21dv[0][i] = -(dc21dv[1][i] + dc21dv[2][i]);

	fld	QWORD PTR tv1459[ebp]
	fadd	QWORD PTR tv1453[ebp]
	fchs
	fstp	QWORD PTR _dc21dv$[ebp+eax*8-8]

; 178  :      dc22dv[0][i] = -(dc22dv[1][i] + dc22dv[2][i]);

	fadd	QWORD PTR tv1465[ebp]
	fchs
	fstp	QWORD PTR _dc22dv$[ebp+eax*8-8]
	cmp	eax, ebx
	jl	$LN66@SVK_all
$LN65@SVK_all:

; 179  :   }
; 180  : 	    
; 181  :   dpsirdc11 = mu*((2.0*c11-2.0)*mu+2.0*lambda*c11-3.0*lambda+lambda*c22-4.0*alpha*theta*mu-6.0*alpha*theta*lambda)/(lambda+2.0*mu)/2.0;

	fld	QWORD PTR _alpha$[ebp]
	xor	edx, edx
	fld	QWORD PTR __real@4010000000000000
	xor	ecx, ecx
	fmul	ST(0), ST(1)
	fld	QWORD PTR _theta$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(5)
	fstp	QWORD PTR tv1508[ebp]
	fxch	ST(1)
	fmul	QWORD PTR __real@4018000000000000
	fmulp	ST(1), ST(0)
	fld	QWORD PTR _lambda$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv1512[ebp]
	fld	QWORD PTR tv1404[ebp]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR tv1516[ebp]
	fld	QWORD PTR tv1395[ebp]
	fsub	ST(0), ST(3)
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv1422[ebp]
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fsub	QWORD PTR tv1405[ebp]
	fld	QWORD PTR _c22$[ebp]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fsub	QWORD PTR tv1508[ebp]
	fsub	QWORD PTR tv1512[ebp]
	fmul	ST(0), ST(3)
	fdiv	QWORD PTR tv1516[ebp]
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _dpsirdc11$[ebp]

; 182  :   dpsirdc12 = mu*c21/2.0;

	fld	QWORD PTR _c21$[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _dpsirdc12$[ebp]

; 183  :   dpsirdc21 = mu*c12/2.0;

	fld	QWORD PTR _c12$[ebp]
	fmul	ST(0), ST(4)
	fmulp	ST(1), ST(0)
	fstp	QWORD PTR _dpsirdc21$[ebp]

; 184  :   dpsirdc22 = mu*((2.0*c22-2.0)*mu+2.0*lambda*c22-3.0*lambda+lambda*c11-4.0*alpha*theta*mu-6.0*alpha*theta*lambda)/(lambda+2.0*mu)/2.0;

	fld	QWORD PTR tv1397[ebp]
	fsub	ST(0), ST(2)
	fmul	ST(0), ST(3)
	fld	QWORD PTR tv1422[ebp]
	fmul	QWORD PTR _c22$[ebp]
	faddp	ST(1), ST(0)
	fsub	QWORD PTR tv1405[ebp]
	fxch	ST(4)
	fmul	QWORD PTR _lambda$[ebp]
	faddp	ST(4), ST(0)
	fxch	ST(3)
	fsub	QWORD PTR tv1508[ebp]
	fsub	QWORD PTR tv1512[ebp]
	fmul	ST(0), ST(2)
	fdiv	QWORD PTR tv1516[ebp]
	fmul	QWORD PTR __real@3fe0000000000000
	fst	QWORD PTR _dpsirdc22$[ebp]
	fld	QWORD PTR _dpsirdc21$[ebp]
$LN25@SVK_all:

; 187  :      for ( i = 0 ; i < SDIM  ; i++ )

	xor	eax, eax
	test	ebx, ebx
	jle	SHORT $LN24@SVK_all
$LN22@SVK_all:
	lea	esi, DWORD PTR [ecx+eax*8]

; 188  :      { f_info->grad[j][i] = area*(dpsirdc11*dc11dv[j][i]  
; 189  :                                  +dpsirdc12*dc12dv[j][i]
; 190  :                                  +dpsirdc21*dc21dv[j][i]
; 191  :                                  +dpsirdc22*dc22dv[j][i]);

	fld	QWORD PTR _dc12dv$[ebp+esi]
	lea	esi, DWORD PTR [ecx+eax*8]
	fmul	QWORD PTR _dpsirdc12$[ebp]
	fld	QWORD PTR _dc11dv$[ebp+esi]
	lea	esi, DWORD PTR [ecx+eax*8]
	fmul	QWORD PTR _dpsirdc11$[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dc21dv$[ebp+esi]
	lea	esi, DWORD PTR [ecx+eax*8]
	fmul	ST(0), ST(2)
	inc	eax
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dc22dv$[ebp+esi]
	mov	esi, DWORD PTR [edi+1336]
	mov	esi, DWORD PTR [esi+edx]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fstp	QWORD PTR [esi+eax*8-8]
	mov	ebx, DWORD PTR _web+616
	cmp	eax, ebx
	jl	SHORT $LN22@SVK_all
$LN24@SVK_all:

; 185  : 
; 186  :   for ( j = 0 ; j < FACET_VERTS  ; j++ )

	add	ecx, 48					; 00000030H
	add	edx, 4
	cmp	ecx, 144				; 00000090H
	jl	SHORT $LN25@SVK_all

; 192  :      }
; 193  : 
; 194  :   if ( mode == METHOD_GRADIENT ) return energy;

	cmp	DWORD PTR _mode$[ebp], 4321		; 000010e1H
	fstp	ST(1)
	fstp	ST(0)
	jne	SHORT $LN19@SVK_all
	fstp	ST(0)
	fstp	ST(0)
	fstp	ST(1)
	jmp	$LN122@SVK_all
$LN19@SVK_all:

; 195  : 
; 196  :   /* hessian */
; 197  : 
; 198  :   for ( i = 0 ; i < SDIM  ; i++ )

	test	ebx, ebx
	jle	$LN94@SVK_all
	fld	QWORD PTR _q11$[ebp]
	xor	edx, edx
	fld	ST(0)
	mov	edi, ebx
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv1575[ebp]
	fld	ST(4)
	fmul	ST(0), ST(2)
	fld	QWORD PTR _q22$[ebp]
	fld	ST(0)
	fmulp	ST(4), ST(0)
	fxch	ST(3)
	fstp	QWORD PTR tv1608[ebp]
	fldz
	jmp	SHORT $LN18@SVK_all
$LN101@SVK_all:
	fxch	ST(2)
	fxch	ST(3)
	fxch	ST(1)
$LN18@SVK_all:

; 199  :   {
; 200  :      ddc11dv[1][i][1] = 2*q11;

	fld	QWORD PTR tv1575[ebp]

; 201  :      ddc11dv[1][i][2] = q12;
; 202  : 
; 203  :      ddc11dv[2][i][1] = q12;
; 204  :      ddc11dv[2][i][2] = 0.0;
; 205  : 
; 206  :      ddc12dv[1][i][1] = 2*q12;
; 207  :      ddc12dv[1][i][2] = q22;
; 208  : 
; 209  :      ddc12dv[2][i][1] = q22;
; 210  :      ddc12dv[2][i][2] = 0.0;
; 211  : 
; 212  :      ddc21dv[1][i][1] = 0.0;
; 213  :      ddc21dv[1][i][2] = q11;
; 214  : 
; 215  :      ddc21dv[2][i][1] = q11;
; 216  :      ddc21dv[2][i][2] = 2*q12;
; 217  : 
; 218  :      ddc22dv[1][i][1] = 0.0;
; 219  :      ddc22dv[1][i][2] = q12;
; 220  : 
; 221  :      ddc22dv[2][i][1] = q12;
; 222  :      ddc22dv[2][i][2] = 2*q22;
; 223  : 
; 224  :      for ( j = 1 ; j < FACET_VERTS;  j++ )

	mov	ecx, edx
	fstp	QWORD PTR _ddc11dv$[ebp+edx+152]
	mov	eax, edx
	fxch	ST(6)
	mov	esi, 2
	fst	QWORD PTR _ddc11dv$[ebp+edx+160]
	fst	QWORD PTR _ddc11dv$[ebp+edx+296]
	fst	QWORD PTR _ddc22dv$[ebp+edx+160]
	fst	QWORD PTR _ddc22dv$[ebp+edx+296]
	fxch	ST(6)
	fst	QWORD PTR _ddc11dv$[ebp+edx+304]
	fst	QWORD PTR _ddc12dv$[ebp+edx+304]
	fst	QWORD PTR _ddc21dv$[ebp+edx+152]
	fst	QWORD PTR _ddc22dv$[ebp+edx+152]
	fxch	ST(1)
	fst	QWORD PTR _ddc12dv$[ebp+edx+152]
	fst	QWORD PTR _ddc21dv$[ebp+edx+304]
	fxch	ST(3)
	fst	QWORD PTR _ddc12dv$[ebp+edx+160]
	fst	QWORD PTR _ddc12dv$[ebp+edx+296]
	fxch	ST(2)
	fst	QWORD PTR _ddc21dv$[ebp+edx+160]
	fst	QWORD PTR _ddc21dv$[ebp+edx+296]
	fld	QWORD PTR tv1608[ebp]
	fstp	QWORD PTR _ddc22dv$[ebp+edx+304]
$LN15@SVK_all:

; 225  :      { 
; 226  :         ddc11dv[0][i][j] = -(ddc11dv[1][i][j] + ddc11dv[2][i][j]);

	fld	QWORD PTR _ddc11dv$[ebp+eax+296]
	add	eax, 8
	fadd	QWORD PTR _ddc11dv$[ebp+eax+144]
	add	ecx, 144				; 00000090H
	dec	esi
	fchs
	fstp	QWORD PTR _ddc11dv$[ebp+eax]

; 227  :         ddc12dv[0][i][j] = -(ddc12dv[1][i][j] + ddc12dv[2][i][j]);

	fld	QWORD PTR _ddc12dv$[ebp+eax+288]
	fadd	QWORD PTR _ddc12dv$[ebp+eax+144]
	fchs
	fstp	QWORD PTR _ddc12dv$[ebp+eax]

; 228  :         ddc21dv[0][i][j] = -(ddc21dv[1][i][j] + ddc21dv[2][i][j]);

	fld	QWORD PTR _ddc21dv$[ebp+eax+288]
	fadd	QWORD PTR _ddc21dv$[ebp+eax+144]
	fchs
	fstp	QWORD PTR _ddc21dv$[ebp+eax]

; 229  :         ddc22dv[0][i][j] = -(ddc22dv[1][i][j] + ddc22dv[2][i][j]);

	fld	QWORD PTR _ddc22dv$[ebp+eax+288]
	fadd	QWORD PTR _ddc22dv$[ebp+eax+144]
	fchs
	fstp	QWORD PTR _ddc22dv$[ebp+eax]

; 230  :         ddc11dv[j][i][0] = -(ddc11dv[j][i][1] + ddc11dv[j][i][2]);

	fld	QWORD PTR _ddc11dv$[ebp+ecx+16]
	fadd	QWORD PTR _ddc11dv$[ebp+ecx+8]
	fchs
	fstp	QWORD PTR _ddc11dv$[ebp+ecx]

; 231  :         ddc12dv[j][i][0] = -(ddc12dv[j][i][1] + ddc12dv[j][i][2]);

	fld	QWORD PTR _ddc12dv$[ebp+ecx+16]
	fadd	QWORD PTR _ddc12dv$[ebp+ecx+8]
	fchs
	fstp	QWORD PTR _ddc12dv$[ebp+ecx]

; 232  :         ddc21dv[j][i][0] = -(ddc21dv[j][i][1] + ddc21dv[j][i][2]);

	fld	QWORD PTR _ddc21dv$[ebp+ecx+16]
	fadd	QWORD PTR _ddc21dv$[ebp+ecx+8]
	fchs
	fstp	QWORD PTR _ddc21dv$[ebp+ecx]

; 233  :         ddc22dv[j][i][0] = -(ddc22dv[j][i][1] + ddc22dv[j][i][2]);

	fld	QWORD PTR _ddc22dv$[ebp+ecx+16]
	fadd	QWORD PTR _ddc22dv$[ebp+ecx+8]
	fchs
	fstp	QWORD PTR _ddc22dv$[ebp+ecx]
	jne	$LN15@SVK_all

; 234  :      }
; 235  :      ddc11dv[0][i][0] = -(ddc11dv[1][i][0] + ddc11dv[2][i][0]);

	fld	QWORD PTR _ddc11dv$[ebp+edx+288]
	add	edx, 24					; 00000018H
	dec	edi
	fadd	QWORD PTR _ddc11dv$[ebp+edx+120]
	fchs
	fstp	QWORD PTR _ddc11dv$[ebp+edx-24]

; 236  :      ddc12dv[0][i][0] = -(ddc12dv[1][i][0] + ddc12dv[2][i][0]);

	fld	QWORD PTR _ddc12dv$[ebp+edx+264]
	fadd	QWORD PTR _ddc12dv$[ebp+edx+120]
	fchs
	fstp	QWORD PTR _ddc12dv$[ebp+edx-24]

; 237  :      ddc21dv[0][i][0] = -(ddc21dv[1][i][0] + ddc21dv[2][i][0]);

	fld	QWORD PTR _ddc21dv$[ebp+edx+264]
	fadd	QWORD PTR _ddc21dv$[ebp+edx+120]
	fchs
	fstp	QWORD PTR _ddc21dv$[ebp+edx-24]

; 238  :      ddc22dv[0][i][0] = -(ddc22dv[1][i][0] + ddc22dv[2][i][0]);

	fld	QWORD PTR _ddc22dv$[ebp+edx+264]
	fadd	QWORD PTR _ddc22dv$[ebp+edx+120]
	fchs
	fstp	QWORD PTR _ddc22dv$[ebp+edx-24]
	jne	$LN101@SVK_all

; 195  : 
; 196  :   /* hessian */
; 197  : 
; 198  :   for ( i = 0 ; i < SDIM  ; i++ )

	fstp	ST(6)
	fstp	ST(2)
	fstp	ST(4)
	fstp	ST(3)
	jmp	SHORT $LN16@SVK_all
$LN94@SVK_all:
	fstp	ST(0)
	fstp	ST(2)
	fldz
	fxch	ST(2)
$LN16@SVK_all:

; 239  :   }
; 240  : 
; 241  : 
; 242  :   ddpsirdc11dc11 = mu*(mu+lambda)/(lambda+2.0*mu);

	fld	ST(0)
	xor	ecx, ecx
	fld	QWORD PTR _lambda$[ebp]
	xor	edx, edx
	fadd	ST(1), ST(0)
	mov	DWORD PTR tv4436[ebp], edx
	fxch	ST(1)
	mov	DWORD PTR tv4438[ebp], ecx
	mov	DWORD PTR tv4440[ebp], ecx
	fmul	ST(0), ST(2)
	fdiv	QWORD PTR tv1516[ebp]
	fld	ST(0)

; 243  :   ddpsirdc11dc12 = 0.0;
; 244  :   ddpsirdc11dc21 = 0.0 ;
; 245  :   ddpsirdc11dc22 = lambda*mu/(2.0*lambda+4.0*mu);

	fld	ST(3)
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fdiv	QWORD PTR tv1423[ebp]
	fld	ST(0)

; 246  : 
; 247  :   ddpsirdc12dc11 = 0.0;
; 248  :   ddpsirdc12dc12 = 0.0;
; 249  :   ddpsirdc12dc21 = mu/2.0;

	fxch	ST(4)
	fmul	QWORD PTR __real@3fe0000000000000
	fld	ST(0)

; 250  :   ddpsirdc12dc22 = 0.0;
; 251  : 
; 252  :   ddpsirdc21dc11 = 0.0;
; 253  :   ddpsirdc21dc12 = mu/2.0;

	fxch	ST(1)
	fstp	QWORD PTR _ddpsirdc21dc12$[ebp]

; 254  :   ddpsirdc21dc21 = 0.0;
; 255  :   ddpsirdc21dc22 = 0.0;
; 256  : 
; 257  :   ddpsirdc22dc11 = mu*lambda/(2.0*lambda+4.0*mu);

	fxch	ST(1)
	fstp	QWORD PTR _ddpsirdc22dc11$[ebp]

; 258  :   ddpsirdc22dc12 = 0.0;
; 259  :   ddpsirdc22dc21 = 0.0;
; 260  :   ddpsirdc22dc22 = mu*(mu+lambda)/(lambda+2.0*mu) ; 

	fxch	ST(1)
	fstp	QWORD PTR _ddpsirdc22dc22$[ebp]
$LN71@SVK_all:

; 263  :      for ( i = 0 ; i < SDIM  ; i++ )

	xor	esi, esi
	test	ebx, ebx
	jle	$LN11@SVK_all
	mov	eax, DWORD PTR tv4438[ebp]
	mov	DWORD PTR tv4359[ebp], eax
$LN67@SVK_all:

; 264  :         for ( jj = 0 ; jj < FACET_VERTS  ; jj++ )

	xor	edi, edi
$LN68@SVK_all:

; 265  :         {
; 266  :           f_info->hess[j][jj][i][i] += 
; 267  :                   area*(dpsirdc11*ddc11dv[j][i][jj]
; 268  :                        +dpsirdc12*ddc21dv[j][i][jj]
; 269  :                        +dpsirdc21*ddc12dv[j][i][jj]
; 270  :                        +dpsirdc22*ddc22dv[j][i][jj]);

	fld	QWORD PTR _ddc21dv$[ebp+edx]
	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	fmul	QWORD PTR _dpsirdc12$[ebp]
	mov	eax, DWORD PTR [eax+1340]
	fld	QWORD PTR _ddc11dv$[ebp+edx]
	mov	eax, DWORD PTR [eax+ecx]
	fmul	QWORD PTR _dpsirdc11$[ebp]
	mov	eax, DWORD PTR [eax+edi]
	mov	eax, DWORD PTR [eax+esi*4]
	lea	eax, DWORD PTR [eax+esi*8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddc12dv$[ebp+edx]
	fmul	QWORD PTR _dpsirdc21$[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddc22dv$[ebp+edx]
	fmul	QWORD PTR _dpsirdc22$[ebp]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]

; 271  : 
; 272  :           for ( ii = 0 ; ii < SDIM  ; ii++ )

	mov	ebx, DWORD PTR _web+616
	xor	eax, eax
	test	ebx, ebx
	jle	$LN5@SVK_all
	mov	ebx, DWORD PTR tv4359[ebp]
	fld	ST(1)
	fadd	ST(0), ST(5)
	fadd	ST(0), ST(5)
	fadd	QWORD PTR _ddpsirdc22dc11$[ebp]
	fmul	QWORD PTR _dc11dv$[ebp+ebx]
	fld	ST(5)
	fadd	ST(0), ST(6)
	fadd	QWORD PTR _ddpsirdc21dc12$[ebp]
	fadd	ST(0), ST(6)
	fmul	QWORD PTR _dc12dv$[ebp+ebx]
	faddp	ST(1), ST(0)
	fld	ST(1)
	fadd	ST(0), ST(6)
	fadd	ST(0), ST(6)
	fadd	ST(0), ST(6)
	fmul	QWORD PTR _dc21dv$[ebp+ebx]
	faddp	ST(1), ST(0)
	fld	ST(3)
	fadd	ST(0), ST(6)
	fadd	ST(0), ST(6)
	fadd	QWORD PTR _ddpsirdc22dc22$[ebp]
	fmul	QWORD PTR _dc22dv$[ebp+ebx]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(4)
$LN3@SVK_all:
	mov	ebx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ebx, DWORD PTR [ebx+1340]
	mov	ecx, DWORD PTR [ebx+ecx]
	mov	ecx, DWORD PTR [ecx+edi]
	mov	ecx, DWORD PTR [ecx+esi*4]

; 273  :              f_info->hess[j][jj][i][ii] += 
; 274  :             area*((ddpsirdc11dc11+ddpsirdc12dc11+ddpsirdc21dc11+ddpsirdc22dc11)*dc11dv[j][i] 
; 275  :                  +(ddpsirdc11dc12+ddpsirdc12dc12+ddpsirdc21dc12+ddpsirdc22dc12)*dc12dv[j][i]
; 276  :                  +(ddpsirdc11dc21+ddpsirdc12dc21+ddpsirdc21dc21+ddpsirdc22dc21)*dc21dv[j][i]
; 277  :                  +(ddpsirdc11dc22+ddpsirdc12dc22+ddpsirdc21dc22+ddpsirdc22dc22)*dc22dv[j][i]);

	fld	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	fadd	ST(0), ST(1)
	inc	eax
	fstp	QWORD PTR [ecx]
	mov	ebx, DWORD PTR _web+616
	mov	ecx, DWORD PTR tv4440[ebp]
	cmp	eax, ebx
	jl	SHORT $LN3@SVK_all

; 271  : 
; 272  :           for ( ii = 0 ; ii < SDIM  ; ii++ )

	fstp	ST(0)
$LN5@SVK_all:

; 264  :         for ( jj = 0 ; jj < FACET_VERTS  ; jj++ )

	add	edi, 4
	add	edx, 8
	cmp	edi, 12					; 0000000cH
	jl	$LN68@SVK_all

; 263  :      for ( i = 0 ; i < SDIM  ; i++ )

	add	DWORD PTR tv4359[ebp], 8
	inc	esi
	cmp	esi, ebx
	jl	$LN67@SVK_all
$LN11@SVK_all:

; 261  : 
; 262  :   for ( j = 0 ; j < FACET_VERTS  ; j++ )

	mov	edx, DWORD PTR tv4436[ebp]
	add	DWORD PTR tv4438[ebp], 48		; 00000030H
	add	ecx, 4
	add	edx, 144				; 00000090H
	mov	DWORD PTR tv4440[ebp], ecx
	mov	DWORD PTR tv4436[ebp], edx
	cmp	ecx, 12					; 0000000cH
	jl	$LN71@SVK_all
	fstp	ST(4)
	fstp	ST(0)
	fstp	ST(0)
	fstp	ST(0)
$LN122@SVK_all:
	fstp	ST(0)

; 278  :         }
; 279  : 
; 280  :   return energy;

	fld	QWORD PTR _energy$[ebp]
$LN32@SVK_all:

; 281  : } // end SVK_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_SVK_all ENDP
_TEXT	ENDS
PUBLIC	_SVK_energy
; Function compile flags: /Ogtp
;	COMDAT _SVK_energy
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_SVK_energy PROC					; COMDAT

; 293  : {

	push	ebp
	mov	ebp, esp

; 294  :  return SVK_all(f_info,METHOD_VALUE);

	mov	eax, DWORD PTR _f_info$[ebp]
	push	1767					; 000006e7H
	push	eax
	call	_SVK_all
	add	esp, 8

; 295  : }

	pop	ebp
	ret	0
_SVK_energy ENDP
_TEXT	ENDS
PUBLIC	_SVK_gradient
; Function compile flags: /Ogtp
;	COMDAT _SVK_gradient
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_SVK_gradient PROC					; COMDAT

; 306  : {

	push	ebp
	mov	ebp, esp

; 307  :  return SVK_all(f_info,METHOD_GRADIENT);

	mov	eax, DWORD PTR _f_info$[ebp]
	push	4321					; 000010e1H
	push	eax
	call	_SVK_all
	add	esp, 8

; 308  : }

	pop	ebp
	ret	0
_SVK_gradient ENDP
_TEXT	ENDS
PUBLIC	_SVK_hessian
; Function compile flags: /Ogtp
;	COMDAT _SVK_hessian
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_SVK_hessian PROC					; COMDAT

; 319  : {

	push	ebp
	mov	ebp, esp

; 320  :  return SVK_all(f_info,METHOD_HESSIAN);

	mov	eax, DWORD PTR _f_info$[ebp]
	push	8763					; 0000223bH
	push	eax
	call	_SVK_all
	add	esp, 8

; 321  : }

	pop	ebp
	ret	0
_SVK_hessian ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EM@FNCJJIBG@Facet?5extra?5attribute?5form_facto@ ; `string'
PUBLIC	??_C@_0DO@MNMAHAJB@Facet?5extra?5attribute?5neo_mu?5mis@ ; `string'
PUBLIC	??_C@_06HLGIKDHI@neo_mu?$AA@			; `string'
PUBLIC	??_C@_0EC@OKBJIBIP@Facet?5extra?5attribute?5neo_lambda@ ; `string'
PUBLIC	??_C@_0L@OCMDNMAG@neo_lambda?$AA@		; `string'
PUBLIC	??_C@_0CN@BHIICOPC@Neo_Hookean?5method?5only?5for?5SOAP@ ; `string'
PUBLIC	??_C@_0CL@ECPGKDLC@Neo_Hookean?5method?5only?5for?5LINE@ ; `string'
PUBLIC	_Neo_Hookean_init
;	COMDAT ??_C@_0EM@FNCJJIBG@Facet?5extra?5attribute?5form_facto@
CONST	SEGMENT
??_C@_0EM@FNCJJIBG@Facet?5extra?5attribute?5form_facto@ DB 'Facet extra a'
	DB	'ttribute form_factors real[3] missing. Needed by Neo_Hookean.'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@MNMAHAJB@Facet?5extra?5attribute?5neo_mu?5mis@
CONST	SEGMENT
??_C@_0DO@MNMAHAJB@Facet?5extra?5attribute?5neo_mu?5mis@ DB 'Facet extra '
	DB	'attribute neo_mu missing. Needed by Neo_Hookean.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06HLGIKDHI@neo_mu?$AA@
CONST	SEGMENT
??_C@_06HLGIKDHI@neo_mu?$AA@ DB 'neo_mu', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@OKBJIBIP@Facet?5extra?5attribute?5neo_lambda@
CONST	SEGMENT
??_C@_0EC@OKBJIBIP@Facet?5extra?5attribute?5neo_lambda@ DB 'Facet extra a'
	DB	'ttribute neo_lambda missing. Needed by Neo_Hookean.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OCMDNMAG@neo_lambda?$AA@
CONST	SEGMENT
??_C@_0L@OCMDNMAG@neo_lambda?$AA@ DB 'neo_lambda', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@BHIICOPC@Neo_Hookean?5method?5only?5for?5SOAP@
CONST	SEGMENT
??_C@_0CN@BHIICOPC@Neo_Hookean?5method?5only?5for?5SOAP@ DB 'Neo_Hookean '
	DB	'method only for SOAPFILM model.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@ECPGKDLC@Neo_Hookean?5method?5only?5for?5LINE@
CONST	SEGMENT
??_C@_0CL@ECPGKDLC@Neo_Hookean?5method?5only?5for?5LINE@ DB 'Neo_Hookean '
	DB	'method only for LINEAR model.', 0aH, 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _Neo_Hookean_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_Neo_Hookean_init PROC					; COMDAT

; 343  : 
; 344  :   if ( web.modeltype != LINEAR )

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN6@Neo_Hookea

; 345  :      kb_error(2819,"Neo_Hookean method only for LINEAR model.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CL@ECPGKDLC@Neo_Hookean?5method?5only?5for?5LINE@
	push	2819					; 00000b03H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN6@Neo_Hookea:

; 346  : 
; 347  :   if ( web.dimension != 2 )

	cmp	DWORD PTR _web+620, 2
	je	SHORT $LN5@Neo_Hookea

; 348  :      kb_error(2829,"Neo_Hookean method only for SOAPFILM model.\n",
; 349  :         RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CN@BHIICOPC@Neo_Hookean?5method?5only?5for?5SOAP@
	push	2829					; 00000b0dH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN5@Neo_Hookea:

; 350  : 
; 351  :   /* extra edge atribute */
; 352  :   lambda_attr = find_attribute(FACET,NEO_LAMBDA_NAME);

	push	OFFSET ??_C@_0L@OCMDNMAG@neo_lambda?$AA@
	push	2
	call	_find_attribute
	add	esp, 8
	mov	DWORD PTR _lambda_attr, eax

; 353  :   if ( lambda_attr < 0 ) /* not found */

	test	eax, eax
	jns	SHORT $LN4@Neo_Hookea

; 354  :      kb_error(2837,"Facet extra attribute neo_lambda missing. Needed by Neo_Hookean.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0EC@OKBJIBIP@Facet?5extra?5attribute?5neo_lambda@
	push	2837					; 00000b15H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN4@Neo_Hookea:

; 355  :   mu_attr = find_attribute(FACET,NEO_MU_NAME);

	push	OFFSET ??_C@_06HLGIKDHI@neo_mu?$AA@
	push	2
	call	_find_attribute
	add	esp, 8
	mov	DWORD PTR _mu_attr, eax

; 356  :   if ( mu_attr < 0 ) /* not found */

	test	eax, eax
	jns	SHORT $LN3@Neo_Hookea

; 357  :      kb_error(2838,"Facet extra attribute neo_mu missing. Needed by Neo_Hookean.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DO@MNMAHAJB@Facet?5extra?5attribute?5neo_mu?5mis@
	push	2838					; 00000b16H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN3@Neo_Hookea:

; 358  : 
; 359  :   form_factors_attr = find_attribute(FACET,FORM_FACTORS_NAME);

	push	OFFSET ??_C@_0N@KCLCABBK@form_factors?$AA@
	push	2
	call	_find_attribute
	add	esp, 8
	mov	DWORD PTR _form_factors_attr, eax

; 360  :   if ( form_factors_attr < 0 ) /* not found */

	test	eax, eax
	jns	SHORT $LN2@Neo_Hookea

; 361  :      kb_error(2839,"Facet extra attribute form_factors real[3] missing. Needed by Neo_Hookean.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0EM@FNCJJIBG@Facet?5extra?5attribute?5form_facto@
	push	2839					; 00000b17H
	call	_kb_error
	mov	eax, DWORD PTR _form_factors_attr
	add	esp, 12					; 0000000cH
$LN2@Neo_Hookea:

; 362  : 
; 363  :   if ( EXTRAS(FACET)[form_factors_attr].array_spec.datacount != 3 )

	mov	ecx, DWORD PTR _dymem
	imul	eax, 240				; 000000f0H
	add	eax, DWORD PTR _web+328
	cmp	DWORD PTR [eax+ecx+88], 3
	je	SHORT $LN1@Neo_Hookea

; 364  :      kb_error(2850,"Facet extra attribute form_factors must have size 3.\n",
; 365  :         RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DG@EAIIMJGF@Facet?5extra?5attribute?5form_facto@
	push	2850					; 00000b22H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@Neo_Hookea:

; 366  : } // end Neo_Hookean_init()

	ret	0
_Neo_Hookean_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@ICGFLPGO@LambertW?3?5bad?5argument?5?$CFg?0?5exiti@ ; `string'
PUBLIC	??_C@_0CM@OONGBFAD@LambertW?3?5No?5convergence?5at?5z?$DN?$CFg@ ; `string'
PUBLIC	__real@3cbcd2b297d889bc
PUBLIC	__real@3fd5555555555555
PUBLIC	__real@3fc38e38e38e38e4
PUBLIC	__real@4005bf0a8b145769
PUBLIC	??_C@_0CO@PLBNBCAP@LambertW?5expression?51?3?5W?$CI?$CF15?412g@ ; `string'
PUBLIC	__real@4020cd541845d0d1
PUBLIC	__real@40176e9dc5cc0431
PUBLIC	__real@4010b38b2cf3bbcd
PUBLIC	__real@400888ed51cbabf5
PUBLIC	__real@4002d412a70c581f
PUBLIC	__real@3ffefc70e852924c
PUBLIC	__real@3ffcfeb8b970748c
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4002a734f5b6ffbe
PUBLIC	__real@3fd78b56362cef38
PUBLIC	__real@bfd789b2c7fe3d74
PUBLIC	__real@7e37e43c8800759c
PUBLIC	__real@fe37e43c8800759c
PUBLIC	__real@bfd78b56362cef38
PUBLIC	_LambertW
EXTRN	_exit:PROC
EXTRN	_fprintf:PROC
EXTRN	___iob_func:PROC
EXTRN	__CIexp:PROC
EXTRN	__CIlog:PROC
;	COMDAT ??_C@_0CF@ICGFLPGO@LambertW?3?5bad?5argument?5?$CFg?0?5exiti@
CONST	SEGMENT
??_C@_0CF@ICGFLPGO@LambertW?3?5bad?5argument?5?$CFg?0?5exiti@ DB 'Lambert'
	DB	'W: bad argument %g, exiting.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@OONGBFAD@LambertW?3?5No?5convergence?5at?5z?$DN?$CFg@
CONST	SEGMENT
??_C@_0CM@OONGBFAD@LambertW?3?5No?5convergence?5at?5z?$DN?$CFg@ DB 'Lambe'
	DB	'rtW: No convergence at z=%g, exiting.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT __real@3cbcd2b297d889bc
CONST	SEGMENT
__real@3cbcd2b297d889bc DQ 03cbcd2b297d889bcr	; 4e-016
CONST	ENDS
;	COMDAT __real@3fd5555555555555
CONST	SEGMENT
__real@3fd5555555555555 DQ 03fd5555555555555r	; 0.333333
CONST	ENDS
;	COMDAT __real@3fc38e38e38e38e4
CONST	SEGMENT
__real@3fc38e38e38e38e4 DQ 03fc38e38e38e38e4r	; 0.152778
CONST	ENDS
;	COMDAT __real@4005bf0a8b145769
CONST	SEGMENT
__real@4005bf0a8b145769 DQ 04005bf0a8b145769r	; 2.71828
CONST	ENDS
;	COMDAT ??_C@_0CO@PLBNBCAP@LambertW?5expression?51?3?5W?$CI?$CF15?412g@
CONST	SEGMENT
??_C@_0CO@PLBNBCAP@LambertW?5expression?51?3?5W?$CI?$CF15?412g@ DB 'Lambe'
	DB	'rtW expression 1: W(%15.12g) = %15.12g ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT __real@4020cd541845d0d1
CONST	SEGMENT
__real@4020cd541845d0d1 DQ 04020cd541845d0d1r	; 8.40103
CONST	ENDS
;	COMDAT __real@40176e9dc5cc0431
CONST	SEGMENT
__real@40176e9dc5cc0431 DQ 040176e9dc5cc0431r	; 5.85802
CONST	ENDS
;	COMDAT __real@4010b38b2cf3bbcd
CONST	SEGMENT
__real@4010b38b2cf3bbcd DQ 04010b38b2cf3bbcdr	; 4.17534
CONST	ENDS
;	COMDAT __real@400888ed51cbabf5
CONST	SEGMENT
__real@400888ed51cbabf5 DQ 0400888ed51cbabf5r	; 3.06686
CONST	ENDS
;	COMDAT __real@4002d412a70c581f
CONST	SEGMENT
__real@4002d412a70c581f DQ 04002d412a70c581fr	; 2.35355
CONST	ENDS
;	COMDAT __real@3ffefc70e852924c
CONST	SEGMENT
__real@3ffefc70e852924c DQ 03ffefc70e852924cr	; 1.93663
CONST	ENDS
;	COMDAT __real@3ffcfeb8b970748c
CONST	SEGMENT
__real@3ffcfeb8b970748c DQ 03ffcfeb8b970748cr	; 1.81219
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@4002a734f5b6ffbe
CONST	SEGMENT
__real@4002a734f5b6ffbe DQ 04002a734f5b6ffber	; 2.33164
CONST	ENDS
;	COMDAT __real@3fd78b56362cef38
CONST	SEGMENT
__real@3fd78b56362cef38 DQ 03fd78b56362cef38r	; 0.367879
CONST	ENDS
;	COMDAT __real@bfd789b2c7fe3d74
CONST	SEGMENT
__real@bfd789b2c7fe3d74 DQ 0bfd789b2c7fe3d74r	; -0.367779
CONST	ENDS
;	COMDAT __real@7e37e43c8800759c
CONST	SEGMENT
__real@7e37e43c8800759c DQ 07e37e43c8800759cr	; 1e+300
CONST	ENDS
;	COMDAT __real@fe37e43c8800759c
CONST	SEGMENT
__real@fe37e43c8800759c DQ 0fe37e43c8800759cr	; -1e+300
CONST	ENDS
;	COMDAT __real@bfd78b56362cef38
CONST	SEGMENT
__real@bfd78b56362cef38 DQ 0bfd78b56362cef38r	; -0.367879
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _LambertW
_TEXT	SEGMENT
_w$ = -8						; size = 8
_q$89312 = -8						; size = 8
_z$ = 8							; size = 8
_LambertW PROC						; COMDAT

; 769  : {

	push	ebp
	mov	ebp, esp

; 770  :   int i; 
; 771  :   const REAL eps=4.0e-16, em1=0.3678794411714423215955237701614608; 
; 772  :   REAL p,e,t,w;
; 773  :   if (z<-em1 || !is_finite(z)) { 

	fld	QWORD PTR __real@bfd78b56362cef38
	sub	esp, 8
	fld	QWORD PTR _z$[ebp]
	fcom	ST(1)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 5
	jnp	$LN10@LambertW
	fld	QWORD PTR __real@fe37e43c8800759c
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	$LN10@LambertW
	fld	QWORD PTR __real@7e37e43c8800759c
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN10@LambertW

; 776  :   }
; 777  : 
; 778  :   if (0.0==z) return 0.0;

	fldz
	fld	ST(0)
	fld	ST(2)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN27@LambertW
	fstp	ST(1)

; 815  : } // end LambertW()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN27@LambertW:

; 776  :   }
; 777  : 
; 778  :   if (0.0==z) return 0.0;

	fstp	ST(0)

; 779  :   if (z<-em1+1e-4) { /* series near -em1 in sqrt(q) */

	fld	QWORD PTR __real@bfd789b2c7fe3d74
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN8@LambertW

; 780  :     double q=z+em1,r=sqrt(q),q2=q*q,q3=q2*q;

	fadd	QWORD PTR __real@3fd78b56362cef38
	fst	QWORD PTR _q$89312[ebp]
	call	__CIsqrt
	fld	QWORD PTR _q$89312[ebp]

; 781  :     w = -1.0
; 782  :      +2.331643981597124203363536062168*r
; 783  :      -1.812187885639363490240191647568*q
; 784  :      +1.936631114492359755363277457668*r*q
; 785  :      -2.353551201881614516821543561516*q2
; 786  :      +3.066858901050631912893148922704*r*q2
; 787  :      -4.175335600258177138854984177460*q3
; 788  :      +5.858023729874774148815053846119*r*q3
; 789  :      -8.401032217523977370984161688514*q3*q;  /* error approx 1e-16 */
; 790  :      fprintf(stderr,"LambertW expression 1: W(%15.12g) = %15.12g \n",
; 791  :             (DOUBLE)z,(DOUBLE)w); 

	sub	esp, 16					; 00000010H
	fld	ST(0)
	fmul	ST(0), ST(1)
	fld	ST(0)
	fmul	ST(0), ST(2)
	fld	ST(3)
	fmul	QWORD PTR __real@4002a734f5b6ffbe
	fsub	QWORD PTR __real@3ff0000000000000
	fld	ST(3)
	fmul	QWORD PTR __real@3ffcfeb8b970748c
	fsubp	ST(1), ST(0)
	fld	ST(4)
	fmul	QWORD PTR __real@3ffefc70e852924c
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	ST(2)
	fmul	QWORD PTR __real@4002d412a70c581f
	fsubp	ST(1), ST(0)
	fld	ST(4)
	fmul	QWORD PTR __real@400888ed51cbabf5
	fmulp	ST(3), ST(0)
	faddp	ST(2), ST(0)
	fld	QWORD PTR __real@4010b38b2cf3bbcd
	fmul	ST(0), ST(1)
	fsubp	ST(2), ST(0)
	fxch	ST(3)
	fmul	QWORD PTR __real@40176e9dc5cc0431
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fxch	ST(2)
	fmul	QWORD PTR __real@4020cd541845d0d1
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _w$[ebp]
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR _z$[ebp]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CO@PLBNBCAP@LambertW?5expression?51?3?5W?$CI?$CF15?412g@
	call	___iob_func
	add	eax, 64					; 00000040H
	push	eax
	call	_fprintf

; 792  : 	 return w;

	fld	QWORD PTR _w$[ebp]
	add	esp, 24					; 00000018H

; 815  : } // end LambertW()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@LambertW:

; 793  : 
; 794  :   }
; 795  :   /* initial approx for iteration... */
; 796  :   if (z<1.0) { /* series near 0 */

	fld1
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN33@LambertW

; 797  :     p=sqrt(2.0*(2.7182818284590452353602874713526625*z+1.0));

	fxch	ST(1)
	fmul	QWORD PTR __real@4005bf0a8b145769
	faddp	ST(1), ST(0)
	fadd	ST(0), ST(0)
	call	__CIsqrt

; 798  :     w=-1.0+p*(1.0+p*(-0.333333333333333333333+p*0.152777777777777777777777)); 

	fld	QWORD PTR __real@3fc38e38e38e38e4
	fmul	ST(0), ST(1)
	fsub	QWORD PTR __real@3fd5555555555555
	fmul	ST(0), ST(1)
	fld1
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fmulp	ST(2), ST(0)
	fsubp	ST(1), ST(0)

; 799  :   } else 

	jmp	SHORT $LN48@LambertW
$LN33@LambertW:

; 793  : 
; 794  :   }
; 795  :   /* initial approx for iteration... */
; 796  :   if (z<1.0) { /* series near 0 */

	fstp	ST(0)

; 800  :     w=log(z); /* asymptotic */

	call	__CIlog
$LN48@LambertW:
	fst	QWORD PTR _w$[ebp]

; 801  :   if (z>3.0) w-=log(w); /* useful? */

	fld	QWORD PTR __real@4008000000000000
	fcomp	QWORD PTR _z$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN5@LambertW
	call	__CIlog
	fsubr	QWORD PTR _w$[ebp]
	fst	QWORD PTR _w$[ebp]
$LN5@LambertW:

; 802  :   for (i=0; i<10; i++) { /* Halley iteration */

	push	esi
	xor	esi, esi
	jmp	SHORT $LN4@LambertW
$LN44@LambertW:
	fstp	ST(1)
$LN4@LambertW:

; 803  :     e=exp(w); 

	call	__CIexp

; 804  :     t=w*e-z;

	fld	ST(0)
	fld	QWORD PTR _w$[ebp]
	fmul	ST(1), ST(0)
	fld	QWORD PTR _z$[ebp]
	fsub	ST(2), ST(0)

; 805  :     p=w+1.0;

	fld	ST(1)
	fld1
	fadd	ST(1), ST(0)

; 806  :     t/=e*p-0.5*(p+1.0)*t/p; 

	fxch	ST(5)
	fmul	ST(0), ST(1)
	fld	ST(1)
	fadd	ST(0), ST(6)
	fmul	QWORD PTR __real@3fe0000000000000
	fmul	ST(0), ST(5)
	fdivrp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	fdivp	ST(3), ST(0)

; 807  :     w-=t;

	fxch	ST(1)
	fsub	ST(0), ST(2)
	fst	QWORD PTR _w$[ebp]

; 808  :     if (fabs(t)<eps*(1.0+fabs(w))) return w; /* rel-abs error */

	fxch	ST(2)
	fabs
	fld	ST(2)
	fabs
	faddp	ST(4), ST(0)
	fxch	ST(3)
	fmul	QWORD PTR __real@3cbcd2b297d889bc
	fcomp	ST(3)
	fnstsw	ax
	fstp	ST(2)
	test	ah, 65					; 00000041H
	je	SHORT $LN41@LambertW

; 802  :   for (i=0; i<10; i++) { /* Halley iteration */

	inc	esi
	cmp	esi, 10					; 0000000aH
	jl	SHORT $LN44@LambertW

; 809  :   }
; 810  :   /* should never get here */
; 811  :   sprintf(errmsg,"LambertW: No convergence at z=%g, exiting.\n",(DOUBLE)z); 

	sub	esp, 8
	fstp	ST(0)
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CM@OONGBFAD@LambertW?3?5No?5convergence?5at?5z?$DN?$CFg@
	push	OFFSET _errmsg
	call	_sprintf

; 812  :   kb_error(3747,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	3747					; 00000ea3H
	call	_kb_error

; 813  : 
; 814  :   return 0; /* keep compilers happy */

	fldz
	add	esp, 28					; 0000001cH
	pop	esi

; 815  : } // end LambertW()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN41@LambertW:

; 808  :     if (fabs(t)<eps*(1.0+fabs(w))) return w; /* rel-abs error */

	fstp	ST(1)
	pop	esi

; 815  : } // end LambertW()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@LambertW:

; 774  :     fprintf(stderr,"LambertW: bad argument %g, exiting.\n",(DOUBLE)z); 

	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CF@ICGFLPGO@LambertW?3?5bad?5argument?5?$CFg?0?5exiti@
	call	___iob_func
	add	eax, 64					; 00000040H
	push	eax
	call	_fprintf
	add	esp, 16					; 00000010H

; 775  :     exit(1); 

	push	1
	call	_exit
$LN49@LambertW:
$LN47@LambertW:
	int	3
_LambertW ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EH@BAIBEDCH@Facet?5extra?5attribute?5elastic_co@ ; `string'
PUBLIC	??_C@_0EB@EJLIACDG@Facet?5extra?5attribute?5elastic_ba@ ; `string'
PUBLIC	??_C@_0FL@JPPIOLKO@Facet?5extra?5attribute?5elastic_ba@ ; `string'
PUBLIC	??_C@_0O@DJCPBJBD@elastic_basis?$AA@		; `string'
PUBLIC	??_C@_0FA@OJFGLNOD@Facet?5extra?5attribute?5elastic_co@ ; `string'
PUBLIC	??_C@_0O@ENINNLN@elastic_coeff?$AA@		; `string'
PUBLIC	??_C@_0DI@BHDOOJGB@general_linear_elastic?5method?5on@ ; `string'
PUBLIC	??_C@_0DG@ODEIJOIN@general_linear_elastic?5method?5on@ ; `string'
PUBLIC	_general_linear_elastic_init
_BSS	SEGMENT
_elastic_base_attr DD 01H DUP (?)
_coeff_attr DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0EH@BAIBEDCH@Facet?5extra?5attribute?5elastic_co@
CONST	SEGMENT
??_C@_0EH@BAIBEDCH@Facet?5extra?5attribute?5elastic_co@ DB 'Facet extra a'
	DB	'ttribute elastic_coeff must have 1 dimension and size 6.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@EJLIACDG@Facet?5extra?5attribute?5elastic_ba@
CONST	SEGMENT
??_C@_0EB@EJLIACDG@Facet?5extra?5attribute?5elastic_ba@ DB 'Facet extra a'
	DB	'ttribute elastic_basis must have dimension [2][2].', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FL@JPPIOLKO@Facet?5extra?5attribute?5elastic_ba@
CONST	SEGMENT
??_C@_0FL@JPPIOLKO@Facet?5extra?5attribute?5elastic_ba@ DB 'Facet extra a'
	DB	'ttribute elastic_basis real[2][2] missing. Needed by general_'
	DB	'linear_elastic.', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DJCPBJBD@elastic_basis?$AA@
CONST	SEGMENT
??_C@_0O@DJCPBJBD@elastic_basis?$AA@ DB 'elastic_basis', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@OJFGLNOD@Facet?5extra?5attribute?5elastic_co@
CONST	SEGMENT
??_C@_0FA@OJFGLNOD@Facet?5extra?5attribute?5elastic_co@ DB 'Facet extra a'
	DB	'ttribute elastic_coeff missing. Needed by general_linear_elas'
	DB	'tic.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ENINNLN@elastic_coeff?$AA@
CONST	SEGMENT
??_C@_0O@ENINNLN@elastic_coeff?$AA@ DB 'elastic_coeff', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@BHDOOJGB@general_linear_elastic?5method?5on@
CONST	SEGMENT
??_C@_0DI@BHDOOJGB@general_linear_elastic?5method?5on@ DB 'general_linear'
	DB	'_elastic method only for SOAPFILM model.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@ODEIJOIN@general_linear_elastic?5method?5on@
CONST	SEGMENT
??_C@_0DG@ODEIJOIN@general_linear_elastic?5method?5on@ DB 'general_linear'
	DB	'_elastic method only for LINEAR model.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _general_linear_elastic_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_general_linear_elastic_init PROC			; COMDAT

; 900  : 
; 901  :   if ( web.modeltype != LINEAR )

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN8@general_li

; 902  :      kb_error(4015,"general_linear_elastic method only for LINEAR model.\n",
; 903  :        RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DG@ODEIJOIN@general_linear_elastic?5method?5on@
	push	4015					; 00000fafH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN8@general_li:

; 904  : 
; 905  :   if ( web.dimension != 2 ) 

	push	esi
	mov	esi, 2
	cmp	DWORD PTR _web+620, esi
	je	SHORT $LN7@general_li

; 906  :      kb_error(4022,"general_linear_elastic method only for SOAPFILM model.\n",
; 907  :         RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DI@BHDOOJGB@general_linear_elastic?5method?5on@
	push	4022					; 00000fb6H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN7@general_li:

; 908  : 
; 909  :   /* extra edge atribute */
; 910  :   coeff_attr = find_attribute(FACET,ELASTIC_COEFF_NAME);

	push	OFFSET ??_C@_0O@ENINNLN@elastic_coeff?$AA@
	push	esi
	call	_find_attribute
	add	esp, 8
	mov	DWORD PTR _coeff_attr, eax

; 911  :   if ( coeff_attr < 0 ) /* not found */

	test	eax, eax
	jns	SHORT $LN6@general_li

; 912  :      kb_error(3201,"Facet extra attribute elastic_coeff missing. Needed by general_linear_elastic.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0FA@OJFGLNOD@Facet?5extra?5attribute?5elastic_co@
	push	3201					; 00000c81H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN6@general_li:

; 913  : 
; 914  :   elastic_base_attr = find_attribute(FACET,ELASTIC_BASE_NAME);

	push	OFFSET ??_C@_0O@DJCPBJBD@elastic_basis?$AA@
	push	esi
	call	_find_attribute
	add	esp, 8
	mov	DWORD PTR _elastic_base_attr, eax

; 915  :   if ( elastic_base_attr < 0 ) /* not found */

	test	eax, eax
	jns	SHORT $LN5@general_li

; 916  :      kb_error(3203,"Facet extra attribute elastic_basis real[2][2] missing. Needed by general_linear_elastic.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0FL@JPPIOLKO@Facet?5extra?5attribute?5elastic_ba@
	push	3203					; 00000c83H
	call	_kb_error
	mov	eax, DWORD PTR _elastic_base_attr
	add	esp, 12					; 0000000cH
$LN5@general_li:

; 917  : 
; 918  :   ex = &EXTRAS(FACET)[elastic_base_attr];

	imul	eax, 240				; 000000f0H
	add	eax, DWORD PTR _web+328
	add	eax, DWORD PTR _dymem

; 919  :   if ( ex->array_spec.dim != 2 || ex->array_spec.sizes[0] != 2  || ex->array_spec.sizes[1] != 2 )

	cmp	DWORD PTR [eax+76], esi
	jne	SHORT $LN3@general_li
	cmp	DWORD PTR [eax+96], esi
	jne	SHORT $LN3@general_li
	cmp	DWORD PTR [eax+100], esi
	je	SHORT $LN4@general_li
$LN3@general_li:

; 920  :      kb_error(3204,
; 921  :       "Facet extra attribute elastic_basis must have dimension [2][2].\n",
; 922  :         RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0EB@EJLIACDG@Facet?5extra?5attribute?5elastic_ba@
	push	3204					; 00000c84H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN4@general_li:

; 923  : 
; 924  :   ex = &EXTRAS(FACET)[coeff_attr];

	mov	eax, DWORD PTR _coeff_attr
	imul	eax, 240				; 000000f0H
	add	eax, DWORD PTR _web+328
	pop	esi
	add	eax, DWORD PTR _dymem

; 925  :   if ( ex->array_spec.dim != 1 || ex->array_spec.sizes[0] != 6 )

	cmp	DWORD PTR [eax+76], 1
	jne	SHORT $LN1@general_li
	cmp	DWORD PTR [eax+96], 6
	je	SHORT $LN2@general_li
$LN1@general_li:

; 926  :     kb_error(3205,
; 927  :       "Facet extra attribute elastic_coeff must have 1 dimension and size 6.\n",
; 928  :         RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0EH@BAIBEDCH@Facet?5extra?5attribute?5elastic_co@
	push	3205					; 00000c85H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN2@general_li:

; 929  : } // end general_linear_elastic_init()

	ret	0
_general_linear_elastic_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DJ@EMOJGBBG@general_linear_elastic?3?5Facet?5?$CFs@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	__real@3fd0000000000000
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_general_linear_elastic_all
EXTRN	_elnames:BYTE
;	COMDAT ??_C@_0DJ@EMOJGBBG@general_linear_elastic?3?5Facet?5?$CFs@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0DJ@EMOJGBBG@general_linear_elastic?3?5Facet?5?$CFs@ DB 'general_li'
	DB	'near_elastic: Facet %s has unstrained area 0.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\method5.c
CONST	ENDS
;	COMDAT _general_linear_elastic_all
_TEXT	SEGMENT
_s$ = -2600						; size = 32
tv7528 = -2568						; size = 8
tv2048 = -2568						; size = 8
tv7546 = -2560						; size = 8
tv2067 = -2560						; size = 8
tv2041 = -2552						; size = 8
tv1926 = -2552						; size = 8
_elastic_coeff$ = -2544					; size = 128
_energy$ = -2416					; size = 8
_f12$ = -2416						; size = 8
_det$ = -2416						; size = 8
tv1873 = -2408						; size = 8
tv5918 = -2404						; size = 4
_f_info$GSCopy$ = -2400					; size = 4
_area$ = -2396						; size = 8
tv6135 = -2392						; size = 4
tv6228 = -2388						; size = 8
tv2055 = -2388						; size = 8
tv1908 = -2388						; size = 8
_q22$ = -2388						; size = 8
tv1864 = -2380						; size = 8
tv7247 = -2376						; size = 4
tv3910 = -2376						; size = 4
tv7583 = -2372						; size = 8
tv1861 = -2372						; size = 8
tv1809 = -2372						; size = 8
tv6133 = -2368						; size = 4
tv3182 = -2364						; size = 8
tv1854 = -2364						; size = 8
tv1804 = -2364						; size = 8
_i$ = -2360						; size = 4
_q11$ = -2356						; size = 8
tv7343 = -2352						; size = 4
tv7341 = -2352						; size = 4
tv7243 = -2352						; size = 4
tv6220 = -2348						; size = 8
tv2091 = -2348						; size = 8
_q21$ = -2348						; size = 8
tv6507 = -2344						; size = 4
tv7660 = -2340						; size = 8
tv7568 = -2340						; size = 8
tv6204 = -2340						; size = 8
tv2060 = -2340						; size = 8
tv1877 = -2340						; size = 8
_q12$ = -2340						; size = 8
tv7666 = -2332						; size = 8
tv7597 = -2332						; size = 8
tv6212 = -2332						; size = 8
tv2074 = -2332						; size = 8
tv1871 = -2332						; size = 8
_f22$ = -2332						; size = 8
tv7672 = -2324						; size = 8
tv1851 = -2324						; size = 8
tv1817 = -2324						; size = 8
tv1775 = -2324						; size = 8
tv7245 = -2320						; size = 4
tv7678 = -2316						; size = 8
tv1876 = -2316						; size = 8
tv1820 = -2316						; size = 8
_f11$ = -2316						; size = 8
tv7033 = -2312						; size = 4
_ddc11dv$ = -2308					; size = 432
_ddc21dv$ = -1876					; size = 432
_ddc12dv$ = -1444					; size = 432
_ddc22dv$ = -1012					; size = 432
_dc22dv$ = -580						; size = 144
_dc21dv$ = -436						; size = 144
_dc12dv$ = -292						; size = 144
_dc11dv$ = -148						; size = 144
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_mode$ = 12						; size = 4
_general_linear_elastic_all PROC			; COMDAT

; 942  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2600				; 00000a28H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 943  :   REAL s[2][2],*sptr;  /* pointer to extra attributes */
; 944  :   REAL **side; 
; 945  :   REAL q11,q12,q21,q22;  /* Q entries */
; 946  :   REAL det;    /* det S */
; 947  :   REAL area;  /* reference area of facet */
; 948  :   REAL * coeff;  /* elastic coeff extra attribute */
; 949  :   REAL elastic_coeff[2][2][2][2];
; 950  :   REAL f11,f12,f21,f22;
; 951  :   REAL c11,c12,c21,c22;
; 952  :   REAL energy;
; 953  :   REAL dc11dv[FACET_VERTS][MAXCOORD];
; 954  :   REAL dc12dv[FACET_VERTS][MAXCOORD];
; 955  :   REAL dc21dv[FACET_VERTS][MAXCOORD];
; 956  :   REAL dc22dv[FACET_VERTS][MAXCOORD];
; 957  :   REAL ddc11dv[FACET_VERTS][MAXCOORD][FACET_VERTS];
; 958  :   REAL ddc12dv[FACET_VERTS][MAXCOORD][FACET_VERTS];
; 959  :   REAL ddc21dv[FACET_VERTS][MAXCOORD][FACET_VERTS];
; 960  :   REAL ddc22dv[FACET_VERTS][MAXCOORD][FACET_VERTS];
; 961  :   int i,j,ii,jj;
; 962  : 
; 963  :   coeff = (REAL*)get_extra(f_info->id,coeff_attr);

	mov	edx, DWORD PTR _coeff_attr
	push	ebx
	imul	edx, 240				; 000000f0H
	push	esi
	mov	esi, DWORD PTR _f_info$[ebp]
	mov	ecx, DWORD PTR [esi]
	mov	eax, ecx
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	push	edi
	mov	edi, DWORD PTR _web[eax+104]
	mov	eax, DWORD PTR _web[eax+12]
	mov	DWORD PTR tv7343[ebp], eax
	add	edi, edx
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR [edi+edx+64]
	mov	edi, DWORD PTR tv7343[ebp]
	mov	ebx, ecx
	and	ebx, 134217727				; 07ffffffH
	add	eax, DWORD PTR [edi+ebx*4]

; 964  :   elastic_coeff[0][0][0][0] = coeff[0];
; 965  :   elastic_coeff[1][1][1][1] = coeff[1];
; 966  :   elastic_coeff[0][0][1][1] = coeff[2];
; 967  :   elastic_coeff[1][1][0][0] = coeff[2];
; 968  :   elastic_coeff[0][0][0][1] = coeff[3]/2;
; 969  :   elastic_coeff[0][0][1][0] = coeff[3]/2;
; 970  :   elastic_coeff[0][1][0][0] = coeff[3]/2;
; 971  :   elastic_coeff[1][0][0][0] = coeff[3]/2;
; 972  :   elastic_coeff[1][1][1][0] = coeff[4]/2;
; 973  :   elastic_coeff[0][1][1][1] = coeff[4]/2;
; 974  :   elastic_coeff[1][0][1][1] = coeff[4]/2;
; 975  :   elastic_coeff[1][1][0][1] = coeff[4]/2;
; 976  :   elastic_coeff[1][0][1][0] = coeff[5]/4;
; 977  :   elastic_coeff[1][0][0][1] = coeff[5]/4;
; 978  :   elastic_coeff[0][1][0][1] = coeff[5]/4;
; 979  :   elastic_coeff[0][1][1][0] = coeff[5]/4;
; 980  : 
; 981  :   /* get unstrained sides in columns of S and get inverse */
; 982  :   sptr = (REAL*)get_extra(f_info->id,elastic_base_attr);

	mov	edi, DWORD PTR _elastic_base_attr
	imul	edi, 240				; 000000f0H
	fld	QWORD PTR [eax]
	fstp	QWORD PTR _elastic_coeff$[ebp]
	fld	QWORD PTR [eax+8]
	fstp	QWORD PTR _elastic_coeff$[ebp+120]
	fld	QWORD PTR [eax+16]
	fstp	QWORD PTR _elastic_coeff$[ebp+24]
	fld	QWORD PTR [eax+16]
	fstp	QWORD PTR _elastic_coeff$[ebp+96]
	fld	QWORD PTR [eax+24]

; 1139 : 
; 1140 : 
; 1141 :           for ( ii = 0 ; ii < SDIM  ; ii++ )

	mov	DWORD PTR _f_info$GSCopy$[ebp], esi
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _elastic_coeff$[ebp+8]
	fst	QWORD PTR _elastic_coeff$[ebp+16]
	fst	QWORD PTR _elastic_coeff$[ebp+32]
	fstp	QWORD PTR _elastic_coeff$[ebp+64]
	fld	QWORD PTR [eax+32]
	fmul	ST(0), ST(1)
	fst	QWORD PTR _elastic_coeff$[ebp+112]
	fst	QWORD PTR _elastic_coeff$[ebp+56]
	fst	QWORD PTR _elastic_coeff$[ebp+88]
	fstp	QWORD PTR _elastic_coeff$[ebp+104]
	fld	QWORD PTR [eax+40]
	mov	eax, ecx
	fmul	QWORD PTR __real@3fd0000000000000
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	fst	QWORD PTR _elastic_coeff$[ebp+80]
	fst	QWORD PTR _elastic_coeff$[ebp+72]
	fst	QWORD PTR _elastic_coeff$[ebp+40]
	fstp	QWORD PTR _elastic_coeff$[ebp+48]
	mov	ebx, DWORD PTR _web[eax+104]
	mov	eax, DWORD PTR _web[eax+12]
	add	ebx, edi
	mov	DWORD PTR tv7341[ebp], eax
	mov	eax, DWORD PTR [ebx+edx+64]
	mov	ebx, DWORD PTR tv7341[ebp]
	mov	edi, ecx
	and	edi, 134217727				; 07ffffffH
	add	eax, DWORD PTR [ebx+edi*4]
	fld	QWORD PTR [eax]
	fst	QWORD PTR _s$[ebp]
	fld	QWORD PTR [eax+8]
	fst	QWORD PTR _s$[ebp+16]
	fld	QWORD PTR [eax+16]
	fst	QWORD PTR _s$[ebp+8]
	fld	QWORD PTR [eax+24]
	fst	QWORD PTR _s$[ebp+24]
	fld	ST(0)
	fmul	ST(0), ST(4)
	fld	ST(2)
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _det$[ebp]
	fld	ST(0)
	fldz
	fucompp
	fnstsw	ax

; 983  :   s[0][0] = sptr[0]; s[1][0] = sptr[1]; s[0][1] = sptr[2]; s[1][1] = sptr[3];
; 984  :   det = s[0][0]*s[1][1] - s[0][1]*s[1][0];
; 985  :   if ( det == 0.0 )

	mov	edi, DWORD PTR _mode$[ebp]
	test	ah, 68					; 00000044H
	jp	$LN64@general_li@2
	fstp	ST(0)
	fstp	ST(4)
	fstp	ST(2)
	fstp	ST(0)
	fstp	ST(0)
	fstp	ST(0)

; 986  :   { if ( mode == METHOD_VALUE ) return 0.0;

	cmp	edi, 1767				; 000006e7H
	jne	SHORT $LN30@general_li@2
	fldz
	pop	edi
	pop	esi
	pop	ebx

; 1159 : 
; 1160 :          }
; 1161 : 
; 1162 :   return energy;
; 1163 : }  /* end general_linear_elastic_all() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN30@general_li@2:

; 987  :     sprintf(errmsg,
; 988  :       "general_linear_elastic: Facet %s has unstrained area 0.\n",
; 989  :         ELNAME(f_info->id));

	test	ecx, 268435456				; 10000000H
	je	SHORT $LN34@general_li@2
	and	ecx, 134217727				; 07ffffffH
	inc	ecx
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN35@general_li@2
$LN34@general_li@2:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN35@general_li@2:
	push	eax
	push	OFFSET ??_C@_0DJ@EMOJGBBG@general_linear_elastic?3?5Facet?5?$CFs@
	push	OFFSET _errmsg
	call	_sprintf

; 990  :     kb_error(3206,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	3206					; 00000c86H
	call	_kb_error
	fld	QWORD PTR _s$[ebp]
	fld	QWORD PTR _s$[ebp+16]
	add	esp, 24					; 00000018H
	fld	QWORD PTR _s$[ebp+8]
	fld	QWORD PTR _s$[ebp+24]
	fld	QWORD PTR _det$[ebp]
	fld	QWORD PTR __real@3fe0000000000000
	fxch	ST(5)
	fxch	ST(4)
	fxch	ST(3)
	fxch	ST(2)
	fxch	ST(1)
$LN64@general_li@2:

; 991  :   }
; 992  :   area = fabs(det)/2;

	fld	ST(0)

; 993  :   q11 = s[1][1]/det; q12 = -s[0][1]/det; q21 = -s[1][0]/det; q22 = s[0][0]/det;
; 994  : 
; 995  :   /* Gram matrix of strained sides */
; 996  :   side = f_info->sides[0];

	mov	eax, DWORD PTR [esi+1276]
	fabs
	mov	esi, DWORD PTR [eax]
	fmulp	ST(6), ST(0)

; 997  :   f11 = SDIM_dot(side[0],side[0]);

	mov	ecx, DWORD PTR _web+616
	fxch	ST(5)
	mov	eax, DWORD PTR [esi]
	push	ecx
	fstp	QWORD PTR _area$[ebp]
	push	eax
	push	eax
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR _q11$[ebp]
	fdiv	ST(0), ST(3)
	fchs
	fstp	QWORD PTR _q12$[ebp]
	fdiv	ST(0), ST(2)
	fchs
	fstp	QWORD PTR _q21$[ebp]
	fdivrp	ST(1), ST(0)
	fstp	QWORD PTR _q22$[ebp]
	call	_dot
	fstp	QWORD PTR _f11$[ebp]

; 998  :   f21 = f12 = SDIM_dot(side[0],side[1]);

	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	push	edx
	push	eax
	push	ecx
	call	_dot
	fstp	QWORD PTR _f12$[ebp]

; 999  :   f22 = SDIM_dot(side[1],side[1]);

	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR [esi+4]
	push	edx
	push	eax
	push	eax
	call	_dot
	fst	QWORD PTR _f22$[ebp]

; 1000 : 
; 1001 :   /* Strain matrix */
; 1002 :   c11 = (q11*f11*q11 + q11*f12*q21 + q21*f21*q11 + q21*f22*q21 - 1)/2;

	fld	QWORD PTR _f12$[ebp]
	add	esp, 36					; 00000024H
	fld	ST(0)
	fld	QWORD PTR _q11$[ebp]
	fmul	ST(1), ST(0)
	fld	QWORD PTR _f11$[ebp]
	fmul	ST(0), ST(1)
	fld	ST(3)
	fld	QWORD PTR _q21$[ebp]
	fmul	ST(1), ST(0)
	fmul	ST(6), ST(0)
	fxch	ST(6)
	fstp	QWORD PTR tv1775[ebp]
	fld	ST(3)
	fmul	ST(0), ST(6)
	fld	ST(2)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	ST(1)
	fmulp	ST(4), ST(0)
	faddp	ST(3), ST(0)
	fld	QWORD PTR tv1775[ebp]
	fmulp	ST(6), ST(0)
	fxch	ST(2)
	faddp	ST(5), ST(0)
	fxch	ST(4)
	fsub	QWORD PTR __real@3ff0000000000000
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)

; 1003 :   c12 = (q11*f11*q12 + q11*f12*q22 + q21*f21*q12 + q21*f22*q22)/2;

	fld	QWORD PTR _q22$[ebp]
	fmul	ST(4), ST(0)
	fld	QWORD PTR _q12$[ebp]
	fmul	ST(7), ST(0)
	fxch	ST(5)
	faddp	ST(7), ST(0)
	fxch	ST(3)
	fmul	ST(0), ST(4)
	faddp	ST(6), ST(0)
	fld	QWORD PTR tv1775[ebp]
	fmul	ST(0), ST(3)
	faddp	ST(6), ST(0)
	fmul	ST(5), ST(0)

; 1004 :   c21 = c12;
; 1005 :   c22 = (q12*f11*q12 + q12*f12*q22 + q22*f21*q12 + q22*f22*q22 - 1)/2;

	fld	ST(4)
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(3)
	fld	QWORD PTR _f11$[ebp]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fxch	ST(5)
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(4)
	faddp	ST(5), ST(0)
	fld	QWORD PTR _f22$[ebp]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(3)
	faddp	ST(5), ST(0)
	fxch	ST(4)
	fsub	QWORD PTR __real@3ff0000000000000
	fmulp	ST(4), ST(0)

; 1006 : 
; 1007 :   energy = c11*c11*elastic_coeff[0][0][0][0] 
; 1008 :          + c11*c12*elastic_coeff[0][0][0][1] 
; 1009 :          + c11*c22*elastic_coeff[0][0][1][1] 
; 1010 :          + c11*c21*elastic_coeff[0][0][1][0] 
; 1011 :          + c12*c11*elastic_coeff[0][1][0][0] 
; 1012 :          + c12*c12*elastic_coeff[0][1][0][1] 
; 1013 :          + c12*c22*elastic_coeff[0][1][1][1] 
; 1014 :          + c12*c21*elastic_coeff[0][1][1][0] 
; 1015 :          + c21*c11*elastic_coeff[1][0][0][0] 
; 1016 :          + c21*c12*elastic_coeff[1][0][0][1] 
; 1017 :          + c21*c22*elastic_coeff[1][0][1][1] 
; 1018 :          + c21*c21*elastic_coeff[1][0][1][0] 
; 1019 :          + c22*c11*elastic_coeff[1][1][0][0] 
; 1020 :          + c22*c12*elastic_coeff[1][1][0][1] 
; 1021 :          + c22*c22*elastic_coeff[1][1][1][1] 
; 1022 :          + c22*c21*elastic_coeff[1][1][1][0] ;

	fld	ST(4)
	fmul	ST(0), ST(1)
	fst	QWORD PTR tv1804[ebp]
	fld	ST(4)
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv1809[ebp]
	fld	ST(5)
	fmul	ST(0), ST(6)
	fstp	QWORD PTR tv1817[ebp]
	fld	ST(4)
	fmul	ST(0), ST(6)
	fstp	QWORD PTR tv1820[ebp]
	fld	ST(1)
	fmul	ST(0), ST(2)
	fmul	QWORD PTR _elastic_coeff$[ebp]
	fxch	ST(1)
	fmul	QWORD PTR _elastic_coeff$[ebp+8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv1809[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+24]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv1804[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+16]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv1804[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv1817[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+40]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv1820[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+56]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv1817[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+48]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv1804[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+64]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv1817[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+72]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv1820[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+88]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv1817[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+80]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv1809[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+96]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv1820[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+104]
	faddp	ST(1), ST(0)
	fld	ST(4)
	fmul	ST(0), ST(5)
	fmul	QWORD PTR _elastic_coeff$[ebp+120]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv1820[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+112]
	faddp	ST(1), ST(0)

; 1023 :   energy *= area/2;

	fld	QWORD PTR _area$[ebp]
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(2)
	fmulp	ST(1), ST(0)
	fst	QWORD PTR _energy$[ebp]

; 1024 :    
; 1025 : 
; 1026 :   if ( mode == METHOD_VALUE ) return energy;

	cmp	edi, 1767				; 000006e7H
	jne	SHORT $LN71@general_li@2
	fstp	ST(2)
	pop	edi
	fstp	ST(5)
	pop	esi
	fstp	ST(3)
	pop	ebx
	fstp	ST(1)
	fstp	ST(0)
	fstp	ST(1)

; 1159 : 
; 1160 :          }
; 1161 : 
; 1162 :   return energy;
; 1163 : }  /* end general_linear_elastic_all() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN71@general_li@2:

; 1027 : 
; 1028 :   /* gradient */
; 1029 : 
; 1030 :   for ( i = 0 ; i < SDIM  ; i++ )

	mov	edx, DWORD PTR _web+616
	fstp	ST(0)
	xor	eax, eax
	test	edx, edx
	jle	$LN59@general_li@2
	fstp	ST(0)
	mov	ecx, DWORD PTR [esi]
	fld	QWORD PTR _q11$[ebp]
	mov	esi, DWORD PTR [esi+4]
	fld	ST(0)
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv1851[ebp]
	fld	QWORD PTR _q21$[ebp]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv1876[ebp]
	fld	ST(4)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv1908[ebp]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR tv1926[ebp]
	jmp	SHORT $LN119@general_li@2
	npad	12
$LL77@general_li@2:
	fstp	ST(0)
	fld	QWORD PTR _q11$[ebp]
$LN119@general_li@2:
	fld	QWORD PTR _q21$[ebp]

; 1031 :   {
; 1032 : 
; 1033 :   dc11dv[1][i] = (q11*2*side[0][i]*q11 + q11*side[1][i]*q21 + q21*side[1][i]*q11                  )/2;

	fld	QWORD PTR tv1851[ebp]
	fmul	QWORD PTR [ecx+eax*8]
	fstp	QWORD PTR tv1854[ebp]
	fld	QWORD PTR [esi+eax*8]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv1861[ebp]
	fld	QWORD PTR [esi+eax*8]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv1864[ebp]
	fld	QWORD PTR tv1854[ebp]
	fmulp	ST(2), ST(0)
	fmul	QWORD PTR tv1861[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv1864[ebp]
	fld	QWORD PTR _q11$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __real@3fe0000000000000
	fst	QWORD PTR tv7528[ebp]
	fstp	QWORD PTR _dc11dv$[ebp+eax*8+48]

; 1034 :   dc11dv[2][i] = (q11*side[0][i]*q21 + q21*side[0][i]*q11 + q21*2*side[1][i]*q21                 )/2;

	fld	QWORD PTR [ecx+eax*8]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv1871[ebp]
	fld	QWORD PTR [ecx+eax*8]
	fld	QWORD PTR _q21$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv1873[ebp]
	fld	QWORD PTR tv1876[ebp]
	fmul	QWORD PTR [esi+eax*8]
	fstp	QWORD PTR tv1877[ebp]
	fld	QWORD PTR tv1873[ebp]
	fmulp	ST(2), ST(0)
	fld	QWORD PTR tv1871[ebp]
	fmul	ST(0), ST(1)
	faddp	ST(2), ST(0)
	fmul	QWORD PTR tv1877[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv7546[ebp]
	fstp	QWORD PTR _dc11dv$[ebp+eax*8+96]

; 1035 :   dc12dv[1][i] = (q11*2*side[0][i]*q12 + q11*side[1][i]*q22 + q21*side[1][i]*q12                 )/2;

	fld	QWORD PTR tv1854[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv1861[ebp]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv1864[ebp]
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fst	QWORD PTR tv3182[ebp]
	fstp	QWORD PTR _dc12dv$[ebp+eax*8+48]

; 1036 :   dc12dv[2][i] = (q11*side[0][i]*q22 + q21*side[0][i]*q12 + q21*2*side[1][i]*q22                 )/2;

	fld	QWORD PTR tv1873[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv1871[ebp]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv1877[ebp]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fst	QWORD PTR tv7568[ebp]
	fst	QWORD PTR _dc12dv$[ebp+eax*8+96]

; 1037 :   dc21dv[1][i] = dc12dv[1][i];

	fld	QWORD PTR tv3182[ebp]
	fstp	QWORD PTR _dc21dv$[ebp+eax*8+48]

; 1038 :   dc21dv[2][i] = dc12dv[2][i];

	fstp	QWORD PTR _dc21dv$[ebp+eax*8+96]

; 1039 :   dc22dv[1][i] = (q12*2*side[0][i]*q12 + q12*side[1][i]*q22 + q22*side[1][i]*q12                 )/2;

	fld	QWORD PTR tv1908[ebp]
	fmul	QWORD PTR [ecx+eax*8]
	fmul	ST(0), ST(4)
	fld	QWORD PTR [esi+eax*8]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [esi+eax*8]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	inc	eax
	fst	QWORD PTR tv7583[ebp]
	fstp	QWORD PTR _dc22dv$[ebp+eax*8+40]

; 1040 :   dc22dv[2][i] = (q12*side[0][i]*q22 + q22*side[0][i]*q12 + q22*2*side[1][i]*q22                 )/2;

	fld	QWORD PTR [ecx+eax*8-8]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(3)
	fld	QWORD PTR [ecx+eax*8-8]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv1926[ebp]
	fmul	QWORD PTR [esi+eax*8-8]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fst	QWORD PTR tv7597[ebp]
	fstp	QWORD PTR _dc22dv$[ebp+eax*8+88]

; 1041 :      dc11dv[0][i] = -(dc11dv[1][i] + dc11dv[2][i]);

	fld	QWORD PTR tv7546[ebp]
	fadd	QWORD PTR tv7528[ebp]
	fchs
	fstp	QWORD PTR _dc11dv$[ebp+eax*8-8]

; 1042 :      dc12dv[0][i] = -(dc12dv[1][i] + dc12dv[2][i]);

	fld	QWORD PTR tv7568[ebp]
	fadd	QWORD PTR tv3182[ebp]
	fchs
	fst	QWORD PTR _dc12dv$[ebp+eax*8-8]

; 1043 :      dc21dv[0][i] = -(dc21dv[1][i] + dc21dv[2][i]);

	fstp	QWORD PTR _dc21dv$[ebp+eax*8-8]

; 1044 :      dc22dv[0][i] = -(dc22dv[1][i] + dc22dv[2][i]);

	fld	QWORD PTR tv7597[ebp]
	fadd	QWORD PTR tv7583[ebp]
	fchs
	fstp	QWORD PTR _dc22dv$[ebp+eax*8-8]
	cmp	eax, edx
	jl	$LL77@general_li@2
$LN59@general_li@2:

; 1045 :   }
; 1046 : 
; 1047 : 
; 1048 :   for ( j = 0 ; j < FACET_VERTS  ; j++ )

	fld	QWORD PTR _area$[ebp]
	mov	DWORD PTR tv3910[ebp], 0
	fld	QWORD PTR _elastic_coeff$[ebp+112]
	xor	ecx, ecx
$LN65@general_li@2:

; 1049 :      for ( i = 0 ; i < SDIM  ; i++ )

	xor	eax, eax
	test	edx, edx
	jle	$LN24@general_li@2
	fstp	ST(1)
$LN82@general_li@2:
	fstp	ST(0)
	lea	esi, DWORD PTR [ecx+eax*8]
	fstp	ST(0)
	lea	esi, DWORD PTR _dc11dv$[ebp+esi]

; 1050 :      { f_info->grad[j][i] = area*(
; 1051 :            c11*dc11dv[j][i]*elastic_coeff[0][0][0][0] 
; 1052 :          + c11*dc12dv[j][i]*elastic_coeff[0][0][0][1] 
; 1053 :          + c11*dc22dv[j][i]*elastic_coeff[0][0][1][1] 
; 1054 :          + c11*dc21dv[j][i]*elastic_coeff[0][0][1][0] 
; 1055 :          + c12*dc11dv[j][i]*elastic_coeff[0][1][0][0] 
; 1056 :          + c12*dc12dv[j][i]*elastic_coeff[0][1][0][1] 
; 1057 :          + c12*dc22dv[j][i]*elastic_coeff[0][1][1][1] 
; 1058 :          + c12*dc21dv[j][i]*elastic_coeff[0][1][1][0] 
; 1059 :          + c21*dc11dv[j][i]*elastic_coeff[1][0][0][0] 
; 1060 :          + c21*dc12dv[j][i]*elastic_coeff[1][0][0][1] 
; 1061 :          + c21*dc22dv[j][i]*elastic_coeff[1][0][1][1] 
; 1062 :          + c21*dc21dv[j][i]*elastic_coeff[1][0][1][0] 
; 1063 :          + c22*dc11dv[j][i]*elastic_coeff[1][1][0][0] 
; 1064 :          + c22*dc12dv[j][i]*elastic_coeff[1][1][0][1] 
; 1065 :          + c22*dc22dv[j][i]*elastic_coeff[1][1][1][1] 
; 1066 :          + c22*dc21dv[j][i]*elastic_coeff[1][1][1][0]);

	fld	QWORD PTR [esi]
	lea	edx, DWORD PTR [ecx+eax*8]
	fmul	ST(0), ST(5)
	lea	edx, DWORD PTR _dc12dv$[ebp+edx]
	lea	edi, DWORD PTR [ecx+eax*8]
	lea	edi, DWORD PTR _dc22dv$[ebp+edi]
	fstp	QWORD PTR tv7660[ebp]
	lea	ebx, DWORD PTR [ecx+eax*8]
	fld	ST(4)
	lea	ebx, DWORD PTR _dc21dv$[ebp+ebx]
	fmul	QWORD PTR [edx]
	fstp	QWORD PTR tv7666[ebp]
	fld	ST(4)
	fmul	QWORD PTR [edi]
	fstp	QWORD PTR tv7672[ebp]
	fld	QWORD PTR [ebx]
	fmul	ST(0), ST(5)
	fstp	QWORD PTR tv7678[ebp]
	fld	QWORD PTR [esi]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR _elastic_coeff$[ebp]
	fld	ST(1)
	fmul	QWORD PTR [edx]
	fmul	QWORD PTR _elastic_coeff$[ebp+8]
	faddp	ST(1), ST(0)
	fld	ST(1)
	fmul	QWORD PTR [edi]
	fmul	QWORD PTR _elastic_coeff$[ebp+24]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR _elastic_coeff$[ebp+16]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv7660[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv7666[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+40]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv7672[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+56]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv7678[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+48]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv7660[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+64]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv7666[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+72]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv7672[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+88]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv7678[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+80]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [esi]
	fmul	ST(0), ST(5)
	fmul	QWORD PTR _elastic_coeff$[ebp+96]
	faddp	ST(1), ST(0)
	fld	ST(4)
	fmul	QWORD PTR [edx]
	fmul	QWORD PTR _elastic_coeff$[ebp+104]
	faddp	ST(1), ST(0)
	fld	ST(4)
	fmul	QWORD PTR [edi]
	fmul	QWORD PTR _elastic_coeff$[ebp+120]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx]
	fmul	ST(0), ST(5)
	fld	QWORD PTR _elastic_coeff$[ebp+112]
	fmul	ST(1), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _area$[ebp]
	fmul	ST(1), ST(0)
	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	fxch	ST(1)
	mov	edx, DWORD PTR [edx+1336]
	mov	esi, DWORD PTR tv3910[ebp]
	mov	edx, DWORD PTR [esi+edx]
	fstp	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _web+616
	inc	eax
	cmp	eax, edx
	jl	$LN82@general_li@2

; 1049 :      for ( i = 0 ; i < SDIM  ; i++ )

	fld	QWORD PTR __real@3fe0000000000000
	fxch	ST(2)
$LN24@general_li@2:

; 1045 :   }
; 1046 : 
; 1047 : 
; 1048 :   for ( j = 0 ; j < FACET_VERTS  ; j++ )

	add	DWORD PTR tv3910[ebp], 4
	add	ecx, 48					; 00000030H
	cmp	ecx, 144				; 00000090H
	jl	$LN65@general_li@2

; 1067 :       /* don't need to divide by 2 here, since only doing 
; 1068 :          derivative of second term and using symmetry */
; 1069 :      }
; 1070 : 
; 1071 :   if ( mode == METHOD_GRADIENT ) return energy;

	cmp	DWORD PTR _mode$[ebp], 4321		; 000010e1H
	jne	SHORT $LN19@general_li@2
	fstp	ST(3)
	fstp	ST(6)
	fstp	ST(4)
	fstp	ST(2)
	fstp	ST(0)
	fstp	ST(2)
	jmp	$LN120@general_li@2
$LN19@general_li@2:

; 1072 : 
; 1073 :   /* hessian */
; 1074 : 
; 1075 :   for ( i = 0 ; i < SDIM  ; i++ )

	test	edx, edx
	jle	$LN91@general_li@2
	fstp	ST(1)
	xor	edi, edi
	fstp	ST(0)
	mov	ebx, edx
	fld	QWORD PTR _q11$[ebp]
	fadd	ST(0), ST(0)
	fst	QWORD PTR tv1851[ebp]
	fld	QWORD PTR _q11$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv2041[ebp]
	fmul	QWORD PTR _q21$[ebp]
	fadd	ST(0), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv2048[ebp]
	fld	QWORD PTR _q21$[ebp]
	fadd	ST(0), ST(0)
	fst	QWORD PTR tv1876[ebp]
	fld	QWORD PTR _q21$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv2055[ebp]
	fld	QWORD PTR tv1851[ebp]
	fmul	ST(0), ST(5)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv2060[ebp]
	fmul	ST(0), ST(3)
	fld	ST(2)
	fmul	QWORD PTR _q11$[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv2067[ebp]
	fld	QWORD PTR tv1876[ebp]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv2074[ebp]
	fld	ST(3)
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv2091[ebp]
	fld	ST(3)
	fmulp	ST(5), ST(0)
	fld	ST(4)
	faddp	ST(5), ST(0)
	fxch	ST(4)
	fmul	ST(0), ST(1)
	fld	ST(3)
	fmulp	ST(5), ST(0)
	fxch	ST(4)
	fmulp	ST(3), ST(0)
	fmulp	ST(2), ST(0)
	fld	QWORD PTR tv2048[ebp]
	fld	QWORD PTR tv2067[ebp]
	jmp	SHORT $LN62@general_li@2
$LN98@general_li@2:
	fxch	ST(3)
	fxch	ST(4)
$LN62@general_li@2:

; 1076 :   {
; 1077 :      ddc11dv[1][i][1] = (q11*2*q11)/2;

	fld	QWORD PTR tv2041[ebp]

; 1078 :      ddc11dv[1][i][2] = ( q11*q21 + q21*q11 )/2;
; 1079 : 
; 1080 :      ddc11dv[2][i][1] = (q11*q21 + q21*q11 )/2;
; 1081 :      ddc11dv[2][i][2] = (q21*2*q21)/2;
; 1082 :    
; 1083 :      ddc12dv[1][i][1] = (q11*2*q12 )/2;
; 1084 :      ddc12dv[1][i][2] = ( q11*q22 + q21*q12 )/2;
; 1085 : 
; 1086 :   ddc12dv[2][i][1] = (q11*q22 + q21*q12)/2;
; 1087 :   ddc12dv[2][i][2] = (q21*2*q22 )/2;
; 1088 : 
; 1089 :   ddc21dv[1][i][1] = ddc12dv[1][i][1];
; 1090 :   ddc21dv[1][i][2] = ddc12dv[1][i][2];
; 1091 : 
; 1092 :      ddc21dv[2][i][1] = ddc12dv[2][i][1];
; 1093 :      ddc21dv[2][i][2] = ddc12dv[2][i][2];
; 1094 : 
; 1095 :      ddc22dv[1][i][1] = (q12*2*q12)/2;
; 1096 :      ddc22dv[1][i][2] = (q12*q22 + q22*q12)/2;
; 1097 : 
; 1098 :      ddc22dv[2][i][1] = (q12*q22 + q22*q12)/2;
; 1099 :      ddc22dv[2][i][2] = (q22*2*q22)/2;
; 1100 : 
; 1101 :      for ( j = 1 ; j < FACET_VERTS;  j++ )

	mov	ecx, edi
	fstp	QWORD PTR _ddc11dv$[ebp+edi+152]
	mov	eax, edi
	fxch	ST(1)
	mov	esi, 2
	fst	QWORD PTR _ddc11dv$[ebp+edi+160]
	fst	QWORD PTR _ddc11dv$[ebp+edi+296]
	fld	QWORD PTR tv2055[ebp]
	fstp	QWORD PTR _ddc11dv$[ebp+edi+304]
	fld	QWORD PTR tv2060[ebp]
	fstp	QWORD PTR _ddc12dv$[ebp+edi+152]
	fxch	ST(1)
	fst	QWORD PTR _ddc12dv$[ebp+edi+160]
	fst	QWORD PTR _ddc12dv$[ebp+edi+296]
	fld	QWORD PTR tv2074[ebp]
	fstp	QWORD PTR _ddc12dv$[ebp+edi+304]
	fld	QWORD PTR tv2060[ebp]
	fstp	QWORD PTR _ddc21dv$[ebp+edi+152]
	fst	QWORD PTR _ddc21dv$[ebp+edi+160]
	fst	QWORD PTR _ddc21dv$[ebp+edi+296]
	fld	QWORD PTR tv2074[ebp]
	fstp	QWORD PTR _ddc21dv$[ebp+edi+304]
	fld	QWORD PTR tv2091[ebp]
	fstp	QWORD PTR _ddc22dv$[ebp+edi+152]
	fxch	ST(4)
	fst	QWORD PTR _ddc22dv$[ebp+edi+160]
	fst	QWORD PTR _ddc22dv$[ebp+edi+296]
	fxch	ST(3)
	fst	QWORD PTR _ddc22dv$[ebp+edi+304]
$LN15@general_li@2:

; 1102 :      { 
; 1103 :         ddc11dv[0][i][j] = -(ddc11dv[1][i][j] + ddc11dv[2][i][j]);

	fld	QWORD PTR _ddc11dv$[ebp+eax+296]
	add	eax, 8
	fadd	QWORD PTR _ddc11dv$[ebp+eax+144]
	add	ecx, 144				; 00000090H
	dec	esi
	fchs
	fstp	QWORD PTR _ddc11dv$[ebp+eax]

; 1104 :         ddc12dv[0][i][j] = -(ddc12dv[1][i][j] + ddc12dv[2][i][j]);

	fld	QWORD PTR _ddc12dv$[ebp+eax+288]
	fadd	QWORD PTR _ddc12dv$[ebp+eax+144]
	fchs
	fstp	QWORD PTR _ddc12dv$[ebp+eax]

; 1105 :         ddc21dv[0][i][j] = -(ddc21dv[1][i][j] + ddc21dv[2][i][j]);

	fld	QWORD PTR _ddc21dv$[ebp+eax+288]
	fadd	QWORD PTR _ddc21dv$[ebp+eax+144]
	fchs
	fstp	QWORD PTR _ddc21dv$[ebp+eax]

; 1106 :         ddc22dv[0][i][j] = -(ddc22dv[1][i][j] + ddc22dv[2][i][j]);

	fld	QWORD PTR _ddc22dv$[ebp+eax+288]
	fadd	QWORD PTR _ddc22dv$[ebp+eax+144]
	fchs
	fstp	QWORD PTR _ddc22dv$[ebp+eax]

; 1107 :         ddc11dv[j][i][0] = -(ddc11dv[j][i][1] + ddc11dv[j][i][2]);

	fld	QWORD PTR _ddc11dv$[ebp+ecx+16]
	fadd	QWORD PTR _ddc11dv$[ebp+ecx+8]
	fchs
	fstp	QWORD PTR _ddc11dv$[ebp+ecx]

; 1108 :         ddc12dv[j][i][0] = -(ddc12dv[j][i][1] + ddc12dv[j][i][2]);

	fld	QWORD PTR _ddc12dv$[ebp+ecx+16]
	fadd	QWORD PTR _ddc12dv$[ebp+ecx+8]
	fchs
	fstp	QWORD PTR _ddc12dv$[ebp+ecx]

; 1109 :         ddc21dv[j][i][0] = -(ddc21dv[j][i][1] + ddc21dv[j][i][2]);

	fld	QWORD PTR _ddc21dv$[ebp+ecx+16]
	fadd	QWORD PTR _ddc21dv$[ebp+ecx+8]
	fchs
	fstp	QWORD PTR _ddc21dv$[ebp+ecx]

; 1110 :         ddc22dv[j][i][0] = -(ddc22dv[j][i][1] + ddc22dv[j][i][2]);

	fld	QWORD PTR _ddc22dv$[ebp+ecx+16]
	fadd	QWORD PTR _ddc22dv$[ebp+ecx+8]
	fchs
	fstp	QWORD PTR _ddc22dv$[ebp+ecx]
	jne	$LN15@general_li@2

; 1111 :      }
; 1112 :      ddc11dv[0][i][0] = -(ddc11dv[1][i][0] + ddc11dv[2][i][0]);

	fld	QWORD PTR _ddc11dv$[ebp+edi+288]
	add	edi, 24					; 00000018H
	dec	ebx
	fadd	QWORD PTR _ddc11dv$[ebp+edi+120]
	fchs
	fstp	QWORD PTR _ddc11dv$[ebp+edi-24]

; 1113 :      ddc12dv[0][i][0] = -(ddc12dv[1][i][0] + ddc12dv[2][i][0]);

	fld	QWORD PTR _ddc12dv$[ebp+edi+264]
	fadd	QWORD PTR _ddc12dv$[ebp+edi+120]
	fchs
	fstp	QWORD PTR _ddc12dv$[ebp+edi-24]

; 1114 :      ddc21dv[0][i][0] = -(ddc21dv[1][i][0] + ddc21dv[2][i][0]);

	fld	QWORD PTR _ddc21dv$[ebp+edi+264]
	fadd	QWORD PTR _ddc21dv$[ebp+edi+120]
	fchs
	fstp	QWORD PTR _ddc21dv$[ebp+edi-24]

; 1115 :      ddc22dv[0][i][0] = -(ddc22dv[1][i][0] + ddc22dv[2][i][0]);

	fld	QWORD PTR _ddc22dv$[ebp+edi+264]
	fadd	QWORD PTR _ddc22dv$[ebp+edi+120]
	fchs
	fstp	QWORD PTR _ddc22dv$[ebp+edi-24]
	jne	$LN98@general_li@2

; 1072 : 
; 1073 :   /* hessian */
; 1074 : 
; 1075 :   for ( i = 0 ; i < SDIM  ; i++ )

	fstp	ST(4)
	fstp	ST(3)
	fstp	ST(2)
	fstp	ST(0)
	fld	QWORD PTR _area$[ebp]
	fld	QWORD PTR _elastic_coeff$[ebp+112]
	fxch	ST(2)
$LN16@general_li@2:

; 1116 :   }
; 1117 : 
; 1118 :   for ( j = 0 ; j < FACET_VERTS  ; j++ )

	xor	edi, edi
	xor	ecx, ecx
	mov	DWORD PTR tv7243[ebp], ecx
	mov	DWORD PTR tv7245[ebp], edi
	mov	DWORD PTR tv7247[ebp], edi
$LN66@general_li@2:

; 1119 :      for ( i = 0 ; i < SDIM  ; i++ )

	xor	esi, esi
	mov	DWORD PTR _i$[ebp], esi
	test	edx, edx
	jle	$LN11@general_li@2
	mov	DWORD PTR tv7033[ebp], edi
$LN60@general_li@2:

; 1120 :         for ( jj = 0 ; jj < FACET_VERTS  ; jj++ )

	xor	ebx, ebx
	mov	DWORD PTR tv5918[ebp], ebx
	mov	DWORD PTR tv6133[ebp], ebx
	mov	DWORD PTR tv6135[ebp], ecx
$LN61@general_li@2:

; 1121 :         {
; 1122 :           f_info->hess[j][jj][i][i] += area*(
; 1123 :            c11*ddc11dv[j][i][jj]*elastic_coeff[0][0][0][0] 
; 1124 :          + c11*ddc12dv[j][i][jj]*elastic_coeff[0][0][0][1] 
; 1125 :          + c11*ddc22dv[j][i][jj]*elastic_coeff[0][0][1][1] 
; 1126 :          + c11*ddc21dv[j][i][jj]*elastic_coeff[0][0][1][0] 
; 1127 :          + c12*ddc11dv[j][i][jj]*elastic_coeff[0][1][0][0] 
; 1128 :          + c12*ddc12dv[j][i][jj]*elastic_coeff[0][1][0][1] 
; 1129 :          + c12*ddc22dv[j][i][jj]*elastic_coeff[0][1][1][1] 
; 1130 :          + c12*ddc21dv[j][i][jj]*elastic_coeff[0][1][1][0] 
; 1131 :          + c21*ddc11dv[j][i][jj]*elastic_coeff[1][0][0][0] 
; 1132 :          + c21*ddc12dv[j][i][jj]*elastic_coeff[1][0][0][1] 
; 1133 :          + c21*ddc22dv[j][i][jj]*elastic_coeff[1][0][1][1] 
; 1134 :          + c21*ddc21dv[j][i][jj]*elastic_coeff[1][0][1][0] 
; 1135 :          + c22*ddc11dv[j][i][jj]*elastic_coeff[1][1][0][0] 
; 1136 :          + c22*ddc12dv[j][i][jj]*elastic_coeff[1][1][0][1] 
; 1137 :          + c22*ddc22dv[j][i][jj]*elastic_coeff[1][1][1][1] 
; 1138 :          + c22*ddc21dv[j][i][jj]*elastic_coeff[1][1][1][0]);

	fld	QWORD PTR _ddc11dv$[ebp+ecx]
	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	fmul	ST(0), ST(5)
	mov	edx, DWORD PTR [eax+1340]
	mov	eax, DWORD PTR tv7247[ebp]
	mov	edx, DWORD PTR [eax+edx]
	fstp	QWORD PTR tv6204[ebp]
	mov	eax, DWORD PTR tv5918[ebp]
	fld	QWORD PTR _ddc12dv$[ebp+ecx]
	mov	edx, DWORD PTR [edx+eax]
	fmul	ST(0), ST(5)
	mov	eax, DWORD PTR [edx+esi*4]
	lea	eax, DWORD PTR [eax+esi*8]
	fstp	QWORD PTR tv6212[ebp]
	fld	QWORD PTR _ddc22dv$[ebp+ecx]
	fmul	ST(0), ST(5)
	fstp	QWORD PTR tv6220[ebp]
	fld	QWORD PTR _ddc21dv$[ebp+ecx]
	fmul	ST(0), ST(5)
	fstp	QWORD PTR tv6228[ebp]
	fld	QWORD PTR _ddc12dv$[ebp+ecx]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR _elastic_coeff$[ebp+8]
	fld	QWORD PTR _ddc11dv$[ebp+ecx]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR _elastic_coeff$[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddc22dv$[ebp+ecx]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR _elastic_coeff$[ebp+24]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddc21dv$[ebp+ecx]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR _elastic_coeff$[ebp+16]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6204[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6212[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+40]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6220[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+56]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6228[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+48]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6204[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+64]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6212[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+72]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6220[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+88]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6228[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+80]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddc11dv$[ebp+ecx]
	fmul	ST(0), ST(5)
	fmul	QWORD PTR _elastic_coeff$[ebp+96]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddc12dv$[ebp+ecx]
	fmul	ST(0), ST(5)
	fmul	QWORD PTR _elastic_coeff$[ebp+104]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddc22dv$[ebp+ecx]
	fmul	ST(0), ST(5)
	fmul	QWORD PTR _elastic_coeff$[ebp+120]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddc21dv$[ebp+ecx]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]

; 1139 : 
; 1140 : 
; 1141 :           for ( ii = 0 ; ii < SDIM  ; ii++ )

	mov	edx, DWORD PTR _web+616
	xor	eax, eax
	test	edx, edx
	jle	$LN5@general_li@2
$LN3@general_li@2:
	lea	edi, DWORD PTR [ebx+eax*8]
	lea	edi, DWORD PTR _dc22dv$[ebp+edi]
	mov	DWORD PTR tv6507[ebp], edi
	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edi, DWORD PTR [edi+1340]
	lea	ecx, DWORD PTR [ebx+eax*8]
	lea	edx, DWORD PTR [ebx+eax*8]
	lea	esi, DWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR tv7247[ebp]
	mov	edi, DWORD PTR [ebx+edi]
	mov	ebx, DWORD PTR tv5918[ebp]
	mov	edi, DWORD PTR [edi+ebx]
	mov	ebx, DWORD PTR _i$[ebp]
	mov	edi, DWORD PTR [edi+ebx*4]
	lea	ecx, DWORD PTR _dc11dv$[ebp+ecx]
	lea	ebx, DWORD PTR [edi+eax*8]

; 1142 :              f_info->hess[j][jj][i][ii] += area*(
; 1143 :                  dc11dv[jj][ii]*dc11dv[j][i]*elastic_coeff[0][0][0][0] 
; 1144 :                + dc11dv[jj][ii]*dc12dv[j][i]*elastic_coeff[0][0][0][1] 
; 1145 :                + dc11dv[jj][ii]*dc22dv[j][i]*elastic_coeff[0][0][1][1] 
; 1146 :                + dc11dv[jj][ii]*dc21dv[j][i]*elastic_coeff[0][0][1][0] 
; 1147 :                + dc12dv[jj][ii]*dc11dv[j][i]*elastic_coeff[0][1][0][0] 
; 1148 :                + dc12dv[jj][ii]*dc12dv[j][i]*elastic_coeff[0][1][0][1] 
; 1149 :                + dc12dv[jj][ii]*dc22dv[j][i]*elastic_coeff[0][1][1][1] 
; 1150 :                + dc12dv[jj][ii]*dc21dv[j][i]*elastic_coeff[0][1][1][0] 
; 1151 :                + dc21dv[jj][ii]*dc11dv[j][i]*elastic_coeff[1][0][0][0] 
; 1152 :                + dc21dv[jj][ii]*dc12dv[j][i]*elastic_coeff[1][0][0][1] 
; 1153 :                + dc21dv[jj][ii]*dc22dv[j][i]*elastic_coeff[1][0][1][1] 
; 1154 :                + dc21dv[jj][ii]*dc21dv[j][i]*elastic_coeff[1][0][1][0] 
; 1155 :                + dc22dv[jj][ii]*dc11dv[j][i]*elastic_coeff[1][1][0][0] 
; 1156 :                + dc22dv[jj][ii]*dc12dv[j][i]*elastic_coeff[1][1][0][1] 
; 1157 :                + dc22dv[jj][ii]*dc22dv[j][i]*elastic_coeff[1][1][1][1] 
; 1158 :                + dc22dv[jj][ii]*dc21dv[j][i]*elastic_coeff[1][1][1][0]);

	mov	edi, DWORD PTR tv7033[ebp]
	fld	QWORD PTR _dc12dv$[ebp+edi]
	lea	edx, DWORD PTR _dc12dv$[ebp+edx]
	fmul	QWORD PTR [ecx]
	lea	esi, DWORD PTR _dc21dv$[ebp+esi]
	fmul	QWORD PTR _elastic_coeff$[ebp+8]
	fld	QWORD PTR _dc11dv$[ebp+edi]
	fmul	QWORD PTR [ecx]
	fmul	QWORD PTR _elastic_coeff$[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dc22dv$[ebp+edi]
	fmul	QWORD PTR [ecx]
	fmul	QWORD PTR _elastic_coeff$[ebp+24]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dc21dv$[ebp+edi]
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv6507[ebp]
	fmul	QWORD PTR _elastic_coeff$[ebp+16]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx]
	fmul	QWORD PTR _dc11dv$[ebp+edi]
	fmul	QWORD PTR _elastic_coeff$[ebp+32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dc12dv$[ebp+edi]
	fmul	QWORD PTR [edx]
	fmul	QWORD PTR _elastic_coeff$[ebp+40]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx]
	fmul	QWORD PTR _dc22dv$[ebp+edi]
	fmul	QWORD PTR _elastic_coeff$[ebp+56]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dc21dv$[ebp+edi]
	fmul	QWORD PTR [edx]
	fmul	QWORD PTR _elastic_coeff$[ebp+48]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dc11dv$[ebp+edi]
	fmul	QWORD PTR [esi]
	fmul	QWORD PTR _elastic_coeff$[ebp+64]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dc12dv$[ebp+edi]
	fmul	QWORD PTR [esi]
	fmul	QWORD PTR _elastic_coeff$[ebp+72]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dc22dv$[ebp+edi]
	fmul	QWORD PTR [esi]
	fmul	QWORD PTR _elastic_coeff$[ebp+88]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dc21dv$[ebp+edi]
	fmul	QWORD PTR [esi]
	fmul	QWORD PTR _elastic_coeff$[ebp+80]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx]
	fmul	QWORD PTR _dc11dv$[ebp+edi]
	fmul	QWORD PTR _elastic_coeff$[ebp+96]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx]
	fmul	QWORD PTR _dc12dv$[ebp+edi]
	fmul	QWORD PTR _elastic_coeff$[ebp+104]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx]
	fmul	QWORD PTR _dc22dv$[ebp+edi]
	fmul	QWORD PTR _elastic_coeff$[ebp+120]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx]
	fmul	QWORD PTR _dc21dv$[ebp+edi]
	fmul	ST(0), ST(4)
	inc	eax
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fadd	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]
	mov	edx, DWORD PTR _web+616
	mov	ebx, DWORD PTR tv6133[ebp]
	cmp	eax, edx
	jl	$LN3@general_li@2

; 1139 : 
; 1140 : 
; 1141 :           for ( ii = 0 ; ii < SDIM  ; ii++ )

	mov	ecx, DWORD PTR tv6135[ebp]
	mov	esi, DWORD PTR _i$[ebp]
$LN5@general_li@2:

; 1120 :         for ( jj = 0 ; jj < FACET_VERTS  ; jj++ )

	add	DWORD PTR tv5918[ebp], 4
	add	ebx, 48					; 00000030H
	add	ecx, 8
	mov	DWORD PTR tv6135[ebp], ecx
	mov	DWORD PTR tv6133[ebp], ebx
	cmp	ebx, 144				; 00000090H
	jl	$LN61@general_li@2

; 1119 :      for ( i = 0 ; i < SDIM  ; i++ )

	inc	esi
	add	edi, 8
	mov	DWORD PTR _i$[ebp], esi
	mov	DWORD PTR tv7033[ebp], edi
	cmp	esi, edx
	jl	$LN60@general_li@2
$LN11@general_li@2:

; 1116 :   }
; 1117 : 
; 1118 :   for ( j = 0 ; j < FACET_VERTS  ; j++ )

	mov	eax, DWORD PTR tv7247[ebp]
	mov	edi, DWORD PTR tv7245[ebp]
	mov	ecx, DWORD PTR tv7243[ebp]
	add	eax, 4
	add	edi, 48					; 00000030H
	add	ecx, 144				; 00000090H
	mov	DWORD PTR tv7247[ebp], eax
	mov	DWORD PTR tv7245[ebp], edi
	mov	DWORD PTR tv7243[ebp], ecx
	cmp	eax, 12					; 0000000cH
	jl	$LN66@general_li@2
	fstp	ST(0)
	fstp	ST(3)
	fstp	ST(1)
$LN120@general_li@2:

; 1159 : 
; 1160 :          }
; 1161 : 
; 1162 :   return energy;
; 1163 : }  /* end general_linear_elastic_all() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(1)
	pop	edi
	fstp	ST(0)
	fld	QWORD PTR _energy$[ebp]
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN91@general_li@2:

; 1072 : 
; 1073 :   /* hessian */
; 1074 : 
; 1075 :   for ( i = 0 ; i < SDIM  ; i++ )

	fstp	ST(5)
	fstp	ST(3)
	fstp	ST(0)
	jmp	$LN16@general_li@2
_general_linear_elastic_all ENDP
_TEXT	ENDS
PUBLIC	_general_linear_elastic_energy
; Function compile flags: /Ogtp
;	COMDAT _general_linear_elastic_energy
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_general_linear_elastic_energy PROC			; COMDAT

; 1176 : {

	push	ebp
	mov	ebp, esp

; 1177 :  return general_linear_elastic_all(f_info,METHOD_VALUE);

	mov	eax, DWORD PTR _f_info$[ebp]
	push	1767					; 000006e7H
	push	eax
	call	_general_linear_elastic_all
	add	esp, 8

; 1178 : }

	pop	ebp
	ret	0
_general_linear_elastic_energy ENDP
_TEXT	ENDS
PUBLIC	_general_linear_elastic_gradient
; Function compile flags: /Ogtp
;	COMDAT _general_linear_elastic_gradient
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_general_linear_elastic_gradient PROC			; COMDAT

; 1193 : {

	push	ebp
	mov	ebp, esp

; 1194 :  return general_linear_elastic_all(f_info,METHOD_GRADIENT);

	mov	eax, DWORD PTR _f_info$[ebp]
	push	4321					; 000010e1H
	push	eax
	call	_general_linear_elastic_all
	add	esp, 8

; 1195 : }

	pop	ebp
	ret	0
_general_linear_elastic_gradient ENDP
_TEXT	ENDS
PUBLIC	_general_linear_elastic_hessian
; Function compile flags: /Ogtp
;	COMDAT _general_linear_elastic_hessian
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_general_linear_elastic_hessian PROC			; COMDAT

; 1209 : {

	push	ebp
	mov	ebp, esp

; 1210 :  return general_linear_elastic_all(f_info,METHOD_HESSIAN);

	mov	eax, DWORD PTR _f_info$[ebp]
	push	8763					; 0000223bH
	push	eax
	call	_general_linear_elastic_all
	add	esp, 8

; 1211 : }

	pop	ebp
	ret	0
_general_linear_elastic_hessian ENDP
_TEXT	ENDS
PUBLIC	??_C@_0FC@GDDBCPFN@Facet?5extra?5attribute?5form_facto@ ; `string'
PUBLIC	??_C@_0DD@IMLKMPKE@dirichlet_elastic?5method?5only?5fo@ ; `string'
PUBLIC	??_C@_0DB@NCNEEAIH@dirichlet_elastic?5method?5only?5fo@ ; `string'
PUBLIC	_dirichlet_elastic_init
;	COMDAT ??_C@_0FC@GDDBCPFN@Facet?5extra?5attribute?5form_facto@
CONST	SEGMENT
??_C@_0FC@GDDBCPFN@Facet?5extra?5attribute?5form_facto@ DB 'Facet extra a'
	DB	'ttribute form_factors real[3] missing. Needed by dirichlet_el'
	DB	'astic.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@IMLKMPKE@dirichlet_elastic?5method?5only?5fo@
CONST	SEGMENT
??_C@_0DD@IMLKMPKE@dirichlet_elastic?5method?5only?5fo@ DB 'dirichlet_ela'
	DB	'stic method only for SOAPFILM model.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@NCNEEAIH@dirichlet_elastic?5method?5only?5fo@
CONST	SEGMENT
??_C@_0DB@NCNEEAIH@dirichlet_elastic?5method?5only?5fo@ DB 'dirichlet_ela'
	DB	'stic method only for LINEAR model.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _dirichlet_elastic_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_dirichlet_elastic_init PROC				; COMDAT

; 1250 : 
; 1251 :   if ( web.modeltype != LINEAR )

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN4@dirichlet_

; 1252 :      kb_error(4529,"dirichlet_elastic method only for LINEAR model.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DB@NCNEEAIH@dirichlet_elastic?5method?5only?5fo@
	push	4529					; 000011b1H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN4@dirichlet_:

; 1253 : 
; 1254 :   if ( web.dimension != 2 )

	cmp	DWORD PTR _web+620, 2
	je	SHORT $LN3@dirichlet_

; 1255 :      kb_error(4150,"dirichlet_elastic method only for SOAPFILM model.\n",
; 1256 :         RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DD@IMLKMPKE@dirichlet_elastic?5method?5only?5fo@
	push	4150					; 00001036H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN3@dirichlet_:

; 1257 : 
; 1258 :   form_factors_attr = find_attribute(FACET,FORM_FACTORS_NAME);

	push	OFFSET ??_C@_0N@KCLCABBK@form_factors?$AA@
	push	2
	call	_find_attribute
	add	esp, 8
	mov	DWORD PTR _form_factors_attr, eax

; 1259 :   if ( form_factors_attr < 0 ) /* not found */

	test	eax, eax
	jns	SHORT $LN2@dirichlet_

; 1260 :      kb_error(4152,"Facet extra attribute form_factors real[3] missing. Needed by dirichlet_elastic.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0FC@GDDBCPFN@Facet?5extra?5attribute?5form_facto@
	push	4152					; 00001038H
	call	_kb_error
	mov	eax, DWORD PTR _form_factors_attr
	add	esp, 12					; 0000000cH
$LN2@dirichlet_:

; 1261 : 
; 1262 :   if ( EXTRAS(FACET)[form_factors_attr].array_spec.datacount < 3 )

	mov	ecx, DWORD PTR _dymem
	imul	eax, 240				; 000000f0H
	add	eax, DWORD PTR _web+328
	cmp	DWORD PTR [eax+ecx+88], 3
	jge	SHORT $LN1@dirichlet_

; 1263 :      kb_error(4153,"Facet extra attribute form_factors must have size 3.\n",
; 1264 :         RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DG@EAIIMJGF@Facet?5extra?5attribute?5form_facto@
	push	4153					; 00001039H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@dirichlet_:

; 1265 : } // end dirichlet_elastic_init()

	ret	0
_dirichlet_elastic_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DH@JHOLKHE@dirichlet_elastic?3?5Facet?5?$CFs?5has?5@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_dirichlet_elastic_all
;	COMDAT ??_C@_0DH@JHOLKHE@dirichlet_elastic?3?5Facet?5?$CFs?5has?5@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0DH@JHOLKHE@dirichlet_elastic?3?5Facet?5?$CFs?5has?5@ DB 'dirichlet'
	DB	'_elastic: Facet %s has unstrained area <= 0.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\method5.c
CONST	ENDS
;	COMDAT _dirichlet_elastic_all
_TEXT	SEGMENT
tv1278 = -1204						; size = 8
_f11$ = -1196						; size = 8
_area$ = -1188						; size = 8
_energy$ = -1180					; size = 8
_q11$ = -1180						; size = 8
_q12$ = -1172						; size = 8
_q22$ = -1164						; size = 8
_det$ = -1164						; size = 8
_dc11dv$ = -1156					; size = 144
_dc22dv$ = -1012					; size = 144
_ddc22dv$ = -868					; size = 432
_ddc11dv$ = -436					; size = 432
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_mode$ = 12						; size = 4
_dirichlet_elastic_all PROC				; COMDAT

; 1279 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1204				; 000004b4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx

; 1280 :   REAL *s;  /* pointer to extra attributes */
; 1281 :   REAL **side; 
; 1282 :   REAL q11,q12,q22;  /* Q entries */
; 1283 :   REAL det;    /* det S */
; 1284 :   REAL area;  /* reference area of facet */
; 1285 :   REAL f11,f12,f22;
; 1286 :   REAL c11,c22;
; 1287 :   REAL energy;
; 1288 :   REAL dc11dv[FACET_VERTS][MAXCOORD];
; 1289 :   REAL dc22dv[FACET_VERTS][MAXCOORD];
; 1290 :   REAL ddc11dv[FACET_VERTS][MAXCOORD][FACET_VERTS];
; 1291 :   REAL ddc22dv[FACET_VERTS][MAXCOORD][FACET_VERTS];
; 1292 :   int i,j,jj;
; 1293 : 
; 1294 :   s = (REAL*)get_extra(f_info->id,form_factors_attr);

	mov	ebx, DWORD PTR _form_factors_attr
	push	esi
	imul	ebx, 240				; 000000f0H
	push	edi
	mov	edi, DWORD PTR _f_info$[ebp]
	mov	ecx, DWORD PTR [edi]
	mov	eax, ecx
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	esi, DWORD PTR _web[eax+12]
	mov	eax, DWORD PTR _web[eax+104]
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+edx*4]
	mov	edx, DWORD PTR _dymem
	add	eax, ebx
	add	esi, DWORD PTR [eax+edx+64]

; 1295 :   det = s[0]*s[2] - s[1]*s[1];

	fld	QWORD PTR [esi+8]
	fld	QWORD PTR [esi+16]
	fmul	QWORD PTR [esi]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	fst	QWORD PTR _det$[ebp]

; 1296 :   if ( det <= 0.0 )

	fldz
	fcom	ST(1)
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN62@dirichlet_@2

; 1297 :   { if ( mode == METHOD_VALUE ) return 0.0;

	cmp	DWORD PTR _mode$[ebp], 1767		; 000006e7H

; 1300 :     kb_error(4154,errmsg,RECOVERABLE);

	fstp	ST(1)
	je	$LN29@dirichlet_@2

; 1298 :     sprintf(errmsg,"dirichlet_elastic: Facet %s has unstrained area <= 0.\n",
; 1299 :       ELNAME(f_info->id));

	fstp	ST(0)
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN31@dirichlet_@2
	and	ecx, 134217727				; 07ffffffH
	inc	ecx
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN32@dirichlet_@2
$LN31@dirichlet_@2:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN32@dirichlet_@2:
	push	eax
	push	OFFSET ??_C@_0DH@JHOLKHE@dirichlet_elastic?3?5Facet?5?$CFs?5has?5@
	push	OFFSET _errmsg
	call	_sprintf

; 1300 :     kb_error(4154,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	4154					; 0000103aH
	call	_kb_error
	fld	QWORD PTR _det$[ebp]
	add	esp, 24					; 00000018H
	jmp	SHORT $LN28@dirichlet_@2
$LN62@dirichlet_@2:
	fstp	ST(0)
$LN28@dirichlet_@2:

; 1301 :   }
; 1302 :   area = sqrt(det)/2;

	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000

; 1303 :   q11 = s[2]/det; q12 = -s[1]/det; q22 = s[0]/det;
; 1304 : 
; 1305 :   side = f_info->sides[0];

	mov	eax, DWORD PTR [edi+1276]
	mov	ebx, DWORD PTR [eax]
	fstp	QWORD PTR _area$[ebp]

; 1306 :   f11 = SDIM_dot(side[0],side[0]);

	mov	ecx, DWORD PTR _web+616
	fld	QWORD PTR [esi+16]
	mov	eax, DWORD PTR [ebx]
	fld	QWORD PTR _det$[ebp]
	push	ecx
	fdiv	ST(1), ST(0)
	push	eax
	push	eax
	fxch	ST(1)
	fstp	QWORD PTR _q11$[ebp]
	fld	QWORD PTR [esi+8]
	fdiv	ST(0), ST(1)
	fchs
	fstp	QWORD PTR _q12$[ebp]
	fdivr	QWORD PTR [esi]
	fstp	QWORD PTR _q22$[ebp]
	call	_dot
	fstp	QWORD PTR _f11$[ebp]

; 1307 :   f12 = SDIM_dot(side[0],side[1]);

	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR [ebx+4]
	mov	ecx, DWORD PTR [ebx]
	push	edx
	push	eax
	push	ecx
	call	_dot

; 1308 :   f22 = SDIM_dot(side[1],side[1]);
; 1309 : 
; 1310 :   c11 = f11*q11 + f12*q12;
; 1311 :   c22 = f12*q12 + f22*q22;

	fmul	QWORD PTR _q12$[ebp]
	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR [ebx+4]
	push	edx
	fstp	QWORD PTR tv1278[ebp]
	push	eax
	push	eax
	call	_dot
	fmul	QWORD PTR _q22$[ebp]
	fld	QWORD PTR tv1278[ebp]
	add	esp, 36					; 00000024H

; 1312 : 
; 1313 :   energy = (c11 + c22)*area; 
; 1314 : 
; 1315 :   if ( mode == METHOD_VALUE ) return energy;

	cmp	DWORD PTR _mode$[ebp], 1767		; 000006e7H
	fadd	ST(1), ST(0)
	fld	QWORD PTR _f11$[ebp]
	fld	QWORD PTR _q11$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _area$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _energy$[ebp]
	je	$LN99@dirichlet_@2

; 1316 : 
; 1317 :   /* gradient */
; 1318 : 
; 1319 :   for ( i = 0 ; i < SDIM  ; i++ )

	mov	esi, DWORD PTR _web+616
	fld	QWORD PTR __real@4000000000000000
	xor	eax, eax
	test	esi, esi
	jle	SHORT $LN58@dirichlet_@2
	mov	ecx, DWORD PTR [ebx+4]
	fstp	ST(2)
	mov	ebx, DWORD PTR [ebx]
	fstp	ST(0)
	fld	QWORD PTR _q12$[ebp]
$LN59@dirichlet_@2:

; 1320 :   {
; 1321 :      dc11dv[1][i] = 2*side[0][i]*q11 + side[1][i]*q12;

	fld	QWORD PTR [ecx+eax*8]
	inc	eax
	fmul	ST(0), ST(1)
	fld	QWORD PTR [ebx+eax*8-8]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(4)
	fadd	ST(0), ST(1)
	fst	QWORD PTR _dc11dv$[ebp+eax*8+40]

; 1322 :      dc11dv[2][i] =                          side[0][i]*q12;

	fld	QWORD PTR [ebx+eax*8-8]
	fmul	ST(0), ST(3)
	fst	QWORD PTR _dc11dv$[ebp+eax*8+88]

; 1323 :      dc22dv[1][i] = side[1][i]*q12;

	fxch	ST(2)
	fst	QWORD PTR _dc22dv$[ebp+eax*8+40]

; 1324 :      dc22dv[2][i] = side[0][i]*q12 + 2*side[1][i]*q22;

	fld	QWORD PTR [ecx+eax*8-8]
	fmul	ST(0), ST(5)
	fmul	QWORD PTR _q22$[ebp]
	fadd	ST(0), ST(3)
	fst	QWORD PTR _dc22dv$[ebp+eax*8+88]

; 1325 :      dc11dv[0][i] = -(dc11dv[1][i] + dc11dv[2][i]);

	fxch	ST(3)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fchs
	fstp	QWORD PTR _dc11dv$[ebp+eax*8-8]

; 1326 :      dc22dv[0][i] = -(dc22dv[1][i] + dc22dv[2][i]);

	faddp	ST(1), ST(0)
	fchs
	fstp	QWORD PTR _dc22dv$[ebp+eax*8-8]
	cmp	eax, esi
	jl	SHORT $LN59@dirichlet_@2

; 1316 : 
; 1317 :   /* gradient */
; 1318 : 
; 1319 :   for ( i = 0 ; i < SDIM  ; i++ )

	fld	QWORD PTR _area$[ebp]
	fld	QWORD PTR _energy$[ebp]
	jmp	SHORT $LN23@dirichlet_@2
$LN58@dirichlet_@2:
	fld	QWORD PTR _q12$[ebp]
	fxch	ST(1)
	fxch	ST(3)
	fxch	ST(1)
	fxch	ST(2)
$LN23@dirichlet_@2:

; 1327 :   }
; 1328 : 
; 1329 : 
; 1330 :   for ( j = 0 ; j < FACET_VERTS  ; j++ )

	xor	ebx, ebx
	xor	ecx, ecx
$LN60@dirichlet_@2:

; 1331 :      for ( i = 0 ; i < SDIM  ; i++ )

	xor	eax, eax
	test	esi, esi
	jle	SHORT $LN21@dirichlet_@2
$LN19@dirichlet_@2:
	lea	edx, DWORD PTR [ecx+eax*8]

; 1332 :      { f_info->grad[j][i] = (dc11dv[j][i] + dc22dv[j][i]) * area;

	fld	QWORD PTR _dc22dv$[ebp+edx]
	mov	edx, DWORD PTR [edi+1336]
	mov	edx, DWORD PTR [edx+ebx]
	lea	esi, DWORD PTR [ecx+eax*8]
	fadd	QWORD PTR _dc11dv$[ebp+esi]
	inc	eax
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [edx+eax*8-8]
	mov	esi, DWORD PTR _web+616
	cmp	eax, esi
	jl	SHORT $LN19@dirichlet_@2
$LN21@dirichlet_@2:

; 1327 :   }
; 1328 : 
; 1329 : 
; 1330 :   for ( j = 0 ; j < FACET_VERTS  ; j++ )

	add	ecx, 48					; 00000030H
	add	ebx, 4
	cmp	ecx, 144				; 00000090H
	jl	SHORT $LN60@dirichlet_@2

; 1333 :      }
; 1334 : 
; 1335 :   if ( mode == METHOD_GRADIENT ) return energy;

	cmp	DWORD PTR _mode$[ebp], 4321		; 000010e1H
	jne	SHORT $LN16@dirichlet_@2
	fstp	ST(1)
	fstp	ST(1)
$LN99@dirichlet_@2:
	pop	edi
	fstp	ST(1)
	pop	esi
	fstp	ST(1)
	pop	ebx

; 1370 : 
; 1371 :          }
; 1372 : 
; 1373 :   return energy;
; 1374 : } // end dirichlet_elastic_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@dirichlet_@2:

; 1336 : 
; 1337 :   /* hessian */
; 1338 : 
; 1339 :   for ( i = 0 ; i < SDIM  ; i++ )

	test	esi, esi
	jle	$LN86@dirichlet_@2
	fxch	ST(4)

; 1340 :   {
; 1341 :      ddc11dv[1][i][1] = 2*q11;

	xor	ecx, ecx
	fmul	ST(0), ST(3)
	xor	eax, eax
	fld	QWORD PTR _q22$[ebp]
	mov	edx, esi
	fmulp	ST(4), ST(0)
	fldz
	jmp	SHORT $LN15@dirichlet_@2
$LN90@dirichlet_@2:

; 1336 : 
; 1337 :   /* hessian */
; 1338 : 
; 1339 :   for ( i = 0 ; i < SDIM  ; i++ )

	fxch	ST(4)
	fxch	ST(1)
	fxch	ST(3)
	fxch	ST(1)
$LN15@dirichlet_@2:

; 1340 :   {
; 1341 :      ddc11dv[1][i][1] = 2*q11;

	fxch	ST(1)
	add	ecx, 24					; 00000018H
	fst	QWORD PTR _ddc11dv$[ebp+eax+152]
	add	eax, 24					; 00000018H
	dec	edx

; 1342 :      ddc11dv[1][i][2] = q12;

	fxch	ST(3)
	fst	QWORD PTR _ddc11dv$[ebp+eax+136]

; 1343 : 
; 1344 :      ddc11dv[2][i][1] = q12;

	fst	QWORD PTR _ddc11dv$[ebp+eax+272]

; 1345 :      ddc11dv[2][i][2] = 0.0;
; 1346 : 
; 1347 :      ddc22dv[1][i][1] = 0.0;
; 1348 :      ddc22dv[1][i][2] = q12;

	fst	QWORD PTR _ddc22dv$[ebp+eax+136]

; 1349 : 
; 1350 :      ddc22dv[2][i][1] = q12;

	fst	QWORD PTR _ddc22dv$[ebp+eax+272]
	fxch	ST(1)
	fst	QWORD PTR _ddc11dv$[ebp+eax+280]
	fst	QWORD PTR _ddc22dv$[ebp+eax+128]

; 1351 :      ddc22dv[2][i][2] = 2*q22;

	fxch	ST(4)
	fst	QWORD PTR _ddc22dv$[ebp+eax+280]

; 1352 : 
; 1353 :      for ( j = 1 ; j < FACET_VERTS;  j++ )
; 1354 :      { 
; 1355 :         ddc11dv[0][i][j] = -(ddc11dv[1][i][j] + ddc11dv[2][i][j]);

	fld	QWORD PTR _ddc11dv$[ebp+ecx+272]
	fadd	QWORD PTR _ddc11dv$[ebp+ecx+128]
	fchs
	fstp	QWORD PTR _ddc11dv$[ebp+ecx-16]

; 1356 :         ddc22dv[0][i][j] = -(ddc22dv[1][i][j] + ddc22dv[2][i][j]);

	fld	QWORD PTR _ddc22dv$[ebp+ecx+272]
	fadd	QWORD PTR _ddc22dv$[ebp+ecx+128]
	fchs
	fstp	QWORD PTR _ddc22dv$[ebp+ecx-16]

; 1357 :         ddc11dv[j][i][0] = -(ddc11dv[j][i][1] + ddc11dv[j][i][2]);

	fld	QWORD PTR _ddc11dv$[ebp+eax+136]
	fadd	QWORD PTR _ddc11dv$[ebp+eax+128]
	fchs
	fstp	QWORD PTR _ddc11dv$[ebp+eax+120]

; 1358 :         ddc22dv[j][i][0] = -(ddc22dv[j][i][1] + ddc22dv[j][i][2]);

	fld	QWORD PTR _ddc22dv$[ebp+eax+136]
	fadd	QWORD PTR _ddc22dv$[ebp+eax+128]
	fchs
	fstp	QWORD PTR _ddc22dv$[ebp+eax+120]
	fld	QWORD PTR _ddc11dv$[ebp+ecx+280]
	fadd	QWORD PTR _ddc11dv$[ebp+ecx+136]
	fchs
	fstp	QWORD PTR _ddc11dv$[ebp+ecx-8]
	fld	QWORD PTR _ddc22dv$[ebp+ecx+280]
	fadd	QWORD PTR _ddc22dv$[ebp+ecx+136]
	fchs
	fstp	QWORD PTR _ddc22dv$[ebp+ecx-8]
	fld	QWORD PTR _ddc11dv$[ebp+eax+280]
	fadd	QWORD PTR _ddc11dv$[ebp+eax+272]
	fchs
	fstp	QWORD PTR _ddc11dv$[ebp+eax+264]
	fld	QWORD PTR _ddc22dv$[ebp+eax+280]
	fadd	QWORD PTR _ddc22dv$[ebp+eax+272]
	fchs
	fstp	QWORD PTR _ddc22dv$[ebp+eax+264]

; 1359 :      }
; 1360 :      ddc11dv[0][i][0] = -(ddc11dv[1][i][0] + ddc11dv[2][i][0]);

	fld	QWORD PTR _ddc11dv$[ebp+eax+120]
	fadd	QWORD PTR _ddc11dv$[ebp+eax+264]
	fchs
	fstp	QWORD PTR _ddc11dv$[ebp+eax-24]

; 1361 :      ddc22dv[0][i][0] = -(ddc22dv[1][i][0] + ddc22dv[2][i][0]);

	fld	QWORD PTR _ddc22dv$[ebp+eax+120]
	fadd	QWORD PTR _ddc22dv$[ebp+eax+264]
	fchs
	fstp	QWORD PTR _ddc22dv$[ebp+eax-24]
	jne	$LN90@dirichlet_@2

; 1336 : 
; 1337 :   /* hessian */
; 1338 : 
; 1339 :   for ( i = 0 ; i < SDIM  ; i++ )

	fstp	ST(4)
	fstp	ST(0)
	fstp	ST(1)
	fstp	ST(1)
$LN13@dirichlet_@2:

; 1362 :   }
; 1363 : 
; 1364 :   for ( j = 0 ; j < FACET_VERTS  ; j++ )

	xor	ebx, ebx
	xor	edx, edx
$LN9@dirichlet_@2:

; 1365 :      for ( i = 0 ; i < SDIM  ; i++ )

	xor	eax, eax
	test	esi, esi
	jle	$LN8@dirichlet_@2
	mov	ecx, ebx
$LN6@dirichlet_@2:

; 1366 :         for ( jj = 0 ; jj < FACET_VERTS  ; jj++ )
; 1367 :         {
; 1368 :           f_info->hess[j][jj][i][i] += 
; 1369 :                 (ddc11dv[j][i][jj] + ddc22dv[j][i][jj]) * area;

	mov	esi, DWORD PTR [edi+1340]
	fld	QWORD PTR _ddc22dv$[ebp+ecx]
	mov	esi, DWORD PTR [edx+esi]
	fadd	QWORD PTR _ddc11dv$[ebp+ecx]
	mov	esi, DWORD PTR [esi]
	mov	esi, DWORD PTR [esi+eax*4]
	lea	esi, DWORD PTR [esi+eax*8]
	fmul	ST(0), ST(1)
	add	ecx, 24					; 00000018H
	fadd	QWORD PTR [esi]
	fstp	QWORD PTR [esi]
	mov	esi, DWORD PTR [edi+1340]
	mov	esi, DWORD PTR [edx+esi]
	fld	QWORD PTR _ddc22dv$[ebp+ecx-16]
	fadd	QWORD PTR _ddc11dv$[ebp+ecx-16]
	mov	esi, DWORD PTR [esi+4]
	mov	esi, DWORD PTR [esi+eax*4]
	lea	esi, DWORD PTR [esi+eax*8]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [esi]
	fstp	QWORD PTR [esi]
	mov	esi, DWORD PTR [edi+1340]
	mov	esi, DWORD PTR [edx+esi]
	fld	QWORD PTR _ddc22dv$[ebp+ecx-8]
	fadd	QWORD PTR _ddc11dv$[ebp+ecx-8]
	mov	esi, DWORD PTR [esi+8]
	mov	esi, DWORD PTR [esi+eax*4]
	lea	esi, DWORD PTR [esi+eax*8]
	fmul	ST(0), ST(1)
	inc	eax
	fadd	QWORD PTR [esi]
	fstp	QWORD PTR [esi]
	mov	esi, DWORD PTR _web+616
	cmp	eax, esi
	jl	SHORT $LN6@dirichlet_@2
$LN8@dirichlet_@2:

; 1362 :   }
; 1363 : 
; 1364 :   for ( j = 0 ; j < FACET_VERTS  ; j++ )

	add	edx, 4
	add	ebx, 144				; 00000090H
	cmp	edx, 12					; 0000000cH
	jl	$LN9@dirichlet_@2
	fstp	ST(0)
$LN29@dirichlet_@2:

; 1370 : 
; 1371 :          }
; 1372 : 
; 1373 :   return energy;
; 1374 : } // end dirichlet_elastic_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN86@dirichlet_@2:

; 1336 : 
; 1337 :   /* hessian */
; 1338 : 
; 1339 :   for ( i = 0 ; i < SDIM  ; i++ )

	fstp	ST(2)
	fstp	ST(2)
	fstp	ST(2)
	jmp	$LN13@dirichlet_@2
_dirichlet_elastic_all ENDP
_TEXT	ENDS
PUBLIC	_dirichlet_elastic_energy
; Function compile flags: /Ogtp
;	COMDAT _dirichlet_elastic_energy
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_dirichlet_elastic_energy PROC				; COMDAT

; 1387 : {

	push	ebp
	mov	ebp, esp

; 1388 :  return dirichlet_elastic_all(f_info,METHOD_VALUE);

	mov	eax, DWORD PTR _f_info$[ebp]
	push	1767					; 000006e7H
	push	eax
	call	_dirichlet_elastic_all
	add	esp, 8

; 1389 : }

	pop	ebp
	ret	0
_dirichlet_elastic_energy ENDP
_TEXT	ENDS
PUBLIC	_dirichlet_elastic_gradient
; Function compile flags: /Ogtp
;	COMDAT _dirichlet_elastic_gradient
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_dirichlet_elastic_gradient PROC			; COMDAT

; 1404 : {

	push	ebp
	mov	ebp, esp

; 1405 :  return dirichlet_elastic_all(f_info,METHOD_GRADIENT);

	mov	eax, DWORD PTR _f_info$[ebp]
	push	4321					; 000010e1H
	push	eax
	call	_dirichlet_elastic_all
	add	esp, 8

; 1406 : }

	pop	ebp
	ret	0
_dirichlet_elastic_gradient ENDP
_TEXT	ENDS
PUBLIC	_dirichlet_elastic_hessian
; Function compile flags: /Ogtp
;	COMDAT _dirichlet_elastic_hessian
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_dirichlet_elastic_hessian PROC				; COMDAT

; 1420 : {

	push	ebp
	mov	ebp, esp

; 1421 :  return dirichlet_elastic_all(f_info,METHOD_HESSIAN);

	mov	eax, DWORD PTR _f_info$[ebp]
	push	8763					; 0000223bH
	push	eax
	call	_dirichlet_elastic_all
	add	esp, 8

; 1422 : }

	pop	ebp
	ret	0
_dirichlet_elastic_hessian ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@OLKCOPKE@bouzidi?5method?3?5model?5is?5not?5LIN@ ; `string'
PUBLIC	??_C@_0CI@KAJHNGGN@bouzidi?5method?3?5model?5is?5not?5SOA@ ; `string'
PUBLIC	_bouzidi_init
;	COMDAT ??_C@_0CG@OLKCOPKE@bouzidi?5method?3?5model?5is?5not?5LIN@
CONST	SEGMENT
??_C@_0CG@OLKCOPKE@bouzidi?5method?3?5model?5is?5not?5LIN@ DB 'bouzidi me'
	DB	'thod: model is not LINEAR.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KAJHNGGN@bouzidi?5method?3?5model?5is?5not?5SOA@
CONST	SEGMENT
??_C@_0CI@KAJHNGGN@bouzidi?5method?3?5model?5is?5not?5SOA@ DB 'bouzidi me'
	DB	'thod: model is not SOAPFILM.', 0aH, 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _bouzidi_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_bouzidi_init PROC					; COMDAT

; 1436 :   if ( web.representation != SOAPFILM )

	cmp	DWORD PTR _web+624, 2
	je	SHORT $LN2@bouzidi_in

; 1437 :      kb_error(4580,"bouzidi method: model is not SOAPFILM.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CI@KAJHNGGN@bouzidi?5method?3?5model?5is?5not?5SOA@
	push	4580					; 000011e4H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN2@bouzidi_in:

; 1438 :   if ( web.modeltype != LINEAR )

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN1@bouzidi_in

; 1439 :      kb_error(4581,"bouzidi method: model is not LINEAR.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CG@OLKCOPKE@bouzidi?5method?3?5model?5is?5not?5LIN@
	push	4581					; 000011e5H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@bouzidi_in:

; 1440 : 
; 1441 : 
; 1442 : } // end bouzidi_init()

	ret	0
_bouzidi_init ENDP
_TEXT	ENDS
PUBLIC	_bouzidi_value
; Function compile flags: /Ogtp
;	COMDAT _bouzidi_value
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_bouzidi_value PROC					; COMDAT

; 1455 : { return 1.0;

	fld1

; 1456 : }

	ret	0
_bouzidi_value ENDP
_TEXT	ENDS
PUBLIC	_bouzidi_gradient
; Function compile flags: /Ogtp
;	COMDAT _bouzidi_gradient
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_bouzidi_gradient PROC					; COMDAT

; 1466 : { return 0.0;

	fldz

; 1467 : }

	ret	0
_bouzidi_gradient ENDP
_TEXT	ENDS
PUBLIC	_bouzidi_hessian
; Function compile flags: /Ogtp
;	COMDAT _bouzidi_hessian
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_bouzidi_hessian PROC					; COMDAT

; 1477 : { return 0.0;

	fldz

; 1478 : }

	ret	0
_bouzidi_hessian ENDP
_TEXT	ENDS
PUBLIC	__real@c010000000000000
PUBLIC	__real@bfd0000000000000
PUBLIC	__real@3fc0000000000000
PUBLIC	__real@3ff8000000000000
PUBLIC	??_C@_0CP@PDJDMEMF@?5Neo_Hookean?3?5Facet?5?$CFd?5has?5unstr@ ; `string'
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_Neo_Hookean_all
EXTRN	__CIpow:PROC
;	COMDAT __real@c010000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@c010000000000000 DQ 0c010000000000000r	; -4
CONST	ENDS
;	COMDAT __real@bfd0000000000000
CONST	SEGMENT
__real@bfd0000000000000 DQ 0bfd0000000000000r	; -0.25
CONST	ENDS
;	COMDAT __real@3fc0000000000000
CONST	SEGMENT
__real@3fc0000000000000 DQ 03fc0000000000000r	; 0.125
CONST	ENDS
;	COMDAT __real@3ff8000000000000
CONST	SEGMENT
__real@3ff8000000000000 DQ 03ff8000000000000r	; 1.5
CONST	ENDS
;	COMDAT ??_C@_0CP@PDJDMEMF@?5Neo_Hookean?3?5Facet?5?$CFd?5has?5unstr@
CONST	SEGMENT
??_C@_0CP@PDJDMEMF@?5Neo_Hookean?3?5Facet?5?$CFd?5has?5unstr@ DB ' Neo_Ho'
	DB	'okean: Facet %d has unstrained area 0.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\method5.c
CONST	ENDS
;	COMDAT _Neo_Hookean_all
_TEXT	SEGMENT
_dpsirdc12$ = -2896					; size = 8
_ddpsirdc11dc12$ = -2888				; size = 8
_ddpsirdc11dc22$ = -2880				; size = 8
_ddpsirdc12dc11$ = -2872				; size = 8
_ddpsirdc11dc21$ = -2864				; size = 8
_ddpsirdc12dc12$ = -2856				; size = 8
_ddpsirdc11dc11$ = -2848				; size = 8
_dpsirdc22$ = -2840					; size = 8
tv4476 = -2832						; size = 8
tv4463 = -2824						; size = 8
tv3984 = -2816						; size = 8
tv4498 = -2808						; size = 8
tv4413 = -2800						; size = 8
tv4114 = -2792						; size = 8
tv4395 = -2784						; size = 8
tv4483 = -2776						; size = 8
tv4511 = -2768						; size = 8
tv4459 = -2760						; size = 8
tv4454 = -2752						; size = 8
_area$ = -2744						; size = 8
tv4496 = -2736						; size = 8
_ddpsirdc21dc21$ = -2736				; size = 8
tv4805 = -2728						; size = 8
tv4446 = -2728						; size = 8
tv4417 = -2720						; size = 8
_ddpsirdc21dc11$ = -2720				; size = 8
tv4587 = -2712						; size = 8
tv4409 = -2712						; size = 8
tv4500 = -2704						; size = 8
_ddpsirdc12dc22$ = -2704				; size = 8
tv4794 = -2696						; size = 8
tv4396 = -2696						; size = 8
tv4421 = -2688						; size = 8
_ddpsirdc21dc12$ = -2688				; size = 8
tv4679 = -2680						; size = 8
tv4480 = -2680						; size = 8
tv4460 = -2672						; size = 8
_ddpsirdc12dc21$ = -2672				; size = 8
tv4418 = -2664						; size = 8
tv4381 = -2656						; size = 8
tv4023 = -2648						; size = 8
_dpsirdc11$ = -2648					; size = 8
tv4403 = -2640						; size = 8
tv4427 = -2632						; size = 8
tv4369 = -2624						; size = 8
tv4373 = -2616						; size = 8
tv4433 = -2608						; size = 8
tv4367 = -2600						; size = 8
tv4384 = -2592						; size = 8
tv4627 = -2584						; size = 8
tv4406 = -2584						; size = 8
tv4635 = -2576						; size = 8
tv4118 = -2576						; size = 8
tv4667 = -2568						; size = 8
tv3982 = -2568						; size = 8
tv4706 = -2560						; size = 8
tv4472 = -2560						; size = 8
_s2$ = -2560						; size = 8
tv4674 = -2552						; size = 8
tv4512 = -2552						; size = 8
tv4599 = -2544						; size = 8
tv4442 = -2544						; size = 8
_ddpsirdc21dc22$ = -2544				; size = 8
tv4812 = -2536						; size = 8
tv4405 = -2536						; size = 8
tv4730 = -2528						; size = 8
tv4378 = -2528						; size = 8
tv4736 = -2520						; size = 8
tv4555 = -2520						; size = 8
tv4414 = -2520						; size = 8
tv4503 = -2512						; size = 8
tv4075 = -2512						; size = 8
tv4026 = -2512						; size = 8
tv4415 = -2504						; size = 8
tv3965 = -2504						; size = 8
tv4489 = -2496						; size = 8
_logtmp2$ = -2496					; size = 8
tv4471 = -2488						; size = 8
tv4086 = -2488						; size = 8
_f_info$GSCopy$ = -2480					; size = 4
tv4521 = -2476						; size = 8
tv4386 = -2476						; size = 8
tv4559 = -2468						; size = 8
tv4401 = -2468						; size = 8
tv4077 = -2468						; size = 8
tv4032 = -2468						; size = 8
tv4392 = -2460						; size = 8
_c21$ = -2460						; size = 8
tv4613 = -2452						; size = 8
tv4532 = -2452						; size = 8
tv4115 = -2452						; size = 8
tv4623 = -2444						; size = 8
tv4539 = -2444						; size = 8
tv4113 = -2444						; size = 8
tv4375 = -2436						; size = 8
_q12$ = -2436						; size = 8
tv4430 = -2428						; size = 8
_c11$ = -2428						; size = 8
tv4479 = -2420						; size = 8
_c22$ = -2420						; size = 8
tv4410 = -2412						; size = 8
_detr$ = -2412						; size = 8
tv6871 = -2404						; size = 8
tv4038 = -2404						; size = 8
tv4029 = -2404						; size = 8
_dpsirdc21$ = -2404					; size = 8
_f11$ = -2404						; size = 8
tv4422 = -2396						; size = 8
_c12$ = -2396						; size = 8
tv4361 = -2388						; size = 8
_q11$ = -2388						; size = 8
_LW$ = -2380						; size = 8
tv7303 = -2376						; size = 4
tv6878 = -2372						; size = 8
tv6876 = -2372						; size = 8
tv3959 = -2372						; size = 8
tv3944 = -2372						; size = 8
_energy$ = -2372					; size = 8
_f12$ = -2372						; size = 8
tv4389 = -2364						; size = 8
tv4097 = -2364						; size = 8
_tmp1$ = -2364						; size = 8
_det$ = -2364						; size = 8
tv4397 = -2356						; size = 8
tv3958 = -2356						; size = 8
_tmp2$ = -2348						; size = 8
tv7384 = -2344						; size = 4
tv4553 = -2340						; size = 8
tv4363 = -2340						; size = 8
_q22$ = -2340						; size = 8
_mu$ = -2332						; size = 8
tv7380 = -2328						; size = 4
tv6880 = -2324						; size = 8
tv4548 = -2324						; size = 8
tv4425 = -2324						; size = 8
tv4400 = -2324						; size = 8
tv4218 = -2324						; size = 8
tv4073 = -2324						; size = 8
tv4020 = -2324						; size = 8
tv4407 = -2316						; size = 8
_lambda$ = -2316					; size = 8
tv7382 = -2312						; size = 4
_ddc11dv$ = -2308					; size = 432
_ddc22dv$ = -1876					; size = 432
_ddc12dv$ = -1444					; size = 432
_ddc21dv$ = -1012					; size = 432
_dc11dv$ = -580						; size = 144
_dc21dv$ = -436						; size = 144
_dc12dv$ = -292						; size = 144
_dc22dv$ = -148						; size = 144
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_mode$ = 12						; size = 4
_Neo_Hookean_all PROC					; COMDAT

; 380  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2896				; 00000b50H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _f_info$[ebp]

; 381  :   REAL *s;  /* pointer to extra attributes */
; 382  :   REAL **side; 
; 383  :   REAL q11,q12,q22;  /* Q entries */
; 384  :   REAL det;    /* det S */
; 385  :   REAL lambda;  /* coefficient lambda */
; 386  :   REAL area;  /* reference area of facet */
; 387  :   REAL mu; /* coefficient mu */
; 388  :   REAL f11,f12,f22;
; 389  :   REAL c11,c12,c21,c22;
; 390  :   REAL energy;
; 391  :   REAL dc11dv[FACET_VERTS][MAXCOORD];
; 392  :   REAL dc12dv[FACET_VERTS][MAXCOORD];
; 393  :   REAL dc21dv[FACET_VERTS][MAXCOORD];
; 394  :   REAL dc22dv[FACET_VERTS][MAXCOORD];
; 395  :   REAL ddc11dv[FACET_VERTS][MAXCOORD][FACET_VERTS];
; 396  :   REAL ddc12dv[FACET_VERTS][MAXCOORD][FACET_VERTS];
; 397  :   REAL ddc21dv[FACET_VERTS][MAXCOORD][FACET_VERTS];
; 398  :   REAL ddc22dv[FACET_VERTS][MAXCOORD][FACET_VERTS];
; 399  :   /* potential derivatives declaration */
; 400  :   REAL dpsirdc11,dpsirdc12,dpsirdc21,dpsirdc22;
; 401  :   REAL ddpsirdc11dc11, ddpsirdc11dc12, ddpsirdc11dc21, ddpsirdc11dc22;
; 402  :   REAL ddpsirdc12dc11, ddpsirdc12dc12, ddpsirdc12dc21, ddpsirdc12dc22;
; 403  :   REAL ddpsirdc21dc11, ddpsirdc21dc12, ddpsirdc21dc21, ddpsirdc21dc22;
; 404  :   REAL ddpsirdc22dc11, ddpsirdc22dc12, ddpsirdc22dc21, ddpsirdc22dc22;
; 405  : 
; 406  :   REAL s1, s2, s3, s4, s5, s6, s7;
; 407  :   REAL LW, tmp1, tmp2, logtmp2;
; 408  : 
; 409  :   int i,j,ii,jj;
; 410  :   
; 411  :   REAL detr;
; 412  : 
; 413  : 
; 414  :   lambda = *(REAL*)get_extra(f_info->id,lambda_attr);

	mov	ecx, DWORD PTR [eax]

; 728  :         for ( jj = 0 ; jj < FACET_VERTS  ; jj++ )

	mov	DWORD PTR _f_info$GSCopy$[ebp], eax
	push	ebx
	push	esi
	mov	ebx, DWORD PTR _mu_attr
	mov	eax, ecx
	imul	ebx, 240				; 000000f0H
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	esi, DWORD PTR _web[eax+12]
	mov	eax, DWORD PTR _web[eax+104]
	push	edi
	mov	edi, DWORD PTR _lambda_attr
	imul	edi, 240				; 000000f0H
	add	eax, edi
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+edx*4]
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+edx+64]
	fld	QWORD PTR [esi+eax]
	mov	eax, ecx
	shr	eax, 29					; 0000001dH
	fstp	QWORD PTR _lambda$[ebp]
	imul	eax, 112				; 00000070H
	mov	edi, DWORD PTR _web[eax+12]
	mov	eax, DWORD PTR _web[eax+104]
	add	eax, ebx
	mov	eax, DWORD PTR [eax+edx+64]
	mov	ebx, DWORD PTR _form_factors_attr
	mov	esi, ecx
	imul	ebx, 240				; 000000f0H
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edi+esi*4]
	fld	QWORD PTR [esi+eax]
	mov	eax, ecx
	shr	eax, 29					; 0000001dH
	fstp	QWORD PTR _mu$[ebp]
	imul	eax, 112				; 00000070H
	mov	edi, DWORD PTR _web[eax+12]
	mov	eax, DWORD PTR _web[eax+104]
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edi+esi*4]
	add	eax, ebx
	add	esi, DWORD PTR [eax+edx+64]
	mov	ebx, 1767				; 000006e7H
	fld	QWORD PTR [esi+8]
	fld	QWORD PTR [esi]
	fmul	QWORD PTR [esi+16]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	fst	QWORD PTR _det$[ebp]
	fldz
	fcom	ST(1)
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN67@Neo_Hookea@2

; 415  :   mu = *(REAL*)get_extra(f_info->id,mu_attr);
; 416  : 
; 417  :   s = (REAL*)get_extra(f_info->id,form_factors_attr);
; 418  :   det = s[0]*s[2] - s[1]*s[1];
; 419  :   if ( det <= 0.0 )
; 420  :      { 
; 421  :         if ( mode == METHOD_VALUE ) return 0.0;

	fstp	ST(1)
	cmp	DWORD PTR _mode$[ebp], ebx
	je	$LN32@Neo_Hookea@2
	fstp	ST(0)

; 422  :         sprintf(errmsg," Neo_Hookean: Facet %d has unstrained area 0.\n",
; 423  :           ordinal(f_info->id)+1);

	test	ecx, 268435456				; 10000000H
	je	SHORT $LN34@Neo_Hookea@2
	and	ecx, 134217727				; 07ffffffH
	jmp	SHORT $LN35@Neo_Hookea@2
$LN34@Neo_Hookea@2:
	or	ecx, -1
$LN35@Neo_Hookea@2:
	inc	ecx
	push	ecx
	push	OFFSET ??_C@_0CP@PDJDMEMF@?5Neo_Hookean?3?5Facet?5?$CFd?5has?5unstr@
	push	OFFSET _errmsg
	call	_sprintf

; 424  :         kb_error(2852,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2852					; 00000b24H
	call	_kb_error
	fld	QWORD PTR _det$[ebp]
	add	esp, 24					; 00000018H
	jmp	SHORT $LN64@Neo_Hookea@2
$LN67@Neo_Hookea@2:
	fstp	ST(0)
$LN64@Neo_Hookea@2:

; 425  :      }
; 426  : 
; 427  :   area = sqrt(det)/2.0;

	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000

; 428  :   
; 429  :   q11 = s[2]/det; q12 = -s[1]/det; q22 = s[0]/det;
; 430  : 
; 431  :   side = f_info->sides[0];

	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [edi+1276]
	fstp	QWORD PTR _area$[ebp]

; 432  :   f11 = SDIM_dot(side[0],side[0]);

	mov	edx, DWORD PTR _web+616
	fld	QWORD PTR [esi+16]
	push	edx
	fld	QWORD PTR _det$[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _q11$[ebp]
	fld	QWORD PTR [esi+8]
	fdiv	ST(0), ST(1)
	fchs
	fstp	QWORD PTR _q12$[ebp]
	fdivr	QWORD PTR [esi]
	mov	esi, DWORD PTR [ecx]
	mov	eax, DWORD PTR [esi]
	push	eax
	push	eax
	fstp	QWORD PTR _q22$[ebp]
	call	_dot
	fstp	QWORD PTR _f11$[ebp]

; 433  :   f12 = SDIM_dot(side[0],side[1]);

	mov	eax, DWORD PTR _web+616
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	push	eax
	push	ecx
	push	edx
	call	_dot
	fstp	QWORD PTR _f12$[ebp]

; 434  :   f22 = SDIM_dot(side[1],side[1]);

	mov	ecx, DWORD PTR _web+616
	mov	eax, DWORD PTR [esi+4]
	push	ecx
	push	eax
	push	eax
	call	_dot

; 435  : 
; 436  :   c11 = f11*q11 + f12*q12 ;

	fld	QWORD PTR _f12$[ebp]
	fld	ST(0)
	add	esp, 36					; 00000024H
	fld	QWORD PTR _q12$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv3944[ebp]
	fld	QWORD PTR _f11$[ebp]
	fld	ST(0)
	fld	QWORD PTR _q11$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fst	QWORD PTR _c11$[ebp]

; 437  :   c12 = f11*q12 + f12*q22;

	fld	ST(4)
	fld	QWORD PTR _q22$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(3)
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fst	QWORD PTR _c12$[ebp]

; 438  :   c21 = f12*q11 + f22*q12;

	fld	ST(6)
	fmulp	ST(5), ST(0)
	fxch	ST(5)
	fmulp	ST(3), ST(0)
	fxch	ST(3)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _c21$[ebp]

; 439  :   c22 = f12*q12 + f22*q22;

	fxch	ST(4)
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR tv3944[ebp]
	fst	QWORD PTR _c22$[ebp]

; 440  : 
; 441  :   detr = c11*c22-c12*c21;

	fmulp	ST(1), ST(0)
	fxch	ST(2)
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _detr$[ebp]

; 442  :   /* plane stress condition */
; 443  :   LW = LambertW(2.0*mu/detr/lambda*exp(2.0*mu/lambda));

	fld	QWORD PTR _mu$[ebp]
	fadd	ST(0), ST(0)
	fst	QWORD PTR tv3958[ebp]
	fdiv	QWORD PTR _lambda$[ebp]
	fst	QWORD PTR tv3959[ebp]
	call	__CIexp
	fld	QWORD PTR tv3958[ebp]
	sub	esp, 8
	fdiv	QWORD PTR _detr$[ebp]
	fdiv	QWORD PTR _lambda$[ebp]
	fmulp	ST(1), ST(0)
	fstp	QWORD PTR [esp]
	call	_LambertW
	fst	QWORD PTR _LW$[ebp]
	add	esp, 8

; 444  :  
; 445  :   tmp1 = log(exp(-LW+2.0*mu/lambda));

	fsubr	QWORD PTR tv3959[ebp]
	call	__CIexp
	fst	QWORD PTR tv3965[ebp]
	call	__CIlog
	fstp	QWORD PTR _tmp1$[ebp]

; 446  :   tmp2 = exp(-(LW*lambda-2.0*mu)/lambda);

	fld	QWORD PTR _LW$[ebp]
	fld	QWORD PTR _lambda$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fsub	QWORD PTR tv3958[ebp]
	fdivrp	ST(1), ST(0)
	fchs
	call	__CIexp
	fst	QWORD PTR _tmp2$[ebp]

; 447  :   logtmp2 = log(tmp2);

	call	__CIlog
	fstp	QWORD PTR _logtmp2$[ebp]

; 448  : 
; 449  : 
; 450  :   energy =area*(mu*c11/2.0+mu*c22/2.0+mu/exp(LW)*pow(exp(mu/lambda),2.0)/(detr)/2.0-3.0/2.0*mu-mu*tmp1/2.0+lambda*pow(tmp1,2.0)/8.0);

	fld	QWORD PTR _c22$[ebp]
	fld	QWORD PTR _mu$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv3982[ebp]
	fld	QWORD PTR _c11$[ebp]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv3984[ebp]
	fdiv	QWORD PTR _lambda$[ebp]
	call	__CIexp
	fld	QWORD PTR __real@4000000000000000
	call	__CIpow
	fstp	QWORD PTR tv6876[ebp]
	fld	QWORD PTR _LW$[ebp]
	call	__CIexp
	fld	QWORD PTR _mu$[ebp]
	fld	ST(0)
	fdivrp	ST(2), ST(0)
	fld	QWORD PTR tv6876[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	QWORD PTR _detr$[ebp]
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR tv3984[ebp]
	fmul	ST(0), ST(1)
	fld	QWORD PTR tv3982[ebp]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	faddp	ST(2), ST(0)
	fld	ST(2)
	fmul	QWORD PTR __real@3ff8000000000000
	fsubp	ST(2), ST(0)
	fld	QWORD PTR _tmp1$[ebp]
	fld	ST(0)
	fmulp	ST(4), ST(0)
	fxch	ST(3)
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR tv6878[ebp]
	fld	QWORD PTR __real@4000000000000000
	call	__CIpow
	fmul	QWORD PTR _lambda$[ebp]
	fmul	QWORD PTR __real@3fc0000000000000
	fadd	QWORD PTR tv6878[ebp]
	fmul	QWORD PTR _area$[ebp]
	fst	QWORD PTR _energy$[ebp]

; 451  : 
; 452  :   if ( mode == METHOD_VALUE ) return energy;

	cmp	DWORD PTR _mode$[ebp], ebx
	je	$LN32@Neo_Hookea@2

; 453  : 
; 454  :   /* gradient */
; 455  : 
; 456  :   for ( i = 0 ; i < SDIM  ; i++ )

	mov	ebx, DWORD PTR _web+616
	fstp	ST(0)
	xor	eax, eax
	test	ebx, ebx
	jle	$LN60@Neo_Hookea@2
	fld	QWORD PTR _q22$[ebp]
	mov	ecx, DWORD PTR [esi+4]
	fld	QWORD PTR _q12$[ebp]
	mov	edx, DWORD PTR [esi]
	fld	QWORD PTR _q11$[ebp]
	fld	QWORD PTR __real@4000000000000000
	jmp	SHORT $LN28@Neo_Hookea@2
$LN77@Neo_Hookea@2:
	fxch	ST(1)
	fxch	ST(3)
	fxch	ST(1)
$LN28@Neo_Hookea@2:

; 457  :   {
; 458  :      dc11dv[1][i] = 2*side[0][i]*q11 + side[1][i]*q12;

	fld	QWORD PTR [ecx+eax*8]
	inc	eax
	fmul	ST(0), ST(3)
	fld	QWORD PTR [edx+eax*8-8]
	fmul	ST(0), ST(2)
	fld	ST(0)
	fmulp	ST(4), ST(0)
	fxch	ST(3)
	fadd	ST(0), ST(1)
	fst	QWORD PTR _dc11dv$[ebp+eax*8+40]

; 459  :      dc11dv[2][i] =                          side[0][i]*q12;

	fld	QWORD PTR [edx+eax*8-8]
	fmul	ST(0), ST(5)
	fst	QWORD PTR _dc11dv$[ebp+eax*8+88]

; 460  :      dc12dv[1][i] = 2*side[0][i]*q12 + side[1][i]*q22;

	fxch	ST(4)
	fmul	ST(0), ST(5)
	fld	QWORD PTR [ecx+eax*8-8]
	fmul	ST(0), ST(7)
	faddp	ST(1), ST(0)
	fst	QWORD PTR tv4020[ebp]
	fstp	QWORD PTR _dc12dv$[ebp+eax*8+40]

; 461  :      dc12dv[2][i] =                          side[0][i]*q22;

	fld	QWORD PTR [edx+eax*8-8]
	fmulp	ST(6), ST(0)
	fxch	ST(5)
	fst	QWORD PTR tv4023[ebp]
	fstp	QWORD PTR _dc12dv$[ebp+eax*8+88]

; 462  :      dc21dv[1][i] = side[1][i]*q11;

	fld	QWORD PTR [ecx+eax*8-8]
	fld	QWORD PTR _q11$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv4026[ebp]
	fstp	QWORD PTR _dc21dv$[ebp+eax*8+40]

; 463  :      dc21dv[2][i] = side[0][i]*q11 + 2*side[1][i]*q12;

	fld	QWORD PTR [ecx+eax*8-8]
	fmul	ST(0), ST(3)
	fst	QWORD PTR tv4029[ebp]
	fmul	ST(0), ST(5)
	fld	QWORD PTR [edx+eax*8-8]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fst	QWORD PTR tv4032[ebp]
	fstp	QWORD PTR _dc21dv$[ebp+eax*8+88]

; 464  :      dc22dv[1][i] = side[1][i]*q12;

	fxch	ST(1)
	fst	QWORD PTR _dc22dv$[ebp+eax*8+40]

; 465  :      dc22dv[2][i] = side[0][i]*q12 + 2*side[1][i]*q22;

	fld	QWORD PTR tv4029[ebp]
	fld	QWORD PTR _q22$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fadd	ST(0), ST(5)
	fst	QWORD PTR tv4038[ebp]
	fstp	QWORD PTR _dc22dv$[ebp+eax*8+88]

; 466  :      dc11dv[0][i] = -(dc11dv[1][i] + dc11dv[2][i]);

	fxch	ST(4)
	faddp	ST(6), ST(0)
	fxch	ST(5)
	fchs
	fstp	QWORD PTR _dc11dv$[ebp+eax*8-8]

; 467  :      dc12dv[0][i] = -(dc12dv[1][i] + dc12dv[2][i]);

	fld	QWORD PTR tv4023[ebp]
	fadd	QWORD PTR tv4020[ebp]
	fchs
	fstp	QWORD PTR _dc12dv$[ebp+eax*8-8]

; 468  :      dc21dv[0][i] = -(dc21dv[1][i] + dc21dv[2][i]);

	fld	QWORD PTR tv4032[ebp]
	fadd	QWORD PTR tv4026[ebp]
	fchs
	fstp	QWORD PTR _dc21dv$[ebp+eax*8-8]

; 469  :      dc22dv[0][i] = -(dc22dv[1][i] + dc22dv[2][i]);

	fld	QWORD PTR tv4038[ebp]
	faddp	ST(5), ST(0)
	fxch	ST(4)
	fchs
	fstp	QWORD PTR _dc22dv$[ebp+eax*8-8]
	cmp	eax, ebx
	jl	$LN77@Neo_Hookea@2

; 453  : 
; 454  :   /* gradient */
; 455  : 
; 456  :   for ( i = 0 ; i < SDIM  ; i++ )

	fstp	ST(2)
	fstp	ST(2)
	fstp	ST(1)
	jmp	SHORT $LN26@Neo_Hookea@2
$LN60@Neo_Hookea@2:
	fld	QWORD PTR __real@4000000000000000
$LN26@Neo_Hookea@2:

; 470  :   }
; 471  : 	  
; 472  : 
; 473  :   s1 = (1/(pow(detr,2.0))*LW/(1.0+LW)*c22*exp(-LW+2.0*mu/lambda)/2.0-1/(pow(detr,2.0))*c22*exp(-LW+2.0*mu/lambda)/2.0-LW/(1.0+LW)/(detr)*c22/2.0+1.0/2.0)*mu;      

	fld	QWORD PTR _detr$[ebp]
	fxch	ST(1)
	call	__CIpow
	fld1
	fld	ST(0)
	fdivrp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv4073[ebp]
	fld	QWORD PTR _LW$[ebp]
	fld	ST(0)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fst	QWORD PTR tv4075[ebp]
	fld	ST(1)
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(1)
	fst	QWORD PTR tv4077[ebp]
	fld	ST(3)
	fdiv	ST(0), ST(2)
	fld	QWORD PTR _detr$[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv4086[ebp]

; 474  :   s2 = lambda*tmp1*LW/(1.0+LW)/(detr)*c22/4.0;      

	fld	QWORD PTR _tmp1$[ebp]
	fmul	QWORD PTR _lambda$[ebp]
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR tv4097[ebp]
	fld	QWORD PTR _c22$[ebp]
	fmul	ST(2), ST(0)
	fld	QWORD PTR tv3965[ebp]
	fmul	ST(3), ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(4), ST(0)
	fxch	ST(6)
	fmul	ST(0), ST(2)
	fmulp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fsubp	ST(3), ST(0)
	fld	QWORD PTR tv4086[ebp]
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(5)
	fsubp	ST(3), ST(0)
	fxch	ST(2)
	fadd	ST(0), ST(4)
	fmul	QWORD PTR _mu$[ebp]
	fld	ST(2)
	fmul	QWORD PTR tv4097[ebp]
	fmul	QWORD PTR __real@3fd0000000000000

; 475  :   dpsirdc11 = s1+s2;

	faddp	ST(1), ST(0)
	fstp	QWORD PTR _dpsirdc11$[ebp]

; 476  : 
; 477  :   s1 = c21/4.0;      
; 478  :   s4 = 2.0*mu*tmp2+2.0*mu*LW*c11*c22;      

	fld	QWORD PTR tv3958[ebp]
	fmul	ST(0), ST(5)

; 479  :   s3 = s4-2.0*mu*LW*c12*c21-lambda*logtmp2*LW*c11*c22+lambda*logtmp2*LW*c12*c21;      

	fld	QWORD PTR _logtmp2$[ebp]
	fmul	QWORD PTR _lambda$[ebp]
	fst	QWORD PTR tv4113[ebp]
	fmulp	ST(6), ST(0)
	fxch	ST(5)
	fst	QWORD PTR tv4114[ebp]
	fld	ST(0)
	fld	QWORD PTR _c11$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv4115[ebp]
	fxch	ST(1)
	fmul	QWORD PTR _c12$[ebp]
	fstp	QWORD PTR tv4118[ebp]
	fld	ST(5)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(3)
	fld	QWORD PTR tv3958[ebp]
	fmul	QWORD PTR _tmp2$[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _c12$[ebp]
	fmulp	ST(7), ST(0)
	fxch	ST(6)
	fstp	QWORD PTR tv6871[ebp]
	fld	QWORD PTR _c21$[ebp]
	fld	QWORD PTR tv6871[ebp]
	fmul	ST(0), ST(1)
	fsubp	ST(7), ST(0)
	xor	edx, edx
	fld	QWORD PTR tv4115[ebp]
	xor	ecx, ecx
	fmulp	ST(4), ST(0)
	fxch	ST(6)
	fsubrp	ST(3), ST(0)
	fld	QWORD PTR tv4118[ebp]
	fmul	ST(0), ST(6)
	faddp	ST(3), ST(0)

; 480  :   s4 = 1/(pow(detr,2.0))/(1.0+LW);      

	fld	QWORD PTR tv4073[ebp]
	fld	ST(0)
	fdivrp	ST(5), ST(0)

; 481  :   s2 = s3*s4;       

	fxch	ST(3)
	fmulp	ST(4), ST(0)
	fld	QWORD PTR __real@3fd0000000000000
	fmul	ST(6), ST(0)

; 482  :   dpsirdc12 = s1*s2;

	fxch	ST(6)
	fmul	ST(0), ST(4)
	fst	QWORD PTR _dpsirdc12$[ebp]

; 483  : 
; 484  :   s1 = c12/4.0;      

	fld	QWORD PTR _c12$[ebp]
	fmul	ST(0), ST(7)

; 485  :   s4 = 2.0*mu*tmp2+2.0*mu*LW*c11*c22;      
; 486  :   s3 = s4-2.0*mu*LW*c12*c21-lambda*logtmp2*LW*c11*c22+lambda*logtmp2*LW*c12*c21;      
; 487  :   s4 = 1/(pow(detr,2.0))/(1.0+LW);      
; 488  :   s2 = s3*s4;      
; 489  :   dpsirdc21 = s1*s2;

	fmulp	ST(5), ST(0)
	fxch	ST(4)
	fstp	QWORD PTR _dpsirdc21$[ebp]

; 490  : 
; 491  :   s1 = (1/(pow(detr,2.0))*LW/(1.0+LW)*c11*exp(-LW+2.0*mu/lambda)/2.0-1/(pow(detr,2.0))*c11*exp(-LW+2.0*mu/lambda)/2.0-LW/(1.0+LW)/(detr)*c11/2.0+1.0/2.0)*mu;      

	fld	QWORD PTR tv4077[ebp]
	fmul	ST(0), ST(1)
	fld	QWORD PTR tv3965[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(6)
	fxch	ST(4)
	fmul	ST(0), ST(2)
	fmulp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fsubp	ST(3), ST(0)
	fld	QWORD PTR tv4086[ebp]
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(5)
	fsubp	ST(3), ST(0)
	fxch	ST(2)
	faddp	ST(4), ST(0)
	fxch	ST(3)
	fmul	QWORD PTR _mu$[ebp]

; 492  :   s2 = lambda*tmp1*LW/(1.0+LW)/(detr)*c11/4.0;      

	fxch	ST(1)
	fmul	QWORD PTR tv4097[ebp]
	fmulp	ST(4), ST(0)

; 493  :   dpsirdc22 = s1+s2;

	faddp	ST(3), ST(0)
	fxch	ST(2)
	fst	QWORD PTR _dpsirdc22$[ebp]
	fld	QWORD PTR _area$[ebp]
	fld	QWORD PTR _dpsirdc11$[ebp]
	fld	QWORD PTR _dpsirdc21$[ebp]
$LN25@Neo_Hookea@2:

; 497  :      for ( i = 0 ; i < SDIM  ; i++ )

	xor	eax, eax
	test	ebx, ebx
	jle	SHORT $LN24@Neo_Hookea@2
$LN22@Neo_Hookea@2:
	lea	esi, DWORD PTR [ecx+eax*8]

; 498  :      { f_info->grad[j][i] = area*(dpsirdc11*dc11dv[j][i]  
; 499  :                                  +dpsirdc12*dc12dv[j][i]
; 500  :                                  +dpsirdc21*dc21dv[j][i]
; 501  :                                  +dpsirdc22*dc22dv[j][i]);

	fld	QWORD PTR _dc12dv$[ebp+esi]
	lea	esi, DWORD PTR [ecx+eax*8]
	fmul	ST(0), ST(6)
	fld	QWORD PTR _dc11dv$[ebp+esi]
	lea	esi, DWORD PTR [ecx+eax*8]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dc21dv$[ebp+esi]
	lea	esi, DWORD PTR [ecx+eax*8]
	fmul	ST(0), ST(2)
	inc	eax
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dc22dv$[ebp+esi]
	mov	esi, DWORD PTR [edi+1336]
	mov	esi, DWORD PTR [edx+esi]
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fstp	QWORD PTR [esi+eax*8-8]
	mov	ebx, DWORD PTR _web+616
	cmp	eax, ebx
	jl	SHORT $LN22@Neo_Hookea@2
$LN24@Neo_Hookea@2:

; 494  : 
; 495  :   
; 496  :   for ( j = 0 ; j < FACET_VERTS  ; j++ )

	add	ecx, 48					; 00000030H
	add	edx, 4
	cmp	ecx, 144				; 00000090H
	jl	SHORT $LN25@Neo_Hookea@2

; 502  :      }
; 503  : 
; 504  :   if ( mode == METHOD_GRADIENT ) return energy;

	cmp	DWORD PTR _mode$[ebp], 4321		; 000010e1H
	fstp	ST(3)
	fstp	ST(0)
	fstp	ST(1)
	fstp	ST(0)
	fstp	ST(1)
	je	$LN114@Neo_Hookea@2

; 505  : 
; 506  :   /* hessian */
; 507  : 
; 508  :   for ( i = 0 ; i < SDIM  ; i++ )

	test	ebx, ebx
	jle	$LN16@Neo_Hookea@2
	fld	QWORD PTR _q11$[ebp]
	xor	edx, edx
	fld	ST(0)
	mov	edi, ebx
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR _q12$[ebp]
	fld	ST(0)
	fmul	ST(0), ST(2)
	fld	QWORD PTR _q22$[ebp]
	fld	ST(0)
	fmulp	ST(4), ST(0)
	fxch	ST(3)
	fstp	QWORD PTR tv4218[ebp]
	fldz
	jmp	SHORT $LN18@Neo_Hookea@2
$LN96@Neo_Hookea@2:
	fxch	ST(5)
	fxch	ST(2)
	fxch	ST(4)
	fxch	ST(2)
	fxch	ST(3)
	fxch	ST(1)
$LN18@Neo_Hookea@2:

; 509  :   {
; 510  :      ddc11dv[1][i][1] = 2*q11;

	fxch	ST(4)

; 511  :      ddc11dv[1][i][2] = q12;
; 512  : 
; 513  :      ddc11dv[2][i][1] = q12;
; 514  :      ddc11dv[2][i][2] = 0.0;
; 515  : 
; 516  :      ddc12dv[1][i][1] = 2*q12;
; 517  :      ddc12dv[1][i][2] = q22;
; 518  : 
; 519  :      ddc12dv[2][i][1] = q22;
; 520  :      ddc12dv[2][i][2] = 0.0;
; 521  : 
; 522  :      ddc21dv[1][i][1] = 0.0;
; 523  :      ddc21dv[1][i][2] = q11;
; 524  : 
; 525  :      ddc21dv[2][i][1] = q11;
; 526  :      ddc21dv[2][i][2] = 2*q12;
; 527  : 
; 528  :      ddc22dv[1][i][1] = 0.0;
; 529  :      ddc22dv[1][i][2] = q12;
; 530  : 
; 531  :      ddc22dv[2][i][1] = q12;
; 532  :      ddc22dv[2][i][2] = 2*q22;
; 533  : 
; 534  :      for ( j = 1 ; j < FACET_VERTS;  j++ )

	mov	ecx, edx
	fst	QWORD PTR _ddc11dv$[ebp+edx+152]
	mov	eax, edx
	fxch	ST(2)
	mov	esi, 2
	fst	QWORD PTR _ddc11dv$[ebp+edx+160]
	fst	QWORD PTR _ddc11dv$[ebp+edx+296]
	fst	QWORD PTR _ddc22dv$[ebp+edx+160]
	fst	QWORD PTR _ddc22dv$[ebp+edx+296]
	fxch	ST(4)
	fst	QWORD PTR _ddc11dv$[ebp+edx+304]
	fst	QWORD PTR _ddc12dv$[ebp+edx+304]
	fst	QWORD PTR _ddc21dv$[ebp+edx+152]
	fst	QWORD PTR _ddc22dv$[ebp+edx+152]
	fxch	ST(1)
	fst	QWORD PTR _ddc12dv$[ebp+edx+152]
	fst	QWORD PTR _ddc21dv$[ebp+edx+304]
	fxch	ST(3)
	fst	QWORD PTR _ddc12dv$[ebp+edx+160]
	fst	QWORD PTR _ddc12dv$[ebp+edx+296]
	fxch	ST(5)
	fst	QWORD PTR _ddc21dv$[ebp+edx+160]
	fst	QWORD PTR _ddc21dv$[ebp+edx+296]
	fld	QWORD PTR tv4218[ebp]
	fstp	QWORD PTR _ddc22dv$[ebp+edx+304]
$LN15@Neo_Hookea@2:

; 535  :      { 
; 536  :         ddc11dv[0][i][j] = -(ddc11dv[1][i][j] + ddc11dv[2][i][j]);

	fld	QWORD PTR _ddc11dv$[ebp+eax+296]
	add	eax, 8
	fadd	QWORD PTR _ddc11dv$[ebp+eax+144]
	add	ecx, 144				; 00000090H
	dec	esi
	fchs
	fstp	QWORD PTR _ddc11dv$[ebp+eax]

; 537  :         ddc12dv[0][i][j] = -(ddc12dv[1][i][j] + ddc12dv[2][i][j]);

	fld	QWORD PTR _ddc12dv$[ebp+eax+288]
	fadd	QWORD PTR _ddc12dv$[ebp+eax+144]
	fchs
	fstp	QWORD PTR _ddc12dv$[ebp+eax]

; 538  :         ddc21dv[0][i][j] = -(ddc21dv[1][i][j] + ddc21dv[2][i][j]);

	fld	QWORD PTR _ddc21dv$[ebp+eax+288]
	fadd	QWORD PTR _ddc21dv$[ebp+eax+144]
	fchs
	fstp	QWORD PTR _ddc21dv$[ebp+eax]

; 539  :         ddc22dv[0][i][j] = -(ddc22dv[1][i][j] + ddc22dv[2][i][j]);

	fld	QWORD PTR _ddc22dv$[ebp+eax+288]
	fadd	QWORD PTR _ddc22dv$[ebp+eax+144]
	fchs
	fstp	QWORD PTR _ddc22dv$[ebp+eax]

; 540  :         ddc11dv[j][i][0] = -(ddc11dv[j][i][1] + ddc11dv[j][i][2]);

	fld	QWORD PTR _ddc11dv$[ebp+ecx+16]
	fadd	QWORD PTR _ddc11dv$[ebp+ecx+8]
	fchs
	fstp	QWORD PTR _ddc11dv$[ebp+ecx]

; 541  :         ddc12dv[j][i][0] = -(ddc12dv[j][i][1] + ddc12dv[j][i][2]);

	fld	QWORD PTR _ddc12dv$[ebp+ecx+16]
	fadd	QWORD PTR _ddc12dv$[ebp+ecx+8]
	fchs
	fstp	QWORD PTR _ddc12dv$[ebp+ecx]

; 542  :         ddc21dv[j][i][0] = -(ddc21dv[j][i][1] + ddc21dv[j][i][2]);

	fld	QWORD PTR _ddc21dv$[ebp+ecx+16]
	fadd	QWORD PTR _ddc21dv$[ebp+ecx+8]
	fchs
	fstp	QWORD PTR _ddc21dv$[ebp+ecx]

; 543  :         ddc22dv[j][i][0] = -(ddc22dv[j][i][1] + ddc22dv[j][i][2]);

	fld	QWORD PTR _ddc22dv$[ebp+ecx+16]
	fadd	QWORD PTR _ddc22dv$[ebp+ecx+8]
	fchs
	fstp	QWORD PTR _ddc22dv$[ebp+ecx]
	jne	$LN15@Neo_Hookea@2

; 544  :      }
; 545  :      ddc11dv[0][i][0] = -(ddc11dv[1][i][0] + ddc11dv[2][i][0]);

	fld	QWORD PTR _ddc11dv$[ebp+edx+288]
	add	edx, 24					; 00000018H
	dec	edi
	fadd	QWORD PTR _ddc11dv$[ebp+edx+120]
	fchs
	fstp	QWORD PTR _ddc11dv$[ebp+edx-24]

; 546  :      ddc12dv[0][i][0] = -(ddc12dv[1][i][0] + ddc12dv[2][i][0]);

	fld	QWORD PTR _ddc12dv$[ebp+edx+264]
	fadd	QWORD PTR _ddc12dv$[ebp+edx+120]
	fchs
	fstp	QWORD PTR _ddc12dv$[ebp+edx-24]

; 547  :      ddc21dv[0][i][0] = -(ddc21dv[1][i][0] + ddc21dv[2][i][0]);

	fld	QWORD PTR _ddc21dv$[ebp+edx+264]
	fadd	QWORD PTR _ddc21dv$[ebp+edx+120]
	fchs
	fstp	QWORD PTR _ddc21dv$[ebp+edx-24]

; 548  :      ddc22dv[0][i][0] = -(ddc22dv[1][i][0] + ddc22dv[2][i][0]);

	fld	QWORD PTR _ddc22dv$[ebp+edx+264]
	fadd	QWORD PTR _ddc22dv$[ebp+edx+120]
	fchs
	fstp	QWORD PTR _ddc22dv$[ebp+edx-24]
	jne	$LN96@Neo_Hookea@2

; 505  : 
; 506  :   /* hessian */
; 507  : 
; 508  :   for ( i = 0 ; i < SDIM  ; i++ )

	fstp	ST(4)
	fstp	ST(0)
	fstp	ST(1)
	fstp	ST(1)
	fstp	ST(1)
	fstp	ST(0)
$LN16@Neo_Hookea@2:

; 558  :   s4 = 1/(pow(detr,3.0))/pow(1.0+LW,3.0);      

	fld	QWORD PTR __real@4008000000000000
	call	__CIpow
	fld1
	fdivrp	ST(1), ST(0)
	fstp	QWORD PTR tv6880[ebp]
	fld	QWORD PTR tv4075[ebp]
	fld	QWORD PTR __real@4008000000000000
	call	__CIpow
	fdivr	QWORD PTR tv6880[ebp]
	fstp	QWORD PTR tv4361[ebp]
	fld	QWORD PTR _LW$[ebp]
	fld	QWORD PTR __real@4000000000000000
	call	__CIpow
	fst	QWORD PTR tv4363[ebp]
	fld	QWORD PTR _mu$[ebp]
	fmul	QWORD PTR __real@4010000000000000
	fld	ST(0)
	fmul	ST(0), ST(2)
	fld	ST(0)
	fld	QWORD PTR _c11$[ebp]
	fmul	ST(1), ST(0)
	fld	QWORD PTR _c22$[ebp]
	fmul	ST(2), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR tv4367[ebp]
	fld	QWORD PTR tv3958[ebp]
	fmulp	ST(5), ST(0)
	fld	QWORD PTR _tmp2$[ebp]
	fmul	ST(5), ST(0)
	fxch	ST(5)
	fstp	QWORD PTR tv4369[ebp]
	fld	ST(3)
	fld	QWORD PTR _LW$[ebp]
	fmul	ST(1), ST(0)
	fld	ST(1)
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR tv4373[ebp]
	fxch	ST(3)
	fmul	ST(0), ST(4)
	fstp	QWORD PTR tv4375[ebp]
	fld	ST(0)
	fmulp	ST(4), ST(0)
	fxch	ST(3)
	fstp	QWORD PTR tv4378[ebp]
	fld	QWORD PTR _c12$[ebp]
	fmul	ST(1), ST(0)
	fld	QWORD PTR _c21$[ebp]
	fmul	ST(2), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR tv4381[ebp]
	fmulp	ST(3), ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv4384[ebp]
	fld	QWORD PTR __real@4008000000000000
	call	__CIpow
	fst	QWORD PTR tv4386[ebp]
	fmul	QWORD PTR tv3958[ebp]
	fld	ST(0)
	fld	QWORD PTR _c11$[ebp]
	fmul	ST(1), ST(0)
	fld	QWORD PTR _c22$[ebp]
	fmul	ST(2), ST(0)
	fxch	ST(2)
	fst	QWORD PTR tv4389[ebp]
	fld	QWORD PTR _c12$[ebp]
	fmul	ST(4), ST(0)
	fld	QWORD PTR _c21$[ebp]
	fmul	ST(5), ST(0)
	fxch	ST(5)
	fstp	QWORD PTR tv4392[ebp]
	fld	QWORD PTR tv4363[ebp]
	fld	QWORD PTR _lambda$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv4395[ebp]
	fld	ST(0)
	fmul	ST(0), ST(3)

; 552  :   s5 = 2.0*mu*pow(LW,2.0)*tmp2+4.0*mu*pow(LW,2.0)*c11*c22+4.0*mu*LW*c11*c22+4.0*mu*tmp2;      
; 553  :   s4 = s5+4.0*mu*LW*tmp2-4.0*mu*pow(LW,2.0)*c12*c21-4.0*mu*LW*c12*c21+2.0*mu*pow(LW,3.0)*c11*c22-2.0*mu*pow(LW,3.0)*c12*c21;      
; 554  :   s5 = s4-lambda*pow(LW,2.0)*c12*c21-2.0*lambda*logtmp2*LW*c11*c22+lambda*pow(LW,3.0)*c11*c22+lambda*pow(LW,2.0)*c11*c22;      

	fst	QWORD PTR tv4396[ebp]
	fmul	ST(0), ST(7)
	fstp	QWORD PTR tv4397[ebp]
	fxch	ST(1)
	fadd	ST(0), ST(0)
	fmul	QWORD PTR _logtmp2$[ebp]
	fst	QWORD PTR tv4400[ebp]
	fmul	QWORD PTR _LW$[ebp]
	fst	QWORD PTR tv4401[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(5)
	fstp	QWORD PTR tv4403[ebp]
	fld	QWORD PTR tv4386[ebp]
	fmul	QWORD PTR _lambda$[ebp]
	fst	QWORD PTR tv4405[ebp]
	fld	ST(0)
	fmul	ST(0), ST(5)
	fst	QWORD PTR tv4406[ebp]
	fmul	ST(0), ST(6)
	fstp	QWORD PTR tv4407[ebp]
	fxch	ST(1)
	fmul	ST(0), ST(4)
	fst	QWORD PTR tv4409[ebp]
	fmul	ST(0), ST(5)
	fstp	QWORD PTR tv4410[ebp]

; 555  :   s6 = s5+lambda*logtmp2*pow(LW,3.0)*c12*c21-lambda*logtmp2*pow(LW,3.0)*c11*c22;      

	fld	QWORD PTR tv4386[ebp]
	fmul	QWORD PTR tv4113[ebp]
	fst	QWORD PTR tv4413[ebp]
	fld	ST(0)
	fmul	ST(0), ST(3)
	fst	QWORD PTR tv4414[ebp]
	fmul	ST(0), ST(7)
	fst	QWORD PTR tv4415[ebp]
	fxch	ST(1)
	fmul	ST(0), ST(5)
	fst	QWORD PTR tv4417[ebp]
	fmul	ST(0), ST(6)
	fst	QWORD PTR tv4418[ebp]

; 556  :   s7 = s6-lambda*pow(LW,3.0)*c12*c21;      

	fxch	ST(2)
	fmul	ST(0), ST(3)
	fst	QWORD PTR tv4421[ebp]
	fmul	ST(0), ST(7)
	fstp	QWORD PTR tv4422[ebp]

; 557  :   s3 = s7+2.0*lambda*logtmp2*pow(LW,2.0)*c12*c21+2.0*lambda*logtmp2*LW*c12*c21-2.0*lambda*logtmp2*pow(LW,2.0)*c11*c22;      

	fld	QWORD PTR tv4400[ebp]
	fmul	QWORD PTR tv4363[ebp]
	fst	QWORD PTR tv4425[ebp]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(7)
	fstp	QWORD PTR tv4427[ebp]
	fld	QWORD PTR tv4401[ebp]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(7)
	fstp	QWORD PTR tv4430[ebp]
	fld	QWORD PTR tv4425[ebp]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(6)
	fstp	QWORD PTR tv4433[ebp]
	fld	QWORD PTR tv4369[ebp]
	fadd	QWORD PTR tv4367[ebp]
	fadd	QWORD PTR tv4373[ebp]
	fadd	QWORD PTR tv4375[ebp]
	fadd	QWORD PTR tv4378[ebp]
	fsub	QWORD PTR tv4381[ebp]
	fsub	QWORD PTR tv4384[ebp]
	faddp	ST(4), ST(0)
	fxch	ST(3)
	fsub	QWORD PTR tv4392[ebp]
	fsub	QWORD PTR tv4397[ebp]
	fsub	QWORD PTR tv4403[ebp]
	fadd	QWORD PTR tv4407[ebp]
	fadd	QWORD PTR tv4410[ebp]
	faddp	ST(3), ST(0)
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fsub	QWORD PTR tv4422[ebp]
	fadd	QWORD PTR tv4427[ebp]
	fadd	QWORD PTR tv4430[ebp]
	fsub	QWORD PTR tv4433[ebp]

; 559  :   s2 = s3*s4;      

	fmul	QWORD PTR tv4361[ebp]
	fld	ST(3)
	fmul	ST(0), ST(4)

; 549  :   }
; 550  : 
; 551  :   s1 = c22*c22/4.0;      

	fld	QWORD PTR __real@3fd0000000000000
	fmul	ST(1), ST(0)

; 560  :   ddpsirdc11dc11 = s1*s2;

	fxch	ST(1)
	fmul	ST(0), ST(2)
	fstp	QWORD PTR _ddpsirdc11dc11$[ebp]

; 561  : 
; 562  :   s1 = -c22*c21/4.0;      

	fld	ST(4)
	fmul	ST(0), ST(6)
	fst	QWORD PTR tv4442[ebp]
	fld	QWORD PTR __real@bfd0000000000000
	fmul	ST(1), ST(0)

; 563  :   s5 = 2.0*mu*pow(LW,2.0)*tmp2+4.0*mu*pow(LW,2.0)*c11*c22+4.0*mu*LW*c11*c22+4.0*mu*tmp2;      
; 564  :   s4 = s5+4.0*mu*LW*tmp2-4.0*mu*pow(LW,2.0)*c12*c21-4.0*mu*LW*c12*c21+2.0*mu*pow(LW,3.0)*c11*c22-2.0*mu*pow(LW,3.0)*c12*c21;      
; 565  :   s5 = s4-lambda*pow(LW,2.0)*c12*c21-2.0*lambda*logtmp2*LW*c11*c22+lambda*pow(LW,3.0)*c11*c22+lambda*pow(LW,2.0)*c11*c22;      
; 566  :   s6 = s5+lambda*logtmp2*pow(LW,3.0)*c12*c21-lambda*logtmp2*pow(LW,3.0)*c11*c22;      
; 567  :   s7 = s6-lambda*pow(LW,3.0)*c12*c21;      
; 568  :   s3 = s7+2.0*lambda*logtmp2*pow(LW,2.0)*c12*c21+2.0*lambda*logtmp2*LW*c12*c21-2.0*lambda*logtmp2*pow(LW,2.0)*c11*c22;      
; 569  :   s4 = 1/(pow(detr,3.0))/pow(1.0+LW,3.0);      
; 570  :   s2 = s3*s4;      
; 571  :   ddpsirdc11dc12 = s1*s2;

	fxch	ST(1)
	fmul	ST(0), ST(3)
	fstp	QWORD PTR _ddpsirdc11dc12$[ebp]

; 572  :   
; 573  :   
; 574  :   s1 = -c22*c12/4.0;      

	fld	ST(5)
	fmul	ST(0), ST(4)
	fst	QWORD PTR tv4446[ebp]
	fmulp	ST(1), ST(0)

; 575  :   s5 = 2.0*mu*pow(LW,2.0)*tmp2+4.0*mu*pow(LW,2.0)*c11*c22+4.0*mu*LW*c11*c22+4.0*mu*tmp2;      
; 576  :   s4 = s5+4.0*mu*LW*tmp2-4.0*mu*pow(LW,2.0)*c12*c21-4.0*mu*LW*c12*c21+2.0*mu*pow(LW,3.0)*c11*c22-2.0*mu*pow(LW,3.0)*c12*c21;      
; 577  :   s5 = s4-lambda*pow(LW,2.0)*c12*c21-2.0*lambda*logtmp2*LW*c11*c22+lambda*pow(LW,3.0)*c11*c22+lambda*pow(LW,2.0)*c11*c22;      
; 578  :   s6 = s5+lambda*logtmp2*pow(LW,3.0)*c12*c21-lambda*logtmp2*pow(LW,3.0)*c11*c22;      
; 579  :   s7 = s6-lambda*pow(LW,3.0)*c12*c21;      
; 580  :   s3 = s7+2.0*lambda*logtmp2*pow(LW,2.0)*c12*c21+2.0*lambda*logtmp2*LW*c12*c21-2.0*lambda*logtmp2*pow(LW,2.0)*c11*c22;      
; 581  :   s4 = 1/(pow(detr,3.0))/pow(1.0+LW,3.0);      
; 582  :   s2 = s3*s4;     
; 583  :   ddpsirdc11dc21 = s1*s2;

	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _ddpsirdc11dc21$[ebp]

; 584  : 
; 585  : 
; 586  :   s3 = mu*tmp2*c12*c21/2.0+mu*LW*c11*c11*c22*c22/2.0+lambda*pow(LW,3.0)*c11*c11*c22*c22/4.0+lambda*pow(LW,2.0)*c11*c11*c22*c22/4.0-mu*pow(LW,3.0)*c12*c12*c21*c21/2.0;      

	fld	QWORD PTR _LW$[ebp]
	fld	QWORD PTR _mu$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv4454[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(5)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv4459[ebp]
	fld	QWORD PTR _tmp2$[ebp]
	fmul	ST(0), ST(2)
	fst	QWORD PTR tv4460[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(7)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv4463[ebp]
	fld	QWORD PTR tv4386[ebp]
	fmul	ST(0), ST(2)
	fst	QWORD PTR tv4471[ebp]
	fmul	ST(0), ST(4)
	fst	QWORD PTR tv4472[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(7)
	fmul	ST(0), ST(7)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv4476[ebp]

; 587  :   s4 = s3-mu*pow(LW,2.0)*c12*c12*c21*c21-mu*LW*c12*c12*c21*c21/2.0;      

	fld	QWORD PTR tv4363[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv4479[ebp]
	fmul	ST(0), ST(3)
	fst	QWORD PTR tv4480[ebp]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(6)
	fstp	QWORD PTR tv4483[ebp]
	fld	QWORD PTR tv4454[ebp]
	fld	ST(0)
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(7)
	fmul	ST(0), ST(7)
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv4489[ebp]

; 588  :   s2 = s4+mu*c22*c11*tmp2/2.0+mu*LW*tmp2*c12*c21+mu*pow(LW,2.0)*tmp2*c12*c21/2.0;      

	fld	QWORD PTR _tmp2$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv4496[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(7)
	fstp	QWORD PTR tv4498[ebp]
	fmul	QWORD PTR tv4479[ebp]
	fst	QWORD PTR tv4500[ebp]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv4503[ebp]

; 589  :   s4 = s2-lambda*logtmp2*pow(LW,3.0)*c11*c22*c12*c21/4.0;      
; 590  :   s3 = s4-lambda*logtmp2*pow(LW,2.0)*c11*c22*c12*c21/2.0-lambda*logtmp2*LW*c11*c11*c22*c22/4.0-lambda*pow(LW,3.0)*c11*c22*c12*c21/4.0;      

	fld	QWORD PTR tv4363[ebp]
	fmul	QWORD PTR tv4113[ebp]
	fst	QWORD PTR tv4511[ebp]
	fld	ST(0)
	fmul	ST(0), ST(5)
	fstp	QWORD PTR tv4512[ebp]
	fld	QWORD PTR tv4115[ebp]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(3)
	fstp	QWORD PTR tv4521[ebp]

; 591  :   s4 = s3-lambda*pow(LW,2.0)*c11*c22*c12*c21/4.0+mu*pow(LW,3.0)*c11*c22*c12*c21/2.0;      

	fld	QWORD PTR tv4471[ebp]
	fmul	ST(0), ST(5)
	fstp	QWORD PTR tv4532[ebp]

; 592  :   s5 = s4+mu*pow(LW,2.0)*c11*c22*c12*c21;      

	fld	QWORD PTR tv4479[ebp]
	fmul	ST(0), ST(5)
	fstp	QWORD PTR tv4539[ebp]

; 593  :   s1 = s5+lambda*logtmp2*pow(LW,3.0)*c12*c12*c21*c21/4.0+lambda*logtmp2*LW*c12*c12*c21*c21/4.0+lambda*logtmp2*pow(LW,2.0)*c12*c12*c21*c21/2.0;      

	fld	QWORD PTR tv4414[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(7)
	fmul	ST(0), ST(7)
	fmul	ST(0), ST(3)
	fstp	QWORD PTR tv4548[ebp]
	fld	QWORD PTR tv4118[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(7)
	fmul	ST(0), ST(7)
	fmul	ST(0), ST(3)
	fstp	QWORD PTR tv4553[ebp]
	fmul	ST(0), ST(3)
	fst	QWORD PTR tv4555[ebp]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(6)
	fmulp	ST(1), ST(0)
	fstp	QWORD PTR tv4559[ebp]
	fld	QWORD PTR tv4406[ebp]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(1)
	fld	QWORD PTR tv4463[ebp]
	fadd	QWORD PTR tv4459[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv4409[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fsub	QWORD PTR tv4476[ebp]
	fsub	QWORD PTR tv4483[ebp]
	fsub	QWORD PTR tv4489[ebp]
	fld	QWORD PTR tv3982[ebp]
	fmul	ST(0), ST(4)
	fmul	QWORD PTR _tmp2$[ebp]
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fadd	QWORD PTR tv4498[ebp]
	fadd	QWORD PTR tv4503[ebp]
	fld	QWORD PTR tv4418[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(7)
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv4512[ebp]
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(7)
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fsub	QWORD PTR tv4521[ebp]
	fld	QWORD PTR tv4407[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(7)
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv4410[ebp]

; 591  :   s4 = s3-lambda*pow(LW,2.0)*c11*c22*c12*c21/4.0+mu*pow(LW,3.0)*c11*c22*c12*c21/2.0;      

	fmul	ST(0), ST(4)
	fmul	ST(0), ST(7)
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv4532[ebp]
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(7)
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)

; 592  :   s5 = s4+mu*pow(LW,2.0)*c11*c22*c12*c21;      

	fld	QWORD PTR tv4539[ebp]
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(7)
	faddp	ST(1), ST(0)

; 593  :   s1 = s5+lambda*logtmp2*pow(LW,3.0)*c12*c12*c21*c21/4.0+lambda*logtmp2*LW*c12*c12*c21*c21/4.0+lambda*logtmp2*pow(LW,2.0)*c12*c12*c21*c21/2.0;      

	fadd	QWORD PTR tv4548[ebp]
	fadd	QWORD PTR tv4553[ebp]
	fadd	QWORD PTR tv4559[ebp]

; 594  :   s2 = 1/(pow(detr,3.0))/pow(1.0+LW,3.0);      
; 595  :   ddpsirdc11dc22 = s1*s2;

	fld	QWORD PTR tv4361[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _ddpsirdc11dc22$[ebp]

; 596  : 
; 597  :   s1 = c21*c22/4.0;      
; 598  :   s6 = lambda*logtmp2*pow(LW,3.0)*c11*c22-lambda*logtmp2*pow(LW,3.0)*c12*c21;      

	fld	QWORD PTR tv4418[ebp]
	fsub	QWORD PTR tv4415[ebp]

; 599  :   s5 = s6+2.0*lambda*logtmp2*LW*c11*c22+2.0*lambda*logtmp2*pow(LW,2.0)*c11*c22;      

	fadd	QWORD PTR tv4403[ebp]
	fadd	QWORD PTR tv4433[ebp]

; 600  :   s6 = s5-2.0*lambda*logtmp2*LW*c12*c21-2.0*lambda*logtmp2*pow(LW,2.0)*c12*c21;      

	fsub	QWORD PTR tv4430[ebp]
	fsub	QWORD PTR tv4427[ebp]

; 601  :   s4 = s6-4.0*mu*tmp2-4.0*mu*LW*tmp2-2.0*mu*pow(LW,2.0)*tmp2;      

	fsub	QWORD PTR tv4375[ebp]
	fsub	QWORD PTR tv4378[ebp]
	fsub	QWORD PTR tv4369[ebp]

; 602  :   s5 = s4+4.0*mu*pow(LW,2.0)*c12*c21+4.0*mu*LW*c12*c21-4.0*mu*pow(LW,2.0)*c11*c22-4.0*mu*LW*c11*c22;      

	fadd	QWORD PTR tv4381[ebp]
	fadd	QWORD PTR tv4384[ebp]
	fsub	QWORD PTR tv4367[ebp]
	fsub	QWORD PTR tv4373[ebp]

; 603  :   s3 = s5-2.0*mu*pow(LW,3.0)*c11*c22+lambda*pow(LW,3.0)*c12*c21+lambda*pow(LW,2.0)*c12*c21-lambda*pow(LW,3.0)*c11*c22-lambda*pow(LW,2.0)*c11*c22+2.0*mu*pow(LW,3.0)*c12*c21;      

	fsub	QWORD PTR tv4389[ebp]
	fadd	QWORD PTR tv4422[ebp]
	fadd	QWORD PTR tv4397[ebp]
	fsub	QWORD PTR tv4407[ebp]
	fsub	QWORD PTR tv4410[ebp]
	fadd	QWORD PTR tv4392[ebp]

; 604  :   s4 = 1/(pow(detr,3.0))/pow(1.0+LW,3.0);      
; 605  :   s2 = s3*s4;      

	fmulp	ST(1), ST(0)
	fst	QWORD PTR tv4587[ebp]
	fld	QWORD PTR tv4442[ebp]
	fmul	ST(0), ST(3)

; 606  :   ddpsirdc12dc11 = s1*s2;

	fmul	ST(0), ST(1)
	fstp	QWORD PTR _ddpsirdc12dc11$[ebp]

; 607  : 
; 608  :   s1 = -c21*c21/4.0;      

	fld	ST(6)
	fmul	ST(0), ST(7)
	fmul	QWORD PTR __real@bfd0000000000000

; 609  :   s6 = lambda*logtmp2*pow(LW,3.0)*c11*c22-lambda*logtmp2*pow(LW,3.0)*c12*c21;      
; 610  :   s5 = s6+2.0*lambda*logtmp2*LW*c11*c22+2.0*lambda*logtmp2*pow(LW,2.0)*c11*c22;      
; 611  :   s6 = s5-2.0*lambda*logtmp2*LW*c12*c21-2.0*lambda*logtmp2*pow(LW,2.0)*c12*c21;      
; 612  :   s4 = s6-4.0*mu*tmp2-4.0*mu*LW*tmp2-2.0*mu*pow(LW,2.0)*tmp2;      
; 613  :   s5 = s4+4.0*mu*pow(LW,2.0)*c12*c21+4.0*mu*LW*c12*c21-4.0*mu*pow(LW,2.0)*c11*c22-4.0*mu*LW*c11*c22;      
; 614  :   s3 = s5-2.0*mu*pow(LW,3.0)*c11*c22+lambda*pow(LW,3.0)*c12*c21+lambda*pow(LW,2.0)*c12*c21-lambda*pow(LW,3.0)*c11*c22-lambda*pow(LW,2.0)*c11*c22+2.0*mu*pow(LW,3.0)*c12*c21;      
; 615  :   s4 = 1/(pow(detr,3.0))/pow(1.0+LW,3.0);      
; 616  :   s2 = s3*s4;      
; 617  :   ddpsirdc12dc12 = s1*s2;

	fmulp	ST(1), ST(0)
	fstp	QWORD PTR _ddpsirdc12dc12$[ebp]

; 618  : 
; 619  :   s3 = -mu*LW*c12*c12*c21*c21/2.0-lambda*pow(LW,3.0)*c12*c12*c21*c21/4.0-lambda*pow(LW,2.0)*c12*c12*c21*c21/4.0+mu*pow(LW,3.0)*c11*c11*c22*c22/2.0+mu*pow(LW,2.0)*c11*c11*c22*c22;      

	fld	QWORD PTR tv4532[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(1)
	fst	QWORD PTR tv4599[ebp]
	fld	QWORD PTR tv4539[ebp]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(6)
	fstp	QWORD PTR tv4613[ebp]

; 620  :   s4 = s3+mu*c21*c12*tmp2/2.0+mu*pow(LW,2.0)*tmp2*c11*c22/2.0;      

	fld	QWORD PTR tv4500[ebp]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv4623[ebp]

; 621  :   s2 = s4+mu*LW*tmp2*c11*c22-mu*pow(LW,2.0)*c12*c21*c11*c22+mu*tmp2*c11*c22/2.0;      

	fld	QWORD PTR tv4496[ebp]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(6)
	fstp	QWORD PTR tv4627[ebp]
	fld	QWORD PTR tv4460[ebp]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv4635[ebp]

; 622  :   s3 = s2+lambda*logtmp2*LW*c12*c12*c21*c21/4.0+lambda*pow(LW,3.0)*c12*c21*c11*c22/4.0+lambda*pow(LW,2.0)*c12*c21*c11*c22/4.0+mu*LW*c11*c11*c22*c22/2.0;      
; 623  :   s4 = s3-mu*pow(LW,3.0)*c12*c21*c11*c22/2.0+lambda*logtmp2*pow(LW,2.0)*c12*c21*c11*c22/2.0;      
; 624  :   s5 = s4+lambda*logtmp2*pow(LW,3.0)*c12*c21*c11*c22/4.0;      
; 625  :   s1 = s5-lambda*logtmp2*pow(LW,3.0)*c11*c11*c22*c22/4.0-lambda*logtmp2*LW*c11*c11*c22*c22/4.0-lambda*logtmp2*pow(LW,2.0)*c11*c11*c22*c22/2.0;      

	fld	QWORD PTR tv4417[ebp]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(6)
	fstp	QWORD PTR tv4667[ebp]
	fld	QWORD PTR tv4512[ebp]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(6)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv4674[ebp]
	fld	QWORD PTR tv4421[ebp]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(2)
	fadd	QWORD PTR tv4489[ebp]
	fld	QWORD PTR tv4396[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(7)
	fmul	ST(0), ST(7)
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR tv4613[ebp]
	fld	ST(5)
	fmul	QWORD PTR _mu$[ebp]
	fmul	ST(0), ST(3)
	fmul	QWORD PTR _tmp2$[ebp]
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fadd	QWORD PTR tv4623[ebp]
	fadd	QWORD PTR tv4627[ebp]
	fld	QWORD PTR tv4480[ebp]
	fmul	ST(0), ST(7)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR tv4635[ebp]
	fadd	QWORD PTR tv4553[ebp]
	fld	QWORD PTR tv4422[ebp]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv4397[ebp]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fadd	QWORD PTR tv4459[ebp]
	fld	QWORD PTR tv4472[ebp]
	fmul	ST(0), ST(7)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv4555[ebp]
	fmul	ST(0), ST(7)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(6)
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv4415[ebp]
	fld	ST(0)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(3)
	faddp	ST(2), ST(0)
	fld	QWORD PTR tv4667[ebp]
	fmul	ST(0), ST(3)
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fsub	QWORD PTR tv4521[ebp]
	fsub	QWORD PTR tv4674[ebp]

; 626  :   s2 = 1/(pow(detr,3.0))/pow(1.0+LW,3.0);    
; 627  :   ddpsirdc12dc21 = s1*s2; 

	fld	QWORD PTR tv4361[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _ddpsirdc12dc21$[ebp]

; 628  : 
; 629  :   s1 = c21*c11/4.0;      

	fld	ST(6)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(3)
	fst	QWORD PTR tv4679[ebp]

; 630  :   s6 = lambda*logtmp2*pow(LW,3.0)*c11*c22-lambda*logtmp2*pow(LW,3.0)*c12*c21;      
; 631  :   s5 = s6+2.0*lambda*logtmp2*LW*c11*c22+2.0*lambda*logtmp2*pow(LW,2.0)*c11*c22;      
; 632  :   s6 = s5-2.0*lambda*logtmp2*LW*c12*c21-2.0*lambda*logtmp2*pow(LW,2.0)*c12*c21;      
; 633  :   s4 = s6-4.0*mu*tmp2-4.0*mu*LW*tmp2-2.0*mu*pow(LW,2.0)*tmp2;      
; 634  :   s5 = s4+4.0*mu*pow(LW,2.0)*c12*c21+4.0*mu*LW*c12*c21-4.0*mu*pow(LW,2.0)*c11*c22-4.0*mu*LW*c11*c22;      
; 635  :   s3 = s5-2.0*mu*pow(LW,3.0)*c11*c22+lambda*pow(LW,3.0)*c12*c21+lambda*pow(LW,2.0)*c12*c21-lambda*pow(LW,3.0)*c11*c22-lambda*pow(LW,2.0)*c11*c22+2.0*mu*pow(LW,3.0)*c12*c21;      
; 636  :   s4 = 1/(pow(detr,3.0))/pow(1.0+LW,3.0);      
; 637  :   s2 = s3*s4;      
; 638  :   ddpsirdc12dc22 =  s1*s2;

	fmul	QWORD PTR tv4587[ebp]
	fstp	QWORD PTR _ddpsirdc12dc22$[ebp]

; 639  :   
; 640  : 
; 641  :   s1 = c12*c22/4.0;      
; 642  :   s5 = 4.0*mu*pow(LW,2.0)*c12*c21+4.0*mu*LW*c12*c21-4.0*mu*pow(LW,2.0)*c11*c22-4.0*mu*LW*c11*c22;      

	fld	QWORD PTR tv4384[ebp]
	fadd	QWORD PTR tv4381[ebp]
	fsub	QWORD PTR tv4367[ebp]
	fsub	QWORD PTR tv4373[ebp]

; 643  :   s4 = s5-2.0*mu*pow(LW,3.0)*c11*c22+2.0*mu*pow(LW,3.0)*c12*c21+lambda*pow(LW,2.0)*c12*c21-lambda*pow(LW,3.0)*c11*c22-lambda*pow(LW,2.0)*c11*c22;      

	fsub	QWORD PTR tv4389[ebp]
	fadd	QWORD PTR tv4392[ebp]
	fadd	QWORD PTR tv4397[ebp]
	fsub	QWORD PTR tv4407[ebp]
	fsub	QWORD PTR tv4410[ebp]

; 644  :   s5 = s4+lambda*pow(LW,3.0)*c12*c21-4.0*mu*tmp2-4.0*mu*LW*tmp2-2.0*mu*pow(LW,2.0)*tmp2;      

	fadd	QWORD PTR tv4422[ebp]
	fsub	QWORD PTR tv4375[ebp]
	fsub	QWORD PTR tv4378[ebp]
	fsub	QWORD PTR tv4369[ebp]

; 645  :   s6 = s5-2.0*lambda*logtmp2*pow(LW,2.0)*c12*c21-2.0*lambda*logtmp2*LW*c12*c21;      

	fsub	QWORD PTR tv4427[ebp]
	fsub	QWORD PTR tv4430[ebp]

; 646  :   s7 = s6+2.0*lambda*logtmp2*pow(LW,2.0)*c11*c22;      

	fadd	QWORD PTR tv4433[ebp]

; 647  :   s3 = s7+2.0*lambda*logtmp2*LW*c11*c22+lambda*logtmp2*pow(LW,3.0)*c11*c22-lambda*logtmp2*pow(LW,3.0)*c12*c21;      

	fadd	QWORD PTR tv4403[ebp]
	fadd	QWORD PTR tv4418[ebp]
	fsubrp	ST(2), ST(0)

; 648  :   s4 = 1/(pow(detr,3.0))/pow(1.0+LW,3.0);      
; 649  :   s2 = s3*s4;      

	fmulp	ST(1), ST(0)
	fst	QWORD PTR tv4706[ebp]
	fld	QWORD PTR tv4446[ebp]
	fmul	ST(0), ST(2)

; 650  :   ddpsirdc21dc11 = s1*s2;

	fmulp	ST(1), ST(0)
	fstp	QWORD PTR _ddpsirdc21dc11$[ebp]

; 651  : 
; 652  : 
; 653  :   s4 = -lambda*logtmp2*pow(LW,3.0)*c11*c11*c22*c22/4.0-lambda*logtmp2*LW*c11*c11*c22*c22/4.0;      
; 654  :   s3 = s4-lambda*logtmp2*pow(LW,2.0)*c11*c11*c22*c22/2.0+lambda*logtmp2*pow(LW,3.0)*c21*c12*c11*c22/4.0-mu*LW*c21*c21*c12*c12/2.0;      
; 655  :   s2 = s3+mu*tmp2*c11*c22/2.0+mu*LW*c11*c11*c22*c22/2.0-lambda*pow(LW,3.0)*c21*c21*c12*c12/4.0-lambda*pow(LW,2.0)*c21*c21*c12*c12/4.0+mu*pow(LW,3.0)*c11*c11*c22*c22/2.0;      

	fld	QWORD PTR tv4405[ebp]
	fmul	ST(0), ST(5)
	fstp	QWORD PTR tv4730[ebp]
	fld	QWORD PTR tv4395[ebp]
	fmul	ST(0), ST(5)
	fstp	QWORD PTR tv4736[ebp]
	fld	QWORD PTR tv4413[ebp]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(1)
	fld	QWORD PTR tv4667[ebp]
	fmul	QWORD PTR __real@bfd0000000000000
	fsub	QWORD PTR tv4521[ebp]
	fsub	QWORD PTR tv4674[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv4454[ebp]
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(3)
	fmul	QWORD PTR __real@3fe0000000000000
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR tv4635[ebp]
	fadd	QWORD PTR tv4459[ebp]
	fld	QWORD PTR tv4730[ebp]
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv4736[ebp]
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR tv4599[ebp]

; 656  :   s3 = s2+mu*pow(LW,2.0)*c11*c11*c22*c22+mu*c12*c21*tmp2/2.0+mu*pow(LW,2.0)*tmp2*c11*c22/2.0+mu*LW*tmp2*c11*c22;      

	fadd	QWORD PTR tv4613[ebp]
	fld	ST(2)
	fmul	QWORD PTR _mu$[ebp]
	fmul	ST(0), ST(6)
	fmul	QWORD PTR _tmp2$[ebp]
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fadd	QWORD PTR tv4623[ebp]
	fadd	QWORD PTR tv4627[ebp]

; 657  :   s4 = s3-mu*pow(LW,2.0)*c21*c12*c11*c22-mu*pow(LW,3.0)*c21*c12*c11*c22/2.0;      

	fld	QWORD PTR tv4479[ebp]
	fmul	ST(0), ST(7)
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv4471[ebp]
	fmul	ST(0), ST(7)
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)

; 658  :   s1 = s4+lambda*logtmp2*LW*c21*c21*c12*c12/4.0+lambda*logtmp2*pow(LW,2.0)*c21*c12*c11*c22/2.0+lambda*pow(LW,3.0)*c21*c12*c11*c22/4.0+lambda*pow(LW,2.0)*c21*c12*c11*c22/4.0;      

	fld	QWORD PTR tv4114[ebp]
	fmul	ST(0), ST(7)
	fmul	ST(0), ST(7)
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv4511[ebp]
	fmul	ST(0), ST(7)
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv4730[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv4736[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)

; 659  :   s2 = 1/(pow(detr,3.0))/pow(1.0+LW,3.0);      
; 660  :   ddpsirdc21dc12 = s1*s2;

	fmul	QWORD PTR tv4361[ebp]
	fstp	QWORD PTR _ddpsirdc21dc12$[ebp]

; 661  : 
; 662  :   s1 = -c12*c12/4.0;      

	fld	ST(2)
	fmul	ST(0), ST(3)
	fmul	QWORD PTR __real@bfd0000000000000

; 663  :   s5 = 4.0*mu*pow(LW,2.0)*c12*c21+4.0*mu*LW*c12*c21-4.0*mu*pow(LW,2.0)*c11*c22-4.0*mu*LW*c11*c22;      
; 664  :   s4 = s5-2.0*mu*pow(LW,3.0)*c11*c22+2.0*mu*pow(LW,3.0)*c12*c21+lambda*pow(LW,2.0)*c12*c21-lambda*pow(LW,3.0)*c11*c22-lambda*pow(LW,2.0)*c11*c22;      
; 665  :   s5 = s4+lambda*pow(LW,3.0)*c12*c21-4.0*mu*tmp2-4.0*mu*LW*tmp2-2.0*mu*pow(LW,2.0)*tmp2;      
; 666  :   s6 = s5-2.0*lambda*logtmp2*pow(LW,2.0)*c12*c21-2.0*lambda*logtmp2*LW*c12*c21;      
; 667  :   s7 = s6+2.0*lambda*logtmp2*pow(LW,2.0)*c11*c22;      
; 668  :   s3 = s7+2.0*lambda*logtmp2*LW*c11*c22+lambda*logtmp2*pow(LW,3.0)*c11*c22-lambda*logtmp2*pow(LW,3.0)*c12*c21;      
; 669  :   s4 = 1/(pow(detr,3.0))/pow(1.0+LW,3.0);      
; 670  :   s2 = s3*s4;      
; 671  :   ddpsirdc21dc21 = s1*s2;

	fld	QWORD PTR tv4706[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _ddpsirdc21dc21$[ebp]

; 672  : 
; 673  :   s1 = c12*c11/4.0;      

	fld	ST(3)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(3)
	fst	QWORD PTR tv4794[ebp]

; 674  :   s5 = 4.0*mu*pow(LW,2.0)*c12*c21+4.0*mu*LW*c12*c21-4.0*mu*pow(LW,2.0)*c11*c22-4.0*mu*LW*c11*c22;      
; 675  :   s4 = s5-2.0*mu*pow(LW,3.0)*c11*c22+2.0*mu*pow(LW,3.0)*c12*c21+lambda*pow(LW,2.0)*c12*c21-lambda*pow(LW,3.0)*c11*c22-lambda*pow(LW,2.0)*c11*c22;      
; 676  :   s5 = s4+lambda*pow(LW,3.0)*c12*c21-4.0*mu*tmp2-4.0*mu*LW*tmp2-2.0*mu*pow(LW,2.0)*tmp2;      
; 677  :   s6 = s5-2.0*lambda*logtmp2*pow(LW,2.0)*c12*c21-2.0*lambda*logtmp2*LW*c12*c21;      
; 678  :   s7 = s6+2.0*lambda*logtmp2*pow(LW,2.0)*c11*c22;      
; 679  :   s3 = s7+2.0*lambda*logtmp2*LW*c11*c22+lambda*logtmp2*pow(LW,3.0)*c11*c22-lambda*logtmp2*pow(LW,3.0)*c12*c21;      
; 680  :   s4 = 1/(pow(detr,3.0))/pow(1.0+LW,3.0);      
; 681  :   s2 = s3*s4;      
; 682  :   ddpsirdc21dc22 = s1*s2;

	fmulp	ST(1), ST(0)
	fstp	QWORD PTR _ddpsirdc21dc22$[ebp]

; 691  :   s2 = 1/(pow(detr,3.0))/pow(1.0+LW,3.0);      

	fld	QWORD PTR tv4361[ebp]
	fstp	QWORD PTR _s2$[ebp]
	fld	QWORD PTR tv4395[ebp]
	fmul	ST(0), ST(5)
	fst	QWORD PTR tv4805[ebp]
	fld	QWORD PTR tv4405[ebp]
	fmul	ST(0), ST(6)
	fstp	QWORD PTR tv4812[ebp]
	fld	QWORD PTR tv4454[ebp]
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(5)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fsub	QWORD PTR tv4476[ebp]
	fsub	QWORD PTR tv4483[ebp]
	fsub	QWORD PTR tv4489[ebp]
	fxch	ST(1)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv4812[ebp]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)

; 683  : 
; 684  :   s3 = mu*LW*c22*c22*c11*c11/2.0-mu*pow(LW,3.0)*c12*c12*c21*c21/2.0-mu*pow(LW,2.0)*c12*c12*c21*c21-mu*LW*c12*c12*c21*c21/2.0+lambda*pow(LW,2.0)*c22*c22*c11*c11/4.0;      
; 685  :   s4 = s3+lambda*pow(LW,3.0)*c22*c22*c11*c11/4.0+mu*LW*tmp2*c12*c21;      
; 686  :   s2 = s4+mu*c11*c22*tmp2/2.0-lambda*logtmp2*pow(LW,3.0)*c22*c11*c12*c21/4.0-lambda*logtmp2*pow(LW,2.0)*c22*c11*c12*c21/2.0;      

	fadd	QWORD PTR tv4498[ebp]
	fld	QWORD PTR tv3984[ebp]
	fmul	ST(0), ST(5)
	fmul	QWORD PTR _tmp2$[ebp]
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv4413[ebp]
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(7)
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv4511[ebp]
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(7)
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)

; 687  :   s3 = s2-lambda*pow(LW,3.0)*c22*c11*c12*c21/4.0-lambda*pow(LW,2.0)*c22*c11*c12*c21/4.0-lambda*logtmp2*LW*c22*c22*c11*c11/4.0+mu*pow(LW,3.0)*c22*c11*c12*c21/2.0;      

	fld	QWORD PTR tv4812[ebp]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(7)
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv4805[ebp]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(7)
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv4114[ebp]
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(5)
	fmulp	ST(3), ST(0)
	fsubrp	ST(2), ST(0)
	fld	QWORD PTR tv4471[ebp]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(6)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)

; 688  :   s4 = s3+mu*pow(LW,2.0)*c22*c11*c12*c21+mu*tmp2*c12*c21/2.0;      

	fld	QWORD PTR tv4479[ebp]
	fmulp	ST(4), ST(0)
	fxch	ST(3)
	fmul	ST(0), ST(2)
	fmulp	ST(1), ST(0)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR tv4463[ebp]

; 689  :   s5 = s4+mu*pow(LW,2.0)*tmp2*c12*c21/2.0;      

	fadd	QWORD PTR tv4503[ebp]

; 690  :   s1 = s5+lambda*logtmp2*pow(LW,2.0)*c12*c12*c21*c21/2.0+lambda*logtmp2*pow(LW,3.0)*c12*c12*c21*c21/4.0+lambda*logtmp2*LW*c12*c12*c21*c21/4.0;      

	fadd	QWORD PTR tv4559[ebp]
	fadd	QWORD PTR tv4548[ebp]
	fadd	QWORD PTR tv4553[ebp]

; 692  :   ddpsirdc22dc11 = s1*s2;

	fld	QWORD PTR _s2$[ebp]
	fmul	ST(1), ST(0)

; 693  : 
; 694  :   s1 = c11*c21/4.0;      
; 695  :   s6 = -4.0*mu*LW*tmp2-2.0*lambda*logtmp2*LW*c12*c21;      
; 696  :   s5 = s6-2.0*lambda*logtmp2*pow(LW,2.0)*c12*c21+2.0*lambda*logtmp2*LW*c11*c22;      
; 697  :   s6 = s5+2.0*lambda*logtmp2*pow(LW,2.0)*c11*c22-2.0*mu*pow(LW,2.0)*tmp2;      
; 698  :   s4 = s6-lambda*logtmp2*pow(LW,3.0)*c12*c21+lambda*logtmp2*pow(LW,3.0)*c11*c22-2.0*mu*pow(LW,3.0)*c11*c22;      
; 699  :   s5 = s4+4.0*mu*pow(LW,2.0)*c12*c21+4.0*mu*LW*c12*c21-4.0*mu*pow(LW,2.0)*c11*c22-4.0*mu*LW*c11*c22;      
; 700  :   s3 = s5+lambda*pow(LW,3.0)*c12*c21+lambda*pow(LW,2.0)*c12*c21-lambda*pow(LW,3.0)*c11*c22-lambda*pow(LW,2.0)*c11*c22+2.0*mu*pow(LW,3.0)*c12*c21-4.0*mu*tmp2;      
; 701  :   s4 = 1/(pow(detr,3.0))/pow(1.0+LW,3.0);      
; 702  :   ddpsirdc22dc12 = s1*s2;

	fmul	QWORD PTR tv4679[ebp]

; 703  : 
; 704  :   s1 = c11*c12/4.0;      
; 705  :   s6 = -4.0*mu*LW*tmp2-2.0*lambda*logtmp2*LW*c12*c21;      

	fld	QWORD PTR _mu$[ebp]
	fmul	QWORD PTR __real@c010000000000000
	fmul	QWORD PTR _LW$[ebp]
	fmul	QWORD PTR _tmp2$[ebp]
	fsub	QWORD PTR tv4430[ebp]

; 706  :   s5 = s6-2.0*lambda*logtmp2*pow(LW,2.0)*c12*c21+2.0*lambda*logtmp2*LW*c11*c22;      

	fsub	QWORD PTR tv4427[ebp]
	fadd	QWORD PTR tv4403[ebp]

; 707  :   s6 = s5+2.0*lambda*logtmp2*pow(LW,2.0)*c11*c22-2.0*mu*pow(LW,2.0)*tmp2;      

	fadd	QWORD PTR tv4433[ebp]
	fsub	QWORD PTR tv4369[ebp]

; 708  :   s4 = s6-lambda*logtmp2*pow(LW,3.0)*c12*c21+lambda*logtmp2*pow(LW,3.0)*c11*c22-2.0*mu*pow(LW,3.0)*c11*c22;      

	fsub	QWORD PTR tv4415[ebp]
	fadd	QWORD PTR tv4418[ebp]
	fsub	QWORD PTR tv4389[ebp]

; 709  :   s5 = s4+4.0*mu*pow(LW,2.0)*c12*c21+4.0*mu*LW*c12*c21-4.0*mu*pow(LW,2.0)*c11*c22-4.0*mu*LW*c11*c22;      

	fadd	QWORD PTR tv4381[ebp]
	fadd	QWORD PTR tv4384[ebp]
	fsub	QWORD PTR tv4367[ebp]
	fsub	QWORD PTR tv4373[ebp]

; 710  :   s3 = s5+lambda*pow(LW,3.0)*c12*c21+lambda*pow(LW,2.0)*c12*c21-lambda*pow(LW,3.0)*c11*c22-lambda*pow(LW,2.0)*c11*c22+2.0*mu*pow(LW,3.0)*c12*c21-4.0*mu*tmp2;      

	fadd	QWORD PTR tv4422[ebp]
	xor	ecx, ecx
	xor	edx, edx
	mov	DWORD PTR tv7380[ebp], edx
	fadd	QWORD PTR tv4397[ebp]
	mov	DWORD PTR tv7384[ebp], ecx
	fsub	QWORD PTR tv4407[ebp]
	mov	DWORD PTR tv7382[ebp], ecx
	fsub	QWORD PTR tv4410[ebp]
	fadd	QWORD PTR tv4392[ebp]
	fsub	QWORD PTR tv4375[ebp]

; 711  :   s4 = 1/(pow(detr,3.0))/pow(1.0+LW,3.0);      
; 712  :   s2 = s3*s4;      

	fmul	QWORD PTR tv4361[ebp]

; 713  :   ddpsirdc22dc21 = s1*s2;

	fld	QWORD PTR tv4794[ebp]
	fmul	ST(0), ST(1)

; 714  : 
; 715  :   s1 = -c11*c11/4.0;      

	fld	ST(4)
	fmulp	ST(5), ST(0)
	fxch	ST(4)
	fmul	QWORD PTR __real@bfd0000000000000

; 716  :   s6 = -4.0*mu*LW*tmp2-2.0*lambda*logtmp2*LW*c12*c21;      
; 717  :   s5 = s6-2.0*lambda*logtmp2*pow(LW,2.0)*c12*c21+2.0*lambda*logtmp2*LW*c11*c22;      
; 718  :   s6 = s5+2.0*lambda*logtmp2*pow(LW,2.0)*c11*c22-2.0*mu*pow(LW,2.0)*tmp2;      
; 719  :   s4 = s6-lambda*logtmp2*pow(LW,3.0)*c12*c21+lambda*logtmp2*pow(LW,3.0)*c11*c22-2.0*mu*pow(LW,3.0)*c11*c22;      
; 720  :   s5 = s4+4.0*mu*pow(LW,2.0)*c12*c21+4.0*mu*LW*c12*c21-4.0*mu*pow(LW,2.0)*c11*c22-4.0*mu*LW*c11*c22;      
; 721  :   s3 = s5+lambda*pow(LW,3.0)*c12*c21+lambda*pow(LW,2.0)*c12*c21-lambda*pow(LW,3.0)*c11*c22-lambda*pow(LW,2.0)*c11*c22+2.0*mu*pow(LW,3.0)*c12*c21-4.0*mu*tmp2;      
; 722  :   s4 = 1/(pow(detr,3.0))/pow(1.0+LW,3.0);      
; 723  :   s2 = s3*s4;      
; 724  :   ddpsirdc22dc22 = s1*s2;

	fmulp	ST(1), ST(0)
	fld	QWORD PTR _area$[ebp]
$LN65@Neo_Hookea@2:

; 727  :      for ( i = 0 ; i < SDIM  ; i++ )

	xor	esi, esi
	test	ebx, ebx
	jle	$LN11@Neo_Hookea@2
	mov	eax, DWORD PTR tv7382[ebp]
	mov	DWORD PTR tv7303[ebp], eax
$LN61@Neo_Hookea@2:

; 728  :         for ( jj = 0 ; jj < FACET_VERTS  ; jj++ )

	xor	edi, edi
$LN62@Neo_Hookea@2:

; 729  :         {
; 730  :           f_info->hess[j][jj][i][i] += 
; 731  :                   area*(dpsirdc11*ddc11dv[j][i][jj]
; 732  :                        +dpsirdc12*ddc21dv[j][i][jj]
; 733  :                        +dpsirdc21*ddc12dv[j][i][jj]
; 734  :                        +dpsirdc22*ddc22dv[j][i][jj]);

	fld	QWORD PTR _ddc21dv$[ebp+edx]
	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	fmul	QWORD PTR _dpsirdc12$[ebp]
	mov	eax, DWORD PTR [eax+1340]
	fld	QWORD PTR _ddc11dv$[ebp+edx]
	mov	eax, DWORD PTR [eax+ecx]
	fmul	QWORD PTR _dpsirdc11$[ebp]
	mov	eax, DWORD PTR [eax+edi]
	mov	eax, DWORD PTR [eax+esi*4]
	lea	eax, DWORD PTR [eax+esi*8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddc12dv$[ebp+edx]
	fmul	QWORD PTR _dpsirdc21$[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddc22dv$[ebp+edx]
	fmul	QWORD PTR _dpsirdc22$[ebp]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]

; 735  : 
; 736  :           for ( ii = 0 ; ii < SDIM  ; ii++ )

	mov	ebx, DWORD PTR _web+616
	xor	eax, eax
	test	ebx, ebx
	jle	$LN5@Neo_Hookea@2
	fld	QWORD PTR _ddpsirdc12dc12$[ebp]
	mov	ebx, DWORD PTR tv7303[ebp]
	fadd	QWORD PTR _ddpsirdc11dc12$[ebp]
	fadd	QWORD PTR _ddpsirdc21dc12$[ebp]
	fadd	ST(0), ST(3)
	fmul	QWORD PTR _dc12dv$[ebp+ebx]
	fld	QWORD PTR _ddpsirdc12dc11$[ebp]
	fadd	QWORD PTR _ddpsirdc11dc11$[ebp]
	fadd	QWORD PTR _ddpsirdc21dc11$[ebp]
	fadd	ST(0), ST(5)
	fmul	QWORD PTR _dc11dv$[ebp+ebx]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddpsirdc12dc21$[ebp]
	fadd	QWORD PTR _ddpsirdc11dc21$[ebp]
	fadd	QWORD PTR _ddpsirdc21dc21$[ebp]
	fadd	ST(0), ST(6)
	fmul	QWORD PTR _dc21dv$[ebp+ebx]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddpsirdc12dc22$[ebp]
	fadd	QWORD PTR _ddpsirdc11dc22$[ebp]
	fadd	QWORD PTR _ddpsirdc21dc22$[ebp]
	fadd	ST(0), ST(3)
	fmul	QWORD PTR _dc22dv$[ebp+ebx]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(1)
$LN3@Neo_Hookea@2:
	mov	ebx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ebx, DWORD PTR [ebx+1340]
	mov	ecx, DWORD PTR [ebx+ecx]
	mov	ecx, DWORD PTR [ecx+edi]
	mov	ecx, DWORD PTR [ecx+esi*4]

; 737  :              f_info->hess[j][jj][i][ii] += 
; 738  :             area*((ddpsirdc11dc11+ddpsirdc12dc11+ddpsirdc21dc11+ddpsirdc22dc11)*dc11dv[j][i] 
; 739  :                  +(ddpsirdc11dc12+ddpsirdc12dc12+ddpsirdc21dc12+ddpsirdc22dc12)*dc12dv[j][i]
; 740  :                  +(ddpsirdc11dc21+ddpsirdc12dc21+ddpsirdc21dc21+ddpsirdc22dc21)*dc21dv[j][i]
; 741  :                  +(ddpsirdc11dc22+ddpsirdc12dc22+ddpsirdc21dc22+ddpsirdc22dc22)*dc22dv[j][i]);

	fld	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	fadd	ST(0), ST(1)
	inc	eax
	fstp	QWORD PTR [ecx]
	mov	ebx, DWORD PTR _web+616
	mov	ecx, DWORD PTR tv7384[ebp]
	cmp	eax, ebx
	jl	SHORT $LN3@Neo_Hookea@2

; 735  : 
; 736  :           for ( ii = 0 ; ii < SDIM  ; ii++ )

	fstp	ST(0)
$LN5@Neo_Hookea@2:

; 728  :         for ( jj = 0 ; jj < FACET_VERTS  ; jj++ )

	add	edi, 4
	add	edx, 8
	cmp	edi, 12					; 0000000cH
	jl	$LN62@Neo_Hookea@2

; 727  :      for ( i = 0 ; i < SDIM  ; i++ )

	add	DWORD PTR tv7303[ebp], 8
	inc	esi
	cmp	esi, ebx
	jl	$LN61@Neo_Hookea@2
$LN11@Neo_Hookea@2:

; 725  : 
; 726  :   for ( j = 0 ; j < FACET_VERTS  ; j++ )

	mov	edx, DWORD PTR tv7380[ebp]
	add	DWORD PTR tv7382[ebp], 48		; 00000030H
	add	ecx, 4
	add	edx, 144				; 00000090H
	mov	DWORD PTR tv7384[ebp], ecx
	mov	DWORD PTR tv7380[ebp], edx
	cmp	ecx, 12					; 0000000cH
	jl	$LN65@Neo_Hookea@2
	fstp	ST(1)
	fstp	ST(2)
	fstp	ST(0)
	fstp	ST(0)
$LN114@Neo_Hookea@2:
	fstp	ST(0)

; 742  :         }
; 743  : 
; 744  :   return energy;

	fld	QWORD PTR _energy$[ebp]
$LN32@Neo_Hookea@2:

; 745  : } // end Neo_Hookean_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Neo_Hookean_all ENDP
_TEXT	ENDS
PUBLIC	_Neo_Hookean_energy
; Function compile flags: /Ogtp
;	COMDAT _Neo_Hookean_energy
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_Neo_Hookean_energy PROC				; COMDAT

; 827  : {

	push	ebp
	mov	ebp, esp

; 828  :  return Neo_Hookean_all(f_info,METHOD_VALUE);

	mov	eax, DWORD PTR _f_info$[ebp]
	push	1767					; 000006e7H
	push	eax
	call	_Neo_Hookean_all
	add	esp, 8

; 829  : }

	pop	ebp
	ret	0
_Neo_Hookean_energy ENDP
_TEXT	ENDS
PUBLIC	_Neo_Hookean_gradient
; Function compile flags: /Ogtp
;	COMDAT _Neo_Hookean_gradient
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_Neo_Hookean_gradient PROC				; COMDAT

; 841  : {

	push	ebp
	mov	ebp, esp

; 842  :  return Neo_Hookean_all(f_info,METHOD_GRADIENT);

	mov	eax, DWORD PTR _f_info$[ebp]
	push	4321					; 000010e1H
	push	eax
	call	_Neo_Hookean_all
	add	esp, 8

; 843  : }

	pop	ebp
	ret	0
_Neo_Hookean_gradient ENDP
_TEXT	ENDS
PUBLIC	_Neo_Hookean_hessian
; Function compile flags: /Ogtp
;	COMDAT _Neo_Hookean_hessian
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_Neo_Hookean_hessian PROC				; COMDAT

; 855  : {

	push	ebp
	mov	ebp, esp

; 856  :  return Neo_Hookean_all(f_info,METHOD_HESSIAN);

	mov	eax, DWORD PTR _f_info$[ebp]
	push	8763					; 0000223bH
	push	eax
	call	_Neo_Hookean_all
	add	esp, 8

; 857  : }

	pop	ebp
	ret	0
_Neo_Hookean_hessian ENDP
_TEXT	ENDS
END
