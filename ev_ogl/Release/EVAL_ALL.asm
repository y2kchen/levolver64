; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\EVAL_ALL.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_get_fe_edge
EXTRN	_web:BYTE
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
;	COMDAT _get_fe_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_edge PROC					; COMDAT

; 43   : {

	push	ebp
	mov	ebp, esp

; 44   :   edge_id e_id;
; 45   :     
; 46   :   e_id = feptr(fe_id)->fe_edge_id;

	mov	eax, DWORD PTR _fe_id$[ebp]

; 47   : 
; 48   :   /*
; 49   :   if ( inverted(fe_id) ) invert(e_id);
; 50   :   return e_id;
; 51   :   */
; 52   :   
; 53   :   return same_sign(e_id,fe_id);

	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]

; 54   : }

	pop	ebp
	ret	0
_get_fe_edge ENDP
_TEXT	ENDS
PUBLIC	_get_fe_facet
EXTRN	_NULLFACET:DWORD
; Function compile flags: /Ogtp
;	COMDAT _get_fe_facet
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_facet PROC					; COMDAT

; 58   : {

	push	ebp
	mov	ebp, esp

; 59   :   facet_id f_id;
; 60   :   
; 61   :   if ( !valid_id(fe_id) ) return NULLFACET;

	mov	ecx, DWORD PTR _fe_id$[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN2@get_fe_fac
	mov	eax, DWORD PTR _NULLFACET

; 64   :   return f_id;
; 65   : }

	pop	ebp
	ret	0
$LN2@get_fe_fac:

; 62   :   f_id = feptr(fe_id)->fe_facet_id;

	mov	edx, DWORD PTR _web+460
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+24]

; 63   :   if ( inverted(fe_id) ) invert(f_id);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_fe_fac
	xor	eax, 134217728				; 08000000H
$LN3@get_fe_fac:

; 64   :   return f_id;
; 65   : }

	pop	ebp
	ret	0
_get_fe_facet ENDP
_TEXT	ENDS
PUBLIC	_get_edge_wrap
EXTRN	_sym_inverse:DWORD
EXTRN	_dymem:DWORD
; Function compile flags: /Ogtp
;	COMDAT _get_edge_wrap
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_wrap PROC					; COMDAT

; 163  : {

	push	ebp
	mov	ebp, esp

; 164  :   WRAPTYPE wrap = *EINT(e_id,E_WRAP_ATTR) ;

	mov	ecx, DWORD PTR _e_id$[ebp]
	mov	edx, DWORD PTR _web+124
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+216
	push	esi
	mov	esi, DWORD PTR _dymem
	mov	edx, DWORD PTR [edx+esi+784]
	mov	eax, DWORD PTR [eax+edx]
	pop	esi

; 165  :   return    ( inverted(e_id) ? (*sym_inverse)(wrap) : wrap );

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN4@get_edge_w
	push	eax
	call	DWORD PTR _sym_inverse
	add	esp, 4
$LN4@get_edge_w:

; 166  : }

	pop	ebp
	ret	0
_get_edge_wrap ENDP
_TEXT	ENDS
PUBLIC	_get_facet_body
; Function compile flags: /Ogtp
;	COMDAT _get_facet_body
_TEXT	SEGMENT
_f_id$ = 8						; size = 4
_get_facet_body PROC					; COMDAT

; 250  : {

	push	ebp
	mov	ebp, esp

; 251  :   if ( web.skel[BODY].count == 0 ) return NULLID;

	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN4@get_facet_
$LN7@get_facet_:
	xor	eax, eax

; 255  : }

	pop	ebp
	ret	0
$LN4@get_facet_:

; 252  :   if ( !valid_id(f_id) ) return NULLID;

	mov	eax, DWORD PTR _f_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN7@get_facet_

; 253  :   if ( inverted(f_id) ) return F_ELID(f_id,F_BODY_LIST_ATTR)[1];

	mov	ecx, DWORD PTR _web+236
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_facet_
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax+4]

; 255  : }

	pop	ebp
	ret	0
$LN2@get_facet_:

; 254  :   else  return F_ELID(f_id,F_BODY_LIST_ATTR)[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax]

; 255  : }

	pop	ebp
	ret	0
_get_facet_body ENDP
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	_get_body_density
EXTRN	__fltused:DWORD
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _get_body_density
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_density PROC					; COMDAT

; 305  :     { return  ( valid_id(b_id) ?  bptr(b_id)->density : 0.0 ) ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_d
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+344]
	pop	ebp
	ret	0
$LN3@get_body_d:
	fldz
	pop	ebp
	ret	0
_get_body_density ENDP
_TEXT	ENDS
PUBLIC	_get_body_volume
; Function compile flags: /Ogtp
;	COMDAT _get_body_volume
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_volume PROC					; COMDAT

; 308  :     { return    ( valid_id(b_id) ?  bptr(b_id)->volume : 0.0 ) ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_v
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+40]
	pop	ebp
	ret	0
$LN3@get_body_v:
	fldz
	pop	ebp
	ret	0
_get_body_volume ENDP
_TEXT	ENDS
PUBLIC	_get_body_fixvol
; Function compile flags: /Ogtp
;	COMDAT _get_body_fixvol
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_fixvol PROC					; COMDAT

; 311  :      { return ( valid_id(b_id) ?  bptr(b_id)->fixvol : 0.0 ) ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_f
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+32]
	pop	ebp
	ret	0
$LN3@get_body_f:
	fldz
	pop	ebp
	ret	0
_get_body_fixvol ENDP
_TEXT	ENDS
PUBLIC	_get_body_pressure
; Function compile flags: /Ogtp
;	COMDAT _get_body_pressure
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_pressure PROC					; COMDAT

; 317  :     { return  ( valid_id(b_id) ?    bptr(b_id)->pressure : 0.0 ) ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_p
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+312]
	pop	ebp
	ret	0
$LN3@get_body_p:
	fldz
	pop	ebp
	ret	0
_get_body_pressure ENDP
_TEXT	ENDS
PUBLIC	_get_body_volconst
; Function compile flags: /Ogtp
;	COMDAT _get_body_volconst
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_volconst PROC					; COMDAT

; 320  :   { return    ( valid_id(b_id) ?  bptr(b_id)->volconst : 0.0 ) ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_v@2
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+328]
	pop	ebp
	ret	0
$LN3@get_body_v@2:
	fldz
	pop	ebp
	ret	0
_get_body_volconst ENDP
_TEXT	ENDS
PUBLIC	_get_extra
; Function compile flags: /Ogtp
;	COMDAT _get_extra
_TEXT	SEGMENT
_id$ = 8						; size = 4
_n$ = 12						; size = 4
_get_extra PROC						; COMDAT

; 348  : { int type = id_type(id);

	push	ebp
	mov	ebp, esp

; 349  : 
; 350  :   return ( (char*)elptr(id) + EXTRAS(type)[n].offset);

	mov	ecx, DWORD PTR _id$[ebp]
	mov	eax, ecx
	push	esi
	mov	esi, DWORD PTR _n$[ebp]
	shr	eax, 29					; 0000001dH
	imul	esi, 240				; 000000f0H
	imul	eax, 112				; 00000070H
	mov	edx, DWORD PTR _web[eax+12]
	push	edi
	mov	edi, DWORD PTR _web[eax+104]
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _dymem
	add	edi, esi
	add	eax, DWORD PTR [edi+ecx+64]
	pop	edi
	pop	esi

; 351  : }

	pop	ebp
	ret	0
_get_extra ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@KIMOGOPP@Bad?5expression?5eval_all?$CI?$CJ?5node?5t@ ; `string'
PUBLIC	??_C@_0DI@KHNAHFIG@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@ ; `string'
PUBLIC	??_C@_0DH@DOJNKOOH@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@ ; `string'
PUBLIC	??_C@_0CJ@MIEHCCIC@Can?8t?5do?5boundary?5on?5this?5type?5e@ ; `string'
PUBLIC	??_C@_0CK@OJPFAPEO@Can?5do?5hit_constraints?5only?5on?5v@ ; `string'
PUBLIC	??_C@_0CM@IPCEGKDM@Can?5only?5do?5constraint?5value?5for@ ; `string'
PUBLIC	??_C@_0CM@PABLLOJJ@Can?8t?5do?5constraints?5on?5this?5typ@ ; `string'
PUBLIC	??_C@_0DJ@FLIAONNC@Attribute?5?$CFs?5is?5?$CFs?5attribute?0?5no@ ; `string'
PUBLIC	??_C@_0DF@MPPJKLHD@Attribute?5?$CFs?5index?5?$CFd?5is?5?$CFd?$DL?5max@ ; `string'
PUBLIC	??_C@_0CA@OHHPJEHI@Density?5of?5wrong?5type?5element?4?6?$AA@ ; `string'
PUBLIC	??_C@_0BO@GAPLEMFA@Phase?5of?5wrong?5type?5element?4?6?$AA@ ; `string'
PUBLIC	??_C@_0BL@KPLMFDOD@Pressure?5only?5for?5bodies?4?6?$AA@ ; `string'
PUBLIC	??_C@_0DF@HLEJJGHA@Acos?5argument?5is?5?$CF18?415f?0?5magnit@ ; `string'
PUBLIC	??_C@_0DF@KNMCHGOJ@Asin?5argument?5is?5?$CF18?415f?0?5magnit@ ; `string'
PUBLIC	??_C@_0CM@BPFJIHDJ@Log?5argument?5is?5?$CF18?415f?$DL?5must?5be@ ; `string'
PUBLIC	??_C@_0BN@BLAKMPAE@Acosh?5argument?5less?5than?51?4?6?$AA@ ; `string'
PUBLIC	__real@3fe0000000000000
PUBLIC	??_C@_0CE@FBJOMNDK@Square?5root?5of?5negative?5number?5?$CF@ ; `string'
PUBLIC	__real@c059000000000000
PUBLIC	??_C@_0CM@MKJCJODL@Nonintegral?5power?5?$CI?$CFf?$CJ?5of?5negati@ ; `string'
PUBLIC	??_C@_0CM@IAPBGOKK@Negative?5power?5?$CI?$CFf?$CJ?5of?5zero?5in?5d@ ; `string'
PUBLIC	??_C@_0BO@EHPMEHID@Negative?5power?5?$CI?$CFd?$CJ?5of?5zero?4?6?$AA@ ; `string'
PUBLIC	??_C@_0BD@KKBNAHFA@Division?5by?5zero?4?6?$AA@	; `string'
PUBLIC	??_C@_0BE@DGKEPBMO@Modulus?5base?5zero?4?6?$AA@	; `string'
PUBLIC	??_C@_0BB@EKEAJAJD@Divide?5by?5zero?4?6?$AA@	; `string'
PUBLIC	??_C@_0CE@JGNMBEAC@Can?8t?5have?5indexed?5x?5on?5?$CFs?0?5in?5?$CF@ ; `string'
PUBLIC	??_C@_0EE@NBEFOKMP@Invalid?5index?5?$CFd?5for?5x?5in?5?$CFs?$DL?5mu@ ; `string'
PUBLIC	??_C@_0BL@MACKFC@?$CFs?5index?5?$CFd?5is?5not?5valid?4?6?$AA@ ; `string'
PUBLIC	??_C@_0L@IEGJKICB@EVAL_ALL?4C?$AA@		; `string'
PUBLIC	__real@41f0000000000000
PUBLIC	??_C@_0DH@FHIGAOPK@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@ ; `string'
PUBLIC	??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@ ; `string'
PUBLIC	??_C@_0DG@BDAMNFPJ@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@ ; `string'
PUBLIC	__real@4000000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	??_C@_0CP@JBLBFGKN@More?5variables?5than?52?$CKMAXCOORD?5i@ ; `string'
PUBLIC	??_C@_0DA@GHCFIFPO@Internal?5error?3?5eval_all?5express@ ; `string'
PUBLIC	_partials$GSCopy$
PUBLIC	_ex$GSCopy$
PUBLIC	_fval$GSCopy$
PUBLIC	_params$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_eval_all
EXTRN	_tokname:PROC
EXTRN	_get_internal_variable:PROC
EXTRN	_comp_quant_vertex:DWORD
EXTRN	_comp_quant_stamp:DWORD
EXTRN	_meth_inst_list:DWORD
EXTRN	_gen_quant_list:DWORD
EXTRN	_get_toggle_value:PROC
EXTRN	_get_name_name:PROC
EXTRN	_get_name_arrayptr:PROC
EXTRN	_dot:PROC
EXTRN	_project_vertex_normals:PROC
EXTRN	_new_calc_vertex_normal:PROC
EXTRN	_mat2d_setup:PROC
EXTRN	_V_BOUNDARY_ATTR:DWORD
EXTRN	_E_BOUNDARY_ATTR:DWORD
EXTRN	_F_BOUNDARY_ATTR:DWORD
EXTRN	_get_v_constraint_status:PROC
EXTRN	_v_on_constraint:PROC
EXTRN	_e_on_constraint:PROC
EXTRN	_f_on_constraint:PROC
EXTRN	_autorecalc_flag:DWORD
EXTRN	_interp_facet_attribute:PROC
EXTRN	_interp_edge_attribute:PROC
EXTRN	_F_PHASE_ATTR:DWORD
EXTRN	_B_PHASE_ATTR:DWORD
EXTRN	_instance_attribute:PROC
EXTRN	_quantity_attribute:PROC
EXTRN	_recalc_facet_area:PROC
EXTRN	_get_body_valence:PROC
EXTRN	_get_facet_valence:PROC
EXTRN	_get_edge_valence:PROC
EXTRN	_get_vertex_evalence:PROC
EXTRN	_vertex_angle:PROC
EXTRN	_dihedral:PROC
EXTRN	_get_edge_length:PROC
EXTRN	_calc_edge:PROC
EXTRN	_vertex_mean_curvature:PROC
EXTRN	_vertex_sq_mean_curvature:PROC
EXTRN	_ceil:PROC
EXTRN	_machine_eps:QWORD
EXTRN	_ellipticEdm:PROC
EXTRN	_ellipticE:PROC
EXTRN	_ellipticKdm:PROC
EXTRN	_ellipticK:PROC
EXTRN	_incompleteEllipticEdphi:PROC
EXTRN	_incompleteEllipticEdm:PROC
EXTRN	_incompleteEllipticE:PROC
EXTRN	_incompleteEllipticFdphi:PROC
EXTRN	_incompleteEllipticFdm:PROC
EXTRN	_incompleteEllipticF:PROC
EXTRN	_get_indexed_subtype:PROC
EXTRN	_get_edge_side:PROC
EXTRN	_get_facet_normal:PROC
EXTRN	_typenames:BYTE
EXTRN	_get_full_id:PROC
EXTRN	_userfunc_deriv:BYTE
EXTRN	_kb_calloc:PROC
EXTRN	_file_names:DWORD
EXTRN	_sprintf:PROC
EXTRN	_errmsg:BYTE
EXTRN	_int_val:DWORD
EXTRN	_eval:PROC
EXTRN	_win_get_thread_data:PROC
EXTRN	_thread_data_key:DWORD
EXTRN	_kb_error:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	__CItan:PROC
EXTRN	__CIacos:PROC
EXTRN	__CIasin:PROC
EXTRN	__CIexp:PROC
EXTRN	__CIatan:PROC
EXTRN	__CIsin:PROC
EXTRN	__CIcos:PROC
EXTRN	__CIsqrt:PROC
EXTRN	__CIatan2:PROC
EXTRN	__CIlog:PROC
EXTRN	__CIpow:PROC
EXTRN	_floor:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0CM@KIMOGOPP@Bad?5expression?5eval_all?$CI?$CJ?5node?5t@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\eval_all.c
CONST	SEGMENT
??_C@_0CM@KIMOGOPP@Bad?5expression?5eval_all?$CI?$CJ?5node?5t@ DB 'Bad ex'
	DB	'pression eval_all() node type %d: %s.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@KHNAHFIG@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@
CONST	SEGMENT
??_C@_0DI@KHNAHFIG@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@ DB 'A'
	DB	'rray index %d of array %s is %d; exceeds bound of %d.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@DOJNKOOH@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@
CONST	SEGMENT
??_C@_0DH@DOJNKOOH@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@ DB 'A'
	DB	'rray index %d of array %s is %d. Indexes start at 1.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@MIEHCCIC@Can?8t?5do?5boundary?5on?5this?5type?5e@
CONST	SEGMENT
??_C@_0CJ@MIEHCCIC@Can?8t?5do?5boundary?5on?5this?5type?5e@ DB 'Can''t do'
	DB	' boundary on this type element.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@OJPFAPEO@Can?5do?5hit_constraints?5only?5on?5v@
CONST	SEGMENT
??_C@_0CK@OJPFAPEO@Can?5do?5hit_constraints?5only?5on?5v@ DB 'Can do hit_'
	DB	'constraints only on vertices.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@IPCEGKDM@Can?5only?5do?5constraint?5value?5for@
CONST	SEGMENT
??_C@_0CM@IPCEGKDM@Can?5only?5do?5constraint?5value?5for@ DB 'Can only do'
	DB	' constraint value for vertices.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@PABLLOJJ@Can?8t?5do?5constraints?5on?5this?5typ@
CONST	SEGMENT
??_C@_0CM@PABLLOJJ@Can?8t?5do?5constraints?5on?5this?5typ@ DB 'Can''t do '
	DB	'constraints on this type element.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@FLIAONNC@Attribute?5?$CFs?5is?5?$CFs?5attribute?0?5no@
CONST	SEGMENT
??_C@_0DJ@FLIAONNC@Attribute?5?$CFs?5is?5?$CFs?5attribute?0?5no@ DB 'Attr'
	DB	'ibute %s is %s attribute, not %s attribute (in %s).', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@MPPJKLHD@Attribute?5?$CFs?5index?5?$CFd?5is?5?$CFd?$DL?5max@
CONST	SEGMENT
??_C@_0DF@MPPJKLHD@Attribute?5?$CFs?5index?5?$CFd?5is?5?$CFd?$DL?5max@ DB 'A'
	DB	'ttribute %s index %d is %d; maximum is %d (in %s).', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@OHHPJEHI@Density?5of?5wrong?5type?5element?4?6?$AA@
CONST	SEGMENT
??_C@_0CA@OHHPJEHI@Density?5of?5wrong?5type?5element?4?6?$AA@ DB 'Density'
	DB	' of wrong type element.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GAPLEMFA@Phase?5of?5wrong?5type?5element?4?6?$AA@
CONST	SEGMENT
??_C@_0BO@GAPLEMFA@Phase?5of?5wrong?5type?5element?4?6?$AA@ DB 'Phase of '
	DB	'wrong type element.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KPLMFDOD@Pressure?5only?5for?5bodies?4?6?$AA@
CONST	SEGMENT
??_C@_0BL@KPLMFDOD@Pressure?5only?5for?5bodies?4?6?$AA@ DB 'Pressure only'
	DB	' for bodies.', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@HLEJJGHA@Acos?5argument?5is?5?$CF18?415f?0?5magnit@
CONST	SEGMENT
??_C@_0DF@HLEJJGHA@Acos?5argument?5is?5?$CF18?415f?0?5magnit@ DB 'Acos ar'
	DB	'gument is %18.15f, magnitude greater than 1.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@KNMCHGOJ@Asin?5argument?5is?5?$CF18?415f?0?5magnit@
CONST	SEGMENT
??_C@_0DF@KNMCHGOJ@Asin?5argument?5is?5?$CF18?415f?0?5magnit@ DB 'Asin ar'
	DB	'gument is %18.15f, magnitude greater than 1.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@BPFJIHDJ@Log?5argument?5is?5?$CF18?415f?$DL?5must?5be@
CONST	SEGMENT
??_C@_0CM@BPFJIHDJ@Log?5argument?5is?5?$CF18?415f?$DL?5must?5be@ DB 'Log '
	DB	'argument is %18.15f; must be positive.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BLAKMPAE@Acosh?5argument?5less?5than?51?4?6?$AA@
CONST	SEGMENT
??_C@_0BN@BLAKMPAE@Acosh?5argument?5less?5than?51?4?6?$AA@ DB 'Acosh argu'
	DB	'ment less than 1.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT ??_C@_0CE@FBJOMNDK@Square?5root?5of?5negative?5number?5?$CF@
CONST	SEGMENT
??_C@_0CE@FBJOMNDK@Square?5root?5of?5negative?5number?5?$CF@ DB 'Square r'
	DB	'oot of negative number %g ', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT __real@c059000000000000
CONST	SEGMENT
__real@c059000000000000 DQ 0c059000000000000r	; -100
CONST	ENDS
;	COMDAT ??_C@_0CM@MKJCJODL@Nonintegral?5power?5?$CI?$CFf?$CJ?5of?5negati@
CONST	SEGMENT
??_C@_0CM@MKJCJODL@Nonintegral?5power?5?$CI?$CFf?$CJ?5of?5negati@ DB 'Non'
	DB	'integral power (%f) of negative number.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@IAPBGOKK@Negative?5power?5?$CI?$CFf?$CJ?5of?5zero?5in?5d@
CONST	SEGMENT
??_C@_0CM@IAPBGOKK@Negative?5power?5?$CI?$CFf?$CJ?5of?5zero?5in?5d@ DB 'N'
	DB	'egative power (%f) of zero in derivative.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EHPMEHID@Negative?5power?5?$CI?$CFd?$CJ?5of?5zero?4?6?$AA@
CONST	SEGMENT
??_C@_0BO@EHPMEHID@Negative?5power?5?$CI?$CFd?$CJ?5of?5zero?4?6?$AA@ DB 'N'
	DB	'egative power (%d) of zero.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KKBNAHFA@Division?5by?5zero?4?6?$AA@
CONST	SEGMENT
??_C@_0BD@KKBNAHFA@Division?5by?5zero?4?6?$AA@ DB 'Division by zero.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DGKEPBMO@Modulus?5base?5zero?4?6?$AA@
CONST	SEGMENT
??_C@_0BE@DGKEPBMO@Modulus?5base?5zero?4?6?$AA@ DB 'Modulus base zero.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EKEAJAJD@Divide?5by?5zero?4?6?$AA@
CONST	SEGMENT
??_C@_0BB@EKEAJAJD@Divide?5by?5zero?4?6?$AA@ DB 'Divide by zero.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@JGNMBEAC@Can?8t?5have?5indexed?5x?5on?5?$CFs?0?5in?5?$CF@
CONST	SEGMENT
??_C@_0CE@JGNMBEAC@Can?8t?5have?5indexed?5x?5on?5?$CFs?0?5in?5?$CF@ DB 'C'
	DB	'an''t have indexed x on %s, in %s.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@NBEFOKMP@Invalid?5index?5?$CFd?5for?5x?5in?5?$CFs?$DL?5mu@
CONST	SEGMENT
??_C@_0EE@NBEFOKMP@Invalid?5index?5?$CFd?5for?5x?5in?5?$CFs?$DL?5mu@ DB 'I'
	DB	'nvalid index %d for x in %s; must be between 1 and %d, inclus'
	DB	'ive.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MACKFC@?$CFs?5index?5?$CFd?5is?5not?5valid?4?6?$AA@
CONST	SEGMENT
??_C@_0BL@MACKFC@?$CFs?5index?5?$CFd?5is?5not?5valid?4?6?$AA@ DB '%s inde'
	DB	'x %d is not valid.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IEGJKICB@EVAL_ALL?4C?$AA@
CONST	SEGMENT
??_C@_0L@IEGJKICB@EVAL_ALL?4C?$AA@ DB 'EVAL_ALL.C', 00H	; `string'
CONST	ENDS
;	COMDAT __real@41f0000000000000
CONST	SEGMENT
__real@41f0000000000000 DQ 041f0000000000000r	; 4.29497e+009
CONST	ENDS
;	COMDAT ??_C@_0DH@FHIGAOPK@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@
CONST	SEGMENT
??_C@_0DH@FHIGAOPK@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@ DB 'A'
	DB	'rray index %d of array %s is %d; exceeds bound of %d.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
CONST	SEGMENT
??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@ DB '('
	DB	'source file %s, line %d)', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@BDAMNFPJ@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@
CONST	SEGMENT
??_C@_0DG@BDAMNFPJ@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@ DB 'A'
	DB	'rray index %d of array %s is %d. Indexes start at 1.', 00H ; `string'
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT ??_C@_0CP@JBLBFGKN@More?5variables?5than?52?$CKMAXCOORD?5i@
CONST	SEGMENT
??_C@_0CP@JBLBFGKN@More?5variables?5than?52?$CKMAXCOORD?5i@ DB 'More vari'
	DB	'ables than 2*MAXCOORD in eval_all().', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@GHCFIFPO@Internal?5error?3?5eval_all?5express@
CONST	SEGMENT
??_C@_0DA@GHCFIFPO@Internal?5error?3?5eval_all?5express@ DB 'Internal err'
	DB	'or: eval_all expression node null.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _eval_all
_TEXT	SEGMENT
_fval$GSCopy$ = -10904					; size = 4
_partials$GSCopy$ = -10900				; size = 4
_params$GSCopy$ = -10896				; size = 4
_ex$GSCopy$ = -10892					; size = 4
_node$ = -10888						; size = 4
_value$90539 = -10884					; size = 8
_y$ = -10884						; size = 8
tv23406 = -10880					; size = 4
tv13637 = -10880					; size = 4
tv13226 = -10880					; size = 4
tv10117 = -10880					; size = 4
_datastart1$90523 = -10880				; size = 4
_k$89435 = -10880					; size = 4
tv13429 = -10876					; size = 4
tv13285 = -10876					; size = 4
_i$90540 = -10876					; size = 4
_id$ = -10876						; size = 4
tv13289 = -10872					; size = 4
_ext$90298 = -10872					; size = 4
_a$89425 = -10872					; size = 4
tv25584 = -10870					; size = 2
tv25574 = -10870					; size = 2
tv25578 = -10868					; size = 8
tv25569 = -10868					; size = 8
tv24042 = -10868					; size = 8
tv24040 = -10868					; size = 8
tv24038 = -10868					; size = 8
tv10621 = -10868					; size = 8
tv10607 = -10868					; size = 8
_x$ = -10868						; size = 8
tv25507 = -10864					; size = 4
tv25497 = -10864					; size = 4
tv25494 = -10864					; size = 4
tv24381 = -10864					; size = 4
tv24379 = -10864					; size = 4
tv24377 = -10864					; size = 4
tv24374 = -10864					; size = 4
tv24371 = -10864					; size = 4
tv24369 = -10864					; size = 4
tv24366 = -10864					; size = 4
tv24363 = -10864					; size = 4
tv24350 = -10864					; size = 4
tv24348 = -10864					; size = 4
tv24346 = -10864					; size = 4
tv24314 = -10864					; size = 4
tv24188 = -10864					; size = 4
tv24187 = -10864					; size = 4
tv24186 = -10864					; size = 4
tv24182 = -10864					; size = 4
tv24181 = -10864					; size = 4
tv24180 = -10864					; size = 4
tv24177 = -10864					; size = 4
tv24171 = -10864					; size = 4
tv24068 = -10864					; size = 4
tv11669 = -10864					; size = 4
_oldflag$90336 = -10864					; size = 4
_spot$90299 = -10864					; size = 4
_a$90538 = -10860					; size = 4
_n$ = -10860						; size = 4
_k$89678 = -10860					; size = 4
_i$89429 = -10860					; size = 4
_i$ = -10860						; size = 4
_localbase$ = -10856					; size = 4
tv28649 = -10852					; size = 8
tv28635 = -10852					; size = 8
tv10622 = -10852					; size = 8
tv25581 = -10848					; size = 4
tv25571 = -10848					; size = 4
tv25506 = -10848					; size = 4
tv25505 = -10848					; size = 4
tv25504 = -10848					; size = 4
tv25503 = -10848					; size = 4
tv25164 = -10848					; size = 4
tv25147 = -10848					; size = 4
tv25111 = -10848					; size = 4
tv24536 = -10848					; size = 4
tv24527 = -10848					; size = 4
tv24525 = -10848					; size = 4
tv24523 = -10848					; size = 4
tv24521 = -10848					; size = 4
tv24517 = -10848					; size = 4
tv24513 = -10848					; size = 4
tv24508 = -10848					; size = 4
tv24477 = -10848					; size = 4
tv24476 = -10848					; size = 4
tv24464 = -10848					; size = 4
tv24463 = -10848					; size = 4
tv24426 = -10848					; size = 4
tv11359 = -10848					; size = 4
_datastart2$90524 = -10848				; size = 4
tv3253 = -10848						; size = 4
tv2700 = -10848						; size = 4
tv2626 = -10848						; size = 4
tv2594 = -10848						; size = 4
tv2566 = -10848						; size = 4
tv2495 = -10848						; size = 4
tv2458 = -10848						; size = 4
tv2326 = -10848						; size = 4
tv2302 = -10848						; size = 4
tv1178 = -10848						; size = 4
tv1146 = -10848						; size = 4
tv1135 = -10848						; size = 4
tv1124 = -10848						; size = 4
tv1113 = -10848						; size = 4
tv1102 = -10848						; size = 4
tv1091 = -10848						; size = 4
_datastart$90492 = -10848				; size = 4
_testb$90441 = -10848					; size = 4
_id$89650 = -10848					; size = 4
_bqnode$89486 = -10844					; size = 104
_normalxJ$90505 = -10740				; size = 288
_localstack$ = -10452					; size = 10400
_vect$89680 = -52					; size = 48
_vect$89658 = -52					; size = 48
_normalqXvS$90504 = -28					; size = 24
__$ArrayPad$ = -4					; size = 4
_ex$ = 8						; size = 4
_params$ = 12						; size = 4
_pcount$ = 16						; size = 4
_fval$ = 20						; size = 4
_partials$ = 24						; size = 4
_q_id$ = 28						; size = 4
_eval_all PROC						; COMDAT

; 41   : {

	push	ebp
	mov	ebp, esp
	mov	eax, 10904				; 00002a98H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 42   :   int i,n;
; 43   :   REAL x,y;
; 44   :   struct estack { REAL value, deriv[2*MAXCOORD]; } localstack[100];
; 45   :   struct estack *stacktop = localstack;
; 46   :   struct treenode *node;
; 47   :   element_id id;
; 48   :   struct locallist_t *localbase = ex->locals;

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _fval$[ebp]
	mov	edx, DWORD PTR _ex$[ebp]
	push	ebx
	push	esi

; 49   : 
; 50   :   for ( i = 0 ; i < pcount ; i++ )

	mov	esi, DWORD PTR _pcount$[ebp]
	mov	DWORD PTR _params$GSCopy$[ebp], eax
	mov	eax, DWORD PTR _partials$[ebp]
	mov	DWORD PTR _fval$GSCopy$[ebp], ecx
	mov	ecx, DWORD PTR [edx+8]
	push	edi
	mov	DWORD PTR _ex$GSCopy$[ebp], edx
	mov	DWORD PTR _partials$GSCopy$[ebp], eax
	lea	ebx, DWORD PTR _localstack$[ebp]
	mov	DWORD PTR _localbase$[ebp], ecx
	test	esi, esi
	jle	SHORT $LN776@eval_all

; 51   :       stacktop->deriv[i] = 0.0;

	mov	ecx, esi
	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	xor	eax, eax
	lea	edi, DWORD PTR _localstack$[ebp+8]
	rep stosd
$LN776@eval_all:

; 52   :   stacktop->value = 0.0;  /* for empty expression */
; 53   :   if ( ex == NULL ) return;
; 54   :   if ( ex->start == NULL )

	cmp	DWORD PTR [edx], 0
	fldz
	fstp	QWORD PTR _localstack$[ebp]
	jne	SHORT $LN1292@eval_all

; 55   :      kb_error(1017,"Internal error: eval_all expression node null.\n",
; 56   :        RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DA@GHCFIFPO@Internal?5error?3?5eval_all?5express@
	push	1017					; 000003f9H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1292@eval_all:

; 57   : 
; 58   :   if ( pcount > 2*MAXCOORD )

	cmp	esi, 12					; 0000000cH
	jle	SHORT $LN771@eval_all

; 59   :       kb_error(7009,"More variables than 2*MAXCOORD in eval_all().\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CP@JBLBFGKN@More?5variables?5than?52?$CKMAXCOORD?5i@
	push	7009					; 00001b61H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN771@eval_all:

; 60   : 
; 61   :   for ( node = ex->start+1 ; ; node++ )

	mov	edx, DWORD PTR _ex$GSCopy$[ebp]
	mov	esi, DWORD PTR [edx]
$LN1749@eval_all:

; 62   :   {
; 63   :     switch ( node->type )

	mov	ecx, DWORD PTR [esi+168]
	fld1
	mov	edi, DWORD PTR _dymem
	fld	QWORD PTR __real@4000000000000000
	mov	edx, DWORD PTR _q_id$[ebp]
	add	esi, 168				; 000000a8H
	mov	eax, ecx
	mov	DWORD PTR _node$[ebp], esi
	cmp	eax, 10107				; 0000277bH
	jg	$LN895@eval_all
	fstp	ST(0)
	fstp	ST(0)
	cmp	eax, 10106				; 0000277aH
	jge	$LN680@eval_all
	sub	eax, 10001				; 00002711H
	cmp	eax, 101				; 00000065H
	ja	$LN897@eval_all
	movzx	eax, BYTE PTR $LN1243@eval_all[eax]
	jmp	DWORD PTR $LN1753@eval_all[eax*4]
$LN763@eval_all:

; 64   :     {
; 65   :       case SETUP_FRAME_NODE: 
; 66   :              break;
; 67   :              
; 68   :       case EXPRLIST_NODE:
; 69   :              break;  /* leave expression on stack */
; 70   :  
; 71   :       case FUNCTION_CALL_NODE:
; 72   :       { struct thread_data *td = GET_THREAD_DATA;

	mov	ecx, DWORD PTR _thread_data_key
	push	ecx
	call	_win_get_thread_data
	mov	edi, eax

; 73   :         REAL value;
; 74   :         
; 75   :         /* push arguments on eval() stack */
; 76   :         for ( i = 0 ; i < node->op2.argcount ; i++ )

	xor	eax, eax
	add	esp, 4
	cmp	DWORD PTR [esi+136], eax
	jle	SHORT $LN760@eval_all
	mov	ecx, DWORD PTR [edi+48]
$LL762@eval_all:

; 77   :           *(++(td->stack_top)) = stacktop[i-node->op2.argcount+1].value;

	add	ecx, 8
	mov	DWORD PTR [edi+48], ecx
	mov	edx, eax
	sub	edx, DWORD PTR [esi+136]
	inc	eax
	inc	edx
	imul	edx, 104				; 00000068H
	fld	QWORD PTR [edx+ebx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR [esi+136]
	jl	SHORT $LL762@eval_all
$LN760@eval_all:

; 78   :         value = eval(&globals(node->op1.name_id)->value.proc,
; 79   :            NULL,NULLID,NULL);

	mov	eax, DWORD PTR [esi+32]
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN779@eval_all
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN781@eval_all
	mov	ecx, DWORD PTR _localbase$[ebp]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN780@eval_all
$LN781@eval_all:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN779@eval_all
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN780@eval_all
$LN779@eval_all:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN780@eval_all:
	push	0
	push	0
	add	eax, 64					; 00000040H
	push	0
	push	eax
	call	_eval

; 80   :         td->stack_top -= node->op2.argcount; /* pop arguments */

	mov	ecx, DWORD PTR [esi+136]
	neg	ecx
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
	add	esp, 16					; 00000010H
	add	DWORD PTR [edi+48], ecx
$LN743@eval_all:

; 81   :         (++stacktop)->value = value;

	add	ebx, 104				; 00000068H
$LN1746@eval_all:
	fstp	QWORD PTR [ebx]
$LN667@eval_all:

; 82   :         FIRST = 0.0;

	cmp	DWORD PTR _pcount$[ebp], 0
$LN1747@eval_all:
	jle	$LN1270@eval_all

; 78   :         value = eval(&globals(node->op1.name_id)->value.proc,
; 79   :            NULL,NULLID,NULL);

	mov	ecx, DWORD PTR _pcount$[ebp]
	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	lea	edi, DWORD PTR [ebx+8]
	xor	eax, eax
	rep stosd

; 83   :         break;

	jmp	$LN1270@eval_all
$LN727@eval_all:

; 148  : 
; 149  :       case BACKQUOTE_START_NODE:
; 150  :         { struct expnode bqnode = *ex;
; 151  :           bqnode.start = node;

	mov	eax, DWORD PTR _node$[ebp]
	mov	esi, DWORD PTR _ex$GSCopy$[ebp]
	mov	ecx, 26					; 0000001aH
	lea	edi, DWORD PTR _bqnode$89486[ebp]
	rep movsd

; 152  :           bqnode.root = node+node->op1.skipsize;
; 153  :           bqnode.locals = localbase;
; 154  :           eval(&bqnode,params,q_id,NULL);

	mov	ecx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _bqnode$89486[ebp], eax
	mov	edx, DWORD PTR [eax+32]
	imul	edx, 168				; 000000a8H
	add	edx, eax
	mov	eax, DWORD PTR _localbase$[ebp]
	push	0
	mov	DWORD PTR _bqnode$89486[ebp+4], edx
	mov	edx, DWORD PTR _params$GSCopy$[ebp]
	push	ecx
	mov	DWORD PTR _bqnode$89486[ebp+8], eax
	push	edx
	lea	eax, DWORD PTR _bqnode$89486[ebp]
	push	eax
	call	_eval

; 155  :           node += node->op1.skipsize-1;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	esp, 16					; 00000010H
	imul	ecx, 168				; 000000a8H
	lea	edx, DWORD PTR [eax+ecx-168]
	mov	DWORD PTR _node$[ebp], edx

; 156  :         }
; 157  :         break;

	jmp	$LN1698@eval_all
$LN700@eval_all:

; 201  : 
; 202  :       case REPLACECONST_NODE:
; 203  :            for ( i = 0 ; i < pcount ; i++ )

	cmp	DWORD PTR _pcount$[ebp], 0
	jle	SHORT $LN699@eval_all
	mov	ecx, DWORD PTR _pcount$[ebp]
	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	lea	edi, DWORD PTR [ebx+8]
	xor	eax, eax
	rep stosd
$LN699@eval_all:

; 204  :               stacktop->deriv[i] = 0.0;
; 205  :            stacktop->value = node->op1.real;

	fld	QWORD PTR [esi+32]
	fstp	QWORD PTR [ebx]

; 206  :            break;

	jmp	$LN1270@eval_all
$LN696@eval_all:

; 207  : 
; 208  :       case COND_TEST_NODE:
; 209  :            if ( (stacktop--)->value == 0. )

	fld	QWORD PTR [ebx]
	sub	ebx, 104				; 00000068H
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$LN1270@eval_all

; 210  :            { /* jump */
; 211  :              node += node->op1.skipsize;

	mov	eax, DWORD PTR [esi+32]
	imul	eax, 168				; 000000a8H
	add	esi, eax
	mov	DWORD PTR _node$[ebp], esi

; 212  :            }
; 213  :            break;

	jmp	$LN1270@eval_all
$LN694@eval_all:

; 214  : 
; 215  :       case COND_EXPR_NODE:
; 216  :            /* did first command, so skip second */
; 217  :            node += node->op1.skipsize;

	mov	ecx, DWORD PTR [esi+32]
	imul	ecx, 168				; 000000a8H
	add	esi, ecx
	mov	DWORD PTR _node$[ebp], esi

; 218  :            break;

	jmp	$LN1270@eval_all
$LN672@eval_all:

; 260  : 
; 261  :       case PUSHGLOBAL_NODE:
; 262  :            { struct global *g = globals(node->op1.name_id);

	mov	esi, DWORD PTR [esi+32]
	mov	eax, esi
	and	eax, -16777216				; ff000000H
	and	esi, 16777215				; 00ffffffH
	cmp	eax, 268435456				; 10000000H
	jne	SHORT $LN821@eval_all
	mov	edx, DWORD PTR _web+5652
	lea	eax, DWORD PTR [edx+esi*4]
	mov	ecx, DWORD PTR [eax+edi]
	jmp	SHORT $LN818@eval_all
$LN821@eval_all:
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN819@eval_all
	mov	ecx, DWORD PTR _localbase$[ebp]
	imul	esi, 224				; 000000e0H
	add	esi, DWORD PTR [ecx]
	mov	ecx, esi
	jmp	SHORT $LN818@eval_all
$LN819@eval_all:
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN817@eval_all
	mov	edx, DWORD PTR _web+5656
	mov	ecx, DWORD PTR [edx+esi*4]
	jmp	SHORT $LN818@eval_all
$LN817@eval_all:
	mov	eax, DWORD PTR _web+5652
	lea	ecx, DWORD PTR [eax+esi*4]
	mov	ecx, DWORD PTR [ecx+edi]
$LN818@eval_all:

; 263  :              if ( g->flags & FILE_VALUES )

	mov	eax, DWORD PTR [ecx+192]
	test	al, 2
	je	SHORT $LN671@eval_all

; 264  :              (++stacktop)->value = g->value.file.values[int_val];

	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR _int_val
	fld	QWORD PTR [edx+eax*8]
	jmp	SHORT $LN1724@eval_all
$LN671@eval_all:

; 265  :              else if ( g->flags & STRINGVAL )

	test	eax, 8192				; 00002000H
	je	SHORT $LN669@eval_all

; 266  :              (++stacktop)->value = 0.0;

	fldz

; 267  :              else

	jmp	SHORT $LN1724@eval_all
$LN669@eval_all:

; 268  :              (++stacktop)->value = g->value.real;

	fld	QWORD PTR [ecx+64]
$LN1724@eval_all:
	add	ebx, 104				; 00000068H
	fstp	QWORD PTR [ebx]

; 269  :              if ( g->attr.varstuff.gradhess ) 

	cmp	DWORD PTR [ecx+184], 0
	je	$LN667@eval_all

; 270  :                for ( i = 0 ; i < pcount ; i++ )

	mov	edx, DWORD PTR _pcount$[ebp]
	xor	eax, eax
	cmp	edx, 4
	jl	$LC1148@eval_all

; 271  :                 stacktop->deriv[i] = g->attr.varstuff.gradhess[i];

	mov	esi, 8
	sub	esi, ebx
	mov	DWORD PTR tv13285[ebp], esi
	add	edx, -4					; fffffffcH
	mov	esi, -16				; fffffff0H
	sub	esi, ebx
	shr	edx, 2
	inc	edx
	lea	edi, DWORD PTR [edx*4]
	mov	DWORD PTR tv13226[ebp], 16		; 00000010H
	lea	eax, DWORD PTR [ebx+16]
	mov	DWORD PTR tv13289[ebp], esi
	mov	DWORD PTR _i$[ebp], edi
	jmp	SHORT $LN1149@eval_all
$LL1288@eval_all:

; 270  :                for ( i = 0 ; i < pcount ; i++ )

	mov	esi, DWORD PTR tv13289[ebp]
$LN1149@eval_all:

; 271  :                 stacktop->deriv[i] = g->attr.varstuff.gradhess[i];

	mov	edi, DWORD PTR [ecx+184]
	add	esi, eax
	fld	QWORD PTR [esi+edi]
	fstp	QWORD PTR [eax-8]
	mov	edi, DWORD PTR [ecx+184]
	fld	QWORD PTR [esi+edi+8]
	mov	edi, DWORD PTR tv13226[ebp]
	add	DWORD PTR tv13226[ebp], 32		; 00000020H
	fstp	QWORD PTR [eax]
	mov	esi, DWORD PTR [ecx+184]
	fld	QWORD PTR [edi+esi]
	mov	esi, DWORD PTR tv13285[ebp]
	fstp	QWORD PTR [eax+8]
	mov	edi, DWORD PTR [ecx+184]
	add	esi, eax
	fld	QWORD PTR [esi+edi]
	add	eax, 32					; 00000020H
	dec	edx
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LL1288@eval_all

; 270  :                for ( i = 0 ; i < pcount ; i++ )

	mov	edx, DWORD PTR _pcount$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
$LC1148@eval_all:
	cmp	eax, edx
	jge	$LN1270@eval_all
$LC666@eval_all:

; 271  :                 stacktop->deriv[i] = g->attr.varstuff.gradhess[i];

	mov	esi, DWORD PTR [ecx+184]
	fld	QWORD PTR [esi+eax*8]
	inc	eax
	fstp	QWORD PTR [ebx+eax*8]
	cmp	eax, edx
	jl	SHORT $LC666@eval_all

; 272  :              else FIRST = 0.0;

	jmp	$LN1270@eval_all
$LN14@eval_all:

; 1509 :       }
; 1510 : 
; 1511 :       case ELINDEX_NODE: /* id possibly with mpi task number */
; 1512 :          /* creates typeless valid id */
; 1513 :          {
; 1514 :            if ( stacktop->value == 0 )

	fld	QWORD PTR [ebx]
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	SHORT $LN13@eval_all

; 1515 :              id = NULLID;

	xor	eax, eax
	fstp	ST(0)

; 1524 :            }
; 1525 : #ifdef MPI_EVOLVER
; 1526 :          { int task;
; 1527 :            if ( node->right )
; 1528 :               task = (int)((stacktop--)->value);
; 1529 :            else task = this_task;
; 1530 :            if ( task < 0 || task >= mpi_nprocs )
; 1531 :            { sprintf(errmsg,
; 1532 :                 "Illegal task number %d.  Must be between 1 and %d.\n",task,mpi_nprocs);
; 1533 :              sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 1534 :                  file_names[node->file_no],node->line_no);
; 1535 :              kb_error(1913,errmsg,RECOVERABLE);
; 1536 :            }
; 1537 :            id |= (element_id)task << TASK_ID_SHIFT;
; 1538 :          }
; 1539 : #endif
; 1540 :           
; 1541 :            *(element_id *)&(stacktop->value) = id;

	mov	DWORD PTR [ebx], eax

; 1542 :            break;

	jmp	$LN1270@eval_all
$LN13@eval_all:

; 1516 :            else 
; 1517 :            { if ( stacktop->value > 0.0 )

	fcomp	QWORD PTR [ebx]
	fnstsw	ax

; 1518 :              id = ((int)(stacktop->value)-1);

	fld	QWORD PTR [ebx]
	test	ah, 5
	jp	SHORT $LN11@eval_all
	fnstcw	WORD PTR tv25584[ebp]
	movzx	eax, WORD PTR tv25584[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv25581[ebp], eax
	fldcw	WORD PTR tv25581[ebp]
	fistp	QWORD PTR tv25578[ebp]
	mov	eax, DWORD PTR tv25578[ebp]
	dec	eax

; 1522 :              }
; 1523 :              id |= VALIDMASK;

	or	eax, 268435456				; 10000000H
	fldcw	WORD PTR tv25584[ebp]

; 1524 :            }
; 1525 : #ifdef MPI_EVOLVER
; 1526 :          { int task;
; 1527 :            if ( node->right )
; 1528 :               task = (int)((stacktop--)->value);
; 1529 :            else task = this_task;
; 1530 :            if ( task < 0 || task >= mpi_nprocs )
; 1531 :            { sprintf(errmsg,
; 1532 :                 "Illegal task number %d.  Must be between 1 and %d.\n",task,mpi_nprocs);
; 1533 :              sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 1534 :                  file_names[node->file_no],node->line_no);
; 1535 :              kb_error(1913,errmsg,RECOVERABLE);
; 1536 :            }
; 1537 :            id |= (element_id)task << TASK_ID_SHIFT;
; 1538 :          }
; 1539 : #endif
; 1540 :           
; 1541 :            *(element_id *)&(stacktop->value) = id;

	mov	DWORD PTR [ebx], eax

; 1542 :            break;

	jmp	$LN1270@eval_all
$LN11@eval_all:

; 1519 :              else 
; 1520 :              { id = -((int)(stacktop->value)+1);         
; 1521 :                invert(id); 

	fnstcw	WORD PTR tv25574[ebp]
	movzx	eax, WORD PTR tv25574[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv25571[ebp], eax
	or	eax, -1
	fldcw	WORD PTR tv25571[ebp]
	fistp	QWORD PTR tv25569[ebp]
	mov	ecx, DWORD PTR tv25569[ebp]
	sub	eax, ecx
	xor	eax, 134217728				; 08000000H
	fldcw	WORD PTR tv25574[ebp]

; 1522 :              }
; 1523 :              id |= VALIDMASK;

	or	eax, 268435456				; 10000000H

; 1524 :            }
; 1525 : #ifdef MPI_EVOLVER
; 1526 :          { int task;
; 1527 :            if ( node->right )
; 1528 :               task = (int)((stacktop--)->value);
; 1529 :            else task = this_task;
; 1530 :            if ( task < 0 || task >= mpi_nprocs )
; 1531 :            { sprintf(errmsg,
; 1532 :                 "Illegal task number %d.  Must be between 1 and %d.\n",task,mpi_nprocs);
; 1533 :              sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 1534 :                  file_names[node->file_no],node->line_no);
; 1535 :              kb_error(1913,errmsg,RECOVERABLE);
; 1536 :            }
; 1537 :            id |= (element_id)task << TASK_ID_SHIFT;
; 1538 :          }
; 1539 : #endif
; 1540 :           
; 1541 :            *(element_id *)&(stacktop->value) = id;

	mov	DWORD PTR [ebx], eax

; 1542 :            break;

	jmp	$LN1270@eval_all
$LN680@eval_all:

; 246  : 
; 247  :       case PUSHCONST_NODE:
; 248  :       case PUSHPI_NODE:
; 249  :       case PUSHE_NODE:
; 250  :         (++stacktop)->value = node->op1.real;

	fld	QWORD PTR [esi+32]

; 251  :         for ( i = 0 ; i < pcount ; i++ )
; 252  :            stacktop->deriv[i] = 0.0;
; 253  :         break;

	jmp	$LN743@eval_all
$LN895@eval_all:

; 62   :   {
; 63   :     switch ( node->type )

	cmp	eax, 10386				; 00002892H
	jg	$LN1328@eval_all
	je	$LN1331@eval_all
	sub	eax, 10108				; 0000277cH
	cmp	eax, 274				; 00000112H
	ja	$LN1337@eval_all
	movzx	eax, BYTE PTR $LN1244@eval_all[eax]
	jmp	DWORD PTR $LN1754@eval_all[eax*4]
$LN1416@eval_all:

; 84   :       }
; 85   :       
; 86   :       case FUNCTION_CALL_RETURN_NODE:
; 87   :         {
; 88   :           /* nothing to do here since FUNCTION_CALL used eval() */
; 89   :           break;
; 90   :         }
; 91   : 
; 92   :       case INDEXSET_NODE: break; /* just accumulate index values */
; 93   : 
; 94   :       case ARRAY_HEAD_NODE: break;  /* let indices accumulate */
; 95   : 
; 96   :       case ARRAYEVAL_NODE:
; 97   :       { struct array *a = globals(node->op2.name_id)->attr.arrayptr;

	mov	eax, DWORD PTR [esi+136]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	mov	edx, DWORD PTR _web+5652
	fstp	ST(0)
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	jne	SHORT $LN789@eval_all

; 84   :       }
; 85   :       
; 86   :       case FUNCTION_CALL_RETURN_NODE:
; 87   :         {
; 88   :           /* nothing to do here since FUNCTION_CALL used eval() */
; 89   :           break;
; 90   :         }
; 91   : 
; 92   :       case INDEXSET_NODE: break; /* just accumulate index values */
; 93   : 
; 94   :       case ARRAY_HEAD_NODE: break;  /* let indices accumulate */
; 95   : 
; 96   :       case ARRAYEVAL_NODE:
; 97   :       { struct array *a = globals(node->op2.name_id)->attr.arrayptr;

	and	eax, 16777215				; 00ffffffH
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [ecx+edi]
	jmp	SHORT $LN786@eval_all
$LN789@eval_all:
	and	eax, 16777215				; 00ffffffH
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN787@eval_all
	mov	edx, DWORD PTR _localbase$[ebp]
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [edx]
	jmp	SHORT $LN786@eval_all
$LN787@eval_all:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN785@eval_all
	mov	ecx, DWORD PTR _web+5656
	mov	eax, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN786@eval_all
$LN785@eval_all:
	lea	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [edx+edi]
$LN786@eval_all:
	mov	edi, DWORD PTR [eax+168]

; 98   :         REAL value;
; 99   :         int i,offset;
; 100  :         void *lvalue;
; 101  :         for ( i = 0 ; i < a->dim ; i++ )

	mov	eax, DWORD PTR [edi+4]
	mov	DWORD PTR _a$89425[ebp], edi
	mov	DWORD PTR _i$89429[ebp], 0
	test	eax, eax
	jle	$LN750@eval_all

; 84   :       }
; 85   :       
; 86   :       case FUNCTION_CALL_RETURN_NODE:
; 87   :         {
; 88   :           /* nothing to do here since FUNCTION_CALL used eval() */
; 89   :           break;
; 90   :         }
; 91   : 
; 92   :       case INDEXSET_NODE: break; /* just accumulate index values */
; 93   : 
; 94   :       case ARRAY_HEAD_NODE: break;  /* let indices accumulate */
; 95   : 
; 96   :       case ARRAYEVAL_NODE:
; 97   :       { struct array *a = globals(node->op2.name_id)->attr.arrayptr;

	lea	ecx, DWORD PTR [edi+24]
	mov	DWORD PTR tv13429[ebp], ecx
	npad	6
$LL752@eval_all:

; 102  :         { int k = (int)stacktop[i+1-a->dim].value;

	mov	edx, DWORD PTR _i$89429[ebp]
	sub	edx, eax
	inc	edx
	imul	edx, 104				; 00000068H
	fld	QWORD PTR [edx+ebx]
	call	__ftol2_sse
	mov	DWORD PTR _k$89435[ebp], eax

; 103  :           if ( k < 1 )

	cmp	eax, 1
	jge	$LN749@eval_all

; 104  :           { sprintf(errmsg,"Array index %d of array %s is %d. Indexes start at 1.",
; 105  :                i+1,globals(node->op2.name_id)->name,k);

	mov	eax, DWORD PTR [esi+136]
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN791@eval_all
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN793@eval_all
	mov	ecx, DWORD PTR _localbase$[ebp]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN792@eval_all
$LN793@eval_all:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN791@eval_all
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN792@eval_all
$LN791@eval_all:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN792@eval_all:
	mov	ecx, DWORD PTR _k$89435[ebp]
	mov	edx, DWORD PTR _i$89429[ebp]
	push	ecx
	push	eax
	inc	edx
	push	edx
	push	OFFSET ??_C@_0DG@BDAMNFPJ@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@
	push	OFFSET _errmsg
	call	_sprintf

; 106  :             sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 107  :                  file_names[node->file_no],node->line_no);

	mov	eax, OFFSET _errmsg
	add	esp, 20					; 00000014H
	lea	edi, DWORD PTR [eax+1]
	npad	2
$LL1245@eval_all:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1245@eval_all
	mov	ecx, DWORD PTR [esi+12]
	mov	edx, DWORD PTR [esi+16]
	push	ecx
	mov	ecx, DWORD PTR _file_names
	mov	edx, DWORD PTR [ecx+edx*4]
	push	edx
	sub	eax, edi
	lea	eax, DWORD PTR _errmsg[eax]
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	eax
	call	_sprintf

; 108  :             kb_error(2533,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2533					; 000009e5H
	call	_kb_error
	mov	edi, DWORD PTR _a$89425[ebp]
	mov	eax, DWORD PTR _k$89435[ebp]
	add	esp, 28					; 0000001cH
$LN749@eval_all:

; 109  :           }
; 110  :           if ( k > a->sizes[i] )

	mov	ecx, DWORD PTR tv13429[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	eax, edx
	jle	$LN751@eval_all

; 111  :           { sprintf(errmsg,"Array index %d of array %s is %d; exceeds bound of %d.",
; 112  :                i+1,globals(node->op2.name_id)->name,k,a->sizes[i]);

	mov	eax, DWORD PTR [esi+136]
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN797@eval_all
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN799@eval_all
	mov	ecx, DWORD PTR _localbase$[ebp]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN798@eval_all
$LN799@eval_all:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN797@eval_all
	mov	ecx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN798@eval_all
$LN797@eval_all:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx]
$LN798@eval_all:
	push	edx
	mov	edx, DWORD PTR _k$89435[ebp]
	push	edx
	push	eax
	mov	eax, DWORD PTR _i$89429[ebp]
	inc	eax
	push	eax
	push	OFFSET ??_C@_0DH@FHIGAOPK@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@
	push	OFFSET _errmsg
	call	_sprintf

; 113  :             sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 114  :                  file_names[node->file_no],node->line_no);

	mov	eax, OFFSET _errmsg
	add	esp, 24					; 00000018H
	lea	edi, DWORD PTR [eax+1]
$LL1246@eval_all:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1246@eval_all
	mov	ecx, DWORD PTR [esi+12]
	mov	edx, DWORD PTR [esi+16]
	push	ecx
	mov	ecx, DWORD PTR _file_names
	mov	edx, DWORD PTR [ecx+edx*4]
	push	edx
	sub	eax, edi
	lea	eax, DWORD PTR _errmsg[eax]
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	eax
	call	_sprintf

; 115  :             kb_error(2536,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2536					; 000009e8H
	call	_kb_error
	mov	edi, DWORD PTR _a$89425[ebp]
	add	esp, 28					; 0000001cH
$LN751@eval_all:

; 98   :         REAL value;
; 99   :         int i,offset;
; 100  :         void *lvalue;
; 101  :         for ( i = 0 ; i < a->dim ; i++ )

	mov	ecx, DWORD PTR _i$89429[ebp]
	mov	eax, DWORD PTR [edi+4]
	add	DWORD PTR tv13429[ebp], 4
	inc	ecx
	mov	DWORD PTR _i$89429[ebp], ecx
	cmp	ecx, eax
	jl	$LL752@eval_all
$LN750@eval_all:

; 116  :           }
; 117  :         }
; 118  :         for ( i = 1, offset = (int)stacktop[1-a->dim].value-1 ; i < a->dim ; i++ )

	mov	edi, DWORD PTR [edi+4]
	mov	ecx, edi
	imul	ecx, 104				; 00000068H
	mov	esi, ebx
	sub	esi, ecx
	mov	DWORD PTR tv10117[ebp], esi
	fld	QWORD PTR [esi+104]
	call	__ftol2_sse
	dec	eax
	cmp	edi, 1
	jle	SHORT $LN1290@eval_all
	mov	ecx, DWORD PTR _a$89425[ebp]
	lea	edi, DWORD PTR [ecx+28]
	mov	ecx, DWORD PTR [ecx+4]
	mov	esi, 2
	sub	esi, ecx
	imul	esi, 104				; 00000068H
	add	esi, ebx
	dec	ecx
	mov	DWORD PTR tv3253[ebp], ecx
	npad	5
$LL747@eval_all:

; 119  :         { offset *= a->sizes[i];

	mov	ebx, DWORD PTR [edi]

; 120  :           offset += (int)stacktop[i+1-a->dim].value-1;  /* 1-based indexing */

	fld	QWORD PTR [esi]
	imul	ebx, eax
	call	__ftol2_sse
	add	esi, 104				; 00000068H
	add	edi, 4
	dec	DWORD PTR tv3253[ebp]
	lea	eax, DWORD PTR [ebx+eax-1]
	jne	SHORT $LL747@eval_all

; 116  :           }
; 117  :         }
; 118  :         for ( i = 1, offset = (int)stacktop[1-a->dim].value-1 ; i < a->dim ; i++ )

	mov	esi, DWORD PTR tv10117[ebp]
$LN1290@eval_all:
	mov	edx, DWORD PTR _a$89425[ebp]

; 121  :         }
; 122  :         stacktop -= a->dim;
; 123  :         lvalue = ((char *)a) + a->datastart + offset*a->itemsize;

	mov	ecx, DWORD PTR [edx+12]
	imul	ecx, eax
	add	ecx, DWORD PTR [edx+20]

; 124  :         switch ( a->datatype )

	mov	eax, DWORD PTR [edx+8]
	dec	eax
	add	ecx, edx
	mov	ebx, esi
	cmp	eax, 17					; 00000011H
	ja	$LN731@eval_all
	jmp	DWORD PTR $LN1755@eval_all[eax*4]
$LN742@eval_all:

; 125  :         { case REAL_TYPE: value = *(REAL*)(lvalue);    break;

	fld	QWORD PTR [ecx]

; 126  :           case INTEGER_TYPE: value = *(int*)(lvalue);    break;

	jmp	$LN743@eval_all
$LN740@eval_all:

; 127  :           case UINT_TYPE: value = *(unsigned int*)(lvalue);    break;

	mov	edx, DWORD PTR [ecx]
	fild	DWORD PTR [ecx]
	test	edx, edx
	jns	$LN743@eval_all
	fadd	QWORD PTR __real@41f0000000000000
	jmp	$LN743@eval_all
$LN739@eval_all:

; 128  :           case CHAR_TYPE: value = *(char*)(lvalue);    break;

	movsx	eax, BYTE PTR [ecx]
	mov	DWORD PTR tv25506[ebp], eax
	fild	DWORD PTR tv25506[ebp]
	jmp	$LN743@eval_all
$LN738@eval_all:

; 129  :           case UCHAR_TYPE: value = *(unsigned char*)(lvalue);    break;

	movzx	ecx, BYTE PTR [ecx]
	mov	DWORD PTR tv25505[ebp], ecx
	fild	DWORD PTR tv25505[ebp]
	jmp	$LN743@eval_all
$LN737@eval_all:

; 130  :           case SHORT_TYPE: value = *(short int*)(lvalue);    break;

	movsx	edx, WORD PTR [ecx]
	mov	DWORD PTR tv25504[ebp], edx
	fild	DWORD PTR tv25504[ebp]
	jmp	$LN743@eval_all
$LN736@eval_all:

; 131  :           case USHORT_TYPE: value = *(unsigned short int*)(lvalue);    break;

	movzx	eax, WORD PTR [ecx]
	mov	DWORD PTR tv25503[ebp], eax
	fild	DWORD PTR tv25503[ebp]

; 132  :           case LONG_TYPE: value = *(long*)(lvalue);    break;

	jmp	$LN743@eval_all
$LN734@eval_all:

; 133  :           case ULONG_TYPE: value = *(unsigned long*)(lvalue);    break;

	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR tv25497[ebp], ecx
	fild	DWORD PTR tv25497[ebp]
	test	ecx, ecx
	jns	$LN743@eval_all
	fadd	QWORD PTR __real@41f0000000000000
	jmp	$LN743@eval_all
$LN731@eval_all:

; 134  :           case PTR_TYPE: value = (unsigned long)*(char**)(lvalue);    break;
; 135  :           case VERTEX_TYPE:
; 136  :           case EDGE_TYPE:
; 137  :           case FACET_TYPE:
; 138  :           case BODY_TYPE:
; 139  :           case FACETEDGE_TYPE:
; 140  :           case ELEMENTID_TYPE: value = (int)*(element_id*)(lvalue); break;
; 141  :           default: value = *(int*)(lvalue); break;

	fild	DWORD PTR [ecx]

; 142  : 
; 143  :         }
; 144  :         (++stacktop)->value = value;
; 145  :         FIRST=0.0;
; 146  :       }
; 147  :       break;

	jmp	$LN743@eval_all
$LN1415@eval_all:

; 158  :       case BACKQUOTE_END_NODE: break;  /* just a placeholder */
; 159  :       case ACOMMANDEXPR_NODE: /* backquoted command at start of expression */
; 160  :            break;
; 161  : 
; 162  :       case SET_GLOBAL_NODE:
; 163  :          { struct global *g = globals(node->op1.name_id);

	mov	esi, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	mov	eax, esi
	fstp	ST(0)
	and	eax, -16777216				; ff000000H
	and	esi, 16777215				; 00ffffffH
	cmp	eax, 268435456				; 10000000H
	jne	SHORT $LN807@eval_all

; 158  :       case BACKQUOTE_END_NODE: break;  /* just a placeholder */
; 159  :       case ACOMMANDEXPR_NODE: /* backquoted command at start of expression */
; 160  :            break;
; 161  : 
; 162  :       case SET_GLOBAL_NODE:
; 163  :          { struct global *g = globals(node->op1.name_id);

	mov	eax, DWORD PTR _web+5652
	lea	ecx, DWORD PTR [eax+esi*4]
	mov	esi, DWORD PTR [ecx+edi]
	jmp	SHORT $LN804@eval_all
$LN807@eval_all:
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN805@eval_all
	mov	edx, DWORD PTR _localbase$[ebp]
	imul	esi, 224				; 000000e0H
	add	esi, DWORD PTR [edx]
	jmp	SHORT $LN804@eval_all
$LN805@eval_all:
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN803@eval_all
	mov	eax, DWORD PTR _web+5656
	mov	esi, DWORD PTR [eax+esi*4]
	jmp	SHORT $LN804@eval_all
$LN803@eval_all:
	mov	ecx, DWORD PTR _web+5652
	lea	edx, DWORD PTR [ecx+esi*4]
	mov	esi, DWORD PTR [edx+edi]
$LN804@eval_all:

; 164  :            g->value.real = stacktop->value;
; 165  :            if ( g->attr.varstuff.on_assign_call )

	mov	eax, DWORD PTR [esi+188]
	fld	QWORD PTR [ebx]
	fstp	QWORD PTR [esi+64]
	test	eax, eax
	je	SHORT $LN723@eval_all

; 166  :            { struct  global *gg = globals(g->attr.varstuff.on_assign_call);

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN809@eval_all
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN811@eval_all
	mov	ecx, DWORD PTR _localbase$[ebp]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN810@eval_all
$LN811@eval_all:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN809@eval_all
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN810@eval_all
$LN809@eval_all:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN810@eval_all:

; 167  :              eval(&gg->value.proc,NULL,NULLID,NULL);

	push	0
	push	0
	add	eax, 64					; 00000040H
	push	0
	push	eax
	call	_eval
	fstp	ST(0)
	add	esp, 16					; 00000010H
$LN723@eval_all:

; 168  :           }
; 169  :           if ( g->attr.varstuff.gradhess == NULL )

	cmp	DWORD PTR [esi+184], 0
	jne	SHORT $LN722@eval_all

; 170  :              g->attr.varstuff.gradhess = (REAL*)mycalloc(MAXCOORD*(MAXCOORD+1), sizeof(REAL));

	push	170					; 000000aaH
	push	OFFSET ??_C@_0L@IEGJKICB@EVAL_ALL?4C?$AA@
	push	8
	push	42					; 0000002aH
	call	_kb_calloc
	add	esp, 16					; 00000010H
	mov	DWORD PTR [esi+184], eax
$LN722@eval_all:

; 171  :            for ( i = 0 ; i < pcount ; i++ )

	mov	ecx, DWORD PTR _pcount$[ebp]
	xor	eax, eax
	cmp	ecx, 4
	jl	$LC1151@eval_all

; 172  :                 g->attr.varstuff.gradhess[i] = stacktop->deriv[i];

	mov	edx, 8
	sub	edx, ebx
	mov	DWORD PTR tv13285[ebp], edx
	add	ecx, -4					; fffffffcH
	mov	edx, -16				; fffffff0H
	sub	edx, ebx
	shr	ecx, 2
	inc	ecx
	lea	edi, DWORD PTR [ecx*4]
	mov	DWORD PTR tv13637[ebp], 16		; 00000010H
	lea	eax, DWORD PTR [ebx+16]
	mov	DWORD PTR tv13289[ebp], edx
	mov	DWORD PTR _i$[ebp], edi
	jmp	SHORT $LN1152@eval_all
	npad	5
$LL1287@eval_all:

; 171  :            for ( i = 0 ; i < pcount ; i++ )

	mov	edx, DWORD PTR tv13289[ebp]
$LN1152@eval_all:

; 172  :                 g->attr.varstuff.gradhess[i] = stacktop->deriv[i];

	mov	edi, DWORD PTR [esi+184]
	fld	QWORD PTR [eax-8]
	add	edx, eax
	fstp	QWORD PTR [edx+edi]
	mov	edi, DWORD PTR [esi+184]
	fld	QWORD PTR [eax]
	fstp	QWORD PTR [edx+edi+8]
	mov	edx, DWORD PTR [esi+184]
	fld	QWORD PTR [eax+8]
	mov	edi, DWORD PTR tv13637[ebp]
	add	DWORD PTR tv13637[ebp], 32		; 00000020H
	fstp	QWORD PTR [edi+edx]
	mov	edx, DWORD PTR tv13285[ebp]
	fld	QWORD PTR [eax+16]
	mov	edi, DWORD PTR [esi+184]
	add	edx, eax
	add	eax, 32					; 00000020H
	fstp	QWORD PTR [edx+edi]
	dec	ecx
	jne	SHORT $LL1287@eval_all

; 171  :            for ( i = 0 ; i < pcount ; i++ )

	mov	ecx, DWORD PTR _pcount$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
$LC1151@eval_all:
	cmp	eax, ecx
	jge	SHORT $LN1150@eval_all
$LC721@eval_all:

; 172  :                 g->attr.varstuff.gradhess[i] = stacktop->deriv[i];

	fld	QWORD PTR [ebx+eax*8+8]
	mov	edx, DWORD PTR [esi+184]
	fstp	QWORD PTR [edx+eax*8]
	inc	eax
	cmp	eax, ecx
	jl	SHORT $LC721@eval_all
$LN1150@eval_all:

; 173  :            stacktop--;

	sub	ebx, 104				; 00000068H

; 174  :            break;

	jmp	$LN1270@eval_all
$LN1414@eval_all:

; 175  :          }
; 176  : 
; 177  :       case GET_VOLCONST_NODE:
; 178  :            if ( node->op1.localnum ) 

	mov	esi, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	test	esi, esi
	je	SHORT $LN717@eval_all

; 179  :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	eax, DWORD PTR _localbase$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	edx, DWORD PTR [esi+ecx+216]
	imul	edx, 104				; 00000068H
	mov	eax, DWORD PTR _localstack$[ebp+edx]

; 181  :            (++stacktop)->value = get_body_volconst(id);

	push	eax
	add	ebx, 104				; 00000068H
	call	_get_body_volconst
	add	esp, 4

; 182  :            FIRST = 0.0;
; 183  :            break;

	jmp	$LN1746@eval_all
$LN717@eval_all:

; 180  :            else id = q_id;

	mov	eax, edx

; 181  :            (++stacktop)->value = get_body_volconst(id);

	push	eax
	add	ebx, 104				; 00000068H
	call	_get_body_volconst
	add	esp, 4

; 182  :            FIRST = 0.0;
; 183  :            break;

	jmp	$LN1746@eval_all
$LN1413@eval_all:

; 184  : 
; 185  :  
; 186  :       case GET_TARGET_NODE:
; 187  :            if ( node->op1.localnum ) 

	mov	esi, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	test	esi, esi
	je	SHORT $LN711@eval_all

; 188  :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	eax, DWORD PTR _localbase$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	edx, DWORD PTR [esi+ecx+216]
	imul	edx, 104				; 00000068H
	mov	eax, DWORD PTR _localstack$[ebp+edx]

; 190  :            (++stacktop)->value = get_body_fixvol(id);

	push	eax
	add	ebx, 104				; 00000068H
	call	_get_body_fixvol
	add	esp, 4

; 191  :            FIRST = 0.0;
; 192  :            break;

	jmp	$LN1746@eval_all
$LN711@eval_all:

; 189  :            else id = q_id;

	mov	eax, edx

; 190  :            (++stacktop)->value = get_body_fixvol(id);

	push	eax
	add	ebx, 104				; 00000068H
	call	_get_body_fixvol
	add	esp, 4

; 191  :            FIRST = 0.0;
; 192  :            break;

	jmp	$LN1746@eval_all
$LN1412@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	add	ebx, 104				; 00000068H
	fstp	ST(0)
$LN316@eval_all:

; 193  : 
; 194  :       case GET_MPI_TASK_NODE:
; 195  :            if ( node->op1.localnum ) 
; 196  :               id = *(element_id*)get_localp(node->op1.localnum);
; 197  :            else id = q_id;
; 198  :            (++stacktop)->value = id_task(id);

	fldz

; 199  :            FIRST = 0.0;
; 200  :            break;

	jmp	$LN1746@eval_all
$LN1411@eval_all:

; 219  : 
; 220  :       case COND_ELSE_NODE:
; 221  :            break;
; 222  : 
; 223  : 
; 224  :       case MAXIMUM_NODE:
; 225  :            stacktop--;

	sub	ebx, 104				; 00000068H

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	lea	esi, DWORD PTR [ebx+104]
	fld	QWORD PTR [esi]
	fcomp	QWORD PTR [ebx]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN1270@eval_all

; 226  :            if  (stacktop[0].value < stacktop[1].value) 
; 227  :              stacktop[0] = stacktop[1];

	mov	ecx, 26					; 0000001aH
	mov	edi, ebx
	rep movsd

; 228  :            break;

	jmp	$LN1270@eval_all
$LN1410@eval_all:

; 229  : 
; 230  :       case MINIMUM_NODE:
; 231  :            stacktop--;

	sub	ebx, 104				; 00000068H

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	lea	esi, DWORD PTR [ebx+104]
	fld	QWORD PTR [esi]
	fcomp	QWORD PTR [ebx]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1270@eval_all

; 232  :            if (stacktop[0].value > stacktop[1].value) 
; 233  :              stacktop[0] = stacktop[1];

	mov	ecx, 26					; 0000001aH
	mov	edi, ebx
	rep movsd

; 234  :            break;

	jmp	SHORT $LN1270@eval_all
$LN1409@eval_all:

; 254  : 
; 255  :       case PUSHG_NODE:
; 256  :         (++stacktop)->value = web.gravflag ? web.grav_const : 0.;

	cmp	DWORD PTR _web+824, 0

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	je	SHORT $LN815@eval_all

; 254  : 
; 255  :       case PUSHG_NODE:
; 256  :         (++stacktop)->value = web.gravflag ? web.grav_const : 0.;

	fld	QWORD PTR _web+832
	jmp	$LN743@eval_all
$LN815@eval_all:
	fldz

; 257  :         for ( i = 0 ; i < pcount ; i++ )
; 258  :            stacktop->deriv[i] = 0.0;
; 259  :         break;

	jmp	$LN743@eval_all
$LN1433@eval_all:

; 273  :            }
; 274  :            break;
; 275  : 
; 276  :       case PUSHPARAM_NODE:
; 277  :         (++stacktop)->value = params[node->op1.coordnum];

	mov	eax, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	mov	ecx, DWORD PTR _params$GSCopy$[ebp]
	fld	QWORD PTR [ecx+eax*8]
	mov	edi, DWORD PTR _pcount$[ebp]
	add	ebx, 104				; 00000068H
	xor	eax, eax
	fstp	QWORD PTR [ebx]
	test	edi, edi
	jle	SHORT $LN1698@eval_all

; 273  :            }
; 274  :            break;
; 275  : 
; 276  :       case PUSHPARAM_NODE:
; 277  :         (++stacktop)->value = params[node->op1.coordnum];

	fldz
	lea	ecx, DWORD PTR [ebx+8]
	jmp	SHORT $LN658@eval_all
$LN1444@eval_all:

; 278  :         for ( i = 0 ; i < pcount ; i++ )

	fxch	ST(1)
$LN658@eval_all:

; 279  :              if ( i == node->op1.coordnum )

	cmp	eax, DWORD PTR [esi+32]
	jne	SHORT $LN655@eval_all

; 280  :                 stacktop->deriv[i] = 1.0;

	fxch	ST(1)
	fst	QWORD PTR [ecx]
	jmp	SHORT $LN657@eval_all
$LN655@eval_all:

; 281  :              else stacktop->deriv[i] = 0.0;

	fst	QWORD PTR [ecx]
	fxch	ST(1)
$LN657@eval_all:

; 278  :         for ( i = 0 ; i < pcount ; i++ )

	inc	eax
	add	ecx, 8
	cmp	eax, edi
	jl	SHORT $LN1444@eval_all
$LN1587@eval_all:

; 666  :         y = stacktop[0].value;
; 667  :         x = stacktop[1].value;
; 668  :         stacktop->value = atan2(y,x);
; 669  :         for ( i = 0 ; i < pcount ; i++ )

	fstp	ST(1)
$LN1698@eval_all:

; 1405 :                  for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)
$LN1270@eval_all:

; 1555 :           break;
; 1556 :     }      
; 1557 :     if ( node == ex->root ) break;

	mov	esi, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR _ex$GSCopy$[ebp]
	cmp	esi, DWORD PTR [edx+4]
	jne	$LN1749@eval_all

; 1558 :   }      
; 1559 : 
; 1560 :   *fval = stacktop->value;

	mov	edx, DWORD PTR _fval$GSCopy$[ebp]
	fld	QWORD PTR [ebx]
	fstp	QWORD PTR [edx]

; 1561 :   for ( i = 0 ; i < pcount ; i++ )

	mov	edx, DWORD PTR _pcount$[ebp]
	xor	esi, esi
	cmp	edx, 4
	jl	SHORT $LN1282@eval_all

; 1558 :   }      
; 1559 : 
; 1560 :   *fval = stacktop->value;

	mov	edi, DWORD PTR _partials$GSCopy$[ebp]
	add	edx, -4					; fffffffcH
	lea	ecx, DWORD PTR [edi+24]
	shr	edx, 2

; 1562 :   partials[i] = stacktop->deriv[i]; 

	sub	edi, ebx
	inc	edx
	lea	eax, DWORD PTR [ebx+16]
	lea	esi, DWORD PTR [edx*4]
	npad	5
$LL1242@eval_all:
	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	fstp	QWORD PTR [ecx-24]
	add	ecx, 32					; 00000020H
	dec	edx
	fld	QWORD PTR [eax-32]
	fstp	QWORD PTR [ecx-48]
	fld	QWORD PTR [eax-24]
	fstp	QWORD PTR [eax+edi-32]
	fld	QWORD PTR [eax-16]
	fstp	QWORD PTR [ecx-32]
	jne	SHORT $LL1242@eval_all

; 1558 :   }      
; 1559 : 
; 1560 :   *fval = stacktop->value;

	mov	edx, DWORD PTR _pcount$[ebp]
$LN1282@eval_all:

; 1561 :   for ( i = 0 ; i < pcount ; i++ )

	cmp	esi, edx
	jge	SHORT $LN1240@eval_all
	lea	ebx, DWORD PTR [ebx+esi*8+8]
	npad	3
$LC3@eval_all:

; 1562 :   partials[i] = stacktop->deriv[i]; 

	fld	QWORD PTR [ebx]
	mov	eax, DWORD PTR _partials$GSCopy$[ebp]
	fstp	QWORD PTR [eax+esi*8]
	inc	esi
	add	ebx, 8
	cmp	esi, edx
	jl	SHORT $LC3@eval_all
$LN1240@eval_all:
	pop	edi
	pop	esi
	pop	ebx

; 1563 :   return;
; 1564 : } /* end eval_all() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN1432@eval_all:

; 282  :         break;
; 283  : 
; 284  :       case PARAM_NODE:
; 285  :         if ( node->op1.localnum ) 

	mov	eax, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	test	eax, eax
	je	SHORT $LN652@eval_all

; 286  :            id = *(element_id*)get_localp(node->op1.localnum);

	mov	edx, DWORD PTR _localbase$[ebp]
	mov	ecx, DWORD PTR [edx]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	edx, DWORD PTR [eax+ecx+216]
	imul	edx, 104				; 00000068H
	mov	eax, DWORD PTR _localstack$[ebp+edx]
	jmp	SHORT $LN651@eval_all
$LN652@eval_all:

; 287  :         else id = q_id;

	mov	eax, edx
$LN651@eval_all:

; 288  :         (++stacktop)->value = get_param(id)[node->op2.coordnum];

	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+104
	add	edx, DWORD PTR [eax+edi+544]
	mov	ecx, DWORD PTR [esi+136]
	fld	QWORD PTR [edx+ecx*8]
	add	ebx, 104				; 00000068H

; 289  :         for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	fstp	QWORD PTR [ebx]
	cmp	DWORD PTR _web+616, eax
	jle	$LN1698@eval_all

; 288  :         (++stacktop)->value = get_param(id)[node->op2.coordnum];

	fldz
	lea	ecx, DWORD PTR [ebx+8]
	jmp	SHORT $LN650@eval_all
$LN1460@eval_all:

; 289  :         for ( i = 0 ; i < SDIM ; i++ )

	fxch	ST(1)
$LN650@eval_all:

; 290  :              if ( i == node->op2.coordnum )

	cmp	eax, DWORD PTR [esi+136]
	jne	SHORT $LN647@eval_all

; 291  :                 stacktop->deriv[i] = 1.0;

	fxch	ST(1)
	fst	QWORD PTR [ecx]
	jmp	SHORT $LN649@eval_all
$LN647@eval_all:

; 292  :              else stacktop->deriv[i] = 0.0;

	fst	QWORD PTR [ecx]
	fxch	ST(1)
$LN649@eval_all:

; 289  :         for ( i = 0 ; i < SDIM ; i++ )

	inc	eax
	add	ecx, 8
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN1460@eval_all

; 293  :         break;

	jmp	$LN1587@eval_all
$LN1408@eval_all:

; 358  :   
; 359  :       case DYNAMIC_LOAD_FUNC_NODE:
; 360  :            (*node->op1.funcptr)(FUNC_DERIV,params,(struct dstack*)(++stacktop));

	mov	edx, DWORD PTR _params$GSCopy$[ebp]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	mov	eax, DWORD PTR [esi+32]
	fstp	ST(0)
	add	ebx, 104				; 00000068H
	push	ebx
	push	edx
	push	2
	call	eax
	add	esp, 12					; 0000000cH
	jmp	$LN1270@eval_all
$LN1407@eval_all:

; 361  :            break;
; 362  : 
; 363  :       case USERFUNC_NODE:
; 364  :            stacktop++;
; 365  :            stacktop->value =
; 366  :              (*userfunc_deriv[node->op1.userfunc])(params,stacktop->deriv);

	mov	ecx, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	mov	eax, DWORD PTR _params$GSCopy$[ebp]
	fstp	ST(0)
	mov	ecx, DWORD PTR _userfunc_deriv[ecx*4]
	add	ebx, 104				; 00000068H
	lea	edx, DWORD PTR [ebx+8]
	push	edx
	push	eax
	call	ecx
	fstp	QWORD PTR [ebx]
	add	esp, 8
	jmp	$LN1270@eval_all
$LN1406@eval_all:

; 367  :            break;
; 368  : 
; 369  :       case INDEXED_ELEMENT_NODE:
; 370  :          { element_id partid = *(element_id*)&((stacktop--)->value);

	mov	edi, DWORD PTR [ebx]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	mov	edx, DWORD PTR [esi+32]
	fstp	ST(0)
	push	edi
	push	edx
	sub	ebx, 104				; 00000068H
	call	_get_full_id
	add	esp, 8
	mov	DWORD PTR _id$89650[ebp], eax
	test	eax, 268435456				; 10000000H
	jne	$LN597@eval_all

; 371  :            element_id id;
; 372  :            id = get_full_id(node->op1.eltype,partid);
; 373  :            if ( !valid_id(id) ) 
; 374  :            { sprintf(errmsg,"%s index %d is not valid.\n",
; 375  :                 typenames[node->op1.eltype],
; 376  :                 valid_id(partid) ? (int)(partid & OFFSETMASK)+1 : 0);

	test	edi, 268435456				; 10000000H
	je	SHORT $LN823@eval_all
	and	edi, 134217727				; 07ffffffH
	inc	edi
	jmp	SHORT $LN824@eval_all
$LN823@eval_all:
	xor	edi, edi
$LN824@eval_all:
	mov	eax, DWORD PTR [esi+32]
	mov	ecx, DWORD PTR _typenames[eax*4]
	push	edi
	push	ecx
	push	OFFSET ??_C@_0BL@MACKFC@?$CFs?5index?5?$CFd?5is?5not?5valid?4?6?$AA@
	push	OFFSET _errmsg
	call	_sprintf

; 377  :              sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 378  :                  file_names[node->file_no],node->line_no);

	mov	eax, OFFSET _errmsg
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL1247@eval_all:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1247@eval_all
	mov	ecx, DWORD PTR [esi+16]
	sub	eax, edx
	mov	edx, DWORD PTR [esi+12]
	push	edx
	mov	edx, DWORD PTR _file_names
	mov	ecx, DWORD PTR [edx+ecx*4]
	push	ecx
	lea	edx, DWORD PTR _errmsg[eax]
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	edx
	call	_sprintf

; 379  :              kb_error(1289,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	1289					; 00000509H
	call	_kb_error
	add	esp, 28					; 0000001cH
$LN597@eval_all:

; 380  :            }
; 381  :            *(element_id*)get_localp(node->op2.localnum) = id;

	mov	eax, DWORD PTR [esi+136]
	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _id$89650[ebp]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	eax, DWORD PTR [eax+edx+216]
	imul	eax, 104				; 00000068H
	mov	DWORD PTR _localstack$[ebp+eax], ecx

; 382  :            break;

	jmp	$LN1270@eval_all
$LN1405@eval_all:

; 383  :          }
; 384  : 
; 385  :               /* here are attributes for queries */
; 386  :       case COORD_NODE:
; 387  :       { REAL vect[MAXCOORD];
; 388  :         if ( node->op1.localnum ) 

	mov	eax, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	test	eax, eax
	je	SHORT $LN595@eval_all

; 389  :            id = *(element_id*)get_localp(node->op1.localnum);

	mov	edx, DWORD PTR _localbase$[ebp]
	mov	ecx, DWORD PTR [edx]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	edx, DWORD PTR [eax+ecx+216]
	imul	edx, 104				; 00000068H
	mov	eax, DWORD PTR _localstack$[ebp+edx]
	jmp	SHORT $LN594@eval_all
$LN595@eval_all:

; 390  :         else id = q_id;

	mov	eax, edx
$LN594@eval_all:

; 391  :         switch ( id_type(id) )

	mov	ecx, eax
	shr	ecx, 29					; 0000001dH
	sub	ecx, 0
	je	SHORT $LN591@eval_all
	dec	ecx
	je	SHORT $LN590@eval_all
	dec	ecx
	jne	$LN667@eval_all

; 397  :              (++stacktop)->value = vect[node->op2.coordnum];
; 398  :              break;
; 399  :           case FACET:
; 400  :              get_facet_normal(id,vect);

	lea	ecx, DWORD PTR _vect$89658[ebp]
	push	ecx
	push	eax
	call	_get_facet_normal

; 401  :              (++stacktop)->value = vect[node->op2.coordnum];

	mov	edx, DWORD PTR [esi+136]
	fld	QWORD PTR _vect$89658[ebp+edx*8]
	add	esp, 8

; 402  :              break;

	jmp	$LN743@eval_all
$LN590@eval_all:

; 394  :              break;
; 395  :           case EDGE:
; 396  :              get_edge_side(id,vect);

	lea	ecx, DWORD PTR _vect$89658[ebp]
	push	ecx
	push	eax
	call	_get_edge_side

; 401  :              (++stacktop)->value = vect[node->op2.coordnum];

	mov	edx, DWORD PTR [esi+136]
	fld	QWORD PTR _vect$89658[ebp+edx*8]
	add	esp, 8

; 402  :              break;

	jmp	$LN743@eval_all
$LN591@eval_all:

; 392  :         { case VERTEX:
; 393  :              (++stacktop)->value = get_coord(id)[node->op2.coordnum];

	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+104
	mov	ecx, DWORD PTR [esi+136]
	add	ebx, 104				; 00000068H
	add	edx, DWORD PTR [eax+edi+64]
	fld	QWORD PTR [edx+ecx*8]

; 403  :          }
; 404  :          FIRST = 0.0;
; 405  :         }
; 406  :         break;

	jmp	$LN1746@eval_all
$LN1404@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	fld	QWORD PTR [ebx]
	call	__ftol2_sse
	dec	eax
	mov	DWORD PTR _k$89678[ebp], eax
	js	SHORT $LN583@eval_all

; 407  : 
; 408  :      case INDEXED_COORD_NODE:
; 409  :       { int k = (int)(stacktop->value) - 1;  /* 1 based indexing */
; 410  :         REAL vect[MAXCOORD];
; 411  :         if ( k < 0 || k >= SDIM )

	mov	edx, DWORD PTR _web+616
	cmp	eax, edx
	jl	$LN1283@eval_all
$LN583@eval_all:

; 412  :         { sprintf(errmsg,
; 413  :          "Invalid index %d for x in %s; must be between 1 and %d, inclusive.\n",
; 414  :             k+1,ex->name,SDIM);

	mov	eax, DWORD PTR _web+616
	mov	ecx, DWORD PTR _ex$GSCopy$[ebp]
	mov	edx, DWORD PTR _k$89678[ebp]
	push	eax
	add	ecx, 20					; 00000014H
	push	ecx
	inc	edx
	push	edx
	push	OFFSET ??_C@_0EE@NBEFOKMP@Invalid?5index?5?$CFd?5for?5x?5in?5?$CFs?$DL?5mu@
	push	OFFSET _errmsg
	call	_sprintf

; 415  :           sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 416  :                  file_names[node->file_no],node->line_no);

	mov	eax, OFFSET _errmsg
	add	esp, 20					; 00000014H
	lea	edi, DWORD PTR [eax+1]
	npad	1
$LL1248@eval_all:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1248@eval_all
	mov	ecx, DWORD PTR [esi+12]
	mov	edx, DWORD PTR [esi+16]
	push	ecx
	mov	ecx, DWORD PTR _file_names
	mov	edx, DWORD PTR [ecx+edx*4]
	push	edx
	sub	eax, edi
	lea	eax, DWORD PTR _errmsg[eax]
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	eax
	call	_sprintf

; 417  :           kb_error(2046,errmsg,RECOVERABLE );

	push	1
	push	OFFSET _errmsg
	push	2046					; 000007feH
	call	_kb_error
	mov	edi, DWORD PTR _dymem
	add	esp, 28					; 0000001cH
$LN1283@eval_all:

; 418  :         }
; 419  :         if ( node->op1.localnum ) 

	mov	eax, DWORD PTR [esi+32]
	test	eax, eax
	je	SHORT $LN582@eval_all

; 420  :            id = *(element_id*)get_localp(node->op1.localnum);

	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	eax, DWORD PTR [eax+edx+216]
	imul	eax, 104				; 00000068H
	mov	eax, DWORD PTR _localstack$[ebp+eax]
	jmp	SHORT $LN581@eval_all
$LN582@eval_all:

; 421  :         else id = q_id;

	mov	eax, DWORD PTR _q_id$[ebp]
$LN581@eval_all:

; 422  :         switch( id_type(id) )

	mov	ecx, eax
	shr	ecx, 29					; 0000001dH
	mov	edx, ecx
	sub	edx, 0
	je	$LN578@eval_all
	dec	edx
	je	$LN577@eval_all
	dec	edx
	je	$LN576@eval_all

; 434  :           default: 
; 435  :              sprintf(errmsg,"Can't have indexed x on %s, in %s.\n",
; 436  :                typenames[id_type(id)], ex->name);

	mov	edx, DWORD PTR _ex$GSCopy$[ebp]
	mov	eax, DWORD PTR _typenames[ecx*4]
	add	edx, 20					; 00000014H
	push	edx
	push	eax
	push	OFFSET ??_C@_0CE@JGNMBEAC@Can?8t?5have?5indexed?5x?5on?5?$CFs?0?5in?5?$CF@
	push	OFFSET _errmsg
	call	_sprintf

; 437  :              sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 438  :                  file_names[node->file_no],node->line_no);

	mov	eax, OFFSET _errmsg
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	1
$LL1249@eval_all:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1249@eval_all
	mov	ecx, DWORD PTR [esi+12]
	push	ecx
	mov	ecx, DWORD PTR _file_names
	sub	eax, edx
	mov	edx, DWORD PTR [esi+16]
	mov	edx, DWORD PTR [ecx+edx*4]
	push	edx
	lea	eax, DWORD PTR _errmsg[eax]
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	eax
	call	_sprintf

; 439  :              kb_error(2054,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2054					; 00000806H
	call	_kb_error
	add	esp, 28					; 0000001cH
	jmp	$LN667@eval_all
$LN576@eval_all:

; 430  :           case FACET:
; 431  :              get_facet_normal(id,vect);

	lea	ecx, DWORD PTR _vect$89680[ebp]
	push	ecx
	push	eax
	call	_get_facet_normal

; 432  :              stacktop->value = vect[k];

	mov	edx, DWORD PTR _k$89678[ebp]
	fld	QWORD PTR _vect$89680[ebp+edx*8]
	add	esp, 8

; 433  :              break;

	jmp	$LN1746@eval_all
$LN577@eval_all:

; 425  :              break;
; 426  :           case EDGE:
; 427  :              get_edge_side(id,vect);

	lea	ecx, DWORD PTR _vect$89680[ebp]
	push	ecx
	push	eax
	call	_get_edge_side

; 428  :              stacktop->value = vect[k];

	mov	edx, DWORD PTR _k$89678[ebp]
	fld	QWORD PTR _vect$89680[ebp+edx*8]
	add	esp, 8

; 429  :              break;

	jmp	$LN1746@eval_all
$LN578@eval_all:

; 423  :          { case VERTEX:
; 424  :              stacktop->value = get_coord(id)[k];

	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+104
	add	edx, DWORD PTR [eax+edi+64]
	mov	ecx, DWORD PTR _k$89678[ebp]
	fld	QWORD PTR [edx+ecx*8]

; 440  :          }
; 441  :          FIRST = 0.0;
; 442  :        }
; 443  :        break;

	jmp	$LN1746@eval_all
$LN1403@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	fld	QWORD PTR [ebx]
	call	__ftol2_sse
	mov	edx, DWORD PTR [esi+4]
	imul	edx, 168				; 000000a8H
	mov	ecx, DWORD PTR [edx+esi+136]
	dec	eax
	sub	ebx, 104				; 00000068H
	test	ecx, ecx
	je	SHORT $LN825@eval_all

; 444  : 
; 445  :       case QUALIFIED_ATTRIBUTE_NODE:
; 446  :          break; /* just a no-op in execution */
; 447  : 
; 448  :       case INDEXED_SUBTYPE_NODE:  /* like ee.vertex[1] */
; 449  :         { element_id next_id;
; 450  :           int ord = (int)((stacktop--)->value) - 1;  /* which one */
; 451  :           element_id parent = node[node->left].op2.localnum ?
; 452  :             *(element_id*)get_localp(node[node->left].op2.localnum) : q_id;

	mov	edx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [edx]
	and	ecx, 16777215				; 00ffffffH
	imul	ecx, 224				; 000000e0H
	mov	ecx, DWORD PTR [ecx+edx+216]
	imul	ecx, 104				; 00000068H
	mov	ecx, DWORD PTR _localstack$[ebp+ecx]
	jmp	SHORT $LN826@eval_all
$LN825@eval_all:
	mov	ecx, DWORD PTR _q_id$[ebp]
$LN826@eval_all:

; 453  :           next_id = get_indexed_subtype(node,ord,parent,ex);

	mov	edx, DWORD PTR _ex$GSCopy$[ebp]
	push	edx
	push	ecx
	push	eax
	push	esi
	call	_get_indexed_subtype

; 454  :           *(element_id*)get_localp(node->op2.localnum) = next_id;

	mov	ecx, DWORD PTR [esi+136]
	mov	edx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [edx]
	and	ecx, 16777215				; 00ffffffH
	imul	ecx, 224				; 000000e0H
	mov	ecx, DWORD PTR [ecx+edx+216]
	add	esp, 16					; 00000010H
	imul	ecx, 104				; 00000068H
	mov	DWORD PTR _localstack$[ebp+ecx], eax

; 455  :         } break;  /* end INDEXED_SUBTYPE */

	jmp	$LN1270@eval_all
$LN1402@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	sub	ebx, 104				; 00000068H
	fstp	ST(0)
	mov	DWORD PTR tv1091[ebp], 1
	fld	QWORD PTR [ebx+104]
	fcomp	QWORD PTR [ebx]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN828@eval_all

; 456  : 
; 457  : 
; 458  : /* need logical expressions for conditional expressions */
; 459  : 
; 460  :       case GT_NODE:
; 461  :            stacktop--;
; 462  :            stacktop[0].value = (REAL)(stacktop[0].value > stacktop[1].value);

	mov	DWORD PTR tv1091[ebp], 0
$LN828@eval_all:
	fild	DWORD PTR tv1091[ebp]

; 463  :            FIRST = 0.0;
; 464  :            break;

	jmp	$LN1746@eval_all
$LN1401@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	sub	ebx, 104				; 00000068H
	fstp	ST(0)
	mov	DWORD PTR tv1102[ebp], 1
	fld	QWORD PTR [ebx+104]
	fcomp	QWORD PTR [ebx]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN830@eval_all

; 465  : 
; 466  :       case LT_NODE:
; 467  :            stacktop--;
; 468  :            stacktop[0].value = (REAL)(stacktop[0].value < stacktop[1].value);

	mov	DWORD PTR tv1102[ebp], 0
$LN830@eval_all:
	fild	DWORD PTR tv1102[ebp]

; 469  :            FIRST = 0.0;
; 470  :            break;

	jmp	$LN1746@eval_all
$LN1400@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	sub	ebx, 104				; 00000068H
	fstp	ST(0)
	mov	DWORD PTR tv1113[ebp], 1
	fld	QWORD PTR [ebx+104]
	fcomp	QWORD PTR [ebx]
	fnstsw	ax
	test	ah, 1
	je	SHORT $LN832@eval_all

; 471  : 
; 472  :       case LE_NODE:
; 473  :            stacktop--;
; 474  :            stacktop[0].value = (REAL)(stacktop[0].value <= stacktop[1].value);

	mov	DWORD PTR tv1113[ebp], 0
$LN832@eval_all:
	fild	DWORD PTR tv1113[ebp]

; 475  :            FIRST = 0.0;
; 476  :            break;

	jmp	$LN1746@eval_all
$LN1399@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	sub	ebx, 104				; 00000068H
	fstp	ST(0)
	mov	DWORD PTR tv1124[ebp], 1
	fld	QWORD PTR [ebx+104]
	fcomp	QWORD PTR [ebx]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jnp	SHORT $LN834@eval_all

; 477  : 
; 478  :       case GE_NODE:
; 479  :            stacktop--;
; 480  :            stacktop[0].value = (REAL)(stacktop[0].value >= stacktop[1].value);

	mov	DWORD PTR tv1124[ebp], 0
$LN834@eval_all:
	fild	DWORD PTR tv1124[ebp]

; 481  :            FIRST = 0.0;
; 482  :            break;

	jmp	$LN1746@eval_all
$LN1398@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	sub	ebx, 104				; 00000068H
	fstp	ST(0)
	mov	DWORD PTR tv1135[ebp], 1
	fld	QWORD PTR [ebx]
	fld	QWORD PTR [ebx+104]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN836@eval_all

; 483  : 
; 484  :       case NE_NODE:
; 485  :            stacktop--;
; 486  :            stacktop[0].value = (REAL)(stacktop[0].value != stacktop[1].value);

	mov	DWORD PTR tv1135[ebp], 0
$LN836@eval_all:
	fild	DWORD PTR tv1135[ebp]

; 487  :            FIRST = 0.0;
; 488  :            break;

	jmp	$LN1746@eval_all
$LN1397@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	sub	ebx, 104				; 00000068H
	fstp	ST(0)
	mov	DWORD PTR tv1146[ebp], 1
	fld	QWORD PTR [ebx]
	fld	QWORD PTR [ebx+104]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN838@eval_all

; 489  : 
; 490  :       case EQ_NODE:
; 491  :            stacktop--;
; 492  :            stacktop[0].value = (REAL)(stacktop[0].value == stacktop[1].value);

	mov	DWORD PTR tv1146[ebp], 0
$LN838@eval_all:
	fild	DWORD PTR tv1146[ebp]

; 493  :            FIRST = 0.0;
; 494  :            break;

	jmp	$LN1746@eval_all
$LN1396@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	fld	QWORD PTR [ebx]
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	$LN1698@eval_all

; 499  :              FIRST = 0.0;

	add	ebx, 104				; 00000068H
	cmp	DWORD PTR _pcount$[ebp], 0
	fstp	QWORD PTR [ebx]
	jle	SHORT $LN543@eval_all

; 495  : 
; 496  :       case AND_NODE: /* short-circuit */
; 497  :        if ( stacktop->value == 0.0 )
; 498  :        { (++stacktop)->value = 0.0;

	mov	ecx, DWORD PTR _pcount$[ebp]
	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	lea	edi, DWORD PTR [ebx+8]
	xor	eax, eax
	rep stosd
$LN543@eval_all:

; 500  :              node += node->op1.skipsize;

	mov	edx, DWORD PTR [esi+32]
	imul	edx, 168				; 000000a8H
	add	esi, edx
	mov	DWORD PTR _node$[ebp], esi

; 501  :        } 
; 502  :            break;

	jmp	$LN1270@eval_all
$LN1431@eval_all:

; 503  : 
; 504  :       case CONJUNCTION_END_NODE: 
; 505  :        /* short-circuiting results in second arg being answer */
; 506  :        stacktop--;

	sub	ebx, 104				; 00000068H

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	lea	esi, DWORD PTR [ebx+104]
	mov	ecx, 26					; 0000001aH
	mov	edi, ebx
	rep movsd
	fld	QWORD PTR [ebx]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN1698@eval_all

; 507  :        *stacktop = stacktop[1];
; 508  :            if ( stacktop->value != 0.0 ) 
; 509  :              stacktop->value = 1.0;

	fstp	QWORD PTR [ebx]

; 510  :        break;

	jmp	$LN1270@eval_all
$LN1430@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fld	QWORD PTR [ebx]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN1698@eval_all

; 515  :              FIRST = 0.0;

	add	ebx, 104				; 00000068H
	cmp	DWORD PTR _pcount$[ebp], 0
	fstp	QWORD PTR [ebx]
	jle	SHORT $LN536@eval_all

; 511  : 
; 512  :       case OR_NODE:
; 513  :        if ( stacktop->value != 0.0 )
; 514  :        { (++stacktop)->value = 1.0;

	mov	ecx, DWORD PTR _pcount$[ebp]
	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	lea	edi, DWORD PTR [ebx+8]
	xor	eax, eax
	rep stosd
$LN536@eval_all:

; 516  :              node += node->op1.skipsize;

	mov	eax, DWORD PTR [esi+32]
	imul	eax, 168				; 000000a8H
	add	esi, eax
	mov	DWORD PTR _node$[ebp], esi

; 517  :        } 
; 518  :            break;

	jmp	$LN1270@eval_all
$LN1395@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	mov	DWORD PTR tv1178[ebp], 1
	fstp	ST(0)
	fld	QWORD PTR [ebx]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN840@eval_all

; 519  : 
; 520  :       case NOT_NODE:
; 521  :            stacktop[0].value = (REAL)(!stacktop[0].value);

	mov	DWORD PTR tv1178[ebp], 0
$LN840@eval_all:
	fild	DWORD PTR tv1178[ebp]

; 522  :            FIRST = 0.0;
; 523  :            break;

	jmp	$LN1746@eval_all
$LN1394@eval_all:

; 527  :            stacktop[0].value += stacktop[1].value;
; 528  :            for ( i = 0 ; i < pcount ; i++ )

	mov	esi, DWORD PTR _pcount$[ebp]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	sub	ebx, 104				; 00000068H
	fstp	ST(0)
	fld	QWORD PTR [ebx+104]
	xor	edx, edx
	fadd	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]
	cmp	esi, 4
	jl	SHORT $LN1293@eval_all

; 524  : 
; 525  :       case PLUS_NODE:
; 526  :            stacktop--;

	lea	ecx, DWORD PTR [esi-4]
	shr	ecx, 2
	inc	ecx
	lea	eax, DWORD PTR [ebx+8]
	lea	edx, DWORD PTR [ecx*4]

; 527  :            stacktop[0].value += stacktop[1].value;
; 528  :            for ( i = 0 ; i < pcount ; i++ )

$LL1155@eval_all:

; 529  :               stacktop[0].deriv[i] += stacktop[1].deriv[i];

	fld	QWORD PTR [eax+104]
	add	eax, 32					; 00000020H
	dec	ecx
	fadd	QWORD PTR [eax-32]
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [eax+80]
	fadd	QWORD PTR [eax-24]
	fstp	QWORD PTR [eax-24]
	fld	QWORD PTR [eax+88]
	fadd	QWORD PTR [eax-16]
	fstp	QWORD PTR [eax-16]
	fld	QWORD PTR [eax+96]
	fadd	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LL1155@eval_all
$LN1293@eval_all:

; 527  :            stacktop[0].value += stacktop[1].value;
; 528  :            for ( i = 0 ; i < pcount ; i++ )

	cmp	edx, esi
	jge	$LN1270@eval_all
	mov	ecx, esi
	lea	eax, DWORD PTR [ebx+edx*8+8]
	sub	ecx, edx
	npad	2
$LC528@eval_all:

; 529  :               stacktop[0].deriv[i] += stacktop[1].deriv[i];

	fld	QWORD PTR [eax+104]
	add	eax, 8
	dec	ecx
	fadd	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC528@eval_all

; 530  :            break;

	jmp	$LN1270@eval_all
$LN1393@eval_all:

; 535  :            stacktop[0].value -= stacktop[1].value;
; 536  :            for ( i = 0 ; i < pcount ; i++ )

	mov	esi, DWORD PTR _pcount$[ebp]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	sub	ebx, 104				; 00000068H
	fstp	ST(0)
	fld	QWORD PTR [ebx]
	xor	edx, edx
	fsub	QWORD PTR [ebx+104]
	fstp	QWORD PTR [ebx]
	cmp	esi, 4
	jl	SHORT $LN1294@eval_all

; 531  : 
; 532  :       case MINUS_NODE:
; 533  :       case EQUATE_NODE:
; 534  :            stacktop--;

	lea	ecx, DWORD PTR [esi-4]
	shr	ecx, 2
	inc	ecx
	lea	eax, DWORD PTR [ebx+8]
	lea	edx, DWORD PTR [ecx*4]
	npad	3

; 535  :            stacktop[0].value -= stacktop[1].value;
; 536  :            for ( i = 0 ; i < pcount ; i++ )

$LL1158@eval_all:

; 537  :               stacktop[0].deriv[i] -= stacktop[1].deriv[i];

	fld	QWORD PTR [eax]
	add	eax, 32					; 00000020H
	dec	ecx
	fsub	QWORD PTR [eax+72]
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [eax-24]
	fsub	QWORD PTR [eax+80]
	fstp	QWORD PTR [eax-24]
	fld	QWORD PTR [eax-16]
	fsub	QWORD PTR [eax+88]
	fstp	QWORD PTR [eax-16]
	fld	QWORD PTR [eax-8]
	fsub	QWORD PTR [eax+96]
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LL1158@eval_all
$LN1294@eval_all:

; 535  :            stacktop[0].value -= stacktop[1].value;
; 536  :            for ( i = 0 ; i < pcount ; i++ )

	cmp	edx, esi
	jge	$LN1270@eval_all
	mov	ecx, esi
	lea	eax, DWORD PTR [ebx+edx*8+8]
	sub	ecx, edx
	npad	7
$LC524@eval_all:

; 537  :               stacktop[0].deriv[i] -= stacktop[1].deriv[i];

	fld	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax+96]
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC524@eval_all

; 538  :            break;

	jmp	$LN1270@eval_all
$LN1392@eval_all:

; 542  :            for ( i = 0 ; i < pcount ; i++ )

	mov	esi, DWORD PTR _pcount$[ebp]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	sub	ebx, 104				; 00000068H
	fstp	ST(0)
	xor	edx, edx
	cmp	esi, 4
	jl	SHORT $LN1295@eval_all

; 539  : 
; 540  :       case TIMES_NODE:
; 541  :            stacktop--;

	lea	ecx, DWORD PTR [esi-4]
	shr	ecx, 2
	inc	ecx
	lea	eax, DWORD PTR [ebx+8]
	lea	edx, DWORD PTR [ecx*4]

; 542  :            for ( i = 0 ; i < pcount ; i++ )

$LL1161@eval_all:

; 543  :               stacktop[0].deriv[i] = stacktop[1].value*stacktop[0].deriv[i]
; 544  :                         + stacktop[0].value*stacktop[1].deriv[i];

	fld	QWORD PTR [eax+104]
	add	eax, 32					; 00000020H
	dec	ecx
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [ebx+104]
	fmul	QWORD PTR [eax-32]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [eax+80]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [ebx+104]
	fmul	QWORD PTR [eax-24]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [eax-24]
	fld	QWORD PTR [eax+88]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [ebx+104]
	fmul	QWORD PTR [eax-16]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [eax-16]
	fld	QWORD PTR [eax+96]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [eax-8]
	fmul	QWORD PTR [ebx+104]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LL1161@eval_all
$LN1295@eval_all:

; 542  :            for ( i = 0 ; i < pcount ; i++ )

	cmp	edx, esi
	jge	SHORT $LN1159@eval_all
	mov	ecx, esi
	lea	eax, DWORD PTR [ebx+edx*8+8]
	sub	ecx, edx
$LC520@eval_all:

; 543  :               stacktop[0].deriv[i] = stacktop[1].value*stacktop[0].deriv[i]
; 544  :                         + stacktop[0].value*stacktop[1].deriv[i];

	fld	QWORD PTR [eax+104]
	add	eax, 8
	dec	ecx
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [eax-8]
	fmul	QWORD PTR [ebx+104]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC520@eval_all
$LN1159@eval_all:

; 545  :            stacktop[0].value *= stacktop[1].value;

	fld	QWORD PTR [ebx+104]
	fmul	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]

; 546  :            break;

	jmp	$LN1270@eval_all
$LN1391@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	sub	ebx, 104				; 00000068H
	fstp	ST(0)
	fld	QWORD PTR [ebx+104]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1296@eval_all

; 547  : 
; 548  :       case DIVIDE_NODE:
; 549  :            stacktop--;
; 550  :            if ( stacktop[1].value == 0.0 )
; 551  :            { sprintf(errmsg,"Divide by zero.\n");

	push	OFFSET ??_C@_0BB@EKEAJAJD@Divide?5by?5zero?4?6?$AA@
	push	OFFSET _errmsg
	call	_sprintf

; 552  :              sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 553  :                  file_names[node->file_no],node->line_no);

	mov	eax, OFFSET _errmsg
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1250@eval_all:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1250@eval_all
	mov	ecx, DWORD PTR [esi+12]
	push	ecx
	mov	ecx, DWORD PTR _file_names
	sub	eax, edx
	mov	edx, DWORD PTR [esi+16]
	mov	edx, DWORD PTR [ecx+edx*4]
	push	edx
	lea	eax, DWORD PTR _errmsg[eax]
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	eax
	call	_sprintf

; 554  :              kb_error(1019,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	1019					; 000003fbH
	call	_kb_error
	add	esp, 28					; 0000001cH
$LN1296@eval_all:

; 555  :            }
; 556  : 
; 557  :            for ( i = 0 ; i < pcount ; i++ )

	mov	esi, DWORD PTR _pcount$[ebp]
	xor	edx, edx
	cmp	esi, 4
	jl	$LN1316@eval_all
	lea	ecx, DWORD PTR [esi-4]
	shr	ecx, 2
	inc	ecx
	lea	eax, DWORD PTR [ebx+8]
	lea	edx, DWORD PTR [ecx*4]
$LL1164@eval_all:

; 558  :               stacktop[0].deriv[i] = (stacktop[1].value*stacktop[0].deriv[i]
; 559  :                         - stacktop[0].value*stacktop[1].deriv[i])
; 560  :                         /stacktop[1].value/stacktop[1].value;

	fld	QWORD PTR [eax]
	add	eax, 32					; 00000020H
	dec	ecx
	fmul	QWORD PTR [ebx+104]
	fld	QWORD PTR [eax+72]
	fmul	QWORD PTR [ebx]
	fsubp	ST(1), ST(0)
	fdiv	QWORD PTR [ebx+104]
	fdiv	QWORD PTR [ebx+104]
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [eax-24]
	fmul	QWORD PTR [ebx+104]
	fld	QWORD PTR [eax+80]
	fmul	QWORD PTR [ebx]
	fsubp	ST(1), ST(0)
	fdiv	QWORD PTR [ebx+104]
	fdiv	QWORD PTR [ebx+104]
	fstp	QWORD PTR [eax-24]
	fld	QWORD PTR [ebx+104]
	fmul	QWORD PTR [eax-16]
	fld	QWORD PTR [eax+88]
	fmul	QWORD PTR [ebx]
	fsubp	ST(1), ST(0)
	fdiv	QWORD PTR [ebx+104]
	fdiv	QWORD PTR [ebx+104]
	fstp	QWORD PTR [eax-16]
	fld	QWORD PTR [ebx+104]
	fmul	QWORD PTR [eax-8]
	fld	QWORD PTR [eax+96]
	fmul	QWORD PTR [ebx]
	fsubp	ST(1), ST(0)
	fdiv	QWORD PTR [ebx+104]
	fdiv	QWORD PTR [ebx+104]
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LL1164@eval_all
$LN1316@eval_all:

; 555  :            }
; 556  : 
; 557  :            for ( i = 0 ; i < pcount ; i++ )

	cmp	edx, esi
	jge	SHORT $LN1162@eval_all
	mov	ecx, esi
	lea	eax, DWORD PTR [ebx+edx*8+8]
	sub	ecx, edx
	npad	1
$LC515@eval_all:

; 558  :               stacktop[0].deriv[i] = (stacktop[1].value*stacktop[0].deriv[i]
; 559  :                         - stacktop[0].value*stacktop[1].deriv[i])
; 560  :                         /stacktop[1].value/stacktop[1].value;

	fld	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fmul	QWORD PTR [ebx+104]
	fld	QWORD PTR [eax+96]
	fmul	QWORD PTR [ebx]
	fsubp	ST(1), ST(0)
	fdiv	QWORD PTR [ebx+104]
	fdiv	QWORD PTR [ebx+104]
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC515@eval_all
$LN1162@eval_all:

; 561  :            stacktop[0].value /= stacktop[1].value;

	fld	QWORD PTR [ebx]
	fdiv	QWORD PTR [ebx+104]
	fstp	QWORD PTR [ebx]

; 562  :            break;

	jmp	$LN1270@eval_all
$LN1390@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	sub	ebx, 104				; 00000068H
	fstp	ST(0)
	fld	QWORD PTR [ebx+104]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN511@eval_all

; 563  : 
; 564  :       case REALMOD_NODE:
; 565  :            stacktop--;
; 566  :            if ( stacktop[1].value == 0.0 )
; 567  :            { sprintf(errmsg,"Modulus base zero.\n");

	push	OFFSET ??_C@_0BE@DGKEPBMO@Modulus?5base?5zero?4?6?$AA@
	push	OFFSET _errmsg
	call	_sprintf

; 568  :              sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 569  :                  file_names[node->file_no],node->line_no);

	mov	eax, OFFSET _errmsg
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1251@eval_all:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1251@eval_all
	mov	ecx, DWORD PTR [esi+12]
	push	ecx
	mov	ecx, DWORD PTR _file_names
	sub	eax, edx
	mov	edx, DWORD PTR [esi+16]
	mov	edx, DWORD PTR [ecx+edx*4]
	push	edx
	lea	eax, DWORD PTR _errmsg[eax]
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	eax
	call	_sprintf

; 570  :              kb_error(1020,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	1020					; 000003fcH
	call	_kb_error
	add	esp, 28					; 0000001cH
$LN511@eval_all:

; 571  :            }
; 572  : 
; 573  :            for ( i = 0 ; i < pcount ; i++ )

	mov	edi, DWORD PTR _pcount$[ebp]
	test	edi, edi
	jle	SHORT $LN508@eval_all
	lea	esi, DWORD PTR [ebx+8]
	npad	1
$LL510@eval_all:

; 574  :               stacktop[0].deriv[i] = stacktop[0].deriv[i]
; 575  :                         -  floor(stacktop[0].value/stacktop[1].value)
; 576  :                                     *stacktop[1].deriv[i];

	fld	QWORD PTR [ebx]
	sub	esp, 8
	fdiv	QWORD PTR [ebx+104]
	fstp	QWORD PTR [esp]
	call	_floor
	fmul	QWORD PTR [esi+104]
	add	esp, 8
	add	esi, 8
	dec	edi
	fsubr	QWORD PTR [esi-8]
	fstp	QWORD PTR [esi-8]
	jne	SHORT $LL510@eval_all
$LN508@eval_all:

; 577  :            stacktop[0].value -= floor(stacktop[0].value/stacktop[1].value)
; 578  :                                            *stacktop[1].value;

	fld	QWORD PTR [ebx]
	sub	esp, 8
	fst	QWORD PTR tv10607[ebp]
	fdiv	QWORD PTR [ebx+104]
	fstp	QWORD PTR [esp]
	call	_floor
	fmul	QWORD PTR [ebx+104]
	add	esp, 8
	fsubr	QWORD PTR tv10607[ebp]
	fstp	QWORD PTR [ebx]

; 579  :            break;

	jmp	$LN1270@eval_all
$LN1389@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	sub	ebx, 104				; 00000068H
	fstp	ST(0)
	fld	QWORD PTR [ebx+104]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN506@eval_all

; 580  : 
; 581  :       case IMOD_NODE:
; 582  :            stacktop--;
; 583  :            if ( stacktop[1].value == 0.0 ) 
; 584  :              kb_error(1021,"Modulus base zero.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0BE@DGKEPBMO@Modulus?5base?5zero?4?6?$AA@
	push	1021					; 000003fdH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN506@eval_all:

; 585  : 
; 586  :            stacktop[0].value = floor(stacktop[0].value) - 
; 587  :                floor(floor(stacktop[0].value)/floor(stacktop[1].value))
; 588  :                                                  *floor(stacktop[1].value);

	fld	QWORD PTR [ebx]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_floor
	fstp	QWORD PTR tv10621[ebp]
	fld	QWORD PTR [ebx+104]
	fstp	QWORD PTR [esp]
	call	_floor
	fst	QWORD PTR tv10622[ebp]
	fdivr	QWORD PTR tv10621[ebp]
	fstp	QWORD PTR [esp]
	call	_floor
	fmul	QWORD PTR tv10622[ebp]
	add	esp, 8
	fsubr	QWORD PTR tv10621[ebp]

; 589  :            for ( i = 0 ; i < pcount ; i++ )
; 590  :               stacktop[0].deriv[i] = 0.0; 
; 591  :            break;

	jmp	$LN1746@eval_all
$LN1388@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	sub	ebx, 104				; 00000068H
	fstp	ST(0)
	fld	QWORD PTR [ebx+104]
	call	__ftol2_sse
	test	eax, eax
	jne	SHORT $LN501@eval_all

; 592  : 
; 593  :       case IDIV_NODE:
; 594  :            stacktop--;
; 595  :            if ( (int)stacktop[1].value == 0 ) 
; 596  :              kb_error(1022,"Division by zero.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0BD@KKBNAHFA@Division?5by?5zero?4?6?$AA@
	push	1022					; 000003feH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN501@eval_all:

; 597  :            stacktop[0].value = 
; 598  :                (REAL)((int)(stacktop[0].value)/(int)(stacktop[1].value));

	fld	QWORD PTR [ebx+104]
	call	__ftol2_sse
	fld	QWORD PTR [ebx]
	mov	esi, eax
	call	__ftol2_sse
	cdq
	idiv	esi
	mov	DWORD PTR tv25164[ebp], eax
	fild	DWORD PTR tv25164[ebp]

; 599  :            for ( i = 0 ; i < pcount ; i++ )
; 600  :              stacktop[0].deriv[i] = 0.0; 
; 601  :            break;

	jmp	$LN1746@eval_all
$LN1429@eval_all:

; 602  : 
; 603  :       case INTPOW_NODE:
; 604  :          if ( node->op1.intpow == 0 )

	mov	ecx, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	test	ecx, ecx
	je	$LN1746@eval_all

; 605  :            { stacktop->value = 1.0;
; 606  :              for ( i = 0 ; i < pcount ; i++ )
; 607  :                 stacktop->deriv[i] = 0.0;
; 608  :            }
; 609  :          else if ( node->op1.intpow == 1 )

	fstp	ST(0)
	cmp	ecx, 1
	je	$LN1270@eval_all

; 610  :            { /* no action necessary */
; 611  :            }
; 612  :          else
; 613  :            { x = stacktop->value;

	fld	QWORD PTR [ebx]
	fst	QWORD PTR _x$[ebp]

; 614  :              if ( node->op1.intpow > 1 ) /* get n-1 power first */ 

	jle	SHORT $LN489@eval_all

; 615  :                 for ( n = 1 ; n < node->op1.intpow-1 ; n++ )

	mov	eax, 1
	dec	ecx
	cmp	ecx, eax
	jle	$LN1284@eval_all
$LN488@eval_all:

; 616  :                    stacktop->value *= x;

	fld	ST(0)
	inc	eax
	fmul	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]
	mov	ecx, DWORD PTR [esi+32]
	dec	ecx
	cmp	eax, ecx
	jl	SHORT $LN488@eval_all

; 617  :              else if ( node->op1.intpow < 0 ) 

	jmp	SHORT $LN1284@eval_all
$LN489@eval_all:
	test	ecx, ecx
	jns	SHORT $LN1284@eval_all

; 618  :              { if ( x == 0.0 ) 

	fld	ST(0)
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN483@eval_all

; 619  :                 { sprintf(errmsg,"Negative power (%d) of zero.\n",node->op1.intpow);

	push	ecx
	fstp	ST(0)
	push	OFFSET ??_C@_0BO@EHPMEHID@Negative?5power?5?$CI?$CFd?$CJ?5of?5zero?4?6?$AA@
	push	OFFSET _errmsg
	call	_sprintf

; 620  :                    kb_error(1023,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	1023					; 000003ffH
	call	_kb_error
	fld	QWORD PTR _x$[ebp]
	add	esp, 24					; 00000018H
$LN483@eval_all:

; 621  :                 }
; 622  :                 stacktop->value = 1/x;

	fld1

; 623  :                 for ( n = 0 ; n < -node->op1.intpow ; n++ )

	xor	eax, eax
	fdiv	ST(0), ST(1)
	fst	QWORD PTR [ebx]
	mov	edx, DWORD PTR [esi+32]
	neg	edx
	test	edx, edx
	jle	SHORT $LN1578@eval_all
$LN482@eval_all:

; 624  :                    stacktop->value *= 1/x;

	fld	ST(0)
	inc	eax
	fmul	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]
	mov	ecx, DWORD PTR [esi+32]
	neg	ecx
	cmp	eax, ecx
	jl	SHORT $LN482@eval_all
$LN1578@eval_all:

; 623  :                 for ( n = 0 ; n < -node->op1.intpow ; n++ )

	fstp	ST(0)
$LN1284@eval_all:

; 625  :              }
; 626  :              for ( i = 0 ; i < pcount ; i++ )

	mov	edi, DWORD PTR _pcount$[ebp]
	xor	edx, edx
	cmp	edi, 4
	jl	SHORT $LN1297@eval_all
	lea	ecx, DWORD PTR [edi-4]
	shr	ecx, 2
	inc	ecx
	lea	eax, DWORD PTR [ebx+16]
	lea	edx, DWORD PTR [ecx*4]
$LN1167@eval_all:

; 627  :                 stacktop->deriv[i] = 
; 628  :                     node->op1.intpow*stacktop->value*stacktop->deriv[i];

	fild	DWORD PTR [esi+32]
	add	eax, 32					; 00000020H
	dec	ecx
	fmul	QWORD PTR [ebx]
	fmul	QWORD PTR [eax-40]
	fstp	QWORD PTR [eax-40]
	fild	DWORD PTR [esi+32]
	fmul	QWORD PTR [ebx]
	fmul	QWORD PTR [eax-32]
	fstp	QWORD PTR [eax-32]
	fild	DWORD PTR [esi+32]
	fmul	QWORD PTR [ebx]
	fmul	QWORD PTR [eax-24]
	fstp	QWORD PTR [eax-24]
	fild	DWORD PTR [esi+32]
	fmul	QWORD PTR [ebx]
	fmul	QWORD PTR [eax-16]
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LN1167@eval_all
$LN1297@eval_all:

; 625  :              }
; 626  :              for ( i = 0 ; i < pcount ; i++ )

	cmp	edx, edi
	jge	SHORT $LN1165@eval_all
	mov	ecx, edi
	lea	eax, DWORD PTR [ebx+edx*8+8]
	sub	ecx, edx
$LC479@eval_all:

; 627  :                 stacktop->deriv[i] = 
; 628  :                     node->op1.intpow*stacktop->value*stacktop->deriv[i];

	fild	DWORD PTR [esi+32]
	add	eax, 8
	dec	ecx
	fmul	QWORD PTR [ebx]
	fmul	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC479@eval_all
$LN1165@eval_all:

; 629  :              stacktop->value *= x;

	fmul	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]

; 630  :            }
; 631  :            break;

	jmp	$LN1270@eval_all
$LN1428@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	sub	ebx, 104				; 00000068H
	fld	QWORD PTR [ebx]
	fst	QWORD PTR _x$[ebp]
	fld	QWORD PTR [ebx+104]
	fst	QWORD PTR _y$[ebp]
	fld	ST(1)
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	$LN1472@eval_all

; 638  :         { stacktop->value = 0.0;

	fstp	ST(2)
	fxch	ST(1)
	fstp	QWORD PTR [ebx]

; 639  :           if ( y == 1.0 ) 

	fld	ST(0)
	fld	ST(2)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN474@eval_all

; 640  :             for ( i = 0 ; i < pcount ; i++ )

	mov	edi, DWORD PTR _pcount$[ebp]
	fstp	ST(1)
	xor	ecx, ecx
	fstp	ST(0)
	cmp	edi, 4
	jl	SHORT $LC1169@eval_all
	lea	eax, DWORD PTR [edi-4]
	shr	eax, 2
	inc	eax
	lea	esi, DWORD PTR [ebx+16]
	lea	ecx, DWORD PTR [eax*4]
$LL1170@eval_all:

; 641  :              stacktop->deriv[i] = stacktop[0].deriv[i];

	add	esi, 32					; 00000020H
	dec	eax
	jne	SHORT $LL1170@eval_all
$LC1169@eval_all:

; 640  :             for ( i = 0 ; i < pcount ; i++ )

	cmp	ecx, edi
	jge	$LN1270@eval_all
	mov	eax, edi
	lea	esi, DWORD PTR [ebx+ecx*8+8]
	sub	eax, ecx
	npad	3
$LC473@eval_all:
	add	esi, 8
	dec	eax
	jne	SHORT $LC473@eval_all

; 642  :            else if ( y > 1.0 ) 

	jmp	$LN1270@eval_all
$LN474@eval_all:
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN469@eval_all
	fstp	ST(1)
	fstp	ST(0)

; 643  :             for ( i = 0 ; i < pcount ; i++ )
; 644  :              stacktop->deriv[i] = 0.;
; 645  :            else

	jmp	$LN667@eval_all
$LN469@eval_all:

; 646  :            { sprintf(errmsg,"Negative power (%f) of zero in derivative.\n",
; 647  :                     (DOUBLE)(y-1));

	fsubrp	ST(1), ST(0)
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CM@IAPBGOKK@Negative?5power?5?$CI?$CFf?$CJ?5of?5zero?5in?5d@
	push	OFFSET _errmsg
	call	_sprintf

; 648  :              kb_error(1024,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	1024					; 00000400H
	call	_kb_error
	add	esp, 28					; 0000001cH

; 649  :            }

	jmp	$LN1270@eval_all
$LN1472@eval_all:

; 632  : 
; 633  :       case POW_NODE:
; 634  :         stacktop--;
; 635  :         x = stacktop[0].value;
; 636  :         y = stacktop[1].value;
; 637  :         if ( x == 0.0 )

	fstp	ST(3)

; 650  :         }
; 651  :         else if ( (x < 0) && ( (REAL)(int)y != y ) )

	fxch	ST(2)
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN463@eval_all
	fld	ST(1)
	call	__ftol2_sse
	mov	DWORD PTR tv25111[ebp], eax
	fild	DWORD PTR tv25111[ebp]
	fld	ST(2)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN463@eval_all

; 652  :         { sprintf(errmsg,"Nonintegral power (%f) of negative number.\n",(double)y);

	sub	esp, 8
	fstp	ST(0)
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CM@MKJCJODL@Nonintegral?5power?5?$CI?$CFf?$CJ?5of?5negati@
	push	OFFSET _errmsg
	call	_sprintf

; 653  :           kb_error(2003,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2003					; 000007d3H
	call	_kb_error
	add	esp, 28					; 0000001cH

; 654  :         }
; 655  :         else 

	jmp	$LN1270@eval_all
$LN463@eval_all:

; 656  :         {
; 657  :           stacktop->value = pow(x,y);             

	fxch	ST(1)
	call	__CIpow
	fstp	QWORD PTR [ebx]

; 658  :           for ( i = 0 ; i < pcount ; i++ )

	mov	esi, DWORD PTR _pcount$[ebp]
	test	esi, esi
	jle	$LN1270@eval_all

; 659  :              stacktop->deriv[i] = (log(fabs(x))*stacktop[1].deriv[i]
; 660  :                  + y/x*stacktop[0].deriv[i]) *stacktop->value;

	fld	QWORD PTR _x$[ebp]
	fabs
	call	__CIlog
	fld	QWORD PTR _y$[ebp]
	fdiv	QWORD PTR _x$[ebp]
	lea	eax, DWORD PTR [ebx+8]
	mov	ecx, esi
$LN461@eval_all:
	fld	QWORD PTR [eax+104]
	add	eax, 8
	dec	ecx
	fmul	ST(0), ST(2)
	fld	ST(1)
	fmul	QWORD PTR [eax-8]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR [ebx]
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LN461@eval_all

; 661  :         }
; 662  :         break;

	jmp	$LN1587@eval_all
$LN1387@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	sub	ebx, 104				; 00000068H
	fstp	ST(0)
	fld	QWORD PTR [ebx]
	fst	QWORD PTR _y$[ebp]
	fld	QWORD PTR [ebx+104]
	fst	QWORD PTR _x$[ebp]
	call	__CIatan2
	mov	esi, DWORD PTR _pcount$[ebp]
	fstp	QWORD PTR [ebx]
	fld	QWORD PTR _y$[ebp]
	xor	edx, edx
	cmp	esi, 4
	jl	$LN1266@eval_all

; 663  : 
; 664  :       case ATAN2_NODE:
; 665  :         stacktop--;

	fld	ST(0)
	lea	ecx, DWORD PTR [esi-4]
	fmul	ST(0), ST(1)
	shr	ecx, 2

; 666  :         y = stacktop[0].value;
; 667  :         x = stacktop[1].value;
; 668  :         stacktop->value = atan2(y,x);
; 669  :         for ( i = 0 ; i < pcount ; i++ )

	fld	QWORD PTR _x$[ebp]
	inc	ecx
	fld	ST(0)
	lea	eax, DWORD PTR [ebx+8]
	fmul	ST(0), ST(1)
	lea	edx, DWORD PTR [ecx*4]
	faddp	ST(2), ST(0)
$LN1173@eval_all:

; 670  :              stacktop->deriv[i] = (x*stacktop[0].deriv[i]
; 671  :                  - y*stacktop[1].deriv[i])/(x*x + y*y);

	fld	ST(0)
	add	eax, 32					; 00000020H
	dec	ecx
	fmul	QWORD PTR [eax-32]
	fld	QWORD PTR [eax+72]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR [eax-32]
	fld	ST(0)
	fmul	QWORD PTR [eax-24]
	fld	QWORD PTR [eax+80]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR [eax-24]
	fld	QWORD PTR [eax-16]
	fmul	ST(0), ST(1)
	fld	QWORD PTR [eax+88]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR [eax-16]
	fld	QWORD PTR [eax-8]
	fmul	ST(0), ST(1)
	fld	QWORD PTR [eax+96]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LN1173@eval_all

; 663  : 
; 664  :       case ATAN2_NODE:
; 665  :         stacktop--;

	fstp	ST(1)
	jmp	SHORT $LC1172@eval_all
$LN1266@eval_all:
	fld	QWORD PTR _x$[ebp]
$LC1172@eval_all:

; 666  :         y = stacktop[0].value;
; 667  :         x = stacktop[1].value;
; 668  :         stacktop->value = atan2(y,x);
; 669  :         for ( i = 0 ; i < pcount ; i++ )

	cmp	edx, esi
	jge	$LN1587@eval_all
	fld	ST(1)
	mov	ecx, esi
	fmul	ST(0), ST(2)
	lea	eax, DWORD PTR [ebx+edx*8+8]
	fld	ST(1)
	sub	ecx, edx
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
$LC457@eval_all:

; 670  :              stacktop->deriv[i] = (x*stacktop[0].deriv[i]
; 671  :                  - y*stacktop[1].deriv[i])/(x*x + y*y);

	fld	ST(1)
	add	eax, 8
	dec	ecx
	fmul	QWORD PTR [eax-8]
	fld	QWORD PTR [eax+96]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC457@eval_all

; 666  :         y = stacktop[0].value;
; 667  :         x = stacktop[1].value;
; 668  :         stacktop->value = atan2(y,x);
; 669  :         for ( i = 0 ; i < pcount ; i++ )

	fstp	ST(2)
$LN1336@eval_all:
	fstp	ST(0)

; 672  :         break;

	jmp	$LN1698@eval_all
$LN1386@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	sub	ebx, 104				; 00000068H
	fstp	ST(0)
	sub	esp, 16					; 00000010H
	fld	QWORD PTR [ebx]
	fst	QWORD PTR _x$[ebp]
	fld	QWORD PTR [ebx+104]
	fst	QWORD PTR _y$[ebp]
	fstp	QWORD PTR [esp+8]
	fstp	QWORD PTR [esp]
	call	_incompleteEllipticF
	mov	edi, DWORD PTR _pcount$[ebp]
	fstp	QWORD PTR [ebx]
	add	esp, 16					; 00000010H
	test	edi, edi
	jle	$LN1270@eval_all

; 673  : 
; 674  :       case INCOMPLETE_ELLIPTICF_NODE:
; 675  :         stacktop--;

	lea	esi, DWORD PTR [ebx+8]
$LL453@eval_all:

; 676  :         x = stacktop[0].value;
; 677  :         y = stacktop[1].value;
; 678  :         stacktop->value = incompleteEllipticF(x,y);
; 679  :         for ( i = 0 ; i < pcount ; i++ )
; 680  :              stacktop->deriv[i] = 
; 681  :                 incompleteEllipticFdphi(x,y)*stacktop[0].deriv[i]
; 682  :               + incompleteEllipticFdm(x,y)*stacktop[1].deriv[i];

	fld	QWORD PTR _y$[ebp]
	sub	esp, 16					; 00000010H
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR _x$[ebp]
	fstp	QWORD PTR [esp]
	call	_incompleteEllipticFdm
	fmul	QWORD PTR [esi+104]
	fstp	QWORD PTR tv28649[ebp]
	fld	QWORD PTR _y$[ebp]
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR _x$[ebp]
	fstp	QWORD PTR [esp]
	call	_incompleteEllipticFdphi
	fmul	QWORD PTR [esi]
	add	esp, 16					; 00000010H
	add	esi, 8
	dec	edi
	fadd	QWORD PTR tv28649[ebp]
	fstp	QWORD PTR [esi-8]
	jne	SHORT $LL453@eval_all

; 683  :         break;

	jmp	$LN1270@eval_all
$LN1385@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	sub	ebx, 104				; 00000068H
	fstp	ST(0)
	sub	esp, 16					; 00000010H
	fld	QWORD PTR [ebx]
	fst	QWORD PTR _x$[ebp]
	fld	QWORD PTR [ebx+104]
	fst	QWORD PTR _y$[ebp]
	fstp	QWORD PTR [esp+8]
	fstp	QWORD PTR [esp]
	call	_incompleteEllipticE
	mov	edi, DWORD PTR _pcount$[ebp]
	fstp	QWORD PTR [ebx]
	add	esp, 16					; 00000010H
	test	edi, edi
	jle	$LN1270@eval_all

; 684  : 
; 685  :       case INCOMPLETE_ELLIPTICE_NODE:
; 686  :         stacktop--;

	lea	esi, DWORD PTR [ebx+8]
$LL449@eval_all:

; 687  :         x = stacktop[0].value;
; 688  :         y = stacktop[1].value;
; 689  :         stacktop->value = incompleteEllipticE(x,y);
; 690  :         for ( i = 0 ; i < pcount ; i++ )
; 691  :              stacktop->deriv[i] = 
; 692  :                 incompleteEllipticEdphi(x,y)*stacktop[0].deriv[i]
; 693  :               + incompleteEllipticEdm(x,y)*stacktop[1].deriv[i];

	fld	QWORD PTR _y$[ebp]
	sub	esp, 16					; 00000010H
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR _x$[ebp]
	fstp	QWORD PTR [esp]
	call	_incompleteEllipticEdm
	fmul	QWORD PTR [esi+104]
	fstp	QWORD PTR tv28635[ebp]
	fld	QWORD PTR _y$[ebp]
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR _x$[ebp]
	fstp	QWORD PTR [esp]
	call	_incompleteEllipticEdphi
	fmul	QWORD PTR [esi]
	add	esp, 16					; 00000010H
	add	esi, 8
	dec	edi
	fadd	QWORD PTR tv28635[ebp]
	fstp	QWORD PTR [esi-8]
	jne	SHORT $LL449@eval_all

; 694  :         break;

	jmp	$LN1270@eval_all
$LN1384@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	sub	esp, 8
	fstp	ST(0)
	fld	QWORD PTR [ebx]
	fst	QWORD PTR _x$[ebp]
	fstp	QWORD PTR [esp]
	call	_ellipticK
	mov	edi, DWORD PTR _pcount$[ebp]
	fstp	QWORD PTR [ebx]
	add	esp, 8
	test	edi, edi
	jle	$LN1270@eval_all

; 695  : 
; 696  :       case ELLIPTICK_NODE:
; 697  :         x = stacktop[0].value;

	lea	esi, DWORD PTR [ebx+8]
$LL445@eval_all:

; 698  :         stacktop->value = ellipticK(x);
; 699  :         for ( i = 0 ; i < pcount ; i++ )
; 700  :              stacktop->deriv[i] = ellipticKdm(x)*stacktop[0].deriv[i];

	fld	QWORD PTR _x$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_ellipticKdm
	fmul	QWORD PTR [esi]
	add	esp, 8
	add	esi, 8
	dec	edi
	fstp	QWORD PTR [esi-8]
	jne	SHORT $LL445@eval_all

; 701  :         break;

	jmp	$LN1270@eval_all
$LN1383@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	sub	esp, 8
	fstp	ST(0)
	fld	QWORD PTR [ebx]
	fst	QWORD PTR _x$[ebp]
	fstp	QWORD PTR [esp]
	call	_ellipticE
	mov	edi, DWORD PTR _pcount$[ebp]
	fstp	QWORD PTR [ebx]
	add	esp, 8
	test	edi, edi
	jle	$LN1270@eval_all

; 702  : 
; 703  :       case ELLIPTICE_NODE:
; 704  :         x = stacktop[0].value;

	lea	esi, DWORD PTR [ebx+8]
	npad	2
$LL441@eval_all:

; 705  :         stacktop->value = ellipticE(x);
; 706  :         for ( i = 0 ; i < pcount ; i++ )
; 707  :              stacktop->deriv[i] = ellipticEdm(x)*stacktop[0].deriv[i];

	fld	QWORD PTR _x$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_ellipticEdm
	fmul	QWORD PTR [esi]
	add	esp, 8
	add	esi, 8
	dec	edi
	fstp	QWORD PTR [esi-8]
	jne	SHORT $LL441@eval_all

; 708  :         break;

	jmp	$LN1270@eval_all
$LN1427@eval_all:

; 709  : 
; 710  :       case SQR_NODE:
; 711  :         for ( i = 0 ; i < pcount ; i++ )

	mov	esi, DWORD PTR _pcount$[ebp]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(1)
	xor	edx, edx
	cmp	esi, 4
	jl	SHORT $LN1298@eval_all

; 709  : 
; 710  :       case SQR_NODE:
; 711  :         for ( i = 0 ; i < pcount ; i++ )

	lea	ecx, DWORD PTR [esi-4]
	shr	ecx, 2
	inc	ecx
	lea	eax, DWORD PTR [ebx+16]
	lea	edx, DWORD PTR [ecx*4]
$LN1176@eval_all:

; 712  :              stacktop->deriv[i] *= 2*stacktop->value;

	fld	QWORD PTR [ebx]
	add	eax, 32					; 00000020H
	dec	ecx
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [eax-40]
	fstp	QWORD PTR [eax-40]
	fld	QWORD PTR [ebx]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [eax-32]
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [ebx]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [eax-24]
	fstp	QWORD PTR [eax-24]
	fld	QWORD PTR [ebx]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [eax-16]
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LN1176@eval_all
$LN1298@eval_all:

; 709  : 
; 710  :       case SQR_NODE:
; 711  :         for ( i = 0 ; i < pcount ; i++ )

	cmp	edx, esi
	jge	SHORT $LN1493@eval_all
	mov	ecx, esi
	lea	eax, DWORD PTR [ebx+edx*8+8]
	sub	ecx, edx
$LC437@eval_all:

; 712  :              stacktop->deriv[i] *= 2*stacktop->value;

	fld	QWORD PTR [ebx]
	add	eax, 8
	dec	ecx
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC437@eval_all
$LN1493@eval_all:

; 709  : 
; 710  :       case SQR_NODE:
; 711  :         for ( i = 0 ; i < pcount ; i++ )

	fstp	ST(0)

; 713  :         stacktop->value *= stacktop->value;

	fld	QWORD PTR [ebx]
	fmul	ST(0), ST(0)
	fstp	QWORD PTR [ebx]

; 714  :         break;

	jmp	$LN1270@eval_all
$LN1382@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	fldz
	fcom	QWORD PTR [ebx]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN1593@eval_all

; 715  : 
; 716  :       case SQRT_NODE:
; 717  :         if ( stacktop->value < 0.0 )
; 718  :         { if ( stacktop->value > -100*machine_eps ) stacktop->value = 0.0;

	fld	QWORD PTR _machine_eps
	fmul	QWORD PTR __real@c059000000000000
	fcomp	QWORD PTR [ebx]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1596@eval_all
	fstp	QWORD PTR [ebx]

; 719  :           else 

	jmp	$LN431@eval_all
$LN1596@eval_all:

; 715  : 
; 716  :       case SQRT_NODE:
; 717  :         if ( stacktop->value < 0.0 )
; 718  :         { if ( stacktop->value > -100*machine_eps ) stacktop->value = 0.0;

	fstp	ST(0)

; 720  :           {
; 721  :             sprintf(errmsg,"Square root of negative number %g \n",stacktop->value);

	sub	esp, 8
	fld	QWORD PTR [ebx]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CE@FBJOMNDK@Square?5root?5of?5negative?5number?5?$CF@
	push	OFFSET _errmsg
	call	_sprintf

; 722  :             sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 723  :                  file_names[node->file_no],node->line_no);

	mov	eax, OFFSET _errmsg
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	5
$LL1252@eval_all:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1252@eval_all
	mov	ecx, DWORD PTR [esi+16]
	sub	eax, edx
	mov	edx, DWORD PTR [esi+12]
	push	edx
	mov	edx, DWORD PTR _file_names
	mov	ecx, DWORD PTR [edx+ecx*4]
	push	ecx
	lea	edx, DWORD PTR _errmsg[eax]
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	edx
	call	_sprintf

; 724  :             kb_error(4263,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	4263					; 000010a7H
	call	_kb_error
	add	esp, 28					; 0000001cH
	jmp	SHORT $LN431@eval_all
$LN1593@eval_all:
	fstp	ST(0)
$LN431@eval_all:

; 725  :           }
; 726  :         }
; 727  :         stacktop->value = sqrt(stacktop->value);

	fld	QWORD PTR [ebx]
	call	__CIsqrt
	fst	QWORD PTR [ebx]

; 728  :         if ( stacktop->value == 0.0 )

	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H

; 729  :            for ( i = 0 ; i < pcount ; i++ )
; 730  :              stacktop->deriv[i] = 0.0;
; 731  :         else

	jnp	$LN667@eval_all

; 732  :            for ( i = 0 ; i < pcount ; i++ )

	mov	esi, DWORD PTR _pcount$[ebp]
	xor	edx, edx
	cmp	esi, 4
	jl	SHORT $LN1267@eval_all
	lea	ecx, DWORD PTR [esi-4]
	shr	ecx, 2
	inc	ecx
	lea	eax, DWORD PTR [ebx+16]
	lea	edx, DWORD PTR [ecx*4]
$LL1179@eval_all:

; 733  :              stacktop->deriv[i] /= 2*stacktop->value;

	fld	QWORD PTR [ebx]
	add	eax, 32					; 00000020H
	dec	ecx
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR [eax-40]
	fdivrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax-40]
	fld	QWORD PTR [ebx]
	fmul	ST(0), ST(1)
	fdivr	QWORD PTR [eax-32]
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [ebx]
	fmul	ST(0), ST(1)
	fdivr	QWORD PTR [eax-24]
	fstp	QWORD PTR [eax-24]
	fmul	QWORD PTR [ebx]
	fdivr	QWORD PTR [eax-16]
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LL1179@eval_all
$LN1267@eval_all:

; 732  :            for ( i = 0 ; i < pcount ; i++ )

	cmp	edx, esi
	jge	$LN1270@eval_all
	fld	QWORD PTR __real@4000000000000000
	mov	ecx, esi
	lea	eax, DWORD PTR [ebx+edx*8+8]
	sub	ecx, edx
$LC425@eval_all:

; 733  :              stacktop->deriv[i] /= 2*stacktop->value;

	fld	QWORD PTR [ebx]
	add	eax, 8
	dec	ecx
	fmul	ST(0), ST(1)
	fdivr	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC425@eval_all

; 734  :         break;

	jmp	$LN1698@eval_all
$LN1381@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	sub	esp, 8
	fstp	ST(0)
	fld	QWORD PTR [ebx]
	fstp	QWORD PTR [esp]
	call	_ceil
	add	esp, 8
	jmp	$LN1746@eval_all
$LN1380@eval_all:
	fstp	ST(0)
	sub	esp, 8
	fstp	ST(0)
	fld	QWORD PTR [ebx]
	fstp	QWORD PTR [esp]
	call	_floor
	add	esp, 8
	jmp	$LN1746@eval_all
$LN1379@eval_all:
	fstp	ST(0)
	fstp	ST(0)
	fldz
	fcomp	QWORD PTR [ebx]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN1270@eval_all

; 735  : 
; 736  :       case CEIL_NODE:
; 737  :           stacktop->value = ceil(stacktop->value);
; 738  :           FIRST = 0;
; 739  :           break;
; 740  : 
; 741  :       case FLOOR_NODE:
; 742  :           stacktop->value = floor(stacktop->value);
; 743  :           FIRST = 0;
; 744  :           break;
; 745  : 
; 746  :       case ABS_NODE:
; 747  :            if ( stacktop->value < 0.0 )
; 748  :            {
; 749  :              for ( i = 0 ; i < pcount ; i++ )

	mov	esi, DWORD PTR _pcount$[ebp]
	xor	edx, edx
	cmp	esi, 4
	jl	SHORT $LN1299@eval_all
	lea	ecx, DWORD PTR [esi-4]
	shr	ecx, 2
	inc	ecx
	lea	eax, DWORD PTR [ebx+16]
	lea	edx, DWORD PTR [ecx*4]
$LL1182@eval_all:

; 750  :                    stacktop->deriv[i] = -stacktop->deriv[i];

	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	dec	ecx
	fchs
	fstp	QWORD PTR [eax-40]
	fld	QWORD PTR [eax-32]
	fchs
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [eax-24]
	fchs
	fstp	QWORD PTR [eax-24]
	fld	QWORD PTR [eax-16]
	fchs
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LL1182@eval_all
$LN1299@eval_all:

; 735  : 
; 736  :       case CEIL_NODE:
; 737  :           stacktop->value = ceil(stacktop->value);
; 738  :           FIRST = 0;
; 739  :           break;
; 740  : 
; 741  :       case FLOOR_NODE:
; 742  :           stacktop->value = floor(stacktop->value);
; 743  :           FIRST = 0;
; 744  :           break;
; 745  : 
; 746  :       case ABS_NODE:
; 747  :            if ( stacktop->value < 0.0 )
; 748  :            {
; 749  :              for ( i = 0 ; i < pcount ; i++ )

	cmp	edx, esi
	jge	SHORT $LN1180@eval_all
	mov	ecx, esi
	lea	eax, DWORD PTR [ebx+edx*8+8]
	sub	ecx, edx
	npad	7
$LC412@eval_all:

; 750  :                    stacktop->deriv[i] = -stacktop->deriv[i];

	fld	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fchs
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC412@eval_all
$LN1180@eval_all:

; 751  :              stacktop->value = -stacktop->value;

	fld	QWORD PTR [ebx]
	fchs
	fstp	QWORD PTR [ebx]

; 752  :            }
; 753  :            break;

	jmp	$LN1270@eval_all
$LN1378@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	fld	QWORD PTR [ebx]
	call	__CIcos
	mov	esi, DWORD PTR _pcount$[ebp]
	xor	edx, edx
	cmp	esi, 4
	jl	SHORT $LN1300@eval_all

; 754  : 
; 755  :       case SIN_NODE:
; 756  :         x = cos(stacktop->value);

	lea	ecx, DWORD PTR [esi-4]
	shr	ecx, 2
	inc	ecx
	lea	eax, DWORD PTR [ebx+16]
	lea	edx, DWORD PTR [ecx*4]

; 757  :         for ( i = 0 ; i < pcount ; i++ )

$LN1185@eval_all:

; 758  :              stacktop->deriv[i] *= x;

	fld	ST(0)
	add	eax, 32					; 00000020H
	dec	ecx
	fmul	QWORD PTR [eax-40]
	fstp	QWORD PTR [eax-40]
	fld	ST(0)
	fmul	QWORD PTR [eax-32]
	fstp	QWORD PTR [eax-32]
	fld	ST(0)
	fmul	QWORD PTR [eax-24]
	fstp	QWORD PTR [eax-24]
	fld	QWORD PTR [eax-16]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LN1185@eval_all
$LN1300@eval_all:

; 757  :         for ( i = 0 ; i < pcount ; i++ )

	cmp	edx, esi
	jge	SHORT $LN1609@eval_all
	mov	ecx, esi
	lea	eax, DWORD PTR [ebx+edx*8+8]
	sub	ecx, edx
$LC408@eval_all:

; 758  :              stacktop->deriv[i] *= x;

	fld	ST(0)
	add	eax, 8
	dec	ecx
	fmul	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC408@eval_all
$LN1609@eval_all:

; 757  :         for ( i = 0 ; i < pcount ; i++ )

	fstp	ST(0)

; 759  :         stacktop->value = sin(stacktop->value);

	fld	QWORD PTR [ebx]
	call	__CIsin
	fstp	QWORD PTR [ebx]

; 760  :         break;

	jmp	$LN1270@eval_all
$LN1377@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	fld	QWORD PTR [ebx]
	call	__CIsin
	fchs
	mov	esi, DWORD PTR _pcount$[ebp]
	xor	edx, edx
	cmp	esi, 4
	jl	SHORT $LN1301@eval_all

; 761  : 
; 762  :       case COS_NODE:
; 763  :         x = -sin(stacktop->value);

	lea	ecx, DWORD PTR [esi-4]
	shr	ecx, 2
	inc	ecx
	lea	eax, DWORD PTR [ebx+16]
	lea	edx, DWORD PTR [ecx*4]

; 764  :         for ( i = 0 ; i < pcount ; i++ )

$LN1188@eval_all:

; 765  :              stacktop->deriv[i] *= x;

	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	dec	ecx
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax-40]
	fld	QWORD PTR [eax-32]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [eax-24]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax-24]
	fld	ST(0)
	fmul	QWORD PTR [eax-16]
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LN1188@eval_all
$LN1301@eval_all:

; 764  :         for ( i = 0 ; i < pcount ; i++ )

	cmp	edx, esi
	jge	SHORT $LN1618@eval_all
	mov	ecx, esi
	lea	eax, DWORD PTR [ebx+edx*8+8]
	sub	ecx, edx
$LC404@eval_all:

; 765  :              stacktop->deriv[i] *= x;

	fld	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC404@eval_all
$LN1618@eval_all:

; 764  :         for ( i = 0 ; i < pcount ; i++ )

	fstp	ST(0)

; 766  :         stacktop->value = cos(stacktop->value);

	fld	QWORD PTR [ebx]
	call	__CIcos
	fstp	QWORD PTR [ebx]

; 767  :         break;

	jmp	$LN1270@eval_all
$LN1426@eval_all:

; 771  :         for ( i = 0 ; i < pcount ; i++ )

	mov	esi, DWORD PTR _pcount$[ebp]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fld	QWORD PTR [ebx]
	xor	edx, edx
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	cmp	esi, 4
	jl	SHORT $LN1302@eval_all

; 768  : 
; 769  :       case ATAN_NODE:
; 770  :         x = (1 + stacktop->value*stacktop->value);

	lea	ecx, DWORD PTR [esi-4]
	shr	ecx, 2
	inc	ecx
	lea	eax, DWORD PTR [ebx+16]
	lea	edx, DWORD PTR [ecx*4]

; 771  :         for ( i = 0 ; i < pcount ; i++ )

$LN1191@eval_all:

; 772  :              stacktop->deriv[i] /= x;

	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	dec	ecx
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-40]
	fld	QWORD PTR [eax-32]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [eax-24]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-24]
	fld	QWORD PTR [eax-16]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LN1191@eval_all
$LN1302@eval_all:

; 771  :         for ( i = 0 ; i < pcount ; i++ )

	cmp	edx, esi
	jge	SHORT $LN1502@eval_all
	mov	ecx, esi
	lea	eax, DWORD PTR [ebx+edx*8+8]
	sub	ecx, edx
$LC400@eval_all:

; 772  :              stacktop->deriv[i] /= x;

	fld	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC400@eval_all
$LN1502@eval_all:

; 771  :         for ( i = 0 ; i < pcount ; i++ )

	fstp	ST(0)

; 773  :         stacktop->value = atan(stacktop->value);

	fld	QWORD PTR [ebx]
	call	__CIatan
	fstp	QWORD PTR [ebx]

; 774  :         break;

	jmp	$LN1270@eval_all
$LN1376@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	fld	QWORD PTR [ebx]
	call	__CIexp
	fstp	QWORD PTR [ebx]
	mov	esi, DWORD PTR _pcount$[ebp]
	xor	edx, edx
	cmp	esi, 4
	jl	SHORT $LN1303@eval_all

; 775  : 
; 776  :       case EXP_NODE:
; 777  :         stacktop->value = exp(stacktop->value);

	lea	ecx, DWORD PTR [esi-4]
	shr	ecx, 2
	inc	ecx
	lea	eax, DWORD PTR [ebx+16]
	lea	edx, DWORD PTR [ecx*4]
	npad	1

; 778  :         for ( i = 0 ; i < pcount ; i++ )

$LL1194@eval_all:

; 779  :              stacktop->deriv[i] *= stacktop->value;

	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	dec	ecx
	fmul	QWORD PTR [ebx]
	fstp	QWORD PTR [eax-40]
	fld	QWORD PTR [eax-32]
	fmul	QWORD PTR [ebx]
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [eax-24]
	fmul	QWORD PTR [ebx]
	fstp	QWORD PTR [eax-24]
	fld	QWORD PTR [eax-16]
	fmul	QWORD PTR [ebx]
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LL1194@eval_all
$LN1303@eval_all:

; 778  :         for ( i = 0 ; i < pcount ; i++ )

	cmp	edx, esi
	jge	$LN1270@eval_all
	mov	ecx, esi
	lea	eax, DWORD PTR [ebx+edx*8+8]
	sub	ecx, edx
$LC396@eval_all:

; 779  :              stacktop->deriv[i] *= stacktop->value;

	fld	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fmul	QWORD PTR [ebx]
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC396@eval_all

; 780  :         break;

	jmp	$LN1270@eval_all
$LN1375@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	fld	QWORD PTR [ebx]
	call	__CIexp
	fld1
	fdiv	ST(0), ST(1)
	mov	esi, DWORD PTR _pcount$[ebp]
	xor	edx, edx
	fld	ST(0)
	fadd	ST(0), ST(2)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	cmp	esi, 4
	jl	SHORT $LN1304@eval_all

; 781  : 
; 782  :       case SINH_NODE:
; 783  :         y = exp(stacktop->value);

	lea	ecx, DWORD PTR [esi-4]
	shr	ecx, 2
	inc	ecx
	lea	eax, DWORD PTR [ebx+16]
	lea	edx, DWORD PTR [ecx*4]

; 784  :         x = (y+1/y)/2;
; 785  :         for ( i = 0 ; i < pcount ; i++ )

$LN1197@eval_all:

; 786  :              stacktop->deriv[i] *= x;

	fld	ST(1)
	add	eax, 32					; 00000020H
	dec	ecx
	fmul	QWORD PTR [eax-40]
	fstp	QWORD PTR [eax-40]
	fld	ST(1)
	fmul	QWORD PTR [eax-32]
	fstp	QWORD PTR [eax-32]
	fld	ST(1)
	fmul	QWORD PTR [eax-24]
	fstp	QWORD PTR [eax-24]
	fld	QWORD PTR [eax-16]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LN1197@eval_all
$LN1304@eval_all:

; 784  :         x = (y+1/y)/2;
; 785  :         for ( i = 0 ; i < pcount ; i++ )

	cmp	edx, esi
	jge	SHORT $LN1627@eval_all
	mov	ecx, esi
	lea	eax, DWORD PTR [ebx+edx*8+8]
	sub	ecx, edx
$LC392@eval_all:

; 786  :              stacktop->deriv[i] *= x;

	fld	ST(1)
	add	eax, 8
	dec	ecx
	fmul	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC392@eval_all
$LN1627@eval_all:

; 784  :         x = (y+1/y)/2;
; 785  :         for ( i = 0 ; i < pcount ; i++ )

	fstp	ST(1)

; 787  :         stacktop->value = (y-1/y)/2;

	fxch	ST(2)
	fsubrp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	fstp	QWORD PTR [ebx]

; 788  :         break;

	jmp	$LN1270@eval_all
$LN1374@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	fld	QWORD PTR [ebx]
	call	__CIexp
	fld1
	fdiv	ST(0), ST(1)
	mov	esi, DWORD PTR _pcount$[ebp]
	xor	edx, edx
	fld	ST(1)
	fsub	ST(0), ST(1)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	cmp	esi, 4
	jl	SHORT $LN1305@eval_all

; 789  : 
; 790  :       case COSH_NODE:
; 791  :         y = exp(stacktop->value);

	lea	ecx, DWORD PTR [esi-4]
	shr	ecx, 2
	inc	ecx
	lea	eax, DWORD PTR [ebx+16]
	lea	edx, DWORD PTR [ecx*4]

; 792  :         x = (y-1/y)/2;
; 793  :         for ( i = 0 ; i < pcount ; i++ )

$LN1200@eval_all:

; 794  :              stacktop->deriv[i] *= x;

	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	dec	ecx
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [eax-40]
	fld	QWORD PTR [eax-32]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [eax-24]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [eax-24]
	fld	ST(1)
	fmul	QWORD PTR [eax-16]
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LN1200@eval_all
$LN1305@eval_all:

; 792  :         x = (y-1/y)/2;
; 793  :         for ( i = 0 ; i < pcount ; i++ )

	cmp	edx, esi
	jge	SHORT $LN1636@eval_all
	mov	ecx, esi
	lea	eax, DWORD PTR [ebx+edx*8+8]
	sub	ecx, edx
$LC388@eval_all:

; 794  :              stacktop->deriv[i] *= x;

	fld	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC388@eval_all
$LN1636@eval_all:

; 792  :         x = (y-1/y)/2;
; 793  :         for ( i = 0 ; i < pcount ; i++ )

	fstp	ST(1)

; 795  :         stacktop->value = (y+1/y)/2;

	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	fstp	QWORD PTR [ebx]

; 796  :         break;

	jmp	$LN1270@eval_all
$LN1373@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	fld	QWORD PTR [ebx]
	call	__CIexp
	fld1
	fdiv	ST(0), ST(1)
	mov	esi, DWORD PTR _pcount$[ebp]
	xor	edx, edx
	fld	ST(1)
	fsub	ST(0), ST(1)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(2)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fmulp	ST(1), ST(0)
	cmp	esi, 4
	jl	SHORT $LN1306@eval_all

; 797  : 
; 798  :       case TANH_NODE:
; 799  :            y = exp(stacktop->value);
; 800  :            x = (y-1/y)/2;
; 801  :            y = (y+1/y)/2;
; 802  :            FIRST  /= y*y ;

	lea	ecx, DWORD PTR [esi-4]
	fld	ST(0)
	shr	ecx, 2
	fmul	ST(0), ST(1)
	inc	ecx
	lea	eax, DWORD PTR [ebx+16]
	lea	edx, DWORD PTR [ecx*4]
$LN1203@eval_all:
	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	dec	ecx
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-40]
	fld	QWORD PTR [eax-32]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [eax-24]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-24]
	fld	QWORD PTR [eax-16]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LN1203@eval_all
	fstp	ST(0)
$LN1306@eval_all:
	cmp	edx, esi
	jge	SHORT $LN1201@eval_all
	fld	ST(0)
	mov	ecx, esi
	fmul	ST(0), ST(1)
	lea	eax, DWORD PTR [ebx+edx*8+8]
	sub	ecx, edx
$LC384@eval_all:
	fld	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC384@eval_all
	fstp	ST(0)
$LN1201@eval_all:

; 803  :            stacktop->value = x/y;

	fdivp	ST(1), ST(0)
	fstp	QWORD PTR [ebx]

; 804  :            break;

	jmp	$LN1270@eval_all
$LN1425@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fld	QWORD PTR [ebx]
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	call	__CIsqrt
	fld1
	mov	esi, DWORD PTR _pcount$[ebp]
	fld	ST(0)
	xor	edx, edx
	fdivrp	ST(2), ST(0)
	cmp	esi, 4
	jl	SHORT $LN1307@eval_all

; 805  : 
; 806  :       case ASINH_NODE:
; 807  :            y = 1/sqrt(1+stacktop->value*stacktop->value);

	lea	ecx, DWORD PTR [esi-4]
	shr	ecx, 2
	inc	ecx
	lea	eax, DWORD PTR [ebx+16]
	lea	edx, DWORD PTR [ecx*4]

; 808  :            FIRST *= y;

$LN1206@eval_all:
	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	dec	ecx
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [eax-40]
	fld	QWORD PTR [eax-32]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [eax-24]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [eax-24]
	fld	ST(1)
	fmul	QWORD PTR [eax-16]
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LN1206@eval_all
$LN1307@eval_all:
	cmp	edx, esi
	jge	SHORT $LN1511@eval_all
	mov	ecx, esi
	lea	eax, DWORD PTR [ebx+edx*8+8]
	sub	ecx, edx
$LC380@eval_all:
	fld	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC380@eval_all
$LN1511@eval_all:
	fstp	ST(1)

; 809  :            stacktop->value = log(stacktop->value + 
; 810  :                     sqrt(stacktop->value*stacktop->value + 1));

	fld	QWORD PTR [ebx]
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	call	__CIsqrt
	fadd	QWORD PTR [ebx]
	call	__CIlog
	fstp	QWORD PTR [ebx]

; 811  :            break;

	jmp	$LN1270@eval_all
$LN1424@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fcomp	QWORD PTR [ebx]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN1308@eval_all

; 812  : 
; 813  :       case ACOSH_NODE:
; 814  :            if ( stacktop->value <= 1.0 )
; 815  :              kb_error(2490,"Acosh argument less than 1.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0BN@BLAKMPAE@Acosh?5argument?5less?5than?51?4?6?$AA@
	push	2490					; 000009baH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1308@eval_all:

; 816  :            y = 1/sqrt(stacktop->value*stacktop->value - 1);

	fld	QWORD PTR [ebx]
	fmul	ST(0), ST(0)
	fsub	QWORD PTR __real@3ff0000000000000
	call	__CIsqrt
	fld1

; 817  :            FIRST *= y;

	mov	esi, DWORD PTR _pcount$[ebp]
	fld	ST(0)
	xor	edx, edx
	fdivrp	ST(2), ST(0)
	cmp	esi, 4
	jl	SHORT $LN1317@eval_all

; 816  :            y = 1/sqrt(stacktop->value*stacktop->value - 1);

	lea	ecx, DWORD PTR [esi-4]
	shr	ecx, 2
	inc	ecx
	lea	eax, DWORD PTR [ebx+16]
	lea	edx, DWORD PTR [ecx*4]

; 817  :            FIRST *= y;

$LN1209@eval_all:
	fld	ST(1)
	add	eax, 32					; 00000020H
	dec	ecx
	fmul	QWORD PTR [eax-40]
	fstp	QWORD PTR [eax-40]
	fld	ST(1)
	fmul	QWORD PTR [eax-32]
	fstp	QWORD PTR [eax-32]
	fld	ST(1)
	fmul	QWORD PTR [eax-24]
	fstp	QWORD PTR [eax-24]
	fld	QWORD PTR [eax-16]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LN1209@eval_all
$LN1317@eval_all:
	cmp	edx, esi
	jge	SHORT $LN1655@eval_all
	mov	ecx, esi
	lea	eax, DWORD PTR [ebx+edx*8+8]
	sub	ecx, edx
$LC375@eval_all:
	fld	ST(1)
	add	eax, 8
	dec	ecx
	fmul	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC375@eval_all
$LN1655@eval_all:
	fstp	ST(1)

; 818  :            stacktop->value = 2*log(sqrt(stacktop->value + 1) +
; 819  :                  sqrt(stacktop->value - 1)) - log(2.0);

	fsubr	QWORD PTR [ebx]
	call	__CIsqrt
	fstp	QWORD PTR tv24038[ebp]
	fld	QWORD PTR [ebx]
	fadd	QWORD PTR __real@3ff0000000000000
	call	__CIsqrt
	fadd	QWORD PTR tv24038[ebp]
	call	__CIlog
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv24040[ebp]
	call	__CIlog
	fsubr	QWORD PTR tv24040[ebp]
	fstp	QWORD PTR [ebx]

; 820  :            break;

	jmp	$LN1270@eval_all
$LN1423@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fcomp	QWORD PTR [ebx]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN1309@eval_all

; 821  : 
; 822  :       case ATANH_NODE:
; 823  :            if ( stacktop->value >= 1.0 )
; 824  :              kb_error(2491,"Acosh argument less than 1.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0BN@BLAKMPAE@Acosh?5argument?5less?5than?51?4?6?$AA@
	push	2491					; 000009bbH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1309@eval_all:

; 825  :            y = 1/(1 - stacktop->value*stacktop->value);

	fld	QWORD PTR [ebx]

; 826  :            FIRST *= y;

	mov	esi, DWORD PTR _pcount$[ebp]
	fmul	ST(0), ST(0)
	xor	edx, edx
	fld1
	fld	ST(0)
	fsubrp	ST(2), ST(0)
	fld	ST(0)
	fdivrp	ST(2), ST(0)
	cmp	esi, 4
	jl	SHORT $LN1318@eval_all

; 825  :            y = 1/(1 - stacktop->value*stacktop->value);

	lea	ecx, DWORD PTR [esi-4]
	shr	ecx, 2
	inc	ecx
	lea	eax, DWORD PTR [ebx+16]
	lea	edx, DWORD PTR [ecx*4]

; 826  :            FIRST *= y;

$LN1212@eval_all:
	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	dec	ecx
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [eax-40]
	fld	QWORD PTR [eax-32]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [eax-24]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [eax-24]
	fld	ST(1)
	fmul	QWORD PTR [eax-16]
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LN1212@eval_all
$LN1318@eval_all:
	cmp	edx, esi
	jge	SHORT $LN1664@eval_all
	mov	ecx, esi
	lea	eax, DWORD PTR [ebx+edx*8+8]
	sub	ecx, edx
$LC370@eval_all:
	fld	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC370@eval_all
$LN1664@eval_all:
	fstp	ST(1)

; 827  :            stacktop->value = log(stacktop->value + 1)/2 -
; 828  :                  log(1 - stacktop->value)/2;

	fadd	QWORD PTR [ebx]
	call	__CIlog
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR tv24042[ebp]
	fld1
	fsub	QWORD PTR [ebx]
	call	__CIlog
	fmul	QWORD PTR __real@3fe0000000000000
	fsubr	QWORD PTR tv24042[ebp]
	fstp	QWORD PTR [ebx]

; 829  :            break;

	jmp	$LN1270@eval_all
$LN1372@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	fldz
	fcomp	QWORD PTR [ebx]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN1310@eval_all

; 830  : 
; 831  :       case LOG_NODE:
; 832  :         if ( stacktop->value <= 0.0 )
; 833  :         { sprintf(errmsg,"Log argument is %18.15f; must be positive.\n",
; 834  :               (DOUBLE)(stacktop->value));

	fld	QWORD PTR [ebx]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CM@BPFJIHDJ@Log?5argument?5is?5?$CF18?415f?$DL?5must?5be@
	push	OFFSET _errmsg
	call	_sprintf

; 835  :           sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 836  :                 file_names[node->file_no],node->line_no);

	mov	eax, OFFSET _errmsg
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1253@eval_all:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1253@eval_all
	mov	ecx, DWORD PTR [esi+12]
	push	ecx
	mov	ecx, DWORD PTR _file_names
	sub	eax, edx
	mov	edx, DWORD PTR [esi+16]
	mov	edx, DWORD PTR [ecx+edx*4]
	push	edx
	lea	eax, DWORD PTR _errmsg[eax]
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	eax
	call	_sprintf

; 837  :           kb_error(2577,errmsg, RECOVERABLE );

	push	1
	push	OFFSET _errmsg
	push	2577					; 00000a11H
	call	_kb_error
	add	esp, 28					; 0000001cH
$LN1310@eval_all:

; 838  :         }
; 839  :         for ( i = 0 ; i < pcount ; i++ )

	mov	esi, DWORD PTR _pcount$[ebp]
	xor	edx, edx
	cmp	esi, 4
	jl	SHORT $LN1319@eval_all
	lea	ecx, DWORD PTR [esi-4]
	shr	ecx, 2
	inc	ecx
	lea	eax, DWORD PTR [ebx+16]
	lea	edx, DWORD PTR [ecx*4]
	npad	6
$LL1215@eval_all:

; 840  :              stacktop->deriv[i] /= stacktop->value;

	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	dec	ecx
	fdiv	QWORD PTR [ebx]
	fstp	QWORD PTR [eax-40]
	fld	QWORD PTR [eax-32]
	fdiv	QWORD PTR [ebx]
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [eax-24]
	fdiv	QWORD PTR [ebx]
	fstp	QWORD PTR [eax-24]
	fld	QWORD PTR [eax-16]
	fdiv	QWORD PTR [ebx]
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LL1215@eval_all
$LN1319@eval_all:

; 838  :         }
; 839  :         for ( i = 0 ; i < pcount ; i++ )

	cmp	edx, esi
	jge	SHORT $LN1213@eval_all
	mov	ecx, esi
	lea	eax, DWORD PTR [ebx+edx*8+8]
	sub	ecx, edx
$LC365@eval_all:

; 840  :              stacktop->deriv[i] /= stacktop->value;

	fld	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fdiv	QWORD PTR [ebx]
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC365@eval_all
$LN1213@eval_all:

; 841  :         stacktop->value = log(stacktop->value);

	fld	QWORD PTR [ebx]
	call	__CIlog
	fstp	QWORD PTR [ebx]

; 842  :         break;

	jmp	$LN1270@eval_all
$LN1422@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fld	QWORD PTR [ebx]
	fabs
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN1311@eval_all

; 843  : 
; 844  :       case ASIN_NODE:
; 845  :         if ( fabs(stacktop->value) > 1.0 )
; 846  :         { sprintf(errmsg,"Asin argument is %18.15f, magnitude greater than 1.\n",
; 847  :               (DOUBLE)(stacktop->value));

	fld	QWORD PTR [ebx]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0DF@KNMCHGOJ@Asin?5argument?5is?5?$CF18?415f?0?5magnit@
	push	OFFSET _errmsg
	call	_sprintf

; 848  :           sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 849  :                 file_names[node->file_no],node->line_no);

	mov	eax, OFFSET _errmsg
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1254@eval_all:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1254@eval_all
	mov	ecx, DWORD PTR [esi+12]
	push	ecx
	mov	ecx, DWORD PTR _file_names
	sub	eax, edx
	mov	edx, DWORD PTR [esi+16]
	mov	edx, DWORD PTR [ecx+edx*4]
	push	edx
	lea	eax, DWORD PTR _errmsg[eax]
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	eax
	call	_sprintf

; 850  :           kb_error(2579,errmsg, RECOVERABLE );

	push	1
	push	OFFSET _errmsg
	push	2579					; 00000a13H
	call	_kb_error
	add	esp, 28					; 0000001cH
$LN1311@eval_all:

; 851  :         }
; 852  :         x = sqrt(1 - stacktop->value*stacktop->value);

	fld	QWORD PTR [ebx]
	fmul	ST(0), ST(0)
	fld1
	fsubrp	ST(1), ST(0)
	call	__CIsqrt

; 853  :         for ( i = 0 ; i < pcount ; i++ )

	mov	esi, DWORD PTR _pcount$[ebp]
	xor	edx, edx
	cmp	esi, 4
	jl	SHORT $LN1320@eval_all

; 851  :         }
; 852  :         x = sqrt(1 - stacktop->value*stacktop->value);

	lea	ecx, DWORD PTR [esi-4]
	shr	ecx, 2
	inc	ecx
	lea	eax, DWORD PTR [ebx+16]
	lea	edx, DWORD PTR [ecx*4]

; 853  :         for ( i = 0 ; i < pcount ; i++ )

$LN1218@eval_all:

; 854  :              stacktop->deriv[i] /= x;

	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	dec	ecx
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-40]
	fld	QWORD PTR [eax-32]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [eax-24]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-24]
	fld	QWORD PTR [eax-16]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LN1218@eval_all
$LN1320@eval_all:

; 853  :         for ( i = 0 ; i < pcount ; i++ )

	cmp	edx, esi
	jge	SHORT $LN1673@eval_all
	mov	ecx, esi
	lea	eax, DWORD PTR [ebx+edx*8+8]
	sub	ecx, edx
$LC360@eval_all:

; 854  :              stacktop->deriv[i] /= x;

	fld	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC360@eval_all
$LN1673@eval_all:

; 853  :         for ( i = 0 ; i < pcount ; i++ )

	fstp	ST(0)

; 855  :         stacktop->value = asin(stacktop->value);

	fld	QWORD PTR [ebx]
	call	__CIasin
	fstp	QWORD PTR [ebx]

; 856  :         break;

	jmp	$LN1270@eval_all
$LN1421@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fld	QWORD PTR [ebx]
	fabs
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN1312@eval_all

; 857  : 
; 858  :       case ACOS_NODE:
; 859  :         if ( fabs(stacktop->value) >= 1.0 )
; 860  :         { sprintf(errmsg,"Acos argument is %18.15f, magnitude greater than 1.\n",
; 861  :               (DOUBLE)(stacktop->value));

	fld	QWORD PTR [ebx]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0DF@HLEJJGHA@Acos?5argument?5is?5?$CF18?415f?0?5magnit@
	push	OFFSET _errmsg
	call	_sprintf

; 862  :           sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 863  :                 file_names[node->file_no],node->line_no);

	mov	eax, OFFSET _errmsg
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
$LL1255@eval_all:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1255@eval_all
	mov	ecx, DWORD PTR [esi+12]
	push	ecx
	mov	ecx, DWORD PTR _file_names
	sub	eax, edx
	mov	edx, DWORD PTR [esi+16]
	mov	edx, DWORD PTR [ecx+edx*4]
	push	edx
	lea	eax, DWORD PTR _errmsg[eax]
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	eax
	call	_sprintf

; 864  :           kb_error(2583,errmsg, RECOVERABLE );

	push	1
	push	OFFSET _errmsg
	push	2583					; 00000a17H
	call	_kb_error
	add	esp, 28					; 0000001cH
$LN1312@eval_all:

; 865  :         }
; 866  :         x  = -sqrt(1 - stacktop->value*stacktop->value);

	fld	QWORD PTR [ebx]
	fmul	ST(0), ST(0)
	fld1
	fsubrp	ST(1), ST(0)
	call	__CIsqrt
	fchs

; 867  :         for ( i = 0 ; i < pcount ; i++ )

	mov	esi, DWORD PTR _pcount$[ebp]
	xor	edx, edx
	cmp	esi, 4
	jl	SHORT $LN1321@eval_all

; 865  :         }
; 866  :         x  = -sqrt(1 - stacktop->value*stacktop->value);

	lea	ecx, DWORD PTR [esi-4]
	shr	ecx, 2
	inc	ecx
	lea	eax, DWORD PTR [ebx+16]
	lea	edx, DWORD PTR [ecx*4]

; 867  :         for ( i = 0 ; i < pcount ; i++ )

$LN1221@eval_all:

; 868  :              stacktop->deriv[i] /= x;

	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	dec	ecx
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-40]
	fld	QWORD PTR [eax-32]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [eax-24]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-24]
	fld	QWORD PTR [eax-16]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LN1221@eval_all
$LN1321@eval_all:

; 867  :         for ( i = 0 ; i < pcount ; i++ )

	cmp	edx, esi
	jge	SHORT $LN1682@eval_all
	mov	ecx, esi
	lea	eax, DWORD PTR [ebx+edx*8+8]
	sub	ecx, edx
$LC355@eval_all:

; 868  :              stacktop->deriv[i] /= x;

	fld	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC355@eval_all
$LN1682@eval_all:

; 867  :         for ( i = 0 ; i < pcount ; i++ )

	fstp	ST(0)

; 869  :         stacktop->value = acos(stacktop->value);

	fld	QWORD PTR [ebx]
	call	__CIacos
	fstp	QWORD PTR [ebx]

; 870  :         break;

	jmp	$LN1270@eval_all
$LN1371@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	fld	QWORD PTR [ebx]
	call	__CItan
	fst	QWORD PTR [ebx]
	mov	esi, DWORD PTR _pcount$[ebp]
	fmul	ST(0), ST(0)
	xor	edx, edx
	fadd	QWORD PTR __real@3ff0000000000000
	cmp	esi, 4
	jl	SHORT $LN1313@eval_all

; 871  : 
; 872  :       case TAN_NODE:
; 873  :         stacktop->value = tan(stacktop->value);

	lea	ecx, DWORD PTR [esi-4]
	shr	ecx, 2
	inc	ecx
	lea	eax, DWORD PTR [ebx+16]
	lea	edx, DWORD PTR [ecx*4]

; 874  :         x = 1+stacktop->value*stacktop->value;
; 875  :         for ( i = 0 ; i < pcount ; i++ )

$LN1224@eval_all:

; 876  :              stacktop->deriv[i] *= x;

	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	dec	ecx
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax-40]
	fld	QWORD PTR [eax-32]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [eax-24]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax-24]
	fld	ST(0)
	fmul	QWORD PTR [eax-16]
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LN1224@eval_all
$LN1313@eval_all:

; 874  :         x = 1+stacktop->value*stacktop->value;
; 875  :         for ( i = 0 ; i < pcount ; i++ )

	cmp	edx, esi
	jge	$LN1698@eval_all
	mov	ecx, esi
	lea	eax, DWORD PTR [ebx+edx*8+8]
	sub	ecx, edx
$LC351@eval_all:

; 876  :              stacktop->deriv[i] *= x;

	fld	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC351@eval_all

; 877  :         break;

	jmp	$LN1698@eval_all
$LN1370@eval_all:

; 878  :      
; 879  :       case CHS_NODE:
; 880  :         for ( i = 0 ; i < pcount ; i++ )

	mov	esi, DWORD PTR _pcount$[ebp]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	xor	edx, edx
	fstp	ST(0)
	cmp	esi, 4
	jl	SHORT $LN1314@eval_all

; 878  :      
; 879  :       case CHS_NODE:
; 880  :         for ( i = 0 ; i < pcount ; i++ )

	lea	ecx, DWORD PTR [esi-4]
	shr	ecx, 2
	inc	ecx
	lea	eax, DWORD PTR [ebx+16]
	lea	edx, DWORD PTR [ecx*4]
$LL1227@eval_all:

; 881  :              stacktop->deriv[i] = -stacktop->deriv[i];

	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	dec	ecx
	fchs
	fstp	QWORD PTR [eax-40]
	fld	QWORD PTR [eax-32]
	fchs
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [eax-24]
	fchs
	fstp	QWORD PTR [eax-24]
	fld	QWORD PTR [eax-16]
	fchs
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LL1227@eval_all
$LN1314@eval_all:

; 878  :      
; 879  :       case CHS_NODE:
; 880  :         for ( i = 0 ; i < pcount ; i++ )

	cmp	edx, esi
	jge	SHORT $LN1225@eval_all
	mov	ecx, esi
	lea	eax, DWORD PTR [ebx+edx*8+8]
	sub	ecx, edx
$LC347@eval_all:

; 881  :              stacktop->deriv[i] = -stacktop->deriv[i];

	fld	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fchs
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC347@eval_all
$LN1225@eval_all:

; 882  :         stacktop->value = -stacktop->value;

	fld	QWORD PTR [ebx]
	fchs
	fstp	QWORD PTR [ebx]

; 883  :         break;

	jmp	$LN1270@eval_all
$LN1369@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	fld	QWORD PTR [ebx]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1315@eval_all

; 884  :      
; 885  :       case INV_NODE:
; 886  :         if ( stacktop->value == 0.0 )
; 887  :              kb_error(2495,"Division by zero.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0BD@KKBNAHFA@Division?5by?5zero?4?6?$AA@
	push	2495					; 000009bfH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1315@eval_all:

; 888  :         for ( i = 0 ; i < pcount ; i++ )

	mov	esi, DWORD PTR _pcount$[ebp]
	xor	edx, edx
	cmp	esi, 4
	jl	SHORT $LN1322@eval_all
	lea	ecx, DWORD PTR [esi-4]
	shr	ecx, 2
	inc	ecx
	lea	eax, DWORD PTR [ebx+16]
	lea	edx, DWORD PTR [ecx*4]
$LL1230@eval_all:

; 889  :              stacktop->deriv[i] /= stacktop->value*stacktop->value;

	fld	QWORD PTR [ebx]
	add	eax, 32					; 00000020H
	dec	ecx
	fmul	ST(0), ST(0)
	fdivr	QWORD PTR [eax-40]
	fstp	QWORD PTR [eax-40]
	fld	QWORD PTR [ebx]
	fmul	ST(0), ST(0)
	fdivr	QWORD PTR [eax-32]
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [ebx]
	fmul	ST(0), ST(0)
	fdivr	QWORD PTR [eax-24]
	fstp	QWORD PTR [eax-24]
	fld	QWORD PTR [ebx]
	fmul	ST(0), ST(0)
	fdivr	QWORD PTR [eax-16]
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LL1230@eval_all
$LN1322@eval_all:

; 888  :         for ( i = 0 ; i < pcount ; i++ )

	cmp	edx, esi
	jge	SHORT $LN1228@eval_all
	mov	ecx, esi
	lea	eax, DWORD PTR [ebx+edx*8+8]
	sub	ecx, edx
	npad	6
$LC342@eval_all:

; 889  :              stacktop->deriv[i] /= stacktop->value*stacktop->value;

	fld	QWORD PTR [ebx]
	add	eax, 8
	dec	ecx
	fmul	ST(0), ST(0)
	fdivr	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC342@eval_all
$LN1228@eval_all:

; 890  :         stacktop->value = 1/stacktop->value;

	fld1
	fdiv	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]

; 891  :         break;

	jmp	$LN1270@eval_all
$LN1368@eval_all:

; 892  : 
; 893  :       /* attribute values */
; 894  :       case GET_SQ_MEAN_CURV_NODE:
; 895  :            if ( node->op1.localnum ) 

	mov	esi, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	test	esi, esi
	je	SHORT $LN338@eval_all

; 896  :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	eax, DWORD PTR [esi+edx+216]
	imul	eax, 104				; 00000068H
	mov	eax, DWORD PTR _localstack$[ebp+eax]

; 898  :            stacktop->value = vertex_sq_mean_curvature(id);

	push	eax
	call	_vertex_sq_mean_curvature
	add	esp, 4

; 899  :            FIRST = 0.0;
; 900  :            break;

	jmp	$LN1746@eval_all
$LN338@eval_all:

; 897  :            else id = q_id;

	mov	eax, edx

; 898  :            stacktop->value = vertex_sq_mean_curvature(id);

	push	eax
	call	_vertex_sq_mean_curvature
	add	esp, 4

; 899  :            FIRST = 0.0;
; 900  :            break;

	jmp	$LN1746@eval_all
$LN1367@eval_all:

; 901  : 
; 902  :       case GET_MEANCURV_NODE:
; 903  :            if ( node->op1.localnum ) 

	mov	esi, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	test	esi, esi
	je	SHORT $LN332@eval_all

; 904  :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	eax, DWORD PTR [esi+edx+216]
	imul	eax, 104				; 00000068H
	mov	eax, DWORD PTR _localstack$[ebp+eax]

; 906  :            stacktop->value = vertex_mean_curvature(id);

	push	eax
	call	_vertex_mean_curvature
	add	esp, 4

; 907  :            FIRST = 0.0;
; 908  :            break;

	jmp	$LN1746@eval_all
$LN332@eval_all:

; 905  :            else id = q_id;

	mov	eax, edx

; 906  :            stacktop->value = vertex_mean_curvature(id);

	push	eax
	call	_vertex_mean_curvature
	add	esp, 4

; 907  :            FIRST = 0.0;
; 908  :            break;

	jmp	$LN1746@eval_all
$LN1366@eval_all:

; 909  : 
; 910  :       case GET_LENGTH_NODE:
; 911  :            if ( node->op1.localnum ) 

	mov	esi, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	test	esi, esi
	je	SHORT $LN326@eval_all

; 912  :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	eax, DWORD PTR [esi+edx+216]
	imul	eax, 104				; 00000068H
	mov	esi, DWORD PTR _localstack$[ebp+eax]
	jmp	SHORT $LN325@eval_all
$LN326@eval_all:

; 913  :            else id = q_id;

	mov	esi, edx
$LN325@eval_all:

; 914  :            calc_edge(id);

	push	esi
	call	_calc_edge

; 915  :            ++stacktop;
; 916  :            stacktop->value = get_edge_length(id);

	push	esi
	add	ebx, 104				; 00000068H
	call	_get_edge_length
	add	esp, 8

; 917  :            FIRST = 0.0;
; 918  :            break;

	jmp	$LN1746@eval_all
$LN1365@eval_all:

; 919  : 
; 920  :       case GET_DIHEDRAL_NODE:
; 921  :            if ( node->op1.localnum ) 

	mov	esi, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	test	esi, esi
	je	SHORT $LN320@eval_all

; 922  :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	eax, DWORD PTR [esi+edx+216]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR _localstack$[ebp+eax]
	jmp	SHORT $LN319@eval_all
$LN320@eval_all:

; 923  :            else id = q_id;

	mov	ecx, edx
$LN319@eval_all:

; 924  :            ++stacktop;
; 925  :            if ( id_type(id) == EDGE )    stacktop->value = dihedral(id);

	mov	eax, ecx
	shr	eax, 29					; 0000001dH
	add	ebx, 104				; 00000068H
	cmp	eax, 1
	jne	SHORT $LN318@eval_all
	push	ecx
	call	_dihedral
	add	esp, 4
	jmp	$LN1746@eval_all
$LN318@eval_all:

; 926  :            else if ( id_type(id) == VERTEX )    stacktop->value = vertex_angle(id);

	test	eax, eax
	jne	$LN316@eval_all
	push	ecx
	call	_vertex_angle
	add	esp, 4
	jmp	$LN1746@eval_all
$LN1364@eval_all:

; 927  :            else    stacktop->value = 0.0;
; 928  :            FIRST = 0.0;
; 929  :            break;
; 930  : 
; 931  :       case VALENCE_NODE:
; 932  :       case GET_VALENCE_NODE:
; 933  :            if ( node->op1.localnum ) 

	mov	esi, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	test	esi, esi
	je	SHORT $LN310@eval_all

; 934  :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	eax, DWORD PTR [esi+edx+216]
	imul	eax, 104				; 00000068H
	mov	eax, DWORD PTR _localstack$[ebp+eax]
	jmp	SHORT $LN309@eval_all
$LN310@eval_all:

; 935  :            else id = q_id;

	mov	eax, edx
$LN309@eval_all:

; 936  :            ++stacktop;
; 937  :            switch ( id_type(id) )

	mov	ecx, eax
	shr	ecx, 29					; 0000001dH
	add	ebx, 104				; 00000068H
	cmp	ecx, 3
	ja	$LN667@eval_all
	jmp	DWORD PTR $LN1756@eval_all[ecx*4]
$LN306@eval_all:

; 938  :            { case VERTEX:
; 939  :                     stacktop->value = (REAL)get_vertex_evalence(id);

	push	eax
	call	_get_vertex_evalence
	mov	DWORD PTR tv24527[ebp], eax
	fild	DWORD PTR tv24527[ebp]

; 946  :                  break;
; 947  :              case BODY:
; 948  :                     stacktop->value = (REAL)get_body_valence(id);

	add	esp, 4

; 949  :                  break;
; 950  :            }
; 951  :            FIRST = 0.0;
; 952  :            break;

	jmp	$LN1746@eval_all
$LN305@eval_all:

; 940  :                  break;
; 941  :              case EDGE:
; 942  :                     stacktop->value = (REAL)get_edge_valence(id);

	push	eax
	call	_get_edge_valence
	mov	DWORD PTR tv24525[ebp], eax
	fild	DWORD PTR tv24525[ebp]

; 946  :                  break;
; 947  :              case BODY:
; 948  :                     stacktop->value = (REAL)get_body_valence(id);

	add	esp, 4

; 949  :                  break;
; 950  :            }
; 951  :            FIRST = 0.0;
; 952  :            break;

	jmp	$LN1746@eval_all
$LN304@eval_all:

; 943  :                  break;
; 944  :              case FACET:
; 945  :                     stacktop->value = (REAL)get_facet_valence(id);

	push	eax
	call	_get_facet_valence
	mov	DWORD PTR tv24523[ebp], eax
	fild	DWORD PTR tv24523[ebp]

; 946  :                  break;
; 947  :              case BODY:
; 948  :                     stacktop->value = (REAL)get_body_valence(id);

	add	esp, 4

; 949  :                  break;
; 950  :            }
; 951  :            FIRST = 0.0;
; 952  :            break;

	jmp	$LN1746@eval_all
$LN303@eval_all:

; 946  :                  break;
; 947  :              case BODY:
; 948  :                     stacktop->value = (REAL)get_body_valence(id);

	push	eax
	call	_get_body_valence
	mov	DWORD PTR tv24521[ebp], eax
	fild	DWORD PTR tv24521[ebp]
	add	esp, 4

; 949  :                  break;
; 950  :            }
; 951  :            FIRST = 0.0;
; 952  :            break;

	jmp	$LN1746@eval_all
$LN1363@eval_all:

; 953  : 
; 954  :       case GET_EDGE_NODE:
; 955  :            if ( node->op1.localnum ) 

	mov	esi, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	test	esi, esi
	je	SHORT $LN298@eval_all

; 956  :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	eax, DWORD PTR [esi+edx+216]
	imul	eax, 104				; 00000068H
	mov	esi, DWORD PTR _localstack$[ebp+eax]
	jmp	SHORT $LN297@eval_all
$LN298@eval_all:

; 957  :            else id = q_id;

	mov	esi, edx
$LN297@eval_all:

; 958  :            ++stacktop;
; 959  :            stacktop->value = (REAL)(ordinal(get_fe_edge(id))+1);

	push	esi
	add	ebx, 104				; 00000068H
	call	_get_fe_edge
	add	esp, 4
	test	eax, 268435456				; 10000000H
	je	SHORT $LN841@eval_all
	push	esi
	call	_get_fe_edge
	and	eax, 134217727				; 07ffffffH
	add	esp, 4
	inc	eax
	mov	DWORD PTR tv24517[ebp], eax
	fild	DWORD PTR tv24517[ebp]

; 960  :            FIRST = 0.0;
; 961  :            break;

	jmp	$LN1746@eval_all
$LN841@eval_all:

; 958  :            ++stacktop;
; 959  :            stacktop->value = (REAL)(ordinal(get_fe_edge(id))+1);

	or	eax, -1
	inc	eax
	mov	DWORD PTR tv24517[ebp], eax
	fild	DWORD PTR tv24517[ebp]

; 960  :            FIRST = 0.0;
; 961  :            break;

	jmp	$LN1746@eval_all
$LN1362@eval_all:

; 962  : 
; 963  :       case GET_FACET_NODE:
; 964  :            if ( node->op1.localnum ) 

	mov	esi, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	test	esi, esi
	je	SHORT $LN292@eval_all

; 965  :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	eax, DWORD PTR [esi+edx+216]
	imul	eax, 104				; 00000068H
	mov	esi, DWORD PTR _localstack$[ebp+eax]
	jmp	SHORT $LN291@eval_all
$LN292@eval_all:

; 966  :            else id = q_id;

	mov	esi, edx
$LN291@eval_all:

; 967  :            ++stacktop;
; 968  :            stacktop->value = (REAL)(ordinal(get_fe_facet(id))+1);

	push	esi
	add	ebx, 104				; 00000068H
	call	_get_fe_facet
	add	esp, 4
	test	eax, 268435456				; 10000000H
	je	SHORT $LN843@eval_all
	push	esi
	call	_get_fe_facet
	and	eax, 134217727				; 07ffffffH
	add	esp, 4
	inc	eax
	mov	DWORD PTR tv24513[ebp], eax
	fild	DWORD PTR tv24513[ebp]

; 969  :            FIRST = 0.0;
; 970  :            break;

	jmp	$LN1746@eval_all
$LN843@eval_all:

; 967  :            ++stacktop;
; 968  :            stacktop->value = (REAL)(ordinal(get_fe_facet(id))+1);

	or	eax, -1
	inc	eax
	mov	DWORD PTR tv24513[ebp], eax
	fild	DWORD PTR tv24513[ebp]

; 969  :            FIRST = 0.0;
; 970  :            break;

	jmp	$LN1746@eval_all
$LN1361@eval_all:

; 971  : 
; 972  :       case AREA_NODE:
; 973  :       case GET_AREA_NODE:
; 974  :            if ( node->op1.localnum ) 

	mov	esi, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	test	esi, esi
	je	SHORT $LN286@eval_all

; 975  :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	eax, DWORD PTR [esi+edx+216]
	imul	eax, 104				; 00000068H
	mov	esi, DWORD PTR _localstack$[ebp+eax]
	jmp	SHORT $LN285@eval_all
$LN286@eval_all:

; 976  :            else id = q_id;

	mov	esi, edx
$LN285@eval_all:

; 977  :            ++stacktop;
; 978  :            stacktop->value = get_facet_area(id);

	push	esi
	add	ebx, 104				; 00000068H
	call	_recalc_facet_area
	mov	ecx, DWORD PTR _web+236
	add	esp, 4
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+esi*4]
	fld	QWORD PTR [edx+40]

; 979  :            FIRST = 0.0;
; 980  :            break;

	jmp	$LN1746@eval_all
$LN1360@eval_all:

; 981  : 
; 982  :       case GET_WRAP_NODE:
; 983  :            if ( node->op1.localnum ) 

	mov	esi, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	test	esi, esi
	je	SHORT $LN280@eval_all

; 984  :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	eax, DWORD PTR _localbase$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	edx, DWORD PTR [esi+ecx+216]
	imul	edx, 104				; 00000068H
	mov	eax, DWORD PTR _localstack$[ebp+edx]
	jmp	SHORT $LN279@eval_all
$LN280@eval_all:

; 985  :            else id = q_id;

	mov	eax, edx
$LN279@eval_all:

; 986  :            ++stacktop;
; 987  :            stacktop->value = (REAL)get_edge_wrap(id); 

	push	eax
	add	ebx, 104				; 00000068H
	call	_get_edge_wrap
	mov	DWORD PTR tv24508[ebp], eax
	fild	DWORD PTR tv24508[ebp]
	add	esp, 4

; 988  :            FIRST = 0.0;
; 989  :            break;

	jmp	$LN1746@eval_all
$LN1359@eval_all:

; 990  : 
; 991  :       case GET_PRESSURE_NODE:
; 992  :            if ( node->op1.localnum ) 

	mov	esi, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	test	esi, esi
	je	SHORT $LN274@eval_all

; 993  :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	eax, DWORD PTR _localbase$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	edx, DWORD PTR [esi+ecx+216]
	imul	edx, 104				; 00000068H
	mov	eax, DWORD PTR _localstack$[ebp+edx]
	jmp	SHORT $LN273@eval_all
$LN274@eval_all:

; 994  :            else id = q_id;

	mov	eax, edx
$LN273@eval_all:

; 995  :            ++stacktop;
; 996  :            switch ( id_type(id) )

	mov	ecx, eax
	and	ecx, -536870912				; e0000000H
	add	ebx, 104				; 00000068H
	cmp	ecx, 1610612736				; 60000000H
	je	SHORT $LN270@eval_all

; 998  :                default: kb_error(1025,"Pressure only for bodies.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0BL@KPLMFDOD@Pressure?5only?5for?5bodies?4?6?$AA@
	push	1025					; 00000401H
	call	_kb_error
	add	esp, 12					; 0000000cH
	jmp	$LN667@eval_all
$LN270@eval_all:

; 997  :              { case BODY:    stacktop->value = get_body_pressure(id); break;

	push	eax
	call	_get_body_pressure
	add	esp, 4

; 999  :              }
; 1000 :            FIRST = 0.0;
; 1001 :            break;

	jmp	$LN1746@eval_all
$LN1358@eval_all:

; 1002 : 
; 1003 : 
; 1004 :       case GET_QUANTITY_NODE:
; 1005 :            if ( node->op1.localnum ) 

	mov	eax, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	test	eax, eax
	je	SHORT $LN264@eval_all

; 1006 :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	edx, DWORD PTR _localbase$[ebp]
	mov	ecx, DWORD PTR [edx]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	edx, DWORD PTR [eax+ecx+216]
	imul	edx, 104				; 00000068H
	mov	eax, DWORD PTR _localstack$[ebp+edx]
	jmp	SHORT $LN263@eval_all
$LN264@eval_all:

; 1007 :            else id = q_id;

	mov	eax, edx
$LN263@eval_all:

; 1008 :            ++stacktop;
; 1009 :            stacktop->value = quantity_attribute(id,node->op2.quant_id);

	mov	ecx, DWORD PTR [esi+136]
	push	ecx
	push	eax
	add	ebx, 104				; 00000068H
	call	_quantity_attribute
	add	esp, 8

; 1010 :            FIRST = 0.0;
; 1011 :            break;

	jmp	$LN1746@eval_all
$LN1357@eval_all:

; 1012 : 
; 1013 :       case GET_INSTANCE_NODE:
; 1014 :            if ( node->op1.localnum ) 

	mov	eax, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	test	eax, eax
	je	SHORT $LN258@eval_all

; 1015 :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	edx, DWORD PTR _localbase$[ebp]
	mov	ecx, DWORD PTR [edx]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	edx, DWORD PTR [eax+ecx+216]
	imul	edx, 104				; 00000068H
	mov	eax, DWORD PTR _localstack$[ebp+edx]
	jmp	SHORT $LN257@eval_all
$LN258@eval_all:

; 1016 :            else id = q_id;

	mov	eax, edx
$LN257@eval_all:

; 1017 :            ++stacktop;
; 1018 :            stacktop->value = instance_attribute(id,node->op2.meth_id);

	mov	ecx, DWORD PTR [esi+136]
	push	ecx
	push	eax
	add	ebx, 104				; 00000068H
	call	_instance_attribute
	add	esp, 8

; 1019 :            FIRST = 0.0;
; 1020 :            break;

	jmp	$LN1746@eval_all
$LN1356@eval_all:

; 1021 : 
; 1022 :       case GET_PHASE_NODE:
; 1023 :            if ( node->op1.localnum ) 

	mov	esi, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	test	esi, esi
	je	SHORT $LN252@eval_all

; 1024 :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	edx, DWORD PTR _localbase$[ebp]
	mov	eax, DWORD PTR [edx]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	ecx, DWORD PTR [esi+eax+216]
	imul	ecx, 104				; 00000068H
	mov	eax, DWORD PTR _localstack$[ebp+ecx]
	jmp	SHORT $LN251@eval_all
$LN252@eval_all:

; 1025 :            else id = q_id;

	mov	eax, edx
$LN251@eval_all:

; 1026 :            ++stacktop;
; 1027 :            switch ( id_type(id) )

	mov	ecx, eax
	shr	ecx, 29					; 0000001dH
	add	ebx, 104				; 00000068H
	sub	ecx, 2
	je	$LN248@eval_all
	dec	ecx
	je	SHORT $LN247@eval_all

; 1031 :                 default: 
; 1032 :                  kb_error(1026,"Phase of wrong type element.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0BO@GAPLEMFA@Phase?5of?5wrong?5type?5element?4?6?$AA@
	push	1026					; 00000402H
	call	_kb_error
	add	esp, 12					; 0000000cH
	jmp	$LN667@eval_all
$LN247@eval_all:

; 1030 :                 case BODY:    stacktop->value = (REAL)get_b_phase(id); break;

	mov	edx, DWORD PTR _B_PHASE_ATTR
	imul	edx, 240				; 000000f0H
	add	edx, DWORD PTR _web+440
	add	edi, edx
	cmp	DWORD PTR [edi+88], 0
	je	SHORT $LN847@eval_all
	test	eax, 268435456				; 10000000H
	je	SHORT $LN847@eval_all
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edi+64]
	mov	ecx, DWORD PTR [edx+eax]
	mov	DWORD PTR tv2326[ebp], ecx
	fild	DWORD PTR tv2326[ebp]
	jmp	$LN1746@eval_all
$LN847@eval_all:
	mov	DWORD PTR tv2326[ebp], 0
	fild	DWORD PTR tv2326[ebp]
	jmp	$LN1746@eval_all
$LN248@eval_all:

; 1028 :              { 
; 1029 :                 case FACET:  stacktop->value = (REAL)get_f_phase(id); break;

	mov	edx, DWORD PTR _F_PHASE_ATTR
	imul	edx, 240				; 000000f0H
	add	edx, DWORD PTR _web+328
	add	edi, edx
	cmp	DWORD PTR [edi+88], 0
	je	SHORT $LN845@eval_all
	test	eax, 268435456				; 10000000H
	je	SHORT $LN845@eval_all
	mov	ecx, DWORD PTR _web+236
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edi+64]
	mov	ecx, DWORD PTR [edx+eax]
	mov	DWORD PTR tv2302[ebp], ecx
	fild	DWORD PTR tv2302[ebp]

; 1033 :              }
; 1034 :            FIRST = 0.0;
; 1035 :            break;

	jmp	$LN1746@eval_all
$LN845@eval_all:

; 1028 :              { 
; 1029 :                 case FACET:  stacktop->value = (REAL)get_f_phase(id); break;

	mov	DWORD PTR tv2302[ebp], 0
	fild	DWORD PTR tv2302[ebp]

; 1033 :              }
; 1034 :            FIRST = 0.0;
; 1035 :            break;

	jmp	$LN1746@eval_all
$LN1355@eval_all:

; 1036 : 
; 1037 :       case DENSITY_NODE:
; 1038 :       case GET_DENSITY_NODE:
; 1039 :            if ( node->op1.localnum ) 

	mov	esi, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	test	esi, esi
	je	SHORT $LN241@eval_all

; 1040 :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	edx, DWORD PTR _localbase$[ebp]
	mov	eax, DWORD PTR [edx]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	ecx, DWORD PTR [esi+eax+216]
	imul	ecx, 104				; 00000068H
	mov	eax, DWORD PTR _localstack$[ebp+ecx]
	jmp	SHORT $LN240@eval_all
$LN241@eval_all:

; 1041 :            else id = q_id;

	mov	eax, edx
$LN240@eval_all:

; 1042 :            ++stacktop;
; 1043 :            switch ( id_type(id) )

	mov	ecx, eax
	shr	ecx, 29					; 0000001dH
	add	ebx, 104				; 00000068H
	dec	ecx
	je	SHORT $LN237@eval_all
	dec	ecx
	je	SHORT $LN236@eval_all
	dec	ecx
	je	SHORT $LN235@eval_all

; 1047 :                default: kb_error(1027,"Density of wrong type element.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CA@OHHPJEHI@Density?5of?5wrong?5type?5element?4?6?$AA@
	push	1027					; 00000403H
	call	_kb_error
	add	esp, 12					; 0000000cH
	jmp	$LN667@eval_all
$LN235@eval_all:

; 1046 :                case BODY:    stacktop->value = get_body_density(id); break;

	push	eax
	call	_get_body_density
	add	esp, 4
	jmp	$LN1746@eval_all
$LN236@eval_all:

; 1045 :                case FACET:    stacktop->value = get_facet_density(id); break;

	mov	edx, DWORD PTR _web+236
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [eax+32]
	jmp	$LN1746@eval_all
$LN237@eval_all:

; 1044 :              { case EDGE:    stacktop->value = get_edge_density(id); break;

	mov	ecx, DWORD PTR _web+124
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+40]

; 1048 :              }
; 1049 :            FIRST = 0.0;
; 1050 :            break;

	jmp	$LN1746@eval_all
$LN1354@eval_all:

; 1051 : 
; 1052 :       case VOLUME_NODE:
; 1053 :       case GET_VOLUME_NODE:
; 1054 :            if ( node->op1.localnum ) 

	mov	esi, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	test	esi, esi
	je	SHORT $LN229@eval_all

; 1055 :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	eax, DWORD PTR _localbase$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	edx, DWORD PTR [esi+ecx+216]
	imul	edx, 104				; 00000068H
	mov	eax, DWORD PTR _localstack$[ebp+edx]

; 1057 :            ++stacktop;
; 1058 :            stacktop->value = get_body_volume(id);

	push	eax
	add	ebx, 104				; 00000068H
	call	_get_body_volume
	add	esp, 4

; 1059 :            FIRST = 0.0;
; 1060 :            break;

	jmp	$LN1746@eval_all
$LN229@eval_all:

; 1056 :            else id = q_id;

	mov	eax, edx

; 1057 :            ++stacktop;
; 1058 :            stacktop->value = get_body_volume(id);

	push	eax
	add	ebx, 104				; 00000068H
	call	_get_body_volume
	add	esp, 4

; 1059 :            FIRST = 0.0;
; 1060 :            break;

	jmp	$LN1746@eval_all
$LN1353@eval_all:

; 1061 : 
; 1062 :       case ID_NODE:
; 1063 :       case GET_ID_NODE:
; 1064 :       case GET_OID_NODE:
; 1065 :            if ( node->op1.localnum ) 

	mov	esi, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	test	esi, esi
	je	SHORT $LN223@eval_all

; 1066 :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	eax, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [eax]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	eax, DWORD PTR [esi+edx+216]
	imul	eax, 104				; 00000068H
	mov	eax, DWORD PTR _localstack$[ebp+eax]
	jmp	SHORT $LN222@eval_all
$LN223@eval_all:

; 1067 :            else id = q_id;

	mov	eax, edx
$LN222@eval_all:

; 1068 :            ++stacktop;

	add	ebx, 104				; 00000068H

; 1069 :            if ( (node->type == GET_OID_NODE) && inverted(id) )

	cmp	ecx, 10195				; 000027d3H
	jne	SHORT $LN221@eval_all
	test	eax, 134217728				; 08000000H
	je	SHORT $LN221@eval_all

; 1070 :                 stacktop->value = -(REAL)(ordinal(id)+1);

	test	eax, 268435456				; 10000000H
	je	SHORT $LN849@eval_all
	and	eax, 134217727				; 07ffffffH
	inc	eax
	mov	DWORD PTR tv24477[ebp], eax
	fild	DWORD PTR tv24477[ebp]
	fchs
	jmp	$LN1746@eval_all
$LN849@eval_all:
	or	eax, -1
	inc	eax
	mov	DWORD PTR tv24477[ebp], eax
	fild	DWORD PTR tv24477[ebp]
	fchs
	jmp	$LN1746@eval_all
$LN221@eval_all:

; 1071 :            else    stacktop->value = (REAL)(ordinal(id)+1);

	test	eax, 268435456				; 10000000H
	je	SHORT $LN851@eval_all
	and	eax, 134217727				; 07ffffffH
	inc	eax
	mov	DWORD PTR tv24476[ebp], eax
	fild	DWORD PTR tv24476[ebp]

; 1072 :            FIRST = 0.0;
; 1073 :            break;

	jmp	$LN1746@eval_all
$LN851@eval_all:

; 1071 :            else    stacktop->value = (REAL)(ordinal(id)+1);

	or	eax, -1
	inc	eax
	mov	DWORD PTR tv24476[ebp], eax
	fild	DWORD PTR tv24476[ebp]

; 1072 :            FIRST = 0.0;
; 1073 :            break;

	jmp	$LN1746@eval_all
$LN1420@eval_all:

; 1074 : 
; 1075 :       case ORIGINAL_NODE:
; 1076 :       case GET_ORIGINAL_NODE:
; 1077 :            if ( node->op1.localnum ) 

	mov	esi, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	test	esi, esi
	je	SHORT $LN215@eval_all

; 1078 :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	eax, DWORD PTR [esi+edx+216]
	imul	eax, 104				; 00000068H
	mov	eax, DWORD PTR _localstack$[ebp+eax]
	jmp	SHORT $LN214@eval_all
$LN215@eval_all:

; 1079 :            else id = q_id;

	mov	eax, edx
$LN214@eval_all:

; 1080 :            ++stacktop;

	add	ebx, 104				; 00000068H

; 1081 :            stacktop->value = valid_id(id) ? (REAL)ordinal(get_original(id))+1:0;

	test	eax, 268435456				; 10000000H
	je	SHORT $LN1517@eval_all
	mov	ecx, eax
	shr	ecx, 29					; 0000001dH
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _web[ecx+12]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+20]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN853@eval_all
	and	eax, 134217727				; 07ffffffH
	mov	DWORD PTR tv2458[ebp], eax
	fiadd	DWORD PTR tv2458[ebp]
	jmp	$LN1746@eval_all
$LN853@eval_all:
	mov	DWORD PTR tv2458[ebp], -1
	fiadd	DWORD PTR tv2458[ebp]
	jmp	$LN1746@eval_all
$LN1517@eval_all:
	fstp	ST(0)
	fldz

; 1082 :            FIRST = 0.0;
; 1083 :            break;

	jmp	$LN1746@eval_all
$LN1352@eval_all:

; 1084 : 
; 1085 :       case GET_FRONTCOLOR_NODE:
; 1086 :            if ( node->op1.localnum ) 

	mov	esi, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	test	esi, esi
	je	SHORT $LN209@eval_all

; 1087 :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	eax, DWORD PTR [esi+edx+216]
	imul	eax, 104				; 00000068H
	mov	eax, DWORD PTR _localstack$[ebp+eax]
	jmp	SHORT $LN208@eval_all
$LN209@eval_all:

; 1088 :            else id = q_id;

	mov	eax, edx
$LN208@eval_all:

; 1089 :            ++stacktop;
; 1090 :            stacktop->value = (REAL)get_facet_frontcolor(id); 

	mov	ecx, DWORD PTR _web+236
	add	ebx, 104				; 00000068H
	test	eax, 134217728				; 08000000H
	je	SHORT $LN857@eval_all
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	movsx	eax, WORD PTR [edx+50]
	mov	DWORD PTR tv2495[ebp], eax
	fild	DWORD PTR tv2495[ebp]

; 1091 :            FIRST = 0.0;
; 1092 :            break;

	jmp	$LN1746@eval_all
$LN857@eval_all:

; 1089 :            ++stacktop;
; 1090 :            stacktop->value = (REAL)get_facet_frontcolor(id); 

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	movsx	eax, WORD PTR [edx+48]
	mov	DWORD PTR tv2495[ebp], eax
	fild	DWORD PTR tv2495[ebp]

; 1091 :            FIRST = 0.0;
; 1092 :            break;

	jmp	$LN1746@eval_all
$LN1351@eval_all:

; 1093 : 
; 1094 :       case GET_COLOR_NODE:
; 1095 :            if ( node->op1.localnum ) 

	mov	esi, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	test	esi, esi
	je	SHORT $LN203@eval_all

; 1096 :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	eax, DWORD PTR [esi+edx+216]
	imul	eax, 104				; 00000068H
	mov	eax, DWORD PTR _localstack$[ebp+eax]
	jmp	SHORT $LN202@eval_all
$LN203@eval_all:

; 1097 :            else id = q_id;

	mov	eax, edx
$LN202@eval_all:

; 1098 :            ++stacktop;
; 1099 :            switch ( id_type(id) )

	mov	ecx, eax
	shr	ecx, 29					; 0000001dH
	add	ebx, 104				; 00000068H
	dec	ecx
	je	SHORT $LN199@eval_all
	dec	ecx
	je	SHORT $LN198@eval_all

; 1102 :               default:    stacktop->value = 0.0;

	fldz
	jmp	$LN1746@eval_all
$LN198@eval_all:

; 1101 :               case FACET:   stacktop->value = (REAL)get_facet_color(id); break;

	mov	ecx, DWORD PTR _web+236
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	movsx	eax, WORD PTR [edx+48]
	mov	DWORD PTR tv24464[ebp], eax
	fild	DWORD PTR tv24464[ebp]
	jmp	$LN1746@eval_all
$LN199@eval_all:

; 1100 :             { case EDGE:    stacktop->value = (REAL)get_edge_color(id); break;

	mov	ecx, DWORD PTR _web+124
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	movsx	eax, WORD PTR [edx+56]
	mov	DWORD PTR tv24463[ebp], eax
	fild	DWORD PTR tv24463[ebp]

; 1103 :             }
; 1104 :            FIRST = 0.0;
; 1105 :            break;

	jmp	$LN1746@eval_all
$LN1350@eval_all:

; 1106 : 
; 1107 :       case GET_BACKCOLOR_NODE:
; 1108 :            if ( node->op1.localnum ) 

	mov	esi, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	test	esi, esi
	je	SHORT $LN192@eval_all

; 1109 :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	eax, DWORD PTR [esi+edx+216]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR _localstack$[ebp+eax]
	jmp	SHORT $LN191@eval_all
$LN192@eval_all:

; 1110 :            else id = q_id;

	mov	ecx, edx
$LN191@eval_all:

; 1111 :            ++stacktop;
; 1112 :            switch ( id_type(id) )

	mov	eax, ecx
	shr	eax, 29					; 0000001dH
	add	ebx, 104				; 00000068H
	sub	eax, 2
	je	SHORT $LN188@eval_all

; 1114 :                    break;
; 1115 :               default:    stacktop->value = 0.0;

	fldz
	jmp	$LN1746@eval_all
$LN188@eval_all:

; 1113 :             { case FACET: stacktop->value = (REAL)get_facet_backcolor(id);

	mov	edx, DWORD PTR _web+236
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN859@eval_all
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	movsx	ecx, WORD PTR [eax+48]
	mov	DWORD PTR tv2566[ebp], ecx
	fild	DWORD PTR tv2566[ebp]

; 1116 :             }
; 1117 :            FIRST = 0.0;
; 1118 :            break;

	jmp	$LN1746@eval_all
$LN859@eval_all:

; 1113 :             { case FACET: stacktop->value = (REAL)get_facet_backcolor(id);

	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	movsx	ecx, WORD PTR [eax+50]
	mov	DWORD PTR tv2566[ebp], ecx
	fild	DWORD PTR tv2566[ebp]

; 1116 :             }
; 1117 :            FIRST = 0.0;
; 1118 :            break;

	jmp	$LN1746@eval_all
$LN1349@eval_all:

; 1119 : 
; 1120 : 
; 1121 :       case GET_FRONTBODY_NODE:
; 1122 :            if ( node->op1.localnum ) 

	mov	esi, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	test	esi, esi
	je	SHORT $LN182@eval_all

; 1123 :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	edx, DWORD PTR _localbase$[ebp]
	mov	eax, DWORD PTR [edx]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	ecx, DWORD PTR [esi+eax+216]
	imul	ecx, 104				; 00000068H
	mov	esi, DWORD PTR _localstack$[ebp+ecx]
	jmp	SHORT $LN181@eval_all
$LN182@eval_all:

; 1124 :            else id = q_id;

	mov	esi, edx
$LN181@eval_all:

; 1125 :            ++stacktop;
; 1126 :            switch ( id_type(id) )

	mov	edx, esi
	and	edx, -536870912				; e0000000H
	add	ebx, 104				; 00000068H
	cmp	edx, 1610612736				; 60000000H
	je	SHORT $LN178@eval_all

; 1129 :               default: stacktop->value = 0.0;

	fldz
	jmp	$LN1746@eval_all
$LN178@eval_all:

; 1127 :             { case BODY:  stacktop->value = 
; 1128 :                  (REAL)ordinal(get_facet_body(id))+1; break;

	push	esi
	call	_get_facet_body
	add	esp, 4
	test	eax, 268435456				; 10000000H
	je	SHORT $LN861@eval_all
	push	esi
	call	_get_facet_body
	add	esp, 4
	and	eax, 134217727				; 07ffffffH
	mov	DWORD PTR tv2594[ebp], eax
	fild	DWORD PTR tv2594[ebp]
	fadd	QWORD PTR __real@3ff0000000000000

; 1130 :             }
; 1131 :            FIRST = 0.0;
; 1132 :            break;

	jmp	$LN1746@eval_all
$LN861@eval_all:

; 1127 :             { case BODY:  stacktop->value = 
; 1128 :                  (REAL)ordinal(get_facet_body(id))+1; break;

	mov	DWORD PTR tv2594[ebp], -1
	fild	DWORD PTR tv2594[ebp]
	fadd	QWORD PTR __real@3ff0000000000000

; 1130 :             }
; 1131 :            FIRST = 0.0;
; 1132 :            break;

	jmp	$LN1746@eval_all
$LN1348@eval_all:

; 1133 : 
; 1134 :       case GET_BACKBODY_NODE:
; 1135 :            if ( node->op1.localnum ) 

	mov	esi, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	test	esi, esi
	je	SHORT $LN172@eval_all

; 1136 :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	eax, DWORD PTR _localbase$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	edx, DWORD PTR [esi+ecx+216]
	imul	edx, 104				; 00000068H
	mov	eax, DWORD PTR _localstack$[ebp+edx]
	jmp	SHORT $LN171@eval_all
$LN172@eval_all:

; 1137 :            else id = q_id;

	mov	eax, edx
$LN171@eval_all:

; 1138 :            ++stacktop;
; 1139 :            switch ( id_type(id) )

	mov	ecx, eax
	and	ecx, -536870912				; e0000000H
	add	ebx, 104				; 00000068H
	cmp	ecx, 1610612736				; 60000000H
	je	SHORT $LN168@eval_all

; 1142 :                    break;
; 1143 :               default: stacktop->value = 0.0;

	fldz
	jmp	$LN1746@eval_all
$LN168@eval_all:

; 1140 :             { case BODY:  stacktop->value = 
; 1141 :                    (REAL)ordinal(get_facet_body(inverse_id(id)))+ 1;

	mov	esi, eax
	xor	esi, 134217728				; 08000000H
	push	esi
	call	_get_facet_body
	add	esp, 4
	test	eax, 268435456				; 10000000H
	je	SHORT $LN863@eval_all
	push	esi
	call	_get_facet_body
	add	esp, 4
	and	eax, 134217727				; 07ffffffH
	mov	DWORD PTR tv2626[ebp], eax
	fild	DWORD PTR tv2626[ebp]
	fadd	QWORD PTR __real@3ff0000000000000

; 1144 :             }
; 1145 :            FIRST = 0.0;
; 1146 :            break;

	jmp	$LN1746@eval_all
$LN863@eval_all:

; 1140 :             { case BODY:  stacktop->value = 
; 1141 :                    (REAL)ordinal(get_facet_body(inverse_id(id)))+ 1;

	mov	DWORD PTR tv2626[ebp], -1
	fild	DWORD PTR tv2626[ebp]
	fadd	QWORD PTR __real@3ff0000000000000

; 1144 :             }
; 1145 :            FIRST = 0.0;
; 1146 :            break;

	jmp	$LN1746@eval_all
$LN1419@eval_all:

; 1147 : 
; 1148 :       case GET_BARE_NODE:
; 1149 :            if ( node->op1.localnum ) 

	mov	esi, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	test	esi, esi
	je	SHORT $LN162@eval_all

; 1150 :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	edx, DWORD PTR _localbase$[ebp]
	mov	eax, DWORD PTR [edx]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	ecx, DWORD PTR [esi+eax+216]
	imul	ecx, 104				; 00000068H
	mov	eax, DWORD PTR _localstack$[ebp+ecx]
	jmp	SHORT $LN161@eval_all
$LN162@eval_all:

; 1151 :            else id = q_id;

	mov	eax, edx
$LN161@eval_all:

; 1152 :            ++stacktop;
; 1153 :            stacktop->value = (get_attr(id) & BARE_NAKED) ? 1.0 : 0.0;

	mov	edx, eax
	shr	edx, 29					; 0000001dH
	imul	edx, 112				; 00000070H
	mov	ecx, DWORD PTR _web[edx+12]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	add	ebx, 104				; 00000068H
	and	eax, 65536				; 00010000H
$LN1750@eval_all:
	xor	ecx, ecx
	or	eax, ecx
	jne	SHORT $LN866@eval_all
	fstp	ST(0)
	fldz
$LN866@eval_all:

; 1154 :            FIRST = 0.0;

	cmp	DWORD PTR _pcount$[ebp], ecx
	fstp	QWORD PTR [ebx]

; 1155 :            break;

	jmp	$LN1747@eval_all
$LN1418@eval_all:

; 1156 : 
; 1157 :       case GET_MIDV_NODE:
; 1158 :            if ( node->op1.localnum ) 

	mov	esi, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	test	esi, esi
	je	SHORT $LN156@eval_all

; 1159 :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	edx, DWORD PTR _localbase$[ebp]
	mov	eax, DWORD PTR [edx]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	ecx, DWORD PTR [esi+eax+216]
	imul	ecx, 104				; 00000068H
	mov	eax, DWORD PTR _localstack$[ebp+ecx]
	jmp	SHORT $LN155@eval_all
$LN156@eval_all:

; 1160 :            else id = q_id;

	mov	eax, edx
$LN155@eval_all:

; 1161 :            ++stacktop;
; 1162 :            stacktop->value = ordinal(get_edge_midv(id)) + 1.;

	mov	edx, DWORD PTR _web+124
	mov	ecx, DWORD PTR _web+216
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+edi+304]
	mov	eax, DWORD PTR [eax+edx+8]
	add	ebx, 104				; 00000068H
	test	eax, 268435456				; 10000000H
	je	SHORT $LN867@eval_all
	and	eax, 134217727				; 07ffffffH
	mov	DWORD PTR tv2700[ebp], eax
	fiadd	DWORD PTR tv2700[ebp]

; 1163 :            FIRST = 0.0;
; 1164 :            break;

	jmp	$LN1746@eval_all
$LN867@eval_all:

; 1161 :            ++stacktop;
; 1162 :            stacktop->value = ordinal(get_edge_midv(id)) + 1.;

	mov	DWORD PTR tv2700[ebp], -1
	fiadd	DWORD PTR tv2700[ebp]

; 1163 :            FIRST = 0.0;
; 1164 :            break;

	jmp	$LN1746@eval_all
$LN1417@eval_all:

; 1165 : 
; 1166 :       case FIXED_NODE:
; 1167 :       case GET_FIXED_NODE:
; 1168 :            if ( node->op1.localnum ) 

	mov	esi, DWORD PTR [esi+32]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	test	esi, esi
	je	SHORT $LN150@eval_all

; 1169 :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	eax, DWORD PTR _localbase$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	edx, DWORD PTR [esi+ecx+216]
	imul	edx, 104				; 00000068H
	mov	eax, DWORD PTR _localstack$[ebp+edx]
	jmp	SHORT $LN149@eval_all
$LN150@eval_all:

; 1170 :            else id = q_id;

	mov	eax, edx
$LN149@eval_all:

; 1171 :            ++stacktop;
; 1172 :            stacktop->value = (get_attr(id) & FIXED) ? 1.0 : 0.0;

	mov	ecx, eax
	shr	ecx, 29					; 0000001dH
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _web[ecx+12]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	add	ebx, 104				; 00000068H
	and	eax, 64					; 00000040H

; 1173 :            FIRST = 0.0;
; 1174 :            break;

	jmp	$LN1750@eval_all
$LN1347@eval_all:

; 1175 : 
; 1176 :       case GET_EXTRA_ATTR_NODE:
; 1177 :          { struct extra *ext;
; 1178 :            int spot,k;
; 1179 :           
; 1180 :          
; 1181 :          n = node->op3.extranum;

	mov	eax, DWORD PTR [esi+140]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	mov	esi, DWORD PTR [esi+32]
	fstp	ST(0)
	mov	DWORD PTR _n$[ebp], eax
	test	esi, esi
	je	SHORT $LN144@eval_all

; 1182 :          if ( node->op1.localnum ) 
; 1183 :             id = *(element_id*)get_localp(node->op1.localnum);

	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	eax, DWORD PTR [esi+edx+216]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR _localstack$[ebp+eax]
	mov	DWORD PTR _id$[ebp], ecx
	jmp	SHORT $LN143@eval_all
$LN144@eval_all:

; 1184 :          else id = q_id;

	mov	DWORD PTR _id$[ebp], edx
$LN143@eval_all:

; 1185 :          ext = EXTRAS(node->op2.eltype) + n;

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+136]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	eax, 112				; 00000070H
	mov	eax, DWORD PTR _web[eax+104]
	imul	ecx, 240				; 000000f0H
	add	eax, ecx
	add	eax, DWORD PTR _dymem

; 1186 :          /* get index */
; 1187 :          spot = 0;
; 1188 :          for ( k = 0 ; k < ext->array_spec.dim ; k++ )

	xor	esi, esi
	xor	edi, edi
	mov	DWORD PTR tv11359[ebp], ecx
	mov	DWORD PTR _ext$90298[ebp], eax
	cmp	DWORD PTR [eax+76], esi
	jle	$LN140@eval_all

; 1185 :          ext = EXTRAS(node->op2.eltype) + n;

	mov	ecx, eax
	add	ecx, 96					; 00000060H
	mov	DWORD PTR tv23406[ebp], ecx
	npad	1
$LL142@eval_all:

; 1189 :          { int j = (int)(stacktop[-ext->array_spec.dim+k+1].value);

	mov	eax, DWORD PTR _ext$90298[ebp]
	mov	edx, esi
	sub	edx, DWORD PTR [eax+76]
	inc	edx
	imul	edx, 104				; 00000068H
	fld	QWORD PTR [edx+ebx]
	call	__ftol2_sse

; 1190 :            spot *= ext->array_spec.sizes[k];

	mov	ecx, DWORD PTR tv23406[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	edx, ecx
	imul	edx, edi
	mov	DWORD PTR _spot$90299[ebp], edx

; 1191 :            if ( (j < 1) || (j > ext->array_spec.sizes[k]) )

	cmp	eax, 1
	jl	SHORT $LN138@eval_all
	cmp	eax, ecx
	jle	SHORT $LN139@eval_all
$LN138@eval_all:

; 1192 :            { sprintf(errmsg,
; 1193 :                 "Attribute %s index %d is %d; maximum is %d (in %s).\n",
; 1194 :                 ext->name,k+1,j,ext->array_spec.sizes[k],ex->name);

	mov	edx, DWORD PTR _ex$GSCopy$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	push	ecx
	mov	ecx, DWORD PTR _ext$90298[ebp]
	push	eax
	lea	eax, DWORD PTR [esi+1]
	push	eax
	push	ecx
	push	OFFSET ??_C@_0DF@MPPJKLHD@Attribute?5?$CFs?5index?5?$CFd?5is?5?$CFd?$DL?5max@
	push	OFFSET _errmsg
	call	_sprintf

; 1195 :              kb_error(2525,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2525					; 000009ddH
	call	_kb_error
	add	esp, 40					; 00000028H
$LN139@eval_all:

; 1196 :            }
; 1197 :            spot += (int)(stacktop[-ext->array_spec.dim+k+1].value) - 1;

	mov	edx, DWORD PTR _ext$90298[ebp]
	mov	ecx, esi
	sub	ecx, DWORD PTR [edx+76]
	imul	ecx, 104				; 00000068H
	fld	QWORD PTR [ecx+ebx+104]
	call	__ftol2_sse
	mov	edx, DWORD PTR _spot$90299[ebp]
	add	DWORD PTR tv23406[ebp], 4
	lea	edi, DWORD PTR [edx+eax-1]
	mov	eax, DWORD PTR _ext$90298[ebp]
	inc	esi
	cmp	esi, DWORD PTR [eax+76]
	jl	$LL142@eval_all
$LN140@eval_all:

; 1198 :          }
; 1199 :          stacktop -= ext->array_spec.dim;

	mov	ecx, DWORD PTR _ext$90298[ebp]
	mov	edx, DWORD PTR [ecx+76]

; 1200 :          if ( id_type(id) != node->op2.eltype )

	mov	esi, DWORD PTR _id$[ebp]
	imul	edx, -104				; ffffff98H
	mov	eax, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [eax+136]
	mov	ecx, esi
	shr	ecx, 29					; 0000001dH
	add	ebx, edx
	cmp	ecx, eax
	je	$LN1281@eval_all

; 1201 :          { if ( (id_type(id)==EDGE) && (node->op2.eltype==VERTEX) && params )

	mov	edx, DWORD PTR _params$GSCopy$[ebp]
	cmp	ecx, 1
	jne	SHORT $LN136@eval_all
	test	eax, eax
	jne	SHORT $LN136@eval_all
	test	edx, edx
	je	SHORT $LN136@eval_all

; 1202 :            { ext = EXTRAS(VERTEX) + n;

	mov	eax, DWORD PTR tv11359[ebp]
	add	eax, DWORD PTR _web+104

; 1203 :              (++stacktop)->value = interp_edge_attribute(id,ext,spot,(int)params[2*SDIM]);

	add	ebx, 104				; 00000068H
	add	eax, DWORD PTR _dymem
	mov	DWORD PTR _ext$90298[ebp], eax
	mov	eax, DWORD PTR _web+616
	add	eax, eax
	fld	QWORD PTR [edx+eax*8]
	call	__ftol2_sse
	mov	ecx, DWORD PTR _ext$90298[ebp]
	push	eax
	push	edi
	push	ecx
	push	esi
	call	_interp_edge_attribute
$LN1751@eval_all:

; 1204 :              FIRST = 0.0;

	mov	ecx, DWORD PTR _pcount$[ebp]
	fstp	QWORD PTR [ebx]
	add	esp, 16					; 00000010H
	test	ecx, ecx
	jle	$LN1270@eval_all

; 78   :         value = eval(&globals(node->op1.name_id)->value.proc,
; 79   :            NULL,NULLID,NULL);

	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	lea	edi, DWORD PTR [ebx+8]
	xor	eax, eax
	rep stosd

; 83   :         break;

	jmp	$LN1270@eval_all
$LN136@eval_all:

; 1205 :              break;
; 1206 :            }
; 1207 :            else 
; 1208 :            if ( (id_type(id)==FACET) && (node->op2.eltype==VERTEX) && params )

	cmp	ecx, 2
	jne	SHORT $LN1291@eval_all
	test	eax, eax
	jne	SHORT $LN1291@eval_all
	test	edx, edx
	je	SHORT $LN1291@eval_all

; 1209 :            { ext = EXTRAS(VERTEX) + n;

	mov	eax, DWORD PTR _web+104
	add	eax, DWORD PTR tv11359[ebp]

; 1210 :              (++stacktop)->value = interp_facet_attribute(id,ext,spot,(int)params[2*SDIM]);

	add	ebx, 104				; 00000068H
	add	eax, DWORD PTR _dymem
	mov	DWORD PTR _ext$90298[ebp], eax
	mov	eax, DWORD PTR _web+616
	add	eax, eax
	fld	QWORD PTR [edx+eax*8]
	call	__ftol2_sse
	mov	edx, DWORD PTR _ext$90298[ebp]
	push	eax
	push	edi
	push	edx
	push	esi
	call	_interp_facet_attribute

; 1211 :              FIRST = 0.0;
; 1212 :              break;

	jmp	SHORT $LN1751@eval_all
$LN1291@eval_all:

; 1213 :            }
; 1214 :            else 
; 1215 :            { sprintf(errmsg,
; 1216 :                "Attribute %s is %s attribute, not %s attribute (in %s).\n",
; 1217 :                EXTRAS(node->op2.eltype)[n].name,
; 1218 :                  typenames[node->op2.eltype], typenames[id_type(id)],ex->name);

	mov	edx, DWORD PTR _ex$GSCopy$[ebp]
	mov	eax, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [eax+136]
	mov	ecx, DWORD PTR _typenames[ecx*4]
	add	edx, 20					; 00000014H
	push	edx
	mov	edx, DWORD PTR _typenames[eax*4]
	imul	eax, 112				; 00000070H
	mov	eax, DWORD PTR _web[eax+104]
	add	eax, DWORD PTR tv11359[ebp]
	push	ecx
	add	eax, DWORD PTR _dymem
	push	edx
	push	eax
	push	OFFSET ??_C@_0DJ@FLIAONNC@Attribute?5?$CFs?5is?5?$CFs?5attribute?0?5no@
	push	OFFSET _errmsg
	call	_sprintf

; 1219 :              kb_error(2537,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2537					; 000009e9H
	call	_kb_error
	add	esp, 36					; 00000024H
$LN1281@eval_all:

; 1220 :            }
; 1221 :          }
; 1222 : 
; 1223 :          if ( ext->code.start ) 

	mov	eax, DWORD PTR _ext$90298[ebp]
	sub	eax, -128				; ffffff80H
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN126@eval_all

; 1224 :          { int oldflag = autorecalc_flag;

	mov	ecx, DWORD PTR _autorecalc_flag

; 1225 :            autorecalc_flag = 0;
; 1226 :            eval(&ext->code,NULL,id,NULL);  /* side-effect fills in values */

	push	0
	push	esi
	push	0
	push	eax
	mov	DWORD PTR _oldflag$90336[ebp], ecx
	mov	DWORD PTR _autorecalc_flag, 0
	call	_eval
	fstp	ST(0)

; 1227 :            autorecalc_flag = oldflag;

	mov	edx, DWORD PTR _oldflag$90336[ebp]
	add	esp, 16					; 00000010H
	mov	DWORD PTR _autorecalc_flag, edx
$LN126@eval_all:

; 1228 :           }
; 1229 :          switch ( ext->type )

	mov	eax, DWORD PTR _ext$90298[ebp]
	mov	eax, DWORD PTR [eax+68]
	dec	eax
	cmp	eax, 22					; 00000016H
	ja	$LN667@eval_all
	movzx	ecx, BYTE PTR $LN1256@eval_all[eax]
	jmp	DWORD PTR $LN1757@eval_all[ecx*4]
$LN123@eval_all:

; 1230 :          { case REAL_TYPE: 
; 1231 :             (++stacktop)->value = ((REAL*)get_extra(id,n))[spot]; 

	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	push	esi
	add	ebx, 104				; 00000068H
	call	_get_extra
	fld	QWORD PTR [eax+edi*8]
	add	esp, 8

; 1232 :             break;

	jmp	$LN1746@eval_all
$LN122@eval_all:

; 1233 :            case INTEGER_TYPE: 
; 1234 :            case CONSTRAINT_TYPE: 
; 1235 :            case BOUNDARY_TYPE: 
; 1236 :            case QUANTITY_TYPE: 
; 1237 :            case INSTANCE_TYPE: 
; 1238 :            case PROCEDURE_TYPE: 
; 1239 :             (++stacktop)->value = (REAL)((int*)get_extra(id,n))[spot];

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	push	esi
	add	ebx, 104				; 00000068H
	call	_get_extra
	fild	DWORD PTR [eax+edi*4]
	add	esp, 8

; 1240 :             break;

	jmp	$LN1746@eval_all
$LN120@eval_all:

; 1241 :            case UINT_TYPE: 
; 1242 :             (++stacktop)->value = (REAL)((unsigned int*)get_extra(id,n))[spot];
; 1243 :             break;
; 1244 :            case USHORT_TYPE: 
; 1245 :             (++stacktop)->value = (REAL)((unsigned short*)get_extra(id,n))[spot];

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	push	esi
	add	ebx, 104				; 00000068H
	call	_get_extra
	movzx	ecx, WORD PTR [eax+edi*2]
	mov	DWORD PTR tv24379[ebp], ecx
	add	esp, 8
	fild	DWORD PTR tv24379[ebp]

; 1246 :             break;

	jmp	$LN1746@eval_all
$LN119@eval_all:

; 1247 :            case SHORT_TYPE: 
; 1248 :             (++stacktop)->value = (REAL)((short*)get_extra(id,n))[spot];

	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	push	esi
	add	ebx, 104				; 00000068H
	call	_get_extra
	movsx	eax, WORD PTR [eax+edi*2]
	mov	DWORD PTR tv24377[ebp], eax
	add	esp, 8
	fild	DWORD PTR tv24377[ebp]

; 1249 :             break;

	jmp	$LN1746@eval_all
$LN116@eval_all:

; 1250 :            case ULONG_TYPE: 
; 1251 :             (++stacktop)->value = (REAL)((unsigned long*)get_extra(id,n))[spot];
; 1252 :             break;
; 1253 :            case LONG_TYPE: 
; 1254 :             (++stacktop)->value = (REAL)((long*)get_extra(id,n))[spot];
; 1255 :             break;
; 1256 :            case UCHAR_TYPE: 
; 1257 :             (++stacktop)->value = (REAL)((unsigned char*)get_extra(id,n))[spot];

	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	push	esi
	add	ebx, 104				; 00000068H
	call	_get_extra
	movzx	edx, BYTE PTR [eax+edi]
	mov	DWORD PTR tv24371[ebp], edx
	add	esp, 8
	fild	DWORD PTR tv24371[ebp]

; 1258 :               break;

	jmp	$LN1746@eval_all
$LN115@eval_all:

; 1259 :            case CHAR_TYPE: 
; 1260 :             (++stacktop)->value = (REAL)((char*)get_extra(id,n))[spot];

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	push	esi
	add	ebx, 104				; 00000068H
	call	_get_extra
	movsx	ecx, BYTE PTR [eax+edi]
	mov	DWORD PTR tv24369[ebp], ecx
	add	esp, 8
	fild	DWORD PTR tv24369[ebp]

; 1261 :               break;

	jmp	$LN1746@eval_all
$LN114@eval_all:

; 1262 :            case PTR_TYPE: 
; 1263 :             (++stacktop)->value = (REAL)(unsigned long int)((char**)get_extra(id,n))[spot];

	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	push	esi
	add	ebx, 104				; 00000068H
	call	_get_extra
	mov	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR tv24366[ebp], eax
	fild	DWORD PTR tv24366[ebp]
	add	esp, 8
	test	eax, eax

; 1264 :               break;

	jmp	SHORT $LN1741@eval_all
$LN113@eval_all:

; 1265 :            case ELEMENTID_TYPE: 
; 1266 :            case VERTEX_TYPE: 
; 1267 :            case EDGE_TYPE: 
; 1268 :            case FACET_TYPE: 
; 1269 :            case BODY_TYPE: 
; 1270 :            case FACETEDGE_TYPE: 
; 1271 :             (++stacktop)->value = (REAL)((element_id*)get_extra(id,n))[spot];

	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	push	esi
	add	ebx, 104				; 00000068H
	call	_get_extra
	fild	DWORD PTR [eax+edi*4]
	mov	edx, DWORD PTR [eax+edi*4]
	add	esp, 8
	test	edx, edx
$LN1741@eval_all:
	jns	$LN1746@eval_all
	fadd	QWORD PTR __real@41f0000000000000

; 1272 :             break;
; 1273 :          }
; 1274 :         }
; 1275 :         FIRST = 0.0;
; 1276 :         break;

	jmp	$LN1746@eval_all
$LN1346@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	cmp	ecx, 10222				; 000027eeH
	jne	SHORT $LN871@eval_all

; 1277 : 
; 1278 :       case ON_CONSTRAINT_NODE:
; 1279 :       case ON_CONSTRAINT_NAME_NODE:
; 1280 :          { 
; 1281 :            int testcon = (node->type == ON_CONSTRAINT_NODE) ? (int)((stacktop--)->value)
; 1282 :                             : node->op3.connum;

	fld	QWORD PTR [ebx]
	call	__ftol2_sse
	sub	ebx, 104				; 00000068H
	jmp	SHORT $LN872@eval_all
$LN871@eval_all:
	mov	eax, DWORD PTR [esi+140]
$LN872@eval_all:

; 1283 :            if ( node->op1.localnum ) 

	mov	esi, DWORD PTR [esi+32]
	test	esi, esi
	je	SHORT $LN108@eval_all

; 1284 :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	ecx, DWORD PTR [esi+edx+216]
	imul	ecx, 104				; 00000068H
	mov	edx, DWORD PTR _localstack$[ebp+ecx]
	jmp	SHORT $LN107@eval_all
$LN108@eval_all:

; 1285 :            else id = q_id;

	mov	edx, DWORD PTR _q_id$[ebp]
$LN107@eval_all:

; 1286 :            ++stacktop;
; 1287 :            switch(id_type(id))

	mov	ecx, edx
	shr	ecx, 29					; 0000001dH
	add	ebx, 104				; 00000068H
	sub	ecx, 0
	je	SHORT $LN104@eval_all
	dec	ecx
	je	SHORT $LN103@eval_all
	dec	ecx
	je	SHORT $LN102@eval_all

; 1293 :                    break;
; 1294 :               default: kb_error(1030,"Can't do constraints on this type element.\n",
; 1295 :                     RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CM@PABLLOJJ@Can?8t?5do?5constraints?5on?5this?5typ@
	push	1030					; 00000406H
	call	_kb_error
	add	esp, 12					; 0000000cH
	jmp	$LN667@eval_all
$LN102@eval_all:

; 1291 :                    break;
; 1292 :               case FACET : stacktop->value = (REAL)f_on_constraint(id,testcon);

	push	eax
	push	edx
	call	_f_on_constraint
	mov	DWORD PTR tv24350[ebp], eax
	fild	DWORD PTR tv24350[ebp]
	add	esp, 8

; 1296 :             }
; 1297 :            }
; 1298 :            FIRST = 0.0;
; 1299 :            break;

	jmp	$LN1746@eval_all
$LN103@eval_all:

; 1289 :                    break;
; 1290 :               case EDGE  : stacktop->value = (REAL)e_on_constraint(id,testcon);

	push	eax
	push	edx
	call	_e_on_constraint
	mov	DWORD PTR tv24348[ebp], eax
	fild	DWORD PTR tv24348[ebp]
	add	esp, 8

; 1296 :             }
; 1297 :            }
; 1298 :            FIRST = 0.0;
; 1299 :            break;

	jmp	$LN1746@eval_all
$LN104@eval_all:

; 1288 :             { case VERTEX: stacktop->value = (REAL)v_on_constraint(id,testcon);

	push	eax
	push	edx
	call	_v_on_constraint
	mov	DWORD PTR tv24346[ebp], eax
	fild	DWORD PTR tv24346[ebp]
	add	esp, 8

; 1296 :             }
; 1297 :            }
; 1298 :            FIRST = 0.0;
; 1299 :            break;

	jmp	$LN1746@eval_all
$LN1345@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	cmp	ecx, 10224				; 000027f0H
	jne	SHORT $LN873@eval_all

; 1300 : 
; 1301 :       case CONSTRAINT_VALUE_NODE:
; 1302 :       case CONSTRAINT_NAME_VALUE_NODE:
; 1303 :       { int connum = (node->type == CONSTRAINT_VALUE_NODE) ? (int)((stacktop--)->value)
; 1304 :                             : node->op3.connum;

	fld	QWORD PTR [ebx]
	call	__ftol2_sse
	mov	edi, eax
	sub	ebx, 104				; 00000068H
	jmp	SHORT $LN874@eval_all
$LN873@eval_all:
	mov	edi, DWORD PTR [esi+140]
$LN874@eval_all:

; 1305 :         if ( node->op1.localnum ) 

	mov	eax, DWORD PTR [esi+32]
	test	eax, eax
	je	SHORT $LN96@eval_all

; 1306 :            id = *(element_id*)get_localp(node->op1.localnum);

	mov	edx, DWORD PTR _localbase$[ebp]
	mov	ecx, DWORD PTR [edx]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	edx, DWORD PTR [eax+ecx+216]
	imul	edx, 104				; 00000068H
	mov	eax, DWORD PTR _localstack$[ebp+edx]
	jmp	SHORT $LN1743@eval_all
$LN96@eval_all:

; 1307 :         else id = q_id;

	mov	eax, DWORD PTR _q_id$[ebp]
$LN1743@eval_all:
	mov	DWORD PTR _id$[ebp], eax

; 1308 :         if ( id_type(id) != VERTEX )

	test	eax, -536870912				; e0000000H
	je	SHORT $LN94@eval_all

; 1309 :         { sprintf(errmsg,"Can only do constraint value for vertices.\n");

	push	OFFSET ??_C@_0CM@IPCEGKDM@Can?5only?5do?5constraint?5value?5for@
	push	OFFSET _errmsg
	call	_sprintf

; 1310 :           sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 1311 :                  file_names[node->file_no],node->line_no);

	mov	eax, OFFSET _errmsg
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1257@eval_all:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1257@eval_all
	mov	ecx, DWORD PTR [esi+12]
	push	ecx
	mov	ecx, DWORD PTR _file_names
	sub	eax, edx
	mov	edx, DWORD PTR [esi+16]
	mov	edx, DWORD PTR [ecx+edx*4]
	push	edx
	lea	eax, DWORD PTR _errmsg[eax]
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	eax
	call	_sprintf

; 1312 :           kb_error(4274,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	4274					; 000010b2H
	call	_kb_error
	add	esp, 28					; 0000001cH
$LN94@eval_all:

; 1313 :         }
; 1314 :         ++stacktop;
; 1315 :         stacktop->value = eval(get_constraint(connum)->formula ,get_coord(id), id, NULL);

	mov	eax, DWORD PTR _id$[ebp]
	mov	ecx, DWORD PTR _web+12
	push	0
	push	eax
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+104
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+64]
	and	edi, 1073741823				; 3fffffffH
	imul	edi, 176				; 000000b0H
	push	edx
	mov	edx, DWORD PTR _web+652
	mov	eax, DWORD PTR [edi+edx+40]
	push	eax
	add	ebx, 104				; 00000068H
	call	_eval
	add	esp, 16					; 00000010H

; 1316 :         FIRST = 0.0;
; 1317 :       }
; 1318 :       break;

	jmp	$LN1746@eval_all
$LN1344@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
	cmp	ecx, 10222				; 000027eeH
	jne	SHORT $LN875@eval_all

; 1319 : 
; 1320 : 
; 1321 :       case HIT_CONSTRAINT_NODE:
; 1322 :       case HIT_CONSTRAINT_NAME_NODE:
; 1323 :          { 
; 1324 :            int testcon = (node->type == ON_CONSTRAINT_NODE) ? (int)((stacktop--)->value)
; 1325 :                             : node->op3.connum;

	fld	QWORD PTR [ebx]
	call	__ftol2_sse
	sub	ebx, 104				; 00000068H
	jmp	SHORT $LN876@eval_all
$LN875@eval_all:
	mov	eax, DWORD PTR [esi+140]
$LN876@eval_all:

; 1326 :            if ( node->op1.localnum ) 

	mov	esi, DWORD PTR [esi+32]
	test	esi, esi
	je	SHORT $LN89@eval_all

; 1327 :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	ecx, DWORD PTR [esi+edx+216]
	imul	ecx, 104				; 00000068H
	mov	ecx, DWORD PTR _localstack$[ebp+ecx]
	jmp	SHORT $LN88@eval_all
$LN89@eval_all:

; 1328 :            else id = q_id;

	mov	ecx, DWORD PTR _q_id$[ebp]
$LN88@eval_all:

; 1329 :            ++stacktop;

	add	ebx, 104				; 00000068H

; 1330 :            switch(id_type(id))

	test	ecx, -536870912				; e0000000H
	je	SHORT $LN85@eval_all

; 1332 :                     break;
; 1333 :               default: kb_error(1031,"Can do hit_constraints only on vertices.\n",
; 1334 : 
; 1335 :                     RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CK@OJPFAPEO@Can?5do?5hit_constraints?5only?5on?5v@
	push	1031					; 00000407H
	call	_kb_error
	add	esp, 12					; 0000000cH
	jmp	$LN667@eval_all
$LN85@eval_all:

; 1331 :             { case VERTEX: stacktop->value = (REAL)get_v_constraint_status(id,testcon);

	push	eax
	push	ecx
	call	_get_v_constraint_status
	mov	DWORD PTR tv24314[ebp], eax
	fild	DWORD PTR tv24314[ebp]
	add	esp, 8

; 1336 :             }
; 1337 :          }
; 1338 :          FIRST = 0.0;
; 1339 :          break;

	jmp	$LN1746@eval_all
$LN1343@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	xor	edi, edi
	fstp	ST(0)
	cmp	ecx, 10228				; 000027f4H
	jne	SHORT $LN877@eval_all

; 1340 : 
; 1341 :       case ON_BOUNDARY_NODE:
; 1342 :       case ON_BOUNDARY_NAME_NODE:
; 1343 :          { struct boundary *b=NULL;
; 1344 :            int testb = (node->type == ON_BOUNDARY_NODE) ? (int)((stacktop--)->value)
; 1345 :                             : node->op3.bdrynum;

	fld	QWORD PTR [ebx]
	call	__ftol2_sse
	mov	DWORD PTR _testb$90441[ebp], eax
	sub	ebx, 104				; 00000068H
	mov	edx, eax
	jmp	SHORT $LN878@eval_all
$LN877@eval_all:
	mov	edx, DWORD PTR [esi+140]
	mov	DWORD PTR _testb$90441[ebp], edx
$LN878@eval_all:

; 1346 :            if ( node->op1.localnum ) 

	mov	esi, DWORD PTR [esi+32]
	test	esi, esi
	je	SHORT $LN79@eval_all

; 1347 :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	eax, DWORD PTR _localbase$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	eax, DWORD PTR [esi+ecx+216]
	imul	eax, 104				; 00000068H
	mov	eax, DWORD PTR _localstack$[ebp+eax]
	jmp	SHORT $LN78@eval_all
$LN79@eval_all:

; 1348 :            else id = q_id;

	mov	eax, DWORD PTR _q_id$[ebp]
$LN78@eval_all:

; 1349 :            ++stacktop;
; 1350 :            switch(id_type(id))

	mov	ecx, eax
	shr	ecx, 29					; 0000001dH
	add	ebx, 104				; 00000068H
	sub	ecx, edi
	je	$LN75@eval_all
	dec	ecx
	je	SHORT $LN74@eval_all
	dec	ecx
	je	SHORT $LN73@eval_all

; 1354 :               default: kb_error(1032,"Can't do boundary on this type element.\n",
; 1355 :                     RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CJ@MIEHCCIC@Can?8t?5do?5boundary?5on?5this?5type?5e@
	push	1032					; 00000408H
	call	_kb_error
	mov	edx, DWORD PTR _testb$90441[ebp]
	add	esp, 12					; 0000000cH
	jmp	$LN880@eval_all
$LN73@eval_all:

; 1353 :               case FACET : b = get_facet_boundary(id); break;

	mov	ecx, DWORD PTR _F_BOUNDARY_ATTR
	test	ecx, ecx
	je	$LN879@eval_all
	mov	esi, DWORD PTR _web+236
	imul	ecx, 240				; 000000f0H
	and	eax, 134217727				; 07ffffffH
	add	ecx, DWORD PTR _web+328
$LN1745@eval_all:
	mov	eax, DWORD PTR [esi+eax*4]
	mov	esi, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+esi+64]
	mov	edi, DWORD PTR [eax+ecx]
	imul	edi, 136				; 00000088H
	add	edi, DWORD PTR _web+776
	jmp	SHORT $LN880@eval_all
$LN74@eval_all:

; 1352 :               case EDGE  : b = get_edge_boundary(id); break;

	mov	ecx, DWORD PTR _E_BOUNDARY_ATTR
	test	ecx, ecx
	je	SHORT $LN879@eval_all
	mov	esi, DWORD PTR _web+124
	imul	ecx, 240				; 000000f0H
	and	eax, 134217727				; 07ffffffH
	add	ecx, DWORD PTR _web+216
	jmp	SHORT $LN1745@eval_all
$LN75@eval_all:

; 1351 :             { case VERTEX: b = get_boundary(id); break;

	mov	ecx, DWORD PTR _V_BOUNDARY_ATTR
	test	ecx, ecx
	je	SHORT $LN879@eval_all
	mov	esi, DWORD PTR _dymem
	imul	ecx, 240				; 000000f0H
	add	ecx, DWORD PTR _web+104
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+esi+64]
	mov	esi, DWORD PTR _web+12
	mov	eax, DWORD PTR [esi+eax*4]
	mov	edi, DWORD PTR [ecx+eax]
	imul	edi, 136				; 00000088H
	add	edi, DWORD PTR _web+776
	jmp	SHORT $LN880@eval_all
$LN879@eval_all:
	xor	edi, edi
$LN880@eval_all:

; 1356 :             }
; 1357 :            stacktop->value = (b == web.boundaries+testb) ? 1.0 : 0.0;

	imul	edx, 136				; 00000088H
	add	edx, DWORD PTR _web+776
	cmp	edi, edx
	jne	$LN316@eval_all
	fld1
	jmp	$LN1746@eval_all
$LN1342@eval_all:

; 1358 :          }
; 1359 :          FIRST = 0.0;
; 1360 :          break;
; 1361 : 
; 1362 :       /* whole-array syntax */
; 1363 : 
; 1364 :       case ARRAYIDENT_NODE: /* push datastart for array */
; 1365 :         { struct global *glvalue = globals(node->op2.name_id);

	mov	esi, DWORD PTR [esi+136]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	mov	eax, esi
	fstp	ST(0)
	and	eax, -16777216				; ff000000H
	and	esi, 16777215				; 00ffffffH
	cmp	eax, 268435456				; 10000000H
	jne	SHORT $LN891@eval_all

; 1358 :          }
; 1359 :          FIRST = 0.0;
; 1360 :          break;
; 1361 : 
; 1362 :       /* whole-array syntax */
; 1363 : 
; 1364 :       case ARRAYIDENT_NODE: /* push datastart for array */
; 1365 :         { struct global *glvalue = globals(node->op2.name_id);

	mov	ecx, DWORD PTR _web+5652
	lea	edx, DWORD PTR [ecx+esi*4]
	mov	esi, DWORD PTR [edx+edi]
	jmp	SHORT $LN888@eval_all
$LN891@eval_all:
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN889@eval_all
	mov	eax, DWORD PTR _localbase$[ebp]
	imul	esi, 224				; 000000e0H
	add	esi, DWORD PTR [eax]
	jmp	SHORT $LN888@eval_all
$LN889@eval_all:
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN887@eval_all
	mov	ecx, DWORD PTR _web+5656
	mov	esi, DWORD PTR [ecx+esi*4]
	jmp	SHORT $LN888@eval_all
$LN887@eval_all:
	mov	edx, DWORD PTR _web+5652
	lea	eax, DWORD PTR [edx+esi*4]
	mov	esi, DWORD PTR [eax+edi]
$LN888@eval_all:

; 1366 :           struct array *alvalue = glvalue->attr.arrayptr;

	mov	eax, DWORD PTR [esi+168]

; 1367 :           if ( glvalue->flags & FIXED_SIZE_ARRAY )
; 1368 :             *(struct estack**)(++stacktop) = 
; 1369 :                 localstack + glvalue->attr.arrayptr->datastart;

	mov	ecx, DWORD PTR [eax+20]
	add	ebx, 104				; 00000068H
	test	DWORD PTR [esi+192], 268435456		; 10000000H
	je	SHORT $LN67@eval_all
	imul	ecx, 104				; 00000068H
	lea	edx, DWORD PTR _localstack$[ebp+ecx]
	mov	DWORD PTR [ebx], edx

; 1370 :           else 

	jmp	$LN1270@eval_all
$LN67@eval_all:

; 1371 :             *(char**)(++stacktop) = (char*)alvalue + alvalue->datastart;

	add	ecx, eax
	mov	DWORD PTR [ebx], ecx

; 1372 :           break;

	jmp	$LN1270@eval_all
$LN1341@eval_all:

; 1373 :         }
; 1374 : 
; 1375 :       case ATTRIB_LVALUE_NODE:  /* push datastart for attribute array */
; 1376 :         { element_id id;
; 1377 :           n = node->op2.name_id & GLOBMASK; /* attribute number */

	mov	eax, DWORD PTR [esi+136]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	mov	esi, DWORD PTR [esi+32]
	fstp	ST(0)
	and	eax, 16777215				; 00ffffffH
	test	esi, esi
	je	SHORT $LN64@eval_all

; 1378 :           if ( node->op1.localnum )
; 1379 :             id = *(element_id*)get_localp(node->op1.localnum);

	mov	edx, DWORD PTR _localbase$[ebp]
	mov	ecx, DWORD PTR [edx]
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	mov	edx, DWORD PTR [esi+ecx+216]
	imul	edx, 104				; 00000068H
	mov	ecx, DWORD PTR _localstack$[ebp+edx]

; 1381 :           *(char**)(++stacktop) = (char*)get_extra(id,n);

	push	eax
	push	ecx
	add	ebx, 104				; 00000068H
	call	_get_extra
	add	esp, 8
	mov	DWORD PTR [ebx], eax

; 1382 :         }
; 1383 :         break;

	jmp	$LN1270@eval_all
$LN64@eval_all:

; 1380 :           else id = q_id;

	mov	ecx, edx

; 1381 :           *(char**)(++stacktop) = (char*)get_extra(id,n);

	push	eax
	push	ecx
	add	ebx, 104				; 00000068H
	call	_get_extra
	add	esp, 8
	mov	DWORD PTR [ebx], eax

; 1382 :         }
; 1383 :         break;

	jmp	$LN1270@eval_all
$LN1340@eval_all:

; 1384 : 
; 1385 :       case ARRAY_VERTEX_NORMAL_NODE:
; 1386 :       case ARRAY_EDGE_VECTOR_NODE:
; 1387 :       case ARRAY_FACET_NORMAL_NODE:
; 1388 :         { element_id id;
; 1389 :           REAL *datastart =  (REAL*)get_localp(node->op3.localnum);

	mov	eax, DWORD PTR [esi+140]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	mov	ecx, DWORD PTR _localbase$[ebp]
	fstp	ST(0)
	mov	edi, DWORD PTR [ecx]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	eax, DWORD PTR [eax+edi+216]
	imul	eax, 104				; 00000068H
	lea	eax, DWORD PTR _localstack$[ebp+eax]
	add	ebx, 104				; 00000068H
	mov	DWORD PTR [ebx], eax
	test	DWORD PTR [esi+24], 8192		; 00002000H
	mov	DWORD PTR _datastart$90492[ebp], eax
	je	$LN1270@eval_all

; 1390 :           *(REAL**)(++stacktop) = datastart;
; 1391 :           if ( node->flags & IS_RVALUE )
; 1392 :           { if ( node->op1.localnum )

	mov	eax, DWORD PTR [esi+32]
	test	eax, eax
	je	SHORT $LN60@eval_all

; 1393 :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	ecx, DWORD PTR [ecx]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	edx, DWORD PTR [eax+ecx+216]
	imul	edx, 104				; 00000068H
	mov	edi, DWORD PTR _localstack$[ebp+edx]
	jmp	SHORT $LN59@eval_all
$LN60@eval_all:

; 1394 :             else id = q_id;

	mov	edi, edx
$LN59@eval_all:

; 1395 :             switch ( node->type )

	mov	esi, DWORD PTR [esi]
	sub	esi, 10354				; 00002872H
	je	SHORT $LN56@eval_all
	dec	esi
	je	SHORT $LN51@eval_all
	dec	esi
	jne	$LN1270@eval_all

; 1413 :               case ARRAY_FACET_NORMAL_NODE:
; 1414 :                  get_facet_normal(id,datastart);

	mov	eax, DWORD PTR _datastart$90492[ebp]
	push	eax
	push	edi
	call	_get_facet_normal
	add	esp, 8

; 1415 :                  break;

	jmp	$LN1270@eval_all
$LN51@eval_all:

; 1407 :               
; 1408 :                  break;
; 1409 :                 }
; 1410 :               case ARRAY_EDGE_VECTOR_NODE:
; 1411 :                  get_edge_side(id,datastart);

	mov	ecx, DWORD PTR _datastart$90492[ebp]
	push	ecx
	push	edi
	call	_get_edge_side
	add	esp, 8

; 1412 :                  break;

	jmp	$LN1270@eval_all
$LN56@eval_all:

; 1396 :             { case ARRAY_VERTEX_NORMAL_NODE:
; 1397 :                { MAT2D(normal,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	edx, DWORD PTR _normalxJ$90505[ebp]
	push	edx
	lea	eax, DWORD PTR _normalqXvS$90504[ebp]
	push	eax
	call	_mat2d_setup
	mov	esi, eax

; 1398 :                  REAL mag;
; 1399 :                  int normcount;
; 1400 : 
; 1401 :                  normcount = new_calc_vertex_normal(id,normal);

	push	esi
	push	edi
	call	_new_calc_vertex_normal

; 1402 :                  project_vertex_normals(id,normal,normcount);

	push	eax
	push	esi
	push	edi
	call	_project_vertex_normals

; 1403 :                  mag = sqrt(SDIM_dot(normal[0],normal[0]));

	mov	ecx, DWORD PTR _web+616
	mov	eax, DWORD PTR [esi]
	push	ecx
	push	eax
	push	eax
	call	_dot
	add	esp, 48					; 00000030H
	call	__CIsqrt

; 1404 :                  if ( mag == 0.0 ) mag = 1;

	fld	ST(0)
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1268@eval_all
	fstp	ST(0)
	fld1
$LN1268@eval_all:

; 1405 :                  for ( i = 0 ; i < SDIM ; i++ )

	mov	ecx, DWORD PTR _web+616
	xor	eax, eax
	test	ecx, ecx
	jle	$LN1698@eval_all
	mov	edx, DWORD PTR _datastart$90492[ebp]
$LN54@eval_all:

; 1406 :                     datastart[i] = normal[0][i]/mag;

	mov	edi, DWORD PTR [esi]
	fld	QWORD PTR [edi+eax*8]
	inc	eax
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [edx+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LN54@eval_all

; 1416 :             }
; 1417 :           }
; 1418 :         }
; 1419 :         break;

	jmp	$LN1698@eval_all
$LN1339@eval_all:

; 1420 : 
; 1421 :       case ARRAY_LVALUE_INDEXED_NODE:
; 1422 :         break;
; 1423 : 
; 1424 :       case ARRAY_RVALUE_INDEXED_NODE:
; 1425 :       case ARRAY_RVALUE_NODE:
; 1426 :         break;
; 1427 :         
; 1428 :       case DOT_NODE:  /* dot product */
; 1429 :         { struct array *a,*b;
; 1430 :           int name1 = node->op2.name_id;
; 1431 :           int name2 = node->op3.name_id;
; 1432 :           REAL *datastart1,*datastart2;
; 1433 :           REAL sum;
; 1434 :           int count;
; 1435 :           a = get_name_arrayptr(name1,NULL,localbase);

	mov	edx, DWORD PTR _localbase$[ebp]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	mov	eax, DWORD PTR [esi+136]
	fstp	ST(0)
	mov	esi, DWORD PTR [esi+140]
	push	edx
	push	0
	push	eax
	call	_get_name_arrayptr
	mov	edi, eax
	mov	eax, DWORD PTR _localbase$[ebp]
	push	eax
	push	0
	push	esi
	call	_get_name_arrayptr
	mov	eax, DWORD PTR [eax+16]
	mov	esi, DWORD PTR [edi+16]
	add	esp, 24					; 00000018H
	cmp	esi, eax
	jl	SHORT $LN894@eval_all

; 1436 :           b = get_name_arrayptr(name2,NULL,localbase);
; 1437 :           count = (a->datacount < b->datacount) ? a->datacount : b->datacount;

	mov	esi, eax
$LN894@eval_all:

; 1438 :           datastart1 = *(REAL**)(stacktop--);

	mov	edx, DWORD PTR [ebx]

; 1439 :           datastart2 = *(REAL**)(stacktop--);
; 1440 :           for ( sum = 0.0, i = 0 ; i < count ; i++ )

	fldz
	mov	edi, DWORD PTR [ebx-104]
	xor	ecx, ecx
	mov	DWORD PTR _datastart1$90523[ebp], edx
	mov	DWORD PTR _datastart2$90524[ebp], edi
	cmp	esi, 4
	jl	SHORT $LN1289@eval_all

; 1441 :             sum += datastart1[i]*datastart2[i];

	lea	ecx, DWORD PTR [edi+24]
	sub	edi, edx
	lea	eax, DWORD PTR [edx+8]
	lea	edx, DWORD PTR [esi-4]
	shr	edx, 2
	mov	DWORD PTR tv24068[ebp], edi
	inc	edx
	lea	edi, DWORD PTR [edx*4]
	mov	DWORD PTR _i$[ebp], edi
	mov	edi, DWORD PTR tv24068[ebp]
$LN1233@eval_all:
	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	fmul	QWORD PTR [ecx-24]
	add	ecx, 32					; 00000020H
	dec	edx
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi+eax-32]
	fmul	QWORD PTR [eax-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax-24]
	fmul	QWORD PTR [ecx-40]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax-16]
	fmul	QWORD PTR [ecx-32]
	faddp	ST(1), ST(0)
	jne	SHORT $LN1233@eval_all

; 1438 :           datastart1 = *(REAL**)(stacktop--);

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edi, DWORD PTR _datastart2$90524[ebp]
	mov	edx, DWORD PTR _datastart1$90523[ebp]
$LN1289@eval_all:

; 1439 :           datastart2 = *(REAL**)(stacktop--);
; 1440 :           for ( sum = 0.0, i = 0 ; i < count ; i++ )

	cmp	ecx, esi
	jge	SHORT $LN1231@eval_all
	sub	edi, edx
	lea	eax, DWORD PTR [edx+ecx*8]
	sub	esi, ecx
$LC46@eval_all:

; 1441 :             sum += datastart1[i]*datastart2[i];

	fld	QWORD PTR [eax+edi]
	add	eax, 8
	dec	esi
	fmul	QWORD PTR [eax-8]
	faddp	ST(1), ST(0)
	jne	SHORT $LC46@eval_all
$LN1231@eval_all:

; 1442 :           (++stacktop)->value = sum;

	add	ebx, -104				; ffffff98H

; 1443 :           FIRST = 0.0;
; 1444 : 
; 1445 :           break;

	jmp	$LN1746@eval_all
$LN1338@eval_all:

; 1454 :         int i,offset;
; 1455 :         void *lvalue;
; 1456 :         char *datastart;
; 1457 : 
; 1458 :         a = get_name_arrayptr(node->op2.name_id,NULL,NULL);

	mov	ecx, DWORD PTR [esi+136]

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	push	0
	fstp	ST(0)
	fldz
	push	0
	push	ecx
	fstp	QWORD PTR _value$90539[ebp]
	call	_get_name_arrayptr
	mov	DWORD PTR _a$90538[ebp], eax
	mov	eax, DWORD PTR [eax+4]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _i$90540[ebp], 0
	test	eax, eax
	jle	$LN37@eval_all

; 1446 :         }
; 1447 :   
; 1448 :  
; 1449 :       case ARRAY_EVAL_NODE:  /* rexpr: arraylvalue indexset */
; 1450 :       { /* use info on stack to push value of array element.
; 1451 :              stack: datastart index-values -> rexpr */
; 1452 :         struct array *a;
; 1453 :         REAL value=0.0;

	mov	edx, DWORD PTR _a$90538[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR tv24426[ebp], edx
	npad	6
$LL39@eval_all:

; 1461 :         { int k = (int)stacktop[i+1-a->dim].value;

	mov	ecx, DWORD PTR _i$90540[ebp]
	sub	ecx, eax
	inc	ecx
	imul	ecx, 104				; 00000068H
	fld	QWORD PTR [ecx+ebx]
	call	__ftol2_sse
	mov	edi, eax

; 1462 :           if ( k < 1 )

	cmp	edi, 1
	jge	$LN36@eval_all

; 1463 :           { sprintf(errmsg,
; 1464 :              "Array index %d of array %s is %d. Indexes start at 1.\n",
; 1465 :                i+1,get_name_name(node->op2.name_id,localbase),k);

	mov	edx, DWORD PTR _localbase$[ebp]
	mov	eax, DWORD PTR [esi+136]
	push	edi
	push	edx
	push	eax
	call	_get_name_name
	mov	ecx, DWORD PTR _i$90540[ebp]
	add	esp, 8
	push	eax
	inc	ecx
	push	ecx
	push	OFFSET ??_C@_0DH@DOJNKOOH@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@
	push	OFFSET _errmsg
	call	_sprintf

; 1466 :             sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 1467 :                  file_names[node->file_no],node->line_no);

	mov	eax, OFFSET _errmsg
	add	esp, 20					; 00000014H
	lea	ecx, DWORD PTR [eax+1]
	npad	7
$LL1258@eval_all:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1258@eval_all
	mov	edx, DWORD PTR [esi+12]
	push	edx
	mov	edx, DWORD PTR _file_names
	sub	eax, ecx
	mov	ecx, DWORD PTR [esi+16]
	mov	ecx, DWORD PTR [edx+ecx*4]
	push	ecx
	lea	edx, DWORD PTR _errmsg[eax]
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	edx
	call	_sprintf

; 1468 :             kb_error(3007,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	3007					; 00000bbfH
	call	_kb_error
	add	esp, 28					; 0000001cH
$LN36@eval_all:

; 1469 :           }
; 1470 :           if ( k > a->sizes[i] )

	mov	eax, DWORD PTR tv24426[ebp]
	mov	eax, DWORD PTR [eax]
	cmp	edi, eax
	jle	$LN38@eval_all

; 1471 :           { sprintf(errmsg,"Array index %d of array %s is %d; exceeds bound of %d.\n",
; 1472 :                i+1,get_name_name(node->op2.name_id,localbase),k,a->sizes[i]);

	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [esi+136]
	push	eax
	push	edi
	push	ecx
	push	edx
	call	_get_name_name
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _i$90540[ebp]
	inc	eax
	push	eax
	push	OFFSET ??_C@_0DI@KHNAHFIG@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@
	push	OFFSET _errmsg
	call	_sprintf

; 1473 :             sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 1474 :                  file_names[node->file_no],node->line_no);

	mov	eax, OFFSET _errmsg
	add	esp, 24					; 00000018H
	lea	edi, DWORD PTR [eax+1]
	npad	6
$LL1259@eval_all:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1259@eval_all
	mov	ecx, DWORD PTR [esi+12]
	mov	edx, DWORD PTR [esi+16]
	push	ecx
	mov	ecx, DWORD PTR _file_names
	mov	edx, DWORD PTR [ecx+edx*4]
	push	edx
	sub	eax, edi
	lea	eax, DWORD PTR _errmsg[eax]
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	eax
	call	_sprintf

; 1475 :             kb_error(3008,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	3008					; 00000bc0H
	call	_kb_error
	add	esp, 28					; 0000001cH
$LN38@eval_all:

; 1459 : 
; 1460 :         for ( i = 0 ; i < a->dim ; i++ )

	mov	ecx, DWORD PTR _i$90540[ebp]
	mov	edx, DWORD PTR _a$90538[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	DWORD PTR tv24426[ebp], 4
	inc	ecx
	mov	DWORD PTR _i$90540[ebp], ecx
	cmp	ecx, eax
	jl	$LL39@eval_all
$LN37@eval_all:

; 1476 :           }
; 1477 :         }
; 1478 :         for ( i = 1, offset = (int)stacktop[1-a->dim].value-1 ; i < a->dim ; i++ )

	mov	edi, DWORD PTR _a$90538[ebp]
	mov	eax, DWORD PTR [edi+4]
	imul	eax, 104				; 00000068H
	mov	esi, ebx
	sub	esi, eax
	mov	DWORD PTR tv11669[ebp], esi
	fld	QWORD PTR [esi+104]
	call	__ftol2_sse
	dec	eax
	cmp	DWORD PTR [edi+4], 1
	jle	SHORT $LN32@eval_all
	mov	ecx, edi
	lea	edi, DWORD PTR [ecx+28]
	mov	ecx, DWORD PTR [ecx+4]
	mov	esi, 2
	sub	esi, ecx
	imul	esi, 104				; 00000068H
	add	esi, ebx
	dec	ecx
	mov	DWORD PTR tv24536[ebp], ecx
$LL34@eval_all:

; 1479 :         { offset *= a->sizes[i];

	mov	ebx, DWORD PTR [edi]

; 1480 :           offset += (int)stacktop[i+1-a->dim].value-1;  /* 1-based indexing */

	fld	QWORD PTR [esi]
	imul	ebx, eax
	call	__ftol2_sse
	add	esi, 104				; 00000068H
	add	edi, 4
	dec	DWORD PTR tv24536[ebp]
	lea	eax, DWORD PTR [ebx+eax-1]
	jne	SHORT $LL34@eval_all

; 1476 :           }
; 1477 :         }
; 1478 :         for ( i = 1, offset = (int)stacktop[1-a->dim].value-1 ; i < a->dim ; i++ )

	mov	esi, DWORD PTR tv11669[ebp]
	mov	edi, DWORD PTR _a$90538[ebp]
$LN32@eval_all:

; 1481 :         }
; 1482 :         stacktop -= a->dim;
; 1483 :         datastart = *(char**)(stacktop--);
; 1484 :         lvalue = datastart + offset*a->itemsize;

	mov	ecx, DWORD PTR [edi+12]
	imul	ecx, eax

; 1485 :         switch ( a->datatype )

	mov	eax, DWORD PTR [edi+8]
	mov	ebx, esi
	add	ecx, DWORD PTR [ebx]
	dec	eax
	cmp	eax, 17					; 00000011H
	ja	SHORT $LN28@eval_all
	jmp	DWORD PTR $LN1758@eval_all[eax*4]
$LN29@eval_all:

; 1486 :         { case REAL_TYPE: value = *(REAL*)(lvalue);  break;

	fld	QWORD PTR [ecx]
	jmp	$LN1746@eval_all
$LN28@eval_all:

; 1487 :           case INTEGER_TYPE: value = *(int*)(lvalue); break;

	fild	DWORD PTR [ecx]
	jmp	$LN1746@eval_all
$LN27@eval_all:

; 1488 :           case UINT_TYPE: value = *(unsigned int*)(lvalue); break;

	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR tv24188[ebp], ecx
	fild	DWORD PTR tv24188[ebp]
	test	ecx, ecx
	jns	$LN1746@eval_all
	fadd	QWORD PTR __real@41f0000000000000
	jmp	$LN1746@eval_all
$LN26@eval_all:

; 1489 :           case SHORT_TYPE: value = *(short int*)(lvalue); break;

	movsx	edx, WORD PTR [ecx]
	mov	DWORD PTR tv24187[ebp], edx
	fild	DWORD PTR tv24187[ebp]
	jmp	$LN1746@eval_all
$LN25@eval_all:

; 1490 :           case USHORT_TYPE: value = *(unsigned short int*)(lvalue); break;

	movzx	eax, WORD PTR [ecx]
	mov	DWORD PTR tv24186[ebp], eax
	fild	DWORD PTR tv24186[ebp]
	jmp	$LN1746@eval_all
$LN23@eval_all:

; 1491 :           case LONG_TYPE: value = *(long int*)(lvalue); break;
; 1492 :           case ULONG_TYPE: value = *(unsigned long int*)(lvalue); break;

	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR tv24182[ebp], ecx
	fild	DWORD PTR tv24182[ebp]
	test	ecx, ecx
	jns	$LN1746@eval_all
	fadd	QWORD PTR __real@41f0000000000000
	jmp	$LN1746@eval_all
$LN22@eval_all:

; 1493 :           case CHAR_TYPE: value = *(char*)(lvalue); break;

	movsx	edx, BYTE PTR [ecx]
	mov	DWORD PTR tv24181[ebp], edx
	fild	DWORD PTR tv24181[ebp]
	jmp	$LN1746@eval_all
$LN21@eval_all:

; 1494 :           case UCHAR_TYPE: value = *(unsigned char*)(lvalue); break;

	movzx	eax, BYTE PTR [ecx]
	mov	DWORD PTR tv24180[ebp], eax
	fild	DWORD PTR tv24180[ebp]
	jmp	$LN1746@eval_all
$LN20@eval_all:

; 1495 :           case PTR_TYPE: value = (unsigned long int)*(char**)(lvalue); break;

	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR tv24177[ebp], ecx
	fild	DWORD PTR tv24177[ebp]
	test	ecx, ecx
	jns	$LN1746@eval_all
	fadd	QWORD PTR __real@41f0000000000000
	jmp	$LN1746@eval_all
$LN1269@eval_all:

; 1496 :           case VERTEX_TYPE:
; 1497 :           case EDGE_TYPE:
; 1498 :           case FACET_TYPE:
; 1499 :           case BODY_TYPE:
; 1500 :           case FACETEDGE_TYPE:
; 1501 :           case ELEMENTID_TYPE:  break;
; 1502 :           default: value = *(int*)(lvalue); break;

	fld	QWORD PTR _value$90539[ebp]

; 1503 :         
; 1504 :         }
; 1505 : 
; 1506 :          (++stacktop)->value = value;
; 1507 :          FIRST = 0.0;
; 1508 :         break;

	jmp	$LN1746@eval_all
$LN1328@eval_all:

; 62   :   {
; 63   :     switch ( node->type )

	fstp	ST(0)
	fstp	ST(0)
	cmp	eax, 10761				; 00002a09H
	jg	$LN897@eval_all
	je	$LN1270@eval_all
	sub	eax, 10413				; 000028adH
	cmp	eax, 242				; 000000f2H
	ja	$LN897@eval_all
	movzx	edx, BYTE PTR $LN1260@eval_all[eax]
	jmp	DWORD PTR $LN1759@eval_all[edx*4]
$LN688@eval_all:

; 235  : 
; 236  :       case TOGGLEVALUE_NODE:
; 237  :         (++stacktop)->value = (REAL)get_toggle_value(node->op1.toggle_state);

	mov	eax, DWORD PTR [esi+32]
	push	eax
	add	ebx, 104				; 00000068H
	call	_get_toggle_value
	mov	DWORD PTR tv24171[ebp], eax
	fild	DWORD PTR tv24171[ebp]
	add	esp, 4

; 238  :         FIRST = 0.0;
; 239  :         break;

	jmp	$LN1746@eval_all
$LN684@eval_all:

; 240  : 
; 241  :       case SIZEOF_ATTR_NODE:
; 242  :         (++stacktop)->value = (REAL) 
; 243  :             EXTRAS(node->op2.eltype)[node->op1.extranum].array_spec.datacount;

	mov	ecx, DWORD PTR [esi+136]
	mov	edx, DWORD PTR [esi+32]
	imul	ecx, 112				; 00000070H
	mov	eax, DWORD PTR _web[ecx+104]
	imul	edx, 240				; 000000f0H
	add	ebx, 104				; 00000068H
	add	eax, edx
	fild	DWORD PTR [eax+edi+88]

; 244  :         FIRST = 0.0;
; 245  :         break;

	jmp	$LN1746@eval_all
$LN645@eval_all:

; 294  : 
; 295  : 
; 296  :       case PUSHQPRESSURE_NODE:
; 297  :          (++stacktop)->value = GEN_QUANT(node->op1.quant_id)->pressure;

	mov	ecx, DWORD PTR [esi+32]
	mov	edx, DWORD PTR _gen_quant_list
	add	ebx, 104				; 00000068H
	imul	ecx, 368				; 00000170H
	fld	QWORD PTR [ecx+edx+192]

; 298  :          FIRST = 0.0;
; 299  :          break;

	jmp	$LN1746@eval_all
$LN641@eval_all:

; 300  : 
; 301  :       case PUSHQTARGET_NODE:
; 302  :           (++stacktop)->value = GEN_QUANT(node->op1.quant_id)->target;

	mov	eax, DWORD PTR [esi+32]
	mov	ecx, DWORD PTR _gen_quant_list
	add	ebx, 104				; 00000068H
	imul	eax, 368				; 00000170H
	fld	QWORD PTR [eax+ecx+144]

; 303  :           FIRST = 0.0;
; 304  :           break;

	jmp	$LN1746@eval_all
$LN637@eval_all:

; 305  : 
; 306  :       case PUSHQMODULUS_NODE:
; 307  :           (++stacktop)->value = GEN_QUANT(node->op1.quant_id)->modulus;

	mov	edx, DWORD PTR [esi+32]
	mov	eax, DWORD PTR _gen_quant_list
	add	ebx, 104				; 00000068H
	imul	edx, 368				; 00000170H
	fld	QWORD PTR [edx+eax+176]

; 308  :           FIRST = 0.0;
; 309  :           break;

	jmp	$LN1746@eval_all
$LN633@eval_all:

; 310  : 
; 311  :       case PUSHQTOLERANCE_NODE:
; 312  :           (++stacktop)->value = GEN_QUANT(node->op1.quant_id)->tolerance;

	mov	ecx, DWORD PTR [esi+32]
	mov	edx, DWORD PTR _gen_quant_list
	add	ebx, 104				; 00000068H
	imul	ecx, 368				; 00000170H
	fld	QWORD PTR [ecx+edx+184]

; 313  :           FIRST = 0.0;
; 314  :           break;

	jmp	$LN1746@eval_all
$LN629@eval_all:

; 315  : 
; 316  :       case PUSHMMODULUS_NODE:
; 317  :           (++stacktop)->value
; 318  :              = METH_INSTANCE(node->op1.quant_id)->modulus;

	mov	eax, DWORD PTR [esi+32]
	mov	ecx, DWORD PTR _meth_inst_list
	cdq
	xor	eax, edx
	sub	eax, edx
	add	ebx, 104				; 00000068H
	imul	eax, 2928				; 00000b70H
	fld	QWORD PTR [eax+ecx+304]

; 319  :           FIRST = 0.0;
; 320  :           break;

	jmp	$LN1746@eval_all
$LN625@eval_all:

; 321  : 
; 322  :       case PUSHQVALUE_NODE:
; 323  :           { struct gen_quant *q = GEN_QUANT(node->op1.quant_id);

	mov	edx, DWORD PTR [esi+32]

; 324  :             (++stacktop)->value = q->value;

	mov	eax, DWORD PTR _gen_quant_list
	add	ebx, 104				; 00000068H
	imul	edx, 368				; 00000170H
	fld	QWORD PTR [edx+eax+152]

; 325  :             FIRST = 0.0;
; 326  :           }
; 327  :           break;

	jmp	$LN1746@eval_all
$LN621@eval_all:

; 328  : 
; 329  :       case PUSHMVALUE_NODE:
; 330  :           { struct method_instance *mi = METH_INSTANCE(node->op1.meth_id);

	mov	eax, DWORD PTR [esi+32]
	cdq
	mov	ecx, eax
	xor	ecx, edx
	sub	ecx, edx
	imul	ecx, 2928				; 00000b70H
	add	ecx, DWORD PTR _meth_inst_list

; 331  :             (++stacktop)->value = mi->value;

	add	ebx, 104				; 00000068H
	fld	QWORD PTR [ecx+312]
	fstp	QWORD PTR [ebx]

; 332  :             if ( (mi->flags & Q_COMPOUND) && (mi->stamp == comp_quant_stamp) )

	test	DWORD PTR [ecx+140], 256		; 00000100H
	je	$LN667@eval_all
	fild	DWORD PTR _comp_quant_stamp
	fld	QWORD PTR [ecx+2888]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$LN667@eval_all

; 333  :             { for ( i = 0 ; i < pcount ; i++ )

	mov	edx, DWORD PTR _pcount$[ebp]
	xor	eax, eax
	cmp	edx, 4
	jl	$LC1235@eval_all

; 334  :                      stacktop->deriv[i] = mi->grad[comp_quant_vertex][i];

	mov	esi, 8
	sub	esi, ebx
	mov	DWORD PTR tv13285[ebp], esi
	add	edx, -4					; fffffffcH
	mov	esi, -16				; fffffff0H
	sub	esi, ebx
	shr	edx, 2
	inc	edx
	mov	DWORD PTR tv13289[ebp], esi
	lea	esi, DWORD PTR [edx*4]
	mov	DWORD PTR tv25147[ebp], 16		; 00000010H
	lea	eax, DWORD PTR [ebx+16]
	mov	DWORD PTR _i$[ebp], esi
	npad	9
$LL1286@eval_all:
	mov	esi, DWORD PTR [ecx+2896]
	mov	edi, DWORD PTR _comp_quant_vertex
	mov	edi, DWORD PTR [esi+edi*4]
	mov	esi, DWORD PTR tv13289[ebp]
	add	esi, eax
	fld	QWORD PTR [esi+edi]
	fstp	QWORD PTR [eax-8]
	mov	esi, DWORD PTR [ecx+2896]
	mov	edi, DWORD PTR _comp_quant_vertex
	mov	edi, DWORD PTR [esi+edi*4]
	mov	esi, DWORD PTR tv13289[ebp]
	add	esi, eax
	fld	QWORD PTR [edi+esi+8]
	add	eax, 32					; 00000020H
	fstp	QWORD PTR [eax-32]
	mov	edi, DWORD PTR _comp_quant_vertex
	mov	esi, DWORD PTR [ecx+2896]
	mov	esi, DWORD PTR [esi+edi*4]
	mov	edi, DWORD PTR tv25147[ebp]
	fld	QWORD PTR [edi+esi]
	add	DWORD PTR tv25147[ebp], 32		; 00000020H
	fstp	QWORD PTR [eax-24]
	mov	esi, DWORD PTR [ecx+2896]
	mov	edi, DWORD PTR _comp_quant_vertex
	mov	esi, DWORD PTR [esi+edi*4]
	add	esi, DWORD PTR tv13285[ebp]
	dec	edx
	fld	QWORD PTR [esi+eax-32]
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LL1286@eval_all

; 333  :             { for ( i = 0 ; i < pcount ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _pcount$[ebp]
$LC1235@eval_all:
	cmp	eax, edx
	jge	$LN1270@eval_all
$LC619@eval_all:

; 334  :                      stacktop->deriv[i] = mi->grad[comp_quant_vertex][i];

	mov	esi, DWORD PTR [ecx+2896]
	mov	edi, DWORD PTR _comp_quant_vertex
	mov	esi, DWORD PTR [esi+edi*4]
	fld	QWORD PTR [esi+eax*8]
	inc	eax
	fstp	QWORD PTR [ebx+eax*8]
	cmp	eax, edx
	jl	SHORT $LC619@eval_all

; 335  :             }
; 336  :             else FIRST = 0.0;

	jmp	$LN1270@eval_all
$LN612@eval_all:

; 337  :           }
; 338  :           break;
; 339  : 
; 340  :       case PUSHQVOLCONST_NODE:
; 341  :           (++stacktop)->value
; 342  :              = GEN_QUANT(node->op1.quant_id)->volconst;

	mov	ecx, DWORD PTR [esi+32]
	mov	edx, DWORD PTR _gen_quant_list
	add	ebx, 104				; 00000068H
	imul	ecx, 368				; 00000170H
	fld	QWORD PTR [ecx+edx+208]

; 343  :           FIRST = 0.0;
; 344  :           break;

	jmp	$LN1746@eval_all
$LN608@eval_all:

; 345  : 
; 346  :  
; 347  :       case PUSH_NAMED_QUANTITY_NODE:
; 348  :       case PUSH_METHOD_INSTANCE_NODE:
; 349  :           (++stacktop)->value = (REAL)node->op1.quant_id;

	fild	DWORD PTR [esi+32]

; 350  :           FIRST = 0.0;
; 351  :           break;

	jmp	$LN743@eval_all
$LN604@eval_all:

; 352  : 
; 353  : 
; 354  :       case GET_INTERNAL_NODE:
; 355  :            (++stacktop)->value = get_internal_variable(node->op1.name_id);

	mov	eax, DWORD PTR [esi+32]
	push	eax
	add	ebx, 104				; 00000068H
	call	_get_internal_variable
	add	esp, 4

; 356  :            FIRST = 0.0;
; 357  :            break;

	jmp	$LN1746@eval_all
$LN1337@eval_all:

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	fstp	ST(0)
	fstp	ST(0)
$LN897@eval_all:

; 1549 :           return;
; 1550 : 
; 1551 :       default:
; 1552 :            sprintf(errmsg,"Bad expression eval_all() node type %d: %s.",
; 1553 :                  node->type,tokname(node->type));

	push	ecx
	call	_tokname
	mov	ecx, DWORD PTR [esi]
	push	eax
	push	ecx
	push	OFFSET ??_C@_0CM@KIMOGOPP@Bad?5expression?5eval_all?$CI?$CJ?5node?5t@
	push	OFFSET _errmsg
	call	_sprintf

; 1554 :           kb_error(1033,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	1033					; 00000409H
	call	_kb_error
	add	esp, 32					; 00000020H
	jmp	$LN1270@eval_all
$LN1331@eval_all:

; 1547 :           for ( i = 0 ; i < pcount ; i++ )

	mov	edx, DWORD PTR _pcount$[ebp]
	fstp	ST(0)
	mov	eax, DWORD PTR _fval$GSCopy$[ebp]
	fstp	ST(0)
	fld	QWORD PTR [ebx]
	xor	esi, esi
	fstp	QWORD PTR [eax]
	cmp	edx, 4
	jl	SHORT $LN1285@eval_all

; 1543 :          }
; 1544 : 
; 1545 :       case FINISHED_NODE:
; 1546 :           *fval = stacktop->value;

	mov	edi, DWORD PTR _partials$GSCopy$[ebp]
	add	edx, -4					; fffffffcH
	lea	ecx, DWORD PTR [edi+24]
	shr	edx, 2

; 1548 :              partials[i] = stacktop->deriv[i]; 

	sub	edi, ebx
	inc	edx
	lea	eax, DWORD PTR [ebx+16]
	lea	esi, DWORD PTR [edx*4]
$LL1239@eval_all:
	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	fstp	QWORD PTR [ecx-24]
	add	ecx, 32					; 00000020H
	dec	edx
	fld	QWORD PTR [eax-32]
	fstp	QWORD PTR [ecx-48]
	fld	QWORD PTR [eax-24]
	fstp	QWORD PTR [edi+eax-32]
	fld	QWORD PTR [eax-16]
	fstp	QWORD PTR [ecx-32]
	jne	SHORT $LL1239@eval_all

; 1543 :          }
; 1544 : 
; 1545 :       case FINISHED_NODE:
; 1546 :           *fval = stacktop->value;

	mov	edx, DWORD PTR _pcount$[ebp]
$LN1285@eval_all:

; 1547 :           for ( i = 0 ; i < pcount ; i++ )

	cmp	esi, edx
	jge	$LN1240@eval_all
	lea	ebx, DWORD PTR [ebx+esi*8+8]
$LC8@eval_all:

; 1548 :              partials[i] = stacktop->deriv[i]; 

	fld	QWORD PTR [ebx]
	mov	ecx, DWORD PTR _partials$GSCopy$[ebp]
	fstp	QWORD PTR [ecx+esi*8]
	inc	esi
	add	ebx, 8
	cmp	esi, edx
	jl	SHORT $LC8@eval_all

; 1563 :   return;
; 1564 : } /* end eval_all() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN1753@eval_all:
	DD	$LN1270@eval_all
	DD	$LN14@eval_all
	DD	$LN763@eval_all
	DD	$LN727@eval_all
	DD	$LN696@eval_all
	DD	$LN694@eval_all
	DD	$LN700@eval_all
	DD	$LN680@eval_all
	DD	$LN672@eval_all
	DD	$LN897@eval_all
$LN1243@eval_all:
	DB	0
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	1
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	2
	DB	0
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	3
	DB	0
	DB	0
	DB	0
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	4
	DB	9
	DB	5
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	6
	DB	7
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	8
	npad	2
$LN1754@eval_all:
	DD	$LN1409@eval_all
	DD	$LN1433@eval_all
	DD	$LN1407@eval_all
	DD	$LN1408@eval_all
	DD	$LN1402@eval_all
	DD	$LN1401@eval_all
	DD	$LN1400@eval_all
	DD	$LN1399@eval_all
	DD	$LN1398@eval_all
	DD	$LN1397@eval_all
	DD	$LN1396@eval_all
	DD	$LN1431@eval_all
	DD	$LN1430@eval_all
	DD	$LN1395@eval_all
	DD	$LN1394@eval_all
	DD	$LN1393@eval_all
	DD	$LN1392@eval_all
	DD	$LN1391@eval_all
	DD	$LN1390@eval_all
	DD	$LN1389@eval_all
	DD	$LN1388@eval_all
	DD	$LN1429@eval_all
	DD	$LN1428@eval_all
	DD	$LN1411@eval_all
	DD	$LN1410@eval_all
	DD	$LN1387@eval_all
	DD	$LN1427@eval_all
	DD	$LN1382@eval_all
	DD	$LN1381@eval_all
	DD	$LN1380@eval_all
	DD	$LN1379@eval_all
	DD	$LN1378@eval_all
	DD	$LN1377@eval_all
	DD	$LN1371@eval_all
	DD	$LN1376@eval_all
	DD	$LN1375@eval_all
	DD	$LN1374@eval_all
	DD	$LN1373@eval_all
	DD	$LN1425@eval_all
	DD	$LN1424@eval_all
	DD	$LN1423@eval_all
	DD	$LN1372@eval_all
	DD	$LN1422@eval_all
	DD	$LN1421@eval_all
	DD	$LN1426@eval_all
	DD	$LN1384@eval_all
	DD	$LN1383@eval_all
	DD	$LN1386@eval_all
	DD	$LN1385@eval_all
	DD	$LN1370@eval_all
	DD	$LN1369@eval_all
	DD	$LN1405@eval_all
	DD	$LN1404@eval_all
	DD	$LN1432@eval_all
	DD	$LN1368@eval_all
	DD	$LN1367@eval_all
	DD	$LN1366@eval_all
	DD	$LN1365@eval_all
	DD	$LN1364@eval_all
	DD	$LN1363@eval_all
	DD	$LN1362@eval_all
	DD	$LN1361@eval_all
	DD	$LN1360@eval_all
	DD	$LN1359@eval_all
	DD	$LN1358@eval_all
	DD	$LN1357@eval_all
	DD	$LN1356@eval_all
	DD	$LN1355@eval_all
	DD	$LN1354@eval_all
	DD	$LN1414@eval_all
	DD	$LN1413@eval_all
	DD	$LN1353@eval_all
	DD	$LN1420@eval_all
	DD	$LN1412@eval_all
	DD	$LN1351@eval_all
	DD	$LN1352@eval_all
	DD	$LN1350@eval_all
	DD	$LN1349@eval_all
	DD	$LN1348@eval_all
	DD	$LN1419@eval_all
	DD	$LN1418@eval_all
	DD	$LN1417@eval_all
	DD	$LN1347@eval_all
	DD	$LN1346@eval_all
	DD	$LN1345@eval_all
	DD	$LN1344@eval_all
	DD	$LN1343@eval_all
	DD	$LN1403@eval_all
	DD	$LN1406@eval_all
	DD	$LN1336@eval_all
	DD	$LN1416@eval_all
	DD	$LN1342@eval_all
	DD	$LN1341@eval_all
	DD	$LN1340@eval_all
	DD	$LN1339@eval_all
	DD	$LN1338@eval_all
	DD	$LN1415@eval_all
	DD	$LN1337@eval_all
$LN1244@eval_all:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	15					; 0000000fH
	DB	16					; 00000010H
	DB	17					; 00000011H
	DB	18					; 00000012H
	DB	19					; 00000013H
	DB	20					; 00000014H
	DB	21					; 00000015H
	DB	22					; 00000016H
	DB	23					; 00000017H
	DB	24					; 00000018H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	25					; 00000019H
	DB	26					; 0000001aH
	DB	27					; 0000001bH
	DB	28					; 0000001cH
	DB	29					; 0000001dH
	DB	30					; 0000001eH
	DB	31					; 0000001fH
	DB	32					; 00000020H
	DB	33					; 00000021H
	DB	34					; 00000022H
	DB	35					; 00000023H
	DB	36					; 00000024H
	DB	37					; 00000025H
	DB	38					; 00000026H
	DB	39					; 00000027H
	DB	40					; 00000028H
	DB	41					; 00000029H
	DB	42					; 0000002aH
	DB	43					; 0000002bH
	DB	44					; 0000002cH
	DB	45					; 0000002dH
	DB	46					; 0000002eH
	DB	47					; 0000002fH
	DB	48					; 00000030H
	DB	49					; 00000031H
	DB	50					; 00000032H
	DB	51					; 00000033H
	DB	52					; 00000034H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	53					; 00000035H
	DB	54					; 00000036H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	55					; 00000037H
	DB	56					; 00000038H
	DB	57					; 00000039H
	DB	97					; 00000061H
	DB	58					; 0000003aH
	DB	58					; 0000003aH
	DB	59					; 0000003bH
	DB	60					; 0000003cH
	DB	61					; 0000003dH
	DB	61					; 0000003dH
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	62					; 0000003eH
	DB	63					; 0000003fH
	DB	64					; 00000040H
	DB	65					; 00000041H
	DB	66					; 00000042H
	DB	67					; 00000043H
	DB	67					; 00000043H
	DB	68					; 00000044H
	DB	68					; 00000044H
	DB	69					; 00000045H
	DB	70					; 00000046H
	DB	71					; 00000047H
	DB	71					; 00000047H
	DB	71					; 00000047H
	DB	72					; 00000048H
	DB	72					; 00000048H
	DB	73					; 00000049H
	DB	74					; 0000004aH
	DB	75					; 0000004bH
	DB	76					; 0000004cH
	DB	77					; 0000004dH
	DB	78					; 0000004eH
	DB	79					; 0000004fH
	DB	80					; 00000050H
	DB	81					; 00000051H
	DB	81					; 00000051H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	82					; 00000052H
	DB	83					; 00000053H
	DB	83					; 00000053H
	DB	84					; 00000054H
	DB	84					; 00000054H
	DB	85					; 00000055H
	DB	85					; 00000055H
	DB	86					; 00000056H
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	87					; 00000057H
	DB	88					; 00000058H
	DB	89					; 00000059H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	89					; 00000059H
	DB	97					; 00000061H
	DB	90					; 0000005aH
	DB	91					; 0000005bH
	DB	97					; 00000061H
	DB	92					; 0000005cH
	DB	93					; 0000005dH
	DB	93					; 0000005dH
	DB	93					; 0000005dH
	DB	97					; 00000061H
	DB	89					; 00000059H
	DB	89					; 00000059H
	DB	89					; 00000059H
	DB	94					; 0000005eH
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	96					; 00000060H
	npad	1
$LN1755@eval_all:
	DD	$LN742@eval_all
	DD	$LN731@eval_all
	DD	$LN734@eval_all
	DD	$LN738@eval_all
	DD	$LN736@eval_all
	DD	$LN740@eval_all
	DD	$LN731@eval_all
	DD	$LN739@eval_all
	DD	$LN737@eval_all
	DD	$LN731@eval_all
	DD	$LN731@eval_all
	DD	$LN740@eval_all
	DD	$LN731@eval_all
	DD	$LN731@eval_all
	DD	$LN731@eval_all
	DD	$LN731@eval_all
	DD	$LN731@eval_all
	DD	$LN731@eval_all
$LN1756@eval_all:
	DD	$LN306@eval_all
	DD	$LN305@eval_all
	DD	$LN304@eval_all
	DD	$LN303@eval_all
$LN1757@eval_all:
	DD	$LN123@eval_all
	DD	$LN122@eval_all
	DD	$LN113@eval_all
	DD	$LN116@eval_all
	DD	$LN120@eval_all
	DD	$LN115@eval_all
	DD	$LN119@eval_all
	DD	$LN114@eval_all
	DD	$LN667@eval_all
$LN1256@eval_all:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	4
	DB	2
	DB	1
	DB	5
	DB	6
	DB	8
	DB	8
	DB	7
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	npad	1
$LN1758@eval_all:
	DD	$LN29@eval_all
	DD	$LN28@eval_all
	DD	$LN23@eval_all
	DD	$LN21@eval_all
	DD	$LN25@eval_all
	DD	$LN27@eval_all
	DD	$LN28@eval_all
	DD	$LN22@eval_all
	DD	$LN26@eval_all
	DD	$LN28@eval_all
	DD	$LN28@eval_all
	DD	$LN20@eval_all
	DD	$LN1269@eval_all
	DD	$LN1269@eval_all
	DD	$LN1269@eval_all
	DD	$LN1269@eval_all
	DD	$LN1269@eval_all
	DD	$LN1269@eval_all
$LN1759@eval_all:
	DD	$LN604@eval_all
	DD	$LN684@eval_all
	DD	$LN645@eval_all
	DD	$LN641@eval_all
	DD	$LN637@eval_all
	DD	$LN633@eval_all
	DD	$LN629@eval_all
	DD	$LN625@eval_all
	DD	$LN621@eval_all
	DD	$LN612@eval_all
	DD	$LN608@eval_all
	DD	$LN688@eval_all
	DD	$LN1270@eval_all
	DD	$LN897@eval_all
$LN1260@eval_all:
	DB	0
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	1
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	11					; 0000000bH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	12					; 0000000cH
_eval_all ENDP
_TEXT	ENDS
END
