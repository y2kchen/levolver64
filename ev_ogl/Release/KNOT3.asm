; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\KNOT3.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_cos_exponent_param:DWORD
_DATA	ENDS
PUBLIC	_get_fe_edge
EXTRN	_web:BYTE
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
;	COMDAT _get_fe_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_edge PROC					; COMDAT

; 43   : {

	push	ebp
	mov	ebp, esp

; 44   :   edge_id e_id;
; 45   :     
; 46   :   e_id = feptr(fe_id)->fe_edge_id;

	mov	eax, DWORD PTR _fe_id$[ebp]

; 47   : 
; 48   :   /*
; 49   :   if ( inverted(fe_id) ) invert(e_id);
; 50   :   return e_id;
; 51   :   */
; 52   :   
; 53   :   return same_sign(e_id,fe_id);

	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]

; 54   : }

	pop	ebp
	ret	0
_get_fe_edge ENDP
_TEXT	ENDS
PUBLIC	_get_next_edge
; Function compile flags: /Ogtp
;	COMDAT _get_next_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_next_edge PROC					; COMDAT

; 76   : {

	push	ebp
	mov	ebp, esp

; 77   :   if ( inverted(fe_id) ) return inverse_id(feptr(fe_id)->nextedge[0]);

	mov	eax, DWORD PTR _fe_id$[ebp]
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_next_e
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H

; 79   : }

	pop	ebp
	ret	0
$LN2@get_next_e:

; 78   :   else return feptr(fe_id)->nextedge[1];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]

; 79   : }

	pop	ebp
	ret	0
_get_next_edge ENDP
_TEXT	ENDS
PUBLIC	_get_edge_tailv
EXTRN	_dymem:DWORD
; Function compile flags: /Ogtp
;	COMDAT _get_edge_tailv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_tailv PROC					; COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp

; 192  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 193  :      return get_edge_vertices(e_id)[web.headvnum];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_t
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 196  : }

	pop	ebp
	ret	0
$LN2@get_edge_t:

; 194  :   else
; 195  :      return get_edge_vertices(e_id)[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 196  : }

	pop	ebp
	ret	0
_get_edge_tailv ENDP
_TEXT	ENDS
PUBLIC	_get_edge_headv
; Function compile flags: /Ogtp
;	COMDAT _get_edge_headv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_headv PROC					; COMDAT

; 200  : {

	push	ebp
	mov	ebp, esp

; 201  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 202  :      return get_edge_vertices(e_id)[0];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_h
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 205  : }

	pop	ebp
	ret	0
$LN2@get_edge_h:

; 203  :   else
; 204  :      return get_edge_vertices(e_id)[web.headvnum];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 205  : }

	pop	ebp
	ret	0
_get_edge_headv ENDP
_TEXT	ENDS
PUBLIC	_get_facet_fe
; Function compile flags: /Ogtp
;	COMDAT _get_facet_fe
_TEXT	SEGMENT
_f_id$ = 8						; size = 4
_get_facet_fe PROC					; COMDAT

; 260  : {

	push	ebp
	mov	ebp, esp

; 261  :   facetedge_id fe;
; 262  :   
; 263  :   if ( !valid_id(f_id) ) return NULLID;

	mov	ecx, DWORD PTR _f_id$[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN2@get_facet_
	xor	eax, eax

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
$LN2@get_facet_:

; 264  :   fe = fptr(f_id)->fe_id;

	mov	edx, DWORD PTR _web+236
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]

; 265  :   if ( inverted(f_id) ) invert(fe);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_facet_
	xor	eax, 134217728				; 08000000H
$LN3@get_facet_:

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
_get_facet_fe ENDP
_TEXT	ENDS
PUBLIC	_get_next_head_edge
; Function compile flags: /Ogtp
;	COMDAT _get_next_head_edge
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_next_head_edge PROC				; COMDAT

; 273  : { return inverse_id(eptr(e_id)->next_vedge[inverted(e_id) ?0: 1]); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _e_id$[ebp]
	mov	edx, DWORD PTR _web+124
	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	not	ecx
	and	ecx, 1
	mov	eax, DWORD PTR [eax+ecx*4+32]
	xor	eax, 134217728				; 08000000H
	pop	ebp
	ret	0
_get_next_head_edge ENDP
_TEXT	ENDS
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@0000000000000000
PUBLIC	__$ArrayPad$
PUBLIC	_edge_edge_knot_energy
EXTRN	_dot:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CIsqrt:PROC
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\knot3.c
CONST	ENDS
;	COMDAT _edge_edge_knot_energy
_TEXT	SEGMENT
_L1$ = -188						; size = 8
tv2819 = -180						; size = 4
_e1$ = -176						; size = 4
tv2821 = -172						; size = 4
tv2830 = -168						; size = 4
_yy1$ = -164						; size = 4
tv2817 = -160						; size = 4
tv2825 = -156						; size = 4
tv990 = -152						; size = 4
_j$ = -148						; size = 4
tv2823 = -144						; size = 4
_energy$ = -140						; size = 8
_dd$ = -132						; size = 8
tv2315 = -128						; size = 4
_x2$ = -124						; size = 4
tv2002 = -120						; size = 4
tv1411 = -120						; size = 4
tv1394 = -116						; size = 4
_y2$ = -116						; size = 4
tv2828 = -112						; size = 4
tv1415 = -112						; size = 4
tv2324 = -108						; size = 4
tv1419 = -108						; size = 4
tv998 = -108						; size = 4
_x1$ = -104						; size = 4
_dx2$ = -100						; size = 48
_dx1$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_edge_edge_knot_energy PROC				; COMDAT

; 42   : { edge_id e1 = e_info->id,e2;

	push	ebp
	mov	ebp, esp
	sub	esp, 188				; 000000bcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _e_info$[ebp]

; 43   :   REAL *x1,*x2,*yy1,*y2; /* end coordinates */
; 44   :   REAL energy = 0.0;

	fldz
	mov	eax, DWORD PTR [eax]
	fstp	QWORD PTR _energy$[ebp]

; 45   :   REAL dx1[MAXCOORD];
; 46   :   REAL dx2[MAXCOORD];
; 47   :   REAL LL1,L1,LL2,L2,dd;
; 48   :   int j;
; 49   : 
; 50   :   x1 = get_coord(get_edge_tailv(e1));

	mov	ecx, DWORD PTR _web+124
	push	ebx
	push	esi
	push	edi
	mov	edi, eax
	mov	DWORD PTR _e1$[ebp], eax
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR _web+216
	mov	eax, DWORD PTR [eax+ecx+304]
	shr	edi, 27					; 0000001bH
	add	edx, eax
	and	edi, 1
	je	SHORT $LN16@edge_edge_
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN15@edge_edge_
$LN16@edge_edge_:
	mov	eax, DWORD PTR [edx]
$LN15@edge_edge_:
	mov	esi, DWORD PTR _web+104
	mov	ecx, DWORD PTR [esi+ecx+64]
	mov	ebx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ebx+eax*4]
	add	esi, ecx
	mov	DWORD PTR _x1$[ebp], esi

; 51   :   x2 = get_coord(get_edge_headv(e1));

	test	edi, edi
	je	SHORT $LN20@edge_edge_
	mov	eax, DWORD PTR [edx]
	jmp	SHORT $LN19@edge_edge_
$LN20@edge_edge_:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
$LN19@edge_edge_:
	and	eax, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ebx+eax*4]
	add	edi, ecx

; 52   :   for ( j = 0 ; j < SDIM ; j++ ) dx1[j] = x2[j] - x1[j];

	mov	ecx, DWORD PTR _web+616
	xor	edx, edx
	mov	DWORD PTR _x2$[ebp], edi
	cmp	ecx, 4
	jl	SHORT $LC38@edge_edge_
	mov	ebx, edi
	sub	ebx, esi
	mov	DWORD PTR tv1394[ebp], ebx
	lea	ebx, DWORD PTR _dx1$[ebp]
	sub	ebx, esi
	mov	DWORD PTR tv1411[ebp], ebx
	lea	ebx, DWORD PTR _dx1$[ebp+8]
	sub	ebx, esi
	mov	DWORD PTR tv1415[ebp], ebx
	lea	ebx, DWORD PTR _dx1$[ebp+16]
	sub	ebx, esi
	lea	ecx, DWORD PTR [edi+24]
	lea	eax, DWORD PTR [esi+8]
	mov	DWORD PTR tv1419[ebp], ebx
	npad	3
$LL39@edge_edge_:
	fld	QWORD PTR [ecx-24]
	mov	ebx, DWORD PTR tv1394[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _dx1$[ebp+edx*8-32]
	fld	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv1411[ebp]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv1415[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv1419[ebp]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR _web+616
	add	ebx, -3					; fffffffdH
	cmp	edx, ebx
	jl	SHORT $LL39@edge_edge_
	mov	ecx, DWORD PTR _web+616
$LC38@edge_edge_:
	cmp	edx, ecx
	jge	SHORT $LN37@edge_edge_
	lea	ebx, DWORD PTR _dx1$[ebp]
	sub	edi, esi
	sub	ebx, esi
	lea	eax, DWORD PTR [esi+edx*8]
	sub	ecx, edx
$LC12@edge_edge_:
	fld	QWORD PTR [eax+edi]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax+ebx-8]
	jne	SHORT $LC12@edge_edge_
	mov	ecx, DWORD PTR _web+616
$LN37@edge_edge_:

; 53   :   LL1 = SDIM_dot(dx1,dx1);

	push	ecx
	lea	ecx, DWORD PTR _dx1$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	add	esp, 12					; 0000000cH

; 54   :   L1 = sqrt(LL1);

	call	__CIsqrt
	fstp	QWORD PTR _L1$[ebp]

; 55   :   FOR_ALL_EDGES(e2)

	mov	ecx, DWORD PTR _web+160
	test	ecx, 268435456				; 10000000H
	je	$LN43@edge_edge_
	fld	QWORD PTR __real@3fe0000000000000
$LN9@edge_edge_:
	mov	edx, DWORD PTR _web+124
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	mov	DWORD PTR tv990[ebp], edx
	je	$LN8@edge_edge_

; 56   :     { if ( e2 == e1 ) continue; /* skip self */

	cmp	ecx, DWORD PTR _e1$[ebp]
	je	$LN8@edge_edge_

; 57   :       yy1 = get_coord(get_edge_tailv(e2));

	mov	eax, DWORD PTR _web+216
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR tv998[ebp], ecx
	mov	ecx, DWORD PTR _dymem
	mov	ebx, DWORD PTR [eax+ecx+304]
	je	SHORT $LN24@edge_edge_
	mov	ecx, DWORD PTR _web+636
	add	ebx, edx
	mov	eax, DWORD PTR [ebx+ecx*4]
	jmp	SHORT $LN23@edge_edge_
$LN24@edge_edge_:
	mov	eax, DWORD PTR [ebx+edx]
	add	ebx, edx
$LN23@edge_edge_:
	mov	ecx, DWORD PTR _web+104
	mov	edx, DWORD PTR _dymem
	mov	edi, DWORD PTR [ecx+edx+64]
	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	add	edx, edi

; 58   :       y2 = get_coord(get_edge_headv(e2));

	cmp	DWORD PTR tv998[ebp], 0
	mov	DWORD PTR _yy1$[ebp], edx
	je	SHORT $LN28@edge_edge_
	mov	eax, DWORD PTR [ebx]
	jmp	SHORT $LN27@edge_edge_
$LN28@edge_edge_:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [ebx+eax*4]
$LN27@edge_edge_:

; 59   :       LL2 = dd = 0.0;

	fldz
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ecx+eax*4]
	fld	ST(0)
	add	ebx, edi
	fst	QWORD PTR _dd$[ebp]

; 60   :       for ( j = 0 ; j < SDIM ; j++ )

	xor	edi, edi
	cmp	DWORD PTR _web+616, 4
	mov	DWORD PTR _y2$[ebp], ebx
	jl	$LC41@edge_edge_

; 66   :             dd += rj*rj;

	lea	ecx, DWORD PTR [ebx+16]
	sub	ebx, edx
	lea	eax, DWORD PTR [edx+8]
	neg	edx
	mov	DWORD PTR tv2002[ebp], ebx
	mov	ebx, DWORD PTR _x1$[ebp]
	add	ebx, edx
	mov	DWORD PTR tv2817[ebp], ebx
	mov	ebx, DWORD PTR _x2$[ebp]
	add	ebx, edx
	mov	DWORD PTR tv2819[ebp], ebx
	lea	ebx, DWORD PTR _dx2$[ebp+edx]
	mov	DWORD PTR tv2821[ebp], ebx
	lea	ebx, DWORD PTR _dx2$[ebp+edx+8]
	lea	edx, DWORD PTR _dx2$[ebp+edx+16]
	mov	DWORD PTR tv2825[ebp], edx
	mov	edx, DWORD PTR _y2$[ebp]
	neg	edx
	mov	DWORD PTR tv2823[ebp], ebx
	mov	ebx, DWORD PTR _x1$[ebp]
	add	ebx, edx
	mov	DWORD PTR tv2828[ebp], ebx
	mov	ebx, DWORD PTR _x2$[ebp]
	add	edx, ebx
	mov	DWORD PTR tv2830[ebp], edx
	mov	edx, DWORD PTR _x1$[ebp]
	sub	edx, ebx
	mov	DWORD PTR tv2315[ebp], edx
	lea	edx, DWORD PTR _dx2$[ebp]
	sub	edx, DWORD PTR _x1$[ebp]
	mov	edi, esi
	mov	esi, DWORD PTR _x2$[ebp]
	mov	DWORD PTR tv2324[ebp], edx
	mov	edx, DWORD PTR _web+616
	add	edx, -4					; fffffffcH
	shr	edx, 2
	add	esi, 24					; 00000018H
	inc	edx
	lea	ebx, DWORD PTR [edx*4]
	mov	DWORD PTR _j$[ebp], ebx
$LN42@edge_edge_:

; 61   :       {
; 62   :             REAL rj;
; 63   :             dx2[j] = y2[j] - yy1[j];

	fld	QWORD PTR [ecx-16]
	mov	ebx, DWORD PTR tv2324[ebp]
	fsub	QWORD PTR [eax-8]

; 66   :             dd += rj*rj;

	add	eax, 32					; 00000020H
	add	edi, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fst	QWORD PTR [edi+ebx-32]
	mov	ebx, DWORD PTR tv2002[ebp]
	fld	QWORD PTR [ecx-48]
	add	esi, 32					; 00000020H
	dec	edx
	fadd	QWORD PTR [eax-40]
	fsub	QWORD PTR [edi-32]
	fsub	QWORD PTR [esi-56]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(0)
	faddp	ST(2), ST(0)
	fld	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv2821[ebp]
	fsub	QWORD PTR [eax-32]
	fst	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv2002[ebp]
	fld	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv2817[ebp]
	fadd	QWORD PTR [eax-32]
	fsub	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv2819[ebp]
	fsub	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv2823[ebp]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(0)
	faddp	ST(3), ST(0)
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-24]
	fst	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv2828[ebp]
	fld	QWORD PTR [ecx-32]
	fadd	QWORD PTR [eax-24]
	fsub	QWORD PTR [ecx+ebx-32]
	mov	ebx, DWORD PTR tv2830[ebp]
	fsub	QWORD PTR [ecx+ebx-32]
	mov	ebx, DWORD PTR tv2825[ebp]
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(0)
	faddp	ST(4), ST(0)
	fld	QWORD PTR [ecx-24]
	fsub	QWORD PTR [eax-16]
	fst	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv2315[ebp]
	fld	ST(3)
	fmulp	ST(4), ST(0)
	fxch	ST(3)
	faddp	ST(5), ST(0)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fxch	ST(4)
	faddp	ST(1), ST(0)
	fld	ST(3)
	fmulp	ST(4), ST(0)
	faddp	ST(3), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(2), ST(0)
	fld	QWORD PTR [ecx-24]
	fadd	QWORD PTR [eax-16]
	fsub	QWORD PTR [esi+ebx-32]
	fsub	QWORD PTR [esi-32]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	jne	$LN42@edge_edge_
	mov	ebx, DWORD PTR _y2$[ebp]
	fst	QWORD PTR _dd$[ebp]
	mov	edx, DWORD PTR _yy1$[ebp]
	mov	edi, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _x1$[ebp]
$LC41@edge_edge_:

; 60   :       for ( j = 0 ; j < SDIM ; j++ )

	cmp	edi, DWORD PTR _web+616
	jge	SHORT $LN66@edge_edge_
	mov	ecx, ebx
	lea	eax, DWORD PTR [ebx+edi*8]
	sub	edx, ebx
	mov	ebx, DWORD PTR _x1$[ebp]
	neg	ecx
	add	ebx, ecx
	mov	DWORD PTR tv2828[ebp], ebx
	mov	ebx, DWORD PTR _x2$[ebp]
	lea	esi, DWORD PTR _dx2$[ebp+ecx]
	add	ebx, ecx
	mov	ecx, DWORD PTR _web+616
	sub	ecx, edi
	mov	edi, DWORD PTR tv2828[ebp]
$LC3@edge_edge_:

; 61   :       {
; 62   :             REAL rj;
; 63   :             dx2[j] = y2[j] - yy1[j];

	fld	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [edx+eax-8]
	fst	QWORD PTR [esi+eax-8]

; 64   :             LL2 += dx2[j]*dx2[j];

	fmul	ST(0), ST(0)
	faddp	ST(2), ST(0)

; 65   :             rj = (yy1[j] + y2[j] - x1[j] - x2[j])/2;

	fld	QWORD PTR [edx+eax-8]
	fadd	QWORD PTR [eax-8]
	fsub	QWORD PTR [edi+eax-8]
	fsub	QWORD PTR [ebx+eax-8]
	fmul	ST(0), ST(3)

; 66   :             dd += rj*rj;

	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	jne	SHORT $LC3@edge_edge_

; 60   :       for ( j = 0 ; j < SDIM ; j++ )

	mov	esi, DWORD PTR _x1$[ebp]
	fstp	ST(2)

; 66   :             dd += rj*rj;

	fxch	ST(1)
	fstp	QWORD PTR _dd$[ebp]
	jmp	SHORT $LN40@edge_edge_
$LN66@edge_edge_:

; 60   :       for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(2)
	fstp	ST(1)
$LN40@edge_edge_:

; 67   :       }
; 68   :       L2 = sqrt(LL2);

	call	__CIsqrt

; 69   :       energy += L1*L2/dd;

	fmul	QWORD PTR _L1$[ebp]
	mov	edx, DWORD PTR tv990[ebp]
	fdiv	QWORD PTR _dd$[ebp]
	fadd	QWORD PTR _energy$[ebp]
	fstp	QWORD PTR _energy$[ebp]
	fld	QWORD PTR __real@3fe0000000000000
$LN8@edge_edge_:

; 55   :   FOR_ALL_EDGES(e2)

	mov	ecx, DWORD PTR [edx]
	test	ecx, 268435456				; 10000000H
	jne	$LN9@edge_edge_
	fstp	ST(0)
$LN43@edge_edge_:

; 70   :     }
; 71   :   return energy;
; 72   : } // end edge_edge_knot_energy()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _energy$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_edge_edge_knot_energy ENDP
_TEXT	ENDS
PUBLIC	__real@4000000000000000
PUBLIC	_e_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_edge_edge_knot_energy_gradient
;	COMDAT __real@4000000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\knot3.c
CONST	ENDS
;	COMDAT _edge_edge_knot_energy_gradient
_TEXT	SEGMENT
tv3018 = -260						; size = 8
_L1$ = -252						; size = 8
_LL2$ = -244						; size = 8
tv3480 = -236						; size = 4
_e_info$GSCopy$ = -232					; size = 4
tv3476 = -228						; size = 4
_e1$ = -224						; size = 4
tv3488 = -220						; size = 4
_yy1$ = -216						; size = 4
tv3486 = -212						; size = 4
tv3478 = -208						; size = 4
tv3484 = -204						; size = 4
tv3474 = -200						; size = 4
tv3482 = -196						; size = 4
_energy$ = -192						; size = 8
_dd$ = -184						; size = 8
tv3491 = -176						; size = 4
tv1773 = -172						; size = 4
tv1223 = -172						; size = 4
tv2447 = -168						; size = 4
tv1781 = -168						; size = 4
tv3493 = -164						; size = 4
tv3490 = -164						; size = 4
_x2$ = -160						; size = 4
_x1$ = -156						; size = 4
tv1777 = -152						; size = 4
tv1234 = -152						; size = 4
_y2$ = -152						; size = 4
_dx2$ = -148						; size = 48
_r$ = -100						; size = 48
_dx1$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_edge_edge_knot_energy_gradient PROC			; COMDAT

; 86   : { edge_id e1 = e_info->id,e2;

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	edx, DWORD PTR _e_info$[ebp]

; 87   :   REAL *x1,*x2,*yy1,*y2; /* end coordinates */
; 88   :   REAL energy = 0.0;

	fldz
	push	ebx
	fst	QWORD PTR _energy$[ebp]
	push	esi
	mov	esi, DWORD PTR [edx]
	push	edi
	mov	DWORD PTR _e_info$GSCopy$[ebp], edx
	mov	DWORD PTR _e1$[ebp], esi

; 89   :   REAL dx1[MAXCOORD];
; 90   :   REAL dx2[MAXCOORD];
; 91   :   REAL r[MAXCOORD];
; 92   :   REAL LL1,L1,LL2,L2,dd;
; 93   :   REAL en1;
; 94   :   int i,j;
; 95   : 
; 96   :   for ( i = 0 ; i < 2 ; i++ )

	xor	ecx, ecx
$LN21@edge_edge_@2:

; 97   :      for ( j = 0 ; j < SDIM ; j++ ) e_info->grad[i][j] = 0.0;

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN20@edge_edge_@2
$LN18@edge_edge_@2:
	mov	edi, DWORD PTR [edx+1336]
	mov	edi, DWORD PTR [ecx+edi]
	fst	QWORD PTR [edi+eax*8]
	inc	eax
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN18@edge_edge_@2
$LN20@edge_edge_@2:

; 89   :   REAL dx1[MAXCOORD];
; 90   :   REAL dx2[MAXCOORD];
; 91   :   REAL r[MAXCOORD];
; 92   :   REAL LL1,L1,LL2,L2,dd;
; 93   :   REAL en1;
; 94   :   int i,j;
; 95   : 
; 96   :   for ( i = 0 ; i < 2 ; i++ )

	add	ecx, 4
	cmp	ecx, 8
	jl	SHORT $LN21@edge_edge_@2

; 98   :   x1 = get_coord(get_edge_tailv(e1));

	mov	edi, esi
	fstp	ST(0)
	shr	edi, 27					; 0000001bH
	and	esi, 134217727				; 07ffffffH
	and	edi, 1
	je	SHORT $LN25@edge_edge_@2
	mov	eax, DWORD PTR _web+124
	mov	edx, DWORD PTR [eax+esi*4]
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR _web+216
	mov	eax, DWORD PTR [eax+ecx+304]
	add	edx, eax
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN24@edge_edge_@2
$LN25@edge_edge_@2:
	mov	ecx, DWORD PTR _web+124
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR _web+216
	mov	eax, DWORD PTR [eax+ecx+304]
	add	edx, eax
	mov	eax, DWORD PTR [edx]
$LN24@edge_edge_@2:
	mov	esi, DWORD PTR _web+104
	mov	ecx, DWORD PTR [esi+ecx+64]
	mov	ebx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ebx+eax*4]
	add	esi, ecx
	mov	DWORD PTR _x1$[ebp], esi

; 99   :   x2 = get_coord(get_edge_headv(e1));

	test	edi, edi
	je	SHORT $LN29@edge_edge_@2
	mov	eax, DWORD PTR [edx]
	jmp	SHORT $LN28@edge_edge_@2
$LN29@edge_edge_@2:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
$LN28@edge_edge_@2:
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ebx+eax*4]
	add	ebx, ecx

; 100  :   for ( j = 0 ; j < SDIM ; j++ ) dx1[j] = x2[j] - x1[j];

	xor	edx, edx
	cmp	DWORD PTR _web+616, 4
	mov	DWORD PTR _x2$[ebp], ebx
	jl	$LC53@edge_edge_@2
	lea	edi, DWORD PTR _dx1$[ebp]
	sub	edi, esi
	mov	DWORD PTR tv1773[ebp], edi
	lea	edi, DWORD PTR _dx1$[ebp+8]
	sub	edi, esi
	mov	DWORD PTR tv1777[ebp], edi
	lea	ecx, DWORD PTR [ebx+24]
	lea	edi, DWORD PTR _dx1$[ebp+16]
	sub	ebx, esi
	sub	edi, esi
	lea	eax, DWORD PTR [esi+8]
	mov	DWORD PTR tv1781[ebp], edi
	npad	9
$LL54@edge_edge_@2:
	fld	QWORD PTR [ecx-24]
	mov	edi, DWORD PTR tv1773[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _dx1$[ebp+edx*8-32]
	fld	QWORD PTR [ebx+eax-32]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv1777[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv1781[ebp]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR _web+616
	add	edi, -3					; fffffffdH
	cmp	edx, edi
	jl	SHORT $LL54@edge_edge_@2
	mov	ebx, DWORD PTR _x2$[ebp]
$LC53@edge_edge_@2:
	cmp	edx, DWORD PTR _web+616
	jge	SHORT $LN52@edge_edge_@2
	mov	ecx, DWORD PTR _web+616
	lea	edi, DWORD PTR _dx1$[ebp]
	sub	ebx, esi
	sub	edi, esi
	lea	eax, DWORD PTR [esi+edx*8]
	sub	ecx, edx
$LC15@edge_edge_@2:
	fld	QWORD PTR [eax+ebx]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax+edi-8]
	jne	SHORT $LC15@edge_edge_@2
$LN52@edge_edge_@2:

; 101  :   LL1 = SDIM_dot(dx1,dx1);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _dx1$[ebp]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	add	esp, 12					; 0000000cH

; 102  :   L1 = sqrt(LL1);

	call	__CIsqrt
	fstp	QWORD PTR _L1$[ebp]

; 103  :   FOR_ALL_EDGES(e2)

	mov	ecx, DWORD PTR _web+160
	test	ecx, 268435456				; 10000000H
	je	$LN58@edge_edge_@2
	fld	QWORD PTR __real@3fe0000000000000
$LN12@edge_edge_@2:
	mov	edx, DWORD PTR _web+124
	mov	edi, ecx
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	edx, DWORD PTR [edi+edx]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	xor	esi, esi
	or	eax, esi
	mov	DWORD PTR tv1223[ebp], edi
	je	$LN11@edge_edge_@2

; 104  :     { if ( e2 == e1 ) continue; /* skip self */

	cmp	ecx, DWORD PTR _e1$[ebp]
	je	$LN11@edge_edge_@2

; 105  :       yy1 = get_coord(get_edge_tailv(e2));

	mov	eax, DWORD PTR _web+216
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR tv1234[ebp], ecx
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	je	SHORT $LN33@edge_edge_@2
	mov	ecx, DWORD PTR _web+636
	add	edx, eax
	mov	eax, DWORD PTR [edx+ecx*4]
	jmp	SHORT $LN32@edge_edge_@2
$LN33@edge_edge_@2:
	add	edx, eax
	mov	eax, DWORD PTR [edx]
$LN32@edge_edge_@2:
	mov	ecx, DWORD PTR _web+104
	mov	esi, DWORD PTR _dymem
	mov	esi, DWORD PTR [ecx+esi+64]
	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ecx+eax*4]
	add	ebx, esi

; 106  :       y2 = get_coord(get_edge_headv(e2));

	cmp	DWORD PTR tv1234[ebp], 0
	mov	DWORD PTR _yy1$[ebp], ebx
	je	SHORT $LN37@edge_edge_@2
	mov	eax, DWORD PTR [edx]
	jmp	SHORT $LN36@edge_edge_@2
$LN37@edge_edge_@2:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
$LN36@edge_edge_@2:

; 107  :       LL2 = dd = 0.0;

	fldz
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	ST(0)
	add	edx, esi
	fst	QWORD PTR _dd$[ebp]
	fxch	ST(1)

; 108  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	cmp	DWORD PTR _web+616, 4
	fst	QWORD PTR _LL2$[ebp]
	mov	DWORD PTR _y2$[ebp], edx
	jl	$LC56@edge_edge_@2

; 113  :             dd += r[j]*r[j];

	lea	ecx, DWORD PTR [edx+16]
	fstp	ST(1)
	sub	edx, ebx
	fstp	ST(0)
	mov	DWORD PTR tv2447[ebp], edx
	mov	edx, ebx
	neg	edx
	lea	eax, DWORD PTR [ebx+8]
	mov	ebx, DWORD PTR _x1$[ebp]
	add	ebx, edx
	mov	DWORD PTR tv3474[ebp], ebx
	mov	ebx, DWORD PTR _x2$[ebp]
	add	ebx, edx
	mov	DWORD PTR tv3476[ebp], ebx
	lea	ebx, DWORD PTR _dx2$[ebp+edx]
	mov	edi, DWORD PTR _x2$[ebp]
	mov	DWORD PTR tv3478[ebp], ebx
	lea	ebx, DWORD PTR _r$[ebp+edx]
	mov	DWORD PTR tv3480[ebp], ebx
	lea	ebx, DWORD PTR _dx2$[ebp+edx+8]
	mov	DWORD PTR tv3482[ebp], ebx
	lea	ebx, DWORD PTR _r$[ebp+edx+8]
	mov	DWORD PTR tv3484[ebp], ebx
	lea	ebx, DWORD PTR _dx2$[ebp+edx+16]
	lea	edx, DWORD PTR _r$[ebp+edx+16]
	mov	DWORD PTR tv3488[ebp], edx
	mov	edx, DWORD PTR _y2$[ebp]
	neg	edx
	mov	DWORD PTR tv3490[ebp], edx
	add	edx, DWORD PTR _x1$[ebp]
	mov	DWORD PTR tv3486[ebp], ebx
	mov	ebx, DWORD PTR _x2$[ebp]
	mov	DWORD PTR tv3491[ebp], edx
	mov	edx, DWORD PTR tv3490[ebp]
	add	edx, ebx
	mov	DWORD PTR tv3493[ebp], edx
	mov	edx, DWORD PTR _x1$[ebp]
	add	edi, 24					; 00000018H
	sub	edx, ebx
	jmp	SHORT $LN61@edge_edge_@2
$LN86@edge_edge_@2:
	fstp	ST(0)
	fstp	ST(0)
$LN61@edge_edge_@2:

; 111  :             LL2 += dx2[j]*dx2[j];
; 112  :             r[j] = (yy1[j] + y2[j] - x1[j] - x2[j])/2;

	fld	QWORD PTR [ecx-16]
	mov	ebx, DWORD PTR _x1$[ebp]
	fsub	QWORD PTR [eax-8]

; 113  :             dd += r[j]*r[j];

	add	esi, 4
	fst	QWORD PTR _dx2$[ebp+esi*8-32]
	fld	QWORD PTR [eax-8]
	fadd	QWORD PTR [ecx-16]
	fsub	QWORD PTR [ebx+esi*8-32]
	mov	ebx, DWORD PTR tv2447[ebp]
	fsub	QWORD PTR [edi-24]
	fmul	ST(0), ST(2)
	fst	QWORD PTR _r$[ebp+esi*8-32]
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv3478[ebp]
	fsub	QWORD PTR [eax]
	fst	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv2447[ebp]
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv3474[ebp]
	fadd	QWORD PTR [eax]
	fsub	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv3476[ebp]
	fsub	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv3480[ebp]
	fmul	ST(0), ST(4)
	fst	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv3482[ebp]
	fld	QWORD PTR [ecx]
	fsub	QWORD PTR [eax+8]
	fst	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv3491[ebp]
	fld	QWORD PTR [ecx]
	fadd	QWORD PTR [eax+8]
	fsub	QWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR tv3493[ebp]
	fsub	QWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR tv3484[ebp]
	fmul	ST(0), ST(6)
	fst	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv3486[ebp]
	fld	QWORD PTR [ecx+8]
	fsub	QWORD PTR [eax+16]
	fst	QWORD PTR tv3018[ebp]
	fstp	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv3488[ebp]
	fld	ST(5)
	fmulp	ST(6), ST(0)
	fxch	ST(5)
	fadd	QWORD PTR _LL2$[ebp]
	fld	ST(3)
	fmulp	ST(4), ST(0)
	faddp	ST(3), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(2), ST(0)
	fld	QWORD PTR tv3018[ebp]
	fmul	ST(0), ST(0)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _LL2$[ebp]
	fld	QWORD PTR [eax+16]
	fadd	QWORD PTR [ecx+8]
	fsub	QWORD PTR [edx+edi]
	fsub	QWORD PTR [edi]
	fmul	ST(0), ST(5)
	fst	QWORD PTR [ebx+eax]
	fld	ST(3)
	fmulp	ST(4), ST(0)
	fxch	ST(3)
	fadd	QWORD PTR _dd$[ebp]
	fld	ST(2)
	fmulp	ST(3), ST(0)
	faddp	ST(2), ST(0)
	fld	ST(3)
	fmulp	ST(4), ST(0)
	fxch	ST(1)
	faddp	ST(3), ST(0)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fst	QWORD PTR _dd$[ebp]
	mov	ebx, DWORD PTR _web+616
	add	ebx, -3					; fffffffdH
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	add	edi, 32					; 00000020H
	cmp	esi, ebx
	jl	$LN86@edge_edge_@2
	mov	ebx, DWORD PTR _yy1$[ebp]
	fxch	ST(1)
	mov	edx, DWORD PTR _y2$[ebp]
	mov	edi, DWORD PTR tv1223[ebp]
$LC56@edge_edge_@2:

; 108  :       for ( j = 0 ; j < SDIM ; j++ )

	cmp	esi, DWORD PTR _web+616
	jge	$LN90@edge_edge_@2
	mov	ecx, edx
	lea	eax, DWORD PTR [edx+esi*8]
	sub	ebx, edx
	mov	edx, DWORD PTR _x1$[ebp]
	neg	ecx
	add	edx, ecx
	mov	DWORD PTR tv3491[ebp], edx
	mov	edx, DWORD PTR _x2$[ebp]
	add	edx, ecx
	mov	DWORD PTR tv3493[ebp], edx
	mov	edx, DWORD PTR _web+616
	lea	edi, DWORD PTR _dx2$[ebp+ecx]
	lea	ecx, DWORD PTR _r$[ebp+ecx]
	sub	edx, esi
$LC6@edge_edge_@2:

; 109  :       {
; 110  :             dx2[j] = y2[j] - yy1[j];

	fld	QWORD PTR [eax]

; 111  :             LL2 += dx2[j]*dx2[j];
; 112  :             r[j] = (yy1[j] + y2[j] - x1[j] - x2[j])/2;

	mov	esi, DWORD PTR tv3491[ebp]
	fsub	QWORD PTR [ebx+eax]
	add	eax, 8
	dec	edx
	fst	QWORD PTR [edi+eax-8]
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax-8]
	fadd	QWORD PTR [ebx+eax-8]
	fsub	QWORD PTR [esi+eax-8]
	mov	esi, DWORD PTR tv3493[ebp]
	fsub	QWORD PTR [esi+eax-8]
	fmul	ST(0), ST(3)
	fst	QWORD PTR [ecx+eax-8]

; 113  :             dd += r[j]*r[j];

	fmul	ST(0), ST(0)
	faddp	ST(2), ST(0)
	jne	SHORT $LC6@edge_edge_@2

; 108  :       for ( j = 0 ; j < SDIM ; j++ )

	mov	edi, DWORD PTR tv1223[ebp]
	fstp	ST(2)

; 113  :             dd += r[j]*r[j];

	fstp	QWORD PTR _dd$[ebp]
	jmp	SHORT $LN55@edge_edge_@2
$LN90@edge_edge_@2:

; 108  :       for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(2)
	fstp	ST(0)
$LN55@edge_edge_@2:

; 114  :       }
; 115  :       L2 = sqrt(LL2);

	call	__CIsqrt

; 116  :       en1 = L1*L2/dd;

	fld	ST(0)
	fld	QWORD PTR _L1$[ebp]

; 117  :       energy += en1;
; 118  :       for ( j = 0 ; j < SDIM ; j++ ) 

	xor	eax, eax
	fmul	ST(1), ST(0)
	fld	QWORD PTR _dd$[ebp]
	fdiv	ST(2), ST(0)
	fld	ST(2)
	fadd	QWORD PTR _energy$[ebp]
	fstp	QWORD PTR _energy$[ebp]
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN96@edge_edge_@2
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(3), ST(0)
	fxch	ST(3)
	fdiv	ST(0), ST(1)
	fxch	ST(4)
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fdivrp	ST(1), ST(0)
	fdivrp	ST(1), ST(0)
$LN3@edge_edge_@2:

; 119  :       {
; 120  :          register REAL common = 2*en1/dd*r[j];

	fld	QWORD PTR _r$[ebp+eax*8]

; 121  :          register REAL oppose = 2*L2/L1/dd*dx1[j];
; 122  :          e_info->grad[0][j] += common - oppose;

	mov	edx, DWORD PTR _e_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [edx+1336]
	fmul	ST(0), ST(2)
	fld	QWORD PTR _dx1$[ebp+eax*8]
	mov	ecx, DWORD PTR [ecx]
	fmul	ST(0), ST(2)
	lea	ecx, DWORD PTR [ecx+eax*8]
	fld	ST(1)
	fsub	ST(0), ST(1)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+1336]
	mov	ecx, DWORD PTR [edx+4]

; 123  :          e_info->grad[1][j] += common + oppose;

	faddp	ST(1), ST(0)
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN3@edge_edge_@2

; 117  :       energy += en1;
; 118  :       for ( j = 0 ; j < SDIM ; j++ ) 

	fstp	ST(1)
	jmp	SHORT $LN103@edge_edge_@2
$LN96@edge_edge_@2:
	fstp	ST(0)
	fstp	ST(2)
	fstp	ST(0)
$LN103@edge_edge_@2:
	fstp	ST(0)
	fld	QWORD PTR __real@3fe0000000000000
$LN11@edge_edge_@2:

; 103  :   FOR_ALL_EDGES(e2)

	mov	edx, DWORD PTR _web+124
	mov	eax, DWORD PTR [edi+edx]
	mov	ecx, DWORD PTR [eax]
	test	ecx, 268435456				; 10000000H
	jne	$LN12@edge_edge_@2
	fstp	ST(0)
$LN58@edge_edge_@2:

; 124  :       }
; 125  :     }
; 126  : 
; 127  :   return energy;  /* since doing all pairs */
; 128  : } // end edge_edge_knot_energy_gradient()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _energy$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_edge_edge_knot_energy_gradient ENDP
_TEXT	ENDS
PUBLIC	_edge_normalization
EXTRN	_localbase:DWORD
EXTRN	_exponent_param:DWORD
EXTRN	_get_edge_length:PROC
EXTRN	__CIpow:PROC
; Function compile flags: /Ogtp
;	COMDAT _edge_normalization
_TEXT	SEGMENT
tv281 = -56						; size = 8
_power$ = -48						; size = 8
tv358 = -40						; size = 8
_ti$ = -32						; size = 8
_energy$ = -24						; size = 8
_comp_len$ = -16					; size = 8
_dist$ = -8						; size = 8
_e_info$ = 8						; size = 4
_edge_normalization PROC				; COMDAT

; 140  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H

; 141  :   edge_id e_id;
; 142  :   REAL ti,tj;
; 143  :   REAL dist=0., energy=0., comp_len;

	fldz
	push	esi
	push	edi
	fst	QWORD PTR _dist$[ebp]

; 144  :   REAL power;
; 145  : 
; 146  :   e_id = e_info->id;

	mov	edi, DWORD PTR _e_info$[ebp]
	fstp	QWORD PTR _energy$[ebp]
	mov	esi, DWORD PTR [edi]

; 147  :   comp_len = tj = ti = get_edge_length(e_id);

	push	esi
	call	_get_edge_length
	fst	QWORD PTR _ti$[ebp]

; 148  : 
; 149  :   power = globals(exponent_param)->value.real;

	mov	eax, DWORD PTR _exponent_param
	fst	QWORD PTR _comp_len$[ebp]
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	add	esp, 4
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN9@edge_norma
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN11@edge_norma
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN10@edge_norma
$LN11@edge_norma:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN9@edge_norma
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN10@edge_norma
$LN9@edge_norma:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN10@edge_norma:
	fld	QWORD PTR [eax+64]

; 150  :   for ( do_nextedge(e_id); e_id != e_info->id ; do_nextedge(e_id) )

	mov	eax, DWORD PTR _web+124
	mov	ecx, esi
	fstp	QWORD PTR _power$[ebp]
	shr	ecx, 27					; 0000001bH
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+esi*4]
	not	ecx
	and	ecx, 1
	mov	esi, DWORD PTR [edx+ecx*4+32]
	cmp	esi, DWORD PTR [edi]
	je	SHORT $LN4@edge_norma
	fstp	ST(0)
$LN6@edge_norma:

; 151  :         comp_len += get_edge_length(e_id);

	push	esi
	call	_get_edge_length
	fadd	QWORD PTR _comp_len$[ebp]
	mov	eax, DWORD PTR _web+124
	mov	ecx, esi
	shr	ecx, 27					; 0000001bH
	fstp	QWORD PTR _comp_len$[ebp]
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+esi*4]
	not	ecx
	and	ecx, 1
	mov	esi, DWORD PTR [edx+ecx*4+32]
	add	esp, 4
	cmp	esi, DWORD PTR [edi]
	jne	SHORT $LN6@edge_norma

; 150  :   for ( do_nextedge(e_id); e_id != e_info->id ; do_nextedge(e_id) )

	fld	QWORD PTR _ti$[ebp]
$LN4@edge_norma:

; 152  :   for ( do_nextedge(e_id); e_id != e_info->id ; do_nextedge(e_id) )

	mov	ecx, esi
	shr	ecx, 27					; 0000001bH
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+esi*4]
	not	ecx
	and	ecx, 1
	mov	esi, DWORD PTR [edx+ecx*4+32]
	cmp	esi, DWORD PTR [edi]
	je	$LN38@edge_norma
	fmul	QWORD PTR __real@3fe0000000000000
	jmp	SHORT $LN3@edge_norma
$LL46@edge_norma:
	fstp	ST(0)
	fld	QWORD PTR tv358[ebp]
$LN3@edge_norma:

; 153  :      {
; 154  :         REAL shortdist;
; 155  :         dist += tj/2;

	fadd	QWORD PTR _dist$[ebp]

; 156  :         tj = get_edge_length(e_id);

	push	esi
	fstp	QWORD PTR _dist$[ebp]
	call	_get_edge_length

; 157  :         dist += tj/2;

	fld	QWORD PTR __real@3fe0000000000000
	add	esp, 4
	fmul	ST(0), ST(1)
	fst	QWORD PTR tv358[ebp]
	fadd	QWORD PTR _dist$[ebp]
	fst	QWORD PTR _dist$[ebp]

; 158  :         shortdist = (2*dist<comp_len? dist : comp_len-dist);

	fld	ST(0)
	fadd	ST(0), ST(1)
	fld	QWORD PTR _comp_len$[ebp]
	fcom	ST(1)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 65					; 00000041H
	jne	SHORT $LN15@edge_norma
	fstp	ST(0)
	jmp	SHORT $LN16@edge_norma
$LN15@edge_norma:
	fsubrp	ST(1), ST(0)
$LN16@edge_norma:

; 159  :         energy += ti*tj/pow(shortdist,power);

	fld	QWORD PTR _ti$[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv281[ebp]
	fld	QWORD PTR _power$[ebp]
	call	__CIpow
	fdivr	QWORD PTR tv281[ebp]
	mov	ecx, DWORD PTR _web+124
	mov	eax, esi
	shr	eax, 27					; 0000001bH
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+esi*4]
	not	eax
	and	eax, 1
	mov	esi, DWORD PTR [edx+eax*4+32]
	fadd	QWORD PTR _energy$[ebp]
	fst	QWORD PTR _energy$[ebp]
	cmp	esi, DWORD PTR [edi]
	jne	SHORT $LL46@edge_norma
	pop	edi
	pop	esi

; 162  : } // end edge_normalization()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN38@edge_norma:
	pop	edi

; 152  :   for ( do_nextedge(e_id); e_id != e_info->id ; do_nextedge(e_id) )

	fstp	ST(0)

; 160  :      }
; 161  :   return energy;

	fld	QWORD PTR _energy$[ebp]
	pop	esi

; 162  : } // end edge_normalization()

	mov	esp, ebp
	pop	ebp
	ret	0
_edge_normalization ENDP
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	__$ArrayPad$
PUBLIC	_edge_min_knot_energy
;	COMDAT __real@3ff0000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\knot3.c
CONST	ENDS
;	COMDAT _edge_min_knot_energy
_TEXT	SEGMENT
_dv$ = -296						; size = 8
_dw$ = -288						; size = 8
tv3457 = -280						; size = 8
tv3390 = -272						; size = 8
tv3165 = -264						; size = 4
tv3926 = -260						; size = 8
tv3204 = -252						; size = 4
tv3192 = -248						; size = 4
tv3468 = -244						; size = 8
_vwvw$ = -244						; size = 8
tv3196 = -236						; size = 4
tv3200 = -232						; size = 4
tv3180 = -228						; size = 4
tv3188 = -224						; size = 4
tv1693 = -220						; size = 4
_energy$ = -216						; size = 8
tv1862 = -208						; size = 8
_ww$ = -208						; size = 8
_x1$ = -200						; size = 4
_dd$ = -196						; size = 8
_e1$ = -188						; size = 4
tv3218 = -184						; size = 4
tv2386 = -184						; size = 4
tv3208 = -180						; size = 4
tv2407 = -180						; size = 4
tv3213 = -176						; size = 4
tv2403 = -176						; size = 4
tv1701 = -172						; size = 4
_y2$ = -172						; size = 4
_vv$ = -168						; size = 8
_mind$ = -160						; size = 8
_vw$ = -160						; size = 8
tv3160 = -152						; size = 4
tv2411 = -152						; size = 4
$T90212 = -152						; size = 4
$T90206 = -152						; size = 4
_d$ = -148						; size = 48
_w$ = -100						; size = 48
_v$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_edge_min_knot_energy PROC				; COMDAT

; 193  : { edge_id e1 = e_info->id,e2;

	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _e_info$[ebp]

; 194  :   REAL *x1,*x2,*yy1,*y2; /* end coordinates */
; 195  :   REAL energy = 0.0;

	fldz
	mov	eax, DWORD PTR [eax]
	fstp	QWORD PTR _energy$[ebp]

; 196  :   REAL v[MAXCOORD], w[MAXCOORD], d[MAXCOORD];
; 197  :   REAL vv,ww,vw,dv,dw,dd, mind;
; 198  :   REAL vwvw, s,t;
; 199  :   int j;
; 200  : 
; 201  :   x1 = get_coord(get_edge_tailv(e1));

	mov	ecx, DWORD PTR _web+124
	push	ebx
	push	esi
	mov	esi, eax
	mov	DWORD PTR _e1$[ebp], eax
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR _web+216
	mov	eax, DWORD PTR [eax+ecx+304]
	shr	esi, 27					; 0000001bH
	add	edx, eax
	and	esi, 1
	push	edi
	je	SHORT $LN111@edge_min_k
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN110@edge_min_k
$LN111@edge_min_k:
	mov	eax, DWORD PTR [edx]
$LN110@edge_min_k:
	mov	edi, DWORD PTR _web+104
	mov	ecx, DWORD PTR [edi+ecx+64]
	mov	edi, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [edi+eax*4]
	add	ebx, ecx
	mov	DWORD PTR _x1$[ebp], ebx

; 202  :   x2 = get_coord(get_edge_headv(e1));

	test	esi, esi
	je	SHORT $LN115@edge_min_k
	mov	eax, DWORD PTR [edx]
	jmp	SHORT $LN114@edge_min_k
$LN115@edge_min_k:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
$LN114@edge_min_k:
	and	eax, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edi+eax*4]
	add	edi, ecx

; 203  :   for ( j = 0 ; j < SDIM ; j++ ) v[j] = x2[j] - x1[j];

	mov	ecx, DWORD PTR _web+616
	xor	edx, edx
	cmp	ecx, 4
	jl	$LN154@edge_min_k
	mov	esi, edi
	sub	esi, ebx
	mov	DWORD PTR tv2386[ebp], esi
	lea	esi, DWORD PTR _v$[ebp]
	sub	esi, ebx
	mov	DWORD PTR tv2403[ebp], esi
	lea	esi, DWORD PTR _v$[ebp+8]
	sub	esi, ebx
	mov	DWORD PTR tv2407[ebp], esi
	lea	esi, DWORD PTR _v$[ebp+16]
	sub	esi, ebx
	lea	ecx, DWORD PTR [edi+24]
	lea	eax, DWORD PTR [ebx+8]
	mov	DWORD PTR tv2411[ebp], esi
	npad	3
$LL142@edge_min_k:
	fld	QWORD PTR [ecx-24]
	mov	esi, DWORD PTR tv2386[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _v$[ebp+edx*8-32]
	fld	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv2403[ebp]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv2407[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv2411[ebp]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR _web+616
	add	esi, -3					; fffffffdH
	cmp	edx, esi
	jl	SHORT $LL142@edge_min_k
	mov	ecx, DWORD PTR _web+616
$LN154@edge_min_k:
	cmp	edx, ecx
	jge	SHORT $LN140@edge_min_k
	lea	esi, DWORD PTR _v$[ebp]
	sub	edi, ebx
	sub	esi, ebx
	lea	eax, DWORD PTR [ebx+edx*8]
	sub	ecx, edx
	npad	3
$LC51@edge_min_k:
	fld	QWORD PTR [eax+edi]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax+esi-8]
	jne	SHORT $LC51@edge_min_k
	mov	ecx, DWORD PTR _web+616
$LN140@edge_min_k:

; 204  :   vv = SDIM_dot(v,v);

	push	ecx
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	fstp	QWORD PTR _vv$[ebp]

; 205  :   FOR_ALL_EDGES(e2)

	mov	ecx, DWORD PTR _web+160
	add	esp, 12					; 0000000cH
	test	ecx, 268435456				; 10000000H
	je	$LN146@edge_min_k
	npad	2
$LL48@edge_min_k:
	mov	edx, DWORD PTR _web+124
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [esi+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	mov	DWORD PTR tv1693[ebp], esi
	je	$LN47@edge_min_k

; 206  :     { if ( e2 == e1 ) continue; /* skip self */

	cmp	ecx, DWORD PTR _e1$[ebp]
	je	$LN47@edge_min_k

; 207  :       if (get_edge_tailv(e2) == get_edge_headv(e1)
; 208  :         || get_edge_tailv(e1) == get_edge_headv(e2)) continue; /* skip nhbrs */

	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR tv1701[ebp], ecx
	je	SHORT $LN119@edge_min_k
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	edi, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	add	edi, esi
	mov	ecx, DWORD PTR [edi+eax*4]
	mov	DWORD PTR $T90206[ebp], ecx
	jmp	SHORT $LN118@edge_min_k
$LN119@edge_min_k:
	mov	edx, DWORD PTR _web+216
	mov	eax, DWORD PTR _dymem
	mov	edi, DWORD PTR [edx+eax+304]
	mov	edx, DWORD PTR [edi+esi]
	add	edi, esi
	mov	DWORD PTR $T90206[ebp], edx
$LN118@edge_min_k:
	mov	eax, DWORD PTR _e1$[ebp]
	push	eax
	call	_get_edge_headv
	add	esp, 4
	cmp	DWORD PTR $T90206[ebp], eax
	je	$LN47@edge_min_k
	cmp	DWORD PTR tv1701[ebp], 0
	je	SHORT $LN123@edge_min_k
	mov	ecx, DWORD PTR [edi]
	mov	DWORD PTR $T90212[ebp], ecx
	jmp	SHORT $LN122@edge_min_k
$LN123@edge_min_k:
	mov	edx, DWORD PTR _web+636
	mov	eax, DWORD PTR [edi+edx*4]
	mov	DWORD PTR $T90212[ebp], eax
$LN122@edge_min_k:
	mov	ecx, DWORD PTR _e1$[ebp]
	push	ecx
	call	_get_edge_tailv
	add	esp, 4
	cmp	eax, DWORD PTR $T90212[ebp]
	je	$LN47@edge_min_k

; 209  :       yy1 = get_coord(get_edge_tailv(e2));

	cmp	DWORD PTR tv1701[ebp], 0
	je	SHORT $LN127@edge_min_k
	mov	edx, DWORD PTR _web+636
	mov	eax, DWORD PTR [edi+edx*4]
	jmp	SHORT $LN126@edge_min_k
$LN127@edge_min_k:
	mov	eax, DWORD PTR [edi]
$LN126@edge_min_k:
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+104
	mov	ecx, DWORD PTR [ecx+edx+64]
	mov	edx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+eax*4]
	add	esi, ecx

; 210  :       y2 = get_coord(get_edge_headv(e2));

	cmp	DWORD PTR tv1701[ebp], 0
	je	SHORT $LN131@edge_min_k
	mov	eax, DWORD PTR [edi]
	jmp	SHORT $LN130@edge_min_k
$LN131@edge_min_k:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edi+eax*4]
$LN130@edge_min_k:

; 211  :       ww = vw = dv = dw = dd = 0.0;

	fldz
	mov	edx, DWORD PTR _web+12
	fld	ST(0)
	and	eax, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edx+eax*4]
	fst	QWORD PTR _dd$[ebp]
	fld	ST(1)
	add	edi, ecx
	fst	QWORD PTR _dw$[ebp]

; 212  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	cmp	DWORD PTR _web+616, 4
	fld	ST(2)
	fst	QWORD PTR _dv$[ebp]
	mov	DWORD PTR _y2$[ebp], edi
	fld	ST(3)
	fst	QWORD PTR _vw$[ebp]
	fld	ST(4)
	jl	$LN153@edge_min_k

; 217  :             dv += d[j]*v[j]; dw += d[j]*w[j]; dd += d[j]*d[j];

	lea	edx, DWORD PTR [ebx+16]
	fstp	ST(4)
	sub	ebx, esi
	fstp	ST(2)
	mov	DWORD PTR tv3165[ebp], ebx
	fstp	ST(1)
	lea	ebx, DWORD PTR _w$[ebp]
	fstp	ST(0)
	sub	ebx, esi
	mov	DWORD PTR tv3180[ebp], ebx
	lea	ebx, DWORD PTR _d$[ebp]
	sub	ebx, esi
	mov	DWORD PTR tv3188[ebp], ebx
	lea	ebx, DWORD PTR _w$[ebp+8]
	sub	ebx, esi
	mov	DWORD PTR tv3192[ebp], ebx
	lea	ebx, DWORD PTR _d$[ebp+8]
	sub	ebx, esi
	mov	DWORD PTR tv3196[ebp], ebx
	lea	ebx, DWORD PTR _w$[ebp+16]
	sub	ebx, esi
	mov	DWORD PTR tv3200[ebp], ebx
	lea	ebx, DWORD PTR _d$[ebp+16]
	sub	ebx, esi
	mov	DWORD PTR tv3204[ebp], ebx
	lea	ebx, DWORD PTR _v$[ebp]
	sub	ebx, esi
	mov	DWORD PTR tv3208[ebp], ebx
	lea	ebx, DWORD PTR _v$[ebp+8]
	sub	ebx, esi
	mov	DWORD PTR tv3213[ebp], ebx
	lea	ebx, DWORD PTR _v$[ebp+16]
	sub	ebx, esi
	mov	DWORD PTR tv3218[ebp], ebx
	mov	ebx, edi
	sub	ebx, DWORD PTR _x1$[ebp]
	lea	eax, DWORD PTR [esi+8]
	mov	DWORD PTR tv3160[ebp], ebx
	jmp	SHORT $LN145@edge_min_k
	npad	1
$LL161@edge_min_k:
	mov	ebx, DWORD PTR tv3160[ebp]
	fstp	ST(0)
	fstp	ST(1)
	fstp	ST(0)
	fld	QWORD PTR _ww$[ebp]
$LN145@edge_min_k:

; 213  :       {
; 214  :             w[j] = y2[j] - yy1[j];

	fld	QWORD PTR [edi+ecx*8]
	mov	edi, DWORD PTR tv3165[ebp]
	fsub	QWORD PTR [eax-8]
	add	edi, eax
	fst	QWORD PTR _w$[ebp+ecx*8]

; 215  :             d[j] = x1[j] - yy1[j];

	fld	QWORD PTR [edx-16]
	fsub	QWORD PTR [eax-8]
	fst	QWORD PTR _d$[ebp+ecx*8]
	fld	QWORD PTR [edi+ebx]
	mov	ebx, DWORD PTR tv3180[ebp]
	fsub	QWORD PTR [eax]
	fst	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv3200[ebp]
	fld	QWORD PTR [edi]
	mov	edi, DWORD PTR tv3188[ebp]
	fsub	QWORD PTR [eax]
	fst	QWORD PTR [eax+edi]
	mov	edi, DWORD PTR tv3160[ebp]
	fld	QWORD PTR [edx+edi]
	mov	edi, DWORD PTR tv3192[ebp]
	fsub	QWORD PTR [eax+8]
	fst	QWORD PTR tv3390[ebp]
	fst	QWORD PTR [eax+edi]
	mov	edi, DWORD PTR tv3196[ebp]
	fld	QWORD PTR [edx]
	fsub	QWORD PTR [eax+8]
	fst	QWORD PTR tv3457[ebp]
	fstp	QWORD PTR [eax+edi]
	mov	edi, DWORD PTR _y2$[ebp]
	fld	QWORD PTR [edi+ecx*8+24]
	fsub	QWORD PTR [eax+16]
	fst	QWORD PTR tv3926[ebp]
	fstp	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv3204[ebp]
	fld	QWORD PTR [edx+8]
	fsub	QWORD PTR [eax+16]
	fst	QWORD PTR tv3468[ebp]
	fstp	QWORD PTR [eax+ebx]

; 216  :             ww += w[j]*w[j]; vw += v[j]*w[j];

	mov	ebx, DWORD PTR tv3208[ebp]
	fld	ST(4)
	fmul	ST(0), ST(5)
	faddp	ST(6), ST(0)
	fld	ST(2)
	fmul	ST(0), ST(3)
	faddp	ST(6), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(5), ST(0)
	fld	QWORD PTR tv3926[ebp]
	fmul	ST(0), ST(0)
	faddp	ST(5), ST(0)
	fxch	ST(4)
	fstp	QWORD PTR _ww$[ebp]
	fld	ST(2)
	fmul	QWORD PTR _v$[ebp+ecx*8]
	fadd	QWORD PTR _vw$[ebp]
	fld	ST(1)
	fmul	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv3213[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv3218[ebp]
	fmul	QWORD PTR tv3390[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv3926[ebp]
	fmul	QWORD PTR [eax+ebx]

; 217  :             dv += d[j]*v[j]; dw += d[j]*w[j]; dd += d[j]*d[j];

	mov	ebx, DWORD PTR tv3208[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _vw$[ebp]
	fld	QWORD PTR _v$[ebp+ecx*8]
	fmul	ST(0), ST(2)
	fadd	QWORD PTR _dv$[ebp]
	fld	ST(4)
	fmul	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv3213[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv3218[ebp]
	fmul	QWORD PTR tv3457[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax+ebx]
	fld	QWORD PTR tv3468[ebp]
	fmul	ST(1), ST(0)
	mov	ebx, DWORD PTR _web+616
	fxch	ST(2)
	add	ecx, 4
	add	ebx, -3					; fffffffdH
	faddp	ST(1), ST(0)
	add	eax, 32					; 00000020H
	add	edx, 32					; 00000020H
	fst	QWORD PTR _dv$[ebp]
	fxch	ST(4)
	fmul	ST(0), ST(3)
	fadd	QWORD PTR _dw$[ebp]
	fld	ST(5)
	fmulp	ST(3), ST(0)
	faddp	ST(2), ST(0)
	fld	QWORD PTR tv3457[ebp]
	fld	QWORD PTR tv3390[ebp]
	fmul	ST(0), ST(1)
	faddp	ST(3), ST(0)
	fld	QWORD PTR tv3926[ebp]
	fmul	ST(0), ST(2)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fst	QWORD PTR _dw$[ebp]
	fld	ST(3)
	fmulp	ST(4), ST(0)
	fxch	ST(3)
	fadd	QWORD PTR _dd$[ebp]
	fld	ST(5)
	fmulp	ST(6), ST(0)
	faddp	ST(5), ST(0)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fxch	ST(4)
	faddp	ST(1), ST(0)
	fld	ST(3)
	fmulp	ST(4), ST(0)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fst	QWORD PTR _dd$[ebp]
	cmp	ecx, ebx
	jl	$LL161@edge_min_k
	fld	QWORD PTR _vw$[ebp]
	mov	ebx, DWORD PTR _x1$[ebp]
	fld	QWORD PTR _ww$[ebp]
	fxch	ST(2)
	fxch	ST(4)
	fxch	ST(3)
	fxch	ST(2)
$LN153@edge_min_k:

; 212  :       for ( j = 0 ; j < SDIM ; j++ )

	cmp	ecx, DWORD PTR _web+616
	jge	SHORT $LN143@edge_min_k
	lea	eax, DWORD PTR _w$[ebp]

; 216  :             ww += w[j]*w[j]; vw += v[j]*w[j];

	fstp	ST(4)
	mov	edx, ebx
	sub	edi, eax
	sub	edx, eax
	sub	esi, eax
	jmp	SHORT $LC40@edge_min_k
$LN168@edge_min_k:

; 212  :       for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(0)
$LC40@edge_min_k:
	lea	eax, DWORD PTR _w$[ebp+ecx*8]

; 213  :       {
; 214  :             w[j] = y2[j] - yy1[j];

	fld	QWORD PTR [eax+edi]
	inc	ecx
	fsub	QWORD PTR [eax+esi]
	fld	ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax]

; 215  :             d[j] = x1[j] - yy1[j];

	fld	QWORD PTR [eax+edx]
	fsub	QWORD PTR [eax+esi]
	fst	QWORD PTR _d$[ebp+ecx*8-8]

; 216  :             ww += w[j]*w[j]; vw += v[j]*w[j];

	fld	ST(1)
	fmul	ST(0), ST(2)
	faddp	ST(6), ST(0)
	fld	ST(1)
	fmul	QWORD PTR _v$[ebp+ecx*8-8]
	faddp	ST(3), ST(0)

; 217  :             dv += d[j]*v[j]; dw += d[j]*w[j]; dd += d[j]*d[j];

	fld	ST(0)
	fmul	QWORD PTR _v$[ebp+ecx*8-8]
	faddp	ST(4), ST(0)
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	faddp	ST(4), ST(0)
	fmul	ST(0), ST(0)
	fadd	QWORD PTR _dd$[ebp]
	fst	QWORD PTR _dd$[ebp]
	cmp	ecx, DWORD PTR _web+616
	jl	SHORT $LN168@edge_min_k

; 216  :             ww += w[j]*w[j]; vw += v[j]*w[j];

	fxch	ST(1)
	fst	QWORD PTR _vw$[ebp]
	fxch	ST(1)
	fxch	ST(4)
$LN143@edge_min_k:

; 218  :       }
; 219  :       vwvw = vv*ww-vw*vw;

	fld	QWORD PTR _vv$[ebp]
	fmul	ST(0), ST(1)
	fst	QWORD PTR tv1862[ebp]
	fld	ST(2)
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _vwvw$[ebp]

; 220  :       if (vwvw > 0.)

	fcom	ST(6)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN172@edge_min_k
	fstp	ST(5)

; 221  :       {
; 222  :             s = (vw*dw-ww*dv)/vwvw; t = (-vw*dv+vv*dw)/vwvw;

	fld	ST(3)
	fmul	ST(0), ST(2)
	fld	ST(3)
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fdivrp	ST(5), ST(0)
	fld	ST(3)
	fmul	QWORD PTR _vv$[ebp]
	fld	ST(3)
	fmulp	ST(3), ST(0)
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	QWORD PTR _vwvw$[ebp]

; 223  :             if (s>=0. && s<=1.)

	fxch	ST(4)
	fcom	ST(5)
	fnstsw	ax
	fld1
	test	ah, 1
	jne	SHORT $LN36@edge_min_k
	fcom	ST(1)
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN36@edge_min_k

; 224  :             {
; 225  :                 if (t<0.)    { t = 0.; s = -dv/vv; clip(s); }

	fxch	ST(5)
	fcom	ST(6)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN35@edge_min_k
	fstp	ST(0)
$LN233@edge_min_k:
	fstp	ST(0)
	fld	ST(4)
	fld	ST(2)
	fdiv	QWORD PTR _vv$[ebp]
	fchs
	jmp	SHORT $LN350@edge_min_k
$LN35@edge_min_k:

; 226  :                 else if (t>1.)        { t = 1.; s = (vw-dv)/vv; clip(s); }

	fcom	ST(5)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN192@edge_min_k
	fstp	ST(0)
$LN253@edge_min_k:
	fstp	ST(0)
	fld	ST(3)
	fld	QWORD PTR _vw$[ebp]
	fsub	ST(0), ST(3)
	fdiv	QWORD PTR _vv$[ebp]
$LN350@edge_min_k:
	fcom	ST(6)
	fnstsw	ax
	test	ah, 5
	jp	$LN306@edge_min_k
	fstp	ST(0)
	fstp	ST(4)
	jmp	SHORT $LN98@edge_min_k
$LN36@edge_min_k:

; 227  :             }
; 228  :             else if (t>=0. && t<=1.)

	fxch	ST(5)
	fcom	ST(6)
	fnstsw	ax
	test	ah, 1
	jne	$LN31@edge_min_k
	fcom	ST(5)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	$LN31@edge_min_k

; 229  :             {
; 230  :                 if (s<0.)    { s = 0.; t = dw/ww; clip(t); }

	fxch	ST(1)
	fcom	ST(6)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN30@edge_min_k
	fstp	ST(1)
	fstp	ST(0)
	fld	ST(4)
	fld	ST(3)
$LN352@edge_min_k:
	fdiv	ST(0), ST(2)
$LN353@edge_min_k:
	fcom	ST(6)
	fnstsw	ax
	test	ah, 5
	jp	$LN299@edge_min_k
	fstp	ST(0)
$LN309@edge_min_k:

; 255  :                 else                     { t = 1.; s =(vw-dv)/vv; clip(s); }

	fstp	ST(4)
$LN311@edge_min_k:
	fxch	ST(3)
	fxch	ST(4)
	fxch	ST(3)
$LN98@edge_min_k:

; 256  :             }
; 257  : 
; 258  :             mind = dd+2*s*dv-2*t*dw+s*s*vv+t*t*ww-2*s*t*vw;

	fld	ST(4)
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fld	ST(1)
	fmulp	ST(4), ST(0)
	fxch	ST(3)
	fadd	QWORD PTR _dd$[ebp]
	fld	ST(5)
	fmulp	ST(4), ST(0)
	fxch	ST(3)
	fmulp	ST(4), ST(0)
	fxch	ST(2)
	fsubrp	ST(3), ST(0)
	fld	ST(4)
	fmulp	ST(5), ST(0)
	fxch	ST(4)
	fmul	QWORD PTR _vv$[ebp]
	faddp	ST(2), ST(0)
	fld	ST(2)
	fmul	ST(0), ST(3)
	fmulp	ST(4), ST(0)
	fxch	ST(1)
	faddp	ST(3), ST(0)
	fmulp	ST(1), ST(0)
	fmul	QWORD PTR _vw$[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _mind$[ebp]

; 259  :       }
; 260  :       else /* v,w are parallel */

	jmp	$ok$89252
$LN30@edge_min_k:

; 231  :                 else if (s>1.)        { s = 1.; t = (vw+dw)/ww; clip(t); }

	fcom	ST(5)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN217@edge_min_k
	fstp	ST(1)
	fstp	ST(0)
	fld	ST(3)
	fld	ST(3)
	fadd	QWORD PTR _vw$[ebp]
	jmp	$LN352@edge_min_k
$LN31@edge_min_k:

; 232  :             }
; 233  :             else if (s<0. && t<0.)

	fxch	ST(1)
	fcom	ST(6)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN22@edge_min_k
	fxch	ST(1)
	fcom	ST(6)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN26@edge_min_k
	fstp	ST(0)
	fstp	ST(0)

; 234  :             {
; 235  :                 /* s=0 and t=dw/ww clipped; or t=0 and s=-dv/vv clipped */
; 236  :                 if (dw/ww > 0.)      { s = 0.; t = dw/ww; clip(t); }

	fld	ST(2)
	fdiv	ST(0), ST(1)
	fcom	ST(5)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN233@edge_min_k
	fld	ST(5)
	fxch	ST(1)
	jmp	$LN353@edge_min_k
$LN26@edge_min_k:

; 237  :                 else                     { t = 0.; s =-dv/vv; clip(s); }
; 238  :             }
; 239  :             else if (s<0. && t>1.)

	fcom	ST(5)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN250@edge_min_k
	fstp	ST(0)
	fstp	ST(0)

; 240  :             {
; 241  :                 /* s=0 and t=dw/ww clipped; or t=1 and s=(vw-dv)/vv clipped */
; 242  :                 if (dw/ww < 1.)      { s = 0.; t = dw/ww; clip(t); }

	fld	ST(2)
	fdiv	ST(0), ST(1)
	fcom	ST(4)
	fnstsw	ax
	test	ah, 5
	jp	$LN253@edge_min_k
	fld	ST(5)
	fxch	ST(1)
	jmp	$LN353@edge_min_k
$LN250@edge_min_k:

; 237  :                 else                     { t = 0.; s =-dv/vv; clip(s); }
; 238  :             }
; 239  :             else if (s<0. && t>1.)

	fxch	ST(1)
$LN22@edge_min_k:

; 243  :                 else                     { t = 1.; s =(vw-dv)/vv; clip(s); }
; 244  :             }
; 245  :             else if (s>1. && t<0.)

	fcom	ST(5)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN217@edge_min_k
	fxch	ST(1)
	fcom	ST(6)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN18@edge_min_k
	fstp	ST(0)
	fstp	ST(0)

; 246  :             {
; 247  :                 /* s=1 and t=(vw+dw)/ww clipped; or t=0 and s=-dv/vv clipped */
; 248  :                 if ((vw+dw)/ww > 0.)          { s = 1.; t = (vw+dw)/ww; clip(t); }

	fld	ST(2)
	fadd	QWORD PTR _vw$[ebp]
	fdiv	ST(0), ST(1)
	fcom	ST(5)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN233@edge_min_k
	fld	ST(4)
	fxch	ST(1)
	jmp	$LN353@edge_min_k
$LN18@edge_min_k:

; 249  :                 else                     { t = 0.; s =-dv/vv; clip(s); }
; 250  :             }
; 251  :             else if (s>1. && t>1.)

	fcom	ST(5)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN192@edge_min_k
	fstp	ST(0)
	fstp	ST(0)

; 252  :             {
; 253  :                 /* s=0 and t=(vw+dw)/ww clipped; or t=1 and s=(vw-dv)/vv clipped */
; 254  :                 if ((vw+dw)/ww < 1.)          { s = 1.; t = (vw+dw)/ww; clip(t); }

	fld	ST(2)
	fld	QWORD PTR _vw$[ebp]
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(2)
	fcom	ST(5)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN296@edge_min_k
	fstp	ST(1)
	fld	ST(4)
	fxch	ST(1)
	jmp	$LN353@edge_min_k
$LN299@edge_min_k:
	fstp	ST(6)
	fxch	ST(5)
	fcom	ST(4)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN214@edge_min_k
	fstp	ST(0)
	jmp	$LN98@edge_min_k
$LN296@edge_min_k:
	fstp	ST(0)

; 255  :                 else                     { t = 1.; s =(vw-dv)/vv; clip(s); }

	fld	ST(4)
	fxch	ST(1)
	fsub	ST(0), ST(3)
	fdiv	QWORD PTR _vv$[ebp]
	fcom	ST(6)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN306@edge_min_k
	fstp	ST(0)
$LN214@edge_min_k:
	fstp	ST(4)
	jmp	$LN98@edge_min_k
$LN306@edge_min_k:
	fstp	ST(6)
	fxch	ST(5)
	fcom	ST(4)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN309@edge_min_k
	fstp	ST(0)
	jmp	$LN311@edge_min_k
$LN192@edge_min_k:

; 226  :                 else if (t>1.)        { t = 1.; s = (vw-dv)/vv; clip(s); }

	fstp	ST(6)
	jmp	$LN309@edge_min_k
$LN217@edge_min_k:

; 231  :                 else if (s>1.)        { s = 1.; t = (vw+dw)/ww; clip(t); }

	fstp	ST(6)

; 255  :                 else                     { t = 1.; s =(vw-dv)/vv; clip(s); }

	fstp	ST(4)
	jmp	$LN98@edge_min_k
$LN172@edge_min_k:

; 220  :       if (vwvw > 0.)

	fstp	ST(0)

; 261  :       {
; 262  :           mind = dd - dv*dv/vv; /* the dist between || lines */

	fld	ST(2)
	fmul	ST(0), ST(3)
	fdiv	QWORD PTR _vv$[ebp]
	fsubr	ST(0), ST(5)
	fstp	QWORD PTR _mind$[ebp]

; 263  :           if (vv>ww) /* w is shorter edge, look at its endpoints */

	fld	QWORD PTR _vv$[ebp]
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN313@edge_min_k

; 264  :           {
; 265  :                 s = (dv-vw)/vv; if (s>=0. && s<=1.) goto ok;

	fld	ST(3)
	fsub	ST(0), ST(3)
	fdivrp	ST(1), ST(0)
	fcom	ST(6)
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN316@edge_min_k
	fld1
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN148@edge_min_k
$LN318@edge_min_k:

; 280  :                      mind = (t<0.? dd+2*dv+vv : dd-2*dw+ww);

	fstp	ST(4)
	fstp	ST(4)
	fstp	ST(1)
	fstp	ST(2)
	fstp	ST(1)
	jmp	$LN354@edge_min_k
$LN316@edge_min_k:

; 264  :           {
; 265  :                 s = (dv-vw)/vv; if (s>=0. && s<=1.) goto ok;

	fstp	ST(0)
$LN148@edge_min_k:

; 266  :                 s = dv/vv; if (s>=0. && s<=1.) goto ok;

	fld	ST(2)
	fdiv	QWORD PTR _vv$[ebp]
	fcom	ST(6)
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN8@edge_min_k
	fld1
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 1
	je	$LN339@edge_min_k
$LN8@edge_min_k:

; 267  :                 if (vw<0.)

	fxch	ST(2)
	fcom	ST(6)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN324@edge_min_k
$LN355@edge_min_k:

; 268  :                      mind = (s<0.? dd : dd+2*dv-2*dw+vv+ww-2*vw);

	fxch	ST(2)
	fcomp	ST(6)
	fnstsw	ax
	fstp	ST(5)
	test	ah, 5
	jp	$LN106@edge_min_k
	fstp	ST(2)
	fstp	ST(1)
	fstp	ST(0)
	fstp	ST(1)
	fstp	QWORD PTR _mind$[ebp]
	jmp	$ok$89252
$LN324@edge_min_k:

; 267  :                 if (vw<0.)

	fstp	ST(0)

; 269  :                 else
; 270  :                      mind = (s<0.? dd-2*dw+ww : dd+2*dv+vv);

	fxch	ST(1)
	fcomp	ST(5)
	fnstsw	ax
	fstp	ST(4)
	test	ah, 5
	jp	SHORT $LN330@edge_min_k
$LN347@edge_min_k:
	fstp	ST(0)
	fadd	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _mind$[ebp]
	jmp	$ok$89252
$LN313@edge_min_k:

; 263  :           if (vv>ww) /* w is shorter edge, look at its endpoints */

	fstp	ST(0)

; 271  : 
; 272  :           }
; 273  :           else /* v is shorter edge, look at its endpoints */
; 274  :           {
; 275  :                 t = (-dw-vw)/ww; if (t>=0. && t<=1.) goto ok;

	fld	ST(3)
	fchs
	fsub	ST(0), ST(2)
	fdiv	ST(0), ST(1)
	fcom	ST(6)
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN333@edge_min_k
	fld1
	fcompp
	fnstsw	ax
	test	ah, 1
	je	$LN318@edge_min_k
	jmp	SHORT $LN149@edge_min_k
$LN333@edge_min_k:
	fstp	ST(0)
$LN149@edge_min_k:

; 276  :                 t = -dw/ww; if (t>=0. && t<=1.) goto ok;

	fld	ST(3)
	fdiv	ST(0), ST(1)
	fchs
	fcom	ST(6)
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@edge_min_k
	fld1
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 1
	je	SHORT $LN339@edge_min_k
$LN3@edge_min_k:

; 277  :                 if (vw<0.)

	fxch	ST(2)
	fcom	ST(6)
	fnstsw	ax
	test	ah, 5
	jnp	$LN355@edge_min_k
	fstp	ST(0)

; 280  :                      mind = (t<0.? dd+2*dv+vv : dd-2*dw+ww);

	fxch	ST(1)
	fcomp	ST(5)
	fnstsw	ax
	fstp	ST(4)
	test	ah, 5
	jp	SHORT $LN347@edge_min_k
$LN330@edge_min_k:
	fstp	ST(1)
	fstp	ST(2)
	fxch	ST(1)
	fadd	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fadd	QWORD PTR _vv$[ebp]
	fstp	QWORD PTR _mind$[ebp]
	jmp	SHORT $ok$89252
$LN106@edge_min_k:

; 278  :                      mind = (t<0.? dd : dd+2*dv-2*dw+vv+ww-2*vw);

	fld	QWORD PTR __real@4000000000000000
	fmul	ST(2), ST(0)
	fxch	ST(2)
	faddp	ST(4), ST(0)
	fxch	ST(2)
	fmul	ST(0), ST(1)
	fsubp	ST(3), ST(0)
	fxch	ST(2)
	fadd	QWORD PTR _vv$[ebp]
	faddp	ST(3), ST(0)
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _mind$[ebp]

; 279  :                 else

	jmp	SHORT $ok$89252
$LN339@edge_min_k:

; 276  :                 t = -dw/ww; if (t>=0. && t<=1.) goto ok;

	fstp	ST(5)
	fstp	ST(5)
	fstp	ST(3)
	fstp	ST(1)
	fstp	ST(1)
	fstp	ST(0)
$LN354@edge_min_k:
	fstp	ST(0)
$ok$89252:

; 281  :           }
; 282  :       }
; 283  :  ok: energy += sqrt(vv*ww)/mind;

	fld	QWORD PTR tv1862[ebp]
	call	__CIsqrt
	fdiv	QWORD PTR _mind$[ebp]
	mov	esi, DWORD PTR tv1693[ebp]
	fadd	QWORD PTR _energy$[ebp]
	fstp	QWORD PTR _energy$[ebp]
$LN47@edge_min_k:

; 205  :   FOR_ALL_EDGES(e2)

	mov	ecx, DWORD PTR [esi]
	test	ecx, 268435456				; 10000000H
	jne	$LL48@edge_min_k
$LN146@edge_min_k:

; 284  :     }
; 285  :   return energy;
; 286  : } // end edge_min_knot_energy()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _energy$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_edge_min_knot_energy ENDP
_TEXT	ENDS
PUBLIC	__real@400921fb54442d18
PUBLIC	_simon_normalization
EXTRN	__CIsin:PROC
;	COMDAT __real@400921fb54442d18
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\knot3.c
CONST	ENDS
;	COMDAT _simon_normalization
_TEXT	SEGMENT
tv306 = -32						; size = 8
_power$ = -24						; size = 8
_energy$ = -16						; size = 8
tv294 = -8						; size = 8
_comp_nedge$ = -4					; size = 4
tv321 = 8						; size = 4
_e_info$ = 8						; size = 4
_simon_normalization PROC				; COMDAT

; 297  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 298  :   edge_id e_id;
; 299  :   REAL ti;
; 300  :   REAL dist, energy=0.;
; 301  :   int comp_nedge=1;
; 302  :   int j;
; 303  :   REAL power;
; 304  : 
; 305  :   e_id = e_info->id;

	mov	eax, DWORD PTR _e_info$[ebp]
	fldz
	mov	ecx, DWORD PTR [eax]
	fstp	QWORD PTR _energy$[ebp]

; 306  : 
; 307  :   power = globals(exponent_param)->value.real;

	mov	eax, DWORD PTR _exponent_param
	mov	edx, eax
	push	ebx
	and	edx, -16777216				; ff000000H
	mov	ebx, 1
	push	esi
	mov	DWORD PTR _comp_nedge$[ebp], ebx
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN10@simon_norm
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN12@simon_norm
	mov	edx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [edx]
	jmp	SHORT $LN11@simon_norm
$LN12@simon_norm:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN10@simon_norm
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN11@simon_norm
$LN10@simon_norm:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+edx]
$LN11@simon_norm:
	fld	QWORD PTR [eax+64]

; 308  :   for ( e_id = inverse_id(get_next_head_edge(e_id))
; 309  :         ; e_id != e_info->id
; 310  :         ; e_id = inverse_id(get_next_head_edge(e_id)) )

	mov	edx, DWORD PTR _web+124
	mov	eax, ecx
	fstp	QWORD PTR _power$[ebp]
	shr	eax, 27					; 0000001bH
	mov	esi, ecx
	not	eax
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+esi*4]
	and	eax, 1
	mov	eax, DWORD PTR [esi+eax*4+32]
	cmp	eax, ecx
	je	SHORT $LN5@simon_norm
$LL7@simon_norm:
	mov	esi, eax
	shr	esi, 27					; 0000001bH
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	not	esi
	and	esi, 1
	mov	eax, DWORD PTR [eax+esi*4+32]

; 311  :           comp_nedge++;

	inc	ebx
	cmp	eax, ecx
	jne	SHORT $LL7@simon_norm
	mov	DWORD PTR _comp_nedge$[ebp], ebx
$LN5@simon_norm:

; 312  :   ti = 2*sin(M_PI/comp_nedge);

	fild	DWORD PTR _comp_nedge$[ebp]
	fst	QWORD PTR tv294[ebp]
	fdivr	QWORD PTR __real@400921fb54442d18
	call	__CIsin
	fadd	ST(0), ST(0)

; 313  :   for (j=2; 2*j<=comp_nedge; j++)

	mov	esi, 2
	cmp	ebx, 4
	jl	SHORT $LN26@simon_norm
	fmul	ST(0), ST(0)
	push	edi
	lea	edi, DWORD PTR [esi+2]
	fstp	QWORD PTR tv306[ebp]
	jmp	SHORT $LN4@simon_norm
	npad	6
$LL32@simon_norm:
	fstp	ST(0)
$LN4@simon_norm:

; 314  :      {
; 315  :         dist = 2*sin((j-1)*M_PI/comp_nedge);

	lea	ecx, DWORD PTR [esi-1]
	mov	DWORD PTR tv321[ebp], ecx
	fild	DWORD PTR tv321[ebp]
	fmul	QWORD PTR __real@400921fb54442d18
	fdiv	QWORD PTR tv294[ebp]
	call	__CIsin
	fadd	ST(0), ST(0)

; 316  :         energy += ti*ti/pow(dist,power);

	fld	QWORD PTR _power$[ebp]
	call	__CIpow
	fdivr	QWORD PTR tv306[ebp]
	fld	QWORD PTR _energy$[ebp]
	fadd	ST(0), ST(1)
	fst	QWORD PTR _energy$[ebp]

; 317  :         if (2*j==comp_nedge) energy -= ti*ti/pow(dist,power)/2;

	cmp	edi, ebx
	jne	SHORT $LN29@simon_norm
	fxch	ST(1)
	fmul	QWORD PTR __real@3fe0000000000000
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _energy$[ebp]
	jmp	SHORT $LN3@simon_norm
$LN29@simon_norm:
	fstp	ST(1)
$LN3@simon_norm:

; 313  :   for (j=2; 2*j<=comp_nedge; j++)

	inc	esi
	lea	edi, DWORD PTR [esi+esi]
	cmp	edi, ebx
	jle	SHORT $LL32@simon_norm

; 318  :      }
; 319  :   return 2*energy;

	pop	edi
	fadd	ST(0), ST(0)
	pop	esi
	pop	ebx

; 320  : } // end simon_normalization()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN26@simon_norm:

; 313  :   for (j=2; 2*j<=comp_nedge; j++)

	fstp	ST(0)
	pop	esi
	fld	QWORD PTR _energy$[ebp]
	pop	ebx

; 318  :      }
; 319  :   return 2*energy;

	fadd	ST(0), ST(0)

; 320  : } // end simon_normalization()

	mov	esp, ebp
	pop	ebp
	ret	0
_simon_normalization ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_circle_knot_energy
; Function compile flags: /Ogtp
;	COMDAT _circle_knot_energy
_TEXT	SEGMENT
_L1$ = -236						; size = 8
_LL2$ = -228						; size = 8
tv3543 = -220						; size = 4
_yy1$ = -216						; size = 4
tv2854 = -212						; size = 4
_e1$ = -208						; size = 4
tv3547 = -204						; size = 4
tv2867 = -200						; size = 4
tv3541 = -196						; size = 4
tv3555 = -192						; size = 4
tv3545 = -188						; size = 4
tv3549 = -184						; size = 4
tv2526 = -180						; size = 4
tv2863 = -176						; size = 4
tv3551 = -172						; size = 4
_energy$ = -168						; size = 8
_e1e2$ = -160						; size = 8
tv3558 = -152						; size = 4
_de1$ = -148						; size = 8
_dd$ = -140						; size = 8
_de2$ = -132						; size = 8
tv3553 = -124						; size = 4
tv1763 = -124						; size = 4
tv1755 = -120						; size = 4
tv1214 = -120						; size = 4
_x1$ = -116						; size = 4
_x2$ = -112						; size = 4
tv3560 = -108						; size = 4
tv3557 = -108						; size = 4
tv1759 = -104						; size = 4
tv1222 = -104						; size = 4
_y2$ = -104						; size = 4
_dx2$ = -100						; size = 48
_dx1$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_circle_knot_energy PROC				; COMDAT

; 347  : { edge_id e1 = e_info->id,e2;

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _e_info$[ebp]

; 348  :   REAL *x1,*x2,*yy1,*y2; /* end coordinates */
; 349  :   REAL energy = 0.0;

	fldz
	mov	eax, DWORD PTR [eax]
	fstp	QWORD PTR _energy$[ebp]

; 350  :   REAL dx1[MAXCOORD];
; 351  :   REAL dx2[MAXCOORD];
; 352  :   REAL LL1,L1,LL2,L2,dd,de1,de2;
; 353  :   REAL e1e2;
; 354  :   int j;
; 355  : 
; 356  :   x1 = get_coord(get_edge_tailv(e1));

	mov	ecx, DWORD PTR _web+124
	push	ebx
	push	esi
	push	edi
	mov	edi, eax
	mov	DWORD PTR _e1$[ebp], eax
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR _web+216
	mov	eax, DWORD PTR [eax+ecx+304]
	shr	edi, 27					; 0000001bH
	add	edx, eax
	and	edi, 1
	je	SHORT $LN16@circle_kno
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN15@circle_kno
$LN16@circle_kno:
	mov	eax, DWORD PTR [edx]
$LN15@circle_kno:
	mov	esi, DWORD PTR _web+104
	mov	ecx, DWORD PTR [esi+ecx+64]
	mov	ebx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ebx+eax*4]
	add	esi, ecx
	mov	DWORD PTR _x1$[ebp], esi

; 357  :   x2 = get_coord(get_edge_headv(e1));

	test	edi, edi
	je	SHORT $LN20@circle_kno
	mov	eax, DWORD PTR [edx]
	jmp	SHORT $LN19@circle_kno
$LN20@circle_kno:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
$LN19@circle_kno:
	and	eax, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ebx+eax*4]
	add	edi, ecx

; 358  :   for ( j = 0 ; j < SDIM ; j++ ) dx1[j] = x2[j] - x1[j];

	mov	ecx, DWORD PTR _web+616
	xor	edx, edx
	mov	DWORD PTR _x2$[ebp], edi
	cmp	ecx, 4
	jl	SHORT $LC38@circle_kno
	mov	ebx, edi
	lea	ecx, DWORD PTR [edi+24]
	lea	edi, DWORD PTR _dx1$[ebp]
	sub	edi, esi
	mov	DWORD PTR tv1755[ebp], edi
	lea	edi, DWORD PTR _dx1$[ebp+8]
	sub	edi, esi
	mov	DWORD PTR tv1759[ebp], edi
	lea	edi, DWORD PTR _dx1$[ebp+16]
	sub	ebx, esi
	sub	edi, esi
	lea	eax, DWORD PTR [esi+8]
	mov	DWORD PTR tv1763[ebp], edi
	npad	6
$LL39@circle_kno:
	fld	QWORD PTR [ecx-24]
	mov	edi, DWORD PTR tv1755[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _dx1$[ebp+edx*8-32]
	fld	QWORD PTR [ebx+eax-32]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv1759[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv1763[ebp]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR _web+616
	add	edi, -3					; fffffffdH
	cmp	edx, edi
	jl	SHORT $LL39@circle_kno
	mov	ecx, DWORD PTR _web+616
	mov	edi, DWORD PTR _x2$[ebp]
$LC38@circle_kno:
	cmp	edx, ecx
	jge	SHORT $LN37@circle_kno
	mov	ebx, edi
	lea	edi, DWORD PTR _dx1$[ebp]
	sub	ebx, esi
	sub	edi, esi
	lea	eax, DWORD PTR [esi+edx*8]
	sub	ecx, edx
$LC12@circle_kno:
	fld	QWORD PTR [eax+ebx]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax+edi-8]
	jne	SHORT $LC12@circle_kno
	mov	ecx, DWORD PTR _web+616
$LN37@circle_kno:

; 359  :   LL1 = SDIM_dot(dx1,dx1);

	push	ecx
	lea	ecx, DWORD PTR _dx1$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	add	esp, 12					; 0000000cH

; 360  :   L1 = sqrt(LL1);

	call	__CIsqrt
	fstp	QWORD PTR _L1$[ebp]

; 361  :   FOR_ALL_EDGES(e2)

	mov	ecx, DWORD PTR _web+160
	test	ecx, 268435456				; 10000000H
	je	$LN43@circle_kno
	fld	QWORD PTR __real@3fe0000000000000
$LN9@circle_kno:
	mov	edx, DWORD PTR _web+124
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [edi+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	mov	DWORD PTR tv1214[ebp], edi
	je	$LN8@circle_kno

; 362  :     { if ( e2 == e1 ) continue; 

	cmp	ecx, DWORD PTR _e1$[ebp]
	je	$LN8@circle_kno

; 363  :       yy1 = get_coord(get_edge_tailv(e2));

	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR tv1222[ebp], ecx
	je	SHORT $LN24@circle_kno
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	add	edx, edi
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN23@circle_kno
$LN24@circle_kno:
	mov	ecx, DWORD PTR _web+216
	mov	edx, DWORD PTR _dymem
	mov	edx, DWORD PTR [ecx+edx+304]
	mov	eax, DWORD PTR [edx+edi]
	add	edx, edi
$LN23@circle_kno:
	mov	ecx, DWORD PTR _web+104
	mov	esi, DWORD PTR _dymem
	mov	esi, DWORD PTR [ecx+esi+64]
	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ecx+eax*4]
	add	ebx, esi

; 364  :       y2 = get_coord(get_edge_headv(e2));

	cmp	DWORD PTR tv1222[ebp], 0
	mov	DWORD PTR _yy1$[ebp], ebx
	je	SHORT $LN28@circle_kno
	mov	eax, DWORD PTR [edx]
	jmp	SHORT $LN27@circle_kno
$LN28@circle_kno:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
$LN27@circle_kno:

; 365  :       LL2 = dd = de1 = de2 = e1e2 = 0.0;

	fldz
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fst	QWORD PTR _e1e2$[ebp]
	fld	ST(0)
	add	edx, esi
	fst	QWORD PTR _de2$[ebp]

; 366  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	cmp	DWORD PTR _web+616, 4
	fld	ST(1)
	fst	QWORD PTR _de1$[ebp]
	mov	DWORD PTR _y2$[ebp], edx
	fld	ST(2)
	fst	QWORD PTR _dd$[ebp]
	jl	$LC41@circle_kno

; 375  :             e1e2 += dx1[j]*dx2[j];

	lea	ecx, DWORD PTR [edx+16]
	sub	edx, ebx
	mov	DWORD PTR tv2526[ebp], edx
	mov	edx, ebx
	neg	edx
	lea	eax, DWORD PTR [ebx+8]
	mov	ebx, DWORD PTR _x1$[ebp]
	add	ebx, edx
	mov	DWORD PTR tv3541[ebp], ebx
	mov	ebx, DWORD PTR _x2$[ebp]
	add	ebx, edx
	mov	DWORD PTR tv3543[ebp], ebx
	lea	ebx, DWORD PTR _dx2$[ebp+edx]
	mov	DWORD PTR tv3545[ebp], ebx
	lea	ebx, DWORD PTR _dx2$[ebp+edx+8]
	mov	DWORD PTR tv3547[ebp], ebx
	lea	ebx, DWORD PTR _dx2$[ebp+edx+16]
	mov	DWORD PTR tv3549[ebp], ebx
	lea	ebx, DWORD PTR _dx1$[ebp+edx]
	mov	edi, DWORD PTR _x2$[ebp]
	mov	DWORD PTR tv3551[ebp], ebx
	lea	ebx, DWORD PTR _dx1$[ebp+edx+8]
	lea	edx, DWORD PTR _dx1$[ebp+edx+16]
	mov	DWORD PTR tv3555[ebp], edx
	mov	edx, DWORD PTR _y2$[ebp]
	neg	edx
	mov	DWORD PTR tv3557[ebp], edx
	add	edx, DWORD PTR _x1$[ebp]
	mov	DWORD PTR tv3553[ebp], ebx
	mov	ebx, DWORD PTR _x2$[ebp]
	mov	DWORD PTR tv3558[ebp], edx
	mov	edx, DWORD PTR tv3557[ebp]
	add	edx, ebx
	mov	DWORD PTR tv3560[ebp], edx
	mov	edx, DWORD PTR _x1$[ebp]
	sub	edx, ebx
	mov	DWORD PTR tv2854[ebp], edx
	mov	edx, DWORD PTR _x1$[ebp]
	lea	ebx, DWORD PTR _dx2$[ebp]
	sub	ebx, edx
	mov	DWORD PTR tv2863[ebp], ebx
	lea	ebx, DWORD PTR _dx1$[ebp]
	add	edi, 24					; 00000018H
	sub	edx, ebx
	mov	DWORD PTR tv2867[ebp], edx
	jmp	SHORT $LN42@circle_kno
$LN44@circle_kno:
	mov	edx, DWORD PTR tv2867[ebp]

; 366  :       for ( j = 0 ; j < SDIM ; j++ )

$LN42@circle_kno:

; 367  :       {
; 368  :             REAL rj;
; 369  :             dx2[j] = y2[j] - yy1[j];

	fld	QWORD PTR [ecx-16]
	mov	ebx, DWORD PTR tv2863[ebp]
	fsub	QWORD PTR [eax-8]

; 375  :             e1e2 += dx1[j]*dx2[j];

	lea	edx, DWORD PTR [edx+esi*8]
	lea	edx, DWORD PTR _dx1$[ebp+edx]
	fst	QWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR tv3545[ebp]
	fld	QWORD PTR [ecx-16]
	fadd	QWORD PTR [eax-8]
	fsub	QWORD PTR [edx]
	mov	edx, DWORD PTR tv2526[ebp]
	fsub	QWORD PTR [edi-24]
	fmul	ST(0), ST(6)
	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(3), ST(0)
	fld	QWORD PTR _dx1$[ebp+esi*8]
	fmul	ST(0), ST(1)
	faddp	ST(4), ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(4), ST(0)
	fxch	ST(3)
	fstp	QWORD PTR _de2$[ebp]
	fld	QWORD PTR [edx+eax]
	fsub	QWORD PTR [eax]
	fst	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv3547[ebp]
	fld	QWORD PTR [edx+eax]
	mov	edx, DWORD PTR tv3541[ebp]
	fadd	QWORD PTR [eax]
	fsub	QWORD PTR [edx+eax]
	mov	edx, DWORD PTR tv3543[ebp]
	fsub	QWORD PTR [edx+eax]
	mov	edx, DWORD PTR tv3551[ebp]
	fmul	ST(0), ST(6)
	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(3), ST(0)
	fld	QWORD PTR [edx+eax]
	fmul	ST(0), ST(1)
	faddp	ST(4), ST(0)
	fxch	ST(3)
	fstp	QWORD PTR _de1$[ebp]
	fld	ST(0)
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fadd	QWORD PTR _de2$[ebp]
	fstp	QWORD PTR _de2$[ebp]
	fld	QWORD PTR [ecx]
	fsub	QWORD PTR [eax+8]
	fst	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv3558[ebp]
	fld	QWORD PTR [ecx]
	fadd	QWORD PTR [eax+8]
	fsub	QWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR tv3560[ebp]
	fsub	QWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR tv3553[ebp]
	fmul	ST(0), ST(6)
	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR _dd$[ebp]
	fld	ST(1)
	fmul	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv3549[ebp]
	fadd	QWORD PTR _de1$[ebp]
	fstp	QWORD PTR _de1$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR _de2$[ebp]
	fstp	QWORD PTR _de2$[ebp]
	fld	QWORD PTR [ecx+8]
	fsub	QWORD PTR [eax+16]
	fst	QWORD PTR [ebx+eax]
	fld	ST(3)
	fmul	ST(0), ST(4)
	faddp	ST(5), ST(0)
	fld	ST(2)
	fmul	ST(0), ST(3)

; 370  :             LL2 += dx2[j]*dx2[j];
; 371  :             rj = (yy1[j] + y2[j] - x1[j] - x2[j])/2;

	faddp	ST(5), ST(0)
	mov	ebx, DWORD PTR tv2854[ebp]
	fld	ST(1)

; 375  :             e1e2 += dx1[j]*dx2[j];

	add	esi, 4
	fmul	ST(0), ST(2)
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	add	edi, 32					; 00000020H
	faddp	ST(5), ST(0)
	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(5), ST(0)
	fxch	ST(4)
	fstp	QWORD PTR _LL2$[ebp]
	fld	QWORD PTR [ecx-24]
	fadd	QWORD PTR [eax-16]
	fsub	QWORD PTR [ebx+edi-32]
	mov	ebx, DWORD PTR tv3555[ebp]
	fsub	QWORD PTR [edi-32]
	fmul	ST(0), ST(5)
	fld	ST(0)
	fmul	ST(0), ST(1)
	fadd	QWORD PTR _dd$[ebp]
	fstp	QWORD PTR _dd$[ebp]
	fld	QWORD PTR [ebx+eax-32]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR _de1$[ebp]
	fst	QWORD PTR _de1$[ebp]
	fld	ST(5)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR _de2$[ebp]
	fst	QWORD PTR _de2$[ebp]
	fxch	ST(4)
	fmul	QWORD PTR _dx1$[ebp+esi*8-32]
	fadd	QWORD PTR _e1e2$[ebp]
	fxch	ST(3)
	fmul	QWORD PTR [edx+eax-32]
	mov	edx, DWORD PTR tv3553[ebp]
	faddp	ST(3), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR [edx+eax-32]
	mov	edx, DWORD PTR _web+616
	add	edx, -3					; fffffffdH
	faddp	ST(2), ST(0)
	fld	QWORD PTR [ebx+eax-32]
	fmulp	ST(4), ST(0)
	fxch	ST(1)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR _e1e2$[ebp]
	fld	QWORD PTR _dd$[ebp]
	fld	QWORD PTR _LL2$[ebp]
	fxch	ST(3)
	fxch	ST(1)
	cmp	esi, edx
	jl	$LN44@circle_kno
	mov	edx, DWORD PTR _y2$[ebp]
	mov	ebx, DWORD PTR _yy1$[ebp]
	mov	edi, DWORD PTR tv1214[ebp]
$LC41@circle_kno:

; 366  :       for ( j = 0 ; j < SDIM ; j++ )

	cmp	esi, DWORD PTR _web+616
	jge	$LN70@circle_kno
	mov	ecx, edx
	lea	eax, DWORD PTR [edx+esi*8]
	sub	ebx, edx
	mov	edx, DWORD PTR _x1$[ebp]
	neg	ecx
	add	edx, ecx
	mov	DWORD PTR tv3558[ebp], edx
	mov	edx, DWORD PTR _x2$[ebp]
	add	edx, ecx
	mov	DWORD PTR tv3560[ebp], edx
	mov	edx, DWORD PTR _web+616
	lea	edi, DWORD PTR _dx2$[ebp+ecx]
	lea	ecx, DWORD PTR _dx1$[ebp+ecx]
	sub	edx, esi
$LC3@circle_kno:

; 367  :       {
; 368  :             REAL rj;
; 369  :             dx2[j] = y2[j] - yy1[j];

	fld	QWORD PTR [eax]

; 370  :             LL2 += dx2[j]*dx2[j];
; 371  :             rj = (yy1[j] + y2[j] - x1[j] - x2[j])/2;

	mov	esi, DWORD PTR tv3558[ebp]
	fsub	QWORD PTR [ebx+eax]
	add	eax, 8
	dec	edx
	fst	QWORD PTR [edi+eax-8]
	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(5), ST(0)
	fld	QWORD PTR [ebx+eax-8]
	fadd	QWORD PTR [eax-8]
	fsub	QWORD PTR [esi+eax-8]
	mov	esi, DWORD PTR tv3560[ebp]
	fsub	QWORD PTR [esi+eax-8]
	fmul	ST(0), ST(6)

; 372  :             dd += rj*rj;

	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(3), ST(0)

; 373  :             de1 += rj*dx1[j];

	fld	ST(0)
	fmul	QWORD PTR [ecx+eax-8]
	faddp	ST(4), ST(0)

; 374  :             de2 += rj*dx2[j];

	fmul	ST(0), ST(1)
	faddp	ST(4), ST(0)

; 375  :             e1e2 += dx1[j]*dx2[j];

	fmul	QWORD PTR [ecx+eax-8]
	fadd	QWORD PTR _e1e2$[ebp]
	fstp	QWORD PTR _e1e2$[ebp]
	jne	SHORT $LC3@circle_kno

; 366  :       for ( j = 0 ; j < SDIM ; j++ )

	mov	edi, DWORD PTR tv1214[ebp]
	fstp	ST(4)

; 374  :             de2 += rj*dx2[j];

	fxch	ST(1)
	fstp	QWORD PTR _de2$[ebp]
	fstp	QWORD PTR _de1$[ebp]
	fxch	ST(1)
	fstp	QWORD PTR _dd$[ebp]
	jmp	SHORT $LN40@circle_kno
$LN70@circle_kno:

; 366  :       for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(0)
	fstp	ST(1)
	fstp	ST(2)
	fstp	ST(1)
$LN40@circle_kno:

; 376  :       }
; 377  :       L2 = sqrt(LL2);

	call	__CIsqrt

; 378  :       energy += (L1*L2  + e1e2 - 2*de1*de2/dd)/dd;

	fmul	QWORD PTR _L1$[ebp]
	fadd	QWORD PTR _e1e2$[ebp]
	fld	QWORD PTR _de1$[ebp]
	fadd	ST(0), ST(0)
	fmul	QWORD PTR _de2$[ebp]
	fld	QWORD PTR _dd$[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(2)
	fsubrp	ST(1), ST(0)
	fdivrp	ST(1), ST(0)
	fadd	QWORD PTR _energy$[ebp]
	fstp	QWORD PTR _energy$[ebp]
	fld	QWORD PTR __real@3fe0000000000000
$LN8@circle_kno:

; 361  :   FOR_ALL_EDGES(e2)

	mov	ecx, DWORD PTR [edi]
	test	ecx, 268435456				; 10000000H
	jne	$LN9@circle_kno
	fstp	ST(0)
$LN43@circle_kno:

; 379  :          /* 0 for cocircular edges */
; 380  :     }
; 381  :   return energy;
; 382  : } // end circle_knot_energy()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _energy$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_circle_knot_energy ENDP
_TEXT	ENDS
PUBLIC	__real@c000000000000000
PUBLIC	_e_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_circle_knot_energy_gradient
;	COMDAT __real@c000000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@c000000000000000 DQ 0c000000000000000r	; -2
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\knot3.c
CONST	ENDS
;	COMDAT _circle_knot_energy_gradient
_TEXT	SEGMENT
_L1$ = -312						; size = 8
_LL2$ = -304						; size = 8
tv4586 = -296						; size = 8
tv4517 = -288						; size = 4
tv4507 = -284						; size = 4
tv4515 = -280						; size = 4
tv4509 = -276						; size = 4
tv3766 = -272						; size = 8
tv1827 = -272						; size = 8
tv4511 = -264						; size = 4
tv4503 = -260						; size = 4
tv4505 = -256						; size = 4
_e_info$GSCopy$ = -252					; size = 4
_e1$ = -248						; size = 4
tv3800 = -244						; size = 8
tv4513 = -236						; size = 4
_energy$ = -232						; size = 8
_de1$ = -224						; size = 8
_de2$ = -216						; size = 8
tv4521 = -208						; size = 4
tv3243 = -204						; size = 4
_dd$ = -200						; size = 8
tv4519 = -192						; size = 4
_e1e2$ = -188						; size = 8
tv4526 = -180						; size = 4
tv4532 = -176						; size = 4
_yy1$ = -176						; size = 4
tv4523 = -172						; size = 4
tv2335 = -172						; size = 4
tv2327 = -168						; size = 4
tv1607 = -168						; size = 4
_x2$ = -164						; size = 4
tv4528 = -160						; size = 4
tv4525 = -160						; size = 4
_x1$ = -156						; size = 4
tv2331 = -152						; size = 4
tv1618 = -152						; size = 4
_y2$ = -152						; size = 4
_r$ = -148						; size = 48
_dx2$ = -100						; size = 48
_dx1$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_circle_knot_energy_gradient PROC			; COMDAT

; 396  : { edge_id e1 = e_info->id,e2;

	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	edx, DWORD PTR _e_info$[ebp]

; 397  :   REAL *x1,*x2,*yy1,*y2; /* end coordinates */
; 398  :   REAL energy = 0.0;

	fldz
	push	ebx
	fst	QWORD PTR _energy$[ebp]
	push	esi
	mov	esi, DWORD PTR [edx]
	push	edi
	mov	DWORD PTR _e_info$GSCopy$[ebp], edx
	mov	DWORD PTR _e1$[ebp], esi

; 399  :   REAL dx1[MAXCOORD];
; 400  :   REAL dx2[MAXCOORD];
; 401  :   REAL r[MAXCOORD];
; 402  :   REAL LL1,L1,LL2,L2,dd,de1,de2;
; 403  :   REAL e1e2;
; 404  :   REAL en1,en2;
; 405  :   int i,j;
; 406  : 
; 407  :   for ( i = 0 ; i < 2 ; i++ )

	xor	ecx, ecx
$LN21@circle_kno@2:

; 408  :      for ( j = 0 ; j < SDIM ; j++ ) e_info->grad[i][j] = 0.0;

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN20@circle_kno@2
$LN18@circle_kno@2:
	mov	edi, DWORD PTR [edx+1336]
	mov	edi, DWORD PTR [ecx+edi]
	fst	QWORD PTR [edi+eax*8]
	inc	eax
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN18@circle_kno@2
$LN20@circle_kno@2:

; 399  :   REAL dx1[MAXCOORD];
; 400  :   REAL dx2[MAXCOORD];
; 401  :   REAL r[MAXCOORD];
; 402  :   REAL LL1,L1,LL2,L2,dd,de1,de2;
; 403  :   REAL e1e2;
; 404  :   REAL en1,en2;
; 405  :   int i,j;
; 406  : 
; 407  :   for ( i = 0 ; i < 2 ; i++ )

	add	ecx, 4
	cmp	ecx, 8
	jl	SHORT $LN21@circle_kno@2

; 409  :   x1 = get_coord(get_edge_tailv(e1));

	mov	edi, esi
	fstp	ST(0)
	shr	edi, 27					; 0000001bH
	and	esi, 134217727				; 07ffffffH
	and	edi, 1
	je	SHORT $LN25@circle_kno@2
	mov	eax, DWORD PTR _web+124
	mov	edx, DWORD PTR [eax+esi*4]
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR _web+216
	mov	eax, DWORD PTR [eax+ecx+304]
	add	edx, eax
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN24@circle_kno@2
$LN25@circle_kno@2:
	mov	ecx, DWORD PTR _web+124
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR _web+216
	mov	eax, DWORD PTR [eax+ecx+304]
	add	edx, eax
	mov	eax, DWORD PTR [edx]
$LN24@circle_kno@2:
	mov	esi, DWORD PTR _web+104
	mov	ecx, DWORD PTR [esi+ecx+64]
	mov	ebx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ebx+eax*4]
	add	esi, ecx
	mov	DWORD PTR _x1$[ebp], esi

; 410  :   x2 = get_coord(get_edge_headv(e1));

	test	edi, edi
	je	SHORT $LN29@circle_kno@2
	mov	eax, DWORD PTR [edx]
	jmp	SHORT $LN28@circle_kno@2
$LN29@circle_kno@2:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
$LN28@circle_kno@2:
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ebx+eax*4]
	add	ebx, ecx

; 411  :   for ( j = 0 ; j < SDIM ; j++ ) dx1[j] = x2[j] - x1[j];

	xor	edx, edx
	cmp	DWORD PTR _web+616, 4
	mov	DWORD PTR _x2$[ebp], ebx
	jl	$LC53@circle_kno@2
	lea	edi, DWORD PTR _dx1$[ebp]
	sub	edi, esi
	mov	DWORD PTR tv2327[ebp], edi
	lea	edi, DWORD PTR _dx1$[ebp+8]
	sub	edi, esi
	mov	DWORD PTR tv2331[ebp], edi
	lea	ecx, DWORD PTR [ebx+24]
	lea	edi, DWORD PTR _dx1$[ebp+16]
	sub	ebx, esi
	sub	edi, esi
	lea	eax, DWORD PTR [esi+8]
	mov	DWORD PTR tv2335[ebp], edi
	npad	9
$LL54@circle_kno@2:
	fld	QWORD PTR [ecx-24]
	mov	edi, DWORD PTR tv2327[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _dx1$[ebp+edx*8-32]
	fld	QWORD PTR [ebx+eax-32]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv2331[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv2335[ebp]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR _web+616
	add	edi, -3					; fffffffdH
	cmp	edx, edi
	jl	SHORT $LL54@circle_kno@2
	mov	ebx, DWORD PTR _x2$[ebp]
$LC53@circle_kno@2:
	cmp	edx, DWORD PTR _web+616
	jge	SHORT $LN52@circle_kno@2
	mov	ecx, DWORD PTR _web+616
	lea	edi, DWORD PTR _dx1$[ebp]
	sub	ebx, esi
	sub	edi, esi
	lea	eax, DWORD PTR [esi+edx*8]
	sub	ecx, edx
$LC15@circle_kno@2:
	fld	QWORD PTR [eax+ebx]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax+edi-8]
	jne	SHORT $LC15@circle_kno@2
$LN52@circle_kno@2:

; 412  :   LL1 = SDIM_dot(dx1,dx1);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _dx1$[ebp]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	add	esp, 12					; 0000000cH

; 413  :   L1 = sqrt(LL1);

	call	__CIsqrt
	fstp	QWORD PTR _L1$[ebp]

; 414  :   FOR_ALL_EDGES(e2)

	mov	ecx, DWORD PTR _web+160
	test	ecx, 268435456				; 10000000H
	je	$LN58@circle_kno@2
	fld	QWORD PTR __real@3fe0000000000000
$LN12@circle_kno@2:
	mov	edx, DWORD PTR _web+124
	mov	edi, ecx
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	edx, DWORD PTR [edi+edx]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	xor	esi, esi
	or	eax, esi
	mov	DWORD PTR tv1607[ebp], edi
	je	$LN11@circle_kno@2

; 415  :     { if ( e2 == e1 ) continue; /* each pair once */

	cmp	ecx, DWORD PTR _e1$[ebp]
	je	$LN11@circle_kno@2

; 416  :       yy1 = get_coord(get_edge_tailv(e2));

	mov	eax, DWORD PTR _web+216
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR tv1618[ebp], ecx
	mov	ecx, DWORD PTR _dymem
	mov	ebx, DWORD PTR [eax+ecx+304]
	je	SHORT $LN33@circle_kno@2
	mov	ecx, DWORD PTR _web+636
	add	ebx, edx
	mov	eax, DWORD PTR [ebx+ecx*4]
	jmp	SHORT $LN32@circle_kno@2
$LN33@circle_kno@2:
	mov	eax, DWORD PTR [ebx+edx]
	add	ebx, edx
$LN32@circle_kno@2:
	mov	ecx, DWORD PTR _web+104
	mov	edx, DWORD PTR _dymem
	mov	esi, DWORD PTR [ecx+edx+64]
	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	add	edx, esi

; 417  :       y2 = get_coord(get_edge_headv(e2));

	cmp	DWORD PTR tv1618[ebp], 0
	mov	DWORD PTR _yy1$[ebp], edx
	je	SHORT $LN37@circle_kno@2
	mov	eax, DWORD PTR [ebx]
	jmp	SHORT $LN36@circle_kno@2
$LN37@circle_kno@2:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [ebx+eax*4]
$LN36@circle_kno@2:

; 418  :       LL2 = dd = de1 = de2 = e1e2 = 0.0;

	fldz
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ecx+eax*4]
	fst	QWORD PTR _e1e2$[ebp]
	fld	ST(0)
	add	ebx, esi
	fst	QWORD PTR _de2$[ebp]

; 419  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	cmp	DWORD PTR _web+616, 4
	fld	ST(1)
	fst	QWORD PTR _de1$[ebp]
	mov	DWORD PTR _y2$[ebp], ebx
	fld	ST(2)
	fst	QWORD PTR _dd$[ebp]
	jl	$LC56@circle_kno@2

; 427  :             e1e2 += dx1[j]*dx2[j];

	lea	ecx, DWORD PTR [ebx+16]
	fstp	ST(0)
	sub	ebx, edx
	fstp	ST(1)
	mov	DWORD PTR tv3243[ebp], ebx
	fstp	ST(0)
	mov	ebx, DWORD PTR _x1$[ebp]
	lea	eax, DWORD PTR [edx+8]
	neg	edx
	add	ebx, edx
	mov	DWORD PTR tv4503[ebp], ebx
	mov	ebx, DWORD PTR _x2$[ebp]
	add	ebx, edx
	mov	DWORD PTR tv4505[ebp], ebx
	lea	ebx, DWORD PTR _dx2$[ebp+edx]
	mov	DWORD PTR tv4507[ebp], ebx
	lea	ebx, DWORD PTR _r$[ebp+edx]
	mov	DWORD PTR tv4509[ebp], ebx
	lea	ebx, DWORD PTR _dx2$[ebp+edx+8]
	mov	DWORD PTR tv4511[ebp], ebx
	lea	ebx, DWORD PTR _r$[ebp+edx+8]
	mov	edi, DWORD PTR _x2$[ebp]
	mov	DWORD PTR tv4513[ebp], ebx
	lea	ebx, DWORD PTR _dx2$[ebp+edx+16]
	mov	DWORD PTR tv4515[ebp], ebx
	lea	ebx, DWORD PTR _r$[ebp+edx+16]
	mov	DWORD PTR tv4517[ebp], ebx
	lea	ebx, DWORD PTR _dx1$[ebp+edx]
	mov	DWORD PTR tv4519[ebp], ebx
	lea	ebx, DWORD PTR _dx1$[ebp+edx+8]
	lea	edx, DWORD PTR _dx1$[ebp+edx+16]
	mov	DWORD PTR tv4523[ebp], edx
	mov	edx, DWORD PTR _y2$[ebp]
	neg	edx
	mov	DWORD PTR tv4525[ebp], edx
	add	edx, DWORD PTR _x1$[ebp]
	mov	DWORD PTR tv4521[ebp], ebx
	mov	ebx, DWORD PTR _x2$[ebp]
	mov	DWORD PTR tv4526[ebp], edx
	mov	edx, DWORD PTR tv4525[ebp]
	add	edx, ebx
	mov	DWORD PTR tv4528[ebp], edx
	mov	edx, DWORD PTR _x1$[ebp]
	add	edi, 24					; 00000018H
	sub	edx, ebx
	jmp	SHORT $LN57@circle_kno@2
$LL86@circle_kno@2:
	fstp	ST(1)
	fstp	ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fld	QWORD PTR _LL2$[ebp]
$LN57@circle_kno@2:

; 422  :             LL2 += dx2[j]*dx2[j];
; 423  :             r[j] = (yy1[j] + y2[j] - x1[j] - x2[j])/2;

	fld	QWORD PTR [ecx-16]
	mov	ebx, DWORD PTR _x1$[ebp]
	fsub	QWORD PTR [eax-8]
	fst	QWORD PTR _dx2$[ebp+esi*8]
	fld	QWORD PTR [ecx-16]
	fadd	QWORD PTR [eax-8]
	fsub	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR tv3243[ebp]
	fsub	QWORD PTR [edi-24]
	fmul	ST(0), ST(3)
	fst	QWORD PTR _r$[ebp+esi*8]
	fld	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv4507[ebp]
	fsub	QWORD PTR [eax]
	fst	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv3243[ebp]
	fld	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv4503[ebp]
	fadd	QWORD PTR [eax]
	fsub	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv4505[ebp]
	fsub	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv4509[ebp]
	fmul	ST(0), ST(5)
	fst	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv4511[ebp]
	fld	QWORD PTR [ecx]
	fsub	QWORD PTR [eax+8]
	fst	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv4526[ebp]
	fld	QWORD PTR [ecx]
	fadd	QWORD PTR [eax+8]
	fsub	QWORD PTR [ecx+ebx]
	mov	ebx, DWORD PTR tv4528[ebp]
	fsub	QWORD PTR [ecx+ebx]
	mov	ebx, DWORD PTR tv4513[ebp]
	fmulp	ST(7), ST(0)
	fxch	ST(6)
	fst	QWORD PTR tv4586[ebp]
	fstp	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv4515[ebp]
	fld	QWORD PTR [ecx+8]
	fsub	QWORD PTR [eax+16]
	fst	QWORD PTR tv3766[ebp]
	fst	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv4517[ebp]
	fld	ST(4)
	fmul	ST(0), ST(5)
	faddp	ST(6), ST(0)
	fld	ST(2)
	fmul	ST(0), ST(3)
	faddp	ST(6), ST(0)
	fld	ST(6)
	fmul	ST(0), ST(7)
	faddp	ST(6), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(5), ST(0)
	fxch	ST(4)
	fstp	QWORD PTR _LL2$[ebp]
	fld	QWORD PTR [ecx+8]
	fadd	QWORD PTR [eax+16]
	fsub	QWORD PTR [edi+edx]
	fsub	QWORD PTR [edi]
	fmul	QWORD PTR __real@3fe0000000000000
	fst	QWORD PTR tv3800[ebp]
	fstp	QWORD PTR [eax+ebx]

; 424  :             dd += r[j]*r[j];

	fld	ST(1)
	fmul	ST(0), ST(2)
	fadd	QWORD PTR _dd$[ebp]
	fld	ST(4)
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv4586[ebp]
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv3800[ebp]
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _dd$[ebp]

; 425  :             de1 += r[j]*dx1[j];

	fld	ST(1)
	fmul	QWORD PTR _dx1$[ebp+esi*8]
	fadd	QWORD PTR _de1$[ebp]
	mov	ebx, DWORD PTR tv4519[ebp]
	fld	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv4521[ebp]
	fmul	ST(0), ST(5)

; 427  :             e1e2 += dx1[j]*dx2[j];

	add	esi, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	faddp	ST(1), ST(0)
	add	edi, 32					; 00000020H
	fld	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv4523[ebp]
	fld	QWORD PTR tv4586[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv3800[ebp]
	fmul	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv4519[ebp]
	faddp	ST(1), ST(0)
	fst	QWORD PTR _de1$[ebp]
	fld	ST(4)
	fmulp	ST(4), ST(0)
	fxch	ST(3)
	fadd	QWORD PTR _de2$[ebp]
	fld	ST(2)
	fmulp	ST(6), ST(0)
	faddp	ST(5), ST(0)
	fmul	ST(0), ST(5)
	faddp	ST(4), ST(0)
	fld	QWORD PTR tv3800[ebp]
	fld	QWORD PTR tv3766[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(5)
	faddp	ST(1), ST(0)
	fst	QWORD PTR _de2$[ebp]
	fxch	ST(3)
	fmul	QWORD PTR _dx1$[ebp+esi*8-32]
	fadd	QWORD PTR _e1e2$[ebp]
	fld	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv4521[ebp]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fxch	ST(4)
	fmul	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv4523[ebp]
	faddp	ST(4), ST(0)
	fxch	ST(2)
	fmul	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR _web+616
	add	ebx, -3					; fffffffdH
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR _e1e2$[ebp]
	cmp	esi, ebx
	jl	$LL86@circle_kno@2
	fld	QWORD PTR _dd$[ebp]
	mov	ebx, DWORD PTR _y2$[ebp]
	fld	QWORD PTR __real@3fe0000000000000
	mov	edx, DWORD PTR _yy1$[ebp]
	fld	QWORD PTR _LL2$[ebp]
	mov	edi, DWORD PTR tv1607[ebp]
	fxch	ST(1)
	fxch	ST(4)
	fxch	ST(1)
	fxch	ST(3)
	fxch	ST(1)
	fxch	ST(2)
$LC56@circle_kno@2:

; 419  :       for ( j = 0 ; j < SDIM ; j++ )

	cmp	esi, DWORD PTR _web+616
	jge	$LN90@circle_kno@2
	mov	ecx, ebx
	lea	eax, DWORD PTR [ebx+esi*8]
	sub	edx, ebx
	mov	ebx, DWORD PTR _x1$[ebp]
	neg	ecx
	add	ebx, ecx
	mov	DWORD PTR tv4526[ebp], ebx
	mov	ebx, DWORD PTR _x2$[ebp]
	add	ebx, ecx
	mov	DWORD PTR tv4528[ebp], ebx
	lea	ebx, DWORD PTR _r$[ebp+ecx]
	mov	DWORD PTR tv4532[ebp], ebx
	mov	ebx, DWORD PTR _web+616
	lea	edi, DWORD PTR _dx2$[ebp+ecx]
	lea	ecx, DWORD PTR _dx1$[ebp+ecx]
	sub	ebx, esi
$LC6@circle_kno@2:

; 420  :       {
; 421  :             dx2[j] = y2[j] - yy1[j];

	fld	QWORD PTR [eax]

; 422  :             LL2 += dx2[j]*dx2[j];
; 423  :             r[j] = (yy1[j] + y2[j] - x1[j] - x2[j])/2;

	mov	esi, DWORD PTR tv4526[ebp]
	fsub	QWORD PTR [edx+eax]
	add	eax, 8
	dec	ebx
	fst	QWORD PTR [eax+edi-8]
	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(5), ST(0)
	fld	QWORD PTR [eax-8]
	fadd	QWORD PTR [edx+eax-8]
	fsub	QWORD PTR [eax+esi-8]
	mov	esi, DWORD PTR tv4528[ebp]
	fsub	QWORD PTR [eax+esi-8]
	mov	esi, DWORD PTR tv4532[ebp]
	fmul	ST(0), ST(6)
	fst	QWORD PTR [eax+esi-8]

; 424  :             dd += r[j]*r[j];

	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(3), ST(0)

; 425  :             de1 += r[j]*dx1[j];

	fld	ST(0)
	fmul	QWORD PTR [eax+ecx-8]
	faddp	ST(4), ST(0)

; 426  :             de2 += r[j]*dx2[j];

	fmul	ST(0), ST(1)
	faddp	ST(4), ST(0)

; 427  :             e1e2 += dx1[j]*dx2[j];

	fmul	QWORD PTR [eax+ecx-8]
	fadd	QWORD PTR _e1e2$[ebp]
	fstp	QWORD PTR _e1e2$[ebp]
	jne	SHORT $LC6@circle_kno@2

; 419  :       for ( j = 0 ; j < SDIM ; j++ )

	mov	edi, DWORD PTR tv1607[ebp]
	fstp	ST(4)

; 426  :             de2 += r[j]*dx2[j];

	fxch	ST(1)
	fstp	QWORD PTR _de2$[ebp]
	fstp	QWORD PTR _de1$[ebp]
	fxch	ST(1)
	fstp	QWORD PTR _dd$[ebp]
	jmp	SHORT $LN55@circle_kno@2
$LN90@circle_kno@2:

; 419  :       for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(0)
	fstp	ST(1)
	fstp	ST(2)
	fstp	ST(1)
$LN55@circle_kno@2:

; 428  :       }
; 429  :       L2 = sqrt(LL2);

	call	__CIsqrt

; 430  :       de1 /= dd; de2 /= dd;

	fld	QWORD PTR _de1$[ebp]
	fld	QWORD PTR _dd$[ebp]

; 431  :       en1 = (L1*L2 + e1e2)/dd;
; 432  :       en2 = -2*de1*de2;
; 433  :       energy += en1+en2;
; 434  :       for ( j = 0 ; j < SDIM ; j++ ) 

	xor	eax, eax
	fdiv	ST(1), ST(0)
	fld	QWORD PTR _de2$[ebp]
	fdiv	ST(0), ST(1)
	fld	ST(3)
	fld	QWORD PTR _L1$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR _e1e2$[ebp]
	fdiv	ST(0), ST(3)
	fld	ST(4)
	fmul	QWORD PTR __real@c000000000000000
	fmul	ST(0), ST(3)
	fld	ST(0)
	fadd	ST(0), ST(2)
	fadd	QWORD PTR _energy$[ebp]
	fstp	QWORD PTR _energy$[ebp]
	cmp	DWORD PTR _web+616, eax
	jle	$LN96@circle_kno@2
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fxch	ST(6)
	fdivrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv1827[ebp]
$LN61@circle_kno@2:

; 435  :       {
; 436  :          register REAL common = 
; 437  :               2*((en1+2*en2)*r[j] + de1*dx2[j]+de2*dx1[j])/dd;

	fld	ST(0)

; 438  :          register REAL oppose =
; 439  :               2*(L2/L1*dx1[j] + dx2[j] - 2*r[j]*de2)/dd;
; 440  :          e_info->grad[0][j] += common - oppose;

	mov	edx, DWORD PTR _e_info$GSCopy$[ebp]
	fmul	QWORD PTR _r$[ebp+eax*8]
	mov	ecx, DWORD PTR [edx+1336]
	fld	QWORD PTR _dx2$[ebp+eax*8]
	mov	ecx, DWORD PTR [ecx]
	fmul	ST(0), ST(5)
	lea	ecx, DWORD PTR [ecx+eax*8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dx1$[ebp+eax*8]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(3)
	fld	QWORD PTR tv1827[ebp]
	fmul	QWORD PTR _dx1$[ebp+eax*8]
	fadd	QWORD PTR _dx2$[ebp+eax*8]
	fld	QWORD PTR _r$[ebp+eax*8]
	fmul	ST(0), ST(7)
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(6)
	fdiv	ST(0), ST(4)
	fld	ST(1)
	fsub	ST(0), ST(1)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+1336]
	mov	ecx, DWORD PTR [edx+4]

; 441  :          e_info->grad[1][j] += common + oppose;

	faddp	ST(1), ST(0)
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN61@circle_kno@2

; 431  :       en1 = (L1*L2 + e1e2)/dd;
; 432  :       en2 = -2*de1*de2;
; 433  :       energy += en1+en2;
; 434  :       for ( j = 0 ; j < SDIM ; j++ ) 

	fstp	ST(2)
	fstp	ST(3)
	fstp	ST(2)
	jmp	SHORT $LN103@circle_kno@2
$LN96@circle_kno@2:
	fstp	ST(4)
	fstp	ST(3)
	fstp	ST(1)
	fstp	ST(3)
	fstp	ST(0)
$LN103@circle_kno@2:
	fstp	ST(0)
	fstp	ST(0)
	fld	QWORD PTR __real@3fe0000000000000
$LN11@circle_kno@2:

; 414  :   FOR_ALL_EDGES(e2)

	mov	edx, DWORD PTR _web+124
	mov	eax, DWORD PTR [edi+edx]
	mov	ecx, DWORD PTR [eax]
	test	ecx, 268435456				; 10000000H
	jne	$LN12@circle_kno@2
	fstp	ST(0)
$LN58@circle_kno@2:

; 442  :       }
; 443  :     }
; 444  : 
; 445  :   return energy;  /* since doing all pairs */
; 446  : } // end circle_knot_energy_gradient()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _energy$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_circle_knot_energy_gradient ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_sin_knot_energy
; Function compile flags: /Ogtp
;	COMDAT _sin_knot_energy
_TEXT	SEGMENT
_L1$ = -236						; size = 8
tv3585 = -228						; size = 4
_e1$ = -224						; size = 4
tv3589 = -220						; size = 4
_yy1$ = -216						; size = 4
tv2864 = -212						; size = 4
tv3583 = -208						; size = 4
tv2877 = -204						; size = 4
_energy$ = -200						; size = 8
tv3597 = -192						; size = 4
tv3587 = -188						; size = 4
tv3591 = -184						; size = 4
tv2600 = -180						; size = 4
tv2873 = -176						; size = 4
tv3593 = -172						; size = 4
_L1L2$ = -168						; size = 8
_LL2$ = -168						; size = 8
_e1e2$ = -160						; size = 8
tv3600 = -152						; size = 4
_de1$ = -148						; size = 8
_dd$ = -140						; size = 8
tv3595 = -132						; size = 4
tv1837 = -132						; size = 4
_de2$ = -128						; size = 8
tv1829 = -120						; size = 4
tv1278 = -120						; size = 4
_x1$ = -116						; size = 4
_x2$ = -112						; size = 4
tv3602 = -108						; size = 4
tv3599 = -108						; size = 4
tv1833 = -104						; size = 4
tv1286 = -104						; size = 4
_y2$ = -104						; size = 4
_dx2$ = -100						; size = 48
_dx1$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_sin_knot_energy PROC					; COMDAT

; 476  : { edge_id e1 = e_info->id,e2;

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _e_info$[ebp]

; 477  :   REAL *x1,*x2,*yy1,*y2; /* end coordinates */
; 478  :   REAL energy = 0.0;

	fldz
	mov	eax, DWORD PTR [eax]
	fstp	QWORD PTR _energy$[ebp]

; 479  :   REAL dx1[MAXCOORD];
; 480  :   REAL dx2[MAXCOORD];
; 481  :   REAL LL1,L1,LL2,L2,dd,de1,de2;
; 482  :   REAL e1e2, L1L2, s, t;
; 483  :   int j;
; 484  : 
; 485  :   x1 = get_coord(get_edge_tailv(e1));

	mov	ecx, DWORD PTR _web+124
	push	ebx
	push	esi
	push	edi
	mov	edi, eax
	mov	DWORD PTR _e1$[ebp], eax
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR _web+216
	mov	eax, DWORD PTR [eax+ecx+304]
	shr	edi, 27					; 0000001bH
	add	edx, eax
	and	edi, 1
	je	SHORT $LN17@sin_knot_e
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN16@sin_knot_e
$LN17@sin_knot_e:
	mov	eax, DWORD PTR [edx]
$LN16@sin_knot_e:
	mov	esi, DWORD PTR _web+104
	mov	ecx, DWORD PTR [esi+ecx+64]
	mov	ebx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ebx+eax*4]
	add	esi, ecx
	mov	DWORD PTR _x1$[ebp], esi

; 486  :   x2 = get_coord(get_edge_headv(e1));

	test	edi, edi
	je	SHORT $LN21@sin_knot_e
	mov	eax, DWORD PTR [edx]
	jmp	SHORT $LN20@sin_knot_e
$LN21@sin_knot_e:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
$LN20@sin_knot_e:
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ebx+eax*4]
	add	ebx, ecx

; 487  :   for ( j = 0 ; j < SDIM ; j++ ) dx1[j] = x2[j] - x1[j];

	mov	ecx, DWORD PTR _web+616
	xor	edx, edx
	mov	DWORD PTR _x2$[ebp], ebx
	cmp	ecx, 4
	jl	SHORT $LC39@sin_knot_e
	lea	edi, DWORD PTR _dx1$[ebp]
	sub	edi, esi
	mov	DWORD PTR tv1829[ebp], edi
	lea	edi, DWORD PTR _dx1$[ebp+8]
	sub	edi, esi
	mov	DWORD PTR tv1833[ebp], edi
	lea	ecx, DWORD PTR [ebx+24]
	lea	edi, DWORD PTR _dx1$[ebp+16]
	sub	ebx, esi
	sub	edi, esi
	lea	eax, DWORD PTR [esi+8]
	mov	DWORD PTR tv1837[ebp], edi
	npad	5
$LL40@sin_knot_e:
	fld	QWORD PTR [ecx-24]
	mov	edi, DWORD PTR tv1829[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _dx1$[ebp+edx*8-32]
	fld	QWORD PTR [ebx+eax-32]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv1833[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv1837[ebp]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR _web+616
	add	edi, -3					; fffffffdH
	cmp	edx, edi
	jl	SHORT $LL40@sin_knot_e
	mov	ecx, DWORD PTR _web+616
	mov	ebx, DWORD PTR _x2$[ebp]
$LC39@sin_knot_e:
	cmp	edx, ecx
	jge	SHORT $LN38@sin_knot_e
	lea	edi, DWORD PTR _dx1$[ebp]
	sub	ebx, esi
	sub	edi, esi
	lea	eax, DWORD PTR [esi+edx*8]
	sub	ecx, edx
$LC13@sin_knot_e:
	fld	QWORD PTR [eax+ebx]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax+edi-8]
	jne	SHORT $LC13@sin_knot_e
	mov	ecx, DWORD PTR _web+616
$LN38@sin_knot_e:

; 488  :   LL1 = SDIM_dot(dx1,dx1);

	push	ecx
	lea	ecx, DWORD PTR _dx1$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	add	esp, 12					; 0000000cH

; 489  :   L1 = sqrt(LL1);

	call	__CIsqrt
	fstp	QWORD PTR _L1$[ebp]

; 490  :   FOR_ALL_EDGES(e2)

	mov	ecx, DWORD PTR _web+160
	test	ecx, 268435456				; 10000000H
	je	$LN45@sin_knot_e
	fld	QWORD PTR __real@3fe0000000000000
	fldz
$LN47@sin_knot_e:
	mov	edx, DWORD PTR _web+124
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [edi+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	mov	DWORD PTR tv1278[ebp], edi
	je	$LN9@sin_knot_e

; 491  :     { if ( e2 <= e1 ) continue; /* each pair once */

	cmp	ecx, DWORD PTR _e1$[ebp]
	jbe	$LN9@sin_knot_e

; 492  :       yy1 = get_coord(get_edge_tailv(e2));

	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR tv1286[ebp], ecx
	je	SHORT $LN25@sin_knot_e
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	add	edx, edi
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN24@sin_knot_e
$LN25@sin_knot_e:
	mov	ecx, DWORD PTR _web+216
	mov	edx, DWORD PTR _dymem
	mov	edx, DWORD PTR [ecx+edx+304]
	mov	eax, DWORD PTR [edx+edi]
	add	edx, edi
$LN24@sin_knot_e:
	mov	ecx, DWORD PTR _web+104
	mov	esi, DWORD PTR _dymem
	mov	esi, DWORD PTR [ecx+esi+64]
	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ecx+eax*4]
	add	ebx, esi

; 493  :       y2 = get_coord(get_edge_headv(e2));

	cmp	DWORD PTR tv1286[ebp], 0
	mov	DWORD PTR _yy1$[ebp], ebx
	je	SHORT $LN29@sin_knot_e
	mov	eax, DWORD PTR [edx]
	jmp	SHORT $LN28@sin_knot_e
$LN29@sin_knot_e:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
$LN28@sin_knot_e:

; 494  :       LL2 = dd = de1 = de2 = e1e2 = 0.0;

	fst	QWORD PTR _e1e2$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	ST(0)
	fst	QWORD PTR _de2$[ebp]
	add	edx, esi
	fld	ST(1)

; 495  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	cmp	DWORD PTR _web+616, 4
	fst	QWORD PTR _de1$[ebp]
	fld	ST(2)
	mov	DWORD PTR _y2$[ebp], edx
	fst	QWORD PTR _dd$[ebp]
	jl	$LC42@sin_knot_e

; 504  :             e1e2 += dx1[j]*dx2[j];

	lea	ecx, DWORD PTR [edx+16]
	sub	edx, ebx
	mov	DWORD PTR tv2600[ebp], edx
	mov	edx, ebx
	neg	edx
	lea	eax, DWORD PTR [ebx+8]
	mov	ebx, DWORD PTR _x1$[ebp]
	add	ebx, edx
	mov	DWORD PTR tv3583[ebp], ebx
	mov	ebx, DWORD PTR _x2$[ebp]
	add	ebx, edx
	mov	DWORD PTR tv3585[ebp], ebx
	lea	ebx, DWORD PTR _dx2$[ebp+edx]
	mov	DWORD PTR tv3587[ebp], ebx
	lea	ebx, DWORD PTR _dx2$[ebp+edx+8]
	mov	DWORD PTR tv3589[ebp], ebx
	lea	ebx, DWORD PTR _dx2$[ebp+edx+16]
	mov	DWORD PTR tv3591[ebp], ebx
	lea	ebx, DWORD PTR _dx1$[ebp+edx]
	mov	edi, DWORD PTR _x2$[ebp]
	mov	DWORD PTR tv3593[ebp], ebx
	lea	ebx, DWORD PTR _dx1$[ebp+edx+8]
	lea	edx, DWORD PTR _dx1$[ebp+edx+16]
	mov	DWORD PTR tv3597[ebp], edx
	mov	edx, DWORD PTR _y2$[ebp]
	neg	edx
	mov	DWORD PTR tv3599[ebp], edx
	add	edx, DWORD PTR _x1$[ebp]
	mov	DWORD PTR tv3595[ebp], ebx
	mov	ebx, DWORD PTR _x2$[ebp]
	mov	DWORD PTR tv3600[ebp], edx
	mov	edx, DWORD PTR tv3599[ebp]
	add	edx, ebx
	mov	DWORD PTR tv3602[ebp], edx
	mov	edx, DWORD PTR _x1$[ebp]
	sub	edx, ebx
	mov	DWORD PTR tv2864[ebp], edx
	mov	edx, DWORD PTR _x1$[ebp]
	lea	ebx, DWORD PTR _dx2$[ebp]
	sub	ebx, edx
	mov	DWORD PTR tv2873[ebp], ebx
	lea	ebx, DWORD PTR _dx1$[ebp]
	add	edi, 24					; 00000018H
	sub	edx, ebx
	mov	DWORD PTR tv2877[ebp], edx
	jmp	SHORT $LN43@sin_knot_e
$LN46@sin_knot_e:
	mov	edx, DWORD PTR tv2877[ebp]

; 495  :       for ( j = 0 ; j < SDIM ; j++ )

$LN43@sin_knot_e:

; 496  :       {
; 497  :             REAL rj;
; 498  :             dx2[j] = y2[j] - yy1[j];

	fld	QWORD PTR [ecx-16]
	mov	ebx, DWORD PTR tv2873[ebp]
	fsub	QWORD PTR [eax-8]

; 504  :             e1e2 += dx1[j]*dx2[j];

	lea	edx, DWORD PTR [edx+esi*8]
	lea	edx, DWORD PTR _dx1$[ebp+edx]
	fst	QWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR tv3587[ebp]
	fld	QWORD PTR [eax-8]
	fadd	QWORD PTR [ecx-16]
	fsub	QWORD PTR [edx]
	mov	edx, DWORD PTR tv2600[ebp]
	fsub	QWORD PTR [edi-24]
	fmul	ST(0), ST(6)
	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(3), ST(0)
	fld	QWORD PTR _dx1$[ebp+esi*8]
	fmul	ST(0), ST(1)
	faddp	ST(4), ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(4), ST(0)
	fxch	ST(3)
	fstp	QWORD PTR _de2$[ebp]
	fld	QWORD PTR [edx+eax]
	fsub	QWORD PTR [eax]
	fst	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv3589[ebp]
	fld	QWORD PTR [eax]
	fadd	QWORD PTR [edx+eax]
	mov	edx, DWORD PTR tv3583[ebp]
	fsub	QWORD PTR [edx+eax]
	mov	edx, DWORD PTR tv3585[ebp]
	fsub	QWORD PTR [edx+eax]
	mov	edx, DWORD PTR tv3593[ebp]
	fmul	ST(0), ST(6)
	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(3), ST(0)
	fld	QWORD PTR [edx+eax]
	fmul	ST(0), ST(1)
	faddp	ST(4), ST(0)
	fxch	ST(3)
	fstp	QWORD PTR _de1$[ebp]
	fld	ST(0)
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fadd	QWORD PTR _de2$[ebp]
	fstp	QWORD PTR _de2$[ebp]
	fld	QWORD PTR [ecx]
	fsub	QWORD PTR [eax+8]
	fst	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv3600[ebp]
	fld	QWORD PTR [eax+8]
	fadd	QWORD PTR [ecx]
	fsub	QWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR tv3602[ebp]
	fsub	QWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR tv3595[ebp]
	fmul	ST(0), ST(6)
	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR _dd$[ebp]
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv3591[ebp]
	fmul	ST(0), ST(2)
	fadd	QWORD PTR _de1$[ebp]
	fstp	QWORD PTR _de1$[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR _de2$[ebp]
	fstp	QWORD PTR _de2$[ebp]
	fld	QWORD PTR [ecx+8]
	fsub	QWORD PTR [eax+16]
	fst	QWORD PTR [ebx+eax]
	fld	ST(3)
	fmul	ST(0), ST(4)
	faddp	ST(5), ST(0)
	fld	ST(2)

; 499  :             LL2 += dx2[j]*dx2[j];
; 500  :             rj = (yy1[j] + y2[j] - x1[j] - x2[j])/2;

	fmul	ST(0), ST(3)
	mov	ebx, DWORD PTR tv2864[ebp]

; 504  :             e1e2 += dx1[j]*dx2[j];

	add	esi, 4
	add	eax, 32					; 00000020H
	faddp	ST(5), ST(0)
	add	ecx, 32					; 00000020H
	fld	ST(1)
	add	edi, 32					; 00000020H
	fmul	ST(0), ST(2)
	faddp	ST(5), ST(0)
	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(5), ST(0)
	fxch	ST(4)
	fstp	QWORD PTR _LL2$[ebp]
	fld	QWORD PTR [eax-16]
	fadd	QWORD PTR [ecx-24]
	fsub	QWORD PTR [ebx+edi-32]
	mov	ebx, DWORD PTR tv3597[ebp]
	fsub	QWORD PTR [edi-32]
	fmul	ST(0), ST(5)
	fld	ST(0)
	fmul	ST(0), ST(1)
	fadd	QWORD PTR _dd$[ebp]
	fstp	QWORD PTR _dd$[ebp]
	fld	ST(0)
	fmul	QWORD PTR [ebx+eax-32]
	fadd	QWORD PTR _de1$[ebp]
	fst	QWORD PTR _de1$[ebp]
	fld	ST(5)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR _de2$[ebp]
	fst	QWORD PTR _de2$[ebp]
	fld	QWORD PTR _dx1$[ebp+esi*8-32]
	fmulp	ST(5), ST(0)
	fxch	ST(4)
	fadd	QWORD PTR _e1e2$[ebp]
	fld	QWORD PTR [edx+eax-32]
	mov	edx, DWORD PTR tv3595[ebp]
	fmulp	ST(4), ST(0)
	faddp	ST(3), ST(0)
	fld	QWORD PTR [edx+eax-32]
	mov	edx, DWORD PTR _web+616
	fmulp	ST(2), ST(0)
	add	edx, -3					; fffffffdH
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fxch	ST(3)
	fmul	QWORD PTR [ebx+eax-32]
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR _e1e2$[ebp]
	fld	QWORD PTR _dd$[ebp]
	fld	QWORD PTR _LL2$[ebp]
	fxch	ST(3)
	fxch	ST(1)
	cmp	esi, edx
	jl	$LN46@sin_knot_e
	mov	edi, DWORD PTR tv1278[ebp]
	mov	edx, DWORD PTR _y2$[ebp]
	mov	ebx, DWORD PTR _yy1$[ebp]
$LC42@sin_knot_e:

; 495  :       for ( j = 0 ; j < SDIM ; j++ )

	cmp	esi, DWORD PTR _web+616
	jge	$LN72@sin_knot_e
	mov	ecx, edx
	lea	eax, DWORD PTR [edx+esi*8]
	sub	ebx, edx
	mov	edx, DWORD PTR _x1$[ebp]
	neg	ecx
	add	edx, ecx
	mov	DWORD PTR tv3600[ebp], edx
	mov	edx, DWORD PTR _x2$[ebp]
	add	edx, ecx
	mov	DWORD PTR tv3602[ebp], edx
	mov	edx, DWORD PTR _web+616
	lea	edi, DWORD PTR _dx2$[ebp+ecx]
	lea	ecx, DWORD PTR _dx1$[ebp+ecx]
	sub	edx, esi
$LC4@sin_knot_e:

; 496  :       {
; 497  :             REAL rj;
; 498  :             dx2[j] = y2[j] - yy1[j];

	fld	QWORD PTR [eax]

; 499  :             LL2 += dx2[j]*dx2[j];
; 500  :             rj = (yy1[j] + y2[j] - x1[j] - x2[j])/2;

	mov	esi, DWORD PTR tv3600[ebp]
	fsub	QWORD PTR [ebx+eax]
	add	eax, 8
	dec	edx
	fst	QWORD PTR [edi+eax-8]
	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(5), ST(0)
	fld	QWORD PTR [eax-8]
	fadd	QWORD PTR [ebx+eax-8]
	fsub	QWORD PTR [esi+eax-8]
	mov	esi, DWORD PTR tv3602[ebp]
	fsub	QWORD PTR [esi+eax-8]
	fmul	ST(0), ST(6)

; 501  :             dd += rj*rj;

	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(3), ST(0)

; 502  :             de1 += rj*dx1[j];

	fld	QWORD PTR [ecx+eax-8]
	fmul	ST(0), ST(1)
	faddp	ST(4), ST(0)

; 503  :             de2 += rj*dx2[j];

	fmul	ST(0), ST(1)
	faddp	ST(4), ST(0)

; 504  :             e1e2 += dx1[j]*dx2[j];

	fmul	QWORD PTR [ecx+eax-8]
	fadd	QWORD PTR _e1e2$[ebp]
	fstp	QWORD PTR _e1e2$[ebp]
	jne	SHORT $LC4@sin_knot_e

; 495  :       for ( j = 0 ; j < SDIM ; j++ )

	mov	edi, DWORD PTR tv1278[ebp]
	fstp	ST(4)

; 503  :             de2 += rj*dx2[j];

	fxch	ST(1)
	fstp	QWORD PTR _de2$[ebp]
	fstp	QWORD PTR _de1$[ebp]
	fxch	ST(1)
	fstp	QWORD PTR _dd$[ebp]
	jmp	SHORT $LN41@sin_knot_e
$LN72@sin_knot_e:

; 495  :       for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(0)
	fstp	ST(1)
	fstp	ST(2)
	fstp	ST(1)
$LN41@sin_knot_e:

; 505  :       }
; 506  :       L2 = sqrt(LL2); L1L2 = L1*L2;

	call	__CIsqrt
	fmul	QWORD PTR _L1$[ebp]
	fst	QWORD PTR _L1L2$[ebp]

; 507  :       t = (2*de1*de2/dd - e1e2)/L1L2;

	fld	QWORD PTR _de1$[ebp]
	fadd	ST(0), ST(0)
	fmul	QWORD PTR _de2$[ebp]
	fdiv	QWORD PTR _dd$[ebp]
	fsub	QWORD PTR _e1e2$[ebp]
	fdivrp	ST(1), ST(0)

; 508  :       s = 1-t*t; if (s<=0.) continue;

	fmul	ST(0), ST(0)
	fld1
	fsubrp	ST(1), ST(0)
	fldz
	fcom	ST(1)
	fnstsw	ax
	test	ah, 1
	je	SHORT $LN78@sin_knot_e
	fstp	ST(0)

; 509  :       energy += L1L2/dd * sqrt(s); /* 0 for cocircular edges */

	call	__CIsqrt
	fld	QWORD PTR _L1L2$[ebp]
	fdiv	QWORD PTR _dd$[ebp]
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR _energy$[ebp]
	fstp	QWORD PTR _energy$[ebp]
	fld	QWORD PTR __real@3fe0000000000000
	fldz
	jmp	SHORT $LN9@sin_knot_e
$LN78@sin_knot_e:

; 508  :       s = 1-t*t; if (s<=0.) continue;

	fstp	ST(1)

; 509  :       energy += L1L2/dd * sqrt(s); /* 0 for cocircular edges */

	fld	QWORD PTR __real@3fe0000000000000
	fxch	ST(1)
$LN9@sin_knot_e:

; 490  :   FOR_ALL_EDGES(e2)

	mov	ecx, DWORD PTR [edi]
	test	ecx, 268435456				; 10000000H
	jne	$LN47@sin_knot_e
	fstp	ST(0)
	fstp	ST(0)
$LN45@sin_knot_e:

; 510  :     }
; 511  :   return 2*energy;
; 512  : } // end sin_knot_energy()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _energy$[ebp]
	pop	edi
	fadd	ST(0), ST(0)
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_sin_knot_energy ENDP
_TEXT	ENDS
PUBLIC	_e_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_sin_knot_energy_gradient
; Function compile flags: /Ogtp
;	COMDAT _sin_knot_energy_gradient
_TEXT	SEGMENT
_LL1$ = -320						; size = 8
_L1$ = -312						; size = 8
tv4541 = -304						; size = 4
tv4543 = -300						; size = 4
tv4551 = -296						; size = 4
tv4547 = -292						; size = 4
tv4555 = -288						; size = 4
_e1$ = -284						; size = 4
_e_info$GSCopy$ = -280					; size = 4
tv4549 = -276						; size = 4
tv4545 = -272						; size = 4
tv4553 = -268						; size = 4
_energy$ = -264						; size = 8
tv3295 = -256						; size = 4
tv4559 = -252						; size = 4
tv3786 = -248						; size = 8
tv1863 = -248						; size = 8
_s$ = -248						; size = 8
_e1e2$ = -240						; size = 8
tv3820 = -232						; size = 8
tv1866 = -232						; size = 8
_L1L2$ = -232						; size = 8
tv4557 = -224						; size = 4
_de1$ = -220						; size = 8
_de2$ = -212						; size = 8
_dd$ = -204						; size = 8
tv1870 = -196						; size = 8
_t$ = -196						; size = 8
_LL2$ = -196						; size = 8
tv4624 = -188						; size = 8
tv1875 = -188						; size = 8
_L2$ = -188						; size = 8
tv4564 = -180						; size = 4
tv4570 = -176						; size = 4
_yy1$ = -176						; size = 4
tv4561 = -172						; size = 4
tv2387 = -172						; size = 4
tv2379 = -168						; size = 4
tv1639 = -168						; size = 4
tv4566 = -164						; size = 4
tv4563 = -164						; size = 4
_x2$ = -160						; size = 4
_x1$ = -156						; size = 4
tv2383 = -152						; size = 4
tv1650 = -152						; size = 4
_y2$ = -152						; size = 4
_dx2$ = -148						; size = 48
_r$ = -100						; size = 48
_dx1$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_sin_knot_energy_gradient PROC				; COMDAT

; 526  : { edge_id e1 = e_info->id,e2;

	push	ebp
	mov	ebp, esp
	sub	esp, 320				; 00000140H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	edx, DWORD PTR _e_info$[ebp]

; 527  :   REAL *x1,*x2,*yy1,*y2; /* end coordinates */
; 528  :   REAL energy = 0.0;

	fldz
	push	ebx
	fst	QWORD PTR _energy$[ebp]
	push	esi
	mov	esi, DWORD PTR [edx]
	push	edi
	mov	DWORD PTR _e_info$GSCopy$[ebp], edx
	mov	DWORD PTR _e1$[ebp], esi

; 529  :   REAL dx1[MAXCOORD];
; 530  :   REAL dx2[MAXCOORD];
; 531  :   REAL r[MAXCOORD];
; 532  :   REAL LL1,L1,LL2,L2,dd,de1,de2;
; 533  :   REAL e1e2, L1L2, s, t;
; 534  :   REAL en, fac;
; 535  :   int i,j;
; 536  : 
; 537  :   for ( i = 0 ; i < 2 ; i++ )

	xor	ecx, ecx
$LN22@sin_knot_e@2:

; 538  :      for ( j = 0 ; j < SDIM ; j++ ) e_info->grad[i][j] = 0.0;

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN21@sin_knot_e@2
$LN19@sin_knot_e@2:
	mov	edi, DWORD PTR [edx+1336]
	mov	edi, DWORD PTR [ecx+edi]
	fst	QWORD PTR [edi+eax*8]
	inc	eax
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN19@sin_knot_e@2
$LN21@sin_knot_e@2:

; 529  :   REAL dx1[MAXCOORD];
; 530  :   REAL dx2[MAXCOORD];
; 531  :   REAL r[MAXCOORD];
; 532  :   REAL LL1,L1,LL2,L2,dd,de1,de2;
; 533  :   REAL e1e2, L1L2, s, t;
; 534  :   REAL en, fac;
; 535  :   int i,j;
; 536  : 
; 537  :   for ( i = 0 ; i < 2 ; i++ )

	add	ecx, 4
	cmp	ecx, 8
	jl	SHORT $LN22@sin_knot_e@2

; 539  :   x1 = get_coord(get_edge_tailv(e1));

	mov	edi, esi
	fstp	ST(0)
	shr	edi, 27					; 0000001bH
	and	esi, 134217727				; 07ffffffH
	and	edi, 1
	je	SHORT $LN26@sin_knot_e@2
	mov	eax, DWORD PTR _web+124
	mov	edx, DWORD PTR [eax+esi*4]
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR _web+216
	mov	eax, DWORD PTR [eax+ecx+304]
	add	edx, eax
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN25@sin_knot_e@2
$LN26@sin_knot_e@2:
	mov	ecx, DWORD PTR _web+124
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR _web+216
	mov	eax, DWORD PTR [eax+ecx+304]
	add	edx, eax
	mov	eax, DWORD PTR [edx]
$LN25@sin_knot_e@2:
	mov	esi, DWORD PTR _web+104
	mov	ecx, DWORD PTR [esi+ecx+64]
	mov	ebx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ebx+eax*4]
	add	esi, ecx
	mov	DWORD PTR _x1$[ebp], esi

; 540  :   x2 = get_coord(get_edge_headv(e1));

	test	edi, edi
	je	SHORT $LN30@sin_knot_e@2
	mov	eax, DWORD PTR [edx]
	jmp	SHORT $LN29@sin_knot_e@2
$LN30@sin_knot_e@2:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
$LN29@sin_knot_e@2:
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ebx+eax*4]
	add	ebx, ecx

; 541  :   for ( j = 0 ; j < SDIM ; j++ ) dx1[j] = x2[j] - x1[j];

	xor	edx, edx
	cmp	DWORD PTR _web+616, 4
	mov	DWORD PTR _x2$[ebp], ebx
	jl	$LC54@sin_knot_e@2
	lea	edi, DWORD PTR _dx1$[ebp]
	sub	edi, esi
	mov	DWORD PTR tv2379[ebp], edi
	lea	edi, DWORD PTR _dx1$[ebp+8]
	sub	edi, esi
	mov	DWORD PTR tv2383[ebp], edi
	lea	ecx, DWORD PTR [ebx+24]
	lea	edi, DWORD PTR _dx1$[ebp+16]
	sub	ebx, esi
	sub	edi, esi
	lea	eax, DWORD PTR [esi+8]
	mov	DWORD PTR tv2387[ebp], edi
	npad	9
$LL55@sin_knot_e@2:
	fld	QWORD PTR [ecx-24]
	mov	edi, DWORD PTR tv2379[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _dx1$[ebp+edx*8-32]
	fld	QWORD PTR [ebx+eax-32]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv2383[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv2387[ebp]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR _web+616
	add	edi, -3					; fffffffdH
	cmp	edx, edi
	jl	SHORT $LL55@sin_knot_e@2
	mov	ebx, DWORD PTR _x2$[ebp]
$LC54@sin_knot_e@2:
	cmp	edx, DWORD PTR _web+616
	jge	SHORT $LN53@sin_knot_e@2
	mov	ecx, DWORD PTR _web+616
	lea	edi, DWORD PTR _dx1$[ebp]
	sub	ebx, esi
	sub	edi, esi
	lea	eax, DWORD PTR [esi+edx*8]
	sub	ecx, edx
$LC16@sin_knot_e@2:
	fld	QWORD PTR [eax+ebx]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax+edi-8]
	jne	SHORT $LC16@sin_knot_e@2
$LN53@sin_knot_e@2:

; 542  :   LL1 = SDIM_dot(dx1,dx1);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _dx1$[ebp]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	fst	QWORD PTR _LL1$[ebp]
	add	esp, 12					; 0000000cH

; 543  :   L1 = sqrt(LL1);

	call	__CIsqrt
	fstp	QWORD PTR _L1$[ebp]

; 544  :   FOR_ALL_EDGES(e2)

	mov	ecx, DWORD PTR _web+160
	test	ecx, 268435456				; 10000000H
	je	$LN59@sin_knot_e@2
	fld	QWORD PTR __real@3fe0000000000000
	fldz
$LN13@sin_knot_e@2:
	mov	edx, DWORD PTR _web+124
	mov	edi, ecx
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	edx, DWORD PTR [edi+edx]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	xor	esi, esi
	or	eax, esi
	mov	DWORD PTR tv1639[ebp], edi
	je	$LN12@sin_knot_e@2

; 545  :     { if ( e2 == e1 ) continue; /* each ordered pair once */

	cmp	ecx, DWORD PTR _e1$[ebp]
	je	$LN12@sin_knot_e@2

; 546  :       yy1 = get_coord(get_edge_tailv(e2));

	mov	eax, DWORD PTR _web+216
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR tv1650[ebp], ecx
	mov	ecx, DWORD PTR _dymem
	mov	ebx, DWORD PTR [eax+ecx+304]
	je	SHORT $LN34@sin_knot_e@2
	mov	ecx, DWORD PTR _web+636
	add	ebx, edx
	mov	eax, DWORD PTR [ebx+ecx*4]
	jmp	SHORT $LN33@sin_knot_e@2
$LN34@sin_knot_e@2:
	mov	eax, DWORD PTR [ebx+edx]
	add	ebx, edx
$LN33@sin_knot_e@2:
	mov	ecx, DWORD PTR _web+104
	mov	edx, DWORD PTR _dymem
	mov	esi, DWORD PTR [ecx+edx+64]
	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	add	edx, esi

; 547  :       y2 = get_coord(get_edge_headv(e2));

	cmp	DWORD PTR tv1650[ebp], 0
	mov	DWORD PTR _yy1$[ebp], edx
	je	SHORT $LN38@sin_knot_e@2
	mov	eax, DWORD PTR [ebx]
	jmp	SHORT $LN37@sin_knot_e@2
$LN38@sin_knot_e@2:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [ebx+eax*4]
$LN37@sin_knot_e@2:

; 548  :       LL2 = dd = de1 = de2 = e1e2 = 0.0;

	fst	QWORD PTR _e1e2$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ecx+eax*4]
	fld	ST(0)
	fst	QWORD PTR _de2$[ebp]
	add	ebx, esi
	fld	ST(1)

; 549  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	cmp	DWORD PTR _web+616, 4
	fst	QWORD PTR _de1$[ebp]
	fld	ST(2)
	mov	DWORD PTR _y2$[ebp], ebx
	fst	QWORD PTR _dd$[ebp]
	jl	$LC57@sin_knot_e@2

; 557  :             e1e2 += dx1[j]*dx2[j];

	lea	ecx, DWORD PTR [ebx+16]
	fstp	ST(0)
	sub	ebx, edx
	fstp	ST(1)
	mov	DWORD PTR tv3295[ebp], ebx
	fstp	ST(0)
	mov	ebx, DWORD PTR _x1$[ebp]
	lea	eax, DWORD PTR [edx+8]
	neg	edx
	add	ebx, edx
	mov	DWORD PTR tv4541[ebp], ebx
	mov	ebx, DWORD PTR _x2$[ebp]
	add	ebx, edx
	mov	DWORD PTR tv4543[ebp], ebx
	lea	ebx, DWORD PTR _dx2$[ebp+edx]
	mov	DWORD PTR tv4545[ebp], ebx
	lea	ebx, DWORD PTR _r$[ebp+edx]
	mov	DWORD PTR tv4547[ebp], ebx
	lea	ebx, DWORD PTR _dx2$[ebp+edx+8]
	mov	DWORD PTR tv4549[ebp], ebx
	lea	ebx, DWORD PTR _r$[ebp+edx+8]
	mov	edi, DWORD PTR _x2$[ebp]
	mov	DWORD PTR tv4551[ebp], ebx
	lea	ebx, DWORD PTR _dx2$[ebp+edx+16]
	mov	DWORD PTR tv4553[ebp], ebx
	lea	ebx, DWORD PTR _r$[ebp+edx+16]
	mov	DWORD PTR tv4555[ebp], ebx
	lea	ebx, DWORD PTR _dx1$[ebp+edx]
	mov	DWORD PTR tv4557[ebp], ebx
	lea	ebx, DWORD PTR _dx1$[ebp+edx+8]
	lea	edx, DWORD PTR _dx1$[ebp+edx+16]
	mov	DWORD PTR tv4561[ebp], edx
	mov	edx, DWORD PTR _y2$[ebp]
	neg	edx
	mov	DWORD PTR tv4563[ebp], edx
	add	edx, DWORD PTR _x1$[ebp]
	mov	DWORD PTR tv4559[ebp], ebx
	mov	ebx, DWORD PTR _x2$[ebp]
	mov	DWORD PTR tv4564[ebp], edx
	mov	edx, DWORD PTR tv4563[ebp]
	add	edx, ebx
	mov	DWORD PTR tv4566[ebp], edx
	mov	edx, DWORD PTR _x1$[ebp]
	add	edi, 24					; 00000018H
	sub	edx, ebx
	jmp	SHORT $LN58@sin_knot_e@2
	npad	7
$LL88@sin_knot_e@2:
	fstp	ST(0)
	fstp	ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fld	QWORD PTR _LL2$[ebp]
$LN58@sin_knot_e@2:

; 552  :             LL2 += dx2[j]*dx2[j];
; 553  :             r[j] = (yy1[j] + y2[j] - x1[j] - x2[j])/2;

	fld	QWORD PTR [ecx-16]
	mov	ebx, DWORD PTR _x1$[ebp]
	fsub	QWORD PTR [eax-8]
	fst	QWORD PTR _dx2$[ebp+esi*8]
	fld	QWORD PTR [ecx-16]
	fadd	QWORD PTR [eax-8]
	fsub	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR tv3295[ebp]
	fsub	QWORD PTR [edi-24]
	fmul	ST(0), ST(3)
	fst	QWORD PTR _r$[ebp+esi*8]
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv4545[ebp]
	fsub	QWORD PTR [eax]
	fst	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv3295[ebp]
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv4541[ebp]
	fadd	QWORD PTR [eax]
	fsub	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv4543[ebp]
	fsub	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv4547[ebp]
	fmul	ST(0), ST(5)
	fst	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv4549[ebp]
	fld	QWORD PTR [ecx]
	fsub	QWORD PTR [eax+8]
	fst	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv4564[ebp]
	fld	QWORD PTR [ecx]
	fadd	QWORD PTR [eax+8]
	fsub	QWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR tv4566[ebp]
	fsub	QWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR tv4551[ebp]
	fmulp	ST(7), ST(0)
	fxch	ST(6)
	fst	QWORD PTR tv4624[ebp]
	fstp	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv4553[ebp]
	fld	QWORD PTR [ecx+8]
	fsub	QWORD PTR [eax+16]
	fst	QWORD PTR tv3786[ebp]
	fst	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv4555[ebp]
	fld	ST(4)
	fmul	ST(0), ST(5)
	faddp	ST(6), ST(0)
	fld	ST(2)
	fmul	ST(0), ST(3)
	faddp	ST(6), ST(0)
	fld	ST(6)
	fmul	ST(0), ST(7)
	faddp	ST(6), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(5), ST(0)
	fxch	ST(4)
	fstp	QWORD PTR _LL2$[ebp]
	fld	QWORD PTR [ecx+8]
	fadd	QWORD PTR [eax+16]
	fsub	QWORD PTR [edx+edi]
	fsub	QWORD PTR [edi]
	fmul	QWORD PTR __real@3fe0000000000000
	fst	QWORD PTR tv3820[ebp]
	fstp	QWORD PTR [ebx+eax]

; 554  :             dd += r[j]*r[j];

	fld	ST(1)
	fmul	ST(0), ST(2)
	fadd	QWORD PTR _dd$[ebp]
	fld	ST(4)
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv4624[ebp]
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv3820[ebp]
	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _dd$[ebp]

; 555  :             de1 += r[j]*dx1[j];

	mov	ebx, DWORD PTR tv4557[ebp]
	fld	ST(2)
	fmul	QWORD PTR _dx1$[ebp+esi*8]

; 557  :             e1e2 += dx1[j]*dx2[j];

	add	esi, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fadd	QWORD PTR _de1$[ebp]
	add	edi, 32					; 00000020H
	fld	ST(5)
	fmul	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv4559[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv4624[ebp]
	fmul	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv4561[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv4557[ebp]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fst	QWORD PTR _de1$[ebp]
	fld	ST(4)
	fmulp	ST(4), ST(0)
	fxch	ST(3)
	fadd	QWORD PTR _de2$[ebp]
	fld	ST(2)
	fmulp	ST(6), ST(0)
	faddp	ST(5), ST(0)
	fld	ST(5)
	fmul	QWORD PTR tv4624[ebp]
	faddp	ST(5), ST(0)
	fld	QWORD PTR tv3786[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(5)
	faddp	ST(1), ST(0)
	fst	QWORD PTR _de2$[ebp]
	fxch	ST(3)
	fmul	QWORD PTR _dx1$[ebp+esi*8-32]
	fadd	QWORD PTR _e1e2$[ebp]
	fxch	ST(1)
	fmul	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv4559[ebp]
	faddp	ST(1), ST(0)
	fxch	ST(4)
	fmul	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv4561[ebp]
	faddp	ST(4), ST(0)
	fld	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR _web+616
	fmulp	ST(3), ST(0)
	add	ebx, -3					; fffffffdH
	fxch	ST(3)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _e1e2$[ebp]
	cmp	esi, ebx
	jl	$LL88@sin_knot_e@2
	fld	QWORD PTR _dd$[ebp]
	mov	ebx, DWORD PTR _y2$[ebp]
	fld	QWORD PTR __real@3fe0000000000000
	mov	edi, DWORD PTR tv1639[ebp]
	fld	QWORD PTR _LL2$[ebp]
	mov	edx, DWORD PTR _yy1$[ebp]
	fxch	ST(1)
	fxch	ST(4)
	fxch	ST(1)
	fxch	ST(3)
	fxch	ST(2)
$LC57@sin_knot_e@2:

; 549  :       for ( j = 0 ; j < SDIM ; j++ )

	cmp	esi, DWORD PTR _web+616
	jge	$LN92@sin_knot_e@2
	mov	ecx, ebx
	lea	eax, DWORD PTR [ebx+esi*8]
	sub	edx, ebx
	mov	ebx, DWORD PTR _x1$[ebp]
	neg	ecx
	add	ebx, ecx
	mov	DWORD PTR tv4564[ebp], ebx
	mov	ebx, DWORD PTR _x2$[ebp]
	add	ebx, ecx
	mov	DWORD PTR tv4566[ebp], ebx
	lea	ebx, DWORD PTR _r$[ebp+ecx]
	mov	DWORD PTR tv4570[ebp], ebx
	mov	ebx, DWORD PTR _web+616
	lea	edi, DWORD PTR _dx2$[ebp+ecx]
	lea	ecx, DWORD PTR _dx1$[ebp+ecx]
	sub	ebx, esi
$LC7@sin_knot_e@2:

; 550  :       {
; 551  :             dx2[j] = y2[j] - yy1[j];

	fld	QWORD PTR [eax]

; 552  :             LL2 += dx2[j]*dx2[j];
; 553  :             r[j] = (yy1[j] + y2[j] - x1[j] - x2[j])/2;

	mov	esi, DWORD PTR tv4564[ebp]
	fsub	QWORD PTR [eax+edx]
	add	eax, 8
	dec	ebx
	fst	QWORD PTR [eax+edi-8]
	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(5), ST(0)
	fld	QWORD PTR [eax-8]
	fadd	QWORD PTR [eax+edx-8]
	fsub	QWORD PTR [eax+esi-8]
	mov	esi, DWORD PTR tv4566[ebp]
	fsub	QWORD PTR [eax+esi-8]
	mov	esi, DWORD PTR tv4570[ebp]
	fmul	ST(0), ST(6)
	fst	QWORD PTR [eax+esi-8]

; 554  :             dd += r[j]*r[j];

	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(3), ST(0)

; 555  :             de1 += r[j]*dx1[j];

	fld	ST(0)
	fmul	QWORD PTR [eax+ecx-8]
	faddp	ST(4), ST(0)

; 556  :             de2 += r[j]*dx2[j];

	fmul	ST(0), ST(1)
	faddp	ST(4), ST(0)

; 557  :             e1e2 += dx1[j]*dx2[j];

	fmul	QWORD PTR [eax+ecx-8]
	fadd	QWORD PTR _e1e2$[ebp]
	fstp	QWORD PTR _e1e2$[ebp]
	jne	SHORT $LC7@sin_knot_e@2

; 549  :       for ( j = 0 ; j < SDIM ; j++ )

	mov	edi, DWORD PTR tv1639[ebp]
	fstp	ST(4)

; 556  :             de2 += r[j]*dx2[j];

	fxch	ST(1)
	fstp	QWORD PTR _de2$[ebp]
	fstp	QWORD PTR _de1$[ebp]
	fxch	ST(1)
	fstp	QWORD PTR _dd$[ebp]
	jmp	SHORT $LN56@sin_knot_e@2
$LN92@sin_knot_e@2:

; 549  :       for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(0)
	fstp	ST(1)
	fstp	ST(2)
	fstp	ST(1)
$LN56@sin_knot_e@2:

; 558  :       }
; 559  :       L2 = sqrt(LL2); L1L2 = L1*L2;

	call	__CIsqrt
	fst	QWORD PTR _L2$[ebp]
	fmul	QWORD PTR _L1$[ebp]
	fst	QWORD PTR _L1L2$[ebp]

; 560  :       t = (2*de1*de2/dd - e1e2)/L1L2;

	fld	QWORD PTR _de1$[ebp]
	fadd	ST(0), ST(0)
	fmul	QWORD PTR _de2$[ebp]
	fdiv	QWORD PTR _dd$[ebp]
	fsub	QWORD PTR _e1e2$[ebp]
	fdivrp	ST(1), ST(0)
	fst	QWORD PTR _t$[ebp]

; 561  :       s = 1-t*t; if (s<=0.) continue;

	fmul	ST(0), ST(0)
	fld1
	fsubrp	ST(1), ST(0)
	fst	QWORD PTR _s$[ebp]
	fldz
	fcom	ST(1)
	fnstsw	ax
	test	ah, 1
	je	$LN98@sin_knot_e@2
	fstp	ST(0)

; 562  :       en = sqrt(s)/dd; fac = t*en/s;

	call	__CIsqrt
	fld	QWORD PTR _dd$[ebp]
	fdiv	ST(1), ST(0)

; 563  :       energy += (en = en*L1L2); /* 0 for cocircular edges */
; 564  : 
; 565  :       de1 /= dd; de2 /= dd;
; 566  :       for ( j = 0 ; j < SDIM ; j++ ) 

	xor	eax, eax
	fld	ST(1)
	fmul	QWORD PTR _t$[ebp]
	fdiv	QWORD PTR _s$[ebp]
	fxch	ST(2)
	fmul	QWORD PTR _L1L2$[ebp]
	fld	QWORD PTR _energy$[ebp]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR _energy$[ebp]
	fld	QWORD PTR _de1$[ebp]
	fdiv	ST(0), ST(2)
	fld	QWORD PTR _de2$[ebp]
	fdiv	ST(0), ST(3)
	cmp	DWORD PTR _web+616, eax
	jle	$LN101@sin_knot_e@2
	fld	ST(1)
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(2)
	fld	ST(4)
	fdivrp	ST(6), ST(0)
	fxch	ST(5)
	fstp	QWORD PTR tv1863[ebp]
	fld	ST(1)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv1866[ebp]
	fld	QWORD PTR _t$[ebp]
	fmul	QWORD PTR _L2$[ebp]
	fdiv	QWORD PTR _L1$[ebp]
	fstp	QWORD PTR tv1870[ebp]
	fxch	ST(3)
	fdiv	QWORD PTR _LL1$[ebp]
	fstp	QWORD PTR tv1875[ebp]
$LN63@sin_knot_e@2:

; 567  :       {
; 568  :          register REAL common = 
; 569  :               en/dd*r[j] + fac*(de2*dx1[j] + de1*dx2[j] - 2*de1*de2*r[j]);

	fld	QWORD PTR _dx1$[ebp+eax*8]

; 570  :          register REAL oppose =
; 571  :               en/LL1*dx1[j] + fac*(dx2[j] - 2*de2*r[j] + t*L2/L1*dx1[j]);
; 572  :          e_info->grad[0][j] += 2*(common - oppose);

	mov	edx, DWORD PTR _e_info$GSCopy$[ebp]
	fmul	ST(0), ST(1)
	mov	ecx, DWORD PTR [edx+1336]
	fld	QWORD PTR _dx2$[ebp+eax*8]
	mov	ecx, DWORD PTR [ecx]
	fmul	ST(0), ST(3)
	lea	ecx, DWORD PTR [ecx+eax*8]
	faddp	ST(1), ST(0)
	fld	ST(4)
	fmul	QWORD PTR _r$[ebp+eax*8]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fld	QWORD PTR tv1863[ebp]
	fmul	QWORD PTR _r$[ebp+eax*8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv1866[ebp]
	fmul	QWORD PTR _r$[ebp+eax*8]
	fsubr	QWORD PTR _dx2$[ebp+eax*8]
	fld	QWORD PTR tv1870[ebp]
	fmul	QWORD PTR _dx1$[ebp+eax*8]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(6)
	fld	QWORD PTR tv1875[ebp]
	fmul	QWORD PTR _dx1$[ebp+eax*8]
	faddp	ST(1), ST(0)
	fld	ST(1)
	fsub	ST(0), ST(1)
	fmul	ST(0), ST(5)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+1336]
	mov	ecx, DWORD PTR [edx+4]

; 573  :          e_info->grad[1][j] += 2*(common + oppose);

	faddp	ST(1), ST(0)
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fmul	ST(0), ST(3)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	$LN63@sin_knot_e@2

; 563  :       energy += (en = en*L1L2); /* 0 for cocircular edges */
; 564  : 
; 565  :       de1 /= dd; de2 /= dd;
; 566  :       for ( j = 0 ; j < SDIM ; j++ ) 

	fstp	ST(2)
	fstp	ST(1)
	fstp	ST(2)
	fstp	ST(1)
	fstp	ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fldz
	jmp	SHORT $LN12@sin_knot_e@2
$LN98@sin_knot_e@2:

; 561  :       s = 1-t*t; if (s<=0.) continue;

	fstp	ST(1)

; 563  :       energy += (en = en*L1L2); /* 0 for cocircular edges */
; 564  : 
; 565  :       de1 /= dd; de2 /= dd;
; 566  :       for ( j = 0 ; j < SDIM ; j++ ) 

	fld	QWORD PTR __real@3fe0000000000000
	fxch	ST(1)
$LN12@sin_knot_e@2:

; 544  :   FOR_ALL_EDGES(e2)

	mov	edx, DWORD PTR _web+124
	mov	eax, DWORD PTR [edi+edx]
	mov	ecx, DWORD PTR [eax]
	test	ecx, 268435456				; 10000000H
	jne	$LN13@sin_knot_e@2
	fstp	ST(0)
	fstp	ST(0)
$LN59@sin_knot_e@2:

; 574  :       }
; 575  :     }
; 576  : 
; 577  :   return energy;  /* since doing all pairs */
; 578  : } // end sin_knot_energy_gradient()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _energy$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN101@sin_knot_e@2:

; 563  :       energy += (en = en*L1L2); /* 0 for cocircular edges */
; 564  : 
; 565  :       de1 /= dd; de2 /= dd;
; 566  :       for ( j = 0 ; j < SDIM ; j++ ) 

	fstp	ST(3)
	fstp	ST(1)
	fstp	ST(1)
	fstp	ST(1)
	fstp	ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fldz
	jmp	SHORT $LN12@sin_knot_e@2
_sin_knot_energy_gradient ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@BBLLCPNF@surface_cos_power?$AA@	; `string'
PUBLIC	__real@4010000000000000
PUBLIC	??_C@_0BD@CINEMMIH@surface_knot_power?$AA@	; `string'
PUBLIC	_sphere_knot_energy_init
EXTRN	_add_global:PROC
EXTRN	_lookup_global:PROC
_BSS	SEGMENT
_cpower	DQ	01H DUP (?)
_spower	DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BC@BBLLCPNF@surface_cos_power?$AA@
CONST	SEGMENT
??_C@_0BC@BBLLCPNF@surface_cos_power?$AA@ DB 'surface_cos_power', 00H ; `string'
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT ??_C@_0BD@CINEMMIH@surface_knot_power?$AA@
CONST	SEGMENT
??_C@_0BD@CINEMMIH@surface_knot_power?$AA@ DB 'surface_knot_power', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _sphere_knot_energy_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_sphere_knot_energy_init PROC				; COMDAT

; 612  :   exponent_param = lookup_global(SURF_KNOTPOW_NAME);

	push	OFFSET ??_C@_0BD@CINEMMIH@surface_knot_power?$AA@
	call	_lookup_global
	add	esp, 4
	mov	DWORD PTR _exponent_param, eax

; 613  :   if ( exponent_param < 0 ) /* missing, so add */

	test	eax, eax
	jns	$LN2@sphere_kno

; 614  :         { exponent_param = add_global(SURF_KNOTPOW_NAME);

	push	OFFSET ??_C@_0BD@CINEMMIH@surface_knot_power?$AA@
	call	_add_global

; 615  :           globals(exponent_param)->value.real = 4.0;  /* default */

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	add	esp, 4
	mov	DWORD PTR _exponent_param, eax
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN5@sphere_kno
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN7@sphere_kno
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN6@sphere_kno
$LN7@sphere_kno:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN5@sphere_kno
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN6@sphere_kno
$LN5@sphere_kno:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN6@sphere_kno:
	fld	QWORD PTR __real@4010000000000000
	fstp	QWORD PTR [eax+64]

; 616  :           globals(exponent_param)->flags |=  ORDINARY_PARAM | RECALC_PARAMETER | ALWAYS_RECALC;

	mov	eax, DWORD PTR _exponent_param
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN11@sphere_kno
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN13@sphere_kno
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN12@sphere_kno
$LN13@sphere_kno:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN11@sphere_kno
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN12@sphere_kno
$LN11@sphere_kno:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN12@sphere_kno:
	or	DWORD PTR [eax+192], 134217737		; 08000009H
	mov	eax, DWORD PTR _exponent_param
$LN2@sphere_kno:

; 617  :         }
; 618  :   spower = globals(exponent_param)->value.real/2;

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN17@sphere_kno
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN19@sphere_kno
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN18@sphere_kno
$LN19@sphere_kno:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN17@sphere_kno
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN18@sphere_kno
$LN17@sphere_kno:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN18@sphere_kno:
	fld	QWORD PTR [eax+64]

; 619  :   cos_exponent_param = lookup_global(SURF_COSPOW_NAME);

	push	OFFSET ??_C@_0BC@BBLLCPNF@surface_cos_power?$AA@
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _spower
	call	_lookup_global
	add	esp, 4
	mov	DWORD PTR _cos_exponent_param, eax

; 620  :   if ( cos_exponent_param < 0 ) /* missing, so add */

	test	eax, eax
	jns	$LN1@sphere_kno

; 621  :         { cos_exponent_param = add_global(SURF_COSPOW_NAME);

	push	OFFSET ??_C@_0BC@BBLLCPNF@surface_cos_power?$AA@
	call	_add_global

; 622  :           globals(cos_exponent_param)->value.real = 1.0;  /* default */

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	add	esp, 4
	mov	DWORD PTR _cos_exponent_param, eax
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN23@sphere_kno
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN25@sphere_kno
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN24@sphere_kno
$LN25@sphere_kno:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN23@sphere_kno
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN24@sphere_kno
$LN23@sphere_kno:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN24@sphere_kno:
	fld1
	fstp	QWORD PTR [eax+64]

; 623  :           globals(cos_exponent_param)->flags |= ORDINARY_PARAM|RECALC_PARAMETER | ALWAYS_RECALC;

	mov	eax, DWORD PTR _cos_exponent_param
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN29@sphere_kno
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN31@sphere_kno
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN30@sphere_kno
$LN31@sphere_kno:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN29@sphere_kno
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN30@sphere_kno
$LN29@sphere_kno:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN30@sphere_kno:
	or	DWORD PTR [eax+192], 134217737		; 08000009H
	mov	eax, DWORD PTR _cos_exponent_param
$LN1@sphere_kno:

; 624  :         }
; 625  :   cpower = globals(cos_exponent_param)->value.real;

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN35@sphere_kno
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN37@sphere_kno
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+64]
	fstp	QWORD PTR _cpower

; 626  : } // end sphere_knot_energy_init()

	ret	0
$LN37@sphere_kno:

; 624  :         }
; 625  :   cpower = globals(cos_exponent_param)->value.real;

	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN35@sphere_kno
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [eax+64]
	fstp	QWORD PTR _cpower

; 626  : } // end sphere_knot_energy_init()

	ret	0
$LN35@sphere_kno:

; 624  :         }
; 625  :   cpower = globals(cos_exponent_param)->value.real;

	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
	fld	QWORD PTR [eax+64]
	fstp	QWORD PTR _cpower

; 626  : } // end sphere_knot_energy_init()

	ret	0
_sphere_knot_energy_init ENDP
_TEXT	ENDS
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__$ArrayPad$
PUBLIC	_sphere_knot_energy
;	COMDAT __real@3fd0000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\knot3.c
CONST	ENDS
;	COMDAT _sphere_knot_energy
_TEXT	SEGMENT
tv6144 = -512						; size = 8
tv6166 = -504						; size = 8
tv8015 = -496						; size = 8
tv7708 = -488						; size = 8
_As$ = -480						; size = 8
_t1s1$ = -472						; size = 8
_t2s1$ = -464						; size = 8
_t2r$ = -456						; size = 8
_t1t2$ = -448						; size = 8
tv7960 = -440						; size = 4
tv8034 = -436						; size = 8
tv7728 = -436						; size = 8
_f1$ = -428						; size = 4
tv7958 = -424						; size = 4
tv3802 = -420						; size = 4
_energy$ = -416						; size = 8
_t1r$ = -408						; size = 8
_s1s2$ = -408						; size = 8
_rs1$ = -400						; size = 8
_s1s1$ = -400						; size = 8
_AsAt$ = -392						; size = 8
_t2t2$ = -392						; size = 8
_rs2$ = -384						; size = 8
_y$ = -376						; size = 12
_x$ = -376						; size = 12
_t2s2$ = -364						; size = 8
_rr2$ = -356						; size = 8
_t1s2$ = -348						; size = 8
tv7942 = -340						; size = 4
tv5073 = -340						; size = 4
tv7952 = -336						; size = 4
tv5049 = -336						; size = 4
tv7954 = -332						; size = 4
tv5045 = -332						; size = 4
tv7940 = -328						; size = 4
tv5077 = -328						; size = 4
tv7946 = -324						; size = 4
tv5065 = -324						; size = 4
tv7938 = -320						; size = 4
tv5081 = -320						; size = 4
tv7948 = -316						; size = 4
tv5061 = -316						; size = 4
tv7950 = -312						; size = 4
tv5057 = -312						; size = 4
tv7944 = -308						; size = 4
tv5069 = -308						; size = 4
tv6010 = -304						; size = 4
tv5085 = -304						; size = 4
tv6015 = -300						; size = 4
tv5027 = -300						; size = 4
tv3643 = -300						; size = 4
tv7956 = -296						; size = 4
tv5032 = -296						; size = 4
tv3606 = -296						; size = 4
_xmid$ = -292						; size = 48
_t2$ = -244						; size = 48
_t1$ = -196						; size = 48
_s1$ = -148						; size = 48
_s2$ = -100						; size = 48
_rj$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_sphere_knot_energy PROC				; COMDAT

; 639  : { facet_id f1 = f_info->id,f2;

	push	ebp
	mov	ebp, esp
	sub	esp, 512				; 00000200H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _f_info$[ebp]

; 640  :   REAL *x[FACET_VERTS],*y[FACET_VERTS]; /* vertex coordinates */
; 641  :   REAL energy = 0.0;

	fldz
	mov	eax, DWORD PTR [eax]
	fstp	QWORD PTR _energy$[ebp]
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _f1$[ebp], eax

; 642  :   REAL s1[MAXCOORD],s2[MAXCOORD];
; 643  :   REAL t1[MAXCOORD],t2[MAXCOORD];
; 644  :   REAL rr2,rs1,rs2,t1r,t1s1,t1s2,t2r,t2s1,t2s2;
; 645  :   REAL s1s1,s1s2,s2s2,t1t1,t1t2,t2t2;
; 646  :   REAL As,AsAt,det,angfac;
; 647  :   int j;
; 648  :   facetedge_id fe;
; 649  :   vertex_id v[FACET_VERTS],w[FACET_VERTS];
; 650  :   REAL pp;
; 651  :   REAL xmid[MAXCOORD];
; 652  :   REAL rj[MAXCOORD];
; 653  : 
; 654  :   fe = get_facet_fe(f1);

	test	eax, 268435456				; 10000000H
	jne	SHORT $LN27@sphere_kno@2
	xor	edi, edi
	jmp	SHORT $LN26@sphere_kno@2
$LN27@sphere_kno@2:
	mov	edx, DWORD PTR _web+236
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edi, DWORD PTR [ecx+28]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN26@sphere_kno@2
	xor	edi, 134217728				; 08000000H
$LN26@sphere_kno@2:

; 655  :   for ( j = 0 ; j < FACET_VERTS ; j++ )
; 656  :     { v[j] = get_fe_tailv(fe);

	mov	eax, DWORD PTR _web+460
	mov	ebx, DWORD PTR _web+124
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _dymem
	mov	eax, edi
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR tv3606[ebp], ecx
	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+edx+304]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN33@sphere_kno@2
	mov	esi, DWORD PTR _web+636
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	lea	eax, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR [eax+ecx]
	jmp	SHORT $LN32@sphere_kno@2
$LN33@sphere_kno@2:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	eax, DWORD PTR [ecx+eax]
$LN32@sphere_kno@2:

; 657  :       x[j] = get_coord(v[j]);

	mov	esi, DWORD PTR _web+104
	mov	edx, DWORD PTR [esi+edx+64]
	mov	esi, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+eax*4]
	add	esi, edx
	mov	DWORD PTR tv3643[ebp], edx

; 658  :       fe = get_next_edge(fe);

	test	edi, 134217728				; 08000000H
	je	SHORT $LN37@sphere_kno@2
	mov	edx, DWORD PTR tv3606[ebp]
	mov	edx, DWORD PTR [edx+28]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN22@sphere_kno@2
$LN37@sphere_kno@2:
	mov	eax, DWORD PTR tv3606[ebp]
	mov	edx, DWORD PTR [eax+32]
$LN22@sphere_kno@2:

; 655  :   for ( j = 0 ; j < FACET_VERTS ; j++ )
; 656  :     { v[j] = get_fe_tailv(fe);

	mov	edi, DWORD PTR _web+460
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edi+eax*4]
	mov	eax, edx
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edi+20]
	mov	DWORD PTR tv3606[ebp], edi
	test	eax, 134217728				; 08000000H
	je	SHORT $LN73@sphere_kno@2
	mov	edi, DWORD PTR _web+636
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	lea	eax, DWORD PTR [eax+edi*4]
	mov	eax, DWORD PTR [eax+ecx]
	jmp	SHORT $LN74@sphere_kno@2
$LN73@sphere_kno@2:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	eax, DWORD PTR [ecx+eax]
$LN74@sphere_kno@2:

; 657  :       x[j] = get_coord(v[j]);

	mov	edi, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edi+eax*4]
	add	edi, DWORD PTR tv3643[ebp]

; 658  :       fe = get_next_edge(fe);

	test	edx, 134217728				; 08000000H
	je	SHORT $LN75@sphere_kno@2
	mov	edx, DWORD PTR tv3606[ebp]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN76@sphere_kno@2
$LN75@sphere_kno@2:
	mov	eax, DWORD PTR tv3606[ebp]
	mov	eax, DWORD PTR [eax+32]
$LN76@sphere_kno@2:

; 655  :   for ( j = 0 ; j < FACET_VERTS ; j++ )
; 656  :     { v[j] = get_fe_tailv(fe);

	mov	ebx, DWORD PTR _web+460
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN78@sphere_kno@2
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+636
	lea	eax, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [eax+ecx]
	jmp	SHORT $LN79@sphere_kno@2
$LN78@sphere_kno@2:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [ecx+eax]
$LN79@sphere_kno@2:

; 657  :       x[j] = get_coord(v[j]);

	mov	ecx, DWORD PTR _web+12

; 659  :     }
; 660  : 
; 661  :   for ( j = 0 ; j < SDIM ; j++ )

	fld	QWORD PTR __real@4008000000000000
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	add	edx, DWORD PTR tv3643[ebp]
	mov	eax, DWORD PTR _web+616
	xor	ecx, ecx
	mov	DWORD PTR _x$[ebp+8], edx
	cmp	eax, 4
	jl	$LN114@sphere_kno@2

; 664  :         xmid[j] = (x[0][j]+x[1][j]+x[2][j])/3;

	mov	ebx, edi
	sub	ebx, esi
	mov	DWORD PTR tv5027[ebp], ebx
	mov	ebx, DWORD PTR _x$[ebp+8]
	sub	ebx, esi
	mov	DWORD PTR tv5032[ebp], ebx
	lea	ebx, DWORD PTR _s1$[ebp]
	sub	ebx, esi
	mov	DWORD PTR tv5045[ebp], ebx
	lea	ebx, DWORD PTR _s2$[ebp]
	sub	ebx, esi
	mov	DWORD PTR tv5049[ebp], ebx
	lea	ebx, DWORD PTR _xmid$[ebp]
	sub	ebx, esi
	mov	DWORD PTR tv5057[ebp], ebx
	lea	ebx, DWORD PTR _s1$[ebp+8]
	sub	ebx, esi
	mov	DWORD PTR tv5061[ebp], ebx
	lea	ebx, DWORD PTR _s2$[ebp+8]
	sub	ebx, esi
	mov	DWORD PTR tv5065[ebp], ebx
	lea	ebx, DWORD PTR _xmid$[ebp+8]
	sub	ebx, esi
	mov	DWORD PTR tv5069[ebp], ebx
	lea	ebx, DWORD PTR _s1$[ebp+16]
	sub	ebx, esi
	mov	DWORD PTR tv5073[ebp], ebx
	lea	ebx, DWORD PTR _s2$[ebp+16]
	sub	ebx, esi
	mov	DWORD PTR tv5077[ebp], ebx
	lea	ebx, DWORD PTR _xmid$[ebp+16]
	sub	ebx, esi
	mov	DWORD PTR tv5081[ebp], ebx
	mov	ebx, edi
	add	edx, 16					; 00000010H
	sub	ebx, DWORD PTR _x$[ebp+8]
	lea	eax, DWORD PTR [esi+8]
	mov	DWORD PTR tv5085[ebp], ebx
$LN84@sphere_kno@2:

; 662  :      { s1[j] = x[1][j] - x[0][j];

	fld	QWORD PTR [edi+ecx*8]
	mov	ebx, DWORD PTR tv5027[ebp]
	fsub	QWORD PTR [eax-8]

; 664  :         xmid[j] = (x[0][j]+x[1][j]+x[2][j])/3;

	add	ecx, 4
	add	eax, 32					; 00000020H
	add	edx, 32					; 00000020H
	fstp	QWORD PTR _s1$[ebp+ecx*8-32]
	fld	QWORD PTR [edx-48]
	fsub	QWORD PTR [eax-40]
	fstp	QWORD PTR _s2$[ebp+ecx*8-32]
	fld	QWORD PTR [eax-40]
	fadd	QWORD PTR [edi+ecx*8-32]
	fadd	QWORD PTR [edx-48]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR _xmid$[ebp+ecx*8-32]
	fld	QWORD PTR [ebx+eax-32]
	fsub	QWORD PTR [eax-32]
	mov	ebx, DWORD PTR tv5045[ebp]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv5032[ebp]
	fld	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv5049[ebp]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv5027[ebp]
	fld	QWORD PTR [eax-32]
	fadd	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv5032[ebp]
	fadd	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv5057[ebp]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv5085[ebp]
	fld	QWORD PTR [ebx+edx-32]
	fsub	QWORD PTR [eax-24]
	mov	ebx, DWORD PTR tv5061[ebp]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv5065[ebp]
	fld	QWORD PTR [edx-32]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv5085[ebp]
	fld	QWORD PTR [ebx+edx-32]
	mov	ebx, DWORD PTR tv5069[ebp]
	fadd	QWORD PTR [eax-24]
	fadd	QWORD PTR [edx-32]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ebx+eax-32]
	fld	QWORD PTR [edi+ecx*8-8]
	fsub	QWORD PTR [eax-16]
	mov	ebx, DWORD PTR tv5073[ebp]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv5077[ebp]
	fld	QWORD PTR [edx-24]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv5081[ebp]
	fld	QWORD PTR [eax-16]
	fadd	QWORD PTR [edi+ecx*8-8]
	fadd	QWORD PTR [edx-24]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR _web+616
	add	ebx, -3					; fffffffdH
	cmp	ecx, ebx
	jl	$LN84@sphere_kno@2
	mov	edx, DWORD PTR _x$[ebp+8]
	mov	eax, DWORD PTR _web+616
$LN114@sphere_kno@2:

; 659  :     }
; 660  : 
; 661  :   for ( j = 0 ; j < SDIM ; j++ )

	cmp	ecx, eax
	jge	SHORT $LN123@sphere_kno@2
$LC20@sphere_kno@2:

; 662  :      { s1[j] = x[1][j] - x[0][j];

	fld	QWORD PTR [edi+ecx*8]
	inc	ecx
	fsub	QWORD PTR [esi+ecx*8-8]
	fstp	QWORD PTR _s1$[ebp+ecx*8-8]

; 663  :         s2[j] = x[2][j] - x[0][j];

	fld	QWORD PTR [edx+ecx*8-8]
	fsub	QWORD PTR [esi+ecx*8-8]
	fstp	QWORD PTR _s2$[ebp+ecx*8-8]

; 664  :         xmid[j] = (x[0][j]+x[1][j]+x[2][j])/3;

	fld	QWORD PTR [edi+ecx*8-8]
	fadd	QWORD PTR [esi+ecx*8-8]
	fadd	QWORD PTR [edx+ecx*8-8]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR _xmid$[ebp+ecx*8-8]
	cmp	ecx, eax
	jl	SHORT $LC20@sphere_kno@2
$LN123@sphere_kno@2:

; 665  :      }
; 666  :   s1s1 = SDIM_dot(s1,s1);

	push	eax
	fstp	ST(0)
	lea	edx, DWORD PTR _s1$[ebp]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	fstp	QWORD PTR _s1s1$[ebp]

; 667  :   s1s2 = SDIM_dot(s1,s2);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _s2$[ebp]
	push	edx
	lea	eax, DWORD PTR _s1$[ebp]
	push	eax
	call	_dot
	fstp	QWORD PTR _s1s2$[ebp]

; 668  :   s2s2 = SDIM_dot(s2,s2);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _s2$[ebp]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot

; 669  :   As = sqrt(s1s1*s2s2 - s1s2*s1s2);

	fmul	QWORD PTR _s1s1$[ebp]
	fld	QWORD PTR _s1s2$[ebp]
	add	esp, 36					; 00000024H
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	call	__CIsqrt
	fstp	QWORD PTR _As$[ebp]

; 670  :   FOR_ALL_FACETS(f2)

	mov	ecx, DWORD PTR _web+272
	mov	esi, ecx
	shr	esi, 28					; 0000001cH
	and	esi, 1
	je	$LN109@sphere_kno@2
	npad	4
$LL17@sphere_kno@2:
	mov	eax, DWORD PTR _web+236
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	mov	DWORD PTR tv3802[ebp], edx
	je	$LN16@sphere_kno@2

; 671  :     { if ( f2 <= f1 ) continue; /* each pair once */

	cmp	ecx, DWORD PTR _f1$[ebp]
	jbe	$LN16@sphere_kno@2

; 672  :       fe = get_facet_fe(f2);

	test	esi, esi
	jne	SHORT $LN41@sphere_kno@2
	xor	edx, edx
	jmp	SHORT $LN40@sphere_kno@2
$LN41@sphere_kno@2:
	mov	edx, DWORD PTR [edx+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN40@sphere_kno@2
	xor	edx, 134217728				; 08000000H
$LN40@sphere_kno@2:

; 673  :       for ( j = 0 ; j < FACET_VERTS ; j++ )
; 674  :         { w[j] = get_fe_tailv(fe);

	mov	eax, DWORD PTR _web+460
	mov	esi, DWORD PTR _dymem
	mov	ecx, edx
	and	ecx, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+esi+304]
	mov	esi, DWORD PTR _web+124
	mov	eax, edx
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edi+20]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN47@sphere_kno@2
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	esi, DWORD PTR _web+636
	lea	eax, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR [eax+ecx]
	jmp	SHORT $LN46@sphere_kno@2
$LN47@sphere_kno@2:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [ecx+eax]
$LN46@sphere_kno@2:

; 675  :           y[j] = get_coord(w[j]);

	mov	esi, DWORD PTR _web+104
	mov	ebx, DWORD PTR _dymem
	mov	ebx, DWORD PTR [esi+ebx+64]
	mov	esi, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+eax*4]
	add	esi, ebx
	mov	DWORD PTR tv3643[ebp], ebx
	mov	DWORD PTR _y$[ebp], esi

; 676  :           fe = get_next_edge(fe);

	test	edx, 134217728				; 08000000H
	je	SHORT $LN51@sphere_kno@2
	mov	edx, DWORD PTR [edi+28]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN10@sphere_kno@2
$LN51@sphere_kno@2:
	mov	edx, DWORD PTR [edi+32]
$LN10@sphere_kno@2:

; 673  :       for ( j = 0 ; j < FACET_VERTS ; j++ )
; 674  :         { w[j] = get_fe_tailv(fe);

	mov	edi, DWORD PTR _web+460
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edi+eax*4]
	mov	eax, edx
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edi+20]
	mov	DWORD PTR tv3606[ebp], edi
	mov	edi, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN92@sphere_kno@2
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	edi, DWORD PTR _web+636
	lea	eax, DWORD PTR [eax+edi*4]
	mov	eax, DWORD PTR [eax+ecx]
	jmp	SHORT $LN93@sphere_kno@2
$LN92@sphere_kno@2:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [ecx+eax]
$LN93@sphere_kno@2:

; 675  :           y[j] = get_coord(w[j]);

	mov	edi, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edi+eax*4]
	add	edi, ebx

; 676  :           fe = get_next_edge(fe);

	test	edx, 134217728				; 08000000H
	je	SHORT $LN94@sphere_kno@2
	mov	edx, DWORD PTR tv3606[ebp]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN95@sphere_kno@2
$LN94@sphere_kno@2:
	mov	eax, DWORD PTR tv3606[ebp]
	mov	eax, DWORD PTR [eax+32]
$LN95@sphere_kno@2:

; 673  :       for ( j = 0 ; j < FACET_VERTS ; j++ )
; 674  :         { w[j] = get_fe_tailv(fe);

	mov	ebx, DWORD PTR _web+460
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN97@sphere_kno@2
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+636
	lea	eax, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [eax+ecx]
	jmp	SHORT $LN98@sphere_kno@2
$LN97@sphere_kno@2:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [ecx+eax]
$LN98@sphere_kno@2:

; 677  :         }
; 678  :       t1t1=t1t2=t2t2=rr2=rs1=rs2=t1r=t1s1=t1s2=t2r=t2s1=t2s2=0.0;

	fldz
	mov	ecx, DWORD PTR _web+12

; 679  :       for (j=0; j<SDIM; j++)

	mov	ebx, DWORD PTR _web+616
	fst	QWORD PTR _t2s2$[ebp]
	fst	QWORD PTR _t2s1$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fst	QWORD PTR _t2r$[ebp]
	add	edx, DWORD PTR tv3643[ebp]
	fst	QWORD PTR _t1s2$[ebp]
	fst	QWORD PTR _t1s1$[ebp]
	xor	ecx, ecx
	fst	QWORD PTR _t1r$[ebp]
	mov	DWORD PTR _y$[ebp+8], edx
	fst	QWORD PTR _rs2$[ebp]
	fst	QWORD PTR _rs1$[ebp]
	fld	ST(0)
	fst	QWORD PTR _rr2$[ebp]
	fld	ST(1)
	fst	QWORD PTR _t2t2$[ebp]
	fld	ST(2)
	fst	QWORD PTR _t1t2$[ebp]
	cmp	ebx, 4
	jl	$LN107@sphere_kno@2

; 685  :           rr2 += rj[j]*rj[j]; 

	mov	ebx, edi
	fstp	ST(2)
	sub	ebx, esi
	fstp	ST(0)
	mov	DWORD PTR tv6010[ebp], ebx
	fstp	ST(0)
	mov	ebx, DWORD PTR _y$[ebp+8]
	fld	QWORD PTR __real@4008000000000000
	sub	ebx, esi
	mov	DWORD PTR tv6015[ebp], ebx
	lea	eax, DWORD PTR [esi+8]
	neg	esi
	lea	ebx, DWORD PTR _t1$[ebp+esi]
	mov	DWORD PTR tv7938[ebp], ebx
	lea	ebx, DWORD PTR _t2$[ebp+esi]
	mov	DWORD PTR tv7940[ebp], ebx
	lea	ebx, DWORD PTR _xmid$[ebp+esi]
	mov	DWORD PTR tv7942[ebp], ebx
	lea	ebx, DWORD PTR _rj$[ebp+esi]
	mov	DWORD PTR tv7944[ebp], ebx
	lea	ebx, DWORD PTR _t1$[ebp+esi+8]
	mov	DWORD PTR tv7946[ebp], ebx
	lea	ebx, DWORD PTR _t2$[ebp+esi+8]
	mov	DWORD PTR tv7948[ebp], ebx
	lea	ebx, DWORD PTR _xmid$[ebp+esi+8]
	mov	DWORD PTR tv7950[ebp], ebx
	lea	ebx, DWORD PTR _rj$[ebp+esi+8]
	mov	DWORD PTR tv7952[ebp], ebx
	lea	ebx, DWORD PTR _t1$[ebp+esi+16]
	mov	DWORD PTR tv7954[ebp], ebx
	lea	ebx, DWORD PTR _t2$[ebp+esi+16]
	mov	DWORD PTR tv7956[ebp], ebx
	lea	ebx, DWORD PTR _xmid$[ebp+esi+16]
	lea	esi, DWORD PTR _rj$[ebp+esi+16]
	mov	DWORD PTR tv7960[ebp], esi
	mov	esi, edi
	add	edx, 16					; 00000010H
	sub	esi, DWORD PTR _y$[ebp+8]
	mov	DWORD PTR tv7958[ebp], ebx
	jmp	SHORT $LN113@sphere_kno@2
$LN129@sphere_kno@2:
	fstp	ST(0)
	fstp	ST(1)
	fstp	ST(1)
$LN113@sphere_kno@2:

; 680  :       {
; 681  :           t1[j] = y[1][j] - y[0][j];

	fld	QWORD PTR [edi+ecx*8]
	mov	ebx, DWORD PTR tv6010[ebp]
	fsub	QWORD PTR [eax-8]
	fst	QWORD PTR _t1$[ebp+ecx*8]

; 682  :           t2[j] = y[2][j] - y[0][j];

	fld	QWORD PTR [edx-16]
	fsub	QWORD PTR [eax-8]
	fst	QWORD PTR _t2$[ebp+ecx*8]

; 684  :           rj[j] = (y[0][j]+y[1][j]+y[2][j])/3 - xmid[j];

	fld	QWORD PTR [eax-8]
	fadd	QWORD PTR [edi+ecx*8]
	fadd	QWORD PTR [edx-16]
	fdiv	ST(0), ST(3)
	fsub	QWORD PTR _xmid$[ebp+ecx*8]
	fst	QWORD PTR tv7708[ebp]
	fstp	QWORD PTR _rj$[ebp+ecx*8]
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv7938[ebp]
	fsub	QWORD PTR [eax]
	fst	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv6015[ebp]
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv7940[ebp]
	fsub	QWORD PTR [eax]
	fst	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv6010[ebp]
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv6015[ebp]
	fadd	QWORD PTR [eax]
	fadd	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv7942[ebp]
	fdiv	ST(0), ST(5)
	fsub	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv7944[ebp]
	fst	QWORD PTR tv8015[ebp]
	fstp	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv7946[ebp]
	fld	QWORD PTR [esi+edx]
	fsub	QWORD PTR [eax+8]
	fst	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv7948[ebp]
	fld	QWORD PTR [edx]
	fsub	QWORD PTR [eax+8]
	fst	QWORD PTR tv6144[ebp]
	fstp	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv7950[ebp]
	fld	QWORD PTR [eax+8]
	fadd	QWORD PTR [esi+edx]
	fadd	QWORD PTR [edx]
	fdivrp	ST(6), ST(0)
	fxch	ST(5)
	fsub	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv7952[ebp]
	fst	QWORD PTR tv8034[ebp]
	fstp	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv7954[ebp]
	fld	QWORD PTR [edi+ecx*8+24]
	fsub	QWORD PTR [eax+16]
	fst	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv7956[ebp]
	fld	QWORD PTR [edx+8]
	fsub	QWORD PTR [eax+16]
	fst	QWORD PTR tv6166[ebp]
	fstp	QWORD PTR [ebx+eax]
	fld	ST(4)
	fmul	ST(0), ST(5)
	faddp	ST(7), ST(0)
	fld	ST(2)
	fmul	ST(0), ST(3)
	faddp	ST(7), ST(0)
	fld	ST(5)
	fmul	ST(0), ST(6)
	faddp	ST(7), ST(0)
	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(7), ST(0)
	fld	ST(3)
	fmulp	ST(5), ST(0)
	fxch	ST(4)
	fadd	QWORD PTR _t1t2$[ebp]
	fld	ST(1)
	fmulp	ST(3), ST(0)
	faddp	ST(2), ST(0)
	fld	QWORD PTR tv6144[ebp]
	mov	ebx, DWORD PTR tv7958[ebp]
	fmul	ST(5), ST(0)

; 685  :           rr2 += rj[j]*rj[j]; 

	add	ecx, 4
	fxch	ST(2)
	add	eax, 32					; 00000020H
	add	edx, 32					; 00000020H
	faddp	ST(5), ST(0)
	fld	QWORD PTR tv6166[ebp]
	fmul	ST(4), ST(0)
	fxch	ST(5)
	faddp	ST(4), ST(0)
	fxch	ST(3)
	fst	QWORD PTR _t1t2$[ebp]
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fadd	QWORD PTR _t2t2$[ebp]
	fld	ST(3)
	fmulp	ST(4), ST(0)
	faddp	ST(3), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(2), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _t2t2$[ebp]
	fld	QWORD PTR [edi+ecx*8-8]
	fadd	QWORD PTR [eax-16]
	fadd	QWORD PTR [edx-24]
	fld	QWORD PTR __real@4008000000000000
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fsub	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv7960[ebp]
	fst	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR _web+616
	fld	QWORD PTR tv7708[ebp]
	add	ebx, -3					; fffffffdH
	fmul	ST(0), ST(0)
	fadd	QWORD PTR _rr2$[ebp]
	fld	QWORD PTR tv8015[ebp]
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv8034[ebp]
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fst	QWORD PTR _rr2$[ebp]
	cmp	ecx, ebx
	jl	$LN129@sphere_kno@2
	mov	esi, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _y$[ebp+8]
	mov	ebx, DWORD PTR _web+616
	jmp	SHORT $LC102@sphere_kno@2
$LN107@sphere_kno@2:
	fld	QWORD PTR __real@4008000000000000
	fxch	ST(1)
	fxch	ST(3)
$LC102@sphere_kno@2:

; 679  :       for (j=0; j<SDIM; j++)

	cmp	ecx, ebx
	jge	SHORT $LN134@sphere_kno@2
$LC8@sphere_kno@2:

; 680  :       {
; 681  :           t1[j] = y[1][j] - y[0][j];

	fld	QWORD PTR [edi+ecx*8]
	inc	ecx
	fsub	QWORD PTR [esi+ecx*8-8]
	fst	QWORD PTR _t1$[ebp+ecx*8-8]

; 682  :           t2[j] = y[2][j] - y[0][j];

	fld	QWORD PTR [edx+ecx*8-8]
	fsub	QWORD PTR [esi+ecx*8-8]
	fst	QWORD PTR _t2$[ebp+ecx*8-8]

; 683  :           t1t1 += t1[j]*t1[j]; t1t2 += t1[j]*t2[j]; t2t2 += t2[j]*t2[j];

	fld	ST(1)
	fmul	ST(0), ST(2)
	faddp	ST(7), ST(0)
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	faddp	ST(5), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(3), ST(0)

; 684  :           rj[j] = (y[0][j]+y[1][j]+y[2][j])/3 - xmid[j];

	fld	QWORD PTR [esi+ecx*8-8]
	fadd	QWORD PTR [edi+ecx*8-8]
	fadd	QWORD PTR [edx+ecx*8-8]
	fdiv	ST(0), ST(2)
	fsub	QWORD PTR _xmid$[ebp+ecx*8-8]
	fst	QWORD PTR _rj$[ebp+ecx*8-8]

; 685  :           rr2 += rj[j]*rj[j]; 

	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	cmp	ecx, ebx
	jl	SHORT $LC8@sphere_kno@2
$LN134@sphere_kno@2:

; 679  :       for (j=0; j<SDIM; j++)

	fstp	ST(1)

; 686  :       }
; 687  :       rr2 /= 2;

	fmul	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _rr2$[ebp]

; 688  :       AsAt = As*sqrt(t1t1*t2t2-t1t2*t1t2);

	fmulp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	call	__CIsqrt
	fmul	QWORD PTR _As$[ebp]
	fstp	QWORD PTR _AsAt$[ebp]

; 689  :       if ( cpower == 0.0 ) pp = 1.0;

	fld	QWORD PTR _cpower
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN5@sphere_kno@2
	fld1

; 690  :       else 

	jmp	$LN4@sphere_kno@2
$LN5@sphere_kno@2:

; 691  :       { 
; 692  :          for (j=0; j<SDIM; j++)

	fld	QWORD PTR _t2s1$[ebp]
	xor	eax, eax
	fld	QWORD PTR _t2r$[ebp]
	fld	QWORD PTR _t1s1$[ebp]
	fld	QWORD PTR _t1r$[ebp]
	cmp	ebx, 4
	jl	$LN108@sphere_kno@2
	fld	QWORD PTR _rs2$[ebp]
	lea	ecx, DWORD PTR [ebx-3]
	fld	QWORD PTR _rs1$[ebp]
$LN110@sphere_kno@2:

; 693  :          {
; 694  :              t1r += t1[j]*rj[j]; t2r += t2[j]*rj[j];

	fld	QWORD PTR _t1$[ebp+eax*8]
	fmul	QWORD PTR _rj$[ebp+eax*8]
	faddp	ST(3), ST(0)
	fld	QWORD PTR _t1$[ebp+eax*8+8]
	fmul	QWORD PTR _rj$[ebp+eax*8+8]
	faddp	ST(3), ST(0)
	fld	QWORD PTR _t1$[ebp+eax*8+16]
	fmul	QWORD PTR _rj$[ebp+eax*8+16]
	faddp	ST(3), ST(0)
	fld	QWORD PTR _rj$[ebp+eax*8+24]
	fmul	QWORD PTR _t1$[ebp+eax*8+24]
	faddp	ST(3), ST(0)
	fld	QWORD PTR _rj$[ebp+eax*8]
	fmul	QWORD PTR _t2$[ebp+eax*8]
	faddp	ST(5), ST(0)
	fld	QWORD PTR _rj$[ebp+eax*8+8]
	fmul	QWORD PTR _t2$[ebp+eax*8+8]
	faddp	ST(5), ST(0)
	fld	QWORD PTR _rj$[ebp+eax*8+16]
	fmul	QWORD PTR _t2$[ebp+eax*8+16]
	faddp	ST(5), ST(0)
	fld	QWORD PTR _rj$[ebp+eax*8+24]
	fmul	QWORD PTR _t2$[ebp+eax*8+24]
	faddp	ST(5), ST(0)

; 695  :              rs1 += rj[j]*s1[j]; t1s1 += t1[j]*s1[j]; 

	fld	QWORD PTR _rj$[ebp+eax*8]
	fmul	QWORD PTR _s1$[ebp+eax*8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _rj$[ebp+eax*8+8]
	fmul	QWORD PTR _s1$[ebp+eax*8+8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _rj$[ebp+eax*8+16]
	fmul	QWORD PTR _s1$[ebp+eax*8+16]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _rj$[ebp+eax*8+24]
	fmul	QWORD PTR _s1$[ebp+eax*8+24]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _t1$[ebp+eax*8]
	fmul	QWORD PTR _s1$[ebp+eax*8]
	faddp	ST(4), ST(0)
	fld	QWORD PTR _t1$[ebp+eax*8+8]
	fmul	QWORD PTR _s1$[ebp+eax*8+8]
	faddp	ST(4), ST(0)
	fld	QWORD PTR _t1$[ebp+eax*8+16]
	fmul	QWORD PTR _s1$[ebp+eax*8+16]
	faddp	ST(4), ST(0)
	fld	QWORD PTR _t1$[ebp+eax*8+24]
	fmul	QWORD PTR _s1$[ebp+eax*8+24]
	faddp	ST(4), ST(0)

; 696  :              t2s1 += t2[j]*s1[j]; rs2 += rj[j]*s2[j]; 

	fld	QWORD PTR _t2$[ebp+eax*8]
	fmul	QWORD PTR _s1$[ebp+eax*8]
	faddp	ST(6), ST(0)
	fld	QWORD PTR _t2$[ebp+eax*8+8]
	fmul	QWORD PTR _s1$[ebp+eax*8+8]
	faddp	ST(6), ST(0)
	fld	QWORD PTR _t2$[ebp+eax*8+16]
	fmul	QWORD PTR _s1$[ebp+eax*8+16]
	faddp	ST(6), ST(0)
	fld	QWORD PTR _t2$[ebp+eax*8+24]
	fmul	QWORD PTR _s1$[ebp+eax*8+24]
	faddp	ST(6), ST(0)
	fld	QWORD PTR _rj$[ebp+eax*8]
	fmul	QWORD PTR _s2$[ebp+eax*8]
	faddp	ST(2), ST(0)
	fld	QWORD PTR _s2$[ebp+eax*8+8]
	fmul	QWORD PTR _rj$[ebp+eax*8+8]
	faddp	ST(2), ST(0)
	fld	QWORD PTR _rj$[ebp+eax*8+16]
	fmul	QWORD PTR _s2$[ebp+eax*8+16]
	faddp	ST(2), ST(0)
	fld	QWORD PTR _rj$[ebp+eax*8+24]
	fmul	QWORD PTR _s2$[ebp+eax*8+24]
	faddp	ST(2), ST(0)

; 697  :              t1s2 += t1[j]*s2[j]; t2s2 += t2[j]*s2[j];

	fld	QWORD PTR _t1$[ebp+eax*8]
	fmul	QWORD PTR _s2$[ebp+eax*8]
	fadd	QWORD PTR _t1s2$[ebp]
	fld	QWORD PTR _t1$[ebp+eax*8+8]
	fmul	QWORD PTR _s2$[ebp+eax*8+8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _t1$[ebp+eax*8+16]
	fmul	QWORD PTR _s2$[ebp+eax*8+16]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _t1$[ebp+eax*8+24]
	add	eax, 4
	fmul	QWORD PTR _s2$[ebp+eax*8-8]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _t1s2$[ebp]
	fld	QWORD PTR _s2$[ebp+eax*8-32]
	fmul	QWORD PTR _t2$[ebp+eax*8-32]
	fadd	QWORD PTR _t2s2$[ebp]
	fld	QWORD PTR _s2$[ebp+eax*8-24]
	fmul	QWORD PTR _t2$[ebp+eax*8-24]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _s2$[ebp+eax*8-16]
	fmul	QWORD PTR _t2$[ebp+eax*8-16]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _t2$[ebp+eax*8-8]
	fmul	QWORD PTR _s2$[ebp+eax*8-8]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _t2s2$[ebp]
	cmp	eax, ecx
	jl	$LN110@sphere_kno@2

; 696  :              t2s1 += t2[j]*s1[j]; rs2 += rj[j]*s2[j]; 

	fxch	ST(1)
	fst	QWORD PTR _rs2$[ebp]

; 697  :              t1s2 += t1[j]*s2[j]; t2s2 += t2[j]*s2[j];

	jmp	SHORT $LC105@sphere_kno@2
$LN108@sphere_kno@2:
	fld	QWORD PTR _rs1$[ebp]
	fld	QWORD PTR _rs2$[ebp]
$LC105@sphere_kno@2:

; 691  :       { 
; 692  :          for (j=0; j<SDIM; j++)

	cmp	eax, ebx
	jge	$LN112@sphere_kno@2
$LN111@sphere_kno@2:

; 693  :          {
; 694  :              t1r += t1[j]*rj[j]; t2r += t2[j]*rj[j];

	fld	QWORD PTR _t1$[ebp+eax*8]
	inc	eax
	fmul	QWORD PTR _rj$[ebp+eax*8-8]
	faddp	ST(3), ST(0)
	fld	QWORD PTR _rj$[ebp+eax*8-8]
	fmul	QWORD PTR _t2$[ebp+eax*8-8]
	faddp	ST(5), ST(0)

; 695  :              rs1 += rj[j]*s1[j]; t1s1 += t1[j]*s1[j]; 

	fld	QWORD PTR _rj$[ebp+eax*8-8]
	fmul	QWORD PTR _s1$[ebp+eax*8-8]
	faddp	ST(2), ST(0)
	fld	QWORD PTR _t1$[ebp+eax*8-8]
	fmul	QWORD PTR _s1$[ebp+eax*8-8]
	faddp	ST(4), ST(0)

; 696  :              t2s1 += t2[j]*s1[j]; rs2 += rj[j]*s2[j]; 

	fld	QWORD PTR _t2$[ebp+eax*8-8]
	fmul	QWORD PTR _s1$[ebp+eax*8-8]
	faddp	ST(6), ST(0)
	fld	QWORD PTR _rj$[ebp+eax*8-8]
	fmul	QWORD PTR _s2$[ebp+eax*8-8]
	faddp	ST(1), ST(0)

; 697  :              t1s2 += t1[j]*s2[j]; t2s2 += t2[j]*s2[j];

	fld	QWORD PTR _t1$[ebp+eax*8-8]
	fmul	QWORD PTR _s2$[ebp+eax*8-8]
	fadd	QWORD PTR _t1s2$[ebp]
	fstp	QWORD PTR _t1s2$[ebp]
	fld	QWORD PTR _s2$[ebp+eax*8-8]
	fmul	QWORD PTR _t2$[ebp+eax*8-8]
	fadd	QWORD PTR _t2s2$[ebp]
	fstp	QWORD PTR _t2s2$[ebp]
	cmp	eax, ebx
	jl	$LN111@sphere_kno@2

; 696  :              t2s1 += t2[j]*s1[j]; rs2 += rj[j]*s2[j]; 

	fst	QWORD PTR _rs2$[ebp]
$LN112@sphere_kno@2:

; 698  :          }
; 699  :          det =    rr2*t1s1*t2s2 + rs1*t1s2*t2r + rs2*t1r*t2s1
; 700  :                  - rr2*t1s2*t2s1 - rs1*t1r*t2s2 - rs2*t1s1*t2r;

	fld	ST(3)
	fmul	QWORD PTR _rr2$[ebp]
	fmul	QWORD PTR _t2s2$[ebp]
	fld	QWORD PTR _t1s2$[ebp]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	ST(3)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _t1s2$[ebp]
	fld	QWORD PTR _rr2$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmulp	ST(7), ST(0)
	fxch	ST(1)
	fsubrp	ST(6), ST(0)
	fxch	ST(2)
	fmulp	ST(1), ST(0)
	fmul	QWORD PTR _t2s2$[ebp]
	fsubp	ST(4), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR _rs2$[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(2)
	fsubrp	ST(1), ST(0)

; 701  :          angfac = 1 + det/rr2/AsAt; /* 0 for cospherical faces */

	fdivrp	ST(1), ST(0)
	fdiv	QWORD PTR _AsAt$[ebp]
	fadd	QWORD PTR __real@3ff0000000000000

; 702  :          pp = pow(angfac,cpower);

	fld	QWORD PTR _cpower
	call	__CIpow
$LN4@sphere_kno@2:

; 703  :       }
; 704  :       energy += AsAt * pp / pow(2*rr2,spower);

	fmul	QWORD PTR _AsAt$[ebp]
	fstp	QWORD PTR tv7728[ebp]
	fld	QWORD PTR _rr2$[ebp]
	fadd	ST(0), ST(0)
	fld	QWORD PTR _spower
	call	__CIpow
	fdivr	QWORD PTR tv7728[ebp]
	mov	edx, DWORD PTR tv3802[ebp]
	fadd	QWORD PTR _energy$[ebp]
	fstp	QWORD PTR _energy$[ebp]
$LN16@sphere_kno@2:

; 670  :   FOR_ALL_FACETS(f2)

	mov	ecx, DWORD PTR [edx]
	mov	esi, ecx
	shr	esi, 28					; 0000001cH
	and	esi, 1
	jne	$LL17@sphere_kno@2
$LN109@sphere_kno@2:

; 705  :     }
; 706  :   return 2*energy/4;  /* As,At are 2*areas; also we want full REAL sum */

	fld	QWORD PTR _energy$[ebp]

; 707  : } // end sphere_knot_energy()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	fadd	ST(0), ST(0)
	pop	esi
	xor	ecx, ebp
	fmul	QWORD PTR __real@3fd0000000000000
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_sphere_knot_energy ENDP
_TEXT	ENDS
PUBLIC	__real@c008000000000000
PUBLIC	__real@3f1a36e2eb1c432d
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_sphere_knot_energy_gradient
;	COMDAT __real@c008000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@c008000000000000 DQ 0c008000000000000r	; -3
CONST	ENDS
;	COMDAT __real@3f1a36e2eb1c432d
CONST	SEGMENT
__real@3f1a36e2eb1c432d DQ 03f1a36e2eb1c432dr	; 0.0001
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\knot3.c
CONST	ENDS
;	COMDAT _sphere_knot_energy_gradient
_TEXT	SEGMENT
tv4696 = -652						; size = 8
tv10905 = -648						; size = 4
tv10911 = -644						; size = 4
_As$ = -640						; size = 8
tv4217 = -632						; size = 4
_f1$ = -628						; size = 4
tv4693 = -624						; size = 8
tv10903 = -620						; size = 4
tv10909 = -616						; size = 4
tv10913 = -612						; size = 4
tv4690 = -608						; size = 8
tv8811 = -604						; size = 4
tv7034 = -600						; size = 8
tv4702 = -600						; size = 8
tv10907 = -596						; size = 4
tv7020 = -592						; size = 8
tv4688 = -592						; size = 8
tv10874 = -588						; size = 4
tv10881 = -584						; size = 8
tv7023 = -584						; size = 8
tv8935 = -580						; size = 4
_energy$ = -576						; size = 8
_t2s1$ = -568						; size = 8
tv10728 = -560						; size = 8
tv4699 = -560						; size = 8
tv8940 = -556						; size = 4
tv10880 = -552						; size = 4
tv10894 = -548						; size = 4
tv10878 = -544						; size = 4
_t1r$ = -540						; size = 8
tv10915 = -532						; size = 4
tv10890 = -528						; size = 4
tv10888 = -524						; size = 4
tv10896 = -520						; size = 4
tv10886 = -516						; size = 4
tv10892 = -512						; size = 4
tv10900 = -508						; size = 4
tv10917 = -504						; size = 4
tv10882 = -500						; size = 4
_t2s2$ = -496						; size = 8
tv10898 = -488						; size = 4
tv10884 = -484						; size = 4
_dEdrr2$ = -480						; size = 8
_t1s2$ = -480						; size = 8
_dEdrs1$ = -472						; size = 8
_t2r$ = -472						; size = 8
_rs2$ = -464						; size = 8
_dEdt2s2$ = -456					; size = 8
_rs1$ = -456						; size = 8
_t1s1$ = -448						; size = 8
_y$ = -440						; size = 12
_f_info$GSCopy$ = -428					; size = 4
tv10779 = -424						; size = 8
_rr2$ = -424						; size = 8
tv10876 = -420						; size = 4
tv5747 = -416						; size = 4
tv3991 = -416						; size = 4
tv10868 = -412						; size = 4
tv10859 = -412						; size = 4
tv5774 = -412						; size = 4
tv10863 = -408						; size = 4
tv8510 = -408						; size = 4
tv5782 = -408						; size = 4
tv10861 = -404						; size = 4
tv8515 = -404						; size = 4
tv5778 = -404						; size = 4
_x$ = -400						; size = 12
_dEdt2s1$ = -388					; size = 8
_rs1r$89741 = -388					; size = 8
_angfac$ = -388						; size = 8
_t1t1$ = -388						; size = 8
_s1s1$ = -388						; size = 8
tv10159 = -380						; size = 4
tv5786 = -380						; size = 4
_j$ = -380						; size = 4
tv10787 = -376						; size = 8
_dEdt1s2$ = -376					; size = 8
_rs2r$89742 = -376					; size = 8
_AsAt$ = -376						; size = 8
_t2t2$ = -376						; size = 8
_s2s2$ = -376						; size = 8
tv10877 = -368						; size = 8
_dEdt2r$ = -368						; size = 8
_dEdrs2$ = -368						; size = 8
_detr$ = -368						; size = 8
_t1t2$ = -368						; size = 8
_s1s2$ = -368						; size = 8
tv10870 = -360						; size = 4
tv7203 = -360						; size = 4
tv6934 = -360						; size = 4
tv5770 = -360						; size = 4
tv10866 = -356						; size = 4
tv10857 = -356						; size = 4
tv7208 = -356						; size = 4
tv5742 = -356						; size = 4
tv10872 = -352						; size = 4
tv7213 = -352						; size = 4
tv6939 = -352						; size = 4
tv5762 = -352						; size = 4
tv10853 = -348						; size = 4
tv4011 = -348						; size = 4
tv10855 = -344						; size = 4
tv3974 = -344						; size = 4
_dAs1$ = -340						; size = 48
_dAs2$ = -292						; size = 48
_r$ = -244						; size = 48
_t2$ = -196						; size = 48
_t1$ = -148						; size = 48
_s2$ = -100						; size = 48
_s1$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_sphere_knot_energy_gradient PROC			; COMDAT

; 721  : { facet_id f1 = f_info->id,f2;

	push	ebp
	mov	ebp, esp
	sub	esp, 652				; 0000028cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 722  :   REAL *x[FACET_VERTS],*y[FACET_VERTS]; /* vertex coordinates */
; 723  :   REAL energy = 0.0;

	fldz
	push	ebx
	push	esi
	fst	QWORD PTR _energy$[ebp]
	push	edi
	mov	edi, DWORD PTR _f_info$[ebp]
	mov	edx, DWORD PTR [edi]
	mov	DWORD PTR _f_info$GSCopy$[ebp], edi
	mov	DWORD PTR _f1$[ebp], edx

; 724  :   REAL s1[MAXCOORD],s2[MAXCOORD];
; 725  :   REAL t1[MAXCOORD],t2[MAXCOORD];
; 726  :   REAL r[MAXCOORD];
; 727  :   REAL dAs1[MAXCOORD],dAs2[MAXCOORD];
; 728  :   REAL rr2,rs1,rs2,t1r,t1s1,t1s2,t2r,t2s1,t2s2;
; 729  :   REAL s1s1,s1s2,s2s2,t1t1,t1t2,t2t2;
; 730  :   REAL dEdrr2,dEdrs1,dEdrs2,dEdt1r,dEdt1s1,dEdt1s2,dEdt2r,dEdt2s1,dEdt2s2;
; 731  :   REAL angfac,mult,qq;
; 732  :   REAL As,AsAt,detr;
; 733  :   facetedge_id fe;
; 734  :   vertex_id v[FACET_VERTS],w[FACET_VERTS];
; 735  :   int i,j;
; 736  : 
; 737  :   for ( i = 0 ; i < FACET_VERTS ; i++ )

	xor	ecx, ecx
$LN48@sphere_kno@3:

; 738  :      for ( j = 0 ; j < SDIM ; j++ ) f_info->grad[i][j] = 0.0;

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN47@sphere_kno@3
$LN45@sphere_kno@3:
	mov	esi, DWORD PTR [edi+1336]
	mov	esi, DWORD PTR [ecx+esi]
	fst	QWORD PTR [esi+eax*8]
	inc	eax
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN45@sphere_kno@3
$LN47@sphere_kno@3:

; 724  :   REAL s1[MAXCOORD],s2[MAXCOORD];
; 725  :   REAL t1[MAXCOORD],t2[MAXCOORD];
; 726  :   REAL r[MAXCOORD];
; 727  :   REAL dAs1[MAXCOORD],dAs2[MAXCOORD];
; 728  :   REAL rr2,rs1,rs2,t1r,t1s1,t1s2,t2r,t2s1,t2s2;
; 729  :   REAL s1s1,s1s2,s2s2,t1t1,t1t2,t2t2;
; 730  :   REAL dEdrr2,dEdrs1,dEdrs2,dEdt1r,dEdt1s1,dEdt1s2,dEdt2r,dEdt2s1,dEdt2s2;
; 731  :   REAL angfac,mult,qq;
; 732  :   REAL As,AsAt,detr;
; 733  :   facetedge_id fe;
; 734  :   vertex_id v[FACET_VERTS],w[FACET_VERTS];
; 735  :   int i,j;
; 736  : 
; 737  :   for ( i = 0 ; i < FACET_VERTS ; i++ )

	add	ecx, 4
	cmp	ecx, 12					; 0000000cH
	jl	SHORT $LN48@sphere_kno@3
	fstp	ST(0)

; 739  :   fe = get_facet_fe(f1);

	test	edx, 268435456				; 10000000H
	jne	SHORT $LN52@sphere_kno@3
	xor	ebx, ebx
	jmp	SHORT $LN51@sphere_kno@3
$LN52@sphere_kno@3:
	mov	ecx, DWORD PTR _web+236
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ebx, DWORD PTR [eax+28]
	test	edx, 134217728				; 08000000H
	je	SHORT $LN51@sphere_kno@3
	xor	ebx, 134217728				; 08000000H
$LN51@sphere_kno@3:

; 740  :   for ( j = 0 ; j < FACET_VERTS ; j++ )
; 741  :     { v[j] = get_fe_tailv(fe);

	mov	edx, DWORD PTR _web+460
	mov	esi, DWORD PTR _web+124
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _dymem
	mov	eax, ebx
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR tv3974[ebp], ecx
	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+edx+304]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN58@sphere_kno@3
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	esi, DWORD PTR _web+636
	lea	eax, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR [eax+ecx]
	jmp	SHORT $LN57@sphere_kno@3
$LN58@sphere_kno@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [ecx+eax]
$LN57@sphere_kno@3:

; 742  :       x[j] = get_coord(v[j]);

	mov	esi, DWORD PTR _web+104
	mov	edx, DWORD PTR [esi+edx+64]
	mov	esi, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+eax*4]
	add	esi, edx
	mov	DWORD PTR tv4011[ebp], edx
	mov	DWORD PTR _x$[ebp], esi

; 743  :       fe = get_next_edge(fe);

	test	ebx, 134217728				; 08000000H
	je	SHORT $LN62@sphere_kno@3
	mov	edx, DWORD PTR tv3974[ebp]
	mov	edx, DWORD PTR [edx+28]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN41@sphere_kno@3
$LN62@sphere_kno@3:
	mov	eax, DWORD PTR tv3974[ebp]
	mov	edx, DWORD PTR [eax+32]
$LN41@sphere_kno@3:

; 740  :   for ( j = 0 ; j < FACET_VERTS ; j++ )
; 741  :     { v[j] = get_fe_tailv(fe);

	mov	ebx, DWORD PTR _web+460
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ebx+eax*4]
	mov	eax, edx
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ebx+20]
	mov	DWORD PTR tv3974[ebp], ebx
	mov	ebx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN114@sphere_kno@3
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	ebx, DWORD PTR _web+636
	lea	eax, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR [eax+ecx]
	jmp	SHORT $LN115@sphere_kno@3
$LN114@sphere_kno@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	eax, DWORD PTR [ecx+eax]
$LN115@sphere_kno@3:

; 742  :       x[j] = get_coord(v[j]);

	mov	ebx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	add	eax, DWORD PTR tv4011[ebp]
	mov	DWORD PTR _x$[ebp+4], eax

; 743  :       fe = get_next_edge(fe);

	test	edx, 134217728				; 08000000H
	je	SHORT $LN116@sphere_kno@3
	mov	edx, DWORD PTR tv3974[ebp]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN117@sphere_kno@3
$LN116@sphere_kno@3:
	mov	eax, DWORD PTR tv3974[ebp]
	mov	eax, DWORD PTR [eax+32]
$LN117@sphere_kno@3:

; 740  :   for ( j = 0 ; j < FACET_VERTS ; j++ )
; 741  :     { v[j] = get_fe_tailv(fe);

	mov	ebx, DWORD PTR _web+460
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN119@sphere_kno@3
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+636
	lea	eax, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [eax+ecx]
	jmp	SHORT $LN120@sphere_kno@3
$LN119@sphere_kno@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [ecx+eax]
$LN120@sphere_kno@3:

; 742  :       x[j] = get_coord(v[j]);

	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ecx+eax*4]
	add	ebx, DWORD PTR tv4011[ebp]

; 744  :     }
; 745  : 
; 746  :   for ( j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	cmp	DWORD PTR _web+616, 4
	mov	DWORD PTR _x$[ebp+8], ebx
	jl	$LC124@sphere_kno@3

; 748  :         s2[j] = x[2][j] - x[0][j];

	lea	edx, DWORD PTR [ebx+16]
	sub	ebx, esi
	mov	DWORD PTR tv5747[ebp], ebx
	lea	ebx, DWORD PTR _s1$[ebp]
	sub	ebx, esi
	mov	DWORD PTR tv5762[ebp], ebx
	lea	ebx, DWORD PTR _s2$[ebp]
	sub	ebx, esi
	mov	DWORD PTR tv5770[ebp], ebx
	lea	ebx, DWORD PTR _s1$[ebp+8]
	sub	ebx, esi
	mov	DWORD PTR tv5774[ebp], ebx
	lea	ebx, DWORD PTR _s2$[ebp+8]
	sub	ebx, esi
	mov	DWORD PTR tv5778[ebp], ebx
	lea	ebx, DWORD PTR _s1$[ebp+16]
	sub	ebx, esi
	mov	DWORD PTR tv5782[ebp], ebx
	lea	ebx, DWORD PTR _s2$[ebp+16]
	sub	ebx, esi
	mov	DWORD PTR tv5786[ebp], ebx
	mov	ebx, DWORD PTR _x$[ebp+4]
	sub	ebx, DWORD PTR _x$[ebp+8]
	lea	eax, DWORD PTR [esi+8]
	mov	DWORD PTR tv5742[ebp], ebx
	npad	4
$LL125@sphere_kno@3:

; 747  :      { s1[j] = x[1][j] - x[0][j];

	mov	esi, DWORD PTR _x$[ebp+4]
	fld	QWORD PTR [esi+ecx*8]
	mov	esi, DWORD PTR tv5747[ebp]
	fsub	QWORD PTR [eax-8]
	add	esi, eax

; 748  :         s2[j] = x[2][j] - x[0][j];

	add	ecx, 4
	add	eax, 32					; 00000020H
	fstp	QWORD PTR _s1$[ebp+ecx*8-32]
	add	edx, 32					; 00000020H
	fld	QWORD PTR [edx-48]
	fsub	QWORD PTR [eax-40]
	fstp	QWORD PTR _s2$[ebp+ecx*8-32]
	fld	QWORD PTR [esi+ebx]
	mov	ebx, DWORD PTR tv5762[ebp]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv5742[ebp]
	fld	QWORD PTR [esi]
	mov	esi, DWORD PTR tv5770[ebp]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv5774[ebp]
	fld	QWORD PTR [ebx+edx-32]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv5778[ebp]
	fld	QWORD PTR [edx-32]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR _x$[ebp+4]
	fld	QWORD PTR [esi+ecx*8-8]
	mov	esi, DWORD PTR tv5782[ebp]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv5786[ebp]
	fld	QWORD PTR [edx-24]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR _web+616
	add	esi, -3					; fffffffdH
	cmp	ecx, esi
	jl	$LL125@sphere_kno@3
	mov	esi, DWORD PTR _x$[ebp]
	mov	ebx, DWORD PTR _x$[ebp+8]
$LC124@sphere_kno@3:

; 744  :     }
; 745  : 
; 746  :   for ( j = 0 ; j < SDIM ; j++ )

	cmp	ecx, DWORD PTR _web+616
	jge	SHORT $LN123@sphere_kno@3
	mov	edx, DWORD PTR _x$[ebp+4]
	lea	eax, DWORD PTR _s1$[ebp]
	sub	edx, eax
	sub	ebx, eax
	sub	esi, eax
	npad	1
$LC39@sphere_kno@3:
	lea	eax, DWORD PTR _s1$[ebp+ecx*8]

; 747  :      { s1[j] = x[1][j] - x[0][j];

	fld	QWORD PTR [eax+edx]
	inc	ecx
	fsub	QWORD PTR [eax+esi]
	fstp	QWORD PTR [eax]

; 748  :         s2[j] = x[2][j] - x[0][j];

	fld	QWORD PTR [eax+ebx]
	fsub	QWORD PTR [eax+esi]
	fstp	QWORD PTR _s2$[ebp+ecx*8-8]
	cmp	ecx, DWORD PTR _web+616
	jl	SHORT $LC39@sphere_kno@3
$LN123@sphere_kno@3:

; 749  :      }
; 750  :   s1s1 = SDIM_dot(s1,s1);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _s1$[ebp]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	fstp	QWORD PTR _s1s1$[ebp]

; 751  :   s1s2 = SDIM_dot(s1,s2);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _s2$[ebp]
	push	edx
	lea	eax, DWORD PTR _s1$[ebp]
	push	eax
	call	_dot
	fstp	QWORD PTR _s1s2$[ebp]

; 752  :   s2s2 = SDIM_dot(s2,s2);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _s2$[ebp]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	fst	QWORD PTR _s2s2$[ebp]

; 753  :   As = sqrt(s1s1*s2s2 - s1s2*s1s2);

	fmul	QWORD PTR _s1s1$[ebp]
	add	esp, 36					; 00000024H
	fld	QWORD PTR _s1s2$[ebp]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	call	__CIsqrt
	fst	QWORD PTR _As$[ebp]

; 754  :   for ( j = 0 ; j < SDIM ; j++ ) 

	mov	edx, DWORD PTR _web+616
	fld	QWORD PTR _s2s2$[ebp]
	fld	QWORD PTR _s1s2$[ebp]
	xor	eax, eax
	fld	QWORD PTR _s1s1$[ebp]
	cmp	edx, 4
	jl	$LC127@sphere_kno@3
	lea	ecx, DWORD PTR [edx-3]
$LN128@sphere_kno@3:

; 755  :   {
; 756  :           dAs1[j] = (s2s2*s1[j] - s1s2*s2[j])/As;

	fld	QWORD PTR _s1$[ebp+eax*8]

; 757  :           dAs2[j] = (s1s1*s2[j] - s1s2*s1[j])/As;

	add	eax, 4
	fmul	ST(0), ST(3)
	fld	QWORD PTR _s2$[ebp+eax*8-32]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR _dAs1$[ebp+eax*8-32]
	fld	QWORD PTR _s2$[ebp+eax*8-32]
	fmul	ST(0), ST(1)
	fld	QWORD PTR _s1$[ebp+eax*8-32]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR _dAs2$[ebp+eax*8-32]
	fld	QWORD PTR _s1$[ebp+eax*8-24]
	fmul	ST(0), ST(3)
	fld	ST(2)
	fmul	QWORD PTR _s2$[ebp+eax*8-24]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR _dAs1$[ebp+eax*8-24]
	fld	ST(0)
	fmul	QWORD PTR _s2$[ebp+eax*8-24]
	fld	QWORD PTR _s1$[ebp+eax*8-24]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR _dAs2$[ebp+eax*8-24]
	fld	QWORD PTR _s1$[ebp+eax*8-16]
	fmul	ST(0), ST(3)
	fld	QWORD PTR _s2$[ebp+eax*8-16]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR _dAs1$[ebp+eax*8-16]
	fld	QWORD PTR _s2$[ebp+eax*8-16]
	fmul	ST(0), ST(1)
	fld	QWORD PTR _s1$[ebp+eax*8-16]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR _dAs2$[ebp+eax*8-16]
	fld	ST(2)
	fmul	QWORD PTR _s1$[ebp+eax*8-8]
	fld	QWORD PTR _s2$[ebp+eax*8-8]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR _dAs1$[ebp+eax*8-8]
	fld	QWORD PTR _s2$[ebp+eax*8-8]
	fmul	ST(0), ST(1)
	fld	ST(2)
	fmul	QWORD PTR _s1$[ebp+eax*8-8]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR _dAs2$[ebp+eax*8-8]
	cmp	eax, ecx
	jl	$LN128@sphere_kno@3
$LC127@sphere_kno@3:

; 754  :   for ( j = 0 ; j < SDIM ; j++ ) 

	cmp	eax, edx
	jge	SHORT $LN181@sphere_kno@3
$LC36@sphere_kno@3:

; 755  :   {
; 756  :           dAs1[j] = (s2s2*s1[j] - s1s2*s2[j])/As;

	fld	QWORD PTR _s1$[ebp+eax*8]
	inc	eax
	fmul	ST(0), ST(3)
	fld	QWORD PTR _s2$[ebp+eax*8-8]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR _dAs1$[ebp+eax*8-8]

; 757  :           dAs2[j] = (s1s1*s2[j] - s1s2*s1[j])/As;

	fld	QWORD PTR _s2$[ebp+eax*8-8]
	fmul	ST(0), ST(1)
	fld	QWORD PTR _s1$[ebp+eax*8-8]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR _dAs2$[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LC36@sphere_kno@3
$LN181@sphere_kno@3:

; 758  :   }
; 759  :   FOR_ALL_FACETS(f2)

	mov	ecx, DWORD PTR _web+272
	fstp	ST(3)
	fstp	ST(0)
	mov	edx, ecx
	shr	edx, 28					; 0000001cH
	fstp	ST(1)
	and	edx, 1
	fstp	ST(0)
	je	$LN151@sphere_kno@3
	fld	QWORD PTR __real@4008000000000000
$LN162@sphere_kno@3:
	mov	esi, DWORD PTR _web+236
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	esi, DWORD PTR [eax+esi]
	mov	DWORD PTR tv4217[ebp], eax
	mov	eax, DWORD PTR [esi+8]
	and	eax, 1
	xor	ebx, ebx
	or	eax, ebx
	je	$LN32@sphere_kno@3

; 760  :     { if ( f1 == f2 ) continue; /* don't do self */

	cmp	DWORD PTR _f1$[ebp], ecx
	je	$LN32@sphere_kno@3

; 761  :       fe = get_facet_fe(f2);

	test	edx, edx
	jne	SHORT $LN66@sphere_kno@3
	xor	esi, esi
	jmp	SHORT $LN65@sphere_kno@3
$LN66@sphere_kno@3:
	mov	esi, DWORD PTR [esi+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN65@sphere_kno@3
	xor	esi, 134217728				; 08000000H
$LN65@sphere_kno@3:

; 762  :       for ( j = 0 ; j < FACET_VERTS ; j++ )
; 763  :         { w[j] = get_fe_tailv(fe);

	mov	edx, DWORD PTR _web+460
	mov	ebx, DWORD PTR _web+124
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _web+216
	mov	eax, esi
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR tv3974[ebp], ecx
	mov	ecx, DWORD PTR _dymem
	mov	edx, DWORD PTR [edx+ecx+304]
	mov	DWORD PTR tv3991[ebp], edx
	test	eax, 134217728				; 08000000H
	je	SHORT $LN72@sphere_kno@3
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	ebx, DWORD PTR _web+636
	lea	eax, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR [eax+edx]
	jmp	SHORT $LN71@sphere_kno@3
$LN72@sphere_kno@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	eax, DWORD PTR [edx+eax]
$LN71@sphere_kno@3:

; 764  :           y[j] = get_coord(w[j]);

	mov	ebx, DWORD PTR _web+104
	mov	ebx, DWORD PTR [ebx+ecx+64]
	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]

; 765  :           fe = get_next_edge(fe);

	mov	eax, DWORD PTR tv3974[ebp]
	add	ecx, ebx
	mov	DWORD PTR tv4011[ebp], ebx
	mov	DWORD PTR _y$[ebp], ecx
	test	esi, 134217728				; 08000000H
	je	SHORT $LN76@sphere_kno@3
	mov	esi, DWORD PTR [eax+28]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN26@sphere_kno@3
$LN76@sphere_kno@3:
	mov	esi, DWORD PTR [eax+32]
$LN26@sphere_kno@3:

; 762  :       for ( j = 0 ; j < FACET_VERTS ; j++ )
; 763  :         { w[j] = get_fe_tailv(fe);

	mov	ebx, DWORD PTR _web+460
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ebx+eax*4]
	mov	eax, esi
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ebx+20]
	mov	DWORD PTR tv3974[ebp], ebx
	mov	ebx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN136@sphere_kno@3
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	ebx, DWORD PTR _web+636
	lea	eax, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR [eax+edx]
	jmp	SHORT $LN137@sphere_kno@3
$LN136@sphere_kno@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	eax, DWORD PTR [edx+eax]
$LN137@sphere_kno@3:

; 764  :           y[j] = get_coord(w[j]);

	mov	edx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
	add	edx, DWORD PTR tv4011[ebp]

; 765  :           fe = get_next_edge(fe);

	mov	eax, DWORD PTR tv3974[ebp]
	mov	DWORD PTR _y$[ebp+4], edx
	test	esi, 134217728				; 08000000H
	je	SHORT $LN138@sphere_kno@3
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN139@sphere_kno@3
$LN138@sphere_kno@3:
	mov	eax, DWORD PTR [eax+32]
$LN139@sphere_kno@3:

; 762  :       for ( j = 0 ; j < FACET_VERTS ; j++ )
; 763  :         { w[j] = get_fe_tailv(fe);

	mov	ebx, DWORD PTR _web+460
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ebx+esi*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [esi+20]
	mov	esi, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN141@sphere_kno@3
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	esi, DWORD PTR _web+636
	lea	eax, DWORD PTR [eax+esi*4]
	mov	esi, DWORD PTR tv3991[ebp]
	mov	eax, DWORD PTR [eax+esi]
	jmp	SHORT $LN142@sphere_kno@3
$LN141@sphere_kno@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	esi, DWORD PTR tv3991[ebp]
	mov	eax, DWORD PTR [esi+eax]
$LN142@sphere_kno@3:

; 766  :         }
; 767  :       t1t1=t1t2=t2t2=rr2=rs1=rs2=t1r=t1s1=t1s2=t2r=t2s1=t2s2=0.0;

	fldz
	mov	esi, DWORD PTR _web+12
	fst	QWORD PTR _t2s2$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+eax*4]
	fld	ST(0)
	add	esi, DWORD PTR tv4011[ebp]
	fst	QWORD PTR _t2s1$[ebp]
	fxch	ST(1)

; 768  :       for (j=0; j<SDIM; j++)

	xor	ebx, ebx
	cmp	DWORD PTR _web+616, 4
	fst	QWORD PTR _t2r$[ebp]
	fst	QWORD PTR _t1s2$[ebp]
	mov	DWORD PTR _y$[ebp+8], esi
	fst	QWORD PTR _t1s1$[ebp]
	fld	ST(0)
	fst	QWORD PTR _t1r$[ebp]
	fld	ST(1)
	fst	QWORD PTR _rs2$[ebp]
	fxch	ST(2)
	fst	QWORD PTR _rs1$[ebp]
	fld	ST(0)
	fst	QWORD PTR _rr2$[ebp]
	fld	ST(1)
	fst	QWORD PTR _t2t2$[ebp]
	fxch	ST(2)
	fst	QWORD PTR _t1t2$[ebp]
	fstp	QWORD PTR _t1t1$[ebp]
	jl	$LN159@sphere_kno@3

; 772  :           t1t1 += t1[j]*t1[j]; t1t2 += t1[j]*t2[j]; t2t2 += t2[j]*t2[j];

	lea	edi, DWORD PTR [esi+16]
	fstp	ST(3)
	sub	esi, ecx
	fstp	ST(0)
	mov	DWORD PTR tv6939[ebp], esi
	fstp	ST(1)
	lea	eax, DWORD PTR [ecx+8]
	fstp	ST(0)
	neg	ecx
	lea	esi, DWORD PTR _t1$[ebp+ecx]
	mov	DWORD PTR tv10853[ebp], esi
	lea	esi, DWORD PTR _t2$[ebp+ecx]
	mov	DWORD PTR tv10855[ebp], esi
	lea	esi, DWORD PTR _t1$[ebp+ecx+8]
	mov	DWORD PTR tv10857[ebp], esi
	lea	esi, DWORD PTR _t2$[ebp+ecx+8]
	mov	DWORD PTR tv10859[ebp], esi
	lea	esi, DWORD PTR _t1$[ebp+ecx+16]
	mov	DWORD PTR tv10861[ebp], esi
	mov	esi, edx
	sub	esi, DWORD PTR _y$[ebp+8]
	lea	ecx, DWORD PTR _t2$[ebp+ecx+16]
	mov	DWORD PTR tv10863[ebp], ecx
	mov	DWORD PTR tv6934[ebp], esi
$LN217@sphere_kno@3:
	fstp	ST(0)
	mov	ecx, DWORD PTR tv6939[ebp]
	fld	QWORD PTR [edx+ebx*8]
	add	ecx, eax
	fsub	QWORD PTR [eax-8]
	fst	QWORD PTR _t1$[ebp+ebx*8]
	fld	QWORD PTR [edi-16]
	fsub	QWORD PTR [eax-8]
	fst	QWORD PTR _t2$[ebp+ebx*8]
	fld	QWORD PTR [ecx+esi]
	mov	esi, DWORD PTR tv10853[ebp]
	fsub	QWORD PTR [eax]
	fst	QWORD PTR [eax+esi]
	mov	esi, DWORD PTR tv6934[ebp]
	fld	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv10855[ebp]
	fsub	QWORD PTR [eax]
	fst	QWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR tv10857[ebp]
	fld	QWORD PTR [esi+edi]
	fsub	QWORD PTR [eax+8]
	fst	QWORD PTR tv7020[ebp]
	fst	QWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR tv10859[ebp]
	fld	QWORD PTR [edi]
	fsub	QWORD PTR [eax+8]
	fst	QWORD PTR tv7023[ebp]
	fstp	QWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR tv10861[ebp]
	fld	QWORD PTR [edx+ebx*8+24]
	fsub	QWORD PTR [eax+16]
	fst	QWORD PTR tv10728[ebp]
	fstp	QWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR tv10863[ebp]
	fld	QWORD PTR [edi+8]
	fsub	QWORD PTR [eax+16]
	fst	QWORD PTR tv7034[ebp]
	fstp	QWORD PTR [eax+ecx]
	fld	ST(4)
	fmul	ST(0), ST(5)
	fadd	QWORD PTR _t1t1$[ebp]
	fld	ST(3)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv10728[ebp]
	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _t1t1$[ebp]
	fld	ST(3)
	fmulp	ST(5), ST(0)
	fxch	ST(4)
	fadd	QWORD PTR _t1t2$[ebp]
	fld	ST(1)
	fmulp	ST(3), ST(0)
	faddp	ST(2), ST(0)
	fld	QWORD PTR tv7023[ebp]
	fld	QWORD PTR tv7020[ebp]
	fmul	ST(0), ST(1)
	faddp	ST(3), ST(0)
	fld	QWORD PTR tv7034[ebp]
	fld	ST(0)
	fmulp	ST(6), ST(0)
	fxch	ST(3)
	faddp	ST(5), ST(0)
	fxch	ST(4)
	fstp	QWORD PTR _t1t2$[ebp]
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fadd	QWORD PTR _t2t2$[ebp]
	fld	ST(2)
	fmulp	ST(3), ST(0)
	faddp	ST(2), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	mov	ecx, DWORD PTR _web+616
	faddp	ST(2), ST(0)
	add	ebx, 4
	add	ecx, -3					; fffffffdH
	fmul	ST(0), ST(0)
	add	eax, 32					; 00000020H
	add	edi, 32					; 00000020H
	faddp	ST(1), ST(0)
	fst	QWORD PTR _t2t2$[ebp]
	cmp	ebx, ecx
	jl	$LN217@sphere_kno@3
	fld	QWORD PTR _rs2$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	fld	QWORD PTR _t1r$[ebp]
	mov	esi, DWORD PTR _y$[ebp+8]
	fld	QWORD PTR _t2s1$[ebp]
	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	fld	QWORD PTR _rr2$[ebp]
	fxch	ST(1)
	fxch	ST(4)
	fxch	ST(1)
$LN159@sphere_kno@3:

; 768  :       for (j=0; j<SDIM; j++)

	cmp	ebx, DWORD PTR _web+616
	jge	$LN163@sphere_kno@3
	lea	edi, DWORD PTR _t1$[ebp]
	mov	eax, edx
	sub	eax, edi
	mov	DWORD PTR tv7203[ebp], eax
	mov	eax, esi
	sub	eax, edi
	mov	DWORD PTR tv7208[ebp], eax
	mov	eax, ecx
	sub	eax, edi
	mov	DWORD PTR tv7213[ebp], eax
$LN156@sphere_kno@3:

; 769  :       {
; 770  :           t1[j] = y[1][j] - y[0][j];

	mov	edi, DWORD PTR tv7203[ebp]
	lea	eax, DWORD PTR _t1$[ebp+ebx*8]
	fld	QWORD PTR [eax+edi]
	mov	edi, DWORD PTR tv7213[ebp]
	fsub	QWORD PTR [eax+edi]

; 771  :           t2[j] = y[2][j] - y[0][j];

	mov	edi, DWORD PTR tv7208[ebp]
	inc	ebx
	fst	QWORD PTR tv10779[ebp]
	fst	QWORD PTR [eax]
	fld	QWORD PTR [eax+edi]
	mov	edi, DWORD PTR tv7213[ebp]
	fsub	QWORD PTR [eax+edi]
	fst	QWORD PTR tv10787[ebp]
	fstp	QWORD PTR _t2$[ebp+ebx*8-8]

; 772  :           t1t1 += t1[j]*t1[j]; t1t2 += t1[j]*t2[j]; t2t2 += t2[j]*t2[j];

	fmul	ST(0), ST(0)
	fadd	QWORD PTR _t1t1$[ebp]
	fstp	QWORD PTR _t1t1$[ebp]
	fld	QWORD PTR tv10787[ebp]
	fmul	QWORD PTR tv10779[ebp]
	fadd	QWORD PTR _t1t2$[ebp]
	fstp	QWORD PTR _t1t2$[ebp]
	fld	QWORD PTR tv10787[ebp]
	fmul	ST(0), ST(0)
	faddp	ST(2), ST(0)
	cmp	ebx, DWORD PTR _web+616
	jl	SHORT $LN156@sphere_kno@3
	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	fxch	ST(1)
	fst	QWORD PTR _t2t2$[ebp]
	fxch	ST(1)
$LN163@sphere_kno@3:

; 773  :       }
; 774  :       for (j=0; j<SDIM; j++)

	xor	eax, eax
	cmp	DWORD PTR _web+616, 4
	mov	DWORD PTR _j$[ebp], eax
	jl	$LN164@sphere_kno@3

; 779  :           rs2 += r[j]*s2[j]; t1s2 += t1[j]*s2[j]; t2s2 += t2[j]*s2[j];

	mov	ebx, ecx
	fstp	ST(3)
	sub	ebx, edx
	fstp	ST(0)
	mov	DWORD PTR tv8510[ebp], ebx
	fstp	ST(2)
	mov	ebx, DWORD PTR _y$[ebp+8]
	sub	ebx, edx
	mov	DWORD PTR tv8515[ebp], ebx
	mov	ebx, DWORD PTR _x$[ebp]
	lea	eax, DWORD PTR [edx+8]
	neg	edx
	add	ebx, edx
	mov	DWORD PTR tv10866[ebp], ebx
	mov	ebx, DWORD PTR _x$[ebp+4]
	add	ebx, edx
	mov	DWORD PTR tv10868[ebp], ebx
	mov	ebx, DWORD PTR _x$[ebp+8]
	add	ebx, edx
	mov	DWORD PTR tv10870[ebp], ebx
	lea	ebx, DWORD PTR _r$[ebp+edx]
	mov	DWORD PTR tv10872[ebp], ebx
	lea	ebx, DWORD PTR _r$[ebp+edx+8]
	mov	DWORD PTR tv10874[ebp], ebx
	lea	ebx, DWORD PTR _r$[ebp+edx+16]
	mov	DWORD PTR tv10876[ebp], ebx
	lea	ebx, DWORD PTR _s1$[ebp+edx]
	mov	DWORD PTR tv10878[ebp], ebx
	lea	ebx, DWORD PTR _s1$[ebp+edx+8]
	mov	DWORD PTR tv10880[ebp], ebx
	lea	ebx, DWORD PTR _s1$[ebp+edx+16]
	mov	DWORD PTR tv10882[ebp], ebx
	lea	ebx, DWORD PTR _t1$[ebp+edx]
	mov	DWORD PTR tv10884[ebp], ebx
	lea	ebx, DWORD PTR _t1$[ebp+edx+8]
	mov	DWORD PTR tv10886[ebp], ebx
	lea	ebx, DWORD PTR _t1$[ebp+edx+16]
	mov	DWORD PTR tv10888[ebp], ebx
	lea	ebx, DWORD PTR _t2$[ebp+edx]
	mov	DWORD PTR tv10890[ebp], ebx
	lea	ebx, DWORD PTR _s2$[ebp+edx]
	mov	DWORD PTR tv10892[ebp], ebx
	lea	ebx, DWORD PTR _t2$[ebp+edx+8]
	mov	DWORD PTR tv10894[ebp], ebx
	lea	ebx, DWORD PTR _s2$[ebp+edx+8]
	mov	DWORD PTR tv10896[ebp], ebx
	lea	ebx, DWORD PTR _t2$[ebp+edx+16]
	mov	DWORD PTR tv10898[ebp], ebx
	mov	ebx, DWORD PTR _y$[ebp]
	lea	edx, DWORD PTR _s2$[ebp+edx+16]
	mov	DWORD PTR tv10900[ebp], edx
	mov	edx, DWORD PTR _y$[ebp+8]
	sub	ebx, edx
	mov	DWORD PTR tv8811[ebp], ebx
	mov	ebx, DWORD PTR _x$[ebp]
	mov	edi, DWORD PTR _x$[ebp]
	neg	edx
	add	ebx, edx
	mov	DWORD PTR tv10903[ebp], ebx
	mov	ebx, DWORD PTR _x$[ebp+4]
	add	ebx, edx
	add	edx, DWORD PTR _x$[ebp+8]
	mov	DWORD PTR tv10905[ebp], ebx
	mov	ebx, DWORD PTR _y$[ebp]
	mov	DWORD PTR tv10907[ebp], edx
	mov	edx, DWORD PTR _x$[ebp]
	sub	ebx, edx
	mov	DWORD PTR tv8935[ebp], ebx
	mov	ebx, DWORD PTR _x$[ebp+4]
	sub	ebx, edx
	mov	DWORD PTR tv8940[ebp], ebx
	mov	ebx, DWORD PTR _x$[ebp+8]
	sub	ebx, edx
	mov	edx, DWORD PTR _y$[ebp]
	add	edi, 24					; 00000018H
	add	esi, 16					; 00000010H
	mov	DWORD PTR tv5747[ebp], ebx
	neg	edx
	lea	ebx, DWORD PTR _r$[ebp+edx]
	mov	DWORD PTR tv10909[ebp], ebx
	mov	ebx, DWORD PTR _x$[ebp+4]
	add	ebx, edx
	mov	DWORD PTR tv10911[ebp], ebx
	mov	ebx, DWORD PTR _x$[ebp+8]
	add	ebx, edx
	mov	DWORD PTR tv10913[ebp], ebx
	lea	ebx, DWORD PTR _s1$[ebp+edx]
	mov	DWORD PTR tv10915[ebp], ebx
	lea	ebx, DWORD PTR _t1$[ebp+edx]
	mov	DWORD PTR tv10853[ebp], ebx
	lea	ebx, DWORD PTR _t2$[ebp+edx]
	lea	edx, DWORD PTR _s2$[ebp+edx]
	mov	DWORD PTR tv10917[ebp], edx
	mov	edx, DWORD PTR _web+616
	add	edx, -4					; fffffffcH
	shr	edx, 2
	inc	edx
	mov	DWORD PTR tv10855[ebp], ebx
	lea	ebx, DWORD PTR [edx*4]
	mov	DWORD PTR _j$[ebp], ebx
	jmp	SHORT $LN150@sphere_kno@3
$LL233@sphere_kno@3:

; 773  :       }
; 774  :       for (j=0; j<SDIM; j++)

	fstp	ST(0)
	fstp	ST(1)
	fld	QWORD PTR _t1r$[ebp]
	fxch	ST(1)
$LN150@sphere_kno@3:

; 775  :       {
; 776  :           r[j] = (y[0][j]+y[1][j]+y[2][j] - (x[0][j]+x[1][j]+x[2][j]))/3;

	fld	QWORD PTR [eax-8]
	mov	ebx, DWORD PTR tv10911[ebp]
	fadd	QWORD PTR [ecx]
	fadd	QWORD PTR [esi-16]
	fld	QWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR tv10913[ebp]
	fadd	QWORD PTR [edi-24]
	fadd	QWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR tv10909[ebp]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(3)
	fst	QWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR tv8510[ebp]
	fld	QWORD PTR [ebx+eax]
	fadd	QWORD PTR [eax]
	mov	ebx, DWORD PTR tv8515[ebp]
	fadd	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv10868[ebp]
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv10866[ebp]
	fadd	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv10870[ebp]
	fadd	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv10872[ebp]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fst	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv8811[ebp]
	fld	QWORD PTR [ebx+esi]
	fadd	QWORD PTR [eax+8]
	mov	ebx, DWORD PTR tv10905[ebp]
	fadd	QWORD PTR [esi]
	fld	QWORD PTR [ebx+esi]
	mov	ebx, DWORD PTR tv10903[ebp]
	fadd	QWORD PTR [ebx+esi]
	mov	ebx, DWORD PTR tv10907[ebp]
	fadd	QWORD PTR [ebx+esi]
	mov	ebx, DWORD PTR tv10874[ebp]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(5)
	fst	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv8935[ebp]
	fld	QWORD PTR [ebx+edi]
	fadd	QWORD PTR [eax+16]
	mov	ebx, DWORD PTR tv8940[ebp]
	fadd	QWORD PTR [esi+8]
	fld	QWORD PTR [ebx+edi]
	mov	ebx, DWORD PTR tv5747[ebp]
	fadd	QWORD PTR [edi]
	fadd	QWORD PTR [ebx+edi]
	mov	ebx, DWORD PTR tv10876[ebp]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(6)
	fst	QWORD PTR [ebx+eax]

; 777  :           rr2 += r[j]*r[j]; t1r += t1[j]*r[j]; t2r += t2[j]*r[j];

	fld	ST(3)
	fmul	ST(0), ST(4)
	mov	ebx, DWORD PTR tv10853[ebp]
	faddp	ST(5), ST(0)
	fld	ST(2)
	fmul	ST(0), ST(3)
	faddp	ST(5), ST(0)
	fld	ST(1)
	fmul	ST(0), ST(2)
	faddp	ST(5), ST(0)
	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(5), ST(0)
	fld	ST(3)
	fmul	QWORD PTR [ecx+ebx]
	mov	ebx, DWORD PTR tv10884[ebp]
	faddp	ST(6), ST(0)
	fld	ST(2)
	fmul	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv10886[ebp]
	faddp	ST(6), ST(0)
	fld	ST(1)
	fmul	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv10888[ebp]
	faddp	ST(6), ST(0)
	fld	QWORD PTR [ebx+eax]
	fmul	ST(0), ST(1)
	faddp	ST(6), ST(0)
	mov	ebx, DWORD PTR tv10855[ebp]
	fxch	ST(5)
	fstp	QWORD PTR _t1r$[ebp]
	fld	ST(2)
	fmul	QWORD PTR [ecx+ebx]
	mov	ebx, DWORD PTR tv10890[ebp]
	fadd	QWORD PTR _t2r$[ebp]
	fld	ST(2)
	fmul	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv10894[ebp]
	faddp	ST(1), ST(0)
	fld	ST(1)
	fmul	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv10898[ebp]
	faddp	ST(1), ST(0)
	fld	ST(5)
	fmul	QWORD PTR [ebx+eax]

; 778  :           rs1 += r[j]*s1[j]; t1s1 += t1[j]*s1[j]; t2s1 += t2[j]*s1[j];

	mov	ebx, DWORD PTR tv10915[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _t2r$[ebp]
	fld	ST(2)
	fmul	QWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR tv10878[ebp]
	fadd	QWORD PTR _rs1$[ebp]
	fld	ST(2)
	fmul	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv10880[ebp]
	faddp	ST(1), ST(0)
	fld	ST(1)
	fmul	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv10882[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv10915[ebp]
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _rs1$[ebp]
	fld	QWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR tv10853[ebp]
	fmul	QWORD PTR [ecx+ebx]
	mov	ebx, DWORD PTR tv10884[ebp]
	fadd	QWORD PTR _t1s1$[ebp]
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv10878[ebp]
	fmul	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv10886[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv10880[ebp]
	fmul	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv10882[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv10888[ebp]
	fmul	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv10855[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _t1s1$[ebp]
	fld	QWORD PTR [ecx+ebx]
	mov	ebx, DWORD PTR tv10915[ebp]
	fmul	QWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR tv10890[ebp]
	fadd	QWORD PTR _t2s1$[ebp]
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv10878[ebp]
	fmul	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv10894[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv10880[ebp]
	fmul	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv10882[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv10898[ebp]
	fmul	QWORD PTR [ebx+eax]

; 779  :           rs2 += r[j]*s2[j]; t1s2 += t1[j]*s2[j]; t2s2 += t2[j]*s2[j];

	mov	ebx, DWORD PTR tv10917[ebp]
	faddp	ST(1), ST(0)
	fst	QWORD PTR _t2s1$[ebp]
	fxch	ST(3)
	fmul	QWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR tv10892[ebp]
	add	ecx, 32					; 00000020H
	add	eax, 32					; 00000020H
	fadd	QWORD PTR _rs2$[ebp]
	add	esi, 32					; 00000020H
	fxch	ST(2)
	add	edi, 32					; 00000020H
	dec	edx
	fmul	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv10896[ebp]
	faddp	ST(2), ST(0)
	fmul	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv10900[ebp]
	faddp	ST(1), ST(0)
	fxch	ST(3)
	fmul	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv10917[ebp]
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fst	QWORD PTR _rs2$[ebp]
	fld	QWORD PTR [ebx+ecx-32]
	mov	ebx, DWORD PTR tv10853[ebp]
	fmul	QWORD PTR [ecx+ebx-32]
	mov	ebx, DWORD PTR tv10884[ebp]
	fadd	QWORD PTR _t1s2$[ebp]
	fld	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv10892[ebp]
	fmul	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv10886[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv10896[ebp]
	fmul	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv10888[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv10900[ebp]
	fmul	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv10855[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _t1s2$[ebp]
	fld	QWORD PTR [ecx+ebx-32]
	mov	ebx, DWORD PTR tv10917[ebp]
	fmul	QWORD PTR [ebx+ecx-32]
	mov	ebx, DWORD PTR tv10890[ebp]
	fadd	QWORD PTR _t2s2$[ebp]
	fld	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv10892[ebp]
	fmul	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv10894[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv10896[ebp]
	fmul	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv10898[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv10900[ebp]
	fmul	QWORD PTR [ebx+eax-32]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _t2s2$[ebp]
	jne	$LL233@sphere_kno@3

; 773  :       }
; 774  :       for (j=0; j<SDIM; j++)

	fld	QWORD PTR _t2t2$[ebp]
	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	fld	QWORD PTR _t1r$[ebp]
	mov	esi, DWORD PTR _y$[ebp+8]
	mov	ecx, DWORD PTR _y$[ebp]
	fxch	ST(2)
	mov	edx, DWORD PTR _y$[ebp+4]
	fxch	ST(3)
	mov	eax, DWORD PTR _j$[ebp]
$LN164@sphere_kno@3:
	cmp	eax, DWORD PTR _web+616
	jge	$LN237@sphere_kno@3
	sub	ecx, edx
	fstp	ST(1)
	mov	DWORD PTR tv8510[ebp], ecx
	mov	ecx, DWORD PTR _x$[ebp]
	sub	esi, edx
	lea	eax, DWORD PTR [edx+eax*8]
	neg	edx
	add	ecx, edx
	mov	DWORD PTR tv10866[ebp], ecx
	mov	ecx, DWORD PTR _x$[ebp+4]
	add	ecx, edx
	mov	DWORD PTR tv10868[ebp], ecx
	mov	ecx, DWORD PTR _x$[ebp+8]
	add	ecx, edx
	mov	DWORD PTR tv8515[ebp], esi
	mov	esi, DWORD PTR _web+616
	sub	esi, DWORD PTR _j$[ebp]
	mov	DWORD PTR tv10870[ebp], ecx
	lea	ecx, DWORD PTR _r$[ebp+edx]
	mov	DWORD PTR tv10872[ebp], ecx
	lea	ecx, DWORD PTR _s1$[ebp+edx]
	lea	ebx, DWORD PTR _t1$[ebp+edx]
	lea	edi, DWORD PTR _t2$[ebp+edx]
	lea	edx, DWORD PTR _s2$[ebp+edx]
	mov	DWORD PTR tv10159[ebp], esi
$LN157@sphere_kno@3:

; 775  :       {
; 776  :           r[j] = (y[0][j]+y[1][j]+y[2][j] - (x[0][j]+x[1][j]+x[2][j]))/3;

	mov	esi, DWORD PTR tv8510[ebp]
	fld	QWORD PTR [eax+esi]
	mov	esi, DWORD PTR tv8515[ebp]
	fadd	QWORD PTR [eax]
	add	eax, 8
	dec	DWORD PTR tv10159[ebp]
	fadd	QWORD PTR [eax+esi-8]
	mov	esi, DWORD PTR tv10868[ebp]
	fld	QWORD PTR [eax+esi-8]
	mov	esi, DWORD PTR tv10866[ebp]
	fadd	QWORD PTR [eax+esi-8]
	mov	esi, DWORD PTR tv10870[ebp]
	fadd	QWORD PTR [eax+esi-8]
	mov	esi, DWORD PTR tv10872[ebp]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(5)
	fst	QWORD PTR [eax+esi-8]

; 777  :           rr2 += r[j]*r[j]; t1r += t1[j]*r[j]; t2r += t2[j]*r[j];

	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(2), ST(0)
	fld	ST(0)
	fmul	QWORD PTR [eax+ebx-8]
	faddp	ST(3), ST(0)
	fld	QWORD PTR [eax+edi-8]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR _t2r$[ebp]
	fstp	QWORD PTR _t2r$[ebp]

; 778  :           rs1 += r[j]*s1[j]; t1s1 += t1[j]*s1[j]; t2s1 += t2[j]*s1[j];

	fld	ST(0)
	fmul	QWORD PTR [eax+ecx-8]
	fadd	QWORD PTR _rs1$[ebp]
	fstp	QWORD PTR _rs1$[ebp]
	fld	QWORD PTR [eax+ebx-8]
	fmul	QWORD PTR [eax+ecx-8]
	fadd	QWORD PTR _t1s1$[ebp]
	fstp	QWORD PTR _t1s1$[ebp]
	fld	QWORD PTR [eax+edi-8]
	fmul	QWORD PTR [eax+ecx-8]
	faddp	ST(5), ST(0)

; 779  :           rs2 += r[j]*s2[j]; t1s2 += t1[j]*s2[j]; t2s2 += t2[j]*s2[j];

	fmul	QWORD PTR [edx+eax-8]
	faddp	ST(3), ST(0)
	fld	QWORD PTR [eax+ebx-8]
	fmul	QWORD PTR [edx+eax-8]
	fadd	QWORD PTR _t1s2$[ebp]
	fstp	QWORD PTR _t1s2$[ebp]
	fld	QWORD PTR [eax+edi-8]
	fmul	QWORD PTR [edx+eax-8]
	fadd	QWORD PTR _t2s2$[ebp]
	fstp	QWORD PTR _t2s2$[ebp]
	jne	$LN157@sphere_kno@3

; 773  :       }
; 774  :       for (j=0; j<SDIM; j++)

	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	fstp	ST(4)

; 779  :           rs2 += r[j]*s2[j]; t1s2 += t1[j]*s2[j]; t2s2 += t2[j]*s2[j];

	fxch	ST(1)
	fstp	QWORD PTR _rs2$[ebp]
	fxch	ST(1)
	fstp	QWORD PTR _t2s1$[ebp]
	fstp	QWORD PTR _t1r$[ebp]
	fld	QWORD PTR _t2t2$[ebp]
	fxch	ST(1)
$LN165@sphere_kno@3:

; 780  :       }
; 781  :       rr2 /= 2;

	fmul	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _rr2$[ebp]

; 782  :       AsAt = As*sqrt(t1t1*t2t2-t1t2*t1t2);

	fmul	QWORD PTR _t1t1$[ebp]
	fld	QWORD PTR _t1t2$[ebp]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	call	__CIsqrt
	fmul	QWORD PTR _As$[ebp]
	fst	QWORD PTR _AsAt$[ebp]

; 783  :       if (fabs(cpower)<.0001)

	fld	QWORD PTR _cpower
	fabs
	fcomp	QWORD PTR __real@3f1a36e2eb1c432d
	fnstsw	ax
	test	ah, 5
	jp	$LN18@sphere_kno@3

; 784  :       {
; 785  :             REAL q;
; 786  :             q = AsAt/2/pow(2*rr2,spower);

	fmul	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR tv10877[ebp]
	fld	QWORD PTR _rr2$[ebp]
	fadd	ST(0), ST(0)
	fld	QWORD PTR _spower
	call	__CIpow
	fdivr	QWORD PTR tv10877[ebp]

; 787  :             energy += q/2;
; 788  :             mult = q/As;
; 789  :             for ( j = 0 ; j < SDIM ; j++ ) 

	xor	eax, eax
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(0), ST(1)
	fadd	QWORD PTR _energy$[ebp]
	fstp	QWORD PTR _energy$[ebp]
	fld	QWORD PTR _As$[ebp]
	fdivr	ST(0), ST(1)
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN248@sphere_kno@3
$LN17@sphere_kno@3:

; 790  :              {
; 791  :                   register REAL ff1, ff2;
; 792  :                   ff1 = mult*dAs1[j]; ff2 = mult*dAs2[j];

	fld	QWORD PTR _dAs1$[ebp+eax*8]

; 793  :                   f_info->grad[0][j] -= ff1+ff2;

	mov	edx, DWORD PTR [edi+1336]
	mov	ecx, DWORD PTR [edx]
	fmul	ST(0), ST(1)
	fld	QWORD PTR _dAs2$[ebp+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	fmul	ST(0), ST(2)
	fld	ST(0)
	fadd	ST(0), ST(2)
	fsubr	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR [edi+1336]
	mov	ecx, DWORD PTR [edx+4]

; 794  :                   f_info->grad[1][j] += ff1;

	fld	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR [edi+1336]
	mov	ecx, DWORD PTR [edx+8]

; 795  :                   f_info->grad[2][j] += ff2;

	fadd	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN17@sphere_kno@3
$LN248@sphere_kno@3:

; 787  :             energy += q/2;
; 788  :             mult = q/As;
; 789  :             for ( j = 0 ; j < SDIM ; j++ ) 

	fstp	ST(0)

; 796  :              }
; 797  :             dEdrr2 =  - spower*q/rr2/3;
; 798  :             for ( j = 0 ; j < SDIM ; j++ ) 

	xor	eax, eax
	fmul	QWORD PTR _spower
	fdiv	QWORD PTR _rr2$[ebp]
	fdiv	QWORD PTR __real@c008000000000000
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN249@sphere_kno@3
$LN14@sphere_kno@3:

; 799  :              {
; 800  :                 register REAL common;
; 801  :                 common = dEdrr2*r[j];
; 802  :                 f_info->grad[0][j] -= common;

	mov	edx, DWORD PTR [edi+1336]
	fld	QWORD PTR _r$[ebp+eax*8]
	mov	ecx, DWORD PTR [edx]
	fmul	ST(0), ST(1)
	fld	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR [edi+1336]
	mov	ecx, DWORD PTR [edx+4]

; 803  :                 f_info->grad[1][j] -= common;

	fld	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR [edi+1336]
	mov	ecx, DWORD PTR [edx+8]

; 804  :                 f_info->grad[2][j] -= common;

	fsubr	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN14@sphere_kno@3
$LN249@sphere_kno@3:

; 796  :              }
; 797  :             dEdrr2 =  - spower*q/rr2/3;
; 798  :             for ( j = 0 ; j < SDIM ; j++ ) 

	fstp	ST(0)

; 805  :              }
; 806  :              continue;

	fld	QWORD PTR __real@4008000000000000
	jmp	$LN32@sphere_kno@3
$LN237@sphere_kno@3:

; 773  :       }
; 774  :       for (j=0; j<SDIM; j++)

	fstp	ST(3)
	fstp	ST(4)
	fstp	ST(0)
	fstp	ST(1)
	jmp	$LN165@sphere_kno@3
$LN18@sphere_kno@3:

; 807  :       }
; 808  :       detr = (rr2*t1s1*t2s2 + rs1*t1s2*t2r + rs2*t1r*t2s1 - rr2*t1s2*t2s1
; 809  :                  - rs1*t1r*t2s2 - rs2*t1s1*t2r)/rr2;

	fld	QWORD PTR _t1s2$[ebp]
	fld	ST(0)
	fld	QWORD PTR _rs1$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv4688[ebp]
	fld	QWORD PTR _t1s1$[ebp]
	fld	QWORD PTR _rr2$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv4690[ebp]
	fld	QWORD PTR _t1r$[ebp]
	fld	QWORD PTR _rs2$[ebp]
	fmul	ST(0), ST(1)
	fst	QWORD PTR tv4693[ebp]
	fxch	ST(6)
	fmul	ST(0), ST(3)
	fst	QWORD PTR tv4696[ebp]
	fxch	ST(1)
	fmulp	ST(5), ST(0)
	fxch	ST(4)
	fstp	QWORD PTR tv4699[ebp]
	fld	QWORD PTR _t1s1$[ebp]
	fmul	QWORD PTR _rs2$[ebp]
	fst	QWORD PTR tv4702[ebp]
	fxch	ST(1)
	fmul	QWORD PTR _t2s2$[ebp]
	fld	QWORD PTR _t2r$[ebp]
	fmul	ST(4), ST(0)
	fxch	ST(1)
	faddp	ST(4), ST(0)
	fld	QWORD PTR _t2s1$[ebp]
	fmul	ST(6), ST(0)
	fxch	ST(4)
	faddp	ST(6), ST(0)
	fxch	ST(4)
	fmulp	ST(3), ST(0)
	fxch	ST(4)
	fsubrp	ST(2), ST(0)
	fld	QWORD PTR tv4699[ebp]
	fmul	QWORD PTR _t2s2$[ebp]
	fsubp	ST(2), ST(0)
	fxch	ST(3)
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fst	QWORD PTR _detr$[ebp]

; 810  :       angfac = 1 + detr/AsAt;

	fdivrp	ST(2), ST(0)
	fld1
	fadd	ST(2), ST(0)
	fxch	ST(2)
	fst	QWORD PTR _angfac$[ebp]

; 811  :       if ( cpower == 1.0 )

	fld	QWORD PTR _cpower
	fld	ST(0)
	fld	ST(4)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN254@sphere_kno@3
	fstp	ST(1)
	fstp	ST(0)

; 812  :           qq = 1.0 / pow(2*rr2,spower+1);

	fadd	ST(0), ST(0)
	fld	QWORD PTR _spower
	faddp	ST(2), ST(0)
	fxch	ST(1)
	call	__CIpow
	fld1
	fdivrp	ST(1), ST(0)

; 813  :       else 

	jmp	SHORT $LN10@sphere_kno@3
$LN254@sphere_kno@3:

; 811  :       if ( cpower == 1.0 )

	fstp	ST(2)

; 814  :           qq = pow(angfac,cpower-1) / pow(2*rr2,spower+1);

	fxch	ST(1)
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	call	__CIpow
	fstp	QWORD PTR tv10881[ebp]
	fld	QWORD PTR _rr2$[ebp]
	fadd	ST(0), ST(0)
	fld	QWORD PTR _spower
	fadd	QWORD PTR __real@3ff0000000000000
	call	__CIpow
	fdivr	QWORD PTR tv10881[ebp]
$LN10@sphere_kno@3:

; 815  :       energy += qq*angfac*rr2*AsAt/2;

	fld	ST(0)

; 816  : 
; 817  :       /* mult = enf*(AsAt-detr)/As; */
; 818  :       mult = qq*rr2 * (angfac - cpower*detr/AsAt) * AsAt/As;
; 819  :       for ( j = 0 ; j < SDIM ; j++ ) 

	xor	eax, eax
	fld	QWORD PTR _angfac$[ebp]
	fmul	ST(1), ST(0)
	fld	QWORD PTR _rr2$[ebp]
	fmul	ST(2), ST(0)
	fld	QWORD PTR _AsAt$[ebp]
	fmul	ST(3), ST(0)
	fxch	ST(3)
	fmul	QWORD PTR __real@3fe0000000000000
	fadd	QWORD PTR _energy$[ebp]
	fstp	QWORD PTR _energy$[ebp]
	fld	QWORD PTR _detr$[ebp]
	fld	QWORD PTR _cpower
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(4)
	fsubp	ST(3), ST(0)
	fld	ST(4)
	fmulp	ST(2), ST(0)
	fxch	ST(2)
	fmulp	ST(1), ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	QWORD PTR _As$[ebp]
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN259@sphere_kno@3
$LN9@sphere_kno@3:

; 820  :         {
; 821  :              register REAL ff1, ff2;
; 822  :              ff1 = mult*dAs1[j]; ff2 = mult*dAs2[j];

	fld	QWORD PTR _dAs1$[ebp+eax*8]

; 823  :              f_info->grad[0][j] -= ff1+ff2;

	mov	edx, DWORD PTR [edi+1336]
	mov	ecx, DWORD PTR [edx]
	fmul	ST(0), ST(1)
	fld	QWORD PTR _dAs2$[ebp+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	fmul	ST(0), ST(2)
	fld	ST(0)
	fadd	ST(0), ST(2)
	fsubr	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR [edi+1336]
	mov	ecx, DWORD PTR [edx+4]

; 824  :              f_info->grad[1][j] += ff1;

	fld	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR [edi+1336]
	mov	ecx, DWORD PTR [edx+8]

; 825  :              f_info->grad[2][j] += ff2;

	fadd	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN9@sphere_kno@3
$LN259@sphere_kno@3:

; 816  : 
; 817  :       /* mult = enf*(AsAt-detr)/As; */
; 818  :       mult = qq*rr2 * (angfac - cpower*detr/AsAt) * AsAt/As;
; 819  :       for ( j = 0 ; j < SDIM ; j++ ) 

	fstp	ST(0)

; 826  :         }
; 827  : 
; 828  :       mult = cpower*qq/3;
; 829  :       dEdrr2 = mult*(t1s1*t2s2 - t1s2*t2s1 - detr) - spower*qq*angfac*AsAt/3;
; 830  :       dEdrs1 = mult*(t1s2*t2r - t1r*t2s2); dEdrs2 = mult*(t1r*t2s1 - t1s1*t2r);
; 831  :       for ( j = 0 ; j < SDIM ; j++ ) 

	xor	eax, eax
	fmul	ST(0), ST(1)
	fld	QWORD PTR __real@4008000000000000
	fdiv	ST(1), ST(0)
	fld	QWORD PTR _t2s2$[ebp]
	fld	QWORD PTR _t1s1$[ebp]
	fmul	ST(0), ST(1)
	fld	QWORD PTR _t2s1$[ebp]
	fld	ST(0)
	fld	QWORD PTR _t1s2$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(3)
	fsubrp	ST(1), ST(0)
	fsub	QWORD PTR _detr$[ebp]
	fmul	ST(0), ST(5)
	fxch	ST(6)
	fmul	QWORD PTR _spower
	fmul	QWORD PTR _angfac$[ebp]
	fmul	QWORD PTR _AsAt$[ebp]
	fdiv	ST(0), ST(4)
	fsubp	ST(6), ST(0)
	fxch	ST(5)
	fstp	QWORD PTR _dEdrr2$[ebp]
	fld	QWORD PTR _t2r$[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fld	ST(2)
	fld	QWORD PTR _t1r$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(3)
	fsubrp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fstp	QWORD PTR _dEdrs1$[ebp]
	fld	ST(5)
	fmulp	ST(2), ST(0)
	fld	QWORD PTR _t1s1$[ebp]
	fmul	ST(0), ST(1)
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(4)
	fstp	QWORD PTR _dEdrs2$[ebp]
	cmp	DWORD PTR _web+616, eax
	jle	$LN4@sphere_kno@3
$LN160@sphere_kno@3:

; 832  :         {
; 833  :           register REAL rs1r, rs2r, common;
; 834  :           rs1r = dEdrs1*r[j]*3; rs2r = dEdrs2*r[j]*3;

	fld	QWORD PTR _r$[ebp+eax*8]

; 835  :           common = dEdrr2*r[j] + dEdrs1*s1[j] + dEdrs2*s2[j];
; 836  :           f_info->grad[0][j] -= (common + rs1r + rs2r);

	mov	edx, DWORD PTR [edi+1336]
	fld	QWORD PTR _dEdrs1$[ebp]
	mov	ecx, DWORD PTR [edx]
	fmul	ST(1), ST(0)
	lea	ecx, DWORD PTR [ecx+eax*8]
	fxch	ST(1)
	fmul	ST(0), ST(4)
	fstp	QWORD PTR _rs1r$89741[ebp]
	fld	QWORD PTR _r$[ebp+eax*8]
	fmul	QWORD PTR _dEdrs2$[ebp]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR _rs2r$89742[ebp]
	fmul	QWORD PTR _s1$[ebp+eax*8]
	fld	QWORD PTR _r$[ebp+eax*8]
	fmul	QWORD PTR _dEdrr2$[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _s2$[ebp+eax*8]
	fmul	QWORD PTR _dEdrs2$[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _rs1r$89741[ebp]
	fadd	ST(0), ST(1)
	fadd	QWORD PTR _rs2r$89742[ebp]
	fsubr	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR [edi+1336]

; 837  :           f_info->grad[1][j] -= (common - rs1r);

	fld	QWORD PTR _rs1r$89741[ebp]
	mov	ecx, DWORD PTR [edx+4]
	fsubr	ST(0), ST(1)
	lea	ecx, DWORD PTR [ecx+eax*8]
	fsubr	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR [edi+1336]
	mov	ecx, DWORD PTR [edx+8]

; 838  :           f_info->grad[2][j] -= (common - rs2r);

	fsub	QWORD PTR _rs2r$89742[ebp]
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fsubr	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	$LN160@sphere_kno@3
$LN4@sphere_kno@3:

; 839  :         }
; 840  :       dEdt1r = mult*(rs2*t2s1 - rs1*t2s2); dEdt2r = mult*(rs1*t1s2 - rs2*t1s1);

	fld	ST(4)

; 841  :       mult *= 3;
; 842  :       dEdt1s1 = mult*(rr2*t2s2 - rs2*t2r); dEdt1s2 = mult*(rs1*t2r - rr2*t2s1);
; 843  :       dEdt2s1 = mult*(rs2*t1r - rr2*t1s2); dEdt2s2 = mult*(rr2*t1s1 - rs1*t1r);
; 844  :       for ( j = 0 ; j < SDIM ; j++ ) 

	xor	eax, eax
	fmul	QWORD PTR _rs2$[ebp]
	fld	ST(2)
	fld	QWORD PTR _rs1$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(2)
	fsubrp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fld	QWORD PTR tv4688[ebp]
	fsub	QWORD PTR tv4702[ebp]
	fmul	ST(0), ST(6)
	fstp	QWORD PTR _dEdt2r$[ebp]
	fxch	ST(5)
	fmul	ST(0), ST(4)
	fxch	ST(3)
	fmul	QWORD PTR _rr2$[ebp]
	fld	ST(2)
	fmul	QWORD PTR _rs2$[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fxch	ST(2)
	fmulp	ST(1), ST(0)
	fxch	ST(5)
	fmul	QWORD PTR _rr2$[ebp]
	fsubp	ST(5), ST(0)
	fxch	ST(4)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _dEdt1s2$[ebp]
	fld	QWORD PTR tv4693[ebp]
	fsub	QWORD PTR tv4696[ebp]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _dEdt2s1$[ebp]
	fld	QWORD PTR tv4690[ebp]
	fsub	QWORD PTR tv4699[ebp]
	fmulp	ST(1), ST(0)
	fstp	QWORD PTR _dEdt2s2$[ebp]
	cmp	DWORD PTR _web+616, eax
	jle	$LN262@sphere_kno@3
$LN161@sphere_kno@3:

; 845  :         {
; 846  :           register REAL tr, ts1, ts2;
; 847  :           tr = dEdt1r*t1[j] + dEdt2r*t2[j];

	fld	QWORD PTR _t1$[ebp+eax*8]

; 848  :           ts1 = dEdt1s1*t1[j] + dEdt2s1*t2[j];
; 849  :           ts2 = dEdt1s2*t1[j] + dEdt2s2*t2[j];
; 850  :           f_info->grad[0][j] -= (tr+ts1+ts2);

	mov	edx, DWORD PTR [edi+1336]
	fmul	ST(0), ST(2)
	mov	ecx, DWORD PTR [edx]
	fld	QWORD PTR _t2$[ebp+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	fmul	QWORD PTR _dEdt2r$[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _t1$[ebp+eax*8]
	fmul	ST(0), ST(4)
	fld	QWORD PTR _t2$[ebp+eax*8]
	fmul	QWORD PTR _dEdt2s1$[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _t1$[ebp+eax*8]
	fmul	QWORD PTR _dEdt1s2$[ebp]
	fld	QWORD PTR _t2$[ebp+eax*8]
	fmul	QWORD PTR _dEdt2s2$[ebp]
	faddp	ST(1), ST(0)
	fld	ST(1)
	fadd	ST(0), ST(3)
	fadd	ST(0), ST(1)
	fsubr	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR [edi+1336]
	mov	ecx, DWORD PTR [edx+4]

; 851  :           f_info->grad[1][j] -= (tr-ts1);

	fld	ST(2)
	fsubrp	ST(2), ST(0)
	lea	ecx, DWORD PTR [ecx+eax*8]
	fld	QWORD PTR [ecx]
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR [edi+1336]
	mov	ecx, DWORD PTR [edx+8]

; 852  :           f_info->grad[2][j] -= (tr-ts2);

	fsubp	ST(1), ST(0)
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fsubr	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	$LN161@sphere_kno@3
$LN262@sphere_kno@3:

; 841  :       mult *= 3;
; 842  :       dEdt1s1 = mult*(rr2*t2s2 - rs2*t2r); dEdt1s2 = mult*(rs1*t2r - rr2*t2s1);
; 843  :       dEdt2s1 = mult*(rs2*t1r - rr2*t1s2); dEdt2s2 = mult*(rr2*t1s1 - rs1*t1r);
; 844  :       for ( j = 0 ; j < SDIM ; j++ ) 

	fstp	ST(2)
	fstp	ST(0)
$LN32@sphere_kno@3:

; 758  :   }
; 759  :   FOR_ALL_FACETS(f2)

	mov	edx, DWORD PTR tv4217[ebp]
	mov	eax, DWORD PTR _web+236
	mov	ecx, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [ecx]
	mov	edx, ecx
	shr	edx, 28					; 0000001cH
	and	edx, 1
	jne	$LN162@sphere_kno@3
	fstp	ST(0)
$LN151@sphere_kno@3:

; 853  :         }
; 854  :     }
; 855  : 
; 856  :   return energy;  /* since doing all pairs */
; 857  : } // end sphere_knot_energy_gradient()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _energy$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_sphere_knot_energy_gradient ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DO@JFNBGLDI@mughal_far_field?5method?5not?5now?5@ ; `string'
PUBLIC	??_C@_0DF@JCFMICKG@mughal_far_field?5method?5requires@ ; `string'
PUBLIC	_mughal_far_field_init
EXTRN	_kb_error:PROC
;	COMDAT ??_C@_0DO@JFNBGLDI@mughal_far_field?5method?5not?5now?5@
CONST	SEGMENT
??_C@_0DO@JFNBGLDI@mughal_far_field?5method?5not?5now?5@ DB 'mughal_far_f'
	DB	'ield method not now implemented for torus model.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@JCFMICKG@mughal_far_field?5method?5requires@
CONST	SEGMENT
??_C@_0DF@JCFMICKG@mughal_far_field?5method?5requires@ DB 'mughal_far_fie'
	DB	'ld method requires space dimension 2.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _mughal_far_field_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_mughal_far_field_init PROC				; COMDAT

; 891  :   if ( web.sdim != 2 )

	cmp	DWORD PTR _web+616, 2
	je	SHORT $LN2@mughal_far

; 892  :     kb_error(4569,"mughal_far_field method requires space dimension 2.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DF@JCFMICKG@mughal_far_field?5method?5requires@
	push	4569					; 000011d9H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN2@mughal_far:

; 893  :   if ( web.torus_flag )

	cmp	DWORD PTR _web+860, 0
	je	SHORT $LN1@mughal_far

; 894  :     kb_error(4570,"mughal_far_field method not now implemented for torus model.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DO@JFNBGLDI@mughal_far_field?5method?5not?5now?5@
	push	4570					; 000011daH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@mughal_far:

; 895  : }   

	ret	0
_mughal_far_field_init ENDP
_TEXT	ENDS
PUBLIC	_mughal_far_field_energy
; Function compile flags: /Ogtp
;	COMDAT _mughal_far_field_energy
_TEXT	SEGMENT
_charge$ = -68						; size = 8
_energy$ = -60						; size = 8
tv445 = -52						; size = 4
tv460 = -48						; size = 4
_yy1$ = -44						; size = 4
tv1047 = -40						; size = 4
tv1034 = -36						; size = 4
tv1029 = -32						; size = 4
tv1481 = -28						; size = 4
tv1479 = -24						; size = 4
tv1002 = -20						; size = 4
tv468 = -16						; size = 4
_j$ = -16						; size = 4
_e1$ = -12						; size = 4
tv429 = -8						; size = 4
_x1$ = -4						; size = 4
_x2$ = 8						; size = 4
_e_info$ = 8						; size = 4
_mughal_far_field_energy PROC				; COMDAT

; 909  : { edge_id e1 = e_info->id,e2;

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR _e_info$[ebp]

; 910  :   REAL *x1,*x2,*yy1,*y2; /* end coordinates */
; 911  :   REAL charge;
; 912  :   REAL energy = 0.0;

	fldz
	mov	eax, DWORD PTR [eax]
	fst	QWORD PTR _energy$[ebp]

; 913  :   REAL dd;
; 914  :   int j;
; 915  : 
; 916  :   x1 = get_coord(get_edge_tailv(e1));

	mov	ecx, DWORD PTR _dymem
	mov	edx, DWORD PTR _web+216
	mov	edx, DWORD PTR [edx+ecx+304]
	push	ebx
	push	esi
	mov	esi, eax
	mov	DWORD PTR _e1$[ebp], eax
	push	edi
	mov	edi, DWORD PTR _web+124
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	shr	esi, 27					; 0000001bH
	mov	DWORD PTR tv429[ebp], edx
	add	edx, eax
	and	esi, 1
	je	SHORT $LN13@mughal_far@2
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN12@mughal_far@2
$LN13@mughal_far@2:
	mov	eax, DWORD PTR [edx]
$LN12@mughal_far@2:
	mov	edi, DWORD PTR _web+104
	mov	ebx, DWORD PTR [edi+ecx+64]
	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	add	eax, ebx
	mov	DWORD PTR tv445[ebp], ebx
	mov	DWORD PTR _x1$[ebp], eax

; 917  :   x2 = get_coord(get_edge_headv(e1));

	test	esi, esi
	je	SHORT $LN17@mughal_far@2
	mov	edx, DWORD PTR [edx]
	jmp	SHORT $LN16@mughal_far@2
$LN17@mughal_far@2:
	mov	eax, DWORD PTR _web+636
	mov	edx, DWORD PTR [edx+eax*4]
$LN16@mughal_far@2:

; 918  : 
; 919  :   FOR_ALL_EDGES(e2)

	mov	esi, DWORD PTR _web+160
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	add	ecx, ebx
	mov	DWORD PTR _x2$[ebp], ecx
	test	esi, 268435456				; 10000000H
	je	$LN7@mughal_far@2
	fld	QWORD PTR __real@3fe0000000000000
$LN36@mughal_far@2:
	mov	eax, DWORD PTR _web+124
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	mov	DWORD PTR tv460[ebp], edx
	je	$LN8@mughal_far@2

; 920  :     { if ( e2 == e1 ) continue; /* skip self */

	cmp	esi, DWORD PTR _e1$[ebp]
	je	$LN8@mughal_far@2

; 921  :       yy1 = get_coord(get_edge_tailv(e2));

	shr	esi, 27					; 0000001bH
	fstp	ST(1)
	and	esi, 1
	mov	DWORD PTR tv468[ebp], esi
	je	SHORT $LN21@mughal_far@2
	add	edx, DWORD PTR tv429[ebp]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN20@mughal_far@2
$LN21@mughal_far@2:
	add	edx, DWORD PTR tv429[ebp]
	mov	eax, DWORD PTR [edx]
$LN20@mughal_far@2:
	mov	esi, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [esi+eax*4]
	add	edi, ebx

; 922  :       y2 = get_coord(get_edge_headv(e2));

	cmp	DWORD PTR tv468[ebp], 0
	mov	DWORD PTR _yy1$[ebp], edi
	je	SHORT $LN25@mughal_far@2
	mov	eax, DWORD PTR [edx]
	jmp	SHORT $LN24@mughal_far@2
$LN25@mughal_far@2:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
$LN24@mughal_far@2:
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+eax*4]

; 923  :       charge = y2[0] - yy1[0];

	fld	QWORD PTR [esi+ebx]
	add	esi, ebx
	fsub	QWORD PTR [edi]

; 924  :       dd = 0.0;
; 925  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	ebx, ebx
	cmp	DWORD PTR _web+616, 4
	mov	DWORD PTR _j$[ebp], ebx
	fstp	QWORD PTR _charge$[ebp]
	fldz
	jl	$LC33@mughal_far@2

; 928  :         dd += rj*rj;

	lea	eax, DWORD PTR [edi+8]
	mov	ebx, esi
	sub	ebx, edi
	neg	edi
	mov	DWORD PTR tv1002[ebp], ebx
	mov	ebx, DWORD PTR _x1$[ebp]
	add	ebx, edi
	add	edi, DWORD PTR _x2$[ebp]
	mov	DWORD PTR tv1479[ebp], ebx
	mov	ebx, DWORD PTR _x1$[ebp]
	mov	DWORD PTR tv1481[ebp], edi
	mov	edi, esi
	sub	edi, ebx
	mov	DWORD PTR tv1029[ebp], edi
	mov	edi, DWORD PTR _x2$[ebp]
	sub	edi, ebx
	mov	ebx, DWORD PTR _j$[ebp]
	lea	edx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR _x1$[ebp]
	mov	DWORD PTR tv1034[ebp], edi
	mov	edi, esi
	add	ecx, 16					; 00000010H
	sub	edi, DWORD PTR _x2$[ebp]
	mov	DWORD PTR tv1047[ebp], edi
$LN37@mughal_far@2:

; 926  :       { REAL rj;
; 927  :         rj = (yy1[j] + y2[j] - x1[j] - x2[j])/2;

	fld	QWORD PTR [esi+ebx*8]
	mov	edi, DWORD PTR tv1002[ebp]
	fadd	QWORD PTR [eax-8]

; 928  :         dd += rj*rj;

	add	ebx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fsub	QWORD PTR [ecx-48]
	add	edx, 32					; 00000020H
	fsub	QWORD PTR [edx-56]
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv1479[ebp]
	fadd	QWORD PTR [eax-32]
	fsub	QWORD PTR [eax+edi-32]
	mov	edi, DWORD PTR tv1481[ebp]
	fsub	QWORD PTR [eax+edi-32]
	mov	edi, DWORD PTR tv1029[ebp]
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx+edi-32]
	mov	edi, DWORD PTR tv1034[ebp]
	fadd	QWORD PTR [eax-24]
	fsub	QWORD PTR [ecx-32]
	fsub	QWORD PTR [ecx+edi-32]
	mov	edi, DWORD PTR tv1047[ebp]
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx+edi-32]
	mov	edi, DWORD PTR _web+616
	fadd	QWORD PTR [eax-16]
	add	edi, -3					; fffffffdH
	fsub	QWORD PTR [ecx-24]
	fsub	QWORD PTR [edx-32]
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	cmp	ebx, edi
	jl	SHORT $LN37@mughal_far@2
	mov	edi, DWORD PTR _yy1$[ebp]
	mov	ecx, DWORD PTR _x2$[ebp]
$LC33@mughal_far@2:

; 924  :       dd = 0.0;
; 925  :       for ( j = 0 ; j < SDIM ; j++ )

	cmp	ebx, DWORD PTR _web+616
	jge	SHORT $LN73@mughal_far@2
	mov	edx, DWORD PTR _x1$[ebp]
	sub	esi, edi
	lea	eax, DWORD PTR [edi+ebx*8]
	neg	edi
	add	edx, edi
	add	edi, ecx
	mov	ecx, DWORD PTR _web+616
	sub	ecx, ebx
$LC3@mughal_far@2:

; 926  :       { REAL rj;
; 927  :         rj = (yy1[j] + y2[j] - x1[j] - x2[j])/2;

	fld	QWORD PTR [esi+eax]
	add	eax, 8
	dec	ecx
	fadd	QWORD PTR [eax-8]
	fsub	QWORD PTR [edx+eax-8]
	fsub	QWORD PTR [edi+eax-8]
	fmul	ST(0), ST(2)

; 928  :         dd += rj*rj;

	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	jne	SHORT $LC3@mughal_far@2
$LN73@mughal_far@2:

; 924  :       dd = 0.0;
; 925  :       for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(1)

; 929  :       }
; 930  :       energy += charge/sqrt(dd);

	call	__CIsqrt
	fdivr	QWORD PTR _charge$[ebp]
	mov	edx, DWORD PTR tv460[ebp]
	mov	ebx, DWORD PTR tv445[ebp]
	mov	ecx, DWORD PTR _x2$[ebp]
	fadd	QWORD PTR _energy$[ebp]
	fst	QWORD PTR _energy$[ebp]
	fld	QWORD PTR __real@3fe0000000000000
$LN8@mughal_far@2:

; 918  : 
; 919  :   FOR_ALL_EDGES(e2)

	mov	esi, DWORD PTR [edx]
	test	esi, 268435456				; 10000000H
	jne	$LN36@mughal_far@2
	fstp	ST(0)
$LN7@mughal_far@2:
	pop	edi
	pop	esi
	pop	ebx

; 931  :     }
; 932  :   return energy;
; 933  : } // end mughal_far_field_energy()

	mov	esp, ebp
	pop	ebp
	ret	0
_mughal_far_field_energy ENDP
_TEXT	ENDS
PUBLIC	_e_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_mughal_far_field_gradient
; Function compile flags: /Ogtp
;	COMDAT _mughal_far_field_gradient
_TEXT	SEGMENT
_charge$ = -144						; size = 8
_energy$ = -136						; size = 8
tv1576 = -128						; size = 4
tv2157 = -124						; size = 4
tv1563 = -120						; size = 4
tv1519 = -116						; size = 4
_yy1$ = -112						; size = 4
tv2159 = -108						; size = 4
_j$ = -104						; size = 4
_e1$ = -100						; size = 4
_e_info$GSCopy$ = -96					; size = 4
tv1558 = -92						; size = 4
tv745 = -88						; size = 4
_dd$ = -84						; size = 8
tv2161 = -80						; size = 4
tv2153 = -76						; size = 4
tv2155 = -72						; size = 4
tv1696 = -68						; size = 4
tv756 = -68						; size = 4
tv1246 = -64						; size = 4
_x1$ = -60						; size = 4
_x2$ = -56						; size = 4
_r$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_mughal_far_field_gradient PROC				; COMDAT

; 947  : { edge_id e1 = e_info->id,e2;

	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 948  :   REAL *x1,*x2,*yy1,*y2; /* end coordinates */
; 949  :   REAL charge;
; 950  :   REAL energy = 0.0;
; 951  :   REAL r[MAXCOORD];
; 952  :   REAL dd;
; 953  :   REAL en1;
; 954  :   int j;
; 955  : 
; 956  :   x1 = get_coord(get_edge_tailv(e1));

	mov	ecx, DWORD PTR _web+124
	fldz
	mov	edx, DWORD PTR _dymem
	fst	QWORD PTR _energy$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _e_info$[ebp]
	mov	eax, DWORD PTR [ebx]
	push	esi
	mov	esi, eax
	mov	DWORD PTR _e1$[ebp], eax
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+edx+304]
	shr	esi, 27					; 0000001bH
	add	ecx, eax
	and	esi, 1
	push	edi
	mov	DWORD PTR _e_info$GSCopy$[ebp], ebx
	je	SHORT $LN19@mughal_far@3
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN18@mughal_far@3
$LN19@mughal_far@3:
	mov	eax, DWORD PTR [ecx]
$LN18@mughal_far@3:
	mov	edi, DWORD PTR _web+104
	mov	edx, DWORD PTR [edi+edx+64]
	mov	edi, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	add	eax, edx
	mov	DWORD PTR _x1$[ebp], eax

; 957  :   x2 = get_coord(get_edge_headv(e1));

	test	esi, esi
	je	SHORT $LN23@mughal_far@3
	mov	ecx, DWORD PTR [ecx]
	jmp	SHORT $LN22@mughal_far@3
$LN23@mughal_far@3:
	mov	eax, DWORD PTR _web+636
	mov	ecx, DWORD PTR [ecx+eax*4]
$LN22@mughal_far@3:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	add	ecx, edx
	mov	DWORD PTR _x2$[ebp], ecx

; 958  :   FOR_ALL_EDGES(e2)

	mov	ecx, DWORD PTR _web+160
	test	ecx, 268435456				; 10000000H
	je	$LN13@mughal_far@3
	fld	QWORD PTR __real@3fe0000000000000
$LN48@mughal_far@3:
	mov	eax, DWORD PTR _web+124
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	add	edx, edx
	add	edx, edx
	mov	esi, DWORD PTR [edx+eax]
	mov	eax, DWORD PTR [esi+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	mov	DWORD PTR tv745[ebp], edx
	je	$LN14@mughal_far@3

; 959  :     { if ( e2 == e1 ) continue; /* skip self */

	cmp	ecx, DWORD PTR _e1$[ebp]
	je	$LN14@mughal_far@3

; 960  : 
; 961  :       // First, same energy calculation as mughal_far_field_energy()
; 962  :       yy1 = get_coord(get_edge_tailv(e2));

	shr	ecx, 27					; 0000001bH
	fstp	ST(1)
	and	ecx, 1
	mov	DWORD PTR tv756[ebp], ecx
	mov	ecx, DWORD PTR _dymem
	je	SHORT $LN27@mughal_far@3
	mov	edx, DWORD PTR _web+216
	add	esi, DWORD PTR [edx+ecx+304]
	mov	edx, DWORD PTR _web+636
	mov	eax, DWORD PTR [esi+edx*4]
	jmp	SHORT $LN26@mughal_far@3
$LN27@mughal_far@3:
	mov	eax, DWORD PTR _web+216
	add	esi, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [esi]
$LN26@mughal_far@3:
	mov	edx, DWORD PTR _web+104
	mov	ecx, DWORD PTR [edx+ecx+64]
	mov	edi, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+eax*4]
	add	edx, ecx

; 963  :       y2 = get_coord(get_edge_headv(e2));

	cmp	DWORD PTR tv756[ebp], 0
	mov	DWORD PTR _yy1$[ebp], edx
	je	SHORT $LN31@mughal_far@3
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN30@mughal_far@3
$LN31@mughal_far@3:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [esi+eax*4]
$LN30@mughal_far@3:
	and	eax, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edi+eax*4]

; 964  :       charge = y2[0] - yy1[0];

	fld	QWORD PTR [edi+ecx]
	add	edi, ecx
	fsub	QWORD PTR [edx]

; 965  :       dd = 0.0;
; 966  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	cmp	DWORD PTR _web+616, 4
	fstp	QWORD PTR _charge$[ebp]
	fldz
	fst	QWORD PTR _dd$[ebp]
	jl	$LC43@mughal_far@3

; 969  :         dd += r[j]*r[j];

	lea	eax, DWORD PTR [edx+8]
	mov	ebx, edi
	sub	ebx, edx
	mov	DWORD PTR tv1519[ebp], ebx
	mov	ebx, DWORD PTR _x1$[ebp]
	neg	edx
	add	ebx, edx
	mov	DWORD PTR tv2153[ebp], ebx
	mov	ebx, DWORD PTR _x2$[ebp]
	add	ebx, edx
	mov	esi, DWORD PTR _x2$[ebp]
	mov	ecx, DWORD PTR _x1$[ebp]
	mov	DWORD PTR tv2155[ebp], ebx
	lea	ebx, DWORD PTR _r$[ebp+edx]
	mov	DWORD PTR tv2157[ebp], ebx
	lea	ebx, DWORD PTR _r$[ebp+edx+8]
	lea	edx, DWORD PTR _r$[ebp+edx+16]
	mov	DWORD PTR tv2161[ebp], edx
	mov	DWORD PTR tv2159[ebp], ebx
	mov	ebx, DWORD PTR _x1$[ebp]
	mov	edx, edi
	sub	edx, ebx
	mov	DWORD PTR tv1558[ebp], edx
	mov	edx, DWORD PTR _x2$[ebp]
	sub	edx, ebx
	mov	ebx, DWORD PTR _web+616
	mov	DWORD PTR tv1563[ebp], edx
	add	ebx, -4					; fffffffcH
	mov	edx, edi
	sub	edx, DWORD PTR _x2$[ebp]
	shr	ebx, 2
	inc	ebx
	mov	DWORD PTR tv1576[ebp], edx
	mov	DWORD PTR tv1696[ebp], ebx
	lea	edx, DWORD PTR _r$[ebp]
	add	ebx, ebx
	add	esi, 24					; 00000018H
	add	ecx, 16					; 00000010H
	sub	edx, edi
	add	ebx, ebx
	mov	DWORD PTR tv1246[ebp], edi
	mov	DWORD PTR _j$[ebp], ebx
$LN49@mughal_far@3:

; 967  :       {
; 968  :         r[j] = (yy1[j] + y2[j] - x1[j] - x2[j])/2;

	mov	ebx, DWORD PTR tv1246[ebp]
	fld	QWORD PTR [eax-8]
	fadd	QWORD PTR [ebx]

; 969  :         dd += r[j]*r[j];

	add	DWORD PTR tv1246[ebp], 32		; 00000020H
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fsub	QWORD PTR [ecx-48]
	add	esi, 32					; 00000020H
	dec	DWORD PTR tv1696[ebp]
	fsub	QWORD PTR [esi-56]
	fmul	ST(0), ST(2)
	fst	QWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR tv1519[ebp]
	fld	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv2153[ebp]
	fadd	QWORD PTR [eax-32]
	fsub	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv2155[ebp]
	fsub	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv2157[ebp]
	fmul	ST(0), ST(3)
	fst	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv1558[ebp]
	fld	QWORD PTR [ebx+ecx-32]
	mov	ebx, DWORD PTR tv1563[ebp]
	fadd	QWORD PTR [eax-24]
	fsub	QWORD PTR [ecx-32]
	fsub	QWORD PTR [ebx+ecx-32]
	mov	ebx, DWORD PTR tv2159[ebp]
	fmul	ST(0), ST(4)
	fst	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv1576[ebp]
	fld	QWORD PTR [ebx+esi-32]
	mov	ebx, DWORD PTR tv2161[ebp]
	fadd	QWORD PTR [eax-16]
	fsub	QWORD PTR [ecx-24]
	fsub	QWORD PTR [esi-32]
	fmul	ST(0), ST(5)
	fst	QWORD PTR [eax+ebx-32]
	fld	ST(3)
	fmulp	ST(4), ST(0)
	fxch	ST(3)
	faddp	ST(4), ST(0)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fxch	ST(3)
	faddp	ST(1), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	jne	$LN49@mughal_far@3
	mov	ebx, DWORD PTR _e_info$GSCopy$[ebp]
	fst	QWORD PTR _dd$[ebp]
	mov	esi, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _yy1$[ebp]
$LC43@mughal_far@3:

; 965  :       dd = 0.0;
; 966  :       for ( j = 0 ; j < SDIM ; j++ )

	cmp	esi, DWORD PTR _web+616
	jge	SHORT $LN84@mughal_far@3
	mov	ecx, DWORD PTR _x1$[ebp]
	sub	edi, edx
	lea	eax, DWORD PTR [edx+esi*8]
	neg	edx
	add	ecx, edx
	mov	DWORD PTR tv2153[ebp], ecx
	mov	ecx, DWORD PTR _x2$[ebp]
	add	ecx, edx
	mov	DWORD PTR tv2155[ebp], ecx
	mov	ecx, DWORD PTR _web+616
	lea	edx, DWORD PTR _r$[ebp+edx]
	sub	ecx, esi
$LC9@mughal_far@3:

; 967  :       {
; 968  :         r[j] = (yy1[j] + y2[j] - x1[j] - x2[j])/2;

	fld	QWORD PTR [eax+edi]
	mov	esi, DWORD PTR tv2153[ebp]
	fadd	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax+esi-8]
	mov	esi, DWORD PTR tv2155[ebp]
	fsub	QWORD PTR [eax+esi-8]
	fmul	ST(0), ST(2)
	fst	QWORD PTR [eax+edx-8]

; 969  :         dd += r[j]*r[j];

	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	jne	SHORT $LC9@mughal_far@3
	fstp	ST(1)
	fst	QWORD PTR _dd$[ebp]
	jmp	SHORT $LN42@mughal_far@3
$LN84@mughal_far@3:
	fstp	ST(1)
$LN42@mughal_far@3:

; 970  :       }
; 971  :       en1 = charge/sqrt(dd);

	call	__CIsqrt
	fld	QWORD PTR _charge$[ebp]
	fdiv	ST(0), ST(1)

; 972  :       energy += en1;
; 973  : 
; 974  :       // Gradient for this edge being first edge.  Note
; 975  :       // grad[0] is for tail vertex and grad[1] for head.
; 976  :       for ( j = 0 ; j < SDIM ; j++ ) 

	xor	eax, eax
	fld	QWORD PTR _energy$[ebp]
	fadd	ST(0), ST(1)
	fst	QWORD PTR _energy$[ebp]
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN90@mughal_far@3
	fld	QWORD PTR _dd$[ebp]
	fdiv	ST(2), ST(0)
	fld	QWORD PTR __real@3fe0000000000000
$LN6@mughal_far@3:

; 977  :       {
; 978  :          e_info->grad[0][j] += en1/dd*r[j]/2;

	fld	QWORD PTR _r$[ebp+eax*8]
	mov	edx, DWORD PTR [ebx+1336]
	mov	ecx, DWORD PTR [edx]
	fmul	ST(0), ST(4)
	lea	ecx, DWORD PTR [ecx+eax*8]
	fmul	ST(0), ST(1)
	fld	ST(0)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR [ebx+1336]
	mov	ecx, DWORD PTR [edx+4]

; 979  :          e_info->grad[1][j] += en1/dd*r[j]/2;

	fadd	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN6@mughal_far@3

; 972  :       energy += en1;
; 973  : 
; 974  :       // Gradient for this edge being first edge.  Note
; 975  :       // grad[0] is for tail vertex and grad[1] for head.
; 976  :       for ( j = 0 ; j < SDIM ; j++ ) 

	fstp	ST(3)
	jmp	SHORT $LN4@mughal_far@3
$LN90@mughal_far@3:
	fstp	ST(1)
	fld	QWORD PTR _dd$[ebp]
	fld	QWORD PTR __real@3fe0000000000000
	fxch	ST(2)
	fxch	ST(1)
$LN4@mughal_far@3:

; 980  :       }
; 981  : 
; 982  :       // Gradient for this edge being second edge
; 983  :       e_info->grad[0][0] += -1/sqrt(dd);

	fld1
	mov	edx, DWORD PTR [ebx+1336]
	fdiv	ST(0), ST(4)
	mov	eax, DWORD PTR [edx]
	mov	edx, eax
	fld	QWORD PTR [eax]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 984  :       e_info->grad[1][0] += 1/sqrt(dd);

	mov	eax, DWORD PTR [ebx+1336]
	mov	ecx, DWORD PTR [eax+4]
	fadd	QWORD PTR [ecx]
	mov	eax, ecx
	fstp	QWORD PTR [eax]

; 985  :       for ( j = 0 ; j < SDIM ; j++ ) 

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN96@mughal_far@3
$LN3@mughal_far@3:

; 986  :       {  REAL charg = x2[0] - x1[0];

	mov	ecx, DWORD PTR _x2$[ebp]
	fld	QWORD PTR [ecx]
	mov	edx, DWORD PTR _x1$[ebp]
	fsub	QWORD PTR [edx]

; 987  :          e_info->grad[0][j] +=   charg/sqrt(dd)/dd*r[j]/2;

	mov	ecx, DWORD PTR [ebx+1336]
	mov	edx, DWORD PTR [ecx]
	inc	eax
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(1)
	fmul	QWORD PTR _r$[ebp+eax*8-8]
	fmul	ST(0), ST(3)
	fld	QWORD PTR [edx+eax*8-8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx+eax*8-8]

; 988  :          e_info->grad[1][j] +=   charg/sqrt(dd)/dd*r[j]/2;

	mov	ecx, DWORD PTR [ebx+1336]
	mov	edx, DWORD PTR [ecx+4]
	fadd	QWORD PTR [edx+eax*8-8]
	fstp	QWORD PTR [edx+eax*8-8]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN3@mughal_far@3
$LN96@mughal_far@3:

; 985  :       for ( j = 0 ; j < SDIM ; j++ ) 

	mov	edx, DWORD PTR tv745[ebp]
	fstp	ST(3)
	fstp	ST(2)
$LN14@mughal_far@3:

; 958  :   FOR_ALL_EDGES(e2)

	mov	eax, DWORD PTR _web+124
	mov	ecx, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [ecx]
	test	ecx, 268435456				; 10000000H
	jne	$LN48@mughal_far@3
	fstp	ST(0)
$LN13@mughal_far@3:

; 989  :       }
; 990  : 
; 991  :     }
; 992  : 
; 993  :   return energy; 
; 994  : 
; 995  : } // end mughal_far_field_energy_gradient()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_mughal_far_field_gradient ENDP
_TEXT	ENDS
END
