; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\SQCURVE.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_h0_flag:DWORD
COMM	_total_sqcurve:QWORD
COMM	_total_length:QWORD
COMM	_selfsim_coeff:QWORD
COMM	_stokes_type_attr:DWORD
COMM	_curve_power_param:DWORD
COMM	_h0_value:QWORD
COMM	_curve_power:QWORD
COMM	_stokes_velocity_attr:DWORD
_DATA	ENDS
PUBLIC	_get_fe_edge
EXTRN	_web:BYTE
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
;	COMDAT _get_fe_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_edge PROC					; COMDAT

; 43   : {

	push	ebp
	mov	ebp, esp

; 44   :   edge_id e_id;
; 45   :     
; 46   :   e_id = feptr(fe_id)->fe_edge_id;

	mov	eax, DWORD PTR _fe_id$[ebp]

; 47   : 
; 48   :   /*
; 49   :   if ( inverted(fe_id) ) invert(e_id);
; 50   :   return e_id;
; 51   :   */
; 52   :   
; 53   :   return same_sign(e_id,fe_id);

	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]

; 54   : }

	pop	ebp
	ret	0
_get_fe_edge ENDP
_TEXT	ENDS
PUBLIC	_get_fe_facet
EXTRN	_NULLFACET:DWORD
; Function compile flags: /Ogtp
;	COMDAT _get_fe_facet
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_facet PROC					; COMDAT

; 58   : {

	push	ebp
	mov	ebp, esp

; 59   :   facet_id f_id;
; 60   :   
; 61   :   if ( !valid_id(fe_id) ) return NULLFACET;

	mov	ecx, DWORD PTR _fe_id$[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN2@get_fe_fac
	mov	eax, DWORD PTR _NULLFACET

; 64   :   return f_id;
; 65   : }

	pop	ebp
	ret	0
$LN2@get_fe_fac:

; 62   :   f_id = feptr(fe_id)->fe_facet_id;

	mov	edx, DWORD PTR _web+460
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+24]

; 63   :   if ( inverted(fe_id) ) invert(f_id);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_fe_fac
	xor	eax, 134217728				; 08000000H
$LN3@get_fe_fac:

; 64   :   return f_id;
; 65   : }

	pop	ebp
	ret	0
_get_fe_facet ENDP
_TEXT	ENDS
PUBLIC	_get_prev_edge
; Function compile flags: /Ogtp
;	COMDAT _get_prev_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_prev_edge PROC					; COMDAT

; 69   : {

	push	ebp
	mov	ebp, esp

; 70   :   if ( inverted(fe_id) ) return inverse_id(feptr(fe_id)->nextedge[1]);

	mov	eax, DWORD PTR _fe_id$[ebp]
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_prev_e
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H

; 72   : }

	pop	ebp
	ret	0
$LN2@get_prev_e:

; 71   :   else return feptr(fe_id)->nextedge[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]

; 72   : }

	pop	ebp
	ret	0
_get_prev_edge ENDP
_TEXT	ENDS
PUBLIC	_get_next_edge
; Function compile flags: /Ogtp
;	COMDAT _get_next_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_next_edge PROC					; COMDAT

; 76   : {

	push	ebp
	mov	ebp, esp

; 77   :   if ( inverted(fe_id) ) return inverse_id(feptr(fe_id)->nextedge[0]);

	mov	eax, DWORD PTR _fe_id$[ebp]
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_next_e
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H

; 79   : }

	pop	ebp
	ret	0
$LN2@get_next_e:

; 78   :   else return feptr(fe_id)->nextedge[1];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]

; 79   : }

	pop	ebp
	ret	0
_get_next_edge ENDP
_TEXT	ENDS
PUBLIC	_get_next_facet
; Function compile flags: /Ogtp
;	COMDAT _get_next_facet
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_next_facet PROC					; COMDAT

; 92   : {

	push	ebp
	mov	ebp, esp

; 93   :   if ( inverted(fe_id) ) 

	mov	eax, DWORD PTR _fe_id$[ebp]

; 94   :     return inverse_id(feptr(fe_id)->nextfacet[0]);

	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_next_f
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H

; 97   : }

	pop	ebp
	ret	0
$LN2@get_next_f:

; 95   :   else 
; 96   :     return feptr(fe_id)->nextfacet[1];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+40]

; 97   : }

	pop	ebp
	ret	0
_get_next_facet ENDP
_TEXT	ENDS
PUBLIC	_get_edge_fe
; Function compile flags: /Ogtp
;	COMDAT _get_edge_fe
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_fe PROC					; COMDAT

; 179  : {   struct edge *ep;

	push	ebp
	mov	ebp, esp

; 180  :     facetedge_id fe;
; 181  : 
; 182  :  	ep = eptr(e_id);

	mov	ecx, DWORD PTR _e_id$[ebp]
	mov	edx, DWORD PTR _web+124
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]

; 183  :     if ( !ep ) return NULLID;

	test	eax, eax
	jne	SHORT $LN2@get_edge_f

; 186  :     return fe;
; 187  : }

	pop	ebp
	ret	0
$LN2@get_edge_f:

; 184  :     fe = ep->fe_id; 

	mov	eax, DWORD PTR [eax+28]

; 185  :     if ( inverted(e_id) ) invert(fe);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_edge_f
	xor	eax, 134217728				; 08000000H
$LN3@get_edge_f:

; 186  :     return fe;
; 187  : }

	pop	ebp
	ret	0
_get_edge_fe ENDP
_TEXT	ENDS
PUBLIC	_get_edge_tailv
EXTRN	_dymem:DWORD
; Function compile flags: /Ogtp
;	COMDAT _get_edge_tailv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_tailv PROC					; COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp

; 192  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 193  :      return get_edge_vertices(e_id)[web.headvnum];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_t
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 196  : }

	pop	ebp
	ret	0
$LN2@get_edge_t:

; 194  :   else
; 195  :      return get_edge_vertices(e_id)[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 196  : }

	pop	ebp
	ret	0
_get_edge_tailv ENDP
_TEXT	ENDS
PUBLIC	_get_edge_headv
; Function compile flags: /Ogtp
;	COMDAT _get_edge_headv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_headv PROC					; COMDAT

; 200  : {

	push	ebp
	mov	ebp, esp

; 201  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 202  :      return get_edge_vertices(e_id)[0];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_h
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 205  : }

	pop	ebp
	ret	0
$LN2@get_edge_h:

; 203  :   else
; 204  :      return get_edge_vertices(e_id)[web.headvnum];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 205  : }

	pop	ebp
	ret	0
_get_edge_headv ENDP
_TEXT	ENDS
PUBLIC	_get_facet_fe
; Function compile flags: /Ogtp
;	COMDAT _get_facet_fe
_TEXT	SEGMENT
_f_id$ = 8						; size = 4
_get_facet_fe PROC					; COMDAT

; 260  : {

	push	ebp
	mov	ebp, esp

; 261  :   facetedge_id fe;
; 262  :   
; 263  :   if ( !valid_id(f_id) ) return NULLID;

	mov	ecx, DWORD PTR _f_id$[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN2@get_facet_
	xor	eax, eax

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
$LN2@get_facet_:

; 264  :   fe = fptr(f_id)->fe_id;

	mov	edx, DWORD PTR _web+236
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]

; 265  :   if ( inverted(f_id) ) invert(fe);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_facet_
	xor	eax, 134217728				; 08000000H
$LN3@get_facet_:

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
_get_facet_fe ENDP
_TEXT	ENDS
PUBLIC	_get_next_tail_edge
; Function compile flags: /Ogtp
;	COMDAT _get_next_tail_edge
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_next_tail_edge PROC				; COMDAT

; 270  : { return eptr(e_id)->next_vedge[inverted(e_id) ?1: 0] ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _e_id$[ebp]
	mov	edx, DWORD PTR _web+124
	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ecx*4+32]
	pop	ebp
	ret	0
_get_next_tail_edge ENDP
_TEXT	ENDS
PUBLIC	__real@4018000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	??_C@_0P@BKNJOKJM@self_sim_coeff?$AA@		; `string'
PUBLIC	??_C@_06CNJIKMCI@h_zero?$AA@			; `string'
PUBLIC	??_C@_09EONILAFN@SQCURVE?4C?$AA@		; `string'
PUBLIC	__real@0000000000000000
PUBLIC	_sqcurve_energy_init
EXTRN	_add_global:PROC
EXTRN	_self_similar_flag:DWORD
EXTRN	_localbase:DWORD
EXTRN	_lookup_global:PROC
EXTRN	_h0_attr:DWORD
EXTRN	_find_extra:PROC
EXTRN	_v_curve:DWORD
EXTRN	_kb_temp_calloc:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@4018000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\sqcurve.c
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT ??_C@_0P@BKNJOKJM@self_sim_coeff?$AA@
CONST	SEGMENT
??_C@_0P@BKNJOKJM@self_sim_coeff?$AA@ DB 'self_sim_coeff', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06CNJIKMCI@h_zero?$AA@
CONST	SEGMENT
??_C@_06CNJIKMCI@h_zero?$AA@ DB 'h_zero', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09EONILAFN@SQCURVE?4C?$AA@
CONST	SEGMENT
??_C@_09EONILAFN@SQCURVE?4C?$AA@ DB 'SQCURVE.C', 00H	; `string'
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _sqcurve_energy_init
_TEXT	SEGMENT
_eltype$ = -4						; size = 4
_sqcurve_energy_init PROC				; COMDAT

; 32   : { int k;

	push	ebp
	mov	ebp, esp
	push	ecx

; 33   :   int eltype;
; 34   : 
; 35   :   total_sqcurve = 0.0;

	fldz
	push	esi

; 36   :   total_length  = 0.0;
; 37   :   if ( web.representation != SOAPFILM ) return; /* not needed for string */

	mov	esi, 2
	fst	QWORD PTR _total_sqcurve
	fstp	QWORD PTR _total_length
	cmp	DWORD PTR _web+624, esi
	jne	$LN1@sqcurve_en

; 38   : 
; 39   :   v_curve = (struct v_curve_t *)temp_calloc(web.skel[VERTEX].max_ord+1,
; 40   :                          sizeof(struct v_curve_t));

	mov	eax, DWORD PTR _web+68
	push	40					; 00000028H
	push	OFFSET ??_C@_09EONILAFN@SQCURVE?4C?$AA@
	inc	eax
	push	544					; 00000220H
	push	eax
	call	_kb_temp_calloc

; 41   : 
; 42   :   /* see if using (H - H_0)^2 adjustment */
; 43   :   h0_flag = 0;
; 44   :   h0_attr = find_extra("h_zero",&eltype);

	lea	ecx, DWORD PTR _eltype$[ebp]
	push	ecx
	push	OFFSET ??_C@_06CNJIKMCI@h_zero?$AA@
	mov	DWORD PTR _v_curve, eax
	mov	DWORD PTR _h0_flag, 0
	call	_find_extra
	add	esp, 24					; 00000018H
	mov	DWORD PTR _h0_attr, eax

; 45   :   if ( h0_attr >= 0 )

	test	eax, eax
	js	SHORT $LN6@sqcurve_en

; 46   :     h0_flag = H0_IN_ATTR; 

	mov	DWORD PTR _h0_flag, esi

; 47   :   else

	jmp	$LN4@sqcurve_en
$LN6@sqcurve_en:

; 48   :   { k = lookup_global("h_zero");

	push	OFFSET ??_C@_06CNJIKMCI@h_zero?$AA@
	call	_lookup_global
	add	esp, 4

; 49   :     if ( k >= 0 ) 

	test	eax, eax
	js	SHORT $LN4@sqcurve_en

; 50   :     { h0_flag = H0_IN_GLOBAL;
; 51   :       h0_value = globals(k)->value.real;

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	mov	DWORD PTR _h0_flag, 1
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN10@sqcurve_en
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN12@sqcurve_en
	mov	edx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [edx]
	jmp	SHORT $LN11@sqcurve_en
$LN12@sqcurve_en:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN10@sqcurve_en
	mov	ecx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN11@sqcurve_en
$LN10@sqcurve_en:
	mov	edx, DWORD PTR _web+5652
	mov	ecx, DWORD PTR _dymem
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ecx]
$LN11@sqcurve_en:
	fld	QWORD PTR [eax+64]
	fstp	QWORD PTR _h0_value
$LN4@sqcurve_en:

; 52   :     }
; 53   :   }
; 54   :   if ( self_similar_flag )

	cmp	DWORD PTR _self_similar_flag, 0
	je	$LN1@sqcurve_en

; 55   :   { int param = lookup_global(SELFSIM_NAME);

	push	OFFSET ??_C@_0P@BKNJOKJM@self_sim_coeff?$AA@
	call	_lookup_global
	add	esp, 4

; 56   :     if ( param < 0 ) /* missing, so add */

	test	eax, eax
	jns	$LN2@sqcurve_en

; 57   :     { param = add_global(SELFSIM_NAME);

	push	ebx
	push	OFFSET ??_C@_0P@BKNJOKJM@self_sim_coeff?$AA@
	call	_add_global

; 58   :       globals(param)->value.real = 1.0;  /* default */

	mov	esi, eax
	and	esi, -16777216				; ff000000H
	add	esp, 4
	cmp	esi, 268435456				; 10000000H
	je	SHORT $LN16@sqcurve_en
	cmp	esi, 805306368				; 30000000H
	jne	SHORT $LN18@sqcurve_en
	mov	ebx, DWORD PTR _localbase
	mov	ecx, eax
	and	ecx, 16777215				; 00ffffffH
	mov	edx, ecx
	imul	edx, 224				; 000000e0H
	add	edx, DWORD PTR [ebx]
	jmp	SHORT $LN17@sqcurve_en
$LN18@sqcurve_en:
	cmp	esi, 536870912				; 20000000H
	jne	SHORT $LN16@sqcurve_en
	mov	edx, DWORD PTR _web+5656
	mov	ecx, eax
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR [edx+ecx*4]
	jmp	SHORT $LN17@sqcurve_en
$LN16@sqcurve_en:
	mov	edx, DWORD PTR _web+5652
	mov	ebx, DWORD PTR _dymem
	mov	ecx, eax
	and	ecx, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [edx+ebx]
$LN17@sqcurve_en:
	fld1
	pop	ebx
	fstp	QWORD PTR [edx+64]

; 59   :       globals(param)->flags |=  ORDINARY_PARAM | RECALC_PARAMETER | ALWAYS_RECALC;

	cmp	esi, 268435456				; 10000000H
	je	SHORT $LN22@sqcurve_en
	cmp	esi, 805306368				; 30000000H
	jne	SHORT $LN24@sqcurve_en
	mov	edx, DWORD PTR _localbase
	imul	ecx, 224				; 000000e0H
	add	ecx, DWORD PTR [edx]
	jmp	SHORT $LN23@sqcurve_en
$LN24@sqcurve_en:
	cmp	esi, 536870912				; 20000000H
	jne	SHORT $LN22@sqcurve_en
	mov	edx, DWORD PTR _web+5656
	mov	ecx, DWORD PTR [edx+ecx*4]
	jmp	SHORT $LN23@sqcurve_en
$LN22@sqcurve_en:
	mov	edx, DWORD PTR _web+5652
	lea	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edx]
$LN23@sqcurve_en:
	or	DWORD PTR [ecx+192], 134217737		; 08000009H
$LN2@sqcurve_en:

; 60   :     }
; 61   :     selfsim_coeff = globals(param)->value.real/6; /* area and volume factor */

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN28@sqcurve_en
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN30@sqcurve_en
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN29@sqcurve_en
$LN30@sqcurve_en:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN28@sqcurve_en
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN29@sqcurve_en
$LN28@sqcurve_en:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN29@sqcurve_en:

; 62   :     if ( h0_flag == 0 ) { h0_flag = H0_IN_GLOBAL; h0_value = 0.0; }

	cmp	DWORD PTR _h0_flag, 0
	fld	QWORD PTR [eax+64]
	fdiv	QWORD PTR __real@4018000000000000
	fstp	QWORD PTR _selfsim_coeff
	jne	SHORT $LN1@sqcurve_en
	fldz
	mov	DWORD PTR _h0_flag, 1
	fstp	QWORD PTR _h0_value
$LN1@sqcurve_en:
	pop	esi

; 63   :   }
; 64   : } // end sqcurve_energy_init()

	mov	esp, ebp
	pop	ebp
	ret	0
_sqcurve_energy_init ENDP
_TEXT	ENDS
PUBLIC	_sqcurve_force_init
EXTRN	_e_curve:DWORD
; Function compile flags: /Ogtp
;	COMDAT _sqcurve_force_init
_TEXT	SEGMENT
_eltype$ = -4						; size = 4
_sqcurve_force_init PROC				; COMDAT

; 75   : { int k;

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi

; 76   :   int eltype;
; 77   :   
; 78   :   if ( web.representation != SOAPFILM ) return; /* not needed for string */

	mov	esi, 2
	cmp	DWORD PTR _web+624, esi
	jne	$LN1@sqcurve_fo

; 79   : 
; 80   :   v_curve = (struct v_curve_t *)temp_calloc(web.skel[VERTEX].max_ord+1,
; 81   :                          sizeof(struct v_curve_t));

	mov	eax, DWORD PTR _web+68
	push	81					; 00000051H
	push	OFFSET ??_C@_09EONILAFN@SQCURVE?4C?$AA@
	inc	eax
	push	544					; 00000220H
	push	eax
	call	_kb_temp_calloc

; 82   :   e_curve = (struct e_curve_t *)temp_calloc(web.skel[EDGE].max_ord+1,
; 83   :                          sizeof(struct e_curve_t));

	mov	ecx, DWORD PTR _web+180
	push	83					; 00000053H
	push	OFFSET ??_C@_09EONILAFN@SQCURVE?4C?$AA@
	inc	ecx
	push	576					; 00000240H
	push	ecx
	mov	DWORD PTR _v_curve, eax
	call	_kb_temp_calloc

; 84   : 
; 85   :   /* see if using (H - H_0)^2 adjustment */
; 86   :   h0_flag = 0;
; 87   :   h0_attr = find_extra("h_zero",&eltype);

	lea	edx, DWORD PTR _eltype$[ebp]
	push	edx
	push	OFFSET ??_C@_06CNJIKMCI@h_zero?$AA@
	mov	DWORD PTR _e_curve, eax
	mov	DWORD PTR _h0_flag, 0
	call	_find_extra
	add	esp, 40					; 00000028H
	mov	DWORD PTR _h0_attr, eax

; 88   :   if ( h0_attr >= 0 )

	test	eax, eax
	js	SHORT $LN6@sqcurve_fo

; 89   :     h0_flag = H0_IN_ATTR; 

	mov	DWORD PTR _h0_flag, esi

; 90   :   else

	jmp	SHORT $LN4@sqcurve_fo
$LN6@sqcurve_fo:

; 91   :   { k = lookup_global("h_zero");

	push	OFFSET ??_C@_06CNJIKMCI@h_zero?$AA@
	call	_lookup_global
	add	esp, 4

; 92   :     if ( k >= 0 ) 

	test	eax, eax
	js	SHORT $LN4@sqcurve_fo

; 93   :     { h0_flag = H0_IN_GLOBAL;
; 94   :       h0_value = globals(k)->value.real;

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	mov	DWORD PTR _h0_flag, 1
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN10@sqcurve_fo
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN12@sqcurve_fo
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN11@sqcurve_fo
$LN12@sqcurve_fo:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN10@sqcurve_fo
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN11@sqcurve_fo
$LN10@sqcurve_fo:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN11@sqcurve_fo:
	fld	QWORD PTR [eax+64]
	fstp	QWORD PTR _h0_value
$LN4@sqcurve_fo:

; 95   :     }
; 96   :   }
; 97   : 
; 98   :   if ( self_similar_flag )

	cmp	DWORD PTR _self_similar_flag, 0
	je	$LN1@sqcurve_fo

; 99   :   { int param = lookup_global(SELFSIM_NAME);

	push	OFFSET ??_C@_0P@BKNJOKJM@self_sim_coeff?$AA@
	call	_lookup_global
	add	esp, 4

; 100  :     if ( param < 0 ) /* missing, so add */

	test	eax, eax
	jns	$LN2@sqcurve_fo

; 101  :     { param = add_global(SELFSIM_NAME);

	push	ebx
	push	OFFSET ??_C@_0P@BKNJOKJM@self_sim_coeff?$AA@
	call	_add_global

; 102  :       globals(param)->value.real = 1.0;  /* default */

	mov	esi, eax
	and	esi, -16777216				; ff000000H
	add	esp, 4
	cmp	esi, 268435456				; 10000000H
	je	SHORT $LN16@sqcurve_fo
	cmp	esi, 805306368				; 30000000H
	jne	SHORT $LN18@sqcurve_fo
	mov	ebx, DWORD PTR _localbase
	mov	ecx, eax
	and	ecx, 16777215				; 00ffffffH
	mov	edx, ecx
	imul	edx, 224				; 000000e0H
	add	edx, DWORD PTR [ebx]
	jmp	SHORT $LN17@sqcurve_fo
$LN18@sqcurve_fo:
	cmp	esi, 536870912				; 20000000H
	jne	SHORT $LN16@sqcurve_fo
	mov	edx, DWORD PTR _web+5656
	mov	ecx, eax
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR [edx+ecx*4]
	jmp	SHORT $LN17@sqcurve_fo
$LN16@sqcurve_fo:
	mov	edx, DWORD PTR _web+5652
	mov	ebx, DWORD PTR _dymem
	mov	ecx, eax
	and	ecx, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [edx+ebx]
$LN17@sqcurve_fo:
	fld1
	pop	ebx
	fstp	QWORD PTR [edx+64]

; 103  :       globals(param)->flags |=  ORDINARY_PARAM | RECALC_PARAMETER;

	cmp	esi, 268435456				; 10000000H
	je	SHORT $LN22@sqcurve_fo
	cmp	esi, 805306368				; 30000000H
	jne	SHORT $LN24@sqcurve_fo
	mov	edx, DWORD PTR _localbase
	imul	ecx, 224				; 000000e0H
	add	ecx, DWORD PTR [edx]
	jmp	SHORT $LN23@sqcurve_fo
$LN24@sqcurve_fo:
	cmp	esi, 536870912				; 20000000H
	jne	SHORT $LN22@sqcurve_fo
	mov	edx, DWORD PTR _web+5656
	mov	ecx, DWORD PTR [edx+ecx*4]
	jmp	SHORT $LN23@sqcurve_fo
$LN22@sqcurve_fo:
	mov	edx, DWORD PTR _web+5652
	lea	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edx]
$LN23@sqcurve_fo:
	or	DWORD PTR [ecx+192], 9
$LN2@sqcurve_fo:

; 104  :     }
; 105  :     selfsim_coeff = globals(param)->value.real/6; /* area and volume factor */

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN28@sqcurve_fo
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN30@sqcurve_fo
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN29@sqcurve_fo
$LN30@sqcurve_fo:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN28@sqcurve_fo
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN29@sqcurve_fo
$LN28@sqcurve_fo:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN29@sqcurve_fo:

; 106  :     if ( h0_flag == 0 ) { h0_flag = H0_IN_GLOBAL; h0_value = 0.0; }

	cmp	DWORD PTR _h0_flag, 0
	fld	QWORD PTR [eax+64]
	fdiv	QWORD PTR __real@4018000000000000
	fstp	QWORD PTR _selfsim_coeff
	jne	SHORT $LN1@sqcurve_fo
	fldz
	mov	DWORD PTR _h0_flag, 1
	fstp	QWORD PTR _h0_value
$LN1@sqcurve_fo:
	pop	esi

; 107  :   }
; 108  : } // end sqcurve_force_init()

	mov	esp, ebp
	pop	ebp
	ret	0
_sqcurve_force_init ENDP
_TEXT	ENDS
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__$ArrayPad$
PUBLIC	_sqcurve_energy
EXTRN	_cross_prod:PROC
EXTRN	_div_normal_curvature_flag:DWORD
EXTRN	_normal_curvature_flag:DWORD
EXTRN	_effective_area_flag:DWORD
EXTRN	_boundary_curvature_flag:DWORD
EXTRN	_dot:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CIsqrt:PROC
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _sqcurve_energy
_TEXT	SEGMENT
_t2t2$ = -100						; size = 8
_t1t1$ = -92						; size = 8
_t1t2$ = -84						; size = 8
tv961 = -76						; size = 4
_vc$ = -72						; size = 12
_fixcount$89100 = -60					; size = 4
tv1447 = -56						; size = 4
tv1433 = -56						; size = 4
tv1419 = -56						; size = 4
tv1366 = -56						; size = 4
tv970 = -56						; size = 4
_normal$89123 = -52					; size = 48
__$ArrayPad$ = -4					; size = 4
_v_id$ = 8						; size = 4
_side$ = 12						; size = 4
_sqcurve_energy PROC					; COMDAT

; 122  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 123  :   REAL t1t1,t1t2,t2t2;
; 124  :   REAL det;
; 125  :   struct v_curve_t *vc[FACET_VERTS];
; 126  :   int i,j;
; 127  :   REAL area;
; 128  : 
; 129  :   t1t1 = SDIM_dot(side[0],side[0]);

	mov	eax, DWORD PTR _web+616
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _side$[ebp]
	push	eax
	push	edi
	push	edi
	call	_dot
	fstp	QWORD PTR _t1t1$[ebp]

; 130  :   t1t2 = SDIM_dot(side[0],side[1]);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	ebx, DWORD PTR [edi+48]
	push	ebx
	push	edi
	call	_dot
	fstp	QWORD PTR _t1t2$[ebp]

; 131  :   t2t2 = SDIM_dot(side[1],side[1]);

	mov	edx, DWORD PTR _web+616
	push	edx
	push	ebx
	push	ebx
	call	_dot
	fst	QWORD PTR _t2t2$[ebp]

; 132  : 
; 133  :   det = t1t1*t2t2 - t1t2*t1t2;

	fmul	QWORD PTR _t1t1$[ebp]
	add	esp, 36					; 00000024H
	fld	QWORD PTR _t1t2$[ebp]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)

; 134  : 
; 135  :   area = sqrt(det)/2;

	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000

; 136  :   for ( i = 0 ; i < FACET_VERTS ; i++ )
; 137  :   { vc[i] = v_curve + loc_ordinal(v_id[i]);

	mov	esi, DWORD PTR _v_id$[ebp]
	mov	eax, DWORD PTR [esi]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN27@sqcurve_en@2
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN28@sqcurve_en@2
$LN27@sqcurve_en@2:
	or	eax, -1
$LN28@sqcurve_en@2:
	imul	eax, 544				; 00000220H
	add	eax, DWORD PTR _v_curve

; 138  :     vc[i]->area += area;

	fld	QWORD PTR [eax]
	mov	DWORD PTR _vc$[ebp], eax
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR [esi+4]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN48@sqcurve_en@2

; 136  :   for ( i = 0 ; i < FACET_VERTS ; i++ )
; 137  :   { vc[i] = v_curve + loc_ordinal(v_id[i]);

	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN49@sqcurve_en@2
$LN48@sqcurve_en@2:
	or	eax, -1
$LN49@sqcurve_en@2:
	imul	eax, 544				; 00000220H
	add	eax, DWORD PTR _v_curve
	mov	ecx, eax

; 138  :     vc[i]->area += area;

	fld	QWORD PTR [ecx]
	mov	DWORD PTR _vc$[ebp+4], ecx
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR [esi+8]
	test	edx, 268435456				; 10000000H
	je	SHORT $LN51@sqcurve_en@2

; 136  :   for ( i = 0 ; i < FACET_VERTS ; i++ )
; 137  :   { vc[i] = v_curve + loc_ordinal(v_id[i]);

	and	edx, 134217727				; 07ffffffH
	jmp	SHORT $LN52@sqcurve_en@2
$LN51@sqcurve_en@2:
	or	edx, -1
$LN52@sqcurve_en@2:
	imul	edx, 544				; 00000220H
	add	edx, DWORD PTR _v_curve

; 138  :     vc[i]->area += area;

	fld	QWORD PTR [edx]
	mov	DWORD PTR _vc$[ebp+8], edx
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 139  :   }
; 140  :   if ( boundary_curvature_flag ) /* apportion area differently */

	cmp	DWORD PTR _boundary_curvature_flag, 0
	je	$LN76@sqcurve_en@2

; 141  :   { int fixcount = 0;
; 142  :     for ( i = 0 ; i < FACET_VERTS ; i++ )
; 143  :       if ( get_vattr(v_id[i]) & (BOUNDARY|FIXED) ) fixcount++;

	mov	eax, DWORD PTR [esi]
	mov	esi, DWORD PTR _web+12
	mov	DWORD PTR tv961[ebp], eax
	and	eax, 134217727				; 07ffffffH
	mov	DWORD PTR tv970[ebp], eax
	mov	eax, DWORD PTR [esi+eax*4]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 192				; 000000c0H
	xor	eax, eax
	mov	edx, ecx
	or	edx, eax
	mov	DWORD PTR _fixcount$89100[ebp], 0
	je	SHORT $LN19@sqcurve_en@2
	mov	DWORD PTR _fixcount$89100[ebp], 1
$LN19@sqcurve_en@2:
	mov	eax, DWORD PTR _v_id$[ebp]
	mov	edx, DWORD PTR [eax+4]
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+edx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 192				; 000000c0H
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN57@sqcurve_en@2
	inc	DWORD PTR _fixcount$89100[ebp]
$LN57@sqcurve_en@2:
	mov	eax, DWORD PTR _v_id$[ebp]
	mov	edx, DWORD PTR [eax+8]
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+edx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 192				; 000000c0H
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN77@sqcurve_en@2
	inc	DWORD PTR _fixcount$89100[ebp]
$LN77@sqcurve_en@2:

; 144  :     for ( i = 0 ; i < FACET_VERTS ; i++ )
; 145  :     { vc[i] = v_curve+loc_ordinal(v_id[i]);

	test	DWORD PTR tv961[ebp], 268435456		; 10000000H
	je	SHORT $LN29@sqcurve_en@2
	mov	eax, DWORD PTR tv970[ebp]
	jmp	SHORT $LN30@sqcurve_en@2
$LN29@sqcurve_en@2:
	or	eax, -1
$LN30@sqcurve_en@2:

; 146  :       if ( !(get_vattr(v_id[i]) & (BOUNDARY|FIXED)) )

	fld	QWORD PTR __real@4008000000000000
	imul	eax, 544				; 00000220H
	add	eax, DWORD PTR _v_curve
	xor	edx, edx
	or	ecx, edx
	mov	DWORD PTR _vc$[ebp], eax
	jne	SHORT $LN15@sqcurve_en@2

; 147  :         vc[i]->a += 3*area/(3-fixcount);

	mov	ecx, 3
	fld	ST(1)
	sub	ecx, DWORD PTR _fixcount$89100[ebp]
	fmul	ST(0), ST(1)
	mov	DWORD PTR tv1447[ebp], ecx
	fild	DWORD PTR tv1447[ebp]
	fdivp	ST(1), ST(0)
	fadd	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]
	mov	esi, DWORD PTR _web+12
$LN15@sqcurve_en@2:

; 144  :     for ( i = 0 ; i < FACET_VERTS ; i++ )
; 145  :     { vc[i] = v_curve+loc_ordinal(v_id[i]);

	mov	edx, DWORD PTR _v_id$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN66@sqcurve_en@2
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN67@sqcurve_en@2
$LN66@sqcurve_en@2:
	or	eax, -1
$LN67@sqcurve_en@2:
	imul	eax, 544				; 00000220H
	add	eax, DWORD PTR _v_curve

; 146  :       if ( !(get_vattr(v_id[i]) & (BOUNDARY|FIXED)) )

	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	edx, eax
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 192				; 000000c0H
	xor	ecx, ecx
	or	eax, ecx
	mov	DWORD PTR _vc$[ebp+4], edx
	jne	SHORT $LN68@sqcurve_en@2

; 147  :         vc[i]->a += 3*area/(3-fixcount);

	mov	eax, 3
	fld	ST(1)
	sub	eax, DWORD PTR _fixcount$89100[ebp]
	fmul	ST(0), ST(1)
	mov	DWORD PTR tv1433[ebp], eax
	fild	DWORD PTR tv1433[ebp]
	fdivp	ST(1), ST(0)
	fadd	QWORD PTR [edx+8]
	fstp	QWORD PTR [edx+8]
	mov	esi, DWORD PTR _web+12
$LN68@sqcurve_en@2:

; 144  :     for ( i = 0 ; i < FACET_VERTS ; i++ )
; 145  :     { vc[i] = v_curve+loc_ordinal(v_id[i]);

	mov	ecx, DWORD PTR _v_id$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN70@sqcurve_en@2
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN71@sqcurve_en@2
$LN70@sqcurve_en@2:
	or	eax, -1
$LN71@sqcurve_en@2:
	imul	eax, 544				; 00000220H
	add	eax, DWORD PTR _v_curve

; 146  :       if ( !(get_vattr(v_id[i]) & (BOUNDARY|FIXED)) )

	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	edx, eax
	mov	eax, DWORD PTR [ecx+8]
	xor	ecx, ecx
	and	eax, 192				; 000000c0H
	or	eax, ecx

; 147  :         vc[i]->a += 3*area/(3-fixcount);

	mov	ecx, DWORD PTR _vc$[ebp+4]
	mov	DWORD PTR _vc$[ebp+8], edx
	jne	SHORT $LN122@sqcurve_en@2
	mov	eax, 3
	fmul	ST(0), ST(1)
	sub	eax, DWORD PTR _fixcount$89100[ebp]
	mov	DWORD PTR tv1419[ebp], eax
	fild	DWORD PTR tv1419[ebp]
	fdivp	ST(1), ST(0)
	fadd	QWORD PTR [edx+8]
	fstp	QWORD PTR [edx+8]
	jmp	SHORT $LN76@sqcurve_en@2
$LN122@sqcurve_en@2:

; 146  :       if ( !(get_vattr(v_id[i]) & (BOUNDARY|FIXED)) )

	fstp	ST(0)
$LN76@sqcurve_en@2:

; 148  :     }
; 149  :   }
; 150  : 
; 151  :   if ( area > 0.0 )

	fldz
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	$LN125@sqcurve_en@2

; 152  :     for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	$LN125@sqcurve_en@2
	mov	esi, DWORD PTR _vc$[ebp]
	fld	QWORD PTR __real@3fd0000000000000
	fld	QWORD PTR _t2t2$[ebp]
	add	ecx, 16					; 00000010H
	fld	QWORD PTR _t1t2$[ebp]
	sub	esi, edx
	sub	edx, DWORD PTR _vc$[ebp+4]
	fld	QWORD PTR _t1t1$[ebp]
	mov	DWORD PTR tv1366[ebp], edx
	jmp	SHORT $LN11@sqcurve_en@2
$LN73@sqcurve_en@2:
	mov	edx, DWORD PTR tv1366[ebp]
$LN11@sqcurve_en@2:

; 153  :     { vc[0]->force[i] -= (t2t2*side[0][i]-t1t2*side[1][i])/4/area;

	fld	QWORD PTR [edi+eax*8]
	lea	ebx, DWORD PTR [edi+48]
	fmul	ST(0), ST(3)
	add	edx, ecx
	fld	ST(2)
	inc	eax
	fmul	QWORD PTR [ebx+eax*8-8]
	add	ecx, 8
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fdiv	ST(0), ST(5)
	fsubr	QWORD PTR [edx+esi]
	fstp	QWORD PTR [edx+esi]

; 154  :       vc[1]->force[i] += (t2t2*side[0][i]-t1t2*side[1][i])/4/area;

	fld	QWORD PTR [edi+eax*8-8]
	fmul	ST(0), ST(3)
	fld	ST(2)
	fmul	QWORD PTR [ebx+eax*8-8]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fdiv	ST(0), ST(5)
	fadd	QWORD PTR [ecx-8]
	fstp	QWORD PTR [ecx-8]

; 155  :       vc[2]->force[i] += (t1t1*side[1][i]-t1t2*side[0][i])/4/area;

	fld	ST(0)
	fmul	QWORD PTR [ebx+eax*8-8]
	fld	QWORD PTR [edi+eax*8-8]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fdiv	ST(0), ST(5)
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]

; 156  :       vc[1]->force[i] -= (t1t1*side[1][i]-t1t2*side[0][i])/4/area;

	fld	ST(0)
	fmul	QWORD PTR [ebx+eax*8-8]
	fld	QWORD PTR [edi+eax*8-8]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fdiv	ST(0), ST(5)
	fsubr	QWORD PTR [ecx-8]
	fstp	QWORD PTR [ecx-8]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN73@sqcurve_en@2

; 152  :     for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(4)
	fstp	ST(2)
	fstp	ST(1)
	fstp	ST(1)
$LN125@sqcurve_en@2:

; 157  :     }
; 158  : 
; 159  :   if ( effective_area_flag || normal_curvature_flag || div_normal_curvature_flag 
; 160  :             || self_similar_flag || h0_flag ) 

	cmp	DWORD PTR _effective_area_flag, 0
	fstp	ST(0)
	jne	SHORT $LN7@sqcurve_en@2
	cmp	DWORD PTR _normal_curvature_flag, 0
	jne	SHORT $LN7@sqcurve_en@2
	cmp	DWORD PTR _div_normal_curvature_flag, 0
	jne	SHORT $LN7@sqcurve_en@2
	cmp	DWORD PTR _self_similar_flag, 0
	jne	SHORT $LN7@sqcurve_en@2
	cmp	DWORD PTR _h0_flag, 0
	je	SHORT $LN4@sqcurve_en@2
$LN7@sqcurve_en@2:

; 161  :   /* accumulate normal vector at each vertex */
; 162  :   { REAL normal[MAXCOORD];
; 163  :     cross_prod(side[0],side[1],normal);

	lea	ecx, DWORD PTR _normal$89123[ebp]
	push	ecx
	push	ebx
	push	edi
	call	_cross_prod

; 164  :     for ( i = 0 ; i < 3 ; i ++ )

	mov	edx, DWORD PTR _web+616
	add	esp, 12					; 0000000cH
	xor	esi, esi
	npad	1
$LL6@sqcurve_en@2:

; 165  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN5@sqcurve_en@2
	mov	eax, DWORD PTR _vc$[ebp+esi*4]
	add	eax, 416				; 000001a0H
	npad	1
$LL3@sqcurve_en@2:

; 166  :         vc[i]->normal[j] += normal[j];

	fld	QWORD PTR _normal$89123[ebp+ecx*8]
	inc	ecx
	fadd	QWORD PTR [eax]
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	mov	edx, DWORD PTR _web+616
	cmp	ecx, edx
	jl	SHORT $LL3@sqcurve_en@2
$LN5@sqcurve_en@2:

; 164  :     for ( i = 0 ; i < 3 ; i ++ )

	inc	esi
	cmp	esi, 3
	jl	SHORT $LL6@sqcurve_en@2
$LN4@sqcurve_en@2:

; 167  :   }
; 168  : } // end sqcurve_energy()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_sqcurve_energy ENDP
_TEXT	ENDS
PUBLIC	_side$GSCopy$
PUBLIC	_e_id$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_sqcurve_force
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT _sqcurve_force
_TEXT	SEGMENT
tv4580 = -380						; size = 4
_area$ = -376						; size = 8
tv5628 = -368						; size = 4
_i2$89208 = -364					; size = 4
_i1$89207 = -360					; size = 4
_ec$ = -356						; size = 12
tv5631 = -344						; size = 4
tv5096 = -340						; size = 4
_k$ = -336						; size = 4
tv4991 = -332						; size = 4
_vc$ = -328						; size = 12
_e_id$GSCopy$ = -316					; size = 4
tv5566 = -312						; size = 4
tv2085 = -312						; size = 4
_i$ = -312						; size = 4
_side$GSCopy$ = -308					; size = 4
tv3523 = -304						; size = 4
tv2188 = -304						; size = 4
_ii$89190 = -304					; size = 4
tv4995 = -300						; size = 4
_fixcount$ = -300					; size = 4
tv5604 = -296						; size = 4
tv1199 = -296						; size = 4
tv625 = -296						; size = 4
tv4502 = -292						; size = 4
tv4064 = -292						; size = 4
tv3461 = -292						; size = 4
tv5636 = -288						; size = 4
tv5556 = -288						; size = 4
tv5543 = -288						; size = 4
tv5530 = -288						; size = 4
tv5495 = -288						; size = 4
tv4153 = -288						; size = 4
_i2$89183 = -288					; size = 4
tv4791 = -284						; size = 4
tv4084 = -284						; size = 4
tv3487 = -284						; size = 4
tv2840 = -284						; size = 4
tv5001 = -280						; size = 4
tv4062 = -280						; size = 4
tv3465 = -280						; size = 4
tv2838 = -280						; size = 4
tv2003 = -276						; size = 4
_j$ = -276						; size = 4
tv5602 = -272						; size = 4
tv4157 = -272						; size = 4
tv2842 = -272						; size = 4
tv1990 = -272						; size = 4
_force$ = -268						; size = 144
_normal$89249 = -124					; size = 48
_cp$89229 = -124					; size = 48
_tt$ = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
_v_id$ = 8						; size = 4
_e_id$ = 12						; size = 4
_side$ = 16						; size = 4
_sqcurve_force PROC					; COMDAT

; 184  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 380				; 0000017cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 212  :      }
; 213  :   for ( i = 0 ; i < FACET_EDGES ; i++ )
; 214  :      ec[i] = e_curve + loc_ordinal(e_id[i]);

	mov	eax, DWORD PTR _e_id$[ebp]
	xor	ecx, ecx
	mov	DWORD PTR _fixcount$[ebp], ecx
	mov	DWORD PTR _j$[ebp], ecx
	lea	ecx, DWORD PTR _tt$[ebp]
	push	ebx
	mov	DWORD PTR _e_id$GSCopy$[ebp], eax
	mov	eax, DWORD PTR _side$[ebp]
	mov	edx, ecx
	push	esi

; 246  :       for ( k = 0 ; k < SDIM ; k++ )

	mov	DWORD PTR _side$GSCopy$[ebp], eax
	mov	DWORD PTR tv2838[ebp], ecx
	mov	DWORD PTR tv2840[ebp], edx
	mov	DWORD PTR tv2842[ebp], eax
	push	edi
	npad	3
$LL74@sqcurve_fo@2:

; 195  :      for ( k = 0 ; k <= j ; k++ )

	cmp	DWORD PTR _j$[ebp], 0
	jl	SHORT $LN73@sqcurve_fo@2
	mov	eax, DWORD PTR _j$[ebp]
	mov	edi, DWORD PTR _side$GSCopy$[ebp]
	mov	esi, DWORD PTR tv2840[ebp]
	mov	ebx, DWORD PTR tv2838[ebp]
	inc	eax
	mov	DWORD PTR tv625[ebp], eax
	npad	8
$LL71@sqcurve_fo@2:

; 196  :         tt[j][k] = tt[k][j] = SDIM_dot(side[j],side[k]);

	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR tv2842[ebp]
	push	ecx
	push	edi
	push	edx
	call	_dot
	fst	QWORD PTR [ebx]
	fstp	QWORD PTR [esi]
	add	esp, 12					; 0000000cH
	add	esi, 8
	add	edi, 48					; 00000030H
	add	ebx, 24					; 00000018H
	dec	DWORD PTR tv625[ebp]
	jne	SHORT $LL71@sqcurve_fo@2
$LN73@sqcurve_fo@2:

; 185  :   REAL det;
; 186  :   struct v_curve_t *vc[FACET_VERTS];
; 187  :   int i,j,k;
; 188  :   REAL force[FACET_VERTS][MAXCOORD];
; 189  :   REAL tt[FACET_VERTS][FACET_VERTS]; /* side dot products */
; 190  :   REAL area;
; 191  :   struct e_curve_t *ec[FACET_EDGES];
; 192  :   int fixcount=0;
; 193  : 
; 194  :   for ( j = 0 ; j < FACET_VERTS ; j++ )

	mov	eax, DWORD PTR _j$[ebp]
	add	DWORD PTR tv2842[ebp], 48		; 00000030H
	add	DWORD PTR tv2840[ebp], 24		; 00000018H
	add	DWORD PTR tv2838[ebp], 8
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, 3
	jl	$LL74@sqcurve_fo@2

; 197  : 
; 198  :   det = tt[0][0]*tt[1][1] - tt[0][1]*tt[0][1];

	fld	QWORD PTR _tt$[ebp+32]
	fmul	QWORD PTR _tt$[ebp]
	fld	QWORD PTR _tt$[ebp+8]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)

; 199  : 
; 200  :   area = sqrt(det)/2;

	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000

; 201  :   for ( i = 0 ; i < FACET_VERTS ; i++ )
; 202  :      { vc[i] = v_curve + loc_ordinal(v_id[i]);

	mov	edx, DWORD PTR _v_id$[ebp]
	mov	eax, DWORD PTR [edx]
	fst	QWORD PTR _area$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN77@sqcurve_fo@2
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN78@sqcurve_fo@2
$LN77@sqcurve_fo@2:
	or	eax, -1
$LN78@sqcurve_fo@2:
	imul	eax, 544				; 00000220H
	add	eax, DWORD PTR _v_curve

; 203  :         vc[i]->area += area;

	fld	QWORD PTR [eax]
	mov	DWORD PTR _vc$[ebp], eax
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR [edx+4]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN134@sqcurve_fo@2

; 201  :   for ( i = 0 ; i < FACET_VERTS ; i++ )
; 202  :      { vc[i] = v_curve + loc_ordinal(v_id[i]);

	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN135@sqcurve_fo@2
$LN134@sqcurve_fo@2:
	or	eax, -1
$LN135@sqcurve_fo@2:
	imul	eax, 544				; 00000220H

; 203  :         vc[i]->area += area;

	fld	ST(0)
	add	eax, DWORD PTR _v_curve
	fadd	QWORD PTR [eax]
	mov	DWORD PTR _vc$[ebp+4], eax
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR [edx+8]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN137@sqcurve_fo@2

; 201  :   for ( i = 0 ; i < FACET_VERTS ; i++ )
; 202  :      { vc[i] = v_curve + loc_ordinal(v_id[i]);

	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN138@sqcurve_fo@2
$LN137@sqcurve_fo@2:
	or	eax, -1
$LN138@sqcurve_fo@2:
	imul	eax, 544				; 00000220H
	add	eax, DWORD PTR _v_curve

; 203  :         vc[i]->area += area;

	fld	QWORD PTR [eax]
	mov	DWORD PTR _vc$[ebp+8], eax
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax]

; 204  :      }
; 205  :   if ( boundary_curvature_flag ) /* apportion area differently */

	cmp	DWORD PTR _boundary_curvature_flag, 0
	fld	QWORD PTR __real@4008000000000000
	je	$LN211@sqcurve_fo@2

; 206  :      { fixcount = 0;
; 207  :         for ( i = 0 ; i < FACET_VERTS ; i++ )
; 208  :           if ( get_vattr(v_id[i]) & (BOUNDARY|FIXED) ) fixcount++;

	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	esi, DWORD PTR [eax+8]
	and	esi, 192				; 000000c0H
	xor	ebx, ebx
	xor	eax, eax
	mov	edi, esi
	or	edi, eax
	mov	DWORD PTR _fixcount$[ebp], ebx
	je	SHORT $LN63@sqcurve_fo@2
	mov	ebx, 1
	mov	DWORD PTR _fixcount$[ebp], ebx
$LN63@sqcurve_fo@2:
	mov	eax, DWORD PTR [edx+4]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 192				; 000000c0H
	xor	edi, edi
	or	eax, edi
	je	SHORT $LN143@sqcurve_fo@2
	inc	ebx
	mov	DWORD PTR _fixcount$[ebp], ebx
$LN143@sqcurve_fo@2:
	mov	eax, DWORD PTR [edx+8]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 192				; 000000c0H
	xor	edi, edi
	or	eax, edi
	je	SHORT $LN145@sqcurve_fo@2
	inc	ebx
	mov	DWORD PTR _fixcount$[ebp], ebx
$LN145@sqcurve_fo@2:

; 209  :         for ( i = 0 ; i < FACET_VERTS ; i++ )
; 210  :           if ( !(get_vattr(v_id[i]) & (BOUNDARY|FIXED)) )

	xor	eax, eax
	or	esi, eax
	jne	SHORT $LN59@sqcurve_fo@2

; 211  :              vc[i]->a += 3*area/(3-fixcount);

	mov	ecx, 3
	fld	ST(1)
	sub	ecx, ebx
	fmul	ST(0), ST(1)
	mov	DWORD PTR tv5556[ebp], ecx
	fild	DWORD PTR tv5556[ebp]
	mov	eax, DWORD PTR _vc$[ebp]
	fdivp	ST(1), ST(0)
	fadd	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR _web+12
$LN59@sqcurve_fo@2:

; 209  :         for ( i = 0 ; i < FACET_VERTS ; i++ )
; 210  :           if ( !(get_vattr(v_id[i]) & (BOUNDARY|FIXED)) )

	mov	eax, DWORD PTR [edx+4]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 192				; 000000c0H
	xor	esi, esi
	or	eax, esi
	jne	SHORT $LN178@sqcurve_fo@2

; 211  :              vc[i]->a += 3*area/(3-fixcount);

	mov	ecx, 3
	fld	ST(1)
	sub	ecx, ebx
	fmul	ST(0), ST(1)
	mov	DWORD PTR tv5543[ebp], ecx
	fild	DWORD PTR tv5543[ebp]
	mov	eax, DWORD PTR _vc$[ebp+4]
	fdivp	ST(1), ST(0)
	fadd	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR _web+12
$LN178@sqcurve_fo@2:

; 209  :         for ( i = 0 ; i < FACET_VERTS ; i++ )
; 210  :           if ( !(get_vattr(v_id[i]) & (BOUNDARY|FIXED)) )

	mov	edx, DWORD PTR [edx+8]
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 192				; 000000c0H
	xor	ecx, ecx
	or	eax, ecx
	jne	SHORT $LN211@sqcurve_fo@2

; 211  :              vc[i]->a += 3*area/(3-fixcount);

	mov	eax, 3
	fmulp	ST(1), ST(0)
	sub	eax, ebx
	mov	DWORD PTR tv5530[ebp], eax
	fild	DWORD PTR tv5530[ebp]
	mov	eax, DWORD PTR _vc$[ebp+8]
	fdivp	ST(1), ST(0)
	fadd	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]
	jmp	SHORT $LN176@sqcurve_fo@2
$LN211@sqcurve_fo@2:

; 209  :         for ( i = 0 ; i < FACET_VERTS ; i++ )
; 210  :           if ( !(get_vattr(v_id[i]) & (BOUNDARY|FIXED)) )

	fstp	ST(1)
	fstp	ST(0)
$LN176@sqcurve_fo@2:

; 212  :      }
; 213  :   for ( i = 0 ; i < FACET_EDGES ; i++ )
; 214  :      ec[i] = e_curve + loc_ordinal(e_id[i]);

	mov	edx, DWORD PTR _e_id$GSCopy$[ebp]
	mov	eax, DWORD PTR [edx]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN79@sqcurve_fo@2
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN80@sqcurve_fo@2
$LN79@sqcurve_fo@2:
	or	eax, -1
$LN80@sqcurve_fo@2:
	mov	ecx, DWORD PTR _e_curve
	lea	eax, DWORD PTR [eax+eax*8]
	shl	eax, 6
	add	eax, ecx
	mov	DWORD PTR _ec$[ebp], eax
	mov	eax, DWORD PTR [edx+4]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN158@sqcurve_fo@2
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN159@sqcurve_fo@2
$LN158@sqcurve_fo@2:
	or	eax, -1
$LN159@sqcurve_fo@2:
	lea	eax, DWORD PTR [eax+eax*8]
	shl	eax, 6
	add	eax, ecx
	mov	DWORD PTR _ec$[ebp+4], eax
	mov	eax, DWORD PTR [edx+8]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN161@sqcurve_fo@2
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN162@sqcurve_fo@2
$LN161@sqcurve_fo@2:
	or	eax, -1
$LN162@sqcurve_fo@2:
	lea	edx, DWORD PTR [eax+eax*8]

; 215  : 
; 216  :   memset((char*)force,0,sizeof(force));

	push	144					; 00000090H
	shl	edx, 6
	lea	eax, DWORD PTR _force$[ebp]
	add	edx, ecx
	push	0
	push	eax
	mov	DWORD PTR _ec$[ebp+8], edx
	call	_memset
	fld	QWORD PTR __real@3fd0000000000000
	fld	QWORD PTR _area$[ebp]
	lea	ecx, DWORD PTR _force$[ebp+8]
	mov	DWORD PTR tv3487[ebp], ecx
	mov	ecx, DWORD PTR _web+616
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv3461[ebp], 0
	mov	DWORD PTR tv3465[ebp], 2
	mov	DWORD PTR tv3523[ebp], 3
$LN53@sqcurve_fo@2:

; 218  :   { int i1 = (j+1)%FACET_VERTS;

	mov	esi, DWORD PTR tv3465[ebp]
	lea	eax, DWORD PTR [esi-1]
	cdq
	mov	edi, 3
	idiv	edi

; 219  :     int i2 = (j+2)%FACET_VERTS;

	mov	eax, esi
	mov	esi, 3
	mov	edi, edx
	cdq
	idiv	esi
	mov	eax, edx

; 220  :     for ( i = 0 ; i < SDIM ; i++ )

	xor	edx, edx
	mov	DWORD PTR _i2$89183[ebp], eax
	cmp	ecx, 4
	jl	$LN173@sqcurve_fo@2
	mov	ebx, DWORD PTR _side$GSCopy$[ebp]
	mov	edx, edi
	shl	edx, 5
	lea	edx, DWORD PTR _tt$[ebp+edx]
	mov	DWORD PTR tv1990[ebp], edx
	lea	edx, DWORD PTR [eax+edi*2]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	esi, DWORD PTR [edi+edi*2]
	shl	esi, 4
	add	esi, ebx
	shl	eax, 4
	add	eax, ebx
	lea	ebx, DWORD PTR [ecx-4]
	shr	ebx, 2
	inc	ebx
	add	edx, edi
	mov	DWORD PTR tv1199[ebp], ebx
	lea	edx, DWORD PTR _tt$[ebp+edx*8]
	add	ebx, ebx
	add	ebx, ebx
	mov	DWORD PTR tv2003[ebp], edx
	mov	edx, DWORD PTR tv3487[ebp]
	mov	DWORD PTR _i$[ebp], ebx
$LN165@sqcurve_fo@2:

; 221  :       force[j][i] = (tt[i1][i1]*side[i2][i] - tt[i1][i2]*side[i1][i])/4/area;

	fld	QWORD PTR [eax]
	mov	ebx, DWORD PTR tv1990[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv2003[ebp]
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv1990[ebp]
	fmul	QWORD PTR [esi]
	add	eax, 32					; 00000020H
	add	esi, 32					; 00000020H
	add	edx, 32					; 00000020H
	dec	DWORD PTR tv1199[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [edx-40]
	fld	QWORD PTR [eax-24]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [esi-24]
	mov	ebx, DWORD PTR tv2003[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv1990[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [edx-32]
	fld	QWORD PTR [eax-16]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [esi-16]
	mov	ebx, DWORD PTR tv2003[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv1990[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [edx-24]
	fld	QWORD PTR [eax-8]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [esi-8]
	mov	ebx, DWORD PTR tv2003[ebp]
	fmul	QWORD PTR [ebx]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [edx-16]
	jne	$LN165@sqcurve_fo@2

; 218  :   { int i1 = (j+1)%FACET_VERTS;

	mov	eax, DWORD PTR _i2$89183[ebp]
	mov	edx, DWORD PTR _i$[ebp]
$LN173@sqcurve_fo@2:

; 220  :     for ( i = 0 ; i < SDIM ; i++ )

	cmp	edx, ecx
	jge	SHORT $LN52@sqcurve_fo@2
	mov	ebx, DWORD PTR tv3461[ebp]
	mov	esi, edi
	shl	esi, 5
	lea	esi, DWORD PTR _tt$[ebp+esi]

; 221  :       force[j][i] = (tt[i1][i1]*side[i2][i] - tt[i1][i2]*side[i1][i])/4/area;

	mov	DWORD PTR tv1990[ebp], esi
	lea	esi, DWORD PTR [eax+edi*2]
	add	esi, edi
	lea	esi, DWORD PTR _tt$[ebp+esi*8]
	mov	DWORD PTR tv2003[ebp], esi
	lea	esi, DWORD PTR [edi+edi*2]
	lea	edi, DWORD PTR [edx+esi*2]
	mov	esi, DWORD PTR _side$GSCopy$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [edx+eax*2]
	lea	edi, DWORD PTR [esi+edi*8]
	lea	esi, DWORD PTR [esi+eax*8]
	add	ebx, edx
	mov	eax, ecx
	lea	ebx, DWORD PTR _force$[ebp+ebx*8]
	sub	eax, edx
$LC50@sqcurve_fo@2:
	mov	edx, DWORD PTR tv1990[ebp]
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR tv2003[ebp]
	fmul	QWORD PTR [esi]
	add	esi, 8
	fld	QWORD PTR [edi]
	add	edi, 8
	fmul	QWORD PTR [edx]
	add	ebx, 8
	dec	eax
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ebx-8]
	jne	SHORT $LC50@sqcurve_fo@2
$LN52@sqcurve_fo@2:

; 217  :   for ( j = 0 ; j < FACET_VERTS ; j++ )

	add	DWORD PTR tv3487[ebp], 48		; 00000030H
	add	DWORD PTR tv3461[ebp], 6
	mov	eax, 1
	add	DWORD PTR tv3465[ebp], eax
	sub	DWORD PTR tv3523[ebp], eax
	jne	$LN53@sqcurve_fo@2

; 222  :    }
; 223  : 
; 224  :   /* first and second derivatives at vertices */
; 225  :   for ( i = 0 ; i < FACET_VERTS ; i++ )

	fld	QWORD PTR __real@4008000000000000
	xor	edi, edi
	lea	eax, DWORD PTR _force$[ebp]
	mov	DWORD PTR tv4084[ebp], edi
	mov	DWORD PTR tv4157[ebp], eax
$LN47@sqcurve_fo@2:

; 226  :      { int ii = (i+1)%FACET_VERTS; /* opposite side from vertex i */

	lea	eax, DWORD PTR [edi+1]
	mov	DWORD PTR tv2085[ebp], eax
	cdq
	mov	esi, 3
	idiv	esi

; 227  :         for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	mov	DWORD PTR _ii$89190[ebp], edx
	test	ecx, ecx
	jle	SHORT $LN168@sqcurve_fo@2

; 226  :      { int ii = (i+1)%FACET_VERTS; /* opposite side from vertex i */

	mov	eax, DWORD PTR _vc$[ebp+edi*4]
	mov	edx, DWORD PTR tv4157[ebp]
	add	eax, 16					; 00000010H
$LN44@sqcurve_fo@2:

; 228  :           vc[i]->force[j] += force[i][j];

	fld	QWORD PTR [eax]
	inc	esi
	fadd	QWORD PTR [edx]
	add	edx, 8
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	mov	ecx, DWORD PTR _web+616
	cmp	esi, ecx
	jl	SHORT $LN44@sqcurve_fo@2
$LN168@sqcurve_fo@2:

; 229  :         if ( boundary_curvature_flag && (fixcount != 3) )

	cmp	DWORD PTR _boundary_curvature_flag, 0
	je	SHORT $LN38@sqcurve_fo@2
	mov	eax, DWORD PTR _fixcount$[ebp]
	cmp	eax, 3
	je	SHORT $LN38@sqcurve_fo@2

; 230  :          for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	test	ecx, ecx
	jle	SHORT $LN38@sqcurve_fo@2
	mov	edx, DWORD PTR tv4157[ebp]
	mov	ecx, 3
	sub	ecx, eax
	mov	eax, DWORD PTR _vc$[ebp+edi*4]
	mov	DWORD PTR tv5495[ebp], ecx
	fild	DWORD PTR tv5495[ebp]
	add	eax, 80					; 00000050H
$LN40@sqcurve_fo@2:

; 231  :           vc[i]->star_force[j] += 3*force[i][j]/(3-fixcount);

	fld	QWORD PTR [edx]
	inc	esi
	fmul	ST(0), ST(2)
	add	edx, 8
	add	eax, 8
	fdiv	ST(0), ST(1)
	fadd	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	mov	ecx, DWORD PTR _web+616
	cmp	esi, ecx
	jl	SHORT $LN40@sqcurve_fo@2

; 230  :          for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(0)
$LN38@sqcurve_fo@2:

; 232  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	DWORD PTR _j$[ebp], 0
	test	ecx, ecx
	jle	$LN46@sqcurve_fo@2
	mov	edx, DWORD PTR _ii$89190[ebp]
	mov	eax, DWORD PTR _vc$[ebp+edi*4]
	shl	edx, 5
	fld	QWORD PTR _tt$[ebp+edx]
	sub	eax, -128				; ffffff80H
	fmul	ST(0), ST(3)
	mov	DWORD PTR tv4062[ebp], eax
	mov	DWORD PTR tv4064[ebp], eax
	fdiv	ST(0), ST(2)
$LN37@sqcurve_fo@2:

; 233  :           { vc[i]->deriv2[j][j] +=  tt[ii][ii]/4/area;

	mov	eax, DWORD PTR tv4064[ebp]
	fld	ST(0)
	fadd	QWORD PTR [eax]

; 234  :              for ( k = 0 ; k < SDIM ; k++ )

	xor	edx, edx
	fstp	QWORD PTR [eax]
	mov	ecx, DWORD PTR _web+616
	test	ecx, ecx
	jle	SHORT $LN36@sqcurve_fo@2
	mov	eax, DWORD PTR _ii$89190[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	lea	esi, DWORD PTR [eax+eax*2]
	lea	edi, DWORD PTR [ecx+esi*2]
	mov	esi, DWORD PTR _side$GSCopy$[ebp]
	lea	ebx, DWORD PTR [esi+edi*8]
	mov	edi, DWORD PTR tv4084[ebp]
	add	edi, ecx
	lea	eax, DWORD PTR [eax+eax*2]
	lea	ecx, DWORD PTR _force$[ebp+edi*8]
	mov	edi, DWORD PTR tv4157[ebp]
	shl	eax, 4
	add	eax, esi
	mov	esi, DWORD PTR tv4062[ebp]
	mov	DWORD PTR tv4153[ebp], ecx
$LN34@sqcurve_fo@2:

; 235  :                 vc[i]->deriv2[j][k] -= (force[i][j]*force[i][k]+0.25*side[ii][j]
; 236  :                                                 *side[ii][k])/area;

	fld	QWORD PTR [ebx]
	mov	ecx, DWORD PTR tv4153[ebp]
	fmul	ST(0), ST(4)
	inc	edx
	add	eax, 8
	add	edi, 8
	fmul	QWORD PTR [eax-8]
	add	esi, 8
	fld	QWORD PTR [edi-8]
	fmul	QWORD PTR [ecx]
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(3)
	fsubr	QWORD PTR [esi-8]
	fstp	QWORD PTR [esi-8]
	mov	ecx, DWORD PTR _web+616
	cmp	edx, ecx
	jl	SHORT $LN34@sqcurve_fo@2
$LN36@sqcurve_fo@2:

; 232  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR _j$[ebp]
	add	DWORD PTR tv4064[ebp], 56		; 00000038H
	add	DWORD PTR tv4062[ebp], 48		; 00000030H
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, ecx
	jl	$LN37@sqcurve_fo@2

; 234  :              for ( k = 0 ; k < SDIM ; k++ )

	fstp	ST(0)
$LN46@sqcurve_fo@2:

; 222  :    }
; 223  : 
; 224  :   /* first and second derivatives at vertices */
; 225  :   for ( i = 0 ; i < FACET_VERTS ; i++ )

	mov	eax, DWORD PTR tv4084[ebp]
	add	DWORD PTR tv4157[ebp], 48		; 00000030H
	mov	edi, DWORD PTR tv2085[ebp]
	add	eax, 6
	mov	DWORD PTR tv4084[ebp], eax
	cmp	eax, 18					; 00000012H
	jl	$LN47@sqcurve_fo@2

; 237  :           }
; 238  :      }
; 239  : 
; 240  :   /* now first and second derivatives on edges */
; 241  :   for ( i = 0 ; i < FACET_EDGES ; i++ )

	mov	eax, DWORD PTR _e_id$GSCopy$[ebp]
	fstp	ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	lea	edx, DWORD PTR _ec$[ebp]
	mov	esi, 2
	lea	ebx, DWORD PTR _force$[ebp]
	sub	edx, eax
	mov	DWORD PTR tv5566[ebp], esi
	mov	DWORD PTR tv5602[ebp], eax
	mov	DWORD PTR tv5604[ebp], ebx
	mov	DWORD PTR tv5628[ebp], edx
	mov	DWORD PTR tv5636[ebp], 3
$LN177@sqcurve_fo@2:

; 242  :   { int i1 =  (i+1)%FACET_EDGES;

	lea	eax, DWORD PTR [esi-1]
	cdq
	mov	edi, 3
	idiv	edi

; 243  :     int i2 =  (i+2)%FACET_EDGES;

	mov	eax, esi
	mov	esi, 3

; 244  :     for ( j = 0 ; j < SDIM ; j++ )

	mov	DWORD PTR _j$[ebp], 0
	mov	edi, edx
	cdq
	idiv	esi
	mov	DWORD PTR _i1$89207[ebp], edi
	mov	esi, edx
	mov	DWORD PTR _i2$89208[ebp], esi
	test	ecx, ecx
	jle	$LN26@sqcurve_fo@2
	mov	eax, DWORD PTR tv5628[ebp]
	mov	ecx, DWORD PTR tv5602[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	lea	edx, DWORD PTR [esi+edi*2]
	add	edx, edi
	fld	QWORD PTR _tt$[ebp+edx*8]
	lea	eax, DWORD PTR [edi+edi*2]
	shl	eax, 4
	fmul	ST(0), ST(3)
	mov	DWORD PTR tv5631[ebp], ecx
	mov	DWORD PTR tv4580[ebp], eax
	lea	edx, DWORD PTR _force$[ebp+eax]
	fdiv	ST(0), ST(2)
	lea	eax, DWORD PTR [ecx+96]
	add	ecx, 192				; 000000c0H
	mov	DWORD PTR tv5001[ebp], ecx
	mov	ecx, DWORD PTR _side$GSCopy$[ebp]
	lea	edi, DWORD PTR _force$[ebp]
	sub	ecx, edi
	mov	DWORD PTR tv4791[ebp], 24		; 00000018H
	mov	DWORD PTR tv4991[ebp], ebx
	mov	DWORD PTR tv4995[ebp], eax
	mov	DWORD PTR tv5096[ebp], ecx
$LN28@sqcurve_fo@2:

; 245  :     { ec[i]->deriv2[j][j] += tt[i1][i2]/4/area;

	mov	ecx, DWORD PTR tv5001[ebp]
	fld	QWORD PTR [ecx]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [ecx]

; 246  :       for ( k = 0 ; k < SDIM ; k++ )

	xor	ecx, ecx
	mov	DWORD PTR _k$[ebp], ecx
	cmp	DWORD PTR _web+616, ecx
	jle	$LN171@sqcurve_fo@2
	mov	edi, DWORD PTR _j$[ebp]
	mov	ebx, DWORD PTR _side$GSCopy$[ebp]
	lea	eax, DWORD PTR [esi+esi*2]
	lea	eax, DWORD PTR [edi+eax*2]
	mov	edi, DWORD PTR tv5604[ebp]
	lea	eax, DWORD PTR [ebx+eax*8]
	mov	DWORD PTR tv2188[ebp], eax
	lea	eax, DWORD PTR [esi+esi*2]
	mov	esi, DWORD PTR tv4580[ebp]
	shl	eax, 4
	add	eax, ebx
	add	esi, ebx
	mov	ebx, DWORD PTR tv4995[ebp]
	add	ebx, 96					; 00000060H
	mov	DWORD PTR tv4502[ebp], ebx
$LN25@sqcurve_fo@2:

; 247  :         if ( inverted(e_id[i]) )

	mov	ebx, DWORD PTR tv5602[ebp]

; 248  :            ec[i]->deriv2[k][j] += (-side[i1][j]*side[i2][k]/2
; 249  :                                    + side[i2][j]*side[i1][k]/4
; 250  :                                    -force[i1][j]*force[i][k])/area;

	fld	QWORD PTR [esi]
	test	DWORD PTR [ebx], 134217728		; 08000000H
	je	SHORT $LN22@sqcurve_fo@2
	mov	ebx, DWORD PTR tv2188[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv5096[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR [eax]
	fmul	QWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR tv4502[ebp]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx]
	fmul	QWORD PTR [edi]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(3)
	fadd	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]

; 251  :          else

	jmp	SHORT $LN24@sqcurve_fo@2
$LN22@sqcurve_fo@2:

; 252  :            ec[i]->deriv2[j][k] += (-side[i1][j]*side[i2][k]/2
; 253  :                                    + side[i2][j]*side[i1][k]/4
; 254  :                                    -force[i1][j]*force[i][k])/area;

	mov	ebx, DWORD PTR tv4791[ebp]
	add	ebx, ecx
	mov	ecx, DWORD PTR tv5631[ebp]
	lea	ecx, DWORD PTR [ecx+ebx*8]
	mov	ebx, DWORD PTR tv2188[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv5096[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR [eax]
	fmul	QWORD PTR [ebx+edx]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx]
	fmul	QWORD PTR [edi]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(3)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _k$[ebp]
$LN24@sqcurve_fo@2:

; 246  :       for ( k = 0 ; k < SDIM ; k++ )

	add	DWORD PTR tv4502[ebp], 48		; 00000030H
	inc	ecx
	add	esi, 8
	add	eax, 8
	add	edi, 8
	mov	DWORD PTR _k$[ebp], ecx
	cmp	ecx, DWORD PTR _web+616
	jl	$LN25@sqcurve_fo@2
	mov	ebx, DWORD PTR tv4991[ebp]
	mov	eax, DWORD PTR tv4995[ebp]
	mov	esi, DWORD PTR _i2$89208[ebp]
$LN171@sqcurve_fo@2:

; 255  :       if ( boundary_curvature_flag 
; 256  :                      && (get_vattr(v_id[i2]) & (FIXED|BOUNDARY)) )

	cmp	DWORD PTR _boundary_curvature_flag, 0
	je	SHORT $LN172@sqcurve_fo@2
	mov	ecx, DWORD PTR _v_id$[ebp]
	mov	ecx, DWORD PTR [ecx+esi*4]
	mov	edi, DWORD PTR _web+12
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	ecx, DWORD PTR [ecx+8]
	and	ecx, 192				; 000000c0H
	xor	edi, edi
	or	ecx, edi
	je	SHORT $LN172@sqcurve_fo@2

; 257  :       { if ( inverted(e_id[i]) )

	mov	ecx, DWORD PTR tv5602[ebp]
	test	DWORD PTR [ecx], 134217728		; 08000000H
	je	SHORT $LN19@sqcurve_fo@2

; 258  :         { ec[i]->aderiv[0][j] += 0.5*force[i1][j];

	fld	QWORD PTR [edx]
	fmul	ST(0), ST(2)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]

; 259  :           ec[i]->aderiv[1][j] += 0.5*force[i][j];

	fld	QWORD PTR [ebx]

; 260  :         }
; 261  :         else

	jmp	SHORT $LN287@sqcurve_fo@2
$LN19@sqcurve_fo@2:

; 262  :         { ec[i]->aderiv[0][j] += 0.5*force[i][j];

	fld	QWORD PTR [ebx]
	fmul	ST(0), ST(2)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]

; 263  :           ec[i]->aderiv[1][j] += 0.5*force[i1][j];

	fld	QWORD PTR [edx]
$LN287@sqcurve_fo@2:
	fmul	ST(0), ST(2)
	fadd	QWORD PTR [eax+48]
	fstp	QWORD PTR [eax+48]
$LN172@sqcurve_fo@2:

; 264  :         }
; 265  :       }
; 266  : 
; 267  :       if ( inverted(e_id[i]) )

	mov	ecx, DWORD PTR tv5602[ebp]

; 268  :       { ec[i]->deriv[0][j] += force[i1][j];

	fld	QWORD PTR [eax-96]
	test	DWORD PTR [ecx], 134217728		; 08000000H
	je	SHORT $LN17@sqcurve_fo@2
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [eax-96]

; 269  :         ec[i]->deriv[1][j] += force[i][j];

	fld	QWORD PTR [ebx]
	fadd	QWORD PTR [eax-48]

; 270  :       }
; 271  :       else

	jmp	SHORT $LN288@sqcurve_fo@2
$LN17@sqcurve_fo@2:

; 272  :       { ec[i]->deriv[0][j] += force[i][j];

	fadd	QWORD PTR [ebx]
	fstp	QWORD PTR [eax-96]

; 273  :         ec[i]->deriv[1][j] += force[i1][j];

	fld	QWORD PTR [eax-48]
	fadd	QWORD PTR [edx]
$LN288@sqcurve_fo@2:
	mov	edi, DWORD PTR _j$[ebp]
	fstp	QWORD PTR [eax-48]
	mov	ecx, DWORD PTR _web+616
	add	DWORD PTR tv5001[ebp], 56		; 00000038H
	add	DWORD PTR tv4791[ebp], 6
	inc	edi
	add	eax, 8
	add	ebx, 8
	add	edx, 8
	mov	DWORD PTR _j$[ebp], edi
	mov	DWORD PTR tv4995[ebp], eax
	mov	DWORD PTR tv4991[ebp], ebx
	cmp	edi, ecx
	jl	$LN28@sqcurve_fo@2

; 244  :     for ( j = 0 ; j < SDIM ; j++ )

	mov	edi, DWORD PTR _i1$89207[ebp]
	fstp	ST(0)
$LN26@sqcurve_fo@2:

; 274  :       }
; 275  :     }
; 276  :     if ( self_similar_flag )

	cmp	DWORD PTR _self_similar_flag, 0
	je	$LN30@sqcurve_fo@2

; 277  :     { REAL cp[MAXCOORD];
; 278  :       int ii;
; 279  :       cross_prod(get_coord(get_edge_tailv(e_id[i])),
; 280  :                             get_coord(get_edge_headv(e_id[i])), cp);

	mov	edx, DWORD PTR tv5602[ebp]
	fstp	ST(2)
	mov	eax, DWORD PTR [edx]
	fstp	ST(0)
	mov	ebx, DWORD PTR _web+124
	fstp	ST(0)
	test	eax, 134217728				; 08000000H
	je	SHORT $LN82@sqcurve_fo@2
	mov	ecx, DWORD PTR _web+216
	mov	edx, DWORD PTR _dymem
	mov	edx, DWORD PTR [ecx+edx+304]
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	mov	ecx, DWORD PTR [edx+ecx]
	jmp	SHORT $LN81@sqcurve_fo@2
$LN82@sqcurve_fo@2:
	mov	ecx, DWORD PTR _dymem
	mov	edx, DWORD PTR _web+216
	mov	edx, DWORD PTR [edx+ecx+304]
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	mov	ebx, DWORD PTR _web+636
	lea	ecx, DWORD PTR [ecx+ebx*4]
	mov	ecx, DWORD PTR [ecx+edx]
	mov	ebx, DWORD PTR _web+124
$LN81@sqcurve_fo@2:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN86@sqcurve_fo@2
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	ebx, DWORD PTR _web+636
	lea	eax, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR [eax+edx]
	jmp	SHORT $LN85@sqcurve_fo@2
$LN86@sqcurve_fo@2:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	eax, DWORD PTR [edx+eax]
$LN85@sqcurve_fo@2:
	mov	ebx, DWORD PTR _dymem
	mov	edx, DWORD PTR _web+104
	mov	edx, DWORD PTR [edx+ebx+64]
	lea	ebx, DWORD PTR _cp$89229[ebp]
	push	ebx
	mov	ebx, DWORD PTR _web+12
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	add	ecx, edx
	push	ecx
	add	eax, edx
	push	eax
	call	_cross_prod

; 281  :       ii =  inverted(e_id[i1]) ? 0 : 1;

	mov	ebx, DWORD PTR _e_id$GSCopy$[ebp]
	mov	eax, DWORD PTR [ebx+edi*4]

; 282  :       for ( j = 0 ; j < SDIM ; j++ ) ec[i1]->volderiv[ii][j] += cp[j];

	mov	ecx, DWORD PTR _web+616
	shr	eax, 27					; 0000001bH
	not	eax
	add	esp, 12					; 0000000cH
	and	eax, 1
	xor	edx, edx
	test	ecx, ecx
	jle	SHORT $LN169@sqcurve_fo@2

; 277  :     { REAL cp[MAXCOORD];
; 278  :       int ii;
; 279  :       cross_prod(get_coord(get_edge_tailv(e_id[i])),
; 280  :                             get_coord(get_edge_headv(e_id[i])), cp);

	lea	eax, DWORD PTR [eax+eax*2+30]
	shl	eax, 4
	add	eax, DWORD PTR _ec$[ebp+edi*4]
$LL14@sqcurve_fo@2:

; 282  :       for ( j = 0 ; j < SDIM ; j++ ) ec[i1]->volderiv[ii][j] += cp[j];

	fld	QWORD PTR _cp$89229[ebp+edx*8]
	inc	edx
	fadd	QWORD PTR [eax]
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	mov	ecx, DWORD PTR _web+616
	cmp	edx, ecx
	jl	SHORT $LL14@sqcurve_fo@2
$LN169@sqcurve_fo@2:

; 283  :       ii =  inverted(e_id[i2]) ? 1 : 0;

	mov	eax, DWORD PTR [ebx+esi*4]
	shr	eax, 27					; 0000001bH
	and	eax, 1

; 284  :       for ( j = 0 ; j < SDIM ; j++ ) ec[i2]->volderiv[ii][j] += cp[j];

	xor	edx, edx
	test	ecx, ecx
	jle	SHORT $LN166@sqcurve_fo@2

; 283  :       ii =  inverted(e_id[i2]) ? 1 : 0;

	lea	eax, DWORD PTR [eax+eax*2+30]
	shl	eax, 4
	add	eax, DWORD PTR _ec$[ebp+esi*4]
$LL11@sqcurve_fo@2:

; 284  :       for ( j = 0 ; j < SDIM ; j++ ) ec[i2]->volderiv[ii][j] += cp[j];

	fld	QWORD PTR _cp$89229[ebp+edx*8]
	inc	edx
	fadd	QWORD PTR [eax]
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	mov	ecx, DWORD PTR _web+616
	cmp	edx, ecx
	jl	SHORT $LL11@sqcurve_fo@2
$LN166@sqcurve_fo@2:
	fld	QWORD PTR __real@3fd0000000000000
	fld	QWORD PTR __real@3fe0000000000000
	fld	QWORD PTR _area$[ebp]
	fxch	ST(1)
$LN30@sqcurve_fo@2:

; 237  :           }
; 238  :      }
; 239  : 
; 240  :   /* now first and second derivatives on edges */
; 241  :   for ( i = 0 ; i < FACET_EDGES ; i++ )

	mov	esi, DWORD PTR tv5566[ebp]
	mov	ebx, DWORD PTR tv5604[ebp]
	add	DWORD PTR tv5602[ebp], 4
	inc	esi
	add	ebx, 48					; 00000030H
	dec	DWORD PTR tv5636[ebp]
	mov	DWORD PTR tv5566[ebp], esi
	mov	DWORD PTR tv5604[ebp], ebx
	jne	$LN177@sqcurve_fo@2

; 285  :     }
; 286  :   } 
; 287  :   
; 288  :   if ( effective_area_flag || normal_curvature_flag || div_normal_curvature_flag
; 289  :             || self_similar_flag || h0_flag ) 

	cmp	DWORD PTR _effective_area_flag, 0
	fstp	ST(2)
	fstp	ST(0)
	fstp	ST(0)
	jne	SHORT $LN7@sqcurve_fo@2
	cmp	DWORD PTR _normal_curvature_flag, 0
	jne	SHORT $LN7@sqcurve_fo@2
	cmp	DWORD PTR _div_normal_curvature_flag, 0
	jne	SHORT $LN7@sqcurve_fo@2
	cmp	DWORD PTR _self_similar_flag, 0
	jne	SHORT $LN7@sqcurve_fo@2
	cmp	DWORD PTR _h0_flag, 0
	je	SHORT $LN4@sqcurve_fo@2
$LN7@sqcurve_fo@2:

; 290  :   /* accumulate normal vector at each vertex */
; 291  :     { REAL normal[MAXCOORD];
; 292  :       cross_prod(side[0],side[1],normal);

	mov	eax, DWORD PTR _side$GSCopy$[ebp]
	lea	ecx, DWORD PTR _normal$89249[ebp]
	push	ecx
	lea	edx, DWORD PTR [eax+48]
	push	edx
	push	eax
	call	_cross_prod

; 293  :       for ( i = 0 ; i < 3 ; i ++ )

	mov	edx, DWORD PTR _web+616
	add	esp, 12					; 0000000cH
	xor	esi, esi
$LL6@sqcurve_fo@2:

; 294  :          for ( j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN5@sqcurve_fo@2
	mov	eax, DWORD PTR _vc$[ebp+esi*4]
	add	eax, 416				; 000001a0H
$LL3@sqcurve_fo@2:

; 295  :             vc[i]->normal[j] += normal[j];

	fld	QWORD PTR _normal$89249[ebp+ecx*8]
	inc	ecx
	fadd	QWORD PTR [eax]
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	mov	edx, DWORD PTR _web+616
	cmp	ecx, edx
	jl	SHORT $LL3@sqcurve_fo@2
$LN5@sqcurve_fo@2:

; 293  :       for ( i = 0 ; i < 3 ; i ++ )

	inc	esi
	cmp	esi, 3
	jl	SHORT $LL6@sqcurve_fo@2
$LN4@sqcurve_fo@2:

; 296  :     }
; 297  :  } // end sqcurve_force()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_sqcurve_force ENDP
_TEXT	ENDS
PUBLIC	__real@4022000000000000
PUBLIC	_v_id$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_vertex_sq_mean_curvature
EXTRN	_mean_curv_int_flag:DWORD
EXTRN	_constr_proj:PROC
EXTRN	_nullcon:QWORD
EXTRN	_sqcurve_method_init:PROC
;	COMDAT __real@4022000000000000
CONST	SEGMENT
__real@4022000000000000 DQ 04022000000000000r	; 9
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _vertex_sq_mean_curvature
_TEXT	SEGMENT
_con$89348 = -108					; size = 28
_h0_val$ = -80						; size = 8
_f$ = -72						; size = 8
_v_id$GSCopy$ = -68					; size = 4
tv619 = -64						; size = 8
_term$89385 = -64					; size = 8
_area$ = -64						; size = 8
_attr$ = -64						; size = 8
tv384 = -56						; size = 4
_perp$89349 = -52					; size = 48
__$ArrayPad$ = -4					; size = 4
_v_id$ = 8						; size = 4
_vertex_sq_mean_curvature PROC				; COMDAT

; 371  : { REAL h,venergy;

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _v_id$[ebp]

; 372  :   ATTR attr = get_vattr(v_id);

	mov	ecx, DWORD PTR _web+12
	push	ebx
	mov	ebx, eax
	and	ebx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+ebx*4]
	mov	edx, DWORD PTR [ecx+12]
	push	esi
	mov	esi, DWORD PTR [ecx+8]
	push	edi
	mov	DWORD PTR _v_id$GSCopy$[ebp], eax
	mov	DWORD PTR tv384[ebp], ebx
	mov	DWORD PTR _attr$[ebp+4], edx

; 373  :   int ordv = loc_ordinal(v_id);

	test	eax, 268435456				; 10000000H
	je	SHORT $LN41@vertex_sq_
	mov	edi, ebx
	jmp	SHORT $LN42@vertex_sq_
$LN41@vertex_sq_:
	or	edi, -1
$LN42@vertex_sq_:

; 374  :   struct v_curve_t *vc;
; 375  :   REAL denom,f;
; 376  :   REAL area; /* curvature normalization area */
; 377  :   REAL h0_val=0.0;
; 378  : 
; 379  :   if ( !v_curve ) 

	cmp	DWORD PTR _v_curve, 0
	fldz
	fst	QWORD PTR _h0_val$[ebp]
	jne	SHORT $LN38@vertex_sq_

; 380  :      sqcurve_method_init(METHOD_VALUE,NULL);

	push	0
	fstp	ST(0)
	push	1767					; 000006e7H
	call	_sqcurve_method_init
	fldz
	add	esp, 8
$LN38@vertex_sq_:

; 381  :      
; 382  :   vc = v_curve + ordv;

	imul	edi, 544				; 00000220H
	add	edi, DWORD PTR _v_curve

; 383  :   if ( (attr & (FIXED|BOUNDARY)) ) return 0.0;

	mov	eax, esi
	and	eax, 192				; 000000c0H
	xor	ecx, ecx
	or	eax, ecx
	jne	$LN39@vertex_sq_

; 384  :   if ( vc->area == 0.0 ) return 0.0;

	fld	QWORD PTR [edi]
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN39@vertex_sq_

; 385  : 
; 386  :   switch ( h0_flag )

	mov	eax, DWORD PTR _h0_flag
	fstp	ST(0)
	dec	eax
	je	SHORT $LN33@vertex_sq_
	dec	eax
	jne	SHORT $LN34@vertex_sq_

; 388  :     case H0_IN_ATTR:   h0_val = *VREAL(v_id,h0_attr); break;

	mov	eax, DWORD PTR _h0_attr
	mov	ecx, DWORD PTR _dymem
	imul	eax, 240				; 000000f0H
	add	eax, DWORD PTR _web+104
	mov	edx, DWORD PTR [eax+ecx+64]
	mov	eax, DWORD PTR _web+12
	mov	ecx, DWORD PTR [eax+ebx*4]
	fld	QWORD PTR [edx+ecx]
	jmp	SHORT $LN82@vertex_sq_
$LN33@vertex_sq_:

; 387  :   { case H0_IN_GLOBAL: h0_val = h0_value; break;

	fld	QWORD PTR _h0_value
$LN82@vertex_sq_:
	fstp	QWORD PTR _h0_val$[ebp]
$LN34@vertex_sq_:

; 389  :   }
; 390  :   if ( !boundary_curvature_flag )

	cmp	DWORD PTR _boundary_curvature_flag, 0

; 391  :      { vc->a = vc->area; area = vc->area/3; } 

	fld	QWORD PTR [edi]
	jne	SHORT $LN31@vertex_sq_
	fstp	QWORD PTR [edi+8]
	fld	QWORD PTR [edi]
$LN31@vertex_sq_:

; 392  :   else { area = vc->area/3; }

	fdiv	QWORD PTR __real@4008000000000000

; 393  :   if ( attr & CONSTRAINT )

	and	esi, 1024				; 00000400H
	mov	eax, esi
	xor	ecx, ecx
	or	eax, ecx
	fstp	QWORD PTR _area$[ebp]
	je	$LN52@vertex_sq_

; 394  :   {
; 395  :     conmap_t* conmap = get_v_constraint_map(v_id);

	mov	eax, DWORD PTR _web+104
	mov	edx, DWORD PTR _dymem
	cmp	DWORD PTR [eax+edx+1288], ecx
	je	SHORT $LN43@vertex_sq_
	mov	ecx, DWORD PTR _web+12
	mov	ecx, DWORD PTR [ecx+ebx*4]
	add	ecx, DWORD PTR [eax+edx+1264]
	jmp	SHORT $LN44@vertex_sq_
$LN43@vertex_sq_:
	mov	ecx, OFFSET _nullcon
$LN44@vertex_sq_:

; 396  :     int j,oncount = 0;
; 397  :     struct constraint *con[MAXCONHIT];
; 398  :     REAL perp[MAXCOORD];
; 399  : 
; 400  :     for ( j = 1 ; j <= (int)conmap[0] ; j++ )

	mov	ebx, 1
	xor	esi, esi
	cmp	DWORD PTR [ecx], ebx
	jl	SHORT $LN26@vertex_sq_
$LL28@vertex_sq_:

; 401  :       if ( (conmap[j] & CON_HIT_BIT) && (oncount < web.sdim) ) 

	mov	eax, DWORD PTR [ecx+ebx*4]
	test	eax, eax
	jns	SHORT $LN27@vertex_sq_
	cmp	esi, DWORD PTR _web+616
	jge	SHORT $LN27@vertex_sq_

; 402  :          con[oncount++] = get_constraint(conmap[j]);

	and	eax, 1073741823				; 3fffffffH
	imul	eax, 176				; 000000b0H
	add	eax, DWORD PTR _web+652
	inc	esi
	mov	DWORD PTR _con$89348[ebp+esi*4-4], eax
$LN27@vertex_sq_:

; 396  :     int j,oncount = 0;
; 397  :     struct constraint *con[MAXCONHIT];
; 398  :     REAL perp[MAXCOORD];
; 399  : 
; 400  :     for ( j = 1 ; j <= (int)conmap[0] ; j++ )

	inc	ebx
	cmp	ebx, DWORD PTR [ecx]
	jle	SHORT $LL28@vertex_sq_
	mov	eax, DWORD PTR _web+104
$LN26@vertex_sq_:

; 403  : 
; 404  :     constr_proj(TANGPROJ,oncount,con,get_coord(v_id),
; 405  :                             vc->force,perp,NULL,NO_DETECT,v_id);

	mov	edx, DWORD PTR _v_id$GSCopy$[ebp]
	push	edx
	mov	edx, DWORD PTR tv384[ebp]
	push	0
	push	0
	lea	ecx, DWORD PTR _perp$89349[ebp]
	push	ecx
	mov	ecx, DWORD PTR _web+12
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+64]
	lea	ebx, DWORD PTR [edi+16]
	push	ebx
	push	edx
	lea	edx, DWORD PTR _con$89348[ebp]
	push	edx
	push	esi
	push	2
	call	_constr_proj

; 406  :     for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR _web+616
	add	esp, 36					; 00000024H
	xor	ecx, ecx
	test	eax, eax
	jle	SHORT $LN22@vertex_sq_

; 403  : 
; 404  :     constr_proj(TANGPROJ,oncount,con,get_coord(v_id),
; 405  :                             vc->force,perp,NULL,NO_DETECT,v_id);

	mov	edx, ebx
$LL24@vertex_sq_:

; 407  :        vc->force[j] -= perp[j];

	fld	QWORD PTR [edx]
	inc	ecx
	fsub	QWORD PTR _perp$89349[ebp+ecx*8-8]
	add	edx, 8
	fstp	QWORD PTR [edx-8]
	mov	eax, DWORD PTR _web+616
	cmp	ecx, eax
	jl	SHORT $LL24@vertex_sq_
$LN22@vertex_sq_:

; 408  :     if ( effective_area_flag || normal_curvature_flag )

	cmp	DWORD PTR _effective_area_flag, 0
	jne	SHORT $LN20@vertex_sq_
	cmp	DWORD PTR _normal_curvature_flag, 0
	je	$LN54@vertex_sq_
$LN20@vertex_sq_:

; 409  :     { constr_proj(TANGPROJ,oncount,con,get_coord(v_id),
; 410  :                                  vc->normal,perp,NULL,NO_DETECT,v_id);

	mov	eax, DWORD PTR _v_id$GSCopy$[ebp]
	mov	edx, DWORD PTR _web+12
	push	eax
	mov	eax, DWORD PTR tv384[ebp]
	push	0
	push	0
	lea	ecx, DWORD PTR _perp$89349[ebp]
	push	ecx
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+104
	mov	eax, DWORD PTR _dymem
	add	ecx, DWORD PTR [edx+eax+64]
	lea	ebx, DWORD PTR [edi+416]
	push	ebx
	push	ecx
	lea	ecx, DWORD PTR _con$89348[ebp]
	push	ecx
	push	esi
	push	2
	call	_constr_proj

; 411  :       for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR _web+616
	add	esp, 36					; 00000024H
	xor	ecx, ecx
	test	eax, eax
	jle	SHORT $LN51@vertex_sq_

; 409  :     { constr_proj(TANGPROJ,oncount,con,get_coord(v_id),
; 410  :                                  vc->normal,perp,NULL,NO_DETECT,v_id);

	mov	edx, ebx
	npad	5
$LL19@vertex_sq_:

; 412  :         vc->normal[j] -= perp[j];

	fld	QWORD PTR [edx]
	inc	ecx
	fsub	QWORD PTR _perp$89349[ebp+ecx*8-8]
	add	edx, 8
	fstp	QWORD PTR [edx-8]
	mov	eax, DWORD PTR _web+616
	cmp	ecx, eax
	jl	SHORT $LL19@vertex_sq_
$LN51@vertex_sq_:

; 411  :       for ( j = 0 ; j < SDIM ; j++ )

	mov	ebx, DWORD PTR tv384[ebp]
	jmp	SHORT $LN17@vertex_sq_
$LN52@vertex_sq_:
	mov	eax, DWORD PTR _web+616
$LN17@vertex_sq_:

; 413  :     }
; 414  :   } 
; 415  :   if ( normal_curvature_flag )

	cmp	DWORD PTR _normal_curvature_flag, 0
	je	SHORT $LN16@vertex_sq_

; 416  :   { f = SDIM_dot(vc->force,vc->force);

	push	eax
	lea	esi, DWORD PTR [edi+16]
	push	esi
	push	esi
	call	_dot
	fstp	QWORD PTR _f$[ebp]

; 417  :     denom = SDIM_dot(vc->force,vc->normal);

	mov	edx, DWORD PTR _web+616
	push	edx
	add	edi, 416				; 000001a0H
	push	edi
	push	esi
	call	_dot

; 418  :     if ( denom == 0.0 )  h = 0.0;

	fld	ST(0)
	fldz
	add	esp, 24					; 00000018H
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	SHORT $LN66@vertex_sq_
	fstp	ST(1)
	jmp	SHORT $LN14@vertex_sq_
$LN66@vertex_sq_:
	fstp	ST(0)

; 419  :     else h = 3*f/denom;  /* mean, and  normal was twice area */

	fld	QWORD PTR _f$[ebp]
	fmul	QWORD PTR __real@4008000000000000
	fdivrp	ST(1), ST(0)
$LN14@vertex_sq_:

; 420  :     if ( h0_flag ) h -= h0_val;

	cmp	DWORD PTR _h0_flag, 0
	je	SHORT $LN13@vertex_sq_
	fsub	QWORD PTR _h0_val$[ebp]
$LN13@vertex_sq_:

; 421  :     if ( mean_curv_int_flag )

	cmp	DWORD PTR _mean_curv_int_flag, 0

; 422  :        venergy = h;
; 423  :     else /* squared curvature */

	jne	$LN39@vertex_sq_

; 424  :        venergy = h*h;

	pop	edi
	fmul	ST(0), ST(0)
	pop	esi
	pop	ebx

; 450  : 
; 451  :   return venergy;
; 452  : } // end vertex_sq_mean_curvature()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN54@vertex_sq_:

; 425  :   }
; 426  :   else if ( h0_flag )

	mov	ebx, DWORD PTR tv384[ebp]
$LN16@vertex_sq_:
	cmp	DWORD PTR _h0_flag, 0

; 427  :   { REAL term,sim; 
; 428  :     vc->h = h = SDIM_dot(vc->force,vc->normal)/
; 429  :                           SDIM_dot(vc->normal,vc->normal)*3;

	push	eax
	je	$LN9@vertex_sq_
	lea	esi, DWORD PTR [edi+416]
	lea	eax, DWORD PTR [edi+16]
	push	esi
	push	eax
	call	_dot
	fstp	QWORD PTR tv619[ebp]
	mov	ecx, DWORD PTR _web+616
	push	ecx
	push	esi
	push	esi
	call	_dot
	fdivr	QWORD PTR tv619[ebp]
	add	esp, 24					; 00000018H
	fmul	QWORD PTR __real@4008000000000000
	fst	QWORD PTR [edi+72]

; 430  :                             /* since vc->normal = 6*volgrad */
; 431  :     term = h - h0_val;
; 432  :     if ( self_similar_flag )

	cmp	DWORD PTR _self_similar_flag, 0
	fsub	QWORD PTR _h0_val$[ebp]
	fst	QWORD PTR _term$89385[ebp]
	je	SHORT $LN8@vertex_sq_

; 433  :     { vc->vol = SDIM_dot(get_coord(v_id),vc->normal);

	mov	edx, DWORD PTR _web+616
	fstp	ST(0)
	mov	eax, DWORD PTR _web+12
	mov	ecx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR _dymem
	push	edx
	mov	edx, DWORD PTR _web+104
	add	ecx, DWORD PTR [edx+eax+64]
	push	esi
	push	ecx
	call	_dot
	fst	QWORD PTR [edi+520]

; 434  :       sim = selfsim_coeff*vc->vol;

	fmul	QWORD PTR _selfsim_coeff
	add	esp, 12					; 0000000cH

; 435  :       term -= sim;

	fsubr	QWORD PTR _term$89385[ebp]
$LN8@vertex_sq_:

; 436  :     }
; 437  :     venergy = term*term;

	pop	edi
	fmul	ST(0), ST(0)
	pop	esi
	pop	ebx

; 450  : 
; 451  :   return venergy;
; 452  : } // end vertex_sq_mean_curvature()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@vertex_sq_:

; 438  :    }
; 439  :    else if ( mean_curv_int_flag ) /* unsquared curvature */

	cmp	DWORD PTR _mean_curv_int_flag, 0

; 440  :        venergy = sqrt(SDIM_dot(vc->force,vc->force))/2/area;

	lea	ecx, DWORD PTR [edi+16]
	push	ecx
	push	ecx
	je	SHORT $LN6@vertex_sq_
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000
	pop	edi
	pop	esi
	fdiv	QWORD PTR _area$[ebp]
	pop	ebx

; 450  : 
; 451  :   return venergy;
; 452  : } // end vertex_sq_mean_curvature()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@vertex_sq_:

; 441  :    else if ( effective_area_flag )

	cmp	DWORD PTR _effective_area_flag, 0
	je	SHORT $LN4@vertex_sq_

; 442  :    { f = SDIM_dot(vc->force,vc->force);

	call	_dot
	fstp	QWORD PTR _f$[ebp]

; 443  :      denom = SDIM_dot(vc->normal,vc->normal);

	mov	ecx, DWORD PTR _web+616
	lea	eax, DWORD PTR [edi+416]
	push	ecx
	push	eax
	push	eax
	call	_dot

; 444  :      if ( denom == 0.0 ) venergy = 0.0;

	fld	ST(0)
	fldz
	add	esp, 24					; 00000018H
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	SHORT $LN80@vertex_sq_
	pop	edi
	fstp	ST(1)
	pop	esi
	pop	ebx

; 450  : 
; 451  :   return venergy;
; 452  : } // end vertex_sq_mean_curvature()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN80@vertex_sq_:

; 444  :      if ( denom == 0.0 ) venergy = 0.0;

	fstp	ST(0)
	pop	edi

; 445  :      else
; 446  :         venergy = 9*f/denom;  /* 9 = 36/4 */

	fld	QWORD PTR _f$[ebp]
	pop	esi
	fmul	QWORD PTR __real@4022000000000000
	pop	ebx
	fdivrp	ST(1), ST(0)

; 450  : 
; 451  :   return venergy;
; 452  : } // end vertex_sq_mean_curvature()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@vertex_sq_:

; 447  :    }
; 448  :    else /* plain squared curvature */
; 449  :      venergy = SDIM_dot(vc->force,vc->force)/area/area/4;

	call	_dot
	fld	QWORD PTR _area$[ebp]
	fdiv	ST(1), ST(0)
	add	esp, 12					; 0000000cH
	fdivp	ST(1), ST(0)
	fmul	QWORD PTR __real@3fd0000000000000
$LN39@vertex_sq_:

; 450  : 
; 451  :   return venergy;
; 452  : } // end vertex_sq_mean_curvature()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_vertex_sq_mean_curvature ENDP
_TEXT	ENDS
PUBLIC	__real@4000000000000000
PUBLIC	??_C@_0BA@OMBEMJJG@curvature_power?$AA@		; `string'
PUBLIC	_sqcurve_energy_string_init
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT ??_C@_0BA@OMBEMJJG@curvature_power?$AA@
CONST	SEGMENT
??_C@_0BA@OMBEMJJG@curvature_power?$AA@ DB 'curvature_power', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _sqcurve_energy_string_init
_TEXT	SEGMENT
_sqcurve_energy_string_init PROC			; COMDAT

; 919  :   curve_power_param = lookup_global(CURVE_POWER_NAME);

	push	OFFSET ??_C@_0BA@OMBEMJJG@curvature_power?$AA@
	call	_lookup_global
	add	esp, 4
	mov	DWORD PTR _curve_power_param, eax

; 920  :   if ( curve_power_param < 0 ) /* missing, so add */

	test	eax, eax
	jns	$LN1@sqcurve_en@3

; 921  :   { curve_power_param = add_global(CURVE_POWER_NAME);

	push	OFFSET ??_C@_0BA@OMBEMJJG@curvature_power?$AA@
	call	_add_global

; 922  :     globals(curve_power_param)->value.real = 2.0;  /* default */

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	add	esp, 4
	mov	DWORD PTR _curve_power_param, eax
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN4@sqcurve_en@3
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN6@sqcurve_en@3
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN5@sqcurve_en@3
$LN6@sqcurve_en@3:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN4@sqcurve_en@3
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN5@sqcurve_en@3
$LN4@sqcurve_en@3:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN5@sqcurve_en@3:
	fld	QWORD PTR __real@4000000000000000
	fstp	QWORD PTR [eax+64]

; 923  :     globals(curve_power_param)->flags |=  ORDINARY_PARAM;

	mov	eax, DWORD PTR _curve_power_param
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN10@sqcurve_en@3
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN12@sqcurve_en@3
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN11@sqcurve_en@3
$LN12@sqcurve_en@3:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN10@sqcurve_en@3
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN11@sqcurve_en@3
$LN10@sqcurve_en@3:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN11@sqcurve_en@3:
	or	DWORD PTR [eax+192], 1
	mov	eax, DWORD PTR _curve_power_param
$LN1@sqcurve_en@3:

; 924  :   }
; 925  :   curve_power = globals(curve_power_param)->value.real;

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN16@sqcurve_en@3
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN18@sqcurve_en@3
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+64]
	fstp	QWORD PTR _curve_power

; 926  : } // end sqcurve_energy_string_init()

	ret	0
$LN18@sqcurve_en@3:

; 924  :   }
; 925  :   curve_power = globals(curve_power_param)->value.real;

	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN16@sqcurve_en@3
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [eax+64]
	fstp	QWORD PTR _curve_power

; 926  : } // end sqcurve_energy_string_init()

	ret	0
$LN16@sqcurve_en@3:

; 924  :   }
; 925  :   curve_power = globals(curve_power_param)->value.real;

	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
	fld	QWORD PTR [eax+64]
	fstp	QWORD PTR _curve_power

; 926  : } // end sqcurve_energy_string_init()

	ret	0
_sqcurve_energy_string_init ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_sqcurve_energy_string
EXTRN	_square_curvature_param:DWORD
EXTRN	_get_edge_side:PROC
EXTRN	__CIpow:PROC
; Function compile flags: /Ogtp
;	COMDAT _sqcurve_energy_string
_TEXT	SEGMENT
tv226 = -116						; size = 8
_s1$ = -116						; size = 8
_a2$ = -108						; size = 8
_s2$ = -108						; size = 8
_side2$ = -100						; size = 48
_side1$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_v_id$ = 8						; size = 4
_sqcurve_energy_string PROC				; COMDAT

; 939  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _v_id$[ebp]

; 940  :   REAL s1,s2,s1s2;  /* edge lengths */
; 941  :   REAL side1[MAXCOORD],side2[MAXCOORD];
; 942  :   edge_id e1;
; 943  :   edge_id e2;
; 944  :   REAL energy;
; 945  :   REAL a1,a2;
; 946  : 
; 947  :   e2 = get_vertex_edge(v_id);

	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	push	esi
	mov	esi, DWORD PTR [edx+28]

; 948  :   e1 = get_next_tail_edge(e2);;
; 949  :   e1 = inverse_id(e1);
; 950  : 
; 951  :   get_edge_side(e1,side1);

	lea	eax, DWORD PTR _side1$[ebp]
	push	eax
	mov	eax, DWORD PTR _web+124
	mov	ecx, esi
	mov	edx, esi
	shr	ecx, 27					; 0000001bH
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	and	ecx, 1
	mov	eax, DWORD PTR [edx+ecx*4+32]
	xor	eax, 134217728				; 08000000H
	push	eax
	call	_get_edge_side

; 952  :   get_edge_side(e2,side2);

	lea	ecx, DWORD PTR _side2$[ebp]
	push	ecx
	push	esi
	call	_get_edge_side

; 953  :   s1 = sqrt(SDIM_dot(side1,side1));

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _side1$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	add	esp, 28					; 0000001cH
	call	__CIsqrt
	fstp	QWORD PTR _s1$[ebp]

; 954  :   s2 = sqrt(SDIM_dot(side2,side2));

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _side2$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR _s2$[ebp]

; 955  :   s1s2 = SDIM_dot(side1,side2);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _side2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _side1$[ebp]
	push	ecx
	call	_dot

; 956  : 
; 957  :   a1 = 1 - s1s2/s1/s2;

	fld	QWORD PTR _s1$[ebp]
	fdiv	ST(1), ST(0)
	add	esp, 12					; 0000000cH
	pop	esi
	fld	QWORD PTR _s2$[ebp]
	fdiv	ST(2), ST(0)
	fld1
	fsubrp	ST(3), ST(0)

; 958  :   a2 = (s1 + s2)/2;

	faddp	ST(1), ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _a2$[ebp]

; 959  :   total_length += a2;

	fadd	QWORD PTR _total_length
	fstp	QWORD PTR _total_length

; 960  :   if ( a1 <= 0.0 ) return;

	fldz
	fcomp	ST(2)
	fnstsw	ax
	test	ah, 1
	je	$LN13@sqcurve_en@4

; 961  : 
; 962  :   energy = pow(a1,curve_power/2)/pow(a2,curve_power-1);

	fmul	QWORD PTR _curve_power
	call	__CIpow
	fstp	QWORD PTR tv226[ebp]
	fld	QWORD PTR _curve_power
	fsub	QWORD PTR __real@3ff0000000000000
	fld	QWORD PTR _a2$[ebp]
	fxch	ST(1)
	call	__CIpow
	fdivr	QWORD PTR tv226[ebp]

; 963  :   energy *= globals(square_curvature_param)->value.real;

	mov	eax, DWORD PTR _square_curvature_param
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN4@sqcurve_en@4
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN6@sqcurve_en@4
	mov	edx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [edx]
	jmp	SHORT $LN5@sqcurve_en@4
$LN6@sqcurve_en@4:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN4@sqcurve_en@4
	mov	ecx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN5@sqcurve_en@4
$LN4@sqcurve_en@4:
	mov	edx, DWORD PTR _web+5652
	mov	ecx, DWORD PTR _dymem
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ecx]
$LN5@sqcurve_en@4:
	fmul	QWORD PTR [eax+64]

; 964  : 
; 965  :   /* fudge factor to agree with def */
; 966  :   total_sqcurve += 2*energy;

	fadd	ST(0), ST(0)
	fadd	QWORD PTR _total_sqcurve
	fstp	QWORD PTR _total_sqcurve

; 967  : 
; 968  : } // end sqcurve_energy_string()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@sqcurve_en@4:
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(1)
	xor	ecx, ebp
	fstp	ST(0)
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_sqcurve_energy_string ENDP
_TEXT	ENDS
PUBLIC	__real@bff0000000000000
PUBLIC	__real@c000000000000000
PUBLIC	__$ArrayPad$
PUBLIC	_sqcurve_force_string
;	COMDAT __real@bff0000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@c000000000000000
CONST	SEGMENT
__real@c000000000000000 DQ 0c000000000000000r	; -2
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\sqcurve.c
CONST	ENDS
;	COMDAT _sqcurve_force_string
_TEXT	SEGMENT
_modulus$ = -184					; size = 8
tv566 = -176						; size = 8
tv573 = -168						; size = 8
tv567 = -160						; size = 8
tv760 = -152						; size = 8
_a1$ = -144						; size = 8
_s2$ = -136						; size = 8
tv575 = -128						; size = 8
_c2$ = -128						; size = 8
_a2$ = -120						; size = 8
tv512 = -116						; size = 4
_s1$ = -112						; size = 8
tv537 = -108						; size = 4
tv524 = -104						; size = 4
_hforce$ = -104						; size = 4
_side1$ = -100						; size = 48
_side2$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_v_id$ = 8						; size = 4
_sqcurve_force_string PROC				; COMDAT

; 981  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 184				; 000000b8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 982  :   REAL s1,s2,s1s2;  /* edge lengths */
; 983  :   REAL side1[MAXCOORD],side2[MAXCOORD];
; 984  :   edge_id e1;
; 985  :   edge_id e2;
; 986  :   REAL *tforce,*vforce,*hforce;
; 987  :   int  i;
; 988  :   REAL c1,c2;
; 989  :   REAL modulus = globals(square_curvature_param)->value.real;

	mov	eax, DWORD PTR _square_curvature_param
	mov	ecx, DWORD PTR _v_id$[ebp]
	mov	edx, eax
	push	ebx
	mov	ebx, DWORD PTR _dymem
	and	edx, -16777216				; ff000000H
	push	esi
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN10@sqcurve_fo@3
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN12@sqcurve_fo@3
	mov	edx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [edx]
	jmp	SHORT $LN11@sqcurve_fo@3
$LN12@sqcurve_fo@3:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN10@sqcurve_fo@3
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN11@sqcurve_fo@3
$LN10@sqcurve_fo@3:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ebx]
$LN11@sqcurve_fo@3:
	fld	QWORD PTR [eax+64]

; 990  :   REAL a1,a2,energy;
; 991  : 
; 992  :   e2 = get_vertex_edge(v_id);

	mov	edx, DWORD PTR _web+12

; 993  :   e1 = get_next_tail_edge(e2);
; 994  :   e1 = inverse_id(e1);
; 995  :  
; 996  :   vforce = get_force(v_id);

	mov	esi, DWORD PTR _web+104
	fstp	QWORD PTR _modulus$[ebp]
	mov	esi, DWORD PTR [esi+ebx+784]
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _web+124
	push	edi
	mov	edi, DWORD PTR [edx+28]
	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, edi
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR tv524[ebp], esi
	add	esi, edx

; 997  :   tforce = get_force(get_edge_tailv(e1));

	mov	edx, DWORD PTR _web+216
	mov	edx, DWORD PTR [edx+ebx+304]
	mov	ebx, DWORD PTR _web+124
	mov	DWORD PTR tv512[ebp], ecx
	mov	ecx, DWORD PTR [ecx+eax*4+32]
	xor	ecx, 134217728				; 08000000H
	mov	DWORD PTR tv537[ebp], edx
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+edx*4]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN19@sqcurve_fo@3
	mov	ebx, DWORD PTR _web+636
	lea	edx, DWORD PTR [edx+ebx*4]
	mov	ebx, DWORD PTR tv537[ebp]
	mov	edx, DWORD PTR [edx+ebx]
	jmp	SHORT $LN18@sqcurve_fo@3
$LN19@sqcurve_fo@3:
	mov	ebx, DWORD PTR tv537[ebp]
	mov	edx, DWORD PTR [ebx+edx]
$LN18@sqcurve_fo@3:
	mov	ebx, DWORD PTR _web+12
	and	edx, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ebx+edx*4]
	add	ebx, DWORD PTR tv524[ebp]

; 998  :   hforce = get_force(get_edge_headv(e2));

	test	eax, eax
	mov	eax, DWORD PTR tv537[ebp]
	jne	SHORT $LN45@sqcurve_fo@3
	mov	edx, DWORD PTR _web+636
	lea	eax, DWORD PTR [eax+edx*4]
$LN45@sqcurve_fo@3:
	mov	edx, DWORD PTR tv512[ebp]
	mov	eax, DWORD PTR [eax+edx]
	mov	edx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	add	eax, DWORD PTR tv524[ebp]
	mov	DWORD PTR _hforce$[ebp], eax

; 999  : 
; 1000 :   get_edge_side(e1,side1);

	lea	eax, DWORD PTR _side1$[ebp]
	push	eax
	push	ecx
	call	_get_edge_side

; 1001 :   get_edge_side(e2,side2);

	lea	ecx, DWORD PTR _side2$[ebp]
	push	ecx
	push	edi
	call	_get_edge_side

; 1002 :   s1 = sqrt(SDIM_dot(side1,side1));

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _side1$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	add	esp, 28					; 0000001cH
	call	__CIsqrt
	fstp	QWORD PTR _s1$[ebp]

; 1003 :   s2 = sqrt(SDIM_dot(side2,side2));

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _side2$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR _s2$[ebp]

; 1004 :   s1s2 = SDIM_dot(side1,side2);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _side2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _side1$[ebp]
	push	ecx
	call	_dot

; 1005 : 
; 1006 :   a1 = 1 - s1s2/s1/s2;

	fld	QWORD PTR _s1$[ebp]
	fdiv	ST(1), ST(0)
	add	esp, 12					; 0000000cH
	pop	edi
	fxch	ST(1)
	fst	QWORD PTR tv566[ebp]
	fld	QWORD PTR _s2$[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv567[ebp]
	fld1
	fld	ST(0)
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _a1$[ebp]

; 1007 :   if ( a1 <= 0.0 ) return;

	fldz
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 1
	je	$LN33@sqcurve_fo@3

; 1008 : 
; 1009 :   a2 = (s1 + s2)/2;

	fxch	ST(2)
	faddp	ST(3), ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(3), ST(0)
	fxch	ST(3)
	fstp	QWORD PTR _a2$[ebp]

; 1010 :   energy = pow(a1,curve_power/2)/pow(a2,curve_power-1);

	fld	QWORD PTR _curve_power
	fld	ST(0)
	fmulp	ST(4), ST(0)
	fxch	ST(3)
	fst	QWORD PTR tv573[ebp]
	fxch	ST(3)
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR tv575[ebp]
	fxch	ST(1)
	call	__CIpow
	fstp	QWORD PTR tv760[ebp]
	fld	QWORD PTR _a2$[ebp]
	fld	QWORD PTR tv575[ebp]
	call	__CIpow
	fdivr	QWORD PTR tv760[ebp]

; 1011 : 
; 1012 :   c1 = -modulus*2*( curve_power/2*energy/a1*(s1s2/s1/s1/s1/s2)
; 1013 :             - (curve_power - 1)*energy/a2/s1/2);
; 1014 :   c2 = -modulus*2*( curve_power/2*energy/a1*(-1/s1/s2));
; 1015 :   for ( i = 0 ; i < SDIM ; i++ )

	mov	ecx, DWORD PTR _web+616
	xor	eax, eax
	fld	QWORD PTR tv573[ebp]
	fmul	ST(0), ST(1)
	fdiv	QWORD PTR _a1$[ebp]
	fld	QWORD PTR _modulus$[ebp]
	fmul	QWORD PTR __real@c000000000000000
	fld	QWORD PTR tv566[ebp]
	fld	QWORD PTR _s1$[ebp]
	fdiv	ST(1), ST(0)
	fdiv	ST(1), ST(0)
	fld	QWORD PTR _s2$[ebp]
	fdiv	ST(2), ST(0)
	fxch	ST(2)
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv575[ebp]
	fmul	ST(0), ST(6)
	fdiv	QWORD PTR _a2$[ebp]
	fdiv	ST(0), ST(2)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(2)
	fsubrp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fld	QWORD PTR __real@bff0000000000000
	fdivrp	ST(3), ST(0)
	fxch	ST(2)
	fdiv	ST(0), ST(3)
	fld	ST(0)
	fmulp	ST(6), ST(0)
	fxch	ST(5)
	fmul	ST(0), ST(4)
	fstp	QWORD PTR _c2$[ebp]
	test	ecx, ecx
	jle	SHORT $LN39@sqcurve_fo@3
	mov	edx, ebx
	lea	ecx, DWORD PTR _side2$[ebp]
	sub	edx, ecx
$LN31@sqcurve_fo@3:

; 1016 :      { tforce[i] -= c1*side1[i] + c2*side2[i];

	fld	QWORD PTR _side2$[ebp+eax*8]
	lea	ecx, DWORD PTR _side2$[ebp+eax*8]
	fmul	QWORD PTR _c2$[ebp]
	inc	eax
	fld	QWORD PTR _side1$[ebp+eax*8-8]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fsubr	QWORD PTR [edx+ecx]
	fstp	QWORD PTR [edx+ecx]

; 1017 :         vforce[i] += c1*side1[i] + c2*side2[i];

	fld	QWORD PTR [ecx]
	fmul	QWORD PTR _c2$[ebp]
	fld	QWORD PTR _side1$[ebp+eax*8-8]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fadd	QWORD PTR [esi+eax*8-8]
	fstp	QWORD PTR [esi+eax*8-8]
	mov	ecx, DWORD PTR _web+616
	cmp	eax, ecx
	jl	SHORT $LN31@sqcurve_fo@3
$LN39@sqcurve_fo@3:

; 1011 : 
; 1012 :   c1 = -modulus*2*( curve_power/2*energy/a1*(s1s2/s1/s1/s1/s2)
; 1013 :             - (curve_power - 1)*energy/a2/s1/2);
; 1014 :   c2 = -modulus*2*( curve_power/2*energy/a1*(-1/s1/s2));
; 1015 :   for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(1)

; 1018 :      }
; 1019 : 
; 1020 :   c1 = -modulus*2*( curve_power/2*energy/a1*(s1s2/s1/s2/s2/s2)
; 1021 :             - (curve_power - 1)*energy/a2/s2/2);
; 1022 :   c2 = -modulus*2*( curve_power/2*energy/a1*(-1/s1/s2));
; 1023 :   for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	fld	QWORD PTR _curve_power
	fld	ST(0)
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(6)
	fdiv	QWORD PTR _a1$[ebp]
	fld	QWORD PTR tv567[ebp]
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fmul	ST(0), ST(1)
	fxch	ST(2)
	fsub	QWORD PTR __real@3ff0000000000000
	fmulp	ST(7), ST(0)
	fxch	ST(6)
	fdiv	QWORD PTR _a2$[ebp]
	fdivrp	ST(3), ST(0)
	fxch	ST(2)
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fxch	ST(2)
	fmulp	ST(3), ST(0)
	fmulp	ST(2), ST(0)
	test	ecx, ecx
	jle	SHORT $LN44@sqcurve_fo@3
	mov	edx, DWORD PTR _hforce$[ebp]
	lea	ecx, DWORD PTR _side1$[ebp]
	sub	edx, ecx
$LN3@sqcurve_fo@3:

; 1024 :      { hforce[i] += c2*side1[i] + c1*side2[i];

	fld	QWORD PTR _side1$[ebp+eax*8]
	lea	ecx, DWORD PTR _side1$[ebp+eax*8]
	fmul	ST(0), ST(2)
	inc	eax
	fld	QWORD PTR _side2$[ebp+eax*8-8]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fadd	QWORD PTR [edx+ecx]
	fstp	QWORD PTR [edx+ecx]

; 1025 :         vforce[i] -= c2*side1[i] + c1*side2[i];

	fld	QWORD PTR [ecx]
	fmul	ST(0), ST(2)
	fld	QWORD PTR _side2$[ebp+eax*8-8]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fsubr	QWORD PTR [esi+eax*8-8]
	fstp	QWORD PTR [esi+eax*8-8]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN3@sqcurve_fo@3

; 1018 :      }
; 1019 : 
; 1020 :   c1 = -modulus*2*( curve_power/2*energy/a1*(s1s2/s1/s2/s2/s2)
; 1021 :             - (curve_power - 1)*energy/a2/s2/2);
; 1022 :   c2 = -modulus*2*( curve_power/2*energy/a1*(-1/s1/s2));
; 1023 :   for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(1)
	pop	esi
	fstp	ST(0)
	pop	ebx

; 1026 :      }
; 1027 : } // end sqcurve_force_string()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN33@sqcurve_fo@3:

; 1018 :      }
; 1019 : 
; 1020 :   c1 = -modulus*2*( curve_power/2*energy/a1*(s1s2/s1/s2/s2/s2)
; 1021 :             - (curve_power - 1)*energy/a2/s2/2);
; 1022 :   c2 = -modulus*2*( curve_power/2*energy/a1*(-1/s1/s2));
; 1023 :   for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(3)
	fstp	ST(1)
$LN44@sqcurve_fo@3:

; 1026 :      }
; 1027 : } // end sqcurve_force_string()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(1)
	pop	esi
	fstp	ST(0)
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_sqcurve_force_string ENDP
_TEXT	ENDS
PUBLIC	_sqcurve_force_string_end
; Function compile flags: /Ogtp
;	COMDAT _sqcurve_force_string_end
_TEXT	SEGMENT
_sqcurve_force_string_end PROC				; COMDAT

; 1039 : }

	ret	0
_sqcurve_force_string_end ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@PMFILILH@Dimension?5of?5stokes_velocity?5mus@ ; `string'
PUBLIC	??_C@_0BA@FOCIJIDK@stokes_velocity?$AA@		; `string'
PUBLIC	??_C@_0M@IJJCILIB@stokes_type?$AA@		; `string'
PUBLIC	_stokes2d_init
EXTRN	_add_attribute:PROC
EXTRN	_kb_error:PROC
EXTRN	_find_attribute:PROC
;	COMDAT ??_C@_0CJ@PMFILILH@Dimension?5of?5stokes_velocity?5mus@
CONST	SEGMENT
??_C@_0CJ@PMFILILH@Dimension?5of?5stokes_velocity?5mus@ DB 'Dimension of '
	DB	'stokes_velocity must be 2.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FOCIJIDK@stokes_velocity?$AA@
CONST	SEGMENT
??_C@_0BA@FOCIJIDK@stokes_velocity?$AA@ DB 'stokes_velocity', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IJJCILIB@stokes_type?$AA@
CONST	SEGMENT
??_C@_0M@IJJCILIB@stokes_type?$AA@ DB 'stokes_type', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _stokes2d_init
_TEXT	SEGMENT
_two$89937 = -4						; size = 4
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_stokes2d_init PROC					; COMDAT

; 1078 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1079 :  /* find parameters */ 
; 1080 :  stokes_type_attr = find_attribute(VERTEX,STOKES_TYPE_NAME);

	push	OFFSET ??_C@_0M@IJJCILIB@stokes_type?$AA@
	push	0
	call	_find_attribute

; 1081 :  stokes_velocity_attr = find_attribute(VERTEX,STOKES_VELOCITY_NAME);

	push	OFFSET ??_C@_0BA@FOCIJIDK@stokes_velocity?$AA@
	push	0
	mov	DWORD PTR _stokes_type_attr, eax
	call	_find_attribute
	add	esp, 16					; 00000010H
	mov	DWORD PTR _stokes_velocity_attr, eax

; 1082 :  if ( stokes_velocity_attr >= 0 )

	test	eax, eax
	js	SHORT $LN3@stokes2d_i

; 1083 :  { if ( EXTRAS(VERTEX)[stokes_velocity_attr].array_spec.sizes[0] < 2 )

	mov	ecx, DWORD PTR _dymem
	imul	eax, 240				; 000000f0H
	add	eax, DWORD PTR _web+104
	cmp	DWORD PTR [eax+ecx+96], 2
	jge	SHORT $LN1@stokes2d_i

; 1084 :      kb_error(3674,"Dimension of stokes_velocity must be 2.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CJ@PMFILILH@Dimension?5of?5stokes_velocity?5mus@
	push	3674					; 00000e5aH
	call	_kb_error
	add	esp, 12					; 0000000cH

; 1090 :  }
; 1091 : 
; 1092 : } // stokes2d_init()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@stokes2d_i:

; 1085 :  } 
; 1086 :  else /* create */
; 1087 :  { int two = SDIM;

	mov	edx, DWORD PTR _web+616

; 1088 :    stokes_velocity_attr = add_attribute(VERTEX,STOKES_VELOCITY_NAME,
; 1089 :        REAL_TYPE,1,&two,0,NULL,MPI_NO_PROPAGATE);

	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _two$89937[ebp]
	push	eax
	push	1
	push	1
	push	OFFSET ??_C@_0BA@FOCIJIDK@stokes_velocity?$AA@
	push	0
	mov	DWORD PTR _two$89937[ebp], edx
	call	_add_attribute
	add	esp, 32					; 00000020H
	mov	DWORD PTR _stokes_velocity_attr, eax
$LN1@stokes2d_i:

; 1090 :  }
; 1091 : 
; 1092 : } // stokes2d_init()

	mov	esp, ebp
	pop	ebp
	ret	0
_stokes2d_init ENDP
_TEXT	ENDS
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@400a666666666666
PUBLIC	??_C@_0DF@PDBDOHJH@stokes_nonslipwall?5needs?5stokes_@ ; `string'
PUBLIC	_stokes2d_all
EXTRN	__CIacos:PROC
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@400a666666666666
CONST	SEGMENT
__real@400a666666666666 DQ 0400a666666666666r	; 3.3
CONST	ENDS
;	COMDAT ??_C@_0DF@PDBDOHJH@stokes_nonslipwall?5needs?5stokes_@
CONST	SEGMENT
??_C@_0DF@PDBDOHJH@stokes_nonslipwall?5needs?5stokes_@ DB 'stokes_nonslip'
	DB	'wall needs stokes_velocity attribute.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _stokes2d_all
_TEXT	SEGMENT
tv711 = -116						; size = 8
tv703 = -108						; size = 8
_u2$ = -108						; size = 8
tv706 = -100						; size = 8
_u1$ = -100						; size = 8
tv700 = -92						; size = 8
tv680 = -92						; size = 8
tv1071 = -84						; size = 8
tv714 = -84						; size = 8
_sumarea$ = -76						; size = 8
_det$ = -68						; size = 8
_x2$ = -60						; size = 8
_wedge$ = -52						; size = 8
_x1$ = -44						; size = 8
_y1$ = -36						; size = 8
_y2$ = -28						; size = 8
_h$ = -20						; size = 8
_stokes_velocity$ = -12					; size = 4
_maxn$ = -8						; size = 4
_stokes_type$ = -4					; size = 4
_v_info$ = 8						; size = 4
_mode$ = 12						; size = 4
_stokes2d_all PROC					; COMDAT

; 1104 : { int n,nn,maxn;

	push	ebp
	mov	ebp, esp

; 1105 :   REAL h,H,x1,y1,x2,y2,u1,u2,det,sumarea,value;
; 1106 :   REAL wedge; /* angle around vertex, to detect boundary or corner point for kludge */
; 1107 :   int stokes_type = (stokes_type_attr >= 0) ? *VINT(v_info->id,stokes_type_attr)
; 1108 :                         : STOKES_NONWALL ;

	mov	eax, DWORD PTR _stokes_type_attr
	mov	ecx, DWORD PTR _web+104
	mov	edx, DWORD PTR _web+12
	sub	esp, 116				; 00000074H
	push	ebx
	push	esi
	mov	esi, DWORD PTR _v_info$[ebp]
	push	edi
	mov	edi, DWORD PTR _dymem
	test	eax, eax
	js	SHORT $LN34@stokes2d_a
	mov	ebx, DWORD PTR [esi]
	imul	eax, 240				; 000000f0H
	and	ebx, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [edx+ebx*4]
	add	eax, ecx
	mov	eax, DWORD PTR [eax+edi+64]
	mov	eax, DWORD PTR [ebx+eax]
	mov	DWORD PTR _stokes_type$[ebp], eax
	jmp	SHORT $LN35@stokes2d_a
$LN34@stokes2d_a:
	mov	DWORD PTR _stokes_type$[ebp], 0
$LN35@stokes2d_a:

; 1109 :   REAL * stokes_velocity = (stokes_velocity_attr >= 0) ?
; 1110 :       VREAL(v_info->id,stokes_velocity_attr) : NULL ;

	mov	eax, DWORD PTR _stokes_velocity_attr
	test	eax, eax
	js	SHORT $LN36@stokes2d_a
	mov	ebx, DWORD PTR [esi]
	imul	eax, 240				; 000000f0H
	and	ebx, 134217727				; 07ffffffH
	add	eax, ecx
	mov	ecx, DWORD PTR [edx+ebx*4]
	add	ecx, DWORD PTR [eax+edi+64]
	mov	DWORD PTR _stokes_velocity$[ebp], ecx
	jmp	SHORT $LN37@stokes2d_a
$LN36@stokes2d_a:
	mov	DWORD PTR _stokes_velocity$[ebp], 0
$LN37@stokes2d_a:

; 1111 :   REAL vgx,vgy,hinc;
; 1112 : 
; 1113 :   if ( stokes_type == STOKES_SLIPWALL )

	cmp	DWORD PTR _stokes_type$[ebp], 1
	jne	SHORT $LN31@stokes2d_a

; 1114 : 	  return 0;

	fldz
	pop	edi
	pop	esi
	pop	ebx

; 1217 :   if ( mode == METHOD_GRADIENT ) 
; 1218 :     return value;
; 1219 : 
; 1220 :   /* nothing more to do for hessian, so ... */
; 1221 :   return value;
; 1222 :  
; 1223 : } // end stokes2d_all()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN31@stokes2d_a:

; 1115 : 
; 1116 :   /* Calculate H as gradient of integral of square of gradient */
; 1117 :   maxn = v_info->flags & INCOMPLETE_STAR ? v_info->vcount-2 : v_info->vcount-1;

	test	BYTE PTR [esi+4], 1
	mov	eax, DWORD PTR [esi+12]
	je	SHORT $LN38@stokes2d_a
	sub	eax, 2
	jmp	SHORT $LN131@stokes2d_a
$LN38@stokes2d_a:
	dec	eax
$LN131@stokes2d_a:

; 1118 :   h = 0;

	fldz

; 1119 :   sumarea = 0;
; 1120 :   wedge = 0;
; 1121 :   for ( n = 0 ; n < maxn ; n++ )  /* nth facet contribution */

	xor	edi, edi
	fst	QWORD PTR _h$[ebp]
	mov	DWORD PTR _maxn$[ebp], eax
	fld	ST(0)
	fxch	ST(1)
	fst	QWORD PTR _wedge$[ebp]
	test	eax, eax
	jle	$LN63@stokes2d_a

; 1172 :       }
; 1173 : 	}
; 1174 : 	
; 1175 :     /* note that hessian of h is identically 0 */
; 1176 : 
; 1177 :     /* NOTE: for slipping boundary, h = 0 (not implemented yet) */
; 1178 :    }
; 1179 :   if ( sumarea == 0.0 ) 

	fstp	ST(0)

; 1119 :   sumarea = 0;
; 1120 :   wedge = 0;
; 1121 :   for ( n = 0 ; n < maxn ; n++ )  /* nth facet contribution */

	jmp	SHORT $LN30@stokes2d_a
$LL85@stokes2d_a:
	mov	eax, DWORD PTR _maxn$[ebp]
	fstp	ST(0)
	fld	QWORD PTR _sumarea$[ebp]
$LN30@stokes2d_a:

; 1122 :   { int nn = (n == maxn-1) ? (v_info->flags & INCOMPLETE_STAR ? n+1 : 0) : n+1;

	dec	eax
	cmp	edi, eax
	jne	SHORT $LN42@stokes2d_a
	test	BYTE PTR [esi+4], 1
	jne	SHORT $LN42@stokes2d_a
	xor	ebx, ebx
	jmp	SHORT $LN43@stokes2d_a
$LN42@stokes2d_a:
	lea	ebx, DWORD PTR [edi+1]
$LN43@stokes2d_a:

; 1123 :     x1 = v_info->sides[0][n][0];

	mov	ecx, DWORD PTR [esi+1276]
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+edi*4]
	fld	QWORD PTR [eax]
	fst	QWORD PTR _x1$[ebp]

; 1124 :     y1 = v_info->sides[0][n][1];

	fld	QWORD PTR [eax+8]
	fst	QWORD PTR _y1$[ebp]

; 1125 :     u1 = v_info->sides[0][n][2];

	fld	QWORD PTR [eax+16]

; 1126 :     x2 = v_info->sides[0][nn][0];

	mov	eax, DWORD PTR [ecx+ebx*4]
	fstp	QWORD PTR _u1$[ebp]
	fld	QWORD PTR [eax]
	fst	QWORD PTR _x2$[ebp]

; 1127 :     y2 = v_info->sides[0][nn][1];

	fld	QWORD PTR [eax+8]
	fst	QWORD PTR _y2$[ebp]

; 1128 :     u2 = v_info->sides[0][nn][2];

	fld	QWORD PTR [eax+16]
	fstp	QWORD PTR _u2$[ebp]

; 1129 :     det = x1*y2 - x2*y1;  

	fld	ST(0)
	fmul	ST(0), ST(4)
	fld	ST(2)
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _det$[ebp]

; 1130 :     sumarea += fabs(det)/2;

	fabs
	fst	QWORD PTR tv680[ebp]
	fmul	QWORD PTR __real@3fe0000000000000
	faddp	ST(5), ST(0)
	fxch	ST(4)
	fstp	QWORD PTR _sumarea$[ebp]

; 1131 :     wedge += acos((x1*x2+y1*y2)/sqrt((x1*x1+y1*y1)*(x2*x2+y2*y2)));

	fld	ST(3)
	fmul	ST(0), ST(2)
	fld	ST(1)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR tv1071[ebp]
	fld	ST(3)
	fmulp	ST(4), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(3), ST(0)
	fmul	ST(0), ST(0)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	call	__CIsqrt
	fdivr	QWORD PTR tv1071[ebp]
	call	__CIacos
	fadd	QWORD PTR _wedge$[ebp]
	fstp	QWORD PTR _wedge$[ebp]

; 1132 : /*  Not going to use the value, but the formula is here for easy reference.
; 1133 :     sqgradint = 
; 1134 :       1./2./fabs(det)*((y2*u1-y1*u2)*(y2*u1-y1*u2)+(x1*u2-x2*u1)*(x1*u2-x2*u1));
; 1135 : */
; 1136 :     /* h is derivative wrt u0 only, with extra half factor since Laplacian
; 1137 :        is half of gradient of Dirichlet energy */
; 1138 :     hinc =  
; 1139 :       1./4./fabs(det)*(2*(y2*u1-y1*u2)*(-y2+y1)+2*(x1*u2-x2*u1)*(-x1+x2));

	fld	QWORD PTR __real@3fd0000000000000
	fdiv	QWORD PTR tv680[ebp]
	fst	QWORD PTR tv700[ebp]
	fld	QWORD PTR _y2$[ebp]
	fld	ST(0)
	fld	QWORD PTR _u1$[ebp]
	fmul	ST(1), ST(0)
	fld	QWORD PTR _u2$[ebp]
	fld	ST(0)
	fld	QWORD PTR _y1$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(4)
	fsubrp	ST(1), ST(0)
	fst	QWORD PTR tv703[ebp]
	fxch	ST(3)
	fsubrp	ST(4), ST(0)
	fxch	ST(3)
	fst	QWORD PTR tv706[ebp]
	fld	QWORD PTR _x1$[ebp]
	fmul	ST(4), ST(0)
	fld	QWORD PTR _x2$[ebp]
	fld	ST(0)
	fmulp	ST(4), ST(0)
	fxch	ST(5)
	fsubrp	ST(3), ST(0)
	fxch	ST(2)
	fst	QWORD PTR tv711[ebp]
	fld	ST(4)
	fsubrp	ST(3), ST(0)
	fxch	ST(2)
	fst	QWORD PTR tv714[ebp]
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(3), ST(0)

; 1140 : 	h += hinc;
; 1141 :     if ( stokes_type == STOKES_NONSLIPWALL )

	cmp	DWORD PTR _stokes_type$[ebp], 2
	fxch	ST(3)
	fmul	ST(0), ST(1)
	fld	ST(4)
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(6)
	fadd	QWORD PTR _h$[ebp]
	fst	QWORD PTR _h$[ebp]
	jne	$LN74@stokes2d_a

; 1142 :     { if ( stokes_velocity == NULL )

	mov	eax, DWORD PTR _stokes_velocity$[ebp]

; 1154 : 	  h += hinc;

	fstp	ST(0)
	test	eax, eax
	jne	SHORT $LN56@stokes2d_a

; 1143 :         kb_error(3833,"stokes_nonslipwall needs stokes_velocity attribute.\n",
; 1144 :            RECOVERABLE);

	fstp	ST(2)
	push	1
	fstp	ST(4)
	push	OFFSET ??_C@_0DF@PDBDOHJH@stokes_nonslipwall?5needs?5stokes_@
	fstp	ST(3)
	push	3833					; 00000ef9H
	fstp	ST(2)
	fstp	ST(0)
	fstp	ST(0)
	call	_kb_error
	fld	QWORD PTR tv703[ebp]
	mov	eax, DWORD PTR _stokes_velocity$[ebp]
	fld	QWORD PTR tv700[ebp]
	add	esp, 12					; 0000000cH
	fld	QWORD PTR __real@4000000000000000
	fld	QWORD PTR _x2$[ebp]
	fld	QWORD PTR tv706[ebp]
	fld	QWORD PTR tv714[ebp]
	fxch	ST(4)
	fxch	ST(5)
	fxch	ST(2)
	fxch	ST(4)
	fxch	ST(2)
	fxch	ST(3)
	fxch	ST(2)
$LN56@stokes2d_a:

; 1145 :       /* contribution of virtual continuation across boundary, assuming
; 1146 :          boundary is a streamline.  Extended slope taken to be
; 1147 :          2*speed - slope */
; 1148 :       vgx = -2*stokes_velocity[1]*det - (y2*u1-y1*u2);

	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR __real@c000000000000000
	fmul	QWORD PTR _det$[ebp]
	fsubrp	ST(4), ST(0)

; 1149 :       vgy =  2*stokes_velocity[0]*det - (x1*u2-x2*u1);
; 1150 :       /* sqgradint just for reference here 
; 1151 :       sqgradint = 1./2./fabs(det)*(vgx*vgx + vgy*vgy);
; 1152 :       */
; 1153 :       hinc = 1./4./fabs(det)*(2*vgx*(y2-y1) + 2*vgy*(x1-x2));

	fxch	ST(3)
	fmul	ST(0), ST(2)
	fld	QWORD PTR _y2$[ebp]
	fsub	QWORD PTR _y1$[ebp]
	fmulp	ST(1), ST(0)
	fld	QWORD PTR [eax]
	fmul	ST(0), ST(3)
	fmul	QWORD PTR _det$[ebp]
	fsub	QWORD PTR tv711[ebp]
	fmul	ST(0), ST(3)
	fld	QWORD PTR _x1$[ebp]
	fsub	ST(0), ST(6)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(5)

; 1154 : 	  h += hinc;

	fadd	QWORD PTR _h$[ebp]
	fst	QWORD PTR _h$[ebp]
	fxch	ST(3)
$LN57@stokes2d_a:

; 1155 :     }
; 1156 :     if ( (mode == METHOD_GRADIENT) || (mode == METHOD_HESSIAN) )

	mov	eax, DWORD PTR _mode$[ebp]
	cmp	eax, 4321				; 000010e1H
	je	SHORT $LN24@stokes2d_a
	cmp	eax, 8763				; 0000223bH
	jne	$LN83@stokes2d_a
$LN24@stokes2d_a:

; 1157 :     { /* using grads to store grads of h */
; 1158 :       v_info->grad[0][2] +=
; 1159 :         1./4./fabs(det)*(2*(-y2+y1)*(-y2+y1)+2*(-x1+x2)*(-x1+x2));
; 1160 :       v_info->grad[n+1][2] += 
; 1161 :         1./4./fabs(det)*(2*(y2)*(-y2+y1)+2*(-x2)*(-x1+x2));
; 1162 :       v_info->grad[nn+1][2] += 
; 1163 :         1./4./fabs(det)*(2*(-y1)*(-y2+y1)+2*(x1)*(-x1+x2));
; 1164 :    
; 1165 :       if ( stokes_type == STOKES_NONSLIPWALL )

	cmp	DWORD PTR _stokes_type$[ebp], 2
	fld	ST(0)
	fmul	ST(0), ST(3)
	mov	edx, DWORD PTR [esi+1336]
	mov	eax, DWORD PTR [edx]
	mov	edx, eax
	fmul	ST(0), ST(1)
	fld	ST(2)
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(6)
	fld	QWORD PTR [eax+16]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx+16]
	mov	eax, DWORD PTR [esi+1336]
	mov	ecx, DWORD PTR [eax+edi*4+4]
	fxch	ST(5)
	fchs
	mov	eax, ecx
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(1)
	fld	QWORD PTR _y2$[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(6)
	fld	QWORD PTR [ecx+16]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax+16]
	mov	ecx, DWORD PTR [esi+1336]
	fld	QWORD PTR _y1$[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4+4]
	fchs
	mov	ecx, edx
	fmul	ST(0), ST(4)
	fmulp	ST(3), ST(0)
	fld	QWORD PTR _x1$[ebp]
	fmulp	ST(4), ST(0)
	fxch	ST(3)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fmulp	ST(4), ST(0)
	fld	QWORD PTR [edx+16]
	fadd	ST(0), ST(4)
	fstp	QWORD PTR [ecx+16]
	jne	SHORT $LN128@stokes2d_a

; 1166 :       { v_info->grad[0][2] +=
; 1167 :           1./4./fabs(det)*(2*(-y2+y1)*(-y2+y1)+2*(-x1+x2)*(-x1+x2));

	mov	edx, DWORD PTR [esi+1336]
	mov	eax, DWORD PTR [edx]
	fld	QWORD PTR [eax+16]
	mov	edx, eax
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR [edx+16]

; 1168 :         v_info->grad[n+1][2] += 
; 1169 :           1./4./fabs(det)*(2*(y2)*(-y2+y1)+2*(-x2)*(-x1+x2));

	mov	eax, DWORD PTR [esi+1336]
	mov	ecx, DWORD PTR [eax+edi*4+4]
	fld	QWORD PTR [ecx+16]
	mov	eax, ecx
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax+16]

; 1170 :         v_info->grad[nn+1][2] += 
; 1171 :           1./4./fabs(det)*(2*(-y1)*(-y2+y1)+2*(x1)*(-x1+x2));

	mov	ecx, DWORD PTR [esi+1336]
	mov	edx, DWORD PTR [ecx+ebx*4+4]
	fld	QWORD PTR [edx+16]
	mov	ecx, edx
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [ecx+16]
	jmp	SHORT $LN29@stokes2d_a
$LN74@stokes2d_a:

; 1154 : 	  h += hinc;

	fstp	ST(4)

; 1140 : 	h += hinc;
; 1141 :     if ( stokes_type == STOKES_NONSLIPWALL )

	jmp	$LN57@stokes2d_a
$LN83@stokes2d_a:

; 1170 :         v_info->grad[nn+1][2] += 
; 1171 :           1./4./fabs(det)*(2*(-y1)*(-y2+y1)+2*(x1)*(-x1+x2));

	fstp	ST(2)
	fstp	ST(4)
$LN128@stokes2d_a:

; 1157 :     { /* using grads to store grads of h */
; 1158 :       v_info->grad[0][2] +=
; 1159 :         1./4./fabs(det)*(2*(-y2+y1)*(-y2+y1)+2*(-x1+x2)*(-x1+x2));
; 1160 :       v_info->grad[n+1][2] += 
; 1161 :         1./4./fabs(det)*(2*(y2)*(-y2+y1)+2*(-x2)*(-x1+x2));
; 1162 :       v_info->grad[nn+1][2] += 
; 1163 :         1./4./fabs(det)*(2*(-y1)*(-y2+y1)+2*(x1)*(-x1+x2));
; 1164 :    
; 1165 :       if ( stokes_type == STOKES_NONSLIPWALL )

	fstp	ST(3)
	fstp	ST(2)
	fstp	ST(0)
$LN29@stokes2d_a:

; 1119 :   sumarea = 0;
; 1120 :   wedge = 0;
; 1121 :   for ( n = 0 ; n < maxn ; n++ )  /* nth facet contribution */

	inc	edi
	cmp	edi, DWORD PTR _maxn$[ebp]
	jl	$LL85@stokes2d_a

; 1172 :       }
; 1173 : 	}
; 1174 : 	
; 1175 :     /* note that hessian of h is identically 0 */
; 1176 : 
; 1177 :     /* NOTE: for slipping boundary, h = 0 (not implemented yet) */
; 1178 :    }
; 1179 :   if ( sumarea == 0.0 ) 

	fld	QWORD PTR _sumarea$[ebp]
	fld	ST(0)
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H

; 1180 :      return 0.0;  /* nothing there */

	jnp	$LN132@stokes2d_a

; 1181 : 
; 1182 :   if ( stokes_type == STOKES_NONSLIPWALL )

	cmp	DWORD PTR _stokes_type$[ebp], 2
	fstp	ST(0)

; 1184 : 	if ( (mode == METHOD_GRADIENT) || (mode == METHOD_HESSIAN) )

	mov	edx, DWORD PTR _mode$[ebp]
	jne	SHORT $LN16@stokes2d_a

; 1183 :   { h /= 2;

	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(2), ST(0)

; 1184 : 	if ( (mode == METHOD_GRADIENT) || (mode == METHOD_HESSIAN) )

	cmp	edx, 4321				; 000010e1H
	je	SHORT $LN59@stokes2d_a
	cmp	edx, 8763				; 0000223bH
	jne	SHORT $LN123@stokes2d_a
$LN59@stokes2d_a:

; 1185 : 	  for ( n = 0 ; n < v_info->vcount ; n++ )

	xor	eax, eax
	cmp	DWORD PTR [esi+12], eax
	jle	SHORT $LN123@stokes2d_a
$LN18@stokes2d_a:

; 1186 : 	    v_info->grad[n][2] /=2;

	mov	ecx, DWORD PTR [esi+1336]
	mov	ecx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [ecx+16]
	inc	eax
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [ecx+16]
	cmp	eax, DWORD PTR [esi+12]
	jl	SHORT $LN18@stokes2d_a
$LN123@stokes2d_a:

; 1185 : 	  for ( n = 0 ; n < v_info->vcount ; n++ )

	fstp	ST(0)
$LN16@stokes2d_a:

; 1187 :   }
; 1188 : 
; 1189 :   /* Kludge to try to get the Laplacian to come out more even on the bdry */
; 1190 :   if ( get_vattr(v_info->id) & FIXED )

	mov	eax, DWORD PTR [esi]
	fld	QWORD PTR __real@4008000000000000
	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 64					; 00000040H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN14@stokes2d_a

; 1191 :   { 
; 1192 :     if ( wedge < 3.3 ) /* boundary point */

	fld	QWORD PTR __real@400a666666666666
	fld	QWORD PTR _wedge$[ebp]
	fcom	ST(1)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 5
	jp	SHORT $LN101@stokes2d_a

; 1193 :     {  sumarea *= 3./maxn*wedge/M_PI;

	fild	DWORD PTR _maxn$[ebp]
	fdivr	ST(0), ST(2)
	fmulp	ST(1), ST(0)
	fdiv	QWORD PTR __real@400921fb54442d18
	fmulp	ST(2), ST(0)
	jmp	SHORT $LN14@stokes2d_a
$LN101@stokes2d_a:

; 1191 :   { 
; 1192 :     if ( wedge < 3.3 ) /* boundary point */

	fstp	ST(0)
$LN14@stokes2d_a:

; 1194 :     }
; 1195 :   }
; 1196 : 
; 1197 :   /* normalize over area */
; 1198 :   H = h/(sumarea/3);

	fld	ST(1)
	fdiv	ST(0), ST(1)
	fdivr	ST(0), ST(3)

; 1199 :   if ( mode == STOKES_LAPLACIAN )

	cmp	edx, 74807095				; 04757737H
	jne	SHORT $LN13@stokes2d_a
	fstp	ST(2)
	pop	edi
	fstp	ST(0)
	pop	esi
	fstp	ST(1)
	pop	ebx

; 1217 :   if ( mode == METHOD_GRADIENT ) 
; 1218 :     return value;
; 1219 : 
; 1220 :   /* nothing more to do for hessian, so ... */
; 1221 :   return value;
; 1222 :  
; 1223 : } // end stokes2d_all()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@stokes2d_a:

; 1200 :     return H;
; 1201 : 
; 1202 :   /* integral of H^2 */
; 1203 :   value = H*H*sumarea/3;  /* or value = h*h*3/sumarea */

	fmul	ST(0), ST(0)
	fmul	ST(0), ST(2)
	fdivrp	ST(1), ST(0)

; 1204 :   if ( mode == METHOD_VALUE ) 

	cmp	edx, 1767				; 000006e7H

; 1205 :     return value;

	je	$LN132@stokes2d_a

; 1206 : 
; 1207 :   if ( mode == METHOD_HESSIAN )

	fld	QWORD PTR __real@4018000000000000
	cmp	edx, 8763				; 0000223bH
	jne	SHORT $LN8@stokes2d_a

; 1208 :   { /* use h gradients while we still have them */
; 1209 :     for ( n = 0 ; n < v_info->vcount ; n++ )

	mov	ecx, DWORD PTR [esi+12]
	xor	edx, edx
	test	ecx, ecx
	jle	SHORT $LN8@stokes2d_a
$LN10@stokes2d_a:

; 1210 :       for ( nn = 0 ; nn < v_info->vcount ; nn++ )

	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN9@stokes2d_a
	fld	ST(0)
	fdiv	ST(0), ST(3)
$LN7@stokes2d_a:

; 1211 :         v_info->hess[n][nn][2][2] = 
; 1212 :              6/sumarea*v_info->grad[n][2]*v_info->grad[nn][2];

	mov	ecx, DWORD PTR [esi+1336]
	mov	edi, DWORD PTR [ecx+edx*4]
	fld	QWORD PTR [edi+16]
	mov	ecx, DWORD PTR [ecx+eax*4]
	fmul	ST(0), ST(1)
	inc	eax
	fmul	QWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [esi+1340]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [ecx+eax*4-4]
	mov	ecx, DWORD PTR [ecx+8]
	fstp	QWORD PTR [ecx+16]
	cmp	eax, DWORD PTR [esi+12]
	jl	SHORT $LN7@stokes2d_a

; 1210 :       for ( nn = 0 ; nn < v_info->vcount ; nn++ )

	fstp	ST(0)
$LN9@stokes2d_a:

; 1208 :   { /* use h gradients while we still have them */
; 1209 :     for ( n = 0 ; n < v_info->vcount ; n++ )

	mov	ecx, DWORD PTR [esi+12]
	inc	edx
	cmp	edx, ecx
	jl	SHORT $LN10@stokes2d_a
$LN8@stokes2d_a:

; 1213 :   }
; 1214 : 
; 1215 :   for ( n = 0 ; n < v_info->vcount ; n++ )

	xor	eax, eax
	cmp	DWORD PTR [esi+12], eax
	jle	SHORT $LN119@stokes2d_a
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fdivrp	ST(1), ST(0)
$LN4@stokes2d_a:

; 1216 :     v_info->grad[n][2] *= 6*h/sumarea;

	mov	edx, DWORD PTR [esi+1336]
	fld	ST(0)
	mov	ecx, DWORD PTR [edx+eax*4]
	fmul	QWORD PTR [ecx+16]
	inc	eax
	fstp	QWORD PTR [ecx+16]
	cmp	eax, DWORD PTR [esi+12]
	jl	SHORT $LN4@stokes2d_a

; 1213 :   }
; 1214 : 
; 1215 :   for ( n = 0 ; n < v_info->vcount ; n++ )

	pop	edi
	fstp	ST(0)
	pop	esi
	pop	ebx

; 1217 :   if ( mode == METHOD_GRADIENT ) 
; 1218 :     return value;
; 1219 : 
; 1220 :   /* nothing more to do for hessian, so ... */
; 1221 :   return value;
; 1222 :  
; 1223 : } // end stokes2d_all()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN119@stokes2d_a:

; 1213 :   }
; 1214 : 
; 1215 :   for ( n = 0 ; n < v_info->vcount ; n++ )

	fstp	ST(2)
$LN132@stokes2d_a:
	fstp	ST(1)
$LN63@stokes2d_a:
	pop	edi
	fstp	ST(1)
	pop	esi
	pop	ebx

; 1217 :   if ( mode == METHOD_GRADIENT ) 
; 1218 :     return value;
; 1219 : 
; 1220 :   /* nothing more to do for hessian, so ... */
; 1221 :   return value;
; 1222 :  
; 1223 : } // end stokes2d_all()

	mov	esp, ebp
	pop	ebp
	ret	0
_stokes2d_all ENDP
_TEXT	ENDS
PUBLIC	_stokes2d_value
; Function compile flags: /Ogtp
;	COMDAT _stokes2d_value
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_stokes2d_value PROC					; COMDAT

; 1233 : { return stokes2d_all(v_info,METHOD_VALUE);

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v_info$[ebp]
	push	1767					; 000006e7H
	push	eax
	call	_stokes2d_all
	add	esp, 8

; 1234 : }

	pop	ebp
	ret	0
_stokes2d_value ENDP
_TEXT	ENDS
PUBLIC	_stokes2d_grad
; Function compile flags: /Ogtp
;	COMDAT _stokes2d_grad
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_stokes2d_grad PROC					; COMDAT

; 1238 : { return stokes2d_all(v_info,METHOD_GRADIENT);

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v_info$[ebp]
	push	4321					; 000010e1H
	push	eax
	call	_stokes2d_all
	add	esp, 8

; 1239 : }

	pop	ebp
	ret	0
_stokes2d_grad ENDP
_TEXT	ENDS
PUBLIC	_stokes2d_hess
; Function compile flags: /Ogtp
;	COMDAT _stokes2d_hess
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_stokes2d_hess PROC					; COMDAT

; 1243 : { return stokes2d_all(v_info,METHOD_HESSIAN);

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v_info$[ebp]
	push	8763					; 0000223bH
	push	eax
	call	_stokes2d_all
	add	esp, 8

; 1244 : }

	pop	ebp
	ret	0
_stokes2d_hess ENDP
_TEXT	ENDS
PUBLIC	_stokes2d_laplacian
; Function compile flags: /Ogtp
;	COMDAT _stokes2d_laplacian
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_stokes2d_laplacian PROC				; COMDAT

; 1248 : { return stokes2d_all(v_info,STOKES_LAPLACIAN);

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v_info$[ebp]
	push	74807095				; 04757737H
	push	eax
	call	_stokes2d_all
	add	esp, 8

; 1249 : }

	pop	ebp
	ret	0
_stokes2d_laplacian ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_sqcurve_energy_end
EXTRN	_temp_free:PROC
EXTRN	_triple_prod:PROC
EXTRN	_binary_tree_add:PROC
; Function compile flags: /Ogtp
;	COMDAT _sqcurve_energy_end
_TEXT	SEGMENT
_norm$89275 = -148					; size = 12
_denom$ = -136						; size = 8
_modulus$ = -136					; size = 8
tv474 = -128						; size = 4
_energy$ = -124						; size = 8
tv551 = -116						; size = 8
tv651 = -112						; size = 4
_h$89279 = -108						; size = 8
_i$89278 = -104						; size = 4
_side$89276 = -100					; size = 72
_normal$89277 = -28					; size = 24
__$ArrayPad$ = -4					; size = 4
_sqcurve_energy_end PROC				; COMDAT

; 309  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 310  :   vertex_id v_id;
; 311  :   REAL modulus = globals(square_curvature_param)->value.real;

	mov	eax, DWORD PTR _square_curvature_param
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN21@sqcurve_en@5
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN23@sqcurve_en@5
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN22@sqcurve_en@5
$LN23@sqcurve_en@5:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN21@sqcurve_en@5
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN22@sqcurve_en@5
$LN21@sqcurve_en@5:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN22@sqcurve_en@5:

; 312  :   REAL energy = 0.0;
; 313  :   REAL denom;
; 314  :   facet_id f_id;
; 315  : 
; 316  :   if ( web.representation == STRING )

	cmp	DWORD PTR _web+624, 1
	fld	QWORD PTR [eax+64]
	fstp	QWORD PTR _modulus$[ebp]
	fldz
	fst	QWORD PTR _energy$[ebp]
	jne	SHORT $LN18@sqcurve_en@5
	fstp	ST(0)

; 317  :   { binary_tree_add(web.total_energy_addends,total_sqcurve);

	sub	esp, 8
	fld	QWORD PTR _total_sqcurve
	fstp	QWORD PTR [esp]
	push	OFFSET _web+1248
	call	_binary_tree_add
	add	esp, 12					; 0000000cH

; 358  :   v_curve = NULL;
; 359  : } // end sqcurve_energy_end()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@sqcurve_en@5:

; 318  :     return; /* rest not needed for string */
; 319  :   }
; 320  :  
; 321  :   if ( div_normal_curvature_flag )

	cmp	DWORD PTR _div_normal_curvature_flag, 0
	push	ebx
	push	esi
	push	edi
	je	$LN17@sqcurve_en@5

; 322  :   { FOR_ALL_FACETS(f_id)

	mov	edx, DWORD PTR _web+272
	mov	esi, edx
	shr	esi, 28					; 0000001cH
	and	esi, 1
	je	$LN14@sqcurve_en@5
	mov	ebx, DWORD PTR _web+236
$LN16@sqcurve_en@5:
	mov	ecx, edx
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	eax, DWORD PTR [ecx+ebx]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	mov	DWORD PTR tv474[ebp], ecx
	je	$LN15@sqcurve_en@5
	fstp	ST(0)

; 323  :     { REAL *norm[3];  /* vertex normals */
; 324  :       REAL side[3][3]; /* facet sides */
; 325  :       REAL normal[3];  /* facet normal */
; 326  :       int i;
; 327  :       REAL h;
; 328  :       facetedge_id fe;
; 329  : 
; 330  :       for ( i = 0, fe = get_facet_fe(f_id) ; i < 3 ; i++ )

	mov	DWORD PTR _i$89278[ebp], edi
	cmp	esi, edi
	je	SHORT $LN31@sqcurve_en@5
	mov	ecx, DWORD PTR [ecx+ebx]
	mov	edi, DWORD PTR [ecx+28]
	test	edx, 134217728				; 08000000H
	je	SHORT $LN31@sqcurve_en@5
	xor	edi, 134217728				; 08000000H
$LN31@sqcurve_en@5:

; 331  :         { v_id = get_fe_tailv(fe);

	mov	eax, DWORD PTR _web+460
	lea	edx, DWORD PTR _side$89276[ebp]
	mov	DWORD PTR tv651[ebp], edx
	npad	9
$LL59@sqcurve_en@5:
	mov	ebx, DWORD PTR _dymem
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [eax+20]
	mov	ecx, edi
	and	ecx, 134217728				; 08000000H
	xor	eax, ecx
	mov	ecx, DWORD PTR _web+124
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _web+216
	test	eax, 134217728				; 08000000H
	je	SHORT $LN38@sqcurve_en@5
	add	edx, DWORD PTR [ecx+ebx+304]
	mov	ecx, DWORD PTR _web+636
	mov	ebx, DWORD PTR [edx+ecx*4]
	jmp	SHORT $LN37@sqcurve_en@5
$LN38@sqcurve_en@5:
	mov	ecx, DWORD PTR [ecx+ebx+304]
	mov	ebx, DWORD PTR [edx+ecx]
$LN37@sqcurve_en@5:

; 332  :           get_fe_side(fe,side[i]);

	mov	edx, DWORD PTR tv651[ebp]
	push	edx
	push	eax
	call	_get_edge_side
	add	esp, 8

; 333  :           norm[i] = v_curve[loc_ordinal(v_id)].normal;

	test	ebx, 268435456				; 10000000H
	je	SHORT $LN27@sqcurve_en@5
	and	ebx, 134217727				; 07ffffffH
	jmp	SHORT $LN28@sqcurve_en@5
$LN27@sqcurve_en@5:
	or	ebx, -1
$LN28@sqcurve_en@5:
	mov	eax, DWORD PTR _v_curve
	imul	ebx, 544				; 00000220H
	mov	ecx, DWORD PTR _i$89278[ebp]
	lea	edx, DWORD PTR [ebx+eax+416]

; 334  :           fe = get_next_edge(fe);

	mov	eax, DWORD PTR _web+460
	mov	DWORD PTR _norm$89275[ebp+ecx*4], edx
	mov	edx, DWORD PTR [esi+eax]
	test	edi, 134217728				; 08000000H
	je	SHORT $LN44@sqcurve_en@5
	mov	edi, DWORD PTR [edx+28]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN10@sqcurve_en@5
$LN44@sqcurve_en@5:
	mov	edi, DWORD PTR [edx+32]
$LN10@sqcurve_en@5:

; 323  :     { REAL *norm[3];  /* vertex normals */
; 324  :       REAL side[3][3]; /* facet sides */
; 325  :       REAL normal[3];  /* facet normal */
; 326  :       int i;
; 327  :       REAL h;
; 328  :       facetedge_id fe;
; 329  : 
; 330  :       for ( i = 0, fe = get_facet_fe(f_id) ; i < 3 ; i++ )

	add	DWORD PTR tv651[ebp], 24		; 00000018H
	inc	ecx
	mov	DWORD PTR _i$89278[ebp], ecx
	cmp	ecx, 3
	jl	$LL59@sqcurve_en@5

; 335  :         }
; 336  :       cross_prod(side[0],side[1],normal);      

	lea	eax, DWORD PTR _normal$89277[ebp]
	push	eax
	lea	ecx, DWORD PTR _side$89276[ebp+24]
	push	ecx
	lea	edx, DWORD PTR _side$89276[ebp]
	push	edx
	call	_cross_prod

; 337  :       denom = dot(normal,normal,3);

	lea	eax, DWORD PTR _normal$89277[ebp]
	push	3
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fstp	QWORD PTR _denom$[ebp]

; 338  :       for ( i = 0, h = 0.0 ; i < 3 ; i++ )

	fldz
	add	esp, 24					; 00000018H
	fstp	QWORD PTR _h$89279[ebp]
	xor	eax, eax
	jmp	SHORT $LN8@sqcurve_en@5
	npad	8
$LL84@sqcurve_en@5:
	fstp	ST(0)
$LN8@sqcurve_en@5:

; 339  :          h += triple_prod(normal,side[(i+1)%3],norm[i])/
; 340  :                   sqrt(dot(norm[i],norm[i],3))/denom;

	mov	esi, DWORD PTR _norm$89275[ebp+eax*4]
	lea	edi, DWORD PTR [eax+1]
	mov	eax, edi
	cdq
	mov	ecx, 3
	idiv	ecx
	push	esi
	lea	ecx, DWORD PTR _normal$89277[ebp]
	lea	edx, DWORD PTR [edx+edx*2]
	lea	eax, DWORD PTR _side$89276[ebp+edx*8]
	push	eax
	push	ecx
	call	_triple_prod
	fstp	QWORD PTR tv551[ebp]
	push	3
	push	esi
	push	esi
	call	_dot
	add	esp, 24					; 00000018H
	call	__CIsqrt
	fdivr	QWORD PTR tv551[ebp]
	mov	eax, edi
	fld	QWORD PTR _denom$[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR _h$89279[ebp]
	fstp	QWORD PTR _h$89279[ebp]
	cmp	eax, 3
	jl	SHORT $LL84@sqcurve_en@5

; 341  :       energy += h*h*sqrt(denom)/2;

	call	__CIsqrt
	fld	QWORD PTR _h$89279[ebp]
	mov	ebx, DWORD PTR _web+236
	fmul	ST(0), ST(0)
	mov	ecx, DWORD PTR tv474[ebp]
	fmulp	ST(1), ST(0)
	fmul	QWORD PTR __real@3fe0000000000000
	fadd	QWORD PTR _energy$[ebp]
	fst	QWORD PTR _energy$[ebp]
$LN15@sqcurve_en@5:

; 322  :   { FOR_ALL_FACETS(f_id)

	mov	edx, DWORD PTR [ecx+ebx]
	mov	edx, DWORD PTR [edx]
	mov	esi, edx
	shr	esi, 28					; 0000001cH
	and	esi, 1
	jne	$LN16@sqcurve_en@5
$LN14@sqcurve_en@5:

; 342  :     }
; 343  :     binary_tree_add(web.total_energy_addends,energy/4);/* mean factor */

	fmul	QWORD PTR __real@3fd0000000000000
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET _web+1248
	call	_binary_tree_add
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebx

; 358  :   v_curve = NULL;
; 359  : } // end sqcurve_energy_end()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN17@sqcurve_en@5:

; 344  :     return;
; 345  :   }
; 346  : 
; 347  :   FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR _web+48
	mov	edi, ecx
	shr	edi, 28					; 0000001cH
	and	edi, 1
	je	SHORT $LN3@sqcurve_en@5
	mov	ebx, DWORD PTR _web+12
$LN5@sqcurve_en@5:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+esi*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN4@sqcurve_en@5

; 348  :   { REAL venergy = vertex_sq_mean_curvature(v_id);

	push	ecx
	fstp	ST(0)
	call	_vertex_sq_mean_curvature
	add	esp, 4

; 349  :     int ordv = loc_ordinal(v_id);

	test	edi, edi
	je	SHORT $LN29@sqcurve_en@5
	mov	eax, esi
	jmp	SHORT $LN30@sqcurve_en@5
$LN29@sqcurve_en@5:
	or	eax, -1
$LN30@sqcurve_en@5:

; 350  :     struct v_curve_t *vc = v_curve + ordv;
; 351  : 
; 352  :     energy += venergy*vc->a/3;

	mov	ecx, DWORD PTR _v_curve
	imul	eax, 544				; 00000220H
	mov	ebx, DWORD PTR _web+12
	fmul	QWORD PTR [eax+ecx+8]
	fdiv	QWORD PTR __real@4008000000000000
	fadd	QWORD PTR _energy$[ebp]
	fst	QWORD PTR _energy$[ebp]
$LN4@sqcurve_en@5:

; 344  :     return;
; 345  :   }
; 346  : 
; 347  :   FOR_ALL_VERTICES(v_id)

	mov	edx, DWORD PTR [ebx+esi*4]
	mov	ecx, DWORD PTR [edx]
	mov	edi, ecx
	shr	edi, 28					; 0000001cH
	and	edi, 1
	jne	SHORT $LN5@sqcurve_en@5
$LN3@sqcurve_en@5:

; 353  : 
; 354  :   }
; 355  :   binary_tree_add(web.total_energy_addends,modulus*energy);

	fmul	QWORD PTR _modulus$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET _web+1248
	call	_binary_tree_add

; 356  : 
; 357  :   temp_free((char*)v_curve);

	mov	eax, DWORD PTR _v_curve
	push	eax
	call	_temp_free

; 358  :   v_curve = NULL;
; 359  : } // end sqcurve_energy_end()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	xor	ecx, ebp
	mov	DWORD PTR _v_curve, 0
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_sqcurve_energy_end ENDP
_TEXT	ENDS
PUBLIC	__real@bff5555555555555
PUBLIC	__real@3ff5555555555555
PUBLIC	__real@4032000000000000
PUBLIC	__real@4010000000000000
PUBLIC	??_C@_0DF@BEBOABHA@Force?5not?5implemented?5yet?5for?5di@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_sqcurve_force_end
EXTRN	_assume_oriented_flag:DWORD
;	COMDAT __real@bff5555555555555
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@bff5555555555555 DQ 0bff5555555555555r	; -1.33333
CONST	ENDS
;	COMDAT __real@3ff5555555555555
CONST	SEGMENT
__real@3ff5555555555555 DQ 03ff5555555555555r	; 1.33333
CONST	ENDS
;	COMDAT __real@4032000000000000
CONST	SEGMENT
__real@4032000000000000 DQ 04032000000000000r	; 18
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT ??_C@_0DF@BEBOABHA@Force?5not?5implemented?5yet?5for?5di@
CONST	SEGMENT
??_C@_0DF@BEBOABHA@Force?5not?5implemented?5yet?5for?5di@ DB 'Force not i'
	DB	'mplemented yet for div_normal_curvature.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\sqcurve.c
CONST	ENDS
;	COMDAT _sqcurve_force_end
_TEXT	SEGMENT
_fudge23$ = -740					; size = 8
_fudge21$ = -732					; size = 8
_fudge12$ = -724					; size = 8
_fudge22$ = -716					; size = 8
_fudge11$ = -708					; size = 8
_fudge13$ = -700					; size = 8
_area$ = -692						; size = 8
tv6001 = -688						; size = 4
_denom2$89605 = -684					; size = 8
_attr$89444 = -684					; size = 8
_h0_val$89447 = -676					; size = 8
_force1$89591 = -672					; size = 4
_modulus$ = -668					; size = 8
tv395 = -660						; size = 8
tv354 = -660						; size = 8
_force2$89596 = -656					; size = 4
_fudge3$ = -652						; size = 8
tv6008 = -648						; size = 4
tv5664 = -644						; size = 8
tv5824 = -640						; size = 4
_fe_b$89692 = -640					; size = 4
_fe_a$89619 = -640					; size = 4
tv20691 = -636						; size = 8
tv6509 = -636						; size = 8
tv5873 = -636						; size = 8
_denom1$89604 = -636					; size = 8
_fudge1$ = -636						; size = 8
_h$ = -636						; size = 8
_denom$ = -636						; size = 8
tv5862 = -628						; size = 8
_e1$ = -628						; size = 8
_fudge2$ = -628						; size = 8
_e$ = -628						; size = 8
_e2$ = -620						; size = 8
_a$ = -620						; size = 8
tv21382 = -612						; size = 8
tv21359 = -612						; size = 8
tv14642 = -608						; size = 4
tv13037 = -608						; size = 4
tv8692 = -608						; size = 4
tv8059 = -608						; size = 4
_fe_b$89620 = -608					; size = 4
tv5961 = -604						; size = 4
tv5657 = -604						; size = 4
tv14647 = -600						; size = 4
tv6068 = -600						; size = 4
_e_id$ = -600						; size = 4
_v_id$ = -600						; size = 4
_ec$89582 = -596					; size = 4
_force$89436 = -596					; size = 4
_vc2$89588 = -592					; size = 4
tv8743 = -588						; size = 4
tv8694 = -588						; size = 4
tv8601 = -588						; size = 4
tv8521 = -588						; size = 4
tv8430 = -588						; size = 4
tv8357 = -588						; size = 4
tv5972 = -588						; size = 4
_vc1$89585 = -584					; size = 4
_i$ = -584						; size = 4
_aw$89610 = -580					; size = 48
_simd$89546 = -580					; size = 48
_aread$89547 = -580					; size = 48
_vw$89611 = -532					; size = 48
_fd$89545 = -532					; size = 48
_s0$89606 = -484					; size = 48
_ad$89822 = -436					; size = 48
_ad$89761 = -436					; size = 48
_sa$89693 = -436					; size = 48
_sb$89622 = -436					; size = 48
_perp$89479 = -436					; size = 48
_fd$89821 = -388					; size = 48
_fd$89760 = -388					; size = 48
_sb$89694 = -388					; size = 48
_sa$89621 = -388					; size = 48
_wa$89607 = -340					; size = 48
_w$89609 = -292						; size = 48
_wb$89608 = -244					; size = 48
_ad$89446 = -244					; size = 48
_f$ = -196						; size = 48
_s$89601 = -148						; size = 48
_cross2$89603 = -100					; size = 48
_cross1$89602 = -52					; size = 48
_con$89478 = -32					; size = 28
__$ArrayPad$ = -4					; size = 4
_sqcurve_force_end PROC					; COMDAT

; 463  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 740				; 000002e4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 464  :   vertex_id v_id;
; 465  :   edge_id e_id;
; 466  :   int i,j;
; 467  :   REAL modulus = globals(square_curvature_param)->value.real;

	mov	eax, DWORD PTR _square_curvature_param
	mov	edx, DWORD PTR _dymem
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN287@sqcurve_fo@4
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN289@sqcurve_fo@4
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN288@sqcurve_fo@4
$LN289@sqcurve_fo@4:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN287@sqcurve_fo@4
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN288@sqcurve_fo@4
$LN287@sqcurve_fo@4:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+edx]
$LN288@sqcurve_fo@4:

; 468  :   REAL e,e1,e2,denom;
; 469  :   REAL f[MAXCOORD];
; 470  :   REAL fudge1,fudge2,fudge3; /* combinations of values */
; 471  :   REAL fudge11=0.0,fudge12=0.0,fudge13=0.0; /* combinations of values */
; 472  :   REAL fudge21=0.0,fudge22=0.0,fudge23=0.0; /* combinations of values */
; 473  :   REAL h; /* curvature */
; 474  :   REAL area; /* curvature normalization area */
; 475  :   REAL a;     /* integral area allocation */
; 476  : 
; 477  :   if ( div_normal_curvature_flag ) 

	cmp	DWORD PTR _div_normal_curvature_flag, 0
	fld	QWORD PTR [eax+64]
	fstp	QWORD PTR _modulus$[ebp]
	fldz
	fst	QWORD PTR _fudge11$[ebp]
	fst	QWORD PTR _fudge12$[ebp]
	fst	QWORD PTR _fudge13$[ebp]
	fst	QWORD PTR _fudge21$[ebp]
	fst	QWORD PTR _fudge22$[ebp]
	fstp	QWORD PTR _fudge23$[ebp]
	je	SHORT $LN284@sqcurve_fo@4

; 478  :       kb_error(1646,"Force not implemented yet for div_normal_curvature.\n",
; 479  :          RECOVERABLE );

	push	1
	push	OFFSET ??_C@_0DF@BEBOABHA@Force?5not?5implemented?5yet?5for?5di@
	push	1646					; 0000066eH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN284@sqcurve_fo@4:

; 480  : 
; 481  :   if ( web.representation != SOAPFILM )

	cmp	DWORD PTR _web+624, 2
	jne	$LN285@sqcurve_fo@4

; 482  :   { sqcurve_force_string_end();
; 483  :     return;
; 484  :   }
; 485  : 
; 486  :   FOR_ALL_VERTICES(v_id)

	mov	eax, DWORD PTR _web+48
	fld	QWORD PTR __real@4008000000000000
	mov	edx, DWORD PTR _web+616
	push	ebx
	mov	ecx, eax
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	push	esi
	push	edi
	mov	DWORD PTR _v_id$[ebp], eax
	je	$LN688@sqcurve_fo@4
	jmp	SHORT $LN282@sqcurve_fo@4
$LN677@sqcurve_fo@4:
	mov	eax, DWORD PTR _v_id$[ebp]
$LN282@sqcurve_fo@4:
	mov	esi, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+eax*4]
	mov	edi, DWORD PTR [esi+8]
	mov	DWORD PTR tv5657[ebp], eax
	mov	eax, DWORD PTR [esi+12]
	mov	DWORD PTR tv5664[ebp+4], eax
	mov	eax, edi
	and	eax, 1
	xor	ebx, ebx
	or	eax, ebx
	je	$LN281@sqcurve_fo@4

; 487  :   { REAL *force = get_force(v_id);

	mov	eax, DWORD PTR _dymem
	mov	ebx, DWORD PTR _web+104
	mov	ebx, DWORD PTR [ebx+eax+784]
	add	ebx, esi
	mov	DWORD PTR _force$89436[ebp], ebx

; 488  :     struct v_curve_t *vc = v_curve + loc_ordinal(v_id);

	test	ecx, ecx
	je	SHORT $LN293@sqcurve_fo@4
	mov	ebx, DWORD PTR tv5657[ebp]
	jmp	SHORT $LN294@sqcurve_fo@4
$LN293@sqcurve_fo@4:
	or	ebx, -1
$LN294@sqcurve_fo@4:

; 489  :     ATTR attr = get_vattr(v_id);

	mov	ecx, DWORD PTR tv5664[ebp+4]

; 490  :     REAL  ad[MAXCOORD];
; 491  :     REAL h0_val=0.0;

	fldz
	imul	ebx, 544				; 00000220H
	fst	QWORD PTR _h0_val$89447[ebp]
	add	ebx, DWORD PTR _v_curve
	mov	DWORD PTR _attr$89444[ebp+4], ecx

; 492  : 
; 493  :     switch ( h0_flag )

	mov	ecx, DWORD PTR _h0_flag
	dec	ecx
	mov	DWORD PTR _attr$89444[ebp], edi
	je	SHORT $LN275@sqcurve_fo@4
	dec	ecx
	jne	SHORT $LN276@sqcurve_fo@4

; 495  :       case H0_IN_ATTR:   h0_val = *VREAL(v_id,h0_attr); break;

	mov	ecx, DWORD PTR _h0_attr
	imul	ecx, 240				; 000000f0H
	add	ecx, DWORD PTR _web+104
	mov	eax, DWORD PTR [ecx+eax+64]
	fld	QWORD PTR [esi+eax]
	jmp	SHORT $LN1062@sqcurve_fo@4
$LN275@sqcurve_fo@4:

; 494  :     { case H0_IN_GLOBAL: h0_val = h0_value; break;

	fld	QWORD PTR _h0_value
$LN1062@sqcurve_fo@4:
	fstp	QWORD PTR _h0_val$89447[ebp]
$LN276@sqcurve_fo@4:

; 496  :     }
; 497  : 
; 498  :     if ( (attr & (FIXED|BOUNDARY))  ) continue;

	mov	eax, edi
	and	eax, 192				; 000000c0H
	xor	ecx, ecx
	or	eax, ecx
	jne	$LN793@sqcurve_fo@4

; 499  :     if ( vc->area == 0.0 ) continue;

	fld	QWORD PTR [ebx]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN281@sqcurve_fo@4

; 500  :     if ( !boundary_curvature_flag )

	cmp	DWORD PTR _boundary_curvature_flag, ecx
	jne	SHORT $LN271@sqcurve_fo@4

; 501  :     { vc->a = vc->area; area = a = vc->a/3; } 

	fld	QWORD PTR [ebx]
	fst	QWORD PTR [ebx+8]
	mov	edx, DWORD PTR _web+616
	fdiv	ST(0), ST(1)
	fst	QWORD PTR _a$[ebp]
	jmp	SHORT $LN1063@sqcurve_fo@4
$LN271@sqcurve_fo@4:

; 502  :     else { a = vc->a/3; area = vc->area/3; }

	fld	QWORD PTR [ebx+8]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR _a$[ebp]
	fld	QWORD PTR [ebx]
	fdiv	ST(0), ST(1)
$LN1063@sqcurve_fo@4:

; 503  :     for ( i = 0 ; i < SDIM  ;i++ ) /* alloc area deriv */

	xor	ecx, ecx
	fstp	QWORD PTR _area$[ebp]
	cmp	edx, 4
	jl	$LC536@sqcurve_fo@4
	lea	esi, DWORD PTR _ad$89446[ebp]
	lea	edi, DWORD PTR _ad$89446[ebp+8]
	sub	esi, ebx
	sub	edi, ebx
	lea	eax, DWORD PTR [ebx+16]
	mov	DWORD PTR tv8059[ebp], edi
$LN545@sqcurve_fo@4:

; 504  :         if ( boundary_curvature_flag ) ad[i] = vc->star_force[i]/3;

	cmp	DWORD PTR _boundary_curvature_flag, 0
	je	SHORT $LN537@sqcurve_fo@4
	fld	QWORD PTR [eax+64]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR _ad$89446[ebp+ecx*8]
	fld	QWORD PTR [eax+72]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR _ad$89446[ebp+ecx*8+8]
	fld	QWORD PTR [eax+80]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [esi+eax]
	fld	QWORD PTR [eax+88]
	jmp	SHORT $LN1064@sqcurve_fo@4
$LN537@sqcurve_fo@4:

; 505  :         else ad[i] = vc->force[i]/3;

	fld	QWORD PTR [eax]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR _ad$89446[ebp+ecx*8]
	fld	QWORD PTR [eax+8]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR _ad$89446[ebp+ecx*8+8]
	fld	QWORD PTR [eax+16]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [esi+eax]
	fld	QWORD PTR [eax+24]
$LN1064@sqcurve_fo@4:
	fdiv	ST(0), ST(1)
	mov	edi, DWORD PTR tv8059[ebp]
	add	ecx, 4
	add	eax, 32					; 00000020H
	fstp	QWORD PTR [edi+eax-32]
	lea	edi, DWORD PTR [edx-3]
	cmp	ecx, edi
	jl	SHORT $LN545@sqcurve_fo@4

; 503  :     for ( i = 0 ; i < SDIM  ;i++ ) /* alloc area deriv */

	mov	edi, DWORD PTR _attr$89444[ebp]
$LC536@sqcurve_fo@4:
	cmp	ecx, edx
	jge	SHORT $LN737@sqcurve_fo@4
	mov	esi, DWORD PTR _boundary_curvature_flag
	lea	eax, DWORD PTR [ebx+ecx*8+16]
$LC269@sqcurve_fo@4:

; 504  :         if ( boundary_curvature_flag ) ad[i] = vc->star_force[i]/3;

	test	esi, esi
	je	SHORT $LN266@sqcurve_fo@4
	fld	QWORD PTR [eax+64]
	jmp	SHORT $LN1065@sqcurve_fo@4
$LN266@sqcurve_fo@4:

; 505  :         else ad[i] = vc->force[i]/3;

	fld	QWORD PTR [eax]
$LN1065@sqcurve_fo@4:
	fdiv	ST(0), ST(1)
	inc	ecx
	add	eax, 8
	fstp	QWORD PTR _ad$89446[ebp+ecx*8-8]
	cmp	ecx, edx
	jl	SHORT $LC269@sqcurve_fo@4
$LN737@sqcurve_fo@4:

; 506  :     if ( attr & CONSTRAINT )

	and	edi, 1024				; 00000400H
	fstp	ST(0)
	mov	eax, edi
	xor	ecx, ecx
	or	eax, ecx
	je	$LN617@sqcurve_fo@4

; 507  :     { conmap_t *conmap = get_v_constraint_map(v_id);

	mov	esi, DWORD PTR _web+104
	mov	eax, DWORD PTR _dymem
	cmp	DWORD PTR [esi+eax+1288], ecx
	je	SHORT $LN295@sqcurve_fo@4
	mov	ecx, DWORD PTR tv5657[ebp]
	mov	edi, DWORD PTR _web+12
	mov	ecx, DWORD PTR [edi+ecx*4]
	add	ecx, DWORD PTR [esi+eax+1264]
	jmp	SHORT $LN296@sqcurve_fo@4
$LN295@sqcurve_fo@4:
	mov	ecx, OFFSET _nullcon
$LN296@sqcurve_fo@4:

; 508  :       int oncount = 0;
; 509  :       struct constraint *con[MAXCONHIT];
; 510  :       REAL perp[MAXCOORD];
; 511  : 
; 512  :       for ( j = 1 ; j <= (int)conmap[0] ; j++ )

	mov	edi, 1
	xor	esi, esi
	cmp	DWORD PTR [ecx], edi
	jl	SHORT $LN261@sqcurve_fo@4
	npad	3
$LL263@sqcurve_fo@4:

; 513  :       { if ( (conmap[j] & CON_HIT_BIT) && (oncount < web.sdim))

	mov	eax, DWORD PTR [ecx+edi*4]
	test	eax, eax
	jns	SHORT $LN262@sqcurve_fo@4
	cmp	esi, edx
	jge	SHORT $LN262@sqcurve_fo@4

; 514  :           con[oncount++] = get_constraint(conmap[j]);

	and	eax, 1073741823				; 3fffffffH
	imul	eax, 176				; 000000b0H
	add	eax, DWORD PTR _web+652
	inc	esi
	mov	DWORD PTR _con$89478[ebp+esi*4-4], eax
$LN262@sqcurve_fo@4:

; 508  :       int oncount = 0;
; 509  :       struct constraint *con[MAXCONHIT];
; 510  :       REAL perp[MAXCOORD];
; 511  : 
; 512  :       for ( j = 1 ; j <= (int)conmap[0] ; j++ )

	inc	edi
	cmp	edi, DWORD PTR [ecx]
	jle	SHORT $LL263@sqcurve_fo@4
$LN261@sqcurve_fo@4:

; 515  :       }
; 516  : 
; 517  :       constr_proj(TANGPROJ,oncount,con,get_coord(v_id),
; 518  :                                  vc->force,perp,NULL,NO_DETECT,v_id);

	mov	edx, DWORD PTR _v_id$[ebp]
	mov	ecx, DWORD PTR _web+12
	push	edx
	mov	edx, DWORD PTR tv5657[ebp]
	push	0
	push	0
	lea	eax, DWORD PTR _perp$89479[ebp]
	push	eax
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _web+104
	mov	edx, DWORD PTR _dymem
	add	eax, DWORD PTR [ecx+edx+64]
	lea	edi, DWORD PTR [ebx+16]
	push	edi
	push	eax
	lea	eax, DWORD PTR _con$89478[ebp]
	push	eax
	push	esi
	push	2
	call	_constr_proj

; 519  :       for ( j = 0 ; j < SDIM ; j++ )

	mov	edx, DWORD PTR _web+616
	add	esp, 36					; 00000024H
	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN678@sqcurve_fo@4

; 515  :       }
; 516  : 
; 517  :       constr_proj(TANGPROJ,oncount,con,get_coord(v_id),
; 518  :                                  vc->force,perp,NULL,NO_DETECT,v_id);

	mov	ecx, edi
	npad	7
$LL259@sqcurve_fo@4:

; 520  :         vc->force[j] -= perp[j];

	fld	QWORD PTR [ecx]
	inc	eax
	fsub	QWORD PTR _perp$89479[ebp+eax*8-8]
	add	ecx, 8
	fstp	QWORD PTR [ecx-8]
	mov	edx, DWORD PTR _web+616
	cmp	eax, edx
	jl	SHORT $LL259@sqcurve_fo@4
$LN678@sqcurve_fo@4:

; 521  : 
; 522  :       if ( effective_area_flag || normal_curvature_flag )

	cmp	DWORD PTR _effective_area_flag, 0
	jne	SHORT $LN255@sqcurve_fo@4
	cmp	DWORD PTR _normal_curvature_flag, 0
	je	SHORT $LN617@sqcurve_fo@4
$LN255@sqcurve_fo@4:

; 523  :       { constr_proj(TANGPROJ,oncount,con,get_coord(v_id),
; 524  :                               vc->normal,perp,NULL,NO_DETECT,v_id);

	mov	ecx, DWORD PTR _v_id$[ebp]
	mov	eax, DWORD PTR _web+12
	push	ecx
	mov	ecx, DWORD PTR tv5657[ebp]
	push	0
	push	0
	lea	edx, DWORD PTR _perp$89479[ebp]
	push	edx
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+104
	add	edx, DWORD PTR [ecx+eax+64]
	lea	edi, DWORD PTR [ebx+416]
	push	edi
	push	edx
	lea	edx, DWORD PTR _con$89478[ebp]
	push	edx
	push	esi
	push	2
	call	_constr_proj

; 525  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	edx, DWORD PTR _web+616
	add	esp, 36					; 00000024H
	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN617@sqcurve_fo@4

; 523  :       { constr_proj(TANGPROJ,oncount,con,get_coord(v_id),
; 524  :                               vc->normal,perp,NULL,NO_DETECT,v_id);

	mov	ecx, edi
$LL254@sqcurve_fo@4:

; 526  :           vc->normal[j] -= perp[j];

	fld	QWORD PTR [ecx]
	inc	eax
	fsub	QWORD PTR _perp$89479[ebp+eax*8-8]
	add	ecx, 8
	fstp	QWORD PTR [ecx-8]
	mov	edx, DWORD PTR _web+616
	cmp	eax, edx
	jl	SHORT $LL254@sqcurve_fo@4
$LN617@sqcurve_fo@4:

; 527  :       }
; 528  :     }
; 529  : 
; 530  :     /* vertex self-second derivatives */
; 531  :     if ( mean_curv_int_flag ) /* unsquared curvature */

	cmp	DWORD PTR _mean_curv_int_flag, 0

; 532  :     { e = sqrt(SDIM_dot(vc->force,vc->force));

	lea	esi, DWORD PTR [ebx+16]
	push	edx
	push	esi
	push	esi
	je	SHORT $LN251@sqcurve_fo@4
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fst	QWORD PTR _e$[ebp]

; 533  :       if ( e == 0.0 ) continue; /* no curvature */

	fldz

; 534  :         for ( i = 0 ; i < SDIM ; i++ )

	mov	edx, DWORD PTR _web+616
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN622@sqcurve_fo@4
	xor	edi, edi
	test	edx, edx
	jle	$LN639@sqcurve_fo@4
	lea	eax, DWORD PTR [ebx+128]
	mov	DWORD PTR tv8357[ebp], eax
$LL674@sqcurve_fo@4:

; 535  :           f[i] = SDIM_dot(vc->force,vc->deriv2[i])/e/2;

	mov	ecx, DWORD PTR tv8357[ebp]
	push	edx
	push	ecx
	push	esi
	call	_dot
	fdiv	QWORD PTR _e$[ebp]
	mov	edx, DWORD PTR _web+616
	add	DWORD PTR tv8357[ebp], 48		; 00000030H
	inc	edi
	add	esp, 12					; 0000000cH
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _f$[ebp+edi*8-8]
	cmp	edi, edx
	jl	SHORT $LL674@sqcurve_fo@4

; 536  :     }
; 537  :     else if ( normal_curvature_flag )

	fld	QWORD PTR __real@4008000000000000
	jmp	$LN640@sqcurve_fo@4
$LN251@sqcurve_fo@4:
	cmp	DWORD PTR _normal_curvature_flag, 0
	je	$LN245@sqcurve_fo@4

; 538  :     { e = SDIM_dot(vc->force,vc->force);

	call	_dot
	fstp	QWORD PTR _e$[ebp]

; 539  :       denom = SDIM_dot(vc->force,vc->normal);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR [ebx+416]
	push	eax
	push	esi
	call	_dot

; 540  :       if ( denom != 0.0 )

	fld	ST(0)
	fldz
	add	esp, 24					; 00000018H
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN753@sqcurve_fo@4

; 541  :       { h = 3*e/denom;

	fld	QWORD PTR _e$[ebp]

; 542  :         if ( h0_flag ) h -= h0_val;

	xor	eax, eax
	fld	ST(0)
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(3)
	cmp	DWORD PTR _h0_flag, eax
	je	SHORT $LN243@sqcurve_fo@4
	fsub	QWORD PTR _h0_val$89447[ebp]
$LN243@sqcurve_fo@4:

; 547  :           for ( i = 0 ; i < SDIM ; i++ )

	mov	edx, DWORD PTR _web+616
	mov	DWORD PTR _i$[ebp], eax
	cmp	DWORD PTR _mean_curv_int_flag, eax
	je	$LN242@sqcurve_fo@4

; 543  :         if ( mean_curv_int_flag )
; 544  :         { fudge1 = 2/denom*vc->area;

	fld	QWORD PTR __real@4000000000000000
	fdiv	ST(0), ST(4)
	fmul	QWORD PTR [ebx]
	fst	QWORD PTR _fudge1$[ebp]

; 545  :           fudge2 = fudge1*e/denom/2;

	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fdivrp	ST(3), ST(0)
	fxch	ST(2)
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _fudge2$[ebp]

; 546  :           fudge3 = h/6;

	fdiv	QWORD PTR __real@4018000000000000
	fstp	QWORD PTR _fudge3$[ebp]

; 547  :           for ( i = 0 ; i < SDIM ; i++ )

	cmp	edx, eax
	jle	$LN640@sqcurve_fo@4
	mov	eax, esi
	fstp	ST(0)
	lea	edi, DWORD PTR [ebx+128]
	mov	DWORD PTR tv8430[ebp], eax
	jmp	SHORT $LN241@sqcurve_fo@4
	npad	2
$LL671@sqcurve_fo@4:

; 543  :         if ( mean_curv_int_flag )
; 544  :         { fudge1 = 2/denom*vc->area;

	mov	eax, DWORD PTR tv8430[ebp]
$LN241@sqcurve_fo@4:

; 548  :             f[i] = fudge1*dot(vc->force,vc->deriv2[i],SDIM)
; 549  :                    - fudge2*dot(vc->normal,vc->deriv2[i],SDIM)
; 550  :                    + fudge3*(boundary_curvature_flag ? vc->star_force[i] :
; 551  :                                   vc->force[i]);

	cmp	DWORD PTR _boundary_curvature_flag, 0
	je	SHORT $LN297@sqcurve_fo@4
	fld	QWORD PTR [eax+64]
	jmp	SHORT $LN1066@sqcurve_fo@4
$LN297@sqcurve_fo@4:
	fld	QWORD PTR [eax]
$LN1066@sqcurve_fo@4:
	push	edx
	fstp	QWORD PTR tv354[ebp]
	push	edi
	push	esi
	call	_dot
	fmul	QWORD PTR _fudge1$[ebp]
	mov	eax, DWORD PTR _web+616
	push	eax
	lea	eax, DWORD PTR [ebx+416]
	fstp	QWORD PTR tv21382[ebp]
	push	edi
	push	eax
	call	_dot
	fmul	QWORD PTR _fudge2$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _web+616
	fsubr	QWORD PTR tv21382[ebp]
	add	DWORD PTR tv8430[ebp], 8
	fld	QWORD PTR tv354[ebp]
	inc	eax
	fmul	QWORD PTR _fudge3$[ebp]
	add	esp, 24					; 00000018H
	add	edi, 48					; 00000030H
	mov	DWORD PTR _i$[ebp], eax
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _f$[ebp+eax*8-8]
	cmp	eax, edx
	jl	$LL671@sqcurve_fo@4

; 552  : /* Note: Convex Exemplar cc 6.2.1 chokes on SDIM_dot here */
; 553  :         }
; 554  :         else /* squared curvature */

	fld	QWORD PTR __real@4008000000000000
	jmp	$LN640@sqcurve_fo@4
$LN242@sqcurve_fo@4:

; 555  :         { fudge1 = 4*h/denom*vc->area;

	fld	QWORD PTR __real@4010000000000000
	fmul	ST(0), ST(1)
	fdiv	ST(0), ST(4)
	fmul	QWORD PTR [ebx]
	fst	QWORD PTR _fudge1$[ebp]

; 556  :           fudge2 = fudge1*e/denom/2;

	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fdivrp	ST(3), ST(0)
	fxch	ST(2)
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _fudge2$[ebp]

; 557  :           fudge3 = h*h/3;

	fmul	ST(0), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR _fudge3$[ebp]

; 558  :           for ( i = 0 ; i < SDIM ; i++ )

	cmp	edx, eax
	jle	$LN640@sqcurve_fo@4
	mov	eax, esi
	fstp	ST(0)
	lea	edi, DWORD PTR [ebx+128]
	mov	DWORD PTR tv8521[ebp], eax
	jmp	SHORT $LN237@sqcurve_fo@4
$LL670@sqcurve_fo@4:

; 555  :         { fudge1 = 4*h/denom*vc->area;

	mov	eax, DWORD PTR tv8521[ebp]
$LN237@sqcurve_fo@4:

; 559  :             f[i] = fudge1*dot(vc->force,vc->deriv2[i],SDIM)
; 560  :                   - fudge2*dot(vc->normal,vc->deriv2[i],SDIM)
; 561  :                      + fudge3*(boundary_curvature_flag ? vc->star_force[i] :
; 562  :                               vc->force[i]);

	cmp	DWORD PTR _boundary_curvature_flag, 0
	je	SHORT $LN299@sqcurve_fo@4
	fld	QWORD PTR [eax+64]
	jmp	SHORT $LN1067@sqcurve_fo@4
$LN299@sqcurve_fo@4:
	fld	QWORD PTR [eax]
$LN1067@sqcurve_fo@4:
	push	edx
	fstp	QWORD PTR tv395[ebp]
	push	edi
	push	esi
	call	_dot
	fmul	QWORD PTR _fudge1$[ebp]
	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	eax, DWORD PTR [ebx+416]
	fstp	QWORD PTR tv21359[ebp]
	push	edi
	push	eax
	call	_dot
	fmul	QWORD PTR _fudge2$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _web+616
	fsubr	QWORD PTR tv21359[ebp]
	add	DWORD PTR tv8521[ebp], 8
	fld	QWORD PTR tv395[ebp]
	inc	eax
	fmul	QWORD PTR _fudge3$[ebp]
	add	esp, 24					; 00000018H
	add	edi, 48					; 00000030H
	mov	DWORD PTR _i$[ebp], eax
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _f$[ebp+eax*8-8]
	cmp	eax, edx
	jl	$LL670@sqcurve_fo@4

; 563  :         }
; 564  :       }
; 565  :       else 

	fld	QWORD PTR __real@4008000000000000
	jmp	$LN640@sqcurve_fo@4
$LN753@sqcurve_fo@4:

; 566  :         for ( i = 0 ; i < SDIM ; i++ ) f[i] =0.0;

	mov	edx, DWORD PTR _web+616
	fstp	ST(0)
	test	edx, edx
	jle	$LN639@sqcurve_fo@4

; 567  :     }
; 568  :     else if ( effective_area_flag )

	fld	QWORD PTR __real@4008000000000000
	mov	ecx, edx
	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	xor	eax, eax
	lea	edi, DWORD PTR _f$[ebp]
	rep stosd
	jmp	$LN640@sqcurve_fo@4
$LN245@sqcurve_fo@4:
	cmp	DWORD PTR _effective_area_flag, 0
	je	$LN229@sqcurve_fo@4

; 569  :     { e = SDIM_dot(vc->force,vc->force);

	call	_dot
	fstp	QWORD PTR _e$[ebp]

; 570  :       denom = SDIM_dot(vc->normal,vc->normal);

	mov	edx, DWORD PTR _web+616
	lea	eax, DWORD PTR [ebx+416]
	push	edx
	push	eax
	push	eax
	call	_dot
	fst	QWORD PTR _denom$[ebp]

; 572  :         for ( i = 0 ; i < SDIM ; i++ )

	mov	edx, DWORD PTR _web+616
	fld	ST(0)
	fldz
	add	esp, 24					; 00000018H
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN766@sqcurve_fo@4
	xor	edi, edi
	test	edx, edx
	jle	$LN769@sqcurve_fo@4
	fld	QWORD PTR _e$[ebp]
	lea	eax, DWORD PTR [ebx+128]
	fmul	QWORD PTR __real@4022000000000000
	mov	DWORD PTR tv8601[ebp], eax
	fdivrp	ST(1), ST(0)
	fstp	QWORD PTR tv5862[ebp]
	npad	2
$LL672@sqcurve_fo@4:

; 573  :           f[i] = 18*SDIM_dot(vc->force,vc->deriv2[i])/denom*a
; 574  :                 + 9*e/denom*ad[i];

	mov	ecx, DWORD PTR tv8601[ebp]
	push	edx
	push	ecx
	push	esi
	call	_dot
	fmul	QWORD PTR __real@4032000000000000
	mov	edx, DWORD PTR _web+616
	add	DWORD PTR tv8601[ebp], 48		; 00000030H
	fdiv	QWORD PTR _denom$[ebp]
	inc	edi
	add	esp, 12					; 0000000cH
	fmul	QWORD PTR _a$[ebp]
	fld	QWORD PTR _ad$89446[ebp+edi*8-8]
	fmul	QWORD PTR tv5862[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _f$[ebp+edi*8-8]
	cmp	edi, edx
	jl	SHORT $LL672@sqcurve_fo@4

; 575  :       else

	fld	QWORD PTR __real@4008000000000000
	jmp	$LN640@sqcurve_fo@4
$LN766@sqcurve_fo@4:

; 571  :       if ( denom != 0.0 )

	fstp	ST(0)

; 576  :          for ( i = 0 ; i < SDIM ; i++ ) f[i] =0.0;

	test	edx, edx
	jle	$LN639@sqcurve_fo@4

; 577  :     }
; 578  :     else /* squared curvature */

	fld	QWORD PTR __real@4008000000000000
	mov	ecx, edx
	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	xor	eax, eax
	lea	edi, DWORD PTR _f$[ebp]
	rep stosd
	jmp	$LN640@sqcurve_fo@4
$LN229@sqcurve_fo@4:

; 579  :     { e = SDIM_dot(vc->force,vc->force)/vc->area*3.0/4;

	call	_dot
	fdiv	QWORD PTR [ebx]

; 580  :       for ( i = 0 ; i < SDIM ; i++ )

	mov	edx, DWORD PTR _web+616
	add	esp, 12					; 0000000cH
	xor	edi, edi
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR __real@3fd0000000000000
	test	edx, edx
	jle	$LN772@sqcurve_fo@4
	fstp	ST(1)
	lea	eax, DWORD PTR [ebx+128]
	fmul	QWORD PTR __real@3ff5555555555555
	mov	DWORD PTR tv8692[ebp], esi
	mov	DWORD PTR tv8694[ebp], eax
	fstp	QWORD PTR tv5873[ebp]
	jmp	SHORT $LN219@sqcurve_fo@4
	npad	5
$LL775@sqcurve_fo@4:

; 579  :     { e = SDIM_dot(vc->force,vc->force)/vc->area*3.0/4;

	fstp	ST(0)
$LN219@sqcurve_fo@4:

; 581  :         f[i] = (2*SDIM_dot(vc->force,vc->deriv2[i])
; 582  :                - 4/3.0*e*vc->force[i])/vc->area*3.0/4;

	mov	ecx, DWORD PTR tv8694[ebp]
	push	edx
	push	ecx
	push	esi
	call	_dot
	fadd	ST(0), ST(0)
	mov	eax, DWORD PTR tv8692[ebp]
	fld	QWORD PTR tv5873[ebp]
	fmul	QWORD PTR [eax]
	mov	edx, DWORD PTR _web+616
	add	DWORD PTR tv8694[ebp], 48		; 00000030H
	inc	edi
	fsubp	ST(1), ST(0)
	add	eax, 8
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv8692[ebp], eax
	fdiv	QWORD PTR [ebx]
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR __real@3fd0000000000000
	fstp	QWORD PTR _f$[ebp+edi*8-8]
	cmp	edi, edx
	jl	SHORT $LL775@sqcurve_fo@4

; 580  :       for ( i = 0 ; i < SDIM ; i++ )

	jmp	SHORT $LN640@sqcurve_fo@4
$LN769@sqcurve_fo@4:

; 572  :         for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)
$LN639@sqcurve_fo@4:

; 580  :       for ( i = 0 ; i < SDIM ; i++ )

	fld	QWORD PTR __real@4008000000000000
	jmp	SHORT $LN640@sqcurve_fo@4
$LN772@sqcurve_fo@4:
	fstp	ST(0)
$LN640@sqcurve_fo@4:

; 583  :     }
; 584  : 
; 585  :     if ( h0_flag  && !normal_curvature_flag)

	cmp	DWORD PTR _h0_flag, 0
	je	$LN216@sqcurve_fo@4
	cmp	DWORD PTR _normal_curvature_flag, 0
	jne	$LN216@sqcurve_fo@4

; 586  :     { REAL net,sim;
; 587  :       REAL fd[MAXCOORD],simd[MAXCOORD];
; 588  :       REAL aread[MAXCOORD];
; 589  :       vc->norm = SDIM_dot(vc->normal,vc->normal);

	push	edx
	fstp	ST(0)
	lea	edi, DWORD PTR [ebx+416]
	push	edi
	push	edi
	call	_dot
	fstp	QWORD PTR [ebx+464]

; 590  :       vc->f = SDIM_dot(vc->force,vc->normal);

	mov	edx, DWORD PTR _web+616
	push	edx
	push	edi
	push	esi
	call	_dot
	fst	QWORD PTR [ebx+64]

; 591  :       vc->h = h = vc->f/vc->norm*3;

	fdiv	QWORD PTR [ebx+464]
	add	esp, 24					; 00000018H

; 592  :       for ( i = 0 ; i < SDIM  ;i++ )

	xor	esi, esi
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _h$[ebp]
	fst	QWORD PTR [ebx+72]
	mov	eax, DWORD PTR _web+616
	test	eax, eax
	jle	SHORT $LN668@sqcurve_fo@4
	lea	ecx, DWORD PTR [ebx+128]
	fstp	ST(1)
	mov	DWORD PTR tv8743[ebp], ecx
	npad	3
$LL799@sqcurve_fo@4:

; 593  :         fd[i] = SDIM_dot(vc->normal,vc->deriv2[i])/vc->norm*3;

	mov	edx, DWORD PTR tv8743[ebp]
	fstp	ST(0)
	push	eax
	push	edx
	push	edi
	call	_dot
	fdiv	QWORD PTR [ebx+464]
	mov	eax, DWORD PTR _web+616
	add	DWORD PTR tv8743[ebp], 48		; 00000030H
	inc	esi
	add	esp, 12					; 0000000cH
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _fd$89545[ebp+esi*8-8]
	cmp	esi, eax
	jl	SHORT $LL799@sqcurve_fo@4

; 592  :       for ( i = 0 ; i < SDIM  ;i++ )

	fld	QWORD PTR _h$[ebp]
$LN668@sqcurve_fo@4:

; 594  :       for ( i = 0 ; i < SDIM  ;i++ )

	xor	ecx, ecx
	test	eax, eax
	jle	SHORT $LN669@sqcurve_fo@4
	mov	esi, DWORD PTR _boundary_curvature_flag
	lea	edx, DWORD PTR [ebx+80]
$LN212@sqcurve_fo@4:

; 595  :       { aread[i] = vc->force[i]/3;

	fld	QWORD PTR [edx-64]
	fdiv	ST(0), ST(2)
	fst	QWORD PTR _aread$89547[ebp+ecx*8]

; 596  :         if ( boundary_curvature_flag ) ad[i] = vc->star_force[i]/3;

	test	esi, esi
	je	SHORT $LN209@sqcurve_fo@4
	fstp	ST(0)
	fld	QWORD PTR [edx]
	fdiv	ST(0), ST(2)
$LN209@sqcurve_fo@4:

; 597  :         else ad[i] = aread[i];

	fstp	QWORD PTR _ad$89446[ebp+ecx*8]
	inc	ecx
	add	edx, 8
	cmp	ecx, eax
	jl	SHORT $LN212@sqcurve_fo@4
$LN669@sqcurve_fo@4:

; 598  :       }
; 599  :       vc->term = h - h0_val;

	fsub	QWORD PTR _h0_val$89447[ebp]
	fstp	QWORD PTR [ebx+536]

; 600  :       if ( self_similar_flag )

	cmp	DWORD PTR _self_similar_flag, 0
	je	$LN621@sqcurve_fo@4

; 601  :       { vc->vol = SDIM_dot(get_coord(v_id),vc->normal);

	mov	eax, DWORD PTR _web+616
	fstp	ST(0)
	mov	ecx, DWORD PTR _web+12
	mov	edx, DWORD PTR tv5657[ebp]
	push	eax
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _dymem
	mov	edx, DWORD PTR _web+104
	add	eax, DWORD PTR [edx+ecx+64]
	push	edi
	push	eax
	call	_dot
	fst	QWORD PTR [ebx+520]

; 602  :         sim = selfsim_coeff*vc->vol/area;

	fmul	QWORD PTR _selfsim_coeff
	add	esp, 12					; 0000000cH
	fld	QWORD PTR _area$[ebp]

; 603  :         vc->term -= sim/area;
; 604  :         for ( i = 0 ; i < SDIM  ;i++ )

	xor	esi, esi
	fdiv	ST(1), ST(0)
	fdivp	ST(1), ST(0)
	fsubr	QWORD PTR [ebx+536]
	fstp	QWORD PTR [ebx+536]
	mov	edx, DWORD PTR _web+616
	test	edx, edx
	jle	$LN641@sqcurve_fo@4
	fld	QWORD PTR _modulus$[ebp]
	mov	eax, DWORD PTR _force$89436[ebp]
	mov	ecx, edi
	fadd	ST(0), ST(0)
	fld	QWORD PTR _a$[ebp]
	lea	edi, DWORD PTR _simd$89546[ebp]
	sub	edi, eax
$LN206@sqcurve_fo@4:

; 605  :            { simd[i] = selfsim_coeff*vc->normal[i];

	fld	QWORD PTR _selfsim_coeff
	inc	esi
	fmul	QWORD PTR [ecx]
	add	ecx, 8
	add	eax, 8
	fst	QWORD PTR [edi+eax-8]

; 606  :               force[i] -= modulus*2*vc->term* (- simd[i])*a;

	fld	ST(2)
	fmul	QWORD PTR [ebx+536]
	fxch	ST(1)
	fchs
	fmulp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	mov	edx, DWORD PTR _web+616
	cmp	esi, edx
	jl	SHORT $LN206@sqcurve_fo@4

; 603  :         vc->term -= sim/area;
; 604  :         for ( i = 0 ; i < SDIM  ;i++ )

	mov	ecx, DWORD PTR _force$89436[ebp]
	fstp	ST(1)
	fld	QWORD PTR __real@4008000000000000
	fxch	ST(1)
$LN204@sqcurve_fo@4:

; 607  :            }
; 608  :       }
; 609  :       for ( i = 0  ; i < SDIM ; i++ )

	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN793@sqcurve_fo@4
	fld	QWORD PTR _modulus$[ebp]
	fld	QWORD PTR __real@4000000000000000
$LN203@sqcurve_fo@4:

; 610  :       { net = 2*vc->term*fd[i]*a + vc->term*vc->term*ad[i];

	fld	QWORD PTR [ebx+536]
	inc	eax
	fld	QWORD PTR [ebx+536]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR _fd$89545[ebp+eax*8-8]
	fmul	ST(0), ST(4)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fld	QWORD PTR _ad$89446[ebp+eax*8-8]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)

; 611  :         force[i] -= modulus*net;

	fmul	ST(0), ST(2)
	fsubr	QWORD PTR [ecx+eax*8-8]
	fstp	QWORD PTR [ecx+eax*8-8]
	mov	edx, DWORD PTR _web+616
	cmp	eax, edx
	jl	SHORT $LN203@sqcurve_fo@4

; 607  :            }
; 608  :       }
; 609  :       for ( i = 0  ; i < SDIM ; i++ )

	fstp	ST(2)
	fstp	ST(1)
$LN793@sqcurve_fo@4:
	fstp	ST(0)
$LN281@sqcurve_fo@4:

; 482  :   { sqcurve_force_string_end();
; 483  :     return;
; 484  :   }
; 485  : 
; 486  :   FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR _web+12
	mov	eax, DWORD PTR tv5657[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _v_id$[ebp], ecx
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	jne	$LN677@sqcurve_fo@4
$LN688@sqcurve_fo@4:

; 617  :   }
; 618  : 
; 619  :   FOR_ALL_EDGES(e_id)

	mov	ebx, DWORD PTR _web+160
	fstp	ST(0)
	mov	DWORD PTR _e_id$[ebp], ebx
	shr	ebx, 28					; 0000001cH
	and	ebx, 1
	je	$LN662@sqcurve_fo@4
	fldz
$LN655@sqcurve_fo@4:
	mov	eax, DWORD PTR _e_id$[ebp]
	mov	ecx, DWORD PTR _web+124
	and	eax, 134217727				; 07ffffffH
	mov	DWORD PTR tv5961[ebp], eax
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	ecx, ecx
	or	eax, ecx
	je	$LN195@sqcurve_fo@4

; 620  :   {
; 621  :      vertex_id headv = get_edge_headv(e_id);

	mov	esi, DWORD PTR _e_id$[ebp]
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR _web+216
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	edi, DWORD PTR tv5961[ebp]
	mov	ecx, DWORD PTR _web+124
	mov	ecx, DWORD PTR [ecx+edi*4]
	shr	esi, 27					; 0000001bH
	and	esi, 1
	mov	DWORD PTR tv5972[ebp], esi
	je	SHORT $LN308@sqcurve_fo@4
	add	eax, ecx
	mov	ecx, DWORD PTR [eax]
	jmp	$LN307@sqcurve_fo@4
$LN621@sqcurve_fo@4:

; 603  :         vc->term -= sim/area;
; 604  :         for ( i = 0 ; i < SDIM  ;i++ )

	mov	edx, DWORD PTR _web+616
	fld	QWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _force$89436[ebp]
	jmp	$LN204@sqcurve_fo@4
$LN641@sqcurve_fo@4:
	fld	QWORD PTR __real@4008000000000000
	mov	ecx, DWORD PTR _force$89436[ebp]
	fld	QWORD PTR _a$[ebp]
	jmp	$LN204@sqcurve_fo@4
$LN216@sqcurve_fo@4:

; 612  :       }
; 613  :     }
; 614  :     else
; 615  :       for ( i = 0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	test	edx, edx
	jle	$LN281@sqcurve_fo@4
	mov	eax, DWORD PTR _force$89436[ebp]
	fld	QWORD PTR _modulus$[ebp]
	lea	esi, DWORD PTR _f$[ebp]
	sub	esi, eax
$LN199@sqcurve_fo@4:

; 616  :         force[i] -= modulus*f[i];

	fld	QWORD PTR [esi+eax]
	inc	ecx
	fmul	ST(0), ST(1)
	add	eax, 8
	fsubr	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	mov	edx, DWORD PTR _web+616
	cmp	ecx, edx
	jl	SHORT $LN199@sqcurve_fo@4

; 612  :       }
; 613  :     }
; 614  :     else
; 615  :       for ( i = 0 ; i < SDIM ; i++ )

	jmp	$LN793@sqcurve_fo@4
$LN622@sqcurve_fo@4:
	fld	QWORD PTR __real@4008000000000000
	jmp	$LN281@sqcurve_fo@4

; 620  :   {
; 621  :      vertex_id headv = get_edge_headv(e_id);

$LN308@sqcurve_fo@4:
	add	eax, ecx
	mov	ecx, DWORD PTR _web+636
	mov	ecx, DWORD PTR [eax+ecx*4]
$LN307@sqcurve_fo@4:

; 622  :      vertex_id tailv = get_edge_tailv(e_id);

	test	esi, esi
	je	SHORT $LN312@sqcurve_fo@4
	mov	esi, DWORD PTR _web+636
	mov	esi, DWORD PTR [eax+esi*4]
	jmp	SHORT $LN311@sqcurve_fo@4
$LN312@sqcurve_fo@4:
	mov	esi, DWORD PTR [eax]
$LN311@sqcurve_fo@4:

; 623  :      struct e_curve_t *ec = e_curve + loc_ordinal(e_id);

	test	ebx, ebx
	je	SHORT $LN301@sqcurve_fo@4
	mov	eax, edi
	jmp	SHORT $LN302@sqcurve_fo@4
$LN301@sqcurve_fo@4:
	or	eax, -1
$LN302@sqcurve_fo@4:
	lea	eax, DWORD PTR [eax+eax*8]
	shl	eax, 6
	add	eax, DWORD PTR _e_curve
	mov	DWORD PTR _ec$89582[ebp], eax

; 624  :      struct v_curve_t *vc1 = v_curve + loc_ordinal(tailv);

	test	esi, 268435456				; 10000000H
	je	SHORT $LN303@sqcurve_fo@4
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN304@sqcurve_fo@4
$LN303@sqcurve_fo@4:
	or	eax, -1
$LN304@sqcurve_fo@4:
	mov	edi, DWORD PTR _v_curve
	imul	eax, 544				; 00000220H
	lea	ebx, DWORD PTR [edi+eax]
	mov	DWORD PTR _vc1$89585[ebp], ebx

; 625  :      struct v_curve_t *vc2 = v_curve + loc_ordinal(headv);

	test	ecx, 268435456				; 10000000H
	je	SHORT $LN305@sqcurve_fo@4
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN306@sqcurve_fo@4
$LN305@sqcurve_fo@4:
	or	eax, -1
$LN306@sqcurve_fo@4:
	imul	eax, 544				; 00000220H

; 626  :      REAL *force1 = get_force(tailv); 
; 627  :      REAL *force2 = get_force(headv); 
; 628  :      REAL s[MAXCOORD],cross1[MAXCOORD],cross2[MAXCOORD];
; 629  :      REAL denom1=0.0,denom2=0.0;

	fst	QWORD PTR _denom1$89604[ebp]
	fst	QWORD PTR _denom2$89605[ebp]

; 630  :      REAL s0[MAXCOORD];
; 631  :      REAL wa[MAXCOORD],wb[MAXCOORD],w[MAXCOORD],aw[MAXCOORD],vw[MAXCOORD];
; 632  :      facetedge_id fe;
; 633  :      facet_id f_id;
; 634  : 
; 635  :      
; 636  :      if ( (vc1->area == 0.0) || (vc2->area == 0.0) ) continue;

	fld	QWORD PTR [ebx]
	fld	ST(1)
	fucompp
	add	eax, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	lea	edi, DWORD PTR [esi+esi]
	mov	esi, DWORD PTR _dymem
	mov	DWORD PTR _vc2$89588[ebp], eax
	mov	eax, DWORD PTR _web+104
	mov	eax, DWORD PTR [eax+esi+784]
	mov	esi, DWORD PTR _web+12
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	DWORD PTR tv6001[ebp], edi
	mov	edi, DWORD PTR [edi+esi]
	mov	esi, DWORD PTR [ecx+esi]
	add	edi, eax
	add	esi, eax
	mov	DWORD PTR _force1$89591[ebp], edi
	fnstsw	ax
	mov	DWORD PTR tv6008[ebp], ecx
	mov	DWORD PTR _force2$89596[ebp], esi
	test	ah, 68					; 00000044H
	jnp	$LN195@sqcurve_fo@4
	mov	ecx, DWORD PTR _vc2$89588[ebp]
	fld	QWORD PTR [ecx]
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN195@sqcurve_fo@4

; 637  :      if ( mean_curv_int_flag )  /* unsquared curvature */

	cmp	DWORD PTR _mean_curv_int_flag, 0
	fstp	ST(0)
	je	SHORT $LN189@sqcurve_fo@4

; 638  :       { e1 = sqrt(SDIM_dot(vc1->force,vc1->force));

	lea	eax, DWORD PTR [ebx+16]
	push	edx
	push	eax
	push	eax
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR _e1$[ebp]

; 639  :         e2 = sqrt(SDIM_dot(vc2->force,vc2->force));

	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR _vc2$89588[ebp]
	add	eax, 16					; 00000010H
	push	edx
	push	eax
	push	eax
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fst	QWORD PTR _e2$[ebp]
	fld	QWORD PTR __real@3fd0000000000000
	mov	edx, DWORD PTR _web+616
	fld	QWORD PTR __real@4008000000000000
	jmp	$LN100@sqcurve_fo@4
$LN189@sqcurve_fo@4:

; 640  :       }
; 641  :      else if ( normal_curvature_flag )

	cmp	DWORD PTR _normal_curvature_flag, 0
	je	$LN187@sqcurve_fo@4

; 642  :       {
; 643  :          facetedge_id fe_a;
; 644  :          facetedge_id fe_b;
; 645  :          REAL sa[MAXCOORD],sb[MAXCOORD];
; 646  : 
; 647  :          fe = get_edge_fe(e_id);

	mov	eax, DWORD PTR _web+124
	mov	ecx, DWORD PTR tv5961[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	test	eax, eax
	je	SHORT $LN675@sqcurve_fo@4
$LN316@sqcurve_fo@4:
	cmp	DWORD PTR tv5972[ebp], 0
	mov	eax, DWORD PTR [eax+28]
	je	SHORT $LN675@sqcurve_fo@4
	xor	eax, 134217728				; 08000000H
$LN675@sqcurve_fo@4:

; 648  :          fe_a = get_prev_edge(fe);

	mov	ecx, DWORD PTR _web+460
	mov	edx, eax
	shr	edx, 27					; 0000001bH
	and	eax, 134217727				; 07ffffffH
	and	edx, 1
	mov	eax, DWORD PTR [ecx+eax*4]
	je	SHORT $LN320@sqcurve_fo@4
	mov	edi, DWORD PTR [eax+32]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN1068@sqcurve_fo@4
$LN320@sqcurve_fo@4:
	mov	edi, DWORD PTR [eax+28]
$LN1068@sqcurve_fo@4:
	mov	DWORD PTR _fe_a$89619[ebp], edi

; 649  :          fe_b = get_prev_edge(get_next_facet(fe));

	test	edx, edx
	je	SHORT $LN324@sqcurve_fo@4
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN323@sqcurve_fo@4
$LN324@sqcurve_fo@4:
	mov	eax, DWORD PTR [eax+40]
$LN323@sqcurve_fo@4:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN328@sqcurve_fo@4
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	ebx, DWORD PTR [edx+32]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN1069@sqcurve_fo@4
$LN328@sqcurve_fo@4:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ebx, DWORD PTR [eax+28]
$LN1069@sqcurve_fo@4:

; 650  :          get_edge_side(e_id,s0);

	mov	edx, DWORD PTR _e_id$[ebp]
	lea	ecx, DWORD PTR _s0$89606[ebp]
	push	ecx
	push	edx
	mov	DWORD PTR _fe_b$89620[ebp], ebx
	call	_get_edge_side

; 651  : 
; 652  :          get_edge_side(get_fe_edge(fe_a),sa);

	mov	ecx, DWORD PTR _web+460
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	lea	eax, DWORD PTR _sa$89621[ebp]
	push	eax
	add	esi, esi
	add	esi, esi
	mov	edx, DWORD PTR [esi+ecx]
	mov	eax, edi
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]
	mov	DWORD PTR tv6068[ebp], esi
	push	eax
	call	_get_edge_side

; 653  :          cross_prod(vc1->force,sa,cross1);

	mov	eax, DWORD PTR _vc1$89585[ebp]
	lea	ecx, DWORD PTR _cross1$89602[ebp]
	push	ecx
	lea	edx, DWORD PTR _sa$89621[ebp]
	add	eax, 16					; 00000010H
	push	edx
	push	eax
	call	_cross_prod
	add	esp, 28					; 0000001cH

; 654  :          if ( (assume_oriented_flag && inverted(get_fe_facet(fe_a))) 
; 655  :  || (!assume_oriented_flag && triple_prod(vc1->normal,sa,s0) < 0.0 ) )

	cmp	DWORD PTR _assume_oriented_flag, 0
	je	$LN616@sqcurve_fo@4
	test	edi, 268435456				; 10000000H
	jne	SHORT $LN334@sqcurve_fo@4
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN333@sqcurve_fo@4
$LN334@sqcurve_fo@4:
	mov	eax, DWORD PTR _web+460
	mov	ecx, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [ecx+24]
	test	edi, 134217728				; 08000000H
	je	SHORT $LN333@sqcurve_fo@4
	xor	eax, 134217728				; 08000000H
$LN333@sqcurve_fo@4:
	test	eax, 134217728				; 08000000H
	jne	$LN185@sqcurve_fo@4
$LN626@sqcurve_fo@4:
	mov	ecx, DWORD PTR _web+616
$LN682@sqcurve_fo@4:

; 657  :          }
; 658  :          if ( fe_b != fe_a ) /* check for single edge on constraint */

	cmp	ebx, edi
	je	$LN552@sqcurve_fo@4

; 659  :            { get_edge_side(get_fe_edge(fe_b),sb);

	mov	eax, DWORD PTR _web+460
	mov	edi, ebx
	and	edi, 134217727				; 07ffffffH
	lea	edx, DWORD PTR _sb$89622[ebp]
	push	edx
	add	edi, edi
	add	edi, edi
	mov	ecx, DWORD PTR [edi+eax]
	mov	edx, ebx
	and	edx, 134217728				; 08000000H
	xor	edx, DWORD PTR [ecx+20]
	push	edx
	call	_get_edge_side

; 660  :               cross_prod(vc1->force,sb,s);

	mov	esi, DWORD PTR _vc1$89585[ebp]
	lea	eax, DWORD PTR _s$89601[ebp]
	push	eax
	lea	ecx, DWORD PTR _sb$89622[ebp]
	push	ecx
	lea	eax, DWORD PTR [esi+16]
	push	eax
	call	_cross_prod
	add	esp, 20					; 00000014H

; 661  :               if ( (assume_oriented_flag && inverted(get_fe_facet(fe_b))) 
; 662  :  || (!assume_oriented_flag && triple_prod(vc1->normal,sb,s0) < 0.0 ) )

	cmp	DWORD PTR _assume_oriented_flag, 0
	je	$LN615@sqcurve_fo@4
	test	ebx, 268435456				; 10000000H
	jne	$LN340@sqcurve_fo@4
	mov	eax, DWORD PTR _NULLFACET
	jmp	$LN339@sqcurve_fo@4
$LN616@sqcurve_fo@4:

; 654  :          if ( (assume_oriented_flag && inverted(get_fe_facet(fe_a))) 
; 655  :  || (!assume_oriented_flag && triple_prod(vc1->normal,sa,s0) < 0.0 ) )

	mov	ecx, DWORD PTR _vc1$89585[ebp]
	lea	edx, DWORD PTR _s0$89606[ebp]
	push	edx
	lea	eax, DWORD PTR _sa$89621[ebp]
	push	eax
	add	ecx, 416				; 000001a0H
	push	ecx
	call	_triple_prod
	fcomp	QWORD PTR __real@0000000000000000
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 5
	jp	$LN626@sqcurve_fo@4
$LN185@sqcurve_fo@4:

; 656  :          { for ( i = 0 ; i < SDIM ; i++ ) cross1[i] = -cross1[i];

	mov	ecx, DWORD PTR _web+616
	xor	eax, eax
	cmp	ecx, 4
	jl	SHORT $LC547@sqcurve_fo@4
	lea	edx, DWORD PTR [ecx-3]
$LL548@sqcurve_fo@4:
	fld	QWORD PTR _cross1$89602[ebp+eax*8]
	add	eax, 4
	fchs
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-32]
	fld	QWORD PTR _cross1$89602[ebp+eax*8-24]
	fchs
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-24]
	fld	QWORD PTR _cross1$89602[ebp+eax*8-16]
	fchs
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-16]
	fld	QWORD PTR _cross1$89602[ebp+eax*8-8]
	fchs
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LL548@sqcurve_fo@4
$LC547@sqcurve_fo@4:
	cmp	eax, ecx
	jge	$LN682@sqcurve_fo@4
	npad	7
$LC183@sqcurve_fo@4:
	fld	QWORD PTR _cross1$89602[ebp+eax*8]
	inc	eax
	fchs
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LC183@sqcurve_fo@4

; 654  :          if ( (assume_oriented_flag && inverted(get_fe_facet(fe_a))) 
; 655  :  || (!assume_oriented_flag && triple_prod(vc1->normal,sa,s0) < 0.0 ) )

	jmp	$LN682@sqcurve_fo@4

; 661  :               if ( (assume_oriented_flag && inverted(get_fe_facet(fe_b))) 
; 662  :  || (!assume_oriented_flag && triple_prod(vc1->normal,sb,s0) < 0.0 ) )

$LN340@sqcurve_fo@4:
	mov	edx, DWORD PTR _web+460
	mov	eax, DWORD PTR [edi+edx]
	mov	eax, DWORD PTR [eax+24]
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN339@sqcurve_fo@4
	xor	eax, 134217728				; 08000000H
$LN339@sqcurve_fo@4:
	test	eax, 134217728				; 08000000H
	jne	$LN178@sqcurve_fo@4
$LN179@sqcurve_fo@4:

; 664  :               }
; 665  :               else  for ( i = 0 ; i < SDIM ; i++ ) cross1[i] += s[i];

	mov	ecx, DWORD PTR _web+616
	xor	eax, eax
	cmp	ecx, 4
	jl	SHORT $LC553@sqcurve_fo@4
	lea	edx, DWORD PTR [ecx-3]
	npad	8
$LL554@sqcurve_fo@4:
	fld	QWORD PTR _s$89601[ebp+eax*8]
	add	eax, 4
	fadd	QWORD PTR _cross1$89602[ebp+eax*8-32]
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-32]
	fld	QWORD PTR _s$89601[ebp+eax*8-24]
	fadd	QWORD PTR _cross1$89602[ebp+eax*8-24]
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-24]
	fld	QWORD PTR _s$89601[ebp+eax*8-16]
	fadd	QWORD PTR _cross1$89602[ebp+eax*8-16]
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-16]
	fld	QWORD PTR _s$89601[ebp+eax*8-8]
	fadd	QWORD PTR _cross1$89602[ebp+eax*8-8]
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LL554@sqcurve_fo@4
$LC553@sqcurve_fo@4:
	cmp	eax, ecx
	jge	SHORT $LN552@sqcurve_fo@4
	npad	9
$LC172@sqcurve_fo@4:
	fld	QWORD PTR _s$89601[ebp+eax*8]
	inc	eax
	fadd	QWORD PTR _cross1$89602[ebp+eax*8-8]
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LC172@sqcurve_fo@4
$LN552@sqcurve_fo@4:

; 666  :            }
; 667  : 
; 668  :          e1 = SDIM_dot(vc1->force,vc1->force);

	mov	edi, DWORD PTR _vc1$89585[ebp]
	push	ecx
	lea	esi, DWORD PTR [edi+16]
	push	esi
	push	esi
	call	_dot
	fstp	QWORD PTR _e1$[ebp]

; 669  :          denom1 = SDIM_dot(vc1->force,vc1->normal);

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR [edi+416]
	push	ecx
	push	esi
	call	_dot
	fst	QWORD PTR _denom1$89604[ebp]

; 670  :          if ( denom1 != 0.0 )

	fld	ST(0)
	add	esp, 24					; 00000018H
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jnp	$LN964@sqcurve_fo@4

; 671  :          { h = 3*e1/denom1;
; 672  :            switch ( h0_flag )

	mov	eax, DWORD PTR _h0_flag
	fstp	ST(0)
	dec	eax
	fld	QWORD PTR _e1$[ebp]
	fld	ST(0)
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(3)
	je	$LN166@sqcurve_fo@4
	dec	eax
	jne	$LN167@sqcurve_fo@4

; 674  :              case H0_IN_ATTR:   h -= *VREAL(tailv,h0_attr); break;

	mov	edx, DWORD PTR _h0_attr
	mov	eax, DWORD PTR _dymem
	imul	edx, 240				; 000000f0H
	add	edx, DWORD PTR _web+104
	mov	ecx, DWORD PTR [edx+eax+64]
	mov	edx, DWORD PTR _web+12
	mov	eax, DWORD PTR tv6001[ebp]
	mov	edx, DWORD PTR [eax+edx]
	fsub	QWORD PTR [ecx+edx]
	jmp	$LN167@sqcurve_fo@4
$LN615@sqcurve_fo@4:

; 661  :               if ( (assume_oriented_flag && inverted(get_fe_facet(fe_b))) 
; 662  :  || (!assume_oriented_flag && triple_prod(vc1->normal,sb,s0) < 0.0 ) )

	lea	ecx, DWORD PTR _s0$89606[ebp]
	push	ecx
	lea	edx, DWORD PTR _sb$89622[ebp]
	push	edx
	add	esi, 416				; 000001a0H
	push	esi
	call	_triple_prod
	fcomp	QWORD PTR __real@0000000000000000
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 5
	jp	$LN179@sqcurve_fo@4
$LN178@sqcurve_fo@4:

; 663  :               {  for ( i = 0 ; i < SDIM ; i++ ) cross1[i] -= s[i];

	mov	ecx, DWORD PTR _web+616
	xor	eax, eax
	cmp	ecx, 4
	jl	SHORT $LC550@sqcurve_fo@4
	lea	edx, DWORD PTR [ecx-3]
	npad	11
$LL551@sqcurve_fo@4:
	fld	QWORD PTR _cross1$89602[ebp+eax*8]
	add	eax, 4
	fsub	QWORD PTR _s$89601[ebp+eax*8-32]
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-32]
	fld	QWORD PTR _cross1$89602[ebp+eax*8-24]
	fsub	QWORD PTR _s$89601[ebp+eax*8-24]
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-24]
	fld	QWORD PTR _cross1$89602[ebp+eax*8-16]
	fsub	QWORD PTR _s$89601[ebp+eax*8-16]
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-16]
	fld	QWORD PTR _cross1$89602[ebp+eax*8-8]
	fsub	QWORD PTR _s$89601[ebp+eax*8-8]
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LL551@sqcurve_fo@4
$LC550@sqcurve_fo@4:
	cmp	eax, ecx
	jge	$LN552@sqcurve_fo@4
	npad	5
$LC176@sqcurve_fo@4:
	fld	QWORD PTR _cross1$89602[ebp+eax*8]
	inc	eax
	fsub	QWORD PTR _s$89601[ebp+eax*8-8]
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LC176@sqcurve_fo@4

; 664  :               }
; 665  :               else  for ( i = 0 ; i < SDIM ; i++ ) cross1[i] += s[i];

	jmp	$LN552@sqcurve_fo@4
$LN166@sqcurve_fo@4:

; 673  :            { case H0_IN_GLOBAL: h -= h0_value; break;

	fsub	QWORD PTR _h0_value
$LN167@sqcurve_fo@4:

; 675  :            }
; 676  :            if ( mean_curv_int_flag )

	cmp	DWORD PTR _mean_curv_int_flag, 0
	je	SHORT $LN164@sqcurve_fo@4
	fstp	ST(1)

; 677  :            { fudge11 = 2/denom1*vc1->area;

	fld	QWORD PTR __real@4000000000000000
	fdiv	ST(0), ST(3)
	fmul	QWORD PTR [edi]
	fst	QWORD PTR _fudge11$[ebp]

; 678  :              fudge12 = fudge11*e1/denom1/2;

	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fdivrp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _fudge12$[ebp]

; 679  :              fudge13 = h/6;

	fdiv	QWORD PTR __real@4018000000000000
	fstp	QWORD PTR _fudge13$[ebp]

; 680  :            }
; 681  :            else

	jmp	SHORT $LN162@sqcurve_fo@4
$LN164@sqcurve_fo@4:

; 682  :            { fudge11 = 4*h/denom1*vc1->area;

	fld	QWORD PTR __real@4010000000000000
	fmul	ST(0), ST(1)
	fdiv	ST(0), ST(4)
	fmul	QWORD PTR [edi]
	fst	QWORD PTR _fudge11$[ebp]

; 683  :              fudge12 = fudge11*e1/denom1/2;

	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fdivrp	ST(3), ST(0)
	fxch	ST(2)
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _fudge12$[ebp]

; 684  :              fudge13 = h*h/3;

	fmul	ST(0), ST(0)
	fdivrp	ST(1), ST(0)
	fstp	QWORD PTR _fudge13$[ebp]

; 685  :            }

	jmp	SHORT $LN162@sqcurve_fo@4
$LN964@sqcurve_fo@4:

; 670  :          if ( denom1 != 0.0 )

	fstp	ST(1)

; 686  :          }
; 687  :          else  fudge11 = fudge12 = fudge13 = 0.0; 

	fst	QWORD PTR _fudge13$[ebp]
	fst	QWORD PTR _fudge12$[ebp]
	fstp	QWORD PTR _fudge11$[ebp]
$LN162@sqcurve_fo@4:

; 688  : 
; 689  :          e2 = SDIM_dot(vc2->force,vc2->force);

	mov	eax, DWORD PTR _web+616
	mov	edi, DWORD PTR _vc2$89588[ebp]
	push	eax
	lea	esi, DWORD PTR [edi+16]
	push	esi
	push	esi
	call	_dot
	fstp	QWORD PTR _e2$[ebp]

; 690  :          denom2 = SDIM_dot(vc2->force,vc2->normal);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	ebx, DWORD PTR [edi+416]
	push	ebx
	push	esi
	call	_dot
	fst	QWORD PTR _denom2$89605[ebp]

; 691  :          if ( denom2 != 0.0 )

	fld	ST(0)
	add	esp, 24					; 00000018H
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jnp	$LN976@sqcurve_fo@4

; 692  :          { h = 3*e2/denom2;
; 693  :            switch ( h0_flag )

	mov	eax, DWORD PTR _h0_flag
	fstp	ST(0)
	dec	eax
	fld	QWORD PTR _e2$[ebp]
	fld	ST(0)
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(3)
	je	SHORT $LN158@sqcurve_fo@4
	dec	eax
	jne	SHORT $LN159@sqcurve_fo@4

; 695  :              case H0_IN_ATTR:   h -= *VREAL(headv,h0_attr); break;

	mov	edx, DWORD PTR _h0_attr
	mov	eax, DWORD PTR _dymem
	imul	edx, 240				; 000000f0H
	add	edx, DWORD PTR _web+104
	mov	ecx, DWORD PTR [edx+eax+64]
	mov	edx, DWORD PTR _web+12
	mov	eax, DWORD PTR tv6008[ebp]
	mov	edx, DWORD PTR [eax+edx]
	fsub	QWORD PTR [ecx+edx]
	jmp	SHORT $LN159@sqcurve_fo@4
$LN158@sqcurve_fo@4:

; 694  :            { case H0_IN_GLOBAL: h -= h0_value; break;

	fsub	QWORD PTR _h0_value
$LN159@sqcurve_fo@4:

; 696  :            }
; 697  :            if ( mean_curv_int_flag )

	cmp	DWORD PTR _mean_curv_int_flag, 0
	je	SHORT $LN156@sqcurve_fo@4
	fstp	ST(1)

; 698  :            { fudge21 = 2/denom2*vc2->area;

	fld	QWORD PTR __real@4000000000000000
	fdiv	ST(0), ST(3)
	fmul	QWORD PTR [edi]
	fst	QWORD PTR _fudge21$[ebp]

; 699  :              fudge22 = fudge21*e2/denom2/2;

	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fdivrp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _fudge22$[ebp]

; 700  :              fudge23 = h/6;

	fdiv	QWORD PTR __real@4018000000000000
	fstp	QWORD PTR _fudge23$[ebp]

; 701  :            }
; 702  :            else

	jmp	SHORT $LN154@sqcurve_fo@4
$LN156@sqcurve_fo@4:

; 703  :            { fudge21 = 4*h/denom2*vc2->area;

	fld	QWORD PTR __real@4010000000000000
	fmul	ST(0), ST(1)
	fdiv	ST(0), ST(4)
	fmul	QWORD PTR [edi]
	fst	QWORD PTR _fudge21$[ebp]

; 704  :              fudge22 = fudge21*e2/denom2/2;

	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fdivrp	ST(3), ST(0)
	fxch	ST(2)
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _fudge22$[ebp]

; 705  :              fudge23 = h*h/3;

	fmul	ST(0), ST(0)
	fdivrp	ST(1), ST(0)
	fstp	QWORD PTR _fudge23$[ebp]

; 706  :            }

	jmp	SHORT $LN154@sqcurve_fo@4
$LN976@sqcurve_fo@4:

; 691  :          if ( denom2 != 0.0 )

	fstp	ST(1)

; 707  :          }
; 708  :          else  fudge21 = fudge22 = fudge23 = 0.0; 

	fst	QWORD PTR _fudge23$[ebp]
	fst	QWORD PTR _fudge22$[ebp]
	fstp	QWORD PTR _fudge21$[ebp]
$LN154@sqcurve_fo@4:

; 709  : 
; 710  :          cross_prod(vc2->force,sa,cross2);

	lea	eax, DWORD PTR _cross2$89603[ebp]
	push	eax
	lea	ecx, DWORD PTR _sa$89621[ebp]
	push	ecx
	push	esi
	call	_cross_prod
	add	esp, 12					; 0000000cH

; 711  :          if ( (assume_oriented_flag && !inverted(get_fe_facet(fe_a))) 
; 712  :  || (!assume_oriented_flag && triple_prod(vc2->normal,sa,s0) > 0.0 ) )

	cmp	DWORD PTR _assume_oriented_flag, 0
	je	$LN614@sqcurve_fo@4
	mov	ecx, DWORD PTR _fe_a$89619[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN344@sqcurve_fo@4
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN343@sqcurve_fo@4
$LN344@sqcurve_fo@4:
	mov	eax, DWORD PTR tv6068[ebp]
	mov	edx, DWORD PTR _web+460
	mov	edx, DWORD PTR [eax+edx]
	mov	eax, DWORD PTR [edx+24]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN343@sqcurve_fo@4
	xor	eax, 134217728				; 08000000H
$LN343@sqcurve_fo@4:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN642@sqcurve_fo@4
$LN627@sqcurve_fo@4:
	mov	edx, DWORD PTR _web+616
$LN555@sqcurve_fo@4:

; 714  :          }
; 715  :          if ( fe_b != fe_a ) /* check for single edge on constraint */

	mov	eax, DWORD PTR _fe_a$89619[ebp]
	cmp	DWORD PTR _fe_b$89620[ebp], eax
	je	$LN646@sqcurve_fo@4

; 716  :          { cross_prod(vc2->force,sb,s);

	lea	ecx, DWORD PTR _s$89601[ebp]
	push	ecx
	lea	edx, DWORD PTR _sb$89622[ebp]
	push	edx
	lea	eax, DWORD PTR [edi+16]
	push	eax
	call	_cross_prod
	add	esp, 12					; 0000000cH

; 717  :            if ( (assume_oriented_flag && !inverted(get_fe_facet(fe_b))) 
; 718  :  || (!assume_oriented_flag && triple_prod(vc2->normal,sb,s0) > 0.0 ) )

	cmp	DWORD PTR _assume_oriented_flag, 0
	je	$LN613@sqcurve_fo@4
	mov	ecx, DWORD PTR _fe_b$89620[ebp]
	test	ecx, 268435456				; 10000000H
	jne	$LN348@sqcurve_fo@4
	mov	eax, DWORD PTR _NULLFACET
	jmp	$LN347@sqcurve_fo@4
$LN614@sqcurve_fo@4:

; 711  :          if ( (assume_oriented_flag && !inverted(get_fe_facet(fe_a))) 
; 712  :  || (!assume_oriented_flag && triple_prod(vc2->normal,sa,s0) > 0.0 ) )

	lea	eax, DWORD PTR _s0$89606[ebp]
	push	eax
	lea	ecx, DWORD PTR _sa$89621[ebp]
	push	ecx
	push	ebx
	call	_triple_prod
	fcomp	QWORD PTR __real@0000000000000000
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN627@sqcurve_fo@4
$LN642@sqcurve_fo@4:

; 713  :          { for ( i = 0 ; i < SDIM ; i++ ) cross2[i] = -cross2[i];

	mov	edx, DWORD PTR _web+616
	xor	eax, eax
	cmp	edx, 4
	jl	SHORT $LC556@sqcurve_fo@4
	lea	ecx, DWORD PTR [edx-3]
$LL557@sqcurve_fo@4:
	fld	QWORD PTR _cross2$89603[ebp+eax*8]
	add	eax, 4
	fchs
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-32]
	fld	QWORD PTR _cross2$89603[ebp+eax*8-24]
	fchs
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-24]
	fld	QWORD PTR _cross2$89603[ebp+eax*8-16]
	fchs
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-16]
	fld	QWORD PTR _cross2$89603[ebp+eax*8-8]
	fchs
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LL557@sqcurve_fo@4
$LC556@sqcurve_fo@4:
	cmp	eax, edx
	jge	$LN555@sqcurve_fo@4
	npad	2
$LC150@sqcurve_fo@4:
	fld	QWORD PTR _cross2$89603[ebp+eax*8]
	inc	eax
	fchs
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LC150@sqcurve_fo@4

; 711  :          if ( (assume_oriented_flag && !inverted(get_fe_facet(fe_a))) 
; 712  :  || (!assume_oriented_flag && triple_prod(vc2->normal,sa,s0) > 0.0 ) )

	jmp	$LN555@sqcurve_fo@4

; 717  :            if ( (assume_oriented_flag && !inverted(get_fe_facet(fe_b))) 
; 718  :  || (!assume_oriented_flag && triple_prod(vc2->normal,sb,s0) > 0.0 ) )

$LN348@sqcurve_fo@4:
	mov	edx, DWORD PTR _web+460
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+24]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN347@sqcurve_fo@4
	xor	eax, 134217728				; 08000000H
$LN347@sqcurve_fo@4:
	test	eax, 134217728				; 08000000H
	je	$LN643@sqcurve_fo@4
$LN628@sqcurve_fo@4:

; 721  :            }
; 722  :            else  for ( i = 0 ; i < SDIM ; i++ ) cross2[i] += s[i];

	mov	edx, DWORD PTR _web+616
	xor	eax, eax
	cmp	edx, 4
	jl	SHORT $LC562@sqcurve_fo@4
	lea	ecx, DWORD PTR [edx-3]
	npad	1
$LL563@sqcurve_fo@4:
	fld	QWORD PTR _s$89601[ebp+eax*8]
	add	eax, 4
	fadd	QWORD PTR _cross2$89603[ebp+eax*8-32]
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-32]
	fld	QWORD PTR _s$89601[ebp+eax*8-24]
	fadd	QWORD PTR _cross2$89603[ebp+eax*8-24]
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-24]
	fld	QWORD PTR _s$89601[ebp+eax*8-16]
	fadd	QWORD PTR _cross2$89603[ebp+eax*8-16]
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-16]
	fld	QWORD PTR _s$89601[ebp+eax*8-8]
	fadd	QWORD PTR _cross2$89603[ebp+eax*8-8]
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LL563@sqcurve_fo@4
$LC562@sqcurve_fo@4:
	cmp	eax, edx
	jge	SHORT $LN646@sqcurve_fo@4
	npad	3
$LC139@sqcurve_fo@4:
	fld	QWORD PTR _s$89601[ebp+eax*8]
	inc	eax
	fadd	QWORD PTR _cross2$89603[ebp+eax*8-8]
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LC139@sqcurve_fo@4
$LN646@sqcurve_fo@4:
	fld	QWORD PTR __real@3fd0000000000000
	fld	QWORD PTR __real@4008000000000000
	fld	QWORD PTR _e2$[ebp]
$LN992@sqcurve_fo@4:
	fxch	ST(2)
	fxch	ST(1)
$LN100@sqcurve_fo@4:

; 770  :       }
; 771  : 
; 772  :      if ( !(get_vattr(tailv) & (FIXED|BOUNDARY)) )

	mov	ecx, DWORD PTR _web+12
	mov	eax, DWORD PTR tv6001[ebp]
	mov	eax, DWORD PTR [eax+ecx]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 192				; 000000c0H
	xor	ecx, ecx
	or	eax, ecx
	jne	$LN634@sqcurve_fo@4

; 773  :        { /* force on head due to curvature at tail */
; 774  :           if ( mean_curv_int_flag )  /* unsquared curvature */

	cmp	DWORD PTR _mean_curv_int_flag, ecx
	je	$LN98@sqcurve_fo@4

; 775  :              { if ( e1 == 0.0 ) break;

	fld	QWORD PTR _e1$[ebp]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN842@sqcurve_fo@4

; 776  :                for ( i = 0 ; i < SDIM ; i++ )

	xor	esi, esi
	test	edx, edx
	jle	$LN633@sqcurve_fo@4
	mov	edi, DWORD PTR _ec$89582[ebp]
	fstp	ST(0)
	mov	ebx, DWORD PTR _vc1$89585[ebp]
	fstp	ST(0)
	add	edi, 192				; 000000c0H
	npad	4
$LL994@sqcurve_fo@4:

; 777  :                   f[i] = SDIM_dot(vc1->force,ec->deriv2[i])/e1/2;

	push	edx
	fstp	ST(0)
	lea	eax, DWORD PTR [ebx+16]
	push	edi
	push	eax
	call	_dot
	fdiv	QWORD PTR _e1$[ebp]
	mov	edx, DWORD PTR _web+616
	inc	esi
	add	esp, 12					; 0000000cH
	add	edi, 48					; 00000030H
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _f$[ebp+esi*8-8]
	cmp	esi, edx
	jl	SHORT $LL994@sqcurve_fo@4

; 778  :              }
; 779  :           else if ( normal_curvature_flag )

	fld	QWORD PTR __real@3fd0000000000000
	fld	QWORD PTR __real@4018000000000000
	fld	QWORD PTR __real@4000000000000000
	fld	QWORD PTR __real@4008000000000000
	fld	QWORD PTR _e2$[ebp]
	fxch	ST(5)
	fxch	ST(1)
	fxch	ST(3)
	fxch	ST(2)
	jmp	$LN1070@sqcurve_fo@4
$LN613@sqcurve_fo@4:

; 717  :            if ( (assume_oriented_flag && !inverted(get_fe_facet(fe_b))) 
; 718  :  || (!assume_oriented_flag && triple_prod(vc2->normal,sb,s0) > 0.0 ) )

	lea	ecx, DWORD PTR _s0$89606[ebp]
	push	ecx
	lea	edx, DWORD PTR _sb$89622[ebp]
	push	edx
	push	ebx
	call	_triple_prod
	fcomp	QWORD PTR __real@0000000000000000
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN628@sqcurve_fo@4
$LN643@sqcurve_fo@4:

; 719  :            {
; 720  :               for ( i = 0 ; i < SDIM ; i++ ) cross2[i] -= s[i];

	mov	edx, DWORD PTR _web+616
	xor	eax, eax
	cmp	edx, 4
	jl	SHORT $LC559@sqcurve_fo@4
	lea	ecx, DWORD PTR [edx-3]
	npad	8
$LL560@sqcurve_fo@4:
	fld	QWORD PTR _cross2$89603[ebp+eax*8]
	add	eax, 4
	fsub	QWORD PTR _s$89601[ebp+eax*8-32]
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-32]
	fld	QWORD PTR _cross2$89603[ebp+eax*8-24]
	fsub	QWORD PTR _s$89601[ebp+eax*8-24]
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-24]
	fld	QWORD PTR _cross2$89603[ebp+eax*8-16]
	fsub	QWORD PTR _s$89601[ebp+eax*8-16]
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-16]
	fld	QWORD PTR _cross2$89603[ebp+eax*8-8]
	fsub	QWORD PTR _s$89601[ebp+eax*8-8]
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LL560@sqcurve_fo@4
$LC559@sqcurve_fo@4:
	cmp	eax, edx
	jge	$LN646@sqcurve_fo@4
	npad	2
$LC143@sqcurve_fo@4:
	fld	QWORD PTR _cross2$89603[ebp+eax*8]
	inc	eax
	fsub	QWORD PTR _s$89601[ebp+eax*8-8]
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LC143@sqcurve_fo@4

; 721  :            }
; 722  :            else  for ( i = 0 ; i < SDIM ; i++ ) cross2[i] += s[i];

	jmp	$LN646@sqcurve_fo@4
$LN187@sqcurve_fo@4:

; 723  :          }
; 724  :       }
; 725  :      else if ( effective_area_flag )

	cmp	DWORD PTR _effective_area_flag, 0
	je	$LN135@sqcurve_fo@4

; 726  :       { 
; 727  :          facetedge_id fe_a;
; 728  :          facetedge_id fe_b;
; 729  :          REAL sa[MAXCOORD],sb[MAXCOORD];
; 730  : 
; 731  :          fe = get_edge_fe(e_id);

	mov	eax, DWORD PTR _web+124
	mov	ecx, DWORD PTR tv5961[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	test	eax, eax
	je	SHORT $LN676@sqcurve_fo@4
$LN352@sqcurve_fo@4:
	cmp	DWORD PTR tv5972[ebp], 0
	mov	eax, DWORD PTR [eax+28]
	je	SHORT $LN676@sqcurve_fo@4
	xor	eax, 134217728				; 08000000H
$LN676@sqcurve_fo@4:

; 732  :          fe_a = get_prev_edge(fe);

	mov	ecx, DWORD PTR _web+460
	mov	edx, eax
	shr	edx, 27					; 0000001bH
	and	eax, 134217727				; 07ffffffH
	and	edx, 1
	mov	eax, DWORD PTR [ecx+eax*4]
	je	SHORT $LN356@sqcurve_fo@4
	mov	ebx, DWORD PTR [eax+32]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN355@sqcurve_fo@4
$LN356@sqcurve_fo@4:
	mov	ebx, DWORD PTR [eax+28]
$LN355@sqcurve_fo@4:

; 733  :          fe_b = get_prev_edge(get_next_facet(fe));

	test	edx, edx
	je	SHORT $LN360@sqcurve_fo@4
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN359@sqcurve_fo@4
$LN360@sqcurve_fo@4:
	mov	eax, DWORD PTR [eax+40]
$LN359@sqcurve_fo@4:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN364@sqcurve_fo@4
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR _fe_b$89692[ebp], eax
	jmp	SHORT $LN363@sqcurve_fo@4
$LN364@sqcurve_fo@4:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _fe_b$89692[ebp], ecx
$LN363@sqcurve_fo@4:

; 734  :          get_edge_side(e_id,s0);

	mov	eax, DWORD PTR _e_id$[ebp]
	lea	edx, DWORD PTR _s0$89606[ebp]
	push	edx
	push	eax
	call	_get_edge_side

; 735  : 
; 736  :          get_edge_side(get_fe_edge(fe_a),sa);

	mov	edx, DWORD PTR _web+460
	mov	edi, ebx
	and	edi, 134217727				; 07ffffffH
	lea	ecx, DWORD PTR _sa$89693[ebp]
	push	ecx
	add	edi, edi
	add	edi, edi
	mov	eax, DWORD PTR [edx+edi]
	mov	ecx, ebx
	and	ecx, 134217728				; 08000000H
	xor	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_get_edge_side

; 737  :          cross_prod(vc1->normal,sa,cross1);

	mov	esi, DWORD PTR _vc1$89585[ebp]
	lea	edx, DWORD PTR _cross1$89602[ebp]
	push	edx
	lea	eax, DWORD PTR _sa$89693[ebp]
	push	eax
	add	esi, 416				; 000001a0H
	push	esi
	call	_cross_prod
	add	esp, 28					; 0000001cH

; 738  :          if ( (assume_oriented_flag && inverted(get_fe_facet(fe_a))) 
; 739  :  || (!assume_oriented_flag &&  SDIM_dot(cross1,s0) < 0.0 ) )

	cmp	DWORD PTR _assume_oriented_flag, 0
	je	$LN612@sqcurve_fo@4
	push	ebx
	call	_get_fe_facet
	add	esp, 4
	test	eax, 134217728				; 08000000H
	jne	$LN133@sqcurve_fo@4
$LN629@sqcurve_fo@4:
	mov	ecx, DWORD PTR _web+616
$LN564@sqcurve_fo@4:

; 741  :          if ( fe_b != fe_a ) /* check for single edge on constraint */

	cmp	DWORD PTR _fe_b$89692[ebp], ebx
	je	$LN570@sqcurve_fo@4

; 742  :            { get_edge_side(get_fe_edge(fe_b),sb);

	mov	eax, DWORD PTR _fe_b$89692[ebp]
	mov	edx, eax
	lea	ecx, DWORD PTR _sb$89694[ebp]
	push	ecx
	mov	ecx, DWORD PTR _web+460
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]
	push	eax
	call	_get_edge_side

; 743  :               cross_prod(vc1->normal,sb,s);

	lea	eax, DWORD PTR _s$89601[ebp]
	push	eax
	lea	ecx, DWORD PTR _sb$89694[ebp]
	push	ecx
	push	esi
	call	_cross_prod
	add	esp, 20					; 00000014H

; 744  :               if ( (assume_oriented_flag && inverted(get_fe_facet(fe_b))) 
; 745  :  || (!assume_oriented_flag && SDIM_dot(s,s0) < 0.0 ) )

	cmp	DWORD PTR _assume_oriented_flag, 0
	je	$LN611@sqcurve_fo@4
	mov	edx, DWORD PTR _fe_b$89692[ebp]
	push	edx
	call	_get_fe_facet
	add	esp, 4
	test	eax, 134217728				; 08000000H
	jne	$LN126@sqcurve_fo@4
$LN127@sqcurve_fo@4:

; 747  :               else  for ( i = 0 ; i < SDIM ; i++ ) cross1[i] += s[i];

	mov	ecx, DWORD PTR _web+616
	xor	eax, eax
	cmp	ecx, 4
	jl	SHORT $LC571@sqcurve_fo@4
	lea	edx, DWORD PTR [ecx-3]
	npad	3
$LL572@sqcurve_fo@4:
	fld	QWORD PTR _s$89601[ebp+eax*8]
	add	eax, 4
	fadd	QWORD PTR _cross1$89602[ebp+eax*8-32]
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-32]
	fld	QWORD PTR _s$89601[ebp+eax*8-24]
	fadd	QWORD PTR _cross1$89602[ebp+eax*8-24]
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-24]
	fld	QWORD PTR _s$89601[ebp+eax*8-16]
	fadd	QWORD PTR _cross1$89602[ebp+eax*8-16]
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-16]
	fld	QWORD PTR _s$89601[ebp+eax*8-8]
	fadd	QWORD PTR _cross1$89602[ebp+eax*8-8]
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LL572@sqcurve_fo@4
$LC571@sqcurve_fo@4:
	cmp	eax, ecx
	jge	SHORT $LN570@sqcurve_fo@4
	npad	9
$LC120@sqcurve_fo@4:
	fld	QWORD PTR _s$89601[ebp+eax*8]
	inc	eax
	fadd	QWORD PTR _cross1$89602[ebp+eax*8-8]
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LC120@sqcurve_fo@4
$LN570@sqcurve_fo@4:

; 748  :            }
; 749  : 
; 750  :          e1 = SDIM_dot(vc1->force,vc1->force);

	mov	eax, DWORD PTR _vc1$89585[ebp]
	add	eax, 16					; 00000010H
	push	ecx
	push	eax
	push	eax
	call	_dot
	fstp	QWORD PTR _e1$[ebp]

; 751  :          denom1 = SDIM_dot(vc1->normal,vc1->normal);

	mov	eax, DWORD PTR _web+616
	push	eax
	push	esi
	push	esi
	call	_dot
	fstp	QWORD PTR _denom1$89604[ebp]

; 752  :          e2 = SDIM_dot(vc2->force,vc2->force);

	mov	ecx, DWORD PTR _web+616
	mov	esi, DWORD PTR _vc2$89588[ebp]
	lea	eax, DWORD PTR [esi+16]
	push	ecx
	push	eax
	push	eax
	call	_dot
	fstp	QWORD PTR _e2$[ebp]

; 753  :          denom2 = SDIM_dot(vc2->normal,vc2->normal);

	mov	edx, DWORD PTR _web+616
	push	edx
	add	esi, 416				; 000001a0H
	push	esi
	push	esi
	call	_dot
	fstp	QWORD PTR _denom2$89605[ebp]

; 754  : 
; 755  :          cross_prod(vc2->normal,sa,cross2);

	lea	eax, DWORD PTR _cross2$89603[ebp]
	push	eax
	lea	ecx, DWORD PTR _sa$89693[ebp]
	push	ecx
	push	esi
	call	_cross_prod
	add	esp, 60					; 0000003cH

; 756  :          if ( (assume_oriented_flag && !inverted(get_fe_facet(fe_a))) 
; 757  :  || (!assume_oriented_flag &&  SDIM_dot(cross2,s0) > 0.0 ) )

	cmp	DWORD PTR _assume_oriented_flag, 0
	je	$LN610@sqcurve_fo@4
	test	ebx, 268435456				; 10000000H
	jne	$LN372@sqcurve_fo@4
	mov	eax, DWORD PTR _NULLFACET
	jmp	$LN371@sqcurve_fo@4
$LN612@sqcurve_fo@4:

; 738  :          if ( (assume_oriented_flag && inverted(get_fe_facet(fe_a))) 
; 739  :  || (!assume_oriented_flag &&  SDIM_dot(cross1,s0) < 0.0 ) )

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _s0$89606[ebp]
	push	edx
	lea	eax, DWORD PTR _cross1$89602[ebp]
	push	eax
	call	_dot
	fcomp	QWORD PTR __real@0000000000000000
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 5
	jp	$LN629@sqcurve_fo@4
$LN133@sqcurve_fo@4:

; 740  :            for ( i = 0 ; i < SDIM ; i++ ) cross1[i] = -cross1[i];

	mov	ecx, DWORD PTR _web+616
	xor	eax, eax
	cmp	ecx, 4
	jl	SHORT $LC565@sqcurve_fo@4
	lea	edx, DWORD PTR [ecx-3]
$LL566@sqcurve_fo@4:
	fld	QWORD PTR _cross1$89602[ebp+eax*8]
	add	eax, 4
	fchs
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-32]
	fld	QWORD PTR _cross1$89602[ebp+eax*8-24]
	fchs
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-24]
	fld	QWORD PTR _cross1$89602[ebp+eax*8-16]
	fchs
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-16]
	fld	QWORD PTR _cross1$89602[ebp+eax*8-8]
	fchs
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LL566@sqcurve_fo@4
$LC565@sqcurve_fo@4:
	cmp	eax, ecx
	jge	$LN564@sqcurve_fo@4
	npad	2
$LC131@sqcurve_fo@4:
	fld	QWORD PTR _cross1$89602[ebp+eax*8]
	inc	eax
	fchs
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LC131@sqcurve_fo@4

; 738  :          if ( (assume_oriented_flag && inverted(get_fe_facet(fe_a))) 
; 739  :  || (!assume_oriented_flag &&  SDIM_dot(cross1,s0) < 0.0 ) )

	jmp	$LN564@sqcurve_fo@4
$LN611@sqcurve_fo@4:

; 744  :               if ( (assume_oriented_flag && inverted(get_fe_facet(fe_b))) 
; 745  :  || (!assume_oriented_flag && SDIM_dot(s,s0) < 0.0 ) )

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _s0$89606[ebp]
	push	ecx
	lea	edx, DWORD PTR _s$89601[ebp]
	push	edx
	call	_dot
	fcomp	QWORD PTR __real@0000000000000000
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 5
	jp	$LN127@sqcurve_fo@4
$LN126@sqcurve_fo@4:

; 746  :                  for ( i = 0 ; i < SDIM ; i++ ) cross1[i] -= s[i];

	mov	ecx, DWORD PTR _web+616
	xor	eax, eax
	cmp	ecx, 4
	jl	SHORT $LC568@sqcurve_fo@4
	lea	edx, DWORD PTR [ecx-3]
$LL569@sqcurve_fo@4:
	fld	QWORD PTR _cross1$89602[ebp+eax*8]
	add	eax, 4
	fsub	QWORD PTR _s$89601[ebp+eax*8-32]
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-32]
	fld	QWORD PTR _cross1$89602[ebp+eax*8-24]
	fsub	QWORD PTR _s$89601[ebp+eax*8-24]
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-24]
	fld	QWORD PTR _cross1$89602[ebp+eax*8-16]
	fsub	QWORD PTR _s$89601[ebp+eax*8-16]
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-16]
	fld	QWORD PTR _cross1$89602[ebp+eax*8-8]
	fsub	QWORD PTR _s$89601[ebp+eax*8-8]
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LL569@sqcurve_fo@4
$LC568@sqcurve_fo@4:
	cmp	eax, ecx
	jge	$LN570@sqcurve_fo@4
	npad	4
$LC124@sqcurve_fo@4:
	fld	QWORD PTR _cross1$89602[ebp+eax*8]
	inc	eax
	fsub	QWORD PTR _s$89601[ebp+eax*8-8]
	fstp	QWORD PTR _cross1$89602[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LC124@sqcurve_fo@4

; 747  :               else  for ( i = 0 ; i < SDIM ; i++ ) cross1[i] += s[i];

	jmp	$LN570@sqcurve_fo@4

; 756  :          if ( (assume_oriented_flag && !inverted(get_fe_facet(fe_a))) 
; 757  :  || (!assume_oriented_flag &&  SDIM_dot(cross2,s0) > 0.0 ) )

$LN372@sqcurve_fo@4:
	mov	edx, DWORD PTR _web+460
	mov	eax, DWORD PTR [edx+edi]
	mov	eax, DWORD PTR [eax+24]
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN371@sqcurve_fo@4
	xor	eax, 134217728				; 08000000H
$LN371@sqcurve_fo@4:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN644@sqcurve_fo@4
$LN630@sqcurve_fo@4:
	mov	edx, DWORD PTR _web+616
$LN573@sqcurve_fo@4:

; 759  :          if ( fe_b != fe_a ) /* check for single edge on constraint */

	mov	edi, DWORD PTR _fe_b$89692[ebp]
	cmp	edi, ebx
	je	$LN646@sqcurve_fo@4

; 760  :            { cross_prod(vc2->normal,sb,s);

	lea	ecx, DWORD PTR _s$89601[ebp]
	push	ecx
	lea	edx, DWORD PTR _sb$89694[ebp]
	push	edx
	push	esi
	call	_cross_prod
	add	esp, 12					; 0000000cH

; 761  :               if ( (assume_oriented_flag && !inverted(get_fe_facet(fe_b))) 
; 762  :  || (!assume_oriented_flag &&  SDIM_dot(s,s0) > 0.0 ) )

	cmp	DWORD PTR _assume_oriented_flag, 0
	je	$LN609@sqcurve_fo@4
	test	edi, 268435456				; 10000000H
	jne	$LN376@sqcurve_fo@4
	mov	eax, DWORD PTR _NULLFACET
	jmp	$LN375@sqcurve_fo@4
$LN610@sqcurve_fo@4:

; 756  :          if ( (assume_oriented_flag && !inverted(get_fe_facet(fe_a))) 
; 757  :  || (!assume_oriented_flag &&  SDIM_dot(cross2,s0) > 0.0 ) )

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _s0$89606[ebp]
	push	edx
	lea	eax, DWORD PTR _cross2$89603[ebp]
	push	eax
	call	_dot
	fcomp	QWORD PTR __real@0000000000000000
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN630@sqcurve_fo@4
$LN644@sqcurve_fo@4:

; 758  :            for ( i = 0 ; i < SDIM ; i++ ) cross2[i] = -cross2[i];

	mov	edx, DWORD PTR _web+616
	xor	eax, eax
	cmp	edx, 4
	jl	SHORT $LC574@sqcurve_fo@4
	lea	ecx, DWORD PTR [edx-3]
	npad	2
$LL575@sqcurve_fo@4:
	fld	QWORD PTR _cross2$89603[ebp+eax*8]
	add	eax, 4
	fchs
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-32]
	fld	QWORD PTR _cross2$89603[ebp+eax*8-24]
	fchs
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-24]
	fld	QWORD PTR _cross2$89603[ebp+eax*8-16]
	fchs
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-16]
	fld	QWORD PTR _cross2$89603[ebp+eax*8-8]
	fchs
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LL575@sqcurve_fo@4
$LC574@sqcurve_fo@4:
	cmp	eax, edx
	jge	$LN573@sqcurve_fo@4
	npad	6
$LC114@sqcurve_fo@4:
	fld	QWORD PTR _cross2$89603[ebp+eax*8]
	inc	eax
	fchs
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LC114@sqcurve_fo@4

; 756  :          if ( (assume_oriented_flag && !inverted(get_fe_facet(fe_a))) 
; 757  :  || (!assume_oriented_flag &&  SDIM_dot(cross2,s0) > 0.0 ) )

	jmp	$LN573@sqcurve_fo@4

; 761  :               if ( (assume_oriented_flag && !inverted(get_fe_facet(fe_b))) 
; 762  :  || (!assume_oriented_flag &&  SDIM_dot(s,s0) > 0.0 ) )

$LN376@sqcurve_fo@4:
	mov	ecx, DWORD PTR _web+460
	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+24]
	test	edi, 134217728				; 08000000H
	je	SHORT $LN375@sqcurve_fo@4
	xor	eax, 134217728				; 08000000H
$LN375@sqcurve_fo@4:
	test	eax, 134217728				; 08000000H
	je	$LN645@sqcurve_fo@4
$LN631@sqcurve_fo@4:

; 764  :               else  for ( i = 0 ; i < SDIM ; i++ ) cross2[i] += s[i];

	mov	edx, DWORD PTR _web+616
	xor	eax, eax
	cmp	edx, 4
	jl	SHORT $LC580@sqcurve_fo@4
	lea	ecx, DWORD PTR [edx-3]
	npad	1
$LL581@sqcurve_fo@4:
	fld	QWORD PTR _s$89601[ebp+eax*8]
	add	eax, 4
	fadd	QWORD PTR _cross2$89603[ebp+eax*8-32]
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-32]
	fld	QWORD PTR _s$89601[ebp+eax*8-24]
	fadd	QWORD PTR _cross2$89603[ebp+eax*8-24]
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-24]
	fld	QWORD PTR _s$89601[ebp+eax*8-16]
	fadd	QWORD PTR _cross2$89603[ebp+eax*8-16]
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-16]
	fld	QWORD PTR _s$89601[ebp+eax*8-8]
	fadd	QWORD PTR _cross2$89603[ebp+eax*8-8]
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LL581@sqcurve_fo@4
$LC580@sqcurve_fo@4:
	cmp	eax, edx
	jge	$LN646@sqcurve_fo@4
$LC103@sqcurve_fo@4:
	fld	QWORD PTR _s$89601[ebp+eax*8]
	inc	eax
	fadd	QWORD PTR _cross2$89603[ebp+eax*8-8]
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LC103@sqcurve_fo@4

; 765  :            }
; 766  :       }
; 767  :      else  /* squared curvature */

	jmp	$LN646@sqcurve_fo@4
$LN609@sqcurve_fo@4:

; 761  :               if ( (assume_oriented_flag && !inverted(get_fe_facet(fe_b))) 
; 762  :  || (!assume_oriented_flag &&  SDIM_dot(s,s0) > 0.0 ) )

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _s0$89606[ebp]
	push	ecx
	lea	edx, DWORD PTR _s$89601[ebp]
	push	edx
	call	_dot
	fcomp	QWORD PTR __real@0000000000000000
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN631@sqcurve_fo@4
$LN645@sqcurve_fo@4:

; 763  :                  for ( i = 0 ; i < SDIM ; i++ ) cross2[i] -= s[i];

	mov	edx, DWORD PTR _web+616
	xor	eax, eax
	cmp	edx, 4
	jl	SHORT $LC577@sqcurve_fo@4
	lea	ecx, DWORD PTR [edx-3]
	npad	9
$LL578@sqcurve_fo@4:
	fld	QWORD PTR _cross2$89603[ebp+eax*8]
	add	eax, 4
	fsub	QWORD PTR _s$89601[ebp+eax*8-32]
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-32]
	fld	QWORD PTR _cross2$89603[ebp+eax*8-24]
	fsub	QWORD PTR _s$89601[ebp+eax*8-24]
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-24]
	fld	QWORD PTR _cross2$89603[ebp+eax*8-16]
	fsub	QWORD PTR _s$89601[ebp+eax*8-16]
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-16]
	fld	QWORD PTR _cross2$89603[ebp+eax*8-8]
	fsub	QWORD PTR _s$89601[ebp+eax*8-8]
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LL578@sqcurve_fo@4
$LC577@sqcurve_fo@4:
	cmp	eax, edx
	jge	$LN646@sqcurve_fo@4
	npad	2
$LC107@sqcurve_fo@4:
	fld	QWORD PTR _cross2$89603[ebp+eax*8]
	inc	eax
	fsub	QWORD PTR _s$89601[ebp+eax*8-8]
	fstp	QWORD PTR _cross2$89603[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LC107@sqcurve_fo@4

; 764  :               else  for ( i = 0 ; i < SDIM ; i++ ) cross2[i] += s[i];

	jmp	$LN646@sqcurve_fo@4
$LN135@sqcurve_fo@4:

; 768  :       { e1 = SDIM_dot(vc1->force,vc1->force)/vc1->area*3.0/4;

	lea	eax, DWORD PTR [ebx+16]
	push	edx
	push	eax
	push	eax
	call	_dot
	fdiv	QWORD PTR [ebx]

; 769  :          e2 = SDIM_dot(vc2->force,vc2->force)/vc2->area*3.0/4;

	mov	ecx, DWORD PTR _web+616
	mov	esi, DWORD PTR _vc2$89588[ebp]
	lea	eax, DWORD PTR [esi+16]
	push	ecx
	push	eax
	push	eax
	fmul	QWORD PTR __real@4008000000000000
	fmul	QWORD PTR __real@3fd0000000000000
	fstp	QWORD PTR _e1$[ebp]
	call	_dot
	fdiv	QWORD PTR [esi]
	mov	edx, DWORD PTR _web+616
	add	esp, 24					; 00000018H
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR __real@3fd0000000000000
	fmul	ST(2), ST(0)
	fxch	ST(2)
	fst	QWORD PTR _e2$[ebp]
	jmp	$LN992@sqcurve_fo@4
$LN98@sqcurve_fo@4:

; 780  :            for ( i = 0 ; i < SDIM ; i++ )

	xor	esi, esi
	cmp	DWORD PTR _normal_curvature_flag, ecx
	je	$LN92@sqcurve_fo@4
	test	edx, edx
	jle	$LN633@sqcurve_fo@4
	mov	edi, DWORD PTR _ec$89582[ebp]
	fstp	ST(0)
	fstp	ST(0)
	lea	ebx, DWORD PTR [edi+48]
	fstp	ST(0)
	add	edi, 192				; 000000c0H
$LL91@sqcurve_fo@4:

; 781  :              { f[i] = fudge11*SDIM_dot(vc1->force,ec->deriv2[i])
; 782  :                   - fudge12*(cross1[i]+SDIM_dot(vc1->normal,ec->deriv2[i]))
; 783  :                   + fudge13*ec->deriv[1][i] ;

	mov	eax, DWORD PTR _vc1$89585[ebp]
	push	edx
	add	eax, 16					; 00000010H
	push	edi
	push	eax
	call	_dot
	fmul	QWORD PTR _fudge11$[ebp]
	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR _vc1$89585[ebp]
	push	edx
	fstp	QWORD PTR tv20691[ebp]
	add	eax, 416				; 000001a0H
	push	edi
	push	eax
	call	_dot
	fadd	QWORD PTR _cross1$89602[ebp+esi*8]
	mov	edx, DWORD PTR _web+616
	inc	esi
	fmul	QWORD PTR _fudge12$[ebp]
	add	esp, 24					; 00000018H
	add	edi, 48					; 00000030H
	add	ebx, 8
	fsubr	QWORD PTR tv20691[ebp]
	fld	QWORD PTR [ebx-8]
	fmul	QWORD PTR _fudge13$[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _f$[ebp+esi*8-8]
	cmp	esi, edx
	jl	SHORT $LL91@sqcurve_fo@4

; 784  :              }
; 785  :           else if ( effective_area_flag )

	fld	QWORD PTR __real@3fd0000000000000
	fld	QWORD PTR __real@4018000000000000
	fld	QWORD PTR __real@4000000000000000
	fld	QWORD PTR __real@3fe0000000000000
	fld	QWORD PTR __real@4008000000000000
	fld	QWORD PTR _e2$[ebp]
	fxch	ST(5)
	fxch	ST(4)
	fxch	ST(1)
	fxch	ST(3)
	fxch	ST(1)
	fxch	ST(2)
	jmp	$LN78@sqcurve_fo@4
$LN92@sqcurve_fo@4:
	cmp	DWORD PTR _effective_area_flag, ecx
	je	$LN87@sqcurve_fo@4

; 786  :              for ( i = 0 ; i < SDIM ; i++ )

	test	edx, edx
	jle	$LN633@sqcurve_fo@4
	mov	edi, DWORD PTR _ec$89582[ebp]
	fld	QWORD PTR __real@4018000000000000
	fld	QWORD PTR _denom1$89604[ebp]
	lea	ebx, DWORD PTR [edi+48]
	add	edi, 192				; 000000c0H
$LN86@sqcurve_fo@4:

; 787  :              { if ( denom1 != 0.0 )

	fld	ST(0)
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jnp	$LN83@sqcurve_fo@4

; 788  :                    f[i] = 6*SDIM_dot(vc1->force,ec->deriv2[i])/denom1*vc1->area
; 789  :                      + 3*e1/denom1*ec->deriv[1][i] 
; 790  :                      - 6*e1/denom1/denom1*cross1[i]*vc1->area;

	mov	eax, DWORD PTR _vc1$89585[ebp]
	fstp	ST(3)
	fstp	ST(0)
	push	edx
	fstp	ST(0)
	add	eax, 16					; 00000010H
	fstp	ST(1)
	push	edi
	fstp	ST(1)
	push	eax
	fstp	ST(0)
	call	_dot
	fld	QWORD PTR __real@4018000000000000
	mov	eax, DWORD PTR _vc1$89585[ebp]
	fmul	ST(1), ST(0)
	mov	edx, DWORD PTR _web+616
	fld	QWORD PTR _denom1$89604[ebp]
	add	esp, 12					; 0000000cH
	fdiv	ST(2), ST(0)
	fxch	ST(2)
	fmul	QWORD PTR [eax]
	fld	QWORD PTR _e1$[ebp]
	fld	ST(0)
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(5)
	fmul	QWORD PTR [ebx]
	faddp	ST(3), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fmul	QWORD PTR _cross1$89602[ebp+esi*8]
	fmul	QWORD PTR [eax]
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _f$[ebp+esi*8]
	fld	QWORD PTR __real@3fd0000000000000
	fld	QWORD PTR _e2$[ebp]
	fxch	ST(4)
	fxch	ST(1)
	fxch	ST(3)
	fxch	ST(1)
$LN85@sqcurve_fo@4:

; 786  :              for ( i = 0 ; i < SDIM ; i++ )

	inc	esi
	add	edi, 48					; 00000030H
	add	ebx, 8
	cmp	esi, edx
	jl	$LN86@sqcurve_fo@4
	fstp	ST(0)

; 792  :              }
; 793  :           else  /* squared curvature */

	fld	QWORD PTR __real@4000000000000000
	fld	QWORD PTR __real@3fe0000000000000
	jmp	$LN78@sqcurve_fo@4
$LN83@sqcurve_fo@4:

; 791  :                else f[i] = 0.0;

	fstp	QWORD PTR _f$[ebp+esi*8]
	jmp	SHORT $LN85@sqcurve_fo@4
$LN87@sqcurve_fo@4:

; 794  :            for ( i = 0 ; i < SDIM ; i++ )

	test	edx, edx
	jle	$LN633@sqcurve_fo@4
	mov	edi, DWORD PTR _ec$89582[ebp]
	fstp	ST(0)
	fstp	ST(0)
	lea	ebx, DWORD PTR [edi+48]
	fstp	ST(0)
	add	edi, 192				; 000000c0H
	fld	QWORD PTR _e1$[ebp]
	fmul	QWORD PTR __real@3ff5555555555555
	fstp	QWORD PTR tv6509[ebp]
	jmp	SHORT $LN80@sqcurve_fo@4
$LL1000@sqcurve_fo@4:
	fstp	ST(0)
	fstp	ST(1)
	fstp	ST(0)
$LN80@sqcurve_fo@4:

; 795  :              f[i] = (- 4/3.0*e1*ec->deriv[1][i]
; 796  :              + 2*SDIM_dot(vc1->force,ec->deriv2[i]))/vc1->area*3.0/4;

	mov	eax, DWORD PTR _vc1$89585[ebp]
	push	edx
	add	eax, 16					; 00000010H
	push	edi
	push	eax
	call	_dot
	fld	QWORD PTR __real@4000000000000000
	mov	eax, DWORD PTR _vc1$89585[ebp]
	fmul	ST(1), ST(0)
	fld	QWORD PTR tv6509[ebp]
	mov	edx, DWORD PTR _web+616
	fmul	QWORD PTR [ebx]
	inc	esi
	add	esp, 12					; 0000000cH
	add	edi, 48					; 00000030H
	fsubp	ST(2), ST(0)
	add	ebx, 8
	fxch	ST(1)
	fdiv	QWORD PTR [eax]
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR __real@3fd0000000000000
	fmul	ST(2), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR _f$[ebp+esi*8-8]
	cmp	esi, edx
	jl	SHORT $LL1000@sqcurve_fo@4

; 794  :            for ( i = 0 ; i < SDIM ; i++ )

	fld	QWORD PTR __real@4018000000000000
	fld	QWORD PTR __real@3fe0000000000000
	fld	QWORD PTR _e2$[ebp]
	fxch	ST(5)
$LN1070@sqcurve_fo@4:
	fxch	ST(1)
$LN78@sqcurve_fo@4:

; 797  :           if ( h0_flag && !normal_curvature_flag )

	cmp	DWORD PTR _h0_flag, 0
	je	$LN77@sqcurve_fo@4
	cmp	DWORD PTR _normal_curvature_flag, 0
	jne	$LN77@sqcurve_fo@4

; 798  :            {REAL fd[MAXCOORD],ad[MAXCOORD],net;
; 799  :              fe = get_edge_fe(e_id);

	mov	ecx, DWORD PTR _web+124
	fstp	ST(3)
	mov	edx, DWORD PTR tv5961[ebp]
	fstp	ST(0)
	mov	eax, DWORD PTR [ecx+edx*4]
	fstp	ST(0)
	fstp	ST(1)
	fstp	ST(1)
	fstp	ST(0)
	test	eax, eax
	jne	SHORT $LN380@sqcurve_fo@4
	xor	edi, edi
	jmp	SHORT $LN381@sqcurve_fo@4
$LN633@sqcurve_fo@4:

; 778  :              }
; 779  :           else if ( normal_curvature_flag )

	fld	QWORD PTR __real@4018000000000000
	fld	QWORD PTR __real@4000000000000000
	fld	QWORD PTR __real@3fe0000000000000
	jmp	SHORT $LN78@sqcurve_fo@4

; 798  :            {REAL fd[MAXCOORD],ad[MAXCOORD],net;
; 799  :              fe = get_edge_fe(e_id);

$LN380@sqcurve_fo@4:
	cmp	DWORD PTR tv5972[ebp], 0
	mov	eax, DWORD PTR [eax+28]
	je	SHORT $LN379@sqcurve_fo@4
	xor	eax, 134217728				; 08000000H
$LN379@sqcurve_fo@4:
	mov	edi, eax
$LN381@sqcurve_fo@4:

; 800  : /* Gotta pay attention to wrapping
; 801  :              wa = get_coord(get_fe_headv(get_next_edge(fe)));
; 802  :              wb = get_coord(get_fe_headv(get_next_edge(get_next_facet(fe))));
; 803  : */
; 804  :              get_edge_side(get_fe_edge(get_next_edge(fe)),wa);

	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	mov	ebx, edi
	add	esi, esi
	shr	ebx, 27					; 0000001bH
	add	esi, esi
	and	ebx, 1
	je	SHORT $LN384@sqcurve_fo@4
	mov	eax, DWORD PTR _web+460
	mov	ecx, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [ecx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN383@sqcurve_fo@4
$LN384@sqcurve_fo@4:
	mov	edx, DWORD PTR _web+460
	mov	eax, DWORD PTR [esi+edx]
	mov	eax, DWORD PTR [eax+32]
$LN383@sqcurve_fo@4:
	mov	edx, eax
	lea	ecx, DWORD PTR _wa$89607[ebp]
	push	ecx
	mov	ecx, DWORD PTR _web+460
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]
	push	eax
	call	_get_edge_side

; 805  :              get_edge_side(get_fe_edge(get_next_edge(get_next_facet(fe))),wb);

	mov	ecx, DWORD PTR _web+460
	add	esp, 8
	test	ebx, ebx
	je	SHORT $LN390@sqcurve_fo@4
	mov	eax, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN389@sqcurve_fo@4
$LN390@sqcurve_fo@4:
	mov	edx, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [edx+40]
$LN389@sqcurve_fo@4:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN394@sqcurve_fo@4
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN393@sqcurve_fo@4
$LN394@sqcurve_fo@4:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]
$LN393@sqcurve_fo@4:
	lea	edx, DWORD PTR _wb$89608[ebp]
	push	edx
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	push	eax
	call	_get_edge_side
	add	esp, 8

; 806  :              f_id = get_fe_facet(fe);

	test	edi, 268435456				; 10000000H
	jne	SHORT $LN400@sqcurve_fo@4
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN399@sqcurve_fo@4
$LN400@sqcurve_fo@4:
	mov	edx, DWORD PTR _web+460
	mov	eax, DWORD PTR [esi+edx]
	mov	eax, DWORD PTR [eax+24]
	test	ebx, ebx
	je	SHORT $LN399@sqcurve_fo@4
	xor	eax, 134217728				; 08000000H
$LN399@sqcurve_fo@4:

; 807  :              if ( inverted(f_id) )
; 808  :                for ( i = 0 ; i < SDIM ; i++ ) w[i] = wb[i] - wa[i];

	mov	ecx, DWORD PTR _web+616
	test	eax, 134217728				; 08000000H
	je	$LN76@sqcurve_fo@4
	xor	eax, eax
	cmp	ecx, 4
	jl	SHORT $LC583@sqcurve_fo@4
	lea	edx, DWORD PTR [ecx-3]
$LL584@sqcurve_fo@4:
	fld	QWORD PTR _wb$89608[ebp+eax*8]
	add	eax, 4
	fsub	QWORD PTR _wa$89607[ebp+eax*8-32]
	fstp	QWORD PTR _w$89609[ebp+eax*8-32]
	fld	QWORD PTR _wb$89608[ebp+eax*8-24]
	fsub	QWORD PTR _wa$89607[ebp+eax*8-24]
	fstp	QWORD PTR _w$89609[ebp+eax*8-24]
	fld	QWORD PTR _wb$89608[ebp+eax*8-16]
	fsub	QWORD PTR _wa$89607[ebp+eax*8-16]
	fstp	QWORD PTR _w$89609[ebp+eax*8-16]
	fld	QWORD PTR _wb$89608[ebp+eax*8-8]
	fsub	QWORD PTR _wa$89607[ebp+eax*8-8]
	fstp	QWORD PTR _w$89609[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LL584@sqcurve_fo@4
$LC583@sqcurve_fo@4:
	cmp	eax, ecx
	jge	$LN681@sqcurve_fo@4
	npad	11
$LC75@sqcurve_fo@4:
	fld	QWORD PTR _wb$89608[ebp+eax*8]
	inc	eax
	fsub	QWORD PTR _wa$89607[ebp+eax*8-8]
	fstp	QWORD PTR _w$89609[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LC75@sqcurve_fo@4

; 809  :              else for ( i = 0 ; i < SDIM ; i++ ) w[i] = wa[i] - wb[i];

	jmp	$LN681@sqcurve_fo@4
$LN76@sqcurve_fo@4:
	xor	eax, eax
	cmp	ecx, 4
	jl	SHORT $LC586@sqcurve_fo@4
	lea	edx, DWORD PTR [ecx-3]
	npad	7
$LL587@sqcurve_fo@4:
	fld	QWORD PTR _wa$89607[ebp+eax*8]
	add	eax, 4
	fsub	QWORD PTR _wb$89608[ebp+eax*8-32]
	fstp	QWORD PTR _w$89609[ebp+eax*8-32]
	fld	QWORD PTR _wa$89607[ebp+eax*8-24]
	fsub	QWORD PTR _wb$89608[ebp+eax*8-24]
	fstp	QWORD PTR _w$89609[ebp+eax*8-24]
	fld	QWORD PTR _wa$89607[ebp+eax*8-16]
	fsub	QWORD PTR _wb$89608[ebp+eax*8-16]
	fstp	QWORD PTR _w$89609[ebp+eax*8-16]
	fld	QWORD PTR _wa$89607[ebp+eax*8-8]
	fsub	QWORD PTR _wb$89608[ebp+eax*8-8]
	fstp	QWORD PTR _w$89609[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LL587@sqcurve_fo@4
$LC586@sqcurve_fo@4:
	cmp	eax, ecx
	jge	SHORT $LN681@sqcurve_fo@4
	npad	1
$LC71@sqcurve_fo@4:
	fld	QWORD PTR _wa$89607[ebp+eax*8]
	inc	eax
	fsub	QWORD PTR _wb$89608[ebp+eax*8-8]
	fstp	QWORD PTR _w$89609[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LC71@sqcurve_fo@4
$LN681@sqcurve_fo@4:

; 810  :              cross_prod(w,vc1->force,aw);

	mov	edi, DWORD PTR _vc1$89585[ebp]
	lea	ecx, DWORD PTR _aw$89610[ebp]
	push	ecx
	lea	eax, DWORD PTR [edi+16]
	push	eax
	lea	edx, DWORD PTR _w$89609[ebp]
	push	edx
	call	_cross_prod

; 811  :              cross_prod(w,vc1->normal,vw);

	lea	ecx, DWORD PTR _vw$89611[ebp]
	push	ecx
	lea	eax, DWORD PTR [edi+416]
	push	eax
	lea	edx, DWORD PTR _w$89609[ebp]
	push	edx
	call	_cross_prod

; 812  :              for ( i = 0 ; i < SDIM ; i++ )

	mov	edx, DWORD PTR _web+616
	add	esp, 24					; 00000018H
	xor	esi, esi
	test	edx, edx
	jle	$LN648@sqcurve_fo@4

; 810  :              cross_prod(w,vc1->force,aw);

	mov	edi, DWORD PTR _ec$89582[ebp]
	lea	ebx, DWORD PTR [edi+48]
	add	edi, 192				; 000000c0H
	jmp	SHORT $LN68@sqcurve_fo@4
$LL1004@sqcurve_fo@4:
	fstp	ST(1)
	fstp	ST(0)
$LN68@sqcurve_fo@4:

; 813  :              { fd[i] = (SDIM_dot(vc1->normal,ec->deriv2[i])/vc1->norm
; 814  :                            + aw[i]/vc1->norm - vc1->f*2*vw[i]/vc1->norm/vc1->norm)*3;

	mov	eax, DWORD PTR _vc1$89585[ebp]
	push	edx
	add	eax, 416				; 000001a0H
	push	edi
	push	eax
	call	_dot
	mov	eax, DWORD PTR _vc1$89585[ebp]
	fdiv	QWORD PTR [eax+464]
	mov	edx, DWORD PTR _web+616
	inc	esi
	add	esp, 12					; 0000000cH
	add	edi, 48					; 00000030H
	add	ebx, 8
	fld	QWORD PTR _aw$89610[ebp+esi*8-8]
	fdiv	QWORD PTR [eax+464]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax+64]
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR _vw$89611[ebp+esi*8-8]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	QWORD PTR [eax+464]
	fdiv	QWORD PTR [eax+464]
	fsubp	ST(2), ST(0)
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(2), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR _fd$89760[ebp+esi*8-8]

; 815  :                ad[i] = ec->deriv[1][i]/3;

	fld	QWORD PTR [ebx-8]
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR _ad$89761[ebp+esi*8-8]
	cmp	esi, edx
	jl	$LL1004@sqcurve_fo@4

; 812  :              for ( i = 0 ; i < SDIM ; i++ )

	mov	edi, eax
	jmp	SHORT $LN66@sqcurve_fo@4
$LN648@sqcurve_fo@4:
	fld	QWORD PTR __real@4008000000000000
	fld	QWORD PTR __real@4000000000000000
$LN66@sqcurve_fo@4:

; 816  :              }
; 817  :              area = vc1->area/3;
; 818  :              a = vc1->a/3;

	fld	QWORD PTR [edi+8]

; 819  :              for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	fdiv	ST(0), ST(2)
	test	edx, edx
	jle	SHORT $LN1008@sqcurve_fo@4

; 816  :              }
; 817  :              area = vc1->area/3;
; 818  :              a = vc1->a/3;

	mov	ecx, DWORD PTR _ec$89582[ebp]
	mov	esi, DWORD PTR _force2$89596[ebp]
	add	ecx, 528				; 00000210H
$LN65@sqcurve_fo@4:

; 820  :              {
; 821  :                net = 2*vc1->term*fd[i]*a 
; 822  :                        + vc1->term*vc1->term*(ad[i]+ec->aderiv[1][i]/3);
; 823  :                if ( self_similar_flag )

	cmp	DWORD PTR _self_similar_flag, 0
	fld	QWORD PTR [edi+536]
	fld	QWORD PTR [ecx-384]
	fdiv	ST(0), ST(4)
	fadd	QWORD PTR _ad$89761[ebp+eax*8]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	fld	QWORD PTR [edi+536]
	fmul	ST(0), ST(3)
	fmul	QWORD PTR _fd$89760[ebp+eax*8]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	je	SHORT $LN62@sqcurve_fo@4

; 824  :                  net += 2*vc1->term*(-selfsim_coeff*ec->volderiv[1][i])*a;

	fld	QWORD PTR _selfsim_coeff
	fmul	QWORD PTR [ecx]
	fchs
	fld	QWORD PTR [edi+536]
	fmul	ST(0), ST(4)
	fmulp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
$LN62@sqcurve_fo@4:

; 825  :                force2[i] -= modulus*net;

	fmul	QWORD PTR _modulus$[ebp]
	inc	eax
	add	ecx, 8
	fsubr	QWORD PTR [esi+eax*8-8]
	fstp	QWORD PTR [esi+eax*8-8]
	mov	edx, DWORD PTR _web+616
	cmp	eax, edx
	jl	SHORT $LN65@sqcurve_fo@4
$LN1008@sqcurve_fo@4:

; 819  :              for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)

; 826  :              }
; 827  :            }
; 828  :           else

	fld	QWORD PTR __real@3fd0000000000000
	fld	QWORD PTR __real@4018000000000000
	fld	QWORD PTR __real@3fe0000000000000
	fld	QWORD PTR _e2$[ebp]
	fxch	ST(5)
	fxch	ST(3)
	fxch	ST(4)
	fxch	ST(1)
$LN649@sqcurve_fo@4:

; 831  :        }
; 832  : 
; 833  :      if ( !(get_vattr(headv) & (FIXED|BOUNDARY)) )

	mov	ecx, DWORD PTR _web+12
	mov	eax, DWORD PTR tv6008[ebp]
	mov	eax, DWORD PTR [eax+ecx]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 192				; 000000c0H
	xor	ecx, ecx
	or	eax, ecx
	jne	$LN860@sqcurve_fo@4

; 834  :        { /* force on tail due to curvature at head */
; 835  :           if ( mean_curv_int_flag )  /* unsquared curvature */

	cmp	DWORD PTR _mean_curv_int_flag, ecx
	je	$LN863@sqcurve_fo@4
	fstp	ST(3)
	fstp	ST(0)
	fstp	ST(0)
	fstp	ST(1)

; 836  :            { if ( e2 == 0.0 ) break;

	fld	ST(1)
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jnp	$LN866@sqcurve_fo@4

; 837  :                for ( i = 0 ; i < SDIM ; i++ )

	xor	ebx, ebx
	mov	DWORD PTR _i$[ebp], ebx
	test	edx, edx
	jle	$LN869@sqcurve_fo@4
	mov	eax, DWORD PTR _ec$89582[ebp]
	add	eax, 240				; 000000f0H
	mov	DWORD PTR tv13037[ebp], eax
$LN54@sqcurve_fo@4:
	lea	eax, DWORD PTR _f$[ebp+ebx*8]

; 838  :                   for ( j = 0,f [i] = 0.0 ; j < SDIM ; j++ )

	xor	edi, edi
	fst	QWORD PTR [eax]
	mov	DWORD PTR tv5824[ebp], eax
	cmp	edx, 4
	jl	SHORT $LN665@sqcurve_fo@4
	mov	ecx, DWORD PTR _vc2$89588[ebp]
	mov	ebx, DWORD PTR tv5824[ebp]
	mov	eax, DWORD PTR tv13037[ebp]
	fld	QWORD PTR [ebx]
	lea	esi, DWORD PTR [edx-4]
	shr	esi, 2
	add	ecx, 24					; 00000018H
	inc	esi
	lea	edi, DWORD PTR [esi*4]
$LN590@sqcurve_fo@4:

; 839  :                        f[i] += vc2->force[j]*ec->deriv2[j][i]/e2/2;

	fld	QWORD PTR [eax-48]
	add	eax, 192				; 000000c0H
	fmul	QWORD PTR [ecx-8]
	add	ecx, 32					; 00000020H
	dec	esi
	fdiv	ST(0), ST(4)
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax-192]
	fmul	QWORD PTR [ecx-32]
	fdiv	ST(0), ST(4)
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax-144]
	fmul	QWORD PTR [ecx-24]
	fdiv	ST(0), ST(4)
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax-96]
	fmul	QWORD PTR [ecx-16]
	fdiv	ST(0), ST(4)
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	jne	SHORT $LN590@sqcurve_fo@4

; 838  :                   for ( j = 0,f [i] = 0.0 ; j < SDIM ; j++ )

	fstp	QWORD PTR [ebx]
	mov	ebx, DWORD PTR _i$[ebp]
$LN665@sqcurve_fo@4:
	cmp	edi, edx
	jge	SHORT $LN53@sqcurve_fo@4
	mov	ecx, DWORD PTR _vc2$89588[ebp]
	lea	eax, DWORD PTR [edi+edi*2+12]
	lea	esi, DWORD PTR [ecx+edi*8+16]
	lea	ecx, DWORD PTR [ebx+eax*2]
	mov	eax, DWORD PTR _ec$89582[ebp]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	eax, edx
	sub	eax, edi
	mov	edi, DWORD PTR tv5824[ebp]
	fld	QWORD PTR [edi]
$LC51@sqcurve_fo@4:

; 839  :                        f[i] += vc2->force[j]*ec->deriv2[j][i]/e2/2;

	fld	QWORD PTR [esi]
	add	ecx, 48					; 00000030H
	fmul	QWORD PTR [ecx-48]
	add	esi, 8
	dec	eax
	fdiv	ST(0), ST(4)
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	jne	SHORT $LC51@sqcurve_fo@4
	fstp	QWORD PTR [edi]
$LN53@sqcurve_fo@4:

; 837  :                for ( i = 0 ; i < SDIM ; i++ )

	add	DWORD PTR tv13037[ebp], 8
	inc	ebx
	mov	DWORD PTR _i$[ebp], ebx
	cmp	ebx, edx
	jl	$LN54@sqcurve_fo@4
$LN869@sqcurve_fo@4:

; 859  :            for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(2)
	fstp	ST(0)
$LN661@sqcurve_fo@4:

; 863  :            }
; 864  : 
; 865  :           if ( h0_flag && !normal_curvature_flag )

	cmp	DWORD PTR _h0_flag, 0
	je	$LN23@sqcurve_fo@4
	cmp	DWORD PTR _normal_curvature_flag, 0
	jne	$LN23@sqcurve_fo@4

; 866  :             {REAL fd[MAXCOORD],ad[MAXCOORD],net;
; 867  :              fe = get_edge_fe(e_id);

	mov	ecx, DWORD PTR _web+124
	fstp	ST(0)
	mov	edx, DWORD PTR tv5961[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	test	eax, eax
	jne	$LN404@sqcurve_fo@4
	xor	edi, edi
	jmp	$LN405@sqcurve_fo@4
$LN77@sqcurve_fo@4:

; 829  :            for ( i = 0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	test	edx, edx
	jle	$LN649@sqcurve_fo@4
	mov	eax, DWORD PTR _force2$89596[ebp]
	lea	esi, DWORD PTR _f$[ebp]
	sub	esi, eax
$LN651@sqcurve_fo@4:

; 830  :              force2[i] -= modulus*f[i];

	fld	QWORD PTR [esi+eax]
	inc	ecx
	fmul	QWORD PTR _modulus$[ebp]
	add	eax, 8
	fsubr	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	mov	edx, DWORD PTR _web+616
	cmp	ecx, edx
	jl	SHORT $LN651@sqcurve_fo@4

; 829  :            for ( i = 0 ; i < SDIM ; i++ )

	jmp	$LN649@sqcurve_fo@4
$LN634@sqcurve_fo@4:

; 826  :              }
; 827  :            }
; 828  :           else

	fld	QWORD PTR __real@4018000000000000
	fld	QWORD PTR __real@4000000000000000
	fld	QWORD PTR __real@3fe0000000000000
	jmp	$LN649@sqcurve_fo@4
$LN863@sqcurve_fo@4:

; 834  :        { /* force on tail due to curvature at head */
; 835  :           if ( mean_curv_int_flag )  /* unsquared curvature */

	fstp	ST(0)

; 840  :            }
; 841  :           else if ( normal_curvature_flag )

	cmp	DWORD PTR _normal_curvature_flag, ecx
	je	$LN47@sqcurve_fo@4
	fstp	ST(2)

; 842  :            for ( i = 0 ; i < SDIM ; i++ )

	xor	ebx, ebx
	fstp	ST(1)
	mov	DWORD PTR _i$[ebp], ebx
	fstp	ST(0)
	fstp	ST(0)
	fstp	ST(0)
	test	edx, edx
	jle	$LN673@sqcurve_fo@4
	mov	eax, DWORD PTR _ec$89582[ebp]
	fld	QWORD PTR _fudge23$[ebp]
	fld	QWORD PTR _fudge22$[ebp]
	lea	esi, DWORD PTR _cross2$89603[ebp]
	fld	QWORD PTR _fudge21$[ebp]
	sub	esi, eax
	lea	ecx, DWORD PTR _f$[ebp]
	sub	eax, ecx
	mov	DWORD PTR tv14642[ebp], esi
	mov	DWORD PTR tv14647[ebp], eax
	jmp	SHORT $LN46@sqcurve_fo@4
$LN683@sqcurve_fo@4:
	mov	eax, DWORD PTR tv14647[ebp]
	mov	esi, DWORD PTR tv14642[ebp]
$LN46@sqcurve_fo@4:
	lea	eax, DWORD PTR [eax+ebx*8]

; 843  :              { f[i] = fudge23*ec->deriv[0][i] - fudge22*cross2[i];

	fld	QWORD PTR _f$[ebp+eax]
	lea	eax, DWORD PTR _f$[ebp+eax]
	fmul	ST(0), ST(3)
	lea	ecx, DWORD PTR _f$[ebp+ebx*8]
	fld	QWORD PTR [eax+esi]

; 844  :                for ( j = 0 ; j < SDIM ; j++ )

	xor	edi, edi
	fmul	ST(0), ST(3)
	mov	DWORD PTR tv5824[ebp], ecx
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR [ecx]
	cmp	edx, 4
	jl	$LN666@sqcurve_fo@4

; 843  :              { f[i] = fudge23*ec->deriv[0][i] - fudge22*cross2[i];

	mov	ecx, DWORD PTR _vc2$89588[ebp]
	mov	ebx, DWORD PTR tv5824[ebp]
	fld	QWORD PTR [ebx]
	lea	esi, DWORD PTR [edx-4]
	shr	esi, 2
	add	ecx, 416				; 000001a0H
	add	eax, 240				; 000000f0H
	inc	esi
	lea	edi, DWORD PTR [esi*4]

; 844  :                for ( j = 0 ; j < SDIM ; j++ )

$LN593@sqcurve_fo@4:

; 845  :                       f[i] += fudge21*vc2->force[j]*ec->deriv2[j][i]
; 846  :                                - fudge22*vc2->normal[j]*ec->deriv2[j][i];

	fld	QWORD PTR [ecx-400]
	add	eax, 192				; 000000c0H
	fmul	ST(0), ST(2)
	add	ecx, 32					; 00000020H
	dec	esi
	fmul	QWORD PTR [eax-240]
	fld	QWORD PTR [ecx-32]
	fmul	ST(0), ST(4)
	fmul	QWORD PTR [eax-240]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-424]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [eax-192]
	fld	QWORD PTR [ecx-24]
	fmul	ST(0), ST(4)
	fmul	QWORD PTR [eax-192]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-416]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [eax-144]
	fld	QWORD PTR [ecx-16]
	fmul	ST(0), ST(4)
	fmul	QWORD PTR [eax-144]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-408]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [eax-96]
	fld	QWORD PTR [ecx-8]
	fmul	ST(0), ST(4)
	fmul	QWORD PTR [eax-96]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jne	SHORT $LN593@sqcurve_fo@4

; 843  :              { f[i] = fudge23*ec->deriv[0][i] - fudge22*cross2[i];

	fstp	QWORD PTR [ebx]
	mov	ebx, DWORD PTR _i$[ebp]
$LN666@sqcurve_fo@4:

; 844  :                for ( j = 0 ; j < SDIM ; j++ )

	cmp	edi, edx
	jge	SHORT $LN45@sqcurve_fo@4
	mov	eax, DWORD PTR _vc2$89588[ebp]
	mov	esi, DWORD PTR _ec$89582[ebp]
	lea	ecx, DWORD PTR [eax+edi*8+416]
	lea	eax, DWORD PTR [edi+edi*2+12]
	lea	eax, DWORD PTR [ebx+eax*2]
	lea	eax, DWORD PTR [esi+eax*8]
	mov	esi, edx
	sub	esi, edi
	mov	edi, DWORD PTR tv5824[ebp]
	fld	QWORD PTR [edi]
$LC43@sqcurve_fo@4:

; 845  :                       f[i] += fudge21*vc2->force[j]*ec->deriv2[j][i]
; 846  :                                - fudge22*vc2->normal[j]*ec->deriv2[j][i];

	fld	QWORD PTR [ecx-400]
	add	eax, 48					; 00000030H
	fmul	ST(0), ST(2)
	add	ecx, 8
	dec	esi
	fmul	QWORD PTR [eax-48]
	fld	QWORD PTR [ecx-8]
	fmul	ST(0), ST(4)
	fmul	QWORD PTR [eax-48]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jne	SHORT $LC43@sqcurve_fo@4
	fstp	QWORD PTR [edi]
$LN45@sqcurve_fo@4:

; 842  :            for ( i = 0 ; i < SDIM ; i++ )

	inc	ebx
	mov	DWORD PTR _i$[ebp], ebx
	cmp	ebx, edx
	jl	$LN683@sqcurve_fo@4
	fstp	ST(1)
	fstp	ST(0)
	fstp	ST(0)

; 847  :              }
; 848  :           else if ( effective_area_flag )

	fldz
	jmp	$LN661@sqcurve_fo@4
$LN47@sqcurve_fo@4:
	cmp	DWORD PTR _effective_area_flag, ecx
	je	$LN901@sqcurve_fo@4

; 849  :            for ( i = 0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	fstp	ST(0)
	fstp	ST(2)
	mov	DWORD PTR _i$[ebp], ecx
	test	edx, edx
	jle	$LN904@sqcurve_fo@4

; 855  :                  }
; 856  :                else f[i] = 0.0;

	mov	eax, DWORD PTR _ec$89582[ebp]
	fld	QWORD PTR _denom2$89605[ebp]
	fldz
	lea	esi, DWORD PTR _cross2$89603[ebp]
	sub	esi, eax
	mov	edi, eax
	lea	eax, DWORD PTR _f$[ebp]
	sub	edi, eax
	mov	DWORD PTR tv14642[ebp], esi
	mov	DWORD PTR tv14647[ebp], edi
	jmp	SHORT $LN38@sqcurve_fo@4
$LN684@sqcurve_fo@4:
	mov	edi, DWORD PTR tv14647[ebp]
	mov	esi, DWORD PTR tv14642[ebp]
$LN38@sqcurve_fo@4:

; 850  :              { if ( denom2 != 0.0 )

	fld	ST(1)
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN35@sqcurve_fo@4

; 851  :                  { f[i] =    3*e2/denom2*ec->deriv[0][i] 
; 852  :                                - 6*e2/denom2/denom2*cross2[i]*vc2->area;

	fld	ST(4)
	lea	eax, DWORD PTR [edi+ecx*8]
	fmul	ST(0), ST(3)
	lea	eax, DWORD PTR _f$[ebp+eax]

; 853  :                    for ( j = 0 ; j < SDIM ; j++ )

	xor	edi, edi
	fdiv	ST(0), ST(2)
	fmul	QWORD PTR [eax]
	fld	ST(5)
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fmul	QWORD PTR [eax+esi]
	mov	esi, DWORD PTR _vc2$89588[ebp]
	fmul	QWORD PTR [esi]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _f$[ebp+ecx*8]
	cmp	edx, 4
	jl	$LC595@sqcurve_fo@4

; 851  :                  { f[i] =    3*e2/denom2*ec->deriv[0][i] 
; 852  :                                - 6*e2/denom2/denom2*cross2[i]*vc2->area;

	mov	ecx, esi
	lea	esi, DWORD PTR [edx-4]
	shr	esi, 2
	add	ecx, 24					; 00000018H
	add	eax, 240				; 000000f0H
	inc	esi
	lea	edi, DWORD PTR [esi*4]
$LN654@sqcurve_fo@4:

; 854  :                       f[i] += 6*vc2->force[j]*ec->deriv2[j][i]/denom2*vc2->area;

	fld	QWORD PTR [ecx-8]
	mov	ebx, DWORD PTR _vc2$89588[ebp]
	fmul	ST(0), ST(4)
	add	eax, 192				; 000000c0H
	add	ecx, 32					; 00000020H
	dec	esi
	fmul	QWORD PTR [eax-240]
	fdiv	ST(0), ST(2)
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR _i$[ebp]
	fadd	QWORD PTR _f$[ebp+ebx*8]
	mov	ebx, DWORD PTR _vc2$89588[ebp]
	fld	QWORD PTR [ecx-32]
	fmul	ST(0), ST(5)
	fmul	QWORD PTR [eax-192]
	fdiv	ST(0), ST(3)
	fmul	QWORD PTR [ebx]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-24]
	fmul	ST(0), ST(5)
	fmul	QWORD PTR [eax-144]
	fdiv	ST(0), ST(3)
	fmul	QWORD PTR [ebx]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-16]
	fmul	ST(0), ST(5)
	fmul	QWORD PTR [eax-96]
	fdiv	ST(0), ST(3)
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR _i$[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _f$[ebp+ebx*8]
	jne	SHORT $LN654@sqcurve_fo@4

; 851  :                  { f[i] =    3*e2/denom2*ec->deriv[0][i] 
; 852  :                                - 6*e2/denom2/denom2*cross2[i]*vc2->area;

	mov	ecx, ebx
$LC595@sqcurve_fo@4:

; 853  :                    for ( j = 0 ; j < SDIM ; j++ )

	cmp	edi, edx
	jge	SHORT $LN37@sqcurve_fo@4
	mov	eax, DWORD PTR _vc2$89588[ebp]
	mov	ebx, DWORD PTR _ec$89582[ebp]
	lea	esi, DWORD PTR [eax+edi*8+16]
	lea	eax, DWORD PTR [edi+edi*2+12]
	lea	eax, DWORD PTR [ecx+eax*2]
	lea	eax, DWORD PTR [ebx+eax*8]
	mov	ebx, edx
	sub	ebx, edi
	mov	edi, DWORD PTR _vc2$89588[ebp]
$LC34@sqcurve_fo@4:

; 854  :                       f[i] += 6*vc2->force[j]*ec->deriv2[j][i]/denom2*vc2->area;

	fld	QWORD PTR [esi]
	add	eax, 48					; 00000030H
	fmul	ST(0), ST(4)
	add	esi, 8
	dec	ebx
	fmul	QWORD PTR [eax-48]
	fdiv	ST(0), ST(2)
	fmul	QWORD PTR [edi]
	fadd	QWORD PTR _f$[ebp+ecx*8]
	fstp	QWORD PTR _f$[ebp+ecx*8]
	jne	SHORT $LC34@sqcurve_fo@4

; 855  :                  }
; 856  :                else f[i] = 0.0;

	jmp	SHORT $LN37@sqcurve_fo@4
$LN35@sqcurve_fo@4:
	fst	QWORD PTR _f$[ebp+ecx*8]
$LN37@sqcurve_fo@4:

; 849  :            for ( i = 0 ; i < SDIM ; i++ )

	inc	ecx
	mov	DWORD PTR _i$[ebp], ecx
	cmp	ecx, edx
	jl	$LN684@sqcurve_fo@4
	fstp	ST(2)
	fstp	ST(0)
	fstp	ST(1)
	fstp	ST(1)

; 857  :              }
; 858  :           else  /* squared curvature */

	jmp	$LN661@sqcurve_fo@4
$LN901@sqcurve_fo@4:

; 859  :            for ( i = 0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	fstp	ST(1)
	mov	DWORD PTR _i$[ebp], ecx
	test	edx, edx
	jle	$LN926@sqcurve_fo@4
	mov	eax, DWORD PTR _ec$89582[ebp]
	fxch	ST(3)
	fmul	QWORD PTR __real@bff5555555555555
	lea	esi, DWORD PTR _f$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv14647[ebp], eax
	jmp	SHORT $LN29@sqcurve_fo@4
$LN685@sqcurve_fo@4:
	mov	eax, DWORD PTR tv14647[ebp]
$LN29@sqcurve_fo@4:

; 860  :            { f[i] = -4/3.0*e2*ec->deriv[0][i]/vc2->area*3.0/4;

	mov	esi, DWORD PTR _vc2$89588[ebp]
	fld	ST(0)
	lea	eax, DWORD PTR [eax+ecx*8]
	fmul	QWORD PTR _f$[ebp+eax]
	lea	eax, DWORD PTR _f$[ebp+eax]

; 861  :               for ( j = 0 ; j < SDIM ; j++ )

	xor	edi, edi
	fdiv	QWORD PTR [esi]
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(3)
	fstp	QWORD PTR _f$[ebp+ecx*8]
	cmp	edx, 4
	jl	$LC598@sqcurve_fo@4

; 860  :            { f[i] = -4/3.0*e2*ec->deriv[0][i]/vc2->area*3.0/4;

	mov	ecx, esi
	lea	esi, DWORD PTR [edx-4]
	shr	esi, 2
	add	ecx, 24					; 00000018H
	add	eax, 240				; 000000f0H
	inc	esi
	lea	edi, DWORD PTR [esi*4]
$LN660@sqcurve_fo@4:

; 862  :                   f[i] += 2*vc2->force[j]*ec->deriv2[j][i]/vc2->area*3.0/4;

	fld	QWORD PTR [ecx-8]
	mov	ebx, DWORD PTR _vc2$89588[ebp]
	fmul	ST(0), ST(4)
	add	eax, 192				; 000000c0H
	add	ecx, 32					; 00000020H
	dec	esi
	fmul	QWORD PTR [eax-240]
	fdiv	QWORD PTR [ebx]
	mov	ebx, DWORD PTR _i$[ebp]
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(3)
	fadd	QWORD PTR _f$[ebp+ebx*8]
	mov	ebx, DWORD PTR _vc2$89588[ebp]
	fld	QWORD PTR [ecx-32]
	fmul	ST(0), ST(5)
	fmul	QWORD PTR [eax-192]
	fdiv	QWORD PTR [ebx]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-24]
	fmul	ST(0), ST(5)
	fmul	QWORD PTR [eax-144]
	fdiv	QWORD PTR [ebx]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-16]
	fmul	ST(0), ST(5)
	fmul	QWORD PTR [eax-96]
	fdiv	QWORD PTR [ebx]
	mov	ebx, DWORD PTR _i$[ebp]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _f$[ebp+ebx*8]
	jne	SHORT $LN660@sqcurve_fo@4

; 860  :            { f[i] = -4/3.0*e2*ec->deriv[0][i]/vc2->area*3.0/4;

	mov	ecx, ebx
$LC598@sqcurve_fo@4:

; 861  :               for ( j = 0 ; j < SDIM ; j++ )

	cmp	edi, edx
	jge	SHORT $LN28@sqcurve_fo@4
	mov	eax, DWORD PTR _vc2$89588[ebp]
	mov	ebx, DWORD PTR _ec$89582[ebp]
	lea	esi, DWORD PTR [eax+edi*8+16]
	lea	eax, DWORD PTR [edi+edi*2+12]
	lea	eax, DWORD PTR [ecx+eax*2]
	lea	eax, DWORD PTR [ebx+eax*8]
	mov	ebx, edx
	sub	ebx, edi
	mov	edi, DWORD PTR _vc2$89588[ebp]
$LC26@sqcurve_fo@4:

; 862  :                   f[i] += 2*vc2->force[j]*ec->deriv2[j][i]/vc2->area*3.0/4;

	fld	QWORD PTR [esi]
	add	eax, 48					; 00000030H
	fmul	ST(0), ST(4)
	add	esi, 8
	dec	ebx
	fmul	QWORD PTR [eax-48]
	fdiv	QWORD PTR [edi]
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(3)
	fadd	QWORD PTR _f$[ebp+ecx*8]
	fstp	QWORD PTR _f$[ebp+ecx*8]
	jne	SHORT $LC26@sqcurve_fo@4
$LN28@sqcurve_fo@4:

; 859  :            for ( i = 0 ; i < SDIM ; i++ )

	inc	ecx
	mov	DWORD PTR _i$[ebp], ecx
	cmp	ecx, edx
	jl	$LN685@sqcurve_fo@4
	fstp	ST(1)
	fstp	ST(2)
	fstp	ST(1)
	fstp	ST(0)
	fldz
	jmp	$LN661@sqcurve_fo@4
$LN926@sqcurve_fo@4:
	fstp	ST(1)
$LN904@sqcurve_fo@4:
	fstp	ST(0)
	fstp	ST(0)
	fstp	ST(0)
$LN673@sqcurve_fo@4:
	fldz
	jmp	$LN661@sqcurve_fo@4

; 866  :             {REAL fd[MAXCOORD],ad[MAXCOORD],net;
; 867  :              fe = get_edge_fe(e_id);

$LN404@sqcurve_fo@4:
	cmp	DWORD PTR tv5972[ebp], 0
	mov	eax, DWORD PTR [eax+28]
	je	SHORT $LN686@sqcurve_fo@4
	xor	eax, 134217728				; 08000000H
$LN686@sqcurve_fo@4:
	mov	edi, eax
$LN405@sqcurve_fo@4:

; 868  :              get_edge_side(get_fe_edge(get_next_edge(fe)),wa);

	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	mov	ebx, edi
	add	esi, esi
	shr	ebx, 27					; 0000001bH
	add	esi, esi
	and	ebx, 1
	je	SHORT $LN408@sqcurve_fo@4
	mov	eax, DWORD PTR _web+460
	mov	ecx, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [ecx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN407@sqcurve_fo@4
$LN408@sqcurve_fo@4:
	mov	edx, DWORD PTR _web+460
	mov	eax, DWORD PTR [esi+edx]
	mov	eax, DWORD PTR [eax+32]
$LN407@sqcurve_fo@4:
	mov	edx, eax
	lea	ecx, DWORD PTR _wa$89607[ebp]
	push	ecx
	mov	ecx, DWORD PTR _web+460
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]
	push	eax
	call	_get_edge_side

; 869  :              get_edge_side(get_fe_edge(get_next_edge(get_next_facet(fe))),wb);

	mov	ecx, DWORD PTR _web+460
	add	esp, 8
	test	ebx, ebx
	je	SHORT $LN414@sqcurve_fo@4
	mov	eax, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN413@sqcurve_fo@4
$LN414@sqcurve_fo@4:
	mov	edx, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [edx+40]
$LN413@sqcurve_fo@4:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN418@sqcurve_fo@4
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN417@sqcurve_fo@4
$LN418@sqcurve_fo@4:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]
$LN417@sqcurve_fo@4:
	lea	edx, DWORD PTR _wb$89608[ebp]
	push	edx
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	push	eax
	call	_get_edge_side
	add	esp, 8

; 870  :              f_id = get_fe_facet(fe);

	test	edi, 268435456				; 10000000H
	jne	SHORT $LN424@sqcurve_fo@4
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN423@sqcurve_fo@4
$LN424@sqcurve_fo@4:
	mov	edx, DWORD PTR _web+460
	mov	eax, DWORD PTR [esi+edx]
	mov	eax, DWORD PTR [eax+24]
	test	ebx, ebx
	je	SHORT $LN423@sqcurve_fo@4
	xor	eax, 134217728				; 08000000H
$LN423@sqcurve_fo@4:

; 871  :              if ( inverted(f_id) )
; 872  :                for ( i = 0 ; i < SDIM ; i++ ) w[i] = wb[i] - wa[i];

	mov	ecx, DWORD PTR _web+616
	test	eax, 134217728				; 08000000H
	je	$LN22@sqcurve_fo@4
	xor	eax, eax
	cmp	ecx, 4
	jl	SHORT $LC601@sqcurve_fo@4
	lea	edx, DWORD PTR [ecx-3]
	npad	5
$LL602@sqcurve_fo@4:
	fld	QWORD PTR _wb$89608[ebp+eax*8]
	add	eax, 4
	fsub	QWORD PTR _wa$89607[ebp+eax*8-32]
	fstp	QWORD PTR _w$89609[ebp+eax*8-32]
	fld	QWORD PTR _wb$89608[ebp+eax*8-24]
	fsub	QWORD PTR _wa$89607[ebp+eax*8-24]
	fstp	QWORD PTR _w$89609[ebp+eax*8-24]
	fld	QWORD PTR _wb$89608[ebp+eax*8-16]
	fsub	QWORD PTR _wa$89607[ebp+eax*8-16]
	fstp	QWORD PTR _w$89609[ebp+eax*8-16]
	fld	QWORD PTR _wb$89608[ebp+eax*8-8]
	fsub	QWORD PTR _wa$89607[ebp+eax*8-8]
	fstp	QWORD PTR _w$89609[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LL602@sqcurve_fo@4
$LC601@sqcurve_fo@4:
	cmp	eax, ecx
	jge	$LN603@sqcurve_fo@4
	npad	13
$LC21@sqcurve_fo@4:
	fld	QWORD PTR _wb$89608[ebp+eax*8]
	inc	eax
	fsub	QWORD PTR _wa$89607[ebp+eax*8-8]
	fstp	QWORD PTR _w$89609[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LC21@sqcurve_fo@4

; 873  :              else for ( i = 0 ; i < SDIM ; i++ ) w[i] = wa[i] - wb[i];

	jmp	$LN603@sqcurve_fo@4
$LN22@sqcurve_fo@4:
	xor	eax, eax
	cmp	ecx, 4
	jl	SHORT $LC604@sqcurve_fo@4
	lea	edx, DWORD PTR [ecx-3]
	npad	7
$LL605@sqcurve_fo@4:
	fld	QWORD PTR _wa$89607[ebp+eax*8]
	add	eax, 4
	fsub	QWORD PTR _wb$89608[ebp+eax*8-32]
	fstp	QWORD PTR _w$89609[ebp+eax*8-32]
	fld	QWORD PTR _wa$89607[ebp+eax*8-24]
	fsub	QWORD PTR _wb$89608[ebp+eax*8-24]
	fstp	QWORD PTR _w$89609[ebp+eax*8-24]
	fld	QWORD PTR _wa$89607[ebp+eax*8-16]
	fsub	QWORD PTR _wb$89608[ebp+eax*8-16]
	fstp	QWORD PTR _w$89609[ebp+eax*8-16]
	fld	QWORD PTR _wa$89607[ebp+eax*8-8]
	fsub	QWORD PTR _wb$89608[ebp+eax*8-8]
	fstp	QWORD PTR _w$89609[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LL605@sqcurve_fo@4
$LC604@sqcurve_fo@4:
	cmp	eax, ecx
	jge	SHORT $LN603@sqcurve_fo@4
	npad	1
$LC17@sqcurve_fo@4:
	fld	QWORD PTR _wa$89607[ebp+eax*8]
	inc	eax
	fsub	QWORD PTR _wb$89608[ebp+eax*8-8]
	fstp	QWORD PTR _w$89609[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LC17@sqcurve_fo@4
$LN603@sqcurve_fo@4:

; 874  :              cross_prod(vc2->force,w,aw);

	mov	esi, DWORD PTR _vc2$89588[ebp]
	lea	ecx, DWORD PTR _aw$89610[ebp]
	push	ecx
	lea	edx, DWORD PTR _w$89609[ebp]
	push	edx
	lea	eax, DWORD PTR [esi+16]
	push	eax
	call	_cross_prod

; 875  :              cross_prod(vc2->normal,w,vw);

	lea	eax, DWORD PTR _vw$89611[ebp]
	push	eax
	lea	ecx, DWORD PTR _w$89609[ebp]
	push	ecx
	lea	edx, DWORD PTR [esi+416]
	push	edx
	call	_cross_prod

; 876  :              for ( i = 0 ; i < SDIM ; i++ )

	mov	edx, DWORD PTR _web+616
	add	esp, 24					; 00000018H
	xor	edi, edi
	test	edx, edx
	jle	$LN650@sqcurve_fo@4
	fld	QWORD PTR [esi+64]
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR __real@4008000000000000
$LN14@sqcurve_fo@4:

; 877  :              { for ( j = 0, fd[i] = 0.0 ; j < SDIM ; j++ )

	fldz
	xor	eax, eax
	fstp	QWORD PTR _fd$89821[ebp+edi*8]
	cmp	edx, 4
	jl	SHORT $LC607@sqcurve_fo@4
	mov	ecx, DWORD PTR _vc2$89588[ebp]
	mov	eax, DWORD PTR _ec$89582[ebp]
	lea	esi, DWORD PTR [edx-4]
	shr	esi, 2
	add	ecx, 424				; 000001a8H
	inc	esi
	lea	eax, DWORD PTR [eax+edi*8+240]
	lea	ebx, DWORD PTR [esi*4]
$LN608@sqcurve_fo@4:

; 878  :                   fd[i] += vc2->normal[j]*ec->deriv2[j][i];

	fld	QWORD PTR [eax-48]
	add	eax, 192				; 000000c0H
	fmul	QWORD PTR [ecx-8]
	add	ecx, 32					; 00000020H
	dec	esi
	fadd	QWORD PTR _fd$89821[ebp+edi*8]
	fld	QWORD PTR [ecx-32]
	fmul	QWORD PTR [eax-192]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax-144]
	fmul	QWORD PTR [ecx-24]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax-96]
	fmul	QWORD PTR [ecx-16]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _fd$89821[ebp+edi*8]
	jne	SHORT $LN608@sqcurve_fo@4

; 877  :              { for ( j = 0, fd[i] = 0.0 ; j < SDIM ; j++ )

	mov	eax, ebx
$LC607@sqcurve_fo@4:
	cmp	eax, edx
	jge	SHORT $LN658@sqcurve_fo@4
	mov	ecx, DWORD PTR _vc2$89588[ebp]
	mov	esi, DWORD PTR _ec$89582[ebp]
	lea	ebx, DWORD PTR [ecx+eax*8+416]
	lea	ecx, DWORD PTR [eax+eax*2+12]
	lea	ecx, DWORD PTR [edi+ecx*2]
	lea	esi, DWORD PTR [esi+ecx*8]
	mov	ecx, edx
	sub	ecx, eax
$LC11@sqcurve_fo@4:

; 878  :                   fd[i] += vc2->normal[j]*ec->deriv2[j][i];

	fld	QWORD PTR [esi]
	add	esi, 48					; 00000030H
	fmul	QWORD PTR [ebx]
	add	ebx, 8
	dec	ecx
	fadd	QWORD PTR _fd$89821[ebp+edi*8]
	fstp	QWORD PTR _fd$89821[ebp+edi*8]
	jne	SHORT $LC11@sqcurve_fo@4
$LN658@sqcurve_fo@4:

; 877  :              { for ( j = 0, fd[i] = 0.0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR _vc2$89588[ebp]

; 879  :                fd[i] = (fd[i]/vc2->norm
; 880  :                            + aw[i]/vc2->norm - vc2->f*2*vw[i]/vc2->norm/vc2->norm)*3;

	fld	QWORD PTR _aw$89610[ebp+edi*8]
	fdiv	QWORD PTR [eax+464]
	inc	edi
	fld	QWORD PTR _fd$89821[ebp+edi*8-8]
	fdiv	QWORD PTR [eax+464]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _vw$89611[ebp+edi*8-8]
	fmul	ST(0), ST(4)
	fdiv	QWORD PTR [eax+464]
	fdiv	QWORD PTR [eax+464]

; 881  :                ad[i] = ec->deriv[0][i]/3;

	mov	eax, DWORD PTR _ec$89582[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _fd$89821[ebp+edi*8-8]
	fld	QWORD PTR [eax+edi*8-8]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR _ad$89822[ebp+edi*8-8]
	cmp	edi, edx
	jl	$LN14@sqcurve_fo@4

; 876  :              for ( i = 0 ; i < SDIM ; i++ )

	mov	esi, DWORD PTR _vc2$89588[ebp]
	fstp	ST(2)
	jmp	SHORT $LN12@sqcurve_fo@4
$LN650@sqcurve_fo@4:
	fld	QWORD PTR __real@4008000000000000
	fld	QWORD PTR __real@4000000000000000
$LN12@sqcurve_fo@4:

; 882  :              }
; 883  :              area = vc2->area/3;
; 884  :              a = vc2->a/3;

	fld	QWORD PTR [esi+8]

; 885  :              for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	fdiv	ST(0), ST(2)
	test	edx, edx
	jle	$LN1053@sqcurve_fo@4

; 882  :              }
; 883  :              area = vc2->area/3;
; 884  :              a = vc2->a/3;

	mov	ecx, DWORD PTR _ec$89582[ebp]
	fld	QWORD PTR _modulus$[ebp]
	mov	edi, DWORD PTR _force1$89591[ebp]
	add	ecx, 480				; 000001e0H
$LN8@sqcurve_fo@4:

; 886  :              {
; 887  :                net = 2*vc2->term*fd[i]*a 
; 888  :                        + vc2->term*vc2->term*(ad[i]+ec->aderiv[0][i]/3);
; 889  :                if ( self_similar_flag )

	cmp	DWORD PTR _self_similar_flag, 0
	fld	QWORD PTR [esi+536]
	fld	QWORD PTR [ecx-384]
	fdiv	ST(0), ST(5)
	fadd	QWORD PTR _ad$89822[ebp+eax*8]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	fld	QWORD PTR [esi+536]
	fmul	ST(0), ST(4)
	fmul	QWORD PTR _fd$89821[ebp+eax*8]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	je	SHORT $LN5@sqcurve_fo@4

; 890  :                  net += 2*vc2->term*(-selfsim_coeff*ec->volderiv[0][i])*a;

	fld	QWORD PTR _selfsim_coeff
	fmul	QWORD PTR [ecx]
	fchs
	fld	QWORD PTR [esi+536]
	fmul	ST(0), ST(5)
	fmulp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
$LN5@sqcurve_fo@4:

; 891  :                force1[i] -= modulus*net;

	fmul	ST(0), ST(1)
	inc	eax
	add	ecx, 8
	fsubr	QWORD PTR [edi+eax*8-8]
	fstp	QWORD PTR [edi+eax*8-8]
	mov	edx, DWORD PTR _web+616
	cmp	eax, edx
	jl	SHORT $LN8@sqcurve_fo@4

; 885  :              for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(1)
	fstp	ST(2)
	fstp	ST(0)

; 892  :              }
; 893  :            }
; 894  :           else

	jmp	SHORT $LN1071@sqcurve_fo@4
$LN23@sqcurve_fo@4:

; 895  :            for ( i = 0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN195@sqcurve_fo@4
	mov	eax, DWORD PTR _force1$89591[ebp]
	fld	QWORD PTR _modulus$[ebp]
	lea	esi, DWORD PTR _f$[ebp]
	sub	esi, eax
$LN3@sqcurve_fo@4:

; 896  :              force1[i] -= modulus*f[i];

	fld	QWORD PTR [esi+eax]
	inc	ecx
	fmul	ST(0), ST(1)
	add	eax, 8
	fsubr	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	mov	edx, DWORD PTR _web+616
	cmp	ecx, edx
	jl	SHORT $LN3@sqcurve_fo@4

; 895  :            for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)
	jmp	SHORT $LN195@sqcurve_fo@4
$LN860@sqcurve_fo@4:

; 831  :        }
; 832  : 
; 833  :      if ( !(get_vattr(headv) & (FIXED|BOUNDARY)) )

	fstp	ST(3)
	fstp	ST(0)
	fstp	ST(0)
	fstp	ST(1)

; 895  :            for ( i = 0 ; i < SDIM ; i++ )

	jmp	SHORT $LN1072@sqcurve_fo@4
$LN1053@sqcurve_fo@4:

; 885  :              for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)
$LN1072@sqcurve_fo@4:
	fstp	ST(1)
$LN1071@sqcurve_fo@4:
	fstp	ST(0)

; 892  :              }
; 893  :            }
; 894  :           else

	fldz
$LN195@sqcurve_fo@4:

; 617  :   }
; 618  : 
; 619  :   FOR_ALL_EDGES(e_id)

	mov	ecx, DWORD PTR tv5961[ebp]
	mov	eax, DWORD PTR _web+124
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	ebx, DWORD PTR [ecx]
	mov	DWORD PTR _e_id$[ebp], ebx
	shr	ebx, 28					; 0000001cH
	and	ebx, 1
	jne	$LN655@sqcurve_fo@4
	jmp	SHORT $LN1073@sqcurve_fo@4
$LN842@sqcurve_fo@4:

; 775  :              { if ( e1 == 0.0 ) break;

	fstp	ST(0)
	fstp	ST(0)
	jmp	SHORT $LN1073@sqcurve_fo@4
$LN866@sqcurve_fo@4:

; 836  :            { if ( e2 == 0.0 ) break;

	fstp	ST(0)
	fstp	ST(1)
$LN1073@sqcurve_fo@4:
	fstp	ST(0)
$LN662@sqcurve_fo@4:

; 897  :        }
; 898  :   }
; 899  : 
; 900  :   temp_free((char*)e_curve);  e_curve = NULL;

	mov	edx, DWORD PTR _e_curve
	push	edx
	call	_temp_free

; 901  :   temp_free((char*)v_curve);  v_curve = NULL;

	mov	eax, DWORD PTR _v_curve
	xor	esi, esi
	push	eax
	mov	DWORD PTR _e_curve, esi
	call	_temp_free
	add	esp, 8
	pop	edi
	mov	DWORD PTR _v_curve, esi
	pop	esi
	pop	ebx
$LN285@sqcurve_fo@4:

; 902  : } // end sqcurve_force_end()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_sqcurve_force_end ENDP
_TEXT	ENDS
END
