; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\ALICE.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_valice
_DATA	SEGMENT
COMM	_carter_power:QWORD
COMM	_radius:QWORD
COMM	_xalice:QWORD:0aH
_valice	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	03ff0000000000000r		; 1
	ORG $+56
_DATA	ENDS
PUBLIC	_get_fe_edge
EXTRN	_web:BYTE
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
;	COMDAT _get_fe_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_edge PROC					; COMDAT

; 43   : {

	push	ebp
	mov	ebp, esp

; 44   :   edge_id e_id;
; 45   :     
; 46   :   e_id = feptr(fe_id)->fe_edge_id;

	mov	eax, DWORD PTR _fe_id$[ebp]

; 47   : 
; 48   :   /*
; 49   :   if ( inverted(fe_id) ) invert(e_id);
; 50   :   return e_id;
; 51   :   */
; 52   :   
; 53   :   return same_sign(e_id,fe_id);

	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]

; 54   : }

	pop	ebp
	ret	0
_get_fe_edge ENDP
_TEXT	ENDS
PUBLIC	_get_next_edge
; Function compile flags: /Ogtp
;	COMDAT _get_next_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_next_edge PROC					; COMDAT

; 76   : {

	push	ebp
	mov	ebp, esp

; 77   :   if ( inverted(fe_id) ) return inverse_id(feptr(fe_id)->nextedge[0]);

	mov	eax, DWORD PTR _fe_id$[ebp]
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_next_e
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H

; 79   : }

	pop	ebp
	ret	0
$LN2@get_next_e:

; 78   :   else return feptr(fe_id)->nextedge[1];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]

; 79   : }

	pop	ebp
	ret	0
_get_next_edge ENDP
_TEXT	ENDS
PUBLIC	_get_edge_headv
EXTRN	_dymem:DWORD
; Function compile flags: /Ogtp
;	COMDAT _get_edge_headv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_headv PROC					; COMDAT

; 200  : {

	push	ebp
	mov	ebp, esp

; 201  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 202  :      return get_edge_vertices(e_id)[0];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_h
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 205  : }

	pop	ebp
	ret	0
$LN2@get_edge_h:

; 203  :   else
; 204  :      return get_edge_vertices(e_id)[web.headvnum];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 205  : }

	pop	ebp
	ret	0
_get_edge_headv ENDP
_TEXT	ENDS
PUBLIC	_get_facet_body
; Function compile flags: /Ogtp
;	COMDAT _get_facet_body
_TEXT	SEGMENT
_f_id$ = 8						; size = 4
_get_facet_body PROC					; COMDAT

; 250  : {

	push	ebp
	mov	ebp, esp

; 251  :   if ( web.skel[BODY].count == 0 ) return NULLID;

	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN4@get_facet_
$LN7@get_facet_:
	xor	eax, eax

; 255  : }

	pop	ebp
	ret	0
$LN4@get_facet_:

; 252  :   if ( !valid_id(f_id) ) return NULLID;

	mov	eax, DWORD PTR _f_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN7@get_facet_

; 253  :   if ( inverted(f_id) ) return F_ELID(f_id,F_BODY_LIST_ATTR)[1];

	mov	ecx, DWORD PTR _web+236
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_facet_
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax+4]

; 255  : }

	pop	ebp
	ret	0
$LN2@get_facet_:

; 254  :   else  return F_ELID(f_id,F_BODY_LIST_ATTR)[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax]

; 255  : }

	pop	ebp
	ret	0
_get_facet_body ENDP
_TEXT	ENDS
PUBLIC	_get_facet_fe
; Function compile flags: /Ogtp
;	COMDAT _get_facet_fe
_TEXT	SEGMENT
_f_id$ = 8						; size = 4
_get_facet_fe PROC					; COMDAT

; 260  : {

	push	ebp
	mov	ebp, esp

; 261  :   facetedge_id fe;
; 262  :   
; 263  :   if ( !valid_id(f_id) ) return NULLID;

	mov	ecx, DWORD PTR _f_id$[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN2@get_facet_@2
	xor	eax, eax

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
$LN2@get_facet_@2:

; 264  :   fe = fptr(f_id)->fe_id;

	mov	edx, DWORD PTR _web+236
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]

; 265  :   if ( inverted(f_id) ) invert(fe);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_facet_@2
	xor	eax, 134217728				; 08000000H
$LN3@get_facet_@2:

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
_get_facet_fe ENDP
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	__$ArrayPad$
PUBLIC	_calc_bump
EXTRN	_dot:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT __real@3ff0000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\alice.c
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _calc_bump
_TEXT	SEGMENT
tv583 = -60						; size = 4
tv588 = -56						; size = 4
_xx$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_pt$ = 8						; size = 4
_calc_bump PROC						; COMDAT

; 25   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 26   :   REAL xx[MAXCOORD];
; 27   :   int i;
; 28   :   REAL value;
; 29   :   REAL r;
; 30   : 
; 31   :   for ( i = 0 ; i < SDIM ; i++ )

	mov	eax, DWORD PTR _web+616
	mov	edx, DWORD PTR _pt$[ebp]
	xor	ecx, ecx
	cmp	eax, 4
	jl	SHORT $LC9@calc_bump

; 32   :      xx[i] = pt[i] - xalice[i];

	push	ebx
	push	esi
	mov	ebx, OFFSET _xalice+8
	sub	ebx, edx
	push	edi
	mov	DWORD PTR tv583[ebp], ebx
	mov	esi, OFFSET _xalice
	lea	edi, DWORD PTR _xx$[ebp]
	lea	ebx, DWORD PTR _xx$[ebp+8]
	sub	esi, edx
	sub	edi, edx
	sub	ebx, edx
	lea	eax, DWORD PTR [edx+16]
	mov	DWORD PTR tv588[ebp], ebx
$LL10@calc_bump:
	fld	QWORD PTR [eax-16]
	mov	ebx, DWORD PTR tv583[ebp]
	fsub	QWORD PTR _xalice[ecx*8]
	add	ecx, 4
	add	eax, 32					; 00000020H
	fstp	QWORD PTR _xx$[ebp+ecx*8-32]
	fld	QWORD PTR [eax-40]
	fsub	QWORD PTR _xalice[ecx*8-24]
	fstp	QWORD PTR _xx$[ebp+ecx*8-24]
	fld	QWORD PTR [eax-32]
	fsub	QWORD PTR [esi+eax-32]
	fstp	QWORD PTR [edi+eax-32]
	fld	QWORD PTR [eax-24]
	fsub	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv588[ebp]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR _web+616
	add	ebx, -3					; fffffffdH
	cmp	ecx, ebx
	jl	SHORT $LL10@calc_bump
	mov	eax, DWORD PTR _web+616
	pop	edi
	pop	esi
	pop	ebx
$LC9@calc_bump:

; 26   :   REAL xx[MAXCOORD];
; 27   :   int i;
; 28   :   REAL value;
; 29   :   REAL r;
; 30   : 
; 31   :   for ( i = 0 ; i < SDIM ; i++ )

	cmp	ecx, eax
	jge	SHORT $LN8@calc_bump
	sub	edx, OFFSET _xalice
$LC3@calc_bump:

; 32   :      xx[i] = pt[i] - xalice[i];

	fld	QWORD PTR _xalice[edx+ecx*8]
	inc	ecx
	fsub	QWORD PTR _xalice[ecx*8-8]
	fstp	QWORD PTR _xx$[ebp+ecx*8-8]
	cmp	ecx, eax
	jl	SHORT $LC3@calc_bump
$LN8@calc_bump:

; 33   : 
; 34   :   /* function is fourth-order bump */
; 35   :   r = SDIM_dot(xx,xx)/radius/radius;

	push	eax
	lea	eax, DWORD PTR _xx$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fld	QWORD PTR _radius
	fdiv	ST(1), ST(0)

; 36   :   value = 1/(1+r)/(1+r);
; 37   : 
; 38   :   return value;
; 39   : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	add	esp, 12					; 0000000cH
	fdivp	ST(1), ST(0)
	fld1
	fadd	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fdivrp	ST(1), ST(0)
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_calc_bump ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@PDMNOIEA@Variation?3?5?$CFf?6?$AA@	; `string'
PUBLIC	??_C@_03DLDNIBIK@?$CFlf?$AA@			; `string'
PUBLIC	??_C@_0DC@HILCNNJA@Enter?5characteristic?5size?5of?5tes@ ; `string'
PUBLIC	??_C@_0CL@FMNJNKOD@Enter?5vector?5of?5test?5function?5?$CI?$CF@ ; `string'
PUBLIC	??_C@_0BE@KDPPJLBO@?$CFlf?5?$CFlf?5?$CFlf?5?$CFlf?5?$CFlf?$AA@ ; `string'
PUBLIC	??_C@_0CL@FMAHICKO@Enter?5center?5of?5test?5function?5?$CI?$CF@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__$ArrayPad$
PUBLIC	_alice
EXTRN	_outstring:PROC
EXTRN	_gauss1Dwt:DWORD
EXTRN	_gauss1Dpt:DWORD
EXTRN	_gauss1D_num:DWORD
EXTRN	_get_edge_side:PROC
EXTRN	_sscanf:PROC
EXTRN	_prompt:PROC
EXTRN	_msg:DWORD
EXTRN	_msgmax:DWORD
EXTRN	_sprintf:PROC
EXTRN	__CIsqrt:PROC
;	COMDAT ??_C@_0P@PDMNOIEA@Variation?3?5?$CFf?6?$AA@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0P@PDMNOIEA@Variation?3?5?$CFf?6?$AA@ DB 'Variation: %f', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03DLDNIBIK@?$CFlf?$AA@
CONST	SEGMENT
??_C@_03DLDNIBIK@?$CFlf?$AA@ DB '%lf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@HILCNNJA@Enter?5characteristic?5size?5of?5tes@
CONST	SEGMENT
??_C@_0DC@HILCNNJA@Enter?5characteristic?5size?5of?5tes@ DB 'Enter charac'
	DB	'teristic size of test function (%f): ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@FMNJNKOD@Enter?5vector?5of?5test?5function?5?$CI?$CF@
CONST	SEGMENT
??_C@_0CL@FMNJNKOD@Enter?5vector?5of?5test?5function?5?$CI?$CF@ DB 'Enter'
	DB	' vector of test function (%f %f %f): ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KDPPJLBO@?$CFlf?5?$CFlf?5?$CFlf?5?$CFlf?5?$CFlf?$AA@
CONST	SEGMENT
??_C@_0BE@KDPPJLBO@?$CFlf?5?$CFlf?5?$CFlf?5?$CFlf?5?$CFlf?$AA@ DB '%lf %l'
	DB	'f %lf %lf %lf', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@FMAHICKO@Enter?5center?5of?5test?5function?5?$CI?$CF@
CONST	SEGMENT
??_C@_0CL@FMAHICKO@Enter?5center?5of?5test?5function?5?$CI?$CF@ DB 'Enter'
	DB	' center of test function (%f %f %f): ', 00H	; `string'
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\alice.c
CONST	ENDS
;	COMDAT _alice
_TEXT	SEGMENT
_x$89071 = -540						; size = 16
_sum$ = -524						; size = 8
tv3058 = -516						; size = 4
_i$89079 = -512						; size = 4
tv1188 = -508						; size = 4
_s0s1$89076 = -504					; size = 8
tv3062 = -500						; size = 4
tv3087 = -496						; size = 4
tv3089 = -492						; size = 4
_s1s1$89077 = -488					; size = 8
tv3081 = -484						; size = 4
tv3064 = -484						; size = 4
tv3364 = -480						; size = 8
_s0s0$89075 = -480					; size = 8
tv3077 = -476						; size = 4
tv3066 = -476						; size = 4
tv3011 = -472						; size = 4
tv1601 = -472						; size = 4
_midpt$89069 = -468					; size = 48
_len$89084 = -420					; size = 24
_norm$89070 = -396					; size = 144
_side$89083 = -252					; size = 144
_e_id$89072 = -108					; size = 12
_p$ = -96						; size = 90
__$ArrayPad$ = -4					; size = 4
_alice	PROC						; COMDAT

; 42   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 540				; 0000021cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 43   :   edge_id f_id;
; 44   :   REAL sum=0.0;

	fldz
	push	esi
	fstp	QWORD PTR _sum$[ebp]

; 45   :   char p[90];
; 46   : 
; 47   :   sprintf(p,"Enter center of test function (%f %f %f): ",
; 48   :       (DOUBLE)xalice[0],(DOUBLE)xalice[1],(DOUBLE)xalice[2]);

	sub	esp, 24					; 00000018H
	fld	QWORD PTR _xalice+16
	lea	eax, DWORD PTR _p$[ebp]
	fstp	QWORD PTR [esp+16]
	fld	QWORD PTR _xalice+8
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR _xalice
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CL@FMAHICKO@Enter?5center?5of?5test?5function?5?$CI?$CF@
	push	eax
	call	_sprintf

; 49   :   prompt(p,msg,msgmax);

	mov	ecx, DWORD PTR _msgmax
	mov	edx, DWORD PTR _msg
	push	ecx
	push	edx
	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_prompt

; 50   : #ifdef LONGDOUBLE
; 51   :   sscanf(msg,"%Lf %Lf %Lf %Lf %Lf", xalice,xalice+1,xalice+2,xalice+3,xalice+4);
; 52   : #else
; 53   :   sscanf(msg,"%lf %lf %lf %lf %lf", xalice,xalice+1,xalice+2,xalice+3,xalice+4);

	mov	ecx, DWORD PTR _msg
	push	OFFSET _xalice+32
	push	OFFSET _xalice+24
	push	OFFSET _xalice+16
	push	OFFSET _xalice+8
	push	OFFSET _xalice
	push	OFFSET ??_C@_0BE@KDPPJLBO@?$CFlf?5?$CFlf?5?$CFlf?5?$CFlf?5?$CFlf?$AA@
	push	ecx
	call	_sscanf

; 54   : #endif 
; 55   : 
; 56   :   sprintf(p,"Enter vector of test function (%f %f %f): ",
; 57   :       (DOUBLE)valice[0],(DOUBLE)valice[1],(DOUBLE)valice[2]);

	fld	QWORD PTR _valice+16
	add	esp, 48					; 00000030H
	fstp	QWORD PTR [esp+16]
	lea	edx, DWORD PTR _p$[ebp]
	fld	QWORD PTR _valice+8
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR _valice
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CL@FMNJNKOD@Enter?5vector?5of?5test?5function?5?$CI?$CF@
	push	edx
	call	_sprintf

; 58   :   prompt(p,msg,msgmax);

	mov	eax, DWORD PTR _msgmax
	mov	ecx, DWORD PTR _msg
	push	eax
	push	ecx
	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_prompt

; 59   : #ifdef LONGDOUBLE
; 60   :   sscanf(msg,"%Lf %Lf %Lf %Lf %Lf", valice,valice+1,valice+2,valice+3,valice+4);
; 61   : #else
; 62   :   sscanf(msg,"%lf %lf %lf %lf %lf", valice,valice+1,valice+2,valice+3,valice+4);

	mov	eax, DWORD PTR _msg
	push	OFFSET _valice+32
	push	OFFSET _valice+24
	push	OFFSET _valice+16
	push	OFFSET _valice+8
	push	OFFSET _valice
	push	OFFSET ??_C@_0BE@KDPPJLBO@?$CFlf?5?$CFlf?5?$CFlf?5?$CFlf?5?$CFlf?$AA@
	push	eax
	call	_sscanf

; 63   : #endif 
; 64   : 
; 65   :   sprintf(p,"Enter characteristic size of test function (%f): ",(DOUBLE)radius);

	fld	QWORD PTR _radius
	add	esp, 64					; 00000040H
	fstp	QWORD PTR [esp]
	lea	ecx, DWORD PTR _p$[ebp]
	push	OFFSET ??_C@_0DC@HILCNNJA@Enter?5characteristic?5size?5of?5tes@
	push	ecx
	call	_sprintf

; 66   :   prompt(p,msg,msgmax);

	mov	edx, DWORD PTR _msgmax
	mov	eax, DWORD PTR _msg
	push	edx
	push	eax
	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_prompt

; 67   : #ifdef LONGDOUBLE
; 68   :   sscanf(msg,"%Lf", &radius);
; 69   : #else
; 70   :   sscanf(msg,"%lf", &radius);

	mov	edx, DWORD PTR _msg
	push	OFFSET _radius
	push	OFFSET ??_C@_03DLDNIBIK@?$CFlf?$AA@
	push	edx
	call	_sscanf

; 71   : #endif 
; 72   : 
; 73   :   /* integrate over every edge */
; 74   :   FOR_ALL_FACETS(f_id)

	mov	edx, DWORD PTR _web+272
	mov	esi, edx
	shr	esi, 28					; 0000001cH
	add	esp, 40					; 00000028H
	and	esi, 1
	je	$LN66@alice
	push	ebx
	push	edi
	mov	edi, DWORD PTR _web+236
	npad	3
$LL24@alice:
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	ecx, DWORD PTR [eax+edi]
	mov	ecx, DWORD PTR [ecx+8]
	and	ecx, 1
	xor	ebx, ebx
	or	ecx, ebx
	mov	DWORD PTR tv1188[ebp], eax
	je	$LN23@alice

; 75   :      {
; 76   :         REAL midpt[MAXCOORD];
; 77   :         REAL norm[FACET_EDGES][MAXCOORD];
; 78   :         REAL *x[FACET_EDGES+1];
; 79   :         edge_id e_id[FACET_EDGES];
; 80   :         REAL a,b,s0s0,s0s1,s1s1,surd;
; 81   :         int  i,j,m;
; 82   :         facetedge_id fe_id;
; 83   :         REAL side[FACET_EDGES][MAXCOORD];
; 84   :         REAL len[FACET_EDGES];
; 85   : 
; 86   :         /* get sides */
; 87   :         fe_id = get_facet_fe(f_id);

	test	esi, esi
	jne	SHORT $LN28@alice
	xor	edi, edi
	jmp	SHORT $LN27@alice
$LN28@alice:
	mov	eax, DWORD PTR [eax+edi]
	mov	edi, DWORD PTR [eax+28]
	test	edx, 134217728				; 08000000H
	je	SHORT $LN27@alice
	xor	edi, 134217728				; 08000000H
$LN27@alice:

; 88   :         for ( i = 0 ; i < FACET_EDGES ; i++ )

	mov	eax, DWORD PTR _web+460
	lea	ecx, DWORD PTR _side$89083[ebp]
	mov	DWORD PTR tv1601[ebp], ecx
	xor	ebx, ebx
$LL68@alice:

; 89   :           { 
; 90   :              e_id[i] = get_fe_edge(fe_id);

	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	edx, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [edx+20]

; 91   :              get_edge_side(e_id[i],side[i]);

	mov	edx, DWORD PTR tv1601[ebp]
	mov	ecx, edi
	and	ecx, 134217728				; 08000000H
	xor	eax, ecx
	push	edx
	push	eax
	mov	DWORD PTR _e_id$89072[ebp+ebx], eax
	call	_get_edge_side

; 92   :              x[i] = get_coord(get_edge_headv(e_id[i]));

	mov	eax, DWORD PTR _e_id$89072[ebp+ebx]
	mov	ecx, DWORD PTR _web+124
	add	esp, 8
	test	eax, 134217728				; 08000000H
	je	SHORT $LN34@alice
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR _web+216
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]
	jmp	SHORT $LN33@alice
$LN34@alice:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
$LN33@alice:
	mov	edx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+104
	add	eax, DWORD PTR [edx+ecx+64]
	mov	DWORD PTR _x$89071[ebp+ebx], eax

; 93   :              fe_id = get_next_edge(fe_id);

	mov	eax, DWORD PTR _web+460
	test	edi, 134217728				; 08000000H
	je	SHORT $LN38@alice
	mov	ecx, DWORD PTR [esi+eax]
	mov	edi, DWORD PTR [ecx+28]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN18@alice
$LN38@alice:
	mov	edx, DWORD PTR [esi+eax]
	mov	edi, DWORD PTR [edx+32]
$LN18@alice:

; 88   :         for ( i = 0 ; i < FACET_EDGES ; i++ )

	add	DWORD PTR tv1601[ebp], 48		; 00000030H
	add	ebx, 4
	cmp	ebx, 12					; 0000000cH
	jl	$LL68@alice

; 94   :           }
; 95   :         x[FACET_EDGES] = x[0]; /* easy wrap */
; 96   : 
; 97   :         s0s0 = SDIM_dot(side[0],side[0]);

	mov	ecx, DWORD PTR _web+616
	mov	eax, DWORD PTR _x$89071[ebp]
	push	ecx
	lea	edx, DWORD PTR _side$89083[ebp]
	mov	DWORD PTR _x$89071[ebp+12], eax
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	fstp	QWORD PTR _s0s0$89075[ebp]

; 98   :         s0s1 = SDIM_dot(side[1],side[0]);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _side$89083[ebp]
	push	edx
	lea	eax, DWORD PTR _side$89083[ebp+48]
	push	eax
	call	_dot
	fstp	QWORD PTR _s0s1$89076[ebp]

; 99   :         s1s1 = SDIM_dot(side[1],side[1]);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _side$89083[ebp+48]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	fstp	QWORD PTR _s1s1$89077[ebp]

; 100  :         len[0] = sqrt(s0s0);

	fld	QWORD PTR _s0s0$89075[ebp]
	add	esp, 36					; 00000024H
	call	__CIsqrt
	fstp	QWORD PTR _len$89084[ebp]

; 101  :         len[1] = sqrt(s1s1);

	fld	QWORD PTR _s1s1$89077[ebp]
	call	__CIsqrt
	fstp	QWORD PTR _len$89084[ebp+8]

; 102  :         len[2] = sqrt(s0s0 + s1s1 + 2*s0s1);

	fld	QWORD PTR _s1s1$89077[ebp]
	fadd	QWORD PTR _s0s0$89075[ebp]
	fld	QWORD PTR _s0s1$89076[ebp]
	fadd	ST(0), ST(0)
	faddp	ST(1), ST(0)
	call	__CIsqrt
	fstp	QWORD PTR _len$89084[ebp+16]

; 103  :         surd = sqrt(s0s0*s1s1 - s0s1*s0s1);

	fld	QWORD PTR _s1s1$89077[ebp]
	fmul	QWORD PTR _s0s0$89075[ebp]
	fld	QWORD PTR _s0s1$89076[ebp]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	call	__CIsqrt

; 104  :         a = s0s0/surd; b = s0s1/surd;

	fld	QWORD PTR _s0s0$89075[ebp]
	fdiv	ST(0), ST(1)

; 105  :         for ( i = 0 ; i < SDIM ; i++ )

	mov	ebx, DWORD PTR _web+616
	xor	eax, eax
	fld	QWORD PTR _s0s1$89076[ebp]
	fdiv	ST(0), ST(2)
	fld	ST(0)
	cmp	ebx, 4
	jl	$LC56@alice
	lea	ecx, DWORD PTR [ebx-3]
$LN57@alice:

; 106  :           { norm[0][i] = -a*side[1][i] + b*side[0][i];

	fld	QWORD PTR _side$89083[ebp+eax*8]

; 107  :              norm[2][i] =  a*side[1][i] - b*side[0][i];

	add	eax, 4
	fmul	ST(0), ST(1)
	fld	QWORD PTR _side$89083[ebp+eax*8+16]
	fmul	ST(0), ST(4)
	fld	ST(1)
	fsub	ST(0), ST(1)
	fstp	QWORD PTR _norm$89070[ebp+eax*8-32]
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR _norm$89070[ebp+eax*8+64]
	fld	QWORD PTR _side$89083[ebp+eax*8-24]
	fmul	ST(0), ST(1)
	fld	QWORD PTR _side$89083[ebp+eax*8+24]
	fmul	ST(0), ST(4)
	fld	ST(1)
	fsub	ST(0), ST(1)
	fstp	QWORD PTR _norm$89070[ebp+eax*8-24]
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR _norm$89070[ebp+eax*8+72]
	fld	QWORD PTR _side$89083[ebp+eax*8-16]
	fmul	ST(0), ST(1)
	fld	QWORD PTR _side$89083[ebp+eax*8+32]
	fmul	ST(0), ST(4)
	fld	ST(1)
	fsub	ST(0), ST(1)
	fstp	QWORD PTR _norm$89070[ebp+eax*8-16]
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR _norm$89070[ebp+eax*8+80]
	fld	QWORD PTR _side$89083[ebp+eax*8-8]
	fmul	ST(0), ST(1)
	fld	QWORD PTR _side$89083[ebp+eax*8+40]
	fmul	ST(0), ST(4)
	fld	ST(1)
	fsub	ST(0), ST(1)
	fstp	QWORD PTR _norm$89070[ebp+eax*8-8]
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR _norm$89070[ebp+eax*8+88]
	cmp	eax, ecx
	jl	$LN57@alice
$LC56@alice:

; 105  :         for ( i = 0 ; i < SDIM ; i++ )

	cmp	eax, ebx
	jge	SHORT $LN78@alice
$LC16@alice:

; 106  :           { norm[0][i] = -a*side[1][i] + b*side[0][i];

	fld	QWORD PTR _side$89083[ebp+eax*8]
	inc	eax
	fmul	ST(0), ST(1)
	fld	QWORD PTR _side$89083[ebp+eax*8+40]
	fmul	ST(0), ST(4)
	fld	ST(1)
	fsub	ST(0), ST(1)
	fstp	QWORD PTR _norm$89070[ebp+eax*8-8]

; 107  :              norm[2][i] =  a*side[1][i] - b*side[0][i];

	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR _norm$89070[ebp+eax*8+88]
	cmp	eax, ebx
	jl	SHORT $LC16@alice
$LN78@alice:

; 105  :         for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(2)

; 108  :           }
; 109  :         a = s1s1/surd; b = s0s1/surd;
; 110  :         for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	fstp	ST(1)
	fld	QWORD PTR _s1s1$89077[ebp]
	fdivrp	ST(2), ST(0)
	cmp	ebx, 4
	jl	$LC59@alice
	lea	ecx, DWORD PTR [ebx-3]
$LN60@alice:

; 111  :           { norm[1][i] =  a*side[0][i] - b*side[1][i];

	fld	QWORD PTR _side$89083[ebp+eax*8]

; 112  :              norm[2][i] += -a*side[0][i] + b*side[1][i];

	add	eax, 4
	fmul	ST(0), ST(2)
	fld	QWORD PTR _side$89083[ebp+eax*8+16]
	fmul	ST(0), ST(2)
	fld	ST(1)
	fsub	ST(0), ST(1)
	fstp	QWORD PTR _norm$89070[ebp+eax*8+16]
	fsubrp	ST(1), ST(0)
	fadd	QWORD PTR _norm$89070[ebp+eax*8+64]
	fstp	QWORD PTR _norm$89070[ebp+eax*8+64]
	fld	QWORD PTR _side$89083[ebp+eax*8-24]
	fmul	ST(0), ST(2)
	fld	QWORD PTR _side$89083[ebp+eax*8+24]
	fmul	ST(0), ST(2)
	fld	ST(1)
	fsub	ST(0), ST(1)
	fstp	QWORD PTR _norm$89070[ebp+eax*8+24]
	fsubrp	ST(1), ST(0)
	fadd	QWORD PTR _norm$89070[ebp+eax*8+72]
	fstp	QWORD PTR _norm$89070[ebp+eax*8+72]
	fld	QWORD PTR _side$89083[ebp+eax*8-16]
	fmul	ST(0), ST(2)
	fld	QWORD PTR _side$89083[ebp+eax*8+32]
	fmul	ST(0), ST(2)
	fld	ST(1)
	fsub	ST(0), ST(1)
	fstp	QWORD PTR _norm$89070[ebp+eax*8+32]
	fsubrp	ST(1), ST(0)
	fadd	QWORD PTR _norm$89070[ebp+eax*8+80]
	fstp	QWORD PTR _norm$89070[ebp+eax*8+80]
	fld	QWORD PTR _side$89083[ebp+eax*8-8]
	fmul	ST(0), ST(2)
	fld	QWORD PTR _side$89083[ebp+eax*8+40]
	fmul	ST(0), ST(2)
	fld	ST(1)
	fsub	ST(0), ST(1)
	fstp	QWORD PTR _norm$89070[ebp+eax*8+40]
	fsubrp	ST(1), ST(0)
	fadd	QWORD PTR _norm$89070[ebp+eax*8+88]
	fstp	QWORD PTR _norm$89070[ebp+eax*8+88]
	cmp	eax, ecx
	jl	$LN60@alice
$LC59@alice:

; 108  :           }
; 109  :         a = s1s1/surd; b = s0s1/surd;
; 110  :         for ( i = 0 ; i < SDIM ; i++ )

	cmp	eax, ebx
	jge	SHORT $LN85@alice
$LC13@alice:

; 111  :           { norm[1][i] =  a*side[0][i] - b*side[1][i];

	fld	QWORD PTR _side$89083[ebp+eax*8]
	inc	eax
	fmul	ST(0), ST(2)
	fld	QWORD PTR _side$89083[ebp+eax*8+40]
	fmul	ST(0), ST(2)
	fld	ST(1)
	fsub	ST(0), ST(1)
	fstp	QWORD PTR _norm$89070[ebp+eax*8+40]

; 112  :              norm[2][i] += -a*side[0][i] + b*side[1][i];

	fsubrp	ST(1), ST(0)
	fadd	QWORD PTR _norm$89070[ebp+eax*8+88]
	fstp	QWORD PTR _norm$89070[ebp+eax*8+88]
	cmp	eax, ebx
	jl	SHORT $LC13@alice
$LN85@alice:

; 113  :           }
; 114  :         /* along each edge */
; 115  :         for ( j = 0 ; j < FACET_EDGES ; j++ )

	mov	edi, DWORD PTR _gauss1D_num
	fstp	ST(1)
	lea	edx, DWORD PTR _norm$89070[ebp]
	fstp	ST(0)
	mov	DWORD PTR tv3089[ebp], edx
	lea	ecx, DWORD PTR _len$89084[ebp]
	xor	edx, edx
	mov	DWORD PTR tv3087[ebp], ecx
	mov	DWORD PTR tv3011[ebp], edx
	npad	2
$LL71@alice:

; 116  :           { 
; 117  :              if ( get_eattr(e_id[j]) & (FIXED|CONSTRAINT|BOUNDARY) ) 

	mov	eax, DWORD PTR _e_id$89072[ebp+edx]
	mov	ecx, DWORD PTR _web+124
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1216				; 000004c0H
	xor	ecx, ecx
	or	eax, ecx
	jne	$LN9@alice

; 118  :                 continue;
; 119  :              for ( m = 0 ; m < gauss1D_num ; m++ )

	xor	esi, esi
	test	edi, edi
	jle	$LN9@alice
	npad	2
$LL6@alice:

; 120  :               {
; 121  :                  for ( i = 0 ; i < SDIM ; i++ )

	mov	ecx, DWORD PTR _gauss1Dpt
	xor	edi, edi
	mov	DWORD PTR _i$89079[ebp], edi
	cmp	ebx, 4
	jl	$LN65@alice

; 118  :                 continue;
; 119  :              for ( m = 0 ; m < gauss1D_num ; m++ )

	mov	edi, DWORD PTR _x$89071[ebp+edx]
	fld1
	mov	ebx, DWORD PTR _x$89071[ebp+edx+4]
	fsub	QWORD PTR [ecx+esi*8]

; 120  :               {
; 121  :                  for ( i = 0 ; i < SDIM ; i++ )

	lea	edx, DWORD PTR [ebx+24]

; 122  :                     midpt[i] = gauss1Dpt[m]*x[j][i] + (1 - gauss1Dpt[m])*x[j+1][i];

	sub	ebx, edi
	lea	eax, DWORD PTR [edi+8]
	neg	edi
	mov	DWORD PTR tv3058[ebp], ebx
	lea	ebx, DWORD PTR _midpt$89069[ebp+edi]
	mov	DWORD PTR tv3062[ebp], ebx
	lea	ebx, DWORD PTR _midpt$89069[ebp+edi+8]
	lea	edi, DWORD PTR _midpt$89069[ebp+edi+16]
	mov	DWORD PTR tv3066[ebp], edi
	mov	edi, DWORD PTR _i$89079[ebp]
	mov	DWORD PTR tv3064[ebp], ebx
$LN67@alice:
	fld	QWORD PTR [eax-8]
	mov	ebx, DWORD PTR tv3058[ebp]
	fmul	QWORD PTR [ecx+esi*8]
	add	edi, 4
	fld	QWORD PTR [edx-24]
	add	eax, 32					; 00000020H
	fmul	ST(0), ST(2)
	add	edx, 32					; 00000020H
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _midpt$89069[ebp+edi*8-32]
	fld	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv3062[ebp]
	fmul	ST(0), ST(1)
	fld	QWORD PTR [eax-32]
	fmul	QWORD PTR [ecx+esi*8]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv3064[ebp]
	fld	QWORD PTR [eax-24]
	fmul	QWORD PTR [ecx+esi*8]
	fld	QWORD PTR [edx-40]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv3066[ebp]
	fld	QWORD PTR [eax-16]
	fmul	QWORD PTR [ecx+esi*8]
	fld	QWORD PTR [edx-32]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR _web+616
	add	ebx, -3					; fffffffdH
	cmp	edi, ebx
	jl	SHORT $LN67@alice
	mov	ebx, DWORD PTR _web+616
	fstp	ST(0)
	mov	edx, DWORD PTR tv3011[ebp]
$LN65@alice:

; 120  :               {
; 121  :                  for ( i = 0 ; i < SDIM ; i++ )

	cmp	edi, ebx
	jge	SHORT $LN61@alice

; 118  :                 continue;
; 119  :              for ( m = 0 ; m < gauss1D_num ; m++ )

	mov	ebx, DWORD PTR _x$89071[ebp+edx]
	fld1

; 120  :               {
; 121  :                  for ( i = 0 ; i < SDIM ; i++ )

	mov	edx, DWORD PTR _x$89071[ebp+edx+4]
	fsub	QWORD PTR [ecx+esi*8]
	sub	edx, ebx
	mov	DWORD PTR tv3077[ebp], edx
	lea	edx, DWORD PTR _midpt$89069[ebp]
	sub	edx, ebx
	mov	DWORD PTR tv3081[ebp], edx
	mov	edx, DWORD PTR _web+616
	lea	eax, DWORD PTR [ebx+edi*8]
	sub	edx, edi
	mov	edi, DWORD PTR tv3077[ebp]
$LC3@alice:

; 122  :                     midpt[i] = gauss1Dpt[m]*x[j][i] + (1 - gauss1Dpt[m])*x[j+1][i];

	fld	QWORD PTR [eax+edi]
	mov	ebx, DWORD PTR tv3081[ebp]
	fmul	ST(0), ST(1)
	add	eax, 8
	dec	edx
	fld	QWORD PTR [eax-8]
	fmul	QWORD PTR [ecx+esi*8]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [eax+ebx-8]
	jne	SHORT $LC3@alice

; 120  :               {
; 121  :                  for ( i = 0 ; i < SDIM ; i++ )

	mov	ebx, DWORD PTR _web+616
	fstp	ST(0)
$LN61@alice:

; 123  :                  sum += gauss1Dwt[m]*SDIM_dot(valice,norm[j])
; 124  :                             *calc_bump(midpt)*len[j];

	mov	edx, DWORD PTR tv3089[ebp]
	push	ebx
	push	edx
	push	OFFSET _valice
	call	_dot
	mov	eax, DWORD PTR _gauss1Dwt
	fmul	QWORD PTR [eax+esi*8]
	lea	ecx, DWORD PTR _midpt$89069[ebp]
	push	ecx
	fstp	QWORD PTR tv3364[ebp]
	call	_calc_bump
	fmul	QWORD PTR tv3364[ebp]
	mov	edx, DWORD PTR tv3087[ebp]
	mov	edi, DWORD PTR _gauss1D_num
	mov	ebx, DWORD PTR _web+616
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv3011[ebp]
	inc	esi
	add	esp, 16					; 00000010H
	fadd	QWORD PTR _sum$[ebp]
	fstp	QWORD PTR _sum$[ebp]
	cmp	esi, edi
	jl	$LL6@alice
$LN9@alice:

; 113  :           }
; 114  :         /* along each edge */
; 115  :         for ( j = 0 ; j < FACET_EDGES ; j++ )

	add	DWORD PTR tv3089[ebp], 48		; 00000030H
	add	DWORD PTR tv3087[ebp], 8
	add	edx, 4
	mov	DWORD PTR tv3011[ebp], edx
	cmp	edx, 12					; 0000000cH
	jl	$LL71@alice
	mov	edi, DWORD PTR _web+236
	mov	eax, DWORD PTR tv1188[ebp]
$LN23@alice:

; 71   : #endif 
; 72   : 
; 73   :   /* integrate over every edge */
; 74   :   FOR_ALL_FACETS(f_id)

	mov	eax, DWORD PTR [eax+edi]
	mov	edx, DWORD PTR [eax]
	mov	esi, edx
	shr	esi, 28					; 0000001cH
	and	esi, 1
	jne	$LL24@alice
	pop	edi
	pop	ebx
$LN66@alice:

; 125  :               }
; 126  :           }
; 127  :      }
; 128  : 
; 129  :   sprintf(msg,"Variation: %f\n",(DOUBLE)(sum/radius/radius));

	fld	QWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR _msg
	fld	QWORD PTR _radius
	sub	esp, 8
	fdiv	ST(1), ST(0)
	fdivp	ST(1), ST(0)
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0P@PDMNOIEA@Variation?3?5?$CFf?6?$AA@
	push	ecx
	call	_sprintf

; 130  :   outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 131  : }  // end alice()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 20					; 00000014H
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_alice	ENDP
_TEXT	ENDS
PUBLIC	__real@4018000000000000
PUBLIC	??_C@_0N@DBAIENMF@carter_power?$AA@		; `string'
PUBLIC	_carter_energy_init
EXTRN	_localbase:DWORD
EXTRN	_add_global:PROC
EXTRN	_lookup_global:PROC
;	COMDAT __real@4018000000000000
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
CONST	ENDS
;	COMDAT ??_C@_0N@DBAIENMF@carter_power?$AA@
CONST	SEGMENT
??_C@_0N@DBAIENMF@carter_power?$AA@ DB 'carter_power', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _carter_energy_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_carter_energy_init PROC				; COMDAT

; 169  :   param = lookup_global(CARTER_POWER_NAME);

	push	OFFSET ??_C@_0N@DBAIENMF@carter_power?$AA@
	call	_lookup_global
	add	esp, 4

; 170  :   if ( param < 0 ) /* missing, so add */

	test	eax, eax
	jns	$LN1@carter_ene

; 171  :         { param = add_global(CARTER_POWER_NAME);

	push	esi
	push	edi
	push	OFFSET ??_C@_0N@DBAIENMF@carter_power?$AA@
	call	_add_global

; 172  :           globals(param)->value.real = 6.0;  /* default */

	mov	esi, eax
	and	esi, -16777216				; ff000000H
	add	esp, 4
	cmp	esi, 268435456				; 10000000H
	je	SHORT $LN4@carter_ene
	cmp	esi, 805306368				; 30000000H
	jne	SHORT $LN6@carter_ene
	mov	edi, DWORD PTR _localbase
	mov	ecx, eax
	and	ecx, 16777215				; 00ffffffH
	mov	edx, ecx
	imul	edx, 224				; 000000e0H
	add	edx, DWORD PTR [edi]
	jmp	SHORT $LN5@carter_ene
$LN6@carter_ene:
	cmp	esi, 536870912				; 20000000H
	jne	SHORT $LN4@carter_ene
	mov	edx, DWORD PTR _web+5656
	mov	ecx, eax
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR [edx+ecx*4]
	jmp	SHORT $LN5@carter_ene
$LN4@carter_ene:
	mov	edx, DWORD PTR _web+5652
	mov	edi, DWORD PTR _dymem
	mov	ecx, eax
	and	ecx, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [edx+edi]
$LN5@carter_ene:
	fld	QWORD PTR __real@4018000000000000
	fstp	QWORD PTR [edx+64]

; 173  :           globals(param)->flags |=  ORDINARY_PARAM | RECALC_PARAMETER | ALWAYS_RECALC;

	cmp	esi, 268435456				; 10000000H
	je	SHORT $LN10@carter_ene
	cmp	esi, 805306368				; 30000000H
	jne	SHORT $LN12@carter_ene
	mov	edx, DWORD PTR _localbase
	imul	ecx, 224				; 000000e0H
	add	ecx, DWORD PTR [edx]
	jmp	SHORT $LN11@carter_ene
$LN12@carter_ene:
	cmp	esi, 536870912				; 20000000H
	jne	SHORT $LN10@carter_ene
	mov	edx, DWORD PTR _web+5656
	mov	ecx, DWORD PTR [edx+ecx*4]
	jmp	SHORT $LN11@carter_ene
$LN10@carter_ene:
	mov	edx, DWORD PTR _web+5652
	lea	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edx]
$LN11@carter_ene:
	or	DWORD PTR [ecx+192], 134217737		; 08000009H
	pop	edi
	pop	esi
$LN1@carter_ene:

; 174  :         }
; 175  :   carter_power = globals(param)->value.real;

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN16@carter_ene
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN18@carter_ene
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+64]
	fstp	QWORD PTR _carter_power

; 176  : 
; 177  : }  // end carter_energy_init()

	ret	0
$LN18@carter_ene:

; 174  :         }
; 175  :   carter_power = globals(param)->value.real;

	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN16@carter_ene
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [eax+64]
	fstp	QWORD PTR _carter_power

; 176  : 
; 177  : }  // end carter_energy_init()

	ret	0
$LN16@carter_ene:

; 174  :         }
; 175  :   carter_power = globals(param)->value.real;

	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
	fld	QWORD PTR [eax+64]
	fstp	QWORD PTR _carter_power

; 176  : 
; 177  : }  // end carter_energy_init()

	ret	0
_carter_energy_init ENDP
_TEXT	ENDS
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@4008000000000000
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_carter_energy
EXTRN	_get_facet_verts:PROC
EXTRN	_mat2d_setup:PROC
EXTRN	__CIpow:PROC
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _carter_energy
_TEXT	SEGMENT
_yqXvS$ = -372						; size = 12
_f_info$GSCopy$ = -360					; size = 4
_b_id$ = -356						; size = 4
_energy$ = -352						; size = 8
tv2459 = -344						; size = 8
tv1949 = -340						; size = 4
_f1$ = -336						; size = 4
_rj$ = -332						; size = 8
tv2562 = -328						; size = 4
tv2114 = -324						; size = 4
tv1891 = -320						; size = 4
tv1633 = -316						; size = 4
tv1813 = -312						; size = 4
tv746 = -308						; size = 4
tv2538 = -304						; size = 8
tv2536 = -304						; size = 8
_det$ = -304						; size = 8
tv2549 = -300						; size = 4
_j$ = -300						; size = 4
tv1896 = -296						; size = 4
_f2$ = -296						; size = 4
_yxJ$ = -292						; size = 144
_t1$ = -148						; size = 48
_r$ = -100						; size = 48
_t2$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_carter_energy PROC					; COMDAT

; 190  : { facet_id f1 = f_info->id,f2;

	push	ebp
	mov	ebp, esp
	sub	esp, 372				; 00000174H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	mov	edi, DWORD PTR _f_info$[ebp]
	mov	eax, DWORD PTR [edi]

; 191  :   REAL **x=f_info->x;
; 192  :   MAT2D(y,FACET_VERTS,MAXCOORD); /* vertex coordinates */

	push	6
	push	3
	lea	ecx, DWORD PTR _yxJ$[ebp]
	push	ecx
	lea	edx, DWORD PTR _yqXvS$[ebp]
	push	edx
	mov	DWORD PTR _f_info$GSCopy$[ebp], edi
	mov	DWORD PTR _f1$[ebp], eax
	call	_mat2d_setup

; 193  :   REAL energy = 0.0;

	fldz
	mov	esi, eax
	fstp	QWORD PTR _energy$[ebp]

; 194  :   REAL t1[MAXCOORD],t2[MAXCOORD];
; 195  :   REAL det,rj,r[MAXCOORD];
; 196  :   int j;
; 197  :   body_id b_id = get_facet_body(f_info->id);

	mov	eax, DWORD PTR [edi]
	push	eax
	call	_get_facet_body
	add	esp, 20					; 00000014H
	mov	DWORD PTR _b_id$[ebp], eax

; 198  :   body_id bb_id;
; 199  : 
; 200  :   if ( !valid_id(b_id) ) return 0.0;

	test	eax, 268435456				; 10000000H
	jne	SHORT $LN15@carter_ene@2
	fldz
	pop	edi
	pop	esi

; 221  : 
; 222  : } // end carter_energy()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN15@carter_ene@2:

; 201  : 
; 202  :   FOR_ALL_FACETS(f2)

	mov	edx, DWORD PTR _web+272
	mov	DWORD PTR _f2$[ebp], edx
	test	edx, 268435456				; 10000000H
	je	$LN30@carter_ene@2
	push	ebx
	jmp	SHORT $LN14@carter_ene@2
	npad	4
$LL33@carter_ene@2:
	mov	edx, DWORD PTR _f2$[ebp]
$LN14@carter_ene@2:
	mov	ecx, DWORD PTR _web+236
	mov	ebx, edx
	and	ebx, 134217727				; 07ffffffH
	add	ebx, ebx
	add	ebx, ebx
	mov	eax, DWORD PTR [ebx+ecx]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	ecx, ecx
	or	eax, ecx
	mov	DWORD PTR tv746[ebp], ebx
	je	$LN13@carter_ene@2

; 203  :     { if ( f2 <= f1 ) continue; /* each pair once */

	cmp	edx, DWORD PTR _f1$[ebp]
	jbe	$LN13@carter_ene@2

; 204  :       bb_id = get_facet_body(f2);

	push	edx
	call	_get_facet_body
	add	esp, 4

; 205  :       if ( !valid_id(bb_id) ) continue;

	test	eax, 268435456				; 10000000H
	je	$LN13@carter_ene@2

; 206  :       if ( equal_id(b_id,bb_id) ) continue;

	cmp	DWORD PTR _b_id$[ebp], eax
	je	$LN13@carter_ene@2

; 207  :       get_facet_verts(f2,y,NULL);

	mov	edx, DWORD PTR _f2$[ebp]
	push	0
	push	esi
	push	edx
	call	_get_facet_verts

; 208  :       for (j=0; j<SDIM; j++)

	mov	edx, DWORD PTR _web+616
	add	esp, 12					; 0000000cH
	xor	eax, eax
	cmp	edx, 4
	jl	$LC25@carter_ene@2
$LL26@carter_ene@2:

; 209  :       {  t1[j] = y[1][j] - y[0][j];

	mov	ecx, DWORD PTR [esi+4]
	fld	QWORD PTR [ecx+eax*8]
	mov	ebx, DWORD PTR [esi]
	fsub	QWORD PTR [ebx+eax*8]

; 210  :           t2[j] = y[2][j] - y[0][j];

	add	eax, 4
	fstp	QWORD PTR _t1$[ebp+eax*8-32]
	mov	ecx, DWORD PTR [esi+8]
	fld	QWORD PTR [ecx+eax*8-32]
	mov	ebx, DWORD PTR [esi]
	fsub	QWORD PTR [ebx+eax*8-32]
	fstp	QWORD PTR _t2$[ebp+eax*8-32]
	mov	ecx, DWORD PTR [esi+4]
	fld	QWORD PTR [ecx+eax*8-24]
	mov	ebx, DWORD PTR [esi]
	fsub	QWORD PTR [ebx+eax*8-24]
	fstp	QWORD PTR _t1$[ebp+eax*8-24]
	mov	ecx, DWORD PTR [esi+8]
	fld	QWORD PTR [ecx+eax*8-24]
	mov	ebx, DWORD PTR [esi]
	fsub	QWORD PTR [ebx+eax*8-24]
	fstp	QWORD PTR _t2$[ebp+eax*8-24]
	mov	ecx, DWORD PTR [esi+4]
	fld	QWORD PTR [ecx+eax*8-16]
	mov	ebx, DWORD PTR [esi]
	fsub	QWORD PTR [ebx+eax*8-16]
	fstp	QWORD PTR _t1$[ebp+eax*8-16]
	mov	ecx, DWORD PTR [esi+8]
	fld	QWORD PTR [ecx+eax*8-16]
	mov	ebx, DWORD PTR [esi]
	fsub	QWORD PTR [ebx+eax*8-16]
	fstp	QWORD PTR _t2$[ebp+eax*8-16]
	mov	ecx, DWORD PTR [esi+4]
	fld	QWORD PTR [ecx+eax*8-8]
	mov	ebx, DWORD PTR [esi]
	fsub	QWORD PTR [ebx+eax*8-8]
	fstp	QWORD PTR _t1$[ebp+eax*8-8]
	mov	ecx, DWORD PTR [esi+8]
	fld	QWORD PTR [ecx+eax*8-8]
	mov	ebx, DWORD PTR [esi]
	fsub	QWORD PTR [ebx+eax*8-8]
	lea	ecx, DWORD PTR [edx-3]
	fstp	QWORD PTR _t2$[ebp+eax*8-8]
	cmp	eax, ecx
	jl	$LL26@carter_ene@2
	mov	ebx, DWORD PTR tv746[ebp]
$LC25@carter_ene@2:

; 208  :       for (j=0; j<SDIM; j++)

	cmp	eax, edx
	jge	SHORT $LN24@carter_ene@2
	npad	6
$LC6@carter_ene@2:

; 209  :       {  t1[j] = y[1][j] - y[0][j];

	mov	ecx, DWORD PTR [esi+4]
	fld	QWORD PTR [ecx+eax*8]
	mov	ebx, DWORD PTR [esi]
	fsub	QWORD PTR [ebx+eax*8]
	inc	eax
	fstp	QWORD PTR _t1$[ebp+eax*8-8]

; 210  :           t2[j] = y[2][j] - y[0][j];

	mov	ecx, DWORD PTR [esi+8]
	fld	QWORD PTR [ecx+eax*8-8]
	mov	ebx, DWORD PTR [esi]
	fsub	QWORD PTR [ebx+eax*8-8]
	fstp	QWORD PTR _t2$[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LC6@carter_ene@2

; 208  :       for (j=0; j<SDIM; j++)

	mov	ebx, DWORD PTR tv746[ebp]
$LN24@carter_ene@2:

; 211  :       }
; 212  :       for (j=0; j<SDIM; j++)

	fld	QWORD PTR __real@4008000000000000
	xor	ecx, ecx
	cmp	edx, 4
	jl	$LC28@carter_ene@2

; 213  :           r[j] = (y[0][j]+y[1][j]+y[2][j] - (x[0][j]+x[1][j]+x[2][j]))/3;

	mov	ecx, DWORD PTR [edi+420]
	mov	edx, DWORD PTR [edi+416]
	mov	edi, DWORD PTR [edi+424]
	mov	ebx, ecx
	sub	ebx, edx
	mov	DWORD PTR tv1891[ebp], ebx
	mov	ebx, edi
	sub	ebx, edx
	mov	DWORD PTR tv1896[ebp], ebx
	mov	ebx, ecx
	lea	eax, DWORD PTR [edi+16]
	sub	ebx, edi
	mov	DWORD PTR tv1633[ebp], ecx
	lea	edi, DWORD PTR _r$[ebp]
	sub	edi, ecx
	mov	ecx, DWORD PTR _web+616
	add	ecx, -4					; fffffffcH
	shr	ecx, 2
	inc	ecx
	mov	DWORD PTR tv2114[ebp], ecx
	mov	DWORD PTR tv1813[ebp], eax
	lea	eax, DWORD PTR [edx+8]
	add	ecx, ecx
	neg	edx
	add	ecx, ecx
	mov	DWORD PTR tv1949[ebp], ebx
	mov	DWORD PTR tv2562[ebp], edi
	mov	DWORD PTR _j$[ebp], ecx
$LN29@carter_ene@2:
	mov	edi, DWORD PTR [esi]
	mov	ebx, DWORD PTR [esi+4]
	lea	ecx, DWORD PTR [eax+edx-8]
	fld	QWORD PTR [edi+ecx]
	mov	edi, DWORD PTR [esi+8]
	fadd	QWORD PTR [ecx+ebx]
	mov	ebx, DWORD PTR tv1813[ebp]
	fadd	QWORD PTR [ecx+edi]
	mov	edi, DWORD PTR tv1633[ebp]
	fld	QWORD PTR [eax-8]
	fadd	QWORD PTR [edi]
	fadd	QWORD PTR [ebx-16]
	mov	ebx, DWORD PTR tv2562[ebp]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [edi+ebx]
	mov	edi, DWORD PTR [esi]
	fld	QWORD PTR [edi+ecx+8]
	mov	ebx, DWORD PTR [esi+4]
	fadd	QWORD PTR [ecx+ebx+8]
	mov	edi, DWORD PTR [esi+8]
	fadd	QWORD PTR [ecx+edi+8]
	mov	ecx, DWORD PTR tv1891[ebp]
	fld	QWORD PTR [ecx+eax]
	mov	ecx, DWORD PTR tv1896[ebp]
	fadd	QWORD PTR [eax]
	fadd	QWORD PTR [ecx+eax]
	lea	ecx, DWORD PTR _r$[ebp+edx]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax+ecx]
	mov	edi, DWORD PTR [esi]
	mov	ebx, DWORD PTR [esi+4]
	lea	ecx, DWORD PTR [eax+edx+8]
	fld	QWORD PTR [edi+ecx]
	mov	edi, DWORD PTR [esi+8]
	fadd	QWORD PTR [ecx+ebx]
	fadd	QWORD PTR [ecx+edi]
	mov	ecx, DWORD PTR tv1813[ebp]
	mov	edi, DWORD PTR tv1949[ebp]
	fld	QWORD PTR [edi+ecx]
	fadd	QWORD PTR [eax+8]
	fadd	QWORD PTR [ecx]
	lea	ecx, DWORD PTR _r$[ebp+edx+8]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax+ecx]
	mov	edi, DWORD PTR [esi]
	mov	ebx, DWORD PTR [esi+4]
	lea	ecx, DWORD PTR [eax+edx+16]
	fld	QWORD PTR [edi+ecx]
	mov	edi, DWORD PTR [esi+8]
	fadd	QWORD PTR [ecx+ebx]
	lea	ebx, DWORD PTR _r$[ebp+edx+16]
	add	eax, 32					; 00000020H
	fadd	QWORD PTR [ecx+edi]
	mov	ecx, DWORD PTR tv1633[ebp]
	fld	QWORD PTR [eax-16]
	mov	edi, DWORD PTR tv1813[ebp]
	fadd	QWORD PTR [ecx+24]
	add	ecx, 32					; 00000020H
	add	edi, 32					; 00000020H
	dec	DWORD PTR tv2114[ebp]
	fadd	QWORD PTR [edi-24]
	mov	DWORD PTR tv1633[ebp], ecx
	mov	DWORD PTR tv1813[ebp], edi
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax+ebx-32]
	jne	$LN29@carter_ene@2

; 211  :       }
; 212  :       for (j=0; j<SDIM; j++)

	mov	ebx, DWORD PTR tv746[ebp]
	mov	edx, DWORD PTR _web+616
	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
$LC28@carter_ene@2:
	cmp	ecx, edx
	jge	SHORT $LN39@carter_ene@2
	mov	edx, DWORD PTR [edi+416]
	mov	ebx, DWORD PTR [edi+420]
	sub	ebx, edx
	mov	DWORD PTR tv1891[ebp], ebx
	mov	ebx, DWORD PTR [edi+424]
	sub	ebx, edx
	mov	DWORD PTR tv1896[ebp], ebx
	lea	ebx, DWORD PTR _r$[ebp]
	sub	ebx, edx
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR tv2549[ebp], ebx
$LC3@carter_ene@2:

; 213  :           r[j] = (y[0][j]+y[1][j]+y[2][j] - (x[0][j]+x[1][j]+x[2][j]))/3;

	mov	edx, DWORD PTR [esi]
	fld	QWORD PTR [edx+ecx*8]
	mov	ebx, DWORD PTR [esi+4]
	fadd	QWORD PTR [ebx+ecx*8]
	mov	edx, DWORD PTR [esi+8]
	inc	ecx
	add	eax, 8
	fadd	QWORD PTR [edx+ecx*8-8]
	mov	edx, DWORD PTR tv1891[ebp]
	fld	QWORD PTR [edx+eax-8]
	mov	edx, DWORD PTR tv1896[ebp]
	fadd	QWORD PTR [eax-8]
	fadd	QWORD PTR [edx+eax-8]
	mov	edx, DWORD PTR tv2549[ebp]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [edx+eax-8]
	mov	edx, DWORD PTR _web+616
	cmp	ecx, edx
	jl	SHORT $LC3@carter_ene@2

; 211  :       }
; 212  :       for (j=0; j<SDIM; j++)

	mov	ebx, DWORD PTR tv746[ebp]
$LN39@carter_ene@2:

; 214  :       rj = SDIM_dot(r,r);

	push	edx
	fstp	ST(0)
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fstp	QWORD PTR _rj$[ebp]

; 215  :       det = SDIM_dot(f_info->sides[0][0],t1)*SDIM_dot(f_info->sides[0][1],t2)
; 216  :               - SDIM_dot(f_info->sides[0][0],t2)*SDIM_dot(f_info->sides[0][1],t1);

	mov	edx, DWORD PTR _web+616
	mov	ecx, DWORD PTR [edi+1276]
	push	edx
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR _t2$[ebp]
	push	eax
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_dot
	fstp	QWORD PTR tv2536[ebp]
	mov	ecx, DWORD PTR _web+616
	mov	eax, DWORD PTR [edi+1276]
	push	ecx
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _t1$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_dot
	fmul	QWORD PTR tv2536[ebp]
	mov	eax, DWORD PTR _web+616
	mov	edx, DWORD PTR [edi+1276]
	push	eax
	fstp	QWORD PTR tv2459[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR _t1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_dot
	fstp	QWORD PTR tv2538[ebp]
	mov	edx, DWORD PTR _web+616
	mov	ecx, DWORD PTR [edi+1276]
	push	edx
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR _t2$[ebp]
	push	eax
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_dot
	fmul	QWORD PTR tv2538[ebp]
	add	esp, 60					; 0000003cH
	fsubr	QWORD PTR tv2459[ebp]
	fstp	QWORD PTR _det$[ebp]

; 217  :       energy += det/pow(rj,carter_power/2-1);

	fld	QWORD PTR _carter_power
	fmul	QWORD PTR __real@3fe0000000000000
	fsub	QWORD PTR __real@3ff0000000000000
	fld	QWORD PTR _rj$[ebp]
	fxch	ST(1)
	call	__CIpow
	fdivr	QWORD PTR _det$[ebp]
	fadd	QWORD PTR _energy$[ebp]
	fstp	QWORD PTR _energy$[ebp]
$LN13@carter_ene@2:

; 201  : 
; 202  :   FOR_ALL_FACETS(f2)

	mov	ecx, DWORD PTR _web+236
	mov	edx, DWORD PTR [ebx+ecx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _f2$[ebp], eax
	test	eax, 268435456				; 10000000H
	jne	$LL33@carter_ene@2
	pop	ebx
$LN30@carter_ene@2:

; 218  :     }
; 219  : 
; 220  :   return energy/(3-carter_power)/(2-carter_power)/4;

	fld	QWORD PTR __real@4008000000000000

; 221  : 
; 222  : } // end carter_energy()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _carter_power
	pop	edi
	fsub	ST(1), ST(0)
	xor	ecx, ebp
	fld	QWORD PTR _energy$[ebp]
	pop	esi
	fdivrp	ST(2), ST(0)
	fsubr	QWORD PTR __real@4000000000000000
	fdivp	ST(1), ST(0)
	fmul	QWORD PTR __real@3fd0000000000000
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_carter_energy ENDP
_TEXT	ENDS
PUBLIC	__real@4010000000000000
PUBLIC	__real@c000000000000000
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_carter_energy_gradient
;	COMDAT __real@4010000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@c000000000000000
CONST	SEGMENT
__real@c000000000000000 DQ 0c000000000000000r	; -2
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\alice.c
CONST	ENDS
;	COMDAT _carter_energy_gradient
_TEXT	SEGMENT
_yqXvS$ = -664						; size = 12
_b_id$ = -652						; size = 4
_energy$ = -648						; size = 8
_f1$ = -640						; size = 4
tv1722 = -636						; size = 4
_f_info$GSCopy$ = -632					; size = 4
_rj$ = -628						; size = 8
tv5087 = -624						; size = 4
_j$ = -624						; size = 4
tv3100 = -620						; size = 4
tv2842 = -616						; size = 4
tv3022 = -612						; size = 4
_det$ = -608						; size = 8
_s1t2$ = -608						; size = 8
tv3863 = -604						; size = 4
tv1719 = -604						; size = 4
tv426 = -604						; size = 4
tv2042 = -600						; size = 8
tv2023 = -600						; size = 8
tv2004 = -600						; size = 8
tv1985 = -600						; size = 8
tv1966 = -600						; size = 8
_s2t1$ = -600						; size = 8
tv5100 = -596						; size = 4
tv2052 = -592						; size = 8
tv2044 = -592						; size = 8
tv2025 = -592						; size = 8
tv2006 = -592						; size = 8
tv1987 = -592						; size = 8
tv1968 = -592						; size = 8
_s1t1$ = -592						; size = 8
tv3158 = -588						; size = 4
tv4843 = -584						; size = 4
tv3847 = -584						; size = 4
tv3105 = -584						; size = 4
_f2$ = -584						; size = 4
_yxJ$ = -580						; size = 144
_rjgrad$ = -436						; size = 144
_detgrad$ = -292					; size = 144
_r$ = -148						; size = 48
_t1$ = -100						; size = 48
_t2$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_carter_energy_gradient PROC				; COMDAT

; 236  : { facet_id f1 = f_info->id,f2;

	push	ebp
	mov	ebp, esp
	sub	esp, 664				; 00000298H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	mov	edi, DWORD PTR _f_info$[ebp]
	mov	eax, DWORD PTR [edi]

; 237  :   REAL **x=f_info->x;
; 238  :   MAT2D(y,FACET_VERTS,MAXCOORD); /* vertex coordinates */

	push	6
	push	3
	lea	ecx, DWORD PTR _yxJ$[ebp]
	push	ecx
	lea	edx, DWORD PTR _yqXvS$[ebp]
	push	edx
	mov	DWORD PTR _f_info$GSCopy$[ebp], edi
	mov	DWORD PTR _f1$[ebp], eax
	call	_mat2d_setup

; 239  :   REAL energy = 0.0;

	fldz
	mov	esi, eax
	fstp	QWORD PTR _energy$[ebp]

; 240  :   REAL t1[MAXCOORD],t2[MAXCOORD];
; 241  :   REAL rjgrad[FACET_VERTS][MAXCOORD];
; 242  :   REAL detgrad[FACET_VERTS][MAXCOORD];
; 243  :   REAL det,rj,r[MAXCOORD];
; 244  :   int j,k;
; 245  :   body_id b_id = get_facet_body(f_info->id);

	mov	eax, DWORD PTR [edi]
	push	eax
	call	_get_facet_body

; 246  :   body_id bb_id;
; 247  :   REAL s1t1,s1t2,s2t1,s2t2;
; 248  :   REAL p,pp;
; 249  : 
; 250  :   if ( !valid_id(b_id) ) return 0.0;

	fldz
	add	esp, 20					; 00000014H
	mov	DWORD PTR _b_id$[ebp], eax
	test	eax, 268435456				; 10000000H
	je	$LN43@carter_ene@3

; 251  : 
; 252  :   for ( k = 0 ; k < FACET_VERTS ; k++ )

	push	ebx
	mov	ebx, DWORD PTR _web+616
	xor	ecx, ecx
$LN41@carter_ene@3:

; 253  :     for ( j = 0 ; j < SDIM ; j++ ) 

	xor	eax, eax
	test	ebx, ebx
	jle	SHORT $LN40@carter_ene@3
$LN38@carter_ene@3:

; 254  :      f_info->grad[k][j] = 0.0;

	mov	edx, DWORD PTR [edi+1336]
	mov	edx, DWORD PTR [ecx+edx]
	fst	QWORD PTR [edx+eax*8]
	mov	ebx, DWORD PTR _web+616
	inc	eax
	cmp	eax, ebx
	jl	SHORT $LN38@carter_ene@3
$LN40@carter_ene@3:

; 251  : 
; 252  :   for ( k = 0 ; k < FACET_VERTS ; k++ )

	add	ecx, 4
	cmp	ecx, 12					; 0000000cH
	jl	SHORT $LN41@carter_ene@3

; 255  : 
; 256  :   FOR_ALL_FACETS(f2)

	mov	ecx, DWORD PTR _web+272
	fstp	ST(0)
	fld	QWORD PTR __real@4008000000000000
	mov	eax, ecx
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR _f2$[ebp], ecx
	mov	DWORD PTR tv1719[ebp], eax
	je	$LN88@carter_ene@3
$LN35@carter_ene@3:
	mov	eax, DWORD PTR _web+236
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	eax, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	mov	DWORD PTR tv1722[ebp], ecx
	je	$LN34@carter_ene@3

; 257  :     { if ( f2 == f1 ) continue; /* no self energy */

	mov	eax, DWORD PTR _f2$[ebp]
	cmp	eax, DWORD PTR _f1$[ebp]
	je	$LN34@carter_ene@3

; 258  :       bb_id = get_facet_body(f2);

	cmp	DWORD PTR _web+400, edx
	jne	SHORT $LN48@carter_ene@3
	xor	eax, eax
	jmp	SHORT $LN45@carter_ene@3
$LN48@carter_ene@3:
	cmp	DWORD PTR tv1719[ebp], edx
	jne	SHORT $LN47@carter_ene@3
	xor	eax, eax
	jmp	SHORT $LN45@carter_ene@3
$LN47@carter_ene@3:
	mov	edx, DWORD PTR _web+328
	test	eax, 134217728				; 08000000H
	mov	eax, DWORD PTR _dymem
	mov	edx, DWORD PTR [edx+eax+784]
	mov	eax, DWORD PTR _web+236
	mov	eax, DWORD PTR [ecx+eax]
	je	SHORT $LN46@carter_ene@3
	mov	eax, DWORD PTR [edx+eax+4]
	jmp	SHORT $LN45@carter_ene@3
$LN46@carter_ene@3:
	mov	eax, DWORD PTR [eax+edx]
$LN45@carter_ene@3:

; 259  :       if ( !valid_id(bb_id) ) continue;

	test	eax, 268435456				; 10000000H
	je	$LN34@carter_ene@3

; 260  :       if ( equal_id(b_id,bb_id) ) continue;

	cmp	DWORD PTR _b_id$[ebp], eax
	je	$LN34@carter_ene@3

; 261  :       get_facet_verts(f2,y,NULL);

	mov	ecx, DWORD PTR _f2$[ebp]
	fstp	ST(0)
	push	0
	push	esi
	push	ecx
	call	_get_facet_verts

; 262  :       for (j=0; j<SDIM; j++)

	mov	edx, DWORD PTR _web+616
	add	esp, 12					; 0000000cH
	xor	eax, eax
	cmp	edx, 4
	jl	$LC76@carter_ene@3
$LL77@carter_ene@3:

; 263  :       {  t1[j] = y[1][j] - y[0][j];

	mov	ecx, DWORD PTR [esi+4]
	fld	QWORD PTR [ecx+eax*8]
	mov	ebx, DWORD PTR [esi]
	fsub	QWORD PTR [ebx+eax*8]

; 264  :           t2[j] = y[2][j] - y[0][j];

	add	eax, 4
	fstp	QWORD PTR _t1$[ebp+eax*8-32]
	mov	ecx, DWORD PTR [esi+8]
	fld	QWORD PTR [ecx+eax*8-32]
	mov	ebx, DWORD PTR [esi]
	fsub	QWORD PTR [ebx+eax*8-32]
	fstp	QWORD PTR _t2$[ebp+eax*8-32]
	mov	ecx, DWORD PTR [esi+4]
	fld	QWORD PTR [ecx+eax*8-24]
	mov	ebx, DWORD PTR [esi]
	fsub	QWORD PTR [ebx+eax*8-24]
	fstp	QWORD PTR _t1$[ebp+eax*8-24]
	mov	ecx, DWORD PTR [esi+8]
	fld	QWORD PTR [ecx+eax*8-24]
	mov	ebx, DWORD PTR [esi]
	fsub	QWORD PTR [ebx+eax*8-24]
	fstp	QWORD PTR _t2$[ebp+eax*8-24]
	mov	ecx, DWORD PTR [esi+4]
	fld	QWORD PTR [ecx+eax*8-16]
	mov	ebx, DWORD PTR [esi]
	fsub	QWORD PTR [ebx+eax*8-16]
	fstp	QWORD PTR _t1$[ebp+eax*8-16]
	mov	ecx, DWORD PTR [esi+8]
	fld	QWORD PTR [ecx+eax*8-16]
	mov	ebx, DWORD PTR [esi]
	fsub	QWORD PTR [ebx+eax*8-16]
	fstp	QWORD PTR _t2$[ebp+eax*8-16]
	mov	ecx, DWORD PTR [esi+4]
	fld	QWORD PTR [ecx+eax*8-8]
	mov	ebx, DWORD PTR [esi]
	fsub	QWORD PTR [ebx+eax*8-8]
	fstp	QWORD PTR _t1$[ebp+eax*8-8]
	mov	ecx, DWORD PTR [esi+8]
	fld	QWORD PTR [ecx+eax*8-8]
	mov	ebx, DWORD PTR [esi]
	fsub	QWORD PTR [ebx+eax*8-8]
	lea	ecx, DWORD PTR [edx-3]
	fstp	QWORD PTR _t2$[ebp+eax*8-8]
	cmp	eax, ecx
	jl	$LL77@carter_ene@3
$LC76@carter_ene@3:

; 262  :       for (j=0; j<SDIM; j++)

	cmp	eax, edx
	jge	SHORT $LN75@carter_ene@3
	npad	2
$LC27@carter_ene@3:

; 263  :       {  t1[j] = y[1][j] - y[0][j];

	mov	ecx, DWORD PTR [esi+4]
	fld	QWORD PTR [ecx+eax*8]
	mov	ebx, DWORD PTR [esi]
	fsub	QWORD PTR [ebx+eax*8]
	inc	eax
	fstp	QWORD PTR _t1$[ebp+eax*8-8]

; 264  :           t2[j] = y[2][j] - y[0][j];

	mov	ecx, DWORD PTR [esi+8]
	fld	QWORD PTR [ecx+eax*8-8]
	mov	ebx, DWORD PTR [esi]
	fsub	QWORD PTR [ebx+eax*8-8]
	fstp	QWORD PTR _t2$[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LC27@carter_ene@3
$LN75@carter_ene@3:

; 265  :       }
; 266  :       for (j=0; j<SDIM; j++)

	fld	QWORD PTR __real@4008000000000000
	xor	eax, eax
	cmp	edx, 4
	jl	$LC79@carter_ene@3

; 267  :           r[j] = (y[0][j]+y[1][j]+y[2][j] - (x[0][j]+x[1][j]+x[2][j]))/3;

	mov	ecx, DWORD PTR [edi+420]
	mov	edx, DWORD PTR [edi+416]
	mov	edi, DWORD PTR [edi+424]
	mov	ebx, ecx
	sub	ebx, edx
	mov	DWORD PTR tv3100[ebp], ebx
	mov	ebx, edi
	sub	ebx, edx
	mov	DWORD PTR tv3105[ebp], ebx
	mov	ebx, ecx
	lea	eax, DWORD PTR [edi+16]
	sub	ebx, edi
	mov	DWORD PTR tv2842[ebp], ecx
	lea	edi, DWORD PTR _r$[ebp]
	sub	edi, ecx
	mov	ecx, DWORD PTR _web+616
	add	ecx, -4					; fffffffcH
	shr	ecx, 2
	inc	ecx
	mov	DWORD PTR tv426[ebp], ecx
	mov	DWORD PTR tv3022[ebp], eax
	lea	eax, DWORD PTR [edx+8]
	add	ecx, ecx
	neg	edx
	add	ecx, ecx
	mov	DWORD PTR tv3158[ebp], ebx
	mov	DWORD PTR tv5100[ebp], edi
	mov	DWORD PTR _j$[ebp], ecx
$LN80@carter_ene@3:
	mov	edi, DWORD PTR [esi]
	mov	ebx, DWORD PTR [esi+4]
	lea	ecx, DWORD PTR [edx+eax-8]
	fld	QWORD PTR [edi+ecx]
	mov	edi, DWORD PTR [esi+8]
	fadd	QWORD PTR [ecx+ebx]
	mov	ebx, DWORD PTR tv3022[ebp]
	fadd	QWORD PTR [edi+ecx]
	mov	edi, DWORD PTR tv2842[ebp]
	fld	QWORD PTR [eax-8]
	fadd	QWORD PTR [edi]
	fadd	QWORD PTR [ebx-16]
	mov	ebx, DWORD PTR tv5100[ebp]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ebx+edi]
	mov	edi, DWORD PTR [esi]
	fld	QWORD PTR [edi+ecx+8]
	mov	ebx, DWORD PTR [esi+4]
	fadd	QWORD PTR [ecx+ebx+8]
	mov	edi, DWORD PTR [esi+8]
	fadd	QWORD PTR [edi+ecx+8]
	mov	ecx, DWORD PTR tv3100[ebp]
	fld	QWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR tv3105[ebp]
	fadd	QWORD PTR [eax]
	fadd	QWORD PTR [eax+ecx]
	lea	ecx, DWORD PTR _r$[ebp+edx]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ecx+eax]
	mov	edi, DWORD PTR [esi]
	mov	ebx, DWORD PTR [esi+4]
	lea	ecx, DWORD PTR [edx+eax+8]
	fld	QWORD PTR [edi+ecx]
	mov	edi, DWORD PTR [esi+8]
	fadd	QWORD PTR [ecx+ebx]
	fadd	QWORD PTR [edi+ecx]
	mov	ecx, DWORD PTR tv3022[ebp]
	mov	edi, DWORD PTR tv3158[ebp]
	fld	QWORD PTR [ecx+edi]
	fadd	QWORD PTR [eax+8]
	fadd	QWORD PTR [ecx]
	lea	ecx, DWORD PTR _r$[ebp+edx+8]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ecx+eax]
	mov	edi, DWORD PTR [esi]
	mov	ebx, DWORD PTR [esi+4]
	lea	ecx, DWORD PTR [edx+eax+16]
	fld	QWORD PTR [edi+ecx]
	mov	edi, DWORD PTR [esi+8]
	fadd	QWORD PTR [ecx+ebx]
	lea	ebx, DWORD PTR _r$[ebp+edx+16]
	add	eax, 32					; 00000020H
	fadd	QWORD PTR [edi+ecx]
	mov	ecx, DWORD PTR tv2842[ebp]
	fld	QWORD PTR [eax-16]
	mov	edi, DWORD PTR tv3022[ebp]
	fadd	QWORD PTR [ecx+24]
	add	ecx, 32					; 00000020H
	add	edi, 32					; 00000020H
	dec	DWORD PTR tv426[ebp]
	fadd	QWORD PTR [edi-24]
	mov	DWORD PTR tv2842[ebp], ecx
	mov	DWORD PTR tv3022[ebp], edi
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ebx+eax-32]
	jne	$LN80@carter_ene@3

; 265  :       }
; 266  :       for (j=0; j<SDIM; j++)

	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR _j$[ebp]
	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
$LC79@carter_ene@3:
	cmp	eax, edx
	jge	SHORT $LN133@carter_ene@3
	mov	edx, DWORD PTR [edi+416]
	mov	ebx, DWORD PTR [edi+420]
	sub	ebx, edx
	mov	DWORD PTR tv3100[ebp], ebx
	mov	ebx, DWORD PTR [edi+424]
	sub	ebx, edx
	mov	DWORD PTR tv3105[ebp], ebx
	lea	ebx, DWORD PTR _r$[ebp]
	sub	ebx, edx
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	DWORD PTR tv5087[ebp], ebx
$LC24@carter_ene@3:

; 267  :           r[j] = (y[0][j]+y[1][j]+y[2][j] - (x[0][j]+x[1][j]+x[2][j]))/3;

	mov	edx, DWORD PTR [esi]
	fld	QWORD PTR [edx+eax*8]
	mov	ebx, DWORD PTR [esi+4]
	fadd	QWORD PTR [ebx+eax*8]
	mov	edx, DWORD PTR [esi+8]
	inc	eax
	add	ecx, 8
	fadd	QWORD PTR [edx+eax*8-8]
	mov	edx, DWORD PTR tv3100[ebp]
	fld	QWORD PTR [ecx+edx-8]
	mov	edx, DWORD PTR tv3105[ebp]
	fadd	QWORD PTR [ecx-8]
	fadd	QWORD PTR [ecx+edx-8]
	mov	edx, DWORD PTR tv5087[ebp]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [edx+ecx-8]
	mov	edx, DWORD PTR _web+616
	cmp	eax, edx
	jl	SHORT $LC24@carter_ene@3
$LN133@carter_ene@3:

; 268  :       rj = SDIM_dot(r,r);

	push	edx
	fstp	ST(0)
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fstp	QWORD PTR _rj$[ebp]
	fld	QWORD PTR __real@c000000000000000
	mov	ebx, DWORD PTR _web+616
	fld	QWORD PTR __real@4008000000000000
	add	esp, 12					; 0000000cH
	xor	edx, edx
	lea	ecx, DWORD PTR _rjgrad$[ebp+8]
	mov	DWORD PTR tv3847[ebp], edx
	mov	DWORD PTR tv3863[ebp], ecx
$LN21@carter_ene@3:

; 270  :         for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	cmp	ebx, 4
	jl	SHORT $LC82@carter_ene@3
	lea	edx, DWORD PTR [ebx-3]
$LN83@carter_ene@3:

; 271  :           rjgrad[k][j] = -2*r[j]/3;

	fld	QWORD PTR _r$[ebp+eax*8]
	add	eax, 4
	fmul	ST(0), ST(2)
	add	ecx, 32					; 00000020H
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ecx-40]
	fld	QWORD PTR _r$[ebp+eax*8-24]
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ecx-32]
	fld	QWORD PTR _r$[ebp+eax*8-16]
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ecx-24]
	fld	QWORD PTR _r$[ebp+eax*8-8]
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ecx-16]
	cmp	eax, edx
	jl	SHORT $LN83@carter_ene@3
	mov	edx, DWORD PTR tv3847[ebp]
$LC82@carter_ene@3:

; 270  :         for ( j = 0 ; j < SDIM ; j++ )

	cmp	eax, ebx
	jge	SHORT $LN20@carter_ene@3
	lea	ecx, DWORD PTR [edx+eax]
	lea	ecx, DWORD PTR _rjgrad$[ebp+ecx*8]
$LC18@carter_ene@3:

; 271  :           rjgrad[k][j] = -2*r[j]/3;

	fld	QWORD PTR _r$[ebp+eax*8]
	inc	eax
	fmul	ST(0), ST(2)
	add	ecx, 8
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ecx-8]
	cmp	eax, ebx
	jl	SHORT $LC18@carter_ene@3
$LN20@carter_ene@3:

; 269  :       for ( k = 0 ; k < FACET_VERTS ; k++ )

	mov	ecx, DWORD PTR tv3863[ebp]
	add	edx, 6
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv3863[ebp], ecx
	mov	DWORD PTR tv3847[ebp], edx
	cmp	edx, 18					; 00000012H
	jl	$LN21@carter_ene@3

; 272  :       s1t1 = SDIM_dot(f_info->sides[0][0],t1);

	mov	eax, DWORD PTR [edi+1276]
	fstp	ST(1)
	mov	ecx, DWORD PTR [eax]
	fstp	ST(0)
	push	ebx
	lea	edx, DWORD PTR _t1$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_dot
	fstp	QWORD PTR _s1t1$[ebp]

; 273  :       s1t2 = SDIM_dot(f_info->sides[0][0],t2);

	mov	eax, DWORD PTR _web+616
	mov	edx, DWORD PTR [edi+1276]
	push	eax
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR _t2$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_dot
	fstp	QWORD PTR _s1t2$[ebp]

; 274  :       s2t1 = SDIM_dot(f_info->sides[0][1],t1);

	mov	edx, DWORD PTR _web+616
	mov	ecx, DWORD PTR [edi+1276]
	push	edx
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR _t1$[ebp]
	push	eax
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_dot
	fstp	QWORD PTR _s2t1$[ebp]

; 275  :       s2t2 = SDIM_dot(f_info->sides[0][1],t2);

	mov	ecx, DWORD PTR _web+616
	mov	eax, DWORD PTR [edi+1276]
	push	ecx
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _t2$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_dot

; 276  :       det = s1t1*s2t2 - s1t2*s2t1;

	fld	ST(0)
	fld	QWORD PTR _s1t1$[ebp]

; 277  :       for ( j = 0 ; j < SDIM ; j++ )

	mov	ebx, DWORD PTR _web+616
	fmul	ST(1), ST(0)
	add	esp, 48					; 00000030H
	fld	QWORD PTR _s2t1$[ebp]
	xor	eax, eax
	fld	ST(0)
	fld	QWORD PTR _s1t2$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(4)
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR _det$[ebp]
	cmp	ebx, 4
	jl	$LC85@carter_ene@3
	lea	ecx, DWORD PTR [ebx-3]
$LN86@carter_ene@3:

; 278  :       { detgrad[0][j] = -t1[j]*s2t2 + t2[j]*s2t1 - t2[j]*s1t1 + t1[j]*s1t2;

	fld	QWORD PTR _t2$[ebp+eax*8]
	fmul	ST(0), ST(1)
	fld	ST(4)
	fmul	QWORD PTR _t1$[ebp+eax*8]
	fld	QWORD PTR _t2$[ebp+eax*8]
	fmul	ST(0), ST(4)
	fst	QWORD PTR tv1966[ebp]
	fld	ST(5)
	fmul	QWORD PTR _t1$[ebp+eax*8]
	fstp	QWORD PTR tv1968[ebp]
	fld	ST(2)
	fsub	ST(0), ST(2)
	fsubrp	ST(1), ST(0)
	fld	QWORD PTR tv1968[ebp]
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _detgrad$[ebp+eax*8]

; 279  :          detgrad[1][j] = t1[j]*s2t2 - t2[j]*s2t1;

	fxch	ST(1)
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _detgrad$[ebp+eax*8+48]

; 280  :          detgrad[2][j] = t2[j]*s1t1 - t1[j]*s1t2;

	fsubr	QWORD PTR tv1966[ebp]
	fstp	QWORD PTR _detgrad$[ebp+eax*8+96]
	fld	ST(0)
	fmul	QWORD PTR _t2$[ebp+eax*8+8]
	fld	QWORD PTR _t1$[ebp+eax*8+8]
	fmul	ST(0), ST(5)
	fld	ST(3)
	fmul	QWORD PTR _t2$[ebp+eax*8+8]
	fst	QWORD PTR tv1985[ebp]
	fld	QWORD PTR _t1$[ebp+eax*8+8]
	fmul	ST(0), ST(6)
	fstp	QWORD PTR tv1987[ebp]
	fld	ST(2)
	fsub	ST(0), ST(2)
	fsubrp	ST(1), ST(0)
	fld	QWORD PTR tv1987[ebp]
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _detgrad$[ebp+eax*8+8]
	fxch	ST(1)
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _detgrad$[ebp+eax*8+56]
	fsubr	QWORD PTR tv1985[ebp]
	fstp	QWORD PTR _detgrad$[ebp+eax*8+104]
	fld	QWORD PTR _t2$[ebp+eax*8+16]
	fmul	ST(0), ST(1)
	fld	QWORD PTR _t1$[ebp+eax*8+16]
	fmul	ST(0), ST(5)
	fld	QWORD PTR _t2$[ebp+eax*8+16]
	fmul	ST(0), ST(4)
	fst	QWORD PTR tv2004[ebp]
	fld	QWORD PTR _t1$[ebp+eax*8+16]
	fmul	ST(0), ST(6)
	fstp	QWORD PTR tv2006[ebp]
	fld	ST(2)
	fsub	ST(0), ST(2)
	fsubrp	ST(1), ST(0)
	fld	QWORD PTR tv2006[ebp]
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _detgrad$[ebp+eax*8+16]
	fxch	ST(1)
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _detgrad$[ebp+eax*8+64]
	fsubr	QWORD PTR tv2004[ebp]
	fstp	QWORD PTR _detgrad$[ebp+eax*8+112]
	fld	QWORD PTR _t2$[ebp+eax*8+24]
	fmul	ST(0), ST(1)
	fld	ST(4)
	fmul	QWORD PTR _t1$[ebp+eax*8+24]
	fld	QWORD PTR _t2$[ebp+eax*8+24]
	fmul	ST(0), ST(4)
	fst	QWORD PTR tv2023[ebp]
	fld	ST(5)
	fmul	QWORD PTR _t1$[ebp+eax*8+24]
	fstp	QWORD PTR tv2025[ebp]
	fld	ST(2)
	fsub	ST(0), ST(2)
	fsubrp	ST(1), ST(0)
	add	eax, 4
	fld	QWORD PTR tv2025[ebp]
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _detgrad$[ebp+eax*8-8]
	fxch	ST(1)
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _detgrad$[ebp+eax*8+40]
	fsubr	QWORD PTR tv2023[ebp]
	fstp	QWORD PTR _detgrad$[ebp+eax*8+88]
	cmp	eax, ecx
	jl	$LN86@carter_ene@3
$LC85@carter_ene@3:

; 277  :       for ( j = 0 ; j < SDIM ; j++ )

	cmp	eax, ebx
	jge	SHORT $LN153@carter_ene@3
$LC15@carter_ene@3:

; 278  :       { detgrad[0][j] = -t1[j]*s2t2 + t2[j]*s2t1 - t2[j]*s1t1 + t1[j]*s1t2;

	fld	QWORD PTR _t2$[ebp+eax*8]
	inc	eax
	fmul	ST(0), ST(1)
	fld	ST(4)
	fmul	QWORD PTR _t1$[ebp+eax*8-8]
	fld	QWORD PTR _t2$[ebp+eax*8-8]
	fmul	ST(0), ST(4)
	fst	QWORD PTR tv2042[ebp]
	fld	ST(5)
	fmul	QWORD PTR _t1$[ebp+eax*8-8]
	fstp	QWORD PTR tv2044[ebp]
	fld	ST(2)
	fsub	ST(0), ST(2)
	fsubrp	ST(1), ST(0)
	fld	QWORD PTR tv2044[ebp]
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _detgrad$[ebp+eax*8-8]

; 279  :          detgrad[1][j] = t1[j]*s2t2 - t2[j]*s2t1;

	fxch	ST(1)
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _detgrad$[ebp+eax*8+40]

; 280  :          detgrad[2][j] = t2[j]*s1t1 - t1[j]*s1t2;

	fsubr	QWORD PTR tv2042[ebp]
	fstp	QWORD PTR _detgrad$[ebp+eax*8+88]
	cmp	eax, ebx
	jl	SHORT $LC15@carter_ene@3
$LN153@carter_ene@3:

; 277  :       for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(3)
	fstp	ST(0)
	fstp	ST(0)
	fstp	ST(0)

; 281  :       }
; 282  :       p = 1/pow(rj,carter_power/2-1);

	fld	QWORD PTR _carter_power
	fmul	QWORD PTR __real@3fe0000000000000
	fsub	QWORD PTR __real@3ff0000000000000
	fst	QWORD PTR tv2052[ebp]
	fld	QWORD PTR _rj$[ebp]
	fxch	ST(1)
	call	__CIpow
	fld1
	fdivrp	ST(1), ST(0)
	xor	edx, edx
	mov	DWORD PTR tv4843[ebp], edx

; 283  :       pp = (carter_power/2-1)*det*p/rj;

	fld	QWORD PTR _det$[ebp]
	fld	QWORD PTR tv2052[ebp]
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(2)
	fdiv	QWORD PTR _rj$[ebp]

; 284  :       energy += det*p;

	fld	ST(2)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR _energy$[ebp]
	fstp	QWORD PTR _energy$[ebp]
$LN93@carter_ene@3:

; 286  :         for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	test	ebx, ebx
	jle	SHORT $LN11@carter_ene@3
$LN89@carter_ene@3:
	mov	ecx, DWORD PTR [edi+1336]
	mov	ebx, DWORD PTR tv4843[ebp]
	mov	ecx, DWORD PTR [ebx+ecx]
	lea	ebx, DWORD PTR [edx+eax*8]

; 287  :           f_info->grad[k][j] += (detgrad[k][j]*p - pp*rjgrad[k][j]);

	fld	QWORD PTR _detgrad$[ebp+ebx]
	lea	ebx, DWORD PTR [edx+eax*8]
	fmul	ST(0), ST(2)
	lea	ecx, DWORD PTR [ecx+eax*8]
	fld	QWORD PTR _rjgrad$[ebp+ebx]
	inc	eax
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	ebx, DWORD PTR _web+616
	cmp	eax, ebx
	jl	SHORT $LN89@carter_ene@3
$LN11@carter_ene@3:

; 285  :       for ( k = 0 ; k < FACET_VERTS ; k++ )

	add	DWORD PTR tv4843[ebp], 4
	add	edx, 48					; 00000030H
	cmp	edx, 144				; 00000090H
	jl	SHORT $LN93@carter_ene@3
	mov	ecx, DWORD PTR tv1722[ebp]
	fstp	ST(1)
	fstp	ST(0)
	fld	QWORD PTR __real@4008000000000000
$LN34@carter_ene@3:

; 255  : 
; 256  :   FOR_ALL_FACETS(f2)

	mov	edx, DWORD PTR _web+236
	mov	eax, DWORD PTR [ecx+edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, ecx
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR _f2$[ebp], ecx
	mov	DWORD PTR tv1719[ebp], eax
	jne	$LN35@carter_ene@3
$LN88@carter_ene@3:

; 288  :     }
; 289  :   for ( k = 0 ; k < FACET_VERTS ; k++ )

	fld	QWORD PTR __real@4000000000000000
	xor	edx, edx
	fld	QWORD PTR __real@4010000000000000
$LN6@carter_ene@3:

; 290  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	test	ebx, ebx
	jle	SHORT $LN5@carter_ene@3
$LN3@carter_ene@3:
	mov	ecx, DWORD PTR [edi+1336]

; 291  :             f_info->grad[k][j] /= (3-carter_power)*(2-carter_power)*4 ;

	fld	ST(2)
	fld	QWORD PTR _carter_power
	mov	ecx, DWORD PTR [edx+ecx]
	fsub	ST(1), ST(0)
	lea	ecx, DWORD PTR [ecx+eax*8]
	fsubr	ST(0), ST(3)
	inc	eax
	fmulp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fdivr	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	ebx, DWORD PTR _web+616
	cmp	eax, ebx
	jl	SHORT $LN3@carter_ene@3
$LN5@carter_ene@3:

; 288  :     }
; 289  :   for ( k = 0 ; k < FACET_VERTS ; k++ )

	add	edx, 4
	cmp	edx, 12					; 0000000cH
	jl	SHORT $LN6@carter_ene@3
	fstp	ST(0)
	pop	ebx

; 292  : 
; 293  :   return energy/(3-carter_power)/(2-carter_power)/4/2;

	fld	QWORD PTR _carter_power
	fsub	ST(2), ST(0)
	fld	QWORD PTR _energy$[ebp]
	fdivrp	ST(3), ST(0)
	fsubp	ST(1), ST(0)
	fdivp	ST(1), ST(0)
	fmul	QWORD PTR __real@3fd0000000000000
	fmul	QWORD PTR __real@3fe0000000000000
$LN43@carter_ene@3:

; 294  : 
; 295  : } // end carter_energy_gradient()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_carter_energy_gradient ENDP
_TEXT	ENDS
PUBLIC	_strerror_test
; Function compile flags: /Ogtp
;	COMDAT _strerror_test
_TEXT	SEGMENT
_strerror_test PROC					; COMDAT

; 297  : void strerror_test() { }

	ret	0
_strerror_test ENDP
_TEXT	ENDS
END
