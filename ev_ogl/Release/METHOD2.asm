; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\METHOD2.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_q_facet_tension_init
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\method2.c
;	COMDAT _q_facet_tension_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_q_facet_tension_init PROC				; COMDAT

; 43   :   /* if ( everything_quantities_flag && (mode==METHOD_VALUE) ) web.total_area = 0.0; */
; 44   : }

	ret	0
_q_facet_tension_init ENDP
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_q_facet_tension_value
EXTRN	_binary_tree_add:PROC
EXTRN	_proc_total_area:BYTE
EXTRN	_win_get_thread_data:PROC
EXTRN	_thread_data_key:DWORD
EXTRN	_nprocs:DWORD
EXTRN	_dot:PROC
EXTRN	_lagrange_facet_tension_value:PROC
EXTRN	_q_facet_tension_q:PROC
EXTRN	_meth_inst_list:DWORD
EXTRN	_web:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CIsqrt:PROC
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _q_facet_tension_value
_TEXT	SEGMENT
_j$ = -412						; size = 4
_mi$ = -408						; size = 4
_area$ = -404						; size = 8
_f_info$GSCopy$ = -396					; size = 4
tv631 = -392						; size = 4
_U$ = -388						; size = 288
_diag$ = -100						; size = 48
_D$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_q_facet_tension_value PROC				; COMDAT

; 54   : { REAL area;

	push	ebp
	mov	ebp, esp
	sub	esp, 412				; 0000019cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	edi
	mov	edi, DWORD PTR _f_info$[ebp]

; 55   :   int i,j,k;
; 56   :   REAL diag[MAXCOORD];
; 57   :   REAL D[MAXCOORD]; /* diag^-1 */
; 58   :   REAL U[MAXCOORD][MAXCOORD];
; 59   :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [edi+8]
	cdq
	mov	ebx, eax

; 60   : 
; 61   :   if ( web.modeltype == QUADRATIC ) return q_facet_tension_q(f_info); 

	mov	eax, DWORD PTR _web+628
	xor	ebx, edx
	sub	ebx, edx
	imul	ebx, 2928				; 00000b70H
	add	ebx, DWORD PTR _meth_inst_list
	mov	DWORD PTR _f_info$GSCopy$[ebp], edi
	mov	DWORD PTR _mi$[ebp], ebx
	cmp	eax, 2
	jne	SHORT $LN22@q_facet_te
	push	edi
	call	_q_facet_tension_q
	add	esp, 4
	pop	edi
	pop	ebx

; 92   :   return area;
; 93   : } // end q_facet_tension_value()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN22@q_facet_te:

; 62   :   if ( web.modeltype == LAGRANGE ) 

	cmp	eax, 3
	jne	SHORT $LN21@q_facet_te

; 63   :       return lagrange_facet_tension_value(f_info);

	push	edi
	call	_lagrange_facet_tension_value
	add	esp, 4
	pop	edi
	pop	ebx

; 92   :   return area;
; 93   : } // end q_facet_tension_value()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN21@q_facet_te:

; 64   :   /* new way, using Gram-Schmidt */
; 65   :   area = 1.0;

	fld1
	push	esi

; 66   :   for ( i = 0 ; i < web.dimension ; i++ )

	xor	esi, esi
	fst	QWORD PTR _area$[ebp]
	cmp	DWORD PTR _web+620, esi
	jle	$LN33@q_facet_te

; 64   :   /* new way, using Gram-Schmidt */
; 65   :   area = 1.0;

	lea	ebx, DWORD PTR _U$[ebp]
	mov	DWORD PTR tv631[ebp], ebx
	jmp	SHORT $LN64@q_facet_te
$LL59@q_facet_te:

; 66   :   for ( i = 0 ; i < web.dimension ; i++ )

	fstp	ST(0)
$LN64@q_facet_te:

; 67   :   { for ( j = 0 ; j < SDIM ; j++ ) U[i][j] = f_info->sides[0][i][j];

	mov	edx, DWORD PTR _web+616
	fstp	ST(0)
	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN15@q_facet_te
	mov	edi, DWORD PTR [edi+1276]
	mov	ecx, ebx
$LL17@q_facet_te:
	mov	ebx, DWORD PTR [edi]
	mov	ebx, DWORD PTR [ebx+esi*4]
	fld	QWORD PTR [ebx+eax*8]
	inc	eax
	fstp	QWORD PTR [ecx]
	add	ecx, 8
	cmp	eax, edx
	jl	SHORT $LL17@q_facet_te
	mov	ebx, DWORD PTR tv631[ebp]
$LN15@q_facet_te:

; 68   :      for ( j = 0 ; j < i ; j++ )

	xor	edi, edi
	mov	DWORD PTR _j$[ebp], edi
	test	esi, esi
	jle	SHORT $LN12@q_facet_te
	lea	ebx, DWORD PTR _U$[ebp]
$LL14@q_facet_te:

; 69   :      { REAL su = SDIM_dot(f_info->sides[0][i],U[j])*D[j];

	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [eax+1276]
	push	edx
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+esi*4]
	push	ebx
	push	eax
	call	_dot
	fmul	QWORD PTR _D$[ebp+edi*8]

; 70   :         for ( k = 0 ; k < SDIM ; k++ ) U[i][k] -= su*U[j][k];

	mov	edx, DWORD PTR _web+616
	add	esp, 12					; 0000000cH
	test	edx, edx
	jle	SHORT $LN49@q_facet_te

; 69   :      { REAL su = SDIM_dot(f_info->sides[0][i],U[j])*D[j];

	mov	eax, DWORD PTR tv631[ebp]
	mov	ecx, ebx
	mov	edi, edx
$LN11@q_facet_te:

; 70   :         for ( k = 0 ; k < SDIM ; k++ ) U[i][k] -= su*U[j][k];

	fld	QWORD PTR [ecx]
	add	ecx, 8
	fmul	ST(0), ST(1)
	add	eax, 8
	dec	edi
	fsubr	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LN11@q_facet_te
	mov	edi, DWORD PTR _j$[ebp]
$LN49@q_facet_te:

; 68   :      for ( j = 0 ; j < i ; j++ )

	inc	edi

; 70   :         for ( k = 0 ; k < SDIM ; k++ ) U[i][k] -= su*U[j][k];

	fstp	ST(0)
	add	ebx, 48					; 00000030H
	mov	DWORD PTR _j$[ebp], edi
	cmp	edi, esi
	jl	SHORT $LL14@q_facet_te

; 68   :      for ( j = 0 ; j < i ; j++ )

	mov	ebx, DWORD PTR tv631[ebp]
$LN12@q_facet_te:

; 71   :      }
; 72   :      diag[i] = SDIM_dot(U[i],U[i]);

	push	edx
	push	ebx
	push	ebx
	call	_dot
	fst	QWORD PTR _diag$[ebp+esi*8]

; 73   :      if ( diag[i] > 0.0 ) D[i] = 1/diag[i];

	fldz
	add	esp, 12					; 0000000cH
	fcom	ST(1)
	fnstsw	ax
	fld1
	test	ah, 5
	jp	SHORT $LN8@q_facet_te
	fdiv	ST(0), ST(2)
$LN8@q_facet_te:

; 74   :      else D[i] = 1.0;
; 75   :      area *= diag[i];
; 76   :   }
; 77   : 
; 78   :   if ( area > 0.0 )

	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	fstp	QWORD PTR _D$[ebp+esi*8]
	fxch	ST(1)
	inc	esi
	fmul	QWORD PTR _area$[ebp]
	add	ebx, 48					; 00000030H
	mov	DWORD PTR tv631[ebp], ebx
	fst	QWORD PTR _area$[ebp]
	cmp	esi, DWORD PTR _web+620
	jl	$LL59@q_facet_te
	mov	ebx, DWORD PTR _mi$[ebp]
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN62@q_facet_te
	fstp	ST(1)
$LN33@q_facet_te:

; 79   :      area = sqrt(area)/web.simplex_factorial;

	call	__CIsqrt
	fdiv	QWORD PTR _web+792
	jmp	SHORT $LN65@q_facet_te
$LN62@q_facet_te:

; 74   :      else D[i] = 1.0;
; 75   :      area *= diag[i];
; 76   :   }
; 77   : 
; 78   :   if ( area > 0.0 )

	fstp	ST(0)
$LN65@q_facet_te:

; 80   :   else area = 0.0;
; 81   :   if ( mi->flags & DEFAULT_INSTANCE )

	test	DWORD PTR [ebx+140], 4194304		; 00400000H
	fst	QWORD PTR _area$[ebp]
	pop	esi
	je	SHORT $LN2@q_facet_te

; 82   :   { set_facet_area(f_info->id,area);

	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR _web+236
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	fst	QWORD PTR [eax+40]

; 83   : #ifdef SHARED_MEMORY
; 84   :      if ( nprocs > 1 ) 

	cmp	DWORD PTR _nprocs, 1
	jle	SHORT $LN3@q_facet_te

; 85   :       proc_total_area[GET_THREAD_ID] += area;

	mov	ecx, DWORD PTR _thread_data_key
	fstp	ST(0)
	push	ecx
	call	_win_get_thread_data
	fld	QWORD PTR _area$[ebp]
	mov	eax, DWORD PTR [eax]
	fld	ST(0)
	fadd	QWORD PTR _proc_total_area[eax*8]
	add	esp, 4
	fstp	QWORD PTR _proc_total_area[eax*8]

; 86   :      else

	jmp	SHORT $LN2@q_facet_te
$LN3@q_facet_te:

; 87   : #endif
; 88   :      binary_tree_add(web.total_area_addends,area);

	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET _web+1000
	call	_binary_tree_add
	fld	QWORD PTR _area$[ebp]
	add	esp, 12					; 0000000cH
$LN2@q_facet_te:

; 89   :   }
; 90   :   if ( mi->flags & USE_DENSITY )

	test	DWORD PTR [ebx+140], 536870912		; 20000000H
	je	SHORT $LN23@q_facet_te

; 91   :       area *= get_facet_density(f_info->id);

	mov	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR _web+236
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	fmul	QWORD PTR [ecx+32]
$LN23@q_facet_te:

; 92   :   return area;
; 93   : } // end q_facet_tension_value()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_q_facet_tension_value ENDP
_TEXT	ENDS
PUBLIC	_q_facet_tension_gradient
EXTRN	_vector_sub:PROC
EXTRN	_mat_mult:PROC
EXTRN	_det_adjoint:PROC
EXTRN	_mat_tsquare:PROC
EXTRN	_lagrange_facet_tension_grad:PROC
EXTRN	_q_facet_tension_q_grad:PROC
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT _q_facet_tension_gradient
_TEXT	SEGMENT
_area$ = -8						; size = 8
_f_info$ = 8						; size = 4
_q_facet_tension_gradient PROC				; COMDAT

; 103  : { REAL area;

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi

; 104  :   int i,j;
; 105  :   REAL fudge;
; 106  :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	esi, DWORD PTR _f_info$[ebp]
	mov	eax, DWORD PTR [esi+8]
	push	edi
	cdq
	mov	edi, eax

; 107  : 
; 108  :   if ( web.modeltype == QUADRATIC ) return q_facet_tension_q_grad(f_info); 

	mov	eax, DWORD PTR _web+628
	xor	edi, edx
	sub	edi, edx
	imul	edi, 2928				; 00000b70H
	add	edi, DWORD PTR _meth_inst_list
	cmp	eax, 2
	jne	SHORT $LN14@q_facet_te@2
	push	esi
	call	_q_facet_tension_q_grad
	add	esp, 4
	pop	edi
	pop	esi

; 185  : } // end q_facet_tension_gradient()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@q_facet_te@2:

; 109  :   if ( web.modeltype == LAGRANGE ) 

	cmp	eax, 3
	jne	SHORT $LN13@q_facet_te@2

; 110  :      return lagrange_facet_tension_grad(f_info);

	push	esi
	call	_lagrange_facet_tension_grad
	add	esp, 4
	pop	edi
	pop	esi

; 185  : } // end q_facet_tension_gradient()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@q_facet_te@2:

; 111  : 
; 112  : #define OLDWAY
; 113  : #ifdef OLDWAY
; 114  :   mat_tsquare(f_info->sides[0],f_info->ss,web.dimension,SDIM);

	mov	eax, DWORD PTR _web+616
	mov	ecx, DWORD PTR _web+620
	mov	edx, DWORD PTR [esi+1280]
	push	eax
	mov	eax, DWORD PTR [esi+1276]
	push	ecx
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	ecx
	call	_mat_tsquare

; 115  :   area = det_adjoint(f_info->ss,web.dimension);

	mov	edx, DWORD PTR _web+620
	mov	eax, DWORD PTR [esi+1280]
	push	edx
	push	eax
	call	_det_adjoint

; 116  :   if ( area > 0.0 )

	fldz
	fcom	ST(1)
	add	esp, 24					; 00000018H
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN24@q_facet_te@2
	fstp	ST(0)

; 117  :   { area = sqrt(area);

	call	__CIsqrt

; 118  :     fudge = 1/(area*web.simplex_factorial);

	fld	QWORD PTR _web+792
	fld	ST(0)
	fmul	ST(0), ST(2)
	fld1
	fdivrp	ST(1), ST(0)

; 119  :     area /= web.simplex_factorial;

	fxch	ST(2)
	fdivrp	ST(1), ST(0)
	jmp	SHORT $LN35@q_facet_te@2
$LN24@q_facet_te@2:

; 116  :   if ( area > 0.0 )

	fstp	ST(1)

; 120  :   }
; 121  :   else fudge = area = 0.0;

	fld	ST(0)
$LN35@q_facet_te@2:

; 122  :   if ( mi->flags & USE_DENSITY )

	test	DWORD PTR [edi+140], 536870912		; 20000000H
	fst	QWORD PTR _area$[ebp]
	je	SHORT $LN28@q_facet_te@2

; 123  :   { REAL density = get_facet_density(f_info->id);

	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR _web+236
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [eax+32]

; 124  :     area *= density; fudge *= density;

	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _area$[ebp]
	fmulp	ST(1), ST(0)
	jmp	SHORT $LN10@q_facet_te@2
$LN28@q_facet_te@2:
	fstp	ST(0)
$LN10@q_facet_te@2:

; 125  :   }
; 126  :   for ( i = 0 ; i < web.dimension ; i++ )

	mov	ecx, DWORD PTR _web+620
	xor	edx, edx
	test	ecx, ecx
	jle	SHORT $LN34@q_facet_te@2
$LN9@q_facet_te@2:

; 127  :      for ( j = 0 ; j < web.dimension ; j++ ) 

	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN8@q_facet_te@2
$LN6@q_facet_te@2:
	mov	ecx, DWORD PTR [esi+1280]

; 128  :         f_info->ss[i][j] *= fudge;

	fld	ST(0)
	mov	ecx, DWORD PTR [ecx+edx*4]
	fmul	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _web+620
	cmp	eax, ecx
	jl	SHORT $LN6@q_facet_te@2
$LN8@q_facet_te@2:

; 125  :   }
; 126  :   for ( i = 0 ; i < web.dimension ; i++ )

	inc	edx
	cmp	edx, ecx
	jl	SHORT $LN9@q_facet_te@2
$LN34@q_facet_te@2:

; 129  :   mat_mult(f_info->ss,f_info->sides[0],f_info->grad+1,web.dimension,
; 130  :          web.dimension, SDIM); /* head forces */

	mov	edx, DWORD PTR _web+616
	fstp	ST(0)
	mov	eax, DWORD PTR [esi+1336]
	push	edx
	push	ecx
	push	ecx
	mov	ecx, DWORD PTR [esi+1276]
	mov	edx, DWORD PTR [ecx]
	add	eax, 4
	push	eax
	mov	eax, DWORD PTR [esi+1280]
	push	edx
	push	eax
	call	_mat_mult

; 131  :   memset((char*)f_info->grad[0],0,SDIM*sizeof(REAL));

	mov	ecx, DWORD PTR _web+616
	mov	eax, DWORD PTR [esi+1336]
	lea	edx, DWORD PTR [ecx*8]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	0
	push	ecx
	call	_memset

; 132  :   for ( i = 0 ; i < web.dimension ; i++ )  /* tail forces */

	xor	edi, edi
	add	esp, 36					; 00000024H
	cmp	DWORD PTR _web+620, edi
	jle	SHORT $LN1@q_facet_te@2
	npad	4
$LL3@q_facet_te@2:

; 133  :      vector_sub(f_info->grad[0],f_info->grad[i+1],SDIM);

	mov	eax, DWORD PTR [esi+1336]
	mov	edx, DWORD PTR _web+616
	mov	ecx, DWORD PTR [eax+edi*4+4]
	push	edx
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	edx
	call	_vector_sub
	inc	edi
	add	esp, 12					; 0000000cH
	cmp	edi, DWORD PTR _web+620
	jl	SHORT $LL3@q_facet_te@2
$LN1@q_facet_te@2:

; 134  : #else
; 135  : 
; 136  :   /* new way, using Gram-Schmidt */
; 137  :   {
; 138  :   REAL diag[MAXCOORD];
; 139  :   REAL D[MAXCOORD];
; 140  :   REAL U[MAXCOORD][MAXCOORD];
; 141  :   REAL L[MAXCOORD][MAXCOORD];
; 142  :   REAL DL[MAXCOORD][MAXCOORD];
; 143  :   REAL LDU[MAXCOORD][MAXCOORD];
; 144  :   REAL det;
; 145  :   int k;
; 146  : 
; 147  :   det = 1.0;
; 148  :   for ( i = 0 ; i < web.dimension ; i++ )
; 149  :   { REAL invd;
; 150  :      for ( j = 0 ; j < SDIM ; j++ ) U[i][j] = f_info->sides[0][i][j];
; 151  :      for ( j = 0 ; j < i ; j++ )
; 152  :      { REAL su = SDIM_dot(f_info->sides[0][i],U[j])*D[j];
; 153  :         for ( k = 0 ; k < SDIM ; k++ ) U[i][k] -= su*U[j][k];
; 154  :         L[i][j] = -su;
; 155  :      }
; 156  :      diag[i] = SDIM_dot(U[i],U[i]);
; 157  :      if ( diag[i] <= 0.0 ) invd = 1.0;
; 158  :      else invd = 1/diag[i];
; 159  :      D[i] = invd;
; 160  :      DL[i][i] = invd;
; 161  :      for ( k = 0 ; k < i ; k++ )
; 162  :         DL[i][k] = invd*L[i][k];
; 163  :      det *= diag[i];
; 164  :   }
; 165  :   area = sqrt(det)/web.simplex_factorial; 
; 166  :   if ( mi->flags & USE_DENSITY )
; 167  :       area *= get_facet_density(f_info->id);
; 168  :   for ( i = 0 ; i < web.dimension ; i++ )
; 169  :      for ( j = 0 ; j < SDIM ; j++ )
; 170  :      { REAL sum = DL[i][i]*U[i][j];
; 171  :         for ( k = i+1 ; k < web.dimension ; k++ ) 
; 172  :             sum += DL[k][i]*U[k][j];
; 173  :         LDU[i][j] = sum;
; 174  :      }
; 175  :   for ( j = 0 ; j < SDIM ; j++ ) f_info->grad[0][j] = 0.0;
; 176  :   for ( i = 0 ; i < web.dimension ; i++ )
; 177  :      for ( j = 0 ; j < SDIM ; j++ )
; 178  :      { REAL gr = area*LDU[i][j];
; 179  :         f_info->grad[i+1][j] = gr;
; 180  :         f_info->grad[0][j] -= gr;
; 181  :      }
; 182  :   }
; 183  : #endif
; 184  :   return area;

	fld	QWORD PTR _area$[ebp]
	pop	edi
	pop	esi

; 185  : } // end q_facet_tension_gradient()

	mov	esp, ebp
	pop	ebp
	ret	0
_q_facet_tension_gradient ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@BPGNFFCE@Sobolev_mode?5requires?5linear?5mod@ ; `string'
PUBLIC	??_C@_0CH@FPCECDE@Dirichlet_mode?5requires?5linear?5m@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_q_facet_tension_hessian
EXTRN	_tr_mat_mul:PROC
EXTRN	_mat2d_setup:PROC
EXTRN	_lagrange_facet_tension_hess:PROC
EXTRN	_q_facet_tension_q_hess:PROC
EXTRN	_sobolev_area_hess:PROC
EXTRN	_sobolev_flag:DWORD
EXTRN	_dirichlet_area_hess:PROC
EXTRN	_kb_error:PROC
EXTRN	_dirichlet_flag:DWORD
;	COMDAT ??_C@_0CF@BPGNFFCE@Sobolev_mode?5requires?5linear?5mod@
CONST	SEGMENT
??_C@_0CF@BPGNFFCE@Sobolev_mode?5requires?5linear?5mod@ DB 'Sobolev_mode '
	DB	'requires linear model.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@FPCECDE@Dirichlet_mode?5requires?5linear?5m@
CONST	SEGMENT
??_C@_0CH@FPCECDE@Dirichlet_mode?5requires?5linear?5m@ DB 'Dirichlet_mode'
	DB	' requires linear model.', 0aH, 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _q_facet_tension_hessian
_TEXT	SEGMENT
_ASqXvS$89118 = -680					; size = 24
_SASqXvS$89122 = -656					; size = 24
_energy$ = -632						; size = 8
tv530 = -624						; size = 4
_ssdet$ = -620						; size = 8
tv859 = -616						; size = 4
tv854 = -612						; size = 4
_SAS$89124 = -608					; size = 4
_i$ = -604						; size = 4
_area$ = -600						; size = 8
tv514 = -596						; size = 4
_AS$89120 = -592					; size = 4
tv519 = -588						; size = 4
_m$ = -584						; size = 4
_ASxJ$89119 = -580					; size = 288
_SASxJ$89123 = -292					; size = 288
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_q_facet_tension_hessian PROC				; COMDAT

; 196  : { int i,j,k,m;

	push	ebp
	mov	ebp, esp
	sub	esp, 680				; 000002a8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	esi, DWORD PTR _f_info$[ebp]

; 197  :   REAL val;
; 198  :   REAL area;
; 199  :   REAL ssdet,fudge,energy;
; 200  :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [esi+8]
	push	edi
	cdq
	mov	edi, eax
	xor	edi, edx
	sub	edi, edx
	imul	edi, 2928				; 00000b70H
	add	edi, DWORD PTR _meth_inst_list

; 201  : 
; 202  :   if ( dirichlet_flag )

	cmp	DWORD PTR _dirichlet_flag, 0
	je	SHORT $LN35@q_facet_te@3

; 203  :   { if ( web.modeltype != LINEAR )

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN34@q_facet_te@3

; 204  :        kb_error(2144,"Dirichlet_mode requires linear model.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CH@FPCECDE@Dirichlet_mode?5requires?5linear?5m@
	push	2144					; 00000860H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN34@q_facet_te@3:

; 205  :     return dirichlet_area_hess(f_info);

	push	esi
	call	_dirichlet_area_hess
	add	esp, 4
	pop	edi
	pop	esi

; 258  :         }
; 259  :   return energy;
; 260  : #undef S
; 261  : #undef A
; 262  :   }
; 263  : #else
; 264  : 
; 265  :   /* new way, using Gram-Schmidt */
; 266  :   {
; 267  :   REAL diag[MAXCOORD];
; 268  :   REAL U[MAXCOORD][MAXCOORD];
; 269  :   REAL D[MAXCOORD];
; 270  :   REAL L[MAXCOORD][MAXCOORD]; /* only subdiagonal explicit */
; 271  :   REAL DL[MAXCOORD][MAXCOORD];
; 272  :   REAL LDU[MAXCOORD][MAXCOORD];
; 273  :   REAL LDL[MAXCOORD][MAXCOORD];
; 274  :   REAL UDU[MAXCOORD][MAXCOORD];
; 275  :   REAL det;
; 276  :   det = 1.0;
; 277  :   for ( i = 0 ; i < web.dimension ; i++ )
; 278  :   { REAL invd;
; 279  :      for ( j = 0 ; j < SDIM ; j++ ) U[i][j] = f_info->sides[0][i][j];
; 280  :      for ( j = 0 ; j < i ; j++ )
; 281  :      { REAL su = SDIM_dot(f_info->sides[0][i],U[j])*D[j];
; 282  :         for ( k = 0 ; k < SDIM ; k++ ) U[i][k] -= su*U[j][k];
; 283  :         L[i][j] = -su;
; 284  :      }
; 285  :      diag[i] = SDIM_dot(U[i],U[i]);
; 286  :      if ( diag[i] <= 0.0 ) invd = 0.0;
; 287  :      else invd = 1/diag[i];
; 288  :      D[i] = invd;
; 289  :      DL[i][i] = invd;
; 290  :      for ( k = 0 ; k < i ; k++ )
; 291  :          DL[i][k] = invd*L[i][k];
; 292  :      det *= diag[i];
; 293  :   }
; 294  :   area = sqrt(det)/web.simplex_factorial; 
; 295  :   if ( mi->flags & USE_DENSITY )
; 296  :       area *= get_facet_density(f_info->id);
; 297  :   /* form LDL, LDU, UDU */
; 298  :   for ( i = 0 ; i < web.dimension ; i++ )
; 299  :      for ( j = 0 ; j <= i ; j++ )
; 300  :      { REAL sum = DL[i][j];
; 301  :         for ( k = i+1 ; k < web.dimension ; k++ ) 
; 302  :             sum += L[k][i]*DL[k][j];
; 303  :         LDL[i][j] = LDL[j][i] = sum;
; 304  :      }
; 305  :   for ( i = 0 ; i < web.dimension ; i++ )
; 306  :      for ( j = 0 ; j < SDIM ; j++ )
; 307  :      { REAL sum = DL[i][i]*U[i][j];
; 308  :         for ( k = i+1 ; k < web.dimension ; k++ ) 
; 309  :             sum += DL[k][i]*U[k][j];
; 310  :         LDU[i][j] = sum;
; 311  :      }
; 312  :   for ( i = 0 ; i < SDIM ; i++ )
; 313  :      for ( j = 0 ; j <= i ; j++ )
; 314  :      { REAL sum = 0.0;
; 315  :         for ( k = 0 ; k < web.dimension ; k++ )
; 316  :           sum += U[k][i]*D[k]*U[k][j];
; 317  :         UDU[i][j] = UDU[j][i] = sum;
; 318  :      }
; 319  : 
; 320  :   for ( i = 0 ; i < web.dimension ; i++ )
; 321  :      for ( j = 0 ; j < SDIM ; j++ )
; 322  :      { REAL gr = area*LDU[i][j];
; 323  :         f_info->grad[i+1][j] = gr;
; 324  :         f_info->grad[0][j] -= gr;
; 325  :      }
; 326  :   for ( m = 0 ; m < web.dimension ; m++ )
; 327  :     for ( i = 0 ; i < web.dimension ; i++ )
; 328  :      for ( j = 0 ; j < SDIM ; j++ )
; 329  :       for ( k = 0 ; k < SDIM ; k++ )
; 330  :         { val = area*(LDU[m][j]*LDU[i][k] + (j==k?LDL[i][m]:0.0)
; 331  :                      - LDL[i][m]*UDU[j][k] - LDU[i][j]*LDU[m][k]) ;
; 332  :           f_info->hess[m+1][i+1][j][k] = val;
; 333  :           f_info->hess[0][0][j][k] += val;
; 334  :           f_info->hess[0][i+1][j][k] -= val;
; 335  :           f_info->hess[m+1][0][j][k] -= val;
; 336  :         }
; 337  :   return area;
; 338  :   }
; 339  : #endif
; 340  :         
; 341  : } // end q_facet_tension_hessian()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN35@q_facet_te@3:

; 206  :   }
; 207  :   if ( sobolev_flag )

	cmp	DWORD PTR _sobolev_flag, 0
	je	SHORT $LN33@q_facet_te@3

; 208  :   { if ( web.modeltype != LINEAR )

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN32@q_facet_te@3

; 209  :        kb_error(2145,"Sobolev_mode requires linear model.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CF@BPGNFFCE@Sobolev_mode?5requires?5linear?5mod@
	push	2145					; 00000861H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN32@q_facet_te@3:

; 210  :     return sobolev_area_hess(f_info);

	push	esi
	call	_sobolev_area_hess
	add	esp, 4
	pop	edi
	pop	esi

; 258  :         }
; 259  :   return energy;
; 260  : #undef S
; 261  : #undef A
; 262  :   }
; 263  : #else
; 264  : 
; 265  :   /* new way, using Gram-Schmidt */
; 266  :   {
; 267  :   REAL diag[MAXCOORD];
; 268  :   REAL U[MAXCOORD][MAXCOORD];
; 269  :   REAL D[MAXCOORD];
; 270  :   REAL L[MAXCOORD][MAXCOORD]; /* only subdiagonal explicit */
; 271  :   REAL DL[MAXCOORD][MAXCOORD];
; 272  :   REAL LDU[MAXCOORD][MAXCOORD];
; 273  :   REAL LDL[MAXCOORD][MAXCOORD];
; 274  :   REAL UDU[MAXCOORD][MAXCOORD];
; 275  :   REAL det;
; 276  :   det = 1.0;
; 277  :   for ( i = 0 ; i < web.dimension ; i++ )
; 278  :   { REAL invd;
; 279  :      for ( j = 0 ; j < SDIM ; j++ ) U[i][j] = f_info->sides[0][i][j];
; 280  :      for ( j = 0 ; j < i ; j++ )
; 281  :      { REAL su = SDIM_dot(f_info->sides[0][i],U[j])*D[j];
; 282  :         for ( k = 0 ; k < SDIM ; k++ ) U[i][k] -= su*U[j][k];
; 283  :         L[i][j] = -su;
; 284  :      }
; 285  :      diag[i] = SDIM_dot(U[i],U[i]);
; 286  :      if ( diag[i] <= 0.0 ) invd = 0.0;
; 287  :      else invd = 1/diag[i];
; 288  :      D[i] = invd;
; 289  :      DL[i][i] = invd;
; 290  :      for ( k = 0 ; k < i ; k++ )
; 291  :          DL[i][k] = invd*L[i][k];
; 292  :      det *= diag[i];
; 293  :   }
; 294  :   area = sqrt(det)/web.simplex_factorial; 
; 295  :   if ( mi->flags & USE_DENSITY )
; 296  :       area *= get_facet_density(f_info->id);
; 297  :   /* form LDL, LDU, UDU */
; 298  :   for ( i = 0 ; i < web.dimension ; i++ )
; 299  :      for ( j = 0 ; j <= i ; j++ )
; 300  :      { REAL sum = DL[i][j];
; 301  :         for ( k = i+1 ; k < web.dimension ; k++ ) 
; 302  :             sum += L[k][i]*DL[k][j];
; 303  :         LDL[i][j] = LDL[j][i] = sum;
; 304  :      }
; 305  :   for ( i = 0 ; i < web.dimension ; i++ )
; 306  :      for ( j = 0 ; j < SDIM ; j++ )
; 307  :      { REAL sum = DL[i][i]*U[i][j];
; 308  :         for ( k = i+1 ; k < web.dimension ; k++ ) 
; 309  :             sum += DL[k][i]*U[k][j];
; 310  :         LDU[i][j] = sum;
; 311  :      }
; 312  :   for ( i = 0 ; i < SDIM ; i++ )
; 313  :      for ( j = 0 ; j <= i ; j++ )
; 314  :      { REAL sum = 0.0;
; 315  :         for ( k = 0 ; k < web.dimension ; k++ )
; 316  :           sum += U[k][i]*D[k]*U[k][j];
; 317  :         UDU[i][j] = UDU[j][i] = sum;
; 318  :      }
; 319  : 
; 320  :   for ( i = 0 ; i < web.dimension ; i++ )
; 321  :      for ( j = 0 ; j < SDIM ; j++ )
; 322  :      { REAL gr = area*LDU[i][j];
; 323  :         f_info->grad[i+1][j] = gr;
; 324  :         f_info->grad[0][j] -= gr;
; 325  :      }
; 326  :   for ( m = 0 ; m < web.dimension ; m++ )
; 327  :     for ( i = 0 ; i < web.dimension ; i++ )
; 328  :      for ( j = 0 ; j < SDIM ; j++ )
; 329  :       for ( k = 0 ; k < SDIM ; k++ )
; 330  :         { val = area*(LDU[m][j]*LDU[i][k] + (j==k?LDL[i][m]:0.0)
; 331  :                      - LDL[i][m]*UDU[j][k] - LDU[i][j]*LDU[m][k]) ;
; 332  :           f_info->hess[m+1][i+1][j][k] = val;
; 333  :           f_info->hess[0][0][j][k] += val;
; 334  :           f_info->hess[0][i+1][j][k] -= val;
; 335  :           f_info->hess[m+1][0][j][k] -= val;
; 336  :         }
; 337  :   return area;
; 338  :   }
; 339  : #endif
; 340  :         
; 341  : } // end q_facet_tension_hessian()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN33@q_facet_te@3:

; 211  :   }
; 212  :   if ( web.modeltype == QUADRATIC ) return q_facet_tension_q_hess(f_info); 

	mov	eax, DWORD PTR _web+628
	cmp	eax, 2
	jne	SHORT $LN31@q_facet_te@3
	push	esi
	call	_q_facet_tension_q_hess
	add	esp, 4
	pop	edi
	pop	esi

; 258  :         }
; 259  :   return energy;
; 260  : #undef S
; 261  : #undef A
; 262  :   }
; 263  : #else
; 264  : 
; 265  :   /* new way, using Gram-Schmidt */
; 266  :   {
; 267  :   REAL diag[MAXCOORD];
; 268  :   REAL U[MAXCOORD][MAXCOORD];
; 269  :   REAL D[MAXCOORD];
; 270  :   REAL L[MAXCOORD][MAXCOORD]; /* only subdiagonal explicit */
; 271  :   REAL DL[MAXCOORD][MAXCOORD];
; 272  :   REAL LDU[MAXCOORD][MAXCOORD];
; 273  :   REAL LDL[MAXCOORD][MAXCOORD];
; 274  :   REAL UDU[MAXCOORD][MAXCOORD];
; 275  :   REAL det;
; 276  :   det = 1.0;
; 277  :   for ( i = 0 ; i < web.dimension ; i++ )
; 278  :   { REAL invd;
; 279  :      for ( j = 0 ; j < SDIM ; j++ ) U[i][j] = f_info->sides[0][i][j];
; 280  :      for ( j = 0 ; j < i ; j++ )
; 281  :      { REAL su = SDIM_dot(f_info->sides[0][i],U[j])*D[j];
; 282  :         for ( k = 0 ; k < SDIM ; k++ ) U[i][k] -= su*U[j][k];
; 283  :         L[i][j] = -su;
; 284  :      }
; 285  :      diag[i] = SDIM_dot(U[i],U[i]);
; 286  :      if ( diag[i] <= 0.0 ) invd = 0.0;
; 287  :      else invd = 1/diag[i];
; 288  :      D[i] = invd;
; 289  :      DL[i][i] = invd;
; 290  :      for ( k = 0 ; k < i ; k++ )
; 291  :          DL[i][k] = invd*L[i][k];
; 292  :      det *= diag[i];
; 293  :   }
; 294  :   area = sqrt(det)/web.simplex_factorial; 
; 295  :   if ( mi->flags & USE_DENSITY )
; 296  :       area *= get_facet_density(f_info->id);
; 297  :   /* form LDL, LDU, UDU */
; 298  :   for ( i = 0 ; i < web.dimension ; i++ )
; 299  :      for ( j = 0 ; j <= i ; j++ )
; 300  :      { REAL sum = DL[i][j];
; 301  :         for ( k = i+1 ; k < web.dimension ; k++ ) 
; 302  :             sum += L[k][i]*DL[k][j];
; 303  :         LDL[i][j] = LDL[j][i] = sum;
; 304  :      }
; 305  :   for ( i = 0 ; i < web.dimension ; i++ )
; 306  :      for ( j = 0 ; j < SDIM ; j++ )
; 307  :      { REAL sum = DL[i][i]*U[i][j];
; 308  :         for ( k = i+1 ; k < web.dimension ; k++ ) 
; 309  :             sum += DL[k][i]*U[k][j];
; 310  :         LDU[i][j] = sum;
; 311  :      }
; 312  :   for ( i = 0 ; i < SDIM ; i++ )
; 313  :      for ( j = 0 ; j <= i ; j++ )
; 314  :      { REAL sum = 0.0;
; 315  :         for ( k = 0 ; k < web.dimension ; k++ )
; 316  :           sum += U[k][i]*D[k]*U[k][j];
; 317  :         UDU[i][j] = UDU[j][i] = sum;
; 318  :      }
; 319  : 
; 320  :   for ( i = 0 ; i < web.dimension ; i++ )
; 321  :      for ( j = 0 ; j < SDIM ; j++ )
; 322  :      { REAL gr = area*LDU[i][j];
; 323  :         f_info->grad[i+1][j] = gr;
; 324  :         f_info->grad[0][j] -= gr;
; 325  :      }
; 326  :   for ( m = 0 ; m < web.dimension ; m++ )
; 327  :     for ( i = 0 ; i < web.dimension ; i++ )
; 328  :      for ( j = 0 ; j < SDIM ; j++ )
; 329  :       for ( k = 0 ; k < SDIM ; k++ )
; 330  :         { val = area*(LDU[m][j]*LDU[i][k] + (j==k?LDL[i][m]:0.0)
; 331  :                      - LDL[i][m]*UDU[j][k] - LDU[i][j]*LDU[m][k]) ;
; 332  :           f_info->hess[m+1][i+1][j][k] = val;
; 333  :           f_info->hess[0][0][j][k] += val;
; 334  :           f_info->hess[0][i+1][j][k] -= val;
; 335  :           f_info->hess[m+1][0][j][k] -= val;
; 336  :         }
; 337  :   return area;
; 338  :   }
; 339  : #endif
; 340  :         
; 341  : } // end q_facet_tension_hessian()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN31@q_facet_te@3:

; 213  :   if ( web.modeltype == LAGRANGE ) return lagrange_facet_tension_hess(f_info);

	cmp	eax, 3
	jne	SHORT $LN30@q_facet_te@3
	push	esi
	call	_lagrange_facet_tension_hess
	add	esp, 4
	pop	edi
	pop	esi

; 258  :         }
; 259  :   return energy;
; 260  : #undef S
; 261  : #undef A
; 262  :   }
; 263  : #else
; 264  : 
; 265  :   /* new way, using Gram-Schmidt */
; 266  :   {
; 267  :   REAL diag[MAXCOORD];
; 268  :   REAL U[MAXCOORD][MAXCOORD];
; 269  :   REAL D[MAXCOORD];
; 270  :   REAL L[MAXCOORD][MAXCOORD]; /* only subdiagonal explicit */
; 271  :   REAL DL[MAXCOORD][MAXCOORD];
; 272  :   REAL LDU[MAXCOORD][MAXCOORD];
; 273  :   REAL LDL[MAXCOORD][MAXCOORD];
; 274  :   REAL UDU[MAXCOORD][MAXCOORD];
; 275  :   REAL det;
; 276  :   det = 1.0;
; 277  :   for ( i = 0 ; i < web.dimension ; i++ )
; 278  :   { REAL invd;
; 279  :      for ( j = 0 ; j < SDIM ; j++ ) U[i][j] = f_info->sides[0][i][j];
; 280  :      for ( j = 0 ; j < i ; j++ )
; 281  :      { REAL su = SDIM_dot(f_info->sides[0][i],U[j])*D[j];
; 282  :         for ( k = 0 ; k < SDIM ; k++ ) U[i][k] -= su*U[j][k];
; 283  :         L[i][j] = -su;
; 284  :      }
; 285  :      diag[i] = SDIM_dot(U[i],U[i]);
; 286  :      if ( diag[i] <= 0.0 ) invd = 0.0;
; 287  :      else invd = 1/diag[i];
; 288  :      D[i] = invd;
; 289  :      DL[i][i] = invd;
; 290  :      for ( k = 0 ; k < i ; k++ )
; 291  :          DL[i][k] = invd*L[i][k];
; 292  :      det *= diag[i];
; 293  :   }
; 294  :   area = sqrt(det)/web.simplex_factorial; 
; 295  :   if ( mi->flags & USE_DENSITY )
; 296  :       area *= get_facet_density(f_info->id);
; 297  :   /* form LDL, LDU, UDU */
; 298  :   for ( i = 0 ; i < web.dimension ; i++ )
; 299  :      for ( j = 0 ; j <= i ; j++ )
; 300  :      { REAL sum = DL[i][j];
; 301  :         for ( k = i+1 ; k < web.dimension ; k++ ) 
; 302  :             sum += L[k][i]*DL[k][j];
; 303  :         LDL[i][j] = LDL[j][i] = sum;
; 304  :      }
; 305  :   for ( i = 0 ; i < web.dimension ; i++ )
; 306  :      for ( j = 0 ; j < SDIM ; j++ )
; 307  :      { REAL sum = DL[i][i]*U[i][j];
; 308  :         for ( k = i+1 ; k < web.dimension ; k++ ) 
; 309  :             sum += DL[k][i]*U[k][j];
; 310  :         LDU[i][j] = sum;
; 311  :      }
; 312  :   for ( i = 0 ; i < SDIM ; i++ )
; 313  :      for ( j = 0 ; j <= i ; j++ )
; 314  :      { REAL sum = 0.0;
; 315  :         for ( k = 0 ; k < web.dimension ; k++ )
; 316  :           sum += U[k][i]*D[k]*U[k][j];
; 317  :         UDU[i][j] = UDU[j][i] = sum;
; 318  :      }
; 319  : 
; 320  :   for ( i = 0 ; i < web.dimension ; i++ )
; 321  :      for ( j = 0 ; j < SDIM ; j++ )
; 322  :      { REAL gr = area*LDU[i][j];
; 323  :         f_info->grad[i+1][j] = gr;
; 324  :         f_info->grad[0][j] -= gr;
; 325  :      }
; 326  :   for ( m = 0 ; m < web.dimension ; m++ )
; 327  :     for ( i = 0 ; i < web.dimension ; i++ )
; 328  :      for ( j = 0 ; j < SDIM ; j++ )
; 329  :       for ( k = 0 ; k < SDIM ; k++ )
; 330  :         { val = area*(LDU[m][j]*LDU[i][k] + (j==k?LDL[i][m]:0.0)
; 331  :                      - LDL[i][m]*UDU[j][k] - LDU[i][j]*LDU[m][k]) ;
; 332  :           f_info->hess[m+1][i+1][j][k] = val;
; 333  :           f_info->hess[0][0][j][k] += val;
; 334  :           f_info->hess[0][i+1][j][k] -= val;
; 335  :           f_info->hess[m+1][0][j][k] -= val;
; 336  :         }
; 337  :   return area;
; 338  :   }
; 339  : #endif
; 340  :         
; 341  : } // end q_facet_tension_hessian()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN30@q_facet_te@3:
	push	ebx

; 214  : 
; 215  : #ifdef OLDWAY
; 216  :   {
; 217  :   MAT2D(AS,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	eax, DWORD PTR _ASxJ$89119[ebp]
	push	eax
	lea	ecx, DWORD PTR _ASqXvS$89118[ebp]
	push	ecx
	call	_mat2d_setup

; 218  :   MAT2D(SAS,MAXCOORD,MAXCOORD);

	push	6
	mov	ebx, eax
	push	6
	lea	edx, DWORD PTR _SASxJ$89123[ebp]
	push	edx
	lea	eax, DWORD PTR _SASqXvS$89122[ebp]
	push	eax
	mov	DWORD PTR _AS$89120[ebp], ebx
	call	_mat2d_setup

; 219  : #define S (f_info->sides[0])
; 220  : #define A (f_info->ss)
; 221  : 
; 222  :   /* area derivatives */
; 223  :   mat_tsquare(S,A,web.dimension,SDIM);

	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR _web+620
	push	ecx
	mov	ecx, DWORD PTR [esi+1276]
	push	edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _SAS$89124[ebp], eax
	mov	eax, DWORD PTR [esi+1280]
	push	eax
	push	edx
	call	_mat_tsquare

; 224  :   ssdet = det_adjoint(A,web.dimension);

	mov	eax, DWORD PTR _web+620
	mov	ecx, DWORD PTR [esi+1280]
	push	eax
	push	ecx
	call	_det_adjoint
	fst	QWORD PTR _ssdet$[ebp]

; 225  :   if ( ssdet <= 0.0 ) {  return 0.0; }

	fldz
	add	esp, 56					; 00000038H
	fcom	ST(1)
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN65@q_facet_te@3
	pop	ebx
	fstp	ST(1)
	pop	edi
	pop	esi

; 258  :         }
; 259  :   return energy;
; 260  : #undef S
; 261  : #undef A
; 262  :   }
; 263  : #else
; 264  : 
; 265  :   /* new way, using Gram-Schmidt */
; 266  :   {
; 267  :   REAL diag[MAXCOORD];
; 268  :   REAL U[MAXCOORD][MAXCOORD];
; 269  :   REAL D[MAXCOORD];
; 270  :   REAL L[MAXCOORD][MAXCOORD]; /* only subdiagonal explicit */
; 271  :   REAL DL[MAXCOORD][MAXCOORD];
; 272  :   REAL LDU[MAXCOORD][MAXCOORD];
; 273  :   REAL LDL[MAXCOORD][MAXCOORD];
; 274  :   REAL UDU[MAXCOORD][MAXCOORD];
; 275  :   REAL det;
; 276  :   det = 1.0;
; 277  :   for ( i = 0 ; i < web.dimension ; i++ )
; 278  :   { REAL invd;
; 279  :      for ( j = 0 ; j < SDIM ; j++ ) U[i][j] = f_info->sides[0][i][j];
; 280  :      for ( j = 0 ; j < i ; j++ )
; 281  :      { REAL su = SDIM_dot(f_info->sides[0][i],U[j])*D[j];
; 282  :         for ( k = 0 ; k < SDIM ; k++ ) U[i][k] -= su*U[j][k];
; 283  :         L[i][j] = -su;
; 284  :      }
; 285  :      diag[i] = SDIM_dot(U[i],U[i]);
; 286  :      if ( diag[i] <= 0.0 ) invd = 0.0;
; 287  :      else invd = 1/diag[i];
; 288  :      D[i] = invd;
; 289  :      DL[i][i] = invd;
; 290  :      for ( k = 0 ; k < i ; k++ )
; 291  :          DL[i][k] = invd*L[i][k];
; 292  :      det *= diag[i];
; 293  :   }
; 294  :   area = sqrt(det)/web.simplex_factorial; 
; 295  :   if ( mi->flags & USE_DENSITY )
; 296  :       area *= get_facet_density(f_info->id);
; 297  :   /* form LDL, LDU, UDU */
; 298  :   for ( i = 0 ; i < web.dimension ; i++ )
; 299  :      for ( j = 0 ; j <= i ; j++ )
; 300  :      { REAL sum = DL[i][j];
; 301  :         for ( k = i+1 ; k < web.dimension ; k++ ) 
; 302  :             sum += L[k][i]*DL[k][j];
; 303  :         LDL[i][j] = LDL[j][i] = sum;
; 304  :      }
; 305  :   for ( i = 0 ; i < web.dimension ; i++ )
; 306  :      for ( j = 0 ; j < SDIM ; j++ )
; 307  :      { REAL sum = DL[i][i]*U[i][j];
; 308  :         for ( k = i+1 ; k < web.dimension ; k++ ) 
; 309  :             sum += DL[k][i]*U[k][j];
; 310  :         LDU[i][j] = sum;
; 311  :      }
; 312  :   for ( i = 0 ; i < SDIM ; i++ )
; 313  :      for ( j = 0 ; j <= i ; j++ )
; 314  :      { REAL sum = 0.0;
; 315  :         for ( k = 0 ; k < web.dimension ; k++ )
; 316  :           sum += U[k][i]*D[k]*U[k][j];
; 317  :         UDU[i][j] = UDU[j][i] = sum;
; 318  :      }
; 319  : 
; 320  :   for ( i = 0 ; i < web.dimension ; i++ )
; 321  :      for ( j = 0 ; j < SDIM ; j++ )
; 322  :      { REAL gr = area*LDU[i][j];
; 323  :         f_info->grad[i+1][j] = gr;
; 324  :         f_info->grad[0][j] -= gr;
; 325  :      }
; 326  :   for ( m = 0 ; m < web.dimension ; m++ )
; 327  :     for ( i = 0 ; i < web.dimension ; i++ )
; 328  :      for ( j = 0 ; j < SDIM ; j++ )
; 329  :       for ( k = 0 ; k < SDIM ; k++ )
; 330  :         { val = area*(LDU[m][j]*LDU[i][k] + (j==k?LDL[i][m]:0.0)
; 331  :                      - LDL[i][m]*UDU[j][k] - LDU[i][j]*LDU[m][k]) ;
; 332  :           f_info->hess[m+1][i+1][j][k] = val;
; 333  :           f_info->hess[0][0][j][k] += val;
; 334  :           f_info->hess[0][i+1][j][k] -= val;
; 335  :           f_info->hess[m+1][0][j][k] -= val;
; 336  :         }
; 337  :   return area;
; 338  :   }
; 339  : #endif
; 340  :         
; 341  : } // end q_facet_tension_hessian()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN65@q_facet_te@3:

; 225  :   if ( ssdet <= 0.0 ) {  return 0.0; }

	fstp	ST(0)

; 226  :   energy = area = sqrt(ssdet)/web.simplex_factorial;

	call	__CIsqrt
	fdiv	QWORD PTR _web+792

; 227  :   fudge = 1/ssdet;
; 228  :   if ( mi->flags & USE_DENSITY )

	test	DWORD PTR [edi+140], 536870912		; 20000000H
	fst	QWORD PTR _area$[ebp]
	fst	QWORD PTR _energy$[ebp]
	fld1
	fdiv	QWORD PTR _ssdet$[ebp]
	je	SHORT $LN68@q_facet_te@3

; 229  :   { REAL density = get_facet_density(f_info->id);

	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR _web+236
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	fld	QWORD PTR [ecx+32]

; 230  :      energy *= density; area *= density;

	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _energy$[ebp]
	fstp	QWORD PTR _area$[ebp]
	jmp	SHORT $LN28@q_facet_te@3
$LN68@q_facet_te@3:
	fstp	ST(1)
$LN28@q_facet_te@3:

; 231  :   }
; 232  :   for ( i = 0 ; i < web.dimension ; i++ )

	mov	ecx, DWORD PTR _web+620
	xor	edx, edx
	test	ecx, ecx
	jle	SHORT $LN74@q_facet_te@3
$LN27@q_facet_te@3:

; 233  :      for ( j = 0 ; j < web.dimension ; j++ ) 

	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN26@q_facet_te@3
$LN24@q_facet_te@3:
	mov	ecx, DWORD PTR [esi+1280]
	mov	ecx, DWORD PTR [ecx+edx*4]

; 234  :         A[i][j] *= fudge;    /* now inverse of ss, times density */

	fld	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	fmul	ST(0), ST(1)
	inc	eax
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _web+620
	cmp	eax, ecx
	jl	SHORT $LN24@q_facet_te@3
$LN26@q_facet_te@3:

; 231  :   }
; 232  :   for ( i = 0 ; i < web.dimension ; i++ )

	inc	edx
	cmp	edx, ecx
	jl	SHORT $LN27@q_facet_te@3
$LN74@q_facet_te@3:

; 235  :   mat_mult(A,S,AS,web.dimension,web.dimension, SDIM); 

	mov	edx, DWORD PTR _web+616
	fstp	ST(0)
	mov	eax, DWORD PTR [esi+1276]
	push	edx
	mov	edx, DWORD PTR [esi+1280]
	push	ecx
	push	ecx
	mov	ecx, DWORD PTR [eax]
	push	ebx
	push	ecx
	push	edx
	call	_mat_mult

; 236  : 
; 237  :   /* head forces */
; 238  :   for ( i = 0 ; i < web.dimension ; i++ )

	mov	edx, DWORD PTR _web+616
	xor	ecx, ecx
	add	esp, 24					; 00000018H
	cmp	DWORD PTR _web+620, ecx
	jle	SHORT $LN19@q_facet_te@3
	fld	QWORD PTR _area$[ebp]
$LN62@q_facet_te@3:

; 239  :      for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN20@q_facet_te@3
	mov	edi, DWORD PTR [ebx+ecx*4]
$LN18@q_facet_te@3:

; 240  :         f_info->grad[i+1][j] = area*AS[i][j];

	fld	QWORD PTR [edi+eax*8]
	mov	edx, DWORD PTR [esi+1336]
	mov	edx, DWORD PTR [edx+ecx*4+4]
	fmul	ST(0), ST(1)
	inc	eax
	fstp	QWORD PTR [edx+eax*8-8]
	mov	edx, DWORD PTR _web+616
	cmp	eax, edx
	jl	SHORT $LN18@q_facet_te@3
$LN20@q_facet_te@3:

; 236  : 
; 237  :   /* head forces */
; 238  :   for ( i = 0 ; i < web.dimension ; i++ )

	inc	ecx
	cmp	ecx, DWORD PTR _web+620
	jl	SHORT $LN62@q_facet_te@3
	fstp	ST(0)
$LN19@q_facet_te@3:

; 241  :   /* tail forces */
; 242  :   memset((char*)f_info->grad[0],0,SDIM*sizeof(REAL));

	mov	ecx, DWORD PTR [esi+1336]
	lea	eax, DWORD PTR [edx*8]
	mov	edx, DWORD PTR [ecx]
	push	eax
	push	0
	push	edx
	call	_memset

; 243  :   for ( i = 0 ; i < web.dimension ; i++ )  

	mov	eax, DWORD PTR _web+620
	add	esp, 12					; 0000000cH
	xor	edi, edi
	test	eax, eax
	jle	SHORT $LN13@q_facet_te@3
	npad	15
$LL15@q_facet_te@3:

; 244  :      vector_sub(f_info->grad[0],f_info->grad[i+1],SDIM);

	mov	eax, DWORD PTR [esi+1336]
	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR [eax+edi*4+4]
	mov	eax, DWORD PTR [eax]
	push	ecx
	push	edx
	push	eax
	call	_vector_sub
	mov	eax, DWORD PTR _web+620
	inc	edi
	add	esp, 12					; 0000000cH
	cmp	edi, eax
	jl	SHORT $LL15@q_facet_te@3
$LN13@q_facet_te@3:

; 245  : 
; 246  :   /* hessian */
; 247  :   tr_mat_mul(S,AS,SAS,web.dimension,SDIM,SDIM);

	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR [esi+1276]
	push	ecx
	push	ecx
	mov	ecx, DWORD PTR _SAS$89124[ebp]
	push	eax
	mov	eax, DWORD PTR [edx]
	push	ecx
	push	ebx
	push	eax
	call	_tr_mat_mul

; 248  :   for ( m = 0 ; m < web.dimension ; m++ )

	mov	eax, DWORD PTR _web+620
	xor	ebx, ebx
	add	esp, 24					; 00000018H
	mov	DWORD PTR _m$[ebp], ebx
	test	eax, eax
	jle	$LN10@q_facet_te@3
	fldz
	mov	edx, DWORD PTR _web+616
	fld	QWORD PTR _area$[ebp]
$LN60@q_facet_te@3:

; 249  :     for ( i = 0 ; i < web.dimension ; i++ )

	xor	edi, edi
	mov	DWORD PTR _i$[ebp], edi
	test	eax, eax
	jle	$LN11@q_facet_te@3
$LN9@q_facet_te@3:

; 250  :      for ( j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	test	edx, edx
	jle	$LN8@q_facet_te@3
$LN61@q_facet_te@3:

; 251  :       for ( k = 0 ; k < SDIM ; k++ )

	xor	eax, eax
	test	edx, edx
	jle	$LN5@q_facet_te@3

; 248  :   for ( m = 0 ; m < web.dimension ; m++ )

	mov	edx, DWORD PTR _AS$89120[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	DWORD PTR tv519[ebp], edx

; 251  :       for ( k = 0 ; k < SDIM ; k++ )

	mov	edx, DWORD PTR _SAS$89124[ebp]
	mov	ebx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _AS$89120[ebp]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	DWORD PTR tv514[ebp], edx
	sub	edx, ebx
	mov	DWORD PTR tv854[ebp], edx
	mov	edx, DWORD PTR tv519[ebp]
	sub	edx, ebx
	mov	DWORD PTR tv530[ebp], ebx
	mov	ebx, DWORD PTR _m$[ebp]
	mov	DWORD PTR tv859[ebp], edx
$LN59@q_facet_te@3:

; 252  :         { val = area*(AS[m][j]*AS[i][k] + (j==k?A[i][m]:0.0)
; 253  :                      - A[i][m]*SAS[j][k] - AS[i][j]*AS[m][k]);

	cmp	ecx, eax
	jne	SHORT $LN38@q_facet_te@3
	mov	edx, DWORD PTR [esi+1280]
	mov	edx, DWORD PTR [edx+edi*4]
	fld	QWORD PTR [edx+ebx*8]
	jmp	SHORT $LN39@q_facet_te@3
$LN38@q_facet_te@3:
	fld	ST(1)
$LN39@q_facet_te@3:

; 251  :       for ( k = 0 ; k < SDIM ; k++ )

	mov	edx, DWORD PTR tv530[ebp]

; 252  :         { val = area*(AS[m][j]*AS[i][k] + (j==k?A[i][m]:0.0)
; 253  :                      - A[i][m]*SAS[j][k] - AS[i][j]*AS[m][k]);

	mov	ebx, DWORD PTR tv854[ebp]
	lea	edx, DWORD PTR [edx+eax*8]
	fld	QWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR tv519[ebp]
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR [esi+1280]
	mov	edi, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR _m$[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi+ebx*8]
	mov	edi, DWORD PTR tv859[ebp]
	fmul	QWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edi+edx]
	mov	edx, DWORD PTR tv514[ebp]
	fmul	QWORD PTR [edx+ecx*8]

; 254  :           f_info->hess[m+1][i+1][j][k] = val;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx+ebx*4+4]
	mov	edi, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+edi*4+4]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR [edx+ecx*4]
	fmul	ST(0), ST(1)
	fst	QWORD PTR [edx+eax*8]

; 255  :           f_info->hess[0][0][j][k] += val;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 256  :           f_info->hess[0][i+1][j][k] -= val;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+edi*4+4]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 257  :           f_info->hess[m+1][0][j][k] -= val;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx+ebx*4+4]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ecx*4]
	fsubr	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	inc	eax
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR _web+616
	cmp	eax, edx
	jl	$LN59@q_facet_te@3
$LN5@q_facet_te@3:

; 250  :      for ( j = 0 ; j < SDIM ; j++ )

	inc	ecx
	cmp	ecx, edx
	jl	$LN61@q_facet_te@3
	mov	eax, DWORD PTR _web+620
$LN8@q_facet_te@3:

; 249  :     for ( i = 0 ; i < web.dimension ; i++ )

	inc	edi
	mov	DWORD PTR _i$[ebp], edi
	cmp	edi, eax
	jl	$LN9@q_facet_te@3
$LN11@q_facet_te@3:

; 248  :   for ( m = 0 ; m < web.dimension ; m++ )

	inc	ebx
	mov	DWORD PTR _m$[ebp], ebx
	cmp	ebx, eax
	jl	$LN60@q_facet_te@3
	fstp	ST(0)
	fstp	ST(0)
$LN10@q_facet_te@3:

; 258  :         }
; 259  :   return energy;
; 260  : #undef S
; 261  : #undef A
; 262  :   }
; 263  : #else
; 264  : 
; 265  :   /* new way, using Gram-Schmidt */
; 266  :   {
; 267  :   REAL diag[MAXCOORD];
; 268  :   REAL U[MAXCOORD][MAXCOORD];
; 269  :   REAL D[MAXCOORD];
; 270  :   REAL L[MAXCOORD][MAXCOORD]; /* only subdiagonal explicit */
; 271  :   REAL DL[MAXCOORD][MAXCOORD];
; 272  :   REAL LDU[MAXCOORD][MAXCOORD];
; 273  :   REAL LDL[MAXCOORD][MAXCOORD];
; 274  :   REAL UDU[MAXCOORD][MAXCOORD];
; 275  :   REAL det;
; 276  :   det = 1.0;
; 277  :   for ( i = 0 ; i < web.dimension ; i++ )
; 278  :   { REAL invd;
; 279  :      for ( j = 0 ; j < SDIM ; j++ ) U[i][j] = f_info->sides[0][i][j];
; 280  :      for ( j = 0 ; j < i ; j++ )
; 281  :      { REAL su = SDIM_dot(f_info->sides[0][i],U[j])*D[j];
; 282  :         for ( k = 0 ; k < SDIM ; k++ ) U[i][k] -= su*U[j][k];
; 283  :         L[i][j] = -su;
; 284  :      }
; 285  :      diag[i] = SDIM_dot(U[i],U[i]);
; 286  :      if ( diag[i] <= 0.0 ) invd = 0.0;
; 287  :      else invd = 1/diag[i];
; 288  :      D[i] = invd;
; 289  :      DL[i][i] = invd;
; 290  :      for ( k = 0 ; k < i ; k++ )
; 291  :          DL[i][k] = invd*L[i][k];
; 292  :      det *= diag[i];
; 293  :   }
; 294  :   area = sqrt(det)/web.simplex_factorial; 
; 295  :   if ( mi->flags & USE_DENSITY )
; 296  :       area *= get_facet_density(f_info->id);
; 297  :   /* form LDL, LDU, UDU */
; 298  :   for ( i = 0 ; i < web.dimension ; i++ )
; 299  :      for ( j = 0 ; j <= i ; j++ )
; 300  :      { REAL sum = DL[i][j];
; 301  :         for ( k = i+1 ; k < web.dimension ; k++ ) 
; 302  :             sum += L[k][i]*DL[k][j];
; 303  :         LDL[i][j] = LDL[j][i] = sum;
; 304  :      }
; 305  :   for ( i = 0 ; i < web.dimension ; i++ )
; 306  :      for ( j = 0 ; j < SDIM ; j++ )
; 307  :      { REAL sum = DL[i][i]*U[i][j];
; 308  :         for ( k = i+1 ; k < web.dimension ; k++ ) 
; 309  :             sum += DL[k][i]*U[k][j];
; 310  :         LDU[i][j] = sum;
; 311  :      }
; 312  :   for ( i = 0 ; i < SDIM ; i++ )
; 313  :      for ( j = 0 ; j <= i ; j++ )
; 314  :      { REAL sum = 0.0;
; 315  :         for ( k = 0 ; k < web.dimension ; k++ )
; 316  :           sum += U[k][i]*D[k]*U[k][j];
; 317  :         UDU[i][j] = UDU[j][i] = sum;
; 318  :      }
; 319  : 
; 320  :   for ( i = 0 ; i < web.dimension ; i++ )
; 321  :      for ( j = 0 ; j < SDIM ; j++ )
; 322  :      { REAL gr = area*LDU[i][j];
; 323  :         f_info->grad[i+1][j] = gr;
; 324  :         f_info->grad[0][j] -= gr;
; 325  :      }
; 326  :   for ( m = 0 ; m < web.dimension ; m++ )
; 327  :     for ( i = 0 ; i < web.dimension ; i++ )
; 328  :      for ( j = 0 ; j < SDIM ; j++ )
; 329  :       for ( k = 0 ; k < SDIM ; k++ )
; 330  :         { val = area*(LDU[m][j]*LDU[i][k] + (j==k?LDL[i][m]:0.0)
; 331  :                      - LDL[i][m]*UDU[j][k] - LDU[i][j]*LDU[m][k]) ;
; 332  :           f_info->hess[m+1][i+1][j][k] = val;
; 333  :           f_info->hess[0][0][j][k] += val;
; 334  :           f_info->hess[0][i+1][j][k] -= val;
; 335  :           f_info->hess[m+1][0][j][k] -= val;
; 336  :         }
; 337  :   return area;
; 338  :   }
; 339  : #endif
; 340  :         
; 341  : } // end q_facet_tension_hessian()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _energy$[ebp]
	pop	ebx
	pop	edi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_q_facet_tension_hessian ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DH@CDMECCOG@facet_scalar_integral?5method?5onl@ ; `string'
PUBLIC	_facet_scalar_integral_init
;	COMDAT ??_C@_0DH@CDMECCOG@facet_scalar_integral?5method?5onl@
CONST	SEGMENT
??_C@_0DH@CDMECCOG@facet_scalar_integral?5method?5onl@ DB 'facet_scalar_i'
	DB	'ntegral method only for SOAPFILM model.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _facet_scalar_integral_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_facet_scalar_integral_init PROC			; COMDAT

; 363  : { if ( web.dimension != 2 )

	cmp	DWORD PTR _web+620, 2
	je	SHORT $LN1@facet_scal

; 364  :     kb_error(1768,"facet_scalar_integral method only for SOAPFILM model.\n",
; 365  :        RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DH@CDMECCOG@facet_scalar_integral?5method?5onl@
	push	1768					; 000006e8H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@facet_scal:

; 366  : } // end facet_scalar_integral_init()

	ret	0
_facet_scalar_integral_init ENDP
_TEXT	ENDS
PUBLIC	__real@3fe0000000000000
PUBLIC	_facet_scalar_integral_q
EXTRN	_gauss2Dwt:DWORD
EXTRN	_eval:PROC
EXTRN	_gauss2D_num:DWORD
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _facet_scalar_integral_q
_TEXT	SEGMENT
_area$ = -28						; size = 8
_st$ = -28						; size = 8
tv256 = -20						; size = 8
_ss$ = -20						; size = 8
_value$ = -12						; size = 8
_mi$ = -4						; size = 4
_m$ = 8							; size = 4
_f_info$ = 8						; size = 4
_facet_scalar_integral_q PROC				; COMDAT

; 574  : { int m;

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 575  :   REAL value = 0.0;

	fldz
	push	ebx

; 576  :   REAL area;
; 577  :   REAL ss,st,tt;
; 578  :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	ebx, DWORD PTR _f_info$[ebp]
	fstp	QWORD PTR _value$[ebp]
	mov	eax, DWORD PTR [ebx+8]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list
	push	edi

; 579  : 
; 580  :   for ( m = 0 ; m < gauss2D_num ; m++ )

	xor	edi, edi
	mov	DWORD PTR _mi$[ebp], eax
	mov	DWORD PTR _m$[ebp], edi
	cmp	DWORD PTR _gauss2D_num, edi
	jle	$LN2@facet_scal@2
	push	esi
	npad	7
$LL4@facet_scal@2:

; 581  :   { REAL **tang = f_info->sides[m];

	mov	eax, DWORD PTR [ebx+1276]
	mov	esi, DWORD PTR [eax+edi*4]

; 582  :     ss = SDIM_dot(tang[0],tang[0]);

	mov	ecx, DWORD PTR _web+616
	mov	eax, DWORD PTR [esi]
	push	ecx
	push	eax
	push	eax
	call	_dot
	fstp	QWORD PTR _ss$[ebp]

; 583  :     st = SDIM_dot(tang[0],tang[1]);

	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	push	edx
	push	eax
	push	ecx
	call	_dot
	fstp	QWORD PTR _st$[ebp]

; 584  :     tt = SDIM_dot(tang[1],tang[1]);

	mov	edx, DWORD PTR _web+616
	mov	esi, DWORD PTR [esi+4]
	push	edx
	push	esi
	push	esi
	call	_dot

; 585  :     area = ss*tt-st*st;

	fmul	QWORD PTR _ss$[ebp]
	fld	QWORD PTR _st$[ebp]
	add	esp, 36					; 00000024H
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _area$[ebp]

; 586  :     if ( area <= 0.0 ) continue;

	fldz
	fcompp
	fnstsw	ax
	test	ah, 1
	je	SHORT $LN3@facet_scal@2

; 587  :     f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	mov	eax, DWORD PTR [ebx+1268]
	fild	DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR [eax+edi*4]
	add	ecx, ecx
	fstp	QWORD PTR [edx+ecx*8]

; 588  :     value += gauss2Dwt[m]*sqrt(area)*
; 589  :        eval(mi->expr[0],f_info->gauss_pt[m],f_info->id,NULL);

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [ebx+1268]
	mov	edx, DWORD PTR [ecx+edi*4]
	push	0
	push	eax
	mov	eax, DWORD PTR _mi$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	push	edx
	push	ecx
	call	_eval
	fstp	QWORD PTR tv256[ebp]
	fld	QWORD PTR _area$[ebp]
	add	esp, 16					; 00000010H
	call	__CIsqrt
	mov	edx, DWORD PTR _gauss2Dwt
	fmul	QWORD PTR [edx+edi*8]
	fmul	QWORD PTR tv256[ebp]
	fadd	QWORD PTR _value$[ebp]
	fstp	QWORD PTR _value$[ebp]
$LN3@facet_scal@2:

; 579  : 
; 580  :   for ( m = 0 ; m < gauss2D_num ; m++ )

	inc	edi
	mov	DWORD PTR _m$[ebp], edi
	cmp	edi, DWORD PTR _gauss2D_num
	jl	$LL4@facet_scal@2
	pop	esi
$LN2@facet_scal@2:

; 590  :   } 
; 591  :   return value/2; /* triangle factor */

	fld	QWORD PTR _value$[ebp]
	pop	edi
	fmul	QWORD PTR __real@3fe0000000000000
	pop	ebx

; 592  : } // end facet_scalar_integral_q()

	mov	esp, ebp
	pop	ebp
	ret	0
_facet_scalar_integral_q ENDP
_TEXT	ENDS
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_facet_scalar_integral_q_grad
EXTRN	_gpoly:DWORD
EXTRN	_gpolypartial:DWORD
EXTRN	_eval_all:PROC
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _facet_scalar_integral_q_grad
_TEXT	SEGMENT
tv1576 = -436						; size = 8
_val$ = -428						; size = 8
_area$ = -420						; size = 8
tv1594 = -412						; size = 4
_st$ = -408						; size = 8
_ss$ = -400						; size = 8
_tang$89374 = -392					; size = 4
_mi$ = -388						; size = 4
_value$ = -384						; size = 8
_f_info$GSCopy$ = -376					; size = 4
_tt$ = -372						; size = 8
tv2650 = -368						; size = 4
_j$ = -368						; size = 4
tv2643 = -364						; size = 4
tv2278 = -364						; size = 4
_m$ = -360						; size = 4
tv2633 = -356						; size = 4
tv2518 = -356						; size = 4
tv2953 = -352						; size = 4
tv2619 = -352						; size = 4
tv3008 = -348						; size = 4
tv2696 = -348						; size = 4
tv2951 = -344						; size = 4
tv2617 = -344						; size = 4
_detgrad$ = -340					; size = 288
_derivs$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_facet_scalar_integral_q_grad PROC			; COMDAT

; 603  : { int m,j,k;

	push	ebp
	mov	ebp, esp
	sub	esp, 436				; 000001b4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 604  :   REAL value = 0.0;

	fldz
	push	esi
	push	edi
	fld	ST(0)
	mov	edi, DWORD PTR _f_info$[ebp]
	fst	QWORD PTR _value$[ebp]

; 605  :   REAL val;
; 606  :   REAL derivs[MAXCOORD];
; 607  :   REAL detgrad[FACET_CTRL][MAXCOORD];
; 608  :   REAL area,det;
; 609  :   REAL ss,st,tt;
; 610  :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [edi+8]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list
	mov	DWORD PTR _f_info$GSCopy$[ebp], edi
	mov	DWORD PTR _mi$[ebp], eax

; 611  : 
; 612  :   for ( m = 0 ; m < FACET_CTRL ; m++ )

	xor	ecx, ecx
$LN22@facet_scal@3:

; 613  :      for ( j = 0 ; j < SDIM ; j++ ) 

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN21@facet_scal@3
$LN52@facet_scal@3:

; 614  :         f_info->grad[m][j] = 0.0;

	mov	edx, DWORD PTR [edi+1336]
	fxch	ST(1)
	mov	edx, DWORD PTR [ecx+edx]
	fst	QWORD PTR [edx+eax*8]
	inc	eax
	fxch	ST(1)
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN52@facet_scal@3
$LN21@facet_scal@3:

; 611  : 
; 612  :   for ( m = 0 ; m < FACET_CTRL ; m++ )

	add	ecx, 4
	cmp	ecx, 24					; 00000018H
	jl	SHORT $LN22@facet_scal@3

; 615  : 
; 616  :   for ( m = 0 ; m < gauss2D_num ; m++ )

	xor	esi, esi
	fstp	ST(1)
	mov	DWORD PTR _m$[ebp], esi
	cmp	DWORD PTR _gauss2D_num, esi
	jle	$LN14@facet_scal@3
	fstp	ST(0)
	push	ebx
	npad	8
$LL45@facet_scal@3:

; 617  :   { REAL **tang = f_info->sides[m];

	mov	eax, DWORD PTR [edi+1276]
	mov	ebx, DWORD PTR [eax+esi*4]

; 618  :     ss = SDIM_dot(tang[0],tang[0]);

	mov	ecx, DWORD PTR _web+616
	mov	eax, DWORD PTR [ebx]
	push	ecx
	push	eax
	push	eax
	mov	DWORD PTR _tang$89374[ebp], ebx
	call	_dot
	fstp	QWORD PTR _ss$[ebp]

; 619  :     st = SDIM_dot(tang[0],tang[1]);

	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR [ebx+4]
	mov	ecx, DWORD PTR [ebx]
	push	edx
	push	eax
	push	ecx
	call	_dot
	fstp	QWORD PTR _st$[ebp]

; 620  :     tt = SDIM_dot(tang[1],tang[1]);

	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR [ebx+4]
	push	edx
	push	eax
	push	eax
	call	_dot
	fst	QWORD PTR _tt$[ebp]

; 621  :     det = ss*tt-st*st;

	fmul	QWORD PTR _ss$[ebp]
	add	esp, 36					; 00000024H
	fld	QWORD PTR _st$[ebp]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)

; 622  :     if ( det <= 0.0 ) continue;

	fldz
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 1
	je	$LN59@facet_scal@3

; 623  :     area = sqrt(det)/2; 

	call	__CIsqrt
	fst	QWORD PTR tv1576[ebp]
	fmul	QWORD PTR __real@3fe0000000000000

; 624  :     f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	mov	eax, DWORD PTR [edi+1268]
	mov	edx, DWORD PTR [eax+esi*4]
	mov	ecx, DWORD PTR _web+616
	fstp	QWORD PTR _area$[ebp]
	add	ecx, ecx
	fild	DWORD PTR _m$[ebp]
	fstp	QWORD PTR [edx+ecx*8]

; 625  :     eval_all(mi->expr[0],f_info->gauss_pt[m],SDIM,&val,derivs,f_info->id);

	mov	eax, DWORD PTR [edi]
	push	eax
	mov	eax, DWORD PTR _web+616
	lea	ecx, DWORD PTR _derivs$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [edi+1268]
	lea	edx, DWORD PTR _val$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+esi*4]
	push	eax
	mov	eax, DWORD PTR _mi$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	push	edx
	push	ecx
	call	_eval_all
	mov	edx, DWORD PTR _gauss2Dwt

; 626  :     value += gauss2Dwt[m]*area*val;

	fld	QWORD PTR [edx+esi*8]
	lea	eax, DWORD PTR [edx+esi*8]
	fmul	QWORD PTR _area$[ebp]
	add	esp, 24					; 00000018H
	xor	ecx, ecx
	lea	edx, DWORD PTR _detgrad$[ebp+8]
	fmul	QWORD PTR _val$[ebp]
	mov	DWORD PTR tv1594[ebp], eax
	mov	DWORD PTR tv2617[ebp], ecx
	mov	DWORD PTR tv2619[ebp], ecx
	fadd	QWORD PTR _value$[ebp]
	mov	DWORD PTR tv2696[ebp], edx
	fstp	QWORD PTR _value$[ebp]
	fld	QWORD PTR __real@4000000000000000
	fld	QWORD PTR _tt$[ebp]
$LN46@facet_scal@3:

; 629  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	edi, edi
	cmp	DWORD PTR _web+616, 4
	jl	$LC40@facet_scal@3

; 634  : 
; 635  :     for ( k = 0 ; k < FACET_CTRL ; k++ )

	mov	eax, DWORD PTR _gpolypartial
	fld	QWORD PTR _ss$[ebp]
	mov	eax, DWORD PTR [eax+esi*4]
	fmul	ST(0), ST(2)
	mov	edi, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	mov	esi, DWORD PTR [ebx+4]
	fmul	QWORD PTR [edi+ecx]
	mov	ebx, DWORD PTR [ebx]
	fld	QWORD PTR [ecx+eax]
	add	edi, ecx
	fmul	ST(0), ST(3)
	fld	QWORD PTR _st$[ebp]
	add	ecx, eax
	mov	DWORD PTR tv2633[ebp], ecx
	fmul	ST(0), ST(4)
	lea	ecx, DWORD PTR [esi+24]
	sub	esi, ebx
	mov	DWORD PTR tv2278[ebp], esi
	mov	esi, DWORD PTR _web+616
	add	esi, -4					; fffffffcH
	shr	esi, 2
	lea	eax, DWORD PTR [ebx+8]
	inc	esi
	lea	ebx, DWORD PTR [esi*4]
	mov	DWORD PTR _j$[ebp], ebx
	mov	ebx, DWORD PTR tv2633[ebp]
$LN41@facet_scal@3:

; 630  :         detgrad[k][j] = 2*gpolypartial[m][0][k]*tang[0][j]*tt
; 631  :                 + ss*2*gpolypartial[m][1][k]*tang[1][j]
; 632  :                 - 2*st*(gpolypartial[m][0][k]*tang[1][j]
; 633  :                + gpolypartial[m][1][k]*tang[0][j]);

	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	fmul	ST(0), ST(2)
	add	ecx, 32					; 00000020H
	add	edx, 32					; 00000020H
	dec	esi
	fmul	ST(0), ST(4)
	fld	ST(3)
	fmul	QWORD PTR [ecx-56]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv2278[ebp]
	fmul	QWORD PTR [ecx-56]
	fld	QWORD PTR [eax-40]
	fmul	QWORD PTR [edi]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR [edx-40]
	fld	ST(1)
	fmul	QWORD PTR [eax-32]
	fmul	ST(0), ST(4)
	fld	QWORD PTR [ebx+eax-32]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi]
	fmul	QWORD PTR [eax-32]
	fld	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv2633[ebp]
	fmul	QWORD PTR [ebx]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR [edx-32]
	fld	QWORD PTR [eax-24]
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(4)
	fld	ST(3)
	fmul	QWORD PTR [ecx-40]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx]
	fmul	QWORD PTR [ecx-40]
	fld	QWORD PTR [eax-24]
	fmul	QWORD PTR [edi]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR [edx-24]
	fld	QWORD PTR [eax-16]
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(4)
	fld	ST(3)
	fmul	QWORD PTR [ecx-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax-16]
	fmul	QWORD PTR [edi]
	fld	QWORD PTR [ebx]
	fmul	QWORD PTR [ecx-32]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR [edx-16]
	jne	$LN41@facet_scal@3

; 629  :       for ( j = 0 ; j < SDIM ; j++ )

	mov	ebx, DWORD PTR _tang$89374[ebp]
	fstp	ST(2)
	mov	edi, DWORD PTR _j$[ebp]
	fstp	ST(0)
	mov	esi, DWORD PTR _m$[ebp]
	fstp	ST(0)
	mov	ecx, DWORD PTR tv2619[ebp]
$LC40@facet_scal@3:
	cmp	edi, DWORD PTR _web+616
	jge	$LN11@facet_scal@3
	mov	edx, DWORD PTR _gpolypartial
	fld	QWORD PTR _ss$[ebp]
	mov	eax, DWORD PTR [edx+esi*4]
	fmul	ST(0), ST(2)
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	fmul	QWORD PTR [edx+ecx]
	mov	esi, DWORD PTR [ebx]
	fld	QWORD PTR [eax+ecx]
	add	edx, ecx
	mov	DWORD PTR tv2643[ebp], edx
	fmul	ST(0), ST(3)
	mov	edx, DWORD PTR tv2617[ebp]
	fld	QWORD PTR _st$[ebp]
	add	edx, edi
	fmul	ST(0), ST(4)
	add	eax, ecx
	lea	edx, DWORD PTR _detgrad$[ebp+edx*8]
	mov	DWORD PTR tv2518[ebp], edx
	mov	edx, DWORD PTR [ebx+4]
	mov	DWORD PTR tv2650[ebp], eax
	lea	eax, DWORD PTR [esi+edi*8]
	sub	edx, esi
	mov	esi, DWORD PTR _web+616
	sub	esi, edi
$LC9@facet_scal@3:

; 630  :         detgrad[k][j] = 2*gpolypartial[m][0][k]*tang[0][j]*tt
; 631  :                 + ss*2*gpolypartial[m][1][k]*tang[1][j]
; 632  :                 - 2*st*(gpolypartial[m][0][k]*tang[1][j]
; 633  :                + gpolypartial[m][1][k]*tang[0][j]);

	mov	edi, DWORD PTR tv2650[ebp]
	fld	ST(1)
	fmul	QWORD PTR [eax]
	add	eax, 8
	fmul	ST(0), ST(4)
	fld	QWORD PTR [edx+eax-8]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx+eax-8]
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR tv2643[ebp]
	fld	QWORD PTR [edi]
	mov	edi, DWORD PTR tv2518[ebp]
	fmul	QWORD PTR [eax-8]
	add	edi, 8
	dec	esi
	mov	DWORD PTR tv2518[ebp], edi
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR [edi-8]
	jne	SHORT $LC9@facet_scal@3

; 629  :       for ( j = 0 ; j < SDIM ; j++ )

	mov	esi, DWORD PTR _m$[ebp]
	fstp	ST(2)
	fstp	ST(0)
	fstp	ST(0)
$LN11@facet_scal@3:

; 627  : 
; 628  :     for ( k = 0 ; k < FACET_CTRL ; k++ )

	mov	edx, DWORD PTR tv2696[ebp]
	add	DWORD PTR tv2617[ebp], 6
	add	ecx, 8
	add	edx, 48					; 00000030H
	mov	DWORD PTR tv2696[ebp], edx
	mov	DWORD PTR tv2619[ebp], ecx
	cmp	ecx, 48					; 00000030H
	jl	$LN46@facet_scal@3
	fstp	ST(0)

; 634  : 
; 635  :     for ( k = 0 ; k < FACET_CTRL ; k++ )

	xor	ecx, ecx
	fstp	ST(0)
	lea	edx, DWORD PTR _detgrad$[ebp]
	fld	QWORD PTR tv1576[ebp]
	mov	DWORD PTR tv2951[ebp], ecx
	fld	QWORD PTR __real@3fd0000000000000
	mov	DWORD PTR tv2953[ebp], ecx
	fld	QWORD PTR _area$[ebp]
	mov	DWORD PTR tv3008[ebp], edx
$LN47@facet_scal@3:

; 636  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN5@facet_scal@3
	mov	edi, DWORD PTR _gpoly
	mov	edi, DWORD PTR [edi+esi*4]
	add	edi, ecx
$LN43@facet_scal@3:

; 637  :         f_info->grad[k][j] += gauss2Dwt[m]*
; 638  :           (val/sqrt(det)/4*detgrad[k][j] + area*derivs[j]*gpoly[m][k]);

	fld	QWORD PTR _derivs$[ebp+eax*8]
	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	fmul	ST(0), ST(1)
	mov	ecx, DWORD PTR [ecx+1336]
	mov	ebx, DWORD PTR tv2951[ebp]
	mov	ecx, DWORD PTR [ebx+ecx]
	fmul	QWORD PTR [edi]
	mov	ebx, DWORD PTR tv1594[ebp]
	fld	QWORD PTR _val$[ebp]
	lea	ecx, DWORD PTR [ecx+eax*8]
	fdiv	ST(0), ST(4)
	inc	eax
	add	edx, 8
	fmul	ST(0), ST(3)
	fmul	QWORD PTR [edx-8]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR [ebx]
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN43@facet_scal@3

; 636  :       for ( j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR tv2953[ebp]
$LN5@facet_scal@3:

; 634  : 
; 635  :     for ( k = 0 ; k < FACET_CTRL ; k++ )

	mov	edx, DWORD PTR tv3008[ebp]
	add	DWORD PTR tv2951[ebp], 4
	add	ecx, 8
	add	edx, 48					; 00000030H
	mov	DWORD PTR tv2953[ebp], ecx
	mov	DWORD PTR tv3008[ebp], edx
	cmp	ecx, 48					; 00000030H
	jl	$LN47@facet_scal@3
	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	fstp	ST(2)
	fstp	ST(0)
$LN59@facet_scal@3:
	inc	esi
	fstp	ST(0)
	mov	DWORD PTR _m$[ebp], esi
	cmp	esi, DWORD PTR _gauss2D_num
	jl	$LL45@facet_scal@3

; 639  :   }
; 640  : 
; 641  :   return value;

	fld	QWORD PTR _value$[ebp]
	pop	ebx
$LN14@facet_scal@3:

; 642  : } // end facet_scalar_integral_q_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_scalar_integral_q_grad ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_facet_scalar_integral_q_hess
EXTRN	_eval_second:PROC
EXTRN	__chkstk:PROC
; Function compile flags: /Ogtp
;	COMDAT _facet_scalar_integral_q_hess
_TEXT	SEGMENT
_secondqXvS$ = -11156					; size = 24
_det$ = -11132						; size = 8
_tt$ = -11124						; size = 8
_area$ = -11116						; size = 8
tv1715 = -11108						; size = 8
tv1500 = -11108						; size = 8
_mi$ = -11100						; size = 4
_value$ = -11096					; size = 8
_st$ = -11088						; size = 8
_second$ = -11080					; size = 4
tv1518 = -11076						; size = 4
_val$ = -11072						; size = 8
_ss$ = -11064						; size = 8
tv1780 = -11060						; size = 4
_f_info$GSCopy$ = -11056				; size = 4
tv3279 = -11052						; size = 8
tv1558 = -11052						; size = 8
tv4140 = -11048						; size = 4
tv3290 = -11044						; size = 8
_j$ = -11040						; size = 4
tv3561 = -11036						; size = 4
_gpp$89414 = -11036					; size = 4
_m$ = -11032						; size = 4
tv4061 = -11028						; size = 4
tv2640 = -11028						; size = 4
tv1699 = -11028						; size = 4
_kk$ = -11024						; size = 4
_tang$89415 = -11024					; size = 4
tv3883 = -11020						; size = 4
tv3262 = -11020						; size = 4
tv2611 = -11020						; size = 4
tv4129 = -11016						; size = 4
tv2246 = -11016						; size = 4
_jj$ = -11016						; size = 4
tv2976 = -11012						; size = 4
tv2888 = -11012						; size = 4
tv2564 = -11012						; size = 4
tv2352 = -11012						; size = 4
tv1822 = -11012						; size = 4
tv4131 = -11008						; size = 4
tv3027 = -11008						; size = 4
tv2865 = -11008						; size = 4
tv2621 = -11008						; size = 4
tv2597 = -11008						; size = 4
tv3919 = -11004						; size = 4
tv2863 = -11004						; size = 4
tv2595 = -11004						; size = 4
tv1706 = -11004						; size = 4
tv4127 = -11000						; size = 4
tv3022 = -11000						; size = 4
tv2604 = -11000						; size = 4
tv2560 = -11000						; size = 4
_dethess$ = -10996					; size = 10368
_secondxJ$ = -628					; size = 288
_detgrad$ = -340					; size = 288
_derivs$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_facet_scalar_integral_q_hess PROC			; COMDAT

; 654  : { int m,j,k,kk,jj;

	push	ebp
	mov	ebp, esp
	mov	eax, 11156				; 00002b94H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 655  :   REAL value = 0.0;

	fldz
	push	esi
	mov	esi, DWORD PTR _f_info$[ebp]
	fstp	QWORD PTR _value$[ebp]

; 656  :   REAL val;
; 657  :   REAL derivs[MAXCOORD];
; 658  :   REAL detgrad[FACET_CTRL][MAXCOORD];
; 659  :   REAL dethess[FACET_CTRL][FACET_CTRL][MAXCOORD][MAXCOORD];
; 660  :   REAL area,det,ss,st,tt;
; 661  :   MAT2D(second,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	eax, DWORD PTR _secondxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _secondqXvS$[ebp]
	push	ecx
	mov	DWORD PTR _f_info$GSCopy$[ebp], esi
	call	_mat2d_setup
	mov	DWORD PTR _second$[ebp], eax

; 662  :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [esi+8]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list
	add	esp, 16					; 00000010H
	mov	DWORD PTR _mi$[ebp], eax

; 663  : 
; 664  :   for ( m = 0 ; m < gauss2D_num ; m++ )

	xor	eax, eax
	mov	DWORD PTR _m$[ebp], eax
	cmp	DWORD PTR _gauss2D_num, eax
	jle	$LN73@facet_scal@4
	push	ebx
	push	edi
	mov	edi, DWORD PTR _web+616
	jmp	SHORT $LN41@facet_scal@4
$LL87@facet_scal@4:
	mov	eax, DWORD PTR _m$[ebp]
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
$LN41@facet_scal@4:

; 665  :   { REAL **gpp = gpolypartial[m];
; 666  :     REAL **tang = f_info->sides[m];

	mov	ecx, DWORD PTR [esi+1276]
	mov	edx, DWORD PTR _gpolypartial
	mov	esi, DWORD PTR [ecx+eax*4]
	mov	ebx, DWORD PTR [edx+eax*4]

; 667  :     ss = SDIM_dot(tang[0],tang[0]);

	mov	eax, DWORD PTR [esi]
	push	edi
	push	eax
	push	eax
	mov	DWORD PTR _gpp$89414[ebp], ebx
	mov	DWORD PTR _tang$89415[ebp], esi
	call	_dot
	fstp	QWORD PTR _ss$[ebp]

; 668  :     st = SDIM_dot(tang[0],tang[1]);

	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	push	edx
	push	eax
	push	ecx
	call	_dot
	fstp	QWORD PTR _st$[ebp]

; 669  :     tt = SDIM_dot(tang[1],tang[1]);

	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR [esi+4]
	push	edx
	push	eax
	push	eax
	call	_dot
	fst	QWORD PTR _tt$[ebp]

; 670  :     det = ss*tt-st*st;

	fmul	QWORD PTR _ss$[ebp]
	add	esp, 36					; 00000024H
	fld	QWORD PTR _st$[ebp]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _det$[ebp]

; 671  :     if ( det <= 0.0 ) continue;

	fldz
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 1
	je	$LN93@facet_scal@4

; 672  :     area = sqrt(det)/2; 

	call	__CIsqrt
	fst	QWORD PTR tv1500[ebp]
	fmul	QWORD PTR __real@3fe0000000000000

; 673  :     f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [eax+1268]
	mov	edx, DWORD PTR _web+616
	mov	edi, DWORD PTR _m$[ebp]
	fstp	QWORD PTR _area$[ebp]
	mov	ecx, DWORD PTR [ecx+edi*4]
	fild	DWORD PTR _m$[ebp]
	add	edx, edx
	fstp	QWORD PTR [ecx+edx*8]

; 674  :     eval_second(mi->expr[0],f_info->gauss_pt[m],SDIM,&val,
; 675  :                                                   derivs,second,f_info->id);

	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _second$[ebp]
	mov	eax, DWORD PTR [eax+1268]
	push	edx
	push	ecx
	lea	edx, DWORD PTR _derivs$[ebp]
	push	edx
	mov	edx, DWORD PTR _web+616
	lea	ecx, DWORD PTR _val$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [eax+edi*4]
	push	edx
	mov	edx, DWORD PTR _mi$[ebp]
	mov	eax, DWORD PTR [edx+232]
	push	ecx
	push	eax
	call	_eval_second
	mov	ecx, DWORD PTR _gauss2Dwt

; 676  :     value += gauss2Dwt[m]*area*val;

	fld	QWORD PTR [ecx+edi*8]
	lea	eax, DWORD PTR [ecx+edi*8]
	fmul	QWORD PTR _area$[ebp]
	mov	edi, DWORD PTR _web+616
	fld	QWORD PTR _val$[ebp]
	add	esp, 28					; 0000001cH
	xor	ecx, ecx
	fmul	ST(1), ST(0)
	lea	edx, DWORD PTR _detgrad$[ebp+8]
	fxch	ST(1)
	mov	DWORD PTR tv1518[ebp], eax
	mov	DWORD PTR tv2595[ebp], ecx
	fadd	QWORD PTR _value$[ebp]
	mov	DWORD PTR tv2597[ebp], ecx
	mov	DWORD PTR tv2640[ebp], edx
	fstp	QWORD PTR _value$[ebp]
	fld	QWORD PTR __real@4000000000000000
	fld	QWORD PTR _tt$[ebp]
$LN89@facet_scal@4:

; 680  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	edx, edx
	mov	DWORD PTR _j$[ebp], edx
	cmp	edi, 4
	jl	$LN80@facet_scal@4
	fld	QWORD PTR _ss$[ebp]
	mov	eax, DWORD PTR [ebx+4]
	mov	edx, DWORD PTR [esi+4]
	fmul	ST(0), ST(2)
	mov	esi, DWORD PTR [esi]
	add	eax, ecx
	fmul	QWORD PTR [eax]
	add	ecx, DWORD PTR [ebx]
	mov	DWORD PTR tv2604[ebp], eax
	fld	QWORD PTR [ecx]
	mov	eax, DWORD PTR tv2640[ebp]
	mov	DWORD PTR tv2611[ebp], ecx
	fmul	ST(0), ST(3)
	fld	QWORD PTR _st$[ebp]
	lea	ecx, DWORD PTR [edx+24]

; 681  :         detgrad[k][j] = 2*gpp[0][k]*tang[0][j]*tt + ss*2*gpp[1][k]*tang[1][j]
; 682  :                         - 2*st*(gpp[0][k]*tang[1][j] + gpp[1][k]*tang[0][j]);

	sub	edx, esi
	fmul	ST(0), ST(4)
	mov	DWORD PTR tv2352[ebp], edx
	lea	edx, DWORD PTR [edi-4]
	shr	edx, 2
	fstp	QWORD PTR tv1558[ebp]
	mov	DWORD PTR tv2246[ebp], eax
	inc	edx
	lea	eax, DWORD PTR [esi+8]
	lea	esi, DWORD PTR [edx*4]
	mov	DWORD PTR _j$[ebp], esi
$LN85@facet_scal@4:
	fld	ST(0)
	mov	esi, DWORD PTR tv2604[ebp]
	fmul	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fmul	ST(0), ST(3)
	fld	QWORD PTR [ecx-56]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax-40]
	fmul	QWORD PTR [esi]
	mov	esi, DWORD PTR tv2611[ebp]
	fld	QWORD PTR [ecx-56]
	fmul	QWORD PTR [esi]
	mov	esi, DWORD PTR tv2246[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR tv1558[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR [esi-8]
	mov	esi, DWORD PTR tv2352[ebp]
	fld	ST(0)
	fmul	QWORD PTR [eax-32]
	fmul	ST(0), ST(3)
	fld	ST(2)
	fmul	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv2611[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [esi]
	mov	esi, DWORD PTR tv2352[ebp]
	fmul	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv2604[ebp]
	fld	QWORD PTR [esi]
	mov	esi, DWORD PTR tv2246[ebp]
	fmul	QWORD PTR [eax-32]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR tv1558[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR [esi]
	mov	esi, DWORD PTR tv2604[ebp]
	fld	ST(0)
	fmul	QWORD PTR [eax-24]
	fmul	ST(0), ST(3)
	fld	QWORD PTR [ecx-40]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax-24]
	fmul	QWORD PTR [esi]
	mov	esi, DWORD PTR tv2611[ebp]
	fld	QWORD PTR [ecx-40]
	fmul	QWORD PTR [esi]
	mov	esi, DWORD PTR tv2246[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR tv1558[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR [esi+8]
	mov	esi, DWORD PTR tv2611[ebp]
	fld	ST(0)
	fmul	QWORD PTR [eax-16]
	fmul	ST(0), ST(3)
	fld	ST(2)
	fmul	QWORD PTR [ecx-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [esi]
	mov	esi, DWORD PTR tv2604[ebp]
	fmul	QWORD PTR [ecx-32]
	fld	QWORD PTR [eax-16]
	fmul	QWORD PTR [esi]
	mov	esi, DWORD PTR tv2246[ebp]
	add	esi, 32					; 00000020H
	dec	edx
	faddp	ST(1), ST(0)
	mov	DWORD PTR tv2246[ebp], esi
	fmul	QWORD PTR tv1558[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR [esi-16]
	jne	$LN85@facet_scal@4

; 680  :       for ( j = 0 ; j < SDIM ; j++ )

	mov	esi, DWORD PTR _tang$89415[ebp]
	fstp	ST(1)
	mov	ecx, DWORD PTR tv2597[ebp]
	fstp	ST(0)
	mov	edx, DWORD PTR _j$[ebp]
$LN80@facet_scal@4:
	cmp	edx, edi
	jge	$LN36@facet_scal@4
	fld	QWORD PTR _ss$[ebp]
	mov	eax, DWORD PTR [ebx+4]
	fmul	ST(0), ST(2)
	add	eax, ecx
	mov	DWORD PTR tv2621[ebp], eax
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR [ebx]
	fld	QWORD PTR [eax+ecx]
	add	eax, ecx
	mov	DWORD PTR tv2611[ebp], eax
	fmul	ST(0), ST(3)
	mov	eax, DWORD PTR [esi]
	fld	QWORD PTR _st$[ebp]
	mov	esi, DWORD PTR tv2595[ebp]
	fmul	ST(0), ST(4)
	add	esi, edx
	lea	eax, DWORD PTR [eax+edx*8]
	lea	edx, DWORD PTR _detgrad$[ebp+esi*8]
	fstp	QWORD PTR tv1558[ebp]
	mov	esi, DWORD PTR _tang$89415[ebp]
	mov	DWORD PTR tv2560[ebp], edx
	mov	edx, DWORD PTR [esi+4]
	sub	edx, DWORD PTR [esi]
	mov	DWORD PTR tv2564[ebp], edx
	mov	edx, edi
	sub	edx, DWORD PTR _j$[ebp]
$LN86@facet_scal@4:

; 681  :         detgrad[k][j] = 2*gpp[0][k]*tang[0][j]*tt + ss*2*gpp[1][k]*tang[1][j]
; 682  :                         - 2*st*(gpp[0][k]*tang[1][j] + gpp[1][k]*tang[0][j]);

	fld	QWORD PTR [eax]
	mov	esi, DWORD PTR tv2564[ebp]
	fmul	ST(0), ST(1)
	add	eax, 8
	fmul	ST(0), ST(3)
	fld	ST(2)
	fmul	QWORD PTR [esi+eax-8]
	mov	esi, DWORD PTR tv2611[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [esi]
	mov	esi, DWORD PTR tv2564[ebp]
	fmul	QWORD PTR [esi+eax-8]
	mov	esi, DWORD PTR tv2621[ebp]
	fld	QWORD PTR [eax-8]
	fmul	QWORD PTR [esi]
	mov	esi, DWORD PTR tv2560[ebp]
	add	esi, 8
	dec	edx
	faddp	ST(1), ST(0)
	mov	DWORD PTR tv2560[ebp], esi
	fmul	QWORD PTR tv1558[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR [esi-8]
	jne	SHORT $LN86@facet_scal@4

; 680  :       for ( j = 0 ; j < SDIM ; j++ )

	mov	esi, DWORD PTR _tang$89415[ebp]
	fstp	ST(1)
	fstp	ST(0)
$LN36@facet_scal@4:

; 677  : 
; 678  :     /* gradients */
; 679  :     for ( k = 0 ; k < FACET_CTRL ; k++ )

	add	DWORD PTR tv2640[ebp], 48		; 00000030H
	add	DWORD PTR tv2595[ebp], 6
	add	ecx, 8
	mov	DWORD PTR tv2597[ebp], ecx
	cmp	ecx, 48					; 00000030H
	jl	$LN89@facet_scal@4

; 683  : 
; 684  :     for ( k = 0 ; k < FACET_CTRL ; k++ )

	fld	QWORD PTR tv1500[ebp]
	xor	ecx, ecx
	fld	QWORD PTR __real@3fd0000000000000
	lea	esi, DWORD PTR _detgrad$[ebp]
	fld	QWORD PTR _area$[ebp]
	mov	DWORD PTR tv2863[ebp], ecx
	mov	DWORD PTR tv2865[ebp], ecx
	mov	DWORD PTR tv2888[ebp], esi
$LN88@facet_scal@4:

; 685  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	test	edi, edi
	jle	SHORT $LN30@facet_scal@4
	mov	edx, DWORD PTR _gpoly
	mov	edi, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [edx+edi*4]
	add	edx, ecx
$LN74@facet_scal@4:

; 686  :         f_info->grad[k][j] += gauss2Dwt[m]*
; 687  :            (val/sqrt(det)/4*detgrad[k][j] + area*derivs[j]*gpoly[m][k]);

	fld	QWORD PTR _derivs$[ebp+eax*8]
	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	fmul	ST(0), ST(1)
	mov	ecx, DWORD PTR [ecx+1336]
	mov	edi, DWORD PTR tv2863[ebp]
	mov	ecx, DWORD PTR [edi+ecx]
	fmul	QWORD PTR [edx]
	mov	edi, DWORD PTR tv1518[ebp]
	fxch	ST(6)
	lea	ecx, DWORD PTR [ecx+eax*8]
	fdiv	ST(0), ST(3)
	inc	eax
	add	esi, 8
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [esi-8]
	faddp	ST(6), ST(0)
	fxch	ST(5)
	fmul	QWORD PTR [edi]
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	edi, DWORD PTR _web+616
	fld	QWORD PTR _val$[ebp]
	fxch	ST(5)
	cmp	eax, edi
	jl	SHORT $LN74@facet_scal@4

; 685  :       for ( j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR tv2865[ebp]
$LN30@facet_scal@4:

; 683  : 
; 684  :     for ( k = 0 ; k < FACET_CTRL ; k++ )

	mov	esi, DWORD PTR tv2888[ebp]
	add	DWORD PTR tv2863[ebp], 4
	add	ecx, 8
	add	esi, 48					; 00000030H
	mov	DWORD PTR tv2865[ebp], ecx
	mov	DWORD PTR tv2888[ebp], esi
	cmp	ecx, 48					; 00000030H
	jl	$LN88@facet_scal@4

; 688  : 
; 689  :     /* hessian */
; 690  :     for ( k = 0 ; k < FACET_CTRL ; k++ )

	xor	edx, edx
	fstp	ST(0)
	mov	DWORD PTR tv3262[ebp], edx
$LN83@facet_scal@4:

; 691  :       for ( kk = 0 ; kk < FACET_CTRL ; kk++ )

	xor	eax, eax
$LN84@facet_scal@4:

; 692  :         for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	test	edi, edi
	jle	$LN21@facet_scal@4
$LN19@facet_scal@4:
	mov	ecx, DWORD PTR [ebx]
	mov	ebx, DWORD PTR [ebx+4]

; 691  :       for ( kk = 0 ; kk < FACET_CTRL ; kk++ )

	fld	QWORD PTR [ecx+edx]

; 693  :           for ( jj = 0 ; jj < SDIM ; jj++ )

	mov	edi, DWORD PTR _tang$89415[ebp]
	fmul	ST(0), ST(4)
	mov	edi, DWORD PTR [edi]
	mov	DWORD PTR tv1699[ebp], ebx
	fmul	QWORD PTR [edi+esi*8]
	mov	DWORD PTR _jj$[ebp], 0
	mov	DWORD PTR tv2976[ebp], edi
	fmul	ST(0), ST(4)
	fmul	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR _tang$89415[ebp]
	mov	ebx, DWORD PTR [ebx+4]
	mov	DWORD PTR tv1706[ebp], ebx
	mov	ebx, DWORD PTR tv1699[ebp]
	fstp	QWORD PTR tv3279[ebp]
	fld	QWORD PTR [ecx+eax*8]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR tv1715[ebp]
	fld	QWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR tv1706[ebp]
	fmul	QWORD PTR [edi+esi*8]
	fld	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR tv3262[ebp]
	fmul	QWORD PTR [ecx+edx]
	add	ebx, eax
	lea	ebx, DWORD PTR [ebx+ebx*2]
	lea	ebx, DWORD PTR [esi+ebx*2]
	lea	ebx, DWORD PTR [ebx+ebx*2]
	faddp	ST(1), ST(0)
	add	ebx, ebx
	lea	ebx, DWORD PTR _dethess$[ebp+ebx*8]
	mov	DWORD PTR tv3022[ebp], ebx
	fstp	QWORD PTR tv3290[ebp]
	mov	ebx, DWORD PTR tv1706[ebp]
	sub	ebx, edi
	mov	DWORD PTR tv3027[ebp], ebx
$LN78@facet_scal@4:

; 694  :           { dethess[k][kk][j][jj] = 
; 695  :                      2*gpp[0][k]*tang[0][j]*2*gpp[1][kk]*tang[1][jj]
; 696  :                   + 2*gpp[0][kk]*tang[0][jj]*2*gpp[1][k]*tang[1][j]
; 697  :                   - 2*(gpp[0][kk]*tang[1][jj] + gpp[1][kk]*tang[0][jj])
; 698  :                     *(gpp[0][k]*tang[1][j] + gpp[1][k]*tang[0][j]);

	mov	edi, DWORD PTR tv2976[ebp]
	fld	QWORD PTR tv1715[ebp]
	fmul	QWORD PTR [edi]
	mov	ebx, DWORD PTR tv1699[ebp]
	fmul	ST(0), ST(4)
	fmul	QWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR tv1706[ebp]
	fmul	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR tv3027[ebp]
	fld	QWORD PTR tv3279[ebp]
	fmul	QWORD PTR [ebx+edi]
	mov	ebx, DWORD PTR tv1699[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR tv3027[ebp]
	fmul	QWORD PTR [edi]
	fld	QWORD PTR [ebx+edi]
	mov	ebx, DWORD PTR tv3022[ebp]
	fmul	QWORD PTR [ecx+eax*8]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fmul	QWORD PTR tv3290[ebp]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR [ebx]

; 699  :             if (j==jj) 

	cmp	esi, DWORD PTR _jj$[ebp]
	jne	$LN130@facet_scal@4

; 700  :               dethess[k][kk][j][jj] += 2*gpp[0][k]*gpp[0][kk]*tt
; 701  :                 + ss*2*gpp[1][k]*gpp[1][kk]
; 702  :                 - 2*st*(gpp[0][k]*gpp[1][kk] + gpp[1][k]*gpp[0][kk]);

	fld	QWORD PTR _ss$[ebp]
	mov	ebx, DWORD PTR _gpp$89414[ebp]
	mov	ebx, DWORD PTR [ebx+4]
	fmul	ST(0), ST(5)
	fmul	QWORD PTR [ebx+edx]
	fmul	QWORD PTR [ebx+eax*8]
	fld	QWORD PTR [ecx+edx]
	fmul	ST(0), ST(6)
	fmul	QWORD PTR [ecx+eax*8]
	fmulp	ST(5), ST(0)
	faddp	ST(4), ST(0)
	fld	QWORD PTR [ebx+edx]
	fmul	QWORD PTR [ecx+eax*8]
	fld	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR tv3022[ebp]
	fmul	QWORD PTR [ecx+edx]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _st$[ebp]
	fmul	ST(0), ST(6)
	fmulp	ST(1), ST(0)
	fsubp	ST(4), ST(0)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR [ebx]
	fld	QWORD PTR _tt$[ebp]
	fxch	ST(2)
$LN15@facet_scal@4:

; 693  :           for ( jj = 0 ; jj < SDIM ; jj++ )

	mov	ebx, DWORD PTR _jj$[ebp]
	add	DWORD PTR tv3022[ebp], 8
	add	edi, 8
	inc	ebx
	mov	DWORD PTR tv2976[ebp], edi
	mov	edi, DWORD PTR _web+616
	mov	DWORD PTR _jj$[ebp], ebx
	cmp	ebx, edi
	jl	$LN78@facet_scal@4

; 692  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	ebx, DWORD PTR _gpp$89414[ebp]
	inc	esi
	cmp	esi, edi
	jl	$LN19@facet_scal@4
$LN21@facet_scal@4:

; 691  :       for ( kk = 0 ; kk < FACET_CTRL ; kk++ )

	inc	eax
	cmp	eax, 6
	jl	$LN84@facet_scal@4

; 688  : 
; 689  :     /* hessian */
; 690  :     for ( k = 0 ; k < FACET_CTRL ; k++ )

	add	DWORD PTR tv3262[ebp], 6
	add	edx, 8
	cmp	edx, 48					; 00000030H
	jl	$LN83@facet_scal@4
	fstp	ST(3)

; 703  :           }
; 704  : 
; 705  :      for ( k = 0 ; k < FACET_CTRL ; k++ )

	xor	ebx, ebx
	fstp	ST(1)
	mov	DWORD PTR tv4127[ebp], ebx
	fld	QWORD PTR __real@3fe0000000000000
	mov	DWORD PTR tv4129[ebp], ebx
	fld	QWORD PTR _det$[ebp]
	mov	DWORD PTR tv4131[ebp], ebx
$LN12@facet_scal@4:

; 706  :       for ( kk = 0 ; kk < FACET_CTRL ; kk++ )

	xor	esi, esi
	lea	edx, DWORD PTR _detgrad$[ebp]
	mov	DWORD PTR _kk$[ebp], esi
	mov	DWORD PTR tv4061[ebp], edx
$LN91@facet_scal@4:

; 707  :         for ( j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	mov	DWORD PTR _j$[ebp], ecx
	test	edi, edi
	jle	$LN8@facet_scal@4
	lea	eax, DWORD PTR _derivs$[ebp]
	mov	DWORD PTR tv3919[ebp], eax
$LN90@facet_scal@4:

; 708  :          for ( jj = 0 ; jj < SDIM ; jj++ )

	xor	eax, eax
	test	edi, edi
	jle	$LN5@facet_scal@4

; 706  :       for ( kk = 0 ; kk < FACET_CTRL ; kk++ )

	mov	edx, DWORD PTR _gpoly
	fld	ST(3)
	mov	edi, DWORD PTR _m$[ebp]
	fdiv	ST(0), ST(3)
	mov	ebx, DWORD PTR [edx+edi*4]

; 708  :          for ( jj = 0 ; jj < SDIM ; jj++ )

	mov	edi, DWORD PTR tv4127[ebp]
	add	edi, DWORD PTR _kk$[ebp]
	lea	esi, DWORD PTR [ebx+esi*8]
	lea	edi, DWORD PTR [edi+edi*2]
	mov	DWORD PTR tv1780[ebp], esi
	mov	esi, DWORD PTR tv4127[ebp]
	mov	edx, ebx
	mov	ebx, DWORD PTR _j$[ebp]
	lea	edi, DWORD PTR [ebx+edi*2]
	add	esi, ecx
	lea	edi, DWORD PTR [edi+edi*2]
	lea	esi, DWORD PTR _detgrad$[ebp+esi*8]
	add	edi, edi
	lea	edi, DWORD PTR _dethess$[ebp+edi*8]
	mov	DWORD PTR tv4140[ebp], esi
	mov	esi, DWORD PTR _second$[ebp]
	mov	esi, DWORD PTR [esi+ecx*4]
	mov	ecx, DWORD PTR tv4061[ebp]
	mov	DWORD PTR tv3561[ebp], edi
	lea	edi, DWORD PTR _derivs$[ebp]
	sub	edi, esi
	mov	DWORD PTR tv1822[ebp], esi
	mov	DWORD PTR tv3883[ebp], edi
	jmp	SHORT $LN3@facet_scal@4
$LN130@facet_scal@4:

; 700  :               dethess[k][kk][j][jj] += 2*gpp[0][k]*gpp[0][kk]*tt
; 701  :                 + ss*2*gpp[1][k]*gpp[1][kk]
; 702  :                 - 2*st*(gpp[0][k]*gpp[1][kk] + gpp[1][k]*gpp[0][kk]);

	fstp	ST(0)

; 699  :             if (j==jj) 

	jmp	$LN15@facet_scal@4
$LN75@facet_scal@4:

; 708  :          for ( jj = 0 ; jj < SDIM ; jj++ )

	fld	QWORD PTR _val$[ebp]
	mov	esi, DWORD PTR tv1822[ebp]
	fxch	ST(5)
$LN3@facet_scal@4:
	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edi, DWORD PTR [edi+1340]
	mov	ebx, DWORD PTR tv4129[ebp]
	mov	edi, DWORD PTR [edi+ebx]
	mov	ebx, DWORD PTR _kk$[ebp]
	mov	edi, DWORD PTR [edi+ebx*4]
	mov	ebx, DWORD PTR _j$[ebp]
	mov	edi, DWORD PTR [edi+ebx*4]

; 709  :             f_info->hess[k][kk][j][jj] += gauss2Dwt[m]*
; 710  :               (derivs[jj]*gpoly[m][kk]/sqrt(det)/4*detgrad[k][j] 
; 711  :                 -0.5*val/sqrt(det)/det/4*detgrad[kk][jj]*detgrad[k][j]
; 712  :                 + val/sqrt(det)/4*dethess[k][kk][j][jj]
; 713  :                 + 1/sqrt(det)/4*detgrad[kk][jj]*derivs[j]*gpoly[m][k]
; 714  :                 + area*second[j][jj]*gpoly[m][k]*gpoly[m][kk]);

	mov	ebx, DWORD PTR tv3883[ebp]
	lea	esi, DWORD PTR [esi+eax*8]
	fld	QWORD PTR [ebx+esi]
	mov	ebx, DWORD PTR tv1780[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv4140[ebp]
	lea	edi, DWORD PTR [edi+eax*8]
	inc	eax
	fdiv	ST(0), ST(4)
	add	ecx, 8
	fmul	ST(0), ST(5)
	fmul	QWORD PTR [ebx]
	fld	ST(6)
	fmul	ST(0), ST(4)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(3)
	fmul	ST(0), ST(6)
	fmul	QWORD PTR [ecx-8]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv3561[ebp]
	add	DWORD PTR tv3561[ebp], 8
	fsubp	ST(1), ST(0)
	fxch	ST(6)
	fdiv	ST(0), ST(4)
	fmul	ST(0), ST(5)
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv3919[ebp]
	faddp	ST(6), ST(0)
	fld	ST(0)
	fmul	QWORD PTR [ecx-8]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv4131[ebp]
	fmul	QWORD PTR [edx+ebx]
	faddp	ST(6), ST(0)
	fld	QWORD PTR [esi]
	mov	esi, DWORD PTR _kk$[ebp]
	fmul	QWORD PTR _area$[ebp]
	fmul	QWORD PTR [edx+ebx]
	fmul	QWORD PTR [edx+esi*8]
	mov	esi, DWORD PTR tv1518[ebp]
	faddp	ST(6), ST(0)
	fxch	ST(5)
	fmul	QWORD PTR [esi]
	fadd	QWORD PTR [edi]
	fstp	QWORD PTR [edi]
	mov	edi, DWORD PTR _web+616
	cmp	eax, edi
	jl	$LN75@facet_scal@4

; 708  :          for ( jj = 0 ; jj < SDIM ; jj++ )

	mov	ecx, DWORD PTR _j$[ebp]
	fstp	ST(4)
	fld	QWORD PTR _val$[ebp]
	mov	esi, DWORD PTR _kk$[ebp]
	fxch	ST(4)
$LN5@facet_scal@4:

; 707  :         for ( j = 0 ; j < SDIM ; j++ )

	add	DWORD PTR tv3919[ebp], 8
	inc	ecx
	mov	DWORD PTR _j$[ebp], ecx
	cmp	ecx, edi
	jl	$LN90@facet_scal@4
$LN8@facet_scal@4:

; 706  :       for ( kk = 0 ; kk < FACET_CTRL ; kk++ )

	add	DWORD PTR tv4061[ebp], 48		; 00000030H
	inc	esi
	mov	DWORD PTR _kk$[ebp], esi
	cmp	esi, 6
	jl	$LN91@facet_scal@4

; 703  :           }
; 704  : 
; 705  :      for ( k = 0 ; k < FACET_CTRL ; k++ )

	add	DWORD PTR tv4129[ebp], 4
	add	DWORD PTR tv4127[ebp], 6
	add	ebx, 8
	mov	DWORD PTR tv4131[ebp], ebx
	cmp	ebx, 48					; 00000030H
	jl	$LN12@facet_scal@4
	fstp	ST(2)
	fstp	ST(2)
	fstp	ST(0)
	fstp	ST(1)
	jmp	SHORT $LN161@facet_scal@4
$LN93@facet_scal@4:
	mov	edi, DWORD PTR _web+616
$LN161@facet_scal@4:

; 663  : 
; 664  :   for ( m = 0 ; m < gauss2D_num ; m++ )

	mov	eax, DWORD PTR _m$[ebp]

; 671  :     if ( det <= 0.0 ) continue;

	fstp	ST(0)
	inc	eax
	mov	DWORD PTR _m$[ebp], eax
	cmp	eax, DWORD PTR _gauss2D_num
	jl	$LL87@facet_scal@4
	pop	edi
	pop	ebx
$LN73@facet_scal@4:

; 715  :   }
; 716  :   return value;
; 717  : } // end facet_scalar_integral_q_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _value$[ebp]
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_scalar_integral_q_hess ENDP
_TEXT	ENDS
PUBLIC	_facet_scalar_integral_lagr
EXTRN	_gauss_lagrange:BYTE
; Function compile flags: /Ogtp
;	COMDAT _facet_scalar_integral_lagr
_TEXT	SEGMENT
_area$ = -32						; size = 8
_st$ = -32						; size = 8
tv265 = -24						; size = 8
_ss$ = -24						; size = 8
_value$ = -16						; size = 8
_mi$ = -8						; size = 4
_gl$ = -4						; size = 4
_m$ = 8							; size = 4
_f_info$ = 8						; size = 4
_facet_scalar_integral_lagr PROC			; COMDAT

; 736  : { int m;

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 737  :   REAL value = 0.0;
; 738  :   REAL area;
; 739  :   REAL ss,st,tt;
; 740  :   struct gauss_lag *gl = &gauss_lagrange[web.dimension][web.gauss2D_order];

	mov	ecx, DWORD PTR _web+1596
	fldz
	mov	eax, DWORD PTR _web+620
	fstp	QWORD PTR _value$[ebp]
	push	ebx

; 741  :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	ebx, DWORD PTR _f_info$[ebp]
	shl	ecx, 5
	add	ecx, DWORD PTR _gauss_lagrange[eax*4]
	mov	eax, DWORD PTR [ebx+8]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list
	push	esi

; 742  : 
; 743  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	xor	esi, esi
	mov	DWORD PTR _gl$[ebp], ecx
	mov	DWORD PTR _mi$[ebp], eax
	mov	DWORD PTR _m$[ebp], esi
	cmp	DWORD PTR [ecx+4], esi
	jle	$LN2@facet_scal@5
	push	edi
	npad	2
$LL4@facet_scal@5:

; 744  :   { REAL **tang = f_info->sides[m];

	mov	ecx, DWORD PTR [ebx+1276]
	mov	edi, DWORD PTR [ecx+esi*4]

; 745  :     ss = SDIM_dot(tang[0],tang[0]);

	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR [edi]
	push	edx
	push	eax
	push	eax
	call	_dot
	fstp	QWORD PTR _ss$[ebp]

; 746  :     st = SDIM_dot(tang[0],tang[1]);

	mov	eax, DWORD PTR _web+616
	mov	ecx, DWORD PTR [edi+4]
	mov	edx, DWORD PTR [edi]
	push	eax
	push	ecx
	push	edx
	call	_dot
	fstp	QWORD PTR _st$[ebp]

; 747  :     tt = SDIM_dot(tang[1],tang[1]);

	mov	eax, DWORD PTR _web+616
	mov	edi, DWORD PTR [edi+4]
	push	eax
	push	edi
	push	edi
	call	_dot

; 748  :     area = ss*tt-st*st;

	fmul	QWORD PTR _ss$[ebp]
	fld	QWORD PTR _st$[ebp]
	add	esp, 36					; 00000024H
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _area$[ebp]

; 749  :     if ( area <= 0.0 ) continue;

	fldz
	fcompp
	fnstsw	ax
	test	ah, 1
	je	SHORT $LN3@facet_scal@5

; 750  :     f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	mov	ecx, DWORD PTR [ebx+1268]
	fild	DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR [ecx+esi*4]
	add	edx, edx
	fstp	QWORD PTR [eax+edx*8]

; 751  :     value += gl->gausswt[m]*sqrt(area)*
; 752  :        eval(mi->expr[0],f_info->gauss_pt[m],f_info->id,NULL);

	mov	ecx, DWORD PTR [ebx]
	mov	edx, DWORD PTR [ebx+1268]
	mov	eax, DWORD PTR [edx+esi*4]
	push	0
	push	ecx
	mov	ecx, DWORD PTR _mi$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	push	eax
	push	edx
	call	_eval
	fstp	QWORD PTR tv265[ebp]
	fld	QWORD PTR _area$[ebp]
	add	esp, 16					; 00000010H
	call	__CIsqrt
	mov	eax, DWORD PTR _gl$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	fmul	QWORD PTR [ecx+esi*8]
	fmul	QWORD PTR tv265[ebp]
	fadd	QWORD PTR _value$[ebp]
	fstp	QWORD PTR _value$[ebp]
$LN3@facet_scal@5:

; 742  : 
; 743  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	mov	edx, DWORD PTR _gl$[ebp]
	inc	esi
	mov	DWORD PTR _m$[ebp], esi
	cmp	esi, DWORD PTR [edx+4]
	jl	$LL4@facet_scal@5
	pop	edi
$LN2@facet_scal@5:

; 753  :   } 
; 754  :   return value/2; /* triangle factor */

	fld	QWORD PTR _value$[ebp]
	pop	esi
	fmul	QWORD PTR __real@3fe0000000000000
	pop	ebx

; 755  : } // end facet_scalar_integral_lagr()

	mov	esp, ebp
	pop	ebp
	ret	0
_facet_scalar_integral_lagr ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_facet_scalar_integral_lagr_grad
; Function compile flags: /Ogtp
;	COMDAT _facet_scalar_integral_lagr_grad
_TEXT	SEGMENT
_tt$ = -132						; size = 8
_val$ = -124						; size = 8
_ss$ = -116						; size = 8
_st$ = -108						; size = 8
_area$ = -100						; size = 8
tv665 = -96						; size = 4
_mi$ = -92						; size = 4
_value$ = -88						; size = 8
tv354 = -80						; size = 8
tv614 = -76						; size = 4
tv412 = -72						; size = 4
_tang$89491 = -68					; size = 4
_f_info$GSCopy$ = -64					; size = 4
_j$ = -60						; size = 4
tv398 = -56						; size = 4
_m$ = -56						; size = 4
_derivs$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_facet_scalar_integral_lagr_grad PROC			; COMDAT

; 766  : { int m,j,k;

	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 767  :   REAL value = 0.0;
; 768  :   REAL val;
; 769  :   REAL derivs[MAXCOORD];
; 770  :   REAL detgrad;
; 771  :   REAL area,det;
; 772  :   REAL ss,st,tt;
; 773  :   struct gauss_lag *gl = &gauss_lagrange[web.dimension][web.gauss2D_order];

	mov	eax, DWORD PTR _web+620
	fldz
	mov	ecx, DWORD PTR _f_info$[ebp]
	fst	QWORD PTR _value$[ebp]
	push	esi
	mov	esi, DWORD PTR _web+1596
	shl	esi, 5
	add	esi, DWORD PTR _gauss_lagrange[eax*4]

; 774  :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [ecx+8]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list
	push	edi

; 775  : 
; 776  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	xor	edi, edi
	mov	DWORD PTR _f_info$GSCopy$[ebp], ecx
	mov	DWORD PTR _mi$[ebp], eax
	mov	DWORD PTR _m$[ebp], edi
	cmp	DWORD PTR [esi+4], edi
	jle	$LN8@facet_scal@6
	push	ebx
	fstp	ST(0)
	mov	ebx, DWORD PTR _web+616
	jmp	SHORT $LN10@facet_scal@6
	npad	11
$LL23@facet_scal@6:
	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
$LN10@facet_scal@6:

; 777  :   { REAL **tang = f_info->sides[m];

	mov	ecx, DWORD PTR [ecx+1276]
	mov	eax, DWORD PTR [ecx+edi*4]
	mov	DWORD PTR _tang$89491[ebp], eax

; 778  :     ss = SDIM_dot(tang[0],tang[0]);

	mov	eax, DWORD PTR [eax]
	push	ebx
	push	eax
	push	eax
	call	_dot
	fstp	QWORD PTR _ss$[ebp]

; 779  :     st = SDIM_dot(tang[0],tang[1]);

	mov	edx, DWORD PTR _web+616
	mov	ebx, DWORD PTR _tang$89491[ebp]
	mov	eax, DWORD PTR [ebx+4]
	mov	ecx, DWORD PTR [ebx]
	push	edx
	push	eax
	push	ecx
	call	_dot
	fstp	QWORD PTR _st$[ebp]

; 780  :     tt = SDIM_dot(tang[1],tang[1]);

	mov	edx, DWORD PTR _web+616
	mov	ebx, DWORD PTR [ebx+4]
	push	edx
	push	ebx
	push	ebx
	call	_dot
	fst	QWORD PTR _tt$[ebp]

; 781  :     det = ss*tt-st*st;

	fmul	QWORD PTR _ss$[ebp]
	add	esp, 36					; 00000024H
	fld	QWORD PTR _st$[ebp]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)

; 782  :     if ( det <= 0.0 ) continue;

	fldz
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 1
	je	$LN32@facet_scal@6

; 783  :     area = sqrt(det)/2; 

	call	__CIsqrt
	fst	QWORD PTR tv354[ebp]
	fmul	QWORD PTR __real@3fe0000000000000

; 784  :     f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [eax+1268]
	mov	edx, DWORD PTR _web+616
	mov	ecx, DWORD PTR [ecx+edi*4]
	fstp	QWORD PTR _area$[ebp]
	fild	DWORD PTR _m$[ebp]
	add	edx, edx
	fstp	QWORD PTR [ecx+edx*8]

; 785  :     eval_all(mi->expr[0],f_info->gauss_pt[m],SDIM,&val,derivs,f_info->id);

	mov	edx, DWORD PTR [eax]
	push	edx
	lea	ecx, DWORD PTR _derivs$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _web+616
	lea	edx, DWORD PTR _val$[ebp]
	push	edx
	mov	edx, DWORD PTR [eax+1268]
	mov	eax, DWORD PTR [edx+edi*4]
	push	ecx
	mov	ecx, DWORD PTR _mi$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	push	eax
	push	edx
	call	_eval_all

; 786  :     value += gl->gausswt[m]*area*val;

	mov	eax, DWORD PTR [esi+12]
	fld	QWORD PTR [eax+edi*8]

; 787  : 
; 788  :     for ( k = 0 ; k < gl->lagpts ; k++ )

	xor	ecx, ecx
	fld	QWORD PTR _area$[ebp]
	add	esp, 24					; 00000018H
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR _val$[ebp]
	fadd	QWORD PTR _value$[ebp]
	fstp	QWORD PTR _value$[ebp]
	cmp	DWORD PTR [esi+16], ecx
	jle	$LN32@facet_scal@6
	fld	QWORD PTR tv354[ebp]
	mov	ebx, DWORD PTR _web+616
	fld	QWORD PTR __real@4000000000000000
$LN24@facet_scal@6:

; 789  :       for ( j = 0 ; j < SDIM ; j++ )

	mov	DWORD PTR _j$[ebp], 0
	test	ebx, ebx
	jle	$LN5@facet_scal@6
	mov	edx, DWORD PTR _tang$89491[ebp]
	fld	QWORD PTR _ss$[ebp]
	mov	eax, DWORD PTR [edx]
	fmul	ST(0), ST(1)
	mov	edx, DWORD PTR [edx+4]
	fld	QWORD PTR _st$[ebp]
	sub	edx, eax
	fmul	ST(0), ST(2)
	mov	DWORD PTR tv614[ebp], edx
	lea	edx, DWORD PTR _derivs$[ebp]
	sub	edx, eax
	mov	DWORD PTR tv665[ebp], edx
$LN20@facet_scal@6:

; 790  :       { detgrad = 2*gl->gpolypart[m][0][k]*tang[0][j]*tt
; 791  :                 + ss*2*gl->gpolypart[m][1][k]*tang[1][j]
; 792  :                 - 2*st*(gl->gpolypart[m][0][k]*tang[1][j]
; 793  :                             + gl->gpolypart[m][1][k]*tang[0][j]);

	mov	edx, DWORD PTR [esi+24]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	ebx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx]
	lea	ebx, DWORD PTR [ebx+ecx*8]
	lea	edx, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR tv412[ebp], edx
	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [edx+1336]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv398[ebp], ebx
	mov	ebx, DWORD PTR _j$[ebp]
	lea	edx, DWORD PTR [edx+ebx*8]
	mov	ebx, DWORD PTR tv412[ebp]
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv398[ebp]
	fmul	ST(0), ST(3)
	add	eax, 8
	fmul	QWORD PTR [eax-8]
	fmul	QWORD PTR _tt$[ebp]
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv614[ebp]
	fmul	ST(0), ST(3)
	fmul	QWORD PTR [ebx+eax-8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+eax-8]
	mov	ebx, DWORD PTR tv412[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv398[ebp]
	fld	QWORD PTR [ebx]

; 794  : 
; 795  :         f_info->grad[k][j] += gl->gausswt[m]*
; 796  :            (val/sqrt(det)/4*detgrad + area*derivs[j]*gl->gpoly[m][k]);

	mov	ebx, DWORD PTR tv665[ebp]
	fmul	QWORD PTR [eax-8]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _val$[ebp]
	fdiv	ST(0), ST(5)
	fmul	QWORD PTR __real@3fd0000000000000
	fmulp	ST(1), ST(0)
	fld	QWORD PTR [ebx+eax-8]
	mov	ebx, DWORD PTR [esi+20]
	mov	ebx, DWORD PTR [ebx+edi*4]
	fmul	ST(0), ST(6)
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR [esi+12]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR [ebx+edi*8]
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR _j$[ebp]
	mov	ebx, DWORD PTR _web+616
	inc	edx
	mov	DWORD PTR _j$[ebp], edx
	cmp	edx, ebx
	jl	$LN20@facet_scal@6

; 789  :       for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(1)
	fstp	ST(0)
$LN5@facet_scal@6:

; 787  : 
; 788  :     for ( k = 0 ; k < gl->lagpts ; k++ )

	inc	ecx
	cmp	ecx, DWORD PTR [esi+16]
	jl	$LN24@facet_scal@6
	fstp	ST(0)
	fstp	ST(1)
	jmp	SHORT $LN42@facet_scal@6
$LN32@facet_scal@6:
	mov	ebx, DWORD PTR _web+616
$LN42@facet_scal@6:

; 775  : 
; 776  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	inc	edi

; 787  : 
; 788  :     for ( k = 0 ; k < gl->lagpts ; k++ )

	fstp	ST(0)
	mov	DWORD PTR _m$[ebp], edi
	cmp	edi, DWORD PTR [esi+4]
	jl	$LL23@facet_scal@6

; 797  :       }
; 798  :   }
; 799  : 
; 800  :   return value;

	fld	QWORD PTR _value$[ebp]
	pop	ebx
$LN8@facet_scal@6:

; 801  : } // end facet_scalar_integral_lagr_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_scalar_integral_lagr_grad ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_facet_scalar_integral_lagr_hess
; Function compile flags: /Ogtp
;	COMDAT _facet_scalar_integral_lagr_hess
_TEXT	SEGMENT
_secondqXvS$ = -5316					; size = 24
_det$ = -5292						; size = 8
tv861 = -5284						; size = 8
_tt$ = -5276						; size = 8
tv1537 = -5268						; size = 4
_ss$ = -5264						; size = 8
tv868 = -5256						; size = 4
tv697 = -5252						; size = 4
_mi$ = -5248						; size = 4
tv1993 = -5244						; size = 4
_area$ = -5240						; size = 8
_st$ = -5232						; size = 8
tv1609 = -5224						; size = 4
_value$ = -5220						; size = 8
_val$ = -5212						; size = 8
_second$ = -5204					; size = 4
_tang$89527 = -5200					; size = 4
tv712 = -5196						; size = 8
tv648 = -5196						; size = 8
tv903 = -5192						; size = 4
tv1486 = -5188						; size = 4
_gpp$89526 = -5184					; size = 4
tv767 = -5180						; size = 4
tv1527 = -5176						; size = 4
tv1161 = -5176						; size = 4
_f_info$GSCopy$ = -5172					; size = 4
tv1104 = -5168						; size = 4
tv774 = -5168						; size = 4
tv1839 = -5164						; size = 4
tv684 = -5164						; size = 4
tv1980 = -5160						; size = 4
tv698 = -5160						; size = 4
tv1212 = -5156						; size = 4
tv638 = -5156						; size = 4
tv1100 = -5152						; size = 4
_jj$ = -5152						; size = 4
_gl$ = -5148						; size = 4
_m$ = -5144						; size = 4
_detgrad$ = -5140					; size = 4800
_secondxJ$ = -340					; size = 288
_derivs$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_facet_scalar_integral_lagr_hess PROC			; COMDAT

; 813  : { int m,j,k,kk,jj;

	push	ebp
	mov	ebp, esp
	mov	eax, 5316				; 000014c4H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 814  :   REAL value = 0.0;

	fldz
	push	esi
	push	edi
	fstp	QWORD PTR _value$[ebp]
	mov	edi, DWORD PTR _f_info$[ebp]

; 815  :   REAL val;
; 816  :   REAL derivs[MAXCOORD];
; 817  :   REAL detgrad[MAXVCOUNT][MAXCOORD];
; 818  :   REAL dethess;
; 819  :   REAL area,det,ss,st,tt;
; 820  :   MAT2D(second,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	eax, DWORD PTR _secondxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _secondqXvS$[ebp]
	push	ecx
	mov	DWORD PTR _f_info$GSCopy$[ebp], edi
	call	_mat2d_setup

; 821  :   struct gauss_lag *gl = &gauss_lagrange[web.dimension][web.gauss2D_order];

	mov	esi, DWORD PTR _web+1596
	mov	edx, DWORD PTR _web+620
	mov	DWORD PTR _second$[ebp], eax

; 822  :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [edi+8]
	shl	esi, 5
	add	esi, DWORD PTR _gauss_lagrange[edx*4]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list
	add	esp, 16					; 00000010H
	mov	DWORD PTR _mi$[ebp], eax

; 823  : 
; 824  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	xor	eax, eax
	mov	DWORD PTR _gl$[ebp], esi
	mov	DWORD PTR _m$[ebp], eax
	cmp	DWORD PTR [esi+4], eax
	jle	$LN40@facet_scal@7
	push	ebx
	mov	ebx, DWORD PTR _web+616
	jmp	SHORT $LN23@facet_scal@7
	npad	6
$LL48@facet_scal@7:
	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
$LN23@facet_scal@7:

; 825  :   { REAL **gpp = gl->gpolypart[m];

	mov	ecx, DWORD PTR [esi+24]
	mov	edx, DWORD PTR [ecx+eax*4]

; 826  :     REAL **tang = f_info->sides[m];

	mov	ecx, DWORD PTR [edi+1276]
	mov	edi, DWORD PTR [ecx+eax*4]

; 827  :     ss = SDIM_dot(tang[0],tang[0]);

	mov	eax, DWORD PTR [edi]
	push	ebx
	push	eax
	push	eax
	mov	DWORD PTR _gpp$89526[ebp], edx
	mov	DWORD PTR _tang$89527[ebp], edi
	call	_dot
	fstp	QWORD PTR _ss$[ebp]

; 828  :     st = SDIM_dot(tang[0],tang[1]);

	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [edi]
	push	edx
	push	eax
	push	ecx
	call	_dot
	fstp	QWORD PTR _st$[ebp]

; 829  :     tt = SDIM_dot(tang[1],tang[1]);

	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR [edi+4]
	push	edx
	push	eax
	push	eax
	call	_dot
	fst	QWORD PTR _tt$[ebp]

; 830  :     det = ss*tt-st*st;

	fmul	QWORD PTR _ss$[ebp]
	add	esp, 36					; 00000024H
	fld	QWORD PTR _st$[ebp]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _det$[ebp]

; 831  :     if ( det <= 0.0 ) continue;

	fldz
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 1
	je	$LN53@facet_scal@7

; 832  :     area = sqrt(det)/2; 

	call	__CIsqrt
	fst	QWORD PTR tv648[ebp]
	fmul	QWORD PTR __real@3fe0000000000000

; 833  :     f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [eax+1268]
	mov	edx, DWORD PTR _web+616
	mov	ebx, DWORD PTR _m$[ebp]
	fstp	QWORD PTR _area$[ebp]
	mov	ecx, DWORD PTR [ecx+ebx*4]
	fild	DWORD PTR _m$[ebp]
	add	edx, edx
	fstp	QWORD PTR [ecx+edx*8]

; 834  :     eval_second(mi->expr[0],f_info->gauss_pt[m],SDIM,&val,
; 835  :                                                    derivs,second,f_info->id);

	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _second$[ebp]
	mov	eax, DWORD PTR [eax+1268]
	push	edx
	push	ecx
	lea	edx, DWORD PTR _derivs$[ebp]
	push	edx
	mov	edx, DWORD PTR _web+616
	lea	ecx, DWORD PTR _val$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [eax+ebx*4]
	push	edx
	mov	edx, DWORD PTR _mi$[ebp]
	mov	eax, DWORD PTR [edx+232]
	push	ecx
	push	eax
	call	_eval_second

; 836  :     value += gl->gausswt[m]*area*val;

	mov	ecx, DWORD PTR [esi+12]
	fld	QWORD PTR [ecx+ebx*8]
	mov	ebx, DWORD PTR _web+616
	fmul	QWORD PTR _area$[ebp]

; 837  : 
; 838  :     /* gradients */
; 839  :     for ( k = 0 ; k < gl->lagpts ; k++ )

	xor	ecx, ecx
	fld	QWORD PTR _val$[ebp]
	add	esp, 28					; 0000001cH
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR _value$[ebp]
	fstp	QWORD PTR _value$[ebp]
	fld	QWORD PTR tv648[ebp]
	fld	QWORD PTR __real@3fd0000000000000
	fld	QWORD PTR __real@4000000000000000
	cmp	DWORD PTR [esi+16], ecx
	jle	$LN17@facet_scal@7

; 832  :     area = sqrt(det)/2; 

	lea	edx, DWORD PTR _detgrad$[ebp]
	mov	DWORD PTR tv1212[ebp], edx
$LN45@facet_scal@7:

; 840  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	test	ebx, ebx
	jle	$LN18@facet_scal@7
	mov	edx, DWORD PTR _gpp$89526[ebp]
	fld	QWORD PTR _ss$[ebp]
	mov	eax, DWORD PTR [edx+4]
	fmul	ST(0), ST(1)
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR _st$[ebp]
	lea	edx, DWORD PTR [edx+ecx*8]
	fmul	ST(0), ST(2)
	lea	eax, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR tv698[ebp], edx
	mov	edx, DWORD PTR tv1212[ebp]
	fstp	QWORD PTR tv712[ebp]
	mov	DWORD PTR tv684[ebp], eax
	mov	eax, DWORD PTR [edi+4]
	mov	edi, DWORD PTR [edi]
	mov	DWORD PTR tv1100[ebp], edx
	sub	edi, eax
	lea	edx, DWORD PTR _derivs$[ebp]
	sub	edx, eax
	mov	DWORD PTR tv1104[ebp], edi
	mov	DWORD PTR tv1161[ebp], edx
	jmp	SHORT $LN97@facet_scal@7
$LN41@facet_scal@7:
	fld	QWORD PTR _val$[ebp]
	mov	edi, DWORD PTR tv1104[ebp]
	fxch	ST(4)
$LN97@facet_scal@7:
	mov	ebx, DWORD PTR tv698[ebp]

; 841  :       { detgrad[k][j] = 2*gpp[0][k]*tang[0][j]*tt + ss*2*gpp[1][k]*tang[1][j]
; 842  :                          - 2*st*(gpp[0][k]*tang[1][j] + gpp[1][k]*tang[0][j]);

	fld	QWORD PTR [ebx]
	mov	edx, DWORD PTR tv684[ebp]
	fmul	ST(0), ST(2)
	add	eax, 8
	fmul	QWORD PTR [edi+eax-8]
	fmul	QWORD PTR _tt$[ebp]
	fld	ST(1)
	fmul	QWORD PTR [edx]
	fmul	QWORD PTR [eax-8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax-8]
	fmul	QWORD PTR [ebx]

; 843  : 
; 844  :         f_info->grad[k][j] += gl->gausswt[m]*
; 845  :             (val/sqrt(det)/4*detgrad[k][j] + area*derivs[j]*gl->gpoly[m][k]);

	mov	ebx, DWORD PTR _m$[ebp]
	fld	QWORD PTR [edi+eax-8]
	mov	edi, DWORD PTR _gl$[ebp]
	fmul	QWORD PTR [edx]
	mov	edi, DWORD PTR [edi+20]
	mov	edi, DWORD PTR [edi+ebx*4]
	mov	edx, DWORD PTR tv1100[ebp]
	mov	ebx, DWORD PTR tv1161[ebp]
	faddp	ST(1), ST(0)
	add	DWORD PTR tv1100[ebp], 8
	fmul	QWORD PTR tv712[ebp]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR [edx]
	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	fld	QWORD PTR [ebx+eax-8]
	mov	edx, DWORD PTR [edx+1336]
	fmul	QWORD PTR _area$[ebp]
	mov	ebx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	lea	edx, DWORD PTR [edx+esi*8]
	fmul	QWORD PTR [edi+ecx*8]
	mov	edi, DWORD PTR _gl$[ebp]
	fxch	ST(6)
	mov	edi, DWORD PTR [edi+12]
	fdiv	ST(0), ST(5)
	inc	esi
	fmul	ST(0), ST(4)
	fmulp	ST(1), ST(0)
	faddp	ST(5), ST(0)
	fxch	ST(4)
	fmul	QWORD PTR [edi+ebx*8]
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	mov	ebx, DWORD PTR _web+616
	cmp	esi, ebx
	jl	$LN41@facet_scal@7

; 840  :       for ( j = 0 ; j < SDIM ; j++ )

	mov	edi, DWORD PTR _tang$89527[ebp]
	fstp	ST(3)
	fld	QWORD PTR _val$[ebp]
	fxch	ST(3)
$LN18@facet_scal@7:

; 837  : 
; 838  :     /* gradients */
; 839  :     for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	eax, DWORD PTR _gl$[ebp]
	add	DWORD PTR tv1212[ebp], 48		; 00000030H
	inc	ecx
	cmp	ecx, DWORD PTR [eax+16]
	jl	$LN45@facet_scal@7
	mov	esi, eax
$LN17@facet_scal@7:

; 846  :       }
; 847  : 
; 848  :     /* hessian */
; 849  :     for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	edx, DWORD PTR [esi+16]
	xor	ecx, ecx
	cmp	edx, ecx
	jle	$LN72@facet_scal@7
	mov	DWORD PTR tv1980[ebp], ecx
$LN49@facet_scal@7:

; 850  :       for ( kk = 0 ; kk < gl->lagpts ; kk++ )

	xor	eax, eax
	test	edx, edx
	jle	$LN12@facet_scal@7
	lea	edx, DWORD PTR _detgrad$[ebp]
	mov	DWORD PTR tv1839[ebp], edx
$LN47@facet_scal@7:

; 851  :         for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	test	ebx, ebx
	jle	$LN9@facet_scal@7
$LN51@facet_scal@7:

; 852  :           for ( jj = 0 ; jj < SDIM ; jj++ )

	mov	DWORD PTR _jj$[ebp], 0
	test	ebx, ebx
	jle	$LN6@facet_scal@7
	mov	ebx, DWORD PTR _gpp$89526[ebp]
	fld	ST(1)
	mov	edx, DWORD PTR [ebx+4]
	fdiv	ST(0), ST(3)
	mov	DWORD PTR tv767[ebp], edx
	mov	edx, DWORD PTR [edi]
	mov	DWORD PTR tv638[ebp], edx
	mov	edx, DWORD PTR [edi+4]
	mov	edi, DWORD PTR [ebx]
	mov	DWORD PTR tv697[ebp], edi
	mov	edi, DWORD PTR tv1980[ebp]
	add	edi, esi
	lea	edi, DWORD PTR _detgrad$[ebp+edi*8]
	mov	DWORD PTR tv1993[ebp], edi
	mov	edi, DWORD PTR tv1839[ebp]
	mov	DWORD PTR tv1486[ebp], edi
	mov	edi, DWORD PTR tv638[ebp]
	sub	edi, edx
	mov	DWORD PTR tv1527[ebp], edi
	lea	edi, DWORD PTR _derivs$[ebp]
	sub	edi, edx
	mov	DWORD PTR tv1609[ebp], edi
	mov	edi, DWORD PTR _second$[ebp]
	mov	edi, DWORD PTR [edi+esi*4]
	sub	edi, edx
	mov	DWORD PTR tv774[ebp], edx
	mov	DWORD PTR tv1537[ebp], edi
	fstp	QWORD PTR tv861[ebp]
$LN4@facet_scal@7:

; 853  :           { dethess = 
; 854  :                      2*gpp[0][k]*tang[0][j]*2*gpp[1][kk]*tang[1][jj]
; 855  :                   + 2*gpp[0][kk]*tang[0][jj]*2*gpp[1][k]*tang[1][j]
; 856  :                   - 2*(gpp[0][kk]*tang[1][jj] + gpp[1][kk]*tang[0][jj])
; 857  :                     *(gpp[0][k]*tang[1][j] + gpp[1][k]*tang[0][j]);

	mov	edi, DWORD PTR tv697[ebp]
	fld	QWORD PTR [edi+eax*8]
	mov	ebx, DWORD PTR tv1527[ebp]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR tv767[ebp]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR tv774[ebp]
	fmul	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR tv638[ebp]
	fld	QWORD PTR [edi+ecx*8]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR tv767[ebp]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ebx+eax*8]
	fmul	QWORD PTR [edx]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi+eax*8]
	fmul	QWORD PTR [edx]
	fld	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR tv1527[ebp]
	fmul	QWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR tv638[ebp]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fld	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR tv767[ebp]
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR tv774[ebp]
	fld	QWORD PTR [edi+ecx*8]
	fmul	QWORD PTR [ebx+esi*8]
	faddp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)

; 858  :             if (j==jj) 

	cmp	esi, DWORD PTR _jj$[ebp]
	jne	SHORT $LN1@facet_scal@7

; 859  :               dethess += 2*gpp[0][k]*gpp[0][kk]*tt
; 860  :                 + ss*2*gpp[1][k]*gpp[1][kk]
; 861  :                 - 2*st*(gpp[0][k]*gpp[1][kk] + gpp[1][k]*gpp[0][kk]);

	fld	QWORD PTR [edi+ecx*8]
	mov	ebx, DWORD PTR _gpp$89526[ebp]
	mov	ebx, DWORD PTR [ebx+4]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [edi+eax*8]
	fmul	QWORD PTR _tt$[ebp]
	fld	QWORD PTR _ss$[ebp]
	fmul	ST(0), ST(3)
	fmul	QWORD PTR [ebx+ecx*8]
	fmul	QWORD PTR [ebx+eax*8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+eax*8]
	fmul	QWORD PTR [edi+ecx*8]
	fld	QWORD PTR [ebx+ecx*8]
	fmul	QWORD PTR [edi+eax*8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _st$[ebp]
	fmul	ST(0), ST(4)
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
$LN1@facet_scal@7:

; 862  : 
; 863  :             f_info->hess[k][kk][j][jj] += gl->gausswt[m]*
; 864  :               (derivs[jj]*gl->gpoly[m][kk]/sqrt(det)/4*detgrad[k][j] 
; 865  :                 -0.5*val/sqrt(det)/det/4*detgrad[kk][jj]*detgrad[k][j]
; 866  :                 + val/sqrt(det)/4*dethess
; 867  :                 + 1/sqrt(det)/4*detgrad[kk][jj]*derivs[j]*gl->gpoly[m][k]
; 868  :                 + area*second[j][jj]*gl->gpoly[m][k]*gl->gpoly[m][kk]);

	mov	edi, DWORD PTR _gl$[ebp]
	mov	edi, DWORD PTR [edi+20]
	mov	ebx, DWORD PTR _m$[ebp]
	mov	edi, DWORD PTR [edi+ebx*4]
	mov	ebx, DWORD PTR _jj$[ebp]
	mov	DWORD PTR tv868[ebp], edi
	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edi, DWORD PTR [edi+1340]
	mov	edi, DWORD PTR [edi+ecx*4]
	mov	edi, DWORD PTR [edi+eax*4]
	mov	edi, DWORD PTR [edi+esi*4]
	lea	edi, DWORD PTR [edi+ebx*8]
	mov	ebx, DWORD PTR _m$[ebp]
	mov	DWORD PTR tv903[ebp], edi
	mov	edi, DWORD PTR _gl$[ebp]
	mov	edi, DWORD PTR [edi+20]
	mov	edi, DWORD PTR [edi+ebx*4]
	fld	QWORD PTR [edi+eax*8]
	mov	edi, DWORD PTR tv1609[ebp]
	fmul	QWORD PTR [edi+edx]
	mov	ebx, DWORD PTR tv1993[ebp]
	mov	edi, DWORD PTR tv1486[ebp]
	add	DWORD PTR tv1486[ebp], 8
	fdiv	ST(0), ST(4)
	add	edx, 8
	fmul	ST(0), ST(3)
	fmul	QWORD PTR [ebx]
	fld	ST(5)
	fmul	QWORD PTR __real@3fe0000000000000
	fdiv	ST(0), ST(5)
	fdiv	QWORD PTR _det$[ebp]
	fmul	ST(0), ST(4)
	fmul	QWORD PTR [edi]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv1537[ebp]
	fsubp	ST(1), ST(0)
	fxch	ST(5)
	fdiv	ST(0), ST(4)
	fmul	ST(0), ST(3)
	fmulp	ST(1), ST(0)
	faddp	ST(4), ST(0)
	fld	QWORD PTR tv861[ebp]
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR tv868[ebp]
	fmul	QWORD PTR _derivs$[ebp+esi*8]
	fmul	QWORD PTR [edi+ecx*8]
	faddp	ST(4), ST(0)
	fld	QWORD PTR [ebx+edx-8]
	mov	ebx, DWORD PTR _m$[ebp]
	fmul	QWORD PTR _area$[ebp]
	fmul	QWORD PTR [edi+ecx*8]
	fmul	QWORD PTR [edi+eax*8]
	mov	edi, DWORD PTR _gl$[ebp]
	mov	edi, DWORD PTR [edi+12]
	faddp	ST(4), ST(0)
	fxch	ST(3)
	fmul	QWORD PTR [edi+ebx*8]
	mov	edi, DWORD PTR tv903[ebp]
	fadd	QWORD PTR [edi]
	fstp	QWORD PTR [edi]
	mov	edi, DWORD PTR _jj$[ebp]
	mov	ebx, DWORD PTR _web+616
	fld	QWORD PTR _val$[ebp]
	inc	edi
	fxch	ST(3)
	mov	DWORD PTR _jj$[ebp], edi
	cmp	edi, ebx
	jl	$LN4@facet_scal@7

; 852  :           for ( jj = 0 ; jj < SDIM ; jj++ )

	mov	edi, DWORD PTR _tang$89527[ebp]
$LN6@facet_scal@7:

; 851  :         for ( j = 0 ; j < SDIM ; j++ )

	inc	esi
	cmp	esi, ebx
	jl	$LN51@facet_scal@7
$LN9@facet_scal@7:

; 850  :       for ( kk = 0 ; kk < gl->lagpts ; kk++ )

	mov	edx, DWORD PTR _gl$[ebp]
	add	DWORD PTR tv1839[ebp], 48		; 00000030H
	inc	eax
	cmp	eax, DWORD PTR [edx+16]
	jl	$LN47@facet_scal@7
	mov	esi, edx
$LN12@facet_scal@7:

; 846  :       }
; 847  : 
; 848  :     /* hessian */
; 849  :     for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	edx, DWORD PTR [esi+16]
	add	DWORD PTR tv1980[ebp], 6
	inc	ecx
	cmp	ecx, edx
	jl	$LN49@facet_scal@7
$LN72@facet_scal@7:
	fstp	ST(2)
	fstp	ST(0)
	fstp	ST(0)
$LN98@facet_scal@7:
	mov	eax, DWORD PTR _m$[ebp]
	fstp	ST(0)
	inc	eax
	mov	DWORD PTR _m$[ebp], eax
	cmp	eax, DWORD PTR [esi+4]
	jl	$LL48@facet_scal@7
	pop	ebx
$LN40@facet_scal@7:

; 869  :           }
; 870  :   }
; 871  :   return value;
; 872  : } // end facet_scalar_integral_lagr_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _value$[ebp]
	pop	edi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN53@facet_scal@7:

; 846  :       }
; 847  : 
; 848  :     /* hessian */
; 849  :     for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	ebx, DWORD PTR _web+616
	jmp	SHORT $LN98@facet_scal@7
_facet_scalar_integral_lagr_hess ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DB@GHMKMFCI@facet_vector_integral?5method?5onl@ ; `string'
PUBLIC	??_C@_0DC@BILLIFBE@facet_vector_integral?5method?5onl@ ; `string'
PUBLIC	_facet_vector_integral_init
;	COMDAT ??_C@_0DB@GHMKMFCI@facet_vector_integral?5method?5onl@
CONST	SEGMENT
??_C@_0DB@GHMKMFCI@facet_vector_integral?5method?5onl@ DB 'facet_vector_i'
	DB	'ntegral method only for 3D space.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@BILLIFBE@facet_vector_integral?5method?5onl@
CONST	SEGMENT
??_C@_0DC@BILLIFBE@facet_vector_integral?5method?5onl@ DB 'facet_vector_i'
	DB	'ntegral method only for 2D facets.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _facet_vector_integral_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_facet_vector_integral_init PROC			; COMDAT

; 895  :   if ( web.dimension != 2 )

	cmp	DWORD PTR _web+620, 2
	je	SHORT $LN2@facet_vect

; 896  :      kb_error(1772,"facet_vector_integral method only for 2D facets.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DC@BILLIFBE@facet_vector_integral?5method?5onl@
	push	1772					; 000006ecH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN2@facet_vect:

; 897  : 
; 898  :   if ( SDIM != 3 )

	cmp	DWORD PTR _web+616, 3
	je	SHORT $LN1@facet_vect

; 899  :      kb_error(1773,"facet_vector_integral method only for 3D space.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DB@GHMKMFCI@facet_vector_integral?5method?5onl@
	push	1773					; 000006edH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@facet_vect:

; 900  : 
; 901  : } // end facet_vector_integral_init()

	ret	0
_facet_vector_integral_init ENDP
_TEXT	ENDS
PUBLIC	__real@bff0000000000000
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_facet_vector_integral_q
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _facet_vector_integral_q
_TEXT	SEGMENT
_value$ = -92						; size = 8
_sign$ = -84						; size = 8
_mi$ = -76						; size = 4
_tang$89722 = -72					; size = 4
_f_info$GSCopy$ = -68					; size = 4
tv337 = -64						; size = 4
tv349 = -60						; size = 4
_m$ = -56						; size = 4
_val$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_facet_vector_integral_q PROC				; COMDAT

; 1118 : { int m,j;

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1119 :   REAL value=0.0,val[MAXCOORD];
; 1120 :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	ecx, DWORD PTR _web+236
	fldz
	push	esi
	fst	QWORD PTR _value$[ebp]
	mov	esi, DWORD PTR _f_info$[ebp]
	mov	eax, DWORD PTR [esi]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	or	eax, ecx

; 1128 :     { int jj = (j+1)%SDIM; 

	mov	DWORD PTR _f_info$GSCopy$[ebp], esi
	je	SHORT $LN9@facet_vect@2

; 1119 :   REAL value=0.0,val[MAXCOORD];
; 1120 :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN32@facet_vect@2
$LN9@facet_vect@2:
	fld1
$LN32@facet_vect@2:

; 1121 :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [esi+8]
	fstp	QWORD PTR _sign$[ebp]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list

; 1122 : 
; 1123 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	xor	edx, edx
	mov	DWORD PTR _mi$[ebp], eax
	mov	DWORD PTR _m$[ebp], edx
	cmp	DWORD PTR _gauss2D_num, ecx
	jle	$LN4@facet_vect@2
	mov	ecx, DWORD PTR _web+616
	push	ebx
	push	edi
$LN15@facet_vect@2:

; 1124 :   {
; 1125 :     REAL **tang = f_info->sides[m];

	mov	edi, DWORD PTR [esi+1276]

; 1126 :     f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	fild	DWORD PTR _m$[ebp]
	mov	edi, DWORD PTR [edi+edx*4]
	mov	DWORD PTR _tang$89722[ebp], edi
	mov	edi, DWORD PTR [esi+1268]
	mov	edi, DWORD PTR [edi+edx*4]
	add	ecx, ecx
	fstp	QWORD PTR [edi+ecx*8]

; 1127 :     for ( j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR _web+616
	test	ecx, ecx
	jle	$LN5@facet_vect@2

; 1124 :   {
; 1125 :     REAL **tang = f_info->sides[m];

	lea	edx, DWORD PTR _val$[ebp]
	add	eax, 232				; 000000e8H
	mov	esi, 2
	mov	DWORD PTR tv337[ebp], edx
	mov	DWORD PTR tv349[ebp], eax
$LL30@facet_vect@2:

; 1128 :     { int jj = (j+1)%SDIM; 

	lea	eax, DWORD PTR [esi-1]
	fstp	ST(0)
	cdq
	idiv	ecx

; 1129 :       int jjj = (j+2)%SDIM; 

	mov	eax, esi

; 1130 :       val[j] = gauss2Dwt[m]*
; 1131 :          eval(mi->expr[j],f_info->gauss_pt[m],f_info->id,NULL);

	push	0
	mov	edi, edx
	cdq
	idiv	ecx
	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ebx, edx
	mov	edx, DWORD PTR [eax+1268]
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR tv349[ebp]
	mov	eax, DWORD PTR [edx]
	push	ecx
	push	eax
	call	_eval
	mov	ecx, DWORD PTR _gauss2Dwt
	mov	edx, DWORD PTR _m$[ebp]
	fmul	QWORD PTR [ecx+edx*8]

; 1132 :       value += val[j]*(tang[0][jj]*tang[1][jjj] - tang[0][jjj]*tang[1][jj]);

	mov	ecx, DWORD PTR _tang$89722[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR tv337[ebp]
	mov	ecx, DWORD PTR [ecx]
	fst	QWORD PTR [edx]
	fld	QWORD PTR [ecx+edi*8]
	add	DWORD PTR tv349[ebp], 4
	fmul	QWORD PTR [eax+ebx*8]
	inc	esi
	fld	QWORD PTR [eax+edi*8]
	add	edx, 8
	fmul	QWORD PTR [ecx+ebx*8]
	mov	ecx, DWORD PTR _web+616
	lea	eax, DWORD PTR [esi-2]
	add	esp, 16					; 00000010H
	fsubp	ST(1), ST(0)
	mov	DWORD PTR tv337[ebp], edx
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR _value$[ebp]
	fst	QWORD PTR _value$[ebp]
	cmp	eax, ecx
	jl	SHORT $LL30@facet_vect@2

; 1127 :     for ( j = 0 ; j < SDIM ; j++ )

	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _mi$[ebp]
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
$LN5@facet_vect@2:

; 1122 : 
; 1123 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	inc	edx
	mov	DWORD PTR _m$[ebp], edx
	cmp	edx, DWORD PTR _gauss2D_num
	jl	$LN15@facet_vect@2
	pop	edi
	pop	ebx
$LN4@facet_vect@2:

; 1133 :     }
; 1134 :   }
; 1135 :   return sign*value/2;  /* 2 is triangle factor */

	fmul	QWORD PTR _sign$[ebp]

; 1136 : } // end facet_vector_integral_q()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	pop	esi
	fmul	QWORD PTR __real@3fe0000000000000
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_vector_integral_q ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_facet_vector_integral_q_grad
; Function compile flags: /Ogtp
;	COMDAT _facet_vector_integral_q_grad
_TEXT	SEGMENT
tv395 = -140						; size = 8
_wt$89753 = -132					; size = 8
_value$ = -124						; size = 8
tv705 = -116						; size = 4
tv494 = -112						; size = 4
_val$ = -108						; size = 8
_gpp$89752 = -100					; size = 4
_mi$ = -96						; size = 4
_tang$89754 = -92					; size = 4
tv448 = -88						; size = 4
tv772 = -84						; size = 4
tv720 = -80						; size = 4
tv844 = -76						; size = 4
tv818 = -72						; size = 4
tv647 = -68						; size = 4
tv645 = -64						; size = 4
_m$ = -60						; size = 4
_f_info$GSCopy$ = -56					; size = 4
_derivs$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_facet_vector_integral_q_grad PROC			; COMDAT

; 1148 : { int m,i,j,k;

	push	ebp
	mov	ebp, esp
	sub	esp, 140				; 0000008cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _f_info$[ebp]

; 1149 :   REAL value = 0.0;

	fldz

; 1150 :   REAL val;
; 1151 :   REAL derivs[MAXCOORD];
; 1152 :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	eax, DWORD PTR [ecx]
	fld	ST(0)
	mov	edx, DWORD PTR _web+236
	fst	QWORD PTR _value$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	edx, edx
	or	eax, edx

; 1170 : 
; 1171 :        for ( k = 0 ; k < FACET_CTRL ; k++ )

	mov	DWORD PTR _f_info$GSCopy$[ebp], ecx
	je	SHORT $LN21@facet_vect@3

; 1150 :   REAL val;
; 1151 :   REAL derivs[MAXCOORD];
; 1152 :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN22@facet_vect@3
$LN21@facet_vect@3:
	fld1
$LN22@facet_vect@3:

; 1153 :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [ecx+8]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list
	push	ebx
	mov	ebx, DWORD PTR _web+616
	push	esi
	push	edi
	mov	DWORD PTR _mi$[ebp], eax
	xor	esi, esi
$LN18@facet_vect@3:

; 1156 :      for ( j = 0 ; j < SDIM ; j++ ) 

	xor	edx, edx
	test	ebx, ebx
	jle	SHORT $LN17@facet_vect@3
$LN47@facet_vect@3:

; 1157 :         f_info->grad[k][j] = 0.0;

	mov	edi, DWORD PTR [ecx+1336]
	fxch	ST(2)
	mov	edi, DWORD PTR [esi+edi]
	fst	QWORD PTR [edi+edx*8]
	mov	ebx, DWORD PTR _web+616
	inc	edx
	fxch	ST(2)
	cmp	edx, ebx
	jl	SHORT $LN47@facet_vect@3
$LN17@facet_vect@3:

; 1154 : 
; 1155 :   for ( k = 0 ; k < FACET_CTRL ; k++ )

	add	esi, 4
	cmp	esi, 24					; 00000018H
	jl	SHORT $LN18@facet_vect@3

; 1158 : 
; 1159 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	xor	edx, edx
	fstp	ST(2)
	mov	DWORD PTR _m$[ebp], edx
	cmp	DWORD PTR _gauss2D_num, edx
	jle	$LN51@facet_vect@3
	fxch	ST(1)
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR tv395[ebp]
$LN37@facet_vect@3:

; 1160 :   { 
; 1161 :      REAL **gpp = gpolypartial[m];

	mov	esi, DWORD PTR _gpolypartial
	mov	esi, DWORD PTR [esi+edx*4]
	mov	DWORD PTR _gpp$89752[ebp], esi

; 1162 :      REAL wt = sign*0.5*gauss2Dwt[m]; /* include triangle factor */

	mov	esi, DWORD PTR _gauss2Dwt
	fld	QWORD PTR [esi+edx*8]

; 1163 :      REAL **tang = f_info->sides[m];

	mov	esi, DWORD PTR [ecx+1276]
	fmul	QWORD PTR tv395[ebp]
	mov	esi, DWORD PTR [esi+edx*4]
	mov	DWORD PTR _tang$89754[ebp], esi

; 1164 :      f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	mov	esi, DWORD PTR [ecx+1268]
	mov	esi, DWORD PTR [esi+edx*4]
	fstp	QWORD PTR _wt$89753[ebp]
	fild	DWORD PTR _m$[ebp]
	add	ebx, ebx
	fstp	QWORD PTR [esi+ebx*8]

; 1165 :      for ( j = 0 ; j < SDIM ; j++ )

	mov	ebx, DWORD PTR _web+616
	test	ebx, ebx
	jle	$LN11@facet_vect@3

; 1160 :   { 
; 1161 :      REAL **gpp = gpolypartial[m];

	mov	edi, 2
	add	eax, 232				; 000000e8H
	mov	DWORD PTR tv818[ebp], edi
	mov	DWORD PTR tv844[ebp], eax
	jmp	SHORT $LN71@facet_vect@3
$LL69@facet_vect@3:
	mov	edi, DWORD PTR tv818[ebp]
$LN71@facet_vect@3:

; 1166 :      { int jj = (j+1)%SDIM; 

	lea	eax, DWORD PTR [edi-1]
	fstp	ST(0)
	cdq
	idiv	ebx

; 1167 :        int jjj = (j+2)%SDIM; 

	mov	eax, edi
	mov	esi, edx
	cdq
	idiv	ebx

; 1168 :        eval_all(mi->expr[j],f_info->gauss_pt[m],SDIM,&val,derivs,f_info->id);

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+1268]
	push	eax
	lea	eax, DWORD PTR _val$[ebp]
	mov	edi, edx
	lea	edx, DWORD PTR _derivs$[ebp]
	push	edx
	mov	edx, DWORD PTR _m$[ebp]
	push	eax
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR tv844[ebp]
	mov	edx, DWORD PTR [ecx]
	push	ebx
	push	eax
	push	edx
	call	_eval_all

; 1169 :        value += wt*val*(tang[0][jj]*tang[1][jjj] - tang[0][jjj]*tang[1][jj]);

	mov	edx, DWORD PTR _tang$89754[ebp]
	mov	eax, DWORD PTR [edx+4]
	fld	QWORD PTR [eax+edi*8]
	mov	ecx, DWORD PTR [edx]
	fmul	QWORD PTR [ecx+esi*8]
	mov	DWORD PTR tv448[ebp], eax
	fld	QWORD PTR [eax+esi*8]
	mov	eax, DWORD PTR _gpp$89752[ebp]
	fmul	QWORD PTR [ecx+edi*8]
	mov	edx, DWORD PTR [eax]

; 1170 : 
; 1171 :        for ( k = 0 ; k < FACET_CTRL ; k++ )

	mov	eax, DWORD PTR [eax+4]
	xor	ebx, ebx
	fsubp	ST(1), ST(0)
	add	esp, 24					; 00000018H
	fld	QWORD PTR _val$[ebp]
	sub	eax, edx
	fld	QWORD PTR _wt$89753[ebp]
	mov	DWORD PTR tv645[ebp], ebx
	fmul	ST(1), ST(0)
	mov	DWORD PTR tv647[ebp], ebx
	fxch	ST(2)
	mov	DWORD PTR tv720[ebp], edx
	mov	DWORD PTR tv772[ebp], eax
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR _value$[ebp]
	fst	QWORD PTR _value$[ebp]
$LN36@facet_vect@3:

; 1172 :         { 
; 1173 :           f_info->grad[k][jj] += wt*val
; 1174 :                 *(gpp[0][k]*tang[1][jjj] - tang[0][jjj]*gpp[1][k]);

	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [eax+1336]
	mov	ebx, DWORD PTR tv645[ebp]
	mov	eax, DWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv448[ebp]
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR tv772[ebp]
	fmul	QWORD PTR [edx]
	lea	eax, DWORD PTR [eax+esi*8]
	fld	QWORD PTR [ecx+edi*8]
	fmul	QWORD PTR [ebx+edx]

; 1175 :           f_info->grad[k][jjj] += wt*val
; 1176 :                 *(tang[0][jj]*gpp[1][k] - gpp[0][k]*tang[1][jj]);

	mov	ebx, DWORD PTR tv645[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _val$[ebp]
	fmul	ST(0), ST(3)
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [eax+1336]
	fld	QWORD PTR [ecx+esi*8]
	mov	eax, DWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv772[ebp]
	fmul	QWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR tv448[ebp]
	fld	QWORD PTR [ebx+esi*8]
	lea	eax, DWORD PTR [eax+edi*8]
	fmul	QWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _val$[ebp]
	fmul	ST(0), ST(3)
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]

; 1177 :           for ( i = 0 ; i < SDIM ; i++ )

	mov	ebx, DWORD PTR _web+616
	xor	eax, eax
	test	ebx, ebx
	jle	SHORT $LN5@facet_vect@3
	mov	edx, DWORD PTR _tang$89754[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	ebx, DWORD PTR _m$[ebp]
	mov	DWORD PTR tv494[ebp], edx
	mov	edx, DWORD PTR _gpoly
	mov	edx, DWORD PTR [edx+ebx*4]
	add	edx, DWORD PTR tv647[ebp]
	mov	DWORD PTR tv705[ebp], edx
$LN3@facet_vect@3:
	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [edx+1336]
	mov	ebx, DWORD PTR tv645[ebp]
	mov	edx, DWORD PTR [ebx+edx]

; 1178 :              f_info->grad[k][i] += wt*derivs[i]*gpoly[m][k]
; 1179 :                      *(tang[0][jj]*tang[1][jjj] - tang[0][jjj]*tang[1][jj]);

	mov	ebx, DWORD PTR tv494[ebp]
	fld	QWORD PTR [ebx+edi*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fmul	QWORD PTR [ecx+esi*8]
	inc	eax
	fld	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR tv705[ebp]
	fmul	QWORD PTR [ecx+edi*8]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _derivs$[ebp+eax*8-8]
	fmul	ST(0), ST(3)
	fmul	QWORD PTR [ebx]
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	mov	ebx, DWORD PTR _web+616
	cmp	eax, ebx
	jl	SHORT $LN3@facet_vect@3

; 1177 :           for ( i = 0 ; i < SDIM ; i++ )

	mov	edx, DWORD PTR tv720[ebp]
$LN5@facet_vect@3:

; 1170 : 
; 1171 :        for ( k = 0 ; k < FACET_CTRL ; k++ )

	add	DWORD PTR tv647[ebp], 8
	add	DWORD PTR tv645[ebp], 4
	add	edx, 8
	cmp	DWORD PTR tv647[ebp], 48		; 00000030H
	mov	DWORD PTR tv720[ebp], edx
	jl	$LN36@facet_vect@3
	mov	eax, DWORD PTR tv818[ebp]
	fstp	ST(1)
	add	DWORD PTR tv844[ebp], 4
	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	inc	eax
	mov	DWORD PTR tv818[ebp], eax
	add	eax, -2					; fffffffeH
	cmp	eax, ebx
	jl	$LL69@facet_vect@3

; 1165 :      for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR _mi$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
$LN11@facet_vect@3:

; 1158 : 
; 1159 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	inc	edx
	mov	DWORD PTR _m$[ebp], edx
	cmp	edx, DWORD PTR _gauss2D_num
	jl	$LN37@facet_vect@3
	pop	edi
	pop	esi
	pop	ebx

; 1180 :         }
; 1181 :      }
; 1182 :   }
; 1183 : 
; 1184 :   return value;
; 1185 : } // end facet_vector_integral_q_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN51@facet_vect@3:
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(1)
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_vector_integral_q_grad ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_facet_vector_integral_q_hess
; Function compile flags: /Ogtp
;	COMDAT _facet_vector_integral_q_hess
_TEXT	SEGMENT
_secondqXvS$ = -496					; size = 24
_wt$89790 = -472					; size = 8
tv793 = -464						; size = 8
tv910 = -456						; size = 4
tv1075 = -452						; size = 4
_mi$ = -448						; size = 4
tv2131 = -444						; size = 4
tv1059 = -440						; size = 4
tv1065 = -436						; size = 4
_value$ = -432						; size = 8
_second$ = -424						; size = 4
tv855 = -420						; size = 4
_val$ = -416						; size = 8
tv1947 = -408						; size = 4
tv2328 = -404						; size = 4
tv2354 = -400						; size = 4
_gpp$89789 = -396					; size = 4
_tang$89791 = -392					; size = 4
tv1103 = -388						; size = 4
tv992 = -388						; size = 4
_m$ = -384						; size = 4
tv1789 = -380						; size = 4
tv1751 = -380						; size = 4
tv1324 = -380						; size = 4
tv2112 = -376						; size = 4
tv2058 = -376						; size = 4
tv2037 = -376						; size = 4
tv899 = -376						; size = 4
tv2020 = -372						; size = 4
tv1266 = -372						; size = 4
tv1685 = -368						; size = 4
tv1339 = -368						; size = 4
tv1850 = -364						; size = 4
tv851 = -364						; size = 4
tv1683 = -360						; size = 4
tv2066 = -356						; size = 4
tv1391 = -356						; size = 4
_i$ = -356						; size = 4
tv2012 = -352						; size = 4
_f_info$GSCopy$ = -348					; size = 4
tv2014 = -344						; size = 4
tv1264 = -344						; size = 4
_secondxJ$ = -340					; size = 288
_derivs$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_facet_vector_integral_q_hess PROC			; COMDAT

; 1196 : { int m,i,j,k,ii,kk;

	push	ebp
	mov	ebp, esp
	sub	esp, 496				; 000001f0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1197 :   REAL value = 0.0;

	fldz
	push	esi
	mov	esi, DWORD PTR _f_info$[ebp]
	fstp	QWORD PTR _value$[ebp]

; 1198 :   REAL val;
; 1199 :   REAL derivs[MAXCOORD];
; 1200 :   MAT2D(second,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	eax, DWORD PTR _secondxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _secondqXvS$[ebp]
	push	ecx
	mov	DWORD PTR _f_info$GSCopy$[ebp], esi
	call	_mat2d_setup

; 1201 :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR _second$[ebp], eax
	mov	eax, DWORD PTR _web+236
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	add	esp, 16					; 00000010H
	or	eax, ecx
	je	SHORT $LN30@facet_vect@4
	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN31@facet_vect@4
$LN30@facet_vect@4:
	fld1
$LN31@facet_vect@4:

; 1202 :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [esi+8]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list

; 1203 : 
; 1204 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	xor	edx, edx
	mov	DWORD PTR _mi$[ebp], eax
	mov	DWORD PTR _m$[ebp], edx
	cmp	DWORD PTR _gauss2D_num, ecx
	jle	$LN62@facet_vect@4
	fmul	QWORD PTR __real@3fe0000000000000
	push	ebx
	push	edi
	fstp	QWORD PTR tv793[ebp]
	npad	7
$LL52@facet_vect@4:

; 1205 :    { REAL **gpp = gpolypartial[m];

	mov	ecx, DWORD PTR _gpolypartial
	mov	ecx, DWORD PTR [ecx+edx*4]

; 1206 :      REAL wt = sign*0.5*gauss2Dwt[m]; /* include triangle factor */
; 1207 :      REAL **tang = f_info->sides[m];
; 1208 :      f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	mov	edi, DWORD PTR _web+616
	mov	DWORD PTR _gpp$89789[ebp], ecx
	mov	ecx, DWORD PTR _gauss2Dwt
	fld	QWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR [esi+1276]
	fmul	QWORD PTR tv793[ebp]
	mov	ebx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [esi+1268]
	mov	ecx, DWORD PTR [ecx+edx*4]
	fstp	QWORD PTR _wt$89790[ebp]
	add	edi, edi
	fild	DWORD PTR _m$[ebp]
	mov	DWORD PTR _tang$89791[ebp], ebx
	fstp	QWORD PTR [ecx+edi*8]

; 1209 :      for ( j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR _web+616
	test	ecx, ecx
	jle	$LN26@facet_vect@4

; 1205 :    { REAL **gpp = gpolypartial[m];

	mov	edi, 2
	add	eax, 232				; 000000e8H
	mov	DWORD PTR tv2328[ebp], edi
	mov	DWORD PTR tv2354[ebp], eax
	jmp	SHORT $LN24@facet_vect@4
$LL55@facet_vect@4:
	mov	edi, DWORD PTR tv2328[ebp]
	mov	ebx, DWORD PTR _tang$89791[ebp]
	mov	ecx, DWORD PTR _web+616
$LN24@facet_vect@4:

; 1210 :      { int jj = (j+1)%SDIM; 

	lea	eax, DWORD PTR [edi-1]
	cdq
	idiv	ecx

; 1211 :        int jjj = (j+2)%SDIM; 

	mov	eax, edi
	mov	esi, edx
	cdq
	idiv	ecx

; 1212 :        eval_second(mi->expr[j],f_info->gauss_pt[m],SDIM,
; 1213 :                &val, derivs,second,f_info->id);

	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edi, edx
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+1268]
	push	edx
	mov	edx, DWORD PTR _second$[ebp]
	push	edx
	lea	edx, DWORD PTR _derivs$[ebp]
	push	edx
	lea	edx, DWORD PTR _val$[ebp]
	push	edx
	push	ecx
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR tv2354[ebp]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	ecx
	call	_eval_second

; 1214 :        value += wt*val*(tang[0][jj]*tang[1][jjj] - tang[0][jjj]*tang[1][jj]);

	mov	ecx, DWORD PTR [ebx+4]
	fld	QWORD PTR [ecx+edi*8]
	mov	eax, DWORD PTR [ebx]
	fmul	QWORD PTR [eax+esi*8]
	mov	DWORD PTR tv851[ebp], ecx
	fld	QWORD PTR [ecx+esi*8]
	mov	ecx, DWORD PTR _gpp$89789[ebp]
	fmul	QWORD PTR [eax+edi*8]
	mov	edx, DWORD PTR [ecx]

; 1215 : 
; 1216 :        for ( k = 0 ; k < FACET_CTRL ; k++ )

	mov	ecx, DWORD PTR [ecx+4]
	xor	ebx, ebx
	fsubp	ST(1), ST(0)
	add	esp, 28					; 0000001cH
	fld	QWORD PTR _val$[ebp]
	sub	ecx, edx
	fld	QWORD PTR _wt$89790[ebp]
	mov	DWORD PTR tv855[ebp], edx
	fmul	ST(1), ST(0)
	mov	DWORD PTR tv1264[ebp], ebx
	fxch	ST(2)
	mov	DWORD PTR tv1266[ebp], ebx
	mov	DWORD PTR tv1339[ebp], edx
	fmulp	ST(1), ST(0)
	mov	DWORD PTR tv1391[ebp], ecx
	fadd	QWORD PTR _value$[ebp]
	fstp	QWORD PTR _value$[ebp]
$LN51@facet_vect@4:

; 1217 :        { f_info->grad[k][jj] += wt*val
; 1218 :                 *(gpp[0][k]*tang[1][jjj] - tang[0][jjj]*gpp[1][k]);

	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	fld	QWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+1336]
	mov	ebx, DWORD PTR tv1264[ebp]
	mov	ecx, DWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR tv851[ebp]
	fmul	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR tv1391[ebp]
	fld	QWORD PTR [eax+edi*8]
	lea	ecx, DWORD PTR [ecx+esi*8]
	fmul	QWORD PTR [ebx+edx]

; 1219 :          f_info->grad[k][jjj] += wt*val
; 1220 :                 *(tang[0][jj]*gpp[1][k] - gpp[0][k]*tang[1][jj]);

	mov	ebx, DWORD PTR tv1264[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _val$[ebp]
	fmul	ST(0), ST(2)
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [ecx+1336]
	fld	QWORD PTR [eax+esi*8]
	mov	ecx, DWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR tv1391[ebp]
	fmul	QWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR tv851[ebp]
	fld	QWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+edi*8]
	fmul	QWORD PTR [ebx+esi*8]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _val$[ebp]
	fmul	ST(0), ST(2)
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]

; 1221 :          for ( i = 0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	cmp	DWORD PTR _web+616, ecx
	jle	SHORT $LN20@facet_vect@4
	mov	edx, DWORD PTR _tang$89791[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	ebx, DWORD PTR _m$[ebp]
	mov	DWORD PTR tv899[ebp], edx
	mov	edx, DWORD PTR _gpoly
	mov	edx, DWORD PTR [edx+ebx*4]
	add	edx, DWORD PTR tv1266[ebp]
	mov	DWORD PTR tv1324[ebp], edx
$LN59@facet_vect@4:
	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]

; 1222 :              f_info->grad[k][i] += wt*derivs[i]*gpoly[m][k]
; 1223 :                      *(tang[0][jj]*tang[1][jjj] - tang[0][jjj]*tang[1][jj]);

	fld	QWORD PTR [eax+esi*8]
	mov	edx, DWORD PTR [edx+1336]
	mov	ebx, DWORD PTR tv1264[ebp]
	mov	edx, DWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR tv899[ebp]
	fmul	QWORD PTR [ebx+edi*8]
	lea	edx, DWORD PTR [edx+ecx*8]
	fld	QWORD PTR [eax+edi*8]
	inc	ecx
	fmul	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR tv1324[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _derivs$[ebp+ecx*8-8]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ebx]
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	cmp	ecx, DWORD PTR _web+616
	jl	SHORT $LN59@facet_vect@4

; 1221 :          for ( i = 0 ; i < SDIM ; i++ )

	mov	edx, DWORD PTR tv1339[ebp]
$LN20@facet_vect@4:

; 1215 : 
; 1216 :        for ( k = 0 ; k < FACET_CTRL ; k++ )

	mov	ecx, DWORD PTR tv1266[ebp]
	add	DWORD PTR tv1264[ebp], 4
	add	ecx, 8
	add	edx, 8
	mov	DWORD PTR tv1266[ebp], ecx
	mov	DWORD PTR tv1339[ebp], edx
	cmp	ecx, 48					; 00000030H
	jl	$LN51@facet_vect@4

; 1224 :        }
; 1225 : 
; 1226 :         /* hessian */
; 1227 :         for ( k = 0 ; k < FACET_CTRL ; k++ )

	mov	ecx, DWORD PTR _gpp$89789[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	xor	edx, edx
	sub	ecx, DWORD PTR tv855[ebp]
	mov	DWORD PTR tv2012[ebp], edx
	mov	DWORD PTR tv2014[ebp], edx
	mov	DWORD PTR tv1947[ebp], ecx
	jmp	SHORT $LN15@facet_vect@4
$LN56@facet_vect@4:
	xor	edx, edx
$LN15@facet_vect@4:
	mov	ebx, DWORD PTR tv855[ebp]
	mov	ecx, DWORD PTR tv2014[ebp]
	add	ecx, ebx
	mov	DWORD PTR tv2020[ebp], ecx

; 1228 :           for ( kk = 0 ; kk < FACET_CTRL ; kk++ )

	mov	DWORD PTR tv1683[ebp], edx
	mov	DWORD PTR tv1685[ebp], edx
	mov	DWORD PTR tv1850[ebp], ebx
$LN57@facet_vect@4:

; 1229 :           { f_info->hess[k][kk][jj][jjj] += wt*val
; 1230 :                  *(gpp[0][k]*gpp[1][kk] - gpp[0][kk]*gpp[1][k]);

	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [edx+1340]
	mov	edx, DWORD PTR tv2012[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	mov	edx, DWORD PTR tv1683[ebp]
	mov	ecx, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR [ecx+esi*4]
	lea	ecx, DWORD PTR [edx+edi*8]
	mov	edx, DWORD PTR tv1947[ebp]
	fld	QWORD PTR [edx+ebx]
	mov	DWORD PTR tv2037[ebp], ecx
	mov	ecx, DWORD PTR tv2020[ebp]
	fmul	QWORD PTR [ecx]
	fld	QWORD PTR [ecx+edx]
	mov	ecx, DWORD PTR tv2037[ebp]
	fmul	QWORD PTR [ebx]

; 1231 :              f_info->hess[k][kk][jjj][jj] += wt*val
; 1232 :                  *(gpp[0][kk]*gpp[1][k] - gpp[0][k]*gpp[1][kk]);

	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _val$[ebp]
	fmul	ST(0), ST(2)
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+1340]
	mov	edx, DWORD PTR tv2012[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	mov	edx, DWORD PTR tv1683[ebp]
	mov	ecx, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR [ecx+edi*4]
	lea	ecx, DWORD PTR [edx+esi*8]
	mov	edx, DWORD PTR tv1947[ebp]
	mov	DWORD PTR tv2058[ebp], ecx
	mov	ecx, DWORD PTR tv2020[ebp]
	fld	QWORD PTR [ecx+edx]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [edx+ebx]
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv2058[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _val$[ebp]
	fmul	ST(0), ST(2)
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]

; 1233 :              for ( ii = 0 ; ii < SDIM ; ii++ )

	xor	ecx, ecx
	cmp	DWORD PTR _web+616, ecx
	jle	$LN7@facet_vect@4
	mov	edx, DWORD PTR _tang$89791[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	ebx, DWORD PTR tv2014[ebp]
	mov	DWORD PTR tv992[ebp], edx
	mov	edx, DWORD PTR _gpp$89789[ebp]
	mov	edx, DWORD PTR [edx+4]
	add	ebx, edx
	mov	edx, DWORD PTR _gpoly
	mov	DWORD PTR tv2066[ebp], ebx
	mov	ebx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	add	edx, DWORD PTR tv1685[ebp]
	mov	DWORD PTR tv1751[ebp], edx
$LN9@facet_vect@4:
	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [edx+1340]
	mov	ebx, DWORD PTR tv2012[ebp]
	mov	edx, DWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR tv1683[ebp]
	mov	edx, DWORD PTR [edx+ebx]

; 1234 :              { f_info->hess[k][kk][jj][ii] += wt*derivs[ii]*gpoly[m][kk]
; 1235 :                   *(gpp[0][k]*tang[1][jjj] - tang[0][jjj]*gpp[1][k]);

	mov	ebx, DWORD PTR tv992[ebp]
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR tv2020[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv2066[ebp]
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv1751[ebp]
	fmul	QWORD PTR [eax+edi*8]
	mov	edx, DWORD PTR [edx+esi*4]
	lea	edx, DWORD PTR [edx+ecx*8]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _derivs$[ebp+ecx*8]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv2012[ebp]
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [edx+1340]

; 1236 :                 f_info->hess[k][kk][jjj][ii] += wt*derivs[ii]*gpoly[m][kk]
; 1237 :                   *(tang[0][jj]*gpp[1][k] - gpp[0][k]*tang[1][jj]);

	fld	QWORD PTR [eax+esi*8]
	mov	edx, DWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR tv1683[ebp]
	mov	edx, DWORD PTR [edx+ebx]
	mov	ebx, DWORD PTR tv2066[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv992[ebp]
	fld	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR tv2020[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv1751[ebp]
	mov	edx, DWORD PTR [edx+edi*4]
	lea	edx, DWORD PTR [edx+ecx*8]
	fsubp	ST(1), ST(0)
	inc	ecx
	fld	QWORD PTR _derivs$[ebp+ecx*8-8]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ebx]
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	cmp	ecx, DWORD PTR _web+616
	jl	$LN9@facet_vect@4

; 1233 :              for ( ii = 0 ; ii < SDIM ; ii++ )

	mov	ebx, DWORD PTR tv1850[ebp]
$LN7@facet_vect@4:

; 1238 :              }
; 1239 :              for ( i = 0 ; i < SDIM ; i++ )

	xor	edx, edx
	mov	DWORD PTR _i$[ebp], edx
	cmp	DWORD PTR _web+616, edx
	jle	$LN11@facet_vect@4

; 1203 : 
; 1204 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	mov	ecx, DWORD PTR _tang$89791[ebp]
	mov	ecx, DWORD PTR [ecx+4]

; 1242 :                   f_info->hess[k][kk][i][ii] += 
; 1243 :                       wt*second[i][ii]*gpoly[m][k]*gpoly[m][kk]
; 1244 :                      *(tang[0][jj]*tang[1][jjj] - tang[0][jjj]*tang[1][jj]);

	mov	ebx, DWORD PTR tv1685[ebp]
	mov	DWORD PTR tv1103[ebp], ecx
	mov	ecx, DWORD PTR _gpp$89789[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	add	ebx, ecx
	mov	ecx, DWORD PTR _gpoly
	mov	DWORD PTR tv1789[ebp], ebx
	mov	ebx, DWORD PTR _m$[ebp]
	lea	ecx, DWORD PTR [ecx+ebx*4]
	mov	ebx, DWORD PTR tv2014[ebp]
	mov	DWORD PTR tv910[ebp], ecx
	mov	ecx, DWORD PTR [ecx]
	add	ebx, ecx
	mov	DWORD PTR tv2112[ebp], ebx
$LN6@facet_vect@4:

; 1240 :              {
; 1241 :                 for ( ii = 0 ; ii < SDIM ; ii++ )

	xor	ecx, ecx
	cmp	DWORD PTR _web+616, ecx
	jle	$LN54@facet_vect@4
	mov	ebx, DWORD PTR _second$[ebp]
	mov	edx, DWORD PTR [ebx+edx*4]
	mov	DWORD PTR tv1059[ebp], edx
	mov	edx, DWORD PTR tv910[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR tv1065[ebp], edx
	mov	edx, DWORD PTR _tang$89791[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR tv1075[ebp], edx
$LN3@facet_vect@4:
	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]

; 1242 :                   f_info->hess[k][kk][i][ii] += 
; 1243 :                       wt*second[i][ii]*gpoly[m][k]*gpoly[m][kk]
; 1244 :                      *(tang[0][jj]*tang[1][jjj] - tang[0][jjj]*tang[1][jj]);

	fld	QWORD PTR [eax+esi*8]
	mov	edx, DWORD PTR [edx+1340]
	mov	ebx, DWORD PTR tv2012[ebp]
	mov	edx, DWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR tv1683[ebp]
	mov	edx, DWORD PTR [edx+ebx]
	mov	ebx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	ebx, DWORD PTR tv2014[ebp]
	lea	edx, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR tv2131[ebp], edx
	mov	edx, DWORD PTR tv1075[ebp]
	fmul	QWORD PTR [edx+edi*8]
	inc	ecx
	fld	QWORD PTR [eax+edi*8]
	fmul	QWORD PTR [edx+esi*8]
	mov	edx, DWORD PTR tv1059[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx+ecx*8-8]
	mov	edx, DWORD PTR tv1065[ebp]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR tv1685[ebp]
	fmul	QWORD PTR [ebx+edx]
	mov	edx, DWORD PTR tv2131[ebp]
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	cmp	ecx, DWORD PTR _web+616
	jl	SHORT $LN3@facet_vect@4

; 1240 :              {
; 1241 :                 for ( ii = 0 ; ii < SDIM ; ii++ )

	mov	edx, DWORD PTR _i$[ebp]
$LN54@facet_vect@4:

; 1245 :                 f_info->hess[k][kk][i][jj] += wt*derivs[i]*gpoly[m][k]
; 1246 :                      *(gpp[0][kk]*tang[1][jjj] - tang[0][jjj]*gpp[1][kk]);

	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [ecx+1340]
	mov	ebx, DWORD PTR tv2012[ebp]
	mov	ecx, DWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR tv1683[ebp]
	mov	ecx, DWORD PTR [ecx+ebx]
	mov	ebx, DWORD PTR tv1850[ebp]
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv1103[ebp]
	fmul	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR tv1789[ebp]
	fld	QWORD PTR [eax+edi*8]
	mov	ecx, DWORD PTR [ecx+edx*4]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv2112[ebp]
	lea	ecx, DWORD PTR [ecx+esi*8]
	inc	edx
	fsubp	ST(1), ST(0)
	mov	DWORD PTR _i$[ebp], edx
	fld	QWORD PTR _derivs$[ebp+edx*8-8]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ebx]

; 1247 :                 f_info->hess[k][kk][i][jjj] += wt*derivs[i]*gpoly[m][k]
; 1248 :                      *(tang[0][jj]*gpp[1][kk] - gpp[0][kk]*tang[1][jj]);

	mov	ebx, DWORD PTR tv2012[ebp]
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [ecx+1340]
	fld	QWORD PTR [eax+esi*8]
	mov	ecx, DWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR tv1683[ebp]
	mov	ecx, DWORD PTR [ecx+ebx]
	mov	ebx, DWORD PTR tv1789[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv1850[ebp]
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv1103[ebp]
	fmul	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR tv2112[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4-4]
	lea	ecx, DWORD PTR [ecx+edi*8]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _derivs$[ebp+edx*8-8]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ebx]
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	edx, DWORD PTR _web+616
	jl	$LN6@facet_vect@4

; 1238 :              }
; 1239 :              for ( i = 0 ; i < SDIM ; i++ )

	mov	ebx, DWORD PTR tv1850[ebp]
$LN11@facet_vect@4:

; 1228 :           for ( kk = 0 ; kk < FACET_CTRL ; kk++ )

	mov	ecx, DWORD PTR tv1685[ebp]
	add	DWORD PTR tv1683[ebp], 4
	add	ecx, 8
	add	ebx, 8
	mov	DWORD PTR tv1685[ebp], ecx
	mov	DWORD PTR tv1850[ebp], ebx
	cmp	ecx, 48					; 00000030H
	jl	$LN57@facet_vect@4

; 1224 :        }
; 1225 : 
; 1226 :         /* hessian */
; 1227 :         for ( k = 0 ; k < FACET_CTRL ; k++ )

	mov	ecx, DWORD PTR tv2014[ebp]
	add	DWORD PTR tv2012[ebp], 4
	add	ecx, 8
	mov	DWORD PTR tv2014[ebp], ecx
	cmp	ecx, 48					; 00000030H
	jl	$LN56@facet_vect@4
	mov	eax, DWORD PTR tv2328[ebp]
	fstp	ST(0)
	add	DWORD PTR tv2354[ebp], 4
	inc	eax
	mov	DWORD PTR tv2328[ebp], eax
	add	eax, -2					; fffffffeH
	cmp	eax, DWORD PTR _web+616
	jl	$LL55@facet_vect@4

; 1209 :      for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR _mi$[ebp]
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
$LN26@facet_vect@4:

; 1203 : 
; 1204 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	inc	edx
	mov	DWORD PTR _m$[ebp], edx
	cmp	edx, DWORD PTR _gauss2D_num
	jl	$LL52@facet_vect@4

; 1249 :              }
; 1250 :           }
; 1251 :      }
; 1252 :   }
; 1253 : 
; 1254 :   return value;

	fld	QWORD PTR _value$[ebp]
	pop	edi
	pop	ebx
	pop	esi

; 1255 : } // end facet_vector_integral_q_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN62@facet_vect@4:
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(0)
	fld	QWORD PTR _value$[ebp]
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_vector_integral_q_hess ENDP
_TEXT	ENDS
PUBLIC	__real@c00921fb54442d18
PUBLIC	__$ArrayPad$
PUBLIC	_spherical_area_value
EXTRN	__CIacos:PROC
;	COMDAT __real@c00921fb54442d18
CONST	SEGMENT
__real@c00921fb54442d18 DQ 0c00921fb54442d18r	; -3.14159
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _spherical_area_value
_TEXT	SEGMENT
tv396 = -60						; size = 8
tv394 = -52						; size = 8
_area$ = -52						; size = 8
_a$ = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_spherical_area_value PROC				; COMDAT

; 1266 : { int i;

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1267 :   REAL area;
; 1268 :   REAL a[FACET_EDGES+2];  /* squares of side lengths */
; 1269 :   REAL *b;
; 1270 :  
; 1271 :   /* Value done by angle excess */
; 1272 :   a[0] = SDIM_dot(f_info->sides[0][0],f_info->sides[0][0]);

	mov	edx, DWORD PTR _web+616
	push	esi
	mov	esi, DWORD PTR _f_info$[ebp]
	mov	eax, DWORD PTR [esi+1276]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	push	edi
	push	edx
	push	eax
	push	eax
	call	_dot
	fstp	QWORD PTR _a$[ebp]

; 1273 :   a[2] = SDIM_dot(f_info->sides[0][1],f_info->sides[0][1]);

	mov	eax, DWORD PTR [esi+1276]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR [ecx+4]
	push	edx
	push	eax
	push	eax
	call	_dot
	fst	QWORD PTR _a$[ebp+16]

; 1274 :   a[1] = a[0] + a[2] - 2*SDIM_dot(f_info->sides[0][0],f_info->sides[0][1]);

	mov	eax, DWORD PTR [esi+1276]
	fadd	QWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR [eax+4]
	fstp	QWORD PTR tv394[ebp]
	mov	eax, DWORD PTR [eax]
	push	ecx
	push	edx
	push	eax
	call	_dot
	fadd	ST(0), ST(0)
	add	esp, 36					; 00000024H

; 1278 :   { REAL v = sqrt(b[1]*b[2]*(1-b[1]/4)*(1-b[2]/4));
; 1279 :      REAL w = (b[1]+b[2]-b[0]-b[1]*b[2]/2);

	lea	esi, DWORD PTR _a$[ebp+16]
	fsubr	QWORD PTR tv394[ebp]
	mov	edi, 3
	fst	QWORD PTR _a$[ebp+8]
	fld	QWORD PTR _a$[ebp]
	fstp	QWORD PTR _a$[ebp+24]
	fstp	QWORD PTR _a$[ebp+32]
	fld	QWORD PTR __real@c00921fb54442d18
	fstp	QWORD PTR _area$[ebp]
	jmp	SHORT $LN13@spherical_
	npad	12
$LL11@spherical_:

; 1275 :   a[FACET_EDGES] = a[0];
; 1276 :   a[FACET_EDGES+1] = a[1];
; 1277 :   for ( area = -M_PI, i = 0, b = a ; i < FACET_VERTS ; i++,b++ )

	fstp	ST(0)
$LN13@spherical_:
	fld	QWORD PTR __real@3fe0000000000000
	fld	QWORD PTR __real@3fd0000000000000
	fld1

; 1278 :   { REAL v = sqrt(b[1]*b[2]*(1-b[1]/4)*(1-b[2]/4));
; 1279 :      REAL w = (b[1]+b[2]-b[0]-b[1]*b[2]/2);

	fld	QWORD PTR [esi]
	fmul	QWORD PTR [esi-8]
	fld	QWORD PTR [esi]
	fadd	QWORD PTR [esi-8]
	fsub	QWORD PTR [esi-16]
	fld	ST(1)
	fmul	ST(0), ST(5)
	fsubp	ST(1), ST(0)

; 1280 :      REAL u = w/2/v;

	fmulp	ST(4), ST(0)
	fxch	ST(3)
	fstp	QWORD PTR tv396[ebp]
	fld	QWORD PTR [esi-8]
	fmul	ST(0), ST(2)
	fsubr	ST(0), ST(1)
	fmulp	ST(3), ST(0)
	fld	QWORD PTR [esi]
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	call	__CIsqrt
	fdivr	QWORD PTR tv396[ebp]

; 1281 :      area += acos(u);

	call	__CIacos
	fadd	QWORD PTR _area$[ebp]
	add	esi, 8
	dec	edi
	fst	QWORD PTR _area$[ebp]
	jne	SHORT $LL11@spherical_

; 1282 :   }
; 1283 :   return area;
; 1284 : } // end spherical_area_value()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_spherical_area_value ENDP
_TEXT	ENDS
PUBLIC	__real@bfe0000000000000
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_spherical_area_grad
;	COMDAT __real@bfe0000000000000
CONST	SEGMENT
__real@bfe0000000000000 DQ 0bfe0000000000000r	; -0.5
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _spherical_area_grad
_TEXT	SEGMENT
_dudb0$89849 = -160					; size = 8
_dudb1$89850 = -152					; size = 8
_dudb2$89851 = -144					; size = 8
_x$ = -136						; size = 20
tv1152 = -116						; size = 8
tv1286 = -112						; size = 4
_f_info$GSCopy$ = -108					; size = 4
tv621 = -104						; size = 4
tv1137 = -100						; size = 4
tv419 = -96						; size = 4
tv601 = -92						; size = 8
tv1513 = -88						; size = 4
tv690 = -88						; size = 4
tv1569 = -84						; size = 8
_area$ = -84						; size = 8
tv1431 = -76						; size = 8
tv1521 = -72						; size = 4
tv1270 = -72						; size = 4
tv1425 = -68						; size = 8
_u$89848 = -68						; size = 8
tv1367 = -64						; size = 4
tv1554 = -60						; size = 4
tv660 = -60						; size = 4
_j$ = -56						; size = 4
tv1133 = -52						; size = 4
tv1131 = -48						; size = 4
_a$ = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_spherical_area_grad PROC				; COMDAT

; 1288 : { int i,j;

	push	ebp
	mov	ebp, esp
	sub	esp, 160				; 000000a0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1289 :   REAL area;
; 1290 :   REAL a[FACET_EDGES+2];  /* squares of side lengths */
; 1291 :   REAL *b;
; 1292 :   REAL *x[FACET_VERTS+2];
; 1293 :  
; 1294 :   /* Value done by angle excess */
; 1295 :   a[0] = SDIM_dot(f_info->sides[0][0],f_info->sides[0][0]);

	mov	edx, DWORD PTR _web+616
	push	ebx
	mov	ebx, DWORD PTR _f_info$[ebp]
	mov	eax, DWORD PTR [ebx+1276]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	push	esi
	push	edi
	push	edx
	push	eax
	push	eax

; 1304 :   { REAL v = sqrt(b[1]*b[2]*(1-b[1]/4)*(1-b[2]/4));

	mov	DWORD PTR _f_info$GSCopy$[ebp], ebx
	call	_dot
	fstp	QWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [ebx+1276]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR [ecx+4]
	push	edx
	push	eax
	push	eax
	call	_dot
	fst	QWORD PTR _a$[ebp+16]
	mov	eax, DWORD PTR [ebx+1276]
	fadd	QWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR [eax+4]
	fstp	QWORD PTR tv1569[ebp]
	mov	eax, DWORD PTR [eax]
	push	ecx
	push	edx
	push	eax
	call	_dot
	fadd	ST(0), ST(0)
	mov	eax, DWORD PTR [ebx+416]
	mov	ecx, DWORD PTR [ebx+420]
	fsubr	QWORD PTR tv1569[ebp]
	mov	edx, DWORD PTR [ebx+424]
	mov	edi, DWORD PTR _web+616
	lea	esi, DWORD PTR _a$[ebp+8]
	fst	QWORD PTR _a$[ebp+8]
	add	esp, 36					; 00000024H
	fld	QWORD PTR _a$[ebp]
	mov	DWORD PTR _x$[ebp], eax
	fstp	QWORD PTR _a$[ebp+24]
	mov	DWORD PTR _x$[ebp+4], ecx
	mov	DWORD PTR _x$[ebp+8], edx
	fstp	QWORD PTR _a$[ebp+32]
	mov	DWORD PTR _x$[ebp+12], eax
	fld	QWORD PTR __real@c00921fb54442d18
	mov	DWORD PTR _x$[ebp+16], ecx
	fstp	QWORD PTR _area$[ebp]
	mov	DWORD PTR tv1131[ebp], 2
	mov	DWORD PTR tv1133[ebp], 0
	mov	DWORD PTR tv1137[ebp], esi
	mov	DWORD PTR tv419[ebp], 3
	npad	7
$LL22@spherical_@2:

; 1296 :   a[2] = SDIM_dot(f_info->sides[0][1],f_info->sides[0][1]);
; 1297 :   a[1] = a[0] + a[2] - 2*SDIM_dot(f_info->sides[0][0],f_info->sides[0][1]);
; 1298 :   a[FACET_EDGES] = a[0];
; 1299 :   a[FACET_EDGES+1] = a[1];
; 1300 :   for ( i = 0 ; i < FACET_VERTS ; i++ ) x[i] = f_info->x[i];
; 1301 :   x[FACET_VERTS] = x[0];
; 1302 :   x[FACET_VERTS+1] = x[1];
; 1303 :   for ( area = -M_PI, i = 0, b = a ; i < FACET_VERTS ; i++,b++ )

	fld	QWORD PTR __real@3fd0000000000000
	fld1

; 1304 :   { REAL v = sqrt(b[1]*b[2]*(1-b[1]/4)*(1-b[2]/4));

	fld	QWORD PTR [esi]
	fmul	QWORD PTR [esi+8]
	fst	QWORD PTR tv1425[ebp]
	fld	QWORD PTR [esi]
	fmul	ST(0), ST(3)
	fsubr	ST(0), ST(2)
	fst	QWORD PTR tv1152[ebp]
	fld	QWORD PTR [esi+8]
	fmulp	ST(4), ST(0)
	fxch	ST(2)
	fsubrp	ST(3), ST(0)
	fxch	ST(2)
	fst	QWORD PTR tv1431[ebp]
	fxch	ST(2)
	fmulp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	call	__CIsqrt

; 1305 :     REAL w = (b[1]+b[2]-b[0]-b[1]*b[2]/2);

	fld	QWORD PTR [esi]
	fadd	QWORD PTR [esi+8]
	fsub	QWORD PTR [esi-8]
	fld	QWORD PTR tv1425[ebp]
	fld	ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(3)
	fsubrp	ST(1), ST(0)

; 1306 :     REAL u = w/2/v;

	fld	ST(0)
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR _u$89848[ebp]

; 1307 :     REAL dudb0 = -1/2./v;

	fld	QWORD PTR __real@bfe0000000000000
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR _dudb0$89849[ebp]

; 1308 :     REAL dudb1 = (1-b[2]/2)/2./v - w/4/v/v/v*(b[2]*(1-b[1]/4)*(1-b[2]/4)-b[1]*b[2]*(1./4)*(1-b[2]/4));

	fld	QWORD PTR __real@3fd0000000000000
	fmul	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR tv601[ebp]
	fld	QWORD PTR [esi+8]
	fmul	ST(0), ST(2)
	fld1
	fsubrp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(3)
	fld	QWORD PTR tv1152[ebp]
	fld	ST(0)
	fmul	QWORD PTR [esi+8]
	fld	QWORD PTR tv1431[ebp]
	fmul	ST(1), ST(0)
	fld	ST(4)
	fmul	ST(0), ST(1)
	fsubp	ST(2), ST(0)
	fld	QWORD PTR tv601[ebp]
	fmul	ST(2), ST(0)
	fxch	ST(4)
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _dudb1$89850[ebp]

; 1309 :     REAL dudb2 = (1-b[1]/2)/2./v - w/4/v/v/v*(b[1]*(1-b[1]/4)*(1-b[2]/4)-b[1]*b[2]*(1./4)*(1-b[1]/4));

	fld	QWORD PTR [esi]
	fmul	ST(0), ST(5)
	fld1
	fsubrp	ST(1), ST(0)
	fmulp	ST(5), ST(0)
	fxch	ST(4)
	fdivrp	ST(5), ST(0)
	fld	QWORD PTR [esi]
	fmul	ST(0), ST(1)
	fmulp	ST(4), ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(2)
	fsubrp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _dudb2$89851[ebp]

; 1310 :     area += acos(u);

	fld	QWORD PTR _u$89848[ebp]
	call	__CIacos
	fadd	QWORD PTR _area$[ebp]
	fstp	QWORD PTR _area$[ebp]

; 1311 :     for ( j = 0 ; j < SDIM ; j++ )

	mov	DWORD PTR _j$[ebp], 0
	test	edi, edi
	jle	$LN5@spherical_@2
	mov	eax, DWORD PTR [ebx+1336]
	fld	QWORD PTR _u$89848[ebp]
	mov	ecx, DWORD PTR tv1133[ebp]
	fmul	ST(0), ST(0)
	mov	esi, DWORD PTR [eax+ecx]
	fld1
	mov	DWORD PTR tv621[ebp], eax
	fsubrp	ST(1), ST(0)
	mov	DWORD PTR tv660[ebp], eax
	mov	eax, DWORD PTR tv1131[ebp]
	dec	eax
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	eax, DWORD PTR tv1131[ebp]
	mov	edi, edx
	mov	edx, DWORD PTR [ebx+1336]
	mov	DWORD PTR tv690[ebp], edx
	cdq
	idiv	ecx
	add	edi, edi
	add	edi, edi
	mov	ebx, edx
	add	ebx, ebx
	add	ebx, ebx
	call	__CIsqrt

; 1314 :        f_info->grad[(i+2)%3][j] += -1/sqrt(1-u*u)*2*(dudb1*(x[i+2][j]-x[i+1][j])+dudb2*(x[i+2][j]-x[i][j]));

	fdivr	QWORD PTR __real@4000000000000000
	mov	ecx, DWORD PTR tv1133[ebp]
	lea	edx, DWORD PTR _x$[ebp+ecx+8]
	mov	DWORD PTR tv1270[ebp], edx
	mov	edx, DWORD PTR tv621[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	sub	ecx, esi
	mov	DWORD PTR tv1286[ebp], ecx
	mov	ecx, DWORD PTR tv660[ebp]
	mov	ecx, DWORD PTR [ecx+edi]
	sub	ecx, esi
	mov	DWORD PTR tv1554[ebp], ecx
	mov	ecx, DWORD PTR tv690[ebp]
	mov	edi, DWORD PTR [ecx+edi]
	mov	ecx, DWORD PTR [ecx+ebx]
	sub	edi, esi
	sub	ecx, esi
	mov	DWORD PTR tv1513[ebp], edi
	mov	edi, DWORD PTR tv1270[ebp]
	mov	edx, DWORD PTR [edi]
	mov	DWORD PTR tv1367[ebp], ecx
	mov	ecx, DWORD PTR [edi-4]
	mov	edi, DWORD PTR [edi-8]
	sub	edi, esi
	mov	DWORD PTR tv1521[ebp], edi
	mov	edi, DWORD PTR tv621[ebp]
	mov	ebx, DWORD PTR [edi+ebx]
	sub	ecx, esi
	sub	edx, esi
	mov	eax, esi
	sub	ebx, esi
	mov	esi, DWORD PTR tv1521[ebp]
	fld	QWORD PTR _dudb2$89851[ebp]
	fld	QWORD PTR _dudb1$89850[ebp]
	fld	QWORD PTR _dudb0$89849[ebp]
$LN23@spherical_@2:

; 1312 :      { f_info->grad[i][j] += -1/sqrt(1-u*u)*2*(dudb2*(x[i][j]-x[i+2][j])+dudb0*(x[i][j]-x[i+1][j]));

	fld	QWORD PTR [eax+esi]
	mov	edi, DWORD PTR tv1286[ebp]
	fsub	QWORD PTR [eax+ecx]
	inc	DWORD PTR _j$[ebp]
	add	eax, 8
	fmul	ST(0), ST(1)
	fld	QWORD PTR [eax+esi-8]
	fsub	QWORD PTR [eax+edx-8]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fsubr	QWORD PTR [eax+edi-8]

; 1313 :        f_info->grad[(i+1)%3][j] += -1/sqrt(1-u*u)*2*(dudb1*(x[i+1][j]-x[i+2][j])+dudb0*(x[i+1][j]-x[i][j]));

	mov	edi, DWORD PTR tv1554[ebp]
	fstp	QWORD PTR [eax-8]
	fld	QWORD PTR [eax+ecx-8]
	fsub	QWORD PTR [eax+esi-8]
	fmul	ST(0), ST(1)
	fld	QWORD PTR [eax+ecx-8]
	fsub	QWORD PTR [eax+edx-8]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fsubr	QWORD PTR [eax+edi-8]
	mov	edi, DWORD PTR tv1513[ebp]
	fstp	QWORD PTR [eax+edi-8]

; 1314 :        f_info->grad[(i+2)%3][j] += -1/sqrt(1-u*u)*2*(dudb1*(x[i+2][j]-x[i+1][j])+dudb2*(x[i+2][j]-x[i][j]));

	mov	edi, DWORD PTR tv1367[ebp]
	fld	QWORD PTR [eax+edx-8]
	fsub	QWORD PTR [eax+esi-8]
	fmul	ST(0), ST(3)
	fld	QWORD PTR [eax+edx-8]
	fsub	QWORD PTR [eax+ecx-8]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fsubr	QWORD PTR [eax+edi-8]
	fstp	QWORD PTR [eax+ebx-8]
	mov	edi, DWORD PTR _web+616
	cmp	DWORD PTR _j$[ebp], edi
	jl	SHORT $LN23@spherical_@2

; 1311 :     for ( j = 0 ; j < SDIM ; j++ )

	mov	ebx, DWORD PTR _f_info$GSCopy$[ebp]
	fstp	ST(3)
	mov	esi, DWORD PTR tv1137[ebp]
	fstp	ST(2)
	fstp	ST(1)
	fstp	ST(0)
$LN5@spherical_@2:

; 1296 :   a[2] = SDIM_dot(f_info->sides[0][1],f_info->sides[0][1]);
; 1297 :   a[1] = a[0] + a[2] - 2*SDIM_dot(f_info->sides[0][0],f_info->sides[0][1]);
; 1298 :   a[FACET_EDGES] = a[0];
; 1299 :   a[FACET_EDGES+1] = a[1];
; 1300 :   for ( i = 0 ; i < FACET_VERTS ; i++ ) x[i] = f_info->x[i];
; 1301 :   x[FACET_VERTS] = x[0];
; 1302 :   x[FACET_VERTS+1] = x[1];
; 1303 :   for ( area = -M_PI, i = 0, b = a ; i < FACET_VERTS ; i++,b++ )

	add	DWORD PTR tv1133[ebp], 4
	mov	eax, 1
	add	DWORD PTR tv1131[ebp], eax

; 1304 :   { REAL v = sqrt(b[1]*b[2]*(1-b[1]/4)*(1-b[2]/4));

	add	esi, 8
	sub	DWORD PTR tv419[ebp], eax
	mov	DWORD PTR tv1137[ebp], esi
	jne	$LL22@spherical_@2

; 1315 :      }
; 1316 :   }
; 1317 : 
; 1318 :   return area;
; 1319 : } // end spherical_area_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _area$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_spherical_area_grad ENDP
_TEXT	ENDS
PUBLIC	_facet_scalar_integral
; Function compile flags: /Ogtp
;	COMDAT _facet_scalar_integral
_TEXT	SEGMENT
_area$ = -24						; size = 8
_st$ = -24						; size = 8
_ss$ = -16						; size = 8
_value$ = -8						; size = 8
_m$ = 8							; size = 4
_f_info$ = 8						; size = 4
_facet_scalar_integral PROC				; COMDAT

; 377  : { int m;

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 378  :   REAL value = 0.0;

	fldz
	push	ebx
	push	edi
	fstp	QWORD PTR _value$[ebp]

; 379  :   REAL area;
; 380  :   REAL ss,st,tt;
; 381  :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	edi, DWORD PTR _f_info$[ebp]
	mov	eax, DWORD PTR [edi+8]
	cdq
	mov	ebx, eax

; 382  : 
; 383  :   if ( web.modeltype == QUADRATIC ) return facet_scalar_integral_q(f_info);

	mov	eax, DWORD PTR _web+628
	xor	ebx, edx
	sub	ebx, edx
	imul	ebx, 2928				; 00000b70H
	add	ebx, DWORD PTR _meth_inst_list
	cmp	eax, 2
	jne	SHORT $LN6@facet_scal@8
	push	edi
	call	_facet_scalar_integral_q
	add	esp, 4
	pop	edi
	pop	ebx

; 398  :   return value;
; 399  : } // end facet_scalar_integral()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@facet_scal@8:

; 384  :   if ( web.modeltype == LAGRANGE ) return facet_scalar_integral_lagr(f_info);

	cmp	eax, 3
	jne	SHORT $LN5@facet_scal@8
	push	edi
	call	_facet_scalar_integral_lagr
	add	esp, 4
	pop	edi
	pop	ebx

; 398  :   return value;
; 399  : } // end facet_scalar_integral()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@facet_scal@8:

; 385  : 
; 386  :   ss = SDIM_dot(f_info->sides[0][0],f_info->sides[0][0]);

	mov	eax, DWORD PTR [edi+1276]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR [ecx]
	push	edx
	push	eax
	push	eax
	call	_dot
	fstp	QWORD PTR _ss$[ebp]

; 387  :   st = SDIM_dot(f_info->sides[0][0],f_info->sides[0][1]);

	mov	eax, DWORD PTR [edi+1276]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	push	ecx
	push	edx
	push	eax
	call	_dot
	fstp	QWORD PTR _st$[ebp]

; 388  :   tt = SDIM_dot(f_info->sides[0][1],f_info->sides[0][1]);

	mov	ecx, DWORD PTR [edi+1276]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _web+616
	mov	eax, DWORD PTR [edx+4]
	push	ecx
	push	eax
	push	eax
	call	_dot

; 389  :   area = ss*tt-st*st;

	fmul	QWORD PTR _ss$[ebp]
	fld	QWORD PTR _st$[ebp]
	add	esp, 36					; 00000024H
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)

; 390  :   if ( area <= 0.0 ) return 0.0;

	fldz
	fcom	ST(1)
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN14@facet_scal@8
	pop	edi
	fstp	ST(1)
	pop	ebx

; 398  :   return value;
; 399  : } // end facet_scalar_integral()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@facet_scal@8:

; 390  :   if ( area <= 0.0 ) return 0.0;

	fstp	ST(0)
	push	esi

; 391  :   area = sqrt(area)/2;

	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000

; 392  :   for ( m = 0 ; m < gauss2D_num ; m++ )

	xor	esi, esi
	mov	DWORD PTR _m$[ebp], esi
	fstp	QWORD PTR _area$[ebp]
	cmp	DWORD PTR _gauss2D_num, esi
	jle	SHORT $LN11@facet_scal@8
	npad	13
$LL12@facet_scal@8:

; 393  :   {  f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	mov	edx, DWORD PTR [edi+1268]
	fild	DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _web+616
	mov	ecx, DWORD PTR [edx+esi*4]
	add	eax, eax
	fstp	QWORD PTR [ecx+eax*8]

; 394  :      value += gauss2Dwt[m]*
; 395  :        eval(mi->expr[0],f_info->gauss_pt[m],f_info->id,NULL);

	mov	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edi+1268]
	mov	ecx, DWORD PTR [eax+esi*4]
	push	0
	push	edx
	mov	edx, DWORD PTR [ebx+232]
	push	ecx
	push	edx
	call	_eval
	mov	eax, DWORD PTR _gauss2Dwt
	fmul	QWORD PTR [eax+esi*8]
	inc	esi
	add	esp, 16					; 00000010H
	mov	DWORD PTR _m$[ebp], esi
	fadd	QWORD PTR _value$[ebp]
	fstp	QWORD PTR _value$[ebp]
	cmp	esi, DWORD PTR _gauss2D_num
	jl	SHORT $LL12@facet_scal@8
$LN11@facet_scal@8:

; 396  :   }
; 397  :   value *= area;

	fld	QWORD PTR _area$[ebp]
	pop	esi
	fmul	QWORD PTR _value$[ebp]
	pop	edi
	pop	ebx

; 398  :   return value;
; 399  : } // end facet_scalar_integral()

	mov	esp, ebp
	pop	ebp
	ret	0
_facet_scalar_integral ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_facet_scalar_integral_grad
EXTRN	_gauss2Dpt:DWORD
; Function compile flags: /Ogtp
;	COMDAT _facet_scalar_integral_grad
_TEXT	SEGMENT
_val$ = -112						; size = 8
_tt$ = -104						; size = 8
_area$ = -96						; size = 8
_ss$ = -88						; size = 8
_st$ = -80						; size = 8
_value$ = -72						; size = 8
_mi$ = -64						; size = 4
_m$ = -60						; size = 4
tv642 = -56						; size = 4
_derivs$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_facet_scalar_integral_grad PROC			; COMDAT

; 410  : { int m,i,j;

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx

; 411  :   REAL value = 0.0;

	fldz
	push	esi
	fst	QWORD PTR _value$[ebp]
	mov	esi, DWORD PTR _f_info$[ebp]

; 412  :   REAL val;
; 413  :   REAL derivs[MAXCOORD];
; 414  :   REAL area;
; 415  :   REAL ss,st,tt;
; 416  :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [esi+8]
	cdq
	mov	ebx, eax

; 417  : 
; 418  :   if ( web.modeltype == QUADRATIC ) return facet_scalar_integral_q_grad(f_info);

	mov	eax, DWORD PTR _web+628
	xor	ebx, edx
	sub	ebx, edx
	imul	ebx, 2928				; 00000b70H
	add	ebx, DWORD PTR _meth_inst_list
	mov	DWORD PTR _mi$[ebp], ebx
	cmp	eax, 2
	jne	SHORT $LN21@facet_scal@9
	push	esi
	fstp	ST(0)
	call	_facet_scalar_integral_q_grad
	add	esp, 4
	pop	esi
	pop	ebx

; 448  :   }
; 449  : 
; 450  :   return area*value;
; 451  : } // end facet_scalar_integral_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN21@facet_scal@9:

; 419  :   if ( web.modeltype == LAGRANGE )  return facet_scalar_integral_lagr_grad(f_info);

	cmp	eax, 3
	jne	SHORT $LN20@facet_scal@9
	push	esi
	fstp	ST(0)
	call	_facet_scalar_integral_lagr_grad
	add	esp, 4
	pop	esi
	pop	ebx

; 448  :   }
; 449  : 
; 450  :   return area*value;
; 451  : } // end facet_scalar_integral_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN20@facet_scal@9:

; 420  : 
; 421  :   for ( m = 0 ; m < FACET_VERTS ; m++ )

	mov	edx, DWORD PTR _web+616
	push	edi
	xor	edi, edi
	xor	ecx, ecx
$LN19@facet_scal@9:

; 422  :      for ( j = 0 ; j < SDIM ; j++ ) 

	xor	eax, eax
	cmp	edx, edi
	jle	SHORT $LN18@facet_scal@9
$LN16@facet_scal@9:

; 423  :         f_info->grad[m][j] = 0.0;

	mov	edx, DWORD PTR [esi+1336]
	mov	edx, DWORD PTR [ecx+edx]
	fst	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _web+616
	inc	eax
	cmp	eax, edx
	jl	SHORT $LN16@facet_scal@9
$LN18@facet_scal@9:

; 420  : 
; 421  :   for ( m = 0 ; m < FACET_VERTS ; m++ )

	add	ecx, 4
	cmp	ecx, 12					; 0000000cH
	jl	SHORT $LN19@facet_scal@9

; 424  : 
; 425  :   ss = SDIM_dot(f_info->sides[0][0],f_info->sides[0][0]);

	mov	eax, DWORD PTR [esi+1276]
	fstp	ST(0)
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	push	edx
	push	eax
	push	eax
	call	_dot
	fstp	QWORD PTR _ss$[ebp]

; 426  :   st = SDIM_dot(f_info->sides[0][0],f_info->sides[0][1]);

	mov	edx, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	push	ecx
	push	edx
	push	eax
	call	_dot
	fstp	QWORD PTR _st$[ebp]

; 427  :   tt = SDIM_dot(f_info->sides[0][1],f_info->sides[0][1]);

	mov	ecx, DWORD PTR [esi+1276]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _web+616
	mov	eax, DWORD PTR [edx+4]
	push	ecx
	push	eax
	push	eax
	call	_dot
	fst	QWORD PTR _tt$[ebp]

; 428  :   area = ss*tt-st*st;

	fmul	QWORD PTR _ss$[ebp]
	add	esp, 36					; 00000024H
	fld	QWORD PTR _st$[ebp]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)

; 429  :   if ( area <= 0.0 ) return 0.0;

	fldz
	fcom	ST(1)
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN52@facet_scal@9
	pop	edi
	fstp	ST(1)
	pop	esi
	pop	ebx

; 448  :   }
; 449  : 
; 450  :   return area*value;
; 451  : } // end facet_scalar_integral_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN52@facet_scal@9:

; 429  :   if ( area <= 0.0 ) return 0.0;

	fstp	ST(0)

; 430  :   area = sqrt(area)/2;

	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000
	mov	ecx, DWORD PTR _web+616

; 431  : 
; 432  :   for ( m = 0 ; m < gauss2D_num ; m++ )

	mov	DWORD PTR _m$[ebp], edi
	fst	QWORD PTR _area$[ebp]
	cmp	DWORD PTR _gauss2D_num, edi
	jle	$LN36@facet_scal@9

; 430  :   area = sqrt(area)/2;

	mov	DWORD PTR tv642[ebp], edi
	jmp	SHORT $LN76@facet_scal@9
	npad	2
$LL73@facet_scal@9:
	mov	ebx, DWORD PTR _mi$[ebp]

; 431  : 
; 432  :   for ( m = 0 ; m < gauss2D_num ; m++ )

	fstp	ST(0)
$LN76@facet_scal@9:

; 433  :   { 
; 434  :     f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	mov	edx, DWORD PTR [esi+1268]
	fstp	ST(0)
	mov	eax, DWORD PTR [edx+edi*4]
	fild	DWORD PTR _m$[ebp]
	add	ecx, ecx

; 435  :     eval_all(mi->expr[0],f_info->gauss_pt[m],SDIM,&val,derivs,f_info->id);

	lea	edx, DWORD PTR _derivs$[ebp]
	fstp	QWORD PTR [eax+ecx*8]
	mov	ecx, DWORD PTR [esi]
	push	ecx
	mov	ecx, DWORD PTR _web+616
	push	edx
	mov	edx, DWORD PTR [esi+1268]
	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	mov	eax, DWORD PTR [edx+edi*4]
	push	ecx
	mov	ecx, DWORD PTR [ebx+232]
	push	eax
	push	ecx
	call	_eval_all
	mov	edx, DWORD PTR _gauss2Dwt

; 436  :     value += gauss2Dwt[m]*val;

	fld	QWORD PTR [edx+edi*8]

; 437  :     for ( i = 0 ; i < FACET_VERTS ; i++ )

	mov	ecx, DWORD PTR _web+616
	fmul	QWORD PTR _val$[ebp]
	lea	ebx, DWORD PTR [edx+edi*8]
	add	esp, 24					; 00000018H
	xor	edx, edx
	fadd	QWORD PTR _value$[ebp]
	fst	QWORD PTR _value$[ebp]
	fld	QWORD PTR _area$[ebp]
$LN9@facet_scal@9:

; 438  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN8@facet_scal@9
	mov	ecx, DWORD PTR tv642[ebp]
	mov	edi, DWORD PTR _gauss2Dpt
	add	ecx, edx
	lea	edi, DWORD PTR [edi+ecx*8]
$LN6@facet_scal@9:

; 439  :         f_info->grad[i][j] += gauss2Dwt[m]*gauss2Dpt[m][i]*derivs[j]*area;

	fld	QWORD PTR [edi]
	mov	ecx, DWORD PTR [esi+1336]
	fmul	QWORD PTR [ebx]
	mov	ecx, DWORD PTR [ecx+edx*4]
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fmul	QWORD PTR _derivs$[ebp+eax*8-8]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _web+616
	cmp	eax, ecx
	jl	SHORT $LN6@facet_scal@9

; 438  :       for ( j = 0 ; j < SDIM ; j++ )

	mov	edi, DWORD PTR _m$[ebp]
$LN8@facet_scal@9:

; 437  :     for ( i = 0 ; i < FACET_VERTS ; i++ )

	inc	edx
	cmp	edx, 3
	jl	SHORT $LN9@facet_scal@9

; 431  : 
; 432  :   for ( m = 0 ; m < gauss2D_num ; m++ )

	add	DWORD PTR tv642[ebp], 3
	inc	edi
	mov	DWORD PTR _m$[ebp], edi
	cmp	edi, DWORD PTR _gauss2D_num
	jl	$LL73@facet_scal@9
	fxch	ST(1)
$LN10@facet_scal@9:

; 440  :   }
; 441  :   for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	test	ecx, ecx
	jle	$LN1@facet_scal@9
	fld	QWORD PTR __real@3fd0000000000000
	fld	QWORD PTR _st$[ebp]
$LN37@facet_scal@9:

; 442  :   { REAL tmp1,tmp2;
; 443  :     tmp1 = tt*f_info->sides[0][0][j] - st*f_info->sides[0][1][j];

	mov	edx, DWORD PTR [esi+1276]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+4]
	fld	QWORD PTR [edx+eax*8]
	fmul	QWORD PTR _tt$[ebp]
	lea	edx, DWORD PTR [edx+eax*8]
	fld	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)

; 444  :     tmp2 = ss*f_info->sides[0][1][j] - st*f_info->sides[0][0][j];

	fld	QWORD PTR [ecx]
	fmul	QWORD PTR _ss$[ebp]
	fld	QWORD PTR [edx]

; 445  :     f_info->grad[0][j] -= value*(tmp1+tmp2)/4/area;

	mov	edx, DWORD PTR [esi+1336]
	fmul	ST(0), ST(3)
	mov	ecx, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax*8]
	fsubp	ST(1), ST(0)
	fld	ST(0)
	fadd	ST(0), ST(2)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(4)
	fdiv	ST(0), ST(6)
	fsubr	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR [esi+1336]

; 446  :     f_info->grad[1][j] += value*tmp1/4/area;

	fxch	ST(1)
	mov	ecx, DWORD PTR [edx+4]
	fmul	ST(0), ST(4)
	lea	ecx, DWORD PTR [ecx+eax*8]
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(5)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR [esi+1336]
	mov	ecx, DWORD PTR [edx+8]

; 447  :     f_info->grad[2][j] += value*tmp2/4/area;

	fmul	ST(0), ST(3)
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(4)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN37@facet_scal@9

; 440  :   }
; 441  :   for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(1)
	fstp	ST(0)
$LN1@facet_scal@9:

; 448  :   }
; 449  : 
; 450  :   return area*value;
; 451  : } // end facet_scalar_integral_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fmulp	ST(1), ST(0)
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN36@facet_scal@9:

; 431  : 
; 432  :   for ( m = 0 ; m < gauss2D_num ; m++ )

	fld	QWORD PTR _value$[ebp]
	jmp	$LN10@facet_scal@9
_facet_scalar_integral_grad ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_facet_scalar_integral_hess
; Function compile flags: /Ogtp
;	COMDAT _facet_scalar_integral_hess
_TEXT	SEGMENT
_SASqXvS$ = -22400					; size = 24
_secondqXvS$ = -22376					; size = 24
_ASqXvS$ = -22352					; size = 24
_area$ = -22328						; size = 8
_SAS$ = -22320						; size = 4
_val$ = -22316						; size = 8
tv9872 = -22308						; size = 4
_mi$ = -22308						; size = 4
_second$ = -22304					; size = 4
tv7076 = -22300						; size = 4
_sum$ = -22296						; size = 8
_ssdet$ = -22296					; size = 8
tv10056 = -22292					; size = 4
tv9964 = -22292						; size = 4
tv9874 = -22292						; size = 4
_f_info$GSCopy$ = -22288				; size = 4
tv6959 = -22284						; size = 4
_AS$ = -22280						; size = 4
tv6217 = -22276						; size = 4
tv4387 = -22276						; size = 4
tv3061 = -22272						; size = 4
tv2901 = -22272						; size = 4
tv6215 = -22268						; size = 4
tv4383 = -22268						; size = 4
tv6219 = -22264						; size = 4
tv3855 = -22264						; size = 4
tv9008 = -22260						; size = 4
tv7205 = -22260						; size = 4
tv7938 = -22256						; size = 4
tv6961 = -22256						; size = 4
tv2662 = -22256						; size = 4
tv7339 = -22252						; size = 4
tv7954 = -22248						; size = 4
tv6839 = -22248						; size = 4
tv3654 = -22248						; size = 4
tv2097 = -22248						; size = 4
_i$ = -22244						; size = 4
tv9067 = -22240						; size = 4
tv6213 = -22240						; size = 4
tv4381 = -22240						; size = 4
tv2886 = -22236						; size = 4
_m$ = -22236						; size = 4
tv9862 = -22232						; size = 4
tv7203 = -22232						; size = 4
tv3812 = -22232						; size = 4
tv3631 = -22232						; size = 4
_n$ = -22232						; size = 4
_sumhess$ = -22228					; size = 10368
_areahess$ = -11860					; size = 10368
_ASxJ$ = -1492						; size = 288
_SASxJ$ = -1204						; size = 288
_secondxJ$ = -916					; size = 288
_sumgrad$ = -628					; size = 288
_areagrad$ = -340					; size = 288
_derivs$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_facet_scalar_integral_hess PROC			; COMDAT

; 463  : { int n,m,j,k,i;

	push	ebp
	mov	ebp, esp
	mov	eax, 22400				; 00005780H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	esi, DWORD PTR _f_info$[ebp]
	push	edi

; 464  :   REAL value = 0.0;
; 465  :   REAL sum,val;
; 466  :   REAL derivs[MAXCOORD];
; 467  :   REAL areagrad[MAXCOORD][MAXCOORD],sumgrad[MAXCOORD][MAXCOORD];
; 468  :   REAL areahess[MAXCOORD][MAXCOORD][MAXCOORD][MAXCOORD],
; 469  :             sumhess[MAXCOORD][MAXCOORD][MAXCOORD][MAXCOORD];
; 470  :   REAL area;
; 471  :   REAL ssdet;
; 472  :   MAT2D(AS,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	eax, DWORD PTR _ASxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ASqXvS$[ebp]
	push	ecx
	mov	DWORD PTR _f_info$GSCopy$[ebp], esi
	call	_mat2d_setup

; 473  :   MAT2D(SAS,MAXCOORD,MAXCOORD);

	push	6
	mov	edi, eax
	push	6
	lea	edx, DWORD PTR _SASxJ$[ebp]
	push	edx
	lea	eax, DWORD PTR _SASqXvS$[ebp]
	push	eax
	mov	DWORD PTR _AS$[ebp], edi
	call	_mat2d_setup

; 474  :   MAT2D(second,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	ecx, DWORD PTR _secondxJ$[ebp]
	push	ecx
	lea	edx, DWORD PTR _secondqXvS$[ebp]
	push	edx
	mov	DWORD PTR _SAS$[ebp], eax
	call	_mat2d_setup
	mov	DWORD PTR _second$[ebp], eax

; 475  :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [esi+8]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list
	add	esp, 48					; 00000030H
	mov	DWORD PTR _mi$[ebp], eax

; 476  : 
; 477  : #define S (f_info->sides[0])
; 478  : #define A (f_info->ss)
; 479  : 
; 480  :   if ( web.modeltype == QUADRATIC ) return facet_scalar_integral_q_hess(f_info);

	mov	eax, DWORD PTR _web+628
	cmp	eax, 2
	jne	SHORT $LN78@facet_scal@10
	push	esi
	call	_facet_scalar_integral_q_hess
	add	esp, 4
	pop	edi
	pop	esi

; 554  :   return value;
; 555  : } // end facet_scalar_integral_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN78@facet_scal@10:

; 481  :   if ( web.modeltype == LAGRANGE ) return facet_scalar_integral_lagr_hess(f_info);

	cmp	eax, 3
	jne	SHORT $LN77@facet_scal@10
	push	esi
	call	_facet_scalar_integral_lagr_hess
	add	esp, 4
	pop	edi
	pop	esi

; 554  :   return value;
; 555  : } // end facet_scalar_integral_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN77@facet_scal@10:

; 482  : 
; 483  :   /* first, area derivatives */
; 484  :   mat_tsquare(S,A,web.dimension,SDIM);

	mov	eax, DWORD PTR _web+616
	mov	ecx, DWORD PTR _web+620
	mov	edx, DWORD PTR [esi+1280]
	push	eax
	mov	eax, DWORD PTR [esi+1276]
	push	ecx
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	ecx
	call	_mat_tsquare

; 485  :   ssdet = det_adjoint(A,web.dimension);

	mov	edx, DWORD PTR _web+620
	mov	eax, DWORD PTR [esi+1280]
	push	edx
	push	eax
	call	_det_adjoint
	fst	QWORD PTR _ssdet$[ebp]

; 486  :   if ( ssdet <= 0.0 ) {  return 0.0; }

	fldz
	add	esp, 24					; 00000018H
	fcom	ST(1)
	fnstsw	ax
	test	ah, 1
	je	$LN306@facet_scal@10
	fstp	ST(0)

; 487  :   area = sqrt(ssdet)/web.simplex_factorial;

	call	__CIsqrt
	fdiv	QWORD PTR _web+792

; 488  :   for ( i = 0 ; i < web.dimension ; i++ )

	mov	ecx, DWORD PTR _web+620
	xor	edx, edx
	fstp	QWORD PTR _area$[ebp]
	test	ecx, ecx
	jle	SHORT $LN73@facet_scal@10
	fld	QWORD PTR _ssdet$[ebp]
$LN75@facet_scal@10:

; 489  :      for ( j = 0 ; j < web.dimension ; j++ ) 

	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN74@facet_scal@10
$LN72@facet_scal@10:
	mov	ecx, DWORD PTR [esi+1280]
	mov	ecx, DWORD PTR [ecx+edx*4]

; 490  :         A[i][j] /= ssdet;    /* now inverse of ss */

	fld	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	fdiv	ST(0), ST(1)
	inc	eax
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _web+620
	cmp	eax, ecx
	jl	SHORT $LN72@facet_scal@10
$LN74@facet_scal@10:

; 488  :   for ( i = 0 ; i < web.dimension ; i++ )

	inc	edx
	cmp	edx, ecx
	jl	SHORT $LN75@facet_scal@10
	fstp	ST(0)
$LN73@facet_scal@10:

; 491  :   mat_mult(A,S,AS,web.dimension,web.dimension, SDIM); 

	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR [esi+1276]
	push	ebx
	push	edx
	mov	edx, DWORD PTR [esi+1280]
	push	ecx
	push	ecx
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	ecx
	push	edx
	call	_mat_mult

; 492  : 
; 493  :   /* head forces */
; 494  :   for ( i = 0 ; i < web.dimension ; i++ )

	mov	ebx, DWORD PTR _web+620
	mov	esi, DWORD PTR _web+616
	add	esp, 24					; 00000018H
	test	ebx, ebx
	jle	$LN67@facet_scal@10

; 491  :   mat_mult(A,S,AS,web.dimension,web.dimension, SDIM); 

	fld	QWORD PTR _area$[ebp]
	lea	ecx, DWORD PTR _areagrad$[ebp+56]
	mov	DWORD PTR tv3631[ebp], 0
	mov	edx, edi
	mov	DWORD PTR tv3654[ebp], ecx
	mov	DWORD PTR tv2662[ebp], ebx
$LN166@facet_scal@10:

; 495  :      for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	cmp	esi, 4
	jl	SHORT $LN167@facet_scal@10
	lea	edi, DWORD PTR [esi-3]
$LN135@facet_scal@10:

; 496  :         areagrad[i+1][j] = area*AS[i][j];

	mov	ebx, DWORD PTR [edx]
	fld	QWORD PTR [ebx+eax*8]
	add	eax, 4
	fmul	ST(0), ST(1)
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR [ecx-40]
	mov	ebx, DWORD PTR [edx]
	fld	QWORD PTR [ebx+eax*8-24]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [ecx-32]
	mov	ebx, DWORD PTR [edx]
	fld	QWORD PTR [ebx+eax*8-16]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [ecx-24]
	mov	ebx, DWORD PTR [edx]
	fld	QWORD PTR [ebx+eax*8-8]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [ecx-16]
	cmp	eax, edi
	jl	SHORT $LN135@facet_scal@10
$LN167@facet_scal@10:

; 495  :      for ( j = 0 ; j < SDIM ; j++ )

	cmp	eax, esi
	jge	SHORT $LN68@facet_scal@10
	mov	ecx, DWORD PTR tv3631[ebp]
	add	ecx, eax
	lea	ecx, DWORD PTR _areagrad$[ebp+ecx*8+48]
$LC66@facet_scal@10:

; 496  :         areagrad[i+1][j] = area*AS[i][j];

	mov	edi, DWORD PTR [edx]
	fld	QWORD PTR [edi+eax*8]
	inc	eax
	fmul	ST(0), ST(1)
	add	ecx, 8
	fstp	QWORD PTR [ecx-8]
	cmp	eax, esi
	jl	SHORT $LC66@facet_scal@10
$LN68@facet_scal@10:

; 492  : 
; 493  :   /* head forces */
; 494  :   for ( i = 0 ; i < web.dimension ; i++ )

	mov	ecx, DWORD PTR tv3654[ebp]
	add	DWORD PTR tv3631[ebp], 6
	add	ecx, 48					; 00000030H
	add	edx, 4
	dec	DWORD PTR tv2662[ebp]
	mov	DWORD PTR tv3654[ebp], ecx
	jne	$LN166@facet_scal@10
	mov	ebx, DWORD PTR _web+620
	fstp	ST(0)
$LN67@facet_scal@10:

; 497  :   /* tail forces */
; 498  :   memset((char*)areagrad[0],0,SDIM*sizeof(REAL));

	lea	edx, DWORD PTR [esi*8]
	push	edx
	lea	eax, DWORD PTR _areagrad$[ebp]
	push	0
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 499  :   for ( i = 0 ; i < web.dimension ; i++ )  

	xor	edi, edi
	test	ebx, ebx
	jle	SHORT $LN163@facet_scal@10

; 497  :   /* tail forces */
; 498  :   memset((char*)areagrad[0],0,SDIM*sizeof(REAL));

	lea	ebx, DWORD PTR _areagrad$[ebp+48]
$LL153@facet_scal@10:

; 500  :      vector_sub(areagrad[0],areagrad[i+1],SDIM);

	push	esi
	lea	ecx, DWORD PTR _areagrad$[ebp]
	push	ebx
	push	ecx
	call	_vector_sub
	mov	esi, DWORD PTR _web+616
	inc	edi
	add	esp, 12					; 0000000cH
	add	ebx, 48					; 00000030H
	cmp	edi, DWORD PTR _web+620
	jl	SHORT $LL153@facet_scal@10
$LN163@facet_scal@10:

; 501  : 
; 502  :   /* hessian */
; 503  :   tr_mat_mul(S,AS,SAS,web.dimension,SDIM,SDIM);

	mov	edx, DWORD PTR _web+620
	mov	eax, DWORD PTR _SAS$[ebp]
	mov	ecx, DWORD PTR _AS$[ebp]
	push	esi
	push	esi
	push	edx
	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	push	eax
	mov	eax, DWORD PTR [edx+1276]
	push	ecx
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_tr_mat_mul
	fldz

; 504  :   for ( j = 0 ; j < SDIM ; j++ )

	mov	esi, DWORD PTR _web+616
	mov	ebx, DWORD PTR _web+620
	add	esp, 24					; 00000018H
	test	esi, esi
	jle	SHORT $LN58@facet_scal@10

; 501  : 
; 502  :   /* hessian */
; 503  :   tr_mat_mul(S,AS,SAS,web.dimension,SDIM,SDIM);

	mov	DWORD PTR tv3812[ebp], 0
	mov	DWORD PTR tv2097[ebp], esi
$LN60@facet_scal@10:

; 505  :     for ( k = 0 ; k < SDIM ; k++ )

	xor	edi, edi
$LN57@facet_scal@10:

; 506  :      for ( m = 0 ; m <= web.dimension ; m++ )

	test	ebx, ebx
	js	SHORT $LN56@facet_scal@10
	mov	eax, DWORD PTR tv3812[ebp]
	add	eax, edi
	lea	eax, DWORD PTR _areahess$[ebp+eax*8]
	mov	ecx, eax
	lea	edx, DWORD PTR [ebx+1]
$LN54@facet_scal@10:

; 507  :         { areahess[m][0][j][k] = 0.0;

	fst	QWORD PTR [ecx]
	add	ecx, 1728				; 000006c0H

; 508  :           areahess[0][m][j][k] = 0.0;

	fst	QWORD PTR [eax]
	add	eax, 288				; 00000120H
	dec	edx
	jne	SHORT $LN54@facet_scal@10
$LN56@facet_scal@10:

; 505  :     for ( k = 0 ; k < SDIM ; k++ )

	inc	edi
	cmp	edi, esi
	jl	SHORT $LN57@facet_scal@10

; 504  :   for ( j = 0 ; j < SDIM ; j++ )

	add	DWORD PTR tv3812[ebp], 6
	dec	DWORD PTR tv2097[ebp]
	jne	SHORT $LN60@facet_scal@10
$LN58@facet_scal@10:

; 509  :         }
; 510  :   for ( m = 0 ; m < web.dimension ; m++ )

	xor	edi, edi
	test	ebx, ebx
	jle	$LN199@facet_scal@10
	fld	QWORD PTR _area$[ebp]
	xor	eax, eax
	mov	DWORD PTR tv7203[ebp], eax
	mov	DWORD PTR tv7205[ebp], eax
	mov	eax, DWORD PTR _AS$[ebp]
	mov	DWORD PTR tv7339[ebp], eax
$LN51@facet_scal@10:

; 511  :     for ( i = 0 ; i < web.dimension ; i++ )

	xor	ebx, ebx
	mov	DWORD PTR _i$[ebp], ebx
	mov	DWORD PTR tv7076[ebp], ebx
$LN48@facet_scal@10:

; 512  :      for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	test	esi, esi
	jle	$LN47@facet_scal@10
	mov	ecx, DWORD PTR _SAS$[ebp]
	lea	edx, DWORD PTR _areahess$[ebp+8]
	mov	DWORD PTR tv6839[ebp], eax
	mov	DWORD PTR tv6959[ebp], ecx
	mov	DWORD PTR tv6961[ebp], edx
$LN165@facet_scal@10:

; 513  :       for ( k = 0 ; k < SDIM ; k++ )

	xor	ecx, ecx
	cmp	esi, 4
	jl	$LC137@facet_scal@10

; 511  :     for ( i = 0 ; i < web.dimension ; i++ )

	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [edx+1280]

; 513  :       for ( k = 0 ; k < SDIM ; k++ )

	mov	esi, DWORD PTR tv7203[ebp]
	lea	edx, DWORD PTR [edx+ebx*4]
	mov	DWORD PTR tv2886[ebp], edx
	mov	edx, DWORD PTR tv7205[ebp]
	add	edx, eax
	lea	edx, DWORD PTR [edx+edx*2]
	add	edx, edx
	lea	edx, DWORD PTR _areahess$[ebp+edx*8+1736]
	mov	DWORD PTR tv4381[ebp], edx
	mov	edx, DWORD PTR tv7076[ebp]
	add	esi, ebx
	add	edx, eax
	lea	esi, DWORD PTR [esi+esi*2]
	lea	esi, DWORD PTR [eax+esi*2]
	lea	edx, DWORD PTR [edx+edx*2]
	add	edx, edx
	lea	esi, DWORD PTR [esi+esi*2]
	lea	edx, DWORD PTR _areahess$[ebp+edx*8+296]
	add	esi, esi
	lea	esi, DWORD PTR _areahess$[ebp+esi*8+2024]
	mov	DWORD PTR tv4383[ebp], edx
	mov	edx, DWORD PTR tv6961[ebp]
	mov	DWORD PTR tv3855[ebp], 2
	mov	DWORD PTR tv4387[ebp], esi
$LN146@facet_scal@10:

; 514  :         { val = area*(AS[m][j]*AS[i][k] + (j==k?A[i][m]:0.0)
; 515  :                      - A[i][m]*SAS[j][k] - AS[i][j]*AS[m][k]);

	cmp	eax, ecx
	jne	SHORT $LN138@facet_scal@10
	mov	esi, DWORD PTR tv2886[ebp]
	mov	esi, DWORD PTR [esi]
	fld	QWORD PTR [esi+edi*8]
	jmp	SHORT $LN139@facet_scal@10
$LN138@facet_scal@10:
	fld	ST(1)
$LN139@facet_scal@10:
	mov	esi, DWORD PTR tv7339[ebp]
	mov	esi, DWORD PTR [esi]
	mov	DWORD PTR tv9964[ebp], esi
	mov	esi, DWORD PTR _AS$[ebp]
	mov	ebx, DWORD PTR [esi+ebx*4]
	fld	QWORD PTR [ebx+ecx*8]
	mov	esi, DWORD PTR tv9964[ebp]
	fmul	QWORD PTR [esi+eax*8]
	mov	esi, DWORD PTR tv2886[ebp]
	mov	esi, DWORD PTR [esi]
	mov	DWORD PTR tv2901[ebp], ebx
	mov	ebx, DWORD PTR tv6959[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [esi+edi*8]
	mov	ebx, DWORD PTR [ebx]
	fmul	QWORD PTR [ebx+ecx*8]
	mov	esi, DWORD PTR tv2901[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [esi+eax*8]
	mov	esi, DWORD PTR tv7339[ebp]
	mov	esi, DWORD PTR [esi]
	fmul	QWORD PTR [esi+ecx*8]

; 516  :           areahess[m+1][i+1][j][k] = val;

	mov	esi, DWORD PTR tv4387[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fst	QWORD PTR _val$[ebp]
	fst	QWORD PTR [esi-8]

; 517  :           areahess[0][0][j][k] += val;
; 518  :           areahess[0][i+1][j][k] -= val;

	mov	esi, DWORD PTR tv4383[ebp]
	fld	ST(0)
	fadd	QWORD PTR [edx-8]
	fstp	QWORD PTR [edx-8]
	fld	QWORD PTR [esi-8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [esi-8]

; 519  :           areahess[m+1][0][j][k] -= val;

	mov	esi, DWORD PTR tv4381[ebp]
	fsubr	QWORD PTR [esi-8]
	fstp	QWORD PTR [esi-8]
	mov	esi, DWORD PTR tv3855[ebp]
	dec	esi
	cmp	eax, esi
	jne	SHORT $LN140@facet_scal@10

; 514  :         { val = area*(AS[m][j]*AS[i][k] + (j==k?A[i][m]:0.0)
; 515  :                      - A[i][m]*SAS[j][k] - AS[i][j]*AS[m][k]);

	mov	esi, DWORD PTR tv2886[ebp]
	mov	esi, DWORD PTR [esi]
	fld	QWORD PTR [esi+edi*8]
	jmp	SHORT $LN141@facet_scal@10
$LN140@facet_scal@10:
	fld	ST(1)
$LN141@facet_scal@10:
	mov	ebx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _AS$[ebp]
	mov	esi, DWORD PTR [esi+ebx*4]
	fld	QWORD PTR [esi+ecx*8+8]
	mov	ebx, DWORD PTR tv7339[ebp]
	mov	ebx, DWORD PTR [ebx]
	fmul	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR tv6959[ebp]
	mov	ebx, DWORD PTR [ebx]
	mov	DWORD PTR tv2901[ebp], esi
	mov	esi, DWORD PTR tv2886[ebp]
	faddp	ST(1), ST(0)
	mov	esi, DWORD PTR [esi]
	fld	QWORD PTR [esi+edi*8]
	mov	esi, DWORD PTR tv2901[ebp]
	fmul	QWORD PTR [ebx+ecx*8+8]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [esi+eax*8]
	mov	esi, DWORD PTR tv7339[ebp]
	mov	esi, DWORD PTR [esi]
	fmul	QWORD PTR [esi+ecx*8+8]

; 516  :           areahess[m+1][i+1][j][k] = val;

	mov	esi, DWORD PTR tv4387[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fst	QWORD PTR _val$[ebp]
	fst	QWORD PTR [esi]

; 517  :           areahess[0][0][j][k] += val;
; 518  :           areahess[0][i+1][j][k] -= val;

	mov	esi, DWORD PTR tv4383[ebp]
	fld	QWORD PTR [edx]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx]
	fld	QWORD PTR [esi]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [esi]

; 519  :           areahess[m+1][0][j][k] -= val;

	mov	esi, DWORD PTR tv4381[ebp]
	fsubr	QWORD PTR [esi]
	fstp	QWORD PTR [esi]
	cmp	eax, DWORD PTR tv3855[ebp]
	jne	SHORT $LN142@facet_scal@10

; 514  :         { val = area*(AS[m][j]*AS[i][k] + (j==k?A[i][m]:0.0)
; 515  :                      - A[i][m]*SAS[j][k] - AS[i][j]*AS[m][k]);

	mov	esi, DWORD PTR tv2886[ebp]
	mov	esi, DWORD PTR [esi]
	fld	QWORD PTR [esi+edi*8]
	jmp	SHORT $LN143@facet_scal@10
$LN142@facet_scal@10:
	fld	ST(1)
$LN143@facet_scal@10:
	mov	ebx, DWORD PTR _AS$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR [ebx+esi*4]
	mov	ebx, DWORD PTR tv7339[ebp]
	mov	ebx, DWORD PTR [ebx]
	fld	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR tv2886[ebp]
	fmul	QWORD PTR [esi+ecx*8+16]
	mov	ebx, DWORD PTR [ebx]
	mov	DWORD PTR tv2901[ebp], esi
	mov	esi, DWORD PTR tv6959[ebp]
	mov	esi, DWORD PTR [esi]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [esi+ecx*8+16]
	mov	esi, DWORD PTR tv7339[ebp]
	fmul	QWORD PTR [ebx+edi*8]
	mov	esi, DWORD PTR [esi]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [esi+ecx*8+16]
	mov	esi, DWORD PTR tv2901[ebp]
	fmul	QWORD PTR [esi+eax*8]

; 516  :           areahess[m+1][i+1][j][k] = val;

	mov	esi, DWORD PTR tv4387[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fst	QWORD PTR _val$[ebp]
	fst	QWORD PTR [esi+8]

; 517  :           areahess[0][0][j][k] += val;
; 518  :           areahess[0][i+1][j][k] -= val;

	mov	esi, DWORD PTR tv4383[ebp]
	fld	QWORD PTR [edx+8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx+8]
	fld	QWORD PTR [esi+8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [esi+8]

; 519  :           areahess[m+1][0][j][k] -= val;

	mov	esi, DWORD PTR tv4381[ebp]
	fsubr	QWORD PTR [esi+8]
	fstp	QWORD PTR [esi+8]
	mov	esi, DWORD PTR tv3855[ebp]
	inc	esi
	cmp	eax, esi
	jne	SHORT $LN144@facet_scal@10

; 514  :         { val = area*(AS[m][j]*AS[i][k] + (j==k?A[i][m]:0.0)
; 515  :                      - A[i][m]*SAS[j][k] - AS[i][j]*AS[m][k]);

	mov	esi, DWORD PTR tv2886[ebp]
	mov	esi, DWORD PTR [esi]
	fld	QWORD PTR [esi+edi*8]
	jmp	SHORT $LN145@facet_scal@10
$LN144@facet_scal@10:
	fld	ST(1)
$LN145@facet_scal@10:
	mov	ebx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _AS$[ebp]
	mov	esi, DWORD PTR [esi+ebx*4]
	fld	QWORD PTR [esi+ecx*8+24]
	mov	ebx, DWORD PTR tv7339[ebp]
	mov	ebx, DWORD PTR [ebx]
	fmul	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR tv6959[ebp]
	mov	ebx, DWORD PTR [ebx]
	mov	DWORD PTR tv2901[ebp], esi
	mov	esi, DWORD PTR tv2886[ebp]
	faddp	ST(1), ST(0)
	mov	esi, DWORD PTR [esi]
	fld	QWORD PTR [esi+edi*8]
	mov	esi, DWORD PTR tv2901[ebp]
	fmul	QWORD PTR [ebx+ecx*8+24]

; 519  :           areahess[m+1][0][j][k] -= val;

	mov	ebx, DWORD PTR tv4381[ebp]
	add	DWORD PTR tv4381[ebp], 32		; 00000020H
	add	DWORD PTR tv3855[ebp], 4
	fsubp	ST(1), ST(0)
	add	ecx, 4
	fld	QWORD PTR [esi+eax*8]
	mov	esi, DWORD PTR tv7339[ebp]
	mov	esi, DWORD PTR [esi]
	fmul	QWORD PTR [esi+ecx*8-8]
	mov	esi, DWORD PTR tv4387[ebp]
	add	DWORD PTR tv4387[ebp], 32		; 00000020H
	add	edx, 32					; 00000020H
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fst	QWORD PTR _val$[ebp]
	fst	QWORD PTR [esi+16]
	mov	esi, DWORD PTR tv4383[ebp]
	fld	QWORD PTR [edx-16]
	add	esi, 32					; 00000020H
	fadd	ST(0), ST(1)
	mov	DWORD PTR tv4383[ebp], esi
	fstp	QWORD PTR [edx-16]
	fld	QWORD PTR [esi-16]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [esi-16]
	mov	esi, DWORD PTR _web+616
	fsubr	QWORD PTR [ebx+16]
	fstp	QWORD PTR [ebx+16]
	lea	ebx, DWORD PTR [esi-3]
	cmp	ecx, ebx
	mov	ebx, DWORD PTR _i$[ebp]
	jl	$LN146@facet_scal@10
$LC137@facet_scal@10:

; 513  :       for ( k = 0 ; k < SDIM ; k++ )

	cmp	ecx, esi
	jge	$LN44@facet_scal@10

; 511  :     for ( i = 0 ; i < web.dimension ; i++ )

	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [edx+1280]
	lea	edx, DWORD PTR [edx+ebx*4]
	mov	DWORD PTR tv2886[ebp], edx

; 513  :       for ( k = 0 ; k < SDIM ; k++ )

	mov	edx, DWORD PTR tv7205[ebp]
	add	edx, eax
	lea	edx, DWORD PTR [edx+edx*2]
	lea	edx, DWORD PTR [ecx+edx*2]
	lea	edx, DWORD PTR _areahess$[ebp+edx*8+1728]
	mov	DWORD PTR tv6213[ebp], edx
	mov	edx, DWORD PTR tv7076[ebp]
	add	edx, eax
	lea	edx, DWORD PTR [edx+edx*2]
	lea	edx, DWORD PTR [ecx+edx*2]
	lea	edx, DWORD PTR _areahess$[ebp+edx*8+288]
	mov	DWORD PTR tv6215[ebp], edx
	mov	edx, DWORD PTR tv6839[ebp]
	add	edx, ecx
	lea	edx, DWORD PTR _areahess$[ebp+edx*8]
	mov	DWORD PTR tv6217[ebp], edx
	mov	edx, DWORD PTR tv7203[ebp]
	add	edx, ebx
	lea	edx, DWORD PTR [edx+edx*2]
	lea	edx, DWORD PTR [eax+edx*2]
	lea	edx, DWORD PTR [edx+edx*2]
	lea	edx, DWORD PTR [ecx+edx*2]
	lea	edx, DWORD PTR _areahess$[ebp+edx*8+2016]
	mov	DWORD PTR tv6219[ebp], edx
$LC42@facet_scal@10:

; 514  :         { val = area*(AS[m][j]*AS[i][k] + (j==k?A[i][m]:0.0)
; 515  :                      - A[i][m]*SAS[j][k] - AS[i][j]*AS[m][k]);

	cmp	eax, ecx
	jne	SHORT $LN81@facet_scal@10
	mov	edx, DWORD PTR tv2886[ebp]
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+edi*8]
	jmp	SHORT $LN82@facet_scal@10
$LN81@facet_scal@10:
	fld	ST(1)
$LN82@facet_scal@10:
	mov	edx, DWORD PTR tv7339[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR tv10056[ebp], edx
	mov	edx, DWORD PTR _AS$[ebp]
	mov	ebx, DWORD PTR [edx+ebx*4]
	fld	QWORD PTR [ebx+ecx*8]
	mov	edx, DWORD PTR tv10056[ebp]
	fmul	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR tv2886[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR tv3061[ebp], ebx
	mov	ebx, DWORD PTR tv6959[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx+edi*8]
	mov	ebx, DWORD PTR [ebx]
	fmul	QWORD PTR [ebx+ecx*8]
	mov	edx, DWORD PTR tv3061[ebp]

; 517  :           areahess[0][0][j][k] += val;
; 518  :           areahess[0][i+1][j][k] -= val;

	mov	ebx, DWORD PTR tv6215[ebp]
	inc	ecx
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR tv7339[ebp]
	mov	edx, DWORD PTR [edx]
	fmul	QWORD PTR [edx+ecx*8-8]
	mov	edx, DWORD PTR tv6219[ebp]
	add	DWORD PTR tv6219[ebp], 8
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fst	QWORD PTR _val$[ebp]
	fst	QWORD PTR [edx]
	mov	edx, DWORD PTR tv6217[ebp]
	fld	QWORD PTR [edx]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx]
	fld	QWORD PTR [ebx]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [ebx]

; 519  :           areahess[m+1][0][j][k] -= val;

	mov	ebx, DWORD PTR tv6213[ebp]
	fsubr	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]
	mov	ebx, 8
	add	DWORD PTR tv6215[ebp], ebx
	add	DWORD PTR tv6213[ebp], ebx
	add	edx, ebx
	mov	ebx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv6217[ebp], edx
	cmp	ecx, esi
	jl	$LC42@facet_scal@10
$LN44@facet_scal@10:

; 512  :      for ( j = 0 ; j < SDIM ; j++ )

	add	DWORD PTR tv6961[ebp], 48		; 00000030H
	add	DWORD PTR tv6959[ebp], 4
	add	DWORD PTR tv6839[ebp], 6
	inc	eax
	cmp	eax, esi
	jl	$LN165@facet_scal@10
$LN47@facet_scal@10:

; 511  :     for ( i = 0 ; i < web.dimension ; i++ )

	add	DWORD PTR tv7076[ebp], 6
	inc	ebx
	mov	DWORD PTR _i$[ebp], ebx
	cmp	ebx, DWORD PTR _web+620
	jl	$LN48@facet_scal@10

; 509  :         }
; 510  :   for ( m = 0 ; m < web.dimension ; m++ )

	add	DWORD PTR tv7339[ebp], 4
	add	DWORD PTR tv7205[ebp], 36		; 00000024H
	add	DWORD PTR tv7203[ebp], 6
	inc	edi
	cmp	edi, DWORD PTR _web+620
	jl	$LN51@facet_scal@10

; 511  :     for ( i = 0 ; i < web.dimension ; i++ )

	fstp	ST(0)
$LN199@facet_scal@10:

; 520  :         }
; 521  : 
; 522  :   /* gaussian sum derivatives */
; 523  :   memset((char*)sumgrad,0,sizeof(sumgrad));

	push	288					; 00000120H
	fstp	ST(0)
	lea	eax, DWORD PTR _sumgrad$[ebp]
	push	0
	push	eax
	call	_memset

; 524  :   memset((char*)sumhess,0,sizeof(sumhess));

	push	10368					; 00002880H
	lea	ecx, DWORD PTR _sumhess$[ebp]
	push	0
	push	ecx
	call	_memset

; 525  :   for ( m = 0, sum = 0.0 ; m < gauss2D_num ; m++ )

	fldz
	add	esp, 24					; 00000018H
	fst	QWORD PTR _sum$[ebp]
	cmp	DWORD PTR _gauss2D_num, 0
	mov	DWORD PTR _m$[ebp], 0
	jle	$LN37@facet_scal@10

; 520  :         }
; 521  : 
; 522  :   /* gaussian sum derivatives */
; 523  :   memset((char*)sumgrad,0,sizeof(sumgrad));

	mov	DWORD PTR tv9067[ebp], 0
	npad	2
$LL305@facet_scal@10:

; 526  :   { 
; 527  :     f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	fstp	ST(0)
	mov	edx, DWORD PTR [eax+1268]
	fild	DWORD PTR _m$[ebp]
	mov	ebx, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [edx+ebx*4]
	add	esi, esi
	fstp	QWORD PTR [ecx+esi*8]

; 528  :     eval_second(mi->expr[0],f_info->gauss_pt[m],SDIM,&val,
; 529  :                                                    derivs,second,f_info->id);

	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _second$[ebp]
	mov	eax, DWORD PTR [eax+1268]
	push	edx
	push	ecx
	lea	edx, DWORD PTR _derivs$[ebp]
	push	edx
	mov	edx, DWORD PTR _web+616
	lea	ecx, DWORD PTR _val$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [eax+ebx*4]
	push	edx
	mov	edx, DWORD PTR _mi$[ebp]
	mov	eax, DWORD PTR [edx+232]
	push	ecx
	push	eax
	call	_eval_second

; 530  :     sum += gauss2Dwt[m]*val;

	mov	ecx, DWORD PTR _gauss2Dwt
	fld	QWORD PTR [ecx+ebx*8]

; 531  :     for ( i = 0 ; i <= web.dimension ; i++ )

	mov	esi, DWORD PTR _web+616
	fmul	QWORD PTR _val$[ebp]
	xor	edx, edx
	add	esp, 28					; 0000001cH
	fadd	QWORD PTR _sum$[ebp]
	fst	QWORD PTR _sum$[ebp]
	cmp	DWORD PTR _web+620, edx
	jl	$LN34@facet_scal@10

; 526  :   { 
; 527  :     f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	lea	eax, DWORD PTR _sumgrad$[ebp+8]
	mov	DWORD PTR tv7938[ebp], edx
	mov	DWORD PTR tv7954[ebp], eax
$LN36@facet_scal@10:

; 532  :      for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	cmp	esi, 4
	jl	SHORT $LC148@facet_scal@10
	mov	ecx, DWORD PTR tv9067[ebp]
	mov	edi, DWORD PTR _gauss2Dpt
	add	ecx, edx
	fld	QWORD PTR [edi+ecx*8]
	mov	ecx, DWORD PTR _gauss2Dwt
	fmul	QWORD PTR [ecx+ebx*8]
	mov	ecx, DWORD PTR tv7954[ebp]
	lea	edi, DWORD PTR [esi-3]
$LN149@facet_scal@10:

; 533  :         sumgrad[i][j] += gauss2Dwt[m]*gauss2Dpt[m][i]*derivs[j];

	fld	QWORD PTR _derivs$[ebp+eax*8]
	add	eax, 4
	fmul	ST(0), ST(1)
	add	ecx, 32					; 00000020H
	fadd	QWORD PTR [ecx-40]
	fstp	QWORD PTR [ecx-40]
	fld	QWORD PTR _derivs$[ebp+eax*8-24]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [ecx-32]
	fstp	QWORD PTR [ecx-32]
	fld	QWORD PTR _derivs$[ebp+eax*8-16]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [ecx-24]
	fstp	QWORD PTR [ecx-24]
	fld	QWORD PTR _derivs$[ebp+eax*8-8]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [ecx-16]
	fstp	QWORD PTR [ecx-16]
	cmp	eax, edi
	jl	SHORT $LN149@facet_scal@10

; 532  :      for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(0)
$LC148@facet_scal@10:
	cmp	eax, esi
	jge	SHORT $LN35@facet_scal@10
	mov	ecx, DWORD PTR tv9067[ebp]
	mov	edi, DWORD PTR _gauss2Dpt
	add	ecx, edx
	fld	QWORD PTR [edi+ecx*8]
	mov	ecx, DWORD PTR _gauss2Dwt
	fmul	QWORD PTR [ecx+ebx*8]
	mov	ecx, DWORD PTR tv7938[ebp]
	add	ecx, eax
	lea	ecx, DWORD PTR _sumgrad$[ebp+ecx*8]
$LC33@facet_scal@10:

; 533  :         sumgrad[i][j] += gauss2Dwt[m]*gauss2Dpt[m][i]*derivs[j];

	fld	QWORD PTR _derivs$[ebp+eax*8]
	inc	eax
	fmul	ST(0), ST(1)
	add	ecx, 8
	fadd	QWORD PTR [ecx-8]
	fstp	QWORD PTR [ecx-8]
	cmp	eax, esi
	jl	SHORT $LC33@facet_scal@10

; 532  :      for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(0)
$LN35@facet_scal@10:

; 531  :     for ( i = 0 ; i <= web.dimension ; i++ )

	add	DWORD PTR tv7954[ebp], 48		; 00000030H
	add	DWORD PTR tv7938[ebp], 6
	inc	edx
	cmp	edx, DWORD PTR _web+620
	jle	$LN36@facet_scal@10
$LN34@facet_scal@10:

; 534  :     for ( i = 0 ; i <= web.dimension ; i++ )

	cmp	DWORD PTR _web+620, 0
	mov	DWORD PTR _i$[ebp], 0
	jl	$LN38@facet_scal@10
	mov	DWORD PTR tv9008[ebp], 0
$LN30@facet_scal@10:

; 535  :      for ( n = 0 ; n <= web.dimension ; n++ )

	mov	DWORD PTR _n$[ebp], 0
$LN27@facet_scal@10:

; 536  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	ebx, ebx
	test	esi, esi
	jle	$LN26@facet_scal@10
$LN24@facet_scal@10:

; 537  :        for ( k = 0 ; k < SDIM ; k++ )

	xor	edi, edi
	cmp	esi, 4
	jl	$LC151@facet_scal@10
	mov	eax, DWORD PTR tv9067[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _gauss2Dpt
	mov	edi, DWORD PTR _m$[ebp]
	add	edx, eax
	fld	QWORD PTR [ecx+edx*8]
	mov	edx, DWORD PTR _gauss2Dwt
	fmul	QWORD PTR [edx+edi*8]
	mov	edx, DWORD PTR _n$[ebp]
	add	eax, edx
	fmul	QWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR _second$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR tv9008[ebp]
	add	eax, edx
	lea	edx, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ebx+edx*2]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	edx, DWORD PTR [esi-4]
	add	eax, eax
	shr	edx, 2
	add	ecx, 16					; 00000010H
	inc	edx
	lea	eax, DWORD PTR _sumhess$[ebp+eax*8+8]
	lea	edi, DWORD PTR [edx*4]
$LN152@facet_scal@10:

; 538  :          sumhess[i][n][j][k] += gauss2Dwt[m]*gauss2Dpt[m][i]*gauss2Dpt[m][n]
; 539  :                                   *second[j][k];

	fld	QWORD PTR [ecx-16]
	add	ecx, 32					; 00000020H
	fmul	ST(0), ST(1)
	add	eax, 32					; 00000020H
	dec	edx
	fadd	QWORD PTR [eax-40]
	fstp	QWORD PTR [eax-40]
	fld	QWORD PTR [ecx-40]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [eax-32]
	fstp	QWORD PTR [eax-32]
	fld	ST(0)
	fmul	QWORD PTR [ecx-32]
	fadd	QWORD PTR [eax-24]
	fstp	QWORD PTR [eax-24]
	fld	QWORD PTR [ecx-24]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [eax-16]
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LN152@facet_scal@10

; 537  :        for ( k = 0 ; k < SDIM ; k++ )

	fstp	ST(0)
$LC151@facet_scal@10:
	cmp	edi, esi
	jge	SHORT $LN23@facet_scal@10
	mov	eax, DWORD PTR tv9067[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR _gauss2Dpt
	fld	QWORD PTR [ecx+edx*8]
	mov	edx, DWORD PTR _gauss2Dwt
	mov	ecx, DWORD PTR _m$[ebp]
	fmul	QWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _gauss2Dpt
	add	eax, ecx
	fmul	QWORD PTR [edx+eax*8]
	mov	eax, DWORD PTR _second$[ebp]
	mov	edx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR tv9008[ebp]
	add	eax, ecx
	lea	ecx, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ebx+ecx*2]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	ecx, DWORD PTR [edi+eax*2]
	mov	eax, esi
	lea	edx, DWORD PTR [edx+edi*8]
	lea	ecx, DWORD PTR _sumhess$[ebp+ecx*8]
	sub	eax, edi
$LC21@facet_scal@10:

; 538  :          sumhess[i][n][j][k] += gauss2Dwt[m]*gauss2Dpt[m][i]*gauss2Dpt[m][n]
; 539  :                                   *second[j][k];

	fld	ST(0)
	add	edx, 8
	fmul	QWORD PTR [edx-8]
	add	ecx, 8
	dec	eax
	fadd	QWORD PTR [ecx-8]
	fstp	QWORD PTR [ecx-8]
	jne	SHORT $LC21@facet_scal@10

; 537  :        for ( k = 0 ; k < SDIM ; k++ )

	fstp	ST(0)
$LN23@facet_scal@10:

; 536  :       for ( j = 0 ; j < SDIM ; j++ )

	inc	ebx
	cmp	ebx, esi
	jl	$LN24@facet_scal@10
$LN26@facet_scal@10:

; 535  :      for ( n = 0 ; n <= web.dimension ; n++ )

	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _web+620
	inc	eax
	mov	DWORD PTR _n$[ebp], eax
	cmp	eax, ecx
	jle	$LN27@facet_scal@10

; 534  :     for ( i = 0 ; i <= web.dimension ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	add	DWORD PTR tv9008[ebp], 6
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, ecx
	jle	$LN30@facet_scal@10
$LN38@facet_scal@10:

; 525  :   for ( m = 0, sum = 0.0 ; m < gauss2D_num ; m++ )

	mov	eax, DWORD PTR _m$[ebp]
	add	DWORD PTR tv9067[ebp], 3
	inc	eax
	mov	DWORD PTR _m$[ebp], eax
	cmp	eax, DWORD PTR _gauss2D_num
	jl	$LL305@facet_scal@10
$LN37@facet_scal@10:

; 544  :   for ( m = 0 ; m <= web.dimension ; m++ )

	mov	ecx, DWORD PTR _web+620
	fld	ST(0)
	fld	QWORD PTR _area$[ebp]
	xor	edi, edi
	fmul	ST(1), ST(0)
	test	ecx, ecx
	js	SHORT $LN158@facet_scal@10

; 540  :   }
; 541  : 
; 542  :   /* final values */
; 543  :   value = area*sum;

	mov	ebx, DWORD PTR _f_info$GSCopy$[ebp]
	xor	edx, edx
$LN18@facet_scal@10:

; 545  :     for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	test	esi, esi
	jle	SHORT $LN17@facet_scal@10
$LN15@facet_scal@10:
	lea	ecx, DWORD PTR [edx+eax*8]

; 546  :       f_info->grad[m][j] = areagrad[m][j]*sum + area*sumgrad[m][j];

	fld	QWORD PTR _areagrad$[ebp+ecx]
	lea	ecx, DWORD PTR [edx+eax*8]
	fmul	ST(0), ST(3)
	inc	eax
	fld	QWORD PTR _sumgrad$[ebp+ecx]
	mov	ecx, DWORD PTR [ebx+1336]
	mov	ecx, DWORD PTR [ecx+edi*4]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [ecx+eax*8-8]
	mov	esi, DWORD PTR _web+616
	cmp	eax, esi
	jl	SHORT $LN15@facet_scal@10

; 545  :     for ( j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR _web+620
$LN17@facet_scal@10:

; 544  :   for ( m = 0 ; m <= web.dimension ; m++ )

	inc	edi
	add	edx, 48					; 00000030H
	cmp	edi, ecx
	jle	SHORT $LN18@facet_scal@10
$LN158@facet_scal@10:

; 547  :   for ( m = 0 ; m <= web.dimension ; m++ )

	xor	eax, eax
	mov	DWORD PTR _m$[ebp], eax
	cmp	ecx, eax
	jl	$LN271@facet_scal@10
	mov	DWORD PTR tv9862[ebp], eax
$LN161@facet_scal@10:

; 548  :    for ( i = 0 ; i <= web.dimension ; i++ )

	xor	ebx, ebx
	mov	DWORD PTR _i$[ebp], ebx
	test	ecx, ecx
	js	$LN11@facet_scal@10
	xor	edi, edi
$LN168@facet_scal@10:

; 549  :     for ( j = 0 ; j < SDIM ; j++ ) 

	xor	edx, edx
	test	esi, esi
	jle	$LN8@facet_scal@10
$LN162@facet_scal@10:

; 550  :      for ( k = 0 ; k < SDIM ; k++ ) 

	xor	eax, eax
	test	esi, esi
	jle	$LN5@facet_scal@10
	mov	ecx, DWORD PTR tv9862[ebp]
	add	ecx, edx
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
	lea	esi, DWORD PTR _areagrad$[ebp+ecx]
	lea	ecx, DWORD PTR _sumgrad$[ebp+ecx]
	mov	DWORD PTR tv9874[ebp], ecx
	mov	ecx, DWORD PTR tv9862[ebp]
	add	ecx, ebx
	lea	ecx, DWORD PTR [ecx+ecx*2]
	lea	ecx, DWORD PTR [edx+ecx*2]
	lea	ecx, DWORD PTR [ecx+ecx*2]
	mov	DWORD PTR tv9872[ebp], esi
	shl	ecx, 4
$LN159@facet_scal@10:

; 551  :        f_info->hess[m][i][j][k] = areahess[m][i][j][k]*sum
; 552  :             + areagrad[m][j]*sumgrad[i][k] + sumgrad[m][j]*areagrad[i][k]
; 553  :             + area*sumhess[m][i][j][k];

	mov	ebx, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR [ecx+eax*8]
	fld	QWORD PTR _areahess$[ebp+esi]
	lea	esi, DWORD PTR [edi+eax*8]
	fmul	ST(0), ST(3)
	fld	QWORD PTR _sumgrad$[ebp+esi]
	mov	esi, DWORD PTR tv9872[ebp]
	fmul	QWORD PTR [esi]
	lea	esi, DWORD PTR [edi+eax*8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _areagrad$[ebp+esi]
	mov	esi, DWORD PTR tv9874[ebp]
	fmul	QWORD PTR [esi]
	lea	esi, DWORD PTR [ecx+eax*8]
	inc	eax
	faddp	ST(1), ST(0)
	fld	QWORD PTR _sumhess$[ebp+esi]
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	esi, DWORD PTR [esi+1340]
	fmul	ST(0), ST(2)
	mov	esi, DWORD PTR [esi+ebx*4]
	mov	ebx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR [esi+ebx*4]
	faddp	ST(1), ST(0)
	mov	esi, DWORD PTR [esi+edx*4]
	fstp	QWORD PTR [esi+eax*8-8]
	mov	esi, DWORD PTR _web+616
	cmp	eax, esi
	jl	SHORT $LN159@facet_scal@10
$LN5@facet_scal@10:

; 549  :     for ( j = 0 ; j < SDIM ; j++ ) 

	inc	edx
	cmp	edx, esi
	jl	$LN162@facet_scal@10
	mov	ecx, DWORD PTR _web+620
$LN8@facet_scal@10:

; 548  :    for ( i = 0 ; i <= web.dimension ; i++ )

	inc	ebx
	add	edi, 48					; 00000030H
	mov	DWORD PTR _i$[ebp], ebx
	cmp	ebx, ecx
	jle	$LN168@facet_scal@10
$LN11@facet_scal@10:

; 547  :   for ( m = 0 ; m <= web.dimension ; m++ )

	mov	eax, DWORD PTR _m$[ebp]
	add	DWORD PTR tv9862[ebp], 6
	inc	eax
	mov	DWORD PTR _m$[ebp], eax
	cmp	eax, ecx
	jle	$LN161@facet_scal@10
$LN271@facet_scal@10:

; 549  :     for ( j = 0 ; j < SDIM ; j++ ) 

	fstp	ST(0)
	pop	ebx
$LN306@facet_scal@10:

; 554  :   return value;
; 555  : } // end facet_scalar_integral_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(1)
	pop	edi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_scalar_integral_hess ENDP
_TEXT	ENDS
PUBLIC	_facet_vector_integral
EXTRN	_lagrange_vector_integral:PROC
; Function compile flags: /Ogtp
;	COMDAT _facet_vector_integral
_TEXT	SEGMENT
_sign$ = -24						; size = 8
_value$ = -16						; size = 8
_mi$ = -8						; size = 4
tv322 = -4						; size = 4
_j$ = 8							; size = 4
_m$ = 8							; size = 4
_f_info$ = 8						; size = 4
_facet_vector_integral PROC				; COMDAT

; 912  : { int m,j;

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 913  :   REAL value=0.0;
; 914  :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	ecx, DWORD PTR _web+236
	fldz
	push	esi
	fst	QWORD PTR _value$[ebp]
	mov	esi, DWORD PTR _f_info$[ebp]
	mov	eax, DWORD PTR [esi]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN11@facet_vect@5
	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN41@facet_vect@5
$LN11@facet_vect@5:
	fld1
$LN41@facet_vect@5:

; 915  :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [esi+8]
	fstp	QWORD PTR _sign$[ebp]

; 916  :    
; 917  :   if ( web.modeltype == QUADRATIC ) return facet_vector_integral_q(f_info);

	mov	ecx, DWORD PTR _web+628
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list
	mov	DWORD PTR _mi$[ebp], eax
	cmp	ecx, 2
	jne	SHORT $LN8@facet_vect@5
	push	esi
	fstp	ST(0)
	call	_facet_vector_integral_q
	add	esp, 4
	pop	esi

; 929  : } // end facet_vector_integral()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@facet_vect@5:

; 918  :   if ( web.modeltype == LAGRANGE ) return lagrange_vector_integral(f_info);

	cmp	ecx, 3
	jne	SHORT $LN7@facet_vect@5
	push	esi
	fstp	ST(0)
	call	_lagrange_vector_integral
	add	esp, 4
	pop	esi

; 929  : } // end facet_vector_integral()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@facet_vect@5:
	push	edi

; 919  :   for ( m = 0 ; m < gauss2D_num ; m++ )

	xor	edi, edi
	mov	DWORD PTR _m$[ebp], edi
	cmp	DWORD PTR _gauss2D_num, edi
	jle	$LN4@facet_vect@5
	mov	ecx, DWORD PTR _web+616
	push	ebx
$LN18@facet_vect@5:

; 920  :   { 
; 921  :     f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	fild	DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [esi+1268]
	mov	edx, DWORD PTR [edx+edi*4]
	add	ecx, ecx
	fstp	QWORD PTR [edx+ecx*8]

; 922  :     for ( j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR _web+616
	mov	DWORD PTR _j$[ebp], 0
	test	ecx, ecx
	jle	SHORT $LN5@facet_vect@5

; 920  :   { 
; 921  :     f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	lea	ecx, DWORD PTR [esi+1288]
	mov	DWORD PTR tv322[ebp], ecx
	lea	ebx, DWORD PTR [eax+232]
	npad	5
$LL39@facet_vect@5:

; 923  :      { REAL  green = gauss2Dwt[m]*
; 924  :          eval(mi->expr[j],f_info->gauss_pt[m],f_info->id,NULL);

	mov	edx, DWORD PTR [esi]
	fstp	ST(0)
	mov	eax, DWORD PTR [esi+1268]
	mov	ecx, DWORD PTR [eax+edi*4]
	push	0
	push	edx
	mov	edx, DWORD PTR [ebx]
	push	ecx
	push	edx
	call	_eval
	mov	eax, DWORD PTR _gauss2Dwt
	fmul	QWORD PTR [eax+edi*8]

; 925  :        value += f_info->normal[j]*green;

	mov	ecx, DWORD PTR tv322[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	add	ecx, 8
	fmul	QWORD PTR [ecx-8]
	inc	eax
	mov	DWORD PTR tv322[ebp], ecx
	mov	ecx, DWORD PTR _web+616
	fadd	QWORD PTR _value$[ebp]
	add	esp, 16					; 00000010H
	add	ebx, 4
	mov	DWORD PTR _j$[ebp], eax
	fst	QWORD PTR _value$[ebp]
	cmp	eax, ecx
	jl	SHORT $LL39@facet_vect@5

; 922  :     for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR _mi$[ebp]
$LN5@facet_vect@5:

; 919  :   for ( m = 0 ; m < gauss2D_num ; m++ )

	inc	edi
	mov	DWORD PTR _m$[ebp], edi
	cmp	edi, DWORD PTR _gauss2D_num
	jl	$LN18@facet_vect@5
	pop	ebx
$LN4@facet_vect@5:

; 926  :      }
; 927  :   }
; 928  :   return sign*value/2;  /* 2 is triangle factor for normal */

	fmul	QWORD PTR _sign$[ebp]
	pop	edi
	pop	esi
	fmul	QWORD PTR __real@3fe0000000000000

; 929  : } // end facet_vector_integral()

	mov	esp, ebp
	pop	ebp
	ret	0
_facet_vector_integral ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_facet_vector_integral_grad
EXTRN	_cross_prod:PROC
EXTRN	_lagrange_vector_integral_grad:PROC
; Function compile flags: /Ogtp
;	COMDAT _facet_vector_integral_grad
_TEXT	SEGMENT
_sign$ = -492						; size = 8
_weight$89604 = -484					; size = 8
_mi$ = -476						; size = 4
_value$ = -472						; size = 8
tv1507 = -464						; size = 4
tv1510 = -460						; size = 4
tv1484 = -456						; size = 4
tv1476 = -452						; size = 4
tv758 = -448						; size = 4
_j$ = -448						; size = 4
_m$ = -444						; size = 4
tv756 = -440						; size = 4
tv129 = -440						; size = 4
_derivs$ = -436						; size = 288
_cross1$ = -148						; size = 48
_cross0$ = -100						; size = 48
_val$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_facet_vector_integral_grad PROC			; COMDAT

; 940  : { int m,j,k;

	push	ebp
	mov	ebp, esp
	sub	esp, 492				; 000001ecH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 941  :   REAL value = 0.0;
; 942  :   REAL val[MAXCOORD];
; 943  :   REAL derivs[MAXCOORD][MAXCOORD];
; 944  :   REAL sum;
; 945  :   REAL cross0[MAXCOORD],cross1[MAXCOORD];
; 946  :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	ecx, DWORD PTR _web+236
	fldz
	push	ebx
	fst	QWORD PTR _value$[ebp]
	push	esi
	mov	esi, DWORD PTR _f_info$[ebp]
	mov	eax, DWORD PTR [esi]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN23@facet_vect@6
	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN78@facet_vect@6
$LN23@facet_vect@6:
	fld1
$LN78@facet_vect@6:

; 947  :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [esi+8]
	fstp	QWORD PTR _sign$[ebp]
	cdq
	mov	ebx, eax

; 948  : 
; 949  :   if ( web.modeltype == QUADRATIC ) return facet_vector_integral_q_grad(f_info);

	mov	eax, DWORD PTR _web+628
	xor	ebx, edx
	sub	ebx, edx
	imul	ebx, 2928				; 00000b70H
	add	ebx, DWORD PTR _meth_inst_list
	mov	DWORD PTR _mi$[ebp], ebx
	cmp	eax, 2
	jne	SHORT $LN20@facet_vect@6
	push	esi
	fstp	ST(0)
	call	_facet_vector_integral_q_grad
	add	esp, 4
	pop	esi
	pop	ebx

; 972  :        }
; 973  :      }
; 974  : 
; 975  :   return value/2;
; 976  : } // end facet_vector_integral_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN20@facet_vect@6:

; 950  :   if ( web.modeltype == LAGRANGE ) return lagrange_vector_integral_grad(f_info);

	cmp	eax, 3
	jne	SHORT $LN19@facet_vect@6
	push	esi
	fstp	ST(0)
	call	_lagrange_vector_integral_grad
	add	esp, 4
	pop	esi
	pop	ebx

; 972  :        }
; 973  :      }
; 974  : 
; 975  :   return value/2;
; 976  : } // end facet_vector_integral_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN19@facet_vect@6:
	push	edi

; 951  :   for ( j = 0 ; j < SDIM ; j++ ) 

	mov	edi, DWORD PTR _web+616
	xor	eax, eax
	test	edi, edi
	jle	SHORT $LN59@facet_vect@6
$LN18@facet_vect@6:

; 952  :     for ( m = 0 ; m < FACET_VERTS ; m++ )
; 953  :        f_info->grad[m][j] = 0.0;

	mov	edx, DWORD PTR [esi+1336]
	mov	ecx, DWORD PTR [edx]
	fst	QWORD PTR [ecx+eax*8]
	mov	edx, DWORD PTR [esi+1336]
	mov	ecx, DWORD PTR [edx+4]
	fst	QWORD PTR [ecx+eax*8]
	mov	edx, DWORD PTR [esi+1336]
	mov	ecx, DWORD PTR [edx+8]
	fst	QWORD PTR [ecx+eax*8]
	mov	edi, DWORD PTR _web+616
	inc	eax
	cmp	eax, edi
	jl	SHORT $LN18@facet_vect@6
$LN59@facet_vect@6:

; 954  :     for ( m = 0 ; m < gauss2D_num ; m++ )

	xor	ecx, ecx
	fstp	ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	mov	DWORD PTR _m$[ebp], ecx
	cmp	DWORD PTR _gauss2D_num, ecx
	jle	$LN10@facet_vect@6
	mov	DWORD PTR tv1476[ebp], 16		; 00000010H
	jmp	SHORT $LN79@facet_vect@6
$LL77@facet_vect@6:
	mov	ecx, DWORD PTR _m$[ebp]
	mov	ebx, DWORD PTR _mi$[ebp]
$LN79@facet_vect@6:

; 955  :     { REAL weight = sign*gauss2Dwt[m];

	mov	edx, DWORD PTR _gauss2Dwt

; 963  :       for ( k = 0 ; k < SDIM ; k++ )

	fstp	ST(0)
	fld	QWORD PTR [edx+ecx*8]
	mov	eax, DWORD PTR [esi+1268]
	fmul	QWORD PTR _sign$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	add	edi, edi
	fstp	QWORD PTR _weight$89604[ebp]
	fild	DWORD PTR _m$[ebp]
	fstp	QWORD PTR [edx+edi*8]
	mov	eax, DWORD PTR _web+616
	xor	edi, edi
	test	eax, eax
	jle	SHORT $LN7@facet_vect@6

; 955  :     { REAL weight = sign*gauss2Dwt[m];

	lea	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR tv756[ebp], edx
	lea	edx, DWORD PTR _derivs$[ebp]
	mov	DWORD PTR tv758[ebp], edx
	add	ebx, 232				; 000000e8H
	jmp	SHORT $LN9@facet_vect@6
$LL46@facet_vect@6:
	mov	ecx, DWORD PTR _m$[ebp]
$LN9@facet_vect@6:

; 956  :       f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */
; 957  :       for ( j = 0 ; j < SDIM ; j++ ) 
; 958  :         eval_all(mi->expr[j],f_info->gauss_pt[m],SDIM,val+j,
; 959  :                                                         derivs[j],f_info->id);

	mov	edx, DWORD PTR [esi]
	push	edx
	mov	edx, DWORD PTR tv758[ebp]
	push	edx
	mov	edx, DWORD PTR tv756[ebp]
	push	edx
	mov	edx, DWORD PTR [ebx]
	push	eax
	mov	eax, DWORD PTR [esi+1268]
	mov	ecx, DWORD PTR [eax+ecx*4]
	push	ecx
	push	edx
	call	_eval_all
	mov	eax, DWORD PTR _web+616
	add	DWORD PTR tv758[ebp], 48		; 00000030H
	add	DWORD PTR tv756[ebp], 8
	inc	edi
	add	esp, 24					; 00000018H
	add	ebx, 4
	cmp	edi, eax
	jl	SHORT $LL46@facet_vect@6
$LN7@facet_vect@6:

; 960  :       value += weight*SDIM_dot(val,f_info->normal);

	push	eax
	lea	eax, DWORD PTR [esi+1288]
	push	eax
	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	call	_dot
	fmul	QWORD PTR _weight$89604[ebp]

; 961  :       cross_prod(val,f_info->sides[0][0],cross0);

	mov	edx, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [edx]
	fadd	QWORD PTR _value$[ebp]
	lea	ecx, DWORD PTR _cross0$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [eax]
	push	ecx
	fstp	QWORD PTR _value$[ebp]
	lea	edx, DWORD PTR _val$[ebp]
	push	edx
	call	_cross_prod

; 962  :       cross_prod(val,f_info->sides[0][1],cross1);

	mov	ecx, DWORD PTR [esi+1276]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR _cross1$[ebp]
	push	eax
	mov	eax, DWORD PTR [edx+4]
	push	eax
	lea	ecx, DWORD PTR _val$[ebp]
	push	ecx
	call	_cross_prod

; 963  :       for ( k = 0 ; k < SDIM ; k++ )

	fld	QWORD PTR __real@3fe0000000000000
	mov	edi, DWORD PTR _web+616
	add	esp, 36					; 00000024H
	xor	eax, eax
	test	edi, edi
	jle	$LN11@facet_vect@6
	mov	ecx, DWORD PTR _gauss2Dpt
	fldz
	mov	edx, DWORD PTR tv1476[ebp]
	fld	QWORD PTR _weight$89604[ebp]
	lea	ebx, DWORD PTR [edx+ecx-16]
	mov	DWORD PTR tv1510[ebp], ebx
	lea	ebx, DWORD PTR [edx+ecx-8]
	add	edx, ecx
	mov	DWORD PTR tv1507[ebp], ebx
	mov	DWORD PTR tv1484[ebp], edx
$LN6@facet_vect@6:

; 964  :       { for ( sum = 0.0, j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	fld	ST(1)
	cmp	edi, 4
	jl	SHORT $LC42@facet_vect@6
	lea	ebx, DWORD PTR [edi-4]
	shr	ebx, 2
	inc	ebx
	mov	DWORD PTR tv129[ebp], ebx
	add	ebx, ebx
	add	ebx, ebx
	mov	DWORD PTR _j$[ebp], ebx
	mov	ebx, DWORD PTR tv129[ebp]
	lea	ecx, DWORD PTR [esi+1296]
	lea	edx, DWORD PTR _derivs$[ebp+eax*8+48]
$LN43@facet_vect@6:

; 965  :           sum += derivs[j][k]*f_info->normal[j];

	fld	QWORD PTR [ecx-8]
	add	ecx, 32					; 00000020H
	fmul	QWORD PTR [edx-48]
	add	edx, 192				; 000000c0H
	dec	ebx
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx-192]
	fmul	QWORD PTR [ecx-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-24]
	fmul	QWORD PTR [edx-144]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-16]
	fmul	QWORD PTR [edx-96]
	faddp	ST(1), ST(0)
	jne	SHORT $LN43@facet_vect@6

; 964  :       { for ( sum = 0.0, j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR _j$[ebp]
$LC42@facet_vect@6:
	cmp	ecx, edi
	jge	SHORT $LN41@facet_vect@6
	lea	ebx, DWORD PTR [ecx+ecx*2]
	lea	ebx, DWORD PTR [eax+ebx*2]
	lea	edx, DWORD PTR [esi+ecx*8+1288]
	lea	ebx, DWORD PTR _derivs$[ebp+ebx*8]
	sub	edi, ecx
$LC3@facet_vect@6:

; 965  :           sum += derivs[j][k]*f_info->normal[j];

	fld	QWORD PTR [edx]
	add	edx, 8
	fmul	QWORD PTR [ebx]
	add	ebx, 48					; 00000030H
	dec	edi
	faddp	ST(1), ST(0)
	jne	SHORT $LC3@facet_vect@6
$LN41@facet_vect@6:

; 966  :         f_info->grad[0][k] += weight*(gauss2Dpt[m][0]*sum
; 967  :                     + cross1[k] - cross0[k])/2;

	mov	edx, DWORD PTR [esi+1336]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR tv1510[ebp]
	fld	QWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax*8]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR _cross1$[ebp+eax*8]
	fsub	QWORD PTR _cross0$[ebp+eax*8]
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(4)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR [esi+1336]
	mov	edx, DWORD PTR [ecx+4]
	lea	ecx, DWORD PTR [edx+eax*8]

; 968  :         f_info->grad[1][k] += weight*(gauss2Dpt[m][1]*sum
; 969  :                     - cross1[k])/2;

	mov	edx, DWORD PTR tv1507[ebp]
	fld	QWORD PTR [edx]
	fmul	ST(0), ST(1)
	fsub	QWORD PTR _cross1$[ebp+eax*8]
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(4)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR [esi+1336]
	mov	edx, DWORD PTR [ecx+8]
	lea	ecx, DWORD PTR [edx+eax*8]

; 970  :         f_info->grad[2][k] += weight*(gauss2Dpt[m][2]*sum
; 971  :                     + cross0[k])/2;

	mov	edx, DWORD PTR tv1484[ebp]
	fmul	QWORD PTR [edx]
	inc	eax
	fadd	QWORD PTR _cross0$[ebp+eax*8-8]
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(3)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	edi, DWORD PTR _web+616
	cmp	eax, edi
	jl	$LN6@facet_vect@6

; 963  :       for ( k = 0 ; k < SDIM ; k++ )

	fstp	ST(0)
	fstp	ST(0)
$LN11@facet_vect@6:

; 954  :     for ( m = 0 ; m < gauss2D_num ; m++ )

	mov	eax, DWORD PTR _m$[ebp]
	add	DWORD PTR tv1476[ebp], 24		; 00000018H
	inc	eax
	mov	DWORD PTR _m$[ebp], eax
	cmp	eax, DWORD PTR _gauss2D_num
	jl	$LL77@facet_vect@6
$LN10@facet_vect@6:

; 972  :        }
; 973  :      }
; 974  : 
; 975  :   return value/2;
; 976  : } // end facet_vector_integral_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fmul	QWORD PTR _value$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_vector_integral_grad ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_facet_vector_integral_hess
EXTRN	_lagrange_vector_integral_hess:PROC
EXTRN	_mat3d_setup:PROC
; Function compile flags: /Ogtp
;	COMDAT _facet_vector_integral_hess
_TEXT	SEGMENT
_secondqXvS$ = -2400					; size = 168
_sign$ = -2232						; size = 8
_mi$ = -2224						; size = 4
_value$ = -2220						; size = 8
_weight$89646 = -2212					; size = 8
tv1311 = -2208						; size = 4
_second$ = -2204					; size = 4
_f_info$GSCopy$ = -2200					; size = 4
_m$ = -2196						; size = 4
_s1$ = -2192						; size = 4
_s2$ = -2188						; size = 4
tv1846 = -2184						; size = 4
tv1247 = -2184						; size = 4
_r$ = -2184						; size = 4
tv1358 = -2180						; size = 4
tv1289 = -2180						; size = 4
_s$ = -2176						; size = 4
tv1844 = -2172						; size = 4
tv1319 = -2172						; size = 4
tv1273 = -2172						; size = 4
_p$ = -2168						; size = 4
_secondxJ$ = -2164					; size = 1728
_cross1$ = -436						; size = 48
_cross0$ = -388						; size = 48
_derivs$ = -340						; size = 288
_val$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_facet_vector_integral_hess PROC			; COMDAT

; 988  : { int m,i,j,k;

	push	ebp
	mov	ebp, esp
	sub	esp, 2400				; 00000960H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 989  :   REAL value = 0.0;

	fldz
	push	esi
	mov	esi, DWORD PTR _f_info$[ebp]
	fstp	QWORD PTR _value$[ebp]

; 990  :   REAL val[MAXCOORD];
; 991  :   REAL derivs[MAXCOORD][MAXCOORD];
; 992  :   REAL sum;
; 993  :   REAL cross0[MAXCOORD],cross1[MAXCOORD];
; 994  :   MAT3D(second,MAXCOORD,MAXCOORD,MAXCOORD);

	push	6
	push	6
	push	6
	lea	eax, DWORD PTR _secondxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _secondqXvS$[ebp]
	push	ecx
	mov	DWORD PTR _f_info$GSCopy$[ebp], esi
	call	_mat3d_setup

; 995  :   REAL *s1 = f_info->sides[0][0];

	mov	edx, DWORD PTR [esi+1276]
	mov	DWORD PTR _second$[ebp], eax
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]

; 996  :   REAL *s2 = f_info->sides[0][1];

	mov	edx, DWORD PTR [eax+4]

; 997  :   int p,q,r,s;
; 998  :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	eax, DWORD PTR [esi]
	and	eax, 134217727				; 07ffffffH
	mov	DWORD PTR _s1$[ebp], ecx
	mov	ecx, DWORD PTR _web+236
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	add	esp, 20					; 00000014H
	or	eax, ecx
	mov	DWORD PTR _s2$[ebp], edx
	je	SHORT $LN67@facet_vect@7
	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN309@facet_vect@7
$LN67@facet_vect@7:
	fld1
$LN309@facet_vect@7:

; 999  :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [esi+8]
	fstp	QWORD PTR _sign$[ebp]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list
	mov	DWORD PTR _mi$[ebp], eax

; 1000 : 
; 1001 :   if ( web.modeltype == QUADRATIC ) return facet_vector_integral_q_hess(f_info);

	mov	eax, DWORD PTR _web+628
	cmp	eax, 2
	jne	SHORT $LN64@facet_vect@7
	push	esi
	call	_facet_vector_integral_q_hess
	add	esp, 4
	pop	esi

; 1095 :             }
; 1096 :      }
; 1097 : 
; 1098 :   return value/2;
; 1099 : } // end facet_vector_integral_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN64@facet_vect@7:

; 1002 :   if ( web.modeltype == LAGRANGE ) return lagrange_vector_integral_hess(f_info);

	cmp	eax, 3
	jne	SHORT $LN63@facet_vect@7
	push	esi
	call	_lagrange_vector_integral_hess
	add	esp, 4
	pop	esi

; 1095 :             }
; 1096 :      }
; 1097 : 
; 1098 :   return value/2;
; 1099 : } // end facet_vector_integral_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN63@facet_vect@7:

; 1003 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	fld	QWORD PTR __real@3fe0000000000000
	mov	DWORD PTR _m$[ebp], ecx
	cmp	DWORD PTR _gauss2D_num, ecx
	jle	$LN60@facet_vect@7
	mov	eax, DWORD PTR _web+616
	push	ebx
	push	edi
	npad	10
$LL307@facet_vect@7:

; 1004 :   { REAL weight = sign*gauss2Dwt[m];

	mov	edx, DWORD PTR _gauss2Dwt
	fstp	ST(0)
	mov	ecx, DWORD PTR _m$[ebp]
	fld	QWORD PTR [edx+ecx*8]

; 1005 :     f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	fmul	QWORD PTR _sign$[ebp]
	mov	edx, DWORD PTR [edi+1268]
	mov	ecx, DWORD PTR [edx+ecx*4]
	add	eax, eax
	fstp	QWORD PTR _weight$89646[ebp]

; 1006 :     for ( j = 0 ; j < SDIM ; j++ ) 

	xor	esi, esi
	fild	DWORD PTR _m$[ebp]
	fstp	QWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR _web+616
	test	eax, eax
	jle	SHORT $LN57@facet_vect@7

; 1004 :   { REAL weight = sign*gauss2Dwt[m];

	mov	ebx, DWORD PTR _mi$[ebp]
	lea	edx, DWORD PTR _val$[ebp]
	lea	ecx, DWORD PTR _derivs$[ebp]
	mov	DWORD PTR tv1844[ebp], edx
	mov	DWORD PTR tv1846[ebp], ecx
	add	ebx, 232				; 000000e8H
$LL59@facet_vect@7:

; 1007 :       eval_second(mi->expr[j],f_info->gauss_pt[m],SDIM,val+j,
; 1008 :                                               derivs[j],second[j],f_info->id);

	mov	edx, DWORD PTR [edi]
	mov	ecx, DWORD PTR _second$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	ecx, DWORD PTR tv1846[ebp]
	push	edx
	mov	edx, DWORD PTR tv1844[ebp]
	push	ecx
	mov	ecx, DWORD PTR _m$[ebp]
	push	edx
	push	eax
	mov	eax, DWORD PTR [edi+1268]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [ebx]
	push	edx
	push	eax
	call	_eval_second
	mov	eax, DWORD PTR _web+616
	add	DWORD PTR tv1846[ebp], 48		; 00000030H
	add	DWORD PTR tv1844[ebp], 8
	inc	esi
	add	esp, 28					; 0000001cH
	add	ebx, 4
	cmp	esi, eax
	jl	SHORT $LL59@facet_vect@7
$LN57@facet_vect@7:

; 1009 :     value += weight*SDIM_dot(val,f_info->normal);

	push	eax
	lea	eax, DWORD PTR [edi+1288]
	push	eax
	lea	ecx, DWORD PTR _val$[ebp]
	push	ecx
	call	_dot
	fmul	QWORD PTR _weight$89646[ebp]

; 1010 :     cross_prod(val,f_info->sides[0][0],cross0);

	mov	eax, DWORD PTR [edi+1276]
	mov	ecx, DWORD PTR [eax]
	fadd	QWORD PTR _value$[ebp]
	lea	edx, DWORD PTR _cross0$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx]
	push	edx
	fstp	QWORD PTR _value$[ebp]
	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	call	_cross_prod

; 1011 :     cross_prod(val,f_info->sides[0][1],cross1);

	mov	edx, DWORD PTR [edi+1276]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR _cross1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR _val$[ebp]
	push	edx
	call	_cross_prod

; 1012 :     for ( k = 0 ; k < SDIM ; k++ )

	fld	QWORD PTR __real@3fe0000000000000
	mov	eax, DWORD PTR _web+616
	fldz
	fld	QWORD PTR _weight$89646[ebp]
	add	esp, 36					; 00000024H
	xor	ecx, ecx
	test	eax, eax
	jle	$LN54@facet_vect@7
	mov	edx, DWORD PTR _m$[ebp]
	mov	esi, DWORD PTR _gauss2Dpt
	lea	edx, DWORD PTR [edx+edx*2]
	add	edx, edx
	add	edx, edx
	add	edx, edx
	lea	edi, DWORD PTR [edx+esi]
	mov	DWORD PTR tv1247[ebp], edi
	lea	edi, DWORD PTR [edx+esi+8]

; 1031 : 
; 1032 :                  if ( (r==1) && (p==i) ) 

	lea	edx, DWORD PTR [edx+esi+16]
	mov	DWORD PTR tv1273[ebp], edi
	mov	DWORD PTR tv1289[ebp], edx
$LN56@facet_vect@7:

; 1013 :     { for ( sum = 0.0, j = 0 ; j < SDIM ; j++ )

	xor	ebx, ebx
	fld	ST(1)
	cmp	eax, 4
	jl	SHORT $LN130@facet_vect@7
	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	lea	edi, DWORD PTR [eax-4]
	shr	edi, 2
	add	edx, 1296				; 00000510H
	inc	edi
	lea	esi, DWORD PTR _derivs$[ebp+ecx*8+48]
	lea	ebx, DWORD PTR [edi*4]
$LN91@facet_vect@7:

; 1014 :           sum += derivs[j][k]*f_info->normal[j];

	fld	QWORD PTR [esi-48]
	add	edx, 32					; 00000020H
	fmul	QWORD PTR [edx-40]
	add	esi, 192				; 000000c0H
	dec	edi
	faddp	ST(1), ST(0)
	fld	QWORD PTR [esi-192]
	fmul	QWORD PTR [edx-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [esi-144]
	fmul	QWORD PTR [edx-24]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [esi-96]
	fmul	QWORD PTR [edx-16]
	faddp	ST(1), ST(0)
	jne	SHORT $LN91@facet_vect@7
$LN130@facet_vect@7:

; 1013 :     { for ( sum = 0.0, j = 0 ; j < SDIM ; j++ )

	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	cmp	ebx, eax
	jge	SHORT $LN131@facet_vect@7
	lea	esi, DWORD PTR [ebx+ebx*2]
	lea	esi, DWORD PTR [ecx+esi*2]
	lea	edx, DWORD PTR [edi+ebx*8+1288]
	lea	esi, DWORD PTR _derivs$[ebp+esi*8]
	sub	eax, ebx
$LC53@facet_vect@7:

; 1014 :           sum += derivs[j][k]*f_info->normal[j];

	fld	QWORD PTR [esi]
	add	edx, 8
	fmul	QWORD PTR [edx-8]
	add	esi, 48					; 00000030H
	dec	eax
	faddp	ST(1), ST(0)
	jne	SHORT $LC53@facet_vect@7
$LN131@facet_vect@7:

; 1015 :       f_info->grad[0][k] += weight*(gauss2Dpt[m][0]*sum
; 1016 :                     + cross1[k] - cross0[k])/2;

	mov	eax, DWORD PTR [edi+1336]
	mov	edx, DWORD PTR [eax]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR tv1247[ebp]
	fld	QWORD PTR [edx]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR _cross1$[ebp+ecx*8]
	fsub	QWORD PTR _cross0$[ebp+ecx*8]
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(4)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR [edi+1336]
	mov	edx, DWORD PTR [eax+4]
	lea	eax, DWORD PTR [edx+ecx*8]

; 1017 :       f_info->grad[1][k] += weight*(gauss2Dpt[m][1]*sum
; 1018 :                     - cross1[k])/2;

	mov	edx, DWORD PTR tv1273[ebp]
	fld	QWORD PTR [edx]
	fmul	ST(0), ST(1)
	fsub	QWORD PTR _cross1$[ebp+ecx*8]
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(4)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR [edi+1336]
	mov	edx, DWORD PTR [eax+8]
	lea	eax, DWORD PTR [edx+ecx*8]

; 1019 :       f_info->grad[2][k] += weight*(gauss2Dpt[m][2]*sum
; 1020 :                     + cross0[k])/2;

	mov	edx, DWORD PTR tv1289[ebp]
	fmul	QWORD PTR [edx]
	inc	ecx
	fadd	QWORD PTR _cross0$[ebp+ecx*8-8]
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(3)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR _web+616
	cmp	ecx, eax
	jl	$LN56@facet_vect@7
$LN54@facet_vect@7:

; 1021 :     }
; 1022 :     for ( r = 0 ; r < FACET_VERTS ; r++ )

	xor	edi, edi
	mov	DWORD PTR _r$[ebp], edi
$LN50@facet_vect@7:

; 1023 :       for ( s = 0 ; s < FACET_VERTS ; s++ )

	xor	esi, esi
	mov	DWORD PTR _s$[ebp], esi
$LN47@facet_vect@7:

; 1024 :         for ( p = 0 ; p < SDIM ; p++ )

	xor	edx, edx
	mov	DWORD PTR _p$[ebp], edx
	test	eax, eax
	jle	$LN46@facet_vect@7
$LN44@facet_vect@7:

; 1025 :           for ( q = 0 ; q < SDIM ; q++ )

	xor	ecx, ecx
	test	eax, eax
	jle	$LN43@facet_vect@7
	mov	eax, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR _gauss2Dpt
	lea	eax, DWORD PTR [eax+eax*2]
	add	edi, eax
	add	eax, esi

; 1026 :             { sum = 0.0;
; 1027 :               for ( i = 0 ; i < 3 ; i++ )

	lea	edi, DWORD PTR [edx+edi*8]
	lea	eax, DWORD PTR [edx+eax*8]
	mov	DWORD PTR tv1358[ebp], edi
	mov	DWORD PTR tv1319[ebp], eax
$LN41@facet_vect@7:
	fld	ST(1)
	xor	esi, esi
$LN38@facet_vect@7:

; 1028 :                { REAL tmp;
; 1029 :                  j = (i+1)%3;

	lea	eax, DWORD PTR [esi+1]
	mov	DWORD PTR tv1311[ebp], eax
	cdq
	mov	edi, 3
	idiv	edi

; 1030 :                  k = (j+1)%3;

	mov	ebx, 3
	mov	edi, edx
	lea	eax, DWORD PTR [edi+1]
	cdq
	idiv	ebx

; 1031 : 
; 1032 :                  if ( (r==1) && (p==i) ) 

	mov	eax, DWORD PTR _r$[ebp]
	cmp	eax, 1
	jne	SHORT $LN33@facet_vect@7
	cmp	DWORD PTR _p$[ebp], esi
	jne	$LN111@facet_vect@7

; 1033 :                   { sum += s2[j]*gauss2Dpt[m][s]*derivs[k][q];

	mov	ebx, DWORD PTR _s2$[ebp]
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR tv1319[ebp]
	fmul	QWORD PTR [ebx]
	lea	eax, DWORD PTR [edx+edx*2]
	lea	eax, DWORD PTR [ecx+eax*2]
	fmul	QWORD PTR _derivs$[ebp+eax*8]

; 1034 :                     if ( (s==2) && (q==j) ) sum += val[k];

	mov	eax, DWORD PTR _s$[ebp]
	faddp	ST(1), ST(0)
	cmp	eax, 2
	jne	SHORT $LN34@facet_vect@7
	cmp	ecx, edi
	jne	$LN113@facet_vect@7
	fadd	QWORD PTR _val$[ebp+edx*8]

; 1035 :                     if ( (s==0) && (q==j) ) sum -= val[k];

	jmp	$LN92@facet_vect@7
$LN34@facet_vect@7:
	test	eax, eax
	jne	$LN111@facet_vect@7
	cmp	ecx, edi
	jne	$LN112@facet_vect@7
	fsub	QWORD PTR _val$[ebp+edx*8]

; 1036 :                   }
; 1037 :                  if ( (r==0) && (p==i) ) 

	jmp	$LN112@facet_vect@7
$LN33@facet_vect@7:
	test	eax, eax
	jne	$LN30@facet_vect@7
	cmp	DWORD PTR _p$[ebp], esi
	jne	SHORT $LN109@facet_vect@7

; 1038 :                   { sum -= s2[j]*gauss2Dpt[m][s]*derivs[k][q];

	mov	ebx, DWORD PTR _s2$[ebp]
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR tv1319[ebp]
	fmul	QWORD PTR [ebx]
	lea	eax, DWORD PTR [edx+edx*2]
	lea	eax, DWORD PTR [ecx+eax*2]
	fmul	QWORD PTR _derivs$[ebp+eax*8]

; 1039 :                     if ( (s==2) && (q==j) ) sum -= val[k];

	mov	eax, DWORD PTR _s$[ebp]
	fsubp	ST(1), ST(0)
	cmp	eax, 2
	jne	SHORT $LN31@facet_vect@7
	cmp	ecx, edi
	jne	SHORT $LN109@facet_vect@7
	fsub	QWORD PTR _val$[ebp+edx*8]
$LN109@facet_vect@7:

; 1047 :                   }
; 1048 :                  if ( (r==0) && (p==j) ) 

	cmp	DWORD PTR _p$[ebp], edi
	jne	$LN111@facet_vect@7

; 1049 :                   { sum -= s1[i]*gauss2Dpt[m][s]*derivs[k][q];

	mov	ebx, DWORD PTR _s1$[ebp]
	fld	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR tv1319[ebp]
	fmul	QWORD PTR [ebx]
	lea	eax, DWORD PTR [edx+edx*2]
	lea	eax, DWORD PTR [ecx+eax*2]
	fmul	QWORD PTR _derivs$[ebp+eax*8]

; 1050 :                     if ( (s==1) && (q==i) ) sum -= val[k];

	mov	eax, DWORD PTR _s$[ebp]
	fsubp	ST(1), ST(0)
	cmp	eax, 1
	jne	SHORT $LN25@facet_vect@7
	cmp	ecx, esi
	jne	$LN113@facet_vect@7
	fsub	QWORD PTR _val$[ebp+edx*8]

; 1051 :                     if ( (s==0) && (q==i) ) sum += val[k];

	jmp	SHORT $LN95@facet_vect@7
$LN31@facet_vect@7:

; 1040 :                     if ( (s==0) && (q==j) ) sum += val[k];

	test	eax, eax
	jne	SHORT $LN109@facet_vect@7
	cmp	ecx, edi
	jne	SHORT $LN109@facet_vect@7
	fadd	QWORD PTR _val$[ebp+edx*8]

; 1041 :                   }
; 1042 : 
; 1043 :                  if ( (r==2) && (p==j) ) 

	jmp	SHORT $LN109@facet_vect@7
$LN30@facet_vect@7:
	cmp	eax, 2
	jne	SHORT $LN111@facet_vect@7
	cmp	DWORD PTR _p$[ebp], edi
	jne	SHORT $LN111@facet_vect@7

; 1044 :                   { sum += s1[i]*gauss2Dpt[m][s]*derivs[k][q];

	mov	ebx, DWORD PTR _s1$[ebp]
	fld	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR tv1319[ebp]
	fmul	QWORD PTR [ebx]
	lea	eax, DWORD PTR [edx+edx*2]
	lea	eax, DWORD PTR [ecx+eax*2]
	fmul	QWORD PTR _derivs$[ebp+eax*8]

; 1045 :                     if ( (s==1) && (q==i) ) sum += val[k];

	mov	eax, DWORD PTR _s$[ebp]
	faddp	ST(1), ST(0)
	cmp	eax, 1
	jne	SHORT $LN28@facet_vect@7
	cmp	ecx, esi
	jne	$LN113@facet_vect@7
	fadd	QWORD PTR _val$[ebp+edx*8]

; 1046 :                     if ( (s==0) && (q==i) ) sum -= val[k];

	jmp	SHORT $LN95@facet_vect@7
$LN28@facet_vect@7:
	test	eax, eax
	jne	SHORT $LN111@facet_vect@7
	cmp	ecx, esi
	jne	$LN120@facet_vect@7
	fsub	QWORD PTR _val$[ebp+edx*8]

; 1047 :                   }
; 1048 :                  if ( (r==0) && (p==j) ) 

	jmp	SHORT $LN112@facet_vect@7
$LN25@facet_vect@7:

; 1051 :                     if ( (s==0) && (q==i) ) sum += val[k];

	test	eax, eax
	jne	SHORT $LN111@facet_vect@7
	cmp	ecx, esi
	jne	SHORT $LN120@facet_vect@7
	fadd	QWORD PTR _val$[ebp+edx*8]

; 1052 :                   }
; 1053 : 
; 1054 :                  if ( (s==1) && (q==i) ) sum += s2[j]*gauss2Dpt[m][r]*derivs[k][p];

	jmp	SHORT $LN112@facet_vect@7
$LN111@facet_vect@7:
	mov	eax, DWORD PTR _s$[ebp]
	cmp	eax, 1
	jne	SHORT $LN23@facet_vect@7
$LN95@facet_vect@7:
	cmp	ecx, esi
	jne	$LN113@facet_vect@7
	mov	ebx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+edx*2]
	lea	eax, DWORD PTR [ebx+eax*2]
	mov	ebx, DWORD PTR _s2$[ebp]
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR tv1358[ebp]
	fmul	QWORD PTR [ebx]
	fmul	QWORD PTR _derivs$[ebp+eax*8]
	faddp	ST(1), ST(0)

; 1055 :                  if ( (s==0) && (q==i) ) sum -= s2[j]*gauss2Dpt[m][r]*derivs[k][p];

	jmp	SHORT $LN113@facet_vect@7
$LN23@facet_vect@7:
	test	eax, eax
	jne	$LN22@facet_vect@7
$LN112@facet_vect@7:
	cmp	ecx, esi
	jne	SHORT $LN120@facet_vect@7
	mov	ebx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+edx*2]
	lea	eax, DWORD PTR [ebx+eax*2]
	mov	ebx, DWORD PTR _s2$[ebp]
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR tv1358[ebp]
	fmul	QWORD PTR [ebx]
	fmul	QWORD PTR _derivs$[ebp+eax*8]
	fsubp	ST(1), ST(0)
$LN120@facet_vect@7:

; 1057 :                  if ( (s==0) && (q==j) ) sum -= s1[i]*gauss2Dpt[m][r]*derivs[k][p];

	cmp	ecx, edi
	jne	SHORT $LN113@facet_vect@7
	mov	ebx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+edx*2]
	lea	eax, DWORD PTR [ebx+eax*2]
	mov	ebx, DWORD PTR _s1$[ebp]
	fld	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR tv1358[ebp]
	fmul	QWORD PTR [ebx]
	fmul	QWORD PTR _derivs$[ebp+eax*8]
	fsubp	ST(1), ST(0)
$LN113@facet_vect@7:

; 1058 :                  tmp = s1[i]*s2[j]*gauss2Dpt[m][r]*gauss2Dpt[m][s];

	mov	eax, DWORD PTR _s1$[ebp]
	fld	QWORD PTR [eax+esi*8]
	mov	eax, DWORD PTR _s2$[ebp]
	fmul	QWORD PTR [eax+edi*8]
	mov	eax, DWORD PTR tv1358[ebp]
	mov	esi, DWORD PTR tv1311[ebp]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv1319[ebp]
	fmul	QWORD PTR [eax]

; 1059 :                  sum += tmp*second[k][p][q];

	mov	eax, DWORD PTR _second$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	fmul	QWORD PTR [edx+ecx*8]
	faddp	ST(1), ST(0)
	cmp	esi, 3
	jl	$LN38@facet_vect@7

; 1060 :               }
; 1061 :               f_info->hess[r][s][p][q] += weight * sum/2;

	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	fmul	ST(0), ST(1)
	mov	edx, DWORD PTR [edx+1340]
	mov	esi, DWORD PTR _r$[ebp]
	mov	edx, DWORD PTR [edx+esi*4]
	fmul	ST(0), ST(3)
	mov	esi, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	eax, DWORD PTR [edx+eax*4]
	fadd	QWORD PTR [eax+ecx*8]
	lea	eax, DWORD PTR [eax+ecx*8]

; 1062 :               sum = 0.0;
; 1063 :               for ( i = 0 ; i < 3 ; i++ )

	xor	esi, esi
	fstp	QWORD PTR [eax]
	fld	ST(1)
$LN19@facet_vect@7:

; 1064 :                { REAL tmp;
; 1065 :                  j = (i+2)%3;

	lea	eax, DWORD PTR [esi+2]
	cdq
	mov	edi, 3
	idiv	edi

; 1066 :                  k = (j+2)%3;

	mov	ebx, 3
	mov	edi, edx
	lea	eax, DWORD PTR [edi+2]
	cdq
	idiv	ebx

; 1067 :                  if ( (r==1) && (p==i) ) 

	mov	eax, DWORD PTR _r$[ebp]
	cmp	eax, 1
	jne	$LN14@facet_vect@7
	cmp	DWORD PTR _p$[ebp], esi
	jne	$LN106@facet_vect@7

; 1068 :                   { sum += s2[j]*gauss2Dpt[m][s]*derivs[k][q];

	mov	ebx, DWORD PTR _s2$[ebp]
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR tv1319[ebp]
	fmul	QWORD PTR [ebx]
	lea	eax, DWORD PTR [edx+edx*2]
	lea	eax, DWORD PTR [ecx+eax*2]
	fmul	QWORD PTR _derivs$[ebp+eax*8]

; 1069 :                     if ( (s==2) && (q==j) ) sum += val[k];

	mov	eax, DWORD PTR _s$[ebp]
	faddp	ST(1), ST(0)
	cmp	eax, 2
	jne	SHORT $LN15@facet_vect@7
	cmp	ecx, edi
	jne	$LN108@facet_vect@7
	fadd	QWORD PTR _val$[ebp+edx*8]

; 1070 :                     if ( (s==0) && (q==j) ) sum -= val[k];

	jmp	$LN97@facet_vect@7
$LN22@facet_vect@7:

; 1056 :                  if ( (s==2) && (q==j) ) sum += s1[i]*gauss2Dpt[m][r]*derivs[k][p];

	cmp	eax, 2
	jne	$LN113@facet_vect@7
$LN92@facet_vect@7:
	cmp	ecx, edi
	jne	$LN113@facet_vect@7
	mov	ebx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+edx*2]
	lea	eax, DWORD PTR [ebx+eax*2]
	mov	ebx, DWORD PTR _s1$[ebp]
	fld	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR tv1358[ebp]
	fmul	QWORD PTR [ebx]
	fmul	QWORD PTR _derivs$[ebp+eax*8]
	faddp	ST(1), ST(0)

; 1057 :                  if ( (s==0) && (q==j) ) sum -= s1[i]*gauss2Dpt[m][r]*derivs[k][p];

	jmp	$LN113@facet_vect@7
$LN15@facet_vect@7:

; 1070 :                     if ( (s==0) && (q==j) ) sum -= val[k];

	test	eax, eax
	jne	$LN106@facet_vect@7
	cmp	ecx, edi
	jne	$LN107@facet_vect@7
	fsub	QWORD PTR _val$[ebp+edx*8]

; 1071 :                   }
; 1072 :                  if ( (r==0) && (p==i) ) 

	jmp	$LN107@facet_vect@7
$LN14@facet_vect@7:
	test	eax, eax
	jne	$LN11@facet_vect@7
	cmp	DWORD PTR _p$[ebp], esi
	jne	SHORT $LN104@facet_vect@7

; 1073 :                   { sum -= s2[j]*gauss2Dpt[m][s]*derivs[k][q];

	mov	ebx, DWORD PTR _s2$[ebp]
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR tv1319[ebp]
	fmul	QWORD PTR [ebx]
	lea	eax, DWORD PTR [edx+edx*2]
	lea	eax, DWORD PTR [ecx+eax*2]
	fmul	QWORD PTR _derivs$[ebp+eax*8]

; 1074 :                     if ( (s==2) && (q==j) ) sum -= val[k];

	mov	eax, DWORD PTR _s$[ebp]
	fsubp	ST(1), ST(0)
	cmp	eax, 2
	jne	SHORT $LN12@facet_vect@7
	cmp	ecx, edi
	jne	SHORT $LN104@facet_vect@7
	fsub	QWORD PTR _val$[ebp+edx*8]
$LN104@facet_vect@7:

; 1081 :                   }
; 1082 :                  if ( (r==0) && (p==j) ) 

	cmp	DWORD PTR _p$[ebp], edi
	jne	$LN106@facet_vect@7

; 1083 :                   { sum -= s1[i]*gauss2Dpt[m][s]*derivs[k][q];

	mov	ebx, DWORD PTR _s1$[ebp]
	fld	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR tv1319[ebp]
	fmul	QWORD PTR [ebx]
	lea	eax, DWORD PTR [edx+edx*2]
	lea	eax, DWORD PTR [ecx+eax*2]
	fmul	QWORD PTR _derivs$[ebp+eax*8]

; 1084 :                     if ( (s==1) && (q==i) ) sum -= val[k];

	mov	eax, DWORD PTR _s$[ebp]
	fsubp	ST(1), ST(0)
	cmp	eax, 1
	jne	SHORT $LN6@facet_vect@7
	cmp	ecx, esi
	jne	$LN108@facet_vect@7
	fsub	QWORD PTR _val$[ebp+edx*8]

; 1085 :                     if ( (s==0) && (q==i) ) sum += val[k];

	jmp	SHORT $LN100@facet_vect@7
$LN12@facet_vect@7:

; 1075 :                     if ( (s==0) && (q==j) ) sum += val[k];

	test	eax, eax
	jne	SHORT $LN104@facet_vect@7
	cmp	ecx, edi
	jne	SHORT $LN104@facet_vect@7
	fadd	QWORD PTR _val$[ebp+edx*8]

; 1076 :                   }
; 1077 :                  if ( (r==2) && (p==j) ) 

	jmp	SHORT $LN104@facet_vect@7
$LN11@facet_vect@7:
	cmp	eax, 2
	jne	SHORT $LN106@facet_vect@7
	cmp	DWORD PTR _p$[ebp], edi
	jne	SHORT $LN106@facet_vect@7

; 1078 :                   { sum += s1[i]*gauss2Dpt[m][s]*derivs[k][q];

	mov	ebx, DWORD PTR _s1$[ebp]
	fld	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR tv1319[ebp]
	fmul	QWORD PTR [ebx]
	lea	eax, DWORD PTR [edx+edx*2]
	lea	eax, DWORD PTR [ecx+eax*2]
	fmul	QWORD PTR _derivs$[ebp+eax*8]

; 1079 :                     if ( (s==1) && (q==i) ) sum += val[k];

	mov	eax, DWORD PTR _s$[ebp]
	faddp	ST(1), ST(0)
	cmp	eax, 1
	jne	SHORT $LN9@facet_vect@7
	cmp	ecx, esi
	jne	$LN108@facet_vect@7
	fadd	QWORD PTR _val$[ebp+edx*8]

; 1080 :                     if ( (s==0) && (q==i) ) sum -= val[k];

	jmp	SHORT $LN100@facet_vect@7
$LN9@facet_vect@7:
	test	eax, eax
	jne	SHORT $LN106@facet_vect@7
	cmp	ecx, esi
	jne	$LN128@facet_vect@7
	fsub	QWORD PTR _val$[ebp+edx*8]

; 1081 :                   }
; 1082 :                  if ( (r==0) && (p==j) ) 

	jmp	SHORT $LN107@facet_vect@7
$LN6@facet_vect@7:

; 1085 :                     if ( (s==0) && (q==i) ) sum += val[k];

	test	eax, eax
	jne	SHORT $LN106@facet_vect@7
	cmp	ecx, esi
	jne	SHORT $LN128@facet_vect@7
	fadd	QWORD PTR _val$[ebp+edx*8]

; 1086 :                   }
; 1087 :                  if ( (s==1) && (q==i) ) sum += s2[j]*gauss2Dpt[m][r]*derivs[k][p];

	jmp	SHORT $LN107@facet_vect@7
$LN106@facet_vect@7:
	mov	eax, DWORD PTR _s$[ebp]
	cmp	eax, 1
	jne	SHORT $LN4@facet_vect@7
$LN100@facet_vect@7:
	cmp	ecx, esi
	jne	$LN108@facet_vect@7
	mov	ebx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+edx*2]
	lea	eax, DWORD PTR [ebx+eax*2]
	mov	ebx, DWORD PTR _s2$[ebp]
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR tv1358[ebp]
	fmul	QWORD PTR [ebx]
	fmul	QWORD PTR _derivs$[ebp+eax*8]
	faddp	ST(1), ST(0)

; 1088 :                  if ( (s==0) && (q==i) ) sum -= s2[j]*gauss2Dpt[m][r]*derivs[k][p];

	jmp	SHORT $LN108@facet_vect@7
$LN4@facet_vect@7:
	test	eax, eax
	jne	$LN3@facet_vect@7
$LN107@facet_vect@7:
	cmp	ecx, esi
	jne	SHORT $LN128@facet_vect@7
	mov	ebx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+edx*2]
	lea	eax, DWORD PTR [ebx+eax*2]
	mov	ebx, DWORD PTR _s2$[ebp]
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR tv1358[ebp]
	fmul	QWORD PTR [ebx]
	fmul	QWORD PTR _derivs$[ebp+eax*8]
	fsubp	ST(1), ST(0)
$LN128@facet_vect@7:

; 1090 :                  if ( (s==0) && (q==j) ) sum -= s1[i]*gauss2Dpt[m][r]*derivs[k][p];

	cmp	ecx, edi
	jne	SHORT $LN108@facet_vect@7
	mov	ebx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+edx*2]
	lea	eax, DWORD PTR [ebx+eax*2]
	mov	ebx, DWORD PTR _s1$[ebp]
	fld	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR tv1358[ebp]
	fmul	QWORD PTR [ebx]
	fmul	QWORD PTR _derivs$[ebp+eax*8]
	fsubp	ST(1), ST(0)
$LN108@facet_vect@7:

; 1091 :                  tmp = s1[i]*s2[j]*gauss2Dpt[m][r]*gauss2Dpt[m][s];

	mov	eax, DWORD PTR _s1$[ebp]
	fld	QWORD PTR [eax+esi*8]
	mov	eax, DWORD PTR _s2$[ebp]
	fmul	QWORD PTR [eax+edi*8]
	mov	eax, DWORD PTR tv1358[ebp]
	inc	esi
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv1319[ebp]
	fmul	QWORD PTR [eax]

; 1092 :                  sum += tmp*second[k][p][q];

	mov	eax, DWORD PTR _second$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	fmul	QWORD PTR [eax+ecx*8]
	faddp	ST(1), ST(0)
	cmp	esi, 3
	jl	$LN19@facet_vect@7

; 1093 :               }
; 1094 :               f_info->hess[r][s][p][q] -= weight * sum/2;

	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	fmul	ST(0), ST(1)
	mov	eax, DWORD PTR [eax+1340]
	mov	edi, DWORD PTR _r$[ebp]
	mov	eax, DWORD PTR [eax+edi*4]
	fmul	ST(0), ST(3)
	mov	esi, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR [eax+edx*4]
	fsubr	QWORD PTR [eax+ecx*8]
	lea	eax, DWORD PTR [eax+ecx*8]
	inc	ecx
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR _web+616
	cmp	ecx, eax
	jl	$LN41@facet_vect@7
$LN43@facet_vect@7:

; 1024 :         for ( p = 0 ; p < SDIM ; p++ )

	inc	edx
	mov	DWORD PTR _p$[ebp], edx
	cmp	edx, eax
	jl	$LN44@facet_vect@7
$LN46@facet_vect@7:

; 1023 :       for ( s = 0 ; s < FACET_VERTS ; s++ )

	inc	esi
	mov	DWORD PTR _s$[ebp], esi
	cmp	esi, 3
	jl	$LN47@facet_vect@7

; 1021 :     }
; 1022 :     for ( r = 0 ; r < FACET_VERTS ; r++ )

	inc	edi
	mov	DWORD PTR _r$[ebp], edi
	cmp	edi, 3
	jl	$LN50@facet_vect@7
	mov	ecx, DWORD PTR _m$[ebp]
	fstp	ST(0)
	inc	ecx
	fstp	ST(0)
	mov	DWORD PTR _m$[ebp], ecx
	cmp	ecx, DWORD PTR _gauss2D_num
	jl	$LL307@facet_vect@7
	pop	edi
	pop	ebx
$LN60@facet_vect@7:

; 1095 :             }
; 1096 :      }
; 1097 : 
; 1098 :   return value/2;
; 1099 : } // end facet_vector_integral_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fmul	QWORD PTR _value$[ebp]
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@facet_vect@7:

; 1089 :                  if ( (s==2) && (q==j) ) sum += s1[i]*gauss2Dpt[m][r]*derivs[k][p];

	cmp	eax, 2
	jne	$LN108@facet_vect@7
$LN97@facet_vect@7:
	cmp	ecx, edi
	jne	$LN108@facet_vect@7
	mov	ebx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+edx*2]
	lea	eax, DWORD PTR [ebx+eax*2]
	mov	ebx, DWORD PTR _s1$[ebp]
	fld	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR tv1358[ebp]
	fmul	QWORD PTR [ebx]
	fmul	QWORD PTR _derivs$[ebp+eax*8]
	faddp	ST(1), ST(0)

; 1090 :                  if ( (s==0) && (q==j) ) sum -= s1[i]*gauss2Dpt[m][r]*derivs[k][p];

	jmp	$LN108@facet_vect@7
_facet_vector_integral_hess ENDP
_TEXT	ENDS
END
