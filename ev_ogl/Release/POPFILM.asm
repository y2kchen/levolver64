; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\POPFILM.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_new_displacement:QWORD:06H
_DATA	ENDS
PUBLIC	_set_attr
EXTRN	_web:BYTE
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
;	COMDAT _set_attr
_TEXT	SEGMENT
_id$ = 8						; size = 4
_attrib$ = 12						; size = 8
_set_attr PROC						; COMDAT

; 21   : {

	push	ebp
	mov	ebp, esp

; 22   :   elptr(id)->attr |= attrib;

	mov	eax, DWORD PTR _id$[ebp]
	mov	ecx, eax
	shr	ecx, 29					; 0000001dH
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _web[ecx+12]
	mov	ecx, DWORD PTR _attrib$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _attrib$[ebp+4]
	or	DWORD PTR [eax+8], ecx
	or	DWORD PTR [eax+12], edx

; 23   : }

	pop	ebp
	ret	0
_set_attr ENDP
_TEXT	ENDS
PUBLIC	_unset_attr
; Function compile flags: /Ogtp
;	COMDAT _unset_attr
_TEXT	SEGMENT
_id$ = 8						; size = 4
_attrib$ = 12						; size = 8
_unset_attr PROC					; COMDAT

; 28   : {

	push	ebp
	mov	ebp, esp

; 29   :   elptr(id)->attr &= ~attrib;

	mov	eax, DWORD PTR _id$[ebp]
	mov	ecx, eax
	shr	ecx, 29					; 0000001dH
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _web[ecx+12]
	mov	ecx, DWORD PTR _attrib$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _attrib$[ebp+4]
	not	ecx
	and	DWORD PTR [eax+8], ecx
	not	edx
	and	DWORD PTR [eax+12], edx

; 30   : }

	pop	ebp
	ret	0
_unset_attr ENDP
_TEXT	ENDS
PUBLIC	_set_fe_edge
EXTRN	_top_timestamp:DWORD
EXTRN	_global_timestamp:DWORD
; Function compile flags: /Ogtp
;	COMDAT _set_fe_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_e_id$ = 12						; size = 4
_set_fe_edge PROC					; COMDAT

; 35   : {

	push	ebp
	mov	ebp, esp

; 36   :   if ( inverted(fe_id) ) invert(e_id);

	mov	eax, DWORD PTR _fe_id$[ebp]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN1@set_fe_edg
	xor	DWORD PTR _e_id$[ebp], 134217728	; 08000000H
$LN1@set_fe_edg:

; 37   :   feptr(fe_id)->fe_edge_id = e_id;

	mov	ecx, DWORD PTR _web+460
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _e_id$[ebp]
	mov	DWORD PTR [edx+20], eax

; 38   :   top_timestamp = ++global_timestamp;

	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax

; 39   : }

	pop	ebp
	ret	0
_set_fe_edge ENDP
_TEXT	ENDS
PUBLIC	_get_fe_edge
; Function compile flags: /Ogtp
;	COMDAT _get_fe_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_edge PROC					; COMDAT

; 43   : {

	push	ebp
	mov	ebp, esp

; 44   :   edge_id e_id;
; 45   :     
; 46   :   e_id = feptr(fe_id)->fe_edge_id;

	mov	eax, DWORD PTR _fe_id$[ebp]

; 47   : 
; 48   :   /*
; 49   :   if ( inverted(fe_id) ) invert(e_id);
; 50   :   return e_id;
; 51   :   */
; 52   :   
; 53   :   return same_sign(e_id,fe_id);

	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]

; 54   : }

	pop	ebp
	ret	0
_get_fe_edge ENDP
_TEXT	ENDS
PUBLIC	_get_fe_facet
EXTRN	_NULLFACET:DWORD
; Function compile flags: /Ogtp
;	COMDAT _get_fe_facet
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_facet PROC					; COMDAT

; 58   : {

	push	ebp
	mov	ebp, esp

; 59   :   facet_id f_id;
; 60   :   
; 61   :   if ( !valid_id(fe_id) ) return NULLFACET;

	mov	ecx, DWORD PTR _fe_id$[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN2@get_fe_fac
	mov	eax, DWORD PTR _NULLFACET

; 64   :   return f_id;
; 65   : }

	pop	ebp
	ret	0
$LN2@get_fe_fac:

; 62   :   f_id = feptr(fe_id)->fe_facet_id;

	mov	edx, DWORD PTR _web+460
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+24]

; 63   :   if ( inverted(fe_id) ) invert(f_id);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_fe_fac
	xor	eax, 134217728				; 08000000H
$LN3@get_fe_fac:

; 64   :   return f_id;
; 65   : }

	pop	ebp
	ret	0
_get_fe_facet ENDP
_TEXT	ENDS
PUBLIC	_get_prev_edge
; Function compile flags: /Ogtp
;	COMDAT _get_prev_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_prev_edge PROC					; COMDAT

; 69   : {

	push	ebp
	mov	ebp, esp

; 70   :   if ( inverted(fe_id) ) return inverse_id(feptr(fe_id)->nextedge[1]);

	mov	eax, DWORD PTR _fe_id$[ebp]
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_prev_e
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H

; 72   : }

	pop	ebp
	ret	0
$LN2@get_prev_e:

; 71   :   else return feptr(fe_id)->nextedge[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]

; 72   : }

	pop	ebp
	ret	0
_get_prev_edge ENDP
_TEXT	ENDS
PUBLIC	_get_next_edge
; Function compile flags: /Ogtp
;	COMDAT _get_next_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_next_edge PROC					; COMDAT

; 76   : {

	push	ebp
	mov	ebp, esp

; 77   :   if ( inverted(fe_id) ) return inverse_id(feptr(fe_id)->nextedge[0]);

	mov	eax, DWORD PTR _fe_id$[ebp]
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_next_e
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H

; 79   : }

	pop	ebp
	ret	0
$LN2@get_next_e:

; 78   :   else return feptr(fe_id)->nextedge[1];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]

; 79   : }

	pop	ebp
	ret	0
_get_next_edge ENDP
_TEXT	ENDS
PUBLIC	_get_prev_facet
; Function compile flags: /Ogtp
;	COMDAT _get_prev_facet
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_prev_facet PROC					; COMDAT

; 83   : {

	push	ebp
	mov	ebp, esp

; 84   :   if ( inverted(fe_id) ) 

	mov	eax, DWORD PTR _fe_id$[ebp]

; 85   :     return inverse_id(feptr(fe_id)->nextfacet[1]);

	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_prev_f
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+40]
	xor	eax, 134217728				; 08000000H

; 88   : }

	pop	ebp
	ret	0
$LN2@get_prev_f:

; 86   :   else 
; 87   :     return feptr(fe_id)->nextfacet[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+36]

; 88   : }

	pop	ebp
	ret	0
_get_prev_facet ENDP
_TEXT	ENDS
PUBLIC	_get_next_facet
; Function compile flags: /Ogtp
;	COMDAT _get_next_facet
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_next_facet PROC					; COMDAT

; 92   : {

	push	ebp
	mov	ebp, esp

; 93   :   if ( inverted(fe_id) ) 

	mov	eax, DWORD PTR _fe_id$[ebp]

; 94   :     return inverse_id(feptr(fe_id)->nextfacet[0]);

	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_next_f
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H

; 97   : }

	pop	ebp
	ret	0
$LN2@get_next_f:

; 95   :   else 
; 96   :     return feptr(fe_id)->nextfacet[1];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+40]

; 97   : }

	pop	ebp
	ret	0
_get_next_facet ENDP
_TEXT	ENDS
PUBLIC	_set_prev_edge
; Function compile flags: /Ogtp
;	COMDAT _set_prev_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_fe$ = 12						; size = 4
_set_prev_edge PROC					; COMDAT

; 102  : {

	push	ebp
	mov	ebp, esp

; 103  :   if ( !valid_id(fe_id) ) return;

	mov	eax, DWORD PTR _fe_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN4@set_prev_e

; 104  :   if ( inverted(fe_id) )

	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@set_prev_e

; 105  :     { invert(fe);
; 106  :       feptr(fe_id)->nextedge[1] = fe;

	mov	edx, DWORD PTR _web+460
	mov	ecx, DWORD PTR _fe$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	xor	ecx, 134217728				; 08000000H
	mov	DWORD PTR [eax+32], ecx

; 110  :   top_timestamp = ++global_timestamp;

	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax

; 111  : }

	pop	ebp
	ret	0
$LN2@set_prev_e:

; 107  :     }
; 108  :   else
; 109  :       feptr(fe_id)->nextedge[0] = fe;

	mov	ecx, DWORD PTR _web+460
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _fe$[ebp]
	mov	DWORD PTR [edx+28], eax

; 110  :   top_timestamp = ++global_timestamp;

	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN4@set_prev_e:

; 111  : }

	pop	ebp
	ret	0
_set_prev_edge ENDP
_TEXT	ENDS
PUBLIC	_set_next_edge
; Function compile flags: /Ogtp
;	COMDAT _set_next_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_fe$ = 12						; size = 4
_set_next_edge PROC					; COMDAT

; 116  : {

	push	ebp
	mov	ebp, esp

; 117  :   if ( !valid_id(fe_id) ) return;

	mov	eax, DWORD PTR _fe_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN1@set_next_e

; 118  :   if ( inverted(fe_id) )

	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@set_next_e

; 119  :     { invert(fe);

	mov	ecx, DWORD PTR _fe$[ebp]

; 120  :       feptr(fe_id)->nextedge[0] = fe;

	mov	edx, DWORD PTR _web+460
	xor	ecx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [eax+28], ecx

; 124  : }

	pop	ebp
	ret	0
$LN2@set_next_e:

; 121  :     }
; 122  :   else
; 123  :       feptr(fe_id)->nextedge[1] = fe;

	mov	ecx, DWORD PTR _web+460
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _fe$[ebp]
	mov	DWORD PTR [edx+32], eax
$LN1@set_next_e:

; 124  : }

	pop	ebp
	ret	0
_set_next_edge ENDP
_TEXT	ENDS
PUBLIC	_set_prev_facet
; Function compile flags: /Ogtp
;	COMDAT _set_prev_facet
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_fe$ = 12						; size = 4
_set_prev_facet PROC					; COMDAT

; 129  : {

	push	ebp
	mov	ebp, esp

; 130  :   if ( !valid_id(fe_id) ) return;

	mov	eax, DWORD PTR _fe_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN4@set_prev_f

; 131  :   if ( inverted(fe_id) )

	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@set_prev_f

; 132  :   { invert(fe);
; 133  :     feptr(fe_id)->nextfacet[1] = fe;

	mov	edx, DWORD PTR _web+460
	mov	ecx, DWORD PTR _fe$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	xor	ecx, 134217728				; 08000000H
	mov	DWORD PTR [eax+40], ecx

; 137  :   top_timestamp = ++global_timestamp;

	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax

; 138  : }

	pop	ebp
	ret	0
$LN2@set_prev_f:

; 134  :   }
; 135  :   else
; 136  :     feptr(fe_id)->nextfacet[0] = fe;

	mov	ecx, DWORD PTR _web+460
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _fe$[ebp]
	mov	DWORD PTR [edx+36], eax

; 137  :   top_timestamp = ++global_timestamp;

	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN4@set_prev_f:

; 138  : }

	pop	ebp
	ret	0
_set_prev_facet ENDP
_TEXT	ENDS
PUBLIC	_set_next_facet
; Function compile flags: /Ogtp
;	COMDAT _set_next_facet
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_fe$ = 12						; size = 4
_set_next_facet PROC					; COMDAT

; 143  : {

	push	ebp
	mov	ebp, esp

; 144  :   if ( !valid_id(fe_id) ) return;

	mov	eax, DWORD PTR _fe_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN1@set_next_f

; 145  :   if ( inverted(fe_id) )

	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@set_next_f

; 146  :   { invert(fe);

	mov	ecx, DWORD PTR _fe$[ebp]

; 147  :     feptr(fe_id)->nextfacet[0] = fe;

	mov	edx, DWORD PTR _web+460
	xor	ecx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [eax+36], ecx

; 151  : }

	pop	ebp
	ret	0
$LN2@set_next_f:

; 148  :   }
; 149  :   else
; 150  :     feptr(fe_id)->nextfacet[1] = fe;

	mov	ecx, DWORD PTR _web+460
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _fe$[ebp]
	mov	DWORD PTR [edx+40], eax
$LN1@set_next_f:

; 151  : }

	pop	ebp
	ret	0
_set_next_facet ENDP
_TEXT	ENDS
PUBLIC	_set_edge_wrap
EXTRN	_dymem:DWORD
EXTRN	_sym_inverse:DWORD
; Function compile flags: /Ogtp
;	COMDAT _set_edge_wrap
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_wrap$ = 12						; size = 4
_set_edge_wrap PROC					; COMDAT

; 157  : {

	push	ebp
	mov	ebp, esp

; 158  :  *EINT(e_id,E_WRAP_ATTR) =  inverted(e_id)  ? (*sym_inverse)(wrap) : wrap ;

	mov	eax, DWORD PTR _wrap$[ebp]
	push	esi
	mov	esi, DWORD PTR _e_id$[ebp]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN4@set_edge_w
	push	eax
	call	DWORD PTR _sym_inverse
	add	esp, 4
$LN4@set_edge_w:
	mov	ecx, DWORD PTR _web+124
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	esi, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+esi+784]
	mov	DWORD PTR [edx+ecx], eax
	pop	esi

; 159  : }

	pop	ebp
	ret	0
_set_edge_wrap ENDP
_TEXT	ENDS
PUBLIC	_get_edge_wrap
; Function compile flags: /Ogtp
;	COMDAT _get_edge_wrap
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_wrap PROC					; COMDAT

; 163  : {

	push	ebp
	mov	ebp, esp

; 164  :   WRAPTYPE wrap = *EINT(e_id,E_WRAP_ATTR) ;

	mov	ecx, DWORD PTR _e_id$[ebp]
	mov	edx, DWORD PTR _web+124
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+216
	push	esi
	mov	esi, DWORD PTR _dymem
	mov	edx, DWORD PTR [edx+esi+784]
	mov	eax, DWORD PTR [eax+edx]
	pop	esi

; 165  :   return    ( inverted(e_id) ? (*sym_inverse)(wrap) : wrap );

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN4@get_edge_w
	push	eax
	call	DWORD PTR _sym_inverse
	add	esp, 4
$LN4@get_edge_w:

; 166  : }

	pop	ebp
	ret	0
_get_edge_wrap ENDP
_TEXT	ENDS
PUBLIC	_set_edge_fe
; Function compile flags: /Ogtp
;	COMDAT _set_edge_fe
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_fe$ = 12						; size = 4
_set_edge_fe PROC					; COMDAT

; 171  : {

	push	ebp
	mov	ebp, esp

; 172  :   if ( inverted(e_id) ) invert(fe);

	mov	eax, DWORD PTR _e_id$[ebp]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN1@set_edge_f
	xor	DWORD PTR _fe$[ebp], 134217728		; 08000000H
$LN1@set_edge_f:

; 173  :   eptr(e_id)->fe_id = fe;

	mov	ecx, DWORD PTR _web+124
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _fe$[ebp]
	mov	DWORD PTR [edx+28], eax

; 174  :   top_timestamp = ++global_timestamp;

	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax

; 175  : }

	pop	ebp
	ret	0
_set_edge_fe ENDP
_TEXT	ENDS
PUBLIC	_get_edge_fe
; Function compile flags: /Ogtp
;	COMDAT _get_edge_fe
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_fe PROC					; COMDAT

; 179  : {   struct edge *ep;

	push	ebp
	mov	ebp, esp

; 180  :     facetedge_id fe;
; 181  : 
; 182  :  	ep = eptr(e_id);

	mov	ecx, DWORD PTR _e_id$[ebp]
	mov	edx, DWORD PTR _web+124
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]

; 183  :     if ( !ep ) return NULLID;

	test	eax, eax
	jne	SHORT $LN2@get_edge_f

; 186  :     return fe;
; 187  : }

	pop	ebp
	ret	0
$LN2@get_edge_f:

; 184  :     fe = ep->fe_id; 

	mov	eax, DWORD PTR [eax+28]

; 185  :     if ( inverted(e_id) ) invert(fe);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_edge_f
	xor	eax, 134217728				; 08000000H
$LN3@get_edge_f:

; 186  :     return fe;
; 187  : }

	pop	ebp
	ret	0
_get_edge_fe ENDP
_TEXT	ENDS
PUBLIC	_get_edge_tailv
; Function compile flags: /Ogtp
;	COMDAT _get_edge_tailv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_tailv PROC					; COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp

; 192  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 193  :      return get_edge_vertices(e_id)[web.headvnum];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_t
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 196  : }

	pop	ebp
	ret	0
$LN2@get_edge_t:

; 194  :   else
; 195  :      return get_edge_vertices(e_id)[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 196  : }

	pop	ebp
	ret	0
_get_edge_tailv ENDP
_TEXT	ENDS
PUBLIC	_get_edge_headv
; Function compile flags: /Ogtp
;	COMDAT _get_edge_headv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_headv PROC					; COMDAT

; 200  : {

	push	ebp
	mov	ebp, esp

; 201  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 202  :      return get_edge_vertices(e_id)[0];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_h
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 205  : }

	pop	ebp
	ret	0
$LN2@get_edge_h:

; 203  :   else
; 204  :      return get_edge_vertices(e_id)[web.headvnum];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 205  : }

	pop	ebp
	ret	0
_get_edge_headv ENDP
_TEXT	ENDS
PUBLIC	_set_edge_tailv
EXTRN	_insert_vertex_edge:PROC
EXTRN	_remove_vertex_edge:PROC
; Function compile flags: /Ogtp
;	COMDAT _set_edge_tailv
_TEXT	SEGMENT
tv225 = -4						; size = 4
_e_id$ = 8						; size = 4
_v_id$ = 12						; size = 4
_set_edge_tailv PROC					; COMDAT

; 210  : { vertex_id oldv;

	push	ebp
	mov	ebp, esp
	push	ecx

; 211  : 
; 212  :   /* make sure edge not in loop of old vertex */
; 213  :   oldv = get_edge_tailv(e_id);

	mov	edx, DWORD PTR _web+124
	mov	ecx, DWORD PTR _web+216
	push	ebx
	push	esi
	mov	esi, DWORD PTR _e_id$[ebp]
	mov	eax, esi
	shr	eax, 27					; 0000001bH
	and	eax, 1
	push	edi
	mov	edi, DWORD PTR _dymem
	mov	DWORD PTR tv225[ebp], eax
	je	SHORT $LN7@set_edge_t
	mov	ebx, DWORD PTR _web+636
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+edx]
	add	eax, DWORD PTR [ecx+edi+304]
	mov	eax, DWORD PTR [eax+ebx*4]
	jmp	SHORT $LN6@set_edge_t
$LN7@set_edge_t:
	mov	ebx, DWORD PTR [ecx+edi+304]
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+edx]
	mov	eax, DWORD PTR [eax+ebx]
$LN6@set_edge_t:

; 214  :   if ( valid_id(oldv) && !equal_id(oldv,v_id) )

	mov	ebx, DWORD PTR _v_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN10@set_edge_t
	cmp	eax, ebx
	je	SHORT $LN10@set_edge_t

; 215  :     remove_vertex_edge(oldv,e_id);

	mov	ecx, DWORD PTR _e_id$[ebp]
	push	ecx
	push	eax
	call	_remove_vertex_edge
	mov	ecx, DWORD PTR _web+216
	mov	edx, DWORD PTR _web+124
	mov	edi, DWORD PTR _dymem
	add	esp, 8
$LN10@set_edge_t:

; 216  : 
; 217  :   if ( inverted(e_id) )

	cmp	DWORD PTR tv225[ebp], 0

; 218  :      get_edge_vertices(e_id)[web.headvnum] = v_id;

	mov	edx, DWORD PTR [esi+edx]
	je	SHORT $LN2@set_edge_t
	add	edx, DWORD PTR [ecx+edi+304]
	mov	eax, DWORD PTR _web+636
	mov	DWORD PTR [edx+eax*4], ebx

; 219  :   else

	jmp	SHORT $LN1@set_edge_t
$LN2@set_edge_t:

; 220  :      get_edge_vertices(e_id)[0] = v_id;

	mov	eax, DWORD PTR [ecx+edi+304]
	mov	DWORD PTR [edx+eax], ebx
$LN1@set_edge_t:

; 221  :   insert_vertex_edge(v_id,e_id);

	mov	ecx, DWORD PTR _e_id$[ebp]
	push	ecx
	push	ebx
	call	_insert_vertex_edge

; 222  :   top_timestamp = ++global_timestamp;

	mov	eax, DWORD PTR _global_timestamp
	add	esp, 8
	pop	edi
	inc	eax
	pop	esi
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	pop	ebx

; 223  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_set_edge_tailv ENDP
_TEXT	ENDS
PUBLIC	_set_edge_headv
; Function compile flags: /Ogtp
;	COMDAT _set_edge_headv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_v_id$ = 12						; size = 4
_set_edge_headv PROC					; COMDAT

; 229  : {

	push	ebp
	mov	ebp, esp

; 230  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]
	push	esi

; 231  :      get_edge_vertices(e_id)[0] = v_id;

	mov	esi, DWORD PTR _dymem
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@set_edge_h
	mov	edx, DWORD PTR _web+124
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _web+216
	mov	esi, DWORD PTR [ecx+esi+304]
	mov	ecx, DWORD PTR _v_id$[ebp]
	mov	DWORD PTR [edx+esi], ecx

; 232  :   else

	jmp	SHORT $LN1@set_edge_h
$LN2@set_edge_h:

; 233  :      get_edge_vertices(e_id)[web.headvnum] = v_id;

	mov	ecx, DWORD PTR _web+124
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _web+216
	add	edx, DWORD PTR [ecx+esi+304]
	mov	ecx, DWORD PTR _v_id$[ebp]
	mov	esi, DWORD PTR _web+636
	mov	DWORD PTR [edx+esi*4], ecx
$LN1@set_edge_h:

; 234  :   insert_vertex_edge(v_id,inverse_id(e_id));

	xor	eax, 134217728				; 08000000H
	push	eax
	push	ecx
	call	_insert_vertex_edge

; 235  :   top_timestamp = ++global_timestamp;

	mov	eax, DWORD PTR _global_timestamp
	add	esp, 8
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	pop	esi

; 236  : }

	pop	ebp
	ret	0
_set_edge_headv ENDP
_TEXT	ENDS
PUBLIC	_get_facet_body
; Function compile flags: /Ogtp
;	COMDAT _get_facet_body
_TEXT	SEGMENT
_f_id$ = 8						; size = 4
_get_facet_body PROC					; COMDAT

; 250  : {

	push	ebp
	mov	ebp, esp

; 251  :   if ( web.skel[BODY].count == 0 ) return NULLID;

	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN4@get_facet_
$LN7@get_facet_:
	xor	eax, eax

; 255  : }

	pop	ebp
	ret	0
$LN4@get_facet_:

; 252  :   if ( !valid_id(f_id) ) return NULLID;

	mov	eax, DWORD PTR _f_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN7@get_facet_

; 253  :   if ( inverted(f_id) ) return F_ELID(f_id,F_BODY_LIST_ATTR)[1];

	mov	ecx, DWORD PTR _web+236
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_facet_
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax+4]

; 255  : }

	pop	ebp
	ret	0
$LN2@get_facet_:

; 254  :   else  return F_ELID(f_id,F_BODY_LIST_ATTR)[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax]

; 255  : }

	pop	ebp
	ret	0
_get_facet_body ENDP
_TEXT	ENDS
PUBLIC	_get_facet_fe
; Function compile flags: /Ogtp
;	COMDAT _get_facet_fe
_TEXT	SEGMENT
_f_id$ = 8						; size = 4
_get_facet_fe PROC					; COMDAT

; 260  : {

	push	ebp
	mov	ebp, esp

; 261  :   facetedge_id fe;
; 262  :   
; 263  :   if ( !valid_id(f_id) ) return NULLID;

	mov	ecx, DWORD PTR _f_id$[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN2@get_facet_@2
	xor	eax, eax

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
$LN2@get_facet_@2:

; 264  :   fe = fptr(f_id)->fe_id;

	mov	edx, DWORD PTR _web+236
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]

; 265  :   if ( inverted(f_id) ) invert(fe);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_facet_@2
	xor	eax, 134217728				; 08000000H
$LN3@get_facet_@2:

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
_get_facet_fe ENDP
_TEXT	ENDS
PUBLIC	_get_next_tail_edge
; Function compile flags: /Ogtp
;	COMDAT _get_next_tail_edge
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_next_tail_edge PROC				; COMDAT

; 270  : { return eptr(e_id)->next_vedge[inverted(e_id) ?1: 0] ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _e_id$[ebp]
	mov	edx, DWORD PTR _web+124
	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ecx*4+32]
	pop	ebp
	ret	0
_get_next_tail_edge ENDP
_TEXT	ENDS
PUBLIC	_get_next_head_edge
; Function compile flags: /Ogtp
;	COMDAT _get_next_head_edge
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_next_head_edge PROC				; COMDAT

; 273  : { return inverse_id(eptr(e_id)->next_vedge[inverted(e_id) ?0: 1]); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _e_id$[ebp]
	mov	edx, DWORD PTR _web+124
	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	not	ecx
	and	ecx, 1
	mov	eax, DWORD PTR [eax+ecx*4+32]
	xor	eax, 134217728				; 08000000H
	pop	ebp
	ret	0
_get_next_head_edge ENDP
_TEXT	ENDS
PUBLIC	_get_extra
; Function compile flags: /Ogtp
;	COMDAT _get_extra
_TEXT	SEGMENT
_id$ = 8						; size = 4
_n$ = 12						; size = 4
_get_extra PROC						; COMDAT

; 348  : { int type = id_type(id);

	push	ebp
	mov	ebp, esp

; 349  : 
; 350  :   return ( (char*)elptr(id) + EXTRAS(type)[n].offset);

	mov	ecx, DWORD PTR _id$[ebp]
	mov	eax, ecx
	push	esi
	mov	esi, DWORD PTR _n$[ebp]
	shr	eax, 29					; 0000001dH
	imul	esi, 240				; 000000f0H
	imul	eax, 112				; 00000070H
	mov	edx, DWORD PTR _web[eax+12]
	push	edi
	mov	edi, DWORD PTR _web[eax+104]
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _dymem
	add	edi, esi
	add	eax, DWORD PTR [edi+ecx+64]
	pop	edi
	pop	esi

; 351  : }

	pop	ebp
	ret	0
_get_extra ENDP
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\popfilm.c
_TEXT	ENDS
;	COMDAT _vfcomp
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_vfcomp	PROC						; COMDAT

; 32   : {

	push	ebp
	mov	ebp, esp

; 33   :   if ( a->v_id < b->v_id ) return -1;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, eax
	jbe	SHORT $LN5@vfcomp
	or	eax, -1

; 35   :   return 0;
; 36   : } // end vfcomp()

	pop	ebp
	ret	0
$LN5@vfcomp:

; 34   :   if ( a->v_id > b->v_id ) return 1;

	sbb	eax, eax
	neg	eax

; 35   :   return 0;
; 36   : } // end vfcomp()

	pop	ebp
	ret	0
_vfcomp	ENDP
_TEXT	ENDS
PUBLIC	_vertex_degfree
EXTRN	_nullcon:QWORD
EXTRN	_V_BOUNDARY_ATTR:DWORD
; Function compile flags: /Ogtp
;	COMDAT _vertex_degfree
_TEXT	SEGMENT
_vattr$ = -8						; size = 8
_degfree$ = 8						; size = 4
_v_id$ = 8						; size = 4
_vertex_degfree PROC					; COMDAT

; 90   : { int degfree;

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 91   :   ATTR vattr = get_vattr(v_id);

	mov	edx, DWORD PTR _v_id$[ebp]
	mov	eax, DWORD PTR _web+12
	and	edx, 134217727				; 07ffffffH
	push	ebx
	add	edx, edx
	push	esi
	add	edx, edx
	push	edi
	mov	edi, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [edi+12]
	mov	esi, DWORD PTR [edi+8]

; 92   :   struct boundary *vbdry;
; 93   :   conmap_t *vmap;
; 94   :   int i;
; 95   : 
; 96   :   /* Get degrees of freedom of vertex */
; 97   :   degfree = SDIM;

	mov	eax, DWORD PTR _web+616
	mov	DWORD PTR _vattr$[ebp+4], ecx

; 98   :   if ( vattr & FIXED ) degfree = 0;

	mov	ecx, esi
	and	ecx, 64					; 00000040H
	xor	ebx, ebx
	or	ecx, ebx
	mov	DWORD PTR _degfree$[ebp], eax
	je	SHORT $LN10@vertex_deg
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx

; 112  : } // end vertex_degfree()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@vertex_deg:

; 99   :   else if ( vattr & BOUNDARY )

	mov	ecx, esi
	and	ecx, 128				; 00000080H
	xor	ebx, ebx
	or	ecx, ebx
	je	SHORT $LN8@vertex_deg

; 100  :   { vbdry = get_boundary(v_id);

	mov	ecx, DWORD PTR _V_BOUNDARY_ATTR
	test	ecx, ecx
	je	SHORT $LN13@vertex_deg
	mov	edx, DWORD PTR _dymem
	imul	ecx, 240				; 000000f0H
	add	ecx, DWORD PTR _web+104
	mov	ecx, DWORD PTR [ecx+edx+64]
	mov	edx, DWORD PTR [ecx+edi]
	imul	edx, 136				; 00000088H
	add	edx, DWORD PTR _web+776
	jmp	SHORT $LN14@vertex_deg
$LN13@vertex_deg:
	xor	edx, edx
$LN14@vertex_deg:

; 101  :     if ( (vbdry->attr & NONWALL) )

	mov	ecx, DWORD PTR [edx+32]
	and	ecx, 1024				; 00000400H
	xor	esi, esi
	or	ecx, esi
	je	$LN2@vertex_deg

; 109  :   }
; 110  :  
; 111  :   return degfree;

	mov	eax, DWORD PTR [edx+40]
	pop	edi
	pop	esi
	pop	ebx

; 112  : } // end vertex_degfree()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@vertex_deg:

; 102  :       degfree = vbdry->pcount;
; 103  :   }
; 104  :   else if ( vattr & CONSTRAINT )

	and	esi, 1024				; 00000400H
	xor	ecx, ecx
	or	esi, ecx
	je	SHORT $LN2@vertex_deg

; 105  :   { vmap = get_e_constraint_map(v_id);

	mov	ecx, DWORD PTR _web+216
	mov	esi, DWORD PTR _dymem
	cmp	DWORD PTR [ecx+esi+1048], ebx
	je	SHORT $LN15@vertex_deg
	mov	eax, DWORD PTR _web+124
	mov	edi, DWORD PTR [edx+eax]
	add	edi, DWORD PTR [ecx+esi+1024]
	jmp	SHORT $LN16@vertex_deg
$LN15@vertex_deg:
	mov	edi, OFFSET _nullcon
$LN16@vertex_deg:
	mov	eax, DWORD PTR [edi]

; 106  :     for ( i = 1; i <= (int)vmap[0] ; i++ )

	mov	esi, 1
	cmp	eax, esi
	jl	SHORT $LN19@vertex_deg
	mov	ebx, DWORD PTR _web+652
	npad	7
$LL4@vertex_deg:

; 107  :      if (!((get_constraint(vmap[i])->attr)&(NONPOSITIVE|NONNEGATIVE|NONWALL)))

	mov	ecx, DWORD PTR [edi+esi*4]
	and	ecx, 1073741823				; 3fffffffH
	imul	ecx, 176				; 000000b0H
	mov	ecx, DWORD PTR [ecx+ebx+32]
	and	ecx, 1027				; 00000403H
	xor	edx, edx
	or	ecx, edx
	jne	SHORT $LN3@vertex_deg

; 108  :       degfree--;

	dec	DWORD PTR _degfree$[ebp]
$LN3@vertex_deg:

; 106  :     for ( i = 1; i <= (int)vmap[0] ; i++ )

	inc	esi
	cmp	esi, eax
	jle	SHORT $LL4@vertex_deg
$LN19@vertex_deg:

; 109  :   }
; 110  :  
; 111  :   return degfree;

	mov	eax, DWORD PTR _degfree$[ebp]
$LN2@vertex_deg:
	pop	edi
	pop	esi
	pop	ebx

; 112  : } // end vertex_degfree()

	mov	esp, ebp
	pop	ebp
	ret	0
_vertex_degfree ENDP
_TEXT	ENDS
PUBLIC	_edge_degfree
EXTRN	_E_BOUNDARY_ATTR:DWORD
; Function compile flags: /Ogtp
;	COMDAT _edge_degfree
_TEXT	SEGMENT
_eattr$ = -8						; size = 8
_degfree$ = 8						; size = 4
_e_id$ = 8						; size = 4
_edge_degfree PROC					; COMDAT

; 123  : { int degfree;

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 124  :   ATTR eattr = get_eattr(e_id);

	mov	eax, DWORD PTR _e_id$[ebp]
	mov	ecx, DWORD PTR _web+124
	push	ebx

; 125  :   struct boundary *ebdry;
; 126  :   conmap_t *emap;
; 127  :   int i;
; 128  : 
; 129  :   /* Get degrees of freedom of edge */
; 130  :   degfree = SDIM;

	mov	ebx, DWORD PTR _web+616
	and	eax, 134217727				; 07ffffffH
	push	esi
	mov	esi, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR [esi+8]
	mov	eax, DWORD PTR [esi+12]

; 131  :   if ( eattr & FIXED ) degfree = 0;

	mov	ecx, edx
	push	edi
	and	ecx, 64					; 00000040H
	xor	edi, edi
	or	ecx, edi
	mov	DWORD PTR _eattr$[ebp+4], eax
	mov	DWORD PTR _degfree$[ebp], ebx
	je	SHORT $LN10@edge_degfr
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx

; 145  : } // end edge_degfree()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@edge_degfr:

; 132  :   else if ( eattr & BOUNDARY )

	mov	ecx, edx
	and	ecx, 128				; 00000080H
	xor	edi, edi
	or	ecx, edi
	je	SHORT $LN8@edge_degfr

; 133  :   { ebdry = get_edge_boundary(e_id);

	mov	ecx, DWORD PTR _E_BOUNDARY_ATTR
	test	ecx, ecx
	je	SHORT $LN13@edge_degfr
	mov	edx, DWORD PTR _dymem
	imul	ecx, 240				; 000000f0H
	add	ecx, DWORD PTR _web+216
	mov	eax, DWORD PTR [ecx+edx+64]
	mov	edx, DWORD PTR [eax+esi]
	imul	edx, 136				; 00000088H
	add	edx, DWORD PTR _web+776
	jmp	SHORT $LN14@edge_degfr
$LN13@edge_degfr:
	xor	edx, edx
$LN14@edge_degfr:

; 134  :     if ( (ebdry->attr & NONWALL) )

	mov	ecx, DWORD PTR [edx+32]
	and	ecx, 1024				; 00000400H
	xor	esi, esi
	or	ecx, esi
	je	$LN21@edge_degfr

; 142  :   }
; 143  :  
; 144  :   return degfree;

	mov	eax, DWORD PTR [edx+40]
	pop	edi
	pop	esi
	pop	ebx

; 145  : } // end edge_degfree()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@edge_degfr:

; 135  :       degfree = ebdry->pcount;
; 136  :   }
; 137  :   else if ( eattr & CONSTRAINT )

	and	edx, 1024				; 00000400H
	xor	ecx, ecx
	or	edx, ecx
	je	SHORT $LN21@edge_degfr

; 138  :   { emap = get_e_constraint_map(e_id);

	mov	ecx, DWORD PTR _web+216
	mov	edx, DWORD PTR _dymem
	cmp	DWORD PTR [ecx+edx+1048], edi
	je	SHORT $LN15@edge_degfr
	mov	edi, DWORD PTR [ecx+edx+1024]
	add	edi, esi
	jmp	SHORT $LN16@edge_degfr
$LN15@edge_degfr:
	mov	edi, OFFSET _nullcon
$LN16@edge_degfr:
	mov	eax, DWORD PTR [edi]

; 139  :     for ( i = 1; i <= (int)emap[0] ; i++ )

	mov	esi, 1
	cmp	eax, esi
	jl	SHORT $LN21@edge_degfr
	mov	ebx, DWORD PTR _web+652
$LL4@edge_degfr:

; 140  :      if (!((get_constraint(emap[i])->attr)&(NONPOSITIVE|NONNEGATIVE|NONWALL)))

	mov	ecx, DWORD PTR [edi+esi*4]
	and	ecx, 1073741823				; 3fffffffH
	imul	ecx, 176				; 000000b0H
	mov	ecx, DWORD PTR [ecx+ebx+32]
	and	ecx, 1027				; 00000403H
	xor	edx, edx
	or	ecx, edx
	jne	SHORT $LN3@edge_degfr

; 141  :       degfree--;

	dec	DWORD PTR _degfree$[ebp]
$LN3@edge_degfr:

; 139  :     for ( i = 1; i <= (int)emap[0] ; i++ )

	inc	esi
	cmp	esi, eax
	jle	SHORT $LL4@edge_degfr

; 142  :   }
; 143  :  
; 144  :   return degfree;

	mov	eax, DWORD PTR _degfree$[ebp]
	pop	edi
	pop	esi
	pop	ebx

; 145  : } // end edge_degfree()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN21@edge_degfr:
	pop	edi
	pop	esi

; 142  :   }
; 143  :  
; 144  :   return degfree;

	mov	eax, ebx
	pop	ebx

; 145  : } // end edge_degfree()

	mov	esp, ebp
	pop	ebp
	ret	0
_edge_degfree ENDP
_TEXT	ENDS
PUBLIC	_facet_degfree
EXTRN	_F_BOUNDARY_ATTR:DWORD
; Function compile flags: /Ogtp
;	COMDAT _facet_degfree
_TEXT	SEGMENT
_fattr$ = -8						; size = 8
_degfree$ = 8						; size = 4
_f_id$ = 8						; size = 4
_facet_degfree PROC					; COMDAT

; 156  : { int degfree;

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 157  :   ATTR fattr = get_fattr(f_id);

	mov	eax, DWORD PTR _f_id$[ebp]
	mov	ecx, DWORD PTR _web+236
	push	ebx

; 158  :   struct boundary *fbdry;
; 159  :   conmap_t *fmap;
; 160  :   int i;
; 161  : 
; 162  :   /* Get degrees of freedom of edge */
; 163  :   degfree = SDIM;

	mov	ebx, DWORD PTR _web+616
	and	eax, 134217727				; 07ffffffH
	push	esi
	mov	esi, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR [esi+8]
	mov	eax, DWORD PTR [esi+12]

; 164  :   if ( fattr & FIXED ) degfree = 0;

	mov	ecx, edx
	push	edi
	and	ecx, 64					; 00000040H
	xor	edi, edi
	or	ecx, edi
	mov	DWORD PTR _fattr$[ebp+4], eax
	mov	DWORD PTR _degfree$[ebp], ebx
	je	SHORT $LN10@facet_degf
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx

; 178  : } // end facet_degfree()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@facet_degf:

; 165  :   else if ( fattr & BOUNDARY )

	mov	ecx, edx
	and	ecx, 128				; 00000080H
	xor	edi, edi
	or	ecx, edi
	je	SHORT $LN8@facet_degf

; 166  :   { fbdry = get_facet_boundary(f_id);

	mov	ecx, DWORD PTR _F_BOUNDARY_ATTR
	test	ecx, ecx
	je	SHORT $LN13@facet_degf
	mov	edx, DWORD PTR _dymem
	imul	ecx, 240				; 000000f0H
	add	ecx, DWORD PTR _web+328
	mov	eax, DWORD PTR [ecx+edx+64]
	mov	edx, DWORD PTR [eax+esi]
	imul	edx, 136				; 00000088H
	add	edx, DWORD PTR _web+776
	jmp	SHORT $LN14@facet_degf
$LN13@facet_degf:
	xor	edx, edx
$LN14@facet_degf:

; 167  :     if ( (fbdry->attr & NONWALL) )

	mov	ecx, DWORD PTR [edx+32]
	and	ecx, 1024				; 00000400H
	xor	esi, esi
	or	ecx, esi
	je	$LN21@facet_degf

; 175  :   }
; 176  :  
; 177  :   return degfree;

	mov	eax, DWORD PTR [edx+40]
	pop	edi
	pop	esi
	pop	ebx

; 178  : } // end facet_degfree()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@facet_degf:

; 168  :       degfree = fbdry->pcount;
; 169  :   }
; 170  :   else if ( fattr & CONSTRAINT )

	and	edx, 1024				; 00000400H
	xor	ecx, ecx
	or	edx, ecx
	je	SHORT $LN21@facet_degf

; 171  :   { fmap = get_f_constraint_map(f_id);

	mov	ecx, DWORD PTR _web+328
	mov	edx, DWORD PTR _dymem
	cmp	DWORD PTR [ecx+edx+88], edi
	je	SHORT $LN15@facet_degf
	mov	edi, DWORD PTR [ecx+edx+64]
	add	edi, esi
	jmp	SHORT $LN16@facet_degf
$LN15@facet_degf:
	mov	edi, OFFSET _nullcon
$LN16@facet_degf:
	mov	eax, DWORD PTR [edi]

; 172  :     for ( i = 1; i <= (int)fmap[0] ; i++ )

	mov	esi, 1
	cmp	eax, esi
	jl	SHORT $LN21@facet_degf
	mov	ebx, DWORD PTR _web+652
	npad	6
$LL4@facet_degf:

; 173  :      if (!((get_constraint(fmap[i])->attr)&(NONPOSITIVE|NONNEGATIVE|NONWALL)))

	mov	ecx, DWORD PTR [edi+esi*4]
	and	ecx, 1073741823				; 3fffffffH
	imul	ecx, 176				; 000000b0H
	mov	ecx, DWORD PTR [ecx+ebx+32]
	and	ecx, 1027				; 00000403H
	xor	edx, edx
	or	ecx, edx
	jne	SHORT $LN3@facet_degf

; 174  :       degfree--;

	dec	DWORD PTR _degfree$[ebp]
$LN3@facet_degf:

; 172  :     for ( i = 1; i <= (int)fmap[0] ; i++ )

	inc	esi
	cmp	esi, eax
	jle	SHORT $LL4@facet_degf

; 175  :   }
; 176  :  
; 177  :   return degfree;

	mov	eax, DWORD PTR _degfree$[ebp]
	pop	edi
	pop	esi
	pop	ebx

; 178  : } // end facet_degfree()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN21@facet_degf:
	pop	edi
	pop	esi

; 175  :   }
; 176  :  
; 177  :   return degfree;

	mov	eax, ebx
	pop	ebx

; 178  : } // end facet_degfree()

	mov	esp, ebp
	pop	ebp
	ret	0
_facet_degfree ENDP
_TEXT	ENDS
PUBLIC	__real@3f847ae147ae147b
PUBLIC	_fe_a$GSCopy$
PUBLIC	_fe_b$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_versplit
EXTRN	_set_f_phase_density:PROC
EXTRN	_phase_flag:DWORD
EXTRN	_set_facet_body:PROC
EXTRN	_set_facet_fe:PROC
EXTRN	_new_facetedge:PROC
EXTRN	_dup_facet:PROC
EXTRN	_dup_edge:PROC
EXTRN	_set_e_conmap:PROC
EXTRN	_new_edge:PROC
EXTRN	_dup_vertex:PROC
EXTRN	_get_edge_valence:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT __real@3f847ae147ae147b
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@3f847ae147ae147b DQ 03f847ae147ae147br	; 0.01
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\popfilm.c
CONST	ENDS
;	COMDAT _versplit
_TEXT	SEGMENT
tv4965 = -204						; size = 8
tv5364 = -200						; size = 4
_valence$ = -196					; size = 4
tv5368 = -192						; size = 4
tv5233 = -188						; size = 4
tv4936 = -188						; size = 4
tv5463 = -184						; size = 4
_start_fe$89576 = -184					; size = 4
_fe_b_e$ = -180						; size = 4
_new_a$ = -176						; size = 4
tv4926 = -172						; size = 4
tv5284 = -168						; size = 4
tv5035 = -168						; size = 4
_new_fa$ = -168						; size = 4
_old_v$ = -164						; size = 4
tv5006 = -160						; size = 4
_new_b$ = -156						; size = 4
tv5447 = -152						; size = 4
tv5022 = -152						; size = 4
_new_fb$ = -148						; size = 4
tv5435 = -144						; size = 4
tv5003 = -144						; size = 4
tv4897 = -140						; size = 4
_fe_aa$ = -136						; size = 4
tv5428 = -132						; size = 4
tv4905 = -132						; size = 4
_fe_b_old$ = -128					; size = 4
tv5396 = -124						; size = 4
tv5152 = -124						; size = 4
tv4917 = -124						; size = 4
_fe_a$GSCopy$ = -120					; size = 4
tv5113 = -116						; size = 4
_fe_b$GSCopy$ = -112					; size = 4
_fe_bb$ = -108						; size = 4
tv5431 = -104						; size = 4
tv5358 = -104						; size = 4
_old_b$ = -104						; size = 4
_fe_b_new$ = -100					; size = 4
_fe_a_old$ = -96					; size = 4
_new_v$ = -96						; size = 4
tv6649 = -92						; size = 4
tv5412 = -92						; size = 4
tv5126 = -92						; size = 4
_stackcount$89568 = -92					; size = 4
_fe_a_new$ = -88					; size = 4
_new_e$ = -88						; size = 4
_fe_stack$89567 = -84					; size = 80
__$ArrayPad$ = -4					; size = 4
_fe_a$ = 8						; size = 4
_fe_b$ = 12						; size = 4
_this_septum_flag$ = 16					; size = 4
_versplit PROC						; COMDAT

; 597  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _fe_a$[ebp]

; 671  :   }
; 672  :  
; 673  :   /* reset edge endpoints coming into new_v */
; 674  :   { 
; 675  : #define FESTACKSIZE 20
; 676  :     facetedge_id fe_stack[FESTACKSIZE];
; 677  :     int stackcount = 0;
; 678  : 
; 679  :     fe_stack[stackcount++] = fe_a;

	mov	eax, DWORD PTR _fe_b$[ebp]
	mov	edx, DWORD PTR _web+460
	mov	DWORD PTR _fe_b$GSCopy$[ebp], eax
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	push	ebx
	mov	ebx, DWORD PTR _dymem
	mov	DWORD PTR tv4897[ebp], eax
	mov	eax, DWORD PTR [eax+edx]
	push	esi
	mov	esi, DWORD PTR [eax+20]
	mov	edx, ecx
	and	edx, 134217728				; 08000000H
	xor	esi, edx
	push	edi
	mov	edi, DWORD PTR _web+124
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+edx*4]
	mov	edi, DWORD PTR _web+216
	mov	DWORD PTR _fe_a$GSCopy$[ebp], ecx
	mov	DWORD PTR tv4905[ebp], esi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN91@versplit

; 598  :   vertex_id old_v = get_fe_headv(fe_a);

	mov	edi, DWORD PTR [edi+ebx+304]
	mov	edi, DWORD PTR [edx+edi]
	jmp	SHORT $LN652@versplit
$LN91@versplit:
	add	edx, DWORD PTR [edi+ebx+304]
	mov	edi, DWORD PTR _web+636
	mov	edi, DWORD PTR [edx+edi*4]
$LN652@versplit:

; 599  :   vertex_id new_v;
; 600  :   edge_id new_e=0,new_a=0,new_b=0,e_id;

	xor	ebx, ebx

; 601  :   edge_id old_a = get_fe_edge(fe_a);
; 602  :   edge_id old_b = NULLID;
; 603  :   facetedge_id fe_aa = get_prev_facet(fe_a);

	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR _old_v$[ebp], edi
	mov	DWORD PTR _new_e$[ebp], ebx
	mov	DWORD PTR _new_a$[ebp], ebx
	mov	DWORD PTR _new_b$[ebp], ebx
	mov	DWORD PTR _old_b$[ebp], ebx
	mov	DWORD PTR tv4926[ebp], ecx
	je	SHORT $LN97@versplit
	mov	eax, DWORD PTR [eax+40]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN653@versplit
$LN97@versplit:
	mov	eax, DWORD PTR [eax+36]
$LN653@versplit:

; 604  :   facetedge_id fe_bb = NULLID;
; 605  :   facetedge_id fe_a_old,fe_a_new,fe_a_e;
; 606  :   facetedge_id fe_b_old=0,fe_b_new=0,fe_b_e=0;
; 607  :   facet_id new_fa,new_fb=0;
; 608  :   body_id b_id;
; 609  :   int i;
; 610  :   REAL *x;
; 611  :   facetedge_id fe,first_fe;
; 612  :   int valence = get_edge_valence(old_a);

	push	esi
	mov	DWORD PTR _fe_aa$[ebp], eax
	mov	DWORD PTR _fe_bb$[ebp], ebx
	mov	DWORD PTR _fe_b_old$[ebp], ebx
	mov	DWORD PTR _fe_b_new$[ebp], ebx
	mov	DWORD PTR _fe_b_e$[ebp], ebx
	mov	DWORD PTR _new_fb$[ebp], ebx
	call	_get_edge_valence

; 613  :   conmap_t *vmap,*emap,*fmap;
; 614  : 
; 615  :   /* create a new vertex, which will be split away with wedge */
; 616  :   new_v = dup_vertex(old_v);

	push	edi
	mov	DWORD PTR _valence$[ebp], eax
	call	_dup_vertex

; 617  :   x = get_coord(new_v);

	mov	edx, DWORD PTR _web+12
	mov	edi, DWORD PTR _dymem
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	DWORD PTR tv4936[ebp], ecx
	mov	ecx, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _web+104
	add	ecx, DWORD PTR [edx+edi+64]
	add	esp, 8

; 618  :   for ( i = 0 ; i < SDIM ; i++ )

	xor	edx, edx
	mov	DWORD PTR _new_v$[ebp], eax
	cmp	DWORD PTR _web+616, ebx
	jle	SHORT $LN65@versplit
	fld	QWORD PTR __real@3f847ae147ae147b
	mov	edi, OFFSET _new_displacement
	sub	edi, ecx
$LN67@versplit:

; 619  :      x[i] += 0.01*new_displacement[i];

	fld	QWORD PTR [edi+ecx]
	inc	edx
	fmul	ST(0), ST(1)
	add	ecx, 8
	fadd	QWORD PTR [ecx-8]
	fstp	QWORD PTR [ecx-8]
	cmp	edx, DWORD PTR _web+616
	jl	SHORT $LN67@versplit

; 618  :   for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)
$LN65@versplit:

; 620  :   
; 621  :   if ( this_septum_flag )

	cmp	DWORD PTR _this_septum_flag$[ebp], ebx
	je	$LN61@versplit

; 622  :   { /* create new edge between vertices */
; 623  :     new_e = new_edge(old_v,new_v,NULLID);

	mov	edi, DWORD PTR _old_v$[ebp]
	push	ebx
	push	eax
	push	edi
	call	_new_edge
	mov	DWORD PTR _new_e$[ebp], eax

; 624  :     if ( get_vattr(old_v) & BOUNDARY )

	mov	eax, DWORD PTR _web+12
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [eax+edi*4]
	mov	ecx, DWORD PTR [edi+12]
	mov	edx, DWORD PTR [edi+8]
	mov	DWORD PTR tv4965[ebp+4], ecx
	mov	ecx, edx
	and	ecx, 128				; 00000080H
	xor	eax, eax
	add	esp, 12					; 0000000cH
	or	ecx, eax
	je	SHORT $LN63@versplit

; 625  :       set_edge_boundary_num(new_e,get_vertex_boundary_num(old_v));

	mov	edx, DWORD PTR _E_BOUNDARY_ATTR
	cmp	edx, ebx
	je	$LN61@versplit
	mov	ecx, DWORD PTR _V_BOUNDARY_ATTR
	mov	eax, DWORD PTR _dymem
	cmp	ecx, ebx
	je	SHORT $LN70@versplit
	imul	ecx, 240				; 000000f0H
	add	ecx, DWORD PTR _web+104
	mov	ecx, DWORD PTR [ecx+eax+64]
	mov	edi, DWORD PTR [edi+ecx]
	jmp	SHORT $LN71@versplit
$LN70@versplit:
	xor	edi, edi
$LN71@versplit:
	mov	ecx, DWORD PTR _new_e$[ebp]
	imul	edx, 240				; 000000f0H
	mov	ebx, DWORD PTR _web+124
	and	ecx, 134217727				; 07ffffffH
	add	edx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ebx+ecx*4]
	mov	edx, DWORD PTR [edx+eax+64]
	mov	DWORD PTR [ecx+edx], edi

; 626  :     else if ( get_vattr(old_v) & CONSTRAINT )

	jmp	SHORT $LN61@versplit
$LN63@versplit:
	and	edx, 1024				; 00000400H
	xor	eax, eax
	or	edx, eax
	je	SHORT $LN61@versplit

; 627  :     { vmap = get_v_constraint_map(old_v);

	mov	eax, DWORD PTR _web+104
	mov	ecx, DWORD PTR _dymem
	cmp	DWORD PTR [eax+ecx+1288], ebx
	je	SHORT $LN74@versplit
	mov	eax, DWORD PTR [eax+ecx+1264]
	add	eax, edi
	jmp	SHORT $LN75@versplit
$LN74@versplit:
	mov	eax, OFFSET _nullcon
$LN75@versplit:

; 628  :       set_e_conmap(new_e,vmap);

	push	eax
	mov	eax, DWORD PTR _new_e$[ebp]
	push	eax
	call	_set_e_conmap
	add	esp, 8
$LN61@versplit:

; 629  :     }
; 630  :   }
; 631  :   
; 632  :   /* create new edges split off from wedge */
; 633  :   if ( !equal_id(get_prev_facet(fe_aa),fe_a) )

	mov	ecx, DWORD PTR _fe_aa$[ebp]
	mov	eax, ecx
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR tv5003[ebp], eax
	mov	eax, ecx
	mov	ecx, DWORD PTR _web+460
	je	SHORT $LN101@versplit
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	edx, DWORD PTR [eax+ecx]
	mov	DWORD PTR tv5006[ebp], eax
	mov	eax, DWORD PTR [edx+40]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN100@versplit
$LN101@versplit:
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	edx, DWORD PTR [eax+ecx]
	mov	DWORD PTR tv5006[ebp], eax
	mov	eax, DWORD PTR [edx+36]
$LN100@versplit:
	cmp	eax, DWORD PTR _fe_a$GSCopy$[ebp]
	je	$LN60@versplit

; 634  :   {
; 635  :     new_a = dup_edge(old_a);

	push	esi
	call	_dup_edge
	add	esp, 4
	mov	edi, eax
	mov	DWORD PTR _new_a$[ebp], edi

; 636  :     insert_vertex_edge(get_edge_tailv(old_a),new_a);

	test	esi, 134217728				; 08000000H
	je	SHORT $LN105@versplit
	mov	ecx, DWORD PTR _web+124
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN104@versplit
$LN105@versplit:
	mov	edx, DWORD PTR _web+124
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _web+216
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edx+304]
	mov	eax, DWORD PTR [eax+ecx]
$LN104@versplit:
	push	edi
	push	eax
	call	_insert_vertex_edge

; 637  :     insert_vertex_edge(old_v,inverse_id(new_a));

	mov	edx, DWORD PTR _old_v$[ebp]
	xor	edi, 134217728				; 08000000H
	push	edi
	push	edx
	call	_insert_vertex_edge
	add	esp, 16					; 00000010H
$LN60@versplit:

; 638  :   }  
; 639  : 
; 640  :   /* fix up attributes of old edge, in case pulling off wall */
; 641  :   unset_attr(old_a,FIXED);

	mov	eax, esi
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	ecx, DWORD PTR _web[eax+12]
	and	esi, 134217727				; 07ffffffH
	lea	ebx, DWORD PTR _web[eax+12]
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+ecx]
	mov	edx, DWORD PTR [eax+12]
	and	DWORD PTR [eax+8], -65			; ffffffbfH
	mov	DWORD PTR [eax+12], edx

; 642  :   set_edge_boundary_num(old_a,0);

	mov	eax, DWORD PTR _E_BOUNDARY_ATTR
	mov	DWORD PTR tv5035[ebp], ebx
	mov	DWORD PTR tv5022[ebp], esi
	test	eax, eax
	je	SHORT $LN76@versplit
	mov	ecx, DWORD PTR _dymem
	imul	eax, 240				; 000000f0H
	add	eax, DWORD PTR _web+216
	mov	edx, DWORD PTR [eax+ecx+64]
	mov	eax, DWORD PTR _web+124
	mov	ecx, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx], 0
$LN76@versplit:

; 643  :   unset_attr(old_a,BOUNDARY); 

	mov	edx, DWORD PTR [ebx]
	mov	eax, DWORD PTR [esi+edx]
	mov	ecx, DWORD PTR [eax+12]
	and	DWORD PTR [eax+8], -129			; ffffff7fH
	mov	DWORD PTR [eax+12], ecx

; 644  :   fmap = get_f_constraint_map(get_fe_facet(fe_a));

	mov	edx, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	cmp	DWORD PTR [edx+ecx+88], 0
	je	SHORT $LN78@versplit
	test	DWORD PTR _fe_a$GSCopy$[ebp], 268435456	; 10000000H
	jne	SHORT $LN113@versplit
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN112@versplit
$LN113@versplit:
	cmp	DWORD PTR tv4926[ebp], 0
	mov	eax, DWORD PTR _web+460
	mov	edi, DWORD PTR tv4897[ebp]
	mov	eax, DWORD PTR [edi+eax]
	mov	eax, DWORD PTR [eax+24]
	je	SHORT $LN112@versplit
	xor	eax, 134217728				; 08000000H
$LN112@versplit:
	mov	edi, DWORD PTR _web+236
	and	eax, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edi+eax*4]
	add	edi, DWORD PTR [edx+ecx+64]
	jmp	SHORT $LN79@versplit
$LN78@versplit:
	mov	edi, OFFSET _nullcon
$LN79@versplit:

; 645  :   emap = get_e_constraint_map(old_a);

	mov	eax, DWORD PTR _web+216
	cmp	DWORD PTR [eax+ecx+1048], 0
	je	SHORT $LN80@versplit
	mov	edx, DWORD PTR _web+124
	mov	edx, DWORD PTR [esi+edx]
	add	edx, DWORD PTR [eax+ecx+1024]
	jmp	SHORT $LN81@versplit
$LN80@versplit:
	mov	edx, OFFSET _nullcon
$LN81@versplit:

; 646  :   for ( i = 1 ; i <= (int)fmap[0] ; i++ )

	mov	eax, 1
	cmp	DWORD PTR [edi], eax
	jl	SHORT $LN610@versplit
	mov	ebx, edi
	sub	ebx, edx
	lea	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR tv6649[ebp], ebx
	jmp	SHORT $LN59@versplit
	npad	2
$LL608@versplit:
	mov	ebx, DWORD PTR tv6649[ebp]
$LN59@versplit:

; 647  :     emap[i] = fmap[i]; 

	mov	ebx, DWORD PTR [ebx+ecx]
	mov	DWORD PTR [ecx], ebx
	inc	eax
	add	ecx, 4
	cmp	eax, DWORD PTR [edi]
	jle	SHORT $LL608@versplit

; 646  :   for ( i = 1 ; i <= (int)fmap[0] ; i++ )

	mov	ebx, DWORD PTR tv5035[ebp]
$LN610@versplit:

; 648  :   for ( ; i <= (int)emap[0] ; i++ ) emap[i] = 0;

	cmp	eax, DWORD PTR [edx]
	jg	SHORT $LN642@versplit
	npad	6
$LL56@versplit:
	mov	DWORD PTR [edx+eax*4], 0
	inc	eax
	cmp	eax, DWORD PTR [edx]
	jle	SHORT $LL56@versplit
$LN642@versplit:

; 649  :   emap[0] = fmap[0];

	mov	edi, DWORD PTR [edi]
	mov	DWORD PTR [edx], edi

; 650  :   if ( emap[0] == 0 ) unset_attr(old_a,CONSTRAINT);

	test	edi, edi
	jne	SHORT $LN53@versplit
	mov	eax, DWORD PTR [ebx]
	mov	esi, DWORD PTR [esi+eax]
	mov	ecx, DWORD PTR [esi+12]
	and	DWORD PTR [esi+8], -1025		; fffffbffH
	mov	DWORD PTR [esi+12], ecx
	jmp	SHORT $LN118@versplit
$LN53@versplit:

; 651  :   else set_attr(old_a,CONSTRAINT);

	mov	edx, DWORD PTR [ebx]
	mov	esi, DWORD PTR [esi+edx]
	mov	eax, DWORD PTR [esi+12]
	or	DWORD PTR [esi+8], 1024			; 00000400H
	mov	DWORD PTR [esi+12], eax
$LN118@versplit:

; 652  : 
; 653  :   if ( valid_id(fe_b) )

	mov	eax, DWORD PTR _fe_b$GSCopy$[ebp]
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv5113[ebp], eax
	je	$LN613@versplit

; 654  :   { old_b = get_fe_edge(fe_b);

	mov	eax, DWORD PTR _fe_b$GSCopy$[ebp]
	mov	ecx, DWORD PTR _web+460
	mov	ebx, eax
	and	ebx, 134217727				; 07ffffffH
	add	ebx, ebx
	mov	esi, eax
	add	ebx, ebx
	mov	ecx, DWORD PTR [ebx+ecx]
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [ecx+20]

; 655  :     fe_bb = get_prev_facet(fe_b);

	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR _old_b$[ebp], esi
	mov	DWORD PTR tv5126[ebp], eax
	je	SHORT $LN123@versplit
	mov	ecx, DWORD PTR [ecx+40]
	xor	ecx, 134217728				; 08000000H
	mov	DWORD PTR _fe_bb$[ebp], ecx
	jmp	SHORT $LN122@versplit
$LN123@versplit:
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _fe_bb$[ebp], edx
$LN122@versplit:

; 656  :     new_b = dup_edge(old_b);

	push	esi
	call	_dup_edge

; 657  :     insert_vertex_edge(old_v,new_b);

	push	eax
	mov	DWORD PTR _new_b$[ebp], eax
	mov	eax, DWORD PTR _old_v$[ebp]
	push	eax
	call	_insert_vertex_edge

; 658  :     insert_vertex_edge(get_edge_headv(old_b),inverse_id(new_b));

	mov	edi, esi
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	esp, 12					; 0000000cH
	add	edi, edi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN127@versplit
	mov	ecx, DWORD PTR _web+216
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR [ecx+edx+304]
	mov	ecx, DWORD PTR _web+124
	mov	edx, DWORD PTR [ecx+edi]
	mov	eax, DWORD PTR [eax+edx]
	jmp	SHORT $LN126@versplit
$LN127@versplit:
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+124
	add	edx, DWORD PTR [eax+edi]
	mov	ecx, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+ecx*4]
$LN126@versplit:
	mov	edx, DWORD PTR _new_b$[ebp]
	xor	edx, 134217728				; 08000000H
	push	edx
	push	eax
	call	_insert_vertex_edge

; 659  :     /* fix up attributes of old edge, in case pulling off wall */
; 660  :     unset_attr(old_b,FIXED);

	shr	esi, 29					; 0000001dH
	imul	esi, 112				; 00000070H
	mov	eax, DWORD PTR _web[esi+12]
	mov	eax, DWORD PTR [edi+eax]
	mov	edx, DWORD PTR [eax+12]
	and	DWORD PTR [eax+8], -65			; ffffffbfH
	lea	ecx, DWORD PTR _web[esi+12]
	mov	DWORD PTR [eax+12], edx

; 661  :     set_edge_boundary_num(old_b,0);

	mov	eax, DWORD PTR _E_BOUNDARY_ATTR
	add	esp, 8
	mov	DWORD PTR tv5152[ebp], ecx
	test	eax, eax
	je	SHORT $LN611@versplit
	mov	edx, DWORD PTR _dymem
	imul	eax, 240				; 000000f0H
	add	eax, DWORD PTR _web+216
	mov	eax, DWORD PTR [eax+edx+64]
	mov	edx, DWORD PTR _web+124
	mov	edx, DWORD PTR [edx+edi]
	mov	DWORD PTR [eax+edx], 0
$LN611@versplit:

; 662  :     unset_attr(old_b,BOUNDARY); 

	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edi+eax]
	mov	ecx, DWORD PTR [eax+12]
	and	DWORD PTR [eax+8], -129			; ffffff7fH
	mov	DWORD PTR [eax+12], ecx

; 663  :     fmap = get_f_constraint_map(get_fe_facet(fe_b));

	mov	edx, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	cmp	DWORD PTR [edx+ecx+88], 0
	je	SHORT $LN84@versplit
	cmp	DWORD PTR tv5126[ebp], 0
	mov	eax, DWORD PTR _web+460
	mov	eax, DWORD PTR [ebx+eax]
	mov	eax, DWORD PTR [eax+24]
	je	SHORT $LN134@versplit
	xor	eax, 134217728				; 08000000H
$LN134@versplit:
	mov	esi, DWORD PTR _web+236
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+eax*4]
	add	esi, DWORD PTR [edx+ecx+64]
	jmp	SHORT $LN85@versplit
$LN84@versplit:
	mov	esi, OFFSET _nullcon
$LN85@versplit:

; 664  :     emap = get_e_constraint_map(old_b);

	mov	eax, DWORD PTR _web+216
	cmp	DWORD PTR [eax+ecx+1048], 0
	je	SHORT $LN86@versplit
	mov	edx, DWORD PTR _web+124
	mov	edx, DWORD PTR [edx+edi]
	add	edx, DWORD PTR [eax+ecx+1024]
	jmp	SHORT $LN87@versplit
$LN86@versplit:
	mov	edx, OFFSET _nullcon
$LN87@versplit:

; 665  :     for ( i = 1 ; i <= (int)fmap[0] ; i++ )

	mov	eax, 1
	cmp	DWORD PTR [esi], eax
	jl	SHORT $LN612@versplit
	mov	ebx, esi
	sub	ebx, edx
	lea	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR tv6649[ebp], ebx
	jmp	SHORT $LN50@versplit
	npad	5
$LL609@versplit:
	mov	ebx, DWORD PTR tv6649[ebp]
$LN50@versplit:

; 666  :       emap[i] = fmap[i]; 

	mov	ebx, DWORD PTR [ecx+ebx]
	mov	DWORD PTR [ecx], ebx
	inc	eax
	add	ecx, 4
	cmp	eax, DWORD PTR [esi]
	jle	SHORT $LL609@versplit
$LN612@versplit:

; 665  :     for ( i = 1 ; i <= (int)fmap[0] ; i++ )

	mov	ebx, DWORD PTR _fe_b$GSCopy$[ebp]

; 667  :     for ( ; i <= (int)emap[0] ; i++ ) emap[i] = 0;

	cmp	eax, DWORD PTR [edx]
	jg	SHORT $LN643@versplit
	npad	9
$LL47@versplit:
	mov	DWORD PTR [edx+eax*4], 0
	inc	eax
	cmp	eax, DWORD PTR [edx]
	jle	SHORT $LL47@versplit
$LN643@versplit:

; 668  :     emap[0] = fmap[0];

	mov	esi, DWORD PTR [esi]

; 669  :     if ( emap[0] == 0 ) unset_attr(old_b,CONSTRAINT);

	mov	eax, DWORD PTR tv5152[ebp]
	mov	DWORD PTR [edx], esi
	mov	ecx, DWORD PTR [eax]
	mov	edi, DWORD PTR [edi+ecx]
	mov	edx, DWORD PTR [edi+12]
	mov	DWORD PTR [edi+12], edx
	test	esi, esi
	jne	SHORT $LN44@versplit
	and	DWORD PTR [edi+8], -1025		; fffffbffH
	jmp	SHORT $LN140@versplit
$LN44@versplit:

; 670  :     else set_attr(old_b,CONSTRAINT);

	or	DWORD PTR [edi+8], 1024			; 00000400H
	jmp	SHORT $LN140@versplit
$LN613@versplit:
	mov	ebx, DWORD PTR _fe_b$GSCopy$[ebp]
$LN140@versplit:

; 680  :     fe_stack[stackcount++] = inverse_id(get_next_edge(fe_a));

	cmp	DWORD PTR tv4926[ebp], 0
	mov	eax, DWORD PTR _fe_a$GSCopy$[ebp]
	mov	ecx, DWORD PTR _web+460
	mov	edx, DWORD PTR tv4897[ebp]
	mov	DWORD PTR _fe_stack$89567[ebp], eax
	mov	eax, DWORD PTR [edx+ecx]
	je	SHORT $LN143@versplit
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN142@versplit
$LN143@versplit:
	mov	eax, DWORD PTR [eax+32]
$LN142@versplit:

; 681  :     fe_stack[stackcount++] = inverse_id(get_next_edge(fe_aa));

	mov	edx, DWORD PTR tv5006[ebp]
	xor	eax, 134217728				; 08000000H
	cmp	DWORD PTR tv5003[ebp], 0
	mov	DWORD PTR _fe_stack$89567[ebp+4], eax
	mov	eax, DWORD PTR [edx+ecx]
	je	SHORT $LN147@versplit
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN146@versplit
$LN147@versplit:
	mov	eax, DWORD PTR [eax+32]
$LN146@versplit:
	xor	eax, 134217728				; 08000000H

; 682  :     if ( valid_id(fe_b) )

	cmp	DWORD PTR tv5113[ebp], 0
	mov	DWORD PTR _fe_stack$89567[ebp+8], eax
	mov	eax, 3
	je	SHORT $LN591@versplit

; 683  :     { fe_stack[stackcount++] = inverse_id(fe_b);

	mov	eax, ebx
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR _fe_stack$89567[ebp+12], eax

; 684  :       fe_stack[stackcount++] = get_prev_edge(fe_b);

	test	ebx, 134217728				; 08000000H
	je	SHORT $LN151@versplit
	and	ebx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+ebx*4]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN150@versplit
$LN151@versplit:
	and	ebx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+ebx*4]
	mov	eax, DWORD PTR [eax+28]
$LN150@versplit:
	mov	DWORD PTR _fe_stack$89567[ebp+16], eax

; 685  :       fe_stack[stackcount++] = get_prev_edge(fe_bb);

	mov	eax, DWORD PTR _fe_bb$[ebp]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN155@versplit
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN154@versplit
$LN155@versplit:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+28]
$LN154@versplit:
	mov	DWORD PTR _fe_stack$89567[ebp+20], eax
	mov	eax, 6
$LN591@versplit:
	mov	ebx, DWORD PTR _web+124
$LL41@versplit:

; 688  :     { fe = fe_stack[--stackcount];

	mov	esi, DWORD PTR _fe_stack$89567[ebp+eax*4-4]
	dec	eax

; 689  :       e_id = get_fe_edge(fe);

	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edi, esi
	mov	DWORD PTR _stackcount$89568[ebp], eax
	mov	eax, DWORD PTR [ecx+edx*4]
	and	edi, 134217728				; 08000000H
	xor	edi, DWORD PTR [eax+20]

; 690  :       if ( equal_id(get_edge_headv(e_id),new_v) )

	test	edi, 134217728				; 08000000H
	je	SHORT $LN161@versplit
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+edx*4]
	mov	edx, DWORD PTR _web+216
	mov	ebx, DWORD PTR _dymem
	mov	edx, DWORD PTR [edx+ebx+304]
	mov	eax, DWORD PTR [eax+edx]
	jmp	SHORT $LN160@versplit
$LN161@versplit:
	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ebx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ebx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
$LN160@versplit:
	cmp	eax, DWORD PTR _new_v$[ebp]
	je	$LN602@versplit

; 691  :         continue;
; 692  :       remove_vertex_edge(old_v,inverse_id(e_id));

	mov	edx, DWORD PTR _old_v$[ebp]
	mov	ecx, edi
	xor	ecx, 134217728				; 08000000H
	push	ecx
	push	edx
	call	_remove_vertex_edge

; 693  :       set_edge_headv(e_id,new_v);

	mov	eax, DWORD PTR _new_v$[ebp]
	push	eax
	push	edi
	call	_set_edge_headv
	add	esp, 16					; 00000010H

; 694  : 
; 695  :       // add adjacent facet next edges
; 696  :       if ( !equal_id(fe,fe_a) && !equal_id(fe,fe_aa)
; 697  :             && !equal_id(fe,inverse_id(fe_b)) &&
; 698  :             !equal_id(fe,inverse_id(fe_bb)) )

	cmp	esi, DWORD PTR _fe_a$GSCopy$[ebp]
	je	$LN599@versplit
	cmp	esi, DWORD PTR _fe_aa$[ebp]
	je	$LN599@versplit
	mov	eax, DWORD PTR _fe_b$GSCopy$[ebp]
	xor	eax, 134217728				; 08000000H
	cmp	esi, eax
	je	$LN599@versplit
	mov	eax, DWORD PTR _fe_bb$[ebp]
	xor	eax, 134217728				; 08000000H
	cmp	esi, eax
	je	$LN599@versplit

; 690  :       if ( equal_id(get_edge_headv(e_id),new_v) )

	mov	ecx, DWORD PTR _dymem
	mov	edx, DWORD PTR _web+216
	mov	eax, DWORD PTR [edx+ecx+304]

; 699  :       {
; 700  :         facetedge_id start_fe = fe;

	mov	ecx, DWORD PTR _web+460
	mov	ebx, DWORD PTR _web+124
	mov	DWORD PTR _start_fe$89576[ebp], esi
	mov	DWORD PTR tv4917[ebp], eax
	npad	6
$LL37@versplit:

; 701  :         do
; 702  :         { facetedge_id next_fe = inverse_id(get_next_edge(fe));

	mov	eax, esi
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR tv5284[ebp], eax
	je	SHORT $LN165@versplit
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR [esi+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN164@versplit
$LN165@versplit:
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR [esi+32]
$LN164@versplit:
	xor	eax, 134217728				; 08000000H
	mov	edx, eax

; 703  :           edge_id next_e = get_fe_edge(next_fe);

	and	eax, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ecx+eax*4]
	mov	eax, edx
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edi+20]

; 704  :           if ( !equal_id(get_edge_headv(next_e),new_v) )

	test	eax, 134217728				; 08000000H
	je	SHORT $LN171@versplit
	mov	edi, DWORD PTR tv4917[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	eax, DWORD PTR [edi+eax]
	jmp	SHORT $LN170@versplit
$LN171@versplit:
	mov	edi, DWORD PTR _web+636
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	lea	eax, DWORD PTR [eax+edi*4]
	mov	edi, DWORD PTR tv4917[ebp]
	mov	eax, DWORD PTR [eax+edi]
$LN170@versplit:
	cmp	eax, DWORD PTR _new_v$[ebp]
	je	SHORT $LN635@versplit

; 705  :           { // add to stack
; 706  :             fe_stack[stackcount++] = next_fe;

	mov	eax, DWORD PTR _stackcount$89568[ebp]
	mov	DWORD PTR _fe_stack$89567[ebp+eax*4], edx
	inc	eax
	mov	DWORD PTR _stackcount$89568[ebp], eax
$LN635@versplit:

; 707  :           }
; 708  :           fe = get_next_facet(fe);

	cmp	DWORD PTR tv5284[ebp], 0
	je	SHORT $LN175@versplit
	mov	esi, DWORD PTR [esi+36]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN36@versplit
$LN175@versplit:
	mov	esi, DWORD PTR [esi+40]
$LN36@versplit:

; 709  :         } while ( !equal_id(fe,start_fe) );

	cmp	esi, DWORD PTR _start_fe$89576[ebp]
	jne	$LL37@versplit
	jmp	SHORT $LN35@versplit
$LN599@versplit:
	mov	ecx, DWORD PTR _web+460
$LN602@versplit:
	mov	ebx, DWORD PTR _web+124
$LN35@versplit:

; 686  :     }
; 687  :     while ( stackcount )

	mov	eax, DWORD PTR _stackcount$89568[ebp]
	test	eax, eax
	jne	$LL41@versplit

; 710  :       }
; 711  :     } 
; 712  :   }
; 713  : 
; 714  :   if ( this_septum_flag )

	cmp	DWORD PTR _this_septum_flag$[ebp], eax
	je	$LN33@versplit

; 715  :   {
; 716  :     /* create two new facets */
; 717  :     new_fa = dup_facet(get_fe_facet(fe_a));

	test	DWORD PTR _fe_a$GSCopy$[ebp], 268435456	; 10000000H
	jne	SHORT $LN179@versplit
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN614@versplit
$LN179@versplit:
	cmp	DWORD PTR tv4926[ebp], 0
	mov	edx, DWORD PTR tv4897[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	eax, DWORD PTR [eax+24]
	je	SHORT $LN614@versplit
	xor	eax, 134217728				; 08000000H
$LN614@versplit:
	push	eax
	call	_dup_facet
	mov	ebx, eax

; 718  :     set_original(new_fa,NULLID);

	mov	ecx, ebx
	shr	ecx, 29					; 0000001dH
	imul	ecx, 112				; 00000070H
	mov	eax, DWORD PTR _web[ecx+12]
	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	add	esp, 4

; 719  :     if ( valid_id(fe_b) )

	cmp	DWORD PTR tv5113[ebp], 0
	mov	DWORD PTR _new_fa$[ebp], ebx
	mov	DWORD PTR [ecx+20], 0
	je	SHORT $LN603@versplit

; 720  :     {
; 721  :        new_fb = dup_facet(get_fe_facet(fe_b));

	mov	ecx, DWORD PTR _fe_b$GSCopy$[ebp]
	mov	eax, DWORD PTR _web+460
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [edx+24]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN182@versplit
	xor	eax, 134217728				; 08000000H
$LN182@versplit:
	push	eax
	call	_dup_facet

; 722  :        set_original(new_fb,NULLID);

	mov	ecx, eax
	shr	ecx, 29					; 0000001dH
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _web[ecx+12]
	mov	DWORD PTR _new_fb$[ebp], eax
	add	esp, 4
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [eax+20], 0
$LN603@versplit:

; 723  :     }
; 724  :   
; 725  :     /* create new facet-edges */
; 726  :     fe_a_e = new_facetedge(new_fa,new_e);

	mov	esi, DWORD PTR _new_e$[ebp]
	push	esi
	push	ebx
	call	_new_facetedge

; 727  :     fe_a_new = new_facetedge(new_fa,new_a);

	mov	ecx, DWORD PTR _new_a$[ebp]
	push	ecx
	push	ebx
	mov	edi, eax
	call	_new_facetedge

; 728  :     fe_a_old  = new_facetedge(new_fa,inverse_id(old_a));

	mov	edx, DWORD PTR tv4905[ebp]
	xor	edx, 134217728				; 08000000H
	push	edx
	push	ebx
	mov	DWORD PTR _fe_a_new$[ebp], eax
	call	_new_facetedge
	add	esp, 24					; 00000018H

; 729  :     if ( valid_id(fe_b) )

	cmp	DWORD PTR tv5113[ebp], 0
	mov	DWORD PTR _fe_a_old$[ebp], eax
	je	SHORT $LN604@versplit

; 730  :     {
; 731  :        fe_b_e = new_facetedge(new_fb,inverse_id(new_e));

	mov	ebx, DWORD PTR _new_fb$[ebp]
	mov	eax, esi
	xor	eax, 134217728				; 08000000H
	push	eax
	push	ebx
	call	_new_facetedge

; 732  :        fe_b_new = new_facetedge(new_fb,new_b);

	mov	ecx, DWORD PTR _new_b$[ebp]
	push	ecx
	push	ebx
	mov	DWORD PTR _fe_b_e$[ebp], eax
	call	_new_facetedge

; 733  :        fe_b_old  = new_facetedge(new_fb,inverse_id(old_b));

	mov	ebx, DWORD PTR _old_b$[ebp]
	mov	edx, ebx
	xor	edx, 134217728				; 08000000H
	mov	DWORD PTR _fe_b_new$[ebp], eax
	mov	eax, DWORD PTR _new_fb$[ebp]
	push	edx
	push	eax
	call	_new_facetedge
	add	esp, 24					; 00000018H
	mov	DWORD PTR _fe_b_old$[ebp], eax
	jmp	SHORT $LN31@versplit
$LN604@versplit:
	mov	ebx, DWORD PTR _old_b$[ebp]
$LN31@versplit:

; 734  :     }
; 735  :   
; 736  :     /* link elements to facet-edges */
; 737  :     set_edge_fe(old_a,inverse_id(fe_a_old)); 

	mov	eax, DWORD PTR _fe_a_old$[ebp]
	xor	eax, 134217728				; 08000000H
	test	DWORD PTR tv4905[ebp], 134217728	; 08000000H
	mov	DWORD PTR tv5358[ebp], eax
	je	SHORT $LN186@versplit
	xor	eax, 134217728				; 08000000H
$LN186@versplit:
	mov	ecx, DWORD PTR _web+124
	mov	edx, DWORD PTR tv5022[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	mov	DWORD PTR [ecx+28], eax

; 738  :     set_edge_fe(new_a,fe_a_new);

	mov	ecx, DWORD PTR _new_a$[ebp]
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	edx, ecx
	shr	edx, 27					; 0000001bH
	and	edx, 1
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _fe_a_new$[ebp]
	mov	DWORD PTR tv5364[ebp], edx
	je	SHORT $LN189@versplit
	xor	eax, 134217728				; 08000000H
$LN189@versplit:
	mov	edx, DWORD PTR _web+124
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	DWORD PTR tv5368[ebp], ecx
	mov	ecx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax

; 739  :     set_edge_fe(new_e,fe_a_e);

	mov	eax, edi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN192@versplit
	xor	eax, 134217728				; 08000000H
$LN192@versplit:
	mov	edx, DWORD PTR _web+124
	and	esi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+esi*4]

; 740  :     set_facet_fe(new_fa,fe_a_new);

	mov	edx, DWORD PTR _fe_a_new$[ebp]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _new_fa$[ebp]
	push	edx
	push	eax
	call	_set_facet_fe
	add	esp, 8

; 741  :     if ( valid_id(fe_b) )

	cmp	DWORD PTR tv5113[ebp], 0
	je	$LN617@versplit

; 742  :     {
; 743  :       set_edge_fe(old_b,inverse_id(fe_b_old)); 

	mov	eax, DWORD PTR _fe_b_old$[ebp]
	xor	eax, 134217728				; 08000000H
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN195@versplit
	xor	eax, 134217728				; 08000000H
$LN195@versplit:
	mov	ecx, DWORD PTR _web+124
	and	ebx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+ebx*4]

; 744  :       set_edge_fe(new_b,fe_b_new);

	mov	ecx, DWORD PTR _fe_b_new$[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	mov	edx, DWORD PTR _new_b$[ebp]
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, ecx
	test	edx, 134217728				; 08000000H
	je	SHORT $LN198@versplit
	xor	eax, 134217728				; 08000000H
$LN198@versplit:
	mov	esi, DWORD PTR _web+124
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [edx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax

; 745  :       set_facet_fe(new_fb,fe_b_new);

	mov	eax, DWORD PTR _new_fb$[ebp]
	push	ecx
	push	eax
	call	_set_facet_fe
	add	esp, 8
$LN617@versplit:

; 746  :     }
; 747  :   
; 748  :     /* link edges around new facets */
; 749  :     set_next_edge(fe_a_e,fe_a_old);

	mov	eax, edi
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv5396[ebp], eax
	je	SHORT $LN618@versplit
	test	edi, 134217728				; 08000000H
	je	SHORT $LN202@versplit
	mov	edx, DWORD PTR _web+460
	mov	ecx, edi
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR tv5358[ebp]
	mov	DWORD PTR [eax+28], ecx
$LN618@versplit:
	mov	edx, DWORD PTR _fe_a_old$[ebp]
$LN201@versplit:

; 750  :     set_next_edge(fe_a_old,fe_a_new);

	mov	eax, edx
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv5412[ebp], eax
	je	SHORT $LN619@versplit
	mov	ecx, edx
	test	edx, 134217728				; 08000000H
	je	SHORT $LN207@versplit
	mov	esi, DWORD PTR _fe_a_new$[ebp]
	mov	ebx, DWORD PTR _web+460
	mov	eax, esi
	xor	eax, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR tv5412[ebp]
	jmp	SHORT $LN206@versplit

; 746  :     }
; 747  :   
; 748  :     /* link edges around new facets */
; 749  :     set_next_edge(fe_a_e,fe_a_old);

$LN202@versplit:
	mov	eax, DWORD PTR _web+460
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _fe_a_old$[ebp]
	mov	DWORD PTR [ecx+32], edx
	jmp	SHORT $LN201@versplit

; 750  :     set_next_edge(fe_a_old,fe_a_new);

$LN207@versplit:
	mov	esi, DWORD PTR _web+460
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	esi, DWORD PTR _fe_a_new$[ebp]
	mov	DWORD PTR [ecx+32], esi
	jmp	SHORT $LN206@versplit
$LN619@versplit:
	mov	esi, DWORD PTR _fe_a_new$[ebp]
$LN206@versplit:

; 751  :     set_next_edge(fe_a_new,fe_a_e);

	mov	ecx, esi
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	mov	DWORD PTR tv5428[ebp], ecx
	je	SHORT $LN211@versplit
	mov	ebx, DWORD PTR _web+460
	test	esi, 134217728				; 08000000H
	je	SHORT $LN212@versplit
	mov	eax, edi
	xor	eax, 134217728				; 08000000H
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	mov	DWORD PTR [ecx+28], eax
	mov	ecx, DWORD PTR tv5428[ebp]
	jmp	SHORT $LN654@versplit
$LN212@versplit:
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	DWORD PTR [eax+32], edi
$LN654@versplit:
	mov	eax, DWORD PTR tv5412[ebp]
$LN211@versplit:

; 752  :     set_prev_edge(fe_a_old,fe_a_e);

	test	eax, eax
	je	SHORT $LN644@versplit
	mov	ebx, DWORD PTR _web+460
	test	edx, 134217728				; 08000000H
	je	SHORT $LN217@versplit
	mov	eax, edi
	xor	eax, 134217728				; 08000000H
	mov	ecx, edx
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	mov	DWORD PTR [ecx+32], eax
	mov	ecx, DWORD PTR tv5428[ebp]
	jmp	SHORT $LN216@versplit
$LN217@versplit:
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	DWORD PTR [eax+28], edi
$LN216@versplit:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN644@versplit:

; 753  :     set_prev_edge(fe_a_new,fe_a_old);

	test	ecx, ecx
	je	SHORT $LN645@versplit
	test	esi, 134217728				; 08000000H
	je	SHORT $LN222@versplit
	mov	edx, DWORD PTR _web+460
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR tv5358[ebp]
	mov	DWORD PTR [eax+32], ecx
	jmp	SHORT $LN221@versplit
$LN222@versplit:
	mov	ecx, DWORD PTR _web+460
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+28], edx
$LN221@versplit:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN645@versplit:

; 754  :     set_prev_edge(fe_a_e,fe_a_new);

	cmp	DWORD PTR tv5396[ebp], 0
	je	SHORT $LN647@versplit
	test	edi, 134217728				; 08000000H
	je	SHORT $LN227@versplit
	mov	eax, DWORD PTR _web+460
	mov	ecx, esi
	xor	ecx, 134217728				; 08000000H
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [edx+32], ecx
	jmp	SHORT $LN226@versplit
$LN227@versplit:
	mov	ecx, DWORD PTR _web+460
	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx+28], esi
$LN226@versplit:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN647@versplit:

; 755  :     if ( valid_id(fe_b) )

	cmp	DWORD PTR tv5113[ebp], 0

; 756  :     {
; 757  :        set_next_edge(fe_b_e,fe_b_new);

	mov	edx, DWORD PTR _fe_b_e$[ebp]
	je	$LN28@versplit
	mov	eax, edx
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv5447[ebp], eax
	je	SHORT $LN231@versplit
	test	edx, 134217728				; 08000000H
	je	SHORT $LN232@versplit
	mov	eax, DWORD PTR _fe_b_new$[ebp]
	mov	ebx, DWORD PTR _web+460
	xor	eax, 134217728				; 08000000H
	mov	ecx, edx
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	mov	DWORD PTR [ecx+28], eax
	jmp	SHORT $LN231@versplit
$LN232@versplit:
	mov	ecx, DWORD PTR _web+460
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _fe_b_new$[ebp]
	mov	DWORD PTR [eax+32], ecx
$LN231@versplit:

; 758  :        set_next_edge(fe_b_old,fe_b_e);

	mov	ecx, DWORD PTR _fe_b_old$[ebp]
	mov	ebx, ecx
	shr	ebx, 28					; 0000001cH
	and	ebx, 1
	mov	DWORD PTR tv5463[ebp], ebx
	je	SHORT $LN236@versplit
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN237@versplit
	mov	esi, DWORD PTR _web+460
	mov	eax, edx
	xor	eax, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	esi, DWORD PTR _fe_a_new$[ebp]
	mov	DWORD PTR [ecx+28], eax
	jmp	SHORT $LN236@versplit
$LN237@versplit:
	mov	eax, DWORD PTR _web+460
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [ecx+32], edx
$LN236@versplit:

; 759  :        set_next_edge(fe_b_new,fe_b_old);

	mov	eax, DWORD PTR _fe_b_new$[ebp]
	mov	ecx, eax
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	je	SHORT $LN629@versplit
	test	eax, 134217728				; 08000000H
	je	SHORT $LN242@versplit
	mov	esi, DWORD PTR _fe_b_old$[ebp]
	mov	ebx, DWORD PTR _web+460
	xor	esi, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	ebx, DWORD PTR tv5463[ebp]
	mov	DWORD PTR [eax+28], esi
	jmp	SHORT $LN655@versplit
$LN242@versplit:
	mov	esi, DWORD PTR _web+460
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	esi, DWORD PTR _fe_b_old$[ebp]
	mov	DWORD PTR [eax+32], esi
$LN655@versplit:
	mov	esi, DWORD PTR _fe_a_new$[ebp]
	mov	eax, DWORD PTR _fe_b_new$[ebp]
$LN629@versplit:

; 760  :        set_prev_edge(fe_b_old,fe_b_new);

	test	ebx, ebx
	je	SHORT $LN633@versplit
	mov	ebx, DWORD PTR _fe_b_old$[ebp]
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN247@versplit
	mov	esi, DWORD PTR _web+460
	xor	eax, 134217728				; 08000000H
	and	ebx, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+ebx*4]
	mov	DWORD PTR [esi+32], eax
	mov	esi, DWORD PTR _fe_a_new$[ebp]
	jmp	SHORT $LN246@versplit
$LN247@versplit:
	mov	eax, DWORD PTR _web+460
	and	ebx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ebx*4]
	mov	ebx, DWORD PTR _fe_b_new$[ebp]
	mov	DWORD PTR [eax+28], ebx
$LN246@versplit:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _fe_b_new$[ebp]
$LN633@versplit:

; 761  :        set_prev_edge(fe_b_new,fe_b_e);

	test	ecx, ecx
	je	SHORT $LN254@versplit
	test	eax, 134217728				; 08000000H
	je	SHORT $LN252@versplit
	mov	ecx, DWORD PTR _fe_b_new$[ebp]
	mov	ebx, DWORD PTR _web+460
	mov	eax, edx
	xor	eax, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	mov	DWORD PTR [ecx+32], eax
	jmp	SHORT $LN251@versplit
$LN252@versplit:
	mov	ecx, DWORD PTR _web+460
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+28], edx
$LN251@versplit:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN254@versplit:

; 762  :        set_prev_edge(fe_b_e,fe_b_old);

	cmp	DWORD PTR tv5447[ebp], 0
	je	SHORT $LN259@versplit
	test	edx, 134217728				; 08000000H
	je	SHORT $LN257@versplit
	mov	ecx, DWORD PTR _fe_b_old$[ebp]
	mov	ebx, DWORD PTR _web+460
	xor	ecx, 134217728				; 08000000H
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	DWORD PTR [eax+32], ecx
	jmp	SHORT $LN256@versplit
$LN257@versplit:
	mov	eax, DWORD PTR _web+460
	mov	ecx, edx
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _fe_b_old$[ebp]
	mov	DWORD PTR [ecx+28], eax
$LN256@versplit:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN259@versplit:

; 763  :     }
; 764  :   
; 765  :     /* link facets around edges */
; 766  :     
; 767  :     /* new middle edge */
; 768  :     if ( valid_id(fe_b) )

	cmp	DWORD PTR tv5113[ebp], 0
	je	$LN28@versplit

; 769  :     { set_next_facet(fe_a_e,inverse_id(fe_b_e));

	mov	ecx, edx
	xor	ecx, 134217728				; 08000000H
	cmp	DWORD PTR tv5396[ebp], 0
	je	SHORT $LN630@versplit
	test	edi, 134217728				; 08000000H
	je	SHORT $LN262@versplit
	mov	ebx, DWORD PTR _web+460
	mov	eax, ecx
	xor	eax, 134217728				; 08000000H
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ebx+esi*4]
	mov	DWORD PTR [esi+36], eax
	jmp	SHORT $LN630@versplit
$LN262@versplit:
	mov	esi, DWORD PTR _web+460
	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [eax+40], ecx
$LN630@versplit:

; 770  :       set_next_facet(fe_b_e,inverse_id(fe_a_e));

	mov	ebx, edx
	mov	eax, edi
	shr	ebx, 28					; 0000001cH
	xor	eax, 134217728				; 08000000H
	and	ebx, 1
	mov	DWORD PTR tv5447[ebp], ebx
	je	SHORT $LN621@versplit
	mov	ebx, DWORD PTR _web+460
	test	edx, 134217728				; 08000000H
	je	SHORT $LN267@versplit
	mov	esi, eax
	xor	esi, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+edx*4]
	mov	DWORD PTR [edx+36], esi
	mov	edx, DWORD PTR _fe_b_e$[ebp]
	jmp	SHORT $LN656@versplit
$LN267@versplit:
	mov	esi, edx
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ebx+esi*4]
	mov	DWORD PTR [esi+40], eax
$LN656@versplit:
	mov	ebx, DWORD PTR tv5447[ebp]
$LN621@versplit:

; 771  :       set_prev_facet(fe_a_e,inverse_id(fe_b_e));

	cmp	DWORD PTR tv5396[ebp], 0
	je	SHORT $LN624@versplit
	mov	esi, DWORD PTR _web+460
	test	edi, 134217728				; 08000000H
	je	SHORT $LN272@versplit
	xor	ecx, 134217728				; 08000000H
	and	edi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+edi*4]
	mov	DWORD PTR [esi+40], ecx
	jmp	SHORT $LN271@versplit
$LN272@versplit:
	and	edi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+edi*4]
	mov	DWORD PTR [esi+36], ecx
$LN271@versplit:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN624@versplit:

; 772  :       set_prev_facet(fe_b_e,inverse_id(fe_a_e));

	test	ebx, ebx
	je	SHORT $LN625@versplit
	mov	ecx, DWORD PTR _web+460
	test	edx, 134217728				; 08000000H
	je	SHORT $LN277@versplit
	xor	eax, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN276@versplit
$LN277@versplit:
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+36], eax
$LN276@versplit:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN625@versplit:

; 773  :     }
; 774  :     else

	mov	esi, DWORD PTR _fe_a_new$[ebp]
$LN658@versplit:

; 777  :     }
; 778  :       
; 779  :     /* facet A old edge */
; 780  :     set_next_facet(fe_a_old,inverse_id(fe_a));

	mov	eax, DWORD PTR _fe_a$GSCopy$[ebp]
	mov	ecx, DWORD PTR tv5412[ebp]
	mov	ebx, DWORD PTR _fe_a_old$[ebp]
	xor	eax, 134217728				; 08000000H
	test	ecx, ecx
	je	$LN291@versplit
	mov	edi, DWORD PTR _web+460
	mov	edx, ebx
	test	ebx, 134217728				; 08000000H
	je	$LN292@versplit
	xor	eax, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+edx*4]
	mov	DWORD PTR [edx+36], eax
	jmp	$LN291@versplit
$LN28@versplit:

; 775  :     { set_next_facet(fe_a_e,fe_a_e);

	mov	ecx, DWORD PTR tv5396[ebp]
	test	ecx, ecx
	je	SHORT $LN658@versplit
	mov	eax, edi
	test	edi, 134217728				; 08000000H
	je	SHORT $LN282@versplit
	mov	ebx, DWORD PTR _web+460
	xor	eax, 134217728				; 08000000H
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+edx*4]
	mov	DWORD PTR [edx+36], eax
	jmp	SHORT $LN631@versplit
$LN282@versplit:
	mov	edx, DWORD PTR _web+460
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [eax+40], edi
$LN631@versplit:

; 776  :       set_prev_facet(fe_a_e,fe_a_e);

	test	ecx, ecx
	je	$LN658@versplit
	mov	ecx, DWORD PTR _web+460
	mov	eax, edi
	test	edi, 134217728				; 08000000H
	je	SHORT $LN287@versplit
	xor	eax, 134217728				; 08000000H
	and	edi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edi*4]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN286@versplit
$LN287@versplit:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx+36], edi
$LN286@versplit:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	jmp	$LN658@versplit

; 777  :     }
; 778  :       
; 779  :     /* facet A old edge */
; 780  :     set_next_facet(fe_a_old,inverse_id(fe_a));

$LN292@versplit:
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+edx*4]
	mov	DWORD PTR [edx+40], eax
$LN291@versplit:

; 781  :     set_prev_facet(fe_a_old,inverse_id(fe_aa));

	mov	eax, DWORD PTR _fe_aa$[ebp]
	xor	eax, 134217728				; 08000000H
	test	ecx, ecx
	je	SHORT $LN632@versplit
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN297@versplit
	mov	edx, DWORD PTR _web+460
	xor	eax, 134217728				; 08000000H
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+40], eax
	jmp	SHORT $LN296@versplit
$LN297@versplit:
	mov	ecx, DWORD PTR _web+460
	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+36], eax
$LN296@versplit:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN632@versplit:

; 782  :   
; 783  :     /* facet A new edge */
; 784  :     if ( valence >= 3 )

	cmp	DWORD PTR _valence$[ebp], 3
	jl	$LN26@versplit

; 785  :     { set_next_facet(fe_a_new,get_next_facet(fe_a));

	cmp	DWORD PTR tv4926[ebp], 0
	mov	eax, DWORD PTR _web+460
	mov	ecx, DWORD PTR tv4897[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	je	SHORT $LN302@versplit
	mov	ecx, DWORD PTR [edx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN301@versplit
$LN302@versplit:
	mov	ecx, DWORD PTR [edx+40]
$LN301@versplit:
	mov	edx, DWORD PTR tv5428[ebp]
	test	edx, edx
	je	SHORT $LN305@versplit
	mov	edi, esi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN306@versplit
	xor	ecx, 134217728				; 08000000H
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR [eax+36], ecx
	jmp	SHORT $LN659@versplit
$LN306@versplit:
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR [eax+40], ecx
$LN659@versplit:
	mov	eax, DWORD PTR _web+460
$LN305@versplit:

; 786  :       set_prev_facet(fe_a_new,get_prev_facet(fe_aa));

	cmp	DWORD PTR tv5003[ebp], 0
	mov	ecx, DWORD PTR tv5006[ebp]
	mov	ecx, DWORD PTR [ecx+eax]
	je	SHORT $LN311@versplit
	mov	ecx, DWORD PTR [ecx+40]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN310@versplit
$LN311@versplit:
	mov	ecx, DWORD PTR [ecx+36]
$LN310@versplit:
	test	edx, edx
	je	$LN327@versplit
	mov	edx, esi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN315@versplit
	xor	ecx, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+40], ecx
	jmp	$LN324@versplit
$LN315@versplit:
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+36], ecx

; 787  :     }
; 788  :     else

	jmp	$LN324@versplit
$LN26@versplit:

; 789  :     { set_next_facet(fe_a_new,fe_a_new);

	mov	eax, DWORD PTR tv5428[ebp]
	test	eax, eax
	je	$LN598@versplit
	mov	ecx, esi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN320@versplit
	mov	edi, DWORD PTR _web+460
	xor	ecx, 134217728				; 08000000H
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+edx*4]
	mov	DWORD PTR [edx+36], ecx
	jmp	SHORT $LN319@versplit
$LN320@versplit:
	mov	edx, DWORD PTR _web+460
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+40], esi
$LN319@versplit:

; 790  :       set_prev_facet(fe_a_new,fe_a_new);

	test	eax, eax
	je	SHORT $LN598@versplit
	test	esi, 134217728				; 08000000H
	je	SHORT $LN325@versplit
	mov	ecx, DWORD PTR _web+460
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+40], edx
	jmp	SHORT $LN324@versplit
$LN325@versplit:
	mov	edx, DWORD PTR _web+460
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [eax+36], esi
$LN324@versplit:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _top_timestamp, eax
	mov	DWORD PTR _global_timestamp, eax
$LN598@versplit:

; 787  :     }
; 788  :     else

	mov	eax, DWORD PTR _web+460

; 790  :       set_prev_facet(fe_a_new,fe_a_new);

$LN327@versplit:

; 791  :     }
; 792  :   
; 793  :     /* reset old links */
; 794  :     set_next_facet(get_prev_facet(fe_a_old),fe_a_old);

	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	edi, ebx
	add	ecx, ecx
	shr	edi, 27					; 0000001bH
	add	ecx, ecx
	and	edi, 1
	mov	edx, DWORD PTR [ecx+eax]
	je	SHORT $LN330@versplit
	mov	edx, DWORD PTR [edx+40]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN329@versplit
$LN330@versplit:
	mov	edx, DWORD PTR [edx+36]
$LN329@versplit:
	test	edx, 268435456				; 10000000H
	je	SHORT $LN333@versplit
	test	edx, 134217728				; 08000000H
	je	SHORT $LN334@versplit
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR tv5358[ebp]
	mov	DWORD PTR [eax+36], edx
	jmp	SHORT $LN661@versplit
$LN334@versplit:
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+40], ebx
$LN661@versplit:
	mov	eax, DWORD PTR _web+460
$LN333@versplit:

; 795  :     set_prev_facet(get_next_facet(fe_a_old),fe_a_old);

	test	edi, edi
	je	SHORT $LN339@versplit
	mov	ecx, DWORD PTR [ecx+eax]
	mov	ecx, DWORD PTR [ecx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN338@versplit
$LN339@versplit:
	mov	edx, DWORD PTR [ecx+eax]
	mov	ecx, DWORD PTR [edx+40]
$LN338@versplit:
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN636@versplit
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN343@versplit
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR tv5358[ebp]
	mov	DWORD PTR [eax+40], ecx
	jmp	SHORT $LN342@versplit
$LN343@versplit:
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [edx+36], ebx
$LN342@versplit:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN636@versplit:

; 796  :     set_next_facet(get_prev_facet(fe_a_new),fe_a_new);

	mov	edi, esi
	shr	edi, 27					; 0000001bH
	and	edi, 1
	mov	DWORD PTR tv5431[ebp], edi
	mov	edx, esi
	je	SHORT $LN348@versplit
	and	edx, 134217727				; 07ffffffH
	add	edx, edx
	add	edx, edx
	mov	ecx, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [ecx+40]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN662@versplit
$LN348@versplit:
	and	edx, 134217727				; 07ffffffH
	add	edx, edx
	add	edx, edx
	mov	ecx, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [ecx+36]
$LN662@versplit:
	mov	DWORD PTR tv5435[ebp], edx
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN351@versplit
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN352@versplit
	mov	ebx, esi
	xor	ebx, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [eax+36], ebx
	jmp	SHORT $LN663@versplit
$LN352@versplit:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [ecx+40], esi
$LN663@versplit:
	mov	eax, DWORD PTR _web+460
$LN351@versplit:

; 797  :     set_prev_facet(get_next_facet(fe_a_new),fe_a_new);

	test	edi, edi
	je	SHORT $LN357@versplit
	mov	edx, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [edx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN356@versplit
$LN357@versplit:
	mov	ecx, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [ecx+40]
$LN356@versplit:
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN648@versplit
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN361@versplit
	xor	esi, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [edx+40], esi
	jmp	SHORT $LN360@versplit
$LN361@versplit:
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [eax+36], esi
$LN360@versplit:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN648@versplit:

; 798  :   
; 799  :     /* reset edges of facet-edges around new edge */
; 800  :     fe = first_fe = get_edge_fe(new_a);

	mov	ecx, DWORD PTR tv5368[ebp]
	mov	edx, DWORD PTR _web+124
	mov	ecx, DWORD PTR [ecx+edx]
	test	ecx, ecx
	jne	SHORT $LN366@versplit
	xor	ebx, ebx
	jmp	SHORT $LN367@versplit
$LN366@versplit:
	cmp	DWORD PTR tv5364[ebp], 0
	mov	ecx, DWORD PTR [ecx+28]
	je	SHORT $LN365@versplit
	xor	ecx, 134217728				; 08000000H
$LN365@versplit:
	mov	ebx, ecx
$LN367@versplit:
	mov	ecx, ebx

; 801  :     if ( valid_id(fe) ) do

	test	ebx, 268435456				; 10000000H
	je	SHORT $LN21@versplit
	mov	edi, DWORD PTR _new_a$[ebp]
	npad	3
$LL23@versplit:

; 802  :     { set_fe_edge(fe,new_a);

	mov	edx, ecx
	shr	edx, 27					; 0000001bH
	and	edx, 1
	mov	esi, edi
	je	SHORT $LN369@versplit
	xor	esi, 134217728				; 08000000H
$LN369@versplit:
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	eax, DWORD PTR [ecx+eax]
	mov	DWORD PTR [eax+20], esi
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax

; 803  :       fe = get_next_facet(fe);

	mov	eax, DWORD PTR _web+460
	test	edx, edx
	je	SHORT $LN373@versplit
	mov	ecx, DWORD PTR [ecx+eax]
	mov	ecx, DWORD PTR [ecx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN22@versplit
$LN373@versplit:
	mov	edx, DWORD PTR [ecx+eax]
	mov	ecx, DWORD PTR [edx+40]
$LN22@versplit:

; 804  :     } while ( valid_id(fe) && !equal_id(fe,first_fe) );

	test	ecx, 268435456				; 10000000H
	je	SHORT $LN21@versplit
	cmp	ecx, ebx
	jne	SHORT $LL23@versplit
$LN21@versplit:

; 805  :   
; 806  :     if ( valid_id(fe_b) )

	cmp	DWORD PTR tv5113[ebp], 0
	je	$LN15@versplit

; 807  :     { /* facet B old edge */
; 808  :       set_next_facet(fe_b_old,inverse_id(fe_b));

	mov	esi, DWORD PTR _fe_b_old$[ebp]
	mov	ebx, DWORD PTR _fe_b$GSCopy$[ebp]
	mov	edx, esi
	mov	ecx, ebx
	shr	edx, 28					; 0000001cH
	xor	ecx, 134217728				; 08000000H
	and	edx, 1
	je	SHORT $LN637@versplit
	mov	edi, esi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN377@versplit
	xor	ecx, 134217728				; 08000000H
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR [eax+36], ecx
	jmp	SHORT $LN664@versplit
$LN377@versplit:
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR [eax+40], ecx
$LN664@versplit:
	mov	eax, DWORD PTR _web+460
$LN637@versplit:

; 809  :       set_prev_facet(fe_b_old,inverse_id(fe_bb));

	mov	edi, DWORD PTR _fe_bb$[ebp]
	mov	ecx, edi
	xor	ecx, 134217728				; 08000000H
	test	edx, edx
	je	SHORT $LN384@versplit
	mov	edx, esi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN382@versplit
	xor	ecx, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+40], ecx
	jmp	SHORT $LN381@versplit
$LN382@versplit:
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+36], ecx
$LN381@versplit:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN384@versplit:

; 810  :   
; 811  :       /* facet B new edge */
; 812  :       set_next_facet(fe_b_new,get_next_facet(fe_b));

	test	ebx, 134217728				; 08000000H
	je	SHORT $LN387@versplit
	and	ebx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ebx*4]
	mov	ecx, DWORD PTR [ecx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN386@versplit
$LN387@versplit:
	and	ebx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+ebx*4]
	mov	ecx, DWORD PTR [edx+40]
$LN386@versplit:
	mov	ebx, DWORD PTR _fe_b_new$[ebp]
	mov	edx, ebx
	shr	edx, 28					; 0000001cH
	and	edx, 1
	je	SHORT $LN390@versplit
	mov	edi, ebx
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN391@versplit
	xor	ecx, 134217728				; 08000000H
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR [eax+36], ecx
	jmp	SHORT $LN665@versplit
$LN391@versplit:
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR [eax+40], ecx
$LN665@versplit:
	mov	edi, DWORD PTR _fe_bb$[ebp]
	mov	eax, DWORD PTR _web+460
$LN390@versplit:

; 813  :       set_prev_facet(fe_b_new,get_prev_facet(fe_bb));

	test	edi, 134217728				; 08000000H
	je	SHORT $LN396@versplit
	and	edi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edi*4]
	mov	ecx, DWORD PTR [ecx+40]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN395@versplit
$LN396@versplit:
	and	edi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edi*4]
	mov	ecx, DWORD PTR [ecx+36]
$LN395@versplit:
	test	edx, edx
	je	SHORT $LN402@versplit
	mov	edx, ebx
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN400@versplit
	xor	ecx, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+40], ecx
	jmp	SHORT $LN399@versplit
$LN400@versplit:
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+36], ecx
$LN399@versplit:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN402@versplit:

; 814  :   
; 815  :       /* reset old links */
; 816  :       set_next_facet(get_prev_facet(fe_b_old),fe_b_old);

	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edi, esi
	add	edx, edx
	shr	edi, 27					; 0000001bH
	add	edx, edx
	and	edi, 1
	mov	ecx, DWORD PTR [edx+eax]
	je	SHORT $LN405@versplit
	mov	ecx, DWORD PTR [ecx+40]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN404@versplit
$LN405@versplit:
	mov	ecx, DWORD PTR [ecx+36]
$LN404@versplit:
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN408@versplit
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN409@versplit
	mov	ebx, esi
	xor	ebx, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [eax+36], ebx
	mov	ebx, DWORD PTR _fe_b_new$[ebp]
	jmp	SHORT $LN666@versplit
$LN409@versplit:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [ecx+40], esi
$LN666@versplit:
	mov	eax, DWORD PTR _web+460
$LN408@versplit:

; 817  :       set_prev_facet(get_next_facet(fe_b_old),fe_b_old);

	test	edi, edi
	je	SHORT $LN414@versplit
	mov	edx, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [edx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN413@versplit
$LN414@versplit:
	mov	ecx, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [ecx+40]
$LN413@versplit:
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN420@versplit
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN418@versplit
	xor	esi, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [edx+40], esi
	jmp	SHORT $LN417@versplit
$LN418@versplit:
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [eax+36], esi
$LN417@versplit:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN420@versplit:

; 818  :       set_next_facet(get_prev_facet(fe_b_new),fe_b_new);

	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	edi, ebx
	add	edx, edx
	shr	edi, 27					; 0000001bH
	add	edx, edx
	and	edi, 1
	mov	ecx, DWORD PTR [edx+eax]
	je	SHORT $LN423@versplit
	mov	ecx, DWORD PTR [ecx+40]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN422@versplit
$LN423@versplit:
	mov	ecx, DWORD PTR [ecx+36]
$LN422@versplit:
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN639@versplit
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN427@versplit
	mov	esi, ebx
	xor	esi, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [eax+36], esi
	jmp	SHORT $LN667@versplit
$LN427@versplit:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [ecx+40], ebx
$LN667@versplit:
	mov	eax, DWORD PTR _web+460
$LN639@versplit:

; 819  :       set_prev_facet(get_next_facet(fe_b_new),fe_b_new);

	test	edi, edi
	je	SHORT $LN432@versplit
	mov	edx, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [edx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN431@versplit
$LN432@versplit:
	mov	ecx, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [ecx+40]
$LN431@versplit:
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN646@versplit
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN436@versplit
	xor	ebx, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [edx+40], ebx
	jmp	SHORT $LN435@versplit
$LN436@versplit:
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [eax+36], ebx
$LN435@versplit:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN646@versplit:

; 820  :   
; 821  :       /* reset edges of facet-edges around new edge */
; 822  :       fe = first_fe = get_edge_fe(new_b);

	mov	edx, DWORD PTR _new_b$[ebp]
	mov	esi, DWORD PTR _web+124
	mov	ecx, edx
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	test	ecx, ecx
	jne	SHORT $LN441@versplit
	xor	ebx, ebx
	jmp	SHORT $LN442@versplit
$LN441@versplit:
	mov	ecx, DWORD PTR [ecx+28]
	test	edx, 134217728				; 08000000H
	je	SHORT $LN440@versplit
	xor	ecx, 134217728				; 08000000H
$LN440@versplit:
	mov	ebx, ecx
$LN442@versplit:
	mov	ecx, ebx

; 823  :       if ( valid_id(fe) ) do

	test	ebx, 268435456				; 10000000H
	je	SHORT $LN15@versplit
	mov	edi, DWORD PTR _new_b$[ebp]
$LL17@versplit:

; 824  :       { set_fe_edge(fe,new_b);

	mov	edx, ecx
	shr	edx, 27					; 0000001bH
	and	edx, 1
	mov	esi, edi
	je	SHORT $LN444@versplit
	xor	esi, 134217728				; 08000000H
$LN444@versplit:
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	eax, DWORD PTR [ecx+eax]
	mov	DWORD PTR [eax+20], esi
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax

; 825  :         fe = get_next_facet(fe);

	mov	eax, DWORD PTR _web+460
	test	edx, edx
	je	SHORT $LN448@versplit
	mov	ecx, DWORD PTR [ecx+eax]
	mov	ecx, DWORD PTR [ecx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN16@versplit
$LN448@versplit:
	mov	edx, DWORD PTR [ecx+eax]
	mov	ecx, DWORD PTR [edx+40]
$LN16@versplit:

; 826  :       } while ( valid_id(fe) && !equal_id(fe,first_fe) );

	test	ecx, 268435456				; 10000000H
	je	SHORT $LN15@versplit
	cmp	ecx, ebx
	jne	SHORT $LL17@versplit
$LN15@versplit:

; 827  :     }
; 828  :   
; 829  :     /* set new facet bodies */
; 830  :     fe = get_next_facet(fe_a_new);

	cmp	DWORD PTR tv5431[ebp], 0
	mov	edi, DWORD PTR tv5435[ebp]
	je	SHORT $LN452@versplit
	mov	ecx, DWORD PTR [edi+eax]
	mov	ecx, DWORD PTR [ecx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN451@versplit
$LN452@versplit:
	mov	edx, DWORD PTR [edi+eax]
	mov	ecx, DWORD PTR [edx+40]
$LN451@versplit:

; 831  :     b_id = get_facet_body(get_fe_facet(fe));

	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN456@versplit
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN455@versplit
$LN456@versplit:
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [eax+24]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN455@versplit
	xor	eax, 134217728				; 08000000H
$LN455@versplit:
	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN462@versplit
	xor	esi, esi
	jmp	SHORT $LN459@versplit
$LN462@versplit:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN461@versplit
	xor	esi, esi
	jmp	SHORT $LN459@versplit
$LN461@versplit:
	mov	ecx, DWORD PTR _web+236
	test	eax, 134217728				; 08000000H
	je	SHORT $LN460@versplit
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	esi, DWORD PTR [edx+eax+4]
	jmp	SHORT $LN459@versplit
$LN460@versplit:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	esi, DWORD PTR [edx+eax]
$LN459@versplit:

; 832  :     set_facet_body(inverse_id(new_fa),b_id);

	mov	ebx, DWORD PTR _new_fa$[ebp]
	mov	ecx, ebx
	xor	ecx, 134217728				; 08000000H
	push	esi
	push	ecx
	call	_set_facet_body
	add	esp, 8

; 833  :     if ( valid_id(fe_b) )

	cmp	DWORD PTR tv5113[ebp], 0
	je	SHORT $LN623@versplit

; 834  :        set_facet_body(inverse_id(new_fb),b_id);

	mov	edx, DWORD PTR _new_fb$[ebp]
	xor	edx, 134217728				; 08000000H
	push	esi
	push	edx
	call	_set_facet_body
	add	esp, 8
$LN623@versplit:

; 835  :     fe = inverse_id(get_prev_facet(fe_a_new));

	cmp	DWORD PTR tv5431[ebp], 0
	mov	ecx, DWORD PTR _web+460
	je	SHORT $LN466@versplit
	mov	eax, DWORD PTR [edi+ecx]
	mov	eax, DWORD PTR [eax+40]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN465@versplit
$LN466@versplit:
	mov	edx, DWORD PTR [edi+ecx]
	mov	eax, DWORD PTR [edx+36]
$LN465@versplit:
	xor	eax, 134217728				; 08000000H

; 836  :     b_id = get_facet_body(get_fe_facet(fe));

	test	eax, 268435456				; 10000000H
	jne	SHORT $LN470@versplit
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN471@versplit
$LN470@versplit:
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [ecx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN469@versplit
	xor	ecx, 134217728				; 08000000H
$LN469@versplit:
	mov	eax, ecx
$LN471@versplit:
	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN476@versplit
	xor	esi, esi
	jmp	SHORT $LN473@versplit
$LN476@versplit:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN475@versplit
	xor	esi, esi
	jmp	SHORT $LN473@versplit
$LN475@versplit:
	mov	edx, DWORD PTR _web+236
	mov	ecx, DWORD PTR _web+328
	test	eax, 134217728				; 08000000H
	je	SHORT $LN474@versplit
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edx+784]
	mov	esi, DWORD PTR [eax+ecx+4]
	jmp	SHORT $LN473@versplit
$LN474@versplit:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edx+784]
	mov	esi, DWORD PTR [eax+ecx]
$LN473@versplit:

; 837  :     set_facet_body(new_fa,b_id);

	push	esi
	push	ebx
	call	_set_facet_body

; 838  :     if ( valid_id(fe_b) )

	mov	edi, DWORD PTR tv5113[ebp]
	add	esp, 8
	test	edi, edi
	je	SHORT $LN640@versplit

; 839  :        set_facet_body(new_fb,b_id);

	mov	edx, DWORD PTR _new_fb$[ebp]
	push	esi
	push	edx
	call	_set_facet_body
	add	esp, 8
$LN640@versplit:

; 840  : 
; 841  :     /* Tension, if phases */
; 842  :     if ( phase_flag )

	cmp	DWORD PTR _phase_flag, 0
	je	SHORT $LN641@versplit

; 843  :     { set_f_phase_density(new_fa);

	push	ebx
	call	_set_f_phase_density
	add	esp, 4

; 844  :       if ( valid_id(fe_b) )

	test	edi, edi
	je	SHORT $LN641@versplit

; 845  :         set_f_phase_density(new_fb); 

	mov	eax, DWORD PTR _new_fb$[ebp]
	push	eax
	call	_set_f_phase_density
	add	esp, 4
$LN641@versplit:

; 846  :     }
; 847  : 
; 848  :     /* set velocity, so can tell edge is supposed to grow */
; 849  :     { REAL *velocity;
; 850  :       velocity = get_velocity(old_v);

	mov	eax, DWORD PTR _old_v$[ebp]
	mov	ecx, DWORD PTR _web+12
	mov	edx, DWORD PTR _dymem
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _web+104
	add	eax, DWORD PTR [ecx+edx+1024]

; 851  :       for ( i = 0 ; i < SDIM ; i++ )

	mov	edx, DWORD PTR _web+616
	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN605@versplit
	mov	esi, OFFSET _new_displacement
	sub	esi, eax
	npad	1
$LL9@versplit:

; 852  :          velocity[i] = -new_displacement[i];

	fld	QWORD PTR [esi+eax]
	inc	ecx
	fchs
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	mov	edx, DWORD PTR _web+616
	cmp	ecx, edx
	jl	SHORT $LL9@versplit
$LN605@versplit:

; 853  :       velocity = get_velocity(new_v);

	mov	ecx, DWORD PTR _web+12
	mov	eax, DWORD PTR tv4936[ebp]
	mov	eax, DWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR _web+104
	mov	esi, DWORD PTR _dymem
	add	eax, DWORD PTR [ecx+esi+1024]

; 854  :       for ( i = 0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	test	edx, edx
	jle	$LN557@versplit
	mov	edx, OFFSET _new_displacement
	sub	edx, eax
	npad	7
$LL6@versplit:

; 855  :          velocity[i] = new_displacement[i];

	fld	QWORD PTR [eax+edx]
	inc	ecx
	fstp	QWORD PTR [eax]
	add	eax, 8
	cmp	ecx, DWORD PTR _web+616
	jl	SHORT $LL6@versplit
	pop	edi
	pop	esi
	pop	ebx

; 889  :     }
; 890  :   }
; 891  : } // end versplit()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN33@versplit:

; 856  :     }
; 857  :   } /* end if this_septum_flag */
; 858  :   else
; 859  :   { /* no septum, so just reset facetedge links */
; 860  :     
; 861  :     facetedge_id fe_a_next = get_next_facet(fe_a);

	mov	ebx, DWORD PTR tv4926[ebp]
	test	ebx, ebx
	je	SHORT $LN480@versplit
	mov	edx, DWORD PTR tv4897[ebp]
	mov	esi, DWORD PTR [edx+ecx]
	mov	edx, DWORD PTR [esi+36]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN479@versplit
$LN480@versplit:
	mov	eax, DWORD PTR tv4897[ebp]
	mov	esi, DWORD PTR [eax+ecx]
	mov	edx, DWORD PTR [esi+40]
$LN479@versplit:

; 862  :     facetedge_id fe_aa_prev = get_prev_facet(fe_aa);

	cmp	DWORD PTR tv5003[ebp], 0
	mov	edi, DWORD PTR tv5006[ebp]
	mov	eax, DWORD PTR [edi+ecx]
	je	SHORT $LN484@versplit
	mov	eax, DWORD PTR [eax+40]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN483@versplit
$LN484@versplit:
	mov	eax, DWORD PTR [eax+36]
$LN483@versplit:

; 863  :     if ( !equal_id(fe_a_next,fe_aa) )

	cmp	edx, DWORD PTR _fe_aa$[ebp]
	je	$LN606@versplit

; 864  :     {
; 865  :       set_next_facet(fe_a,fe_aa);

	test	DWORD PTR _fe_a$GSCopy$[ebp], 268435456	; 10000000H
	je	SHORT $LN628@versplit
	mov	ecx, DWORD PTR _fe_aa$[ebp]
	test	ebx, ebx
	je	SHORT $LN488@versplit
	xor	ecx, 134217728				; 08000000H
	mov	DWORD PTR [esi+36], ecx
	jmp	SHORT $LN668@versplit
$LN488@versplit:
	mov	DWORD PTR [esi+40], ecx
$LN668@versplit:
	mov	ecx, DWORD PTR _web+460
$LN628@versplit:

; 866  :       set_prev_facet(fe_aa,fe_a);

	test	DWORD PTR _fe_aa$[ebp], 268435456	; 10000000H
	je	SHORT $LN615@versplit
	cmp	DWORD PTR tv5003[ebp], 0
	mov	esi, DWORD PTR _fe_a$GSCopy$[ebp]
	mov	ecx, DWORD PTR [edi+ecx]
	je	SHORT $LN493@versplit
	xor	esi, 134217728				; 08000000H
	mov	DWORD PTR [ecx+40], esi
	jmp	SHORT $LN492@versplit
$LN493@versplit:
	mov	DWORD PTR [ecx+36], esi
$LN492@versplit:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
	mov	ecx, DWORD PTR _web+460
$LN615@versplit:

; 867  :       set_next_facet(fe_aa_prev,fe_a_next);

	test	eax, 268435456				; 10000000H
	je	SHORT $LN616@versplit
	test	eax, 134217728				; 08000000H
	je	SHORT $LN498@versplit
	mov	esi, edx
	xor	esi, 134217728				; 08000000H
	mov	edi, eax
	and	edi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	DWORD PTR [ecx+36], esi
	jmp	SHORT $LN669@versplit
$LN498@versplit:
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+esi*4]
	mov	DWORD PTR [ecx+40], edx
$LN669@versplit:
	mov	ecx, DWORD PTR _web+460
$LN616@versplit:

; 868  :       set_prev_facet(fe_a_next,fe_aa_prev);

	test	edx, 268435456				; 10000000H
	je	SHORT $LN649@versplit
	test	edx, 134217728				; 08000000H
	je	SHORT $LN503@versplit
	mov	esi, eax
	xor	esi, 134217728				; 08000000H
	mov	edi, edx
	and	edi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	DWORD PTR [ecx+40], esi
	jmp	SHORT $LN502@versplit
$LN503@versplit:
	mov	esi, edx
	and	esi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+esi*4]
	mov	DWORD PTR [ecx+36], eax
$LN502@versplit:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
	mov	ecx, DWORD PTR _web+460
$LN649@versplit:

; 869  :       set_fe_edge(fe_a_next,new_a);

	mov	esi, DWORD PTR _new_a$[ebp]
	mov	edi, esi
	test	edx, 134217728				; 08000000H
	je	SHORT $LN507@versplit
	xor	edi, 134217728				; 08000000H
$LN507@versplit:
	mov	ebx, edx
	and	ebx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+ebx*4]
	mov	DWORD PTR [ecx+20], edi
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx

; 870  :       set_fe_edge(fe_aa_prev,new_a);

	mov	ecx, esi
	test	eax, 134217728				; 08000000H
	je	SHORT $LN510@versplit
	xor	ecx, 134217728				; 08000000H
$LN510@versplit:
	mov	edi, DWORD PTR _web+460
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	DWORD PTR [eax+20], ecx
	mov	eax, DWORD PTR _global_timestamp
	inc	eax

; 871  :       set_edge_fe(old_a,fe_a);

	test	DWORD PTR tv4905[ebp], 134217728	; 08000000H
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _fe_a$GSCopy$[ebp]
	je	SHORT $LN513@versplit
	xor	eax, 134217728				; 08000000H
$LN513@versplit:
	mov	ecx, DWORD PTR _web+124
	mov	edi, DWORD PTR tv5022[ebp]
	mov	ecx, DWORD PTR [edi+ecx]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax

; 872  :       set_edge_fe(new_a,fe_a_next);

	test	esi, 134217728				; 08000000H
	je	SHORT $LN516@versplit
	xor	edx, 134217728				; 08000000H
$LN516@versplit:
	mov	eax, DWORD PTR _web+124
	and	esi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [ecx+28], edx
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN606@versplit:

; 873  :     }
; 874  :     set_edge_headv(old_a,new_v);

	mov	edx, DWORD PTR _new_v$[ebp]
	mov	eax, DWORD PTR tv4905[ebp]
	push	edx
	push	eax
	call	_set_edge_headv
	add	esp, 8

; 875  : 
; 876  :   
; 877  :     if ( valid_id(fe_b) )

	cmp	DWORD PTR tv5113[ebp], 0
	je	$LN557@versplit

; 878  :     { facetedge_id fe_b_next = get_next_facet(fe_b);

	mov	ebx, DWORD PTR _fe_b$GSCopy$[ebp]
	mov	eax, ebx
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR tv5126[ebp], eax
	mov	eax, DWORD PTR _web+460
	je	SHORT $LN520@versplit
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	edi, DWORD PTR [edx+36]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN519@versplit
$LN520@versplit:
	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	edi, DWORD PTR [edx+40]
$LN519@versplit:

; 879  :       facetedge_id fe_bb_prev = get_prev_facet(fe_bb);

	mov	ecx, DWORD PTR _fe_bb$[ebp]
	mov	esi, ecx
	shr	esi, 27					; 0000001bH
	and	esi, 1
	mov	DWORD PTR tv5233[ebp], esi
	je	SHORT $LN524@versplit
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	eax, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR [eax+40]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN523@versplit
$LN524@versplit:
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	eax, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR [eax+36]
$LN523@versplit:

; 880  :       set_next_facet(fe_b,fe_bb);

	cmp	DWORD PTR tv5126[ebp], 0
	mov	esi, DWORD PTR _fe_bb$[ebp]
	je	SHORT $LN528@versplit
	xor	esi, 134217728				; 08000000H
	mov	DWORD PTR [edx+36], esi
	jmp	SHORT $LN527@versplit
$LN528@versplit:
	mov	DWORD PTR [edx+40], esi
$LN527@versplit:

; 881  :       set_prev_facet(fe_bb,fe_b);

	test	DWORD PTR _fe_bb$[ebp], 268435456	; 10000000H
	je	SHORT $LN626@versplit
	cmp	DWORD PTR tv5233[ebp], 0
	je	SHORT $LN533@versplit
	mov	esi, DWORD PTR _web+460
	mov	ecx, DWORD PTR [ecx+esi]
	mov	edx, ebx
	xor	edx, 134217728				; 08000000H
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN532@versplit
$LN533@versplit:
	mov	edx, DWORD PTR _web+460
	mov	ecx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [ecx+36], ebx
$LN532@versplit:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN626@versplit:

; 882  :       set_next_facet(fe_bb_prev,fe_b_next);

	test	eax, 268435456				; 10000000H
	je	SHORT $LN627@versplit
	test	eax, 134217728				; 08000000H
	je	SHORT $LN538@versplit
	mov	esi, DWORD PTR _web+460
	mov	edx, edi
	xor	edx, 134217728				; 08000000H
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [ecx+36], edx
	jmp	SHORT $LN627@versplit
$LN538@versplit:
	mov	ecx, DWORD PTR _web+460
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+40], edi
$LN627@versplit:

; 883  :       set_prev_facet(fe_b_next,fe_bb_prev);

	test	edi, 268435456				; 10000000H
	je	SHORT $LN545@versplit
	test	edi, 134217728				; 08000000H
	je	SHORT $LN543@versplit
	mov	esi, DWORD PTR _web+460
	mov	ecx, eax
	xor	ecx, 134217728				; 08000000H
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [edx+40], ecx
	jmp	SHORT $LN542@versplit
$LN543@versplit:
	mov	edx, DWORD PTR _web+460
	mov	ecx, edi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+36], eax
$LN542@versplit:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN545@versplit:

; 884  :       set_fe_edge(fe_b_next,new_b);

	mov	ebx, DWORD PTR _new_b$[ebp]
	mov	ecx, ebx
	test	edi, 134217728				; 08000000H
	je	SHORT $LN547@versplit
	xor	ecx, 134217728				; 08000000H
$LN547@versplit:
	mov	esi, DWORD PTR _web+460
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [edx+20], ecx
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx

; 885  :       set_fe_edge(fe_bb_prev,new_b);

	mov	ecx, ebx
	test	eax, 134217728				; 08000000H
	je	SHORT $LN550@versplit
	xor	ecx, 134217728				; 08000000H
$LN550@versplit:
	mov	edx, DWORD PTR _web+460

; 886  :       set_edge_tailv(old_b,new_v);

	mov	esi, DWORD PTR _old_b$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [eax+20], ecx
	mov	eax, DWORD PTR _global_timestamp
	mov	ecx, DWORD PTR _new_v$[ebp]
	inc	eax
	push	ecx
	push	esi
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	call	_set_edge_tailv

; 887  :       set_edge_fe(old_b,fe_b);

	mov	eax, DWORD PTR _fe_b$GSCopy$[ebp]
	add	esp, 8
	test	esi, 134217728				; 08000000H
	je	SHORT $LN607@versplit
	xor	eax, 134217728				; 08000000H
$LN607@versplit:
	mov	edx, DWORD PTR _web+124
	and	esi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+esi*4]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax

; 888  :       set_edge_fe(new_b,fe_b_next);

	test	ebx, 134217728				; 08000000H
	je	SHORT $LN556@versplit
	xor	edi, 134217728				; 08000000H
$LN556@versplit:
	mov	edx, DWORD PTR _web+124
	and	ebx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ebx*4]
	mov	DWORD PTR [eax+28], edi
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN557@versplit:

; 889  :     }
; 890  :   }
; 891  : } // end versplit()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_versplit ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@CNLGNLJN@Popping?5valence?52?5edge?5?$CFs?5on?5a?5c@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__$ArrayPad$
PUBLIC	_two_split
EXTRN	_outstring:PROC
EXTRN	_msg:DWORD
EXTRN	_sprintf:PROC
EXTRN	_elnames:BYTE
EXTRN	_verbose_flag:DWORD
EXTRN	_dot:PROC
EXTRN	_get_facet_normal:PROC
;	COMDAT ??_C@_0CM@CNLGNLJN@Popping?5valence?52?5edge?5?$CFs?5on?5a?5c@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0CM@CNLGNLJN@Popping?5valence?52?5edge?5?$CFs?5on?5a?5c@ DB 'Poppin'
	DB	'g valence 2 edge %s on a constraint.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\popfilm.c
CONST	ENDS
;	COMDAT _two_split
_TEXT	SEGMENT
_fe_c$89722 = -184					; size = 4
$T93460 = -180						; size = 4
_new_tail$89732 = -180					; size = 4
_tailsplitflag$ = -176					; size = 4
_headsplitflag$ = -172					; size = 4
tv1932 = -168						; size = 4
tv1722 = -168						; size = 4
_i$ = -164						; size = 4
tv1925 = -160						; size = 4
tv1955 = -156						; size = 4
_old_head$89738 = -156					; size = 4
_old_tail$89731 = -156					; size = 4
_splitcount$ = -152					; size = 4
_headsplitcount$ = -152					; size = 4
tv1941 = -148						; size = 4
_new_head$89739 = -148					; size = 4
_tailsplitcount$ = -148					; size = 4
tv1943 = -144						; size = 4
_stopflag$ = -144					; size = 4
_normal$89713 = -140					; size = 48
_normala$89714 = -92					; size = 48
_tailsplitlist$ = -84					; size = 40
_headsplitlist$ = -44					; size = 40
__$ArrayPad$ = -4					; size = 4
_key_fe$ = 8						; size = 4
_this_septum_flag$ = 12					; size = 4
_two_split PROC						; COMDAT

; 910  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 184				; 000000b8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx

; 911  :   facetedge_id headsplitlist[10];
; 912  :   int headsplitcount = 0;
; 913  :   int headsplitflag = 0; /* whether to split end vertex */
; 914  :   facetedge_id tailsplitlist[10];
; 915  :   int tailsplitcount = 0;
; 916  :   int tailsplitflag = 0; /* 7hether to split end vertex */
; 917  :   facetedge_id fe_a,fe_aa,fe_aaa;
; 918  :   int stopflag;
; 919  :   int popped = 0;
; 920  :   int splitcount;
; 921  :   int i;
; 922  : 
; 923  :   /* See how far potential split can be traced in each direction,
; 924  :      checking that Y split is not more suitable all the way.
; 925  :    */
; 926  : 
; 927  :   /* Try forward */
; 928  :   fe_a = key_fe;

	mov	ebx, DWORD PTR _key_fe$[ebp]
	xor	eax, eax
	push	esi
	push	edi

; 929  :   headsplitflag = 1;
; 930  :   for (stopflag=0;!stopflag;)

	mov	edi, DWORD PTR _web+460
	mov	DWORD PTR _headsplitcount$[ebp], eax
	mov	DWORD PTR _tailsplitcount$[ebp], eax
	mov	DWORD PTR _headsplitflag$[ebp], 1
	mov	DWORD PTR _stopflag$[ebp], eax
	npad	3
$LL55@two_split:

; 931  :   { int head_degfree;
; 932  :     int aa_degfree;
; 933  : 
; 934  :     headsplitlist[headsplitcount++] = fe_a;

	mov	eax, DWORD PTR _headsplitcount$[ebp]

; 935  : 
; 936  :     /* test head vertex */
; 937  :     head_degfree = vertex_degfree(get_fe_headv(fe_a));

	mov	edx, DWORD PTR _web+124
	mov	DWORD PTR _headsplitlist$[ebp+eax*4], ebx
	inc	eax
	mov	DWORD PTR _headsplitcount$[ebp], eax
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+eax*4]
	mov	eax, ebx
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _web+216
	test	eax, 134217728				; 08000000H
	je	SHORT $LN63@two_split
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edx+304]
	mov	eax, DWORD PTR [eax+ecx]
	jmp	SHORT $LN62@two_split
$LN63@two_split:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	add	eax, DWORD PTR [ecx+edx+304]
	mov	ecx, DWORD PTR _web+636
	mov	eax, DWORD PTR [eax+ecx*4]
$LN62@two_split:
	push	eax
	call	_vertex_degfree
	add	esp, 4

; 938  :     if ( head_degfree == 0 )

	test	eax, eax
	je	$LN229@two_split

; 941  :       break;
; 942  :     }
; 943  :   
; 944  :     /* find next wall edge forward */
; 945  :     fe_aaa = inverse_id(fe_a);

	mov	esi, ebx
	xor	esi, 134217728				; 08000000H
	npad	7
$LL52@two_split:

; 946  :     do 
; 947  :     { 
; 948  :       fe_aa = inverse_id(get_next_edge(fe_aaa));

	test	esi, 134217728				; 08000000H
	je	SHORT $LN67@two_split
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+esi*4]
	mov	ebx, DWORD PTR [edx+28]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN66@two_split
$LN67@two_split:
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+esi*4]
	mov	ebx, DWORD PTR [eax+32]
$LN66@two_split:
	xor	ebx, 134217728				; 08000000H

; 949  :       fe_aaa = get_next_facet(fe_aa);

	test	ebx, 134217728				; 08000000H
	je	SHORT $LN71@two_split
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	esi, DWORD PTR [ecx+36]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN70@two_split
$LN71@two_split:
	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+edx*4]
	mov	esi, DWORD PTR [ecx+40]
$LN70@two_split:

; 950  :       if ( !equal_id(fe_aa,get_next_facet(fe_aaa))  )

	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+eax*4]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN75@two_split
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN74@two_split
$LN75@two_split:
	mov	eax, DWORD PTR [edx+40]
$LN74@two_split:
	cmp	ebx, eax
	jne	SHORT $LN226@two_split

; 963  :       }
; 964  :       /* now have valence 2 */
; 965  :       aa_degfree = edge_degfree(get_fe_edge(fe_aa));

	mov	eax, ebx
	and	eax, 134217728				; 08000000H
	cmp	ebx, esi
	je	SHORT $LN227@two_split
	xor	eax, DWORD PTR [ecx+20]
	push	eax
	call	_edge_degfree
	add	esp, 4

; 966  :       if ( aa_degfree == 2 )

	cmp	eax, 2
	je	SHORT $LN228@two_split

; 971  :         break;
; 972  :       }
; 973  :       else if ( aa_degfree != 3 )

	cmp	eax, 3
	je	$LL52@two_split

; 974  :       { /* end of the line  */
; 975  :         stopflag = 1;
; 976  :       }
; 977  :       
; 978  :     } while ( aa_degfree == 3 );

	jmp	$LN43@two_split
$LN226@two_split:

; 951  :       { /* run into valence more than 2, can't split head */
; 952  :         stopflag = 1;
; 953  :         headsplitflag = 0;

	mov	DWORD PTR _headsplitflag$[ebp], 0

; 954  :         break;

	jmp	$LN43@two_split
$LN227@two_split:

; 955  :       }
; 956  :       if ( equal_id(fe_aa,fe_aaa) )
; 957  :       { /* valence 1, could still split head */
; 958  :         aa_degfree = edge_degfree(get_fe_edge(fe_aa));

	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+ecx*4]
	xor	eax, DWORD PTR [edx+20]
	push	eax
	call	_edge_degfree

; 959  :         if ( aa_degfree < 2 ) headsplitflag = 0;

	xor	ecx, ecx
	add	esp, 4
	cmp	eax, 2
	setge	cl
	mov	DWORD PTR _headsplitflag$[ebp], ecx

; 960  :         else headsplitflag = 1;
; 961  :         stopflag = 1;
; 962  :         break;

	jmp	$LN43@two_split
$LN228@two_split:

; 967  :       { /* back to wall */
; 968  :         if ( (facet_degfree(get_fe_facet(fe_aa)) != 3)
; 969  :              || (facet_degfree(get_fe_facet(get_next_facet(fe_aa))) != 3) )

	test	ebx, 268435456				; 10000000H
	jne	SHORT $LN83@two_split
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN82@two_split
$LN83@two_split:
	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+edx*4]
	mov	eax, DWORD PTR [eax+24]
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN82@two_split
	xor	eax, 134217728				; 08000000H
$LN82@two_split:
	push	eax
	call	_facet_degfree
	add	esp, 4
	cmp	eax, 3
	jne	SHORT $LN43@two_split
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN87@two_split
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+ecx*4]
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN86@two_split
$LN87@two_split:
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [ecx+40]
$LN86@two_split:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN91@two_split
	mov	ecx, DWORD PTR _NULLFACET
	jmp	SHORT $LN90@two_split
$LN91@two_split:
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+edx*4]
	mov	ecx, DWORD PTR [ecx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN90@two_split
	xor	ecx, 134217728				; 08000000H
$LN90@two_split:
	push	ecx
	call	_facet_degfree
	add	esp, 4
	cmp	eax, 3
	je	SHORT $LN50@two_split
$LN43@two_split:

; 970  :            stopflag = 1;

	mov	DWORD PTR _stopflag$[ebp], 1
$LN50@two_split:

; 929  :   headsplitflag = 1;
; 930  :   for (stopflag=0;!stopflag;)

	cmp	DWORD PTR _stopflag$[ebp], 0
	je	$LL55@two_split

; 1120 :         if ( equal_id(fe_b,fe_c) ) break;

	jmp	SHORT $LN54@two_split
$LN229@two_split:

; 939  :     { /* can't split */
; 940  :       headsplitflag = 0;

	mov	DWORD PTR _headsplitflag$[ebp], 0
$LN54@two_split:

; 979  :   
; 980  :     fe_a = fe_aa;
; 981  :   } /* end of going forward */
; 982  : 
; 983  :   /* go backward */
; 984  :   fe_a = inverse_id(key_fe);
; 985  :   tailsplitflag = 1;
; 986  :   for (stopflag=0;!stopflag;)

	mov	edx, DWORD PTR _web+216
	mov	eax, DWORD PTR _dymem
	mov	ebx, DWORD PTR _key_fe$[ebp]
	mov	ecx, DWORD PTR [edx+eax+304]
	xor	ebx, 134217728				; 08000000H
	mov	DWORD PTR _tailsplitflag$[ebp], 1
	mov	DWORD PTR _stopflag$[ebp], 0
	mov	DWORD PTR tv1722[ebp], ecx
$LL40@two_split:

; 987  :   { int tail_degfree;
; 988  :     int aa_degfree;
; 989  : 
; 990  :     tailsplitlist[tailsplitcount++] = fe_a;

	mov	eax, DWORD PTR _tailsplitcount$[ebp]
	mov	DWORD PTR _tailsplitlist$[ebp+eax*4], ebx
	inc	eax
	mov	DWORD PTR _tailsplitcount$[ebp], eax

; 991  : 
; 992  :     /* test tail vertex */
; 993  :     tail_degfree = vertex_degfree(get_fe_headv(fe_a));

	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+edx*4]
	mov	edx, DWORD PTR _web+124
	mov	eax, ebx
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN97@two_split
	mov	ecx, DWORD PTR tv1722[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [ecx+eax]
	jmp	SHORT $LN96@two_split
$LN97@two_split:
	mov	ecx, DWORD PTR _web+636
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR tv1722[ebp]
	mov	eax, DWORD PTR [edx+eax]
$LN96@two_split:
	push	eax
	call	_vertex_degfree
	add	esp, 4

; 994  :     if ( tail_degfree == 0 )

	test	eax, eax
	je	$LN233@two_split

; 997  :       break;
; 998  :     }
; 999  :   
; 1000 :     /* find next wall edge forward */
; 1001 :     fe_aaa = inverse_id(fe_a);

	mov	esi, ebx
	xor	esi, 134217728				; 08000000H
	npad	5
$LL37@two_split:

; 1002 :     do 
; 1003 :     { fe_aa = inverse_id(get_next_edge(fe_aaa));

	test	esi, 134217728				; 08000000H
	je	SHORT $LN101@two_split
	and	esi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+esi*4]
	mov	ebx, DWORD PTR [ecx+28]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN100@two_split
$LN101@two_split:
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+esi*4]
	mov	ebx, DWORD PTR [edx+32]
$LN100@two_split:
	xor	ebx, 134217728				; 08000000H

; 1004 :       fe_aaa = get_next_facet(fe_aa);

	test	ebx, 134217728				; 08000000H
	je	SHORT $LN105@two_split
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+eax*4]
	mov	esi, DWORD PTR [ecx+36]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN104@two_split
$LN105@two_split:
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	esi, DWORD PTR [ecx+40]
$LN104@two_split:

; 1005 :       if ( !equal_id(fe_aa,get_next_facet(fe_aaa))  )

	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+edx*4]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN109@two_split
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN108@two_split
$LN109@two_split:
	mov	eax, DWORD PTR [eax+40]
$LN108@two_split:
	cmp	ebx, eax
	jne	SHORT $LN230@two_split

; 1018 :       }
; 1019 :       /* now have valence 2 */
; 1020 :       aa_degfree = edge_degfree(get_fe_edge(fe_aa));

	mov	edx, ebx
	and	edx, 134217728				; 08000000H
	cmp	ebx, esi
	je	SHORT $LN231@two_split
	xor	edx, DWORD PTR [ecx+20]
	push	edx
	call	_edge_degfree
	add	esp, 4

; 1021 :       if ( aa_degfree == 2 )

	cmp	eax, 2
	je	SHORT $LN232@two_split

; 1026 :         break;
; 1027 :       }
; 1028 :       else if ( aa_degfree != 3 )

	cmp	eax, 3
	je	$LL37@two_split

; 1029 :       { /* end of the line  */
; 1030 :         stopflag = 1;
; 1031 :       }
; 1032 :       
; 1033 :     } while ( aa_degfree == 3 );

	jmp	$LN28@two_split
$LN230@two_split:

; 1006 :       { /* run into valence more than 2, can't split tail */
; 1007 :         stopflag = 1;
; 1008 :         tailsplitflag = 0;

	mov	DWORD PTR _tailsplitflag$[ebp], 0

; 1009 :         break;

	jmp	$LN28@two_split
$LN231@two_split:

; 1010 :       }
; 1011 :       if ( equal_id(fe_aa,fe_aaa) )
; 1012 :       { /* valence 1, could still split tail */
; 1013 :         aa_degfree = edge_degfree(get_fe_edge(fe_aa));

	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+eax*4]
	xor	edx, DWORD PTR [ecx+20]
	push	edx
	call	_edge_degfree

; 1014 :         if ( aa_degfree < 2 ) tailsplitflag = 0;

	xor	ecx, ecx
	add	esp, 4
	cmp	eax, 2
	setge	cl
	mov	DWORD PTR _tailsplitflag$[ebp], ecx

; 1015 :         else tailsplitflag = 1;
; 1016 :         stopflag = 1;
; 1017 :         break;

	jmp	$LN28@two_split
$LN232@two_split:

; 1022 :       { /* back to wall */
; 1023 :         if ( (facet_degfree(get_fe_facet(fe_aa)) != 3)
; 1024 :              || (facet_degfree(get_fe_facet(get_next_facet(fe_aa))) != 3) )

	test	ebx, 268435456				; 10000000H
	jne	SHORT $LN117@two_split
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN116@two_split
$LN117@two_split:
	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+edx*4]
	mov	eax, DWORD PTR [eax+24]
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN116@two_split
	xor	eax, 134217728				; 08000000H
$LN116@two_split:
	push	eax
	call	_facet_degfree
	add	esp, 4
	cmp	eax, 3
	jne	SHORT $LN28@two_split
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN121@two_split
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+ecx*4]
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN120@two_split
$LN121@two_split:
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [ecx+40]
$LN120@two_split:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN125@two_split
	mov	ecx, DWORD PTR _NULLFACET
	jmp	SHORT $LN124@two_split
$LN125@two_split:
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+edx*4]
	mov	ecx, DWORD PTR [ecx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN124@two_split
	xor	ecx, 134217728				; 08000000H
$LN124@two_split:
	push	ecx
	call	_facet_degfree
	add	esp, 4
	cmp	eax, 3
	je	SHORT $LN35@two_split
$LN28@two_split:

; 1025 :            stopflag = 1;

	mov	DWORD PTR _stopflag$[ebp], 1
$LN35@two_split:

; 979  :   
; 980  :     fe_a = fe_aa;
; 981  :   } /* end of going forward */
; 982  : 
; 983  :   /* go backward */
; 984  :   fe_a = inverse_id(key_fe);
; 985  :   tailsplitflag = 1;
; 986  :   for (stopflag=0;!stopflag;)

	cmp	DWORD PTR _stopflag$[ebp], 0
	je	$LL40@two_split

; 1120 :         if ( equal_id(fe_b,fe_c) ) break;

	jmp	SHORT $LN39@two_split
$LN233@two_split:

; 995  :     { /* can't split */
; 996  :       tailsplitflag = 0;

	mov	DWORD PTR _tailsplitflag$[ebp], 0
$LN39@two_split:

; 1034 :   
; 1035 :     fe_a = fe_aa;
; 1036 :   } /* end of going backward */
; 1037 : 
; 1038 :   /* split things */
; 1039 : 
; 1040 :   splitcount = headsplitcount + tailsplitcount - 1;

	mov	eax, DWORD PTR _headsplitcount$[ebp]
	mov	edx, DWORD PTR _tailsplitcount$[ebp]
	lea	esi, DWORD PTR [edx+eax-1]
	mov	DWORD PTR _splitcount$[ebp], esi

; 1041 :   if ( (splitcount == 1) && !headsplitflag && !tailsplitflag )

	cmp	esi, 1
	jne	SHORT $LN250@two_split
	cmp	DWORD PTR _headsplitflag$[ebp], 0
	jne	SHORT $LN250@two_split
	cmp	DWORD PTR _tailsplitflag$[ebp], 0
	jne	SHORT $LN250@two_split
$LN259@two_split:
	pop	edi
	pop	esi

; 1042 :     return 0;

	xor	eax, eax
	pop	ebx

; 1124 : 
; 1125 :       }
; 1126 :     }
; 1127 :   }
; 1128 : 
; 1129 :   popped = splitcount;
; 1130 : 
; 1131 :   return popped;
; 1132 : } // end two_split()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN250@two_split:

; 1043 : 
; 1044 :   /* now get into one list for splitting */
; 1045 :   for ( i = headsplitcount-1 ; i >= 0 ; i-- )

	dec	eax
	js	SHORT $LN22@two_split
	lea	ecx, DWORD PTR [eax+edx]
	lea	ecx, DWORD PTR _headsplitlist$[ebp+ecx*4-4]
$LL24@two_split:

; 1046 :    headsplitlist[i+tailsplitcount-1] = headsplitlist[i];

	mov	ebx, DWORD PTR _headsplitlist$[ebp+eax*4]
	mov	DWORD PTR [ecx], ebx
	sub	ecx, 4
	dec	eax
	jns	SHORT $LL24@two_split
$LN22@two_split:

; 1047 :   for ( i = 1 ; i < tailsplitcount ; i++ )

	mov	eax, 1
	cmp	edx, eax
	jle	SHORT $LN19@two_split
	lea	ecx, DWORD PTR _headsplitlist$[ebp+edx*4-4]
$LL21@two_split:

; 1048 :    headsplitlist[tailsplitcount-i] = inverse_id(tailsplitlist[i]);

	mov	ebx, DWORD PTR _tailsplitlist$[ebp+eax*4]
	xor	ebx, 134217728				; 08000000H
	mov	DWORD PTR [ecx], ebx
	inc	eax
	sub	ecx, 4
	cmp	eax, edx
	jl	SHORT $LL21@two_split
$LN19@two_split:

; 1049 : 
; 1050 :   /* Test to see if all edges have their facets less than 90 degrees
; 1051 :      apart, in which case we don't split, but let Y pull-out happen. 
; 1052 :    */
; 1053 :   for ( i = 0 ; i < splitcount ; i++ )

	xor	ebx, ebx
	test	esi, esi
	jle	$LN234@two_split
	jmp	SHORT $LN18@two_split
$LL246@two_split:
	mov	edi, DWORD PTR _web+460
$LN18@two_split:

; 1054 :   { facetedge_id fe = headsplitlist[i];

	mov	eax, DWORD PTR _headsplitlist$[ebp+ebx*4]

; 1055 :     facetedge_id fe_a = get_next_facet(fe);

	mov	ecx, eax
	mov	edx, eax
	shr	ecx, 27					; 0000001bH
	and	edx, 134217727				; 07ffffffH
	and	ecx, 1
	mov	edi, DWORD PTR [edi+edx*4]
	je	SHORT $LN129@two_split
	mov	esi, DWORD PTR [edi+36]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN128@two_split
$LN129@two_split:
	mov	esi, DWORD PTR [edi+40]
$LN128@two_split:

; 1056 :     REAL normal[MAXCOORD];
; 1057 :     REAL normala[MAXCOORD];
; 1058 :     get_facet_normal(get_fe_facet(fe),normal);

	test	eax, 268435456				; 10000000H
	jne	SHORT $LN133@two_split
	mov	edi, DWORD PTR _NULLFACET
	jmp	SHORT $LN132@two_split
$LN133@two_split:
	mov	edi, DWORD PTR [edi+24]
	test	ecx, ecx
	je	SHORT $LN132@two_split
	xor	edi, 134217728				; 08000000H
$LN132@two_split:
	lea	eax, DWORD PTR _normal$89713[ebp]
	push	eax
	push	edi
	call	_get_facet_normal
	add	esp, 8

; 1059 :     get_facet_normal(get_fe_facet(fe_a),normala);

	test	esi, 268435456				; 10000000H
	jne	SHORT $LN137@two_split
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN136@two_split
$LN137@two_split:
	mov	edx, DWORD PTR _web+460
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR [eax+24]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN136@two_split
	xor	eax, 134217728				; 08000000H
$LN136@two_split:
	lea	ecx, DWORD PTR _normala$89714[ebp]
	push	ecx
	push	eax
	call	_get_facet_normal

; 1060 :     if ( SDIM_dot(normal,normala) < 0 )

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _normala$89714[ebp]
	push	eax
	lea	ecx, DWORD PTR _normal$89713[ebp]
	push	ecx
	call	_dot
	fcomp	QWORD PTR __real@0000000000000000
	add	esp, 20					; 00000014H
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN247@two_split

; 1049 : 
; 1050 :   /* Test to see if all edges have their facets less than 90 degrees
; 1051 :      apart, in which case we don't split, but let Y pull-out happen. 
; 1052 :    */
; 1053 :   for ( i = 0 ; i < splitcount ; i++ )

	inc	ebx
	cmp	ebx, DWORD PTR _splitcount$[ebp]
	jl	$LL246@two_split
$LN247@two_split:
	mov	edi, DWORD PTR _web+460
$LN234@two_split:

; 1061 :       break;  /* too wide */
; 1062 :   }
; 1063 :   if ( i == splitcount ) return 0;

	mov	eax, DWORD PTR _splitcount$[ebp]
	cmp	ebx, eax
	je	$LN259@two_split

; 1064 :   
; 1065 : 
; 1066 :   /* split new edge off with facetedges in list */
; 1067 :   for ( i = 0 ; i < splitcount ; i++ )

	mov	DWORD PTR _i$[ebp], 0
	test	eax, eax
	jle	$LN11@two_split
	jmp	SHORT $LN13@two_split
	npad	1
$LL248@two_split:
	mov	edi, DWORD PTR _web+460
$LN13@two_split:

; 1068 :   { facetedge_id fe,fe_b,fe_c;
; 1069 :     edge_id new_e,old_e;
; 1070 :  
; 1071 :     fe = headsplitlist[i];

	mov	edx, DWORD PTR _i$[ebp]
	mov	ebx, DWORD PTR _headsplitlist$[ebp+edx*4]

; 1072 :     old_e = get_fe_edge(fe);

	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv1925[ebp], eax
	mov	eax, DWORD PTR [eax+edi]
	mov	esi, DWORD PTR [eax+20]
	mov	ecx, ebx
	and	ecx, 134217728				; 08000000H
	xor	esi, ecx

; 1073 :     new_e = dup_edge(old_e);

	push	esi
	mov	DWORD PTR tv1932[ebp], ecx
	call	_dup_edge
	add	esp, 4

; 1074 :     if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	mov	edi, eax
	je	SHORT $LN249@two_split

; 1075 :     { sprintf(msg,"Popping valence 2 edge %s on a constraint.\n",ELNAME(old_e));

	test	esi, 268435456				; 10000000H
	je	SHORT $LN58@two_split
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	inc	ecx
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN59@two_split
$LN58@two_split:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN59@two_split:
	mov	edx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0CM@CNLGNLJN@Popping?5valence?52?5edge?5?$CFs?5on?5a?5c@
	push	edx
	call	_sprintf

; 1076 :       outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 16					; 00000010H
$LN249@two_split:

; 1077 :     }
; 1078 :     insert_vertex_edge(get_edge_tailv(old_e),new_e);

	mov	ecx, DWORD PTR _web+124
	mov	eax, esi
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR tv1941[ebp], eax
	mov	eax, DWORD PTR _web+216
	je	SHORT $LN143@two_split
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	edx, DWORD PTR [esi+ecx]
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN256@two_split
$LN143@two_split:
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	edx, DWORD PTR [esi+ecx]
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]
$LN256@two_split:
	push	edi
	push	eax
	mov	DWORD PTR tv1943[ebp], esi
	call	_insert_vertex_edge
	add	esp, 8

; 1079 :     insert_vertex_edge(get_edge_headv(old_e),inverse_id(new_e));

	cmp	DWORD PTR tv1941[ebp], 0
	je	SHORT $LN147@two_split
	mov	ecx, DWORD PTR _web+124
	mov	edx, esi
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _web+216
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edx+304]
	mov	eax, DWORD PTR [eax+ecx]
	jmp	SHORT $LN146@two_split
$LN147@two_split:
	mov	edx, DWORD PTR _web+124
	mov	eax, DWORD PTR tv1943[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	edx, DWORD PTR _web+216
	mov	eax, DWORD PTR _dymem
	add	ecx, DWORD PTR [edx+eax+304]
	mov	edx, DWORD PTR _web+636
	mov	eax, DWORD PTR [ecx+edx*4]
$LN146@two_split:
	mov	esi, edi
	xor	esi, 134217728				; 08000000H
	push	esi
	push	eax
	call	_insert_vertex_edge

; 1080 :     fe_a = get_next_facet(fe);

	mov	eax, ebx
	shr	eax, 27					; 0000001bH
	add	esp, 8
	and	eax, 1
	mov	DWORD PTR tv1955[ebp], eax
	je	SHORT $LN151@two_split
	mov	eax, DWORD PTR _web+460
	mov	ecx, DWORD PTR tv1925[ebp]
	mov	ecx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR [ecx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN150@two_split
$LN151@two_split:
	mov	eax, DWORD PTR tv1925[ebp]
	mov	edx, DWORD PTR _web+460
	mov	ecx, DWORD PTR [eax+edx]
	mov	eax, DWORD PTR [ecx+40]
$LN150@two_split:

; 1081 :     set_fe_edge(fe,new_e);

	mov	edx, DWORD PTR tv1955[ebp]
	mov	DWORD PTR $T93460[ebp], edi
	test	edx, edx
	jne	SHORT $LN154@two_split
	mov	esi, edi
$LN154@two_split:
	mov	DWORD PTR [ecx+20], esi
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx

; 1082 :     set_edge_fe(new_e,fe);

	mov	ecx, ebx
	test	edi, 134217728				; 08000000H
	je	SHORT $LN157@two_split
	xor	ecx, 134217728				; 08000000H
$LN157@two_split:
	mov	esi, DWORD PTR _web+124
	and	edi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+edi*4]
	mov	DWORD PTR [esi+28], ecx
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx

; 1083 :     set_edge_fe(old_e,fe_a);

	cmp	DWORD PTR tv1941[ebp], 0
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
	mov	ecx, eax
	je	SHORT $LN160@two_split
	xor	ecx, 134217728				; 08000000H
$LN160@two_split:
	mov	esi, DWORD PTR _web+124
	mov	edi, DWORD PTR tv1943[ebp]
	mov	esi, DWORD PTR [edi+esi]
	mov	DWORD PTR [esi+28], ecx
	mov	ecx, DWORD PTR _global_timestamp

; 1084 :     set_next_facet(fe,fe);

	mov	esi, DWORD PTR tv1925[ebp]
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
	mov	ecx, ebx
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	je	SHORT $LN163@two_split
	mov	edi, DWORD PTR _web+460
	mov	edi, DWORD PTR [esi+edi]
	test	edx, edx
	je	SHORT $LN164@two_split
	mov	edx, ebx
	xor	edx, 134217728				; 08000000H
	mov	DWORD PTR [edi+36], edx
	mov	edx, DWORD PTR tv1955[ebp]
	jmp	SHORT $LN163@two_split
$LN164@two_split:
	mov	DWORD PTR [edi+40], ebx
$LN163@two_split:

; 1085 :     set_prev_facet(fe,fe);

	test	ecx, ecx
	je	SHORT $LN171@two_split
	mov	ecx, DWORD PTR _web+460
	test	edx, edx
	mov	edx, DWORD PTR [esi+ecx]
	je	SHORT $LN169@two_split
	xor	ebx, 134217728				; 08000000H
	mov	DWORD PTR [edx+40], ebx
	jmp	SHORT $LN168@two_split
$LN169@two_split:
	mov	DWORD PTR [edx+36], ebx
$LN168@two_split:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN171@two_split:

; 1086 :     set_next_facet(fe_a,fe_a);

	mov	edx, eax
	shr	edx, 28					; 0000001cH
	and	edx, 1
	je	SHORT $LN255@two_split
	mov	ecx, eax
	test	eax, 134217728				; 08000000H
	je	SHORT $LN174@two_split
	mov	edi, DWORD PTR _web+460
	xor	ecx, 134217728				; 08000000H
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edi+esi*4]
	mov	DWORD PTR [esi+36], ecx
	jmp	SHORT $LN255@two_split
$LN174@two_split:
	mov	esi, DWORD PTR _web+460
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [ecx+40], eax
$LN255@two_split:

; 1087 :     set_prev_facet(fe_a,fe_a);

	test	edx, edx
	je	SHORT $LN181@two_split
	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	test	eax, 134217728				; 08000000H
	je	SHORT $LN179@two_split
	xor	ecx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [eax+40], ecx
	jmp	SHORT $LN178@two_split
$LN179@two_split:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+36], eax
$LN178@two_split:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN181@two_split:

; 1088 : 
; 1089 : 
; 1090 :     if ( (i > 0) || tailsplitflag )

	cmp	DWORD PTR _i$[ebp], 0
	jg	SHORT $LN252@two_split
	cmp	DWORD PTR _tailsplitflag$[ebp], 0
	je	$LN235@two_split
$LN252@two_split:

; 1091 :     { vertex_id old_tail = get_edge_tailv(old_e);

	cmp	DWORD PTR tv1941[ebp], 0
	je	SHORT $LN184@two_split
	mov	edx, DWORD PTR _web+124
	mov	eax, DWORD PTR tv1943[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	edx, DWORD PTR _web+216
	mov	eax, DWORD PTR _dymem
	add	ecx, DWORD PTR [edx+eax+304]
	mov	edx, DWORD PTR _web+636
	mov	ebx, DWORD PTR [ecx+edx*4]
	jmp	SHORT $LN257@two_split
$LN184@two_split:
	mov	eax, DWORD PTR _web+124
	mov	ecx, DWORD PTR tv1943[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	ebx, DWORD PTR [edx+eax]
$LN257@two_split:

; 1092 :       vertex_id new_tail = dup_vertex(old_tail);

	push	ebx
	mov	DWORD PTR _old_tail$89731[ebp], ebx
	call	_dup_vertex

; 1093 :       fe_b = fe;

	mov	ecx, DWORD PTR _i$[ebp]

; 1094 :       fe_c = NULLID;
; 1095 :  
; 1096 :       /* reconnect edges */
; 1097 :       for (;;)
; 1098 :       {
; 1099 :         remove_vertex_edge(old_tail,get_fe_edge(fe_b));

	mov	edx, DWORD PTR _web+460
	mov	edi, DWORD PTR _headsplitlist$[ebp+ecx*4]
	mov	esi, eax
	mov	eax, DWORD PTR tv1925[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	edx, DWORD PTR [ecx+20]
	xor	edx, DWORD PTR tv1932[ebp]
	mov	DWORD PTR _new_tail$89732[ebp], esi
	push	edx
	push	ebx
	call	_remove_vertex_edge

; 1100 :         set_edge_tailv(get_fe_edge(fe_b),new_tail);

	mov	eax, DWORD PTR _web+460
	mov	ecx, DWORD PTR tv1925[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR [edx+20]
	xor	eax, DWORD PTR tv1932[ebp]
	push	esi
	push	eax
	call	_set_edge_tailv
	add	esp, 20					; 00000014H

; 1101 :         if ( equal_id(fe_b,fe_c) ) break;

	test	edi, edi
	je	$LN235@two_split
	npad	8
$LL7@two_split:

; 1102 : 
; 1103 :         fe_c = inverse_id(get_prev_edge(fe_b));

	mov	ecx, DWORD PTR _web+460
	test	edi, 134217728				; 08000000H
	je	SHORT $LN192@two_split
	and	edi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edi*4]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN191@two_split
$LN192@two_split:
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+edi*4]
	mov	eax, DWORD PTR [eax+28]
$LN191@two_split:
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR _fe_c$89722[ebp], eax

; 1104 :         fe_b = get_next_facet(fe_c);

	test	eax, 134217728				; 08000000H
	je	SHORT $LN196@two_split
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	edi, DWORD PTR [edx+36]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN195@two_split
$LN196@two_split:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	edi, DWORD PTR [eax+40]
$LN195@two_split:

; 1094 :       fe_c = NULLID;
; 1095 :  
; 1096 :       /* reconnect edges */
; 1097 :       for (;;)
; 1098 :       {
; 1099 :         remove_vertex_edge(old_tail,get_fe_edge(fe_b));

	mov	eax, DWORD PTR _old_tail$89731[ebp]
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	ecx, DWORD PTR [esi+ecx]
	mov	edx, DWORD PTR [ecx+20]
	mov	ebx, edi
	and	ebx, 134217728				; 08000000H
	xor	edx, ebx
	push	edx
	push	eax
	call	_remove_vertex_edge

; 1100 :         set_edge_tailv(get_fe_edge(fe_b),new_tail);

	mov	edx, DWORD PTR _web+460
	mov	ecx, DWORD PTR _new_tail$89732[ebp]
	mov	eax, DWORD PTR [esi+edx]
	push	ecx
	mov	ecx, DWORD PTR [eax+20]
	xor	ecx, ebx
	push	ecx
	call	_set_edge_tailv
	add	esp, 16					; 00000010H

; 1101 :         if ( equal_id(fe_b,fe_c) ) break;

	cmp	edi, DWORD PTR _fe_c$89722[ebp]
	jne	$LL7@two_split
$LN235@two_split:

; 1105 : 
; 1106 :       }
; 1107 :     }
; 1108 : 
; 1109 :     if ( (i == splitcount-1) && headsplitflag )

	mov	eax, DWORD PTR _splitcount$[ebp]
	dec	eax
	cmp	DWORD PTR _i$[ebp], eax
	jne	$LN12@two_split
	cmp	DWORD PTR _headsplitflag$[ebp], 0
	je	$LN12@two_split

; 1110 :     { vertex_id old_head = get_edge_headv(old_e);

	cmp	DWORD PTR tv1941[ebp], 0
	je	SHORT $LN200@two_split
	mov	edx, DWORD PTR _web+124
	mov	eax, DWORD PTR tv1943[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	edx, DWORD PTR _web+216
	mov	eax, DWORD PTR _dymem
	mov	edx, DWORD PTR [edx+eax+304]
	mov	edi, DWORD PTR [ecx+edx]
	jmp	SHORT $LN258@two_split
$LN200@two_split:
	mov	eax, DWORD PTR _web+124
	mov	ecx, DWORD PTR tv1943[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	edi, DWORD PTR [edx+eax*4]
$LN258@two_split:

; 1111 :       vertex_id new_head = dup_vertex(old_head);

	push	edi
	mov	DWORD PTR _old_head$89738[ebp], edi
	call	_dup_vertex

; 1112 :       fe_b = fe;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _headsplitlist$[ebp+ecx*4]

; 1113 :       fe_c = NULLID;
; 1114 :  
; 1115 :       /* reconnect edges */
; 1116 :       for (;;)
; 1117 :       {
; 1118 :         remove_vertex_edge(old_head,inverse_id(get_fe_edge(fe_b)));

	mov	edx, DWORD PTR _web+460
	mov	ebx, DWORD PTR tv1925[ebp]
	mov	ecx, esi
	not	ecx
	mov	DWORD PTR _new_head$89739[ebp], eax
	mov	eax, DWORD PTR [ebx+edx]
	and	ecx, 134217728				; 08000000H
	xor	ecx, DWORD PTR [eax+20]
	push	ecx
	push	edi
	call	_remove_vertex_edge

; 1119 :         set_edge_headv(get_fe_edge(fe_b),new_head);

	mov	eax, DWORD PTR _web+460
	mov	edx, DWORD PTR _new_head$89739[ebp]
	mov	ecx, DWORD PTR [ebx+eax]
	push	edx
	mov	edx, DWORD PTR [ecx+20]
	xor	edx, DWORD PTR tv1932[ebp]
	push	edx
	call	_set_edge_headv
	add	esp, 20					; 00000014H

; 1120 :         if ( equal_id(fe_b,fe_c) ) break;

	test	esi, esi
	je	$LN12@two_split
	npad	1
$LL3@two_split:

; 1121 : 
; 1122 :         fe_c = inverse_id(get_next_edge(fe_b));

	mov	ecx, DWORD PTR _web+460
	test	esi, 134217728				; 08000000H
	je	SHORT $LN208@two_split
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN207@two_split
$LN208@two_split:
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR [edx+32]
$LN207@two_split:
	xor	eax, 134217728				; 08000000H
	mov	ebx, eax

; 1123 :         fe_b = get_next_facet(fe_c);

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN212@two_split
	mov	esi, DWORD PTR [edx+36]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN211@two_split
$LN212@two_split:
	mov	esi, DWORD PTR [edx+40]
$LN211@two_split:

; 1113 :       fe_c = NULLID;
; 1114 :  
; 1115 :       /* reconnect edges */
; 1116 :       for (;;)
; 1117 :       {
; 1118 :         remove_vertex_edge(old_head,inverse_id(get_fe_edge(fe_b)));

	mov	edx, DWORD PTR _old_head$89738[ebp]
	mov	edi, esi
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	eax, DWORD PTR [edi+ecx]
	mov	ecx, esi
	not	ecx
	and	ecx, 134217728				; 08000000H
	xor	ecx, DWORD PTR [eax+20]
	push	ecx
	push	edx
	call	_remove_vertex_edge

; 1119 :         set_edge_headv(get_fe_edge(fe_b),new_head);

	mov	eax, DWORD PTR _new_head$89739[ebp]
	mov	ecx, DWORD PTR _web+460
	mov	edx, DWORD PTR [edi+ecx]
	push	eax
	mov	eax, esi
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]
	push	eax
	call	_set_edge_headv
	add	esp, 16					; 00000010H

; 1120 :         if ( equal_id(fe_b,fe_c) ) break;

	cmp	esi, ebx
	jne	$LL3@two_split
$LN12@two_split:

; 1064 :   
; 1065 : 
; 1066 :   /* split new edge off with facetedges in list */
; 1067 :   for ( i = 0 ; i < splitcount ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _splitcount$[ebp]
	jl	$LL248@two_split
$LN11@two_split:

; 1124 : 
; 1125 :       }
; 1126 :     }
; 1127 :   }
; 1128 : 
; 1129 :   popped = splitcount;
; 1130 : 
; 1131 :   return popped;
; 1132 : } // end two_split()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, DWORD PTR _splitcount$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_two_split ENDP
_TEXT	ENDS
PUBLIC	_figure_type
EXTRN	_kraynikpopvertex_flag:DWORD
; Function compile flags: /Ogtp
;	COMDAT _figure_type
_TEXT	SEGMENT
_fours$89899 = 8					; size = 4
_cinfo$ = 8						; size = 4
_figure_type PROC					; COMDAT

; 1364 : { int k,type;

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi

; 1365 : 
; 1366 :   /* Classifying cone */
; 1367 :   switch ( cinfo->cells )

	mov	esi, DWORD PTR _cinfo$[ebp]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx-1]
	push	edi
	cmp	eax, 5
	ja	$LN1@figure_typ
	jmp	DWORD PTR $LN65@figure_typ[eax*4]
$LN48@figure_typ:
	pop	edi
	pop	esi

; 1368 :      {
; 1369 :         case 1: /* wire boundary */
; 1370 :                   type = WIREBOUNDARY;

	mov	eax, 1
	pop	ebx

; 1443 :                     break;
; 1444 :       }
; 1445 :   return type;
; 1446 : } // end figure_type()

	pop	ebp
	ret	0
$LN47@figure_typ:

; 1371 :                   break;
; 1372 : 
; 1373 :         case 2: switch ( cinfo->arcs )

	mov	esi, DWORD PTR [esi+4]
	sub	esi, 2
	je	SHORT $LN44@figure_typ
	sub	esi, 2
	je	SHORT $LN43@figure_typ

; 1380 :                          break;
; 1381 :                       default: /* n boundary wires meet at center */
; 1382 :                          type = WIRECORNER;

	pop	edi
	pop	esi
	mov	eax, 4
	pop	ebx

; 1443 :                     break;
; 1444 :       }
; 1445 :   return type;
; 1446 : } // end figure_type()

	pop	ebp
	ret	0
$LN43@figure_typ:
	pop	edi
	pop	esi

; 1377 :                          break;
; 1378 :                       case 4: /* two wings on wire boundary */
; 1379 :                          type = WIREWING;  /* minimality depends on angle */

	mov	eax, 3
	pop	ebx

; 1443 :                     break;
; 1444 :       }
; 1445 :   return type;
; 1446 : } // end figure_type()

	pop	ebp
	ret	0
$LN44@figure_typ:
	pop	edi
	pop	esi

; 1374 :                     {
; 1375 :                       case 2: /* internal plane */
; 1376 :                          type = PLANECONE;

	mov	eax, 2
	pop	ebx

; 1443 :                     break;
; 1444 :       }
; 1445 :   return type;
; 1446 : } // end figure_type()

	pop	ebp
	ret	0
$LN41@figure_typ:

; 1383 :                          break;
; 1384 :                     }
; 1385 :                   break;
; 1386 : 
; 1387 :         case 3: switch ( cinfo->arcs ) 

	cmp	DWORD PTR [esi+4], 6

; 1394 :                          break;
; 1395 :                       default:
; 1396 :                          type = OTHERCONE;
; 1397 :                          break;

	jne	$LN1@figure_typ

; 1391 :                          for ( k = 0 ; k < cinfo->cells ; k++ )

	mov	eax, 5
	test	ecx, ecx
	jle	$LN49@figure_typ

; 1388 :                     {
; 1389 :                       case 6: /* triple edge */
; 1390 :                          type = TRIPLE_EDGER;

	lea	edx, DWORD PTR [esi+16]
	npad	3
$LL37@figure_typ:

; 1392 :                             if ( cinfo->cell[k].num != 2 ) 

	cmp	DWORD PTR [edx], 2
	je	SHORT $LN36@figure_typ

; 1393 :                               type = OTHERCONE;

	xor	eax, eax
$LN36@figure_typ:

; 1391 :                          for ( k = 0 ; k < cinfo->cells ; k++ )

	add	edx, 32					; 00000020H
	dec	ecx
	jne	SHORT $LL37@figure_typ
	pop	edi
	pop	esi
	pop	ebx

; 1443 :                     break;
; 1444 :       }
; 1445 :   return type;
; 1446 : } // end figure_type()

	pop	ebp
	ret	0
$LN32@figure_typ:

; 1398 :                     }
; 1399 :                   break;
; 1400 : 
; 1401 :         case 4: switch ( cinfo->arcs )

	cmp	DWORD PTR [esi+4], 12			; 0000000cH

; 1416 :                          else type = OTHERCONE;
; 1417 :                        }    
; 1418 :                        break;
; 1419 :                       default:
; 1420 :                          type = OTHERCONE;
; 1421 :                          break;

	jne	$LN1@figure_typ

; 1402 :                     { 
; 1403 :                       case 12: /* maybe tetrahedral cone */
; 1404 :                       { int twos=0,threes=0,fours=0;

	xor	ebx, ebx
	xor	edi, edi
	mov	DWORD PTR _fours$89899[ebp], ebx

; 1405 :                          for ( k = 0 ; k < cinfo->cells ; k++ )

	cmp	ecx, ebx
	jle	$LN1@figure_typ

; 1402 :                     { 
; 1403 :                       case 12: /* maybe tetrahedral cone */
; 1404 :                       { int twos=0,threes=0,fours=0;

	lea	edx, DWORD PTR [esi+16]
	npad	2
$LL28@figure_typ:

; 1406 :                          { switch ( cinfo->cell[k].num )

	mov	eax, DWORD PTR [edx]
	sub	eax, 2
	je	SHORT $LN23@figure_typ
	dec	eax
	je	SHORT $LN22@figure_typ
	dec	eax
	jne	SHORT $LN27@figure_typ

; 1409 :                              case 4: fours++; break;

	inc	DWORD PTR _fours$89899[ebp]
	jmp	SHORT $LN27@figure_typ
$LN22@figure_typ:

; 1408 :                              case 3: threes++; break;

	inc	ebx
	jmp	SHORT $LN27@figure_typ
$LN23@figure_typ:

; 1407 :                            { case 2: twos++; break;

	inc	edi
$LN27@figure_typ:

; 1405 :                          for ( k = 0 ; k < cinfo->cells ; k++ )

	add	edx, 32					; 00000020H
	dec	ecx
	jne	SHORT $LL28@figure_typ

; 1410 :                            }
; 1411 :                          }
; 1412 :                          if ( threes == 4 )

	cmp	ebx, 4
	jne	SHORT $LN20@figure_typ

; 1413 :                            type = TETRAHEDRAL;

	pop	edi
	pop	esi
	lea	eax, DWORD PTR [ecx+6]
	pop	ebx

; 1443 :                     break;
; 1444 :       }
; 1445 :   return type;
; 1446 : } // end figure_type()

	pop	ebp
	ret	0
$LN20@figure_typ:

; 1414 :                          else if ( twos==2 && fours==2 )

	cmp	edi, 2
	jne	SHORT $LN1@figure_typ
	cmp	DWORD PTR _fours$89899[ebp], edi
	jne	SHORT $LN1@figure_typ

; 1415 :                            type = ODD4CONE;

	lea	eax, DWORD PTR [edi+7]
	pop	edi
	pop	esi
	pop	ebx

; 1443 :                     break;
; 1444 :       }
; 1445 :   return type;
; 1446 : } // end figure_type()

	pop	ebp
	ret	0
$LN15@figure_typ:

; 1422 :                     }
; 1423 :                   break;
; 1424 : 
; 1425 :         case 5: if ( !kraynikpopvertex_flag || (cinfo->arcs != 18) ) 

	cmp	DWORD PTR _kraynikpopvertex_flag, 0
	je	SHORT $LN1@figure_typ
	cmp	DWORD PTR [esi+4], 18			; 00000012H
	jne	SHORT $LN1@figure_typ

; 1428 :                 for ( k = 0 ; k < cinfo->cells ; k++ )

	xor	edx, edx
	mov	eax, 7
	test	ecx, ecx
	jle	SHORT $LN49@figure_typ

; 1426 :                 { type = OTHERCONE; break; }
; 1427 :                 type = KRAYNIKCONE;

	lea	edi, DWORD PTR [esi+16]
$LL12@figure_typ:

; 1429 :                   if ( (cinfo->cell[k].num < 3) || (cinfo->cell[k].num > 4) )

	mov	esi, DWORD PTR [edi]
	cmp	esi, 3
	jl	SHORT $LN1@figure_typ
	cmp	esi, 4
	jg	SHORT $LN1@figure_typ

; 1428 :                 for ( k = 0 ; k < cinfo->cells ; k++ )

	inc	edx
	add	edi, 32					; 00000020H
	cmp	edx, ecx
	jl	SHORT $LL12@figure_typ
	pop	edi
	pop	esi
	pop	ebx

; 1443 :                     break;
; 1444 :       }
; 1445 :   return type;
; 1446 : } // end figure_type()

	pop	ebp
	ret	0
$LN7@figure_typ:

; 1430 :                     { type = OTHERCONE; break; }
; 1431 :                 break;
; 1432 : 
; 1433 :          case 6: type = CUBECONE;
; 1434 :                  if ( cinfo->arcs != 24 )

	cmp	DWORD PTR [esi+4], 24			; 00000018H
	mov	eax, 8

; 1435 :                  { type = OTHERCONE; break; }

	jne	SHORT $LN1@figure_typ

; 1436 :                  for ( k = 0 ; k < cinfo->cells ; k++ )

	xor	edx, edx
	test	ecx, ecx
	jle	SHORT $LN49@figure_typ
	add	esi, 16					; 00000010H
$LL5@figure_typ:

; 1437 :                   if ( cinfo->cell[k].num != 4 )

	cmp	DWORD PTR [esi], 4
	jne	SHORT $LN1@figure_typ

; 1436 :                  for ( k = 0 ; k < cinfo->cells ; k++ )

	inc	edx
	add	esi, 32					; 00000020H
	cmp	edx, ecx
	jl	SHORT $LL5@figure_typ
	pop	edi
	pop	esi
	pop	ebx

; 1443 :                     break;
; 1444 :       }
; 1445 :   return type;
; 1446 : } // end figure_type()

	pop	ebp
	ret	0
$LN1@figure_typ:

; 1438 :                     { type = OTHERCONE; break; }              
; 1439 :                  break;
; 1440 : 
; 1441 :          default:
; 1442 :                     type = OTHERCONE;

	xor	eax, eax
$LN49@figure_typ:
	pop	edi
	pop	esi
	pop	ebx

; 1443 :                     break;
; 1444 :       }
; 1445 :   return type;
; 1446 : } // end figure_type()

	pop	ebp
	ret	0
	npad	2
$LN65@figure_typ:
	DD	$LN48@figure_typ
	DD	$LN47@figure_typ
	DD	$LN41@figure_typ
	DD	$LN32@figure_typ
	DD	$LN15@figure_typ
	DD	$LN7@figure_typ
_figure_type ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EG@IPGNOIKA@Internal?5error?3?5cone_analyze?5ver@ ; `string'
PUBLIC	??_C@_0DI@BHMKKIOI@pop?3?5Too?5many?5arcs?5around?5vertex@ ; `string'
PUBLIC	??_C@_0DJ@EJIFEILG@pop?3?5Too?5many?5cells?5around?5verte@ ; `string'
PUBLIC	??_C@_09ODBKHHLC@POPFILM?4C?$AA@		; `string'
PUBLIC	_cone_analyze
EXTRN	_kb_error:PROC
EXTRN	_errmsg:BYTE
EXTRN	_kb_temp_calloc:PROC
;	COMDAT ??_C@_0EG@IPGNOIKA@Internal?5error?3?5cone_analyze?5ver@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0EG@IPGNOIKA@Internal?5error?3?5cone_analyze?5ver@ DB 'Internal err'
	DB	'or: cone_analyze vertex %s: can''t find nextfe in felist.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@BHMKKIOI@pop?3?5Too?5many?5arcs?5around?5vertex@
CONST	SEGMENT
??_C@_0DI@BHMKKIOI@pop?3?5Too?5many?5arcs?5around?5vertex@ DB 'pop: Too m'
	DB	'any arcs around vertex %s in cone_analyze().', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@EJIFEILG@pop?3?5Too?5many?5cells?5around?5verte@
CONST	SEGMENT
??_C@_0DJ@EJIFEILG@pop?3?5Too?5many?5cells?5around?5verte@ DB 'pop: Too m'
	DB	'any cells around vertex %s in cone_analyze().', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09ODBKHHLC@POPFILM?4C?$AA@
CONST	SEGMENT
??_C@_09ODBKHHLC@POPFILM?4C?$AA@ DB 'POPFILM.C', 00H	; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\popfilm.c
CONST	ENDS
;	COMDAT _cone_analyze
_TEXT	SEGMENT
_fe$ = -36						; size = 4
_cellstart$ = -32					; size = 4
tv1081 = -28						; size = 4
_nodeflag$ = -24					; size = 4
_arcstart$ = -20					; size = 4
_v_id$ = -16						; size = 4
tv702 = -12						; size = 4
_valence$ = -12						; size = 4
tv674 = -8						; size = 4
_k$ = -4						; size = 4
tv1045 = 8						; size = 4
_vf$ = 8						; size = 4
_cellsides$ = 12					; size = 4
_count$ = 12						; size = 4
_arclen$ = 16						; size = 4
_cinfo$ = 16						; size = 4
_cone_analyze PROC					; COMDAT

; 1461 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H

; 1462 :   int type;  /* final classification */
; 1463 :   facetedge_id fe,nextfe,ray,nextray;
; 1464 :   vertex_id v_id = vf->v_id;

	mov	eax, DWORD PTR _vf$[ebp]
	push	ebx

; 1465 :   int cellstart,arcstart,cellsides;
; 1466 :   int arclen,valence;
; 1467 :   int k,j;
; 1468 :   int nodeflag;  /* whether any interesting node has been found for cell */
; 1469 : 
; 1470 :   /* First, set up network structure of edges opposite central vertex */
; 1471 :   cinfo->felist = (facetedge_id *)temp_calloc(sizeof(facetedge_id),2*count);

	mov	ebx, DWORD PTR _cinfo$[ebp]
	push	esi
	mov	esi, DWORD PTR _count$[ebp]
	push	edi
	mov	edi, DWORD PTR [eax]
	push	1471					; 000005bfH
	lea	eax, DWORD PTR [esi+esi]
	push	OFFSET ??_C@_09ODBKHHLC@POPFILM?4C?$AA@
	push	eax
	push	4
	mov	DWORD PTR _v_id$[ebp], edi
	mov	DWORD PTR tv674[ebp], eax
	call	_kb_temp_calloc
	mov	DWORD PTR [ebx+16808], eax

; 1472 : 
; 1473 :   /* fill with outside edges of facets */
; 1474 :   for ( k = 0 ; k < count ; k++ )

	xor	eax, eax
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax
	test	esi, esi
	jle	$LN97@cone_analy
	npad	11
$LL95@cone_analy:

; 1475 :   {
; 1476 :     fe = get_facet_fe(vf[k].f_id);

	mov	ecx, DWORD PTR _vf$[ebp]
	mov	eax, DWORD PTR [ecx+eax*8+4]
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN37@cone_analy
	xor	ecx, ecx
	jmp	SHORT $LN36@cone_analy
$LN37@cone_analy:
	mov	ecx, DWORD PTR _web+236
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [edx+28]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN36@cone_analy
	xor	ecx, 134217728				; 08000000H
$LN36@cone_analy:

; 1477 :     if ( equal_id(v_id,get_fe_tailv(fe)) )

	mov	edx, DWORD PTR _web+460
	mov	esi, DWORD PTR _dymem
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv702[ebp], eax
	mov	eax, DWORD PTR [eax+20]
	mov	edx, ecx
	and	edx, 134217728				; 08000000H
	xor	eax, edx
	mov	edx, DWORD PTR _web+216
	mov	edx, DWORD PTR [edx+esi+304]
	mov	esi, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN43@cone_analy
	mov	ebx, DWORD PTR _web+636
	mov	edi, eax
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [esi+edi*4]
	lea	edi, DWORD PTR [edi+ebx*4]
	mov	ebx, DWORD PTR [edi+edx]
	mov	edi, DWORD PTR _v_id$[ebp]
	jmp	SHORT $LN42@cone_analy
$LN43@cone_analy:
	mov	ebx, eax
	and	ebx, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [esi+ebx*4]
	mov	ebx, DWORD PTR [edx+ebx]
$LN42@cone_analy:
	cmp	edi, ebx
	jne	SHORT $LN24@cone_analy

; 1478 :       fe = get_next_edge(fe);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN47@cone_analy
	mov	eax, DWORD PTR tv702[ebp]
	mov	ecx, DWORD PTR [eax+28]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN96@cone_analy
$LN47@cone_analy:
	mov	ecx, DWORD PTR tv702[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	jmp	SHORT $LN96@cone_analy
$LN24@cone_analy:

; 1479 :     else if ( equal_id(v_id,get_fe_headv(fe)) )

	test	eax, 134217728				; 08000000H
	je	SHORT $LN53@cone_analy
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	edx, DWORD PTR [edx+eax]
	jmp	SHORT $LN52@cone_analy
$LN53@cone_analy:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	esi, DWORD PTR _web+636
	lea	eax, DWORD PTR [eax+esi*4]
	mov	edx, DWORD PTR [eax+edx]
$LN52@cone_analy:
	cmp	edi, edx
	jne	SHORT $LN96@cone_analy

; 1480 :       fe = get_prev_edge(fe);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN57@cone_analy
	mov	ecx, DWORD PTR tv702[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN96@cone_analy
$LN57@cone_analy:
	mov	edx, DWORD PTR tv702[ebp]
	mov	ecx, DWORD PTR [edx+28]
$LN96@cone_analy:

; 1481 :     cinfo->felist[2*k] = fe;

	mov	ebx, DWORD PTR _cinfo$[ebp]
	mov	eax, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [ebx+16808]
	mov	DWORD PTR [edx+eax*8], ecx

; 1482 :     cinfo->felist[2*k+1] = inverse_id(fe);

	mov	edx, DWORD PTR [ebx+16808]
	xor	ecx, 134217728				; 08000000H
	mov	DWORD PTR [edx+eax*8+4], ecx
	inc	eax
	mov	DWORD PTR _k$[ebp], eax
	cmp	eax, DWORD PTR _count$[ebp]
	jl	$LL95@cone_analy
$LN97@cone_analy:

; 1483 :   }
; 1484 : 
; 1485 :   /* order into arcs and cell boundaries */
; 1486 :   k = 0;        /* current edge number */

	xor	esi, esi

; 1487 :   cinfo->cells = 0;    /* current cell number */

	mov	DWORD PTR [ebx], esi

; 1488 :   cinfo->arcs = 0;     /* current arc number */

	mov	DWORD PTR [ebx+4], esi

; 1489 :   while ( k < 2*count )

	cmp	DWORD PTR tv674[ebp], esi
	jle	$LN92@cone_analy
$CELLSTART$89962:

; 1490 :   {
; 1491 : CELLSTART:
; 1492 :     /* starting new cell */
; 1493 :     if ( k >= 2*count ) break;

	cmp	esi, DWORD PTR tv674[ebp]
	jge	$LN92@cone_analy

; 1494 :     if ( cinfo->cells >= CELLMAX )

	cmp	DWORD PTR [ebx], 300			; 0000012cH
	jl	SHORT $LN98@cone_analy

; 1495 :     { sprintf(errmsg,"pop: Too many cells around vertex %s in cone_analyze().\n",
; 1496 :          ELNAME(v_id));

	test	edi, 268435456				; 10000000H
	je	SHORT $LN30@cone_analy
	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN31@cone_analy
$LN30@cone_analy:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN31@cone_analy:
	push	eax
	push	OFFSET ??_C@_0DJ@EJIFEILG@pop?3?5Too?5many?5cells?5around?5verte@
	push	OFFSET _errmsg
	call	_sprintf

; 1497 :       kb_error(1301,errmsg, RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	1301					; 00000515H
	call	_kb_error
	add	esp, 24					; 00000018H
$LN98@cone_analy:

; 1498 :     }
; 1499 : 
; 1500 :     nodeflag = 0;  /* whether interesting node found on cell */
; 1501 :     cellstart = k;
; 1502 :     cellsides = 0;
; 1503 :     cinfo->cell[cinfo->cells].start = cinfo->arcs;

	mov	ecx, DWORD PTR [ebx]
	mov	edx, DWORD PTR [ebx+4]
	xor	eax, eax
	shl	ecx, 5
	mov	DWORD PTR _nodeflag$[ebp], eax
	mov	DWORD PTR _cellstart$[ebp], esi
	mov	DWORD PTR _cellsides$[ebp], eax
	mov	DWORD PTR [ecx+ebx+8], edx
	npad	2
$ARCSTART$89968:

; 1504 : 
; 1505 : ARCSTART:
; 1506 :     /* starting new arc */
; 1507 :     if ( cinfo->arcs >= ARCMAX )

	cmp	DWORD PTR [ebx+4], 600			; 00000258H
	jl	SHORT $LN103@cone_analy

; 1508 :     { sprintf(errmsg,"pop: Too many arcs around vertex %s in cone_analyze().\n",
; 1509 :          ELNAME(v_id));

	test	edi, 268435456				; 10000000H
	je	SHORT $LN32@cone_analy
	and	edi, 134217727				; 07ffffffH
	inc	edi
	push	edi
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN33@cone_analy
$LN32@cone_analy:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN33@cone_analy:
	push	eax
	push	OFFSET ??_C@_0DI@BHMKKIOI@pop?3?5Too?5many?5arcs?5around?5vertex@
	push	OFFSET _errmsg
	call	_sprintf

; 1510 :       kb_error(1302,errmsg, RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	1302					; 00000516H
	call	_kb_error
	add	esp, 24					; 00000018H
$LN103@cone_analy:

; 1511 :     }
; 1512 : 
; 1513 :     arcstart = k;
; 1514 :     cinfo->arclist[cinfo->arcs].start = arcstart;

	mov	eax, DWORD PTR [ebx+4]
	lea	eax, DWORD PTR [eax+eax*2]
	mov	DWORD PTR _arcstart$[ebp], esi
	mov	DWORD PTR [ebx+eax*4+9608], esi
	inc	esi
	mov	DWORD PTR tv1081[ebp], esi
	npad	1
$ARCRESTART$89973:

; 1515 : ARCRESTART:
; 1516 :     arclen = 0;

	mov	edx, DWORD PTR tv1081[ebp]

; 1517 : 
; 1518 :     for (k = arcstart; k < 2*count ;k++)

	mov	ecx, DWORD PTR _arcstart$[ebp]
	mov	DWORD PTR tv1045[ebp], edx
	mov	edx, DWORD PTR _web+460
	mov	DWORD PTR _arclen$[ebp], 0
	mov	DWORD PTR _k$[ebp], ecx
	npad	7
$LL16@cone_analy:
	cmp	ecx, DWORD PTR tv674[ebp]
	jge	$LN92@cone_analy

; 1519 :     {
; 1520 :       /* starting next edge */
; 1521 :       arclen++;
; 1522 :       fe = cinfo->felist[k];

	mov	eax, DWORD PTR [ebx+16808]
	mov	eax, DWORD PTR [eax+ecx*4]
	inc	DWORD PTR _arclen$[ebp]
	mov	DWORD PTR _fe$[ebp], eax

; 1523 :       nextray = ray = get_next_edge(fe);

	test	eax, 134217728				; 08000000H
	je	SHORT $LN61@cone_analy
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN60@cone_analy
$LN61@cone_analy:
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [ecx+32]
$LN60@cone_analy:
	mov	ecx, eax

; 1524 :       for ( valence = 1 ; ; valence++ )

	mov	esi, 1
$LL13@cone_analy:

; 1525 :       { nextray = get_next_facet(nextray);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN65@cone_analy
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [ecx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN64@cone_analy
$LN65@cone_analy:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [ecx+40]
$LN64@cone_analy:

; 1526 :         if ( equal_id(nextray,ray) ) break;

	cmp	ecx, eax
	je	SHORT $LN88@cone_analy

; 1524 :       for ( valence = 1 ; ; valence++ )

	inc	esi
	jmp	SHORT $LL13@cone_analy
$LN88@cone_analy:
	mov	DWORD PTR _valence$[ebp], esi

; 1527 :       }
; 1528 :       nextray = get_next_facet(ray);

	test	eax, 134217728				; 08000000H
	je	SHORT $LN69@cone_analy
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN68@cone_analy
$LN69@cone_analy:
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [ecx+40]
$LN68@cone_analy:

; 1529 :       nextfe = get_next_edge(inverse_id(nextray));

	xor	eax, 134217728				; 08000000H
	test	eax, 134217728				; 08000000H
	je	SHORT $LN73@cone_analy
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edi, DWORD PTR [eax+28]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN72@cone_analy
$LN73@cone_analy:
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edi, DWORD PTR [ecx+32]
$LN72@cone_analy:

; 1530 :       if ( equal_id(nextfe,cinfo->felist[cellstart]) )  /* have gone around */

	mov	eax, DWORD PTR [ebx+16808]
	mov	ecx, DWORD PTR _cellstart$[ebp]
	cmp	edi, DWORD PTR [eax+ecx*4]
	je	$LN90@cone_analy

; 1539 :         goto CELLSTART;
; 1540 :       }
; 1541 : 
; 1542 :       /* linear search list until nextfe found */
; 1543 :       for ( j = k+1 ; j < 2*count ; j++ )

	mov	esi, DWORD PTR tv1045[ebp]
	mov	eax, esi
	cmp	eax, DWORD PTR tv674[ebp]
	jge	SHORT $LN100@cone_analy
	mov	eax, DWORD PTR [ebx+16808]
	mov	ecx, DWORD PTR _k$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4+4]
	npad	4
$LL99@cone_analy:

; 1544 :         if ( equal_id(nextfe,cinfo->felist[j]) ) break;

	cmp	edi, DWORD PTR [eax]
	je	SHORT $LN100@cone_analy

; 1539 :         goto CELLSTART;
; 1540 :       }
; 1541 : 
; 1542 :       /* linear search list until nextfe found */
; 1543 :       for ( j = k+1 ; j < 2*count ; j++ )

	inc	esi
	add	eax, 4
	cmp	esi, DWORD PTR tv674[ebp]
	jl	SHORT $LL99@cone_analy
$LN100@cone_analy:

; 1545 :       if ( !equal_id(nextfe,cinfo->felist[j]) ) 

	mov	eax, DWORD PTR [ebx+16808]
	cmp	edi, DWORD PTR [eax+esi*4]
	je	SHORT $LN4@cone_analy

; 1546 :       { sprintf(errmsg,
; 1547 :        "Internal error: cone_analyze vertex %s: can't find nextfe in felist.\n",
; 1548 :           ELNAME(v_id));

	mov	eax, DWORD PTR _v_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN34@cone_analy
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN35@cone_analy
$LN34@cone_analy:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN35@cone_analy:
	push	eax
	push	OFFSET ??_C@_0EG@IPGNOIKA@Internal?5error?3?5cone_analyze?5ver@
	push	OFFSET _errmsg
	call	_sprintf

; 1549 :         kb_error(1303,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	1303					; 00000517H
	call	_kb_error
	mov	edx, DWORD PTR _web+460
	add	esp, 24					; 00000018H
$LN4@cone_analy:

; 1550 :       }
; 1551 :       if ( j > k+1 ) /* swap into place */

	cmp	esi, DWORD PTR tv1045[ebp]
	jle	SHORT $LN3@cone_analy

; 1552 :       {
; 1553 :         cinfo->felist[j] = cinfo->felist[k+1];

	mov	eax, DWORD PTR [ebx+16808]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+4]
	mov	DWORD PTR [eax+esi*4], edx

; 1554 :         cinfo->felist[k+1] = nextfe;

	mov	eax, DWORD PTR [ebx+16808]
	mov	DWORD PTR [eax+ecx*4+4], edi
	mov	edx, DWORD PTR _web+460
$LN3@cone_analy:

; 1555 :       }
; 1556 : 
; 1557 :       /* see if node between is interesting */
; 1558 :       if ( (valence != 2))

	mov	ecx, DWORD PTR _valence$[ebp]
	cmp	ecx, 2
	jne	SHORT $LN91@cone_analy

; 1517 : 
; 1518 :     for (k = arcstart; k < 2*count ;k++)

	mov	eax, 1
	add	DWORD PTR _k$[ebp], eax
	add	DWORD PTR tv1045[ebp], eax
	mov	ecx, DWORD PTR _k$[ebp]
	jmp	$LL16@cone_analy
$LN91@cone_analy:

; 1559 :       { /* have interesting node */
; 1560 :         if ( nodeflag == 0 ) 

	cmp	DWORD PTR _nodeflag$[ebp], 0
	jne	SHORT $LN1@cone_analy

; 1561 :         { /* first interesting node for cell */
; 1562 :           /* reset felist so cell and arc start are same */
; 1563 :           cinfo->felist[k] = cinfo->felist[arcstart];

	mov	eax, DWORD PTR [ebx+16808]
	mov	ecx, DWORD PTR _arcstart$[ebp]
	mov	esi, DWORD PTR [eax+ecx*4]
	mov	edx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [eax+edx*4], esi

; 1564 :           cinfo->felist[arcstart] = nextfe;

	mov	eax, DWORD PTR [ebx+16808]
	mov	DWORD PTR [eax+ecx*4], edi

; 1565 :           cinfo->felist[k+1] = fe;

	mov	ecx, DWORD PTR [ebx+16808]
	mov	eax, DWORD PTR _fe$[ebp]
	mov	DWORD PTR [ecx+edx*4+4], eax

; 1566 :           nodeflag = 1;

	mov	DWORD PTR _nodeflag$[ebp], 1
	jmp	$ARCRESTART$89973
$LN1@cone_analy:

; 1567 :           goto ARCRESTART;
; 1568 :         }
; 1569 :         cinfo->arclist[cinfo->arcs].num = arclen;

	mov	eax, DWORD PTR [ebx+4]
	mov	edi, DWORD PTR _v_id$[ebp]
	lea	edx, DWORD PTR [eax+eax*2+2403]
	mov	eax, DWORD PTR _arclen$[ebp]
	mov	DWORD PTR [ebx+edx*4], eax

; 1570 :         cinfo->arclist[cinfo->arcs].valence = valence;

	mov	eax, DWORD PTR [ebx+4]
	lea	edx, DWORD PTR [eax+eax*2]

; 1571 :         cinfo->arcs++;

	mov	eax, 1

; 1572 :         cellsides++;

	add	DWORD PTR _cellsides$[ebp], eax
	mov	DWORD PTR [ebx+edx*4+9616], ecx
	add	DWORD PTR [ebx+4], eax

; 1573 :         k++;

	add	DWORD PTR _k$[ebp], eax
	mov	esi, DWORD PTR _k$[ebp]
	jmp	$ARCSTART$89968
$LN90@cone_analy:

; 1531 :       {
; 1532 :         cinfo->arclist[cinfo->arcs].num = arclen;

	mov	eax, DWORD PTR [ebx+4]
	mov	ecx, DWORD PTR _arclen$[ebp]
	mov	edi, DWORD PTR _v_id$[ebp]
	lea	eax, DWORD PTR [eax+eax*2+2403]
	mov	DWORD PTR [ebx+eax*4], ecx

; 1533 :         cinfo->arclist[cinfo->arcs].valence = valence;

	mov	eax, DWORD PTR [ebx+4]

; 1534 :         cinfo->arcs++;
; 1535 :         cellsides++;

	mov	ecx, DWORD PTR _cellsides$[ebp]
	lea	edx, DWORD PTR [eax+eax*2]
	mov	DWORD PTR [ebx+edx*4+9616], esi

; 1536 :         cinfo->cell[cinfo->cells].num = cellsides;

	mov	edx, DWORD PTR [ebx]
	mov	eax, 1
	add	DWORD PTR [ebx+4], eax
	inc	ecx
	shl	edx, 5
	mov	DWORD PTR [edx+ebx+16], ecx

; 1537 :         cinfo->cells++;

	add	DWORD PTR [ebx], eax

; 1538 :         k++;

	add	DWORD PTR _k$[ebp], eax
	mov	esi, DWORD PTR _k$[ebp]
	jmp	$CELLSTART$89962
$LN92@cone_analy:

; 1574 :         goto ARCSTART;
; 1575 :       }
; 1576 :     }
; 1577 :   }
; 1578 : 
; 1579 :   type = figure_type(cinfo);  /* so stupid SUN can optimize */

	push	ebx
	call	_figure_type
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 1580 : 
; 1581 :   return  type;
; 1582 : } // end cone_analyze()

	mov	esp, ebp
	pop	ebp
	ret	0
_cone_analyze ENDP
_TEXT	ENDS
PUBLIC	__real@3fe0000000000000
PUBLIC	??_C@_0DL@IFBFDMMM@Solid?5angle?5excess?5?$CFg?5found?5arou@ ; `string'
PUBLIC	__real@402921fca3cf85a6
PUBLIC	??_C@_0DM@IFHPAPBB@Solid?5angle?5deficit?5?$CFg?5found?5aro@ ; `string'
PUBLIC	__real@402921fb54442d18
PUBLIC	__real@402921fa04b8d48a
PUBLIC	__real@46293e5939a08cea
PUBLIC	__real@c6293e5939a08cea
PUBLIC	__real@402b21fb54442d18
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@402721fb54442d18
PUBLIC	__real@401921fb54442d18
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@bff0000000000000
PUBLIC	__real@3fec28f5c28f5c29
PUBLIC	??_C@_0CO@NMLPBPFF@Vertex?5?$CFs?5looks?5like?5double?5cone@ ; `string'
PUBLIC	??_C@_0BD@NKPMPOOD@Popping?5vertex?5?$CFs?6?$AA@ ; `string'
PUBLIC	_cinfo$GSCopy$
PUBLIC	_v_id$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_pop_vertex
EXTRN	_free_element:PROC
EXTRN	_set_fe_facet:PROC
EXTRN	_divide_quad:PROC
EXTRN	_set_v_conmap:PROC
EXTRN	_new_vertex:PROC
EXTRN	_cross_prod:PROC
EXTRN	_face_triangulate:PROC
EXTRN	_cross_cut:PROC
EXTRN	_septum_flag:DWORD
EXTRN	_pop_enjoin_flag:DWORD
EXTRN	_pop_disjoin_flag:DWORD
EXTRN	_get_edge_side:PROC
EXTRN	__CIacos:PROC
EXTRN	__CIsqrt:PROC
EXTRN	_memset:PROC
;	COMDAT __real@3fe0000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT ??_C@_0DL@IFBFDMMM@Solid?5angle?5excess?5?$CFg?5found?5arou@
CONST	SEGMENT
??_C@_0DL@IFBFDMMM@Solid?5angle?5excess?5?$CFg?5found?5arou@ DB 'Solid an'
	DB	'gle excess %g found around vertex %s. Not popped.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT __real@402921fca3cf85a6
CONST	SEGMENT
__real@402921fca3cf85a6 DQ 0402921fca3cf85a6r	; 12.5664
CONST	ENDS
;	COMDAT ??_C@_0DM@IFHPAPBB@Solid?5angle?5deficit?5?$CFg?5found?5aro@
CONST	SEGMENT
??_C@_0DM@IFHPAPBB@Solid?5angle?5deficit?5?$CFg?5found?5aro@ DB 'Solid an'
	DB	'gle deficit %g found around vertex %s. Not popped.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT __real@402921fb54442d18
CONST	SEGMENT
__real@402921fb54442d18 DQ 0402921fb54442d18r	; 12.5664
CONST	ENDS
;	COMDAT __real@402921fa04b8d48a
CONST	SEGMENT
__real@402921fa04b8d48a DQ 0402921fa04b8d48ar	; 12.5664
CONST	ENDS
;	COMDAT __real@46293e5939a08cea
CONST	SEGMENT
__real@46293e5939a08cea DQ 046293e5939a08cear	; 1e+030
CONST	ENDS
;	COMDAT __real@c6293e5939a08cea
CONST	SEGMENT
__real@c6293e5939a08cea DQ 0c6293e5939a08cear	; -1e+030
CONST	ENDS
;	COMDAT __real@402b21fb54442d18
CONST	SEGMENT
__real@402b21fb54442d18 DQ 0402b21fb54442d18r	; 13.5664
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@402721fb54442d18
CONST	SEGMENT
__real@402721fb54442d18 DQ 0402721fb54442d18r	; 11.5664
CONST	ENDS
;	COMDAT __real@401921fb54442d18
CONST	SEGMENT
__real@401921fb54442d18 DQ 0401921fb54442d18r	; 6.28319
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@3fec28f5c28f5c29
CONST	SEGMENT
__real@3fec28f5c28f5c29 DQ 03fec28f5c28f5c29r	; 0.88
CONST	ENDS
;	COMDAT ??_C@_0CO@NMLPBPFF@Vertex?5?$CFs?5looks?5like?5double?5cone@
CONST	SEGMENT
??_C@_0CO@NMLPBPFF@Vertex?5?$CFs?5looks?5like?5double?5cone@ DB 'Vertex %'
	DB	's looks like double cones but isn''t.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NKPMPOOD@Popping?5vertex?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BD@NKPMPOOD@Popping?5vertex?5?$CFs?6?$AA@ DB 'Popping vertex %s', 0aH
	DB	00H						; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\popfilm.c
CONST	ENDS
;	COMDAT _pop_vertex
_TEXT	SEGMENT
_thisnorm$ = -836					; size = 8
tv5943 = -832						; size = 4
_flipflag$ = -832					; size = 4
tv3737 = -828						; size = 8
tv6250 = -824						; size = 4
_prev_fe3$90070 = -824					; size = 4
_samecell2$ = -824					; size = 4
tv7639 = -820						; size = 8
_total_angle$ = -820					; size = 8
_area2$90055 = -820					; size = 8
tv6160 = -816						; size = 4
tv5674 = -816						; size = 4
_maxarea$ = -812					; size = 8
tv6366 = -808						; size = 4
tv5183 = -808						; size = 4
_v1$90274 = -808					; size = 4
_newfe2$90160 = -808					; size = 4
_totside1length$ = -804					; size = 8
tv5250 = -800						; size = 4
_fe_2next$90158 = -800					; size = 4
_bs1$ = -800						; size = 4
tv3755 = -796						; size = 8
_bestcosa$90047 = -796					; size = 8
_total_area$ = -796					; size = 8
tv6350 = -792						; size = 4
tv6274 = -792						; size = 4
tv5684 = -792						; size = 4
_newv$90185 = -792					; size = 4
_fe$ = -788						; size = 4
_fe_2$90051 = -788					; size = 4
_bestray1$90048 = -788					; size = 4
tv6157 = -784						; size = 4
_fe_1$90050 = -784					; size = 4
_bestray2$90049 = -784					; size = 4
_v_id$GSCopy$ = -780					; size = 4
tv7641 = -776						; size = 8
_angle$ = -776						; size = 8
_prevnorm$ = -776					; size = 8
_area1$90054 = -776					; size = 8
tv6315 = -772						; size = 4
tv5949 = -772						; size = 4
tv5181 = -772						; size = 4
$T94448 = -772						; size = 4
_vx$ = -772						; size = 4
tv6173 = -768						; size = 4
_new_f$90288 = -768					; size = 4
_f_septum$90066 = -768					; size = 4
tv5644 = -764						; size = 4
_bo1$ = -764						; size = 4
_old_bdrynum$ = -764					; size = 4
tv6253 = -760						; size = 4
_prev_fe$90290 = -760					; size = 4
_new_e$90276 = -760					; size = 4
_first_fe3$90069 = -760					; size = 4
tv5753 = -756						; size = 4
tv5180 = -756						; size = 4
_e_1$90153 = -756					; size = 4
_othercell2$ = -756					; size = 4
_totside2length$ = -752					; size = 8
_bs2$ = -748						; size = 4
_j$ = -748						; size = 4
_i$ = -748						; size = 4
tv8822 = -744						; size = 4
tv8056 = -744						; size = 4
_old_conmap$ = -744					; size = 4
_fenum$ = -744						; size = 4
_middleflag$90068 = -744				; size = 4
tv7666 = -740						; size = 4
_fe_1next$90157 = -740					; size = 4
_othercell$90053 = -740					; size = 4
_k$ = -740						; size = 4
tv5788 = -736						; size = 4
tv5647 = -736						; size = 4
tv5191 = -736						; size = 4
_f_1$90161 = -736					; size = 4
_bigcell$ = -736					; size = 4
tv8918 = -732						; size = 4
tv5769 = -732						; size = 4
_ray_fe$ = -732						; size = 4
_f_2$90162 = -732					; size = 4
_samecell$90052 = -732					; size = 4
tv5664 = -728						; size = 4
_cinfo$GSCopy$ = -728					; size = 4
_newx$ = -724						; size = 48
_ray$ = -676						; size = 48
_normal1$90056 = -628					; size = 48
_edge2$90140 = -580					; size = 48
_axis1$90060 = -532					; size = 48
_normal2$90057 = -484					; size = 48
_thisnormal$ = -436					; size = 48
_side$ = -388						; size = 48
_prevnormal$ = -340					; size = 48
_rayvec$90256 = -292					; size = 48
_edge1$90139 = -292					; size = 48
_side1$90062 = -244					; size = 48
_side2$90063 = -196					; size = 48
_axis2$90061 = -148					; size = 48
_totnorm2$90059 = -100					; size = 48
_totnorm1$90058 = -52					; size = 48
__$ArrayPad$ = -4					; size = 4
_v_id$ = 8						; size = 4
_count$ = 12						; size = 4
_cinfo$ = 16						; size = 4
_pop_vertex PROC					; COMDAT

; 1601 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 836				; 00000344H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1602 :   int i,j,k,m;
; 1603 :   struct arc *ar;
; 1604 :   int fenum;
; 1605 :   facetedge_id fe;
; 1606 :   REAL cosdef;
; 1607 :   REAL prevnormal[MAXCOORD],prevnorm;
; 1608 :   REAL thisnormal[MAXCOORD],thisnorm;
; 1609 :   REAL maxarea = 0.0;

	fldz
	mov	eax, DWORD PTR _v_id$[ebp]
	push	ebx
	fld	ST(0)
	push	esi
	fst	QWORD PTR _maxarea$[ebp]

; 1610 :   int  bigcell=0;

	xor	ebx, ebx

; 1611 :   REAL total_area = 0.0;

	fxch	ST(1)
	push	edi
	fst	QWORD PTR _total_area$[ebp]
	mov	edi, DWORD PTR _cinfo$[ebp]
	mov	DWORD PTR _v_id$GSCopy$[ebp], eax
	mov	DWORD PTR _cinfo$GSCopy$[ebp], edi
	mov	DWORD PTR _bigcell$[ebp], ebx

; 1612 :   REAL total_angle,angle;
; 1613 :   REAL side[MAXCOORD],ray[MAXCOORD];  
; 1614 :   REAL *vx,newx[MAXCOORD];
; 1615 :   edge_id ray_e;
; 1616 :   facetedge_id ray_fe;
; 1617 :   vertex_id new_v;
; 1618 :   conmap_t *old_conmap;
; 1619 :   int old_bdrynum = -1;

	mov	DWORD PTR _old_bdrynum$[ebp], -1

; 1620 :   int samecell2, othercell2;
; 1621 :   body_id bs1,bs2,bo1,bo2;
; 1622 :   REAL totside1length,totside2length;
; 1623 :   int flipflag = 0; /* if cones switched in widecones */

	mov	DWORD PTR _flipflag$[ebp], ebx

; 1624 :   
; 1625 :   if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, ebx
	je	SHORT $LN746@pop_vertex
	fstp	ST(0)
	fstp	ST(0)

; 1626 :   { sprintf(msg,"Popping vertex %s\n",ELNAME(v_id));

	test	eax, 268435456				; 10000000H
	je	SHORT $LN148@pop_vertex
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN149@pop_vertex
$LN148@pop_vertex:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN149@pop_vertex:
	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0BD@NKPMPOOD@Popping?5vertex?5?$CFs?6?$AA@
	push	eax
	call	_sprintf

; 1627 :     outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	fld	QWORD PTR _maxarea$[ebp]
	fld	QWORD PTR _total_area$[ebp]
	add	esp, 16					; 00000010H
$LN746@pop_vertex:

; 1628 :   }
; 1629 : 
; 1630 :   /* fix up cell structures */
; 1631 :   for ( i = 0 ; i < cinfo->cells ; i++ )

	cmp	DWORD PTR [edi], ebx
	jle	SHORT $LN142@pop_vertex
	lea	eax, DWORD PTR [edi+20]
$LN755@pop_vertex:

; 1633 :     ar = cinfo->arclist + cinfo->cell[i].start;

	mov	ecx, DWORD PTR [eax-12]
	lea	edx, DWORD PTR [ecx+ecx*2]
	lea	esi, DWORD PTR [edi+edx*4+9608]
	mov	DWORD PTR [eax], 0

; 1634 :     cinfo->cell[i].festart = ar->start;

	mov	ecx, DWORD PTR [esi]

; 1635 :     for ( j = 0 ; j < cinfo->cell[i].num ; j++, ar++ )

	xor	edx, edx
	mov	DWORD PTR [eax-8], ecx
	cmp	DWORD PTR [eax-4], edx
	jle	SHORT $LN143@pop_vertex

; 1632 :   { cinfo->cell[i].fenum = 0;

	xor	ecx, ecx
	add	esi, 4
$LN141@pop_vertex:

; 1636 :       cinfo->cell[i].fenum += ar->num;

	add	ecx, DWORD PTR [esi]
	inc	edx
	mov	DWORD PTR [eax], ecx
	add	esi, 12					; 0000000cH
	cmp	edx, DWORD PTR [eax-4]
	jl	SHORT $LN141@pop_vertex
$LN143@pop_vertex:

; 1628 :   }
; 1629 : 
; 1630 :   /* fix up cell structures */
; 1631 :   for ( i = 0 ; i < cinfo->cells ; i++ )

	inc	ebx
	add	eax, 32					; 00000020H
	cmp	ebx, DWORD PTR [edi]
	jl	SHORT $LN755@pop_vertex
$LN142@pop_vertex:

; 1637 :   }
; 1638 : 
; 1639 :   /* check for special configuration of touching disjoint cones
; 1640 :      that may want to be merged rather than split
; 1641 :   */
; 1642 :   if ( (cinfo->cells == 4) && (cinfo->cell[0].num == 1) && (cinfo->cell[1].num == 1)
; 1643 :           && (cinfo->cell[2].num == 1) && (cinfo->cell[3].num == 1) )

	cmp	DWORD PTR [edi], 4
	jne	$narrowcones$90111
	mov	edx, edi
	cmp	DWORD PTR [edx+16], 1
	jne	$narrowcones$90111
	mov	eax, edx
	cmp	DWORD PTR [eax+48], 1
	jne	$narrowcones$90111
	mov	ecx, eax
	cmp	DWORD PTR [ecx+80], 1
	jne	$narrowcones$90111
	cmp	DWORD PTR [edx+112], 1
	jne	$narrowcones$90111

; 1644 :   { REAL cosa,bestcosa; 
; 1645 :     facetedge_id bestray1=NULLID, bestray2=NULLID,fe_1,fe_2;

	xor	eax, eax
	fstp	ST(0)
	mov	DWORD PTR _bestray1$90048[ebp], eax
	fstp	ST(0)
	mov	DWORD PTR _bestray2$90049[ebp], eax

; 1646 :     int samecell,othercell;
; 1647 :     REAL area1,area2,normal1[MAXCOORD],normal2[MAXCOORD];
; 1648 :     REAL totnorm1[MAXCOORD],totnorm2[MAXCOORD];
; 1649 :     REAL axis1[MAXCOORD], axis2[MAXCOORD];
; 1650 :     REAL side1[MAXCOORD], side2[MAXCOORD];
; 1651 :     facet_id f_1,f_2,f_septum=NULLID;

	mov	DWORD PTR _f_septum$90066[ebp], eax

; 1652 :     REAL ratio;
; 1653 :     int middleflag = 0; /* whether to put in septum */

	mov	DWORD PTR _middleflag$90068[ebp], eax

; 1654 :     facetedge_id first_fe3=NULLID, prev_fe3, newfe3;

	mov	DWORD PTR _first_fe3$90069[ebp], eax

; 1655 :     body_id b_1, b_2;
; 1656 :  
; 1657 :     /* first, see which cells are really the same cones */
; 1658 :     samecell = 0;

	mov	DWORD PTR _samecell$90052[ebp], eax

; 1659 :     for ( i = 1 ; i < cinfo->cells ; i++ )

	mov	eax, ecx
	mov	ecx, DWORD PTR [eax+20]
	add	eax, 52					; 00000034H
	mov	DWORD PTR _i$[ebp], 1
	mov	DWORD PTR $T94448[ebp], ecx
	mov	DWORD PTR tv7666[ebp], eax
$LL137@pop_vertex:

; 1660 :     { for ( j = 0 ; j < cinfo->cell[0].fenum ; j++ )

	xor	ebx, ebx
	test	ecx, ecx
	jle	SHORT $LN136@pop_vertex
	mov	eax, DWORD PTR tv7666[ebp]
	mov	esi, DWORD PTR [eax]
$LL761@pop_vertex:

; 1661 :        for ( k = 0 ; k < cinfo->cell[i].fenum ; k++ )

	xor	ecx, ecx
	test	esi, esi
	jle	SHORT $LN133@pop_vertex
	mov	edx, DWORD PTR _cinfo$GSCopy$[ebp]
	mov	eax, DWORD PTR [edx+16808]
	mov	edx, DWORD PTR [edx+12]
	mov	edi, DWORD PTR tv7666[ebp]
	mov	edi, DWORD PTR [edi-8]
	add	edx, ebx
	mov	edx, DWORD PTR [eax+edx*4]
	or	edx, 134217728				; 08000000H
	lea	eax, DWORD PTR [eax+edi*4]
	npad	1
$LL131@pop_vertex:

; 1662 :         if (equal_element(cinfo->felist[cinfo->cell[0].festart+j],cinfo->felist[cinfo->cell[i].festart+k])) 

	mov	edi, DWORD PTR [eax]
	or	edi, 134217728				; 08000000H
	cmp	edx, edi
	je	SHORT $LN631@pop_vertex

; 1661 :        for ( k = 0 ; k < cinfo->cell[i].fenum ; k++ )

	inc	ecx
	add	eax, 4
	cmp	ecx, esi
	jl	SHORT $LL131@pop_vertex

; 1720 :         if ( (j != samecell) && (j != othercell) ) break;

	jmp	SHORT $LN133@pop_vertex
$LN631@pop_vertex:

; 1663 :         { samecell = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _samecell$90052[ebp], eax
$LN133@pop_vertex:

; 1660 :     { for ( j = 0 ; j < cinfo->cell[0].fenum ; j++ )

	mov	ecx, DWORD PTR $T94448[ebp]
	inc	ebx
	cmp	ebx, ecx
	jl	SHORT $LL761@pop_vertex
$LN136@pop_vertex:

; 1659 :     for ( i = 1 ; i < cinfo->cells ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	add	DWORD PTR tv7666[ebp], 32		; 00000020H
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, 4
	jl	$LL137@pop_vertex

; 1664 :           break;
; 1665 :         }
; 1666 :     }
; 1667 :     if ( samecell == 0 )

	mov	edi, DWORD PTR _samecell$90052[ebp]
	test	edi, edi
	jne	SHORT $LN751@pop_vertex

; 1668 :     { sprintf(errmsg,"Vertex %s looks like double cones but isn't.\n",
; 1669 :           ELNAME(v_id));

	mov	eax, DWORD PTR _v_id$GSCopy$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN150@pop_vertex
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN151@pop_vertex
$LN150@pop_vertex:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN151@pop_vertex:
	push	eax
	push	OFFSET ??_C@_0CO@NMLPBPFF@Vertex?5?$CFs?5looks?5like?5double?5cone@
	push	OFFSET _errmsg
	call	_sprintf

; 1670 :       kb_error(2890,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2890					; 00000b4aH
	call	_kb_error
	add	esp, 24					; 00000018H
$LN751@pop_vertex:

; 1671 :     }
; 1672 :     othercell = (samecell == 1) ? 2 : 1;
; 1673 : 
; 1674 :     /* get axis and see if cones wide enough to pop this way */
; 1675 :     area1 = area2 = 0.0;

	fldz
	lea	esi, DWORD PTR [edi-1]
	neg	esi
	fst	QWORD PTR _area2$90055[ebp]

; 1676 :     memset((char*)axis1,0,sizeof(axis1));

	push	48					; 00000030H
	fstp	QWORD PTR _area1$90054[ebp]
	sbb	esi, esi
	lea	ecx, DWORD PTR _axis1$90060[ebp]
	push	0
	add	esi, 2
	push	ecx
	mov	DWORD PTR _othercell$90053[ebp], esi
	call	_memset

; 1677 :     memset((char*)axis2,0,sizeof(axis2));

	push	48					; 00000030H
	lea	edx, DWORD PTR _axis2$90061[ebp]
	push	0
	push	edx
	call	_memset

; 1678 :     memset((char*)totnorm1,0,sizeof(totnorm1));

	push	48					; 00000030H
	lea	eax, DWORD PTR _totnorm1$90058[ebp]
	push	0
	push	eax
	call	_memset

; 1679 :     memset((char*)totnorm2,0,sizeof(totnorm2));

	push	48					; 00000030H
	lea	ecx, DWORD PTR _totnorm2$90059[ebp]
	push	0
	push	ecx
	call	_memset

; 1680 :     totside1length = totside2length = 0.0;

	fldz

; 1681 :     for ( i = 0 ; i < cinfo->cell[samecell].fenum ; i++ )

	shl	edi, 5
	fst	QWORD PTR _totside2length$[ebp]
	add	edi, DWORD PTR _cinfo$GSCopy$[ebp]
	fstp	QWORD PTR _totside1length$[ebp]
	xor	ebx, ebx
	add	esp, 48					; 00000030H
	cmp	DWORD PTR [edi+20], ebx
	jle	$LN752@pop_vertex
	npad	9
$LL126@pop_vertex:

; 1682 :     { fe_1 = cinfo->felist[cinfo->cell[samecell].festart+i];

	mov	eax, DWORD PTR [edi+12]
	mov	ecx, DWORD PTR _cinfo$GSCopy$[ebp]
	mov	edx, DWORD PTR [ecx+16808]
	add	eax, ebx
	mov	esi, DWORD PTR [edx+eax*4]

; 1683 :       f_1 = get_fe_facet(fe_1);

	test	esi, 268435456				; 10000000H
	jne	SHORT $LN167@pop_vertex
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN166@pop_vertex
$LN167@pop_vertex:
	mov	ecx, DWORD PTR _web+460
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+24]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN166@pop_vertex
	xor	eax, 134217728				; 08000000H
$LN166@pop_vertex:

; 1684 :       get_facet_normal(f_1,normal1);

	lea	ecx, DWORD PTR _normal1$90056[ebp]
	push	ecx
	push	eax
	call	_get_facet_normal

; 1685 :       area1 += sqrt(dot(normal1,normal1,SDIM));

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _normal1$90056[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	add	esp, 20					; 00000014H
	call	__CIsqrt
	fadd	QWORD PTR _area1$90054[ebp]

; 1686 :       for ( j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR _web+616
	xor	eax, eax
	fstp	QWORD PTR _area1$90054[ebp]
	test	ecx, ecx
	jle	SHORT $LN121@pop_vertex
	npad	10
$LL123@pop_vertex:

; 1687 :         totnorm1[j] += normal1[j];

	fld	QWORD PTR _normal1$90056[ebp+eax*8]
	inc	eax
	fadd	QWORD PTR _totnorm1$90058[ebp+eax*8-8]
	fstp	QWORD PTR _totnorm1$90058[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LL123@pop_vertex
$LN121@pop_vertex:

; 1688 :       get_fe_side(get_prev_edge(fe_1),side1);

	mov	ecx, DWORD PTR _web+460
	test	esi, 134217728				; 08000000H
	je	SHORT $LN171@pop_vertex
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN170@pop_vertex
$LN171@pop_vertex:
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR [eax+28]
$LN170@pop_vertex:
	lea	edx, DWORD PTR _side1$90062[ebp]
	push	edx
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	push	eax
	call	_get_edge_side

; 1689 :       for ( j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR _web+616
	add	esp, 8
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN756@pop_vertex
$LL120@pop_vertex:

; 1690 :         axis1[j] += side1[j];

	fld	QWORD PTR _side1$90062[ebp+eax*8]
	inc	eax
	fadd	QWORD PTR _axis1$90060[ebp+eax*8-8]
	fstp	QWORD PTR _axis1$90060[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LL120@pop_vertex
$LN756@pop_vertex:

; 1691 :       totside1length += sqrt(dot(side1,side1,SDIM));

	push	ecx
	lea	edx, DWORD PTR _side1$90062[ebp]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fadd	QWORD PTR _totside1length$[ebp]
	inc	ebx
	fstp	QWORD PTR _totside1length$[ebp]
	cmp	ebx, DWORD PTR [edi+20]
	jl	$LL126@pop_vertex

; 1681 :     for ( i = 0 ; i < cinfo->cell[samecell].fenum ; i++ )

	mov	esi, DWORD PTR _othercell$90053[ebp]
$LN752@pop_vertex:

; 1692 :     }
; 1693 :     for ( i = 0 ; i < cinfo->cell[othercell].fenum ; i++ )

	mov	ecx, DWORD PTR _cinfo$GSCopy$[ebp]
	shl	esi, 5
	xor	edi, edi
	cmp	DWORD PTR [esi+ecx+20], edi
	lea	ebx, DWORD PTR [esi+ecx]
	jle	$LN115@pop_vertex
	npad	10
$LL759@pop_vertex:

; 1694 :     { fe_2 = cinfo->felist[cinfo->cell[othercell].festart+i];

	mov	edx, DWORD PTR [ebx+12]
	mov	eax, DWORD PTR _cinfo$GSCopy$[ebp]
	mov	ecx, DWORD PTR [eax+16808]
	add	edx, edi
	mov	esi, DWORD PTR [ecx+edx*4]

; 1695 :       f_2 = get_fe_facet(fe_2);

	test	esi, 268435456				; 10000000H
	jne	SHORT $LN177@pop_vertex
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN176@pop_vertex
$LN177@pop_vertex:
	mov	eax, DWORD PTR _web+460
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [ecx+24]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN176@pop_vertex
	xor	eax, 134217728				; 08000000H
$LN176@pop_vertex:

; 1696 :       get_facet_normal(f_2,normal2);

	lea	edx, DWORD PTR _normal2$90057[ebp]
	push	edx
	push	eax
	call	_get_facet_normal

; 1697 :       area2 += sqrt(dot(normal2,normal2,SDIM));

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _normal2$90057[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	add	esp, 20					; 00000014H
	call	__CIsqrt
	fadd	QWORD PTR _area2$90055[ebp]

; 1698 :       for ( j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR _web+616
	xor	eax, eax
	fstp	QWORD PTR _area2$90055[ebp]
	test	ecx, ecx
	jle	SHORT $LN112@pop_vertex
	npad	11
$LL114@pop_vertex:

; 1699 :         totnorm2[j] += normal2[j];

	fld	QWORD PTR _normal2$90057[ebp+eax*8]
	inc	eax
	fadd	QWORD PTR _totnorm2$90059[ebp+eax*8-8]
	fstp	QWORD PTR _totnorm2$90059[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LL114@pop_vertex
$LN112@pop_vertex:

; 1700 :       get_fe_side(get_prev_edge(fe_2),side2);

	mov	ecx, DWORD PTR _web+460
	test	esi, 134217728				; 08000000H
	je	SHORT $LN181@pop_vertex
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR [eax+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN180@pop_vertex
$LN181@pop_vertex:
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR [edx+28]
$LN180@pop_vertex:
	lea	edx, DWORD PTR _side2$90063[ebp]
	push	edx
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	push	eax
	call	_get_edge_side

; 1701 :       for ( j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR _web+616
	add	esp, 8
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN760@pop_vertex
$LL111@pop_vertex:

; 1702 :         axis2[j] += side2[j];

	fld	QWORD PTR _side2$90063[ebp+eax*8]
	inc	eax
	fadd	QWORD PTR _axis2$90061[ebp+eax*8-8]
	fstp	QWORD PTR _axis2$90061[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LL111@pop_vertex
$LN760@pop_vertex:

; 1703 :       totside2length += sqrt(dot(side2,side2,SDIM));

	push	ecx
	lea	edx, DWORD PTR _side2$90063[ebp]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fadd	QWORD PTR _totside2length$[ebp]
	inc	edi
	fstp	QWORD PTR _totside2length$[ebp]
	cmp	edi, DWORD PTR [ebx+20]
	jl	$LL759@pop_vertex
$LN115@pop_vertex:

; 1704 :     }
; 1705 : 
; 1706 :     if ( pop_disjoin_flag ) 

	cmp	DWORD PTR _pop_disjoin_flag, 0
	jne	$LN724@pop_vertex

; 1707 :       goto narrowcones;
; 1708 :     if ( pop_enjoin_flag ) 

	cmp	DWORD PTR _pop_enjoin_flag, 0
	jne	SHORT $widecones$90113

; 1709 :       goto widecones;
; 1710 :     
; 1711 :     /* test wideness */
; 1712 :     ratio = (sqrt(dot(totnorm1,totnorm1,SDIM))+sqrt(dot(totnorm2,totnorm2,SDIM)))
; 1713 :              /(area1 + area2);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _totnorm2$90059[ebp]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR tv3737[ebp]
	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _totnorm1$90058[ebp]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fadd	QWORD PTR tv3737[ebp]
	fld	QWORD PTR _area2$90055[ebp]
	fadd	QWORD PTR _area1$90054[ebp]
	fdivp	ST(1), ST(0)

; 1714 :     if ( ratio < (middleflag?0.94:0.88) )

	fcomp	QWORD PTR __real@3fec28f5c28f5c29
	fnstsw	ax
	test	ah, 5
	jnp	$LN724@pop_vertex
$widecones$90113:

; 1748 :     }
; 1749 : 
; 1750 :     bs1 = get_facet_body(get_fe_facet(cinfo->felist[cinfo->cell[samecell].festart]));

	mov	ecx, DWORD PTR _cinfo$GSCopy$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ebx, DWORD PTR _othercell$90053[ebp]
	mov	esi, 1
	cmp	eax, esi
	jle	SHORT $LN632@pop_vertex

; 1715 :       goto narrowcones;
; 1716 :     
; 1717 : widecones: 
; 1718 :     /* choose cones to get facet normals going same way */
; 1719 :     for ( j = 1 ; j < cinfo->cells ; j++ )

	mov	ecx, DWORD PTR _samecell$90052[ebp]
	npad	4
$LL105@pop_vertex:

; 1720 :         if ( (j != samecell) && (j != othercell) ) break;

	cmp	esi, ecx
	je	SHORT $LN104@pop_vertex
	cmp	esi, ebx
	jne	SHORT $LN632@pop_vertex
$LN104@pop_vertex:

; 1715 :       goto narrowcones;
; 1716 :     
; 1717 : widecones: 
; 1718 :     /* choose cones to get facet normals going same way */
; 1719 :     for ( j = 1 ; j < cinfo->cells ; j++ )

	inc	esi
	cmp	esi, eax
	jl	SHORT $LL105@pop_vertex
$LN632@pop_vertex:

; 1721 :       othercell2 = j;
; 1722 :     samecell2 = 0;
; 1723 : 
; 1724 :     /*
; 1725 :     if ( dot(axis2,totnorm2,SDIM) < 0 )
; 1726 :     { int tmp = othercell;
; 1727 :       othercell = othercell2;  
; 1728 :       othercell2 = tmp;
; 1729 :     }
; 1730 :     if ( dot(axis1,totnorm1,SDIM) > 0 ) 
; 1731 :     { samecell2 = samecell;
; 1732 :       samecell = 0;
; 1733 :     }
; 1734 :     */
; 1735 :     if ( dot(totnorm1,totnorm2,SDIM) < 0 )

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _totnorm2$90059[ebp]
	push	eax
	lea	ecx, DWORD PTR _totnorm1$90058[ebp]
	mov	edi, esi
	push	ecx
	mov	DWORD PTR _othercell2$[ebp], edi
	mov	DWORD PTR _samecell2$[ebp], 0
	call	_dot
	fcomp	QWORD PTR __real@0000000000000000
	mov	ecx, DWORD PTR _web+616
	add	esp, 12					; 0000000cH
	fnstsw	ax
	fld	QWORD PTR __real@bff0000000000000
	test	ah, 5
	jp	SHORT $LN873@pop_vertex

; 1736 :     { int tmp = othercell;

	mov	edi, ebx

; 1737 :       othercell = othercell2;  

	mov	ebx, esi

; 1738 :       othercell2 = tmp;
; 1739 :       for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	mov	DWORD PTR _othercell$90053[ebp], ebx
	mov	DWORD PTR _othercell2$[ebp], edi
	test	ecx, ecx
	jle	SHORT $LN873@pop_vertex
$LN100@pop_vertex:

; 1740 :       { axis2[i] *= -1;

	fld	QWORD PTR _axis2$90061[ebp+eax*8]
	inc	eax
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _axis2$90061[ebp+eax*8-8]

; 1741 :         totnorm2[i] *= -1;

	fld	QWORD PTR _totnorm2$90059[ebp+eax*8-8]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _totnorm2$90059[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LN100@pop_vertex
$LN873@pop_vertex:

; 1742 :       }
; 1743 :     }
; 1744 :     if ( dot(axis1,totnorm1,SDIM)/totside1length >
; 1745 :             dot(axis2,totnorm1,SDIM)/totside2length )

	push	ecx
	fstp	ST(0)
	lea	edx, DWORD PTR _totnorm1$90058[ebp]
	push	edx
	lea	eax, DWORD PTR _axis1$90060[ebp]
	push	eax
	call	_dot
	fdiv	QWORD PTR _totside1length$[ebp]
	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _totnorm1$90058[ebp]
	push	edx
	lea	eax, DWORD PTR _axis2$90061[ebp]
	push	eax
	fstp	QWORD PTR tv3755[ebp]
	call	_dot
	fdiv	QWORD PTR _totside2length$[ebp]
	add	esp, 24					; 00000018H
	fcomp	QWORD PTR tv3755[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN758@pop_vertex

; 1746 :     { int tmp = othercell; othercell = samecell; samecell = tmp;

	mov	ecx, DWORD PTR _samecell$90052[ebp]
	mov	eax, ebx
	mov	DWORD PTR _othercell$90053[ebp], ecx
	mov	DWORD PTR _samecell$90052[ebp], eax

; 1747 :       tmp = samecell2; samecell2 = othercell2; othercell2 = tmp;

	mov	DWORD PTR _samecell2$[ebp], edi
	mov	DWORD PTR _othercell2$[ebp], 0
$LN758@pop_vertex:

; 1748 :     }
; 1749 : 
; 1750 :     bs1 = get_facet_body(get_fe_facet(cinfo->felist[cinfo->cell[samecell].festart]));

	mov	ecx, DWORD PTR _cinfo$GSCopy$[ebp]
	mov	edx, DWORD PTR _samecell$90052[ebp]
	mov	eax, DWORD PTR [ecx+16808]
	shl	edx, 5
	mov	ecx, DWORD PTR [edx+ecx+12]
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	edx, DWORD PTR _web+460
	mov	DWORD PTR tv5191[ebp], eax
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN187@pop_vertex
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN186@pop_vertex
$LN187@pop_vertex:
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+24]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN186@pop_vertex
	xor	eax, 134217728				; 08000000H
$LN186@pop_vertex:
	mov	edi, DWORD PTR _web+328
	mov	esi, DWORD PTR _web+236
	mov	ebx, DWORD PTR _dymem
	xor	ecx, ecx
	cmp	DWORD PTR _web+400, ecx
	jne	SHORT $LN193@pop_vertex
	mov	DWORD PTR _bs1$[ebp], ecx
	jmp	SHORT $LN190@pop_vertex
$LN193@pop_vertex:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN192@pop_vertex
	mov	DWORD PTR _bs1$[ebp], ecx
	jmp	SHORT $LN190@pop_vertex
$LN192@pop_vertex:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN191@pop_vertex
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [edi+ebx+784]
	mov	ecx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _bs1$[ebp], ecx
	jmp	SHORT $LN190@pop_vertex
$LN191@pop_vertex:
	mov	ecx, DWORD PTR [edi+ebx+784]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR _bs1$[ebp], eax
$LN190@pop_vertex:

; 1751 :     bs2 = get_facet_body(get_fe_facet(cinfo->felist[cinfo->cell[samecell2].festart]));

	mov	ecx, DWORD PTR _samecell2$[ebp]
	mov	eax, DWORD PTR _cinfo$GSCopy$[ebp]
	shl	ecx, 5
	mov	ecx, DWORD PTR [ecx+eax+12]
	mov	eax, DWORD PTR tv5191[ebp]
	mov	ecx, DWORD PTR [eax+ecx*4]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN197@pop_vertex
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN196@pop_vertex
$LN197@pop_vertex:
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+24]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN196@pop_vertex
	xor	eax, 134217728				; 08000000H
$LN196@pop_vertex:
	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN203@pop_vertex
	mov	DWORD PTR _bs2$[ebp], 0
	jmp	SHORT $LN200@pop_vertex
$LN203@pop_vertex:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN202@pop_vertex
	mov	DWORD PTR _bs2$[ebp], 0
	jmp	SHORT $LN200@pop_vertex
$LN202@pop_vertex:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN201@pop_vertex
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [edi+ebx+784]
	mov	ecx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _bs2$[ebp], ecx
	jmp	SHORT $LN200@pop_vertex
$LN201@pop_vertex:
	mov	ecx, DWORD PTR [edi+ebx+784]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR _bs2$[ebp], eax
$LN200@pop_vertex:

; 1752 :     bo1 = get_facet_body(get_fe_facet(cinfo->felist[cinfo->cell[othercell].festart]));

	mov	ecx, DWORD PTR _othercell$90053[ebp]
	mov	eax, DWORD PTR _cinfo$GSCopy$[ebp]
	shl	ecx, 5
	mov	ecx, DWORD PTR [ecx+eax+12]
	mov	eax, DWORD PTR tv5191[ebp]
	mov	ecx, DWORD PTR [eax+ecx*4]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN207@pop_vertex
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN206@pop_vertex
$LN207@pop_vertex:
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+24]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN206@pop_vertex
	xor	eax, 134217728				; 08000000H
$LN206@pop_vertex:
	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN213@pop_vertex
	mov	DWORD PTR _bo1$[ebp], 0
	jmp	SHORT $LN210@pop_vertex
$LN213@pop_vertex:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN212@pop_vertex
	mov	DWORD PTR _bo1$[ebp], 0
	jmp	SHORT $LN210@pop_vertex
$LN212@pop_vertex:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN211@pop_vertex
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [edi+ebx+784]
	mov	ecx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _bo1$[ebp], ecx
	jmp	SHORT $LN210@pop_vertex
$LN211@pop_vertex:
	mov	ecx, DWORD PTR [edi+ebx+784]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR _bo1$[ebp], eax
$LN210@pop_vertex:

; 1753 :     bo2 = get_facet_body(get_fe_facet(cinfo->felist[cinfo->cell[othercell2].festart]));

	mov	ecx, DWORD PTR _othercell2$[ebp]
	mov	eax, DWORD PTR _cinfo$GSCopy$[ebp]
	shl	ecx, 5
	mov	ecx, DWORD PTR [ecx+eax+12]
	mov	eax, DWORD PTR tv5191[ebp]
	mov	ecx, DWORD PTR [eax+ecx*4]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN217@pop_vertex
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN216@pop_vertex
$LN217@pop_vertex:
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+24]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN216@pop_vertex
	xor	eax, 134217728				; 08000000H
$LN216@pop_vertex:
	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN223@pop_vertex
	xor	eax, eax
	jmp	SHORT $LN220@pop_vertex
$LN223@pop_vertex:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN222@pop_vertex
	xor	eax, eax
	jmp	SHORT $LN220@pop_vertex
$LN222@pop_vertex:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN221@pop_vertex
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [edi+ebx+784]
	mov	eax, DWORD PTR [ecx+eax+4]
	jmp	SHORT $LN220@pop_vertex
$LN221@pop_vertex:
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [edi+ebx+784]
	mov	eax, DWORD PTR [ecx+eax]
$LN220@pop_vertex:

; 1754 :     if ( !equal_id(bs2,bo1) )

	mov	ecx, DWORD PTR _bo1$[ebp]
	cmp	DWORD PTR _bs2$[ebp], ecx
	je	SHORT $LN753@pop_vertex

; 1755 :     { /* have to flip sides */
; 1756 :       int tmp;
; 1757 :       body_id btmp;
; 1758 :       if ( !equal_id(bs1,bo2) )

	cmp	DWORD PTR _bs1$[ebp], eax

; 1759 :       { /* no matching sides.  Shouldn't happen. */
; 1760 :         return 0;

	jne	$LN939@pop_vertex

; 1761 :       }
; 1762 :       tmp = othercell; othercell = othercell2; othercell2 = tmp;

	mov	eax, DWORD PTR _othercell2$[ebp]

; 1763 :       btmp = bs1; bs1 = bs2; bs2 = btmp;
; 1764 :       tmp = samecell; samecell = samecell2; samecell2 = tmp;

	mov	ecx, DWORD PTR _samecell2$[ebp]
	mov	DWORD PTR _othercell$90053[ebp], eax
	mov	DWORD PTR _samecell$90052[ebp], ecx
$LN753@pop_vertex:

; 1765 :       btmp = bo1; bo1 = bo2; bo2 = btmp;
; 1766 :     }
; 1767 :       
; 1768 :     /* test bodies to see if we want septum */
; 1769 :     fe_1 = cinfo->felist[cinfo->cell[samecell].festart];

	mov	eax, DWORD PTR _samecell$90052[ebp]
	mov	ecx, DWORD PTR tv5191[ebp]
	shl	eax, 5
	add	eax, DWORD PTR _cinfo$GSCopy$[ebp]
	mov	DWORD PTR tv5180[ebp], eax
	mov	eax, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx+eax*4]

; 1770 :     f_1  = get_fe_facet(fe_1);

	test	eax, 268435456				; 10000000H
	jne	SHORT $LN227@pop_vertex
	mov	esi, DWORD PTR _NULLFACET
	jmp	SHORT $LN228@pop_vertex
$LN227@pop_vertex:
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [ecx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN226@pop_vertex
	xor	ecx, 134217728				; 08000000H
$LN226@pop_vertex:
	mov	esi, ecx
$LN228@pop_vertex:

; 1771 :     fe_2 = cinfo->felist[cinfo->cell[othercell].festart];

	mov	eax, DWORD PTR _othercell$90053[ebp]
	mov	ecx, DWORD PTR tv5191[ebp]
	shl	eax, 5
	add	eax, DWORD PTR _cinfo$GSCopy$[ebp]
	mov	DWORD PTR tv5250[ebp], eax
	mov	eax, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx+eax*4]

; 1772 :     f_2  = get_fe_facet(fe_2);

	test	eax, 268435456				; 10000000H
	jne	SHORT $LN231@pop_vertex
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN232@pop_vertex
$LN231@pop_vertex:
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [ecx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN230@pop_vertex
	xor	ecx, 134217728				; 08000000H
$LN230@pop_vertex:
	mov	eax, ecx
$LN232@pop_vertex:

; 1773 :     b_1 = get_facet_body(f_1);

	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN237@pop_vertex
	xor	ebx, ebx
	jmp	SHORT $LN234@pop_vertex
$LN237@pop_vertex:
	test	esi, 268435456				; 10000000H
	jne	SHORT $LN236@pop_vertex
	xor	ebx, ebx
	jmp	SHORT $LN234@pop_vertex
$LN236@pop_vertex:
	mov	ebx, DWORD PTR _web+236
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	mov	ebx, DWORD PTR _dymem
	mov	edi, DWORD PTR [edi+ebx+784]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN235@pop_vertex
	mov	ebx, DWORD PTR [ecx+edi+4]
	jmp	SHORT $LN931@pop_vertex
$LN235@pop_vertex:
	mov	ebx, DWORD PTR [ecx+edi]
$LN931@pop_vertex:
	mov	edi, DWORD PTR _web+328
$LN234@pop_vertex:

; 1774 :     b_2 = get_facet_body(inverse_id(f_2));

	xor	eax, 134217728				; 08000000H
	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN243@pop_vertex
	xor	edi, edi
	jmp	SHORT $LN240@pop_vertex
$LN243@pop_vertex:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN242@pop_vertex
	xor	edi, edi
	jmp	SHORT $LN240@pop_vertex
$LN242@pop_vertex:
	mov	ecx, DWORD PTR _web+236
	test	eax, 134217728				; 08000000H
	je	SHORT $LN241@pop_vertex
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [edi+ecx+784]
	mov	edi, DWORD PTR [eax+ecx+4]
	jmp	SHORT $LN240@pop_vertex
$LN241@pop_vertex:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [edi+ecx+784]
	mov	edi, DWORD PTR [eax+ecx]
$LN240@pop_vertex:

; 1775 :     if ( (septum_flag != 0) && (!valid_id(b_1) || !valid_id(b_2) || !equal_id(b_1,b_2)) )

	cmp	DWORD PTR _septum_flag, 0
	je	SHORT $LN94@pop_vertex
	test	ebx, 268435456				; 10000000H
	je	SHORT $LN93@pop_vertex
	test	edi, 268435456				; 10000000H
	je	SHORT $LN93@pop_vertex
	cmp	ebx, edi
	je	SHORT $LN94@pop_vertex
$LN93@pop_vertex:

; 1776 :     { middleflag = 1;
; 1777 :       f_septum = dup_facet(f_1);

	push	esi
	mov	DWORD PTR _middleflag$90068[ebp], 1
	call	_dup_facet
	mov	esi, eax

; 1778 :       set_original(f_septum,NULLID);

	mov	edx, esi
	shr	edx, 29					; 0000001dH
	imul	edx, 112				; 00000070H
	mov	ecx, DWORD PTR _web[edx+12]
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]

; 1779 :       set_facet_body(f_septum,b_1);

	push	ebx
	push	esi
	mov	DWORD PTR _f_septum$90066[ebp], esi
	mov	DWORD PTR [edx+20], 0
	call	_set_facet_body

; 1780 :       set_facet_body(inverse_id(f_septum),b_2);

	push	edi
	xor	esi, 134217728				; 08000000H
	push	esi
	call	_set_facet_body
	mov	edx, DWORD PTR _web+460
	add	esp, 20					; 00000014H
$LN94@pop_vertex:

; 1781 :     }
; 1782 : 
; 1783 :     /* now find closest rays on opposite cells */
; 1784 :     bestcosa = -1.0;
; 1785 :     for ( i = 0 ; i < cinfo->cell[samecell].fenum ; i++ )

	mov	eax, DWORD PTR tv5180[ebp]
	fld	QWORD PTR __real@bff0000000000000
	cmp	DWORD PTR [eax+20], 0
	fstp	QWORD PTR _bestcosa$90047[ebp]
	mov	DWORD PTR _i$[ebp], 0
	jle	$LN90@pop_vertex
	npad	10
$LL92@pop_vertex:

; 1786 :     { REAL edge1[MAXCOORD],edge2[MAXCOORD];
; 1787 :       facetedge_id ray1 = get_prev_edge(cinfo->felist[cinfo->cell[samecell].festart+i]);

	mov	ecx, DWORD PTR tv5180[ebp]
	mov	eax, DWORD PTR [ecx+12]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cinfo$GSCopy$[ebp]
	mov	ecx, DWORD PTR [ecx+16808]
	mov	eax, DWORD PTR [ecx+eax*4]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN247@pop_vertex
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edi, DWORD PTR [eax+32]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN246@pop_vertex
$LN247@pop_vertex:
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edi, DWORD PTR [ecx+28]
$LN246@pop_vertex:

; 1788 :       get_fe_side(ray1,edge1);

	lea	eax, DWORD PTR _edge1$90139[ebp]
	push	eax
	mov	ecx, edi
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	eax, edi
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]
	push	eax
	call	_get_edge_side

; 1789 :       for ( j = 0 ; j < cinfo->cell[othercell].fenum ; j++ )

	mov	ecx, DWORD PTR tv5250[ebp]
	xor	ebx, ebx
	add	esp, 8
	cmp	DWORD PTR [ecx+20], ebx
	jle	$LN91@pop_vertex
	npad	7
$LL89@pop_vertex:

; 1790 :       { facetedge_id ray2 = get_prev_edge(cinfo->felist[cinfo->cell[othercell].festart+j]);

	mov	edx, DWORD PTR tv5250[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _cinfo$GSCopy$[ebp]
	mov	edx, DWORD PTR [ecx+16808]
	mov	ecx, DWORD PTR _web+460
	add	eax, ebx
	mov	eax, DWORD PTR [edx+eax*4]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN253@pop_vertex
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	esi, DWORD PTR [eax+32]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN252@pop_vertex
$LN253@pop_vertex:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	esi, DWORD PTR [edx+28]
$LN252@pop_vertex:

; 1791 :         get_fe_side(ray2,edge2);

	lea	eax, DWORD PTR _edge2$90140[ebp]
	mov	edx, esi
	push	eax
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, esi
	and	ecx, 134217728				; 08000000H
	xor	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_get_edge_side

; 1792 :         cosa = dot(edge1,edge2,SDIM)/sqrt(dot(edge1,edge1,SDIM)*
; 1793 :                      dot(edge2,edge2,SDIM));

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _edge2$90140[ebp]
	push	eax
	lea	ecx, DWORD PTR _edge1$90139[ebp]
	push	ecx
	call	_dot
	fstp	QWORD PTR tv7641[ebp]
	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _edge2$90140[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fstp	QWORD PTR tv7639[ebp]
	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _edge1$90139[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fmul	QWORD PTR tv7639[ebp]
	add	esp, 44					; 0000002cH
	call	__CIsqrt
	fdivr	QWORD PTR tv7641[ebp]

; 1794 :         if ( cosa > bestcosa )

	fld	QWORD PTR _bestcosa$90047[ebp]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN875@pop_vertex

; 1795 :         { bestray1 = ray1; bestray2 = ray2; bestcosa = cosa; }

	fstp	QWORD PTR _bestcosa$90047[ebp]
	mov	DWORD PTR _bestray1$90048[ebp], edi
	mov	DWORD PTR _bestray2$90049[ebp], esi
	jmp	SHORT $LN88@pop_vertex
$LN875@pop_vertex:
	fstp	ST(0)
$LN88@pop_vertex:

; 1789 :       for ( j = 0 ; j < cinfo->cell[othercell].fenum ; j++ )

	mov	edx, DWORD PTR tv5250[ebp]
	inc	ebx
	cmp	ebx, DWORD PTR [edx+20]
	jl	$LL89@pop_vertex
$LN91@pop_vertex:

; 1781 :     }
; 1782 : 
; 1783 :     /* now find closest rays on opposite cells */
; 1784 :     bestcosa = -1.0;
; 1785 :     for ( i = 0 ; i < cinfo->cell[samecell].fenum ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR tv5180[ebp]
	mov	edx, DWORD PTR _web+460
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR [ecx+20]
	jl	$LL92@pop_vertex
$LN90@pop_vertex:

; 1796 :       }
; 1797 :     } 
; 1798 :     /* get lower number of sides in first cone */
; 1799 :     if ( cinfo->cell[samecell].fenum > cinfo->cell[othercell].fenum )

	mov	eax, DWORD PTR tv5180[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR tv5250[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jle	SHORT $LN747@pop_vertex

; 1800 :     { int tmp = samecell;
; 1801 :       facetedge_id fetmp = bestray1;

	mov	ecx, DWORD PTR _bestray1$90048[ebp]

; 1802 :       samecell = othercell;

	mov	eax, DWORD PTR _othercell$90053[ebp]

; 1803 :       othercell = tmp;
; 1804 :       bestray1 = bestray2;

	mov	esi, DWORD PTR _bestray2$90049[ebp]

; 1805 :       bestray2 = fetmp;
; 1806 :       flipflag = 1;

	mov	DWORD PTR _flipflag$[ebp], 1
	jmp	SHORT $LN85@pop_vertex
$LN747@pop_vertex:
	mov	esi, DWORD PTR _bestray1$90048[ebp]
	mov	eax, DWORD PTR _samecell$90052[ebp]
	mov	ecx, DWORD PTR _bestray2$90049[ebp]
$LN85@pop_vertex:

; 1807 :     }
; 1808 : 
; 1809 :     /* go around, inserting edges */
; 1810 :     fe_1 = bestray1;
; 1811 :     fe_2 = bestray2;
; 1812 :     prev_fe3 = NULLID;
; 1813 :     for ( j = 0 ; j < cinfo->cell[samecell].fenum ; j++ )

	shl	eax, 5
	mov	DWORD PTR _fe_1$90050[ebp], esi
	mov	esi, DWORD PTR _cinfo$GSCopy$[ebp]
	lea	eax, DWORD PTR [eax+esi+20]
	mov	DWORD PTR _fe_2$90051[ebp], ecx
	xor	ecx, ecx
	mov	DWORD PTR tv5181[ebp], eax
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _prev_fe3$90070[ebp], ecx
	mov	DWORD PTR _j$[ebp], ecx
	mov	DWORD PTR tv5183[ebp], eax
	cmp	eax, ecx
	jle	$LN82@pop_vertex
	npad	10
$LL718@pop_vertex:

; 1814 :     { edge_id e_1,e_1next,e_2next,newe;
; 1815 :       facetedge_id fe_1next,fe_2next,newfe1,newfe2;
; 1816 :       facet_id f_1,f_2;
; 1817 :       vertex_id newv;
; 1818 :       REAL *x;
; 1819 : 
; 1820 :       e_1 = get_fe_edge(fe_1);

	mov	ecx, DWORD PTR _fe_1$90050[ebp]
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+eax*4]
	mov	eax, ecx
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [esi+20]
	mov	DWORD PTR _e_1$90153[ebp], eax

; 1821 :       fe_1next = inverse_id(get_prev_edge(fe_1)); 

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN261@pop_vertex
	mov	eax, DWORD PTR [esi+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN260@pop_vertex
$LN261@pop_vertex:
	mov	eax, DWORD PTR [esi+28]
$LN260@pop_vertex:
	xor	eax, 134217728				; 08000000H
	mov	ebx, eax

; 1822 :       e_1next = get_fe_edge(fe_1next);

	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv5644[ebp], eax
	mov	eax, DWORD PTR [eax+edx]
	mov	edi, ebx
	and	edi, 134217728				; 08000000H
	xor	edi, DWORD PTR [eax+20]
	mov	DWORD PTR tv5647[ebp], eax

; 1823 :       fe_2next = inverse_id(get_prev_edge(fe_2)); 

	mov	eax, DWORD PTR _fe_2$90051[ebp]
	mov	DWORD PTR _fe_1next$90157[ebp], ebx
	test	eax, 134217728				; 08000000H
	je	SHORT $LN267@pop_vertex
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [ecx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN266@pop_vertex
$LN267@pop_vertex:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]
$LN266@pop_vertex:
	xor	eax, 134217728				; 08000000H

; 1824 :       e_2next = get_fe_edge(fe_2next);

	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	DWORD PTR tv5664[ebp], ecx
	mov	ecx, DWORD PTR [ecx+edx]
	mov	esi, eax
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [ecx+20]

; 1825 :       f_1 = get_fe_facet(fe_1next);

	mov	edx, ebx
	shr	edx, 28					; 0000001cH
	and	edx, 1
	mov	DWORD PTR _fe_2next$90158[ebp], eax
	mov	DWORD PTR tv5674[ebp], edx
	jne	SHORT $LN273@pop_vertex
	mov	edx, DWORD PTR _NULLFACET
	jmp	SHORT $LN272@pop_vertex
$LN273@pop_vertex:
	mov	edx, DWORD PTR tv5647[ebp]
	mov	edx, DWORD PTR [edx+24]
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN272@pop_vertex
	xor	edx, 134217728				; 08000000H
$LN272@pop_vertex:
	mov	DWORD PTR _f_1$90161[ebp], edx

; 1826 :       f_2 = get_fe_facet(fe_2next);

	mov	edx, eax
	shr	edx, 28					; 0000001cH
	and	edx, 1
	mov	DWORD PTR tv5684[ebp], edx
	jne	SHORT $LN277@pop_vertex
	mov	eax, DWORD PTR _NULLFACET
	mov	DWORD PTR _f_2$90162[ebp], eax
	jmp	SHORT $LN278@pop_vertex
$LN277@pop_vertex:
	mov	ecx, DWORD PTR [ecx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN276@pop_vertex
	xor	ecx, 134217728				; 08000000H
$LN276@pop_vertex:
	mov	DWORD PTR _f_2$90162[ebp], ecx
$LN278@pop_vertex:

; 1827 :       if ( j < cinfo->cell[samecell].fenum - 1 )

	mov	ecx, DWORD PTR tv5183[ebp]
	dec	ecx
	cmp	DWORD PTR _j$[ebp], ecx
	jge	SHORT $LN81@pop_vertex

; 1828 :       { newv = dup_vertex(v_id);

	mov	edx, DWORD PTR _v_id$GSCopy$[ebp]
	push	edx
	call	_dup_vertex
	mov	ebx, eax

; 1829 :         remove_vertex_edge(v_id,e_1next);

	mov	eax, DWORD PTR _v_id$GSCopy$[ebp]
	push	edi
	push	eax
	call	_remove_vertex_edge

; 1830 :         remove_vertex_edge(v_id,e_2next);

	mov	ecx, DWORD PTR _v_id$GSCopy$[ebp]
	push	esi
	push	ecx
	call	_remove_vertex_edge

; 1831 :         set_edge_tailv(e_1next,newv);

	push	ebx
	push	edi
	call	_set_edge_tailv

; 1832 :         set_edge_tailv(e_2next,newv);

	push	ebx
	push	esi
	call	_set_edge_tailv
	add	esp, 36					; 00000024H
	jmp	SHORT $LN80@pop_vertex
$LN81@pop_vertex:

; 1833 :       }
; 1834 :       else newv = v_id;

	mov	ebx, DWORD PTR _v_id$GSCopy$[ebp]
$LN80@pop_vertex:

; 1835 :       get_edge_side(e_1next,side1);

	lea	edx, DWORD PTR _side1$90062[ebp]
	push	edx
	push	edi
	call	_get_edge_side

; 1836 :       get_edge_side(e_2next,side2);

	lea	eax, DWORD PTR _side2$90063[ebp]
	push	eax
	push	esi
	call	_get_edge_side

; 1837 :       x = get_coord(newv);

	mov	edx, DWORD PTR _web+12
	mov	eax, DWORD PTR _web+104
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _dymem
	add	ecx, DWORD PTR [eax+edx+64]

; 1838 :       for ( k = 0 ; k < SDIM ; k++ )

	xor	eax, eax
	add	esp, 16					; 00000010H
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN77@pop_vertex
	fld	QWORD PTR __real@3fd0000000000000
$LN79@pop_vertex:

; 1839 :         x[k] += 0.25*(side1[k]+side2[k]);

	fld	QWORD PTR _side2$90063[ebp+eax*8]
	inc	eax
	fadd	QWORD PTR _side1$90062[ebp+eax*8-8]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [ecx+eax*8-8]
	fstp	QWORD PTR [ecx+eax*8-8]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN79@pop_vertex

; 1838 :       for ( k = 0 ; k < SDIM ; k++ )

	mov	edx, DWORD PTR _dymem
	fstp	ST(0)
$LN77@pop_vertex:

; 1840 :       newe = new_edge(get_edge_tailv(e_1),newv,e_1);

	mov	eax, DWORD PTR _e_1$90153[ebp]
	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN281@pop_vertex
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _web+216
	add	eax, DWORD PTR [ecx+edx+304]
	mov	edx, DWORD PTR _web+636
	mov	eax, DWORD PTR [eax+edx*4]
	jmp	SHORT $LN280@pop_vertex
$LN281@pop_vertex:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _web+216
	mov	edx, DWORD PTR [ecx+edx+304]
	mov	eax, DWORD PTR [eax+edx]
$LN280@pop_vertex:
	mov	ecx, DWORD PTR _e_1$90153[ebp]
	push	ecx
	push	ebx
	push	eax
	call	_new_edge

; 1841 :       newfe1 = new_facetedge(f_1,newe); 

	mov	edx, DWORD PTR _f_1$90161[ebp]
	mov	esi, eax
	push	esi
	push	edx
	call	_new_facetedge
	mov	edi, eax

; 1842 :       newfe2 = new_facetedge(f_2,newe); 

	mov	eax, DWORD PTR _f_2$90162[ebp]
	push	esi
	push	eax
	call	_new_facetedge
	mov	ebx, eax
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _newfe2$90160[ebp], ebx

; 1843 :       set_edge_fe(newe,newfe1);

	mov	eax, edi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN733@pop_vertex
	xor	eax, 134217728				; 08000000H
$LN733@pop_vertex:
	mov	edx, DWORD PTR _web+124
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax

; 1844 :       set_prev_facet(newfe1,newfe2);

	mov	eax, edi
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv5753[ebp], eax
	je	SHORT $LN743@pop_vertex
	test	edi, 134217728				; 08000000H
	je	SHORT $LN288@pop_vertex
	mov	ecx, DWORD PTR _web+460
	mov	edx, ebx
	xor	edx, 134217728				; 08000000H
	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+40], edx
	jmp	SHORT $LN287@pop_vertex
$LN288@pop_vertex:
	mov	edx, DWORD PTR _web+460
	mov	ecx, edi
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [eax+36], ebx
$LN287@pop_vertex:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN743@pop_vertex:

; 1845 :       set_next_facet(newfe2,newfe1);

	mov	eax, ebx
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv5769[ebp], eax
	je	SHORT $LN292@pop_vertex
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN293@pop_vertex
	mov	eax, DWORD PTR _web+460
	mov	ecx, edi
	xor	ecx, 134217728				; 08000000H
	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [edx+36], ecx
	jmp	SHORT $LN292@pop_vertex
$LN293@pop_vertex:
	mov	ecx, DWORD PTR _web+460
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx+40], edi
$LN292@pop_vertex:

; 1846 :       set_prev_facet(newfe2,newfe1);

	cmp	DWORD PTR tv5769[ebp], 0
	je	SHORT $LN300@pop_vertex
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN298@pop_vertex
	mov	edx, DWORD PTR _web+460
	mov	eax, edi
	xor	eax, 134217728				; 08000000H
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+40], eax
	jmp	SHORT $LN297@pop_vertex
$LN298@pop_vertex:
	mov	eax, DWORD PTR _web+460
	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [ecx+36], edi
$LN297@pop_vertex:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN300@pop_vertex:

; 1847 :       set_next_facet(newfe1,newfe2);

	cmp	DWORD PTR tv5753[ebp], 0
	je	SHORT $LN302@pop_vertex
	test	edi, 134217728				; 08000000H
	je	SHORT $LN303@pop_vertex
	mov	ecx, DWORD PTR _web+460
	mov	edx, ebx
	xor	edx, 134217728				; 08000000H
	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+36], edx
	jmp	SHORT $LN302@pop_vertex
$LN303@pop_vertex:
	mov	edx, DWORD PTR _web+460
	mov	ecx, edi
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [eax+40], ebx
$LN302@pop_vertex:

; 1848 : 
; 1849 :       if ( middleflag )

	cmp	DWORD PTR _middleflag$90068[ebp], 0
	je	$LN734@pop_vertex

; 1850 :       { newfe3 = new_facetedge(f_septum,newe);

	mov	ecx, DWORD PTR _f_septum$90066[ebp]
	push	esi
	push	ecx
	call	_new_facetedge
	mov	esi, eax

; 1851 :         if ( flipflag )
; 1852 :         { 
; 1853 :           set_prev_facet(newfe3,newfe2);

	mov	ecx, esi
	add	esp, 8
	shr	ecx, 28					; 0000001cH
	cmp	DWORD PTR _flipflag$[ebp], 0
	je	$LN75@pop_vertex
	and	ecx, 1
	mov	DWORD PTR tv5788[ebp], ecx
	je	SHORT $LN744@pop_vertex
	test	esi, 134217728				; 08000000H
	je	SHORT $LN308@pop_vertex
	mov	ecx, DWORD PTR _web+460
	mov	edx, ebx
	xor	edx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR tv5788[ebp]
	mov	DWORD PTR [eax+40], edx
	jmp	SHORT $LN307@pop_vertex
$LN308@pop_vertex:
	mov	eax, DWORD PTR _web+460
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [edx+36], ebx
$LN307@pop_vertex:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN744@pop_vertex:

; 1854 :           set_next_facet(newfe2,newfe3);

	cmp	DWORD PTR tv5769[ebp], 0
	je	SHORT $LN312@pop_vertex
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN313@pop_vertex
	mov	edx, DWORD PTR _web+460
	mov	eax, esi
	xor	eax, 134217728				; 08000000H
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR tv5788[ebp]
	jmp	SHORT $LN312@pop_vertex
$LN313@pop_vertex:
	mov	eax, DWORD PTR _web+460
	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [edx+40], esi
$LN312@pop_vertex:

; 1855 :           set_prev_facet(newfe1,newfe3);

	cmp	DWORD PTR tv5753[ebp], 0
	je	SHORT $LN320@pop_vertex
	test	edi, 134217728				; 08000000H
	je	SHORT $LN318@pop_vertex
	mov	edx, DWORD PTR _web+460
	mov	eax, esi
	xor	eax, 134217728				; 08000000H
	mov	ecx, edi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+40], eax
	mov	ecx, DWORD PTR tv5788[ebp]
	jmp	SHORT $LN317@pop_vertex
$LN318@pop_vertex:
	mov	eax, DWORD PTR _web+460
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [edx+36], esi
$LN317@pop_vertex:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN320@pop_vertex:

; 1856 :           set_next_facet(newfe3,newfe1);

	test	ecx, ecx
	je	$LN342@pop_vertex
	test	esi, 134217728				; 08000000H
	je	SHORT $LN323@pop_vertex
	mov	eax, edi
	jmp	$LN932@pop_vertex
$LN323@pop_vertex:
	mov	eax, DWORD PTR _web+460
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [ecx+40], edi

; 1857 :         }
; 1858 :         else

	jmp	$LN342@pop_vertex
$LN75@pop_vertex:

; 1859 :         {
; 1860 :           set_prev_facet(newfe3,newfe1);

	and	ecx, 1
	mov	DWORD PTR tv5788[ebp], ecx
	je	SHORT $LN745@pop_vertex
	test	esi, 134217728				; 08000000H
	je	SHORT $LN328@pop_vertex
	mov	ecx, DWORD PTR _web+460
	mov	edx, edi
	xor	edx, 134217728				; 08000000H
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR tv5788[ebp]
	mov	DWORD PTR [eax+40], edx
	jmp	SHORT $LN327@pop_vertex
$LN328@pop_vertex:
	mov	eax, DWORD PTR _web+460
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [edx+36], edi
$LN327@pop_vertex:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN745@pop_vertex:

; 1861 :           set_next_facet(newfe1,newfe3);

	cmp	DWORD PTR tv5753[ebp], 0
	je	SHORT $LN332@pop_vertex
	test	edi, 134217728				; 08000000H
	je	SHORT $LN333@pop_vertex
	mov	edx, DWORD PTR _web+460
	mov	eax, esi
	xor	eax, 134217728				; 08000000H
	mov	ecx, edi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR tv5788[ebp]
	jmp	SHORT $LN332@pop_vertex
$LN333@pop_vertex:
	mov	eax, DWORD PTR _web+460
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [edx+40], esi
$LN332@pop_vertex:

; 1862 :           set_prev_facet(newfe2,newfe3);

	cmp	DWORD PTR tv5769[ebp], 0
	je	SHORT $LN340@pop_vertex
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN338@pop_vertex
	mov	edx, DWORD PTR _web+460
	mov	eax, esi
	xor	eax, 134217728				; 08000000H
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+40], eax
	mov	ecx, DWORD PTR tv5788[ebp]
	jmp	SHORT $LN337@pop_vertex
$LN338@pop_vertex:
	mov	eax, DWORD PTR _web+460
	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [edx+36], esi
$LN337@pop_vertex:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN340@pop_vertex:

; 1863 :           set_next_facet(newfe3,newfe2);

	test	ecx, ecx
	je	SHORT $LN342@pop_vertex
	test	esi, 134217728				; 08000000H
	je	SHORT $LN343@pop_vertex
	mov	eax, ebx
$LN932@pop_vertex:
	mov	edx, DWORD PTR _web+460
	xor	eax, 134217728				; 08000000H
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+36], eax
	jmp	SHORT $LN342@pop_vertex
$LN343@pop_vertex:
	mov	eax, DWORD PTR _web+460
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [ecx+40], ebx
$LN342@pop_vertex:

; 1864 :         }
; 1865 :         if ( valid_id(prev_fe3) )

	mov	eax, DWORD PTR _prev_fe3$90070[ebp]
	test	eax, 268435456				; 10000000H
	je	$LN73@pop_vertex

; 1866 :         { set_next_edge(prev_fe3,newfe3);

	test	eax, 134217728				; 08000000H
	je	SHORT $LN348@pop_vertex
	mov	ebx, DWORD PTR _web+460
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	mov	ebx, DWORD PTR _newfe2$90160[ebp]
	mov	DWORD PTR [ecx+28], edx
	jmp	SHORT $LN347@pop_vertex
$LN348@pop_vertex:
	mov	ecx, DWORD PTR _web+460
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+32], esi
$LN347@pop_vertex:

; 1867 :           set_prev_edge(newfe3,prev_fe3);

	cmp	DWORD PTR tv5788[ebp], 0
	je	SHORT $LN355@pop_vertex
	test	esi, 134217728				; 08000000H
	je	SHORT $LN353@pop_vertex
	mov	edx, DWORD PTR _web+460
	xor	eax, 134217728				; 08000000H
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+32], eax
	jmp	SHORT $LN352@pop_vertex
$LN353@pop_vertex:
	mov	ecx, DWORD PTR _web+460
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+28], eax
$LN352@pop_vertex:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax

; 1868 :           prev_fe3 = newfe3;
; 1869 :         }
; 1870 :         else

	jmp	SHORT $LN355@pop_vertex
$LN73@pop_vertex:

; 1871 :         { first_fe3 = newfe3;
; 1872 :           set_facet_fe(f_septum,first_fe3);

	mov	eax, DWORD PTR _f_septum$90066[ebp]
	push	esi
	push	eax
	mov	DWORD PTR _first_fe3$90069[ebp], esi
	call	_set_facet_fe
	add	esp, 8
$LN355@pop_vertex:

; 1873 :           prev_fe3 = newfe3;

	mov	DWORD PTR _prev_fe3$90070[ebp], esi
$LN734@pop_vertex:

; 1874 :         }
; 1875 :       }
; 1876 :       set_next_edge(newfe1,fe_1next);

	mov	ecx, DWORD PTR tv5753[ebp]
	test	ecx, ecx
	je	SHORT $LN735@pop_vertex
	test	edi, 134217728				; 08000000H
	je	SHORT $LN358@pop_vertex
	mov	edx, DWORD PTR _fe_1next$90157[ebp]
	mov	esi, DWORD PTR _web+460
	xor	edx, 134217728				; 08000000H
	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [eax+28], edx
	jmp	SHORT $LN735@pop_vertex
$LN358@pop_vertex:
	mov	eax, DWORD PTR _web+460
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR _fe_1next$90157[ebp]
	mov	DWORD PTR [edx+32], eax
$LN735@pop_vertex:

; 1877 :       set_prev_edge(fe_1next,newfe1);

	cmp	DWORD PTR tv5674[ebp], 0
	je	SHORT $LN736@pop_vertex
	test	DWORD PTR _fe_1next$90157[ebp], 134217728 ; 08000000H
	je	SHORT $LN363@pop_vertex
	mov	eax, DWORD PTR _web+460
	mov	esi, DWORD PTR tv5644[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	edx, edi
	xor	edx, 134217728				; 08000000H
	mov	DWORD PTR [eax+32], edx
	jmp	SHORT $LN362@pop_vertex
$LN363@pop_vertex:
	mov	edx, DWORD PTR _web+460
	mov	eax, DWORD PTR tv5644[ebp]
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [edx+28], edi
$LN362@pop_vertex:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN736@pop_vertex:

; 1878 :       set_prev_edge(newfe1,inverse_id(fe_1));

	mov	eax, DWORD PTR _fe_1$90050[ebp]
	xor	eax, 134217728				; 08000000H
	test	ecx, ecx
	je	SHORT $LN370@pop_vertex
	test	edi, 134217728				; 08000000H
	je	SHORT $LN368@pop_vertex
	mov	esi, DWORD PTR _web+460
	mov	ecx, eax
	xor	ecx, 134217728				; 08000000H
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [edx+32], ecx
	jmp	SHORT $LN367@pop_vertex
$LN368@pop_vertex:
	mov	edx, DWORD PTR _web+460
	mov	ecx, edi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+28], eax
$LN367@pop_vertex:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN370@pop_vertex:

; 1879 :       set_next_edge(inverse_id(fe_1),newfe1); 

	test	eax, 268435456				; 10000000H
	je	SHORT $LN762@pop_vertex
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN373@pop_vertex
	mov	edx, edi
	xor	edx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+28], edx
	jmp	SHORT $LN762@pop_vertex
$LN373@pop_vertex:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx+32], edi
$LN762@pop_vertex:

; 1880 :       set_next_edge(newfe2,fe_2next);

	cmp	DWORD PTR tv5769[ebp], 0
	mov	esi, DWORD PTR _fe_2next$90158[ebp]
	je	SHORT $LN377@pop_vertex
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN378@pop_vertex
	mov	edx, DWORD PTR _web+460
	mov	eax, esi
	xor	eax, 134217728				; 08000000H
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+28], eax
	jmp	SHORT $LN377@pop_vertex
$LN378@pop_vertex:
	mov	eax, DWORD PTR _web+460
	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [ecx+32], esi
$LN377@pop_vertex:

; 1881 :       set_prev_edge(fe_2next,newfe2);

	cmp	DWORD PTR tv5684[ebp], 0
	je	SHORT $LN738@pop_vertex
	test	esi, 134217728				; 08000000H
	je	SHORT $LN383@pop_vertex
	mov	eax, DWORD PTR _web+460
	mov	ecx, DWORD PTR tv5664[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	mov	edx, ebx
	xor	edx, 134217728				; 08000000H
	mov	DWORD PTR [eax+32], edx
	jmp	SHORT $LN382@pop_vertex
$LN383@pop_vertex:
	mov	ecx, DWORD PTR _web+460
	mov	edx, DWORD PTR tv5664[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR [eax+28], ebx
$LN382@pop_vertex:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN738@pop_vertex:

; 1882 :       set_prev_edge(newfe2,inverse_id(fe_2));

	mov	eax, DWORD PTR _fe_2$90051[ebp]
	xor	eax, 134217728				; 08000000H
	cmp	DWORD PTR tv5769[ebp], 0
	je	SHORT $LN390@pop_vertex
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN388@pop_vertex
	mov	esi, DWORD PTR _web+460
	mov	ecx, eax
	xor	ecx, 134217728				; 08000000H
	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	mov	esi, DWORD PTR _fe_2next$90158[ebp]
	mov	DWORD PTR [edx+32], ecx
	jmp	SHORT $LN387@pop_vertex
$LN388@pop_vertex:
	mov	edx, DWORD PTR _web+460
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+28], eax
$LN387@pop_vertex:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN390@pop_vertex:

; 1883 :       set_next_edge(inverse_id(fe_2),newfe2); 

	test	eax, 268435456				; 10000000H
	je	SHORT $LN392@pop_vertex
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN393@pop_vertex
	mov	edx, ebx
	xor	edx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+28], edx
	jmp	SHORT $LN392@pop_vertex
$LN393@pop_vertex:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx+32], ebx
$LN392@pop_vertex:

; 1884 :       cross_cut(newfe1,fe_1next);

	mov	eax, DWORD PTR _fe_1next$90157[ebp]
	push	eax
	push	edi
	call	_cross_cut

; 1885 :       cross_cut(newfe2,fe_2next);

	push	esi
	push	ebx
	call	_cross_cut

; 1886 : 
; 1887 :       fe_1 = get_next_facet(fe_1next);

	mov	edx, DWORD PTR _web+460
	mov	ecx, DWORD PTR tv5644[ebp]
	mov	eax, DWORD PTR [ecx+edx]
	add	esp, 16					; 00000010H
	test	DWORD PTR _fe_1next$90157[ebp], 134217728 ; 08000000H
	je	SHORT $LN398@pop_vertex
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR _fe_1$90050[ebp], eax
	jmp	SHORT $LN397@pop_vertex
$LN398@pop_vertex:
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _fe_1$90050[ebp], ecx
$LN397@pop_vertex:

; 1888 :       fe_2 = get_next_facet(fe_2next);

	mov	eax, DWORD PTR tv5664[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN402@pop_vertex
	mov	eax, DWORD PTR [ecx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN933@pop_vertex
$LN402@pop_vertex:
	mov	eax, DWORD PTR [ecx+40]
$LN933@pop_vertex:

; 1807 :     }
; 1808 : 
; 1809 :     /* go around, inserting edges */
; 1810 :     fe_1 = bestray1;
; 1811 :     fe_2 = bestray2;
; 1812 :     prev_fe3 = NULLID;
; 1813 :     for ( j = 0 ; j < cinfo->cell[samecell].fenum ; j++ )

	mov	ecx, DWORD PTR tv5181[ebp]
	mov	ecx, DWORD PTR [ecx]

; 1888 :       fe_2 = get_next_facet(fe_2next);

	mov	DWORD PTR _fe_2$90051[ebp], eax
	mov	eax, DWORD PTR _j$[ebp]
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	mov	DWORD PTR tv5183[ebp], ecx
	cmp	eax, ecx
	jl	$LL718@pop_vertex
$LN82@pop_vertex:

; 1889 :     }
; 1890 :     if ( middleflag )

	cmp	DWORD PTR _middleflag$90068[ebp], 0
	je	$LN730@pop_vertex

; 1891 :     { set_next_edge(prev_fe3,first_fe3);

	mov	ecx, DWORD PTR _prev_fe3$90070[ebp]
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN728@pop_vertex
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN406@pop_vertex
	mov	eax, DWORD PTR _first_fe3$90069[ebp]
	mov	esi, eax
	xor	esi, 134217728				; 08000000H
	mov	edi, ecx
	and	edi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+edi*4]
	mov	DWORD PTR [edx+28], esi
	mov	edx, DWORD PTR _web+460
	jmp	SHORT $LN405@pop_vertex
$LN406@pop_vertex:
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR _first_fe3$90069[ebp]
	mov	DWORD PTR [edx+32], eax
	mov	edx, DWORD PTR _web+460
	jmp	SHORT $LN405@pop_vertex
$LN728@pop_vertex:
	mov	eax, DWORD PTR _first_fe3$90069[ebp]
$LN405@pop_vertex:

; 1892 :       set_prev_edge(first_fe3,prev_fe3);

	test	eax, 268435456				; 10000000H
	je	SHORT $LN729@pop_vertex
	test	eax, 134217728				; 08000000H
	je	SHORT $LN411@pop_vertex
	xor	ecx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [eax+32], ecx
	jmp	SHORT $LN410@pop_vertex
$LN411@pop_vertex:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [edx+28], ecx
$LN410@pop_vertex:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN729@pop_vertex:

; 1893 :       if ( cinfo->cell[samecell].fenum > 3 )

	mov	eax, DWORD PTR tv5181[ebp]
	mov	eax, DWORD PTR [eax]
	cmp	eax, 3
	jle	$LN730@pop_vertex

; 1894 :         face_triangulate(f_septum,cinfo->cell[samecell].fenum);

	mov	ecx, DWORD PTR _f_septum$90066[ebp]
	push	eax
	push	ecx
	call	_face_triangulate
	add	esp, 8

; 1895 :     }
; 1896 :     return 1;

	jmp	$LN730@pop_vertex
$LN724@pop_vertex:

; 1807 :     }
; 1808 : 
; 1809 :     /* go around, inserting edges */
; 1810 :     fe_1 = bestray1;
; 1811 :     fe_2 = bestray2;
; 1812 :     prev_fe3 = NULLID;
; 1813 :     for ( j = 0 ; j < cinfo->cell[samecell].fenum ; j++ )

	fld	QWORD PTR _maxarea$[ebp]
	fld	QWORD PTR _total_area$[ebp]
$narrowcones$90111:

; 1897 : 
; 1898 :     narrowcones: ;  /* bailout if not poppable this way */
; 1899 :   }
; 1900 : 
; 1901 :   /* see if any cells are totally detachable */
; 1902 :   for ( i = 0 ; i < cinfo->cells ; i++ )

	mov	edi, DWORD PTR _cinfo$GSCopy$[ebp]
	mov	esi, DWORD PTR [edi]
	xor	edx, edx
	test	esi, esi
	jle	SHORT $LN67@pop_vertex
	lea	eax, DWORD PTR [edi+16]
$LN69@pop_vertex:

; 1903 :   { vertex_id newv;
; 1904 :     ar = cinfo->arclist + cinfo->cell[i].start;
; 1905 :     if ( (cinfo->cell[i].num != 1) || (ar->valence != 2) ) continue;

	cmp	DWORD PTR [eax], 1
	mov	ecx, DWORD PTR [eax-8]
	lea	ecx, DWORD PTR [ecx+ecx*2]
	lea	ebx, DWORD PTR [edi+ecx*4+9608]
	jne	SHORT $LN68@pop_vertex
	cmp	DWORD PTR [ebx+8], 2
	je	SHORT $LN795@pop_vertex
$LN68@pop_vertex:

; 1897 : 
; 1898 :     narrowcones: ;  /* bailout if not poppable this way */
; 1899 :   }
; 1900 : 
; 1901 :   /* see if any cells are totally detachable */
; 1902 :   for ( i = 0 ; i < cinfo->cells ; i++ )

	inc	edx
	add	eax, 32					; 00000020H
	cmp	edx, esi
	jl	SHORT $LN69@pop_vertex
$LN67@pop_vertex:

; 1915 :   }
; 1916 :  
; 1917 :   /* calculate areas of each cell */
; 1918 :   for ( i = 0 ; i < cinfo->cells ; i++ )

	fld	QWORD PTR __real@401921fb54442d18
	mov	DWORD PTR _i$[ebp], 0
	fld	QWORD PTR __real@402721fb54442d18
	test	esi, esi
	jle	$LN707@pop_vertex
	fstp	ST(2)
	mov	ebx, edi
	fstp	ST(2)
	add	ebx, 20					; 00000014H
$LL887@pop_vertex:

; 1919 :   {
; 1920 :     total_angle = 0.0;
; 1921 :     fenum = cinfo->cell[i].festart;

	mov	eax, DWORD PTR [ebx-8]
	fstp	ST(0)

; 1922 :     fe = cinfo->felist[fenum+cinfo->cell[i].fenum-1];

	mov	edx, DWORD PTR [ebx]
	fstp	ST(0)
	fldz
	add	edx, eax
	mov	DWORD PTR _fenum$[ebp], eax
	fstp	QWORD PTR _total_angle$[ebp]
	mov	eax, DWORD PTR _cinfo$GSCopy$[ebp]
	mov	ecx, DWORD PTR [eax+16808]
	mov	edi, DWORD PTR [ecx+edx*4-4]

; 1923 :     cinfo->cell[i].b_id = get_facet_body(get_fe_facet(inverse_id(fe)));

	mov	eax, edi
	xor	eax, 134217728				; 08000000H
	test	eax, 268435456				; 10000000H
	jne	$LN422@pop_vertex
	mov	eax, DWORD PTR _NULLFACET
	jmp	$LN423@pop_vertex
$LN795@pop_vertex:

; 1906 :     /* now have one */
; 1907 :     newv = dup_vertex(v_id);

	mov	edx, DWORD PTR _v_id$GSCopy$[ebp]
	fstp	ST(0)
	push	edx
	fstp	ST(0)
	call	_dup_vertex

; 1908 :     for ( j = 0 ; j < ar->num ; j++ )

	xor	edi, edi
	add	esp, 4
	mov	DWORD PTR _newv$90185[ebp], eax
	cmp	DWORD PTR [ebx+4], edi
	jle	$LN730@pop_vertex
	npad	2
$LL64@pop_vertex:

; 1909 :     { fe = cinfo->felist[ar->start+j];

	mov	ecx, DWORD PTR _cinfo$GSCopy$[ebp]
	mov	eax, DWORD PTR [ebx]
	mov	edx, DWORD PTR [ecx+16808]

; 1910 :       ray_e = get_fe_edge(get_next_edge(fe));

	mov	ecx, DWORD PTR _web+460
	add	eax, edi
	mov	eax, DWORD PTR [edx+eax*4]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN416@pop_vertex
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN415@pop_vertex
$LN416@pop_vertex:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]
$LN415@pop_vertex:
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	mov	esi, eax

; 1911 :       remove_vertex_edge(v_id,inverse_id(ray_e));

	mov	eax, DWORD PTR _v_id$GSCopy$[ebp]
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	push	edx
	push	eax
	call	_remove_vertex_edge

; 1912 :       set_edge_headv(ray_e,newv);

	mov	ecx, DWORD PTR _newv$90185[ebp]
	push	ecx
	push	esi
	call	_set_edge_headv
	inc	edi
	add	esp, 16					; 00000010H
	cmp	edi, DWORD PTR [ebx+4]
	jl	SHORT $LL64@pop_vertex

; 1913 :     }
; 1914 :     return 1;    /* safe to do only one at a time */

	jmp	$LN730@pop_vertex

; 1923 :     cinfo->cell[i].b_id = get_facet_body(get_fe_facet(inverse_id(fe)));

$LN422@pop_vertex:
	mov	ecx, DWORD PTR _web+460
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [edx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN421@pop_vertex
	xor	ecx, 134217728				; 08000000H
$LN421@pop_vertex:
	mov	eax, ecx
$LN423@pop_vertex:
	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN428@pop_vertex
	xor	eax, eax
	jmp	SHORT $LN425@pop_vertex
$LN428@pop_vertex:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN427@pop_vertex
	xor	eax, eax
	jmp	SHORT $LN425@pop_vertex
$LN427@pop_vertex:
	mov	ecx, DWORD PTR _web+236
	test	eax, 134217728				; 08000000H
	je	SHORT $LN426@pop_vertex
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax+4]
	jmp	SHORT $LN425@pop_vertex
$LN426@pop_vertex:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax]
$LN425@pop_vertex:

; 1924 :     get_fe_side(fe,side);

	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	mov	DWORD PTR [ebx+12], eax
	mov	edx, DWORD PTR _web+460
	lea	ecx, DWORD PTR _side$[ebp]
	push	ecx
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+edx]
	mov	ecx, edi
	and	ecx, 134217728				; 08000000H
	xor	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_get_edge_side

; 1925 :     get_fe_side(get_prev_edge(fe),ray);

	mov	ecx, DWORD PTR _web+460
	add	esp, 8
	test	edi, 134217728				; 08000000H
	je	SHORT $LN434@pop_vertex
	mov	edx, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN433@pop_vertex
$LN434@pop_vertex:
	mov	eax, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [eax+28]
$LN433@pop_vertex:
	lea	edx, DWORD PTR _ray$[ebp]
	push	edx
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	push	eax
	call	_get_edge_side

; 1926 :     cross_prod(ray,side,prevnormal);

	lea	edx, DWORD PTR _prevnormal$[ebp]
	push	edx
	lea	eax, DWORD PTR _side$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ray$[ebp]
	push	ecx
	call	_cross_prod

; 1927 :     prevnorm = sqrt(SDIM_dot(prevnormal,prevnormal));

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _prevnormal$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	add	esp, 32					; 00000020H
	call	__CIsqrt
	fstp	QWORD PTR _prevnorm$[ebp]

; 1928 :     for ( k = 0 ; k < cinfo->cell[i].fenum ; k++,fenum++ )

	cmp	DWORD PTR [ebx], 0
	mov	DWORD PTR _k$[ebp], 0
	jle	$LN725@pop_vertex

; 1925 :     get_fe_side(get_prev_edge(fe),ray);

	mov	edx, DWORD PTR _fenum$[ebp]
	lea	eax, DWORD PTR [edx*4]
	mov	DWORD PTR tv8056[ebp], eax
	npad	1
$LL58@pop_vertex:

; 1929 :     { 
; 1930 :       fe = cinfo->felist[fenum];

	mov	ecx, DWORD PTR _cinfo$GSCopy$[ebp]
	mov	edx, DWORD PTR [ecx+16808]
	mov	eax, DWORD PTR tv8056[ebp]
	mov	edi, DWORD PTR [eax+edx]

; 1931 :       get_fe_side(fe,side);

	mov	edx, DWORD PTR _web+460
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	lea	ecx, DWORD PTR _side$[ebp]
	push	ecx
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+edx]
	mov	ecx, edi
	and	ecx, 134217728				; 08000000H
	xor	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_get_edge_side

; 1932 :       get_fe_side(get_prev_edge(fe),ray);

	mov	ecx, DWORD PTR _web+460
	add	esp, 8
	test	edi, 134217728				; 08000000H
	je	SHORT $LN442@pop_vertex
	mov	edx, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN441@pop_vertex
$LN442@pop_vertex:
	mov	eax, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [eax+28]
$LN441@pop_vertex:
	lea	edx, DWORD PTR _ray$[ebp]
	push	edx
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	push	eax
	call	_get_edge_side

; 1933 :       cross_prod(ray,side,thisnormal);

	lea	edx, DWORD PTR _thisnormal$[ebp]
	push	edx
	lea	eax, DWORD PTR _side$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ray$[ebp]
	push	ecx
	call	_cross_prod

; 1934 :       thisnorm = sqrt(SDIM_dot(thisnormal,thisnormal));

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _thisnormal$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	add	esp, 32					; 00000020H
	call	__CIsqrt
	fstp	QWORD PTR _thisnorm$[ebp]

; 1935 :       cosdef = SDIM_dot(prevnormal,thisnormal)/prevnorm/thisnorm;

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _thisnormal$[ebp]
	push	eax
	lea	ecx, DWORD PTR _prevnormal$[ebp]
	push	ecx
	call	_dot
	fdiv	QWORD PTR _prevnorm$[ebp]
	add	esp, 12					; 0000000cH
	fdiv	QWORD PTR _thisnorm$[ebp]

; 1936 :       if ( cosdef > 1.0 ) angle = 0.0;

	fld1
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN55@pop_vertex
	fstp	ST(0)
	fldz
	jmp	SHORT $LN934@pop_vertex
$LN55@pop_vertex:

; 1937 :       else if ( cosdef < -1.0 ) angle = M_PI;

	fld	QWORD PTR __real@bff0000000000000
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN53@pop_vertex
	fstp	ST(0)
	fld	QWORD PTR __real@400921fb54442d18
	jmp	SHORT $LN934@pop_vertex
$LN53@pop_vertex:

; 1938 :       else angle = acos(cosdef);

	call	__CIacos
$LN934@pop_vertex:

; 1939 :       if ( SDIM_dot(side,prevnormal) > 0.0 )

	mov	edx, DWORD PTR _web+616
	fstp	QWORD PTR _angle$[ebp]
	push	edx
	lea	eax, DWORD PTR _prevnormal$[ebp]
	push	eax
	lea	ecx, DWORD PTR _side$[ebp]
	push	ecx
	call	_dot
	fcomp	QWORD PTR __real@0000000000000000
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN51@pop_vertex

; 1940 :          total_angle += angle; 

	fld	QWORD PTR _angle$[ebp]
	fadd	QWORD PTR _total_angle$[ebp]

; 1941 :       else

	jmp	SHORT $LN935@pop_vertex
$LN51@pop_vertex:

; 1942 :          total_angle -= angle;   /* in case cell not convex */

	fld	QWORD PTR _total_angle$[ebp]
	fsub	QWORD PTR _angle$[ebp]
$LN935@pop_vertex:
	mov	eax, DWORD PTR _k$[ebp]
	fstp	QWORD PTR _total_angle$[ebp]

; 1943 : 
; 1944 :       /* set up for next loop */
; 1945 :       prevnorm = thisnorm;

	fld	QWORD PTR _thisnorm$[ebp]
	add	DWORD PTR tv8056[ebp], 4
	inc	eax
	fstp	QWORD PTR _prevnorm$[ebp]

; 1946 :       memcpy((char *)prevnormal,(char *)thisnormal,sizeof(prevnormal));

	mov	ecx, 12					; 0000000cH
	lea	esi, DWORD PTR _thisnormal$[ebp]
	lea	edi, DWORD PTR _prevnormal$[ebp]
	rep movsd
	mov	DWORD PTR _k$[ebp], eax
	cmp	eax, DWORD PTR [ebx]
	jl	$LL58@pop_vertex
$LN725@pop_vertex:

; 1947 :     }
; 1948 : 
; 1949 :     cinfo->cell[i].area = 2*M_PI - total_angle;

	fld	QWORD PTR __real@401921fb54442d18
	mov	eax, DWORD PTR _i$[ebp]
	fld	QWORD PTR _total_angle$[ebp]
	mov	edx, DWORD PTR _cinfo$GSCopy$[ebp]
	fsubr	ST(0), ST(1)
	inc	eax
	add	ebx, 32					; 00000020H
	mov	DWORD PTR _i$[ebp], eax
	fst	QWORD PTR [ebx-28]

; 1950 :     total_area += cinfo->cell[i].area;

	fadd	QWORD PTR _total_area$[ebp]
	fst	QWORD PTR _total_area$[ebp]
	cmp	eax, DWORD PTR [edx]
	jl	$LL887@pop_vertex

; 1951 :   }                  
; 1952 : 
; 1953 :   /* kludge to adjust for 2*pi ambiguity in turning angle that can
; 1954 :      affect badly shaped cells */
; 1955 :   while ( total_area > 4*M_PI + 1 )

	fld	QWORD PTR __real@402b21fb54442d18
	fcom	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	$LN890@pop_vertex
	fld	QWORD PTR __real@c6293e5939a08cea
	jmp	SHORT $LN49@pop_vertex
$LN921@pop_vertex:
	fxch	ST(2)
$LN49@pop_vertex:

; 1957 :     REAL maxa = -1e30;
; 1958 :     for ( i = 0 ; i < cinfo->cells ; i++ )

	mov	edx, DWORD PTR _cinfo$GSCopy$[ebp]
	fld	ST(0)
	mov	edi, DWORD PTR [edx]
	or	esi, -1
	xor	ecx, ecx
	cmp	edi, 4
	jl	SHORT $LC665@pop_vertex

; 1956 :   { int maxi = -1; 

	lea	ebx, DWORD PTR [edi-3]
	add	edx, 56					; 00000038H

; 1957 :     REAL maxa = -1e30;
; 1958 :     for ( i = 0 ; i < cinfo->cells ; i++ )

$LN670@pop_vertex:

; 1959 :      if ( cinfo->cell[i].area > maxa )

	fcom	QWORD PTR [edx-32]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN666@pop_vertex

; 1960 :      { maxi = i; maxa = cinfo->cell[i].area; }

	fstp	ST(0)
	mov	esi, ecx
	fld	QWORD PTR [edx-32]
$LN666@pop_vertex:

; 1959 :      if ( cinfo->cell[i].area > maxa )

	fcom	QWORD PTR [edx]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN667@pop_vertex

; 1960 :      { maxi = i; maxa = cinfo->cell[i].area; }

	fstp	ST(0)
	lea	esi, DWORD PTR [ecx+1]
	fld	QWORD PTR [edx]
$LN667@pop_vertex:

; 1959 :      if ( cinfo->cell[i].area > maxa )

	fcom	QWORD PTR [edx+32]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN668@pop_vertex

; 1960 :      { maxi = i; maxa = cinfo->cell[i].area; }

	fstp	ST(0)
	lea	esi, DWORD PTR [ecx+2]
	fld	QWORD PTR [edx+32]
$LN668@pop_vertex:

; 1959 :      if ( cinfo->cell[i].area > maxa )

	fcom	QWORD PTR [edx+64]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN669@pop_vertex

; 1960 :      { maxi = i; maxa = cinfo->cell[i].area; }

	fstp	ST(0)
	lea	esi, DWORD PTR [ecx+3]
	fld	QWORD PTR [edx+64]
$LN669@pop_vertex:

; 1956 :   { int maxi = -1; 

	add	ecx, 4
	sub	edx, -128				; ffffff80H
	cmp	ecx, ebx
	jl	SHORT $LN670@pop_vertex
	mov	edx, DWORD PTR _cinfo$GSCopy$[ebp]
$LC665@pop_vertex:

; 1957 :     REAL maxa = -1e30;
; 1958 :     for ( i = 0 ; i < cinfo->cells ; i++ )

	cmp	ecx, edi
	jge	SHORT $LN912@pop_vertex
	mov	eax, ecx
	shl	eax, 5
	lea	edx, DWORD PTR [eax+edx+24]
$LC47@pop_vertex:

; 1959 :      if ( cinfo->cell[i].area > maxa )

	fcom	QWORD PTR [edx]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN46@pop_vertex

; 1960 :      { maxi = i; maxa = cinfo->cell[i].area; }

	fstp	ST(0)
	mov	esi, ecx
	fld	QWORD PTR [edx]
$LN46@pop_vertex:

; 1957 :     REAL maxa = -1e30;
; 1958 :     for ( i = 0 ; i < cinfo->cells ; i++ )

	inc	ecx
	add	edx, 32					; 00000020H
	cmp	ecx, edi
	jl	SHORT $LC47@pop_vertex
	mov	edx, DWORD PTR _cinfo$GSCopy$[ebp]
$LN912@pop_vertex:
	fstp	ST(0)

; 1961 :     cinfo->cell[maxi].area -= 2*M_PI;

	shl	esi, 5
	fld	QWORD PTR [esi+edx+24]
	lea	esi, DWORD PTR [esi+edx+24]
	fsub	ST(0), ST(4)
	fstp	QWORD PTR [esi]

; 1962 :     total_area -= 2*M_PI;

	fxch	ST(2)
	fsub	ST(0), ST(3)
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	$LN921@pop_vertex

; 1951 :   }                  
; 1952 : 
; 1953 :   /* kludge to adjust for 2*pi ambiguity in turning angle that can
; 1954 :      affect badly shaped cells */
; 1955 :   while ( total_area > 4*M_PI + 1 )

	fstp	ST(1)
	fstp	ST(1)

; 1962 :     total_area -= 2*M_PI;

	fst	QWORD PTR _total_area$[ebp]
	jmp	SHORT $LN740@pop_vertex
$LN890@pop_vertex:
	fstp	ST(0)
$LN740@pop_vertex:

; 1963 :   }
; 1964 :   while ( total_area < 4*M_PI - 1)

	fld	QWORD PTR __real@402721fb54442d18
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN924@pop_vertex
	fld	QWORD PTR _maxarea$[ebp]
	fxch	ST(3)
	fxch	ST(1)
$LN707@pop_vertex:
	fld	QWORD PTR __real@46293e5939a08cea
	jmp	SHORT $LN43@pop_vertex
$LN827@pop_vertex:
	fxch	ST(3)
$LN43@pop_vertex:

; 1966 :     REAL mina = 1e30;
; 1967 :     for ( i = 0 ; i < cinfo->cells ; i++ )

	mov	edx, DWORD PTR _cinfo$GSCopy$[ebp]
	fld	ST(0)
	mov	edi, DWORD PTR [edx]
	or	esi, -1
	xor	ecx, ecx
	cmp	edi, 4
	jl	SHORT $LC672@pop_vertex

; 1965 :   { int mini = -1; 

	lea	ebx, DWORD PTR [edi-3]
	add	edx, 56					; 00000038H

; 1966 :     REAL mina = 1e30;
; 1967 :     for ( i = 0 ; i < cinfo->cells ; i++ )

$LN677@pop_vertex:

; 1968 :      if ( cinfo->cell[i].area < mina )

	fcom	QWORD PTR [edx-32]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN673@pop_vertex

; 1969 :      { mini = i; mina = cinfo->cell[i].area; }

	fstp	ST(0)
	mov	esi, ecx
	fld	QWORD PTR [edx-32]
$LN673@pop_vertex:

; 1968 :      if ( cinfo->cell[i].area < mina )

	fcom	QWORD PTR [edx]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN674@pop_vertex

; 1969 :      { mini = i; mina = cinfo->cell[i].area; }

	fstp	ST(0)
	lea	esi, DWORD PTR [ecx+1]
	fld	QWORD PTR [edx]
$LN674@pop_vertex:

; 1968 :      if ( cinfo->cell[i].area < mina )

	fcom	QWORD PTR [edx+32]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN675@pop_vertex

; 1969 :      { mini = i; mina = cinfo->cell[i].area; }

	fstp	ST(0)
	lea	esi, DWORD PTR [ecx+2]
	fld	QWORD PTR [edx+32]
$LN675@pop_vertex:

; 1968 :      if ( cinfo->cell[i].area < mina )

	fcom	QWORD PTR [edx+64]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN676@pop_vertex

; 1969 :      { mini = i; mina = cinfo->cell[i].area; }

	fstp	ST(0)
	lea	esi, DWORD PTR [ecx+3]
	fld	QWORD PTR [edx+64]
$LN676@pop_vertex:

; 1965 :   { int mini = -1; 

	add	ecx, 4
	sub	edx, -128				; ffffff80H
	cmp	ecx, ebx
	jl	SHORT $LN677@pop_vertex
$LC672@pop_vertex:

; 1966 :     REAL mina = 1e30;
; 1967 :     for ( i = 0 ; i < cinfo->cells ; i++ )

	cmp	ecx, edi
	jge	SHORT $LN825@pop_vertex
	mov	edx, DWORD PTR _cinfo$GSCopy$[ebp]
	mov	eax, ecx
	shl	eax, 5
	lea	edx, DWORD PTR [eax+edx+24]
$LC41@pop_vertex:

; 1968 :      if ( cinfo->cell[i].area < mina )

	fcom	QWORD PTR [edx]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN40@pop_vertex

; 1969 :      { mini = i; mina = cinfo->cell[i].area; }

	fstp	ST(0)
	mov	esi, ecx
	fld	QWORD PTR [edx]
$LN40@pop_vertex:

; 1966 :     REAL mina = 1e30;
; 1967 :     for ( i = 0 ; i < cinfo->cells ; i++ )

	inc	ecx
	add	edx, 32					; 00000020H
	cmp	ecx, edi
	jl	SHORT $LC41@pop_vertex
$LN825@pop_vertex:

; 1970 :     cinfo->cell[mini].area += 2*M_PI;

	mov	eax, DWORD PTR _cinfo$GSCopy$[ebp]
	fstp	ST(0)
	shl	esi, 5
	fld	QWORD PTR [esi+eax+24]
	lea	esi, DWORD PTR [esi+eax+24]
	fadd	ST(0), ST(3)
	fstp	QWORD PTR [esi]

; 1971 :     total_area += 2*M_PI;

	fxch	ST(3)
	fadd	ST(0), ST(2)
	fcom	ST(1)
	fnstsw	ax
	test	ah, 5
	jnp	$LN827@pop_vertex

; 1963 :   }
; 1964 :   while ( total_area < 4*M_PI - 1)

	fstp	ST(1)
	fstp	ST(2)
	fstp	ST(0)

; 1971 :     total_area += 2*M_PI;

	fst	QWORD PTR _total_area$[ebp]
	jmp	SHORT $LN42@pop_vertex
$LN924@pop_vertex:

; 1963 :   }
; 1964 :   while ( total_area < 4*M_PI - 1)

	fstp	ST(0)
	fstp	ST(1)
	fld	QWORD PTR _maxarea$[ebp]
	fxch	ST(1)
$LN42@pop_vertex:

; 1972 :   }
; 1973 : 
; 1974 :   if ( total_area < 4*M_PI - 0.00001 )

	fld	QWORD PTR __real@402921fa04b8d48a
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN37@pop_vertex

; 1975 :   { sprintf(errmsg,
; 1976 :       "Solid angle deficit %g found around vertex %s. Not popped.\n",
; 1977 :       (double)(4*M_PI-total_area), ELNAME(v_id));

	mov	eax, DWORD PTR _v_id$GSCopy$[ebp]
	fstp	ST(1)
	test	eax, 268435456				; 10000000H
	je	SHORT $LN154@pop_vertex
	and	eax, 134217727				; 07ffffffH
	fstp	ST(0)
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	fld	QWORD PTR _total_area$[ebp]
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN155@pop_vertex
$LN154@pop_vertex:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN155@pop_vertex:
	fsubr	QWORD PTR __real@402921fb54442d18
	push	eax
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0DM@IFHPAPBB@Solid?5angle?5deficit?5?$CFg?5found?5aro@
	push	OFFSET _errmsg
	call	_sprintf

; 1978 :      kb_error(2176,errmsg,WARNING);

	push	2
	push	OFFSET _errmsg
	push	2176					; 00000880H
	call	_kb_error
	add	esp, 32					; 00000020H
$LN939@pop_vertex:

; 1979 :      return 0;

	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx

; 2121 : 
; 2122 :   return 1;
; 2123 : } // end pop_vertex()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN37@pop_vertex:

; 1980 :   }
; 1981 :   if ( total_area > 4*M_PI + 0.00001 )

	fld	QWORD PTR __real@402921fca3cf85a6
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	$LN838@pop_vertex

; 1982 :   { sprintf(errmsg,
; 1983 :      "Solid angle excess %g found around vertex %s. Not popped.\n",
; 1984 :       (double)(total_area-4*M_PI), ELNAME(v_id));

	mov	eax, DWORD PTR _v_id$GSCopy$[ebp]
	fstp	ST(1)
	test	eax, 268435456				; 10000000H
	je	SHORT $LN156@pop_vertex
	and	eax, 134217727				; 07ffffffH
	fstp	ST(0)
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	fld	QWORD PTR _total_area$[ebp]
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN157@pop_vertex
$LN156@pop_vertex:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN157@pop_vertex:
	fsub	QWORD PTR __real@402921fb54442d18
	push	eax
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0DL@IFBFDMMM@Solid?5angle?5excess?5?$CFg?5found?5arou@
	push	OFFSET _errmsg
	call	_sprintf

; 1985 :      kb_error(2177,errmsg,WARNING);

	push	2
	push	OFFSET _errmsg
	push	2177					; 00000881H
	call	_kb_error
	add	esp, 32					; 00000020H
	pop	edi
	pop	esi

; 1986 :      return 0;

	xor	eax, eax
	pop	ebx

; 2121 : 
; 2122 :   return 1;
; 2123 : } // end pop_vertex()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN838@pop_vertex:

; 1987 :   }
; 1988 :   
; 1989 :   /* see which cell is the largest */
; 1990 :   for ( i = 0 ; i < cinfo->cells ; i++ )

	mov	ebx, DWORD PTR _cinfo$GSCopy$[ebp]
	fstp	ST(0)
	mov	esi, DWORD PTR [ebx]
	xor	ecx, ecx
	cmp	esi, 4
	jl	SHORT $LC679@pop_vertex
	lea	edi, DWORD PTR [esi-3]
	lea	edx, DWORD PTR [ebx+56]
$LN684@pop_vertex:

; 1991 :     if ( cinfo->cell[i].area > maxarea ) 

	fcom	QWORD PTR [edx-32]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN680@pop_vertex
	fstp	ST(0)

; 1992 :     { bigcell = i; maxarea = cinfo->cell[i].area; }

	mov	DWORD PTR _bigcell$[ebp], ecx
	fld	QWORD PTR [edx-32]
$LN680@pop_vertex:

; 1991 :     if ( cinfo->cell[i].area > maxarea ) 

	fcom	QWORD PTR [edx]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN681@pop_vertex
	lea	eax, DWORD PTR [ecx+1]
	fstp	ST(0)

; 1992 :     { bigcell = i; maxarea = cinfo->cell[i].area; }

	fld	QWORD PTR [edx]
	mov	DWORD PTR _bigcell$[ebp], eax
$LN681@pop_vertex:

; 1991 :     if ( cinfo->cell[i].area > maxarea ) 

	fcom	QWORD PTR [edx+32]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN682@pop_vertex
	lea	eax, DWORD PTR [ecx+2]
	fstp	ST(0)

; 1992 :     { bigcell = i; maxarea = cinfo->cell[i].area; }

	fld	QWORD PTR [edx+32]
	mov	DWORD PTR _bigcell$[ebp], eax
$LN682@pop_vertex:

; 1991 :     if ( cinfo->cell[i].area > maxarea ) 

	fcom	QWORD PTR [edx+64]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN683@pop_vertex
	lea	eax, DWORD PTR [ecx+3]
	fstp	ST(0)

; 1992 :     { bigcell = i; maxarea = cinfo->cell[i].area; }

	fld	QWORD PTR [edx+64]
	mov	DWORD PTR _bigcell$[ebp], eax
$LN683@pop_vertex:

; 1987 :   }
; 1988 :   
; 1989 :   /* see which cell is the largest */
; 1990 :   for ( i = 0 ; i < cinfo->cells ; i++ )

	add	ecx, 4
	sub	edx, -128				; ffffff80H
	cmp	ecx, edi
	jl	SHORT $LN684@pop_vertex
$LC679@pop_vertex:
	cmp	ecx, esi
	jge	SHORT $LN867@pop_vertex
	mov	edx, ecx
	shl	edx, 5
	lea	edx, DWORD PTR [edx+ebx+24]
$LC35@pop_vertex:

; 1991 :     if ( cinfo->cell[i].area > maxarea ) 

	fcom	QWORD PTR [edx]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN34@pop_vertex
	fstp	ST(0)

; 1992 :     { bigcell = i; maxarea = cinfo->cell[i].area; }

	mov	DWORD PTR _bigcell$[ebp], ecx
	fld	QWORD PTR [edx]
$LN34@pop_vertex:

; 1987 :   }
; 1988 :   
; 1989 :   /* see which cell is the largest */
; 1990 :   for ( i = 0 ; i < cinfo->cells ; i++ )

	inc	ecx
	add	edx, 32					; 00000020H
	cmp	ecx, esi
	jl	SHORT $LC35@pop_vertex
$LN867@pop_vertex:

; 1993 : 
; 1994 :   /* Now go around covering over all cells but bigcell or cells
; 1995 :       bigger than hemisphere */
; 1996 : 
; 1997 :   /* First, put new endpoint on all edges coming into v_id */
; 1998 :   vx = get_coord(v_id);

	mov	eax, DWORD PTR _v_id$GSCopy$[ebp]
	fstp	ST(0)
	mov	esi, DWORD PTR _web+104
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+12
	mov	ebx, DWORD PTR [esi+edx+64]
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]
	add	ebx, ecx

; 1999 :   old_conmap = get_v_constraint_map(v_id);

	cmp	DWORD PTR [esi+edx+1288], 0
	mov	DWORD PTR _vx$[ebp], ebx
	je	SHORT $LN158@pop_vertex
	mov	eax, DWORD PTR [esi+edx+1264]
	add	eax, ecx
	mov	DWORD PTR _old_conmap$[ebp], eax
	jmp	SHORT $LN159@pop_vertex
$LN158@pop_vertex:
	mov	DWORD PTR _old_conmap$[ebp], OFFSET _nullcon
$LN159@pop_vertex:

; 2000 :   if ( get_vattr(v_id) & BOUNDARY )

	mov	eax, DWORD PTR [ecx+8]
	and	eax, 128				; 00000080H
	xor	edi, edi
	or	eax, edi
	je	SHORT $LN739@pop_vertex

; 2001 :   { old_bdrynum = get_vertex_boundary_num(v_id);

	mov	eax, DWORD PTR _V_BOUNDARY_ATTR
	test	eax, eax
	je	SHORT $LN160@pop_vertex
	imul	eax, 240				; 000000f0H
	add	eax, esi
	mov	eax, DWORD PTR [eax+edx+64]
	mov	ecx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _old_bdrynum$[ebp], ecx
	jmp	SHORT $LN739@pop_vertex
$LN160@pop_vertex:
	mov	DWORD PTR _old_bdrynum$[ebp], edi
$LN739@pop_vertex:

; 2002 :   }
; 2003 :   for ( j = 0 ; j < 2*count ; j++ )

	mov	ecx, DWORD PTR _count$[ebp]
	mov	esi, DWORD PTR _web+460
	add	ecx, ecx
	xor	eax, eax
	mov	DWORD PTR _j$[ebp], eax
	mov	DWORD PTR tv6157[ebp], ecx
	test	ecx, ecx
	jle	$LN28@pop_vertex
	npad	12
$LL30@pop_vertex:

; 2004 :   { REAL rayvec[MAXCOORD];
; 2005 :     fe = cinfo->felist[j];

	mov	ecx, DWORD PTR _cinfo$GSCopy$[ebp]
	mov	ecx, DWORD PTR [ecx+16808]
	mov	eax, DWORD PTR [ecx+eax*4]

; 2006 :     ray_fe = get_prev_edge(fe);

	test	eax, 134217728				; 08000000H
	je	SHORT $LN448@pop_vertex
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [eax+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN447@pop_vertex
$LN448@pop_vertex:
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [ecx+28]
$LN447@pop_vertex:

; 2007 :     if ( !equal_id(v_id,get_fe_tailv(ray_fe)) ) continue; /* done this */

	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	edi, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _web+124
	and	eax, 134217728				; 08000000H
	xor	edi, eax
	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _web+216
	test	edi, 134217728				; 08000000H
	je	SHORT $LN454@pop_vertex
	add	eax, DWORD PTR [ecx+edx+304]
	mov	ecx, DWORD PTR _web+636
	mov	eax, DWORD PTR [eax+ecx*4]
	jmp	SHORT $LN453@pop_vertex
$LN454@pop_vertex:
	mov	ecx, DWORD PTR [ecx+edx+304]
	mov	eax, DWORD PTR [eax+ecx]
$LN453@pop_vertex:
	cmp	DWORD PTR _v_id$GSCopy$[ebp], eax
	jne	$LN29@pop_vertex

; 2008 :     ray_e = get_fe_edge(ray_fe);
; 2009 :     get_edge_side(ray_e,rayvec);

	lea	edx, DWORD PTR _rayvec$90256[ebp]
	push	edx
	push	edi
	call	_get_edge_side

; 2010 :     for ( m = 0 ; m < SDIM ; m++ )

	mov	esi, DWORD PTR _web+616
	add	esp, 8
	test	esi, esi
	jle	SHORT $LN741@pop_vertex
	fld	QWORD PTR __real@3fe0000000000000
	lea	ecx, DWORD PTR _rayvec$90256[ebp]
	lea	edx, DWORD PTR _newx$[ebp]
	sub	ecx, ebx
	sub	edx, DWORD PTR _vx$[ebp]
	mov	eax, ebx
$LN26@pop_vertex:

; 2011 :       newx[m] = 0.5*rayvec[m] + vx[m];

	fld	QWORD PTR [ecx+eax]
	add	eax, 8
	dec	esi
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [eax-8]
	fstp	QWORD PTR [edx+eax-8]
	jne	SHORT $LN26@pop_vertex

; 2010 :     for ( m = 0 ; m < SDIM ; m++ )

	mov	ebx, DWORD PTR _vx$[ebp]
	fstp	ST(0)
$LN741@pop_vertex:

; 2012 :     new_v = new_vertex(newx,ray_e);

	lea	eax, DWORD PTR _newx$[ebp]
	push	edi
	push	eax
	call	_new_vertex

; 2013 :     remove_vertex_edge(v_id,ray_e);

	mov	ecx, DWORD PTR _v_id$GSCopy$[ebp]
	push	edi
	push	ecx
	mov	esi, eax
	call	_remove_vertex_edge

; 2014 :     set_edge_tailv(ray_e,new_v);

	push	esi
	push	edi
	call	_set_edge_tailv
	add	esp, 24					; 00000018H

; 2015 :     if ( old_bdrynum >= 0 )

	cmp	DWORD PTR _old_bdrynum$[ebp], 0
	jl	SHORT $LN23@pop_vertex

; 2016 :       set_vertex_boundary_num(new_v,old_bdrynum);

	mov	eax, DWORD PTR _V_BOUNDARY_ATTR
	test	eax, eax
	je	SHORT $LN719@pop_vertex
	mov	edx, DWORD PTR _web+12
	imul	eax, 240				; 000000f0H
	and	esi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+esi*4]
	add	eax, DWORD PTR _web+104
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+edx+64]
	mov	edx, DWORD PTR _old_bdrynum$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 2017 :     else

	jmp	SHORT $LN719@pop_vertex
$LN23@pop_vertex:

; 2018 :       set_v_conmap(new_v,old_conmap);

	mov	eax, DWORD PTR _old_conmap$[ebp]
	push	eax
	push	esi
	call	_set_v_conmap
	add	esp, 8
$LN719@pop_vertex:

; 2017 :     else

	mov	esi, DWORD PTR _web+460
	mov	edx, DWORD PTR _dymem
$LN29@pop_vertex:

; 2002 :   }
; 2003 :   for ( j = 0 ; j < 2*count ; j++ )

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR tv6157[ebp]
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, ecx
	jl	$LL30@pop_vertex
$LN28@pop_vertex:

; 2019 :   }
; 2020 : 
; 2021 :   /*  divide up old facets */
; 2022 :   for ( j = 0 ; j < 2*count ; j++ )

	mov	DWORD PTR _j$[ebp], 0
	test	ecx, ecx
	jle	$LN19@pop_vertex
	jmp	SHORT $LN21@pop_vertex
$LL721@pop_vertex:
	mov	edx, DWORD PTR _dymem
$LN21@pop_vertex:
	mov	ecx, DWORD PTR _cinfo$GSCopy$[ebp]
	mov	eax, DWORD PTR [ecx+16808]
	mov	ecx, DWORD PTR _j$[ebp]

; 2023 :   { facetedge_id new_fe,new_fe_next,new_fe_prev;
; 2024 :     facetedge_id inray_fe;
; 2025 :     vertex_id v1,v2;
; 2026 :     edge_id new_e;
; 2027 :  
; 2028 :     fe = cinfo->felist[j];

	mov	edi, DWORD PTR [eax+ecx*4]
	lea	eax, DWORD PTR [eax+ecx*4]

; 2029 :     ray_fe = get_prev_edge(fe);

	mov	ebx, edi
	shr	ebx, 27					; 0000001bH
	and	ebx, 1
	mov	DWORD PTR tv6160[ebp], eax
	mov	DWORD PTR _fe$[ebp], edi
	mov	DWORD PTR tv5943[ebp], ebx
	je	SHORT $LN460@pop_vertex
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	ecx, DWORD PTR [edi+esi]
	mov	eax, DWORD PTR [ecx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN936@pop_vertex
$LN460@pop_vertex:
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	ecx, DWORD PTR [edi+esi]
	mov	eax, DWORD PTR [ecx+28]
$LN936@pop_vertex:
	mov	DWORD PTR _ray_fe$[ebp], eax
	mov	DWORD PTR tv5949[ebp], ecx

; 2030 :     inray_fe = get_next_edge(fe);

	test	ebx, ebx
	je	SHORT $LN464@pop_vertex
	mov	ebx, DWORD PTR [ecx+28]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN463@pop_vertex
$LN464@pop_vertex:
	mov	ebx, DWORD PTR [ecx+32]
$LN463@pop_vertex:

; 2031 :     v1 = get_fe_tailv(ray_fe);

	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	DWORD PTR tv6173[ebp], ecx
	mov	ecx, DWORD PTR [esi+ecx]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+edx+304]
	mov	edx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN470@pop_vertex
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+636
	lea	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR [eax+ecx]
	jmp	SHORT $LN937@pop_vertex
$LN470@pop_vertex:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+eax]
$LN937@pop_vertex:

; 2032 :     v2 = get_fe_headv(inray_fe);

	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR _v1$90274[ebp], edx
	mov	edx, DWORD PTR [eax+esi]
	mov	DWORD PTR tv6250[ebp], eax
	mov	eax, ebx
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]
	mov	DWORD PTR tv6253[ebp], edx
	mov	edx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN476@pop_vertex
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR [ecx+eax]
	jmp	SHORT $LN475@pop_vertex
$LN476@pop_vertex:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+636
	lea	eax, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR [eax+ecx]
$LN475@pop_vertex:

; 2033 : 
; 2034 :     /*  Each facet gets covered twice. First time we put in edge;
; 2035 :         second time triangulate the quadrilateral.  This way we
; 2036 :         can substitute the new inner fe for the old outer fe
; 2037 :         in felist.
; 2038 :      */
; 2039 :     if ( equal_id(inray_fe,get_prev_edge(ray_fe)) )

	mov	eax, DWORD PTR _ray_fe$[ebp]
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR tv6274[ebp], eax
	je	SHORT $LN480@pop_vertex
	mov	edx, DWORD PTR tv6173[ebp]
	mov	eax, DWORD PTR [esi+edx]
	mov	eax, DWORD PTR [eax+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN479@pop_vertex
$LN480@pop_vertex:
	mov	eax, DWORD PTR tv6173[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [eax+28]
$LN479@pop_vertex:
	cmp	ebx, eax
	jne	$LN18@pop_vertex

; 2040 :     { /* first time around */
; 2041 :       
; 2042 :       /* put in new edge */
; 2043 :       new_e = new_edge(v2,v1,get_fe_facet(fe));

	mov	esi, DWORD PTR _fe$[ebp]
	shr	esi, 28					; 0000001cH
	and	esi, 1
	jne	SHORT $LN484@pop_vertex
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN483@pop_vertex
$LN484@pop_vertex:
	cmp	DWORD PTR tv5943[ebp], 0
	mov	edx, DWORD PTR tv5949[ebp]
	mov	eax, DWORD PTR [edx+24]
	je	SHORT $LN483@pop_vertex
	xor	eax, 134217728				; 08000000H
$LN483@pop_vertex:
	push	eax
	mov	eax, DWORD PTR _v1$90274[ebp]
	push	eax
	push	ecx
	call	_new_edge
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _new_e$90276[ebp], eax

; 2044 :       new_fe = new_facetedge(get_fe_facet(fe),new_e);

	test	esi, esi
	jne	SHORT $LN488@pop_vertex
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN487@pop_vertex
$LN488@pop_vertex:
	cmp	DWORD PTR tv5943[ebp], 0
	mov	ecx, DWORD PTR _web+460
	mov	edx, DWORD PTR [edi+ecx]
	mov	eax, DWORD PTR [edx+24]
	je	SHORT $LN487@pop_vertex
	xor	eax, 134217728				; 08000000H
$LN487@pop_vertex:
	mov	edi, DWORD PTR _new_e$90276[ebp]
	push	edi
	push	eax
	call	_new_facetedge
	add	esp, 8
	mov	esi, eax

; 2045 :       set_edge_fe(new_e,new_fe);

	test	edi, 134217728				; 08000000H
	je	SHORT $LN491@pop_vertex
	xor	eax, 134217728				; 08000000H
$LN491@pop_vertex:
	mov	edx, DWORD PTR _web+124
	mov	ecx, edi
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	edx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [edx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax

; 2046 :       set_next_edge(inray_fe,new_fe);

	test	ebx, 268435456				; 10000000H
	je	SHORT $LN750@pop_vertex
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN495@pop_vertex
	mov	edx, DWORD PTR _web+460
	mov	edi, DWORD PTR tv6250[ebp]
	mov	edx, DWORD PTR [edi+edx]
	mov	edi, DWORD PTR _new_e$90276[ebp]
	mov	eax, esi
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR [edx+28], eax
	jmp	SHORT $LN750@pop_vertex
$LN495@pop_vertex:
	mov	eax, DWORD PTR _web+460
	mov	edx, DWORD PTR tv6250[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [eax+32], esi
$LN750@pop_vertex:

; 2047 :       set_prev_edge(new_fe,inray_fe);

	mov	eax, esi
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv6315[ebp], eax
	je	SHORT $LN502@pop_vertex
	mov	edi, DWORD PTR _web+460
	mov	edx, esi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN500@pop_vertex
	xor	ebx, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+edx*4]
	mov	DWORD PTR [edx+32], ebx
	jmp	SHORT $LN499@pop_vertex
$LN500@pop_vertex:
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+edx*4]
	mov	DWORD PTR [edx+28], ebx
$LN499@pop_vertex:
	mov	edx, DWORD PTR _global_timestamp
	mov	edi, DWORD PTR _new_e$90276[ebp]
	inc	edx
	mov	DWORD PTR _global_timestamp, edx
	mov	DWORD PTR _top_timestamp, edx
$LN502@pop_vertex:

; 2048 :       set_next_edge(new_fe,ray_fe);

	test	eax, eax
	je	SHORT $LN748@pop_vertex
	test	esi, 134217728				; 08000000H
	je	SHORT $LN505@pop_vertex
	mov	eax, DWORD PTR _ray_fe$[ebp]
	mov	ebx, DWORD PTR _web+460
	xor	eax, 134217728				; 08000000H
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+edx*4]
	mov	DWORD PTR [edx+28], eax
	jmp	SHORT $LN748@pop_vertex
$LN505@pop_vertex:
	mov	edx, DWORD PTR _web+460
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _ray_fe$[ebp]
	mov	DWORD PTR [eax+32], edx
$LN748@pop_vertex:

; 2049 :       set_prev_edge(ray_fe,new_fe);

	test	DWORD PTR _ray_fe$[ebp], 268435456	; 10000000H
	je	SHORT $LN512@pop_vertex
	cmp	DWORD PTR tv6274[ebp], 0
	je	SHORT $LN510@pop_vertex
	mov	edx, DWORD PTR _web+460
	mov	ebx, DWORD PTR tv6173[ebp]
	mov	edx, DWORD PTR [edx+ebx]
	mov	eax, esi
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR [edx+32], eax
	jmp	SHORT $LN509@pop_vertex
$LN510@pop_vertex:
	mov	eax, DWORD PTR _web+460
	mov	edx, DWORD PTR tv6173[ebp]
	mov	eax, DWORD PTR [eax+edx]
	mov	DWORD PTR [eax+28], esi
$LN509@pop_vertex:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN512@pop_vertex:

; 2050 :       if ( old_bdrynum >= 0 )

	mov	edx, DWORD PTR _old_bdrynum$[ebp]
	test	edx, edx
	js	SHORT $LN17@pop_vertex

; 2051 :         set_edge_boundary_num(new_e,old_bdrynum);

	mov	eax, DWORD PTR _E_BOUNDARY_ATTR
	test	eax, eax
	je	SHORT $LN16@pop_vertex
	mov	edi, DWORD PTR _dymem
	imul	eax, 240				; 000000f0H
	add	eax, DWORD PTR _web+216
	mov	eax, DWORD PTR [eax+edi+64]
	mov	edi, DWORD PTR _web+124
	mov	ecx, DWORD PTR [ecx+edi]
	mov	DWORD PTR [eax+ecx], edx

; 2052 :       else

	jmp	SHORT $LN16@pop_vertex
$LN17@pop_vertex:

; 2053 :         set_e_conmap(new_e,old_conmap);

	mov	edx, DWORD PTR _old_conmap$[ebp]
	push	edx
	push	edi
	call	_set_e_conmap
	add	esp, 8
$LN16@pop_vertex:

; 2054 : 
; 2055 :       /* stub fe's for cells on each side */
; 2056 :       new_fe_prev = new_facetedge(NULLFACET,new_e);

	mov	ebx, DWORD PTR _new_e$90276[ebp]
	mov	eax, DWORD PTR _NULLFACET
	push	ebx
	push	eax
	call	_new_facetedge

; 2057 :       new_fe_next = new_facetedge(NULLFACET,new_e);

	mov	ecx, DWORD PTR _NULLFACET
	push	ebx
	push	ecx
	mov	edi, eax
	call	_new_facetedge
	add	esp, 16					; 00000010H

; 2058 :       set_next_facet(new_fe,new_fe_next);

	cmp	DWORD PTR tv6315[ebp], 0
	je	SHORT $LN749@pop_vertex
	test	esi, 134217728				; 08000000H
	je	SHORT $LN515@pop_vertex
	mov	ebx, DWORD PTR _web+460
	mov	edx, eax
	xor	edx, 134217728				; 08000000H
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	mov	DWORD PTR [ecx+36], edx
	jmp	SHORT $LN749@pop_vertex
$LN515@pop_vertex:
	mov	ecx, DWORD PTR _web+460
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+40], eax
$LN749@pop_vertex:

; 2059 :       set_next_facet(new_fe_next,new_fe_prev);

	mov	ecx, eax
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	mov	DWORD PTR tv6350[ebp], ecx
	je	SHORT $LN519@pop_vertex
	test	eax, 134217728				; 08000000H
	je	SHORT $LN520@pop_vertex
	mov	ebx, DWORD PTR _web+460
	mov	ecx, edi
	xor	ecx, 134217728				; 08000000H
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+edx*4]
	mov	DWORD PTR [edx+36], ecx
	jmp	SHORT $LN519@pop_vertex
$LN520@pop_vertex:
	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+40], edi
$LN519@pop_vertex:

; 2060 :       set_next_facet(new_fe_prev,new_fe);

	mov	ecx, edi
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	mov	DWORD PTR tv6366[ebp], ecx
	je	SHORT $LN524@pop_vertex
	mov	ebx, DWORD PTR _web+460
	test	edi, 134217728				; 08000000H
	je	SHORT $LN525@pop_vertex
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	mov	ecx, edi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	mov	DWORD PTR [ecx+36], edx
	mov	ecx, DWORD PTR tv6366[ebp]
	jmp	SHORT $LN524@pop_vertex
$LN525@pop_vertex:
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+edx*4]
	mov	DWORD PTR [edx+40], esi
$LN524@pop_vertex:

; 2061 :       set_prev_facet(new_fe,new_fe_prev);

	cmp	DWORD PTR tv6315[ebp], 0
	je	SHORT $LN763@pop_vertex
	mov	ebx, DWORD PTR _web+460
	mov	edx, esi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN530@pop_vertex
	mov	ecx, edi
	xor	ecx, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+edx*4]
	mov	DWORD PTR [edx+40], ecx
	mov	ecx, DWORD PTR tv6366[ebp]
	jmp	SHORT $LN529@pop_vertex
$LN530@pop_vertex:
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+edx*4]
	mov	DWORD PTR [edx+36], edi
$LN529@pop_vertex:
	mov	edx, DWORD PTR _global_timestamp
	inc	edx
	mov	DWORD PTR _global_timestamp, edx
	mov	DWORD PTR _top_timestamp, edx
$LN763@pop_vertex:

; 2062 :       set_prev_facet(new_fe_prev,new_fe_next);

	test	ecx, ecx
	je	SHORT $LN764@pop_vertex
	test	edi, 134217728				; 08000000H
	je	SHORT $LN535@pop_vertex
	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	xor	ecx, 134217728				; 08000000H
	and	edi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+edi*4]
	mov	DWORD PTR [edx+40], ecx
	jmp	SHORT $LN534@pop_vertex
$LN535@pop_vertex:
	mov	ecx, DWORD PTR _web+460
	and	edi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edi*4]
	mov	DWORD PTR [edx+36], eax
$LN534@pop_vertex:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN764@pop_vertex:

; 2063 :       set_prev_facet(new_fe_next,new_fe);

	cmp	DWORD PTR tv6350[ebp], 0
	je	SHORT $LN765@pop_vertex
	test	eax, 134217728				; 08000000H
	je	SHORT $LN540@pop_vertex
	mov	edx, DWORD PTR _web+460
	xor	esi, 134217728				; 08000000H
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+40], esi
	jmp	SHORT $LN539@pop_vertex
$LN540@pop_vertex:
	mov	ecx, DWORD PTR _web+460
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+36], esi
$LN539@pop_vertex:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN765@pop_vertex:

; 2064 :       
; 2065 :       cinfo->felist[j] = inverse_id(new_fe_next);    /* new inner fe */

	mov	ecx, DWORD PTR _cinfo$GSCopy$[ebp]
	mov	edx, DWORD PTR [ecx+16808]
	mov	ecx, DWORD PTR _j$[ebp]
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR [edx+ecx*4], eax

; 2066 :     }
; 2067 :     else

	jmp	SHORT $LN20@pop_vertex
$LN18@pop_vertex:

; 2068 :     { cinfo->felist[j] = inverse_id(get_next_facet(get_next_edge(inray_fe)));

	test	ebx, 134217728				; 08000000H
	je	SHORT $LN545@pop_vertex
	mov	edx, DWORD PTR tv6253[ebp]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN544@pop_vertex
$LN545@pop_vertex:
	mov	eax, DWORD PTR tv6253[ebp]
	mov	eax, DWORD PTR [eax+32]
$LN544@pop_vertex:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN549@pop_vertex
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [ecx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN548@pop_vertex
$LN549@pop_vertex:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [edx+40]
$LN548@pop_vertex:

; 2069 :       divide_quad(fe);

	mov	edx, DWORD PTR _fe$[ebp]
	mov	ecx, DWORD PTR tv6160[ebp]
	xor	eax, 134217728				; 08000000H
	push	edx
	mov	DWORD PTR [ecx], eax
	call	_divide_quad
	add	esp, 4
$LN20@pop_vertex:

; 2019 :   }
; 2020 : 
; 2021 :   /*  divide up old facets */
; 2022 :   for ( j = 0 ; j < 2*count ; j++ )

	mov	eax, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _web+460
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, DWORD PTR tv6157[ebp]
	jl	$LL721@pop_vertex
$LN19@pop_vertex:

; 2070 :     }
; 2071 :   }
; 2072 :           
; 2073 :         
; 2074 :   /* now connect up insides of cells */
; 2075 :   for ( i = 0 ; i < cinfo->cells ; i++ )

	mov	eax, DWORD PTR _cinfo$GSCopy$[ebp]
	cmp	DWORD PTR [eax], 0
	mov	DWORD PTR _i$[ebp], 0
	jle	$LN12@pop_vertex
	mov	ecx, eax
	add	ecx, 20					; 00000014H
	mov	DWORD PTR tv8918[ebp], ecx
$LL14@pop_vertex:

; 2076 :   {
; 2077 :     facet_id new_f=0,old_f;
; 2078 :     facetedge_id prev_fe=0;  /* last in edge chain */
; 2079 : 
; 2080 :     fenum = cinfo->cell[i].festart;

	mov	edi, DWORD PTR tv8918[ebp]

; 2081 :     if ( (i != bigcell) && (cinfo->cell[i].area < 2*M_PI) )

	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edi-8]
	xor	ebx, ebx
	mov	DWORD PTR _new_f$90288[ebp], ebx
	mov	DWORD PTR _prev_fe$90290[ebp], ebx
	mov	DWORD PTR _fenum$[ebp], ecx
	cmp	edx, DWORD PTR _bigcell$[ebp]
	je	$LN11@pop_vertex
	fld	QWORD PTR __real@401921fb54442d18
	fcomp	QWORD PTR [edi+4]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN11@pop_vertex

; 2082 :     { prev_fe = cinfo->felist[fenum+cinfo->cell[i].fenum-1];

	mov	eax, DWORD PTR [edi]
	add	eax, ecx
	mov	ecx, DWORD PTR _cinfo$GSCopy$[ebp]
	mov	edx, DWORD PTR [ecx+16808]
	mov	ebx, DWORD PTR [edx+eax*4-4]
	mov	DWORD PTR _prev_fe$90290[ebp], ebx

; 2083 :       old_f = facet_inverse(get_fe_facet(get_next_facet(prev_fe)));

	test	ebx, 134217728				; 08000000H
	je	SHORT $LN553@pop_vertex
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+eax*4]
	mov	ecx, DWORD PTR [ecx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN552@pop_vertex
$LN553@pop_vertex:
	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+edx*4]
	mov	ecx, DWORD PTR [eax+40]
$LN552@pop_vertex:
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN557@pop_vertex
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN556@pop_vertex
$LN557@pop_vertex:
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+edx*4]
	mov	eax, DWORD PTR [eax+24]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN556@pop_vertex
	xor	eax, 134217728				; 08000000H
$LN556@pop_vertex:
	xor	eax, 134217728				; 08000000H

; 2084 :       new_f = dup_facet(old_f);

	push	eax
	call	_dup_facet
	mov	esi, eax

; 2085 :       set_original(new_f,NULLID);

	mov	ecx, esi
	shr	ecx, 29					; 0000001dH
	imul	ecx, 112				; 00000070H
	mov	eax, DWORD PTR _web[ecx+12]
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]

; 2086 :       set_facet_body(new_f,cinfo->cell[bigcell].b_id);

	mov	edx, DWORD PTR _bigcell$[ebp]
	mov	eax, DWORD PTR _cinfo$GSCopy$[ebp]
	inc	edx
	shl	edx, 5
	mov	DWORD PTR [ecx+20], 0
	mov	ecx, DWORD PTR [edx+eax]
	push	ecx
	push	esi
	mov	DWORD PTR _new_f$90288[ebp], esi
	call	_set_facet_body

; 2087 :       set_facet_body(inverse_id(new_f),cinfo->cell[i].b_id);

	mov	edx, DWORD PTR [edi+12]
	mov	eax, esi
	push	edx
	xor	eax, 134217728				; 08000000H
	push	eax
	call	_set_facet_body

; 2088 :       set_facet_fe(new_f,prev_fe);

	push	ebx
	push	esi
	call	_set_facet_fe
	mov	esi, DWORD PTR _web+460
	mov	ecx, DWORD PTR _fenum$[ebp]
	add	esp, 28					; 0000001cH
$LN11@pop_vertex:

; 2089 :     }
; 2090 : 
; 2091 :     for ( k = 0 ; k < cinfo->cell[i].fenum ; k++,fenum++ )

	cmp	DWORD PTR [edi], 0
	mov	DWORD PTR _k$[ebp], 0
	jle	$LN8@pop_vertex
	add	ecx, ecx
	add	ecx, ecx
	mov	DWORD PTR tv8822[ebp], ecx
$LL10@pop_vertex:

; 2092 :     { 
; 2093 :       fe = cinfo->felist[fenum];

	mov	edx, DWORD PTR _cinfo$GSCopy$[ebp]
	mov	eax, DWORD PTR [edx+16808]

; 2094 :       if ( (i == bigcell) || (cinfo->cell[i].area >= 2*M_PI) )

	mov	edx, DWORD PTR _bigcell$[ebp]
	mov	ecx, DWORD PTR tv8822[ebp]
	mov	edi, DWORD PTR [ecx+eax]
	cmp	DWORD PTR _i$[ebp], edx
	je	$LN6@pop_vertex
	mov	eax, DWORD PTR tv8918[ebp]
	fld	QWORD PTR __real@401921fb54442d18
	fcomp	QWORD PTR [eax+4]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jnp	$LN6@pop_vertex

; 2099 :       }
; 2100 :       else
; 2101 :       { /* hook into edge loop around facet */
; 2102 :         set_prev_edge(fe,prev_fe);

	test	edi, 268435456				; 10000000H
	je	SHORT $LN731@pop_vertex
	test	edi, 134217728				; 08000000H
	je	SHORT $LN587@pop_vertex
	mov	ecx, ebx
	xor	ecx, 134217728				; 08000000H
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [eax+32], ecx
	jmp	SHORT $LN586@pop_vertex
$LN587@pop_vertex:
	mov	ecx, edi
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [edx+28], ebx
$LN586@pop_vertex:
	mov	eax, DWORD PTR _global_timestamp
	mov	esi, DWORD PTR _web+460
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN731@pop_vertex:

; 2103 :         set_next_edge(prev_fe,fe);

	test	ebx, 268435456				; 10000000H
	je	SHORT $LN591@pop_vertex
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN592@pop_vertex
	mov	eax, edi
	xor	eax, 134217728				; 08000000H
	and	ebx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ebx*4]
	mov	DWORD PTR [ecx+28], eax
	jmp	SHORT $LN591@pop_vertex
$LN592@pop_vertex:
	and	ebx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+ebx*4]
	mov	DWORD PTR [edx+32], edi
$LN591@pop_vertex:

; 2104 :         set_fe_facet(fe,new_f);

	mov	eax, DWORD PTR _new_f$90288[ebp]
	push	eax
	push	edi
	call	_set_fe_facet

; 2105 :         prev_fe = fe;

	mov	ebx, edi
	add	esp, 8
	mov	DWORD PTR _prev_fe$90290[ebp], ebx
	jmp	$LN9@pop_vertex
$LN6@pop_vertex:

; 2095 :       { /* have to excise fe */
; 2096 :         set_prev_facet(get_next_facet(fe),get_prev_facet(fe));

	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	mov	ebx, edi
	add	eax, eax
	shr	ebx, 27					; 0000001bH
	add	eax, eax
	and	ebx, 1
	mov	ecx, DWORD PTR [eax+esi]
	je	SHORT $LN561@pop_vertex
	mov	edx, DWORD PTR [ecx+40]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN560@pop_vertex
$LN561@pop_vertex:
	mov	edx, DWORD PTR [ecx+36]
$LN560@pop_vertex:
	test	ebx, ebx
	je	SHORT $LN565@pop_vertex
	mov	ecx, DWORD PTR [ecx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN564@pop_vertex
$LN565@pop_vertex:
	mov	ecx, DWORD PTR [ecx+40]
$LN564@pop_vertex:
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN727@pop_vertex
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN569@pop_vertex
	xor	edx, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN568@pop_vertex
$LN569@pop_vertex:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [ecx+36], edx
$LN568@pop_vertex:
	mov	ecx, DWORD PTR _global_timestamp
	mov	esi, DWORD PTR _web+460
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN727@pop_vertex:

; 2097 :         set_next_facet(get_prev_facet(fe),get_next_facet(fe));

	mov	eax, DWORD PTR [eax+esi]
	test	ebx, ebx
	je	SHORT $LN574@pop_vertex
	mov	ecx, DWORD PTR [eax+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN573@pop_vertex
$LN574@pop_vertex:
	mov	ecx, DWORD PTR [eax+40]
$LN573@pop_vertex:
	test	ebx, ebx
	je	SHORT $LN578@pop_vertex
	mov	eax, DWORD PTR [eax+40]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN577@pop_vertex
$LN578@pop_vertex:
	mov	eax, DWORD PTR [eax+36]
$LN577@pop_vertex:
	test	eax, 268435456				; 10000000H
	je	SHORT $LN581@pop_vertex
	test	eax, 134217728				; 08000000H
	je	SHORT $LN582@pop_vertex
	xor	ecx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [edx+36], ecx
	jmp	SHORT $LN581@pop_vertex
$LN582@pop_vertex:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [eax+40], ecx
$LN581@pop_vertex:

; 2098 :         free_element(fe);

	push	edi
	call	_free_element
	mov	ebx, DWORD PTR _prev_fe$90290[ebp]
	add	esp, 4
$LN9@pop_vertex:

; 2089 :     }
; 2090 : 
; 2091 :     for ( k = 0 ; k < cinfo->cell[i].fenum ; k++,fenum++ )

	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR tv8918[ebp]
	add	DWORD PTR tv8822[ebp], 4
	mov	esi, DWORD PTR _web+460
	inc	eax
	mov	DWORD PTR _k$[ebp], eax
	cmp	eax, DWORD PTR [ecx]
	jl	$LL10@pop_vertex
$LN8@pop_vertex:

; 2106 :       }
; 2107 :     }
; 2108 : 
; 2109 :     /* if necessary, triangulate new cell facet */
; 2110 :     if ( (i != bigcell) && (cinfo->cell[i].area < 2*M_PI) ) 

	mov	edi, DWORD PTR _i$[ebp]
	cmp	edi, DWORD PTR _bigcell$[ebp]
	je	$LN13@pop_vertex
	fld	QWORD PTR __real@401921fb54442d18
	mov	ecx, DWORD PTR tv8918[ebp]
	fcomp	QWORD PTR [ecx+4]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN13@pop_vertex

; 2111 :     { if ( cinfo->cell[i].fenum >= 5 )

	mov	eax, DWORD PTR [ecx]
	cmp	eax, 5
	jl	SHORT $LN3@pop_vertex

; 2112 :          face_triangulate(new_f,cinfo->cell[i].fenum);

	mov	edx, DWORD PTR _new_f$90288[ebp]
	push	eax
	push	edx
	call	_face_triangulate
	add	esp, 8
	jmp	SHORT $LN938@pop_vertex
$LN3@pop_vertex:

; 2113 :       else if ( cinfo->cell[i].fenum == 4 )

	cmp	eax, 4
	jne	SHORT $LN13@pop_vertex

; 2114 :       divide_quad(get_facet_fe(new_f));

	mov	ecx, DWORD PTR _new_f$90288[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN597@pop_vertex
	xor	eax, eax
	jmp	SHORT $LN596@pop_vertex
$LN597@pop_vertex:
	mov	edx, DWORD PTR _web+236
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN596@pop_vertex
	xor	eax, 134217728				; 08000000H
$LN596@pop_vertex:
	push	eax
	call	_divide_quad
	add	esp, 4
$LN938@pop_vertex:
	mov	esi, DWORD PTR _web+460
$LN13@pop_vertex:

; 2070 :     }
; 2071 :   }
; 2072 :           
; 2073 :         
; 2074 :   /* now connect up insides of cells */
; 2075 :   for ( i = 0 ; i < cinfo->cells ; i++ )

	mov	ecx, DWORD PTR _cinfo$GSCopy$[ebp]
	add	DWORD PTR tv8918[ebp], 32		; 00000020H
	inc	edi
	mov	DWORD PTR _i$[ebp], edi
	cmp	edi, DWORD PTR [ecx]
	jl	$LL14@pop_vertex
$LN12@pop_vertex:

; 2115 :     } 
; 2116 :  }
; 2117 : 
; 2118 : 
; 2119 :   /* free original central vertex */
; 2120 :   free_element(v_id);

	mov	edx, DWORD PTR _v_id$GSCopy$[ebp]
	push	edx
	call	_free_element
	add	esp, 4
$LN730@pop_vertex:

; 2121 : 
; 2122 :   return 1;
; 2123 : } // end pop_vertex()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	mov	eax, 1
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_pop_vertex ENDP
_TEXT	ENDS
PUBLIC	_fvec$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_facet_force_on_vertex
EXTRN	_get_facet_verts:PROC
EXTRN	_mat2d_setup:PROC
; Function compile flags: /Ogtp
;	COMDAT _facet_force_on_vertex
_TEXT	SEGMENT
_vxqXvS$ = -288						; size = 12
_s1s2$ = -284						; size = 8
_s1s1$ = -276						; size = 8
tv1537 = -268						; size = 8
_tension$ = -268					; size = 8
_s2s2$ = -260						; size = 8
tv695 = -256						; size = 4
_fvec$GSCopy$ = -252					; size = 4
_basei$ = -248						; size = 4
_vxxJ$ = -244						; size = 144
_sides$ = -100						; size = 96
__$ArrayPad$ = -4					; size = 4
_f_id$ = 8						; size = 4
_v_id$ = 12						; size = 4
_fvec$ = 16						; size = 4
_facet_force_on_vertex PROC				; COMDAT

; 2344 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _fvec$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _f_id$[ebp]
	push	esi
	push	edi

; 2345 :   REAL sides[2][MAXCOORD];
; 2346 :   MAT2D(vx,FACET_VERTS,MAXCOORD);

	push	6
	push	3
	lea	ecx, DWORD PTR _vxxJ$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vxqXvS$[ebp]
	push	edx

; 2347 :   int i,j,basei=0;

	mov	DWORD PTR _fvec$GSCopy$[ebp], eax
	call	_mat2d_setup

; 2348 :   facetedge_id fe;
; 2349 :   REAL s1s1,s1s2,s2s2,det;
; 2350 :   REAL tension = get_facet_density(f_id);

	mov	edi, ebx
	and	edi, 134217727				; 07ffffffH
	mov	esi, eax
	mov	eax, DWORD PTR _web+236
	add	edi, edi
	add	edi, edi
	mov	ecx, DWORD PTR [edi+eax]
	fld	QWORD PTR [ecx+32]

; 2351 :   REAL coeff;
; 2352 : 
; 2353 :   get_facet_verts(f_id,vx,NULL);

	push	0
	push	esi
	fstp	QWORD PTR _tension$[ebp]
	push	ebx
	mov	DWORD PTR _basei$[ebp], 0
	call	_get_facet_verts
	add	esp, 28					; 0000001cH

; 2354 :   fe = get_facet_fe(f_id);

	test	ebx, 268435456				; 10000000H
	jne	SHORT $LN28@facet_forc
	xor	edx, edx
	jmp	SHORT $LN27@facet_forc
$LN28@facet_forc:
	mov	edx, DWORD PTR _web+236
	mov	eax, DWORD PTR [edi+edx]
	mov	edx, DWORD PTR [eax+28]
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN27@facet_forc
	xor	edx, 134217728				; 08000000H
$LN27@facet_forc:

; 2355 :   for ( i = 0 ; i < FACET_EDGES ; i++ )
; 2356 :   {
; 2357 :     if ( equal_id(get_fe_tailv(fe),v_id) )

	mov	eax, DWORD PTR _web+460
	mov	edi, DWORD PTR _dymem
	mov	ecx, edx
	and	ecx, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+edi+304]
	mov	edi, DWORD PTR _web+124
	mov	eax, edx
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ebx+20]
	mov	DWORD PTR tv695[ebp], ebx
	test	eax, 134217728				; 08000000H
	je	SHORT $LN34@facet_forc
	mov	ebx, DWORD PTR _web+636
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	lea	eax, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR [eax+ecx]
	mov	ebx, DWORD PTR tv695[ebp]
	jmp	SHORT $LN33@facet_forc
$LN34@facet_forc:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [ecx+eax]
$LN33@facet_forc:
	cmp	eax, DWORD PTR _v_id$[ebp]
	jne	SHORT $LN76@facet_forc

; 2358 :       basei = i;

	mov	DWORD PTR _basei$[ebp], 0
$LN76@facet_forc:

; 2359 :     fe = get_next_edge(fe);

	test	edx, 134217728				; 08000000H
	je	SHORT $LN38@facet_forc
	mov	edx, DWORD PTR [ebx+28]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN23@facet_forc
$LN38@facet_forc:
	mov	edx, DWORD PTR [ebx+32]
$LN23@facet_forc:

; 2355 :   for ( i = 0 ; i < FACET_EDGES ; i++ )
; 2356 :   {
; 2357 :     if ( equal_id(get_fe_tailv(fe),v_id) )

	mov	ebx, DWORD PTR _web+460
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ebx+eax*4]
	mov	eax, edx
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ebx+20]
	mov	DWORD PTR tv695[ebp], ebx
	test	eax, 134217728				; 08000000H
	je	SHORT $LN61@facet_forc
	mov	ebx, DWORD PTR _web+636
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	lea	eax, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR [eax+ecx]
	jmp	SHORT $LN62@facet_forc
$LN61@facet_forc:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [ecx+eax]
$LN62@facet_forc:
	cmp	eax, DWORD PTR _v_id$[ebp]
	jne	SHORT $LN63@facet_forc

; 2358 :       basei = i;

	mov	DWORD PTR _basei$[ebp], 1
$LN63@facet_forc:

; 2359 :     fe = get_next_edge(fe);

	test	edx, 134217728				; 08000000H
	je	SHORT $LN64@facet_forc
	mov	edx, DWORD PTR tv695[ebp]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN65@facet_forc
$LN64@facet_forc:
	mov	eax, DWORD PTR tv695[ebp]
	mov	eax, DWORD PTR [eax+32]
$LN65@facet_forc:

; 2355 :   for ( i = 0 ; i < FACET_EDGES ; i++ )
; 2356 :   {
; 2357 :     if ( equal_id(get_fe_tailv(fe),v_id) )

	mov	ebx, DWORD PTR _web+460
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN67@facet_forc
	mov	edx, DWORD PTR _web+636
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR [eax+ecx]
	jmp	SHORT $LN68@facet_forc
$LN67@facet_forc:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+eax*4]
	mov	ecx, DWORD PTR [ecx+edx]
$LN68@facet_forc:
	cmp	ecx, DWORD PTR _v_id$[ebp]
	jne	SHORT $LN77@facet_forc

; 2358 :       basei = i;

	mov	DWORD PTR _basei$[ebp], 2
$LN77@facet_forc:

; 2360 :   }   
; 2361 :   for ( j = 0 ; j < SDIM ; j++ )

	mov	edx, DWORD PTR _web+616
	xor	eax, eax
	cmp	edx, 4
	jl	$LN78@facet_forc
	add	edx, -3					; fffffffdH
	lea	ecx, DWORD PTR [eax+24]
	npad	1
$LL74@facet_forc:

; 2362 :   { sides[0][j] = vx[1][j] - vx[0][j];

	mov	edi, DWORD PTR [esi+4]
	fld	QWORD PTR [edi+eax*8]
	mov	ebx, DWORD PTR [esi]
	fsub	QWORD PTR [ebx+eax*8]

; 2363 :     sides[1][j] = vx[2][j] - vx[0][j];

	add	eax, 4
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _sides$[ebp+eax*8-32]
	mov	edi, DWORD PTR [esi+8]
	fld	QWORD PTR [edi+eax*8-32]
	mov	ebx, DWORD PTR [esi]
	fsub	QWORD PTR [ebx+eax*8-32]
	fstp	QWORD PTR _sides$[ebp+eax*8+16]
	mov	edi, DWORD PTR [esi+4]
	fld	QWORD PTR [edi+eax*8-24]
	mov	ebx, DWORD PTR [esi]
	fsub	QWORD PTR [ebx+eax*8-24]
	fstp	QWORD PTR _sides$[ebp+eax*8-24]
	mov	edi, DWORD PTR [esi+8]
	fld	QWORD PTR [edi+eax*8-24]
	mov	ebx, DWORD PTR [esi]
	fsub	QWORD PTR [ebx+eax*8-24]
	fstp	QWORD PTR _sides$[ebp+eax*8+24]
	mov	edi, DWORD PTR [esi+4]
	fld	QWORD PTR [edi+ecx-40]
	mov	ebx, DWORD PTR [esi]
	fsub	QWORD PTR [ebx+ecx-40]
	fstp	QWORD PTR _sides$[ebp+eax*8-16]
	mov	edi, DWORD PTR [esi+8]
	fld	QWORD PTR [edi+ecx-40]
	mov	ebx, DWORD PTR [esi]
	fsub	QWORD PTR [ebx+ecx-40]
	fstp	QWORD PTR _sides$[ebp+eax*8+32]
	mov	edi, DWORD PTR [esi+4]
	fld	QWORD PTR [edi+ecx-32]
	mov	ebx, DWORD PTR [esi]
	fsub	QWORD PTR [ebx+ecx-32]
	fstp	QWORD PTR _sides$[ebp+eax*8-8]
	mov	edi, DWORD PTR [esi+8]
	fld	QWORD PTR [edi+ecx-32]
	mov	ebx, DWORD PTR [esi]
	fsub	QWORD PTR [ebx+ecx-32]
	fstp	QWORD PTR _sides$[ebp+eax*8+40]
	cmp	eax, edx
	jl	$LL74@facet_forc
	mov	edx, DWORD PTR _web+616
$LN78@facet_forc:

; 2360 :   }   
; 2361 :   for ( j = 0 ; j < SDIM ; j++ )

	cmp	eax, edx
	jge	SHORT $LN79@facet_forc
$LC20@facet_forc:

; 2362 :   { sides[0][j] = vx[1][j] - vx[0][j];

	mov	ecx, DWORD PTR [esi+4]
	fld	QWORD PTR [ecx+eax*8]
	mov	edi, DWORD PTR [esi]
	fsub	QWORD PTR [edi+eax*8]
	inc	eax
	fstp	QWORD PTR _sides$[ebp+eax*8-8]

; 2363 :     sides[1][j] = vx[2][j] - vx[0][j];

	mov	ecx, DWORD PTR [esi+8]
	fld	QWORD PTR [ecx+eax*8-8]
	mov	edi, DWORD PTR [esi]
	fsub	QWORD PTR [edi+eax*8-8]
	fstp	QWORD PTR _sides$[ebp+eax*8+40]
	cmp	eax, edx
	jl	SHORT $LC20@facet_forc
$LN79@facet_forc:

; 2364 :   }
; 2365 :   s1s1 = dot(sides[0],sides[0],SDIM);  

	push	edx
	lea	edx, DWORD PTR _sides$[ebp]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	fstp	QWORD PTR _s1s1$[ebp]

; 2366 :   s2s2 = dot(sides[1],sides[1],SDIM);  

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _sides$[ebp+48]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	fstp	QWORD PTR _s2s2$[ebp]

; 2367 :   s1s2 = dot(sides[0],sides[1],SDIM);  

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _sides$[ebp+48]
	push	edx
	lea	eax, DWORD PTR _sides$[ebp]
	push	eax
	call	_dot
	fst	QWORD PTR _s1s2$[ebp]

; 2368 :   det = s1s1*s2s2 - s1s2*s1s2;

	fld	QWORD PTR _s2s2$[ebp]

; 2369 :   if ( det <= 0.0 )
; 2370 :   { for ( j = 0 ; j < SDIM ; j++ )

	mov	esi, DWORD PTR _web+616
	fmul	QWORD PTR _s1s1$[ebp]
	add	esp, 36					; 00000024H
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	fldz
	fcom	ST(1)
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN84@facet_forc
	xor	eax, eax
	test	esi, esi
	jle	SHORT $LN84@facet_forc
$LN16@facet_forc:

; 2371 :       fvec[j] = 0.0;

	mov	ecx, DWORD PTR _fvec$GSCopy$[ebp]
	fst	QWORD PTR [ecx+eax*8]
	mov	esi, DWORD PTR _web+616
	inc	eax
	cmp	eax, esi
	jl	SHORT $LN16@facet_forc
$LN84@facet_forc:

; 2369 :   if ( det <= 0.0 )
; 2370 :   { for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(0)

; 2372 :   }
; 2373 :   coeff = tension/2/sqrt(det);

	fld	QWORD PTR _tension$[ebp]
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR tv1537[ebp]
	call	__CIsqrt
	fdivr	QWORD PTR tv1537[ebp]

; 2374 :   if ( basei == 0 )

	mov	eax, DWORD PTR _basei$[ebp]
	test	eax, eax
	jne	SHORT $LN13@facet_forc

; 2375 :   { for ( j = 0 ; j < SDIM  ; j++ )

	test	esi, esi
	jle	$LN92@facet_forc
	mov	ecx, DWORD PTR _fvec$GSCopy$[ebp]
	fld	QWORD PTR _s1s2$[ebp]
	fld	QWORD PTR _s2s2$[ebp]
	lea	edx, DWORD PTR _sides$[ebp]
	fld	QWORD PTR _s1s1$[ebp]
	sub	ecx, edx
$LN12@facet_forc:

; 2376 :       fvec[j] = coeff*((s2s2*sides[0][j] - s1s2*sides[1][j])
; 2377 :                + (s1s1*sides[1][j] - s1s2*sides[0][j]));

	fld	QWORD PTR _sides$[ebp+eax*8+48]
	lea	edx, DWORD PTR [ecx+eax*8]
	fmul	ST(0), ST(1)
	inc	eax
	fld	QWORD PTR _sides$[ebp+eax*8-8]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _sides$[ebp+eax*8-8]
	fmul	ST(0), ST(3)
	fld	QWORD PTR _sides$[ebp+eax*8+40]
	fmul	ST(0), ST(5)
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fstp	QWORD PTR _sides$[ebp+edx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN12@facet_forc

; 2375 :   { for ( j = 0 ; j < SDIM  ; j++ )

	fstp	ST(3)
	fstp	ST(1)

; 2378 :   }
; 2379 :   else if ( basei == 1 )

	jmp	$LN111@facet_forc
$LN13@facet_forc:
	cmp	eax, 1
	jne	SHORT $LN8@facet_forc

; 2380 :   { for ( j = 0 ; j < SDIM  ; j++ )

	xor	eax, eax
	test	esi, esi
	jle	$LN92@facet_forc
	mov	ecx, DWORD PTR _fvec$GSCopy$[ebp]
	fld	QWORD PTR _s1s2$[ebp]
	fld	QWORD PTR _s2s2$[ebp]
	lea	edx, DWORD PTR _sides$[ebp+48]
	sub	ecx, edx
$LN7@facet_forc:

; 2381 :       fvec[j] = -coeff*(s2s2*sides[0][j] - s1s2*sides[1][j]);

	fld	QWORD PTR _sides$[ebp+eax*8]
	lea	edx, DWORD PTR [ecx+eax*8]
	fmul	ST(0), ST(1)
	inc	eax
	fld	QWORD PTR _sides$[ebp+eax*8+40]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fchs
	fstp	QWORD PTR _sides$[ebp+edx+48]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN7@facet_forc

; 2382 :   }
; 2383 :   else

	jmp	SHORT $LN110@facet_forc
$LN8@facet_forc:

; 2384 :   { for ( j = 0 ; j < SDIM  ; j++ )

	xor	eax, eax
	test	esi, esi
	jle	SHORT $LN92@facet_forc
	mov	ecx, DWORD PTR _fvec$GSCopy$[ebp]
	fld	QWORD PTR _s1s2$[ebp]
	fld	QWORD PTR _s1s1$[ebp]
	lea	edx, DWORD PTR _sides$[ebp]
	sub	ecx, edx
$LN3@facet_forc:

; 2385 :       fvec[j] = -coeff*(s1s1*sides[1][j] - s1s2*sides[0][j]);

	fld	QWORD PTR _sides$[ebp+eax*8+48]
	lea	edx, DWORD PTR [ecx+eax*8]
	fmul	ST(0), ST(1)
	inc	eax
	fld	QWORD PTR _sides$[ebp+eax*8-8]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fchs
	fstp	QWORD PTR _sides$[ebp+edx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN3@facet_forc
$LN110@facet_forc:

; 2384 :   { for ( j = 0 ; j < SDIM  ; j++ )

	fstp	ST(2)
$LN111@facet_forc:
	fstp	ST(1)
$LN92@facet_forc:

; 2386 :   }
; 2387 : } /* end facet_force_on_vertex() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(0)
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_force_on_vertex ENDP
_TEXT	ENDS
PUBLIC	??_C@_0GA@CBEDJEN@pop_tri_to_edge?5failed?5after?5del@ ; `string'
PUBLIC	__real@4028000000000000
PUBLIC	??_C@_0FL@GDMDJEMP@pop_tri_to_edge?5failed?5on?5facet?5@ ; `string'
PUBLIC	??_C@_0BN@MNEPBPEH@pop_tri_to_edge?5on?5facet?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0FD@JKGLJCBI@pop_tri_to_edge?5fails?5on?5facet?5?$CF@ ; `string'
PUBLIC	??_C@_0FA@HPACPEJI@pop_tri_to_edge?5fails?5on?5facet?5?$CF@ ; `string'
PUBLIC	??_C@_0EF@EDLLMFAN@pop_tri_to_edge?5fails?5on?5facet?5?$CF@ ; `string'
PUBLIC	??_C@_0DP@IKHOLJDF@pop_tri_to_edge?5fails?5on?5facet?5?$CF@ ; `string'
PUBLIC	??_C@_0DG@MLOLPJMC@pop_tri_to_edge?5only?5for?5LINEAR?5@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_pop_tri_to_edge
EXTRN	_fe_reorder:PROC
EXTRN	_new_vertex_average:PROC
EXTRN	_delete_edge:PROC
EXTRN	_valid_element:PROC
EXTRN	_delete_facet:PROC
;	COMDAT ??_C@_0GA@CBEDJEN@pop_tri_to_edge?5failed?5after?5del@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0GA@CBEDJEN@pop_tri_to_edge?5failed?5after?5del@ DB 'pop_tri_to_edg'
	DB	'e failed after deleting facet %s; didn''t find triple of edge'
	DB	's in same direction.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT __real@4028000000000000
CONST	SEGMENT
__real@4028000000000000 DQ 04028000000000000r	; 12
CONST	ENDS
;	COMDAT ??_C@_0FL@GDMDJEMP@pop_tri_to_edge?5failed?5on?5facet?5@
CONST	SEGMENT
??_C@_0FL@GDMDJEMP@pop_tri_to_edge?5failed?5on?5facet?5@ DB 'pop_tri_to_e'
	DB	'dge failed on facet %s; failed to delete edge remaining after'
	DB	' deleting facet.', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MNEPBPEH@pop_tri_to_edge?5on?5facet?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BN@MNEPBPEH@pop_tri_to_edge?5on?5facet?5?$CFs?6?$AA@ DB 'pop_tri_t'
	DB	'o_edge on facet %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@JKGLJCBI@pop_tri_to_edge?5fails?5on?5facet?5?$CF@
CONST	SEGMENT
??_C@_0FD@JKGLJCBI@pop_tri_to_edge?5fails?5on?5facet?5?$CF@ DB 'pop_tri_t'
	DB	'o_edge fails on facet %s due to outer triple edges with commo'
	DB	'n endpoint.', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@HPACPEJI@pop_tri_to_edge?5fails?5on?5facet?5?$CF@
CONST	SEGMENT
??_C@_0FA@HPACPEJI@pop_tri_to_edge?5fails?5on?5facet?5?$CF@ DB 'pop_tri_t'
	DB	'o_edge fails on facet %s due to %d triple edges on vertex %s;'
	DB	' need 4.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@EDLLMFAN@pop_tri_to_edge?5fails?5on?5facet?5?$CF@
CONST	SEGMENT
??_C@_0EF@EDLLMFAN@pop_tri_to_edge?5fails?5on?5facet?5?$CF@ DB 'pop_tri_t'
	DB	'o_edge fails on facet %s due to edge %s having valence %d.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@IKHOLJDF@pop_tri_to_edge?5fails?5on?5facet?5?$CF@
CONST	SEGMENT
??_C@_0DP@IKHOLJDF@pop_tri_to_edge?5fails?5on?5facet?5?$CF@ DB 'pop_tri_t'
	DB	'o_edge fails on facet %s; not all its edges triple .', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@MLOLPJMC@pop_tri_to_edge?5only?5for?5LINEAR?5@
CONST	SEGMENT
??_C@_0DG@MLOLPJMC@pop_tri_to_edge?5only?5for?5LINEAR?5@ DB 'pop_tri_to_e'
	DB	'dge only for LINEAR or QUADRATIC models.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\popfilm.c
CONST	ENDS
;	COMDAT _pop_tri_to_edge
_TEXT	SEGMENT
tv3534 = -204						; size = 4
tv3339 = -204						; size = 4
_start_e$90835 = -204					; size = 4
_vc$ = -204						; size = 4
_newe$ = -200						; size = 4
_j$ = -200						; size = 4
_keepv$ = -196						; size = 4
tv3447 = -192						; size = 4
tv3092 = -192						; size = 4
tv2972 = -192						; size = 4
_start_fe$90804 = -192					; size = 4
tv2962 = -188						; size = 4
tv1403 = -188						; size = 4
_newv$ = -188						; size = 4
_va$ = -188						; size = 4
tv3453 = -184						; size = 4
tv3048 = -184						; size = 4
_ec$ = -184						; size = 4
tv3500 = -180						; size = 4
_i$ = -180						; size = 4
tv3362 = -176						; size = 4
tv2947 = -176						; size = 4
$T95221 = -176						; size = 4
tv3463 = -172						; size = 4
_eb$ = -172						; size = 4
_fe$ = -172						; size = 4
tv3045 = -168						; size = 4
_fa$ = -168						; size = 4
_ti$ = -168						; size = 4
tv3450 = -164						; size = 4
tv3055 = -164						; size = 4
_triples$90704 = -164					; size = 4
_ea$ = -164						; size = 4
_tredges$ = -160					; size = 48
_side$ = -112						; size = 48
_separation$ = -64					; size = 48
_trip$ = -16						; size = 12
_vv$90830 = -12						; size = 8
_vb$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_f_id$ = 8						; size = 4
_pop_tri_to_edge PROC					; COMDAT

; 2748 : { edge_id ea,eb,ec,newe;

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2749 :   vertex_id va,vb,vc,keepv=NULLID,newv;
; 2750 :   facetedge_id fe,next_fe,fa,fb,fc;
; 2751 :   int retval,i,j;
; 2752 :   int legs;
; 2753 :   REAL side[MAXCOORD],separation[MAXCOORD];
; 2754 :   edge_id trip[3];
; 2755 :   REAL *keepx,*newx;
; 2756 :   edge_id tredges[12];
; 2757 :   int ti;
; 2758 :  
; 2759 :   if ( (web.modeltype != LINEAR) && (web.modeltype != QUADRATIC) )

	mov	eax, DWORD PTR _web+628
	push	ebx
	xor	ebx, ebx
	push	esi
	push	edi
	mov	DWORD PTR _keepv$[ebp], ebx
	cmp	eax, 1
	je	SHORT $LN87@pop_tri_to
	cmp	eax, 2
	je	SHORT $LN87@pop_tri_to

; 2760 :     kb_error(3366,"pop_tri_to_edge only for LINEAR or QUADRATIC models.\n",
; 2761 :        RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DG@MLOLPJMC@pop_tri_to_edge?5only?5for?5LINEAR?5@
	push	3366					; 00000d26H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN87@pop_tri_to:

; 2762 : 
; 2763 :   /* Test geometry is appropriate */
; 2764 :   next_fe = fe = get_facet_fe(f_id);

	mov	esi, DWORD PTR _f_id$[ebp]
	mov	edi, esi
	shr	edi, 28					; 0000001cH
	and	edi, 1
	mov	DWORD PTR tv2947[ebp], edi
	jne	SHORT $LN109@pop_tri_to
	xor	eax, eax
	jmp	SHORT $LN108@pop_tri_to
$LN109@pop_tri_to:
	mov	ecx, DWORD PTR _web+236
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN108@pop_tri_to
	xor	eax, 134217728				; 08000000H
$LN108@pop_tri_to:

; 2765 :   ti = 0;

	mov	ecx, DWORD PTR _web+460
	mov	DWORD PTR _fe$[ebp], eax
	mov	DWORD PTR _ti$[ebp], ebx
	npad	6
$LL86@pop_tri_to:

; 2766 :   do
; 2767 :   { int triples;
; 2768 :     ea = get_fe_edge(next_fe);

	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	add	edx, edx
	add	edx, edx
	mov	ebx, eax
	mov	DWORD PTR tv2962[ebp], edx
	mov	edx, DWORD PTR [edx+ecx]
	and	ebx, 134217728				; 08000000H
	xor	ebx, DWORD PTR [edx+20]

; 2769 :     ec = inverse_id(get_fe_edge(get_prev_edge(next_fe)));

	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR tv2972[ebp], eax
	je	SHORT $LN115@pop_tri_to
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN114@pop_tri_to
$LN115@pop_tri_to:
	mov	eax, DWORD PTR [edx+28]
$LN114@pop_tri_to:
	mov	edx, eax
	not	eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]

; 2770 :     if ( get_edge_valence(ea) != 3 ) 

	push	ebx
	mov	DWORD PTR _ec$[ebp], eax
	call	_get_edge_valence
	add	esp, 4
	cmp	eax, 3
	jne	$LN392@pop_tri_to

; 2778 :       }
; 2779 :     va = get_fe_tailv(next_fe);
; 2780 :     eb = get_next_tail_edge(ea);

	mov	ecx, DWORD PTR _web+124
	mov	edx, ebx
	mov	eax, ebx
	shr	edx, 27					; 0000001bH
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	and	edx, 1
	mov	esi, DWORD PTR [eax+edx*4+32]

; 2781 :     triples = 1;

	mov	DWORD PTR _triples$90704[ebp], 1

; 2782 :     while ( !equal_id(ea,eb) )

	cmp	ebx, esi
	je	$LN394@pop_tri_to
$LL81@pop_tri_to:

; 2783 :     { int val = get_edge_valence(eb);

	push	esi
	call	_get_edge_valence
	mov	edi, eax

; 2784 :       if ( (val < 2) || ( val > 3 ) ) 

	lea	ecx, DWORD PTR [edi-2]
	add	esp, 4
	cmp	ecx, 1
	ja	$LN391@pop_tri_to

; 2790 :         }
; 2791 :         return 0;
; 2792 :       }
; 2793 :       if ( (val == 3) && !equal_id(eb,ec) )

	cmp	edi, 3
	jne	SHORT $LN76@pop_tri_to
	cmp	esi, DWORD PTR _ec$[ebp]
	je	SHORT $LN76@pop_tri_to

; 2794 :       { tredges[ti++] = eb;

	mov	eax, DWORD PTR _ti$[ebp]
	mov	DWORD PTR _tredges$[ebp+eax*4], esi
	inc	eax

; 2795 :         triples++;

	inc	DWORD PTR _triples$90704[ebp]
	mov	DWORD PTR _ti$[ebp], eax
$LN76@pop_tri_to:

; 2796 :       }
; 2797 :       eb = get_next_tail_edge(eb);

	mov	edi, DWORD PTR _web+124
	mov	edx, esi
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+esi*4]
	shr	edx, 27					; 0000001bH
	and	edx, 1
	mov	esi, DWORD PTR [eax+edx*4+32]
	cmp	ebx, esi
	jne	SHORT $LL81@pop_tri_to

; 2798 :     }
; 2799 :     if ( triples != 3 ) 

	cmp	DWORD PTR _triples$90704[ebp], 3
	jne	$LN394@pop_tri_to

; 2807 :       }
; 2808 :     next_fe = get_next_edge(next_fe);

	cmp	DWORD PTR tv2972[ebp], 0
	mov	ecx, DWORD PTR _web+460
	mov	edx, DWORD PTR tv2962[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	je	SHORT $LN131@pop_tri_to
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN85@pop_tri_to
$LN131@pop_tri_to:
	mov	eax, DWORD PTR [eax+32]
$LN85@pop_tri_to:

; 2809 :   } while ( !equal_id(fe,next_fe) );

	cmp	DWORD PTR _fe$[ebp], eax
	je	$LN393@pop_tri_to
	mov	edi, DWORD PTR tv2947[ebp]
	mov	esi, DWORD PTR _f_id$[ebp]
	jmp	$LL86@pop_tri_to
$LN392@pop_tri_to:

; 2771 :       { if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	$LN30@pop_tri_to

; 2772 :         { sprintf(msg,
; 2773 :           "pop_tri_to_edge fails on facet %s; not all its edges triple .\n",
; 2774 :              ELNAME(f_id));

	test	edi, edi
	je	SHORT $LN90@pop_tri_to
	and	esi, 134217727				; 07ffffffH
	inc	esi
	push	esi
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN91@pop_tri_to
$LN90@pop_tri_to:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN91@pop_tri_to:
	mov	ecx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0DP@IKHOLJDF@pop_tri_to_edge?5fails?5on?5facet?5?$CF@
	push	ecx
	call	_sprintf

; 2775 :           outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx

; 2776 :         }
; 2777 :         return 0;

	jmp	$LN437@pop_tri_to
$LN391@pop_tri_to:

; 2785 :       { if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	$LN30@pop_tri_to

; 2786 :         { sprintf(msg,
; 2787 :     "pop_tri_to_edge fails on facet %s due to edge %s having valence %d.\n",
; 2788 :       ELNAME(f_id),ELNAME1(eb),val);

	test	esi, 268435456				; 10000000H
	je	SHORT $LN92@pop_tri_to
	and	esi, 134217727				; 07ffffffH
	inc	esi
	push	esi
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames+30
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	esi, OFFSET _elnames+30
	jmp	SHORT $LN93@pop_tri_to
$LN92@pop_tri_to:
	mov	esi, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN93@pop_tri_to:
	cmp	DWORD PTR tv2947[ebp], 0
	je	SHORT $LN94@pop_tri_to
	mov	eax, DWORD PTR _f_id$[ebp]
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN95@pop_tri_to
$LN94@pop_tri_to:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN95@pop_tri_to:
	push	edi
	push	esi
	push	eax
	push	OFFSET ??_C@_0EF@EDLLMFAN@pop_tri_to_edge?5fails?5on?5facet?5?$CF@
$LN449@pop_tri_to:
	mov	eax, DWORD PTR _msg
	push	eax
	call	_sprintf

; 2789 :           outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 24					; 00000018H
	pop	edi
	pop	esi

; 2885 :     }
; 2886 :     return 0;

	xor	eax, eax
	pop	ebx

; 2997 : } // end pop_tri_to_edge()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN394@pop_tri_to:

; 2800 :       { if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	$LN30@pop_tri_to

; 2801 :         { sprintf(msg,
; 2802 :             "pop_tri_to_edge fails on facet %s due to %d triple edges on vertex %s; need 4.\n",
; 2803 :                ELNAME(f_id),triples+1,ELNAME1(get_edge_tailv(eb)));

	push	esi
	call	_get_edge_tailv
	add	esp, 4
	test	eax, 268435456				; 10000000H
	je	SHORT $LN96@pop_tri_to
	push	esi
	call	_get_edge_tailv
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames+30
	call	_sprintf
	add	esp, 16					; 00000010H
	mov	esi, OFFSET _elnames+30
	jmp	SHORT $LN97@pop_tri_to
$LN96@pop_tri_to:
	mov	esi, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN97@pop_tri_to:
	cmp	DWORD PTR tv2947[ebp], 0
	je	SHORT $LN98@pop_tri_to
	mov	eax, DWORD PTR _f_id$[ebp]
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	mov	edx, DWORD PTR _triples$90704[ebp]
	add	esp, 12					; 0000000cH
	push	esi
	inc	edx
	push	edx
	mov	eax, OFFSET _elnames
	push	eax
	push	OFFSET ??_C@_0FA@HPACPEJI@pop_tri_to_edge?5fails?5on?5facet?5?$CF@

; 2804 :           outstring(msg);
; 2805 :         }
; 2806 :         return 0;

	jmp	$LN449@pop_tri_to
$LN98@pop_tri_to:

; 2801 :         { sprintf(msg,
; 2802 :             "pop_tri_to_edge fails on facet %s due to %d triple edges on vertex %s; need 4.\n",
; 2803 :                ELNAME(f_id),triples+1,ELNAME1(get_edge_tailv(eb)));

	mov	edx, DWORD PTR _triples$90704[ebp]
	push	esi
	inc	edx
	push	edx
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	eax
	push	OFFSET ??_C@_0FA@HPACPEJI@pop_tri_to_edge?5fails?5on?5facet?5?$CF@

; 2804 :           outstring(msg);
; 2805 :         }
; 2806 :         return 0;

	jmp	$LN449@pop_tri_to
$LN393@pop_tri_to:

; 2810 : 
; 2811 :   fe = get_facet_fe(f_id);

	cmp	DWORD PTR tv2947[ebp], 0
	jne	SHORT $LN135@pop_tri_to
	xor	eax, eax
	jmp	SHORT $LN134@pop_tri_to
$LN135@pop_tri_to:
	mov	edx, DWORD PTR _f_id$[ebp]
	mov	esi, DWORD PTR _web+236
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [eax+28]
	test	edx, 134217728				; 08000000H
	je	SHORT $LN134@pop_tri_to
	xor	eax, 134217728				; 08000000H
$LN134@pop_tri_to:

; 2812 :   ea = get_fe_edge(fe);

	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	esi, eax
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [edx+20]

; 2813 :   eb = get_fe_edge(get_next_edge(fe));

	shr	eax, 27					; 0000001bH
	mov	DWORD PTR _ea$[ebp], esi
	mov	esi, eax
	and	esi, 1
	je	SHORT $LN141@pop_tri_to
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN140@pop_tri_to
$LN141@pop_tri_to:
	mov	eax, DWORD PTR [edx+32]
$LN140@pop_tri_to:
	mov	ebx, eax
	and	ebx, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ecx+ebx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ebx+20]
	mov	DWORD PTR _eb$[ebp], eax

; 2814 :   ec = get_fe_edge(get_prev_edge(fe));

	test	esi, esi
	je	SHORT $LN147@pop_tri_to
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN146@pop_tri_to
$LN147@pop_tri_to:
	mov	eax, DWORD PTR [edx+28]
$LN146@pop_tri_to:
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]

; 2815 :   va = get_edge_tailv(ea);

	mov	edx, DWORD PTR _ea$[ebp]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	push	edx
	mov	ebx, eax
	mov	DWORD PTR _ec$[ebp], ebx
	call	_get_edge_tailv
	mov	DWORD PTR _va$[ebp], eax

; 2816 :   vb = get_edge_tailv(eb);

	mov	eax, DWORD PTR _eb$[ebp]
	push	eax
	call	_get_edge_tailv

; 2817 :   vc = get_edge_tailv(ec);

	push	ebx
	mov	DWORD PTR _vb$[ebp], eax
	call	_get_edge_tailv
	mov	DWORD PTR _vc$[ebp], eax

; 2818 : 
; 2819 :   /* check for disjoint endpoints of triple edges */
; 2820 :   for ( i = 1 ; i < ti ; i++ )

	mov	eax, 1
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _i$[ebp], eax
	cmp	DWORD PTR _ti$[ebp], eax
	jle	$LN422@pop_tri_to
	mov	ebx, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	npad	1
$LL73@pop_tri_to:

; 2821 :     for ( j = 0 ; j < i ; j++ )

	mov	DWORD PTR _j$[ebp], 0
	test	eax, eax
	jle	$LN72@pop_tri_to

; 2822 :       if ( equal_id(get_edge_headv(tredges[i]),get_edge_headv(tredges[j])) )

	mov	esi, DWORD PTR _tredges$[ebp+eax*4]
	mov	eax, esi
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR tv3092[ebp], eax
	jmp	SHORT $LN70@pop_tri_to
	npad	7
$LL427@pop_tri_to:

; 2821 :     for ( j = 0 ; j < i ; j++ )

	mov	eax, DWORD PTR tv3092[ebp]
$LN70@pop_tri_to:

; 2822 :       if ( equal_id(get_edge_headv(tredges[i]),get_edge_headv(tredges[j])) )

	test	eax, eax
	mov	eax, DWORD PTR [ebx+ecx+304]
	mov	ecx, esi
	je	SHORT $LN153@pop_tri_to
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+ecx*4]
	mov	edx, DWORD PTR [eax+edx]
	jmp	SHORT $LN152@pop_tri_to
$LN153@pop_tri_to:
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+ecx*4]
	mov	ecx, DWORD PTR _web+636
	lea	edx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [edx+eax]
$LN152@pop_tri_to:
	mov	ecx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _tredges$[ebp+ecx*4]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN157@pop_tri_to
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	eax, DWORD PTR [eax+ecx]
	jmp	SHORT $LN156@pop_tri_to
$LN157@pop_tri_to:
	mov	ebx, DWORD PTR _web+636
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	lea	ecx, DWORD PTR [ecx+ebx*4]
	mov	eax, DWORD PTR [ecx+eax]
	mov	ebx, DWORD PTR _web+216
$LN156@pop_tri_to:
	cmp	edx, eax
	je	SHORT $LN395@pop_tri_to

; 2821 :     for ( j = 0 ; j < i ; j++ )

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _dymem
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, DWORD PTR _i$[ebp]
	jl	$LL427@pop_tri_to
	mov	eax, DWORD PTR _i$[ebp]
$LN72@pop_tri_to:

; 2818 : 
; 2819 :   /* check for disjoint endpoints of triple edges */
; 2820 :   for ( i = 1 ; i < ti ; i++ )

	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _ti$[ebp]
	jl	$LL73@pop_tri_to

; 2990 :       } while ( !equal_id(ea,start_e));

	mov	ebx, DWORD PTR _ec$[ebp]
$LN422@pop_tri_to:

; 2828 :       }
; 2829 : 
; 2830 :   if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0

; 2831 :   { sprintf(msg,"pop_tri_to_edge on facet %s\n",ELNAME(f_id));

	mov	esi, DWORD PTR _f_id$[ebp]
	je	$LN65@pop_tri_to
	cmp	DWORD PTR tv2947[ebp], 0
	je	SHORT $LN102@pop_tri_to
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	inc	ecx
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN103@pop_tri_to
$LN395@pop_tri_to:

; 2823 :       { if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	$LN30@pop_tri_to

; 2824 :         { sprintf(msg,"pop_tri_to_edge fails on facet %s due to outer triple edges with common endpoint.\n",ELNAME(f_id));

	cmp	DWORD PTR tv2947[ebp], 0
	je	SHORT $LN100@pop_tri_to
	mov	eax, DWORD PTR _f_id$[ebp]
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN101@pop_tri_to
$LN100@pop_tri_to:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN101@pop_tri_to:
	mov	edx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0FD@JKGLJCBI@pop_tri_to_edge?5fails?5on?5facet?5?$CF@
	push	edx
	call	_sprintf

; 2825 :           outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax

; 2826 :         }
; 2827 :         return 0;

	jmp	$LN437@pop_tri_to
$LN102@pop_tri_to:

; 2831 :   { sprintf(msg,"pop_tri_to_edge on facet %s\n",ELNAME(f_id));

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN103@pop_tri_to:
	mov	edx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0BN@MNEPBPEH@pop_tri_to_edge?5on?5facet?5?$CFs?6?$AA@
	push	edx
	call	_sprintf

; 2832 :     outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 16					; 00000010H
$LN65@pop_tri_to:

; 2833 :   }
; 2834 : 
; 2835 :   retval = delete_facet(f_id);

	push	esi
	call	_delete_facet
	add	esp, 4

; 2836 :   if ( retval == 0 ) return 0;

	test	eax, eax
	je	$LN30@pop_tri_to

; 2837 : 
; 2838 :   /* now finish elimination by eliminating the remaining facet edge */
; 2839 :   if ( valid_element(ea) ) 

	mov	ecx, DWORD PTR _ea$[ebp]
	push	ecx
	call	_valid_element
	add	esp, 4
	test	eax, eax
	je	SHORT $LN63@pop_tri_to

; 2840 :   { retval = delete_edge(ea); free_element(ea); }

	mov	ebx, DWORD PTR _ea$[ebp]
	jmp	SHORT $LN438@pop_tri_to
$LN63@pop_tri_to:

; 2841 :   else if ( valid_element(eb) ) 

	mov	edx, DWORD PTR _eb$[ebp]
	push	edx
	call	_valid_element
	add	esp, 4
	test	eax, eax
	je	SHORT $LN61@pop_tri_to

; 2842 :   { retval = delete_edge(eb); free_element(eb); }

	mov	ebx, DWORD PTR _eb$[ebp]
	jmp	SHORT $LN438@pop_tri_to
$LN61@pop_tri_to:

; 2843 :   else if ( valid_element(ec) ) 

	push	ebx
	call	_valid_element
	add	esp, 4
	test	eax, eax
	je	SHORT $LN416@pop_tri_to
$LN438@pop_tri_to:

; 2844 :   { retval = delete_edge(ec); free_element(ec); }

	push	ebx
	call	_delete_edge
	push	ebx
	mov	edi, eax
	call	_free_element
	add	esp, 8

; 2845 :   else retval = 0;
; 2846 :   if ( retval == 0 )

	test	edi, edi
	jne	SHORT $LN57@pop_tri_to
$LN416@pop_tri_to:

; 2847 :   { if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	$LN30@pop_tri_to

; 2848 :     { sprintf(msg,"pop_tri_to_edge failed on facet %s; failed to delete edge remaining after deleting facet.\n",ELNAME(f_id));

	cmp	DWORD PTR tv2947[ebp], 0
	je	SHORT $LN104@pop_tri_to
	and	esi, 134217727				; 07ffffffH
	inc	esi
	push	esi
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	push	eax
	push	OFFSET ??_C@_0FL@GDMDJEMP@pop_tri_to_edge?5failed?5on?5facet?5@

; 2849 :       outstring(msg);
; 2850 :     }
; 2851 :     return 0;

	jmp	$LN439@pop_tri_to
$LN104@pop_tri_to:

; 2848 :     { sprintf(msg,"pop_tri_to_edge failed on facet %s; failed to delete edge remaining after deleting facet.\n",ELNAME(f_id));

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	eax
	push	OFFSET ??_C@_0FL@GDMDJEMP@pop_tri_to_edge?5failed?5on?5facet?5@

; 2849 :       outstring(msg);
; 2850 :     }
; 2851 :     return 0;

	jmp	$LN439@pop_tri_to
$LN57@pop_tri_to:

; 2852 :   }
; 2853 : 
; 2854 :   if ( valid_element(va) ) keepv = va;

	mov	esi, DWORD PTR _va$[ebp]
	push	esi
	call	_valid_element
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN440@pop_tri_to

; 2855 :   else if ( valid_element(vb) ) keepv = vb;

	mov	esi, DWORD PTR _vb$[ebp]
	push	esi
	call	_valid_element
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN440@pop_tri_to

; 2856 :   else if ( valid_element(vc) ) keepv = vc;

	mov	esi, DWORD PTR _vc$[ebp]
	push	esi
	call	_valid_element
	add	esp, 4
	test	eax, eax
	je	SHORT $LN51@pop_tri_to
$LN440@pop_tri_to:
	mov	DWORD PTR _keepv$[ebp], esi
$LN51@pop_tri_to:

; 2857 : 
; 2858 :   /* Identify the three downward triple lines */
; 2859 :   trip[0] = ea = tredges[0]; trip[1] = trip[2] = NULLID;

	mov	eax, DWORD PTR _tredges$[ebp]

; 2860 :   fe = get_edge_fe(ea);

	mov	esi, DWORD PTR _web+124
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	xor	edx, edx
	mov	DWORD PTR _trip$[ebp], eax
	mov	DWORD PTR _trip$[ebp+8], edx
	mov	DWORD PTR _trip$[ebp+4], edx
	cmp	ecx, edx
	jne	SHORT $LN161@pop_tri_to
	xor	ebx, ebx
	jmp	SHORT $LN162@pop_tri_to
$LN161@pop_tri_to:
	mov	ecx, DWORD PTR [ecx+28]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN160@pop_tri_to
	xor	ecx, 134217728				; 08000000H
$LN160@pop_tri_to:
	mov	ebx, ecx
$LN162@pop_tri_to:

; 2861 :   get_edge_side(ea,side);

	lea	edx, DWORD PTR _side$[ebp]
	push	edx
	push	eax
	call	_get_edge_side

; 2862 :   for ( j = 0 ; j < SDIM ; j++ ) 

	mov	ecx, DWORD PTR _web+616
	add	esp, 8
	test	ecx, ecx
	jle	SHORT $LN50@pop_tri_to

; 2861 :   get_edge_side(ea,side);

	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	lea	esi, DWORD PTR _side$[ebp]
	lea	edi, DWORD PTR _separation$[ebp]
	rep movsd
$LN50@pop_tri_to:

; 2863 :      separation[j] = side[j];
; 2864 :   for ( i = 0 ; i < 3 ; i++,fe=get_next_facet(fe) )

	mov	esi, DWORD PTR _web+460
	mov	DWORD PTR tv1403[ebp], 3
	npad	6
$LL164@pop_tri_to:

; 2865 :   { next_fe = inverse_id(get_prev_edge(fe));

	mov	eax, ebx
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR tv3055[ebp], eax
	je	SHORT $LN169@pop_tri_to
	and	ebx, 134217727				; 07ffffffH
	add	ebx, ebx
	add	ebx, ebx
	mov	eax, DWORD PTR [ebx+esi]
	mov	eax, DWORD PTR [eax+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN441@pop_tri_to
$LN169@pop_tri_to:
	and	ebx, 134217727				; 07ffffffH
	add	ebx, ebx
	add	ebx, ebx
	mov	ecx, DWORD PTR [ebx+esi]
	mov	eax, DWORD PTR [ecx+28]
$LN441@pop_tri_to:
	mov	DWORD PTR tv3045[ebp], ebx

; 2867 :       next_fe = inverse_id(get_prev_edge(get_next_facet(next_fe)));

$LN184@pop_tri_to:

; 2866 :     while ( equal_id(get_next_facet(next_fe),get_prev_facet(next_fe)) )

	xor	eax, 134217728				; 08000000H
	mov	edi, eax
	shr	edi, 27					; 0000001bH
	and	edi, 1
	je	SHORT $LN173@pop_tri_to
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+edx*4]
	mov	edx, DWORD PTR [ecx+36]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN172@pop_tri_to
$LN173@pop_tri_to:
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	edx, DWORD PTR [ecx+40]
$LN172@pop_tri_to:
	test	edi, edi
	je	SHORT $LN177@pop_tri_to
	mov	ebx, DWORD PTR [ecx+40]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN176@pop_tri_to
$LN177@pop_tri_to:
	mov	ebx, DWORD PTR [ecx+36]
$LN176@pop_tri_to:
	cmp	edx, ebx
	jne	SHORT $LN43@pop_tri_to

; 2867 :       next_fe = inverse_id(get_prev_edge(get_next_facet(next_fe)));

	test	edi, edi
	je	SHORT $LN181@pop_tri_to
	mov	eax, DWORD PTR [ecx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN180@pop_tri_to
$LN181@pop_tri_to:
	mov	eax, DWORD PTR [ecx+40]
$LN180@pop_tri_to:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN185@pop_tri_to
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN184@pop_tri_to
$LN185@pop_tri_to:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [eax+28]
	jmp	SHORT $LN184@pop_tri_to
$LN43@pop_tri_to:

; 2868 :     eb = get_fe_edge(next_fe);

	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+ecx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]
	mov	esi, eax

; 2869 :     get_edge_side(eb,side);

	lea	eax, DWORD PTR _side$[ebp]
	push	eax
	push	esi
	call	_get_edge_side

; 2870 :     if ( equal_id(eb,tredges[2]) || equal_id(eb,tredges[3]) ) 

	mov	ecx, DWORD PTR _web+616
	add	esp, 8
	cmp	esi, DWORD PTR _tredges$[ebp+8]
	je	SHORT $LN41@pop_tri_to
	cmp	esi, DWORD PTR _tredges$[ebp+12]
	jne	SHORT $LN425@pop_tri_to
$LN41@pop_tri_to:

; 2871 :     { trip[1] = eb;
; 2872 :       for ( j = 0 ; j < SDIM ; j++ ) 

	xor	eax, eax
	mov	DWORD PTR _trip$[ebp+4], esi
	cmp	ecx, 4
	jl	SHORT $LC411@pop_tri_to
	lea	edx, DWORD PTR [ecx-3]
$LL412@pop_tri_to:

; 2873 :        separation[j] += side[j];

	fld	QWORD PTR _side$[ebp+eax*8]
	add	eax, 4
	fadd	QWORD PTR _separation$[ebp+eax*8-32]
	fstp	QWORD PTR _separation$[ebp+eax*8-32]
	fld	QWORD PTR _side$[ebp+eax*8-24]
	fadd	QWORD PTR _separation$[ebp+eax*8-24]
	fstp	QWORD PTR _separation$[ebp+eax*8-24]
	fld	QWORD PTR _side$[ebp+eax*8-16]
	fadd	QWORD PTR _separation$[ebp+eax*8-16]
	fstp	QWORD PTR _separation$[ebp+eax*8-16]
	fld	QWORD PTR _side$[ebp+eax*8-8]
	fadd	QWORD PTR _separation$[ebp+eax*8-8]
	fstp	QWORD PTR _separation$[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LL412@pop_tri_to
$LC411@pop_tri_to:

; 2871 :     { trip[1] = eb;
; 2872 :       for ( j = 0 ; j < SDIM ; j++ ) 

	cmp	eax, ecx
	jge	SHORT $LN425@pop_tri_to
$LC40@pop_tri_to:

; 2873 :        separation[j] += side[j];

	fld	QWORD PTR _side$[ebp+eax*8]
	inc	eax
	fadd	QWORD PTR _separation$[ebp+eax*8-8]
	fstp	QWORD PTR _separation$[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LC40@pop_tri_to
$LN425@pop_tri_to:

; 2874 :     }
; 2875 :     if ( equal_id(eb,tredges[4]) || equal_id(eb,tredges[5]) ) 

	cmp	esi, DWORD PTR _tredges$[ebp+16]
	je	SHORT $LN36@pop_tri_to
	cmp	esi, DWORD PTR _tredges$[ebp+20]
	jne	SHORT $LN46@pop_tri_to
$LN36@pop_tri_to:

; 2876 :     { trip[2] = eb;
; 2877 :       for ( j = 0 ; j < SDIM ; j++ ) 

	xor	eax, eax
	mov	DWORD PTR _trip$[ebp+8], esi
	cmp	ecx, 4
	jl	SHORT $LC414@pop_tri_to
	lea	edx, DWORD PTR [ecx-3]
	npad	2
$LL415@pop_tri_to:

; 2878 :        separation[j] += side[j];

	fld	QWORD PTR _side$[ebp+eax*8]
	add	eax, 4
	fadd	QWORD PTR _separation$[ebp+eax*8-32]
	fstp	QWORD PTR _separation$[ebp+eax*8-32]
	fld	QWORD PTR _side$[ebp+eax*8-24]
	fadd	QWORD PTR _separation$[ebp+eax*8-24]
	fstp	QWORD PTR _separation$[ebp+eax*8-24]
	fld	QWORD PTR _side$[ebp+eax*8-16]
	fadd	QWORD PTR _separation$[ebp+eax*8-16]
	fstp	QWORD PTR _separation$[ebp+eax*8-16]
	fld	QWORD PTR _side$[ebp+eax*8-8]
	fadd	QWORD PTR _separation$[ebp+eax*8-8]
	fstp	QWORD PTR _separation$[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LL415@pop_tri_to
$LC414@pop_tri_to:

; 2876 :     { trip[2] = eb;
; 2877 :       for ( j = 0 ; j < SDIM ; j++ ) 

	cmp	eax, ecx
	jge	SHORT $LN46@pop_tri_to
	npad	2
$LC35@pop_tri_to:

; 2878 :        separation[j] += side[j];

	fld	QWORD PTR _side$[ebp+eax*8]
	inc	eax
	fadd	QWORD PTR _separation$[ebp+eax*8-8]
	fstp	QWORD PTR _separation$[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LC35@pop_tri_to
$LN46@pop_tri_to:

; 2863 :      separation[j] = side[j];
; 2864 :   for ( i = 0 ; i < 3 ; i++,fe=get_next_facet(fe) )

	cmp	DWORD PTR tv3055[ebp], 0
	mov	esi, DWORD PTR _web+460
	je	SHORT $LN165@pop_tri_to
	mov	ecx, DWORD PTR tv3045[ebp]
	mov	edx, DWORD PTR [ecx+esi]
	mov	ebx, DWORD PTR [edx+36]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN406@pop_tri_to
$LN165@pop_tri_to:
	mov	eax, DWORD PTR tv3045[ebp]
	mov	ecx, DWORD PTR [eax+esi]
	mov	ebx, DWORD PTR [ecx+40]
$LN406@pop_tri_to:
	dec	DWORD PTR tv1403[ebp]
	jne	$LL164@pop_tri_to

; 2879 :     }
; 2880 :   }
; 2881 :   if ( !valid_id(trip[1]) || !valid_id(trip[2]) )

	mov	eax, 268435456				; 10000000H
	test	DWORD PTR _trip$[ebp+4], eax
	je	$LN31@pop_tri_to
	test	DWORD PTR _trip$[ebp+8], eax
	je	$LN31@pop_tri_to

; 2887 :   }
; 2888 :   legs = 3;
; 2889 : 
; 2890 :   /* Insert new vertex and edge */
; 2891 :   newv = dup_vertex(keepv);

	mov	edi, DWORD PTR _keepv$[ebp]
	push	edi
	call	_dup_vertex
	mov	esi, eax

; 2892 :   newe = new_edge(keepv,newv,NULLID);

	push	0
	push	esi
	push	edi
	mov	DWORD PTR _newv$[ebp], esi
	call	_new_edge

; 2893 :  
; 2894 :   keepx = get_coord(keepv);

	mov	edx, DWORD PTR _web+104
	mov	ecx, DWORD PTR _web+12
	mov	DWORD PTR _newe$[ebp], eax
	mov	eax, DWORD PTR _dymem
	mov	edx, DWORD PTR [edx+eax+64]
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+edi*4]

; 2895 :   newx  = get_coord(newv);

	and	esi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+esi*4]
	add	eax, edx
	add	ecx, edx

; 2896 :   for ( j = 0 ; j < SDIM ; j++ )

	xor	edx, edx
	add	esp, 16					; 00000010H
	cmp	DWORD PTR _web+616, edx
	jle	SHORT $LN27@pop_tri_to
	fld	QWORD PTR __real@4028000000000000
	mov	esi, ecx
	lea	ecx, DWORD PTR _separation$[ebp]
	mov	edi, ecx
	sub	esi, ecx
	sub	edi, eax
$LN29@pop_tri_to:

; 2897 :   { newx[j] = keepx[j] + separation[j]/12;

	fld	QWORD PTR [edi+eax]
	lea	ecx, DWORD PTR [edi+eax]
	fdiv	ST(0), ST(1)
	inc	edx
	add	eax, 8
	fld	QWORD PTR [eax-8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [ecx+esi]

; 2898 :     keepx[j] -= separation[j]/12;

	fsubr	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	cmp	edx, DWORD PTR _web+616
	jl	SHORT $LN29@pop_tri_to

; 2896 :   for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(0)
$LN27@pop_tri_to:

; 2899 :   }
; 2900 : 
; 2901 :   /* Reconnect lower edge endpoints */
; 2902 :   for ( i = 0 ; i < legs ; i++ )  /* lower triple edges */

	mov	DWORD PTR _i$[ebp], 0
	npad	3
$LL26@pop_tri_to:

; 2903 :   { facetedge_id next_fe,start_fe;
; 2904 :     remove_vertex_edge(keepv,trip[i]);

	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _trip$[ebp+edx*4]
	mov	eax, DWORD PTR _keepv$[ebp]
	push	esi
	push	eax
	call	_remove_vertex_edge

; 2905 :     set_edge_tailv(trip[i],newv);

	mov	ecx, DWORD PTR _newv$[ebp]
	push	ecx
	push	esi
	call	_set_edge_tailv

; 2906 :     fe = start_fe = get_edge_fe(trip[i]);

	mov	ebx, DWORD PTR _web+124
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+edx*4]
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN191@pop_tri_to
	mov	ecx, DWORD PTR _web+460
	mov	DWORD PTR _start_fe$90804[ebp], eax
	mov	DWORD PTR _fe$[ebp], eax
	jmp	SHORT $LN23@pop_tri_to
$LN191@pop_tri_to:
	mov	eax, DWORD PTR [eax+28]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN190@pop_tri_to
	xor	eax, 134217728				; 08000000H
$LN190@pop_tri_to:
	mov	ecx, DWORD PTR _web+460
	mov	DWORD PTR _start_fe$90804[ebp], eax
	mov	DWORD PTR _fe$[ebp], eax
	jmp	SHORT $LN23@pop_tri_to
	npad	12
$LL424@pop_tri_to:
	mov	ebx, DWORD PTR _web+124
$LN23@pop_tri_to:

; 2907 :     do  /* around the multiple edge */
; 2908 :     {
; 2909 :       next_fe = inverse_id(get_prev_edge(fe));

	mov	eax, DWORD PTR _fe$[ebp]
	mov	edx, eax
	shr	edx, 27					; 0000001bH
	and	edx, 1
	mov	DWORD PTR tv3055[ebp], edx
	je	SHORT $LN195@pop_tri_to
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv3045[ebp], eax
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR tv3048[ebp], eax
	mov	eax, DWORD PTR [eax+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN194@pop_tri_to
$LN195@pop_tri_to:
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv3045[ebp], eax
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR tv3048[ebp], eax
	mov	eax, DWORD PTR [eax+28]
$LN194@pop_tri_to:
	xor	eax, 134217728				; 08000000H
	mov	edi, eax

; 2910 :       for (;;)
; 2911 :       { /* traverse fan of edges */
; 2912 :         edge_id eg;
; 2913 :         if ( !equal_id(get_fe_tailv(next_fe),keepv) ) break;

	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ecx+eax*4]
	mov	eax, edi
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [esi+20]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN201@pop_tri_to
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ebx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ebx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN200@pop_tri_to
$LN201@pop_tri_to:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ebx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ebx+304]
	mov	eax, DWORD PTR [edx+eax]
$LN200@pop_tri_to:
	cmp	eax, DWORD PTR _keepv$[ebp]
	jne	$LN421@pop_tri_to

; 2914 :         if ( get_next_facet(next_fe) != get_prev_facet(next_fe) )

	mov	edx, edi
	shr	edx, 27					; 0000001bH
	and	edx, 1
	je	SHORT $LN205@pop_tri_to
	mov	ebx, DWORD PTR [esi+36]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN204@pop_tri_to
$LN205@pop_tri_to:
	mov	ebx, DWORD PTR [esi+40]
$LN204@pop_tri_to:
	test	edx, edx
	je	SHORT $LN209@pop_tri_to
	mov	eax, DWORD PTR [esi+40]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN208@pop_tri_to
$LN209@pop_tri_to:
	mov	eax, DWORD PTR [esi+36]
$LN208@pop_tri_to:
	cmp	ebx, eax
	jne	SHORT $LN397@pop_tri_to

; 2951 :           }
; 2952 :           break;  /* done with this way out of triple edge */
; 2953 :         }
; 2954 :         next_fe = get_next_facet(next_fe);

	test	edx, edx
	je	SHORT $LN298@pop_tri_to
	mov	eax, DWORD PTR [esi+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN297@pop_tri_to
$LN298@pop_tri_to:
	mov	eax, DWORD PTR [esi+40]
$LN297@pop_tri_to:

; 2955 :         next_fe = inverse_id(get_prev_edge(next_fe));

	test	eax, 134217728				; 08000000H
	je	SHORT $LN302@pop_tri_to

; 2956 :       }

	mov	ebx, DWORD PTR _web+124
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	jmp	$LN194@pop_tri_to

; 2955 :         next_fe = inverse_id(get_prev_edge(next_fe));

$LN302@pop_tri_to:

; 2956 :       }

	mov	ebx, DWORD PTR _web+124
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+28]
	jmp	$LN194@pop_tri_to
$LN397@pop_tri_to:

; 2915 :         { /* have reached next triple edge */
; 2916 :           eg = get_fe_edge(next_fe);

	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	eax, edi
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]

; 2917 :           if ( equal_id(eg,trip[0]) || equal_id(eg,trip[1]) 
; 2918 :              || equal_id(eg,trip[2]) )

	cmp	eax, DWORD PTR _tredges$[ebp]
	je	$LN15@pop_tri_to
	cmp	eax, DWORD PTR _trip$[ebp+4]
	je	$LN15@pop_tri_to
	cmp	eax, DWORD PTR _trip$[ebp+8]
	je	$LN15@pop_tri_to

; 2927 :             }
; 2928 :           }
; 2929 :           else
; 2930 :           { /* vertical, so insert new edge above trip[i] */
; 2931 :             facetedge_id fea = get_prev_edge(fe);

	mov	edx, DWORD PTR tv3055[ebp]
	mov	eax, DWORD PTR tv3048[ebp]
	test	edx, edx
	je	SHORT $LN229@pop_tri_to
	mov	edi, DWORD PTR [eax+32]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN228@pop_tri_to
$LN229@pop_tri_to:
	mov	edi, DWORD PTR [eax+28]
$LN228@pop_tri_to:

; 2932 :             facet_id fa = get_fe_facet(fe);

	mov	ecx, DWORD PTR _fe$[ebp]
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	mov	DWORD PTR tv3339[ebp], ecx
	jne	SHORT $LN233@pop_tri_to
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN232@pop_tri_to
$LN233@pop_tri_to:
	mov	eax, DWORD PTR [eax+24]
	test	edx, edx
	je	SHORT $LN232@pop_tri_to
	xor	eax, 134217728				; 08000000H
$LN232@pop_tri_to:

; 2933 :             facetedge_id newfe = new_facetedge(fa,newe);

	mov	ebx, DWORD PTR _newe$[ebp]
	push	ebx
	push	eax
	call	_new_facetedge

; 2934 :             facetedge_id newefe = get_edge_fe(newe);

	push	ebx
	mov	esi, eax
	call	_get_edge_fe
	add	esp, 12					; 0000000cH

; 2935 :             set_next_edge(fea,newfe);

	test	edi, 268435456				; 10000000H
	je	SHORT $LN420@pop_tri_to
	test	edi, 134217728				; 08000000H
	je	SHORT $LN237@pop_tri_to
	mov	ebx, DWORD PTR _web+460
	mov	ecx, esi
	xor	ecx, 134217728				; 08000000H
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+edx*4]
	mov	ebx, DWORD PTR _newe$[ebp]
	mov	DWORD PTR [edx+28], ecx
	jmp	SHORT $LN420@pop_tri_to
$LN237@pop_tri_to:
	mov	edx, DWORD PTR _web+460
	mov	ecx, edi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+32], esi
$LN420@pop_tri_to:

; 2936 :             set_prev_edge(newfe,fea);

	mov	edx, esi
	shr	edx, 28					; 0000001cH
	and	edx, 1
	mov	DWORD PTR tv3362[ebp], edx
	je	SHORT $LN244@pop_tri_to
	test	esi, 134217728				; 08000000H
	je	SHORT $LN242@pop_tri_to
	mov	ecx, DWORD PTR _web+460
	xor	edi, 134217728				; 08000000H
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+32], edi
	jmp	SHORT $LN241@pop_tri_to
$LN242@pop_tri_to:
	mov	edx, DWORD PTR _web+460
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+28], edi
$LN241@pop_tri_to:
	mov	ecx, DWORD PTR _global_timestamp
	mov	edx, DWORD PTR tv3362[ebp]
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN244@pop_tri_to:

; 2937 :             set_prev_edge(fe,newfe);

	cmp	DWORD PTR tv3339[ebp], 0
	je	SHORT $LN249@pop_tri_to
	cmp	DWORD PTR tv3055[ebp], 0
	mov	ecx, DWORD PTR _web+460
	mov	edi, DWORD PTR tv3045[ebp]
	mov	ecx, DWORD PTR [edi+ecx]
	je	SHORT $LN247@pop_tri_to
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	mov	DWORD PTR [ecx+32], edx
	mov	edx, DWORD PTR tv3362[ebp]
	jmp	SHORT $LN246@pop_tri_to
$LN247@pop_tri_to:
	mov	DWORD PTR [ecx+28], esi
$LN246@pop_tri_to:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN249@pop_tri_to:

; 2938 :             set_next_edge(newfe,fe);

	test	edx, edx
	je	SHORT $LN432@pop_tri_to
	mov	edi, DWORD PTR _web+460
	mov	ecx, esi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN252@pop_tri_to
	mov	edx, DWORD PTR _fe$[ebp]
	xor	edx, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR [ecx+28], edx
	mov	edx, DWORD PTR tv3362[ebp]
	jmp	SHORT $LN432@pop_tri_to
$LN252@pop_tri_to:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	edi, DWORD PTR _fe$[ebp]
	mov	DWORD PTR [ecx+32], edi
$LN432@pop_tri_to:

; 2939 :             if ( valid_id(newefe) )

	test	eax, 268435456				; 10000000H
	je	$LN11@pop_tri_to

; 2940 :             { set_next_facet(newfe,newefe);

	test	edx, edx
	je	SHORT $LN256@pop_tri_to
	test	esi, 134217728				; 08000000H
	je	SHORT $LN257@pop_tri_to
	mov	edi, DWORD PTR _web+460
	mov	edx, eax
	xor	edx, 134217728				; 08000000H
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR [ecx+36], edx
	jmp	SHORT $LN256@pop_tri_to
$LN257@pop_tri_to:
	mov	ecx, DWORD PTR _web+460
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+40], eax
$LN256@pop_tri_to:

; 2941 :               set_prev_facet(newefe,newfe);

	mov	edi, eax
	and	eax, 134217727				; 07ffffffH
	shr	edi, 27					; 0000001bH
	add	eax, eax
	and	edi, 1
	lea	edx, DWORD PTR [eax+eax]
	je	SHORT $LN262@pop_tri_to
	mov	ecx, DWORD PTR _web+460
	mov	ecx, DWORD PTR [edx+ecx]
	mov	eax, esi
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR [ecx+40], eax
	jmp	SHORT $LN261@pop_tri_to
$LN262@pop_tri_to:
	mov	eax, DWORD PTR _web+460
	mov	ecx, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+36], esi
$LN261@pop_tri_to:
	mov	eax, DWORD PTR _global_timestamp

; 2942 :               set_prev_facet(newfe,get_next_facet(newefe));

	mov	ecx, DWORD PTR _web+460
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR [edx+ecx]
	test	edi, edi
	je	SHORT $LN267@pop_tri_to
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN266@pop_tri_to
$LN267@pop_tri_to:
	mov	eax, DWORD PTR [eax+40]
$LN266@pop_tri_to:
	cmp	DWORD PTR tv3362[ebp], 0
	je	SHORT $LN273@pop_tri_to
	mov	ebx, esi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN271@pop_tri_to
	xor	eax, 134217728				; 08000000H
	and	ebx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+ebx*4]
	mov	DWORD PTR [ecx+40], eax
	jmp	SHORT $LN270@pop_tri_to
$LN271@pop_tri_to:
	and	ebx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+ebx*4]
	mov	DWORD PTR [ecx+36], eax
$LN270@pop_tri_to:
	mov	eax, DWORD PTR _global_timestamp
	mov	ecx, DWORD PTR _web+460
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN273@pop_tri_to:

; 2943 :               set_next_facet(get_next_facet(newefe),newfe);

	test	edi, edi
	je	SHORT $LN276@pop_tri_to
	mov	edx, DWORD PTR [edx+ecx]
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN275@pop_tri_to
$LN276@pop_tri_to:
	mov	eax, DWORD PTR [edx+ecx]
	mov	eax, DWORD PTR [eax+40]
$LN275@pop_tri_to:
	test	eax, 268435456				; 10000000H
	je	$LN431@pop_tri_to
	test	eax, 134217728				; 08000000H
	je	SHORT $LN280@pop_tri_to
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+36], edx
	jmp	$LN431@pop_tri_to
$LN280@pop_tri_to:
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [ecx+40], esi

; 2944 :             }
; 2945 :             else

	jmp	$LN431@pop_tri_to
$LN11@pop_tri_to:

; 2946 :             { set_edge_fe(newe,newfe);

	mov	eax, esi
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN284@pop_tri_to
	xor	eax, 134217728				; 08000000H
$LN284@pop_tri_to:
	mov	ecx, DWORD PTR _web+124
	and	ebx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+ebx*4]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax

; 2947 :               set_next_facet(newfe,newfe);

	test	edx, edx
	je	$LN431@pop_tri_to
	mov	eax, esi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN288@pop_tri_to
	mov	edi, DWORD PTR _web+460
	xor	eax, 134217728				; 08000000H
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR [ecx+36], eax
	jmp	SHORT $LN287@pop_tri_to
$LN288@pop_tri_to:
	mov	ecx, DWORD PTR _web+460
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+40], esi
$LN287@pop_tri_to:

; 2948 :               set_prev_facet(newfe,newfe);

	test	edx, edx
	je	SHORT $LN431@pop_tri_to
	test	esi, 134217728				; 08000000H
	je	SHORT $LN293@pop_tri_to
	mov	eax, DWORD PTR _web+460
	mov	ecx, esi
	xor	ecx, 134217728				; 08000000H
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [edx+40], ecx
	jmp	SHORT $LN292@pop_tri_to
$LN293@pop_tri_to:
	mov	ecx, DWORD PTR _web+460
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx+36], esi
$LN292@pop_tri_to:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN431@pop_tri_to:

; 2949 :             }
; 2950 :             cross_cut(newfe,fe);  /* triangulate */

	mov	eax, DWORD PTR _fe$[ebp]
	push	eax
	push	esi
	call	_cross_cut
	mov	ecx, DWORD PTR _web+460
	add	esp, 8
	jmp	$LN421@pop_tri_to
$LN15@pop_tri_to:

; 2919 :           { /* all lower edges, so go back and reconnect */
; 2920 :             next_fe = inverse_id(get_prev_edge(next_fe));

	test	edi, 134217728				; 08000000H
	je	SHORT $LN215@pop_tri_to
	mov	ebx, DWORD PTR [edx+32]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN214@pop_tri_to
$LN215@pop_tri_to:
	mov	ebx, DWORD PTR [edx+28]
$LN214@pop_tri_to:
	xor	ebx, 134217728				; 08000000H

; 2921 :             while ( !equal_id(next_fe,fe) )

	cmp	ebx, DWORD PTR _fe$[ebp]
	je	$LN421@pop_tri_to
	npad	13
$LL14@pop_tri_to:

; 2922 :             { edge_id e_id = get_fe_edge(next_fe);
; 2923 :               remove_vertex_edge(keepv,e_id);

	mov	edx, DWORD PTR _keepv$[ebp]
	mov	edi, ebx
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	ecx, DWORD PTR [edi+ecx]
	mov	esi, ebx
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [ecx+20]
	push	esi
	push	edx
	call	_remove_vertex_edge

; 2924 :               set_edge_tailv(e_id,newv);

	mov	eax, DWORD PTR _newv$[ebp]
	push	eax
	push	esi
	call	_set_edge_tailv

; 2925 :               next_fe = get_prev_facet(next_fe);

	mov	ecx, DWORD PTR _web+460
	add	esp, 16					; 00000010H
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN221@pop_tri_to
	mov	edx, DWORD PTR [edi+ecx]
	mov	eax, DWORD PTR [edx+40]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN220@pop_tri_to
$LN221@pop_tri_to:
	mov	eax, DWORD PTR [edi+ecx]
	mov	eax, DWORD PTR [eax+36]
$LN220@pop_tri_to:

; 2926 :               next_fe = inverse_id(get_prev_edge(next_fe));

	test	eax, 134217728				; 08000000H
	je	SHORT $LN225@pop_tri_to
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	ebx, DWORD PTR [edx+32]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN224@pop_tri_to
$LN225@pop_tri_to:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ebx, DWORD PTR [eax+28]
$LN224@pop_tri_to:
	xor	ebx, 134217728				; 08000000H
	cmp	ebx, DWORD PTR _fe$[ebp]
	jne	$LL14@pop_tri_to
$LN421@pop_tri_to:

; 2957 :       fe = get_next_facet(fe); 

	cmp	DWORD PTR tv3055[ebp], 0
	mov	edx, DWORD PTR tv3045[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	je	SHORT $LN306@pop_tri_to
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN443@pop_tri_to
$LN306@pop_tri_to:
	mov	eax, DWORD PTR [eax+40]
$LN443@pop_tri_to:
	mov	DWORD PTR _fe$[ebp], eax

; 2958 :     } while ( !equal_id(fe,start_fe) );

	cmp	eax, DWORD PTR _start_fe$90804[ebp]
	jne	$LL424@pop_tri_to

; 2899 :   }
; 2900 : 
; 2901 :   /* Reconnect lower edge endpoints */
; 2902 :   for ( i = 0 ; i < legs ; i++ )  /* lower triple edges */

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, 3
	jl	$LL26@pop_tri_to

; 2959 :   } 
; 2960 : 
; 2961 :   /* Fix up facet edge orders */
; 2962 :     fa = get_edge_fe(newe);

	mov	edx, DWORD PTR _newe$[ebp]
	mov	esi, DWORD PTR _web+124
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	test	eax, eax
	jne	SHORT $LN310@pop_tri_to
	xor	ebx, ebx
	mov	DWORD PTR _fa$[ebp], ebx
	jmp	SHORT $LN311@pop_tri_to
$LN310@pop_tri_to:
	mov	eax, DWORD PTR [eax+28]
	test	edx, 134217728				; 08000000H
	je	SHORT $LN309@pop_tri_to
	xor	eax, 134217728				; 08000000H
$LN309@pop_tri_to:
	mov	ebx, eax
	mov	DWORD PTR _fa$[ebp], eax
$LN311@pop_tri_to:

; 2963 :     fb = get_next_facet(fa);

	mov	esi, ebx
	shr	esi, 27					; 0000001bH
	and	esi, 1
	mov	DWORD PTR tv3447[ebp], esi
	je	SHORT $LN314@pop_tri_to
	and	ebx, 134217727				; 07ffffffH
	add	ebx, ebx
	add	ebx, ebx
	mov	edx, DWORD PTR [ebx+ecx]
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN444@pop_tri_to
$LN314@pop_tri_to:
	and	ebx, 134217727				; 07ffffffH
	add	ebx, ebx
	add	ebx, ebx
	mov	edx, DWORD PTR [ebx+ecx]
	mov	eax, DWORD PTR [edx+40]
$LN444@pop_tri_to:
	mov	DWORD PTR tv3453[ebp], edx
	mov	DWORD PTR tv3450[ebp], ebx

; 2964 :     fc = get_prev_facet(fa);

	test	esi, esi
	je	SHORT $LN318@pop_tri_to
	mov	edx, DWORD PTR [edx+40]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN317@pop_tri_to
$LN318@pop_tri_to:
	mov	edx, DWORD PTR [edx+36]
$LN317@pop_tri_to:

; 2965 :     if ( equal_id(get_facet_body(get_fe_facet(fb)),
; 2966 :             get_facet_body(inverse_id(get_fe_facet(fc)))) )

	mov	esi, eax
	shr	esi, 28					; 0000001cH
	and	esi, 1
	mov	DWORD PTR tv3463[ebp], esi
	jne	SHORT $LN322@pop_tri_to
	mov	edi, DWORD PTR _NULLFACET
	jmp	SHORT $LN321@pop_tri_to
$LN322@pop_tri_to:
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ecx+esi*4]
	mov	edi, DWORD PTR [esi+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN321@pop_tri_to
	xor	edi, 134217728				; 08000000H
$LN321@pop_tri_to:
	cmp	DWORD PTR _web+400, 0
	mov	esi, DWORD PTR _web+236
	jne	SHORT $LN328@pop_tri_to
	mov	DWORD PTR $T95221[ebp], 0
	jmp	SHORT $LN325@pop_tri_to
$LN328@pop_tri_to:
	test	edi, 268435456				; 10000000H
	jne	SHORT $LN327@pop_tri_to
	mov	DWORD PTR $T95221[ebp], 0
	jmp	SHORT $LN325@pop_tri_to
$LN327@pop_tri_to:
	mov	ebx, DWORD PTR _web+328
	test	edi, 134217728				; 08000000H
	je	SHORT $LN326@pop_tri_to
	and	edi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+edi*4]
	mov	edi, DWORD PTR _dymem
	mov	edi, DWORD PTR [ebx+edi+784]
	mov	esi, DWORD PTR [esi+edi+4]
	jmp	SHORT $LN445@pop_tri_to
$LN326@pop_tri_to:
	and	edi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+edi*4]
	mov	edi, DWORD PTR _dymem
	mov	edi, DWORD PTR [ebx+edi+784]
	mov	esi, DWORD PTR [esi+edi]
$LN445@pop_tri_to:
	mov	ebx, DWORD PTR tv3450[ebp]
	mov	DWORD PTR $T95221[ebp], esi
	mov	esi, DWORD PTR _web+236
$LN325@pop_tri_to:
	mov	edi, edx
	shr	edi, 28					; 0000001cH
	and	edi, 1
	mov	DWORD PTR tv3500[ebp], edi
	jne	SHORT $LN332@pop_tri_to
	mov	edi, DWORD PTR _NULLFACET
	jmp	SHORT $LN331@pop_tri_to
$LN332@pop_tri_to:
	mov	edi, edx
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ecx+edi*4]
	mov	edi, DWORD PTR [edi+24]
	test	edx, 134217728				; 08000000H
	je	SHORT $LN331@pop_tri_to
	xor	edi, 134217728				; 08000000H
$LN331@pop_tri_to:
	xor	edi, 134217728				; 08000000H
	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN338@pop_tri_to
	xor	esi, esi
	jmp	SHORT $LN335@pop_tri_to
$LN338@pop_tri_to:
	test	edi, 268435456				; 10000000H
	jne	SHORT $LN337@pop_tri_to
	xor	esi, esi
	jmp	SHORT $LN335@pop_tri_to
$LN337@pop_tri_to:
	mov	ebx, DWORD PTR _web+328
	test	edi, 134217728				; 08000000H
	je	SHORT $LN336@pop_tri_to
	and	edi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+edi*4]
	mov	edi, DWORD PTR _dymem
	mov	edi, DWORD PTR [ebx+edi+784]
	mov	esi, DWORD PTR [esi+edi+4]
	jmp	SHORT $LN446@pop_tri_to
$LN336@pop_tri_to:
	and	edi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+edi*4]
	mov	edi, DWORD PTR _dymem
	mov	edi, DWORD PTR [ebx+edi+784]
	mov	esi, DWORD PTR [esi+edi]
$LN446@pop_tri_to:
	mov	ebx, DWORD PTR tv3450[ebp]
$LN335@pop_tri_to:
	cmp	DWORD PTR $T95221[ebp], esi
	jne	$LN366@pop_tri_to

; 2967 :     { /* have to switch order around edge */
; 2968 :       set_prev_facet(fa,fb);

	mov	esi, DWORD PTR _fa$[ebp]
	mov	edi, esi
	shr	edi, 28					; 0000001cH
	and	edi, 1
	mov	DWORD PTR tv3534[ebp], edi
	je	SHORT $LN428@pop_tri_to
	cmp	DWORD PTR tv3447[ebp], 0
	je	SHORT $LN342@pop_tri_to
	mov	edi, DWORD PTR tv3453[ebp]
	mov	ecx, eax
	xor	ecx, 134217728				; 08000000H
	mov	DWORD PTR [edi+40], ecx
	jmp	SHORT $LN341@pop_tri_to
$LN342@pop_tri_to:
	mov	ecx, DWORD PTR tv3453[ebp]
	mov	DWORD PTR [ecx+36], eax
$LN341@pop_tri_to:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
	mov	ecx, DWORD PTR _web+460
$LN428@pop_tri_to:

; 2969 :       set_prev_facet(fb,fc);

	cmp	DWORD PTR tv3463[ebp], 0
	je	SHORT $LN349@pop_tri_to
	mov	edi, eax
	test	eax, 134217728				; 08000000H
	je	SHORT $LN347@pop_tri_to
	mov	esi, edx
	xor	esi, 134217728				; 08000000H
	and	edi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	DWORD PTR [ecx+40], esi
	mov	esi, DWORD PTR _fa$[ebp]
	jmp	SHORT $LN346@pop_tri_to
$LN347@pop_tri_to:
	and	edi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	DWORD PTR [ecx+36], edx
$LN346@pop_tri_to:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
	mov	ecx, DWORD PTR _web+460
$LN349@pop_tri_to:

; 2970 :       set_prev_facet(fc,fa);

	cmp	DWORD PTR tv3500[ebp], 0
	je	SHORT $LN429@pop_tri_to
	mov	edi, edx
	test	edx, 134217728				; 08000000H
	je	SHORT $LN352@pop_tri_to
	xor	esi, 134217728				; 08000000H
	and	edi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	DWORD PTR [ecx+40], esi
	mov	esi, DWORD PTR _fa$[ebp]
	jmp	SHORT $LN351@pop_tri_to
$LN352@pop_tri_to:
	and	edi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	DWORD PTR [ecx+36], esi
$LN351@pop_tri_to:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
	mov	ecx, DWORD PTR _web+460
$LN429@pop_tri_to:

; 2971 :       set_next_facet(fa,fc);

	cmp	DWORD PTR tv3534[ebp], 0
	je	SHORT $LN356@pop_tri_to
	cmp	DWORD PTR tv3447[ebp], 0
	mov	ecx, DWORD PTR [ebx+ecx]
	je	SHORT $LN357@pop_tri_to
	mov	edi, edx
	xor	edi, 134217728				; 08000000H
	mov	DWORD PTR [ecx+36], edi
	jmp	SHORT $LN447@pop_tri_to
$LN357@pop_tri_to:
	mov	DWORD PTR [ecx+40], edx
$LN447@pop_tri_to:
	mov	ecx, DWORD PTR _web+460
$LN356@pop_tri_to:

; 2972 :       set_next_facet(fc,fb);

	cmp	DWORD PTR tv3500[ebp], 0
	je	SHORT $LN430@pop_tri_to
	test	edx, 134217728				; 08000000H
	je	SHORT $LN362@pop_tri_to
	mov	edi, eax
	xor	edi, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+36], edi
	jmp	SHORT $LN448@pop_tri_to
$LN362@pop_tri_to:
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [ecx+40], eax
$LN448@pop_tri_to:
	mov	ecx, DWORD PTR _web+460
$LN430@pop_tri_to:

; 2973 :       set_next_facet(fb,fa);

	cmp	DWORD PTR tv3463[ebp], 0
	je	SHORT $LN366@pop_tri_to
	test	eax, 134217728				; 08000000H
	je	SHORT $LN367@pop_tri_to
	xor	esi, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx+36], esi
	jmp	SHORT $LN366@pop_tri_to
$LN367@pop_tri_to:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+40], esi
$LN366@pop_tri_to:

; 2974 :     }
; 2975 :   
; 2976 :   if ( web.modeltype == QUADRATIC )

	cmp	DWORD PTR _web+628, 2
	jne	$LN5@pop_tri_to

; 2977 :   { /* fix up edge midpoints */
; 2978 :     vertex_id vv[2];
; 2979 :     int bailcount = 0;
; 2980 :     vv[0] = keepv; vv[1] = newv;

	mov	ecx, DWORD PTR _keepv$[ebp]
	mov	edx, DWORD PTR _newv$[ebp]
	xor	ebx, ebx
	mov	DWORD PTR _vv$90830[ebp], ecx
	mov	DWORD PTR _vv$90830[ebp+4], edx

; 2981 :     /* fix up edge midpoints */
; 2982 :     for ( i = 0 ; i < 2 ; i++ )

	mov	DWORD PTR _i$[ebp], ebx
	npad	8
$LL417@pop_tri_to:

; 2983 :     { edge_id start_e = get_vertex_edge(vv[i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _vv$90830[ebp+eax*4]
	mov	edx, DWORD PTR _web+12
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	edi, DWORD PTR [eax+28]
	mov	DWORD PTR _start_e$90835[ebp], edi
$LL4@pop_tri_to:

; 2984 :       edge_id ea;
; 2985 :       ea = start_e;
; 2986 :       do
; 2987 :       { new_vertex_average(get_edge_midv(ea),VOLKEEP);

	mov	ecx, DWORD PTR _web+124
	mov	eax, DWORD PTR _web+216
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	edx, DWORD PTR [esi+ecx]
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	ecx, DWORD PTR [edx+eax+8]
	push	1
	push	ecx
	call	_new_vertex_average

; 2988 :         ea = get_next_tail_edge(ea);

	mov	edx, DWORD PTR _web+124
	mov	eax, DWORD PTR [esi+edx]
	shr	edi, 27					; 0000001bH

; 2989 :         if ( bailcount++ > 1000 ) break;

	mov	ecx, ebx
	and	edi, 1
	mov	edi, DWORD PTR [eax+edi*4+32]
	add	esp, 8
	inc	ebx
	cmp	ecx, 1000				; 000003e8H
	jg	SHORT $LN2@pop_tri_to

; 2990 :       } while ( !equal_id(ea,start_e));

	cmp	edi, DWORD PTR _start_e$90835[ebp]
	jne	SHORT $LL4@pop_tri_to
$LN2@pop_tri_to:

; 2981 :     /* fix up edge midpoints */
; 2982 :     for ( i = 0 ; i < 2 ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, 2
	jl	$LL417@pop_tri_to
$LN5@pop_tri_to:

; 2991 :     }
; 2992 :   }
; 2993 : 
; 2994 :   fe_reorder(newe);

	mov	edx, DWORD PTR _newe$[ebp]
	push	edx
	call	_fe_reorder
	add	esp, 4
	pop	edi
	pop	esi

; 2995 :  
; 2996 :   return 1; 

	mov	eax, 1
	pop	ebx

; 2997 : } // end pop_tri_to_edge()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN31@pop_tri_to:

; 2882 :   { if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	SHORT $LN30@pop_tri_to

; 2883 :     { sprintf(msg,"pop_tri_to_edge failed after deleting facet %s; didn't find triple of edges in same direction.\n",ELNAME(f_id));

	cmp	DWORD PTR tv2947[ebp], 0
	je	SHORT $LN106@pop_tri_to
	mov	eax, DWORD PTR _f_id$[ebp]
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN107@pop_tri_to
$LN106@pop_tri_to:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN107@pop_tri_to:
	push	eax
	push	OFFSET ??_C@_0GA@CBEDJEN@pop_tri_to_edge?5failed?5after?5del@
$LN439@pop_tri_to:
	mov	eax, DWORD PTR _msg
	push	eax
	call	_sprintf

; 2884 :       outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
$LN437@pop_tri_to:
	call	_outstring
	add	esp, 16					; 00000010H
$LN30@pop_tri_to:

; 2997 : } // end pop_tri_to_edge()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	xor	eax, eax
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_pop_tri_to_edge ENDP
_TEXT	ENDS
PUBLIC	??_C@_0FA@ECLBJDGO@Internal?5error?5after?5pop_vertex_@ ; `string'
PUBLIC	??_C@_0BK@KEHHOLOG@pop_tri_to_edge?5failure?4?6?$AA@ ; `string'
PUBLIC	__real@4018000000000000
PUBLIC	??_C@_0DP@DJENKLCH@pop_edge_to_tri?5bug?3?5edge?5?$CFs?5tai@ ; `string'
PUBLIC	_tail_triples$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_pop_vertex_to_tri
EXTRN	_get_vertex_first_facet:PROC
;	COMDAT ??_C@_0FA@ECLBJDGO@Internal?5error?5after?5pop_vertex_@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0FA@ECLBJDGO@Internal?5error?5after?5pop_vertex_@ DB 'Internal erro'
	DB	'r after pop_vertex_to_tri edge %s, bad topology around vertex'
	DB	' %s.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KEHHOLOG@pop_tri_to_edge?5failure?4?6?$AA@
CONST	SEGMENT
??_C@_0BK@KEHHOLOG@pop_tri_to_edge?5failure?4?6?$AA@ DB 'pop_tri_to_edge '
	DB	'failure.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT __real@4018000000000000
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
CONST	ENDS
;	COMDAT ??_C@_0DP@DJENKLCH@pop_edge_to_tri?5bug?3?5edge?5?$CFs?5tai@
CONST	SEGMENT
??_C@_0DP@DJENKLCH@pop_edge_to_tri?5bug?3?5edge?5?$CFs?5tai@ DB 'pop_edge'
	DB	'_to_tri bug: edge %s tail vertex is %s instead of %s.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\popfilm.c
CONST	ENDS
;	COMDAT _pop_vertex_to_tri
_TEXT	SEGMENT
tv4257 = -216						; size = 4
_newf$ = -212						; size = 4
tv3643 = -208						; size = 4
_start_e$91092 = -208					; size = 4
tv4347 = -204						; size = 4
_eb$ = -204						; size = 4
tv3774 = -200						; size = 4
_count$91072 = -200					; size = 4
tv3733 = -196						; size = 4
_next_fe$91071 = -196					; size = 4
_newefe$91050 = -196					; size = 4
tv2123 = -192						; size = 4
_base_v$91073 = -192					; size = 4
_fea$91047 = -192					; size = 4
_tail_triples$GSCopy$ = -188				; size = 4
_fb$ = -188						; size = 4
tv4221 = -184						; size = 4
_j$ = -184						; size = 4
tv3882 = -180						; size = 4
tv3845 = -180						; size = 4
_fa$ = -180						; size = 4
tv3628 = -176						; size = 4
_fc$ = -176						; size = 4
_fea$91015 = -176					; size = 4
tv4260 = -172						; size = 4
_next_fe$91030 = -172					; size = 4
_next_fe$90989 = -172					; size = 4
tv5342 = -168						; size = 4
tv4271 = -168						; size = 4
tv4135 = -168						; size = 4
tv3776 = -168						; size = 4
tv3617 = -168						; size = 4
_newfe$91017 = -168					; size = 4
tv4343 = -164						; size = 4
tv3620 = -164						; size = 4
$T95469 = -164						; size = 4
_ea$ = -164						; size = 4
tv238 = -164						; size = 4
_newefe$91018 = -164					; size = 4
_i$ = -160						; size = 4
tv4274 = -156						; size = 4
tv3623 = -156						; size = 4
_newfe$91049 = -156					; size = 4
tv4218 = -152						; size = 4
_fe$ = -152						; size = 4
_side1$91059 = -148					; size = 48
_side2$91060 = -100					; size = 48
_head_triples$ = -52					; size = 12
_newv$ = -40						; size = 12
_newfe$ = -28						; size = 12
_newe$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_v_id$ = 8						; size = 4
_tail_triples$ = 12					; size = 4
_pop_vertex_to_tri PROC					; COMDAT

; 3174 : { int i,j;

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _tail_triples$[ebp]
	push	ebx
	push	esi

; 3175 :   vertex_id newv[3],keepv;
; 3176 :   edge_id newe[3];
; 3177 :   facet_id newf;
; 3178 :   facetedge_id newfe[3],fe,fa,fb,fc;
; 3179 :   edge_id ea,eb,ec,ee,head_triples[3];
; 3180 :  
; 3181 :   /* Create new vertices, edges, and facet */
; 3182 :   newv[0] = v_id;

	mov	esi, DWORD PTR _v_id$[ebp]
	push	edi

; 3183 :   newv[1] = dup_vertex(newv[0]);

	push	esi

; 3268 :               next_fe = inverse_id(get_prev_edge(next_fe));

	mov	DWORD PTR _tail_triples$GSCopy$[ebp], eax
	mov	DWORD PTR _newv$[ebp], esi
	call	_dup_vertex
	mov	ebx, eax
	push	esi
	mov	DWORD PTR _newv$[ebp+4], ebx
	call	_dup_vertex
	push	0
	mov	edi, eax
	push	ebx
	push	esi
	mov	DWORD PTR _newv$[ebp+8], edi
	call	_new_edge
	push	0
	push	edi
	push	ebx
	mov	DWORD PTR _newe$[ebp], eax
	call	_new_edge
	push	0
	push	esi
	push	edi
	mov	DWORD PTR _newe$[ebp+4], eax
	call	_new_edge
	push	esi
	mov	DWORD PTR _newe$[ebp+8], eax
	call	_get_vertex_first_facet
	add	esp, 48					; 00000030H
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN78@pop_vertex@2

; 3184 :   newv[2] = dup_vertex(newv[0]);
; 3185 :   newe[0] = new_edge(newv[0],newv[1],NULLID);
; 3186 :   newe[1] = new_edge(newv[1],newv[2],NULLID);
; 3187 :   newe[2] = new_edge(newv[2],newv[0],NULLID);
; 3188 :   fe = get_vertex_first_facet(newv[0]);
; 3189 :   newf = dup_facet(get_fe_facet(fe));

	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN79@pop_vertex@2
$LN78@pop_vertex@2:
	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [ecx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN77@pop_vertex@2
	xor	ecx, 134217728				; 08000000H
$LN77@pop_vertex@2:
	mov	eax, ecx
$LN79@pop_vertex@2:
	push	eax
	call	_dup_facet
	mov	esi, eax

; 3190 :   set_original(newf,NULLID);

	mov	edx, esi
	shr	edx, 29					; 0000001dH
	imul	edx, 112				; 00000070H
	mov	ecx, DWORD PTR _web[edx+12]
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]

; 3191 :   set_facet_body(newf,NULLID);

	push	0
	push	esi
	mov	DWORD PTR _newf$[ebp], esi
	mov	DWORD PTR [edx+20], 0
	call	_set_facet_body

; 3192 :   set_facet_body(inverse_id(newf),NULLID);

	mov	eax, esi
	xor	eax, 134217728				; 08000000H
	push	0
	push	eax
	mov	DWORD PTR tv3643[ebp], eax
	call	_set_facet_body

; 3193 :   newfe[0] = new_facetedge(newf,newe[0]); set_edge_fe(newe[0],newfe[0]);

	mov	edi, DWORD PTR _newe$[ebp]
	push	edi
	push	esi
	call	_new_facetedge
	add	esp, 28					; 0000001cH
	mov	ebx, eax
	mov	DWORD PTR _newfe$[ebp], ebx
	test	edi, 134217728				; 08000000H
	je	SHORT $LN81@pop_vertex@2
	xor	eax, 134217728				; 08000000H
$LN81@pop_vertex@2:
	mov	ecx, DWORD PTR _web+124
	and	edi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edi*4]

; 3194 :   newfe[1] = new_facetedge(newf,newe[1]); set_edge_fe(newe[1],newfe[1]);

	mov	edi, DWORD PTR _newe$[ebp+4]
	mov	DWORD PTR [edx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	push	edi
	push	esi
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	call	_new_facetedge
	add	esp, 8
	mov	DWORD PTR _newfe$[ebp+4], eax
	test	edi, 134217728				; 08000000H
	je	SHORT $LN84@pop_vertex@2
	xor	eax, 134217728				; 08000000H
$LN84@pop_vertex@2:
	mov	edx, DWORD PTR _web+124
	mov	ecx, DWORD PTR _newe$[ebp+4]
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]

; 3195 :   newfe[2] = new_facetedge(newf,newe[2]); set_edge_fe(newe[2],newfe[2]);

	mov	edx, DWORD PTR _newe$[ebp+8]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	push	edx
	push	esi
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	call	_new_facetedge
	add	esp, 8
	test	DWORD PTR _newe$[ebp+8], 134217728	; 08000000H
	mov	edi, eax
	mov	DWORD PTR _newfe$[ebp+8], edi
	je	SHORT $LN480@pop_vertex@2
	xor	eax, 134217728				; 08000000H
$LN480@pop_vertex@2:
	mov	ecx, DWORD PTR _newe$[ebp+8]
	mov	edx, DWORD PTR _web+124
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax

; 3196 :   set_next_edge(newfe[0],newfe[1]);

	test	ebx, 268435456				; 10000000H
	je	SHORT $LN481@pop_vertex@2
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN91@pop_vertex@2
	mov	edx, DWORD PTR _newfe$[ebp+4]
	mov	ecx, DWORD PTR _web+460
	xor	edx, 134217728				; 08000000H
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+28], edx
$LN481@pop_vertex@2:
	mov	eax, DWORD PTR _newfe$[ebp+4]
$LN90@pop_vertex@2:

; 3197 :   set_next_edge(newfe[1],newfe[2]);

	test	eax, 268435456				; 10000000H
	je	SHORT $LN95@pop_vertex@2
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN96@pop_vertex@2
	mov	edx, edi
	xor	edx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+28], edx
	jmp	SHORT $LN95@pop_vertex@2

; 3196 :   set_next_edge(newfe[0],newfe[1]);

$LN91@pop_vertex@2:
	mov	edx, DWORD PTR _web+460
	mov	eax, DWORD PTR _newfe$[ebp+4]
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+32], eax
	jmp	SHORT $LN90@pop_vertex@2

; 3197 :   set_next_edge(newfe[1],newfe[2]);

$LN96@pop_vertex@2:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx+32], edi
$LN95@pop_vertex@2:

; 3198 :   set_next_edge(newfe[2],newfe[0]);

	test	edi, 268435456				; 10000000H
	je	SHORT $LN100@pop_vertex@2
	test	edi, 134217728				; 08000000H
	je	SHORT $LN101@pop_vertex@2
	mov	edx, DWORD PTR _web+460
	mov	eax, ebx
	xor	eax, 134217728				; 08000000H
	mov	ecx, edi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+28], eax
	jmp	SHORT $LN100@pop_vertex@2
$LN101@pop_vertex@2:
	mov	eax, DWORD PTR _web+460
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [ecx+32], ebx
$LN100@pop_vertex@2:

; 3199 :   set_prev_edge(newfe[0],newfe[2]);

	push	edi
	push	ebx
	call	_set_prev_edge

; 3200 :   set_prev_edge(newfe[1],newfe[0]);

	mov	edx, DWORD PTR _newfe$[ebp+4]
	push	ebx
	push	edx
	call	_set_prev_edge

; 3201 :   set_prev_edge(newfe[2],newfe[1]);

	mov	eax, DWORD PTR _newfe$[ebp+4]
	push	eax
	push	edi
	call	_set_prev_edge

; 3202 :   set_facet_fe(newf,newfe[0]);

	push	ebx
	push	esi
	call	_set_facet_fe

; 3203 : 
; 3204 :   /* Reconnect things */
; 3205 :   keepv = newv[0];
; 3206 :   for ( i = 0 ; i < 3 ; i++ )  /* lower triple edges */

	mov	eax, DWORD PTR _newe$[ebp]
	add	esp, 32					; 00000020H
	or	eax, 134217728				; 08000000H
	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR tv3774[ebp], eax
	npad	14
$LL64@pop_vertex@2:

; 3207 :   { facetedge_id next_fe;
; 3208 :     remove_vertex_edge(keepv,tail_triples[i]);

	mov	edi, DWORD PTR _tail_triples$GSCopy$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edi+esi*4]
	mov	edx, DWORD PTR _v_id$[ebp]
	push	ecx
	push	edx
	call	_remove_vertex_edge

; 3209 :     set_edge_tailv(tail_triples[i],newv[i]);

	mov	eax, DWORD PTR _newv$[ebp+esi*4]
	push	eax
	mov	DWORD PTR tv3733[ebp], eax
	mov	eax, DWORD PTR [edi+esi*4]
	push	eax
	call	_set_edge_tailv

; 3210 :     fe = get_edge_fe(tail_triples[i]);

	mov	esi, DWORD PTR [edi+esi*4]
	mov	edx, DWORD PTR _web+124
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	xor	ecx, ecx
	add	esp, 16					; 00000010H
	cmp	eax, ecx
	jne	SHORT $LN106@pop_vertex@2
	mov	DWORD PTR _fe$[ebp], ecx
	jmp	SHORT $LN107@pop_vertex@2
$LN106@pop_vertex@2:
	mov	eax, DWORD PTR [eax+28]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN105@pop_vertex@2
	xor	eax, 134217728				; 08000000H
$LN105@pop_vertex@2:
	mov	DWORD PTR _fe$[ebp], eax
$LN107@pop_vertex@2:

; 3211 :     for ( j = 0 ; j < 3 ; j++ )  /* around the triple edge */

	mov	DWORD PTR _j$[ebp], ecx
	mov	ecx, DWORD PTR _web+460
	npad	12
$LL61@pop_vertex@2:

; 3212 :     { fe = get_next_facet(fe);

	mov	eax, DWORD PTR _fe$[ebp]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN110@pop_vertex@2
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN489@pop_vertex@2
$LN110@pop_vertex@2:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+40]
$LN489@pop_vertex@2:

; 3213 :       next_fe = inverse_id(get_prev_edge(fe));

	mov	edx, eax
	shr	edx, 27					; 0000001bH
	and	edx, 1
	mov	DWORD PTR _fe$[ebp], eax
	mov	DWORD PTR tv3628[ebp], edx
	je	SHORT $LN114@pop_vertex@2
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv3623[ebp], eax
	mov	eax, DWORD PTR [eax+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN113@pop_vertex@2
$LN114@pop_vertex@2:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv3623[ebp], eax
	mov	eax, DWORD PTR [eax+28]
$LN113@pop_vertex@2:
	xor	eax, 134217728				; 08000000H

; 3214 :       for (;;)
; 3215 :       { /* traverse fan of edges */
; 3216 :         vertex_id vv_id;
; 3217 :         edge_id eg,ee;
; 3218 :         eg = get_fe_edge(next_fe);

	mov	edx, eax
	mov	esi, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [edx+20]
	mov	DWORD PTR _next_fe$90989[ebp], eax

; 3219 :         if ( equal_element(eg,newe[0]) ) break;

	mov	eax, esi
	or	eax, 134217728				; 08000000H
	cmp	eax, DWORD PTR tv3774[ebp]
	je	$LN60@pop_vertex@2
	mov	edi, DWORD PTR _newe$[ebp+4]
	or	edi, 134217728				; 08000000H
	mov	DWORD PTR tv3776[ebp], edi
	jmp	SHORT $LN58@pop_vertex@2
	npad	2
$LL466@pop_vertex@2:

; 3213 :       next_fe = inverse_id(get_prev_edge(fe));

	mov	edi, DWORD PTR tv3776[ebp]
$LN58@pop_vertex@2:

; 3220 :         if ( equal_element(eg,newe[1]) ) break;

	cmp	eax, edi
	je	$LN60@pop_vertex@2

; 3221 :         if ( equal_element(eg,newe[2]) ) break;

	mov	edi, DWORD PTR _newe$[ebp+8]
	or	edi, 134217728				; 08000000H
	cmp	eax, edi
	je	$LN60@pop_vertex@2

; 3222 :         vv_id = get_edge_tailv(eg);

	mov	edi, DWORD PTR _web+124
	mov	ebx, DWORD PTR _web+216
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	edi, DWORD PTR _dymem
	test	esi, 134217728				; 08000000H
	je	SHORT $LN120@pop_vertex@2
	add	eax, DWORD PTR [ebx+edi+304]
	mov	ebx, DWORD PTR _web+636
	mov	eax, DWORD PTR [eax+ebx*4]
	jmp	SHORT $LN119@pop_vertex@2
$LN120@pop_vertex@2:
	mov	ebx, DWORD PTR [ebx+edi+304]
	mov	eax, DWORD PTR [eax+ebx]
$LN119@pop_vertex@2:

; 3223 :         if ( !equal_id(vv_id,keepv) && !equal_id(vv_id,newv[i]) )   

	mov	ebx, DWORD PTR _v_id$[ebp]
	cmp	eax, ebx
	je	SHORT $LN53@pop_vertex@2
	cmp	eax, DWORD PTR tv3733[ebp]
	jne	$LN443@pop_vertex@2
$LN53@pop_vertex@2:

; 3229 :         }
; 3230 :         if ( get_next_facet(next_fe) != get_prev_facet(next_fe) )

	mov	edi, DWORD PTR _next_fe$90989[ebp]
	mov	ebx, edi
	shr	ebx, 27					; 0000001bH
	and	ebx, 1
	je	SHORT $LN132@pop_vertex@2
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN490@pop_vertex@2
$LN132@pop_vertex@2:
	mov	eax, DWORD PTR [edx+40]
$LN490@pop_vertex@2:
	mov	DWORD PTR $T95469[ebp], eax
	test	ebx, ebx
	je	SHORT $LN136@pop_vertex@2
	mov	eax, DWORD PTR [edx+40]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN135@pop_vertex@2
$LN136@pop_vertex@2:
	mov	eax, DWORD PTR [edx+36]
$LN135@pop_vertex@2:
	cmp	DWORD PTR $T95469[ebp], eax
	jne	$LN444@pop_vertex@2

; 3269 :             }
; 3270 :           }
; 3271 :           break;  /* done with this way out of triple edge */
; 3272 :         }
; 3273 :         next_fe = get_next_facet(next_fe);

	test	ebx, ebx
	je	SHORT $LN200@pop_vertex@2
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN199@pop_vertex@2
$LN200@pop_vertex@2:
	mov	eax, DWORD PTR [edx+40]
$LN199@pop_vertex@2:

; 3274 :         next_fe = inverse_id(get_prev_edge(next_fe));

	test	eax, 134217728				; 08000000H
	je	SHORT $LN204@pop_vertex@2
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN203@pop_vertex@2
$LN204@pop_vertex@2:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+28]
$LN203@pop_vertex@2:
	xor	eax, 134217728				; 08000000H
	mov	edx, eax
	mov	esi, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [edx+20]
	mov	DWORD PTR _next_fe$90989[ebp], eax
	mov	eax, esi
	or	eax, 134217728				; 08000000H
	cmp	eax, DWORD PTR tv3774[ebp]
	jne	$LL466@pop_vertex@2

; 3219 :         if ( equal_element(eg,newe[0]) ) break;

	jmp	$LN60@pop_vertex@2
$LN443@pop_vertex@2:

; 3224 :         { sprintf(errmsg,
; 3225 :            "pop_edge_to_tri bug: edge %s tail vertex is %s instead of %s.\n",
; 3226 :              ELNAME(eg),ELNAME1(get_edge_tailv(eg)),ELNAME2(keepv));

	test	ebx, 268435456				; 10000000H
	je	SHORT $LN67@pop_vertex@2
	and	ebx, 134217727				; 07ffffffH
	inc	ebx
	push	ebx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames+60
	call	_sprintf
	mov	edi, DWORD PTR _dymem
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv238[ebp], OFFSET _elnames+60
	jmp	SHORT $LN68@pop_vertex@2
$LN67@pop_vertex@2:
	mov	DWORD PTR tv238[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN68@pop_vertex@2:
	mov	eax, DWORD PTR _web+124
	mov	ebx, esi
	and	ebx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR _web+216
	mov	eax, DWORD PTR [eax+edi+304]
	mov	edx, esi
	shr	edx, 27					; 0000001bH
	add	eax, ecx
	and	edx, 1
	je	SHORT $LN124@pop_vertex@2
	mov	ecx, DWORD PTR _web+636
	mov	ecx, DWORD PTR [eax+ecx*4]
	jmp	SHORT $LN123@pop_vertex@2
$LN124@pop_vertex@2:
	mov	ecx, DWORD PTR [eax]
$LN123@pop_vertex@2:
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN69@pop_vertex@2
	test	edx, edx
	je	SHORT $LN128@pop_vertex@2
	mov	ecx, DWORD PTR _web+636
	mov	eax, DWORD PTR [eax+ecx*4]
	jmp	SHORT $LN127@pop_vertex@2
$LN128@pop_vertex@2:
	mov	eax, DWORD PTR [eax]
$LN127@pop_vertex@2:
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames+30
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	edi, OFFSET _elnames+30
	jmp	SHORT $LN70@pop_vertex@2
$LN69@pop_vertex@2:
	mov	edi, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN70@pop_vertex@2:
	test	esi, 268435456				; 10000000H
	je	SHORT $LN71@pop_vertex@2
	inc	ebx
	push	ebx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN72@pop_vertex@2
$LN71@pop_vertex@2:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN72@pop_vertex@2:
	mov	edx, DWORD PTR tv238[ebp]
	push	edx
	push	edi
	push	eax
	push	OFFSET ??_C@_0DP@DJENKLCH@pop_edge_to_tri?5bug?3?5edge?5?$CFs?5tai@
	push	OFFSET _errmsg
	call	_sprintf

; 3227 :           kb_error(2834,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2834					; 00000b12H
	call	_kb_error

; 3228 :           break;

	mov	ecx, DWORD PTR _web+460
	add	esp, 32					; 00000020H
	jmp	$LN60@pop_vertex@2
$LN444@pop_vertex@2:

; 3231 :         { /* have reached next triple edge */
; 3232 :           if ( equal_id(eg,tail_triples[(i+2)%3]) ) break;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 2
	cdq
	mov	ebx, 3
	idiv	ebx
	mov	eax, DWORD PTR _tail_triples$GSCopy$[ebp]
	cmp	esi, DWORD PTR [eax+edx*4]
	je	$LN60@pop_vertex@2

; 3233 :           else if ( equal_id(eg,tail_triples[(i+1)%3]) )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	cdq
	idiv	ebx
	mov	eax, DWORD PTR _tail_triples$GSCopy$[ebp]
	add	edx, edx
	add	edx, edx
	mov	DWORD PTR tv3845[ebp], edx
	cmp	esi, DWORD PTR [eax+edx]
	jne	$LN49@pop_vertex@2

; 3234 :           { /* all lower edges, so go back and split out to triangle edge */
; 3235 :             facetedge_id feb = inverse_id(get_prev_edge(fe));

	mov	edx, DWORD PTR tv3628[ebp]
	mov	eax, DWORD PTR tv3623[ebp]
	test	edx, edx
	je	SHORT $LN140@pop_vertex@2
	mov	ebx, DWORD PTR [eax+32]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN139@pop_vertex@2
$LN140@pop_vertex@2:
	mov	ebx, DWORD PTR [eax+28]
$LN139@pop_vertex@2:
	xor	ebx, 134217728				; 08000000H

; 3236 :             facetedge_id fea = get_prev_edge(fe);

	test	edx, edx
	je	SHORT $LN144@pop_vertex@2
	mov	ecx, DWORD PTR [eax+32]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN491@pop_vertex@2
$LN144@pop_vertex@2:
	mov	ecx, DWORD PTR [eax+28]
$LN491@pop_vertex@2:

; 3237 :             facet_id fa = get_fe_facet(fe);

	test	DWORD PTR _fe$[ebp], 268435456		; 10000000H
	mov	DWORD PTR _fea$91015[ebp], ecx
	jne	SHORT $LN148@pop_vertex@2
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN147@pop_vertex@2
$LN148@pop_vertex@2:
	mov	eax, DWORD PTR [eax+24]
	test	edx, edx
	je	SHORT $LN147@pop_vertex@2
	xor	eax, 134217728				; 08000000H
$LN147@pop_vertex@2:

; 3238 :             facetedge_id newfe = new_facetedge(fa,inverse_id(newe[i]));

	mov	edx, DWORD PTR _i$[ebp]
	mov	edi, DWORD PTR _newe$[ebp+edx*4]
	xor	edi, 134217728				; 08000000H
	push	edi
	push	eax
	call	_new_facetedge

; 3239 :             facetedge_id newefe = get_edge_fe(inverse_id(newe[i]));

	mov	ecx, DWORD PTR _web+124
	mov	esi, eax
	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	add	esp, 8
	mov	DWORD PTR _newfe$91017[ebp], esi
	test	eax, eax
	jne	SHORT $LN152@pop_vertex@2
	xor	edi, edi
	mov	DWORD PTR _newefe$91018[ebp], edi
	jmp	SHORT $LN426@pop_vertex@2
$LN152@pop_vertex@2:
	mov	eax, DWORD PTR [eax+28]
	test	edi, 134217728				; 08000000H
	je	SHORT $LN151@pop_vertex@2
	xor	eax, 134217728				; 08000000H
$LN151@pop_vertex@2:
	mov	edi, eax
	mov	DWORD PTR _newefe$91018[ebp], eax
$LN426@pop_vertex@2:

; 3240 : 
; 3241 :             while ( !equal_id(feb,next_fe) )

	mov	ecx, DWORD PTR _web+460
	cmp	ebx, DWORD PTR _next_fe$90989[ebp]
	je	$LN47@pop_vertex@2
	mov	edx, DWORD PTR tv3845[ebp]
	mov	eax, DWORD PTR _newv$[ebp+edx]
	mov	DWORD PTR tv3882[ebp], eax
	npad	8
$LL48@pop_vertex@2:

; 3242 :             { ee = get_fe_edge(feb);
; 3243 :               remove_vertex_edge(keepv,ee);

	mov	edx, DWORD PTR _v_id$[ebp]
	mov	edi, ebx
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	ecx, DWORD PTR [edi+ecx]
	mov	esi, ebx
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [ecx+20]
	push	esi
	push	edx
	call	_remove_vertex_edge

; 3244 :               set_edge_tailv(ee,newv[(i+1)%3]);

	mov	eax, DWORD PTR tv3882[ebp]
	push	eax
	push	esi
	call	_set_edge_tailv

; 3245 :               feb = get_next_facet(feb);

	mov	ecx, DWORD PTR _web+460
	add	esp, 16					; 00000010H
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN158@pop_vertex@2
	mov	edx, DWORD PTR [edi+ecx]
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN157@pop_vertex@2
$LN158@pop_vertex@2:
	mov	eax, DWORD PTR [edi+ecx]
	mov	eax, DWORD PTR [eax+40]
$LN157@pop_vertex@2:

; 3246 :               feb = inverse_id(get_prev_edge(feb));

	test	eax, 134217728				; 08000000H
	je	SHORT $LN162@pop_vertex@2
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN161@pop_vertex@2
$LN162@pop_vertex@2:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+28]
$LN161@pop_vertex@2:
	xor	eax, 134217728				; 08000000H
	mov	ebx, eax
	cmp	ebx, DWORD PTR _next_fe$90989[ebp]
	jne	$LL48@pop_vertex@2

; 3240 : 
; 3241 :             while ( !equal_id(feb,next_fe) )

	mov	edi, DWORD PTR _newefe$91018[ebp]
	mov	esi, DWORD PTR _newfe$91017[ebp]
$LN47@pop_vertex@2:

; 3247 :             }
; 3248 : 
; 3249 :             set_next_edge(fea,newfe);

	mov	eax, DWORD PTR _fea$91015[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN468@pop_vertex@2
	test	eax, 134217728				; 08000000H
	je	SHORT $LN166@pop_vertex@2
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	mov	ebx, eax
	and	ebx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+ebx*4]
	mov	DWORD PTR [ecx+28], edx
	jmp	SHORT $LN468@pop_vertex@2
$LN166@pop_vertex@2:
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [ecx+32], esi
$LN468@pop_vertex@2:

; 3250 :             set_prev_edge(newfe,fea);

	push	eax
	push	esi
	call	_set_prev_edge

; 3251 :             set_prev_edge(fe,newfe);

	mov	ebx, DWORD PTR _fe$[ebp]
	push	esi
	push	ebx
	call	_set_prev_edge

; 3252 :             set_next_edge(newfe,fe);

	mov	eax, esi
	shr	eax, 28					; 0000001cH
	add	esp, 16					; 00000010H
	and	eax, 1
	je	SHORT $LN482@pop_vertex@2
	test	esi, 134217728				; 08000000H
	je	SHORT $LN171@pop_vertex@2
	mov	ecx, DWORD PTR _web+460
	xor	ebx, 134217728				; 08000000H
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+28], ebx
	mov	ebx, DWORD PTR _fe$[ebp]
	jmp	SHORT $LN482@pop_vertex@2
$LN171@pop_vertex@2:
	mov	edx, DWORD PTR _web+460
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+32], ebx
$LN482@pop_vertex@2:

; 3253 :             set_next_facet(newfe,newefe);

	test	eax, eax
	je	SHORT $LN175@pop_vertex@2
	test	esi, 134217728				; 08000000H
	je	SHORT $LN176@pop_vertex@2
	mov	ecx, DWORD PTR _web+460
	mov	edx, edi
	xor	edx, 134217728				; 08000000H
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+36], edx
	jmp	SHORT $LN175@pop_vertex@2
$LN176@pop_vertex@2:
	mov	edx, DWORD PTR _web+460
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [eax+40], edi
$LN175@pop_vertex@2:

; 3254 :             set_prev_facet(newefe,newfe);

	push	esi
	push	edi
	call	_set_prev_facet
	add	esp, 8

; 3255 :             set_next_facet(newefe,newfe);

	test	edi, 268435456				; 10000000H
	je	SHORT $LN180@pop_vertex@2
	test	edi, 134217728				; 08000000H
	je	SHORT $LN181@pop_vertex@2
	mov	eax, DWORD PTR _web+460
	mov	ecx, esi
	xor	ecx, 134217728				; 08000000H
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [edx+36], ecx
	jmp	SHORT $LN180@pop_vertex@2
$LN181@pop_vertex@2:
	mov	ecx, DWORD PTR _web+460
	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx+40], esi
$LN180@pop_vertex@2:

; 3256 :             set_prev_facet(newfe,newefe);

	push	edi
	push	esi
	call	_set_prev_facet

; 3257 :             cross_cut(newfe,fe);  /* triangulate */

	push	ebx
	push	esi
	call	_cross_cut

; 3258 :           }
; 3259 :           else /* hit one of the head_triples */

	mov	ecx, DWORD PTR _web+460
	add	esp, 16					; 00000010H
	jmp	$LN60@pop_vertex@2
$LN49@pop_vertex@2:

; 3260 :           { /* vertical wall, so reconnect */ 
; 3261 :             head_triples[i] = eg;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _head_triples$[ebp+eax*4], esi

; 3262 :             next_fe = inverse_id(get_prev_edge(next_fe));

	test	edi, 134217728				; 08000000H
	je	SHORT $LN186@pop_vertex@2
	and	edi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edi*4]
	mov	ebx, DWORD PTR [edx+32]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN185@pop_vertex@2
$LN186@pop_vertex@2:
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+edi*4]
	mov	ebx, DWORD PTR [eax+28]
$LN185@pop_vertex@2:
	xor	ebx, 134217728				; 08000000H

; 3263 :             while ( !equal_id(next_fe,fe) )

	cmp	ebx, DWORD PTR _fe$[ebp]
	je	$LN60@pop_vertex@2
	npad	8
$LL45@pop_vertex@2:

; 3264 :             { edge_id ee = get_fe_edge(next_fe);
; 3265 :               remove_vertex_edge(keepv,ee);

	mov	edx, DWORD PTR _v_id$[ebp]
	mov	edi, ebx
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	ecx, DWORD PTR [edi+ecx]
	mov	esi, ebx
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [ecx+20]
	push	esi
	push	edx
	call	_remove_vertex_edge

; 3266 :               set_edge_tailv(ee,newv[i]);

	mov	eax, DWORD PTR tv3733[ebp]
	push	eax
	push	esi
	call	_set_edge_tailv

; 3267 :               next_fe = get_prev_facet(next_fe);

	mov	ecx, DWORD PTR _web+460
	add	esp, 16					; 00000010H
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN192@pop_vertex@2
	mov	edx, DWORD PTR [edi+ecx]
	mov	eax, DWORD PTR [edx+40]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN191@pop_vertex@2
$LN192@pop_vertex@2:
	mov	eax, DWORD PTR [edi+ecx]
	mov	eax, DWORD PTR [eax+36]
$LN191@pop_vertex@2:

; 3268 :               next_fe = inverse_id(get_prev_edge(next_fe));

	test	eax, 134217728				; 08000000H
	je	SHORT $LN196@pop_vertex@2
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	ebx, DWORD PTR [edx+32]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN195@pop_vertex@2
$LN196@pop_vertex@2:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ebx, DWORD PTR [eax+28]
$LN195@pop_vertex@2:
	xor	ebx, 134217728				; 08000000H
	cmp	ebx, DWORD PTR _fe$[ebp]
	jne	$LL45@pop_vertex@2
$LN60@pop_vertex@2:

; 3211 :     for ( j = 0 ; j < 3 ; j++ )  /* around the triple edge */

	mov	eax, DWORD PTR _j$[ebp]
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, 3
	jl	$LL61@pop_vertex@2

; 3203 : 
; 3204 :   /* Reconnect things */
; 3205 :   keepv = newv[0];
; 3206 :   for ( i = 0 ; i < 3 ; i++ )  /* lower triple edges */

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, 3
	jl	$LL64@pop_vertex@2

; 3275 :       }
; 3276 :     }
; 3277 :   } 
; 3278 : 
; 3279 :   /* Now go around head end and reconnect, head_triples having been
; 3280 :      put in proper correspondence above                                 */
; 3281 :   for ( i = 0 ; i < 3 ; i++ )  /* upper triple edges */

	xor	edi, edi
	mov	DWORD PTR _i$[ebp], edi
$LL479@pop_vertex@2:

; 3282 :   { facetedge_id next_fe;
; 3283 :     remove_vertex_edge(keepv,head_triples[i]);

	mov	esi, DWORD PTR _head_triples$[ebp+edi*4]
	mov	ecx, DWORD PTR _v_id$[ebp]
	push	esi
	push	ecx
	call	_remove_vertex_edge

; 3284 :     set_edge_tailv(head_triples[i],newv[i]);

	mov	edx, DWORD PTR _newv$[ebp+edi*4]
	push	edx
	push	esi
	call	_set_edge_tailv

; 3285 :     fe = get_edge_fe(head_triples[i]);

	mov	ecx, DWORD PTR _web+124
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN207@pop_vertex@2
$LN208@pop_vertex@2:
	mov	eax, DWORD PTR [eax+28]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN207@pop_vertex@2
	xor	eax, 134217728				; 08000000H
$LN207@pop_vertex@2:

; 3286 :     for ( j = 0 ; j < 3 ; j++ )  /* around the triple edge */

	mov	ecx, DWORD PTR _web+460
	mov	ebx, DWORD PTR _dymem
	mov	DWORD PTR _j$[ebp], 0
$LL40@pop_vertex@2:

; 3287 :     { fe = get_next_facet(fe);

	test	eax, 134217728				; 08000000H
	je	SHORT $LN212@pop_vertex@2
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN492@pop_vertex@2
$LN212@pop_vertex@2:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+40]
$LN492@pop_vertex@2:

; 3288 :       next_fe = inverse_id(get_prev_edge(fe));

	mov	edx, eax
	shr	edx, 27					; 0000001bH
	and	edx, 1
	mov	DWORD PTR _fe$[ebp], eax
	mov	DWORD PTR tv3628[ebp], edx
	je	SHORT $LN216@pop_vertex@2
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv3620[ebp], eax
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR tv3623[ebp], eax
	mov	eax, DWORD PTR [eax+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN215@pop_vertex@2
$LN216@pop_vertex@2:
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv3620[ebp], eax
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR tv3623[ebp], eax
	mov	eax, DWORD PTR [eax+28]
$LN215@pop_vertex@2:
	xor	eax, 134217728				; 08000000H
	mov	edi, eax
	mov	DWORD PTR _next_fe$91030[ebp], edi
	npad	6
$LL37@pop_vertex@2:

; 3289 :       for (;;)
; 3290 :       { /* traverse fan of edges */
; 3291 :         edge_id eg;
; 3292 :         if ( !equal_id(get_fe_tailv(next_fe),keepv) ) break;

	mov	esi, DWORD PTR _web+124
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [edx+20]
	mov	eax, edi
	and	eax, 134217728				; 08000000H
	xor	ecx, eax
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	esi, DWORD PTR _web+216
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN222@pop_vertex@2
	add	eax, DWORD PTR [esi+ebx+304]
	mov	esi, DWORD PTR _web+636
	mov	eax, DWORD PTR [eax+esi*4]
	jmp	SHORT $LN221@pop_vertex@2
$LN222@pop_vertex@2:
	mov	esi, DWORD PTR [esi+ebx+304]
	mov	eax, DWORD PTR [eax+esi]
$LN221@pop_vertex@2:
	cmp	eax, DWORD PTR _v_id$[ebp]
	jne	$LN472@pop_vertex@2

; 3293 :         eg = get_fe_edge(next_fe);
; 3294 :         if ( get_next_facet(next_fe) != get_prev_facet(next_fe) )

	shr	edi, 27					; 0000001bH
	and	edi, 1
	je	SHORT $LN228@pop_vertex@2
	mov	esi, DWORD PTR [edx+36]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN227@pop_vertex@2
$LN228@pop_vertex@2:
	mov	esi, DWORD PTR [edx+40]
$LN227@pop_vertex@2:
	test	edi, edi
	je	SHORT $LN232@pop_vertex@2
	mov	eax, DWORD PTR [edx+40]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN231@pop_vertex@2
$LN232@pop_vertex@2:
	mov	eax, DWORD PTR [edx+36]
$LN231@pop_vertex@2:
	cmp	esi, eax
	jne	SHORT $LN446@pop_vertex@2

; 3326 :           }
; 3327 :           else /* hit one of the head_triples */
; 3328 :           { /* vertical wall, but those already reconnected */ 
; 3329 :           }
; 3330 :           break;  /* done with this way out of triple edge */
; 3331 :         }
; 3332 :         next_fe = get_next_facet(next_fe);

	test	edi, edi
	je	SHORT $LN310@pop_vertex@2
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN309@pop_vertex@2
$LN310@pop_vertex@2:
	mov	eax, DWORD PTR [edx+40]
$LN309@pop_vertex@2:

; 3333 :         next_fe = inverse_id(get_prev_edge(next_fe));

	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN314@pop_vertex@2
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	xor	eax, 134217728				; 08000000H
	mov	edi, eax
	mov	DWORD PTR _next_fe$91030[ebp], eax

; 3334 :       }

	jmp	$LL37@pop_vertex@2

; 3333 :         next_fe = inverse_id(get_prev_edge(next_fe));

$LN314@pop_vertex@2:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	mov	edi, eax
	mov	DWORD PTR _next_fe$91030[ebp], eax

; 3334 :       }

	jmp	$LL37@pop_vertex@2
$LN446@pop_vertex@2:

; 3295 :         { /* have reached next triple edge */
; 3296 :           if ( equal_id(eg,head_triples[(i+2)%3]) ) break;

	mov	edi, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [edi+2]
	cdq
	mov	esi, 3
	idiv	esi
	cmp	ecx, DWORD PTR _head_triples$[ebp+edx*4]
	je	$LN471@pop_vertex@2

; 3297 :           if ( equal_element(eg,newe[0]) ) break;

	mov	eax, ecx
	or	eax, 134217728				; 08000000H
	cmp	eax, DWORD PTR tv3774[ebp]
	je	$LN471@pop_vertex@2

; 3298 :           if ( equal_element(eg,newe[1]) ) break;

	mov	edx, DWORD PTR _newe$[ebp+4]
	or	edx, 134217728				; 08000000H
	cmp	eax, edx
	je	$LN471@pop_vertex@2

; 3299 :           if ( equal_element(eg,newe[2]) ) break;

	mov	edx, DWORD PTR _newe$[ebp+8]
	or	edx, 134217728				; 08000000H
	cmp	eax, edx
	je	$LN471@pop_vertex@2

; 3300 :           else if ( equal_id(eg,head_triples[(i+1)%3]) )

	lea	eax, DWORD PTR [edi+1]
	cdq
	idiv	esi
	add	edx, edx
	add	edx, edx
	mov	DWORD PTR tv3845[ebp], edx
	cmp	ecx, DWORD PTR _head_triples$[ebp+edx]
	jne	$LN471@pop_vertex@2

; 3301 :           { /* all upper edges, so go back and split out to triangle edge */
; 3302 :             facetedge_id feb = inverse_id(get_prev_edge(fe));

	mov	edx, DWORD PTR tv3628[ebp]
	mov	ecx, DWORD PTR tv3623[ebp]
	test	edx, edx
	je	SHORT $LN236@pop_vertex@2
	mov	ebx, DWORD PTR [ecx+32]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN235@pop_vertex@2
$LN236@pop_vertex@2:
	mov	ebx, DWORD PTR [ecx+28]
$LN235@pop_vertex@2:
	xor	ebx, 134217728				; 08000000H

; 3303 :             facetedge_id fea = get_prev_edge(fe);

	test	edx, edx
	je	SHORT $LN240@pop_vertex@2
	mov	edi, DWORD PTR [ecx+32]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN493@pop_vertex@2
$LN240@pop_vertex@2:
	mov	edi, DWORD PTR [ecx+28]
$LN493@pop_vertex@2:

; 3304 :             facet_id fa = get_fe_facet(fe);

	mov	eax, DWORD PTR _fe$[ebp]
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR _fea$91047[ebp], edi
	mov	DWORD PTR tv3617[ebp], eax
	jne	SHORT $LN244@pop_vertex@2
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN243@pop_vertex@2
$LN244@pop_vertex@2:
	mov	eax, DWORD PTR [ecx+24]
	test	edx, edx
	je	SHORT $LN243@pop_vertex@2
	xor	eax, 134217728				; 08000000H
$LN243@pop_vertex@2:

; 3305 :             facetedge_id newfe = new_facetedge(inverse_id(fa),newe[i]);

	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _newe$[ebp+ecx*4]
	xor	eax, 134217728				; 08000000H
	push	esi
	push	eax
	call	_new_facetedge

; 3306 :             facetedge_id newefe = get_edge_fe(newe[i]);

	mov	ecx, DWORD PTR _web+124
	mov	edx, eax
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	add	esp, 8
	mov	DWORD PTR _newfe$91049[ebp], edx
	test	eax, eax
	jne	SHORT $LN248@pop_vertex@2
	xor	ecx, ecx
	mov	DWORD PTR _newefe$91050[ebp], ecx
	jmp	SHORT $LN431@pop_vertex@2
$LN248@pop_vertex@2:
	mov	eax, DWORD PTR [eax+28]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN247@pop_vertex@2
	xor	eax, 134217728				; 08000000H
$LN247@pop_vertex@2:
	mov	ecx, eax
	mov	DWORD PTR _newefe$91050[ebp], eax
$LN431@pop_vertex@2:

; 3307 : 
; 3308 :             while ( !equal_id(feb,next_fe) )

	cmp	ebx, DWORD PTR _next_fe$91030[ebp]
	je	$LN464@pop_vertex@2
	mov	edx, DWORD PTR tv3845[ebp]
	mov	eax, DWORD PTR _newv$[ebp+edx]
	mov	DWORD PTR tv3882[ebp], eax
	mov	eax, DWORD PTR _web+460
	npad	9
$LL27@pop_vertex@2:

; 3309 :             { ee = get_fe_edge(feb);
; 3310 :               remove_vertex_edge(keepv,ee);

	mov	edx, DWORD PTR _v_id$[ebp]
	mov	edi, ebx
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	ecx, DWORD PTR [edi+eax]
	mov	esi, ebx
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [ecx+20]
	push	esi
	push	edx
	call	_remove_vertex_edge

; 3311 :               set_edge_tailv(ee,newv[(i+1)%3]);

	mov	eax, DWORD PTR tv3882[ebp]
	push	eax
	push	esi
	call	_set_edge_tailv

; 3312 :               feb = get_next_facet(feb);

	mov	eax, DWORD PTR _web+460
	add	esp, 16					; 00000010H
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN254@pop_vertex@2
	mov	ecx, DWORD PTR [edi+eax]
	mov	ecx, DWORD PTR [ecx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN253@pop_vertex@2
$LN254@pop_vertex@2:
	mov	edx, DWORD PTR [edi+eax]
	mov	ecx, DWORD PTR [edx+40]
$LN253@pop_vertex@2:

; 3313 :               feb = inverse_id(get_prev_edge(feb));

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN258@pop_vertex@2
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [ecx+32]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN257@pop_vertex@2
$LN258@pop_vertex@2:
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [edx+28]
$LN257@pop_vertex@2:
	xor	ecx, 134217728				; 08000000H
	mov	ebx, ecx
	cmp	ebx, DWORD PTR _next_fe$91030[ebp]
	jne	$LL27@pop_vertex@2

; 3307 : 
; 3308 :             while ( !equal_id(feb,next_fe) )

	mov	ecx, DWORD PTR _newefe$91050[ebp]
	mov	edx, DWORD PTR _newfe$91049[ebp]
	mov	edi, DWORD PTR _fea$91047[ebp]
	jmp	SHORT $LN26@pop_vertex@2
$LN464@pop_vertex@2:
	mov	eax, DWORD PTR _web+460
$LN26@pop_vertex@2:

; 3314 :             }
; 3315 : 
; 3316 :             set_next_edge(fea,inverse_id(newfe));

	mov	esi, edx
	xor	esi, 134217728				; 08000000H
	test	edi, 268435456				; 10000000H
	je	SHORT $LN469@pop_vertex@2
	mov	ebx, edi
	test	edi, 134217728				; 08000000H
	je	SHORT $LN262@pop_vertex@2
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	and	ebx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ebx*4]
	mov	DWORD PTR [eax+28], edx
	mov	edx, DWORD PTR _newfe$91049[ebp]
	jmp	SHORT $LN494@pop_vertex@2
$LN262@pop_vertex@2:
	and	ebx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ebx*4]
	mov	DWORD PTR [eax+32], esi
$LN494@pop_vertex@2:
	mov	eax, DWORD PTR _web+460
$LN469@pop_vertex@2:

; 3317 :             set_prev_edge(inverse_id(newfe),fea);

	mov	ebx, esi
	shr	ebx, 28					; 0000001cH
	and	ebx, 1
	je	SHORT $LN484@pop_vertex@2
	mov	edx, esi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN267@pop_vertex@2
	xor	edi, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+32], edi
	jmp	SHORT $LN266@pop_vertex@2
$LN267@pop_vertex@2:
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+28], edi
$LN266@pop_vertex@2:
	mov	eax, DWORD PTR _global_timestamp
	mov	edx, DWORD PTR _newfe$91049[ebp]
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN484@pop_vertex@2:

; 3318 :             set_prev_edge(fe,inverse_id(newfe));

	cmp	DWORD PTR tv3617[ebp], 0
	je	SHORT $LN274@pop_vertex@2
	cmp	DWORD PTR tv3628[ebp], 0
	mov	edi, DWORD PTR tv3620[ebp]
	mov	eax, DWORD PTR [edi+eax]
	je	SHORT $LN272@pop_vertex@2
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	mov	DWORD PTR [eax+32], edx
	mov	edx, DWORD PTR _newfe$91049[ebp]
	jmp	SHORT $LN271@pop_vertex@2
$LN272@pop_vertex@2:
	mov	DWORD PTR [eax+28], esi
$LN271@pop_vertex@2:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN274@pop_vertex@2:

; 3319 :             set_next_edge(inverse_id(newfe),fe);

	test	ebx, ebx
	je	SHORT $LN470@pop_vertex@2
	test	esi, 134217728				; 08000000H
	je	SHORT $LN277@pop_vertex@2
	mov	edi, DWORD PTR _fe$[ebp]
	xor	edi, 134217728				; 08000000H
	mov	ebx, esi
	and	ebx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ebx*4]
	mov	DWORD PTR [eax+28], edi
	jmp	SHORT $LN495@pop_vertex@2
$LN277@pop_vertex@2:
	mov	edi, esi
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edi*4]
	mov	edi, DWORD PTR _fe$[ebp]
	mov	DWORD PTR [eax+32], edi
$LN495@pop_vertex@2:
	mov	eax, DWORD PTR _web+460
$LN470@pop_vertex@2:

; 3320 :             set_next_facet(newfe,newefe);

	mov	edi, edx
	shr	edi, 28					; 0000001cH
	and	edi, 1
	mov	DWORD PTR tv4135[ebp], edi
	je	SHORT $LN485@pop_vertex@2
	test	edx, 134217728				; 08000000H
	je	SHORT $LN282@pop_vertex@2
	mov	edi, ecx
	xor	edi, 134217728				; 08000000H
	mov	ebx, edx
	and	ebx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ebx*4]
	mov	DWORD PTR [eax+36], edi
	jmp	SHORT $LN496@pop_vertex@2
$LN282@pop_vertex@2:
	mov	edi, edx
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR [eax+40], ecx
$LN496@pop_vertex@2:
	mov	eax, DWORD PTR _web+460
$LN485@pop_vertex@2:

; 3321 :             set_prev_facet(newefe,newfe);

	test	ecx, 268435456				; 10000000H
	je	SHORT $LN289@pop_vertex@2
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN287@pop_vertex@2
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+40], esi
	jmp	SHORT $LN286@pop_vertex@2
$LN287@pop_vertex@2:
	mov	edi, ecx
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR [eax+36], edx
$LN286@pop_vertex@2:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN289@pop_vertex@2:

; 3322 :             set_prev_facet(newfe,get_next_facet(newefe));

	mov	ebx, ecx
	and	ecx, 134217727				; 07ffffffH
	shr	ebx, 27					; 0000001bH
	add	ecx, ecx
	and	ebx, 1
	lea	edi, DWORD PTR [ecx+ecx]
	je	SHORT $LN292@pop_vertex@2
	mov	ecx, DWORD PTR [edi+eax]
	mov	ecx, DWORD PTR [ecx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN291@pop_vertex@2
$LN292@pop_vertex@2:
	mov	edx, DWORD PTR [edi+eax]
	mov	ecx, DWORD PTR [edx+40]
$LN291@pop_vertex@2:
	cmp	DWORD PTR tv4135[ebp], 0
	je	SHORT $LN298@pop_vertex@2
	mov	edx, DWORD PTR _newfe$91049[ebp]
	test	edx, 134217728				; 08000000H
	je	SHORT $LN296@pop_vertex@2
	xor	ecx, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+40], ecx
	jmp	SHORT $LN295@pop_vertex@2
$LN296@pop_vertex@2:
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [edx+36], ecx
$LN295@pop_vertex@2:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN298@pop_vertex@2:

; 3323 :             set_next_facet(get_next_facet(newefe),newfe);

	test	ebx, ebx
	je	SHORT $LN301@pop_vertex@2
	mov	ecx, DWORD PTR [edi+eax]
	mov	ecx, DWORD PTR [ecx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN300@pop_vertex@2
$LN301@pop_vertex@2:
	mov	edx, DWORD PTR [edi+eax]
	mov	ecx, DWORD PTR [edx+40]
$LN300@pop_vertex@2:
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN304@pop_vertex@2
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN305@pop_vertex@2
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [eax+36], esi
	jmp	SHORT $LN304@pop_vertex@2
$LN305@pop_vertex@2:
	mov	edx, DWORD PTR _newfe$91049[ebp]
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [ecx+40], edx
$LN304@pop_vertex@2:

; 3324 : 
; 3325 :             cross_cut(inverse_id(newfe),fe);  /* triangulate */

	mov	eax, DWORD PTR _fe$[ebp]
	push	eax
	push	esi
	call	_cross_cut
	mov	ebx, DWORD PTR _dymem
	add	esp, 8
$LN472@pop_vertex@2:
	mov	edi, DWORD PTR _i$[ebp]
$LN471@pop_vertex@2:

; 3286 :     for ( j = 0 ; j < 3 ; j++ )  /* around the triple edge */

	mov	edx, DWORD PTR _j$[ebp]

; 3324 : 
; 3325 :             cross_cut(inverse_id(newfe),fe);  /* triangulate */

	mov	ecx, DWORD PTR _web+460
	mov	eax, DWORD PTR _fe$[ebp]
	inc	edx
	mov	DWORD PTR _j$[ebp], edx
	cmp	edx, 3
	jl	$LL40@pop_vertex@2

; 3275 :       }
; 3276 :     }
; 3277 :   } 
; 3278 : 
; 3279 :   /* Now go around head end and reconnect, head_triples having been
; 3280 :      put in proper correspondence above                                 */
; 3281 :   for ( i = 0 ; i < 3 ; i++ )  /* upper triple edges */

	inc	edi
	mov	DWORD PTR _i$[ebp], edi
	cmp	edi, 3
	jl	$LL479@pop_vertex@2

; 3335 :     }
; 3336 :   } 
; 3337 : 
; 3338 :   /* Spread new vertices */
; 3339 :   for ( i = 0 ; i < 3 ; i++ ) /* the vertices */

	mov	edi, DWORD PTR _tail_triples$GSCopy$[ebp]
	lea	ebx, DWORD PTR _newv$[ebp]
	lea	eax, DWORD PTR _head_triples$[ebp]
	sub	ebx, edi
	sub	eax, edi
	mov	DWORD PTR tv5342[ebp], eax
	mov	DWORD PTR tv2123[ebp], 3
	npad	8
$LL465@pop_vertex@2:

; 3340 :   { REAL *x,side1[MAXCOORD],side2[MAXCOORD];
; 3341 :     x = get_coord(newv[i]);

	mov	ecx, DWORD PTR [ebx+edi]
	mov	edx, DWORD PTR _web+12
	mov	eax, DWORD PTR _web+104
	and	ecx, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _dymem
	add	esi, DWORD PTR [eax+ecx+64]

; 3342 :     get_edge_side(tail_triples[i],side1);

	mov	eax, DWORD PTR [edi]
	lea	edx, DWORD PTR _side1$91059[ebp]
	push	edx
	push	eax
	call	_get_edge_side

; 3343 :     get_edge_side(head_triples[i],side2);

	mov	edx, DWORD PTR tv5342[ebp]
	mov	eax, DWORD PTR [edx+edi]
	lea	ecx, DWORD PTR _side2$91060[ebp]
	push	ecx
	push	eax
	call	_get_edge_side

; 3344 :     for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	add	esp, 16					; 00000010H
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN23@pop_vertex@2
	fld	QWORD PTR __real@4018000000000000
$LN21@pop_vertex@2:

; 3345 :       x[j] += (side1[j]+side2[j])/6;

	fld	QWORD PTR _side2$91060[ebp+eax*8]
	inc	eax
	fadd	QWORD PTR _side1$91059[ebp+eax*8-8]
	fdiv	ST(0), ST(1)
	fadd	QWORD PTR [esi+eax*8-8]
	fstp	QWORD PTR [esi+eax*8-8]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN21@pop_vertex@2

; 3344 :     for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(0)
$LN23@pop_vertex@2:

; 3335 :     }
; 3336 :   } 
; 3337 : 
; 3338 :   /* Spread new vertices */
; 3339 :   for ( i = 0 ; i < 3 ; i++ ) /* the vertices */

	add	edi, 4
	dec	DWORD PTR tv2123[ebp]
	jne	$LL465@pop_vertex@2

; 3346 :   }
; 3347 : 
; 3348 :   /* Fix up facet edge orders */
; 3349 :   for ( i = 0 ; i < 3 ; i++ )

	mov	ecx, DWORD PTR _web+460
	xor	eax, eax
	mov	DWORD PTR _i$[ebp], eax
$LL18@pop_vertex@2:

; 3350 :   { facetedge_id next_fe;
; 3351 :     int count;
; 3352 :     vertex_id base_v;
; 3353 :     fa = newfe[i];

	mov	edx, DWORD PTR _newfe$[ebp+eax*4]

; 3354 :     fb = get_next_facet(fa);

	mov	edi, edx
	shr	edi, 27					; 0000001bH
	and	edi, 1
	mov	DWORD PTR _fa$[ebp], edx
	mov	DWORD PTR tv4218[ebp], edi
	mov	eax, edx
	je	SHORT $LN318@pop_vertex@2
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv4221[ebp], eax
	mov	eax, DWORD PTR [eax+ecx]
	mov	esi, DWORD PTR [eax+36]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN497@pop_vertex@2
$LN318@pop_vertex@2:
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv4221[ebp], eax
	mov	eax, DWORD PTR [eax+ecx]
	mov	esi, DWORD PTR [eax+40]
$LN497@pop_vertex@2:
	mov	DWORD PTR _fb$[ebp], esi

; 3355 :     fc = get_prev_facet(fa);

	test	edi, edi
	je	SHORT $LN322@pop_vertex@2
	mov	ebx, DWORD PTR [eax+40]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN498@pop_vertex@2
$LN322@pop_vertex@2:
	mov	ebx, DWORD PTR [eax+36]
$LN498@pop_vertex@2:

; 3356 :     ea = get_fe_edge(fa);

	and	edx, 134217728				; 08000000H
	xor	edx, DWORD PTR [eax+20]
	mov	DWORD PTR _fc$[ebp], ebx
	mov	DWORD PTR _ea$[ebp], edx

; 3357 :     eb = get_fe_edge(inverse_id(get_prev_edge(fa)));

	test	edi, edi
	je	SHORT $LN328@pop_vertex@2
	mov	eax, DWORD PTR [eax+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN327@pop_vertex@2
$LN328@pop_vertex@2:
	mov	eax, DWORD PTR [eax+28]
$LN327@pop_vertex@2:

; 3358 :     base_v = get_edge_tailv(ea);

	mov	ebx, DWORD PTR _dymem
	xor	eax, 134217728				; 08000000H
	mov	edi, eax
	and	eax, 134217728				; 08000000H
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ecx+edi*4]
	xor	eax, DWORD PTR [edi+20]
	mov	DWORD PTR _eb$[ebp], eax
	mov	eax, edx
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR tv4257[ebp], eax
	mov	eax, DWORD PTR _web+124
	je	SHORT $LN334@pop_vertex@2
	and	edx, 134217727				; 07ffffffH
	add	edx, edx
	add	edx, edx
	mov	DWORD PTR tv4260[ebp], edx
	mov	edx, DWORD PTR [edx+eax]
	mov	eax, DWORD PTR _web+216
	add	edx, DWORD PTR [eax+ebx+304]
	mov	eax, DWORD PTR _web+636
	mov	edx, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN499@pop_vertex@2
$LN334@pop_vertex@2:
	and	edx, 134217727				; 07ffffffH
	add	edx, edx
	add	edx, edx
	mov	DWORD PTR tv4260[ebp], edx
	mov	edx, DWORD PTR [edx+eax]
	mov	eax, DWORD PTR _web+216
	mov	eax, DWORD PTR [eax+ebx+304]
	mov	edx, DWORD PTR [edx+eax]
$LN499@pop_vertex@2:

; 3359 :     next_fe = inverse_id(get_prev_edge(fb));

	mov	eax, esi
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR tv4271[ebp], eax
	mov	DWORD PTR _base_v$91073[ebp], edx
	mov	eax, esi
	je	SHORT $LN338@pop_vertex@2
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv4274[ebp], eax
	mov	eax, DWORD PTR [eax+ecx]
	mov	eax, DWORD PTR [eax+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN337@pop_vertex@2
$LN338@pop_vertex@2:
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	edx, DWORD PTR [eax+ecx]
	mov	DWORD PTR tv4274[ebp], eax
	mov	eax, DWORD PTR [edx+28]
$LN337@pop_vertex@2:
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR _next_fe$91071[ebp], eax

; 3360 :     for(count=0;count < 10000 ;count++)

	mov	DWORD PTR _count$91072[ebp], 0
$LL15@pop_vertex@2:

; 3361 :     { ec = get_fe_edge(next_fe);

	mov	edi, eax
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	mov	esi, eax
	add	edi, edi
	mov	edx, DWORD PTR [edi+ecx]
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [edx+20]

; 3362 :       if ( !equal_id(get_edge_tailv(ec),base_v) )

	mov	edx, DWORD PTR _web+124
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+216
	test	esi, 134217728				; 08000000H
	je	SHORT $LN344@pop_vertex@2
	add	eax, DWORD PTR [edx+ebx+304]
	mov	edx, DWORD PTR _web+636
	mov	eax, DWORD PTR [eax+edx*4]
	jmp	SHORT $LN343@pop_vertex@2
$LN344@pop_vertex@2:
	mov	edx, DWORD PTR [edx+ebx+304]
	mov	eax, DWORD PTR [eax+edx]
	mov	ebx, DWORD PTR _dymem
$LN343@pop_vertex@2:
	cmp	eax, DWORD PTR _base_v$91073[ebp]
	je	SHORT $LN473@pop_vertex@2

; 3363 :         kb_error(2833,"pop_tri_to_edge failure.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0BK@KEHHOLOG@pop_tri_to_edge?5failure?4?6?$AA@
	push	2833					; 00000b11H
	call	_kb_error
	mov	ecx, DWORD PTR _web+460
	mov	ebx, DWORD PTR _dymem
	add	esp, 12					; 0000000cH
$LN473@pop_vertex@2:

; 3364 :       if ( equal_id(ec,ea) )

	cmp	esi, DWORD PTR _ea$[ebp]
	je	$LN477@pop_vertex@2

; 3365 :         break; /* ok */
; 3366 :       if ( equal_id(ec,eb) )

	cmp	esi, DWORD PTR _eb$[ebp]
	je	SHORT $LN448@pop_vertex@2

; 3374 :         break;
; 3375 :       }
; 3376 :       next_fe = inverse_id(get_prev_edge(get_prev_facet(next_fe)));

	test	DWORD PTR _next_fe$91071[ebp], 134217728 ; 08000000H
	je	SHORT $LN378@pop_vertex@2
	mov	eax, DWORD PTR [edi+ecx]
	mov	eax, DWORD PTR [eax+40]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN377@pop_vertex@2
$LN378@pop_vertex@2:
	mov	edx, DWORD PTR [edi+ecx]
	mov	eax, DWORD PTR [edx+36]
$LN377@pop_vertex@2:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN382@pop_vertex@2
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN381@pop_vertex@2
$LN382@pop_vertex@2:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]
$LN381@pop_vertex@2:

; 3360 :     for(count=0;count < 10000 ;count++)

	mov	edx, DWORD PTR _count$91072[ebp]
	inc	edx

; 3374 :         break;
; 3375 :       }
; 3376 :       next_fe = inverse_id(get_prev_edge(get_prev_facet(next_fe)));

	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR _next_fe$91071[ebp], eax
	mov	DWORD PTR _count$91072[ebp], edx
	cmp	edx, 10000				; 00002710H
	jl	$LL15@pop_vertex@2

; 3403 :       } while ( !equal_id(ea,start_e));

	jmp	$LN461@pop_vertex@2
$LN448@pop_vertex@2:

; 3367 :       { /* have to switch order around edge */
; 3368 :         set_prev_facet(fa,fb);

	mov	edi, DWORD PTR _fa$[ebp]
	mov	ebx, edi
	shr	ebx, 28					; 0000001cH
	and	ebx, 1
	mov	DWORD PTR tv4343[ebp], ebx
	je	SHORT $LN474@pop_vertex@2
	cmp	DWORD PTR tv4218[ebp], 0
	je	SHORT $LN348@pop_vertex@2
	mov	edx, DWORD PTR _fb$[ebp]
	mov	esi, DWORD PTR tv4221[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	eax, edx
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR [ecx+40], eax
	jmp	SHORT $LN347@pop_vertex@2
$LN348@pop_vertex@2:
	mov	edx, DWORD PTR tv4221[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	edx, DWORD PTR _fb$[ebp]
	mov	DWORD PTR [eax+36], edx
$LN347@pop_vertex@2:
	mov	eax, DWORD PTR _global_timestamp
	mov	ecx, DWORD PTR _web+460
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	jmp	SHORT $LN350@pop_vertex@2
$LN474@pop_vertex@2:
	mov	edx, DWORD PTR _fb$[ebp]
$LN350@pop_vertex@2:

; 3369 :         set_prev_facet(fb,fc);

	mov	eax, edx
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv4347[ebp], eax
	je	SHORT $LN475@pop_vertex@2
	cmp	DWORD PTR tv4271[ebp], 0
	je	SHORT $LN353@pop_vertex@2
	mov	eax, DWORD PTR _fc$[ebp]
	mov	ebx, DWORD PTR tv4274[ebp]
	mov	ecx, DWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR tv4343[ebp]
	mov	esi, eax
	xor	esi, 134217728				; 08000000H
	mov	DWORD PTR [ecx+40], esi
	jmp	SHORT $LN352@pop_vertex@2
$LN353@pop_vertex@2:
	mov	eax, DWORD PTR tv4274[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	eax, DWORD PTR _fc$[ebp]
	mov	DWORD PTR [ecx+36], eax
$LN352@pop_vertex@2:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
	mov	ecx, DWORD PTR _web+460
	jmp	SHORT $LN355@pop_vertex@2
$LN475@pop_vertex@2:
	mov	eax, DWORD PTR _fc$[ebp]
$LN355@pop_vertex@2:

; 3370 :         set_prev_facet(fc,fa);

	mov	esi, eax
	shr	esi, 28					; 0000001cH
	and	esi, 1
	je	SHORT $LN476@pop_vertex@2
	mov	ebx, eax
	test	eax, 134217728				; 08000000H
	je	SHORT $LN358@pop_vertex@2
	xor	edi, 134217728				; 08000000H
	and	ebx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+ebx*4]
	mov	DWORD PTR [ecx+40], edi
	mov	edi, DWORD PTR _fa$[ebp]
	jmp	SHORT $LN500@pop_vertex@2
$LN358@pop_vertex@2:
	and	ebx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+ebx*4]
	mov	DWORD PTR [ecx+36], edi
$LN500@pop_vertex@2:
	mov	ecx, DWORD PTR _global_timestamp
	mov	ebx, DWORD PTR tv4343[ebp]
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
	mov	ecx, DWORD PTR _web+460
$LN476@pop_vertex@2:

; 3371 :         set_next_facet(fa,fc);

	test	ebx, ebx
	je	SHORT $LN486@pop_vertex@2
	cmp	DWORD PTR tv4218[ebp], 0
	mov	ebx, DWORD PTR tv4221[ebp]
	mov	ecx, DWORD PTR [ebx+ecx]
	je	SHORT $LN363@pop_vertex@2
	mov	edi, eax
	xor	edi, 134217728				; 08000000H
	mov	DWORD PTR [ecx+36], edi
	mov	edi, DWORD PTR _fa$[ebp]
	jmp	SHORT $LN501@pop_vertex@2
$LN363@pop_vertex@2:
	mov	DWORD PTR [ecx+40], eax
$LN501@pop_vertex@2:
	mov	ecx, DWORD PTR _web+460
$LN486@pop_vertex@2:

; 3372 :         set_next_facet(fc,fb);

	test	esi, esi
	je	SHORT $LN367@pop_vertex@2
	test	eax, 134217728				; 08000000H
	je	SHORT $LN368@pop_vertex@2
	xor	edx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+36], edx
	jmp	SHORT $LN502@pop_vertex@2
$LN368@pop_vertex@2:
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [ecx+40], edx
$LN502@pop_vertex@2:
	mov	ecx, DWORD PTR _web+460
$LN367@pop_vertex@2:

; 3373 :         set_next_facet(fb,fa);

	cmp	DWORD PTR tv4347[ebp], 0
	je	SHORT $LN477@pop_vertex@2
	cmp	DWORD PTR tv4271[ebp], 0
	mov	edx, DWORD PTR tv4274[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	je	SHORT $LN373@pop_vertex@2
	xor	edi, 134217728				; 08000000H
	mov	DWORD PTR [eax+36], edi
	jmp	SHORT $LN503@pop_vertex@2
$LN373@pop_vertex@2:
	mov	DWORD PTR [eax+40], edi
$LN503@pop_vertex@2:
	mov	ecx, DWORD PTR _web+460
$LN477@pop_vertex@2:

; 3377 :     }
; 3378 :     if ( count >= 10000 ) 

	cmp	DWORD PTR _count$91072[ebp], 10000	; 00002710H
	jl	$LN17@pop_vertex@2
	mov	ebx, DWORD PTR _dymem
$LN461@pop_vertex@2:

; 3379 :     { sprintf(errmsg,"Internal error after pop_vertex_to_tri edge %s, bad topology around vertex %s.\n",ELNAME(v_id),ELNAME1(get_edge_tailv(ea)));

	mov	edx, DWORD PTR tv4257[ebp]
	test	edx, edx
	je	SHORT $LN386@pop_vertex@2
	mov	eax, DWORD PTR _web+124
	mov	ecx, DWORD PTR tv4260[ebp]
	mov	ecx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _web+216
	mov	eax, DWORD PTR [eax+ebx+304]
	add	eax, ecx
	mov	ecx, DWORD PTR _web+636
	mov	ecx, DWORD PTR [eax+ecx*4]
	jmp	SHORT $LN385@pop_vertex@2
$LN386@pop_vertex@2:
	mov	ecx, DWORD PTR _web+124
	mov	eax, DWORD PTR tv4260[ebp]
	mov	eax, DWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+ebx+304]
	add	eax, ecx
	mov	ecx, DWORD PTR [eax]
$LN385@pop_vertex@2:
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN73@pop_vertex@2
	test	edx, edx
	je	SHORT $LN390@pop_vertex@2
	mov	edx, DWORD PTR _web+636
	mov	eax, DWORD PTR [eax+edx*4]
	jmp	SHORT $LN389@pop_vertex@2
$LN390@pop_vertex@2:
	mov	eax, DWORD PTR [eax]
$LN389@pop_vertex@2:
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames+30
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	esi, OFFSET _elnames+30
	jmp	SHORT $LN74@pop_vertex@2
$LN73@pop_vertex@2:
	mov	esi, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN74@pop_vertex@2:
	mov	eax, DWORD PTR _v_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN75@pop_vertex@2
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN76@pop_vertex@2
$LN75@pop_vertex@2:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN76@pop_vertex@2:
	push	esi
	push	eax
	push	OFFSET ??_C@_0FA@ECLBJDGO@Internal?5error?5after?5pop_vertex_@
	push	OFFSET _errmsg
	call	_sprintf

; 3380 :       kb_error(2832,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2832					; 00000b10H
	call	_kb_error
	mov	ecx, DWORD PTR _web+460
	add	esp, 28					; 0000001cH
$LN17@pop_vertex@2:

; 3346 :   }
; 3347 : 
; 3348 :   /* Fix up facet edge orders */
; 3349 :   for ( i = 0 ; i < 3 ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, 3
	jl	$LL18@pop_vertex@2

; 3381 :     }
; 3382 :   }
; 3383 :  
; 3384 : 
; 3385 :   /* Fix up bodies on new facet */
; 3386 :   fe = newfe[0];
; 3387 :   set_facet_body(newf,
; 3388 :      get_facet_body(inverse_id(get_fe_facet(get_prev_facet(fe)))));

	mov	eax, DWORD PTR _newfe$[ebp]
	mov	edi, eax
	and	eax, 134217727				; 07ffffffH
	shr	edi, 27					; 0000001bH
	add	eax, eax
	and	edi, 1
	lea	esi, DWORD PTR [eax+eax]
	je	SHORT $LN394@pop_vertex@2
	mov	eax, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [eax+40]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN393@pop_vertex@2
$LN394@pop_vertex@2:
	mov	edx, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [edx+36]
$LN393@pop_vertex@2:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN398@pop_vertex@2
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN399@pop_vertex@2
$LN398@pop_vertex@2:
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [ecx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN397@pop_vertex@2
	xor	ecx, 134217728				; 08000000H
$LN397@pop_vertex@2:
	mov	eax, ecx
$LN399@pop_vertex@2:
	xor	ebx, ebx
	xor	eax, 134217728				; 08000000H
	cmp	DWORD PTR _web+400, ebx
	jne	SHORT $LN404@pop_vertex@2
	xor	eax, eax
	jmp	SHORT $LN401@pop_vertex@2
$LN404@pop_vertex@2:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN403@pop_vertex@2
	xor	eax, eax
	jmp	SHORT $LN401@pop_vertex@2
$LN403@pop_vertex@2:
	mov	edx, DWORD PTR _web+236
	mov	ecx, DWORD PTR _web+328
	test	eax, 134217728				; 08000000H
	je	SHORT $LN402@pop_vertex@2
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edx+784]
	mov	eax, DWORD PTR [eax+ecx+4]
	jmp	SHORT $LN401@pop_vertex@2
$LN402@pop_vertex@2:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edx+784]
	mov	eax, DWORD PTR [eax+ecx]
$LN401@pop_vertex@2:
	mov	edx, DWORD PTR _newf$[ebp]
	push	eax
	push	edx
	call	_set_facet_body

; 3389 :   set_facet_body(inverse_id(newf),
; 3390 :      get_facet_body(get_fe_facet(get_next_facet(fe))));

	mov	ecx, DWORD PTR _web+460
	add	esp, 8
	cmp	edi, ebx
	je	SHORT $LN408@pop_vertex@2
	mov	eax, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN407@pop_vertex@2
$LN408@pop_vertex@2:
	mov	edx, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [edx+40]
$LN407@pop_vertex@2:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN412@pop_vertex@2
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN413@pop_vertex@2
$LN412@pop_vertex@2:
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [ecx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN411@pop_vertex@2
	xor	ecx, 134217728				; 08000000H
$LN411@pop_vertex@2:
	mov	eax, ecx
$LN413@pop_vertex@2:
	cmp	DWORD PTR _web+400, ebx
	jne	SHORT $LN418@pop_vertex@2
	xor	eax, eax
	jmp	SHORT $LN415@pop_vertex@2
$LN418@pop_vertex@2:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN417@pop_vertex@2
	xor	eax, eax
	jmp	SHORT $LN415@pop_vertex@2
$LN417@pop_vertex@2:
	mov	edx, DWORD PTR _web+236
	mov	ecx, DWORD PTR _web+328
	test	eax, 134217728				; 08000000H
	je	SHORT $LN416@pop_vertex@2
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edx+784]
	mov	eax, DWORD PTR [eax+ecx+4]
	jmp	SHORT $LN415@pop_vertex@2
$LN416@pop_vertex@2:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edx+784]
	mov	eax, DWORD PTR [eax+ecx]
$LN415@pop_vertex@2:
	mov	edx, DWORD PTR tv3643[ebp]
	push	eax
	push	edx
	call	_set_facet_body
	add	esp, 8

; 3391 : 
; 3392 :   if ( web.modeltype == QUADRATIC )

	cmp	DWORD PTR _web+628, 2
	jne	$LN462@pop_vertex@2

; 3393 :   { /* fix up edge midpoints */
; 3394 :     int bailcount = 0;
; 3395 :     for ( i = 0 ; i < 3 ; i++ )

	mov	eax, DWORD PTR _web+124
	mov	DWORD PTR _i$[ebp], ebx
	npad	2
$LL7@pop_vertex@2:

; 3396 :     { edge_id start_e = get_vertex_edge(newv[i]);

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _newv$[ebp+ecx*4]
	mov	ecx, DWORD PTR _web+12
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	edi, DWORD PTR [edx+28]
	mov	DWORD PTR _start_e$91092[ebp], edi
$LL4@pop_vertex@2:

; 3397 :       edge_id ea;
; 3398 :       ea = start_e;
; 3399 :       do
; 3400 :       { new_vertex_average(get_edge_midv(ea),VOLKEEP);

	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+edx+304]
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+eax]
	mov	edx, DWORD PTR [eax+ecx+8]
	push	1
	push	edx
	call	_new_vertex_average

; 3401 :         ea = get_next_tail_edge(ea);

	mov	eax, DWORD PTR _web+124
	mov	ecx, DWORD PTR [esi+eax]
	shr	edi, 27					; 0000001bH

; 3402 :         if ( bailcount++ > 1000 ) break;

	mov	edx, ebx
	and	edi, 1
	mov	edi, DWORD PTR [ecx+edi*4+32]
	add	esp, 8
	inc	ebx
	cmp	edx, 1000				; 000003e8H
	jg	SHORT $LN2@pop_vertex@2

; 3403 :       } while ( !equal_id(ea,start_e));

	cmp	edi, DWORD PTR _start_e$91092[ebp]
	jne	SHORT $LL4@pop_vertex@2
$LN2@pop_vertex@2:

; 3393 :   { /* fix up edge midpoints */
; 3394 :     int bailcount = 0;
; 3395 :     for ( i = 0 ; i < 3 ; i++ )

	mov	ecx, DWORD PTR _i$[ebp]
	inc	ecx
	mov	DWORD PTR _i$[ebp], ecx
	cmp	ecx, 3
	jl	$LL7@pop_vertex@2
$LN462@pop_vertex@2:

; 3404 :     }
; 3405 :   }
; 3406 : 
; 3407 :   return 1;
; 3408 : 
; 3409 : }  /* end pop_edge_to_tri */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	mov	eax, 1
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_pop_vertex_to_tri ENDP
_TEXT	ENDS
PUBLIC	??_C@_0FB@IEGCKKGE@Internal?5error?5after?5pop_vertex_@ ; `string'
PUBLIC	??_C@_0BN@EANMGEMJ@pop_vertex_to_quad?5failure?4?6?$AA@ ; `string'
PUBLIC	??_C@_0EC@CLNPPHIP@pop_vertex_to_quad?5bug?3?5edge?5?$CFs?5@ ; `string'
PUBLIC	_tail_triples$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_pop_vertex_to_quad
;	COMDAT ??_C@_0FB@IEGCKKGE@Internal?5error?5after?5pop_vertex_@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0FB@IEGCKKGE@Internal?5error?5after?5pop_vertex_@ DB 'Internal erro'
	DB	'r after pop_vertex_to_quad edge %s, bad topology around verte'
	DB	'x %s.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EANMGEMJ@pop_vertex_to_quad?5failure?4?6?$AA@
CONST	SEGMENT
??_C@_0BN@EANMGEMJ@pop_vertex_to_quad?5failure?4?6?$AA@ DB 'pop_vertex_to'
	DB	'_quad failure.', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@CLNPPHIP@pop_vertex_to_quad?5bug?3?5edge?5?$CFs?5@
CONST	SEGMENT
??_C@_0EC@CLNPPHIP@pop_vertex_to_quad?5bug?3?5edge?5?$CFs?5@ DB 'pop_vert'
	DB	'ex_to_quad bug: edge %s tail vertex is %s instead of %s.', 0aH
	DB	00H						; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\popfilm.c
CONST	ENDS
;	COMDAT _pop_vertex_to_quad
_TEXT	SEGMENT
_ea$ = -236						; size = 4
tv4200 = -232						; size = 4
_newf$ = -228						; size = 4
tv4161 = -224						; size = 4
tv3579 = -220						; size = 4
_start_e$91234 = -220					; size = 4
tv4290 = -216						; size = 4
_eb$ = -216						; size = 4
tv3737 = -212						; size = 4
_fa$ = -212						; size = 4
tv5320 = -208						; size = 4
tv4214 = -208						; size = 4
tv3739 = -208						; size = 4
_newfe$91158 = -208					; size = 4
tv3696 = -204						; size = 4
_next_fe$91213 = -204					; size = 4
_fea$91189 = -204					; size = 4
_tail_triples$GSCopy$ = -200				; size = 4
_fb$ = -200						; size = 4
tv2085 = -196						; size = 4
_base_v$91215 = -196					; size = 4
_newefe$91192 = -196					; size = 4
_j$ = -196						; size = 4
tv3564 = -192						; size = 4
_fc$ = -192						; size = 4
_fea$91156 = -192					; size = 4
_count$91214 = -188					; size = 4
_next_fe$91171 = -188					; size = 4
_next_fe$91129 = -188					; size = 4
tv4643 = -184						; size = 4
tv4286 = -184						; size = 4
tv3847 = -184						; size = 4
tv3810 = -184						; size = 4
tv4203 = -180						; size = 4
tv3485 = -180						; size = 4
$T96107 = -180						; size = 4
tv269 = -180						; size = 4
_newefe$91159 = -180					; size = 4
_i$ = -176						; size = 4
tv4164 = -172						; size = 4
tv3559 = -172						; size = 4
_newfe$91191 = -172					; size = 4
tv4217 = -168						; size = 4
_fe$ = -168						; size = 4
_side2$91202 = -164					; size = 48
_side1$91201 = -116					; size = 48
_head_triples$ = -68					; size = 16
_newv$ = -52						; size = 16
_newe$ = -36						; size = 16
_newfe$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_v_id$ = 8						; size = 4
_tail_triples$ = 12					; size = 4
_pop_vertex_to_quad PROC				; COMDAT

; 3422 : { int i,j;

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _tail_triples$[ebp]
	push	ebx
	push	esi

; 3423 :   vertex_id newv[4],keepv;
; 3424 :   edge_id newe[4];
; 3425 :   facet_id newf;
; 3426 :   facetedge_id newfe[4],fe,fa,fb,fc;
; 3427 :   edge_id ea,eb,ec,ee,head_triples[4];
; 3428 :  
; 3429 :   /* Create new vertices, edges, and facet */
; 3430 :   newv[0] = v_id;

	mov	esi, DWORD PTR _v_id$[ebp]
	push	edi

; 3431 :   newv[1] = dup_vertex(newv[0]);

	push	esi

; 3522 :               next_fe = inverse_id(get_prev_edge(next_fe));

	mov	DWORD PTR _tail_triples$GSCopy$[ebp], eax
	mov	DWORD PTR _newv$[ebp], esi
	call	_dup_vertex
	mov	edi, eax
	push	esi
	mov	DWORD PTR _newv$[ebp+4], edi
	call	_dup_vertex
	mov	ebx, eax
	push	esi
	mov	DWORD PTR _newv$[ebp+8], ebx
	call	_dup_vertex
	push	0
	push	edi
	push	esi
	mov	DWORD PTR _newv$[ebp+12], eax
	call	_new_edge
	push	0
	push	ebx
	push	edi
	mov	DWORD PTR _newe$[ebp], eax
	call	_new_edge
	mov	ecx, DWORD PTR _newv$[ebp+12]
	push	0
	push	ecx
	mov	edi, eax
	push	ebx
	mov	DWORD PTR _newe$[ebp+4], edi
	call	_new_edge
	mov	edx, DWORD PTR _newv$[ebp+12]
	push	0
	push	esi
	push	edx
	mov	DWORD PTR _newe$[ebp+8], eax
	call	_new_edge
	push	esi
	mov	DWORD PTR _newe$[ebp+12], eax
	call	_get_vertex_first_facet
	add	esp, 64					; 00000040H
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN80@pop_vertex@3

; 3432 :   newv[2] = dup_vertex(newv[0]);
; 3433 :   newv[3] = dup_vertex(newv[0]);
; 3434 :   newe[0] = new_edge(newv[0],newv[1],NULLID);
; 3435 :   newe[1] = new_edge(newv[1],newv[2],NULLID);
; 3436 :   newe[2] = new_edge(newv[2],newv[3],NULLID);
; 3437 :   newe[3] = new_edge(newv[3],newv[0],NULLID);
; 3438 :   fe = get_vertex_first_facet(newv[0]);
; 3439 :   newf = dup_facet(get_fe_facet(fe));

	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN81@pop_vertex@3
$LN80@pop_vertex@3:
	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [ecx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN79@pop_vertex@3
	xor	ecx, 134217728				; 08000000H
$LN79@pop_vertex@3:
	mov	eax, ecx
$LN81@pop_vertex@3:
	push	eax
	call	_dup_facet
	mov	esi, eax

; 3440 :   set_original(newf,NULLID);

	mov	edx, esi
	shr	edx, 29					; 0000001dH
	imul	edx, 112				; 00000070H
	mov	ecx, DWORD PTR _web[edx+12]
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]

; 3441 :   set_facet_body(newf,NULLID);

	push	0
	push	esi
	mov	DWORD PTR _newf$[ebp], esi
	mov	DWORD PTR [edx+20], 0
	call	_set_facet_body

; 3442 :   set_facet_body(inverse_id(newf),NULLID);

	mov	eax, esi
	xor	eax, 134217728				; 08000000H
	push	0
	push	eax
	mov	DWORD PTR tv3579[ebp], eax
	call	_set_facet_body

; 3443 :   newfe[0] = new_facetedge(newf,newe[0]); set_edge_fe(newe[0],newfe[0]);

	mov	ebx, DWORD PTR _newe$[ebp]
	push	ebx
	push	esi
	call	_new_facetedge
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _newfe$[ebp], eax
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN83@pop_vertex@3
	xor	eax, 134217728				; 08000000H
$LN83@pop_vertex@3:
	mov	ecx, DWORD PTR _web+124
	and	ebx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+ebx*4]
	mov	DWORD PTR [edx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax

; 3444 :   newfe[1] = new_facetedge(newf,newe[1]); set_edge_fe(newe[1],newfe[1]);

	push	edi
	push	esi
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	call	_new_facetedge
	add	esp, 8
	mov	DWORD PTR _newfe$[ebp+4], eax
	test	edi, 134217728				; 08000000H
	je	SHORT $LN86@pop_vertex@3
	xor	eax, 134217728				; 08000000H
$LN86@pop_vertex@3:
	mov	ecx, DWORD PTR _web+124
	and	edi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edi*4]
	mov	DWORD PTR [edx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax

; 3445 :   newfe[2] = new_facetedge(newf,newe[2]); set_edge_fe(newe[2],newfe[2]);

	mov	eax, DWORD PTR _newe$[ebp+8]
	push	eax
	push	esi
	call	_new_facetedge
	add	esp, 8
	test	DWORD PTR _newe$[ebp+8], 134217728	; 08000000H
	mov	ebx, eax
	mov	DWORD PTR _newfe$[ebp+8], ebx
	je	SHORT $LN89@pop_vertex@3
	xor	eax, 134217728				; 08000000H
$LN89@pop_vertex@3:
	mov	edx, DWORD PTR _web+124
	mov	ecx, DWORD PTR _newe$[ebp+8]
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]

; 3446 :   newfe[3] = new_facetedge(newf,newe[3]); set_edge_fe(newe[3],newfe[3]);

	mov	edx, DWORD PTR _newe$[ebp+12]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	push	edx
	push	esi
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	call	_new_facetedge
	add	esp, 8
	test	DWORD PTR _newe$[ebp+12], 134217728	; 08000000H
	mov	edi, eax
	mov	DWORD PTR _newfe$[ebp+12], edi
	je	SHORT $LN469@pop_vertex@3
	xor	eax, 134217728				; 08000000H
$LN469@pop_vertex@3:
	mov	ecx, DWORD PTR _newe$[ebp+12]
	mov	edx, DWORD PTR _web+124
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR _global_timestamp

; 3447 :   set_next_edge(newfe[0],newfe[1]);

	mov	ecx, DWORD PTR _newfe$[ebp]
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN470@pop_vertex@3
	mov	eax, DWORD PTR _web+460
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN96@pop_vertex@3
	mov	edx, DWORD PTR _newfe$[ebp+4]
	xor	edx, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [ecx+28], edx
	mov	ecx, DWORD PTR _newfe$[ebp]
$LN470@pop_vertex@3:
	mov	eax, DWORD PTR _newfe$[ebp+4]
$LN95@pop_vertex@3:

; 3448 :   set_next_edge(newfe[1],newfe[2]);

	test	eax, 268435456				; 10000000H
	je	SHORT $LN100@pop_vertex@3
	mov	edx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN101@pop_vertex@3
	mov	ecx, ebx
	xor	ecx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [eax+28], ecx
	mov	ecx, DWORD PTR _newfe$[ebp]
	jmp	SHORT $LN100@pop_vertex@3

; 3447 :   set_next_edge(newfe[0],newfe[1]);

$LN96@pop_vertex@3:
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR _newfe$[ebp+4]
	mov	DWORD PTR [edx+32], eax
	jmp	SHORT $LN95@pop_vertex@3

; 3448 :   set_next_edge(newfe[1],newfe[2]);

$LN101@pop_vertex@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [eax+32], ebx
$LN100@pop_vertex@3:

; 3449 :   set_next_edge(newfe[2],newfe[3]);

	test	ebx, 268435456				; 10000000H
	je	SHORT $LN105@pop_vertex@3
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN106@pop_vertex@3
	mov	eax, DWORD PTR _web+460
	mov	ecx, edi
	xor	ecx, 134217728				; 08000000H
	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [edx+28], ecx
	mov	ecx, DWORD PTR _newfe$[ebp]
	jmp	SHORT $LN105@pop_vertex@3
$LN106@pop_vertex@3:
	mov	edx, DWORD PTR _web+460
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [eax+32], edi
$LN105@pop_vertex@3:

; 3450 :   set_next_edge(newfe[3],newfe[0]);

	test	edi, 268435456				; 10000000H
	je	SHORT $LN110@pop_vertex@3
	test	edi, 134217728				; 08000000H
	je	SHORT $LN111@pop_vertex@3
	mov	eax, DWORD PTR _web+460
	xor	ecx, 134217728				; 08000000H
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [edx+28], ecx
	jmp	SHORT $LN110@pop_vertex@3
$LN111@pop_vertex@3:
	mov	edx, DWORD PTR _web+460
	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [eax+32], ecx
$LN110@pop_vertex@3:

; 3451 :   set_prev_edge(newfe[0],newfe[3]);

	mov	ecx, DWORD PTR _newfe$[ebp]
	push	edi
	push	ecx
	call	_set_prev_edge

; 3452 :   set_prev_edge(newfe[1],newfe[0]);

	mov	edx, DWORD PTR _newfe$[ebp]
	mov	eax, DWORD PTR _newfe$[ebp+4]
	push	edx
	push	eax
	call	_set_prev_edge

; 3453 :   set_prev_edge(newfe[2],newfe[1]);

	mov	ecx, DWORD PTR _newfe$[ebp+4]
	push	ecx
	push	ebx
	call	_set_prev_edge

; 3454 :   set_prev_edge(newfe[3],newfe[2]);

	push	ebx
	push	edi
	call	_set_prev_edge

; 3455 :   set_facet_fe(newf,newfe[0]);

	mov	edx, DWORD PTR _newfe$[ebp]
	push	edx
	push	esi
	call	_set_facet_fe

; 3456 : 
; 3457 :   /* Reconnect things */
; 3458 :   keepv = newv[0];
; 3459 :   for ( i = 0 ; i < 4 ; i++ )  /* lower triple edges */

	mov	eax, DWORD PTR _newe$[ebp]
	add	esp, 40					; 00000028H
	or	eax, 134217728				; 08000000H
	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR tv3737[ebp], eax
	npad	2
$LL66@pop_vertex@3:

; 3460 :   { facetedge_id next_fe;
; 3461 :     remove_vertex_edge(keepv,tail_triples[i]);

	mov	edi, DWORD PTR _tail_triples$GSCopy$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [edi+esi*4]
	mov	ecx, DWORD PTR _v_id$[ebp]
	push	eax
	push	ecx
	call	_remove_vertex_edge

; 3462 :     set_edge_tailv(tail_triples[i],newv[i]);

	mov	eax, DWORD PTR _newv$[ebp+esi*4]
	mov	edx, DWORD PTR [edi+esi*4]
	push	eax
	push	edx
	mov	DWORD PTR tv3696[ebp], eax
	call	_set_edge_tailv

; 3463 :     fe = get_edge_fe(tail_triples[i]);

	mov	esi, DWORD PTR [edi+esi*4]
	mov	ecx, DWORD PTR _web+124
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	xor	ecx, ecx
	add	esp, 16					; 00000010H
	cmp	eax, ecx
	jne	SHORT $LN116@pop_vertex@3
	mov	DWORD PTR _fe$[ebp], ecx
	jmp	SHORT $LN117@pop_vertex@3
$LN116@pop_vertex@3:
	mov	eax, DWORD PTR [eax+28]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN115@pop_vertex@3
	xor	eax, 134217728				; 08000000H
$LN115@pop_vertex@3:
	mov	DWORD PTR _fe$[ebp], eax
$LN117@pop_vertex@3:

; 3464 :     for ( j = 0 ; j < 3 ; j++ )  /* around the triple edge */

	mov	edx, DWORD PTR _web+460
	mov	DWORD PTR _j$[ebp], ecx
$LL63@pop_vertex@3:

; 3465 :     { fe = get_next_facet(fe);

	mov	eax, DWORD PTR _fe$[ebp]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN120@pop_vertex@3
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN483@pop_vertex@3
$LN120@pop_vertex@3:
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [ecx+40]
$LN483@pop_vertex@3:

; 3466 :       next_fe = inverse_id(get_prev_edge(fe));

	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR _fe$[ebp], eax
	mov	DWORD PTR tv3564[ebp], ecx
	je	SHORT $LN124@pop_vertex@3
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv3559[ebp], eax
	mov	eax, DWORD PTR [eax+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN123@pop_vertex@3
$LN124@pop_vertex@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv3559[ebp], eax
	mov	eax, DWORD PTR [eax+28]
$LN123@pop_vertex@3:
	xor	eax, 134217728				; 08000000H

; 3467 :       for (;;)
; 3468 :       { /* traverse fan of edges */
; 3469 :         vertex_id vv_id;
; 3470 :         edge_id eg,ee;
; 3471 :         eg = get_fe_edge(next_fe);

	mov	ecx, eax
	mov	esi, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [ecx+20]
	mov	DWORD PTR _next_fe$91129[ebp], eax

; 3472 :         if ( equal_element(eg,newe[0]) ) break;

	mov	eax, esi
	or	eax, 134217728				; 08000000H
	cmp	eax, DWORD PTR tv3737[ebp]
	je	$LN62@pop_vertex@3
	mov	edi, DWORD PTR _newe$[ebp+4]
	or	edi, 134217728				; 08000000H
	mov	DWORD PTR tv3739[ebp], edi
	jmp	SHORT $LN60@pop_vertex@3
$LL456@pop_vertex@3:

; 3466 :       next_fe = inverse_id(get_prev_edge(fe));

	mov	edi, DWORD PTR tv3739[ebp]
$LN60@pop_vertex@3:

; 3473 :         if ( equal_element(eg,newe[1]) ) break;

	cmp	eax, edi
	je	$LN62@pop_vertex@3

; 3474 :         if ( equal_element(eg,newe[2]) ) break;

	mov	edi, DWORD PTR _newe$[ebp+8]
	or	edi, 134217728				; 08000000H
	cmp	eax, edi
	je	$LN62@pop_vertex@3

; 3475 :         if ( equal_element(eg,newe[3]) ) break;

	mov	edi, DWORD PTR _newe$[ebp+12]
	or	edi, 134217728				; 08000000H
	cmp	eax, edi
	je	$LN62@pop_vertex@3

; 3476 :         vv_id = get_edge_tailv(eg);

	mov	edi, DWORD PTR _web+124
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN130@pop_vertex@3
	mov	edi, DWORD PTR _web+216
	mov	ebx, DWORD PTR _dymem
	add	eax, DWORD PTR [edi+ebx+304]
	mov	edi, DWORD PTR _web+636
	mov	eax, DWORD PTR [eax+edi*4]
	jmp	SHORT $LN129@pop_vertex@3
$LN130@pop_vertex@3:
	mov	edi, DWORD PTR _dymem
	mov	ebx, DWORD PTR _web+216
	mov	edi, DWORD PTR [ebx+edi+304]
	mov	eax, DWORD PTR [eax+edi]
$LN129@pop_vertex@3:

; 3477 :         if ( !equal_id(vv_id,keepv) && !equal_id(vv_id,newv[i]) )   

	mov	ebx, DWORD PTR _v_id$[ebp]
	cmp	eax, ebx
	je	SHORT $LN54@pop_vertex@3
	cmp	eax, DWORD PTR tv3696[ebp]
	jne	$LN434@pop_vertex@3
$LN54@pop_vertex@3:

; 3483 :         }
; 3484 :         if ( get_next_facet(next_fe) != get_prev_facet(next_fe) )

	mov	edi, DWORD PTR _next_fe$91129[ebp]
	mov	ebx, edi
	shr	ebx, 27					; 0000001bH
	and	ebx, 1
	je	SHORT $LN142@pop_vertex@3
	mov	eax, DWORD PTR [ecx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN484@pop_vertex@3
$LN142@pop_vertex@3:
	mov	eax, DWORD PTR [ecx+40]
$LN484@pop_vertex@3:
	mov	DWORD PTR $T96107[ebp], eax
	test	ebx, ebx
	je	SHORT $LN146@pop_vertex@3
	mov	eax, DWORD PTR [ecx+40]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN145@pop_vertex@3
$LN146@pop_vertex@3:
	mov	eax, DWORD PTR [ecx+36]
$LN145@pop_vertex@3:
	cmp	DWORD PTR $T96107[ebp], eax
	jne	$LN435@pop_vertex@3

; 3523 :             }
; 3524 :           }
; 3525 :           break;  /* done with this way out of triple edge */
; 3526 :         }
; 3527 :         next_fe = get_next_facet(next_fe);

	test	ebx, ebx
	je	SHORT $LN210@pop_vertex@3
	mov	eax, DWORD PTR [ecx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN209@pop_vertex@3
$LN210@pop_vertex@3:
	mov	eax, DWORD PTR [ecx+40]
$LN209@pop_vertex@3:

; 3528 :         next_fe = inverse_id(get_prev_edge(next_fe));

	test	eax, 134217728				; 08000000H
	je	SHORT $LN214@pop_vertex@3
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [ecx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN213@pop_vertex@3
$LN214@pop_vertex@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]
$LN213@pop_vertex@3:
	xor	eax, 134217728				; 08000000H
	mov	ecx, eax
	mov	esi, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [ecx+20]
	mov	DWORD PTR _next_fe$91129[ebp], eax
	mov	eax, esi
	or	eax, 134217728				; 08000000H
	cmp	eax, DWORD PTR tv3737[ebp]
	jne	$LL456@pop_vertex@3

; 3472 :         if ( equal_element(eg,newe[0]) ) break;

	jmp	$LN62@pop_vertex@3
$LN434@pop_vertex@3:

; 3478 :         { sprintf(errmsg,
; 3479 :            "pop_vertex_to_quad bug: edge %s tail vertex is %s instead of %s.\n",
; 3480 :              ELNAME(eg),ELNAME1(get_edge_tailv(eg)),ELNAME2(keepv));

	test	ebx, 268435456				; 10000000H
	je	SHORT $LN69@pop_vertex@3
	and	ebx, 134217727				; 07ffffffH
	inc	ebx
	push	ebx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames+60
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv269[ebp], OFFSET _elnames+60
	jmp	SHORT $LN70@pop_vertex@3
$LN69@pop_vertex@3:
	mov	DWORD PTR tv269[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN70@pop_vertex@3:
	mov	eax, DWORD PTR _web+124
	mov	edi, DWORD PTR _dymem
	mov	ebx, esi
	and	ebx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR _web+216
	mov	eax, DWORD PTR [eax+edi+304]
	mov	edx, esi
	shr	edx, 27					; 0000001bH
	add	eax, ecx
	and	edx, 1
	je	SHORT $LN134@pop_vertex@3
	mov	ecx, DWORD PTR _web+636
	mov	ecx, DWORD PTR [eax+ecx*4]
	jmp	SHORT $LN133@pop_vertex@3
$LN134@pop_vertex@3:
	mov	ecx, DWORD PTR [eax]
$LN133@pop_vertex@3:
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN71@pop_vertex@3
	test	edx, edx
	je	SHORT $LN138@pop_vertex@3
	mov	ecx, DWORD PTR _web+636
	mov	eax, DWORD PTR [eax+ecx*4]
	jmp	SHORT $LN137@pop_vertex@3
$LN138@pop_vertex@3:
	mov	eax, DWORD PTR [eax]
$LN137@pop_vertex@3:
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames+30
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	edi, OFFSET _elnames+30
	jmp	SHORT $LN72@pop_vertex@3
$LN71@pop_vertex@3:
	mov	edi, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN72@pop_vertex@3:
	test	esi, 268435456				; 10000000H
	je	SHORT $LN73@pop_vertex@3
	inc	ebx
	push	ebx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN74@pop_vertex@3
$LN73@pop_vertex@3:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN74@pop_vertex@3:
	mov	edx, DWORD PTR tv269[ebp]
	push	edx
	push	edi
	push	eax
	push	OFFSET ??_C@_0EC@CLNPPHIP@pop_vertex_to_quad?5bug?3?5edge?5?$CFs?5@
	push	OFFSET _errmsg
	call	_sprintf

; 3481 :           kb_error(3930,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	3930					; 00000f5aH
	call	_kb_error

; 3482 :           break;

	mov	edx, DWORD PTR _web+460
	add	esp, 32					; 00000020H
	jmp	$LN62@pop_vertex@3
$LN435@pop_vertex@3:

; 3485 :         { /* have reached next triple edge */
; 3486 :           if ( equal_id(eg,tail_triples[(i+3)%4]) ) break;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 3
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN479@pop_vertex@3
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN479@pop_vertex@3:
	mov	ecx, DWORD PTR _tail_triples$GSCopy$[ebp]
	cmp	esi, DWORD PTR [ecx+eax*4]
	je	$LN62@pop_vertex@3

; 3487 :           else if ( equal_id(eg,tail_triples[(i+1)%4]) )

	mov	ecx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+1]
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN480@pop_vertex@3
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN480@pop_vertex@3:
	mov	ebx, DWORD PTR _tail_triples$GSCopy$[ebp]
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv3810[ebp], eax
	cmp	esi, DWORD PTR [ebx+eax]
	jne	$LN50@pop_vertex@3

; 3488 :           { /* all lower edges, so go back and split out to triangle edge */
; 3489 :             facetedge_id feb = inverse_id(get_prev_edge(fe));

	mov	esi, DWORD PTR tv3564[ebp]
	mov	eax, DWORD PTR tv3559[ebp]
	test	esi, esi
	je	SHORT $LN150@pop_vertex@3
	mov	ebx, DWORD PTR [eax+32]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN149@pop_vertex@3
$LN150@pop_vertex@3:
	mov	ebx, DWORD PTR [eax+28]
$LN149@pop_vertex@3:
	xor	ebx, 134217728				; 08000000H

; 3490 :             facetedge_id fea = get_prev_edge(fe);

	test	esi, esi
	je	SHORT $LN154@pop_vertex@3
	mov	edx, DWORD PTR [eax+32]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN485@pop_vertex@3
$LN154@pop_vertex@3:
	mov	edx, DWORD PTR [eax+28]
$LN485@pop_vertex@3:

; 3491 :             facet_id fa = get_fe_facet(fe);

	test	DWORD PTR _fe$[ebp], 268435456		; 10000000H
	mov	DWORD PTR _fea$91156[ebp], edx
	jne	SHORT $LN158@pop_vertex@3
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN157@pop_vertex@3
$LN158@pop_vertex@3:
	mov	eax, DWORD PTR [eax+24]
	test	esi, esi
	je	SHORT $LN157@pop_vertex@3
	xor	eax, 134217728				; 08000000H
$LN157@pop_vertex@3:

; 3492 :             facetedge_id newfe = new_facetedge(fa,inverse_id(newe[i]));

	mov	edi, DWORD PTR _newe$[ebp+ecx*4]
	xor	edi, 134217728				; 08000000H
	push	edi
	push	eax
	call	_new_facetedge

; 3493 :             facetedge_id newefe = get_edge_fe(inverse_id(newe[i]));

	mov	ecx, DWORD PTR _web+124
	mov	esi, eax
	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	add	esp, 8
	mov	DWORD PTR _newfe$91158[ebp], esi
	test	eax, eax
	jne	SHORT $LN162@pop_vertex@3
	xor	edi, edi
	mov	DWORD PTR _newefe$91159[ebp], edi
	jmp	SHORT $LN416@pop_vertex@3
$LN162@pop_vertex@3:
	mov	eax, DWORD PTR [eax+28]
	test	edi, 134217728				; 08000000H
	je	SHORT $LN161@pop_vertex@3
	xor	eax, 134217728				; 08000000H
$LN161@pop_vertex@3:
	mov	edi, eax
	mov	DWORD PTR _newefe$91159[ebp], eax
$LN416@pop_vertex@3:

; 3494 : 
; 3495 :             while ( !equal_id(feb,next_fe) )

	mov	ecx, DWORD PTR _web+460
	cmp	ebx, DWORD PTR _next_fe$91129[ebp]
	je	$LN48@pop_vertex@3
	mov	edx, DWORD PTR tv3810[ebp]
	mov	eax, DWORD PTR _newv$[ebp+edx]
	mov	DWORD PTR tv3847[ebp], eax
	npad	1
$LL49@pop_vertex@3:

; 3496 :             { ee = get_fe_edge(feb);
; 3497 :               remove_vertex_edge(keepv,ee);

	mov	edx, DWORD PTR _v_id$[ebp]
	mov	edi, ebx
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	ecx, DWORD PTR [edi+ecx]
	mov	esi, ebx
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [ecx+20]
	push	esi
	push	edx
	call	_remove_vertex_edge

; 3498 :               set_edge_tailv(ee,newv[(i+1)%4]);

	mov	eax, DWORD PTR tv3847[ebp]
	push	eax
	push	esi
	call	_set_edge_tailv

; 3499 :               feb = get_next_facet(feb);

	mov	ecx, DWORD PTR _web+460
	add	esp, 16					; 00000010H
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN168@pop_vertex@3
	mov	edx, DWORD PTR [edi+ecx]
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN167@pop_vertex@3
$LN168@pop_vertex@3:
	mov	eax, DWORD PTR [edi+ecx]
	mov	eax, DWORD PTR [eax+40]
$LN167@pop_vertex@3:

; 3500 :               feb = inverse_id(get_prev_edge(feb));

	test	eax, 134217728				; 08000000H
	je	SHORT $LN172@pop_vertex@3
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN171@pop_vertex@3
$LN172@pop_vertex@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+28]
$LN171@pop_vertex@3:
	xor	eax, 134217728				; 08000000H
	mov	ebx, eax
	cmp	ebx, DWORD PTR _next_fe$91129[ebp]
	jne	$LL49@pop_vertex@3

; 3494 : 
; 3495 :             while ( !equal_id(feb,next_fe) )

	mov	edi, DWORD PTR _newefe$91159[ebp]
	mov	esi, DWORD PTR _newfe$91158[ebp]
$LN48@pop_vertex@3:

; 3501 :             }
; 3502 : 
; 3503 :             set_next_edge(fea,newfe);

	mov	eax, DWORD PTR _fea$91156[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN458@pop_vertex@3
	test	eax, 134217728				; 08000000H
	je	SHORT $LN176@pop_vertex@3
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	mov	ebx, eax
	and	ebx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+ebx*4]
	mov	DWORD PTR [ecx+28], edx
	jmp	SHORT $LN458@pop_vertex@3
$LN176@pop_vertex@3:
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [ecx+32], esi
$LN458@pop_vertex@3:

; 3504 :             set_prev_edge(newfe,fea);

	push	eax
	push	esi
	call	_set_prev_edge

; 3505 :             set_prev_edge(fe,newfe);

	mov	ebx, DWORD PTR _fe$[ebp]
	push	esi
	push	ebx
	call	_set_prev_edge

; 3506 :             set_next_edge(newfe,fe);

	mov	eax, esi
	shr	eax, 28					; 0000001cH
	add	esp, 16					; 00000010H
	and	eax, 1
	je	SHORT $LN472@pop_vertex@3
	test	esi, 134217728				; 08000000H
	je	SHORT $LN181@pop_vertex@3
	mov	ecx, DWORD PTR _web+460
	xor	ebx, 134217728				; 08000000H
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+28], ebx
	mov	ebx, DWORD PTR _fe$[ebp]
	jmp	SHORT $LN472@pop_vertex@3
$LN181@pop_vertex@3:
	mov	edx, DWORD PTR _web+460
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+32], ebx
$LN472@pop_vertex@3:

; 3507 :             set_next_facet(newfe,newefe);

	test	eax, eax
	je	SHORT $LN185@pop_vertex@3
	test	esi, 134217728				; 08000000H
	je	SHORT $LN186@pop_vertex@3
	mov	ecx, DWORD PTR _web+460
	mov	edx, edi
	xor	edx, 134217728				; 08000000H
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+36], edx
	jmp	SHORT $LN185@pop_vertex@3
$LN186@pop_vertex@3:
	mov	edx, DWORD PTR _web+460
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [eax+40], edi
$LN185@pop_vertex@3:

; 3508 :             set_prev_facet(newefe,newfe);

	push	esi
	push	edi
	call	_set_prev_facet
	add	esp, 8

; 3509 :             set_next_facet(newefe,newfe);

	test	edi, 268435456				; 10000000H
	je	SHORT $LN190@pop_vertex@3
	test	edi, 134217728				; 08000000H
	je	SHORT $LN191@pop_vertex@3
	mov	eax, DWORD PTR _web+460
	mov	ecx, esi
	xor	ecx, 134217728				; 08000000H
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [edx+36], ecx
	jmp	SHORT $LN190@pop_vertex@3
$LN191@pop_vertex@3:
	mov	ecx, DWORD PTR _web+460
	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx+40], esi
$LN190@pop_vertex@3:

; 3510 :             set_prev_facet(newfe,newefe);

	push	edi
	push	esi
	call	_set_prev_facet

; 3511 :             cross_cut(newfe,fe);  /* triangulate */

	push	ebx
	push	esi
	call	_cross_cut

; 3512 :           }
; 3513 :           else /* hit one of the head_triples */

	mov	edx, DWORD PTR _web+460
	add	esp, 16					; 00000010H
	jmp	$LN62@pop_vertex@3
$LN50@pop_vertex@3:

; 3514 :           { /* vertical wall, so reconnect */ 
; 3515 :             head_triples[i] = eg;

	mov	DWORD PTR _head_triples$[ebp+ecx*4], esi

; 3516 :             next_fe = inverse_id(get_prev_edge(next_fe));

	test	edi, 134217728				; 08000000H
	je	SHORT $LN196@pop_vertex@3
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+edi*4]
	mov	ebx, DWORD PTR [eax+32]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN195@pop_vertex@3
$LN196@pop_vertex@3:
	and	edi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+edi*4]
	mov	ebx, DWORD PTR [ecx+28]
$LN195@pop_vertex@3:
	xor	ebx, 134217728				; 08000000H

; 3517 :             while ( !equal_id(next_fe,fe) )

	cmp	ebx, DWORD PTR _fe$[ebp]
	je	$LN62@pop_vertex@3
$LL46@pop_vertex@3:

; 3518 :             { edge_id ee = get_fe_edge(next_fe);
; 3519 :               remove_vertex_edge(keepv,ee);

	mov	eax, DWORD PTR _v_id$[ebp]
	mov	edi, ebx
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	edx, DWORD PTR [edi+edx]
	mov	esi, ebx
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [edx+20]
	push	esi
	push	eax
	call	_remove_vertex_edge

; 3520 :               set_edge_tailv(ee,newv[i]);

	mov	ecx, DWORD PTR tv3696[ebp]
	push	ecx
	push	esi
	call	_set_edge_tailv

; 3521 :               next_fe = get_prev_facet(next_fe);

	mov	edx, DWORD PTR _web+460
	add	esp, 16					; 00000010H
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN202@pop_vertex@3
	mov	eax, DWORD PTR [edi+edx]
	mov	eax, DWORD PTR [eax+40]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN201@pop_vertex@3
$LN202@pop_vertex@3:
	mov	ecx, DWORD PTR [edi+edx]
	mov	eax, DWORD PTR [ecx+36]
$LN201@pop_vertex@3:

; 3522 :               next_fe = inverse_id(get_prev_edge(next_fe));

	test	eax, 134217728				; 08000000H
	je	SHORT $LN206@pop_vertex@3
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	ebx, DWORD PTR [eax+32]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN205@pop_vertex@3
$LN206@pop_vertex@3:
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	ebx, DWORD PTR [ecx+28]
$LN205@pop_vertex@3:
	xor	ebx, 134217728				; 08000000H
	cmp	ebx, DWORD PTR _fe$[ebp]
	jne	$LL46@pop_vertex@3
$LN62@pop_vertex@3:

; 3464 :     for ( j = 0 ; j < 3 ; j++ )  /* around the triple edge */

	mov	eax, DWORD PTR _j$[ebp]
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, 3
	jl	$LL63@pop_vertex@3

; 3456 : 
; 3457 :   /* Reconnect things */
; 3458 :   keepv = newv[0];
; 3459 :   for ( i = 0 ; i < 4 ; i++ )  /* lower triple edges */

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, 4
	jl	$LL66@pop_vertex@3

; 3529 :       }
; 3530 :     }
; 3531 :   } 
; 3532 : 
; 3533 :   /* Now go around head end and reconnect, head_triples having been
; 3534 :      put in proper correspondence above                                 */
; 3535 :   for ( i = 0 ; i < 4 ; i++ )  /* upper triple edges */

	xor	ebx, ebx
	mov	DWORD PTR _i$[ebp], ebx
$LL475@pop_vertex@3:

; 3536 :   { facetedge_id next_fe;
; 3537 :     remove_vertex_edge(keepv,head_triples[i]);

	mov	esi, DWORD PTR _head_triples$[ebp+ebx*4]
	mov	edx, DWORD PTR _v_id$[ebp]
	push	esi
	push	edx
	call	_remove_vertex_edge

; 3538 :     set_edge_tailv(head_triples[i],newv[i]);

	mov	eax, DWORD PTR _newv$[ebp+ebx*4]
	push	eax
	push	esi
	call	_set_edge_tailv

; 3539 :     fe = get_edge_fe(head_triples[i]);

	mov	edx, DWORD PTR _web+124
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN217@pop_vertex@3
$LN218@pop_vertex@3:
	mov	eax, DWORD PTR [eax+28]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN217@pop_vertex@3
	xor	eax, 134217728				; 08000000H
$LN217@pop_vertex@3:

; 3540 :     for ( j = 0 ; j < 3 ; j++ )  /* around the triple edge */

	mov	ecx, DWORD PTR _web+460
	mov	edi, DWORD PTR _dymem
	mov	DWORD PTR tv3485[ebp], 3
	npad	7
$LL41@pop_vertex@3:

; 3541 :     { fe = get_next_facet(fe);

	test	eax, 134217728				; 08000000H
	je	SHORT $LN222@pop_vertex@3
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN486@pop_vertex@3
$LN222@pop_vertex@3:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+40]
$LN486@pop_vertex@3:

; 3542 :       next_fe = inverse_id(get_prev_edge(fe));

	mov	edx, eax
	shr	edx, 27					; 0000001bH
	and	edx, 1
	mov	DWORD PTR _fe$[ebp], eax
	mov	DWORD PTR tv3564[ebp], edx
	je	SHORT $LN226@pop_vertex@3
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv3559[ebp], eax
	mov	eax, DWORD PTR [eax+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN225@pop_vertex@3
$LN226@pop_vertex@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv3559[ebp], eax
	mov	eax, DWORD PTR [eax+28]
$LN225@pop_vertex@3:
	xor	eax, 134217728				; 08000000H
	mov	esi, eax
	mov	DWORD PTR _next_fe$91171[ebp], esi
$LL38@pop_vertex@3:

; 3543 :       for (;;)
; 3544 :       { /* traverse fan of edges */
; 3545 :         edge_id eg;
; 3546 :         if ( !equal_id(get_fe_tailv(next_fe),keepv) ) break;

	mov	ebx, DWORD PTR _web+124
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, esi
	and	ecx, 134217728				; 08000000H
	xor	eax, ecx
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	mov	ebx, DWORD PTR _web+216
	test	eax, 134217728				; 08000000H
	je	SHORT $LN232@pop_vertex@3
	add	ecx, DWORD PTR [ebx+edi+304]
	mov	ebx, DWORD PTR _web+636
	mov	ecx, DWORD PTR [ecx+ebx*4]
	jmp	SHORT $LN231@pop_vertex@3
$LN232@pop_vertex@3:
	mov	ebx, DWORD PTR [ebx+edi+304]
	mov	ecx, DWORD PTR [ecx+ebx]
$LN231@pop_vertex@3:
	cmp	ecx, DWORD PTR _v_id$[ebp]
	jne	$LN467@pop_vertex@3

; 3547 :         eg = get_fe_edge(next_fe);
; 3548 :         if ( get_next_facet(next_fe) != get_prev_facet(next_fe) )

	shr	esi, 27					; 0000001bH
	and	esi, 1
	je	SHORT $LN238@pop_vertex@3
	mov	ebx, DWORD PTR [edx+36]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN237@pop_vertex@3
$LN238@pop_vertex@3:
	mov	ebx, DWORD PTR [edx+40]
$LN237@pop_vertex@3:
	test	esi, esi
	je	SHORT $LN242@pop_vertex@3
	mov	ecx, DWORD PTR [edx+40]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN241@pop_vertex@3
$LN242@pop_vertex@3:
	mov	ecx, DWORD PTR [edx+36]
$LN241@pop_vertex@3:
	cmp	ebx, ecx
	jne	SHORT $LN437@pop_vertex@3

; 3581 :           }
; 3582 :           else /* hit one of the head_triples */
; 3583 :           { /* vertical wall, but those already reconnected */ 
; 3584 :           }
; 3585 :           break;  /* done with this way out of triple edge */
; 3586 :         }
; 3587 :         next_fe = get_next_facet(next_fe);

	test	esi, esi
	je	SHORT $LN300@pop_vertex@3
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN299@pop_vertex@3
$LN300@pop_vertex@3:
	mov	eax, DWORD PTR [edx+40]
$LN299@pop_vertex@3:

; 3588 :         next_fe = inverse_id(get_prev_edge(next_fe));

	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN304@pop_vertex@3
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	xor	eax, 134217728				; 08000000H
	mov	esi, eax
	mov	DWORD PTR _next_fe$91171[ebp], eax

; 3589 :       }

	jmp	$LL38@pop_vertex@3

; 3588 :         next_fe = inverse_id(get_prev_edge(next_fe));

$LN304@pop_vertex@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	mov	esi, eax
	mov	DWORD PTR _next_fe$91171[ebp], eax

; 3589 :       }

	jmp	$LL38@pop_vertex@3
$LN437@pop_vertex@3:

; 3549 :         { /* have reached next triple edge */
; 3550 :           if ( equal_id(eg,head_triples[(i+3)%4]) ) break;

	mov	ebx, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR [ebx+3]
	and	ecx, -2147483645			; 80000003H
	jns	SHORT $LN481@pop_vertex@3
	dec	ecx
	or	ecx, -4					; fffffffcH
	inc	ecx
$LN481@pop_vertex@3:
	cmp	eax, DWORD PTR _head_triples$[ebp+ecx*4]
	je	$LN466@pop_vertex@3

; 3551 :           if ( equal_element(eg,newe[0]) ) break;

	mov	ecx, eax
	or	ecx, 134217728				; 08000000H
	cmp	ecx, DWORD PTR tv3737[ebp]
	je	$LN466@pop_vertex@3

; 3552 :           if ( equal_element(eg,newe[1]) ) break;

	mov	edx, DWORD PTR _newe$[ebp+4]
	or	edx, 134217728				; 08000000H
	cmp	ecx, edx
	je	$LN466@pop_vertex@3

; 3553 :           if ( equal_element(eg,newe[2]) ) break;

	mov	edx, DWORD PTR _newe$[ebp+8]
	or	edx, 134217728				; 08000000H
	cmp	ecx, edx
	je	$LN466@pop_vertex@3

; 3554 :           if ( equal_element(eg,newe[3]) ) break;

	mov	edx, DWORD PTR _newe$[ebp+12]
	or	edx, 134217728				; 08000000H
	cmp	ecx, edx
	je	$LN466@pop_vertex@3

; 3555 :           else if ( equal_id(eg,head_triples[(i+1)%4]) )

	lea	ecx, DWORD PTR [ebx+1]
	and	ecx, -2147483645			; 80000003H
	jns	SHORT $LN482@pop_vertex@3
	dec	ecx
	or	ecx, -4					; fffffffcH
	inc	ecx
$LN482@pop_vertex@3:
	add	ecx, ecx
	add	ecx, ecx
	mov	DWORD PTR tv3810[ebp], ecx
	cmp	eax, DWORD PTR _head_triples$[ebp+ecx]
	jne	$LN466@pop_vertex@3

; 3556 :           { /* all upper edges, so go back and split out to triangle edge */
; 3557 :             facetedge_id feb = inverse_id(get_prev_edge(fe));

	mov	eax, DWORD PTR tv3564[ebp]
	test	eax, eax
	je	SHORT $LN246@pop_vertex@3
	mov	ecx, DWORD PTR tv3559[ebp]
	mov	ebx, DWORD PTR [ecx+32]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN245@pop_vertex@3
$LN246@pop_vertex@3:
	mov	edx, DWORD PTR tv3559[ebp]
	mov	ebx, DWORD PTR [edx+28]
$LN245@pop_vertex@3:
	xor	ebx, 134217728				; 08000000H

; 3558 :             facetedge_id fea = get_prev_edge(fe);

	test	eax, eax
	je	SHORT $LN250@pop_vertex@3
	mov	eax, DWORD PTR tv3559[ebp]
	mov	edi, DWORD PTR [eax+32]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN487@pop_vertex@3
$LN250@pop_vertex@3:
	mov	ecx, DWORD PTR tv3559[ebp]
	mov	edi, DWORD PTR [ecx+28]
$LN487@pop_vertex@3:

; 3559 :             facet_id fa = get_fe_facet(fe);

	test	DWORD PTR _fe$[ebp], 268435456		; 10000000H
	mov	DWORD PTR _fea$91189[ebp], edi
	jne	SHORT $LN254@pop_vertex@3
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN253@pop_vertex@3
$LN254@pop_vertex@3:
	cmp	DWORD PTR tv3564[ebp], 0
	mov	edx, DWORD PTR tv3559[ebp]
	mov	eax, DWORD PTR [edx+24]
	je	SHORT $LN253@pop_vertex@3
	xor	eax, 134217728				; 08000000H
$LN253@pop_vertex@3:

; 3560 :             facetedge_id newfe = new_facetedge(inverse_id(fa),newe[i]);

	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _newe$[ebp+ecx*4]
	xor	eax, 134217728				; 08000000H
	push	esi
	push	eax
	call	_new_facetedge
	mov	DWORD PTR _newfe$91191[ebp], eax

; 3561 :             facetedge_id newefe = get_edge_fe(newe[i]);

	mov	eax, DWORD PTR _web+124
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN258@pop_vertex@3
	xor	esi, esi
	mov	DWORD PTR _newefe$91192[ebp], esi
	jmp	SHORT $LN421@pop_vertex@3
$LN258@pop_vertex@3:
	mov	eax, DWORD PTR [eax+28]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN257@pop_vertex@3
	xor	eax, 134217728				; 08000000H
$LN257@pop_vertex@3:
	mov	esi, eax
	mov	DWORD PTR _newefe$91192[ebp], eax
$LN421@pop_vertex@3:

; 3562 : 
; 3563 :             while ( !equal_id(feb,next_fe) )

	cmp	ebx, DWORD PTR _next_fe$91171[ebp]
	je	$LN454@pop_vertex@3
	mov	ecx, DWORD PTR tv3810[ebp]
	mov	edx, DWORD PTR _newv$[ebp+ecx]
	mov	ecx, DWORD PTR _web+460
	mov	DWORD PTR tv3847[ebp], edx
	npad	3
$LL27@pop_vertex@3:

; 3564 :             { ee = get_fe_edge(feb);

	mov	edi, ebx
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	eax, DWORD PTR [edi+ecx]

; 3565 :               remove_vertex_edge(keepv,ee);

	mov	ecx, DWORD PTR _v_id$[ebp]
	mov	esi, ebx
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [eax+20]
	push	esi
	push	ecx
	call	_remove_vertex_edge

; 3566 :               set_edge_tailv(ee,newv[(i+1)%4]);

	mov	edx, DWORD PTR tv3847[ebp]
	push	edx
	push	esi
	call	_set_edge_tailv

; 3567 :               feb = get_next_facet(feb);

	mov	ecx, DWORD PTR _web+460
	add	esp, 16					; 00000010H
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN264@pop_vertex@3
	mov	eax, DWORD PTR [edi+ecx]
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN263@pop_vertex@3
$LN264@pop_vertex@3:
	mov	edx, DWORD PTR [edi+ecx]
	mov	eax, DWORD PTR [edx+40]
$LN263@pop_vertex@3:

; 3568 :               feb = inverse_id(get_prev_edge(feb));

	test	eax, 134217728				; 08000000H
	je	SHORT $LN268@pop_vertex@3
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN267@pop_vertex@3
$LN268@pop_vertex@3:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]
$LN267@pop_vertex@3:
	xor	eax, 134217728				; 08000000H
	mov	ebx, eax
	cmp	ebx, DWORD PTR _next_fe$91171[ebp]
	jne	$LL27@pop_vertex@3

; 3562 : 
; 3563 :             while ( !equal_id(feb,next_fe) )

	mov	esi, DWORD PTR _newefe$91192[ebp]
	mov	edi, DWORD PTR _fea$91189[ebp]
	jmp	SHORT $LN26@pop_vertex@3
$LN454@pop_vertex@3:
	mov	ecx, DWORD PTR _web+460
$LN26@pop_vertex@3:

; 3569 :             }
; 3570 : 
; 3571 :             set_next_edge(fea,inverse_id(newfe));

	mov	ebx, DWORD PTR _newfe$91191[ebp]
	xor	ebx, 134217728				; 08000000H
	test	edi, 268435456				; 10000000H
	je	SHORT $LN271@pop_vertex@3
	mov	edx, edi
	test	edi, 134217728				; 08000000H
	je	SHORT $LN272@pop_vertex@3
	mov	eax, ebx
	xor	eax, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [ecx+28], eax
	jmp	SHORT $LN271@pop_vertex@3
$LN272@pop_vertex@3:
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [eax+32], ebx
$LN271@pop_vertex@3:

; 3572 :             set_prev_edge(inverse_id(newfe),fea);

	push	edi
	push	ebx
	call	_set_prev_edge

; 3573 :             set_prev_edge(fe,inverse_id(newfe));

	mov	ecx, DWORD PTR _fe$[ebp]
	push	ebx
	push	ecx
	call	_set_prev_edge
	add	esp, 16					; 00000010H

; 3574 :             set_next_edge(inverse_id(newfe),fe);

	test	ebx, 268435456				; 10000000H
	je	SHORT $LN465@pop_vertex@3
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN277@pop_vertex@3
	mov	edx, DWORD PTR _fe$[ebp]
	mov	ecx, DWORD PTR _web+460
	xor	edx, 134217728				; 08000000H
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+28], edx
	jmp	SHORT $LN465@pop_vertex@3
$LN277@pop_vertex@3:
	mov	edx, DWORD PTR _web+460
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _fe$[ebp]
	mov	DWORD PTR [eax+32], ecx
$LN465@pop_vertex@3:

; 3575 :             set_next_facet(newfe,newefe);

	mov	eax, DWORD PTR _newfe$91191[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN281@pop_vertex@3
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN282@pop_vertex@3
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+36], edx
	jmp	SHORT $LN281@pop_vertex@3
$LN282@pop_vertex@3:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx+40], esi
$LN281@pop_vertex@3:

; 3576 :             set_prev_facet(newefe,newfe);

	mov	eax, DWORD PTR _newfe$91191[ebp]
	push	eax
	push	esi
	call	_set_prev_facet

; 3577 :             set_prev_facet(newfe,get_next_facet(newefe));

	mov	edi, esi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	shr	edi, 27					; 0000001bH
	add	esp, 8
	add	esi, esi
	and	edi, 1
	je	SHORT $LN287@pop_vertex@3
	mov	ecx, DWORD PTR _web+460
	mov	edx, DWORD PTR [ecx+esi]
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN286@pop_vertex@3
$LN287@pop_vertex@3:
	mov	eax, DWORD PTR _web+460
	mov	ecx, DWORD PTR [eax+esi]
	mov	eax, DWORD PTR [ecx+40]
$LN286@pop_vertex@3:
	mov	edx, DWORD PTR _newfe$91191[ebp]
	push	eax
	push	edx
	call	_set_prev_facet

; 3578 :             set_next_facet(get_next_facet(newefe),newfe);

	mov	ecx, DWORD PTR _web+460
	add	esp, 8
	test	edi, edi
	je	SHORT $LN291@pop_vertex@3
	mov	eax, DWORD PTR [ecx+esi]
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN290@pop_vertex@3
$LN291@pop_vertex@3:
	mov	edx, DWORD PTR [ecx+esi]
	mov	eax, DWORD PTR [edx+40]
$LN290@pop_vertex@3:
	test	eax, 268435456				; 10000000H
	je	SHORT $LN294@pop_vertex@3
	test	eax, 134217728				; 08000000H
	je	SHORT $LN295@pop_vertex@3
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+36], ebx
	jmp	SHORT $LN294@pop_vertex@3
$LN295@pop_vertex@3:
	mov	edx, DWORD PTR _newfe$91191[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [ecx+40], edx
$LN294@pop_vertex@3:

; 3579 : 
; 3580 :             cross_cut(inverse_id(newfe),fe);  /* triangulate */

	mov	eax, DWORD PTR _fe$[ebp]
	push	eax
	push	ebx
	call	_cross_cut
	mov	edi, DWORD PTR _dymem
	add	esp, 8
$LN467@pop_vertex@3:
	mov	ebx, DWORD PTR _i$[ebp]
$LN466@pop_vertex@3:

; 3540 :     for ( j = 0 ; j < 3 ; j++ )  /* around the triple edge */

	dec	DWORD PTR tv3485[ebp]

; 3579 : 
; 3580 :             cross_cut(inverse_id(newfe),fe);  /* triangulate */

	mov	eax, DWORD PTR _fe$[ebp]
	mov	ecx, DWORD PTR _web+460
	jne	$LL41@pop_vertex@3

; 3529 :       }
; 3530 :     }
; 3531 :   } 
; 3532 : 
; 3533 :   /* Now go around head end and reconnect, head_triples having been
; 3534 :      put in proper correspondence above                                 */
; 3535 :   for ( i = 0 ; i < 4 ; i++ )  /* upper triple edges */

	inc	ebx
	mov	DWORD PTR _i$[ebp], ebx
	cmp	ebx, 4
	jl	$LL475@pop_vertex@3

; 3590 :     }
; 3591 :   } 
; 3592 : 
; 3593 :   /* Spread new vertices */
; 3594 :   for ( i = 0 ; i < 4 ; i++ ) /* the vertices */

	mov	ebx, DWORD PTR _tail_triples$GSCopy$[ebp]
	lea	edi, DWORD PTR _newv$[ebp]
	lea	eax, DWORD PTR _head_triples$[ebp]
	sub	edi, ebx
	sub	eax, ebx
	mov	DWORD PTR tv5320[ebp], eax
	mov	DWORD PTR tv2085[ebp], 4
	npad	6
$LL455@pop_vertex@3:

; 3595 :   { REAL *x,side1[MAXCOORD],side2[MAXCOORD];
; 3596 :     x = get_coord(newv[i]);

	mov	ecx, DWORD PTR [edi+ebx]
	mov	edx, DWORD PTR _web+12
	mov	eax, DWORD PTR _web+104
	and	ecx, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _dymem
	add	esi, DWORD PTR [eax+ecx+64]

; 3597 :     get_edge_side(tail_triples[i],side1);

	mov	eax, DWORD PTR [ebx]
	lea	edx, DWORD PTR _side1$91201[ebp]
	push	edx
	push	eax
	call	_get_edge_side

; 3598 :     get_edge_side(head_triples[i],side2);

	mov	edx, DWORD PTR tv5320[ebp]
	mov	eax, DWORD PTR [edx+ebx]
	lea	ecx, DWORD PTR _side2$91202[ebp]
	push	ecx
	push	eax
	call	_get_edge_side

; 3599 :     for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	add	esp, 16					; 00000010H
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN23@pop_vertex@3
	fld	QWORD PTR __real@4018000000000000
$LN21@pop_vertex@3:

; 3600 :       x[j] += (side1[j]+side2[j])/6;

	fld	QWORD PTR _side2$91202[ebp+eax*8]
	inc	eax
	fadd	QWORD PTR _side1$91201[ebp+eax*8-8]
	fdiv	ST(0), ST(1)
	fadd	QWORD PTR [esi+eax*8-8]
	fstp	QWORD PTR [esi+eax*8-8]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN21@pop_vertex@3

; 3599 :     for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(0)
$LN23@pop_vertex@3:

; 3590 :     }
; 3591 :   } 
; 3592 : 
; 3593 :   /* Spread new vertices */
; 3594 :   for ( i = 0 ; i < 4 ; i++ ) /* the vertices */

	add	ebx, 4
	dec	DWORD PTR tv2085[ebp]
	jne	$LL455@pop_vertex@3

; 3601 :   }
; 3602 : 
; 3603 :   /* Fix up facet edge orders */
; 3604 :   for ( i = 0 ; i < 4 ; i++ )

	mov	ecx, DWORD PTR _web+460
	xor	eax, eax
	mov	DWORD PTR _i$[ebp], eax
$LL471@pop_vertex@3:

; 3605 :   { facetedge_id next_fe;
; 3606 :     int count;
; 3607 :     vertex_id base_v;
; 3608 :     fa = newfe[i];

	mov	edx, DWORD PTR _newfe$[ebp+eax*4]

; 3609 :     fb = get_next_facet(fa);

	mov	edi, edx
	shr	edi, 27					; 0000001bH
	and	edi, 1
	mov	DWORD PTR _fa$[ebp], edx
	mov	DWORD PTR tv4161[ebp], edi
	mov	eax, edx
	je	SHORT $LN308@pop_vertex@3
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv4164[ebp], eax
	mov	eax, DWORD PTR [eax+ecx]
	mov	esi, DWORD PTR [eax+36]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN488@pop_vertex@3
$LN308@pop_vertex@3:
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv4164[ebp], eax
	mov	eax, DWORD PTR [eax+ecx]
	mov	esi, DWORD PTR [eax+40]
$LN488@pop_vertex@3:
	mov	DWORD PTR _fb$[ebp], esi

; 3610 :     fc = get_prev_facet(fa);

	test	edi, edi
	je	SHORT $LN312@pop_vertex@3
	mov	ebx, DWORD PTR [eax+40]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN489@pop_vertex@3
$LN312@pop_vertex@3:
	mov	ebx, DWORD PTR [eax+36]
$LN489@pop_vertex@3:

; 3611 :     ea = get_fe_edge(fa);

	and	edx, 134217728				; 08000000H
	xor	edx, DWORD PTR [eax+20]
	mov	DWORD PTR _fc$[ebp], ebx
	mov	DWORD PTR _ea$[ebp], edx

; 3612 :     eb = get_fe_edge(inverse_id(get_prev_edge(fa)));

	test	edi, edi
	je	SHORT $LN318@pop_vertex@3
	mov	eax, DWORD PTR [eax+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN317@pop_vertex@3
$LN318@pop_vertex@3:
	mov	eax, DWORD PTR [eax+28]
$LN317@pop_vertex@3:

; 3613 :     base_v = get_edge_tailv(ea);

	mov	ebx, DWORD PTR _web+124
	xor	eax, 134217728				; 08000000H
	mov	edi, eax
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ecx+edi*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edi+20]
	mov	edi, DWORD PTR _dymem
	mov	DWORD PTR _eb$[ebp], eax
	mov	eax, edx
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR tv4200[ebp], eax
	je	SHORT $LN324@pop_vertex@3
	and	edx, 134217727				; 07ffffffH
	add	edx, edx
	add	edx, edx
	mov	eax, DWORD PTR [edx+ebx]
	mov	DWORD PTR tv4203[ebp], edx
	mov	edx, DWORD PTR _web+216
	add	eax, DWORD PTR [edx+edi+304]
	mov	edi, DWORD PTR _web+636
	mov	eax, DWORD PTR [eax+edi*4]
	jmp	SHORT $LN490@pop_vertex@3
$LN324@pop_vertex@3:
	and	edx, 134217727				; 07ffffffH
	add	edx, edx
	add	edx, edx
	mov	eax, DWORD PTR [edx+ebx]
	mov	DWORD PTR tv4203[ebp], edx
	mov	edx, DWORD PTR _web+216
	mov	edi, DWORD PTR [edx+edi+304]
	mov	eax, DWORD PTR [eax+edi]
$LN490@pop_vertex@3:
	mov	DWORD PTR _base_v$91215[ebp], eax

; 3614 :     next_fe = inverse_id(get_prev_edge(fb));

	mov	eax, esi
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR tv4214[ebp], eax
	mov	eax, esi
	je	SHORT $LN328@pop_vertex@3
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv4217[ebp], eax
	mov	eax, DWORD PTR [eax+ecx]
	mov	eax, DWORD PTR [eax+32]
	xor	eax, 134217728				; 08000000H
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR _next_fe$91213[ebp], eax

; 3615 :     for(count=0;count < 10000 ;count++)

	mov	DWORD PTR _count$91214[ebp], 0
	jmp	SHORT $LN15@pop_vertex@3

; 3614 :     next_fe = inverse_id(get_prev_edge(fb));

$LN328@pop_vertex@3:
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv4217[ebp], eax
	mov	eax, DWORD PTR [eax+ecx]
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR _next_fe$91213[ebp], eax

; 3615 :     for(count=0;count < 10000 ;count++)

	mov	DWORD PTR _count$91214[ebp], 0
	jmp	SHORT $LN15@pop_vertex@3
	npad	4
$LL468@pop_vertex@3:
	mov	edx, DWORD PTR _web+216
	mov	ebx, DWORD PTR _web+124
$LN15@pop_vertex@3:

; 3616 :     { ec = get_fe_edge(next_fe);

	mov	edi, eax
	and	edi, 134217727				; 07ffffffH
	mov	esi, eax
	add	edi, edi
	add	edi, edi
	mov	eax, DWORD PTR [edi+ecx]
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [eax+20]

; 3617 :       if ( !equal_id(get_edge_tailv(ec),base_v) )

	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	ebx, DWORD PTR _dymem
	test	esi, 134217728				; 08000000H
	je	SHORT $LN334@pop_vertex@3
	add	eax, DWORD PTR [edx+ebx+304]
	mov	edx, DWORD PTR _web+636
	mov	eax, DWORD PTR [eax+edx*4]
	jmp	SHORT $LN333@pop_vertex@3
$LN334@pop_vertex@3:
	mov	edx, DWORD PTR [edx+ebx+304]
	mov	eax, DWORD PTR [eax+edx]
$LN333@pop_vertex@3:
	cmp	eax, DWORD PTR _base_v$91215[ebp]
	je	SHORT $LN459@pop_vertex@3

; 3618 :         kb_error(4833,"pop_vertex_to_quad failure.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0BN@EANMGEMJ@pop_vertex_to_quad?5failure?4?6?$AA@
	push	4833					; 000012e1H
	call	_kb_error
	mov	ecx, DWORD PTR _web+460
	add	esp, 12					; 0000000cH
$LN459@pop_vertex@3:

; 3619 :       if ( equal_id(ec,ea) )

	cmp	esi, DWORD PTR _ea$[ebp]
	je	$LN463@pop_vertex@3

; 3620 :         break; /* ok */
; 3621 :       if ( equal_id(ec,eb) )

	cmp	esi, DWORD PTR _eb$[ebp]
	je	SHORT $LN439@pop_vertex@3

; 3629 :         break;
; 3630 :       }
; 3631 :       next_fe = inverse_id(get_prev_edge(get_prev_facet(next_fe)));

	test	DWORD PTR _next_fe$91213[ebp], 134217728 ; 08000000H
	je	SHORT $LN368@pop_vertex@3
	mov	eax, DWORD PTR [edi+ecx]
	mov	eax, DWORD PTR [eax+40]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN367@pop_vertex@3
$LN368@pop_vertex@3:
	mov	edx, DWORD PTR [edi+ecx]
	mov	eax, DWORD PTR [edx+36]
$LN367@pop_vertex@3:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN372@pop_vertex@3
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN371@pop_vertex@3
$LN372@pop_vertex@3:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]
$LN371@pop_vertex@3:

; 3615 :     for(count=0;count < 10000 ;count++)

	mov	edx, DWORD PTR _count$91214[ebp]
	inc	edx

; 3629 :         break;
; 3630 :       }
; 3631 :       next_fe = inverse_id(get_prev_edge(get_prev_facet(next_fe)));

	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR _next_fe$91213[ebp], eax
	mov	DWORD PTR _count$91214[ebp], edx
	cmp	edx, 10000				; 00002710H
	jl	$LL468@pop_vertex@3

; 3658 :       } while ( !equal_id(ea,start_e));

	jmp	$LN452@pop_vertex@3
$LN439@pop_vertex@3:

; 3622 :       { /* have to switch order around edge */
; 3623 :         set_prev_facet(fa,fb);

	mov	edi, DWORD PTR _fa$[ebp]
	mov	ebx, edi
	shr	ebx, 28					; 0000001cH
	and	ebx, 1
	mov	DWORD PTR tv4286[ebp], ebx
	je	SHORT $LN460@pop_vertex@3
	cmp	DWORD PTR tv4161[ebp], 0
	je	SHORT $LN338@pop_vertex@3
	mov	edx, DWORD PTR _fb$[ebp]
	mov	esi, DWORD PTR tv4164[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	eax, edx
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR [ecx+40], eax
	jmp	SHORT $LN337@pop_vertex@3
$LN338@pop_vertex@3:
	mov	edx, DWORD PTR tv4164[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	edx, DWORD PTR _fb$[ebp]
	mov	DWORD PTR [eax+36], edx
$LN337@pop_vertex@3:
	mov	eax, DWORD PTR _global_timestamp
	mov	ecx, DWORD PTR _web+460
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	jmp	SHORT $LN340@pop_vertex@3
$LN460@pop_vertex@3:
	mov	edx, DWORD PTR _fb$[ebp]
$LN340@pop_vertex@3:

; 3624 :         set_prev_facet(fb,fc);

	mov	eax, edx
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv4290[ebp], eax
	je	SHORT $LN461@pop_vertex@3
	cmp	DWORD PTR tv4214[ebp], 0
	je	SHORT $LN343@pop_vertex@3
	mov	eax, DWORD PTR _fc$[ebp]
	mov	ebx, DWORD PTR tv4217[ebp]
	mov	ecx, DWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR tv4286[ebp]
	mov	esi, eax
	xor	esi, 134217728				; 08000000H
	mov	DWORD PTR [ecx+40], esi
	jmp	SHORT $LN342@pop_vertex@3
$LN343@pop_vertex@3:
	mov	eax, DWORD PTR tv4217[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	eax, DWORD PTR _fc$[ebp]
	mov	DWORD PTR [ecx+36], eax
$LN342@pop_vertex@3:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
	mov	ecx, DWORD PTR _web+460
	jmp	SHORT $LN345@pop_vertex@3
$LN461@pop_vertex@3:
	mov	eax, DWORD PTR _fc$[ebp]
$LN345@pop_vertex@3:

; 3625 :         set_prev_facet(fc,fa);

	mov	esi, eax
	shr	esi, 28					; 0000001cH
	and	esi, 1
	je	SHORT $LN462@pop_vertex@3
	mov	ebx, eax
	test	eax, 134217728				; 08000000H
	je	SHORT $LN348@pop_vertex@3
	xor	edi, 134217728				; 08000000H
	and	ebx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+ebx*4]
	mov	DWORD PTR [ecx+40], edi
	mov	edi, DWORD PTR _fa$[ebp]
	jmp	SHORT $LN491@pop_vertex@3
$LN348@pop_vertex@3:
	and	ebx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+ebx*4]
	mov	DWORD PTR [ecx+36], edi
$LN491@pop_vertex@3:
	mov	ecx, DWORD PTR _global_timestamp
	mov	ebx, DWORD PTR tv4286[ebp]
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
	mov	ecx, DWORD PTR _web+460
$LN462@pop_vertex@3:

; 3626 :         set_next_facet(fa,fc);

	test	ebx, ebx
	je	SHORT $LN473@pop_vertex@3
	cmp	DWORD PTR tv4161[ebp], 0
	mov	ebx, DWORD PTR tv4164[ebp]
	mov	ecx, DWORD PTR [ebx+ecx]
	je	SHORT $LN353@pop_vertex@3
	mov	edi, eax
	xor	edi, 134217728				; 08000000H
	mov	DWORD PTR [ecx+36], edi
	mov	edi, DWORD PTR _fa$[ebp]
	jmp	SHORT $LN492@pop_vertex@3
$LN353@pop_vertex@3:
	mov	DWORD PTR [ecx+40], eax
$LN492@pop_vertex@3:
	mov	ecx, DWORD PTR _web+460
$LN473@pop_vertex@3:

; 3627 :         set_next_facet(fc,fb);

	test	esi, esi
	je	SHORT $LN476@pop_vertex@3
	test	eax, 134217728				; 08000000H
	je	SHORT $LN358@pop_vertex@3
	xor	edx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+36], edx
	jmp	SHORT $LN493@pop_vertex@3
$LN358@pop_vertex@3:
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [ecx+40], edx
$LN493@pop_vertex@3:
	mov	ecx, DWORD PTR _web+460
$LN476@pop_vertex@3:

; 3628 :         set_next_facet(fb,fa);

	cmp	DWORD PTR tv4290[ebp], 0
	je	SHORT $LN463@pop_vertex@3
	cmp	DWORD PTR tv4214[ebp], 0
	mov	edx, DWORD PTR tv4217[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	je	SHORT $LN363@pop_vertex@3
	xor	edi, 134217728				; 08000000H
	mov	DWORD PTR [eax+36], edi
	jmp	SHORT $LN494@pop_vertex@3
$LN363@pop_vertex@3:
	mov	DWORD PTR [eax+40], edi
$LN494@pop_vertex@3:
	mov	ecx, DWORD PTR _web+460
$LN463@pop_vertex@3:

; 3632 :     }
; 3633 :     if ( count >= 10000 ) 

	cmp	DWORD PTR _count$91214[ebp], 10000	; 00002710H
	jl	$LN17@pop_vertex@3
$LN452@pop_vertex@3:

; 3634 :     { sprintf(errmsg,"Internal error after pop_vertex_to_quad edge %s, bad topology around vertex %s.\n",ELNAME(v_id),ELNAME1(get_edge_tailv(ea)));

	mov	edx, DWORD PTR tv4200[ebp]
	mov	esi, DWORD PTR _web+216
	test	edx, edx
	je	SHORT $LN376@pop_vertex@3
	mov	eax, DWORD PTR _web+124
	mov	ecx, DWORD PTR tv4203[ebp]
	mov	ecx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [esi+eax+304]
	add	eax, ecx
	mov	ecx, DWORD PTR _web+636
	mov	ecx, DWORD PTR [eax+ecx*4]
	jmp	SHORT $LN375@pop_vertex@3
$LN376@pop_vertex@3:
	mov	ecx, DWORD PTR _web+124
	mov	eax, DWORD PTR tv4203[ebp]
	mov	eax, DWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [esi+ecx+304]
	add	eax, ecx
	mov	ecx, DWORD PTR [eax]
$LN375@pop_vertex@3:
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN75@pop_vertex@3
	test	edx, edx
	je	SHORT $LN380@pop_vertex@3
	mov	edx, DWORD PTR _web+636
	mov	eax, DWORD PTR [eax+edx*4]
	jmp	SHORT $LN379@pop_vertex@3
$LN380@pop_vertex@3:
	mov	eax, DWORD PTR [eax]
$LN379@pop_vertex@3:
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames+30
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	esi, OFFSET _elnames+30
	jmp	SHORT $LN76@pop_vertex@3
$LN75@pop_vertex@3:
	mov	esi, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN76@pop_vertex@3:
	mov	eax, DWORD PTR _v_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN77@pop_vertex@3
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN78@pop_vertex@3
$LN77@pop_vertex@3:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN78@pop_vertex@3:
	push	esi
	push	eax
	push	OFFSET ??_C@_0FB@IEGCKKGE@Internal?5error?5after?5pop_vertex_@
	push	OFFSET _errmsg
	call	_sprintf

; 3635 :       kb_error(4832,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	4832					; 000012e0H
	call	_kb_error
	mov	ecx, DWORD PTR _web+460
	add	esp, 28					; 0000001cH
$LN17@pop_vertex@3:

; 3601 :   }
; 3602 : 
; 3603 :   /* Fix up facet edge orders */
; 3604 :   for ( i = 0 ; i < 4 ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, 4
	jl	$LL471@pop_vertex@3

; 3636 :     }
; 3637 :   }
; 3638 :  
; 3639 : 
; 3640 :   /* Fix up bodies on new facet */
; 3641 :   fe = newfe[0];
; 3642 :   set_facet_body(newf,
; 3643 :      get_facet_body(inverse_id(get_fe_facet(get_prev_facet(fe)))));

	mov	esi, DWORD PTR _newfe$[ebp]
	mov	edi, esi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	shr	edi, 27					; 0000001bH
	add	esi, esi
	and	edi, 1
	je	SHORT $LN384@pop_vertex@3
	mov	eax, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [eax+40]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN383@pop_vertex@3
$LN384@pop_vertex@3:
	mov	edx, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [edx+36]
$LN383@pop_vertex@3:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN388@pop_vertex@3
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN389@pop_vertex@3
$LN388@pop_vertex@3:
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [ecx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN387@pop_vertex@3
	xor	ecx, 134217728				; 08000000H
$LN387@pop_vertex@3:
	mov	eax, ecx
$LN389@pop_vertex@3:
	xor	ebx, ebx
	xor	eax, 134217728				; 08000000H
	cmp	DWORD PTR _web+400, ebx
	jne	SHORT $LN394@pop_vertex@3
	xor	eax, eax
	jmp	SHORT $LN391@pop_vertex@3
$LN394@pop_vertex@3:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN393@pop_vertex@3
	xor	eax, eax
	jmp	SHORT $LN391@pop_vertex@3
$LN393@pop_vertex@3:
	mov	edx, DWORD PTR _web+236
	mov	ecx, DWORD PTR _web+328
	test	eax, 134217728				; 08000000H
	je	SHORT $LN392@pop_vertex@3
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edx+784]
	mov	eax, DWORD PTR [eax+ecx+4]
	jmp	SHORT $LN391@pop_vertex@3
$LN392@pop_vertex@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edx+784]
	mov	eax, DWORD PTR [eax+ecx]
$LN391@pop_vertex@3:
	mov	edx, DWORD PTR _newf$[ebp]
	push	eax
	push	edx
	call	_set_facet_body

; 3644 :   set_facet_body(inverse_id(newf),
; 3645 :      get_facet_body(get_fe_facet(get_next_facet(fe))));

	mov	ecx, DWORD PTR _web+460
	add	esp, 8
	cmp	edi, ebx
	je	SHORT $LN398@pop_vertex@3
	mov	eax, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN397@pop_vertex@3
$LN398@pop_vertex@3:
	mov	edx, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [edx+40]
$LN397@pop_vertex@3:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN402@pop_vertex@3
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN403@pop_vertex@3
$LN402@pop_vertex@3:
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [ecx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN401@pop_vertex@3
	xor	ecx, 134217728				; 08000000H
$LN401@pop_vertex@3:
	mov	eax, ecx
$LN403@pop_vertex@3:
	cmp	DWORD PTR _web+400, ebx
	jne	SHORT $LN408@pop_vertex@3
	xor	eax, eax
	jmp	SHORT $LN405@pop_vertex@3
$LN408@pop_vertex@3:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN407@pop_vertex@3
	xor	eax, eax
	jmp	SHORT $LN405@pop_vertex@3
$LN407@pop_vertex@3:
	mov	edx, DWORD PTR _web+236
	mov	ecx, DWORD PTR _web+328
	test	eax, 134217728				; 08000000H
	je	SHORT $LN406@pop_vertex@3
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edx+784]
	mov	eax, DWORD PTR [eax+ecx+4]
	jmp	SHORT $LN405@pop_vertex@3
$LN406@pop_vertex@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edx+784]
	mov	eax, DWORD PTR [eax+ecx]
$LN405@pop_vertex@3:
	mov	edx, DWORD PTR tv3579[ebp]
	push	eax
	push	edx
	call	_set_facet_body
	add	esp, 8

; 3646 : 
; 3647 :   if ( web.modeltype == QUADRATIC )

	cmp	DWORD PTR _web+628, 2
	jne	$LN5@pop_vertex@3

; 3648 :   { /* fix up edge midpoints */
; 3649 :     int bailcount = 0;
; 3650 :     for ( i = 0 ; i < 4 ; i++ )

	mov	eax, DWORD PTR _web+124
	mov	DWORD PTR _i$[ebp], ebx
	npad	9
$LL7@pop_vertex@3:

; 3651 :     { edge_id start_e = get_vertex_edge(newv[i]);

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _newv$[ebp+ecx*4]
	mov	ecx, DWORD PTR _web+12
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	edi, DWORD PTR [edx+28]
	mov	DWORD PTR _start_e$91234[ebp], edi
$LL4@pop_vertex@3:

; 3652 :       edge_id ea;
; 3653 :       ea = start_e;
; 3654 :       do
; 3655 :       { new_vertex_average(get_edge_midv(ea),VOLKEEP);

	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+edx+304]
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+eax]
	mov	edx, DWORD PTR [eax+ecx+8]
	push	1
	push	edx
	call	_new_vertex_average

; 3656 :         ea = get_next_tail_edge(ea);

	mov	eax, DWORD PTR _web+124
	mov	ecx, DWORD PTR [esi+eax]
	shr	edi, 27					; 0000001bH

; 3657 :         if ( bailcount++ > 1000 ) break;

	mov	edx, ebx
	and	edi, 1
	mov	edi, DWORD PTR [ecx+edi*4+32]
	add	esp, 8
	inc	ebx
	cmp	edx, 1000				; 000003e8H
	jg	SHORT $LN2@pop_vertex@3

; 3658 :       } while ( !equal_id(ea,start_e));

	cmp	edi, DWORD PTR _start_e$91234[ebp]
	jne	SHORT $LL4@pop_vertex@3
$LN2@pop_vertex@3:

; 3648 :   { /* fix up edge midpoints */
; 3649 :     int bailcount = 0;
; 3650 :     for ( i = 0 ; i < 4 ; i++ )

	mov	ecx, DWORD PTR _i$[ebp]
	inc	ecx
	mov	DWORD PTR _i$[ebp], ecx
	cmp	ecx, 4
	jl	$LL7@pop_vertex@3
$LN5@pop_vertex@3:

; 3659 :     }
; 3660 :   }
; 3661 : 
; 3662 :   /* divide central square */
; 3663 :   cross_cut(newfe[0],newfe[1]);

	mov	eax, DWORD PTR _newfe$[ebp+4]
	mov	ecx, DWORD PTR _newfe$[ebp]
	push	eax
	push	ecx
	call	_cross_cut

; 3664 : 
; 3665 :   return 1;
; 3666 : 
; 3667 : }  /* end pop_vertex_to_quad */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 8
	pop	edi
	pop	esi
	xor	ecx, ebp
	mov	eax, 1
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_pop_vertex_to_quad ENDP
_TEXT	ENDS
PUBLIC	??_C@_0FA@IBHCIAMH@Internal?5error?5after?5pop_quad_to@ ; `string'
PUBLIC	??_C@_0CL@OFDIFAEM@Aborted?5pop_quad_to_quad?5halfway@ ; `string'
PUBLIC	??_C@_0BH@HGDKHHJ@New?5quad?5not?5created?4?6?$AA@ ; `string'
PUBLIC	??_C@_0DN@MJLKOCGB@Unanticipated?5geometry?5after?5eli@ ; `string'
PUBLIC	??_C@_0DF@KBGCOEK@pop_quad_to_quad?3?5over?5100?5facet@ ; `string'
PUBLIC	??_C@_0BO@IIADHOKG@pop_quad_to_quad?5on?5facet?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0DG@OMIDNMHD@?5?5?5Probably?5a?5face?5of?5a?5pyramid?5@ ; `string'
PUBLIC	??_C@_0DL@GCKOOBOC@?5?5?5since?5triple?5edges?5?$CFs?5and?5?$CFs?5@ ; `string'
PUBLIC	??_C@_0CE@LKDHJFH@Pop_quad_to_quad?5fails?5on?5facet?5@ ; `string'
PUBLIC	??_C@_0EC@FCOFFPHG@pop_quad_to_quad?5fails?5on?5facet?5@ ; `string'
PUBLIC	??_C@_0FG@MLOFMGC@pop_quad_to_quad?5fails?5on?5facet?5@ ; `string'
PUBLIC	??_C@_0EJ@CJLJADOE@pop_quad_to_quad?5fails?5on?5facet?5@ ; `string'
PUBLIC	??_C@_0FA@NPCIHFIH@pop_quad_to_quad?5fails?5on?5facet?5@ ; `string'
PUBLIC	??_C@_0DP@EDKPFGPH@pop_quad_to_quad?5fails?5on?5facet?5@ ; `string'
PUBLIC	??_C@_0DM@JFEDHAJM@pop_quad_to_quad?5fails?5on?5facet?5@ ; `string'
PUBLIC	??_C@_0EJ@PBPGIEG@pop_quad_to_quad?5fails?5on?5facet?5@ ; `string'
PUBLIC	??_C@_0DH@BFIOMDDA@pop_quad_to_quad?5only?5for?5LINEAR@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_pop_quad_to_quad
EXTRN	_get_edge_length:PROC
EXTRN	_calc_edge:PROC
;	COMDAT ??_C@_0FA@IBHCIAMH@Internal?5error?5after?5pop_quad_to@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0FA@IBHCIAMH@Internal?5error?5after?5pop_quad_to@ DB 'Internal erro'
	DB	'r after pop_quad_to_quad facet %s, bad topology around vertex'
	DB	' %s.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@OFDIFAEM@Aborted?5pop_quad_to_quad?5halfway@
CONST	SEGMENT
??_C@_0CL@OFDIFAEM@Aborted?5pop_quad_to_quad?5halfway@ DB 'Aborted pop_qu'
	DB	'ad_to_quad halfway through.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HGDKHHJ@New?5quad?5not?5created?4?6?$AA@
CONST	SEGMENT
??_C@_0BH@HGDKHHJ@New?5quad?5not?5created?4?6?$AA@ DB 'New quad not creat'
	DB	'ed.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@MJLKOCGB@Unanticipated?5geometry?5after?5eli@
CONST	SEGMENT
??_C@_0DN@MJLKOCGB@Unanticipated?5geometry?5after?5eli@ DB 'Unanticipated'
	DB	' geometry after eliminating quad for facet %s.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@KBGCOEK@pop_quad_to_quad?3?5over?5100?5facet@
CONST	SEGMENT
??_C@_0DF@KBGCOEK@pop_quad_to_quad?3?5over?5100?5facet@ DB 'pop_quad_to_q'
	DB	'uad: over 100 facets in quadrilateral.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IIADHOKG@pop_quad_to_quad?5on?5facet?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BO@IIADHOKG@pop_quad_to_quad?5on?5facet?5?$CFs?6?$AA@ DB 'pop_quad'
	DB	'_to_quad on facet %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@OMIDNMHD@?5?5?5Probably?5a?5face?5of?5a?5pyramid?5@
CONST	SEGMENT
??_C@_0DG@OMIDNMHD@?5?5?5Probably?5a?5face?5of?5a?5pyramid?5@ DB '   Prob'
	DB	'ably a face of a pyramid or triangular prism.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@GCKOOBOC@?5?5?5since?5triple?5edges?5?$CFs?5and?5?$CFs?5@
CONST	SEGMENT
??_C@_0DL@GCKOOBOC@?5?5?5since?5triple?5edges?5?$CFs?5and?5?$CFs?5@ DB ' '
	DB	'  since triple edges %s and %s have common far endpoint.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LKDHJFH@Pop_quad_to_quad?5fails?5on?5facet?5@
CONST	SEGMENT
??_C@_0CE@LKDHJFH@Pop_quad_to_quad?5fails?5on?5facet?5@ DB 'Pop_quad_to_q'
	DB	'uad fails on facet %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@FCOFFPHG@pop_quad_to_quad?5fails?5on?5facet?5@
CONST	SEGMENT
??_C@_0EC@FCOFFPHG@pop_quad_to_quad?5fails?5on?5facet?5@ DB 'pop_quad_to_'
	DB	'quad fails on facet %s since edge %s has valence %d.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FG@MLOFMGC@pop_quad_to_quad?5fails?5on?5facet?5@
CONST	SEGMENT
??_C@_0FG@MLOFMGC@pop_quad_to_quad?5fails?5on?5facet?5@ DB 'pop_quad_to_q'
	DB	'uad fails on facet %s since vertex %s doesn''t have enough tr'
	DB	'iple edges.', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@CJLJADOE@pop_quad_to_quad?5fails?5on?5facet?5@
CONST	SEGMENT
??_C@_0EJ@CJLJADOE@pop_quad_to_quad?5fails?5on?5facet?5@ DB 'pop_quad_to_'
	DB	'quad fails on facet %s; too many triple edges on vertex %s.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@NPCIHFIH@pop_quad_to_quad?5fails?5on?5facet?5@
CONST	SEGMENT
??_C@_0FA@NPCIHFIH@pop_quad_to_quad?5fails?5on?5facet?5@ DB 'pop_quad_to_'
	DB	'quad fails on facet %s; didn''t find quadrilateral of triple '
	DB	'edges.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@EDKPFGPH@pop_quad_to_quad?5fails?5on?5facet?5@
CONST	SEGMENT
??_C@_0DP@EDKPFGPH@pop_quad_to_quad?5fails?5on?5facet?5@ DB 'pop_quad_to_'
	DB	'quad fails on facet %s; edge %s valence too high.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@JFEDHAJM@pop_quad_to_quad?5fails?5on?5facet?5@
CONST	SEGMENT
??_C@_0DM@JFEDHAJM@pop_quad_to_quad?5fails?5on?5facet?5@ DB 'pop_quad_to_'
	DB	'quad fails on facet %s; edge %s has valence 1.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@PBPGIEG@pop_quad_to_quad?5fails?5on?5facet?5@
CONST	SEGMENT
??_C@_0EJ@PBPGIEG@pop_quad_to_quad?5fails?5on?5facet?5@ DB 'pop_quad_to_q'
	DB	'uad fails on facet %s since it doesn''t have a triple edge.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@BFIOMDDA@pop_quad_to_quad?5only?5for?5LINEAR@
CONST	SEGMENT
??_C@_0DH@BFIOMDDA@pop_quad_to_quad?5only?5for?5LINEAR@ DB 'pop_quad_to_q'
	DB	'uad only for LINEAR or QUADRATIC models.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\popfilm.c
CONST	ENDS
;	COMDAT _pop_quad_to_quad
_TEXT	SEGMENT
_x$ = -944						; size = 16
tv9187 = -928						; size = 4
tv10467 = -924						; size = 4
$T96818 = -924						; size = 4
tv10572 = -920						; size = 4
_keepfe$ = -920						; size = 4
_ii$ = -920						; size = 4
tv10451 = -916						; size = 4
tv9794 = -916						; size = 4
_keepe$ = -916						; size = 4
tv11850 = -912						; size = 4
tv10701 = -912						; size = 4
tv7918 = -912						; size = 4
tv5337 = -912						; size = 4
$T96675 = -912						; size = 4
tv9452 = -908						; size = 4
tv8376 = -908						; size = 4
$T96812 = -908						; size = 4
_newefe$91546 = -908					; size = 4
tv10464 = -904						; size = 4
tv10321 = -904						; size = 4
tv5193 = -904						; size = 4
tv5173 = -904						; size = 4
_fea$91543 = -904					; size = 4
_fea$91522 = -904					; size = 4
_fea$91473 = -904					; size = 4
_newefe$91443 = -904					; size = 4
tv10491 = -900						; size = 4
tv9465 = -900						; size = 4
tv9449 = -900						; size = 4
tv9214 = -900						; size = 4
tv9817 = -896						; size = 4
tv9764 = -896						; size = 4
_fa$ = -896						; size = 4
_newf$ = -896						; size = 4
_jj$ = -896						; size = 4
tv9206 = -892						; size = 4
_newfe$91475 = -892					; size = 4
_feb$91439 = -892					; size = 4
_eb$ = -892						; size = 4
tv10583 = -888						; size = 4
tv10191 = -888						; size = 4
tv9996 = -888						; size = 4
tv9870 = -888						; size = 4
tv9801 = -888						; size = 4
tv9573 = -888						; size = 4
tv9460 = -888						; size = 4
tv8380 = -888						; size = 4
tv5060 = -888						; size = 4
tv5038 = -888						; size = 4
_start_e$91604 = -888					; size = 4
tv1449 = -888						; size = 4
_newfe$91524 = -888					; size = 4
_newefe$91476 = -888					; size = 4
_newfe$91442 = -888					; size = 4
_start_fe$ = -888					; size = 4
tv11958 = -884						; size = 4
tv10653 = -884						; size = 4
tv10526 = -884						; size = 4
tv10303 = -884						; size = 4
tv9767 = -884						; size = 4
tv8351 = -884						; size = 4
_newfe$91545 = -884					; size = 4
_newefe$91525 = -884					; size = 4
_feb$91472 = -884					; size = 4
_fea$91440 = -884					; size = 4
_fb$ = -884						; size = 4
tv9797 = -880						; size = 4
tv9203 = -880						; size = 4
_count$91587 = -880					; size = 4
_qfcount$ = -880					; size = 4
_j$ = -880						; size = 4
_next_fe$ = -876					; size = 4
_k$ = -876						; size = 4
_i$ = -876						; size = 4
_ea$ = -872						; size = 4
_fe$ = -872						; size = 4
_quadfacets$ = -868					; size = 400
_sides$ = -468						; size = 384
_other_triples$ = -84					; size = 32
_len$ = -84						; size = 32
_newv$ = -52						; size = 16
_newfe$ = -36						; size = 16
_newe$ = -20						; size = 16
_quad_triples$ = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_f_id$ = 8						; size = 4
_pop_quad_to_quad PROC					; COMDAT

; 3681 : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 944				; 000003b0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 3682 :   facetedge_id fe,next_fe,start_fe,quad_triples[4],newfe[4],fea,keepfe;
; 3683 :   edge_id e_id,ee_id,eee_id,other_triples[4][2],ea,eb,ec,keepe,newe[4];
; 3684 :   vertex_id newv[4];
; 3685 :   facet_id newf,fa,fb,fc;
; 3686 :   body_id b_id;
; 3687 :   int i,j,k,ii,jj;
; 3688 :   REAL len[4];
; 3689 :   REAL sides[4][2][MAXCOORD];
; 3690 :   REAL *x[4];
; 3691 : #define MAXQF 100
; 3692 :   facet_id quadfacets[MAXQF];
; 3693 :   int qfcount;
; 3694 : 
; 3695 :   if ( (web.modeltype != LINEAR) && (web.modeltype != QUADRATIC) )

	mov	eax, DWORD PTR _web+628
	cmp	eax, 1
	je	SHORT $LN221@pop_quad_t
	cmp	eax, 2
	je	SHORT $LN221@pop_quad_t

; 3696 :     kb_error(2836,"pop_quad_to_quad only for LINEAR or QUADRATIC models.\n",
; 3697 :        RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DH@BFIOMDDA@pop_quad_to_quad?5only?5for?5LINEAR@
	push	2836					; 00000b14H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN221@pop_quad_t:

; 3698 : 
; 3699 :   /* quad could be four facets or two, or more */
; 3700 : 
; 3701 :   /* Check geometry and gather info about triple edges */
; 3702 : 
; 3703 :   /* find triple edge on original facet */
; 3704 :   fe = get_facet_fe(f_id);

	push	ebx
	mov	ebx, DWORD PTR _f_id$[ebp]
	mov	eax, ebx
	shr	eax, 28					; 0000001cH
	push	esi
	and	eax, 1
	push	edi
	mov	DWORD PTR tv9187[ebp], eax
	jne	SHORT $LN263@pop_quad_t
	xor	esi, esi
	jmp	SHORT $LN262@pop_quad_t
$LN263@pop_quad_t:
	mov	ecx, DWORD PTR _web+236
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	esi, DWORD PTR [edx+28]
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN262@pop_quad_t
	xor	esi, 134217728				; 08000000H
$LN262@pop_quad_t:

; 3705 :   for ( i = 0 ; i < 3 ; i++ )

	mov	edx, DWORD PTR _web+460
	mov	DWORD PTR _i$[ebp], 0
$LL220@pop_quad_t:

; 3706 :   { edge_id e_id = get_fe_edge(fe);

	mov	edi, esi
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	eax, DWORD PTR [edi+edx]
	mov	eax, DWORD PTR [eax+20]
	mov	ecx, esi
	and	ecx, 134217728				; 08000000H
	xor	ecx, eax

; 3707 :     if ( get_edge_valence(e_id) == 3 ) break;

	push	ecx
	call	_get_edge_valence
	mov	edx, DWORD PTR _web+460
	add	esp, 4
	cmp	eax, 3
	je	SHORT $LN1495@pop_quad_t

; 3708 :     fe = get_next_edge(fe);

	test	esi, 134217728				; 08000000H
	je	SHORT $LN269@pop_quad_t
	mov	eax, DWORD PTR [edi+edx]
	mov	esi, DWORD PTR [eax+28]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN219@pop_quad_t
$LN269@pop_quad_t:
	mov	ecx, DWORD PTR [edi+edx]
	mov	esi, DWORD PTR [ecx+32]
$LN219@pop_quad_t:

; 3705 :   for ( i = 0 ; i < 3 ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, 3
	jl	SHORT $LL220@pop_quad_t
$LN1495@pop_quad_t:

; 3709 :   }
; 3710 :   if ( i == 3 )   /* couldn't find a triple edge */

	cmp	DWORD PTR _i$[ebp], 3
	jne	SHORT $LN216@pop_quad_t

; 3711 :   { if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	SHORT $LN215@pop_quad_t

; 3712 :     { sprintf(msg,"pop_quad_to_quad fails on facet %s since it doesn't have a triple edge.\n",ELNAME(f_id));

	cmp	DWORD PTR tv9187[ebp], 0
	je	SHORT $LN224@pop_quad_t
	and	ebx, 134217727				; 07ffffffH
	inc	ebx
	push	ebx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN225@pop_quad_t
$LN224@pop_quad_t:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN225@pop_quad_t:
	mov	edx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0EJ@PBPGIEG@pop_quad_to_quad?5fails?5on?5facet?5@
	push	edx
	call	_sprintf

; 3713 :       outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 16					; 00000010H
$LN215@pop_quad_t:

; 3714 :     }
; 3715 :     return 0;

	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx

; 4437 :     }
; 4438 :   }
; 4439 : 
; 4440 :   return 1;
; 4441 : } /* end pop_quad_to_quad */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN216@pop_quad_t:

; 3716 :   }
; 3717 : 
; 3718 :   /* march around inner quad */
; 3719 :   start_fe = fe;

	mov	DWORD PTR _start_fe$[ebp], esi

; 3720 :   for ( i = 0 ; i < 4 ; i++ )

	xor	ebx, ebx
	jmp	SHORT $LL211@pop_quad_t
	npad	3
$LL1447@pop_quad_t:
	mov	edx, DWORD PTR _web+460
$LL211@pop_quad_t:

; 3721 :   {
; 3722 :     for(;;) /* seek next triple */ 
; 3723 :     { fe = inverse_id(get_prev_edge(fe));

	test	esi, 134217728				; 08000000H
	je	SHORT $LN273@pop_quad_t
	and	esi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+esi*4]
	mov	esi, DWORD PTR [ecx+32]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN272@pop_quad_t
$LN273@pop_quad_t:
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+esi*4]
	mov	esi, DWORD PTR [eax+28]
$LN272@pop_quad_t:
	xor	esi, 134217728				; 08000000H

; 3724 :       if ( equal_id(fe,get_next_facet(fe)) ) /* valence 1 edge */

	mov	edi, esi
	shr	edi, 27					; 0000001bH
	and	edi, 1
	je	SHORT $LN277@pop_quad_t
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [eax+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN276@pop_quad_t
$LN277@pop_quad_t:
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR [eax+40]
$LN276@pop_quad_t:
	cmp	esi, ecx
	je	$LN1236@pop_quad_t

; 3730 :       }
; 3731 :       if ( !equal_id(get_next_facet(fe),get_prev_facet(fe)) )

	test	edi, edi
	je	SHORT $LN285@pop_quad_t
	mov	ecx, DWORD PTR [eax+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN1564@pop_quad_t
$LN285@pop_quad_t:
	mov	ecx, DWORD PTR [eax+40]
$LN1564@pop_quad_t:
	mov	DWORD PTR $T96675[ebp], ecx
	test	edi, edi
	je	SHORT $LN289@pop_quad_t
	mov	ecx, DWORD PTR [eax+40]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN288@pop_quad_t
$LN289@pop_quad_t:
	mov	ecx, DWORD PTR [eax+36]
$LN288@pop_quad_t:
	cmp	DWORD PTR $T96675[ebp], ecx
	jne	SHORT $LN1237@pop_quad_t

; 3732 :         break;  /* found triple */
; 3733 :       fe = get_next_facet(fe);

	test	edi, edi
	je	SHORT $LN293@pop_quad_t
	mov	esi, DWORD PTR [eax+36]
	xor	esi, 134217728				; 08000000H
	jmp	$LL211@pop_quad_t
$LN293@pop_quad_t:
	mov	esi, DWORD PTR [eax+40]

; 3734 :     }

	jmp	$LL211@pop_quad_t
$LN1237@pop_quad_t:

; 3735 :     /* now have next triple */
; 3736 :     e_id = get_fe_edge(fe);

	mov	edi, esi
	and	edi, 134217728				; 08000000H
	xor	edi, DWORD PTR [eax+20]

; 3737 :     if ( get_edge_valence(e_id) != 3 ) 

	push	edi
	call	_get_edge_valence
	add	esp, 4
	cmp	eax, 3
	jne	$LN1238@pop_quad_t

; 3743 :     }
; 3744 :     quad_triples[i] = fe;

	mov	DWORD PTR _quad_triples$[ebp+ebx*4], esi
	inc	ebx

; 3745 : 
; 3746 :     fe = inverse_id(fe);   /* get ready for next triple line search */

	xor	esi, 134217728				; 08000000H
	cmp	ebx, 4
	jl	$LL1447@pop_quad_t

; 3747 :   }
; 3748 :   if ( !equal_id(start_fe,fe) )

	cmp	DWORD PTR _start_fe$[ebp], esi
	je	$LN204@pop_quad_t

; 3749 :   { if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	$LN215@pop_quad_t

; 3750 :     { sprintf(msg,"pop_quad_to_quad fails on facet %s; didn't find quadrilateral of triple edges.\n",ELNAME(f_id));

	cmp	DWORD PTR tv9187[ebp], 0
	je	$LN234@pop_quad_t
	mov	eax, DWORD PTR _f_id$[ebp]
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	$LN235@pop_quad_t
$LN1236@pop_quad_t:

; 3725 :       { if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	$LN208@pop_quad_t

; 3726 :         { sprintf(msg,"pop_quad_to_quad fails on facet %s; edge %s has valence 1.\n",ELNAME(f_id),ELNAME1(get_fe_edge(fe)));

	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+esi*4]
	mov	eax, DWORD PTR [edx+20]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN226@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames+30
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	esi, OFFSET _elnames+30
	jmp	SHORT $LN227@pop_quad_t
$LN226@pop_quad_t:
	mov	esi, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN227@pop_quad_t:
	cmp	DWORD PTR tv9187[ebp], 0
	je	SHORT $LN228@pop_quad_t
	mov	eax, DWORD PTR _f_id$[ebp]
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN229@pop_quad_t
$LN228@pop_quad_t:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN229@pop_quad_t:
	push	esi
	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0DM@JFEDHAJM@pop_quad_to_quad?5fails?5on?5facet?5@
	push	eax
	call	_sprintf

; 3727 :           outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 20					; 00000014H
$LN208@pop_quad_t:

; 3728 :         }
; 3729 :         return 0;

	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx

; 4437 :     }
; 4438 :   }
; 4439 : 
; 4440 :   return 1;
; 4441 : } /* end pop_quad_to_quad */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN1238@pop_quad_t:

; 3738 :     { if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	SHORT $LN208@pop_quad_t

; 3739 :       { sprintf(msg,"pop_quad_to_quad fails on facet %s; edge %s valence too high.\n",ELNAME(f_id),ELNAME1(e_id));

	test	edi, 268435456				; 10000000H
	je	SHORT $LN230@pop_quad_t
	and	edi, 134217727				; 07ffffffH
	inc	edi
	push	edi
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames+30
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	esi, OFFSET _elnames+30
	jmp	SHORT $LN231@pop_quad_t
$LN230@pop_quad_t:
	mov	esi, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN231@pop_quad_t:
	cmp	DWORD PTR tv9187[ebp], 0
	je	SHORT $LN232@pop_quad_t
	mov	eax, DWORD PTR _f_id$[ebp]
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN233@pop_quad_t
$LN232@pop_quad_t:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN233@pop_quad_t:
	push	esi
	push	eax
	push	OFFSET ??_C@_0DP@EDKPFGPH@pop_quad_to_quad?5fails?5on?5facet?5@
$LN1622@pop_quad_t:
	mov	edx, DWORD PTR _msg
	push	edx
	call	_sprintf

; 3740 :         outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
$LN1623@pop_quad_t:
	call	_outstring
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi

; 3741 :       }
; 3742 :       return 0;

	xor	eax, eax
	pop	ebx

; 4437 :     }
; 4438 :   }
; 4439 : 
; 4440 :   return 1;
; 4441 : } /* end pop_quad_to_quad */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN234@pop_quad_t:

; 3750 :     { sprintf(msg,"pop_quad_to_quad fails on facet %s; didn't find quadrilateral of triple edges.\n",ELNAME(f_id));

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN235@pop_quad_t:
	mov	ecx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0FA@NPCIHFIH@pop_quad_to_quad?5fails?5on?5facet?5@
	push	ecx
	call	_sprintf

; 3751 :       outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi

; 3752 :     }
; 3753 :     return 0;

	xor	eax, eax
	pop	ebx

; 4437 :     }
; 4438 :   }
; 4439 : 
; 4440 :   return 1;
; 4441 : } /* end pop_quad_to_quad */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN204@pop_quad_t:

; 3754 :   }
; 3755 : 
; 3756 :   /* Find shorter pair of opposite edges, and swap if necessary
; 3757 :      so quad_triples[1,3] has short edges */
; 3758 :   for ( i = 0 ; i < 4 ; i++ ) 

	xor	esi, esi
$LL1518@pop_quad_t:

; 3759 :   { e_id = get_fe_edge(quad_triples[i]);

	mov	eax, DWORD PTR _quad_triples$[ebp+esi*4]
	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	mov	edi, eax

; 3760 :     calc_edge(e_id);

	push	edi
	call	_calc_edge

; 3761 :     len[i] = get_edge_length(e_id);

	push	edi
	call	_get_edge_length
	fstp	QWORD PTR _len$[ebp+esi*8]
	inc	esi
	add	esp, 8
	cmp	esi, 4
	jl	SHORT $LL1518@pop_quad_t

; 3762 :   }
; 3763 :   if ( (len[0]+len[2]) < (len[1]+len[3]) )

	fld	QWORD PTR _len$[ebp+16]
	fadd	QWORD PTR _len$[ebp]
	fld	QWORD PTR _len$[ebp+24]
	fadd	QWORD PTR _len$[ebp+8]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN1448@pop_quad_t

; 3764 :   { facetedge_id temp_fe = quad_triples[0];
; 3765 :     quad_triples[0] = quad_triples[1]; 

	mov	edx, DWORD PTR _quad_triples$[ebp+4]
	mov	eax, DWORD PTR _quad_triples$[ebp]

; 3766 :     quad_triples[1] = quad_triples[2]; 

	mov	ecx, DWORD PTR _quad_triples$[ebp+8]
	mov	DWORD PTR _quad_triples$[ebp], edx

; 3767 :     quad_triples[2] = quad_triples[3]; 

	mov	edx, DWORD PTR _quad_triples$[ebp+12]
	mov	DWORD PTR _quad_triples$[ebp+4], ecx
	mov	DWORD PTR _quad_triples$[ebp+8], edx

; 3768 :     quad_triples[3] = temp_fe; 

	mov	DWORD PTR _quad_triples$[ebp+12], eax
$LN1448@pop_quad_t:

; 3769 :   }
; 3770 : 
; 3771 :   /* Find the other triple lines at each corner */
; 3772 :   for ( i = 0 ; i < 4 ; i++ )

	mov	ecx, DWORD PTR _web+460
	mov	DWORD PTR _i$[ebp], 0
	npad	8
$LL1519@pop_quad_t:

; 3773 :   { edge_id ee_id;
; 3774 :     int val;
; 3775 : 
; 3776 :     e_id = get_fe_edge(quad_triples[i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _quad_triples$[ebp+eax*4]
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]

; 3777 :     ee_id = e_id;
; 3778 :     j = 0;

	mov	DWORD PTR _j$[ebp], 0
	mov	ebx, eax
	mov	esi, ebx
	npad	5
$LL195@pop_quad_t:

; 3779 :     do
; 3780 :     { ee_id = get_next_tail_edge(ee_id);

	mov	eax, DWORD PTR _web+124
	mov	edx, esi
	shr	edx, 27					; 0000001bH
	and	esi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+esi*4]
	and	edx, 1
	mov	esi, DWORD PTR [ecx+edx*4+32]

; 3781 :       val = get_edge_valence(ee_id);

	push	esi
	call	_get_edge_valence
	mov	edi, eax
	add	esp, 4

; 3782 :       if ( (val < 2) || (val > 3) ) 

	cmp	edi, 2
	jl	$LN191@pop_quad_t
	cmp	edi, 3
	jg	$LN191@pop_quad_t

; 3790 :       }
; 3791 :       if ( val == 3 )

	mov	ecx, DWORD PTR _web+460
	jne	SHORT $LN194@pop_quad_t

; 3792 :       { if ( equal_element(ee_id,e_id) ) continue;

	mov	eax, esi
	mov	edx, ebx
	or	eax, 134217728				; 08000000H
	or	edx, 134217728				; 08000000H
	cmp	eax, edx
	je	SHORT $LN194@pop_quad_t

; 3793 :         if ( equal_element(ee_id,get_fe_edge(quad_triples[(i+3)%4])) )

	mov	edx, DWORD PTR _i$[ebp]
	lea	edi, DWORD PTR [edx+3]
	and	edi, -2147483645			; 80000003H
	jns	SHORT $LN1562@pop_quad_t
	dec	edi
	or	edi, -4					; fffffffcH
	inc	edi
$LN1562@pop_quad_t:
	mov	edi, DWORD PTR _quad_triples$[ebp+edi*4]
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ecx+edi*4]
	mov	edi, DWORD PTR [edi+20]
	or	edi, 134217728				; 08000000H
	cmp	eax, edi
	je	SHORT $LN194@pop_quad_t

; 3794 :           continue;
; 3795 :         if ( j >= 2 ) 

	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, 2
	jge	$LN1241@pop_quad_t

; 3801 :         }
; 3802 :         other_triples[i][j++] = ee_id;

	lea	edx, DWORD PTR [eax+edx*2]
	inc	eax
	mov	DWORD PTR _other_triples$[ebp+edx*4], esi
	mov	DWORD PTR _j$[ebp], eax
$LN194@pop_quad_t:

; 3803 :       }
; 3804 :     } while ( !equal_id(e_id,ee_id));

	cmp	ebx, esi
	jne	$LL195@pop_quad_t

; 3805 :     if ( j != 2 )

	cmp	DWORD PTR _j$[ebp], 2
	jne	$LN1242@pop_quad_t

; 3769 :   }
; 3770 : 
; 3771 :   /* Find the other triple lines at each corner */
; 3772 :   for ( i = 0 ; i < 4 ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, 4
	jl	$LL1519@pop_quad_t

; 3811 :     }
; 3812 :   }
; 3813 : 
; 3814 :   /* check outer triples for common endpoints, due to triangular
; 3815 :    * prisms and pyramids.
; 3816 :    */
; 3817 :   for ( i = 0 ; i < 4 ; i++ )

	mov	ebx, DWORD PTR _web+216
	mov	edx, DWORD PTR _web+124
	mov	ecx, DWORD PTR _dymem
	xor	eax, eax
	mov	DWORD PTR _i$[ebp], eax
	npad	12
$LL1521@pop_quad_t:

; 3818 :    for ( j = 0 ; j < 2 ; j++ )

	xor	esi, esi
	mov	DWORD PTR _j$[ebp], esi
	npad	8
$LL1522@pop_quad_t:

; 3819 :     for ( ii = i ; ii < 4 ; ii++ )

	mov	DWORD PTR _ii$[ebp], eax
	cmp	eax, 4
	jge	$LN178@pop_quad_t
	npad	1
$LL1523@pop_quad_t:

; 3820 :      for ( jj = 0 ; jj < 2 ; jj++ )

	mov	DWORD PTR _jj$[ebp], 0
	npad	6
$LL1524@pop_quad_t:

; 3821 :      { if ( (ii == i) && (jj == j) ) continue;

	mov	edi, DWORD PTR _ii$[ebp]
	cmp	edi, eax
	jne	SHORT $LN1500@pop_quad_t
	cmp	DWORD PTR _jj$[ebp], esi
	je	$LN172@pop_quad_t
$LN1500@pop_quad_t:

; 3822 :        if ( equal_id(get_edge_headv(other_triples[i][j]),
; 3823 :              get_edge_headv(other_triples[ii][jj])) ) 

	mov	ecx, DWORD PTR [ebx+ecx+304]
	lea	eax, DWORD PTR [esi+eax*2]
	mov	eax, DWORD PTR _other_triples$[ebp+eax*4]
	test	eax, 134217728				; 08000000H
	je	$LN323@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	esi, DWORD PTR [ecx+eax]
	jmp	$LN322@pop_quad_t
$LN1241@pop_quad_t:

; 3796 :         { if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	$LN208@pop_quad_t

; 3797 :           { sprintf(msg,"pop_quad_to_quad fails on facet %s; too many triple edges on vertex %s.\n",ELNAME(f_id),ELNAME1(get_edge_tailv(ee_id)));

	mov	edi, DWORD PTR _web+636
	mov	edx, esi
	shr	edx, 27					; 0000001bH
	and	edx, 1
	je	SHORT $LN307@pop_quad_t
	mov	eax, DWORD PTR _web+124
	and	esi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR _web+216
	mov	esi, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+esi+304]
	add	eax, ecx
	mov	ecx, DWORD PTR [eax+edi*4]
	jmp	SHORT $LN306@pop_quad_t
$LN307@pop_quad_t:
	mov	ecx, DWORD PTR _web+124
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+esi*4]
	mov	ecx, DWORD PTR _web+216
	mov	esi, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+esi+304]
	add	eax, ecx
	mov	ecx, DWORD PTR [eax]
$LN306@pop_quad_t:
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN240@pop_quad_t
	test	edx, edx
	je	SHORT $LN311@pop_quad_t
	mov	eax, DWORD PTR [eax+edi*4]
	jmp	SHORT $LN310@pop_quad_t
$LN311@pop_quad_t:
	mov	eax, DWORD PTR [eax]
$LN310@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames+30
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	esi, OFFSET _elnames+30
	jmp	SHORT $LN241@pop_quad_t
$LN240@pop_quad_t:
	mov	esi, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN241@pop_quad_t:
	cmp	DWORD PTR tv9187[ebp], 0
	je	SHORT $LN242@pop_quad_t
	mov	eax, DWORD PTR _f_id$[ebp]
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	push	esi
	mov	eax, OFFSET _elnames
	push	eax
	push	OFFSET ??_C@_0EJ@CJLJADOE@pop_quad_to_quad?5fails?5on?5facet?5@

; 3798 :             outstring(msg);
; 3799 :           }
; 3800 :           return 0;

	jmp	$LN1622@pop_quad_t
$LN242@pop_quad_t:

; 3797 :           { sprintf(msg,"pop_quad_to_quad fails on facet %s; too many triple edges on vertex %s.\n",ELNAME(f_id),ELNAME1(get_edge_tailv(ee_id)));

	push	esi
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	eax
	push	OFFSET ??_C@_0EJ@CJLJADOE@pop_quad_to_quad?5fails?5on?5facet?5@

; 3798 :             outstring(msg);
; 3799 :           }
; 3800 :           return 0;

	jmp	$LN1622@pop_quad_t
$LN1242@pop_quad_t:

; 3806 :     { if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	$LN208@pop_quad_t

; 3807 :       { sprintf(msg,"pop_quad_to_quad fails on facet %s since vertex %s doesn't have enough triple edges.\n",ELNAME(f_id),ELNAME1(get_edge_tailv(e_id)));

	mov	esi, DWORD PTR _web+636
	mov	edi, DWORD PTR _dymem
	mov	edx, ebx
	shr	edx, 27					; 0000001bH
	and	edx, 1
	je	SHORT $LN315@pop_quad_t
	mov	ecx, DWORD PTR _web+124
	and	ebx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+ebx*4]
	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+edi+304]
	add	eax, ecx
	mov	ecx, DWORD PTR [eax+esi*4]
	jmp	SHORT $LN314@pop_quad_t
$LN315@pop_quad_t:
	mov	eax, DWORD PTR _web+124
	and	ebx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR _web+216
	mov	eax, DWORD PTR [eax+edi+304]
	add	eax, ecx
	mov	ecx, DWORD PTR [eax]
$LN314@pop_quad_t:
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN244@pop_quad_t
	test	edx, edx
	je	SHORT $LN319@pop_quad_t
	mov	eax, DWORD PTR [eax+esi*4]
	jmp	SHORT $LN318@pop_quad_t
$LN319@pop_quad_t:
	mov	eax, DWORD PTR [eax]
$LN318@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames+30
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	esi, OFFSET _elnames+30
	jmp	SHORT $LN245@pop_quad_t
$LN244@pop_quad_t:
	mov	esi, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN245@pop_quad_t:
	cmp	DWORD PTR tv9187[ebp], 0
	je	SHORT $LN246@pop_quad_t
	mov	eax, DWORD PTR _f_id$[ebp]
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN247@pop_quad_t
$LN246@pop_quad_t:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN247@pop_quad_t:
	mov	ecx, DWORD PTR _msg
	push	esi
	push	eax
	push	OFFSET ??_C@_0FG@MLOFMGC@pop_quad_to_quad?5fails?5on?5facet?5@
	push	ecx
	call	_sprintf

; 3808 :         outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx

; 3809 :       }
; 3810 :       return 0;

	jmp	$LN1623@pop_quad_t
$LN191@pop_quad_t:

; 3783 :       { if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	$LN190@pop_quad_t

; 3784 :         { sprintf(msg,
; 3785 :           "pop_quad_to_quad fails on facet %s since edge %s has valence %d.\n",
; 3786 :               ELNAME(f_id),ELNAME1(ee_id),val);

	test	esi, 268435456				; 10000000H
	je	SHORT $LN236@pop_quad_t
	and	esi, 134217727				; 07ffffffH
	inc	esi
	push	esi
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames+30
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	esi, OFFSET _elnames+30
	jmp	SHORT $LN237@pop_quad_t
$LN236@pop_quad_t:
	mov	esi, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN237@pop_quad_t:
	cmp	DWORD PTR tv9187[ebp], 0
	je	SHORT $LN238@pop_quad_t
	mov	eax, DWORD PTR _f_id$[ebp]
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN239@pop_quad_t
$LN238@pop_quad_t:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN239@pop_quad_t:
	push	edi
	push	esi
	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0EC@FCOFFPHG@pop_quad_to_quad?5fails?5on?5facet?5@
	push	eax
	call	_sprintf

; 3787 :           outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 24					; 00000018H
$LN190@pop_quad_t:

; 3788 :         }
; 3789 :         return 0;

	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx

; 4437 :     }
; 4438 :   }
; 4439 : 
; 4440 :   return 1;
; 4441 : } /* end pop_quad_to_quad */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0

; 3822 :        if ( equal_id(get_edge_headv(other_triples[i][j]),
; 3823 :              get_edge_headv(other_triples[ii][jj])) ) 

$LN323@pop_quad_t:
	mov	esi, DWORD PTR _web+636
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	lea	eax, DWORD PTR [eax+esi*4]
	mov	esi, DWORD PTR [eax+ecx]
$LN322@pop_quad_t:
	mov	eax, DWORD PTR _jj$[ebp]
	lea	eax, DWORD PTR [eax+edi*2]
	mov	eax, DWORD PTR _other_triples$[ebp+eax*4]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN327@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR [ecx+eax]
	jmp	SHORT $LN326@pop_quad_t
$LN327@pop_quad_t:
	mov	edi, DWORD PTR _web+636
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	lea	eax, DWORD PTR [eax+edi*4]
	mov	ecx, DWORD PTR [eax+ecx]
$LN326@pop_quad_t:
	cmp	esi, ecx
	je	$LN1243@pop_quad_t
	mov	esi, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR _i$[ebp]
$LN172@pop_quad_t:

; 3820 :      for ( jj = 0 ; jj < 2 ; jj++ )

	inc	DWORD PTR _jj$[ebp]
	cmp	DWORD PTR _jj$[ebp], 2
	jl	$LL1524@pop_quad_t

; 3819 :     for ( ii = i ; ii < 4 ; ii++ )

	mov	edi, DWORD PTR _ii$[ebp]
	inc	edi
	mov	DWORD PTR _ii$[ebp], edi
	cmp	edi, 4
	jl	$LL1523@pop_quad_t
$LN178@pop_quad_t:

; 3818 :    for ( j = 0 ; j < 2 ; j++ )

	inc	esi
	mov	DWORD PTR _j$[ebp], esi
	cmp	esi, 2
	jl	$LL1522@pop_quad_t

; 3811 :     }
; 3812 :   }
; 3813 : 
; 3814 :   /* check outer triples for common endpoints, due to triangular
; 3815 :    * prisms and pyramids.
; 3816 :    */
; 3817 :   for ( i = 0 ; i < 4 ; i++ )

	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, 4
	jl	$LL1521@pop_quad_t

; 3830 :          return 0;
; 3831 :        }
; 3832 :      }
; 3833 : 
; 3834 : 
; 3835 :   if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	$LN1456@pop_quad_t

; 3836 :   { sprintf(msg,"pop_quad_to_quad on facet %s\n",ELNAME(f_id));

	cmp	DWORD PTR tv9187[ebp], 0
	je	$LN254@pop_quad_t
	mov	eax, DWORD PTR _f_id$[ebp]
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	$LN255@pop_quad_t
$LN1243@pop_quad_t:

; 3824 :        { sprintf(msg,"Pop_quad_to_quad fails on facet %s\n",ELNAME(f_id));

	cmp	DWORD PTR tv9187[ebp], 0
	je	SHORT $LN248@pop_quad_t
	mov	eax, DWORD PTR _f_id$[ebp]
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN249@pop_quad_t
$LN248@pop_quad_t:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN249@pop_quad_t:
	mov	ecx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0CE@LKDHJFH@Pop_quad_to_quad?5fails?5on?5facet?5@
	push	ecx
	call	_sprintf

; 3825 :          sprintf(msg+strlen(msg),
; 3826 :             "   since triple edges %s and %s have common far endpoint.\n",
; 3827 :               ELNAME(other_triples[i][j]),ELNAME1(other_triples[ii][jj]));

	mov	eax, DWORD PTR _jj$[ebp]
	mov	edx, DWORD PTR _ii$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	eax, DWORD PTR _other_triples$[ebp+ecx*4]
	add	esp, 12					; 0000000cH
	test	eax, 268435456				; 10000000H
	je	SHORT $LN250@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames+30
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	ebx, OFFSET _elnames+30
	jmp	SHORT $LN251@pop_quad_t
$LN250@pop_quad_t:
	mov	ebx, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN251@pop_quad_t:
	mov	eax, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	eax, DWORD PTR _other_triples$[ebp+ecx*4]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN252@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	edx, OFFSET _elnames
	jmp	SHORT $LN253@pop_quad_t
$LN252@pop_quad_t:
	mov	edx, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN253@pop_quad_t:
	mov	esi, DWORD PTR _msg
	mov	eax, esi
	lea	edi, DWORD PTR [eax+1]
$LL1525@pop_quad_t:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1525@pop_quad_t
	push	ebx
	push	edx
	sub	eax, edi
	add	eax, esi
	push	OFFSET ??_C@_0DL@GCKOOBOC@?5?5?5since?5triple?5edges?5?$CFs?5and?5?$CFs?5@
	push	eax
	call	_sprintf

; 3828 :          strcat(msg,"   Probably a face of a pyramid or triangular prism.\n");

	mov	edi, DWORD PTR _msg
	add	esp, 16					; 00000010H
	dec	edi
$LL1526@pop_quad_t:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1526@pop_quad_t
	mov	ecx, 13					; 0000000dH
	mov	esi, OFFSET ??_C@_0DG@OMIDNMHD@?5?5?5Probably?5a?5face?5of?5a?5pyramid?5@
	rep movsd
	movsw

; 3829 :          outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 4
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx

; 4437 :     }
; 4438 :   }
; 4439 : 
; 4440 :   return 1;
; 4441 : } /* end pop_quad_to_quad */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN254@pop_quad_t:

; 3836 :   { sprintf(msg,"pop_quad_to_quad on facet %s\n",ELNAME(f_id));

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN255@pop_quad_t:
	mov	ecx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0BO@IIADHOKG@pop_quad_to_quad?5on?5facet?5?$CFs?6?$AA@
	push	ecx
	call	_sprintf

; 3837 :     outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 16					; 00000010H
$LN1456@pop_quad_t:

; 3838 :   }
; 3839 : 
; 3840 :   ea = get_fe_edge(quad_triples[0]); /* for identifying kept edge */
; 3841 :   eb = get_fe_edge(quad_triples[2]);
; 3842 : 
; 3843 :   /* use old facet to get attributes for new before deleting old */
; 3844 :   /*  newf = new_facet(); */
; 3845 :   newf = dup_facet(f_id);

	mov	ebx, DWORD PTR _f_id$[ebp]
	push	ebx
	call	_dup_facet
	mov	esi, eax

; 3846 :   set_original(newf,NULLID);

	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	edx, DWORD PTR _web[eax+12]
	mov	ecx, esi
	xor	edi, edi
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]

; 3847 :   set_facet_body(newf,NULLID); 

	push	edi
	push	esi
	mov	DWORD PTR _newf$[ebp], esi
	mov	DWORD PTR [eax+20], edi
	call	_set_facet_body

; 3848 :   set_facet_body(inverse_id(newf),NULLID);

	push	edi
	xor	esi, 134217728				; 08000000H
	push	esi
	call	_set_facet_body

; 3849 : 
; 3850 :   /* get list of the quadrilateral's facets, in case quad is subdivided
; 3851 :      too much for simple edge deletion to take care of 
; 3852 :    */
; 3853 :   quadfacets[0] = f_id;

	mov	DWORD PTR _quadfacets$[ebp], ebx

; 3854 :   qfcount = 1;
; 3855 :   for ( i = 0 ; i < qfcount ; i++ )

	mov	ebx, DWORD PTR _web+460
	add	esp, 20					; 00000014H
	mov	DWORD PTR _qfcount$[ebp], 1
	mov	DWORD PTR _i$[ebp], edi
$LL1527@pop_quad_t:

; 3856 :   { fa = quadfacets[i];

	mov	ecx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _quadfacets$[ebp+ecx*4]

; 3857 :     fea = get_facet_fe(fa);

	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN335@pop_quad_t
	xor	eax, eax
	jmp	SHORT $LN334@pop_quad_t
$LN335@pop_quad_t:
	mov	eax, DWORD PTR _web+236
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [edx+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN334@pop_quad_t
	xor	eax, 134217728				; 08000000H
$LN334@pop_quad_t:

; 3858 :     for ( j = 0 ; j < 3 ; j++, fea = get_next_edge(fea) )

	mov	DWORD PTR tv5337[ebp], 3
$LL1528@pop_quad_t:

; 3859 :     { if ( equal_id(get_next_facet(fea),get_prev_facet(fea)) )

	mov	edx, eax
	shr	edx, 27					; 0000001bH
	and	edx, 1
	mov	DWORD PTR tv9465[ebp], edx
	je	SHORT $LN343@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	lea	esi, DWORD PTR [eax+eax]
	mov	eax, DWORD PTR [ebx+esi]
	mov	ecx, DWORD PTR [eax+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN342@pop_quad_t
$LN343@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	lea	esi, DWORD PTR [eax+eax]
	mov	eax, DWORD PTR [ebx+esi]
	mov	ecx, DWORD PTR [eax+40]
$LN342@pop_quad_t:
	test	edx, edx
	je	SHORT $LN347@pop_quad_t
	mov	edx, DWORD PTR [eax+40]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN346@pop_quad_t
$LN347@pop_quad_t:
	mov	edx, DWORD PTR [eax+36]
$LN346@pop_quad_t:
	cmp	ecx, edx
	jne	$LN163@pop_quad_t

; 3860 :       { /* add neighbor facet to list if not already there */
; 3861 :         fb = get_fe_facet(get_next_facet(fea));

	cmp	DWORD PTR tv9465[ebp], 0
	je	SHORT $LN351@pop_quad_t
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN350@pop_quad_t
$LN351@pop_quad_t:
	mov	eax, DWORD PTR [eax+40]
$LN350@pop_quad_t:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN355@pop_quad_t
	mov	edi, DWORD PTR _NULLFACET
	jmp	SHORT $LN356@pop_quad_t
$LN355@pop_quad_t:
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+ecx*4]
	mov	ecx, DWORD PTR [edx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN354@pop_quad_t
	xor	ecx, 134217728				; 08000000H
$LN354@pop_quad_t:
	mov	edi, ecx
$LN356@pop_quad_t:

; 3862 :         for ( k = 0 ; k < qfcount ; k++ )

	mov	edx, DWORD PTR _qfcount$[ebp]
	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN1244@pop_quad_t
	mov	ecx, edi
	or	ecx, 134217728				; 08000000H
	npad	5
$LL1529@pop_quad_t:

; 3863 :         { if ( equal_element(fb,quadfacets[k]) )

	mov	edx, DWORD PTR _quadfacets$[ebp+eax*4]
	or	edx, 134217728				; 08000000H
	cmp	ecx, edx
	mov	edx, DWORD PTR _qfcount$[ebp]
	je	SHORT $LN1244@pop_quad_t

; 3862 :         for ( k = 0 ; k < qfcount ; k++ )

	inc	eax
	cmp	eax, edx
	jl	SHORT $LL1529@pop_quad_t
$LN1244@pop_quad_t:

; 3864 :             break;
; 3865 :         }
; 3866 :         if ( k == qfcount ) /* not found, so add to list */

	cmp	eax, edx
	jne	SHORT $LN163@pop_quad_t

; 3867 :         { if ( qfcount >= MAXQF )

	cmp	edx, 100				; 00000064H
	jl	SHORT $LN155@pop_quad_t

; 3868 :           { kb_error(2840,"pop_quad_to_quad: over 100 facets in quadrilateral.\n", RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DF@KBGCOEK@pop_quad_to_quad?3?5over?5100?5facet@
	push	2840					; 00000b18H
	call	_kb_error
	mov	ebx, DWORD PTR _web+460
	mov	edx, DWORD PTR _qfcount$[ebp]
	add	esp, 12					; 0000000cH
$LN155@pop_quad_t:

; 3869 :           }
; 3870 :           quadfacets[qfcount++] = fb;

	mov	DWORD PTR _quadfacets$[ebp+edx*4], edi
	inc	edx
	mov	DWORD PTR _qfcount$[ebp], edx
$LN163@pop_quad_t:

; 3858 :     for ( j = 0 ; j < 3 ; j++, fea = get_next_edge(fea) )

	cmp	DWORD PTR tv9465[ebp], 0
	je	SHORT $LN339@pop_quad_t
	mov	eax, DWORD PTR [ebx+esi]
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN1266@pop_quad_t
$LN339@pop_quad_t:
	mov	ecx, DWORD PTR [ebx+esi]
	mov	eax, DWORD PTR [ecx+32]
$LN1266@pop_quad_t:
	dec	DWORD PTR tv5337[ebp]
	jne	$LL1528@pop_quad_t

; 3854 :   qfcount = 1;
; 3855 :   for ( i = 0 ; i < qfcount ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _qfcount$[ebp]
	jl	$LL1527@pop_quad_t

; 3871 :         }
; 3872 :       }
; 3873 :     }
; 3874 :   }
; 3875 : 
; 3876 :   /* Delete original quadrilateral by deleting the short edges */
; 3877 :   keepfe = get_next_facet(quad_triples[0]);

	mov	eax, DWORD PTR _quad_triples$[ebp]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN359@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+eax*4]
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR _keepfe$[ebp], eax
	jmp	SHORT $LN358@pop_quad_t
$LN359@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _keepfe$[ebp], ecx
$LN358@pop_quad_t:

; 3878 :   e_id = get_fe_edge(quad_triples[1]);

	mov	eax, DWORD PTR _quad_triples$[ebp+4]
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	mov	esi, eax

; 3879 :   delete_edge(e_id);

	push	esi
	call	_delete_edge

; 3880 :   free_element(e_id);

	push	esi
	call	_free_element

; 3881 :   e_id = get_fe_edge(quad_triples[3]);

	mov	eax, DWORD PTR _quad_triples$[ebp+12]
	mov	ecx, DWORD PTR _web+460
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]
	mov	esi, eax

; 3882 :   delete_edge(e_id);

	push	esi
	call	_delete_edge

; 3883 :   free_element(e_id);

	push	esi
	call	_free_element

; 3884 : 
; 3885 :   /* now delete any leftover quadrilateral facets */
; 3886 :   for ( i = 0 ; i < qfcount ; i++ )

	xor	esi, esi
	add	esp, 16					; 00000010H
	cmp	DWORD PTR _qfcount$[ebp], esi
	jle	SHORT $LN152@pop_quad_t
	mov	ebx, DWORD PTR _qfcount$[ebp]
	npad	8
$LL1530@pop_quad_t:

; 3887 :     if ( valid_element(quadfacets[i]) )

	mov	edi, DWORD PTR _quadfacets$[ebp+esi*4]
	push	edi
	call	_valid_element
	add	esp, 4
	test	eax, eax
	je	SHORT $LN153@pop_quad_t

; 3888 :       delete_facet(quadfacets[i]);

	push	edi
	call	_delete_facet
	add	esp, 4
$LN153@pop_quad_t:

; 3884 : 
; 3885 :   /* now delete any leftover quadrilateral facets */
; 3886 :   for ( i = 0 ; i < qfcount ; i++ )

	inc	esi
	cmp	esi, ebx
	jl	SHORT $LL1530@pop_quad_t
$LN152@pop_quad_t:

; 3889 : 
; 3890 :   /* make sure all the triple lines are left */
; 3891 :   for ( i = 0 ; i < 4 ; i++ )

	lea	eax, DWORD PTR _other_triples$[ebp]
	mov	DWORD PTR tv8351[ebp], 4
	mov	esi, 1
	npad	12
$LL1531@pop_quad_t:

; 3892 :     for ( j = 0 ; j < 2 ; j++ )

	mov	ebx, eax
	mov	DWORD PTR tv7918[ebp], 2
	npad	4
$LL1532@pop_quad_t:

; 3893 :       if ( !valid_element(other_triples[i][j]) )

	mov	eax, DWORD PTR [ebx]
	push	eax
	call	_valid_element
	add	esp, 4
	test	eax, eax
	jne	$LN146@pop_quad_t

; 3894 :       { sprintf(errmsg,
; 3895 :           "Unanticipated geometry after eliminating quad for facet %s.\n",
; 3896 :              ELNAME(f_id));

	cmp	DWORD PTR tv9187[ebp], eax
	je	SHORT $LN256@pop_quad_t
	mov	ecx, DWORD PTR _f_id$[ebp]
	and	ecx, 134217727				; 07ffffffH
	add	ecx, esi
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN257@pop_quad_t
$LN256@pop_quad_t:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN257@pop_quad_t:
	push	eax
	push	OFFSET ??_C@_0DN@MJLKOCGB@Unanticipated?5geometry?5after?5eli@
	push	OFFSET _errmsg
	call	_sprintf

; 3897 :         strcat(errmsg,"New quad not created.\n");

	mov	edi, OFFSET _errmsg
	add	esp, 12					; 0000000cH
	dec	edi
	npad	2
$LL1533@pop_quad_t:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1533@pop_quad_t
	mov	ecx, 5
	mov	esi, OFFSET ??_C@_0BH@HGDKHHJ@New?5quad?5not?5created?4?6?$AA@
	rep movsd
	movsw

; 3898 :         kb_error(2828,errmsg,WARNING);

	push	2
	push	OFFSET _errmsg
	push	2828					; 00000b0cH
	movsb
	call	_kb_error
	add	esp, 12					; 0000000cH
	mov	esi, 1
$LN146@pop_quad_t:

; 3892 :     for ( j = 0 ; j < 2 ; j++ )

	add	ebx, 4
	sub	DWORD PTR tv7918[ebp], esi
	jne	$LL1532@pop_quad_t

; 3889 : 
; 3890 :   /* make sure all the triple lines are left */
; 3891 :   for ( i = 0 ; i < 4 ; i++ )

	sub	DWORD PTR tv8351[ebp], esi
	mov	eax, ebx
	jne	$LL1531@pop_quad_t

; 3899 :       }
; 3900 :  
; 3901 :   /* Identify the remaining edge */
; 3902 :   keepe = get_fe_edge(keepfe);

	mov	esi, DWORD PTR _keepfe$[ebp]
	mov	eax, DWORD PTR _web+460

; 3903 : 
; 3904 :   /* Create new quad */
; 3905 :   newv[0] = get_edge_tailv(keepe);

	mov	edi, DWORD PTR _web+636
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR _dymem
	mov	edx, DWORD PTR _web+216
	mov	edx, DWORD PTR [edx+eax+304]
	mov	eax, DWORD PTR _web+124
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [ecx+20]
	mov	ecx, esi
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR _keepe$[ebp], esi
	mov	DWORD PTR tv9573[ebp], ecx
	je	SHORT $LN369@pop_quad_t
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [eax+esi]
	add	eax, edx
	mov	edx, DWORD PTR [eax+edi*4]
	jmp	SHORT $LN1565@pop_quad_t
$LN369@pop_quad_t:
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [eax+esi]
	add	eax, edx
	mov	edx, DWORD PTR [eax]
$LN1565@pop_quad_t:
	mov	DWORD PTR $T96812[ebp], edx
	mov	DWORD PTR _newv$[ebp], edx

; 3906 :   newv[1] = get_edge_headv(keepe);

	test	ecx, ecx
	je	SHORT $LN373@pop_quad_t
	mov	ebx, DWORD PTR [eax]
	jmp	SHORT $LN1566@pop_quad_t
$LN373@pop_quad_t:
	mov	ebx, DWORD PTR [eax+edi*4]
$LN1566@pop_quad_t:

; 3907 :   newv[2] = dup_vertex(newv[1]);

	push	ebx
	mov	DWORD PTR $T96818[ebp], ebx
	mov	DWORD PTR _newv$[ebp+4], ebx
	call	_dup_vertex

; 3908 :   newv[3] = dup_vertex(newv[0]);

	mov	ecx, DWORD PTR $T96812[ebp]
	push	ecx
	mov	DWORD PTR _newv$[ebp+8], eax
	call	_dup_vertex
	mov	DWORD PTR _newv$[ebp+12], eax

; 3909 :   newe[0] = keepe;

	mov	eax, DWORD PTR _keepe$[ebp]

; 3910 :   newe[1] = dup_edge(keepe); 

	push	eax
	mov	DWORD PTR _newe$[ebp], eax
	call	_dup_edge
	mov	edi, eax

; 3911 :   set_edge_tailv(newe[1],newv[1]);

	push	ebx
	push	edi
	mov	DWORD PTR _newe$[ebp+4], edi
	call	_set_edge_tailv

; 3912 :   set_edge_headv(newe[1],newv[2]);

	mov	edx, DWORD PTR _newv$[ebp+8]
	push	edx
	push	edi
	call	_set_edge_headv

; 3913 :   newe[2] = dup_edge(keepe); 

	mov	eax, DWORD PTR _keepe$[ebp]
	push	eax
	call	_dup_edge

; 3914 :   set_edge_tailv(newe[2],newv[2]);

	mov	ecx, DWORD PTR _newv$[ebp+8]
	mov	ebx, eax
	push	ecx
	push	ebx
	mov	DWORD PTR _newe$[ebp+8], ebx
	call	_set_edge_tailv

; 3915 :   set_edge_headv(newe[2],newv[3]);

	mov	edx, DWORD PTR _newv$[ebp+12]
	push	edx
	push	ebx
	call	_set_edge_headv

; 3916 :   newe[3] = dup_edge(keepe); 

	mov	eax, DWORD PTR _keepe$[ebp]
	push	eax
	call	_dup_edge

; 3917 :   set_edge_tailv(newe[3],newv[3]);

	mov	ecx, DWORD PTR _newv$[ebp+12]
	push	ecx
	push	eax
	mov	DWORD PTR _newe$[ebp+12], eax
	call	_set_edge_tailv

; 3918 :   set_edge_headv(newe[3],newv[0]);

	mov	edx, DWORD PTR $T96812[ebp]
	mov	eax, DWORD PTR _newe$[ebp+12]
	push	edx
	push	eax
	call	_set_edge_headv
	add	esp, 68					; 00000044H

; 3919 :   if ( web.symmetry_flag )

	cmp	DWORD PTR _web+856, 0
	je	$LN1486@pop_quad_t

; 3920 :   { set_edge_wrap(newe[1],0);

	test	edi, 134217728				; 08000000H
	je	SHORT $LN378@pop_quad_t
	push	0
	call	DWORD PTR _sym_inverse
	add	esp, 4
	jmp	SHORT $LN379@pop_quad_t
$LN378@pop_quad_t:
	xor	eax, eax
$LN379@pop_quad_t:
	mov	ecx, DWORD PTR _web+124
	and	edi, 134217727				; 07ffffffH

; 3921 :     set_edge_wrap(newe[2],(*sym_inverse)(get_edge_wrap(newe[0])));

	cmp	DWORD PTR tv9573[ebp], 0
	mov	edx, DWORD PTR [ecx+edi*4]
	mov	ecx, DWORD PTR _web+216
	mov	edi, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edi+784]
	mov	DWORD PTR [edx+ecx], eax
	mov	edx, DWORD PTR _web+216
	mov	eax, DWORD PTR _dymem
	mov	ecx, DWORD PTR [edx+eax+784]
	mov	edx, DWORD PTR _web+124
	mov	eax, DWORD PTR [edx+esi]
	mov	eax, DWORD PTR [ecx+eax]
	je	SHORT $LN382@pop_quad_t
	push	eax
	call	DWORD PTR _sym_inverse
	add	esp, 4
$LN382@pop_quad_t:
	push	eax
	call	DWORD PTR _sym_inverse
	add	esp, 4
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN386@pop_quad_t
	push	eax
	call	DWORD PTR _sym_inverse
	add	esp, 4
$LN386@pop_quad_t:
	mov	ecx, DWORD PTR _web+124
	mov	esi, DWORD PTR _dymem
	and	ebx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+ebx*4]
	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+esi+784]

; 3922 :     set_edge_wrap(newe[3],0);

	mov	esi, DWORD PTR _newe$[ebp+12]
	mov	DWORD PTR [edx+ecx], eax
	test	esi, 134217728				; 08000000H
	je	SHORT $LN390@pop_quad_t
	push	0
	call	DWORD PTR _sym_inverse
	add	esp, 4
	jmp	SHORT $LN391@pop_quad_t
$LN390@pop_quad_t:
	xor	eax, eax
$LN391@pop_quad_t:
	mov	edx, DWORD PTR _web+124
	and	esi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR _web+216
	mov	esi, DWORD PTR _dymem
	mov	edx, DWORD PTR [edx+esi+784]
	mov	DWORD PTR [ecx+edx], eax
$LN1486@pop_quad_t:

; 3923 :   }
; 3924 :   for ( i = 0 ; i < 4 ; i++ ) 

	xor	edi, edi
	npad	5
$LL1534@pop_quad_t:

; 3925 :   { newfe[i] = new_facetedge(newf,newe[i]);

	mov	esi, DWORD PTR _newe$[ebp+edi]
	mov	eax, DWORD PTR _newf$[ebp]
	push	esi
	push	eax
	call	_new_facetedge
	add	esp, 8
	mov	DWORD PTR _newfe$[ebp+edi], eax

; 3926 :     set_next_facet(newfe[i],newfe[i]);

	test	eax, 268435456				; 10000000H
	je	$LN1507@pop_quad_t
	mov	ecx, eax
	test	eax, 134217728				; 08000000H
	je	SHORT $LN393@pop_quad_t
	mov	ebx, DWORD PTR _web+460
	xor	ecx, 134217728				; 08000000H
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+edx*4]
	mov	DWORD PTR [edx+36], ecx
	jmp	SHORT $LN392@pop_quad_t
$LN393@pop_quad_t:
	mov	edx, DWORD PTR _web+460
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+40], eax
$LN392@pop_quad_t:

; 3927 :     set_prev_facet(newfe[i],newfe[i]);

	test	eax, 268435456				; 10000000H
	je	SHORT $LN1507@pop_quad_t
	mov	edx, eax
	test	eax, 134217728				; 08000000H
	je	SHORT $LN398@pop_quad_t
	mov	ebx, DWORD PTR _web+460
	xor	edx, 134217728				; 08000000H
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN397@pop_quad_t
$LN398@pop_quad_t:
	mov	ecx, DWORD PTR _web+460
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+36], eax
$LN397@pop_quad_t:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN1507@pop_quad_t:

; 3928 :     set_edge_fe(newe[i],newfe[i]);

	test	esi, 134217728				; 08000000H
	je	SHORT $LN402@pop_quad_t
	xor	eax, 134217728				; 08000000H
$LN402@pop_quad_t:
	mov	ecx, DWORD PTR _web+124
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	DWORD PTR [edx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	add	edi, 4
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	cmp	edi, 16					; 00000010H
	jl	$LL1534@pop_quad_t

; 3929 :   }
; 3930 :   set_facet_fe(newf,newfe[0]);

	mov	esi, DWORD PTR _newfe$[ebp]
	mov	eax, DWORD PTR _newf$[ebp]
	push	esi
	push	eax
	call	_set_facet_fe

; 3931 :   for ( i = 0 ; i < 4 ; i++ ) 
; 3932 :   { set_next_edge(newfe[i],newfe[(i+1)%4]);

	mov	edx, DWORD PTR _newfe$[ebp+4]
	mov	eax, esi
	shr	eax, 28					; 0000001cH
	add	esp, 8
	and	eax, 1
	mov	DWORD PTR tv10572[ebp], eax
	je	SHORT $LN405@pop_quad_t
	test	esi, 134217728				; 08000000H
	je	SHORT $LN406@pop_quad_t
	mov	ebx, DWORD PTR _web+460
	mov	ecx, edx
	xor	ecx, 134217728				; 08000000H
	mov	edi, esi
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR [edi+28], ecx
	jmp	SHORT $LN405@pop_quad_t
$LN406@pop_quad_t:
	mov	edi, DWORD PTR _web+460
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR [ecx+32], edx
$LN405@pop_quad_t:

; 3933 :     set_prev_edge(newfe[i],newfe[(i+3)%4]);

	test	eax, eax
	mov	eax, DWORD PTR _newfe$[ebp+12]
	je	SHORT $LN138@pop_quad_t
	test	esi, 134217728				; 08000000H
	je	SHORT $LN411@pop_quad_t
	mov	ebx, DWORD PTR _web+460
	mov	ecx, eax
	xor	ecx, 134217728				; 08000000H
	mov	edi, esi
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR [edi+32], ecx
	jmp	SHORT $LN410@pop_quad_t
$LN411@pop_quad_t:
	mov	edi, DWORD PTR _web+460
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR [ecx+28], eax
$LN410@pop_quad_t:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN138@pop_quad_t:

; 3931 :   for ( i = 0 ; i < 4 ; i++ ) 
; 3932 :   { set_next_edge(newfe[i],newfe[(i+1)%4]);

	mov	ecx, DWORD PTR _newfe$[ebp+8]
	mov	edi, edx
	shr	edi, 28					; 0000001cH
	and	edi, 1
	mov	DWORD PTR tv11850[ebp], edi
	je	SHORT $LN1292@pop_quad_t
	mov	ebx, DWORD PTR _web+460
	test	edx, 134217728				; 08000000H
	je	SHORT $LN1291@pop_quad_t
	mov	edi, ecx
	xor	edi, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+edx*4]
	mov	DWORD PTR [edx+28], edi
	mov	edx, DWORD PTR _newfe$[ebp+4]
	jmp	SHORT $LN1568@pop_quad_t
$LN1291@pop_quad_t:
	mov	edi, edx
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR [edi+32], ecx
$LN1568@pop_quad_t:
	mov	edi, DWORD PTR tv11850[ebp]
$LN1292@pop_quad_t:

; 3933 :     set_prev_edge(newfe[i],newfe[(i+3)%4]);

	test	edi, edi
	je	SHORT $LN1509@pop_quad_t
	mov	ebx, DWORD PTR _web+460
	test	edx, 134217728				; 08000000H
	je	SHORT $LN1293@pop_quad_t
	mov	edi, esi
	xor	edi, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+edx*4]
	mov	DWORD PTR [edx+32], edi
	mov	edx, DWORD PTR _newfe$[ebp+4]
	jmp	SHORT $LN1294@pop_quad_t
$LN1293@pop_quad_t:
	mov	edi, edx
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR [edi+28], esi
$LN1294@pop_quad_t:
	mov	edi, DWORD PTR _global_timestamp
	inc	edi
	mov	DWORD PTR _global_timestamp, edi
	mov	DWORD PTR _top_timestamp, edi
$LN1509@pop_quad_t:

; 3931 :   for ( i = 0 ; i < 4 ; i++ ) 
; 3932 :   { set_next_edge(newfe[i],newfe[(i+1)%4]);

	mov	edi, ecx
	shr	edi, 28					; 0000001cH
	and	edi, 1
	mov	DWORD PTR tv10701[ebp], edi
	je	SHORT $LN1298@pop_quad_t
	mov	ebx, DWORD PTR _web+460
	mov	edi, ecx
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN1297@pop_quad_t
	mov	edx, eax
	xor	edx, 134217728				; 08000000H
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR [edi+28], edx
	mov	edx, DWORD PTR _newfe$[ebp+4]
	jmp	SHORT $LN1569@pop_quad_t
$LN1297@pop_quad_t:
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR [edi+32], eax
$LN1569@pop_quad_t:
	mov	edi, DWORD PTR tv10701[ebp]
$LN1298@pop_quad_t:

; 3933 :     set_prev_edge(newfe[i],newfe[(i+3)%4]);

	test	edi, edi
	je	SHORT $LN1510@pop_quad_t
	mov	ebx, DWORD PTR _web+460
	mov	edi, ecx
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN1299@pop_quad_t
	xor	edx, 134217728				; 08000000H
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR [edi+32], edx
	mov	edx, DWORD PTR _newfe$[ebp+4]
	jmp	SHORT $LN1300@pop_quad_t
$LN1299@pop_quad_t:
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR [edi+28], edx
$LN1300@pop_quad_t:
	mov	edi, DWORD PTR _global_timestamp
	inc	edi
	mov	DWORD PTR _global_timestamp, edi
	mov	DWORD PTR _top_timestamp, edi
$LN1510@pop_quad_t:

; 3931 :   for ( i = 0 ; i < 4 ; i++ ) 
; 3932 :   { set_next_edge(newfe[i],newfe[(i+1)%4]);

	mov	edi, eax
	shr	edi, 28					; 0000001cH
	and	edi, 1
	mov	DWORD PTR tv11958[ebp], edi
	je	SHORT $LN1304@pop_quad_t
	mov	ebx, DWORD PTR _web+460
	mov	edi, eax
	test	eax, 134217728				; 08000000H
	je	SHORT $LN1303@pop_quad_t
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR [edi+28], edx
	mov	edx, DWORD PTR _newfe$[ebp+4]
	jmp	SHORT $LN1570@pop_quad_t
$LN1303@pop_quad_t:
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR [edi+32], esi
$LN1570@pop_quad_t:
	mov	edi, DWORD PTR tv11958[ebp]
$LN1304@pop_quad_t:

; 3933 :     set_prev_edge(newfe[i],newfe[(i+3)%4]);

	xor	ebx, ebx
	cmp	edi, ebx
	je	SHORT $LN1511@pop_quad_t
	mov	edi, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN1305@pop_quad_t
	xor	ecx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	DWORD PTR [eax+32], ecx
	jmp	SHORT $LN1306@pop_quad_t
$LN1305@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	DWORD PTR [eax+28], ecx
$LN1306@pop_quad_t:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN1511@pop_quad_t:

; 3934 :   }
; 3935 :   cross_cut(newfe[0],newfe[1]);

	push	edx
	push	esi
	call	_cross_cut

; 3936 : 
; 3937 :   /* Connect in with old stuff */
; 3938 : 
; 3939 :   /* start with first corner */
; 3940 :   e_id = other_triples[0][0];
; 3941 :   fe = get_edge_fe(e_id);

	mov	ecx, DWORD PTR _other_triples$[ebp]
	mov	eax, DWORD PTR _web+124
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	add	esp, 8
	cmp	eax, ebx
	jne	SHORT $LN416@pop_quad_t
	mov	DWORD PTR _fe$[ebp], ebx
	jmp	SHORT $LN417@pop_quad_t
$LN416@pop_quad_t:
	mov	eax, DWORD PTR [eax+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN415@pop_quad_t
	xor	eax, 134217728				; 08000000H
$LN415@pop_quad_t:
	mov	DWORD PTR _fe$[ebp], eax
$LN417@pop_quad_t:

; 3942 :   for ( k = 0 ; k < 3 ; k++ )

	mov	eax, DWORD PTR _keepe$[ebp]
	mov	esi, DWORD PTR _web+460
	or	eax, 134217728				; 08000000H
	mov	DWORD PTR _k$[ebp], ebx
	mov	DWORD PTR tv9794[ebp], eax
$LL1535@pop_quad_t:

; 3943 :   { /* traverse fan in all three directions */
; 3944 :     fe = get_next_facet(fe);

	mov	eax, DWORD PTR _fe$[ebp]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN420@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [ecx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN1571@pop_quad_t
$LN420@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [edx+40]
$LN1571@pop_quad_t:

; 3945 :     next_fe = inverse_id(get_prev_edge(fe));

	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR _fe$[ebp], eax
	mov	DWORD PTR tv9214[ebp], ecx
	je	SHORT $LN424@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv9203[ebp], eax
	mov	eax, DWORD PTR [eax+esi]
	mov	ebx, DWORD PTR [eax+32]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN1572@pop_quad_t
$LN424@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv9203[ebp], eax
	mov	eax, DWORD PTR [eax+esi]
	mov	ebx, DWORD PTR [eax+28]
$LN1572@pop_quad_t:
	mov	DWORD PTR tv9206[ebp], eax

; 4023 :       next_fe = inverse_id(get_prev_edge(next_fe));

$LN541@pop_quad_t:

; 3946 :     for (;;)
; 3947 :     { if ( !equal_id(get_next_facet(next_fe),get_prev_facet(next_fe)) )

	xor	ebx, 134217728				; 08000000H
	mov	edx, ebx
	shr	edx, 27					; 0000001bH
	and	edx, 1
	je	SHORT $LN428@pop_quad_t
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	ecx, DWORD PTR [eax+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN427@pop_quad_t
$LN428@pop_quad_t:
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+ecx*4]
	mov	ecx, DWORD PTR [eax+40]
$LN427@pop_quad_t:
	test	edx, edx
	je	SHORT $LN432@pop_quad_t
	mov	edi, DWORD PTR [eax+40]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN431@pop_quad_t
$LN432@pop_quad_t:
	mov	edi, DWORD PTR [eax+36]
$LN431@pop_quad_t:
	cmp	ecx, edi
	jne	SHORT $LN1245@pop_quad_t

; 4019 : 
; 4020 :         break;
; 4021 :       }
; 4022 :       next_fe = get_next_facet(next_fe);

	test	edx, edx
	je	SHORT $LN538@pop_quad_t
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN537@pop_quad_t
$LN538@pop_quad_t:
	mov	eax, DWORD PTR [eax+40]
$LN537@pop_quad_t:

; 4023 :       next_fe = inverse_id(get_prev_edge(next_fe));

	test	eax, 134217728				; 08000000H
	je	SHORT $LN542@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+eax*4]
	mov	ebx, DWORD PTR [edx+32]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN541@pop_quad_t
$LN542@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	ebx, DWORD PTR [eax+28]

; 4024 :     }

	jmp	$LN541@pop_quad_t
$LN1245@pop_quad_t:

; 3948 :       { /* have found next triple edge */
; 3949 :         ee_id = get_fe_edge(next_fe);

	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	edi, DWORD PTR [esi+ecx]
	mov	eax, ebx
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edi+20]

; 3950 :         if ( equal_element(ee_id,keepe) )

	mov	edx, eax
	or	edx, 134217728				; 08000000H
	cmp	edx, DWORD PTR tv9794[ebp]
	jne	$LN130@pop_quad_t

; 3951 :         { /* everything already ok, but adjust facetedges */
; 3952 : 
; 3953 :           fea = newfe[0];
; 3954 :           set_next_facet(next_fe,fea);

	mov	eax, DWORD PTR _newfe$[ebp]
	mov	edx, ebx
	shr	edx, 28					; 0000001cH
	and	edx, 1
	mov	DWORD PTR tv9797[ebp], edx
	je	SHORT $LN437@pop_quad_t
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN438@pop_quad_t
	mov	esi, eax
	xor	esi, 134217728				; 08000000H
	mov	DWORD PTR [edi+36], esi
	jmp	SHORT $LN1625@pop_quad_t
$LN438@pop_quad_t:
	mov	DWORD PTR [edi+40], eax
$LN1625@pop_quad_t:
	mov	esi, DWORD PTR _web+460
$LN437@pop_quad_t:

; 3955 :           set_prev_facet(fea,next_fe);

	cmp	DWORD PTR tv10572[ebp], 0
	je	SHORT $LN1485@pop_quad_t
	mov	edi, eax
	test	eax, 134217728				; 08000000H
	je	SHORT $LN443@pop_quad_t
	mov	edx, ebx
	xor	edx, 134217728				; 08000000H
	and	edi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+edi*4]
	mov	DWORD PTR [esi+40], edx
	mov	edx, DWORD PTR tv9797[ebp]
	jmp	SHORT $LN442@pop_quad_t
$LN443@pop_quad_t:
	and	edi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+edi*4]
	mov	DWORD PTR [esi+36], ebx
$LN442@pop_quad_t:
	mov	esi, DWORD PTR _global_timestamp
	inc	esi
	mov	DWORD PTR _global_timestamp, esi
	mov	DWORD PTR _top_timestamp, esi
	mov	esi, DWORD PTR _web+460
$LN1485@pop_quad_t:

; 3956 :           set_prev_facet(next_fe,fea);

	test	edx, edx
	je	SHORT $LN1512@pop_quad_t
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN448@pop_quad_t
	mov	ecx, DWORD PTR [esi+ecx]
	mov	edx, eax
	xor	edx, 134217728				; 08000000H
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN447@pop_quad_t
$LN448@pop_quad_t:
	mov	edx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+36], eax
$LN447@pop_quad_t:
	mov	ecx, DWORD PTR _global_timestamp
	mov	esi, DWORD PTR _web+460
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN1512@pop_quad_t:

; 3957 :           set_next_facet(fea,next_fe);

	cmp	DWORD PTR tv10572[ebp], 0
	je	SHORT $LL129@pop_quad_t
	test	eax, 134217728				; 08000000H
	je	SHORT $LN453@pop_quad_t
	mov	ecx, ebx
	xor	ecx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [edx+36], ecx
	jmp	SHORT $LN1573@pop_quad_t
$LN453@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [eax+40], ebx
$LN1573@pop_quad_t:
	mov	esi, DWORD PTR _web+460
	npad	2
$LL129@pop_quad_t:

; 3958 : 
; 3959 :           /* and line up next corner */
; 3960 :           for(;;)
; 3961 :           { next_fe = get_next_edge(next_fe);

	test	ebx, 134217728				; 08000000H
	je	SHORT $LN458@pop_quad_t
	and	ebx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ebx*4]
	mov	eax, DWORD PTR [ecx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN457@pop_quad_t
$LN458@pop_quad_t:
	and	ebx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+ebx*4]
	mov	eax, DWORD PTR [edx+32]
$LN457@pop_quad_t:

; 3962 :             if ( !equal_id(get_next_facet(next_fe),get_prev_facet(next_fe)) )

	mov	ebx, eax
	shr	ebx, 27					; 0000001bH
	and	ebx, 1
	je	SHORT $LN462@pop_quad_t
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	edx, DWORD PTR [ecx+36]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN461@pop_quad_t
$LN462@pop_quad_t:
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+edx*4]
	mov	edx, DWORD PTR [ecx+40]
$LN461@pop_quad_t:
	test	ebx, ebx
	je	SHORT $LN466@pop_quad_t
	mov	edi, DWORD PTR [ecx+40]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN465@pop_quad_t
$LN466@pop_quad_t:
	mov	edi, DWORD PTR [ecx+36]
$LN465@pop_quad_t:
	cmp	edx, edi
	jne	SHORT $LN1246@pop_quad_t

; 3973 :               }
; 3974 :               break;
; 3975 :             }
; 3976 :             next_fe = inverse_id(get_next_facet(next_fe));

	test	ebx, ebx
	je	SHORT $LN472@pop_quad_t
	mov	ecx, DWORD PTR [ecx+36]
	xor	ecx, 134217728				; 08000000H
	xor	ecx, 134217728				; 08000000H
	mov	ebx, ecx

; 3977 :           }

	jmp	$LL129@pop_quad_t

; 3973 :               }
; 3974 :               break;
; 3975 :             }
; 3976 :             next_fe = inverse_id(get_next_facet(next_fe));

$LN472@pop_quad_t:
	mov	ecx, DWORD PTR [ecx+40]
	xor	ecx, 134217728				; 08000000H
	mov	ebx, ecx

; 3977 :           }

	jmp	$LL129@pop_quad_t
$LN1246@pop_quad_t:

; 3963 :             { /* have found next triple edge */
; 3964 :               eee_id = get_fe_edge(next_fe);

	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+ecx*4]

; 3965 :               if ( equal_element(eee_id,other_triples[1][0]) )

	mov	ecx, DWORD PTR _other_triples$[ebp+8]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]
	mov	edx, ecx
	or	eax, 134217728				; 08000000H
	or	edx, 134217728				; 08000000H
	cmp	eax, edx
	je	$LN135@pop_quad_t

; 3966 :               { /* all ok */
; 3967 :               }
; 3968 :               else if ( equal_element(eee_id,other_triples[1][1]) )

	mov	edx, DWORD PTR _other_triples$[ebp+12]
	mov	edi, edx
	or	edi, 134217728				; 08000000H
	cmp	eax, edi
	jne	$LN135@pop_quad_t

; 3969 :               { /* swap */
; 3970 :                 edge_id tempe = other_triples[1][0];
; 3971 :                 other_triples[1][0] = other_triples[1][1];

	mov	DWORD PTR _other_triples$[ebp+8], edx

; 3972 :                 other_triples[1][1] = tempe;

	mov	DWORD PTR _other_triples$[ebp+12], ecx

; 3978 :         }
; 3979 :         else if ( equal_id(ee_id,other_triples[0][1]) )

	jmp	$LN135@pop_quad_t
$LN130@pop_quad_t:
	cmp	eax, DWORD PTR _other_triples$[ebp+4]
	jne	$LN122@pop_quad_t

; 3980 :         { /* spread out with new edge */
; 3981 : 
; 3982 :             facetedge_id feb = inverse_id(get_prev_edge(fe));

	mov	edx, DWORD PTR tv9214[ebp]
	mov	ecx, DWORD PTR tv9206[ebp]
	test	edx, edx
	je	SHORT $LN476@pop_quad_t
	mov	eax, DWORD PTR [ecx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN475@pop_quad_t
$LN476@pop_quad_t:
	mov	eax, DWORD PTR [ecx+28]
$LN475@pop_quad_t:
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR _feb$91439[ebp], eax

; 3983 :             facetedge_id fea = get_prev_edge(fe);

	test	edx, edx
	je	SHORT $LN480@pop_quad_t
	mov	edi, DWORD PTR [ecx+32]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN1574@pop_quad_t
$LN480@pop_quad_t:
	mov	edi, DWORD PTR [ecx+28]
$LN1574@pop_quad_t:

; 3984 :             facet_id fa = get_fe_facet(fe);

	mov	eax, DWORD PTR _fe$[ebp]
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR _fea$91440[ebp], edi
	mov	DWORD PTR tv9817[ebp], eax
	jne	SHORT $LN484@pop_quad_t
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN483@pop_quad_t
$LN484@pop_quad_t:
	cmp	DWORD PTR tv9214[ebp], 0
	mov	eax, DWORD PTR [ecx+24]
	je	SHORT $LN483@pop_quad_t
	xor	eax, 134217728				; 08000000H
$LN483@pop_quad_t:

; 3985 :             facetedge_id newfe = new_facetedge(fa,newe[3]);

	mov	ecx, DWORD PTR _newe$[ebp+12]
	push	ecx
	push	eax
	call	_new_facetedge

; 3986 :             facetedge_id newefe = get_edge_fe(newe[3]);

	mov	edx, DWORD PTR _newe$[ebp+12]
	mov	esi, eax
	push	edx
	mov	DWORD PTR _newfe$91442[ebp], esi
	call	_get_edge_fe
	mov	ecx, eax

; 3987 : 
; 3988 :             while ( !equal_id(feb,next_fe) )

	mov	eax, DWORD PTR _web+460
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _newefe$91443[ebp], ecx
	cmp	DWORD PTR _feb$91439[ebp], ebx
	je	$LN120@pop_quad_t
	npad	6
$LL121@pop_quad_t:

; 3989 :             { eee_id = get_fe_edge(feb);

	mov	esi, DWORD PTR _feb$91439[ebp]

; 3990 :               remove_vertex_edge(newv[0],eee_id);

	mov	ecx, DWORD PTR $T96812[ebp]
	mov	edi, esi
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	eax, DWORD PTR [eax+edi]
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [eax+20]
	push	esi
	push	ecx
	call	_remove_vertex_edge

; 3991 :               set_edge_tailv(eee_id,newv[3]);

	mov	edx, DWORD PTR _newv$[ebp+12]
	push	edx
	push	esi
	call	_set_edge_tailv

; 3992 :               feb = get_next_facet(feb);

	mov	eax, DWORD PTR _web+460
	add	esp, 16					; 00000010H
	test	DWORD PTR _feb$91439[ebp], 134217728	; 08000000H
	je	SHORT $LN490@pop_quad_t
	mov	ecx, DWORD PTR [eax+edi]
	mov	ecx, DWORD PTR [ecx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN489@pop_quad_t
$LN490@pop_quad_t:
	mov	edx, DWORD PTR [eax+edi]
	mov	ecx, DWORD PTR [edx+40]
$LN489@pop_quad_t:

; 3993 :               feb = inverse_id(get_prev_edge(feb));

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN494@pop_quad_t
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [ecx+32]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN493@pop_quad_t
$LN494@pop_quad_t:
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [edx+28]
$LN493@pop_quad_t:
	xor	ecx, 134217728				; 08000000H
	mov	DWORD PTR _feb$91439[ebp], ecx
	cmp	ecx, ebx
	jne	$LL121@pop_quad_t

; 3987 : 
; 3988 :             while ( !equal_id(feb,next_fe) )

	mov	edi, DWORD PTR _fea$91440[ebp]
	mov	esi, DWORD PTR _newfe$91442[ebp]
	mov	ecx, DWORD PTR _newefe$91443[ebp]
$LN120@pop_quad_t:

; 3994 :             }
; 3995 : 
; 3996 :             set_next_edge(fea,newfe);

	test	edi, 268435456				; 10000000H
	je	SHORT $LN1468@pop_quad_t
	test	edi, 134217728				; 08000000H
	je	SHORT $LN498@pop_quad_t
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	mov	ebx, edi
	and	ebx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ebx*4]
	mov	DWORD PTR [eax+28], edx
	jmp	SHORT $LN1575@pop_quad_t
$LN498@pop_quad_t:
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+32], esi
$LN1575@pop_quad_t:
	mov	eax, DWORD PTR _web+460
$LN1468@pop_quad_t:

; 3997 :             set_prev_edge(newfe,fea);

	mov	ebx, esi
	shr	ebx, 28					; 0000001cH
	and	ebx, 1
	mov	DWORD PTR tv9870[ebp], ebx
	je	SHORT $LN505@pop_quad_t
	mov	edx, esi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN503@pop_quad_t
	xor	edi, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+32], edi
	jmp	SHORT $LN502@pop_quad_t
$LN503@pop_quad_t:
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+28], edi
$LN502@pop_quad_t:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN505@pop_quad_t:

; 3998 :             set_prev_edge(fe,newfe);

	cmp	DWORD PTR tv9817[ebp], 0
	je	SHORT $LN510@pop_quad_t
	cmp	DWORD PTR tv9214[ebp], 0
	je	SHORT $LN508@pop_quad_t
	mov	edi, DWORD PTR tv9203[ebp]
	mov	eax, DWORD PTR [edi+eax]
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	mov	DWORD PTR [eax+32], edx
	jmp	SHORT $LN507@pop_quad_t
$LN508@pop_quad_t:
	mov	edx, DWORD PTR tv9203[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [eax+28], esi
$LN507@pop_quad_t:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN510@pop_quad_t:

; 3999 :             set_next_edge(newfe,fe);

	test	ebx, ebx
	je	SHORT $LN517@pop_quad_t
	test	esi, 134217728				; 08000000H
	je	SHORT $LN513@pop_quad_t
	mov	edx, DWORD PTR _fe$[ebp]
	xor	edx, 134217728				; 08000000H
	mov	edi, esi
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR [eax+28], edx
	jmp	SHORT $LN1577@pop_quad_t
$LN513@pop_quad_t:
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _fe$[ebp]
	mov	DWORD PTR [eax+32], edx
$LN1577@pop_quad_t:
	mov	eax, DWORD PTR _web+460

; 4000 :             set_next_facet(newfe,newefe);

	test	ebx, ebx
	je	SHORT $LN517@pop_quad_t
	test	esi, 134217728				; 08000000H
	je	SHORT $LN518@pop_quad_t
	mov	edx, ecx
	xor	edx, 134217728				; 08000000H
	mov	edi, esi
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR [eax+36], edx
	jmp	SHORT $LN1578@pop_quad_t
$LN518@pop_quad_t:
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+40], ecx
$LN1578@pop_quad_t:
	mov	eax, DWORD PTR _web+460
$LN517@pop_quad_t:

; 4001 :             set_prev_facet(newefe,newfe);

	mov	edx, ecx
	shr	edx, 28					; 0000001cH
	and	edx, 1
	je	SHORT $LN1503@pop_quad_t
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN523@pop_quad_t
	mov	edi, esi
	xor	edi, 134217728				; 08000000H
	mov	ebx, ecx
	and	ebx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ebx*4]
	mov	ebx, DWORD PTR tv9870[ebp]
	mov	DWORD PTR [eax+40], edi
	jmp	SHORT $LN522@pop_quad_t
$LN523@pop_quad_t:
	mov	edi, ecx
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR [eax+36], esi
$LN522@pop_quad_t:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN1503@pop_quad_t:

; 4002 :             set_next_facet(newefe,newfe);

	test	edx, edx
	je	SHORT $LN527@pop_quad_t
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN528@pop_quad_t
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	mov	edi, ecx
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR [eax+36], edx
	jmp	SHORT $LN1579@pop_quad_t
$LN528@pop_quad_t:
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+40], esi
$LN1579@pop_quad_t:
	mov	eax, DWORD PTR _web+460
$LN527@pop_quad_t:

; 4003 :             set_prev_facet(newfe,newefe);

	test	ebx, ebx
	je	SHORT $LN535@pop_quad_t
	mov	edx, esi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN533@pop_quad_t
	xor	ecx, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+40], ecx
	jmp	SHORT $LN532@pop_quad_t
$LN533@pop_quad_t:
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+36], ecx
$LN532@pop_quad_t:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN535@pop_quad_t:

; 4004 :             cross_cut(newfe,fe);

	mov	ecx, DWORD PTR _fe$[ebp]
	push	ecx
	push	esi
	call	_cross_cut
	add	esp, 8
	jmp	SHORT $LN1580@pop_quad_t
$LN122@pop_quad_t:

; 4005 : 
; 4006 :         }
; 4007 :         else if ( equal_id(ee_id,other_triples[3][0]) ) 

	mov	edx, DWORD PTR _other_triples$[ebp+24]
	cmp	eax, edx
	je	SHORT $LN135@pop_quad_t

; 4008 :         { /* everything ok */
; 4009 :         }
; 4010 :         else if ( equal_id(ee_id,other_triples[3][1]) ) 

	mov	ecx, DWORD PTR _other_triples$[ebp+28]
	cmp	eax, ecx
	jne	SHORT $LN116@pop_quad_t

; 4011 :         { /* swap */
; 4012 :           edge_id tempe = other_triples[3][0];

	mov	eax, edx

; 4013 :           other_triples[3][0] = other_triples[3][1];

	mov	DWORD PTR _other_triples$[ebp+24], ecx

; 4014 :           other_triples[3][1] = tempe;

	mov	DWORD PTR _other_triples$[ebp+28], eax

; 4015 :         }
; 4016 :         else /* shouldn't get here */

	jmp	SHORT $LN135@pop_quad_t
$LN116@pop_quad_t:

; 4017 :            kb_error(2820,"Aborted pop_quad_to_quad halfway through.\n",
; 4018 :               RECOVERABLE); 

	push	1
	push	OFFSET ??_C@_0CL@OFDIFAEM@Aborted?5pop_quad_to_quad?5halfway@
	push	2820					; 00000b04H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1580@pop_quad_t:
	mov	esi, DWORD PTR _web+460
$LN135@pop_quad_t:

; 3942 :   for ( k = 0 ; k < 3 ; k++ )

	mov	eax, DWORD PTR _k$[ebp]
	inc	eax
	mov	DWORD PTR _k$[ebp], eax
	cmp	eax, 3
	jl	$LL1535@pop_quad_t

; 4025 :   }
; 4026 : 
; 4027 :   /* other triple out of first corner */
; 4028 :   e_id = other_triples[3][0];
; 4029 :   fe = get_edge_fe(e_id);

	mov	ecx, DWORD PTR _other_triples$[ebp+24]
	mov	eax, DWORD PTR _web+124
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	xor	edx, edx
	cmp	eax, edx
	jne	SHORT $LN546@pop_quad_t
	mov	DWORD PTR _fe$[ebp], edx
	jmp	SHORT $LN547@pop_quad_t
$LN546@pop_quad_t:
	mov	eax, DWORD PTR [eax+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN545@pop_quad_t
	xor	eax, 134217728				; 08000000H
$LN545@pop_quad_t:
	mov	DWORD PTR _fe$[ebp], eax
$LN547@pop_quad_t:

; 4030 :   for ( k = 0 ; k < 3 ; k++ )

	mov	DWORD PTR _k$[ebp], edx
	npad	11
$LL1539@pop_quad_t:

; 4031 :   { /* traverse fan in all three directions */
; 4032 :     fe = get_next_facet(fe);

	mov	eax, DWORD PTR _fe$[ebp]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN550@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [ecx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN1581@pop_quad_t
$LN550@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [edx+40]
$LN1581@pop_quad_t:

; 4033 :     next_fe = inverse_id(get_prev_edge(fe));

	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR _fe$[ebp], eax
	mov	DWORD PTR tv9214[ebp], ecx
	je	SHORT $LN554@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv9203[ebp], eax
	mov	eax, DWORD PTR [eax+esi]
	mov	ebx, DWORD PTR [eax+32]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN1582@pop_quad_t
$LN554@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv9203[ebp], eax
	mov	eax, DWORD PTR [eax+esi]
	mov	ebx, DWORD PTR [eax+28]
$LN1582@pop_quad_t:
	mov	DWORD PTR tv9206[ebp], eax

; 4105 :       next_fe = inverse_id(get_prev_edge(next_fe));

$LN687@pop_quad_t:

; 4034 :     for (;;)
; 4035 :     { if ( !equal_id(get_next_facet(next_fe),get_prev_facet(next_fe)) )

	xor	ebx, 134217728				; 08000000H
	mov	edi, ebx
	shr	edi, 27					; 0000001bH
	and	edi, 1
	je	SHORT $LN558@pop_quad_t
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	ecx, DWORD PTR [eax+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN557@pop_quad_t
$LN558@pop_quad_t:
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+ecx*4]
	mov	ecx, DWORD PTR [eax+40]
$LN557@pop_quad_t:
	test	edi, edi
	je	SHORT $LN562@pop_quad_t
	mov	edx, DWORD PTR [eax+40]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN561@pop_quad_t
$LN562@pop_quad_t:
	mov	edx, DWORD PTR [eax+36]
$LN561@pop_quad_t:
	cmp	ecx, edx
	jne	SHORT $LN1247@pop_quad_t

; 4101 : 
; 4102 :         break;
; 4103 :       }
; 4104 :       next_fe = get_next_facet(next_fe);

	test	edi, edi
	je	SHORT $LN684@pop_quad_t
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN683@pop_quad_t
$LN684@pop_quad_t:
	mov	eax, DWORD PTR [eax+40]
$LN683@pop_quad_t:

; 4105 :       next_fe = inverse_id(get_prev_edge(next_fe));

	test	eax, 134217728				; 08000000H
	je	SHORT $LN688@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+eax*4]
	mov	ebx, DWORD PTR [edx+32]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN687@pop_quad_t
$LN688@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	ebx, DWORD PTR [eax+28]

; 4106 :     }

	jmp	$LN687@pop_quad_t
$LN1247@pop_quad_t:

; 4036 :       { /* have found next triple edge */
; 4037 :         ee_id = get_fe_edge(next_fe);

	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	add	edx, edx
	add	edx, edx
	mov	ecx, DWORD PTR [esi+edx]
	mov	eax, ebx
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]

; 4038 :         if ( equal_element(ee_id,keepe) )

	mov	edi, eax
	or	edi, 134217728				; 08000000H
	cmp	edi, DWORD PTR tv9794[ebp]
	jne	$LN108@pop_quad_t

; 4039 :         { /* everything already ok, adjust facetedges */
; 4040 : 
; 4041 :           fea = newfe[0];
; 4042 :           set_next_facet(next_fe,fea);

	mov	eax, DWORD PTR _newfe$[ebp]
	mov	edi, ebx
	shr	edi, 28					; 0000001cH
	and	edi, 1
	mov	DWORD PTR tv9797[ebp], edi
	je	SHORT $LN567@pop_quad_t
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN568@pop_quad_t
	mov	esi, eax
	xor	esi, 134217728				; 08000000H
	mov	DWORD PTR [ecx+36], esi
	jmp	SHORT $LN1626@pop_quad_t
$LN568@pop_quad_t:
	mov	DWORD PTR [ecx+40], eax
$LN1626@pop_quad_t:
	mov	esi, DWORD PTR _web+460
$LN567@pop_quad_t:

; 4043 :           set_prev_facet(fea,next_fe);

	cmp	DWORD PTR tv10572[ebp], 0
	je	SHORT $LN1483@pop_quad_t
	test	eax, 134217728				; 08000000H
	je	SHORT $LN573@pop_quad_t
	mov	ecx, ebx
	xor	ecx, 134217728				; 08000000H
	mov	edi, eax
	and	edi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+edi*4]
	mov	edi, DWORD PTR tv9797[ebp]
	mov	DWORD PTR [esi+40], ecx
	jmp	SHORT $LN572@pop_quad_t
$LN573@pop_quad_t:
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [ecx+36], ebx
$LN572@pop_quad_t:
	mov	ecx, DWORD PTR _global_timestamp
	mov	esi, DWORD PTR _web+460
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN1483@pop_quad_t:

; 4044 :           set_prev_facet(next_fe,get_next_facet(fea));

	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR tv10583[ebp], ecx
	je	SHORT $LN578@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	ecx, DWORD PTR [esi+eax]
	mov	ecx, DWORD PTR [ecx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN577@pop_quad_t
$LN578@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	ecx, DWORD PTR [esi+eax]
	mov	ecx, DWORD PTR [ecx+40]
$LN577@pop_quad_t:
	test	edi, edi
	je	SHORT $LN1473@pop_quad_t
	mov	edx, DWORD PTR [esi+edx]
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN582@pop_quad_t
	xor	ecx, 134217728				; 08000000H
	mov	DWORD PTR [edx+40], ecx
	jmp	SHORT $LN581@pop_quad_t
$LN582@pop_quad_t:
	mov	DWORD PTR [edx+36], ecx
$LN581@pop_quad_t:
	mov	ecx, DWORD PTR _global_timestamp
	mov	esi, DWORD PTR _web+460
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN1473@pop_quad_t:

; 4045 :           set_next_facet(get_next_facet(fea),next_fe);

	cmp	DWORD PTR tv10583[ebp], 0
	je	SHORT $LN587@pop_quad_t
	mov	eax, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN586@pop_quad_t
$LN587@pop_quad_t:
	mov	ecx, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [ecx+40]
$LN586@pop_quad_t:
	test	eax, 268435456				; 10000000H
	je	SHORT $LL107@pop_quad_t
	test	eax, 134217728				; 08000000H
	je	SHORT $LN591@pop_quad_t
	mov	edx, ebx
	xor	edx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [eax+36], edx
	jmp	SHORT $LN1583@pop_quad_t
$LN591@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [ecx+40], ebx
$LN1583@pop_quad_t:
	mov	esi, DWORD PTR _web+460
	npad	5
$LL107@pop_quad_t:

; 4046 : 
; 4047 :           /* and line up next corner */
; 4048 :           for(;;)
; 4049 :           { next_fe = get_next_edge(next_fe);

	test	ebx, 134217728				; 08000000H
	je	SHORT $LN596@pop_quad_t
	and	ebx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+ebx*4]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN595@pop_quad_t
$LN596@pop_quad_t:
	and	ebx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+ebx*4]
	mov	eax, DWORD PTR [eax+32]
$LN595@pop_quad_t:

; 4050 :             if ( !equal_id(get_next_facet(next_fe),get_prev_facet(next_fe)) )

	mov	edi, eax
	shr	edi, 27					; 0000001bH
	and	edi, 1
	je	SHORT $LN600@pop_quad_t
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	edx, DWORD PTR [ecx+36]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN599@pop_quad_t
$LN600@pop_quad_t:
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+edx*4]
	mov	edx, DWORD PTR [ecx+40]
$LN599@pop_quad_t:
	test	edi, edi
	je	SHORT $LN604@pop_quad_t
	mov	ebx, DWORD PTR [ecx+40]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN603@pop_quad_t
$LN604@pop_quad_t:
	mov	ebx, DWORD PTR [ecx+36]
$LN603@pop_quad_t:
	cmp	edx, ebx
	jne	SHORT $LN1248@pop_quad_t

; 4061 :               }
; 4062 :               break;
; 4063 :             }
; 4064 :             next_fe = inverse_id(get_next_facet(next_fe));

	test	edi, edi
	je	SHORT $LN610@pop_quad_t
	mov	ecx, DWORD PTR [ecx+36]
	xor	ecx, 134217728				; 08000000H
	xor	ecx, 134217728				; 08000000H
	mov	ebx, ecx

; 4065 :           }

	jmp	$LL107@pop_quad_t

; 4061 :               }
; 4062 :               break;
; 4063 :             }
; 4064 :             next_fe = inverse_id(get_next_facet(next_fe));

$LN610@pop_quad_t:
	mov	ecx, DWORD PTR [ecx+40]
	xor	ecx, 134217728				; 08000000H
	mov	ebx, ecx

; 4065 :           }

	jmp	$LL107@pop_quad_t
$LN1248@pop_quad_t:

; 4051 :             { /* have found next triple edge */
; 4052 :               eee_id = get_fe_edge(next_fe);

	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+ecx*4]

; 4053 :               if ( equal_element(eee_id,other_triples[2][0]) )

	mov	ecx, DWORD PTR _other_triples$[ebp+16]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]
	mov	edx, ecx
	or	eax, 134217728				; 08000000H
	or	edx, 134217728				; 08000000H
	cmp	eax, edx
	je	$LN113@pop_quad_t

; 4054 :               { /* all ok */
; 4055 :               }
; 4056 :               else if ( equal_element(eee_id,other_triples[2][1]) )

	mov	edx, DWORD PTR _other_triples$[ebp+20]
	mov	edi, edx
	or	edi, 134217728				; 08000000H
	cmp	eax, edi
	jne	$LN113@pop_quad_t

; 4057 :               { /* swap */
; 4058 :                 edge_id tempe = other_triples[2][0];
; 4059 :                 other_triples[2][0] = other_triples[2][1];

	mov	DWORD PTR _other_triples$[ebp+16], edx

; 4060 :                 other_triples[2][1] = tempe;

	mov	DWORD PTR _other_triples$[ebp+20], ecx

; 4066 :         }
; 4067 :         else if ( equal_id(ee_id,other_triples[3][1]) )

	jmp	$LN113@pop_quad_t
$LN108@pop_quad_t:
	cmp	eax, DWORD PTR _other_triples$[ebp+28]
	jne	$LN100@pop_quad_t

; 4068 :         { /* spread out with new edge */
; 4069 : 
; 4070 :             facetedge_id feb = inverse_id(get_prev_edge(fe));

	mov	edx, DWORD PTR tv9214[ebp]
	mov	ecx, DWORD PTR tv9206[ebp]
	test	edx, edx
	je	SHORT $LN614@pop_quad_t
	mov	eax, DWORD PTR [ecx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN613@pop_quad_t
$LN614@pop_quad_t:
	mov	eax, DWORD PTR [ecx+28]
$LN613@pop_quad_t:
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR _feb$91472[ebp], eax

; 4071 :             facetedge_id fea = get_prev_edge(fe);

	test	edx, edx
	je	SHORT $LN618@pop_quad_t
	mov	edi, DWORD PTR [ecx+32]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN1584@pop_quad_t
$LN618@pop_quad_t:
	mov	edi, DWORD PTR [ecx+28]
$LN1584@pop_quad_t:

; 4072 :             facet_id fa = get_fe_facet(fe);

	mov	eax, DWORD PTR _fe$[ebp]
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR _fea$91473[ebp], edi
	mov	DWORD PTR tv9817[ebp], eax
	jne	SHORT $LN622@pop_quad_t
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN621@pop_quad_t
$LN622@pop_quad_t:
	cmp	DWORD PTR tv9214[ebp], 0
	mov	eax, DWORD PTR tv9206[ebp]
	mov	eax, DWORD PTR [eax+24]
	je	SHORT $LN621@pop_quad_t
	xor	eax, 134217728				; 08000000H
$LN621@pop_quad_t:

; 4073 :             facetedge_id newfe = new_facetedge(fa,newe[3]);

	mov	ecx, DWORD PTR _newe$[ebp+12]
	push	ecx
	push	eax
	call	_new_facetedge

; 4074 :             facetedge_id newefe = get_edge_fe(newe[3]);

	mov	edx, DWORD PTR _newe$[ebp+12]
	mov	esi, eax
	push	edx
	mov	DWORD PTR _newfe$91475[ebp], esi
	call	_get_edge_fe
	mov	ecx, eax

; 4075 : 
; 4076 :             while ( !equal_id(feb,next_fe) )

	mov	eax, DWORD PTR _web+460
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _newefe$91476[ebp], ecx
	cmp	DWORD PTR _feb$91472[ebp], ebx
	je	$LN98@pop_quad_t
$LL99@pop_quad_t:

; 4077 :             { eee_id = get_fe_edge(feb);

	mov	esi, DWORD PTR _feb$91472[ebp]

; 4078 :               remove_vertex_edge(newv[0],eee_id);

	mov	ecx, DWORD PTR $T96812[ebp]
	mov	edi, esi
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	eax, DWORD PTR [edi+eax]
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [eax+20]
	push	esi
	push	ecx
	call	_remove_vertex_edge

; 4079 :               set_edge_tailv(eee_id,newv[3]);

	mov	edx, DWORD PTR _newv$[ebp+12]
	push	edx
	push	esi
	call	_set_edge_tailv

; 4080 :               feb = get_next_facet(feb);

	mov	eax, DWORD PTR _web+460
	add	esp, 16					; 00000010H
	test	DWORD PTR _feb$91472[ebp], 134217728	; 08000000H
	je	SHORT $LN628@pop_quad_t
	mov	ecx, DWORD PTR [edi+eax]
	mov	ecx, DWORD PTR [ecx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN627@pop_quad_t
$LN628@pop_quad_t:
	mov	edx, DWORD PTR [edi+eax]
	mov	ecx, DWORD PTR [edx+40]
$LN627@pop_quad_t:

; 4081 :               feb = inverse_id(get_prev_edge(feb));

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN632@pop_quad_t
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [ecx+32]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN631@pop_quad_t
$LN632@pop_quad_t:
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [edx+28]
$LN631@pop_quad_t:
	xor	ecx, 134217728				; 08000000H
	mov	DWORD PTR _feb$91472[ebp], ecx
	cmp	ecx, ebx
	jne	$LL99@pop_quad_t

; 4075 : 
; 4076 :             while ( !equal_id(feb,next_fe) )

	mov	ecx, DWORD PTR _newefe$91476[ebp]
	mov	esi, DWORD PTR _newfe$91475[ebp]
	mov	edi, DWORD PTR _fea$91473[ebp]
$LN98@pop_quad_t:

; 4082 :             }
; 4083 : 
; 4084 :             set_next_edge(fea,newfe);

	test	edi, 268435456				; 10000000H
	je	SHORT $LN1463@pop_quad_t
	test	edi, 134217728				; 08000000H
	je	SHORT $LN636@pop_quad_t
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	mov	ebx, edi
	and	ebx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ebx*4]
	mov	DWORD PTR [eax+28], edx
	jmp	SHORT $LN1585@pop_quad_t
$LN636@pop_quad_t:
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+32], esi
$LN1585@pop_quad_t:
	mov	eax, DWORD PTR _web+460
$LN1463@pop_quad_t:

; 4085 :             set_prev_edge(newfe,fea);

	mov	ebx, esi
	shr	ebx, 28					; 0000001cH
	and	ebx, 1
	mov	DWORD PTR tv9996[ebp], ebx
	je	SHORT $LN643@pop_quad_t
	mov	edx, esi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN641@pop_quad_t
	xor	edi, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+32], edi
	jmp	SHORT $LN640@pop_quad_t
$LN641@pop_quad_t:
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+28], edi
$LN640@pop_quad_t:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN643@pop_quad_t:

; 4086 :             set_prev_edge(fe,newfe);

	cmp	DWORD PTR tv9817[ebp], 0
	je	SHORT $LN648@pop_quad_t
	cmp	DWORD PTR tv9214[ebp], 0
	je	SHORT $LN646@pop_quad_t
	mov	edi, DWORD PTR tv9203[ebp]
	mov	eax, DWORD PTR [edi+eax]
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	mov	DWORD PTR [eax+32], edx
	jmp	SHORT $LN645@pop_quad_t
$LN646@pop_quad_t:
	mov	edx, DWORD PTR tv9203[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [eax+28], esi
$LN645@pop_quad_t:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN648@pop_quad_t:

; 4087 :             set_next_edge(newfe,fe);

	test	ebx, ebx
	je	SHORT $LN655@pop_quad_t
	test	esi, 134217728				; 08000000H
	je	SHORT $LN651@pop_quad_t
	mov	edx, DWORD PTR _fe$[ebp]
	xor	edx, 134217728				; 08000000H
	mov	edi, esi
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR [eax+28], edx
	jmp	SHORT $LN1587@pop_quad_t
$LN651@pop_quad_t:
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _fe$[ebp]
	mov	DWORD PTR [eax+32], edx
$LN1587@pop_quad_t:
	mov	eax, DWORD PTR _web+460

; 4088 :             set_next_facet(newfe,newefe);

	test	ebx, ebx
	je	SHORT $LN655@pop_quad_t
	test	esi, 134217728				; 08000000H
	je	SHORT $LN656@pop_quad_t
	mov	edx, ecx
	xor	edx, 134217728				; 08000000H
	mov	edi, esi
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR [eax+36], edx
	jmp	SHORT $LN1588@pop_quad_t
$LN656@pop_quad_t:
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+40], ecx
$LN1588@pop_quad_t:
	mov	eax, DWORD PTR _web+460
$LN655@pop_quad_t:

; 4089 :             set_prev_facet(newefe,newfe);

	test	ecx, 268435456				; 10000000H
	je	SHORT $LN1513@pop_quad_t
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN661@pop_quad_t
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	mov	edi, ecx
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR [eax+40], edx
	jmp	SHORT $LN660@pop_quad_t
$LN661@pop_quad_t:
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+36], esi
$LN660@pop_quad_t:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN1513@pop_quad_t:

; 4090 :             set_next_facet(get_next_facet(newefe),newfe);

	mov	edi, ecx
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	shr	edi, 27					; 0000001bH
	and	edi, 1
	lea	edx, DWORD PTR [ecx+ecx]
	mov	ecx, DWORD PTR [edx+eax]
	je	SHORT $LN666@pop_quad_t
	mov	ecx, DWORD PTR [ecx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN665@pop_quad_t
$LN666@pop_quad_t:
	mov	ecx, DWORD PTR [ecx+40]
$LN665@pop_quad_t:
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN669@pop_quad_t
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN670@pop_quad_t
	mov	ebx, esi
	xor	ebx, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [eax+36], ebx
	mov	ebx, DWORD PTR tv9996[ebp]
	jmp	SHORT $LN1589@pop_quad_t
$LN670@pop_quad_t:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [ecx+40], esi
$LN1589@pop_quad_t:
	mov	eax, DWORD PTR _web+460
$LN669@pop_quad_t:

; 4091 :             set_prev_facet(newfe,get_next_facet(newefe));

	test	edi, edi
	je	SHORT $LN675@pop_quad_t
	mov	edx, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [edx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN674@pop_quad_t
$LN675@pop_quad_t:
	mov	ecx, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [ecx+40]
$LN674@pop_quad_t:
	test	ebx, ebx
	je	SHORT $LN681@pop_quad_t
	mov	edx, esi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN679@pop_quad_t
	xor	ecx, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+40], ecx
	jmp	SHORT $LN678@pop_quad_t
$LN679@pop_quad_t:
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+36], ecx
$LN678@pop_quad_t:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN681@pop_quad_t:

; 4092 :             cross_cut(newfe,fe);

	mov	ecx, DWORD PTR _fe$[ebp]
	push	ecx
	push	esi
	call	_cross_cut
	add	esp, 8
	jmp	SHORT $LN1590@pop_quad_t
$LN100@pop_quad_t:

; 4093 : 
; 4094 :         }
; 4095 :         else if ( equal_id(ee_id,other_triples[0][0]) ) 

	cmp	eax, DWORD PTR _other_triples$[ebp]
	je	SHORT $LN113@pop_quad_t

; 4096 :         { /* everything ok */
; 4097 :         }
; 4098 :         else /* shouldn't get here */
; 4099 :            kb_error(2821,"Aborted pop_quad_to_quad halfway through.\n",
; 4100 :               RECOVERABLE); 

	push	1
	push	OFFSET ??_C@_0CL@OFDIFAEM@Aborted?5pop_quad_to_quad?5halfway@
	push	2821					; 00000b05H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1590@pop_quad_t:
	mov	esi, DWORD PTR _web+460
$LN113@pop_quad_t:

; 4030 :   for ( k = 0 ; k < 3 ; k++ )

	mov	eax, DWORD PTR _k$[ebp]
	inc	eax
	mov	DWORD PTR _k$[ebp], eax
	cmp	eax, 3
	jl	$LL1539@pop_quad_t

; 4107 :   }
; 4108 :   
; 4109 :   /* another corner, at end of short edge from previous */
; 4110 :   e_id = other_triples[0][1];
; 4111 :   fe = get_edge_fe(e_id);

	mov	ecx, DWORD PTR _other_triples$[ebp+4]
	mov	eax, DWORD PTR _web+124
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	test	eax, eax
	jne	SHORT $LN692@pop_quad_t
	mov	DWORD PTR _fe$[ebp], eax

; 4112 :   for ( k = 0 ; k < 3 ; k++ )

	mov	DWORD PTR tv5193[ebp], 3
	jmp	SHORT $LN94@pop_quad_t

; 4107 :   }
; 4108 :   
; 4109 :   /* another corner, at end of short edge from previous */
; 4110 :   e_id = other_triples[0][1];
; 4111 :   fe = get_edge_fe(e_id);

$LN692@pop_quad_t:
	mov	eax, DWORD PTR [eax+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN691@pop_quad_t
	xor	eax, 134217728				; 08000000H
$LN691@pop_quad_t:

; 4112 :   for ( k = 0 ; k < 3 ; k++ )

	mov	DWORD PTR tv5193[ebp], 3
	jmp	SHORT $LN94@pop_quad_t
	npad	10
$LL1462@pop_quad_t:
	mov	eax, DWORD PTR _fe$[ebp]
$LN94@pop_quad_t:

; 4113 :   { /* traverse fan in all three directions */
; 4114 :     fe = get_next_facet(fe);

	test	eax, 134217728				; 08000000H
	je	SHORT $LN696@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+eax*4]
	mov	edi, DWORD PTR [ecx+36]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN1591@pop_quad_t
$LN696@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+eax*4]
	mov	edi, DWORD PTR [edx+40]
$LN1591@pop_quad_t:
	mov	DWORD PTR _fe$[ebp], edi

; 4115 :     next_fe = fe;

	mov	DWORD PTR _next_fe$[ebp], edi
$LN1592@pop_quad_t:
	mov	eax, DWORD PTR _web+124
	mov	ecx, DWORD PTR _web+216

; 4116 :     for (;;)
; 4117 :     { ee_id = get_fe_edge(next_fe);

	mov	ebx, edi
	and	ebx, 134217727				; 07ffffffH
	add	ebx, ebx
	add	ebx, ebx
	mov	edx, DWORD PTR [esi+ebx]
	and	edi, 134217728				; 08000000H
	xor	edi, DWORD PTR [edx+20]

; 4118 : 
; 4119 :       if ( !equal_id(get_edge_tailv(ee_id),newv[3]) )

	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _dymem
	test	edi, 134217728				; 08000000H
	je	SHORT $LN702@pop_quad_t
	add	eax, DWORD PTR [ecx+edx+304]
	mov	ecx, DWORD PTR _web+636
	mov	eax, DWORD PTR [eax+ecx*4]
	jmp	SHORT $LN701@pop_quad_t
$LN702@pop_quad_t:
	mov	ecx, DWORD PTR [ecx+edx+304]
	mov	eax, DWORD PTR [eax+ecx]
$LN701@pop_quad_t:
	cmp	eax, DWORD PTR _newv$[ebp+12]
	je	SHORT $LN89@pop_quad_t

; 4120 :       { remove_vertex_edge(newv[0],ee_id);

	mov	edx, DWORD PTR $T96812[ebp]
	push	edi
	push	edx
	call	_remove_vertex_edge

; 4121 :         set_edge_tailv(ee_id,newv[3]);

	mov	eax, DWORD PTR _newv$[ebp+12]
	push	eax
	push	edi
	call	_set_edge_tailv
	mov	esi, DWORD PTR _web+460
	add	esp, 16					; 00000010H
$LN89@pop_quad_t:

; 4122 :       }
; 4123 : 
; 4124 :       next_fe = inverse_id(get_prev_edge(next_fe));

	test	DWORD PTR _next_fe$[ebp], 134217728	; 08000000H
	je	SHORT $LN706@pop_quad_t
	mov	ecx, DWORD PTR [esi+ebx]
	mov	eax, DWORD PTR [ecx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN705@pop_quad_t
$LN706@pop_quad_t:
	mov	edx, DWORD PTR [esi+ebx]
	mov	eax, DWORD PTR [edx+28]
$LN705@pop_quad_t:
	xor	eax, 134217728				; 08000000H

; 4125 :       if ( !equal_id(get_next_facet(next_fe),get_prev_facet(next_fe)) )

	mov	edi, eax
	shr	edi, 27					; 0000001bH
	and	edi, 1
	je	SHORT $LN710@pop_quad_t
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	edx, DWORD PTR [ecx+36]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN709@pop_quad_t
$LN710@pop_quad_t:
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+edx*4]
	mov	edx, DWORD PTR [ecx+40]
$LN709@pop_quad_t:
	test	edi, edi
	je	SHORT $LN714@pop_quad_t
	mov	ecx, DWORD PTR [ecx+40]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN713@pop_quad_t
$LN714@pop_quad_t:
	mov	ecx, DWORD PTR [ecx+36]
$LN713@pop_quad_t:
	cmp	edx, ecx
	jne	SHORT $LN1249@pop_quad_t

; 4148 : 
; 4149 :         break;
; 4150 :       }
; 4151 :       next_fe = get_next_facet(next_fe);

	push	eax
	call	_get_next_facet
	add	esp, 4
	mov	DWORD PTR _next_fe$[ebp], eax

; 4152 :     }

	mov	edi, eax
	jmp	$LN1592@pop_quad_t
$LN1249@pop_quad_t:

; 4126 :       { /* have found next triple edge */
; 4127 :         ee_id = get_fe_edge(next_fe);

	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	add	edx, edx
	add	edx, edx
	mov	ebx, DWORD PTR [esi+edx]
	mov	ecx, eax
	and	ecx, 134217728				; 08000000H
	xor	ecx, DWORD PTR [ebx+20]

; 4128 :         if ( equal_element(ee_id,newe[0]) )

	mov	edi, ecx
	or	edi, 134217728				; 08000000H
	cmp	edi, DWORD PTR tv9794[ebp]
	jne	$LN87@pop_quad_t

; 4129 :         { /* move fe to new edge */
; 4130 : 
; 4131 :           set_fe_edge(next_fe,inverse_id(newe[2]));

	mov	ecx, DWORD PTR _newe$[ebp+8]
	mov	edi, eax
	shr	edi, 27					; 0000001bH
	xor	ecx, 134217728				; 08000000H
	and	edi, 1
	mov	DWORD PTR tv9764[ebp], edi
	je	SHORT $LN719@pop_quad_t
	xor	ecx, 134217728				; 08000000H
$LN719@pop_quad_t:
	mov	DWORD PTR [ebx+20], ecx
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx

; 4132 :           fea = inverse_id(newfe[2]);

	mov	ecx, DWORD PTR _newfe$[ebp+8]

; 4133 :           set_next_facet(next_fe,fea);

	mov	esi, eax
	shr	esi, 28					; 0000001cH
	xor	ecx, 134217728				; 08000000H
	and	esi, 1
	mov	DWORD PTR tv9797[ebp], esi
	je	SHORT $LN1481@pop_quad_t
	mov	ebx, DWORD PTR _web+460
	mov	ebx, DWORD PTR [ebx+edx]
	test	edi, edi
	je	SHORT $LN723@pop_quad_t
	mov	edi, ecx
	xor	edi, 134217728				; 08000000H
	mov	DWORD PTR [ebx+36], edi
	mov	edi, DWORD PTR tv9764[ebp]
	jmp	SHORT $LN1481@pop_quad_t
$LN723@pop_quad_t:
	mov	DWORD PTR [ebx+40], ecx
$LN1481@pop_quad_t:

; 4134 :           set_prev_facet(fea,next_fe);

	mov	ebx, ecx
	shr	ebx, 28					; 0000001cH
	and	ebx, 1
	mov	DWORD PTR tv9801[ebp], ebx
	je	SHORT $LN730@pop_quad_t
	mov	ebx, DWORD PTR _web+460
	mov	edi, ecx
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN728@pop_quad_t
	mov	esi, eax
	xor	esi, 134217728				; 08000000H
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR [edi+40], esi
	mov	esi, DWORD PTR tv9797[ebp]
	jmp	SHORT $LN1593@pop_quad_t
$LN728@pop_quad_t:
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR [edi+36], eax
$LN1593@pop_quad_t:
	mov	ebx, DWORD PTR _global_timestamp
	mov	edi, DWORD PTR tv9764[ebp]
	inc	ebx
	mov	DWORD PTR _global_timestamp, ebx
	mov	DWORD PTR _top_timestamp, ebx
	mov	ebx, DWORD PTR tv9801[ebp]
$LN730@pop_quad_t:

; 4135 :           set_prev_facet(next_fe,fea);

	test	esi, esi
	je	SHORT $LN1487@pop_quad_t
	test	edi, edi
	je	SHORT $LN733@pop_quad_t
	mov	edi, DWORD PTR _web+460
	mov	edx, DWORD PTR [edi+edx]
	mov	esi, ecx
	xor	esi, 134217728				; 08000000H
	mov	DWORD PTR [edx+40], esi
	jmp	SHORT $LN732@pop_quad_t
$LN733@pop_quad_t:
	mov	esi, DWORD PTR _web+460
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [edx+36], ecx
$LN732@pop_quad_t:
	mov	edx, DWORD PTR _global_timestamp
	inc	edx
	mov	DWORD PTR _global_timestamp, edx
	mov	DWORD PTR _top_timestamp, edx
$LN1487@pop_quad_t:

; 4136 :           set_next_facet(fea,next_fe);

	test	ebx, ebx
	je	SHORT $LN1451@pop_quad_t
	mov	edx, DWORD PTR _web+460
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN738@pop_quad_t
	xor	eax, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+36], eax
	jmp	SHORT $LN1451@pop_quad_t
$LN738@pop_quad_t:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+40], eax
	jmp	SHORT $LN1451@pop_quad_t
$LN87@pop_quad_t:

; 4137 : 
; 4138 :         }
; 4139 :         else if ( equal_element(ee_id,newe[3]) )

	mov	edx, DWORD PTR _newe$[ebp+12]
	or	edx, 134217728				; 08000000H
	cmp	edi, edx
	je	SHORT $LN93@pop_quad_t

; 4140 :         { /* all ok */
; 4141 :         }
; 4142 :         else if ( equal_id(ee_id,other_triples[3][1]) ) 

	cmp	ecx, DWORD PTR _other_triples$[ebp+28]
	je	SHORT $LN93@pop_quad_t

; 4143 :         { /* everything ok */
; 4144 :         }
; 4145 :         else /* shouldn't get here */
; 4146 :            kb_error(2822,"Aborted pop_quad_to_quad halfway through.\n",
; 4147 :               WARNING); 

	push	2
	push	OFFSET ??_C@_0CL@OFDIFAEM@Aborted?5pop_quad_to_quad?5halfway@
	push	2822					; 00000b06H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1451@pop_quad_t:

; 4136 :           set_next_facet(fea,next_fe);

	mov	esi, DWORD PTR _web+460
$LN93@pop_quad_t:

; 4112 :   for ( k = 0 ; k < 3 ; k++ )

	dec	DWORD PTR tv5193[ebp]
	jne	$LL1462@pop_quad_t

; 4153 :   }
; 4154 :   
; 4155 :   
; 4156 :   /* other part of same corner, at end of short edge from previous */
; 4157 :   e_id = other_triples[3][1];
; 4158 :   fe = get_edge_fe(e_id);

	mov	ecx, DWORD PTR _other_triples$[ebp+28]
	mov	edx, DWORD PTR _web+124
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	test	eax, eax
	jne	SHORT $LN743@pop_quad_t

; 4159 :   for ( k = 0 ; k < 3 ; k++ )

	mov	DWORD PTR tv5173[ebp], 3
	jmp	SHORT $LN81@pop_quad_t

; 4153 :   }
; 4154 :   
; 4155 :   
; 4156 :   /* other part of same corner, at end of short edge from previous */
; 4157 :   e_id = other_triples[3][1];
; 4158 :   fe = get_edge_fe(e_id);

$LN743@pop_quad_t:
	mov	eax, DWORD PTR [eax+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN742@pop_quad_t
	xor	eax, 134217728				; 08000000H
$LN742@pop_quad_t:

; 4159 :   for ( k = 0 ; k < 3 ; k++ )

	mov	DWORD PTR tv5173[ebp], 3
	jmp	SHORT $LN81@pop_quad_t
	npad	1
$LL1460@pop_quad_t:
	mov	eax, DWORD PTR _fe$[ebp]
$LN81@pop_quad_t:

; 4160 :   { /* traverse fan in all three directions */
; 4161 :     fe = get_next_facet(fe);

	test	eax, 134217728				; 08000000H
	je	SHORT $LN747@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	ecx, DWORD PTR [eax+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN1594@pop_quad_t
$LN747@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+eax*4]
	mov	ecx, DWORD PTR [ecx+40]
$LN1594@pop_quad_t:
	mov	DWORD PTR _fe$[ebp], ecx
$LN1595@pop_quad_t:

; 4162 :     next_fe = fe;
; 4163 :     for (;;)
; 4164 :     { ee_id = get_fe_edge(next_fe);

	mov	ebx, ecx
	and	ebx, 134217727				; 07ffffffH
	add	ebx, ebx
	add	ebx, ebx
	mov	edx, DWORD PTR [esi+ebx]
	mov	edi, ecx
	and	edi, 134217728				; 08000000H
	xor	edi, DWORD PTR [edx+20]
	mov	DWORD PTR _next_fe$[ebp], ecx

; 4165 : 
; 4166 :       if ( !equal_id(get_edge_tailv(ee_id),newv[3]) )

	test	edi, 134217728				; 08000000H
	je	SHORT $LN753@pop_quad_t
	mov	ecx, DWORD PTR _web+124
	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN752@pop_quad_t
$LN753@pop_quad_t:
	mov	edx, DWORD PTR _web+124
	mov	ecx, edi
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _web+216
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edx+304]
	mov	eax, DWORD PTR [eax+ecx]
$LN752@pop_quad_t:
	cmp	eax, DWORD PTR _newv$[ebp+12]
	je	SHORT $LN1461@pop_quad_t

; 4167 :       { remove_vertex_edge(newv[0],ee_id);

	mov	edx, DWORD PTR $T96812[ebp]
	push	edi
	push	edx
	call	_remove_vertex_edge

; 4168 :         set_edge_tailv(ee_id,newv[3]);

	mov	eax, DWORD PTR _newv$[ebp+12]
	push	eax
	push	edi
	call	_set_edge_tailv
	mov	esi, DWORD PTR _web+460
	add	esp, 16					; 00000010H
$LN1461@pop_quad_t:

; 4169 :       }
; 4170 : 
; 4171 :       next_fe = inverse_id(get_prev_edge(next_fe));

	test	DWORD PTR _next_fe$[ebp], 134217728	; 08000000H
	je	SHORT $LN757@pop_quad_t
	mov	ecx, DWORD PTR [esi+ebx]
	mov	eax, DWORD PTR [ecx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN756@pop_quad_t
$LN757@pop_quad_t:
	mov	edx, DWORD PTR [esi+ebx]
	mov	eax, DWORD PTR [edx+28]
$LN756@pop_quad_t:
	xor	eax, 134217728				; 08000000H

; 4172 :       if ( !equal_id(get_next_facet(next_fe),get_prev_facet(next_fe)) )

	mov	edi, eax
	shr	edi, 27					; 0000001bH
	and	edi, 1
	je	SHORT $LN761@pop_quad_t
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	edx, DWORD PTR [ecx+36]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN760@pop_quad_t
$LN761@pop_quad_t:
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+edx*4]
	mov	edx, DWORD PTR [ecx+40]
$LN760@pop_quad_t:
	test	edi, edi
	je	SHORT $LN765@pop_quad_t
	mov	ebx, DWORD PTR [ecx+40]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN764@pop_quad_t
$LN765@pop_quad_t:
	mov	ebx, DWORD PTR [ecx+36]
$LN764@pop_quad_t:
	cmp	edx, ebx
	jne	SHORT $LN1250@pop_quad_t

; 4196 : 
; 4197 :         break;
; 4198 :       }
; 4199 :       next_fe = get_next_facet(next_fe);

	test	edi, edi
	je	SHORT $LN802@pop_quad_t
	mov	ecx, DWORD PTR [ecx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	$LN1595@pop_quad_t
$LN802@pop_quad_t:
	mov	ecx, DWORD PTR [ecx+40]

; 4200 :     }

	jmp	$LN1595@pop_quad_t
$LN1250@pop_quad_t:

; 4173 :       { /* have found next triple edge */
; 4174 :         ee_id = get_fe_edge(next_fe);

	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	edi, DWORD PTR [esi+ecx]
	mov	DWORD PTR tv9767[ebp], ecx
	mov	ecx, eax
	and	ecx, 134217728				; 08000000H
	xor	ecx, DWORD PTR [edi+20]

; 4175 :         if ( equal_element(ee_id,newe[0]) )

	mov	edx, ecx
	or	edx, 134217728				; 08000000H
	cmp	edx, DWORD PTR tv9794[ebp]
	jne	$LN74@pop_quad_t

; 4176 :         { /* move fe to new edge */
; 4177 : 
; 4178 :           set_fe_edge(next_fe,inverse_id(newe[2]));

	mov	ecx, DWORD PTR _newe$[ebp+8]
	mov	edx, eax
	shr	edx, 27					; 0000001bH
	xor	ecx, 134217728				; 08000000H
	and	edx, 1
	mov	DWORD PTR tv9764[ebp], edx
	je	SHORT $LN770@pop_quad_t
	xor	ecx, 134217728				; 08000000H
$LN770@pop_quad_t:
	mov	DWORD PTR [edi+20], ecx
	mov	ecx, DWORD PTR _global_timestamp

; 4179 :           fea = inverse_id(newfe[2]);

	mov	edi, DWORD PTR _newfe$[ebp+8]

; 4180 :           set_next_facet(next_fe,get_prev_facet(fea));

	mov	esi, DWORD PTR _web+460
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
	xor	edi, 134217728				; 08000000H
	mov	ecx, edi
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR tv9465[ebp], ecx
	mov	ecx, edi
	je	SHORT $LN774@pop_quad_t
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	edx, DWORD PTR [esi+ecx]
	mov	edx, DWORD PTR [edx+40]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN773@pop_quad_t
$LN774@pop_quad_t:
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	edx, DWORD PTR [esi+ecx]
	mov	edx, DWORD PTR [edx+36]
$LN773@pop_quad_t:
	mov	ebx, eax
	shr	ebx, 28					; 0000001cH
	and	ebx, 1
	mov	DWORD PTR tv9797[ebp], ebx
	je	SHORT $LN1465@pop_quad_t
	cmp	DWORD PTR tv9764[ebp], 0
	mov	ebx, DWORD PTR tv9767[ebp]
	mov	esi, DWORD PTR [esi+ebx]
	mov	ebx, DWORD PTR tv9797[ebp]
	je	SHORT $LN778@pop_quad_t
	xor	edx, 134217728				; 08000000H
	mov	DWORD PTR [esi+36], edx
	jmp	SHORT $LN1596@pop_quad_t
$LN778@pop_quad_t:
	mov	DWORD PTR [esi+40], edx
$LN1596@pop_quad_t:
	mov	esi, DWORD PTR _web+460
$LN1465@pop_quad_t:

; 4181 :           set_prev_facet(get_prev_facet(fea),next_fe);

	cmp	DWORD PTR tv9465[ebp], 0
	mov	edx, DWORD PTR [esi+ecx]
	je	SHORT $LN783@pop_quad_t
	mov	edx, DWORD PTR [edx+40]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN782@pop_quad_t
$LN783@pop_quad_t:
	mov	edx, DWORD PTR [edx+36]
$LN782@pop_quad_t:
	test	edx, 268435456				; 10000000H
	je	SHORT $LN1466@pop_quad_t
	test	edx, 134217728				; 08000000H
	je	SHORT $LN787@pop_quad_t
	mov	ebx, eax
	xor	ebx, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [edx+40], ebx
	mov	ebx, DWORD PTR tv9797[ebp]
	jmp	SHORT $LN786@pop_quad_t
$LN787@pop_quad_t:
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [edx+36], eax
$LN786@pop_quad_t:
	mov	edx, DWORD PTR _global_timestamp
	mov	esi, DWORD PTR _web+460
	inc	edx
	mov	DWORD PTR _global_timestamp, edx
	mov	DWORD PTR _top_timestamp, edx
$LN1466@pop_quad_t:

; 4182 :           set_prev_facet(next_fe,fea);

	test	ebx, ebx
	je	SHORT $LN794@pop_quad_t
	cmp	DWORD PTR tv9764[ebp], 0
	je	SHORT $LN792@pop_quad_t
	mov	ebx, DWORD PTR tv9767[ebp]
	mov	esi, DWORD PTR [esi+ebx]
	mov	edx, edi
	xor	edx, 134217728				; 08000000H
	mov	DWORD PTR [esi+40], edx
	jmp	SHORT $LN791@pop_quad_t
$LN792@pop_quad_t:
	mov	edx, DWORD PTR tv9767[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [edx+36], edi
$LN791@pop_quad_t:
	mov	edx, DWORD PTR _global_timestamp
	mov	esi, DWORD PTR _web+460
	inc	edx
	mov	DWORD PTR _global_timestamp, edx
	mov	DWORD PTR _top_timestamp, edx
$LN794@pop_quad_t:

; 4183 :           set_next_facet(fea,next_fe);

	test	edi, 268435456				; 10000000H
	je	SHORT $LN80@pop_quad_t
	cmp	DWORD PTR tv9465[ebp], 0
	je	SHORT $LN797@pop_quad_t
	mov	ecx, DWORD PTR [esi+ecx]
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR [ecx+36], eax
	jmp	SHORT $LN1597@pop_quad_t
$LN797@pop_quad_t:
	mov	edx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN1597@pop_quad_t
$LN74@pop_quad_t:

; 4184 : 
; 4185 : 
; 4186 :         }
; 4187 :         else if ( equal_id(ee_id,other_triples[0][1]) )

	cmp	ecx, DWORD PTR _other_triples$[ebp+4]
	je	SHORT $LN80@pop_quad_t

; 4188 :         { /* all ok */
; 4189 :         }
; 4190 :         else if ( equal_element(ee_id,newe[3]) ) 

	mov	eax, DWORD PTR _newe$[ebp+12]
	or	eax, 134217728				; 08000000H
	cmp	edx, eax
	je	SHORT $LN80@pop_quad_t

; 4191 :         { /* everything ok */
; 4192 :         }
; 4193 :         else /* shouldn't get here */
; 4194 :            kb_error(2823,"Aborted pop_quad_to_quad halfway through.\n",
; 4195 :               WARNING); 

	push	2
	push	OFFSET ??_C@_0CL@OFDIFAEM@Aborted?5pop_quad_to_quad?5halfway@
	push	2823					; 00000b07H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1597@pop_quad_t:
	mov	esi, DWORD PTR _web+460
$LN80@pop_quad_t:

; 4159 :   for ( k = 0 ; k < 3 ; k++ )

	dec	DWORD PTR tv5173[ebp]
	jne	$LL1460@pop_quad_t

; 4201 :   }
; 4202 :   
; 4203 :   /* corner at other end of long edge from first corner */
; 4204 :   e_id = other_triples[1][0];
; 4205 :   fe = get_edge_fe(e_id);

	mov	ecx, DWORD PTR _other_triples$[ebp+8]
	mov	eax, DWORD PTR _web+124
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	test	eax, eax
	jne	SHORT $LN806@pop_quad_t
	mov	DWORD PTR _fe$[ebp], eax
	jmp	SHORT $LN807@pop_quad_t
$LN806@pop_quad_t:
	mov	eax, DWORD PTR [eax+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN805@pop_quad_t
	xor	eax, 134217728				; 08000000H
$LN805@pop_quad_t:
	mov	DWORD PTR _fe$[ebp], eax
$LN807@pop_quad_t:

; 4206 :   for ( k = 0 ; k < 3 ; k++ )

	mov	DWORD PTR tv8376[ebp], 3
$LL1545@pop_quad_t:

; 4207 :   { /* traverse fan in all three directions */
; 4208 :     fe = get_next_facet(fe);

	mov	eax, DWORD PTR _fe$[ebp]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN810@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [ecx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN1598@pop_quad_t
$LN810@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [edx+40]
$LN1598@pop_quad_t:

; 4209 :     next_fe = inverse_id(get_prev_edge(fe));

	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR _fe$[ebp], eax
	mov	DWORD PTR tv9214[ebp], ecx
	je	SHORT $LN814@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv9203[ebp], eax
	mov	eax, DWORD PTR [eax+esi]
	mov	edx, DWORD PTR [eax+32]
	mov	DWORD PTR tv9206[ebp], eax
	xor	edx, 134217728				; 08000000H
	mov	ebx, eax
	jmp	SHORT $LN813@pop_quad_t
$LN814@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	ebx, DWORD PTR [eax+esi]
	mov	edx, DWORD PTR [ebx+28]
	mov	DWORD PTR tv9203[ebp], eax
	mov	DWORD PTR tv9206[ebp], ebx
$LN813@pop_quad_t:
	xor	edx, 134217728				; 08000000H
$LL65@pop_quad_t:

; 4210 :     for (;;)
; 4211 :     { if ( !equal_id(get_next_facet(next_fe),get_prev_facet(next_fe)) )

	mov	edi, edx
	shr	edi, 27					; 0000001bH
	and	edi, 1
	je	SHORT $LN818@pop_quad_t
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	ecx, DWORD PTR [eax+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN817@pop_quad_t
$LN818@pop_quad_t:
	mov	ecx, edx
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+ecx*4]
	mov	ecx, DWORD PTR [eax+40]
$LN817@pop_quad_t:
	test	edi, edi
	je	SHORT $LN822@pop_quad_t
	mov	eax, DWORD PTR [eax+40]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN821@pop_quad_t
$LN822@pop_quad_t:
	mov	eax, DWORD PTR [eax+36]
$LN821@pop_quad_t:
	cmp	ecx, eax
	jne	SHORT $LN1251@pop_quad_t

; 4251 : 
; 4252 :         break;
; 4253 :       }
; 4254 :       next_fe = get_next_facet(next_fe);

	push	edx
	call	_get_next_facet

; 4255 :       next_fe = inverse_id(get_prev_edge(next_fe));

	push	eax
	call	_get_prev_edge
	add	esp, 8
	xor	eax, 134217728				; 08000000H
	mov	edx, eax

; 4256 :     }

	jmp	SHORT $LL65@pop_quad_t
$LN1251@pop_quad_t:

; 4212 :       { /* have found next triple edge */
; 4213 :         ee_id = get_fe_edge(next_fe);

	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+eax*4]

; 4255 :       next_fe = inverse_id(get_prev_edge(next_fe));

	mov	DWORD PTR _next_fe$[ebp], edx
	and	edx, 134217728				; 08000000H
	xor	edx, DWORD PTR [ecx+20]
	mov	eax, edx
	or	eax, 134217728				; 08000000H
	cmp	eax, DWORD PTR tv9794[ebp]
	je	$LN67@pop_quad_t

; 4214 :         if ( equal_element(ee_id,keepe) )
; 4215 :         { /* everything already ok, but adjust facetedges */
; 4216 :         }
; 4217 :         else if ( equal_id(ee_id,other_triples[1][1]) )

	cmp	edx, DWORD PTR _other_triples$[ebp+12]
	jne	$LN60@pop_quad_t

; 4218 :         { /* spread out with new edge */
; 4219 : 
; 4220 :             facetedge_id feb = inverse_id(get_prev_edge(fe));

	cmp	DWORD PTR tv9214[ebp], 0
	je	SHORT $LN828@pop_quad_t
	mov	ebx, DWORD PTR [ebx+32]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN827@pop_quad_t
$LN828@pop_quad_t:
	mov	ebx, DWORD PTR [ebx+28]
$LN827@pop_quad_t:
	xor	ebx, 134217728				; 08000000H

; 4221 :             facetedge_id fea = get_prev_edge(fe);

	cmp	DWORD PTR tv9214[ebp], 0
	je	SHORT $LN832@pop_quad_t
	mov	ecx, DWORD PTR tv9206[ebp]
	mov	edi, DWORD PTR [ecx+32]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN1599@pop_quad_t
$LN832@pop_quad_t:
	mov	edx, DWORD PTR tv9206[ebp]
	mov	edi, DWORD PTR [edx+28]
$LN1599@pop_quad_t:

; 4222 :             facet_id fa = get_fe_facet(fe);

	mov	eax, DWORD PTR _fe$[ebp]
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR _fea$91522[ebp], edi
	mov	DWORD PTR tv9817[ebp], eax
	jne	SHORT $LN836@pop_quad_t
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN835@pop_quad_t
$LN836@pop_quad_t:
	cmp	DWORD PTR tv9214[ebp], 0
	mov	eax, DWORD PTR tv9206[ebp]
	mov	eax, DWORD PTR [eax+24]
	je	SHORT $LN835@pop_quad_t
	xor	eax, 134217728				; 08000000H
$LN835@pop_quad_t:

; 4223 :             facetedge_id newfe = new_facetedge(fa,inverse_id(newe[1]));

	mov	esi, DWORD PTR _newe$[ebp+4]
	xor	esi, 134217728				; 08000000H
	push	esi
	push	eax
	call	_new_facetedge
	mov	ecx, eax

; 4224 :             facetedge_id newefe = get_edge_fe(inverse_id(newe[1]));

	mov	eax, DWORD PTR _web+124
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	add	esp, 8
	mov	DWORD PTR _newfe$91524[ebp], ecx
	test	eax, eax
	jne	SHORT $LN840@pop_quad_t
	xor	edx, edx
	mov	DWORD PTR _newefe$91525[ebp], edx
	jmp	SHORT $LN1211@pop_quad_t
$LN840@pop_quad_t:
	mov	eax, DWORD PTR [eax+28]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN839@pop_quad_t
	xor	eax, 134217728				; 08000000H
$LN839@pop_quad_t:
	mov	edx, eax
	mov	DWORD PTR _newefe$91525[ebp], eax
$LN1211@pop_quad_t:

; 4225 : 
; 4226 :             while ( !equal_id(feb,next_fe) )

	mov	eax, DWORD PTR _web+460
	cmp	ebx, DWORD PTR _next_fe$[ebp]
	je	$LN58@pop_quad_t
	npad	1
$LL59@pop_quad_t:

; 4227 :             { eee_id = get_fe_edge(feb);
; 4228 :               remove_vertex_edge(newv[1],eee_id);

	mov	edx, DWORD PTR $T96818[ebp]
	mov	edi, ebx
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	ecx, DWORD PTR [edi+eax]
	mov	esi, ebx
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [ecx+20]
	push	esi
	push	edx
	call	_remove_vertex_edge

; 4229 :               set_edge_tailv(eee_id,newv[2]);

	mov	eax, DWORD PTR _newv$[ebp+8]
	push	eax
	push	esi
	call	_set_edge_tailv

; 4230 :               feb = get_next_facet(feb);

	mov	eax, DWORD PTR _web+460
	add	esp, 16					; 00000010H
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN846@pop_quad_t
	mov	ecx, DWORD PTR [edi+eax]
	mov	ecx, DWORD PTR [ecx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN845@pop_quad_t
$LN846@pop_quad_t:
	mov	edx, DWORD PTR [edi+eax]
	mov	ecx, DWORD PTR [edx+40]
$LN845@pop_quad_t:

; 4231 :               feb = inverse_id(get_prev_edge(feb));

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN850@pop_quad_t
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [ecx+32]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN849@pop_quad_t
$LN850@pop_quad_t:
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [edx+28]
$LN849@pop_quad_t:
	xor	ecx, 134217728				; 08000000H
	mov	ebx, ecx
	cmp	ebx, DWORD PTR _next_fe$[ebp]
	jne	$LL59@pop_quad_t

; 4225 : 
; 4226 :             while ( !equal_id(feb,next_fe) )

	mov	edi, DWORD PTR _fea$91522[ebp]
	mov	ecx, DWORD PTR _newfe$91524[ebp]
	mov	edx, DWORD PTR _newefe$91525[ebp]
$LN58@pop_quad_t:

; 4232 :             }
; 4233 : 
; 4234 :             set_next_edge(fea,newfe);

	test	edi, 268435456				; 10000000H
	je	SHORT $LN1472@pop_quad_t
	test	edi, 134217728				; 08000000H
	je	SHORT $LN854@pop_quad_t
	mov	esi, ecx
	xor	esi, 134217728				; 08000000H
	mov	ebx, edi
	and	ebx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ebx*4]
	mov	DWORD PTR [eax+28], esi
	jmp	SHORT $LN1600@pop_quad_t
$LN854@pop_quad_t:
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [eax+32], ecx
$LN1600@pop_quad_t:
	mov	eax, DWORD PTR _web+460
$LN1472@pop_quad_t:

; 4235 :             set_prev_edge(newfe,fea);

	mov	ebx, ecx
	shr	ebx, 28					; 0000001cH
	and	ebx, 1
	mov	DWORD PTR tv10191[ebp], ebx
	je	SHORT $LN861@pop_quad_t
	mov	esi, ecx
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN859@pop_quad_t
	xor	edi, 134217728				; 08000000H
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [eax+32], edi
	jmp	SHORT $LN858@pop_quad_t
$LN859@pop_quad_t:
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [eax+28], edi
$LN858@pop_quad_t:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN861@pop_quad_t:

; 4236 :             set_prev_edge(fe,newfe);

	cmp	DWORD PTR tv9817[ebp], 0
	je	SHORT $LN866@pop_quad_t
	cmp	DWORD PTR tv9214[ebp], 0
	je	SHORT $LN864@pop_quad_t
	mov	edi, DWORD PTR tv9203[ebp]
	mov	eax, DWORD PTR [edi+eax]
	mov	esi, ecx
	xor	esi, 134217728				; 08000000H
	mov	DWORD PTR [eax+32], esi
	jmp	SHORT $LN863@pop_quad_t
$LN864@pop_quad_t:
	mov	esi, DWORD PTR tv9203[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [eax+28], ecx
$LN863@pop_quad_t:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN866@pop_quad_t:

; 4237 :             set_next_edge(newfe,fe);

	test	ebx, ebx
	je	SHORT $LN873@pop_quad_t
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN869@pop_quad_t
	mov	esi, DWORD PTR _fe$[ebp]
	xor	esi, 134217728				; 08000000H
	mov	edi, ecx
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR [eax+28], esi
	jmp	SHORT $LN1602@pop_quad_t
$LN869@pop_quad_t:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	mov	esi, DWORD PTR _fe$[ebp]
	mov	DWORD PTR [eax+32], esi
$LN1602@pop_quad_t:
	mov	eax, DWORD PTR _web+460

; 4238 :             set_next_facet(newfe,newefe);

	test	ebx, ebx
	je	SHORT $LN873@pop_quad_t
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN874@pop_quad_t
	mov	esi, edx
	xor	esi, 134217728				; 08000000H
	mov	edi, ecx
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR [eax+36], esi
	jmp	SHORT $LN1603@pop_quad_t
$LN874@pop_quad_t:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [eax+40], edx
$LN1603@pop_quad_t:
	mov	eax, DWORD PTR _web+460
$LN873@pop_quad_t:

; 4239 :             set_prev_facet(newefe,newfe);

	mov	esi, edx
	shr	esi, 28					; 0000001cH
	and	esi, 1
	je	SHORT $LN1502@pop_quad_t
	test	edx, 134217728				; 08000000H
	je	SHORT $LN879@pop_quad_t
	mov	edi, ecx
	xor	edi, 134217728				; 08000000H
	mov	ebx, edx
	and	ebx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ebx*4]
	mov	ebx, DWORD PTR tv10191[ebp]
	mov	DWORD PTR [eax+40], edi
	jmp	SHORT $LN878@pop_quad_t
$LN879@pop_quad_t:
	mov	edi, edx
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR [eax+36], ecx
$LN878@pop_quad_t:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN1502@pop_quad_t:

; 4240 :             set_next_facet(newefe,newfe);

	test	esi, esi
	je	SHORT $LN883@pop_quad_t
	test	edx, 134217728				; 08000000H
	je	SHORT $LN884@pop_quad_t
	mov	esi, ecx
	xor	esi, 134217728				; 08000000H
	mov	edi, edx
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR [eax+36], esi
	jmp	SHORT $LN1604@pop_quad_t
$LN884@pop_quad_t:
	mov	esi, edx
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [eax+40], ecx
$LN1604@pop_quad_t:
	mov	eax, DWORD PTR _web+460
$LN883@pop_quad_t:

; 4241 :             set_prev_facet(newfe,newefe);

	test	ebx, ebx
	je	SHORT $LN891@pop_quad_t
	mov	esi, ecx
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN889@pop_quad_t
	xor	edx, 134217728				; 08000000H
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [eax+40], edx
	jmp	SHORT $LN888@pop_quad_t
$LN889@pop_quad_t:
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [eax+36], edx
$LN888@pop_quad_t:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN891@pop_quad_t:

; 4242 :             cross_cut(newfe,fe);

	mov	edx, DWORD PTR _fe$[ebp]
	push	edx
	push	ecx
	call	_cross_cut
	add	esp, 8
	jmp	SHORT $LN1605@pop_quad_t
$LN60@pop_quad_t:

; 4243 : 
; 4244 :         }
; 4245 :         else if ( equal_id(ee_id,other_triples[2][0]) ) 

	cmp	edx, DWORD PTR _other_triples$[ebp+16]
	je	SHORT $LN67@pop_quad_t

; 4246 :         { /* everything ok */
; 4247 :         }
; 4248 :         else /* shouldn't get here */
; 4249 :            kb_error(2824,"Aborted pop_quad_to_quad halfway through.\n",
; 4250 :               WARNING); 

	push	2
	push	OFFSET ??_C@_0CL@OFDIFAEM@Aborted?5pop_quad_to_quad?5halfway@
	push	2824					; 00000b08H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1605@pop_quad_t:
	mov	esi, DWORD PTR _web+460
$LN67@pop_quad_t:

; 4206 :   for ( k = 0 ; k < 3 ; k++ )

	dec	DWORD PTR tv8376[ebp]
	jne	$LL1545@pop_quad_t

; 4257 :   }
; 4258 :   
; 4259 :   /* other edge at corner at other end of long edge from first corner */
; 4260 :   e_id = other_triples[2][0];
; 4261 :   fe = get_edge_fe(e_id);

	mov	ecx, DWORD PTR _other_triples$[ebp+16]
	mov	edx, DWORD PTR _web+124
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	test	eax, eax
	jne	SHORT $LN894@pop_quad_t
	mov	DWORD PTR _fe$[ebp], eax
	jmp	SHORT $LN895@pop_quad_t
$LN894@pop_quad_t:
	mov	eax, DWORD PTR [eax+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN893@pop_quad_t
	xor	eax, 134217728				; 08000000H
$LN893@pop_quad_t:
	mov	DWORD PTR _fe$[ebp], eax
$LN895@pop_quad_t:

; 4262 :   for ( k = 0 ; k < 3 ; k++ )

	mov	DWORD PTR tv8380[ebp], 3
$LL1548@pop_quad_t:

; 4263 :   { /* traverse fan in all three directions */
; 4264 :     fe = get_next_facet(fe);

	mov	eax, DWORD PTR _fe$[ebp]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN898@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN1606@pop_quad_t
$LN898@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [ecx+40]
$LN1606@pop_quad_t:

; 4265 :     next_fe = inverse_id(get_prev_edge(fe));

	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR _fe$[ebp], eax
	mov	DWORD PTR tv9214[ebp], ecx
	je	SHORT $LN902@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv9203[ebp], eax
	mov	eax, DWORD PTR [eax+esi]
	mov	edx, DWORD PTR [eax+32]
	mov	DWORD PTR tv9206[ebp], eax
	xor	edx, 134217728				; 08000000H
	mov	ebx, eax
	jmp	SHORT $LN901@pop_quad_t
$LN902@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	ebx, DWORD PTR [eax+esi]
	mov	edx, DWORD PTR [ebx+28]
	mov	DWORD PTR tv9203[ebp], eax
	mov	DWORD PTR tv9206[ebp], ebx
$LN901@pop_quad_t:
	xor	edx, 134217728				; 08000000H
$LL51@pop_quad_t:

; 4266 :     for (;;)
; 4267 :     { if ( !equal_id(get_next_facet(next_fe),get_prev_facet(next_fe)) )

	mov	edi, edx
	shr	edi, 27					; 0000001bH
	and	edi, 1
	je	SHORT $LN906@pop_quad_t
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	ecx, DWORD PTR [eax+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN905@pop_quad_t
$LN906@pop_quad_t:
	mov	ecx, edx
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+ecx*4]
	mov	ecx, DWORD PTR [eax+40]
$LN905@pop_quad_t:
	test	edi, edi
	je	SHORT $LN910@pop_quad_t
	mov	eax, DWORD PTR [eax+40]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN909@pop_quad_t
$LN910@pop_quad_t:
	mov	eax, DWORD PTR [eax+36]
$LN909@pop_quad_t:
	cmp	ecx, eax
	jne	SHORT $LN1252@pop_quad_t

; 4307 : 
; 4308 :         break;
; 4309 :       }
; 4310 :       next_fe = get_next_facet(next_fe);

	push	edx
	call	_get_next_facet

; 4311 :       next_fe = inverse_id(get_prev_edge(next_fe));

	push	eax
	call	_get_prev_edge
	add	esp, 8
	xor	eax, 134217728				; 08000000H
	mov	edx, eax

; 4312 :     }

	jmp	SHORT $LL51@pop_quad_t
$LN1252@pop_quad_t:

; 4268 :       { /* have found next triple edge */
; 4269 :         ee_id = get_fe_edge(next_fe);

	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+eax*4]

; 4311 :       next_fe = inverse_id(get_prev_edge(next_fe));

	mov	DWORD PTR _next_fe$[ebp], edx
	and	edx, 134217728				; 08000000H
	xor	edx, DWORD PTR [ecx+20]
	mov	eax, edx
	or	eax, 134217728				; 08000000H
	cmp	eax, DWORD PTR tv9794[ebp]
	je	$LN53@pop_quad_t

; 4270 :         if ( equal_element(ee_id,keepe) )
; 4271 :         { /* everything already ok, but adjust facetedges */
; 4272 :         }
; 4273 :         else if ( equal_id(ee_id,other_triples[2][1]) )

	cmp	edx, DWORD PTR _other_triples$[ebp+20]
	jne	$LN46@pop_quad_t

; 4274 :         { /* spread out with new edge */
; 4275 : 
; 4276 :             facetedge_id feb = inverse_id(get_prev_edge(fe));

	cmp	DWORD PTR tv9214[ebp], 0
	je	SHORT $LN916@pop_quad_t
	mov	ebx, DWORD PTR [ebx+32]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN915@pop_quad_t
$LN916@pop_quad_t:
	mov	ebx, DWORD PTR [ebx+28]
$LN915@pop_quad_t:
	xor	ebx, 134217728				; 08000000H

; 4277 :             facetedge_id fea = get_prev_edge(fe);

	cmp	DWORD PTR tv9214[ebp], 0
	je	SHORT $LN920@pop_quad_t
	mov	ecx, DWORD PTR tv9206[ebp]
	mov	edi, DWORD PTR [ecx+32]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN1607@pop_quad_t
$LN920@pop_quad_t:
	mov	edx, DWORD PTR tv9206[ebp]
	mov	edi, DWORD PTR [edx+28]
$LN1607@pop_quad_t:

; 4278 :             facet_id fa = get_fe_facet(fe);

	mov	eax, DWORD PTR _fe$[ebp]
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR _fea$91543[ebp], edi
	mov	DWORD PTR tv9817[ebp], eax
	jne	SHORT $LN924@pop_quad_t
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN923@pop_quad_t
$LN924@pop_quad_t:
	cmp	DWORD PTR tv9214[ebp], 0
	mov	eax, DWORD PTR tv9206[ebp]
	mov	eax, DWORD PTR [eax+24]
	je	SHORT $LN923@pop_quad_t
	xor	eax, 134217728				; 08000000H
$LN923@pop_quad_t:

; 4279 :             facetedge_id newfe = new_facetedge(fa,inverse_id(newe[1]));

	mov	esi, DWORD PTR _newe$[ebp+4]
	xor	esi, 134217728				; 08000000H
	push	esi
	push	eax
	call	_new_facetedge
	mov	ecx, eax

; 4280 :             facetedge_id newefe = get_edge_fe(inverse_id(newe[1]));

	mov	eax, DWORD PTR _web+124
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	add	esp, 8
	mov	DWORD PTR _newfe$91545[ebp], ecx
	test	eax, eax
	jne	SHORT $LN928@pop_quad_t
	mov	DWORD PTR _newefe$91546[ebp], eax
	jmp	SHORT $LN1214@pop_quad_t
$LN928@pop_quad_t:
	mov	eax, DWORD PTR [eax+28]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN927@pop_quad_t
	xor	eax, 134217728				; 08000000H
$LN927@pop_quad_t:
	mov	DWORD PTR _newefe$91546[ebp], eax
$LN1214@pop_quad_t:

; 4281 : 
; 4282 :             while ( !equal_id(feb,next_fe) )

	mov	eax, DWORD PTR _web+460
	cmp	ebx, DWORD PTR _next_fe$[ebp]
	je	$LN44@pop_quad_t
	npad	3
$LL45@pop_quad_t:

; 4283 :             { eee_id = get_fe_edge(feb);
; 4284 :               remove_vertex_edge(newv[1],eee_id);

	mov	edx, DWORD PTR $T96818[ebp]
	mov	edi, ebx
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	ecx, DWORD PTR [eax+edi]
	mov	esi, ebx
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [ecx+20]
	push	esi
	push	edx
	call	_remove_vertex_edge

; 4285 :               set_edge_tailv(eee_id,newv[2]);

	mov	eax, DWORD PTR _newv$[ebp+8]
	push	eax
	push	esi
	call	_set_edge_tailv

; 4286 :               feb = get_next_facet(feb);

	mov	eax, DWORD PTR _web+460
	add	esp, 16					; 00000010H
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN934@pop_quad_t
	mov	ecx, DWORD PTR [eax+edi]
	mov	ecx, DWORD PTR [ecx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN933@pop_quad_t
$LN934@pop_quad_t:
	mov	edx, DWORD PTR [eax+edi]
	mov	ecx, DWORD PTR [edx+40]
$LN933@pop_quad_t:

; 4287 :               feb = inverse_id(get_prev_edge(feb));

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN938@pop_quad_t
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [ecx+32]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN937@pop_quad_t
$LN938@pop_quad_t:
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [edx+28]
$LN937@pop_quad_t:
	xor	ecx, 134217728				; 08000000H
	mov	ebx, ecx
	cmp	ebx, DWORD PTR _next_fe$[ebp]
	jne	$LL45@pop_quad_t

; 4281 : 
; 4282 :             while ( !equal_id(feb,next_fe) )

	mov	ecx, DWORD PTR _newfe$91545[ebp]
	mov	edi, DWORD PTR _fea$91543[ebp]
$LN44@pop_quad_t:

; 4288 :             }
; 4289 : 
; 4290 :             set_next_edge(fea,newfe);

	test	edi, 268435456				; 10000000H
	je	SHORT $LN1470@pop_quad_t
	test	edi, 134217728				; 08000000H
	je	SHORT $LN942@pop_quad_t
	mov	edx, ecx
	xor	edx, 134217728				; 08000000H
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [eax+28], edx
	jmp	SHORT $LN1608@pop_quad_t
$LN942@pop_quad_t:
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+32], ecx
$LN1608@pop_quad_t:
	mov	eax, DWORD PTR _web+460
$LN1470@pop_quad_t:

; 4291 :             set_prev_edge(newfe,fea);

	mov	ebx, ecx
	shr	ebx, 28					; 0000001cH
	and	ebx, 1
	mov	DWORD PTR tv10303[ebp], ebx
	je	SHORT $LN1514@pop_quad_t
	mov	edx, ecx
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN947@pop_quad_t
	xor	edi, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+32], edi
	jmp	SHORT $LN946@pop_quad_t
$LN947@pop_quad_t:
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+28], edi
$LN946@pop_quad_t:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN1514@pop_quad_t:

; 4292 :             set_prev_edge(fe,newfe);

	cmp	DWORD PTR tv9817[ebp], 0
	je	SHORT $LN1516@pop_quad_t
	cmp	DWORD PTR tv9214[ebp], 0
	je	SHORT $LN952@pop_quad_t
	mov	esi, DWORD PTR tv9203[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	edx, ecx
	xor	edx, 134217728				; 08000000H
	mov	DWORD PTR [eax+32], edx
	jmp	SHORT $LN951@pop_quad_t
$LN952@pop_quad_t:
	mov	edx, DWORD PTR tv9203[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [eax+28], ecx
$LN951@pop_quad_t:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN1516@pop_quad_t:

; 4293 :             set_next_edge(newfe,fe);

	test	ebx, ebx
	je	SHORT $LN956@pop_quad_t
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN957@pop_quad_t
	mov	edx, DWORD PTR _fe$[ebp]
	xor	edx, 134217728				; 08000000H
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [eax+28], edx
	jmp	SHORT $LN1609@pop_quad_t
$LN957@pop_quad_t:
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _fe$[ebp]
	mov	DWORD PTR [eax+32], edx
$LN1609@pop_quad_t:
	mov	eax, DWORD PTR _web+460
$LN956@pop_quad_t:

; 4294 :             set_next_facet(newfe,get_prev_facet(newefe));

	mov	edx, DWORD PTR _newefe$91546[ebp]
	mov	edi, DWORD PTR _newefe$91546[ebp]
	shr	edx, 27					; 0000001bH
	and	edx, 1
	mov	DWORD PTR tv10321[ebp], edx
	je	SHORT $LN962@pop_quad_t
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	add	edx, edx
	add	edx, edx
	mov	esi, DWORD PTR [eax+edx]
	mov	esi, DWORD PTR [esi+40]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN961@pop_quad_t
$LN962@pop_quad_t:
	mov	edx, DWORD PTR _newefe$91546[ebp]
	and	edx, 134217727				; 07ffffffH
	add	edx, edx
	add	edx, edx
	mov	esi, DWORD PTR [eax+edx]
	mov	esi, DWORD PTR [esi+36]
$LN961@pop_quad_t:
	test	ebx, ebx
	je	SHORT $LN965@pop_quad_t
	mov	ebx, ecx
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN966@pop_quad_t
	xor	esi, 134217728				; 08000000H
	and	ebx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ebx*4]
	mov	DWORD PTR [eax+36], esi
	jmp	SHORT $LN1610@pop_quad_t
$LN966@pop_quad_t:
	and	ebx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ebx*4]
	mov	DWORD PTR [eax+40], esi
$LN1610@pop_quad_t:
	mov	ebx, DWORD PTR tv10303[ebp]
	mov	eax, DWORD PTR _web+460
$LN965@pop_quad_t:

; 4295 :             set_prev_facet(get_prev_facet(newefe),newfe);

	cmp	DWORD PTR tv10321[ebp], 0
	mov	esi, DWORD PTR [eax+edx]
	je	SHORT $LN971@pop_quad_t
	mov	esi, DWORD PTR [esi+40]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN970@pop_quad_t
$LN971@pop_quad_t:
	mov	esi, DWORD PTR [esi+36]
$LN970@pop_quad_t:
	test	esi, 268435456				; 10000000H
	je	SHORT $LN1471@pop_quad_t
	test	esi, 134217728				; 08000000H
	je	SHORT $LN975@pop_quad_t
	mov	ebx, ecx
	xor	ebx, 134217728				; 08000000H
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [eax+40], ebx
	mov	ebx, DWORD PTR tv10303[ebp]
	jmp	SHORT $LN974@pop_quad_t
$LN975@pop_quad_t:
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [eax+36], ecx
$LN974@pop_quad_t:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN1471@pop_quad_t:

; 4296 :             set_next_facet(newefe,newfe);

	test	edi, 268435456				; 10000000H
	je	SHORT $LN979@pop_quad_t
	cmp	DWORD PTR tv10321[ebp], 0
	je	SHORT $LN980@pop_quad_t
	mov	edx, DWORD PTR [eax+edx]
	mov	esi, ecx
	xor	esi, 134217728				; 08000000H
	mov	DWORD PTR [edx+36], esi
	jmp	SHORT $LN1611@pop_quad_t
$LN980@pop_quad_t:
	mov	eax, DWORD PTR [eax+edx]
	mov	DWORD PTR [eax+40], ecx
$LN1611@pop_quad_t:
	mov	eax, DWORD PTR _web+460
$LN979@pop_quad_t:

; 4297 :             set_prev_facet(newfe,newefe);

	test	ebx, ebx
	je	SHORT $LN987@pop_quad_t
	mov	edx, ecx
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN985@pop_quad_t
	xor	edi, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+40], edi
	jmp	SHORT $LN984@pop_quad_t
$LN985@pop_quad_t:
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+36], edi
$LN984@pop_quad_t:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN987@pop_quad_t:

; 4298 :             cross_cut(newfe,fe);

	mov	edx, DWORD PTR _fe$[ebp]
	push	edx
	push	ecx
	call	_cross_cut
	add	esp, 8
	jmp	SHORT $LN1612@pop_quad_t
$LN46@pop_quad_t:

; 4299 : 
; 4300 :         }
; 4301 :         else if ( equal_id(ee_id,other_triples[1][0]) ) 

	cmp	edx, DWORD PTR _other_triples$[ebp+8]
	je	SHORT $LN53@pop_quad_t

; 4302 :         { /* everything ok */
; 4303 :         }
; 4304 :         else /* shouldn't get here */
; 4305 :            kb_error(2825,"Aborted pop_quad_to_quad halfway through.\n",
; 4306 :               WARNING); 

	push	2
	push	OFFSET ??_C@_0CL@OFDIFAEM@Aborted?5pop_quad_to_quad?5halfway@
	push	2825					; 00000b09H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1612@pop_quad_t:
	mov	esi, DWORD PTR _web+460
$LN53@pop_quad_t:

; 4262 :   for ( k = 0 ; k < 3 ; k++ )

	dec	DWORD PTR tv8380[ebp]
	jne	$LL1548@pop_quad_t

; 4313 :   }
; 4314 :   
; 4315 :   /* final corner */
; 4316 :   e_id = other_triples[1][1];
; 4317 :   fe = get_edge_fe(e_id);

	mov	ecx, DWORD PTR _other_triples$[ebp+12]
	mov	edx, DWORD PTR _web+124
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	test	eax, eax
	jne	SHORT $LN990@pop_quad_t
	mov	DWORD PTR _fe$[ebp], eax

; 4318 :   for ( k = 0 ; k < 3 ; k++ )

	mov	DWORD PTR tv5060[ebp], 3
	jmp	SHORT $LN40@pop_quad_t

; 4313 :   }
; 4314 :   
; 4315 :   /* final corner */
; 4316 :   e_id = other_triples[1][1];
; 4317 :   fe = get_edge_fe(e_id);

$LN990@pop_quad_t:
	mov	eax, DWORD PTR [eax+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN989@pop_quad_t
	xor	eax, 134217728				; 08000000H
$LN989@pop_quad_t:

; 4318 :   for ( k = 0 ; k < 3 ; k++ )

	mov	DWORD PTR tv5060[ebp], 3
	jmp	SHORT $LN40@pop_quad_t
	npad	9
$LL1458@pop_quad_t:
	mov	eax, DWORD PTR _fe$[ebp]
$LN40@pop_quad_t:

; 4319 :   { /* traverse fan in all three directions */
; 4320 :     fe = get_next_facet(fe);

	test	eax, 134217728				; 08000000H
	je	SHORT $LN994@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [ecx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN1613@pop_quad_t
$LN994@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [eax+40]
$LN1613@pop_quad_t:
	mov	DWORD PTR _fe$[ebp], eax
$LN1614@pop_quad_t:

; 4321 :     next_fe = fe;
; 4322 :     for (;;)
; 4323 :     { ee_id = get_fe_edge(next_fe);

	mov	ebx, eax
	and	ebx, 134217727				; 07ffffffH
	add	ebx, ebx
	mov	edi, eax
	add	ebx, ebx
	mov	ecx, DWORD PTR [esi+ebx]
	and	edi, 134217728				; 08000000H
	xor	edi, DWORD PTR [ecx+20]
	mov	DWORD PTR _next_fe$[ebp], eax

; 4324 : 
; 4325 :       if ( !equal_id(get_edge_tailv(ee_id),newv[2]) )

	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+216
	mov	eax, DWORD PTR _dymem
	test	edi, 134217728				; 08000000H
	je	SHORT $LN1000@pop_quad_t
	add	ecx, DWORD PTR [edx+eax+304]
	mov	edx, DWORD PTR _web+636
	mov	eax, DWORD PTR [ecx+edx*4]
	jmp	SHORT $LN999@pop_quad_t
$LN1000@pop_quad_t:
	mov	edx, DWORD PTR [edx+eax+304]
	mov	eax, DWORD PTR [ecx+edx]
$LN999@pop_quad_t:
	cmp	eax, DWORD PTR _newv$[ebp+8]
	je	SHORT $LN1459@pop_quad_t

; 4326 :       { remove_vertex_edge(newv[1],ee_id);

	mov	eax, DWORD PTR $T96818[ebp]
	push	edi
	push	eax
	call	_remove_vertex_edge

; 4327 :         set_edge_tailv(ee_id,newv[2]);

	mov	ecx, DWORD PTR _newv$[ebp+8]
	push	ecx
	push	edi
	call	_set_edge_tailv
	mov	esi, DWORD PTR _web+460
	add	esp, 16					; 00000010H
$LN1459@pop_quad_t:

; 4328 :       }
; 4329 : 
; 4330 :       next_fe = inverse_id(get_prev_edge(next_fe));

	test	DWORD PTR _next_fe$[ebp], 134217728	; 08000000H
	mov	edx, DWORD PTR _web+124
	je	SHORT $LN1004@pop_quad_t
	mov	eax, DWORD PTR [esi+ebx]
	mov	eax, DWORD PTR [eax+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN1003@pop_quad_t
$LN1004@pop_quad_t:
	mov	ecx, DWORD PTR [esi+ebx]
	mov	eax, DWORD PTR [ecx+28]
$LN1003@pop_quad_t:
	xor	eax, 134217728				; 08000000H

; 4331 :       if ( !equal_id(get_next_facet(next_fe),get_prev_facet(next_fe)) )

	mov	edi, eax
	shr	edi, 27					; 0000001bH
	and	eax, 134217727				; 07ffffffH
	and	edi, 1
	mov	eax, DWORD PTR [esi+eax*4]
	je	SHORT $LN1008@pop_quad_t
	mov	ecx, DWORD PTR [eax+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN1007@pop_quad_t
$LN1008@pop_quad_t:
	mov	ecx, DWORD PTR [eax+40]
$LN1007@pop_quad_t:
	test	edi, edi
	je	SHORT $LN1012@pop_quad_t
	mov	ebx, DWORD PTR [eax+40]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN1011@pop_quad_t
$LN1012@pop_quad_t:
	mov	ebx, DWORD PTR [eax+36]
$LN1011@pop_quad_t:
	cmp	ecx, ebx
	jne	SHORT $LN39@pop_quad_t

; 4332 :       { /* have found next triple edge */
; 4333 :         break;
; 4334 :       }
; 4335 :       next_fe = get_next_facet(next_fe);

	test	edi, edi
	je	SHORT $LN1016@pop_quad_t
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	$LN1614@pop_quad_t
$LN1016@pop_quad_t:
	mov	eax, DWORD PTR [eax+40]

; 4336 :     }

	jmp	$LN1614@pop_quad_t
$LN39@pop_quad_t:

; 4318 :   for ( k = 0 ; k < 3 ; k++ )

	dec	DWORD PTR tv5060[ebp]
	jne	$LL1458@pop_quad_t

; 4337 :   }
; 4338 : 
; 4339 :   /* other part of final corner */
; 4340 :   e_id = other_triples[2][1];
; 4341 :   fe = get_edge_fe(e_id);

	mov	ecx, DWORD PTR _other_triples$[ebp+20]
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	test	eax, eax
	jne	SHORT $LN1020@pop_quad_t
	mov	DWORD PTR _fe$[ebp], eax
	jmp	SHORT $LN1021@pop_quad_t
$LN1020@pop_quad_t:
	mov	eax, DWORD PTR [eax+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN1019@pop_quad_t
	xor	eax, 134217728				; 08000000H
$LN1019@pop_quad_t:
	mov	DWORD PTR _fe$[ebp], eax
$LN1021@pop_quad_t:

; 4342 :   for ( k = 0 ; k < 3 ; k++ )

	mov	DWORD PTR tv5038[ebp], 3
	npad	4
$LL1552@pop_quad_t:

; 4343 :   { /* traverse fan in all three directions */
; 4344 :     fe = get_next_facet(fe);

	mov	eax, DWORD PTR _fe$[ebp]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN1024@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [ecx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN1615@pop_quad_t
$LN1024@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [edx+40]
$LN1615@pop_quad_t:
	mov	DWORD PTR _fe$[ebp], eax
$LN1616@pop_quad_t:

; 4345 :     next_fe = fe;
; 4346 :     for (;;)
; 4347 :     { ee_id = get_fe_edge(next_fe);

	mov	edi, eax
	mov	ebx, edi
	and	ebx, 134217727				; 07ffffffH
	add	ebx, ebx
	add	ebx, ebx
	mov	DWORD PTR _next_fe$[ebp], eax
	mov	eax, DWORD PTR [esi+ebx]
	and	edi, 134217728				; 08000000H
	xor	edi, DWORD PTR [eax+20]

; 4348 : 
; 4349 :       if ( !equal_id(get_edge_tailv(ee_id),newv[2]) )

	test	edi, 134217728				; 08000000H
	je	SHORT $LN1030@pop_quad_t
	mov	edx, DWORD PTR _web+124
	mov	ecx, edi
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _web+216
	mov	edx, DWORD PTR _dymem
	add	eax, DWORD PTR [ecx+edx+304]
	mov	ecx, DWORD PTR _web+636
	mov	eax, DWORD PTR [eax+ecx*4]
	jmp	SHORT $LN1029@pop_quad_t
$LN1030@pop_quad_t:
	mov	eax, DWORD PTR _web+124
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR _dymem
	mov	edx, DWORD PTR _web+216
	mov	edx, DWORD PTR [edx+eax+304]
	mov	eax, DWORD PTR [ecx+edx]
$LN1029@pop_quad_t:
	cmp	eax, DWORD PTR _newv$[ebp+8]
	je	SHORT $LN28@pop_quad_t

; 4350 :       { remove_vertex_edge(newv[1],ee_id);

	mov	eax, DWORD PTR $T96818[ebp]
	push	edi
	push	eax
	call	_remove_vertex_edge

; 4351 :         set_edge_tailv(ee_id,newv[2]);

	mov	ecx, DWORD PTR _newv$[ebp+8]
	push	ecx
	push	edi
	call	_set_edge_tailv
	mov	esi, DWORD PTR _web+460
	add	esp, 16					; 00000010H
$LN28@pop_quad_t:

; 4352 :       }
; 4353 : 
; 4354 :       next_fe = inverse_id(get_prev_edge(next_fe));

	test	DWORD PTR _next_fe$[ebp], 134217728	; 08000000H
	je	SHORT $LN1034@pop_quad_t
	mov	edx, DWORD PTR [esi+ebx]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN1033@pop_quad_t
$LN1034@pop_quad_t:
	mov	eax, DWORD PTR [esi+ebx]
	mov	eax, DWORD PTR [eax+28]
$LN1033@pop_quad_t:
	xor	eax, 134217728				; 08000000H

; 4355 :       if ( !equal_id(get_next_facet(next_fe),get_prev_facet(next_fe)) )

	mov	edi, eax
	shr	edi, 27					; 0000001bH
	and	edi, 1
	je	SHORT $LN1038@pop_quad_t
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	edx, DWORD PTR [ecx+36]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN1037@pop_quad_t
$LN1038@pop_quad_t:
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+edx*4]
	mov	edx, DWORD PTR [ecx+40]
$LN1037@pop_quad_t:
	test	edi, edi
	je	SHORT $LN1042@pop_quad_t
	mov	ecx, DWORD PTR [ecx+40]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN1041@pop_quad_t
$LN1042@pop_quad_t:
	mov	ecx, DWORD PTR [ecx+36]
$LN1041@pop_quad_t:
	cmp	edx, ecx
	jne	SHORT $LN32@pop_quad_t

; 4356 :       { /* have found next triple edge */
; 4357 :         break;
; 4358 :       }
; 4359 :       next_fe = get_next_facet(next_fe);

	push	eax
	call	_get_next_facet
	add	esp, 4

; 4360 :     }

	jmp	$LN1616@pop_quad_t
$LN32@pop_quad_t:

; 4342 :   for ( k = 0 ; k < 3 ; k++ )

	dec	DWORD PTR tv5038[ebp]
	jne	$LL1552@pop_quad_t

; 4361 :   }
; 4362 : 
; 4363 :   /* move vertices apart */
; 4364 :   for ( i = 0 ; i < 4 ; i++ )

	lea	esi, DWORD PTR _sides$[ebp]
	lea	edi, DWORD PTR _other_triples$[ebp]
	xor	ebx, ebx
	npad	2
$LL1554@pop_quad_t:

; 4365 :   { x[i] = get_coord(newv[i]);

	mov	eax, DWORD PTR _newv$[ebp+ebx]
	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+104
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+64]
	mov	DWORD PTR tv1449[ebp], 2
	mov	DWORD PTR _x$[ebp+ebx], edx
$LL1555@pop_quad_t:

; 4366 :     for ( j = 0 ; j < 2 ; j++ )
; 4367 :       get_edge_side(other_triples[i][j],sides[i][j]);

	mov	edx, DWORD PTR [edi]
	push	esi
	push	edx
	call	_get_edge_side
	add	esp, 8
	add	esi, 48					; 00000030H
	add	edi, 4
	dec	DWORD PTR tv1449[ebp]
	jne	SHORT $LL1555@pop_quad_t

; 4361 :   }
; 4362 : 
; 4363 :   /* move vertices apart */
; 4364 :   for ( i = 0 ; i < 4 ; i++ )

	add	ebx, 4
	cmp	ebx, 16					; 00000010H
	jl	SHORT $LL1554@pop_quad_t

; 4368 :   }
; 4369 :   for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	$LN1494@pop_quad_t
	mov	edx, DWORD PTR _x$[ebp]
	fld	QWORD PTR __real@4028000000000000
	mov	esi, DWORD PTR _x$[ebp+4]
	mov	edi, DWORD PTR _x$[ebp+8]
	mov	ebx, DWORD PTR _x$[ebp+12]
	lea	ecx, DWORD PTR _sides$[ebp]
	sub	edx, ecx
	sub	esi, ecx
	sub	edi, ecx
	sub	ebx, ecx
$LN1556@pop_quad_t:

; 4370 :   { REAL d;
; 4371 :     d = sides[0][0][j]+sides[1][0][j]+sides[2][0][j]+sides[3][0][j];

	fld	QWORD PTR _sides$[ebp+eax*8+96]
	lea	ecx, DWORD PTR [edx+eax*8]
	fadd	QWORD PTR _sides$[ebp+eax*8]
	lea	ecx, DWORD PTR _sides$[ebp+ecx]
	fadd	QWORD PTR _sides$[ebp+eax*8+192]
	fadd	QWORD PTR _sides$[ebp+eax*8+288]

; 4372 :     x[0][j] += d/12;

	fdiv	ST(0), ST(1)
	fld	QWORD PTR [ecx]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [ecx]
	lea	ecx, DWORD PTR [esi+eax*8]
	lea	ecx, DWORD PTR _sides$[ebp+ecx]

; 4373 :     x[1][j] += d/12;

	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	lea	ecx, DWORD PTR [edi+eax*8]

; 4374 :     d = sides[0][1][j]+sides[1][1][j]+sides[2][1][j]+sides[3][1][j];

	fld	QWORD PTR _sides$[ebp+eax*8+144]
	lea	ecx, DWORD PTR _sides$[ebp+ecx]
	fadd	QWORD PTR _sides$[ebp+eax*8+48]
	fadd	QWORD PTR _sides$[ebp+eax*8+240]
	fadd	QWORD PTR _sides$[ebp+eax*8+336]

; 4375 :     x[2][j] += d/12;

	fdiv	ST(0), ST(1)
	fld	QWORD PTR [ecx]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [ecx]
	lea	ecx, DWORD PTR [ebx+eax*8]
	lea	ecx, DWORD PTR _sides$[ebp+ecx]

; 4376 :     x[3][j] += d/12;

	fadd	QWORD PTR [ecx]
	inc	eax
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	$LN1556@pop_quad_t

; 4368 :   }
; 4369 :   for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(0)
$LN1494@pop_quad_t:

; 4377 :   }
; 4378 : 
; 4379 : 
; 4380 :   /* Fix up facet edge orders */
; 4381 :   for ( i = 0 ; i < 4 ; i++ )

	mov	ecx, DWORD PTR _web+460
	xor	ebx, ebx
	mov	DWORD PTR _i$[ebp], ebx
$LL1557@pop_quad_t:

; 4382 :   { facetedge_id next_fe;
; 4383 :     int count;
; 4384 :     fa = newfe[i];

	mov	eax, DWORD PTR _newfe$[ebp+ebx*4]

; 4385 :     fb = get_next_facet(fa);

	mov	esi, eax
	shr	esi, 27					; 0000001bH
	and	esi, 1
	mov	DWORD PTR _fa$[ebp], eax
	mov	DWORD PTR tv9460[ebp], esi
	je	SHORT $LN1046@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR tv9452[ebp], eax
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN1617@pop_quad_t
$LN1046@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR tv9452[ebp], eax
	mov	eax, DWORD PTR [edx+40]
$LN1617@pop_quad_t:
	mov	DWORD PTR _fb$[ebp], eax
	mov	DWORD PTR tv10451[ebp], edx

; 4386 :     fc = get_prev_facet(fa);

	test	esi, esi
	je	SHORT $LN1050@pop_quad_t
	mov	edi, DWORD PTR [edx+40]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN1049@pop_quad_t
$LN1050@pop_quad_t:
	mov	edi, DWORD PTR [edx+36]
$LN1049@pop_quad_t:

; 4387 :     ea = newe[i];

	mov	esi, DWORD PTR _newe$[ebp+ebx*4]

; 4388 :     eb = newe[(i+3)%4];

	add	ebx, 3
	and	ebx, -2147483645			; 80000003H
	mov	DWORD PTR _ea$[ebp], esi
	jns	SHORT $LN1563@pop_quad_t
	dec	ebx
	or	ebx, -4					; fffffffcH
	inc	ebx
$LN1563@pop_quad_t:
	mov	edx, DWORD PTR _newe$[ebp+ebx*4]
	mov	DWORD PTR _eb$[ebp], edx

; 4389 :     next_fe = inverse_id(get_prev_edge(fb));

	mov	edx, eax
	shr	edx, 27					; 0000001bH
	and	edx, 1
	mov	DWORD PTR tv10464[ebp], edx
	je	SHORT $LN1054@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv10467[ebp], eax
	mov	eax, DWORD PTR [ecx+eax]
	mov	edx, DWORD PTR [eax+32]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN1053@pop_quad_t
$LN1054@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	edx, DWORD PTR [ecx+eax]
	mov	edx, DWORD PTR [edx+28]
	mov	DWORD PTR tv10467[ebp], eax
$LN1053@pop_quad_t:

; 4390 :     for(count=0;count < 10000 ;count++)

	mov	ebx, esi
	xor	edx, 134217728				; 08000000H
	or	ebx, 134217728				; 08000000H
	mov	DWORD PTR _count$91587[ebp], 0
	mov	DWORD PTR tv10491[ebp], ebx
	jmp	SHORT $LN14@pop_quad_t
$LL1488@pop_quad_t:

; 4389 :     next_fe = inverse_id(get_prev_edge(fb));

	mov	ebx, DWORD PTR tv10491[ebp]
$LN14@pop_quad_t:

; 4391 :     { ec = get_fe_edge(next_fe);

	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ecx+eax*4]
	mov	eax, edx
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [esi+20]

; 4392 :       if ( equal_element(ec,ea) )

	or	eax, 134217728				; 08000000H
	cmp	eax, ebx
	je	$LN1492@pop_quad_t

; 4393 :         break; /* ok */
; 4394 :       if ( equal_element(ec,eb) )

	mov	ebx, DWORD PTR _eb$[ebp]
	or	ebx, 134217728				; 08000000H
	cmp	eax, ebx
	je	SHORT $LN1256@pop_quad_t

; 4402 :         break;
; 4403 :       }
; 4404 :       next_fe = inverse_id(get_prev_edge(get_prev_facet(next_fe)));

	test	edx, 134217728				; 08000000H
	je	SHORT $LN1090@pop_quad_t
	mov	eax, DWORD PTR [esi+40]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN1089@pop_quad_t
$LN1090@pop_quad_t:
	mov	eax, DWORD PTR [esi+36]
$LN1089@pop_quad_t:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN1094@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN1093@pop_quad_t
$LN1094@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+28]
$LN1093@pop_quad_t:
	xor	eax, 134217728				; 08000000H
	mov	edx, eax
	mov	eax, DWORD PTR _count$91587[ebp]
	inc	eax
	mov	DWORD PTR _count$91587[ebp], eax
	cmp	eax, 10000				; 00002710H
	jl	$LL1488@pop_quad_t

; 4436 :       } while ( !equal_id(ea,start_e));

	jmp	$LN1335@pop_quad_t
$LN1256@pop_quad_t:

; 4395 :       { /* have to switch order around edge */
; 4396 :         set_prev_facet(fa,fb);

	mov	ebx, DWORD PTR _fa$[ebp]
	mov	edx, DWORD PTR _fb$[ebp]
	mov	eax, ebx
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv9449[ebp], eax
	je	SHORT $LN1062@pop_quad_t
	cmp	DWORD PTR tv9460[ebp], 0
	je	SHORT $LN1060@pop_quad_t
	mov	eax, DWORD PTR tv10451[ebp]
	mov	ecx, edx
	xor	ecx, 134217728				; 08000000H
	mov	DWORD PTR [eax+40], ecx
	jmp	SHORT $LN1059@pop_quad_t
$LN1060@pop_quad_t:
	mov	ecx, DWORD PTR tv10451[ebp]
	mov	DWORD PTR [ecx+36], edx
$LN1059@pop_quad_t:
	mov	eax, DWORD PTR _global_timestamp
	mov	ecx, DWORD PTR _web+460
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN1062@pop_quad_t:

; 4397 :         set_prev_facet(fb,fc);

	mov	eax, edx
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv10526[ebp], eax
	je	SHORT $LN1490@pop_quad_t
	cmp	DWORD PTR tv10464[ebp], 0
	je	SHORT $LN1065@pop_quad_t
	mov	esi, DWORD PTR tv10467[ebp]
	mov	ecx, DWORD PTR [ecx+esi]
	mov	eax, edi
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR [ecx+40], eax
	jmp	SHORT $LN1064@pop_quad_t
$LN1065@pop_quad_t:
	mov	eax, DWORD PTR tv10467[ebp]
	mov	ecx, DWORD PTR [ecx+eax]
	mov	DWORD PTR [ecx+36], edi
$LN1064@pop_quad_t:
	mov	eax, DWORD PTR _global_timestamp
	mov	ecx, DWORD PTR _web+460
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN1490@pop_quad_t:

; 4398 :         set_prev_facet(fc,fa);

	mov	esi, edi
	shr	esi, 28					; 0000001cH
	and	esi, 1
	je	SHORT $LN1491@pop_quad_t
	mov	eax, edi
	test	edi, 134217728				; 08000000H
	je	SHORT $LN1070@pop_quad_t
	xor	ebx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [ecx+40], ebx
	mov	ebx, DWORD PTR _fa$[ebp]
	jmp	SHORT $LN1069@pop_quad_t
$LN1070@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [ecx+36], ebx
$LN1069@pop_quad_t:
	mov	eax, DWORD PTR _global_timestamp
	mov	ecx, DWORD PTR _web+460
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN1491@pop_quad_t:

; 4399 :         set_next_facet(fa,fc);

	cmp	DWORD PTR tv9449[ebp], 0
	je	SHORT $LN1496@pop_quad_t
	cmp	DWORD PTR tv9460[ebp], 0
	je	SHORT $LN1075@pop_quad_t
	mov	ebx, DWORD PTR tv9452[ebp]
	mov	ecx, DWORD PTR [ecx+ebx]
	mov	ebx, DWORD PTR _fa$[ebp]
	mov	eax, edi
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR [ecx+36], eax
	jmp	SHORT $LN1618@pop_quad_t
$LN1075@pop_quad_t:
	mov	eax, DWORD PTR tv9452[ebp]
	mov	ecx, DWORD PTR [ecx+eax]
	mov	DWORD PTR [ecx+40], edi
$LN1618@pop_quad_t:
	mov	ecx, DWORD PTR _web+460
$LN1496@pop_quad_t:

; 4400 :         set_next_facet(fc,fb);

	test	esi, esi
	je	SHORT $LN1079@pop_quad_t
	test	edi, 134217728				; 08000000H
	je	SHORT $LN1080@pop_quad_t
	xor	edx, 134217728				; 08000000H
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+edi*4]
	mov	DWORD PTR [eax+36], edx
	jmp	SHORT $LN1619@pop_quad_t
$LN1080@pop_quad_t:
	and	edi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	DWORD PTR [ecx+40], edx
$LN1619@pop_quad_t:
	mov	ecx, DWORD PTR _web+460
$LN1079@pop_quad_t:

; 4401 :         set_next_facet(fb,fa);

	cmp	DWORD PTR tv10526[ebp], 0
	je	SHORT $LN1492@pop_quad_t
	cmp	DWORD PTR tv10464[ebp], 0
	mov	edx, DWORD PTR tv10467[ebp]
	mov	eax, DWORD PTR [ecx+edx]
	je	SHORT $LN1085@pop_quad_t
	xor	ebx, 134217728				; 08000000H
	mov	DWORD PTR [eax+36], ebx
	jmp	SHORT $LN1620@pop_quad_t
$LN1085@pop_quad_t:
	mov	DWORD PTR [eax+40], ebx
$LN1620@pop_quad_t:
	mov	ecx, DWORD PTR _web+460
$LN1492@pop_quad_t:

; 4405 :     }
; 4406 :     if ( count >= 10000 ) 

	cmp	DWORD PTR _count$91587[ebp], 10000	; 00002710H
	jl	$LN16@pop_quad_t
$LN1335@pop_quad_t:

; 4407 :     { sprintf(errmsg,"Internal error after pop_quad_to_quad facet %s, bad topology around vertex %s.\n",ELNAME(f_id),ELNAME1(get_edge_tailv(ea)));

	mov	eax, DWORD PTR _ea$[ebp]
	mov	esi, DWORD PTR _web+636
	mov	edx, DWORD PTR _web+124
	mov	edi, DWORD PTR _dymem
	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	je	SHORT $LN1098@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+216
	mov	edx, DWORD PTR [edx+edi+304]
	add	eax, edx
	mov	edx, DWORD PTR [eax+esi*4]
	jmp	SHORT $LN1097@pop_quad_t
$LN1098@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+216
	mov	edx, DWORD PTR [edx+edi+304]
	add	eax, edx
	mov	edx, DWORD PTR [eax]
$LN1097@pop_quad_t:
	test	edx, 268435456				; 10000000H
	je	SHORT $LN258@pop_quad_t
	test	ecx, ecx
	je	SHORT $LN1102@pop_quad_t
	mov	eax, DWORD PTR [eax+esi*4]
	jmp	SHORT $LN1101@pop_quad_t
$LN1102@pop_quad_t:
	mov	eax, DWORD PTR [eax]
$LN1101@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames+30
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	esi, OFFSET _elnames+30
	jmp	SHORT $LN259@pop_quad_t
$LN258@pop_quad_t:
	mov	esi, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN259@pop_quad_t:
	cmp	DWORD PTR tv9187[ebp], 0
	je	SHORT $LN260@pop_quad_t
	mov	eax, DWORD PTR _f_id$[ebp]
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN261@pop_quad_t
$LN260@pop_quad_t:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN261@pop_quad_t:
	push	esi
	push	eax
	push	OFFSET ??_C@_0FA@IBHCIAMH@Internal?5error?5after?5pop_quad_to@
	push	OFFSET _errmsg
	call	_sprintf

; 4408 :       kb_error(2831,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2831					; 00000b0fH
	call	_kb_error
	mov	ecx, DWORD PTR _web+460
	add	esp, 28					; 0000001cH
$LN16@pop_quad_t:

; 4377 :   }
; 4378 : 
; 4379 : 
; 4380 :   /* Fix up facet edge orders */
; 4381 :   for ( i = 0 ; i < 4 ; i++ )

	mov	ebx, DWORD PTR _i$[ebp]
	inc	ebx
	mov	DWORD PTR _i$[ebp], ebx
	cmp	ebx, 4
	jl	$LL1557@pop_quad_t

; 4409 :     }
; 4410 :   }
; 4411 :  
; 4412 :   /* fix up new facet bodies */
; 4413 :   fa = get_fe_facet(newfe[0]);

	cmp	DWORD PTR tv10572[ebp], 0
	mov	edi, DWORD PTR _NULLFACET
	mov	eax, DWORD PTR _newfe$[ebp]
	jne	SHORT $LN1106@pop_quad_t
	mov	edx, edi
	jmp	SHORT $LN1105@pop_quad_t
$LN1106@pop_quad_t:
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	edx, DWORD PTR [edx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN1105@pop_quad_t
	xor	edx, 134217728				; 08000000H
$LN1105@pop_quad_t:

; 4414 :   fe = get_prev_facet(newfe[0]);  /* debugging */

	mov	ebx, eax
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	shr	ebx, 27					; 0000001bH
	and	ebx, 1
	lea	esi, DWORD PTR [eax+eax]
	mov	eax, DWORD PTR [ecx+esi]
	je	SHORT $LN1110@pop_quad_t
	mov	eax, DWORD PTR [eax+40]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN1109@pop_quad_t
$LN1110@pop_quad_t:
	mov	eax, DWORD PTR [eax+36]
$LN1109@pop_quad_t:

; 4415 :   fb = get_fe_facet(fe); 

	test	eax, 268435456				; 10000000H
	jne	SHORT $LN1114@pop_quad_t
	mov	eax, edi
	jmp	SHORT $LN1115@pop_quad_t
$LN1114@pop_quad_t:
	mov	edi, eax
	and	edi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	ecx, DWORD PTR [ecx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN1113@pop_quad_t
	xor	ecx, 134217728				; 08000000H
$LN1113@pop_quad_t:
	mov	eax, ecx
$LN1115@pop_quad_t:

; 4416 :   b_id = get_facet_body(inverse_id(fb));

	xor	eax, 134217728				; 08000000H
	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN1120@pop_quad_t
	xor	eax, eax
	jmp	SHORT $LN1117@pop_quad_t
$LN1120@pop_quad_t:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN1119@pop_quad_t
	xor	eax, eax
	jmp	SHORT $LN1117@pop_quad_t
$LN1119@pop_quad_t:
	mov	ecx, DWORD PTR _web+236
	mov	edi, DWORD PTR _dymem
	test	eax, 134217728				; 08000000H
	je	SHORT $LN1118@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _web+328
	mov	ecx, DWORD PTR [ecx+edi+784]
	mov	eax, DWORD PTR [eax+ecx+4]
	jmp	SHORT $LN1117@pop_quad_t
$LN1118@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _web+328
	mov	ecx, DWORD PTR [ecx+edi+784]
	mov	eax, DWORD PTR [eax+ecx]
$LN1117@pop_quad_t:

; 4417 :   set_facet_body(fa,b_id);

	push	eax
	push	edx
	call	_set_facet_body

; 4418 :   set_facet_body(inverse_id(get_fe_facet(newfe[0])),
; 4419 :          get_facet_body(get_fe_facet(get_next_facet(newfe[0]))));

	mov	ecx, DWORD PTR _web+460
	mov	esi, DWORD PTR [ecx+esi]
	add	esp, 8
	test	ebx, ebx
	je	SHORT $LN1124@pop_quad_t
	mov	eax, DWORD PTR [esi+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN1123@pop_quad_t
$LN1124@pop_quad_t:
	mov	eax, DWORD PTR [esi+40]
$LN1123@pop_quad_t:
	mov	edx, DWORD PTR _NULLFACET
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN1128@pop_quad_t
	mov	eax, edx
	jmp	SHORT $LN1129@pop_quad_t
$LN1128@pop_quad_t:
	mov	edi, eax
	and	edi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	ecx, DWORD PTR [ecx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN1127@pop_quad_t
	xor	ecx, 134217728				; 08000000H
$LN1127@pop_quad_t:
	mov	eax, ecx
$LN1129@pop_quad_t:
	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN1134@pop_quad_t
	xor	ecx, ecx
	jmp	SHORT $LN1131@pop_quad_t
$LN1134@pop_quad_t:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN1133@pop_quad_t
	xor	ecx, ecx
	jmp	SHORT $LN1131@pop_quad_t
$LN1133@pop_quad_t:
	mov	ecx, DWORD PTR _web+236
	mov	edi, DWORD PTR _dymem
	test	eax, 134217728				; 08000000H
	je	SHORT $LN1132@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _web+328
	mov	ecx, DWORD PTR [ecx+edi+784]
	mov	ecx, DWORD PTR [eax+ecx+4]
	jmp	SHORT $LN1131@pop_quad_t
$LN1132@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _web+328
	mov	ecx, DWORD PTR [ecx+edi+784]
	mov	ecx, DWORD PTR [eax+ecx]
$LN1131@pop_quad_t:
	cmp	DWORD PTR tv10572[ebp], 0
	jne	SHORT $LN1138@pop_quad_t
	mov	eax, edx
	jmp	SHORT $LN1137@pop_quad_t
$LN1138@pop_quad_t:
	mov	eax, DWORD PTR [esi+24]
	test	ebx, ebx
	je	SHORT $LN1137@pop_quad_t
	xor	eax, 134217728				; 08000000H
$LN1137@pop_quad_t:
	push	ecx
	xor	eax, 134217728				; 08000000H
	push	eax
	call	_set_facet_body

; 4420 :   set_facet_body(get_fe_facet(newfe[2]),
; 4421 :          get_facet_body(inverse_id(get_fe_facet(get_prev_facet(newfe[2])))));

	mov	eax, DWORD PTR _newfe$[ebp+8]
	mov	ecx, DWORD PTR _web+460
	mov	ebx, eax
	shr	ebx, 27					; 0000001bH
	add	esp, 8
	and	ebx, 1
	mov	DWORD PTR tv10653[ebp], ebx
	je	SHORT $LN1142@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	lea	esi, DWORD PTR [eax+eax]
	mov	edx, DWORD PTR [ecx+esi]
	mov	eax, DWORD PTR [edx+40]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN1141@pop_quad_t
$LN1142@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	lea	esi, DWORD PTR [eax+eax]
	mov	edx, DWORD PTR [ecx+esi]
	mov	eax, DWORD PTR [edx+36]
$LN1141@pop_quad_t:
	mov	edi, DWORD PTR _NULLFACET
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN1146@pop_quad_t
	mov	eax, edi
	jmp	SHORT $LN1147@pop_quad_t
$LN1146@pop_quad_t:
	mov	ebx, eax
	and	ebx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+ebx*4]
	mov	ecx, DWORD PTR [ecx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN1145@pop_quad_t
	xor	ecx, 134217728				; 08000000H
$LN1145@pop_quad_t:
	mov	ebx, DWORD PTR tv10653[ebp]
	mov	eax, ecx
$LN1147@pop_quad_t:
	xor	eax, 134217728				; 08000000H
	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN1152@pop_quad_t
	xor	ecx, ecx
	jmp	SHORT $LN1149@pop_quad_t
$LN1152@pop_quad_t:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN1151@pop_quad_t
	xor	ecx, ecx
	jmp	SHORT $LN1149@pop_quad_t
$LN1151@pop_quad_t:
	mov	ecx, DWORD PTR _web+236
	mov	ebx, DWORD PTR _dymem
	test	eax, 134217728				; 08000000H
	je	SHORT $LN1150@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _web+328
	mov	ecx, DWORD PTR [ecx+ebx+784]
	mov	ecx, DWORD PTR [eax+ecx+4]
	jmp	SHORT $LN1621@pop_quad_t
$LN1150@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _web+328
	mov	ecx, DWORD PTR [ecx+ebx+784]
	mov	ecx, DWORD PTR [eax+ecx]
$LN1621@pop_quad_t:
	mov	ebx, DWORD PTR tv10653[ebp]
$LN1149@pop_quad_t:
	cmp	DWORD PTR tv10701[ebp], 0
	jne	SHORT $LN1156@pop_quad_t
	mov	eax, edi
	jmp	SHORT $LN1497@pop_quad_t
$LN1156@pop_quad_t:
	mov	eax, DWORD PTR [edx+24]
	test	ebx, ebx
	je	SHORT $LN1497@pop_quad_t
	xor	eax, 134217728				; 08000000H
$LN1497@pop_quad_t:
	push	ecx
	push	eax
	call	_set_facet_body

; 4422 :   set_facet_body(inverse_id(get_fe_facet(newfe[2])),
; 4423 :          get_facet_body(get_fe_facet(get_next_facet(newfe[2]))));

	mov	ecx, DWORD PTR _web+460
	mov	esi, DWORD PTR [ecx+esi]
	add	esp, 8
	test	ebx, ebx
	je	SHORT $LN1160@pop_quad_t
	mov	eax, DWORD PTR [esi+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN1159@pop_quad_t
$LN1160@pop_quad_t:
	mov	eax, DWORD PTR [esi+40]
$LN1159@pop_quad_t:
	mov	edx, DWORD PTR _NULLFACET
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN1164@pop_quad_t
	mov	eax, edx
	jmp	SHORT $LN1165@pop_quad_t
$LN1164@pop_quad_t:
	mov	edi, eax
	and	edi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	ecx, DWORD PTR [ecx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN1163@pop_quad_t
	xor	ecx, 134217728				; 08000000H
$LN1163@pop_quad_t:
	mov	eax, ecx
$LN1165@pop_quad_t:
	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN1170@pop_quad_t
	xor	ecx, ecx
	jmp	SHORT $LN1167@pop_quad_t
$LN1170@pop_quad_t:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN1169@pop_quad_t
	xor	ecx, ecx
	jmp	SHORT $LN1167@pop_quad_t
$LN1169@pop_quad_t:
	mov	ecx, DWORD PTR _web+236
	mov	edi, DWORD PTR _dymem
	test	eax, 134217728				; 08000000H
	je	SHORT $LN1168@pop_quad_t
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _web+328
	mov	ecx, DWORD PTR [ecx+edi+784]
	mov	ecx, DWORD PTR [eax+ecx+4]
	jmp	SHORT $LN1167@pop_quad_t
$LN1168@pop_quad_t:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _web+328
	mov	ecx, DWORD PTR [ecx+edi+784]
	mov	ecx, DWORD PTR [eax+ecx]
$LN1167@pop_quad_t:
	cmp	DWORD PTR tv10701[ebp], 0
	jne	SHORT $LN1174@pop_quad_t
	mov	eax, edx
	jmp	SHORT $LN1515@pop_quad_t
$LN1174@pop_quad_t:
	mov	eax, DWORD PTR [esi+24]
	test	ebx, ebx
	je	SHORT $LN1515@pop_quad_t
	xor	eax, 134217728				; 08000000H
$LN1515@pop_quad_t:
	push	ecx
	xor	eax, 134217728				; 08000000H
	push	eax
	call	_set_facet_body
	add	esp, 8

; 4424 : 
; 4425 :   if ( web.modeltype == QUADRATIC )

	cmp	DWORD PTR _web+628, 2
	jne	$LN5@pop_quad_t

; 4426 :   { /* fix up edge midpoints */
; 4427 :     int bailcount = 0;
; 4428 :     for ( i = 0 ; i < 4 ; i++ )

	mov	eax, DWORD PTR _web+124
	xor	ebx, ebx
	mov	DWORD PTR _i$[ebp], ebx
	npad	4
$LL1558@pop_quad_t:

; 4429 :     { edge_id start_e = get_vertex_edge(newv[i]);

	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _newv$[ebp+edx*4]
	mov	edx, DWORD PTR _web+12
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edi, DWORD PTR [ecx+28]
	mov	DWORD PTR _start_e$91604[ebp], edi
$LL4@pop_quad_t:

; 4430 :       edge_id ea;
; 4431 :       ea = start_e;
; 4432 :       do
; 4433 :       { new_vertex_average(get_edge_midv(ea),VOLKEEP);

	mov	ecx, DWORD PTR _dymem
	mov	edx, DWORD PTR _web+216
	mov	edx, DWORD PTR [edx+ecx+304]
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [eax+esi]
	mov	ecx, DWORD PTR [edx+eax+8]
	push	1
	push	ecx
	call	_new_vertex_average

; 4434 :         ea = get_next_tail_edge(ea);

	mov	eax, DWORD PTR _web+124
	mov	edx, DWORD PTR [eax+esi]
	shr	edi, 27					; 0000001bH

; 4435 :         if ( bailcount++ > 1000 ) break;

	mov	ecx, ebx
	and	edi, 1
	mov	edi, DWORD PTR [edx+edi*4+32]
	add	esp, 8
	inc	ebx
	cmp	ecx, 1000				; 000003e8H
	jg	SHORT $LN2@pop_quad_t

; 4436 :       } while ( !equal_id(ea,start_e));

	cmp	edi, DWORD PTR _start_e$91604[ebp]
	jne	SHORT $LL4@pop_quad_t
$LN2@pop_quad_t:

; 4426 :   { /* fix up edge midpoints */
; 4427 :     int bailcount = 0;
; 4428 :     for ( i = 0 ; i < 4 ; i++ )

	mov	ecx, DWORD PTR _i$[ebp]
	inc	ecx
	mov	DWORD PTR _i$[ebp], ecx
	cmp	ecx, 4
	jl	$LL1558@pop_quad_t
$LN5@pop_quad_t:

; 4437 :     }
; 4438 :   }
; 4439 : 
; 4440 :   return 1;
; 4441 : } /* end pop_quad_to_quad */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	mov	eax, 1
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_pop_quad_to_quad ENDP
_TEXT	ENDS
PUBLIC	_triple_con_pop
EXTRN	_unset_v_constraint_map:PROC
; Function compile flags: /Ogtp
;	COMDAT _triple_con_pop
_TEXT	SEGMENT
_start_e$ = -40						; size = 4
$T98487 = -36						; size = 4
tv478 = -32						; size = 4
tv308 = -28						; size = 4
_e_id$ = -24						; size = 4
_vmap$ = -20						; size = 4
_i$ = -16						; size = 4
_cons$ = -12						; size = 8
_this_hits$91716 = -8					; size = 4
_ehits$ = -4						; size = 4
_v_id$ = 8						; size = 4
_triple_con_pop PROC					; COMDAT

; 4560 : {

	push	ebp
	mov	ebp, esp

; 4561 :   conmap_t *vmap = get_v_constraint_map(v_id);

	mov	ecx, DWORD PTR _web+104
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR _web+12
	sub	esp, 40					; 00000028H
	cmp	DWORD PTR [ecx+edx+1288], 0
	push	ebx
	push	esi
	push	edi
	je	SHORT $LN23@triple_con
	mov	esi, DWORD PTR _v_id$[ebp]
	and	esi, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [eax+esi*4]
	add	ebx, DWORD PTR [ecx+edx+1264]
	jmp	SHORT $LN44@triple_con
$LN23@triple_con:
	mov	ebx, OFFSET _nullcon
$LN44@triple_con:

; 4562 :   edge_id e_id, start_e;
; 4563 : /*  edge_id conedges[2]; */
; 4564 :   conmap_t cons[2];
; 4565 :   unsigned int ehits=0; /* number of adjacent edges on constraints */
; 4566 :   unsigned int i,j;
; 4567 : 
; 4568 :   /* see if any adjacent edge is on two constraints */
; 4569 :   /* and find out what constraints are involved */
; 4570 :   e_id = start_e = get_vertex_edge(v_id);

	mov	ecx, DWORD PTR _v_id$[ebp]
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ecx*4]

; 4591 :   } while ( !equal_id(e_id,start_e) );

	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+edx+1048]
	mov	eax, DWORD PTR [eax+28]
	mov	DWORD PTR tv308[ebp], ecx
	mov	ecx, DWORD PTR _web+124
	mov	DWORD PTR _vmap$[ebp], ebx
	mov	DWORD PTR _ehits$[ebp], 0
	mov	DWORD PTR _start_e$[ebp], eax
	mov	DWORD PTR _e_id$[ebp], eax
$LL20@triple_con:

; 4571 :   do
; 4572 :   { conmap_t *emap = get_e_constraint_map(e_id);

	cmp	DWORD PTR tv308[ebp], 0
	je	SHORT $LN25@triple_con
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ecx+esi*4]
	mov	esi, DWORD PTR _web+216
	add	edi, DWORD PTR [esi+edx+1024]
	jmp	SHORT $LN26@triple_con
$LN25@triple_con:
	mov	edi, OFFSET _nullcon
$LN26@triple_con:

; 4574 : 
; 4575 :     for ( i = 1 ; i <= emap[0] ; i++ )

	cmp	DWORD PTR [edi], 1
	mov	DWORD PTR _this_hits$91716[ebp], 0
	mov	DWORD PTR _i$[ebp], 1
	jb	SHORT $LN15@triple_con

; 4573 :     int this_hits = 0;

	mov	edx, DWORD PTR [ebx]
	sub	ebx, edi
	mov	DWORD PTR $T98487[ebp], edx
	mov	DWORD PTR tv478[ebp], ebx
$LL40@triple_con:

; 4576 :     { 
; 4577 :       for ( j = 0 ;  j <= vmap[0] ; j++ )

	xor	esi, esi
	mov	eax, edi
	npad	7
$LL41@triple_con:

; 4578 :       { if ( (emap[j]==(vmap[j]&~CON_HIT_BIT)) && (vmap[j] & CON_HIT_BIT) )

	mov	ecx, DWORD PTR tv478[ebp]
	mov	ecx, DWORD PTR [ecx+eax]
	mov	edx, DWORD PTR [eax]
	mov	ebx, ecx
	and	ebx, 2147483647				; 7fffffffH
	cmp	edx, ebx
	jne	SHORT $LN13@triple_con
	test	ecx, ecx
	jns	SHORT $LN13@triple_con

; 4579 :         { if ( this_hits )

	cmp	DWORD PTR _this_hits$91716[ebp], 0
	jne	$LN7@triple_con

; 4580 :           { /* now second constraint on edge */
; 4581 :             return 0;
; 4582 :           }
; 4583 :         /*  conedges[ehits] = e_id; */
; 4584 :           cons[ehits] = emap[j];

	mov	ecx, DWORD PTR _ehits$[ebp]
	mov	DWORD PTR _cons$[ebp+ecx*4], edx

; 4585 :           ehits++;

	inc	ecx
	mov	DWORD PTR _ehits$[ebp], ecx

; 4586 :           this_hits++;

	mov	DWORD PTR _this_hits$91716[ebp], 1
$LN13@triple_con:

; 4576 :     { 
; 4577 :       for ( j = 0 ;  j <= vmap[0] ; j++ )

	inc	esi
	add	eax, 4
	cmp	esi, DWORD PTR $T98487[ebp]
	jbe	SHORT $LL41@triple_con

; 4574 : 
; 4575 :     for ( i = 1 ; i <= emap[0] ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR [edi]
	jbe	SHORT $LL40@triple_con
	mov	ebx, DWORD PTR _vmap$[ebp]
	mov	eax, DWORD PTR _e_id$[ebp]
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+124
$LN15@triple_con:

; 4587 :         }
; 4588 :       }
; 4589 :     }
; 4590 :     e_id = get_next_tail_edge(e_id);

	mov	esi, eax
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	shr	esi, 27					; 0000001bH
	and	esi, 1
	mov	eax, DWORD PTR [eax+esi*4+32]
	mov	DWORD PTR _e_id$[ebp], eax

; 4591 :   } while ( !equal_id(e_id,start_e) );

	cmp	eax, DWORD PTR _start_e$[ebp]
	jne	$LL20@triple_con

; 4592 :   
; 4593 :   
; 4594 :   /* see if constraint not used by edges is not one-sided */
; 4595 :   for ( i = 1 ; i <= vmap[0] ; i++ )

	mov	edi, DWORD PTR [ebx]
	mov	edx, 1
	cmp	edi, edx
	jb	SHORT $LN7@triple_con
	mov	esi, DWORD PTR _web+652
	npad	5
$LL9@triple_con:

; 4596 :   { if ( !(vmap[i] & CON_HIT_BIT) ) continue;

	mov	eax, DWORD PTR [ebx+edx*4]
	test	eax, eax
	jns	SHORT $LN8@triple_con

; 4597 :     if ( get_constraint(vmap[i])->attr & (NONPOSITIVE|NONNEGATIVE) ) continue;

	and	eax, 1073741823				; 3fffffffH
	imul	eax, 176				; 000000b0H
	mov	eax, DWORD PTR [eax+esi+32]
	and	eax, 3
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN5@triple_con
$LN8@triple_con:

; 4592 :   
; 4593 :   
; 4594 :   /* see if constraint not used by edges is not one-sided */
; 4595 :   for ( i = 1 ; i <= vmap[0] ; i++ )

	inc	edx
	cmp	edx, edi
	jbe	SHORT $LL9@triple_con
$LN7@triple_con:
	pop	edi
	pop	esi

; 4604 :   }
; 4605 : 
; 4606 :   return 0;

	xor	eax, eax
	pop	ebx

; 4607 : } // end triple_con_pop()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@triple_con:

; 4598 :     for  ( j = 0 ; j < ehits ; j++ )
; 4599 :       if ( cons[j] == (vmap[i] & ~CON_HIT_BIT) )
; 4600 :         continue;
; 4601 :     /* now have freeable constraint */
; 4602 :     unset_v_constraint_map(v_id,vmap[i]);

	mov	ecx, DWORD PTR [ebx+edx*4]
	mov	edx, DWORD PTR _v_id$[ebp]
	push	ecx
	push	edx
	call	_unset_v_constraint_map
	add	esp, 8
	pop	edi
	pop	esi

; 4603 :     return 1;

	mov	eax, 1
	pop	ebx

; 4607 : } // end triple_con_pop()

	mov	esp, ebp
	pop	ebp
	ret	0
_triple_con_pop ENDP
_TEXT	ENDS
PUBLIC	_v_id$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_double_con_pop
EXTRN	_set_e_constraint_map:PROC
EXTRN	_unset_e_constraint_map:PROC
EXTRN	_set_v_constraint_map:PROC
EXTRN	_edge_refine:PROC
EXTRN	_eval_all:PROC
; Function compile flags: /Ogtp
;	COMDAT _double_con_pop
_TEXT	SEGMENT
_dummy$ = -216						; size = 8
tv477 = -212						; size = 4
tv422 = -208						; size = 4
_vmap$ = -204						; size = 4
tv496 = -200						; size = 4
_i$ = -196						; size = 4
tv160 = -192						; size = 8
_concounts$ = -192					; size = 8
_v_id$GSCopy$ = -184					; size = 4
_j$ = -180						; size = 4
_count$ = -176						; size = 4
_cons$ = -172						; size = 8
_con_normal$ = -164					; size = 96
_tripvec$ = -68						; size = 48
_cedges$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_v_id$ = 8						; size = 4
_triple$ = 12						; size = 4
_con_edges$ = 16					; size = 4
_double_con_pop PROC					; COMDAT

; 4627 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 4628 :   conmap_t *vmap = get_v_constraint_map(v_id);

	mov	ecx, DWORD PTR _web+104
	mov	eax, DWORD PTR _v_id$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _dymem
	cmp	DWORD PTR [ecx+ebx+1288], 0
	push	esi
	push	edi

; 4703 :   }
; 4704 :   else
; 4705 :   { /* move to double-edge constraint */
; 4706 :     edge_refine(cedges[1][0]);

	mov	DWORD PTR _v_id$GSCopy$[ebp], eax
	je	SHORT $LN27@double_con

; 4628 :   conmap_t *vmap = get_v_constraint_map(v_id);

	mov	esi, DWORD PTR _web+12
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	add	edx, DWORD PTR [ecx+ebx+1264]
	mov	DWORD PTR _vmap$[ebp], edx
	jmp	SHORT $LN28@double_con
$LN27@double_con:
	mov	DWORD PTR _vmap$[ebp], OFFSET _nullcon
$LN28@double_con:

; 4629 :   conmap_t cons[2];
; 4630 :   conmap_t concounts[2];
; 4631 :   unsigned int count;
; 4632 :   unsigned int i,j,k;
; 4633 :   edge_id cedges[2][2];
; 4634 :   REAL tripvec[MAXCOORD];
; 4635 :   REAL con_normal[2][MAXCOORD];
; 4636 :   REAL dummy;
; 4637 : 
; 4638 :   if ( (get_vattr(v_id) & FIXED) || (get_eattr(con_edges[0]) & FIXED)
; 4639 :      || (get_eattr(con_edges[1]) & FIXED) || (get_eattr(con_edges[2]) & FIXED))

	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv422[ebp], eax
	mov	eax, DWORD PTR [eax+ecx]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 64					; 00000040H
	xor	ecx, ecx
	or	eax, ecx
	jne	$LN23@double_con
	mov	esi, DWORD PTR _con_edges$[ebp]
	mov	edx, DWORD PTR [esi]
	mov	edi, DWORD PTR _web+124
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+edx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 64					; 00000040H
	or	eax, ecx
	jne	$LN23@double_con
	mov	eax, DWORD PTR [esi+4]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 64					; 00000040H
	or	eax, ecx
	jne	$LN23@double_con
	mov	edx, DWORD PTR [esi+8]
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+edx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 64					; 00000040H
	or	eax, ecx
	jne	$LN23@double_con

; 4648 :     { /* see if hit by vertex */
; 4649 :       for ( k = 1 ; k <= vmap[0] ; k++ )

	mov	eax, DWORD PTR _web+216
	mov	DWORD PTR _count$[ebp], ecx
	mov	DWORD PTR _concounts$[ebp+4], ecx
	mov	DWORD PTR _concounts$[ebp], ecx
	mov	ecx, DWORD PTR [eax+ebx+1048]
	xor	edx, edx
	mov	DWORD PTR _i$[ebp], edx
	mov	DWORD PTR tv477[ebp], ecx
	jmp	SHORT $LN22@double_con
	npad	6
$LL49@double_con:

; 4628 :   conmap_t *vmap = get_v_constraint_map(v_id);

	mov	ebx, DWORD PTR _dymem
	mov	edi, DWORD PTR _web+124
$LN22@double_con:

; 4646 :   { conmap_t *emap = get_e_constraint_map(con_edges[i]);

	cmp	DWORD PTR tv477[ebp], 0
	je	SHORT $LN29@double_con
	mov	eax, DWORD PTR [esi+edx*4]
	mov	ecx, DWORD PTR _web+216
	and	eax, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edi+eax*4]
	add	edi, DWORD PTR [ecx+ebx+1024]
	jmp	SHORT $LN30@double_con
$LN29@double_con:
	mov	edi, OFFSET _nullcon
$LN30@double_con:

; 4647 :     for ( j = 1 ; j <= emap[0] ; j++ )

	mov	ebx, 1
	mov	DWORD PTR _j$[ebp], ebx
	cmp	DWORD PTR [edi], ebx
	jb	$LN21@double_con
	mov	eax, DWORD PTR _vmap$[ebp]

; 4648 :     { /* see if hit by vertex */
; 4649 :       for ( k = 1 ; k <= vmap[0] ; k++ )

	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv496[ebp], ecx
$LL50@double_con:
	mov	ecx, 1
	cmp	ecx, DWORD PTR tv496[ebp]
	ja	$LN18@double_con
	mov	edx, DWORD PTR [edi+ebx*4]
	npad	7
$LL45@double_con:

; 4650 :         if ( (emap[j] == (vmap[k] & ~CON_HIT_BIT)) && (vmap[k] & CON_HIT_BIT) )

	mov	eax, DWORD PTR _vmap$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	ebx, eax
	and	ebx, 2147483647				; 7fffffffH
	cmp	edx, ebx
	jne	SHORT $LN15@double_con
	test	eax, eax
	js	SHORT $LN47@double_con
$LN15@double_con:

; 4648 :     { /* see if hit by vertex */
; 4649 :       for ( k = 1 ; k <= vmap[0] ; k++ )

	inc	ecx
	cmp	ecx, DWORD PTR tv496[ebp]
	jbe	SHORT $LL45@double_con
$LN47@double_con:
	mov	edx, DWORD PTR _i$[ebp]
	mov	ebx, DWORD PTR _j$[ebp]

; 4651 :           break;
; 4652 :       if ( k > vmap[0] ) continue;

	cmp	ecx, DWORD PTR tv496[ebp]
	ja	SHORT $LN18@double_con

; 4653 : 
; 4654 :       for ( k = 0 ; k < count ; k++ )

	xor	eax, eax
	cmp	eax, DWORD PTR _count$[ebp]
	jae	SHORT $LN54@double_con
	mov	ecx, DWORD PTR [edi+ebx*4]
$LL48@double_con:

; 4655 :       { if ( emap[j] == cons[k] )

	cmp	ecx, DWORD PTR _cons$[ebp+eax*4]
	je	SHORT $LN37@double_con

; 4653 : 
; 4654 :       for ( k = 0 ; k < count ; k++ )

	inc	eax
	cmp	eax, DWORD PTR _count$[ebp]
	jb	SHORT $LL48@double_con

; 4655 :       { if ( emap[j] == cons[k] )

	jmp	SHORT $LN9@double_con
$LN37@double_con:

; 4656 :         { 
; 4657 :           cedges[k][concounts[k]++] = con_edges[i];

	mov	ecx, DWORD PTR _concounts$[ebp+eax*4]
	mov	esi, DWORD PTR [esi+edx*4]
	lea	ebx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _cedges$[ebp+ebx*4], esi
	mov	ebx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _con_edges$[ebp]
	inc	ecx
	mov	DWORD PTR _concounts$[ebp+eax*4], ecx
$LN9@double_con:

; 4658 :           break;
; 4659 :         }
; 4660 :       }
; 4661 :       if ( k == count )

	cmp	eax, DWORD PTR _count$[ebp]
$LN54@double_con:
	jne	SHORT $LN18@double_con

; 4662 :       { cons[k] = emap[j];

	mov	ecx, DWORD PTR [edi+ebx*4]

; 4663 :         concounts[k] = 1;
; 4664 :         cedges[k][0] = con_edges[i];
; 4665 :         count++;

	inc	DWORD PTR _count$[ebp]
	mov	DWORD PTR _cons$[ebp+eax*4], ecx
	mov	ecx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR _concounts$[ebp+eax*4], 1
	mov	DWORD PTR _cedges$[ebp+eax*8], ecx
$LN18@double_con:

; 4647 :     for ( j = 1 ; j <= emap[0] ; j++ )

	inc	ebx
	mov	DWORD PTR _j$[ebp], ebx
	cmp	ebx, DWORD PTR [edi]
	jbe	$LL50@double_con
$LN21@double_con:

; 4640 :     return 0;
; 4641 : 
; 4642 :   concounts[0] = concounts[1] = count = 0;
; 4643 : 
; 4644 :   /* find which constraint used twice */
; 4645 :   for ( i = 0 ; i < 3 ; i++ )

	inc	edx
	mov	DWORD PTR _i$[ebp], edx
	cmp	edx, 3
	jb	$LL49@double_con

; 4666 :       }
; 4667 :     }
; 4668 :   }
; 4669 : 
; 4670 :   if ( concounts[0] == 1 )

	cmp	DWORD PTR _concounts$[ebp], 1
	jne	SHORT $LN43@double_con

; 4671 :   { /* swap */
; 4672 :     edge_id tempe;
; 4673 :     conmap_t temp;
; 4674 :     tempe = cedges[0][0];
; 4675 :     cedges[0][0] = cedges[1][0];

	mov	edx, DWORD PTR _cedges$[ebp+8]
	mov	eax, DWORD PTR _cedges$[ebp]

; 4676 :     cedges[0][1] = cedges[1][1];
; 4677 :     cedges[1][0] = tempe;
; 4678 :     temp = cons[0];

	mov	ebx, DWORD PTR _cons$[ebp]
	mov	ecx, DWORD PTR _cedges$[ebp+12]
	mov	DWORD PTR _cedges$[ebp], edx

; 4679 :     cons[0] = cons[1];

	mov	edx, DWORD PTR _cons$[ebp+4]
	mov	DWORD PTR _cedges$[ebp+4], ecx
	mov	DWORD PTR _cedges$[ebp+8], eax
	mov	DWORD PTR _cons$[ebp], edx

; 4680 :     cons[1] = temp;

	mov	DWORD PTR _cons$[ebp+4], ebx
	jmp	SHORT $LN6@double_con
$LN43@double_con:
	mov	ebx, DWORD PTR _cons$[ebp+4]
$LN6@double_con:

; 4681 :     concounts[0] = 2;
; 4682 :     concounts[1] = 1;
; 4683 :   }
; 4684 :  
; 4685 :   /* calculate gradients */
; 4686 :   for ( i = 0 ; i < 2 ; i++ )

	xor	esi, esi
	lea	edi, DWORD PTR _con_normal$[ebp]
	npad	11
$LL44@double_con:

; 4687 :     eval_all(get_constraint(cons[i])->formula,get_coord(v_id),SDIM,
; 4688 :       &dummy,con_normal[i],v_id);

	mov	eax, DWORD PTR _v_id$GSCopy$[ebp]
	mov	edx, DWORD PTR _web+616
	push	eax
	mov	eax, DWORD PTR tv422[ebp]
	push	edi
	lea	ecx, DWORD PTR _dummy$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _web+12
	push	edx
	mov	edx, DWORD PTR [eax+ecx]
	mov	eax, DWORD PTR _web+104
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+64]
	mov	eax, DWORD PTR _web+652
	push	edx
	mov	edx, DWORD PTR _cons$[ebp+esi*4]
	and	edx, 1073741823				; 3fffffffH
	imul	edx, 176				; 000000b0H
	mov	ecx, DWORD PTR [edx+eax+40]
	push	ecx
	call	_eval_all
	inc	esi
	add	esp, 24					; 00000018H
	add	edi, 48					; 00000030H
	cmp	esi, 2
	jb	SHORT $LL44@double_con

; 4689 : 
; 4690 :   if (fabs(dot(tripvec,con_normal[0],SDIM)) < fabs(dot(tripvec,con_normal[1],SDIM)))

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _con_normal$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tripvec$[ebp]
	push	ecx
	call	_dot
	fabs
	mov	edx, DWORD PTR _web+616
	fstp	QWORD PTR tv160[ebp]
	push	edx
	lea	eax, DWORD PTR _con_normal$[ebp+48]
	push	eax
	lea	ecx, DWORD PTR _tripvec$[ebp]
	push	ecx
	call	_dot
	fabs
	fcomp	QWORD PTR tv160[ebp]
	add	esp, 24					; 00000018H
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN2@double_con

; 4691 :   { /* v_id goes to single-edge constraint */
; 4692 :     /* generated new vertices on junction by refining edges */
; 4693 :     edge_refine(cedges[0][0]);

	mov	edi, DWORD PTR _cedges$[ebp]
	push	edi
	call	_edge_refine

; 4694 :     edge_refine(cedges[0][1]);

	mov	esi, DWORD PTR _cedges$[ebp+4]
	push	esi
	call	_edge_refine
	add	esp, 8

; 4695 :     /* old edge is the one attached to v_id */
; 4696 :     set_v_constraint_map(get_edge_headv(cedges[0][0]),cons[1]);

	push	ebx
	push	edi
	call	_get_edge_headv
	add	esp, 4
	push	eax
	call	_set_v_constraint_map
	add	esp, 8

; 4697 :     set_v_constraint_map(get_edge_headv(cedges[0][1]),cons[1]);

	push	ebx
	push	esi
	call	_get_edge_headv
	add	esp, 4
	push	eax
	call	_set_v_constraint_map

; 4698 :     unset_v_constraint_map(v_id,cons[0]);

	mov	edx, DWORD PTR _cons$[ebp]
	mov	eax, DWORD PTR _v_id$GSCopy$[ebp]
	push	edx
	push	eax
	call	_unset_v_constraint_map

; 4699 :     unset_e_constraint_map(cedges[0][0],cons[0]);

	mov	ecx, DWORD PTR _cons$[ebp]
	push	ecx
	push	edi
	call	_unset_e_constraint_map

; 4700 :     unset_e_constraint_map(cedges[0][1],cons[0]);

	mov	edx, DWORD PTR _cons$[ebp]
	push	edx
	push	esi
	call	_unset_e_constraint_map

; 4701 :     set_e_constraint_map(cedges[0][0],cons[1]);

	push	ebx
	push	edi
	call	_set_e_constraint_map

; 4702 :     set_e_constraint_map(cedges[0][1],cons[1]);

	push	ebx
	push	esi
	call	_set_e_constraint_map
	add	esp, 48					; 00000030H
	pop	edi
	pop	esi

; 4712 :   }
; 4713 : 
; 4714 :   return 1;

	mov	eax, 1
	pop	ebx

; 4715 : } // end double_con_pop()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@double_con:

; 4703 :   }
; 4704 :   else
; 4705 :   { /* move to double-edge constraint */
; 4706 :     edge_refine(cedges[1][0]);

	mov	esi, DWORD PTR _cedges$[ebp+8]
	push	esi
	call	_edge_refine

; 4707 :     /* old edge is the one attached to v_id */
; 4708 :     set_v_constraint_map(get_edge_headv(cedges[1][0]),cons[0]);

	mov	edi, DWORD PTR _cons$[ebp]
	add	esp, 4
	push	edi
	push	esi
	call	_get_edge_headv
	add	esp, 4
	push	eax
	call	_set_v_constraint_map

; 4709 :     unset_v_constraint_map(v_id,cons[1]);

	mov	eax, DWORD PTR _v_id$GSCopy$[ebp]
	push	ebx
	push	eax
	call	_unset_v_constraint_map

; 4710 :     unset_e_constraint_map(cedges[1][0],cons[1]);

	push	ebx
	push	esi
	call	_unset_e_constraint_map

; 4711 :     set_e_constraint_map(cedges[1][0],cons[0]);

	push	edi
	push	esi
	call	_set_e_constraint_map
	add	esp, 32					; 00000020H
	pop	edi
	pop	esi

; 4712 :   }
; 4713 : 
; 4714 :   return 1;

	mov	eax, 1
	pop	ebx

; 4715 : } // end double_con_pop()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN23@double_con:
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	xor	eax, eax
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_double_con_pop ENDP
_TEXT	ENDS
PUBLIC	__real@3fc3333333333333
PUBLIC	__real@4008000000000000
PUBLIC	__real@3ff3333333333333
PUBLIC	_triples$GSCopy$
PUBLIC	_v_id$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_one_con_pop_2
EXTRN	_new_facet:PROC
;	COMDAT __real@3fc3333333333333
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@3fc3333333333333 DQ 03fc3333333333333r	; 0.15
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@3ff3333333333333
CONST	SEGMENT
__real@3ff3333333333333 DQ 03ff3333333333333r	; 1.2
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\popfilm.c
CONST	ENDS
;	COMDAT _one_con_pop_2
_TEXT	SEGMENT
tv4279 = -528						; size = 4
_newv1$91920 = -524					; size = 4
tv4297 = -520						; size = 4
_triples$GSCopy$ = -516					; size = 4
tv4025 = -512						; size = 8
tv3999 = -512						; size = 8
tv3973 = -512						; size = 8
tv3947 = -512						; size = 8
_newf$91925 = -508					; size = 4
tv3777 = -504						; size = 4
tv4262 = -500						; size = 4
_con$ = -500						; size = 4
tv5296 = -496						; size = 4
_newv2$91921 = -496					; size = 4
_newe$ = -496						; size = 4
tv4125 = -492						; size = 4
tv4050 = -492						; size = 4
tv3837 = -492						; size = 4
tv5905 = -488						; size = 8
tv4030 = -488						; size = 8
tv4004 = -488						; size = 8
tv3978 = -488						; size = 8
tv3952 = -488						; size = 8
_atcount$ = -488					; size = 8
tv4212 = -484						; size = 4
_newe1$91922 = -480					; size = 4
_i$ = -480						; size = 4
tv4264 = -476						; size = 4
_newv$ = -476						; size = 4
_triple_second_flag$91850 = -476			; size = 4
tv5290 = -472						; size = 4
tv4335 = -472						; size = 4
tv5170 = -468						; size = 4
_newfe2$91929 = -468					; size = 4
tv4358 = -464						; size = 4
_v_id$GSCopy$ = -464					; size = 4
tv4247 = -460						; size = 4
$T99106 = -460						; size = 4
tv1702 = -460						; size = 4
tv637 = -460						; size = 4
tv5236 = -456						; size = 4
tv4281 = -456						; size = 4
_newfe4$91931 = -456					; size = 4
tv5232 = -452						; size = 4
tv4320 = -452						; size = 4
tv4402 = -448						; size = 4
tv3812 = -448						; size = 4
tv3809 = -448						; size = 4
_newe2$91923 = -448					; size = 4
tv3806 = -444						; size = 4
_newfe1$91928 = -444					; size = 4
tv5230 = -440						; size = 4
_fe$91926 = -440					; size = 4
_tsides$91933 = -436					; size = 96
_pull$ = -340						; size = 96
_mag$ = -244						; size = 32
_sides$ = -212						; size = 192
_attached$ = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_v_id$ = 8						; size = 4
_triples$ = 12						; size = 4
_con_edges$ = 16					; size = 4
_mode$ = 20						; size = 4
_one_con_pop_2 PROC					; COMDAT

; 4733 : { vertex_id newv;

	push	ebp
	mov	ebp, esp
	sub	esp, 528				; 00000210H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _v_id$[ebp]
	mov	ecx, DWORD PTR _triples$[ebp]

; 4734 :   edge_id newe,e_id;
; 4735 :   facetedge_id fe,start_fe,newfe;
; 4736 :   unsigned int i,j,k;
; 4737 :   REAL sides[2][2][MAXCOORD];
; 4738 :   REAL mag[2][2];
; 4739 :   REAL *x;
; 4740 :   edge_id attached[2][2];  /* which constraint edges attached to which trip */
; 4741 :   int atcount[2];
; 4742 :   conmap_t con=0,*vmap;  /* which constraint involved */
; 4743 :   int n;
; 4744 :   REAL pull[2][MAXCOORD];  /* separating forces for the two ways */
; 4745 : 
; 4746 :   if ( get_vattr(v_id) & FIXED ) return 0;

	mov	DWORD PTR _v_id$GSCopy$[ebp], eax
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv3777[ebp], eax
	push	esi
	mov	esi, DWORD PTR _web+12
	mov	eax, DWORD PTR [eax+esi]
	mov	eax, DWORD PTR [eax+8]
	xor	edx, edx
	and	eax, 64					; 00000040H
	or	eax, edx
	mov	DWORD PTR _triples$GSCopy$[ebp], ecx
	mov	DWORD PTR _con$[ebp], edx
	je	SHORT $LN56@one_con_po
	xor	eax, eax
	pop	esi

; 4975 : 
; 4976 :   }
; 4977 :   return 1;
; 4978 : 
; 4979 : } // end one_con_pop_2()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN56@one_con_po:

; 4747 :  
; 4748 :   /* see which constraint edges attached to which triple, and get in order */
; 4749 :   atcount[0] = atcount[1] = 0;

	lea	eax, DWORD PTR _sides$[ebp]
	mov	DWORD PTR _atcount$[ebp+4], edx
	mov	DWORD PTR _atcount$[ebp], edx
	mov	DWORD PTR tv5170[ebp], edx
	mov	DWORD PTR tv5230[ebp], eax
	lea	edx, DWORD PTR _attached$[ebp]
	lea	eax, DWORD PTR _atcount$[ebp]
	mov	DWORD PTR tv5232[ebp], edx
	mov	DWORD PTR tv5236[ebp], eax
	lea	eax, DWORD PTR [ecx+4]

; 4776 :       attached[k][0] = attached[k][1];

	lea	edx, DWORD PTR _atcount$[ebp]
	sub	ecx, edx
	push	ebx
	mov	DWORD PTR tv4050[ebp], eax
	mov	DWORD PTR tv5290[ebp], eax
	mov	DWORD PTR tv5296[ebp], ecx
	push	edi
	npad	13
$LL55@one_con_po:

; 4751 :   { int triple_second_flag = 0;
; 4752 :     start_fe = get_edge_fe(triples[k]);

	mov	eax, DWORD PTR tv5296[ebp]
	mov	ecx, DWORD PTR tv5236[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	esi, DWORD PTR _web+124
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	xor	edx, edx
	mov	DWORD PTR _triple_second_flag$91850[ebp], edx
	cmp	eax, edx
	jne	SHORT $LN66@one_con_po
	xor	eax, eax
	jmp	SHORT $LN65@one_con_po
$LN66@one_con_po:
	mov	eax, DWORD PTR [eax+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN65@one_con_po
	xor	eax, 134217728				; 08000000H
$LN65@one_con_po:

; 4753 :     for ( i = 0 ; i < 3 ; i++ )

	mov	ecx, DWORD PTR tv5290[ebp]
	mov	edi, DWORD PTR _web+460
	mov	DWORD PTR _i$[ebp], edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T99106[ebp], edx
	npad	7
$LL484@one_con_po:

; 4754 :     {
; 4755 :       fe = inverse_id(get_prev_edge(start_fe));

	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR tv3806[ebp], ecx
	je	SHORT $LN70@one_con_po
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [esi+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN520@one_con_po
$LN70@one_con_po:
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [esi+28]
$LN520@one_con_po:
	xor	eax, 134217728				; 08000000H

; 4756 :       for(;;)
; 4757 :       {
; 4758 :         if ( equal_id(triples[1-k],get_fe_edge(fe)) )

	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+ecx*4]
	mov	ecx, DWORD PTR [edx+20]
	mov	ebx, eax
	and	ebx, 134217728				; 08000000H
	xor	ecx, ebx
	mov	DWORD PTR tv3812[ebp], esi
	cmp	DWORD PTR $T99106[ebp], ecx
	je	SHORT $LN463@one_con_po
$LL49@one_con_po:

; 4762 :         }
; 4763 :         e_id = get_fe_edge(fe); 
; 4764 :         if ( equal_id(fe,get_next_facet(fe)) )

	mov	ebx, eax
	shr	ebx, 27					; 0000001bH
	and	ebx, 1
	je	SHORT $LN78@one_con_po
	mov	esi, DWORD PTR [edx+36]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN77@one_con_po
$LN78@one_con_po:
	mov	esi, DWORD PTR [edx+40]
$LN77@one_con_po:
	cmp	eax, esi
	je	SHORT $LN441@one_con_po

; 4767 :           break;
; 4768 :         }
; 4769 :         fe = inverse_id(get_prev_edge(get_next_facet(fe)));

	test	ebx, ebx
	je	SHORT $LN82@one_con_po
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN81@one_con_po
$LN82@one_con_po:
	mov	eax, DWORD PTR [edx+40]
$LN81@one_con_po:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN86@one_con_po
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN85@one_con_po
$LN86@one_con_po:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [eax+28]
$LN85@one_con_po:
	xor	eax, 134217728				; 08000000H
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+ecx*4]
	mov	ecx, DWORD PTR [edx+20]
	mov	esi, eax
	and	esi, 134217728				; 08000000H
	xor	ecx, esi
	cmp	DWORD PTR $T99106[ebp], ecx
	jne	SHORT $LL49@one_con_po

; 4756 :       for(;;)
; 4757 :       {
; 4758 :         if ( equal_id(triples[1-k],get_fe_edge(fe)) )

	mov	esi, DWORD PTR tv3812[ebp]
$LN463@one_con_po:

; 4759 :         { if ( i == 1 )

	mov	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jne	SHORT $LN48@one_con_po

; 4760 :             triple_second_flag = 1;

	mov	DWORD PTR _triple_second_flag$91850[ebp], eax

; 4761 :           break;

	jmp	SHORT $LN48@one_con_po
$LN441@one_con_po:

; 4765 :         { /* found valence 1 edge */
; 4766 :           attached[k][atcount[k]++] = e_id;    

	mov	eax, DWORD PTR tv5236[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, DWORD PTR tv5170[ebp]
	add	esi, edx
	inc	edx
	mov	DWORD PTR _attached$[ebp+esi*4], ecx
	mov	esi, DWORD PTR tv3812[ebp]
	mov	DWORD PTR [eax], edx
$LN48@one_con_po:

; 4770 :       } 
; 4771 :       start_fe = get_next_facet(start_fe);

	cmp	DWORD PTR tv3806[ebp], 0
	je	SHORT $LN90@one_con_po
	mov	eax, DWORD PTR [esi+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN51@one_con_po
$LN90@one_con_po:
	mov	eax, DWORD PTR [esi+40]
$LN51@one_con_po:

; 4753 :     for ( i = 0 ; i < 3 ; i++ )

	mov	ecx, DWORD PTR _i$[ebp]
	inc	ecx
	mov	DWORD PTR _i$[ebp], ecx
	cmp	ecx, 3
	jb	$LL484@one_con_po

; 4772 :     } 
; 4773 :     if ( triple_second_flag )

	cmp	DWORD PTR _triple_second_flag$91850[ebp], 0

; 4774 :     { /* swap into standard order */
; 4775 :       edge_id temp = attached[k][0];

	mov	edi, DWORD PTR tv5232[ebp]
	je	SHORT $LN44@one_con_po
	mov	eax, DWORD PTR [edi]

; 4776 :       attached[k][0] = attached[k][1];

	mov	edx, DWORD PTR [edi+4]
	mov	DWORD PTR [edi], edx

; 4777 :       attached[k][1] = temp;

	mov	DWORD PTR [edi+4], eax
$LN44@one_con_po:

; 4778 :     }
; 4779 :     for ( i = 0  ; i < 2 ; i++ )

	mov	esi, DWORD PTR tv5230[ebp]
	mov	ebx, 2
$LL43@one_con_po:

; 4780 :       get_edge_side(attached[k][i],sides[k][i]);

	mov	eax, DWORD PTR [edi]
	push	esi
	push	eax
	call	_get_edge_side
	add	esp, 8
	add	esi, 48					; 00000030H
	add	edi, 4
	dec	ebx
	jne	SHORT $LL43@one_con_po

; 4750 :   for ( k = 0 ; k < 2 ; k++ )   /* for each triple edge */

	mov	eax, DWORD PTR tv5170[ebp]
	mov	ecx, 4
	sub	DWORD PTR tv5290[ebp], ecx
	add	DWORD PTR tv5236[ebp], ecx
	add	eax, 2
	mov	DWORD PTR tv5170[ebp], eax
	mov	DWORD PTR tv5232[ebp], edi
	mov	DWORD PTR tv5230[ebp], esi
	cmp	eax, ecx
	jb	$LL55@one_con_po

; 4781 :   }
; 4782 : 
; 4783 :   /* see which constraint involved */
; 4784 :   vmap = get_v_constraint_map(v_id);

	mov	eax, DWORD PTR _web+104
	mov	edx, DWORD PTR _dymem
	cmp	DWORD PTR [eax+edx+1288], ebx
	je	SHORT $LN59@one_con_po
	mov	ecx, DWORD PTR _web+12
	mov	esi, DWORD PTR tv3777[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	add	ecx, DWORD PTR [eax+edx+1264]
	jmp	SHORT $LN60@one_con_po
$LN59@one_con_po:
	mov	ecx, OFFSET _nullcon
$LN60@one_con_po:
	mov	edx, DWORD PTR [ecx]

; 4785 :   for ( i = 1; i <= vmap[0] ; i++ )

	mov	eax, 1
	cmp	edx, eax
	jb	SHORT $LN38@one_con_po
	npad	5
$LL40@one_con_po:

; 4786 :     if ( vmap[i] & CON_HIT_BIT )

	test	DWORD PTR [ecx+eax*4], -2147483648	; 80000000H
	jne	SHORT $LN442@one_con_po

; 4785 :   for ( i = 1; i <= vmap[0] ; i++ )

	inc	eax
	cmp	eax, edx
	jbe	SHORT $LL40@one_con_po

; 4842 :         if ( equal_id(fe,get_next_facet(fe)) )

	jmp	SHORT $LN38@one_con_po
$LN442@one_con_po:

; 4787 :     { con = vmap[i] & ~CON_HIT_BIT;

	mov	eax, DWORD PTR [ecx+eax*4]
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR _con$[ebp], eax
$LN38@one_con_po:

; 4788 :       break;
; 4789 :     }
; 4790 : 
; 4791 : 
; 4792 :   /* figure out which way it should pop according to edges on constraints */
; 4793 :   if ( mode == POP_TO_BETTER )

	mov	eax, DWORD PTR _mode$[ebp]
	test	eax, eax
	jne	$LN25@one_con_po

; 4794 :   { for ( i = 0 ; i < 2 ; i++ )

	lea	esi, DWORD PTR _sides$[ebp]
	lea	edi, DWORD PTR _mag$[ebp]
	mov	DWORD PTR tv637[ebp], 2
	npad	1
$LL35@one_con_po:

; 4795 :       for ( j = 0 ; j < 2 ; j++ )

	mov	ebx, 2
$LL32@one_con_po:

; 4796 :         mag[i][j] = dot(sides[i][j],sides[i][j],SDIM);

	mov	edx, DWORD PTR _web+616
	push	edx
	push	esi
	push	esi
	call	_dot
	fstp	QWORD PTR [edi]
	add	esp, 12					; 0000000cH
	add	esi, 48					; 00000030H
	add	edi, 8
	dec	ebx
	jne	SHORT $LL32@one_con_po

; 4794 :   { for ( i = 0 ; i < 2 ; i++ )

	dec	DWORD PTR tv637[ebp]
	jne	SHORT $LL35@one_con_po

; 4797 :     for ( n = 0 ; n < SDIM ; n++ )

	mov	ecx, DWORD PTR _web+616
	fld	QWORD PTR _mag$[ebp+24]
	fld	QWORD PTR _mag$[ebp+16]
	xor	eax, eax
	fld	QWORD PTR _mag$[ebp+8]
	fld	QWORD PTR _mag$[ebp]
	cmp	ecx, 4
	jl	$LC459@one_con_po
	lea	edx, DWORD PTR [ecx-3]
$LN460@one_con_po:

; 4798 :     { pull[0][n] = sides[0][0][n]/mag[0][0]+sides[1][1][n]/mag[1][1]
; 4799 :                         -sides[0][1][n]/mag[0][1]-sides[1][0][n]/mag[1][0];

	fld	QWORD PTR _sides$[ebp+eax*8+144]
	fdiv	ST(0), ST(4)
	fld	QWORD PTR _sides$[ebp+eax*8]
	fdiv	ST(0), ST(2)
	fld	QWORD PTR _sides$[ebp+eax*8+48]
	fdiv	ST(0), ST(4)
	fst	QWORD PTR tv3947[ebp]
	fld	QWORD PTR _sides$[ebp+eax*8+96]
	fdiv	ST(0), ST(6)
	fstp	QWORD PTR tv3952[ebp]
	fld	ST(1)
	fadd	ST(0), ST(3)
	fsubrp	ST(1), ST(0)
	fld	QWORD PTR tv3952[ebp]
	fsub	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _pull$[ebp+eax*8]

; 4800 :       pull[1][n] = sides[0][0][n]/mag[0][0]+sides[0][1][n]/mag[0][1]
; 4801 :                         -sides[1][0][n]/mag[1][0]-sides[1][1][n]/mag[1][1];

	fld	QWORD PTR tv3947[ebp]
	faddp	ST(2), ST(0)
	fsubp	ST(1), ST(0)
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR _pull$[ebp+eax*8+48]
	fld	QWORD PTR _sides$[ebp+eax*8+152]
	fdiv	ST(0), ST(4)
	fld	QWORD PTR _sides$[ebp+eax*8+8]
	fdiv	ST(0), ST(2)
	fld	QWORD PTR _sides$[ebp+eax*8+56]
	fdiv	ST(0), ST(4)
	fst	QWORD PTR tv3973[ebp]
	fld	QWORD PTR _sides$[ebp+eax*8+104]
	fdiv	ST(0), ST(6)
	fstp	QWORD PTR tv3978[ebp]
	fld	ST(1)
	fadd	ST(0), ST(3)
	fsubrp	ST(1), ST(0)
	fld	QWORD PTR tv3978[ebp]
	fsub	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _pull$[ebp+eax*8+8]
	fld	QWORD PTR tv3973[ebp]
	faddp	ST(2), ST(0)
	fsubp	ST(1), ST(0)
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR _pull$[ebp+eax*8+56]
	fld	QWORD PTR _sides$[ebp+eax*8+160]
	fdiv	ST(0), ST(4)
	fld	QWORD PTR _sides$[ebp+eax*8+16]
	fdiv	ST(0), ST(2)
	fld	QWORD PTR _sides$[ebp+eax*8+64]
	fdiv	ST(0), ST(4)
	fst	QWORD PTR tv3999[ebp]
	fld	QWORD PTR _sides$[ebp+eax*8+112]
	fdiv	ST(0), ST(6)
	fstp	QWORD PTR tv4004[ebp]
	fld	ST(1)
	fadd	ST(0), ST(3)
	fsubrp	ST(1), ST(0)
	fld	QWORD PTR tv4004[ebp]
	fsub	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _pull$[ebp+eax*8+16]
	fld	QWORD PTR tv3999[ebp]
	faddp	ST(2), ST(0)
	fsubp	ST(1), ST(0)
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR _pull$[ebp+eax*8+64]
	fld	QWORD PTR _sides$[ebp+eax*8+168]
	fdiv	ST(0), ST(4)
	fld	QWORD PTR _sides$[ebp+eax*8+24]
	fdiv	ST(0), ST(2)
	fld	QWORD PTR _sides$[ebp+eax*8+72]
	fdiv	ST(0), ST(4)
	fst	QWORD PTR tv4025[ebp]
	fld	QWORD PTR _sides$[ebp+eax*8+120]
	fdiv	ST(0), ST(6)
	fstp	QWORD PTR tv4030[ebp]
	fld	ST(1)
	fadd	ST(0), ST(3)
	fsubrp	ST(1), ST(0)
	fld	QWORD PTR tv4030[ebp]
	fsub	ST(1), ST(0)
	fxch	ST(1)
	add	eax, 4
	fstp	QWORD PTR _pull$[ebp+eax*8-8]
	fld	QWORD PTR tv4025[ebp]
	faddp	ST(2), ST(0)
	fsubp	ST(1), ST(0)
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR _pull$[ebp+eax*8+40]
	cmp	eax, edx
	jl	$LN460@one_con_po
$LC459@one_con_po:

; 4797 :     for ( n = 0 ; n < SDIM ; n++ )

	cmp	eax, ecx
	jge	SHORT $LN498@one_con_po
$LC29@one_con_po:

; 4798 :     { pull[0][n] = sides[0][0][n]/mag[0][0]+sides[1][1][n]/mag[1][1]
; 4799 :                         -sides[0][1][n]/mag[0][1]-sides[1][0][n]/mag[1][0];

	fld	QWORD PTR _sides$[ebp+eax*8+144]
	inc	eax
	fdiv	ST(0), ST(4)
	fld	QWORD PTR _sides$[ebp+eax*8-8]
	fdiv	ST(0), ST(2)
	fld	QWORD PTR _sides$[ebp+eax*8+40]
	fdiv	ST(0), ST(4)
	fst	QWORD PTR tv3947[ebp]
	fld	QWORD PTR _sides$[ebp+eax*8+88]
	fdiv	ST(0), ST(6)
	fstp	QWORD PTR tv3952[ebp]
	fld	ST(1)
	fadd	ST(0), ST(3)
	fsubrp	ST(1), ST(0)
	fld	QWORD PTR tv3952[ebp]
	fsub	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _pull$[ebp+eax*8-8]

; 4800 :       pull[1][n] = sides[0][0][n]/mag[0][0]+sides[0][1][n]/mag[0][1]
; 4801 :                         -sides[1][0][n]/mag[1][0]-sides[1][1][n]/mag[1][1];

	fld	QWORD PTR tv3947[ebp]
	faddp	ST(2), ST(0)
	fsubp	ST(1), ST(0)
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR _pull$[ebp+eax*8+40]
	cmp	eax, ecx
	jl	SHORT $LC29@one_con_po
$LN498@one_con_po:

; 4797 :     for ( n = 0 ; n < SDIM ; n++ )

	fstp	ST(3)

; 4802 :     }
; 4803 :     if ( dot(pull[0],pull[0],SDIM) < 1.2*dot(pull[1],pull[1],SDIM) )

	push	ecx
	lea	eax, DWORD PTR _pull$[ebp]
	fstp	ST(1)
	push	eax
	fstp	ST(0)
	mov	ecx, eax
	fstp	ST(0)
	push	ecx
	call	_dot
	fstp	QWORD PTR tv5905[ebp]
	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _pull$[ebp+48]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fmul	QWORD PTR __real@3ff3333333333333
	add	esp, 24					; 00000018H
	fcomp	QWORD PTR tv5905[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	$LN461@one_con_po
$LN24@one_con_po:

; 4862 :   }
; 4863 :   else
; 4864 :   { /* create twist facet in pull-apart */
; 4865 :     vertex_id newv1,newv2;
; 4866 :     edge_id newe1,newe2,newe3;
; 4867 :     facet_id newf;
; 4868 :     facetedge_id fe,prevfe,newfe1,newfe2,newfe3,newfe4,newfe5;
; 4869 :     REAL tsides[2][MAXCOORD];
; 4870 : 
; 4871 :     /* v_id will be released from constraint and moved off constraint */
; 4872 :     newv1 = dup_vertex(v_id);

	mov	esi, DWORD PTR _v_id$GSCopy$[ebp]
	push	esi
	call	_dup_vertex
	mov	edi, eax

; 4873 :     newv2 = dup_vertex(v_id);

	push	esi
	mov	DWORD PTR _newv1$91920[ebp], edi
	call	_dup_vertex
	mov	ebx, eax

; 4874 :     newe1 = new_edge(v_id,newv1,triples[0]);

	mov	eax, DWORD PTR _triples$GSCopy$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	edi
	push	esi
	mov	DWORD PTR _newv2$91921[ebp], ebx
	call	_new_edge

; 4875 :     newe2 = new_edge(v_id,newv2,triples[0]);

	mov	edx, DWORD PTR _triples$GSCopy$[ebp]
	mov	DWORD PTR _newe1$91922[ebp], eax
	mov	eax, DWORD PTR [edx]
	push	eax
	push	ebx
	push	esi
	call	_new_edge

; 4876 :     newe3 = new_edge(newv1,newv2,NULLID);

	push	0
	push	ebx
	push	edi
	mov	DWORD PTR _newe2$91923[ebp], eax
	call	_new_edge

; 4877 :     set_e_conmap(newe3,get_v_constraint_map(v_id));  

	mov	ecx, DWORD PTR _web+104
	mov	edx, DWORD PTR _dymem
	add	esp, 44					; 0000002cH
	cmp	DWORD PTR [ecx+edx+1288], 0
	mov	esi, eax
	je	$LN63@one_con_po
	mov	eax, DWORD PTR _web+12
	mov	edi, DWORD PTR tv3777[ebp]
	mov	eax, DWORD PTR [edi+eax]
	add	eax, DWORD PTR [ecx+edx+1264]
	jmp	$LN64@one_con_po
$LN25@one_con_po:

; 4804 :       mode = POP_TO_OPEN;
; 4805 :     else
; 4806 :       mode = POP_TO_TWIST;
; 4807 :   }
; 4808 : 
; 4809 :   if ( mode == POP_TO_OPEN )

	cmp	eax, 1
	jne	$LN24@one_con_po
$LN461@one_con_po:

; 4810 :   { /* simple pull two triple edges apart */
; 4811 :   
; 4812 :     newv = dup_vertex(v_id);

	mov	ebx, DWORD PTR _v_id$GSCopy$[ebp]
	push	ebx
	call	_dup_vertex
	mov	edi, eax

; 4813 :     newe = new_edge(v_id,newv,NULLID);

	push	0
	push	edi
	push	ebx
	mov	DWORD PTR _newv$[ebp], edi
	call	_new_edge

; 4814 :     set_e_conmap(newe,get_v_constraint_map(v_id));  

	mov	edx, DWORD PTR _web+104
	mov	ecx, DWORD PTR _dymem
	add	esp, 16					; 00000010H
	cmp	DWORD PTR [edx+ecx+1288], 0
	mov	DWORD PTR _newe$[ebp], eax
	je	SHORT $LN61@one_con_po
	mov	esi, DWORD PTR tv3777[ebp]
	mov	ecx, DWORD PTR _web+12
	mov	ecx, DWORD PTR [esi+ecx]
	mov	esi, DWORD PTR _dymem
	add	ecx, DWORD PTR [edx+esi+1264]
	jmp	SHORT $LN62@one_con_po
$LN61@one_con_po:
	mov	ecx, OFFSET _nullcon
$LN62@one_con_po:
	push	ecx
	push	eax
	call	_set_e_conmap

; 4815 :   
; 4816 :     /* move stuff around second triple edge to newv */
; 4817 :     remove_vertex_edge(v_id,triples[1]);

	mov	esi, DWORD PTR tv4050[ebp]
	mov	edx, DWORD PTR [esi]
	push	edx
	push	ebx
	call	_remove_vertex_edge

; 4818 :     set_edge_tailv(triples[1],newv);

	mov	eax, DWORD PTR [esi]
	push	edi
	push	eax
	call	_set_edge_tailv

; 4819 :     start_fe = get_edge_fe(triples[1]);

	mov	esi, DWORD PTR [esi]
	mov	edx, DWORD PTR _web+124
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN93@one_con_po
$LN94@one_con_po:
	mov	eax, DWORD PTR [eax+28]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN93@one_con_po
	xor	eax, 134217728				; 08000000H
$LN93@one_con_po:

; 4820 :     for ( i = 0 ; i < 3 ; i++ )

	mov	ecx, DWORD PTR _web+460
	mov	DWORD PTR tv1702[ebp], 3
	npad	4
$LL23@one_con_po:

; 4821 :     {
; 4822 :       fe = inverse_id(get_prev_edge(start_fe));

	mov	edx, eax
	shr	edx, 27					; 0000001bH
	and	edx, 1
	mov	DWORD PTR tv3806[ebp], edx
	je	SHORT $LN98@one_con_po
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv3809[ebp], eax
	mov	eax, DWORD PTR [eax+ecx]
	mov	edi, DWORD PTR [eax+32]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN97@one_con_po
$LN98@one_con_po:
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	edx, DWORD PTR [eax+ecx]
	mov	edi, DWORD PTR [edx+28]
	mov	DWORD PTR tv3809[ebp], eax
$LN97@one_con_po:
	xor	edi, 134217728				; 08000000H

; 4823 :       for(;;)
; 4824 :       {
; 4825 :         if ( equal_id(triples[0],get_fe_edge(fe)) )

	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+ecx]
	mov	ebx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _triples$GSCopy$[ebp]
	mov	edx, edi
	and	edx, 134217728				; 08000000H
	xor	ebx, edx
	cmp	DWORD PTR [eax], ebx
	je	$LN443@one_con_po
$LL20@one_con_po:

; 4837 :           break;
; 4838 :         }
; 4839 :         e_id = get_fe_edge(fe); 
; 4840 :         remove_vertex_edge(v_id,e_id);

	mov	ecx, DWORD PTR _v_id$GSCopy$[ebp]
	push	ebx
	push	ecx
	call	_remove_vertex_edge

; 4841 :         set_edge_tailv(e_id,newv); 

	mov	edx, DWORD PTR _newv$[ebp]
	push	edx
	push	ebx
	call	_set_edge_tailv

; 4842 :         if ( equal_id(fe,get_next_facet(fe)) )

	mov	ecx, DWORD PTR _web+460
	mov	esi, DWORD PTR [esi+ecx]
	mov	edx, edi
	shr	edx, 27					; 0000001bH
	add	esp, 16					; 00000010H
	and	edx, 1
	je	SHORT $LN151@one_con_po
	mov	eax, DWORD PTR [esi+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN150@one_con_po
$LN151@one_con_po:
	mov	eax, DWORD PTR [esi+40]
$LN150@one_con_po:
	cmp	edi, eax
	je	$LN444@one_con_po

; 4843 :         { /* found valence 1 edge */
; 4844 :           break;
; 4845 :         }
; 4846 :         fe = inverse_id(get_prev_edge(get_next_facet(fe)));

	test	edx, edx
	je	SHORT $LN155@one_con_po
	mov	eax, DWORD PTR [esi+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN154@one_con_po
$LN155@one_con_po:
	mov	eax, DWORD PTR [esi+40]
$LN154@one_con_po:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN159@one_con_po
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	edi, DWORD PTR [eax+32]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN158@one_con_po
$LN159@one_con_po:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	edi, DWORD PTR [edx+28]
$LN158@one_con_po:
	xor	edi, 134217728				; 08000000H
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+ecx]
	mov	ebx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _triples$GSCopy$[ebp]
	mov	edx, edi
	and	edx, 134217728				; 08000000H
	xor	ebx, edx
	cmp	DWORD PTR [eax], ebx
	jne	$LL20@one_con_po
$LN443@one_con_po:

; 4826 :         { /* take care of splitting facet(s) between triples */
; 4827 :           facet_id f_id = inverse_id(get_fe_facet(fe));

	test	edi, 268435456				; 10000000H
	jne	SHORT $LN104@one_con_po
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN103@one_con_po
$LN104@one_con_po:
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	eax, DWORD PTR [eax+24]
	test	edi, 134217728				; 08000000H
	je	SHORT $LN103@one_con_po
	xor	eax, 134217728				; 08000000H
$LN103@one_con_po:

; 4828 :           newfe = new_facetedge(f_id,newe);

	mov	esi, DWORD PTR _newe$[ebp]
	xor	eax, 134217728				; 08000000H
	push	esi
	push	eax
	call	_new_facetedge
	add	esp, 8

; 4829 :   	      set_edge_fe(newe,newfe);

	mov	ecx, eax
	test	esi, 134217728				; 08000000H
	je	SHORT $LN107@one_con_po
	xor	ecx, 134217728				; 08000000H
$LN107@one_con_po:
	mov	edx, DWORD PTR _web+124
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+esi*4]
	mov	DWORD PTR [edx+28], ecx
	mov	ecx, DWORD PTR _global_timestamp

; 4830 :           set_next_facet(newfe,newfe);

	mov	esi, eax
	inc	ecx
	shr	esi, 28					; 0000001cH
	and	esi, 1
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
	je	SHORT $LN110@one_con_po
	mov	ecx, eax
	test	eax, 134217728				; 08000000H
	je	SHORT $LN111@one_con_po
	mov	ebx, DWORD PTR _web+460
	xor	ecx, 134217728				; 08000000H
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+edx*4]
	mov	DWORD PTR [edx+36], ecx
	jmp	SHORT $LN110@one_con_po
$LN111@one_con_po:
	mov	edx, DWORD PTR _web+460
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+40], eax
$LN110@one_con_po:

; 4831 :           set_prev_facet(newfe,newfe);

	test	esi, esi
	je	SHORT $LN118@one_con_po
	mov	edx, eax
	test	eax, 134217728				; 08000000H
	je	SHORT $LN116@one_con_po
	mov	ebx, DWORD PTR _web+460
	xor	edx, 134217728				; 08000000H
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN115@one_con_po
$LN116@one_con_po:
	mov	ecx, DWORD PTR _web+460
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+36], eax
$LN115@one_con_po:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN118@one_con_po:

; 4832 :           set_prev_edge(newfe,inverse_id(fe));

	mov	ebx, edi
	xor	ebx, 134217728				; 08000000H
	mov	DWORD PTR tv4125[ebp], ebx
	test	esi, esi
	je	SHORT $LN477@one_con_po
	test	eax, 134217728				; 08000000H
	je	SHORT $LN121@one_con_po
	mov	edx, DWORD PTR _web+460
	xor	ebx, 134217728				; 08000000H
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+32], ebx
	mov	ebx, DWORD PTR tv4125[ebp]
	jmp	SHORT $LN120@one_con_po
$LN121@one_con_po:
	mov	ecx, DWORD PTR _web+460
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+28], ebx
$LN120@one_con_po:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN477@one_con_po:

; 4833 :           set_next_edge(newfe,inverse_id(get_prev_edge(fe)));

	mov	edx, DWORD PTR _web+460
	mov	ecx, edi
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR tv3837[ebp], ecx
	je	SHORT $LN126@one_con_po
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	ecx, DWORD PTR [edi+edx]
	mov	ecx, DWORD PTR [ecx+32]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN125@one_con_po
$LN126@one_con_po:
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	ecx, DWORD PTR [edi+edx]
	mov	ecx, DWORD PTR [ecx+28]
$LN125@one_con_po:
	xor	ecx, 134217728				; 08000000H
	test	esi, esi
	je	SHORT $LN129@one_con_po
	mov	esi, eax
	test	eax, 134217728				; 08000000H
	je	SHORT $LN130@one_con_po
	xor	ecx, 134217728				; 08000000H
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+esi*4]
	mov	DWORD PTR [edx+28], ecx
	jmp	SHORT $LN521@one_con_po
$LN130@one_con_po:
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+esi*4]
	mov	DWORD PTR [edx+32], ecx
$LN521@one_con_po:
	mov	edx, DWORD PTR _web+460
$LN129@one_con_po:

; 4834 :           set_prev_edge(inverse_id(get_prev_edge(fe)),newfe);

	cmp	DWORD PTR tv3837[ebp], 0
	mov	ecx, DWORD PTR [edi+edx]
	je	SHORT $LN135@one_con_po
	mov	ecx, DWORD PTR [ecx+32]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN134@one_con_po
$LN135@one_con_po:
	mov	ecx, DWORD PTR [ecx+28]
$LN134@one_con_po:
	xor	ecx, 134217728				; 08000000H
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN478@one_con_po
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN139@one_con_po
	mov	esi, eax
	xor	esi, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [edx+32], esi
	jmp	SHORT $LN138@one_con_po
$LN139@one_con_po:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+28], eax
$LN138@one_con_po:
	mov	ecx, DWORD PTR _global_timestamp
	mov	edx, DWORD PTR _web+460
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN478@one_con_po:

; 4835 :           set_next_edge(inverse_id(fe),newfe);

	test	ebx, 268435456				; 10000000H
	je	SHORT $LN143@one_con_po
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN144@one_con_po
	mov	ecx, eax
	xor	ecx, 134217728				; 08000000H
	mov	esi, ebx
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+esi*4]
	mov	DWORD PTR [edx+28], ecx
	jmp	SHORT $LN143@one_con_po
$LN144@one_con_po:
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [edx+32], eax
$LN143@one_con_po:

; 4836 :           cross_cut(inverse_id(fe),newfe);

	push	eax
	push	ebx
	call	_cross_cut
	mov	ecx, DWORD PTR _web+460
	add	esp, 8
$LN444@one_con_po:

; 4847 :       } 
; 4848 :       start_fe = get_next_facet(start_fe);

	cmp	DWORD PTR tv3806[ebp], 0
	mov	eax, DWORD PTR tv3809[ebp]
	mov	edx, DWORD PTR [eax+ecx]
	je	SHORT $LN163@one_con_po
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN22@one_con_po
$LN163@one_con_po:
	mov	eax, DWORD PTR [edx+40]
$LN22@one_con_po:

; 4820 :     for ( i = 0 ; i < 3 ; i++ )

	dec	DWORD PTR tv1702[ebp]
	jne	$LL23@one_con_po

; 4849 :     } 
; 4850 :   
; 4851 :     /* move vertices apart a bit */
; 4852 :   
; 4853 :     x = get_coord(newv);

	mov	eax, DWORD PTR _newv$[ebp]

; 4854 :     for ( n = 0 ; n < SDIM ; n++ )

	fld	QWORD PTR __real@4018000000000000
	mov	ecx, DWORD PTR _web+12
	fld	QWORD PTR __real@4008000000000000
	mov	edx, DWORD PTR _dymem
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+104
	add	ecx, DWORD PTR [eax+edx+64]
	mov	edx, DWORD PTR _web+616
	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN14@one_con_po
	mov	esi, ecx
	lea	ecx, DWORD PTR _sides$[ebp]
	sub	esi, ecx
$LN16@one_con_po:

; 4855 :       x[n] += sides[0][0][n]/6 + sides[0][1][n]/6 + sides[1][0][n]/3 
; 4856 :              + sides[1][1][n]/3;

	fld	QWORD PTR _sides$[ebp+eax*8+48]
	lea	ecx, DWORD PTR [esi+eax*8]
	fdiv	ST(0), ST(2)
	lea	ecx, DWORD PTR _sides$[ebp+ecx]
	inc	eax
	fld	QWORD PTR _sides$[ebp+eax*8-8]
	fdiv	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _sides$[ebp+eax*8+88]
	fdiv	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _sides$[ebp+eax*8+136]
	fdiv	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR _web+616
	cmp	eax, edx
	jl	SHORT $LN16@one_con_po
$LN14@one_con_po:

; 4857 :   
; 4858 :     x = get_coord(v_id);

	mov	eax, DWORD PTR tv3777[ebp]
	mov	ecx, DWORD PTR _web+12
	mov	ecx, DWORD PTR [eax+ecx]
	mov	eax, DWORD PTR _web+104
	mov	esi, DWORD PTR _dymem
	add	ecx, DWORD PTR [eax+esi+64]

; 4859 :     for ( n = 0 ; n < SDIM ; n++ )

	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN504@one_con_po
	lea	edx, DWORD PTR _sides$[ebp]
	sub	ecx, edx
$LN13@one_con_po:

; 4860 :       x[n] += sides[0][0][n]/3 + sides[0][1][n]/3 + sides[1][0][n]/6 
; 4861 :              + sides[1][1][n]/6;

	fld	QWORD PTR _sides$[ebp+eax*8+48]
	lea	edx, DWORD PTR [ecx+eax*8]
	fdiv	ST(0), ST(1)
	lea	edx, DWORD PTR _sides$[ebp+edx]
	inc	eax
	fld	QWORD PTR _sides$[ebp+eax*8-8]
	fdiv	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _sides$[ebp+eax*8+88]
	fdiv	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _sides$[ebp+eax*8+136]
	fdiv	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN13@one_con_po
$LN504@one_con_po:

; 4973 :     for ( n = 0 ; n < SDIM ; n++ )

	fstp	ST(1)
$LN519@one_con_po:
	fstp	ST(0)
$LN1@one_con_po:

; 4975 : 
; 4976 :   }
; 4977 :   return 1;
; 4978 : 
; 4979 : } // end one_con_pop_2()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	ebx
	xor	ecx, ebp
	mov	eax, 1
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN63@one_con_po:

; 4877 :     set_e_conmap(newe3,get_v_constraint_map(v_id));  

	mov	eax, OFFSET _nullcon
$LN64@one_con_po:
	push	eax
	push	esi
	call	_set_e_conmap

; 4878 :     unset_v_constraint_map(v_id,con);

	mov	ecx, DWORD PTR _con$[ebp]
	mov	edx, DWORD PTR _v_id$GSCopy$[ebp]
	push	ecx
	push	edx
	call	_unset_v_constraint_map

; 4879 : 
; 4880 :     /* create twist facet */
; 4881 :     newf  = new_facet();

	call	_new_facet
	mov	ebx, eax

; 4882 :     newfe1 = new_facetedge(newf,newe1);

	mov	eax, DWORD PTR _newe1$91922[ebp]
	push	eax
	push	ebx
	mov	DWORD PTR _newf$91925[ebp], ebx
	call	_new_facetedge

; 4883 :     newfe2 = new_facetedge(inverse_id(newf),newe2);

	mov	ecx, DWORD PTR _newe2$91923[ebp]
	mov	DWORD PTR _newfe1$91928[ebp], eax
	mov	eax, ebx
	xor	eax, 134217728				; 08000000H
	push	ecx
	push	eax
	mov	DWORD PTR tv4212[ebp], eax
	call	_new_facetedge

; 4884 :     newfe3 = new_facetedge(newf,newe3);

	push	esi
	push	ebx
	mov	DWORD PTR _newfe2$91929[ebp], eax
	call	_new_facetedge
	add	esp, 40					; 00000028H

; 4885 : 	set_edge_fe(newe1,newfe1);

	test	DWORD PTR _newe1$91922[ebp], 134217728	; 08000000H
	mov	edi, eax
	mov	eax, DWORD PTR _newfe1$91928[ebp]
	je	SHORT $LN468@one_con_po
	xor	eax, 134217728				; 08000000H
$LN468@one_con_po:
	mov	edx, DWORD PTR _newe1$91922[ebp]
	mov	ecx, DWORD PTR _web+124
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]

; 4886 : 	set_edge_fe(newe2,newfe2);

	mov	ecx, DWORD PTR _newe2$91923[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _newfe2$91929[ebp]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN169@one_con_po
	xor	eax, 134217728				; 08000000H
$LN169@one_con_po:
	mov	edx, DWORD PTR _web+124
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax

; 4887 : 	set_edge_fe(newe3,newfe3);

	mov	eax, edi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN172@one_con_po
	xor	eax, 134217728				; 08000000H
$LN172@one_con_po:
	mov	edx, DWORD PTR _web+124
	and	esi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+esi*4]

; 4888 :     set_facet_fe(newf,newfe1);

	mov	edx, DWORD PTR _newfe1$91928[ebp]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	push	edx
	push	ebx
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	call	_set_facet_fe

; 4889 :     set_next_edge(newfe1,newfe3);

	mov	eax, DWORD PTR _newfe1$91928[ebp]
	shr	eax, 28					; 0000001cH
	add	esp, 8
	and	eax, 1
	mov	DWORD PTR tv4247[ebp], eax
	je	SHORT $LN469@one_con_po
	mov	eax, DWORD PTR _newfe1$91928[ebp]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN176@one_con_po
	mov	edx, DWORD PTR _web+460
	mov	ecx, edi
	xor	ecx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [eax+28], ecx
	jmp	SHORT $LN469@one_con_po
$LN176@one_con_po:
	mov	ecx, DWORD PTR _web+460
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx+32], edi
$LN469@one_con_po:

; 4890 :     set_next_edge(newfe2,inverse_id(newfe3));

	mov	ecx, DWORD PTR _newfe2$91929[ebp]
	mov	edx, ecx
	mov	eax, edi
	xor	eax, 134217728				; 08000000H
	shr	edx, 28					; 0000001cH
	and	edx, 1
	mov	DWORD PTR tv4262[ebp], eax
	mov	DWORD PTR tv4264[ebp], edx
	je	SHORT $LN180@one_con_po
	mov	ebx, DWORD PTR _web+460
	mov	esi, ecx
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN181@one_con_po
	xor	eax, 134217728				; 08000000H
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ebx+esi*4]
	mov	DWORD PTR [esi+28], eax
	jmp	SHORT $LN180@one_con_po
$LN181@one_con_po:
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ebx+esi*4]
	mov	DWORD PTR [esi+32], eax
$LN180@one_con_po:

; 4891 :     set_next_edge(newfe3,inverse_id(newfe2));

	mov	esi, edi
	mov	eax, ecx
	xor	eax, 134217728				; 08000000H
	shr	esi, 28					; 0000001cH
	and	esi, 1
	mov	DWORD PTR tv4279[ebp], eax
	mov	DWORD PTR tv4281[ebp], esi
	je	SHORT $LN185@one_con_po
	mov	ebx, DWORD PTR _web+460
	mov	esi, edi
	test	edi, 134217728				; 08000000H
	je	SHORT $LN186@one_con_po
	mov	edx, eax
	xor	edx, 134217728				; 08000000H
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ebx+esi*4]
	mov	DWORD PTR [esi+28], edx
	mov	edx, DWORD PTR tv4264[ebp]
	jmp	SHORT $LN522@one_con_po
$LN186@one_con_po:
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ebx+esi*4]
	mov	DWORD PTR [esi+32], eax
$LN522@one_con_po:
	mov	esi, DWORD PTR tv4281[ebp]
$LN185@one_con_po:

; 4892 :     set_prev_edge(newfe1,inverse_id(newfe2));

	cmp	DWORD PTR tv4247[ebp], 0
	je	SHORT $LN485@one_con_po
	mov	esi, DWORD PTR _newfe1$91928[ebp]
	mov	ebx, DWORD PTR _web+460
	test	esi, 134217728				; 08000000H
	je	SHORT $LN191@one_con_po
	xor	eax, 134217728				; 08000000H
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ebx+esi*4]
	mov	DWORD PTR [esi+32], eax
	jmp	SHORT $LN190@one_con_po
$LN191@one_con_po:
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ebx+esi*4]
	mov	DWORD PTR [esi+28], eax
$LN190@one_con_po:
	mov	eax, DWORD PTR _global_timestamp
	mov	esi, DWORD PTR tv4281[ebp]
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN485@one_con_po:

; 4893 :     set_prev_edge(newfe2,inverse_id(newfe1));

	mov	eax, DWORD PTR _newfe1$91928[ebp]
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR tv4297[ebp], eax
	test	edx, edx
	je	SHORT $LN490@one_con_po
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN196@one_con_po
	mov	ebx, DWORD PTR _web+460
	mov	edx, eax
	xor	edx, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	mov	DWORD PTR [ecx+32], edx
	jmp	SHORT $LN195@one_con_po
$LN196@one_con_po:
	mov	edx, DWORD PTR _web+460
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+28], eax
$LN195@one_con_po:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN490@one_con_po:

; 4894 :     set_prev_edge(newfe3,newfe1);

	test	esi, esi
	je	$LN213@one_con_po
	mov	ecx, DWORD PTR _web+460
	test	edi, 134217728				; 08000000H
	je	SHORT $LN201@one_con_po
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+32], eax
	jmp	SHORT $LN200@one_con_po
$LN201@one_con_po:
	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _newfe1$91928[ebp]
	mov	DWORD PTR [edx+28], eax
$LN200@one_con_po:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax

; 4895 : 	set_next_facet(newfe3,newfe3);

	test	esi, esi
	je	$LN213@one_con_po
	test	edi, 134217728				; 08000000H
	je	SHORT $LN206@one_con_po
	mov	edx, DWORD PTR _web+460
	mov	ecx, edi
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR tv4262[ebp]
	mov	DWORD PTR [eax+36], ecx
	jmp	SHORT $LN483@one_con_po
$LN206@one_con_po:
	mov	eax, DWORD PTR _web+460
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [ecx+40], edi
$LN483@one_con_po:

; 4896 : 	set_prev_facet(newfe3,newfe3);

	test	esi, esi
	je	SHORT $LN213@one_con_po
	test	edi, 134217728				; 08000000H
	je	SHORT $LN211@one_con_po
	mov	edx, DWORD PTR _web+460
	mov	ecx, DWORD PTR tv4262[ebp]
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+edi*4]
	mov	DWORD PTR [eax+40], ecx
	jmp	SHORT $LN210@one_con_po
$LN211@one_con_po:
	mov	eax, DWORD PTR _web+460
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [ecx+36], edi
$LN210@one_con_po:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN213@one_con_po:

; 4897 : 
; 4898 :     /* reconnect wings */
; 4899 :     remove_vertex_edge(v_id,attached[0][0]);

	mov	esi, DWORD PTR _attached$[ebp]
	mov	edi, DWORD PTR _v_id$GSCopy$[ebp]
	push	esi
	push	edi
	call	_remove_vertex_edge

; 4900 :     remove_vertex_edge(v_id,attached[0][1]);

	mov	edx, DWORD PTR _attached$[ebp+4]
	push	edx
	push	edi
	call	_remove_vertex_edge

; 4901 :     remove_vertex_edge(v_id,attached[1][0]);

	mov	eax, DWORD PTR _attached$[ebp+8]
	push	eax
	push	edi
	call	_remove_vertex_edge

; 4902 :     remove_vertex_edge(v_id,attached[1][1]);

	mov	ecx, DWORD PTR _attached$[ebp+12]
	push	ecx
	push	edi
	call	_remove_vertex_edge

; 4903 :     set_edge_tailv(attached[0][0],newv2); 

	mov	ebx, DWORD PTR _newv2$91921[ebp]
	push	ebx
	push	esi
	call	_set_edge_tailv

; 4904 :     set_edge_tailv(attached[0][1],newv1); 

	mov	edi, DWORD PTR _newv1$91920[ebp]
	mov	edx, DWORD PTR _attached$[ebp+4]
	push	edi
	push	edx
	call	_set_edge_tailv

; 4905 :     set_edge_tailv(attached[1][0],newv1); 

	mov	eax, DWORD PTR _attached$[ebp+8]
	push	edi
	push	eax
	call	_set_edge_tailv

; 4906 :     set_edge_tailv(attached[1][1],newv2); 

	mov	ecx, DWORD PTR _attached$[ebp+12]
	push	ebx
	push	ecx
	call	_set_edge_tailv

; 4907 :     
; 4908 :     fe = get_edge_fe(attached[0][0]);

	mov	eax, DWORD PTR _web+124
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	add	esp, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN216@one_con_po
	xor	ecx, ecx
	mov	DWORD PTR _fe$91926[ebp], ecx
	jmp	SHORT $LN217@one_con_po
$LN216@one_con_po:
	mov	eax, DWORD PTR [eax+28]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN215@one_con_po
	xor	eax, 134217728				; 08000000H
$LN215@one_con_po:
	mov	DWORD PTR _fe$91926[ebp], eax
	mov	ecx, eax
$LN217@one_con_po:

; 4909 :     prevfe = get_prev_edge(fe);

	mov	eax, DWORD PTR _web+460
	mov	edx, ecx
	shr	edx, 27					; 0000001bH
	and	edx, 1
	mov	DWORD PTR tv4320[ebp], edx
	mov	edi, ecx
	je	SHORT $LN220@one_con_po
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	eax, DWORD PTR [edi+eax]
	mov	esi, DWORD PTR [eax+32]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN219@one_con_po
$LN220@one_con_po:
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	eax, DWORD PTR [edi+eax]
	mov	esi, DWORD PTR [eax+28]
$LN219@one_con_po:

; 4910 :     newfe4 = new_facetedge(get_fe_facet(fe),newe2);

	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	mov	DWORD PTR tv4335[ebp], ecx
	jne	SHORT $LN224@one_con_po
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN223@one_con_po
$LN224@one_con_po:
	mov	eax, DWORD PTR [eax+24]
	test	edx, edx
	je	SHORT $LN223@one_con_po
	xor	eax, 134217728				; 08000000H
$LN223@one_con_po:
	mov	ecx, DWORD PTR _newe2$91923[ebp]
	push	ecx
	push	eax
	call	_new_facetedge
	add	esp, 8
	mov	ebx, eax
	mov	DWORD PTR _newfe4$91931[ebp], ebx

; 4911 :     set_next_edge(prevfe,newfe4);

	test	esi, 268435456				; 10000000H
	je	SHORT $LN473@one_con_po
	test	esi, 134217728				; 08000000H
	je	SHORT $LN228@one_con_po
	mov	ecx, DWORD PTR _web+460
	mov	edx, ebx
	xor	edx, 134217728				; 08000000H
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+28], edx
	jmp	SHORT $LN473@one_con_po
$LN228@one_con_po:
	mov	edx, DWORD PTR _web+460
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [eax+32], ebx
$LN473@one_con_po:

; 4912 :     set_prev_edge(newfe4,prevfe);

	mov	ecx, ebx
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	mov	DWORD PTR tv4358[ebp], ecx
	je	SHORT $LN235@one_con_po
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN233@one_con_po
	mov	eax, DWORD PTR _web+460
	xor	esi, 134217728				; 08000000H
	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [edx+32], esi
	jmp	SHORT $LN232@one_con_po
$LN233@one_con_po:
	mov	edx, DWORD PTR _web+460
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [eax+28], esi
$LN232@one_con_po:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN235@one_con_po:

; 4913 :     set_next_edge(newfe4,fe);

	test	ecx, ecx
	je	SHORT $LN237@one_con_po
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN238@one_con_po
	mov	edx, DWORD PTR _fe$91926[ebp]
	mov	esi, DWORD PTR _web+460
	xor	edx, 134217728				; 08000000H
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [eax+28], edx
	jmp	SHORT $LN237@one_con_po
$LN238@one_con_po:
	mov	eax, DWORD PTR _web+460
	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR _fe$91926[ebp]
	mov	DWORD PTR [edx+32], eax
$LN237@one_con_po:

; 4914 :     set_prev_edge(fe,newfe4);

	cmp	DWORD PTR tv4335[ebp], 0
	je	SHORT $LN487@one_con_po
	cmp	DWORD PTR tv4320[ebp], 0
	je	SHORT $LN243@one_con_po
	mov	eax, DWORD PTR _web+460
	mov	eax, DWORD PTR [edi+eax]
	mov	edx, ebx
	xor	edx, 134217728				; 08000000H
	mov	DWORD PTR [eax+32], edx
	jmp	SHORT $LN242@one_con_po
$LN243@one_con_po:
	mov	edx, DWORD PTR _web+460
	mov	eax, DWORD PTR [edi+edx]
	mov	DWORD PTR [eax+28], ebx
$LN242@one_con_po:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN487@one_con_po:

; 4915 :     set_next_facet(newfe2,newfe4);

	cmp	DWORD PTR tv4264[ebp], 0
	mov	eax, DWORD PTR _newfe2$91929[ebp]
	je	SHORT $LN247@one_con_po
	test	eax, 134217728				; 08000000H
	je	SHORT $LN248@one_con_po
	mov	edi, DWORD PTR _web+460
	mov	edx, ebx
	xor	edx, 134217728				; 08000000H
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edi+esi*4]
	mov	DWORD PTR [esi+36], edx
	jmp	SHORT $LN247@one_con_po
$LN248@one_con_po:
	mov	esi, DWORD PTR _web+460
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [edx+40], ebx
$LN247@one_con_po:

; 4916 :     set_prev_facet(newfe4,newfe2);

	test	ecx, ecx
	je	SHORT $LN471@one_con_po
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN253@one_con_po
	mov	ecx, DWORD PTR _web+460
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR tv4279[ebp]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN252@one_con_po
$LN253@one_con_po:
	mov	edx, DWORD PTR _web+460
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+36], eax
$LN252@one_con_po:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN471@one_con_po:

; 4917 :     cross_cut(newfe4,fe);

	mov	edx, DWORD PTR _fe$91926[ebp]
	push	edx
	push	ebx
	call	_cross_cut

; 4918 : 
; 4919 :     fe = get_edge_fe(attached[1][1]);

	mov	ecx, DWORD PTR _attached$[ebp+12]
	mov	edx, DWORD PTR _web+124
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN257@one_con_po
$LN258@one_con_po:
	mov	eax, DWORD PTR [eax+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN257@one_con_po
	xor	eax, 134217728				; 08000000H
$LN257@one_con_po:
	mov	DWORD PTR _fe$91926[ebp], eax

; 4920 :     prevfe = get_prev_edge(fe);

	mov	edi, DWORD PTR _fe$91926[ebp]
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR tv4320[ebp], eax
	je	SHORT $LN262@one_con_po
	mov	eax, DWORD PTR _web+460
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	eax, DWORD PTR [edi+eax]
	mov	esi, DWORD PTR [eax+32]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN261@one_con_po
$LN262@one_con_po:
	mov	ecx, DWORD PTR _web+460
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	eax, DWORD PTR [edi+ecx]
	mov	esi, DWORD PTR [eax+28]
$LN261@one_con_po:

; 4921 :     newfe5 = new_facetedge(get_fe_facet(fe),newe2);

	mov	ecx, DWORD PTR _fe$91926[ebp]
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	mov	DWORD PTR tv4335[ebp], ecx
	jne	SHORT $LN266@one_con_po
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN265@one_con_po
$LN266@one_con_po:
	cmp	DWORD PTR tv4320[ebp], 0
	mov	eax, DWORD PTR [eax+24]
	je	SHORT $LN265@one_con_po
	xor	eax, 134217728				; 08000000H
$LN265@one_con_po:
	mov	edx, DWORD PTR _newe2$91923[ebp]
	push	edx
	push	eax
	call	_new_facetedge
	add	esp, 8

; 4922 :     set_next_edge(prevfe,newfe5);

	test	esi, 268435456				; 10000000H
	je	SHORT $LN472@one_con_po
	test	esi, 134217728				; 08000000H
	je	SHORT $LN270@one_con_po
	mov	ebx, DWORD PTR _web+460
	mov	ecx, eax
	xor	ecx, 134217728				; 08000000H
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+edx*4]
	mov	ebx, DWORD PTR _newfe4$91931[ebp]
	mov	DWORD PTR [edx+28], ecx
	jmp	SHORT $LN472@one_con_po
$LN270@one_con_po:
	mov	edx, DWORD PTR _web+460
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+32], eax
$LN472@one_con_po:

; 4923 :     set_prev_edge(newfe5,prevfe);

	mov	edx, eax
	shr	edx, 28					; 0000001cH
	and	edx, 1
	mov	DWORD PTR tv4402[ebp], edx
	je	SHORT $LN277@one_con_po
	test	eax, 134217728				; 08000000H
	je	SHORT $LN275@one_con_po
	mov	ecx, DWORD PTR _web+460
	xor	esi, 134217728				; 08000000H
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+32], esi
	jmp	SHORT $LN274@one_con_po
$LN275@one_con_po:
	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+28], esi
$LN274@one_con_po:
	mov	ecx, DWORD PTR _global_timestamp
	mov	edx, DWORD PTR tv4402[ebp]
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN277@one_con_po:

; 4924 :     set_next_edge(newfe5,fe);

	test	edx, edx
	je	SHORT $LN474@one_con_po
	mov	esi, DWORD PTR _web+460
	mov	ecx, eax
	test	eax, 134217728				; 08000000H
	je	SHORT $LN280@one_con_po
	mov	edx, DWORD PTR _fe$91926[ebp]
	xor	edx, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [ecx+28], edx
	mov	edx, DWORD PTR tv4402[ebp]
	jmp	SHORT $LN474@one_con_po
$LN280@one_con_po:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	esi, DWORD PTR _fe$91926[ebp]
	mov	DWORD PTR [ecx+32], esi
$LN474@one_con_po:

; 4925 :     set_prev_edge(fe,newfe5);

	cmp	DWORD PTR tv4335[ebp], 0
	je	SHORT $LN287@one_con_po
	cmp	DWORD PTR tv4320[ebp], 0
	je	SHORT $LN285@one_con_po
	mov	esi, DWORD PTR _web+460
	mov	esi, DWORD PTR [edi+esi]
	mov	ecx, eax
	xor	ecx, 134217728				; 08000000H
	mov	DWORD PTR [esi+32], ecx
	jmp	SHORT $LN284@one_con_po
$LN285@one_con_po:
	mov	ecx, DWORD PTR _web+460
	mov	ecx, DWORD PTR [edi+ecx]
	mov	DWORD PTR [ecx+28], eax
$LN284@one_con_po:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN287@one_con_po:

; 4926 :     set_next_facet(newfe5,newfe2);

	test	edx, edx
	je	SHORT $LN475@one_con_po
	mov	esi, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	test	eax, 134217728				; 08000000H
	je	SHORT $LN290@one_con_po
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	esi, DWORD PTR tv4279[ebp]
	mov	DWORD PTR [ecx+36], esi
$LN475@one_con_po:
	mov	ecx, DWORD PTR _newfe2$91929[ebp]
$LN289@one_con_po:

; 4927 :     set_prev_facet(newfe2,newfe5);

	cmp	DWORD PTR tv4264[ebp], 0
	je	SHORT $LN481@one_con_po
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN295@one_con_po
	mov	edi, DWORD PTR _web+460
	mov	esi, eax
	xor	esi, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR [ecx+40], esi
	jmp	SHORT $LN294@one_con_po

; 4926 :     set_next_facet(newfe5,newfe2);

$LN290@one_con_po:
	mov	esi, DWORD PTR [esi+ecx*4]
	mov	ecx, DWORD PTR _newfe2$91929[ebp]
	mov	DWORD PTR [esi+40], ecx
	jmp	SHORT $LN289@one_con_po

; 4927 :     set_prev_facet(newfe2,newfe5);

$LN295@one_con_po:
	mov	esi, DWORD PTR _web+460
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [ecx+36], eax
$LN294@one_con_po:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN481@one_con_po:

; 4928 :     set_next_facet(newfe4,newfe5);

	cmp	DWORD PTR tv4358[ebp], 0
	je	SHORT $LN299@one_con_po
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN300@one_con_po
	mov	edi, DWORD PTR _web+460
	mov	ecx, eax
	xor	ecx, 134217728				; 08000000H
	mov	esi, ebx
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edi+esi*4]
	mov	DWORD PTR [esi+36], ecx
	jmp	SHORT $LN299@one_con_po
$LN300@one_con_po:
	mov	esi, DWORD PTR _web+460
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [ecx+40], eax
$LN299@one_con_po:

; 4929 :     set_prev_facet(newfe5,newfe4);

	test	edx, edx
	je	SHORT $LN307@one_con_po
	test	eax, 134217728				; 08000000H
	je	SHORT $LN305@one_con_po
	mov	ecx, DWORD PTR _web+460
	xor	ebx, 134217728				; 08000000H
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+40], ebx
	jmp	SHORT $LN304@one_con_po
$LN305@one_con_po:
	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+36], ebx
$LN304@one_con_po:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN307@one_con_po:

; 4930 :     cross_cut(newfe5,fe);

	mov	edx, DWORD PTR _fe$91926[ebp]
	push	edx
	push	eax
	call	_cross_cut

; 4931 : 
; 4932 :     fe = get_edge_fe(attached[1][0]);

	mov	ecx, DWORD PTR _attached$[ebp+8]
	mov	edx, DWORD PTR _web+124
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN310@one_con_po
	xor	ebx, ebx
	mov	DWORD PTR _fe$91926[ebp], ebx
	jmp	SHORT $LN311@one_con_po
$LN310@one_con_po:
	mov	eax, DWORD PTR [eax+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN309@one_con_po
	xor	eax, 134217728				; 08000000H
$LN309@one_con_po:
	mov	ebx, eax
	mov	DWORD PTR _fe$91926[ebp], eax
$LN311@one_con_po:

; 4933 :     prevfe = get_prev_edge(fe);

	mov	eax, ebx
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR tv4320[ebp], eax
	mov	edi, ebx
	je	SHORT $LN314@one_con_po
	mov	eax, DWORD PTR _web+460
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	eax, DWORD PTR [edi+eax]
	mov	esi, DWORD PTR [eax+32]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN313@one_con_po
$LN314@one_con_po:
	mov	ecx, DWORD PTR _web+460
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	eax, DWORD PTR [edi+ecx]
	mov	esi, DWORD PTR [eax+28]
$LN313@one_con_po:

; 4934 :     newfe4 = new_facetedge(get_fe_facet(fe),newe1);

	mov	ecx, ebx
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	mov	DWORD PTR tv4335[ebp], ecx
	jne	SHORT $LN318@one_con_po
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN317@one_con_po
$LN318@one_con_po:
	cmp	DWORD PTR tv4320[ebp], 0
	mov	eax, DWORD PTR [eax+24]
	je	SHORT $LN317@one_con_po
	xor	eax, 134217728				; 08000000H
$LN317@one_con_po:
	mov	edx, DWORD PTR _newe1$91922[ebp]
	push	edx
	push	eax
	call	_new_facetedge
	add	esp, 8
	mov	DWORD PTR _newfe4$91931[ebp], eax

; 4935 :     set_next_edge(prevfe,newfe4);

	test	esi, 268435456				; 10000000H
	je	SHORT $LN476@one_con_po
	test	esi, 134217728				; 08000000H
	je	SHORT $LN322@one_con_po
	mov	ebx, DWORD PTR _web+460
	mov	ecx, eax
	xor	ecx, 134217728				; 08000000H
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+edx*4]
	mov	ebx, DWORD PTR _fe$91926[ebp]
	mov	DWORD PTR [edx+28], ecx
	jmp	SHORT $LN476@one_con_po
$LN322@one_con_po:
	mov	edx, DWORD PTR _web+460
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+32], eax
$LN476@one_con_po:

; 4936 :     set_prev_edge(newfe4,prevfe);

	mov	edx, eax
	shr	edx, 28					; 0000001cH
	and	edx, 1
	mov	DWORD PTR tv4358[ebp], edx
	je	SHORT $LN329@one_con_po
	test	eax, 134217728				; 08000000H
	je	SHORT $LN327@one_con_po
	mov	ecx, DWORD PTR _web+460
	xor	esi, 134217728				; 08000000H
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+32], esi
	jmp	SHORT $LN326@one_con_po
$LN327@one_con_po:
	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+28], esi
$LN326@one_con_po:
	mov	ecx, DWORD PTR _global_timestamp
	mov	edx, DWORD PTR tv4358[ebp]
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN329@one_con_po:

; 4937 :     set_next_edge(newfe4,fe);

	test	edx, edx
	je	SHORT $LN479@one_con_po
	mov	esi, DWORD PTR _web+460
	mov	ecx, eax
	test	eax, 134217728				; 08000000H
	je	SHORT $LN332@one_con_po
	mov	edx, ebx
	xor	edx, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [ecx+28], edx
	mov	edx, DWORD PTR tv4358[ebp]
	jmp	SHORT $LN479@one_con_po
$LN332@one_con_po:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [ecx+32], ebx
$LN479@one_con_po:

; 4938 :     set_prev_edge(fe,newfe4);

	cmp	DWORD PTR tv4335[ebp], 0
	je	SHORT $LN339@one_con_po
	cmp	DWORD PTR tv4320[ebp], 0
	je	SHORT $LN337@one_con_po
	mov	esi, DWORD PTR _web+460
	mov	esi, DWORD PTR [edi+esi]
	mov	ecx, eax
	xor	ecx, 134217728				; 08000000H
	mov	DWORD PTR [esi+32], ecx
	jmp	SHORT $LN336@one_con_po
$LN337@one_con_po:
	mov	ecx, DWORD PTR _web+460
	mov	ecx, DWORD PTR [edi+ecx]
	mov	DWORD PTR [ecx+28], eax
$LN336@one_con_po:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN339@one_con_po:

; 4939 :     set_next_facet(newfe1,newfe4);

	cmp	DWORD PTR tv4247[ebp], 0
	mov	ecx, DWORD PTR _newfe1$91928[ebp]
	je	SHORT $LN341@one_con_po
	mov	edi, DWORD PTR _web+460
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN342@one_con_po
	mov	esi, eax
	xor	esi, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR [ecx+36], esi
	mov	ecx, DWORD PTR _newfe1$91928[ebp]
	jmp	SHORT $LN341@one_con_po
$LN342@one_con_po:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edi+esi*4]
	mov	DWORD PTR [esi+40], eax
$LN341@one_con_po:

; 4940 :     set_prev_facet(newfe4,newfe1);

	test	edx, edx
	je	SHORT $LN349@one_con_po
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	test	eax, 134217728				; 08000000H
	je	SHORT $LN347@one_con_po
	mov	ecx, DWORD PTR _web+460
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR tv4297[ebp]
	mov	DWORD PTR [edx+40], ecx
	jmp	SHORT $LN346@one_con_po
$LN347@one_con_po:
	mov	esi, DWORD PTR _web+460
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [edx+36], ecx
$LN346@one_con_po:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN349@one_con_po:

; 4941 :     cross_cut(newfe4,fe);

	push	ebx
	push	eax
	call	_cross_cut

; 4942 : 
; 4943 :     fe = get_edge_fe(attached[0][1]);

	mov	ecx, DWORD PTR _attached$[ebp+4]
	mov	edx, DWORD PTR _web+124
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN351@one_con_po
$LN352@one_con_po:
	mov	eax, DWORD PTR [eax+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN351@one_con_po
	xor	eax, 134217728				; 08000000H
$LN351@one_con_po:
	mov	DWORD PTR _fe$91926[ebp], eax

; 4944 :     prevfe = get_prev_edge(fe);

	mov	ebx, DWORD PTR _fe$91926[ebp]
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR tv4320[ebp], eax
	je	SHORT $LN356@one_con_po
	mov	eax, DWORD PTR _web+460
	and	ebx, 134217727				; 07ffffffH
	add	ebx, ebx
	add	ebx, ebx
	mov	eax, DWORD PTR [ebx+eax]
	mov	edi, DWORD PTR [eax+32]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN355@one_con_po
$LN356@one_con_po:
	mov	ecx, DWORD PTR _web+460
	and	ebx, 134217727				; 07ffffffH
	add	ebx, ebx
	add	ebx, ebx
	mov	eax, DWORD PTR [ebx+ecx]
	mov	edi, DWORD PTR [eax+28]
$LN355@one_con_po:

; 4945 :     newfe5 = new_facetedge(get_fe_facet(fe),newe1);

	mov	ecx, DWORD PTR _fe$91926[ebp]
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	mov	DWORD PTR tv4335[ebp], ecx
	jne	SHORT $LN360@one_con_po
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN359@one_con_po
$LN360@one_con_po:
	cmp	DWORD PTR tv4320[ebp], 0
	mov	eax, DWORD PTR [eax+24]
	je	SHORT $LN359@one_con_po
	xor	eax, 134217728				; 08000000H
$LN359@one_con_po:
	mov	edx, DWORD PTR _newe1$91922[ebp]
	push	edx
	push	eax
	call	_new_facetedge
	add	esp, 8
	mov	esi, eax

; 4946 :     set_next_edge(prevfe,newfe5);

	test	edi, 268435456				; 10000000H
	je	SHORT $LN464@one_con_po
	test	edi, 134217728				; 08000000H
	je	SHORT $LN364@one_con_po
	mov	edx, DWORD PTR _web+460
	xor	eax, 134217728				; 08000000H
	mov	ecx, edi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+28], eax
	jmp	SHORT $LN464@one_con_po
$LN364@one_con_po:
	mov	eax, DWORD PTR _web+460
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [ecx+32], esi
$LN464@one_con_po:

; 4947 :     set_prev_edge(newfe5,prevfe);

	mov	ecx, esi
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	mov	DWORD PTR tv4402[ebp], ecx
	je	SHORT $LN371@one_con_po
	test	esi, 134217728				; 08000000H
	je	SHORT $LN369@one_con_po
	mov	eax, DWORD PTR _web+460
	xor	edi, 134217728				; 08000000H
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [edx+32], edi
	jmp	SHORT $LN368@one_con_po
$LN369@one_con_po:
	mov	edx, DWORD PTR _web+460
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [eax+28], edi
$LN368@one_con_po:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN371@one_con_po:

; 4948 :     set_next_edge(newfe5,fe);

	test	ecx, ecx
	je	SHORT $LN373@one_con_po
	test	esi, 134217728				; 08000000H
	je	SHORT $LN374@one_con_po
	mov	edx, DWORD PTR _fe$91926[ebp]
	mov	edi, DWORD PTR _web+460
	xor	edx, 134217728				; 08000000H
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	DWORD PTR [eax+28], edx
	jmp	SHORT $LN373@one_con_po
$LN374@one_con_po:
	mov	eax, DWORD PTR _web+460
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR _fe$91926[ebp]
	mov	DWORD PTR [edx+32], eax
$LN373@one_con_po:

; 4949 :     set_prev_edge(fe,newfe5);

	cmp	DWORD PTR tv4335[ebp], 0
	je	SHORT $LN488@one_con_po
	cmp	DWORD PTR tv4320[ebp], 0
	je	SHORT $LN379@one_con_po
	mov	eax, DWORD PTR _web+460
	mov	eax, DWORD PTR [ebx+eax]
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	mov	DWORD PTR [eax+32], edx
	jmp	SHORT $LN378@one_con_po
$LN379@one_con_po:
	mov	edx, DWORD PTR _web+460
	mov	eax, DWORD PTR [ebx+edx]
	mov	DWORD PTR [eax+28], esi
$LN378@one_con_po:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN488@one_con_po:

; 4950 :     set_next_facet(newfe5,newfe1);

	test	ecx, ecx
	je	SHORT $LN465@one_con_po
	mov	eax, DWORD PTR _web+460
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN384@one_con_po
	mov	eax, DWORD PTR tv4297[ebp]
	mov	DWORD PTR [edx+36], eax
$LN465@one_con_po:
	mov	eax, DWORD PTR _newfe1$91928[ebp]
$LN383@one_con_po:

; 4951 :     set_prev_facet(newfe1,newfe5);

	cmp	DWORD PTR tv4247[ebp], 0
	je	SHORT $LN491@one_con_po
	test	eax, 134217728				; 08000000H
	je	SHORT $LN389@one_con_po
	mov	edi, DWORD PTR _web+460
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	DWORD PTR [eax+40], edx
	jmp	SHORT $LN388@one_con_po

; 4950 :     set_next_facet(newfe5,newfe1);

$LN384@one_con_po:
	mov	eax, DWORD PTR _newfe1$91928[ebp]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN383@one_con_po

; 4951 :     set_prev_facet(newfe1,newfe5);

$LN389@one_con_po:
	mov	edx, DWORD PTR _web+460
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [eax+36], esi
$LN388@one_con_po:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN491@one_con_po:

; 4952 :     set_next_facet(newfe4,newfe5);

	cmp	DWORD PTR tv4358[ebp], 0
	mov	eax, DWORD PTR _newfe4$91931[ebp]
	je	SHORT $LN393@one_con_po
	test	eax, 134217728				; 08000000H
	je	SHORT $LN394@one_con_po
	mov	ebx, DWORD PTR _web+460
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	mov	edi, eax
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR [edi+36], edx
	jmp	SHORT $LN393@one_con_po
$LN394@one_con_po:
	mov	edi, DWORD PTR _web+460
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+edx*4]
	mov	DWORD PTR [edx+40], esi
$LN393@one_con_po:

; 4953 :     set_prev_facet(newfe5,newfe4);

	test	ecx, ecx
	je	SHORT $LN401@one_con_po
	test	esi, 134217728				; 08000000H
	je	SHORT $LN399@one_con_po
	mov	edx, DWORD PTR _web+460
	xor	eax, 134217728				; 08000000H
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+40], eax
	jmp	SHORT $LN398@one_con_po
$LN399@one_con_po:
	mov	ecx, DWORD PTR _web+460
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+36], eax
$LN398@one_con_po:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN401@one_con_po:

; 4954 :     cross_cut(newfe5,fe);

	mov	eax, DWORD PTR _fe$91926[ebp]
	push	eax
	push	esi
	call	_cross_cut
	add	esp, 8

; 4955 : 
; 4956 :     set_facet_body(newf,get_facet_body(inverse_id(get_fe_facet(newfe5))));

	cmp	DWORD PTR tv4402[ebp], 0
	jne	SHORT $LN404@one_con_po
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN403@one_con_po
$LN404@one_con_po:
	mov	edx, DWORD PTR _web+460
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR [eax+24]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN403@one_con_po
	xor	eax, 134217728				; 08000000H
$LN403@one_con_po:
	xor	eax, 134217728				; 08000000H
	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN410@one_con_po
	xor	eax, eax
	jmp	SHORT $LN407@one_con_po
$LN410@one_con_po:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN409@one_con_po
	xor	eax, eax
	jmp	SHORT $LN407@one_con_po
$LN409@one_con_po:
	mov	ecx, DWORD PTR _web+236
	test	eax, 134217728				; 08000000H
	je	SHORT $LN408@one_con_po
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax+4]
	jmp	SHORT $LN407@one_con_po
$LN408@one_con_po:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax]
$LN407@one_con_po:
	mov	ecx, DWORD PTR _newf$91925[ebp]
	push	eax
	push	ecx
	call	_set_facet_body
	add	esp, 8

; 4957 :     set_facet_body(inverse_id(newf),get_facet_body(get_fe_facet(newfe4)));

	cmp	DWORD PTR tv4358[ebp], 0
	jne	SHORT $LN414@one_con_po
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN413@one_con_po
$LN414@one_con_po:
	mov	ecx, DWORD PTR _newfe4$91931[ebp]
	mov	eax, DWORD PTR _web+460
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [edx+24]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN413@one_con_po
	xor	eax, 134217728				; 08000000H
$LN413@one_con_po:
	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN420@one_con_po
	xor	eax, eax
	jmp	SHORT $LN417@one_con_po
$LN420@one_con_po:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN419@one_con_po
	xor	eax, eax
	jmp	SHORT $LN417@one_con_po
$LN419@one_con_po:
	mov	ecx, DWORD PTR _web+236
	test	eax, 134217728				; 08000000H
	je	SHORT $LN418@one_con_po
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax+4]
	jmp	SHORT $LN417@one_con_po
$LN418@one_con_po:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax]
$LN417@one_con_po:
	mov	ecx, DWORD PTR tv4212[ebp]
	push	eax
	push	ecx
	call	_set_facet_body

; 4958 : 
; 4959 :     /* move vertices */
; 4960 :     x = get_coord(newv1);
; 4961 :     for ( n = 0 ; n < SDIM ; n++ )

	fld	QWORD PTR __real@4018000000000000
	mov	eax, DWORD PTR _newv1$91920[ebp]
	fld	QWORD PTR __real@4008000000000000
	mov	edx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR _web+104
	mov	edx, DWORD PTR _dymem
	add	ecx, DWORD PTR [eax+edx+64]
	mov	edx, DWORD PTR _web+616
	add	esp, 8
	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN467@one_con_po
	lea	edx, DWORD PTR _sides$[ebp+48]
	sub	ecx, edx
$LN9@one_con_po:

; 4962 :       x[n] += sides[1][0][n]/3 + sides[0][1][n]/3 + sides[0][0][n]/6 
; 4963 :              + sides[1][1][n]/6;

	fld	QWORD PTR _sides$[ebp+eax*8+96]
	lea	edx, DWORD PTR [ecx+eax*8]
	fdiv	ST(0), ST(1)
	lea	edx, DWORD PTR _sides$[ebp+edx+48]
	inc	eax
	fld	QWORD PTR _sides$[ebp+eax*8+40]
	fdiv	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _sides$[ebp+eax*8-8]
	fdiv	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _sides$[ebp+eax*8+136]
	fdiv	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR _web+616
	cmp	eax, edx
	jl	SHORT $LN9@one_con_po
$LN467@one_con_po:

; 4964 :   
; 4965 :     x = get_coord(newv2);

	mov	eax, DWORD PTR _newv2$91921[ebp]
	mov	ecx, DWORD PTR _web+12
	mov	esi, DWORD PTR _dymem
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+104
	add	ecx, DWORD PTR [eax+esi+64]

; 4966 :     for ( n = 0 ; n < SDIM ; n++ )

	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN517@one_con_po
	lea	edx, DWORD PTR _sides$[ebp+48]
	sub	ecx, edx
$LN6@one_con_po:

; 4967 :       x[n] += sides[1][0][n]/6 + sides[0][1][n]/6 + sides[0][0][n]/3 
; 4968 :              + sides[1][1][n]/3;

	fld	QWORD PTR _sides$[ebp+eax*8+96]
	lea	edx, DWORD PTR [ecx+eax*8]
	fdiv	ST(0), ST(2)
	lea	edx, DWORD PTR _sides$[ebp+edx+48]
	inc	eax
	fld	QWORD PTR _sides$[ebp+eax*8+40]
	fdiv	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _sides$[ebp+eax*8-8]
	fdiv	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _sides$[ebp+eax*8+136]
	fdiv	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN6@one_con_po
$LN517@one_con_po:

; 4969 : 
; 4970 :     x = get_coord(v_id);

	mov	ecx, DWORD PTR _web+12
	fstp	ST(1)
	mov	eax, DWORD PTR tv3777[ebp]
	fstp	ST(0)
	mov	esi, DWORD PTR [eax+ecx]
	mov	edx, DWORD PTR _web+104
	mov	eax, DWORD PTR _dymem
	add	esi, DWORD PTR [edx+eax+64]

; 4971 :     get_edge_side(triples[0],tsides[0]);

	mov	edx, DWORD PTR _triples$GSCopy$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR _tsides$91933[ebp]
	push	ecx
	push	eax
	call	_get_edge_side

; 4972 :     get_edge_side(triples[1],tsides[1]);

	mov	edx, DWORD PTR tv4050[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR _tsides$91933[ebp+48]
	push	ecx
	push	eax
	call	_get_edge_side

; 4973 :     for ( n = 0 ; n < SDIM ; n++ )

	xor	ecx, ecx
	add	esp, 16					; 00000010H
	cmp	DWORD PTR _web+616, ecx
	jle	$LN1@one_con_po
	fld	QWORD PTR __real@3fc3333333333333
	lea	edx, DWORD PTR _tsides$91933[ebp]
	mov	eax, esi
	sub	edx, esi
$LN3@one_con_po:

; 4974 :       x[n] += 0.15*tsides[0][n] + 0.15*tsides[1][n];

	fld	QWORD PTR [edx+eax+48]
	inc	ecx
	fmul	ST(0), ST(1)
	add	eax, 8
	fld	QWORD PTR [edx+eax-8]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fadd	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	cmp	ecx, DWORD PTR _web+616
	jl	SHORT $LN3@one_con_po

; 4973 :     for ( n = 0 ; n < SDIM ; n++ )

	jmp	$LN519@one_con_po
_one_con_pop_2 ENDP
_TEXT	ENDS
PUBLIC	__real@3fd3333333333333
PUBLIC	__real@3fe6666666666666
PUBLIC	_con_edges$GSCopy$
PUBLIC	_triples$GSCopy$
PUBLIC	_tripcount$GSCopy$
PUBLIC	_v_id$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_one_con_pop_3
;	COMDAT __real@3fd3333333333333
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@3fd3333333333333 DQ 03fd3333333333333r	; 0.3
CONST	ENDS
;	COMDAT __real@3fe6666666666666
CONST	SEGMENT
__real@3fe6666666666666 DQ 03fe6666666666666r	; 0.7
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\popfilm.c
CONST	ENDS
;	COMDAT _one_con_pop_3
_TEXT	SEGMENT
tv4554 = -2260						; size = 4
tv4018 = -2260						; size = 4
tv4013 = -2256						; size = 4
tv2836 = -2256						; size = 4
tv2351 = -2256						; size = 4
tv2584 = -2252						; size = 4
tv2305 = -2252						; size = 4
tv4978 = -2248						; size = 4
tv4473 = -2248						; size = 4
_newv$92077 = -2248					; size = 4
_next_fe$92031 = -2248					; size = 4
tv4504 = -2244						; size = 4
_v_id$GSCopy$ = -2244					; size = 4
tv4023 = -2240						; size = 4
tv3404 = -2240						; size = 4
tv970 = -2240						; size = 4
tv298 = -2240						; size = 4
tv4566 = -2236						; size = 4
_fe$92079 = -2236					; size = 4
_fe$92032 = -2236					; size = 4
_con$ = -2236						; size = 4
_triples$GSCopy$ = -2232				; size = 4
_m$ = -2232						; size = 4
tv2821 = -2228						; size = 4
tv2644 = -2228						; size = 4
tv1655 = -2228						; size = 4
$T99413 = -2228						; size = 4
$T99334 = -2228						; size = 4
_tripcount$GSCopy$ = -2224				; size = 4
tv3995 = -2220						; size = 4
tv3396 = -2220						; size = 4
_newe$92078 = -2220					; size = 4
tv4591 = -2216						; size = 4
tv4545 = -2216						; size = 4
tv4437 = -2216						; size = 4
tv2679 = -2216						; size = 4
_con_edges$GSCopy$ = -2216				; size = 4
_found_triple$92049 = -2216				; size = 4
_sides$ = -2212						; size = 960
_tsides$ = -1252					; size = 960
_mag$ = -292						; size = 160
_newe$92030 = -212					; size = 80
_newfe$92081 = -132					; size = 80
_newv$92029 = -132					; size = 80
_net$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_v_id$ = 8						; size = 4
_tripcount$ = 12					; size = 4
_triples$ = 16						; size = 4
_con_edges$ = 20					; size = 4
_mode$ = 24						; size = 4
_one_con_pop_3 PROC					; COMDAT

; 5002 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2260				; 000008d4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _v_id$[ebp]

; 5003 :   edge_id e_id;
; 5004 :   unsigned int i;
; 5005 :   REAL sides[MAXTRIPS][MAXCOORD];
; 5006 :   REAL tsides[MAXTRIPS][MAXCOORD];
; 5007 :   REAL mag[MAXTRIPS];
; 5008 :   REAL net[MAXCOORD];
; 5009 :   REAL *x;
; 5010 :   conmap_t con=0,*vmap;  /* which constraint involved */

	mov	ecx, DWORD PTR _tripcount$[ebp]
	mov	edx, DWORD PTR _triples$[ebp]

; 5116 :             cross_cut(newfe,get_next_edge(newfe));

	mov	DWORD PTR _v_id$GSCopy$[ebp], eax
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR _tripcount$GSCopy$[ebp], ecx
	mov	ecx, DWORD PTR _web+12
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR tv2305[ebp], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR _triples$GSCopy$[ebp], edx
	push	esi
	mov	esi, DWORD PTR _con_edges$[ebp]
	and	eax, 64					; 00000040H
	xor	edx, edx
	or	eax, edx
	mov	DWORD PTR _con_edges$GSCopy$[ebp], esi
	mov	DWORD PTR _con$[ebp], 0
	je	SHORT $LN70@one_con_po@2

; 5011 :   int j,n,m;
; 5012 :   facetedge_id fe;
; 5013 :   
; 5014 :   if ( get_vattr(v_id) & FIXED ) return 0;

	xor	eax, eax
	pop	esi

; 5176 :     }
; 5177 : 
; 5178 :   }
; 5179 :   return 1;
; 5180 : 
; 5181 : } // end one_con_pop_3()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN70@one_con_po@2:

; 5015 :   
; 5016 :    /* see which constraint involved */
; 5017 :   vmap = get_v_constraint_map(v_id);

	mov	eax, DWORD PTR _web+104
	mov	edx, DWORD PTR _dymem
	cmp	DWORD PTR [eax+edx+1288], 0
	je	SHORT $LN73@one_con_po@2
	mov	edx, DWORD PTR [eax+edx+1264]
	add	edx, ecx
	jmp	SHORT $LN74@one_con_po@2
$LN73@one_con_po@2:
	mov	edx, OFFSET _nullcon
$LN74@one_con_po@2:
	mov	ecx, DWORD PTR [edx]

; 5018 :   for ( i = 1; i <= vmap[0] ; i++ )

	mov	eax, 1
	cmp	ecx, eax
	jb	SHORT $LN67@one_con_po@2
$LL69@one_con_po@2:

; 5019 :     if ( vmap[i] & CON_HIT_BIT )

	test	DWORD PTR [edx+eax*4], -2147483648	; 80000000H
	jne	SHORT $LN312@one_con_po@2

; 5018 :   for ( i = 1; i <= vmap[0] ; i++ )

	inc	eax
	cmp	eax, ecx
	jbe	SHORT $LL69@one_con_po@2

; 5019 :     if ( vmap[i] & CON_HIT_BIT )

	jmp	SHORT $LN67@one_con_po@2
$LN312@one_con_po@2:

; 5020 :     { con = vmap[i] & ~CON_HIT_BIT;

	mov	eax, DWORD PTR [edx+eax*4]
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR _con$[ebp], eax
$LN67@one_con_po@2:

; 5021 :       break;
; 5022 :     }
; 5023 : 
; 5024 :   /* get triple edges and constrained edges lined up */
; 5025 :   fe = get_edge_fe(con_edges[0]);

	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR _web+124
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	test	eax, eax
	je	SHORT $LN77@one_con_po@2
$LN78@one_con_po@2:
	mov	eax, DWORD PTR [eax+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN77@one_con_po@2
	xor	eax, 134217728				; 08000000H
$LN77@one_con_po@2:

; 5026 :   fe = inverse_id(get_prev_edge(fe));

	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN82@one_con_po@2
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR [edx+32]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN81@one_con_po@2
$LN82@one_con_po@2:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR [eax+28]
$LN81@one_con_po@2:

; 5028 :     fe = inverse_id(get_prev_edge(get_next_facet(fe)));

	push	ebx
	push	edi
$LN97@one_con_po@2:

; 5027 :   while ( equal_id(get_next_facet(fe),get_prev_facet(fe)) )

	xor	edx, 134217728				; 08000000H
	mov	ebx, edx
	mov	eax, edx
	shr	ebx, 27					; 0000001bH
	and	eax, 134217727				; 07ffffffH
	and	ebx, 1
	mov	eax, DWORD PTR [ecx+eax*4]
	je	SHORT $LN86@one_con_po@2
	mov	esi, DWORD PTR [eax+36]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN85@one_con_po@2
$LN86@one_con_po@2:
	mov	esi, DWORD PTR [eax+40]
$LN85@one_con_po@2:
	test	ebx, ebx
	je	SHORT $LN90@one_con_po@2
	mov	edi, DWORD PTR [eax+40]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN89@one_con_po@2
$LN90@one_con_po@2:
	mov	edi, DWORD PTR [eax+36]
$LN89@one_con_po@2:
	cmp	esi, edi
	jne	SHORT $LN64@one_con_po@2

; 5028 :     fe = inverse_id(get_prev_edge(get_next_facet(fe)));

	test	ebx, ebx
	je	SHORT $LN94@one_con_po@2
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN93@one_con_po@2
$LN94@one_con_po@2:
	mov	eax, DWORD PTR [eax+40]
$LN93@one_con_po@2:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN98@one_con_po@2
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR [edx+32]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN97@one_con_po@2
$LN98@one_con_po@2:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR [eax+28]
	jmp	SHORT $LN97@one_con_po@2
$LN64@one_con_po@2:

; 5029 :   fe = get_prev_facet(fe);

	test	edx, 134217728				; 08000000H
	je	SHORT $LN102@one_con_po@2
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	eax, DWORD PTR [edx+40]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN101@one_con_po@2
$LN102@one_con_po@2:
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	eax, DWORD PTR [eax+36]
$LN101@one_con_po@2:

; 5030 :   for ( m = 0 ; m < tripcount ; m++ )

	cmp	DWORD PTR _tripcount$GSCopy$[ebp], 0
	jle	$LN61@one_con_po@2
	mov	esi, DWORD PTR _con_edges$GSCopy$[ebp]
	mov	edx, DWORD PTR _triples$GSCopy$[ebp]
	sub	edx, esi
	mov	DWORD PTR tv3396[ebp], esi
	mov	esi, DWORD PTR _tripcount$GSCopy$[ebp]
	mov	DWORD PTR tv3404[ebp], edx
	mov	DWORD PTR tv1655[ebp], esi
	jmp	SHORT $LN63@one_con_po@2
	npad	6
$LL345@one_con_po@2:
	mov	edx, DWORD PTR tv3404[ebp]
$LN63@one_con_po@2:

; 5031 :   { facetedge_id ffe;
; 5032 :     triples[m] = get_fe_edge(fe);

	mov	ebx, eax
	and	ebx, 134217727				; 07ffffffH
	add	ebx, ebx
	mov	esi, eax
	add	ebx, ebx
	mov	ecx, DWORD PTR [ebx+ecx]
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR tv3396[ebp]

; 5033 :     /* seek down to corresponding constrained edge */
; 5034 :     ffe = get_next_facet(fe);

	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR [edx+ecx], esi
	mov	esi, DWORD PTR _web+460
	mov	DWORD PTR tv2351[ebp], eax
	je	SHORT $LN108@one_con_po@2
	mov	edx, DWORD PTR [ebx+esi]
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN107@one_con_po@2
$LN108@one_con_po@2:
	mov	eax, DWORD PTR [ebx+esi]
	mov	eax, DWORD PTR [eax+40]
$LN107@one_con_po@2:

; 5035 :     ffe = inverse_id(get_prev_edge(ffe));

	test	eax, 134217728				; 08000000H
	je	SHORT $LN112@one_con_po@2
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [ecx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN111@one_con_po@2
$LN112@one_con_po@2:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [edx+28]
$LN111@one_con_po@2:
	xor	eax, 134217728				; 08000000H

; 5036 :     while ( !equal_id(get_next_facet(ffe),ffe) )

	mov	edi, eax
	shr	edi, 27					; 0000001bH
	and	edi, 1
	je	SHORT $LN116@one_con_po@2
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	edx, DWORD PTR [ecx+36]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN115@one_con_po@2
$LN116@one_con_po@2:
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+edx*4]
	mov	edx, DWORD PTR [ecx+40]
$LN115@one_con_po@2:
	cmp	edx, eax
	je	SHORT $LN59@one_con_po@2

; 5037 :       ffe = inverse_id(get_prev_edge(get_next_facet(ffe)));

	test	edi, edi
	je	SHORT $LN120@one_con_po@2
	mov	eax, DWORD PTR [ecx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN119@one_con_po@2
$LN120@one_con_po@2:
	mov	eax, DWORD PTR [ecx+40]
$LN119@one_con_po@2:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN124@one_con_po@2
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [eax+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN111@one_con_po@2
$LN124@one_con_po@2:
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [ecx+28]
	jmp	SHORT $LN111@one_con_po@2
$LN59@one_con_po@2:

; 5038 :     con_edges[m] = get_fe_edge(ffe);

	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+edx*4]
	mov	edx, DWORD PTR tv3396[ebp]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]

; 5039 :     /* now over to next triple */
; 5040 :     fe = get_prev_facet(fe);

	cmp	DWORD PTR tv2351[ebp], 0
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _web+460
	je	SHORT $LN130@one_con_po@2
	mov	eax, DWORD PTR [ebx+ecx]
	mov	eax, DWORD PTR [eax+40]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN129@one_con_po@2
$LN130@one_con_po@2:
	mov	edx, DWORD PTR [ebx+ecx]
	mov	eax, DWORD PTR [edx+36]
$LN129@one_con_po@2:

; 5041 :     fe = inverse_id(get_prev_edge(fe));

	test	eax, 134217728				; 08000000H
	je	SHORT $LN134@one_con_po@2
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN133@one_con_po@2
$LN134@one_con_po@2:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]
$LN133@one_con_po@2:
	xor	eax, 134217728				; 08000000H

; 5042 :     while ( equal_id(get_next_facet(fe),get_prev_facet(fe)) )

	mov	ebx, eax
	mov	edx, eax
	shr	ebx, 27					; 0000001bH
	and	edx, 134217727				; 07ffffffH
	and	ebx, 1
	mov	edx, DWORD PTR [ecx+edx*4]
	je	SHORT $LN138@one_con_po@2
	mov	esi, DWORD PTR [edx+36]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN137@one_con_po@2
$LN138@one_con_po@2:
	mov	esi, DWORD PTR [edx+40]
$LN137@one_con_po@2:
	test	ebx, ebx
	je	SHORT $LN142@one_con_po@2
	mov	edi, DWORD PTR [edx+40]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN141@one_con_po@2
$LN142@one_con_po@2:
	mov	edi, DWORD PTR [edx+36]
$LN141@one_con_po@2:
	cmp	esi, edi
	jne	SHORT $LN62@one_con_po@2

; 5043 :       fe = inverse_id(get_prev_edge(get_next_facet(fe)));

	test	ebx, ebx
	je	SHORT $LN146@one_con_po@2
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN129@one_con_po@2
$LN146@one_con_po@2:
	mov	eax, DWORD PTR [edx+40]
	jmp	SHORT $LN129@one_con_po@2
$LN62@one_con_po@2:

; 5030 :   for ( m = 0 ; m < tripcount ; m++ )

	add	DWORD PTR tv3396[ebp], 4
	dec	DWORD PTR tv1655[ebp]
	jne	$LL345@one_con_po@2
$LN61@one_con_po@2:

; 5044 :   }
; 5045 : 
; 5046 :   for ( m = 0  ; m < tripcount ; m++ )

	mov	ebx, DWORD PTR _tripcount$GSCopy$[ebp]
	xor	esi, esi
	test	ebx, ebx
	jle	SHORT $LN346@one_con_po@2
	lea	edi, DWORD PTR _tsides$[ebp]
	npad	7
$LL56@one_con_po@2:

; 5047 :     get_edge_side(triples[m],tsides[m]);

	mov	eax, DWORD PTR _triples$GSCopy$[ebp]
	mov	ecx, DWORD PTR [eax+esi*4]
	push	edi
	push	ecx
	call	_get_edge_side
	inc	esi
	add	esp, 8
	add	edi, 48					; 00000030H
	cmp	esi, ebx
	jl	SHORT $LL56@one_con_po@2

; 5044 :   }
; 5045 : 
; 5046 :   for ( m = 0  ; m < tripcount ; m++ )

	mov	ecx, DWORD PTR _web+460
$LN346@one_con_po@2:

; 5048 : 
; 5049 :   for ( m = 0  ; m < tripcount ; m++ )

	xor	esi, esi
	test	ebx, ebx
	jle	SHORT $LN352@one_con_po@2
	xor	edi, edi
	npad	7
$LL53@one_con_po@2:

; 5050 :   { get_edge_side(con_edges[m],sides[m]);

	mov	eax, DWORD PTR _con_edges$GSCopy$[ebp]
	mov	ecx, DWORD PTR [eax+esi*4]
	lea	edx, DWORD PTR _sides$[ebp+edi]
	push	edx
	push	ecx
	call	_get_edge_side

; 5051 :     mag[m] = sqrt(dot(tsides[m],tsides[m],SDIM));

	mov	edx, DWORD PTR _web+616
	lea	eax, DWORD PTR _tsides$[ebp+edi]
	push	edx
	push	eax
	push	eax
	call	_dot
	add	esp, 20					; 00000014H
	call	__CIsqrt
	fstp	QWORD PTR _mag$[ebp+esi*8]
	inc	esi
	add	edi, 48					; 00000030H
	cmp	esi, ebx
	jl	SHORT $LL53@one_con_po@2

; 5048 : 
; 5049 :   for ( m = 0  ; m < tripcount ; m++ )

	mov	ecx, DWORD PTR _web+460
$LN352@one_con_po@2:

; 5052 :   }
; 5053 : 
; 5054 :   /* figure out which way it should pop according to edges on constraints */
; 5055 :   if ( mode == POP_TO_BETTER )

	mov	eax, DWORD PTR _mode$[ebp]
	test	eax, eax
	jne	$LN42@one_con_po@2

; 5056 :   { for ( n = 0 ; n < SDIM ; n++ )

	mov	edi, DWORD PTR _web+616
	xor	esi, esi
	test	edi, edi
	jle	$LN348@one_con_po@2
	fldz
$LN49@one_con_po@2:

; 5057 :       for ( m = 0, net[n] = 0.0 ; m < tripcount ; m++ )

	xor	eax, eax
	fst	QWORD PTR _net$[ebp+esi*8]
	cmp	ebx, 4
	jl	SHORT $LC331@one_con_po@2

; 5056 :   { for ( n = 0 ; n < SDIM ; n++ )

	lea	edx, DWORD PTR [ebx-3]
	lea	ecx, DWORD PTR _tsides$[ebp+esi*8+48]

; 5057 :       for ( m = 0, net[n] = 0.0 ; m < tripcount ; m++ )

$LN332@one_con_po@2:

; 5058 :          net[n] += tsides[m][n]/mag[m];

	fld	QWORD PTR [ecx-48]
	add	eax, 4
	fdiv	QWORD PTR _mag$[ebp+eax*8-32]
	add	ecx, 192				; 000000c0H
	fadd	QWORD PTR _net$[ebp+esi*8]
	fld	QWORD PTR [ecx-192]
	fdiv	QWORD PTR _mag$[ebp+eax*8-24]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-144]
	fdiv	QWORD PTR _mag$[ebp+eax*8-16]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-96]
	fdiv	QWORD PTR _mag$[ebp+eax*8-8]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _net$[ebp+esi*8]
	cmp	eax, edx
	jl	SHORT $LN332@one_con_po@2
$LC331@one_con_po@2:

; 5057 :       for ( m = 0, net[n] = 0.0 ; m < tripcount ; m++ )

	cmp	eax, ebx
	jge	SHORT $LN48@one_con_po@2
	lea	ecx, DWORD PTR [eax+eax*2]
	lea	ecx, DWORD PTR [esi+ecx*2]
	lea	ecx, DWORD PTR _tsides$[ebp+ecx*8]
$LC46@one_con_po@2:

; 5058 :          net[n] += tsides[m][n]/mag[m];

	fld	QWORD PTR [ecx]
	inc	eax
	fdiv	QWORD PTR _mag$[ebp+eax*8-8]
	add	ecx, 48					; 00000030H
	fadd	QWORD PTR _net$[ebp+esi*8]
	fstp	QWORD PTR _net$[ebp+esi*8]
	cmp	eax, ebx
	jl	SHORT $LC46@one_con_po@2
$LN48@one_con_po@2:

; 5056 :   { for ( n = 0 ; n < SDIM ; n++ )

	inc	esi
	cmp	esi, edi
	jl	$LN49@one_con_po@2
	fstp	ST(0)
$LN348@one_con_po@2:

; 5059 :     if ( sqrt(dot(net,net,SDIM)) < 0.7*tripcount )

	lea	edx, DWORD PTR _net$[ebp]
	push	edi
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fild	DWORD PTR _tripcount$GSCopy$[ebp]
	fmul	QWORD PTR __real@3fe6666666666666
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H

; 5060 :        mode = POP_TO_OPEN;
; 5061 :     else 

	je	$LN340@one_con_po@2
$LN350@one_con_po@2:

; 5139 :   { /* create pulled-out triple edge */
; 5140 :     vertex_id newv;
; 5141 :     edge_id newe;
; 5142 :     facetedge_id fe,prevfe,newfe[MAXTRIPS];
; 5143 : 
; 5144 :     /* v_id will be released from constraint and moved off constraint */
; 5145 :     newv = dup_vertex(v_id);

	mov	esi, DWORD PTR _v_id$GSCopy$[ebp]
	push	esi
	call	_dup_vertex

; 5146 :     newe = new_edge(v_id,newv,triples[0]);

	mov	ecx, DWORD PTR _triples$GSCopy$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	eax
	push	esi
	mov	DWORD PTR _newv$92077[ebp], eax
	call	_new_edge
	mov	DWORD PTR _newe$92078[ebp], eax

; 5147 :     unset_v_constraint_map(v_id,con);

	mov	eax, DWORD PTR _con$[ebp]
	push	eax
	push	esi
	call	_unset_v_constraint_map
	add	esp, 24					; 00000018H

; 5148 : 
; 5149 :     /* reconnect wings */
; 5150 :     for ( m = 0 ; m < tripcount ; m++ )

	test	ebx, ebx
	jle	$LN347@one_con_po@2
	mov	ecx, DWORD PTR _con_edges$GSCopy$[ebp]
	lea	eax, DWORD PTR _newfe$92081[ebp]
	sub	eax, ecx
	mov	DWORD PTR tv4545[ebp], ecx
	mov	DWORD PTR tv4554[ebp], eax
	mov	DWORD PTR tv970[ebp], ebx
	npad	9
$LL12@one_con_po@2:

; 5151 :     { remove_vertex_edge(v_id,con_edges[m]);

	mov	esi, DWORD PTR tv4545[ebp]
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR _v_id$GSCopy$[ebp]
	push	ecx
	push	edx
	call	_remove_vertex_edge

; 5152 :       set_edge_tailv(con_edges[m],newv); 

	mov	eax, DWORD PTR _newv$92077[ebp]
	mov	ecx, DWORD PTR [esi]
	push	eax
	push	ecx
	call	_set_edge_tailv

; 5153 :       fe = get_edge_fe(con_edges[m]);

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR _web+124
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	add	esp, 16					; 00000010H
	test	ecx, ecx
	jne	$LN247@one_con_po@2
	xor	ebx, ebx
	mov	DWORD PTR _fe$92079[ebp], ebx
	jmp	$LN248@one_con_po@2
$LN42@one_con_po@2:

; 5062 :        mode = POP_TO_TRIPLE;
; 5063 :   }
; 5064 : 
; 5065 :   /* do the pop */
; 5066 :   if ( mode == POP_TO_OPEN )

	cmp	eax, 1
	jne	$LN350@one_con_po@2
	jmp	SHORT $LN349@one_con_po@2
$LN340@one_con_po@2:
	mov	ecx, DWORD PTR _web+460
$LN349@one_con_po@2:

; 5067 :   { /* make open triangle */
; 5068 :     vertex_id newv[MAXTRIPS];
; 5069 :     edge_id newe[MAXTRIPS];
; 5070 :     facetedge_id next_fe,fe,start_fe,newfe;
; 5071 :   
; 5072 :     newv[0] = v_id;

	mov	edi, DWORD PTR _v_id$GSCopy$[ebp]

; 5073 :     for ( m = 1 ; m < tripcount ; m++ )

	mov	esi, 1
	mov	DWORD PTR _newv$92029[ebp], edi
	cmp	ebx, esi
	jle	SHORT $LN38@one_con_po@2
$LL40@one_con_po@2:

; 5074 :       newv[m] = dup_vertex(v_id);

	push	edi
	call	_dup_vertex
	mov	DWORD PTR _newv$92029[ebp+esi*4], eax
	inc	esi
	add	esp, 4
	cmp	esi, ebx
	jl	SHORT $LL40@one_con_po@2

; 5073 :     for ( m = 1 ; m < tripcount ; m++ )

	mov	ecx, DWORD PTR _web+460
$LN38@one_con_po@2:

; 5075 :     for ( m = 0 ; m < tripcount ; m++ )

	xor	esi, esi
	test	ebx, ebx
	jle	SHORT $LN35@one_con_po@2
$LL37@one_con_po@2:

; 5076 :     { newe[m] = new_edge(newv[m],newv[(m+1)%tripcount],NULLID);

	lea	edi, DWORD PTR [esi+1]
	mov	eax, edi
	cdq
	idiv	ebx
	push	0
	mov	ecx, DWORD PTR _newv$92029[ebp+edx*4]
	mov	edx, DWORD PTR _newv$92029[ebp+esi*4]
	push	ecx
	push	edx
	call	_new_edge

; 5077 :       set_e_conmap(newe[m],get_v_constraint_map(v_id));  

	mov	edx, DWORD PTR _web+104
	mov	DWORD PTR _newe$92030[ebp+esi*4], eax
	mov	esi, DWORD PTR _dymem
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR [edx+esi+1288], 0
	je	SHORT $LN75@one_con_po@2
	mov	ebx, DWORD PTR tv2305[ebp]
	mov	ecx, DWORD PTR _web+12
	mov	ecx, DWORD PTR [ebx+ecx]
	add	ecx, DWORD PTR [edx+esi+1264]
	mov	ebx, DWORD PTR _tripcount$GSCopy$[ebp]
	jmp	SHORT $LN76@one_con_po@2
$LN75@one_con_po@2:
	mov	ecx, OFFSET _nullcon
$LN76@one_con_po@2:
	push	ecx
	push	eax
	call	_set_e_conmap
	mov	esi, edi
	add	esp, 8
	cmp	esi, ebx
	jl	SHORT $LL37@one_con_po@2

; 5075 :     for ( m = 0 ; m < tripcount ; m++ )

	mov	ecx, DWORD PTR _web+460
$LN35@one_con_po@2:

; 5078 :     }
; 5079 :   
; 5080 :     /* move stuff around last two constraint edges to new vertices */
; 5081 :     /* and putting in new edges */
; 5082 :     for ( m = 0 ; m < tripcount ; m++ )

	mov	DWORD PTR _m$[ebp], 0
	test	ebx, ebx
	jle	$LN356@one_con_po@2
	mov	eax, DWORD PTR _con_edges$GSCopy$[ebp]
	lea	edx, DWORD PTR _newe$92030[ebp]
	sub	edx, eax
	mov	DWORD PTR tv4013[ebp], edx
	lea	edx, DWORD PTR _newv$92029[ebp+4]
	sub	edx, eax
	mov	DWORD PTR tv4018[ebp], edx
	lea	edx, DWORD PTR _newv$92029[ebp]
	sub	edx, eax
	mov	DWORD PTR tv3995[ebp], eax
	mov	DWORD PTR tv4023[ebp], edx
	npad	13
$LL34@one_con_po@2:

; 5083 :     { int found_triple;
; 5084 :       if ( m > 0 )

	cmp	DWORD PTR _m$[ebp], 0

; 5085 :       { remove_vertex_edge(v_id,con_edges[m]);

	mov	esi, DWORD PTR tv3995[ebp]
	jle	SHORT $LN31@one_con_po@2
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR _v_id$GSCopy$[ebp]
	push	edx
	push	eax
	call	_remove_vertex_edge

; 5086 :         set_edge_tailv(con_edges[m],newv[m]);

	mov	ecx, DWORD PTR tv4023[ebp]
	mov	edx, DWORD PTR [ecx+esi]
	mov	eax, DWORD PTR [esi]
	push	edx
	push	eax
	call	_set_edge_tailv
	mov	ecx, DWORD PTR _web+460
	add	esp, 16					; 00000010H
$LN31@one_con_po@2:

; 5087 :       }
; 5088 :       start_fe = get_edge_fe(con_edges[m]);

	mov	edx, DWORD PTR [esi]
	mov	esi, DWORD PTR _web+124
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	test	eax, eax
	je	SHORT $LN153@one_con_po@2
$LN154@one_con_po@2:
	mov	eax, DWORD PTR [eax+28]
	test	edx, 134217728				; 08000000H
	je	SHORT $LN153@one_con_po@2
	xor	eax, 134217728				; 08000000H
$LN153@one_con_po@2:

; 5089 :       fe = inverse_id(get_prev_edge(start_fe));

	test	eax, 134217728				; 08000000H
	je	SHORT $LN158@one_con_po@2
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	edi, DWORD PTR [edx+32]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN157@one_con_po@2
$LN158@one_con_po@2:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	edi, DWORD PTR [eax+28]
$LN157@one_con_po@2:
	xor	edi, 134217728				; 08000000H
	mov	DWORD PTR _fe$92032[ebp], edi

; 5090 :       for( found_triple = 0 ; !found_triple ; fe = next_fe )

	mov	DWORD PTR _found_triple$92049[ebp], 0
	npad	6
$LL30@one_con_po@2:

; 5091 :         {
; 5092 :           next_fe = inverse_id(get_prev_edge(get_next_facet(fe))); 

	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	mov	ebx, edi
	add	esi, esi
	add	esi, esi
	mov	edx, DWORD PTR [esi+ecx]
	shr	ebx, 27					; 0000001bH
	and	ebx, 1
	mov	DWORD PTR tv2584[ebp], esi
	je	SHORT $LN162@one_con_po@2
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN161@one_con_po@2
$LN162@one_con_po@2:
	mov	eax, DWORD PTR [edx+40]
$LN161@one_con_po@2:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN166@one_con_po@2
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN165@one_con_po@2
$LN166@one_con_po@2:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+28]
$LN165@one_con_po@2:
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR _next_fe$92031[ebp], eax

; 5093 :           if ( !equal_id(get_next_facet(fe),get_prev_facet(fe)) )

	test	ebx, ebx
	je	SHORT $LN170@one_con_po@2
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN402@one_con_po@2
$LN170@one_con_po@2:
	mov	eax, DWORD PTR [edx+40]
$LN402@one_con_po@2:
	mov	DWORD PTR $T99334[ebp], eax
	test	ebx, ebx
	je	SHORT $LN174@one_con_po@2
	mov	eax, DWORD PTR [edx+40]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN173@one_con_po@2
$LN174@one_con_po@2:
	mov	eax, DWORD PTR [edx+36]
$LN173@one_con_po@2:
	cmp	DWORD PTR $T99334[ebp], eax
	je	$LN344@one_con_po@2

; 5094 :           { /* take care of splitting facet(s) between triples */
; 5095 :             facet_id f_id;
; 5096 :             facetedge_id ffe,prevfe;
; 5097 :             ffe = get_next_facet(fe);

	test	ebx, ebx
	je	SHORT $LN178@one_con_po@2
	mov	edi, DWORD PTR [edx+36]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN177@one_con_po@2
$LN178@one_con_po@2:
	mov	edi, DWORD PTR [edx+40]
$LN177@one_con_po@2:

; 5098 :             f_id = inverse_id(get_fe_facet(ffe));

	test	edi, 268435456				; 10000000H
	jne	SHORT $LN182@one_con_po@2
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN181@one_con_po@2
$LN182@one_con_po@2:
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	eax, DWORD PTR [eax+24]
	test	edi, 134217728				; 08000000H
	je	SHORT $LN181@one_con_po@2
	xor	eax, 134217728				; 08000000H
$LN181@one_con_po@2:

; 5099 :             newfe = new_facetedge(f_id,newe[m]);

	mov	ecx, DWORD PTR tv4013[ebp]
	mov	edx, DWORD PTR tv3995[ebp]
	mov	esi, DWORD PTR [ecx+edx]
	xor	eax, 134217728				; 08000000H
	push	esi
	push	eax
	call	_new_facetedge
	add	esp, 8
	mov	ebx, eax

; 5100 :     		set_edge_fe(newe[m],newfe);

	test	esi, 134217728				; 08000000H
	je	SHORT $LN342@one_con_po@2
	xor	eax, 134217728				; 08000000H
$LN342@one_con_po@2:
	mov	ecx, DWORD PTR _web+124
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	DWORD PTR [edx+28], eax
	mov	eax, DWORD PTR _global_timestamp

; 5101 :     		set_next_facet(newfe,newfe);

	mov	esi, ebx
	inc	eax
	shr	esi, 28					; 0000001cH
	and	esi, 1
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	DWORD PTR tv2644[ebp], esi
	je	SHORT $LN188@one_con_po@2
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN189@one_con_po@2
	mov	edx, DWORD PTR _web+460
	mov	eax, ebx
	xor	eax, 134217728				; 08000000H
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+36], eax
	jmp	SHORT $LN188@one_con_po@2
$LN189@one_con_po@2:
	mov	eax, DWORD PTR _web+460
	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [ecx+40], ebx
$LN188@one_con_po@2:

; 5102 :     		set_prev_facet(newfe,newfe);

	test	esi, esi
	je	SHORT $LN196@one_con_po@2
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN194@one_con_po@2
	mov	ecx, DWORD PTR _web+460
	mov	edx, ebx
	xor	edx, 134217728				; 08000000H
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+40], edx
	jmp	SHORT $LN193@one_con_po@2
$LN194@one_con_po@2:
	mov	edx, DWORD PTR _web+460
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [eax+36], ebx
$LN193@one_con_po@2:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN196@one_con_po@2:

; 5103 :             prevfe = inverse_id(get_prev_edge(ffe));

	mov	ecx, DWORD PTR _web+460
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+edx*4]
	test	edi, 134217728				; 08000000H
	je	SHORT $LN199@one_con_po@2
	mov	eax, DWORD PTR [eax+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN198@one_con_po@2
$LN199@one_con_po@2:
	mov	eax, DWORD PTR [eax+28]
$LN198@one_con_po@2:

; 5104 :             set_prev_edge(newfe,inverse_id(ffe));

	mov	edx, edi
	xor	eax, 134217728				; 08000000H
	xor	edx, 134217728				; 08000000H
	test	esi, esi
	je	$LN207@one_con_po@2
	mov	edi, ebx
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN203@one_con_po@2
	mov	esi, edx
	xor	esi, 134217728				; 08000000H
	and	edi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	DWORD PTR [ecx+32], esi
	mov	esi, DWORD PTR tv2644[ebp]
	jmp	SHORT $LN202@one_con_po@2
$LN203@one_con_po@2:
	and	edi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	DWORD PTR [ecx+28], edx
$LN202@one_con_po@2:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
	mov	ecx, DWORD PTR _web+460

; 5105 :             set_next_edge(newfe,prevfe);

	test	esi, esi
	je	SHORT $LN207@one_con_po@2
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN208@one_con_po@2
	mov	esi, eax
	xor	esi, 134217728				; 08000000H
	mov	edi, ebx
	and	edi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	DWORD PTR [ecx+28], esi
	jmp	SHORT $LN404@one_con_po@2
$LN208@one_con_po@2:
	mov	esi, ebx
	and	esi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+esi*4]
	mov	DWORD PTR [ecx+32], eax
$LN404@one_con_po@2:
	mov	ecx, DWORD PTR _web+460
$LN207@one_con_po@2:

; 5106 :             set_prev_edge(prevfe,newfe);

	test	eax, 268435456				; 10000000H
	je	SHORT $LN215@one_con_po@2
	test	eax, 134217728				; 08000000H
	je	SHORT $LN213@one_con_po@2
	mov	esi, ebx
	xor	esi, 134217728				; 08000000H
	mov	edi, eax
	and	edi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	DWORD PTR [ecx+32], esi
	jmp	SHORT $LN212@one_con_po@2
$LN213@one_con_po@2:
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+esi*4]
	mov	DWORD PTR [ecx+28], ebx
$LN212@one_con_po@2:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
	mov	ecx, DWORD PTR _web+460
$LN215@one_con_po@2:

; 5107 :             set_next_edge(inverse_id(ffe),newfe);

	test	edx, 268435456				; 10000000H
	je	SHORT $LN217@one_con_po@2
	test	edx, 134217728				; 08000000H
	je	SHORT $LN218@one_con_po@2
	mov	esi, ebx
	xor	esi, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+28], esi
	jmp	SHORT $LN405@one_con_po@2
$LN218@one_con_po@2:
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [ecx+32], ebx
$LN405@one_con_po@2:
	mov	ecx, DWORD PTR _web+460
$LN217@one_con_po@2:

; 5108 :             /* continue on, resetting endpoints on crossing face */
; 5109 :             if ( m != tripcount-1 )

	mov	edx, DWORD PTR _tripcount$GSCopy$[ebp]
	dec	edx
	cmp	DWORD PTR _m$[ebp], edx
	je	$LN341@one_con_po@2
$LL25@one_con_po@2:

; 5110 :             while (equal_id(get_next_facet(prevfe),get_prev_facet(prevfe)))

	mov	edx, eax
	shr	edx, 27					; 0000001bH
	and	edx, 1
	mov	DWORD PTR tv2679[ebp], edx
	mov	esi, eax
	je	SHORT $LN223@one_con_po@2
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	edx, DWORD PTR [esi+ecx]
	mov	edi, DWORD PTR [edx+36]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN406@one_con_po@2
$LN223@one_con_po@2:
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	edx, DWORD PTR [esi+ecx]
	mov	edi, DWORD PTR [edx+40]
$LN406@one_con_po@2:
	cmp	DWORD PTR tv2679[ebp], 0
	mov	DWORD PTR $T99413[ebp], edi
	je	SHORT $LN227@one_con_po@2
	mov	edi, DWORD PTR [edx+40]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN226@one_con_po@2
$LN227@one_con_po@2:
	mov	edi, DWORD PTR [edx+36]
$LN226@one_con_po@2:
	cmp	DWORD PTR $T99413[ebp], edi
	jne	$LN341@one_con_po@2

; 5111 :             { e_id = get_fe_edge(prevfe);

	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]
	mov	edi, eax

; 5112 :               remove_vertex_edge(v_id,e_id);

	mov	eax, DWORD PTR _v_id$GSCopy$[ebp]
	push	edi
	push	eax
	call	_remove_vertex_edge

; 5113 :               set_edge_tailv(e_id,newv[m+1]); 

	mov	ecx, DWORD PTR tv4018[ebp]
	mov	edx, DWORD PTR tv3995[ebp]
	mov	eax, DWORD PTR [ecx+edx]
	push	eax
	push	edi
	call	_set_edge_tailv

; 5114 :               prevfe = inverse_id(get_prev_edge(get_next_facet(prevfe)));

	mov	ecx, DWORD PTR _web+460
	add	esp, 16					; 00000010H
	cmp	DWORD PTR tv2679[ebp], 0
	je	SHORT $LN233@one_con_po@2
	mov	edx, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN232@one_con_po@2
$LN233@one_con_po@2:
	mov	eax, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [eax+40]
$LN232@one_con_po@2:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN237@one_con_po@2
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	xor	eax, 134217728				; 08000000H

; 5115 :             } 

	jmp	$LL25@one_con_po@2

; 5114 :               prevfe = inverse_id(get_prev_edge(get_next_facet(prevfe)));

$LN237@one_con_po@2:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H

; 5115 :             } 

	jmp	$LL25@one_con_po@2
$LN341@one_con_po@2:

; 5116 :             cross_cut(newfe,get_next_edge(newfe));

	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+edx*4]
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN241@one_con_po@2
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN240@one_con_po@2
$LN241@one_con_po@2:
	mov	eax, DWORD PTR [eax+32]
$LN240@one_con_po@2:
	push	eax
	push	ebx
	call	_cross_cut

; 5117 :             found_triple = 1;

	mov	ecx, DWORD PTR _web+460
	mov	edi, DWORD PTR _fe$92032[ebp]
	mov	esi, DWORD PTR tv2584[ebp]
	add	esp, 8
	mov	DWORD PTR _found_triple$92049[ebp], 1
$LN344@one_con_po@2:

; 5118 :           }
; 5119 :           e_id = get_fe_edge(fe); 

	mov	edx, DWORD PTR [esi+ecx]

; 5120 :           if ( m > 0 )

	mov	esi, DWORD PTR _m$[ebp]
	and	edi, 134217728				; 08000000H
	xor	edi, DWORD PTR [edx+20]
	test	esi, esi
	jle	SHORT $LN29@one_con_po@2

; 5121 :           { remove_vertex_edge(v_id,e_id);

	mov	eax, DWORD PTR _v_id$GSCopy$[ebp]
	push	edi
	push	eax
	call	_remove_vertex_edge

; 5122 :             set_edge_tailv(e_id,newv[m]); 

	mov	ecx, DWORD PTR tv4023[ebp]
	mov	edx, DWORD PTR tv3995[ebp]
	mov	eax, DWORD PTR [ecx+edx]
	push	eax
	push	edi
	call	_set_edge_tailv
	mov	ecx, DWORD PTR _web+460
	add	esp, 16					; 00000010H
$LN29@one_con_po@2:

; 5090 :       for( found_triple = 0 ; !found_triple ; fe = next_fe )

	cmp	DWORD PTR _found_triple$92049[ebp], 0
	mov	edi, DWORD PTR _next_fe$92031[ebp]
	mov	DWORD PTR _fe$92032[ebp], edi
	je	$LL30@one_con_po@2

; 5078 :     }
; 5079 :   
; 5080 :     /* move stuff around last two constraint edges to new vertices */
; 5081 :     /* and putting in new edges */
; 5082 :     for ( m = 0 ; m < tripcount ; m++ )

	add	DWORD PTR tv3995[ebp], 4
	inc	esi
	mov	DWORD PTR _m$[ebp], esi
	cmp	esi, DWORD PTR _tripcount$GSCopy$[ebp]
	jl	$LL34@one_con_po@2
$LN356@one_con_po@2:

; 5123 :           }
; 5124 :         } 
; 5125 :        
; 5126 :     }
; 5127 :   
; 5128 :     /* move vertices apart a bit */
; 5129 :     for ( m = 0 ; m < tripcount ; m++ )

	mov	edi, DWORD PTR _tripcount$GSCopy$[ebp]
	mov	DWORD PTR _m$[ebp], 0
	test	edi, edi
	jle	$LN4@one_con_po@2
	fld	QWORD PTR __real@3fe0000000000000
	lea	ecx, DWORD PTR _sides$[ebp]
	mov	DWORD PTR tv4504[ebp], ecx
	mov	ecx, DWORD PTR _web+616
$LN358@one_con_po@2:

; 5130 :     { x = get_coord(newv[m]);

	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _newv$92029[ebp+edx*4]
	mov	edx, DWORD PTR _web+12
	mov	esi, DWORD PTR _dymem
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+104
	add	eax, DWORD PTR [edx+esi+64]

; 5131 :       for ( n = 0 ; n < SDIM ; n++ )

	xor	ebx, ebx
	test	ecx, ecx
	jle	$LN21@one_con_po@2

; 5130 :     { x = get_coord(newv[m]);

	mov	ecx, DWORD PTR tv4504[ebp]
	mov	DWORD PTR tv4437[ebp], ecx

; 5131 :       for ( n = 0 ; n < SDIM ; n++ )

	lea	ecx, DWORD PTR _sides$[ebp+48]
	sub	ecx, eax
	mov	DWORD PTR tv4473[ebp], ecx
$LN19@one_con_po@2:

; 5132 :       { x[n] += 0.5*sides[m][n];

	mov	edx, DWORD PTR tv4437[ebp]
	fld	QWORD PTR [edx]

; 5133 :         for ( j = 0 ; j < tripcount ; j++ )

	xor	esi, esi
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	cmp	edi, 4
	jl	SHORT $LC334@one_con_po@2

; 5134 :           x[n] += 0.5*sides[j][n]/tripcount;

	mov	ecx, DWORD PTR tv4473[ebp]
	fild	DWORD PTR _tripcount$GSCopy$[ebp]
	lea	edx, DWORD PTR [edi-4]
	shr	edx, 2
	add	ecx, eax
	inc	edx
	lea	esi, DWORD PTR [edx*4]
$LN335@one_con_po@2:
	fld	QWORD PTR [ecx-48]
	add	ecx, 192				; 000000c0H
	dec	edx
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(1)
	fadd	QWORD PTR [eax]
	fst	QWORD PTR [eax]
	fld	QWORD PTR [ecx-192]
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fst	QWORD PTR [eax]
	fld	QWORD PTR [ecx-144]
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fst	QWORD PTR [eax]
	fld	QWORD PTR [ecx-96]
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [eax]
	jne	SHORT $LN335@one_con_po@2

; 5133 :         for ( j = 0 ; j < tripcount ; j++ )

	fstp	ST(0)
$LC334@one_con_po@2:
	cmp	esi, edi
	jge	SHORT $LN18@one_con_po@2
	fild	DWORD PTR _tripcount$GSCopy$[ebp]
	lea	edx, DWORD PTR [esi+esi*2]
	lea	ecx, DWORD PTR [ebx+edx*2]
	mov	edx, edi
	lea	ecx, DWORD PTR _sides$[ebp+ecx*8]
	sub	edx, esi
$LC16@one_con_po@2:

; 5134 :           x[n] += 0.5*sides[j][n]/tripcount;

	fld	QWORD PTR [ecx]
	add	ecx, 48					; 00000030H
	dec	edx
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(1)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	jne	SHORT $LC16@one_con_po@2

; 5133 :         for ( j = 0 ; j < tripcount ; j++ )

	fstp	ST(0)
$LN18@one_con_po@2:

; 5131 :       for ( n = 0 ; n < SDIM ; n++ )

	mov	ecx, DWORD PTR _web+616
	add	DWORD PTR tv4437[ebp], 8
	inc	ebx
	add	eax, 8
	cmp	ebx, ecx
	jl	$LN19@one_con_po@2
$LN21@one_con_po@2:

; 5123 :           }
; 5124 :         } 
; 5125 :        
; 5126 :     }
; 5127 :   
; 5128 :     /* move vertices apart a bit */
; 5129 :     for ( m = 0 ; m < tripcount ; m++ )

	mov	eax, DWORD PTR _m$[ebp]
	add	DWORD PTR tv4504[ebp], 48		; 00000030H
	inc	eax
	mov	DWORD PTR _m$[ebp], eax
	cmp	eax, edi
	jl	$LN358@one_con_po@2

; 5135 :       }
; 5136 :     }
; 5137 :   }
; 5138 :   else

	jmp	$LN407@one_con_po@2

; 5153 :       fe = get_edge_fe(con_edges[m]);

$LN247@one_con_po@2:
	mov	ecx, DWORD PTR [ecx+28]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN246@one_con_po@2
	xor	ecx, 134217728				; 08000000H
$LN246@one_con_po@2:
	mov	ebx, ecx
	mov	DWORD PTR _fe$92079[ebp], ecx
$LN248@one_con_po@2:

; 5154 :       prevfe = get_prev_edge(fe);

	mov	edx, ebx
	shr	edx, 27					; 0000001bH
	and	edx, 1
	mov	DWORD PTR tv2821[ebp], edx
	mov	edi, ebx
	je	SHORT $LN251@one_con_po@2
	mov	eax, DWORD PTR _web+460
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	eax, DWORD PTR [edi+eax]
	mov	esi, DWORD PTR [eax+32]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN250@one_con_po@2
$LN251@one_con_po@2:
	mov	ecx, DWORD PTR _web+460
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	eax, DWORD PTR [edi+ecx]
	mov	esi, DWORD PTR [eax+28]
$LN250@one_con_po@2:

; 5155 :       newfe[m] = new_facetedge(get_fe_facet(fe),newe);

	mov	ecx, ebx
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	mov	DWORD PTR tv2836[ebp], ecx
	jne	SHORT $LN255@one_con_po@2
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN254@one_con_po@2
$LN255@one_con_po@2:
	mov	eax, DWORD PTR [eax+24]
	test	edx, edx
	je	SHORT $LN254@one_con_po@2
	xor	eax, 134217728				; 08000000H
$LN254@one_con_po@2:
	mov	edx, DWORD PTR _newe$92078[ebp]
	push	edx
	push	eax
	call	_new_facetedge
	mov	ecx, DWORD PTR tv4554[ebp]
	mov	edx, DWORD PTR tv4545[ebp]
	add	esp, 8
	mov	DWORD PTR [ecx+edx], eax

; 5156 :       set_next_edge(prevfe,newfe[m]);

	test	esi, 268435456				; 10000000H
	je	SHORT $LN351@one_con_po@2
	test	esi, 134217728				; 08000000H
	je	SHORT $LN259@one_con_po@2
	mov	ebx, DWORD PTR _web+460
	mov	ecx, eax
	xor	ecx, 134217728				; 08000000H
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+edx*4]
	mov	ebx, DWORD PTR _fe$92079[ebp]
	mov	DWORD PTR [edx+28], ecx
	jmp	SHORT $LN351@one_con_po@2
$LN259@one_con_po@2:
	mov	edx, DWORD PTR _web+460
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+32], eax
$LN351@one_con_po@2:

; 5157 :       set_prev_edge(newfe[m],prevfe);

	test	eax, 268435456				; 10000000H
	je	$LN268@one_con_po@2
	test	eax, 134217728				; 08000000H
	je	SHORT $LN264@one_con_po@2
	mov	ecx, DWORD PTR _web+460
	xor	esi, 134217728				; 08000000H
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+32], esi
	jmp	SHORT $LN263@one_con_po@2
$LN264@one_con_po@2:
	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+28], esi
$LN263@one_con_po@2:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx

; 5158 :       set_next_edge(newfe[m],fe);

	test	eax, 268435456				; 10000000H
	je	SHORT $LN268@one_con_po@2
	test	eax, 134217728				; 08000000H
	je	SHORT $LN269@one_con_po@2
	mov	esi, DWORD PTR _web+460
	mov	edx, ebx
	xor	edx, 134217728				; 08000000H
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [ecx+28], edx
	jmp	SHORT $LN268@one_con_po@2
$LN269@one_con_po@2:
	mov	ecx, DWORD PTR _web+460
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+32], ebx
$LN268@one_con_po@2:

; 5159 :       set_prev_edge(fe,newfe[m]);

	cmp	DWORD PTR tv2836[ebp], 0
	je	SHORT $LN276@one_con_po@2
	cmp	DWORD PTR tv2821[ebp], 0
	je	SHORT $LN274@one_con_po@2
	mov	edx, DWORD PTR _web+460
	mov	edx, DWORD PTR [edi+edx]
	mov	ecx, eax
	xor	ecx, 134217728				; 08000000H
	mov	DWORD PTR [edx+32], ecx
	jmp	SHORT $LN273@one_con_po@2
$LN274@one_con_po@2:
	mov	ecx, DWORD PTR _web+460
	mov	edx, DWORD PTR [edi+ecx]
	mov	DWORD PTR [edx+28], eax
$LN273@one_con_po@2:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN276@one_con_po@2:

; 5160 :       cross_cut(newfe[m],fe);

	push	ebx
	push	eax
	call	_cross_cut
	add	DWORD PTR tv4545[ebp], 4
	add	esp, 8
	dec	DWORD PTR tv970[ebp]
	jne	$LL12@one_con_po@2

; 5148 : 
; 5149 :     /* reconnect wings */
; 5150 :     for ( m = 0 ; m < tripcount ; m++ )

	mov	ebx, DWORD PTR _tripcount$GSCopy$[ebp]
$LN347@one_con_po@2:

; 5161 :     }
; 5162 :     set_edge_fe(newe,newfe[0]);

	mov	ecx, DWORD PTR _newe$92078[ebp]
	mov	eax, DWORD PTR _newfe$92081[ebp]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN278@one_con_po@2
	xor	eax, 134217728				; 08000000H
$LN278@one_con_po@2:
	mov	esi, DWORD PTR _web+124
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [edx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax

; 5163 : 
; 5164 :     for ( m = 0 ; m < tripcount ; m++ )

	test	ebx, ebx
	jle	$LN357@one_con_po@2

; 5161 :     }
; 5162 :     set_edge_fe(newe,newfe[0]);

	mov	eax, 1
	lea	ecx, DWORD PTR _newfe$92081[ebp]
	mov	DWORD PTR tv4566[ebp], eax
	mov	DWORD PTR tv4591[ebp], ecx
	mov	DWORD PTR tv298[ebp], ebx
$LL362@one_con_po@2:

; 5165 :     { set_next_facet(newfe[m],newfe[(m+1)%tripcount]);

	cdq
	idiv	ebx
	mov	eax, DWORD PTR tv4591[ebp]
	mov	eax, DWORD PTR [eax]
	mov	edx, DWORD PTR _newfe$92081[ebp+edx*4]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN281@one_con_po@2
	test	eax, 134217728				; 08000000H
	je	SHORT $LN282@one_con_po@2
	mov	edi, DWORD PTR _web+460
	mov	ecx, edx
	xor	ecx, 134217728				; 08000000H
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edi+esi*4]
	mov	DWORD PTR [esi+36], ecx
	jmp	SHORT $LN281@one_con_po@2
$LN282@one_con_po@2:
	mov	esi, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [ecx+40], edx
$LN281@one_con_po@2:

; 5166 :       set_prev_facet(newfe[(m+1)%tripcount],newfe[m]);

	test	edx, 268435456				; 10000000H
	je	SHORT $LN8@one_con_po@2
	mov	ecx, DWORD PTR _web+460
	test	edx, 134217728				; 08000000H
	je	SHORT $LN287@one_con_po@2
	xor	eax, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN286@one_con_po@2
$LN287@one_con_po@2:
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+36], eax
$LN286@one_con_po@2:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN8@one_con_po@2:

; 5163 : 
; 5164 :     for ( m = 0 ; m < tripcount ; m++ )

	mov	eax, DWORD PTR tv4566[ebp]
	add	DWORD PTR tv4591[ebp], 4
	inc	eax
	dec	DWORD PTR tv298[ebp]
	mov	DWORD PTR tv4566[ebp], eax
	jne	$LL362@one_con_po@2
	mov	ecx, DWORD PTR _newe$92078[ebp]
$LN357@one_con_po@2:

; 5167 :     }
; 5168 :     fe_reorder(newe); /* make sure in proper geometric order */

	push	ecx
	call	_fe_reorder

; 5169 : 
; 5170 : 
; 5171 :     /* move vertex */
; 5172 :     x = get_coord(v_id);

	mov	ecx, DWORD PTR tv2305[ebp]
	mov	eax, DWORD PTR _web+12
	mov	eax, DWORD PTR [ecx+eax]
	mov	edx, DWORD PTR _web+104
	mov	ecx, DWORD PTR _dymem
	add	eax, DWORD PTR [edx+ecx+64]

; 5173 :     for ( n = 0 ; n < SDIM ; n++ )

	xor	edi, edi
	add	esp, 4
	cmp	DWORD PTR _web+616, edi
	jle	$LN4@one_con_po@2
	fld	QWORD PTR __real@3fd3333333333333
	lea	ecx, DWORD PTR _tsides$[ebp+48]
	sub	ecx, eax
	mov	DWORD PTR tv4978[ebp], ecx
$LN6@one_con_po@2:

; 5174 :     {  for ( m= 0 ; m < tripcount ; m++ )

	xor	esi, esi
	cmp	ebx, 4
	jl	SHORT $LC337@one_con_po@2
	mov	ecx, DWORD PTR tv4978[ebp]

; 5175 :          x[n] += 0.3*tsides[m][n]/tripcount;

	fild	DWORD PTR _tripcount$GSCopy$[ebp]
	lea	edx, DWORD PTR [ebx-4]
	shr	edx, 2
	add	ecx, eax
	inc	edx
	lea	esi, DWORD PTR [edx*4]
$LN338@one_con_po@2:
	fld	QWORD PTR [ecx-48]
	add	ecx, 192				; 000000c0H
	dec	edx
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(1)
	fadd	QWORD PTR [eax]
	fst	QWORD PTR [eax]
	fld	QWORD PTR [ecx-192]
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fst	QWORD PTR [eax]
	fld	QWORD PTR [ecx-144]
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fst	QWORD PTR [eax]
	fld	QWORD PTR [ecx-96]
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [eax]
	jne	SHORT $LN338@one_con_po@2

; 5174 :     {  for ( m= 0 ; m < tripcount ; m++ )

	fstp	ST(0)
$LC337@one_con_po@2:
	cmp	esi, ebx
	jge	SHORT $LN5@one_con_po@2
	fild	DWORD PTR _tripcount$GSCopy$[ebp]
	lea	ecx, DWORD PTR [esi+esi*2]
	lea	ecx, DWORD PTR [edi+ecx*2]
	mov	edx, ebx
	lea	ecx, DWORD PTR _tsides$[ebp+ecx*8]
	sub	edx, esi
$LC3@one_con_po@2:

; 5175 :          x[n] += 0.3*tsides[m][n]/tripcount;

	fld	QWORD PTR [ecx]
	add	ecx, 48					; 00000030H
	dec	edx
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(1)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	jne	SHORT $LC3@one_con_po@2

; 5174 :     {  for ( m= 0 ; m < tripcount ; m++ )

	fstp	ST(0)
$LN5@one_con_po@2:

; 5173 :     for ( n = 0 ; n < SDIM ; n++ )

	inc	edi
	add	eax, 8
	cmp	edi, DWORD PTR _web+616
	jl	$LN6@one_con_po@2
$LN407@one_con_po@2:
	fstp	ST(0)
$LN4@one_con_po@2:

; 5176 :     }
; 5177 : 
; 5178 :   }
; 5179 :   return 1;
; 5180 : 
; 5181 : } // end one_con_pop_3()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	ebx
	xor	ecx, ebp
	mov	eax, 1
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_one_con_pop_3 ENDP
_TEXT	ENDS
PUBLIC	__real@3fb999999999999a
PUBLIC	_con_edges$GSCopy$
PUBLIC	_v_id$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_one_con_pop_4
;	COMDAT __real@3fb999999999999a
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\popfilm.c
CONST	ENDS
;	COMDAT _one_con_pop_4
_TEXT	SEGMENT
tv3087 = -292						; size = 4
tv3104 = -288						; size = 4
tv597 = -284						; size = 8
tv3499 = -280						; size = 4
tv3366 = -280						; size = 4
tv3188 = -280						; size = 4
tv3134 = -280						; size = 4
tv3515 = -276						; size = 4
tv2849 = -276						; size = 4
tv599 = -272						; size = 8
tv592 = -272						; size = 8
tv87 = -272						; size = 8
_newv$ = -272						; size = 8
tv3489 = -264						; size = 4
tv3395 = -264						; size = 4
_newe$92147 = -264					; size = 4
tv3448 = -260						; size = 4
_v_id$GSCopy$ = -260					; size = 4
_fe_a$92150 = -256					; size = 4
_f2$92149 = -256					; size = 4
_span_f$92180 = -252					; size = 4
_b2b$92156 = -252					; size = 4
_newfe2$92142 = -252					; size = 4
tv3359 = -248						; size = 4
_con_edges$GSCopy$ = -248				; size = 4
_b1f$92153 = -248					; size = 4
tv3464 = -244						; size = 4
_fe_b_new$92183 = -244					; size = 4
_newfe1$92141 = -244					; size = 4
_fe_b$92151 = -240					; size = 4
_f1$92148 = -240					; size = 4
tv3432 = -236						; size = 4
_fe_c$92184 = -236					; size = 4
_b1b$92154 = -236					; size = 4
_prev1$92143 = -236					; size = 4
tv3388 = -232						; size = 4
_b2f$92155 = -232					; size = 4
_fe2$92140 = -232					; size = 4
_fe1$92139 = -232					; size = 4
_sides$ = -228						; size = 192
_mag$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_v_id$ = 8						; size = 4
_con_edges$ = 12					; size = 4
_mode$ = 16						; size = 4
_one_con_pop_4 PROC					; COMDAT

; 5200 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _v_id$[ebp]

; 5201 :   vertex_id newv[2];
; 5202 :   int i;
; 5203 :   REAL sides[4][MAXCOORD];
; 5204 :   REAL mag[4];
; 5205 :   facetedge_id fe,next_fe;
; 5206 :   
; 5207 :   if ( get_vattr(v_id) & FIXED ) return 0;

	mov	ecx, DWORD PTR _web+12
	mov	DWORD PTR _v_id$GSCopy$[ebp], eax
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv2849[ebp], eax
	mov	eax, DWORD PTR [eax+ecx]
	mov	eax, DWORD PTR [eax+8]
	push	ebx
	mov	ebx, DWORD PTR _con_edges$[ebp]
	and	eax, 64					; 00000040H
	xor	ecx, ecx
	or	eax, ecx
	mov	DWORD PTR _con_edges$GSCopy$[ebp], ebx
	je	SHORT $LN32@one_con_po@3
	xor	eax, eax
	pop	ebx

; 5388 :       
; 5389 :     }
; 5390 :     
; 5391 :     
; 5392 :   } /* end pulled-out triangle */
; 5393 :   return 1;
; 5394 : 
; 5395 : } // end one_con_pop_4()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN32@one_con_po@3:

; 5208 :   
; 5209 :   /* see which constraint edges belong together */
; 5210 :   fe = get_edge_fe(con_edges[0]); 

	mov	ecx, DWORD PTR [ebx]
	mov	eax, DWORD PTR _web+124
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	test	eax, eax
	je	SHORT $LN35@one_con_po@3
$LN36@one_con_po@3:
	mov	eax, DWORD PTR [eax+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN35@one_con_po@3
	xor	eax, 134217728				; 08000000H
$LN35@one_con_po@3:
	mov	edx, DWORD PTR _web+460
$LL31@one_con_po@3:

; 5211 :   for(;;) 
; 5212 :   { fe = inverse_id(get_prev_edge(fe));

	test	eax, 134217728				; 08000000H
	je	SHORT $LN40@one_con_po@3
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [ecx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN39@one_con_po@3
$LN40@one_con_po@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]
$LN39@one_con_po@3:
	xor	eax, 134217728				; 08000000H

; 5213 :     next_fe = get_next_facet(fe);

	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN44@one_con_po@3
	mov	ecx, DWORD PTR [ecx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN43@one_con_po@3
$LN44@one_con_po@3:
	mov	ecx, DWORD PTR [ecx+40]
$LN43@one_con_po@3:

; 5214 :     if ( equal_id(fe,next_fe) )

	cmp	eax, ecx
	je	SHORT $LN328@one_con_po@3

; 5221 :         }
; 5222 :       break;
; 5223 :     }
; 5224 :     fe = next_fe;

	mov	eax, ecx

; 5225 :   } 

	jmp	SHORT $LL31@one_con_po@3
$LN328@one_con_po@3:

; 5215 :     { /* found it */
; 5216 :       edge_id other_e = get_fe_edge(fe);

	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+ecx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]

; 5217 :       for ( i = 2 ; i < 4 ; i++ )  /* get in second spot */
; 5218 :         if ( equal_id(other_e,con_edges[i]) )

	cmp	eax, DWORD PTR [ebx+8]
	jne	SHORT $LN27@one_con_po@3

; 5219 :         { con_edges[i] = con_edges[1];

	mov	ecx, DWORD PTR [ebx+4]
	mov	DWORD PTR [ebx+8], ecx

; 5220 :           con_edges[1] = other_e;

	mov	DWORD PTR [ebx+4], eax
$LN27@one_con_po@3:

; 5217 :       for ( i = 2 ; i < 4 ; i++ )  /* get in second spot */
; 5218 :         if ( equal_id(other_e,con_edges[i]) )

	cmp	eax, DWORD PTR [ebx+12]
	jne	SHORT $LN337@one_con_po@3

; 5219 :         { con_edges[i] = con_edges[1];

	mov	edx, DWORD PTR [ebx+4]
	mov	DWORD PTR [ebx+12], edx

; 5220 :           con_edges[1] = other_e;

	mov	DWORD PTR [ebx+4], eax
$LN337@one_con_po@3:

; 5226 : 
; 5227 : 
; 5228 :   /* get side vectors */
; 5229 :   for ( i = 0 ; i < 4 ; i++ )

	push	esi
	push	edi
	xor	esi, esi
	lea	edi, DWORD PTR _sides$[ebp]
$LL24@one_con_po@3:

; 5230 :   { get_edge_side(con_edges[i],sides[i]);

	mov	eax, DWORD PTR [ebx+esi*4]
	push	edi
	push	eax
	call	_get_edge_side

; 5231 :     mag[i] = sqrt(dot(sides[i],sides[i],SDIM));

	mov	ecx, DWORD PTR _web+616
	push	ecx
	push	edi
	push	edi
	call	_dot
	add	esp, 20					; 00000014H
	call	__CIsqrt
	fstp	QWORD PTR _mag$[ebp+esi*8]
	inc	esi
	add	edi, 48					; 00000030H
	cmp	esi, 4
	jl	SHORT $LL24@one_con_po@3

; 5232 :   }
; 5233 : 
; 5234 :   /* figure out which way it should pop according to edges on constraints */
; 5235 :   if ( mode == POP_TO_BETTER )

	mov	eax, DWORD PTR _mode$[ebp]
	test	eax, eax
	jne	$LN17@one_con_po@3

; 5236 :   { if ( pop_disjoin_flag )

	cmp	DWORD PTR _pop_disjoin_flag, eax

; 5237 :        mode = POP_TO_OPEN;
; 5238 :     /* if included angles bigger than exterior, then merge */
; 5239 :     else if ( acos(dot(sides[0],sides[1],SDIM)/mag[0]/mag[1])

	jne	$LN353@one_con_po@3

; 5240 :        + acos(dot(sides[2],sides[3],SDIM)/mag[2]/mag[3]) > M_PI )

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _sides$[ebp+144]
	push	eax
	lea	ecx, DWORD PTR _sides$[ebp+96]
	push	ecx
	call	_dot
	fdiv	QWORD PTR _mag$[ebp+16]
	add	esp, 12					; 0000000cH
	fdiv	QWORD PTR _mag$[ebp+24]
	call	__CIacos
	fstp	QWORD PTR tv87[ebp]
	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _sides$[ebp+48]
	push	eax
	lea	ecx, DWORD PTR _sides$[ebp]
	push	ecx
	call	_dot
	fdiv	QWORD PTR _mag$[ebp]
	add	esp, 12					; 0000000cH
	fdiv	QWORD PTR _mag$[ebp+8]
	call	__CIacos
	fadd	QWORD PTR tv87[ebp]
	fcomp	QWORD PTR __real@400921fb54442d18
	fnstsw	ax
	test	ah, 65					; 00000041H

; 5241 :        mode = POP_TO_TRIANGLE;
; 5242 :     else 

	jne	$LN353@one_con_po@3
$LN375@one_con_po@3:

; 5271 :   { /* create pulled-out triangle */
; 5272 :     facetedge_id fe1,fe2,newfe1,newfe2,prev1,prev2;
; 5273 :     REAL *xold,*xnew;
; 5274 :     edge_id newe;
; 5275 :     facet_id f1,f2;
; 5276 :     facetedge_id fe_a,fe_b,cc_fe;
; 5277 :     body_id b1f,b1b,b2f,b2b;
; 5278 :     
; 5279 :     /* get con_edges in canonical order */
; 5280 :     if ( dot(sides[0],sides[3],SDIM)*mag[1]*mag[2]
; 5281 :         + dot(sides[1],sides[2],SDIM)*mag[0]*mag[3]  
; 5282 :           < dot(sides[0],sides[2],SDIM)*mag[1]*mag[3]
; 5283 :         + dot(sides[1],sides[3],SDIM)*mag[0]*mag[2])

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _sides$[ebp+96]
	push	eax
	lea	ecx, DWORD PTR _sides$[ebp+48]
	push	ecx
	call	_dot
	fmul	QWORD PTR _mag$[ebp]
	mov	edx, DWORD PTR _web+616
	push	edx
	fmul	QWORD PTR _mag$[ebp+24]
	lea	eax, DWORD PTR _sides$[ebp+144]
	push	eax
	lea	ecx, DWORD PTR _sides$[ebp]
	push	ecx
	fstp	QWORD PTR tv592[ebp]
	call	_dot
	fmul	QWORD PTR _mag$[ebp+8]
	mov	edx, DWORD PTR _web+616
	push	edx
	fmul	QWORD PTR _mag$[ebp+16]
	lea	eax, DWORD PTR _sides$[ebp+144]
	push	eax
	lea	ecx, DWORD PTR _sides$[ebp+48]
	fadd	QWORD PTR tv592[ebp]
	push	ecx
	fstp	QWORD PTR tv597[ebp]
	call	_dot
	fmul	QWORD PTR _mag$[ebp]
	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _sides$[ebp+96]
	fmul	QWORD PTR _mag$[ebp+16]
	push	eax
	lea	ecx, DWORD PTR _sides$[ebp]
	push	ecx
	fstp	QWORD PTR tv599[ebp]
	call	_dot
	fmul	QWORD PTR _mag$[ebp+8]
	add	esp, 48					; 00000030H
	fmul	QWORD PTR _mag$[ebp+24]
	fadd	QWORD PTR tv599[ebp]
	fcomp	QWORD PTR tv597[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN338@one_con_po@3

; 5284 :       { edge_id tmpe = con_edges[2]; con_edges[2] = con_edges[3];

	mov	eax, DWORD PTR [ebx+8]
	mov	edx, DWORD PTR [ebx+12]

; 5285 :         con_edges[3] = tmpe;

	mov	DWORD PTR [ebx+12], eax
	mov	DWORD PTR [ebx+8], edx

; 5286 :         for ( i = 0 ; i < SDIM ; i++ )

	mov	edx, DWORD PTR _web+616
	xor	eax, eax
	cmp	edx, 4
	jl	SHORT $LC339@one_con_po@3
	lea	ecx, DWORD PTR [edx-3]
	npad	9
$LL340@one_con_po@3:

; 5287 :         { REAL t = sides[2][i]; sides[2][i] = sides[3][i]; sides[3][i] = t; }

	fld	QWORD PTR _sides$[ebp+eax*8+96]
	add	eax, 4
	fld	QWORD PTR _sides$[ebp+eax*8+112]
	fstp	QWORD PTR _sides$[ebp+eax*8+64]
	fstp	QWORD PTR _sides$[ebp+eax*8+112]
	fld	QWORD PTR _sides$[ebp+eax*8+72]
	fld	QWORD PTR _sides$[ebp+eax*8+120]
	fstp	QWORD PTR _sides$[ebp+eax*8+72]
	fstp	QWORD PTR _sides$[ebp+eax*8+120]
	fld	QWORD PTR _sides$[ebp+eax*8+80]
	fld	QWORD PTR _sides$[ebp+eax*8+128]
	fstp	QWORD PTR _sides$[ebp+eax*8+80]
	fstp	QWORD PTR _sides$[ebp+eax*8+128]
	fld	QWORD PTR _sides$[ebp+eax*8+88]
	fld	QWORD PTR _sides$[ebp+eax*8+136]
	fstp	QWORD PTR _sides$[ebp+eax*8+88]
	fstp	QWORD PTR _sides$[ebp+eax*8+136]
	cmp	eax, ecx
	jl	SHORT $LL340@one_con_po@3
$LC339@one_con_po@3:

; 5286 :         for ( i = 0 ; i < SDIM ; i++ )

	cmp	eax, edx
	jge	SHORT $LN338@one_con_po@3
$LC10@one_con_po@3:

; 5287 :         { REAL t = sides[2][i]; sides[2][i] = sides[3][i]; sides[3][i] = t; }

	fld	QWORD PTR _sides$[ebp+eax*8+96]
	inc	eax
	fld	QWORD PTR _sides$[ebp+eax*8+136]
	fstp	QWORD PTR _sides$[ebp+eax*8+88]
	fstp	QWORD PTR _sides$[ebp+eax*8+136]
	cmp	eax, edx
	jl	SHORT $LC10@one_con_po@3
$LN338@one_con_po@3:

; 5288 :       }
; 5289 :     
; 5290 : 
; 5291 :     /* first, split vertex and put edge between */
; 5292 :     newv[0] = v_id;
; 5293 :     newv[1] = dup_vertex(v_id);

	mov	esi, DWORD PTR _v_id$GSCopy$[ebp]
	push	esi
	call	_dup_vertex

; 5294 :     newe = new_edge(newv[0],newv[1],NULLID);

	push	0
	push	eax
	push	esi
	mov	DWORD PTR _newv$[ebp+4], eax
	call	_new_edge

; 5295 :     f1 = get_fe_facet(get_edge_fe(con_edges[1]));

	mov	edx, DWORD PTR _web+124
	mov	DWORD PTR _newe$92147[ebp], eax
	mov	eax, DWORD PTR [ebx+4]
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	add	esp, 16					; 00000010H
	test	ecx, ecx
	jne	$LN64@one_con_po@3
	xor	eax, eax
	jmp	$LN65@one_con_po@3
$LN17@one_con_po@3:

; 5243 :        mode = POP_TO_OPEN;
; 5244 :   }
; 5245 : 
; 5246 :   /* do the pop */
; 5247 :   if ( mode == POP_TO_OPEN )

	cmp	eax, 1
	jne	$LN375@one_con_po@3
$LN353@one_con_po@3:

; 5248 :   { /* make separate vertices */
; 5249 :     edge_id other_e;
; 5250 : 
; 5251 :     newv[0] = v_id;
; 5252 :     newv[1] = dup_vertex(v_id);

	mov	edx, DWORD PTR _v_id$GSCopy$[ebp]
	push	edx
	call	_dup_vertex

; 5253 :    
; 5254 :     /* reconnect edges */
; 5255 :     next_fe = get_edge_fe(con_edges[2]); 

	mov	ebx, DWORD PTR [ebx+8]
	mov	ecx, DWORD PTR _web+124
	mov	DWORD PTR _newv$[ebp+4], eax
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN50@one_con_po@3
	xor	edi, edi
	jmp	SHORT $LN357@one_con_po@3
$LN50@one_con_po@3:
	mov	eax, DWORD PTR [eax+28]
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN49@one_con_po@3
	xor	eax, 134217728				; 08000000H
$LN49@one_con_po@3:
	mov	edi, eax
$LN357@one_con_po@3:
	mov	ecx, DWORD PTR _web+460
	npad	10
$LL15@one_con_po@3:

; 5256 :     do 
; 5257 :     { 
; 5258 :       fe = next_fe;
; 5259 :       other_e = get_fe_edge(fe);
; 5260 :       remove_vertex_edge(v_id,other_e);

	mov	eax, DWORD PTR _v_id$GSCopy$[ebp]
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	edx, DWORD PTR [esi+ecx]
	mov	ebx, edi
	and	ebx, 134217728				; 08000000H
	xor	ebx, DWORD PTR [edx+20]
	push	ebx
	push	eax
	call	_remove_vertex_edge

; 5261 :       set_edge_tailv(other_e,newv[1]);

	mov	ecx, DWORD PTR _newv$[ebp+4]
	push	ecx
	push	ebx
	call	_set_edge_tailv

; 5262 :       fe = inverse_id(get_prev_edge(fe));

	mov	ecx, DWORD PTR _web+460
	add	esp, 16					; 00000010H
	test	edi, 134217728				; 08000000H
	je	SHORT $LN56@one_con_po@3
	mov	edx, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN55@one_con_po@3
$LN56@one_con_po@3:
	mov	eax, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [eax+28]
$LN55@one_con_po@3:
	xor	eax, 134217728				; 08000000H

; 5263 :       next_fe = get_next_facet(fe);

	test	eax, 134217728				; 08000000H
	je	SHORT $LN60@one_con_po@3
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	edi, DWORD PTR [edx+36]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN14@one_con_po@3
$LN60@one_con_po@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	edi, DWORD PTR [eax+40]
$LN14@one_con_po@3:

; 5264 :     } while ( !equal_id(other_e,con_edges[3]) );

	mov	edx, DWORD PTR _con_edges$GSCopy$[ebp]
	cmp	ebx, DWORD PTR [edx+12]
	jne	$LL15@one_con_po@3

; 5265 :     set_vertex_edge(newv[0],con_edges[0]);

	mov	ecx, DWORD PTR _web+12
	mov	eax, DWORD PTR tv2849[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+28], eax

; 5266 :     set_vertex_edge(newv[1],con_edges[2]);

	mov	eax, DWORD PTR _newv$[ebp+4]
	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+28], ecx

; 5267 :   
; 5268 :     /* no reason to move vertices apart a bit */
; 5269 :   }
; 5270 :   else

	jmp	$LN379@one_con_po@3

; 5295 :     f1 = get_fe_facet(get_edge_fe(con_edges[1]));

$LN64@one_con_po@3:
	mov	ecx, DWORD PTR [ecx+28]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN63@one_con_po@3
	xor	ecx, 134217728				; 08000000H
$LN63@one_con_po@3:
	mov	eax, ecx
$LN65@one_con_po@3:
	mov	esi, DWORD PTR _web+460
	mov	edi, DWORD PTR _NULLFACET
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN68@one_con_po@3
	mov	DWORD PTR _f1$92148[ebp], edi
	jmp	SHORT $LN69@one_con_po@3
$LN68@one_con_po@3:
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	ecx, DWORD PTR [ecx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN67@one_con_po@3
	xor	ecx, 134217728				; 08000000H
$LN67@one_con_po@3:
	mov	DWORD PTR _f1$92148[ebp], ecx
$LN69@one_con_po@3:

; 5296 :     f2 = get_fe_facet(get_edge_fe(con_edges[2]));

	mov	ebx, DWORD PTR [ebx+8]
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	test	eax, eax
	je	SHORT $LN71@one_con_po@3
$LN72@one_con_po@3:
	mov	eax, DWORD PTR [eax+28]
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN71@one_con_po@3
	xor	eax, 134217728				; 08000000H
$LN71@one_con_po@3:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN76@one_con_po@3
	mov	ebx, edi
	mov	DWORD PTR _f2$92149[ebp], edi
	jmp	SHORT $LN77@one_con_po@3
$LN76@one_con_po@3:
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+ecx*4]
	mov	ebx, DWORD PTR [edx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN75@one_con_po@3
	xor	ebx, 134217728				; 08000000H
$LN75@one_con_po@3:
	mov	DWORD PTR _f2$92149[ebp], ebx
$LN77@one_con_po@3:

; 5297 :     newfe1 = new_facetedge(f1,newe);

	mov	esi, DWORD PTR _newe$92147[ebp]
	mov	eax, DWORD PTR _f1$92148[ebp]
	push	esi
	push	eax
	call	_new_facetedge
	mov	edi, eax

; 5298 :     newfe2 = new_facetedge(f2,newe);

	push	esi
	push	ebx
	mov	DWORD PTR _newfe1$92141[ebp], edi
	call	_new_facetedge
	mov	ebx, eax
	add	esp, 16					; 00000010H
	mov	DWORD PTR _newfe2$92142[ebp], ebx

; 5299 :     set_edge_fe(newe,newfe1);

	mov	eax, edi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN79@one_con_po@3
	xor	eax, 134217728				; 08000000H
$LN79@one_con_po@3:
	mov	ecx, DWORD PTR _web+124
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	DWORD PTR [edx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax

; 5300 :     set_next_facet(newfe1,newfe2);

	mov	eax, edi
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv3087[ebp], eax
	je	SHORT $LN82@one_con_po@3
	test	edi, 134217728				; 08000000H
	je	SHORT $LN83@one_con_po@3
	mov	esi, DWORD PTR _web+460
	mov	ecx, ebx
	xor	ecx, 134217728				; 08000000H
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [edx+36], ecx
	jmp	SHORT $LN82@one_con_po@3
$LN83@one_con_po@3:
	mov	edx, DWORD PTR _web+460
	mov	ecx, edi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+40], ebx
$LN82@one_con_po@3:

; 5301 :     set_prev_facet(newfe1,newfe2);

	test	eax, eax
	je	SHORT $LN384@one_con_po@3
	test	edi, 134217728				; 08000000H
	je	SHORT $LN88@one_con_po@3
	mov	ecx, DWORD PTR _web+460
	mov	edx, ebx
	xor	edx, 134217728				; 08000000H
	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+40], edx
	jmp	SHORT $LN87@one_con_po@3
$LN88@one_con_po@3:
	mov	edx, DWORD PTR _web+460
	mov	ecx, edi
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [eax+36], ebx
$LN87@one_con_po@3:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN384@one_con_po@3:

; 5302 :     set_next_facet(newfe2,newfe1);

	mov	eax, ebx
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv3104[ebp], eax
	je	SHORT $LN92@one_con_po@3
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN93@one_con_po@3
	mov	esi, DWORD PTR _web+460
	mov	ecx, edi
	xor	ecx, 134217728				; 08000000H
	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [edx+36], ecx
	jmp	SHORT $LN92@one_con_po@3
$LN93@one_con_po@3:
	mov	edx, DWORD PTR _web+460
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+40], edi
$LN92@one_con_po@3:

; 5303 :     set_prev_facet(newfe2,newfe1);

	test	eax, eax
	je	SHORT $LN100@one_con_po@3
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN98@one_con_po@3
	mov	ecx, DWORD PTR _web+460
	mov	edx, edi
	xor	edx, 134217728				; 08000000H
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+40], edx
	jmp	SHORT $LN97@one_con_po@3
$LN98@one_con_po@3:
	mov	edx, DWORD PTR _web+460
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [eax+36], edi
$LN97@one_con_po@3:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN100@one_con_po@3:

; 5304 : 
; 5305 :     /* reconnect edges */
; 5306 :     remove_vertex_edge(v_id,con_edges[1]);

	mov	esi, DWORD PTR _con_edges$GSCopy$[ebp]
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR _v_id$GSCopy$[ebp]
	push	ecx
	push	edx
	call	_remove_vertex_edge

; 5307 :     set_edge_tailv(con_edges[1],newv[1]);

	mov	eax, DWORD PTR _newv$[ebp+4]
	mov	ecx, DWORD PTR [esi+4]
	push	eax
	push	ecx
	call	_set_edge_tailv

; 5308 :     remove_vertex_edge(v_id,con_edges[2]);

	mov	edx, DWORD PTR [esi+8]
	mov	eax, DWORD PTR _v_id$GSCopy$[ebp]
	push	edx
	push	eax
	call	_remove_vertex_edge

; 5309 :     set_edge_tailv(con_edges[2],newv[1]);

	mov	ecx, DWORD PTR _newv$[ebp+4]
	mov	edx, DWORD PTR [esi+8]
	push	ecx
	push	edx
	call	_set_edge_tailv

; 5310 :     fe1 = get_edge_fe(con_edges[1]);

	mov	eax, DWORD PTR [esi+4]
	mov	edx, DWORD PTR _web+124
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	add	esp, 32					; 00000020H
	test	ecx, ecx
	je	SHORT $LN102@one_con_po@3
$LN103@one_con_po@3:
	mov	ecx, DWORD PTR [ecx+28]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN102@one_con_po@3
	xor	ecx, 134217728				; 08000000H
$LN102@one_con_po@3:

; 5311 :     prev1 = get_prev_edge(fe1);

	mov	eax, ecx
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR tv3134[ebp], eax
	mov	eax, DWORD PTR _web+460
	mov	DWORD PTR _fe1$92139[ebp], ecx
	je	SHORT $LN107@one_con_po@3
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	edx, DWORD PTR [ecx+eax]
	mov	edx, DWORD PTR [edx+32]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN393@one_con_po@3
$LN107@one_con_po@3:
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	edx, DWORD PTR [ecx+eax]
	mov	edx, DWORD PTR [edx+28]
$LN393@one_con_po@3:

; 5312 :     set_prev_edge(newfe1,prev1); 

	cmp	DWORD PTR tv3087[ebp], 0
	mov	DWORD PTR _prev1$92143[ebp], edx
	je	SHORT $LN382@one_con_po@3
	mov	esi, edi
	test	edi, 134217728				; 08000000H
	je	SHORT $LN111@one_con_po@3
	xor	edx, 134217728				; 08000000H
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [eax+32], edx
	mov	edx, DWORD PTR _prev1$92143[ebp]
	jmp	SHORT $LN110@one_con_po@3
$LN111@one_con_po@3:
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [eax+28], edx
$LN110@one_con_po@3:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN382@one_con_po@3:

; 5313 :     set_next_edge(prev1,newfe1);

	test	edx, 268435456				; 10000000H
	je	SHORT $LN115@one_con_po@3
	test	edx, 134217728				; 08000000H
	je	SHORT $LN116@one_con_po@3
	mov	esi, edi
	xor	esi, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [edx+28], esi
	jmp	SHORT $LN394@one_con_po@3
$LN116@one_con_po@3:
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+32], edi
$LN394@one_con_po@3:
	mov	eax, DWORD PTR _web+460
$LN115@one_con_po@3:

; 5314 :     set_next_edge(newfe1,fe1);

	cmp	DWORD PTR tv3087[ebp], 0
	je	SHORT $LN120@one_con_po@3
	test	edi, 134217728				; 08000000H
	je	SHORT $LN121@one_con_po@3
	mov	edx, DWORD PTR _fe1$92139[ebp]
	xor	edx, 134217728				; 08000000H
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [eax+28], edx
	jmp	SHORT $LN395@one_con_po@3
$LN121@one_con_po@3:
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _fe1$92139[ebp]
	mov	DWORD PTR [eax+32], edx
$LN395@one_con_po@3:
	mov	eax, DWORD PTR _web+460
$LN120@one_con_po@3:

; 5315 :     set_prev_edge(fe1,newfe1);

	test	DWORD PTR _fe1$92139[ebp], 268435456	; 10000000H
	je	SHORT $LN128@one_con_po@3
	cmp	DWORD PTR tv3134[ebp], 0
	je	SHORT $LN126@one_con_po@3
	mov	eax, DWORD PTR [ecx+eax]
	mov	edx, edi
	xor	edx, 134217728				; 08000000H
	mov	DWORD PTR [eax+32], edx
	jmp	SHORT $LN125@one_con_po@3
$LN126@one_con_po@3:
	mov	ecx, DWORD PTR [ecx+eax]
	mov	DWORD PTR [ecx+28], edi
$LN125@one_con_po@3:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN128@one_con_po@3:

; 5316 :     fe2 = get_edge_fe(con_edges[2]);

	mov	edx, DWORD PTR _con_edges$GSCopy$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	mov	esi, DWORD PTR _web+124
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	test	edx, edx
	jne	SHORT $LN131@one_con_po@3
	xor	ecx, ecx
	mov	DWORD PTR _fe2$92140[ebp], ecx
	jmp	SHORT $LN132@one_con_po@3
$LN131@one_con_po@3:
	mov	edx, DWORD PTR [edx+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN130@one_con_po@3
	xor	edx, 134217728				; 08000000H
$LN130@one_con_po@3:
	mov	ecx, edx
	mov	DWORD PTR _fe2$92140[ebp], edx
$LN132@one_con_po@3:

; 5317 :     prev2 = get_prev_edge(fe2);

	mov	edx, ecx
	shr	edx, 27					; 0000001bH
	and	edx, 1
	mov	DWORD PTR tv3188[ebp], edx
	je	SHORT $LN135@one_con_po@3
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	edx, DWORD PTR [ecx+eax]
	mov	esi, DWORD PTR [edx+32]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN134@one_con_po@3
$LN135@one_con_po@3:
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	edx, DWORD PTR [ecx+eax]
	mov	esi, DWORD PTR [edx+28]
$LN134@one_con_po@3:

; 5318 :     set_prev_edge(newfe2,prev2); 

	cmp	DWORD PTR tv3104[ebp], 0
	je	SHORT $LN380@one_con_po@3
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN139@one_con_po@3
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	and	ebx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ebx*4]
	mov	ebx, DWORD PTR _newfe2$92142[ebp]
	mov	DWORD PTR [eax+32], edx
	jmp	SHORT $LN138@one_con_po@3
$LN139@one_con_po@3:
	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+28], esi
$LN138@one_con_po@3:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN380@one_con_po@3:

; 5319 :     set_next_edge(prev2,newfe2);

	test	esi, 268435456				; 10000000H
	je	SHORT $LN143@one_con_po@3
	mov	edx, esi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN144@one_con_po@3
	xor	ebx, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+28], ebx
	mov	ebx, DWORD PTR _newfe2$92142[ebp]
	jmp	SHORT $LN396@one_con_po@3
$LN144@one_con_po@3:
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+32], ebx
$LN396@one_con_po@3:
	mov	eax, DWORD PTR _web+460
$LN143@one_con_po@3:

; 5320 :     set_next_edge(newfe2,fe2);

	cmp	DWORD PTR tv3104[ebp], 0
	je	SHORT $LN381@one_con_po@3
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN149@one_con_po@3
	mov	edx, DWORD PTR _fe2$92140[ebp]
	xor	edx, 134217728				; 08000000H
	and	ebx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ebx*4]
	mov	ebx, DWORD PTR _newfe2$92142[ebp]
	mov	DWORD PTR [eax+28], edx
	jmp	SHORT $LN397@one_con_po@3
$LN149@one_con_po@3:
	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _fe2$92140[ebp]
	mov	DWORD PTR [eax+32], edx
$LN397@one_con_po@3:
	mov	eax, DWORD PTR _web+460
$LN381@one_con_po@3:

; 5321 :     set_prev_edge(fe2,newfe2);

	test	DWORD PTR _fe2$92140[ebp], 268435456	; 10000000H
	je	SHORT $LN156@one_con_po@3
	cmp	DWORD PTR tv3188[ebp], 0
	je	SHORT $LN154@one_con_po@3
	mov	eax, DWORD PTR [ecx+eax]
	mov	edx, ebx
	xor	edx, 134217728				; 08000000H
	mov	DWORD PTR [eax+32], edx
	jmp	SHORT $LN153@one_con_po@3
$LN154@one_con_po@3:
	mov	ecx, DWORD PTR [ecx+eax]
	mov	DWORD PTR [ecx+28], ebx
$LN153@one_con_po@3:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN156@one_con_po@3:

; 5322 : 
; 5323 :     cross_cut(prev1,newfe1);

	mov	edx, DWORD PTR _prev1$92143[ebp]
	push	edi
	push	edx
	call	_cross_cut

; 5324 :     cross_cut(prev2,newfe2);

	push	ebx
	push	esi
	call	_cross_cut

; 5325 : 
; 5326 :     /* move vertices apart a bit */
; 5327 :     xold = get_coord(v_id);

	mov	eax, DWORD PTR _web+104
	mov	ecx, DWORD PTR _dymem
	mov	edx, DWORD PTR [eax+ecx+64]
	mov	ecx, DWORD PTR _web+12

; 5328 :     xnew = get_coord(newv[1]);

	mov	esi, DWORD PTR _newv$[ebp+4]
	mov	eax, DWORD PTR tv2849[ebp]
	mov	eax, DWORD PTR [eax+ecx]
	and	esi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+esi*4]

; 5329 :     for ( i = 0 ; i < SDIM ; i++ )

	xor	esi, esi
	add	esp, 16					; 00000010H
	add	eax, edx
	add	ecx, edx
	cmp	DWORD PTR _web+616, esi
	jle	SHORT $LN378@one_con_po@3
	fld	QWORD PTR __real@3fb999999999999a
	lea	edx, DWORD PTR _sides$[ebp]
	lea	edi, DWORD PTR _sides$[ebp+96]
	lea	ebx, DWORD PTR _sides$[ebp+48]
	sub	edx, eax
	sub	edi, eax
	sub	ebx, eax
	sub	ecx, eax
$LN7@one_con_po@3:

; 5330 :     { xold[i] += 0.1 * sides[0][i] + 0.1 * sides[3][i]; 

	fld	QWORD PTR [edx+eax+144]
	inc	esi
	fmul	ST(0), ST(1)
	add	eax, 8
	fld	QWORD PTR [edx+eax-8]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fadd	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]

; 5331 :       xnew[i] += 0.1 * sides[1][i] + 0.1 * sides[2][i]; 

	fld	QWORD PTR [ebx+eax-8]
	fmul	ST(0), ST(1)
	fld	QWORD PTR [edi+eax-8]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fadd	QWORD PTR [ecx+eax-8]
	fstp	QWORD PTR [ecx+eax-8]
	cmp	esi, DWORD PTR _web+616
	jl	SHORT $LN7@one_con_po@3

; 5329 :     for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)
$LN378@one_con_po@3:
	mov	eax, DWORD PTR _newfe1$92141[ebp]

; 5332 :     }
; 5333 : 
; 5334 :     /* refine the new edge */
; 5335 :     cc_fe = get_next_edge(newfe1); /* need to save for later */

	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN159@one_con_po@3
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	esi, DWORD PTR [edx+28]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN158@one_con_po@3
$LN159@one_con_po@3:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	esi, DWORD PTR [edx+32]
$LN158@one_con_po@3:

; 5336 :     edge_refine(newe);

	mov	eax, DWORD PTR _newe$92147[ebp]
	push	eax
	call	_edge_refine

; 5337 : 
; 5338 :     /* Septum if bodies disagree */
; 5339 :     b1f = get_facet_body(f1);

	mov	ecx, DWORD PTR _web+328
	mov	edx, DWORD PTR _web+236
	mov	edi, DWORD PTR _dymem
	mov	eax, DWORD PTR _f1$92148[ebp]
	xor	ebx, ebx
	add	esp, 4
	cmp	DWORD PTR _web+400, ebx
	jne	SHORT $LN165@one_con_po@3
	mov	DWORD PTR _b1f$92153[ebp], ebx
	jmp	SHORT $LN162@one_con_po@3
$LN165@one_con_po@3:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN164@one_con_po@3
	mov	DWORD PTR _b1f$92153[ebp], ebx
	jmp	SHORT $LN162@one_con_po@3
$LN164@one_con_po@3:
	mov	ebx, DWORD PTR [ecx+edi+784]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN163@one_con_po@3
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ebx+4]
	jmp	SHORT $LN398@one_con_po@3
$LN163@one_con_po@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ebx]
$LN398@one_con_po@3:
	mov	DWORD PTR _b1f$92153[ebp], eax
	mov	eax, DWORD PTR _f1$92148[ebp]
$LN162@one_con_po@3:

; 5340 :     b1b = get_facet_body(inverse_id(f1));

	xor	eax, 134217728				; 08000000H
	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN171@one_con_po@3
	xor	eax, eax
	mov	DWORD PTR _b1b$92154[ebp], eax
	jmp	$LN354@one_con_po@3
$LN171@one_con_po@3:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN170@one_con_po@3
	mov	DWORD PTR _b1b$92154[ebp], 0
	jmp	SHORT $LN177@one_con_po@3
$LN170@one_con_po@3:
	mov	ebx, DWORD PTR [ecx+edi+784]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN169@one_con_po@3
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ebx+4]
	jmp	SHORT $LN403@one_con_po@3
$LN169@one_con_po@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ebx]
$LN403@one_con_po@3:
	mov	DWORD PTR _b1b$92154[ebp], eax

; 5341 :     b2f = get_facet_body(f2);

$LN177@one_con_po@3:
	mov	eax, DWORD PTR _f2$92149[ebp]
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN176@one_con_po@3
	mov	DWORD PTR _b2f$92155[ebp], 0
	jmp	SHORT $LN174@one_con_po@3
$LN176@one_con_po@3:
	mov	ebx, DWORD PTR [ecx+edi+784]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN175@one_con_po@3
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ebx+4]
	jmp	SHORT $LN354@one_con_po@3
$LN175@one_con_po@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ebx]
$LN354@one_con_po@3:
	mov	DWORD PTR _b2f$92155[ebp], eax
	mov	eax, DWORD PTR _f2$92149[ebp]
$LN174@one_con_po@3:

; 5342 :     b2b = get_facet_body(inverse_id(f2));

	xor	eax, 134217728				; 08000000H
	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN183@one_con_po@3
	mov	DWORD PTR _b2b$92156[ebp], 0
	jmp	SHORT $LN180@one_con_po@3
$LN183@one_con_po@3:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN182@one_con_po@3
	mov	DWORD PTR _b2b$92156[ebp], 0
	jmp	SHORT $LN180@one_con_po@3
$LN182@one_con_po@3:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN181@one_con_po@3
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [ecx+edi+784]
	mov	ecx, DWORD PTR [edx+eax+4]
	jmp	SHORT $LN399@one_con_po@3
$LN181@one_con_po@3:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [ecx+edi+784]
	mov	ecx, DWORD PTR [edx+eax]
$LN399@one_con_po@3:
	mov	DWORD PTR _b2b$92156[ebp], ecx
$LN180@one_con_po@3:

; 5343 :     /* figure out which side needs the septum, if any */
; 5344 :     fe_a = fe_b = NULLID;
; 5345 :     if ( !equal_id(b1b,b2f) )

	mov	eax, DWORD PTR _b2f$92155[ebp]
	mov	ebx, DWORD PTR _web+460
	xor	edx, edx
	xor	ecx, ecx
	mov	DWORD PTR _fe_b$92151[ebp], edx
	mov	DWORD PTR _fe_a$92150[ebp], ecx
	cmp	DWORD PTR _b1b$92154[ebp], eax
	je	SHORT $LN4@one_con_po@3

; 5346 :     { fe_a = newfe1;

	mov	ecx, DWORD PTR _newfe1$92141[ebp]
	mov	DWORD PTR _fe_a$92150[ebp], ecx

; 5347 :       fe_b = get_prev_edge(cc_fe);

	test	esi, 134217728				; 08000000H
	je	SHORT $LN187@one_con_po@3
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+esi*4]
	mov	edx, DWORD PTR [edx+32]
	xor	edx, 134217728				; 08000000H
	mov	DWORD PTR _fe_b$92151[ebp], edx
	jmp	SHORT $LN2@one_con_po@3
$LN187@one_con_po@3:
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+esi*4]
	mov	edx, DWORD PTR [eax+28]
	mov	DWORD PTR _fe_b$92151[ebp], edx
	jmp	SHORT $LN2@one_con_po@3
$LN4@one_con_po@3:

; 5348 :     }
; 5349 :     else if ( !equal_id(b1f,b2b) )

	mov	eax, DWORD PTR _b2b$92156[ebp]
	cmp	DWORD PTR _b1f$92153[ebp], eax
	je	SHORT $LN376@one_con_po@3

; 5350 :     { fe_a = inverse_id(get_prev_edge(cc_fe));

	test	esi, 134217728				; 08000000H
	je	SHORT $LN191@one_con_po@3
	and	esi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+esi*4]
	mov	eax, DWORD PTR [ecx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN190@one_con_po@3
$LN191@one_con_po@3:
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+esi*4]
	mov	eax, DWORD PTR [edx+28]
$LN190@one_con_po@3:

; 5351 :       fe_b = inverse_id(newfe1);

	mov	edx, DWORD PTR _newfe1$92141[ebp]
	xor	eax, 134217728				; 08000000H
	mov	ecx, eax
	xor	edx, 134217728				; 08000000H
	mov	DWORD PTR _fe_a$92150[ebp], ecx
	mov	DWORD PTR _fe_b$92151[ebp], edx
$LN376@one_con_po@3:
	mov	edi, DWORD PTR _dymem
$LN2@one_con_po@3:

; 5352 :     }
; 5353 :     if ( valid_id(fe_a) )

	test	ecx, 268435456				; 10000000H
	je	$LN379@one_con_po@3

; 5354 :     { /* put in new facet */
; 5355 :       edge_id span_e = new_edge( get_fe_headv(fe_b),get_fe_tailv(fe_a),v_id);

	mov	esi, DWORD PTR _web+124
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv3359[ebp], eax
	mov	eax, DWORD PTR [eax+ebx]
	mov	eax, DWORD PTR [eax+20]
	and	ecx, 134217728				; 08000000H
	xor	eax, ecx
	mov	DWORD PTR tv3366[ebp], ecx
	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+edi+304]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN197@one_con_po@3
	mov	edi, DWORD PTR _web+636
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	lea	eax, DWORD PTR [eax+edi*4]
	mov	edi, DWORD PTR [eax+ecx]
	jmp	SHORT $LN196@one_con_po@3
$LN197@one_con_po@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	edi, DWORD PTR [ecx+eax]
$LN196@one_con_po@3:
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv3388[ebp], eax
	mov	eax, DWORD PTR [eax+ebx]
	mov	eax, DWORD PTR [eax+20]
	and	edx, 134217728				; 08000000H
	xor	eax, edx
	mov	DWORD PTR tv3395[ebp], edx
	test	eax, 134217728				; 08000000H
	je	SHORT $LN203@one_con_po@3
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+eax*4]
	mov	ecx, DWORD PTR [ecx+edx]
	jmp	SHORT $LN202@one_con_po@3
$LN203@one_con_po@3:
	mov	edx, DWORD PTR _web+636
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR [eax+ecx]
$LN202@one_con_po@3:
	mov	edx, DWORD PTR _v_id$GSCopy$[ebp]
	push	edx
	push	edi
	push	ecx
	call	_new_edge
	mov	edi, eax

; 5356 :       facet_id span_f = new_facet();

	call	_new_facet
	mov	ebx, eax

; 5357 :       facetedge_id span_fe = new_facetedge(span_f,span_e);

	push	edi
	push	ebx
	mov	DWORD PTR _span_f$92180[ebp], ebx
	call	_new_facetedge

; 5358 :       facetedge_id fe_a_new = new_facetedge(span_f,get_fe_edge(fe_a));

	mov	ecx, DWORD PTR tv3359[ebp]
	mov	esi, eax
	mov	eax, DWORD PTR _web+460
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR [edx+20]
	xor	eax, DWORD PTR tv3366[ebp]
	push	eax
	push	ebx
	call	_new_facetedge

; 5359 :       facetedge_id fe_b_new = new_facetedge(span_f,get_fe_edge(fe_b));

	mov	ecx, DWORD PTR tv3388[ebp]
	mov	ebx, eax
	mov	eax, DWORD PTR _web+460
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR [edx+20]
	xor	eax, DWORD PTR tv3395[ebp]
	push	eax
	mov	eax, DWORD PTR _span_f$92180[ebp]
	push	eax
	call	_new_facetedge

; 5360 :       facetedge_id fe_c,fe_d;
; 5361 :       
; 5362 :       set_facet_fe(span_f,span_fe);

	mov	ecx, DWORD PTR _span_f$92180[ebp]
	push	esi
	push	ecx
	mov	DWORD PTR _fe_b_new$92183[ebp], eax
	call	_set_facet_fe
	add	esp, 44					; 0000002cH

; 5363 :       set_edge_fe(span_e,span_fe);

	mov	eax, esi
	test	edi, 134217728				; 08000000H
	je	SHORT $LN373@one_con_po@3
	xor	eax, 134217728				; 08000000H
$LN373@one_con_po@3:
	mov	edx, DWORD PTR _web+124

; 5364 :       set_facet_density(span_f,1.0);

	fld1
	and	edi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR _span_f$92180[ebp]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+236
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]

; 5365 :       set_next_edge(span_fe,fe_a_new);

	mov	eax, esi
	fstp	QWORD PTR [ecx+32]
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv3432[ebp], eax
	je	SHORT $LN385@one_con_po@3
	test	esi, 134217728				; 08000000H
	je	SHORT $LN214@one_con_po@3
	mov	ecx, DWORD PTR _web+460
	mov	edx, ebx
	xor	edx, 134217728				; 08000000H
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+28], edx
	jmp	SHORT $LN385@one_con_po@3
$LN214@one_con_po@3:
	mov	edx, DWORD PTR _web+460
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [eax+32], ebx
$LN385@one_con_po@3:

; 5366 :       set_next_edge(fe_a_new,fe_b_new);

	mov	eax, ebx
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv3448[ebp], eax
	je	SHORT $LN374@one_con_po@3
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN219@one_con_po@3
	mov	edx, DWORD PTR _fe_b_new$92183[ebp]
	mov	edi, DWORD PTR _web+460
	mov	ecx, edx
	xor	ecx, 134217728				; 08000000H
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	DWORD PTR [eax+28], ecx
	jmp	SHORT $LN218@one_con_po@3
$LN219@one_con_po@3:
	mov	edx, DWORD PTR _web+460
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _fe_b_new$92183[ebp]
	mov	DWORD PTR [eax+32], edx
	jmp	SHORT $LN218@one_con_po@3
$LN374@one_con_po@3:
	mov	edx, DWORD PTR _fe_b_new$92183[ebp]
$LN218@one_con_po@3:

; 5367 :       set_next_edge(fe_b_new,span_fe);

	mov	eax, edx
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv3464[ebp], eax
	je	SHORT $LN223@one_con_po@3
	mov	edi, DWORD PTR _web+460
	test	edx, 134217728				; 08000000H
	je	SHORT $LN224@one_con_po@3
	mov	ecx, esi
	xor	ecx, 134217728				; 08000000H
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	DWORD PTR [eax+28], ecx
	mov	eax, DWORD PTR tv3464[ebp]
	jmp	SHORT $LN223@one_con_po@3
$LN224@one_con_po@3:
	mov	ecx, edx
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR [ecx+32], esi
$LN223@one_con_po@3:

; 5368 :       set_prev_edge(span_fe,fe_b_new);

	cmp	DWORD PTR tv3432[ebp], 0
	je	SHORT $LN231@one_con_po@3
	mov	edi, DWORD PTR _web+460
	mov	ecx, esi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN229@one_con_po@3
	mov	eax, edx
	xor	eax, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR [ecx+32], eax
	mov	eax, DWORD PTR tv3464[ebp]
	jmp	SHORT $LN228@one_con_po@3
$LN229@one_con_po@3:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR [ecx+28], edx
$LN228@one_con_po@3:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN231@one_con_po@3:

; 5369 :       set_prev_edge(fe_b_new,fe_a_new);

	test	eax, eax
	je	SHORT $LN236@one_con_po@3
	test	edx, 134217728				; 08000000H
	je	SHORT $LN234@one_con_po@3
	mov	edi, DWORD PTR _web+460
	mov	eax, ebx
	xor	eax, 134217728				; 08000000H
	mov	ecx, edx
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR [ecx+32], eax
	jmp	SHORT $LN233@one_con_po@3
$LN234@one_con_po@3:
	mov	ecx, DWORD PTR _web+460
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+28], ebx
$LN233@one_con_po@3:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN236@one_con_po@3:

; 5370 :       set_prev_edge(fe_a_new,span_fe);

	cmp	DWORD PTR tv3448[ebp], 0
	je	SHORT $LN241@one_con_po@3
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN239@one_con_po@3
	mov	edi, DWORD PTR _web+460
	mov	ecx, esi
	xor	ecx, 134217728				; 08000000H
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	DWORD PTR [eax+32], ecx
	jmp	SHORT $LN238@one_con_po@3
$LN239@one_con_po@3:
	mov	eax, DWORD PTR _web+460
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [ecx+28], esi
$LN238@one_con_po@3:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN241@one_con_po@3:

; 5371 :       set_next_facet(span_fe,span_fe);

	cmp	DWORD PTR tv3432[ebp], 0
	je	SHORT $LN386@one_con_po@3
	mov	eax, esi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN244@one_con_po@3
	mov	edi, DWORD PTR _web+460
	xor	eax, 134217728				; 08000000H
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR [ecx+36], eax
	jmp	SHORT $LN243@one_con_po@3
$LN244@one_con_po@3:
	mov	ecx, DWORD PTR _web+460
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+40], esi
$LN243@one_con_po@3:

; 5372 :       set_prev_facet(span_fe,span_fe);

	cmp	DWORD PTR tv3432[ebp], 0
	je	SHORT $LN386@one_con_po@3
	mov	eax, DWORD PTR _web+460
	mov	ecx, esi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN249@one_con_po@3
	xor	ecx, 134217728				; 08000000H
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [eax+40], ecx
	jmp	SHORT $LN248@one_con_po@3
$LN249@one_con_po@3:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [ecx+36], esi
$LN248@one_con_po@3:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN386@one_con_po@3:

; 5373 :       fe_c = get_next_facet(fe_a);

	mov	eax, DWORD PTR _fe_a$92150[ebp]
	mov	ecx, DWORD PTR tv3359[ebp]
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR tv3489[ebp], eax
	mov	eax, DWORD PTR _web+460
	mov	ecx, DWORD PTR [ecx+eax]
	je	SHORT $LN254@one_con_po@3
	mov	esi, DWORD PTR [ecx+36]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN401@one_con_po@3
$LN254@one_con_po@3:
	mov	esi, DWORD PTR [ecx+40]
$LN401@one_con_po@3:

; 5374 :       fe_d = get_next_facet(fe_b);

	mov	edi, DWORD PTR _fe_b$92151[ebp]
	shr	edi, 27					; 0000001bH
	and	edi, 1
	mov	DWORD PTR tv3499[ebp], edi
	mov	edi, DWORD PTR tv3388[ebp]
	mov	eax, DWORD PTR [edi+eax]
	mov	DWORD PTR _fe_c$92184[ebp], esi
	je	SHORT $LN258@one_con_po@3
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN257@one_con_po@3
$LN258@one_con_po@3:
	mov	eax, DWORD PTR [eax+40]
$LN257@one_con_po@3:

; 5375 :       
; 5376 :       set_next_facet(fe_a,fe_a_new);

	cmp	DWORD PTR tv3489[ebp], 0
	je	SHORT $LN262@one_con_po@3
	mov	edi, ebx
	xor	edi, 134217728				; 08000000H
	mov	DWORD PTR [ecx+36], edi
	jmp	SHORT $LN261@one_con_po@3
$LN262@one_con_po@3:
	mov	DWORD PTR [ecx+40], ebx
$LN261@one_con_po@3:

; 5377 :       set_next_facet(fe_a_new,fe_c);

	cmp	DWORD PTR tv3448[ebp], 0
	je	SHORT $LN383@one_con_po@3
	mov	edi, DWORD PTR _web+460
	mov	ecx, ebx
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN267@one_con_po@3
	xor	esi, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR [ecx+36], esi
	mov	esi, DWORD PTR _fe_c$92184[ebp]
	jmp	SHORT $LN383@one_con_po@3
$LN267@one_con_po@3:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR [ecx+40], esi
$LN383@one_con_po@3:

; 5378 :       set_prev_facet(fe_c,fe_a_new);

	mov	ecx, esi
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	mov	DWORD PTR tv3515[ebp], ecx
	je	SHORT $LN274@one_con_po@3
	mov	edi, DWORD PTR _web+460
	test	esi, 134217728				; 08000000H
	je	SHORT $LN272@one_con_po@3
	mov	ecx, ebx
	xor	ecx, 134217728				; 08000000H
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edi+esi*4]
	mov	DWORD PTR [esi+40], ecx
	mov	esi, DWORD PTR _fe_c$92184[ebp]
	jmp	SHORT $LN271@one_con_po@3
$LN272@one_con_po@3:
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR [ecx+36], ebx
$LN271@one_con_po@3:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN274@one_con_po@3:

; 5379 :       set_prev_facet(fe_a_new,fe_a);

	cmp	DWORD PTR tv3448[ebp], 0
	je	SHORT $LN279@one_con_po@3
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN277@one_con_po@3
	mov	ecx, DWORD PTR _fe_a$92150[ebp]
	mov	edi, DWORD PTR _web+460
	xor	ecx, 134217728				; 08000000H
	and	ebx, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edi+ebx*4]
	mov	DWORD PTR [edi+40], ecx
	jmp	SHORT $LN276@one_con_po@3
$LN277@one_con_po@3:
	mov	ecx, DWORD PTR _web+460
	mov	edi, DWORD PTR _fe_a$92150[ebp]
	and	ebx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+ebx*4]
	mov	DWORD PTR [ecx+36], edi
$LN276@one_con_po@3:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN279@one_con_po@3:

; 5380 :       
; 5381 :       set_next_facet(fe_b,fe_b_new);

	test	DWORD PTR _fe_b$92151[ebp], 268435456	; 10000000H
	je	SHORT $LN281@one_con_po@3
	cmp	DWORD PTR tv3499[ebp], 0
	je	SHORT $LN282@one_con_po@3
	mov	edi, DWORD PTR _web+460
	mov	ebx, DWORD PTR tv3388[ebp]
	mov	edi, DWORD PTR [ebx+edi]
	mov	ecx, edx
	xor	ecx, 134217728				; 08000000H
	mov	DWORD PTR [edi+36], ecx
	jmp	SHORT $LN281@one_con_po@3
$LN282@one_con_po@3:
	mov	ecx, DWORD PTR _web+460
	mov	edi, DWORD PTR tv3388[ebp]
	mov	ecx, DWORD PTR [edi+ecx]
	mov	DWORD PTR [ecx+40], edx
$LN281@one_con_po@3:

; 5382 :       set_next_facet(fe_b_new,fe_d);

	cmp	DWORD PTR tv3464[ebp], 0
	je	SHORT $LN286@one_con_po@3
	test	edx, 134217728				; 08000000H
	je	SHORT $LN287@one_con_po@3
	mov	ebx, DWORD PTR _web+460
	mov	ecx, eax
	xor	ecx, 134217728				; 08000000H
	mov	edi, edx
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR [edi+36], ecx
	jmp	SHORT $LN286@one_con_po@3
$LN287@one_con_po@3:
	mov	edi, DWORD PTR _web+460
	mov	ecx, edx
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR [ecx+40], eax
$LN286@one_con_po@3:

; 5383 :       set_prev_facet(fe_d,fe_b_new);

	test	eax, 268435456				; 10000000H
	je	SHORT $LN387@one_con_po@3
	test	eax, 134217728				; 08000000H
	je	SHORT $LN292@one_con_po@3
	mov	edi, DWORD PTR _web+460
	mov	ecx, edx
	xor	ecx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	DWORD PTR [eax+40], ecx
	jmp	SHORT $LN291@one_con_po@3
$LN292@one_con_po@3:
	mov	ecx, DWORD PTR _web+460
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+36], edx
$LN291@one_con_po@3:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN387@one_con_po@3:

; 5384 :       set_prev_facet(fe_b_new,fe_b);

	cmp	DWORD PTR tv3464[ebp], 0
	je	SHORT $LN388@one_con_po@3
	test	edx, 134217728				; 08000000H
	je	SHORT $LN297@one_con_po@3
	mov	eax, DWORD PTR _fe_b$92151[ebp]
	mov	ecx, DWORD PTR _web+460
	xor	eax, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN296@one_con_po@3
$LN297@one_con_po@3:
	mov	eax, DWORD PTR _web+460
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _fe_b$92151[ebp]
	mov	DWORD PTR [ecx+36], edx
$LN296@one_con_po@3:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN388@one_con_po@3:

; 5385 :       
; 5386 :       set_facet_body(span_f,get_facet_body(inverse_id(get_fe_facet(fe_a))));

	cmp	DWORD PTR tv3489[ebp], 0
	mov	eax, DWORD PTR _web+460
	mov	ecx, DWORD PTR tv3359[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR [edx+24]
	je	SHORT $LN389@one_con_po@3
	xor	eax, 134217728				; 08000000H
$LN389@one_con_po@3:
	xor	eax, 134217728				; 08000000H
	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN308@one_con_po@3
	xor	eax, eax
	jmp	SHORT $LN305@one_con_po@3
$LN308@one_con_po@3:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN307@one_con_po@3
	xor	eax, eax
	jmp	SHORT $LN305@one_con_po@3
$LN307@one_con_po@3:
	mov	ecx, DWORD PTR _web+236
	test	eax, 134217728				; 08000000H
	je	SHORT $LN306@one_con_po@3
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax+4]
	jmp	SHORT $LN305@one_con_po@3
$LN306@one_con_po@3:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax]
$LN305@one_con_po@3:
	mov	edi, DWORD PTR _span_f$92180[ebp]
	push	eax
	push	edi
	call	_set_facet_body
	add	esp, 8

; 5387 :       set_facet_body(inverse_id(span_f),get_facet_body(get_fe_facet(fe_c)));

	cmp	DWORD PTR tv3515[ebp], 0
	jne	SHORT $LN312@one_con_po@3
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN311@one_con_po@3
$LN312@one_con_po@3:
	mov	edx, DWORD PTR _web+460
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR [eax+24]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN311@one_con_po@3
	xor	eax, 134217728				; 08000000H
$LN311@one_con_po@3:
	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN318@one_con_po@3
$LN402@one_con_po@3:
	xor	eax, eax
	jmp	SHORT $LN315@one_con_po@3
$LN318@one_con_po@3:
	test	eax, 268435456				; 10000000H
	je	SHORT $LN402@one_con_po@3
	mov	ecx, DWORD PTR _web+236
	test	eax, 134217728				; 08000000H
	je	SHORT $LN316@one_con_po@3
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax+4]
	jmp	SHORT $LN315@one_con_po@3
$LN316@one_con_po@3:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax]
$LN315@one_con_po@3:
	push	eax
	xor	edi, 134217728				; 08000000H
	push	edi
	call	_set_facet_body
	add	esp, 8
$LN379@one_con_po@3:

; 5388 :       
; 5389 :     }
; 5390 :     
; 5391 :     
; 5392 :   } /* end pulled-out triangle */
; 5393 :   return 1;
; 5394 : 
; 5395 : } // end one_con_pop_4()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	mov	eax, 1
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_one_con_pop_4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@NHDLLENJ@Can?8t?5handle?5over?520?9valence?5edg@ ; `string'
PUBLIC	??_C@_0CM@JHCEOILD@Pop_edge_to_tri?5not?5applicable?5t@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_pop_edge_to_tri_con
;	COMDAT ??_C@_0CO@NHDLLENJ@Can?8t?5handle?5over?520?9valence?5edg@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0CO@NHDLLENJ@Can?8t?5handle?5over?520?9valence?5edg@ DB 'Can''t han'
	DB	'dle over 20-valence edge %s! Sorry.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@JHCEOILD@Pop_edge_to_tri?5not?5applicable?5t@
CONST	SEGMENT
??_C@_0CM@JHCEOILD@Pop_edge_to_tri?5not?5applicable?5t@ DB 'Pop_edge_to_t'
	DB	'ri not applicable to edge %s.', 0aH, 00H	; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\popfilm.c
CONST	ENDS
;	COMDAT _pop_edge_to_tri_con
_TEXT	SEGMENT
_start_e$ = -176					; size = 4
_v_id$ = -172						; size = 4
tv259 = -168						; size = 4
_triples$ = -164					; size = 80
_con_edges$ = -84					; size = 80
__$ArrayPad$ = -4					; size = 4
_e_id$ = 8						; size = 4
_pop_edge_to_tri_con PROC				; COMDAT

; 5409 : { vertex_id v_id = get_edge_tailv(e_id);

	push	ebp
	mov	ebp, esp
	sub	esp, 176				; 000000b0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	mov	esi, DWORD PTR _e_id$[ebp]
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	push	edi
	mov	DWORD PTR tv259[ebp], eax
	test	esi, 134217728				; 08000000H
	je	SHORT $LN19@pop_edge_t
	mov	ecx, DWORD PTR _web+124
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _v_id$[ebp], ecx
	jmp	SHORT $LN18@pop_edge_t
$LN19@pop_edge_t:
	mov	edx, DWORD PTR _web+124
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+edx+304]
	mov	edx, DWORD PTR [eax+ecx]
	mov	DWORD PTR _v_id$[ebp], edx
$LN18@pop_edge_t:

; 5410 :   edge_id ee_id, start_e;
; 5411 :   int retval;
; 5412 :   int concount = 0,tripcount = 0;
; 5413 :   edge_id triples[20];
; 5414 :   edge_id con_edges[20];
; 5415 : 
; 5416 :   retval = delete_edge(e_id);

	push	esi
	xor	ebx, ebx
	xor	edi, edi
	call	_delete_edge
	add	esp, 4

; 5417 :   if ( retval == 0 ) 

	test	eax, eax

; 5418 :     return 0;

	je	$LN3@pop_edge_t

; 5419 :   free_element(e_id); /* quirk of delete_edge */

	push	esi
	call	_free_element

; 5420 : 
; 5421 :   /* gather data for one_con_pop_3 */
; 5422 :   ee_id = start_e = get_vertex_edge(v_id);

	mov	eax, DWORD PTR _v_id$[ebp]
	mov	ecx, DWORD PTR _web+12
	add	esp, 4
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	esi, DWORD PTR [edx+28]
	mov	DWORD PTR _start_e$[ebp], esi
	npad	7
$LL10@pop_edge_t:

; 5423 :   do
; 5424 :   { int valence = get_edge_valence(ee_id); 

	push	esi
	call	_get_edge_valence
	add	esp, 4

; 5425 :     if ( valence == 3 )

	cmp	eax, 3
	jne	SHORT $LN7@pop_edge_t

; 5426 :       triples[tripcount++] = ee_id;

	mov	DWORD PTR _triples$[ebp+edi*4], esi
	inc	edi

; 5427 :     if ( valence == 1 )

	jmp	SHORT $LN27@pop_edge_t
$LN7@pop_edge_t:
	cmp	eax, 1
	jne	SHORT $LN27@pop_edge_t

; 5428 :       con_edges[concount++] = ee_id;

	mov	DWORD PTR _con_edges$[ebp+ebx*4], esi
	inc	ebx
$LN27@pop_edge_t:

; 5429 :     ee_id = get_next_tail_edge(ee_id);

	mov	ecx, DWORD PTR _web+124
	mov	eax, esi
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+esi*4]
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	esi, DWORD PTR [edx+eax*4+32]

; 5430 :     if ( tripcount >= 20 || concount >= 20 )

	cmp	edi, 20					; 00000014H
	jge	$LN4@pop_edge_t
	cmp	ebx, 20					; 00000014H
	jge	$LN4@pop_edge_t

; 5435 :       }
; 5436 :       return 0;
; 5437 :     }
; 5438 :   } while ( !equal_id(ee_id,start_e) );

	cmp	esi, DWORD PTR _start_e$[ebp]
	jne	SHORT $LL10@pop_edge_t

; 5439 :   if ( tripcount != concount )

	cmp	edi, ebx
	je	SHORT $LN2@pop_edge_t

; 5440 :   { if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	$LN3@pop_edge_t

; 5441 :     { sprintf(msg,"Pop_edge_to_tri not applicable to edge %s.\n",ELNAME(e_id));

	test	DWORD PTR _e_id$[ebp], 268435456	; 10000000H
	je	SHORT $LN16@pop_edge_t
	mov	eax, DWORD PTR tv259[ebp]
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	push	eax
	push	OFFSET ??_C@_0CM@JHCEOILD@Pop_edge_to_tri?5not?5applicable?5t@

; 5442 :       outstring(msg);
; 5443 :     }
; 5444 :     return 0;

	jmp	SHORT $LN28@pop_edge_t
$LN16@pop_edge_t:

; 5441 :     { sprintf(msg,"Pop_edge_to_tri not applicable to edge %s.\n",ELNAME(e_id));

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	eax
	push	OFFSET ??_C@_0CM@JHCEOILD@Pop_edge_to_tri?5not?5applicable?5t@

; 5442 :       outstring(msg);
; 5443 :     }
; 5444 :     return 0;

	jmp	SHORT $LN28@pop_edge_t
$LN2@pop_edge_t:

; 5445 :   }
; 5446 :   return one_con_pop_3(v_id,tripcount,triples,con_edges,POP_TO_OPEN);

	mov	edx, DWORD PTR _v_id$[ebp]
	push	1
	lea	eax, DWORD PTR _con_edges$[ebp]
	push	eax
	lea	ecx, DWORD PTR _triples$[ebp]
	push	ecx
	push	edi
	push	edx
	call	_one_con_pop_3
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 5447 : } // end pop_edge_to_tri_con()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@pop_edge_t:

; 5431 :     { if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	SHORT $LN3@pop_edge_t

; 5432 :       { sprintf(msg,"Can't handle over 20-valence edge %s! Sorry.\n",
; 5433 :            ELNAME(e_id)); 

	test	DWORD PTR _e_id$[ebp], 268435456	; 10000000H
	je	SHORT $LN14@pop_edge_t
	mov	eax, DWORD PTR tv259[ebp]
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN15@pop_edge_t
$LN14@pop_edge_t:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN15@pop_edge_t:
	push	eax
	push	OFFSET ??_C@_0CO@NHDLLENJ@Can?8t?5handle?5over?520?9valence?5edg@
$LN28@pop_edge_t:
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_sprintf

; 5434 :         outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 16					; 00000010H
$LN3@pop_edge_t:

; 5447 : } // end pop_edge_to_tri_con()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	xor	eax, eax
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_pop_edge_to_tri_con ENDP
_TEXT	ENDS
PUBLIC	_try_prop
EXTRN	_NULLFACETEDGE:DWORD
EXTRN	_v_hit_constraint_count:PROC
; Function compile flags: /Ogtp
;	COMDAT _try_prop
_TEXT	SEGMENT
tv553 = -24						; size = 4
_next_e$ = -20						; size = 4
tv545 = -16						; size = 4
_new_key$ = -12						; size = 4
tv547 = -8						; size = 4
tv554 = -4						; size = 4
_splitflag$ = -4					; size = 4
_pass_key$ = 8						; size = 4
_start_key$ = 12					; size = 4
_this_septum_flag$ = 16					; size = 4
_try_prop PROC						; COMDAT

; 460  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 461  :   int splitflag=0;
; 462  :   int propflag=0;
; 463  :   facetedge_id wing_fe;
; 464  :   facetedge_id flip_fe;
; 465  :   facetedge_id new_key=0;
; 466  :   facetedge_id key_fe = *pass_key;

	mov	eax, DWORD PTR _pass_key$[ebp]
	mov	edx, DWORD PTR [eax]
	push	ebx

; 467  :   edge_id e_id = get_fe_edge(key_fe);

	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	push	esi
	add	eax, eax
	add	eax, eax
	push	edi
	mov	edi, DWORD PTR _web+460
	mov	ecx, DWORD PTR [eax+edi]
	mov	ecx, DWORD PTR [ecx+20]
	mov	ebx, edx
	and	ebx, 134217728				; 08000000H
	xor	esi, esi
	mov	DWORD PTR tv554[ebp], ebx
	xor	ebx, ecx
	mov	DWORD PTR _new_key$[ebp], esi
	mov	DWORD PTR tv545[ebp], edx
	mov	DWORD PTR tv547[ebp], eax
	mov	DWORD PTR tv553[ebp], ecx

; 468  :   edge_id next_e=0;

	mov	DWORD PTR _next_e$[ebp], esi

; 469  : 
; 470  :   if ( !valid_id(*pass_key) ) return 0;

	test	edx, 268435456				; 10000000H
	jne	SHORT $LN28@try_prop
$LN82@try_prop:
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx

; 577  : } /* end try_prop */

	mov	esp, ebp
	pop	ebp
	ret	0
$LN28@try_prop:

; 471  : 
; 472  :   /* if ( get_vattr(get_fe_headv(key_fe)) & FIXED ) return 0; */
; 473  : 
; 474  :   /* don't even try if valence is already <= 3 */
; 475  :   /*if ( get_edge_valence(e_id) <= 3 ) return 0; */
; 476  : 
; 477  :   /* swing forward on one side until find multiple edge */
; 478  :   flip_fe = inverse_id(key_fe);

	mov	ecx, edx
	xor	ecx, 134217728				; 08000000H
	npad	4
$LL27@try_prop:

; 479  :   for (;;)
; 480  :   {
; 481  :     wing_fe = get_next_edge(inverse_id(flip_fe));

	xor	ecx, 134217728				; 08000000H
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN34@try_prop
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+ecx*4]
	mov	esi, DWORD PTR [edx+28]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN33@try_prop
$LN34@try_prop:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	esi, DWORD PTR [ecx+32]
$LN33@try_prop:

; 482  :     if ( equal_id(wing_fe,start_key) )

	cmp	esi, DWORD PTR _start_key$[ebp]
	je	SHORT $LN77@try_prop

; 487  :     }
; 488  :     flip_fe = get_next_facet(wing_fe);

	test	esi, 134217728				; 08000000H
	je	SHORT $LN38@try_prop
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+edx*4]
	mov	ecx, DWORD PTR [eax+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN37@try_prop
$LN38@try_prop:
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	ecx, DWORD PTR [eax+40]
$LN37@try_prop:

; 489  :     if ( equal_id(wing_fe,flip_fe) )

	cmp	esi, ecx
	je	SHORT $LN78@try_prop

; 495  :       break;
; 496  :     }
; 497  :     if ( !equal_id(wing_fe,get_next_facet(flip_fe))
; 498  :         || (get_eattr(get_fe_edge(wing_fe)) & (FIXED|BOUNDARY|CONSTRAINT)) )

	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+edx*4]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN44@try_prop
	mov	edx, DWORD PTR [edx+36]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN43@try_prop
$LN44@try_prop:
	mov	edx, DWORD PTR [edx+40]
$LN43@try_prop:
	cmp	esi, edx
	jne	$LN79@try_prop
	mov	eax, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _web+124
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1216				; 000004c0H
	xor	edx, edx
	or	eax, edx
	jne	SHORT $LN79@try_prop

; 515  :       { /* have cirque crossing proposed split */
; 516  :         /* which ends propagation */
; 517  :         splitflag = 0;
; 518  :         propflag = 0;
; 519  :       }
; 520  :       break;
; 521  :     }
; 522  :   }

	mov	eax, DWORD PTR tv547[ebp]
	jmp	$LL27@try_prop
$LN77@try_prop:

; 483  :     { /* have made complete loop around */
; 484  :       splitflag = 1;

	mov	DWORD PTR _splitflag$[ebp], 1

; 485  :       propflag = 0;

	xor	ebx, ebx

; 486  :       break;

	jmp	SHORT $LN16@try_prop
$LN78@try_prop:

; 490  :     { /* dead end on wing, so OK to split vertex maybe */
; 491  :       if ( edge_degfree(get_fe_edge(wing_fe)) >= 2 )

	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+eax*4]
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [ecx+20]
	push	esi
	call	_edge_degfree
	xor	edx, edx
	add	esp, 4
	cmp	eax, 2
	setge	dl

; 492  :         splitflag = 1;
; 493  :       else splitflag = 0;
; 494  :       propflag = 0;

	xor	ebx, ebx
	mov	eax, edx
	mov	DWORD PTR _splitflag$[ebp], eax

; 523  :   if ( !splitflag ) return 0;

	test	eax, eax
	je	$LN82@try_prop
$LN84@try_prop:
	mov	eax, DWORD PTR tv547[ebp]
$LN16@try_prop:

; 524  : 
; 525  :   /* swing forward on other side until find multiple edge */
; 526  :   flip_fe = inverse_id(get_prev_facet(key_fe));

	test	DWORD PTR tv545[ebp], 134217728		; 08000000H
	je	$LN54@try_prop
	mov	eax, DWORD PTR [eax+edi]
	mov	edx, DWORD PTR [eax+40]
	xor	edx, 134217728				; 08000000H
	jmp	$LN53@try_prop
$LN79@try_prop:

; 499  :     { /* have found multiple edge, or wall or wire */
; 500  :       next_e = get_fe_edge(wing_fe);

	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+eax*4]
	mov	eax, esi
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]

; 501  :       if ( !equal_element(e_id,next_e) )

	or	ebx, 134217728				; 08000000H
	mov	DWORD PTR _next_e$[ebp], eax
	or	eax, 134217728				; 08000000H
	cmp	ebx, eax
	je	SHORT $LN19@try_prop

; 502  :       { /* have found legitimate next edge */
; 503  :         splitflag = 1;

	mov	ebx, 1
	mov	DWORD PTR _splitflag$[ebp], ebx

; 504  :         propflag = 1;
; 505  :         new_key = wing_fe;

	mov	DWORD PTR _new_key$[ebp], esi

; 506  :         break;

	jmp	SHORT $LN84@try_prop
$LN19@try_prop:

; 507  :       }
; 508  :       if ( equal_element(wing_fe,get_prev_facet(key_fe)) &&
; 509  :             v_hit_constraint_count(get_fe_headv(key_fe)) )

	mov	edx, DWORD PTR tv545[ebp]
	push	edx
	call	_get_prev_facet
	or	eax, 134217728				; 08000000H
	or	esi, 134217728				; 08000000H
	add	esp, 4
	cmp	esi, eax
	jne	$LN82@try_prop
	mov	eax, DWORD PTR tv554[ebp]
	xor	eax, DWORD PTR tv553[ebp]
	push	eax
	call	_get_edge_headv
	push	eax
	call	_v_hit_constraint_count
	add	esp, 8
	test	eax, eax
	je	$LN82@try_prop

; 510  :       { /* have cirque, so OK to split, but no propagation */
; 511  :         splitflag = 1;
; 512  :         propflag = 0;
; 513  :       }
; 514  :       else

	mov	edi, DWORD PTR _web+460
	mov	DWORD PTR _splitflag$[ebp], 1
	xor	ebx, ebx
	jmp	$LN84@try_prop

; 524  : 
; 525  :   /* swing forward on other side until find multiple edge */
; 526  :   flip_fe = inverse_id(get_prev_facet(key_fe));

$LN54@try_prop:
	mov	ecx, DWORD PTR [eax+edi]
	mov	edx, DWORD PTR [ecx+36]
$LN53@try_prop:
	xor	edx, 134217728				; 08000000H
$LL15@try_prop:

; 527  :   for (;;)
; 528  :   {
; 529  :     wing_fe = get_next_edge(inverse_id(flip_fe));

	mov	eax, edx
	xor	eax, 134217728				; 08000000H
	test	eax, 134217728				; 08000000H
	je	SHORT $LN58@try_prop
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN57@try_prop
$LN58@try_prop:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [eax+32]
$LN57@try_prop:

; 530  :     flip_fe = get_next_facet(wing_fe);

	test	eax, 134217728				; 08000000H
	je	SHORT $LN62@try_prop
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	edx, DWORD PTR [ecx+36]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN61@try_prop
$LN62@try_prop:
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+edx*4]
	mov	edx, DWORD PTR [ecx+40]
$LN61@try_prop:

; 531  :     if ( equal_id(wing_fe,flip_fe) )

	cmp	eax, edx
	je	SHORT $LN80@try_prop

; 536  :       break;
; 537  :     }
; 538  :     if ( !equal_id(wing_fe,get_next_facet(flip_fe)) 
; 539  :         || (get_eattr(get_fe_edge(wing_fe)) & (FIXED|BOUNDARY|CONSTRAINT)) )

	mov	esi, edx
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edi+esi*4]
	test	edx, 134217728				; 08000000H
	je	SHORT $LN68@try_prop
	mov	esi, DWORD PTR [esi+36]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN67@try_prop
$LN68@try_prop:
	mov	esi, DWORD PTR [esi+40]
$LN67@try_prop:
	cmp	eax, esi
	jne	SHORT $LN86@try_prop
	mov	ecx, DWORD PTR [ecx+20]
	mov	esi, DWORD PTR _web+124
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	ecx, DWORD PTR [ecx+8]
	and	ecx, 1216				; 000004c0H
	xor	esi, esi
	or	ecx, esi
	je	$LL15@try_prop
$LN86@try_prop:

; 540  :     { /* have found multiple edge */
; 541  :       if ( !equal_id(get_fe_edge(wing_fe),next_e) )

	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	cmp	eax, DWORD PTR _next_e$[ebp]
	je	SHORT $LN9@try_prop

; 542  :       {
; 543  :         /* can't split; have serious nonminimal vertex */
; 544  :         splitflag = 0;

	xor	ebx, ebx
	mov	DWORD PTR _splitflag$[ebp], ebx

; 545  :         propflag = 0;
; 546  :         break;
; 547  :       }
; 548  :       else /* check normals */
; 549  :       {
; 550  :       }
; 551  :       break;
; 552  :     }
; 553  :   }
; 554  : 
; 555  :   if ( !propflag ) new_key = NULLID;

	xor	esi, esi
	jmp	SHORT $LN7@try_prop
$LN80@try_prop:

; 532  :     { /* dead end on wing, so OK to split vertex maybe */
; 533  :       if ( edge_degfree(get_fe_edge(wing_fe)) < 2 )

	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	push	eax
	call	_edge_degfree
	add	esp, 4
	cmp	eax, 2
	jge	SHORT $LN85@try_prop

; 534  :         splitflag = 0;

	mov	DWORD PTR _splitflag$[ebp], 0
$LN85@try_prop:

; 535  :       propflag = 0;

	xor	ebx, ebx

; 545  :         propflag = 0;
; 546  :         break;
; 547  :       }
; 548  :       else /* check normals */
; 549  :       {
; 550  :       }
; 551  :       break;
; 552  :     }
; 553  :   }
; 554  : 
; 555  :   if ( !propflag ) new_key = NULLID;

	xor	esi, esi
	jmp	SHORT $LN7@try_prop
$LN9@try_prop:
	test	ebx, ebx
	jne	SHORT $LN87@try_prop
	xor	esi, esi
	jmp	SHORT $LN7@try_prop
$LN87@try_prop:
	mov	esi, DWORD PTR _new_key$[ebp]
$LN7@try_prop:

; 556  : 
; 557  :   /* check to see if new_key is already just triple */
; 558  :   if ( valid_id(new_key) )

	test	esi, 268435456				; 10000000H
	je	SHORT $LN89@try_prop

; 559  :   { facetedge_id feb = get_next_facet(new_key);

	push	esi
	call	_get_next_facet

; 560  :     facetedge_id fec = get_next_facet(feb);

	push	eax
	call	_get_next_facet
	add	esp, 8

; 562  :     if ( equal_id(fec,new_key) )

	cmp	eax, esi
	jne	SHORT $LN5@try_prop

; 563  :     { /* can't split further */
; 564  :       splitflag = 0;

	mov	DWORD PTR _splitflag$[ebp], 0
	jmp	SHORT $LN88@try_prop
$LN5@try_prop:

; 561  :     facetedge_id fed = get_next_facet(fec);

	push	eax
	call	_get_next_facet
	add	esp, 4

; 565  :     }
; 566  :     else if ( equal_id(fed,new_key) )

	cmp	eax, esi
	jne	SHORT $LN89@try_prop

; 567  :     { /* already triple edge; split and stop */
; 568  :       propflag = 0;

	xor	ebx, ebx
$LN89@try_prop:

; 569  :     }
; 570  :   } 
; 571  :   if ( splitflag ) versplit(key_fe,new_key,this_septum_flag);

	cmp	DWORD PTR _splitflag$[ebp], 0
	je	SHORT $LN88@try_prop
	mov	edx, DWORD PTR _this_septum_flag$[ebp]
	mov	eax, DWORD PTR tv545[ebp]
	push	edx
	push	esi
	push	eax
	call	_versplit
	add	esp, 12					; 0000000cH
$LN88@try_prop:

; 572  : 
; 573  :   if ( !propflag ) new_key = NULLFACETEDGE;

	test	ebx, ebx
	jne	SHORT $LN1@try_prop
	mov	ecx, DWORD PTR _NULLFACETEDGE
	mov	esi, ecx
$LN1@try_prop:

; 574  :   *pass_key = new_key;

	mov	edx, DWORD PTR _pass_key$[ebp]

; 575  : 
; 576  :   return splitflag;

	mov	eax, DWORD PTR _splitflag$[ebp]
	pop	edi
	mov	DWORD PTR [edx], esi
	pop	esi
	pop	ebx

; 577  : } /* end try_prop */

	mov	esp, ebp
	pop	ebp
	ret	0
_try_prop ENDP
_TEXT	ENDS
PUBLIC	_cinfo$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_kraynik_pop
EXTRN	_pop_to_edge_flag:DWORD
EXTRN	_pop_to_face_flag:DWORD
; Function compile flags: /Ogtp
;	COMDAT _kraynik_pop
_TEXT	SEGMENT
tv2046 = -296						; size = 4
tv2185 = -292						; size = 4
_newfe_a$90358 = -288					; size = 4
tv2238 = -284						; size = 4
tv2226 = -280						; size = 4
tv2367 = -276						; size = 4
tv2182 = -276						; size = 4
_other_ray_fe$90356 = -272				; size = 4
_newray_e$90362 = -268					; size = 4
_newe$ = -264						; size = 4
_newfe_b$90359 = -260					; size = 4
tv2100 = -256						; size = 4
_newv$ = -256						; size = 4
tv2172 = -252						; size = 4
tv2279 = -248						; size = 4
tv2311 = -244						; size = 4
_cinfo$GSCopy$ = -240					; size = 4
tv2330 = -236						; size = 4
tv2295 = -236						; size = 4
_m$ = -232						; size = 4
_third_ray_fe$90357 = -228				; size = 4
_ray_fe$90355 = -224					; size = 4
_tailside$ = -220					; size = 48
_headside$ = -172					; size = 48
_headforce$ = -124					; size = 48
_tailforce$ = -76					; size = 48
_tail_triples$ = -28					; size = 12
_head_triples$ = -16					; size = 12
tv2559 = -12						; size = 8
tv2462 = -8						; size = 4
tv2264 = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_v_id$ = 8						; size = 4
_count$ = 12						; size = 4
_cinfo$ = 16						; size = 4
_kraynik_pop PROC					; COMDAT

; 2137 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	mov	ebx, DWORD PTR _cinfo$[ebp]

; 2138 :   int i,j,k,m,kk;
; 2139 :   struct arc *ar;
; 2140 :   facetedge_id fe;
; 2141 :   vertex_id newv;
; 2142 :   edge_id newe;
; 2143 :   edge_id head_triples[3],tail_triples[3];
; 2144 :   REAL tailside[MAXCOORD],headside[MAXCOORD];
; 2145 :   REAL tailforce[MAXCOORD],headforce[MAXCOORD];
; 2146 :   REAL mag;
; 2147 : 
; 2148 :   /* find the 3-arc cells */
; 2149 :   for ( k = 0 ; k < cinfo->cells ; k++ )

	mov	eax, DWORD PTR [ebx]
	push	esi
	xor	esi, esi

; 2207 :     set_edge_tailv(newray_e,get_edge_tailv(ray_e));

	mov	DWORD PTR _cinfo$GSCopy$[ebp], ebx
	test	eax, eax
	jle	SHORT $LN246@kraynik_po

; 2150 :      if ( cinfo->cell[k].num == 3 ) break;

	lea	ecx, DWORD PTR [ebx+16]
	npad	7
$LL38@kraynik_po:
	cmp	DWORD PTR [ecx], 3
	je	SHORT $LN246@kraynik_po

; 2138 :   int i,j,k,m,kk;
; 2139 :   struct arc *ar;
; 2140 :   facetedge_id fe;
; 2141 :   vertex_id newv;
; 2142 :   edge_id newe;
; 2143 :   edge_id head_triples[3],tail_triples[3];
; 2144 :   REAL tailside[MAXCOORD],headside[MAXCOORD];
; 2145 :   REAL tailforce[MAXCOORD],headforce[MAXCOORD];
; 2146 :   REAL mag;
; 2147 : 
; 2148 :   /* find the 3-arc cells */
; 2149 :   for ( k = 0 ; k < cinfo->cells ; k++ )

	inc	esi
	add	ecx, 32					; 00000020H
	cmp	esi, eax
	jl	SHORT $LL38@kraynik_po
$LN246@kraynik_po:

; 2151 :   for ( kk = k+1 ; kk < cinfo->cells ; kk++ )

	lea	edx, DWORD PTR [esi+1]
	cmp	edx, eax
	jge	SHORT $LN293@kraynik_po
	mov	ecx, edx
	shl	ecx, 5
	lea	ecx, DWORD PTR [ecx+ebx+16]
	npad	3
$LL34@kraynik_po:

; 2152 :      if ( cinfo->cell[kk].num == 3 ) break;

	cmp	DWORD PTR [ecx], 3
	je	SHORT $LN247@kraynik_po

; 2151 :   for ( kk = k+1 ; kk < cinfo->cells ; kk++ )

	inc	edx
	add	ecx, 32					; 00000020H
	cmp	edx, eax
	jl	SHORT $LL34@kraynik_po
$LN247@kraynik_po:

; 2153 :   if ( kk == cinfo->cells )

	cmp	edx, eax
$LN293@kraynik_po:
	jne	SHORT $LN30@kraynik_po

; 2154 :     return 0; /* failure */

	pop	esi
	xor	eax, eax
	pop	ebx

; 2274 : } // end kraynik_pop()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN30@kraynik_po:

; 2155 : 
; 2156 :   for ( i = 0 ; i < SDIM ; i++ )

	mov	eax, DWORD PTR _web+616
	push	edi
	test	eax, eax
	jle	SHORT $LN29@kraynik_po
	lea	ebx, DWORD PTR [eax*8]
	mov	ecx, ebx
	shr	ecx, 2
	xor	eax, eax
	lea	edi, DWORD PTR _tailforce$[ebp]
	rep stosd

; 2157 :    tailforce[i] = headforce[i] = 0.0;

	mov	ecx, ebx
	mov	ebx, DWORD PTR _cinfo$GSCopy$[ebp]
	shr	ecx, 2
	lea	edi, DWORD PTR _headforce$[ebp]
	rep stosd
$LN29@kraynik_po:

; 2158 : 
; 2159 :   /* get triple lines and vectors to see which way to pop */
; 2160 :   for ( m = 0 ; m < 3 ; m++ )

	shl	esi, 5
	xor	edi, edi
	shl	edx, 5
	lea	esi, DWORD PTR [esi+ebx+8]
	lea	edx, DWORD PTR [edx+ebx+8]

; 2207 :     set_edge_tailv(newray_e,get_edge_tailv(ray_e));

	mov	DWORD PTR tv2046[ebp], esi
	mov	DWORD PTR tv2100[ebp], edx
	npad	4
$LL273@kraynik_po:

; 2161 :   { ar = cinfo->arclist + cinfo->cell[k].start + m;
; 2162 :     fe = cinfo->felist[ar->start];

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [ebx+16808]
	add	eax, edi
	lea	eax, DWORD PTR [eax+eax*2]
	mov	ecx, DWORD PTR [ebx+eax*4+9608]
	mov	eax, DWORD PTR [edx+ecx*4]

; 2163 :     tail_triples[m] = get_fe_edge(get_prev_edge(fe));

	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN42@kraynik_po
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN41@kraynik_po
$LN42@kraynik_po:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]
$LN41@kraynik_po:
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [ecx+20]
	and	eax, 134217728				; 08000000H

; 2164 :     get_edge_side(tail_triples[m],tailside);

	lea	edx, DWORD PTR _tailside$[ebp]
	xor	ecx, eax
	push	edx
	push	ecx
	mov	DWORD PTR _tail_triples$[ebp+edi*4], ecx
	call	_get_edge_side

; 2165 :     mag = sqrt(dot(tailside,tailside,SDIM));

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _tailside$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	add	esp, 20					; 00000014H
	call	__CIsqrt

; 2166 :     if ( mag != 0 )

	fld	ST(0)
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN286@kraynik_po

; 2167 :      for ( i = 0 ; i < SDIM ; i++ )

	mov	ecx, DWORD PTR _web+616
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN286@kraynik_po
$LN22@kraynik_po:

; 2168 :       tailforce[i] += tailside[i]/mag;

	fld	QWORD PTR _tailside$[ebp+eax*8]
	inc	eax
	fdiv	ST(0), ST(1)
	fadd	QWORD PTR _tailforce$[ebp+eax*8-8]
	fstp	QWORD PTR _tailforce$[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LN22@kraynik_po
$LN286@kraynik_po:

; 2169 :     ar = cinfo->arclist + cinfo->cell[kk].start + m;
; 2170 :     fe = cinfo->felist[ar->start];

	mov	eax, DWORD PTR tv2100[ebp]
	fstp	ST(0)
	mov	eax, DWORD PTR [eax]
	add	eax, edi
	lea	ecx, DWORD PTR [eax+eax*2]
	mov	edx, DWORD PTR [ebx+ecx*4+9608]
	mov	eax, DWORD PTR [ebx+16808]
	mov	eax, DWORD PTR [eax+edx*4]

; 2171 :     head_triples[m] = get_fe_edge(get_prev_edge(fe));

	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN48@kraynik_po
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN47@kraynik_po
$LN48@kraynik_po:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+28]
$LN47@kraynik_po:
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [ecx+20]
	and	eax, 134217728				; 08000000H

; 2172 :     get_edge_side(head_triples[m],headside);

	lea	edx, DWORD PTR _headside$[ebp]
	xor	ecx, eax
	push	edx
	push	ecx
	mov	DWORD PTR _head_triples$[ebp+edi*4], ecx
	call	_get_edge_side

; 2173 :     mag = sqrt(dot(headside,headside,SDIM));

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _headside$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	add	esp, 20					; 00000014H
	call	__CIsqrt

; 2174 :     if ( mag != 0 )

	fld	ST(0)
	fldz
	mov	ecx, DWORD PTR _web+616
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN292@kraynik_po

; 2175 :      for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN292@kraynik_po
$LN18@kraynik_po:

; 2176 :       headforce[i] += headside[i]/mag;

	fld	QWORD PTR _headside$[ebp+eax*8]
	inc	eax
	fdiv	ST(0), ST(1)
	fadd	QWORD PTR _headforce$[ebp+eax*8-8]
	fstp	QWORD PTR _headforce$[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LN18@kraynik_po
$LN292@kraynik_po:

; 2158 : 
; 2159 :   /* get triple lines and vectors to see which way to pop */
; 2160 :   for ( m = 0 ; m < 3 ; m++ )

	inc	edi

; 2175 :      for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)
	cmp	edi, 3
	jl	$LL273@kraynik_po

; 2177 :       
; 2178 :   }
; 2179 :   if ( pop_to_face_flag || ( !pop_to_edge_flag &&
; 2180 :         (dot(headforce,headforce,SDIM)+dot(tailforce,tailforce,SDIM) < 3)) )

	cmp	DWORD PTR _pop_to_face_flag, 0
	jne	$LN14@kraynik_po
	cmp	DWORD PTR _pop_to_edge_flag, 0
	jne	SHORT $LN15@kraynik_po
	push	ecx
	lea	eax, DWORD PTR _headforce$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fstp	QWORD PTR tv2559[ebp]
	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _tailforce$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fadd	QWORD PTR tv2559[ebp]
	add	esp, 24					; 00000018H
	fcomp	QWORD PTR __real@4008000000000000
	fnstsw	ax
	test	ah, 5
	jnp	$LN14@kraynik_po
$LN15@kraynik_po:

; 2182 : 
; 2183 :   newv = dup_vertex(v_id);

	mov	esi, DWORD PTR _v_id$[ebp]
	push	esi
	call	_dup_vertex

; 2184 :   newe = new_edge(newv,v_id,NULLID);

	push	0
	push	esi
	push	eax
	mov	DWORD PTR _newv$[ebp], eax
	call	_new_edge

; 2185 : 
; 2186 :   /* go around the 3 arcs and reconfigure */
; 2187 :   for ( m = 0 ; m < 3 ; m++ )

	mov	ecx, DWORD PTR _web+460
	add	esp, 16					; 00000010H
	mov	DWORD PTR _newe$[ebp], eax
	mov	DWORD PTR _m$[ebp], 0
$LL13@kraynik_po:

; 2188 :   { facetedge_id ray_fe,other_ray_fe,third_ray_fe;
; 2189 :     facetedge_id newfe_a,newfe_b,newfe_c;
; 2190 :     edge_id ray_e,newray_e;
; 2191 :     facet_id newf;
; 2192 : 
; 2193 :     ar = cinfo->arclist + cinfo->cell[k].start + m;

	mov	edx, DWORD PTR tv2046[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR _cinfo$GSCopy$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	ebx, DWORD PTR [edx+eax*4+9608]

; 2194 :     for ( j = 0 ; j < ar->num ; j++ )

	xor	edi, edi
	cmp	DWORD PTR [ebx+4], edi
	jle	$LN8@kraynik_po
	npad	6
$LL10@kraynik_po:

; 2195 :     { fe = cinfo->felist[ar->start+j];

	mov	eax, DWORD PTR [ebx]
	mov	edx, DWORD PTR _cinfo$GSCopy$[ebp]
	mov	edx, DWORD PTR [edx+16808]
	add	eax, edi
	mov	eax, DWORD PTR [edx+eax*4]

; 2196 :       ray_e = get_fe_edge(get_next_edge(fe));

	test	eax, 134217728				; 08000000H
	je	SHORT $LN54@kraynik_po
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN53@kraynik_po
$LN54@kraynik_po:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]
$LN53@kraynik_po:
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	mov	esi, eax

; 2197 :       remove_vertex_edge(v_id,inverse_id(ray_e));

	mov	eax, DWORD PTR _v_id$[ebp]
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	push	edx
	push	eax
	call	_remove_vertex_edge

; 2198 :       set_edge_headv(ray_e,newv);

	mov	ecx, DWORD PTR _newv$[ebp]
	push	ecx
	push	esi
	call	_set_edge_headv
	mov	ecx, DWORD PTR _web+460
	inc	edi
	add	esp, 16					; 00000010H
	cmp	edi, DWORD PTR [ebx+4]
	jl	SHORT $LL10@kraynik_po
$LN8@kraynik_po:

; 2199 :     }
; 2200 :     /* last one for splitting triple edge */
; 2201 :     j = ar->num-1;
; 2202 :     fe = cinfo->felist[ar->start+j];

	mov	edx, DWORD PTR [ebx]
	add	edx, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR _cinfo$GSCopy$[ebp]
	mov	eax, DWORD PTR [eax+16808]
	mov	eax, DWORD PTR [eax+edx*4-4]

; 2203 :     ray_fe = get_next_edge(fe);

	test	eax, 134217728				; 08000000H
	je	SHORT $LN60@kraynik_po
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR _ray_fe$90355[ebp], eax
	jmp	SHORT $LN59@kraynik_po
$LN60@kraynik_po:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR [eax+32]
	mov	DWORD PTR _ray_fe$90355[ebp], edx
$LN59@kraynik_po:

; 2204 :     ray_e = get_fe_edge(ray_fe);

	mov	esi, DWORD PTR _ray_fe$90355[ebp]
	mov	edi, esi
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	eax, DWORD PTR [edi+ecx]
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [eax+20]
	mov	DWORD PTR tv2172[ebp], edi

; 2205 :     newray_e = dup_edge(ray_e);

	push	esi
	call	_dup_edge

; 2206 :     set_edge_headv(newray_e,v_id);

	mov	ecx, DWORD PTR _v_id$[ebp]
	push	ecx
	push	eax
	mov	DWORD PTR _newray_e$90362[ebp], eax
	call	_set_edge_headv

; 2207 :     set_edge_tailv(newray_e,get_edge_tailv(ray_e));

	mov	edx, DWORD PTR _web+124
	mov	ecx, DWORD PTR _web+216
	mov	eax, esi
	shr	eax, 27					; 0000001bH
	add	esp, 12					; 0000000cH
	and	eax, 1
	mov	DWORD PTR tv2182[ebp], eax
	mov	eax, esi
	je	SHORT $LN66@kraynik_po
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv2185[ebp], eax
	mov	eax, DWORD PTR [eax+edx]
	mov	edx, DWORD PTR _dymem
	add	eax, DWORD PTR [ecx+edx+304]
	mov	ecx, DWORD PTR _web+636
	mov	eax, DWORD PTR [eax+ecx*4]
	jmp	SHORT $LN65@kraynik_po
$LN66@kraynik_po:
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv2185[ebp], eax
	mov	eax, DWORD PTR [eax+edx]
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edx+304]
	mov	eax, DWORD PTR [eax+ecx]
$LN65@kraynik_po:
	mov	edx, DWORD PTR _newray_e$90362[ebp]
	push	eax
	push	edx
	call	_set_edge_tailv

; 2208 :     other_ray_fe = inverse_id(get_prev_edge(cinfo->felist[(ar+(m==2?-2:1))->start]));

	mov	eax, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR _cinfo$GSCopy$[ebp]
	sub	eax, 2
	add	esp, 8
	neg	eax
	sbb	eax, eax
	and	eax, 3
	lea	eax, DWORD PTR [eax+eax*2-6]
	mov	ecx, DWORD PTR [ebx+eax*4]
	mov	eax, DWORD PTR [edx+16808]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN70@kraynik_po
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN69@kraynik_po
$LN70@kraynik_po:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+28]
$LN69@kraynik_po:

; 2209 :     third_ray_fe = get_next_facet(ray_fe);

	mov	ebx, DWORD PTR _ray_fe$90355[ebp]
	mov	edi, DWORD PTR [edi+ecx]
	xor	eax, 134217728				; 08000000H
	shr	ebx, 27					; 0000001bH
	and	ebx, 1
	mov	DWORD PTR _other_ray_fe$90356[ebp], eax
	mov	DWORD PTR tv2226[ebp], ebx
	je	SHORT $LN74@kraynik_po
	mov	edx, DWORD PTR [edi+36]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN294@kraynik_po
$LN74@kraynik_po:
	mov	edx, DWORD PTR [edi+40]
$LN294@kraynik_po:
	mov	DWORD PTR _third_ray_fe$90357[ebp], edx

; 2210 :     if ( equal_id(third_ray_fe,other_ray_fe) )

	cmp	edx, eax
	jne	SHORT $LN268@kraynik_po

; 2211 :        third_ray_fe = get_prev_facet(ray_fe);

	test	ebx, ebx
	je	SHORT $LN78@kraynik_po
	mov	edx, DWORD PTR [edi+40]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN295@kraynik_po
$LN78@kraynik_po:
	mov	edx, DWORD PTR [edi+36]
$LN295@kraynik_po:
	mov	DWORD PTR _third_ray_fe$90357[ebp], edx
$LN268@kraynik_po:

; 2212 : 
; 2213 :     newf = dup_facet(get_fe_facet(third_ray_fe));

	mov	eax, edx
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv2238[ebp], eax
	jne	SHORT $LN82@kraynik_po
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN81@kraynik_po
$LN82@kraynik_po:
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [ecx+24]
	test	edx, 134217728				; 08000000H
	je	SHORT $LN81@kraynik_po
	xor	eax, 134217728				; 08000000H
$LN81@kraynik_po:
	push	eax
	call	_dup_facet
	mov	edi, eax

; 2214 :     set_original(newf,NULLID);

	mov	edx, edi
	shr	edx, 29					; 0000001dH
	imul	edx, 112				; 00000070H
	mov	ecx, DWORD PTR _web[edx+12]
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]

; 2215 :     newfe_a = new_facetedge(newf,newe);

	mov	eax, DWORD PTR _newe$[ebp]
	push	eax
	push	edi
	mov	DWORD PTR [edx+20], 0
	call	_new_facetedge
	mov	ebx, eax

; 2216 :     newfe_b = new_facetedge(newf,inverse_id(newray_e));

	mov	eax, DWORD PTR _newray_e$90362[ebp]
	xor	eax, 134217728				; 08000000H
	push	eax
	push	edi
	mov	DWORD PTR _newfe_a$90358[ebp], ebx
	mov	DWORD PTR tv2264[ebp], eax
	call	_new_facetedge

; 2217 :     newfe_c = new_facetedge(newf,ray_e);

	push	esi
	push	edi
	mov	DWORD PTR _newfe_b$90359[ebp], eax
	call	_new_facetedge

; 2218 :     set_facet_fe(newf,newfe_a);

	push	ebx
	push	edi
	mov	esi, eax
	call	_set_facet_fe
	add	esp, 36					; 00000024H

; 2219 :     if ( m == 0 ) set_edge_fe(newe,newfe_a);

	cmp	DWORD PTR _m$[ebp], 0
	jne	SHORT $LN258@kraynik_po
	mov	ecx, DWORD PTR _newe$[ebp]
	mov	eax, ebx
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN85@kraynik_po
	xor	eax, 134217728				; 08000000H
$LN85@kraynik_po:
	mov	edx, DWORD PTR _web+124
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN258@kraynik_po:

; 2220 :     set_next_edge(newfe_a,newfe_b);

	mov	eax, ebx
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv2279[ebp], eax
	je	SHORT $LN259@kraynik_po
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN89@kraynik_po
	mov	ecx, DWORD PTR _newfe_b$90359[ebp]
	mov	edi, DWORD PTR _web+460
	mov	eax, ecx
	xor	eax, 134217728				; 08000000H
	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+edx*4]
	mov	DWORD PTR [edx+28], eax
	jmp	SHORT $LN88@kraynik_po
$LN89@kraynik_po:
	mov	ecx, DWORD PTR _web+460
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _newfe_b$90359[ebp]
	mov	DWORD PTR [edx+32], ecx
	jmp	SHORT $LN88@kraynik_po
$LN259@kraynik_po:
	mov	ecx, DWORD PTR _newfe_b$90359[ebp]
$LN88@kraynik_po:

; 2221 :     set_next_edge(newfe_b,newfe_c);

	mov	edx, ecx
	shr	edx, 28					; 0000001cH
	and	edx, 1
	mov	DWORD PTR tv2295[ebp], edx
	je	SHORT $LN93@kraynik_po
	mov	edi, DWORD PTR _web+460
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN94@kraynik_po
	mov	eax, esi
	xor	eax, 134217728				; 08000000H
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+edx*4]
	mov	DWORD PTR [edx+28], eax
	mov	edx, DWORD PTR tv2295[ebp]
	jmp	SHORT $LN93@kraynik_po
$LN94@kraynik_po:
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	DWORD PTR [eax+32], esi
$LN93@kraynik_po:

; 2222 :     set_next_edge(newfe_c,newfe_a);

	mov	eax, esi
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv2311[ebp], eax
	je	SHORT $LN98@kraynik_po
	mov	edi, DWORD PTR _web+460
	mov	eax, esi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN99@kraynik_po
	mov	edx, ebx
	xor	edx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	DWORD PTR [eax+28], edx
	mov	edx, DWORD PTR tv2295[ebp]
	jmp	SHORT $LN98@kraynik_po
$LN99@kraynik_po:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	DWORD PTR [eax+32], ebx
$LN98@kraynik_po:

; 2223 :     set_prev_edge(newfe_a,newfe_c);

	cmp	DWORD PTR tv2279[ebp], 0
	je	SHORT $LN275@kraynik_po
	mov	edi, DWORD PTR _web+460
	mov	eax, ebx
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN104@kraynik_po
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	DWORD PTR [eax+32], edx
	mov	edx, DWORD PTR tv2295[ebp]
	jmp	SHORT $LN103@kraynik_po
$LN104@kraynik_po:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	DWORD PTR [eax+28], esi
$LN103@kraynik_po:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN275@kraynik_po:

; 2224 :     set_prev_edge(newfe_b,newfe_a);

	test	edx, edx
	je	SHORT $LN279@kraynik_po
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN109@kraynik_po
	mov	edi, DWORD PTR _web+460
	mov	edx, ebx
	xor	edx, 134217728				; 08000000H
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	DWORD PTR [eax+32], edx
	jmp	SHORT $LN108@kraynik_po
$LN109@kraynik_po:
	mov	eax, DWORD PTR _web+460
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [edx+28], ebx
$LN108@kraynik_po:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN279@kraynik_po:

; 2225 :     set_prev_edge(newfe_c,newfe_b);

	cmp	DWORD PTR tv2311[ebp], 0
	je	SHORT $LN276@kraynik_po
	test	esi, 134217728				; 08000000H
	je	SHORT $LN114@kraynik_po
	mov	edx, DWORD PTR _web+460
	mov	eax, ecx
	xor	eax, 134217728				; 08000000H
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+32], eax
	jmp	SHORT $LN113@kraynik_po
$LN114@kraynik_po:
	mov	eax, DWORD PTR _web+460
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [edx+28], ecx
$LN113@kraynik_po:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN276@kraynik_po:

; 2226 : 
; 2227 :     if (  equal_id(ray_fe,get_next_facet(other_ray_fe)) )

	mov	ecx, DWORD PTR _other_ray_fe$90356[ebp]
	mov	eax, ecx
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR tv2330[ebp], eax
	mov	eax, DWORD PTR _web+460
	je	SHORT $LN119@kraynik_po
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	edx, DWORD PTR [ecx+eax]
	mov	edx, DWORD PTR [edx+36]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN118@kraynik_po
$LN119@kraynik_po:
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	edx, DWORD PTR [ecx+eax]
	mov	edx, DWORD PTR [edx+40]
$LN118@kraynik_po:
	mov	edi, DWORD PTR _ray_fe$90355[ebp]
	cmp	edi, edx
	jne	$LN5@kraynik_po

; 2228 :     {
; 2229 :       set_next_facet(ray_fe,newfe_c); 

	test	edi, 268435456				; 10000000H
	je	SHORT $LN260@kraynik_po
	cmp	DWORD PTR tv2226[ebp], 0
	je	SHORT $LN123@kraynik_po
	mov	edi, DWORD PTR tv2172[ebp]
	mov	eax, DWORD PTR [edi+eax]
	mov	edi, DWORD PTR _ray_fe$90355[ebp]
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	mov	DWORD PTR [eax+36], edx
	jmp	SHORT $LN296@kraynik_po
$LN123@kraynik_po:
	mov	edx, DWORD PTR tv2172[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [eax+40], esi
$LN296@kraynik_po:
	mov	eax, DWORD PTR _web+460
$LN260@kraynik_po:

; 2230 :       set_prev_facet(newfe_c,ray_fe); 

	cmp	DWORD PTR tv2311[ebp], 0
	je	SHORT $LN261@kraynik_po
	mov	edx, esi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN128@kraynik_po
	xor	edi, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+40], edi
	mov	edi, DWORD PTR _ray_fe$90355[ebp]
	jmp	SHORT $LN127@kraynik_po
$LN128@kraynik_po:
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+36], edi
$LN127@kraynik_po:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN261@kraynik_po:

; 2231 :       set_prev_facet(other_ray_fe,newfe_c); 

	mov	edx, DWORD PTR _other_ray_fe$90356[ebp]
	test	edx, 268435456				; 10000000H
	je	SHORT $LN135@kraynik_po
	cmp	DWORD PTR tv2330[ebp], 0
	je	SHORT $LN133@kraynik_po
	mov	ecx, DWORD PTR [ecx+eax]
	mov	edi, esi
	xor	edi, 134217728				; 08000000H
	mov	DWORD PTR [ecx+40], edi
	mov	edi, DWORD PTR _ray_fe$90355[ebp]
	jmp	SHORT $LN132@kraynik_po
$LN133@kraynik_po:
	mov	eax, DWORD PTR [ecx+eax]
	mov	DWORD PTR [eax+36], esi
$LN132@kraynik_po:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN135@kraynik_po:

; 2232 :       set_next_facet(newfe_c,other_ray_fe);  

	cmp	DWORD PTR tv2311[ebp], 0
	je	$LN160@kraynik_po
	test	esi, 134217728				; 08000000H
	je	SHORT $LN138@kraynik_po
	xor	edx, 134217728				; 08000000H
	and	esi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [ecx+36], edx
	jmp	$LN160@kraynik_po
$LN138@kraynik_po:
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [eax+40], edx

; 2233 :     }
; 2234 :     else

	jmp	$LN160@kraynik_po
$LN5@kraynik_po:

; 2235 :     {
; 2236 :       set_prev_facet(ray_fe,newfe_c); 

	test	edi, 268435456				; 10000000H
	je	SHORT $LN262@kraynik_po
	cmp	DWORD PTR tv2226[ebp], 0
	je	SHORT $LN143@kraynik_po
	mov	edi, DWORD PTR tv2172[ebp]
	mov	eax, DWORD PTR [edi+eax]
	mov	edi, DWORD PTR _ray_fe$90355[ebp]
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	mov	DWORD PTR [eax+40], edx
	jmp	SHORT $LN142@kraynik_po
$LN143@kraynik_po:
	mov	edx, DWORD PTR tv2172[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [eax+36], esi
$LN142@kraynik_po:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN262@kraynik_po:

; 2237 :       set_next_facet(newfe_c,ray_fe); 

	cmp	DWORD PTR tv2311[ebp], 0
	je	SHORT $LN263@kraynik_po
	mov	edx, esi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN148@kraynik_po
	xor	edi, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+36], edi
	mov	edi, DWORD PTR _ray_fe$90355[ebp]
	jmp	SHORT $LN297@kraynik_po
$LN148@kraynik_po:
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+40], edi
$LN297@kraynik_po:
	mov	eax, DWORD PTR _web+460
$LN263@kraynik_po:

; 2238 :       set_next_facet(other_ray_fe,newfe_c); 

	mov	edx, DWORD PTR _other_ray_fe$90356[ebp]
	test	edx, 268435456				; 10000000H
	je	SHORT $LN152@kraynik_po
	cmp	DWORD PTR tv2330[ebp], 0
	je	SHORT $LN153@kraynik_po
	mov	ecx, DWORD PTR [ecx+eax]
	mov	edi, esi
	xor	edi, 134217728				; 08000000H
	mov	DWORD PTR [ecx+36], edi
	mov	edi, DWORD PTR _ray_fe$90355[ebp]
	jmp	SHORT $LN298@kraynik_po
$LN153@kraynik_po:
	mov	eax, DWORD PTR [ecx+eax]
	mov	DWORD PTR [eax+40], esi
$LN298@kraynik_po:
	mov	eax, DWORD PTR _web+460
$LN152@kraynik_po:

; 2239 :       set_prev_facet(newfe_c,other_ray_fe);  

	cmp	DWORD PTR tv2311[ebp], 0
	je	SHORT $LN160@kraynik_po
	test	esi, 134217728				; 08000000H
	je	SHORT $LN158@kraynik_po
	xor	edx, 134217728				; 08000000H
	and	esi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN157@kraynik_po
$LN158@kraynik_po:
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [eax+36], edx
$LN157@kraynik_po:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN160@kraynik_po:

; 2240 :     }
; 2241 :     set_edge_fe(ray_e,ray_fe);

	cmp	DWORD PTR tv2182[ebp], 0
	mov	eax, edi
	je	SHORT $LN162@kraynik_po
	xor	edi, 134217728				; 08000000H
	mov	eax, edi
$LN162@kraynik_po:
	mov	ecx, DWORD PTR _web+124
	mov	edx, DWORD PTR tv2185[ebp]
	mov	ecx, DWORD PTR [edx+ecx]

; 2242 :     set_edge_fe(newray_e,third_ray_fe);

	mov	edx, DWORD PTR _newray_e$90362[ebp]
	mov	esi, DWORD PTR _third_ray_fe$90357[ebp]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	ecx, edx
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, esi
	mov	DWORD PTR tv2367[ebp], ecx
	je	SHORT $LN269@kraynik_po
	xor	eax, 134217728				; 08000000H
$LN269@kraynik_po:
	mov	ecx, edx
	mov	edx, DWORD PTR _web+124
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	edx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [edx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax

; 2243 : 
; 2244 :     set_next_facet(third_ray_fe,inverse_id(newfe_b)); 

	mov	eax, DWORD PTR _newfe_b$90359[ebp]
	xor	eax, 134217728				; 08000000H
	cmp	DWORD PTR tv2238[ebp], 0
	je	$LN277@kraynik_po
	mov	edi, DWORD PTR _web+460
	test	esi, 134217728				; 08000000H
	je	SHORT $LN169@kraynik_po
	mov	edx, eax
	xor	edx, 134217728				; 08000000H
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edi+esi*4]
	mov	DWORD PTR [esi+36], edx
	mov	esi, DWORD PTR _third_ray_fe$90357[ebp]
	jmp	SHORT $LN168@kraynik_po
$LN169@kraynik_po:
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+edx*4]
	mov	DWORD PTR [edx+40], eax
$LN168@kraynik_po:

; 2245 :     set_prev_facet(third_ray_fe,inverse_id(newfe_b));  

	cmp	DWORD PTR tv2238[ebp], 0
	je	SHORT $LN277@kraynik_po
	mov	edi, DWORD PTR _web+460
	test	esi, 134217728				; 08000000H
	je	SHORT $LN174@kraynik_po
	mov	edx, eax
	xor	edx, 134217728				; 08000000H
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edi+esi*4]
	mov	DWORD PTR [esi+40], edx
	mov	esi, DWORD PTR _third_ray_fe$90357[ebp]
	jmp	SHORT $LN173@kraynik_po
$LN174@kraynik_po:
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+edx*4]
	mov	DWORD PTR [edx+36], eax
$LN173@kraynik_po:
	mov	edx, DWORD PTR _global_timestamp
	inc	edx
	mov	DWORD PTR _global_timestamp, edx
	mov	DWORD PTR _top_timestamp, edx
$LN277@kraynik_po:

; 2246 :     set_next_facet(inverse_id(newfe_b),third_ray_fe); 

	mov	edx, eax
	shr	edx, 28					; 0000001cH
	and	edx, 1
	je	SHORT $LN264@kraynik_po
	test	eax, 134217728				; 08000000H
	je	SHORT $LN179@kraynik_po
	mov	ebx, DWORD PTR _web+460
	xor	esi, 134217728				; 08000000H
	mov	edi, eax
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR _newfe_a$90358[ebp]
	mov	DWORD PTR [edi+36], esi
	mov	esi, DWORD PTR _third_ray_fe$90357[ebp]
	jmp	SHORT $LN264@kraynik_po
$LN179@kraynik_po:
	mov	edi, DWORD PTR _web+460
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edi+esi*4]
	mov	esi, DWORD PTR _third_ray_fe$90357[ebp]
	mov	DWORD PTR [edi+40], esi
$LN264@kraynik_po:

; 2247 :     set_prev_facet(inverse_id(newfe_b),third_ray_fe);  

	test	edx, edx
	je	SHORT $LN186@kraynik_po
	test	eax, 134217728				; 08000000H
	je	SHORT $LN184@kraynik_po
	mov	edi, DWORD PTR _web+460
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	DWORD PTR [eax+40], edx
	jmp	SHORT $LN183@kraynik_po
$LN184@kraynik_po:
	mov	edx, DWORD PTR _web+460
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [eax+36], esi
$LN183@kraynik_po:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN186@kraynik_po:

; 2248 : 
; 2249 :     set_fe_edge(third_ray_fe,newray_e);

	mov	eax, DWORD PTR _newray_e$90362[ebp]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN188@kraynik_po
	mov	eax, DWORD PTR tv2264[ebp]
$LN188@kraynik_po:
	mov	edi, DWORD PTR _web+460
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+edx*4]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax

; 2250 :     set_edge_fe(newray_e,third_ray_fe);

	cmp	DWORD PTR tv2367[ebp], 0
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, esi
	je	SHORT $LN266@kraynik_po
	xor	esi, 134217728				; 08000000H
	mov	eax, esi
$LN266@kraynik_po:
	mov	edx, DWORD PTR _web+124
	mov	ecx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax

; 2251 :     if ( m == 1 )

	mov	eax, DWORD PTR _m$[ebp]
	cmp	eax, 1
	jne	$LN3@kraynik_po

; 2252 :     { set_next_facet(newfe_a,get_edge_fe(newe));

	mov	edi, DWORD PTR _newe$[ebp]
	push	edi
	call	_get_edge_fe
	mov	esi, DWORD PTR tv2279[ebp]
	add	esp, 4
	test	esi, esi
	je	SHORT $LN267@kraynik_po
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN195@kraynik_po
	mov	ecx, DWORD PTR _web+460
	xor	eax, 134217728				; 08000000H
	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+36], eax
	jmp	SHORT $LN267@kraynik_po
$LN195@kraynik_po:
	mov	edx, DWORD PTR _web+460
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+40], eax
$LN267@kraynik_po:

; 2253 :       set_prev_facet(newfe_a,get_edge_fe(newe));

	push	edi
	call	_get_edge_fe
	add	esp, 4
	test	esi, esi
	je	SHORT $LN272@kraynik_po
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN200@kraynik_po
	mov	ecx, DWORD PTR _web+460
	xor	eax, 134217728				; 08000000H
	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN199@kraynik_po
$LN200@kraynik_po:
	mov	edx, DWORD PTR _web+460
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+36], eax
$LN199@kraynik_po:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN272@kraynik_po:

; 2254 :       set_next_facet(get_edge_fe(newe),newfe_a);

	push	edi
	call	_get_edge_fe
	add	esp, 4
	test	eax, 268435456				; 10000000H
	je	SHORT $LN278@kraynik_po
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN205@kraynik_po
	mov	edx, ebx
	xor	edx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+36], edx
	jmp	SHORT $LN278@kraynik_po
$LN205@kraynik_po:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx+40], ebx
$LN278@kraynik_po:

; 2255 :       set_prev_facet(get_edge_fe(newe),newfe_a);

	push	edi
	call	_get_edge_fe
	add	esp, 4
	test	eax, 268435456				; 10000000H
	je	$LN257@kraynik_po
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN210@kraynik_po
	xor	ebx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx+40], ebx
	jmp	SHORT $LN209@kraynik_po
$LN210@kraynik_po:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx+36], ebx
$LN209@kraynik_po:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	jmp	$LN257@kraynik_po
$LN3@kraynik_po:

; 2256 :     }
; 2257 :     else if ( m == 2 ) 

	cmp	eax, 2
	jne	$LN257@kraynik_po

; 2258 :     { facetedge_id fe1 = get_edge_fe(newe);

	mov	eax, DWORD PTR _newe$[ebp]
	push	eax
	call	_get_edge_fe

; 2259 :       facetedge_id fe2 = get_next_facet(fe1);

	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	add	esp, 4
	and	ecx, 1
	mov	DWORD PTR tv2462[ebp], ecx
	mov	ecx, DWORD PTR _web+460
	mov	esi, eax
	je	SHORT $LN215@kraynik_po
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	edx, DWORD PTR [esi+ecx]
	mov	edx, DWORD PTR [edx+36]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN214@kraynik_po
$LN215@kraynik_po:
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	edx, DWORD PTR [esi+ecx]
	mov	edx, DWORD PTR [edx+40]
$LN214@kraynik_po:

; 2260 : 
; 2261 :       set_next_facet(newfe_a,fe2);

	cmp	DWORD PTR tv2279[ebp], 0
	je	SHORT $LN265@kraynik_po
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN219@kraynik_po
	mov	edi, edx
	xor	edi, 134217728				; 08000000H
	and	ebx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+ebx*4]
	mov	ebx, DWORD PTR _newfe_a$90358[ebp]
	mov	DWORD PTR [ecx+36], edi
	jmp	SHORT $LN300@kraynik_po
$LN219@kraynik_po:
	mov	edi, ebx
	and	edi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	DWORD PTR [ecx+40], edx
$LN300@kraynik_po:
	mov	ecx, DWORD PTR _web+460
$LN265@kraynik_po:

; 2262 :       set_prev_facet(fe2,newfe_a);

	test	edx, 268435456				; 10000000H
	je	SHORT $LN226@kraynik_po
	test	edx, 134217728				; 08000000H
	je	SHORT $LN224@kraynik_po
	mov	edi, ebx
	xor	edi, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+40], edi
	jmp	SHORT $LN223@kraynik_po
$LN224@kraynik_po:
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [ecx+36], ebx
$LN223@kraynik_po:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
	mov	ecx, DWORD PTR _web+460
$LN226@kraynik_po:

; 2263 : 
; 2264 :       set_prev_facet(newfe_a,fe1);

	cmp	DWORD PTR tv2279[ebp], 0
	je	SHORT $LN231@kraynik_po
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN229@kraynik_po
	mov	edx, eax
	xor	edx, 134217728				; 08000000H
	mov	edi, ebx
	and	edi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN228@kraynik_po
$LN229@kraynik_po:
	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [ecx+36], eax
$LN228@kraynik_po:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
	mov	ecx, DWORD PTR _web+460
$LN231@kraynik_po:

; 2265 :       set_next_facet(fe1,newfe_a);

	test	eax, 268435456				; 10000000H
	je	SHORT $LN12@kraynik_po
	cmp	DWORD PTR tv2462[ebp], 0
	je	SHORT $LN234@kraynik_po
	mov	edx, DWORD PTR [esi+ecx]
	xor	ebx, 134217728				; 08000000H
	mov	DWORD PTR [edx+36], ebx
	jmp	SHORT $LN257@kraynik_po
$LN234@kraynik_po:
	mov	eax, DWORD PTR [esi+ecx]
	mov	DWORD PTR [eax+40], ebx
$LN257@kraynik_po:
	mov	ecx, DWORD PTR _web+460
$LN12@kraynik_po:

; 2185 : 
; 2186 :   /* go around the 3 arcs and reconfigure */
; 2187 :   for ( m = 0 ; m < 3 ; m++ )

	mov	eax, DWORD PTR _m$[ebp]
	inc	eax
	mov	DWORD PTR _m$[ebp], eax
	cmp	eax, 3
	jl	$LL13@kraynik_po

; 2266 :     }
; 2267 :   }
; 2268 : 
; 2269 :   /* move a bit to avoid zero area facets */
; 2270 :   new_vertex_average(newv,RAWEST);

	mov	ecx, DWORD PTR _newv$[ebp]
	push	2
	push	ecx
	call	_new_vertex_average

; 2271 :   new_vertex_average(v_id,RAWEST);

	mov	edx, DWORD PTR _v_id$[ebp]
	push	2
	push	edx
	call	_new_vertex_average
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi

; 2272 : 
; 2273 :   return 1;  /* success */

	mov	eax, 1
	pop	ebx

; 2274 : } // end kraynik_pop()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@kraynik_po:

; 2181 :     return pop_vertex_to_tri(v_id,tail_triples);

	mov	ecx, DWORD PTR _v_id$[ebp]
	lea	eax, DWORD PTR _tail_triples$[ebp]
	push	eax
	push	ecx
	call	_pop_vertex_to_tri

; 2274 : } // end kraynik_pop()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 8
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_kraynik_pop ENDP
_TEXT	ENDS
PUBLIC	__real@4415af1d78b58c40
PUBLIC	__$ArrayPad$
PUBLIC	_cubecone_pop
;	COMDAT __real@4415af1d78b58c40
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@4415af1d78b58c40 DQ 04415af1d78b58c40r	; 1e+020
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\popfilm.c
CONST	ENDS
;	COMDAT _cubecone_pop
_TEXT	SEGMENT
_bestmag$ = -216					; size = 8
_bestk$ = -208						; size = 4
tv847 = -204						; size = 4
_k$ = -200						; size = 4
_triples$ = -196					; size = 96
_side$ = -100						; size = 48
_faceforce$ = -52					; size = 48
__$ArrayPad$ = -4					; size = 4
_v_id$ = 8						; size = 4
_count$ = 12						; size = 4
_cinfo$ = 16						; size = 4
_cubecone_pop PROC					; COMDAT

; 2290 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2291 :   int i,k,m;
; 2292 :   struct arc *ar;
; 2293 :   facetedge_id fe;
; 2294 :   REAL side[MAXCOORD];
; 2295 :   REAL faceforce[MAXCOORD];
; 2296 :   REAL facemag,bestmag,mag;
; 2297 :   int bestk=0;
; 2298 :   edge_id triples[6][4];
; 2299 : 
; 2300 :   /* find mean triple edge vectors for each face */
; 2301 : 
; 2302 : 
; 2303 :   /* get triple lines and vectors to see which way to pop */
; 2304 :   bestmag = 1e20;

	fld	QWORD PTR __real@4415af1d78b58c40
	push	ebx

; 2305 :   for ( k = 0 ; k < 6 ; k++ )

	mov	ebx, DWORD PTR _cinfo$[ebp]
	fstp	QWORD PTR _bestmag$[ebp]
	xor	eax, eax
	mov	DWORD PTR _bestk$[ebp], eax
	mov	DWORD PTR _k$[ebp], eax
	push	esi
	lea	eax, DWORD PTR [ebx+8]
	push	edi
	lea	edx, DWORD PTR _triples$[ebp]
	mov	DWORD PTR tv847[ebp], eax
$LL34@cubecone_p:

; 2306 :   { for ( i = 0 ; i < SDIM ; i++ )

	mov	ecx, DWORD PTR _web+616
	test	ecx, ecx
	jle	SHORT $LN11@cubecone_p
	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	xor	eax, eax
	lea	edi, DWORD PTR _faceforce$[ebp]
	rep stosd
$LN11@cubecone_p:

; 2307 :       faceforce[i] = 0.0;
; 2308 :   
; 2309 :     for ( m = 0 ; m < 4 ; m++ )

	xor	edi, edi
	mov	esi, edx
	npad	1
$LL8@cubecone_p:

; 2310 :     { ar = cinfo->arclist + cinfo->cell[k].start + m;
; 2311 :       fe = cinfo->felist[ar->start];

	mov	ecx, DWORD PTR tv847[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ebx+16808]
	add	eax, edi
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR [ebx+edx*4+9608]
	mov	eax, DWORD PTR [ecx+eax*4]

; 2312 :       triples[k][m] = get_fe_edge(get_prev_edge(fe));

	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN18@cubecone_p
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN17@cubecone_p
$LN18@cubecone_p:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+28]
$LN17@cubecone_p:
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [ecx+20]
	and	eax, 134217728				; 08000000H

; 2313 :       get_edge_side( triples[k][m],side);

	lea	edx, DWORD PTR _side$[ebp]
	xor	ecx, eax
	push	edx
	push	ecx
	mov	DWORD PTR [esi], ecx
	call	_get_edge_side

; 2314 :       mag = sqrt(dot(side,side,SDIM));

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _side$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	add	esp, 20					; 00000014H
	call	__CIsqrt

; 2315 :       if ( mag != 0 )

	fld	ST(0)
	fldz
	mov	edx, DWORD PTR _web+616
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN46@cubecone_p

; 2316 :        for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	cmp	edx, 4
	jl	SHORT $LC32@cubecone_p
	lea	ecx, DWORD PTR [edx-3]
$LN33@cubecone_p:

; 2317 :         faceforce[i] += side[i]/mag;

	fld	QWORD PTR _side$[ebp+eax*8]
	add	eax, 4
	fdiv	ST(0), ST(1)
	fadd	QWORD PTR _faceforce$[ebp+eax*8-32]
	fstp	QWORD PTR _faceforce$[ebp+eax*8-32]
	fld	QWORD PTR _side$[ebp+eax*8-24]
	fdiv	ST(0), ST(1)
	fadd	QWORD PTR _faceforce$[ebp+eax*8-24]
	fstp	QWORD PTR _faceforce$[ebp+eax*8-24]
	fld	QWORD PTR _side$[ebp+eax*8-16]
	fdiv	ST(0), ST(1)
	fadd	QWORD PTR _faceforce$[ebp+eax*8-16]
	fstp	QWORD PTR _faceforce$[ebp+eax*8-16]
	fld	QWORD PTR _side$[ebp+eax*8-8]
	fdiv	ST(0), ST(1)
	fadd	QWORD PTR _faceforce$[ebp+eax*8-8]
	fstp	QWORD PTR _faceforce$[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LN33@cubecone_p
$LC32@cubecone_p:

; 2316 :        for ( i = 0 ; i < SDIM ; i++ )

	cmp	eax, edx
	jge	SHORT $LN46@cubecone_p
$LC4@cubecone_p:

; 2317 :         faceforce[i] += side[i]/mag;

	fld	QWORD PTR _side$[ebp+eax*8]
	inc	eax
	fdiv	ST(0), ST(1)
	fadd	QWORD PTR _faceforce$[ebp+eax*8-8]
	fstp	QWORD PTR _faceforce$[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LC4@cubecone_p
$LN46@cubecone_p:

; 2307 :       faceforce[i] = 0.0;
; 2308 :   
; 2309 :     for ( m = 0 ; m < 4 ; m++ )

	inc	edi

; 2316 :        for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)
	add	esi, 4
	cmp	edi, 4
	jl	$LL8@cubecone_p

; 2318 :     }
; 2319 :     facemag = sqrt(dot(faceforce,faceforce,SDIM));

	push	edx
	lea	eax, DWORD PTR _faceforce$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt

; 2320 :     if ( facemag < bestmag )

	fld	QWORD PTR _bestmag$[ebp]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN48@cubecone_p

; 2321 :     { bestmag = facemag;
; 2322 :       bestk = k;

	mov	edx, DWORD PTR _k$[ebp]
	fstp	QWORD PTR _bestmag$[ebp]
	mov	DWORD PTR _bestk$[ebp], edx
	jmp	SHORT $LN13@cubecone_p
$LN48@cubecone_p:
	fstp	ST(0)
$LN13@cubecone_p:

; 2305 :   for ( k = 0 ; k < 6 ; k++ )

	mov	eax, DWORD PTR _k$[ebp]
	add	DWORD PTR tv847[ebp], 32		; 00000020H
	inc	eax
	mov	DWORD PTR _k$[ebp], eax
	mov	edx, esi
	cmp	eax, 6
	jl	$LL34@cubecone_p

; 2323 :     }
; 2324 :   }
; 2325 : 
; 2326 :   return pop_vertex_to_quad(v_id,triples[bestk]);

	mov	eax, DWORD PTR _bestk$[ebp]
	mov	ecx, DWORD PTR _v_id$[ebp]
	add	eax, eax
	lea	eax, DWORD PTR _triples$[ebp+eax*8]
	push	eax
	push	ecx
	call	_pop_vertex_to_quad

; 2327 : 
; 2328 : } // end cubecone_pop()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 8
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_cubecone_pop ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@HAGPKJK@pop_edge_to_tri?5on?5edge?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0FC@HAADAPNP@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@ ; `string'
PUBLIC	??_C@_0EI@PBLFGFEG@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@ ; `string'
PUBLIC	??_C@_0FB@LLMJJKJH@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@ ; `string'
PUBLIC	??_C@_0FC@EBLDEBGL@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@ ; `string'
PUBLIC	??_C@_0EE@BJFKLHDH@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@ ; `string'
PUBLIC	??_C@_0EH@KOEAGCOI@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@ ; `string'
PUBLIC	??_C@_0FB@FMBNKCNB@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@ ; `string'
PUBLIC	??_C@_0DM@MOBHOKOB@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@ ; `string'
PUBLIC	??_C@_0DG@NJOHGAFE@pop_edge_to_tri?5only?5for?5LINEAR?5@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_pop_edge_to_tri
;	COMDAT ??_C@_0BM@HAGPKJK@pop_edge_to_tri?5on?5edge?5?$CFs?6?$AA@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0BM@HAGPKJK@pop_edge_to_tri?5on?5edge?5?$CFs?6?$AA@ DB 'pop_edge_to'
	DB	'_tri on edge %s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FC@HAADAPNP@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@
CONST	SEGMENT
??_C@_0FC@HAADAPNP@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@ DB 'pop_edge_'
	DB	'to_tri fails on edge %s due to outer triple edges with common'
	DB	' endpoint.', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@PBLFGFEG@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@
CONST	SEGMENT
??_C@_0EI@PBLFGFEG@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@ DB 'pop_edge_'
	DB	'to_tri fails on edge %s due to both endpoints on constraints.'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@LLMJJKJH@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@
CONST	SEGMENT
??_C@_0FB@LLMJJKJH@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@ DB 'pop_edge_'
	DB	'to_tri fails on edge %s due to too many  triple edges at one '
	DB	'endpoint.', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FC@EBLDEBGL@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@
CONST	SEGMENT
??_C@_0FC@EBLDEBGL@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@ DB 'pop_edge_'
	DB	'to_tri fails on edge %s due to not enough triple edges at one'
	DB	' endpoint.', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@BJFKLHDH@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@
CONST	SEGMENT
??_C@_0EE@BJFKLHDH@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@ DB 'pop_edge_'
	DB	'to_tri fails on edge %s due to edge %s having valence %d.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@KOEAGCOI@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@
CONST	SEGMENT
??_C@_0EH@KOEAGCOI@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@ DB 'pop_edge_'
	DB	'to_tri fails on edge %s due to too many triple edges at end.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@FMBNKCNB@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@
CONST	SEGMENT
??_C@_0FB@FMBNKCNB@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@ DB 'pop_edge_'
	DB	'to_tri fails on edge %s due to not enough triple edges at an '
	DB	'endpoint.', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@MOBHOKOB@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@
CONST	SEGMENT
??_C@_0DM@MOBHOKOB@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@ DB 'pop_edge_'
	DB	'to_tri fails on edge %s; it is not a triple edge.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@NJOHGAFE@pop_edge_to_tri?5only?5for?5LINEAR?5@
CONST	SEGMENT
??_C@_0DG@NJOHGAFE@pop_edge_to_tri?5only?5for?5LINEAR?5@ DB 'pop_edge_to_'
	DB	'tri only for LINEAR or QUADRATIC models.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\popfilm.c
CONST	ENDS
;	COMDAT _pop_edge_to_tri
_TEXT	SEGMENT
_tailv$ = -56						; size = 4
_thit$ = -52						; size = 4
_headv$ = -48						; size = 4
tv915 = -44						; size = 4
tv804 = -44						; size = 4
_j$ = -40						; size = 4
_hhit$ = -40						; size = 4
tv775 = -36						; size = 4
_i$ = -32						; size = 4
_val$90921 = -32					; size = 4
_val$90885 = -32					; size = 4
_k$ = -32						; size = 4
_head_triples$ = -28					; size = 12
_tail_triples$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_e_id$ = 8						; size = 4
_pop_edge_to_tri PROC					; COMDAT

; 3011 : { int triples;

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 3012 :   vertex_id tail_triples[3],head_triples[3];
; 3013 :   vertex_id headv,tailv;
; 3014 :   int retval;
; 3015 :   int i,j;
; 3016 :   conmap_t *hmap,*tmap;
; 3017 :   int thit=0,hhit=0;
; 3018 :   unsigned int k;
; 3019 : 
; 3020 :   if ( (web.modeltype != LINEAR) && (web.modeltype != QUADRATIC) )

	mov	eax, DWORD PTR _web+628
	push	esi
	xor	esi, esi
	push	edi
	mov	DWORD PTR _thit$[ebp], esi
	mov	DWORD PTR _hhit$[ebp], esi
	cmp	eax, 1
	je	SHORT $LN47@pop_edge_t@2
	cmp	eax, 2
	je	SHORT $LN47@pop_edge_t@2

; 3021 :     kb_error(2835,"pop_edge_to_tri only for LINEAR or QUADRATIC models.\n",
; 3022 :        RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DG@NJOHGAFE@pop_edge_to_tri?5only?5for?5LINEAR?5@
	push	2835					; 00000b13H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN47@pop_edge_t@2:

; 3023 : 
; 3024 :   /* Check valences and gather info on triple edges */
; 3025 :   if ( get_edge_valence(e_id) != 3 ) 

	mov	edi, DWORD PTR _e_id$[ebp]
	push	edi
	call	_get_edge_valence
	add	esp, 4
	cmp	eax, 3
	je	SHORT $LN46@pop_edge_t@2

; 3026 :   { if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, esi
	je	SHORT $LN45@pop_edge_t@2

; 3027 :     { sprintf(msg,
; 3028 :         "pop_edge_to_tri fails on edge %s; it is not a triple edge.\n",
; 3029 :             ELNAME(e_id)+1);

	test	edi, 268435456				; 10000000H
	je	SHORT $LN50@pop_edge_t@2
	and	edi, 134217727				; 07ffffffH
	inc	edi
	push	edi
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN51@pop_edge_t@2
$LN50@pop_edge_t@2:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN51@pop_edge_t@2:
	inc	eax
	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0DM@MOBHOKOB@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@
	push	eax
	call	_sprintf

; 3030 :       outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 16					; 00000010H
$LN45@pop_edge_t@2:

; 3031 :     }
; 3032 :     return 0;

	pop	edi
	xor	eax, eax
	pop	esi

; 3161 : } // end pop_edge_to_tri()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN46@pop_edge_t@2:
	push	ebx

; 3033 :   }
; 3034 : 
; 3035 :   tailv = get_edge_tailv(e_id);

	push	edi
	call	_get_edge_tailv

; 3036 :   tmap = get_v_constraint_map(tailv);

	mov	ebx, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+104
	add	esp, 4
	mov	DWORD PTR _tailv$[ebp], eax
	cmp	DWORD PTR [ecx+ebx+1288], esi
	je	SHORT $LN52@pop_edge_t@2
	mov	edx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	add	eax, DWORD PTR [ecx+ebx+1264]
	jmp	SHORT $LN53@pop_edge_t@2
$LN52@pop_edge_t@2:
	mov	eax, OFFSET _nullcon
$LN53@pop_edge_t@2:
	mov	edx, DWORD PTR [eax]

; 3037 :   for ( k = 1 ; k <= tmap[0] ; k++ )

	mov	ecx, 1
	cmp	edx, ecx
	jb	SHORT $LN119@pop_edge_t@2
$LL44@pop_edge_t@2:

; 3038 :     if ( tmap[k] & CON_HIT_BIT )

	test	DWORD PTR [eax+ecx*4], -2147483648	; 80000000H
	jne	$LN106@pop_edge_t@2

; 3037 :   for ( k = 1 ; k <= tmap[0] ; k++ )

	inc	ecx
	cmp	ecx, edx
	jbe	SHORT $LL44@pop_edge_t@2
$LN119@pop_edge_t@2:

; 3043 :   { /* check for proper number of triple edges */
; 3044 :     edge_id eb = get_next_tail_edge(e_id);

	mov	edx, DWORD PTR _web+124
	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	mov	ecx, edi
	shr	ecx, 27					; 0000001bH
	mov	DWORD PTR tv775[ebp], eax
	mov	eax, DWORD PTR [edx+eax*4]
	and	ecx, 1
	mov	esi, DWORD PTR [eax+ecx*4+32]

; 3045 :     triples = 0;

	xor	ebx, ebx

; 3046 :     while ( !equal_id(e_id,eb) )

	cmp	edi, esi
	je	SHORT $LN120@pop_edge_t@2
$LL39@pop_edge_t@2:

; 3047 :     { int val = get_edge_valence(eb);

	push	esi
	call	_get_edge_valence
	add	esp, 4
	mov	DWORD PTR _val$90885[ebp], eax

; 3048 :       if ( (val < 2) || ( val > 3 ) )

	cmp	eax, 2
	jl	$LN36@pop_edge_t@2
	cmp	eax, 3
	jg	$LN36@pop_edge_t@2

; 3054 :         }
; 3055 :         return 0;
; 3056 :       }
; 3057 :       if ( val == 3 )

	jne	SHORT $LN128@pop_edge_t@2

; 3058 :       { if ( triples >= 3 ) 

	cmp	ebx, 3
	jge	SHORT $LN108@pop_edge_t@2

; 3064 :           }
; 3065 :           return 0;
; 3066 :         }
; 3067 :         tail_triples[triples++] = eb;

	mov	DWORD PTR _tail_triples$[ebp+ebx*4], esi
	inc	ebx
$LN128@pop_edge_t@2:

; 3068 :       }
; 3069 :       eb = get_next_tail_edge(eb);

	mov	edx, DWORD PTR _web+124
	mov	ecx, esi
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+esi*4]
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	esi, DWORD PTR [eax+ecx*4+32]
	cmp	edi, esi
	jne	SHORT $LL39@pop_edge_t@2

; 3070 :     }
; 3071 :     if ( triples != 3 )

	cmp	ebx, 3
	je	$LN123@pop_edge_t@2
$LN120@pop_edge_t@2:

; 3072 :     { if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	$LN3@pop_edge_t@2

; 3073 :       { sprintf(msg,
; 3074 :            "pop_edge_to_tri fails on edge %s due to not enough triple edges at an endpoint.\n",
; 3075 :               ELNAME(e_id));

	test	edi, 268435456				; 10000000H
	je	$LN60@pop_edge_t@2
	mov	edx, DWORD PTR tv775[ebp]
	inc	edx
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	push	eax
	push	OFFSET ??_C@_0FB@FMBNKCNB@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@

; 3076 :         outstring(msg);
; 3077 :       }
; 3078 :       return 0;

	jmp	$LN131@pop_edge_t@2
$LN106@pop_edge_t@2:

; 3039 :     { thit = 1;
; 3040 :       break;
; 3041 :     }
; 3042 :   if ( !thit )

	mov	edx, DWORD PTR _web+124
	mov	DWORD PTR _thit$[ebp], 1
	jmp	$LN31@pop_edge_t@2
$LN108@pop_edge_t@2:

; 3059 :         { if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	$LN3@pop_edge_t@2

; 3060 :           { sprintf(msg,
; 3061 :       "pop_edge_to_tri fails on edge %s due to too many triple edges at end.\n",
; 3062 :                ELNAME(e_id)+1);

	test	edi, 268435456				; 10000000H
	je	SHORT $LN58@pop_edge_t@2
	mov	ecx, DWORD PTR tv775[ebp]
	inc	ecx
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN59@pop_edge_t@2
$LN58@pop_edge_t@2:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN59@pop_edge_t@2:
	mov	edx, DWORD PTR _msg
	inc	eax
	push	eax
	push	OFFSET ??_C@_0EH@KOEAGCOI@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@
	push	edx
	call	_sprintf

; 3063 :             outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax

; 3145 :           outstring(msg);

	call	_outstring
	add	esp, 16					; 00000010H
	pop	ebx
	pop	edi

; 3146 :         }
; 3147 :         return 0;

	xor	eax, eax
	pop	esi

; 3161 : } // end pop_edge_to_tri()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN36@pop_edge_t@2:

; 3049 :       { if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	$LN3@pop_edge_t@2

; 3050 :         { sprintf(msg,
; 3051 :          "pop_edge_to_tri fails on edge %s due to edge %s having valence %d.\n",
; 3052 :              ELNAME(e_id),ELNAME1(eb),val);

	test	esi, 268435456				; 10000000H
	je	SHORT $LN54@pop_edge_t@2
	and	esi, 134217727				; 07ffffffH
	inc	esi
	push	esi
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames+30
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	esi, OFFSET _elnames+30
	jmp	SHORT $LN55@pop_edge_t@2
$LN54@pop_edge_t@2:
	mov	esi, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN55@pop_edge_t@2:
	test	edi, 268435456				; 10000000H
	je	SHORT $LN56@pop_edge_t@2
	mov	ecx, DWORD PTR tv775[ebp]
	inc	ecx
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN57@pop_edge_t@2
$LN56@pop_edge_t@2:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN57@pop_edge_t@2:
	mov	edx, DWORD PTR _val$90885[ebp]
	push	edx
	push	esi
	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0EE@BJFKLHDH@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@
	push	eax
	call	_sprintf

; 3053 :           outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 24					; 00000018H
	pop	ebx
	pop	edi

; 3146 :         }
; 3147 :         return 0;

	xor	eax, eax
	pop	esi

; 3161 : } // end pop_edge_to_tri()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN60@pop_edge_t@2:

; 3073 :       { sprintf(msg,
; 3074 :            "pop_edge_to_tri fails on edge %s due to not enough triple edges at an endpoint.\n",
; 3075 :               ELNAME(e_id));

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	eax
	push	OFFSET ??_C@_0FB@FMBNKCNB@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@

; 3076 :         outstring(msg);
; 3077 :       }
; 3078 :       return 0;

	jmp	$LN131@pop_edge_t@2
$LN123@pop_edge_t@2:
	mov	ebx, DWORD PTR _dymem
$LN31@pop_edge_t@2:

; 3079 :     }
; 3080 :   }
; 3081 : 
; 3082 :   headv = get_edge_headv(e_id);

	mov	eax, edi
	shr	eax, 27					; 0000001bH
	mov	DWORD PTR tv804[ebp], eax
	test	al, 1
	mov	eax, edi
	je	SHORT $LN85@pop_edge_t@2
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv775[ebp], eax
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR [eax+ebx+304]
	mov	eax, DWORD PTR [esi+ecx]
	jmp	SHORT $LN130@pop_edge_t@2
$LN85@pop_edge_t@2:
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv775[ebp], eax
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR [eax+ebx+304]
	mov	eax, DWORD PTR _web+636
	lea	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [ecx+esi]
$LN130@pop_edge_t@2:

; 3083 :   hmap = get_v_constraint_map(headv);

	mov	ecx, DWORD PTR _web+104
	cmp	DWORD PTR [ecx+ebx+1288], 0
	mov	DWORD PTR _headv$[ebp], eax
	je	SHORT $LN62@pop_edge_t@2
	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _web+104
	add	eax, DWORD PTR [ecx+ebx+1264]
	jmp	SHORT $LN63@pop_edge_t@2
$LN62@pop_edge_t@2:
	mov	eax, OFFSET _nullcon
$LN63@pop_edge_t@2:

; 3084 :   for ( k = 1 ; k <= hmap[0] ; k++ )

	cmp	DWORD PTR [eax], 1
	mov	DWORD PTR _k$[ebp], 1
	jb	SHORT $LN126@pop_edge_t@2
	npad	8
$LL125@pop_edge_t@2:

; 3085 :     if ( hmap[k] & CON_HIT_BIT )

	mov	ecx, DWORD PTR _k$[ebp]
	test	DWORD PTR [eax+ecx*4], -2147483648	; 80000000H
	jne	$LN109@pop_edge_t@2

; 3084 :   for ( k = 1 ; k <= hmap[0] ; k++ )

	inc	DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR _k$[ebp], ecx
	jbe	SHORT $LL125@pop_edge_t@2
$LN126@pop_edge_t@2:

; 3090 :   { /* check for proper number of triples */
; 3091 :     edge_id eb = get_next_head_edge(e_id);

	mov	eax, DWORD PTR tv804[ebp]
	not	eax
	and	eax, 1
	mov	esi, DWORD PTR [esi+eax*4+32]
	xor	esi, 134217728				; 08000000H

; 3092 :     triples = 0;

	xor	ebx, ebx

; 3093 :     while ( !equal_id(e_id,eb) )

	cmp	edi, esi
	je	SHORT $LN122@pop_edge_t@2
$LL24@pop_edge_t@2:

; 3094 :     { int val = get_edge_valence(eb);

	push	esi
	call	_get_edge_valence
	add	esp, 4
	mov	DWORD PTR _val$90921[ebp], eax

; 3095 :       if ( (val < 2) || ( val > 3 ) )

	cmp	eax, 2
	jl	$LN21@pop_edge_t@2
	cmp	eax, 3
	jg	$LN21@pop_edge_t@2

; 3101 :         }
; 3102 :         return 0;
; 3103 :       }
; 3104 :       if ( val == 3 )

	jne	SHORT $LN127@pop_edge_t@2

; 3105 :       { if ( triples >= 3 ) 

	cmp	ebx, 3
	jge	$LN111@pop_edge_t@2

; 3111 :         }
; 3112 :         head_triples[triples++] = inverse_id(eb);

	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	mov	DWORD PTR _head_triples$[ebp+ebx*4], edx
	inc	ebx
$LN127@pop_edge_t@2:

; 3113 :       }
; 3114 :       eb = get_next_head_edge(eb);

	mov	edx, DWORD PTR _web+124
	mov	eax, esi
	shr	eax, 27					; 0000001bH
	and	esi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+esi*4]
	not	eax
	and	eax, 1
	mov	esi, DWORD PTR [ecx+eax*4+32]
	xor	esi, 134217728				; 08000000H
	cmp	edi, esi
	jne	SHORT $LL24@pop_edge_t@2

; 3115 :     }
; 3116 :     if ( triples != 3 ) 

	cmp	ebx, 3
	je	$LN124@pop_edge_t@2
$LN122@pop_edge_t@2:

; 3117 :     { if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	$LN3@pop_edge_t@2

; 3118 :       { sprintf(msg,"pop_edge_to_tri fails on edge %s due to not enough triple edges at one endpoint.\n",ELNAME(e_id));

	test	edi, 268435456				; 10000000H
	je	$LN70@pop_edge_t@2
	mov	ecx, DWORD PTR tv775[ebp]
	inc	ecx
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	push	eax
	push	OFFSET ??_C@_0FC@EBLDEBGL@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@

; 3119 :         outstring(msg);
; 3120 :       }
; 3121 :       return 0;

	jmp	$LN133@pop_edge_t@2
$LN109@pop_edge_t@2:

; 3086 :     { hhit = 1;

	mov	DWORD PTR _hhit$[ebp], 1

; 3087 :       break;
; 3088 :     }
; 3089 :   if ( !hhit )

	jmp	$LN16@pop_edge_t@2
$LN111@pop_edge_t@2:

; 3106 :         { if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	$LN3@pop_edge_t@2

; 3107 :           { sprintf(msg,"pop_edge_to_tri fails on edge %s due to too many  triple edges at one endpoint.\n",ELNAME(e_id));

	test	edi, 268435456				; 10000000H
	je	SHORT $LN68@pop_edge_t@2
	mov	edx, DWORD PTR tv775[ebp]
	inc	edx
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	push	eax
	push	OFFSET ??_C@_0FB@LLMJJKJH@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@

; 3108 :             outstring(msg);
; 3109 :           }
; 3110 :           return 0;

	jmp	$LN131@pop_edge_t@2
$LN68@pop_edge_t@2:

; 3107 :           { sprintf(msg,"pop_edge_to_tri fails on edge %s due to too many  triple edges at one endpoint.\n",ELNAME(e_id));

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	eax
	push	OFFSET ??_C@_0FB@LLMJJKJH@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@

; 3108 :             outstring(msg);
; 3109 :           }
; 3110 :           return 0;

	jmp	$LN131@pop_edge_t@2
$LN21@pop_edge_t@2:

; 3096 :       { if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	$LN3@pop_edge_t@2

; 3097 :         { sprintf(msg,
; 3098 :           "pop_edge_to_tri fails on edge %s due to edge %s having valence %d.\n",
; 3099 :              ELNAME(e_id),ELNAME1(eb),val);

	test	esi, 268435456				; 10000000H
	je	SHORT $LN64@pop_edge_t@2
	and	esi, 134217727				; 07ffffffH
	inc	esi
	push	esi
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames+30
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	esi, OFFSET _elnames+30
	jmp	SHORT $LN65@pop_edge_t@2
$LN64@pop_edge_t@2:
	mov	esi, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN65@pop_edge_t@2:
	test	edi, 268435456				; 10000000H
	je	SHORT $LN66@pop_edge_t@2
	mov	edx, DWORD PTR tv775[ebp]
	inc	edx
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN67@pop_edge_t@2
$LN66@pop_edge_t@2:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN67@pop_edge_t@2:
	mov	ecx, DWORD PTR _val$90921[ebp]
	mov	edx, DWORD PTR _msg
	push	ecx
	push	esi
	push	eax
	push	OFFSET ??_C@_0EE@BJFKLHDH@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@
	push	edx
	call	_sprintf

; 3100 :           outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 24					; 00000018H
	pop	ebx
	pop	edi

; 3146 :         }
; 3147 :         return 0;

	xor	eax, eax
	pop	esi

; 3161 : } // end pop_edge_to_tri()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN70@pop_edge_t@2:

; 3118 :       { sprintf(msg,"pop_edge_to_tri fails on edge %s due to not enough triple edges at one endpoint.\n",ELNAME(e_id));

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	eax
	push	OFFSET ??_C@_0FC@EBLDEBGL@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@

; 3119 :         outstring(msg);
; 3120 :       }
; 3121 :       return 0;

	jmp	SHORT $LN133@pop_edge_t@2
$LN124@pop_edge_t@2:
	mov	ebx, DWORD PTR _dymem
$LN16@pop_edge_t@2:

; 3122 :     }
; 3123 :   }
; 3124 : 
; 3125 :   if ( thit && hhit )

	cmp	DWORD PTR _thit$[ebp], 0
	je	SHORT $LN12@pop_edge_t@2
	cmp	DWORD PTR _hhit$[ebp], 0
	je	SHORT $LN14@pop_edge_t@2

; 3126 :   { if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	$LN3@pop_edge_t@2

; 3127 :     { sprintf(msg,"pop_edge_to_tri fails on edge %s due to both endpoints on constraints.\n",ELNAME(e_id));

	test	edi, 268435456				; 10000000H
	je	SHORT $LN72@pop_edge_t@2
	mov	ecx, DWORD PTR tv775[ebp]
	inc	ecx
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN73@pop_edge_t@2
$LN72@pop_edge_t@2:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN73@pop_edge_t@2:
	push	eax
	push	OFFSET ??_C@_0EI@PBLFGFEG@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@
$LN133@pop_edge_t@2:
	mov	edx, DWORD PTR _msg
	push	edx
	call	_sprintf

; 3128 :       outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 16					; 00000010H
	pop	ebx
	pop	edi

; 3129 :     }
; 3130 :     return 0;

	xor	eax, eax
	pop	esi

; 3161 : } // end pop_edge_to_tri()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@pop_edge_t@2:

; 3131 :   }
; 3132 :   if ( thit )
; 3133 :     return pop_edge_to_tri_con(e_id);
; 3134 :   if ( hhit )

	cmp	DWORD PTR _hhit$[ebp], 0
	je	SHORT $LN11@pop_edge_t@2

; 3135 :     return pop_edge_to_tri_con(inverse_id(e_id));

	xor	edi, 134217728				; 08000000H
$LN14@pop_edge_t@2:
	push	edi
	call	_pop_edge_to_tri_con
	add	esp, 4
	pop	ebx
	pop	edi
	pop	esi

; 3161 : } // end pop_edge_to_tri()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@pop_edge_t@2:

; 3136 : 
; 3137 : 
; 3138 :   /* check for common endpoints on triples */
; 3139 :   for ( i = 0 ; i < 3 ; i++ )

	mov	DWORD PTR _i$[ebp], 0
$LL10@pop_edge_t@2:

; 3141 :       if ( equal_id(get_edge_headv(tail_triples[i]),
; 3142 :                     get_edge_headv(head_triples[j]))  )

	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _tail_triples$[ebp+ecx*4]
	mov	eax, esi
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR _j$[ebp], 0
	mov	DWORD PTR tv915[ebp], eax
	npad	2
$LL7@pop_edge_t@2:
	mov	eax, DWORD PTR _web+216
	mov	eax, DWORD PTR [eax+ebx+304]
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	cmp	DWORD PTR tv915[ebp], 0
	mov	ecx, DWORD PTR [edx+ecx*4]
	je	SHORT $LN93@pop_edge_t@2
	mov	edi, DWORD PTR [eax+ecx]
	jmp	SHORT $LN92@pop_edge_t@2
$LN93@pop_edge_t@2:
	mov	edi, DWORD PTR _web+636
	lea	ecx, DWORD PTR [ecx+edi*4]
	mov	edi, DWORD PTR [ecx+eax]
$LN92@pop_edge_t@2:
	mov	ecx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _head_triples$[ebp+ecx*4]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN97@pop_edge_t@2
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR [eax+ecx]
	jmp	SHORT $LN96@pop_edge_t@2
$LN97@pop_edge_t@2:
	mov	ebx, DWORD PTR _web+636
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	lea	ecx, DWORD PTR [ecx+ebx*4]
	mov	eax, DWORD PTR [ecx+eax]
	mov	ebx, DWORD PTR _dymem
$LN96@pop_edge_t@2:
	cmp	edi, eax
	je	SHORT $LN112@pop_edge_t@2

; 3140 :     for ( j = 0 ; j < 3 ; j++ )

	mov	eax, DWORD PTR _j$[ebp]
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, 3
	jl	SHORT $LL7@pop_edge_t@2

; 3136 : 
; 3137 : 
; 3138 :   /* check for common endpoints on triples */
; 3139 :   for ( i = 0 ; i < 3 ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, 3
	jl	$LL10@pop_edge_t@2

; 3148 :       }
; 3149 : 
; 3150 :   if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	$LN2@pop_edge_t@2

; 3151 :   { sprintf(msg,"pop_edge_to_tri on edge %s\n",ELNAME(e_id));

	test	DWORD PTR _e_id$[ebp], 268435456	; 10000000H
	je	$LN76@pop_edge_t@2
	mov	edx, DWORD PTR tv775[ebp]
	inc	edx
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN77@pop_edge_t@2
$LN112@pop_edge_t@2:

; 3143 :       { if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	SHORT $LN3@pop_edge_t@2

; 3144 :         { sprintf(msg,"pop_edge_to_tri fails on edge %s due to outer triple edges with common endpoint.\n",ELNAME(e_id));

	test	DWORD PTR _e_id$[ebp], 268435456	; 10000000H
	je	SHORT $LN74@pop_edge_t@2
	mov	edx, DWORD PTR tv775[ebp]
	inc	edx
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN75@pop_edge_t@2
$LN74@pop_edge_t@2:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN75@pop_edge_t@2:
	push	eax
	push	OFFSET ??_C@_0FC@HAADAPNP@pop_edge_to_tri?5fails?5on?5edge?5?$CFs@
$LN131@pop_edge_t@2:
	mov	eax, DWORD PTR _msg
	push	eax
	call	_sprintf

; 3145 :           outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 16					; 00000010H
$LN3@pop_edge_t@2:

; 3146 :         }
; 3147 :         return 0;

	pop	ebx
	pop	edi
	xor	eax, eax
	pop	esi

; 3161 : } // end pop_edge_to_tri()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN76@pop_edge_t@2:

; 3151 :   { sprintf(msg,"pop_edge_to_tri on edge %s\n",ELNAME(e_id));

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN77@pop_edge_t@2:
	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0BM@HAGPKJK@pop_edge_to_tri?5on?5edge?5?$CFs?6?$AA@
	push	eax
	call	_sprintf

; 3152 :     outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 16					; 00000010H
$LN2@pop_edge_t@2:

; 3153 :   }
; 3154 : 
; 3155 :   /* Delete the edge */
; 3156 :   retval = delete_edge(e_id);

	mov	esi, DWORD PTR _e_id$[ebp]
	push	esi
	call	_delete_edge
	add	esp, 4

; 3157 :   if ( retval == 0 ) return 0;

	test	eax, eax
	je	SHORT $LN3@pop_edge_t@2

; 3158 :   free_element(e_id);

	push	esi
	call	_free_element

; 3159 : 
; 3160 :   return pop_vertex_to_tri((valid_element(headv) ? headv : tailv),tail_triples);

	mov	esi, DWORD PTR _headv$[ebp]
	push	esi
	call	_valid_element
	add	esp, 8
	test	eax, eax
	mov	eax, esi
	jne	SHORT $LN79@pop_edge_t@2
	mov	eax, DWORD PTR _tailv$[ebp]
$LN79@pop_edge_t@2:
	lea	edx, DWORD PTR _tail_triples$[ebp]
	push	edx
	push	eax
	call	_pop_vertex_to_tri

; 3161 : } // end pop_edge_to_tri()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 8
	pop	ebx
	pop	edi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_pop_edge_to_tri ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EB@MPEJPCCA@Vertex?5?$CFs?5has?5edges?5of?5valence?5m@ ; `string'
PUBLIC	??_C@_0DE@NNILHGID@Too?5many?5edges?5around?5vertex?5?$CFs?5@ ; `string'
PUBLIC	??_C@_0FL@EDPEGKDD@Pop?5vertex?5?$CFs?5fails?5since?5constr@ ; `string'
PUBLIC	_v_id$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_pop_constrained_vertex
EXTRN	_get_vertex_evalence:PROC
;	COMDAT ??_C@_0EB@MPEJPCCA@Vertex?5?$CFs?5has?5edges?5of?5valence?5m@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0EB@MPEJPCCA@Vertex?5?$CFs?5has?5edges?5of?5valence?5m@ DB 'Vertex '
	DB	'%s has edges of valence more than 3, so pop edges first.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@NNILHGID@Too?5many?5edges?5around?5vertex?5?$CFs?5@
CONST	SEGMENT
??_C@_0DE@NNILHGID@Too?5many?5edges?5around?5vertex?5?$CFs?5@ DB 'Too man'
	DB	'y edges around vertex %s for pop to handle.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FL@EDPEGKDD@Pop?5vertex?5?$CFs?5fails?5since?5constr@
CONST	SEGMENT
??_C@_0FL@EDPEGKDD@Pop?5vertex?5?$CFs?5fails?5since?5constr@ DB 'Pop vert'
	DB	'ex %s fails since constraints of edge %s are not a subset of '
	DB	'those of the vertex.', 0aH, 00H		; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\popfilm.c
CONST	ENDS
;	COMDAT _pop_constrained_vertex
_TEXT	SEGMENT
_vhits$ = -1724						; size = 4
_valence$91645 = -1720					; size = 4
_start_e$ = -1716					; size = 4
$T100803 = -1712					; size = 4
_hits$91652 = -1708					; size = 4
_toohigh$ = -1704					; size = 4
tv421 = -1700						; size = 4
_triples$ = -1696					; size = 4
_vmap$ = -1692						; size = 4
_v_id$GSCopy$ = -1688					; size = 4
_kind_lists$ = -1684					; size = 1600
_kind_counts$ = -84					; size = 80
__$ArrayPad$ = -4					; size = 4
_v_id$ = 8						; size = 4
_pop_constrained_vertex PROC				; COMDAT

; 4453 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1724				; 000006bcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 4454 :   conmap_t *vmap = get_v_constraint_map(v_id);

	mov	eax, DWORD PTR _web+104
	mov	ecx, DWORD PTR _dymem
	push	ebx
	push	esi
	mov	esi, DWORD PTR _v_id$[ebp]
	push	edi
	xor	edi, edi

; 4475 : 
; 4476 :     /* see if constraints are at most those of v_id */
; 4477 :     for ( i = 1 ; i <= emap[0] ; i++ )

	mov	DWORD PTR _v_id$GSCopy$[ebp], esi
	cmp	DWORD PTR [eax+ecx+1288], edi
	je	SHORT $LN35@pop_constr

; 4454 :   conmap_t *vmap = get_v_constraint_map(v_id);

	mov	ebx, DWORD PTR _web+12
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+edx*4]
	add	edx, DWORD PTR [eax+ecx+1264]
	mov	DWORD PTR _vmap$[ebp], edx
	jmp	SHORT $LN36@pop_constr
$LN35@pop_constr:
	mov	DWORD PTR _vmap$[ebp], OFFSET _nullcon
$LN36@pop_constr:

; 4455 :   int vhits = v_hit_constraint_count(v_id);

	push	esi
	call	_v_hit_constraint_count
	add	esp, 4
	mov	DWORD PTR _vhits$[ebp], eax

; 4456 :   int kind_counts[5][4];  /* indexed by valence, constraints */
; 4457 :   edge_id kind_lists[5][4][20]; /* actual edges, for easy reference */
; 4458 :   int toohigh=0,triples=0;

	mov	DWORD PTR _toohigh$[ebp], edi
	mov	DWORD PTR _triples$[ebp], edi

; 4459 :   unsigned int i,j,val;
; 4460 :   edge_id e_id,start_e;
; 4461 : 
; 4462 :   if ( vhits == 3 )

	cmp	eax, 3
	jne	SHORT $LN32@pop_constr

; 4463 :     return triple_con_pop(v_id);

	push	esi
	call	_triple_con_pop
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 4545 : } // end pop_constrained_vertex()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN32@pop_constr:

; 4464 : 
; 4465 :   for ( i = 0; i < 5 ; i++ )
; 4466 :    for ( j = 0 ; j < 4 ; j++ )
; 4467 :      kind_counts[i][j] = 0;

	xor	eax, eax

; 4468 :  
; 4469 :   /* detect types of edges */
; 4470 :   e_id = start_e = get_vertex_edge(v_id);

	and	esi, 134217727				; 07ffffffH
	mov	DWORD PTR _kind_counts$[ebp], eax
	mov	DWORD PTR _kind_counts$[ebp+4], eax
	mov	DWORD PTR _kind_counts$[ebp+8], eax
	mov	DWORD PTR _kind_counts$[ebp+12], eax
	mov	DWORD PTR _kind_counts$[ebp+16], eax
	mov	DWORD PTR _kind_counts$[ebp+20], eax
	mov	DWORD PTR _kind_counts$[ebp+24], eax
	mov	DWORD PTR _kind_counts$[ebp+28], eax
	mov	DWORD PTR _kind_counts$[ebp+32], eax
	mov	DWORD PTR _kind_counts$[ebp+36], eax
	mov	DWORD PTR _kind_counts$[ebp+40], eax
	mov	DWORD PTR _kind_counts$[ebp+44], eax
	mov	DWORD PTR _kind_counts$[ebp+48], eax
	mov	DWORD PTR _kind_counts$[ebp+52], eax
	mov	DWORD PTR _kind_counts$[ebp+56], eax
	mov	DWORD PTR _kind_counts$[ebp+60], eax
	mov	DWORD PTR _kind_counts$[ebp+64], eax
	mov	DWORD PTR _kind_counts$[ebp+68], eax
	mov	DWORD PTR _kind_counts$[ebp+72], eax
	mov	DWORD PTR _kind_counts$[ebp+76], eax
	mov	eax, DWORD PTR _web+12
	mov	ecx, DWORD PTR [eax+esi*4]
	mov	DWORD PTR tv421[ebp], esi
	mov	esi, DWORD PTR [ecx+28]
	mov	DWORD PTR _start_e$[ebp], esi
$LL25@pop_constr:

; 4471 :   do
; 4472 :   { int valence = get_edge_valence(e_id);

	push	esi
	call	_get_edge_valence

; 4473 :     conmap_t *emap = get_e_constraint_map(e_id);

	mov	ecx, DWORD PTR _web+216
	mov	edx, DWORD PTR _dymem
	add	esp, 4
	cmp	DWORD PTR [ecx+edx+1048], 0
	mov	ebx, eax
	mov	DWORD PTR _valence$91645[ebp], ebx
	je	SHORT $LN37@pop_constr
	mov	edi, DWORD PTR _web+124
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edi+eax*4]
	add	edi, DWORD PTR [ecx+edx+1024]
	jmp	SHORT $LN38@pop_constr
$LN37@pop_constr:
	mov	edi, OFFSET _nullcon
$LN38@pop_constr:

; 4474 :     int hits = 0;

	xor	ecx, ecx

; 4475 : 
; 4476 :     /* see if constraints are at most those of v_id */
; 4477 :     for ( i = 1 ; i <= emap[0] ; i++ )

	mov	eax, 1
	mov	DWORD PTR _hits$91652[ebp], ecx
	cmp	DWORD PTR [edi], eax
	jb	$LN20@pop_constr

; 4497 :     if ( kind_counts[valence][hits] > 20 )

	mov	ecx, DWORD PTR _vmap$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T100803[ebp], edx
	npad	4
$LL65@pop_constr:

; 4478 :     { int found = 0;
; 4479 :       for ( j = 1 ; j <= vmap[0] ; j++ )

	mov	ecx, 1
	cmp	DWORD PTR $T100803[ebp], ecx
	jb	SHORT $LN67@pop_constr
	mov	edx, DWORD PTR [edi+eax*4]
$LL19@pop_constr:

; 4480 :         if ( emap[i] == (vmap[j] & ~CON_HIT_BIT) )

	mov	ebx, DWORD PTR _vmap$[ebp]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	and	ebx, 2147483647				; 7fffffffH
	cmp	edx, ebx
	je	SHORT $LN54@pop_constr

; 4478 :     { int found = 0;
; 4479 :       for ( j = 1 ; j <= vmap[0] ; j++ )

	inc	ecx
	cmp	ecx, DWORD PTR $T100803[ebp]
	jbe	SHORT $LL19@pop_constr
$LN67@pop_constr:

; 4483 :           found = 1;
; 4484 :           break;
; 4485 :         }
; 4486 :       if ( !found )
; 4487 :       { if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	$LN1@pop_constr

; 4488 :         { sprintf(msg,"Pop vertex %s fails since constraints of edge %s are not a subset of those of the vertex.\n",ELNAME(v_id),ELNAME1(e_id));

	test	esi, 268435456				; 10000000H
	je	$LN39@pop_constr
	and	esi, 134217727				; 07ffffffH
	inc	esi
	push	esi
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames+30
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	esi, OFFSET _elnames+30
	jmp	$LN40@pop_constr
$LN54@pop_constr:

; 4481 :         { if ( vmap[j] & CON_HIT_BIT )

	mov	edx, DWORD PTR _vmap$[ebp]
	test	DWORD PTR [edx+ecx*4], -2147483648	; 80000000H
	je	SHORT $LN66@pop_constr

; 4482 :             hits++;

	inc	DWORD PTR _hits$91652[ebp]
$LN66@pop_constr:

; 4475 : 
; 4476 :     /* see if constraints are at most those of v_id */
; 4477 :     for ( i = 1 ; i <= emap[0] ; i++ )

	inc	eax
	cmp	eax, DWORD PTR [edi]
	jbe	$LL65@pop_constr
	mov	ebx, DWORD PTR _valence$91645[ebp]
	mov	ecx, DWORD PTR _hits$91652[ebp]
$LN20@pop_constr:

; 4490 :         }
; 4491 :         return 0;
; 4492 :       }
; 4493 :     }
; 4494 :     if ( valence > 3 ) { valence = 4; toohigh++; }

	cmp	ebx, 3
	jle	$LN74@pop_constr
	inc	DWORD PTR _toohigh$[ebp]
	mov	ebx, 4
$LN68@pop_constr:

; 4495 :     if ( valence == 3 ) triples++;

	mov	edi, DWORD PTR _triples$[ebp]
$LN11@pop_constr:

; 4496 :     if ( hits > 3 ) hits = 4;

	cmp	ecx, 3
	jle	SHORT $LN10@pop_constr
	mov	ecx, 4
$LN10@pop_constr:

; 4497 :     if ( kind_counts[valence][hits] > 20 )

	lea	eax, DWORD PTR [ecx+ebx*4]
	mov	ecx, DWORD PTR _kind_counts$[ebp+eax*4]
	lea	edx, DWORD PTR _kind_counts$[ebp+eax*4]
	cmp	ecx, 20					; 00000014H
	jg	$LN57@pop_constr

; 4501 :       return 0;
; 4502 :     }
; 4503 : 	kind_lists[valence][hits][kind_counts[valence][hits]++] = e_id;

	lea	eax, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	inc	ecx
	mov	DWORD PTR [edx], ecx

; 4504 :     e_id = get_next_tail_edge(e_id);

	mov	edx, DWORD PTR _web+124
	mov	ecx, esi
	mov	DWORD PTR _kind_lists$[ebp+eax*4], esi
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+esi*4]
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	esi, DWORD PTR [eax+ecx*4+32]

; 4505 :   } while ( !equal_id(e_id,start_e) );

	cmp	esi, DWORD PTR _start_e$[ebp]
	jne	$LL25@pop_constr

; 4506 : 
; 4507 :   /* see what we have */
; 4508 :   if ( toohigh )

	cmp	DWORD PTR _toohigh$[ebp], 0
	je	$LN69@pop_constr

; 4509 :   { if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	$LN69@pop_constr

; 4510 :     { sprintf(msg,
; 4511 :        "Vertex %s has edges of valence more than 3, so pop edges first.\n",
; 4512 :           ELNAME(v_id));

	mov	ebx, DWORD PTR _v_id$GSCopy$[ebp]
	test	ebx, 268435456				; 10000000H
	je	$LN45@pop_constr
	mov	edx, DWORD PTR tv421[ebp]
	inc	edx
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	$LN46@pop_constr
$LN74@pop_constr:

; 4495 :     if ( valence == 3 ) triples++;

	jne	$LN68@pop_constr
	mov	edi, DWORD PTR _triples$[ebp]
	inc	edi
	mov	DWORD PTR _triples$[ebp], edi
	jmp	$LN11@pop_constr
$LN39@pop_constr:

; 4488 :         { sprintf(msg,"Pop vertex %s fails since constraints of edge %s are not a subset of those of the vertex.\n",ELNAME(v_id),ELNAME1(e_id));

	mov	esi, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN40@pop_constr:
	test	DWORD PTR _v_id$GSCopy$[ebp], 268435456	; 10000000H
	je	SHORT $LN41@pop_constr
	mov	ecx, DWORD PTR tv421[ebp]
	inc	ecx
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN42@pop_constr
$LN41@pop_constr:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN42@pop_constr:
	mov	edx, DWORD PTR _msg
	push	esi
	push	eax
	push	OFFSET ??_C@_0FL@EDPEGKDD@Pop?5vertex?5?$CFs?5fails?5since?5constr@
	push	edx
	call	_sprintf

; 4489 :           outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 20					; 00000014H
$LN1@pop_constr:

; 4542 :   }
; 4543 : 
; 4544 :   return 0;

	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx

; 4545 : } // end pop_constrained_vertex()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN57@pop_constr:

; 4498 :     { sprintf(errmsg,"Too many edges around vertex %s for pop to handle.\n",
; 4499 :         ELNAME(v_id));

	test	DWORD PTR _v_id$GSCopy$[ebp], 268435456	; 10000000H
	je	SHORT $LN43@pop_constr
	mov	ecx, DWORD PTR tv421[ebp]
	inc	ecx
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN44@pop_constr
$LN43@pop_constr:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN44@pop_constr:
	push	eax
	push	OFFSET ??_C@_0DE@NNILHGID@Too?5many?5edges?5around?5vertex?5?$CFs?5@
	push	OFFSET _errmsg
	call	_sprintf

; 4500 :       kb_error(4001,errmsg,WARNING);

	push	2
	push	OFFSET _errmsg
	push	4001					; 00000fa1H
	call	_kb_error
	add	esp, 24					; 00000018H
	pop	edi
	pop	esi

; 4542 :   }
; 4543 : 
; 4544 :   return 0;

	xor	eax, eax
	pop	ebx

; 4545 : } // end pop_constrained_vertex()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN45@pop_constr:

; 4510 :     { sprintf(msg,
; 4511 :        "Vertex %s has edges of valence more than 3, so pop edges first.\n",
; 4512 :           ELNAME(v_id));

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN46@pop_constr:
	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0EB@MPEJPCCA@Vertex?5?$CFs?5has?5edges?5of?5valence?5m@
	push	eax
	call	_sprintf

; 4513 :       outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 16					; 00000010H
	jmp	SHORT $LN7@pop_constr
$LN69@pop_constr:
	mov	ebx, DWORD PTR _v_id$GSCopy$[ebp]
$LN7@pop_constr:

; 4514 :     }
; 4515 :   }
; 4516 : 
; 4517 :   if ( (vhits == 2) && (triples == 1))

	mov	esi, DWORD PTR _vhits$[ebp]
	cmp	esi, 2
	jne	SHORT $LN6@pop_constr
	cmp	edi, 1
	jne	SHORT $LN6@pop_constr

; 4518 :     return double_con_pop(v_id,kind_lists[3][0][0],kind_lists[1][1]);

	mov	eax, DWORD PTR _kind_lists$[ebp+960]
	lea	edx, DWORD PTR _kind_lists$[ebp+400]
	push	edx
	push	eax
	push	ebx
	call	_double_con_pop
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebx

; 4545 : } // end pop_constrained_vertex()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@pop_constr:

; 4519 : 
; 4520 :   val = get_vertex_evalence(v_id);

	push	ebx
	call	_get_vertex_evalence

; 4521 :   if ( (vhits == 1) && (kind_counts[1][1]==4) &&
; 4522 :              (kind_counts[2][0] == val-4) )

	mov	ecx, DWORD PTR _kind_counts$[ebp+20]
	add	esp, 4
	cmp	esi, 1
	jne	SHORT $LN5@pop_constr
	cmp	ecx, 4
	jne	SHORT $LN70@pop_constr
	add	eax, -4					; fffffffcH
	cmp	DWORD PTR _kind_counts$[ebp+32], eax
	jne	SHORT $LN70@pop_constr

; 4523 :     return one_con_pop_4(v_id,kind_lists[1][1],POP_TO_BETTER);

	push	0
	lea	ecx, DWORD PTR _kind_lists$[ebp+400]
	push	ecx
	push	ebx
	call	_one_con_pop_4
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebx

; 4545 : } // end pop_constrained_vertex()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@pop_constr:

; 4524 : 
; 4525 :   /* test for ok configurations */
; 4526 :   if ( (vhits <= 2) && (triples == 0) )

	cmp	esi, 2
	jg	SHORT $LN72@pop_constr
$LN70@pop_constr:
	test	edi, edi

; 4527 :     return 0;

	je	$LN1@pop_constr
$LN72@pop_constr:

; 4528 : 
; 4529 :   if ( triples <= 1 ) 

	cmp	edi, 1

; 4530 :     return 0;

	jle	$LN1@pop_constr

; 4531 : 
; 4532 :   /* so now have one constraint and at least two triple lines */
; 4533 :   if ( (triples == 2) && (kind_counts[3][0] == 2) && (kind_counts[1][1]==4) )

	cmp	edi, 2
	jne	SHORT $LN2@pop_constr
	cmp	DWORD PTR _kind_counts$[ebp+48], edi
	jne	$LN1@pop_constr
	cmp	ecx, 4
	jne	$LN1@pop_constr

; 4534 :   { /* common case of two unconstrained triple lines with 4 constrained edges */
; 4535 :     return one_con_pop_2(v_id,kind_lists[3][0],kind_lists[1][1],POP_TO_BETTER);

	push	0
	lea	edx, DWORD PTR _kind_lists$[ebp+400]
	push	edx
	lea	eax, DWORD PTR _kind_lists$[ebp+960]
	push	eax
	push	ebx
	call	_one_con_pop_2
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 4545 : } // end pop_constrained_vertex()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@pop_constr:

; 4536 :   }
; 4537 :   if ( (triples >= 3) && (kind_counts[3][0] == triples) 
; 4538 :         && (kind_counts[1][1]==triples) )

	cmp	edi, 3
	jl	$LN1@pop_constr
	cmp	DWORD PTR _kind_counts$[ebp+48], edi
	jne	$LN1@pop_constr
	cmp	ecx, edi
	jne	$LN1@pop_constr

; 4539 :   { /* common case of N unconstrained triple lines with N constrained edges */
; 4540 :     return one_con_pop_3(v_id,triples,kind_lists[3][0],kind_lists[1][1],
; 4541 :       POP_TO_BETTER);

	push	0
	lea	ecx, DWORD PTR _kind_lists$[ebp+400]
	push	ecx
	lea	edx, DWORD PTR _kind_lists$[ebp+960]
	push	edx
	push	edi
	push	ebx
	call	_one_con_pop_3

; 4545 : } // end pop_constrained_vertex()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_pop_constrained_vertex ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@IODDFLCB@?5Propagating?5pop?5to?5edge?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0BB@PHCAFGPH@Popping?5edge?5?$CFs?6?$AA@	; `string'
PUBLIC	??_C@_0DJ@GAAFHFDK@Can?8t?5find?5poppable?5pair?5of?5face@ ; `string'
PUBLIC	__real@c000000000000000
PUBLIC	??_C@_0BD@EBBBKAID@edge_pop_attribute?$AA@	; `string'
PUBLIC	_e_id$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_pop_one_edge
EXTRN	_phase_data:DWORD
EXTRN	_B_PHASE_ATTR:DWORD
EXTRN	_find_attribute:PROC
EXTRN	_kraynikpopedge_flag:DWORD
;	COMDAT ??_C@_0BN@IODDFLCB@?5Propagating?5pop?5to?5edge?5?$CFs?6?$AA@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0BN@IODDFLCB@?5Propagating?5pop?5to?5edge?5?$CFs?6?$AA@ DB ' Propag'
	DB	'ating pop to edge %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PHCAFGPH@Popping?5edge?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BB@PHCAFGPH@Popping?5edge?5?$CFs?6?$AA@ DB 'Popping edge %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@GAAFHFDK@Can?8t?5find?5poppable?5pair?5of?5face@
CONST	SEGMENT
??_C@_0DJ@GAAFHFDK@Can?8t?5find?5poppable?5pair?5of?5face@ DB 'Can''t fin'
	DB	'd poppable pair of facets on poppable edge %s.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT __real@c000000000000000
CONST	SEGMENT
__real@c000000000000000 DQ 0c000000000000000r	; -2
CONST	ENDS
;	COMDAT ??_C@_0BD@EBBBKAID@edge_pop_attribute?$AA@
CONST	SEGMENT
??_C@_0BD@EBBBKAID@edge_pop_attribute?$AA@ DB 'edge_pop_attribute', 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\popfilm.c
CONST	ENDS
;	COMDAT _pop_one_edge
_TEXT	SEGMENT
_maxcos$ = -412						; size = 8
_normA$ = -404						; size = 8
_tensionB$89281 = -396					; size = 8
tv1824 = -392						; size = 4
tv1655 = -392						; size = 4
_attr2$ = -388						; size = 8
_eattr$ = -388						; size = 8
_popped$ = -380						; size = 4
_normB$ = -376						; size = 8
tv2357 = -372						; size = 4
_fdegfree$ = -372					; size = 4
_foundkraynik$ = -368					; size = 4
_next_fdegfree$ = -364					; size = 4
_fe$ = -360						; size = 4
tv1615 = -356						; size = 4
_f2$ = -352						; size = 4
tv1472 = -348						; size = 4
_tensionA$89279 = -344					; size = 8
_attr1$ = -344						; size = 8
_map1$89252 = -340					; size = 4
_bb$89222 = -340					; size = 4
tv1879 = -336						; size = 4
_popattr$ = -336					; size = 4
_e_id$GSCopy$ = -332					; size = 4
_f1$ = -328						; size = 4
_this_septum_flag$ = -324				; size = 4
_degfree$ = -320					; size = 4
_first_fe$ = -320					; size = 4
_facet_count$ = -316					; size = 4
_tensionC$89283 = -312					; size = 8
tv1607 = -308						; size = 4
tv1547 = -308						; size = 4
_found$89358 = -308					; size = 4
_ii$89286 = -308					; size = 4
_found$89266 = -308					; size = 4
_ba$89221 = -308					; size = 4
_next_fe$89234 = -304					; size = 4
_maxffreen$ = -304					; size = 4
tv912 = -300						; size = 4
_didsplit$ = -300					; size = 4
_map1$89344 = -300					; size = 4
_bd$89224 = -300					; size = 4
_new_key$ = -296					; size = 4
_key_fe$ = -296						; size = 4
_midnormal$ = -292					; size = 48
_sideA$ = -244						; size = 48
_sideB$ = -196						; size = 48
_side$ = -148						; size = 48
_normalA$ = -100					; size = 48
_normalB$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_e_id$ = 8						; size = 4
_pop_one_edge PROC					; COMDAT

; 192  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 412				; 0000019cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	edx, DWORD PTR _e_id$[ebp]

; 193  :   int facet_count = 0;
; 194  :   facetedge_id fe_id,fe,key_fe=NULLID,new_key;
; 195  :   REAL side[MAXCOORD],sideA[MAXCOORD],sideB[MAXCOORD];
; 196  :   REAL normA,normB,normalA[MAXCOORD],normalB[MAXCOORD];
; 197  :   REAL maxcos,newcos;
; 198  :   int didsplit;
; 199  :   int foundwedge;
; 200  :   facetedge_id first_fe;
; 201  :   ATTR eattr = get_eattr(e_id);

	mov	ecx, DWORD PTR _web+124
	push	ebx
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	push	esi
	mov	DWORD PTR tv1472[ebp], eax
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR [eax+8]
	mov	esi, DWORD PTR [eax+12]
	push	edi
	xor	edi, edi
	mov	DWORD PTR _e_id$GSCopy$[ebp], edx
	mov	DWORD PTR _facet_count$[ebp], edi
	mov	DWORD PTR _key_fe$[ebp], edi
	mov	DWORD PTR _eattr$[ebp], ecx
	mov	DWORD PTR _eattr$[ebp+4], esi

; 202  :   facet_id f1,f2;
; 203  :   ATTR attr1,attr2;
; 204  :   int i,k;
; 205  :   REAL midnormal[MAXCOORD];
; 206  :   int popped = 0;

	mov	DWORD PTR _popped$[ebp], edi

; 207  :   int degfree;  /* degrees of freedom of edge */
; 208  :   int fdegfree,next_fdegfree;
; 209  :   int popattr = -1;  /* in case of kraynikpop */

	mov	DWORD PTR _popattr$[ebp], -1

; 210  :   int kraynikwedge; /* whether current wedge has kraynik preference */
; 211  :   int foundkraynik;
; 212  :   int maxffree;  /* maximum degrees of freedom of adjacent facets */
; 213  :   int maxffreen; /* number of adjacent facets with that freedom */
; 214  :   int this_septum_flag=1; /* whether to put in septum joining popped edges */

	mov	DWORD PTR _this_septum_flag$[ebp], 1

; 215  : 
; 216  :   /* count facets around edge */
; 217  :   fe_id = first_fe = get_edge_fe(e_id);

	cmp	eax, edi
	jne	SHORT $LN107@pop_one_ed
	xor	eax, eax
	jmp	SHORT $LN106@pop_one_ed
$LN107@pop_one_ed:
	mov	eax, DWORD PTR [eax+28]
	test	edx, 134217728				; 08000000H
	je	SHORT $LN106@pop_one_ed
	xor	eax, 134217728				; 08000000H
$LN106@pop_one_ed:

; 218  :   maxffree = 0; maxffreen = 0;
; 219  :   if ( valid_id(fe_id) )

	mov	ebx, DWORD PTR _web+460
	mov	DWORD PTR _first_fe$[ebp], eax
	mov	esi, eax
	xor	edx, edx
	shr	eax, 28					; 0000001cH
	mov	DWORD PTR _maxffreen$[ebp], edx
	test	al, 1
	je	$LN72@pop_one_ed
$LL74@pop_one_ed:

; 220  :   do 
; 221  :   { int ffree = facet_degfree(get_fe_facet(fe_id));

	test	al, 1
	jne	SHORT $LN111@pop_one_ed
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN110@pop_one_ed
$LN111@pop_one_ed:
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+edx*4]
	mov	eax, DWORD PTR [eax+24]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN110@pop_one_ed
	xor	eax, 134217728				; 08000000H
$LN110@pop_one_ed:
	push	eax
	call	_facet_degfree
	add	esp, 4

; 222  :     if ( ffree > maxffree )

	cmp	eax, edi
	jle	SHORT $LN237@pop_one_ed

; 223  :     { maxffree = ffree; maxffreen = 1; }

	mov	edi, eax
	mov	DWORD PTR _maxffreen$[ebp], 1
	jmp	SHORT $LN214@pop_one_ed
$LN237@pop_one_ed:

; 224  :     else if ( ffree == maxffree ) maxffreen ++;

	jne	SHORT $LN214@pop_one_ed
	inc	DWORD PTR _maxffreen$[ebp]
$LN214@pop_one_ed:

; 225  :     facet_count++;

	inc	DWORD PTR _facet_count$[ebp]

; 226  :     fe_id = get_next_facet(fe_id);

	test	esi, 134217728				; 08000000H
	je	SHORT $LN115@pop_one_ed
	and	esi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+esi*4]
	mov	esi, DWORD PTR [ecx+36]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN73@pop_one_ed
$LN115@pop_one_ed:
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+esi*4]
	mov	esi, DWORD PTR [edx+40]
$LN73@pop_one_ed:

; 227  :   } while ( valid_id(fe_id) && !equal_id(fe_id,first_fe) );

	mov	eax, esi
	shr	eax, 28					; 0000001cH
	test	al, 1
	je	SHORT $LN68@pop_one_ed
	cmp	esi, DWORD PTR _first_fe$[ebp]
	jne	$LL74@pop_one_ed
$LN68@pop_one_ed:
	mov	ecx, DWORD PTR _eattr$[ebp]
	mov	edx, DWORD PTR _maxffreen$[ebp]
$LN72@pop_one_ed:

; 228  : 
; 229  :   /* only pop if more than 3 facets, or a wall or wire */
; 230  :   if ( !(eattr & (FIXED|BOUNDARY|CONSTRAINT) && (maxffreen >= 2))
; 231  :        && !(maxffreen > 3) )

	and	ecx, 1216				; 000004c0H
	mov	eax, ecx
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN66@pop_one_ed
	cmp	edx, 2
	jge	SHORT $LN67@pop_one_ed
$LN66@pop_one_ed:
	cmp	edx, 3

; 232  :      return 0;

	jle	$LN23@pop_one_ed
$LN67@pop_one_ed:

; 233  : 
; 234  :   /* Get degrees of freedom of edge */
; 235  :   degfree = edge_degfree(e_id);

	mov	esi, DWORD PTR _e_id$GSCopy$[ebp]
	push	esi
	call	_edge_degfree

; 236  :  
; 237  :   if ( (facet_count == 3) && (degfree == SDIM) ) return 0;

	mov	edi, DWORD PTR _facet_count$[ebp]
	add	esp, 4
	mov	DWORD PTR _degfree$[ebp], eax
	cmp	edi, 3
	jne	SHORT $LN65@pop_one_ed
	cmp	eax, DWORD PTR _web+616
	je	$LN23@pop_one_ed
$LN65@pop_one_ed:

; 238  : 
; 239  :   if ( kraynikpopedge_flag )

	cmp	DWORD PTR _kraynikpopedge_flag, 0
	je	SHORT $LN215@pop_one_ed

; 240  :   { /* find facets that disagree on edge_pop_attribute */
; 241  :     popattr = find_attribute(FACET,"edge_pop_attribute");

	push	OFFSET ??_C@_0BD@EBBBKAID@edge_pop_attribute?$AA@
	push	2
	call	_find_attribute
	add	esp, 8
	mov	DWORD PTR _popattr$[ebp], eax
$LN215@pop_one_ed:

; 242  :   }
; 243  :   
; 244  :   foundwedge = 0;
; 245  :   foundkraynik = 0;
; 246  :  
; 247  :   if ( pop_disjoin_flag && (facet_count == 4) )

	cmp	DWORD PTR _pop_disjoin_flag, 0
	mov	DWORD PTR _foundkraynik$[ebp], 0
	je	$LN197@pop_one_ed
	cmp	edi, 4
	jne	$LN197@pop_one_ed

; 248  :   { /* test for merging Plateau borders */
; 249  :     facetedge_id fea,feb,fec,fed;
; 250  :     body_id ba,bb,bc,bd;
; 251  :     fea = get_edge_fe(e_id);

	mov	eax, DWORD PTR tv1472[ebp]
	mov	ecx, DWORD PTR _web+124
	mov	eax, DWORD PTR [ecx+eax*4]
	test	eax, eax
	jne	SHORT $LN119@pop_one_ed
	xor	edi, edi
	jmp	SHORT $LN120@pop_one_ed
$LN119@pop_one_ed:
	mov	eax, DWORD PTR [eax+28]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN118@pop_one_ed
	xor	eax, 134217728				; 08000000H
$LN118@pop_one_ed:
	mov	edi, eax
$LN120@pop_one_ed:

; 252  :     feb = get_next_facet(fea); 

	push	edi
	call	_get_next_facet
	mov	esi, eax

; 253  :     fec = get_next_facet(feb); 

	push	esi
	call	_get_next_facet

; 254  :     fed = get_next_facet(fec); 
; 255  :     ba = get_facet_body(get_fe_facet(fea));

	push	edi
	mov	ebx, eax
	call	_get_fe_facet
	push	eax
	call	_get_facet_body

; 256  :     bb = get_facet_body(get_fe_facet(feb));

	push	esi
	mov	DWORD PTR _ba$89221[ebp], eax
	call	_get_fe_facet
	push	eax
	call	_get_facet_body
	push	ebx
	mov	DWORD PTR _bb$89222[ebp], eax
	call	_get_next_facet

; 258  :     bd = get_facet_body(get_fe_facet(fed));

	push	eax
	call	_get_fe_facet
	push	eax
	call	_get_facet_body
	add	esp, 36					; 00000024H

; 259  :     if ( valid_id(ba) && equal_id(ba,bc) ) 

	test	DWORD PTR _ba$89221[ebp], 268435456	; 10000000H
	mov	DWORD PTR _bd$89224[ebp], eax
	je	SHORT $LN62@pop_one_ed

; 257  :     bc = get_facet_body(get_fe_facet(fec));

	push	ebx
	call	_get_fe_facet
	push	eax
	call	_get_facet_body
	add	esp, 8

; 259  :     if ( valid_id(ba) && equal_id(ba,bc) ) 

	cmp	DWORD PTR _ba$89221[ebp], eax
	jne	SHORT $LN62@pop_one_ed

; 260  :     { key_fe = feb;

	mov	DWORD PTR _key_fe$[ebp], esi

; 261  :       foundwedge = 1;
; 262  :       this_septum_flag = 0;

	mov	DWORD PTR _this_septum_flag$[ebp], 0
	jmp	$LN200@pop_one_ed
$LN62@pop_one_ed:

; 263  :     }
; 264  :     else if ( valid_id(bb) && equal_id(bb,bd) ) 

	test	DWORD PTR _bb$89222[ebp], 268435456	; 10000000H
	je	SHORT $LN197@pop_one_ed
	mov	edx, DWORD PTR _bd$89224[ebp]
	cmp	DWORD PTR _bb$89222[ebp], edx
	jne	SHORT $LN197@pop_one_ed

; 265  :     { key_fe = fea;

	mov	DWORD PTR _key_fe$[ebp], edi

; 266  :       foundwedge = 1;
; 267  :       this_septum_flag = 0;

	mov	DWORD PTR _this_septum_flag$[ebp], 0

; 268  :     }
; 269  :   }
; 270  : 
; 271  :   if ( !foundwedge )

	jmp	$LN200@pop_one_ed
$LN197@pop_one_ed:

; 272  :   {
; 273  :     /* find narrowest wedge to pull out */
; 274  :     get_edge_side(e_id,side);

	mov	esi, DWORD PTR _e_id$GSCopy$[ebp]
	lea	eax, DWORD PTR _side$[ebp]
	push	eax
	push	esi
	call	_get_edge_side

; 275  :     maxcos = -2.0;    /* for finding minimum angle between facets */

	fld	QWORD PTR __real@c000000000000000

; 276  : 
; 277  :     /* find first facet normal */
; 278  :     fe = get_edge_fe(e_id);

	mov	ecx, DWORD PTR _web+124
	fstp	QWORD PTR _maxcos$[ebp]
	mov	edx, DWORD PTR tv1472[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN123@pop_one_ed
	xor	edi, edi
	mov	DWORD PTR _fe$[ebp], edi
	jmp	SHORT $LN124@pop_one_ed
$LN123@pop_one_ed:
	mov	eax, DWORD PTR [eax+28]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN122@pop_one_ed
	xor	eax, 134217728				; 08000000H
$LN122@pop_one_ed:
	mov	edi, eax
	mov	DWORD PTR _fe$[ebp], eax
$LN124@pop_one_ed:

; 279  :     get_fe_side(get_next_edge(fe),sideA);

	mov	ecx, DWORD PTR _web+460
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	mov	ebx, edi
	add	esi, esi
	shr	ebx, 27					; 0000001bH
	add	esi, esi
	and	ebx, 1
	je	SHORT $LN127@pop_one_ed
	mov	eax, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN126@pop_one_ed
$LN127@pop_one_ed:
	mov	edx, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [edx+32]
$LN126@pop_one_ed:
	lea	edx, DWORD PTR _sideA$[ebp]
	push	edx
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	push	eax
	call	_get_edge_side

; 280  :     cross_prod(side,sideA,normalA);

	lea	edx, DWORD PTR _normalA$[ebp]
	push	edx
	lea	eax, DWORD PTR _sideA$[ebp]
	push	eax
	lea	ecx, DWORD PTR _side$[ebp]
	push	ecx
	call	_cross_prod

; 281  :     normA = sqrt(SDIM_dot(normalA,normalA));

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _normalA$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	add	esp, 32					; 00000020H
	call	__CIsqrt
	fstp	QWORD PTR _normA$[ebp]

; 282  :     next_fdegfree = fdegfree = facet_degfree(get_fe_facet(fe));

	test	edi, 268435456				; 10000000H
	jne	SHORT $LN133@pop_one_ed
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN132@pop_one_ed
$LN133@pop_one_ed:
	mov	edx, DWORD PTR _web+460
	mov	eax, DWORD PTR [esi+edx]
	mov	eax, DWORD PTR [eax+24]
	test	ebx, ebx
	je	SHORT $LN132@pop_one_ed
	xor	eax, 134217728				; 08000000H
$LN132@pop_one_ed:
	push	eax
	call	_facet_degfree
	mov	DWORD PTR _next_fdegfree$[ebp], eax

; 283  :     for ( i = 0 ; i < facet_count ; i++ )

	mov	eax, DWORD PTR _facet_count$[ebp]
	add	esp, 4
	test	eax, eax
	jle	$LN199@pop_one_ed

; 282  :     next_fdegfree = fdegfree = facet_degfree(get_fe_facet(fe));

	mov	DWORD PTR tv912[ebp], eax
	npad	6
$LL58@pop_one_ed:

; 284  :     { facetedge_id next_fe;
; 285  : 
; 286  :       next_fe = get_next_facet(fe);

	mov	eax, DWORD PTR _fe$[ebp]
	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR tv1547[ebp], ecx
	je	SHORT $LN137@pop_one_ed
	mov	ecx, eax
	mov	eax, DWORD PTR _web+460
	and	ecx, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [esi+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN238@pop_one_ed
$LN137@pop_one_ed:
	mov	edx, eax
	mov	eax, DWORD PTR _web+460
	and	edx, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR [esi+40]
$LN238@pop_one_ed:

; 287  :       fdegfree = next_fdegfree;

	mov	ebx, DWORD PTR _next_fdegfree$[ebp]

; 288  :       next_fdegfree = facet_degfree(get_fe_facet(next_fe));

	mov	edi, ecx
	shr	edi, 28					; 0000001cH
	and	edi, 1
	mov	DWORD PTR _next_fe$89234[ebp], ecx
	mov	DWORD PTR _fdegfree$[ebp], ebx
	jne	SHORT $LN141@pop_one_ed
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN140@pop_one_ed
$LN141@pop_one_ed:
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [eax+24]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN140@pop_one_ed
	xor	eax, 134217728				; 08000000H
$LN140@pop_one_ed:
	push	eax
	call	_facet_degfree
	add	esp, 4
	mov	DWORD PTR _next_fdegfree$[ebp], eax

; 289  : 
; 290  :       /* test wedge for compatibility */
; 291  :       if ( fdegfree < 3 ) continue;

	cmp	ebx, 3
	jl	$LN57@pop_one_ed

; 292  :       if ( next_fdegfree < 3 ) continue;

	cmp	eax, 3
	jl	$LN57@pop_one_ed

; 293  :       f1 = get_fe_facet(fe);

	test	DWORD PTR _fe$[ebp], 268435456		; 10000000H
	jne	SHORT $LN145@pop_one_ed
	mov	ecx, DWORD PTR _NULLFACET
	mov	DWORD PTR _f1$[ebp], ecx
	jmp	SHORT $LN146@pop_one_ed
$LN145@pop_one_ed:
	cmp	DWORD PTR tv1547[ebp], 0
	mov	esi, DWORD PTR [esi+24]
	je	SHORT $LN206@pop_one_ed
	xor	esi, 134217728				; 08000000H
$LN206@pop_one_ed:
	mov	DWORD PTR _f1$[ebp], esi
$LN146@pop_one_ed:

; 294  :       f2 = get_fe_facet(next_fe);

	test	edi, edi
	jne	SHORT $LN149@pop_one_ed
	mov	edx, DWORD PTR _NULLFACET
	mov	DWORD PTR _f2$[ebp], edx
	jmp	SHORT $LN150@pop_one_ed
$LN149@pop_one_ed:
	mov	ecx, DWORD PTR _next_fe$89234[ebp]
	mov	edx, DWORD PTR _web+460
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+24]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN148@pop_one_ed
	xor	eax, 134217728				; 08000000H
$LN148@pop_one_ed:
	mov	DWORD PTR _f2$[ebp], eax
$LN150@pop_one_ed:

; 295  :       attr1 = get_fattr(f1);

	mov	ebx, DWORD PTR _f1$[ebp]
	mov	edx, DWORD PTR _web+236
	and	ebx, 134217727				; 07ffffffH
	add	ebx, ebx
	add	ebx, ebx
	mov	eax, DWORD PTR [ebx+edx]
	mov	ecx, DWORD PTR [eax+12]
	mov	esi, DWORD PTR [eax+8]
	mov	DWORD PTR _attr1$[ebp+4], ecx

; 296  :       attr2 = get_fattr(f2);

	mov	ecx, DWORD PTR _f2$[ebp]
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx

; 297  :       if ( get_facet_boundary(f1) != get_facet_boundary(f2) )

	cmp	DWORD PTR _F_BOUNDARY_ATTR, 0
	mov	DWORD PTR tv1615[ebp], ecx
	mov	ecx, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR [ecx+8]
	mov	edi, DWORD PTR [ecx+12]
	mov	DWORD PTR tv1607[ebp], ebx
	mov	DWORD PTR _attr2$[ebp], edx
	mov	DWORD PTR _attr2$[ebp+4], edi
	je	SHORT $LN198@pop_one_ed
	mov	edx, DWORD PTR _F_BOUNDARY_ATTR
	mov	edi, DWORD PTR _dymem
	imul	edx, 240				; 000000f0H
	add	edx, DWORD PTR _web+328
	mov	ebx, DWORD PTR _web+776
	mov	edx, DWORD PTR [edx+edi+64]
	mov	edi, DWORD PTR [edx+eax]
	mov	edx, DWORD PTR [edx+ecx]
	imul	edi, 136				; 00000088H
	imul	edx, 136				; 00000088H
	add	edi, ebx
	add	edx, ebx
	cmp	edi, edx
	jne	$LN57@pop_one_ed
	mov	ebx, DWORD PTR tv1607[ebp]
	mov	edx, DWORD PTR _attr2$[ebp]
$LN198@pop_one_ed:

; 298  :         continue;
; 299  :       if ( (attr1 & CONSTRAINT) || (attr2 & CONSTRAINT) )

	and	esi, 1024				; 00000400H
	xor	edi, edi
	or	esi, edi
	jne	SHORT $LN207@pop_one_ed
	and	edx, 1024				; 00000400H
	or	edx, esi
	je	$LN43@pop_one_ed
$LN207@pop_one_ed:

; 300  :       { conmap_t *map1 = get_f_constraint_map(f1);

	mov	edx, DWORD PTR _web+328
	mov	esi, DWORD PTR _dymem
	cmp	DWORD PTR [edx+esi+88], edi
	je	SHORT $LN82@pop_one_ed
	mov	edi, DWORD PTR [edx+esi+64]
	add	edi, eax
	mov	DWORD PTR _map1$89252[ebp], edi
	jmp	SHORT $LN83@pop_one_ed
$LN82@pop_one_ed:
	mov	DWORD PTR _map1$89252[ebp], OFFSET _nullcon
	mov	edi, DWORD PTR _map1$89252[ebp]
$LN83@pop_one_ed:

; 301  :         conmap_t *map2 = get_f_constraint_map(f2);

	mov	eax, DWORD PTR [edx+esi+88]
	test	eax, eax
	je	SHORT $LN84@pop_one_ed
	mov	edx, DWORD PTR [edx+esi+64]
	add	edx, ecx
	jmp	SHORT $LN85@pop_one_ed
$LN84@pop_one_ed:
	mov	edx, OFFSET _nullcon
$LN85@pop_one_ed:

; 302  :         conmap_t ii,jj,found;
; 303  :         found = 0;
; 304  :         for ( ii = 1 ; ii <= map1[0] ; ii++ )

	mov	ecx, DWORD PTR [edi]
	mov	esi, 1
	mov	DWORD PTR _found$89266[ebp], 0
	mov	DWORD PTR tv1655[ebp], ecx
	cmp	ecx, esi
	jb	SHORT $LN48@pop_one_ed
	mov	edi, DWORD PTR [edx]
	npad	6
$LL50@pop_one_ed:

; 305  :         { for ( jj = 1; jj <= map2[0] ; jj++ )

	mov	eax, 1
	cmp	edi, eax
	jb	SHORT $LN49@pop_one_ed
	mov	ecx, DWORD PTR _map1$89252[ebp]
	mov	ecx, DWORD PTR [ecx+esi*4]
$LL211@pop_one_ed:

; 306  :             if ( map1[ii] == map2[jj] ) found++;

	cmp	ecx, DWORD PTR [edx+eax*4]
	jne	SHORT $LN46@pop_one_ed
	inc	DWORD PTR _found$89266[ebp]
$LN46@pop_one_ed:

; 305  :         { for ( jj = 1; jj <= map2[0] ; jj++ )

	mov	edi, DWORD PTR [edx]
	inc	eax
	cmp	eax, edi
	jbe	SHORT $LL211@pop_one_ed
	mov	ecx, DWORD PTR tv1655[ebp]
$LN49@pop_one_ed:

; 302  :         conmap_t ii,jj,found;
; 303  :         found = 0;
; 304  :         for ( ii = 1 ; ii <= map1[0] ; ii++ )

	inc	esi
	cmp	esi, ecx
	jbe	SHORT $LL50@pop_one_ed
$LN48@pop_one_ed:

; 307  :         }
; 308  :         if ( (found != map1[0]) || ( found != map2[0]) )

	mov	eax, DWORD PTR _found$89266[ebp]
	cmp	eax, ecx
	jne	$LN57@pop_one_ed
	cmp	eax, DWORD PTR [edx]
	jne	$LN57@pop_one_ed
$LN43@pop_one_ed:

; 309  :           continue;
; 310  :       }
; 311  :       if ( (facet_count <= 3) &&
; 312  :          ((fdegfree <= degfree)||(next_fdegfree <= degfree) ) )

	cmp	DWORD PTR _facet_count$[ebp], 3
	jg	SHORT $LN41@pop_one_ed
	mov	edx, DWORD PTR _degfree$[ebp]
	cmp	DWORD PTR _fdegfree$[ebp], edx
	jle	$LN57@pop_one_ed
	mov	eax, edx
	cmp	DWORD PTR _next_fdegfree$[ebp], eax

; 313  :         continue;  /* fake wall */

	jle	$LN57@pop_one_ed
$LN41@pop_one_ed:

; 314  : 
; 315  :       /* get normal */
; 316  :       get_fe_side(get_next_edge(next_fe),sideB);

	mov	ecx, DWORD PTR _next_fe$89234[ebp]
	push	ecx
	call	_get_next_edge
	mov	ecx, eax
	lea	edx, DWORD PTR _sideB$[ebp]
	push	edx
	mov	edx, DWORD PTR _web+460
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	push	eax
	call	_get_edge_side

; 317  :       cross_prod(side,sideB,normalB);

	lea	edx, DWORD PTR _normalB$[ebp]
	push	edx
	lea	eax, DWORD PTR _sideB$[ebp]
	push	eax
	lea	ecx, DWORD PTR _side$[ebp]
	push	ecx
	call	_cross_prod

; 318  :       normB = sqrt(SDIM_dot(normalB,normalB));

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _normalB$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	add	esp, 36					; 00000024H
	call	__CIsqrt
	fstp	QWORD PTR _normB$[ebp]

; 319  :       newcos = SDIM_dot(normalA,normalB)/normA/normB;

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _normalB$[ebp]
	push	eax
	lea	ecx, DWORD PTR _normalA$[ebp]
	push	ecx
	call	_dot
	fdiv	QWORD PTR _normA$[ebp]
	add	esp, 12					; 0000000cH

; 320  : 
; 321  :       /* If phases in effect, can estimate force */
; 322  :       if ( phase_flag )

	cmp	DWORD PTR _phase_flag, 0
	fdiv	QWORD PTR _normB$[ebp]
	je	$LN39@pop_one_ed

; 323  :       { REAL tensionA = get_facet_density(f1);
; 324  :         REAL tensionB = get_facet_density(f2);
; 325  :         REAL tensionC; /* for the proposed interface */
; 326  :         REAL force1;
; 327  :         REAL sum;
; 328  :         int ii = get_b_phase(get_facet_body(f1));

	mov	esi, DWORD PTR _B_PHASE_ATTR
	fstp	ST(0)
	mov	eax, DWORD PTR _web+236
	imul	esi, 240				; 000000f0H
	add	esi, DWORD PTR _web+440
	mov	edx, DWORD PTR [ebx+eax]
	add	esi, DWORD PTR _dymem
	mov	ecx, DWORD PTR tv1615[ebp]
	fld	QWORD PTR [edx+32]
	mov	edx, DWORD PTR [ecx+eax]
	mov	edi, DWORD PTR [esi+88]
	fstp	QWORD PTR _tensionA$89279[ebp]
	fld	QWORD PTR [edx+32]
	fstp	QWORD PTR _tensionB$89281[ebp]
	test	edi, edi
	je	SHORT $LN201@pop_one_ed
	mov	edx, DWORD PTR _f1$[ebp]
	push	edx
	call	_get_facet_body
	add	esp, 4
	test	eax, 268435456				; 10000000H
	je	SHORT $LN201@pop_one_ed
	mov	eax, DWORD PTR _f1$[ebp]
	push	eax
	call	_get_facet_body
	mov	ecx, DWORD PTR _web+348
	add	esp, 4
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [esi+64]
	mov	ecx, DWORD PTR [edx+eax]
	mov	DWORD PTR _ii$89286[ebp], ecx
	jmp	SHORT $LN87@pop_one_ed
$LN201@pop_one_ed:
	mov	DWORD PTR _ii$89286[ebp], 0
$LN87@pop_one_ed:

; 329  :         int jj = get_b_phase(get_facet_body(inverse_id(f2)));

	test	edi, edi
	je	SHORT $LN202@pop_one_ed
	mov	edi, DWORD PTR _f2$[ebp]
	xor	edi, 134217728				; 08000000H
	push	edi
	call	_get_facet_body
	add	esp, 4
	test	eax, 268435456				; 10000000H
	je	SHORT $LN202@pop_one_ed
	push	edi
	call	_get_facet_body
	mov	edx, DWORD PTR _web+348
	mov	ecx, DWORD PTR [esi+64]
	add	esp, 4
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ecx]
	jmp	SHORT $LN89@pop_one_ed
$LN202@pop_one_ed:
	xor	eax, eax
$LN89@pop_one_ed:

; 330  :         tensionC = phase_data[ii][jj];

	mov	ecx, DWORD PTR _ii$89286[ebp]
	mov	edx, DWORD PTR _phase_data
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]

; 331  :         for ( k = 0, sum = 0.0 ; k < SDIM ; k++ )

	mov	eax, DWORD PTR _web+616
	fstp	QWORD PTR _tensionC$89283[ebp]
	fldz
	test	eax, eax
	jle	SHORT $LN36@pop_one_ed
	fld	QWORD PTR _normalB$[ebp]
	fmul	QWORD PTR _tensionB$89281[ebp]
	fdiv	QWORD PTR _normB$[ebp]
	fld	QWORD PTR _normalA$[ebp]
	fmul	QWORD PTR _tensionA$89279[ebp]
	fdiv	QWORD PTR _normA$[ebp]
	faddp	ST(1), ST(0)
$LN38@pop_one_ed:
	dec	eax

; 332  :         { REAL term = 
; 333  :              (tensionA*normalA[0]/normA + tensionB*normalB[0]/normB);
; 334  :           sum += term;

	fld	ST(0)
	faddp	ST(2), ST(0)
	jne	SHORT $LN38@pop_one_ed

; 331  :         for ( k = 0, sum = 0.0 ; k < SDIM ; k++ )

	fstp	ST(0)
$LN36@pop_one_ed:

; 335  :         }
; 336  :         force1 = sqrt(sum);

	call	__CIsqrt

; 337  :         newcos = force1 - tensionC;

	fsub	QWORD PTR _tensionC$89283[ebp]
$LN39@pop_one_ed:

; 338  :       }
; 339  : 
; 340  :       if ( popattr >= 0 )   /* kraynikpop test */

	mov	ecx, DWORD PTR _popattr$[ebp]
	test	ecx, ecx
	js	SHORT $LN35@pop_one_ed

; 341  :       { kraynikwedge = ( *(int*)get_extra(f1,popattr) != 
; 342  :                             *(int*)get_extra(f2,popattr) );

	mov	edx, DWORD PTR _f1$[ebp]
	imul	ecx, 240				; 000000f0H
	mov	eax, DWORD PTR _f2$[ebp]
	shr	edx, 29					; 0000001dH
	imul	edx, 112				; 00000070H
	mov	edi, DWORD PTR _web[edx+12]
	mov	edi, DWORD PTR [edi+ebx]
	mov	esi, DWORD PTR _web[edx+104]
	mov	edx, DWORD PTR _dymem
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	ebx, DWORD PTR _web[eax+104]
	mov	eax, DWORD PTR _web[eax+12]
	add	esi, ecx
	mov	esi, DWORD PTR [esi+edx+64]
	add	ebx, ecx
	mov	ecx, DWORD PTR [ebx+edx+64]
	mov	edx, DWORD PTR tv1615[ebp]
	mov	eax, DWORD PTR [eax+edx]
	mov	edx, DWORD PTR [esi+edi]
	xor	ebx, ebx
	cmp	edx, DWORD PTR [ecx+eax]
	setne	bl
	mov	esi, ebx
	jmp	SHORT $LN34@pop_one_ed
$LN35@pop_one_ed:

; 343  :       }
; 344  :       else kraynikwedge = 0;

	xor	esi, esi
$LN34@pop_one_ed:

; 345  : 
; 346  :       if ( ((newcos > maxcos) && (kraynikwedge >= foundkraynik))
; 347  :                || (kraynikwedge > foundkraynik) )

	fld	QWORD PTR _maxcos$[ebp]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN208@pop_one_ed
	cmp	esi, DWORD PTR _foundkraynik$[ebp]
	jge	SHORT $LN32@pop_one_ed
$LN208@pop_one_ed:
	cmp	esi, DWORD PTR _foundkraynik$[ebp]
	jle	SHORT $LN229@pop_one_ed
$LN32@pop_one_ed:

; 348  :       { key_fe = next_fe;

	mov	eax, DWORD PTR _next_fe$89234[ebp]

; 349  :         maxcos = newcos;

	fstp	QWORD PTR _maxcos$[ebp]

; 350  :         for ( k = 0 ; k < SDIM ; k++ )

	mov	ecx, DWORD PTR _web+616
	mov	DWORD PTR _key_fe$[ebp], eax
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN209@pop_one_ed
	fld	QWORD PTR _normA$[ebp]
	fld	QWORD PTR _normB$[ebp]
$LN30@pop_one_ed:

; 351  :            midnormal[k] = normalA[k]/normA + normalB[k]/normB;

	fld	QWORD PTR _normalB$[ebp+eax*8]
	inc	eax
	fdiv	ST(0), ST(1)
	fld	QWORD PTR _normalA$[ebp+eax*8-8]
	fdiv	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _midnormal$[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LN30@pop_one_ed

; 350  :         for ( k = 0 ; k < SDIM ; k++ )

	fstp	ST(1)
	fstp	ST(0)
$LN209@pop_one_ed:

; 352  :         cross_prod(midnormal,side,new_displacement);

	push	OFFSET _new_displacement
	lea	ecx, DWORD PTR _side$[ebp]
	push	ecx
	lea	edx, DWORD PTR _midnormal$[ebp]
	push	edx
	call	_cross_prod
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN210@pop_one_ed
$LN229@pop_one_ed:
	fstp	ST(0)
$LN210@pop_one_ed:

; 353  :       }
; 354  :       if ( kraynikwedge ) foundkraynik = 1;

	test	esi, esi
	je	SHORT $LN27@pop_one_ed
	mov	DWORD PTR _foundkraynik$[ebp], 1
$LN27@pop_one_ed:

; 355  : 
; 356  :       /* set up for next angle */
; 357  :       normA = normB;

	fld	QWORD PTR _normB$[ebp]

; 358  :       memcpy((char *)normalA,(char *)normalB,sizeof(normalA));
; 359  :       fe = next_fe;

	mov	eax, DWORD PTR _next_fe$89234[ebp]
	mov	ecx, 12					; 0000000cH
	fstp	QWORD PTR _normA$[ebp]
	lea	esi, DWORD PTR _normalB$[ebp]
	lea	edi, DWORD PTR _normalA$[ebp]
	rep movsd
	mov	DWORD PTR _fe$[ebp], eax
$LN57@pop_one_ed:

; 283  :     for ( i = 0 ; i < facet_count ; i++ )

	dec	DWORD PTR tv912[ebp]
	jne	$LL58@pop_one_ed
	mov	eax, DWORD PTR _facet_count$[ebp]
$LN199@pop_one_ed:

; 360  :     }
; 361  :     /* now a little check just to make sure things happened as planned */
; 362  :     if ( (facet_count >= 4) && (maxcos < 0.0) && !foundkraynik )

	cmp	eax, 4
	jl	SHORT $LN200@pop_one_ed
	fldz
	fcomp	QWORD PTR _maxcos$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN200@pop_one_ed
	cmp	DWORD PTR _foundkraynik$[ebp], 0
	jne	SHORT $LN200@pop_one_ed

; 363  :     { sprintf(errmsg,
; 364  :       "Can't find poppable pair of facets on poppable edge %s.\n",
; 365  :           ELNAME(e_id));

	test	DWORD PTR _e_id$GSCopy$[ebp], 268435456	; 10000000H
	je	SHORT $LN90@pop_one_ed
	mov	ecx, DWORD PTR tv1472[ebp]
	inc	ecx
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN91@pop_one_ed
$LN90@pop_one_ed:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN91@pop_one_ed:
	push	eax
	push	OFFSET ??_C@_0DJ@GAAFHFDK@Can?8t?5find?5poppable?5pair?5of?5face@
	push	OFFSET _errmsg
	call	_sprintf

; 366  :       kb_error(1299,errmsg, RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	1299					; 00000513H
	call	_kb_error
	add	esp, 24					; 00000018H
$LN200@pop_one_ed:

; 367  :     }
; 368  :   }
; 369  :   if ( !valid_id(key_fe) ) return 0;

	mov	esi, DWORD PTR _key_fe$[ebp]
	test	esi, 268435456				; 10000000H
	je	$LN23@pop_one_ed

; 370  : 
; 371  :   /* check boundary and constraint compatibility of wedge */
; 372  :   /* test to see if we really want to do this pop */
; 373  :   f1 = get_fe_facet(key_fe);

	mov	edi, DWORD PTR _web+460
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	edx, DWORD PTR [eax+edi]
	mov	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR tv1824[ebp], eax
	mov	eax, esi
	shr	eax, 27					; 0000001bH
	and	eax, 1
	je	SHORT $LN213@pop_one_ed
	xor	ecx, 134217728				; 08000000H
$LN213@pop_one_ed:

; 374  :   f2 = get_fe_facet(get_next_edge(key_fe));

	test	eax, eax
	je	SHORT $LN163@pop_one_ed
	mov	edx, DWORD PTR [edx+28]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN162@pop_one_ed
$LN163@pop_one_ed:
	mov	edx, DWORD PTR [edx+32]
$LN162@pop_one_ed:
	test	edx, 268435456				; 10000000H
	jne	SHORT $LN167@pop_one_ed
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN166@pop_one_ed
$LN167@pop_one_ed:
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [eax+24]
	test	edx, 134217728				; 08000000H
	je	SHORT $LN166@pop_one_ed
	xor	eax, 134217728				; 08000000H
$LN166@pop_one_ed:

; 375  :   attr1 = get_fattr(f1);

	mov	esi, DWORD PTR _web+236
	and	ecx, 134217727				; 07ffffffH

; 376  :   attr2 = get_fattr(f2);

	and	eax, 134217727				; 07ffffffH
	add	ecx, ecx
	add	eax, eax
	add	ecx, ecx
	mov	edx, DWORD PTR [ecx+esi]
	mov	edi, DWORD PTR [edx+8]
	add	eax, eax
	mov	esi, DWORD PTR [eax+esi]
	mov	ebx, DWORD PTR [esi+8]
	mov	DWORD PTR tv1615[ebp], eax
	mov	eax, DWORD PTR [esi+12]
	mov	DWORD PTR tv2357[ebp], ecx
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _attr2$[ebp+4], eax

; 377  :   if ( (attr1 & FIXED) || (attr2 & FIXED) )

	mov	eax, edi
	mov	DWORD PTR _attr1$[ebp+4], ecx
	and	eax, 64					; 00000040H
	xor	ecx, ecx
	or	eax, ecx
	jne	$LN23@pop_one_ed
	mov	eax, ebx
	and	eax, 64					; 00000040H
	or	eax, ecx
	jne	$LN23@pop_one_ed

; 379  :   if ( get_facet_boundary(f1) != get_facet_boundary(f2) ) 

	mov	eax, DWORD PTR _F_BOUNDARY_ATTR
	test	eax, eax
	je	SHORT $LN204@pop_one_ed
	mov	ecx, DWORD PTR _dymem
	imul	eax, 240				; 000000f0H
	add	eax, DWORD PTR _web+328
	mov	eax, DWORD PTR [eax+ecx+64]
	mov	ecx, DWORD PTR [eax+edx]
	mov	eax, DWORD PTR [eax+esi]
	imul	ecx, 136				; 00000088H
	mov	edx, DWORD PTR _web+776
	imul	eax, 136				; 00000088H
	add	ecx, edx
	add	eax, edx
	cmp	ecx, eax

; 380  :      return 0;

	jne	$LN23@pop_one_ed
$LN204@pop_one_ed:

; 381  :   if ( (attr1 & CONSTRAINT) || (attr2 & CONSTRAINT) )

	and	edi, 1024				; 00000400H
	xor	eax, eax
	or	edi, eax
	jne	SHORT $LN20@pop_one_ed
	and	ebx, 1024				; 00000400H
	or	ebx, eax
	je	$LN12@pop_one_ed
$LN20@pop_one_ed:

; 382  :   { conmap_t *map1 = get_e_constraint_map(f1);

	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	edx, DWORD PTR [eax+ecx+1048]
	test	edx, edx
	je	SHORT $LN96@pop_one_ed
	mov	esi, DWORD PTR tv2357[ebp]
	mov	edi, DWORD PTR _web+124
	mov	ebx, DWORD PTR [esi+edi]
	add	ebx, DWORD PTR [eax+ecx+1024]
	jmp	SHORT $LN239@pop_one_ed
$LN96@pop_one_ed:
	mov	ebx, OFFSET _nullcon
$LN239@pop_one_ed:
	mov	DWORD PTR _map1$89344[ebp], ebx

; 383  :     conmap_t *map2 = get_e_constraint_map(f2);

	test	edx, edx
	je	SHORT $LN98@pop_one_ed
	mov	edx, DWORD PTR tv1615[ebp]
	mov	esi, DWORD PTR _web+124
	mov	edx, DWORD PTR [edx+esi]
	add	edx, DWORD PTR [eax+ecx+1024]
	jmp	SHORT $LN99@pop_one_ed
$LN98@pop_one_ed:
	mov	edx, OFFSET _nullcon
$LN99@pop_one_ed:

; 384  :     conmap_t ii,jj,found;
; 385  :     found = 0;
; 386  :     for ( ii = 1 ; ii <= map1[0] ; ii++ )

	mov	eax, DWORD PTR [ebx]
	mov	esi, 1
	mov	DWORD PTR _found$89358[ebp], 0
	mov	DWORD PTR tv1879[ebp], eax
	cmp	eax, esi
	jb	SHORT $LN17@pop_one_ed
	mov	edi, DWORD PTR [edx]
	npad	7
$LL19@pop_one_ed:

; 387  :     { 
; 388  :       for ( jj = 1; jj <= map2[0] ; jj++ )

	mov	eax, 1
	cmp	edi, eax
	jb	SHORT $LN18@pop_one_ed
	mov	ecx, DWORD PTR [ebx+esi*4]
	npad	4
$LL16@pop_one_ed:

; 389  :         if ( map1[ii] == map2[jj] ) found++;

	cmp	ecx, DWORD PTR [edx+eax*4]
	jne	SHORT $LN15@pop_one_ed
	inc	DWORD PTR _found$89358[ebp]
	mov	ebx, DWORD PTR _map1$89344[ebp]
$LN15@pop_one_ed:

; 387  :     { 
; 388  :       for ( jj = 1; jj <= map2[0] ; jj++ )

	inc	eax
	cmp	eax, edi
	jbe	SHORT $LL16@pop_one_ed
$LN18@pop_one_ed:

; 384  :     conmap_t ii,jj,found;
; 385  :     found = 0;
; 386  :     for ( ii = 1 ; ii <= map1[0] ; ii++ )

	inc	esi
	cmp	esi, DWORD PTR tv1879[ebp]
	jbe	SHORT $LL19@pop_one_ed
$LN17@pop_one_ed:

; 390  :     }
; 391  :     if ( (found != map1[0]) || ( found != map2[0]) )

	mov	eax, DWORD PTR _found$89358[ebp]
	cmp	eax, DWORD PTR tv1879[ebp]
	jne	$LN23@pop_one_ed
	cmp	eax, DWORD PTR [edx]
	jne	$LN23@pop_one_ed
$LN12@pop_one_ed:

; 392  :       return 0;
; 393  :   }
; 394  : 
; 395  :   if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	SHORT $LN10@pop_one_ed

; 396  :   { sprintf(msg,"Popping edge %s\n",ELNAME(e_id));

	test	DWORD PTR _e_id$GSCopy$[ebp], 268435456	; 10000000H
	je	SHORT $LN100@pop_one_ed
	mov	eax, DWORD PTR tv1472[ebp]
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN101@pop_one_ed
$LN100@pop_one_ed:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN101@pop_one_ed:
	mov	ecx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0BB@PHCAFGPH@Popping?5edge?5?$CFs?6?$AA@
	push	ecx
	call	_sprintf

; 397  :     outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 16					; 00000010H
$LN10@pop_one_ed:

; 398  :   }
; 399  : 
; 400  : 
; 401  :   didsplit = 0;
; 402  : 
; 403  :   if ( (facet_count == 2) && (degfree==2) )

	cmp	DWORD PTR _facet_count$[ebp], 2
	mov	DWORD PTR _didsplit$[ebp], 0
	jne	SHORT $LN8@pop_one_ed
	cmp	DWORD PTR _degfree$[ebp], 2
	jne	SHORT $LN8@pop_one_ed

; 404  :   { /* special treatment, since may split either way */
; 405  :     popped = two_split(key_fe,this_septum_flag);

	mov	eax, DWORD PTR _this_septum_flag$[ebp]
	mov	ecx, DWORD PTR _key_fe$[ebp]
	push	eax
	push	ecx
	call	_two_split
	add	esp, 8
	mov	DWORD PTR _popped$[ebp], eax

; 406  :     if ( popped ) return popped;  /* else do Y pull-out */

	test	eax, eax
	jne	$LN76@pop_one_ed
$LN8@pop_one_ed:

; 407  :   }
; 408  : 
; 409  :   /* try propagating split forward */
; 410  :   new_key = key_fe;

	mov	esi, DWORD PTR _key_fe$[ebp]

; 411  :   while ( try_prop(&new_key,key_fe,this_septum_flag) ) 

	mov	ebx, DWORD PTR _this_septum_flag$[ebp]
	push	ebx
	lea	edx, DWORD PTR _new_key$[ebp]
	push	esi
	push	edx
	mov	DWORD PTR _new_key$[ebp], esi
	call	_try_prop

; 412  :   { didsplit = 1;

	mov	edi, DWORD PTR _popped$[ebp]
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN6@pop_one_ed
	mov	DWORD PTR _didsplit$[ebp], 1
$LL7@pop_one_ed:

; 413  :     if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	SHORT $LN5@pop_one_ed

; 414  :     { sprintf(msg," Propagating pop to edge %s\n",ELNAME(get_fe_edge(new_key)));

	mov	eax, DWORD PTR _new_key$[ebp]
	mov	ecx, DWORD PTR _web+460
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+20]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN102@pop_one_ed
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN103@pop_one_ed
$LN102@pop_one_ed:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN103@pop_one_ed:
	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0BN@IODDFLCB@?5Propagating?5pop?5to?5edge?5?$CFs?6?$AA@
	push	eax
	call	_sprintf

; 415  :       outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 16					; 00000010H
$LN5@pop_one_ed:

; 411  :   while ( try_prop(&new_key,key_fe,this_septum_flag) ) 

	push	ebx
	lea	edx, DWORD PTR _new_key$[ebp]
	push	esi
	push	edx

; 416  :     }
; 417  :     popped++;

	inc	edi
	call	_try_prop
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LL7@pop_one_ed
$LN6@pop_one_ed:

; 418  :   }
; 419  : 
; 420  :   /* try propagating split backward */
; 421  :   new_key = inverse_id(get_prev_facet(key_fe));

	push	esi
	call	_get_prev_facet
	add	esp, 4
	xor	eax, 134217728				; 08000000H

; 422  :   while ( try_prop(&new_key,inverse_id(get_prev_facet(key_fe)),this_septum_flag) ) 

	push	ebx
	push	esi
	mov	DWORD PTR _new_key$[ebp], eax
	call	_get_prev_facet
	xor	eax, 134217728				; 08000000H
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR _new_key$[ebp]
	push	eax
	call	_try_prop
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN3@pop_one_ed
	mov	ebx, DWORD PTR tv1824[ebp]
$LL4@pop_one_ed:

; 423  :   { didsplit = 1;
; 424  :     if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	SHORT $LN2@pop_one_ed

; 425  :     { sprintf(msg," Propagating pop to edge %s\n",ELNAME(get_fe_edge(key_fe)));

	mov	ecx, DWORD PTR _web+460
	mov	edx, DWORD PTR [ebx+ecx]
	mov	eax, DWORD PTR [edx+20]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN104@pop_one_ed
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN105@pop_one_ed
$LN104@pop_one_ed:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN105@pop_one_ed:
	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0BN@IODDFLCB@?5Propagating?5pop?5to?5edge?5?$CFs?6?$AA@
	push	eax
	call	_sprintf

; 426  :       outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 16					; 00000010H
$LN2@pop_one_ed:

; 422  :   while ( try_prop(&new_key,inverse_id(get_prev_facet(key_fe)),this_septum_flag) ) 

	mov	edx, DWORD PTR _this_septum_flag$[ebp]
	push	edx
	push	esi

; 427  :     }
; 428  :     popped++;

	inc	edi
	call	_get_prev_facet
	xor	eax, 134217728				; 08000000H
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR _new_key$[ebp]
	push	eax
	call	_try_prop
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LL4@pop_one_ed

; 436  :   }
; 437  : 
; 438  :   return popped;

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx

; 439  : } /* end pop_one_edge */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@pop_one_ed:

; 429  :   }
; 430  : 
; 431  :   /* if can't split forward or backward, divide edge and split */
; 432  :   if ( !didsplit )

	cmp	DWORD PTR _didsplit$[ebp], 0
	jne	SHORT $LN1@pop_one_ed

; 433  :   {
; 434  :     edge_refine(e_id);

	mov	esi, DWORD PTR _e_id$GSCopy$[ebp]
	push	esi
	call	_edge_refine

; 435  :     popped += pop_one_edge(e_id);  /* try again */

	push	esi
	call	_pop_one_edge
	add	esp, 8
	add	edi, eax
$LN1@pop_one_ed:

; 436  :   }
; 437  : 
; 438  :   return popped;

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx

; 439  : } /* end pop_one_edge */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN23@pop_one_ed:

; 378  :      return 0; 

	xor	eax, eax
$LN76@pop_one_ed:

; 439  : } /* end pop_one_edge */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_pop_one_edge ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@OGLHPJAC@Inserting?5new?5septum?5at?5vertex?5?$CF@ ; `string'
PUBLIC	??_C@_0CH@MFIOBHAD@Separating?5triple?5lines?5at?5verte@ ; `string'
PUBLIC	??_C@_0DL@OGANAIC@Not?5popping?5touching?9triple?9line@ ; `string'
PUBLIC	??_C@_0ED@HAJCMABM@Internal?3?5Cannot?5match?5fe_c?5with@ ; `string'
PUBLIC	_cinfo$GSCopy$
PUBLIC	_v_id$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_odd4cone_pop
;	COMDAT ??_C@_0CE@OGLHPJAC@Inserting?5new?5septum?5at?5vertex?5?$CF@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0CE@OGLHPJAC@Inserting?5new?5septum?5at?5vertex?5?$CF@ DB 'Insertin'
	DB	'g new septum at vertex %s.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@MFIOBHAD@Separating?5triple?5lines?5at?5verte@
CONST	SEGMENT
??_C@_0CH@MFIOBHAD@Separating?5triple?5lines?5at?5verte@ DB 'Separating t'
	DB	'riple lines at vertex %s.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@OGANAIC@Not?5popping?5touching?9triple?9line@
CONST	SEGMENT
??_C@_0DL@OGANAIC@Not?5popping?5touching?9triple?9line@ DB 'Not popping t'
	DB	'ouching-triple-lines vertex %s since stable.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@HAJCMABM@Internal?3?5Cannot?5match?5fe_c?5with@
CONST	SEGMENT
??_C@_0ED@HAJCMABM@Internal?3?5Cannot?5match?5fe_c?5with@ DB 'Internal: C'
	DB	'annot match fe_c with fe_a at vertex %s; skipping pop.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\popfilm.c
CONST	ENDS
;	COMDAT _odd4cone_pop
_TEXT	SEGMENT
_cc$ = -616						; size = 8
_ea$ = -616						; size = 8
_tension$90586 = -608					; size = 8
_bb$ = -608						; size = 8
_e_a$ = -600						; size = 4
tv4901 = -596						; size = 8
_acac$ = -596						; size = 8
_aa$ = -596						; size = 8
tv3120 = -588						; size = 4
_dd$ = -584						; size = 8
_eb$ = -584						; size = 8
_f_c$ = -580						; size = 4
_cdswap$ = -576						; size = 4
_f_b$ = -572						; size = 4
_bdbd$ = -568						; size = 8
tv5482 = -564						; size = 4
tv3444 = -564						; size = 4
tv3117 = -564						; size = 4
_newv$90627 = -564					; size = 4
$T101444 = -560						; size = 4
_e_c$ = -560						; size = 4
_tripnetforce$ = -556					; size = 8
tv3142 = -548						; size = 4
_upflag$90654 = -548					; size = 4
tv5562 = -544						; size = 4
tv3565 = -544						; size = 4
tv3225 = -544						; size = 4
_e_fe$90658 = -544					; size = 4
tv3699 = -540						; size = 4
tv3624 = -540						; size = 4
_split_cell$ = -540					; size = 4
tv5567 = -536						; size = 4
tv3876 = -536						; size = 4
tv3545 = -536						; size = 4
tv3218 = -536						; size = 4
tv3139 = -536						; size = 4
_ee$ = -532						; size = 8
_flag$ = -528						; size = 4
_fe_a$ = -524						; size = 4
_quadnetforce$ = -520					; size = 8
tv3072 = -516						; size = 4
_newv$90594 = -516					; size = 4
_f_d$ = -516						; size = 4
_cinfo$GSCopy$ = -512					; size = 4
_v_id$GSCopy$ = -508					; size = 4
_newe$90628 = -508					; size = 4
tv3838 = -504						; size = 4
_fe_b$ = -504						; size = 4
tv3429 = -500						; size = 4
_k$ = -500						; size = 4
_fe_c$ = -500						; size = 4
_fe$ = -496						; size = 4
_f_a$ = -496						; size = 4
_fe_d$ = -496						; size = 4
_i$ = -492						; size = 4
tv5617 = -488						; size = 4
tv5401 = -488						; size = 4
tv5355 = -488						; size = 4
tv5308 = -488						; size = 4
tv4472 = -488						; size = 4
tv3682 = -488						; size = 4
tv3101 = -488						; size = 4
_eside$ = -484						; size = 48
_force$90564 = -436					; size = 48
_force$90545 = -436					; size = 48
_vecac$ = -388						; size = 48
_vecab$ = -340						; size = 48
_veccd$ = -292						; size = 48
_vecbd$ = -244						; size = 48
_veca$ = -196						; size = 48
_vecc$ = -148						; size = 48
_vecb$ = -100						; size = 48
_vecd$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_v_id$ = 8						; size = 4
_count$ = 12						; size = 4
_cinfo$ = 16						; size = 4
_odd4cone_pop PROC					; COMDAT

; 2404 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 616				; 00000268H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2405 :   int i,j,k;
; 2406 :   facetedge_id fe_a=NULLID,fe_b=NULLID; /* triple edge fe's on septum side*/

	mov	eax, DWORD PTR _v_id$[ebp]
	push	ebx
	xor	edx, edx
	push	esi
	push	edi
	mov	edi, DWORD PTR _cinfo$[ebp]
	mov	DWORD PTR _v_id$GSCopy$[ebp], eax
	mov	eax, DWORD PTR [edi]

; 2407 :   facetedge_id fe_c=NULLID,fe_d=NULLID; /* other pair of triple edge fe's */

	xor	esi, esi

; 2408 :   edge_id e_a, e_b, e_c, e_d; /* triple edges */
; 2409 :   facet_id f_a,f_b,f_c, f_d; /* septum facets */
; 2410 :   REAL veca[MAXCOORD],vecb[MAXCOORD],vecc[MAXCOORD],vecd[MAXCOORD];
; 2411 :   REAL vecab[MAXCOORD],vecac[MAXCOORD],veccd[MAXCOORD],vecbd[MAXCOORD];
; 2412 :   int flag;
; 2413 :   int split_cell=0;
; 2414 :   int cdswap = 0;
; 2415 :   REAL tripnetforce; /* force towards separate triples; pos favorable */
; 2416 :   REAL quadnetforce; /* force towards quad line; pos favorable */
; 2417 :   facetedge_id next_fe,fe;
; 2418 :   REAL ee,ea,eb,ec,ed,aa,bb,cc,dd,bd,ac,acac,bdbd;
; 2419 :   REAL eside[MAXCOORD];
; 2420 :   int counter;
; 2421 :   
; 2422 :   /* identify key parts */
; 2423 :   /* find two triple lines on one side */
; 2424 :   for ( i = 0, flag = 0 ; i < cinfo->cells ; i++ )

	mov	DWORD PTR $T101444[ebp], eax
	cmp	eax, edx
	mov	eax, DWORD PTR _web+460
	mov	DWORD PTR _cinfo$GSCopy$[ebp], edi
	mov	DWORD PTR _fe_a$[ebp], edx
	mov	DWORD PTR _fe_b$[ebp], edx
	mov	DWORD PTR _fe_c$[ebp], esi
	mov	DWORD PTR _fe_d$[ebp], edx
	mov	DWORD PTR _split_cell$[ebp], edx
	mov	DWORD PTR _cdswap$[ebp], edx
	mov	DWORD PTR _i$[ebp], edx
	mov	DWORD PTR _flag$[ebp], edx
	jle	$LN88@odd4cone_p

; 2425 :   { if ( cinfo->cell[i].num == 2 )

	lea	ecx, DWORD PTR [edi+8]
	mov	DWORD PTR tv4472[ebp], ecx
	npad	6
$LL90@odd4cone_p:
	mov	ecx, DWORD PTR tv4472[ebp]
	cmp	DWORD PTR [ecx+8], 2
	jne	$LN89@odd4cone_p

; 2426 :     { if ( flag )

	cmp	DWORD PTR _flag$[ebp], 0
	je	$LN86@odd4cone_p

; 2427 :       { fe_c = cinfo->felist[cinfo->arclist[cinfo->cell[i].start].start]; /* outer fe */

	mov	ebx, DWORD PTR [edi+16808]
	mov	edx, ecx
	mov	ecx, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+ecx*2]
	lea	edx, DWORD PTR [edi+ecx*4]
	mov	ecx, DWORD PTR [edx+9608]
	mov	ecx, DWORD PTR [ebx+ecx*4]

; 2428 :         fe_c = get_prev_edge(fe_c); /* radial fe */

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN107@odd4cone_p
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [ecx+32]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN106@odd4cone_p
$LN107@odd4cone_p:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [ecx+28]
$LN106@odd4cone_p:

; 2429 :         fe_c = get_prev_facet(fe_c); /* on septum */

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN111@odd4cone_p
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	esi, DWORD PTR [ecx+40]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN447@odd4cone_p
$LN111@odd4cone_p:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	esi, DWORD PTR [ecx+36]
$LN447@odd4cone_p:

; 2430 :         fe_d = cinfo->felist[cinfo->arclist[cinfo->cell[i].start+1].start];

	mov	edx, DWORD PTR [edx+9620]
	mov	ecx, DWORD PTR [ebx+edx*4]
	mov	DWORD PTR _fe_c$[ebp], esi

; 2431 :         fe_d = get_prev_edge(fe_d); /* radial fe */

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN115@odd4cone_p
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [ecx+32]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN114@odd4cone_p
$LN115@odd4cone_p:
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [edx+28]
$LN114@odd4cone_p:

; 2432 :         fe_d = get_prev_facet(fe_d); /* on septum */

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN119@odd4cone_p
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	edx, DWORD PTR [ecx+40]
	xor	edx, 134217728				; 08000000H
	mov	DWORD PTR _fe_d$[ebp], edx
	jmp	$LN89@odd4cone_p
$LN119@odd4cone_p:
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	edx, DWORD PTR [edx+36]
	mov	DWORD PTR _fe_d$[ebp], edx

; 2433 :       }
; 2434 :       else

	jmp	$LN89@odd4cone_p
$LN86@odd4cone_p:

; 2435 :       { fe_a = cinfo->felist[cinfo->arclist[cinfo->cell[i].start].start]; /* outer fe */

	mov	ecx, DWORD PTR tv4472[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, DWORD PTR [edi+16808]
	lea	edx, DWORD PTR [ecx+ecx*2]
	mov	ecx, DWORD PTR [edi+edx*4+9608]
	mov	ecx, DWORD PTR [esi+ecx*4]
	lea	edx, DWORD PTR [edi+edx*4]

; 2436 :         fe_a = get_prev_edge(fe_a); /* radial fe */

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN123@odd4cone_p
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [ecx+32]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN122@odd4cone_p
$LN123@odd4cone_p:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [ecx+28]
$LN122@odd4cone_p:

; 2437 :         fe_a = get_prev_facet(fe_a); /* on septum */

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN127@odd4cone_p
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [ecx+40]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN448@odd4cone_p
$LN127@odd4cone_p:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [ecx+36]
$LN448@odd4cone_p:

; 2438 :         fe_b = cinfo->felist[cinfo->arclist[cinfo->cell[i].start+1].start];

	mov	edx, DWORD PTR [edx+9620]
	mov	DWORD PTR _fe_a$[ebp], ecx
	mov	ecx, DWORD PTR [esi+edx*4]

; 2439 :         fe_b = get_prev_edge(fe_b); /* radial fe */

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN131@odd4cone_p
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [ecx+32]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN130@odd4cone_p
$LN131@odd4cone_p:
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [edx+28]
$LN130@odd4cone_p:

; 2440 :         fe_b = get_prev_facet(fe_b); /* on septum */

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN135@odd4cone_p
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [ecx+40]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN449@odd4cone_p
$LN135@odd4cone_p:
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [edx+36]
$LN449@odd4cone_p:

; 2441 :         split_cell = i;

	mov	edx, DWORD PTR _i$[ebp]

; 2442 :         flag = 1;

	mov	esi, DWORD PTR _fe_c$[ebp]
	mov	DWORD PTR _split_cell$[ebp], edx
	mov	edx, DWORD PTR _fe_d$[ebp]
	mov	DWORD PTR _fe_b$[ebp], ecx
	mov	DWORD PTR _flag$[ebp], 1
$LN89@odd4cone_p:

; 2408 :   edge_id e_a, e_b, e_c, e_d; /* triple edges */
; 2409 :   facet_id f_a,f_b,f_c, f_d; /* septum facets */
; 2410 :   REAL veca[MAXCOORD],vecb[MAXCOORD],vecc[MAXCOORD],vecd[MAXCOORD];
; 2411 :   REAL vecab[MAXCOORD],vecac[MAXCOORD],veccd[MAXCOORD],vecbd[MAXCOORD];
; 2412 :   int flag;
; 2413 :   int split_cell=0;
; 2414 :   int cdswap = 0;
; 2415 :   REAL tripnetforce; /* force towards separate triples; pos favorable */
; 2416 :   REAL quadnetforce; /* force towards quad line; pos favorable */
; 2417 :   facetedge_id next_fe,fe;
; 2418 :   REAL ee,ea,eb,ec,ed,aa,bb,cc,dd,bd,ac,acac,bdbd;
; 2419 :   REAL eside[MAXCOORD];
; 2420 :   int counter;
; 2421 :   
; 2422 :   /* identify key parts */
; 2423 :   /* find two triple lines on one side */
; 2424 :   for ( i = 0, flag = 0 ; i < cinfo->cells ; i++ )

	inc	DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR $T101444[ebp]
	add	DWORD PTR tv4472[ebp], 32		; 00000020H
	cmp	DWORD PTR _i$[ebp], ecx
	jl	$LL90@odd4cone_p
$LN88@odd4cone_p:

; 2443 :       }     
; 2444 :     }
; 2445 :   }
; 2446 : 
; 2447 :   /* get a and c on same side of vertex */
; 2448 :   next_fe = fe_a;

	mov	ecx, DWORD PTR _fe_a$[ebp]

; 2449 :   counter = 0;

	xor	edi, edi
$LL84@odd4cone_p:

; 2450 :   for(;;)
; 2451 :   { next_fe = inverse_id(get_prev_edge(next_fe));

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN139@odd4cone_p
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [ecx+32]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN138@odd4cone_p
$LN139@odd4cone_p:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [ecx+28]
$LN138@odd4cone_p:
	xor	ecx, 134217728				; 08000000H

; 2452 :     if ( equal_id(next_fe,fe_c) || equal_id(next_fe,fe_d)) 

	cmp	ecx, esi
	je	$LN81@odd4cone_p
	cmp	ecx, edx
	je	$LN394@odd4cone_p

; 2453 :       break;
; 2454 :     if ( !equal_id(get_next_facet(next_fe),get_prev_facet(next_fe)) || (++counter > 100) )

	mov	esi, ecx
	shr	esi, 27					; 0000001bH
	and	ecx, 134217727				; 07ffffffH
	and	esi, 1
	mov	ecx, DWORD PTR [eax+ecx*4]
	je	SHORT $LN143@odd4cone_p
	mov	edx, DWORD PTR [ecx+36]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN142@odd4cone_p
$LN143@odd4cone_p:
	mov	edx, DWORD PTR [ecx+40]
$LN142@odd4cone_p:
	test	esi, esi
	je	SHORT $LN147@odd4cone_p
	mov	ebx, DWORD PTR [ecx+40]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN146@odd4cone_p
$LN147@odd4cone_p:
	mov	ebx, DWORD PTR [ecx+36]
$LN146@odd4cone_p:
	cmp	edx, ebx
	jne	SHORT $LN418@odd4cone_p
	inc	edi
	cmp	edi, 100				; 00000064H
	jg	SHORT $LN418@odd4cone_p

; 2459 :     } 
; 2460 :     next_fe = get_next_facet(next_fe);

	mov	edx, DWORD PTR _fe_d$[ebp]
	test	esi, esi
	mov	esi, DWORD PTR _fe_c$[ebp]
	je	SHORT $LN151@odd4cone_p
	mov	ecx, DWORD PTR [ecx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	$LL84@odd4cone_p
$LN151@odd4cone_p:
	mov	ecx, DWORD PTR [ecx+40]

; 2461 :   }

	jmp	$LL84@odd4cone_p
$LN418@odd4cone_p:

; 2455 :     { sprintf(errmsg,"Internal: Cannot match fe_c with fe_a at vertex %s; skipping pop.\n",
; 2456 :         ELNAME(v_id));

	mov	eax, DWORD PTR _v_id$GSCopy$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN93@odd4cone_p
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN94@odd4cone_p
$LN93@odd4cone_p:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN94@odd4cone_p:
	push	eax
	push	OFFSET ??_C@_0ED@HAJCMABM@Internal?3?5Cannot?5match?5fe_c?5with@
	push	OFFSET _errmsg
	call	_sprintf

; 2457 :       kb_error(3692,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	3692					; 00000e6cH
	call	_kb_error
	add	esp, 24					; 00000018H
	pop	edi
	pop	esi

; 2458 :       return 0;

	xor	eax, eax
	pop	ebx

; 2731 :   }
; 2732 :   
; 2733 :   return 1;
; 2734 : 
; 2735 : } /* end odd4cone_pop() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN81@odd4cone_p:

; 2462 :   if ( equal_id(next_fe,fe_d) )

	cmp	ecx, edx
	jne	SHORT $LN78@odd4cone_p
$LN394@odd4cone_p:

; 2463 :   { /* swap c and d */
; 2464 :     facetedge_id temp = fe_c;
; 2465 :     fe_c = fe_d;
; 2466 :     fe_d = temp;

	mov	DWORD PTR _fe_d$[ebp], esi
	mov	DWORD PTR _fe_c$[ebp], edx

; 2467 :     cdswap = 1;

	mov	DWORD PTR _cdswap$[ebp], 1
$LN78@odd4cone_p:

; 2468 :   }
; 2469 :   /* more parts */
; 2470 :   e_a = get_fe_edge(fe_a);

	mov	edx, DWORD PTR _fe_a$[ebp]

; 2471 :   e_b = get_fe_edge(fe_b);
; 2472 :   e_c = get_fe_edge(fe_c);

	mov	edi, DWORD PTR _fe_c$[ebp]
	mov	esi, DWORD PTR _fe_b$[ebp]
	mov	ecx, edx
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	and	edx, 134217728				; 08000000H
	add	ecx, ecx
	mov	ebx, edi
	mov	DWORD PTR tv3120[ebp], ecx
	mov	ecx, DWORD PTR [ecx+eax]
	xor	edx, DWORD PTR [ecx+20]
	and	edi, 134217728				; 08000000H
	mov	DWORD PTR _e_a$[ebp], edx
	and	ebx, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [eax+ebx*4]
	xor	edi, DWORD PTR [ebx+20]
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	DWORD PTR _e_c$[ebp], edi
	add	edx, edx
	mov	DWORD PTR tv3072[ebp], ebx

; 2473 :   e_d = get_fe_edge(fe_d);

	mov	ebx, DWORD PTR _fe_d$[ebp]
	add	edx, edx
	mov	edi, ebx
	and	edi, 134217727				; 07ffffffH
	mov	DWORD PTR tv3142[ebp], edx
	mov	edx, DWORD PTR [edx+eax]
	mov	eax, DWORD PTR [eax+edi*4]
	mov	edi, ebx
	and	edi, 134217728				; 08000000H
	xor	edi, DWORD PTR [eax+20]
	mov	DWORD PTR tv3101[ebp], eax

; 2474 :   f_a = get_fe_facet(fe_a);

	mov	eax, DWORD PTR _fe_a$[ebp]
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [edx+20]
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv3218[ebp], eax
	jne	SHORT $LN163@odd4cone_p
	mov	eax, DWORD PTR _NULLFACET
	mov	DWORD PTR _f_a$[ebp], eax
	jmp	SHORT $LN164@odd4cone_p
$LN163@odd4cone_p:
	test	DWORD PTR _fe_a$[ebp], 134217728	; 08000000H
	mov	ecx, DWORD PTR [ecx+24]
	je	SHORT $LN162@odd4cone_p
	xor	ecx, 134217728				; 08000000H
$LN162@odd4cone_p:
	mov	DWORD PTR _f_a$[ebp], ecx
$LN164@odd4cone_p:

; 2475 :   f_b = get_fe_facet(fe_b);

	mov	eax, DWORD PTR _fe_b$[ebp]
	mov	ecx, eax
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	mov	DWORD PTR tv3225[ebp], ecx
	jne	SHORT $LN167@odd4cone_p
	mov	eax, DWORD PTR _NULLFACET
	mov	DWORD PTR _f_b$[ebp], eax
	jmp	SHORT $LN168@odd4cone_p
$LN167@odd4cone_p:
	mov	edx, DWORD PTR [edx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN166@odd4cone_p
	xor	edx, 134217728				; 08000000H
$LN166@odd4cone_p:
	mov	eax, DWORD PTR _NULLFACET
	mov	DWORD PTR _f_b$[ebp], edx
$LN168@odd4cone_p:

; 2476 :   f_c = get_fe_facet(fe_c);

	mov	edx, DWORD PTR _fe_c$[ebp]
	test	edx, 268435456				; 10000000H
	jne	SHORT $LN171@odd4cone_p
	mov	DWORD PTR _f_c$[ebp], eax
	jmp	SHORT $LN172@odd4cone_p
$LN171@odd4cone_p:
	mov	ecx, DWORD PTR tv3072[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	test	edx, 134217728				; 08000000H
	je	SHORT $LN170@odd4cone_p
	xor	ecx, 134217728				; 08000000H
$LN170@odd4cone_p:
	mov	DWORD PTR _f_c$[ebp], ecx
$LN172@odd4cone_p:

; 2477 :   f_d = get_fe_facet(fe_d);

	test	ebx, 268435456				; 10000000H
	je	SHORT $LN174@odd4cone_p
	mov	edx, DWORD PTR tv3101[ebp]
	mov	eax, DWORD PTR [edx+24]
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN174@odd4cone_p
	xor	eax, 134217728				; 08000000H
$LN174@odd4cone_p:

; 2478 :   get_edge_side(e_a,veca);

	mov	ecx, DWORD PTR _e_a$[ebp]
	mov	DWORD PTR _f_d$[ebp], eax
	lea	eax, DWORD PTR _veca$[ebp]
	push	eax
	push	ecx
	call	_get_edge_side

; 2479 :   get_edge_side(e_b,vecb);

	lea	edx, DWORD PTR _vecb$[ebp]
	push	edx
	push	esi
	call	_get_edge_side

; 2480 :   get_edge_side(e_c,vecc);

	mov	ecx, DWORD PTR _e_c$[ebp]
	lea	eax, DWORD PTR _vecc$[ebp]
	push	eax
	push	ecx
	call	_get_edge_side

; 2481 :   get_edge_side(e_d,vecd);

	lea	edx, DWORD PTR _vecd$[ebp]
	push	edx
	push	edi
	call	_get_edge_side

; 2482 :  
; 2483 :   for ( i = 0 ; i < SDIM ; i++ )

	fld	QWORD PTR __real@3fd0000000000000
	mov	edx, DWORD PTR _web+616
	add	esp, 32					; 00000020H
	xor	eax, eax
	cmp	edx, 4
	jl	$LC390@odd4cone_p
	lea	ecx, DWORD PTR [edx-3]
$LN391@odd4cone_p:

; 2484 :   { vecab[i] = (veca[i] + vecb[i])/4;

	fld	QWORD PTR _vecb$[ebp+eax*8]

; 2487 :     vecbd[i] = (vecb[i] + vecd[i])/4;

	add	eax, 4
	fadd	QWORD PTR _veca$[ebp+eax*8-32]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _vecab$[ebp+eax*8-32]
	fld	QWORD PTR _vecd$[ebp+eax*8-32]
	fadd	QWORD PTR _vecc$[ebp+eax*8-32]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _veccd$[ebp+eax*8-32]
	fld	QWORD PTR _veca$[ebp+eax*8-32]
	fadd	QWORD PTR _vecc$[ebp+eax*8-32]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _vecac$[ebp+eax*8-32]
	fld	QWORD PTR _vecb$[ebp+eax*8-32]
	fadd	QWORD PTR _vecd$[ebp+eax*8-32]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _vecbd$[ebp+eax*8-32]
	fld	QWORD PTR _veca$[ebp+eax*8-24]
	fadd	QWORD PTR _vecb$[ebp+eax*8-24]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _vecab$[ebp+eax*8-24]
	fld	QWORD PTR _vecc$[ebp+eax*8-24]
	fadd	QWORD PTR _vecd$[ebp+eax*8-24]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _veccd$[ebp+eax*8-24]
	fld	QWORD PTR _veca$[ebp+eax*8-24]
	fadd	QWORD PTR _vecc$[ebp+eax*8-24]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _vecac$[ebp+eax*8-24]
	fld	QWORD PTR _vecb$[ebp+eax*8-24]
	fadd	QWORD PTR _vecd$[ebp+eax*8-24]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _vecbd$[ebp+eax*8-24]
	fld	QWORD PTR _veca$[ebp+eax*8-16]
	fadd	QWORD PTR _vecb$[ebp+eax*8-16]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _vecab$[ebp+eax*8-16]
	fld	QWORD PTR _vecc$[ebp+eax*8-16]
	fadd	QWORD PTR _vecd$[ebp+eax*8-16]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _veccd$[ebp+eax*8-16]
	fld	QWORD PTR _veca$[ebp+eax*8-16]
	fadd	QWORD PTR _vecc$[ebp+eax*8-16]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _vecac$[ebp+eax*8-16]
	fld	QWORD PTR _vecb$[ebp+eax*8-16]
	fadd	QWORD PTR _vecd$[ebp+eax*8-16]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _vecbd$[ebp+eax*8-16]
	fld	QWORD PTR _veca$[ebp+eax*8-8]
	fadd	QWORD PTR _vecb$[ebp+eax*8-8]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _vecab$[ebp+eax*8-8]
	fld	QWORD PTR _vecc$[ebp+eax*8-8]
	fadd	QWORD PTR _vecd$[ebp+eax*8-8]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _veccd$[ebp+eax*8-8]
	fld	QWORD PTR _veca$[ebp+eax*8-8]
	fadd	QWORD PTR _vecc$[ebp+eax*8-8]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _vecac$[ebp+eax*8-8]
	fld	QWORD PTR _vecb$[ebp+eax*8-8]
	fadd	QWORD PTR _vecd$[ebp+eax*8-8]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _vecbd$[ebp+eax*8-8]
	cmp	eax, ecx
	jl	$LN391@odd4cone_p
$LC390@odd4cone_p:

; 2482 :  
; 2483 :   for ( i = 0 ; i < SDIM ; i++ )

	cmp	eax, edx
	jge	SHORT $LN432@odd4cone_p
$LC77@odd4cone_p:

; 2484 :   { vecab[i] = (veca[i] + vecb[i])/4;

	fld	QWORD PTR _vecb$[ebp+eax*8]
	inc	eax
	fadd	QWORD PTR _veca$[ebp+eax*8-8]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _vecab$[ebp+eax*8-8]

; 2485 :     veccd[i] = (vecc[i] + vecd[i])/4;

	fld	QWORD PTR _vecd$[ebp+eax*8-8]
	fadd	QWORD PTR _vecc$[ebp+eax*8-8]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _veccd$[ebp+eax*8-8]

; 2486 :     vecac[i] = (veca[i] + vecc[i])/4;

	fld	QWORD PTR _veca$[ebp+eax*8-8]
	fadd	QWORD PTR _vecc$[ebp+eax*8-8]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _vecac$[ebp+eax*8-8]

; 2487 :     vecbd[i] = (vecb[i] + vecd[i])/4;

	fld	QWORD PTR _vecb$[ebp+eax*8-8]
	fadd	QWORD PTR _vecd$[ebp+eax*8-8]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _vecbd$[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LC77@odd4cone_p
$LN432@odd4cone_p:

; 2493 :   for ( i = 0, flag = 0 ; i < cinfo->cells ; i++ )

	mov	ebx, DWORD PTR _cinfo$GSCopy$[ebp]
	fstp	ST(0)
	fldz
	xor	eax, eax
	fstp	QWORD PTR _tripnetforce$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	mov	DWORD PTR _flag$[ebp], eax
	cmp	DWORD PTR [ebx], eax
	jle	$LN402@odd4cone_p

; 2488 :   }
; 2489 : 
; 2490 :   /* determine which way to split */
; 2491 :   /* First, if pull triple lines apart*/
; 2492 :   tripnetforce = 0.0;

	lea	edx, DWORD PTR [ebx+16]
	mov	DWORD PTR tv5308[ebp], edx
	npad	3
$LL425@odd4cone_p:

; 2494 :   { /* forces from existing facets */
; 2495 :     if ( cinfo->cell[i].num == 2 )

	mov	eax, DWORD PTR [edx]
	cmp	eax, 2
	jne	$LN73@odd4cone_p

; 2496 :     { for ( k = 0 ; k < cinfo->cell[i].num ; k++ )

	xor	ecx, ecx
	mov	DWORD PTR _k$[ebp], ecx
	test	eax, eax
	jle	$LN68@odd4cone_p
	npad	5
$LL419@odd4cone_p:

; 2497 :       { struct arc *a = cinfo->arclist + cinfo->cell[i].start + k;

	mov	eax, DWORD PTR [edx-8]
	add	eax, ecx
	lea	eax, DWORD PTR [eax+eax*2]
	lea	esi, DWORD PTR [ebx+eax*4+9608]

; 2498 :         for ( j = 0 ; j < a->num ; j++ )

	xor	edi, edi
	cmp	DWORD PTR [esi+4], edi
	jle	$LN69@odd4cone_p
	npad	6
$LL416@odd4cone_p:

; 2499 :         { facetedge_id fe = cinfo->felist[a->start + j];

	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ebx+16808]
	add	ecx, edi
	mov	eax, DWORD PTR [edx+ecx*4]

; 2500 :           REAL force[MAXCOORD];
; 2501 :           facet_force_on_vertex(get_fe_facet(fe),v_id,force);

	test	eax, 268435456				; 10000000H
	jne	SHORT $LN179@odd4cone_p
	mov	ecx, DWORD PTR _NULLFACET
	jmp	SHORT $LN178@odd4cone_p
$LN179@odd4cone_p:
	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [ecx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN178@odd4cone_p
	xor	ecx, 134217728				; 08000000H
$LN178@odd4cone_p:
	mov	eax, DWORD PTR _v_id$GSCopy$[ebp]
	lea	edx, DWORD PTR _force$90545[ebp]
	push	edx
	push	eax
	push	ecx
	call	_facet_force_on_vertex

; 2502 :           if ( flag )
; 2503 :             tripnetforce += dot(veccd,force,SDIM);

	mov	ecx, DWORD PTR _web+616
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR _flag$[ebp], 0
	lea	edx, DWORD PTR _force$90545[ebp]
	push	ecx
	push	edx
	lea	eax, DWORD PTR _veccd$[ebp]
	jne	SHORT $LN450@odd4cone_p

; 2504 :           else
; 2505 :             tripnetforce += dot(vecab,force,SDIM);

	lea	eax, DWORD PTR _vecab$[ebp]
$LN450@odd4cone_p:
	push	eax
	call	_dot
	fadd	QWORD PTR _tripnetforce$[ebp]
	inc	edi
	add	esp, 12					; 0000000cH
	fstp	QWORD PTR _tripnetforce$[ebp]
	cmp	edi, DWORD PTR [esi+4]
	jl	$LL416@odd4cone_p

; 2498 :         for ( j = 0 ; j < a->num ; j++ )

	mov	edx, DWORD PTR tv5308[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
$LN69@odd4cone_p:

; 2496 :     { for ( k = 0 ; k < cinfo->cell[i].num ; k++ )

	inc	ecx
	mov	DWORD PTR _k$[ebp], ecx
	cmp	ecx, DWORD PTR [edx]
	jl	$LL419@odd4cone_p
$LN68@odd4cone_p:

; 2506 :         }
; 2507 :       }
; 2508 :       flag = 1;

	mov	DWORD PTR _flag$[ebp], 1
$LN73@odd4cone_p:

; 2493 :   for ( i = 0, flag = 0 ; i < cinfo->cells ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	add	edx, 32					; 00000020H
	mov	DWORD PTR _i$[ebp], eax
	mov	DWORD PTR tv5308[ebp], edx
	cmp	eax, DWORD PTR [ebx]
	jl	$LL425@odd4cone_p
$LN402@odd4cone_p:

; 2509 :     } 
; 2510 :   }
; 2511 :   /* force from introduced facets */
; 2512 :   ee = dot(vecab,vecab,SDIM); 

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _vecab$[ebp]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	fstp	QWORD PTR _ee$[ebp]

; 2513 :   aa = dot(veca,veca,SDIM);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _veca$[ebp]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	fstp	QWORD PTR _aa$[ebp]

; 2514 :   ea = dot(veca,vecab,SDIM);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _vecab$[ebp]
	push	edx
	lea	eax, DWORD PTR _veca$[ebp]
	push	eax
	call	_dot

; 2515 :   tripnetforce -= sqrt(aa*ee - ea*ea)/2*get_facet_density(f_a);

	fld	QWORD PTR _aa$[ebp]
	fmul	QWORD PTR _ee$[ebp]
	mov	esi, DWORD PTR _f_a$[ebp]
	fld	ST(1)
	and	esi, 134217727				; 07ffffffH
	fmulp	ST(2), ST(0)
	add	esi, esi
	add	esi, esi
	add	esp, 36					; 00000024H
	fsubrp	ST(1), ST(0)
	mov	DWORD PTR tv3429[ebp], esi
	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000
	mov	ecx, DWORD PTR _web+236
	mov	edx, DWORD PTR [esi+ecx]
	fmul	QWORD PTR [edx+32]

; 2516 :   bb = dot(vecb,vecb,SDIM);

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _vecb$[ebp]
	fsubr	QWORD PTR _tripnetforce$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	fstp	QWORD PTR _tripnetforce$[ebp]
	call	_dot

; 2517 :   eb = dot(vecb,vecab,SDIM);

	mov	eax, DWORD PTR _web+616
	fstp	QWORD PTR _bb$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vecab$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vecb$[ebp]
	push	edx
	call	_dot

; 2518 :   tripnetforce -= sqrt(bb*ee - eb*eb)/2*get_facet_density(f_b);

	fld	QWORD PTR _bb$[ebp]
	fmul	QWORD PTR _ee$[ebp]
	mov	edi, DWORD PTR _f_b$[ebp]
	fld	ST(1)
	and	edi, 134217727				; 07ffffffH
	fmulp	ST(2), ST(0)
	add	edi, edi
	add	edi, edi
	add	esp, 24					; 00000018H
	fsubrp	ST(1), ST(0)
	mov	DWORD PTR tv3444[ebp], edi
	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000
	mov	eax, DWORD PTR _web+236
	mov	ecx, DWORD PTR [edi+eax]
	fmul	QWORD PTR [ecx+32]

; 2519 :   ee = dot(veccd,veccd,SDIM); 

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _veccd$[ebp]
	fsubr	QWORD PTR _tripnetforce$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	fstp	QWORD PTR _tripnetforce$[ebp]
	call	_dot

; 2520 :   cc = dot(vecc,vecc,SDIM);

	mov	edx, DWORD PTR _web+616
	fstp	QWORD PTR _ee$[ebp]
	push	edx
	lea	eax, DWORD PTR _vecc$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fstp	QWORD PTR _cc$[ebp]

; 2521 :   ec = dot(vecc,veccd,SDIM);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _veccd$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vecc$[ebp]
	push	ecx
	call	_dot

; 2522 :   tripnetforce -= sqrt(cc*ee - ec*ec)/2*get_facet_density(f_c);

	fld	QWORD PTR _cc$[ebp]
	fmul	QWORD PTR _ee$[ebp]
	add	esp, 36					; 00000024H
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000
	mov	eax, DWORD PTR _f_c$[ebp]
	mov	edx, DWORD PTR _web+236

; 2523 :   dd = dot(vecd,vecd,SDIM);

	mov	ecx, DWORD PTR _web+616
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	fmul	QWORD PTR [eax+32]
	push	ecx
	lea	edx, DWORD PTR _vecd$[ebp]
	push	edx
	fsubr	QWORD PTR _tripnetforce$[ebp]
	mov	eax, edx
	push	eax
	fstp	QWORD PTR _tripnetforce$[ebp]
	call	_dot

; 2524 :   ed = dot(vecd,veccd,SDIM);

	mov	ecx, DWORD PTR _web+616
	fstp	QWORD PTR _dd$[ebp]
	push	ecx
	lea	edx, DWORD PTR _veccd$[ebp]
	push	edx
	lea	eax, DWORD PTR _vecd$[ebp]
	push	eax
	call	_dot

; 2525 :   tripnetforce -= sqrt(dd*ee - ed*ed)/2*get_facet_density(f_d);

	fld	QWORD PTR _dd$[ebp]
	fmul	QWORD PTR _ee$[ebp]
	add	esp, 24					; 00000018H
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000
	mov	eax, DWORD PTR _f_d$[ebp]
	mov	ecx, DWORD PTR _web+236
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fmul	QWORD PTR [edx+32]

; 2526 :   
; 2527 : 
; 2528 :   /* now force from expanding vertex to quad line */
; 2529 :   /* assuming splits at the a->num/2 edge in the side arcs */
; 2530 :   quadnetforce = 0.0;
; 2531 : 
; 2532 :   for ( i = 0, flag = 0 ; i < cinfo->cells ; i++ )

	xor	eax, eax
	mov	DWORD PTR _i$[ebp], eax
	mov	DWORD PTR _flag$[ebp], eax
	fsubr	QWORD PTR _tripnetforce$[ebp]
	fstp	QWORD PTR _tripnetforce$[ebp]
	fldz
	fstp	QWORD PTR _quadnetforce$[ebp]
	cmp	DWORD PTR [ebx], eax
	jle	$LN60@odd4cone_p

; 2509 :     } 
; 2510 :   }
; 2511 :   /* force from introduced facets */
; 2512 :   ee = dot(vecab,vecab,SDIM); 

	lea	eax, DWORD PTR [ebx+16]
	mov	DWORD PTR tv5355[ebp], eax
$LL62@odd4cone_p:

; 2533 :   { if ( cinfo->cell[i].num == 2 ) 

	mov	ecx, DWORD PTR tv5355[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, 2
	jne	$LN61@odd4cone_p

; 2534 :     { for ( k = 0 ; k < cinfo->cell[i].num ; k++ )

	xor	ebx, ebx
	test	eax, eax
	jle	$LN415@odd4cone_p
	npad	2
$LL420@odd4cone_p:

; 2535 :       { struct arc *a = cinfo->arclist + cinfo->cell[i].start + k;

	mov	eax, DWORD PTR [ecx-8]
	add	eax, ebx
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR _cinfo$GSCopy$[ebp]
	lea	esi, DWORD PTR [eax+edx*4+9608]

; 2536 :         for ( j = 0 ; j < a->num ; j++ )

	xor	edi, edi
	cmp	DWORD PTR [esi+4], edi
	jle	$LN57@odd4cone_p
$LL413@odd4cone_p:

; 2537 :         { facetedge_id fe = cinfo->felist[a->start + j];

	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR _cinfo$GSCopy$[ebp]
	mov	eax, DWORD PTR [edx+16808]
	add	ecx, edi
	mov	eax, DWORD PTR [eax+ecx*4]

; 2538 :           REAL force[MAXCOORD];
; 2539 :           facet_force_on_vertex(get_fe_facet(fe),v_id,force);

	test	eax, 268435456				; 10000000H
	jne	SHORT $LN183@odd4cone_p
	mov	ecx, DWORD PTR _NULLFACET
	jmp	SHORT $LN182@odd4cone_p
$LN183@odd4cone_p:
	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [ecx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN182@odd4cone_p
	xor	ecx, 134217728				; 08000000H
$LN182@odd4cone_p:
	mov	eax, DWORD PTR _v_id$GSCopy$[ebp]
	lea	edx, DWORD PTR _force$90564[ebp]
	push	edx
	push	eax
	push	ecx
	call	_facet_force_on_vertex
	add	esp, 12					; 0000000cH

; 2540 :           if ( !flag || !cdswap )

	cmp	DWORD PTR _flag$[ebp], 0
	je	$LN414@odd4cone_p
	cmp	DWORD PTR _cdswap$[ebp], 0
	je	$LN414@odd4cone_p

; 2546 :           }
; 2547 :           else
; 2548 :           { if ( ((k==0) && (j < a->num/2)) || ((k==1)&&(j >= a->num/2)) )

	test	ebx, ebx
	jne	$LN43@odd4cone_p
	mov	eax, DWORD PTR [esi+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	edi, eax
	jge	$LN45@odd4cone_p
$LN50@odd4cone_p:

; 2545 :               quadnetforce += dot(vecbd,force,SDIM);

	lea	eax, DWORD PTR _vecbd$[ebp]
$LN451@odd4cone_p:
	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _force$90564[ebp]
	push	edx
	push	eax
	call	_dot
	fadd	QWORD PTR _quadnetforce$[ebp]
	inc	edi
	add	esp, 12					; 0000000cH
	fstp	QWORD PTR _quadnetforce$[ebp]
	cmp	edi, DWORD PTR [esi+4]
	jl	$LL413@odd4cone_p

; 2536 :         for ( j = 0 ; j < a->num ; j++ )

	mov	ecx, DWORD PTR tv5355[ebp]
$LN57@odd4cone_p:

; 2534 :     { for ( k = 0 ; k < cinfo->cell[i].num ; k++ )

	inc	ebx
	cmp	ebx, DWORD PTR [ecx]
	jl	$LL420@odd4cone_p
$LN415@odd4cone_p:

; 2552 :           }
; 2553 :         
; 2554 :         }
; 2555 :       }
; 2556 :       flag = 1;

	mov	esi, DWORD PTR tv3429[ebp]
	mov	edi, DWORD PTR tv3444[ebp]
	mov	ebx, DWORD PTR _cinfo$GSCopy$[ebp]
	mov	DWORD PTR _flag$[ebp], 1
$LN61@odd4cone_p:

; 2526 :   
; 2527 : 
; 2528 :   /* now force from expanding vertex to quad line */
; 2529 :   /* assuming splits at the a->num/2 edge in the side arcs */
; 2530 :   quadnetforce = 0.0;
; 2531 : 
; 2532 :   for ( i = 0, flag = 0 ; i < cinfo->cells ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	add	DWORD PTR tv5355[ebp], 32		; 00000020H
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR [ebx]
	jl	$LL62@odd4cone_p
$LN60@odd4cone_p:

; 2557 :     } 
; 2558 :   }
; 2559 :   /* force from old septa */
; 2560 :   ac = dot(veca,vecc,SDIM);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _vecc$[ebp]
	push	edx
	lea	eax, DWORD PTR _veca$[ebp]
	push	eax
	call	_dot

; 2561 :   quadnetforce += sqrt(aa*cc-ac*ac)/4*get_facet_density(f_a);

	fld	QWORD PTR _cc$[ebp]
	fmul	QWORD PTR _aa$[ebp]
	add	esp, 12					; 0000000cH
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	call	__CIsqrt
	fmul	QWORD PTR __real@3fd0000000000000
	mov	ecx, DWORD PTR _web+236
	mov	edx, DWORD PTR [esi+ecx]
	fmul	QWORD PTR [edx+32]

; 2562 :   bd = dot(vecb,vecd,SDIM);

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _vecd$[ebp]
	fadd	QWORD PTR _quadnetforce$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vecb$[ebp]
	push	edx
	fstp	QWORD PTR _quadnetforce$[ebp]
	call	_dot

; 2563 :   quadnetforce += sqrt(bb*dd-bd*bd)/4*get_facet_density(f_b);

	fld	QWORD PTR _dd$[ebp]
	add	esp, 12					; 0000000cH
	fmul	QWORD PTR _bb$[ebp]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	call	__CIsqrt
	fmul	QWORD PTR __real@3fd0000000000000

; 2564 : 
; 2565 :   /* force from introduced facets */
; 2566 :   for ( i = 0 ; i < cinfo->cells ; i++ )

	cmp	DWORD PTR [ebx], 0
	mov	eax, DWORD PTR _web+236
	mov	ecx, DWORD PTR [edi+eax]
	fmul	QWORD PTR [ecx+32]
	mov	DWORD PTR _i$[ebp], 0
	fadd	QWORD PTR _quadnetforce$[ebp]
	fst	QWORD PTR _quadnetforce$[ebp]
	jle	$LN39@odd4cone_p

; 2557 :     } 
; 2558 :   }
; 2559 :   /* force from old septa */
; 2560 :   ac = dot(veca,vecc,SDIM);

	mov	edx, DWORD PTR _cinfo$GSCopy$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR tv5401[ebp], edx
$LN41@odd4cone_p:

; 2567 :   { if ( cinfo->cell[i].num == 2 ) 

	mov	eax, DWORD PTR tv5401[ebp]
	mov	eax, DWORD PTR [eax]
	cmp	eax, 2
	jne	$LN40@odd4cone_p

; 2568 :     { for ( k = 0 ; k < cinfo->cell[i].num ; k++ )

	xor	ebx, ebx
	test	eax, eax
	jle	$LN40@odd4cone_p
$LN446@odd4cone_p:

; 2569 :       { struct arc *a = cinfo->arclist + cinfo->cell[i].start + k;

	mov	ecx, DWORD PTR tv5401[ebp]
	fstp	ST(0)
	mov	eax, DWORD PTR [ecx-8]
	mov	esi, DWORD PTR _cinfo$GSCopy$[ebp]
	add	eax, ebx
	lea	edx, DWORD PTR [eax+eax*2]

; 2570 :         REAL tension;
; 2571 :         
; 2572 :         fe = cinfo->felist[a->start + a->num/2];

	mov	eax, DWORD PTR [esi+edx*4+9612]
	lea	ecx, DWORD PTR [esi+edx*4+9608]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [esi+16808]
	mov	eax, DWORD PTR [ecx+eax*4]

; 2573 :         fe = get_prev_edge(fe);

	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN187@odd4cone_p
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	esi, DWORD PTR [edx+32]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN186@odd4cone_p
$LN43@odd4cone_p:

; 2546 :           }
; 2547 :           else
; 2548 :           { if ( ((k==0) && (j < a->num/2)) || ((k==1)&&(j >= a->num/2)) )

	cmp	ebx, 1
	jne	SHORT $LN45@odd4cone_p
	mov	eax, DWORD PTR [esi+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	edi, eax

; 2549 :               quadnetforce += dot(vecbd,force,SDIM);
; 2550 :             else

	jge	$LN50@odd4cone_p
$LN45@odd4cone_p:

; 2551 :               quadnetforce += dot(vecac,force,SDIM);

	lea	eax, DWORD PTR _vecac$[ebp]
	jmp	$LN451@odd4cone_p
$LN414@odd4cone_p:

; 2541 :           {
; 2542 :             if ( ((k==0) && (j < a->num/2)) || ((k==1)&&(j >= a->num/2)) )

	test	ebx, ebx
	jne	SHORT $LN48@odd4cone_p
	mov	eax, DWORD PTR [esi+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	edi, eax
	jl	SHORT $LN49@odd4cone_p
	jmp	$LN50@odd4cone_p
$LN48@odd4cone_p:
	cmp	ebx, 1
	jne	$LN50@odd4cone_p
	mov	eax, DWORD PTR [esi+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	edi, eax
	jl	$LN50@odd4cone_p
$LN49@odd4cone_p:

; 2543 :               quadnetforce += dot(vecac,force,SDIM);

	lea	eax, DWORD PTR _vecac$[ebp]

; 2544 :             else

	jmp	$LN451@odd4cone_p

; 2573 :         fe = get_prev_edge(fe);

$LN187@odd4cone_p:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	esi, DWORD PTR [eax+28]
$LN186@odd4cone_p:

; 2574 :         get_edge_side(get_fe_edge(fe),eside);

	mov	edi, esi
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	eax, DWORD PTR [edi+ecx]
	mov	ecx, esi
	and	ecx, 134217728				; 08000000H
	xor	ecx, DWORD PTR [eax+20]
	lea	edx, DWORD PTR _eside$[ebp]
	push	edx
	push	ecx
	call	_get_edge_side

; 2575 :         ee = dot(eside,eside,SDIM); 

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _eside$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fstp	QWORD PTR _ee$[ebp]
	add	esp, 20					; 00000014H

; 2576 :         tension = get_facet_density(get_fe_facet(fe));

	test	esi, 268435456				; 10000000H
	jne	SHORT $LN193@odd4cone_p
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN192@odd4cone_p
$LN193@odd4cone_p:
	mov	edx, DWORD PTR _web+460
	mov	eax, DWORD PTR [edi+edx]
	mov	eax, DWORD PTR [eax+24]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN192@odd4cone_p
	xor	eax, 134217728				; 08000000H
$LN192@odd4cone_p:
	mov	ecx, DWORD PTR _web+236
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]

; 2577 : 
; 2578 :         acac = dot(vecac,vecac,SDIM);

	mov	eax, DWORD PTR _web+616
	fld	QWORD PTR [edx+32]
	push	eax
	fstp	QWORD PTR _tension$90586[ebp]
	lea	ecx, DWORD PTR _vecac$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	fstp	QWORD PTR _acac$[ebp]

; 2579 :         ea = dot(vecac,eside,SDIM);

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _eside$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vecac$[ebp]
	push	edx
	call	_dot
	fstp	QWORD PTR _ea$[ebp]

; 2580 :         quadnetforce -= sqrt(acac*ee - ea*ea)/2*tension;
; 2581 :         bdbd = dot(vecbd,vecbd,SDIM);

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _vecbd$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	fstp	QWORD PTR _bdbd$[ebp]

; 2582 :         eb = dot(vecbd,eside,SDIM);

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _eside$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vecbd$[ebp]
	push	edx
	call	_dot
	fstp	QWORD PTR _eb$[ebp]
	fld	QWORD PTR _acac$[ebp]
	add	esp, 48					; 00000030H
	fmul	QWORD PTR _ee$[ebp]
	fld	QWORD PTR _ea$[ebp]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000
	fmul	QWORD PTR _tension$90586[ebp]
	fsubr	QWORD PTR _quadnetforce$[ebp]

; 2583 :         quadnetforce -= sqrt(bdbd*ee - eb*eb)/2*tension;

	fstp	QWORD PTR tv4901[ebp]
	fld	QWORD PTR _bdbd$[ebp]
	fmul	QWORD PTR _ee$[ebp]
	fld	QWORD PTR _eb$[ebp]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000
	mov	eax, DWORD PTR tv5401[ebp]
	inc	ebx
	fmul	QWORD PTR _tension$90586[ebp]
	fsubr	QWORD PTR tv4901[ebp]
	fst	QWORD PTR _quadnetforce$[ebp]
	cmp	ebx, DWORD PTR [eax]
	jl	$LN446@odd4cone_p
$LN40@odd4cone_p:

; 2564 : 
; 2565 :   /* force from introduced facets */
; 2566 :   for ( i = 0 ; i < cinfo->cells ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cinfo$GSCopy$[ebp]
	add	DWORD PTR tv5401[ebp], 32		; 00000020H
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR [ecx]
	jl	$LN41@odd4cone_p
$LN39@odd4cone_p:

; 2584 :       }
; 2585 :     }
; 2586 :   }
; 2587 : 
; 2588 :   if ( (tripnetforce < 0) && (quadnetforce < 0) )

	fldz
	fld	QWORD PTR _tripnetforce$[ebp]
	fcom	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN442@odd4cone_p
	fxch	ST(1)
	fcomp	ST(2)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN34@odd4cone_p

; 2589 :   { if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	fstp	ST(1)
	fstp	ST(0)
	je	SHORT $LN33@odd4cone_p

; 2590 :     { sprintf(msg,"Not popping touching-triple-lines vertex %s since stable.\n",
; 2591 :         ELNAME(v_id));

	mov	eax, DWORD PTR _v_id$GSCopy$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN95@odd4cone_p
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN96@odd4cone_p
$LN95@odd4cone_p:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN96@odd4cone_p:
	mov	edx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0DL@OGANAIC@Not?5popping?5touching?9triple?9line@
	push	edx
	call	_sprintf

; 2592 :       outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 16					; 00000010H
$LN33@odd4cone_p:

; 2593 :     }
; 2594 :     return 0; /* no profit from splitting either way */

	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx

; 2731 :   }
; 2732 :   
; 2733 :   return 1;
; 2734 : 
; 2735 : } /* end odd4cone_pop() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN442@odd4cone_p:

; 2584 :       }
; 2585 :     }
; 2586 :   }
; 2587 : 
; 2588 :   if ( (tripnetforce < 0) && (quadnetforce < 0) )

	fstp	ST(1)
$LN34@odd4cone_p:

; 2595 :   }
; 2596 :   
; 2597 :   /* if separate triple lines */
; 2598 :   if ( tripnetforce > quadnetforce )

	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN32@odd4cone_p

; 2599 :   { vertex_id newv = dup_vertex(v_id);

	mov	ebx, DWORD PTR _v_id$GSCopy$[ebp]
	push	ebx
	call	_dup_vertex

; 2600 :     edge_id newe;
; 2601 :     facetedge_id fe_aa,fe_bb,new_fe_a,new_fe_b;
; 2602 :     REAL *xold = get_coord(v_id);

	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+104
	mov	ecx, DWORD PTR [ecx+edx+64]
	mov	edx, DWORD PTR _web+12
	mov	esi, eax
	mov	DWORD PTR _newv$90594[ebp], esi
	mov	eax, ebx

; 2603 :     REAL *xnew = get_coord(newv);

	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+esi*4]
	and	eax, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edx+eax*4]
	add	esp, 4
	add	edi, ecx
	add	esi, ecx

; 2604 : 
; 2605 :     if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	je	SHORT $LN31@odd4cone_p

; 2606 :     { sprintf(msg,"Separating triple lines at vertex %s.\n",
; 2607 :         ELNAME(v_id));

	test	ebx, 268435456				; 10000000H
	je	SHORT $LN97@odd4cone_p
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN98@odd4cone_p
$LN97@odd4cone_p:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN98@odd4cone_p:
	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0CH@MFIOBHAD@Separating?5triple?5lines?5at?5verte@
	push	eax
	call	_sprintf

; 2608 :       outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 16					; 00000010H
$LN31@odd4cone_p:

; 2609 :     }
; 2610 :     
; 2611 :     /* spread vertices apart */
; 2612 :     for ( i = 0 ; i < SDIM ; i++ )

	xor	edx, edx
	cmp	DWORD PTR _web+616, edx
	jle	SHORT $LN405@odd4cone_p
	lea	ecx, DWORD PTR _veccd$[ebp]
	sub	ecx, esi
	mov	DWORD PTR tv5482[ebp], ecx
	lea	ebx, DWORD PTR _vecab$[ebp]
	sub	ebx, esi
	mov	ecx, edi
	mov	eax, esi
	sub	ecx, esi
	mov	esi, DWORD PTR tv5482[ebp]
$LL30@odd4cone_p:

; 2613 :     { 
; 2614 :       xnew[i] += vecab[i];

	fld	QWORD PTR [ebx+eax]
	inc	edx
	fadd	QWORD PTR [eax]
	add	eax, 8
	fstp	QWORD PTR [eax-8]

; 2615 :       xold[i] += veccd[i];

	fld	QWORD PTR [esi+eax-8]
	fadd	QWORD PTR [ecx+eax-8]
	fstp	QWORD PTR [ecx+eax-8]
	cmp	edx, DWORD PTR _web+616
	jl	SHORT $LL30@odd4cone_p
$LN405@odd4cone_p:

; 2616 :     }
; 2617 : 
; 2618 :     /* reconnected other edges on split-off part */
; 2619 :     for ( i = 0 ; i < cinfo->cell[split_cell].num ; i++ )

	mov	eax, DWORD PTR _split_cell$[ebp]
	mov	ebx, DWORD PTR _cinfo$GSCopy$[ebp]
	shl	eax, 5
	add	eax, ebx
	cmp	DWORD PTR [eax+16], 0
	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR tv3624[ebp], eax
	jle	$LN25@odd4cone_p
	jmp	SHORT $LN27@odd4cone_p
	npad	11
$LL412@odd4cone_p:
	mov	eax, DWORD PTR tv3624[ebp]
$LN27@odd4cone_p:

; 2620 :     { struct arc *a = cinfo->arclist + cinfo->cell[split_cell].start + i;

	mov	eax, DWORD PTR [eax+8]
	add	eax, DWORD PTR _i$[ebp]

; 2621 :       for ( j = 0 ; j < a->num ; j++ )

	xor	esi, esi
	lea	edx, DWORD PTR [eax+eax*2]
	cmp	DWORD PTR [ebx+edx*4+9612], esi
	lea	edi, DWORD PTR [ebx+edx*4+9608]
	jle	SHORT $LN26@odd4cone_p
$LL24@odd4cone_p:

; 2622 :       { facetedge_id fe = cinfo->felist[a->start + j];

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [ebx+16808]
	add	eax, esi
	mov	eax, DWORD PTR [ecx+eax*4]

; 2623 :         edge_id e_id;
; 2624 :         fe = get_prev_edge(fe);

	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN197@odd4cone_p
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN196@odd4cone_p
$LN197@odd4cone_p:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+28]
$LN196@odd4cone_p:

; 2625 :         e_id = get_fe_edge(fe);
; 2626 :         set_edge_tailv(e_id,newv);

	mov	edx, DWORD PTR _newv$90594[ebp]
	push	edx
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	push	eax
	call	_set_edge_tailv
	inc	esi
	add	esp, 8
	cmp	esi, DWORD PTR [edi+4]
	jl	SHORT $LL24@odd4cone_p
$LN26@odd4cone_p:

; 2616 :     }
; 2617 : 
; 2618 :     /* reconnected other edges on split-off part */
; 2619 :     for ( i = 0 ; i < cinfo->cell[split_cell].num ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR tv3624[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR [edx+16]
	jl	$LL412@odd4cone_p
$LN25@odd4cone_p:

; 2627 :       }
; 2628 :     }
; 2629 : 
; 2630 :     /* new edge and its facetedges */
; 2631 :     newe = new_edge(v_id,newv,v_id);

	mov	eax, DWORD PTR _v_id$GSCopy$[ebp]
	mov	ecx, DWORD PTR _newv$90594[ebp]
	push	eax
	push	ecx
	push	eax
	call	_new_edge

; 2632 :     new_fe_a = new_facetedge(f_a,newe);

	mov	edx, DWORD PTR _f_a$[ebp]
	mov	esi, eax
	push	esi
	push	edx
	call	_new_facetedge
	mov	edi, eax

; 2633 :     new_fe_b = new_facetedge(f_b,newe);

	mov	eax, DWORD PTR _f_b$[ebp]
	push	esi
	push	eax
	call	_new_facetedge
	add	esp, 28					; 0000001cH
	mov	ebx, eax

; 2634 :     set_edge_fe(newe,new_fe_a);

	mov	eax, edi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN404@odd4cone_p
	xor	eax, 134217728				; 08000000H
$LN404@odd4cone_p:
	mov	ecx, DWORD PTR _web+124
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	DWORD PTR [edx+28], eax
	mov	eax, DWORD PTR _global_timestamp

; 2635 :     set_next_facet(new_fe_a,new_fe_b);

	mov	esi, edi
	inc	eax
	shr	esi, 28					; 0000001cH
	and	esi, 1
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	DWORD PTR tv3682[ebp], esi
	je	SHORT $LN205@odd4cone_p
	test	edi, 134217728				; 08000000H
	je	SHORT $LN206@odd4cone_p
	mov	edx, DWORD PTR _web+460
	mov	eax, ebx
	xor	eax, 134217728				; 08000000H
	mov	ecx, edi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+36], eax
	jmp	SHORT $LN205@odd4cone_p
$LN206@odd4cone_p:
	mov	eax, DWORD PTR _web+460
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [ecx+40], ebx
$LN205@odd4cone_p:

; 2636 :     set_prev_facet(new_fe_a,new_fe_b);

	test	esi, esi
	je	SHORT $LN422@odd4cone_p
	test	edi, 134217728				; 08000000H
	je	SHORT $LN211@odd4cone_p
	mov	ecx, DWORD PTR _web+460
	mov	edx, ebx
	xor	edx, 134217728				; 08000000H
	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+40], edx
	jmp	SHORT $LN210@odd4cone_p
$LN211@odd4cone_p:
	mov	edx, DWORD PTR _web+460
	mov	ecx, edi
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [eax+36], ebx
$LN210@odd4cone_p:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN422@odd4cone_p:

; 2637 :     set_next_facet(new_fe_b,new_fe_a);

	mov	eax, ebx
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv3699[ebp], eax
	je	SHORT $LN215@odd4cone_p
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN216@odd4cone_p
	mov	esi, DWORD PTR _web+460
	mov	ecx, edi
	xor	ecx, 134217728				; 08000000H
	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	mov	esi, DWORD PTR tv3682[ebp]
	mov	DWORD PTR [edx+36], ecx
	jmp	SHORT $LN215@odd4cone_p
$LN216@odd4cone_p:
	mov	edx, DWORD PTR _web+460
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+40], edi
$LN215@odd4cone_p:

; 2638 :     set_prev_facet(new_fe_b,new_fe_a);

	test	eax, eax
	je	SHORT $LN423@odd4cone_p
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN221@odd4cone_p
	mov	ecx, DWORD PTR _web+460
	mov	edx, edi
	xor	edx, 134217728				; 08000000H
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+40], edx
	jmp	SHORT $LN220@odd4cone_p
$LN221@odd4cone_p:
	mov	edx, DWORD PTR _web+460
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [eax+36], edi
$LN220@odd4cone_p:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN423@odd4cone_p:

; 2639 :     fe_aa = get_prev_edge(fe_a);

	mov	eax, DWORD PTR _fe_a$[ebp]
	mov	edx, DWORD PTR tv3120[ebp]
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR tv3117[ebp], eax
	mov	eax, DWORD PTR _web+460
	mov	ecx, DWORD PTR [edx+eax]
	je	SHORT $LN226@odd4cone_p
	mov	ecx, DWORD PTR [ecx+32]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN225@odd4cone_p
$LN226@odd4cone_p:
	mov	ecx, DWORD PTR [ecx+28]
$LN225@odd4cone_p:

; 2640 :     set_next_edge(new_fe_a,fe_a);

	test	esi, esi
	je	SHORT $LN408@odd4cone_p
	mov	esi, edi
	test	edi, 134217728				; 08000000H
	je	SHORT $LN230@odd4cone_p
	mov	edx, DWORD PTR _fe_a$[ebp]
	xor	edx, 134217728				; 08000000H
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [eax+28], edx
	mov	edx, DWORD PTR tv3120[ebp]
	jmp	SHORT $LN452@odd4cone_p
$LN230@odd4cone_p:
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	mov	esi, DWORD PTR _fe_a$[ebp]
	mov	DWORD PTR [eax+32], esi
$LN452@odd4cone_p:
	mov	esi, DWORD PTR tv3682[ebp]
	mov	eax, DWORD PTR _web+460
$LN408@odd4cone_p:

; 2641 :     set_prev_edge(fe_a,new_fe_a);

	cmp	DWORD PTR tv3218[ebp], 0
	je	SHORT $LN411@odd4cone_p
	cmp	DWORD PTR tv3117[ebp], 0
	je	SHORT $LN235@odd4cone_p
	mov	edx, DWORD PTR [edx+eax]
	mov	esi, edi
	xor	esi, 134217728				; 08000000H
	mov	DWORD PTR [edx+32], esi
	jmp	SHORT $LN453@odd4cone_p
$LN235@odd4cone_p:
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [eax+28], edi
$LN453@odd4cone_p:
	mov	eax, DWORD PTR _global_timestamp
	mov	esi, DWORD PTR tv3682[ebp]
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN411@odd4cone_p:

; 2642 :     set_prev_edge(new_fe_a,fe_aa);

	test	esi, esi
	je	SHORT $LN409@odd4cone_p
	test	edi, 134217728				; 08000000H
	je	SHORT $LN240@odd4cone_p
	mov	edx, ecx
	xor	edx, 134217728				; 08000000H
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [eax+32], edx
	jmp	SHORT $LN239@odd4cone_p
$LN240@odd4cone_p:
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+28], ecx
$LN239@odd4cone_p:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN409@odd4cone_p:

; 2643 :     set_next_edge(fe_aa,new_fe_a);

	test	ecx, 268435456				; 10000000H
	je	SHORT $LN244@odd4cone_p
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN245@odd4cone_p
	mov	edx, edi
	xor	edx, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [eax+28], edx
	jmp	SHORT $LN454@odd4cone_p
$LN245@odd4cone_p:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [ecx+32], edi
$LN454@odd4cone_p:
	mov	eax, DWORD PTR _web+460
$LN244@odd4cone_p:

; 2644 :     fe_bb = get_prev_edge(fe_b);

	mov	ecx, DWORD PTR _fe_b$[ebp]
	mov	edx, DWORD PTR tv3142[ebp]
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR tv3139[ebp], ecx
	mov	ecx, DWORD PTR [edx+eax]
	je	SHORT $LN250@odd4cone_p
	mov	ecx, DWORD PTR [ecx+32]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN249@odd4cone_p
$LN250@odd4cone_p:
	mov	ecx, DWORD PTR [ecx+28]
$LN249@odd4cone_p:

; 2645 :     set_next_edge(new_fe_b,fe_b);

	cmp	DWORD PTR tv3699[ebp], 0
	je	SHORT $LN406@odd4cone_p
	mov	esi, ebx
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN254@odd4cone_p
	mov	edx, DWORD PTR _fe_b$[ebp]
	xor	edx, 134217728				; 08000000H
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [eax+28], edx
	mov	edx, DWORD PTR tv3142[ebp]
	jmp	SHORT $LN455@odd4cone_p
$LN254@odd4cone_p:
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	mov	esi, DWORD PTR _fe_b$[ebp]
	mov	DWORD PTR [eax+32], esi
$LN455@odd4cone_p:
	mov	eax, DWORD PTR _web+460
$LN406@odd4cone_p:

; 2646 :     set_prev_edge(fe_b,new_fe_b);

	cmp	DWORD PTR tv3225[ebp], 0
	je	SHORT $LN261@odd4cone_p
	cmp	DWORD PTR tv3139[ebp], 0
	je	SHORT $LN259@odd4cone_p
	mov	edx, DWORD PTR [edx+eax]
	mov	esi, ebx
	xor	esi, 134217728				; 08000000H
	mov	DWORD PTR [edx+32], esi
	jmp	SHORT $LN258@odd4cone_p
$LN259@odd4cone_p:
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [eax+28], ebx
$LN258@odd4cone_p:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN261@odd4cone_p:

; 2647 :     set_prev_edge(new_fe_b,fe_bb);

	cmp	DWORD PTR tv3699[ebp], 0
	je	SHORT $LN407@odd4cone_p
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN264@odd4cone_p
	mov	edx, ecx
	xor	edx, 134217728				; 08000000H
	mov	esi, ebx
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [eax+32], edx
	jmp	SHORT $LN263@odd4cone_p
$LN264@odd4cone_p:
	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+28], ecx
$LN263@odd4cone_p:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, DWORD PTR _web+460
$LN407@odd4cone_p:

; 2648 :     set_next_edge(fe_bb,new_fe_b);

	test	ecx, 268435456				; 10000000H
	je	SHORT $LN268@odd4cone_p
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN269@odd4cone_p
	mov	edx, ebx
	xor	edx, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [eax+28], edx
	jmp	SHORT $LN268@odd4cone_p
$LN269@odd4cone_p:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [ecx+32], ebx
$LN268@odd4cone_p:

; 2649 : 
; 2650 :     /* subdivide septum quadrilaterals */
; 2651 :     cross_cut(new_fe_a,fe_a);

	mov	edx, DWORD PTR _fe_a$[ebp]
	push	edx
	push	edi
	call	_cross_cut

; 2652 :     cross_cut(new_fe_b,fe_b);

	mov	eax, DWORD PTR _fe_b$[ebp]
	push	eax
	push	ebx
	call	_cross_cut
	add	esp, 16					; 00000010H

; 2653 : 
; 2654 :   }
; 2655 :   else

	jmp	$LN21@odd4cone_p
$LN32@odd4cone_p:

; 2656 :   { /* split vertex to form quadruple line */
; 2657 :     vertex_id newv = dup_vertex(v_id);

	mov	esi, DWORD PTR _v_id$GSCopy$[ebp]
	push	esi
	call	_dup_vertex

; 2658 :     edge_id newe;
; 2659 :     REAL *xold = get_coord(v_id);

	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+104
	mov	ecx, DWORD PTR [ecx+edx+64]
	mov	edx, DWORD PTR _web+12
	mov	edi, eax
	mov	eax, esi

; 2660 :     REAL *xnew = get_coord(newv);

	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+esi*4]
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [edx+eax*4]
	add	esp, 4
	add	ebx, ecx
	add	esi, ecx

; 2661 : 
; 2662 :     if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, 0
	mov	DWORD PTR _newv$90627[ebp], edi
	je	SHORT $LN20@odd4cone_p

; 2663 :     { sprintf(msg,"Inserting new septum at vertex %s.\n",
; 2664 :         ELNAME(v_id));

	test	DWORD PTR _v_id$GSCopy$[ebp], 268435456	; 10000000H
	je	SHORT $LN99@odd4cone_p
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN100@odd4cone_p
$LN99@odd4cone_p:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN100@odd4cone_p:
	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0CE@OGLHPJAC@Inserting?5new?5septum?5at?5vertex?5?$CF@
	push	eax
	call	_sprintf

; 2665 :       outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 16					; 00000010H
$LN20@odd4cone_p:

; 2666 :     }
; 2667 :    
; 2668 :     /* spread vertices apart */
; 2669 :     for ( i = 0 ; i < SDIM ; i++ )

	xor	edx, edx
	cmp	DWORD PTR _web+616, edx
	jle	SHORT $LN17@odd4cone_p
	lea	ecx, DWORD PTR _vecac$[ebp]
	sub	ecx, esi
	mov	DWORD PTR tv5562[ebp], ecx
	lea	ecx, DWORD PTR _vecbd$[ebp]
	sub	ecx, esi
	mov	DWORD PTR tv5567[ebp], ecx
	mov	ecx, ebx
	mov	eax, esi
	sub	ecx, esi
	npad	1
$LL19@odd4cone_p:

; 2670 :     { 
; 2671 :       xnew[i] += vecac[i];

	mov	esi, DWORD PTR tv5562[ebp]
	fld	QWORD PTR [esi+eax]

; 2672 :       xold[i] += vecbd[i];

	mov	esi, DWORD PTR tv5567[ebp]
	fadd	QWORD PTR [eax]
	inc	edx
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	fld	QWORD PTR [esi+eax-8]
	fadd	QWORD PTR [ecx+eax-8]
	fstp	QWORD PTR [ecx+eax-8]
	cmp	edx, DWORD PTR _web+616
	jl	SHORT $LL19@odd4cone_p
$LN17@odd4cone_p:

; 2673 :     }
; 2674 : 
; 2675 :     /* new edge and its facetedges */
; 2676 :     newe = new_edge(v_id,newv,v_id);

	mov	eax, DWORD PTR _v_id$GSCopy$[ebp]
	push	eax
	push	edi
	push	eax
	call	_new_edge

; 2677 : 
; 2678 :     /* reconnected other edges on split-off part */
; 2679 :     set_edge_tailv(e_a,newv);

	mov	edx, DWORD PTR _e_a$[ebp]
	mov	esi, eax
	push	edi
	push	edx
	mov	DWORD PTR _newe$90628[ebp], esi
	call	_set_edge_tailv

; 2680 :     set_edge_tailv(e_c,newv);

	mov	eax, DWORD PTR _e_c$[ebp]
	push	edi
	push	eax
	call	_set_edge_tailv

; 2681 : 
; 2682 :     for ( i = 0, flag = 0 ; i < cinfo->cells ; i++ )

	mov	ecx, DWORD PTR _cinfo$GSCopy$[ebp]
	xor	edx, edx
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _i$[ebp], edx
	mov	DWORD PTR _flag$[ebp], edx
	cmp	DWORD PTR [ecx], edx
	jle	$LN14@odd4cone_p

; 2673 :     }
; 2674 : 
; 2675 :     /* new edge and its facetedges */
; 2676 :     newe = new_edge(v_id,newv,v_id);

	lea	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR tv5617[ebp], eax
$LL16@odd4cone_p:

; 2683 :     { if ( cinfo->cell[i].num != 2 ) 

	mov	eax, DWORD PTR tv5617[ebp]
	mov	eax, DWORD PTR [eax]
	cmp	eax, 2
	jne	$LN15@odd4cone_p

; 2684 :         continue;
; 2685 :       for ( k = 0 ; k < cinfo->cell[i].num ; k++ )

	mov	DWORD PTR _k$[ebp], edx
	cmp	eax, edx
	jle	$LN10@odd4cone_p
	npad	13
$LL12@odd4cone_p:

; 2686 :       { struct arc *a = cinfo->arclist + cinfo->cell[i].start + k;

	mov	ecx, DWORD PTR tv5617[ebp]
	mov	eax, DWORD PTR [ecx-8]
	mov	ecx, DWORD PTR _k$[ebp]
	add	eax, ecx

; 2687 :         int upflag = (!flag && (k==0)) || (flag && !cdswap && (k==0))
; 2688 :             || (flag && cdswap && (k==1)) ;

	cmp	DWORD PTR _flag$[ebp], 0
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR _cinfo$GSCopy$[ebp]
	lea	ebx, DWORD PTR [eax+edx*4+9608]
	jne	SHORT $LN393@odd4cone_p
	test	ecx, ecx
	je	SHORT $LN398@odd4cone_p
$LN399@odd4cone_p:
	mov	DWORD PTR _upflag$90654[ebp], 0
$LN105@odd4cone_p:

; 2689 :         facet_id ff;
; 2690 :         facetedge_id new_fe,fe_prev,e_fe;
; 2691 :         
; 2692 :         for ( j = 1 ; j < a->num ; j++ )

	mov	eax, DWORD PTR [ebx+4]
	mov	esi, DWORD PTR _web+460
	mov	edi, 1
	cmp	eax, edi
	jle	$LN7@odd4cone_p
	npad	2
$LL9@odd4cone_p:

; 2693 :         { facetedge_id fe = cinfo->felist[a->start + j];

	mov	ecx, DWORD PTR [ebx]
	mov	edx, DWORD PTR _cinfo$GSCopy$[ebp]
	mov	edx, DWORD PTR [edx+16808]
	add	ecx, edi
	mov	ecx, DWORD PTR [edx+ecx*4]

; 2694 :           edge_id e_id;
; 2695 :           fe = get_prev_edge(fe);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN274@odd4cone_p
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	ecx, DWORD PTR [ecx+32]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN273@odd4cone_p
$LN393@odd4cone_p:

; 2687 :         int upflag = (!flag && (k==0)) || (flag && !cdswap && (k==0))
; 2688 :             || (flag && cdswap && (k==1)) ;

	mov	eax, DWORD PTR _cdswap$[ebp]
	test	eax, eax
	jne	SHORT $LN457@odd4cone_p
	test	ecx, ecx
	je	SHORT $LN398@odd4cone_p
	test	eax, eax
	je	SHORT $LN399@odd4cone_p
$LN457@odd4cone_p:
	cmp	ecx, 1
	jne	SHORT $LN399@odd4cone_p
$LN398@odd4cone_p:
	mov	DWORD PTR _upflag$90654[ebp], 1
	jmp	SHORT $LN105@odd4cone_p

; 2694 :           edge_id e_id;
; 2695 :           fe = get_prev_edge(fe);

$LN274@odd4cone_p:
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+ecx*4]
	mov	ecx, DWORD PTR [edx+28]
$LN273@odd4cone_p:

; 2696 :           e_id = get_fe_edge(fe);

	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	and	ecx, 134217728				; 08000000H
	xor	ecx, DWORD PTR [edx+20]

; 2697 :           if ( (upflag && (j <= a->num/2)) || (!upflag && (j >= a->num/2)) )

	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	DWORD PTR _upflag$90654[ebp], 0
	je	SHORT $LN392@odd4cone_p
	cmp	edi, eax
	jle	SHORT $LN5@odd4cone_p
	jmp	SHORT $LN8@odd4cone_p
$LN392@odd4cone_p:
	cmp	edi, eax
	jl	SHORT $LN8@odd4cone_p
$LN5@odd4cone_p:

; 2698 :             set_edge_tailv(e_id,newv);

	mov	eax, DWORD PTR _newv$90627[ebp]
	push	eax
	push	ecx
	call	_set_edge_tailv
	mov	esi, DWORD PTR _web+460
	add	esp, 8
$LN8@odd4cone_p:

; 2689 :         facet_id ff;
; 2690 :         facetedge_id new_fe,fe_prev,e_fe;
; 2691 :         
; 2692 :         for ( j = 1 ; j < a->num ; j++ )

	mov	eax, DWORD PTR [ebx+4]
	inc	edi
	cmp	edi, eax
	jl	$LL9@odd4cone_p
$LN7@odd4cone_p:

; 2699 :         }
; 2700 :         /* now expand some facets to quads */
; 2701 :         fe = cinfo->felist[a->start + a->num/2];

	mov	eax, DWORD PTR [ebx+4]
	mov	ecx, DWORD PTR _cinfo$GSCopy$[ebp]
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR [ecx+16808]
	sar	eax, 1
	add	eax, DWORD PTR [ebx]
	mov	eax, DWORD PTR [edx+eax*4]

; 2702 :         fe = get_prev_edge(fe);

	test	eax, 134217728				; 08000000H
	je	SHORT $LN280@odd4cone_p
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	ebx, DWORD PTR [eax+32]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN458@odd4cone_p
$LN280@odd4cone_p:
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+eax*4]
	mov	ebx, DWORD PTR [ecx+28]
$LN458@odd4cone_p:

; 2703 :         if ( !upflag )

	cmp	DWORD PTR _upflag$90654[ebp], 0
	mov	DWORD PTR _fe$[ebp], ebx
	jne	SHORT $LN424@odd4cone_p

; 2704 :           fe = get_next_facet(fe);

	test	ebx, 134217728				; 08000000H
	je	SHORT $LN284@odd4cone_p
	and	ebx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+ebx*4]
	mov	ebx, DWORD PTR [edx+36]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN459@odd4cone_p
$LN284@odd4cone_p:
	and	ebx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+ebx*4]
	mov	ebx, DWORD PTR [eax+40]
$LN459@odd4cone_p:
	mov	DWORD PTR _fe$[ebp], ebx
$LN424@odd4cone_p:

; 2705 :         ff = get_fe_facet(fe);

	mov	eax, ebx
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv3565[ebp], eax
	jne	SHORT $LN288@odd4cone_p
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN287@odd4cone_p
$LN288@odd4cone_p:
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+ecx*4]
	mov	eax, DWORD PTR [edx+24]
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN287@odd4cone_p
	xor	eax, 134217728				; 08000000H
$LN287@odd4cone_p:

; 2706 :         new_fe = new_facetedge(ff,newe);

	mov	ecx, DWORD PTR _newe$90628[ebp]
	push	ecx
	push	eax
	call	_new_facetedge

; 2707 :         fe_prev = get_prev_edge(fe);

	mov	edi, DWORD PTR _web+460
	mov	esi, eax
	mov	eax, ebx
	shr	eax, 27					; 0000001bH
	add	esp, 8
	and	eax, 1
	mov	DWORD PTR tv3545[ebp], eax
	mov	ecx, ebx
	je	SHORT $LN292@odd4cone_p
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	edx, DWORD PTR [ecx+edi]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN291@odd4cone_p
$LN292@odd4cone_p:
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	eax, DWORD PTR [ecx+edi]
	mov	eax, DWORD PTR [eax+28]
$LN291@odd4cone_p:

; 2708 :         set_prev_edge(new_fe,fe_prev);

	mov	edx, esi
	shr	edx, 28					; 0000001cH
	and	edx, 1
	mov	DWORD PTR tv3838[ebp], edx
	je	SHORT $LN400@odd4cone_p
	test	esi, 134217728				; 08000000H
	je	SHORT $LN296@odd4cone_p
	mov	edx, eax
	xor	edx, 134217728				; 08000000H
	mov	ebx, esi
	and	ebx, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edi+ebx*4]
	mov	ebx, DWORD PTR _fe$[ebp]
	mov	DWORD PTR [edi+32], edx
	jmp	SHORT $LN460@odd4cone_p
$LN296@odd4cone_p:
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+edx*4]
	mov	DWORD PTR [edx+28], eax
$LN460@odd4cone_p:
	mov	edi, DWORD PTR _global_timestamp
	mov	edx, DWORD PTR tv3838[ebp]
	inc	edi
	mov	DWORD PTR _global_timestamp, edi
	mov	DWORD PTR _top_timestamp, edi
	mov	edi, DWORD PTR _web+460
$LN400@odd4cone_p:

; 2709 :         set_next_edge(fe_prev,new_fe);

	test	eax, 268435456				; 10000000H
	je	SHORT $LN300@odd4cone_p
	test	eax, 134217728				; 08000000H
	je	SHORT $LN301@odd4cone_p
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	DWORD PTR [eax+28], edx
	mov	edx, DWORD PTR tv3838[ebp]
	jmp	SHORT $LN461@odd4cone_p
$LN301@odd4cone_p:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	DWORD PTR [eax+32], esi
$LN461@odd4cone_p:
	mov	edi, DWORD PTR _web+460
$LN300@odd4cone_p:

; 2710 :         set_next_edge(new_fe,fe);

	test	edx, edx
	je	SHORT $LN410@odd4cone_p
	test	esi, 134217728				; 08000000H
	je	SHORT $LN306@odd4cone_p
	mov	edx, ebx
	xor	edx, 134217728				; 08000000H
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	DWORD PTR [eax+28], edx
	jmp	SHORT $LN462@odd4cone_p
$LN306@odd4cone_p:
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+edx*4]
	mov	DWORD PTR [eax+32], ebx
$LN462@odd4cone_p:
	mov	edi, DWORD PTR _web+460
$LN410@odd4cone_p:

; 2711 :         set_prev_edge(fe,new_fe);

	cmp	DWORD PTR tv3565[ebp], 0
	je	SHORT $LN313@odd4cone_p
	cmp	DWORD PTR tv3545[ebp], 0
	je	SHORT $LN311@odd4cone_p
	mov	eax, DWORD PTR [ecx+edi]
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	mov	DWORD PTR [eax+32], edx
	jmp	SHORT $LN310@odd4cone_p
$LN311@odd4cone_p:
	mov	ecx, DWORD PTR [ecx+edi]
	mov	DWORD PTR [ecx+28], esi
$LN310@odd4cone_p:
	mov	eax, DWORD PTR _global_timestamp
	mov	edi, DWORD PTR _web+460
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN313@odd4cone_p:

; 2712 :         e_fe = get_edge_fe(newe);

	mov	edx, DWORD PTR _newe$90628[ebp]
	push	edx
	call	_get_edge_fe
	add	esp, 4
	mov	DWORD PTR _e_fe$90658[ebp], eax

; 2713 :         if ( valid_id(e_fe) )

	test	eax, 268435456				; 10000000H
	je	$LN2@odd4cone_p

; 2714 :         { fe_prev = get_prev_facet(e_fe);

	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR tv3876[ebp], ecx
	mov	edx, eax
	je	SHORT $LN316@odd4cone_p
	and	edx, 134217727				; 07ffffffH
	add	edx, edx
	add	edx, edx
	mov	ecx, DWORD PTR [edx+edi]
	mov	ecx, DWORD PTR [ecx+40]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN315@odd4cone_p
$LN316@odd4cone_p:
	and	edx, 134217727				; 07ffffffH
	add	edx, edx
	add	edx, edx
	mov	ecx, DWORD PTR [edx+edi]
	mov	ecx, DWORD PTR [ecx+36]
$LN315@odd4cone_p:

; 2715 :           set_next_facet(fe_prev,new_fe);

	test	ecx, 268435456				; 10000000H
	je	SHORT $LN401@odd4cone_p
	mov	ebx, ecx
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN320@odd4cone_p
	mov	eax, esi
	xor	eax, 134217728				; 08000000H
	and	ebx, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edi+ebx*4]
	mov	DWORD PTR [edi+36], eax
	mov	eax, DWORD PTR _e_fe$90658[ebp]
	jmp	SHORT $LN463@odd4cone_p
$LN320@odd4cone_p:
	and	ebx, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edi+ebx*4]
	mov	DWORD PTR [edi+40], esi
$LN463@odd4cone_p:
	mov	edi, DWORD PTR _web+460
$LN401@odd4cone_p:

; 2716 :           set_prev_facet(new_fe,fe_prev);

	cmp	DWORD PTR tv3838[ebp], 0
	je	SHORT $LN396@odd4cone_p
	mov	ebx, esi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN325@odd4cone_p
	xor	ecx, 134217728				; 08000000H
	and	ebx, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edi+ebx*4]
	mov	DWORD PTR [edi+40], ecx
	jmp	SHORT $LN324@odd4cone_p
$LN325@odd4cone_p:
	and	ebx, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edi+ebx*4]
	mov	DWORD PTR [edi+36], ecx
$LN324@odd4cone_p:
	mov	ecx, DWORD PTR _global_timestamp
	mov	edi, DWORD PTR _web+460
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN396@odd4cone_p:

; 2717 :           set_prev_facet(e_fe,new_fe);

	cmp	DWORD PTR tv3876[ebp], 0
	je	SHORT $LN330@odd4cone_p
	mov	edx, DWORD PTR [edx+edi]
	mov	ecx, esi
	xor	ecx, 134217728				; 08000000H
	mov	DWORD PTR [edx+40], ecx
	jmp	SHORT $LN329@odd4cone_p
$LN330@odd4cone_p:
	mov	ecx, DWORD PTR [edx+edi]
	mov	DWORD PTR [ecx+36], esi
$LN329@odd4cone_p:
	mov	ecx, DWORD PTR _global_timestamp

; 2718 :           set_next_facet(new_fe,e_fe);

	mov	ebx, DWORD PTR _fe$[ebp]
	inc	ecx
	cmp	DWORD PTR tv3838[ebp], 0
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
	je	$LN350@odd4cone_p
	test	esi, 134217728				; 08000000H
	je	SHORT $LN335@odd4cone_p
	mov	ecx, DWORD PTR _web+460
	xor	eax, 134217728				; 08000000H
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+36], eax
	jmp	$LN350@odd4cone_p
$LN335@odd4cone_p:
	mov	edx, DWORD PTR _web+460
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+40], eax

; 2719 :         }
; 2720 :         else

	jmp	$LN350@odd4cone_p
$LN2@odd4cone_p:

; 2721 :         { set_edge_fe(newe,new_fe);

	mov	ecx, DWORD PTR _newe$90628[ebp]
	mov	eax, esi
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN339@odd4cone_p
	xor	eax, 134217728				; 08000000H
$LN339@odd4cone_p:
	mov	edx, DWORD PTR _web+124
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax

; 2722 :           set_next_facet(new_fe,new_fe);

	mov	eax, DWORD PTR tv3838[ebp]
	test	eax, eax
	je	$LN350@odd4cone_p
	mov	edx, esi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN343@odd4cone_p
	mov	edi, DWORD PTR _web+460
	xor	edx, 134217728				; 08000000H
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR [ecx+36], edx
	jmp	SHORT $LN342@odd4cone_p
$LN343@odd4cone_p:
	mov	ecx, DWORD PTR _web+460
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+40], esi
$LN342@odd4cone_p:

; 2723 :           set_prev_facet(new_fe,new_fe);

	test	eax, eax
	je	SHORT $LN350@odd4cone_p
	test	esi, 134217728				; 08000000H
	je	SHORT $LN348@odd4cone_p
	mov	edx, DWORD PTR _web+460
	mov	eax, esi
	xor	eax, 134217728				; 08000000H
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+40], eax
	jmp	SHORT $LN347@odd4cone_p
$LN348@odd4cone_p:
	mov	eax, DWORD PTR _web+460
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [ecx+36], esi
$LN347@odd4cone_p:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN350@odd4cone_p:

; 2724 :         }
; 2725 :         cross_cut(new_fe,fe);

	push	ebx
	push	esi
	call	_cross_cut
	mov	eax, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR tv5617[ebp]
	inc	eax
	add	esp, 8
	mov	DWORD PTR _k$[ebp], eax
	cmp	eax, DWORD PTR [edx]
	jl	$LL12@odd4cone_p
$LN10@odd4cone_p:

; 2726 :       } 
; 2727 :       flag = 1;

	mov	ecx, DWORD PTR _cinfo$GSCopy$[ebp]
	mov	DWORD PTR _flag$[ebp], 1
	xor	edx, edx
$LN15@odd4cone_p:

; 2681 : 
; 2682 :     for ( i = 0, flag = 0 ; i < cinfo->cells ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	add	DWORD PTR tv5617[ebp], 32		; 00000020H
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR [ecx]
	jl	$LL16@odd4cone_p
	mov	esi, DWORD PTR _newe$90628[ebp]
$LN14@odd4cone_p:

; 2728 :     }
; 2729 :     fe_reorder(newe);

	push	esi
	call	_fe_reorder

; 2730 :     pop_one_edge(newe);

	push	esi
	call	_pop_one_edge
	add	esp, 8
$LN21@odd4cone_p:

; 2731 :   }
; 2732 :   
; 2733 :   return 1;
; 2734 : 
; 2735 : } /* end odd4cone_pop() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	mov	eax, 1
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_odd4cone_pop ENDP
_TEXT	ENDS
PUBLIC	_edgepop_film
; Function compile flags: /Ogtp
;	COMDAT _edgepop_film
_TEXT	SEGMENT
_edgepop_film PROC					; COMDAT

; 65   :   edge_id e_id;
; 66   :   int popped = 0;
; 67   : 
; 68   :   /* Loop through all edges, popping as you go.  New edges created
; 69   :      during popping will be scanned to see if they are still
; 70   :      pop-worthy.
; 71   :    */
; 72   : 
; 73   :   e_id = NULLEDGE;
; 74   :   FOR_ALL_EDGES(e_id)

	mov	ecx, DWORD PTR _web+160
	push	ebx
	xor	ebx, ebx
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN10@edgepop_fi
	push	esi
	push	edi
	mov	edi, DWORD PTR _web+124
	npad	7
$LL5@edgepop_fi:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+edi]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN4@edgepop_fi

; 75   :   { popped += pop_one_edge(e_id);

	push	ecx
	call	_pop_one_edge
	mov	edi, DWORD PTR _web+124
	add	esp, 4
	add	ebx, eax
$LN4@edgepop_fi:

; 65   :   edge_id e_id;
; 66   :   int popped = 0;
; 67   : 
; 68   :   /* Loop through all edges, popping as you go.  New edges created
; 69   :      during popping will be scanned to see if they are still
; 70   :      pop-worthy.
; 71   :    */
; 72   : 
; 73   :   e_id = NULLEDGE;
; 74   :   FOR_ALL_EDGES(e_id)

	mov	eax, DWORD PTR [esi+edi]
	mov	ecx, DWORD PTR [eax]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LL5@edgepop_fi
	pop	edi
	pop	esi
$LN10@edgepop_fi:

; 76   :   }
; 77   : 
; 78   :   return popped;

	mov	eax, ebx
	pop	ebx

; 79   : } // end edgepop_film()

	ret	0
_edgepop_film ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EI@NBCHKJAK@Internal?5error?3?5Not?5enough?5struc@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_find_vertex_to_pop
EXTRN	_temp_free:PROC
EXTRN	_qsort:PROC
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_0EI@NBCHKJAK@Internal?5error?3?5Not?5enough?5struc@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0EI@NBCHKJAK@Internal?5error?3?5Not?5enough?5struc@ DB 'Internal er'
	DB	'ror: Not enough structures allocated for vertex-facet list.', 0aH
	DB	00H						; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\popfilm.c
CONST	ENDS
;	COMDAT _find_vertex_to_pop
_TEXT	SEGMENT
_maxcount$ = -16840					; size = 4
tv648 = -16836						; size = 4
tv549 = -16836						; size = 4
_vflist$ = -16832					; size = 4
_spot$ = -16828						; size = 4
_fe$ = -16828						; size = 4
_popcount$ = -16824					; size = 4
_cinfo$ = -16820					; size = 16816
__$ArrayPad$ = -4					; size = 4
_find_vertex_to_pop PROC				; COMDAT

; 1184 : {

	push	ebp
	mov	ebp, esp
	mov	eax, 16840				; 000041c8H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1185 :   struct verfacet *vflist;
; 1186 :   facetedge_id fe;
; 1187 :   facet_id f_id;
; 1188 :   int count,maxcount;
; 1189 :   int spot,dups,conetype;
; 1190 :   int popcount = 0;  
; 1191 :   struct cone_info cinfo;
; 1192 : 
; 1193 :   /* Allocate list, with room for each facet thrice */
; 1194 :   maxcount = 3*web.skel[FACET].count;

	mov	eax, DWORD PTR _web+288
	push	ebx
	push	esi
	push	edi

; 1195 :   vflist = (struct verfacet *)temp_calloc(sizeof(struct verfacet),maxcount);  

	push	1195					; 000004abH
	lea	eax, DWORD PTR [eax+eax*2]
	push	OFFSET ??_C@_09ODBKHHLC@POPFILM?4C?$AA@
	push	eax
	xor	esi, esi
	push	8
	mov	DWORD PTR _popcount$[ebp], esi
	mov	DWORD PTR _maxcount$[ebp], eax
	call	_kb_temp_calloc

; 1196 : 
; 1197 :   /* create unsorted list */
; 1198 :   count = 0;
; 1199 :   FOR_ALL_FACETS(f_id)

	mov	edx, DWORD PTR _web+272
	mov	ecx, edx
	shr	ecx, 28					; 0000001cH
	add	esp, 16					; 00000010H
	and	ecx, 1
	mov	DWORD PTR _vflist$[ebp], eax
	je	$LN20@find_verte
	npad	1
$LL65@find_verte:
	mov	eax, DWORD PTR _web+236
	mov	edi, edx
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	eax, DWORD PTR [edi+eax]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	ebx, ebx
	or	eax, ebx
	mov	DWORD PTR tv549[ebp], edi
	je	$LN21@find_verte

; 1200 :   {
; 1201 :     vflist[count].f_id = f_id;

	mov	eax, DWORD PTR _vflist$[ebp]
	mov	DWORD PTR [eax+esi*8+4], edx

; 1202 :     fe = get_facet_fe(f_id);

	test	ecx, ecx
	jne	SHORT $LN26@find_verte
	xor	eax, eax
	jmp	SHORT $LN25@find_verte
$LN26@find_verte:
	mov	ecx, DWORD PTR _web+236
	mov	eax, DWORD PTR [edi+ecx]
	mov	eax, DWORD PTR [eax+28]
	test	edx, 134217728				; 08000000H
	je	SHORT $LN25@find_verte
	xor	eax, 134217728				; 08000000H
$LN25@find_verte:

; 1203 :     vflist[count].v_id = get_fe_tailv(fe);

	mov	edi, DWORD PTR _web+460
	mov	ebx, DWORD PTR _dymem
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	edi, DWORD PTR [ecx+edi]
	mov	DWORD PTR _fe$[ebp], eax
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edi+20]
	mov	edi, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN32@find_verte
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	edi, DWORD PTR _web+216
	add	eax, DWORD PTR [edi+ebx+304]
	mov	edi, DWORD PTR _web+636
	mov	eax, DWORD PTR [eax+edi*4]
	jmp	SHORT $LN31@find_verte
$LN32@find_verte:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	edi, DWORD PTR _web+216
	mov	edi, DWORD PTR [edi+ebx+304]
	mov	eax, DWORD PTR [eax+edi]
$LN31@find_verte:

; 1204 :     count++;
; 1205 :     fe = get_next_edge(fe);    

	test	DWORD PTR _fe$[ebp], 134217728		; 08000000H
	mov	edi, DWORD PTR _vflist$[ebp]
	mov	DWORD PTR [edi+esi*8], eax
	mov	eax, DWORD PTR _web+460
	mov	ecx, DWORD PTR [ecx+eax]
	je	SHORT $LN36@find_verte
	mov	eax, DWORD PTR [ecx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN69@find_verte
$LN36@find_verte:
	mov	eax, DWORD PTR [ecx+32]
$LN69@find_verte:

; 1206 :     vflist[count].f_id = f_id;
; 1207 :     vflist[count].v_id = get_fe_tailv(fe);

	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	DWORD PTR [edi+esi*8+12], edx
	mov	edi, DWORD PTR _web+460
	mov	ebx, DWORD PTR _dymem
	add	ecx, ecx
	add	ecx, ecx
	mov	edi, DWORD PTR [ecx+edi]
	mov	DWORD PTR _fe$[ebp], eax
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edi+20]
	mov	edi, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN42@find_verte
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	edi, DWORD PTR _web+216
	add	eax, DWORD PTR [edi+ebx+304]
	mov	edi, DWORD PTR _web+636
	mov	eax, DWORD PTR [eax+edi*4]
	jmp	SHORT $LN41@find_verte
$LN42@find_verte:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	edi, DWORD PTR _web+216
	mov	edi, DWORD PTR [edi+ebx+304]
	mov	eax, DWORD PTR [eax+edi]
$LN41@find_verte:

; 1208 :     count++;
; 1209 :     fe = get_next_edge(fe);    

	test	DWORD PTR _fe$[ebp], 134217728		; 08000000H
	mov	edi, DWORD PTR _vflist$[ebp]
	mov	DWORD PTR [edi+esi*8+8], eax
	mov	eax, DWORD PTR _web+460
	mov	ecx, DWORD PTR [ecx+eax]
	je	SHORT $LN46@find_verte
	mov	eax, DWORD PTR [ecx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN45@find_verte
$LN46@find_verte:
	mov	eax, DWORD PTR [ecx+32]
$LN45@find_verte:

; 1210 :     vflist[count].f_id = f_id;

	mov	DWORD PTR [edi+esi*8+20], edx

; 1211 :     vflist[count].v_id = get_fe_tailv(fe);

	mov	ecx, DWORD PTR _web+460
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _web+124
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN52@find_verte
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN51@find_verte
$LN52@find_verte:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]
$LN51@find_verte:
	mov	DWORD PTR [edi+esi*8+16], eax

; 1212 :     count++;

	add	esi, 3

; 1213 :     if ( count > maxcount )

	cmp	esi, DWORD PTR _maxcount$[ebp]
	jg	$LN58@find_verte
	mov	edi, DWORD PTR tv549[ebp]
$LN21@find_verte:

; 1196 : 
; 1197 :   /* create unsorted list */
; 1198 :   count = 0;
; 1199 :   FOR_ALL_FACETS(f_id)

	mov	ecx, DWORD PTR _web+236
	mov	edx, DWORD PTR [edi+ecx]
	mov	edx, DWORD PTR [edx]
	mov	ecx, edx
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	jne	$LL65@find_verte
$LN20@find_verte:

; 1219 :     }
; 1220 :   } 
; 1221 : 
; 1222 :   /* sort by vertex order */
; 1223 :   qsort((char *)vflist,count,sizeof(struct verfacet),FCAST vfcomp);

	mov	eax, DWORD PTR _vflist$[ebp]
	push	OFFSET _vfcomp
	push	8
	push	esi
	push	eax
	call	_qsort

; 1224 : 
; 1225 :   /* go through list and pop appropriate vertices */
; 1226 :   for ( spot = 0 ; spot < count ; spot += dups )

	xor	edx, edx
	add	esp, 16					; 00000010H
	mov	DWORD PTR _spot$[ebp], edx
	test	esi, esi
	jle	$LN68@find_verte
	npad	2
$LL66@find_verte:

; 1227 :   {
; 1228 :     vertex_id v_id = vflist[spot].v_id;

	mov	ecx, DWORD PTR _vflist$[ebp]
	mov	ebx, DWORD PTR [ecx+edx*8]
	lea	ecx, DWORD PTR [ecx+edx*8]

; 1229 : 
; 1230 :     /* find how many successive duplicates of current vertex */
; 1231 :     for ( dups = 1 ; spot+dups < count ; dups++ )

	lea	eax, DWORD PTR [edx+1]
	mov	DWORD PTR tv648[ebp], ecx
	mov	edi, 1
	cmp	eax, esi
	jge	SHORT $LN59@find_verte

; 1227 :   {
; 1228 :     vertex_id v_id = vflist[spot].v_id;

	add	ecx, 8
$LL13@find_verte:

; 1232 :       if ( !equal_id(vflist[spot+dups].v_id,v_id) ) break;

	cmp	DWORD PTR [ecx], ebx
	jne	SHORT $LN59@find_verte

; 1229 : 
; 1230 :     /* find how many successive duplicates of current vertex */
; 1231 :     for ( dups = 1 ; spot+dups < count ; dups++ )

	inc	eax
	inc	edi
	add	ecx, 8
	cmp	eax, esi
	jl	SHORT $LL13@find_verte
$LN59@find_verte:

; 1233 : 
; 1234 :     if ( get_vattr(v_id) & FIXED ) continue;

	mov	ecx, DWORD PTR _web+12
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 64					; 00000040H
	xor	ecx, ecx
	or	eax, ecx
	jne	$LN15@find_verte

; 1235 : 
; 1236 :     conetype = cone_analyze(vflist + spot,dups,&cinfo);

	mov	eax, DWORD PTR tv648[ebp]
	lea	edx, DWORD PTR _cinfo$[ebp]
	push	edx
	push	edi
	push	eax
	call	_cone_analyze
	add	esp, 12					; 0000000cH

; 1237 :     if ( conetype == KRAYNIKCONE ) 

	cmp	eax, 7
	jne	SHORT $LN8@find_verte

; 1238 :       popcount += kraynik_pop(v_id,dups,&cinfo);

	lea	ecx, DWORD PTR _cinfo$[ebp]
	push	ecx
	push	edi
	push	ebx
	call	_kraynik_pop
	jmp	SHORT $LN70@find_verte
$LN58@find_verte:

; 1214 :     {
; 1215 :       kb_error(1300,
; 1216 :    "Internal error: Not enough structures allocated for vertex-facet list.\n",
; 1217 :             RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0EI@NBCHKJAK@Internal?5error?3?5Not?5enough?5struc@
	push	1300					; 00000514H
	call	_kb_error
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi

; 1218 :       return 0;

	xor	eax, eax
	pop	ebx

; 1250 :   return popcount;
; 1251 : } // end find_vertex_to_pop()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@find_verte:

; 1239 :     else if ( conetype == CUBECONE ) 

	cmp	eax, 8
	jne	SHORT $LN6@find_verte

; 1240 :       popcount += cubecone_pop(v_id,dups,&cinfo);

	lea	edx, DWORD PTR _cinfo$[ebp]
	push	edx
	push	edi
	push	ebx
	call	_cubecone_pop
	jmp	SHORT $LN70@find_verte
$LN6@find_verte:

; 1241 :     else if ( conetype == ODD4CONE )

	cmp	eax, 9
	jne	SHORT $LN4@find_verte

; 1242 :       popcount += odd4cone_pop(v_id,dups,&cinfo);

	lea	eax, DWORD PTR _cinfo$[ebp]
	push	eax
	push	edi
	push	ebx
	call	_odd4cone_pop
	jmp	SHORT $LN70@find_verte
$LN4@find_verte:

; 1243 :     else if ( conetype == OTHERCONE )

	test	eax, eax
	jne	SHORT $LN67@find_verte

; 1244 :       popcount += pop_vertex(v_id,dups,&cinfo);

	lea	ecx, DWORD PTR _cinfo$[ebp]
	push	ecx
	push	edi
	push	ebx
	call	_pop_vertex
$LN70@find_verte:
	add	esp, 12					; 0000000cH
	add	DWORD PTR _popcount$[ebp], eax
$LN67@find_verte:

; 1245 :     temp_free((char *)(cinfo.felist));

	mov	edx, DWORD PTR _cinfo$[ebp+16808]
	push	edx
	call	_temp_free
	add	esp, 4

; 1246 :     if ( popcount ) break;  /* one vertex at a time */

	cmp	DWORD PTR _popcount$[ebp], 0
	jne	SHORT $LN68@find_verte
	mov	edx, DWORD PTR _spot$[ebp]
$LN15@find_verte:

; 1224 : 
; 1225 :   /* go through list and pop appropriate vertices */
; 1226 :   for ( spot = 0 ; spot < count ; spot += dups )

	add	edx, edi
	mov	DWORD PTR _spot$[ebp], edx
	cmp	edx, esi
	jl	$LL66@find_verte
$LN68@find_verte:

; 1247 :   }
; 1248 :              
; 1249 :   temp_free((char *)vflist);

	mov	eax, DWORD PTR _vflist$[ebp]
	push	eax
	call	_temp_free

; 1250 :   return popcount;
; 1251 : } // end find_vertex_to_pop()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, DWORD PTR _popcount$[ebp]
	add	esp, 4
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_find_vertex_to_pop ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@BIGNABKH@Dissolving?5bare?5vertex?5?$CFs?6?$AA@ ; `string'
PUBLIC	_v_id$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_pop_given_vertex
EXTRN	_get_next_vertex_facet:PROC
EXTRN	_pop_string_vertex:PROC
;	COMDAT ??_C@_0BL@BIGNABKH@Dissolving?5bare?5vertex?5?$CFs?6?$AA@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0BL@BIGNABKH@Dissolving?5bare?5vertex?5?$CFs?6?$AA@ DB 'Dissolving '
	DB	'bare vertex %s', 0aH, 00H			; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\popfilm.c
CONST	ENDS
;	COMDAT _pop_given_vertex
_TEXT	SEGMENT
_maxcount$ = -16852					; size = 4
_start_fe$ = -16848					; size = 4
tv576 = -16844						; size = 4
_loop_fe$ = -16840					; size = 4
_popcount$ = -16836					; size = 4
_f_id$ = -16832						; size = 4
_vflist$ = -16828					; size = 4
_v_id$GSCopy$ = -16824					; size = 4
_cinfo$ = -16820					; size = 16816
__$ArrayPad$ = -4					; size = 4
_v_id$ = 8						; size = 4
_pop_given_vertex PROC					; COMDAT

; 1262 : {

	push	ebp
	mov	ebp, esp
	mov	eax, 16852				; 000041d4H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1263 :   struct verfacet *vflist;
; 1264 :   facetedge_id fe,start_fe,loop_fe;
; 1265 :   facet_id f_id;
; 1266 :   int count,maxcount;
; 1267 :   int spot,dups,conetype;
; 1268 :   int popcount = 0;  
; 1269 :   int con_hits;
; 1270 :   struct cone_info cinfo;
; 1271 : 
; 1272 :   if ( !valid_id(get_vertex_edge(v_id)) )

	mov	eax, DWORD PTR _web+12
	push	esi
	push	edi
	mov	edi, DWORD PTR _v_id$[ebp]
	mov	ecx, edi
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ecx*4]
	xor	esi, esi
	test	DWORD PTR [eax+28], 268435456		; 10000000H
	mov	DWORD PTR _v_id$GSCopy$[ebp], edi
	mov	DWORD PTR _popcount$[ebp], esi
	mov	DWORD PTR tv576[ebp], ecx
	jne	SHORT $LN25@pop_given_

; 1273 :   { if ( !(get_vattr(v_id) & FIXED) )

	mov	eax, DWORD PTR [eax+8]
	and	eax, 64					; 00000040H
	xor	edx, edx
	or	eax, edx
	jne	SHORT $LN25@pop_given_

; 1274 :     { if ( verbose_flag )

	cmp	DWORD PTR _verbose_flag, esi
	je	SHORT $LN24@pop_given_

; 1275 :       { sprintf(msg,"Dissolving bare vertex %s\n",ELNAME(v_id));

	test	edi, 268435456				; 10000000H
	je	SHORT $LN29@pop_given_
	inc	ecx
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN30@pop_given_
$LN29@pop_given_:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN30@pop_given_:
	mov	ecx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0BL@BIGNABKH@Dissolving?5bare?5vertex?5?$CFs?6?$AA@
	push	ecx
	call	_sprintf

; 1276 :         outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 16					; 00000010H
$LN24@pop_given_:

; 1277 :       }
; 1278 :       free_element(v_id); 

	push	edi
	call	_free_element
	add	esp, 4
	pop	edi

; 1279 :       return 1;

	mov	eax, 1
	pop	esi

; 1352 :   return popcount;
; 1353 : } // end pop_given_vertex()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN25@pop_given_:

; 1280 :     }
; 1281 :   }
; 1282 :   
; 1283 :   if ( web.representation == STRING ) return pop_string_vertex(v_id);

	cmp	DWORD PTR _web+624, 1
	push	edi
	jne	SHORT $LN23@pop_given_
	call	_pop_string_vertex
	add	esp, 4
	pop	edi
	pop	esi

; 1352 :   return popcount;
; 1353 : } // end pop_given_vertex()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN23@pop_given_:

; 1284 : 
; 1285 :   con_hits = v_hit_constraint_count(v_id);

	call	_v_hit_constraint_count
	add	esp, 4

; 1286 :   if ( con_hits ) 

	test	eax, eax
	je	SHORT $LN22@pop_given_

; 1287 :     return pop_constrained_vertex(v_id);

	push	edi
	call	_pop_constrained_vertex
	add	esp, 4
	pop	edi
	pop	esi

; 1352 :   return popcount;
; 1353 : } // end pop_given_vertex()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN22@pop_given_:

; 1288 :    
; 1289 : 
; 1290 :   /* Allocate list, with room for each facet thrice */
; 1291 :   maxcount = 3*web.skel[FACET].count;

	mov	eax, DWORD PTR _web+288
	push	ebx

; 1292 :   vflist = (struct verfacet *)temp_calloc(sizeof(struct verfacet),maxcount);  

	push	1292					; 0000050cH
	lea	eax, DWORD PTR [eax+eax*2]
	push	OFFSET ??_C@_09ODBKHHLC@POPFILM?4C?$AA@
	push	eax
	push	8
	mov	DWORD PTR _maxcount$[ebp], eax
	call	_kb_temp_calloc
	mov	ebx, eax

; 1293 : 
; 1294 :   /* create unsorted list */
; 1295 :   count = 0;
; 1296 :   start_fe = get_vertex_first_facet(v_id);

	push	edi
	mov	DWORD PTR _vflist$[ebp], ebx
	call	_get_vertex_first_facet
	add	esp, 20					; 00000014H
	mov	DWORD PTR _start_fe$[ebp], eax

; 1297 :   loop_fe = start_fe;

	mov	DWORD PTR _loop_fe$[ebp], eax

; 1298 :   if ( !valid_id(loop_fe) )

	test	eax, 268435456				; 10000000H
	jne	SHORT $LN32@pop_given_

; 1299 :     return 0;

	pop	ebx
	pop	edi
	xor	eax, eax
	pop	esi

; 1352 :   return popcount;
; 1353 : } // end pop_given_vertex()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LL20@pop_given_:

; 1300 :   do
; 1301 :   { f_id = get_fe_facet(loop_fe);

	test	eax, 268435456				; 10000000H
	jne	SHORT $LN32@pop_given_
	mov	eax, DWORD PTR _NULLFACET
	mov	DWORD PTR _f_id$[ebp], eax
	jmp	SHORT $LN33@pop_given_
$LN32@pop_given_:
	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [ecx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN31@pop_given_
	xor	ecx, 134217728				; 08000000H
$LN31@pop_given_:
	mov	eax, ecx
	mov	DWORD PTR _f_id$[ebp], ecx
$LN33@pop_given_:

; 1302 :     vflist[count].f_id = f_id;

	mov	DWORD PTR [ebx+esi*8+4], eax

; 1303 :     fe = get_facet_fe(f_id);

	test	eax, 268435456				; 10000000H
	jne	SHORT $LN36@pop_given_
	xor	edx, edx
	jmp	SHORT $LN35@pop_given_
$LN36@pop_given_:
	mov	ecx, DWORD PTR _web+236
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	edx, DWORD PTR [edx+28]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN35@pop_given_
	xor	edx, 134217728				; 08000000H
$LN35@pop_given_:

; 1304 :     vflist[count].v_id = get_fe_tailv(fe);

	mov	ecx, DWORD PTR _web+460
	mov	ebx, DWORD PTR _dymem
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	edi, DWORD PTR [eax+ecx]
	mov	ecx, edx
	and	ecx, 134217728				; 08000000H
	xor	ecx, DWORD PTR [edi+20]
	mov	edi, DWORD PTR _web+124
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN42@pop_given_
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	edi, DWORD PTR _web+216
	add	ecx, DWORD PTR [edi+ebx+304]
	mov	edi, DWORD PTR _web+636
	mov	ecx, DWORD PTR [ecx+edi*4]
	jmp	SHORT $LN41@pop_given_
$LN42@pop_given_:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	edi, DWORD PTR _web+216
	mov	edi, DWORD PTR [edi+ebx+304]
	mov	ecx, DWORD PTR [ecx+edi]
$LN41@pop_given_:
	mov	ebx, DWORD PTR _vflist$[ebp]
	mov	DWORD PTR [ebx+esi*8], ecx

; 1305 :     count++;
; 1306 :     fe = get_next_edge(fe);    

	test	edx, 134217728				; 08000000H
	je	SHORT $LN46@pop_given_
	mov	edx, DWORD PTR _web+460
	mov	eax, DWORD PTR [eax+edx]
	mov	edi, DWORD PTR [eax+28]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN45@pop_given_
$LN46@pop_given_:
	mov	ecx, DWORD PTR _web+460
	mov	edx, DWORD PTR [eax+ecx]
	mov	edi, DWORD PTR [edx+32]
$LN45@pop_given_:

; 1307 :     vflist[count].f_id = f_id;

	mov	eax, DWORD PTR _f_id$[ebp]

; 1308 :     vflist[count].v_id = get_fe_tailv(fe);

	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	DWORD PTR [ebx+esi*8+12], eax
	mov	ecx, DWORD PTR _web+460
	mov	ebx, DWORD PTR _dymem
	add	edx, edx
	add	edx, edx
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, edi
	and	ecx, 134217728				; 08000000H
	xor	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _web+124
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN52@pop_given_
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _web+216
	add	ecx, DWORD PTR [eax+ebx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN51@pop_given_
$LN52@pop_given_:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _web+216
	mov	eax, DWORD PTR [eax+ebx+304]
	mov	eax, DWORD PTR [ecx+eax]
$LN51@pop_given_:
	mov	ebx, DWORD PTR _vflist$[ebp]
	mov	DWORD PTR [ebx+esi*8+8], eax

; 1309 :     count++;
; 1310 :     fe = get_next_edge(fe);    

	test	edi, 134217728				; 08000000H
	je	SHORT $LN56@pop_given_
	mov	ecx, DWORD PTR _web+460
	mov	edx, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR [edx+28]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN55@pop_given_
$LN56@pop_given_:
	mov	eax, DWORD PTR _web+460
	mov	ecx, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [ecx+32]
$LN55@pop_given_:

; 1311 :     vflist[count].f_id = f_id;

	mov	edx, DWORD PTR _f_id$[ebp]
	mov	DWORD PTR [ebx+esi*8+20], edx

; 1312 :     vflist[count].v_id = get_fe_tailv(fe);

	mov	edx, DWORD PTR _web+460
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+124
	and	ecx, 134217728				; 08000000H
	xor	ecx, DWORD PTR [eax+20]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN62@pop_given_
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _web+216
	mov	edx, DWORD PTR _dymem
	add	eax, DWORD PTR [ecx+edx+304]
	mov	ecx, DWORD PTR _web+636
	mov	eax, DWORD PTR [eax+ecx*4]
	jmp	SHORT $LN61@pop_given_
$LN62@pop_given_:
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _web+216
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edx+304]
	mov	eax, DWORD PTR [eax+ecx]
$LN61@pop_given_:
	mov	DWORD PTR [ebx+esi*8+16], eax

; 1313 :     count++;

	add	esi, 3

; 1314 :     if ( count > maxcount )

	cmp	esi, DWORD PTR _maxcount$[ebp]
	jg	$LN68@pop_given_

; 1320 :     }
; 1321 :     loop_fe = get_next_vertex_facet(v_id,loop_fe);

	mov	edx, DWORD PTR _loop_fe$[ebp]
	mov	eax, DWORD PTR _v_id$GSCopy$[ebp]
	push	edx
	push	eax
	call	_get_next_vertex_facet

; 1322 :   } while ( !equal_element(loop_fe,start_fe));

	mov	edx, DWORD PTR _start_fe$[ebp]
	mov	ecx, eax
	or	ecx, 134217728				; 08000000H
	or	edx, 134217728				; 08000000H
	add	esp, 8
	mov	DWORD PTR _loop_fe$[ebp], eax
	cmp	ecx, edx
	jne	$LL20@pop_given_

; 1323 : 
; 1324 :   /* sort by vertex order */
; 1325 :   qsort((char *)vflist,count,sizeof(struct verfacet),FCAST vfcomp);

	push	OFFSET _vfcomp
	push	8
	push	esi
	push	ebx
	call	_qsort
	add	esp, 16					; 00000010H

; 1326 : 
; 1327 :   /* go through list and pop appropriate vertices */
; 1328 :   for ( spot = 0 ; spot < count ; spot += dups )

	xor	edx, edx
	test	esi, esi
	jle	$LN77@pop_given_
$LL80@pop_given_:

; 1329 :   {
; 1330 :     if ( v_id != vflist[spot].v_id ) { dups = 1; continue; }

	mov	eax, DWORD PTR _v_id$GSCopy$[ebp]
	mov	edi, 1
	cmp	eax, DWORD PTR [ebx+edx*8]
	jne	SHORT $LN15@pop_given_

; 1331 : 
; 1332 :     /* find how many successive duplicates of current vertex */
; 1333 :     for ( dups = 1 ; spot+dups < count ; dups++ )

	lea	eax, DWORD PTR [edx+1]
	cmp	eax, esi
	jge	SHORT $LN70@pop_given_
	lea	ecx, DWORD PTR [ebx+edx*8+8]
	npad	5
$LL12@pop_given_:

; 1334 :       if ( !equal_id(vflist[spot+dups].v_id,v_id) ) break;

	mov	ebx, DWORD PTR _v_id$GSCopy$[ebp]
	cmp	DWORD PTR [ecx], ebx
	jne	SHORT $LN79@pop_given_

; 1331 : 
; 1332 :     /* find how many successive duplicates of current vertex */
; 1333 :     for ( dups = 1 ; spot+dups < count ; dups++ )

	inc	eax
	inc	edi
	add	ecx, 8
	cmp	eax, esi
	jl	SHORT $LL12@pop_given_
$LN79@pop_given_:
	mov	ebx, DWORD PTR _vflist$[ebp]
$LN70@pop_given_:

; 1335 : 
; 1336 :     if ( get_vattr(v_id) & FIXED ) continue;

	mov	ecx, DWORD PTR tv576[ebp]
	mov	eax, DWORD PTR _web+12
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 64					; 00000040H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN8@pop_given_
$LN15@pop_given_:

; 1326 : 
; 1327 :   /* go through list and pop appropriate vertices */
; 1328 :   for ( spot = 0 ; spot < count ; spot += dups )

	add	edx, edi
	cmp	edx, esi
	jl	SHORT $LL80@pop_given_

; 1334 :       if ( !equal_id(vflist[spot+dups].v_id,v_id) ) break;

	mov	esi, DWORD PTR _popcount$[ebp]
	jmp	$LN14@pop_given_
$LN68@pop_given_:

; 1315 :     {
; 1316 :       kb_error(2526,
; 1317 :    "Internal error: Not enough structures allocated for vertex-facet list.\n",
; 1318 :             RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0EI@NBCHKJAK@Internal?5error?3?5Not?5enough?5struc@
	push	2526					; 000009deH
	call	_kb_error
	add	esp, 12					; 0000000cH
	pop	ebx
	pop	edi

; 1319 :       return 0;

	xor	eax, eax
	pop	esi

; 1352 :   return popcount;
; 1353 : } // end pop_given_vertex()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@pop_given_:

; 1337 : 
; 1338 :     conetype = cone_analyze(vflist + spot,dups,&cinfo);

	lea	ecx, DWORD PTR _cinfo$[ebp]
	push	ecx
	lea	edx, DWORD PTR [ebx+edx*8]
	push	edi
	push	edx
	call	_cone_analyze
	add	esp, 12					; 0000000cH

; 1339 :     if ( conetype == KRAYNIKCONE ) 

	cmp	eax, 7
	jne	SHORT $LN7@pop_given_

; 1340 :       popcount += kraynik_pop(v_id,dups,&cinfo);

	mov	ecx, DWORD PTR _v_id$GSCopy$[ebp]
	lea	eax, DWORD PTR _cinfo$[ebp]
	push	eax
	push	edi
	push	ecx
	call	_kraynik_pop

; 1347 :     temp_free((char *)(cinfo.felist));

	mov	edx, DWORD PTR _cinfo$[ebp+16808]
	add	esp, 12					; 0000000cH
	push	edx
	mov	esi, eax
	call	_temp_free
	add	esp, 4
	jmp	$LN14@pop_given_
$LN7@pop_given_:

; 1341 :     else if ( conetype == CUBECONE ) 

	cmp	eax, 8
	jne	SHORT $LN5@pop_given_

; 1342 :       popcount += cubecone_pop(v_id,dups,&cinfo);

	mov	eax, DWORD PTR _v_id$GSCopy$[ebp]
	lea	edx, DWORD PTR _cinfo$[ebp]
	push	edx
	push	edi
	push	eax
	call	_cubecone_pop

; 1347 :     temp_free((char *)(cinfo.felist));

	mov	edx, DWORD PTR _cinfo$[ebp+16808]
	add	esp, 12					; 0000000cH
	push	edx
	mov	esi, eax
	call	_temp_free
	add	esp, 4
	jmp	SHORT $LN14@pop_given_
$LN5@pop_given_:

; 1343 :     else if ( conetype == ODD4CONE )

	cmp	eax, 9
	jne	SHORT $LN3@pop_given_

; 1344 :       popcount += odd4cone_pop(v_id,dups,&cinfo);

	mov	edx, DWORD PTR _v_id$GSCopy$[ebp]
	lea	ecx, DWORD PTR _cinfo$[ebp]
	push	ecx
	push	edi
	push	edx
	call	_odd4cone_pop

; 1347 :     temp_free((char *)(cinfo.felist));

	mov	edx, DWORD PTR _cinfo$[ebp+16808]
	add	esp, 12					; 0000000cH
	push	edx
	mov	esi, eax
	call	_temp_free
	add	esp, 4
	jmp	SHORT $LN14@pop_given_
$LN3@pop_given_:

; 1345 :     else if ( conetype == OTHERCONE )

	test	eax, eax
	jne	SHORT $LN76@pop_given_

; 1346 :       popcount += pop_vertex(v_id,dups,&cinfo);

	mov	ecx, DWORD PTR _v_id$GSCopy$[ebp]
	lea	eax, DWORD PTR _cinfo$[ebp]
	push	eax
	push	edi
	push	ecx
	call	_pop_vertex

; 1347 :     temp_free((char *)(cinfo.felist));

	mov	edx, DWORD PTR _cinfo$[ebp+16808]
	add	esp, 12					; 0000000cH
	push	edx
	mov	esi, eax
	call	_temp_free
	add	esp, 4
	jmp	SHORT $LN14@pop_given_
$LN76@pop_given_:
	mov	edx, DWORD PTR _cinfo$[ebp+16808]
	mov	esi, DWORD PTR _popcount$[ebp]
	push	edx
	call	_temp_free
	add	esp, 4
	jmp	SHORT $LN14@pop_given_
$LN77@pop_given_:
	mov	esi, edx
$LN14@pop_given_:

; 1348 :     break;  /* one vertex at a time */
; 1349 :   }
; 1350 :              
; 1351 :   temp_free((char *)vflist);

	push	ebx
	call	_temp_free

; 1352 :   return popcount;
; 1353 : } // end pop_given_vertex()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 4
	pop	ebx
	pop	edi
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_pop_given_vertex ENDP
_TEXT	ENDS
PUBLIC	_verpop_film
; Function compile flags: /Ogtp
;	COMDAT _verpop_film
_TEXT	SEGMENT
_verpop_film PROC					; COMDAT

; 1162 : {

	push	esi

; 1163 :   int popcount = 0;

	xor	esi, esi

; 1164 : 
; 1165 :   while ( find_vertex_to_pop() )

	call	_find_vertex_to_pop
	test	eax, eax
	je	SHORT $LN7@verpop_fil
	npad	4
$LL2@verpop_fil:

; 1166 :   { popcount++;

	inc	esi
	call	_find_vertex_to_pop
	test	eax, eax
	jne	SHORT $LL2@verpop_fil
$LN7@verpop_fil:

; 1167 :   }
; 1168 : 
; 1169 :   return popcount;

	mov	eax, esi
	pop	esi

; 1170 : } // end verpop_film()

	ret	0
_verpop_film ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@BGIMLONO@Edges?5popped?3?5?$CFd?6?$AA@ ; `string'
PUBLIC	_popfilm
;	COMDAT ??_C@_0BC@BGIMLONO@Edges?5popped?3?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BC@BGIMLONO@Edges?5popped?3?5?$CFd?6?$AA@ DB 'Edges popped: %d', 0aH
	DB	00H						; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _popfilm
_TEXT	SEGMENT
_popfilm PROC						; COMDAT

; 40   :   int popped = 0;
; 41   : 
; 42   :   if ( web.counts_reported & edge_pop_count_bit )

	test	DWORD PTR _web+5520, 4096		; 00001000H
	je	SHORT $LN1@popfilm

; 43   :     web.edge_pop_count = 0;

	mov	DWORD PTR _web+5480, 0
$LN1@popfilm:

; 44   :   popped = edgepop_film();

	call	_edgepop_film

; 45   :   web.counts_reported |= edge_pop_count_bit;

	or	DWORD PTR _web+5520, 4096		; 00001000H

; 46   :   sprintf(msg,"Edges popped: %d\n",popped); outstring(msg);

	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0BC@BGIMLONO@Edges?5popped?3?5?$CFd?6?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 16					; 00000010H

; 47   : 
; 48   :   popped = verpop_film();

	jmp	_verpop_film
_popfilm ENDP
_TEXT	ENDS
END
