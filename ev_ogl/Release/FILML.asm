; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\FILML.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_wee_area
_BSS	SEGMENT
_wee_area DQ	01H DUP (?)
_BSS	ENDS
PUBLIC	_get_fe_edge
EXTRN	_web:BYTE
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
;	COMDAT _get_fe_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_edge PROC					; COMDAT

; 43   : {

	push	ebp
	mov	ebp, esp

; 44   :   edge_id e_id;
; 45   :     
; 46   :   e_id = feptr(fe_id)->fe_edge_id;

	mov	eax, DWORD PTR _fe_id$[ebp]

; 47   : 
; 48   :   /*
; 49   :   if ( inverted(fe_id) ) invert(e_id);
; 50   :   return e_id;
; 51   :   */
; 52   :   
; 53   :   return same_sign(e_id,fe_id);

	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]

; 54   : }

	pop	ebp
	ret	0
_get_fe_edge ENDP
_TEXT	ENDS
PUBLIC	_get_fe_facet
EXTRN	_NULLFACET:DWORD
; Function compile flags: /Ogtp
;	COMDAT _get_fe_facet
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_facet PROC					; COMDAT

; 58   : {

	push	ebp
	mov	ebp, esp

; 59   :   facet_id f_id;
; 60   :   
; 61   :   if ( !valid_id(fe_id) ) return NULLFACET;

	mov	ecx, DWORD PTR _fe_id$[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN2@get_fe_fac
	mov	eax, DWORD PTR _NULLFACET

; 64   :   return f_id;
; 65   : }

	pop	ebp
	ret	0
$LN2@get_fe_fac:

; 62   :   f_id = feptr(fe_id)->fe_facet_id;

	mov	edx, DWORD PTR _web+460
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+24]

; 63   :   if ( inverted(fe_id) ) invert(f_id);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_fe_fac
	xor	eax, 134217728				; 08000000H
$LN3@get_fe_fac:

; 64   :   return f_id;
; 65   : }

	pop	ebp
	ret	0
_get_fe_facet ENDP
_TEXT	ENDS
PUBLIC	_get_next_edge
; Function compile flags: /Ogtp
;	COMDAT _get_next_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_next_edge PROC					; COMDAT

; 76   : {

	push	ebp
	mov	ebp, esp

; 77   :   if ( inverted(fe_id) ) return inverse_id(feptr(fe_id)->nextedge[0]);

	mov	eax, DWORD PTR _fe_id$[ebp]
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_next_e
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H

; 79   : }

	pop	ebp
	ret	0
$LN2@get_next_e:

; 78   :   else return feptr(fe_id)->nextedge[1];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]

; 79   : }

	pop	ebp
	ret	0
_get_next_edge ENDP
_TEXT	ENDS
PUBLIC	_get_next_facet
; Function compile flags: /Ogtp
;	COMDAT _get_next_facet
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_next_facet PROC					; COMDAT

; 92   : {

	push	ebp
	mov	ebp, esp

; 93   :   if ( inverted(fe_id) ) 

	mov	eax, DWORD PTR _fe_id$[ebp]

; 94   :     return inverse_id(feptr(fe_id)->nextfacet[0]);

	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_next_f
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H

; 97   : }

	pop	ebp
	ret	0
$LN2@get_next_f:

; 95   :   else 
; 96   :     return feptr(fe_id)->nextfacet[1];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+40]

; 97   : }

	pop	ebp
	ret	0
_get_next_facet ENDP
_TEXT	ENDS
PUBLIC	_get_edge_fe
; Function compile flags: /Ogtp
;	COMDAT _get_edge_fe
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_fe PROC					; COMDAT

; 179  : {   struct edge *ep;

	push	ebp
	mov	ebp, esp

; 180  :     facetedge_id fe;
; 181  : 
; 182  :  	ep = eptr(e_id);

	mov	ecx, DWORD PTR _e_id$[ebp]
	mov	edx, DWORD PTR _web+124
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]

; 183  :     if ( !ep ) return NULLID;

	test	eax, eax
	jne	SHORT $LN2@get_edge_f

; 186  :     return fe;
; 187  : }

	pop	ebp
	ret	0
$LN2@get_edge_f:

; 184  :     fe = ep->fe_id; 

	mov	eax, DWORD PTR [eax+28]

; 185  :     if ( inverted(e_id) ) invert(fe);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_edge_f
	xor	eax, 134217728				; 08000000H
$LN3@get_edge_f:

; 186  :     return fe;
; 187  : }

	pop	ebp
	ret	0
_get_edge_fe ENDP
_TEXT	ENDS
PUBLIC	_get_edge_tailv
EXTRN	_dymem:DWORD
; Function compile flags: /Ogtp
;	COMDAT _get_edge_tailv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_tailv PROC					; COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp

; 192  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 193  :      return get_edge_vertices(e_id)[web.headvnum];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_t
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 196  : }

	pop	ebp
	ret	0
$LN2@get_edge_t:

; 194  :   else
; 195  :      return get_edge_vertices(e_id)[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 196  : }

	pop	ebp
	ret	0
_get_edge_tailv ENDP
_TEXT	ENDS
PUBLIC	_get_edge_headv
; Function compile flags: /Ogtp
;	COMDAT _get_edge_headv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_headv PROC					; COMDAT

; 200  : {

	push	ebp
	mov	ebp, esp

; 201  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 202  :      return get_edge_vertices(e_id)[0];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_h
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 205  : }

	pop	ebp
	ret	0
$LN2@get_edge_h:

; 203  :   else
; 204  :      return get_edge_vertices(e_id)[web.headvnum];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 205  : }

	pop	ebp
	ret	0
_get_edge_headv ENDP
_TEXT	ENDS
PUBLIC	_get_facet_body
; Function compile flags: /Ogtp
;	COMDAT _get_facet_body
_TEXT	SEGMENT
_f_id$ = 8						; size = 4
_get_facet_body PROC					; COMDAT

; 250  : {

	push	ebp
	mov	ebp, esp

; 251  :   if ( web.skel[BODY].count == 0 ) return NULLID;

	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN4@get_facet_
$LN7@get_facet_:
	xor	eax, eax

; 255  : }

	pop	ebp
	ret	0
$LN4@get_facet_:

; 252  :   if ( !valid_id(f_id) ) return NULLID;

	mov	eax, DWORD PTR _f_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN7@get_facet_

; 253  :   if ( inverted(f_id) ) return F_ELID(f_id,F_BODY_LIST_ATTR)[1];

	mov	ecx, DWORD PTR _web+236
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_facet_
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax+4]

; 255  : }

	pop	ebp
	ret	0
$LN2@get_facet_:

; 254  :   else  return F_ELID(f_id,F_BODY_LIST_ATTR)[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax]

; 255  : }

	pop	ebp
	ret	0
_get_facet_body ENDP
_TEXT	ENDS
PUBLIC	_get_facet_fe
; Function compile flags: /Ogtp
;	COMDAT _get_facet_fe
_TEXT	SEGMENT
_f_id$ = 8						; size = 4
_get_facet_fe PROC					; COMDAT

; 260  : {

	push	ebp
	mov	ebp, esp

; 261  :   facetedge_id fe;
; 262  :   
; 263  :   if ( !valid_id(f_id) ) return NULLID;

	mov	ecx, DWORD PTR _f_id$[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN2@get_facet_@2
	xor	eax, eax

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
$LN2@get_facet_@2:

; 264  :   fe = fptr(f_id)->fe_id;

	mov	edx, DWORD PTR _web+236
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]

; 265  :   if ( inverted(f_id) ) invert(fe);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_facet_@2
	xor	eax, 134217728				; 08000000H
$LN3@get_facet_@2:

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
_get_facet_fe ENDP
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	_get_body_density
EXTRN	__fltused:DWORD
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _get_body_density
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_density PROC					; COMDAT

; 305  :     { return  ( valid_id(b_id) ?  bptr(b_id)->density : 0.0 ) ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_d
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+344]
	pop	ebp
	ret	0
$LN3@get_body_d:
	fldz
	pop	ebp
	ret	0
_get_body_density ENDP
_TEXT	ENDS
PUBLIC	__real@4018000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	_f_id$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_facet_energy_l
EXTRN	_binary_tree_add:PROC
EXTRN	_threadflag:DWORD
EXTRN	_sqcurve_energy:PROC
EXTRN	_conf_edge_curv_flag:DWORD
EXTRN	_kusner_flag:DWORD
EXTRN	_square_curvature_flag:DWORD
EXTRN	_mean_curv_int_flag:DWORD
EXTRN	_get_wulff:DWORD
EXTRN	_cross_prod:PROC
EXTRN	_dot:PROC
EXTRN	_simplex_energy_metric:PROC
EXTRN	_klein_area:PROC
EXTRN	_klein_metric_flag:DWORD
EXTRN	_get_facet_verts:PROC
EXTRN	_int_val:DWORD
EXTRN	_win_get_thread_data:PROC
EXTRN	_thread_data_key:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CIsqrt:PROC
;	COMDAT __real@4018000000000000
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\filml.c
CONST	ENDS
;	COMDAT _facet_energy_l
_TEXT	SEGMENT
tv881 = -468						; size = 8
_st$ = -468						; size = 8
tv755 = -460						; size = 4
_data$ = -456						; size = 4
_x$ = -452						; size = 12
tv742 = -440						; size = 4
_f_id$GSCopy$ = -436					; size = 4
_ss$ = -432						; size = 8
_energy$ = -432						; size = 8
tv1177 = -428						; size = 4
_unwrap_x$ = -424					; size = 144
_wulff$ = -280						; size = 48
_normal$ = -232						; size = 48
_side$ = -184						; size = 144
_z$ = -40						; size = 24
_v_id$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_f_id$ = 8						; size = 4
_mode$ = 12						; size = 4
_facet_energy_l PROC					; COMDAT

; 29   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 468				; 000001d4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 30   :   int i,j;
; 31   :   REAL side[FACET_EDGES][MAXCOORD];
; 32   :   REAL normal[MAXCOORD];
; 33   :   REAL wulff[MAXCOORD];    /* energy covector to area normal vector */
; 34   :   REAL energy;
; 35   :   body_id b_id;
; 36   :   REAL *x[FACET_VERTS];
; 37   :   REAL unwrap_x[FACET_VERTS][MAXCOORD];
; 38   :   REAL z[FACET_VERTS];  /* for calculating average z*z */
; 39   :   REAL zz;     /* for average z*z, for gravity */
; 40   :   REAL u;      /* gravitational energy */
; 41   :   facetedge_id fe_id;
; 42   :   vertex_id v_id[FACET_VERTS];
; 43   :   REAL ss,st,tt;
; 44   :   REAL det;
; 45   : #ifdef THREADS
; 46   :   struct thread_data *data = GET_THREAD_DATA;

	mov	eax, DWORD PTR _thread_data_key
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _f_id$[ebp]
	push	eax
	mov	DWORD PTR _f_id$GSCopy$[ebp], edi
	call	_win_get_thread_data

; 47   : #endif
; 48   :   int_val = ordinal(get_original(f_id))+1;  /* for eval  of file parameters */

	mov	edx, edi
	shr	edx, 29					; 0000001dH
	imul	edx, 112				; 00000070H
	mov	ecx, edi
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	mov	DWORD PTR _data$[ebp], eax
	mov	eax, DWORD PTR _web[edx+12]
	add	ecx, ecx
	mov	edx, DWORD PTR [eax+ecx]
	mov	eax, DWORD PTR [edx+20]
	add	esp, 4
	mov	DWORD PTR tv742[ebp], ecx
	test	eax, 268435456				; 10000000H
	je	SHORT $LN28@facet_ener
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN29@facet_ener
$LN28@facet_ener:
	or	eax, -1
$LN29@facet_ener:
	inc	eax
	mov	DWORD PTR _int_val, eax

; 49   : 
; 50   :   /* get side vectors */
; 51   :   fe_id = get_facet_fe(f_id);

	mov	eax, edi
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv755[ebp], eax
	jne	SHORT $LN31@facet_ener
	xor	esi, esi
	jmp	SHORT $LN30@facet_ener
$LN31@facet_ener:
	mov	eax, DWORD PTR _web+236
	mov	ecx, DWORD PTR [ecx+eax]
	mov	esi, DWORD PTR [ecx+28]
	test	edi, 134217728				; 08000000H
	je	SHORT $LN30@facet_ener
	xor	esi, 134217728				; 08000000H
$LN30@facet_ener:

; 52   :   for ( i = 0 ; i < FACET_EDGES ; i++ )
; 53   :   { 
; 54   :     v_id[i] = get_fe_tailv(fe_id);

	mov	eax, DWORD PTR _web+460
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	lea	ebx, DWORD PTR [eax+edx*4]
	mov	eax, esi
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN37@facet_ener
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+216
	mov	edi, DWORD PTR _web+636
	lea	ecx, DWORD PTR [ecx+edx+304]
	mov	edx, DWORD PTR _web+124
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	lea	eax, DWORD PTR [eax+edi*4]
	jmp	SHORT $LN148@facet_ener
$LN37@facet_ener:
	mov	edx, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	lea	ecx, DWORD PTR [edx+ecx+304]
	mov	edx, DWORD PTR _web+124
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
$LN148@facet_ener:
	mov	edi, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+edi]
	mov	DWORD PTR _v_id$[ebp], eax

; 55   :     x[i] = unwrap_x[i];

	lea	eax, DWORD PTR _unwrap_x$[ebp]
	mov	DWORD PTR _x$[ebp], eax

; 56   :     fe_id = get_next_edge(fe_id);

	mov	eax, DWORD PTR [ebx]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN41@facet_ener
	mov	esi, DWORD PTR [eax+28]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN24@facet_ener
$LN41@facet_ener:
	mov	esi, DWORD PTR [eax+32]
$LN24@facet_ener:

; 52   :   for ( i = 0 ; i < FACET_EDGES ; i++ )
; 53   :   { 
; 54   :     v_id[i] = get_fe_tailv(fe_id);

	mov	edi, DWORD PTR _web+460
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [edi+eax*4]
	lea	edi, DWORD PTR [edi+eax*4]
	mov	eax, esi
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ebx+20]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN77@facet_ener
	mov	ebx, DWORD PTR _web+636
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	lea	eax, DWORD PTR [eax+ebx*4]
	jmp	SHORT $LN149@facet_ener
$LN77@facet_ener:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
$LN149@facet_ener:
	mov	ebx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+ebx]
	mov	DWORD PTR _v_id$[ebp+4], eax

; 55   :     x[i] = unwrap_x[i];

	lea	eax, DWORD PTR _unwrap_x$[ebp+48]
	mov	DWORD PTR _x$[ebp+4], eax

; 56   :     fe_id = get_next_edge(fe_id);

	mov	eax, DWORD PTR [edi]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN79@facet_ener
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN80@facet_ener
$LN79@facet_ener:
	mov	eax, DWORD PTR [eax+32]
$LN80@facet_ener:

; 52   :   for ( i = 0 ; i < FACET_EDGES ; i++ )
; 53   :   { 
; 54   :     v_id[i] = get_fe_tailv(fe_id);

	mov	edi, DWORD PTR _web+460
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edi+esi*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [esi+20]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN82@facet_ener
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR _web+636
	lea	edx, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN150@facet_ener
$LN82@facet_ener:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
$LN150@facet_ener:
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax]

; 57   :   }
; 58   : 
; 59   :   get_facet_verts(f_id,x,NULL);  /* in tail order */

	push	0
	lea	edx, DWORD PTR _x$[ebp]
	mov	DWORD PTR _v_id$[ebp+8], eax
	mov	eax, DWORD PTR _f_id$GSCopy$[ebp]
	push	edx
	lea	ecx, DWORD PTR _unwrap_x$[ebp+96]
	push	eax
	mov	DWORD PTR _x$[ebp+8], ecx
	call	_get_facet_verts
	lea	ecx, DWORD PTR _side$[ebp]
	add	esp, 12					; 0000000cH

; 60   :   for ( i = 0 ; i < FACET_EDGES ; i++ )

	xor	esi, esi
	mov	DWORD PTR tv1177[ebp], ecx
	npad	8
$LL22@facet_ener:

; 61   :   { int ii = (i+1)%FACET_EDGES;

	lea	eax, DWORD PTR [esi+1]
	cdq
	mov	edi, 3
	idiv	edi

; 62   :     for ( j = 0 ; j < SDIM ; j++ )

	mov	edi, DWORD PTR _web+616
	test	edi, edi
	jle	SHORT $LN17@facet_ener
	mov	eax, DWORD PTR _x$[ebp+esi*4]
	mov	edx, DWORD PTR _x$[ebp+edx*4]
	sub	edx, eax
$LL19@facet_ener:

; 63   :       side[i][j] = x[ii][j] - x[i][j];

	fld	QWORD PTR [edx+eax]
	add	eax, 8
	fsub	QWORD PTR [eax-8]
	add	ecx, 8
	dec	edi
	fstp	QWORD PTR [ecx-8]
	jne	SHORT $LL19@facet_ener

; 62   :     for ( j = 0 ; j < SDIM ; j++ )

	mov	edi, DWORD PTR _web+616
$LN17@facet_ener:

; 64   :     z[i] = x[i][2];

	mov	ecx, DWORD PTR _x$[ebp+esi*4]
	fld	QWORD PTR [ecx+16]
	mov	ecx, DWORD PTR tv1177[ebp]
	fstp	QWORD PTR _z$[ebp+esi*8]
	inc	esi
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv1177[ebp], ecx
	cmp	esi, 3
	jl	SHORT $LL22@facet_ener

; 65   :   } 
; 66   :      
; 67   :   if ( web.metric_flag )

	cmp	DWORD PTR _web+1676, 0
	je	SHORT $LN16@facet_ener

; 68   :   { if ( klein_metric_flag )

	cmp	DWORD PTR _klein_metric_flag, 0
	je	SHORT $LN15@facet_ener

; 69   :       energy = klein_area(x);

	lea	edx, DWORD PTR _x$[ebp]
	push	edx
	call	_klein_area
	add	esp, 4
	jmp	SHORT $LN151@facet_ener
$LN15@facet_ener:

; 70   :     else energy = simplex_energy_metric(v_id,x);

	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v_id$[ebp]
	push	ecx
	call	_simplex_energy_metric
	add	esp, 8
$LN151@facet_ener:

; 71   :     set_facet_area(f_id,energy);

	mov	edx, DWORD PTR _web+236
	fst	QWORD PTR _energy$[ebp]
	mov	eax, DWORD PTR tv742[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	fst	QWORD PTR [ecx+40]

; 72   :     goto skip_from_metric;

	jmp	$skip_from_metric$89075
$LN16@facet_ener:

; 73   :   }
; 74   : 
; 75   :   /* calculate surface tension energy */
; 76   :   ss = SDIM_dot(side[0],side[0]);

	lea	edx, DWORD PTR _side$[ebp]
	push	edi
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	fstp	QWORD PTR _ss$[ebp]

; 77   :   st = SDIM_dot(side[0],side[1]);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _side$[ebp+48]
	push	edx
	lea	eax, DWORD PTR _side$[ebp]
	push	eax
	call	_dot
	fstp	QWORD PTR _st$[ebp]

; 78   :   tt = SDIM_dot(side[1],side[1]);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _side$[ebp+48]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot

; 79   :   det = ss*tt-st*st;

	fmul	QWORD PTR _ss$[ebp]
	fld	QWORD PTR _st$[ebp]
	add	esp, 36					; 00000024H
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)

; 80   :   if ( det > 0.0 ) energy = sqrt(det)/2;

	fldz
	fcom	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN133@facet_ener
	fstp	ST(0)
	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000
	jmp	SHORT $LN152@facet_ener
$LN133@facet_ener:
	fstp	ST(1)
$LN152@facet_ener:

; 81   :   else energy = 0.0;
; 82   :   set_facet_area(f_id,energy);
; 83   : 
; 84   :   if ( mode == AREA_ONLY ) return;

	cmp	DWORD PTR _mode$[ebp], 1
	fst	QWORD PTR _energy$[ebp]
	mov	ecx, DWORD PTR _web+236
	mov	edx, DWORD PTR tv742[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	fst	QWORD PTR [eax+40]
	je	$LN137@facet_ener

; 85   : 
; 86   :   if ( web.wulff_flag ) 

	cmp	DWORD PTR _web+908, 0
	je	SHORT $LN10@facet_ener

; 87   :   {
; 88   :     /* calculate normal */ 
; 89   :     cross_prod(side[0],side[1],normal);

	lea	ecx, DWORD PTR _normal$[ebp]
	fstp	ST(0)
	push	ecx
	lea	edx, DWORD PTR _side$[ebp+48]
	push	edx
	lea	eax, DWORD PTR _side$[ebp]
	push	eax
	call	_cross_prod

; 90   :     (*get_wulff)(normal,wulff);

	lea	ecx, DWORD PTR _wulff$[ebp]
	push	ecx
	lea	edx, DWORD PTR _normal$[ebp]
	push	edx
	call	DWORD PTR _get_wulff

; 91   :     energy = SDIM_dot(wulff,normal)/2;

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _normal$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wulff$[ebp]
	push	edx
	call	_dot
	fmul	QWORD PTR __real@3fe0000000000000
	add	esp, 32					; 00000020H
	fst	QWORD PTR _energy$[ebp]
$LN10@facet_ener:

; 92   :   }
; 93   : 
; 94   :   /* do square curvature if wanted */
; 95   :   if ( ((square_curvature_flag | mean_curv_int_flag) & EVALUATE )
; 96   :         && !kusner_flag && !conf_edge_curv_flag )

	mov	eax, DWORD PTR _mean_curv_int_flag
	or	eax, DWORD PTR _square_curvature_flag
	test	al, 2
	je	SHORT $skip_from_metric$89075
	cmp	DWORD PTR _kusner_flag, 0
	jne	SHORT $skip_from_metric$89075
	cmp	DWORD PTR _conf_edge_curv_flag, 0
	jne	SHORT $skip_from_metric$89075

; 97   :      sqcurve_energy(v_id,side);

	lea	ecx, DWORD PTR _side$[ebp]
	fstp	ST(0)
	push	ecx
	lea	edx, DWORD PTR _v_id$[ebp]
	push	edx
	call	_sqcurve_energy
	fld	QWORD PTR _energy$[ebp]
	add	esp, 8
$skip_from_metric$89075:

; 98   : 
; 99   : 
; 100  : skip_from_metric:
; 101  : 
; 102  : #ifdef THREADS
; 103  :   if ( threadflag )

	cmp	DWORD PTR _threadflag, 0
	je	SHORT $LN8@facet_ener

; 104  :     data->total_area = data->total_area + energy; /* Borland C bug */

	mov	eax, DWORD PTR _data$[ebp]
	fld	QWORD PTR [eax+32]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax+32]

; 105  :   else

	jmp	SHORT $LN7@facet_ener
$LN8@facet_ener:

; 106  : #endif
; 107  :   binary_tree_add(web.total_area_addends,energy);

	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET _web+1000
	call	_binary_tree_add
	fld	QWORD PTR _energy$[ebp]
	add	esp, 12					; 0000000cH
$LN7@facet_ener:

; 108  : 
; 109  :   if ( get_fattr(f_id) & DENSITY )

	mov	eax, DWORD PTR tv742[ebp]
	mov	ebx, DWORD PTR _web+236
	mov	edx, DWORD PTR [eax+ebx]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR tv881[ebp+4], eax
	mov	eax, ecx
	and	eax, 16					; 00000010H
	xor	esi, esi
	or	eax, esi
	je	SHORT $LN6@facet_ener

; 110  :      energy = energy * get_facet_density(f_id);  /* Borland C bug */

	fmul	QWORD PTR [edx+32]
$LN6@facet_ener:

; 111  :       
; 112  :   /* add gravitational energy, vector potential z*z/2*k  */
; 113  :   if ( web.gravflag && !(get_fattr(f_id) & NONCONTENT) )

	cmp	DWORD PTR _web+824, esi
	je	$LN88@facet_ener
	and	ecx, 536870912				; 20000000H
	xor	eax, eax
	or	ecx, eax
	jne	$LN88@facet_ener

; 114  :     {
; 115  :       zz = (z[0]*z[0]+z[1]*z[1]+z[2]*z[2]+z[0]*z[1]+z[1]*z[2]+z[0]*z[2])/6;

	fld	QWORD PTR _z$[ebp+8]

; 116  :       u = zz*(side[0][0]*side[1][1]-side[0][1]*side[1][0])/2/2;  
; 117  :           /* half for area, half from potential */
; 118  :       b_id = get_facet_body(f_id);

	mov	esi, DWORD PTR _web+328
	fld	ST(0)
	mov	edi, DWORD PTR _dymem
	fmul	ST(0), ST(1)
	mov	ecx, DWORD PTR _f_id$GSCopy$[ebp]
	fld	QWORD PTR _z$[ebp]
	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(2), ST(0)
	fld	QWORD PTR _z$[ebp+16]
	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(3), ST(0)
	fld	ST(3)
	fmul	ST(0), ST(2)
	faddp	ST(3), ST(0)
	fld	ST(0)
	fmulp	ST(4), ST(0)
	fxch	ST(2)
	faddp	ST(3), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fdiv	QWORD PTR __real@4018000000000000
	fld	QWORD PTR _side$[ebp+56]
	fmul	QWORD PTR _side$[ebp]
	fld	QWORD PTR _side$[ebp+48]
	fmul	QWORD PTR _side$[ebp+8]
	fsubp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	cmp	DWORD PTR _web+400, eax
	je	SHORT $LN44@facet_ener
$LN47@facet_ener:
	cmp	DWORD PTR tv755[ebp], eax
	jne	SHORT $LN46@facet_ener
	xor	eax, eax
	jmp	SHORT $LN44@facet_ener
$LN46@facet_ener:
	mov	eax, DWORD PTR [esi+edi+784]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN45@facet_ener
	mov	eax, DWORD PTR [eax+edx+4]
	jmp	SHORT $LN44@facet_ener
$LN45@facet_ener:
	mov	eax, DWORD PTR [edx+eax]
$LN44@facet_ener:

; 119  :       if ( valid_id(b_id) )

	fld	QWORD PTR _web+832
	mov	edx, DWORD PTR _web+348
	test	eax, 268435456				; 10000000H
	je	SHORT $LN87@facet_ener

; 120  :       energy += u*get_body_density(b_id)*web.grav_const;

	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [eax+344]
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(1)
	faddp	ST(3), ST(0)
$LN87@facet_ener:

; 121  :       b_id = get_facet_body(facet_inverse(f_id));

	xor	ecx, 134217728				; 08000000H
	cmp	DWORD PTR _web+400, 0
	mov	eax, ecx
	jne	SHORT $LN57@facet_ener
	xor	eax, eax
	jmp	SHORT $LN54@facet_ener
$LN57@facet_ener:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN56@facet_ener
	xor	eax, eax
	jmp	SHORT $LN54@facet_ener
$LN56@facet_ener:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN55@facet_ener
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+eax*4]
	mov	eax, DWORD PTR [esi+edi+784]
	mov	eax, DWORD PTR [ecx+eax+4]
	jmp	SHORT $LN54@facet_ener
$LN55@facet_ener:
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+eax*4]
	mov	eax, DWORD PTR [esi+edi+784]
	mov	eax, DWORD PTR [ecx+eax]
$LN54@facet_ener:

; 122  :       if ( valid_id(b_id) )

	test	eax, 268435456				; 10000000H
	je	SHORT $LN115@facet_ener

; 123  :       energy -= u*get_body_density(b_id)*web.grav_const;

	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [ecx+344]
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	jmp	SHORT $LN88@facet_ener
$LN115@facet_ener:

; 122  :       if ( valid_id(b_id) )

	fstp	ST(1)
	fstp	ST(0)
$LN88@facet_ener:

; 124  :     }
; 125  : 
; 126  : #ifdef THREADS
; 127  :   if ( threadflag )

	cmp	DWORD PTR _threadflag, 0
	je	SHORT $LN2@facet_ener

; 128  :     data->total_energy = data->total_energy + energy; /* Borland C bug */

	mov	eax, DWORD PTR _data$[ebp]
	fadd	QWORD PTR [eax+24]
	pop	edi
	pop	esi
	pop	ebx
	fstp	QWORD PTR [eax+24]

; 132  : 
; 133  : } /* end facet_energy_l() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@facet_ener:

; 129  :   else
; 130  : #endif
; 131  :   binary_tree_add(web.total_energy_addends,energy); 

	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET _web+1248
	call	_binary_tree_add
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebx

; 132  : 
; 133  : } /* end facet_energy_l() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN137@facet_ener:
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(0)
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_energy_l ENDP
_TEXT	ENDS
PUBLIC	__real@4038000000000000
PUBLIC	__real@3fd0000000000000
PUBLIC	??_C@_0BI@COEFBJGO@Hit?5RETURN?5to?5continue?4?$AA@ ; `string'
PUBLIC	??_C@_0CA@IMIILCHB@?5?$CFs?5?5?5?5?$CF18?415f?5?$CF18?415f?5?$CF18?415f?6?$AA@ ; `string'
PUBLIC	??_C@_0CA@BLKNOLCM@Facet?9edges?5and?5side?5vectors?3?5?6?$AA@ ; `string'
PUBLIC	??_C@_0CC@PFALCJIK@WARNING?$CB?5Zero?5area?5for?5facet?5?$CFs?4@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	_f_id$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_facet_force_l
EXTRN	_sym_form_pullback:DWORD
EXTRN	_prompt:PROC
EXTRN	_msgmax:DWORD
EXTRN	_msg:DWORD
EXTRN	_itdebug:DWORD
EXTRN	_outstring:PROC
EXTRN	_errmsg:BYTE
EXTRN	_sprintf:PROC
EXTRN	_elnames:BYTE
EXTRN	_sqcurve_force:PROC
EXTRN	_simplex_force_metric:PROC
EXTRN	_klein_area_grad:PROC
EXTRN	_memset:PROC
;	COMDAT __real@4038000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@4038000000000000 DQ 04038000000000000r	; 24
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT ??_C@_0BI@COEFBJGO@Hit?5RETURN?5to?5continue?4?$AA@
CONST	SEGMENT
??_C@_0BI@COEFBJGO@Hit?5RETURN?5to?5continue?4?$AA@ DB 'Hit RETURN to con'
	DB	'tinue.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IMIILCHB@?5?$CFs?5?5?5?5?$CF18?415f?5?$CF18?415f?5?$CF18?415f?6?$AA@
CONST	SEGMENT
??_C@_0CA@IMIILCHB@?5?$CFs?5?5?5?5?$CF18?415f?5?$CF18?415f?5?$CF18?415f?6?$AA@ DB ' '
	DB	'%s    %18.15f %18.15f %18.15f', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@BLKNOLCM@Facet?9edges?5and?5side?5vectors?3?5?6?$AA@
CONST	SEGMENT
??_C@_0CA@BLKNOLCM@Facet?9edges?5and?5side?5vectors?3?5?6?$AA@ DB 'Facet-'
	DB	'edges and side vectors: ', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@PFALCJIK@WARNING?$CB?5Zero?5area?5for?5facet?5?$CFs?4@
CONST	SEGMENT
??_C@_0CC@PFALCJIK@WARNING?$CB?5Zero?5area?5for?5facet?5?$CFs?4@ DB 'WARN'
	DB	'ING! Zero area for facet %s.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\filml.c
CONST	ENDS
;	COMDAT _facet_force_l
_TEXT	SEGMENT
_normz$89196 = -736					; size = 8
_tt$ = -736						; size = 8
_forceptr$ = -728					; size = 12
tv1883 = -716						; size = 8
_ss$ = -716						; size = 8
_st$ = -708						; size = 8
tv2530 = -704						; size = 4
_x$ = -700						; size = 12
tv1561 = -688						; size = 4
_gdensity$89195 = -684					; size = 8
_density$ = -684					; size = 8
tv1536 = -676						; size = 4
_f_id$GSCopy$ = -672					; size = 4
tv3056 = -668						; size = 4
_fe_id$ = -668						; size = 4
_unwrap_x$ = -664					; size = 144
_temp$ = -520						; size = 48
_normal$ = -472						; size = 48
_wulff$ = -424						; size = 48
_wforce$89213 = -376					; size = 48
_z$ = -352						; size = 24
_wraps$ = -328						; size = 12
_side$ = -316						; size = 144
_forces$ = -172						; size = 144
_e_id$ = -28						; size = 12
_v_id$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_f_id$ = 8						; size = 4
_facet_force_l PROC					; COMDAT

; 145  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 736				; 000002e0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx

; 146  :   REAL side[FACET_EDGES][MAXCOORD];
; 147  :   REAL normal[MAXCOORD];
; 148  :   REAL wulff[MAXCOORD]; /* area vector covector for energy */
; 149  :   REAL temp[MAXCOORD];
; 150  :   int i,j;
; 151  :   REAL area;
; 152  :   facetedge_id fe_id;
; 153  :   REAL *x[FACET_VERTS];
; 154  :   REAL z[FACET_VERTS];  /* for gravitational forces */
; 155  :   body_id b_id;
; 156  :   REAL density = get_facet_density(f_id);

	mov	ebx, DWORD PTR _web+236
	push	esi
	push	edi
	mov	edi, DWORD PTR _f_id$[ebp]
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+esi*4]
	fld	QWORD PTR [eax+32]

; 157  :   vertex_id v_id[FACET_VERTS];
; 158  :   edge_id    e_id[FACET_EDGES];
; 159  :   REAL unwrap_x[FACET_VERTS][MAXCOORD];
; 160  :   WRAPTYPE wraps[FACET_VERTS];
; 161  :   REAL forces[FACET_VERTS][MAXCOORD];  /* total forces from this facet */
; 162  :   REAL *forceptr[FACET_VERTS];    /* pointers to forces */
; 163  :   REAL ss,st,tt;
; 164  : 
; 165  :   memset((char*)forces,0,sizeof(forces));  /* set to 0 */

	push	144					; 00000090H
	lea	ecx, DWORD PTR _forces$[ebp]
	fstp	QWORD PTR _density$[ebp]
	push	0
	push	ecx
	mov	DWORD PTR _f_id$GSCopy$[ebp], edi
	mov	DWORD PTR tv1536[ebp], esi
	call	_memset

; 166  :   int_val = ordinal(get_original(f_id))+1;  /* for eval  of file parameters */

	mov	edx, edi
	shr	edx, 29					; 0000001dH
	imul	edx, 112				; 00000070H
	mov	eax, DWORD PTR _web[edx+12]
	mov	ecx, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR [ecx+20]
	add	esp, 12					; 0000000cH
	test	eax, 268435456				; 10000000H
	je	SHORT $LN63@facet_forc
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN64@facet_forc
$LN63@facet_forc:
	or	eax, -1
$LN64@facet_forc:
	inc	eax
	mov	DWORD PTR _int_val, eax

; 167  :   /* get side vectors */
; 168  :   fe_id = get_facet_fe(f_id);

	mov	eax, edi
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv1561[ebp], eax
	jne	SHORT $LN70@facet_forc
	xor	esi, esi
	jmp	SHORT $LN69@facet_forc
$LN70@facet_forc:
	mov	edx, DWORD PTR [ebx+esi*4]
	mov	esi, DWORD PTR [edx+28]
	test	edi, 134217728				; 08000000H
	je	SHORT $LN69@facet_forc
	xor	esi, 134217728				; 08000000H
$LN69@facet_forc:

; 169  :   for ( i = 0 ; i < FACET_EDGES ; i++ )
; 170  :   { 
; 171  :     e_id[i] = get_fe_edge(fe_id);

	mov	ecx, DWORD PTR _web+460
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	lea	edi, DWORD PTR [ecx+eax*4]

; 172  :     v_id[i] = get_edge_tailv(e_id[i]);

	mov	ecx, DWORD PTR _dymem
	mov	eax, esi
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _web+216
	lea	ecx, DWORD PTR [edx+ecx+304]
	mov	edx, DWORD PTR _web+124
	mov	DWORD PTR _e_id$[ebp], eax
	test	eax, 134217728				; 08000000H
	je	SHORT $LN76@facet_forc
	mov	ebx, DWORD PTR _web+636
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	lea	eax, DWORD PTR [eax+ebx*4]
	jmp	SHORT $LN251@facet_forc
$LN76@facet_forc:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
$LN251@facet_forc:
	mov	ebx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+ebx]
	mov	DWORD PTR _v_id$[ebp], eax

; 173  :     x[i] = unwrap_x[i];

	lea	eax, DWORD PTR _unwrap_x$[ebp]
	mov	DWORD PTR _x$[ebp], eax

; 174  :     forceptr[i] = forces[i];

	lea	eax, DWORD PTR _forces$[ebp]
	mov	DWORD PTR _forceptr$[ebp], eax

; 175  :     fe_id = get_next_edge(fe_id);

	mov	eax, DWORD PTR [edi]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN80@facet_forc
	mov	esi, DWORD PTR [eax+28]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN59@facet_forc
$LN80@facet_forc:
	mov	esi, DWORD PTR [eax+32]
$LN59@facet_forc:

; 169  :   for ( i = 0 ; i < FACET_EDGES ; i++ )
; 170  :   { 
; 171  :     e_id[i] = get_fe_edge(fe_id);

	mov	edi, DWORD PTR _web+460
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	lea	ebx, DWORD PTR [edi+eax*4]
	mov	edi, DWORD PTR [ebx]
	mov	eax, esi
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edi+20]
	mov	DWORD PTR _e_id$[ebp+4], eax

; 172  :     v_id[i] = get_edge_tailv(e_id[i]);

	test	eax, 134217728				; 08000000H
	je	SHORT $LN158@facet_forc
	mov	edi, DWORD PTR _web+636
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	lea	eax, DWORD PTR [eax+edi*4]
	jmp	SHORT $LN252@facet_forc
$LN158@facet_forc:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
$LN252@facet_forc:
	mov	edi, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+edi]
	mov	DWORD PTR _v_id$[ebp+4], eax

; 173  :     x[i] = unwrap_x[i];

	lea	eax, DWORD PTR _unwrap_x$[ebp+48]
	mov	DWORD PTR _x$[ebp+4], eax

; 174  :     forceptr[i] = forces[i];

	lea	eax, DWORD PTR _forces$[ebp+48]
	mov	DWORD PTR _forceptr$[ebp+4], eax

; 175  :     fe_id = get_next_edge(fe_id);

	mov	eax, DWORD PTR [ebx]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN160@facet_forc
	mov	esi, DWORD PTR [eax+28]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN161@facet_forc
$LN160@facet_forc:
	mov	esi, DWORD PTR [eax+32]
$LN161@facet_forc:

; 169  :   for ( i = 0 ; i < FACET_EDGES ; i++ )
; 170  :   { 
; 171  :     e_id[i] = get_fe_edge(fe_id);

	mov	edi, DWORD PTR _web+460
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [edi+eax*4]
	lea	edi, DWORD PTR [edi+eax*4]
	mov	eax, esi
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ebx+20]
	mov	DWORD PTR _e_id$[ebp+8], eax

; 172  :     v_id[i] = get_edge_tailv(e_id[i]);

	test	eax, 134217728				; 08000000H
	je	SHORT $LN163@facet_forc
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR _web+636
	lea	edx, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN253@facet_forc
$LN163@facet_forc:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
$LN253@facet_forc:
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax]

; 173  :     x[i] = unwrap_x[i];

	lea	ecx, DWORD PTR _unwrap_x$[ebp+96]

; 174  :     forceptr[i] = forces[i];

	lea	edx, DWORD PTR _forces$[ebp+96]
	mov	DWORD PTR _v_id$[ebp+8], eax
	mov	DWORD PTR _x$[ebp+8], ecx
	mov	DWORD PTR _forceptr$[ebp+8], edx

; 175  :     fe_id = get_next_edge(fe_id);

	test	esi, 134217728				; 08000000H
	je	SHORT $LN165@facet_forc
	mov	eax, DWORD PTR [edi]
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR _fe_id$[ebp], eax
	jmp	SHORT $LN166@facet_forc
$LN165@facet_forc:
	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _fe_id$[ebp], edx
$LN166@facet_forc:

; 176  :   }
; 177  :   get_facet_verts(f_id,x,wraps);  /* verts in tail order */

	mov	edx, DWORD PTR _f_id$GSCopy$[ebp]
	lea	eax, DWORD PTR _wraps$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	push	edx
	call	_get_facet_verts
	lea	eax, DWORD PTR _side$[ebp]
	add	esp, 12					; 0000000cH

; 178  :   for ( i = 0 ; i < FACET_EDGES ; i++ )

	xor	esi, esi
	mov	DWORD PTR tv2530[ebp], eax
	npad	1
$LL57@facet_forc:

; 179  :   { int ii = (i+1)%FACET_EDGES;

	lea	eax, DWORD PTR [esi+1]
	cdq
	mov	ecx, 3
	idiv	ecx

; 180  :     for ( j = 0 ; j < SDIM ; j++ )

	cmp	DWORD PTR _web+616, 0
	jle	SHORT $LN52@facet_forc
	mov	eax, DWORD PTR _x$[ebp+esi*4]
	mov	edx, DWORD PTR _x$[ebp+edx*4]
	mov	ecx, DWORD PTR tv2530[ebp]
	mov	edi, DWORD PTR _web+616
	sub	edx, eax
$LL54@facet_forc:

; 181  :       side[i][j] = x[ii][j] - x[i][j];

	fld	QWORD PTR [edx+eax]
	add	eax, 8
	fsub	QWORD PTR [eax-8]
	add	ecx, 8
	dec	edi
	fstp	QWORD PTR [ecx-8]
	jne	SHORT $LL54@facet_forc
$LN52@facet_forc:

; 182  :     z[i] = x[i][2];

	mov	edx, DWORD PTR _x$[ebp+esi*4]
	fld	QWORD PTR [edx+16]
	add	DWORD PTR tv2530[ebp], 48		; 00000030H
	fstp	QWORD PTR _z$[ebp+esi*8]
	inc	esi
	cmp	esi, 3
	jl	SHORT $LL57@facet_forc

; 183  :   } 
; 184  :   if ( web.metric_flag )

	cmp	DWORD PTR _web+1676, 0
	je	$LN51@facet_forc

; 185  :   { if ( klein_metric_flag )

	cmp	DWORD PTR _klein_metric_flag, 0

; 186  :     { klein_area_grad(x,forceptr);

	lea	eax, DWORD PTR _forceptr$[ebp]
	lea	ecx, DWORD PTR _x$[ebp]
	push	eax
	je	SHORT $LN50@facet_forc
	push	ecx
	call	_klein_area_grad
	fld	QWORD PTR _density$[ebp]
	mov	ecx, DWORD PTR _web+616
	add	esp, 8
	lea	edx, DWORD PTR _forceptr$[ebp]
	mov	esi, 3
$LN49@facet_forc:

; 188  :           for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN48@facet_forc
$LN46@facet_forc:
	mov	ecx, DWORD PTR [edx]

; 189  :               forceptr[i][j] *= density;

	fld	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	fmul	ST(0), ST(1)
	inc	eax
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _web+616
	cmp	eax, ecx
	jl	SHORT $LN46@facet_forc
$LN48@facet_forc:

; 187  :         for ( i = 0 ; i < FACET_VERTS ; i++ )

	add	edx, 4
	dec	esi
	jne	SHORT $LN49@facet_forc

; 190  :          area = klein_area(x);

	lea	edx, DWORD PTR _x$[ebp]
	fstp	ST(0)
	push	edx
	call	_klein_area
	add	esp, 4
$LN254@facet_forc:

; 195  :       }
; 196  :     goto end_euclidean;

	mov	edx, DWORD PTR _web+616
	mov	ebx, DWORD PTR tv1536[ebp]
$LN219@facet_forc:

; 259  :      }
; 260  :   }
; 261  :   
; 262  :   /* gravity forces, negative of gravity energy gradient */
; 263  :   if ( web.gravflag && !(get_fattr(f_id) & NONCONTENT) )

	fstp	ST(0)
$end_euclidean$89148:

; 282  :      }
; 283  :   }
; 284  : 
; 285  : end_euclidean:
; 286  :   /* accumulate star area around each vertex and edge */
; 287  :    fe_id = get_facet_fe(f_id);

	cmp	DWORD PTR tv1561[ebp], 0
	jne	$LN108@facet_forc
	xor	eax, eax
	jmp	$LN107@facet_forc
$LN50@facet_forc:

; 191  :     }
; 192  :     else
; 193  :       { simplex_force_metric(v_id,x,density,forceptr);

	fld	QWORD PTR _density$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	ecx
	lea	edx, DWORD PTR _v_id$[ebp]
	push	edx
	call	_simplex_force_metric

; 194  :         area = simplex_energy_metric(v_id,x);

	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v_id$[ebp]
	push	ecx
	call	_simplex_energy_metric
	add	esp, 28					; 0000001cH

; 195  :       }
; 196  :     goto end_euclidean;

	jmp	SHORT $LN254@facet_forc
$LN51@facet_forc:

; 197  :   }
; 198  : 
; 199  :   if ( ((square_curvature_flag | mean_curv_int_flag) & EVALUATE)
; 200  :         && !kusner_flag && !conf_edge_curv_flag ) 

	mov	edx, DWORD PTR _mean_curv_int_flag
	or	edx, DWORD PTR _square_curvature_flag
	test	dl, 2
	je	SHORT $LN190@facet_forc
	cmp	DWORD PTR _kusner_flag, 0
	jne	SHORT $LN190@facet_forc
	cmp	DWORD PTR _conf_edge_curv_flag, 0
	jne	SHORT $LN190@facet_forc

; 201  :      sqcurve_force(v_id,e_id,side);

	lea	eax, DWORD PTR _side$[ebp]
	push	eax
	lea	ecx, DWORD PTR _e_id$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v_id$[ebp]
	push	edx
	call	_sqcurve_force
	add	esp, 12					; 0000000cH
$LN190@facet_forc:

; 202  : 
; 203  :   /* calculate area */ 
; 204  :   ss = SDIM_dot(side[0],side[0]);

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _side$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	fstp	QWORD PTR _ss$[ebp]

; 205  :   st = SDIM_dot(side[0],side[1]);

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _side$[ebp+48]
	push	ecx
	lea	edx, DWORD PTR _side$[ebp]
	push	edx
	call	_dot
	fstp	QWORD PTR _st$[ebp]

; 206  :   tt = SDIM_dot(side[1],side[1]);

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _side$[ebp+48]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	fst	QWORD PTR _tt$[ebp]

; 207  :   area = ss*tt-st*st;

	fmul	QWORD PTR _ss$[ebp]
	add	esp, 36					; 00000024H
	fld	QWORD PTR _st$[ebp]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)

; 208  :   if ( area < 0.0 ) area = 0.0; /* stupid inaccurate computers! */

	fldz
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN202@facet_forc
	fstp	ST(1)
	jmp	SHORT $LN41@facet_forc
$LN202@facet_forc:
	fstp	ST(0)
$LN41@facet_forc:

; 209  :   area = sqrt(area)/2;

	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000

; 210  :   set_facet_area(f_id,area);

	mov	eax, DWORD PTR _web+236
	mov	ebx, DWORD PTR tv1536[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	fst	QWORD PTR [ecx+40]

; 211  : 
; 212  :   /* an error check, and accommodation for possibly deliberately
; 213  :       degenerate triangles on boundary */
; 214  :   if ( area <= wee_area )

	fld	QWORD PTR _wee_area
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 1
	jne	$LN40@facet_forc

; 215  :   { facetedge_id ffe;
; 216  :       
; 217  :     ffe = fe_id;
; 218  :     sprintf(errmsg,"WARNING! Zero area for facet %s.\n",ELNAME(f_id));

	cmp	DWORD PTR tv1561[ebp], 0
	fstp	ST(0)
	mov	esi, DWORD PTR _fe_id$[ebp]
	je	SHORT $LN65@facet_forc
	inc	ebx
	push	ebx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN66@facet_forc
$LN65@facet_forc:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN66@facet_forc:
	push	eax
	push	OFFSET ??_C@_0CC@PFALCJIK@WARNING?$CB?5Zero?5area?5for?5facet?5?$CFs?4@
	push	OFFSET _errmsg
	call	_sprintf

; 219  :     outstring(errmsg);

	push	OFFSET _errmsg
	call	_outstring
	add	esp, 16					; 00000010H

; 220  :     if ( itdebug )

	cmp	DWORD PTR _itdebug, 0
	je	$LN9@facet_forc

; 221  :     {
; 222  :       outstring("Facet-edges and side vectors: \n");

	push	OFFSET ??_C@_0CA@BLKNOLCM@Facet?9edges?5and?5side?5vectors?3?5?6?$AA@
	call	_outstring
	add	esp, 4
	lea	edi, DWORD PTR _side$[ebp+8]
	mov	ebx, 3
	npad	7

; 223  :       for ( i = 0 ; i < FACET_EDGES ; i++, ffe = get_next_edge(ffe) )

$LL83@facet_forc:

; 224  :       { 
; 225  :          sprintf(msg," %s    %18.15f %18.15f %18.15f\n",ELNAME(ffe),
; 226  :              (DOUBLE)side[i][0],(DOUBLE)side[i][1],(DOUBLE)side[i][2]);

	test	esi, 268435456				; 10000000H
	je	SHORT $LN67@facet_forc
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	inc	edx
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN68@facet_forc
$LN67@facet_forc:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN68@facet_forc:
	fld	QWORD PTR [edi+8]
	sub	esp, 24					; 00000018H
	fstp	QWORD PTR [esp+16]
	fld	QWORD PTR [edi]
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR [edi-8]
	fstp	QWORD PTR [esp]
	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0CA@IMIILCHB@?5?$CFs?5?5?5?5?$CF18?415f?5?$CF18?415f?5?$CF18?415f?6?$AA@
	push	eax
	call	_sprintf

; 227  :          outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 40					; 00000028H
	add	edi, 48					; 00000030H
	test	esi, 134217728				; 08000000H
	je	SHORT $LN84@facet_forc

; 223  :       for ( i = 0 ; i < FACET_EDGES ; i++, ffe = get_next_edge(ffe) )

	mov	edx, DWORD PTR _web+460
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+esi*4]
	mov	esi, DWORD PTR [eax+28]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN141@facet_forc
$LN84@facet_forc:
	mov	ecx, DWORD PTR _web+460
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	esi, DWORD PTR [edx+32]
$LN141@facet_forc:
	dec	ebx
	jne	$LL83@facet_forc

; 228  :       }
; 229  :       prompt("Hit RETURN to continue.",msg,msgmax);

	mov	eax, DWORD PTR _msgmax
	mov	ecx, DWORD PTR _msg
	push	eax
	push	ecx
	push	OFFSET ??_C@_0BI@COEFBJGO@Hit?5RETURN?5to?5continue?4?$AA@
	call	_prompt
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebx

; 310  :     }
; 311  :   }
; 312  : 
; 313  : }  /* end facet_force_l() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN40@facet_forc:

; 230  :     }
; 231  :     return;
; 232  :   }
; 233  : 
; 234  :   /* get energy covector */
; 235  :   if ( web.wulff_flag )

	cmp	DWORD PTR _web+908, 0
	fld	QWORD PTR __real@3fd0000000000000
	je	$LN35@facet_forc

; 236  :   {
; 237  :      /* calculate normal */ 
; 238  :      cross_prod(side[0],side[1],normal);

	lea	edx, DWORD PTR _normal$[ebp]
	fstp	ST(1)
	push	edx
	fstp	ST(0)
	lea	eax, DWORD PTR _side$[ebp+48]
	push	eax
	lea	ecx, DWORD PTR _side$[ebp]
	push	ecx
	call	_cross_prod

; 239  :      (*get_wulff)(normal,wulff);

	lea	edx, DWORD PTR _wulff$[ebp]
	push	edx
	lea	eax, DWORD PTR _normal$[ebp]
	push	eax
	call	DWORD PTR _get_wulff

; 240  :      if ( get_fattr(f_id) & DENSITY )

	mov	ecx, DWORD PTR _web+236
	mov	eax, DWORD PTR [ecx+ebx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 16					; 00000010H
	xor	ecx, ecx
	add	esp, 20					; 00000014H
	or	eax, ecx
	je	SHORT $LN191@facet_forc

; 241  :        for ( i = 0 ; i < SDIM ; i++ )

	mov	ecx, DWORD PTR _web+616
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN191@facet_forc
	fld	QWORD PTR _density$[ebp]
$LN33@facet_forc:

; 242  :         wulff[i] *= density;

	fld	ST(0)
	inc	eax
	fmul	QWORD PTR _wulff$[ebp+eax*8-8]
	fstp	QWORD PTR _wulff$[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LN33@facet_forc

; 241  :        for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)
$LN191@facet_forc:

; 243  :      /* force on each vertex */
; 244  :      for ( i = 0 ; i < FACET_VERTS ; i++ )  /* vertex loop */

	xor	eax, eax
	lea	edi, DWORD PTR _forces$[ebp]
	npad	3
$LL30@facet_forc:

; 245  :       { int k;
; 246  :         j = (i+1)%FACET_EDGES;  /* opposite side */

	lea	esi, DWORD PTR [eax+1]

; 247  :         cross_prod(side[j],wulff,temp);

	lea	edx, DWORD PTR _temp$[ebp]
	push	edx
	lea	eax, DWORD PTR _wulff$[ebp]
	push	eax
	mov	eax, esi
	cdq
	mov	ecx, 3
	idiv	ecx
	lea	edx, DWORD PTR [edx+edx*2]
	add	edx, edx
	lea	eax, DWORD PTR _side$[ebp+edx*8]
	push	eax
	call	_cross_prod

; 248  :         for ( k = 0 ; k < SDIM ; k++ ) forces[i][k] += temp[k]/2;

	mov	edx, DWORD PTR _web+616
	add	esp, 12					; 0000000cH
	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN29@facet_forc

; 247  :         cross_prod(side[j],wulff,temp);

	fld	QWORD PTR __real@3fe0000000000000
	mov	ecx, edi
$LN27@facet_forc:

; 248  :         for ( k = 0 ; k < SDIM ; k++ ) forces[i][k] += temp[k]/2;

	fld	QWORD PTR _temp$[ebp+eax*8]
	inc	eax
	fmul	ST(0), ST(1)
	add	ecx, 8
	fadd	QWORD PTR [ecx-8]
	fstp	QWORD PTR [ecx-8]
	cmp	eax, edx
	jl	SHORT $LN27@facet_forc
	fstp	ST(0)
$LN29@facet_forc:

; 243  :      /* force on each vertex */
; 244  :      for ( i = 0 ; i < FACET_VERTS ; i++ )  /* vertex loop */

	mov	eax, esi
	add	edi, 48					; 00000030H
	cmp	eax, 3
	jl	SHORT $LL30@facet_forc

; 249  :       }
; 250  :   }
; 251  :   else

	fld	QWORD PTR __real@3fd0000000000000
	jmp	$LN21@facet_forc
$LN35@facet_forc:

; 252  :   { REAL coeff = density/4/area;

	fld	QWORD PTR _density$[ebp]

; 253  :      int k;
; 254  :      for ( k = 0 ; k < SDIM ; k++ )

	mov	edx, DWORD PTR _web+616
	fmul	ST(0), ST(1)
	xor	eax, eax
	fdivrp	ST(2), ST(0)
	test	edx, edx
	jle	SHORT $LN211@facet_forc
	fld	QWORD PTR _tt$[ebp]
	fld	QWORD PTR _st$[ebp]
	fld	QWORD PTR _ss$[ebp]
$LN23@facet_forc:

; 255  :      { forces[0][k] += coeff*(side[0][k]*tt - st*side[1][k]);

	fld	QWORD PTR _side$[ebp+eax*8]
	inc	eax
	fmul	ST(0), ST(3)
	fld	QWORD PTR _side$[ebp+eax*8+40]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fld	ST(0)
	fadd	QWORD PTR _forces$[ebp+eax*8-8]
	fstp	QWORD PTR _forces$[ebp+eax*8-8]

; 256  :        forces[1][k] -= coeff*(side[0][k]*tt - st*side[1][k]);
; 257  :        forces[1][k] += coeff*(ss*side[1][k] - st*side[0][k]);

	fld	QWORD PTR _side$[ebp+eax*8+40]
	fmul	ST(0), ST(2)
	fld	QWORD PTR _side$[ebp+eax*8-8]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(6)
	fld	QWORD PTR _forces$[ebp+eax*8+40]
	fsubrp	ST(2), ST(0)
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _forces$[ebp+eax*8+40]

; 258  :        forces[2][k] -= coeff*(ss*side[1][k] - st*side[0][k]);

	fsubr	QWORD PTR _forces$[ebp+eax*8+88]
	fstp	QWORD PTR _forces$[ebp+eax*8+88]
	cmp	eax, edx
	jl	SHORT $LN23@facet_forc

; 253  :      int k;
; 254  :      for ( k = 0 ; k < SDIM ; k++ )

	fstp	ST(4)
	fstp	ST(0)
	fstp	ST(2)
$LN211@facet_forc:
	fstp	ST(1)
$LN21@facet_forc:

; 259  :      }
; 260  :   }
; 261  :   
; 262  :   /* gravity forces, negative of gravity energy gradient */
; 263  :   if ( web.gravflag && !(get_fattr(f_id) & NONCONTENT) )

	cmp	DWORD PTR _web+824, 0
	je	$LN219@facet_forc
	mov	ecx, DWORD PTR _web+236
	mov	ecx, DWORD PTR [ecx+ebx*4]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 536870912				; 20000000H
	xor	esi, esi
	or	eax, esi
	jne	$LN219@facet_forc

; 264  :   {  REAL zz;     /* average z*z          */
; 265  :      REAL gdensity;  /* net density difference of bodies across facet */
; 266  :      REAL normz;     /* facet normal component in z direction */
; 267  :      zz = (z[0]*z[0]+z[1]*z[1]+z[2]*z[2]+z[0]*z[1]+z[1]*z[2]+z[0]*z[2])/6;

	fld	QWORD PTR _z$[ebp+8]

; 268  :      b_id = get_facet_body(f_id);

	mov	ebx, DWORD PTR _web+400
	fld	ST(0)
	mov	esi, DWORD PTR _web+328
	fmul	ST(0), ST(1)
	mov	edi, DWORD PTR _dymem
	fld	QWORD PTR _z$[ebp]
	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(2), ST(0)
	fld	QWORD PTR _z$[ebp+16]
	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(3), ST(0)
	fld	ST(3)
	fmul	ST(0), ST(2)
	faddp	ST(3), ST(0)
	fld	ST(0)
	fmul	ST(0), ST(4)
	faddp	ST(3), ST(0)
	fld	ST(0)
	fmul	ST(0), ST(2)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fdiv	QWORD PTR __real@4018000000000000
	test	ebx, ebx
	je	SHORT $LN87@facet_forc
$LN90@facet_forc:
	cmp	DWORD PTR tv1561[ebp], 0
	jne	SHORT $LN89@facet_forc
	xor	eax, eax
	jmp	SHORT $LN87@facet_forc
$LN89@facet_forc:
	test	DWORD PTR _f_id$GSCopy$[ebp], 134217728	; 08000000H
	mov	eax, DWORD PTR [esi+edi+784]
	je	SHORT $LN88@facet_forc
	mov	eax, DWORD PTR [eax+ecx+4]
	jmp	SHORT $LN87@facet_forc
$LN88@facet_forc:
	mov	eax, DWORD PTR [ecx+eax]
$LN87@facet_forc:

; 269  :      gdensity = 0.0;

	fldz

; 270  :      if ( valid_id(b_id) )

	mov	ecx, DWORD PTR _web+348
	fld	ST(0)
	fst	QWORD PTR _gdensity$89195[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN226@facet_forc

; 271  :       gdensity += get_body_density(b_id);

	and	eax, 134217727				; 07ffffffH
	fstp	ST(0)
	mov	eax, DWORD PTR [ecx+eax*4]
	fadd	QWORD PTR [eax+344]
	fst	QWORD PTR _gdensity$89195[ebp]
	jmp	SHORT $LN192@facet_forc
$LN226@facet_forc:
	fstp	ST(1)
$LN192@facet_forc:

; 272  :      b_id = get_facet_body(facet_inverse(f_id));

	mov	eax, DWORD PTR _f_id$GSCopy$[ebp]
	xor	eax, 134217728				; 08000000H
	test	ebx, ebx
	jne	SHORT $LN100@facet_forc
	xor	eax, eax
	jmp	SHORT $LN97@facet_forc
$LN100@facet_forc:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN99@facet_forc
	xor	eax, eax
	jmp	SHORT $LN97@facet_forc
$LN99@facet_forc:
	mov	ebx, DWORD PTR _web+236
	mov	esi, DWORD PTR [esi+edi+784]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN98@facet_forc
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	eax, DWORD PTR [eax+esi+4]
	jmp	SHORT $LN97@facet_forc
$LN98@facet_forc:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	eax, DWORD PTR [eax+esi]
$LN97@facet_forc:

; 273  :      if ( valid_id(b_id) )

	test	eax, 268435456				; 10000000H
	je	SHORT $LN233@facet_forc

; 274  :       gdensity -= get_body_density(b_id);

	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]
	fsub	QWORD PTR [ecx+344]
	fstp	QWORD PTR _gdensity$89195[ebp]
	jmp	SHORT $LN18@facet_forc
$LN233@facet_forc:
	fstp	ST(0)
$LN18@facet_forc:

; 275  :      normz = side[0][0]*side[1][1] - side[0][1]*side[1][0];

	fld	QWORD PTR _side$[ebp+56]

; 276  :      for ( i = 0 ; i < FACET_VERTS ; i++ )  /* vertex loop */
; 277  :      {
; 278  :        j = (i+1)%FACET_EDGES;  /* opposite side */
; 279  :        forces[i][0] += web.grav_const*gdensity*side[j][1]*zz/4;
; 280  :        forces[i][1] -= web.grav_const*gdensity*side[j][0]*zz/4;
; 281  :        forces[i][2] -= web.grav_const*gdensity*normz*(z[i]+z[0]+z[1]+z[2])/24;

	mov	ebx, DWORD PTR tv1536[ebp]
	fmul	QWORD PTR _side$[ebp]
	fld	QWORD PTR _side$[ebp+48]
	fmul	QWORD PTR _side$[ebp+8]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _normz$89196[ebp]
	fld	QWORD PTR _gdensity$89195[ebp]
	fmul	QWORD PTR _web+832
	fld	QWORD PTR _side$[ebp+56]
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(6)
	fadd	QWORD PTR _forces$[ebp]
	fstp	QWORD PTR _forces$[ebp]
	fld	QWORD PTR _side$[ebp+48]
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(6)
	fsubr	QWORD PTR _forces$[ebp+8]
	fstp	QWORD PTR _forces$[ebp+8]
	fld	QWORD PTR _normz$89196[ebp]
	fmul	ST(0), ST(1)
	fst	QWORD PTR tv1883[ebp]
	fld	ST(3)
	fadd	ST(0), ST(4)
	fadd	ST(0), ST(6)
	fadd	ST(0), ST(5)
	fmulp	ST(1), ST(0)
	fdiv	QWORD PTR __real@4038000000000000
	fsubr	QWORD PTR _forces$[ebp+16]
	fstp	QWORD PTR _forces$[ebp+16]
	fld	QWORD PTR _side$[ebp+104]
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(6)
	fadd	QWORD PTR _forces$[ebp+48]
	fstp	QWORD PTR _forces$[ebp+48]
	fld	QWORD PTR _side$[ebp+96]
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(6)
	fsubr	QWORD PTR _forces$[ebp+56]
	fstp	QWORD PTR _forces$[ebp+56]
	fld	ST(4)
	fadd	ST(0), ST(3)
	fadd	ST(0), ST(5)
	fadd	ST(0), ST(4)
	fmul	QWORD PTR tv1883[ebp]
	fdiv	QWORD PTR __real@4038000000000000
	fsubr	QWORD PTR _forces$[ebp+64]
	fstp	QWORD PTR _forces$[ebp+64]
	fld	QWORD PTR _side$[ebp+8]
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(6)
	fadd	QWORD PTR _forces$[ebp+96]
	fstp	QWORD PTR _forces$[ebp+96]
	fmul	QWORD PTR _side$[ebp]
	fmulp	ST(1), ST(0)
	fmulp	ST(4), ST(0)
	fld	QWORD PTR _forces$[ebp+104]
	fsubrp	ST(4), ST(0)
	fxch	ST(3)
	fstp	QWORD PTR _forces$[ebp+104]
	fld	ST(0)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR tv1883[ebp]
	fdiv	QWORD PTR __real@4038000000000000
	fsubr	QWORD PTR _forces$[ebp+112]
	fstp	QWORD PTR _forces$[ebp+112]
	jmp	$end_euclidean$89148

; 282  :      }
; 283  :   }
; 284  : 
; 285  : end_euclidean:
; 286  :   /* accumulate star area around each vertex and edge */
; 287  :    fe_id = get_facet_fe(f_id);

$LN108@facet_forc:
	test	DWORD PTR _f_id$GSCopy$[ebp], 134217728	; 08000000H
	mov	eax, DWORD PTR _web+236
	mov	ecx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR [ecx+28]
	je	SHORT $LN107@facet_forc
	xor	eax, 134217728				; 08000000H
$LN107@facet_forc:

; 288  :    for ( i = 0 ; i < FACET_VERTS ; i++ )  /* vertex loop */
; 289  :      { edge_id ee_id;
; 290  :        vertex_id vv_id;
; 291  :        ee_id = get_fe_edge(fe_id);
; 292  :        vv_id = get_edge_headv(ee_id);
; 293  :        fe_id = get_next_edge(fe_id);

	shr	eax, 27					; 0000001bH

; 294  :      }
; 295  : 
; 296  :   /* add to totals, unwrapping if necessary */
; 297  :   for ( i = 0 ; i < FACET_VERTS ; i++ )  /* vertex loop */

	lea	edi, DWORD PTR _forces$[ebp]
	and	eax, 1
	mov	DWORD PTR tv3056[ebp], edi
	xor	ebx, ebx
	npad	2
$LL193@facet_forc:

; 298  :   { REAL *force; 
; 299  :     REAL wforce[MAXCOORD];  /* unwrapped forces */
; 300  : 
; 301  :     force = get_force(v_id[i]);

	mov	eax, DWORD PTR _v_id$[ebp+ebx]
	mov	ecx, DWORD PTR _web+12
	mov	esi, DWORD PTR _web+104
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _dymem
	mov	esi, DWORD PTR [esi+ecx+784]
	add	esi, eax

; 302  :     if ( web.symmetry_flag )

	cmp	DWORD PTR _web+856, 0
	je	SHORT $LN8@facet_forc

; 303  :     { (*sym_form_pullback)(get_coord(v_id[i]),wforce,forces[i],wraps[i]);

	mov	edx, DWORD PTR _wraps$[ebp+ebx]
	push	edx
	mov	edx, DWORD PTR _web+104
	push	edi
	lea	ecx, DWORD PTR _wforce$89213[ebp]
	push	ecx
	mov	ecx, DWORD PTR _dymem
	mov	edx, DWORD PTR [edx+ecx+64]
	add	edx, eax
	push	edx
	call	DWORD PTR _sym_form_pullback

; 304  :       for ( j = 0 ; j < SDIM ; j++ )

	mov	edx, DWORD PTR _web+616
	add	esp, 16					; 00000010H
	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN10@facet_forc
	lea	edi, DWORD PTR _wforce$89213[ebp]
	mov	eax, esi
	sub	edi, esi
$LL7@facet_forc:

; 305  :         force[j] += wforce[j];

	fld	QWORD PTR [edi+eax]
	inc	ecx
	fadd	QWORD PTR [eax]
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	mov	edx, DWORD PTR _web+616
	cmp	ecx, edx
	jl	SHORT $LL7@facet_forc

; 306  :     }
; 307  :     else

	mov	edi, DWORD PTR tv3056[ebp]
	jmp	SHORT $LN10@facet_forc
$LN8@facet_forc:

; 308  :     { for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN10@facet_forc
	mov	ecx, edi
$LL3@facet_forc:

; 309  :         force[j] += forces[i][j];

	fld	QWORD PTR [esi+eax*8]
	inc	eax
	fadd	QWORD PTR [ecx]
	add	ecx, 8
	fstp	QWORD PTR [esi+eax*8-8]
	mov	edx, DWORD PTR _web+616
	cmp	eax, edx
	jl	SHORT $LL3@facet_forc
$LN10@facet_forc:

; 294  :      }
; 295  : 
; 296  :   /* add to totals, unwrapping if necessary */
; 297  :   for ( i = 0 ; i < FACET_VERTS ; i++ )  /* vertex loop */

	add	ebx, 4
	add	edi, 48					; 00000030H
	mov	DWORD PTR tv3056[ebp], edi
	cmp	ebx, 12					; 0000000cH
	jl	$LL193@facet_forc
$LN9@facet_forc:

; 310  :     }
; 311  :   }
; 312  : 
; 313  : }  /* end facet_force_l() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_force_l ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_facet_volume_l
EXTRN	_add_body_volume:PROC
EXTRN	_mat2d_setup:PROC
EXTRN	_triple_prod:PROC
; Function compile flags: /Ogtp
;	COMDAT _facet_volume_l
_TEXT	SEGMENT
_xqXvS$89267 = -336					; size = 24
_vol$ = -312						; size = 8
tv444 = -304						; size = 4
_b_id0$ = -300						; size = 4
_b_id1$ = -296						; size = 4
_xxJ$89268 = -292					; size = 288
__$ArrayPad$ = -4					; size = 4
_f_id$ = 8						; size = 4
_facet_volume_l PROC					; COMDAT

; 326  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 327  :   body_id b_id0,b_id1;
; 328  :   facetedge_id fe_id;
; 329  :   REAL vol;
; 330  :      
; 331  :   if ( get_fattr(f_id) & NONCONTENT ) return;

	mov	eax, DWORD PTR _web+236
	push	esi
	mov	esi, DWORD PTR _f_id$[ebp]
	push	edi
	mov	edi, esi
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	eax, DWORD PTR [edi+eax]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 536870912				; 20000000H
	xor	ecx, ecx
	or	eax, ecx
	jne	$LN1@facet_volu

; 332  : 
; 333  :   int_val = ordinal(get_original(f_id))+1;  /* for eval  of file parameters */

	mov	ecx, esi
	shr	ecx, 29					; 0000001dH
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _web[ecx+12]
	mov	eax, DWORD PTR [edx+edi]
	mov	eax, DWORD PTR [eax+20]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN9@facet_volu
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN10@facet_volu
$LN9@facet_volu:
	or	eax, -1
$LN10@facet_volu:
	push	ebx
	inc	eax

; 334  :   b_id0 = get_facet_body(f_id);

	push	esi
	mov	DWORD PTR _int_val, eax
	call	_get_facet_body

; 335  :   b_id1 = get_facet_body(facet_inverse(f_id));

	mov	ecx, esi
	xor	ecx, 134217728				; 08000000H
	mov	ebx, eax
	push	ecx
	mov	DWORD PTR _b_id0$[ebp], ebx
	call	_get_facet_body

; 336  :   if ( !valid_id(b_id0) && !valid_id(b_id1) ) return;

	shr	ebx, 28					; 0000001cH
	add	esp, 8
	and	ebx, 1
	mov	DWORD PTR _b_id1$[ebp], eax
	mov	DWORD PTR tv444[ebp], ebx
	jne	SHORT $LN25@facet_volu
	test	eax, 268435456				; 10000000H
	je	$LN26@facet_volu
$LN25@facet_volu:

; 337  :      
; 338  :   if ( web.symmetric_content )

	cmp	DWORD PTR _web+808, 0
	je	$LN4@facet_volu

; 339  :   { vertex_id v1,v2,v3;
; 340  :     facetedge_id next_fe;
; 341  :     fe_id = get_facet_fe(f_id);

	test	esi, 268435456				; 10000000H
	jne	SHORT $LN12@facet_volu
	xor	eax, eax
	jmp	SHORT $LN11@facet_volu
$LN12@facet_volu:
	mov	edx, DWORD PTR _web+236
	mov	eax, DWORD PTR [edi+edx]
	mov	eax, DWORD PTR [eax+28]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN11@facet_volu
	xor	eax, 134217728				; 08000000H
$LN11@facet_volu:

; 342  :     next_fe = get_next_edge(fe_id);

	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN16@facet_volu
	mov	esi, DWORD PTR [ecx+28]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN15@facet_volu
$LN16@facet_volu:
	mov	esi, DWORD PTR [ecx+32]
$LN15@facet_volu:

; 343  :     v1 = get_fe_tailv(fe_id);

	mov	edi, DWORD PTR [ecx+20]
	and	eax, 134217728				; 08000000H
	xor	edi, eax
	push	edi
	call	_get_edge_tailv

; 344  :     v2 = get_fe_headv(fe_id);

	push	edi
	mov	ebx, eax
	call	_get_edge_headv

; 345  :     v3 = get_fe_headv(next_fe);

	mov	ecx, DWORD PTR _web+460
	mov	edi, eax
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [edx+20]
	push	esi
	call	_get_edge_headv

; 346  :     vol = triple_prod(get_coord(v1), get_coord(v2), get_coord(v3))/6;

	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+104
	mov	ecx, DWORD PTR [ecx+edx+64]
	mov	edx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	add	eax, ecx
	push	eax
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+edi*4]
	and	ebx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+ebx*4]
	add	eax, ecx
	push	eax
	add	edx, ecx
	push	edx
	call	_triple_prod
	fdiv	QWORD PTR __real@4018000000000000

; 347  :   }
; 348  :   else

	mov	ebx, DWORD PTR tv444[ebp]
	add	esp, 24					; 00000018H
	jmp	SHORT $LN34@facet_volu
$LN4@facet_volu:

; 349  :   { MAT2D(x,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	eax, DWORD PTR _xxJ$89268[ebp]
	push	eax
	lea	ecx, DWORD PTR _xqXvS$89267[ebp]
	push	ecx
	call	_mat2d_setup
	mov	edi, eax

; 350  :     get_facet_verts(f_id,x,NULL);

	push	0
	push	edi
	push	esi
	call	_get_facet_verts

; 351  :     vol = (x[0][2]+x[1][2]+x[2][2])/6*
; 352  :      ((x[1][0]-x[0][0])*(x[2][1]-x[0][1])-(x[1][1]-x[0][1])*(x[2][0]-x[0][0]));

	mov	ecx, DWORD PTR [edi+8]
	mov	eax, DWORD PTR [edi]
	fld	QWORD PTR [ecx+8]
	fsub	QWORD PTR [eax+8]
	mov	edi, DWORD PTR [edi+4]
	fld	QWORD PTR [edi]
	add	esp, 28					; 0000001cH
	fsub	QWORD PTR [eax]
	fmulp	ST(1), ST(0)
	fld	QWORD PTR [edi+8]
	fsub	QWORD PTR [eax+8]
	fld	QWORD PTR [ecx]
	fsub	QWORD PTR [eax]
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edi+16]
	fadd	QWORD PTR [eax+16]
	fadd	QWORD PTR [ecx+16]
	fdiv	QWORD PTR __real@4018000000000000
	fmulp	ST(1), ST(0)
$LN34@facet_volu:
	fst	QWORD PTR _vol$[ebp]

; 353  :   }
; 354  :      
; 355  :   /* add to body volumes */
; 356  :   if ( valid_id(b_id0) ) 

	test	ebx, ebx
	je	SHORT $LN2@facet_volu

; 357  :     add_body_volume(b_id0,vol);

	mov	edx, DWORD PTR _b_id0$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	edx
	call	_add_body_volume
	fld	QWORD PTR _vol$[ebp]
	add	esp, 12					; 0000000cH
$LN2@facet_volu:

; 358  :   
; 359  :   if ( valid_id(b_id1) ) 

	mov	eax, DWORD PTR _b_id1$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN32@facet_volu

; 360  :     add_body_volume(b_id1,-vol);

	sub	esp, 8
	fchs
	fstp	QWORD PTR [esp]
	push	eax
	call	_add_body_volume
	add	esp, 12					; 0000000cH
	pop	ebx
	pop	edi
	pop	esi

; 361  : 
; 362  : } /* end facet_volume_l() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN32@facet_volu:

; 358  :   
; 359  :   if ( valid_id(b_id1) ) 

	fstp	ST(0)
$LN26@facet_volu:
	pop	ebx
$LN1@facet_volu:

; 361  : 
; 362  : } /* end facet_volume_l() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_volume_l ENDP
_TEXT	ENDS
PUBLIC	__real@c018000000000000
PUBLIC	??_C@_0DM@EIDFJAJG@Have?5to?5do?5convert_to_quantities@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_film_grad_l
EXTRN	_get_edge_side:PROC
EXTRN	_get_bv_new_vgrad:PROC
EXTRN	_q_facet_torus_volume_grad:PROC
EXTRN	_q_facet_setup:PROC
EXTRN	_kb_error:PROC
EXTRN	_sym_flags:DWORD
EXTRN	_q_info_init:PROC
;	COMDAT __real@c018000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@c018000000000000 DQ 0c018000000000000r	; -6
CONST	ENDS
;	COMDAT ??_C@_0DM@EIDFJAJG@Have?5to?5do?5convert_to_quantities@
CONST	SEGMENT
??_C@_0DM@EIDFJAJG@Have?5to?5do?5convert_to_quantities@ DB 'Have to do co'
	DB	'nvert_to_quantities with this symmetry group.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\filml.c
CONST	ENDS
;	COMDAT _film_grad_l
_TEXT	SEGMENT
_x$ = -428						; size = 12
_f_info$ = -416						; size = 4
tv1640 = -412						; size = 4
_z$ = -408						; size = 8
_f_id$ = -404						; size = 4
tv1579 = -400						; size = 4
tv2369 = -396						; size = 4
tv1704 = -396						; size = 4
_bi_id$ = -392						; size = 4
tv2349 = -388						; size = 4
tv1410 = -388						; size = 4
tv825 = -388						; size = 4
tv1576 = -384						; size = 4
_v_id$ = -384						; size = 4
_bj_id$ = -380						; size = 4
_side$ = -376						; size = 144
_unwrap_x$ = -232					; size = 144
_wraps$89305 = -88					; size = 12
_normal$ = -64						; size = 48
_v_ids$89325 = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_film_grad_l PROC					; COMDAT

; 375  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 428				; 000001acH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 376  :   body_id bi_id;  /* identifier for body i */
; 377  :   body_id bj_id;  /* identifier for body j */
; 378  :   facetedge_id fe;
; 379  :   vertex_id v_id;
; 380  :   facet_id f_id;
; 381  :   facetedge_id fe_id;
; 382  :   int i,k;
; 383  :   volgrad *vgptr;
; 384  :   REAL z;
; 385  :   REAL side[FACET_EDGES][MAXCOORD];
; 386  :   REAL normal[MAXCOORD];
; 387  :   REAL *x[FACET_VERTS];  /* coordinates of vertices */
; 388  :   REAL unwrap_x[FACET_VERTS][MAXCOORD];
; 389  : 
; 390  : #ifdef NEWTORVOL
; 391  :   struct qinfo *f_info = &(GET_THREAD_DATA->q_info); /* for calling q_facet_torus_volume */

	mov	eax, DWORD PTR _thread_data_key
	push	eax
	call	_win_get_thread_data
	add	eax, 56					; 00000038H
	add	esp, 4

; 392  : 
; 393  :   if ( f_info->grad == NULL )

	cmp	DWORD PTR [eax+1336], 0
	mov	DWORD PTR _f_info$[ebp], eax
	jne	SHORT $LN65@film_grad_

; 394  :     q_info_init(f_info,METHOD_GRADIENT);

	push	4321					; 000010e1H
	push	eax
	call	_q_info_init
	add	esp, 8
$LN65@film_grad_:

; 395  : #endif
; 396  : 
; 397  : 
; 398  :   if ( sym_flags & NEED_FORM_UNWRAPPING )

	test	BYTE PTR _sym_flags, 2
	je	SHORT $LN64@film_grad_

; 399  :      kb_error(1035,"Have to do convert_to_quantities with this symmetry group.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DM@EIDFJAJG@Have?5to?5do?5convert_to_quantities@
	push	1035					; 0000040bH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN64@film_grad_:

; 400  : 
; 401  :   FOR_ALL_FACETS(f_id)

	mov	eax, DWORD PTR _web+272
	mov	ecx, eax
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	mov	DWORD PTR _f_id$[ebp], eax
	mov	DWORD PTR tv1576[ebp], ecx
	je	$LN61@film_grad_
	mov	edx, DWORD PTR _web+236
	push	ebx
	push	esi
	push	edi
	jmp	SHORT $LN63@film_grad_
	npad	8
$LL234@film_grad_:
	mov	eax, DWORD PTR _f_id$[ebp]
$LN63@film_grad_:
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv1579[ebp], eax
	mov	eax, DWORD PTR [eax+edx]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	ecx, ecx
	or	eax, ecx
	je	$LN62@film_grad_

; 402  :   { 
; 403  :     WRAPTYPE wraps[3];
; 404  :     int_val = ordinal(get_original(f_id))+1;  /* for eval  of file parameters */

	mov	ebx, DWORD PTR _f_id$[ebp]
	mov	esi, DWORD PTR tv1579[ebp]
	mov	ecx, ebx
	shr	ecx, 29					; 0000001dH
	imul	ecx, 112				; 00000070H
	mov	eax, DWORD PTR _web[ecx+12]
	mov	ecx, DWORD PTR [eax+esi]
	mov	eax, DWORD PTR [ecx+20]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN68@film_grad_
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN69@film_grad_
$LN68@film_grad_:
	or	eax, -1
$LN69@film_grad_:

; 405  :     bi_id = get_facet_body(f_id);

	mov	edi, DWORD PTR _dymem
	inc	eax
	cmp	DWORD PTR _web+400, 0
	mov	DWORD PTR _int_val, eax
	jne	SHORT $LN73@film_grad_
	xor	ecx, ecx
	jmp	SHORT $LN243@film_grad_
$LN73@film_grad_:
	cmp	DWORD PTR tv1576[ebp], 0
	jne	SHORT $LN72@film_grad_
	xor	ecx, ecx
	jmp	SHORT $LN243@film_grad_
$LN72@film_grad_:
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN71@film_grad_
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR [eax+edi+784]
	mov	eax, DWORD PTR [esi+edx]
	mov	ecx, DWORD PTR [ecx+eax+4]
	jmp	SHORT $LN243@film_grad_
$LN71@film_grad_:
	mov	ecx, DWORD PTR _web+328
	mov	eax, DWORD PTR [ecx+edi+784]
	mov	ecx, DWORD PTR [esi+edx]
	mov	ecx, DWORD PTR [eax+ecx]
$LN243@film_grad_:

; 406  :     bj_id = get_facet_body(facet_inverse(f_id));

	mov	eax, ebx
	xor	eax, 134217728				; 08000000H
	cmp	DWORD PTR _web+400, 0
	mov	DWORD PTR _bi_id$[ebp], ecx
	jne	SHORT $LN79@film_grad_
	xor	ebx, ebx
	jmp	SHORT $LN244@film_grad_
$LN79@film_grad_:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN78@film_grad_
	xor	ebx, ebx
	jmp	SHORT $LN244@film_grad_
$LN78@film_grad_:
	mov	ebx, DWORD PTR _web+328
	mov	ebx, DWORD PTR [ebx+edi+784]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN77@film_grad_
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	ebx, DWORD PTR [eax+ebx+4]
	jmp	SHORT $LN244@film_grad_
$LN77@film_grad_:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	ebx, DWORD PTR [eax+ebx]
$LN244@film_grad_:

; 407  :     if ( (!valid_id(bi_id) || !(get_battr(bi_id) & (FIXEDVOL|PRESSURE)) )
; 408  :      && (!valid_id(bj_id) || !(get_battr(bj_id) & (FIXEDVOL|PRESSURE)) ) )

	mov	eax, ecx
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR _bj_id$[ebp], ebx
	mov	DWORD PTR tv1640[ebp], eax
	je	SHORT $LN229@film_grad_
	mov	eax, DWORD PTR _web+348
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 2080				; 00000820H
	xor	ecx, ecx
	or	eax, ecx
	jne	SHORT $LN236@film_grad_
$LN229@film_grad_:
	test	ebx, 268435456				; 10000000H
	je	$LN62@film_grad_
	mov	ecx, DWORD PTR _bj_id$[ebp]
	mov	eax, DWORD PTR _web+348
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 2080				; 00000820H
	xor	ecx, ecx
	or	eax, ecx
	je	$LN62@film_grad_
	mov	edi, DWORD PTR _dymem
	mov	esi, DWORD PTR tv1579[ebp]
$LN236@film_grad_:

; 409  :       continue;
; 410  : 
; 411  :     if ( web.torus_flag )

	cmp	DWORD PTR _web+860, 0
	je	$LN55@film_grad_

; 412  :     { 
; 413  : #ifdef NEWTORVOL
; 414  :       int n;
; 415  :       vertex_id v_ids[FACET_EDGES];
; 416  :       
; 417  :       /* get basic info */ 
; 418  :       fe = get_facet_fe(f_id);

	cmp	DWORD PTR tv1576[ebp], 0
	jne	SHORT $LN83@film_grad_
	xor	edx, edx
	jmp	SHORT $LN82@film_grad_
$LN83@film_grad_:
	test	DWORD PTR _f_id$[ebp], 134217728	; 08000000H
	mov	ecx, DWORD PTR [esi+edx]
	mov	edx, DWORD PTR [ecx+28]
	je	SHORT $LN82@film_grad_
	xor	edx, 134217728				; 08000000H
$LN82@film_grad_:

; 419  :       for ( i = 0 ; i < FACET_EDGES ; i ++ )
; 420  :       { v_ids[i] = get_fe_tailv(fe);

	mov	ecx, DWORD PTR _web+460
	mov	esi, DWORD PTR _web+636
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+edi+304]
	mov	edi, DWORD PTR _web+124
	mov	eax, edx
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ebx+20]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN89@film_grad_
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	lea	eax, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR [eax+ecx]
	jmp	SHORT $LN88@film_grad_
$LN89@film_grad_:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [ecx+eax]
$LN88@film_grad_:
	mov	DWORD PTR _v_ids$89325[ebp], eax

; 421  :         fe = get_next_edge(fe);

	test	edx, 134217728				; 08000000H
	je	SHORT $LN93@film_grad_
	mov	edx, DWORD PTR [ebx+28]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN53@film_grad_
$LN93@film_grad_:
	mov	edx, DWORD PTR [ebx+32]
$LN53@film_grad_:

; 419  :       for ( i = 0 ; i < FACET_EDGES ; i ++ )
; 420  :       { v_ids[i] = get_fe_tailv(fe);

	mov	ebx, DWORD PTR _web+460
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ebx+eax*4]
	mov	eax, edx
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ebx+20]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN197@film_grad_
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	lea	eax, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR [eax+ecx]
	jmp	SHORT $LN198@film_grad_
$LN197@film_grad_:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [ecx+eax]
$LN198@film_grad_:
	mov	DWORD PTR _v_ids$89325[ebp+4], eax

; 421  :         fe = get_next_edge(fe);

	test	edx, 134217728				; 08000000H
	je	SHORT $LN199@film_grad_
	mov	eax, DWORD PTR [ebx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN200@film_grad_
$LN199@film_grad_:
	mov	eax, DWORD PTR [ebx+32]
$LN200@film_grad_:

; 419  :       for ( i = 0 ; i < FACET_EDGES ; i ++ )
; 420  :       { v_ids[i] = get_fe_tailv(fe);

	mov	ebx, DWORD PTR _web+460
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN202@film_grad_
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	lea	edx, DWORD PTR [eax+esi*4]
	mov	ecx, DWORD PTR [edx+ecx]
	jmp	SHORT $LN203@film_grad_
$LN202@film_grad_:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	ecx, DWORD PTR [ecx+eax]
$LN203@film_grad_:

; 422  :       }
; 423  : 
; 424  :       f_info->id = f_id;

	mov	esi, DWORD PTR _f_info$[ebp]

; 425  :       q_facet_setup(NULL,f_info,NEED_SIDE|TORUS_MODULO_MUNGE|ORIENTABLE_METHOD);

	push	327696					; 00050010H
	mov	DWORD PTR _v_ids$89325[ebp+8], ecx
	mov	ecx, DWORD PTR _f_id$[ebp]
	push	esi
	push	0
	mov	DWORD PTR [esi], ecx
	call	_q_facet_setup

; 426  :       q_facet_torus_volume_grad(f_info);

	push	esi
	call	_q_facet_torus_volume_grad
	fstp	ST(0)
	add	esp, 16					; 00000010H

; 427  : 
; 428  :       if ( valid_id(bi_id) && (get_battr(bi_id) & (FIXEDVOL|PRESSURE)) )

	cmp	DWORD PTR tv1640[ebp], 0
	je	$LN219@film_grad_
	mov	ebx, DWORD PTR _bi_id$[ebp]
	mov	edx, DWORD PTR _web+348
	and	ebx, 134217727				; 07ffffffH
	add	ebx, ebx
	add	ebx, ebx
	mov	eax, DWORD PTR [ebx+edx]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 2080				; 00000820H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN219@film_grad_

; 429  :         for ( i = 0 ; i < FACET_VERTS ; i++ )

	xor	esi, esi
	npad	1
$LL218@film_grad_:

; 430  :         { vgptr = get_bv_new_vgrad(get_body_fixnum(bi_id),v_ids[i]);

	mov	ecx, DWORD PTR _web+348
	mov	eax, DWORD PTR _v_ids$89325[ebp+esi]
	mov	edx, DWORD PTR [ebx+ecx]
	push	eax
	mov	eax, DWORD PTR [edx+420]
	push	eax
	call	_get_bv_new_vgrad

; 431  :           vgptr->bb_id = bi_id;

	mov	ecx, DWORD PTR _bi_id$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 432  :           for ( n = 0 ; n < SDIM ; n++ )

	xor	ecx, ecx
	add	esp, 8
	cmp	DWORD PTR _web+616, ecx
	jle	SHORT $LN49@film_grad_
$LL228@film_grad_:

; 433  :              vgptr->grad[n] += f_info->grad[i][n];

	mov	edi, DWORD PTR _f_info$[ebp]
	mov	edi, DWORD PTR [edi+1336]
	mov	edx, DWORD PTR [eax+16]
	mov	edi, DWORD PTR [edi+esi]
	fld	QWORD PTR [edi+ecx*8]
	lea	edx, DWORD PTR [edx+ecx*8]
	fadd	QWORD PTR [edx]
	inc	ecx
	fstp	QWORD PTR [edx]
	cmp	ecx, DWORD PTR _web+616
	jl	SHORT $LL228@film_grad_
$LN49@film_grad_:

; 429  :         for ( i = 0 ; i < FACET_VERTS ; i++ )

	add	esi, 4
	cmp	esi, 12					; 0000000cH
	jl	SHORT $LL218@film_grad_
$LN219@film_grad_:

; 434  :         }
; 435  : 
; 436  :        if ( valid_id(bj_id) && (get_battr(bj_id) & (FIXEDVOL|PRESSURE)) )

	test	DWORD PTR _bj_id$[ebp], 268435456	; 10000000H
	je	$LN226@film_grad_
	mov	edi, DWORD PTR _bj_id$[ebp]
	mov	eax, DWORD PTR _web+348
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	eax, DWORD PTR [edi+eax]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 2080				; 00000820H
	xor	ecx, ecx
	or	eax, ecx
	je	$LN226@film_grad_

; 437  :         for ( i = 0 ; i < FACET_VERTS ; i++ )

	xor	esi, esi
	npad	7
$LL220@film_grad_:

; 438  :         { vgptr = get_bv_new_vgrad(get_body_fixnum(bj_id),v_ids[i]);

	mov	edx, DWORD PTR _web+348
	mov	ecx, DWORD PTR _v_ids$89325[ebp+esi]
	mov	eax, DWORD PTR [edi+edx]
	push	ecx
	mov	ecx, DWORD PTR [eax+420]
	push	ecx
	call	_get_bv_new_vgrad

; 439  :           vgptr->bb_id = bj_id;

	mov	edx, DWORD PTR _bj_id$[ebp]

; 440  :           for ( n = 0 ; n < SDIM ; n++ )

	xor	ecx, ecx
	add	esp, 8
	mov	DWORD PTR [eax+8], edx
	cmp	DWORD PTR _web+616, ecx
	jle	SHORT $LN42@film_grad_
$LL227@film_grad_:
	mov	edx, DWORD PTR [eax+16]

; 441  :             vgptr->grad[n] -= f_info->grad[i][n];

	mov	ebx, DWORD PTR _f_info$[ebp]
	fld	QWORD PTR [edx+ecx*8]
	mov	ebx, DWORD PTR [ebx+1336]
	mov	ebx, DWORD PTR [esi+ebx]
	fsub	QWORD PTR [ebx+ecx*8]
	lea	edx, DWORD PTR [edx+ecx*8]
	inc	ecx
	fstp	QWORD PTR [edx]
	cmp	ecx, DWORD PTR _web+616
	jl	SHORT $LL227@film_grad_
$LN42@film_grad_:

; 437  :         for ( i = 0 ; i < FACET_VERTS ; i++ )

	add	esi, 4
	cmp	esi, 12					; 0000000cH
	jl	SHORT $LL220@film_grad_

; 442  :         }
; 443  : #else
; 444  :       /* kludge copy from torvol_project, so could ditch torvol_project */
; 445  :       REAL *v[FACET_VERTS];  /* pointers to three vertex coordinates */
; 446  :       int j;
; 447  :       REAL adj[FACET_EDGES][MAXCOORD];  /* torus wrap adjustments for edge */ 
; 448  :       vertex_id v_ids[FACET_VERTS];
; 449  :       int n;
; 450  :       REAL g[MAXCOORD];
; 451  : 
; 452  : 
; 453  :       /* get basic info */
; 454  :       fe = get_facet_fe(f_id);
; 455  :       for ( i = 0 ; i < FACET_EDGES ; i ++ )
; 456  :       {
; 457  :          v_ids[i] = get_fe_tailv(fe);
; 458  :          v[i] = get_coord(get_fe_tailv(fe));
; 459  :          get_edge_adjust(get_fe_edge(fe),adj[i]);
; 460  :          fe = get_next_edge(fe);
; 461  :       }
; 462  : 
; 463  :       for ( i = 0 ; i < FACET_EDGES ; i++ )
; 464  :       {
; 465  :          int m;
; 466  :          REAL ga[MAXCOORD],gb[MAXCOORD],gc[MAXCOORD],gd[MAXCOORD],
; 467  : 
; 468  :             ge[MAXCOORD],gf[MAXCOORD]; /* gradient parts */
; 469  :          j = (i+1)%FACET_EDGES;
; 470  :          k = (i+2)%FACET_EDGES;
; 471  : 
; 472  :          /* basic tetrahedron */
; 473  :           cross_prod(v[j],v[k],ga);
; 474  : 
; 475  :          /* torus wrap corrections */
; 476  :          /* two-vertex term */
; 477  :          cross_prod(adj[j],v[j],gb);  /* - */
; 478  :          cross_prod(adj[i],v[k],gc);  /* + */
; 479  :          cross_prod(adj[k],v[j],gd);  /* + */
; 480  :          cross_prod(adj[j],v[k],ge);  /* - */
; 481  : 
; 482  :          /* one-vertex term */
; 483  :          cross_prod(adj[k],adj[i],gf);
; 484  : 
; 485  :          /* add parts to existing gradient */
; 486  :          for ( m = 0 ; m < SDIM ; m++ )
; 487  :             g[m] = (ga[m] + (-gb[m]+gc[m]+gd[m]-ge[m])/2 + gf[m])/6;
; 488  : 
; 489  :          if ( valid_id(bi_id) && (get_battr(bi_id) & (FIXEDVOL|PRESSURE)) )
; 490  :           {
; 491  :              vgptr = get_bv_new_vgrad(get_body_fixnum(bi_id),v_ids[i]);
; 492  :              vgptr->bb_id = bi_id;
; 493  :              for ( n = 0 ; n < SDIM ; n++ )
; 494  :                vgptr->grad[n] += g[n];
; 495  :           }
; 496  : 
; 497  :          if ( valid_id(bj_id) && (get_battr(bj_id) & (FIXEDVOL|PRESSURE)) )
; 498  :           {
; 499  :             vgptr = get_bv_new_vgrad(get_body_fixnum(bj_id),v_ids[i]);
; 500  :             vgptr->bb_id = bj_id;
; 501  :             for ( n = 0 ; n < SDIM ; n++ )
; 502  :               vgptr->grad[n] -= g[n];
; 503  :           }
; 504  :       }
; 505  : #endif
; 506  :     }
; 507  :     else

	jmp	$LN226@film_grad_
$LN55@film_grad_:

; 508  :     {
; 509  :       vertex_id v[3];
; 510  :       /* get side vectors */
; 511  :       fe_id = get_facet_fe(f_id);

	cmp	DWORD PTR tv1576[ebp], 0
	jne	SHORT $LN97@film_grad_
	xor	ebx, ebx
	jmp	SHORT $LN96@film_grad_
$LN97@film_grad_:
	test	DWORD PTR _f_id$[ebp], 134217728	; 08000000H
	mov	eax, DWORD PTR [esi+edx]
	mov	ebx, DWORD PTR [eax+28]
	je	SHORT $LN96@film_grad_
	xor	ebx, 134217728				; 08000000H
$LN96@film_grad_:

; 512  :       for ( i = 0 ; i < FACET_EDGES ; i++ )

	lea	ecx, DWORD PTR _side$[ebp]
	mov	DWORD PTR tv2369[ebp], ecx
	mov	DWORD PTR tv2349[ebp], 0
	npad	2
$LL36@film_grad_:

; 513  :       { 
; 514  :         get_fe_side(fe_id,side[i]);

	mov	eax, DWORD PTR _web+460
	mov	edx, DWORD PTR tv2369[ebp]
	mov	esi, ebx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	ecx, DWORD PTR [esi+eax]
	push	edx
	mov	edx, DWORD PTR [ecx+20]
	mov	edi, ebx
	and	edi, 134217728				; 08000000H
	xor	edx, edi
	push	edx
	call	_get_edge_side

; 515  :         v[i] = get_fe_headv(fe_id);

	mov	eax, DWORD PTR _web+460
	mov	ecx, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _web+124
	mov	ecx, DWORD PTR _web+216
	xor	eax, edi
	add	esp, 8
	test	eax, 134217728				; 08000000H
	je	SHORT $LN105@film_grad_
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edx+304]
	mov	eax, DWORD PTR [eax+ecx]
	jmp	SHORT $LN104@film_grad_
$LN105@film_grad_:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	add	eax, DWORD PTR [ecx+edx+304]
	mov	ecx, DWORD PTR _web+636
	mov	eax, DWORD PTR [eax+ecx*4]
$LN104@film_grad_:

; 516  :         x[i] = get_coord(v[i]);

	mov	edx, DWORD PTR _web+12
	mov	edi, DWORD PTR _dymem
	mov	ecx, DWORD PTR tv2349[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+104
	add	eax, DWORD PTR [edx+edi+64]
	mov	DWORD PTR _x$[ebp+ecx], eax

; 517  :         fe_id = get_next_edge(fe_id);

	mov	eax, DWORD PTR _web+460
	mov	edx, DWORD PTR [esi+eax]
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN109@film_grad_
	mov	ebx, DWORD PTR [edx+28]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN35@film_grad_
$LN109@film_grad_:
	mov	ebx, DWORD PTR [edx+32]
$LN35@film_grad_:

; 512  :       for ( i = 0 ; i < FACET_EDGES ; i++ )

	add	DWORD PTR tv2369[ebp], 48		; 00000030H
	add	ecx, 4
	mov	DWORD PTR tv2349[ebp], ecx
	cmp	ecx, 12					; 0000000cH
	jl	$LL36@film_grad_

; 518  :       }
; 519  : 
; 520  :       if ( web.symmetry_flag )

	cmp	DWORD PTR _web+856, 0

; 523  :          get_facet_verts(f_id,x,wraps);

	mov	edi, DWORD PTR _f_id$[ebp]
	je	$LN24@film_grad_

; 521  :       {
; 522  :          for ( i = 0 ; i < FACET_VERTS ; i++ ) x[i] = unwrap_x[i];

	lea	eax, DWORD PTR _unwrap_x$[ebp]
	mov	DWORD PTR _x$[ebp], eax
	lea	ecx, DWORD PTR _unwrap_x$[ebp+48]

; 523  :          get_facet_verts(f_id,x,wraps);

	lea	eax, DWORD PTR _wraps$89305[ebp]
	mov	DWORD PTR _x$[ebp+4], ecx
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	lea	edx, DWORD PTR _unwrap_x$[ebp+96]
	push	edi
	mov	DWORD PTR _x$[ebp+8], edx
	call	_get_facet_verts

; 524  :          /* have to readjust indexing for agreement with nonsym way..
; 525  :          kludge, but don't want to risk massive changes */
; 526  :          for ( i = 0 ; i < FACET_VERTS ; i++ ) x[i] = unwrap_x[(i+1)%3]; 

	lea	ecx, DWORD PTR _unwrap_x$[ebp]
	lea	eax, DWORD PTR _unwrap_x$[ebp+96]
	mov	DWORD PTR _x$[ebp+8], ecx

; 527  :          for ( i = 0 ; i < SDIM ; i++ )

	mov	ecx, DWORD PTR _web+616
	mov	DWORD PTR _x$[ebp+4], eax
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR _unwrap_x$[ebp+48]
	xor	eax, eax
	mov	DWORD PTR _x$[ebp], edx
	test	ecx, ecx
	jle	SHORT $LN24@film_grad_
	npad	10
$LL26@film_grad_:

; 528  :          { side[0][i] = x[0][i] - x[2][i]; 

	fld	QWORD PTR _unwrap_x$[ebp+eax*8+48]
	inc	eax
	fsub	QWORD PTR _unwrap_x$[ebp+eax*8-8]
	fstp	QWORD PTR _side$[ebp+eax*8-8]

; 529  :            side[1][i] = x[1][i] - x[0][i];

	fld	QWORD PTR _unwrap_x$[ebp+eax*8+88]
	fsub	QWORD PTR _unwrap_x$[ebp+eax*8+40]
	fstp	QWORD PTR _side$[ebp+eax*8+40]

; 530  :            side[2][i] = x[2][i] - x[1][i];

	fld	QWORD PTR _unwrap_x$[ebp+eax*8-8]
	fsub	QWORD PTR _unwrap_x$[ebp+eax*8+88]
	fstp	QWORD PTR _side$[ebp+eax*8+88]
	cmp	eax, ecx
	jl	SHORT $LL26@film_grad_
$LN24@film_grad_:

; 531  :          }
; 532  :       }
; 533  : 
; 534  :       if ( web.symmetric_content )

	cmp	DWORD PTR _web+808, 0
	je	$LN23@film_grad_

; 535  :       {
; 536  :          /* do each of the three vertices */
; 537  :          fe = get_facet_fe(f_id);

	cmp	DWORD PTR tv1576[ebp], 0
	jne	SHORT $LN113@film_grad_
	xor	esi, esi
	jmp	SHORT $LN112@film_grad_
$LN113@film_grad_:
	mov	edx, DWORD PTR _web+236
	mov	eax, DWORD PTR tv1579[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	esi, DWORD PTR [ecx+28]
	test	edi, 134217728				; 08000000H
	je	SHORT $LN112@film_grad_
	xor	esi, 134217728				; 08000000H
$LN112@film_grad_:

; 538  :          for ( k = 0 ; k < FACET_VERTS ; k++, fe = get_next_edge(fe) )

	mov	DWORD PTR tv825[ebp], 3
$LL116@film_grad_:

; 539  :          {
; 540  :            fe_id = get_next_edge(fe);

	mov	eax, esi
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR tv1704[ebp], eax
	mov	edi, esi
	je	SHORT $LN121@film_grad_
	mov	edx, DWORD PTR _web+460
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	ebx, DWORD PTR [edi+edx]
	mov	eax, DWORD PTR [ebx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN120@film_grad_
$LN121@film_grad_:
	mov	eax, DWORD PTR _web+460
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	ebx, DWORD PTR [edi+eax]
	mov	eax, DWORD PTR [ebx+32]
$LN120@film_grad_:

; 541  :            v_id = get_fe_headv(fe_id);

	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN127@film_grad_
	mov	edx, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [edx+ecx+304]
	mov	edx, DWORD PTR _web+124
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+eax]
	jmp	SHORT $LN245@film_grad_
$LN127@film_grad_:
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+edx+304]
	mov	edx, DWORD PTR _web+124
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+636
	lea	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR [eax+ecx]
$LN245@film_grad_:

; 542  :            if ( get_vattr(v_id) & FIXED ) continue;

	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	mov	DWORD PTR _v_id$[ebp], edx
	mov	edx, DWORD PTR _web+12
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 64					; 00000040H
	xor	edx, edx
	or	eax, edx
	jne	$LN21@film_grad_

; 543  : 
; 544  :            cross_prod(get_coord(get_fe_tailv(fe)),
; 545  :                get_coord(get_fe_headv(fe)),normal);

	mov	eax, DWORD PTR [ebx+20]
	and	esi, 134217728				; 08000000H
	xor	eax, esi
	mov	esi, DWORD PTR _web+124
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN133@film_grad_
	mov	edx, DWORD PTR [ecx+edx]
	jmp	SHORT $LN132@film_grad_
$LN133@film_grad_:
	mov	esi, DWORD PTR _web+636
	lea	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx+ecx]
	mov	esi, DWORD PTR _web+124
$LN132@film_grad_:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN139@film_grad_
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	esi, DWORD PTR _web+636
	lea	eax, DWORD PTR [eax+esi*4]
	mov	ecx, DWORD PTR [eax+ecx]
	jmp	SHORT $LN138@film_grad_
$LN139@film_grad_:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	ecx, DWORD PTR [ecx+eax]
$LN138@film_grad_:
	mov	esi, DWORD PTR _dymem
	mov	eax, DWORD PTR _web+104
	mov	eax, DWORD PTR [eax+esi+64]
	lea	esi, DWORD PTR _normal$[ebp]
	push	esi
	mov	esi, DWORD PTR _web+12
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	add	edx, eax
	push	edx
	add	ecx, eax
	push	ecx
	call	_cross_prod
	add	esp, 12					; 0000000cH

; 546  : 
; 547  :            if ( valid_id(bi_id) && (get_battr(bi_id) & (PRESSURE|FIXEDVOL)) )

	cmp	DWORD PTR tv1640[ebp], 0
	je	SHORT $LN231@film_grad_
	mov	esi, DWORD PTR _bi_id$[ebp]
	mov	eax, DWORD PTR _web+348
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 2080				; 00000820H
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN231@film_grad_

; 548  :            { 
; 549  :              vgptr = get_bv_new_vgrad(get_body_fixnum(bi_id),v_id);

	mov	edx, DWORD PTR _v_id$[ebp]
	mov	eax, DWORD PTR [ecx+420]
	push	edx
	push	eax
	call	_get_bv_new_vgrad

; 550  :              vgptr->bb_id = bi_id;
; 551  :              for ( i = 0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	add	esp, 8
	mov	DWORD PTR [eax+8], esi
	cmp	DWORD PTR _web+616, ecx
	jle	SHORT $LN231@film_grad_
	fld	QWORD PTR __real@4018000000000000
$LN17@film_grad_:

; 552  :                 vgptr->grad[i] +=  normal[i]/6.0;

	fld	QWORD PTR _normal$[ebp+ecx*8]
	mov	edx, DWORD PTR [eax+16]
	fdiv	ST(0), ST(1)
	lea	edx, DWORD PTR [edx+ecx*8]
	inc	ecx
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	cmp	ecx, DWORD PTR _web+616
	jl	SHORT $LN17@film_grad_

; 550  :              vgptr->bb_id = bi_id;
; 551  :              for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)
$LN231@film_grad_:

; 553  :            }
; 554  : 
; 555  :            if ( valid_id(bj_id) && (get_battr(bj_id) & (PRESSURE|FIXEDVOL)) )

	mov	esi, DWORD PTR _bj_id$[ebp]
	test	esi, 268435456				; 10000000H
	je	SHORT $LN21@film_grad_
	mov	ecx, DWORD PTR _web+348
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 2080				; 00000820H
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN21@film_grad_

; 556  :            { 
; 557  :              vgptr = get_bv_new_vgrad(get_body_fixnum(bj_id),v_id);

	mov	edx, DWORD PTR _v_id$[ebp]
	mov	eax, DWORD PTR [ecx+420]
	push	edx
	push	eax
	call	_get_bv_new_vgrad

; 558  :              vgptr->bb_id = bj_id;
; 559  :              for ( i = 0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	add	esp, 8
	mov	DWORD PTR [eax+8], esi
	cmp	DWORD PTR _web+616, ecx
	jle	SHORT $LN21@film_grad_
	fld	QWORD PTR __real@4018000000000000
$LN13@film_grad_:

; 560  :                 vgptr->grad[i] -=  normal[i]/6.0;

	fld	QWORD PTR _normal$[ebp+ecx*8]
	mov	edx, DWORD PTR [eax+16]
	fdiv	ST(0), ST(1)
	lea	edx, DWORD PTR [edx+ecx*8]
	inc	ecx
	fsubr	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	cmp	ecx, DWORD PTR _web+616
	jl	SHORT $LN13@film_grad_

; 558  :              vgptr->bb_id = bj_id;
; 559  :              for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)
$LN21@film_grad_:

; 538  :          for ( k = 0 ; k < FACET_VERTS ; k++, fe = get_next_edge(fe) )

	cmp	DWORD PTR tv1704[ebp], 0
	je	SHORT $LN117@film_grad_
	mov	eax, DWORD PTR _web+460
	mov	ecx, DWORD PTR [edi+eax]
	mov	esi, DWORD PTR [ecx+28]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN186@film_grad_
$LN117@film_grad_:
	mov	edx, DWORD PTR _web+460
	mov	eax, DWORD PTR [edi+edx]
	mov	esi, DWORD PTR [eax+32]
$LN186@film_grad_:
	dec	DWORD PTR tv825[ebp]
	jne	$LL116@film_grad_

; 561  :            }
; 562  :         }
; 563  :      }
; 564  :      else

	jmp	$LN226@film_grad_
$LN23@film_grad_:

; 565  :      {  /* content from integrating z dx dy */
; 566  :      
; 567  :         /* get centroid z (divide by 3 later) */
; 568  :         for ( i = 0,z = 0.0; i < FACET_EDGES ; i++ ) z += x[i][2];

	mov	ecx, DWORD PTR _x$[ebp]
	fld	QWORD PTR [ecx+16]
	mov	edx, DWORD PTR _x$[ebp+4]
	fadd	QWORD PTR __real@0000000000000000
	mov	eax, DWORD PTR _x$[ebp+8]

; 569  :           
; 570  :         /* calculate normal */ 
; 571  :         cross_prod(side[0],side[1],normal);

	lea	ecx, DWORD PTR _normal$[ebp]
	push	ecx
	fadd	QWORD PTR [edx+16]
	lea	edx, DWORD PTR _side$[ebp+48]
	push	edx
	fadd	QWORD PTR [eax+16]
	lea	eax, DWORD PTR _side$[ebp]
	push	eax
	fstp	QWORD PTR _z$[ebp]
	call	_cross_prod
	add	esp, 12					; 0000000cH

; 572  : 
; 573  :         /* now do each of the three vertices */
; 574  :      
; 575  :         fe = get_facet_fe(f_id);

	cmp	DWORD PTR tv1576[ebp], 0
	jne	SHORT $LN143@film_grad_
	xor	eax, eax
	jmp	SHORT $LN142@film_grad_
$LN143@film_grad_:
	mov	ecx, DWORD PTR _web+236
	mov	edx, DWORD PTR tv1579[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	eax, DWORD PTR [eax+28]
	test	edi, 134217728				; 08000000H
	je	SHORT $LN142@film_grad_
	xor	eax, 134217728				; 08000000H
$LN142@film_grad_:

; 576  :         for ( k = 0 ; k < FACET_VERTS ; k++, fe = get_next_edge(fe) )

	lea	ebx, DWORD PTR _side$[ebp]
	mov	DWORD PTR tv1410[ebp], 3
$LL235@film_grad_:

; 577  :         {
; 578  :           fe_id = get_next_edge(fe);

	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR tv1704[ebp], ecx
	je	SHORT $LN151@film_grad_
	mov	ecx, DWORD PTR _web+460
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	lea	edi, DWORD PTR [eax+eax]
	mov	edx, DWORD PTR [edi+ecx]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN150@film_grad_
$LN151@film_grad_:
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	lea	edi, DWORD PTR [eax+eax]
	mov	eax, DWORD PTR _web+460
	mov	ecx, DWORD PTR [edi+eax]
	mov	eax, DWORD PTR [ecx+32]
$LN150@film_grad_:

; 579  :           v_id = get_fe_headv(fe_id);

	mov	ecx, DWORD PTR _web+460
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _web+124
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN157@film_grad_
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	esi, DWORD PTR [edx+eax]
	jmp	SHORT $LN156@film_grad_
$LN157@film_grad_:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	esi, DWORD PTR [edx+eax*4]
$LN156@film_grad_:

; 580  :           if ( get_vattr(v_id) & FIXED ) continue;

	mov	edx, DWORD PTR _web+12
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 64					; 00000040H
	xor	ecx, ecx
	or	eax, ecx
	jne	$LN5@film_grad_

; 581  : 
; 582  :           if ( valid_id(bi_id) && (get_battr(bi_id) & (PRESSURE|FIXEDVOL)) )

	cmp	DWORD PTR tv1640[ebp], ecx
	je	SHORT $LN230@film_grad_
	mov	eax, DWORD PTR _bi_id$[ebp]
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 2080				; 00000820H
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN230@film_grad_

; 583  :           { 
; 584  :             vgptr = get_bv_new_vgrad(get_body_fixnum(bi_id),v_id);

	mov	edx, DWORD PTR [ecx+420]
	push	esi
	push	edx
	call	_get_bv_new_vgrad

; 585  :             vgptr->bb_id = bi_id;

	mov	ecx, DWORD PTR _bi_id$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 586  :             vgptr->grad[0] += -side[k][1]*z/6.0;

	fld	QWORD PTR [ebx+8]
	fld	QWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	fmul	ST(1), ST(0)
	add	esp, 8
	fld	QWORD PTR __real@4018000000000000
	fdiv	ST(2), ST(0)
	fld	QWORD PTR [ecx]
	fsubrp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR [ecx]

; 587  :             vgptr->grad[1] +=  side[k][0]*z/6.0;

	mov	ecx, DWORD PTR [eax+16]
	fmul	QWORD PTR [ebx]
	fdiv	ST(0), ST(1)
	fadd	QWORD PTR [ecx+8]
	fstp	QWORD PTR [ecx+8]

; 588  :             vgptr->grad[2] +=  normal[2]/6.0;

	mov	eax, DWORD PTR [eax+16]
	fdivr	QWORD PTR _normal$[ebp+16]
	fadd	QWORD PTR [eax+16]
	fstp	QWORD PTR [eax+16]
$LN230@film_grad_:

; 589  :           }
; 590  : 
; 591  :           if ( valid_id(bj_id) && (get_battr(bj_id) & (PRESSURE|FIXEDVOL)) )

	test	DWORD PTR _bj_id$[ebp], 268435456	; 10000000H
	je	SHORT $LN5@film_grad_
	mov	edx, DWORD PTR _bj_id$[ebp]
	mov	eax, DWORD PTR _web+348
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 2080				; 00000820H
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN5@film_grad_

; 592  :           { 
; 593  :             vgptr = get_bv_new_vgrad(get_body_fixnum(bj_id),v_id);

	mov	ecx, DWORD PTR [ecx+420]
	push	esi
	push	ecx
	call	_get_bv_new_vgrad

; 594  :             vgptr->bb_id = bj_id;

	mov	edx, DWORD PTR _bj_id$[ebp]
	mov	DWORD PTR [eax+8], edx

; 595  :             vgptr->grad[0] -= -side[k][1]*z/6.0;

	fld	QWORD PTR [ebx+8]
	fld	QWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	fmul	ST(1), ST(0)
	add	esp, 8
	fxch	ST(1)
	fdiv	QWORD PTR __real@c018000000000000
	fsubr	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]

; 596  :             vgptr->grad[1] -=  side[k][0]*z/6.0;

	mov	ecx, DWORD PTR [eax+16]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR __real@4018000000000000
	fdiv	ST(1), ST(0)
	fld	QWORD PTR [ecx+8]
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [ecx+8]

; 597  :             vgptr->grad[2] -=  normal[2]/6.0;

	mov	eax, DWORD PTR [eax+16]
	fdivr	QWORD PTR _normal$[ebp+16]
	fsubr	QWORD PTR [eax+16]
	fstp	QWORD PTR [eax+16]
$LN5@film_grad_:

; 576  :         for ( k = 0 ; k < FACET_VERTS ; k++, fe = get_next_edge(fe) )

	add	ebx, 48					; 00000030H
	cmp	DWORD PTR tv1704[ebp], 0
	je	SHORT $LN147@film_grad_
	mov	eax, DWORD PTR _web+460
	mov	ecx, DWORD PTR [edi+eax]
	mov	eax, DWORD PTR [ecx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN188@film_grad_
$LN147@film_grad_:
	mov	edx, DWORD PTR _web+460
	mov	eax, DWORD PTR [edi+edx]
	mov	eax, DWORD PTR [eax+32]
$LN188@film_grad_:
	dec	DWORD PTR tv1410[ebp]
	jne	$LL235@film_grad_
$LN226@film_grad_:

; 442  :         }
; 443  : #else
; 444  :       /* kludge copy from torvol_project, so could ditch torvol_project */
; 445  :       REAL *v[FACET_VERTS];  /* pointers to three vertex coordinates */
; 446  :       int j;
; 447  :       REAL adj[FACET_EDGES][MAXCOORD];  /* torus wrap adjustments for edge */ 
; 448  :       vertex_id v_ids[FACET_VERTS];
; 449  :       int n;
; 450  :       REAL g[MAXCOORD];
; 451  : 
; 452  : 
; 453  :       /* get basic info */
; 454  :       fe = get_facet_fe(f_id);
; 455  :       for ( i = 0 ; i < FACET_EDGES ; i ++ )
; 456  :       {
; 457  :          v_ids[i] = get_fe_tailv(fe);
; 458  :          v[i] = get_coord(get_fe_tailv(fe));
; 459  :          get_edge_adjust(get_fe_edge(fe),adj[i]);
; 460  :          fe = get_next_edge(fe);
; 461  :       }
; 462  : 
; 463  :       for ( i = 0 ; i < FACET_EDGES ; i++ )
; 464  :       {
; 465  :          int m;
; 466  :          REAL ga[MAXCOORD],gb[MAXCOORD],gc[MAXCOORD],gd[MAXCOORD],
; 467  : 
; 468  :             ge[MAXCOORD],gf[MAXCOORD]; /* gradient parts */
; 469  :          j = (i+1)%FACET_EDGES;
; 470  :          k = (i+2)%FACET_EDGES;
; 471  : 
; 472  :          /* basic tetrahedron */
; 473  :           cross_prod(v[j],v[k],ga);
; 474  : 
; 475  :          /* torus wrap corrections */
; 476  :          /* two-vertex term */
; 477  :          cross_prod(adj[j],v[j],gb);  /* - */
; 478  :          cross_prod(adj[i],v[k],gc);  /* + */
; 479  :          cross_prod(adj[k],v[j],gd);  /* + */
; 480  :          cross_prod(adj[j],v[k],ge);  /* - */
; 481  : 
; 482  :          /* one-vertex term */
; 483  :          cross_prod(adj[k],adj[i],gf);
; 484  : 
; 485  :          /* add parts to existing gradient */
; 486  :          for ( m = 0 ; m < SDIM ; m++ )
; 487  :             g[m] = (ga[m] + (-gb[m]+gc[m]+gd[m]-ge[m])/2 + gf[m])/6;
; 488  : 
; 489  :          if ( valid_id(bi_id) && (get_battr(bi_id) & (FIXEDVOL|PRESSURE)) )
; 490  :           {
; 491  :              vgptr = get_bv_new_vgrad(get_body_fixnum(bi_id),v_ids[i]);
; 492  :              vgptr->bb_id = bi_id;
; 493  :              for ( n = 0 ; n < SDIM ; n++ )
; 494  :                vgptr->grad[n] += g[n];
; 495  :           }
; 496  : 
; 497  :          if ( valid_id(bj_id) && (get_battr(bj_id) & (FIXEDVOL|PRESSURE)) )
; 498  :           {
; 499  :             vgptr = get_bv_new_vgrad(get_body_fixnum(bj_id),v_ids[i]);
; 500  :             vgptr->bb_id = bj_id;
; 501  :             for ( n = 0 ; n < SDIM ; n++ )
; 502  :               vgptr->grad[n] -= g[n];
; 503  :           }
; 504  :       }
; 505  : #endif
; 506  :     }
; 507  :     else

	mov	edx, DWORD PTR _web+236
$LN62@film_grad_:

; 400  : 
; 401  :   FOR_ALL_FACETS(f_id)

	mov	ecx, DWORD PTR tv1579[ebp]
	mov	eax, DWORD PTR [ecx+edx]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _f_id$[ebp], eax
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv1576[ebp], eax
	jne	$LL234@film_grad_
	pop	edi
	pop	esi
	pop	ebx
$LN61@film_grad_:

; 598  :           }
; 599  :         }
; 600  :       }  
; 601  : 
; 602  :     } /* end torus/nontorus */
; 603  : 
; 604  :   } /* end facet loop */
; 605  :   
; 606  : } /* end film_grad_l() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_film_grad_l ENDP
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	??_C@_0CO@OICJEKHC@constr_vol_grad?$CI?$CJ?3?5Cannot?5do?5LAG@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_film_constr_grad
EXTRN	_get_vertex_vgrad:PROC
EXTRN	_gauss1Dwt:DWORD
EXTRN	_eval_all:PROC
EXTRN	_gauss1D_num:DWORD
EXTRN	_gauss1Dpt:DWORD
EXTRN	_constr_vol_grad_q:PROC
EXTRN	_nullcon:QWORD
;	COMDAT __real@3ff0000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT ??_C@_0CO@OICJEKHC@constr_vol_grad?$CI?$CJ?3?5Cannot?5do?5LAG@
CONST	SEGMENT
??_C@_0CO@OICJEKHC@constr_vol_grad?$CI?$CJ?3?5Cannot?5do?5LAG@ DB 'constr'
	DB	'_vol_grad(): Cannot do LAGRANGE model.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\filml.c
CONST	ENDS
;	COMDAT _film_constr_grad
_TEXT	SEGMENT
_tcoord$ = -596						; size = 4
tv814 = -592						; size = 4
_tailv$ = -588						; size = 4
_hcoord$ = -584						; size = 4
_attr$89461 = -580					; size = 8
_constr$ = -572						; size = 4
tv740 = -568						; size = 4
_headv$ = -564						; size = 4
_j$ = -560						; size = 4
_first_fe$ = -556					; size = 4
_i$ = -556						; size = 4
tv1365 = -552						; size = 4
tv426 = -552						; size = 4
_sign$ = -548						; size = 4
_fe$ = -544						; size = 4
_conmap$89463 = -544					; size = 4
_f_id$89460 = -540					; size = 4
_m$ = -540						; size = 4
_e_id$ = -536						; size = 4
_bodysign$ = -536					; size = 4
_green_deriv$ = -532					; size = 288
_midpt$ = -244						; size = 48
_side$ = -196						; size = 48
_green$ = -148						; size = 48
_hgrad$ = -100						; size = 48
_tgrad$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_film_constr_grad PROC					; COMDAT

; 617  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 596				; 00000254H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx

; 618  :   edge_id e_id;
; 619  :   REAL side[MAXCOORD];
; 620  :   REAL tgrad[MAXCOORD];  
; 621  :   REAL hgrad[MAXCOORD];  
; 622  :   REAL grad;  
; 623  :   int i,j,k,m,sign,bodysign=0;
; 624  :   REAL green[MAXCOORD];
; 625  :   REAL green_deriv[MAXCOORD][MAXCOORD];
; 626  :   REAL midpt[MAXCOORD];
; 627  :   REAL *tcoord,*hcoord;
; 628  :   struct constraint *constr;
; 629  :   vertex_id headv,tailv;
; 630  :   facetedge_id fe,first_fe;
; 631  : 
; 632  :   FOR_ALL_EDGES(e_id)

	mov	ebx, DWORD PTR _web+160
	mov	DWORD PTR _e_id$[ebp], ebx
	test	ebx, 268435456				; 10000000H
	je	$LN65@film_const
	push	esi
	mov	esi, DWORD PTR _web+616
	push	edi
	npad	12
$LL67@film_const:
	mov	eax, DWORD PTR _web+124
	mov	edi, ebx
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	ecx, DWORD PTR [edi+eax]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	mov	DWORD PTR tv740[ebp], edi
	je	$LN66@film_const

; 633  :   {
; 634  :     struct volgrad *vgptri;
; 635  :     facet_id f_id;
; 636  :     ATTR attr = get_eattr(e_id);

	mov	eax, DWORD PTR [ecx+8]

; 637  :     conmap_t *conmap = get_e_constraint_map(e_id); /* only hit constraints */

	mov	edx, DWORD PTR _dymem
	mov	DWORD PTR _attr$89461[ebp], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _attr$89461[ebp+4], eax
	mov	eax, DWORD PTR _web+216
	cmp	DWORD PTR [eax+edx+1048], 0
	je	SHORT $LN70@film_const
	mov	eax, DWORD PTR [eax+edx+1024]
	add	eax, ecx
	mov	DWORD PTR _conmap$89463[ebp], eax
	jmp	SHORT $LN71@film_const
$LN70@film_const:
	mov	DWORD PTR _conmap$89463[ebp], OFFSET _nullcon
$LN71@film_const:

; 638  : 
; 639  :     if ( attr & FIXED ) continue;

	mov	eax, DWORD PTR _attr$89461[ebp]
	mov	ecx, eax
	and	ecx, 64					; 00000040H
	xor	edx, edx
	or	ecx, edx
	jne	$LN66@film_const

; 640  :     if ( !(attr & CONSTRAINT) ) continue;

	and	eax, 1024				; 00000400H
	or	eax, ecx
	je	$LN66@film_const

; 641  : 
; 642  :     headv = get_edge_headv(e_id);

	push	ebx
	call	_get_edge_headv

; 643  :     tailv = get_edge_tailv(e_id);

	push	ebx
	mov	DWORD PTR _headv$[ebp], eax
	call	_get_edge_tailv

; 644  :     tcoord = get_coord(tailv);

	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+104
	mov	ecx, DWORD PTR [ecx+edx+64]
	mov	edx, DWORD PTR _web+12

; 645  :     hcoord = get_coord(headv);

	mov	ebx, DWORD PTR _headv$[ebp]
	mov	DWORD PTR _tailv$[ebp], eax
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	add	eax, ecx
	and	ebx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+ebx*4]
	add	edx, ecx

; 646  :     int_val = ordinal(get_original(e_id))+1;  /* for eval  of file parameters */

	mov	ecx, DWORD PTR _e_id$[ebp]
	shr	ecx, 29					; 0000001dH
	imul	ecx, 112				; 00000070H
	mov	ecx, DWORD PTR _web[ecx+12]
	mov	ecx, DWORD PTR [ecx+edi]
	mov	ecx, DWORD PTR [ecx+20]
	add	esp, 8
	mov	DWORD PTR _tcoord$[ebp], eax
	mov	DWORD PTR _hcoord$[ebp], edx
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN72@film_const
	and	ecx, 134217727				; 07ffffffH
	jmp	SHORT $LN73@film_const
$LN72@film_const:
	or	ecx, -1
$LN73@film_const:
	inc	ecx
	mov	DWORD PTR _int_val, ecx

; 647  :     for ( j = 0 ; j < SDIM ; j++ )

	test	esi, esi
	jle	SHORT $LN129@film_const
	lea	ecx, DWORD PTR _side$[ebp]
	sub	edx, eax
	sub	ecx, eax
	mov	ebx, esi
$LL60@film_const:

; 648  :          side[j] = hcoord[j] - tcoord[j];

	fld	QWORD PTR [edx+eax]
	add	eax, 8
	dec	ebx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [ecx+eax-8]
	jne	SHORT $LL60@film_const
$LN129@film_const:

; 649  :     if ( !(attr & BDRY_CONTENT) ) continue;

	mov	eax, DWORD PTR _attr$89461[ebp]
	and	eax, 4096				; 00001000H
	xor	ecx, ecx
	or	eax, ecx
	je	$LN66@film_const

; 650  : 
; 651  :     if ( web.modeltype == QUADRATIC ) 

	mov	eax, DWORD PTR _web+628
	cmp	eax, 2
	jne	SHORT $LN56@film_const

; 652  :     { constr_vol_grad_q(e_id);

	mov	edx, DWORD PTR _e_id$[ebp]
	push	edx
	call	_constr_vol_grad_q

; 653  :       continue;

	mov	esi, DWORD PTR _web+616
	add	esp, 4
	jmp	$LN66@film_const
$LN56@film_const:

; 654  :     }
; 655  :     else if ( web.modeltype == LAGRANGE )

	cmp	eax, 3
	jne	SHORT $LN130@film_const

; 656  :       kb_error(1036,"constr_vol_grad(): Cannot do LAGRANGE model.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CO@OICJEKHC@constr_vol_grad?$CI?$CJ?3?5Cannot?5do?5LAG@
	push	1036					; 0000040cH
	call	_kb_error
	mov	esi, DWORD PTR _web+616
	add	esp, 12					; 0000000cH
$LN130@film_const:

; 657  : 
; 658  :     if ( attr & NEGBOUNDARY ) sign = -1;

	mov	eax, DWORD PTR _attr$89461[ebp]
	mov	ebx, DWORD PTR _gauss1Dpt
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN53@film_const
	or	ecx, -1
	jmp	SHORT $LN174@film_const
$LN53@film_const:

; 659  :     else sign = 1;

	mov	ecx, 1
$LN174@film_const:

; 660  :     if ( inverted(e_id) ) sign = -sign;

	mov	eax, DWORD PTR _e_id$[ebp]
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR _sign$[ebp], ecx
	mov	DWORD PTR tv814[ebp], eax
	je	SHORT $LN51@film_const
	neg	ecx
	mov	DWORD PTR _sign$[ebp], ecx
$LN51@film_const:

; 661  : 
; 662  :     for ( i = 0 ; i < SDIM ; i++ )

	test	esi, esi
	jle	SHORT $LN50@film_const
	lea	edx, DWORD PTR [esi*8]
	mov	ecx, edx
	shr	ecx, 2
	xor	eax, eax
	lea	edi, DWORD PTR _tgrad$[ebp]
	rep stosd

; 663  :       tgrad[i] = hgrad[i] = 0.0;

	mov	ecx, edx
	shr	ecx, 2
	lea	edi, DWORD PTR _hgrad$[ebp]
	rep stosd
$LN50@film_const:

; 664  : 
; 665  :     for ( j = 1 ; j <= (int)conmap[0] ; j++ )

	mov	eax, DWORD PTR _conmap$89463[ebp]
	cmp	DWORD PTR [eax], 1
	mov	DWORD PTR _j$[ebp], 1
	jl	$LN135@film_const
	fldz
	fld1
$LN47@film_const:

; 666  :     {
; 667  :       constr = get_constraint(conmap[j]);

	mov	ecx, DWORD PTR _conmap$89463[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	and	eax, 1073741823				; 3fffffffH
	imul	eax, 176				; 000000b0H
	add	eax, DWORD PTR _web+652
	mov	DWORD PTR _constr$[ebp], eax

; 668  :       if ( constr->compcount != SDIM ) continue;

	cmp	DWORD PTR [eax+44], esi
	jne	$LN46@film_const

; 669  :       if ( !(constr->attr & CON_CONTENT) ) continue;

	mov	eax, DWORD PTR [eax+32]
	and	eax, 128				; 00000080H
	xor	ecx, ecx
	or	eax, ecx
	je	$LN46@film_const

; 670  :       for ( m = 0 ; m <  gauss1D_num ; m++ )

	mov	DWORD PTR _m$[ebp], ecx
	cmp	DWORD PTR _gauss1D_num, ecx
	jle	$LN46@film_const
$LN42@film_const:

; 671  :       {
; 672  :         for ( i = 0 ; i < SDIM ; i++ )

	test	esi, esi
	jle	SHORT $LN37@film_const
	mov	eax, DWORD PTR _hcoord$[ebp]
	mov	edx, DWORD PTR _tcoord$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	lea	edi, DWORD PTR _midpt$[ebp]
	sub	edx, eax
	sub	edi, eax
	mov	DWORD PTR tv426[ebp], esi
$LN128@film_const:

; 673  :            midpt[i] = gauss1Dpt[m]*hcoord[i] + (1 - gauss1Dpt[m])*tcoord[i];

	fld	ST(0)
	add	eax, 8
	dec	DWORD PTR tv426[ebp]
	fsub	QWORD PTR [ebx+ecx*8]
	fmul	QWORD PTR [edx+eax-8]
	fld	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR _gauss1Dpt
	fmul	QWORD PTR [eax-8]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [edi+eax-8]
	jne	SHORT $LN128@film_const
$LN37@film_const:

; 674  :         for ( i = 0 ; i < SDIM ; i++ )

	mov	DWORD PTR _i$[ebp], 0
	test	esi, esi
	jle	SHORT $LN132@film_const
	mov	edi, DWORD PTR _constr$[ebp]
	fstp	ST(0)
	lea	ecx, DWORD PTR _green$[ebp]
	fstp	ST(0)
	mov	DWORD PTR tv1365[ebp], ecx
	lea	ebx, DWORD PTR _green_deriv$[ebp]
	add	edi, 108				; 0000006cH
	npad	3
$LL36@film_const:

; 675  :            eval_all(constr->convect[i],midpt,SDIM,&green[i],
; 676  :                                      green_deriv[i],e_id);

	mov	edx, DWORD PTR _e_id$[ebp]
	mov	eax, DWORD PTR tv1365[ebp]
	push	edx
	mov	edx, DWORD PTR [edi]
	push	ebx
	push	eax
	push	esi
	lea	ecx, DWORD PTR _midpt$[ebp]
	push	ecx
	push	edx
	call	_eval_all
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _web+616
	add	DWORD PTR tv1365[ebp], 8
	inc	eax
	add	esp, 24					; 00000018H
	add	edi, 4
	add	ebx, 48					; 00000030H
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, esi
	jl	SHORT $LL36@film_const

; 674  :         for ( i = 0 ; i < SDIM ; i++ )

	fldz
	mov	ebx, DWORD PTR _gauss1Dpt
	fld1
$LN132@film_const:

; 677  :         for ( i = 0 ; i < SDIM ; i++ )

	mov	edi, DWORD PTR _m$[ebp]
	xor	eax, eax
	test	esi, esi
	jle	SHORT $LN41@film_const
	mov	ecx, DWORD PTR _gauss1Dwt
	fld	ST(0)
	fsub	QWORD PTR [ebx+edi*8]
	fild	DWORD PTR _sign$[ebp]
	fmul	QWORD PTR [ecx+edi*8]
$LN134@film_const:

; 678  :         { 
; 679  :           for ( k = 0,grad = 0.0 ; k < SDIM ; k++ )

	xor	ecx, ecx
	fld	ST(3)
	lea	edx, DWORD PTR _green_deriv$[ebp+eax*8]
$LN30@film_const:

; 680  :             grad += side[k]*green_deriv[k][i];

	fld	QWORD PTR _side$[ebp+ecx*8]
	inc	ecx
	fmul	QWORD PTR [edx]
	add	edx, 48					; 00000030H
	faddp	ST(1), ST(0)
	cmp	ecx, esi
	jl	SHORT $LN30@film_const

; 681  :           tgrad[i] += sign*gauss1Dwt[m]*((1-gauss1Dpt[m])*grad - green[i]);

	fld	ST(2)
	inc	eax
	fmul	ST(0), ST(1)
	fsub	QWORD PTR _green$[ebp+eax*8-8]
	fmul	ST(0), ST(2)
	fadd	QWORD PTR _tgrad$[ebp+eax*8-8]
	fstp	QWORD PTR _tgrad$[ebp+eax*8-8]

; 682  :           hgrad[i] += sign*gauss1Dwt[m]*(gauss1Dpt[m]*grad + green[i]);

	fmul	QWORD PTR [ebx+edi*8]
	fadd	QWORD PTR _green$[ebp+eax*8-8]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR _hgrad$[ebp+eax*8-8]
	fstp	QWORD PTR _hgrad$[ebp+eax*8-8]
	cmp	eax, esi
	jl	SHORT $LN134@film_const

; 677  :         for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)
	fstp	ST(0)
$LN41@film_const:

; 670  :       for ( m = 0 ; m <  gauss1D_num ; m++ )

	inc	edi
	mov	DWORD PTR _m$[ebp], edi
	cmp	edi, DWORD PTR _gauss1D_num
	jl	$LN42@film_const
$LN46@film_const:

; 664  : 
; 665  :     for ( j = 1 ; j <= (int)conmap[0] ; j++ )

	mov	eax, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _conmap$89463[ebp]
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, DWORD PTR [edx]
	jle	$LN47@film_const
	fstp	ST(0)
	fstp	ST(0)
$LN135@film_const:

; 683  :         }
; 684  :       }
; 685  :     }
; 686  : 
; 687  :     fe = first_fe = get_edge_fe(e_id);

	mov	eax, DWORD PTR tv740[ebp]
	mov	ecx, DWORD PTR _web+124
	mov	eax, DWORD PTR [eax+ecx]
	test	eax, eax
	je	SHORT $LN127@film_const
$LN75@film_const:
	cmp	DWORD PTR tv814[ebp], 0
	mov	eax, DWORD PTR [eax+28]
	je	SHORT $LN127@film_const
	xor	eax, 134217728				; 08000000H
$LN127@film_const:
	mov	ebx, eax
	mov	DWORD PTR _first_fe$[ebp], eax

; 688  :     if ( valid_id(fe) ) do

	shr	eax, 28					; 0000001cH
	mov	DWORD PTR _fe$[ebp], ebx
	test	al, 1
	je	$LN24@film_const
	npad	1
$LL26@film_const:

; 689  :     { f_id = get_fe_facet(fe);

	test	al, 1
	jne	SHORT $LN79@film_const
	mov	edx, DWORD PTR _NULLFACET
	mov	DWORD PTR _f_id$89460[ebp], edx
	jmp	SHORT $LN80@film_const
$LN79@film_const:
	mov	ecx, DWORD PTR _web+460
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+24]
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN78@film_const
	xor	eax, 134217728				; 08000000H
$LN78@film_const:
	mov	DWORD PTR _f_id$89460[ebp], eax
$LN80@film_const:

; 690  :       vgptri = get_vertex_vgrad(tailv);

	mov	eax, DWORD PTR _tailv$[ebp]
	push	eax
	call	_get_vertex_vgrad
	mov	esi, eax
	add	esp, 4

; 691  :       for  ( ; vgptri ; vgptri = vgptri->chain )

	test	esi, esi
	je	$LN139@film_const
	mov	edi, DWORD PTR _web+328
	mov	ebx, DWORD PTR _web+236
	npad	3
$LL23@film_const:

; 692  :       {
; 693  :         if ( !valid_id(vgptri->bb_id) ) continue; /* skip quantities */

	test	DWORD PTR [esi+8], 268435456		; 10000000H
	je	$LN22@film_const

; 694  :         if ( !equal_id(get_facet_body(f_id),vgptri->bb_id) ) 

	mov	ecx, DWORD PTR _f_id$89460[ebp]
	push	ecx
	call	_get_facet_body
	add	esp, 4
	cmp	eax, DWORD PTR [esi+8]
	je	SHORT $LN19@film_const

; 695  :         { if ( !equal_id(get_facet_body(inverse_id(f_id)),vgptri->bb_id) )

	mov	eax, DWORD PTR _f_id$89460[ebp]
	xor	eax, 134217728				; 08000000H
	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN85@film_const
	xor	eax, eax
	jmp	SHORT $LN82@film_const
$LN85@film_const:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN84@film_const
	xor	eax, eax
	jmp	SHORT $LN82@film_const
$LN84@film_const:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN83@film_const
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	ecx, DWORD PTR [edi+eax+784]
	mov	eax, DWORD PTR [edx+ecx+4]
	jmp	SHORT $LN82@film_const
$LN83@film_const:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	ecx, DWORD PTR [edi+eax+784]
	mov	eax, DWORD PTR [edx+ecx]
$LN82@film_const:
	cmp	eax, DWORD PTR [esi+8]
	jne	SHORT $LN22@film_const

; 696  :             continue;
; 697  :           else  bodysign = -sign;

	mov	edx, DWORD PTR _sign$[ebp]
	neg	edx
	mov	DWORD PTR _bodysign$[ebp], edx

; 698  :         }
; 699  :         else bodysign = sign;

	jmp	SHORT $LN16@film_const
$LN19@film_const:
	mov	eax, DWORD PTR _sign$[ebp]
	mov	DWORD PTR _bodysign$[ebp], eax
$LN16@film_const:

; 700  :         for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN22@film_const
	fild	DWORD PTR _bodysign$[ebp]
$LN15@film_const:

; 701  :         vgptri->grad[i] += bodysign*tgrad[i];  

	fld	QWORD PTR _tgrad$[ebp+eax*8]
	mov	ecx, DWORD PTR [esi+16]
	fmul	ST(0), ST(1)
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN15@film_const

; 700  :         for ( i = 0 ; i < SDIM ; i++ )

	mov	edi, DWORD PTR _web+328
	fstp	ST(0)
	mov	ebx, DWORD PTR _web+236
$LN22@film_const:

; 691  :       for  ( ; vgptri ; vgptri = vgptri->chain )

	mov	esi, DWORD PTR [esi+12]
	test	esi, esi
	jne	$LL23@film_const
	mov	ebx, DWORD PTR _fe$[ebp]
$LN139@film_const:

; 702  :       }
; 703  : 
; 704  :       vgptri = get_vertex_vgrad(headv);

	mov	edx, DWORD PTR _headv$[ebp]
	push	edx
	call	_get_vertex_vgrad

; 705  :       for  ( ; vgptri ; vgptri = vgptri->chain )

	mov	esi, DWORD PTR _web+616
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	je	$LN10@film_const
	mov	ebx, DWORD PTR _web+328
	npad	6
$LL12@film_const:

; 706  :       {
; 707  :         if ( !valid_id(vgptri->bb_id) ) continue; /* skip quantities */

	test	DWORD PTR [edi+8], 268435456		; 10000000H
	je	$LN11@film_const

; 708  :         if ( !equal_id(get_facet_body(f_id),vgptri->bb_id) ) 

	mov	eax, DWORD PTR _f_id$89460[ebp]
	push	eax
	call	_get_facet_body
	add	esp, 4
	cmp	eax, DWORD PTR [edi+8]
	je	SHORT $LN8@film_const

; 709  :         { if ( !equal_id(get_facet_body(inverse_id(f_id)),vgptri->bb_id) )

	mov	eax, DWORD PTR _f_id$89460[ebp]
	xor	eax, 134217728				; 08000000H
	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN91@film_const
	xor	eax, eax
	jmp	SHORT $LN88@film_const
$LN91@film_const:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN90@film_const
	xor	eax, eax
	jmp	SHORT $LN88@film_const
$LN90@film_const:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN89@film_const
	mov	ecx, DWORD PTR _web+236
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ebx+eax+784]
	mov	eax, DWORD PTR [edx+ecx+4]
	jmp	SHORT $LN88@film_const
$LN89@film_const:
	mov	edx, DWORD PTR _web+236
	mov	ecx, DWORD PTR _dymem
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ebx+ecx+784]
	mov	eax, DWORD PTR [eax+edx]
$LN88@film_const:
	cmp	eax, DWORD PTR [edi+8]
	jne	SHORT $LN11@film_const

; 710  :              continue;
; 711  :           else  bodysign = -sign;

	mov	eax, DWORD PTR _sign$[ebp]
	neg	eax
	mov	DWORD PTR _bodysign$[ebp], eax

; 712  :         }
; 713  :         else bodysign = sign;

	jmp	SHORT $LN5@film_const
$LN8@film_const:
	mov	ecx, DWORD PTR _sign$[ebp]
	mov	DWORD PTR _bodysign$[ebp], ecx
$LN5@film_const:

; 714  :         for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	test	esi, esi
	jle	SHORT $LN11@film_const
	fild	DWORD PTR _bodysign$[ebp]
$LN4@film_const:

; 715  :         vgptri->grad[i] += bodysign*hgrad[i];  

	fld	QWORD PTR _hgrad$[ebp+eax*8]
	mov	edx, DWORD PTR [edi+16]
	fmul	ST(0), ST(1)
	lea	ecx, DWORD PTR [edx+eax*8]
	inc	eax
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	esi, DWORD PTR _web+616
	cmp	eax, esi
	jl	SHORT $LN4@film_const

; 714  :         for ( i = 0 ; i < SDIM ; i++ )

	mov	ebx, DWORD PTR _web+328
	fstp	ST(0)
$LN11@film_const:

; 705  :       for  ( ; vgptri ; vgptri = vgptri->chain )

	mov	edi, DWORD PTR [edi+12]
	test	edi, edi
	jne	$LL12@film_const
	mov	ebx, DWORD PTR _fe$[ebp]
$LN10@film_const:

; 716  :       }
; 717  :       fe = get_next_facet(fe);

	test	ebx, 134217728				; 08000000H
	je	SHORT $LN95@film_const
	mov	eax, DWORD PTR _web+460
	and	ebx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ebx*4]
	mov	ebx, DWORD PTR [ecx+36]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN175@film_const
$LN95@film_const:
	mov	edx, DWORD PTR _web+460
	and	ebx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ebx*4]
	mov	ebx, DWORD PTR [eax+40]
$LN175@film_const:

; 718  :     } while ( valid_id(fe) && !equal_id(fe,first_fe) );

	mov	eax, ebx
	shr	eax, 28					; 0000001cH
	mov	DWORD PTR _fe$[ebp], ebx
	test	al, 1
	je	SHORT $LN24@film_const
	cmp	ebx, DWORD PTR _first_fe$[ebp]
	jne	$LL26@film_const
$LN24@film_const:
	mov	edi, DWORD PTR tv740[ebp]
$LN66@film_const:

; 618  :   edge_id e_id;
; 619  :   REAL side[MAXCOORD];
; 620  :   REAL tgrad[MAXCOORD];  
; 621  :   REAL hgrad[MAXCOORD];  
; 622  :   REAL grad;  
; 623  :   int i,j,k,m,sign,bodysign=0;
; 624  :   REAL green[MAXCOORD];
; 625  :   REAL green_deriv[MAXCOORD][MAXCOORD];
; 626  :   REAL midpt[MAXCOORD];
; 627  :   REAL *tcoord,*hcoord;
; 628  :   struct constraint *constr;
; 629  :   vertex_id headv,tailv;
; 630  :   facetedge_id fe,first_fe;
; 631  : 
; 632  :   FOR_ALL_EDGES(e_id)

	mov	ecx, DWORD PTR _web+124
	mov	edx, DWORD PTR [edi+ecx]
	mov	ebx, DWORD PTR [edx]
	mov	DWORD PTR _e_id$[ebp], ebx
	test	ebx, 268435456				; 10000000H
	jne	$LL67@film_const
	pop	edi
	pop	esi
$LN65@film_const:

; 719  :   }
; 720  : }  /* end film_constr_grad() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_film_constr_grad ENDP
_TEXT	ENDS
END
