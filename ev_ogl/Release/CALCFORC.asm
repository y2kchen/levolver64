; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\CALCFORC.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_get_fe_facet
EXTRN	_web:BYTE
EXTRN	_NULLFACET:DWORD
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
;	COMDAT _get_fe_facet
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_facet PROC					; COMDAT

; 58   : {

	push	ebp
	mov	ebp, esp

; 59   :   facet_id f_id;
; 60   :   
; 61   :   if ( !valid_id(fe_id) ) return NULLFACET;

	mov	ecx, DWORD PTR _fe_id$[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN2@get_fe_fac
	mov	eax, DWORD PTR _NULLFACET

; 64   :   return f_id;
; 65   : }

	pop	ebp
	ret	0
$LN2@get_fe_fac:

; 62   :   f_id = feptr(fe_id)->fe_facet_id;

	mov	edx, DWORD PTR _web+460
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+24]

; 63   :   if ( inverted(fe_id) ) invert(f_id);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_fe_fac
	xor	eax, 134217728				; 08000000H
$LN3@get_fe_fac:

; 64   :   return f_id;
; 65   : }

	pop	ebp
	ret	0
_get_fe_facet ENDP
_TEXT	ENDS
PUBLIC	_get_next_facet
; Function compile flags: /Ogtp
;	COMDAT _get_next_facet
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_next_facet PROC					; COMDAT

; 92   : {

	push	ebp
	mov	ebp, esp

; 93   :   if ( inverted(fe_id) ) 

	mov	eax, DWORD PTR _fe_id$[ebp]

; 94   :     return inverse_id(feptr(fe_id)->nextfacet[0]);

	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_next_f
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H

; 97   : }

	pop	ebp
	ret	0
$LN2@get_next_f:

; 95   :   else 
; 96   :     return feptr(fe_id)->nextfacet[1];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+40]

; 97   : }

	pop	ebp
	ret	0
_get_next_facet ENDP
_TEXT	ENDS
PUBLIC	_get_edge_headv
EXTRN	_dymem:DWORD
; Function compile flags: /Ogtp
;	COMDAT _get_edge_headv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_headv PROC					; COMDAT

; 200  : {

	push	ebp
	mov	ebp, esp

; 201  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 202  :      return get_edge_vertices(e_id)[0];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_h
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 205  : }

	pop	ebp
	ret	0
$LN2@get_edge_h:

; 203  :   else
; 204  :      return get_edge_vertices(e_id)[web.headvnum];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 205  : }

	pop	ebp
	ret	0
_get_edge_headv ENDP
_TEXT	ENDS
PUBLIC	_get_next_tail_edge
; Function compile flags: /Ogtp
;	COMDAT _get_next_tail_edge
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_next_tail_edge PROC				; COMDAT

; 270  : { return eptr(e_id)->next_vedge[inverted(e_id) ?1: 0] ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _e_id$[ebp]
	mov	edx, DWORD PTR _web+124
	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ecx*4+32]
	pop	ebp
	ret	0
_get_next_tail_edge ENDP
_TEXT	ENDS
PUBLIC	_get_body_facet
; Function compile flags: /Ogtp
;	COMDAT _get_body_facet
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_facet PROC					; COMDAT

; 279  : { return ( valid_id(b_id) ? bptr(b_id)->f_id : NULLID ); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_f
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+400]
	pop	ebp
	ret	0
$LN3@get_body_f:
	xor	eax, eax
	pop	ebp
	ret	0
_get_body_facet ENDP
_TEXT	ENDS
PUBLIC	_get_vertex_fe
; Function compile flags: /Ogtp
;	COMDAT _get_vertex_fe
_TEXT	SEGMENT
_v_id$ = 8						; size = 4
_get_vertex_fe PROC					; COMDAT

; 287  : { facet_id fe;

	push	ebp
	mov	ebp, esp

; 288  :   edge_id start_e, xx_id=vptr(v_id)->e_id;

	mov	eax, DWORD PTR _v_id$[ebp]
	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]

; 289  :   // might be bare edge, so seek along edge loop
; 290  :   if ( !valid_id(xx_id) ) return NULLID;

	test	eax, 268435456				; 10000000H
	jne	SHORT $LN4@get_vertex
	xor	eax, eax

; 299  : }

	pop	ebp
	ret	0
$LN4@get_vertex:
	push	esi

; 291  :   fe = eptr(xx_id)->fe_id;

	mov	esi, DWORD PTR _web+124
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	edx, DWORD PTR [ecx+28]
	push	edi

; 292  :   start_e = xx_id;
; 293  :   while ( !valid_id(fe) )

	test	edx, 268435456				; 10000000H
	jne	SHORT $LN2@get_vertex
	mov	edi, eax
	or	edi, 134217728				; 08000000H
	npad	8
$LL3@get_vertex:

; 294  :   { xx_id = get_next_tail_edge(xx_id);

	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	eax, DWORD PTR [ecx+eax*4+32]

; 295  :     if ( equal_element(xx_id,start_e) ) return NULLID;

	mov	edx, eax
	or	edx, 134217728				; 08000000H
	cmp	edx, edi
	je	SHORT $LN10@get_vertex

; 296  :     fe = eptr(xx_id)->fe_id;

	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	edx, DWORD PTR [ecx+28]
	test	edx, 268435456				; 10000000H
	je	SHORT $LL3@get_vertex
$LN2@get_vertex:

; 297  :   }
; 298  :   return  same_sign(fe,xx_id);

	and	eax, 134217728				; 08000000H
	pop	edi
	xor	eax, edx
	pop	esi

; 299  : }

	pop	ebp
	ret	0
$LN10@get_vertex:
	pop	edi

; 295  :     if ( equal_element(xx_id,start_e) ) return NULLID;

	xor	eax, eax
	pop	esi

; 299  : }

	pop	ebp
	ret	0
_get_vertex_fe ENDP
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	_get_body_volume
EXTRN	__fltused:DWORD
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _get_body_volume
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_volume PROC					; COMDAT

; 308  :     { return    ( valid_id(b_id) ?  bptr(b_id)->volume : 0.0 ) ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_v
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+40]
	pop	ebp
	ret	0
$LN3@get_body_v:
	fldz
	pop	ebp
	ret	0
_get_body_volume ENDP
_TEXT	ENDS
PUBLIC	_get_body_fixvol
; Function compile flags: /Ogtp
;	COMDAT _get_body_fixvol
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_fixvol PROC					; COMDAT

; 311  :      { return ( valid_id(b_id) ?  bptr(b_id)->fixvol : 0.0 ) ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_f@2
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+32]
	pop	ebp
	ret	0
$LN3@get_body_f@2:
	fldz
	pop	ebp
	ret	0
_get_body_fixvol ENDP
_TEXT	ENDS
PUBLIC	_get_body_abstotal
; Function compile flags: /Ogtp
;	COMDAT _get_body_abstotal
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_abstotal PROC					; COMDAT

; 314  :      { return ( valid_id(b_id) ?  bptr(b_id)->abstotal : 0.0 ) ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_a
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+304]
	pop	ebp
	ret	0
$LN3@get_body_a:
	fldz
	pop	ebp
	ret	0
_get_body_abstotal ENDP
_TEXT	ENDS
PUBLIC	_get_body_pressure
; Function compile flags: /Ogtp
;	COMDAT _get_body_pressure
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_pressure PROC					; COMDAT

; 317  :     { return  ( valid_id(b_id) ?    bptr(b_id)->pressure : 0.0 ) ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_p
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+312]
	pop	ebp
	ret	0
$LN3@get_body_p:
	fldz
	pop	ebp
	ret	0
_get_body_pressure ENDP
_TEXT	ENDS
PUBLIC	_get_body_volconst
; Function compile flags: /Ogtp
;	COMDAT _get_body_volconst
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_volconst PROC					; COMDAT

; 320  :   { return    ( valid_id(b_id) ?  bptr(b_id)->volconst : 0.0 ) ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_v@2
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+328]
	pop	ebp
	ret	0
$LN3@get_body_v@2:
	fldz
	pop	ebp
	ret	0
_get_body_volconst ENDP
_TEXT	ENDS
PUBLIC	_set_body_pressure
; Function compile flags: /Ogtp
;	COMDAT _set_body_pressure
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_v$ = 12						; size = 8
_set_body_pressure PROC					; COMDAT

; 326  :       {         ( valid_id(b_id) ?  bptr(b_id)->pressure = (v) : 0.0 ) ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@set_body_p
	mov	ecx, DWORD PTR _web+348
	fld	QWORD PTR _v$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fstp	QWORD PTR [edx+312]
$LN3@set_body_p:
	pop	ebp
	ret	0
_set_body_pressure ENDP
_TEXT	ENDS
PUBLIC	_set_body_volconst
EXTRN	_gen_quant_list:DWORD
EXTRN	_everything_quantities_flag:DWORD
; Function compile flags: /Ogtp
;	COMDAT _set_body_volconst
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_v$ = 12						; size = 8
_set_body_volconst PROC					; COMDAT

; 329  : { if ( !valid_id(b_id) ) return;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN1@set_body_v

; 330  :   bptr(b_id)->volconst = v;

	mov	ecx, DWORD PTR _web+348
	fld	QWORD PTR _v$[ebp]
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	edx, DWORD PTR [eax+ecx]
	fst	QWORD PTR [edx+328]

; 331  :   if ( everything_quantities_flag )

	cmp	DWORD PTR _everything_quantities_flag, 0
	je	SHORT $LN6@set_body_v

; 332  :   { struct gen_quant *q = GEN_QUANT(get_body_volquant(b_id));

	mov	ecx, DWORD PTR _web+348
	mov	edx, DWORD PTR [eax+ecx]
	mov	eax, DWORD PTR [edx+404]

; 333  :     q->volconst = v;

	mov	ecx, DWORD PTR _gen_quant_list
	imul	eax, 368				; 00000170H
	fstp	QWORD PTR [eax+ecx+208]

; 334  :   }
; 335  : }

	pop	ebp
	ret	0
$LN6@set_body_v:

; 333  :     q->volconst = v;

	fstp	ST(0)
$LN1@set_body_v:

; 334  :   }
; 335  : }

	pop	ebp
	ret	0
_set_body_volconst ENDP
_TEXT	ENDS
PUBLIC	_thread_calc_facet_energy
EXTRN	_calc_facet_energy:DWORD
EXTRN	_thread_stages:DWORD
EXTRN	_max_thread_stages:DWORD
EXTRN	_nprocs:DWORD
EXTRN	_win_get_thread_data:PROC
EXTRN	_thread_data_key:DWORD
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\calcforc.c
;	COMDAT _thread_calc_facet_energy
_TEXT	SEGMENT
tv205 = -12						; size = 4
tv138 = -8						; size = 4
_maxstage$89035 = -4					; size = 4
_thread_calc_facet_energy PROC				; COMDAT

; 26   : { 

	push	ebp
	mov	ebp, esp

; 27   : #ifdef OLDTHNEXT
; 28   :   facet_id f_id;
; 29   :   THREAD_FOR_ALL_FACETS(f_id)
; 30   :      (*calc_facet_energy)(f_id,ALL_ENERGIES);
; 31   : #else
; 32   :   THREAD_FOR_ALL_NEW(FACET, {(*calc_facet_energy)(*idptr,ALL_ENERGIES);});

	mov	eax, DWORD PTR _thread_data_key
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	eax
	call	_win_get_thread_data
	mov	ecx, DWORD PTR _nprocs
	mov	ebx, eax
	mov	esi, DWORD PTR [ebx]
	dec	ecx
	add	esp, 4
	cmp	esi, ecx
	jne	SHORT $LN11@thread_cal
	xor	eax, eax
	jmp	SHORT $LN12@thread_cal
$LN11@thread_cal:
	lea	eax, DWORD PTR [esi+1]
$LN12@thread_cal:
	test	esi, esi
	jne	SHORT $LN13@thread_cal
	mov	edx, DWORD PTR _max_thread_stages
	inc	edx
	mov	DWORD PTR _maxstage$89035[ebp], edx
	jmp	SHORT $LN14@thread_cal
$LN13@thread_cal:
	mov	ecx, DWORD PTR _max_thread_stages
	mov	DWORD PTR _maxstage$89035[ebp], ecx
$LN14@thread_cal:
	imul	esi, 548				; 00000224H
	add	esi, DWORD PTR _thread_stages
	mov	DWORD PTR [esi+540], 0
	mov	edx, DWORD PTR [esi+540]
	cmp	edx, DWORD PTR _maxstage$89035[ebp]
	jge	$LN6@thread_cal
	imul	eax, 548				; 00000224H
	add	eax, 540				; 0000021cH
	mov	DWORD PTR tv205[ebp], eax
	push	edi
	npad	7
$LL5@thread_cal:
	mov	eax, DWORD PTR _thread_stages
	mov	ecx, DWORD PTR tv205[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR [esi+540]
	cmp	edx, eax
	jl	SHORT $LL5@thread_cal
	mov	ecx, DWORD PTR [esi+540]
	rdtsc
	mov	DWORD PTR [ebx+ecx*8+1808], eax
	mov	DWORD PTR [ebx+ecx*8+1812], edx
	mov	ecx, DWORD PTR [esi+540]
	mov	edx, DWORD PTR [esi+540]
	mov	eax, DWORD PTR [esi+edx*4+252]
	mov	edi, DWORD PTR [esi+ecx*4+72]
	test	eax, eax
	jle	SHORT $LN1@thread_cal
	mov	DWORD PTR tv138[ebp], eax
	npad	7
$LL3@thread_cal:
	mov	eax, DWORD PTR [edi]
	push	2
	push	eax
	call	DWORD PTR _calc_facet_energy
	add	esp, 8
	add	edi, 4
	dec	DWORD PTR tv138[ebp]
	jne	SHORT $LL3@thread_cal
$LN1@thread_cal:
	mov	ecx, DWORD PTR [esi+540]
	rdtsc
	mov	DWORD PTR [ebx+ecx*8+1880], eax
	mov	DWORD PTR [ebx+ecx*8+1884], edx
	inc	DWORD PTR [esi+540]
	mov	ecx, DWORD PTR [esi+540]
	cmp	ecx, DWORD PTR _maxstage$89035[ebp]
	jl	$LL5@thread_cal
	pop	edi
$LN6@thread_cal:
	pop	esi
	pop	ebx

; 33   : #endif
; 34   :   
; 35   : }  // end thread_calc_facet_energy()

	mov	esp, ebp
	pop	ebp
	ret	0
_thread_calc_facet_energy ENDP
_TEXT	ENDS
PUBLIC	_thread_calc_facet_forces
EXTRN	_calc_facet_forces:DWORD
; Function compile flags: /Ogtp
;	COMDAT _thread_calc_facet_forces
_TEXT	SEGMENT
tv205 = -12						; size = 4
tv138 = -8						; size = 4
_maxstage$89054 = -4					; size = 4
_thread_calc_facet_forces PROC				; COMDAT

; 45   : { 

	push	ebp
	mov	ebp, esp

; 46   :   
; 47   : #ifdef OLDTHNEXT
; 48   :   facet_id f_id;
; 49   :   THREAD_FOR_ALL_FACETS(f_id)
; 50   :   {  
; 51   :      (*calc_facet_forces)(f_id);
; 52   :   }
; 53   : #else
; 54   :   THREAD_FOR_ALL_NEW(FACET,(*calc_facet_forces)(*idptr))

	mov	eax, DWORD PTR _thread_data_key
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi
	push	eax
	call	_win_get_thread_data
	mov	ecx, DWORD PTR _nprocs
	mov	edi, eax
	mov	esi, DWORD PTR [edi]
	dec	ecx
	add	esp, 4
	cmp	esi, ecx
	jne	SHORT $LN11@thread_cal@2
	xor	eax, eax
	jmp	SHORT $LN12@thread_cal@2
$LN11@thread_cal@2:
	lea	eax, DWORD PTR [esi+1]
$LN12@thread_cal@2:
	test	esi, esi
	jne	SHORT $LN13@thread_cal@2
	mov	edx, DWORD PTR _max_thread_stages
	inc	edx
	mov	DWORD PTR _maxstage$89054[ebp], edx
	jmp	SHORT $LN14@thread_cal@2
$LN13@thread_cal@2:
	mov	ecx, DWORD PTR _max_thread_stages
	mov	DWORD PTR _maxstage$89054[ebp], ecx
$LN14@thread_cal@2:
	imul	esi, 548				; 00000224H
	add	esi, DWORD PTR _thread_stages
	mov	DWORD PTR [esi+540], 0
	mov	edx, DWORD PTR [esi+540]
	cmp	edx, DWORD PTR _maxstage$89054[ebp]
	jge	$LN6@thread_cal@2
	imul	eax, 548				; 00000224H
	add	eax, 540				; 0000021cH
	mov	DWORD PTR tv205[ebp], eax
	push	ebx
	npad	7
$LL5@thread_cal@2:
	mov	eax, DWORD PTR _thread_stages
	mov	ecx, DWORD PTR tv205[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR [esi+540]
	cmp	edx, eax
	jl	SHORT $LL5@thread_cal@2
	mov	ecx, DWORD PTR [esi+540]
	rdtsc
	mov	DWORD PTR [edi+ecx*8+1808], eax
	mov	DWORD PTR [edi+ecx*8+1812], edx
	mov	ecx, DWORD PTR [esi+540]
	mov	edx, DWORD PTR [esi+540]
	mov	eax, DWORD PTR [esi+edx*4+252]
	mov	ebx, DWORD PTR [esi+ecx*4+72]
	test	eax, eax
	jle	SHORT $LN1@thread_cal@2
	mov	DWORD PTR tv138[ebp], eax
	npad	7
$LL3@thread_cal@2:
	mov	eax, DWORD PTR [ebx]
	push	eax
	call	DWORD PTR _calc_facet_forces
	add	esp, 4
	add	ebx, 4
	dec	DWORD PTR tv138[ebp]
	jne	SHORT $LL3@thread_cal@2
$LN1@thread_cal@2:
	mov	ecx, DWORD PTR [esi+540]
	rdtsc
	mov	DWORD PTR [edi+ecx*8+1880], eax
	mov	DWORD PTR [edi+ecx*8+1884], edx
	inc	DWORD PTR [esi+540]
	mov	ecx, DWORD PTR [esi+540]
	cmp	ecx, DWORD PTR _maxstage$89054[ebp]
	jl	$LL5@thread_cal@2
	pop	ebx
$LN6@thread_cal@2:
	pop	edi
	pop	esi

; 55   : #endif
; 56   : 
; 57   : } // end thread_calc_facet_forces()

	mov	esp, ebp
	pop	ebp
	ret	0
_thread_calc_facet_forces ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CN@KPPNDCLD@LAGRANGE?5model?5needs?5convert_to_@ ; `string'
PUBLIC	_local_calc_energy
EXTRN	_extrap_val:BYTE
EXTRN	_reflevel:DWORD
EXTRN	_calc_quants:PROC
EXTRN	_binary_tree_add:PROC
EXTRN	_constr_spring_energy:PROC
EXTRN	_bdry_spring_energy:PROC
EXTRN	_sqgauss_energy:PROC
EXTRN	_conf_edge_curv_energy:PROC
EXTRN	_kusner_energy:PROC
EXTRN	_sqcurve_energy_end:PROC
EXTRN	_thread_launch:PROC
EXTRN	_threadflag:DWORD
EXTRN	_calc_constr_energy_v:PROC
EXTRN	_sqcurve_energy_string:PROC
EXTRN	_sqcurve_energy_string_init:PROC
EXTRN	_calc_constr_energy_e:PROC
EXTRN	_calc_edge_energy:DWORD
EXTRN	_calc_simplex_edge_energy:PROC
EXTRN	_calc_simplex_energy:PROC
EXTRN	_sqcurve_energy_init:PROC
EXTRN	_conf_edge_curv_flag:DWORD
EXTRN	_kusner_flag:DWORD
EXTRN	_sqgauss_param:DWORD
EXTRN	_sqgauss_flag:DWORD
EXTRN	_mean_curv_int_flag:DWORD
EXTRN	_localbase:DWORD
EXTRN	_square_curvature_param:DWORD
EXTRN	_square_curvature_flag:DWORD
EXTRN	_square_grad:PROC
EXTRN	_min_square_grad_flag:DWORD
EXTRN	_kb_error:PROC
EXTRN	_convert_to_quantities:PROC
EXTRN	_auto_convert_flag:DWORD
EXTRN	_quantities_only_flag:DWORD
EXTRN	_euclidean_area:QWORD
EXTRN	_calc_periods:PROC
EXTRN	__CIlog:PROC
;	COMDAT ??_C@_0CN@KPPNDCLD@LAGRANGE?5model?5needs?5convert_to_@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0CN@KPPNDCLD@LAGRANGE?5model?5needs?5convert_to_@ DB 'LAGRANGE mode'
	DB	'l needs convert_to_quantities.', 0aH, 00H	; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\calcforc.c
CONST	ENDS
;	COMDAT _local_calc_energy
_TEXT	SEGMENT
tv1099 = -20						; size = 8
tv1046 = -20						; size = 8
_fix$89218 = -20					; size = 8
_attr$89176 = -20					; size = 8
_attr$89133 = -20					; size = 8
_vol$89219 = -12					; size = 8
_attr$89147 = -12					; size = 8
tv1090 = -4						; size = 4
_local_calc_energy PROC					; COMDAT

; 88   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 89   :   int i;
; 90   :   body_id    b_id;
; 91   :   edge_id e_id;
; 92   : 
; 93   :   if ( web.torus_flag ) calc_periods(ADJUST_VOLUMES);

	cmp	DWORD PTR _web+860, 0
	je	SHORT $LN96@local_calc
	push	1
	jmp	SHORT $LN251@local_calc
$LN96@local_calc:

; 94   :   else if ( web.torus_period ) calc_periods(NO_ADJUST_VOLUMES);

	cmp	DWORD PTR _web+1608, 0
	je	SHORT $LN94@local_calc
	push	0
$LN251@local_calc:
	call	_calc_periods
	add	esp, 4
$LN94@local_calc:

; 95   : 
; 96   :   web.total_energy = 0.0;

	fldz
	mov	eax, OFFSET _web+1248
	fst	QWORD PTR _web+1240

; 97   :   web.total_area    = 0.0;

	fst	QWORD PTR _web+992
$LN93@local_calc:

; 98   :   for ( i = 0 ; i < MAXADDENDS ; i++ ) 
; 99   :   { web.total_area_addends[i] = 0.0;

	fst	QWORD PTR [eax-248]
	add	eax, 8

; 100  :     web.total_energy_addends[i] = 0.0;

	fst	QWORD PTR [eax-8]
	cmp	eax, OFFSET _web+1488
	jl	SHORT $LN93@local_calc

; 101  :   }
; 102  :   web.spring_energy = 0.0;
; 103  :   euclidean_area = 0.0;
; 104  : 
; 105  :   if ( web.modeltype == LAGRANGE && !quantities_only_flag )

	cmp	DWORD PTR _web+628, 3
	fst	QWORD PTR _web+1488
	fstp	QWORD PTR _euclidean_area
	jne	SHORT $LN156@local_calc
	cmp	DWORD PTR _quantities_only_flag, 0
	jne	SHORT $LN156@local_calc

; 106  :   { if ( auto_convert_flag ) convert_to_quantities();

	cmp	DWORD PTR _auto_convert_flag, 0
	je	SHORT $LN89@local_calc
	call	_convert_to_quantities

; 107  :     else

	jmp	SHORT $LN156@local_calc
$LN89@local_calc:

; 108  :      kb_error(1774,"LAGRANGE model needs convert_to_quantities.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CN@KPPNDCLD@LAGRANGE?5model?5needs?5convert_to_@
	push	1774					; 000006eeH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN156@local_calc:

; 109  :   }
; 110  : 
; 111  :   if ( min_square_grad_flag ) { web.total_energy = square_grad(); return; }

	cmp	DWORD PTR _min_square_grad_flag, 0
	je	SHORT $LN87@local_calc
	call	_square_grad
	fstp	QWORD PTR _web+1240

; 247  : 
; 248  : } /* end local_calc_energy() */

	mov	esp, ebp
	pop	ebp
	ret	0
$LN87@local_calc:

; 112  :   if ( quantities_only_flag ) goto quantities_only;

	cmp	DWORD PTR _quantities_only_flag, 0
	push	ebx
	push	esi
	push	edi
	jne	$quantities_only$89084

; 113  : 
; 114  :   if ( square_curvature_flag )

	cmp	DWORD PTR _square_curvature_flag, 0
	mov	ebx, DWORD PTR _web+5656
	mov	edx, DWORD PTR _web+5652
	mov	ecx, DWORD PTR _square_curvature_param
	mov	esi, DWORD PTR _dymem
	mov	edi, DWORD PTR _localbase
	je	SHORT $LN164@local_calc

; 115  :   { if ( globals(square_curvature_param)->value.real == 0.0 )

	mov	eax, ecx
	and	eax, -16777216				; ff000000H
	cmp	eax, 268435456				; 10000000H
	je	SHORT $LN99@local_calc
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN101@local_calc
	mov	eax, ecx
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [edi]
	jmp	SHORT $LN100@local_calc
$LN101@local_calc:
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN99@local_calc
	mov	eax, ecx
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	jmp	SHORT $LN100@local_calc
$LN99@local_calc:
	mov	eax, ecx
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+esi]
$LN100@local_calc:
	fld	QWORD PTR [eax+64]
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	SHORT $LN84@local_calc

; 116  :       square_curvature_flag &= ~EVALUATE;

	and	DWORD PTR _square_curvature_flag, -3	; fffffffdH
	jmp	SHORT $LN83@local_calc
$LN84@local_calc:

; 117  :     else square_curvature_flag |= EVALUATE;

	or	DWORD PTR _square_curvature_flag, 2
	jmp	SHORT $LN83@local_calc
$LN164@local_calc:
	fldz
$LN83@local_calc:

; 118  :   }
; 119  : 
; 120  :   if ( mean_curv_int_flag )

	cmp	DWORD PTR _mean_curv_int_flag, 0
	je	SHORT $LN80@local_calc

; 121  :   { if ( globals(square_curvature_param)->value.real == 0.0 )

	mov	eax, ecx
	and	eax, -16777216				; ff000000H
	and	ecx, 16777215				; 00ffffffH
	cmp	eax, 268435456				; 10000000H
	jne	SHORT $LN109@local_calc
	lea	ecx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [ecx+esi]
	jmp	SHORT $LN106@local_calc
$LN109@local_calc:
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN107@local_calc
	imul	ecx, 224				; 000000e0H
	add	ecx, DWORD PTR [edi]
	jmp	SHORT $LN106@local_calc
$LN107@local_calc:
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN105@local_calc
	mov	ecx, DWORD PTR [ebx+ecx*4]
	jmp	SHORT $LN106@local_calc
$LN105@local_calc:
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [eax+esi]
$LN106@local_calc:
	fld	QWORD PTR [ecx+64]
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN81@local_calc

; 122  :       mean_curv_int_flag &= ~EVALUATE;

	and	DWORD PTR _mean_curv_int_flag, -3	; fffffffdH
	jmp	SHORT $LN80@local_calc
$LN81@local_calc:

; 123  :     else mean_curv_int_flag |= EVALUATE;

	or	DWORD PTR _mean_curv_int_flag, 2
$LN80@local_calc:

; 124  :   }
; 125  : 
; 126  :   if ( sqgauss_flag )

	cmp	DWORD PTR _sqgauss_flag, 0
	je	SHORT $LN207@local_calc

; 127  :   { if ( globals(sqgauss_param)->value.real == 0.0 )

	mov	eax, DWORD PTR _sqgauss_param
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	and	eax, 16777215				; 00ffffffH
	cmp	ecx, 268435456				; 10000000H
	jne	SHORT $LN115@local_calc
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [ecx+esi]
	jmp	SHORT $LN112@local_calc
$LN115@local_calc:
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN113@local_calc
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [edi]
	jmp	SHORT $LN112@local_calc
$LN113@local_calc:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN111@local_calc
	mov	eax, DWORD PTR [ebx+eax*4]
	jmp	SHORT $LN112@local_calc
$LN111@local_calc:
	lea	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [edx+esi]
$LN112@local_calc:
	fld	QWORD PTR [eax+64]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN78@local_calc

; 128  :       sqgauss_flag &= ~EVALUATE;

	and	DWORD PTR _sqgauss_flag, -3		; fffffffdH
	jmp	SHORT $LN174@local_calc
$LN78@local_calc:

; 129  :     else sqgauss_flag |= EVALUATE;

	or	DWORD PTR _sqgauss_flag, 2
	jmp	SHORT $LN174@local_calc
$LN207@local_calc:
	fstp	ST(0)
$LN174@local_calc:

; 130  :   }
; 131  : 
; 132  :   if ( ((square_curvature_flag | mean_curv_int_flag) & EVALUATE)
; 133  :           && !kusner_flag && !conf_edge_curv_flag ) 

	mov	eax, DWORD PTR _mean_curv_int_flag
	or	eax, DWORD PTR _square_curvature_flag
	test	al, 2
	je	SHORT $LN157@local_calc
	cmp	DWORD PTR _kusner_flag, 0
	jne	SHORT $LN157@local_calc
	cmp	DWORD PTR _conf_edge_curv_flag, 0
	jne	SHORT $LN157@local_calc

; 134  :      sqcurve_energy_init();

	call	_sqcurve_energy_init
$LN157@local_calc:

; 135  : 
; 136  :   if ( web.representation == SIMPLEX )

	mov	eax, DWORD PTR _web+624
	cmp	eax, 3
	jne	$LN75@local_calc

; 137  :   { facet_id f_id;
; 138  :     FOR_ALL_FACETS(f_id)

	mov	ecx, DWORD PTR _web+272
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN175@local_calc
	mov	edi, DWORD PTR _web+236
	npad	9
$LL74@local_calc:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+edi]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN73@local_calc

; 139  :       calc_simplex_energy(f_id,ALL_ENERGIES);

	push	2
	push	ecx
	call	_calc_simplex_energy
	mov	edi, DWORD PTR _web+236
	add	esp, 8
$LN73@local_calc:

; 137  :   { facet_id f_id;
; 138  :     FOR_ALL_FACETS(f_id)

	mov	ecx, DWORD PTR [esi+edi]
	mov	ecx, DWORD PTR [ecx]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LL74@local_calc
$LN175@local_calc:

; 140  :     FOR_ALL_EDGES(e_id)

	mov	ecx, DWORD PTR _web+160
	test	ecx, 268435456				; 10000000H
	je	$LN173@local_calc
	npad	5
$LL69@local_calc:
	mov	edx, DWORD PTR _web+124
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+edx]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN68@local_calc

; 141  :       calc_simplex_edge_energy(e_id,ALL_ENERGIES);

	push	2
	push	ecx
	call	_calc_simplex_edge_energy
	add	esp, 8
$LN68@local_calc:

; 140  :     FOR_ALL_EDGES(e_id)

	mov	eax, DWORD PTR _web+124
	mov	ecx, DWORD PTR [esi+eax]
	mov	ecx, DWORD PTR [ecx]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LL69@local_calc

; 142  :   }
; 143  :   else if ( web.representation == STRING )

	jmp	$LN173@local_calc
$LN75@local_calc:
	cmp	eax, 1
	jne	$LN63@local_calc

; 144  :   { vertex_id v_id;
; 145  :             
; 146  :     FOR_ALL_EDGES(e_id)

	mov	edi, DWORD PTR _web+160
	test	edi, 268435456				; 10000000H
	je	SHORT $LN160@local_calc
	npad	6
$LL62@local_calc:
	mov	edx, DWORD PTR _web+124
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+edx]
	mov	ebx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [eax+12]
	mov	eax, ebx
	and	eax, 1
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN61@local_calc

; 147  :     { ATTR attr = get_eattr(e_id);
; 148  :          
; 149  :       (*calc_edge_energy)(e_id);

	push	edi
	mov	DWORD PTR _attr$89133[ebp+4], edx
	call	DWORD PTR _calc_edge_energy

; 150  :       if ( attr & BDRY_ENERGY )

	and	ebx, 512				; 00000200H
	xor	eax, eax
	add	esp, 4
	or	ebx, eax
	je	SHORT $LN61@local_calc

; 151  :             calc_constr_energy_e(e_id);  /* substitute surface energy */

	push	edi
	call	_calc_constr_energy_e
	add	esp, 4
$LN61@local_calc:

; 144  :   { vertex_id v_id;
; 145  :             
; 146  :     FOR_ALL_EDGES(e_id)

	mov	eax, DWORD PTR _web+124
	mov	ecx, DWORD PTR [esi+eax]
	mov	edi, DWORD PTR [ecx]
	test	edi, 268435456				; 10000000H
	jne	SHORT $LL62@local_calc
$LN160@local_calc:

; 152  :     }
; 153  : 
; 154  :     /* boundary energy  and square curvature */
; 155  :     if ( ((square_curvature_flag | mean_curv_int_flag) & EVALUATE)
; 156  :                     && !kusner_flag  && !conf_edge_curv_flag ) 

	mov	edx, DWORD PTR _mean_curv_int_flag
	or	edx, DWORD PTR _square_curvature_flag
	test	dl, 2
	je	SHORT $LN176@local_calc
	cmp	DWORD PTR _kusner_flag, 0
	jne	SHORT $LN176@local_calc
	cmp	DWORD PTR _conf_edge_curv_flag, 0
	jne	SHORT $LN176@local_calc

; 157  :           sqcurve_energy_string_init();

	call	_sqcurve_energy_string_init
$LN176@local_calc:

; 158  :     FOR_ALL_VERTICES(v_id)

	mov	edi, DWORD PTR _web+48
	test	edi, 268435456				; 10000000H
	je	$LN173@local_calc
	mov	eax, DWORD PTR _web+12
	npad	7
$LL165@local_calc:
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [eax+esi]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR tv1046[ebp+4], eax
	mov	eax, ecx
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN54@local_calc

; 159  :     { ATTR attr = get_vattr(v_id);
; 160  :       if ( ((square_curvature_flag | mean_curv_int_flag) & EVALUATE)
; 161  :                     && !kusner_flag  && !conf_edge_curv_flag ) 

	mov	edx, DWORD PTR _mean_curv_int_flag
	or	edx, DWORD PTR _square_curvature_flag
	mov	ebx, ecx
	mov	ecx, DWORD PTR tv1046[ebp+4]
	mov	DWORD PTR _attr$89147[ebp+4], ecx
	test	dl, 2
	je	SHORT $LN166@local_calc
	cmp	DWORD PTR _kusner_flag, 0
	jne	SHORT $LN166@local_calc
	cmp	DWORD PTR _conf_edge_curv_flag, 0
	jne	SHORT $LN166@local_calc

; 162  :            sqcurve_energy_string(v_id);

	push	edi
	call	_sqcurve_energy_string
	add	esp, 4
$LN166@local_calc:

; 163  :       if ( attr & BDRY_ENERGY )

	mov	eax, ebx
	and	eax, 512				; 00000200H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN54@local_calc

; 164  :       { if ( attr & CONSTRAINT )

	and	ebx, 1024				; 00000400H
	xor	eax, eax
	or	ebx, eax
	je	SHORT $LN54@local_calc

; 165  :             calc_constr_energy_v(v_id);

	push	edi
	call	_calc_constr_energy_v
	add	esp, 4
$LN54@local_calc:

; 158  :     FOR_ALL_VERTICES(v_id)

	mov	eax, DWORD PTR _web+12
	mov	ecx, DWORD PTR [eax+esi]
	mov	edi, DWORD PTR [ecx]
	test	edi, 268435456				; 10000000H
	jne	$LL165@local_calc

; 166  :       }
; 167  :     }
; 168  :   } /* end STRING */
; 169  : 
; 170  :   else /* web.representation == SOAPFILM */

	jmp	$LN173@local_calc
$LN63@local_calc:

; 171  :   {  facet_id  f_id;
; 172  : 
; 173  :     if ( threadflag )

	cmp	DWORD PTR _threadflag, 0
	je	SHORT $LN46@local_calc

; 174  :       thread_launch(TH_CALC_FACET_ENERGY,FACET);

	push	2
	push	3
	call	_thread_launch
	add	esp, 8

; 175  :     else

	jmp	SHORT $LN42@local_calc
$LN46@local_calc:

; 176  :     { FOR_ALL_FACETS(f_id)

	mov	ecx, DWORD PTR _web+272
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN42@local_calc
	mov	edi, DWORD PTR _web+236
	npad	1
$LL44@local_calc:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [edi+esi]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN43@local_calc

; 177  :        (*calc_facet_energy)(f_id,ALL_ENERGIES);

	push	2
	push	ecx
	call	DWORD PTR _calc_facet_energy
	mov	edi, DWORD PTR _web+236
	add	esp, 8
$LN43@local_calc:

; 176  :     { FOR_ALL_FACETS(f_id)

	mov	edx, DWORD PTR [edi+esi]
	mov	ecx, DWORD PTR [edx]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LL44@local_calc
$LN42@local_calc:

; 178  :     }
; 179  : 
; 180  :     FOR_ALL_EDGES(e_id)

	mov	ebx, DWORD PTR _web+160
	test	ebx, 268435456				; 10000000H
	je	SHORT $LN173@local_calc
	npad	8
$LL39@local_calc:
	mov	eax, DWORD PTR _web+124
	mov	esi, ebx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+eax]
	mov	edi, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [eax+12]
	mov	eax, edi
	and	eax, 1
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN38@local_calc

; 181  :     { ATTR attr = get_eattr(e_id);
; 182  :       if ( attr & BDRY_ENERGY ) 

	mov	eax, edi
	and	eax, 512				; 00000200H
	or	eax, ecx
	mov	DWORD PTR _attr$89176[ebp+4], edx
	je	SHORT $LN33@local_calc

; 183  :         { if ( attr & CONSTRAINT )

	mov	eax, edi
	and	eax, 1024				; 00000400H
	or	eax, ecx
	je	SHORT $LN33@local_calc

; 184  :               calc_constr_energy_e(e_id);

	push	ebx
	call	_calc_constr_energy_e
	add	esp, 4
$LN33@local_calc:

; 185  :         }
; 186  :       if ( attr & DENSITY )

	and	edi, 16					; 00000010H
	xor	eax, eax
	or	edi, eax
	je	SHORT $LN38@local_calc

; 187  :         (*calc_edge_energy)(e_id);  /* for triple line energies */

	push	ebx
	call	DWORD PTR _calc_edge_energy
	add	esp, 4
$LN38@local_calc:

; 178  :     }
; 179  : 
; 180  :     FOR_ALL_EDGES(e_id)

	mov	ecx, DWORD PTR _web+124
	mov	edx, DWORD PTR [esi+ecx]
	mov	ebx, DWORD PTR [edx]
	test	ebx, 268435456				; 10000000H
	jne	SHORT $LL39@local_calc
$LN173@local_calc:

; 188  :     }
; 189  :   } /* end SOAPFILM */
; 190  : 
; 191  :   if ( ((square_curvature_flag | mean_curv_int_flag) & EVALUATE)
; 192  :           && !kusner_flag && !conf_edge_curv_flag ) 

	mov	eax, DWORD PTR _mean_curv_int_flag
	or	eax, DWORD PTR _square_curvature_flag
	test	al, 2
	je	SHORT $LN179@local_calc
	cmp	DWORD PTR _kusner_flag, 0
	jne	SHORT $LN179@local_calc
	cmp	DWORD PTR _conf_edge_curv_flag, 0
	jne	SHORT $LN179@local_calc

; 193  :      sqcurve_energy_end();

	call	_sqcurve_energy_end
$LN179@local_calc:

; 194  : 
; 195  :   if ( (square_curvature_flag & EVALUATE) && kusner_flag ) 

	test	BYTE PTR _square_curvature_flag, 2
	je	SHORT $LN182@local_calc
	cmp	DWORD PTR _kusner_flag, 0
	je	SHORT $LN181@local_calc

; 196  :       kusner_energy();

	call	_kusner_energy
$LN181@local_calc:

; 197  :   if ( (square_curvature_flag & EVALUATE) && conf_edge_curv_flag ) 

	test	BYTE PTR _square_curvature_flag, 2
	je	SHORT $LN182@local_calc
	cmp	DWORD PTR _conf_edge_curv_flag, 0
	je	SHORT $LN182@local_calc

; 198  :       conf_edge_curv_energy();

	call	_conf_edge_curv_energy
$LN182@local_calc:

; 199  : 
; 200  :   if ( sqgauss_flag & EVALUATE ) sqgauss_energy();

	test	BYTE PTR _sqgauss_flag, 2
	je	SHORT $LN28@local_calc
	call	_sqgauss_energy
$LN28@local_calc:

; 201  : 
; 202  :   /* Add kludge forces on boundary edges to prevent pulling away */
; 203  :   /* Could use more exact test to see if worth calling these  */
; 204  :   if ( (web.modeltype == LINEAR) && (web.convex_flag) )

	cmp	DWORD PTR _web+628, 1
	jne	$quantities_only$89084
	cmp	DWORD PTR _web+840, 0
	je	$quantities_only$89084

; 205  :   {  
; 206  :     if ( web.bdrymax > 0 )

	cmp	DWORD PTR _web+768, 0
	jle	SHORT $LN180@local_calc

; 207  :     { FOR_ALL_EDGES(e_id)

	mov	ecx, DWORD PTR _web+160
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN180@local_calc
	mov	eax, DWORD PTR _web+124
$LL25@local_calc:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN24@local_calc

; 208  :         bdry_spring_energy(e_id);

	push	ecx
	call	_bdry_spring_energy
	add	esp, 4
$LN24@local_calc:

; 207  :     { FOR_ALL_EDGES(e_id)

	mov	eax, DWORD PTR _web+124
	mov	ecx, DWORD PTR [esi+eax]
	mov	ecx, DWORD PTR [ecx]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LL25@local_calc
	jmp	SHORT $LN23@local_calc
$LN180@local_calc:
	mov	eax, DWORD PTR _web+124
$LN23@local_calc:

; 209  :     }
; 210  :     if ( web.maxcon > 0 )

	cmp	DWORD PTR _web+644, 0
	jle	SHORT $quantities_only$89084

; 211  :     { FOR_ALL_EDGES(e_id)

	mov	ecx, DWORD PTR _web+160
	test	ecx, 268435456				; 10000000H
	je	SHORT $quantities_only$89084
	npad	7
$LL19@local_calc:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN18@local_calc

; 212  :         constr_spring_energy(e_id);

	push	ecx
	call	_constr_spring_energy
	add	esp, 4
$LN18@local_calc:

; 211  :     { FOR_ALL_EDGES(e_id)

	mov	eax, DWORD PTR _web+124
	mov	edx, DWORD PTR [esi+eax]
	mov	ecx, DWORD PTR [edx]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LL19@local_calc
$quantities_only$89084:

; 213  :     }
; 214  :   }
; 215  : 
; 216  : quantities_only:
; 217  :   FOR_ALL_BODIES(b_id)

	mov	ebx, DWORD PTR _web+384
	mov	eax, ebx
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv1090[ebp], eax
	je	$LN12@local_calc
	npad	3
$LL14@local_calc:
	mov	eax, DWORD PTR _web+348
	mov	esi, ebx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	edx, DWORD PTR [eax+esi]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR tv1099[ebp+4], eax
	mov	eax, ecx
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	je	$LN13@local_calc

; 218  :   { REAL fix,vol;
; 219  : 
; 220  :     fix = get_body_fixvol(b_id);

	cmp	DWORD PTR tv1090[ebp], edi
	je	SHORT $LN119@local_calc
	fld	QWORD PTR [edx+32]
	fst	QWORD PTR _fix$89218[ebp]

; 221  :     vol = get_body_volume(b_id);

	fld	QWORD PTR [edx+40]
	fst	QWORD PTR _vol$89219[ebp]
	fldz
	jmp	SHORT $LN124@local_calc

; 218  :   { REAL fix,vol;
; 219  : 
; 220  :     fix = get_body_fixvol(b_id);

$LN119@local_calc:
	fldz
	fld	ST(0)
	fst	QWORD PTR _fix$89218[ebp]

; 221  :     vol = get_body_volume(b_id);

	fld	ST(1)
	fst	QWORD PTR _vol$89219[ebp]
	fxch	ST(1)
	fxch	ST(2)
$LN124@local_calc:

; 222  :     if ( web.pressure_flag && (get_battr(b_id) & FIXEDVOL) 
; 223  :       && !quantities_only_flag )

	cmp	DWORD PTR _web+868, edi
	je	$LN228@local_calc
	mov	eax, ecx
	and	eax, 32					; 00000020H
	xor	edi, edi
	or	eax, edi
	je	$LN228@local_calc
	cmp	DWORD PTR _quantities_only_flag, edi
	jne	$LN228@local_calc
	fstp	ST(0)

; 224  :     {
; 225  :       if ( !equal_id(b_id,web.outside_body) )

	cmp	ebx, DWORD PTR _web+1504
	je	$LN237@local_calc

; 226  :       { binary_tree_add(web.total_energy_addends,
; 227  :            -web.pressure*(fix*log(vol/fix)-(vol-fix)));

	fdivrp	ST(1), ST(0)
	call	__CIlog
	fld	QWORD PTR _fix$89218[ebp]
	fmul	ST(1), ST(0)
	sub	esp, 8
	fsubr	QWORD PTR _vol$89219[ebp]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR _web+1536
	fchs
	fstp	QWORD PTR [esp]
	push	OFFSET _web+1248
	call	_binary_tree_add
	add	esp, 12					; 0000000cH

; 228  :         if ( valid_id(web.outside_body) )

	test	DWORD PTR _web+1504, 268435456		; 10000000H
	je	SHORT $LN7@local_calc

; 229  :           binary_tree_add(web.total_energy_addends,web.pressure*vol);

	fld	QWORD PTR _web+1536
	sub	esp, 8
	fmul	QWORD PTR _vol$89219[ebp]
	fstp	QWORD PTR [esp]
	push	OFFSET _web+1248
	call	_binary_tree_add
	add	esp, 12					; 0000000cH
$LN7@local_calc:

; 230  :         set_body_pressure(b_id,web.pressure*fix/vol);     

	cmp	DWORD PTR tv1090[ebp], edi
	je	SHORT $LN13@local_calc
	fld	QWORD PTR _web+1536
	mov	ecx, DWORD PTR _web+348
	fmul	QWORD PTR _fix$89218[ebp]
	mov	edx, DWORD PTR [ecx+esi]
	fdiv	QWORD PTR _vol$89219[ebp]
	fstp	QWORD PTR [edx+312]

; 231  :       }

	jmp	SHORT $LN13@local_calc
$LN228@local_calc:

; 232  :     }
; 233  :     else if ( (get_battr(b_id) & PRESSURE) && !quantities_only_flag )

	and	ecx, 2048				; 00000800H
	fstp	ST(2)
	xor	eax, eax
	or	ecx, eax
	je	SHORT $LN237@local_calc
	cmp	DWORD PTR _quantities_only_flag, eax
	jne	SHORT $LN237@local_calc

; 234  :        binary_tree_add(web.total_energy_addends,-get_body_pressure(b_id)*vol);

	cmp	DWORD PTR tv1090[ebp], eax
	je	SHORT $LN243@local_calc
	fstp	ST(1)
	fld	QWORD PTR [edx+312]
	jmp	SHORT $LN132@local_calc
$LN243@local_calc:
	fxch	ST(1)
$LN132@local_calc:
	fmulp	ST(1), ST(0)
	sub	esp, 8
	fchs
	fstp	QWORD PTR [esp]
	push	OFFSET _web+1248
	call	_binary_tree_add
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN13@local_calc
$LN237@local_calc:

; 232  :     }
; 233  :     else if ( (get_battr(b_id) & PRESSURE) && !quantities_only_flag )

	fstp	ST(0)
	fstp	ST(0)
$LN13@local_calc:

; 213  :     }
; 214  :   }
; 215  : 
; 216  : quantities_only:
; 217  :   FOR_ALL_BODIES(b_id)

	mov	eax, DWORD PTR _web+348
	mov	ecx, DWORD PTR [eax+esi]
	mov	ebx, DWORD PTR [ecx]
	mov	eax, ebx
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv1090[ebp], eax
	jne	$LL14@local_calc
$LN12@local_calc:

; 235  :   }
; 236  : 
; 237  :   if ( gen_quant_count )

	cmp	DWORD PTR _web+5528, 0
	pop	edi
	pop	esi
	pop	ebx
	je	SHORT $LN163@local_calc

; 238  :      web.total_energy += calc_quants(Q_ENERGY);

	push	1
	call	_calc_quants
	fadd	QWORD PTR _web+1240
	add	esp, 4

; 239  : 
; 240  :   /* finalize web.total_area */
; 241  :   for ( i = 0 ; i < MAXADDENDS ; i++ )

	mov	eax, OFFSET _web+1248
	fst	QWORD PTR _web+1240
	fld	QWORD PTR _web+992
	jmp	SHORT $LN3@local_calc
$LN163@local_calc:

; 238  :      web.total_energy += calc_quants(Q_ENERGY);

	fld	QWORD PTR _web+1240

; 239  : 
; 240  :   /* finalize web.total_area */
; 241  :   for ( i = 0 ; i < MAXADDENDS ; i++ )

	mov	eax, OFFSET _web+1248
	fld	QWORD PTR _web+992
	jmp	SHORT $LN3@local_calc
$LN249@local_calc:
	fxch	ST(1)
$LN3@local_calc:

; 242  :   { web.total_area += web.total_area_addends[i];

	fadd	QWORD PTR [eax-248]

; 243  :     web.total_energy += web.total_energy_addends[i];

	add	eax, 80					; 00000050H
	fst	QWORD PTR _web+992
	fld	QWORD PTR [eax-80]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _web+1240
	fld	QWORD PTR [eax-320]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _web+992
	fld	QWORD PTR [eax-72]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _web+1240
	fld	QWORD PTR [eax-312]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _web+992
	fld	QWORD PTR [eax-64]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _web+1240
	fld	QWORD PTR [eax-304]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _web+992
	fld	QWORD PTR [eax-56]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _web+1240
	fld	QWORD PTR [eax-296]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _web+992
	fld	QWORD PTR [eax-48]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _web+1240
	fld	QWORD PTR [eax-288]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _web+992
	fld	QWORD PTR [eax-40]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _web+1240
	fld	QWORD PTR [eax-280]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _web+992
	fld	QWORD PTR [eax-32]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _web+1240
	fld	QWORD PTR [eax-272]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _web+992
	fld	QWORD PTR [eax-24]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _web+1240
	fld	QWORD PTR [eax-264]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _web+992
	fld	QWORD PTR [eax-16]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _web+1240
	fld	QWORD PTR [eax-256]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _web+992
	fld	QWORD PTR [eax-8]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _web+1240
	cmp	eax, OFFSET _web+1488
	jl	$LN249@local_calc

; 244  :   }
; 245  : 
; 246  :   extrap_val[reflevel] = web.total_energy;

	mov	edx, DWORD PTR _reflevel
	fstp	ST(1)
	fstp	QWORD PTR _extrap_val[edx*8]

; 247  : 
; 248  : } /* end local_calc_energy() */

	mov	esp, ebp
	pop	ebp
	ret	0
_local_calc_energy ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@CCIFFJLC@Zero?5area?5around?5vertex?5?$CFs?4?6?$AA@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	__real@4018000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@c000000000000000
PUBLIC	__real@4000c152382d7365
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__$ArrayPad$
PUBLIC	_force_normalization
EXTRN	_matvec_mul:PROC
EXTRN	_b_proj:PROC
EXTRN	_V_BOUNDARY_ATTR:DWORD
EXTRN	_errmsg:BYTE
EXTRN	_sprintf:PROC
EXTRN	_elnames:BYTE
EXTRN	_get_edge_side:PROC
EXTRN	_old_area_flag:DWORD
EXTRN	_free_element:PROC
EXTRN	_delete_edge:PROC
EXTRN	_dot:PROC
EXTRN	_effective_area_flag:DWORD
EXTRN	_star_fraction:QWORD
EXTRN	_get_vertex_area_star:PROC
EXTRN	_get_vertex_length_star:PROC
EXTRN	_approx_curve_flag:DWORD
EXTRN	_metric_form_to_vector:PROC
EXTRN	_metric_convert_flag:DWORD
EXTRN	_mat2d_setup:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CIacos:PROC
EXTRN	__CIasin:PROC
EXTRN	__CIsqrt:PROC
;	COMDAT ??_C@_0BN@CCIFFJLC@Zero?5area?5around?5vertex?5?$CFs?4?6?$AA@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0BN@CCIFFJLC@Zero?5area?5around?5vertex?5?$CFs?4?6?$AA@ DB 'Zero ar'
	DB	'ea around vertex %s.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT __real@4018000000000000
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@c000000000000000
CONST	SEGMENT
__real@c000000000000000 DQ 0c000000000000000r	; -2
CONST	ENDS
;	COMDAT __real@4000c152382d7365
CONST	SEGMENT
__real@4000c152382d7365 DQ 04000c152382d7365r	; 2.0944
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\calcforc.c
CONST	ENDS
;	COMDAT _force_normalization
_TEXT	SEGMENT
_aqXvS$ = -644						; size = 24
_valence$89479 = -620					; size = 4
_a$ = -616						; size = 4
_fs$89525 = -612					; size = 8
_f2$89485 = -612					; size = 8
tv1497 = -608						; size = 4
_force$89468 = -608					; size = 4
tv1203 = -604						; size = 8
tv780 = -604						; size = 8
_ss$89524 = -604					; size = 8
_ang12$89505 = -604					; size = 8
_ff$89473 = -604					; size = 8
tv774 = -596						; size = 4
tv771 = -596						; size = 4
_area$89467 = -592					; size = 8
tv773 = -584						; size = 4
_v_id$ = -584						; size = 4
_axJ$ = -580						; size = 288
_leg$89508 = -292					; size = 96
_side$89504 = -196					; size = 144
_tmp$89564 = -52					; size = 48
_side$89526 = -52					; size = 48
_ss$89502 = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_force_normalization PROC				; COMDAT

; 474  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 644				; 00000284H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 475  :   vertex_id v_id;
; 476  :   int i,j;
; 477  :   MAT2D(a,MAXPARAM,MAXCOORD); 

	push	6
	push	6
	lea	eax, DWORD PTR _axJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _aqXvS$[ebp]
	push	ecx
	call	_mat2d_setup
	add	esp, 16					; 00000010H

; 478  : 
; 479  :   if ( web.metric_flag && metric_convert_flag )

	cmp	DWORD PTR _web+1676, 0
	mov	DWORD PTR _a$[ebp], eax
	je	$LN98@force_norm
	cmp	DWORD PTR _metric_convert_flag, 0
	je	$LN98@force_norm

; 480  :   { FOR_ALL_VERTICES(v_id)

	mov	eax, DWORD PTR _web+48
	mov	esi, DWORD PTR _web+12
	test	eax, 268435456				; 10000000H
	je	SHORT $LN58@force_norm
$LL109@force_norm:
	mov	edi, eax
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	ecx, DWORD PTR [edi+esi]
	mov	ecx, DWORD PTR [ecx+8]
	and	ecx, 1
	xor	edx, edx
	or	ecx, edx
	je	SHORT $LN59@force_norm

; 481  :     { if ( !(get_attr(v_id) & FIXED) )

	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	edx, DWORD PTR _web[eax+12]
	mov	eax, DWORD PTR [edx+edi]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 64					; 00000040H
	xor	ecx, ecx
	or	eax, ecx
	jne	SHORT $LN59@force_norm

; 482  :       metric_form_to_vector(get_coord(v_id),get_force(v_id));

	mov	eax, DWORD PTR _web+104
	mov	ecx, DWORD PTR _dymem
	mov	edx, DWORD PTR [eax+ecx+784]
	mov	esi, DWORD PTR [edi+esi]
	mov	eax, DWORD PTR [eax+ecx+64]
	add	edx, esi
	push	edx
	add	eax, esi
	push	eax
	call	_metric_form_to_vector
	mov	esi, DWORD PTR _web+12
	add	esp, 8
$LN59@force_norm:

; 480  :   { FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR [edi+esi]
	mov	eax, DWORD PTR [ecx]
	test	eax, 268435456				; 10000000H
	jne	SHORT $LL109@force_norm
	jmp	SHORT $LN58@force_norm
$LN98@force_norm:
	mov	esi, DWORD PTR _web+12
$LN58@force_norm:

; 483  :     }
; 484  :   }
; 485  : 
; 486  :   /* do area normalization */
; 487  :   if ( web.area_norm_flag && !approx_curve_flag) 

	cmp	DWORD PTR _web+876, 0
	je	$LN102@force_norm
	cmp	DWORD PTR _approx_curve_flag, 0
	jne	$LN102@force_norm

; 488  :   { FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR _web+48
	mov	eax, ecx
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv771[ebp], eax
	je	$LN102@force_norm
	npad	3
$LL104@force_norm:
	mov	ebx, ecx
	and	ebx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+ebx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	mov	DWORD PTR tv773[ebp], ebx
	je	$LN52@force_norm

; 489  :     { REAL area = ((web.representation==STRING)?get_vertex_length_star(v_id):
; 490  :                                  get_vertex_area_star(v_id))/star_fraction;

	cmp	DWORD PTR _web+624, 1
	push	ecx
	jne	SHORT $LN64@force_norm
	call	_get_vertex_length_star
	jmp	SHORT $LN166@force_norm
$LN64@force_norm:
	call	_get_vertex_area_star
$LN166@force_norm:
	fdiv	QWORD PTR _star_fraction

; 491  :       REAL *force = get_force(v_id);

	mov	ecx, DWORD PTR _dymem
	mov	esi, DWORD PTR _web+12
	mov	edx, DWORD PTR _web+104
	mov	eax, DWORD PTR [esi+ebx*4]
	mov	edi, DWORD PTR [edx+ecx+784]
	add	edi, eax

; 492  :       REAL ff;
; 493  : 
; 494  :       if ( get_vattr(v_id) & FIXED ) continue;

	mov	eax, DWORD PTR [eax+8]
	and	eax, 64					; 00000040H
	xor	ecx, ecx
	add	esp, 4
	or	eax, ecx
	mov	DWORD PTR _force$89468[ebp], edi
	fst	QWORD PTR _area$89467[ebp]
	jne	$LN130@force_norm

; 495  :       if ( effective_area_flag && (web.representation == STRING) )

	cmp	DWORD PTR _effective_area_flag, ecx
	je	$LN99@force_norm
	mov	eax, DWORD PTR _web+624
	cmp	eax, 1
	jne	$LN47@force_norm

; 496  :       { /* calculate effective area */
; 497  :         REAL d;
; 498  :         int valence = get_vertex_valence(v_id);
; 499  :         ff = SDIM_dot(force,force);

	mov	ecx, DWORD PTR _web+616
	fstp	ST(0)
	mov	edx, DWORD PTR [esi+ebx*4]
	mov	eax, DWORD PTR [edx+36]
	push	ecx
	push	edi
	push	edi
	mov	DWORD PTR _valence$89479[ebp], eax
	call	_dot

; 500  :         if ( ff == 0.0 ) continue;

	fld	ST(0)
	fldz

; 501  :         d = get_edge_density(get_vertex_edge(v_id));

	mov	esi, DWORD PTR _web+12
	fld	ST(0)
	add	esp, 12					; 0000000cH
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jnp	$LN135@force_norm
	mov	eax, DWORD PTR [esi+ebx*4]
	mov	ebx, DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _web+124
	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	fld	QWORD PTR [edx+40]

; 502  :         ff /= d*d;
; 503  :         if ( valence == 2 )

	mov	ecx, DWORD PTR _valence$89479[ebp]
	fmul	ST(0), ST(0)
	fdivp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _ff$89473[ebp]
	cmp	ecx, 2
	jne	SHORT $LN45@force_norm
	fstp	ST(1)

; 504  :         { REAL f2;
; 505  :           f2 = sqrt(ff)/2;

	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _f2$89485[ebp]

; 506  :           area *= sqrt(1 - ff/4)*f2/asin(f2);

	fld	QWORD PTR _ff$89473[ebp]
	fmul	QWORD PTR __real@3fd0000000000000
	fld1
	fsubrp	ST(1), ST(0)
	call	__CIsqrt
	fld	QWORD PTR _f2$89485[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv1203[ebp]
	call	__CIasin
	fdivr	QWORD PTR tv1203[ebp]
	mov	ebx, DWORD PTR tv773[ebp]
	fmul	QWORD PTR _area$89467[ebp]
	jmp	$LN167@force_norm
$LN45@force_norm:

; 507  :         }
; 508  :         else if ( valence == 1 )

	cmp	ecx, 1
	jne	SHORT $LN141@force_norm

; 509  :         { if ( !(get_vattr(v_id) & (FIXED|CONSTRAINT|BOUNDARY) ) )

	mov	eax, DWORD PTR [eax+8]
	fstp	ST(1)
	and	eax, 1216				; 000004c0H
	xor	ecx, ecx
	or	eax, ecx
	jne	SHORT $LN42@force_norm

; 510  :           { edge_id e_id = get_vertex_edge(v_id);
; 511  :             vertex_id other_v = get_edge_headv(e_id);

	push	ebx
	fstp	ST(0)
	call	_get_edge_headv

; 512  :             delete_edge(e_id);

	push	ebx
	mov	esi, eax
	call	_delete_edge

; 513  :             free_element(e_id);

	push	ebx
	call	_free_element

; 514  :             add_vertex_valence(other_v,-1);

	mov	eax, DWORD PTR _web+12

; 515  :             continue;

	mov	ebx, DWORD PTR tv773[ebp]
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [eax+esi*4]
	add	esp, 12					; 0000000cH
	dec	DWORD PTR [esi+36]
	mov	esi, DWORD PTR _web+12
	jmp	$LN52@force_norm
$LN42@force_norm:

; 516  :           }
; 517  :           area *= sqrt(1 - ff/4);

	fmul	QWORD PTR __real@3fd0000000000000
	fld1
	fsubrp	ST(1), ST(0)
	call	__CIsqrt
	fmul	QWORD PTR _area$89467[ebp]
	mov	ebx, DWORD PTR tv773[ebp]
	jmp	$LN167@force_norm
$LN141@force_norm:

; 507  :         }
; 508  :         else if ( valence == 1 )

	fstp	ST(0)

; 518  :         }
; 519  :         else if ( valence == 0 )

	test	ecx, ecx
	jne	SHORT $LN40@force_norm

; 520  :           area = 1.0;  /* disconnected pt; no force anyway */

	mov	ebx, DWORD PTR tv773[ebp]
	fstp	ST(0)
	fld1
	jmp	$LN17@force_norm
$LN40@force_norm:

; 521  :         else if ( (valence == 3) && !old_area_flag )

	cmp	ecx, 3
	jne	$LN38@force_norm
	cmp	DWORD PTR _old_area_flag, 0
	jne	$LN38@force_norm

; 522  :         { /* for density 1 edges only */
; 523  :           edge_id e_id;
; 524  :           REAL ss[3],f[MAXCOORD],side[3][MAXCOORD];
; 525  :           REAL ang12,ang13,det,leg[2][MAXCOORD];
; 526  :           area = 0.0;
; 527  :           e_id = get_vertex_edge(v_id);

	mov	ecx, DWORD PTR tv773[ebp]
	fstp	ST(0)
	mov	edx, DWORD PTR [esi+ecx*4]
	mov	edi, DWORD PTR [edx+28]

; 528  :           for ( i = 0 ; i < 3 ; i++ )

	xor	ebx, ebx
	lea	esi, DWORD PTR _side$89504[ebp]
$LL37@force_norm:

; 529  :           { get_edge_side(e_id,side[i]);

	push	esi
	push	edi
	call	_get_edge_side

; 530  :             ss[i] = sqrt(SDIM_dot(side[i],side[i]));

	mov	eax, DWORD PTR _web+616
	push	eax
	push	esi
	push	esi
	call	_dot
	add	esp, 20					; 00000014H
	call	__CIsqrt
	fstp	QWORD PTR _ss$89502[ebp+ebx*8]

; 531  :             e_id = get_next_tail_edge(e_id);

	push	edi
	call	_get_next_tail_edge
	inc	ebx
	add	esp, 4
	add	esi, 48					; 00000030H
	mov	edi, eax
	cmp	ebx, 3
	jl	SHORT $LL37@force_norm

; 532  :           }
; 533  :           ang12 = acos(SDIM_dot(side[0],side[1])/ss[0]/ss[1]) - 2*M_PI/3;

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _side$89504[ebp+48]
	push	edx
	lea	eax, DWORD PTR _side$89504[ebp]
	push	eax
	call	_dot
	fdiv	QWORD PTR _ss$89502[ebp]
	add	esp, 12					; 0000000cH
	fdiv	QWORD PTR _ss$89502[ebp+8]
	call	__CIacos
	fsub	QWORD PTR __real@4000c152382d7365

; 534  :           ang13 = acos(SDIM_dot(side[0],side[2])/ss[0]/ss[2]) - 2*M_PI/3;

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _side$89504[ebp+96]
	fstp	QWORD PTR _ang12$89505[ebp]
	push	edx
	lea	eax, DWORD PTR _side$89504[ebp]
	push	eax
	call	_dot
	fdiv	QWORD PTR _ss$89502[ebp]
	add	esp, 12					; 0000000cH
	fdiv	QWORD PTR _ss$89502[ebp+16]
	call	__CIacos
	fsub	QWORD PTR __real@4000c152382d7365

; 535  :           for ( j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR _web+616
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN32@force_norm
$LN34@force_norm:

; 536  :           { leg[0][j] = side[1][j] - side[0][j];

	fld	QWORD PTR _side$89504[ebp+eax*8+48]
	inc	eax
	fsub	QWORD PTR _side$89504[ebp+eax*8-8]
	fstp	QWORD PTR _leg$89508[ebp+eax*8-8]

; 537  :             leg[1][j] = side[0][j] - side[2][j];

	fld	QWORD PTR _side$89504[ebp+eax*8-8]
	fsub	QWORD PTR _side$89504[ebp+eax*8+88]
	fstp	QWORD PTR _leg$89508[ebp+eax*8+40]
	cmp	eax, ecx
	jl	SHORT $LN34@force_norm
$LN32@force_norm:

; 538  :           } 
; 539  :           det = fabs(leg[0][0]*leg[1][1] - leg[0][1]*leg[1][0]);

	fld	QWORD PTR _leg$89508[ebp+56]
	fld	ST(0)
	fld	QWORD PTR _leg$89508[ebp]
	fmul	ST(1), ST(0)
	fld	QWORD PTR _leg$89508[ebp+48]
	fld	ST(0)
	fld	QWORD PTR _leg$89508[ebp+8]
	fmul	ST(1), ST(0)
	fxch	ST(4)
	fsubrp	ST(1), ST(0)
	fabs

; 540  :           if ( det != 0.0 )

	fld	ST(0)
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN157@force_norm

; 541  :           { f[0] = (leg[1][0]*ang12 - leg[0][0]*ang13)/det;

	fld	QWORD PTR _ang12$89505[ebp]
	fmul	ST(2), ST(0)
	fxch	ST(3)
	fmul	ST(0), ST(6)
	fsubp	ST(2), ST(0)
	fdiv	ST(1), ST(0)

; 542  :             f[1] = (leg[1][1]*ang12 - leg[0][1]*ang13)/det;

	fxch	ST(4)
	fmulp	ST(2), ST(0)
	fxch	ST(2)
	fmulp	ST(4), ST(0)
	fsubrp	ST(3), ST(0)
	fxch	ST(2)
	fdivrp	ST(1), ST(0)

; 543  :             area = -0.5*(f[0]*force[0]+f[1]*force[1])/ (f[0]*f[0]+f[1]*f[1]);

	jmp	SHORT $LN30@force_norm
$LN157@force_norm:

; 540  :           if ( det != 0.0 )

	fstp	ST(0)
	fstp	ST(4)
	fstp	ST(3)
	fstp	ST(2)
	fstp	ST(0)
	fstp	ST(0)

; 544  :           } 
; 545  :           else area = f[0] = f[1] = 0.0;

	fldz
	fld	ST(0)
$LN30@force_norm:

; 546  :           for ( i = 0 ; i < 2 ; i++ )
; 547  :             force[i] = -2*f[i];

	fld	QWORD PTR __real@c000000000000000
	mov	eax, DWORD PTR _force$89468[ebp]

; 548  :           continue;

	mov	ebx, DWORD PTR tv773[ebp]
	fmul	ST(2), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR [eax]
	fmulp	ST(1), ST(0)
	fstp	QWORD PTR [eax+8]
	mov	esi, DWORD PTR _web+12
	jmp	$LN52@force_norm
$LN38@force_norm:

; 549  :         }
; 550  :         else /* triple point at least */
; 551  :         { edge_id e_id,start_e;
; 552  :           REAL ss,fs,side[MAXCOORD];
; 553  :           area = 0.0;
; 554  :           e_id = start_e = get_vertex_edge(v_id);

	mov	ecx, DWORD PTR tv773[ebp]
	fstp	QWORD PTR _area$89467[ebp]
	mov	edx, DWORD PTR [esi+ecx*4]
	mov	ebx, DWORD PTR [edx+28]
	mov	esi, ebx
	jmp	SHORT $LN25@force_norm
$LL161@force_norm:
	fstp	ST(0)
$LN25@force_norm:

; 555  :           do
; 556  :           { get_edge_side(e_id,side);

	lea	eax, DWORD PTR _side$89526[ebp]
	push	eax
	push	esi
	call	_get_edge_side

; 557  :             ss = SDIM_dot(side,side);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _side$89526[ebp]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	fstp	QWORD PTR _ss$89524[ebp]

; 558  :             fs = SDIM_dot(force,side);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _side$89526[ebp]
	push	edx
	push	edi
	call	_dot
	fstp	QWORD PTR _fs$89525[ebp]

; 559  :             ff = SDIM_dot(force,force);

	mov	eax, DWORD PTR _web+616
	push	eax
	push	edi
	push	edi
	call	_dot

; 560  :             area += 0.5*sqrt(ff*ss - fs*fs);

	fmul	QWORD PTR _ss$89524[ebp]
	fld	QWORD PTR _fs$89525[ebp]
	add	esp, 44					; 0000002cH
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000

; 561  :             e_id = get_next_tail_edge(e_id);

	mov	edx, DWORD PTR _web+124
	mov	ecx, esi
	fadd	QWORD PTR _area$89467[ebp]
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+esi*4]
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	fst	QWORD PTR _area$89467[ebp]
	mov	esi, DWORD PTR [eax+ecx*4+32]

; 562  :           }
; 563  :           while ( !equal_id(e_id,start_e) );

	cmp	esi, ebx
	jne	$LL161@force_norm

; 564  :         }

	mov	esi, DWORD PTR _web+12
	mov	ebx, DWORD PTR tv773[ebp]
	jmp	SHORT $LN99@force_norm
$LN47@force_norm:

; 565  :       }
; 566  :       else if ( effective_area_flag && (web.representation == SOAPFILM) )

	cmp	eax, 2
	jne	SHORT $LN99@force_norm

; 567  :       { /* crude correction for triple edges and tetra points */
; 568  :         if ( get_vattr(v_id) & TRIPLE_PT )

	mov	eax, DWORD PTR [esi+ebx*4]
	mov	edx, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, ecx
	mov	DWORD PTR tv780[ebp+4], edx
	and	eax, 524288				; 00080000H
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN20@force_norm
	fstp	ST(0)

; 569  :            area /= sqrt(3.);

	fld	QWORD PTR __real@4008000000000000
	jmp	SHORT $LN168@force_norm
$LN20@force_norm:

; 570  :         else if ( get_vattr(v_id) & TETRA_PT )

	and	ecx, 262144				; 00040000H
	xor	eax, eax
	or	ecx, eax
	je	SHORT $LN99@force_norm
	fstp	ST(0)

; 571  :            area /= sqrt(6.);

	fld	QWORD PTR __real@4018000000000000
$LN168@force_norm:
	call	__CIsqrt
	fdivr	QWORD PTR _area$89467[ebp]
$LN167@force_norm:
	fst	QWORD PTR _area$89467[ebp]
$LN99@force_norm:

; 572  :       }
; 573  :       if ( area == 0.0 )  

	fld	ST(0)
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN17@force_norm

; 574  :       { sprintf(errmsg,"Zero area around vertex %s.\n",ELNAME(v_id));

	cmp	DWORD PTR tv771[ebp], 0
	fstp	ST(0)
	je	SHORT $LN66@force_norm
	lea	eax, DWORD PTR [ebx+1]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN67@force_norm
$LN66@force_norm:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN67@force_norm:
	push	eax
	push	OFFSET ??_C@_0BN@CCIFFJLC@Zero?5area?5around?5vertex?5?$CFs?4?6?$AA@
	push	OFFSET _errmsg
	call	_sprintf

; 575  :         kb_error(1453,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	1453					; 000005adH
	call	_kb_error
	fld	QWORD PTR _area$89467[ebp]
	mov	esi, DWORD PTR _web+12
	add	esp, 24					; 00000018H
$LN17@force_norm:

; 576  :       }
; 577  :       for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN130@force_norm
$LN16@force_norm:

; 578  :         force[i] /= area;

	fld	QWORD PTR [edi+eax*8]
	inc	eax
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [edi+eax*8-8]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN16@force_norm

; 576  :       }
; 577  :       for ( i = 0 ; i < SDIM ; i++ )

	mov	esi, DWORD PTR _web+12
	jmp	SHORT $LN130@force_norm
$LN135@force_norm:

; 500  :         if ( ff == 0.0 ) continue;

	fstp	ST(1)
$LN130@force_norm:

; 548  :           continue;

	fstp	ST(0)
$LN52@force_norm:

; 488  :   { FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR [esi+ebx*4]
	mov	ecx, DWORD PTR [ecx]
	mov	eax, ecx
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv771[ebp], eax
	jne	$LL104@force_norm
$LN102@force_norm:

; 579  :     }
; 580  :   } /* end web.area_norm_flag && !approx_curve_flag */ 
; 581  : 
; 582  :   /* project to parameter space for boundary points */
; 583  :   FOR_ALL_VERTICES(v_id)

	mov	edx, DWORD PTR _web+48
	mov	DWORD PTR _v_id$[ebp], edx
	test	edx, 268435456				; 10000000H
	je	$LN11@force_norm
	npad	9
$LL13@force_norm:
	and	edx, 134217727				; 07ffffffH
	add	edx, edx
	add	edx, edx
	mov	eax, DWORD PTR [edx+esi]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	ecx, ecx
	or	eax, ecx
	mov	DWORD PTR tv774[ebp], edx
	je	$LN12@force_norm

; 584  :   { int pcount;
; 585  :     REAL *f = get_force(v_id);

	mov	ecx, DWORD PTR _web+104
	mov	edi, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+esi]
	mov	edi, DWORD PTR [ecx+edi+784]
	add	edi, eax

; 586  :     REAL tmp[MAXCOORD];
; 587  :     struct boundary *bdry;
; 588  :     int m;
; 589  : 
; 590  :     if ( get_vattr(v_id) & FIXED ) continue;

	mov	eax, DWORD PTR [eax+8]
	and	eax, 64					; 00000040H
	xor	ecx, ecx
	or	eax, ecx
	jne	$LN12@force_norm

; 591  :     if ( !(get_vattr(v_id) & BOUNDARY) ) continue;

	mov	ecx, DWORD PTR [edx+esi]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 128				; 00000080H
	xor	ebx, ebx
	or	eax, ebx
	je	$LN12@force_norm

; 592  :     bdry = get_boundary(v_id);

	mov	eax, DWORD PTR _V_BOUNDARY_ATTR
	test	eax, eax
	je	SHORT $LN68@force_norm
	mov	edx, DWORD PTR _dymem
	imul	eax, 240				; 000000f0H
	add	eax, DWORD PTR _web+104
	mov	eax, DWORD PTR [eax+edx+64]
	mov	eax, DWORD PTR [eax+ecx]
	imul	eax, 136				; 00000088H
	add	eax, DWORD PTR _web+776
	jmp	SHORT $LN69@force_norm
$LN68@force_norm:
	xor	eax, eax
$LN69@force_norm:

; 593  :     pcount = bdry->pcount;
; 594  :     b_proj(bdry,get_param(v_id),a,PARAMPROJ,v_id);

	mov	edx, DWORD PTR _v_id$[ebp]
	mov	ebx, DWORD PTR _dymem
	mov	esi, DWORD PTR [eax+40]
	push	edx
	mov	edx, DWORD PTR _a$[ebp]
	push	1
	push	edx
	mov	edx, DWORD PTR _web+104
	mov	edx, DWORD PTR [edx+ebx+544]
	add	edx, ecx
	push	edx
	push	eax
	call	_b_proj

; 595  :     matvec_mul(a,f,tmp,pcount,SDIM);

	mov	eax, DWORD PTR _web+616
	mov	edx, DWORD PTR _a$[ebp]
	push	eax
	push	esi
	lea	ecx, DWORD PTR _tmp$89564[ebp]
	push	ecx
	push	edi
	push	edx
	call	_matvec_mul
	add	esp, 40					; 00000028H

; 596  :     for ( m = 0 ; m < pcount ; m++ ) f[m] = tmp[m];

	xor	ecx, ecx
	cmp	esi, 4
	jl	SHORT $LC95@force_norm
	mov	edx, edi
	neg	edx
	lea	ebx, DWORD PTR _tmp$89564[ebp+edx]
	lea	edx, DWORD PTR _tmp$89564[ebp+edx+8]
	lea	eax, DWORD PTR [edi+16]
	mov	DWORD PTR tv1497[ebp], edx
	npad	8
$LL108@force_norm:
	fld	QWORD PTR _tmp$89564[ebp+ecx*8]
	mov	edx, DWORD PTR tv1497[ebp]
	fstp	QWORD PTR [eax-16]
	add	ecx, 4
	fld	QWORD PTR _tmp$89564[ebp+ecx*8-24]
	add	eax, 32					; 00000020H
	fstp	QWORD PTR [eax-40]
	fld	QWORD PTR [ebx+eax-32]
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [edx+eax-32]
	lea	edx, DWORD PTR [esi-3]
	fstp	QWORD PTR [eax-24]
	cmp	ecx, edx
	jl	SHORT $LL108@force_norm
$LC95@force_norm:
	cmp	ecx, esi
	jge	SHORT $LN106@force_norm
	lea	ebx, DWORD PTR _tmp$89564[ebp]
	mov	edx, esi
	sub	ebx, edi
	lea	eax, DWORD PTR [edi+ecx*8]
	sub	edx, ecx
	npad	1
$LC6@force_norm:
	fld	QWORD PTR [ebx+eax]
	add	eax, 8
	dec	edx
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC6@force_norm
$LN106@force_norm:

; 597  :     for ( m = pcount ; m < SDIM ; m++ ) f[m] = 0.0;

	cmp	esi, DWORD PTR _web+616
	jge	SHORT $LN103@force_norm
	fldz
$LN3@force_norm:
	fst	QWORD PTR [edi+esi*8]
	inc	esi
	cmp	esi, DWORD PTR _web+616
	jl	SHORT $LN3@force_norm
	fstp	ST(0)
$LN103@force_norm:
	mov	edx, DWORD PTR tv774[ebp]
	mov	esi, DWORD PTR _web+12
$LN12@force_norm:

; 579  :     }
; 580  :   } /* end web.area_norm_flag && !approx_curve_flag */ 
; 581  : 
; 582  :   /* project to parameter space for boundary points */
; 583  :   FOR_ALL_VERTICES(v_id)

	mov	eax, DWORD PTR [edx+esi]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _v_id$[ebp], edx
	test	edx, 268435456				; 10000000H
	jne	$LL13@force_norm
$LN11@force_norm:

; 598  :   }
; 599  : 
; 600  :   return;
; 601  : } /* end force_normalization() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_force_normalization ENDP
_TEXT	ENDS
PUBLIC	_local_calc_content
EXTRN	_add_body_volume_plain:PROC
EXTRN	_calc_constr_content_e:PROC
EXTRN	_calc_facet_volume:DWORD
EXTRN	_torvol:PROC
EXTRN	_calc_constr_content_v:PROC
EXTRN	_calc_edge_area:DWORD
EXTRN	_calc_simplex_volume:PROC
; Function compile flags: /Ogtp
;	COMDAT _local_calc_content
_TEXT	SEGMENT
_attr$89802 = -8					; size = 8
_attr$89769 = -8					; size = 8
_mode$ = 8						; size = 4
_local_calc_content PROC				; COMDAT

; 755  : {

	push	ebp
	mov	ebp, esp

; 756  :   facet_id  f_id;
; 757  :   facetedge_id fe_id;
; 758  :   body_id b_id;
; 759  : 
; 760  :   FOR_ALL_BODIES(b_id)

	mov	eax, DWORD PTR _web+384
	sub	esp, 8
	push	esi
	push	edi
	test	eax, 268435456				; 10000000H
	je	SHORT $LN81@local_calc@2
$LL59@local_calc@2:
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	lea	edx, DWORD PTR [eax+eax]
	mov	eax, DWORD PTR _web+348
	mov	ecx, DWORD PTR [edx+eax]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 1
	xor	esi, esi
	or	eax, esi
	je	SHORT $LN58@local_calc@2

; 761  :   { /* initialize binary tree add */
; 762  :     struct body *ptr;
; 763  : 	int k;
; 764  : 
; 765  : 	ptr = bptr(b_id);

	lea	edi, DWORD PTR [ecx+48]

; 766  :     for ( k = 0 ; k < MAXADDENDS ; k++ )
; 767  :        ptr->volume_addends[k] = 0;

	mov	ecx, 60					; 0000003cH
	xor	eax, eax
	rep stosd
$LN58@local_calc@2:

; 756  :   facet_id  f_id;
; 757  :   facetedge_id fe_id;
; 758  :   body_id b_id;
; 759  : 
; 760  :   FOR_ALL_BODIES(b_id)

	mov	ecx, DWORD PTR _web+348
	mov	edx, DWORD PTR [edx+ecx]
	mov	eax, DWORD PTR [edx]
	test	eax, 268435456				; 10000000H
	jne	SHORT $LL59@local_calc@2
$LN81@local_calc@2:

; 768  :   }
; 769  : 
; 770  :   if ( gen_quant_count )

	cmp	DWORD PTR _web+5528, 0
	je	SHORT $LN51@local_calc@2

; 771  :      calc_quants(mode);

	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	call	_calc_quants
	fstp	ST(0)
	add	esp, 4
$LN51@local_calc@2:

; 772  : 
; 773  :   if ( quantities_only_flag ) return;

	cmp	DWORD PTR _quantities_only_flag, 0
	jne	$LN6@local_calc@2

; 774  :   if ( web.bodycount == 0 ) return;

	cmp	DWORD PTR _web+1500, 0
	je	$LN6@local_calc@2

; 775  : 
; 776  :   if ( web.representation == SIMPLEX )

	mov	eax, DWORD PTR _web+624
	cmp	eax, 3
	jne	SHORT $LN48@local_calc@2

; 777  :   { FOR_ALL_FACETS(f_id)

	mov	ecx, DWORD PTR _web+272
	test	ecx, 268435456				; 10000000H
	je	$LN83@local_calc@2
	mov	edi, DWORD PTR _web+236
$LL47@local_calc@2:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+edi]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN46@local_calc@2

; 778  :       calc_simplex_volume(f_id);

	push	ecx
	call	_calc_simplex_volume
	mov	edi, DWORD PTR _web+236
	add	esp, 4
$LN46@local_calc@2:

; 777  :   { FOR_ALL_FACETS(f_id)

	mov	ecx, DWORD PTR [esi+edi]
	mov	ecx, DWORD PTR [ecx]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LL47@local_calc@2

; 779  :   }
; 780  :   else if ( web.representation == STRING ) 

	jmp	$LN83@local_calc@2
$LN48@local_calc@2:
	push	ebx
	cmp	eax, 1
	jne	$LN41@local_calc@2

; 781  :   { vertex_id v_id;
; 782  : 
; 783  :     FOR_ALL_FACETEDGES(fe_id)

	mov	ecx, DWORD PTR _web+496
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN38@local_calc@2
	mov	edi, DWORD PTR _web+460
	npad	3
$LL40@local_calc@2:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+edi]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN39@local_calc@2

; 784  :       (*calc_edge_area)(fe_id);

	push	ecx
	call	DWORD PTR _calc_edge_area
	mov	edi, DWORD PTR _web+460
	add	esp, 4
$LN39@local_calc@2:

; 781  :   { vertex_id v_id;
; 782  : 
; 783  :     FOR_ALL_FACETEDGES(fe_id)

	mov	edx, DWORD PTR [esi+edi]
	mov	ecx, DWORD PTR [edx]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LL40@local_calc@2
$LN38@local_calc@2:

; 785  : 
; 786  :     FOR_ALL_VERTICES(v_id)

	mov	ebx, DWORD PTR _web+48
	test	ebx, 268435456				; 10000000H
	je	$LN85@local_calc@2
	npad	6
$LL35@local_calc@2:
	mov	eax, DWORD PTR _web+12
	mov	esi, ebx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+eax]
	mov	ecx, DWORD PTR [eax+8]
	mov	edi, DWORD PTR [eax+12]
	mov	eax, ecx
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN34@local_calc@2

; 787  :     { ATTR attr = get_vattr(v_id);
; 788  :       if ( !(attr & BDRY_CONTENT) ) continue;

	mov	eax, ecx
	and	eax, 4096				; 00001000H
	or	eax, edx
	mov	DWORD PTR _attr$89769[ebp+4], edi
	je	SHORT $LN34@local_calc@2

; 789  :       if ( attr & CONSTRAINT )

	and	ecx, 1024				; 00000400H
	xor	eax, eax
	or	ecx, eax
	je	SHORT $LN34@local_calc@2

; 790  :          calc_constr_content_v(v_id);

	push	ebx
	call	_calc_constr_content_v
	add	esp, 4
$LN34@local_calc@2:

; 785  : 
; 786  :     FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR _web+12
	mov	edx, DWORD PTR [esi+ecx]
	mov	ebx, DWORD PTR [edx]
	test	ebx, 268435456				; 10000000H
	jne	SHORT $LL35@local_calc@2

; 791  :     }
; 792  :   }
; 793  : 
; 794  :   else if ( web.representation == SOAPFILM ) 

	jmp	$LN85@local_calc@2
$LN41@local_calc@2:
	cmp	eax, 2
	jne	$LN85@local_calc@2

; 795  :   { if ( web.torus_flag ) torvol();

	cmp	DWORD PTR _web+860, 0
	je	SHORT $LN26@local_calc@2
	call	_torvol

; 796  :     else

	jmp	$LN85@local_calc@2
$LN26@local_calc@2:

; 797  :     { edge_id e_id;
; 798  : 
; 799  :       if ( threadflag )

	cmp	DWORD PTR _threadflag, 0
	je	SHORT $LN24@local_calc@2

; 800  :         thread_launch(TH_CALC_FACET_VOLUME,FACET);

	push	2
	push	10					; 0000000aH
	call	_thread_launch
	add	esp, 8

; 801  :       else

	jmp	SHORT $LN20@local_calc@2
$LN24@local_calc@2:

; 802  :       FOR_ALL_FACETS(f_id)

	mov	ecx, DWORD PTR _web+272
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN82@local_calc@2
	mov	edi, DWORD PTR _web+236
	npad	9
$LL22@local_calc@2:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+edi]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN21@local_calc@2

; 803  :         (*calc_facet_volume)(f_id);

	push	ecx
	call	DWORD PTR _calc_facet_volume
	mov	edi, DWORD PTR _web+236
	add	esp, 4
$LN21@local_calc@2:

; 802  :       FOR_ALL_FACETS(f_id)

	mov	eax, DWORD PTR [esi+edi]
	mov	ecx, DWORD PTR [eax]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LL22@local_calc@2
$LN20@local_calc@2:

; 804  : 
; 805  :       if ( threadflag )

	cmp	DWORD PTR _threadflag, 0
	je	SHORT $LN82@local_calc@2

; 806  :         thread_launch(TH_CALC_EDGE_CON_VOLUME,EDGE);

	push	1
	push	11					; 0000000bH
	call	_thread_launch
	add	esp, 8

; 807  :       else

	jmp	SHORT $LN85@local_calc@2
$LN82@local_calc@2:

; 808  :       FOR_ALL_EDGES(e_id)

	mov	ebx, DWORD PTR _web+160
	test	ebx, 268435456				; 10000000H
	je	SHORT $LN85@local_calc@2
	npad	3
$LL15@local_calc@2:
	mov	ecx, DWORD PTR _web+124
	mov	esi, ebx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+ecx]
	mov	ecx, DWORD PTR [eax+8]
	mov	edi, DWORD PTR [eax+12]
	mov	eax, ecx
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN14@local_calc@2

; 809  :       { ATTR attr = get_eattr(e_id);
; 810  :         if ( !(attr & BDRY_CONTENT) ) continue;

	mov	eax, ecx
	and	eax, 4096				; 00001000H
	or	eax, edx
	mov	DWORD PTR _attr$89802[ebp+4], edi
	je	SHORT $LN14@local_calc@2

; 811  :         if ( attr & CONSTRAINT )

	and	ecx, 1024				; 00000400H
	xor	eax, eax
	or	ecx, eax
	je	SHORT $LN14@local_calc@2

; 812  :           calc_constr_content_e(e_id);

	push	ebx
	call	_calc_constr_content_e
	add	esp, 4
$LN14@local_calc@2:

; 808  :       FOR_ALL_EDGES(e_id)

	mov	edx, DWORD PTR _web+124
	mov	eax, DWORD PTR [esi+edx]
	mov	ebx, DWORD PTR [eax]
	test	ebx, 268435456				; 10000000H
	jne	SHORT $LL15@local_calc@2
$LN85@local_calc@2:
	pop	ebx
$LN83@local_calc@2:

; 813  :       }
; 814  :     }
; 815  :   }
; 816  : 
; 817  :   /* finish binary tree accumulation */
; 818  :   FOR_ALL_BODIES(b_id)

	mov	edi, DWORD PTR _web+384
	test	edi, 268435456				; 10000000H
	je	SHORT $LN6@local_calc@2
	mov	eax, DWORD PTR _web+348
$LL8@local_calc@2:
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	ecx, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN7@local_calc@2

; 819  :   { REAL sum = 0.0; 

	fldz
	lea	eax, DWORD PTR [ecx+56]
	lea	ecx, DWORD PTR [edx+3]
$LN3@local_calc@2:

; 820  :     struct body *ptr = bptr(b_id);
; 821  : 	int k;
; 822  :     for ( k = 0 ; k < MAXADDENDS ; k++ )
; 823  :       sum += ptr->volume_addends[k];

	fadd	QWORD PTR [eax-8]
	add	eax, 80					; 00000050H
	dec	ecx
	fadd	QWORD PTR [eax-80]
	fadd	QWORD PTR [eax-72]
	fadd	QWORD PTR [eax-64]
	fadd	QWORD PTR [eax-56]
	fadd	QWORD PTR [eax-48]
	fadd	QWORD PTR [eax-40]
	fadd	QWORD PTR [eax-32]
	fadd	QWORD PTR [eax-24]
	fadd	QWORD PTR [eax-16]
	jne	SHORT $LN3@local_calc@2

; 824  :     add_body_volume_plain(b_id,sum);

	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	edi
	call	_add_body_volume_plain
	add	esp, 12					; 0000000cH
$LN7@local_calc@2:

; 813  :       }
; 814  :     }
; 815  :   }
; 816  : 
; 817  :   /* finish binary tree accumulation */
; 818  :   FOR_ALL_BODIES(b_id)

	mov	eax, DWORD PTR _web+348
	mov	ecx, DWORD PTR [esi+eax]
	mov	edi, DWORD PTR [ecx]
	test	edi, 268435456				; 10000000H
	jne	SHORT $LL8@local_calc@2
$LN6@local_calc@2:
	pop	edi
	pop	esi

; 825  :   }
; 826  : 
; 827  : } /* end local_calc_content() */

	mov	esp, ebp
	pop	ebp
	ret	0
_local_calc_content ENDP
_TEXT	ENDS
PUBLIC	_thread_calc_facet_volume
; Function compile flags: /Ogtp
;	COMDAT _thread_calc_facet_volume
_TEXT	SEGMENT
tv205 = -12						; size = 4
tv138 = -8						; size = 4
_maxstage$89830 = -4					; size = 4
_thread_calc_facet_volume PROC				; COMDAT

; 837  : {

	push	ebp
	mov	ebp, esp

; 838  : 
; 839  : #ifdef OLDTHNEXT
; 840  :   facet_id f_id;
; 841  :   THREAD_FOR_ALL_FACETS(f_id)
; 842  :   {
; 843  :      (*calc_facet_volume)(*idptr);
; 844  :   }
; 845  : #else
; 846  :   THREAD_FOR_ALL_NEW(FACET,(*calc_facet_volume)(*idptr))

	mov	eax, DWORD PTR _thread_data_key
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi
	push	eax
	call	_win_get_thread_data
	mov	ecx, DWORD PTR _nprocs
	mov	edi, eax
	mov	esi, DWORD PTR [edi]
	dec	ecx
	add	esp, 4
	cmp	esi, ecx
	jne	SHORT $LN11@thread_cal@3
	xor	eax, eax
	jmp	SHORT $LN12@thread_cal@3
$LN11@thread_cal@3:
	lea	eax, DWORD PTR [esi+1]
$LN12@thread_cal@3:
	test	esi, esi
	jne	SHORT $LN13@thread_cal@3
	mov	edx, DWORD PTR _max_thread_stages
	inc	edx
	mov	DWORD PTR _maxstage$89830[ebp], edx
	jmp	SHORT $LN14@thread_cal@3
$LN13@thread_cal@3:
	mov	ecx, DWORD PTR _max_thread_stages
	mov	DWORD PTR _maxstage$89830[ebp], ecx
$LN14@thread_cal@3:
	imul	esi, 548				; 00000224H
	add	esi, DWORD PTR _thread_stages
	mov	DWORD PTR [esi+540], 0
	mov	edx, DWORD PTR [esi+540]
	cmp	edx, DWORD PTR _maxstage$89830[ebp]
	jge	$LN6@thread_cal@3
	imul	eax, 548				; 00000224H
	add	eax, 540				; 0000021cH
	mov	DWORD PTR tv205[ebp], eax
	push	ebx
	npad	7
$LL5@thread_cal@3:
	mov	eax, DWORD PTR _thread_stages
	mov	ecx, DWORD PTR tv205[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR [esi+540]
	cmp	edx, eax
	jl	SHORT $LL5@thread_cal@3
	mov	ecx, DWORD PTR [esi+540]
	rdtsc
	mov	DWORD PTR [edi+ecx*8+1808], eax
	mov	DWORD PTR [edi+ecx*8+1812], edx
	mov	ecx, DWORD PTR [esi+540]
	mov	edx, DWORD PTR [esi+540]
	mov	eax, DWORD PTR [esi+edx*4+252]
	mov	ebx, DWORD PTR [esi+ecx*4+72]
	test	eax, eax
	jle	SHORT $LN1@thread_cal@3
	mov	DWORD PTR tv138[ebp], eax
	npad	7
$LL3@thread_cal@3:
	mov	eax, DWORD PTR [ebx]
	push	eax
	call	DWORD PTR _calc_facet_volume
	add	esp, 4
	add	ebx, 4
	dec	DWORD PTR tv138[ebp]
	jne	SHORT $LL3@thread_cal@3
$LN1@thread_cal@3:
	mov	ecx, DWORD PTR [esi+540]
	rdtsc
	mov	DWORD PTR [edi+ecx*8+1880], eax
	mov	DWORD PTR [edi+ecx*8+1884], edx
	inc	DWORD PTR [esi+540]
	mov	ecx, DWORD PTR [esi+540]
	cmp	ecx, DWORD PTR _maxstage$89830[ebp]
	jl	$LL5@thread_cal@3
	pop	ebx
$LN6@thread_cal@3:
	pop	edi
	pop	esi

; 847  : #endif
; 848  : } // end thread_calc_facet_volume()

	mov	esp, ebp
	pop	ebp
	ret	0
_thread_calc_facet_volume ENDP
_TEXT	ENDS
PUBLIC	_thread_calc_edge_con_volume
; Function compile flags: /Ogtp
;	COMDAT _thread_calc_edge_con_volume
_TEXT	SEGMENT
_attr$89862 = -24					; size = 8
_data$89848 = -16					; size = 4
tv205 = -12						; size = 4
tv148 = -8						; size = 4
_maxstage$89849 = -4					; size = 4
_thread_calc_edge_con_volume PROC			; COMDAT

; 859  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 860  : 
; 861  : #ifdef OLDTHNEXT
; 862  :   edge_id e_id;
; 863  :   THREAD_FOR_ALL_EDGES(e_id)
; 864  :   {
; 865  :       { ATTR attr = get_eattr(e_id);
; 866  :         if ( !(attr & BDRY_CONTENT) ) continue;
; 867  :         if ( attr & CONSTRAINT )
; 868  :           calc_constr_content_e(e_id);
; 869  :       }
; 870  :   }
; 871  : #else
; 872  :   THREAD_FOR_ALL_NEW(EDGE,
; 873  :       { ATTR attr = get_eattr(*idptr);
; 874  :         if ( !(attr & BDRY_CONTENT) ) continue;
; 875  :         if ( attr & CONSTRAINT )
; 876  :           calc_constr_content_e(*idptr);
; 877  :       }
; 878  :   )

	mov	eax, DWORD PTR _thread_data_key
	push	esi
	push	eax
	call	_win_get_thread_data
	mov	edx, DWORD PTR _nprocs
	mov	ecx, eax
	mov	esi, DWORD PTR [ecx]
	dec	edx
	add	esp, 4
	mov	DWORD PTR _data$89848[ebp], ecx
	cmp	esi, edx
	jne	SHORT $LN13@thread_cal@4
	xor	eax, eax
	jmp	SHORT $LN14@thread_cal@4
$LN13@thread_cal@4:
	lea	eax, DWORD PTR [esi+1]
$LN14@thread_cal@4:
	mov	edx, DWORD PTR _max_thread_stages
	test	esi, esi
	jne	SHORT $LN15@thread_cal@4
	inc	edx
$LN15@thread_cal@4:
	imul	esi, 548				; 00000224H
	add	esi, DWORD PTR _thread_stages
	mov	DWORD PTR _maxstage$89849[ebp], edx
	mov	DWORD PTR [esi+540], 0
	mov	edx, DWORD PTR [esi+540]
	cmp	edx, DWORD PTR _maxstage$89849[ebp]
	jge	$LN8@thread_cal@4
	imul	eax, 548				; 00000224H
	add	eax, 540				; 0000021cH
	push	ebx
	mov	DWORD PTR tv205[ebp], eax
	push	edi
$LL7@thread_cal@4:
	mov	edx, DWORD PTR tv205[ebp]
	mov	eax, DWORD PTR _thread_stages
	mov	eax, DWORD PTR [edx+eax]
	mov	edx, DWORD PTR [esi+540]
	cmp	eax, edx
	jl	SHORT $LL7@thread_cal@4
	mov	edi, DWORD PTR [esi+540]
	rdtsc
	mov	DWORD PTR [ecx+edi*8+1808], eax
	mov	DWORD PTR [ecx+edi*8+1812], edx
	mov	eax, DWORD PTR [esi+540]
	mov	edx, DWORD PTR [esi+540]
	mov	ebx, DWORD PTR [esi+eax*4+36]
	mov	eax, DWORD PTR [esi+edx*4+216]
	test	eax, eax
	jle	SHORT $LN3@thread_cal@4
	mov	DWORD PTR tv148[ebp], eax
	npad	6
$LL5@thread_cal@4:
	mov	edi, DWORD PTR [ebx]
	mov	ecx, DWORD PTR _web+124
	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, ecx
	mov	DWORD PTR _attr$89862[ebp+4], edx
	and	eax, 4096				; 00001000H
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN4@thread_cal@4
	and	ecx, 1024				; 00000400H
	xor	eax, eax
	or	ecx, eax
	je	SHORT $LN4@thread_cal@4
	push	edi
	call	_calc_constr_content_e
	add	esp, 4
$LN4@thread_cal@4:
	add	ebx, 4
	dec	DWORD PTR tv148[ebp]
	jne	SHORT $LL5@thread_cal@4
	mov	ecx, DWORD PTR _data$89848[ebp]
$LN3@thread_cal@4:
	mov	edi, DWORD PTR [esi+540]
	rdtsc
	mov	DWORD PTR [ecx+edi*8+1880], eax
	mov	DWORD PTR [ecx+edi*8+1884], edx
	inc	DWORD PTR [esi+540]
	mov	eax, DWORD PTR [esi+540]
	cmp	eax, DWORD PTR _maxstage$89849[ebp]
	jl	$LL7@thread_cal@4
	pop	edi
	pop	ebx
$LN8@thread_cal@4:
	pop	esi

; 879  : #endif
; 880  : } // end thread_calc_edge_con_volume()

	mov	esp, ebp
	pop	ebp
	ret	0
_thread_calc_edge_con_volume ENDP
_TEXT	ENDS
PUBLIC	_calc_energy
; Function compile flags: /Ogtp
;	COMDAT _calc_energy
_TEXT	SEGMENT
_calc_energy PROC					; COMDAT

; 71   : #ifdef MPI_EVOLVER
; 72   :   mpi_calc_energy();
; 73   : #else
; 74   :   local_calc_energy();

	jmp	_local_calc_energy
_calc_energy ENDP
_TEXT	ENDS
PUBLIC	__real@c6293e5939a08cea
PUBLIC	__real@46293e5939a08cea
PUBLIC	_calc_content
EXTRN	_info_volume_timestamp:DWORD
EXTRN	_fixed_volume_timestamp:DWORD
EXTRN	_global_timestamp:DWORD
EXTRN	_recalc_facet_area:PROC
EXTRN	_get_next_body_facet:PROC
EXTRN	_set_body_volume:PROC
EXTRN	_floor:PROC
;	COMDAT __real@c6293e5939a08cea
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@c6293e5939a08cea DQ 0c6293e5939a08cear	; -1e+030
CONST	ENDS
;	COMDAT __real@46293e5939a08cea
CONST	SEGMENT
__real@46293e5939a08cea DQ 046293e5939a08cear	; 1e+030
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\calcforc.c
CONST	ENDS
;	COMDAT _calc_content
_TEXT	SEGMENT
tv1092 = -28						; size = 8
tv938 = -28						; size = 8
_calcvol$89684 = -28					; size = 8
_new_vc$89636 = -28					; size = 8
_attr$89606 = -28					; size = 8
_actual$89685 = -20					; size = 8
_worst_a$89653 = -20					; size = 8
_dvol$89635 = -20					; size = 8
_diff$ = -12						; size = 8
tv1083 = -4						; size = 4
tv935 = -4						; size = 4
tv929 = -4						; size = 4
_start_f$89652 = -4					; size = 4
_mode$ = 8						; size = 4
_calc_content PROC					; COMDAT

; 615  : { body_id b_id,bi_id;

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 616  :   int k;
; 617  :   REAL diff = 0.0;

	fldz
	push	ebx
	push	esi
	fstp	QWORD PTR _diff$[ebp]
	push	edi

; 618  :   struct gen_quant *gq;
; 619  :   facet_id f_id;
; 620  : 
; 621  :   /* starting body volumes */
; 622  :   FOR_ALL_BODIES(b_id)

	mov	edi, DWORD PTR _web+384
	mov	ebx, edi
	shr	ebx, 28					; 0000001cH
	and	ebx, 1
	je	$LN55@calc_conte
$LL150@calc_conte:
	mov	eax, DWORD PTR _web+348
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+eax]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv935[ebp], eax
	mov	eax, ecx
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	$LN56@calc_conte

; 623  :   { ATTR attr = get_battr(b_id);
; 624  :     if ( !everything_quantities_flag || ((attr & FIXEDVOL) && (mode & Q_FIXED))
; 625  :        || ((attr & PRESSURE) && (mode & (Q_ENERGY|Q_INFO)) )
; 626  :        || (!(attr & (FIXEDVOL|PRESSURE)) && (mode & Q_INFO)) )

	cmp	DWORD PTR _everything_quantities_flag, 0
	mov	edx, DWORD PTR tv935[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _attr$89606[ebp+4], eax
	je	SHORT $LN158@calc_conte
	mov	eax, ecx
	and	eax, 32					; 00000020H
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN151@calc_conte
	test	BYTE PTR _mode$[ebp], 2
	jne	SHORT $LN158@calc_conte
$LN151@calc_conte:
	mov	eax, ecx
	and	eax, 2048				; 00000800H
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN157@calc_conte
	test	BYTE PTR _mode$[ebp], 5
	jne	SHORT $LN158@calc_conte
$LN157@calc_conte:
	and	ecx, 2080				; 00000820H
	xor	eax, eax
	or	ecx, eax
	jne	SHORT $LN56@calc_conte
	test	BYTE PTR _mode$[ebp], 4
	je	SHORT $LN56@calc_conte
$LN158@calc_conte:

; 627  :      { set_body_volume(b_id,get_body_volconst(b_id),NOSETSTAMP);

	test	ebx, ebx
	je	SHORT $LN68@calc_conte
	mov	eax, DWORD PTR tv935[ebp]
	fld	QWORD PTR [eax+328]
	jmp	SHORT $LN69@calc_conte
$LN68@calc_conte:
	fldz
$LN69@calc_conte:
	push	0
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	edi
	call	_set_body_volume
	add	esp, 16					; 00000010H

; 628  :        if ( web.representation == STRING )

	cmp	DWORD PTR _web+624, 1
	jne	SHORT $LN56@calc_conte

; 629  :        { /* kludge for calculating separate facet areas */
; 630  :          facet_id start_f = get_body_facet(b_id);

	test	ebx, ebx
	je	SHORT $LN72@calc_conte
	mov	ecx, DWORD PTR _web+348
	mov	edx, DWORD PTR [esi+ecx]
	mov	edi, DWORD PTR [edx+400]
	jmp	SHORT $LN73@calc_conte
$LN72@calc_conte:
	xor	edi, edi
$LN73@calc_conte:

; 631  :          f_id = start_f;

	mov	eax, edi

; 632  :          if ( valid_id(f_id) )

	test	edi, 268435456				; 10000000H
	je	SHORT $LN56@calc_conte
	npad	1
$LL46@calc_conte:

; 633  :          { do
; 634  :            { set_facet_area(f_id,0.0);

	mov	edx, DWORD PTR _web+236
	fldz
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]

; 635  :              f_id = get_next_body_facet(f_id);

	push	eax
	fstp	QWORD PTR [ecx+40]
	call	_get_next_body_facet
	add	esp, 4

; 636  :            } while ( !equal_id(f_id,start_f));

	cmp	eax, edi
	jne	SHORT $LL46@calc_conte
$LN56@calc_conte:

; 618  :   struct gen_quant *gq;
; 619  :   facet_id f_id;
; 620  : 
; 621  :   /* starting body volumes */
; 622  :   FOR_ALL_BODIES(b_id)

	mov	edx, DWORD PTR _web+348
	mov	eax, DWORD PTR [esi+edx]
	mov	edi, DWORD PTR [eax]
	mov	ebx, edi
	shr	ebx, 28					; 0000001cH
	and	ebx, 1
	jne	$LL150@calc_conte
$LN55@calc_conte:

; 637  :          } 
; 638  :        }
; 639  :      }
; 640  :   }
; 641  : 
; 642  :   #ifdef MPI_EVOLVER
; 643  :   if ( this_task == MASTER_TASK )
; 644  : 	  mpi_calc_content(mode);
; 645  :   else
; 646  :   #endif
; 647  :   local_calc_content(mode);

	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	call	_local_calc_content
	add	esp, 4

; 648  : 
; 649  :   if ( web.torus_flag )

	cmp	DWORD PTR _web+860, 0
	je	$LN143@calc_conte

; 650  :   { /* do volume adjust to get continuity with old volume, or fixed volume */
; 651  :      FOR_ALL_BODIES(b_id)

	mov	edi, DWORD PTR _web+384
	mov	eax, edi
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv929[ebp], eax
	je	$LN143@calc_conte
	fld	QWORD PTR __real@3fe0000000000000
	fldz
	jmp	SHORT $LN42@calc_conte
$LN149@calc_conte:
	fld	QWORD PTR __real@3fe0000000000000
	fxch	ST(1)
$LN42@calc_conte:
	mov	edx, DWORD PTR _web+348
	mov	ebx, edi
	and	ebx, 134217727				; 07ffffffH
	add	ebx, ebx
	add	ebx, ebx
	mov	edx, DWORD PTR [ebx+edx]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR tv938[ebp+4], eax
	mov	eax, ecx
	and	eax, 1
	xor	esi, esi
	or	eax, esi
	je	$LN164@calc_conte

; 652  :      { REAL vol = get_body_volume(b_id);

	mov	esi, DWORD PTR tv929[ebp]
	test	esi, esi
	je	SHORT $LN76@calc_conte
	fld	QWORD PTR [edx+40]
	jmp	SHORT $LN77@calc_conte
$LN76@calc_conte:
	fld	ST(0)
$LN77@calc_conte:

; 653  :        REAL dvol = 0.0;
; 654  :        REAL new_vc;
; 655  :        if ( (get_battr(b_id) & FIXEDVOL) && !web.pressure_flag )

	and	ecx, 32					; 00000020H
	xor	eax, eax
	or	ecx, eax
	je	SHORT $LN174@calc_conte
	cmp	DWORD PTR _web+868, eax
	jne	SHORT $LN174@calc_conte

; 656  :        { REAL ovol = get_body_fixvol(b_id);

	test	esi, esi
	je	SHORT $LN180@calc_conte
	fstp	ST(1)
	fld	QWORD PTR [edx+32]
	jmp	SHORT $LN81@calc_conte
$LN180@calc_conte:
	fxch	ST(1)
$LN81@calc_conte:

; 657  :          dvol = web.torusv*floor((ovol-vol)/web.torusv+0.5);

	fsubrp	ST(1), ST(0)
	sub	esp, 8
	fdiv	QWORD PTR _web+1600
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [esp]
	call	_floor
	fmul	QWORD PTR _web+1600
	fst	QWORD PTR _dvol$89635[ebp]

; 658  :          add_body_volume_plain(b_id,dvol);   

	fstp	QWORD PTR [esp]
	push	edi
	call	_add_body_volume_plain

; 659  :          save_body_volume(b_id);

	mov	ecx, DWORD PTR _web+348
	mov	eax, DWORD PTR [ebx+ecx]
	fld	QWORD PTR [eax+40]
	fstp	QWORD PTR [eax+288]
	jmp	SHORT $LN347@calc_conte
$LN174@calc_conte:

; 660  :        }
; 661  :        else if (mode & Q_RENORMALIZE) /* set between 0 and 1 */
; 662  :        { dvol = -web.torusv*floor(vol/web.torusv);

	sub	esp, 8
	fstp	ST(1)
	test	BYTE PTR _mode$[ebp], 32		; 00000020H
	je	SHORT $LN35@calc_conte
	fstp	ST(1)
	fdiv	QWORD PTR _web+1600
	fstp	QWORD PTR [esp]
	call	_floor
	fmul	QWORD PTR _web+1600
	fchs
	fst	QWORD PTR _dvol$89635[ebp]

; 663  :          add_body_volume_plain(b_id,dvol);

	fstp	QWORD PTR [esp]
	push	edi
	call	_add_body_volume_plain

; 664  :          save_body_volume(b_id);  

	mov	edx, DWORD PTR _web+348
	mov	eax, DWORD PTR [ebx+edx]
	fld	QWORD PTR [eax+40]
	fstp	QWORD PTR [eax+288]

; 665  :        }
; 666  :        else  /* enforce continuity */

	jmp	SHORT $LN347@calc_conte
$LN35@calc_conte:

; 667  :        { REAL ovol = get_body_oldvolume(b_id);
; 668  :          dvol = web.torusv*floor((ovol-vol)/web.torusv+0.5);

	fsubr	QWORD PTR [edx+288]
	fdiv	QWORD PTR _web+1600
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [esp]
	call	_floor
	fmul	QWORD PTR _web+1600
	fst	QWORD PTR _dvol$89635[ebp]

; 669  :          add_body_volume_plain(b_id,dvol); 

	fstp	QWORD PTR [esp]
	push	edi
	call	_add_body_volume_plain
$LN347@calc_conte:

; 670  :        }
; 671  :        new_vc = get_body_volconst(b_id)+dvol;

	mov	eax, DWORD PTR _web+348
	add	esp, 12					; 0000000cH
	test	esi, esi
	je	SHORT $LN84@calc_conte
	mov	ecx, DWORD PTR [ebx+eax]
	fld	QWORD PTR [ecx+328]
	fldz
	jmp	SHORT $LN85@calc_conte
$LN84@calc_conte:
	fldz
	fld	ST(0)
	fxch	ST(1)
$LN85@calc_conte:
	fxch	ST(1)
	fadd	QWORD PTR _dvol$89635[ebp]
	fst	QWORD PTR _new_vc$89636[ebp]

; 672  :        set_body_volconst(b_id,new_vc);

	test	esi, esi
	je	SHORT $LN140@calc_conte
	mov	edx, DWORD PTR [ebx+eax]
	fst	QWORD PTR [edx+328]
	cmp	DWORD PTR _everything_quantities_flag, 0
	je	SHORT $LN140@calc_conte
	mov	eax, DWORD PTR _web+348
	mov	ecx, DWORD PTR [ebx+eax]
	mov	edx, DWORD PTR [ecx+404]
	mov	eax, DWORD PTR _gen_quant_list
	imul	edx, 368				; 00000170H
	fst	QWORD PTR [edx+eax+208]
$LN140@calc_conte:

; 673  :   
; 674  :        if ( (web.representation == STRING) && (new_vc != 0.0) )

	cmp	DWORD PTR _web+624, 1
	jne	$LN303@calc_conte
	fld	ST(0)
	fld	ST(2)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN303@calc_conte

; 675  :        { /* apply volconst to most worthy facet */
; 676  :          facet_id f_id = get_body_facet(b_id);

	test	esi, esi
	je	SHORT $LN92@calc_conte
	mov	ecx, DWORD PTR _web+348
	mov	edx, DWORD PTR [ebx+ecx]
	mov	esi, DWORD PTR [edx+400]
	jmp	SHORT $LN93@calc_conte
$LN92@calc_conte:
	xor	esi, esi
$LN93@calc_conte:

; 677  :          facet_id start_f = f_id;
; 678  :          REAL worst_a = new_vc > 0.0 ? 1e30 : -1e30;

	fcom	ST(1)
	mov	DWORD PTR _start_f$89652[ebp], esi
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN60@calc_conte
	fld	QWORD PTR __real@46293e5939a08cea
	jmp	SHORT $LN348@calc_conte
$LN60@calc_conte:
	fld	QWORD PTR __real@c6293e5939a08cea
$LN348@calc_conte:

; 679  :          facet_id best_f = NULLID;

	xor	edi, edi
	fstp	QWORD PTR _worst_a$89653[ebp]

; 680  :          if ( valid_id(f_id) )

	test	esi, 268435456				; 10000000H
	je	SHORT $LN29@calc_conte
	fstp	ST(0)
	fstp	ST(0)
$LN31@calc_conte:

; 681  :          do
; 682  :          { REAL a = get_facet_area(f_id);

	push	esi
	call	_recalc_facet_area
	mov	ecx, DWORD PTR _web+236
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+40]
	add	esp, 4

; 683  :            if ( inverted(f_id) ) 

	test	esi, 134217728				; 08000000H
	je	SHORT $LN28@calc_conte

; 684  :              a = -a;

	fchs
$LN28@calc_conte:

; 685  :            if ( ((new_vc > 0.0) && (a < worst_a))
; 686  :               || ((new_vc < 0.0) && (a > worst_a)) )

	fldz
	fld	QWORD PTR _new_vc$89636[ebp]
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN145@calc_conte
	fld	QWORD PTR _worst_a$89653[ebp]
	fcomp	ST(3)
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN316@calc_conte
$LN145@calc_conte:
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN320@calc_conte
	fld	QWORD PTR _worst_a$89653[ebp]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN26@calc_conte
$LN320@calc_conte:
	fstp	ST(0)
$LN27@calc_conte:

; 689  :            }
; 690  :            f_id = get_next_body_facet(f_id);

	push	esi
	call	_get_next_body_facet
	mov	esi, eax
	add	esp, 4

; 691  :          } while ( !equal_id(f_id,start_f) );

	cmp	esi, DWORD PTR _start_f$89652[ebp]
	jne	SHORT $LN31@calc_conte
	fldz
	fld	QWORD PTR _new_vc$89636[ebp]
$LN29@calc_conte:

; 692  :          if ( valid_id(best_f) )

	test	edi, 268435456				; 10000000H
	je	SHORT $LN303@calc_conte

; 693  :            add_facet_area(best_f,new_vc);

	test	edi, 134217728				; 08000000H
	je	SHORT $LN63@calc_conte
	fchs
$LN63@calc_conte:
	mov	eax, DWORD PTR _web+236
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [eax+edi*4]
	fadd	QWORD PTR [edi+40]
	fstp	QWORD PTR [edi+40]
	jmp	SHORT $LN41@calc_conte
$LN316@calc_conte:

; 685  :            if ( ((new_vc > 0.0) && (a < worst_a))
; 686  :               || ((new_vc < 0.0) && (a > worst_a)) )

	fstp	ST(0)
	fstp	ST(0)
$LN26@calc_conte:

; 687  :            { best_f = f_id;
; 688  :              worst_a = a;

	fstp	QWORD PTR _worst_a$89653[ebp]
	mov	edi, esi
	jmp	SHORT $LN27@calc_conte
$LN164@calc_conte:

; 693  :            add_facet_area(best_f,new_vc);

	fstp	ST(1)

; 673  :   
; 674  :        if ( (web.representation == STRING) && (new_vc != 0.0) )

	jmp	SHORT $LN41@calc_conte
$LN303@calc_conte:

; 692  :          if ( valid_id(best_f) )

	fstp	ST(0)
$LN41@calc_conte:

; 650  :   { /* do volume adjust to get continuity with old volume, or fixed volume */
; 651  :      FOR_ALL_BODIES(b_id)

	mov	ecx, DWORD PTR _web+348
	mov	edx, DWORD PTR [ebx+ecx]
	mov	edi, DWORD PTR [edx]
	mov	eax, edi
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv929[ebp], eax
	jne	$LN149@calc_conte
	jmp	SHORT $LN40@calc_conte
$LN143@calc_conte:
	fldz
$LN40@calc_conte:

; 694  :        }
; 695  :      }
; 696  :   }
; 697  : 
; 698  :   if ( mode & Q_RENORMALIZE )

	test	BYTE PTR _mode$[ebp], 32		; 00000020H
	je	$LN152@calc_conte

; 699  :   { /* take care of bodies with declared actual volume */
; 700  :     FOR_ALL_BODIES(b_id)

	mov	edi, DWORD PTR _web+384
	mov	eax, edi
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv929[ebp], eax
	je	$LN152@calc_conte
$LN153@calc_conte:
	mov	eax, DWORD PTR _web+348
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	edx, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR tv938[ebp+4], eax
	mov	eax, ecx
	and	eax, 1
	xor	ebx, ebx
	or	eax, ebx
	je	$LN21@calc_conte

; 701  :       if ( get_battr(b_id) & ACTUALVOL )

	and	ecx, 134217728				; 08000000H
	xor	eax, eax
	or	ecx, eax
	je	$LN21@calc_conte

; 702  :       { REAL calcvol = get_body_volume(b_id);

	mov	ebx, DWORD PTR tv929[ebp]
	test	ebx, ebx
	je	SHORT $LN96@calc_conte
	fstp	ST(0)
	fld	QWORD PTR [edx+40]
$LN96@calc_conte:
	fstp	QWORD PTR _calcvol$89684[ebp]

; 703  :         REAL actual  = get_body_actualvolume(b_id);
; 704  :         set_body_volume(b_id,actual,SETSTAMP);

	push	1
	fld	QWORD PTR [edx+296]
	sub	esp, 8
	fst	QWORD PTR _actual$89685[ebp]
	fstp	QWORD PTR [esp]
	push	edi
	call	_set_body_volume

; 705  :         set_body_volconst(b_id,get_body_volconst(b_id)+actual-calcvol); 

	mov	eax, DWORD PTR _web+348
	add	esp, 16					; 00000010H
	test	ebx, ebx
	je	SHORT $LN100@calc_conte
	mov	ecx, DWORD PTR [esi+eax]
	fld	QWORD PTR [ecx+328]
	fldz
	jmp	SHORT $LN101@calc_conte
$LN100@calc_conte:
	fldz
	fld	ST(0)
	fxch	ST(1)
$LN101@calc_conte:
	fxch	ST(1)
	fadd	QWORD PTR _actual$89685[ebp]
	fsub	QWORD PTR _calcvol$89684[ebp]
	test	ebx, ebx
	je	SHORT $LN327@calc_conte
	mov	edx, DWORD PTR [esi+eax]
	fst	QWORD PTR [edx+328]
	cmp	DWORD PTR _everything_quantities_flag, 0
	je	SHORT $LN327@calc_conte
	mov	eax, DWORD PTR _web+348
	mov	ecx, DWORD PTR [esi+eax]
	mov	edx, DWORD PTR [ecx+404]
	mov	eax, DWORD PTR _gen_quant_list
	imul	edx, 368				; 00000170H
	fstp	QWORD PTR [edx+eax+208]
	jmp	SHORT $LN144@calc_conte
$LN327@calc_conte:
	fstp	ST(0)
$LN144@calc_conte:

; 706  :         save_body_volume(b_id);

	mov	ecx, DWORD PTR _web+348
	mov	eax, DWORD PTR [esi+ecx]
	fld	QWORD PTR [eax+40]
	fstp	QWORD PTR [eax+288]
$LN21@calc_conte:

; 699  :   { /* take care of bodies with declared actual volume */
; 700  :     FOR_ALL_BODIES(b_id)

	mov	edx, DWORD PTR _web+348
	mov	eax, DWORD PTR [esi+edx]
	mov	edi, DWORD PTR [eax]
	mov	eax, edi
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv929[ebp], eax
	jne	$LN153@calc_conte
$LN152@calc_conte:

; 707  :       }
; 708  :   }
; 709  : 
; 710  :   web.vol_flag = 1;
; 711  : 
; 712  : 
; 713  :   /* get total deviation from constraints */
; 714  :   if ( !everything_quantities_flag && !web.pressure_flag ) 

	cmp	DWORD PTR _everything_quantities_flag, 0
	fld	QWORD PTR _web+760
	mov	DWORD PTR _web+896, 1
	jne	$LN148@calc_conte
	cmp	DWORD PTR _web+868, 0
	jne	$LN148@calc_conte

; 715  :   { FOR_ALL_BODIES(bi_id)

	mov	eax, DWORD PTR _web+384
	mov	ecx, eax
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	mov	DWORD PTR tv1083[ebp], ecx
	je	$LN148@calc_conte
	fld	QWORD PTR _diff$[ebp]
$LN15@calc_conte:
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ecx+eax*4]
	mov	esi, DWORD PTR [ebx+8]
	mov	edx, DWORD PTR [ebx+12]
	mov	eax, esi
	and	eax, 1
	xor	ecx, ecx
	or	eax, ecx
	mov	DWORD PTR tv1092[ebp+4], edx
	je	SHORT $LN14@calc_conte
	fstp	ST(0)

; 716  :     { REAL absvol = get_body_abstotal(b_id);

	push	edi
	fstp	ST(0)
	fstp	ST(0)
	call	_get_body_abstotal
	add	esp, 4

; 717  :       REAL target = get_body_fixvol(bi_id);

	cmp	DWORD PTR tv1083[ebp], 0
	je	SHORT $LN108@calc_conte
	fld	QWORD PTR [ebx+32]

; 718  :       REAL actual = get_body_volume(bi_id);

	fld	QWORD PTR [ebx+40]
	fldz
	jmp	SHORT $LN113@calc_conte

; 717  :       REAL target = get_body_fixvol(bi_id);

$LN108@calc_conte:
	fldz
	fld	ST(0)

; 718  :       REAL actual = get_body_volume(bi_id);

	fld	ST(1)
	fxch	ST(1)
	fxch	ST(2)
$LN113@calc_conte:

; 719  : 
; 720  :       if ( !(get_battr(bi_id) & FIXEDVOL) ) continue;

	and	esi, 32					; 00000020H
	xor	eax, eax
	or	esi, eax
	je	SHORT $LN336@calc_conte

; 721  :       diff += fabs(target - actual)/
; 722  :                         (web.target_tolerance*(absvol?absvol:1.0));

	fld	ST(3)
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN65@calc_conte
	fstp	ST(3)
	fld1
	fxch	ST(3)
$LN65@calc_conte:
	fxch	ST(2)
	fsubrp	ST(1), ST(0)
	fabs
	fld	QWORD PTR _web+760
	fmul	ST(3), ST(0)
	fxch	ST(1)
	fdivrp	ST(3), ST(0)
	fxch	ST(2)
	fadd	QWORD PTR _diff$[ebp]
	fst	QWORD PTR _diff$[ebp]
	fxch	ST(1)
	fxch	ST(2)
$LN344@calc_conte:
	fxch	ST(1)
$LN14@calc_conte:

; 715  :   { FOR_ALL_BODIES(bi_id)

	mov	eax, DWORD PTR [ebx]
	mov	ecx, eax
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	mov	DWORD PTR tv1083[ebp], ecx
	jne	$LN15@calc_conte
	jmp	SHORT $LN13@calc_conte
$LN336@calc_conte:

; 719  : 
; 720  :       if ( !(get_battr(bi_id) & FIXEDVOL) ) continue;

	fstp	ST(1)
	fstp	ST(2)
	fstp	ST(0)

; 721  :       diff += fabs(target - actual)/
; 722  :                         (web.target_tolerance*(absvol?absvol:1.0));

	fld	QWORD PTR _diff$[ebp]
	fld	QWORD PTR _web+760
	jmp	SHORT $LN344@calc_conte
$LN148@calc_conte:

; 715  :   { FOR_ALL_BODIES(bi_id)

	fld	QWORD PTR _diff$[ebp]
$LN13@calc_conte:

; 723  :     }
; 724  :   }
; 725  :  
; 726  :   for ( k = 0 ; k < gen_quant_count ; k++ )

	mov	esi, DWORD PTR _web+5528
	mov	ebx, DWORD PTR _gen_quant_list
	xor	edi, edi
	cmp	esi, 4
	jl	$LC127@calc_conte
	lea	edx, DWORD PTR [esi-4]
	shr	edx, 2
	inc	edx
	lea	ecx, DWORD PTR [ebx+552]
	lea	edi, DWORD PTR [edx*4]
$LN136@calc_conte:

; 727  :   { gq = GEN_QUANT(k);
; 728  :     if ( gq->flags & Q_DELETED ) continue;

	mov	eax, DWORD PTR [ecx-416]
	test	eax, 524288				; 00080000H
	jne	SHORT $LN129@calc_conte

; 729  :     if ( !(gq->flags & Q_FIXED) ) continue;

	test	al, 2
	je	SHORT $LN129@calc_conte

; 730  :     if ( gq->tolerance > 0.0 )

	fxch	ST(2)
	fcom	QWORD PTR [ecx-368]
	fnstsw	ax

; 731  :       diff += fabs(gq->target - gq->value)/(gq->tolerance*gq->abstotal);

	fld	QWORD PTR [ecx-408]
	fsub	QWORD PTR [ecx-400]
	fabs
	fld	QWORD PTR [ecx-384]
	test	ah, 5
	jp	SHORT $LN128@calc_conte
	fmul	QWORD PTR [ecx-368]

; 732  :     else

	jmp	SHORT $LN350@calc_conte
$LN128@calc_conte:

; 733  :       diff += fabs(gq->target - gq->value)/(web.target_tolerance*gq->abstotal);

	fmul	ST(0), ST(3)
$LN350@calc_conte:
	fdivp	ST(1), ST(0)
	faddp	ST(3), ST(0)
	fxch	ST(2)
$LN129@calc_conte:

; 727  :   { gq = GEN_QUANT(k);
; 728  :     if ( gq->flags & Q_DELETED ) continue;

	mov	eax, DWORD PTR [ecx-48]
	test	eax, 524288				; 00080000H
	jne	SHORT $LN131@calc_conte

; 729  :     if ( !(gq->flags & Q_FIXED) ) continue;

	test	al, 2
	je	SHORT $LN131@calc_conte

; 730  :     if ( gq->tolerance > 0.0 )

	fxch	ST(2)
	fcom	QWORD PTR [ecx]
	fnstsw	ax

; 731  :       diff += fabs(gq->target - gq->value)/(gq->tolerance*gq->abstotal);

	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [ecx-32]
	fabs
	fld	QWORD PTR [ecx-16]
	test	ah, 5
	jp	SHORT $LN130@calc_conte
	fmul	QWORD PTR [ecx]

; 732  :     else

	jmp	SHORT $LN351@calc_conte
$LN130@calc_conte:

; 733  :       diff += fabs(gq->target - gq->value)/(web.target_tolerance*gq->abstotal);

	fmul	ST(0), ST(3)
$LN351@calc_conte:
	fdivp	ST(1), ST(0)
	faddp	ST(3), ST(0)
	fxch	ST(2)
$LN131@calc_conte:

; 727  :   { gq = GEN_QUANT(k);
; 728  :     if ( gq->flags & Q_DELETED ) continue;

	mov	eax, DWORD PTR [ecx+320]
	test	eax, 524288				; 00080000H
	jne	SHORT $LN133@calc_conte

; 729  :     if ( !(gq->flags & Q_FIXED) ) continue;

	test	al, 2
	je	SHORT $LN133@calc_conte

; 730  :     if ( gq->tolerance > 0.0 )

	fxch	ST(2)
	fcom	QWORD PTR [ecx+368]
	fnstsw	ax

; 731  :       diff += fabs(gq->target - gq->value)/(gq->tolerance*gq->abstotal);

	fld	QWORD PTR [ecx+328]
	fsub	QWORD PTR [ecx+336]
	fabs
	fld	QWORD PTR [ecx+352]
	test	ah, 5
	jp	SHORT $LN132@calc_conte
	fmul	QWORD PTR [ecx+368]

; 732  :     else

	jmp	SHORT $LN352@calc_conte
$LN132@calc_conte:

; 733  :       diff += fabs(gq->target - gq->value)/(web.target_tolerance*gq->abstotal);

	fmul	ST(0), ST(3)
$LN352@calc_conte:
	fdivp	ST(1), ST(0)
	faddp	ST(3), ST(0)
	fxch	ST(2)
$LN133@calc_conte:

; 727  :   { gq = GEN_QUANT(k);
; 728  :     if ( gq->flags & Q_DELETED ) continue;

	mov	eax, DWORD PTR [ecx+688]
	test	eax, 524288				; 00080000H
	jne	SHORT $LN135@calc_conte

; 729  :     if ( !(gq->flags & Q_FIXED) ) continue;

	test	al, 2
	je	SHORT $LN135@calc_conte

; 730  :     if ( gq->tolerance > 0.0 )

	fxch	ST(2)
	fcom	QWORD PTR [ecx+736]
	fnstsw	ax

; 731  :       diff += fabs(gq->target - gq->value)/(gq->tolerance*gq->abstotal);

	fld	QWORD PTR [ecx+696]
	fsub	QWORD PTR [ecx+704]
	fabs
	fld	QWORD PTR [ecx+720]
	test	ah, 5
	jp	SHORT $LN134@calc_conte
	fmul	QWORD PTR [ecx+736]

; 732  :     else

	jmp	SHORT $LN353@calc_conte
$LN134@calc_conte:

; 733  :       diff += fabs(gq->target - gq->value)/(web.target_tolerance*gq->abstotal);

	fmul	ST(0), ST(3)
$LN353@calc_conte:
	fdivp	ST(1), ST(0)
	faddp	ST(3), ST(0)
	fxch	ST(2)
$LN135@calc_conte:

; 723  :     }
; 724  :   }
; 725  :  
; 726  :   for ( k = 0 ; k < gen_quant_count ; k++ )

	add	ecx, 1472				; 000005c0H
	dec	edx
	jne	$LN136@calc_conte
$LC127@calc_conte:
	cmp	edi, esi
	jge	SHORT $LN273@calc_conte
	mov	eax, edi
	imul	eax, 368				; 00000170H
	sub	esi, edi
	lea	ecx, DWORD PTR [eax+ebx+184]
	mov	edx, esi
$LC9@calc_conte:

; 727  :   { gq = GEN_QUANT(k);
; 728  :     if ( gq->flags & Q_DELETED ) continue;

	mov	eax, DWORD PTR [ecx-48]
	test	eax, 524288				; 00080000H
	jne	SHORT $LN8@calc_conte

; 729  :     if ( !(gq->flags & Q_FIXED) ) continue;

	test	al, 2
	je	SHORT $LN8@calc_conte

; 730  :     if ( gq->tolerance > 0.0 )

	fxch	ST(2)
	fcom	QWORD PTR [ecx]
	fnstsw	ax

; 731  :       diff += fabs(gq->target - gq->value)/(gq->tolerance*gq->abstotal);

	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [ecx-32]
	fabs
	fld	QWORD PTR [ecx-16]
	test	ah, 5
	jp	SHORT $LN4@calc_conte
	fmul	QWORD PTR [ecx]

; 732  :     else

	jmp	SHORT $LN354@calc_conte
$LN4@calc_conte:

; 733  :       diff += fabs(gq->target - gq->value)/(web.target_tolerance*gq->abstotal);

	fmul	ST(0), ST(3)
$LN354@calc_conte:
	fdivp	ST(1), ST(0)
	faddp	ST(3), ST(0)
	fxch	ST(2)
$LN8@calc_conte:

; 723  :     }
; 724  :   }
; 725  :  
; 726  :   for ( k = 0 ; k < gen_quant_count ; k++ )

	add	ecx, 368				; 00000170H
	dec	edx
	jne	SHORT $LC9@calc_conte
$LN273@calc_conte:

; 734  :   }
; 735  :   
; 736  :   if ( mode & Q_FIXED )

	mov	cl, BYTE PTR _mode$[ebp]
	fstp	ST(1)
	mov	eax, DWORD PTR _global_timestamp
	fstp	ST(1)
	pop	edi
	pop	esi
	pop	ebx
	test	cl, 2
	je	SHORT $LN2@calc_conte

; 737  :     fixed_volume_timestamp = global_timestamp;

	mov	DWORD PTR _fixed_volume_timestamp, eax
$LN2@calc_conte:

; 738  :   if ( mode & Q_INFO )

	test	cl, 4
	je	SHORT $LN1@calc_conte

; 739  :     info_volume_timestamp = global_timestamp;

	mov	DWORD PTR _info_volume_timestamp, eax
$LN1@calc_conte:

; 740  :   return diff;
; 741  : 
; 742  : } // end calc_content()

	mov	esp, ebp
	pop	ebp
	ret	0
_calc_content ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@LLPJLJGN@Body?5?$CFs?5has?5volume?5?$CFf?6?$AA@ ; `string'
PUBLIC	_calc_pressure
;	COMDAT ??_C@_0BH@LLPJLJGN@Body?5?$CFs?5has?5volume?5?$CFf?6?$AA@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0BH@LLPJLJGN@Body?5?$CFs?5has?5volume?5?$CFf?6?$AA@ DB 'Body %s has'
	DB	' volume %f', 0aH, 00H			; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\calcforc.c
CONST	ENDS
;	COMDAT _calc_pressure
_TEXT	SEGMENT
tv299 = -12						; size = 8
tv290 = -4						; size = 4
_calc_pressure PROC					; COMDAT

; 890  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 891  :   body_id    b_id;
; 892  : 
; 893  :   if ( !web.pressure_flag ) return;

	cmp	DWORD PTR _web+868, 0
	je	$LN9@calc_press

; 894  :   calc_content(Q_FIXED);

	push	edi
	push	2
	call	_calc_content
	fstp	ST(0)

; 895  : 
; 896  :   /* now compute pressure in each body */
; 897  :   FOR_ALL_BODIES(b_id)

	mov	edi, DWORD PTR _web+384
	mov	eax, edi
	shr	eax, 28					; 0000001cH
	add	esp, 4
	and	eax, 1
	mov	DWORD PTR tv290[ebp], eax
	je	$LN40@calc_press
	fldz
	push	ebx
	push	esi
$LN11@calc_press:
	mov	eax, DWORD PTR _web+348
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR tv299[ebp+4], eax
	mov	eax, ecx
	and	eax, 1
	xor	ebx, ebx
	or	eax, ebx
	je	$LN10@calc_press

; 898  :   { 
; 899  :     REAL p;
; 900  :   
; 901  :     if ( equal_id(b_id,web.outside_body) )

	cmp	edi, DWORD PTR _web+1504
	jne	SHORT $LN6@calc_press

; 902  :       p = web.pressure;

	fld	QWORD PTR _web+1536
	jmp	$LN1@calc_press
$LN6@calc_press:

; 903  :     else if ( get_battr(b_id) & FIXEDVOL )

	and	ecx, 32					; 00000020H
	xor	eax, eax
	or	ecx, eax
	je	SHORT $LN4@calc_press

; 904  :     { if ( get_body_volume(b_id) > 0.0 )

	cmp	DWORD PTR tv290[ebp], eax
	je	$LN15@calc_press
	fcom	QWORD PTR [edx+40]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN60@calc_press

; 905  :         p = web.pressure*get_body_fixvol(b_id)/get_body_volume(b_id);

	fld	QWORD PTR [edx+32]
	fmul	QWORD PTR _web+1536
	fdiv	QWORD PTR [edx+40]

; 906  :       else 

	jmp	SHORT $LN1@calc_press
$LN60@calc_press:

; 907  :       { sprintf(errmsg,"Body %s has volume %f\n",ELNAME(b_id),
; 908  :                                (DOUBLE)get_body_volume(b_id));

	lea	ecx, DWORD PTR [esi+1]
	fstp	ST(0)
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	mov	edx, DWORD PTR _web+348
	mov	ecx, DWORD PTR [edx+esi*4]
	fld	QWORD PTR [ecx+40]
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
$LN32@calc_press:
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	eax
	push	OFFSET ??_C@_0BH@LLPJLJGN@Body?5?$CFs?5has?5volume?5?$CFf?6?$AA@
	push	OFFSET _errmsg
	call	_sprintf

; 909  :         kb_error(1776,errmsg,WARNING);

	push	2
	push	OFFSET _errmsg
	push	1776					; 000006f0H
	call	_kb_error

; 910  :         p = 0.0;

	fldz
	add	esp, 32					; 00000020H
$LN4@calc_press:

; 911  :       }
; 912  :     }
; 913  :     else
; 914  :     { p = 0.0;

	fld	ST(0)
$LN1@calc_press:

; 915  :     }
; 916  : 
; 917  :     set_body_pressure(b_id,p);

	cmp	DWORD PTR tv290[ebp], ebx
	je	SHORT $LN51@calc_press
	mov	edx, DWORD PTR _web+348
	mov	eax, DWORD PTR [edx+esi*4]
	fstp	QWORD PTR [eax+312]
	jmp	SHORT $LN10@calc_press
$LN15@calc_press:

; 907  :       { sprintf(errmsg,"Body %s has volume %f\n",ELNAME(b_id),
; 908  :                                (DOUBLE)get_body_volume(b_id));

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN32@calc_press
$LN51@calc_press:

; 915  :     }
; 916  : 
; 917  :     set_body_pressure(b_id,p);

	fstp	ST(0)
$LN10@calc_press:

; 895  : 
; 896  :   /* now compute pressure in each body */
; 897  :   FOR_ALL_BODIES(b_id)

	mov	ecx, DWORD PTR _web+348
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	edi, DWORD PTR [edx]
	mov	eax, edi
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv290[ebp], eax
	jne	$LN11@calc_press
	pop	esi
	fstp	ST(0)
	pop	ebx
$LN40@calc_press:
	pop	edi
$LN9@calc_press:

; 918  :   }
; 919  : 
; 920  : } /* end calc_pressure() */

	mov	esp, ebp
	pop	ebp
	ret	0
_calc_pressure ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_local_calc_force
EXTRN	_unsave_coords:PROC
EXTRN	_restore_coords:PROC
EXTRN	_fixed_constraint_flag:DWORD
EXTRN	_project_all:PROC
EXTRN	_eval:PROC
EXTRN	_optparam:BYTE
EXTRN	_save_coords:PROC
EXTRN	_optparamcount:DWORD
EXTRN	_calc_quant_grads:PROC
EXTRN	_constr_springs:PROC
EXTRN	_bdry_force:PROC
EXTRN	_sqgauss_force:PROC
EXTRN	_conf_edge_curv_force:PROC
EXTRN	_kusner_force:PROC
EXTRN	_sqcurve_force_end:PROC
EXTRN	_calc_simplex_forces:PROC
EXTRN	_calc_constr_force_e:PROC
EXTRN	_calc_edge_forces:DWORD
EXTRN	_calc_constr_force_v:PROC
EXTRN	_sqcurve_force_string:PROC
EXTRN	_calc_simplex_edge_force:PROC
EXTRN	_deturck_factor:QWORD
EXTRN	_calc_vertex_normal:PROC
EXTRN	_unit_normal_flag:DWORD
EXTRN	_sqcurve_force_init:PROC
EXTRN	_mean_curvature_param:DWORD
EXTRN	_square_grad_forces:PROC
; Function compile flags: /Ogtp
;	COMDAT _local_calc_force
_TEXT	SEGMENT
_emid$89405 = -876					; size = 8
_eright$89407 = -868					; size = 8
_eleft$89406 = -860					; size = 8
_attr$89368 = -860					; size = 8
_attr$89339 = -860					; size = 8
_attr$89320 = -860					; size = 8
tv970 = -852						; size = 8
_dp$89404 = -852					; size = 8
_csaved$89399 = -844					; size = 840
__$ArrayPad$ = -4					; size = 4
_local_calc_force PROC					; COMDAT

; 278  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 876				; 0000036cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 279  :   vertex_id v_id;
; 280  :   facet_id f_id;
; 281  :   edge_id e_id;
; 282  :   int i;
; 283  : 
; 284  :   /* zero out vertex cumulative quantities */
; 285  :   MFOR_ALL_VERTICES(v_id)

	mov	eax, DWORD PTR _web+48
	fldz
	push	ebx
	push	esi
	xor	ebx, ebx
	push	edi
	test	eax, 268435456				; 10000000H
	je	SHORT $LN171@local_calc@3
	mov	edi, DWORD PTR _web+12
$LN99@local_calc@3:
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	lea	edx, DWORD PTR [eax+eax]
	mov	ecx, DWORD PTR [edx+edi]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 1
	xor	esi, esi
	or	eax, esi
	je	SHORT $LN98@local_calc@3

; 286  :   { REAL *f = get_force(v_id);

	mov	eax, DWORD PTR _web+104
	mov	esi, DWORD PTR _dymem
	mov	esi, DWORD PTR [eax+esi+784]
	add	esi, ecx

; 287  :     for ( i = 0 ; i < SDIM ; i ++ ) f[i] = 0.0;           

	xor	eax, eax
	cmp	DWORD PTR _web+616, ebx
	jle	SHORT $LN92@local_calc@3
$LN94@local_calc@3:
	fst	QWORD PTR [esi+eax*8]
	inc	eax
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN94@local_calc@3
	mov	edi, DWORD PTR _web+12
$LN92@local_calc@3:

; 288  :     set_vertex_valence(v_id,0);

	mov	ecx, DWORD PTR [edx+edi]
	mov	DWORD PTR [ecx+36], ebx
	mov	edi, DWORD PTR _web+12
$LN98@local_calc@3:

; 279  :   vertex_id v_id;
; 280  :   facet_id f_id;
; 281  :   edge_id e_id;
; 282  :   int i;
; 283  : 
; 284  :   /* zero out vertex cumulative quantities */
; 285  :   MFOR_ALL_VERTICES(v_id)

	mov	edx, DWORD PTR [edx+edi]
	mov	eax, DWORD PTR [edx]
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN99@local_calc@3
$LN171@local_calc@3:

; 289  :   }
; 290  : 
; 291  :   if ( min_square_grad_flag ) { square_grad_forces(); return; }

	cmp	DWORD PTR _min_square_grad_flag, ebx
	je	SHORT $LN91@local_calc@3
	fstp	ST(0)
	call	_square_grad_forces
	pop	edi
	pop	esi
	pop	ebx

; 459  :   }
; 460  : 
; 461  : } /* end local_calc_force() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN91@local_calc@3:

; 292  :   if ( quantities_only_flag ) goto grad_quantities_only;

	cmp	DWORD PTR _quantities_only_flag, ebx
	jne	$LN209@local_calc@3

; 293  :  
; 294  :   if ( square_curvature_flag )

	cmp	DWORD PTR _square_curvature_flag, ebx
	mov	ebx, DWORD PTR _web+5656
	mov	edx, DWORD PTR _web+5652
	mov	esi, DWORD PTR _dymem
	mov	edi, DWORD PTR _localbase
	je	SHORT $LN179@local_calc@3

; 295  :   { if ( globals(square_curvature_param)->value.real == 0.0 )

	mov	eax, DWORD PTR _square_curvature_param
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	and	eax, 16777215				; 00ffffffH
	cmp	ecx, 268435456				; 10000000H
	jne	SHORT $LN106@local_calc@3
	lea	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+esi]
	jmp	SHORT $LN103@local_calc@3
$LN106@local_calc@3:
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN104@local_calc@3
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [edi]
	jmp	SHORT $LN103@local_calc@3
$LN104@local_calc@3:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN102@local_calc@3
	mov	eax, DWORD PTR [ebx+eax*4]
	jmp	SHORT $LN103@local_calc@3
$LN102@local_calc@3:
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [ecx+esi]
$LN103@local_calc@3:
	fld	QWORD PTR [eax+64]
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN88@local_calc@3

; 296  :       square_curvature_flag &= ~EVALUATE;

	and	DWORD PTR _square_curvature_flag, -3	; fffffffdH
	jmp	SHORT $LN179@local_calc@3
$LN88@local_calc@3:

; 297  :     else square_curvature_flag |= EVALUATE;

	or	DWORD PTR _square_curvature_flag, 2
$LN179@local_calc@3:

; 298  :   }
; 299  : 
; 300  :   if ( mean_curv_int_flag )

	cmp	DWORD PTR _mean_curv_int_flag, 0
	je	SHORT $LN189@local_calc@3

; 301  :   { if ( globals(mean_curvature_param)->value.real == 0.0 )

	mov	eax, DWORD PTR _mean_curvature_param
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	and	eax, 16777215				; 00ffffffH
	cmp	ecx, 268435456				; 10000000H
	jne	SHORT $LN112@local_calc@3
	lea	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+esi]
	jmp	SHORT $LN109@local_calc@3
$LN112@local_calc@3:
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN110@local_calc@3
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [edi]
	jmp	SHORT $LN109@local_calc@3
$LN110@local_calc@3:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN108@local_calc@3
	mov	eax, DWORD PTR [ebx+eax*4]
	jmp	SHORT $LN109@local_calc@3
$LN108@local_calc@3:
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [ecx+esi]
$LN109@local_calc@3:
	fld	QWORD PTR [eax+64]
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN85@local_calc@3

; 302  :       mean_curv_int_flag &= ~EVALUATE;

	and	DWORD PTR _mean_curv_int_flag, -3	; fffffffdH
	jmp	SHORT $LN189@local_calc@3
$LN85@local_calc@3:

; 303  :     else mean_curv_int_flag |= EVALUATE;

	or	DWORD PTR _mean_curv_int_flag, 2
$LN189@local_calc@3:

; 304  :   }
; 305  : 
; 306  :   if ( sqgauss_flag )

	cmp	DWORD PTR _sqgauss_flag, 0
	je	SHORT $LN244@local_calc@3

; 307  :   { if ( globals(sqgauss_param)->value.real == 0.0 )

	mov	eax, DWORD PTR _sqgauss_param
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	and	eax, 16777215				; 00ffffffH
	cmp	ecx, 268435456				; 10000000H
	jne	SHORT $LN118@local_calc@3
	lea	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [edx+esi]
	jmp	SHORT $LN115@local_calc@3
$LN118@local_calc@3:
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN116@local_calc@3
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [edi]
	jmp	SHORT $LN115@local_calc@3
$LN116@local_calc@3:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN114@local_calc@3
	mov	eax, DWORD PTR [ebx+eax*4]
	jmp	SHORT $LN115@local_calc@3
$LN114@local_calc@3:
	lea	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+esi]
$LN115@local_calc@3:
	fld	QWORD PTR [eax+64]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN82@local_calc@3

; 308  :       sqgauss_flag &= ~EVALUATE;

	and	DWORD PTR _sqgauss_flag, -3		; fffffffdH
	jmp	SHORT $LN81@local_calc@3
$LN82@local_calc@3:

; 309  :     else sqgauss_flag |= EVALUATE;

	or	DWORD PTR _sqgauss_flag, 2
	jmp	SHORT $LN81@local_calc@3
$LN244@local_calc@3:
	fstp	ST(0)
$LN81@local_calc@3:

; 310  :   }
; 311  : 
; 312  :   if ( ((square_curvature_flag | mean_curv_int_flag) & EVALUATE) 
; 313  :             && !kusner_flag && !conf_edge_curv_flag ) 

	mov	ecx, DWORD PTR _mean_curv_int_flag
	or	ecx, DWORD PTR _square_curvature_flag
	test	cl, 2
	je	SHORT $LN172@local_calc@3
	cmp	DWORD PTR _kusner_flag, 0
	jne	SHORT $LN172@local_calc@3
	cmp	DWORD PTR _conf_edge_curv_flag, 0
	jne	SHORT $LN172@local_calc@3

; 314  :      sqcurve_force_init();

	call	_sqcurve_force_init
	mov	esi, DWORD PTR _dymem
$LN172@local_calc@3:

; 315  : 
; 316  :   if ( unit_normal_flag )  /* for Dennis DeTurck */

	cmp	DWORD PTR _unit_normal_flag, 0
	je	$LN186@local_calc@3

; 317  :   {  
; 318  :      FOR_ALL_VERTICES(v_id)

	mov	ebx, DWORD PTR _web+48
	test	ebx, 268435456				; 10000000H
	je	$LN186@local_calc@3
	npad	7
$LL78@local_calc@3:
	mov	edx, DWORD PTR _web+12
	mov	edi, ebx
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	ecx, DWORD PTR [edi+edx]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	$LN77@local_calc@3

; 319  :      { REAL *f = get_force(v_id);

	mov	eax, DWORD PTR _web+104
	mov	esi, DWORD PTR [eax+esi+784]

; 320  :        facetedge_id fe = get_vertex_fe(v_id);

	push	ebx
	add	esi, ecx
	call	_get_vertex_fe

; 321  :        if ( inverted(get_fe_facet(fe)) ) fe = get_next_facet(fe);

	mov	edx, DWORD PTR _web+460
	add	esp, 4
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN139@local_calc@3
	mov	ecx, DWORD PTR _NULLFACET
	jmp	SHORT $LN138@local_calc@3
$LN139@local_calc@3:
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [ecx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN138@local_calc@3
	xor	ecx, 134217728				; 08000000H
$LN138@local_calc@3:
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN142@local_calc@3
	test	eax, 134217728				; 08000000H
	je	SHORT $LN143@local_calc@3
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN142@local_calc@3
$LN143@local_calc@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+40]
$LN142@local_calc@3:

; 322  :        calc_vertex_normal(v_id,fe,f);

	push	esi
	push	eax
	push	ebx
	call	_calc_vertex_normal
	fstp	ST(0)

; 323  :        for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN174@local_calc@3
	npad	1
$LL72@local_calc@3:

; 324  :           f[i] *= deturck_factor;

	fld	QWORD PTR [esi+eax*8]
	inc	eax
	fmul	QWORD PTR _deturck_factor
	fstp	QWORD PTR [esi+eax*8-8]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LL72@local_calc@3
$LN174@local_calc@3:

; 323  :        for ( i = 0 ; i < SDIM ; i++ )

	mov	esi, DWORD PTR _dymem
$LN77@local_calc@3:

; 317  :   {  
; 318  :      FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR _web+12
	mov	edx, DWORD PTR [edi+ecx]
	mov	ebx, DWORD PTR [edx]
	test	ebx, 268435456				; 10000000H
	jne	$LL78@local_calc@3
$LN186@local_calc@3:

; 325  :      }
; 326  :      /* continue with other forces */
; 327  :   }
; 328  : 
; 329  :   /* boundary and constraint forces */
; 330  :   if ( web.representation == SIMPLEX )

	mov	eax, DWORD PTR _web+624
	cmp	eax, 3
	jne	SHORT $LN69@local_calc@3

; 331  :   { FOR_ALL_EDGES(e_id)

	mov	ecx, DWORD PTR _web+160
	test	ecx, 268435456				; 10000000H
	je	$LN177@local_calc@3
	npad	1
$LL68@local_calc@3:
	mov	eax, DWORD PTR _web+124
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN67@local_calc@3

; 332  :        calc_simplex_edge_force(e_id);

	push	ecx
	call	_calc_simplex_edge_force
	add	esp, 4
$LN67@local_calc@3:

; 331  :   { FOR_ALL_EDGES(e_id)

	mov	ecx, DWORD PTR _web+124
	mov	edx, DWORD PTR [esi+ecx]
	mov	ecx, DWORD PTR [edx]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LL68@local_calc@3

; 333  :   }
; 334  :   else if ( web.representation == STRING )

	jmp	$LN175@local_calc@3
$LN69@local_calc@3:
	cmp	eax, 1
	jne	$LN62@local_calc@3

; 335  :   { if ( ((square_curvature_flag | mean_curv_int_flag) & EVALUATE)
; 336  :                     && !kusner_flag && !conf_edge_curv_flag ) 

	mov	eax, DWORD PTR _mean_curv_int_flag
	or	eax, DWORD PTR _square_curvature_flag
	test	al, 2
	je	SHORT $LN61@local_calc@3
	cmp	DWORD PTR _kusner_flag, 0
	jne	SHORT $LN61@local_calc@3
	cmp	DWORD PTR _conf_edge_curv_flag, 0
	jne	SHORT $LN61@local_calc@3

; 337  :         sqcurve_energy_string_init();

	call	_sqcurve_energy_string_init
$LN61@local_calc@3:

; 338  :     FOR_ALL_VERTICES(v_id)

	mov	ebx, DWORD PTR _web+48
	test	ebx, 268435456				; 10000000H
	je	$LN175@local_calc@3
	mov	eax, DWORD PTR _web+12
	npad	9
$LL60@local_calc@3:
	mov	esi, ebx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+eax]
	mov	edx, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, ecx
	mov	DWORD PTR tv970[ebp+4], edx
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN59@local_calc@3

; 339  :     { ATTR attr = get_vattr(v_id);

	mov	eax, DWORD PTR tv970[ebp+4]
	mov	edi, ecx
	mov	DWORD PTR _attr$89320[ebp+4], eax

; 340  :       if ( attr &  FIXED ) continue;

	mov	eax, edi
	and	eax, 64					; 00000040H
	xor	ecx, ecx
	or	eax, ecx
	jne	SHORT $LN59@local_calc@3

; 341  :       if ( ((square_curvature_flag | mean_curv_int_flag) & EVALUATE)
; 342  :                     && !kusner_flag && !conf_edge_curv_flag ) 

	mov	ecx, DWORD PTR _mean_curv_int_flag
	or	ecx, DWORD PTR _square_curvature_flag
	test	cl, 2
	je	SHORT $LN182@local_calc@3
	cmp	DWORD PTR _kusner_flag, edx
	jne	SHORT $LN182@local_calc@3
	cmp	DWORD PTR _conf_edge_curv_flag, edx
	jne	SHORT $LN182@local_calc@3

; 343  :           sqcurve_force_string(v_id);

	push	ebx
	call	_sqcurve_force_string
	add	esp, 4
$LN182@local_calc@3:

; 344  :       if ( !(attr & BDRY_ENERGY) ) continue;

	mov	eax, edi
	and	eax, 512				; 00000200H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN59@local_calc@3

; 345  :       if ( attr & CONSTRAINT )

	and	edi, 1024				; 00000400H
	xor	eax, eax
	or	edi, eax
	je	SHORT $LN59@local_calc@3

; 346  :          calc_constr_force_v(v_id);

	push	ebx
	call	_calc_constr_force_v
	add	esp, 4
$LN59@local_calc@3:

; 338  :     FOR_ALL_VERTICES(v_id)

	mov	eax, DWORD PTR _web+12
	mov	edx, DWORD PTR [esi+eax]
	mov	ebx, DWORD PTR [edx]
	test	ebx, 268435456				; 10000000H
	jne	$LL60@local_calc@3

; 347  :     }
; 348  :   }
; 349  :   else /* SOAPFILM */

	jmp	$LN175@local_calc@3
$LN62@local_calc@3:

; 350  :   { FOR_ALL_EDGES(e_id)

	mov	ebx, DWORD PTR _web+160
	test	ebx, 268435456				; 10000000H
	je	SHORT $LN175@local_calc@3
	npad	12
$LL50@local_calc@3:
	mov	eax, DWORD PTR _web+124
	mov	esi, ebx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+eax]
	mov	edi, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [eax+12]
	mov	eax, edi
	and	eax, 1
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN49@local_calc@3

; 351  :     { ATTR attr = get_eattr(e_id);
; 352  :      if ( attr & DENSITY )

	mov	eax, edi
	and	eax, 16					; 00000010H
	or	eax, ecx
	mov	DWORD PTR _attr$89339[ebp+4], edx
	je	SHORT $LN45@local_calc@3

; 353  :        (*calc_edge_forces)(e_id);  /* for triple line energies */

	push	ebx
	call	DWORD PTR _calc_edge_forces
	add	esp, 4
$LN45@local_calc@3:

; 354  :      if ( !(attr & BDRY_ENERGY) ) continue;

	mov	eax, edi
	and	eax, 512				; 00000200H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN49@local_calc@3

; 355  :      if ( attr & CONSTRAINT )

	and	edi, 1024				; 00000400H
	xor	eax, eax
	or	edi, eax
	je	SHORT $LN49@local_calc@3

; 356  :        calc_constr_force_e(e_id);

	push	ebx
	call	_calc_constr_force_e
	add	esp, 4
$LN49@local_calc@3:

; 350  :   { FOR_ALL_EDGES(e_id)

	mov	ecx, DWORD PTR _web+124
	mov	edx, DWORD PTR [esi+ecx]
	mov	ebx, DWORD PTR [edx]
	test	ebx, 268435456				; 10000000H
	jne	SHORT $LL50@local_calc@3
$LN175@local_calc@3:

; 357  :     }
; 358  :   }
; 359  : 
; 360  :   if ( web.representation == SIMPLEX )

	mov	eax, DWORD PTR _web+624
	cmp	eax, 3
	jne	SHORT $LN42@local_calc@3
$LN177@local_calc@3:

; 361  :   { FOR_ALL_FACETS(f_id)

	mov	ecx, DWORD PTR _web+272
	test	ecx, 268435456				; 10000000H
	je	$LN188@local_calc@3
	mov	edi, DWORD PTR _web+236
$LL41@local_calc@3:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [edi+esi]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN40@local_calc@3

; 362  :       calc_simplex_forces(f_id);

	push	ecx
	call	_calc_simplex_forces
	mov	edi, DWORD PTR _web+236
	add	esp, 4
$LN40@local_calc@3:

; 361  :   { FOR_ALL_FACETS(f_id)

	mov	eax, DWORD PTR [edi+esi]
	mov	ecx, DWORD PTR [eax]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LL41@local_calc@3

; 363  :   }
; 364  :   else if ( web.representation == STRING )

	jmp	$LN188@local_calc@3
$LN42@local_calc@3:
	cmp	eax, 1
	jne	SHORT $LN35@local_calc@3

; 365  :   { /* tension forces */
; 366  :     /* add each edge's contribution to its endpoints */
; 367  :     FOR_ALL_EDGES(e_id)

	mov	edi, DWORD PTR _web+160
	test	edi, 268435456				; 10000000H
	je	$LN188@local_calc@3
	npad	8
$LL185@local_calc@3:
	mov	ecx, DWORD PTR _web+124
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+ecx]
	mov	ebx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [eax+12]
	mov	eax, ebx
	and	eax, 1
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN33@local_calc@3

; 368  :     { ATTR attr = get_eattr(e_id);
; 369  :       (*calc_edge_forces)(e_id);

	push	edi
	mov	DWORD PTR _attr$89368[ebp+4], edx
	call	DWORD PTR _calc_edge_forces

; 370  :       if ( attr & BDRY_ENERGY )

	and	ebx, 512				; 00000200H
	xor	eax, eax
	add	esp, 4
	or	ebx, eax
	je	SHORT $LN33@local_calc@3

; 371  :          calc_constr_force_e(e_id);  /* substitute surface energy */

	push	edi
	call	_calc_constr_force_e
	add	esp, 4
$LN33@local_calc@3:

; 365  :   { /* tension forces */
; 366  :     /* add each edge's contribution to its endpoints */
; 367  :     FOR_ALL_EDGES(e_id)

	mov	edx, DWORD PTR _web+124
	mov	eax, DWORD PTR [esi+edx]
	mov	edi, DWORD PTR [eax]
	test	edi, 268435456				; 10000000H
	jne	SHORT $LL185@local_calc@3

; 372  :     }
; 373  :   }
; 374  :   else /* get here only for SOAPFILM */

	jmp	SHORT $LN188@local_calc@3
$LN35@local_calc@3:

; 375  :   { /* tension forces */
; 376  :     /* find each triangle's contribution to forces on its vertices */
; 377  :     if ( threadflag )

	cmp	DWORD PTR _threadflag, 0
	je	SHORT $LN27@local_calc@3

; 378  :       thread_launch(TH_CALC_FACET_FORCES,FACET);

	push	2
	push	4
	call	_thread_launch
	add	esp, 8

; 379  :     else

	jmp	SHORT $LN188@local_calc@3
$LN27@local_calc@3:

; 380  :       FOR_ALL_FACETS(f_id)

	mov	ecx, DWORD PTR _web+272
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN188@local_calc@3
	mov	edi, DWORD PTR _web+236
	npad	5
$LL25@local_calc@3:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [edi+esi]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN24@local_calc@3

; 381  :         (*calc_facet_forces)(f_id);

	push	ecx
	call	DWORD PTR _calc_facet_forces
	mov	edi, DWORD PTR _web+236
	add	esp, 4
$LN24@local_calc@3:

; 380  :       FOR_ALL_FACETS(f_id)

	mov	ecx, DWORD PTR [edi+esi]
	mov	ecx, DWORD PTR [ecx]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LL25@local_calc@3
$LN188@local_calc@3:

; 382  :   }
; 383  : 
; 384  :   if ( ((square_curvature_flag | mean_curv_int_flag) & EVALUATE )
; 385  :           && !kusner_flag && !conf_edge_curv_flag ) 

	mov	edx, DWORD PTR _mean_curv_int_flag
	or	edx, DWORD PTR _square_curvature_flag
	test	dl, 2
	je	SHORT $LN183@local_calc@3
	cmp	DWORD PTR _kusner_flag, 0
	jne	SHORT $LN183@local_calc@3
	cmp	DWORD PTR _conf_edge_curv_flag, 0
	jne	SHORT $LN183@local_calc@3

; 386  :      sqcurve_force_end();

	call	_sqcurve_force_end
$LN183@local_calc@3:

; 387  : 
; 388  :   if ( (square_curvature_flag & EVALUATE) && kusner_flag ) 

	test	BYTE PTR _square_curvature_flag, 2
	je	SHORT $LN18@local_calc@3
	cmp	DWORD PTR _kusner_flag, 0
	je	SHORT $LN193@local_calc@3

; 389  :      kusner_force();

	call	_kusner_force
$LN193@local_calc@3:

; 390  :   if ( (square_curvature_flag & EVALUATE) && conf_edge_curv_flag) 

	test	BYTE PTR _square_curvature_flag, 2
	je	SHORT $LN18@local_calc@3
	cmp	DWORD PTR _conf_edge_curv_flag, 0
	je	SHORT $LN18@local_calc@3

; 391  :      conf_edge_curv_force();

	call	_conf_edge_curv_force
$LN18@local_calc@3:

; 392  :   if ( sqgauss_flag & EVALUATE )

	test	BYTE PTR _sqgauss_flag, 2
	je	SHORT $LN17@local_calc@3

; 393  :      sqgauss_force();

	call	_sqgauss_force
$LN17@local_calc@3:

; 394  : 
; 395  :   /* Add kludge forces on boundary edges to prevent pulling away */
; 396  :   if ( (web.modeltype == LINEAR) & web.convex_flag )

	xor	eax, eax
	cmp	DWORD PTR _web+628, 1
	sete	al
	test	DWORD PTR _web+840, eax
	je	SHORT $grad_quantities_only$89260

; 397  :   { FOR_ALL_EDGES(e_id)

	mov	edi, DWORD PTR _web+160
	test	edi, 268435456				; 10000000H
	je	SHORT $grad_quantities_only$89260
	mov	eax, DWORD PTR _web+124
$LL15@local_calc@3:
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN14@local_calc@3

; 398  :     { bdry_force(e_id);

	push	edi
	call	_bdry_force

; 399  :       constr_springs(e_id);

	push	edi
	call	_constr_springs
	add	esp, 8
$LN14@local_calc@3:

; 397  :   { FOR_ALL_EDGES(e_id)

	mov	eax, DWORD PTR _web+124
	mov	ecx, DWORD PTR [esi+eax]
	mov	edi, DWORD PTR [ecx]
	test	edi, 268435456				; 10000000H
	jne	SHORT $LL15@local_calc@3
	jmp	SHORT $grad_quantities_only$89260
$LN209@local_calc@3:
	fstp	ST(0)
$grad_quantities_only$89260:

; 400  :     }
; 401  :   }
; 402  : 
; 403  : grad_quantities_only:
; 404  :   
; 405  :   /* general quantity forces */
; 406  :   calc_quant_grads(Q_ENERGY);

	push	1
	call	_calc_quant_grads

; 407  : 
; 408  :   /* derivatives with respect to optimizing parameters */
; 409  :   if ( optparamcount > 0 )

	xor	ebx, ebx
	add	esp, 4
	cmp	DWORD PTR _optparamcount, ebx
	jle	$LN10@local_calc@3

; 412  :      save_coords(&csaved,SAVE_SEPARATE);

	lea	edx, DWORD PTR _csaved$89399[ebp]
	push	2
	push	edx
	mov	DWORD PTR _csaved$89399[ebp], ebx
	call	_save_coords
	add	esp, 8

; 413  :      for ( i = 0 ; i < optparamcount ; i++ )

	cmp	DWORD PTR _optparamcount, ebx
	jle	$LN7@local_calc@3

; 410  :   {  struct oldcoord csaved;
; 411  :      csaved.coord = NULL;

	fld	QWORD PTR _web+1240
	mov	edi, OFFSET _optparam
$LN9@local_calc@3:

; 414  :      {  REAL dp;
; 415  :         REAL emid = web.total_energy;
; 416  :         REAL eleft,eright;
; 417  :         struct global *g = globals(optparam[i].pnum);

	mov	eax, DWORD PTR [edi]
	fstp	QWORD PTR _emid$89405[ebp]
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN120@local_calc@3
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN122@local_calc@3
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	mov	esi, eax
	jmp	SHORT $LN121@local_calc@3
$LN122@local_calc@3:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN120@local_calc@3
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	esi, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN121@local_calc@3
$LN120@local_calc@3:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	esi, DWORD PTR [edx+eax]
$LN121@local_calc@3:

; 418  : 
; 419  :         dp = g->attr.varstuff.delta;

	fld	QWORD PTR [esi+168]

; 420  : 
; 421  :         /* right difference */
; 422  :         g->value.real += dp;
; 423  :         if ( g->attr.varstuff.on_assign_call )

	mov	eax, DWORD PTR [esi+188]
	fst	QWORD PTR _dp$89404[ebp]
	fadd	QWORD PTR [esi+64]
	fstp	QWORD PTR [esi+64]
	test	eax, eax
	je	SHORT $LN6@local_calc@3

; 424  :         { struct  global *gg = globals(g->attr.varstuff.on_assign_call);

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN126@local_calc@3
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN128@local_calc@3
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN127@local_calc@3
$LN128@local_calc@3:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN126@local_calc@3
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN127@local_calc@3
$LN126@local_calc@3:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN127@local_calc@3:

; 425  :           eval(&gg->value.proc,NULL,NULLID,NULL);

	push	0
	push	0
	add	eax, 64					; 00000040H
	push	0
	push	eax
	call	_eval
	fstp	ST(0)
	add	esp, 16					; 00000010H
$LN6@local_calc@3:

; 426  :         }
; 427  :  
; 428  :         project_all(0, TEST_MOVE);

	push	0
	push	0
	call	_project_all
	add	esp, 8

; 429  :         if ( fixed_constraint_flag || web.pressure_flag || web.pressflag )

	cmp	DWORD PTR _fixed_constraint_flag, 0
	jne	SHORT $LN4@local_calc@3
	cmp	DWORD PTR _web+868, 0
	jne	SHORT $LN4@local_calc@3
	cmp	DWORD PTR _web+844, 0
	je	SHORT $LN5@local_calc@3
$LN4@local_calc@3:

; 430  :         { calc_content(Q_FIXED);

	push	2
	call	_calc_content
	fstp	ST(0)
	add	esp, 4
$LN5@local_calc@3:

; 431  :            /*volume_restore();*/
; 432  :            /*calc_pressure();*/
; 433  :         }
; 434  :         calc_energy();  /* energy after motion */

	call	_calc_energy

; 435  :         eright = web.total_energy;

	fld	QWORD PTR _web+1240

; 436  :         restore_coords(&csaved,SAVE_SEPARATE);  /* also restores opt params */

	lea	ecx, DWORD PTR _csaved$89399[ebp]
	fstp	QWORD PTR _eright$89407[ebp]
	push	2
	push	ecx
	call	_restore_coords

; 437  : 
; 438  :         /* left difference */
; 439  :         g->value.real -= dp;

	fld	QWORD PTR [esi+64]
	fsub	QWORD PTR _dp$89404[ebp]

; 440  :         if ( g->attr.varstuff.on_assign_call )

	mov	eax, DWORD PTR [esi+188]
	add	esp, 8
	fstp	QWORD PTR [esi+64]
	test	eax, eax
	je	SHORT $LN191@local_calc@3

; 441  :         { struct  global *gg = globals(g->attr.varstuff.on_assign_call);

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN132@local_calc@3
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN134@local_calc@3
	mov	edx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [edx]
	jmp	SHORT $LN133@local_calc@3
$LN134@local_calc@3:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN132@local_calc@3
	mov	ecx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN133@local_calc@3
$LN132@local_calc@3:
	mov	edx, DWORD PTR _web+5652
	mov	ecx, DWORD PTR _dymem
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ecx]
$LN133@local_calc@3:

; 442  :           eval(&gg->value.proc,NULL,NULLID,NULL);

	push	0
	push	0
	add	eax, 64					; 00000040H
	push	0
	push	eax
	call	_eval
	fstp	ST(0)
	add	esp, 16					; 00000010H
$LN191@local_calc@3:

; 443  :         }
; 444  :         project_all(0, TEST_MOVE);

	push	0
	push	0
	call	_project_all
	add	esp, 8

; 445  :         if ( fixed_constraint_flag || web.pressure_flag || web.pressflag )

	cmp	DWORD PTR _fixed_constraint_flag, 0
	jne	SHORT $LN1@local_calc@3
	cmp	DWORD PTR _web+868, 0
	jne	SHORT $LN1@local_calc@3
	cmp	DWORD PTR _web+844, 0
	je	SHORT $LN192@local_calc@3
$LN1@local_calc@3:

; 446  :         { calc_content(Q_FIXED);

	push	2
	call	_calc_content
	fstp	ST(0)
	add	esp, 4
$LN192@local_calc@3:

; 447  :            /*volume_restore(); */
; 448  :            /*calc_pressure(); */
; 449  :         }
; 450  :         calc_energy();  /* energy after motion */

	call	_calc_energy

; 451  :         eleft = web.total_energy;

	fld	QWORD PTR _web+1240

; 452  : 
; 453  :         restore_coords(&csaved,SAVE_SEPARATE);  /* also restores opt params */

	lea	edx, DWORD PTR _csaved$89399[ebp]
	fstp	QWORD PTR _eleft$89406[ebp]
	push	2
	push	edx
	call	_restore_coords

; 454  :         web.total_energy = emid; /* restore */

	fld	QWORD PTR _emid$89405[ebp]
	fst	QWORD PTR _web+1240
	inc	ebx

; 455  : 
; 456  :         optparam[i].grad = (eright - eleft)/2/dp;

	fld	QWORD PTR _eright$89407[ebp]
	add	esp, 8
	fsub	QWORD PTR _eleft$89406[ebp]
	add	edi, 56					; 00000038H
	fmul	QWORD PTR __real@3fe0000000000000
	fdiv	QWORD PTR _dp$89404[ebp]
	fstp	QWORD PTR [edi-48]
	cmp	ebx, DWORD PTR _optparamcount
	jl	$LN9@local_calc@3

; 413  :      for ( i = 0 ; i < optparamcount ; i++ )

	fstp	ST(0)
$LN7@local_calc@3:

; 457  :      }
; 458  :      unsave_coords(&csaved,SAVE_SEPARATE);

	lea	eax, DWORD PTR _csaved$89399[ebp]
	push	2
	push	eax
	call	_unsave_coords
	add	esp, 8
$LN10@local_calc@3:

; 459  :   }
; 460  : 
; 461  : } /* end local_calc_force() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_local_calc_force ENDP
_TEXT	ENDS
PUBLIC	_calc_force
; Function compile flags: /Ogtp
;	COMDAT _calc_force
_TEXT	SEGMENT
_calc_force PROC					; COMDAT

; 261  :   #ifdef MPI_EVOLVER
; 262  :   mpi_calc_force();
; 263  :   #else
; 264  :   local_calc_force();

	jmp	_local_calc_force
_calc_force ENDP
_TEXT	ENDS
END
