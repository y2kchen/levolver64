; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\HIDIM.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_get_fe_edge
EXTRN	_web:BYTE
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
;	COMDAT _get_fe_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_edge PROC					; COMDAT

; 43   : {

	push	ebp
	mov	ebp, esp

; 44   :   edge_id e_id;
; 45   :     
; 46   :   e_id = feptr(fe_id)->fe_edge_id;

	mov	eax, DWORD PTR _fe_id$[ebp]

; 47   : 
; 48   :   /*
; 49   :   if ( inverted(fe_id) ) invert(e_id);
; 50   :   return e_id;
; 51   :   */
; 52   :   
; 53   :   return same_sign(e_id,fe_id);

	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]

; 54   : }

	pop	ebp
	ret	0
_get_fe_edge ENDP
_TEXT	ENDS
PUBLIC	_get_next_edge
; Function compile flags: /Ogtp
;	COMDAT _get_next_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_next_edge PROC					; COMDAT

; 76   : {

	push	ebp
	mov	ebp, esp

; 77   :   if ( inverted(fe_id) ) return inverse_id(feptr(fe_id)->nextedge[0]);

	mov	eax, DWORD PTR _fe_id$[ebp]
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_next_e
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H

; 79   : }

	pop	ebp
	ret	0
$LN2@get_next_e:

; 78   :   else return feptr(fe_id)->nextedge[1];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]

; 79   : }

	pop	ebp
	ret	0
_get_next_edge ENDP
_TEXT	ENDS
PUBLIC	_get_edge_tailv
EXTRN	_dymem:DWORD
; Function compile flags: /Ogtp
;	COMDAT _get_edge_tailv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_tailv PROC					; COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp

; 192  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 193  :      return get_edge_vertices(e_id)[web.headvnum];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_t
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 196  : }

	pop	ebp
	ret	0
$LN2@get_edge_t:

; 194  :   else
; 195  :      return get_edge_vertices(e_id)[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 196  : }

	pop	ebp
	ret	0
_get_edge_tailv ENDP
_TEXT	ENDS
PUBLIC	_get_facet_fe
; Function compile flags: /Ogtp
;	COMDAT _get_facet_fe
_TEXT	SEGMENT
_f_id$ = 8						; size = 4
_get_facet_fe PROC					; COMDAT

; 260  : {

	push	ebp
	mov	ebp, esp

; 261  :   facetedge_id fe;
; 262  :   
; 263  :   if ( !valid_id(f_id) ) return NULLID;

	mov	ecx, DWORD PTR _f_id$[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN2@get_facet_
	xor	eax, eax

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
$LN2@get_facet_:

; 264  :   fe = fptr(f_id)->fe_id;

	mov	edx, DWORD PTR _web+236
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]

; 265  :   if ( inverted(f_id) ) invert(fe);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_facet_
	xor	eax, 134217728				; 08000000H
$LN3@get_facet_:

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
_get_facet_fe ENDP
_TEXT	ENDS
PUBLIC	__real@3fd0000000000000
PUBLIC	??_C@_0BI@COEFBJGO@Hit?5RETURN?5to?5continue?4?$AA@ ; `string'
PUBLIC	??_C@_0CC@PMCOFJB@?5?$CF8lX?5?5?5?5?$CF18?415f?5?$CF18?415f?5?$CF18?415f@ ; `string'
PUBLIC	??_C@_0BJ@HNPHFKMP@Facet?9edges?5and?5sides?3?5?6?$AA@ ; `string'
PUBLIC	??_C@_0BO@KMECEKLM@WARNING?$CB?5Zero?5area?5triangle?$CB?6?$AA@ ; `string'
PUBLIC	__real@3fe0000000000000
PUBLIC	_f_id$GSCopy$
PUBLIC	__real@3ddb7cdfd9d7bdbb
PUBLIC	__$ArrayPad$
PUBLIC	_facet_force_l_hi_d
EXTRN	_sqcurve_force:PROC
EXTRN	_conf_edge_curv_flag:DWORD
EXTRN	_kusner_flag:DWORD
EXTRN	_square_curvature_flag:DWORD
EXTRN	_mean_curv_int_flag:DWORD
EXTRN	_prompt:PROC
EXTRN	_msgmax:DWORD
EXTRN	_sprintf:PROC
EXTRN	_msg:DWORD
EXTRN	_outstring:PROC
EXTRN	_dot:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CIsqrt:PROC
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT ??_C@_0BI@COEFBJGO@Hit?5RETURN?5to?5continue?4?$AA@
CONST	SEGMENT
??_C@_0BI@COEFBJGO@Hit?5RETURN?5to?5continue?4?$AA@ DB 'Hit RETURN to con'
	DB	'tinue.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@PMCOFJB@?5?$CF8lX?5?5?5?5?$CF18?415f?5?$CF18?415f?5?$CF18?415f@
CONST	SEGMENT
??_C@_0CC@PMCOFJB@?5?$CF8lX?5?5?5?5?$CF18?415f?5?$CF18?415f?5?$CF18?415f@ DB ' '
	DB	'%8lX    %18.15f %18.15f %18.15f', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HNPHFKMP@Facet?9edges?5and?5sides?3?5?6?$AA@
CONST	SEGMENT
??_C@_0BJ@HNPHFKMP@Facet?9edges?5and?5sides?3?5?6?$AA@ DB 'Facet-edges an'
	DB	'd sides: ', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@KMECEKLM@WARNING?$CB?5Zero?5area?5triangle?$CB?6?$AA@
CONST	SEGMENT
??_C@_0BO@KMECEKLM@WARNING?$CB?5Zero?5area?5triangle?$CB?6?$AA@ DB 'WARNI'
	DB	'NG! Zero area triangle!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3ddb7cdfd9d7bdbb
CONST	SEGMENT
__real@3ddb7cdfd9d7bdbb DQ 03ddb7cdfd9d7bdbbr	; 1e-010
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\hidim.c
CONST	ENDS
;	COMDAT _facet_force_l_hi_d
_TEXT	SEGMENT
_wee_area$ = -268					; size = 8
_force$ = -260						; size = 12
_x$ = -248						; size = 12
_s1s1$ = -236						; size = 8
_ii$89061 = -232					; size = 4
_s1s2$ = -228						; size = 8
tv710 = -224						; size = 4
_factor$ = -220						; size = 8
_f_id$GSCopy$ = -216					; size = 4
_area$ = -212						; size = 8
tv698 = -208						; size = 4
_i$ = -208						; size = 4
tv1681 = -204						; size = 4
_s2s2$ = -200						; size = 8
tv1637 = -196						; size = 4
tv704 = -196						; size = 4
_fe_id$ = -192						; size = 4
_v_id$ = -188						; size = 28
_side$ = -160						; size = 144
_e_id$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_f_id$ = 8						; size = 4
_facet_force_l_hi_d PROC				; COMDAT

; 26   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 27   :   REAL side[FACET_EDGES][MAXCOORD];
; 28   :   int i,j,k;
; 29   :   REAL area;
; 30   :   facetedge_id fe_id;
; 31   :   REAL *x[FACET_VERTS];
; 32   :   REAL *force[FACET_VERTS];
; 33   :   REAL wee_area = 0.0000000001*web.min_area;

	fld	QWORD PTR _web+1544
	mov	eax, DWORD PTR _f_id$[ebp]
	fmul	QWORD PTR __real@3ddb7cdfd9d7bdbb

; 50   :         for ( j = 0 ; j < SDIM ; j++ )

	mov	DWORD PTR _f_id$GSCopy$[ebp], eax
	fstp	QWORD PTR _wee_area$[ebp]
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN23@facet_forc

; 34   :   REAL factor,s1s1,s1s2,s2s2;
; 35   :   vertex_id v_id[MAXCOORD+1];
; 36   :   edge_id    e_id[FACET_EDGES];
; 37   : 
; 38   :   /* get side vectors */
; 39   :   fe_id = get_facet_fe(f_id);

	xor	edx, edx
	mov	DWORD PTR _fe_id$[ebp], edx
	jmp	SHORT $LN24@facet_forc
$LN23@facet_forc:
	mov	edx, DWORD PTR _web+236
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [ecx+28]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN22@facet_forc
	xor	ecx, 134217728				; 08000000H
$LN22@facet_forc:
	mov	DWORD PTR _fe_id$[ebp], ecx
	mov	edx, ecx
$LN24@facet_forc:
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR _web+104
	push	ebx
	push	esi
	lea	esi, DWORD PTR [eax+ecx+64]
	lea	eax, DWORD PTR [eax+ecx+784]
	push	edi
	mov	DWORD PTR tv698[ebp], esi
	mov	DWORD PTR tv704[ebp], eax

; 40   :   for ( i = 0 ; i < FACET_EDGES ; i++, fe_id = get_next_edge(fe_id) )

	xor	ecx, ecx
	jmp	SHORT $LN76@facet_forc
$LL55@facet_forc:
	mov	edx, DWORD PTR _fe_id$[ebp]
$LN76@facet_forc:

; 41   :      { v_id[i] = get_fe_tailv(fe_id);

	mov	esi, DWORD PTR _web+460
	mov	edi, DWORD PTR _web+124
	mov	ebx, DWORD PTR _web+216
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	lea	esi, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [esi]
	mov	eax, DWORD PTR [eax+20]
	and	edx, 134217728				; 08000000H
	xor	eax, edx
	test	eax, 134217728				; 08000000H
	je	SHORT $LN33@facet_forc
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	edi, DWORD PTR _web+636
	lea	eax, DWORD PTR [eax+edi*4]
	jmp	SHORT $LN77@facet_forc
$LN33@facet_forc:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
$LN77@facet_forc:
	mov	edi, DWORD PTR _dymem
	mov	edi, DWORD PTR [ebx+edi+304]
	mov	eax, DWORD PTR [eax+edi]
	mov	DWORD PTR _v_id$[ebp+ecx], eax

; 42   :         e_id[i] = get_fe_edge(fe_id);

	mov	edi, DWORD PTR [esi]
	mov	edi, DWORD PTR [edi+20]
	xor	edi, edx

; 43   :         x[i] = get_coord(v_id[i]);

	mov	edx, DWORD PTR _web+12
	mov	DWORD PTR _e_id$[ebp+ecx], edi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR tv698[ebp]
	mov	edx, DWORD PTR [edx]
	add	edx, eax
	mov	DWORD PTR _x$[ebp+ecx], edx

; 44   :         force[i] = get_force(v_id[i]);

	mov	edx, DWORD PTR tv704[ebp]
	mov	edx, DWORD PTR [edx]
	add	edx, eax
	mov	DWORD PTR _force$[ebp+ecx], edx
	add	ecx, 4
	test	DWORD PTR _fe_id$[ebp], 134217728	; 08000000H
	je	SHORT $LN27@facet_forc

; 40   :   for ( i = 0 ; i < FACET_EDGES ; i++, fe_id = get_next_edge(fe_id) )

	mov	eax, DWORD PTR [esi]
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN78@facet_forc
$LN27@facet_forc:
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+32]
$LN78@facet_forc:
	mov	DWORD PTR _fe_id$[ebp], eax
	cmp	ecx, 12					; 0000000cH
	jl	$LL55@facet_forc

; 45   :      }
; 46   : 
; 47   :   /* calculate sides and product matrix */ 
; 48   :   for ( i = 0 ; i < FACET_EDGES ; i++ )

	mov	esi, DWORD PTR _web+616
	xor	ecx, ecx
	lea	edx, DWORD PTR _side$[ebp+8]
	mov	DWORD PTR _i$[ebp], ecx
	mov	DWORD PTR tv1637[ebp], ecx
	mov	DWORD PTR tv1681[ebp], edx
$LL56@facet_forc:

; 49   :      { int ii = (i+1)%FACET_EDGES;

	lea	eax, DWORD PTR [ecx+1]
	mov	DWORD PTR tv710[ebp], eax
	cdq
	mov	edi, 3
	idiv	edi
	mov	ebx, edx

; 50   :         for ( j = 0 ; j < SDIM ; j++ )

	xor	edx, edx
	mov	DWORD PTR _ii$89061[ebp], ebx
	cmp	esi, 4
	jl	SHORT $LC53@facet_forc

; 49   :      { int ii = (i+1)%FACET_EDGES;

	mov	edx, DWORD PTR _x$[ebp+ecx*4]
	mov	ebx, DWORD PTR _x$[ebp+ebx*4]
	mov	ecx, DWORD PTR tv1681[ebp]
	add	esi, -4					; fffffffcH
	lea	edi, DWORD PTR [ebx+24]

; 51   :           side[i][j] = x[ii][j] - x[i][j];

	sub	ebx, edx
	shr	esi, 2
	inc	esi
	lea	eax, DWORD PTR [edx+8]
	lea	edx, DWORD PTR [esi*4]
	npad	3
$LL54@facet_forc:
	fld	QWORD PTR [edi-24]
	add	eax, 32					; 00000020H
	fsub	QWORD PTR [eax-40]
	add	edi, 32					; 00000020H
	add	ecx, 32					; 00000020H
	dec	esi
	fstp	QWORD PTR [ecx-40]
	fld	QWORD PTR [ebx+eax-32]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [ecx-32]
	fld	QWORD PTR [edi-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [ecx-24]
	fld	QWORD PTR [edi-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [ecx-16]
	jne	SHORT $LL54@facet_forc

; 49   :      { int ii = (i+1)%FACET_EDGES;

	mov	esi, DWORD PTR _web+616
	mov	ebx, DWORD PTR _ii$89061[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
$LC53@facet_forc:

; 50   :         for ( j = 0 ; j < SDIM ; j++ )

	cmp	edx, esi
	jge	SHORT $LN15@facet_forc
	mov	ecx, DWORD PTR _x$[ebp+ecx*4]
	mov	ebx, DWORD PTR _x$[ebp+ebx*4]
	mov	edi, DWORD PTR tv1637[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	sub	ebx, ecx
	add	edi, edx
	mov	ecx, esi
	lea	edi, DWORD PTR _side$[ebp+edi*8]
	sub	ecx, edx
	npad	3
$LC13@facet_forc:

; 51   :           side[i][j] = x[ii][j] - x[i][j];

	fld	QWORD PTR [ebx+eax]
	add	eax, 8
	fsub	QWORD PTR [eax-8]
	add	edi, 8
	dec	ecx
	fstp	QWORD PTR [edi-8]
	jne	SHORT $LC13@facet_forc
$LN15@facet_forc:

; 45   :      }
; 46   : 
; 47   :   /* calculate sides and product matrix */ 
; 48   :   for ( i = 0 ; i < FACET_EDGES ; i++ )

	mov	eax, DWORD PTR tv1637[ebp]
	mov	ecx, DWORD PTR tv710[ebp]
	add	DWORD PTR tv1681[ebp], 48		; 00000030H
	add	eax, 6
	mov	DWORD PTR _i$[ebp], ecx
	mov	DWORD PTR tv1637[ebp], eax
	cmp	eax, 18					; 00000012H
	jl	$LL56@facet_forc

; 52   :      } 
; 53   :   s1s1 = SDIM_dot(side[0],side[0]);

	lea	eax, DWORD PTR _side$[ebp]
	push	esi
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fstp	QWORD PTR _s1s1$[ebp]

; 54   :   s1s2 = SDIM_dot(side[0],side[1]);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _side$[ebp+48]
	push	eax
	lea	ecx, DWORD PTR _side$[ebp]
	push	ecx
	call	_dot
	fstp	QWORD PTR _s1s2$[ebp]

; 55   :   s2s2 = SDIM_dot(side[1],side[1]);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _side$[ebp+48]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fst	QWORD PTR _s2s2$[ebp]

; 56   :   area = sqrt(s1s1*s2s2 - s1s2*s1s2)/2;

	fmul	QWORD PTR _s1s1$[ebp]
	add	esp, 36					; 00000024H
	fld	QWORD PTR _s1s2$[ebp]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000
	fst	QWORD PTR _area$[ebp]

; 57   : 
; 58   :   /* an error check, and accommodation for possibly deliberately
; 59   :       degenerate triangles on boundary */
; 60   :   if ( area < wee_area )

	fld	QWORD PTR _wee_area$[ebp]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN10@facet_forc

; 61   :      { facetedge_id ffe;
; 62   :           
; 63   :         ffe = fe_id;

	mov	esi, DWORD PTR _fe_id$[ebp]
	fstp	ST(0)

; 64   :         outstring("WARNING! Zero area triangle!\n");

	push	OFFSET ??_C@_0BO@KMECEKLM@WARNING?$CB?5Zero?5area?5triangle?$CB?6?$AA@
	call	_outstring

; 65   :         outstring("Facet-edges and sides: \n");

	push	OFFSET ??_C@_0BJ@HNPHFKMP@Facet?9edges?5and?5sides?3?5?6?$AA@
	call	_outstring
	add	esp, 8
	lea	edi, DWORD PTR _side$[ebp+8]
	mov	ebx, 3
	npad	6

; 66   :         for ( i = 0 ; i < FACET_EDGES ; i++, ffe = get_next_edge(ffe) )

$LL38@facet_forc:

; 67   :         { 
; 68   :           sprintf(msg," %8lX    %18.15f %18.15f %18.15f\n",(unsigned long)ffe,
; 69   :                   (DOUBLE)side[i][0],(DOUBLE)side[i][1],(DOUBLE)side[i][2]);

	fld	QWORD PTR [edi+8]
	mov	edx, DWORD PTR _msg
	sub	esp, 24					; 00000018H
	fstp	QWORD PTR [esp+16]
	fld	QWORD PTR [edi]
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR [edi-8]
	fstp	QWORD PTR [esp]
	push	esi
	push	OFFSET ??_C@_0CC@PMCOFJB@?5?$CF8lX?5?5?5?5?$CF18?415f?5?$CF18?415f?5?$CF18?415f@
	push	edx
	call	_sprintf

; 70   :           outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 40					; 00000028H
	add	edi, 48					; 00000030H
	test	esi, 134217728				; 08000000H
	je	SHORT $LN39@facet_forc

; 66   :         for ( i = 0 ; i < FACET_EDGES ; i++, ffe = get_next_edge(ffe) )

	mov	ecx, DWORD PTR _web+460
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	esi, DWORD PTR [edx+28]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN50@facet_forc
$LN39@facet_forc:
	mov	eax, DWORD PTR _web+460
	and	esi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+esi*4]
	mov	esi, DWORD PTR [ecx+32]
$LN50@facet_forc:
	dec	ebx
	jne	SHORT $LL38@facet_forc

; 71   :         }
; 72   : 
; 73   :         prompt("Hit RETURN to continue.",msg,msgmax);

	mov	edx, DWORD PTR _msgmax
	mov	eax, DWORD PTR _msg
	push	edx
	push	eax
	push	OFFSET ??_C@_0BI@COEFBJGO@Hit?5RETURN?5to?5continue?4?$AA@
	call	_prompt
	fld	QWORD PTR _area$[ebp]
	add	esp, 12					; 0000000cH
$LN10@facet_forc:

; 74   :      }
; 75   : 
; 76   :   set_facet_area(f_id,area);  /* half of parallelogram magnitude */

	mov	eax, DWORD PTR _f_id$GSCopy$[ebp]
	mov	ecx, DWORD PTR _web+236
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	edx, DWORD PTR [eax+ecx]
	fst	QWORD PTR [edx+40]

; 77   :   if ( get_fattr(f_id) & DENSITY )

	mov	ecx, DWORD PTR _web+236
	mov	ecx, DWORD PTR [eax+ecx]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 16					; 00000010H
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN6@facet_forc

; 78   :      factor = get_facet_density(f_id)/area/4;

	fdivr	QWORD PTR [ecx+32]
	fmul	QWORD PTR __real@3fd0000000000000
	jmp	SHORT $LN79@facet_forc
$LN6@facet_forc:

; 79   :   else factor = 1/area/4;

	fdivr	QWORD PTR __real@3fd0000000000000
$LN79@facet_forc:

; 80   : 
; 81   :   if ( ((square_curvature_flag | mean_curv_int_flag) & EVALUATE)
; 82   :             && !kusner_flag && !conf_edge_curv_flag ) 

	mov	edx, DWORD PTR _mean_curv_int_flag
	fst	QWORD PTR _factor$[ebp]
	or	edx, DWORD PTR _square_curvature_flag
	test	dl, 2
	je	SHORT $LN4@facet_forc
	cmp	DWORD PTR _kusner_flag, 0
	jne	SHORT $LN4@facet_forc
	cmp	DWORD PTR _conf_edge_curv_flag, 0
	jne	SHORT $LN4@facet_forc

; 83   :      sqcurve_force(v_id,e_id,side);

	lea	eax, DWORD PTR _side$[ebp]
	fstp	ST(0)
	push	eax
	lea	ecx, DWORD PTR _e_id$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v_id$[ebp]
	push	edx
	call	_sqcurve_force
	fld	QWORD PTR _factor$[ebp]
	add	esp, 12					; 0000000cH
$LN4@facet_forc:

; 84   : 
; 85   :   /* force on each vertex */
; 86   : 
; 87   :   for ( k = 0 ; k < SDIM ; k++ )

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	$LN72@facet_forc
	mov	edx, DWORD PTR _force$[ebp]
	fld	QWORD PTR _s2s2$[ebp]
	mov	esi, DWORD PTR _force$[ebp+4]
	fld	QWORD PTR _s1s2$[ebp]
	mov	edi, DWORD PTR _force$[ebp+8]
	fld	QWORD PTR _s1s1$[ebp]
	lea	ecx, DWORD PTR _side$[ebp]
	sub	edx, ecx
	sub	esi, ecx
	sub	edi, ecx
$LN3@facet_forc:

; 88   :      { REAL temp1,temp2;
; 89   :         temp1 = (side[0][k]*s2s2 - side[1][k]*s1s2)*factor;

	fld	QWORD PTR _side$[ebp+eax*8]
	lea	ecx, DWORD PTR [edx+eax*8]
	fmul	ST(0), ST(3)
	lea	ecx, DWORD PTR _side$[ebp+ecx]
	fld	ST(2)
	fmul	QWORD PTR _side$[ebp+eax*8+48]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)

; 90   :         temp2 = (side[1][k]*s1s1 - side[0][k]*s1s2)*factor;

	fld	ST(1)
	fmul	QWORD PTR _side$[ebp+eax*8+48]
	fld	QWORD PTR _side$[ebp+eax*8]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(5)

; 91   :         force[0][k] += temp1;

	fld	ST(1)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	lea	ecx, DWORD PTR [esi+eax*8]
	lea	ecx, DWORD PTR _side$[ebp+ecx]

; 92   :         force[1][k] -= temp1 - temp2;

	fsub	ST(1), ST(0)
	fld	QWORD PTR [ecx]
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [ecx]
	lea	ecx, DWORD PTR [edi+eax*8]
	lea	ecx, DWORD PTR _side$[ebp+ecx]

; 93   :         force[2][k] -= temp2;

	fsubr	QWORD PTR [ecx]
	inc	eax
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN3@facet_forc

; 84   : 
; 85   :   /* force on each vertex */
; 86   : 
; 87   :   for ( k = 0 ; k < SDIM ; k++ )

	fstp	ST(3)
	fstp	ST(0)
	fstp	ST(1)
$LN72@facet_forc:

; 94   :      }
; 95   : } // end facet_force_l_hi_d()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(0)
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_force_l_hi_d ENDP
_TEXT	ENDS
PUBLIC	_f_id$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_facet_energy_l_hi_d
EXTRN	_sqcurve_energy:PROC
; Function compile flags: /Ogtp
;	COMDAT _facet_energy_l_hi_d
_TEXT	SEGMENT
_x$ = -220						; size = 12
_f_id$GSCopy$ = -208					; size = 4
_s1s2$ = -204						; size = 8
_ii$89113 = -200					; size = 4
_s1s1$ = -196						; size = 8
tv573 = -192						; size = 4
_i$ = -188						; size = 4
tv1513 = -184						; size = 4
tv1405 = -180						; size = 4
_side$ = -176						; size = 144
_v_id$ = -32						; size = 28
__$ArrayPad$ = -4					; size = 4
_f_id$ = 8						; size = 4
_facet_energy_l_hi_d PROC				; COMDAT

; 107  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _f_id$[ebp]

; 126  :        for ( j = 0 ; j < SDIM ; j++ )

	mov	DWORD PTR _f_id$GSCopy$[ebp], eax
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN15@facet_ener

; 108  :   REAL side[FACET_EDGES][MAXCOORD];
; 109  :   int i,j;
; 110  :   REAL energy;
; 111  :   facetedge_id fe_id;
; 112  :   REAL *x[FACET_VERTS];
; 113  :   REAL s1s1,s1s2,s2s2;
; 114  :   vertex_id v_id[MAXCOORD+1];
; 115  : 
; 116  :   /* get side vectors */
; 117  :   fe_id = get_facet_fe(f_id);

	xor	ecx, ecx
	jmp	SHORT $LN14@facet_ener
$LN15@facet_ener:
	mov	edx, DWORD PTR _web+236
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [ecx+28]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN14@facet_ener
	xor	ecx, 134217728				; 08000000H
$LN14@facet_ener:
	push	ebx
	push	esi
	mov	esi, DWORD PTR _dymem
	push	edi

; 118  :   for ( i = 0 ; i < FACET_EDGES ; i++, fe_id = get_next_edge(fe_id) )

	xor	edx, edx
$LL37@facet_ener:

; 119  :      { v_id[i] = get_fe_tailv(fe_id);

	mov	edi, DWORD PTR _web+460
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	lea	ebx, DWORD PTR [edi+eax*4]
	mov	edi, DWORD PTR [ebx]
	mov	eax, ecx
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edi+20]
	mov	edi, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN25@facet_ener
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	edi, DWORD PTR _web+636
	lea	eax, DWORD PTR [eax+edi*4]
	jmp	SHORT $LN42@facet_ener
$LN25@facet_ener:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
$LN42@facet_ener:
	mov	edi, DWORD PTR _web+216
	mov	edi, DWORD PTR [edi+esi+304]
	mov	eax, DWORD PTR [eax+edi]

; 120  :        x[i] = get_coord(v_id[i]);

	mov	edi, DWORD PTR _web+12
	mov	DWORD PTR _v_id$[ebp+edx], eax
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	edi, DWORD PTR _web+104
	add	eax, DWORD PTR [edi+esi+64]
	add	edx, 4
	mov	DWORD PTR _x$[ebp+edx-4], eax
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN19@facet_ener

; 118  :   for ( i = 0 ; i < FACET_EDGES ; i++, fe_id = get_next_edge(fe_id) )

	mov	ecx, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [ecx+28]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN31@facet_ener
$LN19@facet_ener:
	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [eax+32]
$LN31@facet_ener:
	cmp	edx, 12					; 0000000cH
	jl	$LL37@facet_ener

; 121  :      }
; 122  : 
; 123  :   /* calculate sides and product matrix */ 
; 124  :   for ( i = 0 ; i < FACET_EDGES ; i++ )

	mov	esi, DWORD PTR _web+616
	xor	ecx, ecx
	lea	edx, DWORD PTR _side$[ebp+8]
	mov	DWORD PTR _i$[ebp], ecx
	mov	DWORD PTR tv1405[ebp], ecx
	mov	DWORD PTR tv1513[ebp], edx
$LL38@facet_ener:

; 125  :      { int ii = (i+1)%FACET_EDGES;

	lea	eax, DWORD PTR [ecx+1]
	mov	DWORD PTR tv573[ebp], eax
	cdq
	mov	edi, 3
	idiv	edi
	mov	ebx, edx

; 126  :        for ( j = 0 ; j < SDIM ; j++ )

	xor	edx, edx
	mov	DWORD PTR _ii$89113[ebp], ebx
	cmp	esi, 4
	jl	SHORT $LC35@facet_ener

; 125  :      { int ii = (i+1)%FACET_EDGES;

	mov	edx, DWORD PTR _x$[ebp+ecx*4]
	mov	ebx, DWORD PTR _x$[ebp+ebx*4]
	mov	ecx, DWORD PTR tv1513[ebp]
	add	esi, -4					; fffffffcH
	lea	edi, DWORD PTR [ebx+24]

; 127  :           side[i][j] = x[ii][j] - x[i][j];

	sub	ebx, edx
	shr	esi, 2
	inc	esi
	lea	eax, DWORD PTR [edx+8]
	lea	edx, DWORD PTR [esi*4]
	npad	6
$LL36@facet_ener:
	fld	QWORD PTR [edi-24]
	add	eax, 32					; 00000020H
	fsub	QWORD PTR [eax-40]
	add	edi, 32					; 00000020H
	add	ecx, 32					; 00000020H
	dec	esi
	fstp	QWORD PTR [ecx-40]
	fld	QWORD PTR [ebx+eax-32]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [ecx-32]
	fld	QWORD PTR [edi-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [ecx-24]
	fld	QWORD PTR [edi-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [ecx-16]
	jne	SHORT $LL36@facet_ener

; 125  :      { int ii = (i+1)%FACET_EDGES;

	mov	ebx, DWORD PTR _ii$89113[ebp]
	mov	esi, DWORD PTR _web+616
	mov	ecx, DWORD PTR _i$[ebp]
$LC35@facet_ener:

; 126  :        for ( j = 0 ; j < SDIM ; j++ )

	cmp	edx, esi
	jge	SHORT $LN7@facet_ener
	mov	ecx, DWORD PTR _x$[ebp+ecx*4]
	mov	ebx, DWORD PTR _x$[ebp+ebx*4]
	mov	edi, DWORD PTR tv1405[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	sub	ebx, ecx
	add	edi, edx
	mov	ecx, esi
	lea	edi, DWORD PTR _side$[ebp+edi*8]
	sub	ecx, edx
	npad	3
$LC5@facet_ener:

; 127  :           side[i][j] = x[ii][j] - x[i][j];

	fld	QWORD PTR [ebx+eax]
	add	eax, 8
	fsub	QWORD PTR [eax-8]
	add	edi, 8
	dec	ecx
	fstp	QWORD PTR [edi-8]
	jne	SHORT $LC5@facet_ener
$LN7@facet_ener:

; 121  :      }
; 122  : 
; 123  :   /* calculate sides and product matrix */ 
; 124  :   for ( i = 0 ; i < FACET_EDGES ; i++ )

	mov	eax, DWORD PTR tv1405[ebp]
	mov	ecx, DWORD PTR tv573[ebp]
	add	DWORD PTR tv1513[ebp], 48		; 00000030H
	add	eax, 6
	mov	DWORD PTR _i$[ebp], ecx
	mov	DWORD PTR tv1405[ebp], eax
	cmp	eax, 18					; 00000012H
	jl	$LL38@facet_ener

; 128  :      } 
; 129  :   s1s1 = SDIM_dot(side[0],side[0]);

	lea	eax, DWORD PTR _side$[ebp]
	push	esi
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fstp	QWORD PTR _s1s1$[ebp]

; 130  :   s1s2 = SDIM_dot(side[0],side[1]);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _side$[ebp+48]
	push	eax
	lea	ecx, DWORD PTR _side$[ebp]
	push	ecx
	call	_dot
	fstp	QWORD PTR _s1s2$[ebp]

; 131  :   s2s2 = SDIM_dot(side[1],side[1]);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _side$[ebp+48]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot

; 132  :   energy = sqrt(s1s1*s2s2 - s1s2*s1s2)/2;  /* half of parallelogram */

	fmul	QWORD PTR _s1s1$[ebp]
	fld	QWORD PTR _s1s2$[ebp]
	add	esp, 36					; 00000024H
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000

; 133  :   web.total_area    += energy;

	fld	QWORD PTR _web+992

; 134  :   set_facet_area(f_id,energy);  

	mov	eax, DWORD PTR _f_id$GSCopy$[ebp]
	mov	edx, DWORD PTR _web+236
	and	eax, 134217727				; 07ffffffH
	fadd	ST(0), ST(1)
	add	eax, eax
	add	eax, eax
	fstp	QWORD PTR _web+992
	mov	ecx, DWORD PTR [eax+edx]
	pop	edi
	fst	QWORD PTR [ecx+40]

; 135  : 
; 136  :   if ( get_fattr(f_id) & DENSITY )

	mov	edx, DWORD PTR _web+236
	mov	ecx, DWORD PTR [eax+edx]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 16					; 00000010H
	xor	edx, edx
	or	eax, edx
	pop	esi
	pop	ebx
	je	SHORT $LN2@facet_ener

; 137  :          energy *= get_facet_density(f_id);

	fmul	QWORD PTR [ecx+32]
$LN2@facet_ener:

; 138  : 
; 139  :   web.total_energy    += energy;
; 140  : 
; 141  :   /* do square curvature if wanted */
; 142  :   if ( ((square_curvature_flag | mean_curv_int_flag) & EVALUATE )
; 143  :             && !kusner_flag && !conf_edge_curv_flag )

	mov	eax, DWORD PTR _mean_curv_int_flag
	fadd	QWORD PTR _web+1240
	or	eax, DWORD PTR _square_curvature_flag
	fstp	QWORD PTR _web+1240
	test	al, 2
	je	SHORT $LN1@facet_ener
	cmp	DWORD PTR _kusner_flag, edx
	jne	SHORT $LN1@facet_ener
	cmp	DWORD PTR _conf_edge_curv_flag, edx
	jne	SHORT $LN1@facet_ener

; 144  :      sqcurve_energy(v_id,side);

	lea	ecx, DWORD PTR _side$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v_id$[ebp]
	push	edx
	call	_sqcurve_energy
	add	esp, 8
$LN1@facet_ener:

; 145  : 
; 146  :     
; 147  : } // end facet_energy_l_hi_d()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_energy_l_hi_d ENDP
_TEXT	ENDS
END
