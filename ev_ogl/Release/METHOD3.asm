; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\METHOD3.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_sign1
PUBLIC	_sign2
_DATA	SEGMENT
COMM	_gfaafg_coeff:QWORD
COMM	_gfagfa_coeff:QWORD
COMM	_gfa_2_coeff:QWORD
COMM	_fgagfa_coeff:QWORD
COMM	_gga_coeff:QWORD
_sign1	DD	0ffffffffH
	DD	01H
	DD	00H
_sign2	DD	0ffffffffH
	DD	00H
	DD	01H
_e	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	03ff0000000000000r		; 1
	DQ	00000000000000000r		; 0
	DQ	0bff0000000000000r		; -1
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	0bff0000000000000r		; -1
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	03ff0000000000000r		; 1
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	03ff0000000000000r		; 1
	DQ	00000000000000000r		; 0
	DQ	0bff0000000000000r		; -1
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
_DATA	ENDS
PUBLIC	_get_facet_body
EXTRN	_dymem:DWORD
EXTRN	_web:BYTE
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
;	COMDAT _get_facet_body
_TEXT	SEGMENT
_f_id$ = 8						; size = 4
_get_facet_body PROC					; COMDAT

; 250  : {

	push	ebp
	mov	ebp, esp

; 251  :   if ( web.skel[BODY].count == 0 ) return NULLID;

	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN4@get_facet_
$LN7@get_facet_:
	xor	eax, eax

; 255  : }

	pop	ebp
	ret	0
$LN4@get_facet_:

; 252  :   if ( !valid_id(f_id) ) return NULLID;

	mov	eax, DWORD PTR _f_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN7@get_facet_

; 253  :   if ( inverted(f_id) ) return F_ELID(f_id,F_BODY_LIST_ATTR)[1];

	mov	ecx, DWORD PTR _web+236
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_facet_
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax+4]

; 255  : }

	pop	ebp
	ret	0
$LN2@get_facet_:

; 254  :   else  return F_ELID(f_id,F_BODY_LIST_ATTR)[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax]

; 255  : }

	pop	ebp
	ret	0
_get_facet_body ENDP
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	_get_body_density
EXTRN	__fltused:DWORD
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _get_body_density
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_density PROC					; COMDAT

; 305  :     { return  ( valid_id(b_id) ?  bptr(b_id)->density : 0.0 ) ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_d
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+344]
	pop	ebp
	ret	0
$LN3@get_body_d:
	fldz
	pop	ebp
	ret	0
_get_body_density ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EC@CPMJBAKJ@facet_2form_integral?5method?5only@ ; `string'
PUBLIC	??_C@_0DB@NNJLNGMA@facet_2form_integral?5method?5only@ ; `string'
PUBLIC	_facet_2form_integral_init
EXTRN	_kb_error:PROC
;	COMDAT ??_C@_0EC@CPMJBAKJ@facet_2form_integral?5method?5only@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\method3.c
CONST	SEGMENT
??_C@_0EC@CPMJBAKJ@facet_2form_integral?5method?5only@ DB 'facet_2form_in'
	DB	'tegral method only for LINEAR and LAGRANGE models.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@NNJLNGMA@facet_2form_integral?5method?5only@
CONST	SEGMENT
??_C@_0DB@NNJLNGMA@facet_2form_integral?5method?5only@ DB 'facet_2form_in'
	DB	'tegral method only for 2D facets.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _facet_2form_integral_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_facet_2form_integral_init PROC				; COMDAT

; 38   :   if ( web.dimension != 2 )

	cmp	DWORD PTR _web+620, 2
	je	SHORT $LN2@facet_2for

; 39   :      kb_error(1778,"facet_2form_integral method only for 2D facets.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DB@NNJLNGMA@facet_2form_integral?5method?5only@
	push	1778					; 000006f2H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN2@facet_2for:

; 40   : 
; 41   :   if ( web.modeltype == QUADRATIC )

	cmp	DWORD PTR _web+628, 2
	jne	SHORT $LN1@facet_2for

; 42   :      kb_error(1779,"facet_2form_integral method only for LINEAR and LAGRANGE models.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0EC@CPMJBAKJ@facet_2form_integral?5method?5only@
	push	1779					; 000006f3H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@facet_2for:

; 43   : 
; 44   : } // end facet_2form_integral_init()

	ret	0
_facet_2form_integral_init ENDP
_TEXT	ENDS
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@bff0000000000000
PUBLIC	_facet_2form_integral_lagrange
EXTRN	_eval:PROC
EXTRN	_meth_inst_list:DWORD
EXTRN	_gauss_lagrange:BYTE
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _facet_2form_integral_lagrange
_TEXT	SEGMENT
_sign$ = -40						; size = 8
_value$ = -32						; size = 8
_mi$ = -24						; size = 4
tv529 = -20						; size = 4
_m$ = -16						; size = 4
tv527 = -12						; size = 4
_gl$ = -8						; size = 4
tv507 = -4						; size = 4
_k$ = 8							; size = 4
_f_info$ = 8						; size = 4
_facet_2form_integral_lagrange PROC			; COMDAT

; 240  : { int m,i,j,k;

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 241  :   REAL value=0.0,form;
; 242  :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	ecx, DWORD PTR _web+236
	fldz
	push	ebx
	fst	QWORD PTR _value$[ebp]
	push	esi
	push	edi
	mov	edi, DWORD PTR _f_info$[ebp]
	mov	eax, DWORD PTR [edi]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	xor	ebx, ebx
	or	eax, ecx
	je	SHORT $LN12@facet_2for@2
	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN42@facet_2for@2
$LN12@facet_2for@2:
	fld1
$LN42@facet_2for@2:

; 243  :   int dim = web.dimension;
; 244  :   struct gauss_lag *gl = &gauss_lagrange[dim][web.gauss2D_order];

	mov	esi, DWORD PTR _web+1596
	fstp	QWORD PTR _sign$[ebp]
	mov	edx, DWORD PTR _web+620

; 245  :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [edi+8]
	shl	esi, 5
	add	esi, DWORD PTR _gauss_lagrange[edx*4]
	cdq
	mov	ecx, eax

; 246  : 
; 247  :   for ( i = 0, k = 0 ; i < SDIM ; i++ )

	mov	eax, DWORD PTR _web+616
	xor	ecx, edx
	sub	ecx, edx
	imul	ecx, 2928				; 00000b70H
	add	ecx, DWORD PTR _meth_inst_list
	mov	DWORD PTR _gl$[ebp], esi
	mov	DWORD PTR _mi$[ebp], ecx
	mov	DWORD PTR _k$[ebp], ebx
	cmp	eax, ebx
	jle	$LN7@facet_2for@2

; 243  :   int dim = web.dimension;
; 244  :   struct gauss_lag *gl = &gauss_lagrange[dim][web.gauss2D_order];

	mov	DWORD PTR tv527[ebp], ebx
	mov	ebx, 1
	mov	DWORD PTR tv529[ebp], ebx
$LN21@facet_2for@2:

; 248  :      for ( j = i+1 ; j < SDIM ; j++,k++ )

	cmp	ebx, eax
	jge	$LN8@facet_2for@2
	mov	edx, DWORD PTR [esi+4]
	mov	esi, DWORD PTR _k$[ebp]
	lea	esi, DWORD PTR [ecx+esi*4+232]
	mov	DWORD PTR tv507[ebp], esi
$LN6@facet_2for@2:

; 249  :      { for ( m = 0 ; m < gl->gnumpts ; m++ )

	xor	esi, esi
	mov	DWORD PTR _m$[ebp], esi
	test	edx, edx
	jle	SHORT $LN5@facet_2for@2
	npad	4
$LL40@facet_2for@2:

; 250  :        {
; 251  :           f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	mov	ecx, DWORD PTR [edi+1268]
	fstp	ST(0)
	mov	edx, DWORD PTR [ecx+esi*4]
	fild	DWORD PTR _m$[ebp]
	add	eax, eax

; 252  :           form = gl->gausswt[m]*
; 253  :              eval(mi->expr[k],f_info->gauss_pt[m],f_info->id,NULL);

	push	0
	fstp	QWORD PTR [edx+eax*8]
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edi+1268]
	mov	edx, DWORD PTR [ecx+esi*4]
	push	eax
	mov	eax, DWORD PTR tv507[ebp]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	ecx
	call	_eval
	mov	edx, DWORD PTR _gl$[ebp]
	mov	eax, DWORD PTR [edx+12]
	fmul	QWORD PTR [eax+esi*8]

; 254  :           value += (f_info->sides[m][0][i]*f_info->sides[m][1][j]
; 255  :                  - f_info->sides[m][0][j]*f_info->sides[m][1][i])*form;

	mov	ecx, DWORD PTR [edi+1276]
	mov	eax, DWORD PTR [ecx+esi*4]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	fld	QWORD PTR [ecx+ebx*8]
	mov	edx, DWORD PTR tv527[ebp]
	fmul	QWORD PTR [edx+eax]
	inc	esi
	fld	QWORD PTR [eax+ebx*8]
	mov	eax, DWORD PTR _web+616
	fmul	QWORD PTR [edx+ecx]
	mov	edx, DWORD PTR _gl$[ebp]
	mov	edx, DWORD PTR [edx+4]
	add	esp, 16					; 00000010H
	fsubp	ST(1), ST(0)
	mov	DWORD PTR _m$[ebp], esi
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR _value$[ebp]
	fst	QWORD PTR _value$[ebp]
	cmp	esi, edx
	jl	SHORT $LL40@facet_2for@2

; 249  :      { for ( m = 0 ; m < gl->gnumpts ; m++ )

	mov	ecx, DWORD PTR _mi$[ebp]
$LN5@facet_2for@2:

; 248  :      for ( j = i+1 ; j < SDIM ; j++,k++ )

	inc	DWORD PTR _k$[ebp]
	add	DWORD PTR tv507[ebp], 4
	inc	ebx
	cmp	ebx, eax
	jl	$LN6@facet_2for@2
	mov	ebx, DWORD PTR tv529[ebp]
	mov	esi, DWORD PTR _gl$[ebp]
$LN8@facet_2for@2:

; 246  : 
; 247  :   for ( i = 0, k = 0 ; i < SDIM ; i++ )

	add	DWORD PTR tv527[ebp], 8
	inc	ebx
	lea	edx, DWORD PTR [ebx-1]
	mov	DWORD PTR tv529[ebp], ebx
	cmp	edx, eax
	jl	$LN21@facet_2for@2
$LN7@facet_2for@2:

; 256  :         }
; 257  :      }
; 258  :   return sign*value/2;  /* 2 is triangle factor */

	fmul	QWORD PTR _sign$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	fmul	QWORD PTR __real@3fe0000000000000

; 259  : } // end facet_2form_integral_lagrange()

	mov	esp, ebp
	pop	ebp
	ret	0
_facet_2form_integral_lagrange ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_facet_2form_integral_lagrange_grad
EXTRN	_eval_all:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogtp
;	COMDAT _facet_2form_integral_lagrange_grad
_TEXT	SEGMENT
_weight$89271 = -2108					; size = 8
_value$ = -2100						; size = 8
_sign$ = -2092						; size = 8
_mi$ = -2084						; size = 4
tv1647 = -2080						; size = 4
_ctrl$ = -2076						; size = 4
tv2010 = -2072						; size = 4
tv2074 = -2068						; size = 4
tv2076 = -2064						; size = 4
tv2176 = -2060						; size = 4
tv930 = -2060						; size = 4
_gl$ = -2056						; size = 4
_j$ = -2052						; size = 4
tv2743 = -2048						; size = 4
tv2002 = -2048						; size = 4
tv2745 = -2044						; size = 4
tv1869 = -2044						; size = 4
tv2593 = -2040						; size = 4
_k$ = -2040						; size = 4
tv1062 = -2036						; size = 4
_m$ = -2036						; size = 4
tv2142 = -2032						; size = 4
tv954 = -2032						; size = 4
tv894 = -2032						; size = 4
tv885 = -2032						; size = 4
tv2299 = -2028						; size = 4
tv2012 = -2028						; size = 4
tv252 = -2028						; size = 4
tv2577 = -2024						; size = 4
tv2004 = -2024						; size = 4
tv1060 = -2024						; size = 4
_derivs$ = -2020					; size = 1728
_form$ = -292						; size = 288
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_facet_2form_integral_lagrange_grad PROC		; COMDAT

; 270  : { int m,n,i,j,k;

	push	ebp
	mov	ebp, esp
	sub	esp, 2108				; 0000083cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 271  :   REAL value = 0.0;
; 272  :   REAL form[MAXCOORD][MAXCOORD]; /* as antisymmetric matrix */
; 273  :   REAL derivs[MAXCOORD][MAXCOORD][MAXCOORD]; /* coord is last index */
; 274  :   REAL sum;
; 275  :   int dim = web.dimension;
; 276  :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	edx, DWORD PTR _web+236
	fldz
	mov	ecx, DWORD PTR _web+620
	fld	ST(0)
	push	ebx
	fst	QWORD PTR _value$[ebp]
	push	esi
	mov	esi, DWORD PTR _f_info$[ebp]
	mov	eax, DWORD PTR [esi]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	edx, edx
	or	eax, edx
	push	edi
	je	SHORT $LN33@facet_2for@3
	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN114@facet_2for@3
$LN33@facet_2for@3:
	fld1
$LN114@facet_2for@3:

; 278  :   int ctrl = web.skel[FACET].ctrlpts;

	mov	eax, DWORD PTR _web+232
	fstp	QWORD PTR _sign$[ebp]
	mov	ebx, DWORD PTR _web+1596
	mov	DWORD PTR _ctrl$[ebp], eax

; 279  :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [esi+8]
	cdq
	xor	eax, edx
	sub	eax, edx

; 280  : 
; 281  :   for ( i = 0 ; i < SDIM  ; i++ ) 

	mov	edx, DWORD PTR _web+616
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list
	shl	ebx, 5
	add	ebx, DWORD PTR _gauss_lagrange[ecx*4]
	mov	DWORD PTR _mi$[ebp], eax
	mov	DWORD PTR _gl$[ebp], ebx
	test	edx, edx
	jle	SHORT $LN28@facet_2for@3

; 277  :   struct gauss_lag *gl = &gauss_lagrange[dim][web.gauss2D_order];

	lea	ecx, DWORD PTR _derivs$[ebp]
	lea	eax, DWORD PTR _form$[ebp]
	mov	DWORD PTR tv1060[ebp], ecx
	mov	DWORD PTR tv1062[ebp], eax
	mov	DWORD PTR tv252[ebp], edx
$LN77@facet_2for@3:

; 282  :   { form[i][i] = 0.0;

	mov	ecx, DWORD PTR tv1062[ebp]
	fxch	ST(1)
	mov	edi, DWORD PTR tv1060[ebp]
	fst	QWORD PTR [ecx]
	add	DWORD PTR tv1062[ebp], 56		; 00000038H
	fxch	ST(1)
	add	DWORD PTR tv1060[ebp], 336		; 00000150H
	lea	ecx, DWORD PTR [edx*8]
	shr	ecx, 2
	xor	eax, eax
	dec	DWORD PTR tv252[ebp]
	rep stosd
	jne	SHORT $LN77@facet_2for@3
$LN28@facet_2for@3:

; 283  :     for ( n = 0 ; n < SDIM ;n++ ) derivs[i][i][n] = 0.0;
; 284  :   }
; 285  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	xor	edi, edi
	mov	DWORD PTR _m$[ebp], edi
	cmp	DWORD PTR [ebx+4], edi
	jle	$LN79@facet_2for@3
	jmp	SHORT $LN24@facet_2for@3
$LN59@facet_2for@3:
	mov	ebx, eax
$LN24@facet_2for@3:

; 286  :   { REAL weight = sign*gl->gausswt[m]/2;

	mov	eax, DWORD PTR [ebx+12]
	fld	QWORD PTR [eax+edi*8]

; 287  :     f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	mov	ecx, DWORD PTR [esi+1268]
	fmul	QWORD PTR _sign$[ebp]
	mov	eax, DWORD PTR [ecx+edi*4]
	add	edx, edx

; 288  :     for ( i = 0, k = 0 ; i < SDIM ; i++ ) 

	xor	ebx, ebx
	fmul	QWORD PTR __real@3fe0000000000000
	mov	DWORD PTR _k$[ebp], ebx
	fst	QWORD PTR _weight$89271[ebp]
	fild	DWORD PTR _m$[ebp]
	fstp	QWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR _web+616
	cmp	edx, ebx
	jle	$LN19@facet_2for@3
	fstp	ST(1)
	mov	ecx, 1
	fstp	ST(1)
	mov	DWORD PTR tv2142[ebp], ebx
	mov	DWORD PTR tv2176[ebp], ecx
$LN65@facet_2for@3:

; 289  :     { for ( j = i+1 ; j < SDIM ; j++,k++ ) 

	mov	DWORD PTR _j$[ebp], ecx
	cmp	ecx, edx
	jge	$LN20@facet_2for@3
	lea	eax, DWORD PTR [ecx+ebx]
	fstp	ST(0)
	lea	edx, DWORD PTR [eax+eax*2]
	add	edx, edx
	mov	DWORD PTR tv1869[ebp], edx
	lea	ecx, DWORD PTR [ecx+ebx+5]
	lea	edx, DWORD PTR [ecx+ecx*2]
	add	edx, edx
	mov	DWORD PTR tv2002[ebp], edx
	lea	edx, DWORD PTR [eax+eax*2]
	add	edx, edx
	lea	edx, DWORD PTR _derivs$[ebp+edx*8+8]
	lea	ebx, DWORD PTR _form$[ebp+eax*8]
	mov	eax, DWORD PTR _mi$[ebp]
	mov	DWORD PTR tv2004[ebp], edx
	mov	edx, DWORD PTR _k$[ebp]
	lea	eax, DWORD PTR [eax+edx*4+232]
	lea	edx, DWORD PTR [ecx+ecx*2]
	add	edx, edx
	mov	DWORD PTR tv2012[ebp], eax
	lea	eax, DWORD PTR _derivs$[ebp+edx*8+8]
	lea	ecx, DWORD PTR _form$[ebp+ecx*8]
	mov	DWORD PTR tv2010[ebp], ebx
	mov	DWORD PTR tv2074[ebp], eax
	mov	DWORD PTR tv2076[ebp], ecx
	jmp	SHORT $LN18@facet_2for@3
	npad	11
$LL61@facet_2for@3:
	mov	ebx, DWORD PTR tv2010[ebp]
$LN18@facet_2for@3:

; 290  :       { eval_all(mi->expr[k],f_info->gauss_pt[m],SDIM,
; 291  :               form[i]+j, derivs[i][j],f_info->id);

	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR tv2004[ebp]
	mov	ecx, DWORD PTR _web+616
	push	edx
	mov	edx, DWORD PTR [esi+1268]
	add	eax, -8					; fffffff8H
	push	eax
	mov	eax, DWORD PTR [edx+edi*4]
	push	ebx
	push	ecx
	mov	ecx, DWORD PTR tv2012[ebp]
	mov	edx, DWORD PTR [ecx]
	push	eax
	push	edx
	call	_eval_all

; 292  :         form[j][i] = - form[i][j];

	fld	QWORD PTR [ebx]

; 293  :         for ( n = 0 ; n < SDIM ;n++ )

	mov	edx, DWORD PTR _web+616
	fchs
	mov	eax, DWORD PTR tv2076[ebp]
	add	esp, 24					; 00000018H
	fstp	QWORD PTR [eax]
	xor	ebx, ebx
	cmp	edx, 4
	jl	SHORT $LC56@facet_2for@3

; 290  :       { eval_all(mi->expr[k],f_info->gauss_pt[m],SDIM,
; 291  :               form[i]+j, derivs[i][j],f_info->id);

	mov	ecx, DWORD PTR tv2074[ebp]
	mov	eax, DWORD PTR tv2004[ebp]
	add	edx, -4					; fffffffcH
	shr	edx, 2
	inc	edx
	lea	ebx, DWORD PTR [edx*4]
	npad	7

; 293  :         for ( n = 0 ; n < SDIM ;n++ )

$LL57@facet_2for@3:

; 294  :            derivs[j][i][n] = -derivs[i][j][n];

	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	fchs
	add	ecx, 32					; 00000020H
	dec	edx
	fstp	QWORD PTR [ecx-40]
	fld	QWORD PTR [eax-32]
	fchs
	fstp	QWORD PTR [ecx-32]
	fld	QWORD PTR [eax-24]
	fchs
	fstp	QWORD PTR [ecx-24]
	fld	QWORD PTR [eax-16]
	fchs
	fstp	QWORD PTR [ecx-16]
	jne	SHORT $LL57@facet_2for@3

; 290  :       { eval_all(mi->expr[k],f_info->gauss_pt[m],SDIM,
; 291  :               form[i]+j, derivs[i][j],f_info->id);

	mov	edx, DWORD PTR _web+616
$LC56@facet_2for@3:

; 293  :         for ( n = 0 ; n < SDIM ;n++ )

	cmp	ebx, edx
	jge	SHORT $LN17@facet_2for@3
	mov	ecx, DWORD PTR tv2002[ebp]
	add	ecx, ebx
	lea	eax, DWORD PTR _derivs$[ebp+ecx*8]
	mov	ecx, DWORD PTR tv1869[ebp]
	mov	DWORD PTR tv1647[ebp], eax
	add	ecx, ebx
	mov	eax, edx
	lea	ecx, DWORD PTR _derivs$[ebp+ecx*8]
	sub	eax, ebx
	npad	5
$LC15@facet_2for@3:

; 294  :            derivs[j][i][n] = -derivs[i][j][n];

	fld	QWORD PTR [ecx]
	mov	ebx, DWORD PTR tv1647[ebp]
	fchs
	add	ebx, 8
	fstp	QWORD PTR [ebx-8]
	add	ecx, 8
	dec	eax
	mov	DWORD PTR tv1647[ebp], ebx
	jne	SHORT $LC15@facet_2for@3
$LN17@facet_2for@3:

; 289  :     { for ( j = i+1 ; j < SDIM ; j++,k++ ) 

	mov	eax, DWORD PTR _j$[ebp]
	add	DWORD PTR tv2010[ebp], 8
	add	DWORD PTR tv2074[ebp], 288		; 00000120H
	add	DWORD PTR tv2002[ebp], 36		; 00000024H
	add	DWORD PTR tv1869[ebp], 6
	inc	DWORD PTR _k$[ebp]
	add	DWORD PTR tv2012[ebp], 4
	mov	ecx, 48					; 00000030H
	add	DWORD PTR tv2004[ebp], ecx
	add	DWORD PTR tv2076[ebp], ecx
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, edx
	jl	$LL61@facet_2for@3
	fld	QWORD PTR _weight$89271[ebp]
	mov	edx, DWORD PTR _web+616
	mov	ebx, DWORD PTR tv2142[ebp]
	mov	ecx, DWORD PTR tv2176[ebp]
$LN20@facet_2for@3:

; 288  :     for ( i = 0, k = 0 ; i < SDIM ; i++ ) 

	inc	ecx
	add	ebx, 6
	lea	eax, DWORD PTR [ecx-1]
	mov	DWORD PTR tv2176[ebp], ecx
	mov	DWORD PTR tv2142[ebp], ebx
	cmp	eax, edx
	jl	$LN65@facet_2for@3
	fld	QWORD PTR _value$[ebp]
	fldz
	fxch	ST(2)
$LN19@facet_2for@3:

; 295  :       }
; 296  :     }
; 297  :     for ( i = 0, sum = 0.0 ; i < SDIM ; i++ )

	xor	ebx, ebx
	fld	ST(2)
	test	edx, edx
	jle	$LN10@facet_2for@3
	lea	ecx, DWORD PTR _derivs$[ebp]
	lea	edx, DWORD PTR _form$[ebp]
	mov	DWORD PTR tv2743[ebp], ecx
	mov	DWORD PTR tv2745[ebp], edx
$LN67@facet_2for@3:

; 298  :      for ( j = 0 ; j < SDIM ; j++ )

	xor	edx, edx
	mov	DWORD PTR _j$[ebp], edx
	cmp	DWORD PTR _web+616, edx
	jle	$LN11@facet_2for@3
	mov	eax, DWORD PTR tv2745[ebp]
	mov	ecx, DWORD PTR tv2743[ebp]
	mov	DWORD PTR tv2577[ebp], eax
	mov	DWORD PTR tv2593[ebp], ecx
$LN62@facet_2for@3:

; 299  :      {
; 300  :         sum += f_info->sides[m][0][i]*form[i][j]*f_info->sides[m][1][j];

	mov	eax, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [eax+edi*4]
	mov	ecx, DWORD PTR [eax]
	fld	QWORD PTR [ecx+ebx*8]
	mov	ecx, DWORD PTR tv2577[ebp]
	fmul	QWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	fmul	QWORD PTR [eax+edx*8]

; 301  :         for ( n = 0 ; n < ctrl ; n++ )

	xor	eax, eax
	faddp	ST(1), ST(0)
	cmp	DWORD PTR _ctrl$[ebp], eax
	jle	$LN8@facet_2for@3
$LN6@facet_2for@3:

; 295  :       }
; 296  :     }
; 297  :     for ( i = 0, sum = 0.0 ; i < SDIM ; i++ )

	mov	ecx, DWORD PTR [esi+1336]
	mov	ecx, DWORD PTR [ecx+eax*4]
	lea	ecx, DWORD PTR [ecx+ebx*8]
	mov	DWORD PTR tv885[ebp], ecx

; 302  :         {
; 303  :           f_info->grad[n][i] += weight*gl->gpolypart[m][0][n]*form[i][j]
; 304  :                       *f_info->sides[m][1][j];

	mov	ecx, DWORD PTR _gl$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	ecx, DWORD PTR [ecx]
	fld	QWORD PTR [ecx+eax*8]
	mov	ecx, DWORD PTR tv2577[ebp]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR [esi+1276]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	ecx, DWORD PTR [ecx+4]
	fmul	QWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR tv885[ebp]
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]

; 305  :           for (  k= 0 ; k < SDIM ; k++ )

	xor	ecx, ecx
	cmp	DWORD PTR _web+616, ecx
	jle	$LN1@facet_2for@3

; 302  :         {
; 303  :           f_info->grad[n][i] += weight*gl->gpolypart[m][0][n]*form[i][j]
; 304  :                       *f_info->sides[m][1][j];

	mov	edx, DWORD PTR tv2593[ebp]
	mov	DWORD PTR tv2299[ebp], edx
$LN60@facet_2for@3:

; 306  :                   f_info->grad[n][k] += weight*f_info->sides[m][0][i]
; 307  :                       *gl->gpoly[m][n]*derivs[i][j][k]*f_info->sides[m][1][j];

	mov	edx, DWORD PTR [esi+1276]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	DWORD PTR tv894[ebp], edx
	mov	edx, DWORD PTR [esi+1336]
	mov	edx, DWORD PTR [edx+eax*4]
	lea	edx, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR tv930[ebp], edx
	mov	edx, DWORD PTR _gl$[ebp]
	mov	edx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edi, DWORD PTR tv894[ebp]
	mov	edi, DWORD PTR [edi]
	fld	QWORD PTR [edi+ebx*8]
	inc	ecx
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR tv2299[ebp]
	add	DWORD PTR tv2299[ebp], 8
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv894[ebp]
	mov	edi, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _j$[ebp]
	fmul	QWORD PTR [edi+edx*8]
	mov	edi, DWORD PTR tv930[ebp]
	fadd	QWORD PTR [edi]
	fstp	QWORD PTR [edi]
	mov	edi, DWORD PTR _m$[ebp]
	cmp	ecx, DWORD PTR _web+616
	jl	SHORT $LN60@facet_2for@3
$LN1@facet_2for@3:

; 298  :      for ( j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR [esi+1336]
	mov	ecx, DWORD PTR [ecx+eax*4]
	lea	ecx, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR tv954[ebp], ecx

; 308  :           f_info->grad[n][j] += weight*f_info->sides[m][0][i]*form[i][j]
; 309  :                       *gl->gpolypart[m][1][n];

	mov	ecx, DWORD PTR [esi+1276]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	ecx, DWORD PTR [ecx]
	fld	QWORD PTR [ecx+ebx*8]
	mov	ecx, DWORD PTR tv2577[ebp]
	fmul	ST(0), ST(2)
	inc	eax
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _gl$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	ecx, DWORD PTR [ecx+4]
	fmul	QWORD PTR [ecx+eax*8-8]
	mov	ecx, DWORD PTR tv954[ebp]
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _ctrl$[ebp]
	jl	$LN6@facet_2for@3
$LN8@facet_2for@3:

; 298  :      for ( j = 0 ; j < SDIM ; j++ )

	add	DWORD PTR tv2593[ebp], 48		; 00000030H
	add	DWORD PTR tv2577[ebp], 8
	inc	edx
	mov	DWORD PTR _j$[ebp], edx
	cmp	edx, DWORD PTR _web+616
	jl	$LN62@facet_2for@3
$LN11@facet_2for@3:

; 295  :       }
; 296  :     }
; 297  :     for ( i = 0, sum = 0.0 ; i < SDIM ; i++ )

	add	DWORD PTR tv2745[ebp], 48		; 00000030H
	add	DWORD PTR tv2743[ebp], 288		; 00000120H
	inc	ebx
	cmp	ebx, DWORD PTR _web+616
	jl	$LN67@facet_2for@3
	mov	edx, DWORD PTR _web+616
$LN10@facet_2for@3:

; 283  :     for ( n = 0 ; n < SDIM ;n++ ) derivs[i][i][n] = 0.0;
; 284  :   }
; 285  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	mov	eax, DWORD PTR _gl$[ebp]

; 310  :         } 
; 311  :      }
; 312  :     value += weight*sum;

	fmulp	ST(1), ST(0)
	inc	edi
	mov	DWORD PTR _m$[ebp], edi
	faddp	ST(1), ST(0)
	fst	QWORD PTR _value$[ebp]
	cmp	edi, DWORD PTR [eax+4]
	jl	$LN59@facet_2for@3
$LN79@facet_2for@3:

; 313  :   }
; 314  : 
; 315  :   return value;
; 316  : } // end facet_2form_integral_lagrange_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(1)
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_2form_integral_lagrange_grad ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_facet_2form_integral_lagrange_hess
EXTRN	_eval_second:PROC
EXTRN	_mat4d_setup:PROC
EXTRN	__chkstk:PROC
; Function compile flags: /Ogtp
;	COMDAT _facet_2form_integral_lagrange_hess
_TEXT	SEGMENT
_secondqXvS$ = -13528					; size = 1032
_weight$89329 = -12496					; size = 8
_sign$ = -12488						; size = 8
_mi$ = -12480						; size = 4
_value$ = -12476					; size = 8
tv2789 = -12468						; size = 4
_ctrl$ = -12464						; size = 4
tv2781 = -12460						; size = 4
tv2894 = -12456						; size = 4
tv2896 = -12452						; size = 4
_second$ = -12448					; size = 4
tv2644 = -12444						; size = 4
tv1682 = -12444						; size = 4
tv2656 = -12440						; size = 4
tv1637 = -12440						; size = 4
tv5218 = -12436						; size = 4
tv3263 = -12436						; size = 4
tv5220 = -12432						; size = 4
tv3257 = -12432						; size = 4
_k$ = -12428						; size = 4
_gl$ = -12424						; size = 4
tv2358 = -12420						; size = 4
tv1711 = -12420						; size = 4
tv1648 = -12420						; size = 4
tv1578 = -12420						; size = 4
tv1512 = -12420						; size = 4
_m$ = -12420						; size = 4
tv4943 = -12416						; size = 4
tv2479 = -12416						; size = 4
tv1884 = -12416						; size = 4
tv2783 = -12412						; size = 4
_kk$89355 = -12412					; size = 4
tv1757 = -12408						; size = 4
tv1737 = -12408						; size = 4
tv1703 = -12408						; size = 4
tv1655 = -12408						; size = 4
tv1629 = -12408						; size = 4
tv1568 = -12408						; size = 4
tv1476 = -12408						; size = 4
tv1467 = -12408						; size = 4
tv306 = -12408						; size = 4
tv3833 = -12404						; size = 4
tv3760 = -12404						; size = 4
tv3518 = -12404						; size = 4
tv3427 = -12404						; size = 4
tv3255 = -12404						; size = 4
tv3213 = -12400						; size = 4
_j$ = -12400						; size = 4
tv3267 = -12396						; size = 4
tv1929 = -12396						; size = 4
_i$ = -12396						; size = 4
tv4921 = -12392						; size = 4
tv2214 = -12392						; size = 4
tv1931 = -12392						; size = 4
_n$ = -12392						; size = 4
_secondxJ$ = -12388					; size = 10368
_derivs$ = -2020					; size = 1728
_form$ = -292						; size = 288
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_facet_2form_integral_lagrange_hess PROC		; COMDAT

; 328  : { int m,n,i,j,k,p;

	push	ebp
	mov	ebp, esp
	mov	eax, 13528				; 000034d8H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 329  :   REAL value = 0.0;

	fldz
	push	ebx
	push	esi
	fstp	QWORD PTR _value$[ebp]
	push	edi
	mov	edi, DWORD PTR _f_info$[ebp]

; 330  :   REAL form[MAXCOORD][MAXCOORD]; /* as antisymmetric matrix */
; 331  :   REAL derivs[MAXCOORD][MAXCOORD][MAXCOORD]; /* coord is last index */
; 332  :   MAT4D(second,MAXCOORD,MAXCOORD,MAXCOORD,MAXCOORD);

	push	6
	push	6
	push	6
	push	6
	lea	eax, DWORD PTR _secondxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _secondqXvS$[ebp]
	push	ecx
	call	_mat4d_setup

; 333  :   REAL sum;
; 334  :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	edx, DWORD PTR [edi]
	mov	DWORD PTR _second$[ebp], eax
	mov	eax, DWORD PTR _web+236
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	add	esp, 24					; 00000018H
	or	eax, ecx
	je	SHORT $LN57@facet_2for@4
	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN171@facet_2for@4
$LN57@facet_2for@4:
	fld1
$LN171@facet_2for@4:

; 335  :   int dim = web.dimension;
; 336  :   struct gauss_lag *gl = &gauss_lagrange[dim][web.gauss2D_order];

	mov	eax, DWORD PTR _web+1596
	fstp	QWORD PTR _sign$[ebp]
	mov	ecx, DWORD PTR _web+620
	fldz

; 337  :   int ctrl = web.skel[FACET].ctrlpts;

	mov	edx, DWORD PTR _web+232
	shl	eax, 5
	add	eax, DWORD PTR _gauss_lagrange[ecx*4]
	mov	DWORD PTR _ctrl$[ebp], edx
	mov	DWORD PTR _gl$[ebp], eax

; 338  :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [edi+8]
	cdq
	xor	eax, edx
	sub	eax, edx

; 339  : 
; 340  :   for ( i = 0; i < SDIM ; i++ )

	mov	edx, DWORD PTR _web+616
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list
	xor	ebx, ebx
	mov	DWORD PTR _mi$[ebp], eax
	test	edx, edx
	jle	$LN52@facet_2for@4

; 335  :   int dim = web.dimension;
; 336  :   struct gauss_lag *gl = &gauss_lagrange[dim][web.gauss2D_order];

	lea	eax, DWORD PTR _derivs$[ebp]
	lea	ecx, DWORD PTR _form$[ebp]
	mov	DWORD PTR tv1929[ebp], eax
	mov	DWORD PTR tv1931[ebp], ecx
$LN54@facet_2for@4:

; 341  :   { form[i][i] = 0.0;

	mov	eax, DWORD PTR tv1931[ebp]

; 342  :      for ( n = 0 ; n < SDIM ;n++ )

	xor	esi, esi
	fst	QWORD PTR [eax]
	test	edx, edx
	jle	SHORT $LN53@facet_2for@4

; 341  :   { form[i][i] = 0.0;

	mov	ecx, DWORD PTR tv1929[ebp]
	mov	DWORD PTR tv1884[ebp], ecx
$LN51@facet_2for@4:

; 343  :      { derivs[i][i][n] = 0.0;

	mov	eax, DWORD PTR tv1884[ebp]

; 344  :         for ( j = 0 ; j < SDIM ;j++ )

	xor	ecx, ecx
	fst	QWORD PTR [eax]
	test	edx, edx
	jle	SHORT $LN50@facet_2for@4

; 343  :      { derivs[i][i][n] = 0.0;

	mov	edx, DWORD PTR _second$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR [edx+esi*4]
$LN48@facet_2for@4:

; 345  :           second[i][i][n][j] = 0.0;

	fst	QWORD PTR [eax]
	mov	edx, DWORD PTR _web+616
	inc	ecx
	add	eax, 8
	cmp	ecx, edx
	jl	SHORT $LN48@facet_2for@4
$LN50@facet_2for@4:

; 342  :      for ( n = 0 ; n < SDIM ;n++ )

	add	DWORD PTR tv1884[ebp], 8
	inc	esi
	cmp	esi, edx
	jl	SHORT $LN51@facet_2for@4
$LN53@facet_2for@4:

; 339  : 
; 340  :   for ( i = 0; i < SDIM ; i++ )

	add	DWORD PTR tv1931[ebp], 56		; 00000038H
	add	DWORD PTR tv1929[ebp], 336		; 00000150H
	inc	ebx
	cmp	ebx, edx
	jl	SHORT $LN54@facet_2for@4
$LN52@facet_2for@4:

; 346  :      }
; 347  :   }
; 348  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	mov	eax, DWORD PTR _gl$[ebp]
	xor	esi, esi
	mov	DWORD PTR _m$[ebp], esi
	cmp	DWORD PTR [eax+4], esi
	jg	SHORT $LN100@facet_2for@4
	pop	edi
	fstp	ST(0)

; 408  :      }
; 409  : 
; 410  :   return value;

	fld	QWORD PTR _value$[ebp]
	pop	esi
	pop	ebx

; 411  : } // end facet_2form_integral_lagrange_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN169@facet_2for@4:

; 346  :      }
; 347  :   }
; 348  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	fstp	ST(0)
$LN100@facet_2for@4:

; 349  :     { REAL weight = sign*gl->gausswt[m]/2;

	mov	ecx, DWORD PTR _gl$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	fld	QWORD PTR [eax+esi*8]

; 350  :       f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	mov	ecx, DWORD PTR [edi+1268]
	fmul	QWORD PTR _sign$[ebp]
	mov	eax, DWORD PTR [ecx+esi*4]
	add	edx, edx

; 351  :       for ( i = 0, k = 0 ; i < SDIM ; i++ ) 

	mov	DWORD PTR _k$[ebp], 0
	fmul	QWORD PTR __real@3fe0000000000000
	fst	QWORD PTR _weight$89329[ebp]
	fild	DWORD PTR _m$[ebp]
	fstp	QWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR _web+616
	test	edx, edx
	jle	$LN40@facet_2for@4

; 349  :     { REAL weight = sign*gl->gausswt[m]/2;

	lea	ecx, DWORD PTR _form$[ebp+48]
	lea	eax, DWORD PTR _derivs$[ebp+296]
	mov	DWORD PTR tv3213[ebp], 1
	mov	DWORD PTR tv3255[ebp], ecx
	mov	DWORD PTR tv3257[ebp], eax
	mov	DWORD PTR tv3263[ebp], 36		; 00000024H
	mov	DWORD PTR tv3267[ebp], 4
$LN108@facet_2for@4:

; 352  :         { for ( j = i+1 ; j < SDIM ; j++,k++ ) 

	cmp	DWORD PTR tv3213[ebp], edx
	jge	$LN41@facet_2for@4
	mov	eax, DWORD PTR tv3267[ebp]
	fstp	ST(0)
	mov	ecx, DWORD PTR tv3213[ebp]
	fstp	ST(0)
	mov	ebx, DWORD PTR _k$[ebp]
	mov	DWORD PTR tv2358[ebp], ecx
	mov	DWORD PTR tv2479[ebp], eax
	mov	eax, DWORD PTR tv3263[ebp]
	lea	ecx, DWORD PTR [eax-30]
	mov	DWORD PTR tv2644[ebp], ecx
	mov	ecx, DWORD PTR _mi$[ebp]
	lea	ecx, DWORD PTR [ecx+ebx*4+232]
	mov	DWORD PTR tv2781[ebp], eax
	mov	eax, DWORD PTR tv3257[ebp]
	mov	DWORD PTR tv2656[ebp], ecx
	lea	ecx, DWORD PTR [eax-240]
	mov	DWORD PTR tv2783[ebp], ecx
	mov	ecx, DWORD PTR tv3255[ebp]
	lea	ebx, DWORD PTR [ecx-40]
	mov	DWORD PTR tv2789[ebp], ebx
	mov	DWORD PTR tv2894[ebp], eax
	mov	DWORD PTR tv2896[ebp], ecx
	npad	4
$LL39@facet_2for@4:

; 353  :           { eval_second(mi->expr[k],f_info->gauss_pt[m],
; 354  :                 SDIM, form[i]+j, derivs[i][j],second[i][j],f_info->id);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR _second$[ebp]
	mov	ebx, DWORD PTR tv2789[ebp]
	push	eax
	mov	eax, DWORD PTR tv3267[ebp]
	mov	ecx, DWORD PTR [ecx+eax-4]
	mov	eax, DWORD PTR tv2479[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	eax, DWORD PTR tv2783[ebp]
	push	ecx
	mov	ecx, DWORD PTR [edi+1268]
	add	eax, -8					; fffffff8H
	push	eax
	mov	eax, DWORD PTR tv2656[ebp]
	push	ebx
	push	edx
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	ecx
	call	_eval_second

; 355  :              form[j][i] = - form[i][j];

	fld	QWORD PTR [ebx]
	mov	edx, DWORD PTR tv2896[ebp]
	fchs
	fstp	QWORD PTR [edx]

; 356  :              for ( n = 0 ; n < SDIM ;n++ )

	mov	edx, DWORD PTR _web+616
	add	esp, 28					; 0000001cH
	xor	eax, eax
	cmp	edx, 4
	jl	SHORT $LN107@facet_2for@4

; 353  :           { eval_second(mi->expr[k],f_info->gauss_pt[m],
; 354  :                 SDIM, form[i]+j, derivs[i][j],second[i][j],f_info->id);

	mov	ecx, DWORD PTR tv2894[ebp]
	mov	eax, DWORD PTR tv2783[ebp]
	lea	ebx, DWORD PTR [edx-4]
	shr	ebx, 2
	inc	ebx
	mov	DWORD PTR tv306[ebp], ebx
	add	ebx, ebx
	add	ebx, ebx
	mov	DWORD PTR _n$[ebp], ebx
	mov	ebx, DWORD PTR tv306[ebp]
	npad	4

; 356  :              for ( n = 0 ; n < SDIM ;n++ )

$LL97@facet_2for@4:

; 357  :                 derivs[j][i][n] = -derivs[i][j][n];

	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	fchs
	add	ecx, 32					; 00000020H
	dec	ebx
	fstp	QWORD PTR [ecx-40]
	fld	QWORD PTR [eax-32]
	fchs
	fstp	QWORD PTR [ecx-32]
	fld	QWORD PTR [eax-24]
	fchs
	fstp	QWORD PTR [ecx-24]
	fld	QWORD PTR [eax-16]
	fchs
	fstp	QWORD PTR [ecx-16]
	jne	SHORT $LL97@facet_2for@4

; 353  :           { eval_second(mi->expr[k],f_info->gauss_pt[m],
; 354  :                 SDIM, form[i]+j, derivs[i][j],second[i][j],f_info->id);

	mov	eax, DWORD PTR _n$[ebp]
$LN107@facet_2for@4:

; 356  :              for ( n = 0 ; n < SDIM ;n++ )

	cmp	eax, edx
	jge	SHORT $LN95@facet_2for@4
	mov	ecx, DWORD PTR tv2781[ebp]
	mov	ebx, DWORD PTR tv2644[ebp]
	add	ecx, eax
	lea	ecx, DWORD PTR _derivs$[ebp+ecx*8]
	mov	DWORD PTR tv2214[ebp], ecx
	add	ebx, eax
	mov	ecx, edx
	sub	ecx, eax
	mov	eax, DWORD PTR tv2214[ebp]
	lea	ebx, DWORD PTR _derivs$[ebp+ebx*8]
$LC36@facet_2for@4:

; 357  :                 derivs[j][i][n] = -derivs[i][j][n];

	fld	QWORD PTR [ebx]
	add	ebx, 8
	fchs
	add	eax, 8
	dec	ecx
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC36@facet_2for@4
$LN95@facet_2for@4:

; 358  :              for ( n = 0 ; n < SDIM ;n++ )

	mov	DWORD PTR _n$[ebp], 0
	test	edx, edx
	jle	SHORT $LN38@facet_2for@4
	npad	1
$LL33@facet_2for@4:

; 359  :                 for ( p = 0 ; p < SDIM ;p++ )

	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN32@facet_2for@4
	mov	edx, DWORD PTR tv2479[ebp]
	mov	eax, DWORD PTR _second$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	edx, DWORD PTR tv3267[ebp]
	mov	eax, DWORD PTR [eax+edx-4]
	mov	ebx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR [eax+ebx*4]
	mov	ebx, DWORD PTR _second$[ebp]
	mov	edx, DWORD PTR [ebx+edx-4]
	mov	ebx, DWORD PTR tv2479[ebp]
	mov	edx, DWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR _n$[ebp]
	mov	ebx, DWORD PTR [edx+ebx*4]
	sub	ebx, eax
$LL30@facet_2for@4:

; 360  :                   second[j][i][n][p] = -second[i][j][n][p];

	fld	QWORD PTR [ebx+eax]
	inc	ecx
	fchs
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	mov	edx, DWORD PTR _web+616
	cmp	ecx, edx
	jl	SHORT $LL30@facet_2for@4
$LN32@facet_2for@4:

; 358  :              for ( n = 0 ; n < SDIM ;n++ )

	mov	eax, DWORD PTR _n$[ebp]
	inc	eax
	mov	DWORD PTR _n$[ebp], eax
	cmp	eax, edx
	jl	SHORT $LL33@facet_2for@4
$LN38@facet_2for@4:

; 352  :         { for ( j = i+1 ; j < SDIM ; j++,k++ ) 

	inc	DWORD PTR _k$[ebp]
	add	DWORD PTR tv2789[ebp], 8
	add	DWORD PTR tv2894[ebp], 288		; 00000120H
	add	DWORD PTR tv2781[ebp], 36		; 00000024H
	add	DWORD PTR tv2644[ebp], 6
	mov	eax, 48					; 00000030H
	add	DWORD PTR tv2783[ebp], eax
	add	DWORD PTR tv2896[ebp], eax
	mov	eax, 4
	add	DWORD PTR tv2656[ebp], eax
	add	DWORD PTR tv2479[ebp], eax
	mov	eax, DWORD PTR tv2358[ebp]
	inc	eax
	mov	DWORD PTR tv2358[ebp], eax
	cmp	eax, edx
	jl	$LL39@facet_2for@4
	fldz
	fld	QWORD PTR _weight$89329[ebp]
$LN41@facet_2for@4:

; 351  :       for ( i = 0, k = 0 ; i < SDIM ; i++ ) 

	mov	eax, DWORD PTR tv3213[ebp]
	add	DWORD PTR tv3267[ebp], 4
	add	DWORD PTR tv3263[ebp], 42		; 0000002aH
	add	DWORD PTR tv3257[ebp], 336		; 00000150H
	add	DWORD PTR tv3255[ebp], 56		; 00000038H
	inc	eax
	mov	DWORD PTR tv3213[ebp], eax
	dec	eax
	cmp	eax, edx
	jl	$LN108@facet_2for@4
$LN40@facet_2for@4:

; 361  :           }
; 362  :         }
; 363  : 
; 364  : 
; 365  :         for ( i = 0, sum = 0.0 ; i < SDIM ; i++ )

	xor	ebx, ebx
	fld	ST(1)
	mov	DWORD PTR _i$[ebp], ebx
	test	edx, edx
	jle	$LN25@facet_2for@4
	lea	eax, DWORD PTR _derivs$[ebp]
	lea	ecx, DWORD PTR _form$[ebp]
	mov	DWORD PTR tv5218[ebp], eax
	mov	DWORD PTR tv5220[ebp], ecx
$LN27@facet_2for@4:

; 366  :          for ( j = 0 ; j < SDIM ; j++ )

	mov	DWORD PTR _j$[ebp], 0
	test	edx, edx
	jle	$LN26@facet_2for@4
	mov	eax, DWORD PTR tv5220[ebp]
	mov	ecx, DWORD PTR tv5218[ebp]
	mov	DWORD PTR tv4921[ebp], eax
	mov	DWORD PTR tv4943[ebp], ecx
$LN24@facet_2for@4:

; 367  :          {
; 368  :             sum += f_info->sides[m][0][i]*form[i][j]*f_info->sides[m][1][j];

	mov	eax, DWORD PTR [edi+1276]
	mov	eax, DWORD PTR [eax+esi*4]
	mov	ecx, DWORD PTR [eax]
	fld	QWORD PTR [ecx+ebx*8]
	mov	ecx, DWORD PTR tv4921[ebp]
	fmul	QWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _j$[ebp]
	fmul	QWORD PTR [eax+ecx*8]

; 369  :             for ( n = 0 ; n < ctrl ; n++ )

	xor	eax, eax
	faddp	ST(1), ST(0)
	cmp	DWORD PTR _ctrl$[ebp], eax
	jle	$LN23@facet_2for@4
$LN101@facet_2for@4:

; 361  :           }
; 362  :         }
; 363  : 
; 364  : 
; 365  :         for ( i = 0, sum = 0.0 ; i < SDIM ; i++ )

	mov	edx, DWORD PTR [edi+1336]
	mov	ecx, DWORD PTR [edx+eax*4]
	lea	edx, DWORD PTR [ecx+ebx*8]

; 370  :             { int nn,kk;
; 371  :               /* gradient terms */
; 372  :               f_info->grad[n][i] += weight*gl->gpolypart[m][0][n]*form[i][j]
; 373  :                       *f_info->sides[m][1][j];

	mov	ecx, DWORD PTR _gl$[ebp]
	mov	DWORD PTR tv1467[ebp], edx
	mov	edx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [ecx]
	fld	QWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR tv4921[ebp]
	mov	edx, DWORD PTR [edi+1276]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _j$[ebp]
	fmul	QWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR tv1467[ebp]
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]

; 374  :               for (  k= 0 ; k < SDIM ; k++ )

	xor	ecx, ecx
	mov	DWORD PTR _k$[ebp], ecx
	cmp	DWORD PTR _web+616, ecx
	jle	$LN16@facet_2for@4

; 370  :             { int nn,kk;
; 371  :               /* gradient terms */
; 372  :               f_info->grad[n][i] += weight*gl->gpolypart[m][0][n]*form[i][j]
; 373  :                       *f_info->sides[m][1][j];

	mov	edx, DWORD PTR tv4943[ebp]
	mov	DWORD PTR tv3427[ebp], edx
$LN18@facet_2for@4:

; 375  :                   f_info->grad[n][k] += weight*f_info->sides[m][0][i]
; 376  :                       *gl->gpoly[m][n]*derivs[i][j][k]*f_info->sides[m][1][j];

	mov	edx, DWORD PTR [edi+1276]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	DWORD PTR tv1476[ebp], edx
	mov	edx, DWORD PTR [edi+1336]
	mov	edx, DWORD PTR [edx+eax*4]
	lea	ecx, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR tv1512[ebp], ecx
	mov	ecx, DWORD PTR tv1476[ebp]
	mov	edx, DWORD PTR [ecx]
	fld	QWORD PTR [edx+ebx*8]
	mov	edx, DWORD PTR _gl$[ebp]
	mov	edx, DWORD PTR [edx+20]
	fmul	ST(0), ST(2)
	mov	edx, DWORD PTR [edx+esi*4]
	mov	ecx, DWORD PTR [ecx+4]
	fmul	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR tv3427[ebp]
	add	DWORD PTR tv3427[ebp], 8
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR _j$[ebp]
	fmul	QWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR tv1512[ebp]
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _k$[ebp]
	inc	ecx
	mov	DWORD PTR _k$[ebp], ecx
	cmp	ecx, DWORD PTR _web+616
	jl	SHORT $LN18@facet_2for@4
$LN16@facet_2for@4:

; 366  :          for ( j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR [edi+1336]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _j$[ebp]
	lea	ecx, DWORD PTR [edx+ecx*8]

; 377  :               f_info->grad[n][j] += weight*f_info->sides[m][0][i]*form[i][j]
; 378  :                       *gl->gpolypart[m][1][n];

	mov	edx, DWORD PTR [edi+1276]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+ebx*8]
	mov	edx, DWORD PTR tv4921[ebp]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR _gl$[ebp]
	mov	edx, DWORD PTR [edx+24]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx+4]
	fmul	QWORD PTR [edx+eax*8]
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]

; 379  : 
; 380  :               /* hessian terms */
; 381  :               for ( nn = 0; nn < ctrl ; nn++ )

	mov	edx, DWORD PTR _web+616
	xor	ecx, ecx
$LN102@facet_2for@4:

; 382  :               { 
; 383  :                  for ( kk = 0 ; kk < SDIM ; kk++ )

	mov	DWORD PTR _kk$89355[ebp], 0
	test	edx, edx
	jle	$LN10@facet_2for@4
	mov	edx, DWORD PTR tv4943[ebp]
	mov	DWORD PTR tv3518[ebp], edx
$LN103@facet_2for@4:
	mov	edx, DWORD PTR [edi+1340]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	ebx, DWORD PTR _kk$89355[ebp]
	lea	edx, DWORD PTR [edx+ebx*8]
	mov	DWORD PTR tv1568[ebp], edx

; 384  :                      f_info->hess[n][nn][i][kk] += weight*gl->gpolypart[m][0][n]
; 385  :                         *gl->gpoly[m][nn]*derivs[i][j][kk]*f_info->sides[m][1][j];

	mov	edx, DWORD PTR _gl$[ebp]
	mov	ebx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [edx+24]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+eax*8]
	mov	ebx, DWORD PTR [ebx+esi*4]
	mov	edx, DWORD PTR tv3518[ebp]
	fmul	ST(0), ST(2)
	add	DWORD PTR tv3518[ebp], 8
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR _j$[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR [edi+1276]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx+4]
	fmul	QWORD PTR [edx+ebx*8]
	mov	edx, DWORD PTR tv1568[ebp]
	mov	ebx, DWORD PTR _i$[ebp]
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR _kk$89355[ebp]
	inc	edx
	mov	DWORD PTR _kk$89355[ebp], edx
	cmp	edx, DWORD PTR _web+616
	jl	$LN103@facet_2for@4
$LN10@facet_2for@4:

; 386  :                  f_info->hess[n][nn][i][j] += weight*gl->gpolypart[m][0][n]
; 387  :                     *form[i][j]*gl->gpolypart[m][1][nn];

	mov	edx, DWORD PTR _gl$[ebp]
	mov	edx, DWORD PTR [edx+24]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	DWORD PTR tv1578[ebp], edx
	mov	edx, DWORD PTR [edi+1340]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	ebx, DWORD PTR _j$[ebp]
	lea	edx, DWORD PTR [edx+ebx*8]
	mov	ebx, DWORD PTR tv1578[ebp]
	mov	ebx, DWORD PTR [ebx]
	fld	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR tv4921[ebp]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv1578[ebp]
	mov	ebx, DWORD PTR [ebx+4]
	fmul	QWORD PTR [ebx+ecx*8]
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]

; 388  :                  for (  k= 0 ; k < SDIM ; k++ )

	xor	edx, edx
	mov	DWORD PTR _k$[ebp], edx
	cmp	DWORD PTR _web+616, edx
	jle	$LN105@facet_2for@4

; 386  :                  f_info->hess[n][nn][i][j] += weight*gl->gpolypart[m][0][n]
; 387  :                     *form[i][j]*gl->gpolypart[m][1][nn];

	mov	ebx, DWORD PTR tv4943[ebp]
	mov	DWORD PTR tv3760[ebp], ebx
$LN9@facet_2for@4:

; 361  :           }
; 362  :         }
; 363  : 
; 364  : 
; 365  :         for ( i = 0, sum = 0.0 ; i < SDIM ; i++ )

	mov	ebx, DWORD PTR [edi+1340]
	mov	ebx, DWORD PTR [ebx+eax*4]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	mov	edx, DWORD PTR [ebx+edx*4]
	mov	ebx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [edx+ebx*8]
	mov	DWORD PTR tv1629[ebp], edx

; 389  :                  { f_info->hess[n][nn][k][i] += weight*gl->gpolypart[m][0][nn]
; 390  :                       *gl->gpoly[m][n]*derivs[i][j][k]*f_info->sides[m][1][j];

	mov	edx, DWORD PTR _gl$[ebp]
	mov	ebx, DWORD PTR [edx+24]
	mov	ebx, DWORD PTR [ebx+esi*4]
	mov	edx, DWORD PTR [edx+20]
	mov	ebx, DWORD PTR [ebx]
	fld	QWORD PTR [ebx+ecx*8]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	ebx, DWORD PTR _j$[ebp]
	fmul	ST(0), ST(2)

; 391  :                     for ( kk = 0 ; kk < SDIM ; kk++ )

	mov	DWORD PTR _kk$89355[ebp], 0
	fmul	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR tv3760[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR [edi+1276]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx+4]
	fmul	QWORD PTR [edx+ebx*8]
	mov	edx, DWORD PTR tv1629[ebp]
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	cmp	DWORD PTR _web+616, 0
	jle	$LN4@facet_2for@4

; 392  :                         f_info->hess[n][nn][k][kk] += weight*f_info->sides[m][0][i]
; 393  :                           *gl->gpoly[m][n]*second[i][j][k][kk]*gl->gpoly[m][nn]
; 394  :                              *f_info->sides[m][1][j];

	mov	ebx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _second$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	ebx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	ebx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	DWORD PTR tv1655[ebp], edx
$LN104@facet_2for@4:
	mov	edx, DWORD PTR [edi+1276]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	ebx, DWORD PTR _k$[ebp]
	mov	DWORD PTR tv1637[ebp], edx
	mov	edx, DWORD PTR _gl$[ebp]
	mov	edx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	DWORD PTR tv1648[ebp], edx
	mov	edx, DWORD PTR [edi+1340]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	ebx, DWORD PTR _kk$89355[ebp]
	lea	edx, DWORD PTR [edx+ebx*8]
	mov	ebx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv1682[ebp], edx
	mov	edx, DWORD PTR tv1637[ebp]
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+ebx*8]
	mov	edx, DWORD PTR tv1648[ebp]
	mov	ebx, DWORD PTR _kk$89355[ebp]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR tv1655[ebp]
	fmul	QWORD PTR [edx+ebx*8]
	mov	edx, DWORD PTR tv1648[ebp]
	mov	ebx, DWORD PTR _j$[ebp]
	fmul	QWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR tv1637[ebp]
	mov	edx, DWORD PTR [edx+4]
	fmul	QWORD PTR [edx+ebx*8]
	mov	edx, DWORD PTR tv1682[ebp]
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR _kk$89355[ebp]
	inc	edx
	mov	DWORD PTR _kk$89355[ebp], edx
	cmp	edx, DWORD PTR _web+616
	jl	$LN104@facet_2for@4
$LN4@facet_2for@4:

; 366  :          for ( j = 0 ; j < SDIM ; j++ )

	mov	edx, DWORD PTR [edi+1340]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	ebx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	ebx, DWORD PTR _j$[ebp]
	lea	edx, DWORD PTR [edx+ebx*8]

; 395  :                     f_info->hess[n][nn][k][j] += weight*f_info->sides[m][0][i]
; 396  :                       *gl->gpoly[m][n]*derivs[i][j][k]*gl->gpolypart[m][1][nn];

	mov	ebx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv1703[ebp], edx
	mov	edx, DWORD PTR [edi+1276]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+ebx*8]
	mov	edx, DWORD PTR _gl$[ebp]
	mov	ebx, DWORD PTR [edx+20]
	fmul	ST(0), ST(2)
	mov	ebx, DWORD PTR [ebx+esi*4]
	mov	edx, DWORD PTR [edx+24]
	fmul	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR tv3760[ebp]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx+4]
	fmul	QWORD PTR [ebx]
	add	ebx, 8
	mov	DWORD PTR tv3760[ebp], ebx
	fmul	QWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR tv1703[ebp]
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR _k$[ebp]
	inc	edx
	mov	DWORD PTR _k$[ebp], edx
	cmp	edx, DWORD PTR _web+616
	jl	$LN9@facet_2for@4
$LN105@facet_2for@4:

; 397  :                  }
; 398  :                  f_info->hess[n][nn][j][i] += weight*gl->gpolypart[m][0][nn]
; 399  :                      *form[i][j]*gl->gpolypart[m][1][n];

	mov	edx, DWORD PTR _gl$[ebp]
	mov	edx, DWORD PTR [edx+24]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	ebx, DWORD PTR _j$[ebp]
	mov	DWORD PTR tv1711[ebp], edx
	mov	edx, DWORD PTR [edi+1340]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	ebx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [edx+ebx*8]
	mov	DWORD PTR tv1737[ebp], edx
	mov	edx, DWORD PTR tv1711[ebp]
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR tv4921[ebp]
	fmul	ST(0), ST(2)

; 400  :                  for ( kk = 0 ; kk < SDIM ; kk++ )

	mov	DWORD PTR _kk$89355[ebp], 0
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv1711[ebp]
	mov	edx, DWORD PTR [edx+4]
	fmul	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR tv1737[ebp]
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR _web+616
	test	edx, edx
	jle	$LN14@facet_2for@4

; 397  :                  }
; 398  :                  f_info->hess[n][nn][j][i] += weight*gl->gpolypart[m][0][nn]
; 399  :                      *form[i][j]*gl->gpolypart[m][1][n];

	mov	edx, DWORD PTR tv4943[ebp]
	mov	DWORD PTR tv3833[ebp], edx
$LN3@facet_2for@4:

; 400  :                  for ( kk = 0 ; kk < SDIM ; kk++ )

	mov	edx, DWORD PTR [edi+1340]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	ebx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	ebx, DWORD PTR _kk$89355[ebp]
	lea	edx, DWORD PTR [edx+ebx*8]

; 401  :                      f_info->hess[n][nn][j][kk] += weight*f_info->sides[m][0][i]
; 402  :                          *derivs[i][j][kk]*gl->gpoly[m][nn]*gl->gpolypart[m][1][n];

	mov	ebx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv1757[ebp], edx
	mov	edx, DWORD PTR [edi+1276]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+ebx*8]
	mov	edx, DWORD PTR tv3833[ebp]
	add	DWORD PTR tv3833[ebp], 8
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR _gl$[ebp]
	mov	ebx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [edx+24]
	mov	ebx, DWORD PTR [ebx+esi*4]
	fmul	QWORD PTR [ebx+ecx*8]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx+4]
	mov	ebx, DWORD PTR _kk$89355[ebp]
	fmul	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR tv1757[ebp]
	inc	ebx
	mov	DWORD PTR _kk$89355[ebp], ebx
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR _web+616
	cmp	ebx, edx
	jl	$LN3@facet_2for@4

; 400  :                  for ( kk = 0 ; kk < SDIM ; kk++ )

	mov	ebx, DWORD PTR _i$[ebp]
$LN14@facet_2for@4:

; 379  : 
; 380  :               /* hessian terms */
; 381  :               for ( nn = 0; nn < ctrl ; nn++ )

	inc	ecx
	cmp	ecx, DWORD PTR _ctrl$[ebp]
	jl	$LN102@facet_2for@4

; 369  :             for ( n = 0 ; n < ctrl ; n++ )

	inc	eax
	cmp	eax, DWORD PTR _ctrl$[ebp]
	jl	$LN101@facet_2for@4
$LN23@facet_2for@4:

; 366  :          for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR _j$[ebp]
	add	DWORD PTR tv4943[ebp], 48		; 00000030H
	add	DWORD PTR tv4921[ebp], 8
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, edx
	jl	$LN24@facet_2for@4
$LN26@facet_2for@4:

; 361  :           }
; 362  :         }
; 363  : 
; 364  : 
; 365  :         for ( i = 0, sum = 0.0 ; i < SDIM ; i++ )

	add	DWORD PTR tv5220[ebp], 48		; 00000030H
	add	DWORD PTR tv5218[ebp], 288		; 00000120H
	inc	ebx
	mov	DWORD PTR _i$[ebp], ebx
	cmp	ebx, edx
	jl	$LN27@facet_2for@4
$LN25@facet_2for@4:

; 346  :      }
; 347  :   }
; 348  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	mov	eax, DWORD PTR _gl$[ebp]

; 403  :               } 
; 404  : 
; 405  :             } 
; 406  :          }
; 407  :         value += weight*sum;

	fmulp	ST(1), ST(0)
	inc	esi
	mov	DWORD PTR _m$[ebp], esi
	fadd	QWORD PTR _value$[ebp]
	fst	QWORD PTR _value$[ebp]
	cmp	esi, DWORD PTR [eax+4]
	jl	$LN169@facet_2for@4

; 411  : } // end facet_2form_integral_lagrange_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(1)
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_2form_integral_lagrange_hess ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DH@HAPKOAGA@facet_2form_sq_integral?5method?5o@ ; `string'
PUBLIC	??_C@_0DE@FFLANBPP@facet_2form_sq_integral?5method?5o@ ; `string'
PUBLIC	_facet_2form_sq_integral_init
;	COMDAT ??_C@_0DH@HAPKOAGA@facet_2form_sq_integral?5method?5o@
CONST	SEGMENT
??_C@_0DH@HAPKOAGA@facet_2form_sq_integral?5method?5o@ DB 'facet_2form_sq'
	DB	'_integral method only for LINEAR model.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@FFLANBPP@facet_2form_sq_integral?5method?5o@
CONST	SEGMENT
??_C@_0DE@FFLANBPP@facet_2form_sq_integral?5method?5o@ DB 'facet_2form_sq'
	DB	'_integral method only for 2D facets.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _facet_2form_sq_integral_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_facet_2form_sq_integral_init PROC			; COMDAT

; 435  :   if ( web.dimension != 2 )

	cmp	DWORD PTR _web+620, 2
	je	SHORT $LN2@facet_2for@5

; 436  :      kb_error(2412,"facet_2form_sq_integral method only for 2D facets.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DE@FFLANBPP@facet_2form_sq_integral?5method?5o@
	push	2412					; 0000096cH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN2@facet_2for@5:

; 437  : 
; 438  :   if ( web.modeltype != LINEAR )

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN1@facet_2for@5

; 439  :      kb_error(2413,"facet_2form_sq_integral method only for LINEAR model.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DH@HAPKOAGA@facet_2form_sq_integral?5method?5o@
	push	2413					; 0000096dH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@facet_2for@5:

; 440  : 
; 441  : } // end facet_2form_sq_integral_init()

	ret	0
_facet_2form_sq_integral_init ENDP
_TEXT	ENDS
PUBLIC	__real@3fd0000000000000
PUBLIC	_facet_2form_sq_integral
EXTRN	_gauss2Dwt:DWORD
EXTRN	_gauss2D_num:DWORD
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _facet_2form_sq_integral
_TEXT	SEGMENT
_value$ = -24						; size = 8
_mi$ = -16						; size = 4
tv353 = -12						; size = 4
tv332 = -8						; size = 4
_k$ = -4						; size = 4
_m$ = 8							; size = 4
_f_info$ = 8						; size = 4
_facet_2form_sq_integral PROC				; COMDAT

; 452  : { int m,i,j,k;

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 453  :   REAL value=0.0;

	fldz
	push	edi

; 454  :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	edi, DWORD PTR _f_info$[ebp]
	fst	QWORD PTR _value$[ebp]
	mov	eax, DWORD PTR [edi+8]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list

; 455  : 
; 456  :   for ( m = 0 ; m < gauss2D_num ; m++ )

	xor	edx, edx
	mov	DWORD PTR _mi$[ebp], eax
	mov	DWORD PTR _m$[ebp], edx
	cmp	DWORD PTR _gauss2D_num, edx
	jle	$LN7@facet_2for@6
	mov	ecx, DWORD PTR _web+616
	push	ebx
	push	esi
$LN21@facet_2for@6:

; 457  :   { 
; 458  :     f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	mov	esi, DWORD PTR [edi+1268]
	fild	DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [esi+edx*4]
	add	ecx, ecx
	fstp	QWORD PTR [edx+ecx*8]

; 459  :     for ( i = 0, k = 0 ; i < SDIM ; i++ )

	mov	ecx, DWORD PTR _web+616
	xor	ebx, ebx
	mov	DWORD PTR _k$[ebp], ebx
	cmp	ecx, ebx
	jle	$LN8@facet_2for@6

; 457  :   { 
; 458  :     f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	mov	esi, 1
	mov	DWORD PTR tv353[ebp], esi
$LN20@facet_2for@6:

; 460  :       for ( j = i+1 ; j < SDIM ; j++,k++ )

	cmp	esi, ecx
	jge	SHORT $LN5@facet_2for@6
	mov	ecx, DWORD PTR _k$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4+232]
	mov	DWORD PTR tv332[ebp], edx
	npad	4
$LL36@facet_2for@6:

; 461  :       { REAL  form = gauss2Dwt[m]*
; 462  :            eval(mi->expr[k],f_info->gauss_pt[m],f_info->id,NULL);

	mov	eax, DWORD PTR [edi]
	fstp	ST(0)
	mov	ecx, DWORD PTR [edi+1268]
	mov	edx, DWORD PTR _m$[ebp]
	push	0
	push	eax
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR tv332[ebp]
	mov	edx, DWORD PTR [ecx]
	push	eax
	push	edx
	call	_eval
	mov	eax, DWORD PTR _gauss2Dwt
	mov	ecx, DWORD PTR _m$[ebp]
	fmul	QWORD PTR [eax+ecx*8]

; 463  :         value += (f_info->sides[0][0][i]*f_info->sides[0][1][j]
; 464  :                  - f_info->sides[0][0][j]*f_info->sides[0][1][i])*form;

	mov	edx, DWORD PTR [edi+1276]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	fld	QWORD PTR [ebx+eax]
	inc	DWORD PTR _k$[ebp]
	fmul	QWORD PTR [ecx+esi*8]
	add	DWORD PTR tv332[ebp], 4
	fld	QWORD PTR [ebx+ecx]
	mov	ecx, DWORD PTR _web+616
	fmul	QWORD PTR [eax+esi*8]
	inc	esi
	add	esp, 16					; 00000010H
	fsubp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR _value$[ebp]
	fst	QWORD PTR _value$[ebp]
	cmp	esi, ecx
	jl	SHORT $LL36@facet_2for@6

; 460  :       for ( j = i+1 ; j < SDIM ; j++,k++ )

	mov	eax, DWORD PTR _mi$[ebp]
	mov	esi, DWORD PTR tv353[ebp]
$LN5@facet_2for@6:

; 459  :     for ( i = 0, k = 0 ; i < SDIM ; i++ )

	inc	esi
	lea	edx, DWORD PTR [esi-1]
	add	ebx, 8
	mov	DWORD PTR tv353[ebp], esi
	cmp	edx, ecx
	jl	$LN20@facet_2for@6
$LN8@facet_2for@6:

; 455  : 
; 456  :   for ( m = 0 ; m < gauss2D_num ; m++ )

	mov	edx, DWORD PTR _m$[ebp]
	inc	edx
	mov	DWORD PTR _m$[ebp], edx
	cmp	edx, DWORD PTR _gauss2D_num
	jl	$LN21@facet_2for@6
	pop	esi
	pop	ebx
$LN7@facet_2for@6:

; 465  :       }
; 466  :   }
; 467  :   return value*value/4;  /* 2 is triangle factor for normal */

	fmul	ST(0), ST(0)
	pop	edi
	fmul	QWORD PTR __real@3fd0000000000000

; 468  : } // end facet_2form_sq_integral()

	mov	esp, ebp
	pop	ebp
	ret	0
_facet_2form_sq_integral ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_facet_2form_sq_integral_grad
EXTRN	_dot:PROC
EXTRN	_gauss2Dpt:DWORD
; Function compile flags: /Ogtp
;	COMDAT _facet_2form_sq_integral_grad
_TEXT	SEGMENT
_mi$ = -2108						; size = 4
_value$ = -2104						; size = 8
_weight$89422 = -2096					; size = 8
_f_info$GSCopy$ = -2088					; size = 4
tv2441 = -2084						; size = 4
tv2796 = -2080						; size = 4
tv2870 = -2076						; size = 4
tv2868 = -2072						; size = 4
_sum$ = -2068						; size = 8
tv3015 = -2064						; size = 4
tv1840 = -2064						; size = 4
tv2663 = -2060						; size = 4
tv5042 = -2056						; size = 4
_m$ = -2052						; size = 4
_j$ = -2048						; size = 4
tv5281 = -2044						; size = 8
tv5276 = -2044						; size = 8
tv5236 = -2044						; size = 8
tv4948 = -2040						; size = 4
tv2970 = -2040						; size = 4
tv1764 = -2040						; size = 4
tv1707 = -2040						; size = 4
_k$ = -2036						; size = 4
tv2804 = -2032						; size = 4
_i$ = -2032						; size = 4
tv4844 = -2028						; size = 4
tv3759 = -2028						; size = 4
tv2968 = -2028						; size = 4
tv4706 = -2024						; size = 4
tv3672 = -2024						; size = 4
tv2806 = -2024						; size = 4
_derivs$ = -2020					; size = 1728
_form$ = -292						; size = 288
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_facet_2form_sq_integral_grad PROC			; COMDAT

; 479  : { int m,n,i,j,k;

	push	ebp
	mov	ebp, esp
	sub	esp, 2108				; 0000083cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 480  :   REAL value = 0.0;

	fldz
	push	esi
	mov	esi, DWORD PTR _f_info$[ebp]
	fld	ST(0)

; 481  :   REAL form[MAXCOORD][MAXCOORD]; /* as antisymmetric matrix */
; 482  :   REAL derivs[MAXCOORD][MAXCOORD][MAXCOORD]; /* coord is last index */
; 483  :   REAL sum;
; 484  :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [esi+8]
	fst	QWORD PTR _value$[ebp]
	cdq
	xor	eax, edx
	sub	eax, edx

; 485  : 
; 486  :   for ( i = 0 ; i < SDIM  ; i++ ) form[i][i] = 0.0;

	mov	edx, DWORD PTR _web+616
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list
	push	edi
	mov	DWORD PTR _f_info$GSCopy$[ebp], esi
	mov	DWORD PTR _mi$[ebp], eax
	test	edx, edx
	jle	$LN87@facet_2for@7
	lea	eax, DWORD PTR _form$[ebp]
	mov	ecx, edx
	jmp	SHORT $LN39@facet_2for@7
$LN91@facet_2for@7:
	fxch	ST(1)
$LN39@facet_2for@7:
	fxch	ST(1)
	add	eax, 56					; 00000038H
	dec	ecx
	fst	QWORD PTR [eax-56]
	jne	SHORT $LN91@facet_2for@7
	fstp	ST(0)
$LN37@facet_2for@7:

; 487  :   for ( m = 0 ; m < gauss2D_num ; m++ )

	xor	eax, eax
	mov	DWORD PTR _m$[ebp], eax
	cmp	DWORD PTR _gauss2D_num, eax
	jle	$LN34@facet_2for@7
	mov	DWORD PTR tv5042[ebp], 16		; 00000010H
	push	ebx
$LN78@facet_2for@7:

; 488  :   { REAL weight = gauss2Dwt[m];

	mov	ecx, DWORD PTR _gauss2Dwt
	fld	QWORD PTR [ecx+eax*8]

; 489  :     f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	mov	ecx, DWORD PTR [esi+1268]
	mov	eax, DWORD PTR [ecx+eax*4]
	fstp	QWORD PTR _weight$89422[ebp]
	fild	DWORD PTR _m$[ebp]
	add	edx, edx
	fstp	QWORD PTR [eax+edx*8]

; 490  :     for ( i = 0, k = 0 ; i < SDIM ; i++ ) 

	mov	edx, DWORD PTR _web+616
	xor	eax, eax
	mov	DWORD PTR _k$[ebp], eax
	cmp	edx, eax
	jle	$LN79@facet_2for@7

; 488  :   { REAL weight = gauss2Dwt[m];

	mov	ebx, 1
	lea	edi, DWORD PTR _derivs$[ebp]
	mov	DWORD PTR tv2968[ebp], eax
	mov	DWORD PTR tv2970[ebp], ebx
	mov	DWORD PTR tv3015[ebp], edi
$LN33@facet_2for@7:

; 491  :     { for ( n = 0 ; n < SDIM ;n++ ) derivs[i][i][n] = 0.0;

	test	edx, edx
	jle	SHORT $LN30@facet_2for@7
	mov	ecx, edx
	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	xor	eax, eax
	rep stosd
$LN30@facet_2for@7:

; 492  :       for ( j = i+1 ; j < SDIM ; j++,k++ ) 

	mov	DWORD PTR _j$[ebp], ebx
	cmp	ebx, edx
	jge	$LN32@facet_2for@7
	mov	edi, DWORD PTR tv2968[ebp]
	fstp	ST(0)
	lea	eax, DWORD PTR [ebx+edi]
	lea	ecx, DWORD PTR [eax+eax*2]
	add	ecx, ecx
	mov	DWORD PTR tv2663[ebp], ecx
	lea	ecx, DWORD PTR [ebx+edi+5]
	lea	ebx, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR _form$[ebp+eax*8]
	lea	edi, DWORD PTR [ecx+ecx*2]
	add	edi, edi
	mov	DWORD PTR tv2804[ebp], eax
	mov	eax, DWORD PTR _mi$[ebp]
	mov	DWORD PTR tv2796[ebp], edi
	mov	edi, DWORD PTR _k$[ebp]
	lea	eax, DWORD PTR [eax+edi*4+232]
	mov	DWORD PTR tv2806[ebp], eax
	lea	eax, DWORD PTR [ecx+ecx*2]
	add	ebx, ebx
	add	eax, eax
	lea	eax, DWORD PTR _derivs$[ebp+eax*8+8]
	lea	ecx, DWORD PTR _form$[ebp+ecx*8]
	lea	ebx, DWORD PTR _derivs$[ebp+ebx*8+8]
	mov	DWORD PTR tv2868[ebp], eax
	mov	DWORD PTR tv2870[ebp], ecx
$LL82@facet_2for@7:

; 493  :       { eval_all(mi->expr[k],f_info->gauss_pt[m],SDIM,
; 494  :               form[i]+j, derivs[i][j],f_info->id);

	mov	eax, DWORD PTR [esi]
	mov	edi, DWORD PTR tv2804[ebp]
	push	eax
	mov	eax, DWORD PTR _m$[ebp]
	lea	ecx, DWORD PTR [ebx-8]
	push	ecx
	push	edi
	push	edx
	mov	edx, DWORD PTR [esi+1268]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR tv2806[ebp]
	mov	eax, DWORD PTR [edx]
	push	ecx
	push	eax
	call	_eval_all

; 495  :         form[j][i] = - form[i][j];

	fld	QWORD PTR [edi]

; 496  :         for ( n = 0 ; n < SDIM ;n++ )

	mov	edx, DWORD PTR _web+616
	fchs
	mov	ecx, DWORD PTR tv2870[ebp]
	add	esp, 24					; 00000018H
	fstp	QWORD PTR [ecx]
	xor	edi, edi
	cmp	edx, 4
	jl	SHORT $LC69@facet_2for@7

; 493  :       { eval_all(mi->expr[k],f_info->gauss_pt[m],SDIM,
; 494  :               form[i]+j, derivs[i][j],f_info->id);

	mov	ecx, DWORD PTR tv2868[ebp]
	lea	esi, DWORD PTR [edx-4]
	shr	esi, 2
	inc	esi
	mov	eax, ebx
	lea	edi, DWORD PTR [esi*4]

; 496  :         for ( n = 0 ; n < SDIM ;n++ )

$LL70@facet_2for@7:

; 497  :              derivs[j][i][n] = -derivs[i][j][n];

	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	fchs
	add	ecx, 32					; 00000020H
	dec	esi
	fstp	QWORD PTR [ecx-40]
	fld	QWORD PTR [eax-32]
	fchs
	fstp	QWORD PTR [ecx-32]
	fld	QWORD PTR [eax-24]
	fchs
	fstp	QWORD PTR [ecx-24]
	fld	QWORD PTR [eax-16]
	fchs
	fstp	QWORD PTR [ecx-16]
	jne	SHORT $LL70@facet_2for@7

; 493  :       { eval_all(mi->expr[k],f_info->gauss_pt[m],SDIM,
; 494  :               form[i]+j, derivs[i][j],f_info->id);

	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
$LC69@facet_2for@7:

; 496  :         for ( n = 0 ; n < SDIM ;n++ )

	cmp	edi, edx
	jge	SHORT $LN26@facet_2for@7
	mov	eax, DWORD PTR tv2796[ebp]
	add	eax, edi
	lea	ecx, DWORD PTR _derivs$[ebp+eax*8]
	mov	DWORD PTR tv2441[ebp], ecx
	mov	ecx, DWORD PTR tv2663[ebp]
	add	ecx, edi
	mov	eax, edx
	lea	ecx, DWORD PTR _derivs$[ebp+ecx*8]
	sub	eax, edi
	npad	2
$LC24@facet_2for@7:

; 497  :              derivs[j][i][n] = -derivs[i][j][n];

	fld	QWORD PTR [ecx]
	mov	edi, DWORD PTR tv2441[ebp]
	fchs
	add	edi, 8
	fstp	QWORD PTR [edi-8]
	add	ecx, 8
	dec	eax
	mov	DWORD PTR tv2441[ebp], edi
	jne	SHORT $LC24@facet_2for@7
$LN26@facet_2for@7:

; 492  :       for ( j = i+1 ; j < SDIM ; j++,k++ ) 

	mov	eax, DWORD PTR _j$[ebp]
	add	DWORD PTR tv2804[ebp], 8
	add	DWORD PTR tv2870[ebp], 48		; 00000030H
	add	DWORD PTR tv2868[ebp], 288		; 00000120H
	add	DWORD PTR tv2796[ebp], 36		; 00000024H
	add	DWORD PTR tv2663[ebp], 6
	inc	DWORD PTR _k$[ebp]
	add	DWORD PTR tv2806[ebp], 4
	inc	eax
	add	ebx, 48					; 00000030H
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, edx
	jl	$LL82@facet_2for@7
	fld	QWORD PTR _value$[ebp]
	mov	ebx, DWORD PTR tv2970[ebp]
$LN32@facet_2for@7:

; 490  :     for ( i = 0, k = 0 ; i < SDIM ; i++ ) 

	mov	edi, DWORD PTR tv3015[ebp]
	add	DWORD PTR tv2968[ebp], 6
	inc	ebx
	add	edi, 336				; 00000150H
	lea	ecx, DWORD PTR [ebx-1]
	mov	DWORD PTR tv3015[ebp], edi
	mov	DWORD PTR tv2970[ebp], ebx
	cmp	ecx, edx
	jl	$LN33@facet_2for@7
$LN79@facet_2for@7:

; 498  :       }
; 499  :     }
; 500  :     for ( i = 0, sum = 0.0 ; i < SDIM ; i++ )

	fldz
	xor	edi, edi
	mov	DWORD PTR _i$[ebp], edi
	cmp	edx, edi
	jle	$LN80@facet_2for@7
	lea	eax, DWORD PTR _form$[ebp+8]
	mov	DWORD PTR tv3672[ebp], edi
	mov	DWORD PTR tv3759[ebp], eax
$LN84@facet_2for@7:

; 501  :      for ( j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	cmp	edx, 4
	jl	SHORT $LC72@facet_2for@7

; 498  :       }
; 499  :     }
; 500  :     for ( i = 0, sum = 0.0 ; i < SDIM ; i++ )

	mov	ecx, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax]

; 501  :      for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR [eax+4]
	lea	ecx, DWORD PTR [ecx+edi*8]
	lea	edi, DWORD PTR [edx-4]
	shr	edi, 2
	add	eax, 16					; 00000010H
	inc	edi
	lea	ebx, DWORD PTR [edi*4]
	mov	DWORD PTR tv1707[ebp], ecx
	mov	ecx, DWORD PTR tv3759[ebp]
	mov	DWORD PTR _j$[ebp], ebx
	mov	ebx, DWORD PTR tv1707[ebp]
$LN73@facet_2for@7:

; 502  :         sum += f_info->sides[0][0][i]*form[i][j]*f_info->sides[0][1][j];

	fld	QWORD PTR [ecx-8]
	add	eax, 32					; 00000020H
	fmul	QWORD PTR [ebx]
	add	ecx, 32					; 00000020H
	dec	edi
	fmul	QWORD PTR [eax-48]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx]
	fmul	QWORD PTR [ecx-32]
	fmul	QWORD PTR [eax-40]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-24]
	fmul	QWORD PTR [ebx]
	fmul	QWORD PTR [eax-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-16]
	fmul	QWORD PTR [ebx]
	fmul	QWORD PTR [eax-24]
	faddp	ST(1), ST(0)
	jne	SHORT $LN73@facet_2for@7

; 501  :      for ( j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR _j$[ebp]
	mov	edi, DWORD PTR _i$[ebp]
$LC72@facet_2for@7:
	cmp	ecx, edx
	jge	SHORT $LN20@facet_2for@7

; 498  :       }
; 499  :     }
; 500  :     for ( i = 0, sum = 0.0 ; i < SDIM ; i++ )

	mov	eax, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [eax]
	mov	ebx, DWORD PTR [eax]

; 501  :      for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR [eax+4]
	lea	edi, DWORD PTR [ebx+edi*8]
	mov	DWORD PTR tv1764[ebp], edi
	mov	edi, DWORD PTR tv3672[ebp]
	lea	ebx, DWORD PTR [eax+ecx*8]
	add	edi, ecx
	mov	eax, edx
	lea	edi, DWORD PTR _form$[ebp+edi*8]
	sub	eax, ecx
$LC18@facet_2for@7:

; 502  :         sum += f_info->sides[0][0][i]*form[i][j]*f_info->sides[0][1][j];

	fld	QWORD PTR [edi]
	mov	ecx, DWORD PTR tv1764[ebp]
	fmul	QWORD PTR [ecx]
	add	edi, 8
	add	ebx, 8
	dec	eax
	fmul	QWORD PTR [ebx-8]
	faddp	ST(1), ST(0)
	jne	SHORT $LC18@facet_2for@7

; 501  :      for ( j = 0 ; j < SDIM ; j++ )

	mov	edi, DWORD PTR _i$[ebp]
$LN20@facet_2for@7:

; 498  :       }
; 499  :     }
; 500  :     for ( i = 0, sum = 0.0 ; i < SDIM ; i++ )

	add	DWORD PTR tv3759[ebp], 48		; 00000030H
	add	DWORD PTR tv3672[ebp], 6
	inc	edi
	mov	DWORD PTR _i$[ebp], edi
	cmp	edi, edx
	jl	$LN84@facet_2for@7
$LN80@facet_2for@7:

; 503  :     value += weight*sum;

	fmul	QWORD PTR _weight$89422[ebp]

; 504  :     for ( k = 0 ; k < SDIM ; k++ )

	xor	edi, edi
	mov	DWORD PTR _k$[ebp], edi
	faddp	ST(1), ST(0)
	fst	QWORD PTR _value$[ebp]
	test	edx, edx
	jle	$LN35@facet_2for@7
	lea	ebx, DWORD PTR _form$[ebp]
	fstp	ST(0)
	mov	DWORD PTR tv4948[ebp], ebx
$LL77@facet_2for@7:

; 505  :     { for ( i = 0, sum = 0.0 ; i < SDIM ; i++ )

	fldz
	xor	ecx, ecx
	fst	QWORD PTR _sum$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
	test	edx, edx
	jle	$LN10@facet_2for@7
	lea	eax, DWORD PTR _derivs$[ebp+edi*8+48]
	mov	DWORD PTR tv4706[ebp], ecx
	mov	DWORD PTR tv4844[ebp], eax
$LN81@facet_2for@7:

; 506  :         for ( j = 0 ; j < SDIM ; j++ )

	xor	ebx, ebx
	cmp	edx, 4
	jl	SHORT $LC75@facet_2for@7

; 505  :     { for ( i = 0, sum = 0.0 ; i < SDIM ; i++ )

	mov	eax, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [eax]
	mov	esi, DWORD PTR [eax]

; 506  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR [eax+4]
	lea	edi, DWORD PTR [esi+ecx*8]
	mov	ecx, DWORD PTR tv4844[ebp]
	lea	esi, DWORD PTR [edx-4]
	shr	esi, 2
	add	eax, 16					; 00000010H
	inc	esi
	lea	ebx, DWORD PTR [esi*4]
$LN76@facet_2for@7:

; 507  :           sum += f_info->sides[0][0][i]*derivs[i][j][k]*f_info->sides[0][1][j];

	fld	QWORD PTR [ecx-48]
	add	ecx, 192				; 000000c0H
	fmul	QWORD PTR [edi]
	add	eax, 32					; 00000020H
	dec	esi
	fmul	QWORD PTR [eax-48]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi]
	fmul	QWORD PTR [ecx-192]
	fmul	QWORD PTR [eax-40]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-144]
	fmul	QWORD PTR [edi]
	fmul	QWORD PTR [eax-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-96]
	fmul	QWORD PTR [edi]
	fmul	QWORD PTR [eax-24]
	faddp	ST(1), ST(0)
	jne	SHORT $LN76@facet_2for@7

; 506  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edi, DWORD PTR _k$[ebp]
$LC75@facet_2for@7:
	cmp	ebx, edx
	jge	SHORT $LN11@facet_2for@7

; 505  :     { for ( i = 0, sum = 0.0 ; i < SDIM ; i++ )

	mov	eax, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [eax]
	mov	edi, DWORD PTR [eax]

; 506  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR [eax+4]
	lea	ecx, DWORD PTR [edi+ecx*8]
	lea	edi, DWORD PTR [eax+ebx*8]
	mov	eax, DWORD PTR tv4706[ebp]
	add	eax, ebx
	mov	DWORD PTR tv1840[ebp], ecx
	mov	ecx, DWORD PTR _k$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	ecx, DWORD PTR [ecx+eax*2]
	mov	eax, edx
	lea	ecx, DWORD PTR _derivs$[ebp+ecx*8]
	sub	eax, ebx
$LC9@facet_2for@7:

; 507  :           sum += f_info->sides[0][0][i]*derivs[i][j][k]*f_info->sides[0][1][j];

	fld	QWORD PTR [ecx]
	mov	ebx, DWORD PTR tv1840[ebp]
	fmul	QWORD PTR [ebx]
	add	ecx, 48					; 00000030H
	add	edi, 8
	dec	eax
	fmul	QWORD PTR [edi-8]
	faddp	ST(1), ST(0)
	jne	SHORT $LC9@facet_2for@7

; 506  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edi, DWORD PTR _k$[ebp]
$LN11@facet_2for@7:

; 505  :     { for ( i = 0, sum = 0.0 ; i < SDIM ; i++ )

	add	DWORD PTR tv4844[ebp], 288		; 00000120H
	add	DWORD PTR tv4706[ebp], 6
	inc	ecx
	mov	DWORD PTR _i$[ebp], ecx
	cmp	ecx, edx
	jl	$LN81@facet_2for@7
	mov	ebx, DWORD PTR tv4948[ebp]

; 507  :           sum += f_info->sides[0][0][i]*derivs[i][j][k]*f_info->sides[0][1][j];

	fst	QWORD PTR _sum$[ebp]
$LN10@facet_2for@7:

; 508  :       f_info->grad[0][k] += weight*(gauss2Dpt[m][0]*sum
; 509  :                     - SDIM_dot(form[k],f_info->sides[0][1])
; 510  :                     + SDIM_dot(form[k],f_info->sides[0][0]))/2;

	mov	eax, DWORD PTR _gauss2Dpt
	mov	ecx, DWORD PTR tv5042[ebp]
	fmul	QWORD PTR [ecx+eax-16]
	push	edx
	mov	edx, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	fstp	QWORD PTR tv5281[ebp]
	push	ecx
	push	ebx
	call	_dot
	fsubr	QWORD PTR tv5281[ebp]
	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR [esi+1276]
	mov	ecx, DWORD PTR [eax]
	fstp	QWORD PTR tv5276[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	ebx
	call	_dot
	fadd	QWORD PTR tv5276[ebp]
	mov	eax, DWORD PTR [esi+1336]
	mov	ecx, DWORD PTR [eax]
	fmul	QWORD PTR _weight$89422[ebp]
	mov	eax, ecx
	fmul	QWORD PTR __real@3fe0000000000000
	fadd	QWORD PTR [ecx+edi*8]
	fstp	QWORD PTR [eax+edi*8]

; 511  :       f_info->grad[1][k] += weight*(gauss2Dpt[m][1]*sum
; 512  :                     + SDIM_dot(form[k],f_info->sides[0][1]))/2;

	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [edx]
	push	ecx
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	ebx
	call	_dot
	mov	edx, DWORD PTR _gauss2Dpt
	mov	eax, DWORD PTR tv5042[ebp]
	fld	QWORD PTR [eax+edx-8]
	mov	ecx, DWORD PTR [esi+1336]
	fld	QWORD PTR _sum$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	fmul	ST(1), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR _weight$89422[ebp]
	fmul	QWORD PTR __real@3fe0000000000000
	fadd	QWORD PTR [edx+edi*8]
	fstp	QWORD PTR [edx+edi*8]

; 513  :       f_info->grad[2][k] += weight*(gauss2Dpt[m][2]*sum
; 514  :                     - SDIM_dot(form[k],f_info->sides[0][0]))/2;

	mov	ecx, DWORD PTR _gauss2Dpt
	mov	edx, DWORD PTR _web+616
	fmul	QWORD PTR [eax+ecx]
	mov	eax, DWORD PTR [esi+1276]
	mov	ecx, DWORD PTR [eax]
	push	edx
	mov	edx, DWORD PTR [ecx]
	fstp	QWORD PTR tv5236[ebp]
	push	edx
	push	ebx
	call	_dot
	fsubr	QWORD PTR tv5236[ebp]
	mov	eax, DWORD PTR [esi+1336]
	mov	ecx, DWORD PTR [eax+8]
	fmul	QWORD PTR _weight$89422[ebp]
	mov	eax, ecx
	inc	edi
	add	ebx, 48					; 00000030H
	fmul	QWORD PTR __real@3fe0000000000000
	add	esp, 48					; 00000030H
	mov	DWORD PTR _k$[ebp], edi
	mov	DWORD PTR tv4948[ebp], ebx
	fadd	QWORD PTR [ecx+edi*8-8]
	fstp	QWORD PTR [eax+edi*8-8]
	mov	edx, DWORD PTR _web+616
	cmp	edi, edx
	jl	$LL77@facet_2for@7

; 504  :     for ( k = 0 ; k < SDIM ; k++ )

	fld	QWORD PTR _value$[ebp]
$LN35@facet_2for@7:

; 487  :   for ( m = 0 ; m < gauss2D_num ; m++ )

	mov	eax, DWORD PTR _m$[ebp]
	add	DWORD PTR tv5042[ebp], 24		; 00000018H
	inc	eax
	mov	DWORD PTR _m$[ebp], eax
	cmp	eax, DWORD PTR _gauss2D_num
	jl	$LN78@facet_2for@7
	pop	ebx
$LN34@facet_2for@7:

; 515  :     }
; 516  :   }
; 517  :   /* adjust grad for being the square */
; 518  :   for ( i = 0 ; i < FACET_VERTS ; i++ )

	xor	edi, edi
$LN85@facet_2for@7:

; 519  :     for ( k = 0 ; k < SDIM ; k++ )

	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN5@facet_2for@7
$LN3@facet_2for@7:
	mov	ecx, DWORD PTR [esi+1336]
	mov	edx, DWORD PTR [edi+ecx]

; 520  :       f_info->grad[i][k] *= value;

	fld	QWORD PTR [edx+eax*8]
	lea	ecx, DWORD PTR [edx+eax*8]
	fmul	ST(0), ST(1)
	inc	eax
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR _web+616
	cmp	eax, edx
	jl	SHORT $LN3@facet_2for@7
$LN5@facet_2for@7:

; 515  :     }
; 516  :   }
; 517  :   /* adjust grad for being the square */
; 518  :   for ( i = 0 ; i < FACET_VERTS ; i++ )

	add	edi, 4
	cmp	edi, 12					; 0000000cH
	jl	SHORT $LN85@facet_2for@7

; 521  : 
; 522  :   return value*value/4;
; 523  : } // end facet_2form_sq_integral_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fmul	ST(0), ST(0)
	pop	edi
	xor	ecx, ebp
	fmul	QWORD PTR __real@3fd0000000000000
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN87@facet_2for@7:

; 485  : 
; 486  :   for ( i = 0 ; i < SDIM  ; i++ ) form[i][i] = 0.0;

	fstp	ST(1)
	jmp	$LN37@facet_2for@7
_facet_2form_sq_integral_grad ENDP
_TEXT	ENDS
PUBLIC	_gravity_init
EXTRN	_gen_quant_list:DWORD
EXTRN	_gravity_quantity_num:DWORD
; Function compile flags: /Ogtp
;	COMDAT _gravity_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_gravity_init PROC					; COMDAT

; 545  :   /* method modulus is gravitation constant */
; 546  :   if ( gravity_quantity_num >= 0 )

	mov	eax, DWORD PTR _gravity_quantity_num
	test	eax, eax
	js	SHORT $LN1@gravity_in

; 547  :      GEN_QUANT(gravity_quantity_num)->modulus = 
; 548  :          web.gravflag ? web.grav_const : 0.0;

	cmp	DWORD PTR _web+824, 0
	je	SHORT $LN4@gravity_in
	fld	QWORD PTR _web+832
	mov	ecx, DWORD PTR _gen_quant_list
	imul	eax, 368				; 00000170H
	fstp	QWORD PTR [eax+ecx+176]

; 549  : } // end gravity_init()

	ret	0
$LN4@gravity_in:

; 547  :      GEN_QUANT(gravity_quantity_num)->modulus = 
; 548  :          web.gravflag ? web.grav_const : 0.0;

	fldz
	mov	ecx, DWORD PTR _gen_quant_list
	imul	eax, 368				; 00000170H
	fstp	QWORD PTR [eax+ecx+176]
$LN1@gravity_in:

; 549  : } // end gravity_init()

	ret	0
_gravity_init ENDP
_TEXT	ENDS
PUBLIC	_full_gravity_init
; Function compile flags: /Ogtp
;	COMDAT _full_gravity_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_full_gravity_init PROC					; COMDAT

; 562  : {

	push	ebp
	mov	ebp, esp

; 563  :   /* method modulus is gravitation constant */
; 564  :   mi->flags &= FAKE_IMPLICIT;

	mov	eax, DWORD PTR _mi$[ebp]
	and	DWORD PTR [eax+140], 67108864		; 04000000H

; 565  :   GEN_QUANT(gravity_quantity_num)->modulus = 
; 566  :          web.gravflag ? web.grav_const : 0.0;

	cmp	DWORD PTR _web+824, 0
	je	SHORT $LN3@full_gravi
	fld	QWORD PTR _web+832
	jmp	SHORT $LN4@full_gravi
$LN3@full_gravi:
	fldz
$LN4@full_gravi:
	mov	eax, DWORD PTR _gravity_quantity_num
	mov	ecx, DWORD PTR _gen_quant_list
	imul	eax, 368				; 00000170H
	fstp	QWORD PTR [eax+ecx+176]

; 567  : } // end full_gravity_init()

	pop	ebp
	ret	0
_full_gravity_init ENDP
_TEXT	ENDS
PUBLIC	_gravity_all_q
EXTRN	_ctrl_num:DWORD
EXTRN	_gpoly:DWORD
EXTRN	_gpolypartial:DWORD
; Function compile flags: /Ogtp
;	COMDAT _gravity_all_q
_TEXT	SEGMENT
_value$ = -68						; size = 8
_gdensity$ = -60					; size = 8
_tang$ = -52						; size = 4
tv2431 = -48						; size = 4
tv2369 = -48						; size = 4
_kk$ = -48						; size = 4
_h$ = -44						; size = 4
tv2420 = -40						; size = 4
tv917 = -40						; size = 4
tv2439 = -36						; size = 4
_g$ = -32						; size = 4
_m$ = -28						; size = 4
tv1001 = -24						; size = 4
tv2409 = -20						; size = 4
tv891 = -16						; size = 4
tv2417 = -12						; size = 4
tv1871 = -8						; size = 4
tv2337 = -4						; size = 4
_f_info$ = 8						; size = 4
_mode$ = 12						; size = 4
_gravity_all_q PROC					; COMDAT

; 681  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H

; 682  :   int k,kk,m;
; 683  :   REAL jac; /* jacobian */
; 684  :   REAL **x,**tang;
; 685  :   REAL **g=NULL,****h=NULL;
; 686  :   REAL value = 0.0;

	fldz

; 687  :   body_id b_id;
; 688  :   REAL gdensity = 1.0;
; 689  :   struct method_instance *mi = METH_INSTANCE(f_info->method);
; 690  : 
; 691  :   x = f_info->x;
; 692  : 
; 693  :   if ( mode == METHOD_GRADIENT ) 

	mov	ecx, DWORD PTR _mode$[ebp]
	push	ebx
	fst	QWORD PTR _value$[ebp]
	fld1
	push	esi
	mov	esi, DWORD PTR _f_info$[ebp]
	fstp	QWORD PTR _gdensity$[ebp]
	mov	eax, DWORD PTR [esi+8]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list
	push	edi
	xor	edi, edi
	mov	DWORD PTR _g$[ebp], edi
	mov	DWORD PTR _h$[ebp], edi
	cmp	ecx, 4321				; 000010e1H
	jne	SHORT $LN24@gravity_al

; 694  :   { g = f_info->grad;

	mov	ecx, DWORD PTR [esi+1336]
	mov	DWORD PTR _g$[ebp], ecx
	jmp	SHORT $LN22@gravity_al
$LN24@gravity_al:

; 695  :   }
; 696  :   else if ( mode == METHOD_HESSIAN ) 

	cmp	ecx, 8763				; 0000223bH
	jne	SHORT $LN22@gravity_al

; 697  :   { g = f_info->grad;

	mov	edx, DWORD PTR [esi+1336]

; 698  :     h = f_info->hess;

	mov	ecx, DWORD PTR [esi+1340]
	mov	DWORD PTR _g$[ebp], edx
	mov	DWORD PTR _h$[ebp], ecx
$LN22@gravity_al:

; 699  :   }
; 700  : 
; 701  :   if ( mi->flags & (IMPLICIT_INSTANCE|FAKE_IMPLICIT) )

	test	DWORD PTR [eax+140], 69206016		; 04200000H
	je	SHORT $LN18@gravity_al

; 702  :   { /* include density difference */
; 703  :      b_id = get_facet_body(f_info->id);

	mov	edi, DWORD PTR [esi]
	fstp	ST(0)
	push	edi
	call	_get_facet_body

; 704  :      gdensity = 0.0;

	fldz

; 705  :      if ( valid_id(b_id) )

	mov	ebx, DWORD PTR _web+348
	fst	QWORD PTR _gdensity$[ebp]
	add	esp, 4
	test	eax, 268435456				; 10000000H
	je	SHORT $LN107@gravity_al

; 706  :           gdensity += get_body_density(b_id);

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+eax*4]
	fadd	QWORD PTR [edx+344]
	fstp	QWORD PTR _gdensity$[ebp]
	jmp	SHORT $LN20@gravity_al
$LN107@gravity_al:
	fstp	ST(0)
$LN20@gravity_al:

; 707  :      b_id = get_facet_body(facet_inverse(f_info->id));

	xor	edi, 134217728				; 08000000H
	push	edi
	call	_get_facet_body
	add	esp, 4

; 708  :      if ( valid_id(b_id) )

	test	eax, 268435456				; 10000000H
	je	SHORT $LN48@gravity_al

; 709  :           gdensity -= get_body_density(b_id);

	fld	QWORD PTR _gdensity$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	fsub	QWORD PTR [eax+344]
	fstp	QWORD PTR _gdensity$[ebp]
$LN48@gravity_al:

; 710  :      if ( gdensity == 0.0 ) return 0.0;

	fld	QWORD PTR _gdensity$[ebp]
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jnp	$LN25@gravity_al
	xor	edi, edi
$LN18@gravity_al:

; 711  :   }
; 712  : 
; 713  :   for ( m = 0 ; m < gauss2D_num ; m++ )

	mov	DWORD PTR _m$[ebp], edi
	cmp	DWORD PTR _gauss2D_num, edi
	jle	$LN101@gravity_al
	mov	edi, DWORD PTR _gpolypartial
	fld	QWORD PTR __real@3fe0000000000000
	mov	eax, DWORD PTR _gpoly
	mov	edx, DWORD PTR _ctrl_num
	sub	eax, edi
	mov	DWORD PTR tv2337[ebp], edi
	mov	DWORD PTR tv2417[ebp], eax
	jmp	SHORT $LN17@gravity_al
$LN52@gravity_al:
	fldz
	mov	eax, DWORD PTR tv2417[ebp]
	fxch	ST(1)
$LN17@gravity_al:

; 714  :    { REAL weight = gdensity*gauss2Dwt[m]/2;

	mov	ebx, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _gauss2Dwt
	fld	QWORD PTR [ecx+ebx*8]

; 715  :      REAL z;
; 716  : 
; 717  :       for ( k = 0, z = 0.0 ; k < ctrl_num ; k++ )

	xor	ebx, ebx
	fmul	QWORD PTR _gdensity$[ebp]
	fmul	ST(0), ST(1)
	cmp	edx, 4
	jl	SHORT $LN54@gravity_al

; 714  :    { REAL weight = gdensity*gauss2Dwt[m]/2;

	mov	eax, DWORD PTR [eax+edi]
	lea	ecx, DWORD PTR [esi+424]
	lea	esi, DWORD PTR [edx-4]
	shr	esi, 2
	add	eax, 16					; 00000010H
	inc	esi
	lea	ebx, DWORD PTR [esi*4]

; 715  :      REAL z;
; 716  : 
; 717  :       for ( k = 0, z = 0.0 ; k < ctrl_num ; k++ )

$LN47@gravity_al:

; 718  :               z += gpoly[m][k]*x[k][2];

	mov	edi, DWORD PTR [ecx-8]
	fld	QWORD PTR [edi+16]
	mov	edi, DWORD PTR [ecx-4]
	fmul	QWORD PTR [eax-16]
	add	eax, 32					; 00000020H
	add	ecx, 16					; 00000010H
	dec	esi
	faddp	ST(3), ST(0)
	fld	QWORD PTR [edi+16]
	mov	edi, DWORD PTR [ecx-16]
	fmul	QWORD PTR [eax-40]
	faddp	ST(3), ST(0)
	fld	QWORD PTR [edi+16]
	mov	edi, DWORD PTR [ecx-12]
	fmul	QWORD PTR [eax-32]
	faddp	ST(3), ST(0)
	fld	QWORD PTR [edi+16]
	fmul	QWORD PTR [eax-24]
	faddp	ST(3), ST(0)
	jne	SHORT $LN47@gravity_al

; 714  :    { REAL weight = gdensity*gauss2Dwt[m]/2;

	mov	edi, DWORD PTR tv2337[ebp]
	mov	esi, DWORD PTR _f_info$[ebp]
	mov	eax, DWORD PTR tv2417[ebp]
$LN54@gravity_al:

; 715  :      REAL z;
; 716  : 
; 717  :       for ( k = 0, z = 0.0 ; k < ctrl_num ; k++ )

	cmp	ebx, edx
	jge	SHORT $LN45@gravity_al
	mov	eax, DWORD PTR [eax+edi]
	lea	eax, DWORD PTR [eax+ebx*8]
$LC14@gravity_al:

; 718  :               z += gpoly[m][k]*x[k][2];

	mov	ecx, DWORD PTR [esi+ebx*4+416]
	fld	QWORD PTR [ecx+16]
	inc	ebx
	fmul	QWORD PTR [eax]
	add	eax, 8
	faddp	ST(3), ST(0)
	cmp	ebx, edx
	jl	SHORT $LC14@gravity_al
$LN45@gravity_al:

; 719  :       tang = f_info->sides[m];
; 720  :       jac = tang[0][0]*tang[1][1] - tang[0][1]*tang[1][0];
; 721  :       value += weight*z*z*jac/2;
; 722  : 
; 723  :       if ( mode == METHOD_VALUE ) continue;

	cmp	DWORD PTR _mode$[ebp], 1767		; 000006e7H
	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [eax+4]
	mov	ebx, DWORD PTR [eax]
	fld	QWORD PTR [ecx+8]
	fmul	QWORD PTR [ebx]
	mov	DWORD PTR _tang$[ebp], eax
	fld	QWORD PTR [ebx+8]
	mov	DWORD PTR tv891[ebp], ebx
	fmul	QWORD PTR [ecx]
	fsubp	ST(1), ST(0)
	fld	ST(3)
	fmul	ST(0), ST(2)
	fld	ST(0)
	fmulp	ST(5), ST(0)
	fld	ST(4)
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(4)
	fadd	QWORD PTR _value$[ebp]
	fstp	QWORD PTR _value$[ebp]
	je	$LN79@gravity_al

; 724  : 
; 725  :       for ( k = 0 ; k < ctrl_num ; k++ )

	xor	esi, esi
	test	edx, edx
	jle	SHORT $LN8@gravity_al
	mov	eax, DWORD PTR [edi]
	fld	ST(4)
	mov	edi, DWORD PTR [eax+4]
	fmul	ST(0), ST(4)
	mov	edx, DWORD PTR tv2337[ebp]
	mov	DWORD PTR tv917[ebp], ecx
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR tv2417[ebp]
	mov	eax, DWORD PTR [eax+edx]
	sub	edi, ecx
	sub	eax, ecx
	mov	DWORD PTR tv2369[ebp], ecx
	mov	DWORD PTR tv2431[ebp], eax
$LN10@gravity_al:

; 726  :       { g[k][0] += weight*z*z/2*(gpolypartial[m][0][k]*tang[1][1]
; 727  :                                               - tang[0][1]*gpolypartial[m][1][k]);

	mov	edx, DWORD PTR tv917[ebp]
	fld	QWORD PTR [edx+8]
	mov	eax, DWORD PTR _g$[ebp]
	fmul	QWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+esi*4]
	fld	QWORD PTR [ebx+8]
	inc	esi
	fmul	QWORD PTR [ecx+edi]
	add	ecx, 8
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]

; 728  :          g[k][1] += weight*z*z/2*(tang[0][0]*gpolypartial[m][1][k]
; 729  :                                               - gpolypartial[m][0][k]*tang[1][0]);

	fld	QWORD PTR [ebx]
	fmul	QWORD PTR [ecx+edi-8]
	fld	QWORD PTR [edx]

; 730  :          g[k][2] += weight*z*gpoly[m][k]*jac;

	mov	edx, DWORD PTR tv2431[ebp]
	fmul	QWORD PTR [ecx-8]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]
	fld	QWORD PTR [ecx+edx-8]
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(3)
	fadd	QWORD PTR [eax+16]
	fstp	QWORD PTR [eax+16]
	mov	edx, DWORD PTR _ctrl_num
	cmp	esi, edx
	jl	SHORT $LN10@gravity_al

; 724  : 
; 725  :       for ( k = 0 ; k < ctrl_num ; k++ )

	mov	edi, DWORD PTR tv2337[ebp]
	fstp	ST(0)
$LN8@gravity_al:

; 731  :       }  
; 732  : 
; 733  :       if ( mode == METHOD_GRADIENT ) continue;

	cmp	DWORD PTR _mode$[ebp], 4321		; 000010e1H
	je	$LN90@gravity_al

; 734  : 
; 735  :       /* hessian */
; 736  :       for ( k = 0 ; k < ctrl_num ; k++ )

	xor	ecx, ecx
	test	edx, edx
	jle	$LN90@gravity_al
$LN56@gravity_al:

; 737  :         for ( kk = 0 ; kk < ctrl_num ; kk++ )

	mov	DWORD PTR _kk$[ebp], 0
	test	edx, edx
	jle	$LN5@gravity_al
	mov	eax, DWORD PTR [edi]
	fld	ST(4)
	mov	esi, DWORD PTR [eax]
	fmul	ST(0), ST(4)
	mov	edi, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _tang$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR tv2417[ebp]
	mov	DWORD PTR tv1001[ebp], edx
	mov	edx, DWORD PTR tv2337[ebp]
	mov	edx, DWORD PTR [eax+edx]
	mov	eax, DWORD PTR _h$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	ebx, edi
	sub	ebx, esi
	mov	DWORD PTR tv2420[ebp], edx
	sub	edx, esi
	mov	DWORD PTR tv1871[ebp], eax
	mov	eax, esi
	mov	DWORD PTR tv2409[ebp], ebx
	mov	DWORD PTR tv2439[ebp], edx
	jmp	SHORT $LN3@gravity_al
$LN53@gravity_al:
	mov	ebx, DWORD PTR tv2409[ebp]
$LN3@gravity_al:

; 738  :       { 
; 739  :          h[k][kk][0][1] += weight*z*z/2*(gpolypartial[m][0][k]*gpolypartial[m][1][kk]
; 740  :                          - gpolypartial[m][0][kk]*gpolypartial[m][1][k]);

	fld	QWORD PTR [esi+ecx*8]
	mov	edx, DWORD PTR tv1871[ebp]
	fmul	QWORD PTR [eax+ebx]
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	fmul	QWORD PTR [edi+ecx*8]

; 741  :          h[k][kk][0][2] += weight*z*gpoly[m][kk]*(gpolypartial[m][0][k]*tang[1][1]
; 742  :                          - tang[0][1]*gpolypartial[m][1][k]);

	mov	ebx, DWORD PTR tv1001[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [edx+8]
	fstp	QWORD PTR [edx+8]
	fld	QWORD PTR [esi+ecx*8]
	fmul	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR tv891[ebp]
	fld	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR tv2439[ebp]
	fmul	QWORD PTR [edi+ecx*8]
	fsubp	ST(1), ST(0)
	fld	ST(2)
	fmul	QWORD PTR [eax+ebx]

; 743  :          h[k][kk][1][0] += weight*z*z/2*(gpolypartial[m][0][kk]*gpolypartial[m][1][k]
; 744  :                          - gpolypartial[m][0][k]*gpolypartial[m][1][kk]);

	mov	ebx, DWORD PTR tv2409[ebp]
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR [edx+16]
	fstp	QWORD PTR [edx+16]
	mov	edx, DWORD PTR tv1871[ebp]
	fld	QWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	fmul	QWORD PTR [edi+ecx*8]
	mov	edx, DWORD PTR [edx+4]
	fld	QWORD PTR [esi+ecx*8]
	fmul	QWORD PTR [eax+ebx]

; 745  :          h[k][kk][1][2] += weight*z*gpoly[m][kk]*(tang[0][0]*gpolypartial[m][1][k]
; 746  :                          - gpolypartial[m][0][k]*tang[1][0]);

	mov	ebx, DWORD PTR tv891[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv1001[ebp]
	fmul	QWORD PTR [edi+ecx*8]
	fld	QWORD PTR [esi+ecx*8]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv2439[ebp]
	fsubp	ST(1), ST(0)
	fld	ST(2)
	fmul	QWORD PTR [eax+ebx]

; 747  :          h[k][kk][2][0] += weight*z*gpoly[m][k]*(gpolypartial[m][0][kk]*tang[1][1]
; 748  :                         - tang[0][1]*gpolypartial[m][1][kk]);

	mov	ebx, DWORD PTR tv1001[ebp]
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR [edx+16]
	fstp	QWORD PTR [edx+16]
	mov	edx, DWORD PTR tv1871[ebp]
	fld	QWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	fmul	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR tv891[ebp]
	fld	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR tv2409[ebp]
	fmul	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv2420[ebp]
	mov	edx, DWORD PTR [edx+8]
	fsubp	ST(1), ST(0)
	fld	ST(2)
	fmul	QWORD PTR [ebx+ecx*8]

; 749  :          h[k][kk][2][1] += weight*z*gpoly[m][k]*(tang[0][0]*gpolypartial[m][1][kk]
; 750  :                         - gpolypartial[m][0][kk]*tang[1][0]);

	mov	ebx, DWORD PTR tv891[ebp]
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv2409[ebp]
	fmul	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv1001[ebp]
	fld	QWORD PTR [eax]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv2420[ebp]
	fsubp	ST(1), ST(0)
	fld	ST(2)
	fmul	QWORD PTR [ebx+ecx*8]

; 751  :          h[k][kk][2][2] += weight*gpoly[m][kk]*gpoly[m][k]*jac;

	mov	ebx, DWORD PTR tv2439[ebp]
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR [edx+8]
	fstp	QWORD PTR [edx+8]
	fld	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv2420[ebp]
	add	DWORD PTR tv1871[ebp], 4
	fmul	ST(0), ST(4)
	add	eax, 8
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR _kk$[ebp]
	inc	ebx
	mov	DWORD PTR _kk$[ebp], ebx
	fmul	ST(0), ST(3)
	fadd	QWORD PTR [edx+16]
	fstp	QWORD PTR [edx+16]
	mov	edx, DWORD PTR _ctrl_num
	cmp	ebx, edx
	jl	$LN53@gravity_al

; 737  :         for ( kk = 0 ; kk < ctrl_num ; kk++ )

	mov	edi, DWORD PTR tv2337[ebp]
	fstp	ST(0)
$LN5@gravity_al:

; 734  : 
; 735  :       /* hessian */
; 736  :       for ( k = 0 ; k < ctrl_num ; k++ )

	inc	ecx
	cmp	ecx, edx
	jl	$LN56@gravity_al
$LN90@gravity_al:
	mov	esi, DWORD PTR _f_info$[ebp]
$LN79@gravity_al:

; 711  :   }
; 712  : 
; 713  :   for ( m = 0 ; m < gauss2D_num ; m++ )

	mov	eax, DWORD PTR _m$[ebp]

; 734  : 
; 735  :       /* hessian */
; 736  :       for ( k = 0 ; k < ctrl_num ; k++ )

	fstp	ST(0)
	fstp	ST(0)
	inc	eax
	add	edi, 4
	fstp	ST(0)
	fstp	ST(1)
	mov	DWORD PTR _m$[ebp], eax
	mov	DWORD PTR tv2337[ebp], edi
	cmp	eax, DWORD PTR _gauss2D_num
	jl	$LN52@gravity_al
$LN101@gravity_al:
	fstp	ST(0)

; 752  :       }  
; 753  : 
; 754  :   }
; 755  :   return value;

	fld	QWORD PTR _value$[ebp]
$LN25@gravity_al:
	pop	edi
	pop	esi
	pop	ebx

; 756  : } // end gravity_all_q()

	mov	esp, ebp
	pop	ebp
	ret	0
_gravity_all_q ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_gravity_all_lagrange
EXTRN	_det_adjoint:PROC
EXTRN	_det_hess:PROC
EXTRN	_factorial:BYTE
EXTRN	_mat2d_setup:PROC
; Function compile flags: /Ogtp
;	COMDAT _gravity_all_lagrange
_TEXT	SEGMENT
_dethessqXvS$ = -11800					; size = 1032
_matqXvS$ = -10768					; size = 24
tv1697 = -10744						; size = 8
_value$ = -10736					; size = 8
_dim$ = -10728						; size = 4
_weight$89609 = -10724					; size = 8
_sign$ = -10724						; size = 8
tv2729 = -10720						; size = 4
_k$ = -10720						; size = 4
_dethess$ = -10716					; size = 4
_mat$ = -10712						; size = 4
_z$ = -10708						; size = 8
tv5090 = -10704						; size = 4
tv4563 = -10704						; size = 4
tv2215 = -10704						; size = 4
tv1971 = -10704						; size = 4
tv1757 = -10704						; size = 4
_gl$ = -10700						; size = 4
_f_info$GSCopy$ = -10696				; size = 4
_gdensity$ = -10692					; size = 8
tv5231 = -10688						; size = 4
tv5009 = -10688						; size = 4
tv4483 = -10688						; size = 4
tv3494 = -10688						; size = 4
tv3336 = -10688						; size = 4
tv2187 = -10688						; size = 4
tv2099 = -10688						; size = 4
tv1882 = -10688						; size = 4
tv1870 = -10688						; size = 4
tv1837 = -10688						; size = 4
tv1721 = -10688						; size = 4
tv278 = -10688						; size = 4
_jj$ = -10684						; size = 4
_i$ = -10684						; size = 4
_m$ = -10680						; size = 4
tv2599 = -10676						; size = 4
tv2017 = -10676						; size = 4
tv1850 = -10676						; size = 4
tv5003 = -10672						; size = 4
tv4170 = -10672						; size = 4
tv1975 = -10672						; size = 4
tv1899 = -10672						; size = 4
tv1058 = -10672						; size = 4
tv823 = -10672						; size = 4
tv4176 = -10668						; size = 4
tv1782 = -10668						; size = 4
_ii$ = -10668						; size = 4
tv520 = -10664						; size = 4
_j$ = -10664						; size = 4
_dethessxJ$ = -10660					; size = 10368
_matxJ$ = -292						; size = 288
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_mode$ = 12						; size = 4
_gravity_all_lagrange PROC				; COMDAT

; 774  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 11800				; 00002e18H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 775  :   REAL value = 0.0;

	fldz
	push	ebx
	push	esi
	fstp	QWORD PTR _value$[ebp]

; 776  :   body_id b_id;
; 777  :   REAL gdensity = 1.0;

	fld1
	push	edi
	mov	edi, DWORD PTR _f_info$[ebp]
	fstp	QWORD PTR _gdensity$[ebp]

; 778  :   int i,m,j,k,jj,ii,kk;
; 779  :   REAL z;
; 780  :   REAL val;
; 781  :   MAT2D(mat,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	eax, DWORD PTR _matxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _matqXvS$[ebp]
	push	ecx
	mov	DWORD PTR _f_info$GSCopy$[ebp], edi
	call	_mat2d_setup

; 782  :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	edx, DWORD PTR [edi]
	mov	DWORD PTR _mat$[ebp], eax
	mov	eax, DWORD PTR _web+236
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	add	esp, 16					; 00000010H
	or	eax, ecx
	je	SHORT $LN64@gravity_al@2
	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN262@gravity_al@2
$LN64@gravity_al@2:
	fld1
$LN262@gravity_al@2:

; 783  :   int dim = web.dimension;
; 784  :   struct gauss_lag *gl = &gauss_lagrange[dim][web.gauss2D_order];

	mov	ebx, DWORD PTR _web+1596
	fstp	QWORD PTR _sign$[ebp]
	mov	esi, DWORD PTR _web+620

; 785  :   MAT4D(dethess,MAXCOORD,MAXCOORD,MAXCOORD,MAXCOORD);

	push	6
	push	6
	push	6
	push	6
	lea	ecx, DWORD PTR _dethessxJ$[ebp]
	shl	ebx, 5
	add	ebx, DWORD PTR _gauss_lagrange[esi*4]
	push	ecx
	lea	edx, DWORD PTR _dethessqXvS$[ebp]
	push	edx
	mov	DWORD PTR _dim$[ebp], esi
	mov	DWORD PTR _gl$[ebp], ebx
	call	_mat4d_setup

; 786  :   struct method_instance *mi = METH_INSTANCE(f_info->method);
; 787  : 
; 788  :   if ( mi->flags & (IMPLICIT_INSTANCE|FAKE_IMPLICIT) )

	mov	ecx, DWORD PTR _meth_inst_list
	mov	DWORD PTR _dethess$[ebp], eax
	mov	eax, DWORD PTR [edi+8]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	esp, 24					; 00000018H
	test	DWORD PTR [eax+ecx+140], 69206016	; 04200000H
	je	$LN127@gravity_al@2

; 789  :   { /* include density difference */
; 790  :      b_id = get_facet_body(f_info->id);

	mov	edi, DWORD PTR [edi]
	push	edi
	call	_get_facet_body

; 791  :      gdensity = 0.0;

	fldz
	add	esp, 4
	fst	QWORD PTR _gdensity$[ebp]

; 792  :      if ( valid_id(b_id) )

	test	eax, 268435456				; 10000000H
	je	SHORT $LN146@gravity_al@2

; 793  :           gdensity += get_body_density(b_id);

	mov	edx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	fadd	QWORD PTR [eax+344]
	fstp	QWORD PTR _gdensity$[ebp]
	jmp	SHORT $LN144@gravity_al@2
$LN146@gravity_al@2:
	fstp	ST(0)
$LN144@gravity_al@2:

; 794  :      b_id = get_facet_body(facet_inverse(f_info->id));

	xor	edi, 134217728				; 08000000H
	push	edi
	call	_get_facet_body

; 795  :      if ( valid_id(b_id) )
; 796  :           gdensity -= get_body_density(b_id);

	fld	QWORD PTR _gdensity$[ebp]
	add	esp, 4
	test	eax, 268435456				; 10000000H
	je	SHORT $LN59@gravity_al@2
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fsub	QWORD PTR [edx+344]
$LN59@gravity_al@2:

; 797  :      if ( gdensity == 0.0 ) return 0.0;

	fld	ST(0)
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	SHORT $LN58@gravity_al@2
	pop	edi
	fstp	ST(1)
	pop	esi
	pop	ebx

; 865  : } // end gravity_all_lagrange()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN127@gravity_al@2:

; 797  :      if ( gdensity == 0.0 ) return 0.0;

	fld	QWORD PTR _gdensity$[ebp]
	fldz
$LN58@gravity_al@2:

; 798  :   }
; 799  : 
; 800  :   for ( j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR _web+616
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN156@gravity_al@2
	mov	edx, DWORD PTR _mat$[ebp]
$LN57@gravity_al@2:

; 801  :         mat[web.dimension][j] = 0.0;

	mov	ecx, DWORD PTR _web+620
	mov	ecx, DWORD PTR [edx+ecx*4]
	fst	QWORD PTR [ecx+eax*8]
	mov	ecx, DWORD PTR _web+616
	inc	eax
	cmp	eax, ecx
	jl	SHORT $LN57@gravity_al@2
$LN156@gravity_al@2:

; 802  : 
; 803  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	cmp	DWORD PTR [ebx+4], 0
	fstp	ST(0)
	mov	DWORD PTR _m$[ebp], 0
	jle	$LN158@gravity_al@2
	fmul	QWORD PTR _sign$[ebp]
	fstp	QWORD PTR tv1697[ebp]
	npad	5
$LL128@gravity_al@2:

; 804  :   { REAL det;
; 805  :      REAL weight = sign*gdensity*gl->gausswt[m]/factorial[dim];

	mov	edx, DWORD PTR [ebx+12]
	mov	eax, DWORD PTR _m$[ebp]
	fld	QWORD PTR [edx+eax*8]

; 806  :      for ( i = 0 ; i < web.dimension ; i++ )

	mov	edi, DWORD PTR _web+620
	fmul	QWORD PTR tv1697[ebp]
	xor	edx, edx
	fdiv	QWORD PTR _factorial[esi*8]
	fstp	QWORD PTR _weight$89609[ebp]
	test	edi, edi
	jle	SHORT $LN49@gravity_al@2
	npad	5
$LL51@gravity_al@2:

; 807  :         for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN50@gravity_al@2
	mov	ecx, DWORD PTR _mat$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	edi, DWORD PTR _m$[ebp]
	mov	DWORD PTR tv1721[ebp], ecx
	npad	5
$LL142@gravity_al@2:

; 808  :           mat[i][j] = f_info->sides[m][i][j];  /* mat destroyed by det */

	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [ecx+1276]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	ecx, DWORD PTR [ecx+edx*4]
	fld	QWORD PTR [ecx+eax*8]
	mov	ecx, DWORD PTR tv1721[ebp]
	fstp	QWORD PTR [ecx+eax*8]
	mov	ecx, DWORD PTR _web+616
	inc	eax
	cmp	eax, ecx
	jl	SHORT $LL142@gravity_al@2

; 807  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	edi, DWORD PTR _web+620
$LN50@gravity_al@2:

; 806  :      for ( i = 0 ; i < web.dimension ; i++ )

	inc	edx
	cmp	edx, edi
	jl	SHORT $LL51@gravity_al@2
$LN49@gravity_al@2:

; 809  :      z = f_info->gauss_pt[m][SDIM-1];

	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [edx+1268]
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	fld	QWORD PTR [eax+ecx*8-8]

; 810  :      val = z*z/2;
; 811  :      mat[web.dimension][SDIM-1] = val;

	mov	eax, DWORD PTR _mat$[ebp]
	mov	edx, DWORD PTR [eax+edi*4]
	fst	QWORD PTR _z$[ebp]

; 812  :      if ( mode == METHOD_HESSIAN ) det_hess(mat,dethess,SDIM);

	mov	edi, DWORD PTR _mode$[ebp]
	fmul	ST(0), ST(0)
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR [edx+ecx*8-8]
	cmp	edi, 8763				; 0000223bH
	jne	SHORT $LN45@gravity_al@2
	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR _dethess$[ebp]
	push	ecx
	push	edx
	push	eax
	call	_det_hess
	mov	eax, DWORD PTR _mat$[ebp]
	add	esp, 12					; 0000000cH
$LN45@gravity_al@2:

; 813  :      det = det_adjoint(mat,SDIM);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	push	eax
	call	_det_adjoint

; 814  : 
; 815  :      value += weight*det;

	fld	QWORD PTR _weight$89609[ebp]

; 816  :      
; 817  :      if ( mode == METHOD_VALUE ) continue;
; 818  : 
; 819  :      /* gradient */
; 820  :      for ( k = 0 ; k < gl->lagpts; k++ )

	mov	ecx, DWORD PTR _web+616
	fmul	ST(1), ST(0)
	fxch	ST(1)
	add	esp, 8
	fadd	QWORD PTR _value$[ebp]
	fstp	QWORD PTR _value$[ebp]
	cmp	edi, 1767				; 000006e7H
	je	$LN263@gravity_al@2
	xor	eax, eax
	cmp	DWORD PTR [ebx+16], eax
	jle	$LN41@gravity_al@2
$LN43@gravity_al@2:

; 821  :       for ( j = 0 ; j < SDIM ; j++ ) 

	xor	edi, edi
	mov	DWORD PTR _j$[ebp], edi
	test	ecx, ecx
	jle	$LN42@gravity_al@2
$LN40@gravity_al@2:

; 822  :         for ( i = 0 ; i < dim ; i++ )

	xor	edx, edx
	cmp	esi, 4
	jl	$LC111@gravity_al@2
	mov	ecx, DWORD PTR _mat$[ebp]
	mov	ecx, DWORD PTR [ecx+edi*4]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR tv2599[ebp], ecx
$LN112@gravity_al@2:

; 821  :       for ( j = 0 ; j < SDIM ; j++ ) 

	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [ecx+1336]
	mov	ecx, DWORD PTR [ecx+eax*4]
	lea	ecx, DWORD PTR [ecx+edi*8]
	mov	DWORD PTR tv1782[ebp], ecx

; 823  :         { f_info->grad[k][j] += weight*gl->gpolypart[m][i][k]*mat[j][i];

	mov	ecx, DWORD PTR [ebx+24]
	mov	edi, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	ecx, DWORD PTR [ecx+edx*4]
	fld	QWORD PTR [ecx+eax*8]
	mov	ecx, DWORD PTR tv2599[ebp]
	fmul	ST(0), ST(1)
	mov	edi, DWORD PTR _j$[ebp]
	add	edx, 4
	fmul	QWORD PTR [ecx-16]
	mov	ecx, DWORD PTR tv1782[ebp]
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [ecx+1336]
	mov	ecx, DWORD PTR [ecx+eax*4]
	lea	ecx, DWORD PTR [ecx+edi*8]
	mov	edi, DWORD PTR _m$[ebp]
	mov	DWORD PTR tv1782[ebp], ecx
	mov	ecx, DWORD PTR [ebx+24]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	ecx, DWORD PTR [ecx+edx*4-12]
	fld	QWORD PTR [ecx+eax*8]
	mov	ecx, DWORD PTR tv2599[ebp]
	mov	edi, DWORD PTR _j$[ebp]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [ecx-8]
	mov	ecx, DWORD PTR tv1782[ebp]
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [ecx+1336]
	mov	ecx, DWORD PTR [ecx+eax*4]
	lea	ecx, DWORD PTR [ecx+edi*8]
	mov	edi, DWORD PTR _m$[ebp]
	mov	DWORD PTR tv1782[ebp], ecx
	mov	ecx, DWORD PTR [ebx+24]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	ecx, DWORD PTR [ecx+edx*4-8]
	fld	QWORD PTR [ecx+eax*8]
	mov	ecx, DWORD PTR tv2599[ebp]
	mov	edi, DWORD PTR _j$[ebp]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv1782[ebp]
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [ecx+1336]
	mov	ecx, DWORD PTR [ecx+eax*4]
	lea	ecx, DWORD PTR [ecx+edi*8]
	mov	edi, DWORD PTR _m$[ebp]
	mov	DWORD PTR tv1782[ebp], ecx
	mov	ecx, DWORD PTR [ebx+24]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	ecx, DWORD PTR [ecx+edx*4-4]
	fld	QWORD PTR [ecx+eax*8]
	mov	edi, DWORD PTR tv2599[ebp]
	mov	ecx, DWORD PTR tv1782[ebp]
	fmul	ST(0), ST(1)
	add	edi, 32					; 00000020H
	mov	DWORD PTR tv2599[ebp], edi
	fmul	QWORD PTR [edi-24]
	mov	edi, DWORD PTR _j$[ebp]
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	lea	ecx, DWORD PTR [esi-3]
	cmp	edx, ecx
	jl	$LN112@gravity_al@2
	mov	ecx, DWORD PTR _web+616
$LC111@gravity_al@2:

; 822  :         for ( i = 0 ; i < dim ; i++ )

	cmp	edx, esi
	jge	SHORT $LN39@gravity_al@2
	mov	ecx, DWORD PTR _mat$[ebp]
	mov	ecx, DWORD PTR [ecx+edi*4]
	lea	ecx, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR tv2729[ebp], ecx
$LC37@gravity_al@2:

; 821  :       for ( j = 0 ; j < SDIM ; j++ ) 

	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [ecx+1336]
	mov	ecx, DWORD PTR [ecx+eax*4]
	lea	ecx, DWORD PTR [ecx+edi*8]

; 823  :         { f_info->grad[k][j] += weight*gl->gpolypart[m][i][k]*mat[j][i];

	mov	edi, DWORD PTR _m$[ebp]
	mov	DWORD PTR tv1837[ebp], ecx
	mov	ecx, DWORD PTR [ebx+24]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	ecx, DWORD PTR [ecx+edx*4]
	fld	QWORD PTR [ecx+eax*8]
	mov	edi, DWORD PTR tv2729[ebp]
	mov	ecx, DWORD PTR tv1837[ebp]
	fmul	ST(0), ST(1)
	add	edi, 8
	inc	edx
	fmul	QWORD PTR [edi-8]
	mov	DWORD PTR tv2729[ebp], edi
	mov	edi, DWORD PTR _j$[ebp]
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	edx, esi
	jl	SHORT $LC37@gravity_al@2

; 822  :         for ( i = 0 ; i < dim ; i++ )

	mov	ecx, DWORD PTR _web+616
$LN39@gravity_al@2:

; 821  :       for ( j = 0 ; j < SDIM ; j++ ) 

	inc	edi
	mov	DWORD PTR _j$[ebp], edi
	cmp	edi, ecx
	jl	$LN40@gravity_al@2
$LN42@gravity_al@2:

; 816  :      
; 817  :      if ( mode == METHOD_VALUE ) continue;
; 818  : 
; 819  :      /* gradient */
; 820  :      for ( k = 0 ; k < gl->lagpts; k++ )

	inc	eax
	cmp	eax, DWORD PTR [ebx+16]
	jl	$LN43@gravity_al@2
$LN41@gravity_al@2:

; 824  :         }
; 825  :      for ( k = 0 ; k < gl->lagpts ; k++ )

	fld	QWORD PTR _z$[ebp]
	xor	eax, eax
	cmp	DWORD PTR [ebx+16], eax
	jle	SHORT $LN32@gravity_al@2
	mov	edx, DWORD PTR _m$[ebp]
$LN123@gravity_al@2:

; 826  :           f_info->grad[k][SDIM-1] += weight*gl->gpoly[m][k]*z*mat[SDIM-1][dim];

	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edi, DWORD PTR [edi+1336]
	mov	edi, DWORD PTR [edi+eax*4]
	lea	edi, DWORD PTR [edi+ecx*8-8]
	mov	DWORD PTR tv1870[ebp], edi
	mov	edi, DWORD PTR [ebx+20]
	mov	edi, DWORD PTR [edi+edx*4]
	fld	QWORD PTR [edi+eax*8]
	mov	edi, DWORD PTR _mat$[ebp]
	mov	ecx, DWORD PTR [edi+ecx*4-4]
	fmul	ST(0), ST(2)
	inc	eax
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [ecx+esi*8]
	mov	ecx, DWORD PTR tv1870[ebp]
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _web+616
	cmp	eax, DWORD PTR [ebx+16]
	jl	SHORT $LN123@gravity_al@2
$LN32@gravity_al@2:

; 827  : 
; 828  :      if ( mode == METHOD_GRADIENT ) continue;

	cmp	DWORD PTR _mode$[ebp], 4321		; 000010e1H
	je	$LN199@gravity_al@2

; 829  : 
; 830  :      /* hessian */
; 831  :      for ( k = 0 ; k < gl->lagpts  ; k++ )

	mov	edi, DWORD PTR [ebx+16]
	xor	eax, eax
	mov	DWORD PTR _k$[ebp], eax
	test	edi, edi
	jle	$LN199@gravity_al@2
	fldz
$LN30@gravity_al@2:

; 832  :         for ( kk = 0 ; kk < gl->lagpts ; kk++ )

	xor	edx, edx
	test	edi, edi
	jle	$LN29@gravity_al@2
$LN27@gravity_al@2:

; 833  :         { REAL h;
; 834  :           for ( j = 0 ; j < SDIM ; j++ )

	mov	DWORD PTR _j$[ebp], 0
	test	ecx, ecx
	jle	$LN22@gravity_al@2
$LN24@gravity_al@2:

; 835  :              for ( jj = 0 ; jj < SDIM ; jj++ )

	xor	edi, edi
	test	ecx, ecx
	jle	$LN23@gravity_al@2
$LN21@gravity_al@2:

; 836  :              { h = 0.0;

	fld	ST(0)

; 837  :                 for ( i = 0 ; i < dim ; i++ )

	mov	DWORD PTR _i$[ebp], 0
	test	esi, esi
	jle	$LN16@gravity_al@2
$LN18@gravity_al@2:

; 838  :                  for ( ii  = 0 ; ii < dim ; ii++ )

	mov	DWORD PTR _ii$[ebp], 0
	cmp	esi, 4
	jl	$LC114@gravity_al@2

; 829  : 
; 830  :      /* hessian */
; 831  :      for ( k = 0 ; k < gl->lagpts  ; k++ )

	mov	esi, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dethess$[ebp]
	mov	ecx, DWORD PTR [ecx+esi*4]
	mov	esi, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR [ecx+esi*4]
	mov	ecx, DWORD PTR [ebx+24]
	mov	ebx, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [ecx+ebx*4]
	mov	ebx, DWORD PTR _i$[ebp]
	mov	ebx, DWORD PTR [ecx+ebx*4]
	lea	eax, DWORD PTR [ebx+eax*8]
	mov	DWORD PTR tv1882[ebp], esi

; 839  :                  { h += dethess[i][j][ii][jj]
; 840  :                             *gl->gpolypart[m][i][k]*gl->gpolypart[m][ii][kk];

	mov	ebx, esi
	sub	ebx, ecx
	mov	DWORD PTR tv1899[ebp], eax
	lea	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _dim$[ebp]
	add	ecx, -4					; fffffffcH
	shr	ecx, 2
	add	esi, 12					; 0000000cH
	inc	ecx
	mov	DWORD PTR tv3336[ebp], ebx
	lea	ebx, DWORD PTR [ecx*4]
	mov	DWORD PTR _ii$[ebp], ebx
$LN115@gravity_al@2:
	mov	ebx, DWORD PTR [esi-12]
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR tv1899[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [eax-4]
	add	eax, 16					; 00000010H
	add	esi, 16					; 00000010H
	dec	ecx
	fmul	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR tv3336[ebp]
	mov	ebx, DWORD PTR [ebx+eax-16]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR tv1899[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [eax-16]
	fmul	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR [esi-20]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR tv1899[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [eax-12]
	fmul	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR [esi-16]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR tv1899[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [eax-8]
	fmul	QWORD PTR [ebx+edx*8]
	faddp	ST(1), ST(0)
	jne	SHORT $LN115@gravity_al@2

; 838  :                  for ( ii  = 0 ; ii < dim ; ii++ )

	mov	eax, DWORD PTR _k$[ebp]
	mov	ebx, DWORD PTR _gl$[ebp]
	mov	esi, DWORD PTR _dim$[ebp]
$LC114@gravity_al@2:
	cmp	DWORD PTR _ii$[ebp], esi
	jge	$LN17@gravity_al@2

; 829  : 
; 830  :      /* hessian */
; 831  :      for ( k = 0 ; k < gl->lagpts  ; k++ )

	mov	ecx, DWORD PTR [ebx+24]
	mov	ebx, DWORD PTR _m$[ebp]
	mov	ebx, DWORD PTR [ecx+ebx*4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv1971[ebp], ebx
	mov	ebx, DWORD PTR [ebx+ecx*4]
	lea	eax, DWORD PTR [ebx+eax*8]

; 838  :                  for ( ii  = 0 ; ii < dim ; ii++ )

	mov	ebx, DWORD PTR _ii$[ebp]
	mov	DWORD PTR tv1975[ebp], eax
	mov	eax, DWORD PTR tv1971[ebp]
	lea	eax, DWORD PTR [eax+ebx*4]
	mov	ebx, DWORD PTR _dethess$[ebp]
	mov	ecx, DWORD PTR [ebx+ecx*4]
	mov	ebx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR [ecx+ebx*4]
	sub	ecx, DWORD PTR tv1971[ebp]
	mov	DWORD PTR tv3494[ebp], ecx
	mov	ecx, esi
	sub	ecx, DWORD PTR _ii$[ebp]
$LN131@gravity_al@2:

; 839  :                  { h += dethess[i][j][ii][jj]
; 840  :                             *gl->gpolypart[m][i][k]*gl->gpolypart[m][ii][kk];

	mov	ebx, DWORD PTR tv3494[ebp]
	mov	ebx, DWORD PTR [ebx+eax]
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR tv1975[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [eax]
	add	eax, 4
	dec	ecx
	fmul	QWORD PTR [ebx+edx*8]
	faddp	ST(1), ST(0)
	jne	SHORT $LN131@gravity_al@2

; 838  :                  for ( ii  = 0 ; ii < dim ; ii++ )

	mov	ebx, DWORD PTR _gl$[ebp]
	mov	eax, DWORD PTR _k$[ebp]
$LN17@gravity_al@2:

; 837  :                 for ( i = 0 ; i < dim ; i++ )

	mov	ecx, DWORD PTR _i$[ebp]
	inc	ecx
	mov	DWORD PTR _i$[ebp], ecx
	cmp	ecx, esi
	jl	$LN18@gravity_al@2
$LN16@gravity_al@2:

; 835  :              for ( jj = 0 ; jj < SDIM ; jj++ )

	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]

; 841  :                  }
; 842  :                 f_info->hess[k][kk][j][jj]  += weight*h;

	fmul	ST(0), ST(3)
	mov	ecx, DWORD PTR [ecx+1340]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	ebx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR [ecx+ebx*4]
	fadd	QWORD PTR [ecx+edi*8]
	mov	ebx, DWORD PTR _gl$[ebp]
	lea	ecx, DWORD PTR [ecx+edi*8]
	inc	edi
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _web+616
	cmp	edi, ecx
	jl	$LN21@gravity_al@2
$LN23@gravity_al@2:

; 833  :         { REAL h;
; 834  :           for ( j = 0 ; j < SDIM ; j++ )

	inc	DWORD PTR _j$[ebp]
	cmp	DWORD PTR _j$[ebp], ecx
	jl	$LN24@gravity_al@2
$LN22@gravity_al@2:

; 843  :              }
; 844  : 
; 845  :           for ( j = 0 ; j < SDIM ; j++ )

	mov	DWORD PTR _j$[ebp], 0
	test	ecx, ecx
	jle	$LN10@gravity_al@2
$LN139@gravity_al@2:

; 846  :              { h = 0.0;

	fld	ST(0)

; 847  :                 for ( i = 0 ; i < dim ; i++ )

	mov	DWORD PTR _i$[ebp], 0
	cmp	esi, 4
	jl	$LC117@gravity_al@2

; 832  :         for ( kk = 0 ; kk < gl->lagpts ; kk++ )

	mov	ecx, DWORD PTR [ebx+24]
	mov	edi, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	ebx, DWORD PTR [ebx+20]
	mov	edi, DWORD PTR [ebx+edi*4]
	lea	edi, DWORD PTR [edi+edx*8]
	mov	DWORD PTR tv2017[ebp], edi

; 846  :              { h = 0.0;

	mov	edi, DWORD PTR _dethess$[ebp]
	lea	ebx, DWORD PTR [edi+12]

; 848  :                   h += dethess[i][j][dim][SDIM-1]*gl->gpolypart[m][i][k]
; 849  :                               *gl->gpoly[m][kk]*z;

	sub	edi, ecx
	mov	DWORD PTR tv4170[ebp], ebx
	lea	ebx, DWORD PTR [ecx+4]
	lea	ecx, DWORD PTR [esi-4]
	shr	ecx, 2
	inc	ecx
	mov	DWORD PTR tv278[ebp], ecx
	add	ecx, ecx
	add	ecx, ecx
	mov	DWORD PTR _i$[ebp], ecx
	mov	ecx, DWORD PTR _web+616
	mov	DWORD PTR tv4176[ebp], ebx
	mov	DWORD PTR tv4563[ebp], edi
$LN133@gravity_al@2:
	mov	edi, DWORD PTR tv4170[ebp]
	mov	edi, DWORD PTR [edi-12]
	mov	ebx, DWORD PTR _j$[ebp]
	mov	edi, DWORD PTR [edi+ebx*4]
	mov	edi, DWORD PTR [edi+esi*4]
	fld	QWORD PTR [edi+ecx*8-8]
	mov	ebx, DWORD PTR tv4176[ebp]
	mov	ebx, DWORD PTR [ebx-4]
	fmul	QWORD PTR [ebx+eax*8]
	mov	edi, DWORD PTR tv2017[ebp]
	mov	ebx, DWORD PTR tv4176[ebp]
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR tv4563[ebp]
	mov	edi, DWORD PTR [edi+ebx]
	mov	ebx, DWORD PTR _j$[ebp]
	mov	edi, DWORD PTR [edi+ebx*4]
	fmul	ST(0), ST(3)
	mov	edi, DWORD PTR [edi+esi*4]
	mov	ebx, DWORD PTR tv4176[ebp]
	mov	ebx, DWORD PTR [ebx]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi+ecx*8-8]
	mov	edi, DWORD PTR tv2017[ebp]
	fmul	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR _j$[ebp]
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR tv4170[ebp]
	mov	edi, DWORD PTR [edi-4]
	mov	edi, DWORD PTR [edi+ebx*4]
	mov	edi, DWORD PTR [edi+esi*4]
	fmul	ST(0), ST(3)
	mov	ebx, DWORD PTR tv4176[ebp]
	mov	ebx, DWORD PTR [ebx+4]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi+ecx*8-8]
	mov	edi, DWORD PTR tv2017[ebp]
	fmul	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR _j$[ebp]
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR tv4170[ebp]
	mov	edi, DWORD PTR [edi]
	mov	edi, DWORD PTR [edi+ebx*4]
	mov	edi, DWORD PTR [edi+esi*4]
	fmul	ST(0), ST(3)
	mov	ebx, DWORD PTR tv4176[ebp]
	mov	ebx, DWORD PTR [ebx+8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi+ecx*8-8]
	mov	edi, DWORD PTR tv2017[ebp]
	fmul	QWORD PTR [ebx+eax*8]
	fmul	QWORD PTR [edi]
	mov	edi, 16					; 00000010H
	add	DWORD PTR tv4176[ebp], edi
	add	DWORD PTR tv4170[ebp], edi
	dec	DWORD PTR tv278[ebp]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	jne	$LN133@gravity_al@2

; 846  :              { h = 0.0;

	mov	ebx, DWORD PTR _gl$[ebp]
$LC117@gravity_al@2:

; 847  :                 for ( i = 0 ; i < dim ; i++ )

	cmp	DWORD PTR _i$[ebp], esi
	jge	$LN116@gravity_al@2

; 832  :         for ( kk = 0 ; kk < gl->lagpts ; kk++ )

	mov	edi, DWORD PTR [ebx+24]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edi, DWORD PTR [edi+ecx*4]
	mov	ebx, DWORD PTR [ebx+20]
	mov	ecx, DWORD PTR [ebx+ecx*4]

; 847  :                 for ( i = 0 ; i < dim ; i++ )

	mov	ebx, DWORD PTR _dethess$[ebp]
	lea	ecx, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR tv2017[ebp], ecx
	mov	ecx, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR [edi+ecx*4]
	sub	ebx, edi
	mov	edi, esi
	sub	edi, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv4483[ebp], ecx
	mov	DWORD PTR tv4563[ebp], ebx
	mov	DWORD PTR tv1058[ebp], edi
$LN134@gravity_al@2:

; 848  :                   h += dethess[i][j][dim][SDIM-1]*gl->gpolypart[m][i][k]
; 849  :                               *gl->gpoly[m][kk]*z;

	mov	edi, DWORD PTR tv4563[ebp]
	mov	edi, DWORD PTR [edi+ecx]
	mov	ebx, DWORD PTR _j$[ebp]
	mov	edi, DWORD PTR [edi+ebx*4]
	mov	ecx, DWORD PTR [ecx]
	mov	edi, DWORD PTR [edi+esi*4]
	mov	ebx, DWORD PTR _web+616
	fld	QWORD PTR [edi+ebx*8-8]
	fmul	QWORD PTR [ecx+eax*8]
	mov	ecx, DWORD PTR tv2017[ebp]
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv4483[ebp]
	add	ecx, 4
	dec	DWORD PTR tv1058[ebp]
	fmul	ST(0), ST(3)
	mov	DWORD PTR tv4483[ebp], ecx
	faddp	ST(1), ST(0)
	jne	SHORT $LN134@gravity_al@2

; 847  :                 for ( i = 0 ; i < dim ; i++ )

	mov	ebx, DWORD PTR _gl$[ebp]
$LN116@gravity_al@2:

; 850  :                 f_info->hess[k][kk][j][SDIM-1]  += weight*h;

	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	fmul	ST(0), ST(3)
	mov	ecx, DWORD PTR [ecx+1340]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	edi, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	edi, DWORD PTR _web+616
	fadd	QWORD PTR [ecx+edi*8-8]
	inc	DWORD PTR _j$[ebp]
	lea	ecx, DWORD PTR [ecx+edi*8-8]
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _web+616
	cmp	DWORD PTR _j$[ebp], ecx
	jl	$LN139@gravity_al@2
$LN10@gravity_al@2:

; 851  :              }
; 852  :           for ( jj = 0 ; jj < SDIM ; jj++ )

	mov	DWORD PTR _jj$[ebp], 0
	test	ecx, ecx
	jle	$LN4@gravity_al@2
$LN6@gravity_al@2:

; 853  :              { h = 0.0;

	fld	ST(0)

; 854  :                 for ( ii = 0 ; ii < dim ; ii++ )

	mov	DWORD PTR _ii$[ebp], 0
	cmp	esi, 4
	jl	$LC120@gravity_al@2

; 829  : 
; 830  :      /* hessian */
; 831  :      for ( k = 0 ; k < gl->lagpts  ; k++ )

	mov	edi, DWORD PTR _dethess$[ebp]
	mov	edi, DWORD PTR [edi+esi*4]
	mov	ecx, DWORD PTR [edi+ecx*4-4]
	mov	edi, DWORD PTR [ebx+24]
	mov	ebx, DWORD PTR [ebx+20]

; 854  :                 for ( ii = 0 ; ii < dim ; ii++ )

	mov	DWORD PTR tv2099[ebp], ecx
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edi, DWORD PTR [edi+ecx*4]
	mov	ecx, DWORD PTR [ebx+ecx*4]
	mov	ebx, DWORD PTR tv2099[ebp]
	lea	ecx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR tv1850[ebp], ecx
	lea	ecx, DWORD PTR [ebx+12]

; 855  :                   h += dethess[dim][SDIM-1][ii][jj]*gl->gpolypart[m][ii][kk]
; 856  :                               *gl->gpoly[m][k]*z;

	sub	ebx, edi
	mov	DWORD PTR tv5003[ebp], ecx
	lea	ecx, DWORD PTR [edi+4]
	lea	edi, DWORD PTR [esi-4]
	shr	edi, 2
	inc	edi
	mov	DWORD PTR tv520[ebp], edi
	add	edi, edi
	add	edi, edi
	mov	DWORD PTR tv5009[ebp], ecx
	mov	DWORD PTR tv5090[ebp], ebx
	mov	DWORD PTR _ii$[ebp], edi
$LN135@gravity_al@2:
	mov	edi, DWORD PTR [ecx-4]
	fld	QWORD PTR [edi+edx*8]
	mov	ebx, DWORD PTR tv5003[ebp]
	mov	ebx, DWORD PTR [ebx-12]
	mov	edi, DWORD PTR _jj$[ebp]
	fmul	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR tv1850[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv5090[ebp]
	mov	ebx, DWORD PTR [ebx+ecx]
	mov	ecx, DWORD PTR [ecx]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR tv5003[ebp]
	fmul	QWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR tv1850[ebp]
	mov	ebx, DWORD PTR [ebx-4]
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv5009[ebp]
	mov	edi, DWORD PTR [ecx+4]
	add	ecx, 16					; 00000010H
	fmul	ST(0), ST(3)
	mov	DWORD PTR tv5009[ebp], ecx
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi+edx*8]
	mov	edi, DWORD PTR _jj$[ebp]
	fmul	QWORD PTR [ebx+edi*8]
	mov	edi, DWORD PTR tv1850[ebp]
	mov	ebx, DWORD PTR tv5003[ebp]
	mov	ebx, DWORD PTR [ebx]
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR [ecx-8]
	add	DWORD PTR tv5003[ebp], 16		; 00000010H
	dec	DWORD PTR tv520[ebp]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi+edx*8]
	mov	edi, DWORD PTR _jj$[ebp]
	fmul	QWORD PTR [ebx+edi*8]
	mov	edi, DWORD PTR tv1850[ebp]
	fmul	QWORD PTR [edi]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	jne	$LN135@gravity_al@2

; 853  :              { h = 0.0;

	mov	ebx, DWORD PTR _gl$[ebp]
	mov	ecx, DWORD PTR _web+616
$LC120@gravity_al@2:

; 854  :                 for ( ii = 0 ; ii < dim ; ii++ )

	cmp	DWORD PTR _ii$[ebp], esi
	jge	$LN119@gravity_al@2

; 829  : 
; 830  :      /* hessian */
; 831  :      for ( k = 0 ; k < gl->lagpts  ; k++ )

	mov	ecx, DWORD PTR [ebx+24]
	mov	edi, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	ebx, DWORD PTR [ebx+20]
	mov	edi, DWORD PTR [ebx+edi*4]

; 854  :                 for ( ii = 0 ; ii < dim ; ii++ )

	mov	ebx, DWORD PTR _web+616
	lea	edi, DWORD PTR [edi+eax*8]
	mov	DWORD PTR tv1850[ebp], edi
	mov	edi, DWORD PTR _ii$[ebp]

; 855  :                   h += dethess[dim][SDIM-1][ii][jj]*gl->gpolypart[m][ii][kk]
; 856  :                               *gl->gpoly[m][k]*z;

	mov	DWORD PTR tv1757[ebp], ecx
	lea	ecx, DWORD PTR [ecx+edi*4]
	mov	edi, DWORD PTR _dethess$[ebp]
	mov	edi, DWORD PTR [edi+esi*4]
	mov	edi, DWORD PTR [edi+ebx*4-4]
	sub	edi, DWORD PTR tv1757[ebp]
	mov	DWORD PTR tv5231[ebp], ecx
	mov	DWORD PTR tv5090[ebp], edi
	mov	edi, esi
	sub	edi, DWORD PTR _ii$[ebp]
	mov	DWORD PTR tv823[ebp], edi
	mov	edi, DWORD PTR _jj$[ebp]
$LN136@gravity_al@2:
	mov	ebx, DWORD PTR tv5090[ebp]
	mov	ebx, DWORD PTR [ebx+ecx]
	mov	ecx, DWORD PTR [ecx]
	fld	QWORD PTR [ebx+edi*8]
	fmul	QWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR tv1850[ebp]
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv5231[ebp]
	add	ecx, 4
	dec	DWORD PTR tv823[ebp]
	fmul	ST(0), ST(3)
	mov	DWORD PTR tv5231[ebp], ecx
	faddp	ST(1), ST(0)
	jne	SHORT $LN136@gravity_al@2

; 854  :                 for ( ii = 0 ; ii < dim ; ii++ )

	mov	ebx, DWORD PTR _gl$[ebp]
	mov	ecx, DWORD PTR _web+616
$LN119@gravity_al@2:

; 857  :                 f_info->hess[k][kk][SDIM-1][jj]  += weight*h;

	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	fmul	ST(0), ST(3)
	mov	edi, DWORD PTR [edi+1340]
	mov	edi, DWORD PTR [edi+eax*4]
	mov	edi, DWORD PTR [edi+edx*4]
	mov	ecx, DWORD PTR [edi+ecx*4-4]
	mov	edi, DWORD PTR _jj$[ebp]
	fadd	QWORD PTR [ecx+edi*8]
	lea	ecx, DWORD PTR [ecx+edi*8]
	inc	edi
	mov	DWORD PTR _jj$[ebp], edi
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _web+616
	cmp	edi, ecx
	jl	$LN6@gravity_al@2
$LN4@gravity_al@2:

; 858  :              }
; 859  :           h = gl->gpoly[m][k]*gl->gpoly[m][kk]*mat[SDIM-1][web.dimension];

	mov	ecx, DWORD PTR [ebx+20]
	mov	edi, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	DWORD PTR tv2187[ebp], ecx

; 860  :           f_info->hess[k][kk][SDIM-1][SDIM-1]  += weight*h;

	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [ecx+1340]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	edi, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _web+616
	mov	edi, DWORD PTR [edi+ecx*4-4]
	lea	edi, DWORD PTR [edi+ecx*8-8]
	mov	DWORD PTR tv2215[ebp], edi
	mov	edi, DWORD PTR tv2187[ebp]
	fld	QWORD PTR [edi+edx*8]
	inc	edx
	fmul	QWORD PTR [edi+eax*8]
	mov	edi, DWORD PTR _mat$[ebp]
	mov	ecx, DWORD PTR [edi+ecx*4-4]
	mov	edi, DWORD PTR _web+620
	fmul	QWORD PTR [ecx+edi*8]
	mov	ecx, DWORD PTR tv2215[ebp]
	fmul	ST(0), ST(3)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _web+616
	cmp	edx, DWORD PTR [ebx+16]
	jl	$LN27@gravity_al@2
$LN29@gravity_al@2:

; 829  : 
; 830  :      /* hessian */
; 831  :      for ( k = 0 ; k < gl->lagpts  ; k++ )

	mov	edi, DWORD PTR [ebx+16]
	inc	eax
	mov	DWORD PTR _k$[ebp], eax
	cmp	eax, edi
	jl	$LN30@gravity_al@2
	fstp	ST(1)
	fstp	ST(1)
	jmp	SHORT $LN263@gravity_al@2
$LN199@gravity_al@2:
	fstp	ST(0)
$LN263@gravity_al@2:

; 802  : 
; 803  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	mov	eax, DWORD PTR _m$[ebp]

; 829  : 
; 830  :      /* hessian */
; 831  :      for ( k = 0 ; k < gl->lagpts  ; k++ )

	fstp	ST(0)
	inc	eax
	mov	DWORD PTR _m$[ebp], eax
	cmp	eax, DWORD PTR [ebx+4]
	jl	$LL128@gravity_al@2

; 861  :          }
; 862  :   }
; 863  : 
; 864  :   return value;  

	fld	QWORD PTR _value$[ebp]
	pop	edi
	pop	esi
	pop	ebx

; 865  : } // end gravity_all_lagrange()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN158@gravity_al@2:
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(0)
	fld	QWORD PTR _value$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_gravity_all_lagrange ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@CNNGKDBN@gfaafg_coeff?$AA@		; `string'
PUBLIC	??_C@_0N@OGKHNKNN@gfagfa_coeff?$AA@		; `string'
PUBLIC	??_C@_0M@HDNCNDB@gfa_2_coeff?$AA@		; `string'
PUBLIC	??_C@_0N@KAJEEPDH@fgagfa_coeff?$AA@		; `string'
PUBLIC	??_C@_09DIJHLMHM@gga_coeff?$AA@			; `string'
PUBLIC	_pos_area_hess_init
EXTRN	_localbase:DWORD
EXTRN	_lookup_global:PROC
;	COMDAT ??_C@_0N@CNNGKDBN@gfaafg_coeff?$AA@
CONST	SEGMENT
??_C@_0N@CNNGKDBN@gfaafg_coeff?$AA@ DB 'gfaafg_coeff', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OGKHNKNN@gfagfa_coeff?$AA@
CONST	SEGMENT
??_C@_0N@OGKHNKNN@gfagfa_coeff?$AA@ DB 'gfagfa_coeff', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HDNCNDB@gfa_2_coeff?$AA@
CONST	SEGMENT
??_C@_0M@HDNCNDB@gfa_2_coeff?$AA@ DB 'gfa_2_coeff', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KAJEEPDH@fgagfa_coeff?$AA@
CONST	SEGMENT
??_C@_0N@KAJEEPDH@fgagfa_coeff?$AA@ DB 'fgagfa_coeff', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DIJHLMHM@gga_coeff?$AA@
CONST	SEGMENT
??_C@_09DIJHLMHM@gga_coeff?$AA@ DB 'gga_coeff', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _pos_area_hess_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_pos_area_hess_init PROC				; COMDAT

; 937  : 
; 938  :   k = lookup_global("gga_coeff");

	push	OFFSET ??_C@_09DIJHLMHM@gga_coeff?$AA@
	call	_lookup_global
	add	esp, 4

; 939  :   if ( k >= 0 )

	test	eax, eax
	js	SHORT $LN10@pos_area_h

; 940  :       gga_coeff = globals(k)->value.real;

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN13@pos_area_h
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN15@pos_area_h
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+64]
	jmp	SHORT $LN43@pos_area_h
$LN15@pos_area_h:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN13@pos_area_h
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [eax+64]
	jmp	SHORT $LN43@pos_area_h
$LN13@pos_area_h:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
	fld	QWORD PTR [eax+64]
	jmp	SHORT $LN43@pos_area_h
$LN10@pos_area_h:

; 941  :   else gga_coeff = 1.0;

	fld1
$LN43@pos_area_h:

; 942  : 
; 943  :   k = lookup_global("fgagfa_coeff");

	push	OFFSET ??_C@_0N@KAJEEPDH@fgagfa_coeff?$AA@
	fstp	QWORD PTR _gga_coeff
	call	_lookup_global
	add	esp, 4

; 944  :   if ( k >= 0 )

	test	eax, eax
	js	SHORT $LN8@pos_area_h

; 945  :       fgagfa_coeff = globals(k)->value.real;

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN19@pos_area_h
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN21@pos_area_h
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+64]
	jmp	SHORT $LN44@pos_area_h
$LN21@pos_area_h:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN19@pos_area_h
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [eax+64]
	jmp	SHORT $LN44@pos_area_h
$LN19@pos_area_h:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
	fld	QWORD PTR [eax+64]
	jmp	SHORT $LN44@pos_area_h
$LN8@pos_area_h:

; 946  :   else fgagfa_coeff = -1.0;

	fld	QWORD PTR __real@bff0000000000000
$LN44@pos_area_h:

; 947  : 
; 948  :   k = lookup_global("gfa_2_coeff");

	push	OFFSET ??_C@_0M@HDNCNDB@gfa_2_coeff?$AA@
	fstp	QWORD PTR _fgagfa_coeff
	call	_lookup_global
	add	esp, 4

; 949  :   if ( k >= 0 )

	test	eax, eax
	js	SHORT $LN6@pos_area_h

; 950  :       gfa_2_coeff = globals(k)->value.real;

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN25@pos_area_h
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN27@pos_area_h
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+64]
	jmp	SHORT $LN45@pos_area_h
$LN27@pos_area_h:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN25@pos_area_h
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [eax+64]
	jmp	SHORT $LN45@pos_area_h
$LN25@pos_area_h:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
	fld	QWORD PTR [eax+64]
	jmp	SHORT $LN45@pos_area_h
$LN6@pos_area_h:

; 951  :   else gfa_2_coeff = 1.0;

	fld1
$LN45@pos_area_h:

; 952  : 
; 953  :   k = lookup_global("gfagfa_coeff");

	push	OFFSET ??_C@_0N@OGKHNKNN@gfagfa_coeff?$AA@
	fstp	QWORD PTR _gfa_2_coeff
	call	_lookup_global
	add	esp, 4

; 954  :   if ( k >= 0 )

	test	eax, eax
	js	SHORT $LN4@pos_area_h

; 955  :       gfagfa_coeff = globals(k)->value.real;

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN31@pos_area_h
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN33@pos_area_h
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+64]
	jmp	SHORT $LN46@pos_area_h
$LN33@pos_area_h:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN31@pos_area_h
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [eax+64]
	jmp	SHORT $LN46@pos_area_h
$LN31@pos_area_h:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
	fld	QWORD PTR [eax+64]
	jmp	SHORT $LN46@pos_area_h
$LN4@pos_area_h:

; 956  :   else gfagfa_coeff = -1.0;

	fld	QWORD PTR __real@bff0000000000000
$LN46@pos_area_h:

; 957  : 
; 958  :   k = lookup_global("gfaafg_coeff");

	push	OFFSET ??_C@_0N@CNNGKDBN@gfaafg_coeff?$AA@
	fstp	QWORD PTR _gfagfa_coeff
	call	_lookup_global
	add	esp, 4

; 959  :   if ( k >= 0 )

	test	eax, eax
	js	SHORT $LN2@pos_area_h

; 960  :       gfaafg_coeff = globals(k)->value.real;

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN37@pos_area_h
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN39@pos_area_h
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+64]

; 961  :   else gfaafg_coeff = 0.0;

	fstp	QWORD PTR _gfaafg_coeff

; 962  : 
; 963  : } // end pos_area_hess_init()

	ret	0
$LN39@pos_area_h:

; 960  :       gfaafg_coeff = globals(k)->value.real;

	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN37@pos_area_h
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [eax+64]

; 961  :   else gfaafg_coeff = 0.0;

	fstp	QWORD PTR _gfaafg_coeff

; 962  : 
; 963  : } // end pos_area_hess_init()

	ret	0
$LN37@pos_area_h:

; 960  :       gfaafg_coeff = globals(k)->value.real;

	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
	fld	QWORD PTR [eax+64]

; 961  :   else gfaafg_coeff = 0.0;

	fstp	QWORD PTR _gfaafg_coeff

; 962  : 
; 963  : } // end pos_area_hess_init()

	ret	0
$LN2@pos_area_h:

; 961  :   else gfaafg_coeff = 0.0;

	fldz
	fstp	QWORD PTR _gfaafg_coeff

; 962  : 
; 963  : } // end pos_area_hess_init()

	ret	0
_pos_area_hess_init ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_pos_area_hess
EXTRN	_mat_mult:PROC
EXTRN	_tr_mat_mul:PROC
EXTRN	_mat_mul_tr:PROC
EXTRN	__CIsqrt:PROC
; Function compile flags: /Ogtp
;	COMDAT _pos_area_hess
_TEXT	SEGMENT
_FtAinvqXvS$ = -1320					; size = 24
_FtAFqXvS$ = -1296					; size = 24
_AinvqXvS$ = -1272					; size = 24
_FtAAFqXvS$ = -1248					; size = 24
tv1590 = -1224						; size = 4
tv1585 = -1220						; size = 4
tv1643 = -1216						; size = 4
tv1409 = -1212						; size = 4
_Ainv$ = -1208						; size = 4
_area$ = -1204						; size = 8
tv1421 = -1200						; size = 4
tv766 = -1196						; size = 4
_FtAF$ = -1192						; size = 4
tv760 = -1188						; size = 4
_FtAAF$ = -1184						; size = 4
_dim$ = -1180						; size = 4
_FtAinv$ = -1176					; size = 4
tv1415 = -1172						; size = 4
tv816 = -1172						; size = 4
_f_info$GSCopy$ = -1168					; size = 4
tv1190 = -1164						; size = 4
tv830 = -1164						; size = 4
tv772 = -1164						; size = 4
_j$ = -1160						; size = 4
_i$ = -1160						; size = 4
_FtAinvxJ$ = -1156					; size = 288
_FtAFxJ$ = -868						; size = 288
_AinvxJ$ = -580						; size = 288
_FtAAFxJ$ = -292					; size = 288
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_pos_area_hess PROC					; COMDAT

; 966  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1320				; 00000528H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 967  :   MAT2D(Ainv,MAXCOORD,MAXCOORD);
; 968  :   MAT2D(FtAinv,MAXCOORD,MAXCOORD);
; 969  :   MAT2D(FtAF,MAXCOORD,MAXCOORD);

	mov	eax, DWORD PTR _f_info$[ebp]
	push	ebx
	push	esi
	push	edi
	push	6
	push	6
	lea	ecx, DWORD PTR _AinvxJ$[ebp]
	push	ecx
	lea	edx, DWORD PTR _AinvqXvS$[ebp]
	push	edx
	mov	DWORD PTR _f_info$GSCopy$[ebp], eax
	call	_mat2d_setup
	push	6
	mov	ebx, eax
	push	6
	lea	eax, DWORD PTR _FtAinvxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _FtAinvqXvS$[ebp]
	push	ecx
	mov	DWORD PTR _Ainv$[ebp], ebx
	call	_mat2d_setup
	push	6
	mov	edi, eax
	push	6
	lea	edx, DWORD PTR _FtAFxJ$[ebp]
	push	edx
	lea	eax, DWORD PTR _FtAFqXvS$[ebp]
	push	eax
	mov	DWORD PTR _FtAinv$[ebp], edi
	call	_mat2d_setup

; 970  :   MAT2D(FtAAF,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	ecx, DWORD PTR _FtAAFxJ$[ebp]
	push	ecx
	lea	edx, DWORD PTR _FtAAFqXvS$[ebp]
	push	edx
	mov	DWORD PTR _FtAF$[ebp], eax
	call	_mat2d_setup

; 971  :   int i,j,m,n;
; 972  :   int dim = web.dimension;

	mov	esi, DWORD PTR _web+620

; 973  :   REAL area;
; 974  : 
; 975  :   mat_mul_tr(f_info->sides[0],f_info->sides[0],Ainv,dim,SDIM,dim);

	mov	edx, DWORD PTR _web+616
	add	esp, 64					; 00000040H
	push	esi
	push	edx
	mov	DWORD PTR _FtAAF$[ebp], eax
	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [eax+1276]
	mov	eax, DWORD PTR [ecx]
	push	esi
	push	ebx
	push	eax
	push	eax
	mov	DWORD PTR _dim$[ebp], esi
	call	_mat_mul_tr

; 976  :   area = det_adjoint(Ainv,dim);

	push	esi
	push	ebx
	call	_det_adjoint

; 977  :   if ( area == 0.0 ) return area;

	fld	ST(0)
	fldz
	add	esp, 32					; 00000020H
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN26@pos_area_h@2

; 978  :   for ( i = 0 ; i < dim ; i++ )  /* get true inverse */

	xor	eax, eax
	mov	DWORD PTR _i$[ebp], eax
	test	esi, esi
	jle	SHORT $LN22@pos_area_h@2
$LN56@pos_area_h@2:

; 979  :      for ( j = 0 ; j < dim  ; j++ ) 

	xor	edx, edx
	cmp	esi, 4
	jl	SHORT $LN52@pos_area_h@2
	mov	eax, DWORD PTR [ebx+eax*4]
	lea	ecx, DWORD PTR [esi-4]
	shr	ecx, 2
	add	eax, 16					; 00000010H
	inc	ecx
	lea	edx, DWORD PTR [ecx*4]
$LN50@pos_area_h@2:

; 980  :         Ainv[i][j] /= area;

	fld	QWORD PTR [eax-16]
	add	eax, 32					; 00000020H
	dec	ecx
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-48]
	fld	QWORD PTR [eax-40]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-40]
	fld	QWORD PTR [eax-32]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [eax-24]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-24]
	jne	SHORT $LN50@pos_area_h@2

; 979  :      for ( j = 0 ; j < dim  ; j++ ) 

	mov	eax, DWORD PTR _i$[ebp]
$LN52@pos_area_h@2:
	cmp	edx, esi
	jge	SHORT $LN23@pos_area_h@2
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	ecx, esi
	lea	eax, DWORD PTR [eax+edx*8]
	sub	ecx, edx
$LC21@pos_area_h@2:

; 980  :         Ainv[i][j] /= area;

	fld	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC21@pos_area_h@2

; 979  :      for ( j = 0 ; j < dim  ; j++ ) 

	mov	eax, DWORD PTR _i$[ebp]
$LN23@pos_area_h@2:

; 978  :   for ( i = 0 ; i < dim ; i++ )  /* get true inverse */

	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, esi
	jl	SHORT $LN56@pos_area_h@2
$LN22@pos_area_h@2:

; 981  :   area = sqrt(area)/web.simplex_factorial;  /* simplex area */

	call	__CIsqrt
	fdiv	QWORD PTR _web+792

; 982  :   tr_mat_mul(f_info->sides[0],Ainv,FtAinv,dim,SDIM,dim);

	mov	ecx, DWORD PTR _web+616
	push	esi
	push	ecx
	push	esi
	push	edi
	push	ebx
	mov	ebx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [ebx+1276]
	mov	eax, DWORD PTR [edx]
	push	eax
	fstp	QWORD PTR _area$[ebp]
	call	_tr_mat_mul

; 983  :   mat_mult(FtAinv,f_info->sides[0],FtAF,SDIM,dim,SDIM);

	mov	eax, DWORD PTR _web+616
	mov	ecx, DWORD PTR _FtAF$[ebp]
	mov	edx, DWORD PTR [ebx+1276]
	push	eax
	push	esi
	push	eax
	mov	eax, DWORD PTR [edx]
	push	ecx
	push	eax
	push	edi
	call	_mat_mult

; 984  :   mat_mul_tr(FtAinv,FtAinv,FtAAF,SDIM,dim,SDIM);

	mov	eax, DWORD PTR _web+616
	mov	ecx, DWORD PTR _FtAAF$[ebp]
	push	eax
	push	esi
	push	eax
	push	ecx
	push	edi
	push	edi
	call	_mat_mul_tr

; 985  : 
; 986  :   /* gradient */
; 987  :   for ( i = 0 ; i < dim ; i++ )

	fld	QWORD PTR _area$[ebp]
	mov	ebx, DWORD PTR _web+616
	xor	edx, edx
	add	esp, 72					; 00000048H
	mov	DWORD PTR _i$[ebp], edx
	test	esi, esi
	jle	SHORT $LN16@pos_area_h@2
$LN18@pos_area_h@2:

; 988  :      for ( j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	test	ebx, ebx
	jle	SHORT $LN17@pos_area_h@2
	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ebx, DWORD PTR [eax+1336]
	mov	eax, DWORD PTR [ebx]
	mov	ebx, DWORD PTR [ebx+edx*4+4]
	sub	ebx, eax
	mov	DWORD PTR tv1190[ebp], ebx
$LN55@pos_area_h@2:

; 989  :      { f_info->grad[i+1][j] = FtAinv[j][i]*area;

	mov	ebx, DWORD PTR [edi+ecx*4]
	fld	QWORD PTR [ebx+edx*8]
	lea	edx, DWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR tv1190[ebp]
	fmul	ST(0), ST(1)
	inc	ecx
	add	eax, 8
	fstp	QWORD PTR [ebx+eax-8]

; 990  :         f_info->grad[0][j] -= FtAinv[j][i]*area;

	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR _i$[ebp]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	mov	ebx, DWORD PTR _web+616
	cmp	ecx, ebx
	jl	SHORT $LN55@pos_area_h@2
$LN17@pos_area_h@2:

; 985  : 
; 986  :   /* gradient */
; 987  :   for ( i = 0 ; i < dim ; i++ )

	inc	edx
	mov	DWORD PTR _i$[ebp], edx
	cmp	edx, esi
	jl	SHORT $LN18@pos_area_h@2
$LN16@pos_area_h@2:

; 991  :      }
; 992  : 
; 993  :   /* approximate hessian */
; 994  :   for ( m = 0 ; m < dim ; m++ )

	xor	edx, edx
	test	esi, esi
	jle	$LN26@pos_area_h@2
	fldz
$LN53@pos_area_h@2:

; 995  :      for ( n = 0 ; n < dim ; n++ )

	xor	ecx, ecx
$LN54@pos_area_h@2:

; 996  :         for ( i = 0 ; i < SDIM ; i++ )

	xor	esi, esi
	test	ebx, ebx
	jle	$LN8@pos_area_h@2
	mov	eax, DWORD PTR _FtAF$[ebp]
	sub	eax, edi
	mov	DWORD PTR tv1585[ebp], eax
	mov	eax, DWORD PTR _FtAAF$[ebp]
	sub	eax, edi
	mov	DWORD PTR tv1590[ebp], eax
$LN6@pos_area_h@2:

; 997  :           for ( j = 0 ; j < SDIM ; j++ )

	mov	DWORD PTR _j$[ebp], 0
	test	ebx, ebx
	jle	$LN5@pos_area_h@2

; 996  :         for ( i = 0 ; i < SDIM ; i++ )

	mov	eax, DWORD PTR [edi+esi*4]
	lea	ebx, DWORD PTR [edi+esi*4]
	mov	DWORD PTR tv766[ebp], eax
	mov	eax, DWORD PTR _Ainv$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	lea	eax, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR tv760[ebp], eax
	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edi, DWORD PTR [eax+1340]
	mov	eax, DWORD PTR [edi+edx*4+4]
	mov	edi, DWORD PTR [edi]

; 997  :           for ( j = 0 ; j < SDIM ; j++ )

	mov	DWORD PTR tv830[ebp], edi
	mov	edi, DWORD PTR tv1585[ebp]
	mov	ebx, DWORD PTR [ebx+edi]
	mov	edi, DWORD PTR tv830[ebp]
	mov	DWORD PTR tv816[ebp], eax
	mov	eax, DWORD PTR [eax+ecx*4+4]
	mov	eax, DWORD PTR [eax+esi*4]
	sub	ebx, eax
	mov	DWORD PTR tv1643[ebp], ebx
	mov	ebx, DWORD PTR [edi+ecx*4+4]
	mov	ebx, DWORD PTR [ebx+esi*4]
	mov	edi, DWORD PTR [edi]
	mov	edi, DWORD PTR [edi+esi*4]
	sub	ebx, eax
	mov	DWORD PTR tv1409[ebp], ebx
	mov	ebx, DWORD PTR tv816[ebp]
	mov	ebx, DWORD PTR [ebx]
	mov	ebx, DWORD PTR [ebx+esi*4]
	sub	ebx, eax
	sub	edi, eax
	mov	DWORD PTR tv1421[ebp], edi
	mov	edi, DWORD PTR _j$[ebp]
	mov	DWORD PTR tv1415[ebp], ebx
$LN3@pos_area_h@2:

; 998  :           { REAL val;
; 999  :              val = (i==j) ? gga_coeff*Ainv[m][n] : 0.0;

	cmp	esi, edi
	jne	SHORT $LN28@pos_area_h@2
	fld	QWORD PTR _gga_coeff
	mov	ebx, DWORD PTR tv760[ebp]
	fmul	QWORD PTR [ebx]
	jmp	SHORT $LN29@pos_area_h@2
$LN28@pos_area_h@2:
	fld	ST(0)
$LN29@pos_area_h@2:

; 1000 :              val += gfagfa_coeff*FtAinv[i][n]*FtAinv[j][m]; 

	mov	ebx, DWORD PTR _FtAinv$[ebp]
	mov	ebx, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR tv772[ebp], ebx
	mov	ebx, DWORD PTR tv766[ebp]
	fld	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR tv772[ebp]
	fmul	QWORD PTR _gfagfa_coeff
	fmul	QWORD PTR [ebx+edx*8]

; 1001 :              val += fgagfa_coeff*FtAF[i][j]*Ainv[m][n];

	mov	ebx, DWORD PTR tv1643[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv760[ebp]
	fmul	QWORD PTR _fgagfa_coeff
	fmul	QWORD PTR [ebx]
	faddp	ST(1), ST(0)

; 1002 :              val += (m==n) ? gfaafg_coeff*FtAAF[i][j] : 0.0;

	cmp	edx, ecx
	jne	SHORT $LN30@pos_area_h@2
	mov	edi, DWORD PTR _FtAinv$[ebp]
	mov	ebx, DWORD PTR tv1590[ebp]
	lea	edi, DWORD PTR [edi+esi*4]
	mov	ebx, DWORD PTR [edi+ebx]
	mov	edi, DWORD PTR _j$[ebp]
	fld	QWORD PTR [ebx+edi*8]
	fmul	QWORD PTR _gfaafg_coeff
	jmp	SHORT $LN31@pos_area_h@2
$LN30@pos_area_h@2:
	fld	ST(1)
$LN31@pos_area_h@2:

; 1003 :              val += gfa_2_coeff*FtAinv[i][m]*FtAinv[j][n];

	mov	ebx, DWORD PTR tv766[ebp]
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR tv772[ebp]
	fmul	QWORD PTR _gfa_2_coeff
	inc	edi
	add	eax, 8
	mov	DWORD PTR _j$[ebp], edi
	fmul	QWORD PTR [ebx+ecx*8]

; 1004 :              val *= area;
; 1005 :              f_info->hess[m+1][n+1][i][j] += val;
; 1006 :              f_info->hess[0][n+1][i][j] -= val;

	mov	ebx, DWORD PTR tv1409[ebp]
	fxch	ST(1)
	faddp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fld	ST(0)
	fadd	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	fld	QWORD PTR [ebx+eax-8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [ebx+eax-8]

; 1007 :              f_info->hess[m+1][0][i][j] -= val;

	mov	ebx, DWORD PTR tv1415[ebp]
	fld	QWORD PTR [ebx+eax-8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [ebx+eax-8]

; 1008 :              f_info->hess[0][0][i][j] += val;

	mov	ebx, DWORD PTR tv1421[ebp]
	fadd	QWORD PTR [ebx+eax-8]
	fstp	QWORD PTR [ebx+eax-8]
	mov	ebx, DWORD PTR _web+616
	cmp	edi, ebx
	jl	$LN3@pos_area_h@2

; 997  :           for ( j = 0 ; j < SDIM ; j++ )

	mov	edi, DWORD PTR _FtAinv$[ebp]
$LN5@pos_area_h@2:

; 996  :         for ( i = 0 ; i < SDIM ; i++ )

	inc	esi
	cmp	esi, ebx
	jl	$LN6@pos_area_h@2
$LN8@pos_area_h@2:

; 995  :      for ( n = 0 ; n < dim ; n++ )

	inc	ecx
	cmp	ecx, DWORD PTR _dim$[ebp]
	jl	$LN54@pos_area_h@2

; 991  :      }
; 992  : 
; 993  :   /* approximate hessian */
; 994  :   for ( m = 0 ; m < dim ; m++ )

	inc	edx
	cmp	edx, DWORD PTR _dim$[ebp]
	jl	$LN53@pos_area_h@2

; 995  :      for ( n = 0 ; n < dim ; n++ )

	fstp	ST(0)
$LN26@pos_area_h@2:

; 1009 :           }
; 1010 :   return area;
; 1011 : } // end pos_area_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_pos_area_hess ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@GJBIDELP@Sobolev_area?5only?5for?5LINEAR?5mod@ ; `string'
PUBLIC	_sobolev_area_init
;	COMDAT ??_C@_0CF@GJBIDELP@Sobolev_area?5only?5for?5LINEAR?5mod@
CONST	SEGMENT
??_C@_0CF@GJBIDELP@Sobolev_area?5only?5for?5LINEAR?5mod@ DB 'Sobolev_area'
	DB	' only for LINEAR model.', 0aH, 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _sobolev_area_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_sobolev_area_init PROC					; COMDAT

; 1022 :   if ( web.modeltype != LINEAR ) 

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN1@sobolev_ar

; 1023 :      kb_error(2146,"Sobolev_area only for LINEAR model.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CF@GJBIDELP@Sobolev_area?5only?5for?5LINEAR?5mod@
	push	2146					; 00000862H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@sobolev_ar:

; 1024 : } // end sobolev_area_init()

	ret	0
_sobolev_area_init ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_sobolev_area_hess
; Function compile flags: /Ogtp
;	COMDAT _sobolev_area_hess
_TEXT	SEGMENT
_FtAinvqXvS$ = -996					; size = 24
_AinvqXvS$ = -972					; size = 24
_FtAFqXvS$ = -948					; size = 24
tv1462 = -924						; size = 4
_Ainv$ = -920						; size = 4
tv749 = -916						; size = 4
tv1497 = -912						; size = 4
_area$ = -908						; size = 8
tv1330 = -904						; size = 4
_FtAF$ = -900						; size = 4
_dim$ = -896						; size = 4
tv728 = -892						; size = 4
_f_info$GSCopy$ = -888					; size = 4
_j$ = -884						; size = 4
tv1131 = -880						; size = 4
_m$ = -880						; size = 4
_FtAinv$ = -876						; size = 4
_n$ = -872						; size = 4
_i$ = -872						; size = 4
_AinvxJ$ = -868						; size = 288
_FtAFxJ$ = -580						; size = 288
_FtAinvxJ$ = -292					; size = 288
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_sobolev_area_hess PROC					; COMDAT

; 1027 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 996				; 000003e4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _f_info$[ebp]

; 1028 :   MAT2D(Ainv,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	eax, DWORD PTR _AinvxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _AinvqXvS$[ebp]
	push	ecx
	mov	DWORD PTR _f_info$GSCopy$[ebp], edi
	call	_mat2d_setup

; 1029 :   MAT2D(FtAinv,MAXCOORD,MAXCOORD);

	push	6
	mov	esi, eax
	push	6
	lea	edx, DWORD PTR _FtAinvxJ$[ebp]
	push	edx
	lea	eax, DWORD PTR _FtAinvqXvS$[ebp]
	push	eax
	mov	DWORD PTR _Ainv$[ebp], esi
	call	_mat2d_setup

; 1030 :   MAT2D(FtAF,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	ecx, DWORD PTR _FtAFxJ$[ebp]
	push	ecx
	lea	edx, DWORD PTR _FtAFqXvS$[ebp]
	push	edx
	mov	DWORD PTR _FtAinv$[ebp], eax
	call	_mat2d_setup

; 1031 :   int i,j,m,n;
; 1032 :   int dim = web.dimension;

	mov	ebx, DWORD PTR _web+620

; 1033 :   REAL area;
; 1034 : 
; 1035 :   mat_mul_tr(f_info->sides[0],f_info->sides[0],Ainv,dim,SDIM,dim);

	mov	ecx, DWORD PTR _web+616
	push	ebx
	push	ecx
	mov	DWORD PTR _FtAF$[ebp], eax
	mov	eax, DWORD PTR [edi+1276]
	mov	eax, DWORD PTR [eax]
	push	ebx
	push	esi
	push	eax
	push	eax
	mov	DWORD PTR _dim$[ebp], ebx
	call	_mat_mul_tr
	add	esp, 72					; 00000048H

; 1036 :   area = det_adjoint(Ainv,dim);

	push	ebx
	push	esi
	call	_det_adjoint

; 1037 :   if ( area == 0.0 ) return area;

	fld	ST(0)
	fldz
	add	esp, 8
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN26@sobolev_ar@2

; 1038 :   for ( i = 0 ; i < dim ; i++ )  /* get true inverse */

	xor	edi, edi
	test	ebx, ebx
	jle	SHORT $LN22@sobolev_ar@2
$LN54@sobolev_ar@2:

; 1039 :      for ( j = 0 ; j < dim  ; j++ ) 

	xor	edx, edx
	cmp	ebx, 4
	jl	SHORT $LN51@sobolev_ar@2
	mov	eax, DWORD PTR [esi+edi*4]
	lea	ecx, DWORD PTR [ebx-4]
	shr	ecx, 2
	add	eax, 16					; 00000010H
	inc	ecx
	lea	edx, DWORD PTR [ecx*4]
$LN48@sobolev_ar@2:

; 1040 :         Ainv[i][j] /= area;

	fld	QWORD PTR [eax-16]
	add	eax, 32					; 00000020H
	dec	ecx
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-48]
	fld	QWORD PTR [eax-40]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-40]
	fld	QWORD PTR [eax-32]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [eax-24]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-24]
	jne	SHORT $LN48@sobolev_ar@2
$LN51@sobolev_ar@2:

; 1039 :      for ( j = 0 ; j < dim  ; j++ ) 

	cmp	edx, ebx
	jge	SHORT $LN23@sobolev_ar@2
	mov	eax, DWORD PTR [esi+edi*4]
	mov	ecx, ebx
	lea	eax, DWORD PTR [eax+edx*8]
	sub	ecx, edx
$LC21@sobolev_ar@2:

; 1040 :         Ainv[i][j] /= area;

	fld	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC21@sobolev_ar@2
$LN23@sobolev_ar@2:

; 1038 :   for ( i = 0 ; i < dim ; i++ )  /* get true inverse */

	inc	edi
	cmp	edi, ebx
	jl	SHORT $LN54@sobolev_ar@2
$LN22@sobolev_ar@2:

; 1041 :   area = sqrt(area)/web.simplex_factorial;  /* simplex area */

	call	__CIsqrt
	fdiv	QWORD PTR _web+792

; 1042 : /*  area *= get_facet_density(f_info->id); */
; 1043 :   tr_mat_mul(f_info->sides[0],Ainv,FtAinv,dim,SDIM,dim);

	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR _FtAinv$[ebp]
	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [edi+1276]
	push	ebx
	push	ecx
	mov	ecx, DWORD PTR [eax]
	push	ebx
	push	edx
	push	esi
	push	ecx
	fstp	QWORD PTR _area$[ebp]
	call	_tr_mat_mul

; 1044 :   mat_mult(FtAinv,f_info->sides[0],FtAF,SDIM,dim,SDIM);

	mov	eax, DWORD PTR _web+616
	mov	edx, DWORD PTR _FtAF$[ebp]
	push	eax
	push	ebx
	push	eax
	mov	eax, DWORD PTR [edi+1276]
	mov	ecx, DWORD PTR [eax]
	push	edx
	mov	edx, DWORD PTR _FtAinv$[ebp]
	push	ecx
	push	edx
	call	_mat_mult

; 1045 : 
; 1046 :   /* gradient */
; 1047 :   for ( i = 0 ; i < dim ; i++ )

	fld	QWORD PTR _area$[ebp]
	mov	edi, DWORD PTR _web+616
	xor	edx, edx
	add	esp, 48					; 00000030H
	mov	DWORD PTR _i$[ebp], edx
	test	ebx, ebx
	jle	SHORT $LN16@sobolev_ar@2
$LN18@sobolev_ar@2:

; 1048 :      for ( j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	test	edi, edi
	jle	SHORT $LN17@sobolev_ar@2
	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edi, DWORD PTR [eax+1336]
	mov	eax, DWORD PTR [edi]
	mov	edi, DWORD PTR [edi+edx*4+4]
	sub	edi, eax
	mov	DWORD PTR tv1131[ebp], edi
$LN53@sobolev_ar@2:

; 1045 : 
; 1046 :   /* gradient */
; 1047 :   for ( i = 0 ; i < dim ; i++ )

	mov	edi, DWORD PTR _FtAinv$[ebp]
	mov	edi, DWORD PTR [edi+ecx*4]

; 1049 :      { f_info->grad[i+1][j] = FtAinv[j][i]*area;

	fld	QWORD PTR [edi+edx*8]
	lea	edx, DWORD PTR [edi+edx*8]
	mov	edi, DWORD PTR tv1131[ebp]
	fmul	ST(0), ST(1)
	inc	ecx
	add	eax, 8
	fstp	QWORD PTR [edi+eax-8]

; 1050 :         f_info->grad[0][j] -= FtAinv[j][i]*area;

	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR _i$[ebp]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	mov	edi, DWORD PTR _web+616
	cmp	ecx, edi
	jl	SHORT $LN53@sobolev_ar@2
$LN17@sobolev_ar@2:

; 1045 : 
; 1046 :   /* gradient */
; 1047 :   for ( i = 0 ; i < dim ; i++ )

	inc	edx
	mov	DWORD PTR _i$[ebp], edx
	cmp	edx, ebx
	jl	SHORT $LN18@sobolev_ar@2
$LN16@sobolev_ar@2:

; 1051 :      }
; 1052 : 
; 1053 :   /* approximate hessian */
; 1054 :   for ( m = 0 ; m < dim ; m++ )

	xor	eax, eax
	mov	DWORD PTR _m$[ebp], eax
	test	ebx, ebx
	jle	$LN26@sobolev_ar@2
	fldz
$LN52@sobolev_ar@2:

; 1055 :      for ( n = 0 ; n < dim ; n++ )

	xor	ebx, ebx
	mov	DWORD PTR _n$[ebp], ebx
$LN9@sobolev_ar@2:

; 1056 :         for ( i = 0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	test	edi, edi
	jle	$LN8@sobolev_ar@2
	mov	edx, DWORD PTR _FtAF$[ebp]
	sub	edx, DWORD PTR _FtAinv$[ebp]
	mov	DWORD PTR tv1462[ebp], edx
$LN6@sobolev_ar@2:

; 1057 :           for ( j = 0 ; j < SDIM ; j++ )

	mov	DWORD PTR _j$[ebp], 0
	test	edi, edi
	jle	$LN5@sobolev_ar@2

; 1056 :         for ( i = 0 ; i < SDIM ; i++ )

	mov	esi, DWORD PTR [esi+eax*4]
	mov	edx, DWORD PTR _FtAinv$[ebp]
	lea	esi, DWORD PTR [esi+ebx*8]
	lea	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv728[ebp], esi
	mov	esi, DWORD PTR [edx]
	lea	esi, DWORD PTR [esi+eax*8]
	mov	DWORD PTR tv749[ebp], esi
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	esi, DWORD PTR [esi+1340]
	mov	edi, DWORD PTR [esi+eax*4+4]

; 1057 :           for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR [edi+ebx*4+4]
	mov	ebx, DWORD PTR [esi]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	esi, DWORD PTR tv1462[ebp]
	mov	edx, DWORD PTR [edx+esi]
	mov	esi, DWORD PTR [edi]
	mov	edi, DWORD PTR [ebx]
	mov	esi, DWORD PTR [esi+ecx*4]
	mov	edi, DWORD PTR [edi+ecx*4]
	sub	edx, eax
	mov	DWORD PTR tv1497[ebp], edx
	mov	edx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR [ebx+edx*4+4]
	mov	edx, DWORD PTR [edx+ecx*4]
	sub	edx, eax
	sub	esi, eax
	sub	edi, eax
	mov	DWORD PTR tv1330[ebp], edi
$LN50@sobolev_ar@2:

; 1058 :           { REAL val;
; 1059 :              val = (i==j) ? Ainv[m][n] : 0.0;

	mov	edi, DWORD PTR _j$[ebp]
	cmp	ecx, edi
	jne	SHORT $LN28@sobolev_ar@2
	mov	ebx, DWORD PTR tv728[ebp]
	fld	QWORD PTR [ebx]
	jmp	SHORT $LN29@sobolev_ar@2
$LN28@sobolev_ar@2:
	fld	ST(0)
$LN29@sobolev_ar@2:

; 1060 :              val -= FtAF[i][j]*Ainv[m][n];

	mov	ebx, DWORD PTR tv1497[ebp]
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv728[ebp]
	fmul	QWORD PTR [ebx]

; 1061 :              val += FtAinv[i][m]*FtAinv[j][n];

	mov	ebx, DWORD PTR _FtAinv$[ebp]
	mov	edi, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR _n$[ebp]
	fsubp	ST(1), ST(0)
	add	eax, 8
	fld	QWORD PTR [edi+ebx*8]
	mov	edi, DWORD PTR tv749[ebp]
	fmul	QWORD PTR [edi]

; 1062 :              val *= area;
; 1063 :              f_info->hess[m+1][n+1][i][j] += val;
; 1064 :              f_info->hess[0][n+1][i][j] -= val;
; 1065 :              f_info->hess[m+1][0][i][j] -= val;
; 1066 :              f_info->hess[0][0][i][j] += val;

	mov	edi, DWORD PTR tv1330[ebp]
	mov	ebx, DWORD PTR _j$[ebp]
	inc	ebx
	faddp	ST(1), ST(0)
	mov	DWORD PTR _j$[ebp], ebx
	fmul	ST(0), ST(2)
	fld	QWORD PTR [eax-8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax-8]
	fld	QWORD PTR [edx+eax-8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx+eax-8]
	fld	QWORD PTR [esi+eax-8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [esi+eax-8]
	fadd	QWORD PTR [edi+eax-8]
	fstp	QWORD PTR [edi+eax-8]
	mov	edi, DWORD PTR _web+616
	cmp	ebx, edi
	jl	$LN50@sobolev_ar@2

; 1057 :           for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR _m$[ebp]
	mov	esi, DWORD PTR _Ainv$[ebp]
	mov	ebx, DWORD PTR _n$[ebp]
$LN5@sobolev_ar@2:

; 1056 :         for ( i = 0 ; i < SDIM ; i++ )

	inc	ecx
	cmp	ecx, edi
	jl	$LN6@sobolev_ar@2
$LN8@sobolev_ar@2:

; 1055 :      for ( n = 0 ; n < dim ; n++ )

	inc	ebx
	mov	DWORD PTR _n$[ebp], ebx
	cmp	ebx, DWORD PTR _dim$[ebp]
	jl	$LN9@sobolev_ar@2

; 1051 :      }
; 1052 : 
; 1053 :   /* approximate hessian */
; 1054 :   for ( m = 0 ; m < dim ; m++ )

	inc	eax
	mov	DWORD PTR _m$[ebp], eax
	cmp	eax, DWORD PTR _dim$[ebp]
	jl	$LN52@sobolev_ar@2

; 1055 :      for ( n = 0 ; n < dim ; n++ )

	fstp	ST(0)
$LN26@sobolev_ar@2:

; 1067 :           }
; 1068 :   return area;
; 1069 : } // end sobolev_area_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_sobolev_area_hess ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@BEOKHNID@dirichlet_area?5only?5for?5LINEAR?5m@ ; `string'
PUBLIC	_dirichlet_area_init
;	COMDAT ??_C@_0CH@BEOKHNID@dirichlet_area?5only?5for?5LINEAR?5m@
CONST	SEGMENT
??_C@_0CH@BEOKHNID@dirichlet_area?5only?5for?5LINEAR?5m@ DB 'dirichlet_ar'
	DB	'ea only for LINEAR model.', 0aH, 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _dirichlet_area_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_dirichlet_area_init PROC				; COMDAT

; 1080 :   if ( web.modeltype != LINEAR ) 

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN1@dirichlet_

; 1081 :      kb_error(2147,"dirichlet_area only for LINEAR model.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CH@BEOKHNID@dirichlet_area?5only?5for?5LINEAR?5m@
	push	2147					; 00000863H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@dirichlet_:

; 1082 : } // end dirichlet_area_init()

	ret	0
_dirichlet_area_init ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_dirichlet_area_hess
; Function compile flags: /Ogtp
;	COMDAT _dirichlet_area_hess
_TEXT	SEGMENT
_FtAinvqXvS$ = -968					; size = 24
_FtAFqXvS$ = -944					; size = 24
_AinvqXvS$ = -920					; size = 24
_Ainv$ = -896						; size = 4
_dim$ = -892						; size = 4
_area$ = -888						; size = 8
tv695 = -884						; size = 4
_f_info$GSCopy$ = -880					; size = 4
_m$ = -876						; size = 4
_FtAF$ = -876						; size = 4
_n$ = -872						; size = 4
_FtAinv$ = -872						; size = 4
_AinvxJ$ = -868						; size = 288
_FtAFxJ$ = -580						; size = 288
_FtAinvxJ$ = -292					; size = 288
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_dirichlet_area_hess PROC				; COMDAT

; 1085 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 968				; 000003c8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _f_info$[ebp]

; 1086 :   MAT2D(Ainv,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	eax, DWORD PTR _AinvxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _AinvqXvS$[ebp]
	push	ecx
	mov	DWORD PTR _f_info$GSCopy$[ebp], edi
	call	_mat2d_setup

; 1087 :   MAT2D(FtAinv,MAXCOORD,MAXCOORD);

	push	6
	mov	esi, eax
	push	6
	lea	edx, DWORD PTR _FtAinvxJ$[ebp]
	push	edx
	lea	eax, DWORD PTR _FtAinvqXvS$[ebp]
	push	eax
	mov	DWORD PTR _Ainv$[ebp], esi
	call	_mat2d_setup

; 1088 :   MAT2D(FtAF,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	ecx, DWORD PTR _FtAFxJ$[ebp]
	push	ecx
	lea	edx, DWORD PTR _FtAFqXvS$[ebp]
	push	edx
	mov	DWORD PTR _FtAinv$[ebp], eax
	call	_mat2d_setup

; 1089 :   int i,j,m,n;
; 1090 :   int dim = web.dimension;

	mov	ebx, DWORD PTR _web+620

; 1091 :   REAL area;
; 1092 : 
; 1093 :   mat_mul_tr(f_info->sides[0],f_info->sides[0],Ainv,dim,SDIM,dim);

	mov	ecx, DWORD PTR _web+616
	push	ebx
	push	ecx
	mov	DWORD PTR _FtAF$[ebp], eax
	mov	eax, DWORD PTR [edi+1276]
	mov	eax, DWORD PTR [eax]
	push	ebx
	push	esi
	push	eax
	push	eax
	mov	DWORD PTR _dim$[ebp], ebx
	call	_mat_mul_tr
	add	esp, 72					; 00000048H

; 1094 :   area = det_adjoint(Ainv,dim);

	push	ebx
	push	esi
	call	_det_adjoint

; 1095 :   if ( area == 0.0 ) return area;

	fld	ST(0)
	fldz
	add	esp, 8
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN23@dirichlet_@2

; 1096 :   for ( i = 0 ; i < dim ; i++ )  /* get true inverse */

	xor	edi, edi
	test	ebx, ebx
	jle	SHORT $LN19@dirichlet_@2
$LN47@dirichlet_@2:

; 1097 :      for ( j = 0 ; j < dim  ; j++ ) 

	xor	edx, edx
	cmp	ebx, 4
	jl	SHORT $LN43@dirichlet_@2
	mov	eax, DWORD PTR [esi+edi*4]
	lea	ecx, DWORD PTR [ebx-4]
	shr	ecx, 2
	add	eax, 16					; 00000010H
	inc	ecx
	lea	edx, DWORD PTR [ecx*4]
$LN41@dirichlet_@2:

; 1098 :         Ainv[i][j] /= area;

	fld	QWORD PTR [eax-16]
	add	eax, 32					; 00000020H
	dec	ecx
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-48]
	fld	QWORD PTR [eax-40]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-40]
	fld	QWORD PTR [eax-32]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [eax-24]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-24]
	jne	SHORT $LN41@dirichlet_@2
$LN43@dirichlet_@2:

; 1097 :      for ( j = 0 ; j < dim  ; j++ ) 

	cmp	edx, ebx
	jge	SHORT $LN20@dirichlet_@2
	mov	eax, DWORD PTR [esi+edi*4]
	mov	ecx, ebx
	lea	eax, DWORD PTR [eax+edx*8]
	sub	ecx, edx
$LC18@dirichlet_@2:

; 1098 :         Ainv[i][j] /= area;

	fld	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC18@dirichlet_@2
$LN20@dirichlet_@2:

; 1096 :   for ( i = 0 ; i < dim ; i++ )  /* get true inverse */

	inc	edi
	cmp	edi, ebx
	jl	SHORT $LN47@dirichlet_@2
$LN19@dirichlet_@2:

; 1099 :   area = sqrt(area)/web.simplex_factorial;  /* simplex area */

	call	__CIsqrt
	fdiv	QWORD PTR _web+792

; 1100 : /*  area *= get_facet_density(f_info->id); */
; 1101 :   tr_mat_mul(f_info->sides[0],Ainv,FtAinv,dim,SDIM,dim);

	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR _FtAinv$[ebp]
	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [edi+1276]
	push	ebx
	push	ecx
	mov	ecx, DWORD PTR [eax]
	push	ebx
	push	edx
	push	esi
	push	ecx
	fstp	QWORD PTR _area$[ebp]
	call	_tr_mat_mul

; 1102 :   mat_mult(FtAinv,f_info->sides[0],FtAF,SDIM,dim,SDIM);

	mov	eax, DWORD PTR _web+616
	mov	edx, DWORD PTR _FtAF$[ebp]
	push	eax
	push	ebx
	push	eax
	mov	eax, DWORD PTR [edi+1276]
	mov	ecx, DWORD PTR [eax]
	push	edx
	mov	edx, DWORD PTR _FtAinv$[ebp]
	push	ecx
	push	edx
	call	_mat_mult

; 1103 : 
; 1104 :   /* gradient */
; 1105 :   for ( i = 0 ; i < dim ; i++ )

	fld	QWORD PTR _area$[ebp]
	mov	edx, DWORD PTR _web+616
	add	esp, 48					; 00000030H
	xor	esi, esi
	test	ebx, ebx
	jle	SHORT $LN13@dirichlet_@2
$LN48@dirichlet_@2:

; 1106 :      for ( j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN14@dirichlet_@2
	mov	edx, DWORD PTR [edi+1336]
	mov	eax, DWORD PTR [edx]
	mov	edi, DWORD PTR [edx+esi*4+4]
	sub	edi, eax
$LN46@dirichlet_@2:

; 1103 : 
; 1104 :   /* gradient */
; 1105 :   for ( i = 0 ; i < dim ; i++ )

	mov	edx, DWORD PTR _FtAinv$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]

; 1107 :      { f_info->grad[i+1][j] = FtAinv[j][i]*area;

	fld	QWORD PTR [edx+esi*8]
	lea	edx, DWORD PTR [edx+esi*8]
	fmul	ST(0), ST(1)
	inc	ecx
	add	eax, 8
	fstp	QWORD PTR [edi+eax-8]

; 1108 :         f_info->grad[0][j] -= FtAinv[j][i]*area;

	fld	QWORD PTR [edx]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	mov	edx, DWORD PTR _web+616
	cmp	ecx, edx
	jl	SHORT $LN46@dirichlet_@2

; 1106 :      for ( j = 0 ; j < SDIM ; j++ )

	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
$LN14@dirichlet_@2:

; 1103 : 
; 1104 :   /* gradient */
; 1105 :   for ( i = 0 ; i < dim ; i++ )

	inc	esi
	cmp	esi, ebx
	jl	SHORT $LN48@dirichlet_@2
$LN13@dirichlet_@2:

; 1109 :      }
; 1110 : 
; 1111 :   /* approximate hessian */
; 1112 :   for ( m = 0 ; m < dim ; m++ )

	xor	edi, edi
	mov	DWORD PTR _m$[ebp], edi
	test	ebx, ebx
	jle	$LN23@dirichlet_@2
$LN45@dirichlet_@2:

; 1113 :      for ( n = 0 ; n < dim ; n++ )

	xor	esi, esi
	mov	DWORD PTR _n$[ebp], esi
$LN6@dirichlet_@2:

; 1114 :         for ( i = 0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	test	edx, edx
	jle	$LN5@dirichlet_@2

; 1113 :      for ( n = 0 ; n < dim ; n++ )

	mov	eax, DWORD PTR _Ainv$[ebp]
	mov	edx, DWORD PTR [eax+edi*4]
	lea	eax, DWORD PTR [edx+esi*8]
	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	DWORD PTR tv695[ebp], eax
	mov	eax, DWORD PTR [edx+1340]
	mov	edx, DWORD PTR [eax+edi*4+4]
	mov	ebx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ebx+esi*4+4]

; 1114 :         for ( i = 0 ; i < SDIM ; i++ )

	mov	esi, DWORD PTR [edx+esi*4+4]
	mov	edi, DWORD PTR [edx]
	mov	ebx, DWORD PTR [ebx]
	sub	esi, eax
	sub	edi, eax
	sub	ebx, eax
$LN44@dirichlet_@2:

; 1115 :           { REAL val;
; 1116 :              val = Ainv[m][n];
; 1117 :              val *= area;

	mov	edx, DWORD PTR tv695[ebp]
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR [esi+eax]
	fmul	ST(0), ST(1)
	lea	edx, DWORD PTR [edx+ecx*8]

; 1118 :              f_info->hess[m+1][n+1][i][i] += val;

	fld	QWORD PTR [edx]
	add	eax, 4
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR [eax-4]

; 1119 :              f_info->hess[0][n+1][i][i] -= val;

	fld	QWORD PTR [edx+ecx*8]
	lea	edx, DWORD PTR [edx+ecx*8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR [edi+eax-4]

; 1120 :              f_info->hess[m+1][0][i][i] -= val;

	fld	QWORD PTR [edx+ecx*8]
	lea	edx, DWORD PTR [edx+ecx*8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR [ebx+eax-4]
	lea	edx, DWORD PTR [edx+ecx*8]

; 1121 :              f_info->hess[0][0][i][i] += val;

	fadd	QWORD PTR [edx]
	inc	ecx
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR _web+616
	cmp	ecx, edx
	jl	SHORT $LN44@dirichlet_@2

; 1114 :         for ( i = 0 ; i < SDIM ; i++ )

	mov	ebx, DWORD PTR _dim$[ebp]
	mov	esi, DWORD PTR _n$[ebp]
	mov	edi, DWORD PTR _m$[ebp]
$LN5@dirichlet_@2:

; 1113 :      for ( n = 0 ; n < dim ; n++ )

	inc	esi
	mov	DWORD PTR _n$[ebp], esi
	cmp	esi, ebx
	jl	$LN6@dirichlet_@2

; 1109 :      }
; 1110 : 
; 1111 :   /* approximate hessian */
; 1112 :   for ( m = 0 ; m < dim ; m++ )

	inc	edi
	mov	DWORD PTR _m$[ebp], edi
	cmp	edi, ebx
	jl	$LN45@dirichlet_@2
$LN23@dirichlet_@2:

; 1122 :           }
; 1123 :   return area;
; 1124 : } // end dirichlet_area_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_dirichlet_area_hess ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CP@MPDKGEGN@stress_integral?5method?5only?5for?5@ ; `string'
PUBLIC	??_C@_0CL@KIIDCCL@stress_integral?5method?5only?5for?5@ ; `string'
PUBLIC	??_C@_0CM@IBNPJGFJ@stress_integral?5method?5only?5for?5@ ; `string'
PUBLIC	_stress_integral_init
;	COMDAT ??_C@_0CP@MPDKGEGN@stress_integral?5method?5only?5for?5@
CONST	SEGMENT
??_C@_0CP@MPDKGEGN@stress_integral?5method?5only?5for?5@ DB 'stress_integ'
	DB	'ral method only for LINEAR model.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@KIIDCCL@stress_integral?5method?5only?5for?5@
CONST	SEGMENT
??_C@_0CL@KIIDCCL@stress_integral?5method?5only?5for?5@ DB 'stress_integr'
	DB	'al method only for 3D space.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@IBNPJGFJ@stress_integral?5method?5only?5for?5@
CONST	SEGMENT
??_C@_0CM@IBNPJGFJ@stress_integral?5method?5only?5for?5@ DB 'stress_integ'
	DB	'ral method only for 2D facets.', 0aH, 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _stress_integral_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_stress_integral_init PROC				; COMDAT

; 1145 :   if ( web.dimension != 2 )

	cmp	DWORD PTR _web+620, 2
	je	SHORT $LN3@stress_int

; 1146 :      kb_error(1781,"stress_integral method only for 2D facets.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CM@IBNPJGFJ@stress_integral?5method?5only?5for?5@
	push	1781					; 000006f5H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN3@stress_int:

; 1147 : 
; 1148 :   if ( SDIM != 3 )

	cmp	DWORD PTR _web+616, 3
	je	SHORT $LN2@stress_int

; 1149 :      kb_error(1782,"stress_integral method only for 3D space.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CL@KIIDCCL@stress_integral?5method?5only?5for?5@
	push	1782					; 000006f6H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN2@stress_int:

; 1150 : 
; 1151 :   if ( web.modeltype != LINEAR )

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN1@stress_int

; 1152 :      kb_error(1783,"stress_integral method only for LINEAR model.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CP@MPDKGEGN@stress_integral?5method?5only?5for?5@
	push	1783					; 000006f7H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@stress_int:

; 1153 : 
; 1154 : } // end stress_integral_init()

	ret	0
_stress_integral_init ENDP
_TEXT	ENDS
PUBLIC	__real@4008000000000000
PUBLIC	_stress_integral
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _stress_integral
_TEXT	SEGMENT
_un$ = -80						; size = 48
_density$ = -32						; size = 8
_value$ = -24						; size = 8
_area$ = -16						; size = 8
_st$ = -16						; size = 8
_ss$ = -8						; size = 8
_f_info$ = 8						; size = 4
_stress_integral PROC					; COMDAT

; 1165 : { REAL value = 0.0;

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H

; 1166 :   REAL area;
; 1167 :   REAL ss,st,tt;
; 1168 :   int stress_comp;
; 1169 :   REAL un[MAXCOORD];
; 1170 :   REAL density = get_facet_density(f_info->id);

	mov	ecx, DWORD PTR _web+236
	fldz
	push	esi
	fstp	QWORD PTR _value$[ebp]
	mov	esi, DWORD PTR _f_info$[ebp]
	mov	eax, DWORD PTR [esi]
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+32]

; 1171 :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [esi+8]
	push	edi
	fstp	QWORD PTR _density$[ebp]
	cdq
	mov	edi, eax

; 1172 : 
; 1173 :   ss = SDIM_dot(f_info->sides[0][0],f_info->sides[0][0]);

	mov	eax, DWORD PTR [esi+1276]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	xor	edi, edx
	sub	edi, edx
	mov	edx, DWORD PTR _web+616
	imul	edi, 2928				; 00000b70H
	add	edi, DWORD PTR _meth_inst_list
	push	edx
	push	eax
	push	eax
	call	_dot

; 1174 :   st = SDIM_dot(f_info->sides[0][0],f_info->sides[0][1]);

	mov	eax, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [eax]
	fstp	QWORD PTR _ss$[ebp]
	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	push	ecx
	push	edx
	push	eax
	call	_dot

; 1175 :   tt = SDIM_dot(f_info->sides[0][1],f_info->sides[0][1]);

	mov	ecx, DWORD PTR [esi+1276]
	fstp	QWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _web+616
	mov	eax, DWORD PTR [edx+4]
	push	ecx
	push	eax
	push	eax
	call	_dot

; 1176 :   area = sqrt(ss*tt-st*st)/2;

	fmul	QWORD PTR _ss$[ebp]
	fld	QWORD PTR _st$[ebp]
	add	esp, 36					; 00000024H
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000

; 1177 :   un[0] = f_info->normal[0]/(2*area);
; 1178 :   un[1] = f_info->normal[1]/(2*area);
; 1179 :   un[2] = f_info->normal[2]/(2*area);
; 1180 : 
; 1181 : 
; 1182 :   stress_comp = (int)eval(mi->expr[0],NULL,f_info->id,NULL);

	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edi+232]
	fst	QWORD PTR _area$[ebp]
	push	0
	fadd	ST(0), ST(0)
	push	edx
	fld	QWORD PTR [esi+1288]
	push	0
	push	eax
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR _un$[ebp]
	fld	QWORD PTR [esi+1296]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR _un$[ebp+8]
	fdivr	QWORD PTR [esi+1304]
	fstp	QWORD PTR _un$[ebp+16]
	call	_eval
	add	esp, 16					; 00000010H
	call	__ftol2_sse
	pop	edi
	pop	esi

; 1183 : 
; 1184 :   switch( stress_comp ) {

	cmp	eax, 310				; 00000136H
	jg	$LN22@stress_int@2
	je	$LN10@stress_int@2
	sub	eax, 10					; 0000000aH
	cmp	eax, 220				; 000000dcH
	ja	$LN24@stress_int@2
	movzx	ecx, BYTE PTR $LN23@stress_int@2[eax]
	jmp	DWORD PTR $LN26@stress_int@2[ecx*4]
$LN17@stress_int@2:

; 1185 :   case 11:
; 1186 :      value = (REAL)1 - un[0]*un[0]; break;

	fld	QWORD PTR _un$[ebp]
	fmul	ST(0), ST(0)
	fld1
	fsubrp	ST(1), ST(0)

; 1217 :   default:
; 1218 :      ;
; 1219 :   }
; 1220 :   value *= area;

	fmul	QWORD PTR _area$[ebp]

; 1221 :   value *= density;

	fmul	QWORD PTR _density$[ebp]

; 1222 :   return value;
; 1223 : } // end stress_integral()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@stress_int@2:

; 1187 :   case 12:
; 1188 :      value =  - un[0]*un[1]; break;

	fld	QWORD PTR _un$[ebp+8]
	fmul	QWORD PTR _un$[ebp]
	fchs

; 1217 :   default:
; 1218 :      ;
; 1219 :   }
; 1220 :   value *= area;

	fmul	QWORD PTR _area$[ebp]

; 1221 :   value *= density;

	fmul	QWORD PTR _density$[ebp]

; 1222 :   return value;
; 1223 : } // end stress_integral()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN15@stress_int@2:

; 1189 :   case 13:
; 1190 :      value =  - un[0]*un[2]; break;

	fld	QWORD PTR _un$[ebp+16]
	fmul	QWORD PTR _un$[ebp]
	fchs

; 1217 :   default:
; 1218 :      ;
; 1219 :   }
; 1220 :   value *= area;

	fmul	QWORD PTR _area$[ebp]

; 1221 :   value *= density;

	fmul	QWORD PTR _density$[ebp]

; 1222 :   return value;
; 1223 : } // end stress_integral()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@stress_int@2:

; 1191 :   case 22:
; 1192 :      value = (REAL)1 - un[1]*un[1]; break;

	fld	QWORD PTR _un$[ebp+8]
	fmul	ST(0), ST(0)
	fld1
	fsubrp	ST(1), ST(0)

; 1217 :   default:
; 1218 :      ;
; 1219 :   }
; 1220 :   value *= area;

	fmul	QWORD PTR _area$[ebp]

; 1221 :   value *= density;

	fmul	QWORD PTR _density$[ebp]

; 1222 :   return value;
; 1223 : } // end stress_integral()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@stress_int@2:

; 1193 :   case 23:
; 1194 :      value =  - un[1]*un[2]; break;

	fld	QWORD PTR _un$[ebp+16]
	fmul	QWORD PTR _un$[ebp+8]
	fchs

; 1217 :   default:
; 1218 :      ;
; 1219 :   }
; 1220 :   value *= area;

	fmul	QWORD PTR _area$[ebp]

; 1221 :   value *= density;

	fmul	QWORD PTR _density$[ebp]

; 1222 :   return value;
; 1223 : } // end stress_integral()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@stress_int@2:

; 1195 :   case 33:
; 1196 :      value = (REAL)1 - un[2]*un[2]; break;

	fld	QWORD PTR _un$[ebp+16]
	fmul	ST(0), ST(0)
	fld1
	fsubrp	ST(1), ST(0)

; 1217 :   default:
; 1218 :      ;
; 1219 :   }
; 1220 :   value *= area;

	fmul	QWORD PTR _area$[ebp]

; 1221 :   value *= density;

	fmul	QWORD PTR _density$[ebp]

; 1222 :   return value;
; 1223 : } // end stress_integral()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@stress_int@2:

; 1197 :   case 10:
; 1198 :      value = - un[1]*un[1] + un[2]*un[2]; break;

	fld	QWORD PTR _un$[ebp+16]
	fmul	ST(0), ST(0)
	fld	QWORD PTR _un$[ebp+8]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)

; 1217 :   default:
; 1218 :      ;
; 1219 :   }
; 1220 :   value *= area;

	fmul	QWORD PTR _area$[ebp]

; 1221 :   value *= density;

	fmul	QWORD PTR _density$[ebp]

; 1222 :   return value;
; 1223 : } // end stress_integral()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@stress_int@2:

; 1199 :   case 20:
; 1200 :      value = - un[2]*un[2] + un[0]*un[0]; break;

	fld	QWORD PTR _un$[ebp]
	fmul	ST(0), ST(0)
	fld	QWORD PTR _un$[ebp+16]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)

; 1217 :   default:
; 1218 :      ;
; 1219 :   }
; 1220 :   value *= area;

	fmul	QWORD PTR _area$[ebp]

; 1221 :   value *= density;

	fmul	QWORD PTR _density$[ebp]

; 1222 :   return value;
; 1223 : } // end stress_integral()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@stress_int@2:

; 1201 :   case 30:
; 1202 :      value = - un[0]*un[0] + un[1]*un[1]; break;

	fld	QWORD PTR _un$[ebp+8]
	fmul	ST(0), ST(0)
	fld	QWORD PTR _un$[ebp]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)

; 1217 :   default:
; 1218 :      ;
; 1219 :   }
; 1220 :   value *= area;

	fmul	QWORD PTR _area$[ebp]

; 1221 :   value *= density;

	fmul	QWORD PTR _density$[ebp]

; 1222 :   return value;
; 1223 : } // end stress_integral()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@stress_int@2:

; 1203 :   case 40:
; 1204 :      value = (REAL)3 - un[0]*un[0] - un[1]*un[1] - un[2]*un[2]; break;

	fld	QWORD PTR _un$[ebp]
	fmul	ST(0), ST(0)
	fsubr	QWORD PTR __real@4008000000000000
	fld	QWORD PTR _un$[ebp+8]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _un$[ebp+16]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)

; 1217 :   default:
; 1218 :      ;
; 1219 :   }
; 1220 :   value *= area;

	fmul	QWORD PTR _area$[ebp]

; 1221 :   value *= density;

	fmul	QWORD PTR _density$[ebp]

; 1222 :   return value;
; 1223 : } // end stress_integral()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@stress_int@2:

; 1205 :   case 120:
; 1206 :      value = - un[0]*un[0] + un[1]*un[1]; break;
; 1207 :   case 130:
; 1208 :      value = - un[0]*un[0] + un[2]*un[2]; break;

	fld	QWORD PTR _un$[ebp+16]
	fmul	ST(0), ST(0)
	fld	QWORD PTR _un$[ebp]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)

; 1217 :   default:
; 1218 :      ;
; 1219 :   }
; 1220 :   value *= area;

	fmul	QWORD PTR _area$[ebp]

; 1221 :   value *= density;

	fmul	QWORD PTR _density$[ebp]

; 1222 :   return value;
; 1223 : } // end stress_integral()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@stress_int@2:

; 1209 :   case 230:
; 1210 :      value = - un[1]*un[1] + un[2]*un[2]; break;
; 1211 :   case 210:
; 1212 :      value = - un[1]*un[1] + un[0]*un[0]; break;

	fld	QWORD PTR _un$[ebp]
	fmul	ST(0), ST(0)
	fld	QWORD PTR _un$[ebp+8]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)

; 1217 :   default:
; 1218 :      ;
; 1219 :   }
; 1220 :   value *= area;

	fmul	QWORD PTR _area$[ebp]

; 1221 :   value *= density;

	fmul	QWORD PTR _density$[ebp]

; 1222 :   return value;
; 1223 : } // end stress_integral()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN22@stress_int@2:

; 1183 : 
; 1184 :   switch( stress_comp ) {

	cmp	eax, 320				; 00000140H
	jne	SHORT $LN24@stress_int@2

; 1213 :   case 310:
; 1214 :      value = - un[2]*un[2] + un[0]*un[0]; break;
; 1215 :   case 320:
; 1216 :      value = - un[2]*un[2] + un[1]*un[1]; break;

	fld	QWORD PTR _un$[ebp+8]
	fmul	ST(0), ST(0)
	fld	QWORD PTR _un$[ebp+16]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)

; 1217 :   default:
; 1218 :      ;
; 1219 :   }
; 1220 :   value *= area;

	fmul	QWORD PTR _area$[ebp]

; 1221 :   value *= density;

	fmul	QWORD PTR _density$[ebp]

; 1222 :   return value;
; 1223 : } // end stress_integral()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN24@stress_int@2:

; 1213 :   case 310:
; 1214 :      value = - un[2]*un[2] + un[0]*un[0]; break;
; 1215 :   case 320:
; 1216 :      value = - un[2]*un[2] + un[1]*un[1]; break;

	fld	QWORD PTR _value$[ebp]

; 1217 :   default:
; 1218 :      ;
; 1219 :   }
; 1220 :   value *= area;

	fmul	QWORD PTR _area$[ebp]

; 1221 :   value *= density;

	fmul	QWORD PTR _density$[ebp]

; 1222 :   return value;
; 1223 : } // end stress_integral()

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN26@stress_int@2:
	DD	$LN11@stress_int@2
	DD	$LN17@stress_int@2
	DD	$LN16@stress_int@2
	DD	$LN15@stress_int@2
	DD	$LN10@stress_int@2
	DD	$LN14@stress_int@2
	DD	$LN13@stress_int@2
	DD	$LN9@stress_int@2
	DD	$LN12@stress_int@2
	DD	$LN8@stress_int@2
	DD	$LN6@stress_int@2
	DD	$LN4@stress_int@2
	DD	$LN24@stress_int@2
$LN23@stress_int@2:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	4
	DB	12					; 0000000cH
	DB	5
	DB	6
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	7
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	8
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	9
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	7
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	10					; 0000000aH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	0
_stress_integral ENDP
_TEXT	ENDS
PUBLIC	_stress_integral_grad
; Function compile flags: /Ogtp
;	COMDAT _stress_integral_grad
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_stress_integral_grad PROC				; COMDAT

; 1235 :   return 0.0;

	fldz

; 1236 : } // end stress_integral_grad()

	ret	0
_stress_integral_grad ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@LALJLIPA@Use?5Lagrange?5model?5for?5simplex?5v@ ; `string'
PUBLIC	_q_facet_volume_init
EXTRN	_gauss_setup:PROC
;	COMDAT ??_C@_0CJ@LALJLIPA@Use?5Lagrange?5model?5for?5simplex?5v@
CONST	SEGMENT
??_C@_0CJ@LALJLIPA@Use?5Lagrange?5model?5for?5simplex?5v@ DB 'Use Lagrang'
	DB	'e model for simplex volumes.', 0aH, 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _q_facet_volume_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_q_facet_volume_init PROC				; COMDAT

; 1255 : 
; 1256 :   if ( (web.representation == SIMPLEX) && !(web.modeltype == LAGRANGE) )

	mov	eax, DWORD PTR _web+628
	mov	ecx, 3
	cmp	DWORD PTR _web+624, ecx
	jne	SHORT $LN3@q_facet_vo
	cmp	eax, ecx
	je	SHORT $LN3@q_facet_vo

; 1257 :   { kb_error(1454,"Use Lagrange model for simplex volumes.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CJ@LALJLIPA@Use?5Lagrange?5model?5for?5simplex?5v@
	push	1454					; 000005aeH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@q_facet_vo:

; 1261 : } // end q_facet_volume_init()

	ret	0
$LN3@q_facet_vo:

; 1258 :   }
; 1259 :   else if ( (web.modeltype != LINEAR) && (web.gauss2D_order < 3) )

	cmp	eax, 1
	je	SHORT $LN1@q_facet_vo
	cmp	DWORD PTR _web+1596, ecx
	jge	SHORT $LN1@q_facet_vo

; 1260 :      { web.gauss2D_order = 3; gauss_setup(); }

	mov	DWORD PTR _web+1596, ecx
	jmp	_gauss_setup
_q_facet_volume_init ENDP
_TEXT	ENDS
PUBLIC	__real@4018000000000000
PUBLIC	_q_facet_volume
EXTRN	_lagrange_facet_volume:PROC
EXTRN	_q_facet_volume_q:PROC
EXTRN	_q_facet_torus_volume:PROC
;	COMDAT __real@4018000000000000
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _q_facet_volume
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_q_facet_volume PROC					; COMDAT

; 1271 : { REAL **x,**s;

	push	ebp
	mov	ebp, esp

; 1272 :   REAL vol;
; 1273 : 
; 1274 :   if ( web.torus_flag ) return q_facet_torus_volume(f_info);

	cmp	DWORD PTR _web+860, 0
	je	SHORT $LN4@q_facet_vo@2

; 1282 :  
; 1283 :   return vol;
; 1284 : } // end q_facet_volume()

	pop	ebp

; 1272 :   REAL vol;
; 1273 : 
; 1274 :   if ( web.torus_flag ) return q_facet_torus_volume(f_info);

	jmp	_q_facet_torus_volume
$LN4@q_facet_vo@2:

; 1275 :   if ( web.modeltype == QUADRATIC ) return q_facet_volume_q(f_info);

	mov	eax, DWORD PTR _web+628
	cmp	eax, 2
	jne	SHORT $LN3@q_facet_vo@2

; 1282 :  
; 1283 :   return vol;
; 1284 : } // end q_facet_volume()

	pop	ebp

; 1275 :   if ( web.modeltype == QUADRATIC ) return q_facet_volume_q(f_info);

	jmp	_q_facet_volume_q
$LN3@q_facet_vo@2:

; 1276 :   if ( web.modeltype == LAGRANGE )  return lagrange_facet_volume(f_info);

	cmp	eax, 3
	jne	SHORT $LN2@q_facet_vo@2

; 1282 :  
; 1283 :   return vol;
; 1284 : } // end q_facet_volume()

	pop	ebp

; 1276 :   if ( web.modeltype == LAGRANGE )  return lagrange_facet_volume(f_info);

	jmp	_lagrange_facet_volume
$LN2@q_facet_vo@2:

; 1277 :   if ( web.representation == SIMPLEX )  return lagrange_facet_volume(f_info);

	cmp	DWORD PTR _web+624, 3
	jne	SHORT $LN1@q_facet_vo@2

; 1282 :  
; 1283 :   return vol;
; 1284 : } // end q_facet_volume()

	pop	ebp

; 1277 :   if ( web.representation == SIMPLEX )  return lagrange_facet_volume(f_info);

	jmp	_lagrange_facet_volume
$LN1@q_facet_vo@2:

; 1278 : 
; 1279 :   x = f_info->x;

	mov	eax, DWORD PTR _f_info$[ebp]

; 1280 :   s = f_info->sides[0];

	mov	ecx, DWORD PTR [eax+1276]
	mov	ecx, DWORD PTR [ecx]

; 1281 :   vol =  (x[0][2]+x[1][2]+x[2][2])*(s[0][0]*s[1][1] - s[0][1]*s[1][0])/6;

	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR [eax+420]
	fld	QWORD PTR [esi+16]
	push	edi
	mov	edi, DWORD PTR [eax+416]
	fadd	QWORD PTR [edi+16]
	mov	eax, DWORD PTR [eax+424]
	pop	edi
	pop	esi
	fadd	QWORD PTR [eax+16]
	fld	QWORD PTR [edx+8]
	fmul	QWORD PTR [ecx]
	fld	QWORD PTR [ecx+8]
	fmul	QWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	fdiv	QWORD PTR __real@4018000000000000

; 1282 :  
; 1283 :   return vol;
; 1284 : } // end q_facet_volume()

	pop	ebp
	ret	0
_q_facet_volume ENDP
_TEXT	ENDS
PUBLIC	_q_facet_volume_grad
EXTRN	_lagrange_facet_volume_grad:PROC
EXTRN	_q_facet_volume_q_grad:PROC
EXTRN	_q_facet_torus_volume_grad:PROC
; Function compile flags: /Ogtp
;	COMDAT _q_facet_volume_grad
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_q_facet_volume_grad PROC				; COMDAT

; 1294 : { REAL **x;

	push	ebp
	mov	ebp, esp

; 1295 :   REAL zsum,ssum;
; 1296 : 
; 1297 :   if ( web.torus_flag ) return q_facet_torus_volume_grad(f_info);

	cmp	DWORD PTR _web+860, 0
	je	SHORT $LN4@q_facet_vo@3

; 1316 : } // end q_facet_volume_grad()

	pop	ebp

; 1295 :   REAL zsum,ssum;
; 1296 : 
; 1297 :   if ( web.torus_flag ) return q_facet_torus_volume_grad(f_info);

	jmp	_q_facet_torus_volume_grad
$LN4@q_facet_vo@3:

; 1298 :   if ( web.modeltype == QUADRATIC ) return q_facet_volume_q_grad(f_info);

	mov	eax, DWORD PTR _web+628
	cmp	eax, 2
	jne	SHORT $LN3@q_facet_vo@3

; 1316 : } // end q_facet_volume_grad()

	pop	ebp

; 1298 :   if ( web.modeltype == QUADRATIC ) return q_facet_volume_q_grad(f_info);

	jmp	_q_facet_volume_q_grad
$LN3@q_facet_vo@3:

; 1299 :   if ( web.modeltype == LAGRANGE )  return lagrange_facet_volume_grad(f_info);

	cmp	eax, 3
	jne	SHORT $LN2@q_facet_vo@3

; 1316 : } // end q_facet_volume_grad()

	pop	ebp

; 1299 :   if ( web.modeltype == LAGRANGE )  return lagrange_facet_volume_grad(f_info);

	jmp	_lagrange_facet_volume_grad
$LN2@q_facet_vo@3:

; 1300 :   if ( web.representation == SIMPLEX )  return lagrange_facet_volume_grad(f_info);

	cmp	DWORD PTR _web+624, 3
	jne	SHORT $LN1@q_facet_vo@3

; 1316 : } // end q_facet_volume_grad()

	pop	ebp

; 1300 :   if ( web.representation == SIMPLEX )  return lagrange_facet_volume_grad(f_info);

	jmp	_lagrange_facet_volume_grad
$LN1@q_facet_vo@3:

; 1301 : 
; 1302 :    x = f_info->x;

	mov	eax, DWORD PTR _f_info$[ebp]

; 1303 :    zsum = (x[0][2]+x[1][2]+x[2][2])/6;

	mov	edx, DWORD PTR [eax+416]
	fld	QWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+420]
	fadd	QWORD PTR [ecx+16]
	push	ebx
	push	esi
	mov	esi, DWORD PTR [eax+424]
	fadd	QWORD PTR [esi+16]
	push	edi
	fld	QWORD PTR __real@4018000000000000

; 1304 :    ssum = f_info->sides[0][0][0]*f_info->sides[0][1][1]
; 1305 :                - f_info->sides[0][0][1]*f_info->sides[0][1][0];

	mov	edi, DWORD PTR [eax+1276]
	mov	edi, DWORD PTR [edi]
	fdiv	ST(1), ST(0)
	mov	ebx, DWORD PTR [edi+4]
	mov	edi, DWORD PTR [edi]
	fld	QWORD PTR [ebx+8]
	fmul	QWORD PTR [edi]
	fld	QWORD PTR [edi+8]
	fmul	QWORD PTR [ebx]

; 1306 :    f_info->grad[0][0] = zsum*(x[1][1]-x[2][1]);

	mov	edi, DWORD PTR [eax+1336]
	mov	edi, DWORD PTR [edi]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ecx+8]
	fsub	QWORD PTR [esi+8]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR [edi]

; 1307 :    f_info->grad[0][1] = zsum*(x[2][0]-x[1][0]);

	mov	edi, DWORD PTR [eax+1336]
	fld	QWORD PTR [esi]
	mov	edi, DWORD PTR [edi]
	fsub	QWORD PTR [ecx]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR [edi+8]

; 1308 :    f_info->grad[0][2] = ssum/6;

	mov	edi, DWORD PTR [eax+1336]
	mov	edi, DWORD PTR [edi]
	fld	ST(0)
	fdivrp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR [edi+16]

; 1309 :    f_info->grad[1][0] = zsum*(x[2][1]-x[0][1]);

	fld	QWORD PTR [esi+8]
	fsub	QWORD PTR [edx+8]
	mov	edi, DWORD PTR [eax+1336]
	mov	edi, DWORD PTR [edi+4]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR [edi]
	pop	edi

; 1310 :    f_info->grad[1][1] = zsum*(x[0][0]-x[2][0]);

	fld	QWORD PTR [edx]
	fsub	QWORD PTR [esi]
	mov	esi, DWORD PTR [eax+1336]
	mov	esi, DWORD PTR [esi+4]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR [esi+8]

; 1311 :    f_info->grad[1][2] = ssum/6;

	mov	esi, DWORD PTR [eax+1336]
	mov	esi, DWORD PTR [esi+4]
	fst	QWORD PTR [esi+16]

; 1312 :    f_info->grad[2][0] = zsum*(x[0][1]-x[1][1]);

	mov	esi, DWORD PTR [eax+1336]
	fld	QWORD PTR [edx+8]
	mov	esi, DWORD PTR [esi+8]
	fsub	QWORD PTR [ecx+8]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR [esi]
	pop	esi

; 1313 :    f_info->grad[2][1] = zsum*(x[1][0]-x[0][0]);

	fld	QWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+1336]
	fsub	QWORD PTR [edx]
	mov	edx, DWORD PTR [ecx+8]
	pop	ebx
	fmul	ST(0), ST(3)
	fstp	QWORD PTR [edx+8]

; 1314 :    f_info->grad[2][2] = ssum/6;

	mov	eax, DWORD PTR [eax+1336]
	mov	ecx, DWORD PTR [eax+8]
	fstp	QWORD PTR [ecx+16]

; 1315 :    return zsum*ssum;

	fmulp	ST(1), ST(0)

; 1316 : } // end q_facet_volume_grad()

	pop	ebp
	ret	0
_q_facet_volume_grad ENDP
_TEXT	ENDS
PUBLIC	_q_facet_volume_hess
EXTRN	_lagrange_facet_volume_hess:PROC
EXTRN	_q_facet_volume_q_hess:PROC
EXTRN	_q_facet_torus_volume_hess:PROC
; Function compile flags: /Ogtp
;	COMDAT _q_facet_volume_hess
_TEXT	SEGMENT
tv1099 = -24						; size = 4
tv1042 = -20						; size = 4
tv1007 = -20						; size = 4
tv1104 = -16						; size = 4
tv621 = -16						; size = 4
tv612 = -12						; size = 4
tv455 = -12						; size = 4
tv1094 = -8						; size = 4
tv605 = -8						; size = 4
tv980 = -4						; size = 4
tv635 = -4						; size = 4
_f_info$ = 8						; size = 4
_q_facet_volume_hess PROC				; COMDAT

; 1326 : { REAL **x,****h;

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 1327 :   REAL zsum,ssum;
; 1328 :   int i;
; 1329 : 
; 1330 :   if ( web.torus_flag ) return q_facet_torus_volume_hess(f_info);

	cmp	DWORD PTR _web+860, 0
	je	SHORT $LN7@q_facet_vo@4
	mov	eax, DWORD PTR _f_info$[ebp]
	push	eax
	call	_q_facet_torus_volume_hess
	add	esp, 4

; 1365 : } // end  q_facet_volume_hess()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@q_facet_vo@4:

; 1331 :   if ( web.modeltype == QUADRATIC ) return q_facet_volume_q_hess(f_info);

	mov	eax, DWORD PTR _web+628
	cmp	eax, 2
	jne	SHORT $LN6@q_facet_vo@4
	mov	ecx, DWORD PTR _f_info$[ebp]
	push	ecx
	call	_q_facet_volume_q_hess
	add	esp, 4

; 1365 : } // end  q_facet_volume_hess()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@q_facet_vo@4:

; 1332 :   if ( web.modeltype == LAGRANGE )  return lagrange_facet_volume_hess(f_info);

	cmp	eax, 3
	jne	SHORT $LN5@q_facet_vo@4
	mov	edx, DWORD PTR _f_info$[ebp]
	push	edx
	call	_lagrange_facet_volume_hess
	add	esp, 4

; 1365 : } // end  q_facet_volume_hess()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@q_facet_vo@4:

; 1333 :   if ( web.representation == SIMPLEX )  return lagrange_facet_volume_hess(f_info);

	cmp	DWORD PTR _web+624, 3
	mov	eax, DWORD PTR _f_info$[ebp]
	jne	SHORT $LN4@q_facet_vo@4
	push	eax
	call	_lagrange_facet_volume_hess
	add	esp, 4

; 1365 : } // end  q_facet_volume_hess()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@q_facet_vo@4:

; 1336 :   zsum = (x[0][2]+x[1][2]+x[2][2])/6;

	mov	ecx, DWORD PTR [eax+416]
	fld	QWORD PTR [ecx+16]
	mov	edx, DWORD PTR [eax+420]
	fadd	QWORD PTR [edx+16]
	push	ebx
	push	esi
	mov	esi, DWORD PTR [eax+424]
	fadd	QWORD PTR [esi+16]
	push	edi
	fld	QWORD PTR __real@4018000000000000

; 1337 :   ssum = f_info->sides[0][0][0]*f_info->sides[0][1][1]
; 1338 :                  - f_info->sides[0][0][1]*f_info->sides[0][1][0];

	mov	edi, DWORD PTR [eax+1276]
	mov	edi, DWORD PTR [edi]
	fdiv	ST(1), ST(0)
	mov	ebx, DWORD PTR [edi+4]
	mov	edi, DWORD PTR [edi]
	fld	QWORD PTR [ebx+8]
	fmul	QWORD PTR [edi]
	fld	QWORD PTR [edi+8]
	fmul	QWORD PTR [ebx]

; 1339 :   f_info->grad[0][0] = zsum*(x[1][1]-x[2][1]);

	mov	edi, DWORD PTR [eax+1336]
	mov	edi, DWORD PTR [edi]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx+8]
	fsub	QWORD PTR [esi+8]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR [edi]

; 1340 :   f_info->grad[0][1] = zsum*(x[2][0]-x[1][0]);

	mov	edi, DWORD PTR [eax+1336]
	fld	QWORD PTR [esi]
	mov	edi, DWORD PTR [edi]
	fsub	QWORD PTR [edx]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR [edi+8]

; 1341 :   f_info->grad[0][2] = ssum/6;

	mov	edi, DWORD PTR [eax+1336]
	mov	edi, DWORD PTR [edi]
	fld	ST(0)
	fdiv	ST(0), ST(2)
	fst	QWORD PTR [edi+16]

; 1342 :   f_info->grad[1][0] = zsum*(x[2][1]-x[0][1]);

	fld	QWORD PTR [esi+8]
	fsub	QWORD PTR [ecx+8]
	mov	edi, DWORD PTR [eax+1336]
	mov	edi, DWORD PTR [edi+4]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR [edi]

; 1343 :   f_info->grad[1][1] = zsum*(x[0][0]-x[2][0]);

	fld	QWORD PTR [ecx]
	fsub	QWORD PTR [esi]
	mov	esi, DWORD PTR [eax+1336]
	mov	esi, DWORD PTR [esi+4]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR [esi+8]

; 1344 :   f_info->grad[1][2] = ssum/6;

	mov	esi, DWORD PTR [eax+1336]
	mov	esi, DWORD PTR [esi+4]
	fst	QWORD PTR [esi+16]

; 1345 :   f_info->grad[2][0] = zsum*(x[0][1]-x[1][1]);

	mov	esi, DWORD PTR [eax+1336]
	fld	QWORD PTR [ecx+8]
	mov	esi, DWORD PTR [esi+8]
	fsub	QWORD PTR [edx+8]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR [esi]

; 1346 :   f_info->grad[2][1] = zsum*(x[1][0]-x[0][0]);

	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR [eax+1336]
	fsub	QWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+8]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR [edx+8]

; 1347 :   f_info->grad[2][2] = ssum/6;

	mov	edx, DWORD PTR [eax+1336]
	mov	edx, DWORD PTR [edx+8]
	fstp	QWORD PTR [edx+16]

; 1348 : 
; 1349 :   h = f_info->hess;

	mov	edx, DWORD PTR [eax+1340]

; 1350 :   h[1][2][0][1] = h[1][0][1][0] = h[0][2][1][0] =  zsum;

	mov	edi, DWORD PTR [edx]
	fxch	ST(2)
	mov	esi, DWORD PTR [edi+8]
	mov	ebx, DWORD PTR [esi+4]
	fst	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [edx+4]
	mov	ebx, DWORD PTR [ebx]
	mov	DWORD PTR tv605[ebp], ebx
	mov	ebx, DWORD PTR [ebx+4]
	fst	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [edx+4]
	mov	ebx, DWORD PTR [ebx+8]
	mov	DWORD PTR tv612[ebp], ebx
	mov	ebx, DWORD PTR [ebx]
	fst	QWORD PTR [ebx+8]

; 1351 :   h[2][1][1][0] = h[0][1][0][1] = h[2][0][0][1] =  zsum;

	mov	ebx, DWORD PTR [edx+8]
	mov	ebx, DWORD PTR [ebx]

; 1352 :   h[1][0][0][1] = h[0][2][0][1] = h[1][2][1][0] = -zsum;

	mov	esi, DWORD PTR [esi]
	mov	DWORD PTR tv621[ebp], ebx
	mov	ebx, DWORD PTR [ebx]
	fst	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR [edi+4]
	mov	ebx, DWORD PTR [ebx]
	fst	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR [edx+8]
	mov	ebx, DWORD PTR [ebx+4]
	mov	DWORD PTR tv635[ebp], ebx
	mov	ebx, DWORD PTR [ebx+4]
	fst	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv612[ebp]
	mov	ebx, DWORD PTR [ebx+4]
	fld	ST(0)
	fchs
	mov	DWORD PTR tv455[ebp], 3
	fst	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [edx+4]
	fst	QWORD PTR [esi+8]
	mov	esi, DWORD PTR tv605[ebp]
	mov	esi, DWORD PTR [esi]
	fst	QWORD PTR [esi+8]

; 1353 :   h[0][1][1][0] = h[2][0][1][0] = h[2][1][0][1] = -zsum;

	mov	esi, DWORD PTR tv635[ebp]
	mov	esi, DWORD PTR [esi]
	fst	QWORD PTR [esi+8]
	mov	esi, DWORD PTR tv621[ebp]
	mov	esi, DWORD PTR [esi+4]
	fst	QWORD PTR [esi]
	mov	esi, DWORD PTR [edi+4]
	mov	esi, DWORD PTR [esi+4]

; 1354 : 
; 1355 :   for ( i = 0 ; i < 3 ; i++ )

	sub	edi, ebx
	fstp	QWORD PTR [esi]
	mov	esi, DWORD PTR [eax+424]
	mov	eax, DWORD PTR [eax+420]
	mov	DWORD PTR tv1094[ebp], edi
	mov	edi, DWORD PTR [edx+8]
	sub	edi, ebx
	sub	ebx, edx
	mov	DWORD PTR tv1099[ebp], edi
	mov	DWORD PTR tv980[ebp], edx
	mov	DWORD PTR tv1104[ebp], ebx
	mov	edi, edx
	jmp	SHORT $LN3@q_facet_vo@4
$LN12@q_facet_vo@4:

; 1334 : 
; 1335 :   x = f_info->x;

	mov	ebx, DWORD PTR tv1104[ebp]
$LN3@q_facet_vo@4:

; 1356 :   { h[i][0][2][0] = h[0][i][0][2] = (x[1][1]-x[2][1])/6;

	fld	QWORD PTR [eax+8]
	lea	edx, DWORD PTR [edi+ebx]
	fsub	QWORD PTR [esi+8]
	mov	ebx, DWORD PTR tv1094[ebp]
	mov	ebx, DWORD PTR [edx+ebx]
	mov	ebx, DWORD PTR [ebx]
	fdiv	ST(0), ST(2)
	mov	edi, DWORD PTR [edi]
	fst	QWORD PTR [ebx+16]
	mov	ebx, DWORD PTR [edi]
	mov	ebx, DWORD PTR [ebx+8]
	fstp	QWORD PTR [ebx]
	mov	DWORD PTR tv1007[ebp], ebx

; 1357 :      h[i][0][2][1] = h[0][i][1][2] = (x[2][0]-x[1][0])/6;

	fld	QWORD PTR [esi]
	mov	ebx, DWORD PTR tv1094[ebp]
	fsub	QWORD PTR [eax]
	mov	ebx, DWORD PTR [edx+ebx]
	mov	ebx, DWORD PTR [ebx+4]
	fdiv	ST(0), ST(2)
	fst	QWORD PTR [ebx+16]
	mov	ebx, DWORD PTR tv1007[ebp]
	fstp	QWORD PTR [ebx+8]

; 1358 :      h[i][1][2][0] = h[1][i][0][2] = (x[2][1]-x[0][1])/6;

	fld	QWORD PTR [esi+8]
	mov	ebx, DWORD PTR [edx]
	fsub	QWORD PTR [ecx+8]
	mov	ebx, DWORD PTR [ebx]
	fdiv	ST(0), ST(2)
	fst	QWORD PTR [ebx+16]
	mov	ebx, DWORD PTR [edi+4]
	mov	ebx, DWORD PTR [ebx+8]
	fstp	QWORD PTR [ebx]
	mov	DWORD PTR tv1042[ebp], ebx

; 1359 :      h[i][1][2][1] = h[1][i][1][2] = (x[0][0]-x[2][0])/6;

	fld	QWORD PTR [ecx]
	mov	ebx, DWORD PTR [edx]
	fsub	QWORD PTR [esi]
	mov	ebx, DWORD PTR [ebx+4]

; 1360 :      h[i][2][2][0] = h[2][i][0][2] = (x[0][1]-x[1][1])/6;

	mov	edi, DWORD PTR [edi+8]
	mov	edi, DWORD PTR [edi+8]
	fdiv	ST(0), ST(2)
	fst	QWORD PTR [ebx+16]
	mov	ebx, DWORD PTR tv1042[ebp]
	fstp	QWORD PTR [ebx+8]
	fld	QWORD PTR [ecx+8]
	mov	ebx, DWORD PTR tv1099[ebp]
	fsub	QWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx+ebx]
	mov	ebx, DWORD PTR [edx]

; 1361 :      h[i][2][2][1] = h[2][i][1][2] = (x[1][0]-x[0][0])/6;

	mov	edx, DWORD PTR [edx+4]
	fdiv	ST(0), ST(2)
	fst	QWORD PTR [ebx+16]
	fstp	QWORD PTR [edi]
	fld	QWORD PTR [eax]
	fsub	QWORD PTR [ecx]
	fdiv	ST(0), ST(2)
	fst	QWORD PTR [edx+16]
	fstp	QWORD PTR [edi+8]
	mov	edi, DWORD PTR tv980[ebp]
	add	edi, 4
	dec	DWORD PTR tv455[ebp]
	mov	DWORD PTR tv980[ebp], edi
	jne	$LN12@q_facet_vo@4

; 1354 : 
; 1355 :   for ( i = 0 ; i < 3 ; i++ )

	pop	edi
	fstp	ST(1)
	pop	esi

; 1362 :   }
; 1363 : 
; 1364 :   return zsum*ssum;

	fmulp	ST(1), ST(0)
	pop	ebx

; 1365 : } // end  q_facet_volume_hess()

	mov	esp, ebp
	pop	ebp
	ret	0
_q_facet_volume_hess ENDP
_TEXT	ENDS
PUBLIC	_q_facet_tension_u_init
; Function compile flags: /Ogtp
;	COMDAT _q_facet_tension_u_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_q_facet_tension_u_init PROC				; COMDAT

; 1379 :   if ( web.gauss2D_order < 5 ) 

	mov	eax, 5
	cmp	DWORD PTR _web+1596, eax
	jge	SHORT $LN1@q_facet_te

; 1380 :      { web.gauss2D_order = 5; gauss_setup(); }

	mov	DWORD PTR _web+1596, eax
	jmp	_gauss_setup
$LN1@q_facet_te:

; 1381 : } // end q_facet_tension_u_init()

	ret	0
_q_facet_tension_u_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@BLHPLLCE@Non?9Lagrange?5quantity?3?5facet_ten@ ; `string'
PUBLIC	_q_facet_tension_u_value
EXTRN	_q_facet_tension_value:PROC
EXTRN	_q_facet_tension_uq:PROC
;	COMDAT ??_C@_0CI@BLHPLLCE@Non?9Lagrange?5quantity?3?5facet_ten@
CONST	SEGMENT
??_C@_0CI@BLHPLLCE@Non?9Lagrange?5quantity?3?5facet_ten@ DB 'Non-Lagrange'
	DB	' quantity: facet_tension_u', 0aH, 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _q_facet_tension_u_value
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_q_facet_tension_u_value PROC				; COMDAT

; 1384 : {

	push	ebp
	mov	ebp, esp

; 1385 :   if ( web.modeltype == QUADRATIC ) return q_facet_tension_uq(f_info); 

	mov	eax, DWORD PTR _web+628
	cmp	eax, 2
	jne	SHORT $LN2@q_facet_te@2

; 1390 : } // end q_facet_tension_u_value()

	pop	ebp

; 1385 :   if ( web.modeltype == QUADRATIC ) return q_facet_tension_uq(f_info); 

	jmp	_q_facet_tension_uq
$LN2@q_facet_te@2:

; 1386 :   if ( web.modeltype == LAGRANGE ) 

	cmp	eax, 3
	jne	SHORT $LN1@q_facet_te@2

; 1387 :      kb_error(1785,"Non-Lagrange quantity: facet_tension_u\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CI@BLHPLLCE@Non?9Lagrange?5quantity?3?5facet_ten@
	push	1785					; 000006f9H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@q_facet_te@2:

; 1390 : } // end q_facet_tension_u_value()

	pop	ebp

; 1388 : 
; 1389 :   return q_facet_tension_value(f_info);

	jmp	_q_facet_tension_value
_q_facet_tension_u_value ENDP
_TEXT	ENDS
PUBLIC	_q_facet_tension_u_gradient
EXTRN	_q_facet_tension_gradient:PROC
EXTRN	_q_facet_tension_uq_grad:PROC
; Function compile flags: /Ogtp
;	COMDAT _q_facet_tension_u_gradient
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_q_facet_tension_u_gradient PROC			; COMDAT

; 1393 : {

	push	ebp
	mov	ebp, esp

; 1394 :   if ( web.modeltype == QUADRATIC ) return q_facet_tension_uq_grad(f_info); 

	mov	eax, DWORD PTR _web+628
	cmp	eax, 2
	jne	SHORT $LN2@q_facet_te@3

; 1399 : } // end q_facet_tension_u_gradient()

	pop	ebp

; 1394 :   if ( web.modeltype == QUADRATIC ) return q_facet_tension_uq_grad(f_info); 

	jmp	_q_facet_tension_uq_grad
$LN2@q_facet_te@3:

; 1395 :   if ( web.modeltype == LAGRANGE ) 

	cmp	eax, 3
	jne	SHORT $LN1@q_facet_te@3

; 1396 :      kb_error(1786,"Non-Lagrange quantity: facet_tension_u\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CI@BLHPLLCE@Non?9Lagrange?5quantity?3?5facet_ten@
	push	1786					; 000006faH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@q_facet_te@3:

; 1399 : } // end q_facet_tension_u_gradient()

	pop	ebp

; 1397 : 
; 1398 :   return q_facet_tension_gradient(f_info);

	jmp	_q_facet_tension_gradient
_q_facet_tension_u_gradient ENDP
_TEXT	ENDS
PUBLIC	_q_facet_tension_u_hessian
EXTRN	_q_facet_tension_hessian:PROC
EXTRN	_q_facet_tension_uq_hess:PROC
; Function compile flags: /Ogtp
;	COMDAT _q_facet_tension_u_hessian
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_q_facet_tension_u_hessian PROC				; COMDAT

; 1402 : {

	push	ebp
	mov	ebp, esp

; 1403 :   if ( web.modeltype == QUADRATIC ) return q_facet_tension_uq_hess(f_info); 

	mov	eax, DWORD PTR _web+628
	cmp	eax, 2
	jne	SHORT $LN2@q_facet_te@4

; 1408 : } // end q_facet_tension_u_hessian()

	pop	ebp

; 1403 :   if ( web.modeltype == QUADRATIC ) return q_facet_tension_uq_hess(f_info); 

	jmp	_q_facet_tension_uq_hess
$LN2@q_facet_te@4:

; 1404 :   if ( web.modeltype == LAGRANGE ) 

	cmp	eax, 3
	jne	SHORT $LN1@q_facet_te@4

; 1405 :      kb_error(1787,"Non-Lagrange quantity: facet_tension_u\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CI@BLHPLLCE@Non?9Lagrange?5quantity?3?5facet_ten@
	push	1787					; 000006fbH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@q_facet_te@4:

; 1408 : } // end q_facet_tension_u_hessian()

	pop	ebp

; 1406 : 
; 1407 :   return q_facet_tension_hessian(f_info);

	jmp	_q_facet_tension_hessian
_q_facet_tension_u_hessian ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DN@EFFOCJLG@facet_general_integral?5method?5on@ ; `string'
PUBLIC	_facet_general_init
;	COMDAT ??_C@_0DN@EFFOCJLG@facet_general_integral?5method?5on@
CONST	SEGMENT
??_C@_0DN@EFFOCJLG@facet_general_integral?5method?5on@ DB 'facet_general_'
	DB	'integral method only for surface dimension 2.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _facet_general_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_facet_general_init PROC				; COMDAT

; 1439 :   if ( web.dimension != 2 )

	cmp	DWORD PTR _web+620, 2
	je	SHORT $LN1@facet_gene

; 1440 :      kb_error(1788,"facet_general_integral method only for surface dimension 2.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DN@EFFOCJLG@facet_general_integral?5method?5on@
	push	1788					; 000006fcH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@facet_gene:

; 1441 : 
; 1442 : } // end facet_general_init()

	ret	0
_facet_general_init ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_facet_general_value_lagr
EXTRN	_cross_prod:PROC
EXTRN	_facet_general_flag:DWORD
; Function compile flags: /Ogtp
;	COMDAT _facet_general_value_lagr
_TEXT	SEGMENT
_sign$ = -144						; size = 8
_value$ = -136						; size = 8
_normal$ = -128						; size = 4
_mi$ = -124						; size = 4
_gl$ = -120						; size = 4
_m$ = -116						; size = 4
_f_info$GSCopy$ = -112					; size = 4
_z$ = -108						; size = 104
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_facet_general_value_lagr PROC				; COMDAT

; 1630 : { int m,k;

	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _f_info$[ebp]

; 1631 :   REAL value = 0.0;

	fldz

; 1632 :   REAL z[2*MAXCOORD+1];  /*  pointers to coord and tangent */
; 1633 :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	eax, DWORD PTR [ecx]
	fst	QWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _web+236
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	edx, edx
	or	eax, edx

; 1641 :   { for ( k = 0 ; k < SDIM ; k++ ) z[k] = f_info->gauss_pt[m][k]; 

	mov	DWORD PTR _f_info$GSCopy$[ebp], ecx
	je	SHORT $LN13@facet_gene@2

; 1632 :   REAL z[2*MAXCOORD+1];  /*  pointers to coord and tangent */
; 1633 :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN49@facet_gene@2
$LN13@facet_gene@2:
	fld1
$LN49@facet_gene@2:

; 1634 :   int dim = web.dimension;
; 1635 :   struct gauss_lag *gl = &gauss_lagrange[dim][web.gauss2D_order];

	mov	eax, DWORD PTR _web+1596
	fstp	QWORD PTR _sign$[ebp]
	mov	edx, DWORD PTR _web+620
	shl	eax, 5
	add	eax, DWORD PTR _gauss_lagrange[edx*4]
	push	ebx

; 1636 :   REAL *normal = z+SDIM;

	mov	ebx, DWORD PTR _web+616
	mov	DWORD PTR _gl$[ebp], eax
	lea	eax, DWORD PTR _z$[ebp+ebx*8]
	mov	DWORD PTR _normal$[ebp], eax

; 1637 :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [ecx+8]
	push	esi
	push	edi
	cdq
	mov	edi, eax
	xor	edi, edx
	sub	edi, edx

; 1638 : 
; 1639 :   facet_general_flag = 1;
; 1640 :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	mov	edx, DWORD PTR _gl$[ebp]
	imul	edi, 2928				; 00000b70H
	add	edi, DWORD PTR _meth_inst_list
	xor	esi, esi
	mov	DWORD PTR _facet_general_flag, 1
	mov	DWORD PTR _mi$[ebp], edi
	mov	DWORD PTR _m$[ebp], esi
	cmp	DWORD PTR [edx+4], esi
	jle	$LN8@facet_gene@2
	jmp	SHORT $LN50@facet_gene@2
	npad	3
$LL48@facet_gene@2:
	mov	ebx, DWORD PTR _web+616
	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
$LN50@facet_gene@2:

; 1641 :   { for ( k = 0 ; k < SDIM ; k++ ) z[k] = f_info->gauss_pt[m][k]; 

	xor	eax, eax
	fstp	ST(0)
	cmp	ebx, 4
	jl	SHORT $LC22@facet_gene@2

; 1638 : 
; 1639 :   facet_general_flag = 1;
; 1640 :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	mov	ecx, DWORD PTR [ecx+1268]
	lea	edx, DWORD PTR [ecx+esi*4]

; 1641 :   { for ( k = 0 ; k < SDIM ; k++ ) z[k] = f_info->gauss_pt[m][k]; 

	lea	ecx, DWORD PTR _z$[ebp+8]
	mov	esi, 16					; 00000010H
	mov	edi, 24					; 00000018H
	sub	esi, ecx
	sub	edi, ecx
	npad	4
$LL23@facet_gene@2:
	mov	ebx, DWORD PTR [edx]
	fld	QWORD PTR [ebx+eax*8]
	lea	ecx, DWORD PTR _z$[ebp+eax*8+8]
	fstp	QWORD PTR [ecx-8]
	mov	ebx, DWORD PTR [edx]
	fld	QWORD PTR [ebx+eax*8+8]
	add	eax, 4
	fstp	QWORD PTR [ecx]
	mov	ebx, DWORD PTR [edx]
	add	ebx, esi
	fld	QWORD PTR [ebx+ecx]
	fstp	QWORD PTR [ecx+8]
	mov	ebx, DWORD PTR [edx]
	add	ebx, edi
	fld	QWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR _web+616
	fstp	QWORD PTR [ecx+16]
	lea	ecx, DWORD PTR [ebx-3]
	cmp	eax, ecx
	jl	SHORT $LL23@facet_gene@2
	mov	esi, DWORD PTR _m$[ebp]
	mov	edi, DWORD PTR _mi$[ebp]
	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
$LC22@facet_gene@2:
	cmp	eax, ebx
	jge	SHORT $LN21@facet_gene@2

; 1638 : 
; 1639 :   facet_general_flag = 1;
; 1640 :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	mov	edx, DWORD PTR [ecx+1268]
	lea	ecx, DWORD PTR [edx+esi*4]
	npad	2
$LC7@facet_gene@2:

; 1641 :   { for ( k = 0 ; k < SDIM ; k++ ) z[k] = f_info->gauss_pt[m][k]; 

	mov	edx, DWORD PTR [ecx]
	fld	QWORD PTR [edx+eax*8]
	inc	eax
	fstp	QWORD PTR _z$[ebp+eax*8-8]
	cmp	eax, ebx
	jl	SHORT $LC7@facet_gene@2
	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
$LN21@facet_gene@2:

; 1642 :     cross_prod(f_info->sides[m][0],f_info->sides[m][1],normal);

	mov	eax, DWORD PTR [ecx+1276]
	mov	eax, DWORD PTR [eax+esi*4]
	mov	ecx, DWORD PTR _normal$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	push	ecx
	push	edx
	push	eax
	call	_cross_prod

; 1643 :     if ( sign == -1.0 ) 

	fld	QWORD PTR _sign$[ebp]
	mov	ecx, DWORD PTR _web+616
	fld	ST(0)
	fld	QWORD PTR __real@bff0000000000000
	add	esp, 12					; 0000000cH
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN47@facet_gene@2

; 1644 :         for ( k = 0 ; k < SDIM ; k++ ) z[k+SDIM] *= sign ; 

	xor	ebx, ebx
	cmp	ecx, 4
	jl	SHORT $LC25@facet_gene@2
	lea	edx, DWORD PTR [ecx-4]
	shr	edx, 2
	inc	edx
	lea	eax, DWORD PTR _z$[ebp+ecx*8+8]
	lea	ebx, DWORD PTR [edx*4]
$LN26@facet_gene@2:
	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	dec	edx
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax-40]
	fld	QWORD PTR [eax-32]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax-32]
	fld	ST(0)
	fmul	QWORD PTR [eax-24]
	fstp	QWORD PTR [eax-24]
	fld	QWORD PTR [eax-16]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LN26@facet_gene@2
$LC25@facet_gene@2:
	cmp	ebx, ecx
	jge	SHORT $LN47@facet_gene@2
	lea	eax, DWORD PTR [ecx+ebx]
	mov	edx, ecx
	lea	eax, DWORD PTR _z$[ebp+eax*8]
	sub	edx, ebx
$LC3@facet_gene@2:
	fld	ST(0)
	add	eax, 8
	dec	edx
	fmul	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC3@facet_gene@2
$LN47@facet_gene@2:
	fstp	ST(0)

; 1645 :     z[2*SDIM] = m; /* kludge for attr interpolation. */

	add	ecx, ecx
	fild	DWORD PTR _m$[ebp]

; 1646 :     value += gl->gausswt[m]*eval(mi->expr[0],z,f_info->id,NULL);

	push	0
	lea	eax, DWORD PTR _z$[ebp]
	fstp	QWORD PTR _z$[ebp+ecx*8]
	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edi+232]
	push	edx
	push	eax
	push	ecx
	call	_eval
	mov	eax, DWORD PTR _gl$[ebp]
	mov	edx, DWORD PTR [eax+12]
	fmul	QWORD PTR [edx+esi*8]
	inc	esi
	add	esp, 16					; 00000010H
	mov	DWORD PTR _m$[ebp], esi
	fadd	QWORD PTR _value$[ebp]
	fst	QWORD PTR _value$[ebp]
	cmp	esi, DWORD PTR [eax+4]
	jl	$LL48@facet_gene@2
$LN8@facet_gene@2:

; 1647 :   }
; 1648 :   facet_general_flag = 0;
; 1649 :   return value/web.simplex_factorial; 
; 1650 : } // end facet_general_value_lagr()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fdiv	QWORD PTR _web+792
	pop	edi
	pop	esi
	xor	ecx, ebp
	mov	DWORD PTR _facet_general_flag, 0
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_general_value_lagr ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_facet_general_grad_lagr
; Function compile flags: /Ogtp
;	COMDAT _facet_general_grad_lagr
_TEXT	SEGMENT
_val$ = -280						; size = 8
_value$ = -272						; size = 8
_mi$ = -264						; size = 4
_s$90159 = -260						; size = 4
_coeff$90158 = -256					; size = 8
tv1236 = -252						; size = 4
_sign$ = -248						; size = 8
_normal$ = -240						; size = 4
_gl$ = -236						; size = 4
tv648 = -232						; size = 4
tv1220 = -228						; size = 4
tv850 = -224						; size = 4
tv652 = -224						; size = 4
_f_info$GSCopy$ = -220					; size = 4
tv843 = -216						; size = 4
tv634 = -216						; size = 4
tv533 = -216						; size = 4
_m$ = -212						; size = 4
tv1218 = -208						; size = 4
_k$ = -208						; size = 4
_derivs$ = -204						; size = 96
_z$ = -108						; size = 104
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_facet_general_grad_lagr PROC				; COMDAT

; 1661 : { int m,j,k;

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1662 :   REAL value = 0.0;
; 1663 :   REAL val;
; 1664 :   REAL derivs[2*MAXCOORD];
; 1665 :   REAL z[2*MAXCOORD+1];  /*  pointers to coord and tangent */
; 1666 :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	ecx, DWORD PTR _web+236
	fldz
	push	ebx
	fst	QWORD PTR _value$[ebp]
	mov	ebx, DWORD PTR _f_info$[ebp]
	mov	eax, DWORD PTR [ebx]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	or	eax, ecx
	push	esi
	push	edi

; 1688 :          { REAL **gpd = gl->gpolypart[m];

	mov	DWORD PTR _f_info$GSCopy$[ebp], ebx
	je	SHORT $LN19@facet_gene@3

; 1662 :   REAL value = 0.0;
; 1663 :   REAL val;
; 1664 :   REAL derivs[2*MAXCOORD];
; 1665 :   REAL z[2*MAXCOORD+1];  /*  pointers to coord and tangent */
; 1666 :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN80@facet_gene@3
$LN19@facet_gene@3:
	fld1
$LN80@facet_gene@3:

; 1667 :   int dim = web.dimension;
; 1668 :   struct gauss_lag *gl = &gauss_lagrange[dim][web.gauss2D_order];
; 1669 :   REAL *normal = z+SDIM;

	mov	ecx, DWORD PTR _web+616
	fstp	QWORD PTR _sign$[ebp]
	mov	edi, DWORD PTR _web+1596
	mov	edx, DWORD PTR _web+620
	lea	eax, DWORD PTR _z$[ebp+ecx*8]
	mov	DWORD PTR _normal$[ebp], eax

; 1670 :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [ebx+8]
	shl	edi, 5
	add	edi, DWORD PTR _gauss_lagrange[edx*4]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list

; 1671 : 
; 1672 :   facet_general_flag = 1;
; 1673 :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	xor	esi, esi
	mov	DWORD PTR _facet_general_flag, 1
	mov	DWORD PTR _gl$[ebp], edi
	mov	DWORD PTR _mi$[ebp], eax
	mov	DWORD PTR _m$[ebp], esi
	cmp	DWORD PTR [edi+4], esi
	jle	$LN37@facet_gene@3
$LN78@facet_gene@3:

; 1674 :   { 
; 1675 :      REAL coeff = gl->gausswt[m]/web.simplex_factorial;

	mov	edx, DWORD PTR [edi+12]
	fstp	ST(0)
	fld	QWORD PTR [edx+esi*8]

; 1676 :      REAL **s = f_info->sides[m];

	mov	eax, DWORD PTR [ebx+1276]
	fdiv	QWORD PTR _web+792
	mov	edx, DWORD PTR [eax+esi*4]

; 1677 :      z[2*SDIM] = m; /* kludge for attr interpolation. */

	mov	eax, ecx
	add	eax, eax
	mov	DWORD PTR _s$90159[ebp], edx
	fstp	QWORD PTR _coeff$90158[ebp]
	fild	DWORD PTR _m$[ebp]
	fstp	QWORD PTR _z$[ebp+eax*8]

; 1678 :      for ( k = 0 ; k < SDIM ; k++ ) z[k] = f_info->gauss_pt[m][k]; 

	xor	eax, eax
	cmp	ecx, 4
	jl	$LC32@facet_gene@3

; 1671 : 
; 1672 :   facet_general_flag = 1;
; 1673 :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	mov	ecx, DWORD PTR [ebx+1268]
	lea	edx, DWORD PTR [ecx+esi*4]

; 1678 :      for ( k = 0 ; k < SDIM ; k++ ) z[k] = f_info->gauss_pt[m][k]; 

	lea	ecx, DWORD PTR _z$[ebp+8]
	mov	esi, 16					; 00000010H
	sub	esi, ecx
	mov	ecx, 24					; 00000018H
	lea	ebx, DWORD PTR _z$[ebp+8]
	sub	ecx, ebx
	mov	DWORD PTR tv843[ebp], esi
	mov	DWORD PTR tv850[ebp], ecx
	jmp	SHORT $LN33@facet_gene@3
	npad	3
$LL40@facet_gene@3:
	mov	esi, DWORD PTR tv843[ebp]
$LN33@facet_gene@3:
	mov	ebx, DWORD PTR [edx]
	fld	QWORD PTR [ebx+eax*8]
	lea	ecx, DWORD PTR _z$[ebp+eax*8+8]
	fstp	QWORD PTR [ecx-8]
	mov	ebx, DWORD PTR [edx]
	fld	QWORD PTR [ebx+eax*8+8]
	add	esi, ecx
	fstp	QWORD PTR [ecx]
	mov	ebx, DWORD PTR [edx]
	fld	QWORD PTR [esi+ebx]
	mov	esi, DWORD PTR tv850[ebp]
	fstp	QWORD PTR [ecx+8]
	mov	ebx, DWORD PTR [edx]
	add	esi, ecx
	fld	QWORD PTR [esi+ebx]
	add	eax, 4
	fstp	QWORD PTR [ecx+16]
	mov	ecx, DWORD PTR _web+616
	lea	esi, DWORD PTR [ecx-3]
	cmp	eax, esi
	jl	SHORT $LL40@facet_gene@3
	mov	esi, DWORD PTR _m$[ebp]
	mov	ebx, DWORD PTR _f_info$GSCopy$[ebp]
$LC32@facet_gene@3:
	cmp	eax, ecx
	jge	SHORT $LN31@facet_gene@3

; 1671 : 
; 1672 :   facet_general_flag = 1;
; 1673 :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	mov	edx, DWORD PTR [ebx+1268]
	lea	edx, DWORD PTR [edx+esi*4]
	mov	DWORD PTR tv533[ebp], edx
$LL42@facet_gene@3:

; 1678 :      for ( k = 0 ; k < SDIM ; k++ ) z[k] = f_info->gauss_pt[m][k]; 

	mov	edx, DWORD PTR tv533[ebp]
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+eax*8]
	inc	eax
	fstp	QWORD PTR _z$[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LL42@facet_gene@3
$LN31@facet_gene@3:

; 1679 :      cross_prod(f_info->sides[m][0],f_info->sides[m][1],normal);

	mov	eax, DWORD PTR [ebx+1276]
	mov	eax, DWORD PTR [eax+esi*4]
	mov	ecx, DWORD PTR _normal$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	push	ecx
	push	edx
	push	eax
	call	_cross_prod

; 1680 :      if ( sign == -1.0 ) 

	fld	QWORD PTR _sign$[ebp]
	mov	edx, DWORD PTR _web+616
	fld	ST(0)
	fld	QWORD PTR __real@bff0000000000000
	add	esp, 12					; 0000000cH
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$LN59@facet_gene@3

; 1681 :         for ( k = 0 ; k < SDIM ; k++ ) z[k+SDIM] *= sign ; 

	xor	eax, eax
	mov	DWORD PTR _k$[ebp], eax
	cmp	edx, 4
	jl	SHORT $LC35@facet_gene@3
	lea	ecx, DWORD PTR [edx-4]
	shr	ecx, 2
	inc	ecx
	lea	ebx, DWORD PTR [ecx*4]
	lea	eax, DWORD PTR _z$[ebp+edx*8+8]
	mov	DWORD PTR _k$[ebp], ebx
$LN36@facet_gene@3:
	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	dec	ecx
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax-40]
	fld	QWORD PTR [eax-32]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax-32]
	fld	ST(0)
	fmul	QWORD PTR [eax-24]
	fstp	QWORD PTR [eax-24]
	fld	QWORD PTR [eax-16]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LN36@facet_gene@3
	mov	ebx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR _k$[ebp]
$LC35@facet_gene@3:
	cmp	eax, edx
	jge	SHORT $LN59@facet_gene@3
	add	eax, edx
	mov	ecx, edx
	sub	ecx, DWORD PTR _k$[ebp]
	lea	eax, DWORD PTR _z$[ebp+eax*8]
$LC9@facet_gene@3:
	fld	ST(0)
	add	eax, 8
	dec	ecx
	fmul	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC9@facet_gene@3
	mov	ebx, DWORD PTR _f_info$GSCopy$[ebp]
$LN59@facet_gene@3:

; 1682 :      eval_all(mi->expr[0],z,2*SDIM,&val,derivs,f_info->id);

	mov	ecx, DWORD PTR [ebx]
	fstp	ST(0)
	push	ecx
	lea	eax, DWORD PTR _derivs$[ebp]
	push	eax
	lea	ecx, DWORD PTR _val$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _mi$[ebp]
	add	edx, edx
	push	edx
	mov	edx, DWORD PTR [ecx+232]
	lea	eax, DWORD PTR _z$[ebp]
	push	eax
	push	edx
	call	_eval_all

; 1683 :      value += coeff*val;

	fld	QWORD PTR _val$[ebp]
	fld	QWORD PTR _coeff$90158[ebp]

; 1684 :      for ( j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR _web+616
	fmul	ST(1), ST(0)
	add	esp, 24					; 00000018H
	fxch	ST(1)
	fadd	QWORD PTR _value$[ebp]
	fst	QWORD PTR _value$[ebp]
	test	ecx, ecx
	jle	$LN65@facet_gene@3

; 1682 :      eval_all(mi->expr[0],z,2*SDIM,&val,derivs,f_info->id);

	mov	esi, DWORD PTR [edi+16]
	fld	QWORD PTR _sign$[ebp]
	mov	ebx, 2
	mov	DWORD PTR tv1218[ebp], 0
	mov	DWORD PTR tv1220[ebp], ebx
$LN6@facet_gene@3:

; 1685 :       { int jj = (j+1)%3;

	lea	eax, DWORD PTR [ebx-1]
	cdq
	mov	ecx, 3
	idiv	ecx

; 1686 :          int jjj = (j+2)%3;

	mov	eax, ebx
	mov	ebx, 3
	mov	ecx, edx
	cdq
	idiv	ebx

; 1687 :          for ( k = 0 ; k < gl->lagpts ; k++ )

	xor	eax, eax
	test	esi, esi
	jle	$LN39@facet_gene@3
	mov	esi, DWORD PTR _s$90159[ebp]
	mov	ebx, DWORD PTR [esi+4]
	mov	esi, DWORD PTR [esi]
	mov	DWORD PTR tv634[ebp], ebx
	mov	DWORD PTR tv652[ebp], esi
$LN38@facet_gene@3:

; 1688 :          { REAL **gpd = gl->gpolypart[m];

	mov	esi, DWORD PTR [edi+24]
	mov	edi, DWORD PTR _m$[ebp]
	mov	esi, DWORD PTR [esi+edi*4]
	mov	edi, DWORD PTR [esi]
	mov	esi, DWORD PTR [esi+4]

; 1689 :             f_info->grad[k][j] += coeff*(gl->gpoly[m][k]*derivs[j]
; 1690 :               - sign*derivs[jj+SDIM]*(s[1][jjj]*gpd[0][k]-s[0][jjj]*gpd[1][k])
; 1691 :               - sign*derivs[jjj+SDIM]*(s[0][jj]*gpd[1][k]-s[1][jj]*gpd[0][k]));

	mov	ebx, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR [esi+eax*8]
	mov	DWORD PTR tv648[ebp], esi
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	esi, DWORD PTR [esi+1336]
	mov	esi, DWORD PTR [esi+eax*4]
	add	esi, DWORD PTR tv1218[ebp]
	lea	edi, DWORD PTR [edi+eax*8]
	mov	DWORD PTR tv1236[ebp], esi
	mov	esi, DWORD PTR _gl$[ebp]
	mov	esi, DWORD PTR [esi+20]
	mov	esi, DWORD PTR [esi+ebx*4]
	fld	QWORD PTR [esi+eax*8]
	mov	esi, DWORD PTR tv1218[ebp]
	fmul	QWORD PTR _derivs$[ebp+esi]
	mov	esi, DWORD PTR tv634[ebp]
	fld	QWORD PTR [edi]
	inc	eax
	fmul	QWORD PTR [esi+edx*8]
	mov	esi, DWORD PTR tv652[ebp]
	fld	QWORD PTR [esi+edx*8]
	mov	esi, DWORD PTR tv648[ebp]
	fmul	QWORD PTR [esi]
	mov	esi, DWORD PTR _web+616
	lea	ebx, DWORD PTR [esi+ecx]
	add	esi, edx
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _derivs$[ebp+ebx*8]
	mov	ebx, DWORD PTR tv648[ebp]
	fmul	ST(0), ST(3)
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv652[ebp]
	fmul	QWORD PTR [ebx+ecx*8]
	fld	QWORD PTR [edi]
	mov	edi, DWORD PTR tv634[ebp]
	fmul	QWORD PTR [edi+ecx*8]
	mov	edi, DWORD PTR _gl$[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _derivs$[ebp+esi*8]
	mov	esi, DWORD PTR tv1236[ebp]
	fmul	ST(0), ST(3)
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fadd	QWORD PTR [esi]
	fstp	QWORD PTR [esi]
	mov	esi, DWORD PTR [edi+16]
	cmp	eax, esi
	jl	$LN38@facet_gene@3
$LN39@facet_gene@3:

; 1687 :          for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	ebx, DWORD PTR tv1220[ebp]
	mov	ecx, DWORD PTR _web+616
	add	DWORD PTR tv1218[ebp], 8
	inc	ebx
	lea	edx, DWORD PTR [ebx-2]
	mov	DWORD PTR tv1220[ebp], ebx
	cmp	edx, ecx
	jl	$LN6@facet_gene@3

; 1684 :      for ( j = 0 ; j < SDIM ; j++ )

	mov	esi, DWORD PTR _m$[ebp]
	fstp	ST(0)
	mov	ebx, DWORD PTR _f_info$GSCopy$[ebp]
$LN65@facet_gene@3:
	inc	esi
	fstp	ST(1)
	mov	DWORD PTR _m$[ebp], esi
	cmp	esi, DWORD PTR [edi+4]
	jl	$LN78@facet_gene@3

; 1692 :          }
; 1693 :       }
; 1694 :   }
; 1695 :   facet_general_flag = 0;

	pop	edi
	pop	esi
	mov	DWORD PTR _facet_general_flag, 0
	pop	ebx

; 1696 :   return value; 
; 1697 : } // end facet_general_grad_lagr()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN37@facet_gene@3:
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	mov	DWORD PTR _facet_general_flag, esi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_general_grad_lagr ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_facet_general_hess_lagr
; Function compile flags: /Ogtp
;	COMDAT _facet_general_hess_lagr
_TEXT	SEGMENT
_secondqXvS$ = -1524					; size = 48
_val$ = -1476						; size = 8
_coeff$90202 = -1468					; size = 8
tv1358 = -1460						; size = 4
_sum$90236 = -1456					; size = 8
_normal$ = -1448					; size = 4
tv1364 = -1444						; size = 4
_mi$ = -1440						; size = 4
tv1309 = -1436						; size = 4
_value$ = -1432						; size = 8
_sign$ = -1424						; size = 8
_s$90204 = -1416					; size = 4
_gpd$90203 = -1412					; size = 4
_gl$ = -1408						; size = 4
_f_info$GSCopy$ = -1404					; size = 4
tv1381 = -1400						; size = 4
_jj$90232 = -1400					; size = 4
tv2098 = -1396						; size = 4
tv1334 = -1396						; size = 4
_second$ = -1392					; size = 4
tv1228 = -1388						; size = 4
_m$ = -1384						; size = 4
tv1448 = -1380						; size = 4
tv1210 = -1380						; size = 4
_JJ$90234 = -1380					; size = 4
tv1478 = -1376						; size = 4
_JJJ$90235 = -1376					; size = 4
_jjj$90216 = -1376					; size = 4
tv1651 = -1372						; size = 4
tv1362 = -1372						; size = 4
tv1216 = -1372						; size = 4
_jj$90215 = -1372					; size = 4
tv2029 = -1368						; size = 4
tv1658 = -1368						; size = 4
tv1429 = -1368						; size = 4
_J$ = -1368						; size = 4
tv2083 = -1364						; size = 4
tv1385 = -1364						; size = 4
_jjj$90233 = -1364					; size = 4
tv2085 = -1360						; size = 4
tv1115 = -1360						; size = 4
_j$ = -1360						; size = 4
_secondxJ$ = -1356					; size = 1152
_derivs$ = -204						; size = 96
_z$ = -108						; size = 104
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_facet_general_hess_lagr PROC				; COMDAT

; 1708 : { int m,j,k,kk,J;

	push	ebp
	mov	ebp, esp
	sub	esp, 1524				; 000005f4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1709 :   REAL value = 0.0;

	fldz
	push	ebx
	push	esi
	fstp	QWORD PTR _value$[ebp]
	mov	esi, DWORD PTR _f_info$[ebp]

; 1710 :   REAL val;
; 1711 :   REAL derivs[2*MAXCOORD];
; 1712 :   REAL z[2*MAXCOORD+1];  /*  pointers to coord and tangent */
; 1713 :   MAT2D(second,2*MAXCOORD,2*MAXCOORD); /* second derivatives */

	push	12					; 0000000cH
	push	12					; 0000000cH
	lea	eax, DWORD PTR _secondxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _secondqXvS$[ebp]
	push	ecx
	mov	DWORD PTR _f_info$GSCopy$[ebp], esi
	call	_mat2d_setup

; 1714 :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR _second$[ebp], eax
	mov	eax, DWORD PTR _web+236
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	add	esp, 16					; 00000010H
	or	eax, ecx
	je	SHORT $LN31@facet_gene@4
	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN102@facet_gene@4
$LN31@facet_gene@4:
	fld1
$LN102@facet_gene@4:

; 1715 :   int dim = web.dimension;
; 1716 :   struct gauss_lag *gl = &gauss_lagrange[dim][web.gauss2D_order];

	mov	ebx, DWORD PTR _web+1596
	fstp	QWORD PTR _sign$[ebp]
	mov	ecx, DWORD PTR _web+620

; 1717 :   REAL *normal = z+SDIM;
; 1718 :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [esi+8]
	shl	ebx, 5
	add	ebx, DWORD PTR _gauss_lagrange[ecx*4]
	mov	ecx, DWORD PTR _web+616
	lea	edx, DWORD PTR _z$[ebp+ecx*8]
	mov	DWORD PTR _normal$[ebp], edx
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list

; 1719 : 
; 1720 :   facet_general_flag = 1;
; 1721 :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	xor	edx, edx
	mov	DWORD PTR _facet_general_flag, 1
	mov	DWORD PTR _gl$[ebp], ebx
	mov	DWORD PTR _mi$[ebp], eax
	mov	DWORD PTR _m$[ebp], edx
	cmp	DWORD PTR [ebx+4], edx
	jle	$LN65@facet_gene@4
	push	edi
	jmp	SHORT $LN28@facet_gene@4
	npad	8
$LL70@facet_gene@4:
	mov	edx, DWORD PTR _m$[ebp]
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
$LN28@facet_gene@4:

; 1722 :   { 
; 1723 :      REAL coeff = gl->gausswt[m]/web.simplex_factorial;

	mov	eax, DWORD PTR [ebx+12]
	fld	QWORD PTR [eax+edx*8]

; 1724 :      REAL **gpd = gl->gpolypart[m];

	mov	eax, DWORD PTR [ebx+24]
	fdiv	QWORD PTR _web+792
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _gpd$90203[ebp], eax

; 1725 :      REAL **s = f_info->sides[m];

	mov	eax, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _s$90204[ebp], eax

; 1726 :      z[2*SDIM] = m; /* kludge for attr interpolation. */

	mov	eax, ecx
	add	eax, eax
	fstp	QWORD PTR _coeff$90202[ebp]
	fild	DWORD PTR _m$[ebp]
	fstp	QWORD PTR _z$[ebp+eax*8]

; 1727 :      for ( k = 0 ; k < SDIM ; k++ ) z[k] = f_info->gauss_pt[m][k]; 

	xor	eax, eax
	cmp	ecx, 4
	jl	$LC60@facet_gene@4

; 1719 : 
; 1720 :   facet_general_flag = 1;
; 1721 :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	mov	esi, DWORD PTR [esi+1268]
	lea	esi, DWORD PTR [esi+edx*4]

; 1727 :      for ( k = 0 ; k < SDIM ; k++ ) z[k] = f_info->gauss_pt[m][k]; 

	lea	edi, DWORD PTR _z$[ebp+8]
	mov	edx, 16					; 00000010H
	sub	edx, edi
	mov	DWORD PTR tv1651[ebp], edx
	mov	edx, 24					; 00000018H
	sub	edx, edi
	mov	DWORD PTR tv1115[ebp], esi
	mov	DWORD PTR tv1658[ebp], edx
	jmp	SHORT $LN61@facet_gene@4
$LL73@facet_gene@4:
	mov	esi, DWORD PTR tv1115[ebp]
$LN61@facet_gene@4:
	mov	edi, DWORD PTR [esi]
	fld	QWORD PTR [edi+eax*8]
	lea	edx, DWORD PTR _z$[ebp+eax*8+8]
	fstp	QWORD PTR [edx-8]
	mov	edi, DWORD PTR [esi]
	fld	QWORD PTR [edi+eax*8+8]
	add	eax, 4
	fstp	QWORD PTR [edx]
	mov	esi, DWORD PTR [esi]
	add	esi, DWORD PTR tv1651[ebp]
	fld	QWORD PTR [esi+edx]
	mov	esi, DWORD PTR tv1115[ebp]
	fstp	QWORD PTR [edx+8]
	mov	esi, DWORD PTR [esi]
	add	esi, DWORD PTR tv1658[ebp]
	fld	QWORD PTR [esi+edx]
	fstp	QWORD PTR [edx+16]
	lea	edx, DWORD PTR [ecx-3]
	cmp	eax, edx
	jl	SHORT $LL73@facet_gene@4
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
$LC60@facet_gene@4:
	cmp	eax, ecx
	jge	SHORT $LN59@facet_gene@4

; 1719 : 
; 1720 :   facet_general_flag = 1;
; 1721 :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	mov	edi, DWORD PTR [esi+1268]
	lea	edi, DWORD PTR [edi+edx*4]
	mov	DWORD PTR tv1115[ebp], edi
$LL75@facet_gene@4:

; 1727 :      for ( k = 0 ; k < SDIM ; k++ ) z[k] = f_info->gauss_pt[m][k]; 

	mov	edi, DWORD PTR tv1115[ebp]
	mov	edi, DWORD PTR [edi]
	fld	QWORD PTR [edi+eax*8]
	inc	eax
	fstp	QWORD PTR _z$[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LL75@facet_gene@4
$LN59@facet_gene@4:

; 1728 :      cross_prod(f_info->sides[m][0],f_info->sides[m][1],normal);

	mov	ecx, DWORD PTR [esi+1276]
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	eax, DWORD PTR _normal$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx]
	push	eax
	push	ecx
	push	edx
	call	_cross_prod

; 1729 :      if ( sign == -1.0 ) 

	fld	QWORD PTR _sign$[ebp]
	mov	edx, DWORD PTR _web+616
	fld	ST(0)
	fld	QWORD PTR __real@bff0000000000000
	add	esp, 12					; 0000000cH
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN89@facet_gene@4

; 1730 :         for ( k = 0 ; k < SDIM ; k++ ) z[k+SDIM] *= sign ; 

	xor	edi, edi
	cmp	edx, 4
	jl	SHORT $LC63@facet_gene@4
	lea	ecx, DWORD PTR [edx-4]
	shr	ecx, 2
	inc	ecx
	lea	eax, DWORD PTR _z$[ebp+edx*8+8]
	lea	edi, DWORD PTR [ecx*4]
$LN64@facet_gene@4:
	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	dec	ecx
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax-40]
	fld	QWORD PTR [eax-32]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax-32]
	fld	ST(0)
	fmul	QWORD PTR [eax-24]
	fstp	QWORD PTR [eax-24]
	fld	QWORD PTR [eax-16]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LN64@facet_gene@4
$LC63@facet_gene@4:
	cmp	edi, edx
	jge	SHORT $LN89@facet_gene@4
	lea	eax, DWORD PTR [edx+edi]
	mov	ecx, edx
	lea	eax, DWORD PTR _z$[ebp+eax*8]
	sub	ecx, edi
$LC21@facet_gene@4:
	fld	ST(0)
	add	eax, 8
	dec	ecx
	fmul	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC21@facet_gene@4
$LN89@facet_gene@4:

; 1731 :      eval_second(mi->expr[0],z,2*SDIM,&val,derivs,
; 1732 :           second,f_info->id);

	mov	eax, DWORD PTR [esi]
	fstp	ST(0)
	mov	ecx, DWORD PTR _second$[ebp]
	push	eax
	push	ecx
	lea	eax, DWORD PTR _derivs$[ebp]
	push	eax
	lea	ecx, DWORD PTR _val$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _mi$[ebp]
	add	edx, edx
	push	edx
	mov	edx, DWORD PTR [ecx+232]
	lea	eax, DWORD PTR _z$[ebp]
	push	eax
	push	edx
	call	_eval_second

; 1733 :      value += coeff*val;

	fld	QWORD PTR _val$[ebp]
	fld	QWORD PTR _coeff$90202[ebp]

; 1734 :      /* gradients */
; 1735 :      for ( j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR _web+616
	fmul	ST(1), ST(0)
	add	esp, 28					; 0000001cH
	fxch	ST(1)
	fadd	QWORD PTR _value$[ebp]
	fstp	QWORD PTR _value$[ebp]
	test	ecx, ecx
	jle	$LN91@facet_gene@4

; 1731 :      eval_second(mi->expr[0],z,2*SDIM,&val,derivs,
; 1732 :           second,f_info->id);

	mov	esi, DWORD PTR [ebx+16]
	fld	QWORD PTR _sign$[ebp]
	mov	DWORD PTR tv2083[ebp], 0
	mov	DWORD PTR tv2085[ebp], 2
$LN71@facet_gene@4:

; 1736 :       { int jj = (j+1)%3;

	mov	eax, DWORD PTR tv2085[ebp]
	dec	eax
	cdq
	mov	edi, 3
	idiv	edi

; 1737 :          int jjj = (j+2)%3;

	mov	eax, DWORD PTR tv2085[ebp]
	mov	DWORD PTR _jj$90215[ebp], edx
	cdq
	idiv	edi

; 1738 :          for ( k = 0 ; k < gl->lagpts ; k++ )

	xor	edi, edi
	mov	DWORD PTR _jjj$90216[ebp], edx
	test	esi, esi
	jle	$LN17@facet_gene@4
	mov	eax, DWORD PTR _s$90204[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv1210[ebp], edx
	mov	edx, DWORD PTR _gpd$90203[ebp]
	mov	DWORD PTR tv1228[ebp], eax
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+4]
	sub	edx, eax
	mov	DWORD PTR tv2029[ebp], edx
$LN66@facet_gene@4:

; 1739 :          { 
; 1740 :             f_info->grad[k][j] += coeff*(gl->gpoly[m][k]*derivs[j]
; 1741 :               - sign*derivs[jj+SDIM]*(s[1][jjj]*gpd[0][k]-s[0][jjj]*gpd[1][k])
; 1742 :               - sign*derivs[jjj+SDIM]*(s[0][jj]*gpd[1][k]-s[1][jj]*gpd[0][k]));

	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [edx+1336]
	mov	edx, DWORD PTR [edx+edi*4]
	add	edx, DWORD PTR tv2083[ebp]
	mov	esi, DWORD PTR _m$[ebp]
	mov	DWORD PTR tv2098[ebp], edx
	mov	edx, DWORD PTR [ebx+20]
	mov	edx, DWORD PTR [edx+esi*4]
	fld	QWORD PTR [edx+edi*8]
	mov	edx, DWORD PTR tv2083[ebp]
	fmul	QWORD PTR _derivs$[ebp+edx]
	mov	edx, DWORD PTR _jjj$90216[ebp]
	mov	esi, DWORD PTR tv1210[ebp]
	fld	QWORD PTR [esi+edx*8]
	mov	esi, DWORD PTR tv2029[ebp]
	fmul	QWORD PTR [eax]
	inc	edi
	fld	QWORD PTR [esi+eax]
	mov	esi, DWORD PTR tv1228[ebp]
	fmul	QWORD PTR [esi+edx*8]
	mov	edx, DWORD PTR _jj$90215[ebp]
	lea	esi, DWORD PTR [ecx+edx]
	add	ecx, DWORD PTR _jjj$90216[ebp]
	fsubp	ST(1), ST(0)
	add	eax, 8
	fld	QWORD PTR _derivs$[ebp+esi*8]
	mov	esi, DWORD PTR tv2029[ebp]
	fmul	ST(0), ST(3)
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [esi+eax-8]
	mov	esi, DWORD PTR tv1228[ebp]
	fmul	QWORD PTR [esi+edx*8]
	mov	esi, DWORD PTR tv1210[ebp]
	fld	QWORD PTR [esi+edx*8]
	fmul	QWORD PTR [eax-8]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _derivs$[ebp+ecx*8]
	mov	ecx, DWORD PTR tv2098[ebp]
	fmul	ST(0), ST(3)
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	esi, DWORD PTR [ebx+16]
	mov	ecx, DWORD PTR _web+616
	cmp	edi, esi
	jl	$LN66@facet_gene@4
$LN17@facet_gene@4:

; 1734 :      /* gradients */
; 1735 :      for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR tv2085[ebp]
	add	DWORD PTR tv2083[ebp], 8
	inc	eax
	mov	DWORD PTR tv2085[ebp], eax
	add	eax, -2					; fffffffeH
	cmp	eax, ecx
	jl	$LN71@facet_gene@4

; 1738 :          for ( k = 0 ; k < gl->lagpts ; k++ )

	fstp	ST(0)
$LN91@facet_gene@4:

; 1743 :          }
; 1744 :       }
; 1745 :      /* hessian */
; 1746 :      for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	eax, DWORD PTR [ebx+16]
	fstp	ST(0)
	xor	edi, edi
	test	eax, eax
	jle	$LN27@facet_gene@4
	npad	3
$LL69@facet_gene@4:

; 1747 :       for ( kk = 0 ; kk < gl->lagpts ; kk++ )

	xor	esi, esi
	test	eax, eax
	jle	$LN11@facet_gene@4
	npad	6
$LL77@facet_gene@4:

; 1748 :         for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	mov	DWORD PTR _j$[ebp], eax
	test	ecx, ecx
	jle	$LN8@facet_gene@4
$LL6@facet_gene@4:

; 1749 :          for ( J = 0 ; J < SDIM ; J++ )

	xor	edx, edx
	mov	DWORD PTR _J$[ebp], edx
	test	ecx, ecx
	jle	$LN5@facet_gene@4
	lea	eax, DWORD PTR [eax+eax*2]
	mov	DWORD PTR tv1309[ebp], eax
	jmp	SHORT $LN103@facet_gene@4
	npad	5
$LL68@facet_gene@4:
	mov	edx, DWORD PTR _J$[ebp]
$LN103@facet_gene@4:
	mov	eax, DWORD PTR _j$[ebp]

; 1750 :          { int jj = (j==2) ? 0 : j+1;

	cmp	eax, 2
	jne	$LN33@facet_gene@4
	mov	DWORD PTR _jj$90232[ebp], 0
$LN35@facet_gene@4:

; 1751 :             int jjj = (j==0) ? 2 : j-1 ;

	dec	eax
	mov	DWORD PTR _jjj$90233[ebp], eax
$LN36@facet_gene@4:

; 1752 :             int JJ = (J==2) ? 0 : J+1;

	cmp	edx, 2
	jne	$LN37@facet_gene@4
	mov	DWORD PTR _JJ$90234[ebp], 0
$LN39@facet_gene@4:

; 1753 :             int JJJ = (J==0) ? 2 : J-1 ;

	lea	eax, DWORD PTR [edx-1]
	mov	DWORD PTR _JJJ$90235[ebp], eax
$LN40@facet_gene@4:

; 1754 :             REAL sum;
; 1755 : 
; 1756 :             /* have to break into parts, else too big expression for compiler */
; 1757 :               sum = gl->gpoly[m][k]*gl->gpoly[m][kk]*second[j][J];

	mov	eax, DWORD PTR [ebx+20]
	mov	ebx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [eax+ebx*4]
	fld	QWORD PTR [eax+esi*8]
	mov	ebx, DWORD PTR _j$[ebp]
	fmul	QWORD PTR [eax+edi*8]
	mov	eax, DWORD PTR _second$[ebp]
	mov	eax, DWORD PTR [eax+ebx*4]

; 1758 : 
; 1759 :               sum += sign*SDIM_dot(e[j][J],derivs+SDIM)
; 1760 :                           *(gpd[1][kk]*gpd[0][k]-gpd[0][kk]*gpd[1][k]);

	push	ecx
	fmul	QWORD PTR [eax+edx*8]
	mov	eax, DWORD PTR _gpd$90203[ebp]
	mov	ebx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv1216[ebp], eax
	fstp	QWORD PTR _sum$90236[ebp]
	mov	eax, DWORD PTR tv1309[ebp]
	lea	ecx, DWORD PTR _derivs$[ebp+ecx*8]
	add	eax, edx
	push	ecx
	lea	ecx, DWORD PTR [eax+eax*2]
	lea	edx, DWORD PTR _e[ecx*8]
	push	edx
	call	_dot
	fld	QWORD PTR _sign$[ebp]
	mov	eax, DWORD PTR tv1216[ebp]
	fmul	ST(1), ST(0)
	fld	QWORD PTR [eax+edi*8]

; 1761 : 
; 1762 :               sum += sign*gl->gpoly[m][kk]*(s[1][jj]*gpd[0][k]-s[0][jj]*gpd[1][k])
; 1763 :                           *second[J][jjj+SDIM]
; 1764 :                 - sign*gl->gpoly[m][kk]*(s[1][jjj]*gpd[0][k]-s[0][jjj]*gpd[1][k])
; 1765 :                           *second[J][jj+SDIM]
; 1766 :                 + sign*gl->gpoly[m][k]*(s[1][JJ]*gpd[0][kk]-s[0][JJ]*gpd[1][kk])
; 1767 :                           *second[j][JJJ+SDIM]
; 1768 :                 - sign*gl->gpoly[m][k]*(s[1][JJJ]*gpd[0][kk]-s[0][JJJ]*gpd[1][kk])
; 1769 :                           *second[j][JJ+SDIM];
; 1770 : 
; 1771 :               sum += (s[1][jj]*gpd[0][k] - s[0][jj]*gpd[1][k])
; 1772 :                   *(s[1][JJ]*gpd[0][kk] - s[0][JJ]*gpd[1][kk])
; 1773 :                      *second[jjj+SDIM][JJJ+SDIM]
; 1774 :                 - (s[1][jjj]*gpd[0][k] - s[0][jjj]*gpd[1][k])
; 1775 :                   *(s[1][JJ]*gpd[0][kk] - s[0][JJ]*gpd[1][kk])
; 1776 :                      *second[jj+SDIM][JJJ+SDIM]
; 1777 :                 - (s[1][jj]*gpd[0][k] - s[0][jj]*gpd[1][k])
; 1778 :                   *(s[1][JJJ]*gpd[0][kk] - s[0][JJJ]*gpd[1][kk])
; 1779 :                      *second[jjj+SDIM][JJ+SDIM]
; 1780 :                 + (s[1][jjj]*gpd[0][k] - s[0][jjj]*gpd[1][k])
; 1781 :                   *(s[1][JJJ]*gpd[0][kk] - s[0][JJJ]*gpd[1][kk])
; 1782 :                      *second[jj+SDIM][JJ+SDIM];

	mov	edx, DWORD PTR _s$90204[ebp]
	fmul	QWORD PTR [ebx+esi*8]
	mov	ecx, DWORD PTR [edx+4]
	fld	QWORD PTR [ebx+edi*8]
	mov	edx, DWORD PTR [edx]
	fmul	QWORD PTR [eax+esi*8]
	mov	DWORD PTR tv1334[ebp], ecx
	mov	DWORD PTR tv1228[ebp], edx
	mov	edx, DWORD PTR _JJ$90234[ebp]
	fsubp	ST(1), ST(0)
	add	esp, 12					; 0000000cH
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR _sum$90236[ebp]
	fstp	QWORD PTR _sum$90236[ebp]
	fld	QWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR tv1228[ebp]
	fmul	QWORD PTR [eax+esi*8]
	fld	QWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR _jj$90232[ebp]
	fmul	QWORD PTR [ebx+esi*8]
	mov	edx, DWORD PTR tv1334[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR tv1228[ebp]
	fmul	QWORD PTR [eax+edi*8]
	fld	QWORD PTR [edx+ecx*8]

; 1783 : 
; 1784 :             f_info->hess[k][kk][j][J] += coeff*sum;

	mov	ecx, DWORD PTR _jjj$90233[ebp]
	add	ecx, DWORD PTR _web+616
	fmul	QWORD PTR [ebx+edi*8]
	mov	edx, DWORD PTR _second$[ebp]
	mov	DWORD PTR tv1358[ebp], ecx
	mov	ecx, DWORD PTR [edx+ecx*4]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR tv1334[ebp]
	mov	DWORD PTR tv1362[ebp], ecx
	mov	ecx, DWORD PTR _JJJ$90235[ebp]
	add	ecx, DWORD PTR _web+616
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
	mov	DWORD PTR tv1364[ebp], ecx
	mov	ecx, DWORD PTR _jjj$90233[ebp]
	fld	QWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR tv1228[ebp]
	fmul	QWORD PTR [eax+edi*8]
	fld	QWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR _web+616
	add	ecx, DWORD PTR _jj$90232[ebp]
	fmul	QWORD PTR [ebx+edi*8]
	mov	edx, DWORD PTR _second$[ebp]
	mov	DWORD PTR tv1381[ebp], ecx
	mov	ecx, DWORD PTR [edx+ecx*4]
	fsubp	ST(1), ST(0)

; 1761 : 
; 1762 :               sum += sign*gl->gpoly[m][kk]*(s[1][jj]*gpd[0][k]-s[0][jj]*gpd[1][k])
; 1763 :                           *second[J][jjj+SDIM]
; 1764 :                 - sign*gl->gpoly[m][kk]*(s[1][jjj]*gpd[0][k]-s[0][jjj]*gpd[1][k])
; 1765 :                           *second[J][jj+SDIM]
; 1766 :                 + sign*gl->gpoly[m][k]*(s[1][JJ]*gpd[0][kk]-s[0][JJ]*gpd[1][kk])
; 1767 :                           *second[j][JJJ+SDIM]
; 1768 :                 - sign*gl->gpoly[m][k]*(s[1][JJJ]*gpd[0][kk]-s[0][JJJ]*gpd[1][kk])
; 1769 :                           *second[j][JJ+SDIM];
; 1770 : 
; 1771 :               sum += (s[1][jj]*gpd[0][k] - s[0][jj]*gpd[1][k])
; 1772 :                   *(s[1][JJ]*gpd[0][kk] - s[0][JJ]*gpd[1][kk])
; 1773 :                      *second[jjj+SDIM][JJJ+SDIM]
; 1774 :                 - (s[1][jjj]*gpd[0][k] - s[0][jjj]*gpd[1][k])
; 1775 :                   *(s[1][JJ]*gpd[0][kk] - s[0][JJ]*gpd[1][kk])
; 1776 :                      *second[jj+SDIM][JJJ+SDIM]
; 1777 :                 - (s[1][jj]*gpd[0][k] - s[0][jj]*gpd[1][k])
; 1778 :                   *(s[1][JJJ]*gpd[0][kk] - s[0][JJJ]*gpd[1][kk])
; 1779 :                      *second[jjj+SDIM][JJ+SDIM]
; 1780 :                 + (s[1][jjj]*gpd[0][k] - s[0][jjj]*gpd[1][k])
; 1781 :                   *(s[1][JJJ]*gpd[0][kk] - s[0][JJJ]*gpd[1][kk])
; 1782 :                      *second[jj+SDIM][JJ+SDIM];

	mov	edx, DWORD PTR tv1334[ebp]
	mov	DWORD PTR tv1385[ebp], ecx
	mov	ecx, DWORD PTR _JJJ$90235[ebp]
	fld	QWORD PTR [edx+ecx*8]
	fmul	QWORD PTR [eax+esi*8]
	mov	eax, DWORD PTR tv1228[ebp]
	fld	QWORD PTR [eax+ecx*8]
	mov	ecx, DWORD PTR _gl$[ebp]
	fmul	QWORD PTR [ebx+esi*8]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR _J$[ebp]
	fld	QWORD PTR [ecx+esi*8]
	mov	ebx, DWORD PTR _second$[ebp]
	mov	ebx, DWORD PTR [ebx+edx*4]
	fmul	ST(0), ST(5)
	fld	QWORD PTR [ecx+edi*8]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _web+616
	fmulp	ST(6), ST(0)
	add	eax, DWORD PTR _JJ$90234[ebp]
	mov	DWORD PTR tv1429[ebp], ebx
	mov	ebx, DWORD PTR _second$[ebp]
	fld	ST(0)
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fmul	ST(0), ST(4)
	mov	DWORD PTR tv1448[ebp], ebx

; 1783 : 
; 1784 :             f_info->hess[k][kk][j][J] += coeff*sum;

	mov	ebx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ebx, DWORD PTR [ebx+1340]
	mov	ebx, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR [ebx+esi*4]
	mov	ecx, DWORD PTR [ebx+ecx*4]
	mov	ebx, DWORD PTR tv1358[ebp]
	lea	ecx, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR tv1478[ebp], ecx
	mov	ecx, DWORD PTR tv1429[ebp]
	fmul	QWORD PTR [ecx+ebx*8]
	mov	ebx, DWORD PTR tv1381[ebp]
	fxch	ST(1)
	add	eax, eax
	fmul	ST(0), ST(3)
	add	eax, eax
	add	eax, eax
	fmul	QWORD PTR [ecx+ebx*8]
	mov	ecx, DWORD PTR tv1364[ebp]
	mov	ebx, DWORD PTR tv1448[ebp]
	fsubp	ST(1), ST(0)
	fld	ST(5)
	fmul	ST(0), ST(5)
	fmul	QWORD PTR [ebx+ecx]
	faddp	ST(1), ST(0)
	fxch	ST(5)
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv1362[ebp]
	fsubp	ST(5), ST(0)
	fxch	ST(4)
	fadd	QWORD PTR _sum$90236[ebp]
	fld	ST(2)
	fmul	ST(0), ST(4)
	fmul	QWORD PTR [ecx+ebx]
	mov	ebx, DWORD PTR tv1385[ebp]
	fld	ST(2)
	fmulp	ST(5), ST(0)
	fxch	ST(4)
	fmul	QWORD PTR [ebx+ecx]
	mov	ecx, DWORD PTR tv1362[ebp]
	fsubp	ST(4), ST(0)
	fld	ST(4)
	fmulp	ST(3), ST(0)
	fld	QWORD PTR [eax+ecx]
	fmulp	ST(3), ST(0)
	fxch	ST(3)
	fsubrp	ST(2), ST(0)
	fmulp	ST(3), ST(0)
	fld	QWORD PTR [eax+ebx]
	fmulp	ST(3), ST(0)
	faddp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR _coeff$90202[ebp]
	mov	eax, DWORD PTR tv1478[ebp]
	mov	ebx, DWORD PTR _gl$[ebp]
	inc	edx
	fadd	QWORD PTR [eax]
	mov	DWORD PTR _J$[ebp], edx
	fstp	QWORD PTR [eax]
	mov	ecx, DWORD PTR _web+616
	cmp	edx, ecx
	jl	$LL68@facet_gene@4

; 1749 :          for ( J = 0 ; J < SDIM ; J++ )

	mov	eax, DWORD PTR _j$[ebp]
$LN5@facet_gene@4:

; 1748 :         for ( j = 0 ; j < SDIM ; j++ )

	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, ecx
	jl	$LL6@facet_gene@4
$LN8@facet_gene@4:

; 1747 :       for ( kk = 0 ; kk < gl->lagpts ; kk++ )

	inc	esi
	cmp	esi, DWORD PTR [ebx+16]
	jl	$LL77@facet_gene@4
$LN11@facet_gene@4:

; 1743 :          }
; 1744 :       }
; 1745 :      /* hessian */
; 1746 :      for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	eax, DWORD PTR [ebx+16]
	inc	edi
	cmp	edi, eax
	jl	$LL69@facet_gene@4
$LN27@facet_gene@4:

; 1719 : 
; 1720 :   facet_general_flag = 1;
; 1721 :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	mov	eax, DWORD PTR _m$[ebp]
	inc	eax
	mov	DWORD PTR _m$[ebp], eax
	cmp	eax, DWORD PTR [ebx+4]
	jl	$LL70@facet_gene@4

; 1785 :          }
; 1786 :   }
; 1787 :   facet_general_flag = 0;
; 1788 :   return value; 

	fld	QWORD PTR _value$[ebp]
	pop	edi
	pop	esi
	mov	DWORD PTR _facet_general_flag, 0
	pop	ebx

; 1789 : } // end facet_general_hess_lagr()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN33@facet_gene@4:

; 1750 :          { int jj = (j==2) ? 0 : j+1;

	inc	eax
	mov	DWORD PTR _jj$90232[ebp], eax

; 1751 :             int jjj = (j==0) ? 2 : j-1 ;

	mov	eax, DWORD PTR _j$[ebp]
	test	eax, eax
	jne	$LN35@facet_gene@4
	mov	DWORD PTR _jjj$90233[ebp], 2
	jmp	$LN36@facet_gene@4
$LN37@facet_gene@4:

; 1752 :             int JJ = (J==2) ? 0 : J+1;

	lea	eax, DWORD PTR [edx+1]
	mov	DWORD PTR _JJ$90234[ebp], eax

; 1753 :             int JJJ = (J==0) ? 2 : J-1 ;

	test	edx, edx
	jne	$LN39@facet_gene@4
	mov	DWORD PTR _JJJ$90235[ebp], 2
	jmp	$LN40@facet_gene@4
$LN65@facet_gene@4:

; 1789 : } // end facet_general_hess_lagr()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _value$[ebp]
	pop	esi
	xor	ecx, ebp
	mov	DWORD PTR _facet_general_flag, edx
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_general_hess_lagr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EA@GEDGGBID@facet_general_hi_d_integral?5meth@ ; `string'
PUBLIC	??_C@_0EC@FFADDFHG@facet_general_hi_d_integral?5meth@ ; `string'
PUBLIC	_facet_general_hi_d_init
;	COMDAT ??_C@_0EA@GEDGGBID@facet_general_hi_d_integral?5meth@
CONST	SEGMENT
??_C@_0EA@GEDGGBID@facet_general_hi_d_integral?5meth@ DB 'facet_general_h'
	DB	'i_d_integral method does not do Lagrange model.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@FFADDFHG@facet_general_hi_d_integral?5meth@
CONST	SEGMENT
??_C@_0EC@FFADDFHG@facet_general_hi_d_integral?5meth@ DB 'facet_general_h'
	DB	'i_d_integral method only for surface dimension 2.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _facet_general_hi_d_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_facet_general_hi_d_init PROC				; COMDAT

; 1812 :   if ( web.dimension != 2 )

	cmp	DWORD PTR _web+620, 2
	je	SHORT $LN2@facet_gene@5

; 1813 :      kb_error(3788,"facet_general_hi_d_integral method only for surface dimension 2.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0EC@FFADDFHG@facet_general_hi_d_integral?5meth@
	push	3788					; 00000eccH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN2@facet_gene@5:

; 1814 :   
; 1815 :   if ( web.modeltype == LAGRANGE )

	cmp	DWORD PTR _web+628, 3
	jne	SHORT $LN1@facet_gene@5

; 1816 :       kb_error(3679,"facet_general_hi_d_integral method does not do Lagrange model.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0EA@GEDGGBID@facet_general_hi_d_integral?5meth@
	push	3679					; 00000e5fH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@facet_gene@5:

; 1817 : 
; 1818 : } // end facet_general_init()

	ret	0
_facet_general_hi_d_init ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_facet_general_hi_d_value
; Function compile flags: /Ogtp
;	COMDAT _facet_general_hi_d_value
_TEXT	SEGMENT
_value$ = -220						; size = 8
_sign$ = -212						; size = 8
_mi$ = -204						; size = 4
_f_info$GSCopy$ = -200					; size = 4
tv1402 = -196						; size = 4
tv869 = -196						; size = 4
tv1341 = -192						; size = 4
tv862 = -192						; size = 4
_m$ = -188						; size = 4
tv1492 = -184						; size = 4
tv542 = -184						; size = 4
_z$ = -180						; size = 176
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_facet_general_hi_d_value PROC				; COMDAT

; 1829 : { int m,k,kk,j;

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1830 :   REAL value = 0.0;
; 1831 :   REAL z[MAXCOORD+(MAXCOORD*(MAXCOORD-1))/2+1];  /* coords and 2-vector components */
; 1832 :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	ecx, DWORD PTR _web+236
	fldz
	push	ebx
	fst	QWORD PTR _value$[ebp]
	push	esi
	mov	esi, DWORD PTR _f_info$[ebp]
	mov	eax, DWORD PTR [esi]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	or	eax, ecx

; 1842 :       { z[j] = sign*(s[0][k]*s[1][kk] - s[0][kk]*s[1][k]);

	mov	DWORD PTR _f_info$GSCopy$[ebp], esi
	je	SHORT $LN15@facet_gene@6

; 1830 :   REAL value = 0.0;
; 1831 :   REAL z[MAXCOORD+(MAXCOORD*(MAXCOORD-1))/2+1];  /* coords and 2-vector components */
; 1832 :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN79@facet_gene@6
$LN15@facet_gene@6:
	fld1
$LN79@facet_gene@6:

; 1833 :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [esi+8]
	fst	QWORD PTR _sign$[ebp]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list

; 1834 : 
; 1835 :   facet_general_flag = 1;
; 1836 : 
; 1837 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	xor	ebx, ebx
	mov	DWORD PTR _mi$[ebp], eax
	mov	DWORD PTR _facet_general_flag, 1
	mov	DWORD PTR _m$[ebp], ebx
	cmp	DWORD PTR _gauss2D_num, ecx
	jle	$LN43@facet_gene@6
	fstp	ST(1)
	push	edi
	jmp	SHORT $LN12@facet_gene@6
$LL77@facet_gene@6:
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	fstp	ST(0)
	fld	QWORD PTR _sign$[ebp]
$LN12@facet_gene@6:

; 1838 :   { REAL **s = f_info->sides[m];
; 1839 :     for ( k = 0 ; k < SDIM ; k++ ) z[k] = f_info->gauss_pt[m][k]; 

	mov	edi, DWORD PTR _web+616
	mov	edx, DWORD PTR [esi+1276]
	mov	edx, DWORD PTR [edx+ebx*4]
	xor	eax, eax
	cmp	edi, 4
	jl	$LC26@facet_gene@6

; 1834 : 
; 1835 :   facet_general_flag = 1;
; 1836 : 
; 1837 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	mov	ecx, DWORD PTR [esi+1268]
	lea	esi, DWORD PTR [ecx+ebx*4]

; 1838 :   { REAL **s = f_info->sides[m];
; 1839 :     for ( k = 0 ; k < SDIM ; k++ ) z[k] = f_info->gauss_pt[m][k]; 

	lea	ebx, DWORD PTR _z$[ebp+8]
	mov	ecx, 16					; 00000010H
	sub	ecx, ebx
	mov	DWORD PTR tv862[ebp], ecx
	mov	ecx, 24					; 00000018H
	sub	ecx, ebx
	mov	DWORD PTR tv542[ebp], esi
	mov	DWORD PTR tv869[ebp], ecx
	jmp	SHORT $LN27@facet_gene@6
$LN35@facet_gene@6:
	mov	esi, DWORD PTR tv542[ebp]
$LN27@facet_gene@6:
	mov	ebx, DWORD PTR [esi]
	fld	QWORD PTR [ebx+eax*8]
	lea	ecx, DWORD PTR _z$[ebp+eax*8+8]
	fstp	QWORD PTR [ecx-8]
	mov	ebx, DWORD PTR [esi]
	fld	QWORD PTR [ebx+eax*8+8]
	mov	ebx, DWORD PTR tv862[ebp]
	fstp	QWORD PTR [ecx]
	mov	esi, DWORD PTR [esi]
	add	ebx, ecx
	fld	QWORD PTR [ebx+esi]
	mov	esi, DWORD PTR tv869[ebp]
	mov	ebx, DWORD PTR tv542[ebp]
	fstp	QWORD PTR [ecx+8]
	mov	ebx, DWORD PTR [ebx]
	add	esi, ecx
	fld	QWORD PTR [esi+ebx]
	add	eax, 4
	fstp	QWORD PTR [ecx+16]
	lea	ecx, DWORD PTR [edi-3]
	cmp	eax, ecx
	jl	SHORT $LN35@facet_gene@6
$LC26@facet_gene@6:

; 1834 : 
; 1835 :   facet_general_flag = 1;
; 1836 : 
; 1837 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	mov	ebx, DWORD PTR _m$[ebp]

; 1838 :   { REAL **s = f_info->sides[m];
; 1839 :     for ( k = 0 ; k < SDIM ; k++ ) z[k] = f_info->gauss_pt[m][k]; 

	cmp	eax, edi
	jge	SHORT $LN25@facet_gene@6

; 1834 : 
; 1835 :   facet_general_flag = 1;
; 1836 : 
; 1837 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [ecx+1268]
	lea	ecx, DWORD PTR [ecx+ebx*4]
$LC9@facet_gene@6:

; 1838 :   { REAL **s = f_info->sides[m];
; 1839 :     for ( k = 0 ; k < SDIM ; k++ ) z[k] = f_info->gauss_pt[m][k]; 

	mov	esi, DWORD PTR [ecx]
	fld	QWORD PTR [esi+eax*8]
	inc	eax
	fstp	QWORD PTR _z$[ebp+eax*8-8]
	cmp	eax, edi
	jl	SHORT $LC9@facet_gene@6
$LN25@facet_gene@6:

; 1840 :     for ( k = 0, j = SDIM ; k < SDIM ; k++ )

	mov	esi, edi
	test	edi, edi
	jle	$LN59@facet_gene@6
	mov	ecx, 1
	lea	ebx, DWORD PTR [edi-1]
	xor	eax, eax
	mov	DWORD PTR tv1402[ebp], ecx
	mov	DWORD PTR tv1492[ebp], ebx
	mov	DWORD PTR tv1341[ebp], edi
$LN37@facet_gene@6:
	cmp	ecx, DWORD PTR _web+616
	jge	$LN33@facet_gene@6

; 1841 :       for ( kk = k+1 ; kk < SDIM ; kk++, j++ )

	cmp	DWORD PTR tv1492[ebp], 4
	jl	$LN32@facet_gene@6
$LN30@facet_gene@6:

; 1842 :       { z[j] = sign*(s[0][k]*s[1][kk] - s[0][kk]*s[1][k]);

	mov	edi, DWORD PTR [edx+4]
	fld	QWORD PTR [edi+ecx*8]
	mov	ebx, DWORD PTR [edx]
	fmul	QWORD PTR [ebx+eax]
	add	ecx, 4
	fld	QWORD PTR [ebx+ecx*8-32]
	add	esi, 4
	fmul	QWORD PTR [edi+eax]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _z$[ebp+esi*8-32]
	mov	edi, DWORD PTR [edx+4]
	fld	QWORD PTR [edi+ecx*8-24]
	mov	ebx, DWORD PTR [edx]
	fmul	QWORD PTR [ebx+eax]
	fld	QWORD PTR [ebx+ecx*8-24]
	fmul	QWORD PTR [edi+eax]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _z$[ebp+esi*8-24]
	mov	ebx, DWORD PTR [edx]
	mov	edi, DWORD PTR [edx+4]
	fld	QWORD PTR [ebx+eax]
	fmul	QWORD PTR [edi+ecx*8-16]
	fld	QWORD PTR [edi+eax]
	fmul	QWORD PTR [ebx+ecx*8-16]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _z$[ebp+esi*8-16]
	mov	edi, DWORD PTR [edx+4]
	mov	ebx, DWORD PTR [edx]
	fld	QWORD PTR [edi+ecx*8-8]
	fmul	QWORD PTR [ebx+eax]
	fld	QWORD PTR [ebx+ecx*8-8]
	fmul	QWORD PTR [edi+eax]
	mov	edi, DWORD PTR _web+616
	lea	ebx, DWORD PTR [edi-3]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _z$[ebp+esi*8-8]
	cmp	ecx, ebx
	jl	$LN30@facet_gene@6
	jmp	SHORT $LC29@facet_gene@6
$LN32@facet_gene@6:
	mov	edi, DWORD PTR _web+616
$LC29@facet_gene@6:

; 1841 :       for ( kk = k+1 ; kk < SDIM ; kk++, j++ )

	cmp	ecx, edi
	jge	SHORT $LN5@facet_gene@6
$LC3@facet_gene@6:

; 1842 :       { z[j] = sign*(s[0][k]*s[1][kk] - s[0][kk]*s[1][k]);

	mov	ebx, DWORD PTR [edx+4]
	fld	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR [edx]
	fmul	QWORD PTR [ebx+eax]
	inc	ecx
	fld	QWORD PTR [ebx+ecx*8-8]
	mov	ebx, DWORD PTR [edx+4]
	fmul	QWORD PTR [ebx+eax]
	inc	esi
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _z$[ebp+esi*8-8]
	cmp	ecx, edi
	jl	SHORT $LC3@facet_gene@6

; 1841 :       for ( kk = k+1 ; kk < SDIM ; kk++, j++ )

	jmp	SHORT $LN5@facet_gene@6
$LN33@facet_gene@6:
	mov	edi, DWORD PTR _web+616
$LN5@facet_gene@6:

; 1840 :     for ( k = 0, j = SDIM ; k < SDIM ; k++ )

	mov	ecx, DWORD PTR tv1402[ebp]
	dec	DWORD PTR tv1492[ebp]
	inc	ecx
	add	eax, 8
	dec	DWORD PTR tv1341[ebp]
	mov	DWORD PTR tv1402[ebp], ecx
	jne	$LN37@facet_gene@6
	mov	ebx, DWORD PTR _m$[ebp]
$LN59@facet_gene@6:

; 1843 :       } 
; 1844 :     z[SDIM+(SDIM*(SDIM-1))/2] = m; /* kludge for attr interpolation. */

	lea	eax, DWORD PTR [edi-1]
	fstp	ST(0)
	fild	DWORD PTR _m$[ebp]
	imul	eax, edi
	cdq
	sub	eax, edx

; 1845 :     value += gauss2Dwt[m]*eval(mi->expr[0],z,f_info->id,NULL);

	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	sar	eax, 1
	add	eax, edi
	push	0
	lea	ecx, DWORD PTR _z$[ebp]
	fstp	QWORD PTR _z$[ebp+eax*8]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _mi$[ebp]
	push	eax
	mov	eax, DWORD PTR [edx+232]
	push	ecx
	push	eax
	call	_eval
	mov	ecx, DWORD PTR _gauss2Dwt
	inc	ebx
	fmul	QWORD PTR [ecx+ebx*8-8]
	add	esp, 16					; 00000010H
	mov	DWORD PTR _m$[ebp], ebx
	fadd	QWORD PTR _value$[ebp]
	fst	QWORD PTR _value$[ebp]
	cmp	ebx, DWORD PTR _gauss2D_num
	jl	$LL77@facet_gene@6
	pop	edi

; 1834 : 
; 1835 :   facet_general_flag = 1;
; 1836 : 
; 1837 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	jmp	SHORT $LN10@facet_gene@6
$LN43@facet_gene@6:
	fstp	ST(0)
$LN10@facet_gene@6:

; 1846 :   }
; 1847 :   facet_general_flag = 0;
; 1848 :   return value/web.simplex_factorial;  /* triangle factor */
; 1849 : } // end facet_general_hi_d_value()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fdiv	QWORD PTR _web+792
	pop	esi
	xor	ecx, ebp
	mov	DWORD PTR _facet_general_flag, 0
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_general_hi_d_value ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_facet_general_hi_d_grad
; Function compile flags: /Ogtp
;	COMDAT _facet_general_hi_d_grad
_TEXT	SEGMENT
_val$ = -424						; size = 8
_value$ = -416						; size = 8
_coeff$90293 = -408					; size = 8
tv1786 = -404						; size = 4
_sign$ = -400						; size = 8
_gpd$90292 = -392					; size = 4
tv875 = -388						; size = 4
tv881 = -384						; size = 4
_mi$ = -380						; size = 4
tv1902 = -376						; size = 4
tv1081 = -376						; size = 4
tv1088 = -372						; size = 4
_j$ = -372						; size = 4
tv756 = -368						; size = 4
tv648 = -368						; size = 4
tv1525 = -364						; size = 4
tv888 = -364						; size = 4
_m$ = -360						; size = 4
_f_info$GSCopy$ = -356					; size = 4
tv1615 = -352						; size = 4
tv710 = -352						; size = 4
_n$ = -352						; size = 4
_derivs$ = -348						; size = 168
_z$ = -180						; size = 176
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_facet_general_hi_d_grad PROC				; COMDAT

; 1860 : { int m,j,k,kk,n;

	push	ebp
	mov	ebp, esp
	sub	esp, 424				; 000001a8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1861 :   REAL value = 0.0;
; 1862 :   REAL val;
; 1863 :   REAL derivs[MAXCOORD+(MAXCOORD*(MAXCOORD-1))/2];
; 1864 :   REAL z[MAXCOORD+(MAXCOORD*(MAXCOORD-1))/2+1];  /*  pointers to coord and tangent */
; 1865 :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	ecx, DWORD PTR _web+236
	fldz
	push	ebx
	fst	QWORD PTR _value$[ebp]
	push	esi
	mov	esi, DWORD PTR _f_info$[ebp]
	mov	eax, DWORD PTR [esi]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	or	eax, ecx

; 1888 :          for ( kk = k+1 ; kk < SDIM ; kk++,j++ )

	mov	DWORD PTR _f_info$GSCopy$[ebp], esi
	je	SHORT $LN27@facet_gene@7

; 1861 :   REAL value = 0.0;
; 1862 :   REAL val;
; 1863 :   REAL derivs[MAXCOORD+(MAXCOORD*(MAXCOORD-1))/2];
; 1864 :   REAL z[MAXCOORD+(MAXCOORD*(MAXCOORD-1))/2+1];  /*  pointers to coord and tangent */
; 1865 :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN126@facet_gene@7
$LN27@facet_gene@7:
	fld1
$LN126@facet_gene@7:

; 1866 :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [esi+8]
	fst	QWORD PTR _sign$[ebp]
	cdq
	mov	ebx, eax
	xor	ebx, edx
	sub	ebx, edx
	imul	ebx, 2928				; 00000b70H
	add	ebx, DWORD PTR _meth_inst_list

; 1867 : 
; 1868 :   facet_general_flag = 1;

	mov	DWORD PTR _facet_general_flag, 1
	mov	DWORD PTR _mi$[ebp], ebx

; 1869 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	mov	DWORD PTR _m$[ebp], ecx
	cmp	DWORD PTR _gauss2D_num, ecx
	jle	$LN66@facet_gene@7
	push	edi
	fstp	ST(1)
	mov	edi, DWORD PTR _web+616
	jmp	SHORT $LN24@facet_gene@7
	npad	9
$LL124@facet_gene@7:
	mov	ebx, DWORD PTR _mi$[ebp]
	fstp	ST(0)
	mov	ecx, DWORD PTR _m$[ebp]
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
$LN24@facet_gene@7:

; 1870 :   { REAL **gpd = gpolypartial[m];

	mov	edx, DWORD PTR _gpolypartial
	mov	eax, DWORD PTR [edx+ecx*4]

; 1871 :     REAL coeff = gauss2Dwt[m]/web.simplex_factorial; 

	mov	edx, DWORD PTR _gauss2Dwt
	fld	QWORD PTR [edx+ecx*8]
	mov	DWORD PTR _gpd$90292[ebp], eax
	fdiv	QWORD PTR _web+792

; 1872 :     REAL **s = f_info->sides[m]; 

	mov	eax, DWORD PTR [esi+1276]
	mov	esi, DWORD PTR [eax+ecx*4]

; 1873 : 
; 1874 :     for ( k = 0 ; k < SDIM ; k++ ) z[k] = f_info->gauss_pt[m][k]; 

	xor	eax, eax
	fstp	QWORD PTR _coeff$90293[ebp]
	cmp	edi, 4
	jl	$LC46@facet_gene@7

; 1869 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [edx+1268]
	lea	edx, DWORD PTR [edx+ecx*4]

; 1873 : 
; 1874 :     for ( k = 0 ; k < SDIM ; k++ ) z[k] = f_info->gauss_pt[m][k]; 

	lea	ebx, DWORD PTR _z$[ebp+8]
	mov	ecx, 16					; 00000010H
	sub	ecx, ebx
	mov	DWORD PTR tv1081[ebp], ecx
	mov	ecx, 24					; 00000018H
	sub	ecx, ebx
	mov	DWORD PTR tv710[ebp], edx
	mov	DWORD PTR tv1088[ebp], ecx
	jmp	SHORT $LN47@facet_gene@7
$LN58@facet_gene@7:
	mov	edx, DWORD PTR tv710[ebp]
$LN47@facet_gene@7:
	mov	ebx, DWORD PTR [edx]
	fld	QWORD PTR [ebx+eax*8]
	lea	ecx, DWORD PTR _z$[ebp+eax*8+8]
	fstp	QWORD PTR [ecx-8]
	mov	ebx, DWORD PTR [edx]
	fld	QWORD PTR [ebx+eax*8+8]
	mov	ebx, DWORD PTR tv1081[ebp]
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR [edx]
	add	edx, ecx
	fld	QWORD PTR [edx+ebx]
	mov	edx, DWORD PTR tv710[ebp]
	mov	ebx, DWORD PTR tv1088[ebp]
	fstp	QWORD PTR [ecx+8]
	mov	edx, DWORD PTR [edx]
	add	edx, ecx
	fld	QWORD PTR [edx+ebx]
	add	eax, 4
	fstp	QWORD PTR [ecx+16]
	lea	ecx, DWORD PTR [edi-3]
	cmp	eax, ecx
	jl	SHORT $LN58@facet_gene@7
	mov	ecx, DWORD PTR _m$[ebp]
	mov	ebx, DWORD PTR _mi$[ebp]
$LC46@facet_gene@7:
	cmp	eax, edi
	jge	SHORT $LN45@facet_gene@7

; 1869 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [edx+1268]
	lea	ecx, DWORD PTR [edx+ecx*4]
$LC21@facet_gene@7:

; 1873 : 
; 1874 :     for ( k = 0 ; k < SDIM ; k++ ) z[k] = f_info->gauss_pt[m][k]; 

	mov	edx, DWORD PTR [ecx]
	fld	QWORD PTR [edx+eax*8]
	inc	eax
	fstp	QWORD PTR _z$[ebp+eax*8-8]
	cmp	eax, edi
	jl	SHORT $LC21@facet_gene@7
$LN45@facet_gene@7:

; 1875 :     for ( k = 0, j = SDIM ; k < SDIM ; k++ )

	mov	edx, edi
	test	edi, edi
	jle	$LN81@facet_gene@7
	mov	ecx, 1
	lea	ebx, DWORD PTR [edi-1]
	xor	eax, eax
	mov	DWORD PTR tv1525[ebp], ecx
	mov	DWORD PTR tv1615[ebp], ebx
	mov	DWORD PTR tv648[ebp], edi
$LN59@facet_gene@7:

; 1876 :       for ( kk = k+1 ; kk < SDIM ; kk++, j++ )

	mov	edi, DWORD PTR _web+616
	cmp	ecx, edi
	jge	$LN17@facet_gene@7
	cmp	DWORD PTR tv1615[ebp], 4
	jl	$LC49@facet_gene@7
$LN50@facet_gene@7:

; 1877 :       { z[j] = sign*(s[0][k]*s[1][kk] - s[0][kk]*s[1][k]);

	mov	ebx, DWORD PTR [esi]
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR [esi+4]
	fmul	QWORD PTR [ebx+ecx*8]
	add	ecx, 4
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR [esi]
	fmul	QWORD PTR [ebx+ecx*8-32]
	add	edx, 4
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _z$[ebp+edx*8-32]
	mov	ebx, DWORD PTR [esi]
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR [esi+4]
	fmul	QWORD PTR [ebx+ecx*8-24]
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR [esi]
	fmul	QWORD PTR [ebx+ecx*8-24]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _z$[ebp+edx*8-24]
	mov	ebx, DWORD PTR [esi]
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR [esi+4]
	fmul	QWORD PTR [ebx+ecx*8-16]
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR [esi]
	fmul	QWORD PTR [ebx+ecx*8-16]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _z$[ebp+edx*8-16]
	mov	ebx, DWORD PTR [esi]
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR [esi+4]
	fmul	QWORD PTR [ebx+ecx*8-8]
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR [esi]
	fmul	QWORD PTR [ebx+ecx*8-8]
	lea	ebx, DWORD PTR [edi-3]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _z$[ebp+edx*8-8]
	cmp	ecx, ebx
	jl	$LN50@facet_gene@7
$LC49@facet_gene@7:

; 1876 :       for ( kk = k+1 ; kk < SDIM ; kk++, j++ )

	cmp	ecx, edi
	jge	SHORT $LN17@facet_gene@7
$LC15@facet_gene@7:

; 1877 :       { z[j] = sign*(s[0][k]*s[1][kk] - s[0][kk]*s[1][k]);

	mov	ebx, DWORD PTR [esi]
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR [esi+4]
	fmul	QWORD PTR [ebx+ecx*8]
	inc	ecx
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR [esi]
	fmul	QWORD PTR [ebx+ecx*8-8]
	inc	edx
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _z$[ebp+edx*8-8]
	cmp	ecx, edi
	jl	SHORT $LC15@facet_gene@7
$LN17@facet_gene@7:

; 1875 :     for ( k = 0, j = SDIM ; k < SDIM ; k++ )

	mov	ecx, DWORD PTR tv1525[ebp]
	dec	DWORD PTR tv1615[ebp]
	inc	ecx
	add	eax, 8
	dec	DWORD PTR tv648[ebp]
	mov	DWORD PTR tv1525[ebp], ecx
	jne	$LN59@facet_gene@7
	mov	ebx, DWORD PTR _mi$[ebp]
$LN81@facet_gene@7:

; 1878 :       } 
; 1879 :     z[SDIM+(SDIM*(SDIM-1))/2] = m; /* kludge for attr interpolation. */

	lea	eax, DWORD PTR [edi-1]
	fstp	ST(0)
	imul	eax, edi
	fild	DWORD PTR _m$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	edi, eax

; 1880 : 
; 1881 :      eval_all(mi->expr[0],z,SDIM+(SDIM*(SDIM-1))/2,&val,derivs,f_info->id);

	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	fstp	QWORD PTR _z$[ebp+edi*8]
	lea	edx, DWORD PTR _derivs$[ebp]
	push	edx
	mov	edx, DWORD PTR [ebx+232]
	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	push	edi
	lea	ecx, DWORD PTR _z$[ebp]
	push	ecx
	push	edx
	call	_eval_all

; 1882 :      value += coeff*val;
; 1883 :      
; 1884 :      for ( n = 0 ; n < ctrl_num ; n++ )

	mov	edi, DWORD PTR _web+616
	fld	QWORD PTR _val$[ebp]
	xor	ebx, ebx
	fld	QWORD PTR _coeff$90293[ebp]
	add	esp, 24					; 00000018H
	fmul	ST(1), ST(0)
	mov	DWORD PTR _n$[ebp], ebx
	fxch	ST(1)
	fadd	QWORD PTR _value$[ebp]
	fst	QWORD PTR _value$[ebp]
	cmp	DWORD PTR _ctrl_num, ebx
	jle	$LN101@facet_gene@7
	fld	QWORD PTR _sign$[ebp]
$LN60@facet_gene@7:

; 1885 :      { for ( k = 0 ; k < SDIM ; k++ )

	xor	eax, eax
	test	edi, edi
	jle	SHORT $LN7@facet_gene@7

; 1882 :      value += coeff*val;
; 1883 :      
; 1884 :      for ( n = 0 ; n < ctrl_num ; n++ )

	mov	edx, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _gpoly
	mov	ecx, DWORD PTR [ecx+edx*4]
	lea	edx, DWORD PTR [ecx+ebx*8]
$LN9@facet_gene@7:

; 1886 :          f_info->grad[n][k] += coeff*gpoly[m][n]*derivs[k];

	fld	QWORD PTR [edx]
	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [ecx+1336]
	fmul	ST(0), ST(3)
	mov	ecx, DWORD PTR [ecx+ebx*4]
	lea	ecx, DWORD PTR [ecx+eax*8]
	fmul	QWORD PTR _derivs$[ebp+eax*8]
	inc	eax
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	edi, DWORD PTR _web+616
	cmp	eax, edi
	jl	SHORT $LN9@facet_gene@7
$LN7@facet_gene@7:

; 1887 :        for ( k = 0, j = SDIM ; k < SDIM ; k++ )

	mov	DWORD PTR _j$[ebp], edi
	test	edi, edi
	jle	$LN11@facet_gene@7
	mov	eax, 1
	xor	ecx, ecx
	mov	DWORD PTR tv1902[ebp], eax
$LN6@facet_gene@7:

; 1888 :          for ( kk = k+1 ; kk < SDIM ; kk++,j++ )

	cmp	eax, edi
	jge	$LN5@facet_gene@7

; 1882 :      value += coeff*val;
; 1883 :      
; 1884 :      for ( n = 0 ; n < ctrl_num ; n++ )

	mov	edx, DWORD PTR _gpd$90292[ebp]
	fld	ST(2)
	mov	edi, DWORD PTR _gpd$90292[ebp]
	fmul	ST(0), ST(1)
	mov	edi, DWORD PTR [edi]
	mov	edx, DWORD PTR [edx+4]
	lea	edi, DWORD PTR [edi+ebx*8]
	lea	edx, DWORD PTR [edx+ebx*8]
	mov	DWORD PTR tv881[ebp], edi

; 1888 :          for ( kk = k+1 ; kk < SDIM ; kk++,j++ )

	mov	edi, DWORD PTR [esi+4]
	mov	DWORD PTR tv888[ebp], edx
	mov	edx, DWORD PTR [esi]
	sub	edi, edx
	mov	DWORD PTR tv1786[ebp], edi
	jmp	SHORT $LN3@facet_gene@7
$LN56@facet_gene@7:
	mov	edx, DWORD PTR [esi]
$LN3@facet_gene@7:

; 1889 :            { 
; 1890 :              f_info->grad[n][k] += coeff*sign*derivs[j]*(s[1][kk]*gpd[0][n]-s[0][kk]*gpd[1][n]);

	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edi, DWORD PTR [edi+1336]
	mov	edi, DWORD PTR [edi+ebx*4]
	mov	ebx, DWORD PTR tv1786[ebp]
	lea	edx, DWORD PTR [edx+eax*8]
	fld	QWORD PTR [edx+ebx]
	mov	ebx, DWORD PTR tv881[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv888[ebp]
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR _n$[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR _j$[ebp]
	inc	edx
	mov	DWORD PTR _j$[ebp], edx
	fsubp	ST(1), ST(0)
	fld	ST(1)
	fmul	QWORD PTR _derivs$[ebp+edx*8-8]
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR [edi+ecx]
	fstp	QWORD PTR [edi+ecx]
	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edi, DWORD PTR [edi+1336]
	mov	edi, DWORD PTR [edi+ebx*4]

; 1891 :              f_info->grad[n][kk] += coeff*sign*derivs[j]*(s[0][k]*gpd[1][n]-s[1][k]*gpd[0][n]);

	mov	ebx, DWORD PTR [esi]
	fld	QWORD PTR [ecx+ebx]
	mov	ebx, DWORD PTR tv888[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [esi+4]
	fld	QWORD PTR [ecx+ebx]
	mov	ebx, DWORD PTR tv881[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR _n$[ebp]
	lea	edi, DWORD PTR [edi+eax*8]
	inc	eax
	fsubp	ST(1), ST(0)
	fld	ST(1)
	fmul	QWORD PTR _derivs$[ebp+edx*8-8]
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR [edi]
	fstp	QWORD PTR [edi]
	mov	edi, DWORD PTR _web+616
	cmp	eax, edi
	jl	$LN56@facet_gene@7

; 1888 :          for ( kk = k+1 ; kk < SDIM ; kk++,j++ )

	mov	eax, DWORD PTR tv1902[ebp]
	fstp	ST(0)
$LN5@facet_gene@7:

; 1887 :        for ( k = 0, j = SDIM ; k < SDIM ; k++ )

	inc	eax
	lea	edx, DWORD PTR [eax-1]
	add	ecx, 8
	mov	DWORD PTR tv1902[ebp], eax
	cmp	edx, edi
	jl	$LN6@facet_gene@7
$LN11@facet_gene@7:

; 1882 :      value += coeff*val;
; 1883 :      
; 1884 :      for ( n = 0 ; n < ctrl_num ; n++ )

	inc	ebx
	mov	DWORD PTR _n$[ebp], ebx
	cmp	ebx, DWORD PTR _ctrl_num
	jl	$LN60@facet_gene@7
	fstp	ST(2)
	jmp	SHORT $LN23@facet_gene@7
$LN101@facet_gene@7:
	fstp	ST(1)
	fld	QWORD PTR _sign$[ebp]
	fxch	ST(1)
$LN23@facet_gene@7:

; 1869 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	mov	eax, DWORD PTR _m$[ebp]
	inc	eax
	mov	DWORD PTR _m$[ebp], eax
	cmp	eax, DWORD PTR _gauss2D_num
	jl	$LL124@facet_gene@7
	pop	edi
	fstp	ST(1)
	pop	esi

; 1892 :          }
; 1893 :       }
; 1894 :   }
; 1895 :   facet_general_flag = 0;

	mov	DWORD PTR _facet_general_flag, 0
	pop	ebx

; 1896 :   return value; 
; 1897 : } // end facet_general_hi_d_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN66@facet_gene@7:

; 1892 :          }
; 1893 :       }
; 1894 :   }
; 1895 :   facet_general_flag = 0;

	mov	DWORD PTR _facet_general_flag, ecx
	fstp	ST(0)

; 1896 :   return value; 
; 1897 : } // end facet_general_hi_d_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_general_hi_d_grad ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_facet_general_hi_d_hess
; Function compile flags: /Ogtp
;	COMDAT _facet_general_hi_d_hess
_TEXT	SEGMENT
_secondqXvS$ = -4124					; size = 84
_val$ = -4040						; size = 8
_mi$ = -4032						; size = 4
_sign$ = -4028						; size = 8
_value$ = -4020						; size = 8
_coeff$90345 = -4012					; size = 8
tv13369 = -4008						; size = 4
tv13361 = -4008						; size = 4
tv4129 = -4008						; size = 4
tv19686 = -4004						; size = 4
tv14023 = -4004						; size = 4
tv18708 = -4000						; size = 4
tv13031 = -4000						; size = 4
_m$ = -3996						; size = 4
tv19765 = -3992						; size = 4
tv13033 = -3992						; size = 4
_I$ = -3988						; size = 4
_f_info$GSCopy$ = -3984					; size = 4
tv3908 = -3980						; size = 4
_second$ = -3976					; size = 4
tv20185 = -3972						; size = 4
tv8448 = -3968						; size = 4
tv8315 = -3968						; size = 4
tv5292 = -3968						; size = 4
tv4619 = -3968						; size = 4
tv3719 = -3968						; size = 4
tv18713 = -3964						; size = 4
tv13762 = -3964						; size = 4
tv13025 = -3964						; size = 4
_gpd$90344 = -3960					; size = 4
tv8287 = -3956						; size = 4
tv20400 = -3952						; size = 4
tv5063 = -3952						; size = 4
tv3864 = -3952						; size = 4
tv3686 = -3952						; size = 4
_s$90346 = -3948					; size = 4
tv5344 = -3944						; size = 4
tv5153 = -3944						; size = 4
tv3829 = -3944						; size = 4
tv3919 = -3940						; size = 4
_n$ = -3936						; size = 4
tv3914 = -3932						; size = 4
tv19449 = -3928						; size = 4
tv19121 = -3928						; size = 4
tv18115 = -3928						; size = 4
tv14454 = -3928						; size = 4
tv4626 = -3928						; size = 4
tv3851 = -3928						; size = 4
_k$ = -3924						; size = 4
tv18719 = -3920						; size = 4
tv13766 = -3920						; size = 4
tv13020 = -3920						; size = 4
tv12395 = -3920						; size = 4
_j$ = -3920						; size = 4
tv13242 = -3916						; size = 4
tv9136 = -3916						; size = 4
tv7965 = -3916						; size = 4
tv4208 = -3916						; size = 4
tv3732 = -3912						; size = 4
tv19453 = -3908						; size = 4
tv18721 = -3908						; size = 4
tv18038 = -3908						; size = 4
tv14986 = -3908						; size = 4
tv14147 = -3908						; size = 4
tv8657 = -3908						; size = 4
tv3857 = -3908						; size = 4
tv2933 = -3908						; size = 4
tv19786 = -3904						; size = 4
tv8192 = -3904						; size = 4
tv5781 = -3904						; size = 4
tv19690 = -3900						; size = 4
tv12794 = -3900						; size = 4
tv9144 = -3900						; size = 4
tv7970 = -3900						; size = 4
tv5651 = -3900						; size = 4
tv3930 = -3896						; size = 4
tv3856 = -3896						; size = 4
tv3929 = -3892						; size = 4
tv3924 = -3892						; size = 4
tv18482 = -3888						; size = 4
tv14156 = -3888						; size = 4
tv7710 = -3888						; size = 4
_J$ = -3888						; size = 4
tv18930 = -3884						; size = 4
tv14824 = -3884						; size = 4
tv14145 = -3884						; size = 4
tv8655 = -3884						; size = 4
tv8186 = -3884						; size = 4
tv7436 = -3884						; size = 4
tv5649 = -3884						; size = 4
tv18924 = -3880						; size = 4
tv14832 = -3880						; size = 4
tv13236 = -3880						; size = 4
tv9298 = -3880						; size = 4
tv7975 = -3880						; size = 4
tv7361 = -3880						; size = 4
tv5745 = -3880						; size = 4
tv4024 = -3880						; size = 4
_secondxJ$ = -3876					; size = 3528
_derivs$ = -348						; size = 168
_z$ = -180						; size = 176
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_facet_general_hi_d_hess PROC				; COMDAT

; 1908 : { int m,j,k,kk,J,n,K,I,N,i;

	push	ebp
	mov	ebp, esp
	mov	eax, 4124				; 0000101cH
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1909 :   REAL value = 0.0;

	fldz
	push	ebx
	push	esi
	fstp	QWORD PTR _value$[ebp]
	mov	esi, DWORD PTR _f_info$[ebp]

; 1910 :   REAL val;
; 1911 :   REAL derivs[MAXCOORD+(MAXCOORD*(MAXCOORD-1))/2];
; 1912 :   REAL z[MAXCOORD+(MAXCOORD*(MAXCOORD-1))/2+1];  /*  pointers to coord and tangent */
; 1913 :   MAT2D(second,MAXCOORD+(MAXCOORD*(MAXCOORD-1))/2,MAXCOORD+(MAXCOORD*(MAXCOORD-1))/2); /* second derivatives */

	push	21					; 00000015H
	push	21					; 00000015H
	lea	eax, DWORD PTR _secondxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _secondqXvS$[ebp]
	push	ecx
	mov	DWORD PTR _f_info$GSCopy$[ebp], esi
	call	_mat2d_setup

; 1914 :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR _second$[ebp], eax
	mov	eax, DWORD PTR _web+236
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	add	esp, 16					; 00000010H
	or	eax, ecx
	je	SHORT $LN65@facet_gene@8
	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN294@facet_gene@8
$LN65@facet_gene@8:
	fld1
$LN294@facet_gene@8:

; 1915 :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [esi+8]
	fst	QWORD PTR _sign$[ebp]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list

; 1916 : 
; 1917 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	xor	ebx, ebx
	mov	DWORD PTR _mi$[ebp], eax
	mov	DWORD PTR _m$[ebp], ebx
	cmp	DWORD PTR _gauss2D_num, ecx
	jle	$LN151@facet_gene@8
	push	edi
	mov	edi, DWORD PTR _web+616
	jmp	SHORT $LN62@facet_gene@8
$LN291@facet_gene@8:
	fstp	ST(0)
$LN62@facet_gene@8:

; 1918 :   { REAL **gpd = gpolypartial[m];
; 1919 :     REAL coeff = gauss2Dwt[m]/web.simplex_factorial; 

	mov	eax, DWORD PTR _gauss2Dwt
	fld	QWORD PTR [eax+ebx*8]
	mov	ecx, DWORD PTR _gpolypartial
	fdiv	QWORD PTR _web+792
	mov	edx, DWORD PTR [ecx+ebx*4]

; 1920 :     REAL **s = f_info->sides[m]; 

	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	DWORD PTR _gpd$90344[ebp], edx
	mov	edx, DWORD PTR [ecx+1276]
	mov	edx, DWORD PTR [edx+ebx*4]

; 1921 : 
; 1922 :     for ( k = 0 ; k < SDIM ; k++ ) z[k] = f_info->gauss_pt[m][k]; 

	xor	eax, eax
	mov	DWORD PTR _s$90346[ebp], edx
	fstp	QWORD PTR _coeff$90345[ebp]
	cmp	edi, 4
	jl	$LN148@facet_gene@8
	mov	ecx, DWORD PTR [ecx+1268]
	lea	esi, DWORD PTR [ecx+ebx*4]
	lea	ebx, DWORD PTR _z$[ebp+8]
	mov	ecx, 16					; 00000010H
	sub	ecx, ebx
	mov	DWORD PTR tv4619[ebp], ecx
	mov	ecx, 24					; 00000018H
	sub	ecx, ebx
	mov	DWORD PTR tv3686[ebp], esi
	mov	DWORD PTR tv4626[ebp], ecx
	jmp	SHORT $LN109@facet_gene@8
$LN147@facet_gene@8:
	mov	esi, DWORD PTR tv3686[ebp]
$LN109@facet_gene@8:
	mov	ebx, DWORD PTR [esi]
	fld	QWORD PTR [ebx+eax*8]
	lea	ecx, DWORD PTR _z$[ebp+eax*8+8]
	fstp	QWORD PTR [ecx-8]
	mov	ebx, DWORD PTR [esi]
	fld	QWORD PTR [ebx+eax*8+8]
	mov	ebx, DWORD PTR tv4619[ebp]
	fstp	QWORD PTR [ecx]
	mov	esi, DWORD PTR [esi]
	add	ebx, ecx
	fld	QWORD PTR [ebx+esi]
	mov	esi, DWORD PTR tv4626[ebp]
	mov	ebx, DWORD PTR tv3686[ebp]
	fstp	QWORD PTR [ecx+8]
	mov	ebx, DWORD PTR [ebx]
	add	esi, ecx
	fld	QWORD PTR [esi+ebx]
	add	eax, 4
	fstp	QWORD PTR [ecx+16]
	lea	ecx, DWORD PTR [edi-3]
	cmp	eax, ecx
	jl	SHORT $LN147@facet_gene@8
	mov	ebx, DWORD PTR _m$[ebp]
$LN148@facet_gene@8:
	cmp	eax, edi
	jge	SHORT $LN107@facet_gene@8
	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [ecx+1268]
	lea	ecx, DWORD PTR [ecx+ebx*4]
$LC59@facet_gene@8:
	mov	esi, DWORD PTR [ecx]
	fld	QWORD PTR [esi+eax*8]
	inc	eax
	fstp	QWORD PTR _z$[ebp+eax*8-8]
	cmp	eax, edi
	jl	SHORT $LC59@facet_gene@8
$LN107@facet_gene@8:

; 1923 :     for ( k = 0, j = SDIM ; k < SDIM ; k++ )

	mov	esi, edi
	test	edi, edi
	jle	$LN166@facet_gene@8
	mov	ecx, 1
	lea	ebx, DWORD PTR [edi-1]
	xor	eax, eax
	mov	DWORD PTR tv5063[ebp], ecx
	mov	DWORD PTR tv5153[ebp], ebx
	mov	DWORD PTR tv2933[ebp], edi
$LN56@facet_gene@8:
	cmp	ecx, edi
	jge	$LN55@facet_gene@8

; 1924 :       for ( kk = k+1 ; kk < SDIM ; kk++, j++ )

	cmp	DWORD PTR tv5153[ebp], 4
	jl	$LC111@facet_gene@8
$LN112@facet_gene@8:

; 1925 :       { z[j] = sign*(s[0][k]*s[1][kk] - s[0][kk]*s[1][k]);

	mov	ebx, DWORD PTR [edx+4]
	fld	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR [edx]
	fmul	QWORD PTR [eax+ebx]
	add	ecx, 4
	fld	QWORD PTR [ebx+ecx*8-32]
	mov	ebx, DWORD PTR [edx+4]
	fmul	QWORD PTR [eax+ebx]
	add	esi, 4
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _z$[ebp+esi*8-32]
	mov	ebx, DWORD PTR [edx+4]
	fld	QWORD PTR [ebx+ecx*8-24]
	mov	ebx, DWORD PTR [edx]
	fmul	QWORD PTR [eax+ebx]
	fld	QWORD PTR [ebx+ecx*8-24]
	mov	ebx, DWORD PTR [edx+4]
	fmul	QWORD PTR [eax+ebx]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _z$[ebp+esi*8-24]
	mov	ebx, DWORD PTR [edx]
	fld	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR [edx+4]
	fmul	QWORD PTR [ebx+ecx*8-16]
	fld	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR [edx]
	fmul	QWORD PTR [ebx+ecx*8-16]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _z$[ebp+esi*8-16]
	mov	ebx, DWORD PTR [edx]
	fld	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR [edx+4]
	fmul	QWORD PTR [ebx+ecx*8-8]
	fld	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR [edx]
	fmul	QWORD PTR [ebx+ecx*8-8]
	lea	ebx, DWORD PTR [edi-3]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _z$[ebp+esi*8-8]
	cmp	ecx, ebx
	jl	$LN112@facet_gene@8
$LC111@facet_gene@8:

; 1924 :       for ( kk = k+1 ; kk < SDIM ; kk++, j++ )

	cmp	ecx, edi
	jge	SHORT $LN55@facet_gene@8
$LC53@facet_gene@8:

; 1925 :       { z[j] = sign*(s[0][k]*s[1][kk] - s[0][kk]*s[1][k]);

	mov	ebx, DWORD PTR [edx+4]
	fld	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR [edx]
	fmul	QWORD PTR [eax+ebx]
	inc	ecx
	fld	QWORD PTR [ebx+ecx*8-8]
	mov	ebx, DWORD PTR [edx+4]
	fmul	QWORD PTR [eax+ebx]
	inc	esi
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _z$[ebp+esi*8-8]
	cmp	ecx, edi
	jl	SHORT $LC53@facet_gene@8
$LN55@facet_gene@8:

; 1923 :     for ( k = 0, j = SDIM ; k < SDIM ; k++ )

	mov	ecx, DWORD PTR tv5063[ebp]
	dec	DWORD PTR tv5153[ebp]
	inc	ecx
	add	eax, 8
	dec	DWORD PTR tv2933[ebp]
	mov	DWORD PTR tv5063[ebp], ecx
	jne	$LN56@facet_gene@8
	mov	ebx, DWORD PTR _m$[ebp]
$LN166@facet_gene@8:

; 1926 :       } 
; 1927 :     z[SDIM+(SDIM*(SDIM-1))/2] = m; /* kludge for attr interpolation. */
; 1928 : 
; 1929 :     eval_second(mi->expr[0],z,SDIM+(SDIM*(SDIM-1))/2,&val,derivs,second,f_info->id);

	mov	ecx, DWORD PTR _second$[ebp]
	fstp	ST(0)
	fild	DWORD PTR _m$[ebp]
	lea	eax, DWORD PTR [edi-1]
	imul	eax, edi
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	sar	eax, 1
	add	edi, eax
	mov	eax, DWORD PTR [edx]
	push	eax
	push	ecx
	fstp	QWORD PTR _z$[ebp+edi*8]
	lea	edx, DWORD PTR _derivs$[ebp]
	push	edx
	mov	edx, DWORD PTR _mi$[ebp]
	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	mov	eax, DWORD PTR [edx+232]
	push	edi
	lea	ecx, DWORD PTR _z$[ebp]
	push	ecx
	push	eax
	call	_eval_second

; 1930 :     value += coeff*val;
; 1931 :      
; 1932 :      for ( n = 0 ; n < ctrl_num ; n++ )

	mov	edx, DWORD PTR _ctrl_num
	fld	QWORD PTR _val$[ebp]
	mov	edi, DWORD PTR _web+616
	fld	QWORD PTR _coeff$90345[ebp]
	add	esp, 28					; 0000001cH
	fmul	ST(1), ST(0)
	mov	DWORD PTR _n$[ebp], 0
	fxch	ST(1)
	fadd	QWORD PTR _value$[ebp]
	fst	QWORD PTR _value$[ebp]
	test	edx, edx
	jle	$LN178@facet_gene@8
	fldz
	fld	QWORD PTR _sign$[ebp]
$LN50@facet_gene@8:

; 1933 :      {  
; 1934 : 
; 1935 :        for ( k = 0 ; k < SDIM ; k++ )

	mov	ebx, DWORD PTR _n$[ebp]
	xor	eax, eax
	test	edi, edi
	jle	SHORT $LN45@facet_gene@8
	mov	edx, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _gpoly
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	lea	edx, DWORD PTR [ecx+ebx*8]
$LN47@facet_gene@8:

; 1936 :          f_info->grad[n][k] += coeff*gpoly[m][n]*derivs[k];

	fld	QWORD PTR [edx]
	mov	ecx, DWORD PTR [esi+1336]
	mov	ecx, DWORD PTR [ecx+ebx*4]
	fmul	ST(0), ST(4)
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fmul	QWORD PTR _derivs$[ebp+eax*8-8]
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	edi, DWORD PTR _web+616
	cmp	eax, edi
	jl	SHORT $LN47@facet_gene@8

; 1933 :      {  
; 1934 : 
; 1935 :        for ( k = 0 ; k < SDIM ; k++ )

	mov	edx, DWORD PTR _ctrl_num
$LN45@facet_gene@8:

; 1937 :        for ( k = 0, j = SDIM ; k < SDIM ; k++ )

	mov	DWORD PTR _j$[ebp], edi
	test	edi, edi
	jle	$LN42@facet_gene@8
	xor	ecx, ecx
	mov	DWORD PTR tv5344[ebp], 1
$LN44@facet_gene@8:

; 1938 :          for ( kk = k+1 ; kk < SDIM ; kk++,j++ )

	mov	eax, DWORD PTR tv5344[ebp]
	cmp	eax, edi
	jge	$LN43@facet_gene@8
	mov	edi, DWORD PTR _gpd$90344[ebp]
	fld	ST(3)
	mov	edx, DWORD PTR [edi+4]
	fmul	ST(0), ST(1)
	mov	esi, DWORD PTR _s$90346[ebp]
	mov	edi, DWORD PTR [edi]
	lea	edx, DWORD PTR [edx+ebx*8]
	mov	DWORD PTR tv3864[ebp], edx
	mov	edx, DWORD PTR [esi]
	mov	esi, DWORD PTR [esi+4]
	mov	DWORD PTR tv3851[ebp], esi
	lea	edi, DWORD PTR [edi+ebx*8]
	sub	esi, edx
	mov	DWORD PTR tv3732[ebp], edx
	mov	DWORD PTR tv3857[ebp], edi
	mov	DWORD PTR tv5292[ebp], esi
$LN41@facet_gene@8:
	mov	edx, DWORD PTR tv3732[ebp]

; 1939 :          { 
; 1940 :              f_info->grad[n][k] += coeff*sign*derivs[j]*(s[1][kk]*gpd[0][n]-s[0][kk]*gpd[1][n]);

	mov	edi, DWORD PTR tv5292[ebp]
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	esi, DWORD PTR [esi+1336]
	mov	esi, DWORD PTR [esi+ebx*4]
	lea	edx, DWORD PTR [edx+eax*8]
	fld	QWORD PTR [edx+edi]
	mov	edi, DWORD PTR tv3857[ebp]
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR tv3864[ebp]
	fld	QWORD PTR [edi]
	mov	edi, DWORD PTR _j$[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	inc	edi
	mov	DWORD PTR _j$[ebp], edi
	fsubp	ST(1), ST(0)
	fld	ST(1)
	fmul	QWORD PTR _derivs$[ebp+edi*8-8]
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR [esi+ecx]
	fstp	QWORD PTR [esi+ecx]

; 1941 :              f_info->grad[n][kk] += coeff*sign*derivs[j]*(s[0][k]*gpd[1][n]-s[1][k]*gpd[0][n]);

	mov	esi, DWORD PTR tv3732[ebp]
	fld	QWORD PTR [esi+ecx]
	mov	esi, DWORD PTR tv3864[ebp]
	fmul	QWORD PTR [esi]
	mov	esi, DWORD PTR tv3851[ebp]
	fld	QWORD PTR [esi+ecx]
	mov	esi, DWORD PTR tv3857[ebp]
	fmul	QWORD PTR [esi]
	mov	edx, DWORD PTR [edx+1336]
	mov	edx, DWORD PTR [edx+ebx*4]
	lea	edx, DWORD PTR [edx+eax*8]
	fsubp	ST(1), ST(0)
	inc	eax
	fld	ST(1)
	fmul	QWORD PTR _derivs$[ebp+edi*8-8]
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	mov	edi, DWORD PTR _web+616
	cmp	eax, edi
	jl	$LN41@facet_gene@8

; 1938 :          for ( kk = k+1 ; kk < SDIM ; kk++,j++ )

	fstp	ST(0)
$LN43@facet_gene@8:

; 1937 :        for ( k = 0, j = SDIM ; k < SDIM ; k++ )

	mov	eax, DWORD PTR tv5344[ebp]
	inc	eax
	mov	DWORD PTR tv5344[ebp], eax
	dec	eax
	add	ecx, 8
	cmp	eax, edi
	jl	$LN44@facet_gene@8
	mov	edx, DWORD PTR _ctrl_num
$LN42@facet_gene@8:

; 1942 :          }
; 1943 :       
; 1944 :  
; 1945 : #define INX(i,j) (SDIM + i*SDIM -(i*(i+1))/2 + j - i - 1)
; 1946 : #define ziknk(i,k,n) (s[0][i]*gpd[1][n]-s[1][i]*gpd[0][n])
; 1947 : #define zkjnk(j,k,n) (s[1][j]*gpd[0][n]-s[0][j]*gpd[1][n])
; 1948 : 
; 1949 :        /* hessian, see facet_general_hi_d.tex */
; 1950 :        for ( n = 0 ; n < ctrl_num ; n++ )

	mov	DWORD PTR _n$[ebp], 0
	test	edx, edx
	jle	$LN49@facet_gene@8
$LN38@facet_gene@8:

; 1951 :          for ( N = 0 ; N < ctrl_num ; N++ )

	xor	ecx, ecx
	test	edx, edx
	jle	$LN37@facet_gene@8
$LN35@facet_gene@8:

; 1952 :            for ( k = 0 ; k < SDIM ; k++ )

	mov	DWORD PTR _k$[ebp], 0
	test	edi, edi
	jle	$LN34@facet_gene@8
	mov	DWORD PTR tv20400[ebp], 8
$LN32@facet_gene@8:

; 1953 :              for ( K = 0 ; K < SDIM ; K++ )

	xor	esi, esi
	test	edi, edi
	jle	$LN31@facet_gene@8
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _second$[ebp]

; 1960 :                  sum1 += second[k][INX(I,K)]*ziknk(I,K,N);

	mov	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _gpoly
	mov	DWORD PTR tv3908[ebp], eax
	mov	eax, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv3829[ebp], edx
	mov	DWORD PTR tv20185[ebp], 32		; 00000020H
$LN29@facet_gene@8:

; 1954 :              { REAL sum = 0.0, sum1 = 0,sum2 = 0;
; 1955 :        
; 1956 :                sum1 = gpoly[m][N]*second[k][K];

	mov	eax, DWORD PTR tv3908[ebp]
	mov	edx, DWORD PTR tv20185[ebp]
	fld	QWORD PTR [eax+edx-32]
	mov	eax, DWORD PTR tv3829[ebp]
	fmul	QWORD PTR [eax+ecx*8]

; 1957 :                for ( J = K+1 ; J < SDIM ; J++ )

	lea	ebx, DWORD PTR [esi+1]
	mov	DWORD PTR tv3914[ebp], ebx
	mov	DWORD PTR _J$[ebp], ebx
	cmp	ebx, edi
	jge	$LN135@facet_gene@8
	mov	edx, edi
	sub	edx, ebx
	cmp	edx, 4
	jl	$LN134@facet_gene@8
	mov	eax, DWORD PTR _s$90346[ebp]
	mov	eax, DWORD PTR [eax+4]

; 1958 :                  sum1 += second[k][INX(K,J)]*zkjnk(J,K,N);

	add	eax, DWORD PTR tv20185[ebp]
	mov	edx, DWORD PTR _gpd$90344[ebp]
	mov	edx, DWORD PTR [edx]
	lea	edx, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR tv5649[ebp], eax
	mov	DWORD PTR tv3924[ebp], edx
	mov	edx, DWORD PTR _gpd$90344[ebp]
	mov	edx, DWORD PTR [edx+4]
	lea	edx, DWORD PTR [edx+ecx*8]
	mov	eax, ebx
	imul	eax, esi
	mov	DWORD PTR tv3930[ebp], edx
	cdq
	sub	eax, edx
	mov	edx, eax
	sar	edx, 1
	lea	eax, DWORD PTR [edi+1]
	imul	eax, ebx
	mov	ebx, DWORD PTR tv20185[ebp]
	sub	eax, edx
	mov	edx, DWORD PTR tv3908[ebp]
	sub	eax, esi
	lea	edx, DWORD PTR [edx+eax*8]
	mov	DWORD PTR tv5651[ebp], edx
	mov	edx, DWORD PTR _s$90346[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR tv3732[ebp], edx
	lea	ebx, DWORD PTR [ebx+edx-16]
	mov	edx, DWORD PTR tv3908[ebp]
	lea	eax, DWORD PTR [edx+eax*8+16]
	mov	edx, DWORD PTR _s$90346[ebp]
	mov	DWORD PTR tv5745[ebp], eax
	mov	eax, DWORD PTR [edx+4]
	sub	eax, DWORD PTR tv3732[ebp]
	mov	edx, edi
	mov	DWORD PTR tv5781[ebp], eax
	mov	eax, DWORD PTR tv3914[ebp]
	sub	edx, eax
	sub	edx, 4
	shr	edx, 2
	inc	edx
	lea	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _J$[ebp], eax
$LN142@facet_gene@8:
	mov	eax, DWORD PTR tv5649[ebp]
	fld	QWORD PTR [eax-24]
	mov	eax, DWORD PTR tv3924[ebp]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv3930[ebp]
	fld	QWORD PTR [ebx-8]
	add	ebx, 32					; 00000020H
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv5651[ebp]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [eax-8]
	mov	eax, DWORD PTR tv5781[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax+ebx-32]
	mov	eax, DWORD PTR tv3924[ebp]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv3930[ebp]
	fld	QWORD PTR [eax]
	mov	eax, DWORD PTR tv5651[ebp]
	fmul	QWORD PTR [ebx-32]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv5649[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax-8]
	mov	eax, DWORD PTR tv3924[ebp]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv3930[ebp]
	fld	QWORD PTR [ebx-24]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv5651[ebp]
	add	DWORD PTR tv5651[ebp], 32		; 00000020H
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [eax+8]
	mov	eax, DWORD PTR tv5649[ebp]
	add	DWORD PTR tv5649[ebp], 32		; 00000020H
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax]
	mov	eax, DWORD PTR tv3924[ebp]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv3930[ebp]
	fld	QWORD PTR [ebx-16]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv5745[ebp]
	add	DWORD PTR tv5745[ebp], 32		; 00000020H
	dec	edx
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [eax]
	faddp	ST(1), ST(0)
	jne	$LN142@facet_gene@8
	mov	ebx, DWORD PTR tv3914[ebp]
$LN134@facet_gene@8:

; 1957 :                for ( J = K+1 ; J < SDIM ; J++ )

	cmp	DWORD PTR _J$[ebp], edi
	jge	$LN135@facet_gene@8

; 1951 :          for ( N = 0 ; N < ctrl_num ; N++ )

	mov	eax, DWORD PTR _gpd$90344[ebp]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR tv3924[ebp], edx
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR _s$90346[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv3930[ebp], edx

; 1957 :                for ( J = K+1 ; J < SDIM ; J++ )

	mov	edx, DWORD PTR _J$[ebp]
	mov	DWORD PTR tv3732[ebp], eax
	lea	eax, DWORD PTR [eax+edx*8]
	mov	DWORD PTR tv7361[ebp], eax
	mov	eax, ebx
	imul	eax, esi
	cdq
	sub	eax, edx
	mov	edx, ebx
	mov	ebx, DWORD PTR _J$[ebp]
	imul	edx, edi
	sar	eax, 1
	sub	edx, eax
	mov	eax, DWORD PTR tv3908[ebp]
	sub	edx, esi
	add	edx, ebx
	lea	edx, DWORD PTR [eax+edx*8-8]
	mov	eax, DWORD PTR _s$90346[ebp]
	mov	DWORD PTR tv7436[ebp], edx
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR tv3732[ebp]
	mov	eax, edi
	sub	eax, ebx
$LN144@facet_gene@8:

; 1958 :                  sum1 += second[k][INX(K,J)]*zkjnk(J,K,N);

	mov	ebx, DWORD PTR tv7361[ebp]
	fld	QWORD PTR [edx+ebx]
	mov	ebx, DWORD PTR tv3924[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv3930[ebp]
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv7361[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv7436[ebp]
	add	DWORD PTR tv7361[ebp], 8
	add	DWORD PTR tv7436[ebp], 8
	dec	eax
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [ebx]
	faddp	ST(1), ST(0)
	jne	SHORT $LN144@facet_gene@8
$LN135@facet_gene@8:

; 1959 :                for ( I = 0 ; I < K ; I++ )

	xor	ebx, ebx
	mov	DWORD PTR _I$[ebp], ebx
	cmp	esi, 4
	jl	$LC117@facet_gene@8

; 1951 :          for ( N = 0 ; N < ctrl_num ; N++ )

	mov	edx, DWORD PTR _gpd$90344[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR tv3930[ebp], edx
	mov	edx, DWORD PTR _s$90346[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR tv3919[ebp], edx
	mov	edx, DWORD PTR _gpd$90344[ebp]
	mov	edx, DWORD PTR [edx]
	lea	edx, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR tv3924[ebp], edx

; 1959 :                for ( I = 0 ; I < K ; I++ )

	lea	edx, DWORD PTR [edi*4]
	mov	DWORD PTR tv7965[ebp], edx
	lea	edx, DWORD PTR [edi+edi*2]
	mov	DWORD PTR tv7970[ebp], edx
	lea	edx, DWORD PTR [eax+24]
	mov	DWORD PTR tv8186[ebp], edx
	mov	edx, DWORD PTR tv3919[ebp]
	add	edx, 8

; 1960 :                  sum1 += second[k][INX(I,K)]*ziknk(I,K,N);

	sub	eax, DWORD PTR tv3919[ebp]
	mov	DWORD PTR tv7710[ebp], 2
	mov	DWORD PTR tv7975[ebp], edi
	mov	DWORD PTR tv8192[ebp], edx
	mov	DWORD PTR tv8287[ebp], eax
$LN118@facet_gene@8:
	mov	eax, DWORD PTR tv7710[ebp]
	dec	eax
	mov	DWORD PTR tv8315[ebp], eax
	imul	eax, ebx
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR tv7975[ebp]
	sar	eax, 1
	sub	edx, eax
	mov	eax, DWORD PTR tv8186[ebp]
	sub	edx, ebx
	add	edx, esi
	fld	QWORD PTR [eax-24]
	mov	eax, DWORD PTR tv3930[ebp]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv8192[ebp]
	fld	QWORD PTR [eax-8]
	mov	eax, DWORD PTR tv3924[ebp]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv3908[ebp]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [eax+edx*8-8]
	mov	eax, DWORD PTR tv7710[ebp]
	imul	eax, DWORD PTR tv8315[ebp]
	faddp	ST(1), ST(0)
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR tv7975[ebp]
	sar	eax, 1
	sub	edx, eax
	mov	eax, DWORD PTR tv8192[ebp]
	sub	edx, ebx
	mov	ebx, DWORD PTR tv8287[ebp]
	add	edx, edi
	add	edx, esi
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv3930[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR _I$[ebp]
	fld	QWORD PTR [eax]
	mov	eax, DWORD PTR tv3924[ebp]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv3908[ebp]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [eax+edx*8-16]
	mov	eax, DWORD PTR tv7710[ebp]
	lea	edx, DWORD PTR [eax+1]
	imul	eax, edx
	faddp	ST(1), ST(0)
	mov	DWORD PTR tv8448[ebp], edx
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR tv7970[ebp]
	sar	eax, 1
	sub	edx, eax
	mov	eax, DWORD PTR tv8186[ebp]
	sub	edx, ebx
	add	edx, esi
	fld	QWORD PTR [eax-8]
	mov	eax, DWORD PTR tv3930[ebp]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv8192[ebp]
	fld	QWORD PTR [eax+8]
	mov	eax, DWORD PTR tv3924[ebp]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv3908[ebp]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [eax+edx*8-24]
	mov	eax, DWORD PTR tv7710[ebp]
	add	eax, 2
	imul	eax, DWORD PTR tv8448[ebp]
	faddp	ST(1), ST(0)
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR tv7965[ebp]
	sar	eax, 1
	sub	edx, eax
	mov	eax, DWORD PTR tv3930[ebp]
	sub	edx, ebx
	add	edx, esi
	fld	QWORD PTR [eax]
	mov	eax, DWORD PTR tv8186[ebp]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv8192[ebp]
	fld	QWORD PTR [eax+16]
	mov	eax, DWORD PTR tv3924[ebp]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv3908[ebp]
	add	DWORD PTR tv7710[ebp], 4
	add	ebx, 4
	fsubp	ST(1), ST(0)
	mov	DWORD PTR _I$[ebp], ebx
	fmul	QWORD PTR [eax+edx*8-32]

; 1961 :                sum += gpoly[m][n]*sum1;

	mov	edx, DWORD PTR tv3914[ebp]
	lea	eax, DWORD PTR [edi*4]
	add	DWORD PTR tv7975[ebp], eax
	add	DWORD PTR tv7970[ebp], eax
	faddp	ST(1), ST(0)
	add	DWORD PTR tv7965[ebp], eax
	mov	eax, 32					; 00000020H
	add	DWORD PTR tv8192[ebp], eax
	add	DWORD PTR tv8186[ebp], eax
	add	edx, -4					; fffffffcH
	cmp	ebx, edx
	jl	$LN118@facet_gene@8
$LC117@facet_gene@8:

; 1959 :                for ( I = 0 ; I < K ; I++ )

	cmp	ebx, esi
	jge	$LN136@facet_gene@8

; 1951 :          for ( N = 0 ; N < ctrl_num ; N++ )

	mov	edx, DWORD PTR _gpd$90344[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx]
	lea	edx, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR tv3924[ebp], edx

; 1959 :                for ( I = 0 ; I < K ; I++ )

	lea	edx, DWORD PTR [ebx+1]
	imul	edx, edi
	lea	eax, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR tv3930[ebp], eax
	mov	eax, DWORD PTR _s$90346[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR tv8655[ebp], edx
	lea	edx, DWORD PTR [eax+ebx*8]
	mov	DWORD PTR tv8657[ebp], edx
	mov	edx, DWORD PTR _s$90346[ebp]
	mov	edx, DWORD PTR [edx]
	sub	edx, eax
	mov	DWORD PTR tv8287[ebp], edx
$LC23@facet_gene@8:

; 1960 :                  sum1 += second[k][INX(I,K)]*ziknk(I,K,N);

	lea	eax, DWORD PTR [ebx+1]
	mov	DWORD PTR tv4024[ebp], eax
	imul	eax, ebx
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR tv8655[ebp]
	add	DWORD PTR tv8655[ebp], edi
	sar	eax, 1
	sub	edx, eax
	mov	eax, DWORD PTR tv8657[ebp]
	sub	edx, ebx
	mov	ebx, DWORD PTR tv8287[ebp]
	add	edx, esi
	add	eax, 8
	fld	QWORD PTR [eax+ebx-8]
	mov	ebx, DWORD PTR tv3930[ebp]
	mov	DWORD PTR tv8657[ebp], eax
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv3924[ebp]
	fld	QWORD PTR [eax-8]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv3908[ebp]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [ebx+edx*8-8]
	mov	ebx, DWORD PTR tv4024[ebp]
	faddp	ST(1), ST(0)
	cmp	ebx, esi
	jl	SHORT $LC23@facet_gene@8
$LN136@facet_gene@8:

; 1961 :                sum += gpoly[m][n]*sum1;

	mov	eax, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR tv3829[ebp]
	fmul	QWORD PTR [edx+eax*8]

; 1962 : 
; 1963 :                for ( j = k+1 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR _k$[ebp]
	inc	eax
	mov	DWORD PTR tv3719[ebp], eax
	fadd	ST(0), ST(2)
	cmp	eax, edi
	jge	$LN18@facet_gene@8
	mov	edx, DWORD PTR _s$90346[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv3919[ebp], eax
	mov	eax, DWORD PTR _gpd$90344[ebp]
	mov	ebx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR tv3929[ebp], eax
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR tv20400[ebp]
	add	edx, eax
	mov	DWORD PTR tv3732[ebp], eax
	mov	DWORD PTR tv3856[ebp], ebx
	mov	ebx, DWORD PTR tv3719[ebp]
	mov	eax, ebx
	imul	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR tv14023[ebp], edx
	cdq
	sub	eax, edx
	mov	edx, eax
	lea	eax, DWORD PTR [edi+1]
	imul	eax, ebx
	sar	edx, 1
	sub	eax, edx
	sub	eax, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _second$[ebp]
	lea	edx, DWORD PTR [edx+eax*4-4]
	mov	DWORD PTR tv14145[ebp], edx
	mov	edx, DWORD PTR _second$[ebp]
	mov	edx, DWORD PTR [edx+esi*4]
	lea	eax, DWORD PTR [edx+eax*8-8]
	mov	DWORD PTR tv14147[ebp], eax
	mov	eax, DWORD PTR tv3919[ebp]
	sub	eax, DWORD PTR tv3732[ebp]
	mov	DWORD PTR tv5781[ebp], eax
	mov	eax, edi
	sub	eax, ebx
	mov	DWORD PTR tv14454[ebp], eax
$LN20@facet_gene@8:

; 1964 :                { sum2 = second[K][INX(k,j)]*gpoly[m][N];

	mov	edx, DWORD PTR tv14147[ebp]

; 1965 :                  for ( J = K+1 ; J < SDIM ; J++ )

	mov	ebx, DWORD PTR tv3914[ebp]
	fld	QWORD PTR [edx]
	mov	eax, DWORD PTR tv3829[ebp]
	fmul	QWORD PTR [eax+ecx*8]
	mov	DWORD PTR _J$[ebp], ebx
	cmp	ebx, edi
	jge	$LN119@facet_gene@8
	mov	edx, edi
	sub	edx, ebx
	cmp	edx, 4
	jl	$LN137@facet_gene@8

; 1966 :                    sum2 += second[INX(k,j)][INX(K,J)]*zkjnk(J,K,N);

	mov	eax, DWORD PTR tv3919[ebp]
	add	eax, DWORD PTR tv20185[ebp]
	mov	DWORD PTR tv9136[ebp], eax
	mov	eax, ebx
	imul	eax, esi
	cdq
	sub	eax, edx
	lea	edx, DWORD PTR [edi+1]
	imul	edx, ebx
	mov	ebx, DWORD PTR tv3732[ebp]
	sar	eax, 1
	sub	edx, eax
	mov	eax, DWORD PTR tv14145[ebp]
	mov	eax, DWORD PTR [eax]
	sub	edx, esi
	mov	DWORD PTR tv14156[ebp], eax
	lea	eax, DWORD PTR [eax+edx*8]
	mov	DWORD PTR tv9144[ebp], eax
	mov	eax, DWORD PTR tv20185[ebp]
	lea	eax, DWORD PTR [eax+ebx-16]
	mov	ebx, DWORD PTR tv14156[ebp]
	lea	edx, DWORD PTR [ebx+edx*8+16]
	mov	ebx, DWORD PTR tv3914[ebp]
	mov	DWORD PTR tv9298[ebp], edx
	mov	edx, edi
	sub	edx, ebx
	sub	edx, 4
	shr	edx, 2
	inc	edx
	lea	ebx, DWORD PTR [ebx+edx*4]
	mov	DWORD PTR _J$[ebp], ebx
$LN121@facet_gene@8:
	mov	ebx, DWORD PTR tv9136[ebp]
	fld	QWORD PTR [ebx-24]
	mov	ebx, DWORD PTR tv3856[ebp]
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR tv3929[ebp]
	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR tv9144[ebp]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [ebx-8]
	mov	ebx, DWORD PTR tv5781[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv3856[ebp]
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR tv3929[ebp]
	fld	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR tv9144[ebp]
	fmul	QWORD PTR [eax-32]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv9136[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx-8]
	mov	ebx, DWORD PTR tv3856[ebp]
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR tv3929[ebp]
	fld	QWORD PTR [eax-24]
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR tv9144[ebp]
	add	DWORD PTR tv9144[ebp], 32		; 00000020H
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR tv9136[ebp]
	add	DWORD PTR tv9136[ebp], 32		; 00000020H
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv3856[ebp]
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR tv3929[ebp]
	fld	QWORD PTR [eax-16]
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR tv9298[ebp]
	add	DWORD PTR tv9298[ebp], 32		; 00000020H
	dec	edx
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [ebx]
	faddp	ST(1), ST(0)
	jne	$LN121@facet_gene@8
$LN137@facet_gene@8:

; 1965 :                  for ( J = K+1 ; J < SDIM ; J++ )

	cmp	DWORD PTR _J$[ebp], edi
	jge	$LN119@facet_gene@8
	mov	eax, DWORD PTR tv3732[ebp]
	mov	edx, DWORD PTR _J$[ebp]
	lea	ebx, DWORD PTR [eax+edx*8]
	mov	eax, DWORD PTR tv3914[ebp]
	imul	eax, esi
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR tv3914[ebp]
	imul	edx, edi
	sar	eax, 1
	sub	edx, eax
	mov	eax, DWORD PTR tv14145[ebp]
	mov	eax, DWORD PTR [eax]
	sub	edx, esi
	add	edx, DWORD PTR _J$[ebp]
	lea	edx, DWORD PTR [eax+edx*8-8]
	mov	eax, edi
	sub	eax, DWORD PTR _J$[ebp]
	mov	DWORD PTR tv12395[ebp], edx
$LC17@facet_gene@8:

; 1966 :                    sum2 += second[INX(k,j)][INX(K,J)]*zkjnk(J,K,N);

	mov	edx, DWORD PTR tv5781[ebp]
	fld	QWORD PTR [edx+ebx]
	mov	edx, DWORD PTR tv3856[ebp]
	fmul	QWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR tv3929[ebp]
	fld	QWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR tv12395[ebp]
	fmul	QWORD PTR [ebx]
	add	edx, 8
	add	ebx, 8
	dec	eax
	fsubp	ST(1), ST(0)
	mov	DWORD PTR tv12395[ebp], edx
	fmul	QWORD PTR [edx-8]
	faddp	ST(1), ST(0)
	jne	SHORT $LC17@facet_gene@8
$LN119@facet_gene@8:

; 1967 :                  for ( I = 0 ; I < K ; I++ )

	xor	ebx, ebx
	mov	DWORD PTR _I$[ebp], ebx
	cmp	esi, 4
	jl	$LC123@facet_gene@8
	mov	eax, DWORD PTR tv14145[ebp]
	mov	edx, DWORD PTR [eax]
	lea	eax, DWORD PTR [edi*4]
	mov	DWORD PTR tv13020[ebp], eax
	lea	eax, DWORD PTR [edi+edi*2]
	mov	DWORD PTR tv13025[ebp], eax
	mov	eax, DWORD PTR tv3732[ebp]
	mov	DWORD PTR tv14156[ebp], edx
	lea	edx, DWORD PTR [edi+edi]
	add	eax, 24					; 00000018H
	mov	DWORD PTR tv13031[ebp], edx
	mov	edx, DWORD PTR tv3919[ebp]
	mov	DWORD PTR tv13236[ebp], eax
	lea	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv13242[ebp], eax

; 1968 :                    sum2 += second[INX(k,j)][INX(I,K)]*ziknk(I,K,N);

	mov	eax, DWORD PTR tv3732[ebp]
	sub	eax, edx
	mov	DWORD PTR tv12794[ebp], 2
	mov	DWORD PTR tv13033[ebp], edi
	mov	DWORD PTR tv8287[ebp], eax
$LN124@facet_gene@8:
	mov	eax, DWORD PTR tv12794[ebp]
	dec	eax
	mov	DWORD PTR tv13361[ebp], eax
	imul	eax, ebx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR tv13033[ebp]
	sub	edx, eax
	mov	eax, DWORD PTR tv13236[ebp]
	sub	edx, ebx
	add	edx, esi
	fld	QWORD PTR [eax-24]
	mov	eax, DWORD PTR tv3929[ebp]
	fmul	QWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR tv13242[ebp]
	fld	QWORD PTR [eax-8]
	mov	eax, DWORD PTR tv3856[ebp]
	fmul	QWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR tv14156[ebp]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [eax+edx*8-8]
	mov	eax, DWORD PTR tv12794[ebp]
	imul	eax, DWORD PTR tv13361[ebp]
	faddp	ST(1), ST(0)
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR tv13031[ebp]
	sar	eax, 1
	sub	edx, eax
	mov	eax, DWORD PTR tv13242[ebp]
	sub	edx, ebx
	mov	ebx, DWORD PTR tv8287[ebp]
	add	edx, esi
	fld	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv3929[ebp]
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR _I$[ebp]
	fld	QWORD PTR [eax]
	mov	eax, DWORD PTR tv3856[ebp]
	fmul	QWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR tv14156[ebp]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [eax+edx*8-16]
	mov	eax, DWORD PTR tv12794[ebp]
	lea	edx, DWORD PTR [eax+1]
	imul	eax, edx
	faddp	ST(1), ST(0)
	mov	DWORD PTR tv13369[ebp], edx
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR tv13025[ebp]
	sar	eax, 1
	sub	edx, eax
	mov	eax, DWORD PTR tv13236[ebp]
	sub	edx, ebx
	add	edx, esi
	fld	QWORD PTR [eax-8]
	mov	eax, DWORD PTR tv3929[ebp]
	fmul	QWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR tv13242[ebp]
	fld	QWORD PTR [eax+8]
	mov	eax, DWORD PTR tv3856[ebp]
	fmul	QWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR tv14156[ebp]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [eax+edx*8-24]
	mov	eax, DWORD PTR tv12794[ebp]
	add	eax, 2
	imul	eax, DWORD PTR tv13369[ebp]
	faddp	ST(1), ST(0)
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR tv13020[ebp]
	sar	eax, 1
	sub	edx, eax
	mov	eax, DWORD PTR tv3929[ebp]
	sub	edx, ebx
	add	edx, esi
	fld	QWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR tv13236[ebp]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv13242[ebp]
	fld	QWORD PTR [eax+16]
	mov	eax, DWORD PTR tv3856[ebp]
	fmul	QWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR tv14156[ebp]
	add	DWORD PTR tv12794[ebp], 4
	add	ebx, 4
	fsubp	ST(1), ST(0)
	mov	DWORD PTR _I$[ebp], ebx
	fmul	QWORD PTR [eax+edx*8-32]
	mov	edx, DWORD PTR tv3914[ebp]
	lea	eax, DWORD PTR [edi*4]
	add	DWORD PTR tv13033[ebp], eax
	add	DWORD PTR tv13031[ebp], eax
	faddp	ST(1), ST(0)
	add	DWORD PTR tv13025[ebp], eax
	add	DWORD PTR tv13020[ebp], eax
	mov	eax, 32					; 00000020H
	add	DWORD PTR tv13242[ebp], eax
	add	DWORD PTR tv13236[ebp], eax
	add	edx, -4					; fffffffcH
	cmp	ebx, edx
	jl	$LN124@facet_gene@8
$LC123@facet_gene@8:

; 1967 :                  for ( I = 0 ; I < K ; I++ )

	cmp	ebx, esi
	jge	$LN122@facet_gene@8
	mov	eax, DWORD PTR tv14145[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR tv14156[ebp], edx
	mov	edx, DWORD PTR tv3919[ebp]
	lea	eax, DWORD PTR [edx+ebx*8]
	mov	DWORD PTR tv13762[ebp], eax
	lea	eax, DWORD PTR [ebx+1]
	imul	eax, edi
	mov	DWORD PTR tv13766[ebp], eax
	mov	eax, DWORD PTR tv3732[ebp]
	sub	eax, edx
	mov	DWORD PTR tv8287[ebp], eax
$LC14@facet_gene@8:

; 1968 :                    sum2 += second[INX(k,j)][INX(I,K)]*ziknk(I,K,N);

	lea	eax, DWORD PTR [ebx+1]
	mov	DWORD PTR tv4024[ebp], eax
	imul	eax, ebx
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR tv13766[ebp]
	add	DWORD PTR tv13766[ebp], edi
	sar	eax, 1
	sub	edx, eax
	mov	eax, DWORD PTR tv13762[ebp]
	sub	edx, ebx
	mov	ebx, DWORD PTR tv8287[ebp]
	add	edx, esi
	add	eax, 8
	fld	QWORD PTR [eax+ebx-8]
	mov	ebx, DWORD PTR tv3929[ebp]
	mov	DWORD PTR tv13762[ebp], eax
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR tv3856[ebp]
	fld	QWORD PTR [eax-8]
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR tv14156[ebp]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [ebx+edx*8-8]
	mov	ebx, DWORD PTR tv4024[ebp]
	faddp	ST(1), ST(0)
	cmp	ebx, esi
	jl	SHORT $LC14@facet_gene@8
$LN122@facet_gene@8:

; 1969 :                  sum += sum2*zkjnk(j,k,n);

	mov	eax, DWORD PTR tv14023[ebp]
	mov	edx, DWORD PTR tv5781[ebp]
	fld	QWORD PTR [eax+edx]
	mov	ebx, DWORD PTR tv3856[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	fmul	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR tv3929[ebp]
	fld	QWORD PTR [ebx+edx*8]
	add	DWORD PTR tv14145[ebp], 4
	fmul	QWORD PTR [eax]
	add	DWORD PTR tv14147[ebp], 8
	add	eax, 8
	dec	DWORD PTR tv14454[ebp]
	fsubp	ST(1), ST(0)
	mov	DWORD PTR tv14023[ebp], eax
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jne	$LN20@facet_gene@8
$LN18@facet_gene@8:

; 1970 :                }
; 1971 : 
; 1972 :                for ( i = 0 ; i < k ; i++ )

	xor	ebx, ebx
	cmp	DWORD PTR _k$[ebp], ebx
	jle	$LN9@facet_gene@8
	mov	eax, DWORD PTR _second$[ebp]
	mov	edx, DWORD PTR [eax+esi*4]
	mov	DWORD PTR tv4129[ebp], edx
	mov	edx, DWORD PTR _gpd$90344[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR tv3929[ebp], eax
	mov	eax, DWORD PTR _s$90346[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv3732[ebp], eax
	mov	eax, DWORD PTR _s$90346[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR tv3856[ebp], edx
	mov	edx, DWORD PTR tv3732[ebp]
	sub	edx, eax
	mov	DWORD PTR tv3919[ebp], eax
	mov	DWORD PTR tv19686[ebp], eax
	mov	DWORD PTR tv19690[ebp], edi
	mov	DWORD PTR tv8287[ebp], edx
$LN11@facet_gene@8:

; 1973 :                { sum2 = second[K][INX(i,k)]*gpoly[m][N];

	lea	eax, DWORD PTR [ebx+1]
	mov	DWORD PTR tv4208[ebp], eax
	imul	eax, ebx
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR tv19690[ebp]
	sar	eax, 1
	sub	edx, eax
	mov	eax, DWORD PTR _k$[ebp]
	sub	edx, ebx

; 1974 :                  for ( J = K+1 ; J < SDIM ; J++ )

	mov	ebx, DWORD PTR tv3914[ebp]
	add	eax, edx
	mov	edx, DWORD PTR tv4129[ebp]
	mov	DWORD PTR tv19765[ebp], eax
	mov	DWORD PTR _J$[ebp], ebx
	fld	QWORD PTR [edx+eax*8-8]
	mov	edx, DWORD PTR tv3829[ebp]
	fmul	QWORD PTR [edx+ecx*8]
	cmp	ebx, edi
	jge	$LN139@facet_gene@8
	mov	edx, edi
	sub	edx, ebx
	cmp	edx, 4
	jl	$LN138@facet_gene@8
	mov	edx, DWORD PTR _second$[ebp]
	mov	eax, DWORD PTR [edx+eax*4-4]

; 1975 :                    sum2 += second[INX(i,k)][INX(K,J)]*zkjnk(J,K,N);

	mov	DWORD PTR tv19786[ebp], eax
	mov	eax, DWORD PTR tv3919[ebp]
	add	eax, DWORD PTR tv20185[ebp]
	mov	DWORD PTR tv14824[ebp], eax
	mov	eax, ebx
	imul	eax, esi
	cdq
	sub	eax, edx
	mov	edx, eax
	lea	eax, DWORD PTR [edi+1]
	imul	eax, ebx
	mov	ebx, DWORD PTR tv3732[ebp]
	sar	edx, 1
	sub	eax, edx
	mov	edx, DWORD PTR tv19786[ebp]
	sub	eax, esi
	lea	edx, DWORD PTR [edx+eax*8]
	mov	DWORD PTR tv14832[ebp], edx
	mov	edx, DWORD PTR tv20185[ebp]
	lea	edx, DWORD PTR [edx+ebx-16]
	mov	ebx, DWORD PTR tv19786[ebp]
	lea	eax, DWORD PTR [ebx+eax*8+16]
	mov	ebx, DWORD PTR tv3914[ebp]
	mov	DWORD PTR tv14986[ebp], eax
	mov	eax, DWORD PTR tv3919[ebp]
	sub	eax, DWORD PTR tv3732[ebp]
	mov	DWORD PTR tv5781[ebp], eax
	mov	eax, edi
	sub	eax, ebx
	sub	eax, 4
	shr	eax, 2
	inc	eax
	lea	ebx, DWORD PTR [ebx+eax*4]
	mov	DWORD PTR _J$[ebp], ebx
$LN127@facet_gene@8:
	mov	ebx, DWORD PTR tv14824[ebp]
	fld	QWORD PTR [ebx-24]
	mov	ebx, DWORD PTR tv3856[ebp]
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR tv3929[ebp]
	fld	QWORD PTR [edx-8]
	add	edx, 32					; 00000020H
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR tv14832[ebp]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [ebx-8]
	mov	ebx, DWORD PTR tv5781[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+edx-32]
	mov	ebx, DWORD PTR tv3856[ebp]
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR tv3929[ebp]
	fld	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR tv14832[ebp]
	fmul	QWORD PTR [edx-32]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv14824[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx-8]
	mov	ebx, DWORD PTR tv3856[ebp]
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR tv3929[ebp]
	fld	QWORD PTR [edx-24]
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR tv14832[ebp]
	add	DWORD PTR tv14832[ebp], 32		; 00000020H
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR tv14824[ebp]
	add	DWORD PTR tv14824[ebp], 32		; 00000020H
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv3856[ebp]
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR tv3929[ebp]
	fld	QWORD PTR [edx-16]
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR tv14986[ebp]
	add	DWORD PTR tv14986[ebp], 32		; 00000020H
	dec	eax
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [ebx]
	faddp	ST(1), ST(0)
	jne	$LN127@facet_gene@8
	mov	ebx, DWORD PTR tv3914[ebp]
$LN138@facet_gene@8:

; 1974 :                  for ( J = K+1 ; J < SDIM ; J++ )

	mov	eax, DWORD PTR _J$[ebp]
	cmp	eax, edi
	jge	$LN139@facet_gene@8
	mov	edx, DWORD PTR tv3732[ebp]
	lea	eax, DWORD PTR [edx+eax*8]
	mov	DWORD PTR tv18038[ebp], eax
	mov	eax, ebx
	imul	ebx, edi
	imul	eax, esi
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR _second$[ebp]
	sar	eax, 1
	sub	ebx, eax
	mov	eax, DWORD PTR tv19765[ebp]
	mov	edx, DWORD PTR [edx+eax*4-4]
	sub	ebx, esi
	add	ebx, DWORD PTR _J$[ebp]
	lea	eax, DWORD PTR [edx+ebx*8-8]
	mov	ebx, DWORD PTR tv3919[ebp]
	sub	ebx, DWORD PTR tv3732[ebp]
	mov	edx, edi
	sub	edx, DWORD PTR _J$[ebp]
	mov	DWORD PTR tv18115[ebp], eax
	mov	eax, DWORD PTR tv18038[ebp]
	mov	DWORD PTR tv5781[ebp], ebx
	jmp	SHORT $LC8@facet_gene@8
$LN143@facet_gene@8:
	mov	ebx, DWORD PTR tv5781[ebp]
$LC8@facet_gene@8:

; 1975 :                    sum2 += second[INX(i,k)][INX(K,J)]*zkjnk(J,K,N);

	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv3856[ebp]
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR tv3929[ebp]
	fld	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR tv18115[ebp]
	fmul	QWORD PTR [eax]
	add	ebx, 8
	add	eax, 8
	dec	edx
	fsubp	ST(1), ST(0)
	mov	DWORD PTR tv18115[ebp], ebx
	fmul	QWORD PTR [ebx-8]
	faddp	ST(1), ST(0)
	jne	SHORT $LN143@facet_gene@8
$LN139@facet_gene@8:

; 1976 :                  for ( I = 0 ; I < K ; I++ )

	xor	ebx, ebx
	mov	DWORD PTR _I$[ebp], ebx
	cmp	esi, 4
	jl	$LC129@facet_gene@8
	mov	eax, DWORD PTR tv19765[ebp]
	mov	edx, DWORD PTR _second$[ebp]
	mov	edx, DWORD PTR [edx+eax*4-4]
	lea	eax, DWORD PTR [edi*4]
	mov	DWORD PTR tv18708[ebp], eax
	mov	DWORD PTR tv19786[ebp], edx
	lea	eax, DWORD PTR [edi+edi*2]
	lea	edx, DWORD PTR [edi+edi]
	mov	DWORD PTR tv18713[ebp], eax
	mov	eax, DWORD PTR tv3732[ebp]
	mov	DWORD PTR tv18719[ebp], edx
	mov	edx, DWORD PTR tv3919[ebp]
	add	eax, 24					; 00000018H
	add	edx, 8
	mov	DWORD PTR tv18482[ebp], 2
	mov	DWORD PTR tv18721[ebp], edi
	mov	DWORD PTR tv18924[ebp], eax
	mov	DWORD PTR tv18930[ebp], edx
$LN130@facet_gene@8:

; 1977 :                    sum2 += second[INX(i,k)][INX(I,K)]*ziknk(I,K,N);

	mov	eax, DWORD PTR tv18482[ebp]
	dec	eax
	imul	eax, ebx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR tv18721[ebp]
	sub	edx, eax
	mov	eax, DWORD PTR tv18924[ebp]
	sub	edx, ebx
	add	edx, esi
	fld	QWORD PTR [eax-24]
	mov	eax, DWORD PTR tv3929[ebp]
	fmul	QWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR tv18930[ebp]
	fld	QWORD PTR [eax-8]
	mov	eax, DWORD PTR tv3856[ebp]
	fmul	QWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR tv19786[ebp]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [eax+edx*8-8]
	mov	eax, DWORD PTR tv18482[ebp]
	dec	eax
	imul	eax, DWORD PTR tv18482[ebp]
	faddp	ST(1), ST(0)
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR tv18719[ebp]
	sar	eax, 1
	sub	edx, eax
	mov	eax, DWORD PTR tv18930[ebp]
	sub	edx, ebx
	mov	ebx, DWORD PTR tv8287[ebp]
	add	edx, esi
	fld	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv3929[ebp]
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR _I$[ebp]
	fld	QWORD PTR [eax]
	mov	eax, DWORD PTR tv3856[ebp]
	fmul	QWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR tv19786[ebp]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [eax+edx*8-16]
	mov	edx, DWORD PTR tv18482[ebp]
	lea	eax, DWORD PTR [edx+1]
	mov	DWORD PTR tv19121[ebp], eax
	imul	eax, edx
	faddp	ST(1), ST(0)
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR tv18713[ebp]
	sar	eax, 1
	sub	edx, eax
	mov	eax, DWORD PTR tv18924[ebp]
	sub	edx, ebx
	add	edx, esi
	fld	QWORD PTR [eax-8]
	mov	eax, DWORD PTR tv3929[ebp]
	fmul	QWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR tv18930[ebp]
	fld	QWORD PTR [eax+8]
	mov	eax, DWORD PTR tv3856[ebp]
	fmul	QWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR tv19786[ebp]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [eax+edx*8-24]
	mov	eax, DWORD PTR tv18482[ebp]
	add	eax, 2
	imul	eax, DWORD PTR tv19121[ebp]
	faddp	ST(1), ST(0)
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR tv18708[ebp]
	sar	eax, 1
	sub	edx, eax
	mov	eax, DWORD PTR tv3929[ebp]
	sub	edx, ebx
	add	edx, esi
	fld	QWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR tv18924[ebp]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv18930[ebp]
	fld	QWORD PTR [eax+16]
	mov	eax, DWORD PTR tv3856[ebp]
	fmul	QWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR tv19786[ebp]
	add	DWORD PTR tv18482[ebp], 4
	add	ebx, 4
	fsubp	ST(1), ST(0)
	mov	DWORD PTR _I$[ebp], ebx
	fmul	QWORD PTR [eax+edx*8-32]
	mov	edx, DWORD PTR tv3914[ebp]
	lea	eax, DWORD PTR [edi*4]
	add	DWORD PTR tv18721[ebp], eax
	add	DWORD PTR tv18719[ebp], eax
	faddp	ST(1), ST(0)
	add	DWORD PTR tv18713[ebp], eax
	add	DWORD PTR tv18708[ebp], eax
	mov	eax, 32					; 00000020H
	add	DWORD PTR tv18930[ebp], eax
	add	DWORD PTR tv18924[ebp], eax
	add	edx, -4					; fffffffcH
	cmp	ebx, edx
	jl	$LN130@facet_gene@8
$LC129@facet_gene@8:

; 1976 :                  for ( I = 0 ; I < K ; I++ )

	cmp	ebx, esi
	jge	$LN128@facet_gene@8
	mov	edx, DWORD PTR tv19765[ebp]
	mov	eax, DWORD PTR _second$[ebp]
	mov	eax, DWORD PTR [eax+edx*4-4]
	mov	edx, DWORD PTR tv3919[ebp]
	mov	DWORD PTR tv19786[ebp], eax
	lea	eax, DWORD PTR [edx+ebx*8]
	mov	DWORD PTR tv19449[ebp], eax
	lea	eax, DWORD PTR [ebx+1]
	imul	eax, edi
	mov	DWORD PTR tv19453[ebp], eax
$LC5@facet_gene@8:

; 1977 :                    sum2 += second[INX(i,k)][INX(I,K)]*ziknk(I,K,N);

	lea	eax, DWORD PTR [ebx+1]
	mov	DWORD PTR tv4024[ebp], eax
	imul	eax, ebx
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR tv19453[ebp]
	add	DWORD PTR tv19453[ebp], edi
	sar	eax, 1
	sub	edx, eax
	mov	eax, DWORD PTR tv19449[ebp]
	sub	edx, ebx
	mov	ebx, DWORD PTR tv8287[ebp]
	add	edx, esi
	add	eax, 8
	fld	QWORD PTR [eax+ebx-8]
	mov	ebx, DWORD PTR tv3929[ebp]
	mov	DWORD PTR tv19449[ebp], eax
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR tv3856[ebp]
	fld	QWORD PTR [eax-8]
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR tv19786[ebp]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [ebx+edx*8-8]
	mov	ebx, DWORD PTR tv4024[ebp]
	faddp	ST(1), ST(0)
	cmp	ebx, esi
	jl	SHORT $LC5@facet_gene@8
$LN128@facet_gene@8:

; 1978 :                  sum += sum2*ziknk(i,k,n);

	mov	edx, DWORD PTR tv19686[ebp]
	mov	eax, DWORD PTR tv8287[ebp]
	fld	QWORD PTR [edx+eax]
	mov	eax, DWORD PTR _n$[ebp]
	mov	ebx, DWORD PTR tv3929[ebp]
	fmul	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR tv3856[ebp]
	fld	QWORD PTR [edx]
	add	DWORD PTR tv19690[ebp], edi
	fmul	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR tv4208[ebp]
	add	edx, 8
	mov	DWORD PTR tv19686[ebp], edx
	fsubp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	cmp	ebx, DWORD PTR _k$[ebp]
	jl	$LN11@facet_gene@8
$LN9@facet_gene@8:

; 1979 :                }
; 1980 :                if ( k < K ) 

	mov	eax, DWORD PTR _k$[ebp]
	cmp	esi, eax
	jle	SHORT $LN295@facet_gene@8

; 1981 :                  sum += derivs[INX(k,K)]*(gpd[1][N]*gpd[0][n] - gpd[1][n]*gpd[0][N]);

	mov	edx, DWORD PTR _gpd$90344[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx]
	mov	ebx, DWORD PTR _n$[ebp]
	fld	QWORD PTR [edx+ebx*8]
	fmul	QWORD PTR [eax+ecx*8]
	fld	QWORD PTR [edx+ecx*8]
	fmul	QWORD PTR [eax+ebx*8]
	mov	ebx, DWORD PTR tv3719[ebp]
	mov	eax, ebx
	imul	ebx, edi
	fsubp	ST(1), ST(0)
	imul	eax, DWORD PTR _k$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	ebx, eax
	sub	ebx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _k$[ebp]
	add	ebx, esi

; 1982 :                if ( K < k )

	cmp	esi, eax
	fmul	QWORD PTR _derivs$[ebp+ebx*8-8]
	faddp	ST(1), ST(0)
$LN295@facet_gene@8:
	jge	SHORT $LN141@facet_gene@8

; 1983 :                  sum += derivs[INX(K,k)]*(gpd[1][n]*gpd[0][N] - gpd[1][N]*gpd[0][n]);

	mov	edx, DWORD PTR _gpd$90344[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+ecx*8]
	mov	ebx, DWORD PTR _n$[ebp]
	fmul	QWORD PTR [eax+ebx*8]
	fld	QWORD PTR [edx+ebx*8]
	mov	ebx, DWORD PTR tv3914[ebp]
	fmul	QWORD PTR [eax+ecx*8]
	mov	eax, ebx
	imul	eax, esi
	fsubp	ST(1), ST(0)
	cdq
	sub	eax, edx
	mov	edx, ebx
	imul	edx, edi
	sar	eax, 1
	sub	edx, eax
	mov	eax, DWORD PTR _k$[ebp]
	sub	edx, esi
	add	edx, eax
	fmul	QWORD PTR _derivs$[ebp+edx*8-8]
	faddp	ST(1), ST(0)
	jmp	SHORT $LN1@facet_gene@8
$LN141@facet_gene@8:
	mov	ebx, DWORD PTR tv3914[ebp]
$LN1@facet_gene@8:

; 1984 : 
; 1985 :                f_info->hess[n][N][k][K] += coeff*sum;

	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	fmul	ST(0), ST(4)
	mov	edx, DWORD PTR [edx+1340]
	mov	esi, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR tv20185[ebp]
	fadd	QWORD PTR [eax+edx-32]
	lea	eax, DWORD PTR [eax+edx-32]
	mov	esi, ebx
	add	edx, 8
	fstp	QWORD PTR [eax]
	mov	edi, DWORD PTR _web+616
	mov	DWORD PTR tv20185[ebp], edx
	cmp	esi, edi
	jl	$LN29@facet_gene@8
$LN31@facet_gene@8:

; 1952 :            for ( k = 0 ; k < SDIM ; k++ )

	mov	eax, DWORD PTR _k$[ebp]
	add	DWORD PTR tv20400[ebp], 8
	inc	eax
	mov	DWORD PTR _k$[ebp], eax
	cmp	eax, edi
	jl	$LN32@facet_gene@8
	mov	edx, DWORD PTR _ctrl_num
$LN34@facet_gene@8:

; 1951 :          for ( N = 0 ; N < ctrl_num ; N++ )

	inc	ecx
	cmp	ecx, edx
	jl	$LN35@facet_gene@8
$LN37@facet_gene@8:

; 1942 :          }
; 1943 :       
; 1944 :  
; 1945 : #define INX(i,j) (SDIM + i*SDIM -(i*(i+1))/2 + j - i - 1)
; 1946 : #define ziknk(i,k,n) (s[0][i]*gpd[1][n]-s[1][i]*gpd[0][n])
; 1947 : #define zkjnk(j,k,n) (s[1][j]*gpd[0][n]-s[0][j]*gpd[1][n])
; 1948 : 
; 1949 :        /* hessian, see facet_general_hi_d.tex */
; 1950 :        for ( n = 0 ; n < ctrl_num ; n++ )

	mov	eax, DWORD PTR _n$[ebp]
	inc	eax
	mov	DWORD PTR _n$[ebp], eax
	cmp	eax, edx
	jl	$LN38@facet_gene@8
$LN49@facet_gene@8:

; 1930 :     value += coeff*val;
; 1931 :      
; 1932 :      for ( n = 0 ; n < ctrl_num ; n++ )

	mov	eax, DWORD PTR _n$[ebp]
	inc	eax
	mov	DWORD PTR _n$[ebp], eax
	cmp	eax, edx
	jl	$LN50@facet_gene@8
	mov	ebx, DWORD PTR _m$[ebp]
	fstp	ST(1)
	fstp	ST(2)
	jmp	SHORT $LN61@facet_gene@8
$LN178@facet_gene@8:
	fstp	ST(1)
	fld	QWORD PTR _sign$[ebp]
	fxch	ST(1)
$LN61@facet_gene@8:

; 1916 : 
; 1917 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	inc	ebx
	mov	DWORD PTR _m$[ebp], ebx
	cmp	ebx, DWORD PTR _gauss2D_num
	jl	$LN291@facet_gene@8
	pop	edi
	fstp	ST(1)
	pop	esi

; 1986 :                               
; 1987 :          }
; 1988 :      }
; 1989 :   }
; 1990 :   facet_general_flag = 0;

	mov	DWORD PTR _facet_general_flag, 0
	pop	ebx

; 1991 :   return value; 
; 1992 : } // end facet_general_hi_d_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN151@facet_gene@8:

; 1986 :                               
; 1987 :          }
; 1988 :      }
; 1989 :   }
; 1990 :   facet_general_flag = 0;

	mov	DWORD PTR _facet_general_flag, ecx
	fstp	ST(0)

; 1991 :   return value; 
; 1992 : } // end facet_general_hi_d_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _value$[ebp]
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_general_hi_d_hess ENDP
_TEXT	ENDS
PUBLIC	_area_square_value
EXTRN	_mat_tsquare:PROC
; Function compile flags: /Ogtp
;	COMDAT _area_square_value
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_area_square_value PROC					; COMDAT

; 2009 : { REAL energy;

	push	ebp
	mov	ebp, esp

; 2010 : 
; 2011 :   mat_tsquare(f_info->sides[0],f_info->ss,web.dimension,SDIM);

	mov	eax, DWORD PTR _web+616
	mov	ecx, DWORD PTR _web+620
	push	esi
	mov	esi, DWORD PTR _f_info$[ebp]
	mov	edx, DWORD PTR [esi+1280]
	push	eax
	mov	eax, DWORD PTR [esi+1276]
	push	ecx
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	ecx
	call	_mat_tsquare

; 2012 :   energy = det_adjoint(f_info->ss,web.dimension);

	mov	edx, DWORD PTR _web+620
	mov	eax, DWORD PTR [esi+1280]
	push	edx
	push	eax
	call	_det_adjoint

; 2013 :   return energy/web.simplex_factorial/web.simplex_factorial;

	fld	QWORD PTR _web+792
	fdiv	ST(1), ST(0)
	add	esp, 24					; 00000018H
	pop	esi
	fdivp	ST(1), ST(0)

; 2014 : } // end area_square_value()

	pop	ebp
	ret	0
_area_square_value ENDP
_TEXT	ENDS
PUBLIC	__real@4000000000000000
PUBLIC	_area_square_gradient
EXTRN	_vector_sub:PROC
EXTRN	_memset:PROC
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _area_square_gradient
_TEXT	SEGMENT
_energy$ = -8						; size = 8
_f_info$ = 8						; size = 4
_area_square_gradient PROC				; COMDAT

; 2024 : { REAL energy;

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2025 :   int i,j;
; 2026 : 
; 2027 :   mat_tsquare(f_info->sides[0],f_info->ss,web.dimension,SDIM);

	mov	eax, DWORD PTR _web+616
	mov	ecx, DWORD PTR _web+620
	push	esi
	mov	esi, DWORD PTR _f_info$[ebp]
	mov	edx, DWORD PTR [esi+1280]
	push	edi
	push	eax
	mov	eax, DWORD PTR [esi+1276]
	push	ecx
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	ecx
	call	_mat_tsquare

; 2028 :   energy = det_adjoint(f_info->ss,web.dimension);

	mov	edx, DWORD PTR _web+620
	mov	eax, DWORD PTR [esi+1280]
	push	edx
	push	eax
	call	_det_adjoint
	fstp	QWORD PTR _energy$[ebp]

; 2029 :   for ( i = 0 ; i < web.dimension ; i++ )

	mov	ecx, DWORD PTR _web+620
	add	esp, 24					; 00000018H
	xor	edi, edi
	test	ecx, ecx
	jle	SHORT $LN7@area_squar
	fld	QWORD PTR __real@4000000000000000
$LN9@area_squar:

; 2030 :      for ( j = 0 ; j < web.dimension ; j++ ) 

	xor	edx, edx
	test	ecx, ecx
	jle	SHORT $LN8@area_squar
	mov	ecx, DWORD PTR [esi+1280]
	mov	eax, DWORD PTR [ecx+edi*4]
$LN6@area_squar:

; 2031 :         f_info->ss[i][j] *= 2/web.simplex_factorial/web.simplex_factorial;

	fld	ST(0)
	inc	edx
	fld	QWORD PTR _web+792
	add	eax, 8
	fdiv	ST(1), ST(0)
	fdivp	ST(1), ST(0)
	fmul	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	mov	ecx, DWORD PTR _web+620
	cmp	edx, ecx
	jl	SHORT $LN6@area_squar
$LN8@area_squar:

; 2029 :   for ( i = 0 ; i < web.dimension ; i++ )

	inc	edi
	cmp	edi, ecx
	jl	SHORT $LN9@area_squar
	fstp	ST(0)
$LN7@area_squar:

; 2032 :   mat_mult(f_info->ss,f_info->sides[0],f_info->grad+1,web.dimension,web.dimension,
; 2033 :             SDIM); /* head forces */

	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR [esi+1336]
	push	edx
	push	ecx
	push	ecx
	mov	ecx, DWORD PTR [esi+1276]
	mov	edx, DWORD PTR [ecx]
	add	eax, 4
	push	eax
	mov	eax, DWORD PTR [esi+1280]
	push	edx
	push	eax
	call	_mat_mult

; 2034 :   memset((char*)f_info->grad[0],0,SDIM*sizeof(REAL));

	mov	ecx, DWORD PTR _web+616
	mov	eax, DWORD PTR [esi+1336]
	lea	edx, DWORD PTR [ecx*8]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	0
	push	ecx
	call	_memset

; 2035 :   for ( i = 0 ; i < web.dimension ; i++ )  /* tail forces */

	xor	edi, edi
	add	esp, 36					; 00000024H
	cmp	DWORD PTR _web+620, edi
	jle	SHORT $LN1@area_squar
	npad	15
$LL3@area_squar:

; 2036 :      vector_sub(f_info->grad[0],f_info->grad[i+1],SDIM);

	mov	eax, DWORD PTR [esi+1336]
	mov	edx, DWORD PTR _web+616
	mov	ecx, DWORD PTR [eax+edi*4+4]
	push	edx
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	edx
	call	_vector_sub
	inc	edi
	add	esp, 12					; 0000000cH
	cmp	edi, DWORD PTR _web+620
	jl	SHORT $LL3@area_squar
$LN1@area_squar:

; 2037 :   return energy/web.simplex_factorial/web.simplex_factorial;

	fld	QWORD PTR _energy$[ebp]
	pop	edi
	fld	QWORD PTR _web+792
	pop	esi
	fdiv	ST(1), ST(0)
	fdivp	ST(1), ST(0)

; 2038 : } // end area_square_gradient()

	mov	esp, ebp
	pop	ebp
	ret	0
_area_square_gradient ENDP
_TEXT	ENDS
PUBLIC	_facet_2form_integral
; Function compile flags: /Ogtp
;	COMDAT _facet_2form_integral
_TEXT	SEGMENT
_sign$ = -32						; size = 8
_value$ = -24						; size = 8
_mi$ = -16						; size = 4
tv370 = -12						; size = 4
tv349 = -8						; size = 4
_k$ = -4						; size = 4
_m$ = 8							; size = 4
_f_info$ = 8						; size = 4
_facet_2form_integral PROC				; COMDAT

; 55   : { int m,i,j,k;

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 56   :   REAL value=0.0;
; 57   :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	ecx, DWORD PTR _web+236
	fldz
	push	edi
	fst	QWORD PTR _value$[ebp]
	mov	edi, DWORD PTR _f_info$[ebp]
	mov	eax, DWORD PTR [edi]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN13@facet_2for@8
	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN48@facet_2for@8
$LN13@facet_2for@8:
	fld1
$LN48@facet_2for@8:

; 58   :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [edi+8]
	fstp	QWORD PTR _sign$[ebp]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list

; 59   : 
; 60   :   if ( web.modeltype == LAGRANGE ) return facet_2form_integral_lagrange(f_info);

	cmp	DWORD PTR _web+628, 3
	mov	DWORD PTR _mi$[ebp], eax
	jne	SHORT $LN10@facet_2for@8
	push	edi
	fstp	ST(0)
	call	_facet_2form_integral_lagrange
	add	esp, 4
	pop	edi

; 74   : } // end facet_2form_integral()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@facet_2for@8:

; 61   : 
; 62   :   for ( m = 0 ; m < gauss2D_num ; m++ )

	xor	edx, edx
	mov	DWORD PTR _m$[ebp], edx
	cmp	DWORD PTR _gauss2D_num, ecx
	jle	$LN7@facet_2for@8
	mov	ecx, DWORD PTR _web+616
	push	ebx
	push	esi
$LN24@facet_2for@8:

; 63   :   { 
; 64   :     f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	mov	esi, DWORD PTR [edi+1268]
	fild	DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [esi+edx*4]
	add	ecx, ecx
	fstp	QWORD PTR [edx+ecx*8]

; 65   :     for ( i = 0, k = 0 ; i < SDIM ; i++ )

	mov	ecx, DWORD PTR _web+616
	xor	ebx, ebx
	mov	DWORD PTR _k$[ebp], ebx
	cmp	ecx, ebx
	jle	$LN8@facet_2for@8

; 63   :   { 
; 64   :     f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	mov	esi, 1
	mov	DWORD PTR tv370[ebp], esi
$LN23@facet_2for@8:

; 66   :       for ( j = i+1 ; j < SDIM ; j++,k++ )

	cmp	esi, ecx
	jge	SHORT $LN5@facet_2for@8
	mov	ecx, DWORD PTR _k$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4+232]
	mov	DWORD PTR tv349[ebp], edx
$LL46@facet_2for@8:

; 67   :       { REAL  form = gauss2Dwt[m]*
; 68   :            eval(mi->expr[k],f_info->gauss_pt[m],f_info->id,NULL);

	mov	eax, DWORD PTR [edi]
	fstp	ST(0)
	mov	ecx, DWORD PTR [edi+1268]
	mov	edx, DWORD PTR _m$[ebp]
	push	0
	push	eax
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR tv349[ebp]
	mov	edx, DWORD PTR [ecx]
	push	eax
	push	edx
	call	_eval
	mov	eax, DWORD PTR _gauss2Dwt
	mov	ecx, DWORD PTR _m$[ebp]
	fmul	QWORD PTR [eax+ecx*8]

; 69   :         value += (f_info->sides[0][0][i]*f_info->sides[0][1][j]
; 70   :                  - f_info->sides[0][0][j]*f_info->sides[0][1][i])*form;

	mov	edx, DWORD PTR [edi+1276]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	fld	QWORD PTR [ebx+eax]
	inc	DWORD PTR _k$[ebp]
	fmul	QWORD PTR [ecx+esi*8]
	add	DWORD PTR tv349[ebp], 4
	fld	QWORD PTR [ebx+ecx]
	mov	ecx, DWORD PTR _web+616
	fmul	QWORD PTR [eax+esi*8]
	inc	esi
	add	esp, 16					; 00000010H
	fsubp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR _value$[ebp]
	fst	QWORD PTR _value$[ebp]
	cmp	esi, ecx
	jl	SHORT $LL46@facet_2for@8

; 66   :       for ( j = i+1 ; j < SDIM ; j++,k++ )

	mov	esi, DWORD PTR tv370[ebp]
	mov	eax, DWORD PTR _mi$[ebp]
$LN5@facet_2for@8:

; 65   :     for ( i = 0, k = 0 ; i < SDIM ; i++ )

	inc	esi
	lea	edx, DWORD PTR [esi-1]
	add	ebx, 8
	mov	DWORD PTR tv370[ebp], esi
	cmp	edx, ecx
	jl	$LN23@facet_2for@8
$LN8@facet_2for@8:

; 61   : 
; 62   :   for ( m = 0 ; m < gauss2D_num ; m++ )

	mov	edx, DWORD PTR _m$[ebp]
	inc	edx
	mov	DWORD PTR _m$[ebp], edx
	cmp	edx, DWORD PTR _gauss2D_num
	jl	$LN24@facet_2for@8
	pop	esi
	pop	ebx
$LN7@facet_2for@8:

; 71   :       }
; 72   :   }
; 73   :   return sign*value/2;  /* 2 is triangle factor for normal */

	fmul	QWORD PTR _sign$[ebp]
	pop	edi
	fmul	QWORD PTR __real@3fe0000000000000

; 74   : } // end facet_2form_integral()

	mov	esp, ebp
	pop	ebp
	ret	0
_facet_2form_integral ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_facet_2form_integral_grad
; Function compile flags: /Ogtp
;	COMDAT _facet_2form_integral_grad
_TEXT	SEGMENT
_sign$ = -2116						; size = 8
_mi$ = -2108						; size = 4
_value$ = -2104						; size = 8
_weight$89085 = -2096					; size = 8
_f_info$GSCopy$ = -2088					; size = 4
tv2445 = -2084						; size = 4
tv2800 = -2080						; size = 4
tv2874 = -2076						; size = 4
tv2872 = -2072						; size = 4
_sum$ = -2068						; size = 8
tv3019 = -2064						; size = 4
tv1820 = -2064						; size = 4
tv2667 = -2060						; size = 4
tv5048 = -2056						; size = 4
_m$ = -2052						; size = 4
_j$ = -2048						; size = 4
tv5219 = -2044						; size = 8
tv5214 = -2044						; size = 8
tv5174 = -2044						; size = 8
tv4952 = -2040						; size = 4
tv2974 = -2040						; size = 4
tv1744 = -2040						; size = 4
tv1687 = -2040						; size = 4
_k$ = -2036						; size = 4
tv2808 = -2032						; size = 4
_i$ = -2032						; size = 4
tv4710 = -2028						; size = 4
tv3676 = -2028						; size = 4
tv2810 = -2028						; size = 4
tv4848 = -2024						; size = 4
tv3763 = -2024						; size = 4
tv2972 = -2024						; size = 4
_derivs$ = -2020					; size = 1728
_form$ = -292						; size = 288
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_facet_2form_integral_grad PROC				; COMDAT

; 85   : { int m,n,i,j,k;

	push	ebp
	mov	ebp, esp
	sub	esp, 2116				; 00000844H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 86   :   REAL value = 0.0;
; 87   :   REAL form[MAXCOORD][MAXCOORD]; /* as antisymmetric matrix */
; 88   :   REAL derivs[MAXCOORD][MAXCOORD][MAXCOORD]; /* coord is last index */
; 89   :   REAL sum;
; 90   :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	ecx, DWORD PTR _web+236
	fldz
	push	esi
	fst	QWORD PTR _value$[ebp]
	mov	esi, DWORD PTR _f_info$[ebp]
	mov	eax, DWORD PTR [esi]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	or	eax, ecx

; 117  :           sum += f_info->sides[0][0][i]*derivs[i][j][k]*f_info->sides[0][1][j];

	mov	DWORD PTR _f_info$GSCopy$[ebp], esi
	je	SHORT $LN37@facet_2for@9

; 86   :   REAL value = 0.0;
; 87   :   REAL form[MAXCOORD][MAXCOORD]; /* as antisymmetric matrix */
; 88   :   REAL derivs[MAXCOORD][MAXCOORD][MAXCOORD]; /* coord is last index */
; 89   :   REAL sum;
; 90   :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN125@facet_2for@9
$LN37@facet_2for@9:
	fld1
$LN125@facet_2for@9:

; 91   :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [esi+8]
	fstp	QWORD PTR _sign$[ebp]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list

; 92   : 
; 93   :   if ( web.modeltype == LAGRANGE )

	cmp	DWORD PTR _web+628, 3
	mov	DWORD PTR _mi$[ebp], eax
	jne	SHORT $LN34@facet_2for@9

; 94   :     return facet_2form_integral_lagrange_grad(f_info);

	push	esi
	fstp	ST(0)
	call	_facet_2form_integral_lagrange_grad
	add	esp, 4
	pop	esi

; 125  :      }
; 126  :   }
; 127  : 
; 128  :   return value/2;
; 129  : } // end facet_2form_integral_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN34@facet_2for@9:

; 95   : 
; 96   :   for ( i = 0 ; i < SDIM  ; i++ ) form[i][i] = 0.0;

	mov	edx, DWORD PTR _web+616
	test	edx, edx
	jle	SHORT $LN90@facet_2for@9
	lea	eax, DWORD PTR _form$[ebp]
	mov	ecx, edx
$LN33@facet_2for@9:
	fst	QWORD PTR [eax]
	add	eax, 56					; 00000038H
	dec	ecx
	jne	SHORT $LN33@facet_2for@9
$LN90@facet_2for@9:

; 97   :   for ( m = 0 ; m < gauss2D_num ; m++ )

	xor	eax, eax
	fstp	ST(0)
	mov	DWORD PTR _m$[ebp], eax
	cmp	DWORD PTR _gauss2D_num, eax
	jle	$LN28@facet_2for@9
	push	ebx
	mov	DWORD PTR tv5048[ebp], 16		; 00000010H
	push	edi
	npad	4
$LL71@facet_2for@9:

; 98   :   { REAL weight = sign*gauss2Dwt[m];

	mov	ecx, DWORD PTR _gauss2Dwt
	fld	QWORD PTR [ecx+eax*8]

; 99   :     f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	mov	ecx, DWORD PTR [esi+1268]
	fmul	QWORD PTR _sign$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	add	edx, edx
	fstp	QWORD PTR _weight$89085[ebp]
	fild	DWORD PTR _m$[ebp]
	fstp	QWORD PTR [eax+edx*8]

; 100  :     for ( i = 0, k = 0 ; i < SDIM ; i++ ) 

	mov	edx, DWORD PTR _web+616
	xor	eax, eax
	mov	DWORD PTR _k$[ebp], eax
	cmp	edx, eax
	jle	$LN73@facet_2for@9

; 98   :   { REAL weight = sign*gauss2Dwt[m];

	mov	ebx, 1
	lea	edi, DWORD PTR _derivs$[ebp]
	mov	DWORD PTR tv2972[ebp], eax
	mov	DWORD PTR tv2974[ebp], ebx
	mov	DWORD PTR tv3019[ebp], edi
	npad	4
$LL27@facet_2for@9:

; 101  :     { for ( n = 0 ; n < SDIM ;n++ ) derivs[i][i][n] = 0.0;

	test	edx, edx
	jle	SHORT $LN24@facet_2for@9
	mov	ecx, edx
	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	xor	eax, eax
	rep stosd
$LN24@facet_2for@9:

; 102  :       for ( j = i+1 ; j < SDIM ; j++,k++ ) 

	mov	DWORD PTR _j$[ebp], ebx
	cmp	ebx, edx
	jge	$LN26@facet_2for@9
	mov	edi, DWORD PTR tv2972[ebp]
	lea	eax, DWORD PTR [ebx+edi]
	lea	ecx, DWORD PTR [eax+eax*2]
	add	ecx, ecx
	mov	DWORD PTR tv2667[ebp], ecx
	lea	ecx, DWORD PTR [ebx+edi+5]
	lea	ebx, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR _form$[ebp+eax*8]
	lea	edi, DWORD PTR [ecx+ecx*2]
	add	edi, edi
	mov	DWORD PTR tv2808[ebp], eax
	mov	eax, DWORD PTR _mi$[ebp]
	mov	DWORD PTR tv2800[ebp], edi
	mov	edi, DWORD PTR _k$[ebp]
	lea	eax, DWORD PTR [eax+edi*4+232]
	mov	DWORD PTR tv2810[ebp], eax
	lea	eax, DWORD PTR [ecx+ecx*2]
	add	ebx, ebx
	add	eax, eax
	lea	eax, DWORD PTR _derivs$[ebp+eax*8+8]
	lea	ecx, DWORD PTR _form$[ebp+ecx*8]
	lea	ebx, DWORD PTR _derivs$[ebp+ebx*8+8]
	mov	DWORD PTR tv2872[ebp], eax
	mov	DWORD PTR tv2874[ebp], ecx
$LL76@facet_2for@9:

; 103  :       { eval_all(mi->expr[k],f_info->gauss_pt[m],SDIM,
; 104  :               form[i]+j, derivs[i][j],f_info->id);

	mov	eax, DWORD PTR [esi]
	mov	edi, DWORD PTR tv2808[ebp]
	push	eax
	mov	eax, DWORD PTR _m$[ebp]
	lea	ecx, DWORD PTR [ebx-8]
	push	ecx
	push	edi
	push	edx
	mov	edx, DWORD PTR [esi+1268]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR tv2810[ebp]
	mov	eax, DWORD PTR [edx]
	push	ecx
	push	eax
	call	_eval_all

; 105  :         form[j][i] = - form[i][j];

	fld	QWORD PTR [edi]

; 106  :         for ( n = 0 ; n < SDIM ;n++ )

	mov	edx, DWORD PTR _web+616
	fchs
	mov	ecx, DWORD PTR tv2874[ebp]
	add	esp, 24					; 00000018H
	fstp	QWORD PTR [ecx]
	xor	edi, edi
	cmp	edx, 4
	jl	SHORT $LC62@facet_2for@9

; 103  :       { eval_all(mi->expr[k],f_info->gauss_pt[m],SDIM,
; 104  :               form[i]+j, derivs[i][j],f_info->id);

	mov	ecx, DWORD PTR tv2872[ebp]
	lea	esi, DWORD PTR [edx-4]
	shr	esi, 2
	inc	esi
	mov	eax, ebx
	lea	edi, DWORD PTR [esi*4]

; 106  :         for ( n = 0 ; n < SDIM ;n++ )

$LL63@facet_2for@9:

; 107  :              derivs[j][i][n] = -derivs[i][j][n];

	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	fchs
	add	ecx, 32					; 00000020H
	dec	esi
	fstp	QWORD PTR [ecx-40]
	fld	QWORD PTR [eax-32]
	fchs
	fstp	QWORD PTR [ecx-32]
	fld	QWORD PTR [eax-24]
	fchs
	fstp	QWORD PTR [ecx-24]
	fld	QWORD PTR [eax-16]
	fchs
	fstp	QWORD PTR [ecx-16]
	jne	SHORT $LL63@facet_2for@9

; 103  :       { eval_all(mi->expr[k],f_info->gauss_pt[m],SDIM,
; 104  :               form[i]+j, derivs[i][j],f_info->id);

	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
$LC62@facet_2for@9:

; 106  :         for ( n = 0 ; n < SDIM ;n++ )

	cmp	edi, edx
	jge	SHORT $LN20@facet_2for@9
	mov	eax, DWORD PTR tv2800[ebp]
	add	eax, edi
	lea	ecx, DWORD PTR _derivs$[ebp+eax*8]
	mov	DWORD PTR tv2445[ebp], ecx
	mov	ecx, DWORD PTR tv2667[ebp]
	add	ecx, edi
	mov	eax, edx
	lea	ecx, DWORD PTR _derivs$[ebp+ecx*8]
	sub	eax, edi
	npad	2
$LC18@facet_2for@9:

; 107  :              derivs[j][i][n] = -derivs[i][j][n];

	fld	QWORD PTR [ecx]
	mov	edi, DWORD PTR tv2445[ebp]
	fchs
	add	edi, 8
	fstp	QWORD PTR [edi-8]
	add	ecx, 8
	dec	eax
	mov	DWORD PTR tv2445[ebp], edi
	jne	SHORT $LC18@facet_2for@9
$LN20@facet_2for@9:

; 102  :       for ( j = i+1 ; j < SDIM ; j++,k++ ) 

	mov	eax, DWORD PTR _j$[ebp]
	add	DWORD PTR tv2808[ebp], 8
	add	DWORD PTR tv2874[ebp], 48		; 00000030H
	add	DWORD PTR tv2872[ebp], 288		; 00000120H
	add	DWORD PTR tv2800[ebp], 36		; 00000024H
	add	DWORD PTR tv2667[ebp], 6
	inc	DWORD PTR _k$[ebp]
	add	DWORD PTR tv2810[ebp], 4
	inc	eax
	add	ebx, 48					; 00000030H
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, edx
	jl	$LL76@facet_2for@9
	mov	ebx, DWORD PTR tv2974[ebp]
$LN26@facet_2for@9:

; 100  :     for ( i = 0, k = 0 ; i < SDIM ; i++ ) 

	mov	edi, DWORD PTR tv3019[ebp]
	add	DWORD PTR tv2972[ebp], 6
	inc	ebx
	add	edi, 336				; 00000150H
	lea	ecx, DWORD PTR [ebx-1]
	mov	DWORD PTR tv3019[ebp], edi
	mov	DWORD PTR tv2974[ebp], ebx
	cmp	ecx, edx
	jl	$LL27@facet_2for@9
$LN73@facet_2for@9:

; 108  :       }
; 109  :     }
; 110  :     for ( i = 0, sum = 0.0 ; i < SDIM ; i++ )

	fldz
	xor	edi, edi
	mov	DWORD PTR _i$[ebp], edi
	test	edx, edx
	jle	$LN74@facet_2for@9
	lea	eax, DWORD PTR _form$[ebp+8]
	mov	DWORD PTR tv3676[ebp], edi
	mov	DWORD PTR tv3763[ebp], eax
$LN78@facet_2for@9:

; 111  :      for ( j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	cmp	edx, 4
	jl	$LC65@facet_2for@9

; 108  :       }
; 109  :     }
; 110  :     for ( i = 0, sum = 0.0 ; i < SDIM ; i++ )

	mov	ecx, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax]

; 111  :      for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR [eax+4]
	lea	ecx, DWORD PTR [ecx+edi*8]
	lea	edi, DWORD PTR [edx-4]
	shr	edi, 2
	add	eax, 16					; 00000010H
	inc	edi
	lea	ebx, DWORD PTR [edi*4]
	mov	DWORD PTR tv1687[ebp], ecx
	mov	ecx, DWORD PTR tv3763[ebp]
	mov	DWORD PTR _j$[ebp], ebx
	mov	ebx, DWORD PTR tv1687[ebp]
$LN66@facet_2for@9:

; 112  :         sum += f_info->sides[0][0][i]*form[i][j]*f_info->sides[0][1][j];

	fld	QWORD PTR [ecx-8]
	add	eax, 32					; 00000020H
	fmul	QWORD PTR [ebx]
	add	ecx, 32					; 00000020H
	dec	edi
	fmul	QWORD PTR [eax-48]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx]
	fmul	QWORD PTR [ecx-32]
	fmul	QWORD PTR [eax-40]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-24]
	fmul	QWORD PTR [ebx]
	fmul	QWORD PTR [eax-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-16]
	fmul	QWORD PTR [ebx]
	fmul	QWORD PTR [eax-24]
	faddp	ST(1), ST(0)
	jne	SHORT $LN66@facet_2for@9

; 111  :      for ( j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR _j$[ebp]
	mov	edi, DWORD PTR _i$[ebp]
$LC65@facet_2for@9:
	cmp	ecx, edx
	jge	SHORT $LN14@facet_2for@9

; 108  :       }
; 109  :     }
; 110  :     for ( i = 0, sum = 0.0 ; i < SDIM ; i++ )

	mov	eax, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [eax]
	mov	ebx, DWORD PTR [eax]

; 111  :      for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR [eax+4]
	lea	edi, DWORD PTR [ebx+edi*8]
	mov	DWORD PTR tv1744[ebp], edi
	mov	edi, DWORD PTR tv3676[ebp]
	lea	ebx, DWORD PTR [eax+ecx*8]
	add	edi, ecx
	mov	eax, edx
	lea	edi, DWORD PTR _form$[ebp+edi*8]
	sub	eax, ecx
$LC12@facet_2for@9:

; 112  :         sum += f_info->sides[0][0][i]*form[i][j]*f_info->sides[0][1][j];

	fld	QWORD PTR [edi]
	mov	ecx, DWORD PTR tv1744[ebp]
	fmul	QWORD PTR [ecx]
	add	edi, 8
	add	ebx, 8
	dec	eax
	fmul	QWORD PTR [ebx-8]
	faddp	ST(1), ST(0)
	jne	SHORT $LC12@facet_2for@9

; 111  :      for ( j = 0 ; j < SDIM ; j++ )

	mov	edi, DWORD PTR _i$[ebp]
$LN14@facet_2for@9:

; 108  :       }
; 109  :     }
; 110  :     for ( i = 0, sum = 0.0 ; i < SDIM ; i++ )

	add	DWORD PTR tv3763[ebp], 48		; 00000030H
	add	DWORD PTR tv3676[ebp], 6
	inc	edi
	mov	DWORD PTR _i$[ebp], edi
	cmp	edi, edx
	jl	$LN78@facet_2for@9
$LN74@facet_2for@9:

; 113  :     value += weight*sum;

	fmul	QWORD PTR _weight$89085[ebp]

; 114  :     for ( k = 0 ; k < SDIM ; k++ )

	xor	edi, edi
	mov	DWORD PTR _k$[ebp], edi
	fadd	QWORD PTR _value$[ebp]
	fstp	QWORD PTR _value$[ebp]
	test	edx, edx
	jle	$LN29@facet_2for@9

; 113  :     value += weight*sum;

	lea	ebx, DWORD PTR _form$[ebp]
	mov	DWORD PTR tv4952[ebp], ebx
$LL70@facet_2for@9:

; 115  :     { for ( i = 0, sum = 0.0 ; i < SDIM ; i++ )

	fldz
	xor	ecx, ecx
	fst	QWORD PTR _sum$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
	test	edx, edx
	jle	$LN4@facet_2for@9
	lea	eax, DWORD PTR _derivs$[ebp+edi*8+48]
	mov	DWORD PTR tv4710[ebp], ecx
	mov	DWORD PTR tv4848[ebp], eax
$LN75@facet_2for@9:

; 116  :         for ( j = 0 ; j < SDIM ; j++ )

	xor	ebx, ebx
	cmp	edx, 4
	jl	$LC68@facet_2for@9

; 115  :     { for ( i = 0, sum = 0.0 ; i < SDIM ; i++ )

	mov	eax, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [eax]
	mov	esi, DWORD PTR [eax]

; 116  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR [eax+4]
	lea	edi, DWORD PTR [esi+ecx*8]
	mov	ecx, DWORD PTR tv4848[ebp]
	lea	esi, DWORD PTR [edx-4]
	shr	esi, 2
	add	eax, 16					; 00000010H
	inc	esi
	lea	ebx, DWORD PTR [esi*4]
$LN69@facet_2for@9:

; 117  :           sum += f_info->sides[0][0][i]*derivs[i][j][k]*f_info->sides[0][1][j];

	fld	QWORD PTR [ecx-48]
	add	ecx, 192				; 000000c0H
	fmul	QWORD PTR [edi]
	add	eax, 32					; 00000020H
	dec	esi
	fmul	QWORD PTR [eax-48]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi]
	fmul	QWORD PTR [ecx-192]
	fmul	QWORD PTR [eax-40]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-144]
	fmul	QWORD PTR [edi]
	fmul	QWORD PTR [eax-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-96]
	fmul	QWORD PTR [edi]
	fmul	QWORD PTR [eax-24]
	faddp	ST(1), ST(0)
	jne	SHORT $LN69@facet_2for@9

; 116  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edi, DWORD PTR _k$[ebp]
$LC68@facet_2for@9:
	cmp	ebx, edx
	jge	SHORT $LN5@facet_2for@9

; 115  :     { for ( i = 0, sum = 0.0 ; i < SDIM ; i++ )

	mov	eax, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [eax]
	mov	edi, DWORD PTR [eax]

; 116  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR [eax+4]
	lea	ecx, DWORD PTR [edi+ecx*8]
	lea	edi, DWORD PTR [eax+ebx*8]
	mov	eax, DWORD PTR tv4710[ebp]
	add	eax, ebx
	mov	DWORD PTR tv1820[ebp], ecx
	mov	ecx, DWORD PTR _k$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	ecx, DWORD PTR [ecx+eax*2]
	mov	eax, edx
	lea	ecx, DWORD PTR _derivs$[ebp+ecx*8]
	sub	eax, ebx
$LC3@facet_2for@9:

; 117  :           sum += f_info->sides[0][0][i]*derivs[i][j][k]*f_info->sides[0][1][j];

	fld	QWORD PTR [ecx]
	mov	ebx, DWORD PTR tv1820[ebp]
	fmul	QWORD PTR [ebx]
	add	ecx, 48					; 00000030H
	add	edi, 8
	dec	eax
	fmul	QWORD PTR [edi-8]
	faddp	ST(1), ST(0)
	jne	SHORT $LC3@facet_2for@9

; 116  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edi, DWORD PTR _k$[ebp]
$LN5@facet_2for@9:

; 115  :     { for ( i = 0, sum = 0.0 ; i < SDIM ; i++ )

	add	DWORD PTR tv4848[ebp], 288		; 00000120H
	add	DWORD PTR tv4710[ebp], 6
	inc	ecx
	mov	DWORD PTR _i$[ebp], ecx
	cmp	ecx, edx
	jl	$LN75@facet_2for@9
	mov	ebx, DWORD PTR tv4952[ebp]

; 117  :           sum += f_info->sides[0][0][i]*derivs[i][j][k]*f_info->sides[0][1][j];

	fst	QWORD PTR _sum$[ebp]
$LN4@facet_2for@9:

; 118  :       f_info->grad[0][k] += weight*(gauss2Dpt[m][0]*sum
; 119  :                     - SDIM_dot(form[k],f_info->sides[0][1])
; 120  :                     + SDIM_dot(form[k],f_info->sides[0][0]))/2;

	mov	eax, DWORD PTR _gauss2Dpt
	mov	ecx, DWORD PTR tv5048[ebp]
	fmul	QWORD PTR [ecx+eax-16]
	push	edx
	mov	edx, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	fstp	QWORD PTR tv5219[ebp]
	push	ecx
	push	ebx
	call	_dot
	fsubr	QWORD PTR tv5219[ebp]
	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR [esi+1276]
	mov	ecx, DWORD PTR [eax]
	fstp	QWORD PTR tv5214[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	ebx
	call	_dot
	fadd	QWORD PTR tv5214[ebp]
	mov	eax, DWORD PTR [esi+1336]
	mov	ecx, DWORD PTR [eax]
	fmul	QWORD PTR _weight$89085[ebp]
	mov	eax, ecx
	fmul	QWORD PTR __real@3fe0000000000000
	fadd	QWORD PTR [ecx+edi*8]
	fstp	QWORD PTR [eax+edi*8]

; 121  :       f_info->grad[1][k] += weight*(gauss2Dpt[m][1]*sum
; 122  :                     + SDIM_dot(form[k],f_info->sides[0][1]))/2;

	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [edx]
	push	ecx
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	ebx
	call	_dot
	mov	edx, DWORD PTR _gauss2Dpt
	mov	eax, DWORD PTR tv5048[ebp]
	fld	QWORD PTR [eax+edx-8]
	mov	ecx, DWORD PTR [esi+1336]
	fld	QWORD PTR _sum$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	fmul	ST(1), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR _weight$89085[ebp]
	fmul	QWORD PTR __real@3fe0000000000000
	fadd	QWORD PTR [edx+edi*8]
	fstp	QWORD PTR [edx+edi*8]

; 123  :       f_info->grad[2][k] += weight*(gauss2Dpt[m][2]*sum
; 124  :                     - SDIM_dot(form[k],f_info->sides[0][0]))/2;

	mov	ecx, DWORD PTR _gauss2Dpt
	mov	edx, DWORD PTR _web+616
	fmul	QWORD PTR [eax+ecx]
	mov	eax, DWORD PTR [esi+1276]
	mov	ecx, DWORD PTR [eax]
	push	edx
	mov	edx, DWORD PTR [ecx]
	fstp	QWORD PTR tv5174[ebp]
	push	edx
	push	ebx
	call	_dot
	fsubr	QWORD PTR tv5174[ebp]
	mov	eax, DWORD PTR [esi+1336]
	mov	ecx, DWORD PTR [eax+8]
	fmul	QWORD PTR _weight$89085[ebp]
	mov	eax, ecx
	inc	edi
	add	ebx, 48					; 00000030H
	fmul	QWORD PTR __real@3fe0000000000000
	add	esp, 48					; 00000030H
	mov	DWORD PTR _k$[ebp], edi
	mov	DWORD PTR tv4952[ebp], ebx
	fadd	QWORD PTR [ecx+edi*8-8]
	fstp	QWORD PTR [eax+edi*8-8]
	mov	edx, DWORD PTR _web+616
	cmp	edi, edx
	jl	$LL70@facet_2for@9
$LN29@facet_2for@9:

; 97   :   for ( m = 0 ; m < gauss2D_num ; m++ )

	mov	eax, DWORD PTR _m$[ebp]
	add	DWORD PTR tv5048[ebp], 24		; 00000018H
	inc	eax
	mov	DWORD PTR _m$[ebp], eax
	cmp	eax, DWORD PTR _gauss2D_num
	jl	$LL71@facet_2for@9
	pop	edi
	pop	ebx
$LN28@facet_2for@9:

; 125  :      }
; 126  :   }
; 127  : 
; 128  :   return value/2;
; 129  : } // end facet_2form_integral_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _value$[ebp]
	fmul	QWORD PTR __real@3fe0000000000000
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_2form_integral_grad ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_facet_2form_integral_hess
; Function compile flags: /Ogtp
;	COMDAT _facet_2form_integral_hess
_TEXT	SEGMENT
_secondqXvS$ = -13564					; size = 1032
_sign$ = -12532						; size = 8
tv11166 = -12524					; size = 8
tv3691 = -12524						; size = 8
tv3672 = -12516						; size = 4
tv3581 = -12512						; size = 4
_value$ = -12508					; size = 8
_mi$ = -12500						; size = 4
tv3492 = -12496						; size = 4
_weight$89157 = -12492					; size = 8
tv12145 = -12484					; size = 8
_s2Fu$ = -12484						; size = 8
_sum$ = -12484						; size = 8
tv12179 = -12476					; size = 8
tv12178 = -12476					; size = 8
_s1Fu$ = -12476						; size = 8
_second$ = -12468					; size = 4
tv4396 = -12464						; size = 4
tv2972 = -12464						; size = 4
_f_info$GSCopy$ = -12460				; size = 4
tv10346 = -12456					; size = 8
tv3640 = -12456						; size = 8
tv6199 = -12452						; size = 4
tv4394 = -12452						; size = 4
_j$ = -12452						; size = 4
_m$ = -12448						; size = 4
tv11164 = -12444					; size = 8
tv3662 = -12444						; size = 8
tv4450 = -12440						; size = 4
_i$ = -12440						; size = 4
tv3689 = -12436						; size = 8
tv3660 = -12436						; size = 8
tv10241 = -12432					; size = 4
_k$ = -12432						; size = 4
tv11146 = -12428					; size = 4
tv4356 = -12428						; size = 4
tv10357 = -12424					; size = 8
tv10014 = -12420					; size = 4
tv9310 = -12420						; size = 4
tv8497 = -12420						; size = 4
tv7680 = -12420						; size = 4
tv6800 = -12420						; size = 4
tv4354 = -12420						; size = 4
tv2971 = -12420						; size = 4
_s1$ = -12416						; size = 4
_s2$ = -12412						; size = 4
tv11343 = -12408					; size = 4
tv4362 = -12408						; size = 4
tv3800 = -12408						; size = 4
tv11349 = -12404					; size = 4
tv4448 = -12404						; size = 4
tv3798 = -12404						; size = 4
tv11511 = -12400					; size = 4
tv5689 = -12400						; size = 4
tv5069 = -12400						; size = 4
tv4271 = -12400						; size = 4
tv11523 = -12396					; size = 4
tv5945 = -12396						; size = 4
tv5053 = -12396						; size = 4
tv4364 = -12396						; size = 4
tv11158 = -12392					; size = 4
tv6066 = -12392						; size = 4
tv5030 = -12392						; size = 4
tv4446 = -12392						; size = 4
_secondxJ$ = -12388					; size = 10368
_derivs$ = -2020					; size = 1728
_form$ = -292						; size = 288
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_facet_2form_integral_hess PROC				; COMDAT

; 145  : { int m,n,i,j,k,p,q;

	push	ebp
	mov	ebp, esp
	mov	eax, 13564				; 000034fcH
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 146  :   REAL value = 0.0;

	fldz
	push	esi
	mov	esi, DWORD PTR _f_info$[ebp]
	fstp	QWORD PTR _value$[ebp]

; 147  :   REAL form[MAXCOORD][MAXCOORD]; /* as antisymmetric matrix */
; 148  :   REAL derivs[MAXCOORD][MAXCOORD][MAXCOORD]; /* coord is last index */
; 149  :   MAT4D(second,MAXCOORD,MAXCOORD,MAXCOORD,MAXCOORD);

	push	6
	push	6
	push	6
	push	6
	lea	eax, DWORD PTR _secondxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _secondqXvS$[ebp]
	push	ecx
	mov	DWORD PTR _f_info$GSCopy$[ebp], esi
	call	_mat4d_setup

; 150  :   REAL sum;
; 151  :   REAL *s1 = f_info->sides[0][0];

	mov	edx, DWORD PTR [esi+1276]
	mov	DWORD PTR _second$[ebp], eax
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]

; 152  :   REAL *s2 = f_info->sides[0][1];

	mov	edx, DWORD PTR [eax+4]

; 153  :   REAL s1Fu,s2Fu,Fvs1,Fvs2,s1Fuvs2;
; 154  :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	eax, DWORD PTR [esi]
	and	eax, 134217727				; 07ffffffH
	mov	DWORD PTR _s1$[ebp], ecx
	mov	ecx, DWORD PTR _web+236
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	add	esp, 24					; 00000018H
	or	eax, ecx
	mov	DWORD PTR _s2$[ebp], edx
	je	SHORT $LN76@facet_2for@10
	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN303@facet_2for@10
$LN76@facet_2for@10:
	fld1
$LN303@facet_2for@10:

; 155  :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [esi+8]
	fstp	QWORD PTR _sign$[ebp]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list

; 156  : 
; 157  :   if ( web.modeltype == LAGRANGE ) 

	cmp	DWORD PTR _web+628, 3
	mov	DWORD PTR _mi$[ebp], eax
	jne	SHORT $LN73@facet_2for@10

; 158  :      return facet_2form_integral_lagrange_hess(f_info);

	push	esi
	call	_facet_2form_integral_lagrange_hess
	add	esp, 4
	pop	esi

; 221  :      }
; 222  :   }
; 223  : 
; 224  :   return value/2;
; 225  : } // end facet_2form_integral_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN73@facet_2for@10:

; 159  : 
; 160  :   for ( i = 0, k = 0 ; i < SDIM ; i++ ) 

	mov	eax, DWORD PTR _web+616
	fldz
	push	ebx
	push	edi
	xor	edi, edi
	test	eax, eax
	jle	SHORT $LN70@facet_2for@10
	lea	edx, DWORD PTR _derivs$[ebp]
	lea	ecx, DWORD PTR _form$[ebp]
	mov	DWORD PTR tv3798[ebp], edx
	mov	DWORD PTR tv3800[ebp], ecx
$LN72@facet_2for@10:

; 161  :   { form[i][i] = 0.0;

	mov	edx, DWORD PTR tv3800[ebp]

; 162  :      for ( n = 0 ; n < SDIM ;n++ )

	xor	esi, esi
	fst	QWORD PTR [edx]
	test	eax, eax
	jle	SHORT $LN71@facet_2for@10

; 161  :   { form[i][i] = 0.0;

	mov	ebx, DWORD PTR tv3798[ebp]
$LN69@facet_2for@10:

; 164  :         for ( j = 0 ; j < SDIM ;j++ )

	xor	edx, edx
	fst	QWORD PTR [ebx]
	test	eax, eax
	jle	SHORT $LN68@facet_2for@10

; 163  :      { derivs[i][i][n] = 0.0;

	mov	eax, DWORD PTR _second$[ebp]
	mov	ecx, DWORD PTR [eax+edi*4]
	mov	eax, DWORD PTR [ecx+edi*4]
	mov	ecx, DWORD PTR [eax+esi*4]
$LN66@facet_2for@10:

; 165  :           second[i][i][n][j] = 0.0;

	fst	QWORD PTR [ecx]
	mov	eax, DWORD PTR _web+616
	inc	edx
	add	ecx, 8
	cmp	edx, eax
	jl	SHORT $LN66@facet_2for@10
$LN68@facet_2for@10:

; 162  :      for ( n = 0 ; n < SDIM ;n++ )

	inc	esi
	add	ebx, 8
	cmp	esi, eax
	jl	SHORT $LN69@facet_2for@10
$LN71@facet_2for@10:

; 159  : 
; 160  :   for ( i = 0, k = 0 ; i < SDIM ; i++ ) 

	add	DWORD PTR tv3800[ebp], 56		; 00000038H
	add	DWORD PTR tv3798[ebp], 336		; 00000150H
	inc	edi
	cmp	edi, eax
	jl	SHORT $LN72@facet_2for@10
$LN70@facet_2for@10:

; 166  :      }
; 167  :   }
; 168  :   for ( m = 0 ; m < gauss2D_num ; m++ )

	cmp	DWORD PTR _gauss2D_num, 0
	mov	DWORD PTR _m$[ebp], 0
	jle	$LN302@facet_2for@10
$LN159@facet_2for@10:

; 169  :   { REAL weight = sign*gauss2Dwt[m];

	mov	edx, DWORD PTR _gauss2Dwt
	mov	ecx, DWORD PTR _m$[ebp]
	fld	QWORD PTR [edx+ecx*8]

; 170  :     f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	fmul	QWORD PTR _sign$[ebp]
	mov	edx, DWORD PTR [edx+1268]
	mov	ecx, DWORD PTR [edx+ecx*4]
	add	eax, eax
	fstp	QWORD PTR _weight$89157[ebp]

; 171  :     for ( i = 0, k = 0 ; i < SDIM ; i++ ) 

	mov	DWORD PTR _k$[ebp], 0
	fild	DWORD PTR _m$[ebp]
	fstp	QWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR _web+616
	test	eax, eax
	jle	$LN58@facet_2for@10

; 169  :   { REAL weight = sign*gauss2Dwt[m];

	xor	ecx, ecx
	mov	DWORD PTR tv4446[ebp], ecx
	mov	DWORD PTR tv4448[ebp], ecx
	mov	DWORD PTR tv4450[ebp], 1
$LN60@facet_2for@10:

; 172  :     { for ( j = i+1 ; j < SDIM ; j++,k++ ) 

	mov	ebx, DWORD PTR tv4450[ebp]
	cmp	ebx, eax
	jge	$LN59@facet_2for@10
	mov	edi, DWORD PTR tv4446[ebp]
	fstp	ST(0)
	mov	edx, ebx
	lea	ecx, DWORD PTR [edx+edi]
	lea	esi, DWORD PTR [ecx+ecx*2]
	add	esi, esi
	mov	DWORD PTR tv4271[ebp], esi
	lea	edx, DWORD PTR [edx+edi+5]
	lea	esi, DWORD PTR [edx+edx*2]
	add	esi, esi
	mov	DWORD PTR tv4354[ebp], esi
	lea	esi, DWORD PTR [ecx+ecx*2]
	lea	ecx, DWORD PTR _form$[ebp+ecx*8]
	add	esi, esi
	mov	DWORD PTR tv4362[ebp], ecx
	mov	ecx, DWORD PTR _mi$[ebp]
	lea	esi, DWORD PTR _derivs$[ebp+esi*8+8]
	mov	DWORD PTR tv4356[ebp], esi
	mov	esi, DWORD PTR _k$[ebp]
	lea	ecx, DWORD PTR [ecx+esi*4+232]
	mov	DWORD PTR tv4364[ebp], ecx
	lea	ecx, DWORD PTR [edx+edx*2]
	add	ecx, ecx
	lea	ecx, DWORD PTR _derivs$[ebp+ecx*8+8]
	lea	edx, DWORD PTR _form$[ebp+edx*8]
	mov	DWORD PTR tv4394[ebp], ecx
	mov	DWORD PTR tv4396[ebp], edx
	npad	11
$LL57@facet_2for@10:

; 173  :       { eval_second(mi->expr[k],f_info->gauss_pt[m],SDIM,
; 174  :                          form[i]+j, derivs[i][j],second[i][j],f_info->id);

	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, DWORD PTR _second$[ebp]
	push	edx
	mov	edx, DWORD PTR tv4448[ebp]
	mov	edx, DWORD PTR [edx+esi]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	esi, DWORD PTR tv4362[ebp]
	push	edx
	mov	edx, DWORD PTR tv4356[ebp]
	add	edx, -8					; fffffff8H
	push	edx
	push	esi
	push	eax
	mov	eax, DWORD PTR [ecx+1268]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR tv4364[ebp]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	ecx
	call	_eval_second

; 175  :         form[j][i] = - form[i][j];

	fld	QWORD PTR [esi]

; 176  :         for ( n = 0 ; n < SDIM ;n++ )

	mov	eax, DWORD PTR _web+616
	fchs
	mov	edx, DWORD PTR tv4396[ebp]
	add	esp, 28					; 0000001cH
	fstp	QWORD PTR [edx]
	xor	edi, edi
	cmp	eax, 4
	jl	SHORT $LC127@facet_2for@10

; 173  :       { eval_second(mi->expr[k],f_info->gauss_pt[m],SDIM,
; 174  :                          form[i]+j, derivs[i][j],second[i][j],f_info->id);

	mov	edx, DWORD PTR tv4394[ebp]
	mov	ecx, DWORD PTR tv4356[ebp]
	lea	esi, DWORD PTR [eax-4]
	shr	esi, 2
	inc	esi
	lea	edi, DWORD PTR [esi*4]

; 176  :         for ( n = 0 ; n < SDIM ;n++ )

$LL128@facet_2for@10:

; 177  :            derivs[j][i][n] = -derivs[i][j][n];

	fld	QWORD PTR [ecx-8]
	add	ecx, 32					; 00000020H
	fchs
	add	edx, 32					; 00000020H
	dec	esi
	fstp	QWORD PTR [edx-40]
	fld	QWORD PTR [ecx-32]
	fchs
	fstp	QWORD PTR [edx-32]
	fld	QWORD PTR [ecx-24]
	fchs
	fstp	QWORD PTR [edx-24]
	fld	QWORD PTR [ecx-16]
	fchs
	fstp	QWORD PTR [edx-16]
	jne	SHORT $LL128@facet_2for@10
$LC127@facet_2for@10:

; 176  :         for ( n = 0 ; n < SDIM ;n++ )

	cmp	edi, eax
	jge	SHORT $LN126@facet_2for@10
	mov	esi, DWORD PTR tv4354[ebp]
	mov	edx, DWORD PTR tv4271[ebp]
	add	esi, edi
	add	edx, edi
	mov	ecx, eax
	lea	esi, DWORD PTR _derivs$[ebp+esi*8]
	lea	edx, DWORD PTR _derivs$[ebp+edx*8]
	sub	ecx, edi
$LC54@facet_2for@10:

; 177  :            derivs[j][i][n] = -derivs[i][j][n];

	fld	QWORD PTR [edx]
	add	edx, 8
	fchs
	add	esi, 8
	dec	ecx
	fstp	QWORD PTR [esi-8]
	jne	SHORT $LC54@facet_2for@10
$LN126@facet_2for@10:

; 178  :         for ( n = 0 ; n < SDIM ;n++ )

	xor	edi, edi
	test	eax, eax
	jle	SHORT $LN56@facet_2for@10
$LL51@facet_2for@10:

; 179  :            for ( p = 0 ; p < SDIM ;p++ )

	xor	edx, edx
	test	eax, eax
	jle	SHORT $LN50@facet_2for@10
	mov	esi, DWORD PTR _second$[ebp]
	mov	ecx, DWORD PTR [esi+ebx*4]
	mov	eax, DWORD PTR tv4448[ebp]
	mov	ecx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR [eax+esi]
	mov	eax, DWORD PTR [eax+ebx*4]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	esi, DWORD PTR [eax+edi*4]
	sub	esi, ecx
	npad	4
$LL48@facet_2for@10:

; 180  :              second[j][i][n][p] = -second[i][j][n][p];

	fld	QWORD PTR [esi+ecx]
	inc	edx
	fchs
	add	ecx, 8
	fstp	QWORD PTR [ecx-8]
	mov	eax, DWORD PTR _web+616
	cmp	edx, eax
	jl	SHORT $LL48@facet_2for@10
$LN50@facet_2for@10:

; 178  :         for ( n = 0 ; n < SDIM ;n++ )

	inc	edi
	cmp	edi, eax
	jl	SHORT $LL51@facet_2for@10
$LN56@facet_2for@10:

; 172  :     { for ( j = i+1 ; j < SDIM ; j++,k++ ) 

	add	DWORD PTR tv4362[ebp], 8
	add	DWORD PTR tv4394[ebp], 288		; 00000120H
	add	DWORD PTR tv4354[ebp], 36		; 00000024H
	add	DWORD PTR tv4271[ebp], 6
	inc	DWORD PTR _k$[ebp]
	add	DWORD PTR tv4364[ebp], 4
	mov	ecx, 48					; 00000030H
	add	DWORD PTR tv4356[ebp], ecx
	add	DWORD PTR tv4396[ebp], ecx
	inc	ebx
	cmp	ebx, eax
	jl	$LL57@facet_2for@10
	fldz
$LN59@facet_2for@10:

; 171  :     for ( i = 0, k = 0 ; i < SDIM ; i++ ) 

	mov	ecx, DWORD PTR tv4450[ebp]
	add	DWORD PTR tv4448[ebp], 4
	add	DWORD PTR tv4446[ebp], 6
	inc	ecx
	mov	DWORD PTR tv4450[ebp], ecx
	dec	ecx
	cmp	ecx, eax
	jl	$LN60@facet_2for@10
$LN58@facet_2for@10:

; 181  :       }
; 182  :     }
; 183  :     for ( i = 0, sum = 0.0 ; i < SDIM ; i++ )

	fld	ST(0)
	test	eax, eax
	jle	$LN43@facet_2for@10
	mov	esi, DWORD PTR _s1$[ebp]
	mov	ecx, DWORD PTR _s2$[ebp]
	lea	edx, DWORD PTR _form$[ebp+8]
	mov	DWORD PTR tv5030[ebp], 0
	mov	DWORD PTR tv5053[ebp], edx
	mov	DWORD PTR tv5069[ebp], eax
$LN174@facet_2for@10:

; 184  :      for ( j = 0 ; j < SDIM ; j++ )

	xor	edi, edi
	cmp	eax, 4
	jl	SHORT $LC130@facet_2for@10
	lea	ebx, DWORD PTR [eax-4]
	shr	ebx, 2
	add	ecx, 16					; 00000010H
	inc	ebx
	lea	edi, DWORD PTR [ebx*4]
$LN172@facet_2for@10:

; 185  :         sum += s1[i]*form[i][j]*s2[j];

	fld	QWORD PTR [edx-8]
	add	ecx, 32					; 00000020H
	fmul	QWORD PTR [esi]
	add	edx, 32					; 00000020H
	dec	ebx
	fmul	QWORD PTR [ecx-48]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [esi]
	fmul	QWORD PTR [edx-32]
	fmul	QWORD PTR [ecx-40]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx-24]
	fmul	QWORD PTR [esi]
	fmul	QWORD PTR [ecx-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx-16]
	fmul	QWORD PTR [esi]
	fmul	QWORD PTR [ecx-24]
	faddp	ST(1), ST(0)
	jne	SHORT $LN172@facet_2for@10

; 184  :      for ( j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR _s2$[ebp]
$LC130@facet_2for@10:
	cmp	edi, eax
	jge	SHORT $LN44@facet_2for@10
	mov	edx, DWORD PTR tv5030[ebp]
	add	edx, edi
	lea	edx, DWORD PTR _form$[ebp+edx*8]
$LC42@facet_2for@10:

; 185  :         sum += s1[i]*form[i][j]*s2[j];

	fld	QWORD PTR [esi]
	inc	edi
	fmul	QWORD PTR [edx]
	add	edx, 8
	fmul	QWORD PTR [ecx+edi*8-8]
	faddp	ST(1), ST(0)
	cmp	edi, eax
	jl	SHORT $LC42@facet_2for@10
$LN44@facet_2for@10:

; 181  :       }
; 182  :     }
; 183  :     for ( i = 0, sum = 0.0 ; i < SDIM ; i++ )

	mov	edx, DWORD PTR tv5053[ebp]
	add	DWORD PTR tv5030[ebp], 6
	add	edx, 48					; 00000030H
	add	esi, 8
	dec	DWORD PTR tv5069[ebp]
	mov	DWORD PTR tv5053[ebp], edx
	jne	$LN174@facet_2for@10
$LN43@facet_2for@10:

; 186  :     value += weight*sum;

	fmul	QWORD PTR _weight$89157[ebp]

; 187  :     /* gradient */
; 188  :     for ( k = 0 ; k < SDIM ; k++ )

	xor	ebx, ebx
	mov	DWORD PTR _k$[ebp], ebx
	fadd	QWORD PTR _value$[ebp]
	fstp	QWORD PTR _value$[ebp]
	test	eax, eax
	jle	$LN160@facet_2for@10
	mov	ecx, DWORD PTR _m$[ebp]
	lea	ecx, DWORD PTR [ecx+ecx*2]
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
	mov	DWORD PTR tv2971[ebp], ecx
	lea	ecx, DWORD PTR _form$[ebp]
	mov	DWORD PTR tv6199[ebp], ecx
$LL39@facet_2for@10:

; 189  :     { for ( i = 0, sum = 0.0 ; i < SDIM ; i++ )

	xor	edi, edi
	fst	QWORD PTR _sum$[ebp]
	test	eax, eax
	jle	$LN34@facet_2for@10
	lea	edx, DWORD PTR _derivs$[ebp+ebx*8+48]
	mov	DWORD PTR tv5945[ebp], edi
	mov	DWORD PTR tv6066[ebp], edx
$LN36@facet_2for@10:

; 190  :         for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	cmp	eax, 4
	jl	SHORT $LN166@facet_2for@10
	mov	edx, DWORD PTR _s2$[ebp]
	mov	ecx, DWORD PTR tv6066[ebp]
	lea	esi, DWORD PTR [eax-4]
	shr	esi, 2
	inc	esi
	mov	DWORD PTR tv5689[ebp], esi
	add	esi, esi
	add	edx, 16					; 00000010H
	add	esi, esi
$LN162@facet_2for@10:
	mov	ebx, DWORD PTR _s1$[ebp]

; 191  :               sum += s1[i]*derivs[i][j][k]*s2[j];

	fld	QWORD PTR [ecx-48]
	fmul	QWORD PTR [ebx+edi*8]
	add	ecx, 192				; 000000c0H
	add	edx, 32					; 00000020H
	dec	DWORD PTR tv5689[ebp]
	fmul	QWORD PTR [edx-48]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-192]
	fmul	QWORD PTR [ebx+edi*8]
	fmul	QWORD PTR [edx-40]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-144]
	fmul	QWORD PTR [ebx+edi*8]
	fmul	QWORD PTR [edx-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-96]
	fmul	QWORD PTR [ebx+edi*8]
	fmul	QWORD PTR [edx-24]
	faddp	ST(1), ST(0)
	jne	SHORT $LN162@facet_2for@10

; 190  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	ebx, DWORD PTR _k$[ebp]
$LN166@facet_2for@10:
	cmp	esi, eax
	jge	SHORT $LN35@facet_2for@10
	mov	ecx, DWORD PTR tv5945[ebp]
	add	ecx, esi
	lea	edx, DWORD PTR [ecx+ecx*2]
	lea	ecx, DWORD PTR [ebx+edx*2]
	lea	ecx, DWORD PTR _derivs$[ebp+ecx*8]
$LN171@facet_2for@10:

; 191  :               sum += s1[i]*derivs[i][j][k]*s2[j];

	mov	edx, DWORD PTR _s1$[ebp]
	fld	QWORD PTR [edx+edi*8]
	mov	edx, DWORD PTR _s2$[ebp]
	fmul	QWORD PTR [ecx]
	inc	esi
	add	ecx, 48					; 00000030H
	fmul	QWORD PTR [edx+esi*8-8]
	faddp	ST(1), ST(0)
	cmp	esi, eax
	jl	SHORT $LN171@facet_2for@10
$LN35@facet_2for@10:

; 189  :     { for ( i = 0, sum = 0.0 ; i < SDIM ; i++ )

	add	DWORD PTR tv6066[ebp], 288		; 00000120H
	add	DWORD PTR tv5945[ebp], 6
	inc	edi
	cmp	edi, eax
	jl	$LN36@facet_2for@10

; 191  :               sum += s1[i]*derivs[i][j][k]*s2[j];

	fst	QWORD PTR _sum$[ebp]
$LN34@facet_2for@10:

; 192  :       f_info->grad[0][k] += weight*(gauss2Dpt[m][0]*sum
; 193  :                     - SDIM_dot(form[k],s2)
; 194  :                     + SDIM_dot(form[k],s1))/2;

	mov	ecx, DWORD PTR _gauss2Dpt
	mov	edx, DWORD PTR tv2971[ebp]
	fmul	QWORD PTR [edx+ecx]
	mov	edi, DWORD PTR tv6199[ebp]
	push	eax
	mov	eax, DWORD PTR _s2$[ebp]
	push	eax
	fstp	QWORD PTR tv12179[ebp]
	push	edi
	call	_dot
	fsubr	QWORD PTR tv12179[ebp]
	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR _s1$[ebp]
	push	ecx
	fstp	QWORD PTR tv12178[ebp]
	push	edx
	push	edi
	call	_dot
	fadd	QWORD PTR tv12178[ebp]
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [esi+1336]
	fmul	QWORD PTR _weight$89157[ebp]
	mov	ecx, DWORD PTR [eax]

; 195  :       f_info->grad[1][k] += weight*(gauss2Dpt[m][1]*sum
; 196  :                     + SDIM_dot(form[k],s2))/2;

	mov	edx, DWORD PTR _s2$[ebp]
	mov	eax, ecx
	fmul	QWORD PTR __real@3fe0000000000000
	fadd	QWORD PTR [ecx+ebx*8]
	fstp	QWORD PTR [eax+ebx*8]
	mov	ecx, DWORD PTR _web+616
	push	ecx
	push	edx
	push	edi
	call	_dot
	mov	ecx, DWORD PTR _gauss2Dpt
	mov	eax, DWORD PTR tv2971[ebp]
	fld	QWORD PTR [eax+ecx+8]
	mov	edx, DWORD PTR [esi+1336]
	fld	QWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	fmul	ST(1), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR _weight$89157[ebp]
	fmul	QWORD PTR __real@3fe0000000000000
	fadd	QWORD PTR [ecx+ebx*8]
	fstp	QWORD PTR [ecx+ebx*8]

; 197  :       f_info->grad[2][k] += weight*(gauss2Dpt[m][2]*sum
; 198  :                     - SDIM_dot(form[k],s1))/2;

	mov	edx, DWORD PTR _gauss2Dpt
	mov	ecx, DWORD PTR _s1$[ebp]
	fmul	QWORD PTR [eax+edx+16]
	mov	eax, DWORD PTR _web+616
	push	eax
	push	ecx
	push	edi
	fstp	QWORD PTR tv12145[ebp]
	call	_dot
	fsubr	QWORD PTR tv12145[ebp]
	mov	edx, DWORD PTR [esi+1336]
	mov	eax, DWORD PTR [edx+8]
	fmul	QWORD PTR _weight$89157[ebp]
	mov	edx, eax
	inc	ebx
	add	edi, 48					; 00000030H
	fmul	QWORD PTR __real@3fe0000000000000
	add	esp, 48					; 00000030H
	mov	DWORD PTR _k$[ebp], ebx
	mov	DWORD PTR tv6199[ebp], edi
	fadd	QWORD PTR [eax+ebx*8-8]
	fstp	QWORD PTR [edx+ebx*8-8]
	mov	eax, DWORD PTR _web+616
	fldz
	cmp	ebx, eax
	jl	$LL39@facet_2for@10
$LN160@facet_2for@10:

; 199  :     }
; 200  :     /* hessian */
; 201  :     for ( p = 0 ; p < SDIM ; p++ )

	xor	edi, edi
	cmp	eax, edi
	jle	$LN62@facet_2for@10
	lea	ecx, DWORD PTR _derivs$[ebp+288]
	lea	edx, DWORD PTR _form$[ebp]
	mov	DWORD PTR tv11343[ebp], edi
	mov	DWORD PTR tv11349[ebp], edi
	mov	DWORD PTR tv11511[ebp], ecx
	mov	DWORD PTR tv11523[ebp], edx
$LN30@facet_2for@10:

; 202  :      for ( q = 0 ; q < SDIM ; q++ )

	xor	edx, edx
	test	eax, eax
	jle	$LN29@facet_2for@10
	mov	esi, DWORD PTR _gauss2Dpt
	mov	ecx, DWORD PTR _m$[ebp]
	lea	ecx, DWORD PTR [ecx+ecx*2]
	lea	ebx, DWORD PTR [esi+ecx*8]
	mov	DWORD PTR tv3492[ebp], ebx
	lea	ebx, DWORD PTR [esi+ecx*8+8]
	lea	ecx, DWORD PTR [esi+ecx*8+16]
	mov	DWORD PTR tv3581[ebp], ecx
	mov	ecx, DWORD PTR _m$[ebp]
	lea	ecx, DWORD PTR [ecx+ecx*2]

; 214  :        for ( i = 0 ; i < FACET_VERTS ; i++ )

	lea	ecx, DWORD PTR [esi+ecx*8]
	mov	esi, DWORD PTR tv11511[ebp]
	mov	DWORD PTR tv2972[ebp], ecx
	mov	ecx, DWORD PTR tv11523[ebp]
	mov	DWORD PTR tv3672[ebp], ebx
	mov	DWORD PTR tv11146[ebp], ecx
	mov	DWORD PTR tv11158[ebp], esi
	npad	7
$LL27@facet_2for@10:

; 203  :      { for ( i = 0, s1Fu = 0.0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	fld	ST(0)
	fst	QWORD PTR _s1Fu$[ebp]
	cmp	eax, 4
	jl	SHORT $LN167@facet_2for@10
	mov	ecx, DWORD PTR _s1$[ebp]
	lea	ebx, DWORD PTR [eax-4]
	shr	ebx, 2
	inc	ebx
	mov	DWORD PTR tv6800[ebp], ebx
	add	ebx, ebx
	add	ecx, 16					; 00000010H
	add	ebx, ebx
	mov	DWORD PTR _i$[ebp], ebx
	mov	ebx, DWORD PTR tv6800[ebp]
$LN137@facet_2for@10:

; 204  :           s1Fu += s1[i]*derivs[i][q][p];

	fld	QWORD PTR [esi-288]
	add	ecx, 32					; 00000020H
	fmul	QWORD PTR [ecx-48]
	add	esi, 1152				; 00000480H
	dec	ebx
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-40]
	fmul	QWORD PTR [esi-1152]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [esi-864]
	fmul	QWORD PTR [ecx-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [esi-576]
	fmul	QWORD PTR [ecx-24]
	faddp	ST(1), ST(0)
	jne	SHORT $LN137@facet_2for@10
	mov	ecx, DWORD PTR _i$[ebp]
	fst	QWORD PTR _s1Fu$[ebp]
$LN167@facet_2for@10:

; 203  :      { for ( i = 0, s1Fu = 0.0 ; i < SDIM ; i++ )

	cmp	ecx, eax
	jge	SHORT $LN246@facet_2for@10
	mov	ebx, DWORD PTR _s1$[ebp]
	lea	esi, DWORD PTR [ecx+ecx*2]
	lea	esi, DWORD PTR [edx+esi*2]
	lea	esi, DWORD PTR [esi+esi*2]
	lea	esi, DWORD PTR [edi+esi*2]
	lea	esi, DWORD PTR _derivs$[ebp+esi*8]
$LC24@facet_2for@10:

; 204  :           s1Fu += s1[i]*derivs[i][q][p];

	fld	QWORD PTR [ebx+ecx*8]
	inc	ecx
	fmul	QWORD PTR [esi]
	add	esi, 288				; 00000120H
	faddp	ST(1), ST(0)
	cmp	ecx, eax
	jl	SHORT $LC24@facet_2for@10
	fstp	QWORD PTR _s1Fu$[ebp]
	jmp	SHORT $LN135@facet_2for@10
$LN246@facet_2for@10:
	fstp	ST(0)
$LN135@facet_2for@10:

; 205  :        for ( i = 0, s2Fu = 0.0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	fld	ST(0)
	fst	QWORD PTR _s2Fu$[ebp]
	cmp	eax, 4
	jl	SHORT $LN168@facet_2for@10
	mov	ecx, DWORD PTR _s2$[ebp]
	mov	esi, DWORD PTR tv11158[ebp]
	lea	ebx, DWORD PTR [eax-4]
	shr	ebx, 2
	inc	ebx
	mov	DWORD PTR tv7680[ebp], ebx
	add	ebx, ebx
	add	ecx, 16					; 00000010H
	add	ebx, ebx
	mov	DWORD PTR _i$[ebp], ebx
	mov	ebx, DWORD PTR tv7680[ebp]
$LN140@facet_2for@10:

; 206  :          s2Fu += s2[i]*derivs[i][q][p];

	fld	QWORD PTR [esi-288]
	add	ecx, 32					; 00000020H
	fmul	QWORD PTR [ecx-48]
	add	esi, 1152				; 00000480H
	dec	ebx
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-40]
	fmul	QWORD PTR [esi-1152]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [esi-864]
	fmul	QWORD PTR [ecx-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [esi-576]
	fmul	QWORD PTR [ecx-24]
	faddp	ST(1), ST(0)
	jne	SHORT $LN140@facet_2for@10
	mov	ecx, DWORD PTR _i$[ebp]
	fst	QWORD PTR _s2Fu$[ebp]
$LN168@facet_2for@10:

; 205  :        for ( i = 0, s2Fu = 0.0 ; i < SDIM ; i++ )

	cmp	ecx, eax
	jge	SHORT $LN258@facet_2for@10
	mov	ebx, DWORD PTR _s2$[ebp]
	lea	esi, DWORD PTR [ecx+ecx*2]
	lea	esi, DWORD PTR [edx+esi*2]
	lea	esi, DWORD PTR [esi+esi*2]
	lea	esi, DWORD PTR [edi+esi*2]
	lea	esi, DWORD PTR _derivs$[ebp+esi*8]
$LC21@facet_2for@10:

; 206  :          s2Fu += s2[i]*derivs[i][q][p];

	fld	QWORD PTR [ebx+ecx*8]
	inc	ecx
	fmul	QWORD PTR [esi]
	add	esi, 288				; 00000120H
	faddp	ST(1), ST(0)
	cmp	ecx, eax
	jl	SHORT $LC21@facet_2for@10
	fstp	QWORD PTR _s2Fu$[ebp]
	jmp	SHORT $LN138@facet_2for@10
$LN258@facet_2for@10:
	fstp	ST(0)
$LN138@facet_2for@10:

; 207  :        for ( i = 0, Fvs1 = 0.0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	fld	ST(0)
	cmp	eax, 4
	jl	SHORT $LN169@facet_2for@10
	mov	esi, DWORD PTR _s1$[ebp]
	mov	ecx, DWORD PTR tv11343[ebp]
	lea	ebx, DWORD PTR [eax-4]
	shr	ebx, 2
	inc	ebx
	mov	DWORD PTR tv8497[ebp], ebx
	add	ebx, ebx
	add	ecx, edx
	add	esi, 16					; 00000010H
	add	ebx, ebx
	mov	DWORD PTR _i$[ebp], ebx
	mov	ebx, DWORD PTR tv8497[ebp]
	lea	ecx, DWORD PTR _derivs$[ebp+ecx*8+48]
$LN143@facet_2for@10:

; 208  :          Fvs1 += derivs[p][i][q]*s1[i];

	fld	QWORD PTR [esi-16]
	add	ecx, 192				; 000000c0H
	fmul	QWORD PTR [ecx-240]
	add	esi, 32					; 00000020H
	dec	ebx
	faddp	ST(1), ST(0)
	fld	QWORD PTR [esi-40]
	fmul	QWORD PTR [ecx-192]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-144]
	fmul	QWORD PTR [esi-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [esi-24]
	fmul	QWORD PTR [ecx-96]
	faddp	ST(1), ST(0)
	jne	SHORT $LN143@facet_2for@10

; 207  :        for ( i = 0, Fvs1 = 0.0 ; i < SDIM ; i++ )

	mov	ecx, DWORD PTR _i$[ebp]
$LN169@facet_2for@10:
	cmp	ecx, eax
	jge	SHORT $LN141@facet_2for@10
	mov	esi, DWORD PTR tv11349[ebp]
	mov	ebx, DWORD PTR _s1$[ebp]
	add	esi, ecx
	lea	esi, DWORD PTR [esi+esi*2]
	lea	esi, DWORD PTR [edx+esi*2]
	lea	esi, DWORD PTR _derivs$[ebp+esi*8]
$LC18@facet_2for@10:

; 208  :          Fvs1 += derivs[p][i][q]*s1[i];

	fld	QWORD PTR [ebx+ecx*8]
	inc	ecx
	fmul	QWORD PTR [esi]
	add	esi, 48					; 00000030H
	faddp	ST(1), ST(0)
	cmp	ecx, eax
	jl	SHORT $LC18@facet_2for@10
$LN141@facet_2for@10:

; 209  :        for ( i = 0, Fvs2 = 0.0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	fld	ST(1)
	cmp	eax, 4
	jl	SHORT $LN170@facet_2for@10
	mov	esi, DWORD PTR _s2$[ebp]
	mov	ecx, DWORD PTR tv11343[ebp]
	lea	ebx, DWORD PTR [eax-4]
	shr	ebx, 2
	inc	ebx
	mov	DWORD PTR tv9310[ebp], ebx
	add	ebx, ebx
	add	ecx, edx
	add	esi, 16					; 00000010H
	add	ebx, ebx
	mov	DWORD PTR _i$[ebp], ebx
	mov	ebx, DWORD PTR tv9310[ebp]
	lea	ecx, DWORD PTR _derivs$[ebp+ecx*8+48]
$LN146@facet_2for@10:

; 210  :          Fvs2 += derivs[p][i][q]*s2[i];

	fld	QWORD PTR [ecx-48]
	add	ecx, 192				; 000000c0H
	fmul	QWORD PTR [esi-16]
	add	esi, 32					; 00000020H
	dec	ebx
	faddp	ST(1), ST(0)
	fld	QWORD PTR [esi-40]
	fmul	QWORD PTR [ecx-192]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-144]
	fmul	QWORD PTR [esi-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-96]
	fmul	QWORD PTR [esi-24]
	faddp	ST(1), ST(0)
	jne	SHORT $LN146@facet_2for@10

; 209  :        for ( i = 0, Fvs2 = 0.0 ; i < SDIM ; i++ )

	mov	ecx, DWORD PTR _i$[ebp]
$LN170@facet_2for@10:
	cmp	ecx, eax
	jge	SHORT $LN144@facet_2for@10
	mov	esi, DWORD PTR tv11349[ebp]
	mov	ebx, DWORD PTR _s2$[ebp]
	add	esi, ecx
	lea	esi, DWORD PTR [esi+esi*2]
	lea	esi, DWORD PTR [edx+esi*2]
	lea	esi, DWORD PTR _derivs$[ebp+esi*8]
$LC15@facet_2for@10:

; 210  :          Fvs2 += derivs[p][i][q]*s2[i];

	fld	QWORD PTR [ebx+ecx*8]
	inc	ecx
	fmul	QWORD PTR [esi]
	add	esi, 48					; 00000030H
	faddp	ST(1), ST(0)
	cmp	ecx, eax
	jl	SHORT $LC15@facet_2for@10
$LN144@facet_2for@10:

; 211  :        for ( i = 0, s1Fuvs2 = 0.0 ; i < SDIM ; i++ )

	xor	ebx, ebx
	mov	DWORD PTR _i$[ebp], ebx
	test	eax, eax
	jle	$LN10@facet_2for@10
	mov	ecx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR tv10241[ebp], ecx
$LN12@facet_2for@10:

; 212  :          for ( j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	cmp	eax, 4
	jl	$LC148@facet_2for@10
	mov	ecx, DWORD PTR _second$[ebp]
	mov	ecx, DWORD PTR [ecx+ebx*4]
	mov	esi, DWORD PTR _s2$[ebp]
	lea	ebx, DWORD PTR [eax-4]
	shr	ebx, 2
	inc	ebx
	mov	DWORD PTR tv10014[ebp], ebx
	add	ebx, ebx
	add	esi, 16					; 00000010H
	add	ecx, 8
	add	ebx, ebx
	mov	DWORD PTR _j$[ebp], ebx
$LN149@facet_2for@10:

; 213  :             s1Fuvs2 += s1[i]*second[i][j][p][q]*s2[j];

	mov	ebx, DWORD PTR [ecx-8]
	mov	ebx, DWORD PTR [ebx+edi*4]
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR tv10241[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [ecx-4]
	mov	ebx, DWORD PTR [ebx+edi*4]
	add	ecx, 16					; 00000010H
	fmul	QWORD PTR [esi-16]
	add	esi, 32					; 00000020H
	dec	DWORD PTR tv10014[ebp]
	faddp	ST(3), ST(0)
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR tv10241[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [ecx-16]
	mov	ebx, DWORD PTR [ebx+edi*4]
	fmul	QWORD PTR [esi-40]
	faddp	ST(3), ST(0)
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR tv10241[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [ecx-12]
	mov	ebx, DWORD PTR [ebx+edi*4]
	fmul	QWORD PTR [esi-32]
	faddp	ST(3), ST(0)
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR tv10241[ebp]
	fmul	QWORD PTR [ebx]
	fmul	QWORD PTR [esi-24]
	faddp	ST(3), ST(0)
	jne	SHORT $LN149@facet_2for@10

; 212  :          for ( j = 0 ; j < SDIM ; j++ )

	mov	ebx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
$LC148@facet_2for@10:
	cmp	ecx, eax
	jge	SHORT $LN11@facet_2for@10
	mov	esi, DWORD PTR _second$[ebp]
	mov	esi, DWORD PTR [esi+ebx*4]
	lea	esi, DWORD PTR [esi+ecx*4]
$LC9@facet_2for@10:

; 213  :             s1Fuvs2 += s1[i]*second[i][j][p][q]*s2[j];

	mov	ebx, DWORD PTR [esi]
	mov	ebx, DWORD PTR [ebx+edi*4]
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR tv10241[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR _s2$[ebp]
	inc	ecx
	add	esi, 4
	fmul	QWORD PTR [ebx+ecx*8-8]
	faddp	ST(3), ST(0)
	cmp	ecx, eax
	jl	SHORT $LC9@facet_2for@10

; 212  :          for ( j = 0 ; j < SDIM ; j++ )

	mov	ebx, DWORD PTR _i$[ebp]
$LN11@facet_2for@10:

; 211  :        for ( i = 0, s1Fuvs2 = 0.0 ; i < SDIM ; i++ )

	add	DWORD PTR tv10241[ebp], 8
	inc	ebx
	mov	DWORD PTR _i$[ebp], ebx
	cmp	ebx, eax
	jl	$LN12@facet_2for@10
$LN10@facet_2for@10:

; 214  :        for ( i = 0 ; i < FACET_VERTS ; i++ )

	mov	eax, DWORD PTR tv2972[ebp]
	xor	ecx, ecx
$LN158@facet_2for@10:

; 215  :          for ( j = 0 ; j < FACET_VERTS ; j++ )
; 216  :             f_info->hess[i][j][p][q] += weight*(
; 217  :                    sign1[i]*form[p][q]*sign2[j] - sign2[i]*form[p][q]*sign1[j]
; 218  :                      + gauss2Dpt[m][i]*(s1Fu*sign2[j] - s2Fu*sign1[j])
; 219  :                      + gauss2Dpt[m][j]*(sign1[i]*Fvs2 - sign2[i]*Fvs1)
; 220  :                      + gauss2Dpt[m][i]*gauss2Dpt[m][j]*s1Fuvs2 )/2;

	fild	DWORD PTR _sign1[ecx]
	mov	ebx, DWORD PTR tv11146[ebp]
	fild	DWORD PTR _sign2
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	fild	DWORD PTR _sign2[ecx]
	mov	esi, DWORD PTR [esi+1340]
	mov	esi, DWORD PTR [ecx+esi]
	mov	esi, DWORD PTR [esi]
	fst	QWORD PTR tv10357[ebp]
	mov	esi, DWORD PTR [esi+edi*4]
	fild	DWORD PTR _sign1
	lea	esi, DWORD PTR [esi+edx*8]
	fstp	QWORD PTR tv3640[ebp]
	fld	QWORD PTR [ebx]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(2)
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv3492[ebp]
	fmulp	ST(2), ST(0)
	fld	QWORD PTR tv3640[ebp]
	fmul	ST(2), ST(0)
	fxch	ST(1)
	fsubrp	ST(2), ST(0)
	fxch	ST(2)
	fmul	QWORD PTR _s1Fu$[ebp]
	fld	QWORD PTR _s2Fu$[ebp]
	fmul	ST(3), ST(0)
	fxch	ST(1)
	fsubrp	ST(3), ST(0)
	fxch	ST(2)
	fmul	QWORD PTR [eax]
	faddp	ST(1), ST(0)
	fxch	ST(2)
	fmul	ST(0), ST(3)
	fld	QWORD PTR tv10357[ebp]
	fmul	ST(0), ST(5)
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [ebx]
	faddp	ST(2), ST(0)
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv11146[ebp]
	fmul	QWORD PTR [eax]
	fmul	ST(0), ST(5)
	faddp	ST(2), ST(0)
	fld	QWORD PTR _weight$89157[ebp]
	fmul	ST(2), ST(0)
	fxch	ST(2)
	fmul	QWORD PTR __real@3fe0000000000000
	fadd	QWORD PTR [esi]
	fstp	QWORD PTR [esi]
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	fild	DWORD PTR _sign1[ecx]
	mov	esi, DWORD PTR [esi+1340]
	mov	esi, DWORD PTR [esi+ecx]
	mov	esi, DWORD PTR [esi+4]
	fst	QWORD PTR tv10346[ebp]
	mov	esi, DWORD PTR [esi+edi*4]
	fild	DWORD PTR _sign2+4
	lea	esi, DWORD PTR [esi+edx*8]
	fstp	QWORD PTR tv3660[ebp]
	fild	DWORD PTR _sign2[ecx]
	fst	QWORD PTR tv10357[ebp]
	fild	DWORD PTR _sign1+4
	fstp	QWORD PTR tv3662[ebp]
	fld	QWORD PTR [ebx]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR tv3660[ebp]
	fld	QWORD PTR [ebx]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv11166[ebp]
	fld	QWORD PTR tv3662[ebp]
	fld	QWORD PTR tv11166[ebp]
	fmul	ST(0), ST(1)
	fsubp	ST(2), ST(0)
	fld	QWORD PTR tv3660[ebp]
	fmul	QWORD PTR _s1Fu$[ebp]
	fxch	ST(1)
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [eax]
	mov	ebx, DWORD PTR tv3672[ebp]
	add	ecx, 4
	add	eax, 8
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv10346[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv10357[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [ebx]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv11146[ebp]
	fmul	QWORD PTR [eax-8]
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fmul	QWORD PTR __real@3fe0000000000000
	fadd	QWORD PTR [esi]
	fstp	QWORD PTR [esi]
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	fild	DWORD PTR _sign1[ecx-4]
	mov	esi, DWORD PTR [esi+1340]
	mov	esi, DWORD PTR [esi+ecx-4]
	mov	esi, DWORD PTR [esi+8]
	fst	QWORD PTR tv10346[ebp]
	mov	esi, DWORD PTR [esi+edi*4]
	fild	DWORD PTR _sign2+8
	lea	esi, DWORD PTR [esi+edx*8]
	fstp	QWORD PTR tv3689[ebp]
	fild	DWORD PTR _sign2[ecx-4]
	fst	QWORD PTR tv10357[ebp]
	fild	DWORD PTR _sign1+8
	fstp	QWORD PTR tv3691[ebp]
	fld	QWORD PTR [ebx]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR tv3689[ebp]
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv3581[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv11164[ebp]
	fld	QWORD PTR tv3691[ebp]
	fld	QWORD PTR tv11164[ebp]
	fmul	ST(0), ST(1)
	fsubp	ST(2), ST(0)
	fld	QWORD PTR tv3689[ebp]
	fmul	QWORD PTR _s1Fu$[ebp]
	fxch	ST(1)
	fmulp	ST(3), ST(0)
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR [eax-8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv10346[ebp]
	fmul	ST(0), ST(3)
	fld	QWORD PTR tv10357[ebp]
	fmul	ST(0), ST(5)
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [ebx]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx]
	fmul	QWORD PTR [eax-8]
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	fmul	QWORD PTR __real@3fe0000000000000
	fadd	QWORD PTR [esi]
	fstp	QWORD PTR [esi]
	cmp	ecx, 12					; 0000000cH
	jl	$LN158@facet_2for@10

; 214  :        for ( i = 0 ; i < FACET_VERTS ; i++ )

	mov	esi, DWORD PTR tv11158[ebp]
	fstp	ST(2)
	mov	eax, DWORD PTR _web+616
	fstp	ST(1)
	add	DWORD PTR tv11146[ebp], 8
	fstp	ST(0)
	fldz
	inc	edx
	add	esi, 48					; 00000030H
	mov	DWORD PTR tv11158[ebp], esi
	cmp	edx, eax
	jl	$LL27@facet_2for@10
$LN29@facet_2for@10:

; 199  :     }
; 200  :     /* hessian */
; 201  :     for ( p = 0 ; p < SDIM ; p++ )

	add	DWORD PTR tv11349[ebp], 6
	add	DWORD PTR tv11523[ebp], 48		; 00000030H
	add	DWORD PTR tv11511[ebp], 8
	add	DWORD PTR tv11343[ebp], 36		; 00000024H
	inc	edi
	cmp	edi, eax
	jl	$LN30@facet_2for@10
$LN62@facet_2for@10:

; 166  :      }
; 167  :   }
; 168  :   for ( m = 0 ; m < gauss2D_num ; m++ )

	mov	ecx, DWORD PTR _m$[ebp]
	inc	ecx
	mov	DWORD PTR _m$[ebp], ecx
	cmp	ecx, DWORD PTR _gauss2D_num
	jl	$LN159@facet_2for@10
$LN302@facet_2for@10:

; 221  :      }
; 222  :   }
; 223  : 
; 224  :   return value/2;
; 225  : } // end facet_2form_integral_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(0)
	fld	QWORD PTR _value$[ebp]
	pop	edi
	fmul	QWORD PTR __real@3fe0000000000000
	pop	ebx
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_2form_integral_hess ENDP
_TEXT	ENDS
PUBLIC	__real@3fa5555555555555
PUBLIC	__$ArrayPad$
PUBLIC	_gravity_all
;	COMDAT __real@3fa5555555555555
CONST	SEGMENT
__real@3fa5555555555555 DQ 03fa5555555555555r	; 0.0416667
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _gravity_all
_TEXT	SEGMENT
_jac$ = -176						; size = 8
_sum$ = -168						; size = 8
_gdensity$ = -160					; size = 8
_c$ = -160						; size = 8
_i$ = -156						; size = 4
tv2670 = -152						; size = 4
_dsdz$ = -148						; size = 48
_djdx$ = -100						; size = 48
_djdy$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_mode$ = 12						; size = 4
_gravity_all PROC					; COMDAT

; 587  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 176				; 000000b0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 588  :   int i,j;
; 589  :   REAL jac; /* jacobian */
; 590  :   REAL sum = 0.0;  /* quadratic z sum of facet */

	fldz
	push	esi
	mov	esi, DWORD PTR _f_info$[ebp]
	fstp	QWORD PTR _sum$[ebp]

; 591  :   REAL djdx[MAXCOORD],djdy[MAXCOORD],dsdz[MAXCOORD];
; 592  :   REAL c = 1/24.;  /* coefficient */
; 593  :   body_id b_id;
; 594  :   REAL gdensity;
; 595  :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [esi+8]
	fld	QWORD PTR __real@3fa5555555555555
	push	edi
	fstp	QWORD PTR _c$[ebp]
	cdq
	mov	edi, eax

; 596  : 
; 597  :   if ( web.modeltype == QUADRATIC ) return gravity_all_q(f_info,mode);

	mov	eax, DWORD PTR _web+628
	xor	edi, edx
	sub	edi, edx
	imul	edi, 2928				; 00000b70H
	add	edi, DWORD PTR _meth_inst_list
	cmp	eax, 2
	jne	SHORT $LN27@gravity_al@3
	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	push	esi
	call	_gravity_all_q
	add	esp, 8
	pop	edi
	pop	esi

; 662  :      }
; 663  :   return jac*sum*c;
; 664  : } // end gravity_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN27@gravity_al@3:

; 598  :   if ( web.modeltype == LAGRANGE )  

	cmp	eax, 3
	jne	SHORT $LN26@gravity_al@3

; 599  :       return gravity_all_lagrange(f_info,mode);

	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	push	esi
	call	_gravity_all_lagrange
	add	esp, 8
	pop	edi
	pop	esi

; 662  :      }
; 663  :   return jac*sum*c;
; 664  : } // end gravity_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN26@gravity_al@3:
	push	ebx

; 600  : 
; 601  :   b_id = get_facet_body(f_info->id);

	mov	ebx, DWORD PTR [esi]
	push	ebx
	call	_get_facet_body

; 602  :   if ( mi->flags & (IMPLICIT_INSTANCE|FAKE_IMPLICIT) )
; 603  :   { /* include density difference */
; 604  :      gdensity = 0.0;

	fldz
	add	esp, 4
	test	DWORD PTR [edi+140], 69206016		; 04200000H
	je	SHORT $LN58@gravity_al@3
	fstp	QWORD PTR _gdensity$[ebp]

; 605  :      if ( valid_id(b_id) )

	test	eax, 268435456				; 10000000H
	je	SHORT $LN24@gravity_al@3

; 606  :           gdensity += get_body_density(b_id);

	push	eax
	call	_get_body_density
	fadd	QWORD PTR __real@0000000000000000
	add	esp, 4
	fstp	QWORD PTR _gdensity$[ebp]
$LN24@gravity_al@3:

; 607  :      b_id = get_facet_body(facet_inverse(f_info->id));

	xor	ebx, 134217728				; 08000000H
	push	ebx
	call	_get_facet_body
	add	esp, 4

; 608  :      if ( valid_id(b_id) )

	test	eax, 268435456				; 10000000H
	je	SHORT $LN57@gravity_al@3

; 609  :           gdensity -= get_body_density(b_id);

	push	eax
	call	_get_body_density
	fsubr	QWORD PTR _gdensity$[ebp]
	add	esp, 4
	jmp	SHORT $LN23@gravity_al@3
$LN57@gravity_al@3:
	fld	QWORD PTR _gdensity$[ebp]
$LN23@gravity_al@3:

; 610  :      if ( gdensity == 0.0 )

	fld	ST(0)
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	SHORT $LN22@gravity_al@3
	pop	ebx
	fstp	ST(1)
	pop	edi
	pop	esi

; 662  :      }
; 663  :   return jac*sum*c;
; 664  : } // end gravity_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN22@gravity_al@3:

; 611  :         return 0.0;
; 612  :      c *= gdensity;

	fxch	ST(1)
	fmul	QWORD PTR __real@3fa5555555555555
	jmp	SHORT $LN25@gravity_al@3
$LN58@gravity_al@3:
	fld	QWORD PTR _c$[ebp]
$LN25@gravity_al@3:

; 613  :   }
; 614  : 
; 615  :   jac = f_info->sides[0][0][0]*f_info->sides[0][1][1] 
; 616  :             - f_info->sides[0][1][0]*f_info->sides[0][0][1]; 

	mov	edx, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	fld	QWORD PTR [ecx+8]
	fmul	QWORD PTR [eax]

; 617  :   for ( i = 0 ; i < f_info->vcount ; i++ )

	xor	ebx, ebx
	fld	QWORD PTR [eax+8]
	mov	eax, DWORD PTR [esi+12]
	fmul	QWORD PTR [ecx]
	mov	DWORD PTR _i$[ebp], ebx
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _jac$[ebp]
	fld	QWORD PTR _sum$[ebp]
	test	eax, eax
	jle	$LN19@gravity_al@3

; 613  :   }
; 614  : 
; 615  :   jac = f_info->sides[0][0][0]*f_info->sides[0][1][1] 
; 616  :             - f_info->sides[0][1][0]*f_info->sides[0][0][1]; 

	lea	eax, DWORD PTR [esi+416]
	mov	DWORD PTR tv2670[ebp], eax
$LN63@gravity_al@3:

; 618  :     for ( j = 0 ; j <= i ; j++ )

	xor	edi, edi
	test	ebx, ebx
	js	SHORT $LN20@gravity_al@3
	lea	edx, DWORD PTR [ebx+1]
	cmp	edx, 4
	jl	SHORT $LC47@gravity_al@3

; 619  :       sum += f_info->x[i][2]*f_info->x[j][2];

	mov	ecx, DWORD PTR tv2670[ebp]
	mov	ecx, DWORD PTR [ecx]
	shr	edx, 2
	lea	eax, DWORD PTR [esi+420]
	lea	edi, DWORD PTR [edx*4]
$LN48@gravity_al@3:
	mov	ebx, DWORD PTR [eax-4]
	fld	QWORD PTR [ebx+16]
	mov	ebx, DWORD PTR [eax]
	fmul	QWORD PTR [ecx+16]
	add	eax, 16					; 00000010H
	dec	edx
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+16]
	mov	ebx, DWORD PTR [eax-12]
	fmul	QWORD PTR [ecx+16]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+16]
	mov	ebx, DWORD PTR [eax-8]
	fmul	QWORD PTR [ecx+16]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+16]
	fmul	QWORD PTR [ecx+16]
	faddp	ST(1), ST(0)
	jne	SHORT $LN48@gravity_al@3
	mov	ebx, DWORD PTR _i$[ebp]
$LC47@gravity_al@3:

; 618  :     for ( j = 0 ; j <= i ; j++ )

	cmp	edi, ebx
	jg	SHORT $LN20@gravity_al@3
	mov	edx, DWORD PTR tv2670[ebp]
	mov	edx, DWORD PTR [edx]
	mov	eax, ebx
	sub	eax, edi
	lea	ecx, DWORD PTR [esi+edi*4+416]
	inc	eax
$LC18@gravity_al@3:

; 619  :       sum += f_info->x[i][2]*f_info->x[j][2];

	mov	edi, DWORD PTR [ecx]
	fld	QWORD PTR [edi+16]
	add	ecx, 4
	dec	eax
	fmul	QWORD PTR [edx+16]
	faddp	ST(1), ST(0)
	jne	SHORT $LC18@gravity_al@3
$LN20@gravity_al@3:

; 617  :   for ( i = 0 ; i < f_info->vcount ; i++ )

	add	DWORD PTR tv2670[ebp], 4
	inc	ebx
	mov	DWORD PTR _i$[ebp], ebx
	cmp	ebx, DWORD PTR [esi+12]
	jl	$LN63@gravity_al@3
$LN19@gravity_al@3:

; 620  : 
; 621  :   if ( mode == METHOD_VALUE ) return jac*sum*c;

	mov	edi, DWORD PTR _mode$[ebp]
	cmp	edi, 1767				; 000006e7H
	jne	SHORT $LN90@gravity_al@3
	fstp	ST(3)
	jmp	$LN112@gravity_al@3
$LN90@gravity_al@3:
	fstp	ST(1)

; 622  : 
; 623  :   djdx[0] = (-f_info->sides[0][1][1] + f_info->sides[0][0][1]);

	mov	eax, DWORD PTR [esi+1276]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR [ecx+4]
	fsub	QWORD PTR [ecx+8]

; 624  :   djdx[1] = f_info->sides[0][1][1];
; 625  :   djdx[2] = -f_info->sides[0][0][1];
; 626  :   djdy[0] = (-f_info->sides[0][0][0] + f_info->sides[0][1][0]);
; 627  :   djdy[1] = -f_info->sides[0][1][0];
; 628  :   djdy[2] = f_info->sides[0][0][0];
; 629  :   dsdz[0] = 2*f_info->x[0][2]+f_info->x[1][2]+f_info->x[2][2];

	mov	edx, DWORD PTR [esi+424]
	fstp	QWORD PTR _djdx$[ebp]
	fld	QWORD PTR [ecx+8]
	fstp	QWORD PTR _djdx$[ebp+8]
	fld	QWORD PTR [eax+8]
	fchs
	fstp	QWORD PTR _djdx$[ebp+16]
	fld	QWORD PTR [ecx]
	fsub	QWORD PTR [eax]
	fstp	QWORD PTR _djdy$[ebp]
	fld	QWORD PTR [ecx]
	mov	ecx, DWORD PTR [esi+420]
	fchs
	fstp	QWORD PTR _djdy$[ebp+8]
	fld	QWORD PTR [eax]
	mov	eax, DWORD PTR [esi+416]
	fstp	QWORD PTR _djdy$[ebp+16]
	fld	QWORD PTR [eax+16]
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR [ecx+16]
	fadd	QWORD PTR [edx+16]
	fst	QWORD PTR _dsdz$[ebp]

; 630  :   dsdz[1] = f_info->x[0][2]+2*f_info->x[1][2]+f_info->x[2][2];

	fld	QWORD PTR [ecx+16]
	fmul	ST(0), ST(2)
	fadd	QWORD PTR [eax+16]
	fadd	QWORD PTR [edx+16]
	fst	QWORD PTR _dsdz$[ebp+8]

; 631  :   dsdz[2] = f_info->x[0][2]+f_info->x[1][2]+2*f_info->x[2][2];

	fld	QWORD PTR [eax+16]
	fadd	QWORD PTR [ecx+16]

; 632  : 
; 633  :   for ( i = 0 ; i < 3;  i++ )
; 634  :   { f_info->grad[i][0] = djdx[i]*sum*c;

	mov	ecx, DWORD PTR [esi+1336]
	fld	QWORD PTR [edx+16]
	mov	edx, DWORD PTR [ecx]
	fmulp	ST(4), ST(0)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR _dsdz$[ebp+16]
	fld	QWORD PTR _djdx$[ebp]
	fld	ST(0)
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(5)
	fstp	QWORD PTR [edx]

; 635  :     f_info->grad[i][1] = djdy[i]*sum*c;

	mov	eax, DWORD PTR [esi+1336]
	fld	QWORD PTR _djdy$[ebp]
	mov	ecx, DWORD PTR [eax]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(5)
	fstp	QWORD PTR [ecx+8]

; 636  :     f_info->grad[i][2] = dsdz[i]*jac*c;

	mov	edx, DWORD PTR [esi+1336]
	mov	eax, DWORD PTR [edx]
	fld	ST(1)
	fld	QWORD PTR _jac$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(6)
	fstp	QWORD PTR [eax+16]
	mov	ecx, DWORD PTR [esi+1336]
	fld	QWORD PTR _djdx$[ebp+8]
	mov	edx, DWORD PTR [ecx+4]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(6)
	fstp	QWORD PTR [edx]
	mov	eax, DWORD PTR [esi+1336]
	fld	QWORD PTR _djdy$[ebp+8]
	mov	ecx, DWORD PTR [eax+4]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(6)
	fstp	QWORD PTR [ecx+8]
	mov	edx, DWORD PTR [esi+1336]
	mov	eax, DWORD PTR [edx+4]
	fld	ST(3)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(6)
	fstp	QWORD PTR [eax+16]
	mov	ecx, DWORD PTR [esi+1336]
	fld	QWORD PTR _djdx$[ebp+16]
	mov	edx, DWORD PTR [ecx+8]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(6)
	fstp	QWORD PTR [edx]
	mov	eax, DWORD PTR [esi+1336]
	fld	QWORD PTR _djdy$[ebp+16]
	mov	ecx, DWORD PTR [eax+8]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(6)
	fstp	QWORD PTR [ecx+8]
	mov	edx, DWORD PTR [esi+1336]
	fld	QWORD PTR _dsdz$[ebp+16]
	mov	eax, DWORD PTR [edx+8]
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(6)
	fstp	QWORD PTR [eax+16]

; 637  :   }
; 638  : 
; 639  :   if ( mode == METHOD_GRADIENT ) return jac*sum*c;

	cmp	edi, 4321				; 000010e1H
	jne	SHORT $LN11@gravity_al@3
	fstp	ST(6)
	fstp	ST(1)
	fstp	ST(1)
	jmp	$LN113@gravity_al@3
$LN11@gravity_al@3:

; 640  : 
; 641  :   /* second partials, self */
; 642  :   for ( i = 0 ; i < 3;  i++ )
; 643  :   { f_info->hess[i][i][0][2] = f_info->hess[i][i][2][0] = djdx[i]*dsdz[i]*c;

	mov	ecx, DWORD PTR [esi+1340]
	fld	ST(2)
	mov	edx, DWORD PTR [ecx]
	fmulp	ST(2), ST(0)
	mov	eax, DWORD PTR [edx]
	fxch	ST(1)
	mov	ecx, DWORD PTR [eax+8]
	fmul	ST(0), ST(5)
	fst	QWORD PTR [ecx]
	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	fstp	QWORD PTR [edx+16]

; 644  :     f_info->hess[i][i][1][2] = f_info->hess[i][i][2][1] = djdy[i]*dsdz[i]*c; 

	mov	eax, DWORD PTR [esi+1340]
	mov	ecx, DWORD PTR [eax]
	fxch	ST(1)
	fmul	QWORD PTR _djdy$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	fmul	ST(0), ST(4)
	fst	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	fstp	QWORD PTR [ecx+16]

; 645  :     f_info->hess[i][i][2][2] = 2*jac*c;

	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	fld	ST(0)
	mov	edx, DWORD PTR [ecx+8]
	fadd	ST(0), ST(1)
	fmul	ST(0), ST(4)
	fst	QWORD PTR [edx+16]

; 646  :     f_info->hess[i][i][0][0] = f_info->hess[i][i][0][1] 
; 647  :         = f_info->hess[i][i][1][0] = f_info->hess[i][i][1][1] = 0.0;

	mov	eax, DWORD PTR [esi+1340]
	mov	ecx, DWORD PTR [eax]
	fxch	ST(5)
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	fst	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	fst	QWORD PTR [ecx]
	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	fst	QWORD PTR [edx+8]
	mov	eax, DWORD PTR [esi+1340]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	fst	QWORD PTR [eax]
	mov	ecx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [ecx+4]
	fld	ST(2)
	fmul	QWORD PTR _djdx$[ebp+8]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+8]
	fmul	ST(0), ST(5)
	fst	QWORD PTR [ecx]
	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	fstp	QWORD PTR [edx+16]
	mov	eax, DWORD PTR [esi+1340]
	mov	ecx, DWORD PTR [eax+4]
	fxch	ST(2)
	fmul	QWORD PTR _djdy$[ebp+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+8]
	fmul	ST(0), ST(4)
	fst	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]

; 645  :     f_info->hess[i][i][2][2] = 2*jac*c;

	fstp	QWORD PTR [ecx+16]
	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx+4]
	fxch	ST(4)
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	fst	QWORD PTR [edx+16]

; 646  :     f_info->hess[i][i][0][0] = f_info->hess[i][i][0][1] 
; 647  :         = f_info->hess[i][i][1][0] = f_info->hess[i][i][1][1] = 0.0;

	mov	eax, DWORD PTR [esi+1340]
	mov	ecx, DWORD PTR [eax+4]
	fxch	ST(1)
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	fst	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	fst	QWORD PTR [ecx]
	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	fst	QWORD PTR [edx+8]
	mov	eax, DWORD PTR [esi+1340]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	fst	QWORD PTR [eax]
	mov	ecx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [ecx+8]
	fld	QWORD PTR _dsdz$[ebp+16]
	mov	eax, DWORD PTR [edx+8]
	fld	QWORD PTR _djdx$[ebp+16]
	mov	ecx, DWORD PTR [eax+8]
	fmul	ST(0), ST(1)

; 648  :   }
; 649  : 
; 650  :   /* second partials, mixed */
; 651  :   for ( i = 0 ; i < 3 ; i++ )

	xor	edi, edi
	fmul	ST(0), ST(5)
	fst	QWORD PTR [ecx]
	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	fstp	QWORD PTR [edx+16]
	mov	eax, DWORD PTR [esi+1340]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	fmul	QWORD PTR _djdy$[ebp+16]
	mov	eax, DWORD PTR [edx+8]
	fmul	ST(0), ST(4)
	fst	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+4]
	fstp	QWORD PTR [ecx+16]
	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx+8]
	fxch	ST(1)
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	fstp	QWORD PTR [edx+16]
	mov	eax, DWORD PTR [esi+1340]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+4]
	fst	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+4]
	fst	QWORD PTR [ecx]
	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	fst	QWORD PTR [edx+8]
	mov	eax, DWORD PTR [esi+1340]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx]
	fst	QWORD PTR [eax]
$LN62@gravity_al@3:

; 652  :     for ( j = 0 ; j < 3 ; j++ )

	xor	ecx, ecx
$LN4@gravity_al@3:

; 653  :      { if ( j == i ) continue;

	cmp	ecx, edi
	je	$LN3@gravity_al@3

; 654  :         f_info->hess[i][j][0][0] = f_info->hess[i][j][1][1] = 0.0;

	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [edx+4]
	fst	QWORD PTR [eax+8]
	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [edx]
	fst	QWORD PTR [eax]

; 655  :         f_info->hess[i][j][0][1] = (j==((i+1)%3)) ? sum*c : -sum*c;

	lea	eax, DWORD PTR [edi+1]
	cdq
	fld	ST(2)
	mov	ebx, 3
	fmul	ST(0), ST(2)
	idiv	ebx
	fld	ST(0)
	cmp	ecx, edx
	je	SHORT $LN31@gravity_al@3
	fchs
$LN31@gravity_al@3:
	mov	eax, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [eax+edi*4]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [eax]
	fstp	QWORD PTR [eax+8]

; 656  :         f_info->hess[i][j][1][0] = (j==((i+1)%3)) ? -sum*c : sum*c;

	cmp	ecx, edx
	jne	SHORT $LN33@gravity_al@3
	fchs
$LN33@gravity_al@3:
	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [edx+4]
	fstp	QWORD PTR [eax]

; 657  :         f_info->hess[i][j][0][2] = djdx[i]*dsdz[j]*c;

	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx+edi*4]
	fld	QWORD PTR _djdx$[ebp+edi*8]
	fmul	QWORD PTR _dsdz$[ebp+ecx*8]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [edx]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR [eax+16]

; 658  :         f_info->hess[i][j][2][0] = djdx[j]*dsdz[i]*c;

	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx+edi*4]
	fld	QWORD PTR _djdx$[ebp+ecx*8]
	fmul	QWORD PTR _dsdz$[ebp+edi*8]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [edx+8]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR [eax]

; 659  :         f_info->hess[i][j][1][2] = djdy[i]*dsdz[j]*c;

	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx+edi*4]
	fld	QWORD PTR _djdy$[ebp+edi*8]
	fmul	QWORD PTR _dsdz$[ebp+ecx*8]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [edx+4]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR [eax+16]

; 660  :         f_info->hess[i][j][2][1] = djdy[j]*dsdz[i]*c;

	mov	edx, DWORD PTR [esi+1340]
	fld	QWORD PTR _djdy$[ebp+ecx*8]
	mov	eax, DWORD PTR [edx+edi*4]
	fmul	QWORD PTR _dsdz$[ebp+edi*8]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [edx+8]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR [eax+8]

; 661  :         f_info->hess[i][j][2][2] = jac*c;

	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx+edi*4]
	fld	ST(3)
	mov	edx, DWORD PTR [eax+ecx*4]
	fmul	ST(0), ST(3)
	mov	eax, DWORD PTR [edx+8]
	fstp	QWORD PTR [eax+16]
$LN3@gravity_al@3:

; 652  :     for ( j = 0 ; j < 3 ; j++ )

	inc	ecx
	cmp	ecx, 3
	jl	$LN4@gravity_al@3

; 648  :   }
; 649  : 
; 650  :   /* second partials, mixed */
; 651  :   for ( i = 0 ; i < 3 ; i++ )

	inc	edi
	cmp	edi, 3
	jl	$LN62@gravity_al@3
$LN113@gravity_al@3:
	fstp	ST(0)
$LN112@gravity_al@3:

; 662  :      }
; 663  :   return jac*sum*c;
; 664  : } // end gravity_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fmulp	ST(2), ST(0)
	pop	ebx
	pop	edi
	xor	ecx, ebp
	fmulp	ST(1), ST(0)
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_gravity_all ENDP
_TEXT	ENDS
PUBLIC	_gravity_energy
; Function compile flags: /Ogtp
;	COMDAT _gravity_energy
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_gravity_energy PROC					; COMDAT

; 880  : {

	push	ebp
	mov	ebp, esp

; 881  :  return gravity_all(f_info,METHOD_VALUE);

	mov	eax, DWORD PTR _f_info$[ebp]
	push	1767					; 000006e7H
	push	eax
	call	_gravity_all
	add	esp, 8

; 882  : }

	pop	ebp
	ret	0
_gravity_energy ENDP
_TEXT	ENDS
PUBLIC	_gravity_grads
; Function compile flags: /Ogtp
;	COMDAT _gravity_grads
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_gravity_grads PROC					; COMDAT

; 897  : {

	push	ebp
	mov	ebp, esp

; 898  :  return gravity_all(f_info,METHOD_GRADIENT);

	mov	eax, DWORD PTR _f_info$[ebp]
	push	4321					; 000010e1H
	push	eax
	call	_gravity_all
	add	esp, 8

; 899  : }

	pop	ebp
	ret	0
_gravity_grads ENDP
_TEXT	ENDS
PUBLIC	_gravity_hessian
; Function compile flags: /Ogtp
;	COMDAT _gravity_hessian
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_gravity_hessian PROC					; COMDAT

; 913  : {

	push	ebp
	mov	ebp, esp

; 914  :   return gravity_all(f_info,METHOD_HESSIAN);

	mov	eax, DWORD PTR _f_info$[ebp]
	push	8763					; 0000223bH
	push	eax
	call	_gravity_all
	add	esp, 8

; 915  : }

	pop	ebp
	ret	0
_gravity_hessian ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_facet_general_value
; Function compile flags: /Ogtp
;	COMDAT _facet_general_value
_TEXT	SEGMENT
_sign$ = -140						; size = 8
_value$ = -132						; size = 8
_normal$ = -124						; size = 4
_mi$ = -120						; size = 4
_f_info$GSCopy$ = -116					; size = 4
_m$ = -112						; size = 4
_z$ = -108						; size = 104
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_facet_general_value PROC				; COMDAT

; 1453 : { int m,k;

	push	ebp
	mov	ebp, esp
	sub	esp, 140				; 0000008cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1454 :   REAL value = 0.0;
; 1455 :   REAL z[2*MAXCOORD+1];  /*  pointers to coord and tangent */
; 1456 :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	ecx, DWORD PTR _web+236
	fldz
	push	ebx
	fst	QWORD PTR _value$[ebp]
	push	esi
	mov	esi, DWORD PTR _f_info$[ebp]
	mov	eax, DWORD PTR [esi]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	or	eax, ecx

; 1466 :   { for ( k = 0 ; k < SDIM ; k++ ) z[k] = f_info->gauss_pt[m][k]; 

	mov	DWORD PTR _f_info$GSCopy$[ebp], esi
	je	SHORT $LN14@facet_gene@9

; 1454 :   REAL value = 0.0;
; 1455 :   REAL z[2*MAXCOORD+1];  /*  pointers to coord and tangent */
; 1456 :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN54@facet_gene@9
$LN14@facet_gene@9:
	fld1
$LN54@facet_gene@9:

; 1457 :   REAL *normal = z+SDIM;

	mov	ebx, DWORD PTR _web+616
	fstp	QWORD PTR _sign$[ebp]

; 1458 :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [esi+8]
	lea	edx, DWORD PTR _z$[ebp+ebx*8]
	mov	DWORD PTR _normal$[ebp], edx
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list

; 1459 : 
; 1460 :   if ( web.modeltype == LAGRANGE )

	cmp	DWORD PTR _web+628, 3
	mov	DWORD PTR _mi$[ebp], eax
	jne	SHORT $LN11@facet_gene@9

; 1461 :      return facet_general_value_lagr(f_info);

	push	esi
	fstp	ST(0)
	call	_facet_general_value_lagr
	add	esp, 4
	pop	esi
	pop	ebx

; 1472 :   }
; 1473 :   facet_general_flag = 0;
; 1474 :   return value/web.simplex_factorial;  /* triangle factor */
; 1475 : } // end facet_general_value()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@facet_gene@9:
	push	edi

; 1462 : 
; 1463 :   facet_general_flag = 1;
; 1464 : 
; 1465 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	xor	edi, edi
	mov	DWORD PTR _facet_general_flag, 1
	mov	DWORD PTR _m$[ebp], edi
	cmp	DWORD PTR _gauss2D_num, ecx
	jle	$LN8@facet_gene@9
	jmp	SHORT $LN55@facet_gene@9
	npad	9
$LL53@facet_gene@9:
	mov	ebx, DWORD PTR _web+616
$LN55@facet_gene@9:

; 1466 :   { for ( k = 0 ; k < SDIM ; k++ ) z[k] = f_info->gauss_pt[m][k]; 

	xor	eax, eax
	fstp	ST(0)
	cmp	ebx, 4
	jl	SHORT $LC23@facet_gene@9

; 1462 : 
; 1463 :   facet_general_flag = 1;
; 1464 : 
; 1465 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	mov	ecx, DWORD PTR [esi+1268]
	lea	edx, DWORD PTR [ecx+edi*4]

; 1466 :   { for ( k = 0 ; k < SDIM ; k++ ) z[k] = f_info->gauss_pt[m][k]; 

	lea	ecx, DWORD PTR _z$[ebp+8]
	mov	esi, 16					; 00000010H
	mov	edi, 24					; 00000018H
	sub	esi, ecx
	sub	edi, ecx
	npad	7
$LL24@facet_gene@9:
	mov	ebx, DWORD PTR [edx]
	fld	QWORD PTR [ebx+eax*8]
	lea	ecx, DWORD PTR _z$[ebp+eax*8+8]
	fstp	QWORD PTR [ecx-8]
	mov	ebx, DWORD PTR [edx]
	fld	QWORD PTR [ebx+eax*8+8]
	add	eax, 4
	fstp	QWORD PTR [ecx]
	mov	ebx, DWORD PTR [edx]
	add	ebx, esi
	fld	QWORD PTR [ebx+ecx]
	fstp	QWORD PTR [ecx+8]
	mov	ebx, DWORD PTR [edx]
	add	ebx, edi
	fld	QWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR _web+616
	fstp	QWORD PTR [ecx+16]
	lea	ecx, DWORD PTR [ebx-3]
	cmp	eax, ecx
	jl	SHORT $LL24@facet_gene@9
	mov	edi, DWORD PTR _m$[ebp]
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
$LC23@facet_gene@9:
	cmp	eax, ebx
	jge	SHORT $LN22@facet_gene@9

; 1462 : 
; 1463 :   facet_general_flag = 1;
; 1464 : 
; 1465 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	mov	edx, DWORD PTR [esi+1268]
	lea	ecx, DWORD PTR [edx+edi*4]
	npad	5
$LC7@facet_gene@9:

; 1466 :   { for ( k = 0 ; k < SDIM ; k++ ) z[k] = f_info->gauss_pt[m][k]; 

	mov	edx, DWORD PTR [ecx]
	fld	QWORD PTR [edx+eax*8]
	inc	eax
	fstp	QWORD PTR _z$[ebp+eax*8-8]
	cmp	eax, ebx
	jl	SHORT $LC7@facet_gene@9
$LN22@facet_gene@9:

; 1467 :     cross_prod(f_info->sides[m][0],f_info->sides[m][1],normal);

	mov	eax, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [eax+edi*4]
	mov	ecx, DWORD PTR _normal$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	push	ecx
	push	edx
	push	eax
	call	_cross_prod

; 1468 :     if ( sign == -1.0 ) 

	fld	QWORD PTR _sign$[ebp]
	mov	ecx, DWORD PTR _web+616
	fld	ST(0)
	fld	QWORD PTR __real@bff0000000000000
	add	esp, 12					; 0000000cH
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN41@facet_gene@9

; 1469 :         for ( k = 0 ; k < SDIM ; k++ ) z[k+SDIM] *= sign ; 

	xor	esi, esi
	cmp	ecx, 4
	jl	SHORT $LC26@facet_gene@9
	lea	edx, DWORD PTR [ecx-4]
	shr	edx, 2
	inc	edx
	lea	eax, DWORD PTR _z$[ebp+ecx*8+8]
	lea	esi, DWORD PTR [edx*4]
$LN27@facet_gene@9:
	fld	ST(0)
	add	eax, 32					; 00000020H
	dec	edx
	fmul	QWORD PTR [eax-40]
	fstp	QWORD PTR [eax-40]
	fld	ST(0)
	fmul	QWORD PTR [eax-32]
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [eax-24]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax-24]
	fld	QWORD PTR [eax-16]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LN27@facet_gene@9
$LC26@facet_gene@9:
	cmp	esi, ecx
	jge	SHORT $LN48@facet_gene@9
	lea	eax, DWORD PTR [ecx+esi]
	mov	edx, ecx
	lea	eax, DWORD PTR _z$[ebp+eax*8]
	sub	edx, esi
$LC3@facet_gene@9:
	fld	QWORD PTR [eax]
	add	eax, 8
	dec	edx
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC3@facet_gene@9
$LN48@facet_gene@9:
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
$LN41@facet_gene@9:

; 1470 :     z[2*SDIM] = m; /* kludge for attr interpolation. */
; 1471 :     value += gauss2Dwt[m]*eval(mi->expr[0],z,f_info->id,NULL);

	mov	eax, DWORD PTR _mi$[ebp]
	fstp	ST(0)
	fild	DWORD PTR _m$[ebp]
	add	ecx, ecx
	push	0
	lea	edx, DWORD PTR _z$[ebp]
	fstp	QWORD PTR _z$[ebp+ecx*8]
	mov	ecx, DWORD PTR [esi]
	push	ecx
	mov	ecx, DWORD PTR [eax+232]
	push	edx
	push	ecx
	call	_eval
	mov	edx, DWORD PTR _gauss2Dwt
	fmul	QWORD PTR [edx+edi*8]
	inc	edi
	add	esp, 16					; 00000010H
	mov	DWORD PTR _m$[ebp], edi
	fadd	QWORD PTR _value$[ebp]
	fst	QWORD PTR _value$[ebp]
	cmp	edi, DWORD PTR _gauss2D_num
	jl	$LL53@facet_gene@9
$LN8@facet_gene@9:

; 1472 :   }
; 1473 :   facet_general_flag = 0;
; 1474 :   return value/web.simplex_factorial;  /* triangle factor */
; 1475 : } // end facet_general_value()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fdiv	QWORD PTR _web+792
	pop	edi
	pop	esi
	xor	ecx, ebp
	mov	DWORD PTR _facet_general_flag, 0
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_general_value ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_facet_general_grad
; Function compile flags: /Ogtp
;	COMDAT _facet_general_grad
_TEXT	SEGMENT
_val$ = -280						; size = 8
_value$ = -272						; size = 8
_sign$ = -264						; size = 8
_s$90036 = -256						; size = 4
_normal$ = -252						; size = 4
_coeff$90035 = -248					; size = 8
tv571 = -244						; size = 4
tv600 = -240						; size = 4
tv588 = -236						; size = 4
tv1187 = -232						; size = 4
tv595 = -228						; size = 4
tv1281 = -224						; size = 4
_mi$ = -220						; size = 4
_f_info$GSCopy$ = -216					; size = 4
tv1185 = -212						; size = 4
_m$ = -208						; size = 4
_derivs$ = -204						; size = 96
_z$ = -108						; size = 104
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_facet_general_grad PROC				; COMDAT

; 1486 : { int m,j,k;

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1487 :   REAL value = 0.0;
; 1488 :   REAL val;
; 1489 :   REAL derivs[2*MAXCOORD];
; 1490 :   REAL z[2*MAXCOORD+1];  /*  pointers to coord and tangent */
; 1491 :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	ecx, DWORD PTR _web+236
	fldz
	push	ebx
	fst	QWORD PTR _value$[ebp]
	mov	ebx, DWORD PTR _f_info$[ebp]
	mov	eax, DWORD PTR [ebx]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	or	eax, ecx
	push	edi

; 1515 :             f_info->grad[k][j] += coeff*(gpoly[m][k]*derivs[j]
; 1516 :               - sign*derivs[jj+SDIM]*(s[1][jjj]*gpd[0][k]-s[0][jjj]*gpd[1][k])
; 1517 :               - sign*derivs[jjj+SDIM]*(s[0][jj]*gpd[1][k]-s[1][jj]*gpd[0][k]));

	mov	DWORD PTR _f_info$GSCopy$[ebp], ebx
	je	SHORT $LN20@facet_gene@10

; 1487 :   REAL value = 0.0;
; 1488 :   REAL val;
; 1489 :   REAL derivs[2*MAXCOORD];
; 1490 :   REAL z[2*MAXCOORD+1];  /*  pointers to coord and tangent */
; 1491 :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN78@facet_gene@10
$LN20@facet_gene@10:
	fld1
$LN78@facet_gene@10:

; 1492 :   REAL *normal = z+SDIM;

	mov	ecx, DWORD PTR _web+616
	fstp	QWORD PTR _sign$[ebp]

; 1493 :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [ebx+8]
	lea	edx, DWORD PTR _z$[ebp+ecx*8]
	mov	DWORD PTR _normal$[ebp], edx
	cdq
	mov	edi, eax
	xor	edi, edx
	sub	edi, edx
	imul	edi, 2928				; 00000b70H
	add	edi, DWORD PTR _meth_inst_list

; 1494 : 
; 1495 :   if ( web.modeltype == LAGRANGE )

	cmp	DWORD PTR _web+628, 3
	mov	DWORD PTR _mi$[ebp], edi
	jne	SHORT $LN17@facet_gene@10

; 1496 :      return facet_general_grad_lagr(f_info);

	push	ebx
	fstp	ST(0)
	call	_facet_general_grad_lagr
	add	esp, 4
	pop	edi
	pop	ebx

; 1518 :          }
; 1519 :       }
; 1520 :   }
; 1521 :   facet_general_flag = 0;
; 1522 :   return value; 
; 1523 : } // end facet_general_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN17@facet_gene@10:

; 1497 : 
; 1498 :   facet_general_flag = 1;
; 1499 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	xor	edx, edx
	mov	DWORD PTR _facet_general_flag, 1
	mov	DWORD PTR _m$[ebp], edx
	cmp	DWORD PTR _gauss2D_num, edx
	jle	$LN14@facet_gene@10
	push	esi
	jmp	SHORT $LN79@facet_gene@10
	npad	11
$LL76@facet_gene@10:
	mov	ecx, DWORD PTR _web+616
	mov	edi, DWORD PTR _mi$[ebp]
$LN79@facet_gene@10:

; 1500 :   { 
; 1501 :      REAL coeff = gauss2Dwt[m]/web.simplex_factorial; 

	mov	eax, DWORD PTR _gauss2Dwt
	fstp	ST(0)
	fld	QWORD PTR [eax+edx*8]

; 1502 :      REAL **s = f_info->sides[m];

	mov	eax, DWORD PTR [ebx+1276]
	fdiv	QWORD PTR _web+792
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _s$90036[ebp], eax

; 1503 :      z[2*SDIM] = m; /* kludge for attr interpolation. */

	mov	eax, ecx
	add	eax, eax
	fstp	QWORD PTR _coeff$90035[ebp]
	fild	DWORD PTR _m$[ebp]
	fstp	QWORD PTR _z$[ebp+eax*8]

; 1504 :      for ( k = 0 ; k < SDIM ; k++ ) z[k] = f_info->gauss_pt[m][k]; 

	xor	eax, eax
	cmp	ecx, 4
	jl	SHORT $LC33@facet_gene@10

; 1497 : 
; 1498 :   facet_general_flag = 1;
; 1499 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	mov	ecx, DWORD PTR [ebx+1268]
	lea	edx, DWORD PTR [ecx+edx*4]

; 1504 :      for ( k = 0 ; k < SDIM ; k++ ) z[k] = f_info->gauss_pt[m][k]; 

	lea	ecx, DWORD PTR _z$[ebp+8]
	mov	esi, 16					; 00000010H
	mov	ebx, 24					; 00000018H
	sub	esi, ecx
	sub	ebx, ecx
$LL34@facet_gene@10:
	mov	edi, DWORD PTR [edx]
	fld	QWORD PTR [edi+eax*8]
	lea	ecx, DWORD PTR _z$[ebp+eax*8+8]
	fstp	QWORD PTR [ecx-8]
	mov	edi, DWORD PTR [edx]
	fld	QWORD PTR [edi+eax*8+8]
	add	eax, 4
	fstp	QWORD PTR [ecx]
	mov	edi, DWORD PTR [edx]
	add	edi, esi
	fld	QWORD PTR [edi+ecx]
	fstp	QWORD PTR [ecx+8]
	mov	edi, DWORD PTR [edx]
	add	edi, ebx
	fld	QWORD PTR [edi+ecx]
	fstp	QWORD PTR [ecx+16]
	mov	ecx, DWORD PTR _web+616
	lea	edi, DWORD PTR [ecx-3]
	cmp	eax, edi
	jl	SHORT $LL34@facet_gene@10
	mov	ebx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	mov	edi, DWORD PTR _mi$[ebp]
$LC33@facet_gene@10:
	cmp	eax, ecx
	jge	SHORT $LN32@facet_gene@10

; 1497 : 
; 1498 :   facet_general_flag = 1;
; 1499 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	mov	esi, DWORD PTR [ebx+1268]
	lea	esi, DWORD PTR [esi+edx*4]
$LC13@facet_gene@10:

; 1504 :      for ( k = 0 ; k < SDIM ; k++ ) z[k] = f_info->gauss_pt[m][k]; 

	mov	edi, DWORD PTR [esi]
	fld	QWORD PTR [edi+eax*8]
	inc	eax
	fstp	QWORD PTR _z$[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LC13@facet_gene@10
	mov	edi, DWORD PTR _mi$[ebp]
$LN32@facet_gene@10:

; 1505 :      cross_prod(f_info->sides[m][0],f_info->sides[m][1],normal);

	mov	eax, DWORD PTR [ebx+1276]
	mov	edx, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR _normal$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	ecx
	mov	ecx, DWORD PTR [edx]
	push	eax
	push	ecx
	call	_cross_prod

; 1506 :      if ( sign == -1.0 ) 

	fld	QWORD PTR _sign$[ebp]
	mov	edx, DWORD PTR _web+616
	fld	ST(0)
	fld	QWORD PTR __real@bff0000000000000
	add	esp, 12					; 0000000cH
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN64@facet_gene@10

; 1507 :         for ( k = 0 ; k < SDIM ; k++ ) z[k+SDIM] *= sign ; 

	xor	esi, esi
	cmp	edx, 4
	jl	SHORT $LC36@facet_gene@10
	lea	ecx, DWORD PTR [edx-4]
	shr	ecx, 2
	inc	ecx
	lea	eax, DWORD PTR _z$[ebp+edx*8+8]
	lea	esi, DWORD PTR [ecx*4]
$LN37@facet_gene@10:
	fld	ST(0)
	add	eax, 32					; 00000020H
	dec	ecx
	fmul	QWORD PTR [eax-40]
	fstp	QWORD PTR [eax-40]
	fld	ST(0)
	fmul	QWORD PTR [eax-32]
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [eax-24]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax-24]
	fld	QWORD PTR [eax-16]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LN37@facet_gene@10
$LC36@facet_gene@10:
	cmp	esi, edx
	jge	SHORT $LN64@facet_gene@10
	lea	eax, DWORD PTR [edx+esi]
	mov	ecx, edx
	lea	eax, DWORD PTR _z$[ebp+eax*8]
	sub	ecx, esi
$LC9@facet_gene@10:
	fld	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC9@facet_gene@10
$LN64@facet_gene@10:

; 1508 :      eval_all(mi->expr[0],z,2*SDIM,&val,derivs,f_info->id);

	mov	eax, DWORD PTR [ebx]
	fstp	ST(0)
	push	eax
	lea	ecx, DWORD PTR _derivs$[ebp]
	push	ecx
	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	mov	eax, DWORD PTR [edi+232]
	lea	ecx, DWORD PTR [edx+edx]
	push	ecx
	lea	edx, DWORD PTR _z$[ebp]
	push	edx
	push	eax
	call	_eval_all

; 1509 :      value += coeff*val;

	fld	QWORD PTR _val$[ebp]
	fld	QWORD PTR _coeff$90035[ebp]
	mov	esi, DWORD PTR _ctrl_num
	fmul	ST(1), ST(0)
	mov	edi, 2
	fxch	ST(1)
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv1185[ebp], 0
	fadd	QWORD PTR _value$[ebp]
	mov	DWORD PTR tv1187[ebp], edi
	mov	DWORD PTR tv1281[ebp], 3
	fst	QWORD PTR _value$[ebp]
	fld	QWORD PTR _sign$[ebp]
$LN41@facet_gene@10:

; 1511 :       { int jj = (j+1)%3;

	lea	eax, DWORD PTR [edi-1]
	cdq
	mov	ecx, 3
	idiv	ecx

; 1512 :          int jjj = (j+2)%3;

	mov	eax, edi
	mov	ebx, 3
	mov	ecx, edx
	cdq
	idiv	ebx

; 1513 :          for ( k = 0 ; k < ctrl_num ; k++ )

	xor	eax, eax
	test	esi, esi
	jle	$LN40@facet_gene@10

; 1514 :          { REAL **gpd = gpolypartial[m];

	mov	edi, DWORD PTR _m$[ebp]
	mov	esi, DWORD PTR _gpolypartial
	mov	esi, DWORD PTR [esi+edi*4]
	mov	ebx, DWORD PTR _gpoly
	mov	edi, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR _s$90036[ebp]
	mov	DWORD PTR tv571[ebp], edi
	mov	edi, DWORD PTR [ebx+4]
	mov	ebx, DWORD PTR [ebx]
	mov	DWORD PTR tv600[ebp], ebx
	mov	ebx, DWORD PTR [esi+4]
	mov	esi, DWORD PTR [esi]
	mov	DWORD PTR tv595[ebp], ebx
	mov	DWORD PTR tv588[ebp], esi
$LN39@facet_gene@10:

; 1515 :             f_info->grad[k][j] += coeff*(gpoly[m][k]*derivs[j]
; 1516 :               - sign*derivs[jj+SDIM]*(s[1][jjj]*gpd[0][k]-s[0][jjj]*gpd[1][k])
; 1517 :               - sign*derivs[jjj+SDIM]*(s[0][jj]*gpd[1][k]-s[1][jj]*gpd[0][k]));

	mov	ebx, DWORD PTR tv571[ebp]
	fld	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR tv1185[ebp]
	fmul	QWORD PTR _derivs$[ebp+ebx]
	mov	ebx, DWORD PTR tv588[ebp]
	fld	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR tv600[ebp]
	fmul	QWORD PTR [edi+edx*8]
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR tv595[ebp]
	fmul	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR _web+616
	add	ebx, ecx
	mov	esi, DWORD PTR [esi+1336]
	fsubp	ST(1), ST(0)
	mov	esi, DWORD PTR [esi+eax*4]
	fld	QWORD PTR _derivs$[ebp+ebx*8]
	mov	ebx, DWORD PTR tv595[ebp]
	fmul	ST(0), ST(3)
	add	esi, DWORD PTR tv1185[ebp]
	inc	eax
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ebx+eax*8-8]
	mov	ebx, DWORD PTR tv600[ebp]
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR tv588[ebp]
	fld	QWORD PTR [ebx+eax*8-8]
	mov	ebx, DWORD PTR _web+616
	fmul	QWORD PTR [edi+ecx*8]
	add	ebx, edx
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _derivs$[ebp+ebx*8]
	fmul	ST(0), ST(3)
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fadd	QWORD PTR [esi]
	fstp	QWORD PTR [esi]
	mov	esi, DWORD PTR _ctrl_num
	cmp	eax, esi
	jl	$LN39@facet_gene@10

; 1513 :          for ( k = 0 ; k < ctrl_num ; k++ )

	mov	edi, DWORD PTR tv1187[ebp]
$LN40@facet_gene@10:

; 1510 :      for ( j = 0 ; j < 3 ; j++ )

	add	DWORD PTR tv1185[ebp], 8

; 1513 :          for ( k = 0 ; k < ctrl_num ; k++ )

	mov	edx, DWORD PTR _m$[ebp]
	mov	ebx, DWORD PTR _f_info$GSCopy$[ebp]
	inc	edi
	dec	DWORD PTR tv1281[ebp]
	mov	DWORD PTR tv1187[ebp], edi
	jne	$LN41@facet_gene@10

; 1510 :      for ( j = 0 ; j < 3 ; j++ )

	inc	edx
	fstp	ST(0)
	fstp	ST(1)
	mov	DWORD PTR _m$[ebp], edx
	cmp	edx, DWORD PTR _gauss2D_num
	jl	$LL76@facet_gene@10
	pop	esi
$LN14@facet_gene@10:

; 1518 :          }
; 1519 :       }
; 1520 :   }
; 1521 :   facet_general_flag = 0;
; 1522 :   return value; 
; 1523 : } // end facet_general_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	xor	ecx, ebp
	mov	DWORD PTR _facet_general_flag, 0
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_general_grad ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_facet_general_hess
; Function compile flags: /Ogtp
;	COMDAT _facet_general_hess
_TEXT	SEGMENT
_secondqXvS$ = -1524					; size = 48
_val$ = -1476						; size = 8
_coeff$90078 = -1468					; size = 8
_normal$ = -1460					; size = 4
tv1275 = -1456						; size = 4
tv1222 = -1452						; size = 4
_sum$90112 = -1448					; size = 8
tv1298 = -1440						; size = 4
_value$ = -1436						; size = 8
tv1271 = -1428						; size = 4
_sign$ = -1424						; size = 8
_s$90080 = -1416					; size = 4
_mi$ = -1412						; size = 4
_f_info$GSCopy$ = -1408					; size = 4
_gpd$90079 = -1404					; size = 4
_J$ = -1400						; size = 4
tv1294 = -1396						; size = 4
_jj$90108 = -1396					; size = 4
_second$ = -1392					; size = 4
tv1247 = -1388						; size = 4
tv731 = -1388						; size = 4
tv1144 = -1384						; size = 4
tv1994 = -1380						; size = 4
tv1388 = -1380						; size = 4
_JJJ$90111 = -1380					; size = 4
_m$ = -1376						; size = 4
tv1339 = -1372						; size = 4
tv1126 = -1372						; size = 4
_JJ$90110 = -1372					; size = 4
tv1942 = -1368						; size = 4
tv1358 = -1368						; size = 4
tv1330 = -1368						; size = 4
_jjj$90109 = -1368					; size = 4
tv1947 = -1364						; size = 4
tv1132 = -1364						; size = 4
tv1113 = -1364						; size = 4
tv1992 = -1360						; size = 4
_j$ = -1360						; size = 4
_secondxJ$ = -1356					; size = 1152
_derivs$ = -204						; size = 96
_z$ = -108						; size = 104
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_facet_general_hess PROC				; COMDAT

; 1534 : { int m,j,k,kk,J;

	push	ebp
	mov	ebp, esp
	sub	esp, 1524				; 000005f4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1535 :   REAL value = 0.0;

	fldz
	push	ebx
	push	esi
	fstp	QWORD PTR _value$[ebp]
	mov	esi, DWORD PTR _f_info$[ebp]

; 1536 :   REAL val;
; 1537 :   REAL derivs[2*MAXCOORD];
; 1538 :   REAL z[2*MAXCOORD+1];  /*  pointers to coord and tangent */
; 1539 :   MAT2D(second,2*MAXCOORD,2*MAXCOORD); /* second derivatives */

	push	12					; 0000000cH
	push	12					; 0000000cH
	lea	eax, DWORD PTR _secondxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _secondqXvS$[ebp]
	push	ecx
	mov	DWORD PTR _f_info$GSCopy$[ebp], esi
	call	_mat2d_setup

; 1540 :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR _second$[ebp], eax
	mov	eax, DWORD PTR _web+236
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	add	esp, 16					; 00000010H
	or	eax, ecx
	je	SHORT $LN32@facet_gene@11
	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN96@facet_gene@11
$LN32@facet_gene@11:
	fld1
$LN96@facet_gene@11:

; 1541 :   REAL *normal = z+SDIM;

	mov	ecx, DWORD PTR _web+616
	fstp	QWORD PTR _sign$[ebp]

; 1542 :   struct method_instance *mi = METH_INSTANCE(f_info->method);

	mov	eax, DWORD PTR [esi+8]
	lea	edx, DWORD PTR _z$[ebp+ecx*8]
	mov	DWORD PTR _normal$[ebp], edx
	cdq
	mov	ebx, eax
	xor	ebx, edx
	sub	ebx, edx
	imul	ebx, 2928				; 00000b70H
	add	ebx, DWORD PTR _meth_inst_list

; 1543 : 
; 1544 :   if ( web.modeltype == LAGRANGE )

	cmp	DWORD PTR _web+628, 3
	mov	DWORD PTR _mi$[ebp], ebx
	jne	SHORT $LN29@facet_gene@11

; 1545 :      return facet_general_hess_lagr(f_info);

	push	esi
	call	_facet_general_hess_lagr
	add	esp, 4
	pop	esi
	pop	ebx

; 1611 :          }
; 1612 :   }
; 1613 :   facet_general_flag = 0;
; 1614 :   return value; 
; 1615 : } // end facet_general_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN29@facet_gene@11:

; 1546 : 
; 1547 :   facet_general_flag = 1;
; 1548 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	xor	edx, edx
	mov	DWORD PTR _facet_general_flag, 1
	mov	DWORD PTR _m$[ebp], edx
	cmp	DWORD PTR _gauss2D_num, edx
	jle	$LN67@facet_gene@11
	push	edi
	jmp	SHORT $LN28@facet_gene@11
$LL66@facet_gene@11:
	mov	ecx, DWORD PTR _web+616
	mov	ebx, DWORD PTR _mi$[ebp]
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
$LN28@facet_gene@11:

; 1549 :   { 
; 1550 :      REAL coeff = gauss2Dwt[m]/web.simplex_factorial;

	mov	eax, DWORD PTR _gauss2Dwt
	fld	QWORD PTR [eax+edx*8]

; 1551 :      REAL **gpd = gpolypartial[m];

	mov	eax, DWORD PTR _gpolypartial
	fdiv	QWORD PTR _web+792
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _gpd$90079[ebp], eax

; 1552 :      REAL **s = f_info->sides[m];

	mov	eax, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _s$90080[ebp], eax

; 1553 :      z[2*SDIM] = m; /* kludge for attr interpolation. */

	mov	eax, ecx
	add	eax, eax
	fstp	QWORD PTR _coeff$90078[ebp]
	fild	DWORD PTR _m$[ebp]
	fstp	QWORD PTR _z$[ebp+eax*8]

; 1554 :      for ( k = 0 ; k < SDIM ; k++ ) z[k] = f_info->gauss_pt[m][k]; 

	xor	eax, eax
	cmp	ecx, 4
	jl	SHORT $LC61@facet_gene@11

; 1546 : 
; 1547 :   facet_general_flag = 1;
; 1548 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	mov	ecx, DWORD PTR [esi+1268]
	lea	edx, DWORD PTR [ecx+edx*4]

; 1554 :      for ( k = 0 ; k < SDIM ; k++ ) z[k] = f_info->gauss_pt[m][k]; 

	lea	ecx, DWORD PTR _z$[ebp+8]
	mov	esi, 16					; 00000010H
	mov	ebx, 24					; 00000018H
	sub	esi, ecx
	sub	ebx, ecx
	npad	5
$LL62@facet_gene@11:
	mov	edi, DWORD PTR [edx]
	fld	QWORD PTR [edi+eax*8]
	lea	ecx, DWORD PTR _z$[ebp+eax*8+8]
	fstp	QWORD PTR [ecx-8]
	mov	edi, DWORD PTR [edx]
	fld	QWORD PTR [edi+eax*8+8]
	add	eax, 4
	fstp	QWORD PTR [ecx]
	mov	edi, DWORD PTR [edx]
	add	edi, esi
	fld	QWORD PTR [edi+ecx]
	fstp	QWORD PTR [ecx+8]
	mov	edi, DWORD PTR [edx]
	add	edi, ebx
	fld	QWORD PTR [edi+ecx]
	fstp	QWORD PTR [ecx+16]
	mov	ecx, DWORD PTR _web+616
	lea	edi, DWORD PTR [ecx-3]
	cmp	eax, edi
	jl	SHORT $LL62@facet_gene@11
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ebx, DWORD PTR _mi$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
$LC61@facet_gene@11:
	cmp	eax, ecx
	jge	SHORT $LN60@facet_gene@11

; 1546 : 
; 1547 :   facet_general_flag = 1;
; 1548 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	mov	edi, DWORD PTR [esi+1268]
	lea	edi, DWORD PTR [edi+edx*4]
$LC25@facet_gene@11:

; 1554 :      for ( k = 0 ; k < SDIM ; k++ ) z[k] = f_info->gauss_pt[m][k]; 

	mov	ebx, DWORD PTR [edi]
	fld	QWORD PTR [ebx+eax*8]
	inc	eax
	fstp	QWORD PTR _z$[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LC25@facet_gene@11
	mov	ebx, DWORD PTR _mi$[ebp]
$LN60@facet_gene@11:

; 1555 :      cross_prod(f_info->sides[m][0],f_info->sides[m][1],normal);

	mov	eax, DWORD PTR [esi+1276]
	mov	edx, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR _normal$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	ecx
	mov	ecx, DWORD PTR [edx]
	push	eax
	push	ecx
	call	_cross_prod

; 1556 :      if ( sign == -1.0 ) 

	fld	QWORD PTR _sign$[ebp]
	mov	edx, DWORD PTR _web+616
	fld	ST(0)
	fld	QWORD PTR __real@bff0000000000000
	add	esp, 12					; 0000000cH
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN86@facet_gene@11

; 1557 :         for ( k = 0 ; k < SDIM ; k++ ) z[k+SDIM] *= sign ; 

	xor	edi, edi
	cmp	edx, 4
	jl	SHORT $LC64@facet_gene@11
	lea	ecx, DWORD PTR [edx-4]
	shr	ecx, 2
	inc	ecx
	lea	eax, DWORD PTR _z$[ebp+edx*8+8]
	lea	edi, DWORD PTR [ecx*4]
$LN65@facet_gene@11:
	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	dec	ecx
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax-40]
	fld	QWORD PTR [eax-32]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [eax-24]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax-24]
	fld	QWORD PTR [eax-16]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LN65@facet_gene@11
$LC64@facet_gene@11:
	cmp	edi, edx
	jge	SHORT $LN86@facet_gene@11
	lea	eax, DWORD PTR [edx+edi]
	mov	ecx, edx
	lea	eax, DWORD PTR _z$[ebp+eax*8]
	sub	ecx, edi
$LC21@facet_gene@11:
	fld	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC21@facet_gene@11
$LN86@facet_gene@11:

; 1558 :      eval_second(mi->expr[0],z,2*SDIM,&val,derivs,second,f_info->id);

	mov	eax, DWORD PTR [esi]
	fstp	ST(0)
	mov	ecx, DWORD PTR _second$[ebp]
	push	eax
	push	ecx
	lea	eax, DWORD PTR _derivs$[ebp]
	push	eax
	lea	ecx, DWORD PTR _val$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [ebx+232]
	add	edx, edx
	push	edx
	lea	eax, DWORD PTR _z$[ebp]
	push	eax
	push	ecx
	call	_eval_second

; 1559 :      value += coeff*val;

	fld	QWORD PTR _val$[ebp]
	fld	QWORD PTR _coeff$90078[ebp]
	mov	ebx, DWORD PTR _ctrl_num
	fmul	ST(1), ST(0)
	mov	edi, 2
	fxch	ST(1)
	add	esp, 28					; 0000001cH
	mov	DWORD PTR tv1992[ebp], 0
	fadd	QWORD PTR _value$[ebp]
	mov	DWORD PTR tv1994[ebp], edi
	mov	DWORD PTR tv731[ebp], 3
	fstp	QWORD PTR _value$[ebp]
	fld	QWORD PTR _sign$[ebp]
$LN72@facet_gene@11:

; 1562 :       { int jj = (j+1)%3;

	lea	eax, DWORD PTR [edi-1]
	cdq
	mov	ecx, 3
	idiv	ecx

; 1563 :          int jjj = (j+2)%3;

	mov	eax, edi
	mov	esi, edx
	cdq
	idiv	ecx

; 1564 :          for ( k = 0 ; k < ctrl_num ; k++ )

	xor	ecx, ecx
	test	ebx, ebx
	jle	$LN17@facet_gene@11
	mov	eax, DWORD PTR _s$90080[ebp]
	mov	edi, DWORD PTR [eax+4]
	mov	ebx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv1126[ebp], edi
	mov	edi, DWORD PTR _gpoly
	mov	ebx, DWORD PTR [edi+ebx*4]
	mov	edi, DWORD PTR _gpd$90079[ebp]
	mov	edi, DWORD PTR [edi+4]
	sub	ebx, edi
	mov	DWORD PTR tv1942[ebp], ebx
	mov	ebx, DWORD PTR _gpd$90079[ebp]
	mov	ebx, DWORD PTR [ebx]
	mov	DWORD PTR tv1144[ebp], eax
	mov	eax, DWORD PTR _gpd$90079[ebp]
	mov	eax, DWORD PTR [eax+4]
	sub	ebx, edi
	mov	DWORD PTR tv1947[ebp], ebx
$LN71@facet_gene@11:

; 1565 :          { 
; 1566 :             f_info->grad[k][j] += coeff*(gpoly[m][k]*derivs[j]
; 1567 :               - sign*derivs[jj+SDIM]*(s[1][jjj]*gpd[0][k]-s[0][jjj]*gpd[1][k])
; 1568 :               - sign*derivs[jjj+SDIM]*(s[0][jj]*gpd[1][k]-s[1][jj]*gpd[0][k]));

	mov	ebx, DWORD PTR tv1942[ebp]
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv1992[ebp]
	fmul	QWORD PTR _derivs$[ebp+ebx]
	mov	ebx, DWORD PTR tv1126[ebp]
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR tv1947[ebp]
	fmul	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv1144[ebp]
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR _web+616
	fmul	QWORD PTR [eax]
	add	ebx, esi
	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edi, DWORD PTR [edi+1336]
	fsubp	ST(1), ST(0)
	mov	edi, DWORD PTR [edi+ecx*4]
	fld	QWORD PTR _derivs$[ebp+ebx*8]
	mov	ebx, DWORD PTR tv1144[ebp]
	fmul	ST(0), ST(3)
	add	edi, DWORD PTR tv1992[ebp]
	inc	ecx
	add	eax, 8
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax-8]
	fmul	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR tv1126[ebp]
	fld	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR tv1947[ebp]
	fmul	QWORD PTR [ebx+eax-8]
	mov	ebx, DWORD PTR _web+616
	add	ebx, edx
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _derivs$[ebp+ebx*8]
	fmul	ST(0), ST(3)
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fadd	QWORD PTR [edi]
	fstp	QWORD PTR [edi]
	mov	ebx, DWORD PTR _ctrl_num
	cmp	ecx, ebx
	jl	$LN71@facet_gene@11

; 1564 :          for ( k = 0 ; k < ctrl_num ; k++ )

	mov	edi, DWORD PTR tv1994[ebp]
$LN17@facet_gene@11:

; 1560 :      /* gradients */
; 1561 :      for ( j = 0 ; j < 3 ; j++ )

	add	DWORD PTR tv1992[ebp], 8
	inc	edi
	dec	DWORD PTR tv731[ebp]
	mov	DWORD PTR tv1994[ebp], edi
	jne	$LN72@facet_gene@11
	fstp	ST(0)

; 1569 :          }
; 1570 :       }
; 1571 :      /* hessian */
; 1572 :      for ( k = 0 ; k < ctrl_num ; k++ )

	xor	edi, edi
	fstp	ST(0)
	test	ebx, ebx
	jle	$LN27@facet_gene@11
$LL74@facet_gene@11:

; 1573 :       for ( kk = 0 ; kk < ctrl_num ; kk++ )

	xor	esi, esi
	test	ebx, ebx
	jle	$LN11@facet_gene@11

; 1546 : 
; 1547 :   facet_general_flag = 1;
; 1548 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	mov	ecx, DWORD PTR _gpoly
	mov	edx, DWORD PTR _m$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR tv1113[ebp], eax
	npad	1
$LL68@facet_gene@11:

; 1574 :         for ( j = 0 ; j < 3 ; j++ )

	xor	edx, edx

; 1575 :          for ( J = 0 ; J < 3 ; J++ )

	xor	ecx, ecx
	lea	eax, DWORD PTR [edx+edx*2]
	mov	DWORD PTR _j$[ebp], edx
	mov	DWORD PTR _J$[ebp], ecx
	mov	DWORD PTR tv1222[ebp], eax
	jmp	SHORT $LN3@facet_gene@11
	npad	5
$LL69@facet_gene@11:

; 1574 :         for ( j = 0 ; j < 3 ; j++ )

	mov	edx, DWORD PTR _j$[ebp]

; 1575 :          for ( J = 0 ; J < 3 ; J++ )

	xor	ecx, ecx
	lea	eax, DWORD PTR [edx+edx*2]
	mov	DWORD PTR _J$[ebp], ecx
	mov	DWORD PTR tv1222[ebp], eax
	jmp	SHORT $LN3@facet_gene@11
	npad	7
$LL70@facet_gene@11:

; 1574 :         for ( j = 0 ; j < 3 ; j++ )

	mov	ecx, DWORD PTR _J$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
$LN3@facet_gene@11:

; 1576 :          { int jj = (j==2) ? 0 : j+1;

	mov	ebx, 2
	cmp	edx, ebx
	jne	$LN34@facet_gene@11
	mov	DWORD PTR _jj$90108[ebp], 0
$LN36@facet_gene@11:

; 1577 :             int jjj = (j==0) ? 2 : j-1 ;

	lea	eax, DWORD PTR [edx-1]
	mov	DWORD PTR _jjj$90109[ebp], eax
$LN37@facet_gene@11:

; 1578 :             int JJ = (J==2) ? 0 : J+1;

	cmp	ecx, ebx
	jne	$LN38@facet_gene@11
	mov	DWORD PTR _JJ$90110[ebp], 0
$LN40@facet_gene@11:

; 1579 :             int JJJ = (J==0) ? 2 : J-1 ;

	lea	eax, DWORD PTR [ecx-1]
	mov	DWORD PTR _JJJ$90111[ebp], eax
$LN41@facet_gene@11:

; 1580 :             REAL sum;
; 1581 : 
; 1582 :             /* have to break into parts, else too big expression for compiler */
; 1583 :               sum = gpoly[m][k]*gpoly[m][kk]*second[j][J];

	mov	eax, DWORD PTR tv1113[ebp]
	mov	eax, DWORD PTR [eax]
	fld	QWORD PTR [eax+esi*8]
	fmul	QWORD PTR [eax+edi*8]
	mov	eax, DWORD PTR _second$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]

; 1584 : 
; 1585 :               sum += sign*SDIM_dot(e[j][J],derivs+SDIM)
; 1586 :                           *(gpd[1][kk]*gpd[0][k]-gpd[0][kk]*gpd[1][k]);

	mov	eax, DWORD PTR _gpd$90079[ebp]
	fmul	QWORD PTR [edx+ecx*8]
	mov	ebx, DWORD PTR [eax+4]
	mov	edx, eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv1132[ebp], eax
	fstp	QWORD PTR _sum$90112[ebp]
	mov	eax, DWORD PTR _web+616
	push	eax
	lea	edx, DWORD PTR _derivs$[ebp+eax*8]
	mov	eax, DWORD PTR tv1222[ebp]
	add	eax, ecx
	push	edx
	lea	ecx, DWORD PTR [eax+eax*2]
	lea	edx, DWORD PTR _e[ecx*8]
	push	edx
	call	_dot
	fld	QWORD PTR _sign$[ebp]
	mov	eax, DWORD PTR tv1132[ebp]
	fmul	ST(1), ST(0)
	fld	QWORD PTR [ebx+esi*8]

; 1587 : 
; 1588 :               sum += sign*gpoly[m][kk]*(s[1][jj]*gpd[0][k]-s[0][jj]*gpd[1][k])
; 1589 :                           *second[J][jjj+SDIM]
; 1590 :                 - sign*gpoly[m][kk]*(s[1][jjj]*gpd[0][k]-s[0][jjj]*gpd[1][k])
; 1591 :                           *second[J][jj+SDIM]
; 1592 :                 + sign*gpoly[m][k]*(s[1][JJ]*gpd[0][kk]-s[0][JJ]*gpd[1][kk])
; 1593 :                           *second[j][JJJ+SDIM]
; 1594 :                 - sign*gpoly[m][k]*(s[1][JJJ]*gpd[0][kk]-s[0][JJJ]*gpd[1][kk])
; 1595 :                           *second[j][JJ+SDIM];
; 1596 : 
; 1597 :               sum += (s[1][jj]*gpd[0][k] - s[0][jj]*gpd[1][k])
; 1598 :                   *(s[1][JJ]*gpd[0][kk] - s[0][JJ]*gpd[1][kk])
; 1599 :                      *second[jjj+SDIM][JJJ+SDIM]
; 1600 :                 - (s[1][jjj]*gpd[0][k] - s[0][jjj]*gpd[1][k])
; 1601 :                   *(s[1][JJ]*gpd[0][kk] - s[0][JJ]*gpd[1][kk])
; 1602 :                      *second[jj+SDIM][JJJ+SDIM]
; 1603 :                 - (s[1][jj]*gpd[0][k] - s[0][jj]*gpd[1][k])
; 1604 :                   *(s[1][JJJ]*gpd[0][kk] - s[0][JJJ]*gpd[1][kk])
; 1605 :                      *second[jjj+SDIM][JJ+SDIM]
; 1606 :                 + (s[1][jjj]*gpd[0][k] - s[0][jjj]*gpd[1][k])
; 1607 :                   *(s[1][JJJ]*gpd[0][kk] - s[0][JJJ]*gpd[1][kk])
; 1608 :                      *second[jj+SDIM][JJ+SDIM];

	mov	ecx, DWORD PTR _s$90080[ebp]
	fmul	QWORD PTR [eax+edi*8]
	mov	edx, DWORD PTR [ecx+4]
	fld	QWORD PTR [ebx+edi*8]
	mov	ecx, DWORD PTR [ecx]
	fmul	QWORD PTR [eax+esi*8]
	mov	DWORD PTR tv1144[ebp], ecx
	mov	ecx, DWORD PTR _JJ$90110[ebp]
	mov	DWORD PTR tv1247[ebp], edx
	fsubp	ST(1), ST(0)
	add	esp, 12					; 0000000cH
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR _sum$90112[ebp]
	fstp	QWORD PTR _sum$90112[ebp]
	fld	QWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR tv1144[ebp]
	fmul	QWORD PTR [eax+esi*8]
	fld	QWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR _jj$90108[ebp]
	fmul	QWORD PTR [ebx+esi*8]
	mov	edx, DWORD PTR tv1247[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR _second$[ebp]
	fmul	QWORD PTR [eax+edi*8]
	mov	eax, DWORD PTR tv1144[ebp]
	fld	QWORD PTR [eax+ecx*8]

; 1609 : 
; 1610 :             f_info->hess[k][kk][j][J] += coeff*sum;

	mov	ecx, DWORD PTR _jjj$90109[ebp]
	fmul	QWORD PTR [ebx+edi*8]
	mov	eax, DWORD PTR _web+616
	add	eax, ecx
	mov	DWORD PTR tv1271[ebp], eax
	mov	eax, DWORD PTR [edx+eax*4]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR tv1247[ebp]
	fld	QWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR tv1132[ebp]
	fmul	QWORD PTR [edx+edi*8]
	mov	edx, DWORD PTR tv1144[ebp]
	fld	QWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR _web+616
	fmul	QWORD PTR [ebx+edi*8]
	mov	edx, DWORD PTR _second$[ebp]
	mov	DWORD PTR tv1275[ebp], eax
	mov	eax, DWORD PTR _web+616
	add	eax, DWORD PTR _JJJ$90111[ebp]
	fsubp	ST(1), ST(0)
	add	eax, eax
	add	eax, eax
	add	eax, eax
	add	ecx, DWORD PTR _jj$90108[ebp]
	mov	DWORD PTR tv1294[ebp], ecx
	mov	ecx, DWORD PTR [edx+ecx*4]

; 1587 : 
; 1588 :               sum += sign*gpoly[m][kk]*(s[1][jj]*gpd[0][k]-s[0][jj]*gpd[1][k])
; 1589 :                           *second[J][jjj+SDIM]
; 1590 :                 - sign*gpoly[m][kk]*(s[1][jjj]*gpd[0][k]-s[0][jjj]*gpd[1][k])
; 1591 :                           *second[J][jj+SDIM]
; 1592 :                 + sign*gpoly[m][k]*(s[1][JJ]*gpd[0][kk]-s[0][JJ]*gpd[1][kk])
; 1593 :                           *second[j][JJJ+SDIM]
; 1594 :                 - sign*gpoly[m][k]*(s[1][JJJ]*gpd[0][kk]-s[0][JJJ]*gpd[1][kk])
; 1595 :                           *second[j][JJ+SDIM];
; 1596 : 
; 1597 :               sum += (s[1][jj]*gpd[0][k] - s[0][jj]*gpd[1][k])
; 1598 :                   *(s[1][JJ]*gpd[0][kk] - s[0][JJ]*gpd[1][kk])
; 1599 :                      *second[jjj+SDIM][JJJ+SDIM]
; 1600 :                 - (s[1][jjj]*gpd[0][k] - s[0][jjj]*gpd[1][k])
; 1601 :                   *(s[1][JJ]*gpd[0][kk] - s[0][JJ]*gpd[1][kk])
; 1602 :                      *second[jj+SDIM][JJJ+SDIM]
; 1603 :                 - (s[1][jj]*gpd[0][k] - s[0][jj]*gpd[1][k])
; 1604 :                   *(s[1][JJJ]*gpd[0][kk] - s[0][JJJ]*gpd[1][kk])
; 1605 :                      *second[jjj+SDIM][JJ+SDIM]
; 1606 :                 + (s[1][jjj]*gpd[0][k] - s[0][jjj]*gpd[1][k])
; 1607 :                   *(s[1][JJJ]*gpd[0][kk] - s[0][JJJ]*gpd[1][kk])
; 1608 :                      *second[jj+SDIM][JJ+SDIM];

	mov	edx, DWORD PTR tv1247[ebp]
	mov	DWORD PTR tv1298[ebp], ecx
	mov	ecx, DWORD PTR _JJJ$90111[ebp]
	fld	QWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR tv1132[ebp]
	fmul	QWORD PTR [edx+esi*8]
	mov	edx, DWORD PTR tv1144[ebp]
	fld	QWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR _gpoly
	fmul	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _web+616
	add	ecx, DWORD PTR _JJ$90110[ebp]
	fsubp	ST(1), ST(0)
	lea	edx, DWORD PTR [edx+ebx*4]
	mov	ebx, DWORD PTR _J$[ebp]
	mov	DWORD PTR tv1113[ebp], edx
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+esi*8]
	mov	DWORD PTR tv1330[ebp], edx
	mov	edx, DWORD PTR _second$[ebp]
	fmul	ST(0), ST(5)
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	ebx, DWORD PTR _second$[ebp]
	mov	DWORD PTR tv1339[ebp], edx
	mov	edx, DWORD PTR tv1330[ebp]
	fld	QWORD PTR [edx+edi*8]
	mov	edx, DWORD PTR _j$[ebp]
	mov	ebx, DWORD PTR [ebx+edx*4]
	fmulp	ST(6), ST(0)
	mov	DWORD PTR tv1358[ebp], ebx

; 1609 : 
; 1610 :             f_info->hess[k][kk][j][J] += coeff*sum;

	mov	ebx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ebx, DWORD PTR [ebx+1340]
	fld	ST(0)
	mov	ebx, DWORD PTR [ebx+edi*4]
	fmul	ST(0), ST(4)
	mov	ebx, DWORD PTR [ebx+esi*4]
	mov	edx, DWORD PTR [ebx+edx*4]
	mov	ebx, DWORD PTR _J$[ebp]
	lea	edx, DWORD PTR [edx+ebx*8]
	mov	ebx, DWORD PTR tv1271[ebp]
	mov	DWORD PTR tv1388[ebp], edx
	mov	edx, DWORD PTR tv1339[ebp]
	fmul	QWORD PTR [edx+ebx*8]
	mov	ebx, DWORD PTR tv1294[ebp]
	fxch	ST(1)
	add	ecx, ecx
	fmul	ST(0), ST(3)
	add	ecx, ecx
	add	ecx, ecx
	fmul	QWORD PTR [edx+ebx*8]
	mov	edx, DWORD PTR tv1358[ebp]
	mov	ebx, DWORD PTR tv1298[ebp]
	fsubp	ST(1), ST(0)
	fld	ST(5)
	fmul	ST(0), ST(5)
	fmul	QWORD PTR [edx+eax]
	faddp	ST(1), ST(0)
	fxch	ST(5)
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [edx+ecx]
	mov	edx, DWORD PTR tv1275[ebp]
	fsubp	ST(5), ST(0)
	fxch	ST(4)
	fadd	QWORD PTR _sum$90112[ebp]
	fld	ST(2)
	fmul	ST(0), ST(4)
	fmul	QWORD PTR [eax+edx]
	fld	ST(2)
	fmulp	ST(5), ST(0)
	fld	QWORD PTR [ebx+eax]
	fmulp	ST(5), ST(0)
	fsubrp	ST(4), ST(0)
	fld	ST(4)
	fmulp	ST(3), ST(0)
	fld	QWORD PTR [ecx+edx]
	fmulp	ST(3), ST(0)
	fxch	ST(3)
	fsubrp	ST(2), ST(0)
	fmulp	ST(3), ST(0)
	fld	QWORD PTR [ecx+ebx]
	mov	eax, DWORD PTR tv1388[ebp]
	fmulp	ST(3), ST(0)
	faddp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR _coeff$90078[ebp]
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR _J$[ebp]
	inc	eax
	mov	DWORD PTR _J$[ebp], eax
	cmp	eax, 3
	jl	$LL70@facet_gene@11

; 1574 :         for ( j = 0 ; j < 3 ; j++ )

	mov	eax, DWORD PTR _j$[ebp]
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, 3
	jl	$LL69@facet_gene@11

; 1573 :       for ( kk = 0 ; kk < ctrl_num ; kk++ )

	mov	ebx, DWORD PTR _ctrl_num
	inc	esi
	cmp	esi, ebx
	jl	$LL68@facet_gene@11
$LN11@facet_gene@11:

; 1569 :          }
; 1570 :       }
; 1571 :      /* hessian */
; 1572 :      for ( k = 0 ; k < ctrl_num ; k++ )

	inc	edi
	cmp	edi, ebx
	jl	$LL74@facet_gene@11
$LN27@facet_gene@11:

; 1546 : 
; 1547 :   facet_general_flag = 1;
; 1548 :   for ( m = 0 ; m < gauss2D_num ; m++ )

	mov	eax, DWORD PTR _m$[ebp]
	inc	eax
	mov	DWORD PTR _m$[ebp], eax
	cmp	eax, DWORD PTR _gauss2D_num
	jl	$LL66@facet_gene@11
	pop	edi
$LN67@facet_gene@11:

; 1611 :          }
; 1612 :   }
; 1613 :   facet_general_flag = 0;
; 1614 :   return value; 
; 1615 : } // end facet_general_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _value$[ebp]
	pop	esi
	xor	ecx, ebp
	mov	DWORD PTR _facet_general_flag, 0
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN34@facet_gene@11:

; 1576 :          { int jj = (j==2) ? 0 : j+1;

	lea	eax, DWORD PTR [edx+1]
	mov	DWORD PTR _jj$90108[ebp], eax

; 1577 :             int jjj = (j==0) ? 2 : j-1 ;

	test	edx, edx
	jne	$LN36@facet_gene@11
	mov	DWORD PTR _jjj$90109[ebp], ebx
	jmp	$LN37@facet_gene@11
$LN38@facet_gene@11:

; 1578 :             int JJ = (J==2) ? 0 : J+1;

	lea	eax, DWORD PTR [ecx+1]
	mov	DWORD PTR _JJ$90110[ebp], eax

; 1579 :             int JJJ = (J==0) ? 2 : J-1 ;

	test	ecx, ecx
	jne	$LN40@facet_gene@11
	mov	DWORD PTR _JJJ$90111[ebp], ebx
	jmp	$LN41@facet_gene@11
_facet_general_hess ENDP
_TEXT	ENDS
END
