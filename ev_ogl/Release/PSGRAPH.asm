; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\PSGRAPH.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_ps_colorflag:DWORD
COMM	_edgeredrawhead:DWORD
COMM	_ps_file_name:BYTE:03e8H
COMM	_edgeredrawcount:DWORD
COMM	_gridflag:DWORD
COMM	_edgeredrawmax:DWORD
COMM	_ps_cmykflag:DWORD
COMM	_edgeredrawflag:DWORD
COMM	_ps_widthattr:DWORD
COMM	_edgeredrawlist:DWORD
COMM	_crossingflag:DWORD
_DATA	ENDS
EXTRN	__localtime64:PROC
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
;	COMDAT _localtime
_TEXT	SEGMENT
_localtime PROC						; COMDAT
; __Time$ = eax

; 114  : #pragma warning( push )
; 115  : #pragma warning( disable : 4996 )
; 116  :     return _localtime64(_Time);

	push	eax
	call	__localtime64
	add	esp, 4

; 117  : #pragma warning( pop )
; 118  : }

	ret	0
_localtime ENDP
_TEXT	ENDS
EXTRN	__time64:PROC
; Function compile flags: /Ogtp
;	COMDAT _time
_TEXT	SEGMENT
_time	PROC						; COMDAT
; __Time$ = eax

; 133  :     return _time64(_Time);

	push	eax
	call	__time64
	add	esp, 4

; 134  : }

	ret	0
_time	ENDP
_TEXT	ENDS
PUBLIC	_get_fe_edge
EXTRN	_web:BYTE
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
;	COMDAT _get_fe_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_edge PROC					; COMDAT

; 43   : {

	push	ebp
	mov	ebp, esp

; 44   :   edge_id e_id;
; 45   :     
; 46   :   e_id = feptr(fe_id)->fe_edge_id;

	mov	eax, DWORD PTR _fe_id$[ebp]

; 47   : 
; 48   :   /*
; 49   :   if ( inverted(fe_id) ) invert(e_id);
; 50   :   return e_id;
; 51   :   */
; 52   :   
; 53   :   return same_sign(e_id,fe_id);

	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]

; 54   : }

	pop	ebp
	ret	0
_get_fe_edge ENDP
_TEXT	ENDS
PUBLIC	_get_next_edge
; Function compile flags: /Ogtp
;	COMDAT _get_next_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_next_edge PROC					; COMDAT

; 76   : {

	push	ebp
	mov	ebp, esp

; 77   :   if ( inverted(fe_id) ) return inverse_id(feptr(fe_id)->nextedge[0]);

	mov	eax, DWORD PTR _fe_id$[ebp]
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_next_e
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H

; 79   : }

	pop	ebp
	ret	0
$LN2@get_next_e:

; 78   :   else return feptr(fe_id)->nextedge[1];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]

; 79   : }

	pop	ebp
	ret	0
_get_next_edge ENDP
_TEXT	ENDS
PUBLIC	_get_edge_tailv
EXTRN	_dymem:DWORD
; Function compile flags: /Ogtp
;	COMDAT _get_edge_tailv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_tailv PROC					; COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp

; 192  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 193  :      return get_edge_vertices(e_id)[web.headvnum];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_t
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 196  : }

	pop	ebp
	ret	0
$LN2@get_edge_t:

; 194  :   else
; 195  :      return get_edge_vertices(e_id)[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 196  : }

	pop	ebp
	ret	0
_get_edge_tailv ENDP
_TEXT	ENDS
PUBLIC	_get_edge_headv
; Function compile flags: /Ogtp
;	COMDAT _get_edge_headv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_headv PROC					; COMDAT

; 200  : {

	push	ebp
	mov	ebp, esp

; 201  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 202  :      return get_edge_vertices(e_id)[0];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_h
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 205  : }

	pop	ebp
	ret	0
$LN2@get_edge_h:

; 203  :   else
; 204  :      return get_edge_vertices(e_id)[web.headvnum];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 205  : }

	pop	ebp
	ret	0
_get_edge_headv ENDP
_TEXT	ENDS
PUBLIC	_get_facet_fe
; Function compile flags: /Ogtp
;	COMDAT _get_facet_fe
_TEXT	SEGMENT
_f_id$ = 8						; size = 4
_get_facet_fe PROC					; COMDAT

; 260  : {

	push	ebp
	mov	ebp, esp

; 261  :   facetedge_id fe;
; 262  :   
; 263  :   if ( !valid_id(f_id) ) return NULLID;

	mov	ecx, DWORD PTR _f_id$[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN2@get_facet_
	xor	eax, eax

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
$LN2@get_facet_:

; 264  :   fe = fptr(f_id)->fe_id;

	mov	edx, DWORD PTR _web+236
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]

; 265  :   if ( inverted(f_id) ) invert(fe);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_facet_
	xor	eax, 134217728				; 08000000H
$LN3@get_facet_:

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
_get_facet_fe ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@CGOAOHGH@?1gw?5?$HL0?4002?5edge?$HN?5def?6?$AA@ ; `string'
PUBLIC	??_C@_0DB@FKDPLLEI@?5?5?5?50?5setgray?5newpath?5moveto?5lin@ ; `string'
PUBLIC	??_C@_0DD@LKBBNPFO@?5?5?5?5setrgbcolor?5newpath?5moveto?5l@ ; `string'
PUBLIC	??_C@_0DM@DPDEDOAF@?5?5?5?5newpath?5moveto?5lineto?5stroke@ ; `string'
PUBLIC	??_C@_0EJ@CHEGEDHF@?1edge?5?$HL?55?5copy?5?4002?5add?5relsize?5@ ; `string'
PUBLIC	??_C@_0FF@CHDDIGOA@?1edge?5?$HL?58?5copy?5?4002?5add?5relsize?5@ ; `string'
PUBLIC	??_C@_0GE@ONAIGPGO@?1edge?5?$HL?59?5copy?5?4002?5add?5relsize?5@ ; `string'
PUBLIC	??_C@_0CP@IFLCLDEP@?1noc?5?$HLpop?5pop?5pop?5pop?$HN?5def?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0EN@FKJLIACP@?1noc?5?$HLpop?5pop?5pop?5pop?5pop?5pop?5po@ ; `string'
PUBLIC	??_C@_0FB@PCKBKCBN@?1noc?5?$HLpop?5pop?5pop?5pop?5pop?5pop?5po@ ; `string'
PUBLIC	??_C@_0CO@MPEBDODO@?1no?5?$HLpop?5pop?5pop?5pop?$HN?5def?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0CK@LFNNLJK@?1gw?5?$HL?$CF8?46f?5edge?$HN?5def?5?5?$CF?$CF?5grid?5ed@ ; `string'
PUBLIC	??_C@_0CK@MJCOLLBK@?1bw?5?$HL?$CF8?46f?5edge?$HN?5def?5?5?$CF?$CF?5bare?5ed@ ; `string'
PUBLIC	??_C@_0CJ@NAOKIBAA@?1ww?5?$HL?$CF8?46f?5edge?$HN?5def?5?5?$CF?$CF?5edges?5o@ ; `string'
PUBLIC	??_C@_0CM@HHMINEKJ@?1tw?5?$HL?$CF8?46f?5edge?$HN?5def?5?5?$CF?$CF?5triple?5@ ; `string'
PUBLIC	??_C@_0CL@HINKIMLE@?1fw?5?$HL?$CF8?46f?5edge?$HN?5def?5?5?$CF?$CF?5fixed?5e@ ; `string'
PUBLIC	??_C@_0DD@CKKPOBEI@?1ew?5?$HL?$CF8?46f?5edge?$HN?5def?5?5?$CF?$CF?5normal?5@ ; `string'
PUBLIC	??_C@_0DE@GNDHOJAA@?5?5?5?5newpath?5?9?4019?5?9?401?5moveto?5sh@ ; `string'
PUBLIC	??_C@_0EC@DBAKLBOC@?5?5?5?$CF5?43f?50?5rlineto?50?5?403?5rlineto@ ; `string'
PUBLIC	__real@3f9999999999999a
PUBLIC	??_C@_0CJ@PEIIJOLN@?5?5?5?5newpath?51?5setgray?5?9?402?5?9?4015@ ; `string'
PUBLIC	??_C@_0DE@MELDGILJ@?1facenum?$CFd?5?$HL?5gsave?5translate?5rel@ ; `string'
PUBLIC	??_C@_0EC@MNPNBEBH@?5?5?5?5rlineto?5fill?50?5setgray?5?$CF6?43f@ ; `string'
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3f789374bc6a7efa
PUBLIC	??_C@_0DH@BGOOIFIB@?5?5?5?5?51?5setgray?5?5?$CF5?43f?50?5rlineto?5@ ; `string'
PUBLIC	__real@3f947ae147ae147b
PUBLIC	??_C@_0CN@HCBLHHHN@?5?5?5?5rlineto?5fill?5newpath?5?$CF5?43f?5?9@ ; `string'
PUBLIC	__real@3f7ff2e48e8a71de
PUBLIC	??_C@_0DH@BLFPBPNK@?5?5?5?50?5setgray?5?5?$CF5?43f?50?5rlineto?50@ ; `string'
PUBLIC	__real@3f96872b020c49ba
PUBLIC	__real@3f8a9fbe76c8b439
PUBLIC	??_C@_0CC@LBEOIOFE@?5?5?5?5?5newpath?5?5?$CF5?43f?5?9?4016?5moveto@ ; `string'
PUBLIC	__real@3f80624dd2f1a9fc
PUBLIC	??_C@_0DE@OIBELIDE@?1edgenum?$CFd?5?$HL?5gsave?5translate?5rel@ ; `string'
PUBLIC	??_C@_0EA@NBNMIMNL@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CF6?44f?5?9?401?5moveto@ ; `string'
PUBLIC	__real@3f70624dd2f1a9fc
PUBLIC	__real@3f847ae147ae147b
PUBLIC	??_C@_0CH@IJCPBCIK@?5?5?5?5?5?5?5?5?5?5?5?5?5?52?5?$CFd?5div?52?5?$CFd?5div?5@ ; `string'
PUBLIC	??_C@_0DJ@POEJICLC@?5?5?5?5?5?5?5?5?5?5?5?5?5?5newpath?51?5setgray?5@ ; `string'
PUBLIC	??_C@_0DJ@DEADPOPJ@?5?5?5?5?5?5?5?5?5?5?5?5?5?5newpath?50?5setgray?5@ ; `string'
PUBLIC	??_C@_0DD@JKPCNGJN@?1vertex?$CFd?5?$HL?5gsave?5translate?5rels@ ; `string'
PUBLIC	??_C@_0CL@KMJHALBO@?1Helvetica?5findfont?5?403?5scalefon@ ; `string'
PUBLIC	??_C@_07DPEHHPLJ@?5?$HN?5def?6?$AA@		; `string'
PUBLIC	??_C@_0P@LGFKOBPF@?5?5?5?5?5?5?5?5?$HN?5if?5?6?$AA@ ; `string'
PUBLIC	??_C@_0DL@KELJBNIN@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5arrowrad?5angle?51@ ; `string'
PUBLIC	??_C@_0DK@MCDLLHLO@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5y2?5yu?5vorad?5mul?5@ ; `string'
PUBLIC	??_C@_0DK@EACGPMDM@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5x2?5xu?5vorad?5mul?5@ ; `string'
PUBLIC	??_C@_0BH@FCDFNACB@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5stroke?6?$AA@ ; `string'
PUBLIC	??_C@_0DB@KOIMPJML@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5arrowrad?5angle?5a@ ; `string'
PUBLIC	??_C@_0DK@DEDDDPBE@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5y2?5yu?5vorad?5mul?5@ ; `string'
PUBLIC	??_C@_0DK@LGCOHEJG@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5x2?5xu?5vorad?5mul?5@ ; `string'
PUBLIC	??_C@_0EB@LLKMFIBG@?5?5?5?5?5?5?5?5newpath?5x2?5xu?5vorad?5mul?5@ ; `string'
PUBLIC	??_C@_0CD@CACIHCGK@?5?5?5?5?5?5?5?5?1angle?5xu?5yu?5neg?5atan?5de@ ; `string'
PUBLIC	??_C@_0CP@BGIBHPDN@?5?5?5?5?5?5?5?5?1xu?5dx?5mag?5div?5def?5?1yu?5d@ ; `string'
PUBLIC	??_C@_0CP@LAJKLMEC@?5?5?5?5?5?5?5?5mag?50?5ne?5?$HL?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0CP@CPCODPMC@?5?5?5?5?5?5?5?5?1mag?5dx?5dx?5mul?5dy?5dy?5mul@ ; `string'
PUBLIC	??_C@_0CO@DJFPBGGI@?5?5?5?5?5?5?5?5?1dy?5y2?5y1?5sub?5def?5?5?1dx?5x@ ; `string'
PUBLIC	??_C@_0DN@LGKEEMMM@?5?5?5?5?5?5?5?5?1y2?5exch?5def?5?1x2?5exch?5de@ ; `string'
PUBLIC	??_C@_0BH@NMAEMPIK@?5moveto?5lineto?5stroke?6?$AA@ ; `string'
PUBLIC	??_C@_0DL@LHEOKJJJ@?1edge?5?$HL?5relsize?5mul?5setlinewidth@ ; `string'
PUBLIC	??_C@_0DN@FIHHEEKM@?1edge?5?$HL?5relsize?5mul?5setlinewidth@ ; `string'
PUBLIC	??_C@_0DO@NBCNNCAN@?1edge?5?$HL?5relsize?5mul?5setlinewidth@ ; `string'
PUBLIC	??_C@_0BF@ELMNCKGP@?1arrowrad?5vorad?5def?6?$AA@ ; `string'
PUBLIC	??_C@_0BN@PADBKINN@?1vorad?5?4022?5relsize?5mul?5def?6?$AA@ ; `string'
PUBLIC	??_C@_0EN@BKAKNMA@?1arcedge?5?$HLrelsize?5mul?5setlinewid@ ; `string'
PUBLIC	??_C@_0EN@MLELOJHB@?1edge?5?$HLrelsize?5mul?5setlinewidth?5@ ; `string'
PUBLIC	??_C@_0FL@EOEJNIFP@?1fc?5?$HLsetgray?50?5setgray?5?4001?5rels@ ; `string'
PUBLIC	??_C@_0CL@JFHIFEBJ@?1fb?5?$HLsetgray?56?5copy?5newpath?5move@ ; `string'
PUBLIC	??_C@_0EJ@GDNKHHIK@?5?5?5?5?5?5?5?5?5?5?5?5lineto?5closepath?5fil@ ; `string'
PUBLIC	??_C@_0CG@IKAONNMM@?1fa?5?$HL?5newpath?5setgray?5?5moveto?5li@ ; `string'
PUBLIC	??_C@_0EP@LBFEKADB@?1arcedge?5?$HLrelsize?5mul?5setlinewid@ ; `string'
PUBLIC	??_C@_0EP@DBPAPDEI@?1edge?5?$HLrelsize?5mul?5setlinewidth?5@ ; `string'
PUBLIC	??_C@_0FF@DCFMBNJF@?1fc?5?$HLsetrgbcolor?5?4001?5relsize?5mu@ ; `string'
PUBLIC	??_C@_0CP@PJJDAJNN@?1fb?5?$HLsetrgbcolor?56?5copy?5newpath?5@ ; `string'
PUBLIC	??_C@_0CK@PGLNPICM@?1fa?5?$HL?5newpath?5setrgbcolor?5?5movet@ ; `string'
PUBLIC	??_C@_0FA@HAMPBOBO@?1arcedge?5?$HLrelsize?5mul?5setlinewid@ ; `string'
PUBLIC	??_C@_0FA@LCGCOHHC@?1edge?5?$HLrelsize?5mul?5setlinewidth?5@ ; `string'
PUBLIC	??_C@_0FG@NOGGDAOP@?1fc?5?$HLsetcmykcolor?5?4001?5relsize?5m@ ; `string'
PUBLIC	??_C@_0FD@JBJBAFME@?5?5?5?5?5?5?5?5?5?5?5?5lineto?5closepath?5fil@ ; `string'
PUBLIC	??_C@_0DA@BKFCOFDF@?1fb?5?$HLsetcmykcolor?56?5copy?5newpath@ ; `string'
PUBLIC	??_C@_0EH@KGKCGMIK@?5?5?5?5?5?5?5?5?5?5?5?5lineto?5closepath?5fil@ ; `string'
PUBLIC	??_C@_0CL@DIAGKLJI@?1fa?5?$HL?5newpath?5setcmykcolor?5?5move@ ; `string'
PUBLIC	??_C@_0BN@FCHJOHFA@1?5setlinecap?5?51?5setlinejoin?6?$AA@ ; `string'
PUBLIC	??_C@_0CI@IKLNHDJN@?5?5?5lineto?5?5?$CFf?5?$CFf?5lineto?5closepat@ ; `string'
PUBLIC	??_C@_0CK@LMJLGMDB@newpath?5?$CFf?5?$CFf?5moveto?5?$CFf?5?$CFf?5linet@ ; `string'
PUBLIC	??_C@_0BB@JFJMBMFN@?$CFf?5?$CFf?5translate?6?$AA@ ; `string'
PUBLIC	??_C@_0N@FCODBFAN@?$CFf?5?$CFf?5scale?6?$AA@	; `string'
PUBLIC	??_C@_0BB@MCLCOEDH@?1relsize?5?$CFf?5def?6?$AA@	; `string'
PUBLIC	??_C@_0ED@LKMLEEBM@?$CF?5Change?5relsize?5to?5alter?5relati@ ; `string'
PUBLIC	??_C@_0DL@GLMDPJJB@?$CF?$CF?5Image?5is?5in?5?$CFg?$CC?5x?5?$CFg?$CC?5box?5ali@ ; `string'
PUBLIC	__real@4052000000000000
PUBLIC	??_C@_0BB@JDNEKMPP@?$CF?$CF?$CF?$CFEndComments?6?$AA@ ; `string'
PUBLIC	??_C@_0BG@KPIFMJIN@?$CF?$CF?$CF?$CFCreationDate?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0BO@MNBKGGKE@?$CF?$CF?$CF?$CFCreator?3?5Surface?5Evolver?6?$AA@ ; `string'
PUBLIC	??_C@_0BB@BBHFCBHE@?$CF?$CF?$CF?$CFTitle?3?5?$CI?$CFs?$CJ?6?$AA@ ; `string'
PUBLIC	??_C@_0BO@IBDGKICL@?$CF?$CF?$CF?$CFBoundingBox?3?5?$CFd?5?$CFd?5?$CFd?5?$CFd?6?$AA@ ; `string'
PUBLIC	__real@4008000000000000
PUBLIC	__real@3ff4cccccccccccd
PUBLIC	__real@3ff6666666666666
PUBLIC	__real@4006666666666666
PUBLIC	__real@4087a00000000000
PUBLIC	__real@4082000000000000
PUBLIC	__real@3fe8618618618618
PUBLIC	__real@3f60624dd2f1a9fc
PUBLIC	__real@3fb0e5604189374c
PUBLIC	??_C@_0BJ@IMINBCON@?$CF?$CBPS?9Adobe?93?40?5EPSF?93?40?6?$AA@ ; `string'
PUBLIC	??_C@_0N@BNIENEOH@ps_linewidth?$AA@		; `string'
PUBLIC	??_C@_09DCJMEOOE@PSGRAPH?4C?$AA@		; `string'
PUBLIC	??_C@_0BB@ODELLNDD@Cannot?5open?5?$CFs?4?6?$AA@	; `string'
PUBLIC	??_C@_01NOFIACDB@w?$AA@				; `string'
PUBLIC	??_C@_04BLDHNMND@?4eps?$AA@			; `string'
PUBLIC	??_C@_03MOLFLKIL@?4ps?$AA@			; `string'
PUBLIC	??_C@_0DI@GNDGOHEO@Enter?5file?5name?5?$CI?4ps?5will?5be?5add@ ; `string'
PUBLIC	??_C@_0CJ@MHEPFMME@Do?5labels?$DP?5?$CIi?5for?5ids?0?5o?5for?5ori@ ; `string'
PUBLIC	??_C@_0P@PHPILEEE@Do?5crossings?$DP?5?$AA@	; `string'
PUBLIC	??_C@_0M@KCIEHKIL@Do?5colors?$DP?5?$AA@		; `string'
PUBLIC	??_C@_0BC@GHMBHADK@Show?5grid?5lines?$DP?5?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_ps_init
EXTRN	_ps_gridedgewidth:QWORD
EXTRN	_ps_bareedgewidth:QWORD
EXTRN	_ps_conedgewidth:QWORD
EXTRN	_ps_tripleedgewidth:QWORD
EXTRN	_ps_fixededgewidth:QWORD
EXTRN	_ps_stringwidth:QWORD
EXTRN	_ps_labelsize:QWORD
EXTRN	_asctime:PROC
EXTRN	_fprintf:PROC
EXTRN	_ceil:PROC
EXTRN	_bbox_maxy:QWORD
EXTRN	_bbox_miny:QWORD
EXTRN	_bbox_maxx:QWORD
EXTRN	_bbox_minx:QWORD
EXTRN	_text_chunks:BYTE
EXTRN	_full_bounding_box_flag:DWORD
EXTRN	_minclipy:QWORD
EXTRN	_maxclipy:QWORD
EXTRN	_minclipx:QWORD
EXTRN	_maxclipx:QWORD
EXTRN	_fputs:PROC
EXTRN	_find_extra:PROC
EXTRN	_kb_temp_calloc:PROC
EXTRN	_kb_error:PROC
EXTRN	_sprintf:PROC
EXTRN	_errmsg:BYTE
EXTRN	_fopen:PROC
EXTRN	_labelflag:DWORD
EXTRN	_kb_upper_array:BYTE
EXTRN	_prompt:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_floor:PROC
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_fd	DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BG@CGOAOHGH@?1gw?5?$HL0?4002?5edge?$HN?5def?6?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
CONST	SEGMENT
??_C@_0BG@CGOAOHGH@?1gw?5?$HL0?4002?5edge?$HN?5def?6?$AA@ DB '/gw {0.002 '
	DB	'edge} def', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@FKDPLLEI@?5?5?5?50?5setgray?5newpath?5moveto?5lin@
CONST	SEGMENT
??_C@_0DB@FKDPLLEI@?5?5?5?50?5setgray?5newpath?5moveto?5lin@ DB '    0 se'
	DB	'tgray newpath moveto lineto stroke} def', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@LKBBNPFO@?5?5?5?5setrgbcolor?5newpath?5moveto?5l@
CONST	SEGMENT
??_C@_0DD@LKBBNPFO@?5?5?5?5setrgbcolor?5newpath?5moveto?5l@ DB '    setrg'
	DB	'bcolor newpath moveto lineto stroke} def', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@DPDEDOAF@?5?5?5?5newpath?5moveto?5lineto?5stroke@
CONST	SEGMENT
??_C@_0DM@DPDEDOAF@?5?5?5?5newpath?5moveto?5lineto?5stroke@ DB '    newpa'
	DB	'th moveto lineto stroke setlinewidth 2 setlinecap', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@CHEGEDHF@?1edge?5?$HL?55?5copy?5?4002?5add?5relsize?5@
CONST	SEGMENT
??_C@_0EJ@CHEGEDHF@?1edge?5?$HL?55?5copy?5?4002?5add?5relsize?5@ DB '/edg'
	DB	'e { 5 copy .002 add relsize mul setlinewidth 0 setlinecap 1 s'
	DB	'etgray', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@CHDDIGOA@?1edge?5?$HL?58?5copy?5?4002?5add?5relsize?5@
CONST	SEGMENT
??_C@_0FF@CHDDIGOA@?1edge?5?$HL?58?5copy?5?4002?5add?5relsize?5@ DB '/edg'
	DB	'e { 8 copy .002 add relsize mul setlinewidth 0 setlinecap 1 s'
	DB	'etgray pop pop pop', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GE@ONAIGPGO@?1edge?5?$HL?59?5copy?5?4002?5add?5relsize?5@
CONST	SEGMENT
??_C@_0GE@ONAIGPGO@?1edge?5?$HL?59?5copy?5?4002?5add?5relsize?5@ DB '/edg'
	DB	'e { 9 copy .002 add relsize mul setlinewidth 0 setlinecap 0 0'
	DB	' 0 1 setcmykcolor pop pop pop pop', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@IFLCLDEP@?1noc?5?$HLpop?5pop?5pop?5pop?$HN?5def?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CP@IFLCLDEP@?1noc?5?$HLpop?5pop?5pop?5pop?$HN?5def?5?5?5?5?5?5@ DB '/'
	DB	'noc {pop pop pop pop} def        %% no edge ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@FKJLIACP@?1noc?5?$HLpop?5pop?5pop?5pop?5pop?5pop?5po@
CONST	SEGMENT
??_C@_0EN@FKJLIACP@?1noc?5?$HLpop?5pop?5pop?5pop?5pop?5pop?5po@ DB '/noc '
	DB	'{pop pop pop pop pop pop pop} def        %% no edge (pop colo'
	DB	'rs also) ', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@PCKBKCBN@?1noc?5?$HLpop?5pop?5pop?5pop?5pop?5pop?5po@
CONST	SEGMENT
??_C@_0FB@PCKBKCBN@?1noc?5?$HLpop?5pop?5pop?5pop?5pop?5pop?5po@ DB '/noc '
	DB	'{pop pop pop pop pop pop pop pop} def        %% no edge (pop '
	DB	'colors also) ', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@MPEBDODO@?1no?5?$HLpop?5pop?5pop?5pop?$HN?5def?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CO@MPEBDODO@?1no?5?$HLpop?5pop?5pop?5pop?$HN?5def?5?5?5?5?5?5?5@ DB '/'
	DB	'no {pop pop pop pop} def        %% no edge ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@LFNNLJK@?1gw?5?$HL?$CF8?46f?5edge?$HN?5def?5?5?$CF?$CF?5grid?5ed@
CONST	SEGMENT
??_C@_0CK@LFNNLJK@?1gw?5?$HL?$CF8?46f?5edge?$HN?5def?5?5?$CF?$CF?5grid?5ed@ DB '/'
	DB	'gw {%8.6f edge} def  %% grid edge width', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@MJCOLLBK@?1bw?5?$HL?$CF8?46f?5edge?$HN?5def?5?5?$CF?$CF?5bare?5ed@
CONST	SEGMENT
??_C@_0CK@MJCOLLBK@?1bw?5?$HL?$CF8?46f?5edge?$HN?5def?5?5?$CF?$CF?5bare?5ed@ DB '/'
	DB	'bw {%8.6f edge} def  %% bare edge width', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@NAOKIBAA@?1ww?5?$HL?$CF8?46f?5edge?$HN?5def?5?5?$CF?$CF?5edges?5o@
CONST	SEGMENT
??_C@_0CJ@NAOKIBAA@?1ww?5?$HL?$CF8?46f?5edge?$HN?5def?5?5?$CF?$CF?5edges?5o@ DB '/'
	DB	'ww {%8.6f edge} def  %% edges on walls', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@HHMINEKJ@?1tw?5?$HL?$CF8?46f?5edge?$HN?5def?5?5?$CF?$CF?5triple?5@
CONST	SEGMENT
??_C@_0CM@HHMINEKJ@?1tw?5?$HL?$CF8?46f?5edge?$HN?5def?5?5?$CF?$CF?5triple?5@ DB '/'
	DB	'tw {%8.6f edge} def  %% triple edge width', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@HINKIMLE@?1fw?5?$HL?$CF8?46f?5edge?$HN?5def?5?5?$CF?$CF?5fixed?5e@
CONST	SEGMENT
??_C@_0CL@HINKIMLE@?1fw?5?$HL?$CF8?46f?5edge?$HN?5def?5?5?$CF?$CF?5fixed?5e@ DB '/'
	DB	'fw {%8.6f edge} def  %% fixed edge width', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@CKKPOBEI@?1ew?5?$HL?$CF8?46f?5edge?$HN?5def?5?5?$CF?$CF?5normal?5@
CONST	SEGMENT
??_C@_0DD@CKKPOBEI@?1ew?5?$HL?$CF8?46f?5edge?$HN?5def?5?5?$CF?$CF?5normal?5@ DB '/'
	DB	'ew {%8.6f edge} def  %% normal string edge width', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@GNDHOJAA@?5?5?5?5newpath?5?9?4019?5?9?401?5moveto?5sh@
CONST	SEGMENT
??_C@_0DE@GNDHOJAA@?5?5?5?5newpath?5?9?4019?5?9?401?5moveto?5sh@ DB '    '
	DB	'newpath -.019 -.01 moveto show grestore } def ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@DBAKLBOC@?5?5?5?$CF5?43f?50?5rlineto?50?5?403?5rlineto@
CONST	SEGMENT
??_C@_0EC@DBAKLBOC@?5?5?5?$CF5?43f?50?5rlineto?50?5?403?5rlineto@ DB '   '
	DB	'%5.3f 0 rlineto 0 .03 rlineto %5.3f 0 rlineto fill 0 setgray '
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT __real@3f9999999999999a
CONST	SEGMENT
__real@3f9999999999999a DQ 03f9999999999999ar	; 0.025
CONST	ENDS
;	COMDAT ??_C@_0CJ@PEIIJOLN@?5?5?5?5newpath?51?5setgray?5?9?402?5?9?4015@
CONST	SEGMENT
??_C@_0CJ@PEIIJOLN@?5?5?5?5newpath?51?5setgray?5?9?402?5?9?4015@ DB '    '
	DB	'newpath 1 setgray -.02 -.015 moveto', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@MELDGILJ@?1facenum?$CFd?5?$HL?5gsave?5translate?5rel@
CONST	SEGMENT
??_C@_0DE@MELDGILJ@?1facenum?$CFd?5?$HL?5gsave?5translate?5rel@ DB '/face'
	DB	'num%d { gsave translate relsize relsize scale', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@MNPNBEBH@?5?5?5?5rlineto?5fill?50?5setgray?5?$CF6?43f@
CONST	SEGMENT
??_C@_0EC@MNPNBEBH@?5?5?5?5rlineto?5fill?50?5setgray?5?$CF6?43f@ DB '    '
	DB	'rlineto fill 0 setgray %6.3f -.01 moveto show grestore } def', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@3f789374bc6a7efa
CONST	SEGMENT
__real@3f789374bc6a7efa DQ 03f789374bc6a7efar	; 0.006
CONST	ENDS
;	COMDAT ??_C@_0DH@BGOOIFIB@?5?5?5?5?51?5setgray?5?5?$CF5?43f?50?5rlineto?5@
CONST	SEGMENT
??_C@_0DH@BGOOIFIB@?5?5?5?5?51?5setgray?5?5?$CF5?43f?50?5rlineto?5@ DB ' '
	DB	'    1 setgray  %5.3f 0 rlineto 0 .03 rlineto %6.3f 0', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT __real@3f947ae147ae147b
CONST	SEGMENT
__real@3f947ae147ae147b DQ 03f947ae147ae147br	; 0.02
CONST	ENDS
;	COMDAT ??_C@_0CN@HCBLHHHN@?5?5?5?5rlineto?5fill?5newpath?5?$CF5?43f?5?9@
CONST	SEGMENT
??_C@_0CN@HCBLHHHN@?5?5?5?5rlineto?5fill?5newpath?5?$CF5?43f?5?9@ DB '   '
	DB	' rlineto fill newpath %5.3f -.014 moveto', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT __real@3f7ff2e48e8a71de
CONST	SEGMENT
__real@3f7ff2e48e8a71de DQ 03f7ff2e48e8a71der	; 0.0078
CONST	ENDS
;	COMDAT ??_C@_0DH@BLFPBPNK@?5?5?5?50?5setgray?5?5?$CF5?43f?50?5rlineto?50@
CONST	SEGMENT
??_C@_0DH@BLFPBPNK@?5?5?5?50?5setgray?5?5?$CF5?43f?50?5rlineto?50@ DB '  '
	DB	'  0 setgray  %5.3f 0 rlineto 0 .032 rlineto %6.3f 0', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT __real@3f96872b020c49ba
CONST	SEGMENT
__real@3f96872b020c49ba DQ 03f96872b020c49bar	; 0.022
CONST	ENDS
;	COMDAT __real@3f8a9fbe76c8b439
CONST	SEGMENT
__real@3f8a9fbe76c8b439 DQ 03f8a9fbe76c8b439r	; 0.013
CONST	ENDS
;	COMDAT ??_C@_0CC@LBEOIOFE@?5?5?5?5?5newpath?5?5?$CF5?43f?5?9?4016?5moveto@
CONST	SEGMENT
??_C@_0CC@LBEOIOFE@?5?5?5?5?5newpath?5?5?$CF5?43f?5?9?4016?5moveto@ DB ' '
	DB	'    newpath  %5.3f -.016 moveto', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT __real@3f80624dd2f1a9fc
CONST	SEGMENT
__real@3f80624dd2f1a9fc DQ 03f80624dd2f1a9fcr	; 0.008
CONST	ENDS
;	COMDAT ??_C@_0DE@OIBELIDE@?1edgenum?$CFd?5?$HL?5gsave?5translate?5rel@
CONST	SEGMENT
??_C@_0DE@OIBELIDE@?1edgenum?$CFd?5?$HL?5gsave?5translate?5rel@ DB '/edge'
	DB	'num%d { gsave translate relsize relsize scale', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@NBNMIMNL@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CF6?44f?5?9?401?5moveto@
CONST	SEGMENT
??_C@_0EA@NBNMIMNL@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CF6?44f?5?9?401?5moveto@ DB ' '
	DB	'              %6.4f -.01 moveto 0 setgray show grestore } def'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT __real@3f70624dd2f1a9fc
CONST	SEGMENT
__real@3f70624dd2f1a9fc DQ 03f70624dd2f1a9fcr	; 0.004
CONST	ENDS
;	COMDAT __real@3f847ae147ae147b
CONST	SEGMENT
__real@3f847ae147ae147b DQ 03f847ae147ae147br	; 0.01
CONST	ENDS
;	COMDAT ??_C@_0CH@IJCPBCIK@?5?5?5?5?5?5?5?5?5?5?5?5?5?52?5?$CFd?5div?52?5?$CFd?5div?5@
CONST	SEGMENT
??_C@_0CH@IJCPBCIK@?5?5?5?5?5?5?5?5?5?5?5?5?5?52?5?$CFd?5div?52?5?$CFd?5div?5@ DB ' '
	DB	'             2 %d div 2 %d div scale', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@POEJICLC@?5?5?5?5?5?5?5?5?5?5?5?5?5?5newpath?51?5setgray?5@
CONST	SEGMENT
??_C@_0DJ@POEJICLC@?5?5?5?5?5?5?5?5?5?5?5?5?5?5newpath?51?5setgray?5@ DB ' '
	DB	'             newpath 1 setgray 0 0 .020 0 360 arc fill', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@DEADPOPJ@?5?5?5?5?5?5?5?5?5?5?5?5?5?5newpath?50?5setgray?5@
CONST	SEGMENT
??_C@_0DJ@DEADPOPJ@?5?5?5?5?5?5?5?5?5?5?5?5?5?5newpath?50?5setgray?5@ DB ' '
	DB	'             newpath 0 setgray 0 0 .022 0 360 arc fill', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@JKPCNGJN@?1vertex?$CFd?5?$HL?5gsave?5translate?5rels@
CONST	SEGMENT
??_C@_0DD@JKPCNGJN@?1vertex?$CFd?5?$HL?5gsave?5translate?5rels@ DB '/vert'
	DB	'ex%d { gsave translate relsize relsize scale', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@KMJHALBO@?1Helvetica?5findfont?5?403?5scalefon@
CONST	SEGMENT
??_C@_0CL@KMJHALBO@?1Helvetica?5findfont?5?403?5scalefon@ DB '/Helvetica '
	DB	'findfont .03 scalefont setfont', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DPEHHPLJ@?5?$HN?5def?6?$AA@
CONST	SEGMENT
??_C@_07DPEHHPLJ@?5?$HN?5def?6?$AA@ DB ' } def', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LGFKOBPF@?5?5?5?5?5?5?5?5?$HN?5if?5?6?$AA@
CONST	SEGMENT
??_C@_0P@LGFKOBPF@?5?5?5?5?5?5?5?5?$HN?5if?5?6?$AA@ DB '        } if ', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@KELJBNIN@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5arrowrad?5angle?51@
CONST	SEGMENT
??_C@_0DL@KELJBNIN@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5arrowrad?5angle?51@ DB ' '
	DB	'               arrowrad angle 180 sub angle 225 sub arcn', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@MCDLLHLO@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5y2?5yu?5vorad?5mul?5@
CONST	SEGMENT
??_C@_0DK@MCDLLHLO@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5y2?5yu?5vorad?5mul?5@ DB ' '
	DB	'               y2 yu vorad mul sub  arrowrad xu mul add', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@EACGPMDM@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5x2?5xu?5vorad?5mul?5@
CONST	SEGMENT
??_C@_0DK@EACGPMDM@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5x2?5xu?5vorad?5mul?5@ DB ' '
	DB	'               x2 xu vorad mul sub  arrowrad yu mul sub', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FCDFNACB@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5stroke?6?$AA@
CONST	SEGMENT
??_C@_0BH@FCDFNACB@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5stroke?6?$AA@ DB '      '
	DB	'         stroke', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@KOIMPJML@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5arrowrad?5angle?5a@
CONST	SEGMENT
??_C@_0DB@KOIMPJML@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5arrowrad?5angle?5a@ DB ' '
	DB	'               arrowrad angle angle 45 add arc', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@DEDDDPBE@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5y2?5yu?5vorad?5mul?5@
CONST	SEGMENT
??_C@_0DK@DEDDDPBE@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5y2?5yu?5vorad?5mul?5@ DB ' '
	DB	'               y2 yu vorad mul sub  arrowrad xu mul sub', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@LGCOHEJG@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5x2?5xu?5vorad?5mul?5@
CONST	SEGMENT
??_C@_0DK@LGCOHEJG@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5x2?5xu?5vorad?5mul?5@ DB ' '
	DB	'               x2 xu vorad mul sub  arrowrad yu mul add', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@LLKMFIBG@?5?5?5?5?5?5?5?5newpath?5x2?5xu?5vorad?5mul?5@
CONST	SEGMENT
??_C@_0EB@LLKMFIBG@?5?5?5?5?5?5?5?5newpath?5x2?5xu?5vorad?5mul?5@ DB '   '
	DB	'     newpath x2 xu vorad mul sub  y2 yu vorad mul sub moveto', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@CACIHCGK@?5?5?5?5?5?5?5?5?1angle?5xu?5yu?5neg?5atan?5de@
CONST	SEGMENT
??_C@_0CD@CACIHCGK@?5?5?5?5?5?5?5?5?1angle?5xu?5yu?5neg?5atan?5de@ DB '  '
	DB	'      /angle xu yu neg atan def', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@BGIBHPDN@?5?5?5?5?5?5?5?5?1xu?5dx?5mag?5div?5def?5?1yu?5d@
CONST	SEGMENT
??_C@_0CP@BGIBHPDN@?5?5?5?5?5?5?5?5?1xu?5dx?5mag?5div?5def?5?1yu?5d@ DB ' '
	DB	'       /xu dx mag div def /yu dy mag div def', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@LAJKLMEC@?5?5?5?5?5?5?5?5mag?50?5ne?5?$HL?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CP@LAJKLMEC@?5?5?5?5?5?5?5?5mag?50?5ne?5?$HL?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB ' '
	DB	'       mag 0 ne {                           ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@CPCODPMC@?5?5?5?5?5?5?5?5?1mag?5dx?5dx?5mul?5dy?5dy?5mul@
CONST	SEGMENT
??_C@_0CP@CPCODPMC@?5?5?5?5?5?5?5?5?1mag?5dx?5dx?5mul?5dy?5dy?5mul@ DB ' '
	DB	'       /mag dx dx mul dy dy mul add sqrt def', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@DJFPBGGI@?5?5?5?5?5?5?5?5?1dy?5y2?5y1?5sub?5def?5?5?1dx?5x@
CONST	SEGMENT
??_C@_0CO@DJFPBGGI@?5?5?5?5?5?5?5?5?1dy?5y2?5y1?5sub?5def?5?5?1dx?5x@ DB ' '
	DB	'       /dy y2 y1 sub def  /dx x2 x1 sub def', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@LGKEEMMM@?5?5?5?5?5?5?5?5?1y2?5exch?5def?5?1x2?5exch?5de@
CONST	SEGMENT
??_C@_0DN@LGKEEMMM@?5?5?5?5?5?5?5?5?1y2?5exch?5def?5?1x2?5exch?5de@ DB ' '
	DB	'       /y2 exch def /x2 exch def /y1 exch def /x1 exch def', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NMAEMPIK@?5moveto?5lineto?5stroke?6?$AA@
CONST	SEGMENT
??_C@_0BH@NMAEMPIK@?5moveto?5lineto?5stroke?6?$AA@ DB ' moveto lineto str'
	DB	'oke', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@LHEOKJJJ@?1edge?5?$HL?5relsize?5mul?5setlinewidth@
CONST	SEGMENT
??_C@_0DL@LHEOKJJJ@?1edge?5?$HL?5relsize?5mul?5setlinewidth@ DB '/edge { '
	DB	'relsize mul setlinewidth 0 setgray 4 copy  newpath', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@FIHHEEKM@?1edge?5?$HL?5relsize?5mul?5setlinewidth@
CONST	SEGMENT
??_C@_0DN@FIHHEEKM@?1edge?5?$HL?5relsize?5mul?5setlinewidth@ DB '/edge { '
	DB	'relsize mul setlinewidth setrgbcolor 4 copy  newpath', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@NBCNNCAN@?1edge?5?$HL?5relsize?5mul?5setlinewidth@
CONST	SEGMENT
??_C@_0DO@NBCNNCAN@?1edge?5?$HL?5relsize?5mul?5setlinewidth@ DB '/edge { '
	DB	'relsize mul setlinewidth setcmykcolor 4 copy  newpath', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@ELMNCKGP@?1arrowrad?5vorad?5def?6?$AA@
CONST	SEGMENT
??_C@_0BF@ELMNCKGP@?1arrowrad?5vorad?5def?6?$AA@ DB '/arrowrad vorad def', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PADBKINN@?1vorad?5?4022?5relsize?5mul?5def?6?$AA@
CONST	SEGMENT
??_C@_0BN@PADBKINN@?1vorad?5?4022?5relsize?5mul?5def?6?$AA@ DB '/vorad .0'
	DB	'22 relsize mul def', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@BKAKNMA@?1arcedge?5?$HLrelsize?5mul?5setlinewid@
CONST	SEGMENT
??_C@_0EN@BKAKNMA@?1arcedge?5?$HLrelsize?5mul?5setlinewid@ DB '/arcedge {'
	DB	'relsize mul setlinewidth 0 setgray newpath moveto arc stroke}'
	DB	' def', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@MLELOJHB@?1edge?5?$HLrelsize?5mul?5setlinewidth?5@
CONST	SEGMENT
??_C@_0EN@MLELOJHB@?1edge?5?$HLrelsize?5mul?5setlinewidth?5@ DB '/edge {r'
	DB	'elsize mul setlinewidth 0 setgray newpath moveto lineto strok'
	DB	'e} def', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FL@EOEJNIFP@?1fc?5?$HLsetgray?50?5setgray?5?4001?5rels@
CONST	SEGMENT
??_C@_0FL@EOEJNIFP@?1fc?5?$HLsetgray?50?5setgray?5?4001?5rels@ DB '/fc {s'
	DB	'etgray 0 setgray .001 relsize mul setlinewidth 6 2 roll 6 cop'
	DB	'y} def % outline only', 0aH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@JFHIFEBJ@?1fb?5?$HLsetgray?56?5copy?5newpath?5move@
CONST	SEGMENT
??_C@_0CL@JFHIFEBJ@?1fb?5?$HLsetgray?56?5copy?5newpath?5move@ DB '/fb {se'
	DB	'tgray 6 copy newpath moveto lineto', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@GDNKHHIK@?5?5?5?5?5?5?5?5?5?5?5?5lineto?5closepath?5fil@
CONST	SEGMENT
??_C@_0EJ@GDNKHHIK@?5?5?5?5?5?5?5?5?5?5?5?5lineto?5closepath?5fil@ DB '  '
	DB	'          lineto closepath fill } def  % filled facet without'
	DB	' edges ', 0aH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@IKAONNMM@?1fa?5?$HL?5newpath?5setgray?5?5moveto?5li@
CONST	SEGMENT
??_C@_0CG@IKAONNMM@?1fa?5?$HL?5newpath?5setgray?5?5moveto?5li@ DB '/fa { '
	DB	'newpath setgray  moveto lineto', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@LBFEKADB@?1arcedge?5?$HLrelsize?5mul?5setlinewid@
CONST	SEGMENT
??_C@_0EP@LBFEKADB@?1arcedge?5?$HLrelsize?5mul?5setlinewid@ DB '/arcedge '
	DB	'{relsize mul setlinewidth setrgbcolor newpath moveto arc stro'
	DB	'ke} def', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@DBPAPDEI@?1edge?5?$HLrelsize?5mul?5setlinewidth?5@
CONST	SEGMENT
??_C@_0EP@DBPAPDEI@?1edge?5?$HLrelsize?5mul?5setlinewidth?5@ DB '/edge {r'
	DB	'elsize mul setlinewidth setrgbcolor newpath moveto lineto str'
	DB	'oke} def', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@DCFMBNJF@?1fc?5?$HLsetrgbcolor?5?4001?5relsize?5mu@
CONST	SEGMENT
??_C@_0FF@DCFMBNJF@?1fc?5?$HLsetrgbcolor?5?4001?5relsize?5mu@ DB '/fc {se'
	DB	'trgbcolor .001 relsize mul setlinewidth 6 2 roll 6 copy} def '
	DB	'% outline only', 0aH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@PJJDAJNN@?1fb?5?$HLsetrgbcolor?56?5copy?5newpath?5@
CONST	SEGMENT
??_C@_0CP@PJJDAJNN@?1fb?5?$HLsetrgbcolor?56?5copy?5newpath?5@ DB '/fb {se'
	DB	'trgbcolor 6 copy newpath moveto lineto', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@PGLNPICM@?1fa?5?$HL?5newpath?5setrgbcolor?5?5movet@
CONST	SEGMENT
??_C@_0CK@PGLNPICM@?1fa?5?$HL?5newpath?5setrgbcolor?5?5movet@ DB '/fa { n'
	DB	'ewpath setrgbcolor  moveto lineto', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@HAMPBOBO@?1arcedge?5?$HLrelsize?5mul?5setlinewid@
CONST	SEGMENT
??_C@_0FA@HAMPBOBO@?1arcedge?5?$HLrelsize?5mul?5setlinewid@ DB '/arcedge '
	DB	'{relsize mul setlinewidth setcmykcolor newpath moveto arc str'
	DB	'oke} def', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@LCGCOHHC@?1edge?5?$HLrelsize?5mul?5setlinewidth?5@
CONST	SEGMENT
??_C@_0FA@LCGCOHHC@?1edge?5?$HLrelsize?5mul?5setlinewidth?5@ DB '/edge {r'
	DB	'elsize mul setlinewidth setcmykcolor newpath moveto lineto st'
	DB	'roke} def', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FG@NOGGDAOP@?1fc?5?$HLsetcmykcolor?5?4001?5relsize?5m@
CONST	SEGMENT
??_C@_0FG@NOGGDAOP@?1fc?5?$HLsetcmykcolor?5?4001?5relsize?5m@ DB '/fc {se'
	DB	'tcmykcolor .001 relsize mul setlinewidth 6 2 roll 6 copy} def'
	DB	' % outline only', 0aH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@JBJBAFME@?5?5?5?5?5?5?5?5?5?5?5?5lineto?5closepath?5fil@
CONST	SEGMENT
??_C@_0FD@JBJBAFME@?5?5?5?5?5?5?5?5?5?5?5?5lineto?5closepath?5fil@ DB '  '
	DB	'          lineto closepath fill 6 2 roll 6 copy} def % filled'
	DB	' facet with edges', 0aH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@BKFCOFDF@?1fb?5?$HLsetcmykcolor?56?5copy?5newpath@
CONST	SEGMENT
??_C@_0DA@BKFCOFDF@?1fb?5?$HLsetcmykcolor?56?5copy?5newpath@ DB '/fb {set'
	DB	'cmykcolor 6 copy newpath moveto lineto', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@KGKCGMIK@?5?5?5?5?5?5?5?5?5?5?5?5lineto?5closepath?5fil@
CONST	SEGMENT
??_C@_0EH@KGKCGMIK@?5?5?5?5?5?5?5?5?5?5?5?5lineto?5closepath?5fil@ DB '  '
	DB	'          lineto closepath fill } def % filled facet without '
	DB	'edges', 0aH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@DIAGKLJI@?1fa?5?$HL?5newpath?5setcmykcolor?5?5move@
CONST	SEGMENT
??_C@_0CL@DIAGKLJI@?1fa?5?$HL?5newpath?5setcmykcolor?5?5move@ DB '/fa { n'
	DB	'ewpath setcmykcolor  moveto lineto', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FCHJOHFA@1?5setlinecap?5?51?5setlinejoin?6?$AA@
CONST	SEGMENT
??_C@_0BN@FCHJOHFA@1?5setlinecap?5?51?5setlinejoin?6?$AA@ DB '1 setlineca'
	DB	'p  1 setlinejoin', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@IKLNHDJN@?5?5?5lineto?5?5?$CFf?5?$CFf?5lineto?5closepat@
CONST	SEGMENT
??_C@_0CI@IKLNHDJN@?5?5?5lineto?5?5?$CFf?5?$CFf?5lineto?5closepat@ DB '  '
	DB	' lineto  %f %f lineto closepath clip', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@LMJLGMDB@newpath?5?$CFf?5?$CFf?5moveto?5?$CFf?5?$CFf?5linet@
CONST	SEGMENT
??_C@_0CK@LMJLGMDB@newpath?5?$CFf?5?$CFf?5moveto?5?$CFf?5?$CFf?5linet@ DB 'n'
	DB	'ewpath %f %f moveto %f %f lineto %f %f ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JFJMBMFN@?$CFf?5?$CFf?5translate?6?$AA@
CONST	SEGMENT
??_C@_0BB@JFJMBMFN@?$CFf?5?$CFf?5translate?6?$AA@ DB '%f %f translate', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FCODBFAN@?$CFf?5?$CFf?5scale?6?$AA@
CONST	SEGMENT
??_C@_0N@FCODBFAN@?$CFf?5?$CFf?5scale?6?$AA@ DB '%f %f scale', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MCLCOEDH@?1relsize?5?$CFf?5def?6?$AA@
CONST	SEGMENT
??_C@_0BB@MCLCOEDH@?1relsize?5?$CFf?5def?6?$AA@ DB '/relsize %f def', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@LKMLEEBM@?$CF?5Change?5relsize?5to?5alter?5relati@
CONST	SEGMENT
??_C@_0ED@LKMLEEBM@?$CF?5Change?5relsize?5to?5alter?5relati@ DB '% Change'
	DB	' relsize to alter relative size of labels and linewidths.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@GLMDPJJB@?$CF?$CF?5Image?5is?5in?5?$CFg?$CC?5x?5?$CFg?$CC?5box?5ali@
CONST	SEGMENT
??_C@_0DL@GLMDPJJB@?$CF?$CF?5Image?5is?5in?5?$CFg?$CC?5x?5?$CFg?$CC?5box?5ali@ DB '%'
	DB	'% Image is in %g" x %g" box aligned lower left on paper.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT __real@4052000000000000
CONST	SEGMENT
__real@4052000000000000 DQ 04052000000000000r	; 72
CONST	ENDS
;	COMDAT ??_C@_0BB@JDNEKMPP@?$CF?$CF?$CF?$CFEndComments?6?$AA@
CONST	SEGMENT
??_C@_0BB@JDNEKMPP@?$CF?$CF?$CF?$CFEndComments?6?$AA@ DB '%%%%EndComments'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KPIFMJIN@?$CF?$CF?$CF?$CFCreationDate?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BG@KPIFMJIN@?$CF?$CF?$CF?$CFCreationDate?3?5?$CFs?6?$AA@ DB '%%%%C'
	DB	'reationDate: %s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MNBKGGKE@?$CF?$CF?$CF?$CFCreator?3?5Surface?5Evolver?6?$AA@
CONST	SEGMENT
??_C@_0BO@MNBKGGKE@?$CF?$CF?$CF?$CFCreator?3?5Surface?5Evolver?6?$AA@ DB '%'
	DB	'%%%Creator: Surface Evolver', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BBHFCBHE@?$CF?$CF?$CF?$CFTitle?3?5?$CI?$CFs?$CJ?6?$AA@
CONST	SEGMENT
??_C@_0BB@BBHFCBHE@?$CF?$CF?$CF?$CFTitle?3?5?$CI?$CFs?$CJ?6?$AA@ DB '%%%%'
	DB	'Title: (%s)', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IBDGKICL@?$CF?$CF?$CF?$CFBoundingBox?3?5?$CFd?5?$CFd?5?$CFd?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BO@IBDGKICL@?$CF?$CF?$CF?$CFBoundingBox?3?5?$CFd?5?$CFd?5?$CFd?5?$CFd?6?$AA@ DB '%'
	DB	'%%%BoundingBox: %d %d %d %d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@3ff4cccccccccccd
CONST	SEGMENT
__real@3ff4cccccccccccd DQ 03ff4cccccccccccdr	; 1.3
CONST	ENDS
;	COMDAT __real@3ff6666666666666
CONST	SEGMENT
__real@3ff6666666666666 DQ 03ff6666666666666r	; 1.4
CONST	ENDS
;	COMDAT __real@4006666666666666
CONST	SEGMENT
__real@4006666666666666 DQ 04006666666666666r	; 2.8
CONST	ENDS
;	COMDAT __real@4087a00000000000
CONST	SEGMENT
__real@4087a00000000000 DQ 04087a00000000000r	; 756
CONST	ENDS
;	COMDAT __real@4082000000000000
CONST	SEGMENT
__real@4082000000000000 DQ 04082000000000000r	; 576
CONST	ENDS
;	COMDAT __real@3fe8618618618618
CONST	SEGMENT
__real@3fe8618618618618 DQ 03fe8618618618618r	; 0.761905
CONST	ENDS
;	COMDAT __real@3f60624dd2f1a9fc
CONST	SEGMENT
__real@3f60624dd2f1a9fc DQ 03f60624dd2f1a9fcr	; 0.002
CONST	ENDS
;	COMDAT __real@3fb0e5604189374c
CONST	SEGMENT
__real@3fb0e5604189374c DQ 03fb0e5604189374cr	; 0.066
CONST	ENDS
;	COMDAT ??_C@_0BJ@IMINBCON@?$CF?$CBPS?9Adobe?93?40?5EPSF?93?40?6?$AA@
CONST	SEGMENT
??_C@_0BJ@IMINBCON@?$CF?$CBPS?9Adobe?93?40?5EPSF?93?40?6?$AA@ DB '%!PS-Ad'
	DB	'obe-3.0 EPSF-3.0', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BNIENEOH@ps_linewidth?$AA@
CONST	SEGMENT
??_C@_0N@BNIENEOH@ps_linewidth?$AA@ DB 'ps_linewidth', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DCJMEOOE@PSGRAPH?4C?$AA@
CONST	SEGMENT
??_C@_09DCJMEOOE@PSGRAPH?4C?$AA@ DB 'PSGRAPH.C', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@ODELLNDD@Cannot?5open?5?$CFs?4?6?$AA@
CONST	SEGMENT
??_C@_0BB@ODELLNDD@Cannot?5open?5?$CFs?4?6?$AA@ DB 'Cannot open %s.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w?$AA@
CONST	SEGMENT
??_C@_01NOFIACDB@w?$AA@ DB 'w', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04BLDHNMND@?4eps?$AA@
CONST	SEGMENT
??_C@_04BLDHNMND@?4eps?$AA@ DB '.eps', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03MOLFLKIL@?4ps?$AA@
CONST	SEGMENT
??_C@_03MOLFLKIL@?4ps?$AA@ DB '.ps', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@GNDGOHEO@Enter?5file?5name?5?$CI?4ps?5will?5be?5add@
CONST	SEGMENT
??_C@_0DI@GNDGOHEO@Enter?5file?5name?5?$CI?4ps?5will?5be?5add@ DB 'Enter '
	DB	'file name (.ps will be added if no .ps or .eps): ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@MHEPFMME@Do?5labels?$DP?5?$CIi?5for?5ids?0?5o?5for?5ori@
CONST	SEGMENT
??_C@_0CJ@MHEPFMME@Do?5labels?$DP?5?$CIi?5for?5ids?0?5o?5for?5ori@ DB 'Do'
	DB	' labels? (i for ids, o for originals) ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PHPILEEE@Do?5crossings?$DP?5?$AA@
CONST	SEGMENT
??_C@_0P@PHPILEEE@Do?5crossings?$DP?5?$AA@ DB 'Do crossings? ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KCIEHKIL@Do?5colors?$DP?5?$AA@
CONST	SEGMENT
??_C@_0M@KCIEHKIL@Do?5colors?$DP?5?$AA@ DB 'Do colors? ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GHMBHADK@Show?5grid?5lines?$DP?5?$AA@
CONST	SEGMENT
??_C@_0BC@GHMBHADK@Show?5grid?5lines?$DP?5?$AA@ DB 'Show grid lines? ', 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\psgraph.c
CONST	ENDS
;	COMDAT _ps_init
_TEXT	SEGMENT
_dummy$ = -188						; size = 4
_t$ = -184						; size = 8
_char_wd$89103 = -176					; size = 8
tv931 = -168						; size = 8
_xsize$ = -168						; size = 8
tv927 = -160						; size = 8
_ysize$ = -160						; size = 8
_bb_miny$89096 = -152					; size = 8
tv924 = -144						; size = 8
_bb_maxy$89097 = -144					; size = 8
_scale$ = -136						; size = 8
_bb_maxx$89095 = -128					; size = 8
tv1240 = -124						; size = 4
_xhi$ = -124						; size = 4
_bb_minx$89094 = -120					; size = 8
_n$ = -116						; size = 4
_ylo$ = -116						; size = 4
_extra$ = -112						; size = 8
tv1007 = -108						; size = 4
tv1005 = -108						; size = 4
tv946 = -108						; size = 4
tv822 = -108						; size = 4
_yhi$ = -108						; size = 4
_response$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
_ps_init PROC						; COMDAT

; 54   : { char response[100];

	push	ebp
	mov	ebp, esp
	sub	esp, 188				; 000000bcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi

; 55   :   int xlo,xhi,ylo,yhi;  /* int according to PostScript manual */
; 56   :   REAL extra;
; 57   :   time_t t;
; 58   :   REAL xsize,ysize,scale;  /* for clipping box */
; 59   :   int dummy;
; 60   :   int n;
; 61   : 
; 62   :   if ( (web.representation != STRING) && (gridflag < 0) )

	mov	esi, 1
	push	edi
	mov	bl, 89					; 00000059H
	cmp	DWORD PTR _web+624, esi
	je	SHORT $LN85@ps_init
	cmp	DWORD PTR _gridflag, 0
	jge	SHORT $LN85@ps_init

; 63   :   {
; 64   :     prompt("Show grid lines? ",response,sizeof(response));

	push	100					; 00000064H
	lea	eax, DWORD PTR _response$[ebp]
	push	eax
	push	OFFSET ??_C@_0BC@GHMBHADK@Show?5grid?5lines?$DP?5?$AA@
	call	_prompt

; 65   :     gridflag = (toupper(response[0]) == 'Y');

	movsx	ecx, BYTE PTR _response$[ebp]
	xor	eax, eax
	add	esp, 12					; 0000000cH
	cmp	BYTE PTR _kb_upper_array[ecx], bl
	sete	al

; 66   :     edgeredrawflag = !gridflag;  /* default */

	xor	edx, edx
	test	eax, eax
	mov	DWORD PTR _gridflag, eax

; 67   :     if (toupper(response[1]) == 'Y') edgeredrawflag = 1;

	movsx	eax, BYTE PTR _response$[ebp+1]
	mov	al, BYTE PTR _kb_upper_array[eax]
	sete	dl
	mov	DWORD PTR _edgeredrawflag, edx
	cmp	al, bl
	jne	SHORT $LN58@ps_init
	mov	DWORD PTR _edgeredrawflag, esi
$LN58@ps_init:

; 68   :     if (toupper(response[1]) == 'N') edgeredrawflag = 0;

	cmp	al, 78					; 0000004eH
	jne	SHORT $LN85@ps_init
	mov	DWORD PTR _edgeredrawflag, 0
$LN85@ps_init:

; 69   : 
; 70   :   }
; 71   :   if ( ps_colorflag < 0 )

	cmp	DWORD PTR _ps_colorflag, 0
	jge	SHORT $LN56@ps_init

; 72   :   { prompt("Do colors? ",response,sizeof(response));

	push	100					; 00000064H
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	push	OFFSET ??_C@_0M@KCIEHKIL@Do?5colors?$DP?5?$AA@
	call	_prompt

; 73   :     ps_colorflag = (toupper(response[0]) == 'Y');

	movsx	edx, BYTE PTR _response$[ebp]
	xor	eax, eax
	add	esp, 12					; 0000000cH
	cmp	BYTE PTR _kb_upper_array[edx], bl
	sete	al
	mov	DWORD PTR _ps_colorflag, eax
$LN56@ps_init:

; 74   :   }
; 75   :   if ( (web.representation == STRING) && (SDIM > 2) && (crossingflag < 0) )

	mov	edi, 2
	cmp	DWORD PTR _web+624, esi
	jne	SHORT $LN91@ps_init
	cmp	DWORD PTR _web+616, edi
	jle	SHORT $LN91@ps_init
	cmp	DWORD PTR _crossingflag, 0
	jge	SHORT $LN91@ps_init

; 76   :   {
; 77   :     prompt("Do crossings? ",response,sizeof(response));

	push	100					; 00000064H
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	push	OFFSET ??_C@_0P@PHPILEEE@Do?5crossings?$DP?5?$AA@
	call	_prompt

; 78   :     crossingflag = (toupper(response[0]) == 'Y');

	movsx	edx, BYTE PTR _response$[ebp]
	xor	eax, eax
	add	esp, 12					; 0000000cH
	cmp	BYTE PTR _kb_upper_array[edx], bl
	sete	al
	mov	DWORD PTR _crossingflag, eax
$LN91@ps_init:

; 79   :   }
; 80   :   if ( labelflag < 0 )

	cmp	DWORD PTR _labelflag, 0
	jge	SHORT $LN52@ps_init

; 81   :   { prompt("Do labels? (i for ids, o for originals) ",response,sizeof(response));

	push	100					; 00000064H
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CJ@MHEPFMME@Do?5labels?$DP?5?$CIi?5for?5ids?0?5o?5for?5ori@
	call	_prompt

; 82   :     switch ( toupper(response[0]) )

	movsx	edx, BYTE PTR _response$[ebp]
	mov	al, BYTE PTR _kb_upper_array[edx]
	add	esp, 12					; 0000000cH
	cmp	al, 73					; 00000049H
	je	SHORT $LN51@ps_init
	cmp	al, 79					; 0000004fH
	je	SHORT $LN50@ps_init
	cmp	al, bl
	je	SHORT $LN51@ps_init

; 86   :        default  : labelflag = NOLABELS;

	mov	DWORD PTR _labelflag, 0
	jmp	SHORT $LN52@ps_init
$LN50@ps_init:

; 85   :        case 'O' : labelflag = LABEL_ORIG; break;

	mov	DWORD PTR _labelflag, edi
	jmp	SHORT $LN52@ps_init
$LN51@ps_init:

; 83   :      { case 'I' :
; 84   :        case 'Y' : labelflag = LABEL_ID; break;

	mov	DWORD PTR _labelflag, esi
$LN52@ps_init:

; 87   :      }
; 88   :   }
; 89   :   if ( strlen(ps_file_name) == 0 )

	mov	eax, OFFSET _ps_file_name
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL74@ps_init:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL74@ps_init
	sub	eax, edx
	jne	SHORT $LN92@ps_init

; 90   :   {
; 91   :      prompt("Enter file name (.ps will be added if no .ps or .eps): ",ps_file_name,sizeof(ps_file_name));

	push	1000					; 000003e8H
	push	OFFSET _ps_file_name
	push	OFFSET ??_C@_0DI@GNDGOHEO@Enter?5file?5name?5?$CI?4ps?5will?5be?5add@
	call	_prompt
	add	esp, 12					; 0000000cH
$LN92@ps_init:

; 92   :   }
; 93   :   if ( (strcmp(ps_file_name+strlen(ps_file_name)-3,".ps")!=0) && 
; 94   :          (strcmp(ps_file_name+strlen(ps_file_name)-4,".eps")!=0) )

	mov	eax, OFFSET _ps_file_name
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL75@ps_init:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL75@ps_init
	sub	eax, edx
	mov	edx, OFFSET ??_C@_03MOLFLKIL@?4ps?$AA@
	lea	ecx, DWORD PTR _ps_file_name[eax-3]
$LL76@ps_init:
	mov	bl, BYTE PTR [ecx]
	cmp	bl, BYTE PTR [edx]
	jne	SHORT $LN77@ps_init
	test	bl, bl
	je	SHORT $LN78@ps_init
	mov	bl, BYTE PTR [ecx+1]
	cmp	bl, BYTE PTR [edx+1]
	jne	SHORT $LN77@ps_init
	add	ecx, edi
	add	edx, edi
	test	bl, bl
	jne	SHORT $LL76@ps_init
$LN78@ps_init:
	xor	ecx, ecx
	jmp	SHORT $LN79@ps_init
$LN77@ps_init:
	sbb	ecx, ecx
	sbb	ecx, -1
$LN79@ps_init:
	test	ecx, ecx
	je	SHORT $LN93@ps_init
	mov	ecx, OFFSET ??_C@_04BLDHNMND@?4eps?$AA@
	lea	eax, DWORD PTR _ps_file_name[eax-4]
$LL80@ps_init:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN81@ps_init
	test	dl, dl
	je	SHORT $LN82@ps_init
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN81@ps_init
	add	eax, edi
	add	ecx, edi
	test	dl, dl
	jne	SHORT $LL80@ps_init
$LN82@ps_init:
	xor	eax, eax
	jmp	SHORT $LN83@ps_init
$LN81@ps_init:
	sbb	eax, eax
	sbb	eax, -1
$LN83@ps_init:
	test	eax, eax
	je	SHORT $LN93@ps_init

; 95   :         strcat(ps_file_name,".ps");

	mov	edi, OFFSET _ps_file_name
	dec	edi
$LL84@ps_init:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL84@ps_init
	mov	eax, DWORD PTR ??_C@_03MOLFLKIL@?4ps?$AA@
	mov	DWORD PTR [edi], eax
$LN93@ps_init:

; 96   :   fd = fopen(ps_file_name,"w");

	push	OFFSET ??_C@_01NOFIACDB@w?$AA@
	push	OFFSET _ps_file_name
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fd, eax

; 97   :   if ( fd == NULL )

	test	eax, eax
	jne	SHORT $LN46@ps_init

; 98   :   { sprintf(errmsg,"Cannot open %s.\n",ps_file_name);

	push	OFFSET _ps_file_name
	push	OFFSET ??_C@_0BB@ODELLNDD@Cannot?5open?5?$CFs?4?6?$AA@
	push	OFFSET _errmsg
	call	_sprintf

; 99   :     ps_file_name[0] = 0;
; 100  :     kb_error(1649,errmsg,RECOVERABLE);

	push	esi
	push	OFFSET _errmsg
	push	1649					; 00000671H
	mov	BYTE PTR _ps_file_name, 0
	call	_kb_error
	add	esp, 24					; 00000018H
$LN46@ps_init:

; 101  :   }
; 102  : 
; 103  :   edgeredrawcount = 1;
; 104  :   edgeredrawhead = (int*)temp_calloc(web.skel[VERTEX].max_ord+5,sizeof(int));

	mov	ecx, DWORD PTR _web+68
	push	104					; 00000068H
	push	OFFSET ??_C@_09DCJMEOOE@PSGRAPH?4C?$AA@
	add	ecx, 5
	push	4
	push	ecx
	mov	DWORD PTR _edgeredrawcount, esi
	call	_kb_temp_calloc

; 105  :   edgeredrawmax  = web.skel[EDGE].count;
; 106  :   edgeredrawlist = (struct erl *)temp_calloc(edgeredrawmax,sizeof(struct erl));

	push	106					; 0000006aH
	push	OFFSET ??_C@_09DCJMEOOE@PSGRAPH?4C?$AA@
	mov	DWORD PTR _edgeredrawhead, eax
	mov	eax, DWORD PTR _web+176
	push	40					; 00000028H
	push	eax
	mov	DWORD PTR _edgeredrawmax, eax
	call	_kb_temp_calloc

; 107  :   ps_widthattr = find_extra(PS_WIDTHNAME,&dummy);

	lea	edx, DWORD PTR _dummy$[ebp]
	push	edx
	push	OFFSET ??_C@_0N@BNIENEOH@ps_linewidth?$AA@
	mov	DWORD PTR _edgeredrawlist, eax
	call	_find_extra
	mov	DWORD PTR _ps_widthattr, eax

; 108  :   fputs("%!PS-Adobe-3.0 EPSF-3.0\n",fd);

	mov	eax, DWORD PTR _fd
	push	eax
	push	OFFSET ??_C@_0BJ@IMINBCON@?$CF?$CBPS?9Adobe?93?40?5EPSF?93?40?6?$AA@
	call	_fputs
	add	esp, 48					; 00000030H

; 109  :   /* bounding box, with a little extra for line widths and labels */  
; 110  :   extra = (labelflag>0) ? .066 : .002;

	cmp	DWORD PTR _labelflag, 0
	jle	SHORT $LN62@ps_init
	fld	QWORD PTR __real@3fb0e5604189374c
	jmp	SHORT $LN143@ps_init
$LN62@ps_init:
	fld	QWORD PTR __real@3f60624dd2f1a9fc
$LN143@ps_init:
	fstp	QWORD PTR _extra$[ebp]

; 111  :   xsize = maxclipx - minclipx; ysize = maxclipy - minclipy;

	fld	QWORD PTR _maxclipx
	fsub	QWORD PTR _minclipx
	fst	QWORD PTR _xsize$[ebp]
	fld	QWORD PTR _maxclipy
	fsub	QWORD PTR _minclipy
	fst	QWORD PTR _ysize$[ebp]

; 112  :   if ( xsize/ysize > 8/10.5 ) scale = 8*72/xsize;

	fld	ST(1)
	fdiv	ST(0), ST(1)
	fcomp	QWORD PTR __real@3fe8618618618618
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN45@ps_init
	fld	QWORD PTR __real@4082000000000000
	fdiv	ST(0), ST(2)
	jmp	SHORT $LN144@ps_init
$LN45@ps_init:

; 113  :   else scale = 10.5*72/ysize;

	fld	QWORD PTR __real@4087a00000000000
	fdiv	ST(0), ST(1)
$LN144@ps_init:

; 114  : 
; 115  :   if ( full_bounding_box_flag )

	cmp	DWORD PTR _full_bounding_box_flag, 0
	fst	QWORD PTR _scale$[ebp]
	je	SHORT $LN100@ps_init

; 116  :   { xlo = 0;
; 117  :     ylo = 0;
; 118  :     xhi = (int)(xsize*scale);

	fld	ST(0)
	xor	ebx, ebx
	fmulp	ST(3), ST(0)
	mov	DWORD PTR _ylo$[ebp], ebx
	fxch	ST(2)
	call	__ftol2_sse

; 119  :     yhi = (int)(ysize*scale);

	fmulp	ST(1), ST(0)
	mov	edi, eax
	call	__ftol2_sse
	mov	esi, eax

; 120  :   }
; 121  :   else /* as defined by surface, but clipped by window */

	jmp	$LN24@ps_init
$LN100@ps_init:

; 114  : 
; 115  :   if ( full_bounding_box_flag )

	fstp	ST(2)

; 122  :   { int i;
; 123  :     REAL bb_minx = bbox_minx; // local copy of bounding box

	mov	edx, OFFSET _text_chunks+24
	fstp	ST(0)
	fstp	ST(0)
	fld	QWORD PTR _bbox_minx
	fst	QWORD PTR _bb_minx$89094[ebp]

; 124  :     REAL bb_maxx = bbox_maxx;

	fld	QWORD PTR _bbox_maxx
	fstp	QWORD PTR _bb_maxx$89095[ebp]

; 125  :     REAL bb_miny = bbox_miny;

	fld	QWORD PTR _bbox_miny
	fstp	QWORD PTR _bb_miny$89096[ebp]

; 126  :     REAL bb_maxy = bbox_maxy;

	fld	QWORD PTR _bbox_maxy
	fstp	QWORD PTR _bb_maxy$89097[ebp]
	fld	QWORD PTR __real@4006666666666666
	fld	QWORD PTR __real@3ff6666666666666
$LN94@ps_init:

; 130  :     { 
; 131  :       if ( text_chunks[i].text )

	mov	ecx, DWORD PTR [edx-24]
	test	ecx, ecx
	je	$LN40@ps_init

; 153  :         if ( ytop > bb_maxy ) bb_maxy = ytop;

	fstp	ST(2)
	mov	al, BYTE PTR [ecx]
	fld	QWORD PTR [edx]
	fmul	QWORD PTR __real@3ff4cccccccccccd
	fld	ST(0)
	fmul	ST(0), ST(2)
	fxch	ST(1)
	fmul	ST(0), ST(3)
	fstp	QWORD PTR _char_wd$89103[ebp]
	fld	QWORD PTR [edx-16]
	fmul	ST(0), ST(2)
	fsub	ST(0), ST(3)
	fld	ST(0)
	fld	QWORD PTR [edx-8]
	fmul	ST(0), ST(4)
	fsub	ST(0), ST(5)
	fld	ST(3)
	fdiv	QWORD PTR __real@4008000000000000
	fsubp	ST(1), ST(0)
	fld	ST(0)
	fadd	ST(0), ST(4)
	test	al, al
	jne	SHORT $LN88@ps_init

; 132  :       { REAL line_ht = 1.3*text_chunks[i].vsize*2.8;  // 1.3 fudge factor for helvetica vs glut font
; 133  :         REAL char_wd = 1.3*text_chunks[i].vsize*1.4; 
; 134  :         REAL xleft = -1.4+2.8*text_chunks[i].start_x;
; 135  :         REAL xright = xleft;
; 136  :         REAL ybottom = -1.4+2.8*text_chunks[i].start_y - line_ht/3;
; 137  :         REAL ytop = ybottom + line_ht;
; 138  : 
; 139  :         char *c;
; 140  :         for ( c = text_chunks[i].text ; *c ; c++ )

	fstp	ST(4)
	jmp	SHORT $LN86@ps_init
$LN116@ps_init:

; 147  :             xright += char_wd;

	fxch	ST(1)
	fxch	ST(2)
$LN88@ps_init:

; 141  :         { if ( *c == '\n' )

	cmp	al, 10					; 0000000aH
	jne	SHORT $LN34@ps_init

; 142  :           { if ( xright > bb_minx ) bb_maxx = xright;

	fld	QWORD PTR _bb_minx$89094[ebp]
	fcomp	ST(3)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN112@ps_init
	fxch	ST(2)
	fstp	QWORD PTR _bb_maxx$89095[ebp]

; 143  :             xright = xleft;

	fld	ST(2)

; 144  :             ybottom -= line_ht;

	fxch	ST(1)
	fsub	ST(0), ST(4)

; 145  :           }
; 146  :           else 

	jmp	SHORT $LN36@ps_init
$LN112@ps_init:

; 142  :           { if ( xright > bb_minx ) bb_maxx = xright;

	fstp	ST(2)

; 143  :             xright = xleft;

	fld	ST(2)

; 144  :             ybottom -= line_ht;

	fxch	ST(1)
	fsub	ST(0), ST(4)

; 145  :           }
; 146  :           else 

	jmp	SHORT $LN36@ps_init
$LN34@ps_init:

; 147  :             xright += char_wd;

	fxch	ST(2)
	fadd	QWORD PTR _char_wd$89103[ebp]
	fxch	ST(1)
$LN36@ps_init:

; 132  :       { REAL line_ht = 1.3*text_chunks[i].vsize*2.8;  // 1.3 fudge factor for helvetica vs glut font
; 133  :         REAL char_wd = 1.3*text_chunks[i].vsize*1.4; 
; 134  :         REAL xleft = -1.4+2.8*text_chunks[i].start_x;
; 135  :         REAL xright = xleft;
; 136  :         REAL ybottom = -1.4+2.8*text_chunks[i].start_y - line_ht/3;
; 137  :         REAL ytop = ybottom + line_ht;
; 138  : 
; 139  :         char *c;
; 140  :         for ( c = text_chunks[i].text ; *c ; c++ )

	mov	al, BYTE PTR [ecx+1]
	inc	ecx
	test	al, al
	jne	SHORT $LN116@ps_init

; 147  :             xright += char_wd;

	fstp	ST(4)
	fxch	ST(1)
	fxch	ST(3)
$LN86@ps_init:

; 148  :         }
; 149  :      
; 150  :         if ( xleft < bb_minx ) bb_minx = xleft;

	fld	QWORD PTR _bb_minx$89094[ebp]
	fcom	ST(3)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN119@ps_init
	fstp	ST(0)
	fxch	ST(2)
	fst	QWORD PTR _bb_minx$89094[ebp]
	fxch	ST(2)
$LN31@ps_init:

; 151  :         if ( xright > bb_maxx ) bb_maxx = xright;

	fld	QWORD PTR _bb_maxx$89095[ebp]
	fcomp	ST(2)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN123@ps_init
	fxch	ST(1)
	fstp	QWORD PTR _bb_maxx$89095[ebp]
	jmp	SHORT $LN30@ps_init
$LN119@ps_init:

; 148  :         }
; 149  :      
; 150  :         if ( xleft < bb_minx ) bb_minx = xleft;

	fstp	ST(3)
	jmp	SHORT $LN31@ps_init
$LN123@ps_init:

; 151  :         if ( xright > bb_maxx ) bb_maxx = xright;

	fstp	ST(1)
$LN30@ps_init:

; 152  :         if ( ybottom < bb_miny ) bb_miny = ybottom;

	fld	QWORD PTR _bb_miny$89096[ebp]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN126@ps_init
	fstp	QWORD PTR _bb_miny$89096[ebp]
	jmp	SHORT $LN29@ps_init
$LN126@ps_init:
	fstp	ST(0)
$LN29@ps_init:

; 153  :         if ( ytop > bb_maxy ) bb_maxy = ytop;

	fld	QWORD PTR _bb_maxy$89097[ebp]
	fcomp	ST(2)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN129@ps_init
	fxch	ST(1)
	fstp	QWORD PTR _bb_maxy$89097[ebp]
	jmp	SHORT $LN131@ps_init
$LN129@ps_init:
	fstp	ST(1)
$LN131@ps_init:
	fxch	ST(2)
$LN40@ps_init:

; 127  : 
; 128  :     // Expand bounding box to contain text.
; 129  :     for ( i = 0 ; i < MAXTEXTS ; i++ )

	add	edx, 32					; 00000020H
	cmp	edx, OFFSET _text_chunks+3224
	jl	$LN94@ps_init
	fstp	ST(1)

; 154  :       }
; 155  :     }
; 156  : 
; 157  :     // convert to points
; 158  :     xlo = (int)floor((bb_minx - extra - minclipx)*scale); 

	sub	esp, 8
	fstp	ST(0)
	fsub	QWORD PTR _extra$[ebp]
	fsub	QWORD PTR _minclipx
	fmul	QWORD PTR _scale$[ebp]
	fstp	QWORD PTR [esp]
	call	_floor
	call	__ftol2_sse

; 159  :     xhi = (int)ceil((bb_maxx + extra - minclipx)*scale); 

	fld	QWORD PTR _bb_maxx$89095[ebp]
	fadd	QWORD PTR _extra$[ebp]
	mov	ebx, eax
	fsub	QWORD PTR _minclipx
	fmul	QWORD PTR _scale$[ebp]
	fstp	QWORD PTR [esp]
	call	_ceil
	call	__ftol2_sse

; 160  :     ylo = (int)floor((bb_miny - extra - minclipy)*scale); 

	fld	QWORD PTR _bb_miny$89096[ebp]
	fsub	QWORD PTR _extra$[ebp]
	mov	edi, eax
	mov	DWORD PTR _xhi$[ebp], edi
	fsub	QWORD PTR _minclipy
	fmul	QWORD PTR _scale$[ebp]
	fstp	QWORD PTR [esp]
	call	_floor
	call	__ftol2_sse

; 161  :     yhi = (int)ceil((bb_maxy + extra - minclipy )*scale); 

	fld	QWORD PTR _bb_maxy$89097[ebp]
	fadd	QWORD PTR _extra$[ebp]
	mov	DWORD PTR _ylo$[ebp], eax
	fsub	QWORD PTR _minclipy
	fmul	QWORD PTR _scale$[ebp]
	fstp	QWORD PTR [esp]
	call	_ceil
	add	esp, 8
	call	__ftol2_sse
	mov	esi, eax
	mov	DWORD PTR _yhi$[ebp], esi

; 162  : 
; 163  :     // clip to window
; 164  :     if ( xlo < 0 ) xlo = 0;

	test	ebx, ebx
	jns	SHORT $LN90@ps_init
	xor	ebx, ebx
$LN90@ps_init:

; 165  :     if ( xhi > xsize*scale ) xhi = (int)(xsize*scale);

	fld	QWORD PTR _scale$[ebp]
	fld	QWORD PTR _xsize$[ebp]
	fmul	ST(0), ST(1)
	fild	DWORD PTR _xhi$[ebp]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN135@ps_init
	call	__ftol2_sse
	mov	edi, eax
	jmp	SHORT $LN26@ps_init
$LN135@ps_init:
	fstp	ST(0)
$LN26@ps_init:

; 166  :     if ( ylo < 0 ) ylo = 0; 

	cmp	DWORD PTR _ylo$[ebp], 0
	jge	SHORT $LN25@ps_init
	mov	DWORD PTR _ylo$[ebp], 0
$LN25@ps_init:

; 167  :     if ( yhi > ysize*scale ) yhi = (int)(ysize*scale);

	fmul	QWORD PTR _ysize$[ebp]
	fild	DWORD PTR _yhi$[ebp]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN141@ps_init
	call	__ftol2_sse
	mov	esi, eax
	jmp	SHORT $LN24@ps_init
$LN141@ps_init:
	fstp	ST(0)
$LN24@ps_init:

; 168  : 
; 169  :   }
; 170  :   fprintf(fd,"%%%%BoundingBox: %d %d %d %d\n",xlo,ylo,xhi,yhi);

	mov	ecx, DWORD PTR _ylo$[ebp]
	mov	edx, DWORD PTR _fd
	push	esi
	push	edi
	push	ecx
	push	ebx
	push	OFFSET ??_C@_0BO@IBDGKICL@?$CF?$CF?$CF?$CFBoundingBox?3?5?$CFd?5?$CFd?5?$CFd?5?$CFd?6?$AA@
	push	edx
	call	_fprintf

; 171  :   fprintf(fd,"%%%%Title: (%s)\n",ps_file_name);

	mov	eax, DWORD PTR _fd
	push	OFFSET _ps_file_name
	push	OFFSET ??_C@_0BB@BBHFCBHE@?$CF?$CF?$CF?$CFTitle?3?5?$CI?$CFs?$CJ?6?$AA@
	push	eax
	call	_fprintf

; 172  :   fprintf(fd,"%%%%Creator: Surface Evolver\n");

	mov	ecx, DWORD PTR _fd
	push	OFFSET ??_C@_0BO@MNBKGGKE@?$CF?$CF?$CF?$CFCreator?3?5Surface?5Evolver?6?$AA@
	push	ecx
	call	_fprintf

; 173  :   time(&t);

	lea	edx, DWORD PTR _t$[ebp]
	push	edx
	call	__time64

; 174  :   fprintf(fd,"%%%%CreationDate: %s\n",asctime(localtime(&t)));

	lea	eax, DWORD PTR _t$[ebp]
	push	eax
	call	__localtime64
	push	eax
	call	_asctime
	mov	ecx, DWORD PTR _fd
	push	eax
	push	OFFSET ??_C@_0BG@KPIFMJIN@?$CF?$CF?$CF?$CFCreationDate?3?5?$CFs?6?$AA@
	push	ecx
	call	_fprintf

; 175  :   fprintf(fd,"%%%%EndComments\n");

	mov	edx, DWORD PTR _fd
	add	esp, 68					; 00000044H
	push	OFFSET ??_C@_0BB@JDNEKMPP@?$CF?$CF?$CF?$CFEndComments?6?$AA@
	push	edx
	call	_fprintf

; 176  :   fprintf(fd,"%% Image is in %g\" x %g\" box aligned lower left on paper.\n",
; 177  :       (DOUBLE)(xhi-xlo)/72.,(DOUBLE)(yhi-ylo)/72.);

	sub	esi, DWORD PTR _ylo$[ebp]
	sub	edi, ebx
	mov	DWORD PTR tv1007[ebp], esi
	fild	DWORD PTR tv1007[ebp]
	mov	DWORD PTR tv1005[ebp], edi
	fld	QWORD PTR __real@4052000000000000
	mov	eax, DWORD PTR _fd
	sub	esp, 8
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [esp+8]
	fild	DWORD PTR tv1005[ebp]
	fdivrp	ST(1), ST(0)
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0DL@GLMDPJJB@?$CF?$CF?5Image?5is?5in?5?$CFg?$CC?5x?5?$CFg?$CC?5box?5ali@
	push	eax
	call	_fprintf

; 178  :   fputs("% Change relsize to alter relative size of labels and linewidths.\n",fd);

	mov	ecx, DWORD PTR _fd
	push	ecx
	push	OFFSET ??_C@_0ED@LKMLEEBM@?$CF?5Change?5relsize?5to?5alter?5relati@
	call	_fputs

; 179  :   fprintf(fd,"/relsize %f def\n",(DOUBLE)ps_labelsize);

	fld	QWORD PTR _ps_labelsize
	mov	edx, DWORD PTR _fd
	fstp	QWORD PTR [esp+24]
	add	esp, 24					; 00000018H
	push	OFFSET ??_C@_0BB@MCLCOEDH@?1relsize?5?$CFf?5def?6?$AA@
	push	edx
	call	_fprintf

; 180  :   fprintf(fd,"%f %f scale\n",(DOUBLE)scale,(DOUBLE)scale);

	fld	QWORD PTR _scale$[ebp]
	mov	eax, DWORD PTR _fd
	fst	QWORD PTR [esp+8]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0N@FCODBFAN@?$CFf?5?$CFf?5scale?6?$AA@
	push	eax
	call	_fprintf

; 181  :   fprintf(fd,"%f %f translate\n",(DOUBLE)(-minclipx),(DOUBLE)(-minclipy));

	fld	QWORD PTR _minclipy
	mov	ecx, DWORD PTR _fd
	fchs
	add	esp, 8
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR _minclipx
	fchs
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BB@JFJMBMFN@?$CFf?5?$CFf?5translate?6?$AA@
	push	ecx
	call	_fprintf

; 182  :   fprintf(fd,"newpath %f %f moveto %f %f lineto %f %f \n",
; 183  :       (DOUBLE)minclipx,(DOUBLE)minclipy,(DOUBLE)maxclipx,(DOUBLE)minclipy,
; 184  :          (DOUBLE)maxclipx,(DOUBLE)maxclipy);

	fld	QWORD PTR _maxclipy
	mov	edx, DWORD PTR _fd
	fstp	QWORD PTR [esp+16]
	fld	QWORD PTR _maxclipx
	sub	esp, 24					; 00000018H
	fst	QWORD PTR [esp+32]
	fld	QWORD PTR _minclipy
	fst	QWORD PTR [esp+24]
	fxch	ST(1)
	fstp	QWORD PTR [esp+16]
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR _minclipx
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CK@LMJLGMDB@newpath?5?$CFf?5?$CFf?5moveto?5?$CFf?5?$CFf?5linet@
	push	edx
	call	_fprintf

; 185  :   fprintf(fd,"   lineto  %f %f lineto closepath clip\n",
; 186  :         (DOUBLE)minclipx,(DOUBLE)maxclipy);

	fld	QWORD PTR _maxclipy
	mov	eax, DWORD PTR _fd
	fstp	QWORD PTR [esp+48]
	fld	QWORD PTR _minclipx
	add	esp, 40					; 00000028H
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CI@IKLNHDJN@?5?5?5lineto?5?5?$CFf?5?$CFf?5lineto?5closepat@
	push	eax
	call	_fprintf

; 187  :   fputs("1 setlinecap  1 setlinejoin\n",fd);

	mov	ecx, DWORD PTR _fd
	push	ecx
	push	OFFSET ??_C@_0BN@FCHJOHFA@1?5setlinecap?5?51?5setlinejoin?6?$AA@
	call	_fputs
	add	esp, 32					; 00000020H

; 188  :   if ( ps_colorflag && ps_cmykflag )

	cmp	DWORD PTR _ps_colorflag, 0
	je	$LN21@ps_init
	cmp	DWORD PTR _ps_cmykflag, 0
	je	SHORT $LN23@ps_init

; 189  :     { fputs("/fa { newpath setcmykcolor  moveto lineto\n",fd);

	mov	edx, DWORD PTR _fd
	push	edx
	push	OFFSET ??_C@_0CL@DIAGKLJI@?1fa?5?$HL?5newpath?5setcmykcolor?5?5move@
	call	_fputs

; 190  :       fputs("            lineto closepath fill } def % filled facet without edges\n\n",fd);

	mov	eax, DWORD PTR _fd
	push	eax
	push	OFFSET ??_C@_0EH@KGKCGMIK@?5?5?5?5?5?5?5?5?5?5?5?5lineto?5closepath?5fil@
	call	_fputs

; 191  :       fputs("/fb {setcmykcolor 6 copy newpath moveto lineto\n",fd);

	mov	ecx, DWORD PTR _fd
	push	ecx
	push	OFFSET ??_C@_0DA@BKFCOFDF@?1fb?5?$HLsetcmykcolor?56?5copy?5newpath@
	call	_fputs

; 192  :       fputs("            lineto closepath fill 6 2 roll 6 copy} def % filled facet with edges\n\n",fd);

	mov	edx, DWORD PTR _fd
	push	edx
	push	OFFSET ??_C@_0FD@JBJBAFME@?5?5?5?5?5?5?5?5?5?5?5?5lineto?5closepath?5fil@
	call	_fputs

; 193  :       fputs("/fc {setcmykcolor .001 relsize mul setlinewidth 6 2 roll 6 copy} def % outline only\n\n",fd);

	mov	eax, DWORD PTR _fd
	push	eax
	push	OFFSET ??_C@_0FG@NOGGDAOP@?1fc?5?$HLsetcmykcolor?5?4001?5relsize?5m@
	call	_fputs

; 194  :       fputs("/edge {relsize mul setlinewidth setcmykcolor newpath moveto lineto stroke} def\n",fd);

	mov	ecx, DWORD PTR _fd
	push	ecx
	push	OFFSET ??_C@_0FA@LCGCOHHC@?1edge?5?$HLrelsize?5mul?5setlinewidth?5@
	call	_fputs

; 195  :       fputs("/arcedge {relsize mul setlinewidth setcmykcolor newpath moveto arc stroke} def\n",fd);

	mov	edx, DWORD PTR _fd
	push	edx
	push	OFFSET ??_C@_0FA@HAMPBOBO@?1arcedge?5?$HLrelsize?5mul?5setlinewid@
	jmp	$LN145@ps_init
$LN23@ps_init:

; 196  :     }
; 197  :   else if ( ps_colorflag )
; 198  :     { fputs("/fa { newpath setrgbcolor  moveto lineto\n",fd);

	mov	eax, DWORD PTR _fd
	push	eax
	push	OFFSET ??_C@_0CK@PGLNPICM@?1fa?5?$HL?5newpath?5setrgbcolor?5?5movet@
	call	_fputs

; 199  :       fputs("            lineto closepath fill } def % filled facet without edges\n\n",fd);

	mov	ecx, DWORD PTR _fd
	push	ecx
	push	OFFSET ??_C@_0EH@KGKCGMIK@?5?5?5?5?5?5?5?5?5?5?5?5lineto?5closepath?5fil@
	call	_fputs

; 200  :       fputs("/fb {setrgbcolor 6 copy newpath moveto lineto\n",fd);

	mov	edx, DWORD PTR _fd
	push	edx
	push	OFFSET ??_C@_0CP@PJJDAJNN@?1fb?5?$HLsetrgbcolor?56?5copy?5newpath?5@
	call	_fputs

; 201  :       fputs("            lineto closepath fill 6 2 roll 6 copy} def % filled facet with edges\n\n",fd);

	mov	eax, DWORD PTR _fd
	push	eax
	push	OFFSET ??_C@_0FD@JBJBAFME@?5?5?5?5?5?5?5?5?5?5?5?5lineto?5closepath?5fil@
	call	_fputs

; 202  :       fputs("/fc {setrgbcolor .001 relsize mul setlinewidth 6 2 roll 6 copy} def % outline only\n\n",fd);

	mov	ecx, DWORD PTR _fd
	push	ecx
	push	OFFSET ??_C@_0FF@DCFMBNJF@?1fc?5?$HLsetrgbcolor?5?4001?5relsize?5mu@
	call	_fputs

; 203  :       fputs("/edge {relsize mul setlinewidth setrgbcolor newpath moveto lineto stroke} def\n",fd);

	mov	edx, DWORD PTR _fd
	push	edx
	push	OFFSET ??_C@_0EP@DBPAPDEI@?1edge?5?$HLrelsize?5mul?5setlinewidth?5@
	call	_fputs

; 204  :       fputs("/arcedge {relsize mul setlinewidth setrgbcolor newpath moveto arc stroke} def\n",fd);

	mov	eax, DWORD PTR _fd
	push	eax
	push	OFFSET ??_C@_0EP@LBFEKADB@?1arcedge?5?$HLrelsize?5mul?5setlinewid@

; 205  :     }
; 206  :   else

	jmp	SHORT $LN145@ps_init
$LN21@ps_init:

; 207  :     { fputs("/fa { newpath setgray  moveto lineto\n",fd);

	mov	ecx, DWORD PTR _fd
	push	ecx
	push	OFFSET ??_C@_0CG@IKAONNMM@?1fa?5?$HL?5newpath?5setgray?5?5moveto?5li@
	call	_fputs

; 208  :       fputs("            lineto closepath fill } def  % filled facet without edges \n\n",fd);

	mov	edx, DWORD PTR _fd
	push	edx
	push	OFFSET ??_C@_0EJ@GDNKHHIK@?5?5?5?5?5?5?5?5?5?5?5?5lineto?5closepath?5fil@
	call	_fputs

; 209  :       fputs("/fb {setgray 6 copy newpath moveto lineto\n",fd);

	mov	eax, DWORD PTR _fd
	push	eax
	push	OFFSET ??_C@_0CL@JFHIFEBJ@?1fb?5?$HLsetgray?56?5copy?5newpath?5move@
	call	_fputs

; 210  :       fputs("            lineto closepath fill 6 2 roll 6 copy} def % filled facet with edges\n\n",fd);

	mov	ecx, DWORD PTR _fd
	push	ecx
	push	OFFSET ??_C@_0FD@JBJBAFME@?5?5?5?5?5?5?5?5?5?5?5?5lineto?5closepath?5fil@
	call	_fputs

; 211  :       fputs("/fc {setgray 0 setgray .001 relsize mul setlinewidth 6 2 roll 6 copy} def % outline only\n\n",fd);

	mov	edx, DWORD PTR _fd
	push	edx
	push	OFFSET ??_C@_0FL@EOEJNIFP@?1fc?5?$HLsetgray?50?5setgray?5?4001?5rels@
	call	_fputs

; 212  :       fputs("/edge {relsize mul setlinewidth 0 setgray newpath moveto lineto stroke} def\n",fd);

	mov	eax, DWORD PTR _fd
	push	eax
	push	OFFSET ??_C@_0EN@MLELOJHB@?1edge?5?$HLrelsize?5mul?5setlinewidth?5@
	call	_fputs

; 213  :       fputs("/arcedge {relsize mul setlinewidth 0 setgray newpath moveto arc stroke} def\n",fd);

	mov	ecx, DWORD PTR _fd
	push	ecx
	push	OFFSET ??_C@_0EN@BKAKNMA@?1arcedge?5?$HLrelsize?5mul?5setlinewid@
$LN145@ps_init:
	call	_fputs
	add	esp, 56					; 00000038H

; 214  :     }
; 215  :   if ( labelflag>0 ) 

	cmp	DWORD PTR _labelflag, 0
	jle	$LN13@ps_init

; 216  :   { 
; 217  :     fputs("/vorad .022 relsize mul def\n",fd);

	mov	edx, DWORD PTR _fd
	push	edx
	push	OFFSET ??_C@_0BN@PADBKINN@?1vorad?5?4022?5relsize?5mul?5def?6?$AA@
	call	_fputs

; 218  :     fputs("/arrowrad vorad def\n",fd); 

	mov	eax, DWORD PTR _fd
	push	eax
	push	OFFSET ??_C@_0BF@ELMNCKGP@?1arrowrad?5vorad?5def?6?$AA@
	call	_fputs
	add	esp, 16					; 00000010H

; 219  : 
; 220  :     if ( ps_colorflag && ps_cmykflag )

	cmp	DWORD PTR _ps_colorflag, 0
	je	SHORT $LN17@ps_init
	cmp	DWORD PTR _ps_cmykflag, 0
	je	SHORT $LN18@ps_init

; 221  :       fputs("/edge { relsize mul setlinewidth setcmykcolor 4 copy  newpath",fd);

	mov	ecx, DWORD PTR _fd
	push	ecx
	push	OFFSET ??_C@_0DO@NBCNNCAN@?1edge?5?$HL?5relsize?5mul?5setlinewidth@
	call	_fputs
	add	esp, 8
$LN18@ps_init:

; 222  :     if ( ps_colorflag )

	cmp	DWORD PTR _ps_colorflag, 0
	je	SHORT $LN17@ps_init

; 223  :       fputs("/edge { relsize mul setlinewidth setrgbcolor 4 copy  newpath",fd);

	mov	edx, DWORD PTR _fd
	push	edx
	push	OFFSET ??_C@_0DN@FIHHEEKM@?1edge?5?$HL?5relsize?5mul?5setlinewidth@

; 224  :     else

	jmp	SHORT $LN146@ps_init
$LN17@ps_init:

; 225  :       fputs("/edge { relsize mul setlinewidth 0 setgray 4 copy  newpath",fd);

	mov	eax, DWORD PTR _fd
	push	eax
	push	OFFSET ??_C@_0DL@LHEOKJJJ@?1edge?5?$HL?5relsize?5mul?5setlinewidth@
$LN146@ps_init:
	call	_fputs

; 226  :     fputs(" moveto lineto stroke\n",fd);

	mov	ecx, DWORD PTR _fd
	add	esp, 8
	push	ecx
	push	OFFSET ??_C@_0BH@NMAEMPIK@?5moveto?5lineto?5stroke?6?$AA@
	call	_fputs

; 227  :     fputs("        /y2 exch def /x2 exch def /y1 exch def /x1 exch def\n",fd);

	mov	edx, DWORD PTR _fd
	push	edx
	push	OFFSET ??_C@_0DN@LGKEEMMM@?5?5?5?5?5?5?5?5?1y2?5exch?5def?5?1x2?5exch?5de@
	call	_fputs

; 228  :     fputs("        /dy y2 y1 sub def  /dx x2 x1 sub def\n",fd);

	mov	eax, DWORD PTR _fd
	push	eax
	push	OFFSET ??_C@_0CO@DJFPBGGI@?5?5?5?5?5?5?5?5?1dy?5y2?5y1?5sub?5def?5?5?1dx?5x@
	call	_fputs

; 229  :     fputs("        /mag dx dx mul dy dy mul add sqrt def\n",fd);

	mov	ecx, DWORD PTR _fd
	push	ecx
	push	OFFSET ??_C@_0CP@CPCODPMC@?5?5?5?5?5?5?5?5?1mag?5dx?5dx?5mul?5dy?5dy?5mul@
	call	_fputs

; 230  :     fputs("        mag 0 ne {                           \n",fd);

	mov	edx, DWORD PTR _fd
	push	edx
	push	OFFSET ??_C@_0CP@LAJKLMEC@?5?5?5?5?5?5?5?5mag?50?5ne?5?$HL?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
	call	_fputs

; 231  :     fputs("        /xu dx mag div def /yu dy mag div def\n",fd);

	mov	eax, DWORD PTR _fd
	push	eax
	push	OFFSET ??_C@_0CP@BGIBHPDN@?5?5?5?5?5?5?5?5?1xu?5dx?5mag?5div?5def?5?1yu?5d@
	call	_fputs

; 232  :     fputs("        /angle xu yu neg atan def\n",fd);

	mov	ecx, DWORD PTR _fd
	push	ecx
	push	OFFSET ??_C@_0CD@CACIHCGK@?5?5?5?5?5?5?5?5?1angle?5xu?5yu?5neg?5atan?5de@
	call	_fputs

; 233  :     fputs("        newpath x2 xu vorad mul sub  y2 yu vorad mul sub moveto\n",fd);

	mov	edx, DWORD PTR _fd
	push	edx
	push	OFFSET ??_C@_0EB@LLKMFIBG@?5?5?5?5?5?5?5?5newpath?5x2?5xu?5vorad?5mul?5@
	call	_fputs

; 234  :     fputs("                x2 xu vorad mul sub  arrowrad yu mul add\n",fd);

	mov	eax, DWORD PTR _fd
	add	esp, 64					; 00000040H
	push	eax
	push	OFFSET ??_C@_0DK@LGCOHEJG@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5x2?5xu?5vorad?5mul?5@
	call	_fputs

; 235  :     fputs("                y2 yu vorad mul sub  arrowrad xu mul sub\n",fd);

	mov	ecx, DWORD PTR _fd
	push	ecx
	push	OFFSET ??_C@_0DK@DEDDDPBE@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5y2?5yu?5vorad?5mul?5@
	call	_fputs

; 236  :     fputs("                arrowrad angle angle 45 add arc\n",fd);

	mov	edx, DWORD PTR _fd
	push	edx
	push	OFFSET ??_C@_0DB@KOIMPJML@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5arrowrad?5angle?5a@
	call	_fputs

; 237  :     fputs("               stroke\n",fd);

	mov	eax, DWORD PTR _fd
	push	eax
	push	OFFSET ??_C@_0BH@FCDFNACB@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5stroke?6?$AA@
	call	_fputs

; 238  :     fputs("        newpath x2 xu vorad mul sub  y2 yu vorad mul sub moveto\n",fd);

	mov	ecx, DWORD PTR _fd
	push	ecx
	push	OFFSET ??_C@_0EB@LLKMFIBG@?5?5?5?5?5?5?5?5newpath?5x2?5xu?5vorad?5mul?5@
	call	_fputs

; 239  :     fputs("                x2 xu vorad mul sub  arrowrad yu mul sub\n",fd);

	mov	edx, DWORD PTR _fd
	push	edx
	push	OFFSET ??_C@_0DK@EACGPMDM@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5x2?5xu?5vorad?5mul?5@
	call	_fputs

; 240  :     fputs("                y2 yu vorad mul sub  arrowrad xu mul add\n",fd);

	mov	eax, DWORD PTR _fd
	push	eax
	push	OFFSET ??_C@_0DK@MCDLLHLO@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5y2?5yu?5vorad?5mul?5@
	call	_fputs

; 241  :     fputs("                arrowrad angle 180 sub angle 225 sub arcn\n",fd);

	mov	ecx, DWORD PTR _fd
	push	ecx
	push	OFFSET ??_C@_0DL@KELJBNIN@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5arrowrad?5angle?51@
	call	_fputs

; 242  :     fputs("               stroke\n",fd);

	mov	edx, DWORD PTR _fd
	add	esp, 64					; 00000040H
	push	edx
	push	OFFSET ??_C@_0BH@FCDFNACB@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5stroke?6?$AA@
	call	_fputs

; 243  :     fputs("        } if \n",fd);

	mov	eax, DWORD PTR _fd
	push	eax
	push	OFFSET ??_C@_0P@LGFKOBPF@?5?5?5?5?5?5?5?5?$HN?5if?5?6?$AA@
	call	_fputs

; 244  :     fputs(" } def\n",fd);

	mov	ecx, DWORD PTR _fd
	push	ecx
	push	OFFSET ??_C@_07DPEHHPLJ@?5?$HN?5def?6?$AA@
	call	_fputs

; 245  : 
; 246  :     fputs("/Helvetica findfont .03 scalefont setfont\n",fd);

	mov	edx, DWORD PTR _fd
	push	edx
	push	OFFSET ??_C@_0CL@KMJHALBO@?1Helvetica?5findfont?5?403?5scalefon@
	call	_fputs

; 247  :     for ( n = 1 ; n <= 5 ; n++ )

	mov	esi, 1
	mov	edi, -2					; fffffffeH
	add	esp, 32					; 00000020H
	mov	DWORD PTR _n$[ebp], esi
	mov	DWORD PTR tv1240[ebp], edi
	npad	1
$LL15@ps_init:

; 248  :     { fprintf(fd,"/vertex%d { gsave translate relsize relsize scale\n",n);

	mov	eax, DWORD PTR _fd
	push	esi
	push	OFFSET ??_C@_0DD@JKPCNGJN@?1vertex?$CFd?5?$HL?5gsave?5translate?5rels@
	push	eax
	call	_fprintf

; 249  :       fprintf(fd,"              newpath 0 setgray 0 0 .022 0 360 arc fill\n");

	mov	ecx, DWORD PTR _fd
	push	OFFSET ??_C@_0DJ@DEADPOPJ@?5?5?5?5?5?5?5?5?5?5?5?5?5?5newpath?50?5setgray?5@
	push	ecx
	call	_fprintf

; 250  :       fprintf(fd,"              newpath 1 setgray 0 0 .020 0 360 arc fill\n");

	mov	edx, DWORD PTR _fd
	push	OFFSET ??_C@_0DJ@POEJICLC@?5?5?5?5?5?5?5?5?5?5?5?5?5?5newpath?51?5setgray?5@
	push	edx
	call	_fprintf
	add	esp, 28					; 0000001cH

; 251  :       if ( n > 2 )

	cmp	esi, 2
	jle	SHORT $LN12@ps_init

; 252  :         fprintf(fd,"              2 %d div 2 %d div scale\n",n,n);

	mov	eax, DWORD PTR _fd
	push	esi
	push	esi
	push	OFFSET ??_C@_0CH@IJCPBCIK@?5?5?5?5?5?5?5?5?5?5?5?5?5?52?5?$CFd?5div?52?5?$CFd?5div?5@
	push	eax
	call	_fprintf
	add	esp, 16					; 00000010H
$LN12@ps_init:

; 253  :       fprintf(fd,"               %6.4f -.01 moveto 0 setgray show grestore } def\n",
; 254  :          .004-.01*n);

	fild	DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _fd
	sub	esp, 8
	fst	QWORD PTR tv924[ebp]
	fmul	QWORD PTR __real@3f847ae147ae147b
	fsubr	QWORD PTR __real@3f70624dd2f1a9fc
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0EA@NBNMIMNL@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CF6?44f?5?9?401?5moveto@
	push	ecx
	call	_fprintf

; 255  : 
; 256  :       fprintf(fd,"/edgenum%d { gsave translate relsize relsize scale\n",n);

	mov	edx, DWORD PTR _fd
	push	esi
	push	OFFSET ??_C@_0DE@OIBELIDE@?1edgenum?$CFd?5?$HL?5gsave?5translate?5rel@
	push	edx
	call	_fprintf

; 257  :       fprintf(fd,"     newpath  %5.3f -.016 moveto\n",-(.008+.004*n));

	fld	QWORD PTR tv924[ebp]
	fmul	QWORD PTR __real@3f70624dd2f1a9fc
	mov	eax, DWORD PTR _fd
	add	esp, 20					; 00000014H
	fst	QWORD PTR tv927[ebp]
	fadd	QWORD PTR __real@3f80624dd2f1a9fc
	fchs
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CC@LBEOIOFE@?5?5?5?5?5newpath?5?5?$CF5?43f?5?9?4016?5moveto@
	push	eax
	call	_fprintf

; 258  :       fprintf(fd,"    0 setgray  %5.3f 0 rlineto 0 .032 rlineto %6.3f 0\n",
; 259  :         0.022+.013*n,-(0.022+0.013*n));

	fld	QWORD PTR tv924[ebp]
	fmul	QWORD PTR __real@3f8a9fbe76c8b439
	mov	ecx, DWORD PTR _fd
	fst	QWORD PTR tv931[ebp]
	fadd	QWORD PTR __real@3f96872b020c49ba
	fld	ST(0)
	fchs
	fstp	QWORD PTR [esp+8]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0DH@BLFPBPNK@?5?5?5?50?5setgray?5?5?$CF5?43f?50?5rlineto?50@
	push	ecx
	call	_fprintf

; 260  :       fprintf(fd,"    rlineto fill newpath %5.3f -.014 moveto\n",-(.0078+.004*n));

	fld	QWORD PTR tv927[ebp]
	fadd	QWORD PTR __real@3f7ff2e48e8a71de
	mov	edx, DWORD PTR _fd
	add	esp, 16					; 00000010H
	fchs
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CN@HCBLHHHN@?5?5?5?5rlineto?5fill?5newpath?5?$CF5?43f?5?9@
	push	edx
	call	_fprintf

; 261  :       fprintf(fd,"     1 setgray  %5.3f 0 rlineto 0 .03 rlineto %6.3f 0\n",
; 262  :          0.020+.013*n,-(0.020+.013*n));

	fld	QWORD PTR tv931[ebp]
	fadd	QWORD PTR __real@3f947ae147ae147b
	mov	eax, DWORD PTR _fd
	fld	ST(0)
	fchs
	fstp	QWORD PTR [esp+8]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0DH@BGOOIFIB@?5?5?5?5?51?5setgray?5?5?$CF5?43f?50?5rlineto?5@
	push	eax
	call	_fprintf

; 263  :       fprintf(fd,
; 264  :         "    rlineto fill 0 setgray %6.3f -.01 moveto show grestore } def\n",
; 265  :           0.001-0.006*n);

	fld	QWORD PTR tv924[ebp]
	fmul	QWORD PTR __real@3f789374bc6a7efa
	mov	ecx, DWORD PTR _fd
	add	esp, 16					; 00000010H
	fsubr	QWORD PTR __real@3f50624dd2f1a9fc
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0EC@MNPNBEBH@?5?5?5?5rlineto?5fill?50?5setgray?5?$CF6?43f@
	push	ecx
	call	_fprintf

; 266  : 
; 267  :       fprintf(fd,"/facenum%d { gsave translate relsize relsize scale\n",n);

	mov	edx, DWORD PTR _fd
	push	esi
	push	OFFSET ??_C@_0DE@MELDGILJ@?1facenum?$CFd?5?$HL?5gsave?5translate?5rel@
	push	edx
	call	_fprintf

; 268  :       fputs("    newpath 1 setgray -.02 -.015 moveto\n",fd);

	mov	eax, DWORD PTR _fd
	push	eax
	push	OFFSET ??_C@_0CJ@PEIIJOLN@?5?5?5?5newpath?51?5setgray?5?9?402?5?9?4015@
	call	_fputs

; 269  :       fprintf(fd,"   %5.3f 0 rlineto 0 .03 rlineto %5.3f 0 rlineto fill 0 setgray \n",(n+1)*0.025,-(n+1)*0.025);

	fild	DWORD PTR tv1240[ebp]
	fld	QWORD PTR __real@3f9999999999999a
	inc	esi
	mov	DWORD PTR tv946[ebp], esi
	fmul	ST(1), ST(0)
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _fd
	fxch	ST(1)
	fstp	QWORD PTR [esp+8]
	fimul	DWORD PTR tv946[ebp]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0EC@DBAKLBOC@?5?5?5?$CF5?43f?50?5rlineto?50?5?403?5rlineto@
	push	ecx
	call	_fprintf

; 270  :       fputs("    newpath -.019 -.01 moveto show grestore } def \n",fd);

	mov	edx, DWORD PTR _fd
	push	edx
	push	OFFSET ??_C@_0DE@GNDHOJAA@?5?5?5?5newpath?5?9?4019?5?9?401?5moveto?5sh@
	call	_fputs
	dec	edi
	add	esp, 32					; 00000020H
	mov	DWORD PTR _n$[ebp], esi
	mov	DWORD PTR tv1240[ebp], edi
	cmp	edi, -6					; fffffffaH
	jge	$LL15@ps_init
$LN13@ps_init:

; 271  :     }
; 272  :   }
; 273  :   fprintf(fd,"/ew {%8.6f edge} def  %% normal string edge width\n",
; 274  :     (DOUBLE)ps_stringwidth);

	fld	QWORD PTR _ps_stringwidth
	mov	eax, DWORD PTR _fd
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0DD@CKKPOBEI@?1ew?5?$HL?$CF8?46f?5edge?$HN?5def?5?5?$CF?$CF?5normal?5@
	push	eax
	call	_fprintf

; 275  :   fprintf(fd,"/fw {%8.6f edge} def  %% fixed edge width\n",
; 276  :     (DOUBLE)ps_fixededgewidth);

	fld	QWORD PTR _ps_fixededgewidth
	mov	ecx, DWORD PTR _fd
	fstp	QWORD PTR [esp+8]
	add	esp, 8
	push	OFFSET ??_C@_0CL@HINKIMLE@?1fw?5?$HL?$CF8?46f?5edge?$HN?5def?5?5?$CF?$CF?5fixed?5e@
	push	ecx
	call	_fprintf

; 277  :   fprintf(fd,"/tw {%8.6f edge} def  %% triple edge width\n",
; 278  :      (DOUBLE)ps_tripleedgewidth);

	fld	QWORD PTR _ps_tripleedgewidth
	mov	edx, DWORD PTR _fd
	fstp	QWORD PTR [esp+8]
	add	esp, 8
	push	OFFSET ??_C@_0CM@HHMINEKJ@?1tw?5?$HL?$CF8?46f?5edge?$HN?5def?5?5?$CF?$CF?5triple?5@
	push	edx
	call	_fprintf

; 279  :   fprintf(fd,"/ww {%8.6f edge} def  %% edges on walls\n",
; 280  :      (DOUBLE)ps_conedgewidth);

	fld	QWORD PTR _ps_conedgewidth
	mov	eax, DWORD PTR _fd
	fstp	QWORD PTR [esp+8]
	add	esp, 8
	push	OFFSET ??_C@_0CJ@NAOKIBAA@?1ww?5?$HL?$CF8?46f?5edge?$HN?5def?5?5?$CF?$CF?5edges?5o@
	push	eax
	call	_fprintf

; 281  :   fprintf(fd,"/bw {%8.6f edge} def  %% bare edge width\n",
; 282  :      (DOUBLE)ps_bareedgewidth);

	fld	QWORD PTR _ps_bareedgewidth
	mov	ecx, DWORD PTR _fd
	fstp	QWORD PTR [esp+8]
	add	esp, 8
	push	OFFSET ??_C@_0CK@MJCOLLBK@?1bw?5?$HL?$CF8?46f?5edge?$HN?5def?5?5?$CF?$CF?5bare?5ed@
	push	ecx
	call	_fprintf

; 283  :   fprintf(fd,"/gw {%8.6f edge} def  %% grid edge width\n",
; 284  :      (DOUBLE)ps_gridedgewidth);

	fld	QWORD PTR _ps_gridedgewidth
	mov	edx, DWORD PTR _fd
	fstp	QWORD PTR [esp+8]
	add	esp, 8
	push	OFFSET ??_C@_0CK@LFNNLJK@?1gw?5?$HL?$CF8?46f?5edge?$HN?5def?5?5?$CF?$CF?5grid?5ed@
	push	edx
	call	_fprintf

; 285  :   fprintf(fd,"/no {pop pop pop pop} def        %% no edge \n");

	mov	eax, DWORD PTR _fd
	push	OFFSET ??_C@_0CO@MPEBDODO@?1no?5?$HLpop?5pop?5pop?5pop?$HN?5def?5?5?5?5?5?5?5@
	push	eax
	call	_fprintf
	add	esp, 24					; 00000018H

; 286  :   if ( ps_colorflag && ps_cmykflag )

	cmp	DWORD PTR _ps_colorflag, 0
	pop	edi
	pop	esi
	pop	ebx
	je	SHORT $LN9@ps_init
	cmp	DWORD PTR _ps_cmykflag, 0
	je	SHORT $LN11@ps_init

; 287  :     fprintf(fd,"/noc {pop pop pop pop pop pop pop pop} def        %% no edge (pop colors also) \n");

	mov	ecx, DWORD PTR _fd
	push	OFFSET ??_C@_0FB@PCKBKCBN@?1noc?5?$HLpop?5pop?5pop?5pop?5pop?5pop?5po@
	push	ecx
	jmp	SHORT $LN147@ps_init
$LN11@ps_init:

; 288  :   else if ( ps_colorflag )
; 289  :     fprintf(fd,"/noc {pop pop pop pop pop pop pop} def        %% no edge (pop colors also) \n");

	mov	edx, DWORD PTR _fd
	push	OFFSET ??_C@_0EN@FKJLIACP@?1noc?5?$HLpop?5pop?5pop?5pop?5pop?5pop?5po@
	push	edx

; 290  :   else 

	jmp	SHORT $LN147@ps_init
$LN9@ps_init:

; 291  :     fprintf(fd,"/noc {pop pop pop pop} def        %% no edge \n");

	mov	eax, DWORD PTR _fd
	push	OFFSET ??_C@_0CP@IFLCLDEP@?1noc?5?$HLpop?5pop?5pop?5pop?$HN?5def?5?5?5?5?5?5@
	push	eax
$LN147@ps_init:
	call	_fprintf
	add	esp, 8

; 292  :   if (crossingflag > 0) /* redefine edge and gw */

	cmp	DWORD PTR _crossingflag, 0
	jle	$LN7@ps_init

; 293  :   {
; 294  :      if ( ps_colorflag && ps_cmykflag )

	cmp	DWORD PTR _ps_colorflag, 0
	je	SHORT $LN4@ps_init
	cmp	DWORD PTR _ps_cmykflag, 0
	je	SHORT $LN6@ps_init

; 295  :        fputs("/edge { 9 copy .002 add relsize mul setlinewidth 0 setlinecap 0 0 0 1 setcmykcolor pop pop pop pop\n",fd);

	mov	ecx, DWORD PTR _fd
	push	ecx
	push	OFFSET ??_C@_0GE@ONAIGPGO@?1edge?5?$HL?59?5copy?5?4002?5add?5relsize?5@
	jmp	SHORT $LN148@ps_init
$LN6@ps_init:

; 296  :      else if ( ps_colorflag )
; 297  :        fputs("/edge { 8 copy .002 add relsize mul setlinewidth 0 setlinecap 1 setgray pop pop pop\n",fd);

	mov	edx, DWORD PTR _fd
	push	edx
	push	OFFSET ??_C@_0FF@CHDDIGOA@?1edge?5?$HL?58?5copy?5?4002?5add?5relsize?5@

; 298  :      else

	jmp	SHORT $LN148@ps_init
$LN4@ps_init:

; 299  :        fputs("/edge { 5 copy .002 add relsize mul setlinewidth 0 setlinecap 1 setgray\n",fd);

	mov	eax, DWORD PTR _fd
	push	eax
	push	OFFSET ??_C@_0EJ@CHEGEDHF@?1edge?5?$HL?55?5copy?5?4002?5add?5relsize?5@
$LN148@ps_init:
	call	_fputs

; 300  :      fputs("    newpath moveto lineto stroke setlinewidth 2 setlinecap\n",fd);

	mov	ecx, DWORD PTR _fd
	add	esp, 8
	push	ecx
	push	OFFSET ??_C@_0DM@DPDEDOAF@?5?5?5?5newpath?5moveto?5lineto?5stroke@
	call	_fputs
	add	esp, 8

; 301  :      if ( ps_colorflag )

	cmp	DWORD PTR _ps_colorflag, 0
	je	SHORT $LN2@ps_init

; 302  :        fputs("    setrgbcolor newpath moveto lineto stroke} def\n",fd);

	mov	edx, DWORD PTR _fd
	push	edx
	push	OFFSET ??_C@_0DD@LKBBNPFO@?5?5?5?5setrgbcolor?5newpath?5moveto?5l@

; 303  :      else

	jmp	SHORT $LN149@ps_init
$LN2@ps_init:

; 304  :        fputs("    0 setgray newpath moveto lineto stroke} def\n",fd);

	mov	eax, DWORD PTR _fd
	push	eax
	push	OFFSET ??_C@_0DB@FKDPLLEI@?5?5?5?50?5setgray?5newpath?5moveto?5lin@
$LN149@ps_init:
	call	_fputs

; 305  :      fputs("/gw {0.002 edge} def\n",fd);

	mov	ecx, DWORD PTR _fd
	add	esp, 8
	push	ecx
	push	OFFSET ??_C@_0BG@CGOAOHGH@?1gw?5?$HL0?4002?5edge?$HN?5def?6?$AA@
	call	_fputs
	add	esp, 8
$LN7@ps_init:

; 306  :   }
; 307  : } // end ps_init()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_ps_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@LMCLFPAB@?5?$CI?$CFs?$CJ?5?$CFf?5?$CFf?5edgenum?$CF1d?6?$AA@ ; `string'
PUBLIC	__real@4014000000000000
PUBLIC	__real@4000000000000000
PUBLIC	??_C@_0BH@LLPBDDMG@?5?$CI?$CFs?$CJ?5?$CFf?5?$CFf?5vertex?$CF1d?6?$AA@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_04PFLMHOAD@?5gw?6?$AA@			; `string'
PUBLIC	??_C@_04LHBAIGHC@?5tw?6?$AA@			; `string'
PUBLIC	??_C@_04KFKFCJJM@?5ww?6?$AA@			; `string'
PUBLIC	??_C@_04ENAABJGG@?5fw?6?$AA@			; `string'
PUBLIC	??_C@_04MCGCIODB@?5bw?6?$AA@			; `string'
PUBLIC	??_C@_04FPLFLGII@?5ew?6?$AA@			; `string'
PUBLIC	??_C@_0O@JHPPKGCC@?5?$CF8?46f?5edge?5?6?$AA@	; `string'
PUBLIC	??_C@_0BA@FLLMKKKH@?5?$CF8?46f?5arcedge?6?$AA@	; `string'
PUBLIC	??_C@_0BA@DENHGGIP@?5?$CF8?46f?5arcedge?5?$AA@	; `string'
PUBLIC	??_C@_06MGOJPFIL@?5?$CF5?43f?$AA@		; `string'
PUBLIC	??_C@_0L@BGJBOLC@?54?52?5roll?5?$AA@		; `string'
PUBLIC	??_C@_0CM@LICPLGIG@?5?$CF7?45f?5?$CF7?45f?5?$CF7?45f?5?$CF7?45f?5?$CF7?45f?5?$CF@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@404ca5dc1a63c1f8
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	??_C@_0P@MLHCMBAO@?5?5?$CF7?45f?5?$CF7?45f?5?$AA@ ; `string'
PUBLIC	__real@40af400000000000
PUBLIC	_t$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_ps_edge
EXTRN	_elnames:BYTE
EXTRN	_rgb_colors:BYTE
EXTRN	_cmyk_colors:BYTE
EXTRN	_dot:PROC
EXTRN	__CIatan2:PROC
EXTRN	__CIsqrt:PROC
;	COMDAT ??_C@_0BI@LMCLFPAB@?5?$CI?$CFs?$CJ?5?$CFf?5?$CFf?5edgenum?$CF1d?6?$AA@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0BI@LMCLFPAB@?5?$CI?$CFs?$CJ?5?$CFf?5?$CFf?5edgenum?$CF1d?6?$AA@ DB ' '
	DB	'(%s) %f %f edgenum%1d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT ??_C@_0BH@LLPBDDMG@?5?$CI?$CFs?$CJ?5?$CFf?5?$CFf?5vertex?$CF1d?6?$AA@
CONST	SEGMENT
??_C@_0BH@LLPBDDMG@?5?$CI?$CFs?$CJ?5?$CFf?5?$CFf?5vertex?$CF1d?6?$AA@ DB ' '
	DB	'(%s) %f %f vertex%1d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PFLMHOAD@?5gw?6?$AA@
CONST	SEGMENT
??_C@_04PFLMHOAD@?5gw?6?$AA@ DB ' gw', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LHBAIGHC@?5tw?6?$AA@
CONST	SEGMENT
??_C@_04LHBAIGHC@?5tw?6?$AA@ DB ' tw', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KFKFCJJM@?5ww?6?$AA@
CONST	SEGMENT
??_C@_04KFKFCJJM@?5ww?6?$AA@ DB ' ww', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04ENAABJGG@?5fw?6?$AA@
CONST	SEGMENT
??_C@_04ENAABJGG@?5fw?6?$AA@ DB ' fw', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MCGCIODB@?5bw?6?$AA@
CONST	SEGMENT
??_C@_04MCGCIODB@?5bw?6?$AA@ DB ' bw', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FPLFLGII@?5ew?6?$AA@
CONST	SEGMENT
??_C@_04FPLFLGII@?5ew?6?$AA@ DB ' ew', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JHPPKGCC@?5?$CF8?46f?5edge?5?6?$AA@
CONST	SEGMENT
??_C@_0O@JHPPKGCC@?5?$CF8?46f?5edge?5?6?$AA@ DB ' %8.6f edge ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FLLMKKKH@?5?$CF8?46f?5arcedge?6?$AA@
CONST	SEGMENT
??_C@_0BA@FLLMKKKH@?5?$CF8?46f?5arcedge?6?$AA@ DB ' %8.6f arcedge', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DENHGGIP@?5?$CF8?46f?5arcedge?5?$AA@
CONST	SEGMENT
??_C@_0BA@DENHGGIP@?5?$CF8?46f?5arcedge?5?$AA@ DB ' %8.6f arcedge ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06MGOJPFIL@?5?$CF5?43f?$AA@
CONST	SEGMENT
??_C@_06MGOJPFIL@?5?$CF5?43f?$AA@ DB ' %5.3f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BGJBOLC@?54?52?5roll?5?$AA@
CONST	SEGMENT
??_C@_0L@BGJBOLC@?54?52?5roll?5?$AA@ DB ' 4 2 roll ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@LICPLGIG@?5?$CF7?45f?5?$CF7?45f?5?$CF7?45f?5?$CF7?45f?5?$CF7?45f?5?$CF@
CONST	SEGMENT
??_C@_0CM@LICPLGIG@?5?$CF7?45f?5?$CF7?45f?5?$CF7?45f?5?$CF7?45f?5?$CF7?45f?5?$CF@ DB ' '
	DB	'%7.5f %7.5f %7.5f %7.5f %7.5f %7.5f %7.5f ', 00H ; `string'
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@404ca5dc1a63c1f8
CONST	SEGMENT
__real@404ca5dc1a63c1f8 DQ 0404ca5dc1a63c1f8r	; 57.2958
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT ??_C@_0P@MLHCMBAO@?5?5?$CF7?45f?5?$CF7?45f?5?$AA@
CONST	SEGMENT
??_C@_0P@MLHCMBAO@?5?5?$CF7?45f?5?$CF7?45f?5?$AA@ DB '  %7.5f %7.5f ', 00H ; `string'
CONST	ENDS
;	COMDAT __real@40af400000000000
CONST	SEGMENT
__real@40af400000000000 DQ 040af400000000000r	; 4000
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\psgraph.c
CONST	ENDS
;	COMDAT _ps_edge
_TEXT	SEGMENT
_angle1$89272 = -144					; size = 8
_center$89270 = -136					; size = 16
_radius$89271 = -120					; size = 8
_mag1$89267 = -120					; size = 8
_det$89274 = -112					; size = 8
_hv$89365 = -108					; size = 4
_t$GSCopy$ = -104					; size = 4
_w2$89266 = -100					; size = 48
_w1$89265 = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_t$ = 8							; size = 4
_ps_edge PROC						; COMDAT

; 317  : { int i;

	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	edi
	mov	edi, DWORD PTR _t$[ebp]

; 318  : 
; 319  :   if ( t->color == CLEAR ) return;

	cmp	DWORD PTR [edi+4], -1

; 408  :           break;
; 409  :        }
; 410  :         case LABEL_ORIG:
; 411  :         {
; 412  :           hv = ELNAME(get_original(get_edge_headv(t->f_id)));

	mov	DWORD PTR _t$GSCopy$[ebp], edi
	je	$LN1@ps_edge

; 320  :   if ( t->flag & EDGE_ARC )

	push	ebx
	mov	ebx, 32768				; 00008000H
	test	DWORD PTR [edi+28], ebx
	je	$LN55@ps_edge

; 321  :   { REAL w1[MAXCOORD],w2[MAXCOORD],mag1,mag2,w1w2,center[2],radius;
; 322  :     REAL angle1,angle2,det;
; 323  : 
; 324  :      for (i = 0 ; i < SDIM ; i++ )

	mov	edx, DWORD PTR _web+616
	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN52@ps_edge
	lea	eax, DWORD PTR [edi+32]
$LL54@ps_edge:

; 325  :      { w1[i] = t->x[1][i] - t->x[0][i];

	fld	DWORD PTR [eax+12]
	inc	ecx
	fsub	DWORD PTR [eax]
	add	eax, 4
	fstp	QWORD PTR _w1$89265[ebp+ecx*8-8]

; 326  :        w2[i] = t->x[2][i] - t->x[0][i];

	fld	DWORD PTR [eax+20]
	fsub	DWORD PTR [eax-4]
	fstp	QWORD PTR _w2$89266[ebp+ecx*8-8]
	cmp	ecx, edx
	jl	SHORT $LL54@ps_edge
$LN52@ps_edge:

; 327  :      }
; 328  :      det = w1[0]*w2[1] - w1[1]*w2[0];

	fld	QWORD PTR _w2$89266[ebp+8]

; 329  :      mag1 = SDIM_dot(w1,w1); mag2 = SDIM_dot(w2,w2);

	push	edx
	fmul	QWORD PTR _w1$89265[ebp]
	lea	eax, DWORD PTR _w1$89265[ebp]
	fld	QWORD PTR _w2$89266[ebp]
	push	eax
	fmul	QWORD PTR _w1$89265[ebp+8]
	mov	ecx, eax
	push	ecx
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _det$89274[ebp]
	call	_dot
	mov	edx, DWORD PTR _web+616
	fstp	QWORD PTR _mag1$89267[ebp]
	push	edx
	lea	eax, DWORD PTR _w2$89266[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot

; 330  :      w1w2 = w1[0]*w2[0] + w1[1]*w2[1];

	fld	QWORD PTR _w1$89265[ebp+8]
	fld	ST(0)
	add	esp, 24					; 00000018H
	fld	QWORD PTR _w2$89266[ebp+8]
	fmul	ST(1), ST(0)
	fld	QWORD PTR _w2$89266[ebp]
	fld	QWORD PTR _w1$89265[ebp]
	fmul	ST(0), ST(1)
	faddp	ST(3), ST(0)

; 331  :      if ( 4000*det*det <= mag1*mag1*mag2 + mag1*mag2*mag2 - 2*mag1*w1w2*mag2 )

	fld	ST(4)
	fld	QWORD PTR _mag1$89267[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(6)
	fld	ST(1)
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(7)
	faddp	ST(1), ST(0)
	fld	ST(1)
	fadd	ST(0), ST(0)
	fmulp	ST(5), ST(0)
	fxch	ST(4)
	fmul	ST(0), ST(6)
	fsubp	ST(4), ST(0)
	fld	QWORD PTR _det$89274[ebp]
	fld	QWORD PTR __real@40af400000000000
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fcomp	ST(5)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN51@ps_edge
	fstp	ST(0)

; 332  :      { /* practically straight line */
; 333  :        for ( i = 0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	fstp	ST(0)
	fstp	ST(4)
	fstp	ST(1)
	fstp	ST(1)
	fstp	ST(0)
	fstp	ST(0)
	cmp	DWORD PTR _web+616, ecx
	jle	SHORT $LN48@ps_edge
	lea	eax, DWORD PTR [edi+44]
$LL50@ps_edge:

; 334  :           t->x[1][i] = t->x[2][i];

	fld	DWORD PTR [eax+12]
	inc	ecx
	fstp	DWORD PTR [eax]
	add	eax, 4
	cmp	ecx, DWORD PTR _web+616
	jl	SHORT $LL50@ps_edge
$LN48@ps_edge:

; 335  :        fprintf(fd,"  %7.5f %7.5f ",(DOUBLE)t->x[0][0],(DOUBLE)t->x[0][1]);

	fld	DWORD PTR [edi+36]
	mov	edx, DWORD PTR _fd
	sub	esp, 16					; 00000010H
	fstp	QWORD PTR [esp+8]
	fld	DWORD PTR [edi+32]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0P@MLHCMBAO@?5?5?$CF7?45f?5?$CF7?45f?5?$AA@
	push	edx
	call	_fprintf

; 336  :        fprintf(fd,"  %7.5f %7.5f ",(DOUBLE)t->x[1][0],(DOUBLE)t->x[1][1]);

	fld	DWORD PTR [edi+48]
	mov	eax, DWORD PTR _fd
	fstp	QWORD PTR [esp+16]
	fld	DWORD PTR [edi+44]
	add	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0P@MLHCMBAO@?5?5?$CF7?45f?5?$CF7?45f?5?$AA@
	push	eax
	call	_fprintf
	add	esp, 24					; 00000018H

; 337  :        t->flag &= ~EDGE_ARC;

	and	DWORD PTR [edi+28], -32769		; ffff7fffH

; 338  :      }
; 339  :      else

	jmp	$LN44@ps_edge
$LN51@ps_edge:

; 340  :      { /* circle */
; 341  :        center[0] = t->x[0][0] + 0.5*(w2[1]*mag1 - w1[1]*mag2)/det;

	fld	ST(1)
	fmulp	ST(4), ST(0)
	fld	ST(6)
	fmulp	ST(6), ST(0)
	fxch	ST(3)
	fsubrp	ST(5), ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(5), ST(0)
	fxch	ST(5)
	fdiv	ST(0), ST(3)
	fadd	DWORD PTR [edi+32]
	fstp	QWORD PTR _center$89270[ebp]

; 342  :        center[1] = t->x[0][1] + 0.5*(-w2[0]*mag1 + w1[0]*mag2)/det;

	fxch	ST(5)
	fmul	QWORD PTR _w1$89265[ebp]
	fxch	ST(5)
	fmulp	ST(1), ST(0)
	fsubp	ST(4), ST(0)
	fxch	ST(3)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(2)
	fadd	DWORD PTR [edi+36]
	fstp	QWORD PTR _center$89270[ebp+8]

; 343  :        radius =  sqrt((mag1*mag1*mag2+mag1*mag2*mag2-2*mag1*w1w2*mag2)/4/det/det);

	fmul	QWORD PTR __real@3fd0000000000000
	fdiv	ST(0), ST(1)
	fdivrp	ST(1), ST(0)
	call	__CIsqrt
	fstp	QWORD PTR _radius$89271[ebp]

; 344  :        angle1 = 180/M_PI*atan2(t->x[0][1]-center[1],t->x[0][0]-center[0]);

	fld	DWORD PTR [edi+36]
	fsub	QWORD PTR _center$89270[ebp+8]
	fld	DWORD PTR [edi+32]
	fsub	QWORD PTR _center$89270[ebp]
	call	__CIatan2
	fmul	QWORD PTR __real@404ca5dc1a63c1f8
	fstp	QWORD PTR _angle1$89272[ebp]

; 345  :        angle2 = 180/M_PI*atan2(t->x[2][1]-center[1],t->x[2][0]-center[0]);

	fld	DWORD PTR [edi+60]
	fsub	QWORD PTR _center$89270[ebp+8]
	fld	DWORD PTR [edi+56]
	fsub	QWORD PTR _center$89270[ebp]
	call	__CIatan2
	fmul	QWORD PTR __real@404ca5dc1a63c1f8

; 346  :        if ( det > 0 )

	fldz

; 347  :        { fprintf(fd," %7.5f %7.5f %7.5f %7.5f %7.5f %7.5f %7.5f ",
; 348  :          (DOUBLE)center[0],(DOUBLE)center[1],
; 349  :          (DOUBLE)radius,(DOUBLE)angle1,(DOUBLE)angle2,
; 350  :          (DOUBLE)t->x[0][0],(DOUBLE)t->x[0][1]);

	sub	esp, 56					; 00000038H
	fcomp	QWORD PTR _det$89274[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN46@ps_edge
	fld	DWORD PTR [edi+36]
	mov	ecx, DWORD PTR _fd
	fstp	QWORD PTR [esp+48]
	fld	DWORD PTR [edi+32]
	fstp	QWORD PTR [esp+40]
	fstp	QWORD PTR [esp+32]
	fld	QWORD PTR _angle1$89272[ebp]
	fstp	QWORD PTR [esp+24]
	fld	QWORD PTR _radius$89271[ebp]
	fstp	QWORD PTR [esp+16]
	fld	QWORD PTR _center$89270[ebp+8]
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR _center$89270[ebp]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CM@LICPLGIG@?5?$CF7?45f?5?$CF7?45f?5?$CF7?45f?5?$CF7?45f?5?$CF7?45f?5?$CF@
	push	ecx
	call	_fprintf
	add	esp, 64					; 00000040H

; 351  :        } else

	jmp	$LN44@ps_edge
$LN46@ps_edge:

; 352  :        { fprintf(fd," %7.5f %7.5f %7.5f %7.5f %7.5f %7.5f %7.5f ",
; 353  :            (DOUBLE)center[0],(DOUBLE)center[1],
; 354  :            (DOUBLE)radius,(DOUBLE)angle2,(DOUBLE)angle1,
; 355  :            (DOUBLE)t->x[2][0],(DOUBLE)t->x[2][1]);

	fld	DWORD PTR [edi+60]
	mov	edx, DWORD PTR _fd
	fstp	QWORD PTR [esp+48]
	fld	DWORD PTR [edi+56]
	fstp	QWORD PTR [esp+40]
	fld	QWORD PTR _angle1$89272[ebp]
	fstp	QWORD PTR [esp+32]
	fstp	QWORD PTR [esp+24]
	fld	QWORD PTR _radius$89271[ebp]
	fstp	QWORD PTR [esp+16]
	fld	QWORD PTR _center$89270[ebp+8]
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR _center$89270[ebp]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CM@LICPLGIG@?5?$CF7?45f?5?$CF7?45f?5?$CF7?45f?5?$CF7?45f?5?$CF7?45f?5?$CF@
	push	edx
	call	_fprintf
	add	esp, 64					; 00000040H

; 356  :        }
; 357  :      }
; 358  :   }
; 359  : /*
; 360  :   else if ( t->flag & SPHERE_ARC )
; 361  :   {
; 362  :   }
; 363  : */
; 364  :   else

	jmp	SHORT $LN44@ps_edge
$LN55@ps_edge:

; 365  :   {
; 366  :     fprintf(fd,"  %7.5f %7.5f ",(DOUBLE)t->x[0][0],(DOUBLE)t->x[0][1]);

	fld	DWORD PTR [edi+36]
	mov	eax, DWORD PTR _fd
	sub	esp, 16					; 00000010H
	fstp	QWORD PTR [esp+8]
	fld	DWORD PTR [edi+32]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0P@MLHCMBAO@?5?5?$CF7?45f?5?$CF7?45f?5?$AA@
	push	eax
	call	_fprintf

; 367  :     fprintf(fd,"  %7.5f %7.5f ",(DOUBLE)t->x[1][0],(DOUBLE)t->x[1][1]);

	fld	DWORD PTR [edi+48]
	mov	ecx, DWORD PTR _fd
	fstp	QWORD PTR [esp+16]
	fld	DWORD PTR [edi+44]
	add	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0P@MLHCMBAO@?5?5?$CF7?45f?5?$CF7?45f?5?$AA@
	push	ecx
	call	_fprintf
	add	esp, 24					; 00000018H
$LN44@ps_edge:

; 368  :   }
; 369  :   /* orientation for arrow label */
; 370  :   if ( labelflag && (t->etype[0] & LABEL_REVERSED) )

	cmp	DWORD PTR _labelflag, 0
	je	SHORT $LN43@ps_edge
	mov	edx, 16384				; 00004000H
	test	WORD PTR [edi+20], dx
	je	SHORT $LN43@ps_edge

; 371  :      fprintf(fd," 4 2 roll ");

	mov	eax, DWORD PTR _fd
	push	OFFSET ??_C@_0L@BGJBOLC@?54?52?5roll?5?$AA@
	push	eax
	call	_fprintf
	add	esp, 8
$LN43@ps_edge:

; 372  :   /* color, if wanted */
; 373  :   if ( ps_colorflag > 0 )

	cmp	DWORD PTR _ps_colorflag, 0
	push	esi
	jle	SHORT $LN34@ps_edge

; 374  :   { if ( ps_cmykflag )
; 375  :       for ( i = 0 ; i < 4 ; i++ )

	xor	esi, esi
	cmp	DWORD PTR _ps_cmykflag, esi
	je	SHORT $LL36@ps_edge
$LL40@ps_edge:

; 376  :         fprintf(fd," %5.3f",(DOUBLE)cmyk_colors[t->color][i]);

	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR _fd
	lea	edx, DWORD PTR [esi+ecx*4]
	fld	QWORD PTR _cmyk_colors[edx*8]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_06MGOJPFIL@?5?$CF5?43f?$AA@
	push	eax
	call	_fprintf
	inc	esi
	add	esp, 16					; 00000010H
	cmp	esi, 4
	jl	SHORT $LL40@ps_edge

; 377  :     else     

	jmp	SHORT $LN34@ps_edge
$LL36@ps_edge:

; 378  :       for ( i = 0 ; i < 3 ; i++ )
; 379  :         fprintf(fd," %5.3f",(DOUBLE)rgb_colors[t->color][i]);

	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR _fd
	lea	edx, DWORD PTR [esi+ecx*4]
	fld	QWORD PTR _rgb_colors[edx*8]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_06MGOJPFIL@?5?$CF5?43f?$AA@
	push	eax
	call	_fprintf
	inc	esi
	add	esp, 16					; 00000010H
	cmp	esi, 3
	jl	SHORT $LL36@ps_edge
$LN34@ps_edge:

; 380  :   }
; 381  :   /* width of edge */
; 382  :   if ( t->flag & EDGE_ARC )
; 383  :   { if ( ps_widthattr >= 0 ) 

	mov	eax, DWORD PTR _ps_widthattr
	test	DWORD PTR [edi+28], ebx
	je	SHORT $LN33@ps_edge

; 384  :       fprintf(fd," %8.6f arcedge ",(DOUBLE)*EREAL(t->f_id,ps_widthattr));

	sub	esp, 8
	test	eax, eax
	js	SHORT $LN32@ps_edge
	mov	ecx, DWORD PTR [edi]
	imul	eax, 240				; 000000f0H
	mov	edx, DWORD PTR _web+124
	add	eax, DWORD PTR _web+216
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+edx+64]
	fld	QWORD PTR [ecx+eax]
	mov	ecx, DWORD PTR _fd
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BA@DENHGGIP@?5?$CF8?46f?5arcedge?5?$AA@
	push	ecx
	call	_fprintf
	add	esp, 16					; 00000010H
	jmp	$LN14@ps_edge
$LN32@ps_edge:

; 385  :     else fprintf(fd," %8.6f arcedge\n",(DOUBLE)ps_stringwidth);

	fld	QWORD PTR _ps_stringwidth
	mov	edx, DWORD PTR _fd
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BA@FLLMKKKH@?5?$CF8?46f?5arcedge?6?$AA@
	push	edx
	call	_fprintf
	add	esp, 16					; 00000010H

; 386  :   } 
; 387  :   else

	jmp	$LN14@ps_edge
$LN33@ps_edge:

; 388  :   {
; 389  :     if ( ps_widthattr >= 0 ) 

	test	eax, eax
	js	SHORT $LN29@ps_edge

; 390  :       fprintf(fd," %8.6f edge \n",(DOUBLE)*EREAL(t->f_id,ps_widthattr));

	mov	ecx, DWORD PTR [edi]
	imul	eax, 240				; 000000f0H
	mov	edx, DWORD PTR _web+124
	add	eax, DWORD PTR _web+216
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+edx+64]
	sub	esp, 8
	fld	QWORD PTR [ecx+eax]
	mov	ecx, DWORD PTR _fd
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0O@JHPPKGCC@?5?$CF8?46f?5edge?5?6?$AA@
	push	ecx
	call	_fprintf
	add	esp, 16					; 00000010H
	jmp	$LN14@ps_edge
$LN29@ps_edge:

; 391  :     else if ( web.representation == STRING ) fprintf(fd," ew\n");

	cmp	DWORD PTR _web+624, 1
	jne	SHORT $LN27@ps_edge
	mov	edx, DWORD PTR _fd
	push	OFFSET ??_C@_04FPLFLGII@?5ew?6?$AA@
	push	edx
	jmp	SHORT $LN142@ps_edge
$LN27@ps_edge:

; 392  :     else if ( t->etype[0] & BARE_EDGE ) fprintf(fd," bw\n");

	movzx	eax, WORD PTR [edi+20]
	test	al, 64					; 00000040H
	je	SHORT $LN25@ps_edge
	push	OFFSET ??_C@_04MCGCIODB@?5bw?6?$AA@
	jmp	SHORT $LN143@ps_edge
$LN25@ps_edge:

; 393  :     else if ( t->etype[0] & FIXED_EDGE ) fprintf(fd," fw\n");

	test	al, 16					; 00000010H
	je	SHORT $LN23@ps_edge
	mov	ecx, DWORD PTR _fd
	push	OFFSET ??_C@_04ENAABJGG@?5fw?6?$AA@
	push	ecx
	jmp	SHORT $LN142@ps_edge
$LN23@ps_edge:

; 394  :     else if ( t->etype[0] & CONSTRAINT_EDGE ) fprintf(fd," ww\n");

	test	al, 32					; 00000020H
	je	SHORT $LN21@ps_edge
	mov	edx, DWORD PTR _fd
	push	OFFSET ??_C@_04KFKFCJJM@?5ww?6?$AA@
	push	edx
	jmp	SHORT $LN142@ps_edge
$LN21@ps_edge:

; 395  :     else if ( t->etype[0] & BOUNDARY_EDGE ) fprintf(fd," ww\n");

	test	al, 8
	je	SHORT $LN19@ps_edge
	push	OFFSET ??_C@_04KFKFCJJM@?5ww?6?$AA@
	jmp	SHORT $LN143@ps_edge
$LN19@ps_edge:

; 396  :     else if ( t->etype[0] & SINGLE_EDGE ) fprintf(fd," ww\n");

	test	al, 4
	je	SHORT $LN17@ps_edge
	mov	ecx, DWORD PTR _fd
	push	OFFSET ??_C@_04KFKFCJJM@?5ww?6?$AA@
	push	ecx
	jmp	SHORT $LN142@ps_edge
$LN17@ps_edge:

; 397  :     else if ( t->etype[0] & TRIPLE_EDGE ) fprintf(fd," tw\n");

	test	al, 2
	je	SHORT $LN15@ps_edge
	mov	edx, DWORD PTR _fd
	push	OFFSET ??_C@_04LHBAIGHC@?5tw?6?$AA@
	push	edx
	jmp	SHORT $LN142@ps_edge
$LN15@ps_edge:

; 398  :     else fprintf(fd," gw\n"); /* regular grid interior edge */

	push	OFFSET ??_C@_04PFLMHOAD@?5gw?6?$AA@
$LN143@ps_edge:
	mov	eax, DWORD PTR _fd
	push	eax
$LN142@ps_edge:
	call	_fprintf
	add	esp, 8
$LN14@ps_edge:

; 399  :   }
; 400  : 
; 401  :   if ( labelflag>0 )

	mov	eax, DWORD PTR _labelflag
	test	eax, eax
	jle	$LN135@ps_edge

; 402  :   { char *hv=NULL,*tv=NULL,*en=NULL;

	xor	ebx, ebx
	xor	esi, esi

; 403  :      switch ( labelflag )

	dec	eax
	mov	DWORD PTR _hv$89365[ebp], ebx
	je	$LN10@ps_edge
	dec	eax
	jne	$LN133@ps_edge

; 408  :           break;
; 409  :        }
; 410  :         case LABEL_ORIG:
; 411  :         {
; 412  :           hv = ELNAME(get_original(get_edge_headv(t->f_id)));

	mov	ecx, DWORD PTR [edi]
	mov	ebx, DWORD PTR _web+636
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN88@ps_edge
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR _web+216
	mov	esi, DWORD PTR [eax+edx+304]
	mov	eax, DWORD PTR _web+124
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR [esi+edx]
	jmp	SHORT $LN87@ps_edge
$LN88@ps_edge:
	mov	eax, DWORD PTR _dymem
	mov	edx, DWORD PTR _web+216
	mov	esi, DWORD PTR [edx+eax+304]
	mov	eax, DWORD PTR _web+124
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	lea	edx, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR [edx+esi]
$LN87@ps_edge:
	mov	edi, ecx
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [eax+edi*4]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN92@ps_edge
	mov	edi, DWORD PTR [esi+edi]
	jmp	SHORT $LN91@ps_edge
$LN92@ps_edge:
	lea	edi, DWORD PTR [edi+ebx*4]
	mov	edi, DWORD PTR [edi+esi]
$LN91@ps_edge:
	shr	edx, 29					; 0000001dH
	imul	edx, 112				; 00000070H
	mov	edx, DWORD PTR _web[edx+12]
	and	edi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+edi*4]
	test	DWORD PTR [edx+20], 268435456		; 10000000H
	je	$LN65@ps_edge
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN96@ps_edge
	mov	edx, DWORD PTR [esi+edx]
	jmp	SHORT $LN95@ps_edge
$LN96@ps_edge:
	lea	edx, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR [edx+esi]
$LN95@ps_edge:
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN100@ps_edge
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	esi, DWORD PTR [esi+eax]
	jmp	SHORT $LN99@ps_edge
$LN100@ps_edge:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	lea	eax, DWORD PTR [ecx+ebx*4]
	mov	esi, DWORD PTR [eax+esi]
$LN99@ps_edge:
	shr	edx, 29					; 0000001dH
	imul	edx, 112				; 00000070H
	mov	ecx, DWORD PTR _web[edx+12]
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR [edx+20]
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	mov	ebx, DWORD PTR _web+636
	mov	eax, DWORD PTR _web+124
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _hv$89365[ebp], OFFSET _elnames
	jmp	SHORT $LN66@ps_edge
$LN65@ps_edge:
	mov	DWORD PTR _hv$89365[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN66@ps_edge:

; 413  :           tv = ELNAME1(get_original(get_edge_tailv(t->f_id)));

	mov	ecx, DWORD PTR _t$GSCopy$[ebp]
	mov	esi, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR _web+216
	mov	edx, DWORD PTR [edx+esi+304]
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [eax+esi*4]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN104@ps_edge
	lea	esi, DWORD PTR [esi+ebx*4]
	mov	esi, DWORD PTR [esi+edx]
	jmp	SHORT $LN103@ps_edge
$LN104@ps_edge:
	mov	esi, DWORD PTR [edx+esi]
$LN103@ps_edge:
	mov	edi, ecx
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [eax+edi*4]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN108@ps_edge
	lea	edi, DWORD PTR [edi+ebx*4]
	mov	edi, DWORD PTR [edi+edx]
	jmp	SHORT $LN107@ps_edge
$LN108@ps_edge:
	mov	edi, DWORD PTR [edx+edi]
$LN107@ps_edge:
	shr	esi, 29					; 0000001dH
	imul	esi, 112				; 00000070H
	mov	esi, DWORD PTR _web[esi+12]
	and	edi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+edi*4]
	test	DWORD PTR [esi+20], 268435456		; 10000000H
	je	$LN67@ps_edge
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [eax+esi*4]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN112@ps_edge
	lea	esi, DWORD PTR [esi+ebx*4]
	mov	esi, DWORD PTR [esi+edx]
	jmp	SHORT $LN111@ps_edge
$LN112@ps_edge:
	mov	esi, DWORD PTR [edx+esi]
$LN111@ps_edge:
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN116@ps_edge
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ecx*4]
	lea	ecx, DWORD PTR [eax+ebx*4]
	mov	edx, DWORD PTR [ecx+edx]
	jmp	SHORT $LN115@ps_edge
$LN116@ps_edge:
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	edx, DWORD PTR [edx+eax]
$LN115@ps_edge:
	shr	esi, 29					; 0000001dH
	imul	esi, 112				; 00000070H
	mov	ecx, DWORD PTR _web[esi+12]
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	eax, DWORD PTR [edx+20]
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames+30
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	esi, OFFSET _elnames+30
	jmp	SHORT $LN68@ps_edge
$LN67@ps_edge:
	mov	esi, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN68@ps_edge:

; 414  :           en = ELNAME2(get_original(t->f_id));

	mov	ecx, DWORD PTR _t$GSCopy$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	edx, eax
	shr	edx, 29					; 0000001dH
	imul	edx, 112				; 00000070H
	mov	ecx, DWORD PTR _web[edx+12]
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+20]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN69@ps_edge
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames+60
	call	_sprintf
	mov	edi, DWORD PTR _t$GSCopy$[ebp]
	add	esp, 12					; 0000000cH
	mov	ebx, OFFSET _elnames+60
	jmp	SHORT $LN133@ps_edge
$LN69@ps_edge:

; 415  :           break;

	mov	edi, DWORD PTR _t$GSCopy$[ebp]
$LN63@ps_edge:

; 407  :           en = ELNAME2(t->f_id);

	mov	ebx, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN133@ps_edge:

; 416  :         }
; 417  :      }
; 418  :      if ( strlen(tv) > 5 ) tv[5] = 0;

	mov	eax, esi
	lea	edx, DWORD PTR [eax+1]
	npad	7
$LL127@ps_edge:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL127@ps_edge
	sub	eax, edx
	cmp	eax, 5
	jbe	SHORT $LN8@ps_edge
	mov	BYTE PTR [esi+5], cl
$LN8@ps_edge:

; 419  :      if ( strlen(hv) > 5 ) hv[5] = 0;

	mov	eax, DWORD PTR _hv$89365[ebp]
	lea	edx, DWORD PTR [eax+1]
$LL128@ps_edge:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL128@ps_edge
	sub	eax, edx
	cmp	eax, 5
	jbe	SHORT $LN7@ps_edge
	mov	edx, DWORD PTR _hv$89365[ebp]
	mov	BYTE PTR [edx+5], cl
$LN7@ps_edge:

; 420  :      if ( strlen(en) > 5 ) en[5] = 0; /* max 5 chars in labels */

	mov	eax, ebx
	lea	edx, DWORD PTR [eax+1]
$LL129@ps_edge:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL129@ps_edge
	sub	eax, edx
	cmp	eax, 5
	jbe	SHORT $LN6@ps_edge
	mov	BYTE PTR [ebx+5], cl
$LN6@ps_edge:

; 421  : 
; 422  :      if ( (t->flag & LABEL_TAIL) && (strlen(tv) > 0) )

	test	DWORD PTR [edi+28], 4096		; 00001000H
	je	SHORT $LN5@ps_edge
	mov	eax, esi
	lea	edx, DWORD PTR [eax+1]
	npad	1
$LL130@ps_edge:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL130@ps_edge
	sub	eax, edx
	je	SHORT $LN5@ps_edge

; 423  :        fprintf(fd," (%s) %f %f vertex%1d\n",tv,
; 424  :         (DOUBLE)t->x[0][0],(DOUBLE)t->x[0][1],(int)strlen(tv));

	fld	DWORD PTR [edi+36]
	push	eax
	mov	eax, DWORD PTR _fd
	sub	esp, 16					; 00000010H
	fstp	QWORD PTR [esp+8]
	fld	DWORD PTR [edi+32]
	fstp	QWORD PTR [esp]
	push	esi
	push	OFFSET ??_C@_0BH@LLPBDDMG@?5?$CI?$CFs?$CJ?5?$CFf?5?$CFf?5vertex?$CF1d?6?$AA@
	push	eax
	call	_fprintf
	add	esp, 32					; 00000020H
$LN5@ps_edge:

; 425  :      if ( (t->flag & LABEL_HEAD) && (strlen(hv) > 0) )

	test	DWORD PTR [edi+28], 2048		; 00000800H
	je	SHORT $LN4@ps_edge
	mov	eax, DWORD PTR _hv$89365[ebp]
	lea	edx, DWORD PTR [eax+1]
	npad	1
$LL131@ps_edge:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL131@ps_edge
	sub	eax, edx
	je	SHORT $LN4@ps_edge

; 426  :        fprintf(fd," (%s) %f %f vertex%1d\n",hv,
; 427  :         (DOUBLE)t->x[1][0],(DOUBLE)t->x[1][1],(int)strlen(hv));

	fld	DWORD PTR [edi+48]
	mov	ecx, DWORD PTR _hv$89365[ebp]
	mov	edx, DWORD PTR _fd
	push	eax
	sub	esp, 16					; 00000010H
	fstp	QWORD PTR [esp+8]
	fld	DWORD PTR [edi+44]
	fstp	QWORD PTR [esp]
	push	ecx
	push	OFFSET ??_C@_0BH@LLPBDDMG@?5?$CI?$CFs?$CJ?5?$CFf?5?$CFf?5vertex?$CF1d?6?$AA@
	push	edx
	call	_fprintf
	add	esp, 32					; 00000020H
$LN4@ps_edge:

; 428  :      if ( (t->flag & LABEL_EDGE) && (strlen(en) > 0) )

	test	DWORD PTR [edi+28], 1024		; 00000400H
	je	$LN135@ps_edge
	mov	eax, ebx
	lea	edx, DWORD PTR [eax+1]
$LL132@ps_edge:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL132@ps_edge
	sub	eax, edx
	je	$LN135@ps_edge

; 429  :      { if ( inverted(t->f_id) )
; 430  :        fprintf(fd," (%s) %f %f edgenum%1d\n",en,
; 431  :         (DOUBLE)((3*t->x[0][0]+2*t->x[1][0])/5),
; 432  :         (DOUBLE)(3*t->x[0][1]+2*t->x[1][1])/5,(int)strlen(en));

	fld	DWORD PTR [edi+48]
	push	eax
	sub	esp, 16					; 00000010H
	test	DWORD PTR [edi], 134217728		; 08000000H
	je	$LN2@ps_edge
	fld	QWORD PTR __real@4000000000000000
	mov	eax, DWORD PTR _fd
	fmul	ST(1), ST(0)
	fld	DWORD PTR [edi+36]
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(1), ST(0)
	fxch	ST(3)
	faddp	ST(1), ST(0)
	fld	QWORD PTR __real@4014000000000000
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [esp+8]
	fld	DWORD PTR [edi+44]
	fmulp	ST(2), ST(0)
	fld	DWORD PTR [edi+32]
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fdivp	ST(1), ST(0)
	fstp	QWORD PTR [esp]
	push	ebx
	push	OFFSET ??_C@_0BI@LMCLFPAB@?5?$CI?$CFs?$CJ?5?$CFf?5?$CFf?5edgenum?$CF1d?6?$AA@
	push	eax

; 433  :        else 

	jmp	$LN144@ps_edge
$LN10@ps_edge:

; 404  :      { case LABEL_ID:
; 405  :        {  hv = ELNAME(get_edge_headv(t->f_id));

	mov	eax, DWORD PTR [edi]
	mov	esi, DWORD PTR _web+216
	test	eax, 134217728				; 08000000H
	je	SHORT $LN72@ps_edge
	mov	ecx, DWORD PTR _dymem
	mov	edx, DWORD PTR [esi+ecx+304]
	mov	ecx, DWORD PTR _web+124
	mov	ebx, eax
	and	ebx, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ecx+ebx*4]
	mov	ebx, DWORD PTR [edx+ebx]
	jmp	SHORT $LN71@ps_edge
$LN72@ps_edge:
	mov	ecx, DWORD PTR _web+124
	mov	ebx, DWORD PTR _web+636
	mov	edx, DWORD PTR _dymem
	mov	edx, DWORD PTR [esi+edx+304]
	mov	edi, eax
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ecx+edi*4]
	lea	edi, DWORD PTR [edi+ebx*4]
	mov	ebx, DWORD PTR [edi+edx]
	mov	edi, DWORD PTR _t$GSCopy$[ebp]
$LN71@ps_edge:
	test	ebx, 268435456				; 10000000H
	je	SHORT $LN59@ps_edge
	test	eax, 134217728				; 08000000H
	je	SHORT $LN76@ps_edge
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+eax]
	jmp	SHORT $LN75@ps_edge
$LN76@ps_edge:
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+636
	lea	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [ecx+edx]
$LN75@ps_edge:
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	mov	esi, DWORD PTR _web+216
	mov	ecx, DWORD PTR _web+124
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _hv$89365[ebp], OFFSET _elnames
	jmp	SHORT $LN60@ps_edge
$LN59@ps_edge:
	mov	DWORD PTR _hv$89365[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN60@ps_edge:

; 406  :           tv = ELNAME1(get_edge_tailv(t->f_id));

	mov	eax, DWORD PTR [edi]
	mov	edx, DWORD PTR _dymem
	mov	edx, DWORD PTR [esi+edx+304]
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ecx+esi*4]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN80@ps_edge
	mov	ebx, DWORD PTR _web+636
	lea	esi, DWORD PTR [esi+ebx*4]
	mov	esi, DWORD PTR [esi+edx]
	jmp	SHORT $LN79@ps_edge
$LN80@ps_edge:
	mov	esi, DWORD PTR [edx+esi]
$LN79@ps_edge:
	test	esi, 268435456				; 10000000H
	je	SHORT $LN61@ps_edge
	test	eax, 134217728				; 08000000H
	je	SHORT $LN84@ps_edge
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _web+636
	lea	eax, DWORD PTR [eax+ecx*4]
	mov	edx, DWORD PTR [eax+edx]
	jmp	SHORT $LN83@ps_edge
$LN84@ps_edge:
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR [edx+ecx]
$LN83@ps_edge:
	and	edx, 134217727				; 07ffffffH
	inc	edx
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames+30
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	esi, OFFSET _elnames+30
	jmp	SHORT $LN62@ps_edge
$LN61@ps_edge:
	mov	esi, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN62@ps_edge:

; 407  :           en = ELNAME2(t->f_id);

	mov	eax, DWORD PTR [edi]
	test	eax, 268435456				; 10000000H
	je	$LN63@ps_edge
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames+60
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	ebx, OFFSET _elnames+60
	jmp	$LN133@ps_edge
$LN2@ps_edge:

; 434  :        fprintf(fd," (%s) %f %f edgenum%1d\n",en,
; 435  :         (DOUBLE)((2*t->x[0][0]+3*t->x[1][0])/5),
; 436  :         (DOUBLE)(2*t->x[0][1]+3*t->x[1][1])/5,(int)strlen(en));

	fld	QWORD PTR __real@4008000000000000
	mov	ecx, DWORD PTR _fd
	fmul	ST(1), ST(0)
	fld	DWORD PTR [edi+36]
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fxch	ST(3)
	faddp	ST(1), ST(0)
	fld	QWORD PTR __real@4014000000000000
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [esp+8]
	fld	DWORD PTR [edi+44]
	fmulp	ST(2), ST(0)
	fld	DWORD PTR [edi+32]
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fdivp	ST(1), ST(0)
	fstp	QWORD PTR [esp]
	push	ebx
	push	OFFSET ??_C@_0BI@LMCLFPAB@?5?$CI?$CFs?$CJ?5?$CFf?5?$CFf?5edgenum?$CF1d?6?$AA@
	push	ecx
$LN144@ps_edge:
	call	_fprintf
	add	esp, 32					; 00000020H
$LN135@ps_edge:
	pop	esi
	pop	ebx
$LN1@ps_edge:

; 437  :      }
; 438  :   }
; 439  : } // end ps_edge()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	pop	edi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_ps_edge ENDP
_TEXT	ENDS
PUBLIC	__real@3fd6666666666666
PUBLIC	__real@3fe4cccccccccccd
PUBLIC	??_C@_0BG@GDJNKKPK@?$CI?$CFs?$CJ?5?$CFf?5?$CFf?5vertex?$CF1d?6?$AA@ ; `string'
PUBLIC	??_C@_0BJ@MIOHOBIH@?5?$CI?$CFc?$CFs?$CJ?5?$CFf?5?$CFf?5facenum?$CFd?6?$AA@ ; `string'
PUBLIC	__real@3f1a36e2eb1c432d
PUBLIC	__real@3f747ae147ae147b
PUBLIC	??_C@_0BN@IOAOKOAN@?$CF10?46f?5?$CF10?46f?5?$CF10?46f?5?$CF10?46f?5?$AA@ ; `string'
PUBLIC	??_C@_0DG@OMMMGA@?$CF10?46f?5?$CF10?46f?5?$CF10?46f?5?$CF10?46f?5?5?$CF5?4@ ; `string'
PUBLIC	??_C@_0DA@EABDKIEP@?$CF10?46f?5?$CF10?46f?5?$CF10?46f?5?$CF10?46f?5?5?$CF5?4@ ; `string'
PUBLIC	__real@3ee4f8b588e368f1
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_03NOKFBOJP@?5no?$AA@			; `string'
PUBLIC	??_C@_03FDGPLNEJ@?5gw?$AA@			; `string'
PUBLIC	??_C@_03ENAPKAGA@?5tw?$AA@			; `string'
PUBLIC	??_C@_03EPEJBODJ@?5ww?$AA@			; `string'
PUBLIC	??_C@_03FCKNNHHO@?5fw?$AA@			; `string'
PUBLIC	??_C@_03FFKEHPKC@?5bw?$AA@			; `string'
PUBLIC	??_C@_0N@GHNPILBG@?5?$CF7?45f?5edge?5?$AA@	; `string'
PUBLIC	??_C@_04COLOBDKP@?5noc?$AA@			; `string'
PUBLIC	__real@3ddb7cdfd9d7bdbb
PUBLIC	??_C@_02JIKNIHJJ@?6?5?$AA@			; `string'
PUBLIC	??_C@_04DJEENOOC@?5fc?5?$AA@			; `string'
PUBLIC	??_C@_04DIIGLENF@?5fb?5?$AA@			; `string'
PUBLIC	??_C@_05MGGCLIFC@?5?5?$CFf?5?$AA@		; `string'
PUBLIC	??_C@_0BK@JKLBKNAC@?5?$CF5?43f?5?$CF5?43f?5?$CF5?43f?5?$CF5?43f?5?$AA@ ; `string'
PUBLIC	??_C@_0BE@FAEJPDPD@?5?$CF5?43f?5?$CF5?43f?5?$CF5?43f?5?$AA@ ; `string'
PUBLIC	__real@3ff0000000000000
PUBLIC	??_C@_0N@DLLHOFOF@?5?$CF7?45f?5?$CF7?45f?$AA@	; `string'
PUBLIC	__real@406fe00000000000
PUBLIC	_t$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_ps_facet
EXTRN	_kb_temp_realloc:PROC
EXTRN	_edge_rgb_color_attr:DWORD
EXTRN	_facet_rgb_color_attr:DWORD
EXTRN	_gray_level:PROC
EXTRN	_shading_flag:DWORD
EXTRN	_dotf:PROC
;	COMDAT __real@3fd6666666666666
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@3fd6666666666666 DQ 03fd6666666666666r	; 0.35
CONST	ENDS
;	COMDAT __real@3fe4cccccccccccd
CONST	SEGMENT
__real@3fe4cccccccccccd DQ 03fe4cccccccccccdr	; 0.65
CONST	ENDS
;	COMDAT ??_C@_0BG@GDJNKKPK@?$CI?$CFs?$CJ?5?$CFf?5?$CFf?5vertex?$CF1d?6?$AA@
CONST	SEGMENT
??_C@_0BG@GDJNKKPK@?$CI?$CFs?$CJ?5?$CFf?5?$CFf?5vertex?$CF1d?6?$AA@ DB '('
	DB	'%s) %f %f vertex%1d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MIOHOBIH@?5?$CI?$CFc?$CFs?$CJ?5?$CFf?5?$CFf?5facenum?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BJ@MIOHOBIH@?5?$CI?$CFc?$CFs?$CJ?5?$CFf?5?$CFf?5facenum?$CFd?6?$AA@ DB ' '
	DB	'(%c%s) %f %f facenum%d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT __real@3f1a36e2eb1c432d
CONST	SEGMENT
__real@3f1a36e2eb1c432d DQ 03f1a36e2eb1c432dr	; 0.0001
CONST	ENDS
;	COMDAT __real@3f747ae147ae147b
CONST	SEGMENT
__real@3f747ae147ae147b DQ 03f747ae147ae147br	; 0.005
CONST	ENDS
;	COMDAT ??_C@_0BN@IOAOKOAN@?$CF10?46f?5?$CF10?46f?5?$CF10?46f?5?$CF10?46f?5?$AA@
CONST	SEGMENT
??_C@_0BN@IOAOKOAN@?$CF10?46f?5?$CF10?46f?5?$CF10?46f?5?$CF10?46f?5?$AA@ DB '%'
	DB	'10.6f %10.6f %10.6f %10.6f ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@OMMMGA@?$CF10?46f?5?$CF10?46f?5?$CF10?46f?5?$CF10?46f?5?5?$CF5?4@
CONST	SEGMENT
??_C@_0DG@OMMMGA@?$CF10?46f?5?$CF10?46f?5?$CF10?46f?5?$CF10?46f?5?5?$CF5?4@ DB '%'
	DB	'10.6f %10.6f %10.6f %10.6f  %5.3f %5.3f %5.3f %5.3f ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@EABDKIEP@?$CF10?46f?5?$CF10?46f?5?$CF10?46f?5?$CF10?46f?5?5?$CF5?4@
CONST	SEGMENT
??_C@_0DA@EABDKIEP@?$CF10?46f?5?$CF10?46f?5?$CF10?46f?5?$CF10?46f?5?5?$CF5?4@ DB '%'
	DB	'10.6f %10.6f %10.6f %10.6f  %5.3f %5.3f %5.3f ', 00H ; `string'
CONST	ENDS
;	COMDAT __real@3ee4f8b588e368f1
CONST	SEGMENT
__real@3ee4f8b588e368f1 DQ 03ee4f8b588e368f1r	; 1e-005
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NOKFBOJP@?5no?$AA@
CONST	SEGMENT
??_C@_03NOKFBOJP@?5no?$AA@ DB ' no', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03FDGPLNEJ@?5gw?$AA@
CONST	SEGMENT
??_C@_03FDGPLNEJ@?5gw?$AA@ DB ' gw', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03ENAPKAGA@?5tw?$AA@
CONST	SEGMENT
??_C@_03ENAPKAGA@?5tw?$AA@ DB ' tw', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03EPEJBODJ@?5ww?$AA@
CONST	SEGMENT
??_C@_03EPEJBODJ@?5ww?$AA@ DB ' ww', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03FCKNNHHO@?5fw?$AA@
CONST	SEGMENT
??_C@_03FCKNNHHO@?5fw?$AA@ DB ' fw', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03FFKEHPKC@?5bw?$AA@
CONST	SEGMENT
??_C@_03FFKEHPKC@?5bw?$AA@ DB ' bw', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GHNPILBG@?5?$CF7?45f?5edge?5?$AA@
CONST	SEGMENT
??_C@_0N@GHNPILBG@?5?$CF7?45f?5edge?5?$AA@ DB ' %7.5f edge ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04COLOBDKP@?5noc?$AA@
CONST	SEGMENT
??_C@_04COLOBDKP@?5noc?$AA@ DB ' noc', 00H		; `string'
CONST	ENDS
;	COMDAT __real@3ddb7cdfd9d7bdbb
CONST	SEGMENT
__real@3ddb7cdfd9d7bdbb DQ 03ddb7cdfd9d7bdbbr	; 1e-010
CONST	ENDS
;	COMDAT ??_C@_02JIKNIHJJ@?6?5?$AA@
CONST	SEGMENT
??_C@_02JIKNIHJJ@?6?5?$AA@ DB 0aH, ' ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DJEENOOC@?5fc?5?$AA@
CONST	SEGMENT
??_C@_04DJEENOOC@?5fc?5?$AA@ DB ' fc ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DIIGLENF@?5fb?5?$AA@
CONST	SEGMENT
??_C@_04DIIGLENF@?5fb?5?$AA@ DB ' fb ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MGGCLIFC@?5?5?$CFf?5?$AA@
CONST	SEGMENT
??_C@_05MGGCLIFC@?5?5?$CFf?5?$AA@ DB '  %f ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JKLBKNAC@?5?$CF5?43f?5?$CF5?43f?5?$CF5?43f?5?$CF5?43f?5?$AA@
CONST	SEGMENT
??_C@_0BK@JKLBKNAC@?5?$CF5?43f?5?$CF5?43f?5?$CF5?43f?5?$CF5?43f?5?$AA@ DB ' '
	DB	'%5.3f %5.3f %5.3f %5.3f ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FAEJPDPD@?5?$CF5?43f?5?$CF5?43f?5?$CF5?43f?5?$AA@
CONST	SEGMENT
??_C@_0BE@FAEJPDPD@?5?$CF5?43f?5?$CF5?43f?5?$CF5?43f?5?$AA@ DB ' %5.3f %5'
	DB	'.3f %5.3f ', 00H				; `string'
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT ??_C@_0N@DLLHOFOF@?5?$CF7?45f?5?$CF7?45f?$AA@
CONST	SEGMENT
??_C@_0N@DLLHOFOF@?5?$CF7?45f?5?$CF7?45f?$AA@ DB ' %7.5f %7.5f', 00H ; `string'
CONST	ENDS
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\psgraph.c
CONST	ENDS
;	COMDAT _ps_facet
_TEXT	SEGMENT
tv3078 = -244						; size = 4
_ii$89670 = -244					; size = 4
tv4809 = -240						; size = 4
tv2645 = -240						; size = 4
tv4534 = -236						; size = 4
_jj$89671 = -236					; size = 4
_i$ = -232						; size = 4
_fudge$89590 = -228					; size = 8
_gray$89434 = -228					; size = 8
tv4332 = -224						; size = 4
tv4331 = -224						; size = 4
tv4330 = -224						; size = 4
tv4172 = -224						; size = 4
tv4171 = -224						; size = 4
tv4170 = -224						; size = 4
tv3981 = -224						; size = 4
tv3980 = -224						; size = 4
tv3979 = -224						; size = 4
tv3461 = -224						; size = 4
tv4532 = -220						; size = 4
_e_id$89662 = -220					; size = 4
tv4157 = -216						; size = 4
_fe$89633 = -216					; size = 4
_ii$89591 = -216					; size = 4
_do_flag$ = -216					; size = 4
tv3494 = -212						; size = 4
tv3216 = -212						; size = 4
_hv$89665 = -212					; size = 4
_t$GSCopy$ = -208					; size = 4
_tv$89663 = -208					; size = 4
_line$ = -204						; size = 200
__$ArrayPad$ = -4					; size = 4
_t$ = 8							; size = 4
_ps_facet PROC						; COMDAT

; 450  : { int i,j;

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _t$[ebp]
	push	ebx
	push	esi
	push	edi

; 451  :   char line[200];
; 452  :   char *ptr = line;
; 453  :   int do_flag = 0; /* whether to actually print this line */
; 454  : 
; 455  :   /* paint facet */
; 456  :   /* if ( (t->color != CLEAR) && (t->color != UNSHOWN) ) */
; 457  :      { REAL gray;
; 458  :         REAL denom;
; 459  :         denom = sqrt(dotf(t->normal,t->normal,3));

	lea	edi, DWORD PTR [eax+68]
	push	3
	push	edi
	push	edi

; 566  : { 
; 567  :     for ( i = 0 ; i < FACET_VERTS ; i++ )

	mov	DWORD PTR _t$GSCopy$[ebp], eax
	lea	ebx, DWORD PTR _line$[ebp]
	mov	DWORD PTR _do_flag$[ebp], 0
	call	_dotf
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fldz
	fucompp
	fnstsw	ax
	fld	QWORD PTR __real@406fe00000000000
	test	ah, 68					; 00000044H
	jnp	$do_the_edges$89437

; 460  :         if ( denom == 0.0 ) goto do_the_edges;

	mov	esi, DWORD PTR _t$GSCopy$[ebp]
	fstp	ST(0)

; 461  :         sprintf(ptr," %7.5f %7.5f",(DOUBLE)t->x[0][0],(DOUBLE)t->x[0][1]); 

	fld	DWORD PTR [esi+36]
	sub	esp, 16					; 00000010H
	fstp	QWORD PTR [esp+8]
	mov	eax, ebx
	fld	DWORD PTR [esi+32]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0N@DLLHOFOF@?5?$CF7?45f?5?$CF7?45f?$AA@
	push	eax
	call	_sprintf

; 462  :         ptr+=strlen(ptr);

	mov	eax, ebx
	add	esp, 24					; 00000018H
	lea	edx, DWORD PTR [eax+1]
$LL283@ps_facet:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL283@ps_facet

; 463  :         sprintf(ptr," %7.5f %7.5f",(DOUBLE)t->x[1][0],(DOUBLE)t->x[1][1]); 

	fld	DWORD PTR [esi+48]
	sub	esp, 16					; 00000010H
	fstp	QWORD PTR [esp+8]
	sub	eax, edx
	fld	DWORD PTR [esi+44]
	lea	ebx, DWORD PTR _line$[ebp+eax]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0N@DLLHOFOF@?5?$CF7?45f?5?$CF7?45f?$AA@
	push	ebx
	call	_sprintf

; 464  :         ptr+=strlen(ptr);

	mov	eax, ebx
	add	esp, 24					; 00000018H
	lea	ecx, DWORD PTR [eax+1]
$LL284@ps_facet:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL284@ps_facet

; 465  :         sprintf(ptr," %7.5f %7.5f",(DOUBLE)t->x[2][0],(DOUBLE)t->x[2][1]); 

	fld	DWORD PTR [esi+60]
	sub	esp, 16					; 00000010H
	fstp	QWORD PTR [esp+8]
	sub	eax, ecx
	fld	DWORD PTR [esi+56]
	add	ebx, eax
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0N@DLLHOFOF@?5?$CF7?45f?5?$CF7?45f?$AA@
	push	ebx
	call	_sprintf

; 466  :         ptr+=strlen(ptr);

	mov	eax, ebx
	add	esp, 24					; 00000018H
	lea	edx, DWORD PTR [eax+1]
$LL285@ps_facet:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL285@ps_facet
	sub	eax, edx
	add	ebx, eax

; 467  :         if ( shading_flag )

	cmp	DWORD PTR _shading_flag, 0
	je	SHORT $LN132@ps_facet

; 468  :           gray = gray_level(t->normal);

	push	edi
	call	_gray_level
	fst	QWORD PTR _gray$89434[ebp]
	fld1
	add	esp, 4
	jmp	SHORT $LN131@ps_facet
$LN132@ps_facet:

; 469  :         else gray = 1.0;

	fld1
	fld	ST(0)
	fst	QWORD PTR _gray$89434[ebp]
	fxch	ST(1)
$LN131@ps_facet:

; 470  :         if ( ps_colorflag > 0 )

	cmp	DWORD PTR _ps_colorflag, 0
	jle	$LN468@ps_facet

; 471  :         { int c = t->color;
; 472  :           if ( facet_rgb_color_attr > 0 )

	cmp	DWORD PTR _facet_rgb_color_attr, 0
	mov	eax, DWORD PTR [esi+4]
	jle	SHORT $LN129@ps_facet
	fstp	ST(0)

; 473  :             sprintf(ptr," %5.3f %5.3f %5.3f ",
; 474  :                (DOUBLE)(((c>>24)&0xFF)/255.*gray),
; 475  :                (DOUBLE)(((c>>16)&0xFF)/255.*gray), 
; 476  :                (DOUBLE)(((c>>8)&0xFF)/255.*gray));

	mov	ecx, eax
	sar	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	DWORD PTR tv4332[ebp], ecx
	fild	DWORD PTR tv4332[ebp]
	mov	edx, eax
	fld	QWORD PTR __real@406fe00000000000
	sub	esp, 24					; 00000018H
	sar	edx, 16					; 00000010H
	fdiv	ST(1), ST(0)
	and	edx, 255				; 000000ffH
	mov	DWORD PTR tv4331[ebp], edx
	sar	eax, 24					; 00000018H
	and	eax, 255				; 000000ffH
	fxch	ST(1)
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [esp+16]
	fild	DWORD PTR tv4331[ebp]
	mov	DWORD PTR tv4330[ebp], eax
	fdiv	ST(0), ST(1)
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [esp+8]
	fild	DWORD PTR tv4330[ebp]
	fdivrp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BE@FAEJPDPD@?5?$CF5?43f?5?$CF5?43f?5?$CF5?43f?5?$AA@
	push	ebx
	call	_sprintf
	add	esp, 32					; 00000020H

; 477  :           else

	jmp	$LN122@ps_facet
$LN129@ps_facet:

; 478  :           { if ( ps_cmykflag )

	cmp	DWORD PTR _ps_cmykflag, 0
	je	$LN474@ps_facet

; 479  :             { 
; 480  :               REAL c,m,y,k; // tricky gray conversion
; 481  :               c = 1.0 - rgb_colors[t->color>=0?t->color:0][0]*gray;

	xor	ecx, ecx
	test	eax, eax
	sets	cl
	dec	ecx
	and	ecx, eax
	shl	ecx, 5
	fld	QWORD PTR _rgb_colors[ecx]

; 482  :               m = 1.0 - rgb_colors[t->color>=0?t->color:0][1]*gray;

	xor	ecx, ecx
	test	eax, eax
	fmul	ST(0), ST(2)
	sets	cl
	fsubr	ST(0), ST(1)
	dec	ecx
	and	ecx, eax
	shl	ecx, 5
	fld	QWORD PTR _rgb_colors[ecx+8]

; 483  :               y = 1.0 - rgb_colors[t->color>=0?t->color:0][2]*gray;

	xor	ecx, ecx
	test	eax, eax
	fmul	ST(0), ST(3)
	sets	cl
	fsubr	ST(0), ST(2)
	dec	ecx
	and	eax, ecx
	shl	eax, 5
	fld	QWORD PTR _rgb_colors[eax+16]
	fmulp	ST(4), ST(0)
	fxch	ST(2)
	fsubrp	ST(3), ST(0)

; 484  :               k = (c < m) ? c : m;

	fcom	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN142@ps_facet
	fld	ST(0)
	jmp	SHORT $LN143@ps_facet
$LN142@ps_facet:
	fld	ST(1)
$LN143@ps_facet:

; 485  :               k = (k < y) ? k : y;

	fcom	ST(3)
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN145@ps_facet
	fstp	ST(0)
	fld	ST(2)
$LN145@ps_facet:

; 486  :               sprintf(ptr," %5.3f %5.3f %5.3f %5.3f ",(DOUBLE)(c-k),
; 487  :                 (DOUBLE)(m-k),(DOUBLE)(y-k),(DOUBLE)(k));

	sub	esp, 32					; 00000020H
	fst	QWORD PTR [esp+24]
	fsub	ST(3), ST(0)
	fxch	ST(3)
	fstp	QWORD PTR [esp+16]
	fxch	ST(1)
	fsub	ST(0), ST(2)
	fstp	QWORD PTR [esp+8]
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BK@JKLBKNAC@?5?$CF5?43f?5?$CF5?43f?5?$CF5?43f?5?$CF5?43f?5?$AA@
	push	ebx
	call	_sprintf

; 488  :               ptr+=strlen(ptr);

	mov	eax, ebx
	add	esp, 40					; 00000028H
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL286@ps_facet:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL286@ps_facet

; 489  :             }
; 490  :             else

	jmp	SHORT $LN516@ps_facet
$LN474@ps_facet:

; 478  :           { if ( ps_cmykflag )

	fstp	ST(0)

; 491  :             { for ( i = 0 ; i < 3 ; i++ )

	xor	esi, esi
	jmp	SHORT $LN125@ps_facet
	npad	1
$LL323@ps_facet:
	fld	QWORD PTR _gray$89434[ebp]
$LN125@ps_facet:

; 492  :               { sprintf(ptr," %5.3f",
; 493  :                   (DOUBLE)(rgb_colors[t->color>=0?t->color:0][i]*gray)); 

	mov	edx, DWORD PTR _t$GSCopy$[ebp]
	mov	eax, DWORD PTR [edx+4]
	xor	ecx, ecx
	test	eax, eax
	sets	cl
	sub	esp, 8
	dec	ecx
	and	eax, ecx
	lea	edx, DWORD PTR [esi+eax*4]
	fmul	QWORD PTR _rgb_colors[edx*8]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_06MGOJPFIL@?5?$CF5?43f?$AA@
	push	ebx
	call	_sprintf

; 494  :                 ptr+=strlen(ptr);

	mov	eax, ebx
	add	esp, 16					; 00000010H
	lea	ecx, DWORD PTR [eax+1]
	npad	4
$LL287@ps_facet:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL287@ps_facet
	sub	eax, ecx
	inc	esi
	add	ebx, eax
	cmp	esi, 3
	jl	SHORT $LL323@ps_facet

; 495  :               }
; 496  :             }
; 497  :           }
; 498  :         }
; 499  :         else

	jmp	SHORT $LN122@ps_facet
$LN468@ps_facet:

; 500  :           { sprintf(ptr,"  %f ",(DOUBLE)gray); ptr += strlen(ptr); }

	sub	esp, 8
	fstp	ST(0)
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_05MGGCLIFC@?5?5?$CFf?5?$AA@
	push	ebx
	call	_sprintf
	mov	eax, ebx
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL288@ps_facet:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL288@ps_facet
$LN516@ps_facet:
	sub	eax, edx
	add	ebx, eax
$LN122@ps_facet:

; 501  :      }
; 502  :     if ( (t->color != CLEAR) && (t->color != UNSHOWN) )

	mov	eax, DWORD PTR _t$GSCopy$[ebp]
	mov	eax, DWORD PTR [eax+4]
	cmp	eax, -1
	je	SHORT $LN121@ps_facet
	cmp	eax, -3					; fffffffdH
	je	SHORT $LN121@ps_facet

; 503  :     { strcat(ptr," fb "); do_flag = 1; }

	lea	eax, DWORD PTR [ebx-1]
$LL289@ps_facet:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL289@ps_facet
	mov	ecx, DWORD PTR ??_C@_04DIIGLENF@?5fb?5?$AA@
	mov	DWORD PTR [eax], ecx
	mov	dl, BYTE PTR ??_C@_04DIIGLENF@?5fb?5?$AA@+4
	mov	DWORD PTR _do_flag$[ebp], 1

; 504  :     else 

	jmp	SHORT $LN517@ps_facet
$LN121@ps_facet:

; 505  :         strcat(ptr," fc ");

	lea	eax, DWORD PTR [ebx-1]
$LL290@ps_facet:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL290@ps_facet
	mov	ecx, DWORD PTR ??_C@_04DJEENOOC@?5fc?5?$AA@
	mov	DWORD PTR [eax], ecx
	mov	dl, BYTE PTR ??_C@_04DJEENOOC@?5fc?5?$AA@+4
$LN517@ps_facet:
	fld	QWORD PTR __real@406fe00000000000
	mov	BYTE PTR [eax+4], dl
$do_the_edges$89437:

; 506  : 
; 507  :     /* designated edges */
; 508  : do_the_edges:
; 509  :     for ( i = 0 ; i < FACET_VERTS ; i++ )

	mov	DWORD PTR _i$[ebp], 0
$LN119@ps_facet:

; 510  :       if ( (t->ecolor[i] == CLEAR) || 
; 511  :       (((gridflag<=0) || (t->color==UNSHOWN)) && 
; 512  :            ((t->etype[i]&EBITS) == INVISIBLE_EDGE)  ) 
; 513  :       || ((t->etype[i]&EBITS) & SPLITTING_EDGE) )

	mov	eax, DWORD PTR _t$GSCopy$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	cmp	edx, -1
	je	$LN115@ps_facet
	cmp	DWORD PTR _gridflag, 0
	jle	SHORT $LN113@ps_facet
	cmp	DWORD PTR [eax+4], -3			; fffffffdH
	jne	SHORT $LN114@ps_facet
$LN113@ps_facet:
	mov	esi, 767				; 000002ffH
	test	WORD PTR [eax+ecx*2+20], si
	je	$LN115@ps_facet
$LN114@ps_facet:
	movzx	eax, WORD PTR [eax+ecx*2+20]
	test	al, al
	js	$LN115@ps_facet

; 515  :       else 
; 516  :       { int ii;
; 517  :         do_flag = 1;
; 518  :         /* see if need to reverse edge for arrow labelling */
; 519  :         if ( labelflag && (t->etype[i] & LABEL_REVERSED) )

	cmp	DWORD PTR _labelflag, 0
	mov	DWORD PTR _do_flag$[ebp], 1
	je	SHORT $LN111@ps_facet
	test	eax, 16384				; 00004000H
	je	SHORT $LN111@ps_facet

; 520  :             strcat(line," 4 2 roll ");

	lea	eax, DWORD PTR _line$[ebp]
	dec	eax
$LN291@ps_facet:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LN291@ps_facet
	mov	ecx, DWORD PTR ??_C@_0L@BGJBOLC@?54?52?5roll?5?$AA@
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR ??_C@_0L@BGJBOLC@?54?52?5roll?5?$AA@+4
	mov	DWORD PTR [eax+4], ecx
	mov	cx, WORD PTR ??_C@_0L@BGJBOLC@?54?52?5roll?5?$AA@+8
	mov	WORD PTR [eax+8], cx
	mov	cl, BYTE PTR ??_C@_0L@BGJBOLC@?54?52?5roll?5?$AA@+10
	mov	BYTE PTR [eax+10], cl
$LN111@ps_facet:

; 521  :         if ( ps_colorflag > 0 )

	cmp	DWORD PTR _ps_colorflag, 0
	jle	$LN100@ps_facet

; 522  :         { int c = t->ecolor[i]>=0 ? t->ecolor[i] : 0;

	xor	eax, eax
	test	edx, edx
	sets	al

; 523  :           strcat(ptr,"\n "); ptr += strlen(ptr);

	lea	ecx, DWORD PTR [ebx-1]
	dec	eax
	and	eax, edx
$LN292@ps_facet:
	mov	dl, BYTE PTR [ecx+1]
	inc	ecx
	test	dl, dl
	jne	SHORT $LN292@ps_facet
	mov	dx, WORD PTR ??_C@_02JIKNIHJJ@?6?5?$AA@
	mov	WORD PTR [ecx], dx
	mov	dl, BYTE PTR ??_C@_02JIKNIHJJ@?6?5?$AA@+2
	mov	BYTE PTR [ecx+2], dl
	mov	ecx, ebx
	lea	esi, DWORD PTR [ecx+1]
$LN293@ps_facet:
	mov	dl, BYTE PTR [ecx]
	inc	ecx
	test	dl, dl
	jne	SHORT $LN293@ps_facet
	sub	ecx, esi
	add	ebx, ecx

; 524  :           if ( edge_rgb_color_attr > 0 )

	cmp	DWORD PTR _edge_rgb_color_attr, 0
	jle	SHORT $LN371@ps_facet

; 525  :             sprintf(ptr," %5.3f %5.3f %5.3f ",((c>>24)&0xFF)/255.,
; 526  :                   ((c>>16)&0xFF)/255., ((c>>8)&0xFF)/255.);

	mov	ecx, eax
	sar	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	DWORD PTR tv4172[ebp], ecx
	fild	DWORD PTR tv4172[ebp]
	mov	edx, eax
	sub	esp, 24					; 00000018H
	sar	edx, 16					; 00000010H
	fdiv	ST(0), ST(1)
	and	edx, 255				; 000000ffH
	mov	DWORD PTR tv4171[ebp], edx
	sar	eax, 24					; 00000018H
	and	eax, 255				; 000000ffH
	fstp	QWORD PTR [esp+16]
	fild	DWORD PTR tv4171[ebp]
	mov	DWORD PTR tv4170[ebp], eax
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [esp+8]
	fild	DWORD PTR tv4170[ebp]
	fdivrp	ST(1), ST(0)
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BE@FAEJPDPD@?5?$CF5?43f?5?$CF5?43f?5?$CF5?43f?5?$AA@
	push	ebx
	call	_sprintf
	add	esp, 32					; 00000020H

; 527  :           else 

	jmp	$LN518@ps_facet
$LN371@ps_facet:

; 528  :           { if ( ps_cmykflag )
; 529  :             { for ( j = 0 ; j < 4 ; j++ )

	shl	eax, 5
	fstp	ST(0)
	cmp	DWORD PTR _ps_cmykflag, 0
	je	SHORT $LN107@ps_facet
	add	eax, OFFSET _cmyk_colors
	mov	esi, eax
	mov	edi, 4
$LL106@ps_facet:

; 530  :               { sprintf(ptr," %5.3f",(DOUBLE)cmyk_colors[c][j]); 

	fld	QWORD PTR [esi]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_06MGOJPFIL@?5?$CF5?43f?$AA@
	push	ebx
	call	_sprintf

; 531  :                 ptr += strlen(ptr);

	mov	eax, ebx
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL294@ps_facet:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL294@ps_facet
	sub	eax, edx
	add	ebx, eax
	add	esi, 8
	dec	edi
	jne	SHORT $LL106@ps_facet

; 532  :               }
; 533  :             } else

	jmp	SHORT $LN518@ps_facet
$LN107@ps_facet:

; 534  :             { for ( j = 0 ; j < 3 ; j++ )

	add	eax, OFFSET _rgb_colors
	mov	esi, eax
	mov	edi, 3
	npad	1
$LL102@ps_facet:

; 535  :               { sprintf(ptr," %5.3f",(DOUBLE)rgb_colors[c][j]); 

	fld	QWORD PTR [esi]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_06MGOJPFIL@?5?$CF5?43f?$AA@
	push	ebx
	call	_sprintf

; 536  :                 ptr += strlen(ptr);

	mov	eax, ebx
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	5
$LL295@ps_facet:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL295@ps_facet
	sub	eax, edx
	add	ebx, eax
	add	esi, 8
	dec	edi
	jne	SHORT $LL102@ps_facet
$LN518@ps_facet:

; 534  :             { for ( j = 0 ; j < 3 ; j++ )

	fld	QWORD PTR __real@406fe00000000000
$LN100@ps_facet:

; 537  :               }
; 538  :             }
; 539  :           }
; 540  :          }
; 541  :          /* width of edge, in descending order of thickness */
; 542  :          ii = (i==2)?0:(i+1);

	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, 2
	jne	SHORT $LN150@ps_facet
	xor	eax, eax
	jmp	SHORT $LN151@ps_facet
$LN150@ps_facet:
	lea	eax, DWORD PTR [ecx+1]
$LN151@ps_facet:

; 543  :          if ( (t->x[ii][0]-t->x[i][0])*(t->x[ii][0]-t->x[i][0]) + 
; 544  :               (t->x[ii][1]-t->x[i][1])*(t->x[ii][1]-t->x[i][1])  < 1e-10 )

	mov	edx, DWORD PTR _t$GSCopy$[ebp]
	lea	esi, DWORD PTR [eax+eax*2+9]
	fld	DWORD PTR [edx+esi*4]
	lea	esi, DWORD PTR [ecx+ecx*2+9]
	fsub	DWORD PTR [edx+esi*4]
	lea	eax, DWORD PTR [eax+eax*2]
	fld	DWORD PTR [edx+eax*4+32]
	lea	ecx, DWORD PTR [ecx+ecx*2]
	fsub	DWORD PTR [edx+ecx*4+32]
	fmul	ST(0), ST(0)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fcomp	QWORD PTR __real@3ddb7cdfd9d7bdbb
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN99@ps_facet

; 545  :            strcat(line," noc");

	lea	eax, DWORD PTR _line$[ebp]
	dec	eax
$LN296@ps_facet:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LN296@ps_facet
	mov	edx, DWORD PTR ??_C@_04COLOBDKP@?5noc?$AA@
	mov	cl, BYTE PTR ??_C@_04COLOBDKP@?5noc?$AA@+4
	mov	DWORD PTR [eax], edx
	mov	BYTE PTR [eax+4], cl
	jmp	$LN118@ps_facet
$LN99@ps_facet:

; 546  :          else if ( (ps_widthattr >= 0) && valid_id(t->f_id) ) 

	cmp	DWORD PTR _ps_widthattr, 0
	jl	$LN97@ps_facet
	mov	ecx, DWORD PTR [edx]
	test	ecx, 268435456				; 10000000H
	je	$LN97@ps_facet

; 547  :          { facetedge_id fe = get_facet_fe(t->f_id);

	mov	edx, DWORD PTR _web+236
	fstp	ST(0)
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN188@ps_facet
	xor	eax, 134217728				; 08000000H
$LN188@ps_facet:

; 548  :            for ( j = 0 ; j < i ; j++ ) fe = get_next_edge(fe);

	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _web+460
	test	ecx, ecx
	jle	SHORT $LN94@ps_facet
$LL96@ps_facet:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN193@ps_facet
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN95@ps_facet
$LN193@ps_facet:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [eax+32]
$LN95@ps_facet:
	dec	ecx
	jne	SHORT $LL96@ps_facet
$LN94@ps_facet:

; 549  :            sprintf(line+strlen(line)," %7.5f edge ",
; 550  :                 (DOUBLE)*EREAL(get_fe_edge(fe),ps_widthattr));

	lea	ecx, DWORD PTR _line$[ebp]
	lea	edi, DWORD PTR [ecx+1]
$LL297@ps_facet:
	mov	dl, BYTE PTR [ecx]
	inc	ecx
	test	dl, dl
	jne	SHORT $LL297@ps_facet
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _ps_widthattr
	mov	esi, DWORD PTR _web+124
	imul	edx, 240				; 000000f0H
	add	edx, DWORD PTR _web+216
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	esi, DWORD PTR _dymem
	mov	edx, DWORD PTR [edx+esi+64]
	sub	esp, 8
	sub	ecx, edi
	fld	QWORD PTR [eax+edx]
	lea	eax, DWORD PTR _line$[ebp+ecx]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0N@GHNPILBG@?5?$CF7?45f?5edge?5?$AA@
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H
	fld	QWORD PTR __real@406fe00000000000
	jmp	$LN118@ps_facet
$LN97@ps_facet:

; 551  :          }
; 552  :          else if ( t->etype[i] & BARE_EDGE ) strcat(line," bw");

	mov	ecx, DWORD PTR _t$GSCopy$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, WORD PTR [ecx+edx*2+20]
	lea	edi, DWORD PTR _line$[ebp]
	dec	edi
	test	al, 64					; 00000040H
	je	SHORT $LN92@ps_facet
$LN298@ps_facet:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LN298@ps_facet
	mov	eax, DWORD PTR ??_C@_03FFKEHPKC@?5bw?$AA@
	mov	DWORD PTR [edi], eax
	jmp	$LN118@ps_facet
$LN92@ps_facet:

; 553  :          else if ( t->etype[i] & FIXED_EDGE ) strcat(line," fw");

	test	al, 16					; 00000010H
	je	SHORT $LN90@ps_facet
$LN299@ps_facet:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LN299@ps_facet
	mov	ecx, DWORD PTR ??_C@_03FCKNNHHO@?5fw?$AA@
	jmp	SHORT $LN519@ps_facet
$LN90@ps_facet:

; 554  :          else if ( t->etype[i] & CONSTRAINT_EDGE ) strcat(line," ww");

	test	al, 32					; 00000020H
	je	SHORT $LN88@ps_facet
$LN300@ps_facet:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LN300@ps_facet
	mov	edx, DWORD PTR ??_C@_03EPEJBODJ@?5ww?$AA@
	mov	DWORD PTR [edi], edx
	jmp	SHORT $LN118@ps_facet
$LN88@ps_facet:

; 555  :          else if ( t->etype[i] & BOUNDARY_EDGE ) strcat(line," ww");

	test	al, 8
	je	SHORT $LN86@ps_facet
$LN301@ps_facet:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LN301@ps_facet
	mov	eax, DWORD PTR ??_C@_03EPEJBODJ@?5ww?$AA@
	mov	DWORD PTR [edi], eax
	jmp	SHORT $LN118@ps_facet
$LN86@ps_facet:

; 556  :          else if ( t->etype[i] & SINGLE_EDGE ) strcat(line," ww");

	test	al, 4
	je	SHORT $LN84@ps_facet
$LN302@ps_facet:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LN302@ps_facet
	mov	ecx, DWORD PTR ??_C@_03EPEJBODJ@?5ww?$AA@
	jmp	SHORT $LN519@ps_facet
$LN84@ps_facet:

; 557  :          else if ( t->etype[i] & TRIPLE_EDGE ) strcat(line," tw");

	test	al, 2
	je	SHORT $LN304@ps_facet
$LN303@ps_facet:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LN303@ps_facet
	mov	edx, DWORD PTR ??_C@_03ENAPKAGA@?5tw?$AA@
	mov	DWORD PTR [edi], edx
	jmp	SHORT $LN118@ps_facet
$LN304@ps_facet:

; 558  :          else strcat(line," gw"); /* regular grid interior edge */

	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LN304@ps_facet
	mov	eax, DWORD PTR ??_C@_03FDGPLNEJ@?5gw?$AA@
	mov	DWORD PTR [edi], eax
	jmp	SHORT $LN118@ps_facet
$LN115@ps_facet:

; 514  :           strcat(ptr," no"); 

	lea	edi, DWORD PTR [ebx-1]
$LN305@ps_facet:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LN305@ps_facet
	mov	ecx, DWORD PTR ??_C@_03NOKFBOJP@?5no?$AA@
$LN519@ps_facet:
	mov	DWORD PTR [edi], ecx
$LN118@ps_facet:

; 506  : 
; 507  :     /* designated edges */
; 508  : do_the_edges:
; 509  :     for ( i = 0 ; i < FACET_VERTS ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, 3
	jl	$LN119@ps_facet

; 559  :       }
; 560  :   strcat(line,"\n");

	lea	edi, DWORD PTR _line$[ebp]
	dec	edi
$LN306@ps_facet:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LN306@ps_facet

; 561  :   if ( do_flag ) fputs(line,fd);

	cmp	DWORD PTR _do_flag$[ebp], 0
	mov	dx, WORD PTR ??_C@_01EEMJAFIK@?6?$AA@
	mov	WORD PTR [edi], dx
	je	SHORT $LN80@ps_facet
	mov	eax, DWORD PTR _fd
	fstp	ST(0)
	push	eax
	lea	ecx, DWORD PTR _line$[ebp]
	push	ecx
	call	_fputs
	fld	QWORD PTR __real@406fe00000000000
	add	esp, 8
$LN80@ps_facet:

; 562  : 
; 563  : 
; 564  : /* draw previous edge fragments */
; 565  : if ( edgeredrawflag )

	cmp	DWORD PTR _edgeredrawflag, 0
	je	$LN393@ps_facet

; 566  : { 
; 567  :     for ( i = 0 ; i < FACET_VERTS ; i++ )

	mov	eax, DWORD PTR _t$GSCopy$[ebp]
	lea	ebx, DWORD PTR [eax+32]
	add	eax, 108				; 0000006cH
	mov	DWORD PTR tv4157[ebp], eax
	mov	DWORD PTR tv2645[ebp], 3
$LN78@ps_facet:

; 568  :     { vertex_id v_id = t->v_id[i]; 

	mov	edx, DWORD PTR tv4157[ebp]
	mov	eax, DWORD PTR [edx]

; 569  :       if ( valid_id(v_id) )

	test	eax, 268435456				; 10000000H
	je	$LN77@ps_facet

; 570  :       { int erlp = edgeredrawhead[loc_ordinal(v_id)];

	mov	ecx, DWORD PTR _edgeredrawhead
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]

; 571  :          for ( ; erlp != 0 ; erlp = edgeredrawlist[erlp].next )

	test	eax, eax
	je	$LN77@ps_facet
	mov	edx, DWORD PTR _edgeredrawlist
$LN74@ps_facet:

; 572  :          { struct erl *ep = edgeredrawlist + erlp;
; 573  : 
; 574  :          if ( fabs(t->x[i][0]-ep->v[0])+fabs(t->x[i][1]-ep->v[1]) > .00001 )

	fld	DWORD PTR [ebx+4]
	lea	ecx, DWORD PTR [eax+eax*4]
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
	fsub	DWORD PTR [edx+ecx+20]
	lea	esi, DWORD PTR [edx+ecx]
	mov	DWORD PTR tv3078[ebp], ecx
	fabs
	fld	DWORD PTR [ebx]
	fsub	DWORD PTR [esi+16]
	fabs
	faddp	ST(1), ST(0)
	fcomp	QWORD PTR __real@3ee4f8b588e368f1
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	$LN73@ps_facet

; 575  :            continue;
; 576  :          if ( ep->x[0]*ep->x[0] + ep->x[1]*ep->x[1] < (labelflag?0.01:1e-10) )

	cmp	DWORD PTR _labelflag, 0
	je	SHORT $LN154@ps_facet
	fld	QWORD PTR __real@3f847ae147ae147b
	jmp	SHORT $LN155@ps_facet
$LN154@ps_facet:
	fld	QWORD PTR __real@3ddb7cdfd9d7bdbb
$LN155@ps_facet:
	fld	QWORD PTR [esi+8]
	fld	QWORD PTR [esi]
	fmul	ST(0), ST(0)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	$LN73@ps_facet

; 577  :            continue;
; 578  : 
; 579  :          if ( ps_colorflag > 0 )

	cmp	DWORD PTR _ps_colorflag, 0
	jle	$LN412@ps_facet

; 580  :          { int c = ep->color; 
; 581  :            if ( edge_rgb_color_attr > 0 )

	cmp	DWORD PTR _edge_rgb_color_attr, 0
	mov	eax, DWORD PTR [esi+24]
	jle	$LN415@ps_facet

; 582  :              sprintf(line,"%10.6f %10.6f %10.6f %10.6f  %5.3f %5.3f %5.3f ",
; 583  :               t->x[i][0],t->x[i][1],t->x[i][0]+ep->x[0],t->x[i][1]+ep->x[1],
; 584  :               ((c>>24)&0xFF)/255., ((c>>16)&0xFF)/255., ((c>>8)&0xFF)/255.);

	mov	edx, eax
	sar	edx, 8
	and	edx, 255				; 000000ffH
	mov	DWORD PTR tv3981[ebp], edx
	fild	DWORD PTR tv3981[ebp]
	sub	esp, 56					; 00000038H
	mov	ecx, eax
	sar	ecx, 16					; 00000010H
	fdiv	ST(0), ST(1)
	and	ecx, 255				; 000000ffH
	mov	DWORD PTR tv3980[ebp], ecx
	sar	eax, 24					; 00000018H
	and	eax, 255				; 000000ffH
	lea	edx, DWORD PTR _line$[ebp]
	fstp	QWORD PTR [esp+48]
	fild	DWORD PTR tv3980[ebp]
	mov	DWORD PTR tv3979[ebp], eax
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [esp+40]
	fild	DWORD PTR tv3979[ebp]
	fdivrp	ST(1), ST(0)
	fstp	QWORD PTR [esp+32]
	fld	DWORD PTR [ebx+4]
	fadd	QWORD PTR [esi+8]
	fstp	QWORD PTR [esp+24]
	fld	DWORD PTR [ebx]
	fadd	QWORD PTR [esi]
	fstp	QWORD PTR [esp+16]
	fld	DWORD PTR [ebx+4]
	fstp	QWORD PTR [esp+8]
	fld	DWORD PTR [ebx]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0DA@EABDKIEP@?$CF10?46f?5?$CF10?46f?5?$CF10?46f?5?$CF10?46f?5?5?$CF5?4@
	push	edx
	call	_sprintf
	add	esp, 64					; 00000040H
	jmp	$LN64@ps_facet
$LN415@ps_facet:

; 585  :            else if ( ps_cmykflag )
; 586  :              sprintf(line,"%10.6f %10.6f %10.6f %10.6f  %5.3f %5.3f %5.3f %5.3f ",
; 587  :               t->x[i][0],t->x[i][1],t->x[i][0]+ep->x[0],t->x[i][1]+ep->x[1],
; 588  :               (DOUBLE)cmyk_colors[c][0],(DOUBLE)cmyk_colors[c][1],
; 589  :               (DOUBLE)cmyk_colors[c][2],(DOUBLE)cmyk_colors[c][3]);

	shl	eax, 5
	fstp	ST(0)
	cmp	DWORD PTR _ps_cmykflag, 0
	je	SHORT $LN66@ps_facet
	fld	QWORD PTR _cmyk_colors[eax+24]
	sub	esp, 64					; 00000040H
	fstp	QWORD PTR [esp+56]
	fld	QWORD PTR _cmyk_colors[eax+16]
	fstp	QWORD PTR [esp+48]
	fld	QWORD PTR _cmyk_colors[eax+8]
	fstp	QWORD PTR [esp+40]
	fld	QWORD PTR _cmyk_colors[eax]
	lea	eax, DWORD PTR _line$[ebp]
	fstp	QWORD PTR [esp+32]
	fld	DWORD PTR [ebx+4]
	fadd	QWORD PTR [esi+8]
	fstp	QWORD PTR [esp+24]
	fld	DWORD PTR [ebx]
	fadd	QWORD PTR [esi]
	fstp	QWORD PTR [esp+16]
	fld	DWORD PTR [ebx+4]
	fstp	QWORD PTR [esp+8]
	fld	DWORD PTR [ebx]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0DG@OMMMGA@?$CF10?46f?5?$CF10?46f?5?$CF10?46f?5?$CF10?46f?5?5?$CF5?4@
	push	eax
	call	_sprintf
	add	esp, 72					; 00000048H

; 590  :            else

	jmp	$LN64@ps_facet
$LN66@ps_facet:

; 591  :              sprintf(line,"%10.6f %10.6f %10.6f %10.6f  %5.3f %5.3f %5.3f ",
; 592  :               t->x[i][0],t->x[i][1],t->x[i][0]+ep->x[0],t->x[i][1]+ep->x[1],
; 593  :               (DOUBLE)rgb_colors[c][0],(DOUBLE)rgb_colors[c][1],
; 594  :               (DOUBLE)rgb_colors[c][2]);

	fld	QWORD PTR _rgb_colors[eax+16]
	sub	esp, 56					; 00000038H
	fstp	QWORD PTR [esp+48]
	lea	ecx, DWORD PTR _line$[ebp]
	fld	QWORD PTR _rgb_colors[eax+8]
	fstp	QWORD PTR [esp+40]
	fld	QWORD PTR _rgb_colors[eax]
	fstp	QWORD PTR [esp+32]
	fld	DWORD PTR [ebx+4]
	fadd	QWORD PTR [esi+8]
	fstp	QWORD PTR [esp+24]
	fld	DWORD PTR [ebx]
	fadd	QWORD PTR [esi]
	fstp	QWORD PTR [esp+16]
	fld	DWORD PTR [ebx+4]
	fstp	QWORD PTR [esp+8]
	fld	DWORD PTR [ebx]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0DA@EABDKIEP@?$CF10?46f?5?$CF10?46f?5?$CF10?46f?5?$CF10?46f?5?5?$CF5?4@
	push	ecx
	call	_sprintf
	add	esp, 64					; 00000040H

; 595  :          }
; 596  :          else

	jmp	SHORT $LN64@ps_facet
$LN412@ps_facet:

; 577  :            continue;
; 578  : 
; 579  :          if ( ps_colorflag > 0 )

	fstp	ST(0)

; 597  :           sprintf(line,"%10.6f %10.6f %10.6f %10.6f ", t->x[i][0],
; 598  :              t->x[i][1],t->x[i][0]+ep->x[0],t->x[i][1]+ep->x[1]);

	sub	esp, 32					; 00000020H
	fld	DWORD PTR [ebx+4]
	lea	edx, DWORD PTR _line$[ebp]
	fadd	QWORD PTR [esi+8]
	fstp	QWORD PTR [esp+24]
	fld	DWORD PTR [ebx]
	fadd	QWORD PTR [esi]
	fstp	QWORD PTR [esp+16]
	fld	DWORD PTR [ebx+4]
	fstp	QWORD PTR [esp+8]
	fld	DWORD PTR [ebx]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BN@IOAOKOAN@?$CF10?46f?5?$CF10?46f?5?$CF10?46f?5?$CF10?46f?5?$AA@
	push	edx
	call	_sprintf
	add	esp, 40					; 00000028H
$LN64@ps_facet:

; 599  : 
; 600  :          /* see if need to reverse edge for arrow labelling */
; 601  :          if ( labelflag && (ep->etype & LABEL_REVERSED) )

	cmp	DWORD PTR _labelflag, 0
	je	SHORT $LN326@ps_facet
	test	DWORD PTR [esi+32], 16384		; 00004000H
	je	SHORT $LN326@ps_facet

; 602  :             strcat(line," 4 2 roll ");

	lea	eax, DWORD PTR _line$[ebp]
	dec	eax
	npad	7
$LL307@ps_facet:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL307@ps_facet
	mov	ecx, DWORD PTR ??_C@_0L@BGJBOLC@?54?52?5roll?5?$AA@
	mov	edx, DWORD PTR ??_C@_0L@BGJBOLC@?54?52?5roll?5?$AA@+4
	mov	DWORD PTR [eax], ecx
	mov	cx, WORD PTR ??_C@_0L@BGJBOLC@?54?52?5roll?5?$AA@+8
	mov	DWORD PTR [eax+4], edx
	mov	dl, BYTE PTR ??_C@_0L@BGJBOLC@?54?52?5roll?5?$AA@+10
	mov	WORD PTR [eax+8], cx
	mov	BYTE PTR [eax+10], dl
$LN326@ps_facet:

; 603  : 
; 604  :          if ( ep->etype & BARE_EDGE ) strcat(line," bw");

	mov	eax, DWORD PTR [esi+32]
	lea	edi, DWORD PTR _line$[ebp]
	dec	edi
	test	al, 64					; 00000040H
	je	SHORT $LN62@ps_facet
	npad	5
$LL308@ps_facet:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL308@ps_facet
	mov	eax, DWORD PTR ??_C@_03FFKEHPKC@?5bw?$AA@
	jmp	$LN520@ps_facet
$LN62@ps_facet:

; 605  :          else if ( ep->etype & FIXED_EDGE ) strcat(line," fw");

	test	al, 16					; 00000010H
	je	SHORT $LN60@ps_facet
$LL309@ps_facet:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL309@ps_facet
	mov	ecx, DWORD PTR ??_C@_03FCKNNHHO@?5fw?$AA@
	mov	DWORD PTR [edi], ecx
	jmp	SHORT $LN51@ps_facet
$LN60@ps_facet:

; 606  :          else if ( ep->etype & CONSTRAINT_EDGE ) strcat(line," ww");

	test	al, 32					; 00000020H
	je	SHORT $LN58@ps_facet
	npad	4
$LL310@ps_facet:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL310@ps_facet
	mov	edx, DWORD PTR ??_C@_03EPEJBODJ@?5ww?$AA@
	mov	DWORD PTR [edi], edx
	jmp	SHORT $LN51@ps_facet
$LN58@ps_facet:

; 607  :          else if ( ep->etype & BOUNDARY_EDGE ) strcat(line," ww");

	test	al, 8
	je	SHORT $LN56@ps_facet
$LL311@ps_facet:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL311@ps_facet
	mov	eax, DWORD PTR ??_C@_03EPEJBODJ@?5ww?$AA@
	jmp	SHORT $LN520@ps_facet
$LN56@ps_facet:

; 608  :          else if ( ep->etype & SINGLE_EDGE ) strcat(line," ww");

	test	al, 4
	je	SHORT $LN54@ps_facet
	npad	7
$LL312@ps_facet:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL312@ps_facet
	mov	ecx, DWORD PTR ??_C@_03EPEJBODJ@?5ww?$AA@
	mov	DWORD PTR [edi], ecx
	jmp	SHORT $LN51@ps_facet
$LN54@ps_facet:

; 609  :          else if ( ep->etype & TRIPLE_EDGE ) strcat(line," tw");

	test	al, 2
	je	SHORT $LL314@ps_facet
$LL313@ps_facet:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL313@ps_facet
	mov	edx, DWORD PTR ??_C@_03ENAPKAGA@?5tw?$AA@
	mov	DWORD PTR [edi], edx
	jmp	SHORT $LN51@ps_facet
$LL314@ps_facet:

; 610  :          else strcat(line," gw"); /* regular grid interior edge */

	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL314@ps_facet
	mov	eax, DWORD PTR ??_C@_03FDGPLNEJ@?5gw?$AA@
$LN520@ps_facet:
	mov	DWORD PTR [edi], eax
$LN51@ps_facet:

; 611  :          fputs(line,fd);

	mov	ecx, DWORD PTR _fd
	push	ecx
	lea	edx, DWORD PTR _line$[ebp]
	push	edx
	call	_fputs

; 612  :          fputs("\n",fd);

	mov	eax, DWORD PTR _fd
	push	eax
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_fputs
	fld	QWORD PTR __real@406fe00000000000
	mov	ecx, DWORD PTR tv3078[ebp]
	mov	edx, DWORD PTR _edgeredrawlist
	add	esp, 16					; 00000010H
$LN73@ps_facet:

; 571  :          for ( ; erlp != 0 ; erlp = edgeredrawlist[erlp].next )

	mov	eax, DWORD PTR [edx+ecx+28]
	test	eax, eax
	jne	$LN74@ps_facet
$LN77@ps_facet:

; 566  : { 
; 567  :     for ( i = 0 ; i < FACET_VERTS ; i++ )

	add	DWORD PTR tv4157[ebp], 4
	add	ebx, 12					; 0000000cH
	dec	DWORD PTR tv2645[ebp]
	jne	$LN78@ps_facet

; 613  :       }
; 614  :       }
; 615  :     }
; 616  : }
; 617  : 
; 618  : /* save edge end fragments for later redrawing on top of later facets
; 619  :       for smoother edge line */
; 620  : if ( edgeredrawflag )

	cmp	DWORD PTR _edgeredrawflag, 0
	fstp	ST(0)
	je	$LN322@ps_facet

; 621  : { 
; 622  :     for ( i = 0 ; i < FACET_VERTS ; i++ )

	mov	esi, DWORD PTR _t$GSCopy$[ebp]
	mov	edi, DWORD PTR _edgeredrawcount
	lea	ecx, DWORD PTR [esi+8]
	xor	eax, eax
	mov	DWORD PTR tv4532[ebp], ecx
	lea	ecx, DWORD PTR [esi+20]
	mov	DWORD PTR _i$[ebp], eax
	mov	DWORD PTR tv4534[ebp], ecx
	add	esi, 36					; 00000024H
	npad	7
$LL328@ps_facet:

; 623  :     { vertex_id v_id;
; 624  :       double len,fudge;
; 625  :       int ii = i >= FACET_VERTS-1 ? 0 : i+1;

	cmp	eax, 2
	jl	SHORT $LN156@ps_facet
	mov	DWORD PTR _ii$89591[ebp], 0
	jmp	SHORT $LN157@ps_facet
$LN156@ps_facet:
	inc	eax
	mov	DWORD PTR _ii$89591[ebp], eax
$LN157@ps_facet:

; 626  : 
; 627  :       if ( (t->ecolor[i] == CLEAR) || 
; 628  :       (((gridflag<=0) || (t->color==UNSHOWN)) && 
; 629  :            ((t->etype[i]&EBITS) == INVISIBLE_EDGE)  ) 
; 630  :       || ((t->etype[i]&EBITS) & SPLITTING_EDGE) )

	mov	edx, DWORD PTR tv4532[ebp]
	cmp	DWORD PTR [edx], -1
	je	$LN48@ps_facet
	cmp	DWORD PTR _gridflag, 0
	jle	SHORT $LN43@ps_facet
	mov	eax, DWORD PTR _t$GSCopy$[ebp]
	cmp	DWORD PTR [eax+4], -3			; fffffffdH
	jne	SHORT $LN44@ps_facet
$LN43@ps_facet:
	mov	edx, 767				; 000002ffH
	test	WORD PTR [ecx], dx
	je	$LN48@ps_facet
$LN44@ps_facet:
	test	BYTE PTR [ecx], -128			; ffffff80H
	jne	$LN48@ps_facet

; 631  :           continue;
; 632  : 
; 633  :       len = sqrt((t->x[ii][0]-t->x[i][0])*(t->x[ii][0]-t->x[i][0]) +
; 634  :           (t->x[ii][1]-t->x[i][1])*(t->x[ii][1]-t->x[i][1]));

	mov	eax, DWORD PTR _ii$89591[ebp]
	mov	ecx, DWORD PTR _t$GSCopy$[ebp]
	lea	edx, DWORD PTR [eax+eax*2+9]
	fld	DWORD PTR [ecx+edx*4]
	lea	ebx, DWORD PTR [ecx+edx*4]
	fsub	DWORD PTR [esi]
	lea	eax, DWORD PTR [eax+eax*2]
	fld	DWORD PTR [ecx+eax*4+32]
	lea	eax, DWORD PTR [ecx+eax*4+32]
	fsub	DWORD PTR [esi-4]
	mov	DWORD PTR tv3216[ebp], eax
	fmul	ST(0), ST(0)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	call	__CIsqrt

; 635  : 
; 636  :       fudge = (len > .005) ? .005/len : 1.0; /* max length .005 */

	fld	QWORD PTR __real@3f747ae147ae147b
	fcom	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN486@ps_facet
	fdivrp	ST(1), ST(0)
	jmp	SHORT $LN521@ps_facet
$LN486@ps_facet:
	fstp	ST(1)
	fstp	ST(0)
	fld1
$LN521@ps_facet:

; 637  : 
; 638  :       if ( edgeredrawcount > edgeredrawmax-2 )

	mov	ecx, DWORD PTR _edgeredrawmax
	fst	QWORD PTR _fudge$89590[ebp]
	add	ecx, -2					; fffffffeH
	cmp	edi, ecx
	jle	SHORT $LN42@ps_facet

; 639  :       { edgeredrawlist = (struct erl *)temp_realloc((char*)edgeredrawlist,
; 640  :             2*edgeredrawmax*sizeof(struct erl));

	mov	eax, DWORD PTR _edgeredrawmax
	fstp	ST(0)
	push	640					; 00000280H
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR _edgeredrawlist
	push	OFFSET ??_C@_09DCJMEOOE@PSGRAPH?4C?$AA@
	shl	edx, 4
	push	edx
	push	eax
	call	_kb_temp_realloc

; 641  :          edgeredrawmax *= 2;

	fld	QWORD PTR _fudge$89590[ebp]
	mov	ecx, DWORD PTR _edgeredrawmax
	mov	edi, DWORD PTR _edgeredrawcount
	lea	edx, DWORD PTR [ecx+ecx]
	add	esp, 16					; 00000010H
	mov	DWORD PTR _edgeredrawlist, eax
	mov	DWORD PTR _edgeredrawmax, edx
$LN42@ps_facet:

; 642  :       }
; 643  :       v_id = t->v_id[i];

	mov	eax, DWORD PTR tv4532[ebp]
	mov	edx, DWORD PTR [eax+100]

; 644  :       if ( valid_id(v_id) )

	test	edx, 268435456				; 10000000H
	je	$LN325@ps_facet

; 645  :       { int didflag = 0,erlp;
; 646  :          for ( erlp = edgeredrawhead[loc_ordinal(v_id)] ; erlp ; 
; 647  :                     erlp = edgeredrawlist[erlp].next )

	mov	ecx, DWORD PTR _edgeredrawhead
	and	edx, 134217727				; 07ffffffH
	add	edx, edx
	add	edx, edx
	mov	ecx, DWORD PTR [edx+ecx]
	test	ecx, ecx
	je	SHORT $LN324@ps_facet
	mov	eax, DWORD PTR tv3216[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [esi-4]
	fmul	ST(0), ST(1)
	fld	DWORD PTR [ebx]
	fsub	DWORD PTR [esi]
	fmul	ST(0), ST(2)
	fld	QWORD PTR __real@3f1a36e2eb1c432d
$LN40@ps_facet:

; 648  :          { struct erl *ep = edgeredrawlist + erlp;

	mov	eax, DWORD PTR _edgeredrawlist

; 649  :             if ( fabs(t->x[i][0]-ep->v[0])+fabs(t->x[i][1]-ep->v[1])
; 650  :          + fabs(ep->x[0]-fudge*(t->x[ii][0]-t->x[i][0]))
; 651  :          + fabs(ep->x[1]-fudge*(t->x[ii][1]-t->x[i][1])) < .0001 )

	fld	DWORD PTR [esi]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	fsub	DWORD PTR [eax+ecx*8+20]
	lea	ecx, DWORD PTR [eax+ecx*8]
	fabs
	fld	DWORD PTR [esi-4]
	fsub	DWORD PTR [ecx+16]
	fabs
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx]
	fsub	ST(0), ST(4)
	fabs
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx+8]
	fsub	ST(0), ST(3)
	fabs
	faddp	ST(1), ST(0)
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jnp	$LN500@ps_facet

; 645  :       { int didflag = 0,erlp;
; 646  :          for ( erlp = edgeredrawhead[loc_ordinal(v_id)] ; erlp ; 
; 647  :                     erlp = edgeredrawlist[erlp].next )

	mov	ecx, DWORD PTR [ecx+28]
	test	ecx, ecx
	jne	SHORT $LN40@ps_facet
	fstp	ST(2)
	fstp	ST(0)
	jmp	SHORT $LN331@ps_facet
$LN324@ps_facet:
	fld	QWORD PTR __real@3f1a36e2eb1c432d
$LN331@ps_facet:

; 652  :      {  didflag = 1; break; }
; 653  :          }
; 654  :          if ( didflag == 0 )
; 655  :          {
; 656  :             edgeredrawlist[edgeredrawcount].x[0] = fudge*(t->x[ii][0]-t->x[i][0]);

	mov	ecx, DWORD PTR tv3216[ebp]
	fld	DWORD PTR [ecx]
	mov	ecx, DWORD PTR _edgeredrawlist
	fsub	DWORD PTR [esi-4]
	lea	eax, DWORD PTR [edi+edi*4]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [ecx+eax*8]

; 657  :             edgeredrawlist[edgeredrawcount].x[1] = fudge*(t->x[ii][1]-t->x[i][1]);

	mov	eax, DWORD PTR _edgeredrawcount
	fld	DWORD PTR [ebx]
	mov	ecx, DWORD PTR _edgeredrawlist
	fsub	DWORD PTR [esi]
	lea	eax, DWORD PTR [eax+eax*4]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [ecx+eax*8+8]

; 658  :             edgeredrawlist[edgeredrawcount].v[0] = t->x[i][0];

	mov	eax, DWORD PTR _edgeredrawcount
	fld	DWORD PTR [esi-4]
	mov	ecx, DWORD PTR _edgeredrawlist
	lea	eax, DWORD PTR [eax+eax*4]
	fstp	DWORD PTR [ecx+eax*8+16]

; 659  :             edgeredrawlist[edgeredrawcount].v[1] = t->x[i][1];

	mov	eax, DWORD PTR _edgeredrawcount
	fld	DWORD PTR [esi]
	mov	ecx, DWORD PTR _edgeredrawlist
	lea	eax, DWORD PTR [eax+eax*4]
	fstp	DWORD PTR [ecx+eax*8+20]

; 660  :             edgeredrawlist[edgeredrawcount].next = edgeredrawhead[loc_ordinal(v_id)];

	mov	eax, DWORD PTR _edgeredrawcount
	mov	ecx, DWORD PTR _edgeredrawhead
	mov	ecx, DWORD PTR [edx+ecx]
	mov	edi, DWORD PTR _edgeredrawlist
	lea	eax, DWORD PTR [eax+eax*4]
	mov	DWORD PTR [edi+eax*8+28], ecx

; 661  :             edgeredrawlist[edgeredrawcount].etype = t->etype[i];

	mov	eax, DWORD PTR tv4534[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	eax, DWORD PTR _edgeredrawcount
	mov	edi, DWORD PTR _edgeredrawlist
	lea	eax, DWORD PTR [eax+eax*4]
	mov	DWORD PTR [edi+eax*8+32], ecx

; 662  :             edgeredrawlist[edgeredrawcount].color = t->ecolor[i];

	mov	eax, DWORD PTR _edgeredrawcount
	mov	edi, DWORD PTR _edgeredrawlist
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR tv4532[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edi+ecx*8+24], eax

; 663  :             edgeredrawhead[loc_ordinal(v_id)] = edgeredrawcount;

	mov	ecx, DWORD PTR _edgeredrawcount
	mov	eax, DWORD PTR _edgeredrawhead
	mov	DWORD PTR [edx+eax], ecx

; 664  :             edgeredrawcount++;

	mov	edi, DWORD PTR _edgeredrawcount
	inc	edi
	mov	DWORD PTR _edgeredrawcount, edi
	jmp	SHORT $LN332@ps_facet
$LN325@ps_facet:
	fld	QWORD PTR __real@3f1a36e2eb1c432d
	jmp	SHORT $LN332@ps_facet
$LN500@ps_facet:
	fstp	ST(2)
	fstp	ST(0)
$LN332@ps_facet:

; 665  :          }
; 666  :       }
; 667  :       v_id = t->v_id[ii];

	mov	ecx, DWORD PTR _t$GSCopy$[ebp]
	mov	edx, DWORD PTR _ii$89591[ebp]
	mov	edx, DWORD PTR [ecx+edx*4+108]

; 668  :       if ( valid_id(v_id) )

	test	edx, 268435456				; 10000000H
	je	$LN506@ps_facet

; 669  :       {  int didflag = 0,erlp;
; 670  :          for ( erlp = edgeredrawhead[loc_ordinal(v_id)] ; erlp ; 
; 671  :                     erlp = edgeredrawlist[erlp].next )

	mov	eax, DWORD PTR _edgeredrawhead
	and	edx, 134217727				; 07ffffffH
	add	edx, edx
	add	edx, edx
	mov	ecx, DWORD PTR [edx+eax]
	test	ecx, ecx
	je	SHORT $LN509@ps_facet
	fld	DWORD PTR [esi-4]
	mov	eax, DWORD PTR tv3216[ebp]
	fsub	DWORD PTR [eax]
	fmul	ST(0), ST(2)
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [ebx]
	fmul	ST(0), ST(3)
$LN329@ps_facet:

; 672  :          { struct erl *ep = edgeredrawlist + erlp;

	mov	eax, DWORD PTR _edgeredrawlist

; 673  :            if ( fabs(t->x[ii][0]-ep->v[0])+fabs(t->x[ii][1]-ep->v[1])
; 674  :                 + fabs(ep->x[0]-fudge*(t->x[i][0]-t->x[ii][0]))
; 675  :                 + fabs(ep->x[1]-fudge*(t->x[i][1]-t->x[ii][1])) < .0001 )

	fld	DWORD PTR [ebx]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	fsub	DWORD PTR [eax+ecx*8+20]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR tv3216[ebp]
	fabs
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [ecx+16]
	fabs
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx]
	fsub	ST(0), ST(3)
	fabs
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx+8]
	fsub	ST(0), ST(2)
	fabs
	faddp	ST(1), ST(0)
	fcomp	ST(3)
	fnstsw	ax
	test	ah, 5
	jnp	$LN513@ps_facet

; 669  :       {  int didflag = 0,erlp;
; 670  :          for ( erlp = edgeredrawhead[loc_ordinal(v_id)] ; erlp ; 
; 671  :                     erlp = edgeredrawlist[erlp].next )

	mov	ecx, DWORD PTR [ecx+28]
	test	ecx, ecx
	jne	SHORT $LN329@ps_facet

; 673  :            if ( fabs(t->x[ii][0]-ep->v[0])+fabs(t->x[ii][1]-ep->v[1])
; 674  :                 + fabs(ep->x[0]-fudge*(t->x[i][0]-t->x[ii][0]))
; 675  :                 + fabs(ep->x[1]-fudge*(t->x[i][1]-t->x[ii][1])) < .0001 )

	fstp	ST(2)
	fstp	ST(0)
$LN509@ps_facet:

; 676  :            {  didflag = 1; break; }
; 677  :          }
; 678  :          if ( didflag == 0 )
; 679  :          {
; 680  :             edgeredrawlist[edgeredrawcount].x[0] = fudge*(t->x[i][0]-t->x[ii][0]);

	mov	ecx, DWORD PTR tv3216[ebp]
	fstp	ST(0)
	fld	DWORD PTR [esi-4]
	lea	eax, DWORD PTR [edi+edi*4]
	fsub	DWORD PTR [ecx]
	mov	edi, DWORD PTR _edgeredrawlist
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [edi+eax*8]

; 681  :             edgeredrawlist[edgeredrawcount].x[1] = fudge*(t->x[i][1]-t->x[ii][1]);

	mov	eax, DWORD PTR _edgeredrawcount
	fld	DWORD PTR [esi]
	mov	edi, DWORD PTR _edgeredrawlist
	fsub	DWORD PTR [ebx]
	lea	eax, DWORD PTR [eax+eax*4]
	fmulp	ST(1), ST(0)
	fstp	QWORD PTR [edi+eax*8+8]

; 682  :             edgeredrawlist[edgeredrawcount].v[0] = t->x[ii][0];

	mov	eax, DWORD PTR _edgeredrawcount
	fld	DWORD PTR [ecx]
	mov	ecx, DWORD PTR _edgeredrawlist
	lea	eax, DWORD PTR [eax+eax*4]
	fstp	DWORD PTR [ecx+eax*8+16]

; 683  :             edgeredrawlist[edgeredrawcount].v[1] = t->x[ii][1];

	mov	eax, DWORD PTR _edgeredrawcount
	fld	DWORD PTR [ebx]
	mov	ecx, DWORD PTR _edgeredrawlist
	lea	eax, DWORD PTR [eax+eax*4]
	fstp	DWORD PTR [ecx+eax*8+20]

; 684  :             edgeredrawlist[edgeredrawcount].next = edgeredrawhead[loc_ordinal(v_id)];

	mov	eax, DWORD PTR _edgeredrawcount
	mov	ecx, DWORD PTR _edgeredrawhead
	mov	ecx, DWORD PTR [edx+ecx]
	mov	edi, DWORD PTR _edgeredrawlist
	lea	eax, DWORD PTR [eax+eax*4]
	mov	DWORD PTR [edi+eax*8+28], ecx

; 685  :             edgeredrawlist[edgeredrawcount].etype = t->etype[i];

	mov	eax, DWORD PTR tv4534[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	eax, DWORD PTR _edgeredrawcount
	mov	edi, DWORD PTR _edgeredrawlist
	lea	eax, DWORD PTR [eax+eax*4]
	mov	DWORD PTR [edi+eax*8+32], ecx

; 686  :             edgeredrawlist[edgeredrawcount].color = t->ecolor[i];

	mov	eax, DWORD PTR _edgeredrawcount
	mov	edi, DWORD PTR _edgeredrawlist
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR tv4532[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edi+ecx*8+24], eax

; 687  :             edgeredrawhead[loc_ordinal(v_id)] = edgeredrawcount;

	mov	ecx, DWORD PTR _edgeredrawcount
	mov	eax, DWORD PTR _edgeredrawhead
	mov	DWORD PTR [edx+eax], ecx

; 688  :             edgeredrawcount++;

	mov	edi, DWORD PTR _edgeredrawcount
	inc	edi
	mov	DWORD PTR _edgeredrawcount, edi
	jmp	SHORT $LN48@ps_facet
$LN506@ps_facet:
	fstp	ST(1)

; 668  :       if ( valid_id(v_id) )

	jmp	SHORT $LN522@ps_facet
$LN513@ps_facet:

; 673  :            if ( fabs(t->x[ii][0]-ep->v[0])+fabs(t->x[ii][1]-ep->v[1])
; 674  :                 + fabs(ep->x[0]-fudge*(t->x[i][0]-t->x[ii][0]))
; 675  :                 + fabs(ep->x[1]-fudge*(t->x[i][1]-t->x[ii][1])) < .0001 )

	fstp	ST(3)
	fstp	ST(1)
	fstp	ST(0)
$LN522@ps_facet:
	fstp	ST(0)
$LN48@ps_facet:

; 621  : { 
; 622  :     for ( i = 0 ; i < FACET_VERTS ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR tv4534[ebp]
	add	DWORD PTR tv4532[ebp], 4
	inc	eax
	add	ecx, 2
	add	esi, 12					; 0000000cH
	mov	DWORD PTR _i$[ebp], eax
	mov	DWORD PTR tv4534[ebp], ecx
	cmp	eax, 3
	jl	$LL328@ps_facet
	jmp	SHORT $LN322@ps_facet
$LN393@ps_facet:
	fstp	ST(0)
$LN322@ps_facet:

; 689  :          }
; 690  :       }
; 691  :     }
; 692  : 
; 693  : }
; 694  : 
; 695  :   if ( labelflag>0 )

	mov	eax, DWORD PTR _labelflag
	test	eax, eax
	jle	$LN18@ps_facet

; 701  :           break;
; 702  :         case LABEL_ORIG:
; 703  :           fn = ELNAME(get_original(t->f_id));

	mov	edi, DWORD PTR _t$GSCopy$[ebp]
	xor	ecx, ecx
	dec	eax
	je	SHORT $LN26@ps_facet

; 696  :   { facetedge_id fe;
; 697  :      char * fn=NULL;
; 698  :      switch ( labelflag )

	dec	eax
	jne	SHORT $LN24@ps_facet

; 701  :           break;
; 702  :         case LABEL_ORIG:
; 703  :           fn = ELNAME(get_original(t->f_id));

	mov	eax, DWORD PTR [edi]
	mov	ecx, eax
	shr	ecx, 29					; 0000001dH
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _web[ecx+12]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+20]

; 704  :           break;

	jmp	SHORT $LN525@ps_facet
$LN26@ps_facet:

; 699  :      { case LABEL_ID:
; 700  :           fn = ELNAME(t->f_id);

	mov	eax, DWORD PTR [edi]
$LN525@ps_facet:
	test	eax, 268435456				; 10000000H
	je	SHORT $LN172@ps_facet
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	mov	ecx, OFFSET _elnames
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN282@ps_facet
$LN172@ps_facet:
	mov	ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN282@ps_facet:

; 705  :      }
; 706  :      if ( fn ) fn[5] = 0; 

	mov	BYTE PTR [ecx+5], 0
$LN24@ps_facet:

; 707  :      if ( (t->color != CLEAR) && (t->color != UNSHOWN) && (t->flag&LABEL_FACET) )

	mov	eax, DWORD PTR [edi+4]
	cmp	eax, -1
	je	SHORT $LN22@ps_facet
	cmp	eax, -3					; fffffffdH
	je	SHORT $LN22@ps_facet
	mov	eax, DWORD PTR [edi+28]
	test	eax, 8192				; 00002000H
	je	SHORT $LN22@ps_facet

; 708  :      if ( strlen(fn) > 0 )

	mov	esi, ecx
	lea	ebx, DWORD PTR [esi+1]
$LL315@ps_facet:
	mov	dl, BYTE PTR [esi]
	inc	esi
	test	dl, dl
	jne	SHORT $LL315@ps_facet
	sub	esi, ebx
	je	SHORT $LN22@ps_facet

; 709  :        fprintf(fd," (%c%s) %f %f facenum%d\n",
; 710  :           (t->flag&FLIPPED_FACET)?'+':'-',fn,
; 711  :          (DOUBLE)(t->x[0][0]+t->x[1][0]+t->x[2][0])/3,
; 712  :          (DOUBLE)(t->x[0][1]+t->x[1][1]+t->x[2][1])/3,(int)strlen(fn));

	fld	DWORD PTR [edi+48]
	push	esi
	fadd	DWORD PTR [edi+36]
	sub	esp, 16					; 00000010H
	and	eax, 4096				; 00001000H
	neg	eax
	fadd	DWORD PTR [edi+60]
	sbb	eax, eax
	fld	QWORD PTR __real@4008000000000000
	and	eax, -2					; fffffffeH
	fdiv	ST(1), ST(0)
	add	eax, 45					; 0000002dH
	fxch	ST(1)
	fstp	QWORD PTR [esp+8]
	fld	DWORD PTR [edi+44]
	fadd	DWORD PTR [edi+32]
	fadd	DWORD PTR [edi+56]
	fdivrp	ST(1), ST(0)
	fstp	QWORD PTR [esp]
	push	ecx
	mov	ecx, DWORD PTR _fd
	push	eax
	push	OFFSET ??_C@_0BJ@MIOHOBIH@?5?$CI?$CFc?$CFs?$CJ?5?$CFf?5?$CFf?5facenum?$CFd?6?$AA@
	push	ecx
	call	_fprintf
	add	esp, 36					; 00000024H
$LN22@ps_facet:

; 713  :      fe = get_facet_fe(t->f_id);

	mov	eax, DWORD PTR [edi]
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN199@ps_facet
	xor	esi, esi
	jmp	SHORT $LN198@ps_facet
$LN199@ps_facet:
	mov	ecx, DWORD PTR _web+236
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	esi, DWORD PTR [edx+28]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN198@ps_facet
	xor	esi, 134217728				; 08000000H
$LN198@ps_facet:
	mov	DWORD PTR _fe$89633[ebp], esi

; 714  :      if ( valid_id(fe) )

	test	esi, 268435456				; 10000000H
	je	$LN18@ps_facet

; 715  :      for ( i = 0 ; i < FACET_EDGES ; i++ , fe = get_next_edge(fe) )

	xor	ecx, ecx
	mov	eax, 3
	mov	DWORD PTR _i$[ebp], ecx
	mov	DWORD PTR tv4809[ebp], eax
	npad	3
$LL333@ps_facet:

; 716  :      { edge_id e_id = get_fe_edge(fe);

	mov	ebx, DWORD PTR _web+460
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	add	edx, edx
	add	edx, edx
	mov	ebx, DWORD PTR [edx+ebx]
	mov	DWORD PTR tv3461[ebp], edx
	mov	edx, esi
	and	edx, 134217728				; 08000000H
	xor	edx, DWORD PTR [ebx+20]

; 717  :         char *tv=NULL,*hv=NULL;

	xor	esi, esi

; 718  :         char *en=NULL;
; 719  :         REAL a;
; 720  :         int ii,jj,kk;
; 721  : 
; 722  :         if ( t->flag & FLIPPED_FACET ) 

	test	DWORD PTR [edi+28], 4096		; 00001000H
	mov	DWORD PTR _e_id$89662[ebp], edx
	mov	DWORD PTR _tv$89663[ebp], esi
	mov	DWORD PTR _hv$89665[ebp], esi

; 723  :               { kk = 2 - i; ii = (3-i)%3 ; jj = (5-i)%3; }

	lea	ebx, DWORD PTR [esi+3]
	je	SHORT $LN17@ps_facet
	lea	ecx, DWORD PTR [eax-1]
	cdq
	idiv	ebx
	mov	eax, DWORD PTR tv4809[ebp]
	add	eax, 2
	mov	DWORD PTR _ii$89670[ebp], edx
	jmp	SHORT $LN526@ps_facet
$LN17@ps_facet:

; 724  :         else { kk = i; ii = i; jj = (i+1)%3; }

	mov	DWORD PTR _ii$89670[ebp], ecx
	lea	eax, DWORD PTR [ecx+1]
$LN526@ps_facet:
	cdq
	idiv	ebx

; 725  :         if (t->ecolor[kk] == CLEAR) continue;

	cmp	DWORD PTR [edi+ecx*4+8], -1
	mov	DWORD PTR _jj$89671[ebp], edx
	je	$LN19@ps_facet

; 726  :         if ( (gridflag<0) &&  (((t->etype[kk]&EBITS) == INVISIBLE_EDGE)
; 727  :                                           || (t->etype[kk] & SPLITTING_EDGE)))

	cmp	DWORD PTR _gridflag, esi
	jge	SHORT $LN14@ps_facet
	movzx	eax, WORD PTR [edi+ecx*2+20]
	test	eax, 767				; 000002ffH
	je	$LN19@ps_facet
	test	al, al

; 728  :              continue;

	js	$LN19@ps_facet
$LN14@ps_facet:

; 729  :         switch ( labelflag )

	mov	eax, DWORD PTR _labelflag
	dec	eax
	je	$LN10@ps_facet
	dec	eax
	jne	$LN334@ps_facet

; 734  :              break; 
; 735  :           }
; 736  :           case LABEL_ORIG: 
; 737  :           {  
; 738  :              tv = ELNAME(get_original(get_edge_tailv(e_id)));

	mov	esi, DWORD PTR _e_id$89662[ebp]
	mov	ebx, DWORD PTR _web+216
	mov	edx, esi
	shr	edx, 27					; 0000001bH
	and	edx, 1
	mov	DWORD PTR tv3494[ebp], edx
	je	SHORT $LN225@ps_facet
	mov	eax, DWORD PTR _web+124
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	ecx, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [ebx+eax+304]
	add	ecx, eax
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN224@ps_facet
$LN225@ps_facet:
	mov	ecx, DWORD PTR _web+124
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+ecx]
	mov	ecx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ebx+ecx+304]
	add	ecx, eax
	mov	eax, DWORD PTR [ecx]
$LN224@ps_facet:
	test	edx, edx
	je	SHORT $LN229@ps_facet
	mov	edx, DWORD PTR _web+636
	mov	edx, DWORD PTR [ecx+edx*4]
	jmp	SHORT $LN228@ps_facet
$LN229@ps_facet:
	mov	edx, DWORD PTR [ecx]
$LN228@ps_facet:
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	eax, DWORD PTR _web[eax+12]
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	test	DWORD PTR [edx+20], 268435456		; 10000000H
	je	SHORT $LN182@ps_facet
	mov	edx, DWORD PTR tv3494[ebp]
	test	edx, edx
	je	SHORT $LN233@ps_facet
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN232@ps_facet
$LN233@ps_facet:
	mov	eax, DWORD PTR [ecx]
$LN232@ps_facet:
	test	edx, edx
	je	SHORT $LN237@ps_facet
	mov	edx, DWORD PTR _web+636
	mov	ecx, DWORD PTR [ecx+edx*4]
	jmp	SHORT $LN236@ps_facet
$LN237@ps_facet:
	mov	ecx, DWORD PTR [ecx]
$LN236@ps_facet:
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	eax, DWORD PTR _web[eax+12]
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	edx, DWORD PTR [ecx+20]
	and	edx, 134217727				; 07ffffffH
	inc	edx
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	mov	ebx, DWORD PTR _web+216
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _tv$89663[ebp], OFFSET _elnames
	jmp	SHORT $LN183@ps_facet
$LN182@ps_facet:
	mov	DWORD PTR _tv$89663[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN183@ps_facet:

; 739  :              hv = ELNAME1(get_original(get_edge_headv(e_id)));

	mov	edx, DWORD PTR tv3494[ebp]
	test	edx, edx
	je	SHORT $LN241@ps_facet
	mov	eax, DWORD PTR _web+124
	mov	ecx, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [ebx+eax+304]
	add	ecx, eax
	mov	eax, DWORD PTR [ecx]
	jmp	SHORT $LN240@ps_facet
$LN241@ps_facet:
	mov	ecx, DWORD PTR _web+124
	mov	eax, DWORD PTR [esi+ecx]
	mov	ecx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ebx+ecx+304]
	add	ecx, eax
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [ecx+eax*4]
$LN240@ps_facet:
	test	edx, edx
	je	SHORT $LN245@ps_facet
	mov	edx, DWORD PTR [ecx]
	jmp	SHORT $LN244@ps_facet
$LN245@ps_facet:
	mov	edx, DWORD PTR _web+636
	mov	edx, DWORD PTR [ecx+edx*4]
$LN244@ps_facet:
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	eax, DWORD PTR _web[eax+12]
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	test	DWORD PTR [edx+20], 268435456		; 10000000H
	je	SHORT $LN184@ps_facet
	mov	edx, DWORD PTR tv3494[ebp]
	test	edx, edx
	je	SHORT $LN249@ps_facet
	mov	eax, DWORD PTR [ecx]
	jmp	SHORT $LN248@ps_facet
$LN249@ps_facet:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [ecx+eax*4]
$LN248@ps_facet:
	test	edx, edx
	je	SHORT $LN253@ps_facet
	mov	ecx, DWORD PTR [ecx]
	jmp	SHORT $LN252@ps_facet
$LN253@ps_facet:
	mov	edx, DWORD PTR _web+636
	mov	ecx, DWORD PTR [ecx+edx*4]
$LN252@ps_facet:
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	eax, DWORD PTR _web[eax+12]
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	edx, DWORD PTR [ecx+20]
	and	edx, 134217727				; 07ffffffH
	inc	edx
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames+30
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	ebx, OFFSET _elnames+30
	jmp	SHORT $LN527@ps_facet
$LN184@ps_facet:
	mov	ebx, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN527@ps_facet:

; 740  :              en = ELNAME2(get_original(e_id));

	mov	eax, DWORD PTR _e_id$89662[ebp]
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	ecx, DWORD PTR _web[eax+12]
	mov	edx, DWORD PTR [ecx+esi]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _hv$89665[ebp], ebx
	test	eax, 268435456				; 10000000H
	je	SHORT $LN186@ps_facet
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	jmp	$LN529@ps_facet
$LN186@ps_facet:
	mov	esi, OFFSET ??_C@_00CNPNBAHC@?$AA@

; 741  :              break;

	jmp	$LN181@ps_facet
$LN10@ps_facet:

; 730  :         { case LABEL_ID:
; 731  :           {  tv = ELNAME(get_edge_tailv(e_id));

	mov	eax, DWORD PTR _e_id$89662[ebp]
	mov	edx, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	esi, DWORD PTR _e_id$89662[ebp]
	mov	ebx, DWORD PTR _web+124
	mov	ecx, DWORD PTR [edx+ecx+304]
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR tv3494[ebp], eax
	je	SHORT $LN209@ps_facet
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+esi*4]
	add	eax, ecx
	mov	ecx, DWORD PTR _web+636
	mov	ecx, DWORD PTR [eax+ecx*4]
	jmp	SHORT $LN208@ps_facet
$LN209@ps_facet:
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+esi*4]
	add	eax, ecx
	mov	ecx, DWORD PTR [eax]
$LN208@ps_facet:
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN176@ps_facet
	cmp	DWORD PTR tv3494[ebp], 0
	je	SHORT $LN213@ps_facet
	mov	edx, DWORD PTR _web+636
	mov	eax, DWORD PTR [eax+edx*4]
	jmp	SHORT $LN212@ps_facet
$LN213@ps_facet:
	mov	eax, DWORD PTR [eax]
$LN212@ps_facet:
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	mov	edx, DWORD PTR _web+216
	mov	ebx, DWORD PTR _web+124
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _tv$89663[ebp], OFFSET _elnames
	jmp	SHORT $LN177@ps_facet
$LN176@ps_facet:
	mov	DWORD PTR _tv$89663[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN177@ps_facet:

; 732  :              hv = ELNAME1(get_edge_headv(e_id));

	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [ebx+esi*4]
	mov	edx, DWORD PTR [edx+ecx+304]
	add	eax, edx
	cmp	DWORD PTR tv3494[ebp], 0
	je	SHORT $LN217@ps_facet
	mov	ecx, DWORD PTR [eax]
	jmp	SHORT $LN216@ps_facet
$LN217@ps_facet:
	mov	ecx, DWORD PTR _web+636
	mov	ecx, DWORD PTR [eax+ecx*4]
$LN216@ps_facet:
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN178@ps_facet
	cmp	DWORD PTR tv3494[ebp], 0
	je	SHORT $LN221@ps_facet
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN220@ps_facet
$LN221@ps_facet:
	mov	edx, DWORD PTR _web+636
	mov	eax, DWORD PTR [eax+edx*4]
$LN220@ps_facet:
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames+30
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	ebx, OFFSET _elnames+30
	jmp	SHORT $LN528@ps_facet
$LN178@ps_facet:
	mov	ebx, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN528@ps_facet:

; 733  :              en = ELNAME2(e_id);

	test	DWORD PTR _e_id$89662[ebp], 268435456	; 10000000H
	mov	DWORD PTR _hv$89665[ebp], ebx
	je	$LN186@ps_facet
	inc	esi
	push	esi
$LN529@ps_facet:
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames+60
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	esi, OFFSET _elnames+60
	jmp	SHORT $LN181@ps_facet
$LN334@ps_facet:
	mov	ebx, esi
$LN181@ps_facet:

; 742  :           }
; 743  :         }     
; 744  :         if ( strlen(tv) > 5 ) tv[5] = 0;

	mov	eax, DWORD PTR _tv$89663[ebp]
	lea	edx, DWORD PTR [eax+1]
$LL316@ps_facet:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL316@ps_facet
	sub	eax, edx
	cmp	eax, 5
	jbe	SHORT $LN8@ps_facet
	mov	eax, DWORD PTR _tv$89663[ebp]
	mov	BYTE PTR [eax+5], cl
$LN8@ps_facet:

; 745  :         if ( strlen(hv) > 5 ) hv[5] = 0;

	mov	eax, ebx
	lea	edx, DWORD PTR [eax+1]
$LL317@ps_facet:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL317@ps_facet
	sub	eax, edx
	cmp	eax, 5
	jbe	SHORT $LN7@ps_facet
	mov	BYTE PTR [ebx+5], cl
$LN7@ps_facet:

; 746  :         if ( strlen(en) > 5 ) en[5] = 0; /* max 5 chars in labels */

	mov	eax, esi
	lea	edx, DWORD PTR [eax+1]
$LL318@ps_facet:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL318@ps_facet
	sub	eax, edx
	cmp	eax, 5
	jbe	SHORT $LN6@ps_facet
	mov	BYTE PTR [esi+5], cl
$LN6@ps_facet:

; 747  : 
; 748  :         if ( tv && (strlen(tv) > 0) )

	mov	eax, DWORD PTR _tv$89663[ebp]
	test	eax, eax
	je	SHORT $LN335@ps_facet
	lea	edx, DWORD PTR [eax+1]
$LL319@ps_facet:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL319@ps_facet
	sub	eax, edx
	je	SHORT $LN335@ps_facet

; 749  :         fprintf(fd,"(%s) %f %f vertex%1d\n",tv,(DOUBLE)t->x[ii][0],
; 750  :                 (DOUBLE)t->x[ii][1],(int)strlen(tv));

	mov	ebx, DWORD PTR _ii$89670[ebp]
	push	eax
	mov	eax, DWORD PTR _tv$89663[ebp]
	sub	esp, 16					; 00000010H
	lea	ecx, DWORD PTR [ebx+ebx*2+9]
	fld	DWORD PTR [edi+ecx*4]
	mov	ecx, DWORD PTR _fd
	fstp	QWORD PTR [esp+8]
	lea	edx, DWORD PTR [ebx+ebx*2]
	fld	DWORD PTR [edi+edx*4+32]
	fstp	QWORD PTR [esp]
	push	eax
	push	OFFSET ??_C@_0BG@GDJNKKPK@?$CI?$CFs?$CJ?5?$CFf?5?$CFf?5vertex?$CF1d?6?$AA@
	push	ecx
	call	_fprintf
	add	esp, 32					; 00000020H
	jmp	SHORT $LN5@ps_facet
$LN335@ps_facet:
	mov	ebx, DWORD PTR _ii$89670[ebp]
$LN5@ps_facet:

; 751  :         if ( hv && (strlen(hv) > 0) )

	mov	eax, DWORD PTR _hv$89665[ebp]
	test	eax, eax
	je	SHORT $LN339@ps_facet
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL320@ps_facet:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL320@ps_facet
	sub	eax, edx
	je	SHORT $LN339@ps_facet

; 752  :         fprintf(fd,"(%s) %f %f vertex%1d\n",hv,(DOUBLE)t->x[jj][0],
; 753  :                 (DOUBLE)t->x[jj][1],(int)strlen(hv));

	mov	ecx, DWORD PTR _hv$89665[ebp]
	push	eax
	mov	eax, DWORD PTR _jj$89671[ebp]
	lea	edx, DWORD PTR [eax+eax*2+9]
	fld	DWORD PTR [edi+edx*4]
	mov	edx, DWORD PTR _fd
	sub	esp, 16					; 00000010H
	fstp	QWORD PTR [esp+8]
	lea	eax, DWORD PTR [eax+eax*2]
	fld	DWORD PTR [edi+eax*4+32]
	fstp	QWORD PTR [esp]
	push	ecx
	push	OFFSET ??_C@_0BG@GDJNKKPK@?$CI?$CFs?$CJ?5?$CFf?5?$CFf?5vertex?$CF1d?6?$AA@
	push	edx
	call	_fprintf
	add	esp, 32					; 00000020H
$LN339@ps_facet:

; 754  : 
; 755  :         a = .35;
; 756  :         if ( en && (strlen(en) > 0) )

	test	esi, esi
	je	$LN19@ps_facet
	mov	eax, esi
	lea	edx, DWORD PTR [eax+1]
$LL321@ps_facet:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL321@ps_facet
	sub	eax, edx
	je	$LN19@ps_facet

; 757  :         { 
; 758  :           if ( inverted(e_id) )
; 759  :            fprintf(fd," (%s) %f %f edgenum%1d\n",en,
; 760  :             (DOUBLE)((1-a)*t->x[ii][0]+a*t->x[jj][0]),
; 761  :             (DOUBLE)((1-a)*t->x[ii][1]+a*t->x[jj][1]),(int)strlen(en));

	push	eax
	sub	esp, 16					; 00000010H
	test	DWORD PTR _e_id$89662[ebp], 134217728	; 08000000H
	je	SHORT $LN2@ps_facet
	lea	eax, DWORD PTR [ebx+ebx*2+9]
	fld	DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR _jj$89671[ebp]
	lea	ecx, DWORD PTR [eax+eax*2+9]
	lea	edx, DWORD PTR [ebx+ebx*2]
	lea	eax, DWORD PTR [eax+eax*2]

; 762  :           else

	jmp	SHORT $LN530@ps_facet
$LN2@ps_facet:

; 763  :            fprintf(fd," (%s) %f %f edgenum%1d\n",en,
; 764  :             (DOUBLE)(a*t->x[ii][0]+(1-a)*t->x[jj][0]),
; 765  :             (DOUBLE)(a*t->x[ii][1]+(1-a)*t->x[jj][1]),(int)strlen(en));

	mov	eax, DWORD PTR _jj$89671[ebp]
	lea	edx, DWORD PTR [eax+eax*2+9]
	fld	DWORD PTR [edi+edx*4]
	lea	edx, DWORD PTR [eax+eax*2]
	lea	ecx, DWORD PTR [ebx+ebx*2+9]
	lea	eax, DWORD PTR [ebx+ebx*2]
$LN530@ps_facet:
	fld	QWORD PTR __real@3fe4cccccccccccd
	fmul	ST(1), ST(0)
	fld	DWORD PTR [edi+ecx*4]
	mov	ecx, DWORD PTR _fd
	fld	QWORD PTR __real@3fd6666666666666
	fmul	ST(1), ST(0)
	fxch	ST(3)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [esp+8]
	fmul	DWORD PTR [edi+edx*4+32]
	fld	DWORD PTR [edi+eax*4+32]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [esp]
	push	esi
	push	OFFSET ??_C@_0BI@LMCLFPAB@?5?$CI?$CFs?$CJ?5?$CFf?5?$CFf?5edgenum?$CF1d?6?$AA@
	push	ecx
	call	_fprintf
	add	esp, 32					; 00000020H
$LN19@ps_facet:

; 715  :      for ( i = 0 ; i < FACET_EDGES ; i++ , fe = get_next_edge(fe) )

	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR tv4809[ebp]
	mov	edx, DWORD PTR tv3461[ebp]
	mov	esi, DWORD PTR _web+460
	mov	edx, DWORD PTR [edx+esi]
	inc	ecx
	dec	eax
	test	DWORD PTR _fe$89633[ebp], 134217728	; 08000000H
	mov	DWORD PTR _i$[ebp], ecx
	mov	DWORD PTR tv4809[ebp], eax
	je	SHORT $LN203@ps_facet
	mov	esi, DWORD PTR [edx+28]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN531@ps_facet
$LN203@ps_facet:
	mov	esi, DWORD PTR [edx+32]
$LN531@ps_facet:
	mov	DWORD PTR _fe$89633[ebp], esi
	test	eax, eax
	jg	$LL333@ps_facet
$LN18@ps_facet:

; 766  :         }
; 767  : 
; 768  :      }
; 769  :   }
; 770  : } // end ps_facet()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_ps_facet ENDP
_TEXT	ENDS
PUBLIC	??_C@_06HFOLCEJF@?$CF?$CFEOF?6?$AA@		; `string'
PUBLIC	??_C@_0M@BBPALKJP@?6showpage?6?6?$AA@		; `string'
PUBLIC	??_C@_02HAOIJKIC@?$CFc?$AA@			; `string'
PUBLIC	??_C@_02CBFOGONC@?2?$CJ?$AA@			; `string'
PUBLIC	??_C@_02DIEFFPJD@?2?$CI?$AA@			; `string'
PUBLIC	??_C@_02HDBGODGB@?2?2?$AA@			; `string'
PUBLIC	??_C@_02COELENML@?2t?$AA@			; `string'
PUBLIC	??_C@_07FPLJFCJO@?$CJ?5show?6?$AA@		; `string'
PUBLIC	??_C@_0P@FKMAOGCI@?$CFf?5?$CFf?5moveto?5?$CI?$AA@ ; `string'
PUBLIC	??_C@_0L@OPLAEFG@0?5setgray?6?$AA@		; `string'
PUBLIC	??_C@_0CL@FNHEEBK@?6?1Helvetica?5findfont?5?$CFf?5scalefon@ ; `string'
PUBLIC	_ps_finish
EXTRN	_temp_free:PROC
EXTRN	_fclose:PROC
;	COMDAT ??_C@_06HFOLCEJF@?$CF?$CFEOF?6?$AA@
CONST	SEGMENT
??_C@_06HFOLCEJF@?$CF?$CFEOF?6?$AA@ DB '%%EOF', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BBPALKJP@?6showpage?6?6?$AA@
CONST	SEGMENT
??_C@_0M@BBPALKJP@?6showpage?6?6?$AA@ DB 0aH, 'showpage', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02HAOIJKIC@?$CFc?$AA@
CONST	SEGMENT
??_C@_02HAOIJKIC@?$CFc?$AA@ DB '%c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02CBFOGONC@?2?$CJ?$AA@
CONST	SEGMENT
??_C@_02CBFOGONC@?2?$CJ?$AA@ DB '\)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DIEFFPJD@?2?$CI?$AA@
CONST	SEGMENT
??_C@_02DIEFFPJD@?2?$CI?$AA@ DB '\(', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02HDBGODGB@?2?2?$AA@
CONST	SEGMENT
??_C@_02HDBGODGB@?2?2?$AA@ DB '\\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02COELENML@?2t?$AA@
CONST	SEGMENT
??_C@_02COELENML@?2t?$AA@ DB '\t', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07FPLJFCJO@?$CJ?5show?6?$AA@
CONST	SEGMENT
??_C@_07FPLJFCJO@?$CJ?5show?6?$AA@ DB ') show', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FKMAOGCI@?$CFf?5?$CFf?5moveto?5?$CI?$AA@
CONST	SEGMENT
??_C@_0P@FKMAOGCI@?$CFf?5?$CFf?5moveto?5?$CI?$AA@ DB '%f %f moveto (', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OPLAEFG@0?5setgray?6?$AA@
CONST	SEGMENT
??_C@_0L@OPLAEFG@0?5setgray?6?$AA@ DB '0 setgray', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@FNHEEBK@?6?1Helvetica?5findfont?5?$CFf?5scalefon@
CONST	SEGMENT
??_C@_0CL@FNHEEBK@?6?1Helvetica?5findfont?5?$CFf?5scalefon@ DB 0aH, '/Hel'
	DB	'vetica findfont %f scalefont setfont', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _ps_finish
_TEXT	SEGMENT
_line_ht$89739 = -24					; size = 8
_xspot$89737 = -16					; size = 8
_yspot$89738 = -8					; size = 8
_ps_finish PROC						; COMDAT

; 788  : { int i;

	push	ebp
	mov	ebp, esp

; 789  : 
; 790  :  
; 791  :   /* do text */
; 792  :   for ( i = 0 ; i < MAXTEXTS ; i++ )

	fld	QWORD PTR __real@4006666666666666
	sub	esp, 24					; 00000018H
	fld	QWORD PTR __real@3ff6666666666666
	push	esi
	push	edi
	mov	edi, OFFSET _text_chunks+16
$LN15@ps_finish:

; 793  :   {
; 794  :     if ( text_chunks[i].text )

	cmp	DWORD PTR [edi-16], 0
	je	$LN14@ps_finish

; 795  :     { char *c;
; 796  :       REAL xspot = -1.4+2.8*text_chunks[i].start_x;

	fld	QWORD PTR [edi-8]

; 797  :       REAL yspot = -1.4+2.8*text_chunks[i].start_y;
; 798  :       REAL line_ht = 1.3*text_chunks[i].vsize*2.8; // 1.3 fudge factor for helvetica vs glut font
; 799  : 
; 800  :       fprintf(fd,"\n/Helvetica findfont %f scalefont setfont\n",line_ht);

	mov	eax, DWORD PTR _fd
	fmul	ST(0), ST(2)
	sub	esp, 8
	fsub	ST(0), ST(1)
	fstp	QWORD PTR _xspot$89737[ebp]
	fld	QWORD PTR [edi]
	fmul	ST(0), ST(2)
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR _yspot$89738[ebp]
	fld	QWORD PTR [edi+8]
	fmul	QWORD PTR __real@3ff4cccccccccccd
	fmulp	ST(1), ST(0)
	fst	QWORD PTR _line_ht$89739[ebp]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CL@FNHEEBK@?6?1Helvetica?5findfont?5?$CFf?5scalefon@
	push	eax
	call	_fprintf

; 801  :       fputs("0 setgray\n",fd);

	mov	ecx, DWORD PTR _fd
	push	ecx
	push	OFFSET ??_C@_0L@OPLAEFG@0?5setgray?6?$AA@
	call	_fputs

; 802  :       fprintf(fd,"%f %f moveto (",(DOUBLE)xspot,(DOUBLE)yspot);

	fld	QWORD PTR _yspot$89738[ebp]
	mov	edx, DWORD PTR _fd
	fstp	QWORD PTR [esp+16]
	fld	QWORD PTR _xspot$89737[ebp]
	add	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0P@FKMAOGCI@?$CFf?5?$CFf?5moveto?5?$CI?$AA@
	push	edx
	call	_fprintf

; 803  :       for ( c = text_chunks[i].text ; *c ; c++ )

	mov	esi, DWORD PTR [edi-16]
	mov	al, BYTE PTR [esi]
	add	esp, 24					; 00000018H
	test	al, al
	je	$LN9@ps_finish
	npad	4
$LL11@ps_finish:

; 804  :       { switch ( *c )

	movsx	eax, al
	lea	ecx, DWORD PTR [eax-9]
	cmp	ecx, 83					; 00000053H
	ja	$LN1@ps_finish
	movzx	ecx, BYTE PTR $LN22@ps_finish[ecx]
	jmp	DWORD PTR $LN29@ps_finish[ecx*4]
$LN6@ps_finish:

; 805  :         { case '\n':
; 806  :             fprintf(fd,") show\n");

	mov	edx, DWORD PTR _fd
	push	OFFSET ??_C@_07FPLJFCJO@?$CJ?5show?6?$AA@
	push	edx
	call	_fprintf

; 807  :             yspot -= line_ht;

	fld	QWORD PTR _yspot$89738[ebp]
	fsub	QWORD PTR _line_ht$89739[ebp]

; 808  :             fprintf(fd,"%f %f moveto (",(DOUBLE)xspot,(DOUBLE)yspot);

	mov	eax, DWORD PTR _fd
	sub	esp, 8
	fst	QWORD PTR _yspot$89738[ebp]
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR _xspot$89737[ebp]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0P@FKMAOGCI@?$CFf?5?$CFf?5moveto?5?$CI?$AA@
	push	eax
	call	_fprintf
	add	esp, 24					; 00000018H

; 809  :             break;

	jmp	SHORT $LN10@ps_finish
$LN5@ps_finish:

; 810  :           case '\t':
; 811  :             fprintf(fd,"\\t");

	mov	ecx, DWORD PTR _fd
	push	OFFSET ??_C@_02COELENML@?2t?$AA@
	push	ecx
	call	_fprintf
	add	esp, 8

; 812  :             break;

	jmp	SHORT $LN10@ps_finish
$LN4@ps_finish:

; 813  :           case '\\': 
; 814  :             fprintf(fd,"\\\\");

	mov	edx, DWORD PTR _fd
	push	OFFSET ??_C@_02HDBGODGB@?2?2?$AA@
	push	edx
	call	_fprintf
	add	esp, 8

; 815  :             break;

	jmp	SHORT $LN10@ps_finish
$LN3@ps_finish:

; 816  :           case '(':
; 817  :             fprintf(fd,"\\(");

	mov	eax, DWORD PTR _fd
	push	OFFSET ??_C@_02DIEFFPJD@?2?$CI?$AA@
	push	eax
	call	_fprintf
	add	esp, 8

; 818  :             break;

	jmp	SHORT $LN10@ps_finish
$LN2@ps_finish:

; 819  :           case ')':
; 820  :             fprintf(fd,"\\)");

	mov	ecx, DWORD PTR _fd
	push	OFFSET ??_C@_02CBFOGONC@?2?$CJ?$AA@
	push	ecx
	call	_fprintf
	add	esp, 8

; 821  :             break;

	jmp	SHORT $LN10@ps_finish
$LN1@ps_finish:

; 822  :           default: 
; 823  :             fprintf(fd,"%c",*c);

	mov	edx, DWORD PTR _fd
	push	eax
	push	OFFSET ??_C@_02HAOIJKIC@?$CFc?$AA@
	push	edx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN10@ps_finish:

; 803  :       for ( c = text_chunks[i].text ; *c ; c++ )

	mov	al, BYTE PTR [esi+1]
	inc	esi
	test	al, al
	jne	$LL11@ps_finish
$LN9@ps_finish:

; 824  :         }
; 825  :       }
; 826  :       fprintf(fd,") show\n");

	mov	eax, DWORD PTR _fd
	push	OFFSET ??_C@_07FPLJFCJO@?$CJ?5show?6?$AA@
	push	eax
	call	_fprintf
	fld	QWORD PTR __real@4006666666666666
	fld	QWORD PTR __real@3ff6666666666666
	add	esp, 8
$LN14@ps_finish:

; 789  : 
; 790  :  
; 791  :   /* do text */
; 792  :   for ( i = 0 ; i < MAXTEXTS ; i++ )

	add	edi, 32					; 00000020H
	cmp	edi, OFFSET _text_chunks+3216
	jl	$LN15@ps_finish

; 827  :     }
; 828  :   }
; 829  : 
; 830  :   fputs("\nshowpage\n\n",fd);

	mov	ecx, DWORD PTR _fd
	fstp	ST(1)
	push	ecx
	fstp	ST(0)
	push	OFFSET ??_C@_0M@BBPALKJP@?6showpage?6?6?$AA@
	call	_fputs

; 831  :   fputs("%%EOF\n",fd);

	mov	edx, DWORD PTR _fd
	push	edx
	push	OFFSET ??_C@_06HFOLCEJF@?$CF?$CFEOF?6?$AA@
	call	_fputs

; 832  :   fclose(fd);

	mov	eax, DWORD PTR _fd
	push	eax
	call	_fclose

; 833  :   ps_file_name[0] = 0;
; 834  :   temp_free((char*)edgeredrawhead);

	mov	ecx, DWORD PTR _edgeredrawhead
	push	ecx
	mov	BYTE PTR _ps_file_name, 0
	call	_temp_free

; 835  :   temp_free((char*)edgeredrawlist);

	mov	edx, DWORD PTR _edgeredrawlist
	push	edx
	call	_temp_free
	add	esp, 28					; 0000001cH
	pop	edi
	pop	esi

; 836  : } // end ps_finish()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN29@ps_finish:
	DD	$LN5@ps_finish
	DD	$LN6@ps_finish
	DD	$LN3@ps_finish
	DD	$LN2@ps_finish
	DD	$LN4@ps_finish
	DD	$LN1@ps_finish
$LN22@ps_finish:
	DB	0
	DB	1
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	2
	DB	3
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	4
_ps_finish ENDP
_TEXT	ENDS
END
