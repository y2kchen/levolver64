; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\LAGRANGE.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_e_info$GSCopy$
PUBLIC	__real@0000000000000000
PUBLIC	__$ArrayPad$
PUBLIC	_lagrange_edge_tension_value
EXTRN	_binary_tree_add:PROC
EXTRN	_proc_total_area:BYTE
EXTRN	_win_get_thread_data:PROC
EXTRN	_thread_data_key:DWORD
EXTRN	_nprocs:DWORD
EXTRN	_meth_inst_list:DWORD
EXTRN	_factorial:BYTE
EXTRN	_det_adjoint:PROC
EXTRN	_dot:PROC
EXTRN	_mat2d_setup:PROC
EXTRN	_gauss_lagrange:BYTE
EXTRN	_web:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CIsqrt:PROC
;	COMDAT __real@0000000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\lagrange.c
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _lagrange_edge_tension_value
_TEXT	SEGMENT
_matqXvS$ = -352					; size = 24
_gl$ = -328						; size = 4
_e_info$GSCopy$ = -324					; size = 4
tv406 = -320						; size = 4
_m$ = -316						; size = 4
_value$ = -312						; size = 8
_dim$ = -304						; size = 4
_mat$ = -300						; size = 4
tv430 = -296						; size = 4
_matxJ$ = -292						; size = 288
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_lagrange_edge_tension_value PROC			; COMDAT

; 36   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 352				; 00000160H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 37   :   REAL value = 0.0;

	fldz

; 65   :       value *= get_edge_density(e_info->id);

	mov	eax, DWORD PTR _e_info$[ebp]
	push	ebx
	fstp	QWORD PTR _value$[ebp]
	push	esi
	push	edi
	mov	edi, 1
	mov	DWORD PTR _e_info$GSCopy$[ebp], eax
	cmp	DWORD PTR _web+624, edi
	jne	SHORT $LN16@lagrange_e

; 38   :   int m,i,j;
; 39   :   REAL det;
; 40   :   REAL **tang;
; 41   :   int dim = (web.representation==STRING) ? 1 : web.dimension-1;

	mov	DWORD PTR _dim$[ebp], edi
	jmp	SHORT $LN17@lagrange_e
$LN16@lagrange_e:
	mov	ecx, DWORD PTR _web+620
	dec	ecx
	mov	DWORD PTR _dim$[ebp], ecx
	mov	edi, ecx
$LN17@lagrange_e:

; 42   :   struct gauss_lag *gl = &gauss_lagrange[dim][web.gauss1D_order];

	mov	ebx, DWORD PTR _web+1592

; 43   :   MAT2D(mat,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	edx, DWORD PTR _matxJ$[ebp]
	shl	ebx, 5
	add	ebx, DWORD PTR _gauss_lagrange[edi*4]
	push	edx
	lea	eax, DWORD PTR _matqXvS$[ebp]
	push	eax
	mov	DWORD PTR _gl$[ebp], ebx
	call	_mat2d_setup

; 44   :      
; 45   :   for ( m = 0 ; m < gl->gnumpts ; m++ )  /*  integration point number */

	xor	esi, esi
	add	esp, 16					; 00000010H
	mov	ecx, eax
	mov	DWORD PTR _mat$[ebp], ecx
	mov	DWORD PTR _m$[ebp], esi
	cmp	DWORD PTR [ebx+4], esi
	jle	$LN25@lagrange_e
	jmp	SHORT $LN13@lagrange_e
	npad	10
$LL27@lagrange_e:
	mov	ecx, DWORD PTR _mat$[ebp]
$LN13@lagrange_e:

; 46   :   { tang = e_info->sides[m];

	mov	edx, DWORD PTR _e_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [edx+1276]
	mov	eax, DWORD PTR [eax+esi*4]

; 47   :      for ( i = 0 ; i < dim ; i++ )

	xor	ebx, ebx
	test	edi, edi
	jle	SHORT $LN8@lagrange_e
	sub	eax, ecx
	mov	DWORD PTR tv430[ebp], ecx
	mov	DWORD PTR tv406[ebp], eax
	npad	7
$LL28@lagrange_e:

; 48   :         for ( j = 0 ; j <= i ; j++ )

	xor	esi, esi
	test	ebx, ebx
	js	SHORT $LN9@lagrange_e
	mov	edi, DWORD PTR _mat$[ebp]
	npad	4
$LL26@lagrange_e:

; 49   :           mat[i][j] = mat[j][i] = SDIM_dot(tang[i],tang[j]);

	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR [eax+edi]
	push	ecx
	mov	ecx, DWORD PTR tv430[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_dot
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR tv430[ebp]
	fst	QWORD PTR [eax+ebx*8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR tv406[ebp]
	fstp	QWORD PTR [edx+esi*8]
	inc	esi
	add	esp, 12					; 0000000cH
	add	edi, 4
	cmp	esi, ebx
	jle	SHORT $LL26@lagrange_e

; 48   :         for ( j = 0 ; j <= i ; j++ )

	mov	edi, DWORD PTR _dim$[ebp]
$LN9@lagrange_e:

; 47   :      for ( i = 0 ; i < dim ; i++ )

	add	DWORD PTR tv430[ebp], 4
	inc	ebx
	cmp	ebx, edi
	jl	SHORT $LL28@lagrange_e
	mov	esi, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
$LN8@lagrange_e:

; 50   :      det = det_adjoint(mat,dim);

	push	edi
	push	ecx
	call	_det_adjoint
	add	esp, 8

; 51   :      value += gl->gausswt[m]*sqrt(det);

	call	__CIsqrt
	mov	eax, DWORD PTR _gl$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	fmul	QWORD PTR [ecx+esi*8]
	inc	esi
	mov	DWORD PTR _m$[ebp], esi
	fadd	QWORD PTR _value$[ebp]
	fstp	QWORD PTR _value$[ebp]
	cmp	esi, DWORD PTR [eax+4]
	jl	$LL27@lagrange_e
$LN25@lagrange_e:

; 52   :   }
; 53   : 
; 54   :   value /= factorial[dim]; /* triangle factor */

	fld	QWORD PTR _value$[ebp]

; 55   :   if ( METH_INSTANCE(e_info->method)->flags & DEFAULT_INSTANCE )

	mov	esi, DWORD PTR _e_info$GSCopy$[ebp]
	fdiv	QWORD PTR _factorial[edi*8]
	mov	eax, DWORD PTR [esi+8]
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	edx, DWORD PTR _meth_inst_list
	imul	eax, 2928				; 00000b70H
	fst	QWORD PTR _value$[ebp]
	test	DWORD PTR [eax+edx+140], 4194304	; 00400000H
	je	SHORT $LN2@lagrange_e

; 56   :   { set_edge_length(e_info->id,value);

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR _web+124
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fst	QWORD PTR [edx+48]

; 57   : #ifdef SHARED_MEMORY
; 58   :      if ( nprocs > 1 ) 

	cmp	DWORD PTR _nprocs, 1
	jle	SHORT $LN3@lagrange_e

; 59   :       proc_total_area[GET_THREAD_ID] += value;

	mov	eax, DWORD PTR _thread_data_key
	fstp	ST(0)
	push	eax
	call	_win_get_thread_data
	mov	eax, DWORD PTR [eax]
	fld	QWORD PTR _proc_total_area[eax*8]
	add	esp, 4
	fld	QWORD PTR _value$[ebp]
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _proc_total_area[eax*8]

; 60   :      else

	jmp	SHORT $LN2@lagrange_e
$LN3@lagrange_e:

; 61   : #endif
; 62   :      binary_tree_add(web.total_area_addends,value);

	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET _web+1000
	call	_binary_tree_add
	fld	QWORD PTR _value$[ebp]
	add	esp, 12					; 0000000cH
$LN2@lagrange_e:

; 63   :   }
; 64   :   if ( METH_INSTANCE(e_info->method)->flags & USE_DENSITY )

	mov	eax, DWORD PTR [esi+8]
	mov	ecx, DWORD PTR _meth_inst_list
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	test	DWORD PTR [eax+ecx+140], 536870912	; 20000000H
	je	SHORT $LN1@lagrange_e

; 65   :       value *= get_edge_density(e_info->id);

	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR _web+124
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	fmul	QWORD PTR [ecx+40]
$LN1@lagrange_e:

; 66   :   return value;
; 67   : 
; 68   : } // end lagrange_edge_tension_value()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_lagrange_edge_tension_value ENDP
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	_e_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_lagrange_edge_tension_grad
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _lagrange_edge_tension_grad
_TEXT	SEGMENT
_matqXvS$ = -376					; size = 24
_density$ = -352					; size = 8
_tang$89084 = -344					; size = 4
_value$ = -340						; size = 8
tv1191 = -332						; size = 4
_e_info$GSCopy$ = -328					; size = 4
tv68 = -324						; size = 4
tv1215 = -320						; size = 4
_ii$ = -320						; size = 4
_mat$ = -316						; size = 4
tv693 = -312						; size = 4
_gl$ = -308						; size = 4
_m$ = -304						; size = 4
tv717 = -300						; size = 4
_j$ = -300						; size = 4
_dim$ = -296						; size = 4
_matxJ$ = -292						; size = 288
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_lagrange_edge_tension_grad PROC			; COMDAT

; 77   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 78   :   REAL value = 0.0;

	fldz
	push	ebx
	push	esi
	fstp	QWORD PTR _value$[ebp]
	mov	esi, DWORD PTR _e_info$[ebp]

; 79   :   int i,ii,m,j,k;
; 80   :   REAL det;
; 81   :   REAL density,fudge;
; 82   :   int dim = (web.representation==STRING) ? 1 : web.dimension-1;

	mov	ebx, 1
	push	edi

; 105  :                 sum += tang[i][j]*gl->gpolypart[m][ii][k]*mat[i][ii];

	mov	DWORD PTR _e_info$GSCopy$[ebp], esi
	cmp	DWORD PTR _web+624, ebx
	jne	SHORT $LN26@lagrange_e@2

; 79   :   int i,ii,m,j,k;
; 80   :   REAL det;
; 81   :   REAL density,fudge;
; 82   :   int dim = (web.representation==STRING) ? 1 : web.dimension-1;

	mov	DWORD PTR _dim$[ebp], ebx
	jmp	SHORT $LN27@lagrange_e@2
$LN26@lagrange_e@2:
	mov	eax, DWORD PTR _web+620
	dec	eax
	mov	DWORD PTR _dim$[ebp], eax
	mov	ebx, eax
$LN27@lagrange_e@2:

; 83   :   struct gauss_lag *gl = &gauss_lagrange[dim][web.gauss1D_order];

	mov	edi, DWORD PTR _web+1592

; 84   :   MAT2D(mat,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	ecx, DWORD PTR _matxJ$[ebp]
	shl	edi, 5
	add	edi, DWORD PTR _gauss_lagrange[ebx*4]
	push	ecx
	lea	edx, DWORD PTR _matqXvS$[ebp]
	push	edx
	mov	DWORD PTR _gl$[ebp], edi
	call	_mat2d_setup
	mov	ecx, eax

; 85   : 
; 86   :   if ( METH_INSTANCE(e_info->method)->flags & USE_DENSITY )

	mov	eax, DWORD PTR [esi+8]
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	edx, DWORD PTR _meth_inst_list
	imul	eax, 2928				; 00000b70H
	add	esp, 16					; 00000010H
	test	DWORD PTR [eax+edx+140], 536870912	; 20000000H
	mov	DWORD PTR _mat$[ebp], ecx
	je	SHORT $LN23@lagrange_e@2

; 87   :       density = get_edge_density(e_info->id);

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR _web+124
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [eax+40]
	jmp	SHORT $LN86@lagrange_e@2
$LN23@lagrange_e@2:

; 88   :   else density = 1.0;

	fld1
$LN86@lagrange_e@2:

; 89   : 
; 90   :   for ( m = 0 ; m < gl->gnumpts ; m++ )  /*  integration point number */

	cmp	DWORD PTR [edi+4], 0
	fst	QWORD PTR _density$[ebp]
	mov	DWORD PTR _m$[ebp], 0
	jle	$LN47@lagrange_e@2
	jmp	SHORT $LN87@lagrange_e@2
	npad	10
$LL85@lagrange_e@2:
	mov	ecx, DWORD PTR _mat$[ebp]
	mov	edi, DWORD PTR _gl$[ebp]
	mov	esi, DWORD PTR _e_info$GSCopy$[ebp]
$LN87@lagrange_e@2:

; 91   :   { REAL **tang = e_info->sides[m];

	mov	edx, DWORD PTR [esi+1276]

; 101  :         for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(0)
	mov	eax, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	xor	esi, esi
	mov	DWORD PTR _tang$89084[ebp], eax
	test	ebx, ebx
	jle	SHORT $LN16@lagrange_e@2

; 91   :   { REAL **tang = e_info->sides[m];

	sub	eax, ecx
	mov	DWORD PTR tv717[ebp], ecx

; 92   :      /* calculate tangents and det */ 
; 93   :      for ( i = 0 ; i < dim ; i++ )

	mov	DWORD PTR tv693[ebp], eax
	npad	3
$LL51@lagrange_e@2:

; 94   :         for ( j = 0 ; j <= i ; j++ )

	xor	edi, edi
	test	esi, esi
	js	SHORT $LN17@lagrange_e@2
	mov	ebx, ecx
	npad	8
$LL15@lagrange_e@2:

; 95   :           mat[i][j] = mat[j][i] = SDIM_dot(tang[i],tang[j]);

	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR [eax+ebx]
	push	ecx
	mov	ecx, DWORD PTR tv717[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_dot
	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR tv717[ebp]
	fst	QWORD PTR [eax+esi*8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR tv693[ebp]
	fstp	QWORD PTR [edx+edi*8]
	inc	edi
	add	esp, 12					; 0000000cH
	add	ebx, 4
	cmp	edi, esi
	jle	SHORT $LL15@lagrange_e@2

; 94   :         for ( j = 0 ; j <= i ; j++ )

	mov	ebx, DWORD PTR _dim$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
$LN17@lagrange_e@2:

; 92   :      /* calculate tangents and det */ 
; 93   :      for ( i = 0 ; i < dim ; i++ )

	add	DWORD PTR tv717[ebp], 4
	inc	esi
	cmp	esi, ebx
	jl	SHORT $LL51@lagrange_e@2
	mov	edi, DWORD PTR _gl$[ebp]
$LN16@lagrange_e@2:

; 96   :      det = det_adjoint(mat,dim);

	push	ebx
	push	ecx
	call	_det_adjoint
	add	esp, 8

; 97   :      value += gl->gausswt[m]*sqrt(det);

	call	__CIsqrt
	mov	eax, DWORD PTR [edi+12]
	mov	ecx, DWORD PTR _m$[ebp]
	fld	QWORD PTR [eax+ecx*8]
	lea	eax, DWORD PTR [eax+ecx*8]
	fmul	ST(0), ST(1)

; 98   :      /* gradients */
; 99   :      fudge = density*gl->gausswt[m]/sqrt(det)/factorial[dim];
; 100  :      for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	ecx, DWORD PTR _gl$[ebp]
	xor	edi, edi
	fadd	QWORD PTR _value$[ebp]
	fstp	QWORD PTR _value$[ebp]
	fld	QWORD PTR [eax]
	fld	QWORD PTR _density$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fdivrp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	QWORD PTR _factorial[ebx*8]
	cmp	DWORD PTR [ecx+16], edi
	jle	$LN59@lagrange_e@2
	fldz
$LN53@lagrange_e@2:

; 101  :         for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	DWORD PTR _web+616, eax
	jle	$LN11@lagrange_e@2
$LN52@lagrange_e@2:

; 102  :         { REAL sum = 0.0;

	fld	ST(0)

; 103  :           for ( i = 0 ; i < dim ; i++ )

	test	ebx, ebx
	jle	$LN4@lagrange_e@2
	mov	ecx, DWORD PTR _mat$[ebp]
	mov	edx, DWORD PTR _tang$89084[ebp]
	sub	edx, ecx
	mov	DWORD PTR tv1191[ebp], ecx
	mov	DWORD PTR tv693[ebp], edx
	mov	DWORD PTR tv68[ebp], ebx
$LN49@lagrange_e@2:

; 104  :              for ( ii = 0 ; ii < dim ; ii++ )

	xor	ebx, ebx
	cmp	DWORD PTR _dim$[ebp], 4
	jl	$LC43@lagrange_e@2
	mov	edx, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR [ecx]
	lea	esi, DWORD PTR [edx+eax*8]
	mov	eax, DWORD PTR _gl$[ebp]
	mov	edx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dim$[ebp]
	add	edx, -4					; fffffffcH
	shr	edx, 2
	add	ecx, 16					; 00000010H
	add	eax, 8
	inc	edx
	lea	ebx, DWORD PTR [edx*4]
	mov	DWORD PTR _ii$[ebp], ebx
$LN44@lagrange_e@2:

; 105  :                 sum += tang[i][j]*gl->gpolypart[m][ii][k]*mat[i][ii];

	mov	ebx, DWORD PTR [eax-8]
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR [eax-4]
	fmul	QWORD PTR [esi]
	add	eax, 16					; 00000010H
	add	ecx, 32					; 00000020H
	dec	edx
	fmul	QWORD PTR [ecx-48]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR [eax-16]
	fmul	QWORD PTR [esi]
	fmul	QWORD PTR [ecx-40]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR [eax-12]
	fmul	QWORD PTR [esi]
	fmul	QWORD PTR [ecx-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+edi*8]
	fmul	QWORD PTR [esi]
	fmul	QWORD PTR [ecx-24]
	faddp	ST(1), ST(0)
	jne	SHORT $LN44@lagrange_e@2

; 104  :              for ( ii = 0 ; ii < dim ; ii++ )

	mov	ebx, DWORD PTR _ii$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR tv693[ebp]
	mov	ecx, DWORD PTR tv1191[ebp]
$LC43@lagrange_e@2:
	cmp	ebx, DWORD PTR _dim$[ebp]
	jge	SHORT $LN5@lagrange_e@2

; 101  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	edx, DWORD PTR [edx+ecx]
	lea	eax, DWORD PTR [edx+eax*8]

; 104  :              for ( ii = 0 ; ii < dim ; ii++ )

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv1215[ebp], eax
	mov	eax, DWORD PTR _gl$[ebp]
	lea	esi, DWORD PTR [edx+ebx*8]
	mov	edx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR _dim$[ebp]
	lea	edx, DWORD PTR [edx+ebx*4]
	sub	eax, ebx
$LC3@lagrange_e@2:

; 105  :                 sum += tang[i][j]*gl->gpolypart[m][ii][k]*mat[i][ii];

	mov	ebx, DWORD PTR [edx]
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR tv1215[ebp]
	fmul	QWORD PTR [ebx]
	add	edx, 4
	add	esi, 8
	dec	eax
	fmul	QWORD PTR [esi-8]
	faddp	ST(1), ST(0)
	jne	SHORT $LC3@lagrange_e@2

; 104  :              for ( ii = 0 ; ii < dim ; ii++ )

	mov	edx, DWORD PTR tv693[ebp]
	mov	eax, DWORD PTR _j$[ebp]
$LN5@lagrange_e@2:

; 103  :           for ( i = 0 ; i < dim ; i++ )

	add	ecx, 4
	dec	DWORD PTR tv68[ebp]
	mov	DWORD PTR tv1191[ebp], ecx
	jne	$LN49@lagrange_e@2
	mov	ebx, DWORD PTR _dim$[ebp]
$LN4@lagrange_e@2:

; 101  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR _e_info$GSCopy$[ebp]

; 106  :           e_info->grad[k][j] += fudge*sum;

	fmul	ST(0), ST(2)
	mov	edx, DWORD PTR [ecx+1336]
	mov	ecx, DWORD PTR [edx+edi*4]
	fadd	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	$LN52@lagrange_e@2

; 101  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR _gl$[ebp]
$LN11@lagrange_e@2:

; 98   :      /* gradients */
; 99   :      fudge = density*gl->gausswt[m]/sqrt(det)/factorial[dim];
; 100  :      for ( k = 0 ; k < gl->lagpts ; k++ )

	inc	edi
	cmp	edi, DWORD PTR [ecx+16]
	jl	$LN53@lagrange_e@2

; 101  :         for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(1)
$LN59@lagrange_e@2:

; 89   : 
; 90   :   for ( m = 0 ; m < gl->gnumpts ; m++ )  /*  integration point number */

	mov	eax, DWORD PTR _m$[ebp]

; 101  :         for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(0)
	inc	eax
	mov	DWORD PTR _m$[ebp], eax
	cmp	eax, DWORD PTR [ecx+4]
	jl	$LL85@lagrange_e@2
$LN47@lagrange_e@2:

; 107  :         }
; 108  :   }
; 109  : 
; 110  :   return density*value/factorial[dim];

	fmul	QWORD PTR _value$[ebp]

; 111  : 
; 112  : } // end lagrange_edge_tension_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	fdiv	QWORD PTR _factorial[ebx*8]
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_lagrange_edge_tension_grad ENDP
_TEXT	ENDS
PUBLIC	__real@4000000000000000
PUBLIC	??_C@_0L@OMBCHNHL@LAGRANGE?4C?$AA@		; `string'
PUBLIC	_e_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_lagrange_edge_tension_hess
EXTRN	_free_matrix4:PROC
EXTRN	_free_matrix:PROC
EXTRN	_det_hess:PROC
EXTRN	_kb_dmatrix4:PROC
EXTRN	_kb_dmatrix:PROC
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT ??_C@_0L@OMBCHNHL@LAGRANGE?4C?$AA@
CONST	SEGMENT
??_C@_0L@OMBCHNHL@LAGRANGE?4C?$AA@ DB 'LAGRANGE.C', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _lagrange_edge_tension_hess
_TEXT	SEGMENT
_matqXvS$ = -492					; size = 24
_fudge$ = -468						; size = 8
_gp00$89167 = -460					; size = 8
_coeff2$89170 = -452					; size = 8
_coeff1$89169 = -444					; size = 8
_jjjsum$89164 = -436					; size = 8
_gp11$89168 = -428					; size = 8
tv4188 = -420						; size = 4
_detinv$ = -416						; size = 8
_value$ = -408						; size = 8
tv1230 = -400						; size = 4
tv1312 = -396						; size = 4
_density$ = -392					; size = 8
_sums$ = -384						; size = 4
_m$ = -380						; size = 4
_jj2$89190 = -376					; size = 4
_e_info$GSCopy$ = -372					; size = 4
_dethess$ = -368					; size = 4
tv3947 = -364						; size = 4
tv1229 = -364						; size = 4
tv1037 = -360						; size = 4
tv157 = -360						; size = 4
_i2$89188 = -356					; size = 4
_j$ = -352						; size = 4
tv4113 = -348						; size = 4
tv2996 = -348						; size = 4
tv2232 = -348						; size = 4
tv3371 = -344						; size = 4
_mat$ = -340						; size = 4
_gl$ = -336						; size = 4
_tang$89136 = -332					; size = 4
tv730 = -328						; size = 4
_jj1$89189 = -328					; size = 4
tv4154 = -324						; size = 4
_ii$ = -324						; size = 4
tv3482 = -320						; size = 4
tv2971 = -320						; size = 4
tv865 = -320						; size = 4
tv3664 = -316						; size = 4
tv3361 = -316						; size = 4
tv2991 = -312						; size = 4
tv2208 = -312						; size = 4
_jjend$89181 = -312					; size = 4
tv1733 = -308						; size = 4
_k$ = -308						; size = 4
_gp$89137 = -304					; size = 4
tv3660 = -300						; size = 4
tv3373 = -300						; size = 4
tv1709 = -300						; size = 4
_dim$ = -296						; size = 4
_matxJ$ = -292						; size = 288
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_lagrange_edge_tension_hess PROC			; COMDAT

; 122  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 492				; 000001ecH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 123  :   REAL value = 0.0;

	fldz
	push	ebx
	mov	ebx, DWORD PTR _e_info$[ebp]
	fstp	QWORD PTR _value$[ebp]
	push	esi
	push	edi

; 124  :   int i,ii,m,j,k,jj,kk;
; 125  :   REAL det;
; 126  :   REAL density,fudge;
; 127  :   int dim = (web.representation==STRING) ? 1 : web.dimension-1;

	mov	edi, 1

; 186  :           for ( jj = 0 ; jj < jjend ; jj++ )

	mov	DWORD PTR _e_info$GSCopy$[ebp], ebx
	cmp	DWORD PTR _web+624, edi
	jne	SHORT $LN67@lagrange_e@3

; 124  :   int i,ii,m,j,k,jj,kk;
; 125  :   REAL det;
; 126  :   REAL density,fudge;
; 127  :   int dim = (web.representation==STRING) ? 1 : web.dimension-1;

	mov	DWORD PTR _dim$[ebp], edi
	jmp	SHORT $LN68@lagrange_e@3
$LN67@lagrange_e@3:
	mov	eax, DWORD PTR _web+620
	dec	eax
	mov	DWORD PTR _dim$[ebp], eax
	mov	edi, eax
$LN68@lagrange_e@3:

; 128  :   struct gauss_lag *gl = &gauss_lagrange[dim][web.gauss1D_order];

	mov	esi, DWORD PTR _web+1592

; 129  :   MAT2D(mat,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	ecx, DWORD PTR _matxJ$[ebp]
	shl	esi, 5
	add	esi, DWORD PTR _gauss_lagrange[edi*4]
	push	ecx
	lea	edx, DWORD PTR _matqXvS$[ebp]
	push	edx
	mov	DWORD PTR _gl$[ebp], esi
	call	_mat2d_setup

; 130  :   REAL **sums;
; 131  :   REAL ****dethess=NULL;
; 132  :   REAL detinv;
; 133  : 
; 134  :   if ( METH_INSTANCE(e_info->method)->flags & USE_DENSITY )

	mov	ecx, DWORD PTR _meth_inst_list
	mov	DWORD PTR _mat$[ebp], eax
	mov	eax, DWORD PTR [ebx+8]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	esp, 16					; 00000010H
	test	DWORD PTR [eax+ecx+140], 536870912	; 20000000H
	mov	DWORD PTR _dethess$[ebp], 0
	je	SHORT $LN64@lagrange_e@3

; 135  :       density = get_edge_density(e_info->id);

	mov	edx, DWORD PTR [ebx]
	mov	eax, DWORD PTR _web+124
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	fld	QWORD PTR [ecx+40]
	jmp	SHORT $LN254@lagrange_e@3
$LN64@lagrange_e@3:

; 136  :   else density = 1.0;

	fld1
$LN254@lagrange_e@3:

; 137  : 
; 138  :   sums = dmatrix(0,gl->lagpts-1,0,SDIM-1);

	mov	edx, DWORD PTR _web+616
	fstp	QWORD PTR _density$[ebp]
	mov	eax, DWORD PTR [esi+16]
	push	138					; 0000008aH
	push	OFFSET ??_C@_0L@OMBCHNHL@LAGRANGE?4C?$AA@
	dec	edx
	push	edx
	push	0
	dec	eax
	push	eax
	push	0
	call	_kb_dmatrix
	add	esp, 24					; 00000018H
	mov	DWORD PTR _sums$[ebp], eax

; 139  :   if ( dim > 2 ) dethess = dmatrix4(dim,dim,dim,dim);

	cmp	edi, 2
	jle	SHORT $LN62@lagrange_e@3
	push	139					; 0000008bH
	push	OFFSET ??_C@_0L@OMBCHNHL@LAGRANGE?4C?$AA@
	push	edi
	push	edi
	push	edi
	push	edi
	call	_kb_dmatrix4
	add	esp, 24					; 00000018H
	mov	DWORD PTR _dethess$[ebp], eax
$LN62@lagrange_e@3:

; 140  : 
; 141  :   for ( m = 0 ; m < gl->gnumpts ; m++ )  /*  integration point number */

	cmp	DWORD PTR [esi+4], 0
	mov	DWORD PTR _m$[ebp], 0
	jle	$LN59@lagrange_e@3
	npad	10
$LL61@lagrange_e@3:

; 142  :   { REAL **tang = e_info->sides[m];

	mov	ecx, DWORD PTR _e_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [ecx+1276]
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]

; 143  :      REAL **gp = gl->gpolypart[m];

	mov	edx, DWORD PTR _gl$[ebp]
	mov	DWORD PTR _tang$89136[ebp], ecx
	mov	ecx, DWORD PTR [edx+24]
	mov	edx, DWORD PTR [ecx+eax*4]

; 144  :      /* calculate tangents and det */ 
; 145  :      for ( i = 0 ; i < dim ; i++ )

	xor	ebx, ebx
	mov	DWORD PTR _gp$89137[ebp], edx
	cmp	DWORD PTR _dim$[ebp], ebx
	jle	SHORT $LN56@lagrange_e@3
	mov	ecx, DWORD PTR _mat$[ebp]
	mov	eax, DWORD PTR _tang$89136[ebp]
	sub	eax, ecx
	mov	DWORD PTR tv1733[ebp], ecx
	mov	DWORD PTR tv1709[ebp], eax
$LL58@lagrange_e@3:

; 146  :         for ( j = 0 ; j <= i ; j++ )

	xor	esi, esi
	test	ebx, ebx
	js	SHORT $LN57@lagrange_e@3
	mov	edi, DWORD PTR _mat$[ebp]
	npad	3
$LL120@lagrange_e@3:

; 147  :           mat[i][j] = mat[j][i] = SDIM_dot(tang[i],tang[j]);

	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR [eax+edi]
	push	ecx
	mov	ecx, DWORD PTR tv1733[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_dot
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR tv1733[ebp]
	fst	QWORD PTR [eax+ebx*8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR tv1709[ebp]
	fstp	QWORD PTR [edx+esi*8]
	inc	esi
	add	esp, 12					; 0000000cH
	add	edi, 4
	cmp	esi, ebx
	jle	SHORT $LL120@lagrange_e@3
$LN57@lagrange_e@3:

; 144  :      /* calculate tangents and det */ 
; 145  :      for ( i = 0 ; i < dim ; i++ )

	add	DWORD PTR tv1733[ebp], 4
	inc	ebx
	cmp	ebx, DWORD PTR _dim$[ebp]
	jl	SHORT $LL58@lagrange_e@3
$LN56@lagrange_e@3:

; 148  :      if ( dim > 2 ) det_hess(mat,dethess,dim);  /* for hessian */

	mov	ebx, DWORD PTR _dim$[ebp]
	cmp	ebx, 2
	jle	SHORT $LN130@lagrange_e@3
	mov	eax, DWORD PTR _dethess$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	push	ebx
	push	eax
	push	ecx
	call	_det_hess
	add	esp, 12					; 0000000cH
$LN130@lagrange_e@3:

; 149  :      det = det_adjoint(mat,dim);

	mov	edx, DWORD PTR _mat$[ebp]
	push	ebx
	push	edx
	call	_det_adjoint

; 150  :      detinv = (det == 0.0) ? 0.0 : 1/det;

	fld	ST(0)
	fldz
	add	esp, 8
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jnp	SHORT $LN255@lagrange_e@3
	fstp	ST(0)
	fld1
	fdiv	ST(0), ST(1)
$LN255@lagrange_e@3:

; 151  :      value += gl->gausswt[m]*sqrt(det);

	mov	esi, DWORD PTR _gl$[ebp]
	fstp	QWORD PTR _detinv$[ebp]
	mov	eax, DWORD PTR [esi+12]
	mov	ecx, DWORD PTR _m$[ebp]
	lea	edi, DWORD PTR [eax+ecx*8]
	call	__CIsqrt
	fmul	QWORD PTR [edi]
	fadd	QWORD PTR _value$[ebp]
	fstp	QWORD PTR _value$[ebp]

; 152  :      /* gradients */
; 153  :      fudge = density*gl->gausswt[m]*sqrt(detinv)/factorial[dim];

	fld	QWORD PTR _detinv$[ebp]
	call	__CIsqrt
	fld	QWORD PTR [edi]
	fmul	QWORD PTR _density$[ebp]

; 154  :      for ( k = 0 ; k < gl->lagpts ; k++ )

	xor	edi, edi
	fmulp	ST(1), ST(0)
	fdiv	QWORD PTR _factorial[ebx*8]
	fst	QWORD PTR _fudge$[ebp]
	fldz
	cmp	DWORD PTR [esi+16], edi
	jle	$LN49@lagrange_e@3
$LN51@lagrange_e@3:

; 155  :         for ( j = 0 ; j < SDIM ; j++ )

	xor	edx, edx
	mov	DWORD PTR _j$[ebp], edx
	cmp	DWORD PTR _web+616, edx
	jle	$LN50@lagrange_e@3
	mov	eax, DWORD PTR _sums$[ebp]
	mov	ecx, DWORD PTR [eax+edi*4]
	mov	DWORD PTR tv1229[ebp], ecx
$LN48@lagrange_e@3:

; 156  :         { REAL sum = 0.0;

	fld	ST(0)

; 157  :           for ( i = 0 ; i < dim ; i++ )

	test	ebx, ebx
	jle	$LN43@lagrange_e@3
	mov	ecx, DWORD PTR _mat$[ebp]
	mov	esi, DWORD PTR _tang$89136[ebp]
	sub	esi, ecx
	mov	DWORD PTR tv2208[ebp], ecx
	mov	DWORD PTR tv1709[ebp], esi
	mov	DWORD PTR tv865[ebp], ebx
$LN45@lagrange_e@3:

; 158  :              for ( ii = 0 ; ii < dim ; ii++ )

	xor	eax, eax
	cmp	ebx, 4
	jl	$LN131@lagrange_e@3

; 155  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR [esi+ecx]
	lea	esi, DWORD PTR [eax+edx*8]

; 158  :              for ( ii = 0 ; ii < dim ; ii++ )

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _gp$89137[ebp]
	lea	edx, DWORD PTR [ebx-4]
	shr	edx, 2
	add	eax, 16					; 00000010H
	add	ecx, 8
	inc	edx
	lea	ebx, DWORD PTR [edx*4]
	mov	DWORD PTR _ii$[ebp], ebx
$LN109@lagrange_e@3:

; 159  :                 sum += tang[i][j]*gp[ii][k]*mat[i][ii];

	mov	ebx, DWORD PTR [ecx-8]
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR [ecx-4]
	fmul	QWORD PTR [esi]
	add	ecx, 16					; 00000010H
	add	eax, 32					; 00000020H
	dec	edx
	fmul	QWORD PTR [eax-48]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR [ecx-16]
	fmul	QWORD PTR [esi]
	fmul	QWORD PTR [eax-40]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR [ecx-12]
	fmul	QWORD PTR [esi]
	fmul	QWORD PTR [eax-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+edi*8]
	fmul	QWORD PTR [esi]
	fmul	QWORD PTR [eax-24]
	faddp	ST(1), ST(0)
	jne	SHORT $LN109@lagrange_e@3

; 158  :              for ( ii = 0 ; ii < dim ; ii++ )

	mov	ecx, DWORD PTR tv2208[ebp]
	mov	esi, DWORD PTR tv1709[ebp]
	mov	ebx, DWORD PTR _dim$[ebp]
	mov	eax, DWORD PTR _ii$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
$LN131@lagrange_e@3:
	cmp	eax, ebx
	jge	SHORT $LN44@lagrange_e@3

; 155  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	esi, DWORD PTR [esi+ecx]
	lea	edx, DWORD PTR [esi+edx*8]
	mov	DWORD PTR tv2232[ebp], edx

; 158  :              for ( ii = 0 ; ii < dim ; ii++ )

	mov	edx, DWORD PTR [ecx]
	lea	edx, DWORD PTR [edx+eax*8]
$LC42@lagrange_e@3:

; 159  :                 sum += tang[i][j]*gp[ii][k]*mat[i][ii];

	mov	esi, DWORD PTR _gp$89137[ebp]
	mov	esi, DWORD PTR [esi+eax*4]
	fld	QWORD PTR [esi+edi*8]
	mov	esi, DWORD PTR tv2232[ebp]
	fmul	QWORD PTR [esi]
	inc	eax
	add	edx, 8
	fmul	QWORD PTR [edx-8]
	faddp	ST(1), ST(0)
	cmp	eax, ebx
	jl	SHORT $LC42@lagrange_e@3

; 158  :              for ( ii = 0 ; ii < dim ; ii++ )

	mov	edx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR tv1709[ebp]
$LN44@lagrange_e@3:

; 157  :           for ( i = 0 ; i < dim ; i++ )

	add	ecx, 4
	dec	DWORD PTR tv865[ebp]
	mov	DWORD PTR tv2208[ebp], ecx
	jne	$LN45@lagrange_e@3
$LN43@lagrange_e@3:

; 160  :           sums[k][j] = sum;

	mov	eax, DWORD PTR tv1229[ebp]
	mov	ecx, DWORD PTR _e_info$GSCopy$[ebp]
	fst	QWORD PTR [eax+edx*8]
	mov	eax, DWORD PTR [ecx+1336]

; 161  :           e_info->grad[k][j] += fudge*sum;

	fmul	ST(0), ST(2)
	mov	ecx, DWORD PTR [eax+edi*4]
	lea	eax, DWORD PTR [ecx+edx*8]
	fadd	QWORD PTR [eax]
	inc	edx
	mov	DWORD PTR _j$[ebp], edx
	fstp	QWORD PTR [eax]
	cmp	edx, DWORD PTR _web+616
	jl	$LN48@lagrange_e@3
$LN50@lagrange_e@3:

; 154  :      for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	edx, DWORD PTR _gl$[ebp]
	inc	edi
	cmp	edi, DWORD PTR [edx+16]
	jl	$LN51@lagrange_e@3
	mov	esi, edx
$LN49@lagrange_e@3:

; 162  :         }
; 163  :      /* hessians */
; 164  :      for ( k = 0 ; k < gl->lagpts ; k++ )

	xor	ebx, ebx
	mov	DWORD PTR _k$[ebp], ebx
	cmp	DWORD PTR [esi+16], ebx
	jle	$LN253@lagrange_e@3
$LN39@lagrange_e@3:

; 165  :       for ( kk = 0 ; kk <= k ; kk++ )

	xor	edx, edx
	test	ebx, ebx
	js	$LN38@lagrange_e@3
$LN36@lagrange_e@3:

; 166  :       { REAL  jjjsum;
; 167  :         REAL gp01;
; 168  :         REAL gp10;
; 169  :         REAL gp00=0.0;
; 170  :         REAL gp11=0.0;
; 171  :         REAL coeff1=0.0;
; 172  :         REAL coeff2=0.0;
; 173  :         if ( dim == 2 )

	mov	esi, DWORD PTR _dim$[ebp]
	fst	QWORD PTR _gp00$89167[ebp]
	fst	QWORD PTR _gp11$89168[ebp]
	fst	QWORD PTR _coeff1$89169[ebp]
	fst	QWORD PTR _coeff2$89170[ebp]
	cmp	esi, 2
	jne	SHORT $LN127@lagrange_e@3

; 174  :         { gp01 = gp[0][k]*gp[1][kk];

	mov	ecx, DWORD PTR _gp$89137[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx]
	fld	QWORD PTR [ecx+ebx*8]
	fmul	QWORD PTR [eax+edx*8]

; 175  :           gp10 = gp[1][k]*gp[0][kk];

	fld	QWORD PTR [eax+ebx*8]
	fmul	QWORD PTR [ecx+edx*8]

; 176  :           gp00 = gp[0][k]*gp[0][kk];

	fld	QWORD PTR [ecx+ebx*8]
	fmul	QWORD PTR [ecx+edx*8]
	fstp	QWORD PTR _gp00$89167[ebp]

; 177  :           gp11 = gp[1][k]*gp[1][kk];

	fld	QWORD PTR [eax+ebx*8]
	fmul	QWORD PTR [eax+edx*8]
	fstp	QWORD PTR _gp11$89168[ebp]

; 178  :           coeff1 = 2*gp01-gp10;

	fld	ST(1)
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fsub	ST(0), ST(2)
	fstp	QWORD PTR _coeff1$89169[ebp]

; 179  :           coeff2 = 2*gp10-gp01;

	fmulp	ST(1), ST(0)
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR _coeff2$89170[ebp]
$LN127@lagrange_e@3:

; 180  :         }
; 181  :         for ( i = 0,jjjsum=0.0 ; i < dim ; i++ )

	fld	ST(0)
	fst	QWORD PTR _jjjsum$89164[ebp]
	test	esi, esi
	jle	$LN30@lagrange_e@3
	mov	ecx, DWORD PTR _mat$[ebp]
	mov	edi, DWORD PTR _gp$89137[ebp]
	sub	edi, ecx
	mov	DWORD PTR tv2971[ebp], ecx
	mov	DWORD PTR tv2991[ebp], edi
	mov	DWORD PTR tv730[ebp], esi
$LN32@lagrange_e@3:

; 182  :           for ( ii = 0 ; ii < dim ; ii++ )

	xor	eax, eax
	cmp	esi, 4
	jl	$LC111@lagrange_e@3

; 162  :         }
; 163  :      /* hessians */
; 164  :      for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	eax, DWORD PTR [edi+ecx]
	lea	edi, DWORD PTR [eax+ebx*8]

; 182  :           for ( ii = 0 ; ii < dim ; ii++ )

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _gp$89137[ebp]
	add	esi, -4					; fffffffcH
	shr	esi, 2
	add	eax, 16					; 00000010H
	add	ecx, 8
	inc	esi
	lea	ebx, DWORD PTR [esi*4]
	mov	DWORD PTR _ii$[ebp], ebx
$LN112@lagrange_e@3:

; 183  :             jjjsum += gp[i][k]*gp[ii][kk]*mat[i][ii];

	mov	ebx, DWORD PTR [ecx-8]
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR [ecx-4]
	fmul	QWORD PTR [edi]
	add	ecx, 16					; 00000010H
	add	eax, 32					; 00000020H
	dec	esi
	fmul	QWORD PTR [eax-48]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR [ecx-16]
	fmul	QWORD PTR [edi]
	fmul	QWORD PTR [eax-40]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR [ecx-12]
	fmul	QWORD PTR [edi]
	fmul	QWORD PTR [eax-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+edx*8]
	fmul	QWORD PTR [edi]
	fmul	QWORD PTR [eax-24]
	faddp	ST(1), ST(0)
	jne	SHORT $LN112@lagrange_e@3

; 182  :           for ( ii = 0 ; ii < dim ; ii++ )

	mov	eax, DWORD PTR _ii$[ebp]
	mov	edi, DWORD PTR tv2991[ebp]
	mov	ecx, DWORD PTR tv2971[ebp]
	mov	esi, DWORD PTR _dim$[ebp]
	mov	ebx, DWORD PTR _k$[ebp]
$LC111@lagrange_e@3:
	cmp	eax, esi
	jge	SHORT $LN31@lagrange_e@3

; 162  :         }
; 163  :      /* hessians */
; 164  :      for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	edi, DWORD PTR [edi+ecx]
	lea	edi, DWORD PTR [edi+ebx*8]
	mov	DWORD PTR tv2996[ebp], edi

; 182  :           for ( ii = 0 ; ii < dim ; ii++ )

	mov	edi, DWORD PTR [ecx]
	lea	edi, DWORD PTR [edi+eax*8]
$LC29@lagrange_e@3:

; 183  :             jjjsum += gp[i][k]*gp[ii][kk]*mat[i][ii];

	mov	ebx, DWORD PTR _gp$89137[ebp]
	mov	ebx, DWORD PTR [ebx+eax*4]
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR tv2996[ebp]
	fmul	QWORD PTR [ebx]
	inc	eax
	add	edi, 8
	fmul	QWORD PTR [edi-8]
	faddp	ST(1), ST(0)
	cmp	eax, esi
	jl	SHORT $LC29@lagrange_e@3

; 182  :           for ( ii = 0 ; ii < dim ; ii++ )

	mov	edi, DWORD PTR tv2991[ebp]
	mov	ebx, DWORD PTR _k$[ebp]
$LN31@lagrange_e@3:

; 180  :         }
; 181  :         for ( i = 0,jjjsum=0.0 ; i < dim ; i++ )

	add	ecx, 4
	dec	DWORD PTR tv730[ebp]
	mov	DWORD PTR tv2971[ebp], ecx
	jne	$LN32@lagrange_e@3

; 183  :             jjjsum += gp[i][k]*gp[ii][kk]*mat[i][ii];

	fst	QWORD PTR _jjjsum$89164[ebp]
$LN30@lagrange_e@3:

; 184  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR _web+616
	xor	eax, eax
	mov	DWORD PTR _j$[ebp], eax
	test	ecx, ecx
	jle	$LN252@lagrange_e@3
$LN26@lagrange_e@3:

; 185  :         { int jjend = (k==kk) ? j+1 : SDIM;

	cmp	ebx, edx
	jne	SHORT $LN71@lagrange_e@3
	lea	esi, DWORD PTR [eax+1]
	mov	DWORD PTR _jjend$89181[ebp], esi
	jmp	SHORT $LN72@lagrange_e@3
$LN71@lagrange_e@3:
	mov	DWORD PTR _jjend$89181[ebp], ecx
$LN72@lagrange_e@3:

; 186  :           for ( jj = 0 ; jj < jjend ; jj++ )

	xor	esi, esi
	cmp	DWORD PTR _jjend$89181[ebp], esi
	jle	$LN25@lagrange_e@3
	mov	ecx, DWORD PTR _sums$[ebp]
	mov	edi, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [ecx+ebx*4]
	lea	ecx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR tv1312[ebp], edi
	mov	edi, DWORD PTR _dim$[ebp]
	mov	DWORD PTR tv1230[ebp], ecx
$LN122@lagrange_e@3:

; 187  :           { REAL sum,h;
; 188  :             int i1,i2,jj1,jj2;
; 189  :             h = -sums[k][j]*sums[kk][jj]*detinv;

	mov	ecx, DWORD PTR tv1312[ebp]
	fld	QWORD PTR [ecx+esi*8]
	mov	ecx, DWORD PTR tv1230[ebp]
	fmul	QWORD PTR [ecx]
	fmul	QWORD PTR _detinv$[ebp]
	fchs

; 190  :             if ( dim == 2 )

	cmp	edi, 2
	jne	SHORT $LN256@lagrange_e@3

; 191  :             {
; 192  :               h +=  (coeff1*tang[0][j] - gp00*tang[1][j])*tang[1][jj]
; 193  :                     + (coeff2*tang[1][j] - gp11*tang[0][j])*tang[0][jj];

	mov	edi, DWORD PTR _tang$89136[ebp]
	mov	ecx, DWORD PTR [edi]
	mov	edi, DWORD PTR [edi+4]
	fld	QWORD PTR [edi+eax*8]
	fmul	QWORD PTR _coeff2$89170[ebp]
	fld	QWORD PTR [ecx+eax*8]
	fmul	QWORD PTR _gp11$89168[ebp]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [ecx+esi*8]
	fld	QWORD PTR [ecx+eax*8]
	fmul	QWORD PTR _coeff1$89169[ebp]
	fld	QWORD PTR [edi+eax*8]
	fmul	QWORD PTR _gp00$89167[ebp]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [edi+esi*8]
	faddp	ST(1), ST(0)
	jmp	$LN15@lagrange_e@3
$LN256@lagrange_e@3:

; 194  :             }
; 195  :             else if ( dim > 2 )

	jle	$LN18@lagrange_e@3

; 196  :             { sum = 0.0;

	fld	ST(2)

; 197  :               for (i1 = 0 ; i1 < dim ; i1++ )

	test	edi, edi
	jle	$LN15@lagrange_e@3
	mov	eax, DWORD PTR _tang$89136[ebp]
	fstp	ST(2)
	mov	ecx, DWORD PTR _dethess$[ebp]
	fstp	ST(3)
	mov	edi, eax
	sub	edi, DWORD PTR _gp$89137[ebp]
	sub	eax, ecx
	mov	DWORD PTR tv4188[ebp], eax
	mov	eax, DWORD PTR _dim$[ebp]
	mov	DWORD PTR tv3947[ebp], edi
	mov	DWORD PTR tv4154[ebp], ecx
	mov	DWORD PTR tv4113[ebp], eax
$LN123@lagrange_e@3:

; 198  :               { REAL suma = 0.0;
; 199  :                  for ( jj1 = 0 ; jj1 < dim ; jj1++ )

	xor	eax, eax
	fld	ST(1)
	mov	DWORD PTR _jj1$89189[ebp], eax
$LN124@lagrange_e@3:

; 200  :                  { REAL sumb = 0.0;

	mov	ecx, DWORD PTR _gp$89137[ebp]
	fld	ST(2)

; 201  :                     for ( i2 = 0 ; i2 < dim ; i2++ )

	mov	DWORD PTR _i2$89188[ebp], 0
$LN11@lagrange_e@3:

; 202  :                     { /* note: inner loops here pretty well optimized */
; 203  :                       for ( jj2 = 0 ; jj2 < dim ; jj2++ ) 

	cmp	DWORD PTR _dim$[ebp], 4
	mov	DWORD PTR _jj2$89190[ebp], 0
	jl	$LN129@lagrange_e@3
	mov	ebx, DWORD PTR _gp$89137[ebp]
	add	ebx, 12					; 0000000cH
	mov	DWORD PTR tv3361[ebp], ebx
	mov	ebx, DWORD PTR tv4154[ebp]
	mov	ebx, DWORD PTR [ebx]
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	ebx, DWORD PTR _i2$89188[ebp]
	mov	eax, DWORD PTR [eax+ebx*4]
	add	eax, 16					; 00000010H
	mov	DWORD PTR tv3371[ebp], eax
	mov	eax, DWORD PTR _tang$89136[ebp]
	lea	ebx, DWORD PTR [eax+4]
	mov	DWORD PTR tv3373[ebp], ebx
	mov	ebx, DWORD PTR _gp$89137[ebp]
	sub	ebx, eax
	mov	eax, DWORD PTR _dim$[ebp]
	add	eax, -4					; fffffffcH
	shr	eax, 2
	inc	eax
	mov	DWORD PTR tv157[ebp], eax
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv3482[ebp], ebx
	mov	DWORD PTR _jj2$89190[ebp], eax
$LN119@lagrange_e@3:

; 204  :                       { REAL dh = dethess[i1][jj1][i2][jj2];

	mov	eax, DWORD PTR tv3371[ebp]
	fld	QWORD PTR [eax-16]

; 205  :                          if ( dh == 0.0 ) continue; 

	fld	ST(0)
	fld	ST(5)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN226@lagrange_e@3

; 206  :                          /* using symmetry of dethess */
; 207  :                          sumb += dh*(tang[i2][jj]*gp[jj2][kk]+tang[jj2][jj]*gp[i2][kk]);

	mov	eax, DWORD PTR [edi+ecx]
	fld	QWORD PTR [eax+esi*8]
	mov	ebx, DWORD PTR tv3361[ebp]
	mov	ebx, DWORD PTR [ebx-12]
	fmul	QWORD PTR [ebx+edx*8]
	mov	eax, DWORD PTR tv3373[ebp]
	mov	eax, DWORD PTR [eax-4]
	mov	ebx, DWORD PTR [ecx]
	fld	QWORD PTR [eax+esi*8]
	fmul	QWORD PTR [ebx+edx*8]
	faddp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN115@lagrange_e@3
$LN226@lagrange_e@3:
	fstp	ST(0)
$LN115@lagrange_e@3:

; 204  :                       { REAL dh = dethess[i1][jj1][i2][jj2];

	mov	eax, DWORD PTR tv3371[ebp]
	fld	QWORD PTR [eax-8]

; 205  :                          if ( dh == 0.0 ) continue; 

	fld	ST(0)
	fld	ST(5)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN229@lagrange_e@3

; 206  :                          /* using symmetry of dethess */
; 207  :                          sumb += dh*(tang[i2][jj]*gp[jj2][kk]+tang[jj2][jj]*gp[i2][kk]);

	mov	edi, DWORD PTR [edi+ecx]
	mov	eax, DWORD PTR tv3373[ebp]
	fld	QWORD PTR [edi+esi*8]
	mov	ebx, DWORD PTR tv3482[ebp]
	mov	ebx, DWORD PTR [ebx+eax]
	fmul	QWORD PTR [ebx+edx*8]
	mov	edi, DWORD PTR [ecx]
	fld	QWORD PTR [edi+edx*8]
	mov	eax, DWORD PTR [eax]
	fmul	QWORD PTR [eax+esi*8]
	mov	edi, DWORD PTR tv3947[ebp]
	faddp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN116@lagrange_e@3
$LN229@lagrange_e@3:
	fstp	ST(0)
$LN116@lagrange_e@3:

; 204  :                       { REAL dh = dethess[i1][jj1][i2][jj2];

	mov	eax, DWORD PTR tv3371[ebp]
	fld	QWORD PTR [eax]

; 205  :                          if ( dh == 0.0 ) continue; 

	fld	ST(0)
	fld	ST(5)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN232@lagrange_e@3

; 206  :                          /* using symmetry of dethess */
; 207  :                          sumb += dh*(tang[i2][jj]*gp[jj2][kk]+tang[jj2][jj]*gp[i2][kk]);

	mov	eax, DWORD PTR [edi+ecx]
	fld	QWORD PTR [eax+esi*8]
	mov	ebx, DWORD PTR tv3361[ebp]
	mov	ebx, DWORD PTR [ebx-4]
	fmul	QWORD PTR [ebx+edx*8]
	mov	eax, DWORD PTR tv3373[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	ebx, DWORD PTR [ecx]
	fld	QWORD PTR [eax+esi*8]
	fmul	QWORD PTR [ebx+edx*8]
	faddp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN117@lagrange_e@3
$LN232@lagrange_e@3:
	fstp	ST(0)
$LN117@lagrange_e@3:

; 204  :                       { REAL dh = dethess[i1][jj1][i2][jj2];

	mov	eax, DWORD PTR tv3371[ebp]
	fld	QWORD PTR [eax+8]

; 205  :                          if ( dh == 0.0 ) continue; 

	fld	ST(0)
	fld	ST(5)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN235@lagrange_e@3

; 206  :                          /* using symmetry of dethess */
; 207  :                          sumb += dh*(tang[i2][jj]*gp[jj2][kk]+tang[jj2][jj]*gp[i2][kk]);

	mov	eax, DWORD PTR [edi+ecx]
	fld	QWORD PTR [eax+esi*8]
	mov	ebx, DWORD PTR tv3361[ebp]
	mov	ebx, DWORD PTR [ebx]
	fmul	QWORD PTR [ebx+edx*8]
	mov	eax, DWORD PTR tv3373[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	ebx, DWORD PTR [ecx]
	fld	QWORD PTR [eax+esi*8]
	fmul	QWORD PTR [ebx+edx*8]
	faddp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN118@lagrange_e@3
$LN235@lagrange_e@3:
	fstp	ST(0)
$LN118@lagrange_e@3:

; 202  :                     { /* note: inner loops here pretty well optimized */
; 203  :                       for ( jj2 = 0 ; jj2 < dim ; jj2++ ) 

	add	DWORD PTR tv3371[ebp], 32		; 00000020H
	mov	eax, 16					; 00000010H
	add	DWORD PTR tv3373[ebp], eax
	add	DWORD PTR tv3361[ebp], eax
	dec	DWORD PTR tv157[ebp]
	jne	$LN119@lagrange_e@3
$LN129@lagrange_e@3:
	mov	eax, DWORD PTR _jj2$89190[ebp]
	cmp	eax, DWORD PTR _dim$[ebp]
	jge	$LN10@lagrange_e@3
	mov	ebx, DWORD PTR _tang$89136[ebp]
	lea	eax, DWORD PTR [ebx+eax*4]
	mov	ebx, DWORD PTR _jj1$89189[ebp]
	mov	DWORD PTR tv3660[ebp], eax
	mov	eax, DWORD PTR tv4154[ebp]
	mov	eax, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+ebx*4]
	mov	ebx, DWORD PTR _i2$89188[ebp]
	mov	eax, DWORD PTR [eax+ebx*4]
	mov	ebx, DWORD PTR _jj2$89190[ebp]
	lea	eax, DWORD PTR [eax+ebx*8]
	mov	DWORD PTR tv3664[ebp], eax
	mov	eax, DWORD PTR _gp$89137[ebp]
	sub	eax, DWORD PTR _tang$89136[ebp]
	mov	DWORD PTR tv3482[ebp], eax
	mov	eax, DWORD PTR _dim$[ebp]
	sub	eax, ebx
	mov	ebx, DWORD PTR tv3660[ebp]
	mov	DWORD PTR tv1037[ebp], eax
$LC8@lagrange_e@3:

; 204  :                       { REAL dh = dethess[i1][jj1][i2][jj2];

	mov	eax, DWORD PTR tv3664[ebp]
	fld	QWORD PTR [eax]

; 205  :                          if ( dh == 0.0 ) continue; 

	fld	ST(0)
	fld	ST(5)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN242@lagrange_e@3

; 206  :                          /* using symmetry of dethess */
; 207  :                          sumb += dh*(tang[i2][jj]*gp[jj2][kk]+tang[jj2][jj]*gp[i2][kk]);

	mov	eax, DWORD PTR [edi+ecx]
	mov	edi, DWORD PTR tv3482[ebp]
	fld	QWORD PTR [eax+esi*8]
	mov	edi, DWORD PTR [ebx+edi]
	fmul	QWORD PTR [edi+edx*8]
	mov	eax, DWORD PTR [ecx]
	mov	edi, DWORD PTR [ebx]
	fld	QWORD PTR [eax+edx*8]
	fmul	QWORD PTR [edi+esi*8]
	mov	edi, DWORD PTR tv3947[ebp]
	faddp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN7@lagrange_e@3
$LN242@lagrange_e@3:
	fstp	ST(0)
$LN7@lagrange_e@3:

; 202  :                     { /* note: inner loops here pretty well optimized */
; 203  :                       for ( jj2 = 0 ; jj2 < dim ; jj2++ ) 

	add	DWORD PTR tv3664[ebp], 8
	add	ebx, 4
	dec	DWORD PTR tv1037[ebp]
	jne	SHORT $LC8@lagrange_e@3
$LN10@lagrange_e@3:

; 201  :                     for ( i2 = 0 ; i2 < dim ; i2++ )

	mov	eax, DWORD PTR _dim$[ebp]
	inc	DWORD PTR _i2$89188[ebp]
	add	ecx, 4
	cmp	DWORD PTR _i2$89188[ebp], eax

; 208  :                       }
; 209  :                     }
; 210  :                     suma += gp[jj1][k]*sumb;

	mov	eax, DWORD PTR _jj1$89189[ebp]
	jl	$LN11@lagrange_e@3
	mov	ecx, DWORD PTR _gp$89137[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	ebx, DWORD PTR _k$[ebp]
	fmul	QWORD PTR [ecx+ebx*8]
	inc	eax
	mov	DWORD PTR _jj1$89189[ebp], eax
	faddp	ST(1), ST(0)
	cmp	eax, DWORD PTR _dim$[ebp]
	jl	$LN124@lagrange_e@3

; 211  :                  }
; 212  :                  sum += tang[i1][j]*suma;

	mov	ecx, DWORD PTR tv4154[ebp]
	mov	eax, DWORD PTR tv4188[ebp]
	mov	ebx, DWORD PTR [eax+ecx]
	mov	eax, DWORD PTR _j$[ebp]
	fmul	QWORD PTR [ebx+eax*8]
	add	ecx, 4
	dec	DWORD PTR tv4113[ebp]
	mov	DWORD PTR tv4154[ebp], ecx
	faddp	ST(1), ST(0)
	jne	$LN123@lagrange_e@3

; 197  :               for (i1 = 0 ; i1 < dim ; i1++ )

	fld	QWORD PTR _fudge$[ebp]
	mov	ebx, DWORD PTR _k$[ebp]
	fld	QWORD PTR _jjjsum$89164[ebp]
	fxch	ST(1)
	fxch	ST(4)
	fxch	ST(1)
	fxch	ST(2)
$LN15@lagrange_e@3:

; 213  :               }
; 214  :               h += sum;

	mov	edi, DWORD PTR _dim$[ebp]
	faddp	ST(1), ST(0)
$LN18@lagrange_e@3:

; 215  :             }
; 216  :             if ( j==jj ) h += jjjsum;

	cmp	eax, esi
	jne	SHORT $LN4@lagrange_e@3
	fadd	ST(0), ST(1)
$LN4@lagrange_e@3:

; 186  :           for ( jj = 0 ; jj < jjend ; jj++ )

	mov	ecx, DWORD PTR _e_info$GSCopy$[ebp]

; 217  :             h *= fudge;

	fmul	ST(0), ST(3)
	mov	ecx, DWORD PTR [ecx+1340]
	mov	ecx, DWORD PTR [ecx+ebx*4]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [ecx+eax*4]

; 218  :             e_info->hess[k][kk][j][jj] += h;

	fld	QWORD PTR [ecx+esi*8]
	lea	ecx, DWORD PTR [ecx+esi*8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [ecx]

; 219  :             if ( (kk != k) || (jj != j) )

	cmp	edx, ebx
	jne	SHORT $LN2@lagrange_e@3
	cmp	esi, eax
	je	SHORT $LN210@lagrange_e@3
$LN2@lagrange_e@3:

; 184  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR _e_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [ecx+1340]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [ecx+ebx*4]
	mov	ecx, DWORD PTR [ecx+esi*4]

; 220  :               e_info->hess[kk][k][jj][j] += h;

	fadd	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	fstp	QWORD PTR [ecx]
	jmp	SHORT $LN22@lagrange_e@3
$LN210@lagrange_e@3:
	fstp	ST(0)
$LN22@lagrange_e@3:

; 186  :           for ( jj = 0 ; jj < jjend ; jj++ )

	inc	esi
	cmp	esi, DWORD PTR _jjend$89181[ebp]
	jl	$LN122@lagrange_e@3
	mov	ecx, DWORD PTR _web+616
$LN25@lagrange_e@3:

; 184  :         for ( j = 0 ; j < SDIM ; j++ )

	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, ecx
	jl	$LN26@lagrange_e@3
$LN252@lagrange_e@3:

; 165  :       for ( kk = 0 ; kk <= k ; kk++ )

	inc	edx

; 213  :               }
; 214  :               h += sum;

	fstp	ST(0)
	cmp	edx, ebx
	jle	$LN36@lagrange_e@3
$LN38@lagrange_e@3:

; 162  :         }
; 163  :      /* hessians */
; 164  :      for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	edx, DWORD PTR _gl$[ebp]
	inc	ebx
	mov	DWORD PTR _k$[ebp], ebx
	cmp	ebx, DWORD PTR [edx+16]
	jl	$LN39@lagrange_e@3
$LN253@lagrange_e@3:

; 140  : 
; 141  :   for ( m = 0 ; m < gl->gnumpts ; m++ )  /*  integration point number */

	mov	eax, DWORD PTR _m$[ebp]

; 213  :               }
; 214  :               h += sum;

	fstp	ST(0)
	mov	ecx, DWORD PTR _gl$[ebp]
	fstp	ST(0)
	inc	eax
	mov	DWORD PTR _m$[ebp], eax
	cmp	eax, DWORD PTR [ecx+4]
	jl	$LL61@lagrange_e@3
$LN59@lagrange_e@3:

; 221  :           }
; 222  :         }
; 223  :      }
; 224  :   }
; 225  : 
; 226  :   free_matrix(sums);

	mov	edx, DWORD PTR _sums$[ebp]
	push	edx
	call	_free_matrix

; 227  :   if ( dim > 2 ) free_matrix4(dethess);

	mov	esi, DWORD PTR _dim$[ebp]
	add	esp, 4
	cmp	esi, 2
	jle	SHORT $LN1@lagrange_e@3
	mov	eax, DWORD PTR _dethess$[ebp]
	push	eax
	call	_free_matrix4
	add	esp, 4
$LN1@lagrange_e@3:

; 228  : 
; 229  :   return density*value/factorial[dim];

	fld	QWORD PTR _density$[ebp]

; 230  : 
; 231  : } // end lagrange_edge_tension_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fmul	QWORD PTR _value$[ebp]
	pop	edi
	xor	ecx, ebp
	fdiv	QWORD PTR _factorial[esi*8]
	pop	esi
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_lagrange_edge_tension_hess ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_lagrange_facet_tension_value
; Function compile flags: /Ogtp
;	COMDAT _lagrange_facet_tension_value
_TEXT	SEGMENT
_matqXvS$ = -352					; size = 24
_gl$ = -328						; size = 4
_dim$ = -324						; size = 4
tv403 = -320						; size = 4
_f_info$GSCopy$ = -316					; size = 4
_value$ = -312						; size = 8
_mat$ = -304						; size = 4
tv427 = -300						; size = 4
_m$ = -296						; size = 4
_matxJ$ = -292						; size = 288
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_lagrange_facet_tension_value PROC			; COMDAT

; 247  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 352				; 00000160H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 248  :   REAL value = 0.0;

	fldz
	push	ebx
	mov	ebx, DWORD PTR _f_info$[ebp]
	fstp	QWORD PTR _value$[ebp]
	push	esi

; 249  :   int m,i,j;
; 250  :   REAL det;
; 251  :   REAL **tang;
; 252  :   int dim = web.dimension;
; 253  :   struct gauss_lag *gl = &gauss_lagrange[dim][web.gauss2D_order];

	mov	esi, DWORD PTR _web+1596
	push	edi
	mov	edi, DWORD PTR _web+620

; 254  :   MAT2D(mat,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	eax, DWORD PTR _matxJ$[ebp]
	shl	esi, 5
	add	esi, DWORD PTR _gauss_lagrange[edi*4]
	push	eax
	lea	ecx, DWORD PTR _matqXvS$[ebp]
	push	ecx
	mov	DWORD PTR _f_info$GSCopy$[ebp], ebx
	mov	DWORD PTR _dim$[ebp], edi
	mov	DWORD PTR _gl$[ebp], esi
	call	_mat2d_setup
	add	esp, 16					; 00000010H

; 255  : 
; 256  :   for ( m = 0 ; m < gl->gnumpts ; m++ )  /*  integration point number */

	cmp	DWORD PTR [esi+4], 0
	mov	ecx, eax
	mov	DWORD PTR _mat$[ebp], ecx
	mov	DWORD PTR _m$[ebp], 0
	jle	$LN25@lagrange_f
	jmp	SHORT $LN14@lagrange_f
$LL27@lagrange_f:
	mov	ecx, DWORD PTR _mat$[ebp]
$LN14@lagrange_f:

; 257  :   { tang = f_info->sides[m];

	mov	edx, DWORD PTR [ebx+1276]
	mov	eax, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]

; 258  :      for ( i = 0 ; i < dim ; i++ )

	xor	ebx, ebx
	test	edi, edi
	jle	$LN9@lagrange_f
	sub	eax, ecx
	mov	DWORD PTR tv427[ebp], ecx
	mov	DWORD PTR tv403[ebp], eax
	npad	2
$LL28@lagrange_f:

; 259  :         for ( j = 0 ; j <= i ; j++ )

	xor	esi, esi
	test	ebx, ebx
	js	SHORT $LN10@lagrange_f
	mov	edi, DWORD PTR _mat$[ebp]
	npad	4
$LL26@lagrange_f:

; 260  :           mat[i][j] = mat[j][i] = SDIM_dot(tang[i],tang[j]);

	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR [eax+edi]
	push	ecx
	mov	ecx, DWORD PTR tv427[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_dot
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR tv427[ebp]
	fst	QWORD PTR [eax+ebx*8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR tv403[ebp]
	fstp	QWORD PTR [edx+esi*8]
	inc	esi
	add	esp, 12					; 0000000cH
	add	edi, 4
	cmp	esi, ebx
	jle	SHORT $LL26@lagrange_f

; 259  :         for ( j = 0 ; j <= i ; j++ )

	mov	edi, DWORD PTR _dim$[ebp]
$LN10@lagrange_f:

; 258  :      for ( i = 0 ; i < dim ; i++ )

	add	DWORD PTR tv427[ebp], 4
	inc	ebx
	cmp	ebx, edi
	jl	SHORT $LL28@lagrange_f
	mov	esi, DWORD PTR _gl$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
$LN9@lagrange_f:

; 261  :      det = det_adjoint(mat,dim);

	push	edi
	push	ecx
	call	_det_adjoint

; 262  :      if ( det <= 0.0 ) continue;

	fldz
	fcomp	ST(1)
	add	esp, 8
	fnstsw	ax
	test	ah, 1
	je	SHORT $LN30@lagrange_f

; 263  :      value += gl->gausswt[m]*sqrt(det);

	call	__CIsqrt
	mov	eax, DWORD PTR [esi+12]
	mov	ecx, DWORD PTR _m$[ebp]
	fmul	QWORD PTR [eax+ecx*8]
	fadd	QWORD PTR _value$[ebp]
	fstp	QWORD PTR _value$[ebp]
	jmp	SHORT $LN13@lagrange_f
$LN30@lagrange_f:
	fstp	ST(0)
$LN13@lagrange_f:

; 255  : 
; 256  :   for ( m = 0 ; m < gl->gnumpts ; m++ )  /*  integration point number */

	mov	eax, DWORD PTR _m$[ebp]
	mov	ebx, DWORD PTR _f_info$GSCopy$[ebp]
	inc	eax
	mov	DWORD PTR _m$[ebp], eax
	cmp	eax, DWORD PTR [esi+4]
	jl	$LL27@lagrange_f
$LN25@lagrange_f:

; 264  :   }
; 265  : 
; 266  :   value /= factorial[dim]; /* triangle factor */

	fld	QWORD PTR _value$[ebp]

; 267  :   if ( METH_INSTANCE(f_info->method)->flags & DEFAULT_INSTANCE )

	mov	eax, DWORD PTR [ebx+8]
	fdiv	QWORD PTR _factorial[edi*8]
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	edx, DWORD PTR _meth_inst_list
	imul	eax, 2928				; 00000b70H
	fst	QWORD PTR _value$[ebp]
	test	DWORD PTR [eax+edx+140], 4194304	; 00400000H
	je	SHORT $LN2@lagrange_f

; 268  :   { set_facet_area(f_info->id,value);

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR _web+236
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fst	QWORD PTR [edx+40]

; 269  : #ifdef SHARED_MEMORY
; 270  :      if ( nprocs > 1 ) 

	cmp	DWORD PTR _nprocs, 1
	jle	SHORT $LN3@lagrange_f

; 271  :       proc_total_area[GET_THREAD_ID] += value;

	mov	eax, DWORD PTR _thread_data_key
	fstp	ST(0)
	push	eax
	call	_win_get_thread_data
	mov	eax, DWORD PTR [eax]
	fld	QWORD PTR _proc_total_area[eax*8]
	add	esp, 4
	fld	QWORD PTR _value$[ebp]
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _proc_total_area[eax*8]

; 272  :      else

	jmp	SHORT $LN2@lagrange_f
$LN3@lagrange_f:

; 273  : #endif
; 274  :      binary_tree_add(web.total_area_addends,value);

	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET _web+1000
	call	_binary_tree_add
	fld	QWORD PTR _value$[ebp]
	add	esp, 12					; 0000000cH
$LN2@lagrange_f:

; 275  :   }
; 276  :   if ( METH_INSTANCE(f_info->method)->flags & USE_DENSITY )

	mov	eax, DWORD PTR [ebx+8]
	mov	ecx, DWORD PTR _meth_inst_list
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	test	DWORD PTR [eax+ecx+140], 536870912	; 20000000H
	je	SHORT $LN1@lagrange_f

; 277  :       value *= get_facet_density(f_info->id);

	mov	edx, DWORD PTR [ebx]
	mov	eax, DWORD PTR _web+236
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	fmul	QWORD PTR [ecx+32]
$LN1@lagrange_f:

; 278  :   return value;
; 279  : 
; 280  : } // end lagrange_facet_tension_value()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_lagrange_facet_tension_value ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_lagrange_facet_tension_grad
; Function compile flags: /Ogtp
;	COMDAT _lagrange_facet_tension_grad
_TEXT	SEGMENT
_matqXvS$ = -376					; size = 24
_value$ = -352						; size = 8
_tang$89270 = -344					; size = 4
_density$ = -340					; size = 8
tv1188 = -332						; size = 4
_f_info$GSCopy$ = -328					; size = 4
tv65 = -324						; size = 4
tv1212 = -320						; size = 4
_ii$ = -320						; size = 4
_mat$ = -316						; size = 4
tv690 = -312						; size = 4
_dim$ = -308						; size = 4
_m$ = -304						; size = 4
_gl$ = -300						; size = 4
tv714 = -296						; size = 4
_j$ = -296						; size = 4
_matxJ$ = -292						; size = 288
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_lagrange_facet_tension_grad PROC			; COMDAT

; 289  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 290  :   REAL value = 0.0;

	fldz
	push	ebx

; 291  :   int i,ii,m,j,k;
; 292  :   REAL det;
; 293  :   REAL density,fudge;
; 294  :   int dim = web.dimension;

	mov	ebx, DWORD PTR _web+620
	fstp	QWORD PTR _value$[ebp]
	push	esi
	mov	esi, DWORD PTR _f_info$[ebp]
	push	edi

; 295  :   struct gauss_lag *gl = &gauss_lagrange[dim][web.gauss2D_order];

	mov	edi, DWORD PTR _web+1596

; 296  :   MAT2D(mat,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	eax, DWORD PTR _matxJ$[ebp]
	shl	edi, 5
	add	edi, DWORD PTR _gauss_lagrange[ebx*4]
	push	eax
	lea	ecx, DWORD PTR _matqXvS$[ebp]
	push	ecx
	mov	DWORD PTR _f_info$GSCopy$[ebp], esi
	mov	DWORD PTR _dim$[ebp], ebx
	mov	DWORD PTR _gl$[ebp], edi
	call	_mat2d_setup
	mov	ecx, eax

; 297  : 
; 298  :   if ( METH_INSTANCE(f_info->method)->flags & USE_DENSITY )

	mov	eax, DWORD PTR [esi+8]
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	edx, DWORD PTR _meth_inst_list
	imul	eax, 2928				; 00000b70H
	add	esp, 16					; 00000010H
	test	DWORD PTR [eax+edx+140], 536870912	; 20000000H
	mov	DWORD PTR _mat$[ebp], ecx
	je	SHORT $LN24@lagrange_f@2

; 299  :       density = get_facet_density(f_info->id);

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR _web+236
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [eax+32]
	jmp	SHORT $LN83@lagrange_f@2
$LN24@lagrange_f@2:

; 300  :   else density = 1.0;

	fld1
$LN83@lagrange_f@2:

; 301  : 
; 302  :   for ( m = 0 ; m < gl->gnumpts ; m++ )  /*  integration point number */

	cmp	DWORD PTR [edi+4], 0
	fstp	QWORD PTR _density$[ebp]
	mov	DWORD PTR _m$[ebp], 0
	jle	$LN47@lagrange_f@2
	jmp	SHORT $LN22@lagrange_f@2
	npad	1
$LL52@lagrange_f@2:
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
$LN22@lagrange_f@2:

; 303  :   { REAL **tang = f_info->sides[m];

	mov	edx, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]

; 304  :      /* calculate tangents and det */ 
; 305  :      for ( i = 0 ; i < dim ; i++ )

	xor	esi, esi
	mov	DWORD PTR _tang$89270[ebp], eax
	test	ebx, ebx
	jle	SHORT $LN17@lagrange_f@2
	sub	eax, ecx
	mov	DWORD PTR tv714[ebp], ecx
	mov	DWORD PTR tv690[ebp], eax
$LL50@lagrange_f@2:

; 306  :         for ( j = 0 ; j <= i ; j++ )

	xor	edi, edi
	test	esi, esi
	js	SHORT $LN18@lagrange_f@2
	mov	ebx, DWORD PTR _mat$[ebp]
$LL16@lagrange_f@2:

; 307  :           mat[i][j] = mat[j][i] = SDIM_dot(tang[i],tang[j]);

	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR [eax+ebx]
	push	ecx
	mov	ecx, DWORD PTR tv714[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_dot
	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR tv714[ebp]
	fst	QWORD PTR [eax+esi*8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR tv690[ebp]
	fstp	QWORD PTR [edx+edi*8]
	inc	edi
	add	esp, 12					; 0000000cH
	add	ebx, 4
	cmp	edi, esi
	jle	SHORT $LL16@lagrange_f@2

; 306  :         for ( j = 0 ; j <= i ; j++ )

	mov	ebx, DWORD PTR _dim$[ebp]
$LN18@lagrange_f@2:

; 304  :      /* calculate tangents and det */ 
; 305  :      for ( i = 0 ; i < dim ; i++ )

	add	DWORD PTR tv714[ebp], 4
	inc	esi
	cmp	esi, ebx
	jl	SHORT $LL50@lagrange_f@2
	mov	edi, DWORD PTR _gl$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
$LN17@lagrange_f@2:

; 308  :      det = det_adjoint(mat,dim);

	push	ebx
	push	ecx
	call	_det_adjoint

; 309  :      if ( det <= 0.0 ) continue;

	fldz
	fcomp	ST(1)
	add	esp, 8
	fnstsw	ax
	test	ah, 1
	je	$LN55@lagrange_f@2

; 310  :      value += gl->gausswt[m]*sqrt(det);

	call	__CIsqrt
	mov	eax, DWORD PTR [edi+12]
	mov	ecx, DWORD PTR _m$[ebp]
	fld	QWORD PTR [eax+ecx*8]
	lea	eax, DWORD PTR [eax+ecx*8]
	fmul	ST(0), ST(1)

; 311  :      /* gradients */
; 312  :      fudge = density*gl->gausswt[m]/sqrt(det)/factorial[dim];
; 313  :      for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	edx, DWORD PTR _gl$[ebp]
	xor	edi, edi
	fadd	QWORD PTR _value$[ebp]
	fstp	QWORD PTR _value$[ebp]
	fld	QWORD PTR [eax]
	fmul	QWORD PTR _density$[ebp]
	fdivrp	ST(1), ST(0)
	fdiv	QWORD PTR _factorial[ebx*8]
	cmp	DWORD PTR [edx+16], edi
	jle	$LN58@lagrange_f@2
	fldz
$LN12@lagrange_f@2:

; 314  :         for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	DWORD PTR _web+616, eax
	jle	$LN11@lagrange_f@2
$LN53@lagrange_f@2:

; 315  :         { REAL sum = 0.0;

	fld	ST(0)

; 316  :           for ( i = 0 ; i < dim ; i++ )

	test	ebx, ebx
	jle	$LN4@lagrange_f@2
	mov	ecx, DWORD PTR _mat$[ebp]
	mov	edx, DWORD PTR _tang$89270[ebp]
	sub	edx, ecx
	mov	DWORD PTR tv1188[ebp], ecx
	mov	DWORD PTR tv690[ebp], edx
	mov	DWORD PTR tv65[ebp], ebx
$LN49@lagrange_f@2:

; 317  :              for ( ii = 0 ; ii < dim ; ii++ )

	xor	ebx, ebx
	cmp	DWORD PTR _dim$[ebp], 4
	jl	$LC42@lagrange_f@2
	mov	edx, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR [ecx]
	lea	esi, DWORD PTR [edx+eax*8]
	mov	eax, DWORD PTR _gl$[ebp]
	mov	edx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dim$[ebp]
	add	edx, -4					; fffffffcH
	shr	edx, 2
	add	ecx, 16					; 00000010H
	add	eax, 8
	inc	edx
	lea	ebx, DWORD PTR [edx*4]
	mov	DWORD PTR _ii$[ebp], ebx
$LN43@lagrange_f@2:

; 318  :                 sum += tang[i][j]*gl->gpolypart[m][ii][k]*mat[i][ii];

	mov	ebx, DWORD PTR [eax-8]
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR [eax-4]
	fmul	QWORD PTR [esi]
	add	eax, 16					; 00000010H
	add	ecx, 32					; 00000020H
	dec	edx
	fmul	QWORD PTR [ecx-48]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR [eax-16]
	fmul	QWORD PTR [esi]
	fmul	QWORD PTR [ecx-40]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR [eax-12]
	fmul	QWORD PTR [esi]
	fmul	QWORD PTR [ecx-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+edi*8]
	fmul	QWORD PTR [esi]
	fmul	QWORD PTR [ecx-24]
	faddp	ST(1), ST(0)
	jne	SHORT $LN43@lagrange_f@2

; 317  :              for ( ii = 0 ; ii < dim ; ii++ )

	mov	eax, DWORD PTR _j$[ebp]
	mov	ebx, DWORD PTR _ii$[ebp]
	mov	edx, DWORD PTR tv690[ebp]
	mov	ecx, DWORD PTR tv1188[ebp]
$LC42@lagrange_f@2:
	cmp	ebx, DWORD PTR _dim$[ebp]
	jge	SHORT $LN5@lagrange_f@2

; 314  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	edx, DWORD PTR [edx+ecx]
	lea	eax, DWORD PTR [edx+eax*8]

; 317  :              for ( ii = 0 ; ii < dim ; ii++ )

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv1212[ebp], eax
	mov	eax, DWORD PTR _gl$[ebp]
	lea	esi, DWORD PTR [edx+ebx*8]
	mov	edx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR _dim$[ebp]
	lea	edx, DWORD PTR [edx+ebx*4]
	sub	eax, ebx
$LC3@lagrange_f@2:

; 318  :                 sum += tang[i][j]*gl->gpolypart[m][ii][k]*mat[i][ii];

	mov	ebx, DWORD PTR [edx]
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR tv1212[ebp]
	fmul	QWORD PTR [ebx]
	add	edx, 4
	add	esi, 8
	dec	eax
	fmul	QWORD PTR [esi-8]
	faddp	ST(1), ST(0)
	jne	SHORT $LC3@lagrange_f@2

; 317  :              for ( ii = 0 ; ii < dim ; ii++ )

	mov	edx, DWORD PTR tv690[ebp]
	mov	eax, DWORD PTR _j$[ebp]
$LN5@lagrange_f@2:

; 316  :           for ( i = 0 ; i < dim ; i++ )

	add	ecx, 4
	dec	DWORD PTR tv65[ebp]
	mov	DWORD PTR tv1188[ebp], ecx
	jne	$LN49@lagrange_f@2
	mov	ebx, DWORD PTR _dim$[ebp]
$LN4@lagrange_f@2:

; 314  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]

; 319  :           f_info->grad[k][j] += fudge*sum;

	fmul	ST(0), ST(2)
	mov	edx, DWORD PTR [ecx+1336]
	mov	ecx, DWORD PTR [edx+edi*4]
	fadd	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	$LN53@lagrange_f@2
$LN11@lagrange_f@2:

; 311  :      /* gradients */
; 312  :      fudge = density*gl->gausswt[m]/sqrt(det)/factorial[dim];
; 313  :      for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	edx, DWORD PTR _gl$[ebp]
	inc	edi
	cmp	edi, DWORD PTR [edx+16]
	jl	$LN12@lagrange_f@2
	fstp	ST(1)
$LN58@lagrange_f@2:
	mov	edi, edx
$LN55@lagrange_f@2:

; 301  : 
; 302  :   for ( m = 0 ; m < gl->gnumpts ; m++ )  /*  integration point number */

	mov	eax, DWORD PTR _m$[ebp]

; 311  :      /* gradients */
; 312  :      fudge = density*gl->gausswt[m]/sqrt(det)/factorial[dim];
; 313  :      for ( k = 0 ; k < gl->lagpts ; k++ )

	fstp	ST(0)
	inc	eax
	mov	DWORD PTR _m$[ebp], eax
	cmp	eax, DWORD PTR [edi+4]
	jl	$LL52@lagrange_f@2
$LN47@lagrange_f@2:

; 320  :         }
; 321  :   }
; 322  : 
; 323  :   return density*value/factorial[dim];

	fld	QWORD PTR _density$[ebp]

; 324  : 
; 325  : } // end lagrange_facet_tension_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fmul	QWORD PTR _value$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	fdiv	QWORD PTR _factorial[ebx*8]
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_lagrange_facet_tension_grad ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_lagrange_facet_tension_hess
; Function compile flags: /Ogtp
;	COMDAT _lagrange_facet_tension_hess
_TEXT	SEGMENT
_matqXvS$ = -524					; size = 24
_term2$89370 = -500					; size = 8
_term1$89369 = -492					; size = 8
_fudge$ = -484						; size = 8
_hterm$89371 = -476					; size = 8
_coeff2$89357 = -468					; size = 8
_coeff1$89356 = -460					; size = 8
_jjjsum$89351 = -452					; size = 8
_gp00$89354 = -444					; size = 8
_detinv$ = -436						; size = 8
_gp11$89355 = -428					; size = 8
tv4747 = -420						; size = 4
tv4935 = -416						; size = 4
_value$ = -412						; size = 8
tv4940 = -404						; size = 4
_density$ = -400					; size = 8
tv1628 = -392						; size = 4
_dethess$ = -388					; size = 4
tv4361 = -384						; size = 4
_sums$ = -380						; size = 4
tv1548 = -376						; size = 4
tv680 = -376						; size = 4
_i2$89378 = -372					; size = 4
tv559 = -368						; size = 4
tv218 = -368						; size = 4
_f_info$GSCopy$ = -364					; size = 4
_mat$ = -360						; size = 4
tv3442 = -356						; size = 4
tv2678 = -356						; size = 4
_jjend$89368 = -356					; size = 4
tv883 = -352						; size = 4
_jj1$89379 = -352					; size = 4
tv4536 = -348						; size = 4
_ii$ = -348						; size = 4
tv4898 = -344						; size = 4
tv3437 = -344						; size = 4
tv2654 = -344						; size = 4
_tang$89322 = -340					; size = 4
tv3928 = -336						; size = 4
tv3417 = -336						; size = 4
tv434 = -336						; size = 4
_gl$ = -332						; size = 4
_jjend$89410 = -328					; size = 4
_m$ = -328						; size = 4
tv5845 = -324						; size = 4
tv5823 = -324						; size = 4
tv4570 = -324						; size = 4
tv1882 = -324						; size = 4
tv1859 = -324						; size = 4
_j$ = -320						; size = 4
tv4106 = -316						; size = 4
tv3807 = -316						; size = 4
_k$ = -312						; size = 4
_gp$89323 = -308					; size = 4
_dim$ = -304						; size = 4
tv4110 = -300						; size = 4
tv3817 = -300						; size = 4
tv2155 = -300						; size = 4
tv5493 = -296						; size = 4
tv2179 = -296						; size = 4
_j2$89380 = -296					; size = 4
_matxJ$ = -292						; size = 288
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_lagrange_facet_tension_hess PROC			; COMDAT

; 334  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 335  :   REAL value = 0.0;

	fldz
	push	ebx
	mov	ebx, DWORD PTR _f_info$[ebp]
	fstp	QWORD PTR _value$[ebp]
	push	esi

; 336  :   int i,ii,m,j,k,jj,kk;
; 337  :   REAL det;
; 338  :   REAL density,fudge;
; 339  :   int dim = web.dimension;

	mov	esi, DWORD PTR _web+620
	push	edi

; 340  :   struct gauss_lag *gl = &gauss_lagrange[dim][web.gauss2D_order];

	mov	edi, DWORD PTR _web+1596

; 341  :   MAT2D(mat,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	eax, DWORD PTR _matxJ$[ebp]
	shl	edi, 5
	add	edi, DWORD PTR _gauss_lagrange[esi*4]
	push	eax
	lea	ecx, DWORD PTR _matqXvS$[ebp]
	push	ecx
	mov	DWORD PTR _f_info$GSCopy$[ebp], ebx
	mov	DWORD PTR _dim$[ebp], esi
	mov	DWORD PTR _gl$[ebp], edi
	call	_mat2d_setup
	mov	DWORD PTR _mat$[ebp], eax

; 342  :   REAL **sums;
; 343  :   REAL ****dethess=NULL;
; 344  :   REAL detinv;
; 345  : 
; 346  :   if ( METH_INSTANCE(f_info->method)->flags & USE_DENSITY )

	mov	eax, DWORD PTR [ebx+8]
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	edx, DWORD PTR _meth_inst_list
	imul	eax, 2928				; 00000b70H
	add	esp, 16					; 00000010H
	test	DWORD PTR [eax+edx+140], 536870912	; 20000000H
	mov	DWORD PTR _dethess$[ebp], 0
	je	SHORT $LN77@lagrange_f@3

; 347  :       density = get_facet_density(f_info->id);

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR _web+236
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+32]
	jmp	SHORT $LN286@lagrange_f@3
$LN77@lagrange_f@3:

; 348  :   else density = 1.0;

	fld1
$LN286@lagrange_f@3:

; 349  : 
; 350  :   sums = dmatrix(0,gl->lagpts-1,0,SDIM-1);

	mov	eax, DWORD PTR _web+616
	fstp	QWORD PTR _density$[ebp]
	mov	ecx, DWORD PTR [edi+16]
	push	350					; 0000015eH
	push	OFFSET ??_C@_0L@OMBCHNHL@LAGRANGE?4C?$AA@
	dec	eax
	push	eax
	push	0
	dec	ecx
	push	ecx
	push	0
	call	_kb_dmatrix
	add	esp, 24					; 00000018H
	mov	DWORD PTR _sums$[ebp], eax

; 351  :   if ( dim > 2 ) dethess = dmatrix4(dim,dim,dim,dim);

	cmp	esi, 2
	jle	SHORT $LN75@lagrange_f@3
	push	351					; 0000015fH
	push	OFFSET ??_C@_0L@OMBCHNHL@LAGRANGE?4C?$AA@
	push	esi
	push	esi
	push	esi
	push	esi
	call	_kb_dmatrix4
	add	esp, 24					; 00000018H
	mov	DWORD PTR _dethess$[ebp], eax
$LN75@lagrange_f@3:

; 352  : 
; 353  :   for ( m = 0 ; m < gl->gnumpts ; m++ )  /*  integration point number */

	cmp	DWORD PTR [edi+4], 0
	mov	DWORD PTR _m$[ebp], 0
	jle	$LN155@lagrange_f@3
	npad	2
$LL74@lagrange_f@3:

; 354  :   { REAL **tang = f_info->sides[m];

	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [edx+1276]
	mov	eax, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]

; 355  :     REAL **gp = gl->gpolypart[m];

	mov	ecx, DWORD PTR _gl$[ebp]
	mov	DWORD PTR _tang$89322[ebp], edx
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx+eax*4]

; 356  : 
; 357  :     /* calculate tangents and det */ 
; 358  :     for ( i = 0 ; i < dim ; i++ )

	xor	ebx, ebx
	mov	DWORD PTR _gp$89323[ebp], eax
	cmp	DWORD PTR _dim$[ebp], ebx
	jle	SHORT $LN69@lagrange_f@3
	mov	ecx, DWORD PTR _mat$[ebp]
	mov	eax, DWORD PTR _tang$89322[ebp]
	sub	eax, ecx
	mov	DWORD PTR tv2179[ebp], ecx
	mov	DWORD PTR tv2155[ebp], eax
$LL71@lagrange_f@3:

; 359  :        for ( j = 0 ; j <= i ; j++ )

	xor	esi, esi
	test	ebx, ebx
	js	SHORT $LN70@lagrange_f@3
	mov	edi, DWORD PTR _mat$[ebp]
	npad	3
$LL152@lagrange_f@3:

; 360  :           mat[i][j] = mat[j][i] = SDIM_dot(tang[i],tang[j]);

	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR [eax+edi]
	push	ecx
	mov	ecx, DWORD PTR tv2179[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_dot
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR tv2179[ebp]
	fst	QWORD PTR [eax+ebx*8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR tv2155[ebp]
	fstp	QWORD PTR [edx+esi*8]
	inc	esi
	add	esp, 12					; 0000000cH
	add	edi, 4
	cmp	esi, ebx
	jle	SHORT $LL152@lagrange_f@3
$LN70@lagrange_f@3:

; 356  : 
; 357  :     /* calculate tangents and det */ 
; 358  :     for ( i = 0 ; i < dim ; i++ )

	add	DWORD PTR tv2179[ebp], 4
	inc	ebx
	cmp	ebx, DWORD PTR _dim$[ebp]
	jl	SHORT $LL71@lagrange_f@3
$LN69@lagrange_f@3:

; 361  :     if ( dim > 2 ) det_hess(mat,dethess,dim);  /* for hessian */

	mov	ebx, DWORD PTR _dim$[ebp]
	cmp	ebx, 2
	jle	SHORT $LN158@lagrange_f@3
	mov	eax, DWORD PTR _dethess$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	push	ebx
	push	eax
	push	ecx
	call	_det_hess
	add	esp, 12					; 0000000cH
$LN158@lagrange_f@3:

; 362  :     det = det_adjoint(mat,dim);

	mov	edx, DWORD PTR _mat$[ebp]
	push	ebx
	push	edx
	call	_det_adjoint

; 363  :     if ( det <= 0.0 ) continue;

	fldz
	fcomp	ST(1)
	add	esp, 8
	fnstsw	ax
	test	ah, 1
	je	$LN172@lagrange_f@3

; 364  :     detinv = (det == 0.0) ? 0.0 : 1/det;

	fld1

; 365  :     value += gl->gausswt[m]*sqrt(det);

	mov	eax, DWORD PTR _gl$[ebp]
	fdiv	ST(0), ST(1)
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR [ecx+edx*8]
	fstp	QWORD PTR _detinv$[ebp]
	call	__CIsqrt
	fmul	QWORD PTR [esi]
	fadd	QWORD PTR _value$[ebp]
	fstp	QWORD PTR _value$[ebp]

; 366  : 
; 367  :     /* gradients */
; 368  :     fudge = density*gl->gausswt[m]*sqrt(detinv)/factorial[dim];

	fld	QWORD PTR _detinv$[ebp]
	call	__CIsqrt
	fld	QWORD PTR _density$[ebp]
	fmul	QWORD PTR [esi]

; 369  :     for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	eax, DWORD PTR _gl$[ebp]
	xor	edi, edi
	fmulp	ST(1), ST(0)
	fdiv	QWORD PTR _factorial[ebx*8]
	fst	QWORD PTR _fudge$[ebp]
	fldz
	cmp	DWORD PTR [eax+16], edi
	jle	$LN61@lagrange_f@3
$LN63@lagrange_f@3:

; 370  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	edx, edx
	mov	DWORD PTR _j$[ebp], edx
	cmp	DWORD PTR _web+616, edx
	jle	$LN62@lagrange_f@3

; 371  :       { REAL sum = 0.0;

	mov	ecx, DWORD PTR _sums$[ebp]
	mov	eax, DWORD PTR [ecx+edi*4]
	mov	DWORD PTR tv1548[ebp], eax
$LN60@lagrange_f@3:
	fld	ST(0)

; 372  :         for ( i = 0 ; i < dim ; i++ )

	test	ebx, ebx
	jle	$LN55@lagrange_f@3
	mov	ecx, DWORD PTR _mat$[ebp]
	mov	esi, DWORD PTR _tang$89322[ebp]
	sub	esi, ecx
	mov	DWORD PTR tv2654[ebp], ecx
	mov	DWORD PTR tv2155[ebp], esi
	mov	DWORD PTR tv434[ebp], ebx
$LN57@lagrange_f@3:

; 373  :            for ( ii = 0 ; ii < dim ; ii++ )

	xor	eax, eax
	cmp	ebx, 4
	jl	$LC129@lagrange_f@3

; 370  :       for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR [ecx+esi]
	lea	esi, DWORD PTR [eax+edx*8]

; 373  :            for ( ii = 0 ; ii < dim ; ii++ )

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _gp$89323[ebp]
	lea	edx, DWORD PTR [ebx-4]
	shr	edx, 2
	add	eax, 16					; 00000010H
	add	ecx, 8
	inc	edx
	lea	ebx, DWORD PTR [edx*4]
	mov	DWORD PTR _ii$[ebp], ebx
$LN130@lagrange_f@3:

; 374  :               sum += tang[i][j]*gp[ii][k]*mat[i][ii];

	mov	ebx, DWORD PTR [ecx-8]
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR [ecx-4]
	fmul	QWORD PTR [esi]
	add	ecx, 16					; 00000010H
	add	eax, 32					; 00000020H
	dec	edx
	fmul	QWORD PTR [eax-48]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR [ecx-16]
	fmul	QWORD PTR [esi]
	fmul	QWORD PTR [eax-40]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR [ecx-12]
	fmul	QWORD PTR [esi]
	fmul	QWORD PTR [eax-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+edi*8]
	fmul	QWORD PTR [esi]
	fmul	QWORD PTR [eax-24]
	faddp	ST(1), ST(0)
	jne	SHORT $LN130@lagrange_f@3

; 373  :            for ( ii = 0 ; ii < dim ; ii++ )

	mov	ebx, DWORD PTR _dim$[ebp]
	mov	ecx, DWORD PTR tv2654[ebp]
	mov	eax, DWORD PTR _ii$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR tv2155[ebp]
$LC129@lagrange_f@3:
	cmp	eax, ebx
	jge	SHORT $LN56@lagrange_f@3

; 370  :       for ( j = 0 ; j < SDIM ; j++ )

	mov	esi, DWORD PTR [ecx+esi]
	lea	edx, DWORD PTR [esi+edx*8]
	mov	DWORD PTR tv2678[ebp], edx

; 373  :            for ( ii = 0 ; ii < dim ; ii++ )

	mov	edx, DWORD PTR [ecx]
	lea	edx, DWORD PTR [edx+eax*8]
$LC54@lagrange_f@3:

; 374  :               sum += tang[i][j]*gp[ii][k]*mat[i][ii];

	mov	esi, DWORD PTR _gp$89323[ebp]
	mov	esi, DWORD PTR [esi+eax*4]
	fld	QWORD PTR [esi+edi*8]
	mov	esi, DWORD PTR tv2678[ebp]
	fmul	QWORD PTR [esi]
	inc	eax
	add	edx, 8
	fmul	QWORD PTR [edx-8]
	faddp	ST(1), ST(0)
	cmp	eax, ebx
	jl	SHORT $LC54@lagrange_f@3

; 373  :            for ( ii = 0 ; ii < dim ; ii++ )

	mov	edx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR tv2155[ebp]
$LN56@lagrange_f@3:

; 372  :         for ( i = 0 ; i < dim ; i++ )

	add	ecx, 4
	dec	DWORD PTR tv434[ebp]
	mov	DWORD PTR tv2654[ebp], ecx
	jne	$LN57@lagrange_f@3
$LN55@lagrange_f@3:

; 375  :         sums[k][j] = sum;

	mov	eax, DWORD PTR tv1548[ebp]
	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	fst	QWORD PTR [eax+edx*8]
	mov	eax, DWORD PTR [ecx+1336]

; 376  :         f_info->grad[k][j] += fudge*sum;

	fmul	ST(0), ST(2)
	mov	ecx, DWORD PTR [eax+edi*4]
	lea	eax, DWORD PTR [ecx+edx*8]
	fadd	QWORD PTR [eax]
	inc	edx
	mov	DWORD PTR _j$[ebp], edx
	fstp	QWORD PTR [eax]
	cmp	edx, DWORD PTR _web+616
	jl	$LN60@lagrange_f@3
$LN62@lagrange_f@3:

; 369  :     for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	edx, DWORD PTR _gl$[ebp]
	inc	edi
	cmp	edi, DWORD PTR [edx+16]
	jl	$LN63@lagrange_f@3
$LN61@lagrange_f@3:

; 377  :       }
; 378  : 
; 379  :     /* hessians */
; 380  :     for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	eax, DWORD PTR _gl$[ebp]
	cmp	DWORD PTR [eax+16], 0
	mov	DWORD PTR _k$[ebp], 0
	jle	$LN285@lagrange_f@3
$LN51@lagrange_f@3:

; 381  :       for ( kk = 0 ; kk <= k ; kk++ )

	xor	esi, esi
	cmp	DWORD PTR _k$[ebp], esi
	jl	$LN50@lagrange_f@3
$LN48@lagrange_f@3:

; 382  :       { REAL  jjjsum;
; 383  :         REAL gp01;
; 384  :         REAL gp10;
; 385  :         REAL gp00=0.0;
; 386  :         REAL gp11=0.0;
; 387  :         REAL coeff1=0.0;
; 388  :         REAL coeff2=0.0;
; 389  :         if ( dim == 2 )

	mov	edx, DWORD PTR _dim$[ebp]
	fst	QWORD PTR _gp00$89354[ebp]

; 390  :         { gp01 = gp[0][k]*gp[1][kk];

	mov	ebx, DWORD PTR _gp$89323[ebp]
	fst	QWORD PTR _gp11$89355[ebp]
	mov	edi, DWORD PTR _k$[ebp]
	fst	QWORD PTR _coeff1$89356[ebp]
	fst	QWORD PTR _coeff2$89357[ebp]
	cmp	edx, 2
	jne	SHORT $LN45@lagrange_f@3
	mov	eax, DWORD PTR [ebx+4]
	mov	ecx, DWORD PTR [ebx]
	fld	QWORD PTR [eax+esi*8]
	fmul	QWORD PTR [ecx+edi*8]

; 391  :           gp10 = gp[1][k]*gp[0][kk];

	fld	QWORD PTR [ecx+esi*8]
	fmul	QWORD PTR [eax+edi*8]

; 392  :           gp00 = gp[0][k]*gp[0][kk];

	fld	QWORD PTR [ecx+esi*8]
	fmul	QWORD PTR [ecx+edi*8]
	fstp	QWORD PTR _gp00$89354[ebp]

; 393  :           gp11 = gp[1][k]*gp[1][kk];

	fld	QWORD PTR [eax+esi*8]
	fmul	QWORD PTR [eax+edi*8]
	fstp	QWORD PTR _gp11$89355[ebp]

; 394  :           coeff1 = 2*gp01-gp10;

	fld	ST(1)
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fsub	ST(0), ST(2)
	fstp	QWORD PTR _coeff1$89356[ebp]

; 395  :           coeff2 = 2*gp10-gp01;

	fmulp	ST(1), ST(0)
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR _coeff2$89357[ebp]
$LN45@lagrange_f@3:

; 396  :         }
; 397  :         for ( i = 0,jjjsum=0.0 ; i < dim ; i++ )

	fld	ST(0)
	fst	QWORD PTR _jjjsum$89351[ebp]
	test	edx, edx
	jle	$LN42@lagrange_f@3
	mov	ecx, DWORD PTR _mat$[ebp]
	sub	ebx, ecx
	mov	DWORD PTR tv3417[ebp], ecx
	mov	DWORD PTR tv3437[ebp], ebx
	mov	DWORD PTR tv883[ebp], edx
$LN44@lagrange_f@3:

; 398  :           for ( ii = 0 ; ii < dim ; ii++ )

	xor	eax, eax
	cmp	edx, 4
	jl	$LC132@lagrange_f@3

; 377  :       }
; 378  : 
; 379  :     /* hessians */
; 380  :     for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	eax, DWORD PTR [ebx+ecx]
	lea	ebx, DWORD PTR [eax+edi*8]

; 398  :           for ( ii = 0 ; ii < dim ; ii++ )

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _gp$89323[ebp]
	add	edx, -4					; fffffffcH
	shr	edx, 2
	add	eax, 16					; 00000010H
	add	ecx, 8
	inc	edx
	lea	edi, DWORD PTR [edx*4]
	mov	DWORD PTR _ii$[ebp], edi
$LN133@lagrange_f@3:

; 399  :             jjjsum += gp[i][k]*gp[ii][kk]*mat[i][ii];

	mov	edi, DWORD PTR [ecx-8]
	fld	QWORD PTR [edi+esi*8]
	mov	edi, DWORD PTR [ecx-4]
	fmul	QWORD PTR [ebx]
	add	ecx, 16					; 00000010H
	add	eax, 32					; 00000020H
	dec	edx
	fmul	QWORD PTR [eax-48]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi+esi*8]
	mov	edi, DWORD PTR [ecx-16]
	fmul	QWORD PTR [ebx]
	fmul	QWORD PTR [eax-40]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi+esi*8]
	mov	edi, DWORD PTR [ecx-12]
	fmul	QWORD PTR [ebx]
	fmul	QWORD PTR [eax-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi+esi*8]
	fmul	QWORD PTR [ebx]
	fmul	QWORD PTR [eax-24]
	faddp	ST(1), ST(0)
	jne	SHORT $LN133@lagrange_f@3

; 398  :           for ( ii = 0 ; ii < dim ; ii++ )

	mov	eax, DWORD PTR _ii$[ebp]
	mov	ebx, DWORD PTR tv3437[ebp]
	mov	ecx, DWORD PTR tv3417[ebp]
	mov	edi, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _dim$[ebp]
$LC132@lagrange_f@3:
	cmp	eax, edx
	jge	SHORT $LN43@lagrange_f@3

; 377  :       }
; 378  : 
; 379  :     /* hessians */
; 380  :     for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	ebx, DWORD PTR [ebx+ecx]
	lea	edi, DWORD PTR [ebx+edi*8]
	mov	DWORD PTR tv3442[ebp], edi

; 398  :           for ( ii = 0 ; ii < dim ; ii++ )

	mov	edi, DWORD PTR [ecx]
	lea	edi, DWORD PTR [edi+eax*8]
$LC41@lagrange_f@3:

; 399  :             jjjsum += gp[i][k]*gp[ii][kk]*mat[i][ii];

	mov	ebx, DWORD PTR _gp$89323[ebp]
	mov	ebx, DWORD PTR [ebx+eax*4]
	fld	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR tv3442[ebp]
	fmul	QWORD PTR [ebx]
	inc	eax
	add	edi, 8
	fmul	QWORD PTR [edi-8]
	faddp	ST(1), ST(0)
	cmp	eax, edx
	jl	SHORT $LC41@lagrange_f@3

; 398  :           for ( ii = 0 ; ii < dim ; ii++ )

	mov	edi, DWORD PTR _k$[ebp]
	mov	ebx, DWORD PTR tv3437[ebp]
$LN43@lagrange_f@3:

; 396  :         }
; 397  :         for ( i = 0,jjjsum=0.0 ; i < dim ; i++ )

	add	ecx, 4
	dec	DWORD PTR tv883[ebp]
	mov	DWORD PTR tv3417[ebp], ecx
	jne	$LN44@lagrange_f@3

; 399  :             jjjsum += gp[i][k]*gp[ii][kk]*mat[i][ii];

	fst	QWORD PTR _jjjsum$89351[ebp]
$LN42@lagrange_f@3:

; 400  :         for ( j = 0 ; j < SDIM ; j++ )

	cmp	DWORD PTR _web+616, 0
	mov	DWORD PTR _j$[ebp], 0
	jle	$LN284@lagrange_f@3
	mov	eax, DWORD PTR _tang$89322[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	lea	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx]
	sub	ecx, eax
	mov	DWORD PTR tv4935[ebp], ecx
	mov	ecx, DWORD PTR _sums$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	sub	ecx, eax
	mov	DWORD PTR tv1628[ebp], eax
	mov	DWORD PTR tv4898[ebp], eax
	mov	DWORD PTR tv4940[ebp], ecx
$LN157@lagrange_f@3:

; 401  :         { int jjend = (k==kk) ? j+1 : SDIM;

	cmp	DWORD PTR _k$[ebp], esi
	jne	SHORT $LN82@lagrange_f@3
	mov	edx, DWORD PTR _j$[ebp]
	inc	edx
	jmp	SHORT $LN287@lagrange_f@3
$LN82@lagrange_f@3:
	mov	edx, DWORD PTR _web+616
$LN287@lagrange_f@3:

; 402  :           REAL term1 =  (coeff1*tang[0][j] - gp00*tang[1][j]);

	mov	eax, DWORD PTR tv4898[ebp]
	fld	QWORD PTR [eax]
	mov	ecx, DWORD PTR tv4935[ebp]
	fmul	QWORD PTR _coeff1$89356[ebp]

; 403  :           REAL term2 =  (coeff2*tang[1][j] - gp11*tang[0][j]);
; 404  :           REAL hterm = -sums[k][j]*detinv;
; 405  : 
; 406  :           for ( jj = 0 ; jj < jjend ; jj++ )

	xor	ebx, ebx
	fld	QWORD PTR _gp00$89354[ebp]
	mov	DWORD PTR _jjend$89368[ebp], edx
	fmul	QWORD PTR [ecx+eax]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _term1$89369[ebp]
	fld	QWORD PTR _coeff2$89357[ebp]
	fmul	QWORD PTR [ecx+eax]
	mov	ecx, DWORD PTR tv4940[ebp]
	fld	QWORD PTR [eax]
	fmul	QWORD PTR _gp11$89355[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _term2$89370[ebp]
	fld	QWORD PTR [ecx+eax]
	fmul	QWORD PTR _detinv$[ebp]
	fchs
	fstp	QWORD PTR _hterm$89371[ebp]
	test	edx, edx
	jle	$LN37@lagrange_f@3
	mov	edx, DWORD PTR _sums$[ebp]
	mov	eax, DWORD PTR [edx+esi*4]
	sub	eax, DWORD PTR tv1628[ebp]
	mov	edi, DWORD PTR _dim$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR tv4747[ebp], eax
$LN156@lagrange_f@3:
	mov	eax, DWORD PTR tv1628[ebp]

; 407  :           { REAL sum,h;
; 408  :             int i1,i2,jj1,j2;
; 409  : 
; 410  :             h = hterm*sums[kk][jj];

	mov	ecx, DWORD PTR tv4747[ebp]
	lea	eax, DWORD PTR [eax+ebx*8]
	fld	QWORD PTR [ecx+eax]
	fmul	QWORD PTR _hterm$89371[ebp]

; 411  :             if ( dim == 2 )

	cmp	edi, 2
	jne	SHORT $LN288@lagrange_f@3

; 412  :             {
; 413  :               h +=  term1*tang[1][jj] + term2*tang[0][jj];

	mov	ecx, DWORD PTR _tang$89322[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	fld	QWORD PTR [ecx+ebx*8]
	fmul	QWORD PTR _term1$89369[ebp]
	fld	QWORD PTR [eax]
	fmul	QWORD PTR _term2$89370[ebp]
	faddp	ST(1), ST(0)
	jmp	$LN289@lagrange_f@3
$LN288@lagrange_f@3:

; 414  :             }
; 415  :             else if ( dim > 2 )

	jle	$LN30@lagrange_f@3

; 416  :             { sum = 0.0;

	fld	ST(2)

; 417  :               for (i1 = 0 ; i1 < dim ; i1++ )

	test	edi, edi
	jle	$LN27@lagrange_f@3
	mov	eax, DWORD PTR _tang$89322[ebp]
	fstp	ST(2)
	mov	ecx, DWORD PTR _dethess$[ebp]
	fstp	ST(3)
	mov	edx, DWORD PTR _dim$[ebp]
	mov	edi, eax
	sub	edi, DWORD PTR _gp$89323[ebp]
	sub	eax, ecx
	mov	DWORD PTR tv4361[ebp], edi
	mov	DWORD PTR tv4536[ebp], ecx
	mov	DWORD PTR tv4570[ebp], eax
	mov	DWORD PTR tv680[ebp], edx
$LN29@lagrange_f@3:

; 418  :               { REAL suma = 0.0;

	fld	ST(1)

; 419  :                  for ( jj1 = 0 ; jj1 < dim ; jj1++ )

	mov	DWORD PTR _jj1$89379[ebp], 0
$LN26@lagrange_f@3:

; 420  :                  { REAL sumb = 0.0;

	mov	ecx, DWORD PTR _gp$89323[ebp]
	fld	ST(2)

; 421  :                     for ( i2 = 0 ; i2 < dim ; i2++ )

	mov	DWORD PTR _i2$89378[ebp], 0
$LN23@lagrange_f@3:

; 422  :                     { /* note: inner loops here pretty well optimized */
; 423  :                       for ( j2 = 0 ; j2 < dim ; j2++ ) 

	cmp	DWORD PTR _dim$[ebp], 4
	mov	DWORD PTR _j2$89380[ebp], 0
	jl	$LC135@lagrange_f@3
	mov	eax, DWORD PTR _gp$89323[ebp]
	mov	edx, DWORD PTR tv4536[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR tv3807[ebp], eax
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _jj1$89379[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _i2$89378[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _tang$89322[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR tv3817[ebp], eax
	mov	eax, DWORD PTR _gp$89323[ebp]
	sub	eax, DWORD PTR _tang$89322[ebp]
	add	edx, 4
	mov	DWORD PTR tv3928[ebp], eax
	mov	eax, DWORD PTR _dim$[ebp]
	add	eax, -4					; fffffffcH
	shr	eax, 2
	inc	eax
	mov	DWORD PTR tv559[ebp], eax
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR _j2$89380[ebp], eax
$LN140@lagrange_f@3:

; 424  :                       { REAL dh = dethess[i1][jj1][i2][j2];

	mov	eax, DWORD PTR tv3817[ebp]
	fld	QWORD PTR [eax-16]

; 425  :                          if ( dh == 0.0 ) continue; 

	fld	ST(0)
	fld	ST(5)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN259@lagrange_f@3

; 426  :                          /* using symmetry of dethess */
; 427  :                          sumb += dh*(tang[i2][jj]*gp[j2][kk]+tang[j2][jj]*gp[i2][kk]);

	mov	eax, DWORD PTR [edi+ecx]
	mov	edi, DWORD PTR tv3807[ebp]
	fld	QWORD PTR [eax+ebx*8]
	mov	edi, DWORD PTR [edi-12]
	fmul	QWORD PTR [edi+esi*8]
	mov	eax, DWORD PTR [edx-4]
	mov	edi, DWORD PTR [ecx]
	fld	QWORD PTR [eax+ebx*8]
	fmul	QWORD PTR [edi+esi*8]
	mov	edi, DWORD PTR tv4361[ebp]
	faddp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN136@lagrange_f@3
$LN259@lagrange_f@3:
	fstp	ST(0)
$LN136@lagrange_f@3:

; 424  :                       { REAL dh = dethess[i1][jj1][i2][j2];

	mov	eax, DWORD PTR tv3817[ebp]
	fld	QWORD PTR [eax-8]

; 425  :                          if ( dh == 0.0 ) continue; 

	fld	ST(0)
	fld	ST(5)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN262@lagrange_f@3

; 426  :                          /* using symmetry of dethess */
; 427  :                          sumb += dh*(tang[i2][jj]*gp[j2][kk]+tang[j2][jj]*gp[i2][kk]);

	mov	eax, DWORD PTR [edi+ecx]
	mov	edi, DWORD PTR tv3928[ebp]
	fld	QWORD PTR [eax+ebx*8]
	mov	edi, DWORD PTR [edi+edx]
	fmul	QWORD PTR [edi+esi*8]
	mov	eax, DWORD PTR [edx]
	mov	edi, DWORD PTR [ecx]
	fld	QWORD PTR [eax+ebx*8]
	fmul	QWORD PTR [edi+esi*8]
	mov	edi, DWORD PTR tv4361[ebp]
	faddp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN137@lagrange_f@3
$LN262@lagrange_f@3:
	fstp	ST(0)
$LN137@lagrange_f@3:

; 424  :                       { REAL dh = dethess[i1][jj1][i2][j2];

	mov	eax, DWORD PTR tv3817[ebp]
	fld	QWORD PTR [eax]

; 425  :                          if ( dh == 0.0 ) continue; 

	fld	ST(0)
	fld	ST(5)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN265@lagrange_f@3

; 426  :                          /* using symmetry of dethess */
; 427  :                          sumb += dh*(tang[i2][jj]*gp[j2][kk]+tang[j2][jj]*gp[i2][kk]);

	mov	eax, DWORD PTR [edi+ecx]
	mov	edi, DWORD PTR tv3807[ebp]
	fld	QWORD PTR [eax+ebx*8]
	mov	edi, DWORD PTR [edi-4]
	fmul	QWORD PTR [edi+esi*8]
	mov	eax, DWORD PTR [edx+4]
	mov	edi, DWORD PTR [ecx]
	fld	QWORD PTR [eax+ebx*8]
	fmul	QWORD PTR [edi+esi*8]
	mov	edi, DWORD PTR tv4361[ebp]
	faddp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN138@lagrange_f@3
$LN265@lagrange_f@3:
	fstp	ST(0)
$LN138@lagrange_f@3:

; 424  :                       { REAL dh = dethess[i1][jj1][i2][j2];

	mov	eax, DWORD PTR tv3817[ebp]
	fld	QWORD PTR [eax+8]

; 425  :                          if ( dh == 0.0 ) continue; 

	fld	ST(0)
	fld	ST(5)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN268@lagrange_f@3

; 426  :                          /* using symmetry of dethess */
; 427  :                          sumb += dh*(tang[i2][jj]*gp[j2][kk]+tang[j2][jj]*gp[i2][kk]);

	mov	eax, DWORD PTR [edi+ecx]
	mov	edi, DWORD PTR tv3807[ebp]
	fld	QWORD PTR [eax+ebx*8]
	mov	edi, DWORD PTR [edi]
	fmul	QWORD PTR [edi+esi*8]
	mov	eax, DWORD PTR [edx+8]
	mov	edi, DWORD PTR [ecx]
	fld	QWORD PTR [eax+ebx*8]
	fmul	QWORD PTR [edi+esi*8]
	mov	edi, DWORD PTR tv4361[ebp]
	faddp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN160@lagrange_f@3
$LN268@lagrange_f@3:
	fstp	ST(0)
$LN160@lagrange_f@3:

; 422  :                     { /* note: inner loops here pretty well optimized */
; 423  :                       for ( j2 = 0 ; j2 < dim ; j2++ ) 

	add	DWORD PTR tv3817[ebp], 32		; 00000020H
	add	DWORD PTR tv3807[ebp], 16		; 00000010H
	add	edx, 16					; 00000010H
	dec	DWORD PTR tv559[ebp]
	jne	$LN140@lagrange_f@3
$LC135@lagrange_f@3:
	mov	edx, DWORD PTR _dim$[ebp]
	cmp	DWORD PTR _j2$89380[ebp], edx
	jge	$LN22@lagrange_f@3
	mov	edx, DWORD PTR _j2$89380[ebp]
	mov	eax, DWORD PTR _tang$89322[ebp]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR tv4536[ebp]
	mov	DWORD PTR tv4106[ebp], eax
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _jj1$89379[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _i2$89378[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _j2$89380[ebp]
	lea	eax, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR _gp$89323[ebp]
	sub	edx, DWORD PTR _tang$89322[ebp]
	mov	DWORD PTR tv4110[ebp], eax
	mov	eax, DWORD PTR _dim$[ebp]
	sub	eax, DWORD PTR _j2$89380[ebp]
	mov	DWORD PTR tv3928[ebp], edx
	mov	DWORD PTR tv218[ebp], eax
$LC20@lagrange_f@3:

; 424  :                       { REAL dh = dethess[i1][jj1][i2][j2];

	mov	eax, DWORD PTR tv4110[ebp]
	fld	QWORD PTR [eax]

; 425  :                          if ( dh == 0.0 ) continue; 

	fld	ST(0)
	fld	ST(5)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN275@lagrange_f@3

; 426  :                          /* using symmetry of dethess */
; 427  :                          sumb += dh*(tang[i2][jj]*gp[j2][kk]+tang[j2][jj]*gp[i2][kk]);

	mov	eax, DWORD PTR tv4106[ebp]
	mov	edx, DWORD PTR [edx+eax]
	fld	QWORD PTR [edx+esi*8]
	mov	eax, DWORD PTR [edi+ecx]
	fmul	QWORD PTR [eax+ebx*8]
	mov	edx, DWORD PTR tv4106[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR [ecx]
	fld	QWORD PTR [eax+ebx*8]
	fmul	QWORD PTR [edx+esi*8]
	mov	edx, DWORD PTR tv3928[ebp]
	faddp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN19@lagrange_f@3
$LN275@lagrange_f@3:
	fstp	ST(0)
$LN19@lagrange_f@3:

; 422  :                     { /* note: inner loops here pretty well optimized */
; 423  :                       for ( j2 = 0 ; j2 < dim ; j2++ ) 

	add	DWORD PTR tv4110[ebp], 8
	add	DWORD PTR tv4106[ebp], 4
	dec	DWORD PTR tv218[ebp]
	jne	SHORT $LC20@lagrange_f@3
$LN22@lagrange_f@3:

; 421  :                     for ( i2 = 0 ; i2 < dim ; i2++ )

	mov	eax, DWORD PTR _i2$89378[ebp]
	inc	eax
	add	ecx, 4
	mov	DWORD PTR _i2$89378[ebp], eax
	cmp	eax, DWORD PTR _dim$[ebp]
	jl	$LN23@lagrange_f@3

; 428  :                       }
; 429  :                     }
; 430  :                     suma += gp[jj1][k]*sumb;

	mov	eax, DWORD PTR _jj1$89379[ebp]
	mov	ecx, DWORD PTR _gp$89323[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _k$[ebp]
	fmul	QWORD PTR [edx+ecx*8]
	inc	eax
	mov	DWORD PTR _jj1$89379[ebp], eax
	faddp	ST(1), ST(0)
	cmp	eax, DWORD PTR _dim$[ebp]
	jl	$LN26@lagrange_f@3

; 431  :                  }
; 432  :                  sum += tang[i1][j]*suma;

	mov	eax, DWORD PTR tv4536[ebp]
	mov	edx, DWORD PTR tv4570[ebp]
	mov	ecx, DWORD PTR [edx+eax]
	mov	edx, DWORD PTR _j$[ebp]
	fmul	QWORD PTR [ecx+edx*8]
	add	eax, 4
	dec	DWORD PTR tv680[ebp]
	mov	DWORD PTR tv4536[ebp], eax
	faddp	ST(1), ST(0)
	jne	$LN29@lagrange_f@3

; 417  :               for (i1 = 0 ; i1 < dim ; i1++ )

	fld	QWORD PTR _jjjsum$89351[ebp]
	fld	QWORD PTR _fudge$[ebp]
	fxch	ST(4)
	fxch	ST(1)
	fxch	ST(2)
$LN27@lagrange_f@3:

; 433  :               }
; 434  :               h += sum;

	mov	edi, DWORD PTR _dim$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
$LN289@lagrange_f@3:
	faddp	ST(1), ST(0)
$LN30@lagrange_f@3:

; 435  :             }
; 436  :             if ( j==jj ) h += jjjsum;

	cmp	edx, ebx
	jne	SHORT $LN16@lagrange_f@3
	fadd	ST(0), ST(1)
$LN16@lagrange_f@3:

; 403  :           REAL term2 =  (coeff2*tang[1][j] - gp11*tang[0][j]);
; 404  :           REAL hterm = -sums[k][j]*detinv;
; 405  : 
; 406  :           for ( jj = 0 ; jj < jjend ; jj++ )

	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]

; 437  :             h *= fudge;

	fmul	ST(0), ST(3)
	mov	ecx, DWORD PTR [eax+1340]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [ecx+esi*4]
	mov	ecx, DWORD PTR [eax+edx*4]

; 438  :             f_info->hess[k][kk][j][jj] += h;

	fadd	QWORD PTR [ecx+ebx*8]
	lea	eax, DWORD PTR [ecx+ebx*8]
	inc	ebx
	fstp	QWORD PTR [eax]
	cmp	ebx, DWORD PTR _jjend$89368[ebp]
	jl	$LN156@lagrange_f@3
$LN37@lagrange_f@3:

; 400  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR _j$[ebp]
	add	DWORD PTR tv4898[ebp], 8
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, DWORD PTR _web+616
	jl	$LN157@lagrange_f@3
$LN284@lagrange_f@3:

; 381  :       for ( kk = 0 ; kk <= k ; kk++ )

	inc	esi

; 433  :               }
; 434  :               h += sum;

	fstp	ST(0)
	cmp	esi, DWORD PTR _k$[ebp]
	jle	$LN48@lagrange_f@3
$LN50@lagrange_f@3:

; 377  :       }
; 378  : 
; 379  :     /* hessians */
; 380  :     for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	eax, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _gl$[ebp]
	inc	eax
	mov	DWORD PTR _k$[ebp], eax
	cmp	eax, DWORD PTR [edx+16]
	jl	$LN51@lagrange_f@3
$LN285@lagrange_f@3:

; 433  :               }
; 434  :               h += sum;

	fstp	ST(0)
$LN172@lagrange_f@3:

; 352  : 
; 353  :   for ( m = 0 ; m < gl->gnumpts ; m++ )  /*  integration point number */

	mov	eax, DWORD PTR _m$[ebp]

; 433  :               }
; 434  :               h += sum;

	fstp	ST(0)
	mov	ecx, DWORD PTR _gl$[ebp]
	inc	eax
	mov	DWORD PTR _m$[ebp], eax
	cmp	eax, DWORD PTR [ecx+4]
	jl	$LL74@lagrange_f@3

; 352  : 
; 353  :   for ( m = 0 ; m < gl->gnumpts ; m++ )  /*  integration point number */

	mov	ebx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edi, ecx
$LN155@lagrange_f@3:

; 439  : 
; 440  : /* do outside of gauss point loop
; 441  :             if ( (kk != k) || (jj != j) )
; 442  :               f_info->hess[kk][k][jj][j] += h;
; 443  : */
; 444  :           }
; 445  :         }
; 446  :      }
; 447  :   }
; 448  : 
; 449  :   /* transpose part */
; 450  :   for ( k = 0 ; k < gl->lagpts ; k++ )

	xor	esi, esi
	cmp	DWORD PTR [edi+16], esi
	jle	$LN167@lagrange_f@3
	npad	1
$LL15@lagrange_f@3:

; 451  :     for ( kk = 0 ; kk <= k ; kk++ )

	xor	edi, edi
	test	esi, esi
	js	$LN14@lagrange_f@3
	npad	6
$LL168@lagrange_f@3:

; 452  :       for ( j = 0 ; j < SDIM ; j++ )

	mov	edx, DWORD PTR _web+616
	xor	ecx, ecx
	test	edx, edx
	jle	$LN11@lagrange_f@3
$LL163@lagrange_f@3:

; 453  :       { int jjend = (k==kk) ? j+1 : SDIM;

	cmp	esi, edi
	jne	SHORT $LN84@lagrange_f@3
	lea	edx, DWORD PTR [ecx+1]
$LN84@lagrange_f@3:

; 454  :         for ( jj = 0 ; jj < jjend ; jj++ )

	xor	eax, eax
	mov	DWORD PTR _jjend$89410[ebp], edx
	cmp	edx, 4
	jl	$LC142@lagrange_f@3
	mov	DWORD PTR tv5493[ebp], 2
$LL164@lagrange_f@3:

; 455  :         { if ( (kk != k) || (jj != j) )

	cmp	edi, esi
	jne	SHORT $LN143@lagrange_f@3
	cmp	eax, ecx
	je	SHORT $LN144@lagrange_f@3
$LN143@lagrange_f@3:

; 456  :              f_info->hess[kk][k][jj][j] += f_info->hess[k][kk][j][jj];

	mov	edx, DWORD PTR [ebx+1340]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx+eax*4]
	lea	edx, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR tv1859[ebp], edx
	mov	edx, DWORD PTR [ebx+1340]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR tv1859[ebp]
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
$LN144@lagrange_f@3:

; 455  :         { if ( (kk != k) || (jj != j) )

	cmp	edi, esi
	jne	SHORT $LN145@lagrange_f@3

; 454  :         for ( jj = 0 ; jj < jjend ; jj++ )

	mov	edx, DWORD PTR tv5493[ebp]
	dec	edx

; 455  :         { if ( (kk != k) || (jj != j) )

	cmp	edx, ecx
	je	SHORT $LN146@lagrange_f@3
$LN145@lagrange_f@3:

; 456  :              f_info->hess[kk][k][jj][j] += f_info->hess[k][kk][j][jj];

	mov	edx, DWORD PTR [ebx+1340]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx+eax*4+4]
	lea	edx, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR tv1882[ebp], edx
	mov	edx, DWORD PTR [ebx+1340]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8+8]
	mov	edx, DWORD PTR tv1882[ebp]
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
$LN146@lagrange_f@3:

; 455  :         { if ( (kk != k) || (jj != j) )

	cmp	edi, esi
	jne	SHORT $LN147@lagrange_f@3
	cmp	DWORD PTR tv5493[ebp], ecx
	je	SHORT $LN148@lagrange_f@3
$LN147@lagrange_f@3:

; 456  :              f_info->hess[kk][k][jj][j] += f_info->hess[k][kk][j][jj];

	mov	edx, DWORD PTR [ebx+1340]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx+eax*4+8]
	lea	edx, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR tv5823[ebp], edx
	mov	edx, DWORD PTR [ebx+1340]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8+16]
	mov	edx, DWORD PTR tv5823[ebp]
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
$LN148@lagrange_f@3:

; 455  :         { if ( (kk != k) || (jj != j) )

	cmp	edi, esi
	jne	SHORT $LN149@lagrange_f@3

; 454  :         for ( jj = 0 ; jj < jjend ; jj++ )

	mov	edx, DWORD PTR tv5493[ebp]
	inc	edx

; 455  :         { if ( (kk != k) || (jj != j) )

	cmp	edx, ecx
	je	SHORT $LN150@lagrange_f@3
$LN149@lagrange_f@3:

; 456  :              f_info->hess[kk][k][jj][j] += f_info->hess[k][kk][j][jj];

	mov	edx, DWORD PTR [ebx+1340]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx+eax*4+12]
	lea	edx, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR tv5845[ebp], edx
	mov	edx, DWORD PTR [ebx+1340]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8+24]
	mov	edx, DWORD PTR tv5845[ebp]
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
$LN150@lagrange_f@3:

; 454  :         for ( jj = 0 ; jj < jjend ; jj++ )

	mov	edx, DWORD PTR _jjend$89410[ebp]
	add	DWORD PTR tv5493[ebp], 4
	add	eax, 4
	add	edx, -3					; fffffffdH
	cmp	eax, edx
	jl	$LL164@lagrange_f@3
	mov	edx, DWORD PTR _jjend$89410[ebp]
$LC142@lagrange_f@3:
	cmp	eax, edx
	jge	SHORT $LN8@lagrange_f@3
	npad	1
$LC6@lagrange_f@3:

; 455  :         { if ( (kk != k) || (jj != j) )

	cmp	edi, esi
	jne	SHORT $LN2@lagrange_f@3
	cmp	eax, ecx
	je	SHORT $LN5@lagrange_f@3
$LN2@lagrange_f@3:

; 456  :              f_info->hess[kk][k][jj][j] += f_info->hess[k][kk][j][jj];

	mov	edx, DWORD PTR [ebx+1340]
	mov	ebx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	ebx, DWORD PTR [ebx+esi*4]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	ebx, DWORD PTR [ebx+eax*4]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _jjend$89410[ebp]
	fadd	QWORD PTR [ebx+ecx*8]
	lea	ebx, DWORD PTR [ebx+ecx*8]
	fstp	QWORD PTR [ebx]
	mov	ebx, DWORD PTR _f_info$GSCopy$[ebp]
$LN5@lagrange_f@3:

; 454  :         for ( jj = 0 ; jj < jjend ; jj++ )

	inc	eax
	cmp	eax, edx
	jl	SHORT $LC6@lagrange_f@3
$LN8@lagrange_f@3:

; 452  :       for ( j = 0 ; j < SDIM ; j++ )

	mov	edx, DWORD PTR _web+616
	inc	ecx
	cmp	ecx, edx
	jl	$LL163@lagrange_f@3
$LN11@lagrange_f@3:

; 451  :     for ( kk = 0 ; kk <= k ; kk++ )

	inc	edi
	cmp	edi, esi
	jle	$LL168@lagrange_f@3
$LN14@lagrange_f@3:

; 439  : 
; 440  : /* do outside of gauss point loop
; 441  :             if ( (kk != k) || (jj != j) )
; 442  :               f_info->hess[kk][k][jj][j] += h;
; 443  : */
; 444  :           }
; 445  :         }
; 446  :      }
; 447  :   }
; 448  : 
; 449  :   /* transpose part */
; 450  :   for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	eax, DWORD PTR _gl$[ebp]
	inc	esi
	cmp	esi, DWORD PTR [eax+16]
	jl	$LL15@lagrange_f@3
$LN167@lagrange_f@3:

; 457  :         }
; 458  :       }
; 459  : 
; 460  :   free_matrix(sums);

	mov	ecx, DWORD PTR _sums$[ebp]
	push	ecx
	call	_free_matrix

; 461  :   if ( dim > 2 ) free_matrix4(dethess);

	mov	esi, DWORD PTR _dim$[ebp]
	add	esp, 4
	cmp	esi, 2
	jle	SHORT $LN1@lagrange_f@3
	mov	edx, DWORD PTR _dethess$[ebp]
	push	edx
	call	_free_matrix4
	add	esp, 4
$LN1@lagrange_f@3:

; 462  : 
; 463  :   return density*value/factorial[dim];

	fld	QWORD PTR _density$[ebp]

; 464  : 
; 465  : } // end lagrange_facet_tension_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fmul	QWORD PTR _value$[ebp]
	pop	edi
	xor	ecx, ebp
	fdiv	QWORD PTR _factorial[esi*8]
	pop	esi
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_lagrange_facet_tension_hess ENDP
_TEXT	ENDS
PUBLIC	__real@bff0000000000000
PUBLIC	_e_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_edge_vector_integral_lagrange
EXTRN	_eval:PROC
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _edge_vector_integral_lagrange
_TEXT	SEGMENT
_weight$89432 = -92					; size = 8
_sign$ = -84						; size = 8
_value$ = -76						; size = 8
_k$ = -68						; size = 4
_e_info$GSCopy$ = -64					; size = 4
_gl$ = -60						; size = 4
_m$ = -56						; size = 4
_tang$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_edge_vector_integral_lagrange PROC			; COMDAT

; 484  : { int m,j,k;

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 485  :   REAL value=0.0;
; 486  :   REAL tang[MAXCOORD];
; 487  :   REAL sign = (get_eattr(e_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	ecx, DWORD PTR _web+124
	fldz
	push	ebx
	fst	QWORD PTR _value$[ebp]
	mov	ebx, DWORD PTR _e_info$[ebp]
	mov	eax, DWORD PTR [ebx]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	or	eax, ecx

; 495  :         for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	DWORD PTR _e_info$GSCopy$[ebp], ebx
	je	SHORT $LN12@edge_vecto

; 485  :   REAL value=0.0;
; 486  :   REAL tang[MAXCOORD];
; 487  :   REAL sign = (get_eattr(e_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN42@edge_vecto
$LN12@edge_vecto:
	fld1
$LN42@edge_vecto:

; 488  :   struct gauss_lag *gl = &gauss_lagrange[1][web.gauss1D_order];

	mov	eax, DWORD PTR _web+1592
	fstp	QWORD PTR _sign$[ebp]
	shl	eax, 5
	add	eax, DWORD PTR _gauss_lagrange+4

; 489  : 
; 490  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	xor	ecx, ecx
	mov	DWORD PTR _gl$[ebp], eax
	mov	DWORD PTR _m$[ebp], ecx
	cmp	DWORD PTR [eax+4], ecx
	jle	$LN7@edge_vecto
	mov	edx, DWORD PTR _web+616
	push	esi
	push	edi
$LN25@edge_vecto:

; 491  :   { REAL weight = sign*gl->gausswt[m];

	mov	esi, DWORD PTR [eax+12]
	fld	QWORD PTR [esi+ecx*8]

; 492  :     e_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	mov	esi, DWORD PTR [ebx+1268]
	fmul	QWORD PTR _sign$[ebp]
	mov	esi, DWORD PTR [esi+ecx*4]
	add	edx, edx
	fstp	QWORD PTR _weight$89432[ebp]
	fild	DWORD PTR _m$[ebp]
	fstp	QWORD PTR [esi+edx*8]

; 493  :      for ( j = 0 ; j < SDIM ; j++ )

	mov	edx, DWORD PTR _web+616
	xor	esi, esi
	test	edx, edx
	jle	$LN8@edge_vecto
	npad	5
$LL43@edge_vecto:
	mov	edi, DWORD PTR [eax+16]
	fstp	ST(0)

; 494  :      { tang[j] = 0.0;

	fldz

; 495  :         for ( k = 0 ; k < gl->lagpts ; k++ )

	xor	edx, edx
	fstp	QWORD PTR _tang$[ebp+esi*8]
	cmp	edi, 4
	jl	SHORT $LC21@edge_vecto

; 494  :      { tang[j] = 0.0;

	mov	edx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR [eax]
	lea	edx, DWORD PTR [edi-4]
	shr	edx, 2
	add	eax, 16					; 00000010H
	inc	edx
	lea	ecx, DWORD PTR [ebx+420]
	lea	ebx, DWORD PTR [edx*4]
	mov	DWORD PTR _k$[ebp], ebx

; 495  :         for ( k = 0 ; k < gl->lagpts ; k++ )

$LL22@edge_vecto:

; 496  :           tang[j] += gl->gpolypart[m][0][k]*e_info->x[k][j];

	mov	ebx, DWORD PTR [ecx-4]
	fld	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR [ecx]
	fmul	QWORD PTR [eax-16]
	add	ecx, 16					; 00000010H
	add	eax, 32					; 00000020H
	dec	edx
	fadd	QWORD PTR _tang$[ebp+esi*8]
	fld	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR [ecx-12]
	fmul	QWORD PTR [eax-40]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR [ecx-8]
	fmul	QWORD PTR [eax-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+esi*8]
	fmul	QWORD PTR [eax-24]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _tang$[ebp+esi*8]
	jne	SHORT $LL22@edge_vecto

; 494  :      { tang[j] = 0.0;

	mov	edx, DWORD PTR _k$[ebp]
	mov	ebx, DWORD PTR _e_info$GSCopy$[ebp]
	mov	eax, DWORD PTR _gl$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
$LC21@edge_vecto:

; 495  :         for ( k = 0 ; k < gl->lagpts ; k++ )

	cmp	edx, edi
	jge	SHORT $LN20@edge_vecto
	mov	eax, DWORD PTR [eax+24]
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [eax+edx*8]
	lea	eax, DWORD PTR [ebx+edx*4+416]
	sub	edi, edx
$LC3@edge_vecto:

; 496  :           tang[j] += gl->gpolypart[m][0][k]*e_info->x[k][j];

	mov	edx, DWORD PTR [eax]
	fld	QWORD PTR [edx+esi*8]
	add	eax, 4
	fmul	QWORD PTR [ecx]
	add	ecx, 8
	dec	edi
	fadd	QWORD PTR _tang$[ebp+esi*8]
	fstp	QWORD PTR _tang$[ebp+esi*8]
	jne	SHORT $LC3@edge_vecto

; 495  :         for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	ecx, DWORD PTR _m$[ebp]
$LN20@edge_vecto:

; 497  :         value += weight*tang[j]*eval(METH_INSTANCE(abs(e_info->method))->expr[j],
; 498  :                   e_info->gauss_pt[m],e_info->id,NULL);

	mov	eax, DWORD PTR [ebx]
	mov	edx, DWORD PTR [ebx+1268]
	push	0
	push	eax
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	eax, DWORD PTR [ebx+8]
	mov	ecx, DWORD PTR _meth_inst_list
	cdq
	xor	eax, edx
	sub	eax, edx
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 732				; 000002dcH
	add	eax, esi
	mov	edx, DWORD PTR [ecx+eax*4+232]
	push	edx
	call	_eval
	mov	edx, DWORD PTR _web+616
	fld	QWORD PTR _tang$[ebp+esi*8]
	mov	eax, DWORD PTR _gl$[ebp]
	fmul	QWORD PTR _weight$89432[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	inc	esi
	add	esp, 16					; 00000010H
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR _value$[ebp]
	fst	QWORD PTR _value$[ebp]
	cmp	esi, edx
	jl	$LL43@edge_vecto
$LN8@edge_vecto:

; 489  : 
; 490  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	inc	ecx
	mov	DWORD PTR _m$[ebp], ecx
	cmp	ecx, DWORD PTR [eax+4]
	jl	$LN25@edge_vecto
	pop	edi
	pop	esi
$LN7@edge_vecto:

; 499  :      }
; 500  :   }
; 501  :   return value;
; 502  : } // end edge_vector_integral_lagrange()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_edge_vector_integral_lagrange ENDP
_TEXT	ENDS
PUBLIC	_e_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_edge_vector_integral_lagrange_grad
EXTRN	_eval_all:PROC
; Function compile flags: /Ogtp
;	COMDAT _edge_vector_integral_lagrange_grad
_TEXT	SEGMENT
_weight$89459 = -424					; size = 8
_sign$ = -416						; size = 8
_value$ = -408						; size = 8
_e_info$GSCopy$ = -400					; size = 4
tv741 = -396						; size = 4
_k$ = -396						; size = 4
tv739 = -392						; size = 4
tv459 = -392						; size = 4
_j$ = -392						; size = 4
_m$ = -392						; size = 4
_derivs$ = -388						; size = 288
_val$ = -100						; size = 48
_tang$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_edge_vector_integral_lagrange_grad PROC		; COMDAT

; 513  : { int m,j,k,i;

	push	ebp
	mov	ebp, esp
	sub	esp, 424				; 000001a8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _e_info$[ebp]

; 514  :   REAL value = 0.0;

	fldz

; 515  :   REAL val[MAXCOORD];
; 516  :   REAL derivs[MAXCOORD][MAXCOORD];
; 517  :   REAL sum;
; 518  :   REAL tang[MAXCOORD];
; 519  :   REAL sign = (get_eattr(e_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	eax, DWORD PTR [ecx]
	fld	ST(0)
	mov	edx, DWORD PTR _web+124
	fst	QWORD PTR _value$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	edx, edx
	or	eax, edx

; 528  :               tang[j] += gl->gpolypart[m][0][k]*e_info->x[k][j];

	mov	DWORD PTR _e_info$GSCopy$[ebp], ecx
	je	SHORT $LN24@edge_vecto@2

; 515  :   REAL val[MAXCOORD];
; 516  :   REAL derivs[MAXCOORD][MAXCOORD];
; 517  :   REAL sum;
; 518  :   REAL tang[MAXCOORD];
; 519  :   REAL sign = (get_eattr(e_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN93@edge_vecto@2
$LN24@edge_vecto@2:
	fld1
$LN93@edge_vecto@2:
	push	esi
	fstp	QWORD PTR _sign$[ebp]

; 520  :   struct gauss_lag *gl = &gauss_lagrange[1][web.gauss1D_order];

	mov	esi, DWORD PTR _web+1592
	shl	esi, 5
	add	esi, DWORD PTR _gauss_lagrange+4
	push	edi

; 521  : 
; 522  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	xor	edi, edi
	mov	DWORD PTR _m$[ebp], edi
	cmp	DWORD PTR [esi+4], edx
	jle	$LN54@edge_vecto@2
	mov	edx, DWORD PTR _web+616
	push	ebx
	jmp	SHORT $LN94@edge_vecto@2
	npad	1
$LL91@edge_vecto@2:
	mov	ecx, DWORD PTR _e_info$GSCopy$[ebp]
$LN94@edge_vecto@2:

; 523  :   { REAL weight = sign*gl->gausswt[m];

	mov	eax, DWORD PTR [esi+12]
	fstp	ST(0)
	fld	QWORD PTR [eax+edi*8]

; 524  :     e_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	mov	eax, DWORD PTR [ecx+1268]
	fmul	QWORD PTR _sign$[ebp]
	mov	eax, DWORD PTR [eax+edi*4]
	add	edx, edx
	fstp	QWORD PTR _weight$89459[ebp]
	fild	DWORD PTR _m$[ebp]
	fstp	QWORD PTR [eax+edx*8]

; 525  :      for ( j = 0 ; j < SDIM ; j++ ) 

	xor	edx, edx
	mov	DWORD PTR _j$[ebp], edx
	cmp	DWORD PTR _web+616, edx
	jle	SHORT $LN65@edge_vecto@2
$LN48@edge_vecto@2:

; 527  :           for ( k = 0 ; k < gl->lagpts ; k++ )

	xor	eax, eax
	fst	QWORD PTR _tang$[ebp+edx*8]
	cmp	DWORD PTR [esi+16], eax
	jle	SHORT $LN17@edge_vecto@2

; 526  :         { tang[j] = 0.0;

	add	ecx, 416				; 000001a0H
$LN15@edge_vecto@2:

; 528  :               tang[j] += gl->gpolypart[m][0][k]*e_info->x[k][j];

	mov	edx, DWORD PTR [esi+24]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _j$[ebp]
	mov	ebx, DWORD PTR [ecx]
	fmul	QWORD PTR [ebx+edx*8]
	inc	eax
	add	ecx, 4
	fadd	QWORD PTR _tang$[ebp+edx*8]
	fstp	QWORD PTR _tang$[ebp+edx*8]
	cmp	eax, DWORD PTR [esi+16]
	jl	SHORT $LN15@edge_vecto@2

; 527  :           for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	ecx, DWORD PTR _e_info$GSCopy$[ebp]
$LN17@edge_vecto@2:

; 525  :      for ( j = 0 ; j < SDIM ; j++ ) 

	inc	edx
	mov	DWORD PTR _j$[ebp], edx
	cmp	edx, DWORD PTR _web+616
	jl	SHORT $LN48@edge_vecto@2
$LN65@edge_vecto@2:

; 529  :         }
; 530  :         for ( j = 0 ; j < SDIM ; j++ ) 

	xor	ebx, ebx
	fstp	ST(0)
	cmp	DWORD PTR _web+616, ebx
	jle	$LN10@edge_vecto@2
	lea	eax, DWORD PTR _val$[ebp]
	lea	edx, DWORD PTR _derivs$[ebp]
	mov	DWORD PTR tv739[ebp], eax
	mov	DWORD PTR tv741[ebp], edx
	jmp	SHORT $LN12@edge_vecto@2
$LL46@edge_vecto@2:
	mov	ecx, DWORD PTR _e_info$GSCopy$[ebp]
$LN12@edge_vecto@2:

; 531  :           eval_all(METH_INSTANCE(abs(e_info->method))->expr[j],
; 532  :                e_info->gauss_pt[m],SDIM,val+j,derivs[j],e_info->id);

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR tv741[ebp]
	push	eax
	mov	eax, DWORD PTR tv739[ebp]
	push	edx
	mov	edx, DWORD PTR _web+616
	push	eax
	mov	eax, DWORD PTR [ecx+1268]
	push	edx
	mov	edx, DWORD PTR [eax+edi*4]
	mov	eax, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _meth_inst_list
	push	edx
	cdq
	xor	eax, edx
	sub	eax, edx
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 732				; 000002dcH
	add	eax, ebx
	mov	edx, DWORD PTR [ecx+eax*4+232]
	push	edx
	call	_eval_all
	add	DWORD PTR tv741[ebp], 48		; 00000030H
	add	DWORD PTR tv739[ebp], 8
	inc	ebx
	add	esp, 24					; 00000018H
	cmp	ebx, DWORD PTR _web+616
	jl	SHORT $LL46@edge_vecto@2
$LN10@edge_vecto@2:

; 533  :         value += weight*SDIM_dot(val,tang);

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _tang$[ebp]
	push	ecx
	lea	edx, DWORD PTR _val$[ebp]
	push	edx
	call	_dot
	fld	QWORD PTR _weight$89459[ebp]

; 534  :         for ( k = 0 ; k < SDIM ; k++ )

	mov	edx, DWORD PTR _web+616
	fmul	ST(1), ST(0)
	fxch	ST(1)
	xor	ebx, ebx
	add	esp, 12					; 0000000cH
	fadd	QWORD PTR _value$[ebp]
	mov	DWORD PTR _k$[ebp], ebx
	fst	QWORD PTR _value$[ebp]
	test	edx, edx
	jle	$LN67@edge_vecto@2
	mov	ecx, DWORD PTR [esi+16]
	fldz
	mov	DWORD PTR tv459[ebp], ecx
$LN9@edge_vecto@2:

; 535  :           { for ( sum = 0.0, j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	fld	ST(0)
	cmp	edx, 4
	jl	SHORT $LC41@edge_vecto@2

; 534  :         for ( k = 0 ; k < SDIM ; k++ )

	lea	ecx, DWORD PTR _derivs$[ebp+ebx*8+48]
$LN47@edge_vecto@2:

; 536  :                  sum += derivs[j][k]*tang[j];

	fld	QWORD PTR _tang$[ebp+eax*8]
	add	eax, 4
	fmul	QWORD PTR [ecx-48]
	lea	ebx, DWORD PTR [edx-3]
	add	ecx, 192				; 000000c0H
	faddp	ST(1), ST(0)
	fld	QWORD PTR _tang$[ebp+eax*8-24]
	fmul	QWORD PTR [ecx-192]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _tang$[ebp+eax*8-16]
	fmul	QWORD PTR [ecx-144]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _tang$[ebp+eax*8-8]
	fmul	QWORD PTR [ecx-96]
	faddp	ST(1), ST(0)
	cmp	eax, ebx
	jl	SHORT $LN47@edge_vecto@2
	mov	ecx, DWORD PTR tv459[ebp]
	mov	ebx, DWORD PTR _k$[ebp]
$LC41@edge_vecto@2:

; 535  :           { for ( sum = 0.0, j = 0 ; j < SDIM ; j++ )

	cmp	eax, edx
	jge	SHORT $LN40@edge_vecto@2
	lea	ecx, DWORD PTR [eax+eax*2]
	lea	ecx, DWORD PTR [ebx+ecx*2]
	lea	ecx, DWORD PTR _derivs$[ebp+ecx*8]
$LC6@edge_vecto@2:

; 536  :                  sum += derivs[j][k]*tang[j];

	fld	QWORD PTR _tang$[ebp+eax*8]
	inc	eax
	fmul	QWORD PTR [ecx]
	add	ecx, 48					; 00000030H
	faddp	ST(1), ST(0)
	cmp	eax, edx
	jl	SHORT $LC6@edge_vecto@2

; 535  :           { for ( sum = 0.0, j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR tv459[ebp]
$LN40@edge_vecto@2:

; 537  :              for ( i = 0 ; i < gl->lagpts ; i++ )

	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN82@edge_vecto@2
$LN3@edge_vecto@2:

; 534  :         for ( k = 0 ; k < SDIM ; k++ )

	mov	edx, DWORD PTR _e_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [edx+1336]
	mov	edx, DWORD PTR [ecx+eax*4]
	lea	ecx, DWORD PTR [edx+ebx*8]

; 538  :                 e_info->grad[i][k] += 
; 539  :                   weight*(gl->gpolypart[m][0][i]*val[k] + gl->gpoly[m][i]*sum);

	mov	edx, DWORD PTR [esi+24]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR [esi+20]
	fmul	QWORD PTR _val$[ebp+ebx*8]
	mov	edx, DWORD PTR [edx+edi*4]
	fld	QWORD PTR [edx+eax*8]
	inc	eax
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR [esi+16]
	mov	DWORD PTR tv459[ebp], ecx
	cmp	eax, ecx
	jl	SHORT $LN3@edge_vecto@2

; 537  :              for ( i = 0 ; i < gl->lagpts ; i++ )

	mov	edx, DWORD PTR _web+616
$LN82@edge_vecto@2:

; 534  :         for ( k = 0 ; k < SDIM ; k++ )

	inc	ebx

; 537  :              for ( i = 0 ; i < gl->lagpts ; i++ )

	fstp	ST(0)
	mov	DWORD PTR _k$[ebp], ebx
	cmp	ebx, edx
	jl	$LN9@edge_vecto@2

; 534  :         for ( k = 0 ; k < SDIM ; k++ )

	fstp	ST(2)
	jmp	SHORT $LN20@edge_vecto@2
$LN67@edge_vecto@2:
	fstp	ST(1)
	fldz
	fxch	ST(1)
$LN20@edge_vecto@2:

; 521  : 
; 522  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	inc	edi
	mov	DWORD PTR _m$[ebp], edi
	cmp	edi, DWORD PTR [esi+4]
	jl	$LL91@edge_vecto@2
	pop	ebx
$LN54@edge_vecto@2:

; 540  :           }
; 541  :      }
; 542  : 
; 543  :   return value;
; 544  : } // end edge_vector_integral_lagrange_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(1)
	pop	edi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_edge_vector_integral_lagrange_grad ENDP
_TEXT	ENDS
PUBLIC	_e_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_edge_vector_integral_lagrange_hess
EXTRN	_eval_second:PROC
EXTRN	_mat3d_setup:PROC
; Function compile flags: /Ogtp
;	COMDAT _edge_vector_integral_lagrange_hess
_TEXT	SEGMENT
_secondqXvS$ = -2340					; size = 168
_sign$ = -2172						; size = 8
_value$ = -2164						; size = 8
_weight$89503 = -2156					; size = 8
tv2440 = -2152						; size = 4
_i$ = -2148						; size = 4
_second$ = -2144					; size = 4
_m$ = -2140						; size = 4
_e_info$GSCopy$ = -2136					; size = 4
tv1155 = -2132						; size = 4
_ii$ = -2132						; size = 4
tv2495 = -2128						; size = 4
_k$ = -2128						; size = 4
_j$ = -2128						; size = 4
tv2585 = -2124						; size = 4
tv715 = -2124						; size = 4
tv1911 = -2120						; size = 4
tv1153 = -2120						; size = 4
tv917 = -2120						; size = 4
_secondxJ$ = -2116					; size = 1728
_derivs$ = -388						; size = 288
_val$ = -100						; size = 48
_tang$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_edge_vector_integral_lagrange_hess PROC		; COMDAT

; 555  : { int m,i,j,k,ii,kk;

	push	ebp
	mov	ebp, esp
	sub	esp, 2340				; 00000924H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 556  :   REAL value = 0.0;

	fldz
	push	ebx
	push	esi
	fstp	QWORD PTR _value$[ebp]
	push	edi
	mov	edi, DWORD PTR _e_info$[ebp]

; 557  :   REAL val[MAXCOORD];
; 558  :   REAL derivs[MAXCOORD][MAXCOORD];
; 559  :   REAL sum;
; 560  :   MAT3D(second,MAXCOORD,MAXCOORD,MAXCOORD);

	push	6
	push	6
	push	6
	lea	eax, DWORD PTR _secondxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _secondqXvS$[ebp]
	push	ecx
	mov	DWORD PTR _e_info$GSCopy$[ebp], edi
	call	_mat3d_setup

; 561  :   REAL tang[MAXCOORD];
; 562  :   REAL sign = (get_eattr(e_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	edx, DWORD PTR [edi]
	mov	DWORD PTR _second$[ebp], eax
	mov	eax, DWORD PTR _web+124
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	add	esp, 20					; 00000014H
	or	eax, ecx
	je	SHORT $LN39@edge_vecto@3
	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN149@edge_vecto@3
$LN39@edge_vecto@3:
	fld1
$LN149@edge_vecto@3:

; 563  :   struct gauss_lag *gl = &gauss_lagrange[1][web.gauss1D_order];

	mov	esi, DWORD PTR _web+1592
	fstp	QWORD PTR _sign$[ebp]
	shl	esi, 5
	add	esi, DWORD PTR _gauss_lagrange+4

; 564  : 
; 565  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	xor	ebx, ebx
	mov	DWORD PTR _m$[ebp], ebx
	cmp	DWORD PTR [esi+4], ecx
	jle	$LN71@edge_vecto@3
	fldz
	jmp	SHORT $LN36@edge_vecto@3
	npad	5
$LL148@edge_vecto@3:
	mov	edi, DWORD PTR _e_info$GSCopy$[ebp]
	fstp	ST(0)
$LN36@edge_vecto@3:

; 566  :   { REAL weight = sign*gl->gausswt[m];

	mov	ecx, DWORD PTR [esi+12]
	fld	QWORD PTR [ecx+ebx*8]

; 567  :     e_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	mov	edx, DWORD PTR [edi+1268]
	fmul	QWORD PTR _sign$[ebp]
	mov	eax, DWORD PTR _web+616
	mov	ecx, DWORD PTR [edx+ebx*4]
	add	eax, eax
	fstp	QWORD PTR _weight$89503[ebp]

; 568  :      for ( j = 0 ; j < SDIM ; j++ ) 

	xor	edx, edx
	fild	DWORD PTR _m$[ebp]
	mov	DWORD PTR _j$[ebp], edx
	fstp	QWORD PTR [ecx+eax*8]
	mov	ecx, DWORD PTR _web+616
	test	ecx, ecx
	jle	SHORT $LN91@edge_vecto@3
$LN33@edge_vecto@3:

; 570  :           for ( k = 0 ; k < gl->lagpts ; k++ )

	xor	eax, eax
	fst	QWORD PTR _tang$[ebp+edx*8]
	cmp	DWORD PTR [esi+16], eax
	jle	SHORT $LN32@edge_vecto@3

; 569  :         { tang[j] = 0.0;

	lea	ecx, DWORD PTR [edi+416]
$LN30@edge_vecto@3:

; 571  :               tang[j] += gl->gpolypart[m][0][k]*e_info->x[k][j];

	mov	edx, DWORD PTR [esi+24]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _j$[ebp]
	mov	edi, DWORD PTR [ecx]
	fmul	QWORD PTR [edi+edx*8]
	inc	eax
	add	ecx, 4
	fadd	QWORD PTR _tang$[ebp+edx*8]
	fstp	QWORD PTR _tang$[ebp+edx*8]
	cmp	eax, DWORD PTR [esi+16]
	jl	SHORT $LN30@edge_vecto@3

; 570  :           for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	edi, DWORD PTR _e_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR _web+616
$LN32@edge_vecto@3:

; 568  :      for ( j = 0 ; j < SDIM ; j++ ) 

	inc	edx
	mov	DWORD PTR _j$[ebp], edx
	cmp	edx, ecx
	jl	SHORT $LN33@edge_vecto@3
$LN91@edge_vecto@3:

; 572  :         }
; 573  :         for ( j = 0 ; j < SDIM ; j++ ) 

	xor	edi, edi
	fstp	ST(0)
	test	ecx, ecx
	jle	$LN25@edge_vecto@3
	lea	eax, DWORD PTR _val$[ebp]
	lea	edx, DWORD PTR _derivs$[ebp]
	mov	DWORD PTR tv1153[ebp], eax
	mov	DWORD PTR tv1155[ebp], edx
$LL80@edge_vecto@3:

; 574  :           eval_second(METH_INSTANCE(abs(e_info->method))->expr[j],
; 575  :             e_info->gauss_pt[m],SDIM,val+j,derivs[j],second[j],e_info->id);

	mov	eax, DWORD PTR _e_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	edx, DWORD PTR _second$[ebp]
	mov	edx, DWORD PTR [edx+edi*4]
	push	edx
	mov	edx, DWORD PTR tv1155[ebp]
	push	edx
	mov	edx, DWORD PTR tv1153[ebp]
	push	edx
	push	ecx
	mov	ecx, DWORD PTR [eax+1268]
	mov	eax, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+ebx*4]
	mov	ecx, DWORD PTR _meth_inst_list
	push	edx
	cdq
	xor	eax, edx
	sub	eax, edx
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 732				; 000002dcH
	add	eax, edi
	mov	edx, DWORD PTR [ecx+eax*4+232]
	push	edx
	call	_eval_second
	mov	ecx, DWORD PTR _web+616
	add	DWORD PTR tv1155[ebp], 48		; 00000030H
	add	DWORD PTR tv1153[ebp], 8
	inc	edi
	add	esp, 28					; 0000001cH
	cmp	edi, ecx
	jl	SHORT $LL80@edge_vecto@3
$LN25@edge_vecto@3:

; 576  :         value += weight*SDIM_dot(val,tang);

	push	ecx
	lea	eax, DWORD PTR _tang$[ebp]
	push	eax
	lea	ecx, DWORD PTR _val$[ebp]
	push	ecx
	call	_dot
	fld	QWORD PTR _weight$89503[ebp]

; 577  :         for ( k = 0 ; k < SDIM ; k++ )

	mov	edx, DWORD PTR _web+616
	fmul	ST(1), ST(0)
	fxch	ST(1)
	xor	edi, edi
	add	esp, 12					; 0000000cH
	fadd	QWORD PTR _value$[ebp]
	mov	DWORD PTR _k$[ebp], edi
	fst	QWORD PTR _value$[ebp]
	fldz
	test	edx, edx
	jle	$LN22@edge_vecto@3
	mov	ecx, DWORD PTR [esi+16]
	mov	DWORD PTR tv715[ebp], ecx
$LN24@edge_vecto@3:

; 578  :           { for ( sum = 0.0, j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	fld	ST(0)
	cmp	edx, 4
	jl	SHORT $LC66@edge_vecto@3

; 577  :         for ( k = 0 ; k < SDIM ; k++ )

	lea	ecx, DWORD PTR _derivs$[ebp+edi*8+48]
$LN81@edge_vecto@3:

; 579  :                  sum += derivs[j][k]*tang[j];

	fld	QWORD PTR _tang$[ebp+eax*8]
	add	eax, 4
	fmul	QWORD PTR [ecx-48]
	lea	edi, DWORD PTR [edx-3]
	add	ecx, 192				; 000000c0H
	faddp	ST(1), ST(0)
	fld	QWORD PTR _tang$[ebp+eax*8-24]
	fmul	QWORD PTR [ecx-192]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _tang$[ebp+eax*8-16]
	fmul	QWORD PTR [ecx-144]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _tang$[ebp+eax*8-8]
	fmul	QWORD PTR [ecx-96]
	faddp	ST(1), ST(0)
	cmp	eax, edi
	jl	SHORT $LN81@edge_vecto@3
	mov	ecx, DWORD PTR tv715[ebp]
	mov	edi, DWORD PTR _k$[ebp]
$LC66@edge_vecto@3:

; 578  :           { for ( sum = 0.0, j = 0 ; j < SDIM ; j++ )

	cmp	eax, edx
	jge	SHORT $LN65@edge_vecto@3
	lea	ecx, DWORD PTR [eax+eax*2]
	lea	ecx, DWORD PTR [edi+ecx*2]
	lea	ecx, DWORD PTR _derivs$[ebp+ecx*8]
$LC21@edge_vecto@3:

; 579  :                  sum += derivs[j][k]*tang[j];

	fld	QWORD PTR _tang$[ebp+eax*8]
	inc	eax
	fmul	QWORD PTR [ecx]
	add	ecx, 48					; 00000030H
	faddp	ST(1), ST(0)
	cmp	eax, edx
	jl	SHORT $LC21@edge_vecto@3

; 578  :           { for ( sum = 0.0, j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR tv715[ebp]
$LN65@edge_vecto@3:

; 580  :              for ( i = 0 ; i < gl->lagpts ; i++ )

	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN108@edge_vecto@3
$LN18@edge_vecto@3:

; 577  :         for ( k = 0 ; k < SDIM ; k++ )

	mov	edx, DWORD PTR _e_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [edx+1336]
	mov	edx, DWORD PTR [ecx+eax*4]
	lea	ecx, DWORD PTR [edx+edi*8]

; 581  :                 e_info->grad[i][k] += 
; 582  :                   weight*(gl->gpolypart[m][0][i]*val[k] + gl->gpoly[m][i]*sum);

	mov	edx, DWORD PTR [esi+24]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR [esi+20]
	fmul	QWORD PTR _val$[ebp+edi*8]
	mov	edx, DWORD PTR [edx+ebx*4]
	fld	QWORD PTR [edx+eax*8]
	inc	eax
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR [esi+16]
	mov	DWORD PTR tv715[ebp], ecx
	cmp	eax, ecx
	jl	SHORT $LN18@edge_vecto@3

; 580  :              for ( i = 0 ; i < gl->lagpts ; i++ )

	mov	edx, DWORD PTR _web+616
$LN108@edge_vecto@3:

; 577  :         for ( k = 0 ; k < SDIM ; k++ )

	inc	edi

; 580  :              for ( i = 0 ; i < gl->lagpts ; i++ )

	fstp	ST(0)
	mov	DWORD PTR _k$[ebp], edi
	cmp	edi, edx
	jl	$LN24@edge_vecto@3
$LN22@edge_vecto@3:

; 583  :           }
; 584  : 
; 585  :         for ( ii = 0 ; ii < SDIM ; ii++ )

	xor	ecx, ecx
	mov	DWORD PTR _ii$[ebp], ecx
	cmp	edx, ecx
	jle	$LN145@edge_vecto@3
	mov	DWORD PTR tv2495[ebp], ecx
$LN75@edge_vecto@3:

; 586  :          for ( i = 0 ; i < SDIM ; i++ )

	xor	edi, edi
	mov	DWORD PTR _i$[ebp], edi
	test	edx, edx
	jle	$LN14@edge_vecto@3

; 583  :           }
; 584  : 
; 585  :         for ( ii = 0 ; ii < SDIM ; ii++ )

	mov	eax, DWORD PTR [esi+16]
	mov	DWORD PTR tv715[ebp], eax
	lea	eax, DWORD PTR _derivs$[ebp+ecx*8]
	mov	DWORD PTR tv2440[ebp], eax
$LN12@edge_vecto@3:

; 587  :           { for ( sum = 0.0, j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	fld	ST(0)
	cmp	edx, 4
	jl	$LC69@edge_vecto@3
	mov	edx, DWORD PTR _second$[ebp]
	add	edx, 8
	mov	DWORD PTR tv1911[ebp], edx
$LN79@edge_vecto@3:

; 588  :                  sum += second[j][ii][i]*tang[j];

	mov	edx, DWORD PTR tv1911[ebp]
	mov	edx, DWORD PTR [edx-8]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+edi*8]
	mov	edx, DWORD PTR tv1911[ebp]
	fmul	QWORD PTR _tang$[ebp+eax*8]
	mov	edx, DWORD PTR [edx-4]
	mov	edx, DWORD PTR [edx+ecx*4]
	add	eax, 4
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx+edi*8]
	mov	edx, DWORD PTR tv1911[ebp]
	fmul	QWORD PTR _tang$[ebp+eax*8-24]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ecx*4]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx+edi*8]
	mov	edx, DWORD PTR tv1911[ebp]
	fmul	QWORD PTR _tang$[ebp+eax*8-16]
	mov	edx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx+ecx*4]
	add	DWORD PTR tv1911[ebp], 16		; 00000010H
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx+edi*8]
	mov	edx, DWORD PTR _web+616
	fmul	QWORD PTR _tang$[ebp+eax*8-8]
	add	edx, -3					; fffffffdH
	faddp	ST(1), ST(0)
	cmp	eax, edx
	jl	SHORT $LN79@edge_vecto@3
	mov	edx, DWORD PTR _web+616
$LC69@edge_vecto@3:

; 587  :           { for ( sum = 0.0, j = 0 ; j < SDIM ; j++ )

	cmp	eax, edx
	jge	SHORT $LN68@edge_vecto@3
$LC9@edge_vecto@3:

; 588  :                  sum += second[j][ii][i]*tang[j];

	mov	edx, DWORD PTR _second$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+edi*8]
	inc	eax
	fmul	QWORD PTR _tang$[ebp+eax*8-8]
	faddp	ST(1), ST(0)
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LC9@edge_vecto@3
$LN68@edge_vecto@3:

; 589  :              for ( k = 0 ; k < gl->lagpts ; k++ )

	xor	edx, edx
	cmp	DWORD PTR tv715[ebp], edx
	jle	$LN141@edge_vecto@3
$LN76@edge_vecto@3:

; 590  :                 for ( kk = 0 ; kk < gl->lagpts ; kk++ )

	xor	eax, eax
	cmp	DWORD PTR tv715[ebp], eax
	jle	$LN77@edge_vecto@3
	mov	ecx, DWORD PTR tv2495[ebp]
	add	ecx, edi
	lea	ecx, DWORD PTR _derivs$[ebp+ecx*8]
	mov	DWORD PTR tv2585[ebp], ecx
$LN74@edge_vecto@3:

; 591  :                   e_info->hess[k][kk][i][ii] += weight*
; 592  :                   ( sum*gl->gpoly[m][k]*gl->gpoly[m][kk]
; 593  :                      + gl->gpolypart[m][0][k]*derivs[i][ii]*gl->gpoly[m][kk]
; 594  :                      + gl->gpolypart[m][0][kk]*derivs[ii][i]*gl->gpoly[m][k]
; 595  :                   );

	mov	ecx, DWORD PTR [esi+24]
	mov	ecx, DWORD PTR [ecx+ebx*4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR tv917[ebp], ecx
	mov	ecx, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [ecx+ebx*4]
	mov	ebx, DWORD PTR _e_info$GSCopy$[ebp]
	mov	ebx, DWORD PTR [ebx+1340]
	mov	ebx, DWORD PTR [ebx+edx*4]
	mov	ebx, DWORD PTR [ebx+eax*4]
	mov	edi, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR _ii$[ebp]
	lea	edi, DWORD PTR [edi+ebx*8]
	mov	ebx, DWORD PTR tv917[ebp]
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR tv2440[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv917[ebp]
	inc	eax
	fmul	QWORD PTR [ecx+eax*8-8]
	fld	QWORD PTR [ecx+edx*8]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ecx+eax*8-8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+eax*8-8]
	mov	ebx, DWORD PTR tv2585[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR _m$[ebp]
	fmul	QWORD PTR [ecx+edx*8]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fadd	QWORD PTR [edi]
	fstp	QWORD PTR [edi]
	mov	edi, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [esi+16]
	jl	$LN74@edge_vecto@3
$LN77@edge_vecto@3:

; 589  :              for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	eax, DWORD PTR [esi+16]

; 590  :                 for ( kk = 0 ; kk < gl->lagpts ; kk++ )

	mov	ecx, DWORD PTR _ii$[ebp]
	inc	edx
	mov	DWORD PTR tv715[ebp], eax
	cmp	edx, eax
	jl	$LN76@edge_vecto@3
$LN141@edge_vecto@3:

; 586  :          for ( i = 0 ; i < SDIM ; i++ )

	mov	edx, DWORD PTR _web+616

; 590  :                 for ( kk = 0 ; kk < gl->lagpts ; kk++ )

	fstp	ST(0)
	add	DWORD PTR tv2440[ebp], 48		; 00000030H
	inc	edi
	mov	DWORD PTR _i$[ebp], edi
	cmp	edi, edx
	jl	$LN12@edge_vecto@3
$LN14@edge_vecto@3:

; 583  :           }
; 584  : 
; 585  :         for ( ii = 0 ; ii < SDIM ; ii++ )

	add	DWORD PTR tv2495[ebp], 6
	inc	ecx
	mov	DWORD PTR _ii$[ebp], ecx
	cmp	ecx, edx
	jl	$LN75@edge_vecto@3
$LN145@edge_vecto@3:

; 564  : 
; 565  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	inc	ebx

; 586  :          for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(2)
	mov	DWORD PTR _m$[ebp], ebx
	cmp	ebx, DWORD PTR [esi+4]
	jl	$LL148@edge_vecto@3

; 564  : 
; 565  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	pop	edi
	fstp	ST(1)
	pop	esi
	pop	ebx

; 596  :           }
; 597  :      }
; 598  : 
; 599  :   return value;
; 600  : } // end edge_vector_integral_lagrange_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN71@edge_vecto@3:
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _value$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_edge_vector_integral_lagrange_hess ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_lagrange_vector_integral
; Function compile flags: /Ogtp
;	COMDAT _lagrange_vector_integral
_TEXT	SEGMENT
_matqXvS$ = -348					; size = 24
_sign$ = -324						; size = 8
_value$ = -316						; size = 8
_gl$ = -308						; size = 4
_m$ = -304						; size = 4
_mat$ = -300						; size = 4
_dim$ = -296						; size = 4
_matxJ$ = -292						; size = 288
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_lagrange_vector_integral PROC				; COMDAT

; 623  : { int i,m,j;

	push	ebp
	mov	ebp, esp
	sub	esp, 348				; 0000015cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 624  :   REAL value=0.0;

	fldz
	push	ebx
	push	esi
	fstp	QWORD PTR _value$[ebp]
	mov	esi, DWORD PTR _f_info$[ebp]

; 625  :   MAT2D(mat,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	eax, DWORD PTR _matxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _matqXvS$[ebp]
	push	ecx
	call	_mat2d_setup

; 626  :   int dim = web.dimension;
; 627  :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	ecx, DWORD PTR _web+236
	mov	edx, DWORD PTR _web+620
	mov	DWORD PTR _mat$[ebp], eax
	mov	eax, DWORD PTR [esi]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	add	esp, 16					; 00000010H
	or	eax, ecx
	mov	DWORD PTR _dim$[ebp], edx
	je	SHORT $LN15@lagrange_v
	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN29@lagrange_v
$LN15@lagrange_v:
	fld1
$LN29@lagrange_v:

; 628  :   struct gauss_lag *gl = &gauss_lagrange[dim][web.gauss2D_order];

	mov	eax, DWORD PTR _web+1596
	fstp	QWORD PTR _sign$[ebp]
	shl	eax, 5
	add	eax, DWORD PTR _gauss_lagrange[edx*4]

; 629  : 
; 630  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	xor	ebx, ebx
	mov	DWORD PTR _gl$[ebp], eax
	mov	DWORD PTR _m$[ebp], ebx
	cmp	DWORD PTR [eax+4], ecx
	jle	$LN26@lagrange_v
	push	edi
$LL12@lagrange_v:

; 631  :   { 
; 632  :     for ( i = 0 ; i < dim ; i++ )

	mov	ecx, DWORD PTR _web+616
	xor	edi, edi
	test	edx, edx
	jle	SHORT $LN7@lagrange_v
	npad	3
$LL9@lagrange_v:

; 633  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN8@lagrange_v
	mov	edx, DWORD PTR _mat$[ebp]
	mov	edx, DWORD PTR [edx+edi*4]
	npad	1
$LL6@lagrange_v:

; 634  :           mat[i][j] = f_info->sides[m][i][j];

	mov	ecx, DWORD PTR [esi+1276]
	mov	ecx, DWORD PTR [ecx+ebx*4]
	mov	ecx, DWORD PTR [ecx+edi*4]
	fld	QWORD PTR [ecx+eax*8]
	inc	eax
	fstp	QWORD PTR [edx+eax*8-8]
	mov	ecx, DWORD PTR _web+616
	cmp	eax, ecx
	jl	SHORT $LL6@lagrange_v

; 633  :       for ( j = 0 ; j < SDIM ; j++ )

	mov	edx, DWORD PTR _dim$[ebp]
$LN8@lagrange_v:

; 631  :   { 
; 632  :     for ( i = 0 ; i < dim ; i++ )

	inc	edi
	cmp	edi, edx
	jl	SHORT $LL9@lagrange_v
$LN7@lagrange_v:

; 635  :     f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	mov	edx, DWORD PTR [esi+1268]
	fild	DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	add	ecx, ecx
	fstp	QWORD PTR [eax+ecx*8]

; 636  :     for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR _web+616
	xor	edi, edi
	test	eax, eax
	jle	SHORT $LN1@lagrange_v
	npad	8
$LL28@lagrange_v:

; 637  :       mat[dim][j] = 
; 638  :          eval(METH_INSTANCE(abs(f_info->method))->expr[j],
; 639  :               f_info->gauss_pt[m],f_info->id,NULL);

	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [esi+1268]
	mov	eax, DWORD PTR [edx+ebx*4]
	push	0
	push	ecx
	push	eax
	mov	eax, DWORD PTR [esi+8]
	mov	ecx, DWORD PTR _meth_inst_list
	cdq
	xor	eax, edx
	sub	eax, edx
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 732				; 000002dcH
	add	eax, edi
	mov	edx, DWORD PTR [ecx+eax*4+232]
	push	edx
	call	_eval
	mov	eax, DWORD PTR _mat$[ebp]
	mov	ecx, DWORD PTR _dim$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	inc	edi
	fstp	QWORD PTR [edx+edi*8-8]
	mov	eax, DWORD PTR _web+616
	add	esp, 16					; 00000010H
	cmp	edi, eax
	jl	SHORT $LL28@lagrange_v
$LN1@lagrange_v:

; 640  :      value += gl->gausswt[m]*det_adjoint(mat,SDIM);

	push	eax
	mov	eax, DWORD PTR _mat$[ebp]
	push	eax
	call	_det_adjoint
	mov	eax, DWORD PTR _gl$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	fmul	QWORD PTR [ecx+ebx*8]
	mov	edx, DWORD PTR _dim$[ebp]
	inc	ebx
	add	esp, 8
	fadd	QWORD PTR _value$[ebp]
	mov	DWORD PTR _m$[ebp], ebx
	fstp	QWORD PTR _value$[ebp]
	cmp	ebx, DWORD PTR [eax+4]
	jl	$LL12@lagrange_v
	pop	edi
$LN26@lagrange_v:

; 641  :   }
; 642  :   return sign*value/factorial[dim]; 

	fld	QWORD PTR _sign$[ebp]

; 643  : } // end lagrange_vector_integral()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fmul	QWORD PTR _value$[ebp]
	pop	esi
	xor	ecx, ebp
	pop	ebx
	fdiv	QWORD PTR _factorial[edx*8]
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_lagrange_vector_integral ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_lagrange_vector_integral_grad
; Function compile flags: /Ogtp
;	COMDAT _lagrange_vector_integral_grad
_TEXT	SEGMENT
_matqXvS$ = -696					; size = 24
_sign$ = -672						; size = 8
_value$ = -664						; size = 8
_mat$ = -656						; size = 4
_weight$89592 = -652					; size = 8
_j$ = -648						; size = 4
_dim$ = -644						; size = 4
tv1575 = -640						; size = 4
_m$ = -640						; size = 4
_gl$ = -636						; size = 4
tv1260 = -632						; size = 4
tv921 = -632						; size = 4
tv707 = -632						; size = 4
_k$ = -632						; size = 4
_matxJ$ = -628						; size = 288
_derivs$ = -340						; size = 288
_val$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_lagrange_vector_integral_grad PROC			; COMDAT

; 654  : { int i,m,j,k,jj;

	push	ebp
	mov	ebp, esp
	sub	esp, 696				; 000002b8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 655  :   REAL value = 0.0;

	fldz
	push	esi
	mov	esi, DWORD PTR _f_info$[ebp]
	fstp	QWORD PTR _value$[ebp]
	push	edi

; 656  :   REAL val[MAXCOORD];
; 657  :   REAL derivs[MAXCOORD][MAXCOORD];
; 658  :   MAT2D(mat,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	eax, DWORD PTR _matxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _matqXvS$[ebp]
	push	ecx
	call	_mat2d_setup

; 659  :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR _mat$[ebp], eax
	mov	eax, DWORD PTR _web+236
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	add	esp, 16					; 00000010H
	or	eax, ecx
	je	SHORT $LN33@lagrange_v@2
	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN110@lagrange_v@2
$LN33@lagrange_v@2:
	fld1
$LN110@lagrange_v@2:

; 660  :   int dim = web.dimension;
; 661  :   struct gauss_lag *gl = &gauss_lagrange[dim][web.gauss2D_order];

	mov	eax, DWORD PTR _web+1596
	fstp	QWORD PTR _sign$[ebp]
	mov	edx, DWORD PTR _web+620
	shl	eax, 5
	add	eax, DWORD PTR _gauss_lagrange[edx*4]

; 662  : 
; 663  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	xor	edi, edi
	mov	DWORD PTR _dim$[ebp], edx
	mov	DWORD PTR _gl$[ebp], eax
	mov	DWORD PTR _m$[ebp], edi
	cmp	DWORD PTR [eax+4], ecx
	jle	$LN58@lagrange_v@2
	mov	ecx, DWORD PTR _web+616
	push	ebx
	jmp	SHORT $LN30@lagrange_v@2
	npad	7
$LL108@lagrange_v@2:
	mov	eax, edx
	fstp	ST(0)
	mov	edx, DWORD PTR _dim$[ebp]
$LN30@lagrange_v@2:

; 664  :   { REAL weight = sign*gl->gausswt[m]/factorial[dim];

	mov	eax, DWORD PTR [eax+12]
	fld	QWORD PTR [eax+edi*8]

; 665  :     f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	mov	eax, DWORD PTR [esi+1268]
	fmul	QWORD PTR _sign$[ebp]
	mov	eax, DWORD PTR [eax+edi*4]
	add	ecx, ecx

; 666  :      for ( i = 0 ; i < dim ; i++ )

	xor	ebx, ebx
	fdiv	QWORD PTR _factorial[edx*8]
	fstp	QWORD PTR _weight$89592[ebp]
	fild	DWORD PTR _m$[ebp]
	fstp	QWORD PTR [eax+ecx*8]
	mov	ecx, DWORD PTR _web+616
	test	edx, edx
	jle	SHORT $LN25@lagrange_v@2
$LL27@lagrange_v@2:

; 667  :         for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN26@lagrange_v@2
	mov	ecx, DWORD PTR _mat$[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
$LL24@lagrange_v@2:

; 668  :           mat[i][j] = f_info->sides[m][i][j];  /* mat destroyed by det */

	mov	ecx, DWORD PTR [esi+1276]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	ecx, DWORD PTR [ecx+ebx*4]
	fld	QWORD PTR [ecx+eax*8]
	inc	eax
	fstp	QWORD PTR [edx+eax*8-8]
	mov	ecx, DWORD PTR _web+616
	cmp	eax, ecx
	jl	SHORT $LL24@lagrange_v@2

; 667  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	edx, DWORD PTR _dim$[ebp]
$LN26@lagrange_v@2:

; 666  :      for ( i = 0 ; i < dim ; i++ )

	inc	ebx
	cmp	ebx, edx
	jl	SHORT $LL27@lagrange_v@2
$LN25@lagrange_v@2:

; 669  :      for ( j = 0 ; j < SDIM ; j++ )

	xor	ebx, ebx
	test	ecx, ecx
	jle	$LN19@lagrange_v@2
	lea	edx, DWORD PTR _derivs$[ebp]
	mov	DWORD PTR tv921[ebp], edx
$LL70@lagrange_v@2:

; 670  :      { eval_all(METH_INSTANCE(abs(f_info->method))->expr[j],f_info->gauss_pt[m],SDIM,
; 671  :              val+j, derivs[j],f_info->id);

	mov	edx, DWORD PTR [esi]
	push	edx
	mov	edx, DWORD PTR tv921[ebp]
	push	edx
	lea	eax, DWORD PTR _val$[ebp+ebx*8]
	push	eax
	mov	eax, DWORD PTR [esi+1268]
	push	ecx
	mov	ecx, DWORD PTR [eax+edi*4]
	mov	eax, DWORD PTR [esi+8]
	cdq
	xor	eax, edx
	sub	eax, edx
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	edx, DWORD PTR _meth_inst_list
	imul	eax, 732				; 000002dcH
	add	eax, ebx
	mov	eax, DWORD PTR [edx+eax*4+232]
	push	ecx
	push	eax
	call	_eval_all

; 672  :        mat[web.dimension][j] = val[j];

	mov	ecx, DWORD PTR _web+620
	mov	edx, DWORD PTR _mat$[ebp]
	fld	QWORD PTR _val$[ebp+ebx*8]
	mov	eax, DWORD PTR [edx+ecx*4]
	add	DWORD PTR tv921[ebp], 48		; 00000030H
	fstp	QWORD PTR [eax+ebx*8]
	mov	ecx, DWORD PTR _web+616
	inc	ebx
	add	esp, 24					; 00000018H
	cmp	ebx, ecx
	jl	SHORT $LL70@lagrange_v@2
$LN19@lagrange_v@2:

; 673  :      }
; 674  :      value += weight*det_adjoint(mat,SDIM);

	push	ecx
	mov	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	call	_det_adjoint
	fld	QWORD PTR _weight$89592[ebp]

; 675  :      for ( k = 0 ; k < gl->lagpts; k++ )

	mov	edx, DWORD PTR _gl$[ebp]
	fmul	ST(1), ST(0)
	mov	ecx, DWORD PTR _web+616
	fxch	ST(1)
	xor	eax, eax
	fadd	QWORD PTR _value$[ebp]
	add	esp, 8
	fst	QWORD PTR _value$[ebp]
	cmp	DWORD PTR [edx+16], eax
	jle	$LN16@lagrange_v@2
$LN65@lagrange_v@2:

; 676  :       for ( j = 0 ; j < SDIM ; j++ ) 

	xor	ebx, ebx
	mov	DWORD PTR _j$[ebp], ebx
	test	ecx, ecx
	jle	$LN17@lagrange_v@2
$LN66@lagrange_v@2:

; 677  :         for ( i = 0 ; i < dim ; i++ )

	xor	ecx, ecx
	cmp	DWORD PTR _dim$[ebp], 4
	jl	$LC56@lagrange_v@2
	mov	edx, DWORD PTR _mat$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	add	edx, 16					; 00000010H
$LN62@lagrange_v@2:

; 676  :       for ( j = 0 ; j < SDIM ; j++ ) 

	mov	edi, DWORD PTR [esi+1336]
	mov	edi, DWORD PTR [edi+eax*4]
	lea	edi, DWORD PTR [edi+ebx*8]

; 678  :         { f_info->grad[k][j] += weight*gl->gpolypart[m][i][k]*mat[j][i];

	mov	ebx, DWORD PTR _m$[ebp]
	mov	DWORD PTR tv707[ebp], edi
	mov	edi, DWORD PTR _gl$[ebp]
	mov	edi, DWORD PTR [edi+24]
	mov	edi, DWORD PTR [edi+ebx*4]
	mov	edi, DWORD PTR [edi+ecx*4]
	fld	QWORD PTR [edi+eax*8]
	mov	edi, DWORD PTR tv707[ebp]
	mov	ebx, DWORD PTR _j$[ebp]
	fmul	ST(0), ST(2)
	add	ecx, 4
	add	edx, 32					; 00000020H
	fmul	QWORD PTR [edx-48]
	fadd	QWORD PTR [edi]
	fstp	QWORD PTR [edi]
	mov	edi, DWORD PTR [esi+1336]
	mov	edi, DWORD PTR [edi+eax*4]
	lea	edi, DWORD PTR [edi+ebx*8]
	mov	ebx, DWORD PTR _m$[ebp]
	mov	DWORD PTR tv707[ebp], edi
	mov	edi, DWORD PTR _gl$[ebp]
	mov	edi, DWORD PTR [edi+24]
	mov	edi, DWORD PTR [edi+ebx*4]
	mov	edi, DWORD PTR [edi+ecx*4-12]
	fld	QWORD PTR [edi+eax*8]
	mov	edi, DWORD PTR tv707[ebp]
	mov	ebx, DWORD PTR _j$[ebp]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [edx-40]
	fadd	QWORD PTR [edi]
	fstp	QWORD PTR [edi]
	mov	edi, DWORD PTR [esi+1336]
	mov	edi, DWORD PTR [edi+eax*4]
	lea	edi, DWORD PTR [edi+ebx*8]
	mov	ebx, DWORD PTR _m$[ebp]
	mov	DWORD PTR tv707[ebp], edi
	mov	edi, DWORD PTR _gl$[ebp]
	mov	edi, DWORD PTR [edi+24]
	mov	edi, DWORD PTR [edi+ebx*4]
	mov	edi, DWORD PTR [edi+ecx*4-8]
	fld	QWORD PTR [edi+eax*8]
	mov	edi, DWORD PTR tv707[ebp]
	mov	ebx, DWORD PTR _j$[ebp]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [edx-32]
	fadd	QWORD PTR [edi]
	fstp	QWORD PTR [edi]
	mov	edi, DWORD PTR [esi+1336]
	mov	edi, DWORD PTR [edi+eax*4]
	lea	edi, DWORD PTR [edi+ebx*8]
	mov	DWORD PTR tv707[ebp], edi
	mov	edi, DWORD PTR _gl$[ebp]
	mov	ebx, DWORD PTR [edi+24]
	mov	edi, DWORD PTR _m$[ebp]
	mov	ebx, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR [ebx+ecx*4-4]
	fld	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR tv707[ebp]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [edx-24]
	fadd	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]
	mov	ebx, DWORD PTR _dim$[ebp]
	add	ebx, -3					; fffffffdH
	cmp	ecx, ebx
	mov	ebx, DWORD PTR _j$[ebp]
	jl	$LN62@lagrange_v@2
$LC56@lagrange_v@2:

; 677  :         for ( i = 0 ; i < dim ; i++ )

	cmp	ecx, DWORD PTR _dim$[ebp]
	jge	SHORT $LN67@lagrange_v@2
	mov	edx, DWORD PTR _mat$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	lea	edx, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR tv1260[ebp], edx
$LC12@lagrange_v@2:

; 676  :       for ( j = 0 ; j < SDIM ; j++ ) 

	mov	edx, DWORD PTR [esi+1336]
	mov	edx, DWORD PTR [edx+eax*4]
	lea	edx, DWORD PTR [edx+ebx*8]

; 678  :         { f_info->grad[k][j] += weight*gl->gpolypart[m][i][k]*mat[j][i];

	mov	ebx, DWORD PTR _gl$[ebp]
	mov	ebx, DWORD PTR [ebx+24]
	mov	ebx, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fld	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR tv1260[ebp]
	fmul	ST(0), ST(2)
	add	ebx, 8
	inc	ecx
	mov	DWORD PTR tv1260[ebp], ebx
	fmul	QWORD PTR [ebx-8]
	mov	ebx, DWORD PTR _j$[ebp]
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	cmp	ecx, DWORD PTR _dim$[ebp]
	jl	SHORT $LC12@lagrange_v@2
$LN67@lagrange_v@2:

; 677  :         for ( i = 0 ; i < dim ; i++ )

	mov	ecx, DWORD PTR _web+616
	inc	ebx
	mov	DWORD PTR _j$[ebp], ebx
	cmp	ebx, ecx
	jl	$LN66@lagrange_v@2
$LN17@lagrange_v@2:

; 675  :      for ( k = 0 ; k < gl->lagpts; k++ )

	mov	edx, DWORD PTR _gl$[ebp]
	inc	eax
	cmp	eax, DWORD PTR [edx+16]
	jl	$LN65@lagrange_v@2
$LN16@lagrange_v@2:

; 679  :         }
; 680  :      for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	eax, DWORD PTR _gl$[ebp]
	xor	edx, edx
	mov	DWORD PTR _k$[ebp], edx
	cmp	DWORD PTR [eax+16], edx
	jle	$LN106@lagrange_v@2
$LN69@lagrange_v@2:

; 681  :       for ( j = 0 ; j < SDIM ; j++ ) 

	xor	ebx, ebx
	mov	DWORD PTR _j$[ebp], ebx
	test	ecx, ecx
	jle	SHORT $LN8@lagrange_v@2
$LN6@lagrange_v@2:

; 682  :         for ( jj = 0 ; jj < SDIM ; jj++ ) 

	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN5@lagrange_v@2

; 681  :       for ( j = 0 ; j < SDIM ; j++ ) 

	lea	ecx, DWORD PTR _derivs$[ebp+ebx*8]
	mov	DWORD PTR tv1575[ebp], ecx
$LN63@lagrange_v@2:
	mov	ecx, DWORD PTR [esi+1336]
	mov	ecx, DWORD PTR [ecx+edx*4]
	lea	ecx, DWORD PTR [ecx+ebx*8]

; 683  :         {
; 684  :           f_info->grad[k][j] += weight
; 685  :                 *gl->gpoly[m][k]*derivs[jj][j]*mat[jj][dim];

	mov	ebx, DWORD PTR _gl$[ebp]
	mov	ebx, DWORD PTR [ebx+20]
	mov	ebx, DWORD PTR [ebx+edi*4]
	fld	QWORD PTR [ebx+edx*8]
	mov	edx, DWORD PTR tv1575[ebp]
	mov	ebx, DWORD PTR _dim$[ebp]
	fmul	ST(0), ST(2)
	add	DWORD PTR tv1575[ebp], 48		; 00000030H
	inc	eax
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR _mat$[ebp]
	mov	edx, DWORD PTR [edx+eax*4-4]
	fmul	QWORD PTR [edx+ebx*8]
	mov	edx, DWORD PTR _k$[ebp]
	mov	ebx, DWORD PTR _j$[ebp]
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _web+616
	cmp	eax, ecx
	jl	SHORT $LN63@lagrange_v@2
$LN5@lagrange_v@2:

; 681  :       for ( j = 0 ; j < SDIM ; j++ ) 

	inc	ebx
	mov	DWORD PTR _j$[ebp], ebx
	cmp	ebx, ecx
	jl	SHORT $LN6@lagrange_v@2
$LN8@lagrange_v@2:

; 679  :         }
; 680  :      for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	eax, DWORD PTR _gl$[ebp]
	inc	edx
	mov	DWORD PTR _k$[ebp], edx
	cmp	edx, DWORD PTR [eax+16]
	jl	$LN69@lagrange_v@2
$LN106@lagrange_v@2:

; 662  : 
; 663  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	mov	edx, DWORD PTR _gl$[ebp]

; 682  :         for ( jj = 0 ; jj < SDIM ; jj++ ) 

	fstp	ST(1)
	inc	edi
	mov	DWORD PTR _m$[ebp], edi
	cmp	edi, DWORD PTR [edx+4]
	jl	$LL108@lagrange_v@2
	pop	ebx
	pop	edi
	pop	esi

; 686  :         }
; 687  :   }
; 688  :   return value;  
; 689  : } // end lagrange_vector_integral_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN58@lagrange_v@2:
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _value$[ebp]
	pop	edi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_lagrange_vector_integral_grad ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_lagrange_vector_integral_all
EXTRN	_mat4d_setup:PROC
EXTRN	__chkstk:PROC
; Function compile flags: /Ogtp
;	COMDAT _lagrange_vector_integral_all
_TEXT	SEGMENT
_dethessqXvS$ = -14032					; size = 1032
_secondsqXvS$ = -13000					; size = 168
_matqXvS$ = -12832					; size = 24
_sign$ = -12808						; size = 8
_gl$ = -12800						; size = 4
_value$ = -12796					; size = 8
_weight$89659 = -12788					; size = 8
tv3897 = -12784						; size = 4
tv3766 = -12784						; size = 4
_seconds$ = -12780					; size = 4
_dethess$ = -12776					; size = 4
tv6606 = -12772						; size = 4
tv2111 = -12772						; size = 4
tv1984 = -12772						; size = 4
_m$ = -12772						; size = 4
_mat$ = -12768						; size = 4
_f_info$GSCopy$ = -12764				; size = 4
tv2908 = -12760						; size = 4
_kk$ = -12760						; size = 4
_k$ = -12756						; size = 4
_dim$ = -12752						; size = 4
tv5321 = -12748						; size = 4
_i$ = -12748						; size = 4
tv2125 = -12744						; size = 4
tv2037 = -12744						; size = 4
tv560 = -12744						; size = 4
tv144 = -12744						; size = 4
_ii$ = -12744						; size = 4
_j$ = -12740						; size = 4
tv5845 = -12736						; size = 4
tv3924 = -12736						; size = 4
tv3685 = -12736						; size = 4
tv2349 = -12736						; size = 4
tv2278 = -12736						; size = 4
tv2162 = -12736						; size = 4
tv5755 = -12732						; size = 4
tv4545 = -12732						; size = 4
tv2255 = -12732						; size = 4
tv2056 = -12732						; size = 4
tv1321 = -12732						; size = 4
_jjj$89702 = -12732					; size = 4
tv5996 = -12728						; size = 4
tv5749 = -12728						; size = 4
tv5276 = -12728						; size = 4
tv4510 = -12728						; size = 4
tv4361 = -12728						; size = 4
tv3353 = -12728						; size = 4
tv3038 = -12728						; size = 4
tv2693 = -12728						; size = 4
tv2251 = -12728						; size = 4
tv2179 = -12728						; size = 4
tv1279 = -12728						; size = 4
tv779 = -12728						; size = 4
_dethessxJ$ = -12724					; size = 10368
_secondsxJ$ = -2356					; size = 1728
_matxJ$ = -628						; size = 288
_derivs$ = -340						; size = 288
_val$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_mode$ = 12						; size = 4
_lagrange_vector_integral_all PROC			; COMDAT

; 713  : { int i,m,j,k,jj,ii,kk;

	push	ebp
	mov	ebp, esp
	mov	eax, 14032				; 000036d0H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 714  :   REAL value = 0.0;

	fldz
	push	ebx
	push	esi
	fstp	QWORD PTR _value$[ebp]
	mov	esi, DWORD PTR _f_info$[ebp]
	push	edi

; 715  :   REAL val[MAXCOORD];
; 716  :   REAL derivs[MAXCOORD][MAXCOORD];
; 717  :   MAT3D(seconds,MAXCOORD,MAXCOORD,MAXCOORD);

	push	6
	push	6
	push	6
	lea	eax, DWORD PTR _secondsxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _secondsqXvS$[ebp]
	push	ecx
	mov	DWORD PTR _f_info$GSCopy$[ebp], esi
	call	_mat3d_setup

; 718  :   MAT2D(mat,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	edx, DWORD PTR _matxJ$[ebp]
	mov	DWORD PTR _seconds$[ebp], eax
	push	edx
	lea	eax, DWORD PTR _matqXvS$[ebp]
	push	eax
	call	_mat2d_setup

; 719  :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR _web+236
	mov	DWORD PTR _mat$[ebp], eax
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	add	esp, 36					; 00000024H
	or	eax, ecx
	je	SHORT $LN68@lagrange_v@3
	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN255@lagrange_v@3
$LN68@lagrange_v@3:
	fld1
$LN255@lagrange_v@3:

; 720  :   int dim = web.dimension;
; 721  :   struct gauss_lag *gl = &gauss_lagrange[dim][web.gauss2D_order];

	mov	esi, DWORD PTR _web+1596
	fstp	QWORD PTR _sign$[ebp]
	mov	ebx, DWORD PTR _web+620

; 722  :   MAT4D(dethess,MAXCOORD,MAXCOORD,MAXCOORD,MAXCOORD);

	push	6
	push	6
	push	6
	push	6
	lea	eax, DWORD PTR _dethessxJ$[ebp]
	shl	esi, 5
	add	esi, DWORD PTR _gauss_lagrange[ebx*4]
	push	eax
	lea	ecx, DWORD PTR _dethessqXvS$[ebp]
	push	ecx
	mov	DWORD PTR _dim$[ebp], ebx
	mov	DWORD PTR _gl$[ebp], esi
	call	_mat4d_setup

; 723  : 
; 724  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	xor	edi, edi
	add	esp, 24					; 00000018H
	mov	DWORD PTR _dethess$[ebp], eax
	mov	DWORD PTR _m$[ebp], edi
	cmp	DWORD PTR [esi+4], edi
	jle	$LN127@lagrange_v@3
	mov	ecx, DWORD PTR _web+616
	jmp	SHORT $LN146@lagrange_v@3
$LL253@lagrange_v@3:
	fstp	ST(0)
$LN146@lagrange_v@3:

; 725  :   { REAL det;
; 726  :     REAL weight = sign*gl->gausswt[m]/factorial[dim];

	mov	edx, DWORD PTR [esi+12]
	fld	QWORD PTR [edx+edi*8]

; 727  :     f_info->gauss_pt[m][2*SDIM] = m; /* kludge for attr interpolation. */

	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	fmul	QWORD PTR _sign$[ebp]
	mov	edx, DWORD PTR [eax+1268]
	mov	eax, DWORD PTR [edx+edi*4]
	add	ecx, ecx
	fdiv	QWORD PTR _factorial[ebx*8]
	fstp	QWORD PTR _weight$89659[ebp]
	fild	DWORD PTR _m$[ebp]
	fstp	QWORD PTR [eax+ecx*8]

; 728  :     for ( i = 0 ; i < web.dimension ; i++ )

	mov	edx, DWORD PTR _web+616
	xor	ecx, ecx
	cmp	DWORD PTR _web+620, ecx
	jle	SHORT $LN60@lagrange_v@3
	npad	3
$LL148@lagrange_v@3:

; 729  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN61@lagrange_v@3

; 730  :           mat[i][j] = f_info->sides[m][i][j];  /* mat destroyed by det */

	mov	edx, DWORD PTR _mat$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv1984[ebp], edx
	npad	11
$LL59@lagrange_v@3:
	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [edx+1276]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR tv1984[ebp]
	fstp	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _web+616
	inc	eax
	cmp	eax, edx
	jl	SHORT $LL59@lagrange_v@3
$LN61@lagrange_v@3:

; 728  :     for ( i = 0 ; i < web.dimension ; i++ )

	inc	ecx
	cmp	ecx, DWORD PTR _web+620
	jl	SHORT $LL148@lagrange_v@3
$LN60@lagrange_v@3:

; 731  :     for ( j = 0 ; j < SDIM ; j++ )

	mov	DWORD PTR _j$[ebp], 0
	test	edx, edx
	jle	$LN54@lagrange_v@3
	lea	eax, DWORD PTR _derivs$[ebp]
	mov	DWORD PTR tv2693[ebp], eax
$LL56@lagrange_v@3:

; 732  :     { eval_second(METH_INSTANCE(abs(f_info->method))->expr[j],
; 733  :              f_info->gauss_pt[m],SDIM,val+j, derivs[j],seconds[j],f_info->id);

	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR _j$[ebp]
	push	eax
	mov	eax, DWORD PTR _seconds$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	push	eax
	mov	eax, DWORD PTR tv2693[ebp]
	push	eax
	lea	eax, DWORD PTR _val$[ebp+ecx*8]
	push	eax
	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	push	edx
	mov	edx, DWORD PTR [eax+1268]
	mov	eax, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx+edi*4]
	push	edx
	cdq
	xor	eax, edx
	sub	eax, edx
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 732				; 000002dcH
	add	eax, ecx
	mov	ecx, DWORD PTR _meth_inst_list
	mov	edx, DWORD PTR [ecx+eax*4+232]
	push	edx
	call	_eval_second

; 734  :       mat[web.dimension][j] = val[j];

	mov	eax, DWORD PTR _web+620
	mov	ecx, DWORD PTR _mat$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _j$[ebp]
	add	DWORD PTR tv2693[ebp], 48		; 00000030H
	fld	QWORD PTR _val$[ebp+eax*8]
	lea	eax, DWORD PTR _val$[ebp+eax*8]
	mov	eax, DWORD PTR _j$[ebp]
	inc	eax
	fstp	QWORD PTR [edx+eax*8-8]
	mov	edx, DWORD PTR _web+616
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, edx
	jl	$LL56@lagrange_v@3
$LN54@lagrange_v@3:

; 735  :      }
; 736  :      det_hess(mat,dethess,SDIM);

	mov	eax, DWORD PTR _dethess$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	push	edx
	push	eax
	push	ecx
	call	_det_hess

; 737  :      det = det_adjoint(mat,SDIM);

	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR _mat$[ebp]
	push	edx
	push	eax
	call	_det_adjoint

; 738  : 
; 739  :      value += weight*det;

	fld	QWORD PTR _weight$89659[ebp]

; 740  :      
; 741  :      if ( mode == METHOD_VALUE ) continue;
; 742  : 
; 743  :      /* gradient */
; 744  :      for ( k = 0 ; k < gl->lagpts; k++ )

	mov	ecx, DWORD PTR _web+616
	fmul	ST(1), ST(0)
	fxch	ST(1)
	add	esp, 20					; 00000014H
	cmp	DWORD PTR _mode$[ebp], 1767		; 000006e7H
	fadd	QWORD PTR _value$[ebp]
	fst	QWORD PTR _value$[ebp]
	je	$LN190@lagrange_v@3
	xor	eax, eax
	cmp	DWORD PTR [esi+16], eax
	jle	$LN50@lagrange_v@3
$LN52@lagrange_v@3:

; 745  :       for ( j = 0 ; j < SDIM ; j++ ) 

	xor	edx, edx
	mov	DWORD PTR _j$[ebp], edx
	test	ecx, ecx
	jle	$LN51@lagrange_v@3
$LN49@lagrange_v@3:

; 746  :         for ( i = 0 ; i < dim ; i++ )

	xor	ecx, ecx
	cmp	ebx, 4
	jl	$LC113@lagrange_v@3
	mov	ebx, DWORD PTR _mat$[ebp]
	mov	ebx, DWORD PTR [ebx+edx*4]
	add	ebx, 16					; 00000010H
	mov	DWORD PTR tv2908[ebp], ebx
$LN143@lagrange_v@3:

; 745  :       for ( j = 0 ; j < SDIM ; j++ ) 

	mov	ebx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ebx, DWORD PTR [ebx+1336]
	mov	ebx, DWORD PTR [ebx+eax*4]
	lea	ebx, DWORD PTR [ebx+edx*8]
	mov	DWORD PTR tv2056[ebp], ebx

; 747  :         { f_info->grad[k][j] += weight*gl->gpolypart[m][i][k]*mat[j][i];

	mov	ebx, DWORD PTR [esi+24]
	mov	ebx, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fld	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR tv2908[ebp]
	fmul	ST(0), ST(2)
	add	ecx, 4
	fmul	QWORD PTR [ebx-16]
	mov	ebx, DWORD PTR tv2056[ebp]
	fadd	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]
	mov	ebx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ebx, DWORD PTR [ebx+1336]
	mov	ebx, DWORD PTR [ebx+eax*4]
	lea	ebx, DWORD PTR [ebx+edx*8]
	mov	DWORD PTR tv2056[ebp], ebx
	mov	ebx, DWORD PTR [esi+24]
	mov	ebx, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR [ebx+ecx*4-12]
	fld	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR tv2908[ebp]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ebx-8]
	mov	ebx, DWORD PTR tv2056[ebp]
	fadd	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]
	mov	ebx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ebx, DWORD PTR [ebx+1336]
	mov	ebx, DWORD PTR [ebx+eax*4]
	lea	edx, DWORD PTR [ebx+edx*8]
	mov	DWORD PTR tv2056[ebp], edx
	mov	edx, DWORD PTR [esi+24]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx+ecx*4-8]
	fld	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR tv2908[ebp]
	mov	ebx, DWORD PTR _j$[ebp]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv2056[ebp]
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [edx+1336]
	mov	edx, DWORD PTR [edx+eax*4]
	lea	edx, DWORD PTR [edx+ebx*8]
	mov	ebx, DWORD PTR tv2908[ebp]
	mov	DWORD PTR tv2056[ebp], edx
	mov	edx, DWORD PTR [esi+24]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx+ecx*4-4]
	fld	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR tv2056[ebp]
	fmul	ST(0), ST(2)
	add	ebx, 32					; 00000020H
	mov	DWORD PTR tv2908[ebp], ebx
	fmul	QWORD PTR [ebx-24]
	mov	ebx, DWORD PTR _dim$[ebp]
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	lea	edx, DWORD PTR [ebx-3]
	cmp	ecx, edx
	mov	edx, DWORD PTR _j$[ebp]
	jl	$LN143@lagrange_v@3
$LC113@lagrange_v@3:

; 746  :         for ( i = 0 ; i < dim ; i++ )

	cmp	ecx, ebx
	jge	SHORT $LN144@lagrange_v@3
	mov	ebx, DWORD PTR _mat$[ebp]
	mov	ebx, DWORD PTR [ebx+edx*4]
	lea	ebx, DWORD PTR [ebx+ecx*8]
	mov	DWORD PTR tv3038[ebp], ebx
$LC46@lagrange_v@3:

; 745  :       for ( j = 0 ; j < SDIM ; j++ ) 

	mov	ebx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ebx, DWORD PTR [ebx+1336]
	mov	ebx, DWORD PTR [ebx+eax*4]
	lea	ebx, DWORD PTR [ebx+edx*8]
	mov	DWORD PTR tv2111[ebp], ebx

; 747  :         { f_info->grad[k][j] += weight*gl->gpolypart[m][i][k]*mat[j][i];

	mov	ebx, DWORD PTR [esi+24]
	mov	ebx, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fld	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR tv3038[ebp]
	add	DWORD PTR tv3038[ebp], 8
	fmul	ST(0), ST(2)
	inc	ecx
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv2111[ebp]
	fadd	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]
	mov	ebx, DWORD PTR _dim$[ebp]
	cmp	ecx, ebx
	jl	SHORT $LC46@lagrange_v@3
$LN144@lagrange_v@3:

; 746  :         for ( i = 0 ; i < dim ; i++ )

	mov	ecx, DWORD PTR _web+616
	inc	edx
	mov	DWORD PTR _j$[ebp], edx
	cmp	edx, ecx
	jl	$LN49@lagrange_v@3
$LN51@lagrange_v@3:

; 740  :      
; 741  :      if ( mode == METHOD_VALUE ) continue;
; 742  : 
; 743  :      /* gradient */
; 744  :      for ( k = 0 ; k < gl->lagpts; k++ )

	inc	eax
	cmp	eax, DWORD PTR [esi+16]
	jl	$LN52@lagrange_v@3
$LN50@lagrange_v@3:

; 748  :         }
; 749  :      for ( k = 0 ; k < gl->lagpts ; k++ )

	xor	edx, edx
	mov	DWORD PTR _k$[ebp], edx
	cmp	DWORD PTR [esi+16], edx
	jle	$LN41@lagrange_v@3
$LN43@lagrange_v@3:

; 750  :       for ( j = 0 ; j < SDIM ; j++ ) 

	mov	DWORD PTR _j$[ebp], 0
	test	ecx, ecx
	jle	$LN42@lagrange_v@3
$LN40@lagrange_v@3:

; 751  :         for ( jj = 0 ; jj < SDIM ; jj++ ) 

	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN39@lagrange_v@3

; 750  :       for ( j = 0 ; j < SDIM ; j++ ) 

	mov	ecx, DWORD PTR _j$[ebp]
	lea	ecx, DWORD PTR _derivs$[ebp+ecx*8]
	mov	DWORD PTR tv3353[ebp], ecx
$LN145@lagrange_v@3:
	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [ecx+1336]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	ebx, DWORD PTR _j$[ebp]
	lea	ecx, DWORD PTR [ecx+ebx*8]

; 752  :         {
; 753  :           f_info->grad[k][j] += weight
; 754  :                 *gl->gpoly[m][k]*derivs[jj][j]*mat[jj][dim];

	mov	ebx, DWORD PTR [esi+20]
	mov	ebx, DWORD PTR [ebx+edi*4]
	fld	QWORD PTR [ebx+edx*8]
	mov	edx, DWORD PTR tv3353[ebp]
	mov	ebx, DWORD PTR _dim$[ebp]
	fmul	ST(0), ST(2)
	add	DWORD PTR tv3353[ebp], 48		; 00000030H
	inc	eax
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR _mat$[ebp]
	mov	edx, DWORD PTR [edx+eax*4-4]
	fmul	QWORD PTR [edx+ebx*8]
	mov	edx, DWORD PTR _k$[ebp]
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _web+616
	cmp	eax, ecx
	jl	SHORT $LN145@lagrange_v@3
$LN39@lagrange_v@3:

; 750  :       for ( j = 0 ; j < SDIM ; j++ ) 

	mov	eax, DWORD PTR _j$[ebp]
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, ecx
	jl	$LN40@lagrange_v@3
$LN42@lagrange_v@3:

; 748  :         }
; 749  :      for ( k = 0 ; k < gl->lagpts ; k++ )

	inc	edx
	mov	DWORD PTR _k$[ebp], edx
	cmp	edx, DWORD PTR [esi+16]
	jl	$LN43@lagrange_v@3
$LN41@lagrange_v@3:

; 755  :         }
; 756  : 
; 757  :      if ( mode == METHOD_GRADIENT ) continue;

	cmp	DWORD PTR _mode$[ebp], 4321		; 000010e1H
	je	$LN190@lagrange_v@3

; 758  : 
; 759  :      /* hessian */
; 760  :      for ( k = 0 ; k < gl->lagpts  ; k++ )

	mov	eax, DWORD PTR [esi+16]
	mov	DWORD PTR _k$[ebp], 0
	test	eax, eax
	jle	$LN190@lagrange_v@3
	fldz
$LN33@lagrange_v@3:

; 761  :         for ( kk = 0 ; kk < gl->lagpts ; kk++ )

	xor	ebx, ebx
	mov	DWORD PTR _kk$[ebp], ebx
	test	eax, eax
	jle	$LN32@lagrange_v@3
$LN30@lagrange_v@3:

; 762  :           for ( j = 0 ; j < SDIM ; j++ )

	xor	edx, edx
	mov	DWORD PTR _j$[ebp], edx
	cmp	DWORD PTR _web+616, edx
	jle	$LN29@lagrange_v@3
	lea	eax, DWORD PTR _derivs$[ebp+48]
	mov	DWORD PTR tv6606[ebp], eax
$LN27@lagrange_v@3:

; 763  :              for ( jj = 0 ; jj < SDIM ; jj++ )

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	$LN26@lagrange_v@3
$LN133@lagrange_v@3:

; 764  :              { REAL h = 0.0;
; 765  :                 int jjj;
; 766  :                 for ( i = 0 ; i < dim ; i++ )

	xor	ecx, ecx
	fld	ST(0)
	mov	DWORD PTR _i$[ebp], ecx
	cmp	DWORD PTR _dim$[ebp], ecx
	jle	$LN19@lagrange_v@3
$LN134@lagrange_v@3:

; 767  :                  for ( ii  = 0 ; ii < dim ; ii++ )

	cmp	DWORD PTR _dim$[ebp], 4
	mov	DWORD PTR _ii$[ebp], 0
	jl	$LC116@lagrange_v@3

; 758  : 
; 759  :      /* hessian */
; 760  :      for ( k = 0 ; k < gl->lagpts  ; k++ )

	mov	edx, DWORD PTR _dethess$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	ebx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	ebx, DWORD PTR _k$[ebp]
	mov	DWORD PTR tv2162[ebp], edx
	mov	edx, DWORD PTR [esi+24]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	ecx, DWORD PTR [edx+ecx*4]
	lea	ecx, DWORD PTR [ecx+ebx*8]

; 767  :                  for ( ii  = 0 ; ii < dim ; ii++ )

	mov	ebx, DWORD PTR tv2162[ebp]
	mov	DWORD PTR tv2179[ebp], ecx
	lea	ecx, DWORD PTR [ebx+12]

; 768  :                  { h += dethess[i][j][ii][jj]
; 769  :                             *gl->gpolypart[m][i][k]*gl->gpolypart[m][ii][kk];

	sub	ebx, edx
	mov	DWORD PTR tv3685[ebp], ecx
	lea	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _dim$[ebp]
	add	edx, -4					; fffffffcH
	shr	edx, 2
	inc	edx
	mov	DWORD PTR tv1321[ebp], edx
	add	edx, edx
	add	edx, edx
	mov	DWORD PTR tv3766[ebp], ebx
	mov	ebx, DWORD PTR _kk$[ebp]
	mov	DWORD PTR _ii$[ebp], edx
$LN135@lagrange_v@3:
	mov	edx, DWORD PTR tv3685[ebp]
	mov	edx, DWORD PTR [edx-12]
	fld	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR tv2179[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR [ecx-4]
	add	ecx, 16					; 00000010H
	fmul	QWORD PTR [edx+ebx*8]
	mov	edx, DWORD PTR tv3766[ebp]
	mov	edx, DWORD PTR [edx+ecx-16]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR tv2179[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR [ecx-16]
	fmul	QWORD PTR [edx+ebx*8]
	mov	edx, DWORD PTR tv3685[ebp]
	mov	edx, DWORD PTR [edx-4]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR tv2179[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR [ecx-12]
	fmul	QWORD PTR [edx+ebx*8]
	mov	edx, DWORD PTR tv3685[ebp]
	mov	edx, DWORD PTR [edx]
	add	DWORD PTR tv3685[ebp], 16		; 00000010H
	dec	DWORD PTR tv1321[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR tv2179[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR [ecx-8]
	fmul	QWORD PTR [edx+ebx*8]
	faddp	ST(1), ST(0)
	jne	$LN135@lagrange_v@3
$LC116@lagrange_v@3:

; 767  :                  for ( ii  = 0 ; ii < dim ; ii++ )

	mov	ecx, DWORD PTR _ii$[ebp]
	cmp	ecx, DWORD PTR _dim$[ebp]
	jge	$LN20@lagrange_v@3

; 758  : 
; 759  :      /* hessian */
; 760  :      for ( k = 0 ; k < gl->lagpts  ; k++ )

	mov	edx, DWORD PTR [esi+24]
	mov	ecx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv2251[ebp], ecx
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	edx, DWORD PTR _k$[ebp]
	lea	ecx, DWORD PTR [ecx+edx*8]

; 767  :                  for ( ii  = 0 ; ii < dim ; ii++ )

	mov	edx, DWORD PTR tv2251[ebp]
	mov	DWORD PTR tv2255[ebp], ecx
	mov	ecx, DWORD PTR _ii$[ebp]
	lea	edx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _dethess$[ebp]
	mov	DWORD PTR tv3897[ebp], edx
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	edx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	sub	ecx, DWORD PTR tv2251[ebp]
	mov	DWORD PTR tv3924[ebp], ecx
	mov	ecx, DWORD PTR _dim$[ebp]
	sub	ecx, DWORD PTR _ii$[ebp]
	mov	DWORD PTR tv1279[ebp], ecx
	mov	ecx, DWORD PTR tv3897[ebp]
$LC18@lagrange_v@3:

; 768  :                  { h += dethess[i][j][ii][jj]
; 769  :                             *gl->gpolypart[m][i][k]*gl->gpolypart[m][ii][kk];

	mov	edx, DWORD PTR tv3924[ebp]
	mov	edx, DWORD PTR [edx+ecx]
	fld	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR tv2255[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR [ecx]
	add	ecx, 4
	dec	DWORD PTR tv1279[ebp]
	fmul	QWORD PTR [edx+ebx*8]
	faddp	ST(1), ST(0)
	jne	SHORT $LC18@lagrange_v@3
$LN20@lagrange_v@3:

; 764  :              { REAL h = 0.0;
; 765  :                 int jjj;
; 766  :                 for ( i = 0 ; i < dim ; i++ )

	mov	ecx, DWORD PTR _i$[ebp]
	inc	ecx
	mov	DWORD PTR _i$[ebp], ecx
	cmp	ecx, DWORD PTR _dim$[ebp]
	jl	$LN134@lagrange_v@3
$LN19@lagrange_v@3:

; 770  :                  }
; 771  :                 for ( i = 0 ; i < dim ; i++ )

	xor	ecx, ecx
	mov	DWORD PTR _i$[ebp], ecx
	cmp	DWORD PTR _dim$[ebp], ecx
	jle	$LN13@lagrange_v@3
$LN15@lagrange_v@3:

; 772  :                  for ( jjj = 0 ; jjj < SDIM ; jjj++ )

	cmp	DWORD PTR _web+616, 4
	mov	DWORD PTR _jjj$89702[ebp], 0
	jl	$LN137@lagrange_v@3

; 758  : 
; 759  :      /* hessian */
; 760  :      for ( k = 0 ; k < gl->lagpts  ; k++ )

	mov	edx, DWORD PTR [esi+24]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _k$[ebp]
	lea	ecx, DWORD PTR [ecx+edx*8]

; 761  :         for ( kk = 0 ; kk < gl->lagpts ; kk++ )

	mov	edx, DWORD PTR [esi+20]
	mov	DWORD PTR tv2037[ebp], ecx
	mov	ecx, DWORD PTR [edx+edi*4]
	lea	edx, DWORD PTR [ecx+ebx*8]

; 772  :                  for ( jjj = 0 ; jjj < SDIM ; jjj++ )

	mov	ecx, DWORD PTR _dethess$[ebp]
	mov	DWORD PTR tv2278[ebp], edx
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	edx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	edx, DWORD PTR _dim$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	lea	edx, DWORD PTR _derivs$[ebp+eax*8+48]
	mov	DWORD PTR tv4361[ebp], edx
	mov	edx, DWORD PTR _web+616
	add	edx, -4					; fffffffcH
	shr	edx, 2
	add	ecx, 16					; 00000010H
	inc	edx
	lea	ebx, DWORD PTR [edx*4]
	mov	DWORD PTR _jjj$89702[ebp], ebx
$LN120@lagrange_v@3:

; 773  :                   h += dethess[i][j][dim][jjj]*gl->gpolypart[m][i][k]
; 774  :                               *gl->gpoly[m][kk]*derivs[jjj][jj];

	fld	QWORD PTR [ecx-16]
	mov	ebx, DWORD PTR tv2037[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv2278[ebp]
	add	ecx, 32					; 00000020H
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv4361[ebp]
	fmul	QWORD PTR [ebx-48]
	mov	ebx, DWORD PTR tv2037[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-40]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv2278[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv4361[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv2037[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv2278[ebp]
	fmul	QWORD PTR [ecx-32]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv4361[ebp]
	fmul	QWORD PTR [ebx+48]
	mov	ebx, DWORD PTR tv2037[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-24]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv2278[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv4361[ebp]
	add	ebx, 192				; 000000c0H
	dec	edx
	fmul	QWORD PTR [ebx-96]
	mov	DWORD PTR tv4361[ebp], ebx
	faddp	ST(1), ST(0)
	jne	$LN120@lagrange_v@3

; 772  :                  for ( jjj = 0 ; jjj < SDIM ; jjj++ )

	mov	ebx, DWORD PTR _kk$[ebp]
$LN137@lagrange_v@3:
	mov	ecx, DWORD PTR _jjj$89702[ebp]
	cmp	ecx, DWORD PTR _web+616
	jge	$LN14@lagrange_v@3

; 758  : 
; 759  :      /* hessian */
; 760  :      for ( k = 0 ; k < gl->lagpts  ; k++ )

	mov	edx, DWORD PTR [esi+24]
	mov	ecx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	edx, DWORD PTR _k$[ebp]
	lea	ecx, DWORD PTR [ecx+edx*8]

; 761  :         for ( kk = 0 ; kk < gl->lagpts ; kk++ )

	mov	edx, DWORD PTR [esi+20]
	mov	DWORD PTR tv2037[ebp], ecx
	mov	ecx, DWORD PTR [edx+edi*4]
	lea	edx, DWORD PTR [ecx+ebx*8]

; 772  :                  for ( jjj = 0 ; jjj < SDIM ; jjj++ )

	mov	ecx, DWORD PTR _dethess$[ebp]
	mov	DWORD PTR tv2278[ebp], edx
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	edx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	edx, DWORD PTR _dim$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	edx, DWORD PTR _jjj$89702[ebp]
	lea	ecx, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR tv4510[ebp], ecx
	lea	ecx, DWORD PTR [edx+edx*2]
	lea	ecx, DWORD PTR [eax+ecx*2]
	lea	ecx, DWORD PTR _derivs$[ebp+ecx*8]
	mov	DWORD PTR tv4545[ebp], ecx
	mov	ecx, DWORD PTR _web+616
	sub	ecx, edx
$LN142@lagrange_v@3:

; 773  :                   h += dethess[i][j][dim][jjj]*gl->gpolypart[m][i][k]
; 774  :                               *gl->gpoly[m][kk]*derivs[jjj][jj];

	mov	edx, DWORD PTR tv4510[ebp]
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR tv2037[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv2278[ebp]
	add	DWORD PTR tv4510[ebp], 8
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv4545[ebp]
	add	DWORD PTR tv4545[ebp], 48		; 00000030H
	dec	ecx
	fmul	QWORD PTR [edx]
	faddp	ST(1), ST(0)
	jne	SHORT $LN142@lagrange_v@3
$LN14@lagrange_v@3:

; 770  :                  }
; 771  :                 for ( i = 0 ; i < dim ; i++ )

	mov	ecx, DWORD PTR _i$[ebp]
	inc	ecx
	mov	DWORD PTR _i$[ebp], ecx
	cmp	ecx, DWORD PTR _dim$[ebp]
	jl	$LN15@lagrange_v@3
$LN13@lagrange_v@3:

; 775  :                 for ( ii = 0 ; ii < dim ; ii++ )

	xor	edx, edx
	cmp	DWORD PTR _dim$[ebp], edx
	jle	$LN140@lagrange_v@3
$LN9@lagrange_v@3:

; 776  :                  for ( jjj = 0 ; jjj < SDIM ; jjj++ )

	cmp	DWORD PTR _web+616, 4
	mov	DWORD PTR _jjj$89702[ebp], 0
	jl	$LN139@lagrange_v@3

; 761  :         for ( kk = 0 ; kk < gl->lagpts ; kk++ )

	mov	ecx, DWORD PTR [esi+24]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	ecx, DWORD PTR [ecx+edx*4]
	lea	ecx, DWORD PTR [ecx+ebx*8]

; 776  :                  for ( jjj = 0 ; jjj < SDIM ; jjj++ )

	mov	ebx, DWORD PTR _web+616
	mov	DWORD PTR tv2349[ebp], ecx
	mov	ecx, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	esi, DWORD PTR _k$[ebp]
	lea	ecx, DWORD PTR [ecx+esi*8]
	mov	esi, DWORD PTR _dim$[ebp]
	add	ebx, -4					; fffffffcH
	shr	ebx, 2
	mov	DWORD PTR tv2125[ebp], ecx
	mov	ecx, DWORD PTR _dethess$[ebp]
	mov	ecx, DWORD PTR [ecx+esi*4]
	mov	esi, DWORD PTR tv6606[ebp]
	inc	ebx
	mov	DWORD PTR tv779[ebp], ebx
	add	ebx, ebx
	add	ecx, 8
	add	ebx, ebx
	mov	DWORD PTR _jjj$89702[ebp], ebx
$LN123@lagrange_v@3:

; 777  :                   h += dethess[dim][jjj][ii][jj]*gl->gpolypart[m][ii][kk]
; 778  :                               *gl->gpoly[m][k]*derivs[jjj][j];

	mov	ebx, DWORD PTR [ecx-8]
	mov	ebx, DWORD PTR [ebx+edx*4]
	fld	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR tv2349[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv2125[ebp]
	add	ecx, 16					; 00000010H
	add	esi, 192				; 000000c0H
	dec	DWORD PTR tv779[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [ecx-20]
	mov	ebx, DWORD PTR [ebx+edx*4]
	fmul	QWORD PTR [esi-240]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR tv2349[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv2125[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [ecx-16]
	mov	ebx, DWORD PTR [ebx+edx*4]
	fmul	QWORD PTR [esi-192]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR tv2349[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv2125[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [ecx-12]
	mov	ebx, DWORD PTR [ebx+edx*4]
	fmul	QWORD PTR [esi-144]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR tv2349[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv2125[ebp]
	fmul	QWORD PTR [ebx]
	fmul	QWORD PTR [esi-96]
	faddp	ST(1), ST(0)
	jne	$LN123@lagrange_v@3

; 776  :                  for ( jjj = 0 ; jjj < SDIM ; jjj++ )

	mov	esi, DWORD PTR _gl$[ebp]
$LN139@lagrange_v@3:
	mov	ecx, DWORD PTR _jjj$89702[ebp]
	cmp	ecx, DWORD PTR _web+616
	jge	$LN8@lagrange_v@3

; 761  :         for ( kk = 0 ; kk < gl->lagpts ; kk++ )

	mov	ecx, DWORD PTR [esi+24]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	ebx, DWORD PTR _kk$[ebp]
	lea	ecx, DWORD PTR [ecx+ebx*8]
	mov	ebx, DWORD PTR _k$[ebp]
	mov	DWORD PTR tv2349[ebp], ecx
	mov	ecx, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [ecx+edi*4]
	lea	ecx, DWORD PTR [ecx+ebx*8]

; 776  :                  for ( jjj = 0 ; jjj < SDIM ; jjj++ )

	mov	ebx, DWORD PTR _dim$[ebp]
	mov	DWORD PTR tv2125[ebp], ecx
	mov	ecx, DWORD PTR _dethess$[ebp]
	mov	ebx, DWORD PTR [ecx+ebx*4]
	mov	ecx, DWORD PTR _jjj$89702[ebp]
	lea	ebx, DWORD PTR [ebx+ecx*4]
	lea	ecx, DWORD PTR [ecx+ecx*2]
	mov	DWORD PTR tv5276[ebp], ebx
	mov	ebx, DWORD PTR _j$[ebp]
	lea	ecx, DWORD PTR [ebx+ecx*2]
	lea	ecx, DWORD PTR _derivs$[ebp+ecx*8]
	mov	DWORD PTR tv5321[ebp], ecx
	mov	ecx, DWORD PTR _web+616
	sub	ecx, DWORD PTR _jjj$89702[ebp]
$LN141@lagrange_v@3:

; 777  :                   h += dethess[dim][jjj][ii][jj]*gl->gpolypart[m][ii][kk]
; 778  :                               *gl->gpoly[m][k]*derivs[jjj][j];

	mov	ebx, DWORD PTR tv5276[ebp]
	mov	ebx, DWORD PTR [ebx]
	mov	ebx, DWORD PTR [ebx+edx*4]
	fld	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR tv2349[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv2125[ebp]
	add	DWORD PTR tv5276[ebp], 4
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv5321[ebp]
	add	DWORD PTR tv5321[ebp], 48		; 00000030H
	dec	ecx
	fmul	QWORD PTR [ebx]
	faddp	ST(1), ST(0)
	jne	SHORT $LN141@lagrange_v@3
$LN8@lagrange_v@3:

; 775  :                 for ( ii = 0 ; ii < dim ; ii++ )

	mov	ebx, DWORD PTR _kk$[ebp]
	inc	edx
	cmp	edx, DWORD PTR _dim$[ebp]
	jl	$LN9@lagrange_v@3
$LN140@lagrange_v@3:

; 779  :                 for ( i = 0 ; i < SDIM ; i++ ) 

	cmp	DWORD PTR _web+616, 4
	mov	DWORD PTR _i$[ebp], 0
	jl	$LC125@lagrange_v@3
	mov	edx, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [edx+edi*4]
	fld	QWORD PTR [ecx+ebx*8]
	mov	edx, DWORD PTR _k$[ebp]
	fmul	QWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR _seconds$[ebp]
	lea	edx, DWORD PTR [ecx+12]

; 780  :                   h += gl->gpoly[m][k]*gl->gpoly[m][kk]*seconds[i][j][jj]
; 781  :                             *mat[i][web.dimension];

	sub	ecx, DWORD PTR _mat$[ebp]
	mov	DWORD PTR tv5749[ebp], edx
	mov	edx, DWORD PTR _mat$[ebp]
	mov	DWORD PTR tv5845[ebp], ecx
	mov	ecx, DWORD PTR _web+616
	add	ecx, -4					; fffffffcH
	shr	ecx, 2
	inc	ecx
	mov	DWORD PTR tv560[ebp], ecx
	add	edx, 4
	add	ecx, ecx
	add	ecx, ecx
	mov	DWORD PTR tv5755[ebp], edx
	mov	DWORD PTR _i$[ebp], ecx
$LN126@lagrange_v@3:
	mov	edx, DWORD PTR tv5749[ebp]
	mov	ecx, DWORD PTR [edx-12]
	mov	edx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	fld	QWORD PTR [ecx+eax*8]
	mov	edx, DWORD PTR tv5755[ebp]
	mov	ecx, DWORD PTR [edx-4]
	fmul	ST(0), ST(1)
	mov	edx, DWORD PTR _web+620
	fmul	QWORD PTR [ecx+edx*8]
	mov	edx, DWORD PTR tv5755[ebp]
	mov	ecx, DWORD PTR tv5845[ebp]
	mov	ecx, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _j$[ebp]
	faddp	ST(2), ST(0)
	mov	ecx, DWORD PTR [ecx+edx*4]
	fld	QWORD PTR [ecx+eax*8]
	mov	edx, DWORD PTR tv5755[ebp]
	mov	ecx, DWORD PTR [edx]
	fmul	ST(0), ST(1)
	mov	edx, DWORD PTR _web+620
	fmul	QWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR tv5749[ebp]
	mov	edx, DWORD PTR [ecx-4]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	faddp	ST(2), ST(0)
	fld	QWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR tv5755[ebp]
	mov	edx, DWORD PTR [ecx+4]
	fmul	ST(0), ST(1)
	mov	ecx, DWORD PTR _web+620
	fmul	QWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR tv5749[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	faddp	ST(2), ST(0)
	fld	QWORD PTR [ecx+eax*8]
	mov	edx, DWORD PTR tv5755[ebp]
	mov	ecx, DWORD PTR [edx+8]
	fmul	ST(0), ST(1)
	mov	edx, DWORD PTR _web+620
	fmul	QWORD PTR [ecx+edx*8]
	mov	ecx, 16					; 00000010H
	add	DWORD PTR tv5755[ebp], ecx
	add	DWORD PTR tv5749[ebp], ecx
	dec	DWORD PTR tv560[ebp]
	faddp	ST(2), ST(0)
	jne	$LN126@lagrange_v@3

; 779  :                 for ( i = 0 ; i < SDIM ; i++ ) 

	fstp	ST(0)
$LC125@lagrange_v@3:
	mov	ecx, DWORD PTR _web+616
	cmp	DWORD PTR _i$[ebp], ecx
	jge	$LN124@lagrange_v@3
	mov	edx, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [edx+edi*4]
	fld	QWORD PTR [ecx+ebx*8]
	mov	edx, DWORD PTR _k$[ebp]
	fmul	QWORD PTR [ecx+edx*8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	lea	ecx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR tv5996[ebp], ecx
	mov	ecx, DWORD PTR _seconds$[ebp]
	sub	ecx, DWORD PTR _mat$[ebp]
	mov	DWORD PTR tv5845[ebp], ecx
	mov	ecx, DWORD PTR _web+616
	sub	ecx, edx
	mov	DWORD PTR tv144[ebp], ecx
$LC3@lagrange_v@3:

; 780  :                   h += gl->gpoly[m][k]*gl->gpoly[m][kk]*seconds[i][j][jj]
; 781  :                             *mat[i][web.dimension];

	mov	ecx, DWORD PTR tv5996[ebp]
	mov	edx, DWORD PTR tv5845[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR tv5996[ebp]
	mov	edx, DWORD PTR [ecx]
	fmul	ST(0), ST(1)
	mov	ecx, DWORD PTR _web+620
	add	DWORD PTR tv5996[ebp], 4
	dec	DWORD PTR tv144[ebp]
	fmul	QWORD PTR [edx+ecx*8]
	faddp	ST(2), ST(0)
	jne	SHORT $LC3@lagrange_v@3

; 779  :                 for ( i = 0 ; i < SDIM ; i++ ) 

	fstp	ST(0)
$LN124@lagrange_v@3:

; 763  :              for ( jj = 0 ; jj < SDIM ; jj++ )

	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]

; 782  :                 f_info->hess[k][kk][j][jj]  += weight*h;

	fmul	ST(0), ST(3)
	mov	ecx, DWORD PTR [edx+1340]
	mov	edx, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [ecx+ebx*4]
	mov	edx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	fadd	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	$LN133@lagrange_v@3
$LN26@lagrange_v@3:

; 762  :           for ( j = 0 ; j < SDIM ; j++ )

	add	DWORD PTR tv6606[ebp], 8
	inc	edx
	mov	DWORD PTR _j$[ebp], edx
	cmp	edx, DWORD PTR _web+616
	jl	$LN27@lagrange_v@3
$LN29@lagrange_v@3:

; 761  :         for ( kk = 0 ; kk < gl->lagpts ; kk++ )

	inc	ebx
	mov	DWORD PTR _kk$[ebp], ebx
	cmp	ebx, DWORD PTR [esi+16]
	jl	$LN30@lagrange_v@3
$LN32@lagrange_v@3:

; 758  : 
; 759  :      /* hessian */
; 760  :      for ( k = 0 ; k < gl->lagpts  ; k++ )

	mov	ecx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR [esi+16]
	inc	ecx
	mov	DWORD PTR _k$[ebp], ecx
	cmp	ecx, eax
	jl	$LN33@lagrange_v@3
	mov	ecx, DWORD PTR _web+616
	fstp	ST(2)
	mov	ebx, DWORD PTR _dim$[ebp]
$LN190@lagrange_v@3:
	inc	edi
	fstp	ST(1)
	mov	DWORD PTR _m$[ebp], edi
	cmp	edi, DWORD PTR [esi+4]
	jl	$LL253@lagrange_v@3
	pop	edi
	pop	esi
	pop	ebx

; 783  :             }
; 784  :   }
; 785  : 
; 786  :   return value;  
; 787  : } // end lagrange_vector_integral_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN127@lagrange_v@3:
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _value$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_lagrange_vector_integral_all ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_lagrange_k_vector_integral
; Function compile flags: /Ogtp
;	COMDAT _lagrange_k_vector_integral
_TEXT	SEGMENT
_matqXvS$ = -352					; size = 24
_sign$ = -328						; size = 8
_value$ = -320						; size = 8
_gl$ = -312						; size = 4
_mat$ = -308						; size = 4
tv469 = -304						; size = 4
_m$ = -300						; size = 4
_dim$ = -296						; size = 4
_matxJ$ = -292						; size = 288
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_lagrange_k_vector_integral PROC			; COMDAT

; 808  : { int i,m,j,k;

	push	ebp
	mov	ebp, esp
	sub	esp, 352				; 00000160H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 809  :   REAL value=0.0;

	fldz
	push	esi
	push	edi
	fstp	QWORD PTR _value$[ebp]
	mov	edi, DWORD PTR _f_info$[ebp]

; 810  :   MAT2D(mat,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	eax, DWORD PTR _matxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _matqXvS$[ebp]
	push	ecx
	call	_mat2d_setup

; 811  :   int dim = web.dimension;
; 812  :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	edx, DWORD PTR [edi]
	mov	esi, DWORD PTR _web+236
	mov	ecx, edx
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR _mat$[ebp], eax
	mov	eax, DWORD PTR _web+620
	and	ecx, 256				; 00000100H
	xor	esi, esi
	add	esp, 16					; 00000010H
	or	ecx, esi
	mov	DWORD PTR _dim$[ebp], eax
	je	SHORT $LN19@lagrange_k
	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN40@lagrange_k
$LN19@lagrange_k:
	fld1
$LN40@lagrange_k:

; 813  :   struct gauss_lag *gl = &gauss_lagrange[dim][web.gauss2D_order];

	mov	ecx, DWORD PTR _web+1596
	fstp	QWORD PTR _sign$[ebp]
	shl	ecx, 5
	add	ecx, DWORD PTR _gauss_lagrange[eax*4]

; 814  : 
; 815  :   if ( id_type(f_info->id) == EDGE )

	and	edx, -536870912				; e0000000H
	mov	DWORD PTR _gl$[ebp], ecx
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN35@lagrange_k

; 816  :   { dim = (web.representation==STRING)?1:web.dimension-1; 

	mov	ecx, 1
	cmp	DWORD PTR _web+624, ecx
	jne	SHORT $LN21@lagrange_k
	mov	DWORD PTR _dim$[ebp], ecx
	jmp	SHORT $LN22@lagrange_k
$LN21@lagrange_k:
	dec	eax
	mov	DWORD PTR _dim$[ebp], eax
$LN22@lagrange_k:

; 817  :      gl = &gauss_lagrange[dim][web.gauss1D_order];

	mov	eax, DWORD PTR _web+1592
	mov	edx, DWORD PTR _dim$[ebp]
	shl	eax, 5
	add	eax, DWORD PTR _gauss_lagrange[edx*4]
	mov	DWORD PTR _gl$[ebp], eax
	mov	ecx, eax
	mov	eax, edx
$LN35@lagrange_k:

; 818  :   }
; 819  : 
; 820  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	xor	esi, esi
	mov	DWORD PTR _m$[ebp], esi
	cmp	DWORD PTR [ecx+4], esi
	jle	$LN34@lagrange_k
	push	ebx
	npad	2
$LL15@lagrange_k:

; 821  :   { for ( i = 0 ; i < dim ; i++ )

	mov	ecx, DWORD PTR _web+616
	xor	edx, edx
	test	eax, eax
	jle	SHORT $LN10@lagrange_k
	npad	4
$LL39@lagrange_k:

; 822  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN11@lagrange_k
	mov	ecx, DWORD PTR _mat$[ebp]
	mov	ebx, DWORD PTR [ecx+edx*4]
	npad	1
$LL9@lagrange_k:

; 823  :         mat[i][j] = f_info->sides[m][i][j];

	mov	ecx, DWORD PTR [edi+1276]
	mov	ecx, DWORD PTR [ecx+esi*4]
	mov	ecx, DWORD PTR [ecx+edx*4]
	fld	QWORD PTR [ecx+eax*8]
	inc	eax
	fstp	QWORD PTR [ebx+eax*8-8]
	mov	ecx, DWORD PTR _web+616
	cmp	eax, ecx
	jl	SHORT $LL9@lagrange_k
$LN11@lagrange_k:

; 821  :   { for ( i = 0 ; i < dim ; i++ )

	inc	edx
	cmp	edx, DWORD PTR _dim$[ebp]
	jl	SHORT $LL39@lagrange_k
	mov	eax, DWORD PTR _dim$[ebp]
$LN10@lagrange_k:

; 824  :     for ( k = 0 ; k+dim < SDIM ; k++ )

	xor	ebx, ebx
	cmp	eax, ecx
	jge	$LN4@lagrange_k
	mov	edx, DWORD PTR _mat$[ebp]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv469[ebp], eax
$LL36@lagrange_k:

; 825  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	test	ecx, ecx
	jle	SHORT $LN5@lagrange_k
	npad	4
$LL37@lagrange_k:

; 826  :         mat[k+dim][j] = 
; 827  :               eval(METH_INSTANCE(abs(f_info->method))->expr[j+k*SDIM],
; 828  :                    f_info->gauss_pt[m],NULLID,NULL);

	mov	edx, DWORD PTR [edi+1268]
	imul	ecx, ebx
	mov	eax, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [edi+8]
	push	0
	push	0
	push	edx
	cdq
	xor	eax, edx
	sub	eax, edx
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 732				; 000002dcH
	add	eax, esi
	add	ecx, eax
	mov	eax, DWORD PTR _meth_inst_list
	mov	ecx, DWORD PTR [eax+ecx*4+232]
	push	ecx
	call	_eval
	mov	edx, DWORD PTR tv469[ebp]
	mov	eax, DWORD PTR [edx]
	inc	esi
	fstp	QWORD PTR [eax+esi*8-8]
	mov	ecx, DWORD PTR _web+616
	add	esp, 16					; 00000010H
	cmp	esi, ecx
	jl	SHORT $LL37@lagrange_k
$LN5@lagrange_k:

; 824  :     for ( k = 0 ; k+dim < SDIM ; k++ )

	mov	edx, DWORD PTR _dim$[ebp]
	add	DWORD PTR tv469[ebp], 4
	inc	ebx
	lea	eax, DWORD PTR [ebx+edx]
	cmp	eax, ecx
	jl	SHORT $LL36@lagrange_k
	mov	esi, DWORD PTR _m$[ebp]
$LN4@lagrange_k:

; 829  :     value += gl->gausswt[m]*det_adjoint(mat,SDIM);

	push	ecx
	mov	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	call	_det_adjoint
	mov	eax, DWORD PTR _gl$[ebp]
	mov	edx, DWORD PTR [eax+12]
	fmul	QWORD PTR [edx+esi*8]
	inc	esi
	add	esp, 8
	cmp	esi, DWORD PTR [eax+4]
	fadd	QWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _dim$[ebp]
	mov	DWORD PTR _m$[ebp], esi
	fstp	QWORD PTR _value$[ebp]
	jl	$LL15@lagrange_k
	pop	ebx
$LN34@lagrange_k:

; 830  :   }
; 831  :   return sign*value/factorial[dim]; 

	fld	QWORD PTR _sign$[ebp]

; 832  : } // end lagrange_k_vector_integral()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fmul	QWORD PTR _value$[ebp]
	pop	edi
	xor	ecx, ebp
	pop	esi
	fdiv	QWORD PTR _factorial[eax*8]
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_lagrange_k_vector_integral ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_lagrange_k_vector_integral_grad
; Function compile flags: /Ogtp
;	COMDAT _lagrange_k_vector_integral_grad
_TEXT	SEGMENT
_matqXvS$ = -2148					; size = 24
_weight$89787 = -2124					; size = 8
_sign$ = -2116						; size = 8
_value$ = -2108						; size = 8
tv1715 = -2100						; size = 4
_k$ = -2100						; size = 4
_mat$ = -2096						; size = 4
tv1017 = -2092						; size = 4
tv803 = -2092						; size = 4
_i$ = -2092						; size = 4
tv1785 = -2088						; size = 4
tv1365 = -2088						; size = 4
tv1027 = -2088						; size = 4
_dim$ = -2084						; size = 4
_gl$ = -2080						; size = 4
tv1235 = -2076						; size = 4
tv992 = -2076						; size = 4
_jj$ = -2076						; size = 4
tv749 = -2072						; size = 4
_j$ = -2072						; size = 4
_derivs$ = -2068					; size = 1728
_matxJ$ = -340						; size = 288
_val$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_lagrange_k_vector_integral_grad PROC			; COMDAT

; 843  : { int i,m,j,k,jj;

	push	ebp
	mov	ebp, esp
	sub	esp, 2148				; 00000864H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 844  :   REAL value = 0.0;

	fldz
	push	esi
	mov	esi, DWORD PTR _f_info$[ebp]
	fstp	QWORD PTR _value$[ebp]
	push	edi

; 845  :   REAL val[MAXCOORD];
; 846  :   REAL derivs[MAXCOORD][MAXCOORD][MAXCOORD];
; 847  :   MAT2D(mat,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	eax, DWORD PTR _matxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _matqXvS$[ebp]
	push	ecx
	call	_mat2d_setup

; 848  :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR _mat$[ebp], eax
	mov	eax, DWORD PTR _web+236
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	edx, edx
	add	esp, 16					; 00000010H
	or	eax, edx
	je	SHORT $LN40@lagrange_k@2
	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN128@lagrange_k@2
$LN40@lagrange_k@2:
	fld1
$LN128@lagrange_k@2:

; 849  :   int dim = web.dimension;
; 850  :   struct gauss_lag *gl = &gauss_lagrange[dim][web.gauss2D_order];

	mov	edx, DWORD PTR _web+1596
	fstp	QWORD PTR _sign$[ebp]
	mov	eax, DWORD PTR _web+620
	shl	edx, 5
	add	edx, DWORD PTR _gauss_lagrange[eax*4]

; 851  : 
; 852  :   if ( id_type(f_info->id) == EDGE )

	and	ecx, -536870912				; e0000000H
	mov	DWORD PTR _dim$[ebp], eax
	mov	DWORD PTR _gl$[ebp], edx
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN76@lagrange_k@2

; 853  :   { dim = (web.representation==STRING)?1:web.dimension-1; 

	mov	ecx, 1
	cmp	DWORD PTR _web+624, ecx
	jne	SHORT $LN42@lagrange_k@2
	mov	DWORD PTR _dim$[ebp], ecx
	jmp	SHORT $LN43@lagrange_k@2
$LN42@lagrange_k@2:
	dec	eax
	mov	DWORD PTR _dim$[ebp], eax
$LN43@lagrange_k@2:

; 854  :      gl = &gauss_lagrange[dim][web.gauss1D_order];

	mov	eax, DWORD PTR _web+1592
	mov	ecx, DWORD PTR _dim$[ebp]
	shl	eax, 5
	add	eax, DWORD PTR _gauss_lagrange[ecx*4]
	mov	DWORD PTR _gl$[ebp], eax
	mov	edx, eax
	mov	eax, ecx
$LN76@lagrange_k@2:

; 855  :   }
; 856  : 
; 857  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	xor	edi, edi
	cmp	DWORD PTR [edx+4], edi
	jle	$LN71@lagrange_k@2
	push	ebx
	mov	ebx, DWORD PTR _web+616
	jmp	SHORT $LN36@lagrange_k@2
	npad	2
$LL126@lagrange_k@2:
	mov	edx, DWORD PTR _gl$[ebp]
	fstp	ST(0)
	mov	eax, DWORD PTR _dim$[ebp]
$LN36@lagrange_k@2:

; 858  :   { REAL weight = sign*gl->gausswt[m]/factorial[dim];

	mov	edx, DWORD PTR [edx+12]
	fld	QWORD PTR [edx+edi*8]

; 859  :      for ( i = 0 ; i < dim ; i++ )

	xor	edx, edx
	fmul	QWORD PTR _sign$[ebp]
	fdiv	QWORD PTR _factorial[eax*8]
	fstp	QWORD PTR _weight$89787[ebp]
	test	eax, eax
	jle	SHORT $LN31@lagrange_k@2
	npad	3
$LL33@lagrange_k@2:

; 860  :         for ( j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	test	ebx, ebx
	jle	SHORT $LN32@lagrange_k@2
	mov	eax, DWORD PTR _mat$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	npad	1
$LL30@lagrange_k@2:

; 861  :           mat[i][j] = f_info->sides[m][i][j];  /* mat destroyed by det */

	mov	ebx, DWORD PTR [esi+1276]
	mov	ebx, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR [ebx+edx*4]
	fld	QWORD PTR [ebx+ecx*8]
	inc	ecx
	fstp	QWORD PTR [eax+ecx*8-8]
	mov	ebx, DWORD PTR _web+616
	cmp	ecx, ebx
	jl	SHORT $LL30@lagrange_k@2

; 860  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR _dim$[ebp]
$LN32@lagrange_k@2:

; 859  :      for ( i = 0 ; i < dim ; i++ )

	inc	edx
	cmp	edx, eax
	jl	SHORT $LL33@lagrange_k@2
$LN31@lagrange_k@2:

; 862  :      for ( k = 0 ; k+dim < SDIM ; k++ )

	mov	DWORD PTR _k$[ebp], 0
	cmp	eax, ebx
	jge	$LN25@lagrange_k@2
	mov	edx, DWORD PTR _mat$[ebp]
	lea	ecx, DWORD PTR _derivs$[ebp]
	mov	DWORD PTR tv1017[ebp], ecx
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv1027[ebp], ecx
$LL83@lagrange_k@2:

; 863  :         for ( j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	mov	DWORD PTR _j$[ebp], ecx
	test	ebx, ebx
	jle	$LN26@lagrange_k@2
	mov	edx, DWORD PTR tv1017[ebp]
	mov	DWORD PTR tv992[ebp], edx
	jmp	SHORT $LN24@lagrange_k@2
$LL77@lagrange_k@2:
	mov	ecx, DWORD PTR _j$[ebp]
$LN24@lagrange_k@2:

; 864  :         { eval_all(METH_INSTANCE(abs(f_info->method))->expr[j+k*SDIM],
; 865  :                f_info->gauss_pt[m],SDIM,val+j,derivs[k][j],f_info->id);

	mov	edx, DWORD PTR [esi]
	push	edx
	mov	edx, DWORD PTR tv992[ebp]
	push	edx
	lea	eax, DWORD PTR _val$[ebp+ecx*8]
	push	eax
	mov	eax, DWORD PTR [esi+1268]
	mov	edx, DWORD PTR [eax+edi*4]
	mov	eax, DWORD PTR [esi+8]
	push	ebx
	imul	ebx, DWORD PTR _k$[ebp]
	push	edx
	cdq
	xor	eax, edx
	sub	eax, edx
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 732				; 000002dcH
	add	eax, ecx
	add	ebx, eax
	mov	eax, DWORD PTR _meth_inst_list
	mov	ecx, DWORD PTR [eax+ebx*4+232]
	push	ecx
	call	_eval_all

; 866  :           mat[k+dim][j] = val[j];

	mov	eax, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR tv1027[ebp]
	fld	QWORD PTR _val$[ebp+eax*8]
	mov	ecx, DWORD PTR [edx]
	add	DWORD PTR tv992[ebp], 48		; 00000030H
	lea	eax, DWORD PTR _val$[ebp+eax*8]
	mov	eax, DWORD PTR _j$[ebp]
	inc	eax
	fstp	QWORD PTR [ecx+eax*8-8]
	mov	ebx, DWORD PTR _web+616
	add	esp, 24					; 00000018H
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, ebx
	jl	$LL77@lagrange_k@2

; 863  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR _dim$[ebp]
$LN26@lagrange_k@2:

; 862  :      for ( k = 0 ; k+dim < SDIM ; k++ )

	mov	ecx, DWORD PTR _k$[ebp]
	add	DWORD PTR tv1017[ebp], 288		; 00000120H
	add	DWORD PTR tv1027[ebp], 4
	inc	ecx
	mov	DWORD PTR _k$[ebp], ecx
	add	ecx, eax
	cmp	ecx, ebx
	jl	$LL83@lagrange_k@2
$LN25@lagrange_k@2:

; 867  :         }
; 868  :      value += weight*det_adjoint(mat,SDIM);

	mov	edx, DWORD PTR _mat$[ebp]
	push	ebx
	push	edx
	call	_det_adjoint
	fld	QWORD PTR _weight$89787[ebp]

; 869  :      for ( k = 0 ; k < gl->lagpts; k++ )

	mov	ecx, DWORD PTR _gl$[ebp]
	fmul	ST(1), ST(0)
	mov	ebx, DWORD PTR _web+616
	fxch	ST(1)
	xor	eax, eax
	fadd	QWORD PTR _value$[ebp]
	add	esp, 8
	fst	QWORD PTR _value$[ebp]
	cmp	DWORD PTR [ecx+16], eax
	jle	$LN19@lagrange_k@2
$LN21@lagrange_k@2:

; 870  :       for ( j = 0 ; j < SDIM ; j++ ) 

	xor	edx, edx
	test	ebx, ebx
	jle	$LN20@lagrange_k@2
$LN78@lagrange_k@2:

; 871  :         for ( i = 0 ; i < dim ; i++ )

	xor	ecx, ecx
	cmp	DWORD PTR _dim$[ebp], 4
	jl	$LC69@lagrange_k@2
	mov	ebx, DWORD PTR _mat$[ebp]
	mov	ebx, DWORD PTR [ebx+edx*4]
	add	ebx, 16					; 00000010H
	mov	DWORD PTR tv1235[ebp], ebx
$LN70@lagrange_k@2:

; 870  :       for ( j = 0 ; j < SDIM ; j++ ) 

	mov	ebx, DWORD PTR [esi+1336]
	mov	ebx, DWORD PTR [ebx+eax*4]
	lea	ebx, DWORD PTR [ebx+edx*8]
	mov	DWORD PTR tv749[ebp], ebx

; 872  :         { f_info->grad[k][j] += weight*gl->gpolypart[m][i][k]*mat[j][i];

	mov	ebx, DWORD PTR _gl$[ebp]
	mov	ebx, DWORD PTR [ebx+24]
	mov	ebx, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fld	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR tv1235[ebp]
	fmul	ST(0), ST(2)
	add	ecx, 4
	fmul	QWORD PTR [ebx-16]
	mov	ebx, DWORD PTR tv749[ebp]
	fadd	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [esi+1336]
	mov	ebx, DWORD PTR [ebx+eax*4]
	lea	ebx, DWORD PTR [ebx+edx*8]
	mov	DWORD PTR tv749[ebp], ebx
	mov	ebx, DWORD PTR _gl$[ebp]
	mov	ebx, DWORD PTR [ebx+24]
	mov	ebx, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR [ebx+ecx*4-12]
	fld	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR tv1235[ebp]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ebx-8]
	mov	ebx, DWORD PTR tv749[ebp]
	fadd	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [esi+1336]
	mov	ebx, DWORD PTR [ebx+eax*4]
	lea	ebx, DWORD PTR [ebx+edx*8]
	mov	DWORD PTR tv749[ebp], ebx
	mov	ebx, DWORD PTR _gl$[ebp]
	mov	ebx, DWORD PTR [ebx+24]
	mov	ebx, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR [ebx+ecx*4-8]
	fld	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR tv1235[ebp]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv749[ebp]
	fadd	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [esi+1336]
	mov	ebx, DWORD PTR [ebx+eax*4]
	lea	ebx, DWORD PTR [ebx+edx*8]
	mov	DWORD PTR tv749[ebp], ebx
	mov	ebx, DWORD PTR _gl$[ebp]
	mov	ebx, DWORD PTR [ebx+24]
	mov	ebx, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR [ebx+ecx*4-4]
	fld	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR tv1235[ebp]
	add	DWORD PTR tv1235[ebp], 32		; 00000020H
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR tv749[ebp]
	fadd	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]
	mov	ebx, DWORD PTR _dim$[ebp]
	add	ebx, -3					; fffffffdH
	cmp	ecx, ebx
	jl	$LN70@lagrange_k@2
$LC69@lagrange_k@2:

; 871  :         for ( i = 0 ; i < dim ; i++ )

	cmp	ecx, DWORD PTR _dim$[ebp]
	jge	SHORT $LN74@lagrange_k@2
	mov	ebx, DWORD PTR _mat$[ebp]
	mov	ebx, DWORD PTR [ebx+edx*4]
	lea	ebx, DWORD PTR [ebx+ecx*8]
	mov	DWORD PTR tv1365[ebp], ebx
$LC15@lagrange_k@2:

; 870  :       for ( j = 0 ; j < SDIM ; j++ ) 

	mov	ebx, DWORD PTR [esi+1336]
	mov	ebx, DWORD PTR [ebx+eax*4]
	lea	ebx, DWORD PTR [ebx+edx*8]
	mov	DWORD PTR tv803[ebp], ebx

; 872  :         { f_info->grad[k][j] += weight*gl->gpolypart[m][i][k]*mat[j][i];

	mov	ebx, DWORD PTR _gl$[ebp]
	mov	ebx, DWORD PTR [ebx+24]
	mov	ebx, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fld	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR tv1365[ebp]
	add	DWORD PTR tv1365[ebp], 8
	fmul	ST(0), ST(2)
	inc	ecx
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv803[ebp]
	fadd	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]
	cmp	ecx, DWORD PTR _dim$[ebp]
	jl	SHORT $LC15@lagrange_k@2
$LN74@lagrange_k@2:

; 871  :         for ( i = 0 ; i < dim ; i++ )

	mov	ebx, DWORD PTR _web+616
	inc	edx
	cmp	edx, ebx
	jl	$LN78@lagrange_k@2

; 870  :       for ( j = 0 ; j < SDIM ; j++ ) 

	mov	ecx, DWORD PTR _gl$[ebp]
$LN20@lagrange_k@2:

; 869  :      for ( k = 0 ; k < gl->lagpts; k++ )

	inc	eax
	cmp	eax, DWORD PTR [ecx+16]
	jl	$LN21@lagrange_k@2
$LN19@lagrange_k@2:

; 873  :         }
; 874  :      for ( k = 0 ; k < gl->lagpts ; k++ )

	xor	edx, edx
	cmp	DWORD PTR [ecx+16], edx
	jle	$LN124@lagrange_k@2
$LN12@lagrange_k@2:

; 875  :       for ( j = 0 ; j < SDIM ; j++ ) 

	xor	eax, eax
	mov	DWORD PTR _j$[ebp], eax
	test	ebx, ebx
	jle	$LN11@lagrange_k@2
$LN81@lagrange_k@2:

; 876  :         for ( jj = 0 ; jj < SDIM ; jj++ ) 

	xor	ecx, ecx
	mov	DWORD PTR _jj$[ebp], ecx
	test	ebx, ebx
	jle	$LN8@lagrange_k@2

; 875  :       for ( j = 0 ; j < SDIM ; j++ ) 

	lea	eax, DWORD PTR _derivs$[ebp+eax*8]
	mov	DWORD PTR tv1785[ebp], eax
$LN6@lagrange_k@2:

; 877  :         for ( i = dim ; i < SDIM ; i++ )

	mov	eax, DWORD PTR _dim$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, ebx
	jge	$LN5@lagrange_k@2
	mov	ebx, DWORD PTR _mat$[ebp]
	mov	ecx, DWORD PTR [ebx+ecx*4]
	add	eax, eax
	add	eax, eax
	add	eax, eax
	add	ecx, eax
	mov	eax, DWORD PTR tv1785[ebp]
	mov	DWORD PTR tv1715[ebp], eax
$LN75@lagrange_k@2:

; 875  :       for ( j = 0 ; j < SDIM ; j++ ) 

	mov	eax, DWORD PTR [esi+1336]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	ebx, DWORD PTR _j$[ebp]
	lea	eax, DWORD PTR [eax+ebx*8]

; 878  :         {
; 879  :           f_info->grad[k][j] += weight
; 880  :                 *gl->gpoly[m][k]*derivs[i-dim][jj][j]*mat[jj][i];

	mov	ebx, DWORD PTR _gl$[ebp]
	mov	ebx, DWORD PTR [ebx+20]
	mov	ebx, DWORD PTR [ebx+edi*4]
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR tv1715[ebp]
	fmul	ST(0), ST(2)
	add	ebx, 288				; 00000120H
	mov	DWORD PTR tv1715[ebp], ebx
	add	ecx, 8
	fmul	QWORD PTR [ebx-288]
	fmul	QWORD PTR [ecx-8]
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ebx, DWORD PTR _web+616
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, ebx
	jl	SHORT $LN75@lagrange_k@2

; 877  :         for ( i = dim ; i < SDIM ; i++ )

	mov	ecx, DWORD PTR _jj$[ebp]
$LN5@lagrange_k@2:

; 876  :         for ( jj = 0 ; jj < SDIM ; jj++ ) 

	add	DWORD PTR tv1785[ebp], 48		; 00000030H
	inc	ecx
	mov	DWORD PTR _jj$[ebp], ecx
	cmp	ecx, ebx
	jl	$LN6@lagrange_k@2
	mov	eax, DWORD PTR _j$[ebp]
$LN8@lagrange_k@2:

; 875  :       for ( j = 0 ; j < SDIM ; j++ ) 

	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, ebx
	jl	$LN81@lagrange_k@2
	mov	ecx, DWORD PTR _gl$[ebp]
$LN11@lagrange_k@2:

; 873  :         }
; 874  :      for ( k = 0 ; k < gl->lagpts ; k++ )

	inc	edx
	cmp	edx, DWORD PTR [ecx+16]
	jl	$LN12@lagrange_k@2
$LN124@lagrange_k@2:

; 855  :   }
; 856  : 
; 857  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	inc	edi

; 875  :       for ( j = 0 ; j < SDIM ; j++ ) 

	fstp	ST(1)
	cmp	edi, DWORD PTR [ecx+4]
	jl	$LL126@lagrange_k@2
	pop	ebx
	pop	edi
	pop	esi

; 881  :         }
; 882  :   }
; 883  :   return value;  
; 884  : } // end lagrange_k_vector_integral_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN71@lagrange_k@2:
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _value$[ebp]
	pop	edi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_lagrange_k_vector_integral_grad ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_lagrange_k_vector_integral_all
; Function compile flags: /Ogtp
;	COMDAT _lagrange_k_vector_integral_all
_TEXT	SEGMENT
_secondsqXvS$ = -24992					; size = 1032
_dethessqXvS$ = -23960					; size = 1032
_matqXvS$ = -22928					; size = 24
_sign$ = -22904						; size = 8
_value$ = -22896					; size = 8
_m$ = -22888						; size = 4
_gl$ = -22884						; size = 4
_seconds$ = -22880					; size = 4
_dim$ = -22876						; size = 4
_weight$89863 = -22872					; size = 8
tv8464 = -22868						; size = 4
tv3679 = -22868						; size = 4
tv2384 = -22868						; size = 4
_dethess$ = -22864					; size = 4
_mat$ = -22860						; size = 4
_f_info$GSCopy$ = -22856				; size = 4
tv2397 = -22852						; size = 4
tv2312 = -22852						; size = 4
tv7666 = -22848						; size = 4
tv6759 = -22848						; size = 4
tv5158 = -22848						; size = 4
tv4355 = -22848						; size = 4
tv4224 = -22848						; size = 4
_k$ = -22844						; size = 4
tv3057 = -22840						; size = 4
tv2624 = -22840						; size = 4
tv2552 = -22840						; size = 4
tv2330 = -22836						; size = 4
_kk$ = -22836						; size = 4
tv6367 = -22832						; size = 4
_ii$ = -22832						; size = 4
_j$ = -22828						; size = 4
tv7701 = -22824						; size = 4
tv6284 = -22824						; size = 4
tv5122 = -22824						; size = 4
tv2527 = -22824						; size = 4
tv2438 = -22824						; size = 4
tv2104 = -22824						; size = 4
tv2097 = -22824						; size = 4
_jj$ = -22824						; size = 4
_order$ = -22820					; size = 4
_i$ = -22816						; size = 4
tv7267 = -22812						; size = 4
tv4143 = -22812						; size = 4
tv3275 = -22812						; size = 4
tv3045 = -22812						; size = 4
tv2531 = -22812						; size = 4
_jjj$89912 = -22812					; size = 4
tv7640 = -22808						; size = 4
tv7105 = -22808						; size = 4
tv6679 = -22808						; size = 4
tv5014 = -22808						; size = 4
tv4858 = -22808						; size = 4
tv4382 = -22808						; size = 4
tv3826 = -22808						; size = 4
tv3405 = -22808						; size = 4
tv3013 = -22808						; size = 4
tv2455 = -22808						; size = 4
_dethessxJ$ = -22804					; size = 10368
_secondsxJ$ = -12436					; size = 10368
_matxJ$ = -2068						; size = 288
_derivs$ = -1780					; size = 1728
_val$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_mode$ = 12						; size = 4
_lagrange_k_vector_integral_all PROC			; COMDAT

; 909  : { int i,m,j,k,jj,ii,kk;

	push	ebp
	mov	ebp, esp
	mov	eax, 24992				; 000061a0H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 910  :   REAL value = 0.0;

	fldz
	push	ebx
	push	esi
	fstp	QWORD PTR _value$[ebp]
	mov	esi, DWORD PTR _f_info$[ebp]

; 911  :   REAL val[MAXCOORD];
; 912  :   REAL derivs[MAXCOORD][MAXCOORD][MAXCOORD];
; 913  :   MAT4D(seconds,MAXCOORD,MAXCOORD,MAXCOORD,MAXCOORD);

	push	6
	push	6
	push	6
	push	6
	lea	eax, DWORD PTR _secondsxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _secondsqXvS$[ebp]
	push	ecx
	mov	DWORD PTR _f_info$GSCopy$[ebp], esi
	call	_mat4d_setup

; 914  :   MAT2D(mat,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	edx, DWORD PTR _matxJ$[ebp]
	mov	DWORD PTR _seconds$[ebp], eax
	push	edx
	lea	eax, DWORD PTR _matqXvS$[ebp]
	push	eax
	call	_mat2d_setup

; 915  :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR _web+236
	mov	DWORD PTR _mat$[ebp], eax
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	add	esp, 40					; 00000028H
	or	eax, ecx
	je	SHORT $LN84@lagrange_k@3
	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN311@lagrange_k@3
$LN84@lagrange_k@3:
	fld1
$LN311@lagrange_k@3:

; 916  :   int dim = web.dimension;

	mov	eax, DWORD PTR _web+620
	fstp	QWORD PTR _sign$[ebp]

; 917  :   struct gauss_lag *gl = &gauss_lagrange[dim][web.gauss2D_order];

	mov	ebx, DWORD PTR _web+1596

; 918  :   MAT4D(dethess,MAXCOORD,MAXCOORD,MAXCOORD,MAXCOORD);

	push	6
	push	6
	push	6
	shl	ebx, 5
	add	ebx, DWORD PTR _gauss_lagrange[eax*4]
	mov	DWORD PTR _dim$[ebp], eax
	push	6
	lea	eax, DWORD PTR _dethessxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dethessqXvS$[ebp]
	push	ecx
	mov	DWORD PTR _gl$[ebp], ebx
	call	_mat4d_setup

; 919  :   int order = METH_INSTANCE(f_info->method)->vec_order;
; 920  :   
; 921  :   if ( id_type(f_info->id) == EDGE )

	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR _dethess$[ebp], eax
	mov	eax, DWORD PTR [esi+8]
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	edx, DWORD PTR _meth_inst_list
	imul	eax, 2928				; 00000b70H
	mov	eax, DWORD PTR [eax+edx+224]
	and	ecx, -536870912				; e0000000H
	add	esp, 24					; 00000018H
	mov	DWORD PTR _order$[ebp], eax
	mov	eax, 1
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN81@lagrange_k@3

; 922  :   { dim = (web.representation==STRING)?1:web.dimension-1; 

	cmp	DWORD PTR _web+624, eax
	je	SHORT $LN312@lagrange_k@3
	mov	eax, DWORD PTR _web+620
	dec	eax
$LN312@lagrange_k@3:

; 923  :     gl = &gauss_lagrange[dim][web.gauss1D_order];

	mov	ebx, DWORD PTR _web+1592
	shl	ebx, 5
	add	ebx, DWORD PTR _gauss_lagrange[eax*4]
	mov	DWORD PTR _dim$[ebp], eax
	mov	DWORD PTR _gl$[ebp], ebx
$LN81@lagrange_k@3:

; 924  :   }
; 925  : 
; 926  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	xor	esi, esi
	mov	DWORD PTR _m$[ebp], esi
	cmp	DWORD PTR [ebx+4], esi
	jle	$LN155@lagrange_k@3
	push	edi
	jmp	SHORT $LN156@lagrange_k@3
$LL309@lagrange_k@3:
	fstp	ST(0)
$LN156@lagrange_k@3:

; 927  :   { REAL det;
; 928  :      REAL weight = sign*gl->gausswt[m]/factorial[dim];

	mov	edx, DWORD PTR [ebx+12]
	fld	QWORD PTR [edx+esi*8]
	mov	eax, DWORD PTR _dim$[ebp]
	fmul	QWORD PTR _sign$[ebp]

; 929  :      for ( i = 0 ; i < order ; i++ )

	mov	edx, DWORD PTR _web+616
	xor	ecx, ecx
	fdiv	QWORD PTR _factorial[eax*8]
	fstp	QWORD PTR _weight$89863[ebp]
	cmp	DWORD PTR _order$[ebp], ecx
	jle	SHORT $LN75@lagrange_k@3
$LL77@lagrange_k@3:

; 930  :         for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN76@lagrange_k@3
	mov	edx, DWORD PTR _mat$[ebp]
	mov	edi, DWORD PTR [edx+ecx*4]
	npad	13
$LL74@lagrange_k@3:

; 931  :           mat[i][j] = f_info->sides[m][i][j];  /* mat destroyed by det */

	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [edx+1276]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	inc	eax
	fstp	QWORD PTR [edi+eax*8-8]
	mov	edx, DWORD PTR _web+616
	cmp	eax, edx
	jl	SHORT $LL74@lagrange_k@3
$LN76@lagrange_k@3:

; 929  :      for ( i = 0 ; i < order ; i++ )

	inc	ecx
	cmp	ecx, DWORD PTR _order$[ebp]
	jl	SHORT $LL77@lagrange_k@3
$LN75@lagrange_k@3:

; 932  :      for ( k = 0 ; k+order < SDIM ; k++ )

	mov	DWORD PTR _k$[ebp], 0
	cmp	DWORD PTR _order$[ebp], edx
	jge	$LN69@lagrange_k@3
	mov	ecx, DWORD PTR _mat$[ebp]
	mov	edx, DWORD PTR _order$[ebp]
	lea	eax, DWORD PTR _derivs$[ebp]
	mov	DWORD PTR tv3045[ebp], eax
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR tv3057[ebp], eax
	npad	12
$LL71@lagrange_k@3:

; 933  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	edi, edi
	cmp	DWORD PTR _web+616, edi
	jle	$LN70@lagrange_k@3
	mov	ecx, DWORD PTR tv3045[ebp]
	mov	DWORD PTR tv3013[ebp], ecx
	mov	ecx, DWORD PTR _web+616
$LL157@lagrange_k@3:

; 934  :       { eval_second(METH_INSTANCE(abs(f_info->method))->expr[j+k*SDIM],
; 935  :           f_info->gauss_pt[m],SDIM,val+j,derivs[k][j],seconds[k][j],f_info->id);

	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _seconds$[ebp]
	push	eax
	mov	eax, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR tv3013[ebp]
	push	eax
	push	edx
	lea	eax, DWORD PTR _val$[ebp+edi*8]
	push	eax
	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [eax+1268]
	mov	eax, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx+esi*4]
	push	ecx
	imul	ecx, DWORD PTR _k$[ebp]
	push	edx
	cdq
	xor	eax, edx
	sub	eax, edx
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 732				; 000002dcH
	add	eax, edi
	add	ecx, eax
	mov	eax, DWORD PTR _meth_inst_list
	mov	ecx, DWORD PTR [eax+ecx*4+232]
	push	ecx
	call	_eval_second

; 936  :         mat[k+order][j] = val[j];

	mov	edx, DWORD PTR tv3057[ebp]
	fld	QWORD PTR _val$[ebp+edi*8]
	mov	eax, DWORD PTR [edx]
	add	DWORD PTR tv3013[ebp], 48		; 00000030H
	fstp	QWORD PTR [eax+edi*8]
	mov	ecx, DWORD PTR _web+616
	inc	edi
	add	esp, 28					; 0000001cH
	cmp	edi, ecx
	jl	$LL157@lagrange_k@3
$LN70@lagrange_k@3:

; 932  :      for ( k = 0 ; k+order < SDIM ; k++ )

	mov	eax, DWORD PTR _k$[ebp]
	add	DWORD PTR tv3045[ebp], 288		; 00000120H
	add	DWORD PTR tv3057[ebp], 4
	inc	eax
	mov	DWORD PTR _k$[ebp], eax
	add	eax, DWORD PTR _order$[ebp]
	cmp	eax, DWORD PTR _web+616
	jl	$LL71@lagrange_k@3
$LN69@lagrange_k@3:

; 937  :       }
; 938  :      det_hess(mat,dethess,SDIM);

	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR _dethess$[ebp]
	mov	edi, DWORD PTR _mat$[ebp]
	push	edx
	push	eax
	push	edi
	call	_det_hess

; 939  :      det = det_adjoint(mat,SDIM);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	push	edi
	call	_det_adjoint

; 940  : 
; 941  :      value += weight*det;

	fld	QWORD PTR _weight$89863[ebp]
	fmul	ST(1), ST(0)
	add	esp, 20					; 00000014H

; 942  :      
; 943  :      if ( mode == METHOD_VALUE ) continue;

	cmp	DWORD PTR _mode$[ebp], 1767		; 000006e7H
	fxch	ST(1)
	fadd	QWORD PTR _value$[ebp]
	fst	QWORD PTR _value$[ebp]
	je	$LN183@lagrange_k@3

; 944  : 
; 945  :      /* gradient */
; 946  :      for ( k = 0 ; k < gl->lagpts; k++ )

	mov	edi, DWORD PTR _web+616
	xor	eax, eax
	cmp	DWORD PTR [ebx+16], eax
	jle	$LN62@lagrange_k@3
$LN64@lagrange_k@3:

; 947  :       for ( j = 0 ; j < SDIM ; j++ ) 

	xor	edx, edx
	mov	DWORD PTR _j$[ebp], edx
	test	edi, edi
	jle	$LN63@lagrange_k@3
$LN61@lagrange_k@3:

; 948  :         for ( i = 0 ; i < order ; i++ )

	xor	ecx, ecx
	cmp	DWORD PTR _order$[ebp], 4
	jl	$LC141@lagrange_k@3
	mov	edi, DWORD PTR _mat$[ebp]
	mov	edi, DWORD PTR [edi+edx*4]
	add	edi, 16					; 00000010H
	mov	DWORD PTR tv3275[ebp], edi
$LN177@lagrange_k@3:

; 947  :       for ( j = 0 ; j < SDIM ; j++ ) 

	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edi, DWORD PTR [edi+1336]
	mov	edi, DWORD PTR [edi+eax*4]
	lea	edi, DWORD PTR [edi+edx*8]
	mov	DWORD PTR tv2330[ebp], edi

; 949  :         { f_info->grad[k][j] += weight*gl->gpolypart[m][i][k]*mat[j][i];

	mov	edi, DWORD PTR [ebx+24]
	mov	edi, DWORD PTR [edi+esi*4]
	mov	edi, DWORD PTR [edi+ecx*4]
	fld	QWORD PTR [edi+eax*8]
	mov	edi, DWORD PTR tv3275[ebp]
	fmul	ST(0), ST(2)
	add	ecx, 4
	fmul	QWORD PTR [edi-16]
	mov	edi, DWORD PTR tv2330[ebp]
	fadd	QWORD PTR [edi]
	fstp	QWORD PTR [edi]
	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edi, DWORD PTR [edi+1336]
	mov	edi, DWORD PTR [edi+eax*4]
	lea	edi, DWORD PTR [edi+edx*8]
	mov	DWORD PTR tv2330[ebp], edi
	mov	edi, DWORD PTR [ebx+24]
	mov	edi, DWORD PTR [edi+esi*4]
	mov	edi, DWORD PTR [edi+ecx*4-12]
	fld	QWORD PTR [edi+eax*8]
	mov	edi, DWORD PTR tv3275[ebp]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [edi-8]
	mov	edi, DWORD PTR tv2330[ebp]
	fadd	QWORD PTR [edi]
	fstp	QWORD PTR [edi]
	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edi, DWORD PTR [edi+1336]
	mov	edi, DWORD PTR [edi+eax*4]
	lea	edx, DWORD PTR [edi+edx*8]
	mov	DWORD PTR tv2330[ebp], edx
	mov	edx, DWORD PTR [ebx+24]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx+ecx*4-8]
	fld	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR tv3275[ebp]
	mov	edi, DWORD PTR _j$[ebp]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv2330[ebp]
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [edx+1336]
	mov	edx, DWORD PTR [edx+eax*4]
	lea	edx, DWORD PTR [edx+edi*8]
	mov	edi, DWORD PTR tv3275[ebp]
	mov	DWORD PTR tv2330[ebp], edx
	mov	edx, DWORD PTR [ebx+24]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx+ecx*4-4]
	fld	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR tv2330[ebp]
	fmul	ST(0), ST(2)
	add	edi, 32					; 00000020H
	mov	DWORD PTR tv3275[ebp], edi
	fmul	QWORD PTR [edi-24]
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR _order$[ebp]
	add	edx, -3					; fffffffdH
	cmp	ecx, edx
	mov	edx, DWORD PTR _j$[ebp]
	jl	$LN177@lagrange_k@3
$LC141@lagrange_k@3:

; 948  :         for ( i = 0 ; i < order ; i++ )

	cmp	ecx, DWORD PTR _order$[ebp]
	jge	SHORT $LN179@lagrange_k@3
	mov	edi, DWORD PTR _mat$[ebp]
	mov	edi, DWORD PTR [edi+edx*4]
	lea	edi, DWORD PTR [edi+ecx*8]
	mov	DWORD PTR tv3405[ebp], edi
$LC58@lagrange_k@3:

; 947  :       for ( j = 0 ; j < SDIM ; j++ ) 

	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edi, DWORD PTR [edi+1336]
	mov	edi, DWORD PTR [edi+eax*4]
	lea	edi, DWORD PTR [edi+edx*8]
	mov	DWORD PTR tv2384[ebp], edi

; 949  :         { f_info->grad[k][j] += weight*gl->gpolypart[m][i][k]*mat[j][i];

	mov	edi, DWORD PTR [ebx+24]
	mov	edi, DWORD PTR [edi+esi*4]
	mov	edi, DWORD PTR [edi+ecx*4]
	fld	QWORD PTR [edi+eax*8]
	mov	edi, DWORD PTR tv3405[ebp]
	add	DWORD PTR tv3405[ebp], 8
	fmul	ST(0), ST(2)
	inc	ecx
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR tv2384[ebp]
	fadd	QWORD PTR [edi]
	fstp	QWORD PTR [edi]
	cmp	ecx, DWORD PTR _order$[ebp]
	jl	SHORT $LC58@lagrange_k@3
$LN179@lagrange_k@3:

; 948  :         for ( i = 0 ; i < order ; i++ )

	mov	edi, DWORD PTR _web+616
	inc	edx
	mov	DWORD PTR _j$[ebp], edx
	cmp	edx, edi
	jl	$LN61@lagrange_k@3
$LN63@lagrange_k@3:

; 944  : 
; 945  :      /* gradient */
; 946  :      for ( k = 0 ; k < gl->lagpts; k++ )

	inc	eax
	cmp	eax, DWORD PTR [ebx+16]
	jl	$LN64@lagrange_k@3
$LN62@lagrange_k@3:

; 950  :         }
; 951  :      for ( k = 0 ; k < gl->lagpts ; k++ )

	xor	edx, edx
	cmp	DWORD PTR [ebx+16], edx
	jle	$LN53@lagrange_k@3
$LN55@lagrange_k@3:

; 952  :       for ( j = 0 ; j < SDIM ; j++ ) 

	xor	ecx, ecx
	mov	DWORD PTR _j$[ebp], ecx
	test	edi, edi
	jle	$LN54@lagrange_k@3
$LN52@lagrange_k@3:

; 953  :         for ( jj = 0 ; jj < SDIM ; jj++ ) 

	xor	eax, eax
	mov	DWORD PTR _jj$[ebp], eax
	test	edi, edi
	jle	$LN51@lagrange_k@3

; 952  :       for ( j = 0 ; j < SDIM ; j++ ) 

	lea	ecx, DWORD PTR _derivs$[ebp+ecx*8]
	mov	DWORD PTR tv3826[ebp], ecx
$LN49@lagrange_k@3:

; 954  :         for ( i = order ; i < SDIM ; i++ )

	mov	ecx, DWORD PTR _order$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
	cmp	ecx, edi
	jge	SHORT $LN48@lagrange_k@3
	mov	edi, DWORD PTR _mat$[ebp]
	mov	eax, DWORD PTR [edi+eax*4]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR tv3679[ebp], ecx
	mov	ecx, DWORD PTR tv3826[ebp]
$LN178@lagrange_k@3:

; 952  :       for ( j = 0 ; j < SDIM ; j++ ) 

	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [eax+1336]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	edi, DWORD PTR _j$[ebp]
	lea	eax, DWORD PTR [eax+edi*8]

; 955  :         {
; 956  :           f_info->grad[k][j] += weight
; 957  :                 *gl->gpoly[m][k]*derivs[i-order][jj][j]*mat[jj][i];

	mov	edi, DWORD PTR [ebx+20]
	mov	edi, DWORD PTR [edi+esi*4]
	fld	QWORD PTR [edi+edx*8]
	mov	edi, DWORD PTR tv3679[ebp]
	fmul	ST(0), ST(2)
	add	edi, 8
	mov	DWORD PTR tv3679[ebp], edi
	add	ecx, 288				; 00000120H
	fmul	QWORD PTR [ecx-288]
	fmul	QWORD PTR [edi-8]
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	edi, DWORD PTR _web+616
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, edi
	jl	SHORT $LN178@lagrange_k@3

; 954  :         for ( i = order ; i < SDIM ; i++ )

	mov	eax, DWORD PTR _jj$[ebp]
$LN48@lagrange_k@3:

; 953  :         for ( jj = 0 ; jj < SDIM ; jj++ ) 

	add	DWORD PTR tv3826[ebp], 48		; 00000030H
	inc	eax
	mov	DWORD PTR _jj$[ebp], eax
	cmp	eax, edi
	jl	$LN49@lagrange_k@3
	mov	ecx, DWORD PTR _j$[ebp]
$LN51@lagrange_k@3:

; 952  :       for ( j = 0 ; j < SDIM ; j++ ) 

	inc	ecx
	mov	DWORD PTR _j$[ebp], ecx
	cmp	ecx, edi
	jl	$LN52@lagrange_k@3
$LN54@lagrange_k@3:

; 950  :         }
; 951  :      for ( k = 0 ; k < gl->lagpts ; k++ )

	inc	edx
	cmp	edx, DWORD PTR [ebx+16]
	jl	$LN55@lagrange_k@3
$LN53@lagrange_k@3:

; 958  :         }
; 959  : 
; 960  :      if ( mode == METHOD_GRADIENT ) continue;

	cmp	DWORD PTR _mode$[ebp], 4321		; 000010e1H
	je	$LN183@lagrange_k@3

; 961  : 
; 962  :      /* hessian */
; 963  :      for ( k = 0 ; k < gl->lagpts  ; k++ )

	mov	eax, DWORD PTR [ebx+16]
	mov	DWORD PTR _k$[ebp], 0
	test	eax, eax
	jle	$LN183@lagrange_k@3
	fldz
$LN42@lagrange_k@3:

; 964  :         for ( kk = 0 ; kk < gl->lagpts ; kk++ )

	xor	edi, edi
	mov	DWORD PTR _kk$[ebp], edi
	test	eax, eax
	jle	$LN41@lagrange_k@3
$LN39@lagrange_k@3:

; 965  :           for ( j = 0 ; j < SDIM ; j++ )

	cmp	DWORD PTR _web+616, 0
	mov	DWORD PTR _j$[ebp], 0
	jle	$LN38@lagrange_k@3
	lea	ecx, DWORD PTR _derivs$[ebp+48]
	mov	DWORD PTR tv8464[ebp], ecx
$LN36@lagrange_k@3:

; 966  :              for ( jj = 0 ; jj < SDIM ; jj++ )

	xor	edx, edx
	cmp	DWORD PTR _web+616, edx
	jle	$LN35@lagrange_k@3
$LN169@lagrange_k@3:

; 967  :              { REAL h = 0.0;
; 968  :                 int jjj;
; 969  :                 for ( i = 0 ; i < order ; i++ )

	mov	ecx, DWORD PTR _order$[ebp]
	fld	ST(0)
	xor	eax, eax
	mov	DWORD PTR _i$[ebp], eax
	test	ecx, ecx
	jle	$LN160@lagrange_k@3
$LN170@lagrange_k@3:

; 970  :                  for ( ii  = 0 ; ii < order ; ii++ )

	mov	ecx, DWORD PTR _order$[ebp]
	mov	DWORD PTR _ii$[ebp], 0
	cmp	ecx, 4
	jl	$LN166@lagrange_k@3

; 961  : 
; 962  :      /* hessian */
; 963  :      for ( k = 0 ; k < gl->lagpts  ; k++ )

	mov	ecx, DWORD PTR _dethess$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	edi, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	edi, DWORD PTR _k$[ebp]
	mov	DWORD PTR tv2438[ebp], ecx
	mov	ecx, DWORD PTR [ebx+24]
	mov	ecx, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR [ecx+eax*4]
	lea	eax, DWORD PTR [eax+edi*8]

; 970  :                  for ( ii  = 0 ; ii < order ; ii++ )

	mov	edi, DWORD PTR tv2438[ebp]
	mov	DWORD PTR tv2455[ebp], eax
	lea	eax, DWORD PTR [edi+12]

; 971  :                  { h += dethess[i][j][ii][jj]
; 972  :                             *gl->gpolypart[m][i][k]*gl->gpolypart[m][ii][kk];

	sub	edi, ecx
	mov	DWORD PTR tv4143[ebp], eax
	lea	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _order$[ebp]
	add	ecx, -4					; fffffffcH
	shr	ecx, 2
	inc	ecx
	mov	DWORD PTR tv2097[ebp], ecx
	add	ecx, ecx
	add	ecx, ecx
	mov	DWORD PTR tv4224[ebp], edi
	mov	edi, DWORD PTR _kk$[ebp]
	mov	DWORD PTR _ii$[ebp], ecx
$LN171@lagrange_k@3:
	mov	ecx, DWORD PTR tv4143[ebp]
	mov	ecx, DWORD PTR [ecx-12]
	fld	QWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR tv2455[ebp]
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax-4]
	add	eax, 16					; 00000010H
	fmul	QWORD PTR [ecx+edi*8]
	mov	ecx, DWORD PTR tv4224[ebp]
	mov	ecx, DWORD PTR [ecx+eax-16]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR tv2455[ebp]
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax-16]
	fmul	QWORD PTR [ecx+edi*8]
	mov	ecx, DWORD PTR tv4143[ebp]
	mov	ecx, DWORD PTR [ecx-4]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR tv2455[ebp]
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax-12]
	fmul	QWORD PTR [ecx+edi*8]
	mov	ecx, DWORD PTR tv4143[ebp]
	mov	ecx, DWORD PTR [ecx]
	add	DWORD PTR tv4143[ebp], 16		; 00000010H
	dec	DWORD PTR tv2097[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR tv2455[ebp]
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax-8]
	fmul	QWORD PTR [ecx+edi*8]
	faddp	ST(1), ST(0)
	jne	$LN171@lagrange_k@3

; 970  :                  for ( ii  = 0 ; ii < order ; ii++ )

	mov	ecx, DWORD PTR _order$[ebp]
$LN166@lagrange_k@3:
	cmp	DWORD PTR _ii$[ebp], ecx
	jge	$LN29@lagrange_k@3

; 961  : 
; 962  :      /* hessian */
; 963  :      for ( k = 0 ; k < gl->lagpts  ; k++ )

	mov	eax, DWORD PTR [ebx+24]
	mov	eax, DWORD PTR [eax+esi*4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv2527[ebp], eax
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR _k$[ebp]
	lea	eax, DWORD PTR [eax+ecx*8]

; 970  :                  for ( ii  = 0 ; ii < order ; ii++ )

	mov	ecx, DWORD PTR tv2527[ebp]
	mov	DWORD PTR tv2531[ebp], eax
	mov	eax, DWORD PTR _ii$[ebp]
	lea	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dethess$[ebp]
	mov	DWORD PTR tv4355[ebp], ecx
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	sub	eax, DWORD PTR tv2527[ebp]
	mov	DWORD PTR tv4382[ebp], eax
	mov	eax, DWORD PTR _order$[ebp]
	sub	eax, DWORD PTR _ii$[ebp]
	mov	DWORD PTR tv2104[ebp], eax
	mov	eax, DWORD PTR tv4355[ebp]
$LC27@lagrange_k@3:

; 971  :                  { h += dethess[i][j][ii][jj]
; 972  :                             *gl->gpolypart[m][i][k]*gl->gpolypart[m][ii][kk];

	mov	ecx, DWORD PTR tv4382[ebp]
	mov	ecx, DWORD PTR [ecx+eax]
	fld	QWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR tv2531[ebp]
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax]
	add	eax, 4
	dec	DWORD PTR tv2104[ebp]
	fmul	QWORD PTR [ecx+edi*8]
	faddp	ST(1), ST(0)
	jne	SHORT $LC27@lagrange_k@3

; 970  :                  for ( ii  = 0 ; ii < order ; ii++ )

	mov	ecx, DWORD PTR _order$[ebp]
$LN29@lagrange_k@3:

; 967  :              { REAL h = 0.0;
; 968  :                 int jjj;
; 969  :                 for ( i = 0 ; i < order ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, ecx
	jl	$LN170@lagrange_k@3
$LN160@lagrange_k@3:

; 973  :                  }
; 974  :                 for ( i = 0 ; i < order ; i++ )

	mov	DWORD PTR _i$[ebp], 0
	test	ecx, ecx
	jle	$LN22@lagrange_k@3
$LN24@lagrange_k@3:

; 975  :                  for ( ii  = order ; ii < SDIM ; ii++ )

	mov	eax, DWORD PTR _order$[ebp]
	mov	DWORD PTR _ii$[ebp], eax
	cmp	eax, DWORD PTR _web+616
	jge	$LN23@lagrange_k@3
	mov	ecx, eax
	sub	ecx, DWORD PTR _dim$[ebp]
	lea	eax, DWORD PTR [ecx+ecx*2]
	add	eax, eax
	mov	DWORD PTR tv5122[ebp], eax
	lea	eax, DWORD PTR [ecx+ecx*8]
	lea	ecx, DWORD PTR [edx+eax*4]
	lea	eax, DWORD PTR _derivs$[ebp+ecx*8+48]
	mov	DWORD PTR tv5158[ebp], eax
$LN21@lagrange_k@3:

; 976  :                  for ( jjj = 0 ; jjj < SDIM ; jjj++ )

	xor	ecx, ecx
	cmp	DWORD PTR _web+616, 4
	jl	$LN173@lagrange_k@3

; 961  : 
; 962  :      /* hessian */
; 963  :      for ( k = 0 ; k < gl->lagpts  ; k++ )

	mov	ecx, DWORD PTR [ebx+24]
	mov	eax, DWORD PTR [ecx+esi*4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR _k$[ebp]
	lea	eax, DWORD PTR [eax+ecx*8]

; 964  :         for ( kk = 0 ; kk < gl->lagpts ; kk++ )

	mov	ecx, DWORD PTR [ebx+20]
	mov	DWORD PTR tv2312[ebp], eax
	mov	eax, DWORD PTR [ecx+esi*4]
	lea	ecx, DWORD PTR [eax+edi*8]

; 976  :                  for ( jjj = 0 ; jjj < SDIM ; jjj++ )

	mov	eax, DWORD PTR _dethess$[ebp]
	mov	DWORD PTR tv2552[ebp], ecx
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR _ii$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR tv5158[ebp]
	mov	DWORD PTR tv4858[ebp], ecx
	mov	ecx, DWORD PTR _web+616
	add	ecx, -4					; fffffffcH
	shr	ecx, 2
	add	eax, 16					; 00000010H
	inc	ecx
	lea	edi, DWORD PTR [ecx*4]
	mov	DWORD PTR _jjj$89912[ebp], edi
$LN148@lagrange_k@3:

; 977  :                   h += dethess[i][j][ii][jjj]*gl->gpolypart[m][i][k]
; 978  :                               *gl->gpoly[m][kk]*derivs[ii-dim][jjj][jj];

	fld	QWORD PTR [eax-16]
	mov	edi, DWORD PTR tv2312[ebp]
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR tv2552[ebp]
	add	eax, 32					; 00000020H
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR tv4858[ebp]
	fmul	QWORD PTR [edi-48]
	mov	edi, DWORD PTR tv2312[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax-40]
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR tv2552[ebp]
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR tv4858[ebp]
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR tv2312[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax-32]
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR tv2552[ebp]
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR tv4858[ebp]
	fmul	QWORD PTR [edi+48]
	mov	edi, DWORD PTR tv2312[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax-24]
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR tv2552[ebp]
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR tv4858[ebp]
	add	edi, 192				; 000000c0H
	dec	ecx
	fmul	QWORD PTR [edi-96]
	mov	DWORD PTR tv4858[ebp], edi
	faddp	ST(1), ST(0)
	jne	$LN148@lagrange_k@3

; 976  :                  for ( jjj = 0 ; jjj < SDIM ; jjj++ )

	mov	edi, DWORD PTR _kk$[ebp]
	mov	ecx, DWORD PTR _jjj$89912[ebp]
$LN173@lagrange_k@3:
	cmp	ecx, DWORD PTR _web+616
	jge	$LN20@lagrange_k@3

; 961  : 
; 962  :      /* hessian */
; 963  :      for ( k = 0 ; k < gl->lagpts  ; k++ )

	mov	eax, DWORD PTR [ebx+24]
	mov	eax, DWORD PTR [eax+esi*4]
	mov	edi, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax+edi*4]
	mov	edi, DWORD PTR _k$[ebp]
	lea	eax, DWORD PTR [eax+edi*8]

; 964  :         for ( kk = 0 ; kk < gl->lagpts ; kk++ )

	mov	edi, DWORD PTR _kk$[ebp]
	mov	DWORD PTR tv2312[ebp], eax
	mov	eax, DWORD PTR [ebx+20]
	mov	eax, DWORD PTR [eax+esi*4]
	lea	eax, DWORD PTR [eax+edi*8]

; 976  :                  for ( jjj = 0 ; jjj < SDIM ; jjj++ )

	mov	edi, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv2552[ebp], eax
	mov	eax, DWORD PTR _dethess$[ebp]
	mov	eax, DWORD PTR [eax+edi*4]
	mov	edi, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [eax+edi*4]
	mov	edi, DWORD PTR _ii$[ebp]
	mov	eax, DWORD PTR [eax+edi*4]
	lea	eax, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR tv5014[ebp], eax
	mov	eax, DWORD PTR tv5122[ebp]
	add	eax, ecx
	lea	eax, DWORD PTR [eax+eax*2]
	lea	edi, DWORD PTR [edx+eax*2]
	mov	eax, DWORD PTR _web+616
	lea	edi, DWORD PTR _derivs$[ebp+edi*8]
	sub	eax, ecx
$LC18@lagrange_k@3:

; 977  :                   h += dethess[i][j][ii][jjj]*gl->gpolypart[m][i][k]
; 978  :                               *gl->gpoly[m][kk]*derivs[ii-dim][jjj][jj];

	mov	ecx, DWORD PTR tv5014[ebp]
	fld	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv2312[ebp]
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv2552[ebp]
	add	DWORD PTR tv5014[ebp], 8
	add	edi, 48					; 00000030H
	dec	eax
	fmul	QWORD PTR [ecx]
	fmul	QWORD PTR [edi-48]
	faddp	ST(1), ST(0)
	jne	SHORT $LC18@lagrange_k@3

; 976  :                  for ( jjj = 0 ; jjj < SDIM ; jjj++ )

	mov	edi, DWORD PTR _kk$[ebp]
$LN20@lagrange_k@3:

; 975  :                  for ( ii  = order ; ii < SDIM ; ii++ )

	mov	eax, DWORD PTR _ii$[ebp]
	add	DWORD PTR tv5158[ebp], 288		; 00000120H
	add	DWORD PTR tv5122[ebp], 6
	inc	eax
	mov	DWORD PTR _ii$[ebp], eax
	cmp	eax, DWORD PTR _web+616
	jl	$LN21@lagrange_k@3
$LN23@lagrange_k@3:

; 973  :                  }
; 974  :                 for ( i = 0 ; i < order ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _order$[ebp]
	jl	$LN24@lagrange_k@3
$LN22@lagrange_k@3:

; 979  :                 for ( i = order ; i < SDIM ; i++ )

	mov	eax, DWORD PTR _order$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _web+616
	jge	$LN13@lagrange_k@3
	mov	eax, DWORD PTR tv8464[ebp]
	mov	DWORD PTR tv6679[ebp], 0
	mov	DWORD PTR tv6759[ebp], eax
$LN15@lagrange_k@3:

; 980  :                 for ( ii = 0 ; ii < order ; ii++ )

	xor	ecx, ecx
	cmp	DWORD PTR _order$[ebp], ecx
	jle	$LN14@lagrange_k@3
$LN12@lagrange_k@3:

; 981  :                  for ( jjj = 0 ; jjj < SDIM ; jjj++ )

	cmp	DWORD PTR _web+616, 4
	mov	DWORD PTR _jjj$89912[ebp], 0
	jl	$LN168@lagrange_k@3

; 964  :         for ( kk = 0 ; kk < gl->lagpts ; kk++ )

	mov	eax, DWORD PTR [ebx+24]
	mov	eax, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR [eax+ecx*4]
	lea	eax, DWORD PTR [eax+edi*8]

; 981  :                  for ( jjj = 0 ; jjj < SDIM ; jjj++ )

	mov	edi, DWORD PTR _web+616
	mov	DWORD PTR tv2624[ebp], eax
	mov	eax, DWORD PTR [ebx+20]
	mov	eax, DWORD PTR [eax+esi*4]
	mov	esi, DWORD PTR _k$[ebp]
	lea	eax, DWORD PTR [eax+esi*8]
	mov	esi, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv2397[ebp], eax
	mov	eax, DWORD PTR _dethess$[ebp]
	mov	eax, DWORD PTR [eax+esi*4]
	mov	esi, DWORD PTR tv6759[ebp]
	add	edi, -4					; fffffffcH
	shr	edi, 2
	add	eax, 8
	inc	edi
	lea	ebx, DWORD PTR [edi*4]
	mov	DWORD PTR _jjj$89912[ebp], ebx
$LN151@lagrange_k@3:

; 982  :                   h += dethess[i][jjj][ii][jj]*gl->gpolypart[m][ii][kk]
; 983  :                               *gl->gpoly[m][k]*derivs[i-order][jjj][j];

	mov	ebx, DWORD PTR [eax-8]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR tv2624[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv2397[ebp]
	add	esi, 192				; 000000c0H
	add	eax, 16					; 00000010H
	dec	edi
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [eax-20]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fmul	QWORD PTR [esi-240]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR tv2624[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv2397[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [eax-16]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fmul	QWORD PTR [esi-192]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR tv2624[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv2397[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [eax-12]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fmul	QWORD PTR [esi-144]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR tv2624[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv2397[ebp]
	fmul	QWORD PTR [ebx]
	fmul	QWORD PTR [esi-96]
	faddp	ST(1), ST(0)
	jne	$LN151@lagrange_k@3

; 981  :                  for ( jjj = 0 ; jjj < SDIM ; jjj++ )

	mov	ebx, DWORD PTR _gl$[ebp]
	mov	esi, DWORD PTR _m$[ebp]
$LN168@lagrange_k@3:
	mov	eax, DWORD PTR _jjj$89912[ebp]
	cmp	eax, DWORD PTR _web+616
	jge	$LN11@lagrange_k@3

; 964  :         for ( kk = 0 ; kk < gl->lagpts ; kk++ )

	mov	eax, DWORD PTR [ebx+24]
	mov	eax, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	edi, DWORD PTR _kk$[ebp]
	lea	eax, DWORD PTR [eax+edi*8]
	mov	edi, DWORD PTR _k$[ebp]
	mov	DWORD PTR tv2624[ebp], eax
	mov	eax, DWORD PTR [ebx+20]
	mov	eax, DWORD PTR [eax+esi*4]
	lea	eax, DWORD PTR [eax+edi*8]

; 981  :                  for ( jjj = 0 ; jjj < SDIM ; jjj++ )

	mov	edi, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv2397[ebp], eax
	mov	eax, DWORD PTR _dethess$[ebp]
	mov	edi, DWORD PTR [eax+edi*4]
	mov	eax, DWORD PTR _jjj$89912[ebp]
	lea	edi, DWORD PTR [edi+eax*4]
	add	eax, DWORD PTR tv6679[ebp]
	mov	DWORD PTR tv6284[ebp], edi
	mov	edi, DWORD PTR _j$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [edi+eax*2]
	lea	eax, DWORD PTR _derivs$[ebp+eax*8]
	mov	DWORD PTR tv6367[ebp], eax
	mov	eax, DWORD PTR _web+616
	sub	eax, DWORD PTR _jjj$89912[ebp]
$LC9@lagrange_k@3:

; 982  :                   h += dethess[i][jjj][ii][jj]*gl->gpolypart[m][ii][kk]
; 983  :                               *gl->gpoly[m][k]*derivs[i-order][jjj][j];

	mov	edi, DWORD PTR tv6284[ebp]
	mov	edi, DWORD PTR [edi]
	mov	edi, DWORD PTR [edi+ecx*4]
	fld	QWORD PTR [edi+edx*8]
	mov	edi, DWORD PTR tv2624[ebp]
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR tv2397[ebp]
	add	DWORD PTR tv6284[ebp], 4
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR tv6367[ebp]
	add	edi, 48					; 00000030H
	dec	eax
	fmul	QWORD PTR [edi-48]
	mov	DWORD PTR tv6367[ebp], edi
	faddp	ST(1), ST(0)
	jne	SHORT $LC9@lagrange_k@3
$LN11@lagrange_k@3:

; 980  :                 for ( ii = 0 ; ii < order ; ii++ )

	mov	edi, DWORD PTR _kk$[ebp]
	inc	ecx
	cmp	ecx, DWORD PTR _order$[ebp]
	jl	$LN12@lagrange_k@3
$LN14@lagrange_k@3:

; 979  :                 for ( i = order ; i < SDIM ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	add	DWORD PTR tv6759[ebp], 288		; 00000120H
	add	DWORD PTR tv6679[ebp], 6
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _web+616
	jl	$LN15@lagrange_k@3
$LN13@lagrange_k@3:

; 984  :                 for ( i = 0 ; i < SDIM ; i++ ) 

	cmp	DWORD PTR _web+616, 0
	mov	DWORD PTR _i$[ebp], 0
	jle	$LN163@lagrange_k@3
$LN6@lagrange_k@3:

; 985  :                  for ( ii  = order ; ii < SDIM ; ii++ )

	mov	eax, DWORD PTR _order$[ebp]
	mov	DWORD PTR _ii$[ebp], eax
	cmp	eax, DWORD PTR _web+616
	jge	$LN5@lagrange_k@3
	mov	ecx, DWORD PTR _web+616
	sub	ecx, eax
	cmp	ecx, 4
	jl	$LN175@lagrange_k@3

; 984  :                 for ( i = 0 ; i < SDIM ; i++ ) 

	mov	eax, DWORD PTR [ebx+20]
	mov	eax, DWORD PTR [eax+esi*4]
	fld	QWORD PTR [eax+edi*8]
	mov	ecx, DWORD PTR _k$[ebp]
	fmul	QWORD PTR [eax+ecx*8]

; 986  :                   h += gl->gpoly[m][k]*gl->gpoly[m][kk]*seconds[ii-order][i][j][jj]
; 987  :                             *mat[i][ii];

	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR _order$[ebp]
	lea	eax, DWORD PTR [eax+ecx*8+16]
	mov	DWORD PTR tv7105[ebp], eax
	mov	eax, DWORD PTR _seconds$[ebp]
	add	eax, 8
	mov	DWORD PTR tv7267[ebp], eax
	mov	eax, DWORD PTR _web+616
	sub	eax, ecx
	sub	eax, 4
	shr	eax, 2
	inc	eax
	lea	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _ii$[ebp], ecx
$LN164@lagrange_k@3:
	mov	ecx, DWORD PTR tv7267[ebp]
	mov	ecx, DWORD PTR [ecx-8]
	mov	edi, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	edi, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR [ecx+edi*4]
	fld	QWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR tv7105[ebp]
	mov	edi, DWORD PTR _i$[ebp]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [ecx-16]
	mov	ecx, DWORD PTR tv7267[ebp]
	mov	ecx, DWORD PTR [ecx-4]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	edi, DWORD PTR _j$[ebp]
	faddp	ST(2), ST(0)
	mov	ecx, DWORD PTR [ecx+edi*4]
	fld	QWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR tv7105[ebp]
	mov	edi, DWORD PTR _i$[ebp]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [ecx-8]
	mov	ecx, DWORD PTR tv7267[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	edi, DWORD PTR _j$[ebp]
	faddp	ST(2), ST(0)
	mov	ecx, DWORD PTR [ecx+edi*4]
	fld	QWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR tv7105[ebp]
	mov	edi, DWORD PTR _i$[ebp]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv7267[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	edi, DWORD PTR _j$[ebp]
	faddp	ST(2), ST(0)
	mov	ecx, DWORD PTR [ecx+edi*4]
	fld	QWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR tv7105[ebp]
	add	DWORD PTR tv7267[ebp], 16		; 00000010H
	fmul	ST(0), ST(1)
	add	ecx, 32					; 00000020H
	dec	eax
	fmul	QWORD PTR [ecx-24]
	mov	DWORD PTR tv7105[ebp], ecx
	faddp	ST(2), ST(0)
	jne	$LN164@lagrange_k@3
	mov	edi, DWORD PTR _kk$[ebp]
	fstp	ST(0)
$LN175@lagrange_k@3:

; 985  :                  for ( ii  = order ; ii < SDIM ; ii++ )

	mov	eax, DWORD PTR _ii$[ebp]
	cmp	eax, DWORD PTR _web+616
	jge	$LN5@lagrange_k@3

; 984  :                 for ( i = 0 ; i < SDIM ; i++ ) 

	mov	ecx, DWORD PTR [ebx+20]
	mov	eax, DWORD PTR [ecx+esi*4]
	fld	QWORD PTR [eax+edi*8]
	mov	ecx, DWORD PTR _k$[ebp]
	fmul	QWORD PTR [eax+ecx*8]

; 985  :                  for ( ii  = order ; ii < SDIM ; ii++ )

	mov	eax, DWORD PTR _mat$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _ii$[ebp]
	lea	ecx, DWORD PTR [ecx+eax*8]
	sub	eax, DWORD PTR _order$[ebp]
	mov	DWORD PTR tv7666[ebp], ecx
	mov	ecx, DWORD PTR _seconds$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv7701[ebp], eax
	mov	eax, DWORD PTR _web+616
	sub	eax, DWORD PTR _ii$[ebp]
	mov	DWORD PTR tv7640[ebp], eax
$LC3@lagrange_k@3:

; 986  :                   h += gl->gpoly[m][k]*gl->gpoly[m][kk]*seconds[ii-order][i][j][jj]
; 987  :                             *mat[i][ii];

	mov	ecx, DWORD PTR tv7701[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	fld	QWORD PTR [eax+edx*8]
	mov	eax, DWORD PTR tv7666[ebp]
	add	DWORD PTR tv7701[ebp], 4
	fmul	ST(0), ST(1)
	add	eax, 8
	dec	DWORD PTR tv7640[ebp]
	fmul	QWORD PTR [eax-8]
	mov	DWORD PTR tv7666[ebp], eax
	faddp	ST(2), ST(0)
	jne	SHORT $LC3@lagrange_k@3

; 985  :                  for ( ii  = order ; ii < SDIM ; ii++ )

	fstp	ST(0)
$LN5@lagrange_k@3:

; 984  :                 for ( i = 0 ; i < SDIM ; i++ ) 

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _web+616
	jl	$LN6@lagrange_k@3
$LN163@lagrange_k@3:

; 966  :              for ( jj = 0 ; jj < SDIM ; jj++ )

	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]

; 988  :                 f_info->hess[k][kk][j][jj]  += weight*h;

	fmul	ST(0), ST(3)
	mov	eax, DWORD PTR [ecx+1340]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [eax+edi*4]
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	fadd	QWORD PTR [ecx+edx*8]
	lea	eax, DWORD PTR [ecx+edx*8]
	inc	edx
	fstp	QWORD PTR [eax]
	cmp	edx, DWORD PTR _web+616
	jl	$LN169@lagrange_k@3
$LN35@lagrange_k@3:

; 965  :           for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR _j$[ebp]
	add	DWORD PTR tv8464[ebp], 8
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, DWORD PTR _web+616
	jl	$LN36@lagrange_k@3
$LN38@lagrange_k@3:

; 964  :         for ( kk = 0 ; kk < gl->lagpts ; kk++ )

	inc	edi
	mov	DWORD PTR _kk$[ebp], edi
	cmp	edi, DWORD PTR [ebx+16]
	jl	$LN39@lagrange_k@3
$LN41@lagrange_k@3:

; 961  : 
; 962  :      /* hessian */
; 963  :      for ( k = 0 ; k < gl->lagpts  ; k++ )

	mov	ecx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR [ebx+16]
	inc	ecx
	mov	DWORD PTR _k$[ebp], ecx
	cmp	ecx, eax
	jl	$LN42@lagrange_k@3

; 966  :              for ( jj = 0 ; jj < SDIM ; jj++ )

	fstp	ST(2)
$LN183@lagrange_k@3:

; 924  :   }
; 925  : 
; 926  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	inc	esi

; 966  :              for ( jj = 0 ; jj < SDIM ; jj++ )

	fstp	ST(1)
	mov	DWORD PTR _m$[ebp], esi
	cmp	esi, DWORD PTR [ebx+4]
	jl	$LL309@lagrange_k@3
	pop	edi
	pop	esi
	pop	ebx

; 989  :             }
; 990  :   }
; 991  : 
; 992  :   return value;  
; 993  : } // end lagrange_k_vector_integral_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN155@lagrange_k@3:
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _value$[ebp]
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_lagrange_k_vector_integral_all ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_lagrange_facet_volume
; Function compile flags: /Ogtp
;	COMDAT _lagrange_facet_volume
_TEXT	SEGMENT
_matqXvS$ = -348					; size = 24
_sign$ = -324						; size = 8
_value$ = -316						; size = 8
_gl$ = -308						; size = 4
_m$ = -304						; size = 4
_mat$ = -300						; size = 4
_dim$ = -296						; size = 4
_matxJ$ = -292						; size = 288
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_lagrange_facet_volume PROC				; COMDAT

; 1016 : { int i,m,j;

	push	ebp
	mov	ebp, esp
	sub	esp, 348				; 0000015cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1017 :   REAL value = 0.0;

	fldz

; 1018 :   MAT2D(mat,MAXCOORD,MAXCOORD);

	push	6
	push	6
	fstp	QWORD PTR _value$[ebp]
	lea	eax, DWORD PTR _matxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _matqXvS$[ebp]
	push	ecx
	call	_mat2d_setup
	mov	DWORD PTR _mat$[ebp], eax

; 1019 :   int dim = web.dimension;

	mov	eax, DWORD PTR _web+620
	add	esp, 16					; 00000010H
	mov	DWORD PTR _dim$[ebp], eax

; 1020 :   REAL sign = (dim&1) ? -1.0 : 1.0;

	test	al, 1
	je	SHORT $LN12@lagrange_f@4
	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN26@lagrange_f@4
$LN12@lagrange_f@4:
	fld1
$LN26@lagrange_f@4:
	push	ebx
	fstp	QWORD PTR _sign$[ebp]
	push	edi

; 1021 :   struct gauss_lag *gl = &gauss_lagrange[dim][web.gauss2D_order];

	mov	edi, DWORD PTR _web+1596
	shl	edi, 5
	add	edi, DWORD PTR _gauss_lagrange[eax*4]

; 1022 : 
; 1023 :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	xor	ebx, ebx
	mov	DWORD PTR _gl$[ebp], edi
	mov	DWORD PTR _m$[ebp], ebx
	cmp	DWORD PTR [edi+4], ebx
	jle	$LN23@lagrange_f@4
	push	esi
$LL9@lagrange_f@4:

; 1024 :   { for ( i = 0 ; i < dim ; i++ )

	xor	esi, esi
	test	eax, eax
	jle	$LN4@lagrange_f@4
	npad	2
$LL25@lagrange_f@4:

; 1025 :         for ( j = 0 ; j < dim ; j++ )

	xor	edi, edi
	cmp	eax, 4
	jl	SHORT $LC21@lagrange_f@4
	mov	edx, DWORD PTR _f_info$[ebp]
	mov	eax, DWORD PTR [edx+1276]
	mov	ecx, DWORD PTR [eax+ebx*4]
	mov	ecx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR _mat$[ebp]
	mov	edi, DWORD PTR [edx+esi*4]

; 1026 :           mat[i][j] = f_info->sides[m][i][j];

	mov	ebx, ecx
	lea	edx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR _dim$[ebp]
	add	ecx, -4					; fffffffcH
	sub	ebx, edi
	shr	ecx, 2
	inc	ecx
	lea	eax, DWORD PTR [edi+8]
	lea	edi, DWORD PTR [ecx*4]
	npad	3
$LL22@lagrange_f@4:
	fld	QWORD PTR [edx-24]
	add	eax, 32					; 00000020H
	fstp	QWORD PTR [eax-40]
	add	edx, 32					; 00000020H
	dec	ecx
	fld	QWORD PTR [ebx+eax-32]
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [edx-40]
	fstp	QWORD PTR [eax-24]
	fld	QWORD PTR [edx-32]
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LL22@lagrange_f@4

; 1025 :         for ( j = 0 ; j < dim ; j++ )

	mov	ebx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _dim$[ebp]
$LC21@lagrange_f@4:
	cmp	edi, eax
	jge	SHORT $LN5@lagrange_f@4
	mov	edx, DWORD PTR _f_info$[ebp]
	mov	edx, DWORD PTR [edx+1276]
	mov	eax, DWORD PTR _mat$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	ecx, DWORD PTR [eax+esi*4]
	mov	edx, DWORD PTR [edx+esi*4]
	lea	eax, DWORD PTR [ecx+edi*8]
	sub	edx, ecx
	mov	ecx, DWORD PTR _dim$[ebp]
	sub	ecx, edi
$LC3@lagrange_f@4:

; 1026 :           mat[i][j] = f_info->sides[m][i][j];

	fld	QWORD PTR [eax+edx]
	add	eax, 8
	dec	ecx
	fstp	QWORD PTR [eax-8]
	jne	SHORT $LC3@lagrange_f@4

; 1025 :         for ( j = 0 ; j < dim ; j++ )

	mov	eax, DWORD PTR _dim$[ebp]
$LN5@lagrange_f@4:

; 1024 :   { for ( i = 0 ; i < dim ; i++ )

	inc	esi
	cmp	esi, eax
	jl	$LL25@lagrange_f@4
	mov	edi, DWORD PTR _gl$[ebp]
$LN4@lagrange_f@4:

; 1027 :     value += gl->gausswt[m]*det_adjoint(mat,dim)*f_info->gauss_pt[m][dim];

	push	eax
	mov	eax, DWORD PTR _mat$[ebp]
	push	eax
	call	_det_adjoint
	mov	ecx, DWORD PTR [edi+12]
	fmul	QWORD PTR [ecx+ebx*8]
	mov	edx, DWORD PTR _f_info$[ebp]
	mov	eax, DWORD PTR [edx+1268]
	mov	ecx, DWORD PTR [eax+ebx*4]
	mov	edx, DWORD PTR _dim$[ebp]
	fmul	QWORD PTR [ecx+edx*8]
	inc	ebx
	add	esp, 8
	mov	DWORD PTR _m$[ebp], ebx
	fadd	QWORD PTR _value$[ebp]
	mov	eax, edx
	fstp	QWORD PTR _value$[ebp]
	cmp	ebx, DWORD PTR [edi+4]
	jl	$LL9@lagrange_f@4
	pop	esi
$LN23@lagrange_f@4:

; 1028 :   }
; 1029 :   return sign*value/factorial[dim]; 

	fld	QWORD PTR _sign$[ebp]

; 1030 : } // end lagrange_facet_volume()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fmul	QWORD PTR _value$[ebp]
	pop	edi
	xor	ecx, ebp
	pop	ebx
	fdiv	QWORD PTR _factorial[eax*8]
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_lagrange_facet_volume ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_lagrange_facet_volume_grad
; Function compile flags: /Ogtp
;	COMDAT _lagrange_facet_volume_grad
_TEXT	SEGMENT
_matqXvS$ = -376					; size = 24
_weight$89989 = -352					; size = 8
_sign$ = -344						; size = 8
_dim$ = -336						; size = 4
_value$ = -332						; size = 8
tv853 = -324						; size = 4
_z$ = -320						; size = 8
tv1006 = -316						; size = 4
tv899 = -316						; size = 4
_i$ = -316						; size = 4
_f_info$GSCopy$ = -312					; size = 4
_mat$ = -308						; size = 4
tv1971 = -304						; size = 4
tv1222 = -304						; size = 4
_j$ = -300						; size = 4
_gl$ = -296						; size = 4
_matxJ$ = -292						; size = 288
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_lagrange_facet_volume_grad PROC			; COMDAT

; 1041 : { int i,m,j,k;

	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1042 :   REAL value = 0.0;

	fldz
	push	ebx
	push	esi
	fstp	QWORD PTR _value$[ebp]
	mov	esi, DWORD PTR _f_info$[ebp]
	push	edi

; 1043 :   MAT2D(mat,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	eax, DWORD PTR _matxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _matqXvS$[ebp]
	push	ecx
	mov	DWORD PTR _f_info$GSCopy$[ebp], esi
	call	_mat2d_setup

; 1044 :   int dim = web.dimension;

	mov	ebx, DWORD PTR _web+620
	add	esp, 16					; 00000010H
	mov	DWORD PTR _mat$[ebp], eax
	mov	DWORD PTR _dim$[ebp], ebx

; 1045 :   REAL sign = (dim&1) ? -1.0 : 1.0;

	test	bl, 1
	je	SHORT $LN24@lagrange_f@5
	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN80@lagrange_f@5
$LN24@lagrange_f@5:
	fld1
$LN80@lagrange_f@5:

; 1046 :   struct gauss_lag *gl = &gauss_lagrange[dim][web.gauss2D_order];

	mov	eax, DWORD PTR _web+1596
	fstp	QWORD PTR _sign$[ebp]
	shl	eax, 5
	add	eax, DWORD PTR _gauss_lagrange[ebx*4]

; 1047 :   REAL z,det;
; 1048 : 
; 1049 :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	xor	edi, edi
	mov	DWORD PTR _gl$[ebp], eax
	cmp	DWORD PTR [eax+4], edi
	jle	$LN46@lagrange_f@5

; 1061 :      for ( k = 0 ; k < gl->lagpts ; k++ )

	lea	edx, DWORD PTR _factorial[ebx*8]
	mov	DWORD PTR tv853[ebp], edx
	jmp	SHORT $LN21@lagrange_f@5
	npad	9
$LL78@lagrange_f@5:

; 1047 :   REAL z,det;
; 1048 : 
; 1049 :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	mov	eax, DWORD PTR _gl$[ebp]
	fstp	ST(0)
$LN21@lagrange_f@5:

; 1050 :   { REAL weight = sign*gl->gausswt[m]/factorial[dim];

	mov	eax, DWORD PTR [eax+12]
	fld	QWORD PTR [eax+edi*8]
	mov	ecx, DWORD PTR tv853[ebp]
	fmul	QWORD PTR _sign$[ebp]

; 1051 :      for ( i = 0 ; i < dim ; i++ )

	xor	eax, eax
	mov	DWORD PTR _i$[ebp], eax
	fdiv	QWORD PTR [ecx]
	fstp	QWORD PTR _weight$89989[ebp]
	test	ebx, ebx
	jle	$LN50@lagrange_f@5
$LL52@lagrange_f@5:

; 1052 :         for ( j = 0 ; j < dim ; j++ ) 

	xor	ecx, ecx
	mov	DWORD PTR _j$[ebp], ecx
	cmp	ebx, 4
	jl	SHORT $LN49@lagrange_f@5
	mov	edx, DWORD PTR [esi+1276]
	mov	ecx, DWORD PTR [edx+edi*4]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR _mat$[ebp]
	mov	esi, DWORD PTR [edx+eax*4]
	lea	edx, DWORD PTR [ecx+24]

; 1053 :           mat[i][j] = f_info->sides[m][i][j];  /* mat destroyed by det */

	sub	ecx, esi
	mov	DWORD PTR tv1222[ebp], ecx
	lea	ecx, DWORD PTR [ebx-4]
	shr	ecx, 2
	lea	eax, DWORD PTR [esi+8]
	inc	ecx
	lea	esi, DWORD PTR [ecx*4]
	mov	DWORD PTR _j$[ebp], esi
	mov	esi, DWORD PTR tv1222[ebp]
	npad	4
$LL42@lagrange_f@5:
	fld	QWORD PTR [edx-24]
	add	eax, 32					; 00000020H
	fstp	QWORD PTR [eax-40]
	add	edx, 32					; 00000020H
	dec	ecx
	fld	QWORD PTR [esi+eax-32]
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [edx-40]
	fstp	QWORD PTR [eax-24]
	fld	QWORD PTR [edx-32]
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LL42@lagrange_f@5

; 1052 :         for ( j = 0 ; j < dim ; j++ ) 

	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
$LN49@lagrange_f@5:
	cmp	ecx, ebx
	jge	SHORT $LN17@lagrange_f@5
	mov	esi, DWORD PTR [esi+1276]
	mov	esi, DWORD PTR [esi+edi*4]
	mov	edx, DWORD PTR _mat$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	esi, DWORD PTR [esi+eax*4]
	sub	esi, edx
	lea	ecx, DWORD PTR [edx+ecx*8]
	mov	edx, ebx
	sub	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR tv1222[ebp], esi
$LC15@lagrange_f@5:

; 1053 :           mat[i][j] = f_info->sides[m][i][j];  /* mat destroyed by det */

	fld	QWORD PTR [ecx+esi]
	add	ecx, 8
	dec	edx
	fstp	QWORD PTR [ecx-8]
	jne	SHORT $LC15@lagrange_f@5

; 1052 :         for ( j = 0 ; j < dim ; j++ ) 

	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
$LN17@lagrange_f@5:

; 1051 :      for ( i = 0 ; i < dim ; i++ )

	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, ebx
	jl	$LL52@lagrange_f@5
$LN50@lagrange_f@5:

; 1054 :      z = f_info->gauss_pt[m][dim];

	mov	eax, DWORD PTR [esi+1268]
	mov	ecx, DWORD PTR [eax+edi*4]

; 1055 :      det = det_adjoint(mat,dim);

	mov	edx, DWORD PTR _mat$[ebp]
	fld	QWORD PTR [ecx+ebx*8]
	push	ebx
	fstp	QWORD PTR _z$[ebp]
	push	edx
	call	_det_adjoint

; 1056 :      value += weight*det*z;

	fld	ST(0)
	fld	QWORD PTR _weight$89989[ebp]

; 1057 :      for ( k = 0 ; k < gl->lagpts; k++ )

	mov	eax, DWORD PTR _gl$[ebp]
	fmul	ST(1), ST(0)
	xor	edx, edx
	fld	QWORD PTR _z$[ebp]
	add	esp, 8
	fmul	ST(2), ST(0)
	fxch	ST(2)
	fadd	QWORD PTR _value$[ebp]
	fst	QWORD PTR _value$[ebp]
	cmp	DWORD PTR [eax+16], edx
	jle	$LN71@lagrange_f@5
$LN12@lagrange_f@5:

; 1058 :       for ( j = 0 ; j < dim ; j++ ) 

	xor	ecx, ecx
	mov	DWORD PTR _j$[ebp], ecx
	test	ebx, ebx
	jle	$LN11@lagrange_f@5
$LN9@lagrange_f@5:

; 1059 :         for ( i = 0 ; i < dim ; i++ )

	xor	eax, eax
	cmp	ebx, 4
	jl	$LC44@lagrange_f@5
	mov	esi, DWORD PTR [esi+1336]
	fld	ST(2)
	mov	esi, DWORD PTR [esi+edx*4]
	fmul	ST(0), ST(2)
	add	ebx, -3					; fffffffdH
	mov	DWORD PTR tv899[ebp], ebx
	mov	ebx, DWORD PTR _mat$[ebp]
	lea	esi, DWORD PTR [esi+ecx*8]
	mov	ecx, DWORD PTR [ebx+ecx*4]
	add	ecx, 16					; 00000010H
$LN48@lagrange_f@5:

; 1060 :           f_info->grad[k][j] += weight*z*gl->gpolypart[m][i][k]*mat[j][i];

	mov	ebx, DWORD PTR _gl$[ebp]
	mov	ebx, DWORD PTR [ebx+24]
	mov	ebx, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR [ebx+eax*4]
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR _gl$[ebp]
	fmul	ST(0), ST(1)
	add	eax, 4
	add	ecx, 32					; 00000020H
	fmul	QWORD PTR [ecx-48]
	fadd	QWORD PTR [esi]
	fst	QWORD PTR [esi]
	mov	ebx, DWORD PTR [ebx+24]
	mov	ebx, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR [ebx+eax*4-12]
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR _gl$[ebp]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ecx-40]
	faddp	ST(1), ST(0)
	fst	QWORD PTR [esi]
	mov	ebx, DWORD PTR [ebx+24]
	mov	ebx, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR [ebx+eax*4-8]
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR _gl$[ebp]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ecx-32]
	faddp	ST(1), ST(0)
	fst	QWORD PTR [esi]
	mov	ebx, DWORD PTR [ebx+24]
	mov	ebx, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR [ebx+eax*4-4]
	fld	QWORD PTR [ebx+edx*8]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ecx-24]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [esi]
	cmp	eax, DWORD PTR tv899[ebp]
	jl	SHORT $LN48@lagrange_f@5
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	fstp	ST(0)
	mov	ecx, DWORD PTR _j$[ebp]
	mov	ebx, DWORD PTR _dim$[ebp]
$LC44@lagrange_f@5:

; 1059 :         for ( i = 0 ; i < dim ; i++ )

	cmp	eax, ebx
	jge	SHORT $LN8@lagrange_f@5
	mov	esi, DWORD PTR [esi+1336]
	fld	ST(2)
	mov	esi, DWORD PTR [esi+edx*4]
	fmul	ST(0), ST(2)
	lea	esi, DWORD PTR [esi+ecx*8]
	mov	DWORD PTR tv1006[ebp], esi
	mov	esi, DWORD PTR _mat$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4]
	lea	esi, DWORD PTR [ecx+eax*8]
$LC6@lagrange_f@5:

; 1060 :           f_info->grad[k][j] += weight*z*gl->gpolypart[m][i][k]*mat[j][i];

	mov	ecx, DWORD PTR _gl$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	ecx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR tv1006[ebp]
	fmul	ST(0), ST(1)
	inc	eax
	add	esi, 8
	fmul	QWORD PTR [esi-8]
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, ebx
	jl	SHORT $LC6@lagrange_f@5

; 1059 :         for ( i = 0 ; i < dim ; i++ )

	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	fstp	ST(0)
	mov	ecx, DWORD PTR _j$[ebp]
$LN8@lagrange_f@5:

; 1058 :       for ( j = 0 ; j < dim ; j++ ) 

	inc	ecx
	mov	DWORD PTR _j$[ebp], ecx
	cmp	ecx, ebx
	jl	$LN9@lagrange_f@5
	mov	eax, DWORD PTR _gl$[ebp]
$LN11@lagrange_f@5:

; 1057 :      for ( k = 0 ; k < gl->lagpts; k++ )

	inc	edx
	cmp	edx, DWORD PTR [eax+16]
	jl	$LN12@lagrange_f@5
$LN71@lagrange_f@5:

; 1061 :      for ( k = 0 ; k < gl->lagpts ; k++ )

	xor	ecx, ecx
	fstp	ST(2)
	cmp	DWORD PTR [eax+16], ecx
	jle	SHORT $LN76@lagrange_f@5
	mov	edx, DWORD PTR [esi+1336]
	mov	DWORD PTR tv1971[ebp], edx
$LN3@lagrange_f@5:

; 1062 :         f_info->grad[k][dim] += weight*gl->gpoly[m][k]*det;

	mov	eax, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [eax+edi*4]
	fld	QWORD PTR [eax+ecx*8]
	mov	edx, DWORD PTR tv1971[ebp]
	mov	edx, DWORD PTR [edx]
	fmul	ST(0), ST(1)
	mov	eax, DWORD PTR _gl$[ebp]
	add	DWORD PTR tv1971[ebp], 4
	fmul	ST(0), ST(3)
	lea	edx, DWORD PTR [edx+ebx*8]
	inc	ecx
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+16]
	jl	SHORT $LN3@lagrange_f@5
$LN76@lagrange_f@5:

; 1047 :   REAL z,det;
; 1048 : 
; 1049 :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	inc	edi

; 1061 :      for ( k = 0 ; k < gl->lagpts ; k++ )

	fstp	ST(0)
	fstp	ST(1)
	cmp	edi, DWORD PTR [eax+4]
	jl	$LL78@lagrange_f@5
	pop	edi
	pop	esi
	pop	ebx

; 1063 :   }
; 1064 :   return value;  
; 1065 : } // end lagrange_facet_volume_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN46@lagrange_f@5:
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _value$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_lagrange_facet_volume_grad ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_lagrange_facet_volume_all
; Function compile flags: /Ogtp
;	COMDAT _lagrange_facet_volume_all
_TEXT	SEGMENT
_dethessqXvS$ = -11800					; size = 1032
_matqXvS$ = -10768					; size = 24
_sign$ = -10744						; size = 8
tv2495 = -10736						; size = 4
_value$ = -10732					; size = 8
_dim$ = -10724						; size = 4
_dethess$ = -10720					; size = 4
_mat$ = -10716						; size = 4
_z$90040 = -10712					; size = 8
tv6928 = -10708						; size = 4
tv5644 = -10708						; size = 4
tv5169 = -10708						; size = 4
tv4091 = -10708						; size = 4
tv2878 = -10708						; size = 4
tv2738 = -10708						; size = 4
_weight$90041 = -10704					; size = 8
tv5242 = -10700						; size = 4
tv2852 = -10700						; size = 4
tv2721 = -10700						; size = 4
tv2681 = -10700						; size = 4
tv2639 = -10700						; size = 4
tv1477 = -10700						; size = 4
tv811 = -10700						; size = 4
tv240 = -10700						; size = 4
_gl$ = -10696						; size = 4
_f_info$GSCopy$ = -10692				; size = 4
_jj$ = -10688						; size = 4
tv185 = -10684						; size = 4
_j$ = -10684						; size = 4
tv5642 = -10680						; size = 4
tv5167 = -10680						; size = 4
tv4441 = -10680						; size = 4
tv2749 = -10680						; size = 4
tv2705 = -10680						; size = 4
tv5252 = -10676						; size = 4
tv2586 = -10676						; size = 4
_ii$ = -10676						; size = 4
tv5699 = -10672						; size = 4
tv5226 = -10672						; size = 4
tv3938 = -10672						; size = 4
tv3221 = -10672						; size = 4
tv2789 = -10672						; size = 4
tv2763 = -10668						; size = 4
_k$ = -10668						; size = 4
_i$ = -10668						; size = 4
_m$ = -10664						; size = 4
_dethessxJ$ = -10660					; size = 10368
_matxJ$ = -292						; size = 288
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_mode$ = 12						; size = 4
_lagrange_facet_volume_all PROC				; COMDAT

; 1089 : { int i,m,j,k,jj,ii,kk;

	push	ebp
	mov	ebp, esp
	mov	eax, 11800				; 00002e18H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1098 :   { REAL det;
; 1099 :      REAL z = f_info->gauss_pt[m][dim];

	mov	eax, DWORD PTR _f_info$[ebp]
	fldz
	push	ebx
	fstp	QWORD PTR _value$[ebp]
	push	esi
	push	edi
	push	6
	push	6
	lea	ecx, DWORD PTR _matxJ$[ebp]
	push	ecx
	lea	edx, DWORD PTR _matqXvS$[ebp]
	push	edx
	mov	DWORD PTR _f_info$GSCopy$[ebp], eax
	call	_mat2d_setup
	mov	ebx, DWORD PTR _web+620
	add	esp, 16					; 00000010H
	mov	esi, eax
	mov	DWORD PTR _mat$[ebp], esi
	mov	DWORD PTR _dim$[ebp], ebx
	test	bl, 1
	je	SHORT $LN59@lagrange_f@6

; 1090 :   REAL sum,value = 0.0;
; 1091 :   MAT2D(mat,MAXCOORD,MAXCOORD);
; 1092 :   int dim = web.dimension;
; 1093 :   REAL sign = (dim&1) ? -1.0 : 1.0;

	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN228@lagrange_f@6
$LN59@lagrange_f@6:
	fld1
$LN228@lagrange_f@6:

; 1094 :   struct gauss_lag *gl = &gauss_lagrange[dim][web.gauss2D_order];

	mov	edi, DWORD PTR _web+1596
	fstp	QWORD PTR _sign$[ebp]

; 1095 :   MAT4D(dethess,MAXCOORD,MAXCOORD,MAXCOORD,MAXCOORD);

	push	6
	push	6
	push	6
	push	6
	lea	eax, DWORD PTR _dethessxJ$[ebp]
	shl	edi, 5
	add	edi, DWORD PTR _gauss_lagrange[ebx*4]
	push	eax
	lea	ecx, DWORD PTR _dethessqXvS$[ebp]
	push	ecx
	mov	DWORD PTR _gl$[ebp], edi
	call	_mat4d_setup

; 1096 : 
; 1097 :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	xor	edx, edx
	add	esp, 24					; 00000018H
	mov	DWORD PTR _dethess$[ebp], eax
	mov	DWORD PTR _m$[ebp], edx
	cmp	DWORD PTR [edi+4], edx
	jle	$LN111@lagrange_f@6

; 1151 :           { for ( ii = 0,sum = 0.0 ; ii < dim ; ii++ )

	lea	eax, DWORD PTR _factorial[ebx*8]
	mov	DWORD PTR tv2495[ebp], eax
	jmp	SHORT $LN56@lagrange_f@6
	npad	8
$LL226@lagrange_f@6:

; 1096 : 
; 1097 :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	mov	esi, DWORD PTR _mat$[ebp]
	fstp	ST(0)
	mov	edx, DWORD PTR _m$[ebp]
$LN56@lagrange_f@6:

; 1098 :   { REAL det;
; 1099 :      REAL z = f_info->gauss_pt[m][dim];

	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [ecx+1268]
	mov	ecx, DWORD PTR [eax+edx*4]
	fld	QWORD PTR [ecx+ebx*8]

; 1100 :      REAL weight = sign*gl->gausswt[m]/factorial[dim];

	mov	eax, DWORD PTR [edi+12]
	mov	ecx, DWORD PTR tv2495[ebp]
	fstp	QWORD PTR _z$90040[ebp]
	fld	QWORD PTR [eax+edx*8]

; 1101 :      for ( i = 0 ; i < dim ; i++ )

	xor	eax, eax
	fmul	QWORD PTR _sign$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	fdiv	QWORD PTR [ecx]
	fstp	QWORD PTR _weight$90041[ebp]
	test	ebx, ebx
	jle	$LN51@lagrange_f@6
$LL53@lagrange_f@6:

; 1102 :         for ( j = 0 ; j < dim ; j++ )

	mov	DWORD PTR _j$[ebp], 0
	cmp	ebx, 4
	jl	SHORT $LN125@lagrange_f@6
	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [ecx+1276]
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	esi, DWORD PTR [esi+eax*4]
	lea	edx, DWORD PTR [ecx+24]

; 1103 :           mat[i][j] = f_info->sides[m][i][j];  /* mat destroyed by det */

	sub	ecx, esi
	mov	DWORD PTR tv3221[ebp], ecx
	lea	ecx, DWORD PTR [ebx-4]
	shr	ecx, 2
	lea	eax, DWORD PTR [esi+8]
	inc	ecx
	lea	esi, DWORD PTR [ecx*4]
	mov	DWORD PTR _j$[ebp], esi
	mov	esi, DWORD PTR tv3221[ebp]
	npad	4
$LL97@lagrange_f@6:
	fld	QWORD PTR [edx-24]
	add	eax, 32					; 00000020H
	fstp	QWORD PTR [eax-40]
	add	edx, 32					; 00000020H
	dec	ecx
	fld	QWORD PTR [esi+eax-32]
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [edx-40]
	fstp	QWORD PTR [eax-24]
	fld	QWORD PTR [edx-32]
	fstp	QWORD PTR [eax-16]
	jne	SHORT $LL97@lagrange_f@6

; 1102 :         for ( j = 0 ; j < dim ; j++ )

	mov	eax, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	mov	esi, DWORD PTR _mat$[ebp]
$LN125@lagrange_f@6:
	cmp	DWORD PTR _j$[ebp], ebx
	jge	SHORT $LN52@lagrange_f@6
	mov	ecx, DWORD PTR [esi+eax*4]
	mov	esi, DWORD PTR _j$[ebp]
	lea	ecx, DWORD PTR [ecx+esi*8]
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	esi, DWORD PTR [esi+1276]
	mov	edx, DWORD PTR [esi+edx*4]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	esi, DWORD PTR _mat$[ebp]
	sub	edx, DWORD PTR [esi+eax*4]
	mov	DWORD PTR tv3221[ebp], edx
	mov	esi, edx
	mov	edx, ebx
	sub	edx, DWORD PTR _j$[ebp]
$LC50@lagrange_f@6:

; 1103 :           mat[i][j] = f_info->sides[m][i][j];  /* mat destroyed by det */

	fld	QWORD PTR [ecx+esi]
	add	ecx, 8
	dec	edx
	fstp	QWORD PTR [ecx-8]
	jne	SHORT $LC50@lagrange_f@6

; 1102 :         for ( j = 0 ; j < dim ; j++ )

	mov	esi, DWORD PTR _mat$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
$LN52@lagrange_f@6:

; 1101 :      for ( i = 0 ; i < dim ; i++ )

	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, ebx
	jl	$LL53@lagrange_f@6
$LN51@lagrange_f@6:

; 1104 :      det_hess(mat,dethess,dim);

	mov	eax, DWORD PTR _dethess$[ebp]
	push	ebx
	push	eax
	push	esi
	call	_det_hess

; 1105 :      det = det_adjoint(mat,dim);

	push	ebx
	push	esi
	call	_det_adjoint

; 1106 : 
; 1107 :      value += weight*det*z;

	fld	ST(0)
	fld	QWORD PTR _weight$90041[ebp]
	add	esp, 20					; 00000014H

; 1108 :      
; 1109 :      if ( mode == METHOD_VALUE ) continue;

	cmp	DWORD PTR _mode$[ebp], 1767		; 000006e7H
	fmul	ST(1), ST(0)
	fld	QWORD PTR _z$90040[ebp]
	fmul	ST(2), ST(0)
	fxch	ST(2)
	fadd	QWORD PTR _value$[ebp]
	fst	QWORD PTR _value$[ebp]
	je	$LN132@lagrange_f@6

; 1110 : 
; 1111 :      /* gradient */
; 1112 :      for ( k = 0 ; k < gl->lagpts; k++ )

	xor	edx, edx
	mov	DWORD PTR _k$[ebp], edx
	cmp	DWORD PTR [edi+16], edx
	jle	$LN117@lagrange_f@6
$LN130@lagrange_f@6:

; 1113 :       for ( j = 0 ; j < dim ; j++ ) 

	xor	ecx, ecx
	mov	DWORD PTR _j$[ebp], ecx
	test	ebx, ebx
	jle	$LN45@lagrange_f@6
$LN127@lagrange_f@6:

; 1114 :         for ( i = 0 ; i < dim ; i++ )

	xor	eax, eax
	cmp	ebx, 4
	jl	$LC99@lagrange_f@6
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	fld	ST(1)
	mov	esi, DWORD PTR [esi+1336]
	fmul	ST(0), ST(3)
	mov	edx, DWORD PTR [esi+edx*4]
	lea	edx, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR tv2586[ebp], edx
	mov	edx, DWORD PTR _mat$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	add	ecx, 16					; 00000010H
$LN121@lagrange_f@6:

; 1115 :           f_info->grad[k][j] += weight*z*gl->gpolypart[m][i][k]*mat[j][i];

	mov	edx, DWORD PTR [edi+24]
	mov	esi, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	esi, DWORD PTR _k$[ebp]
	fld	QWORD PTR [edx+esi*8]
	mov	edx, DWORD PTR tv2586[ebp]
	mov	esi, DWORD PTR _m$[ebp]
	fmul	ST(0), ST(1)
	add	eax, 4
	add	ecx, 32					; 00000020H
	fmul	QWORD PTR [ecx-48]
	fadd	QWORD PTR [edx]
	fst	QWORD PTR [edx]
	mov	edx, DWORD PTR [edi+24]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx+eax*4-12]
	mov	esi, DWORD PTR _k$[ebp]
	fld	QWORD PTR [edx+esi*8]
	mov	edx, DWORD PTR tv2586[ebp]
	mov	esi, DWORD PTR _m$[ebp]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ecx-40]
	faddp	ST(1), ST(0)
	fst	QWORD PTR [edx]
	mov	edx, DWORD PTR [edi+24]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx+eax*4-8]
	mov	esi, DWORD PTR _k$[ebp]
	fld	QWORD PTR [edx+esi*8]
	mov	edx, DWORD PTR tv2586[ebp]
	mov	esi, DWORD PTR _m$[ebp]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ecx-32]
	faddp	ST(1), ST(0)
	fst	QWORD PTR [edx]
	mov	edx, DWORD PTR [edi+24]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	esi, DWORD PTR [edx+eax*4-4]
	mov	edx, DWORD PTR _k$[ebp]
	fld	QWORD PTR [esi+edx*8]
	mov	esi, DWORD PTR tv2586[ebp]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ecx-24]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [esi]
	lea	esi, DWORD PTR [ebx-3]
	cmp	eax, esi
	jl	$LN121@lagrange_f@6
	mov	ecx, DWORD PTR _j$[ebp]
	fstp	ST(0)
$LC99@lagrange_f@6:

; 1114 :         for ( i = 0 ; i < dim ; i++ )

	cmp	eax, ebx
	jge	SHORT $LN42@lagrange_f@6
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	fld	ST(1)
	mov	esi, DWORD PTR [esi+1336]
	fmul	ST(0), ST(3)
	mov	edx, DWORD PTR [esi+edx*4]
	lea	edx, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR tv2639[ebp], edx
	mov	edx, DWORD PTR _mat$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	lea	ecx, DWORD PTR [ecx+eax*8]
$LN124@lagrange_f@6:

; 1115 :           f_info->grad[k][j] += weight*z*gl->gpolypart[m][i][k]*mat[j][i];

	mov	edx, DWORD PTR [edi+24]
	mov	esi, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	esi, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _k$[ebp]
	fld	QWORD PTR [esi+edx*8]
	mov	esi, DWORD PTR tv2639[ebp]
	fmul	ST(0), ST(1)
	inc	eax
	add	ecx, 8
	fmul	QWORD PTR [ecx-8]
	fadd	QWORD PTR [esi]
	fstp	QWORD PTR [esi]
	cmp	eax, ebx
	jl	SHORT $LN124@lagrange_f@6

; 1114 :         for ( i = 0 ; i < dim ; i++ )

	mov	ecx, DWORD PTR _j$[ebp]
	fstp	ST(0)
$LN42@lagrange_f@6:

; 1113 :       for ( j = 0 ; j < dim ; j++ ) 

	inc	ecx
	mov	DWORD PTR _j$[ebp], ecx
	cmp	ecx, ebx
	jl	$LN127@lagrange_f@6
$LN45@lagrange_f@6:

; 1110 : 
; 1111 :      /* gradient */
; 1112 :      for ( k = 0 ; k < gl->lagpts; k++ )

	inc	edx
	mov	DWORD PTR _k$[ebp], edx
	cmp	edx, DWORD PTR [edi+16]
	jl	$LN130@lagrange_f@6
$LN117@lagrange_f@6:

; 1116 :      for ( k = 0 ; k < gl->lagpts ; k++ )

	xor	eax, eax
	cmp	DWORD PTR [edi+16], eax
	jle	SHORT $LN154@lagrange_f@6
	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [ecx+1336]
	mov	DWORD PTR tv3938[ebp], edx
$LN37@lagrange_f@6:

; 1117 :         f_info->grad[k][dim] += weight*gl->gpoly[m][k]*det;

	mov	ecx, DWORD PTR tv3938[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, DWORD PTR _m$[ebp]
	add	DWORD PTR tv3938[ebp], 4
	lea	ecx, DWORD PTR [edx+ebx*8]
	mov	edx, DWORD PTR [edi+20]
	mov	edx, DWORD PTR [edx+esi*4]
	fld	QWORD PTR [edx+eax*8]
	inc	eax
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(4)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR [edi+16]
	jl	SHORT $LN37@lagrange_f@6
$LN154@lagrange_f@6:

; 1118 :      
; 1119 :      if ( mode == METHOD_GRADIENT ) continue;

	cmp	DWORD PTR _mode$[ebp], 4321		; 000010e1H
	fstp	ST(3)
	je	$LN156@lagrange_f@6

; 1120 : 
; 1121 :      /* hessian */
; 1122 :      for ( k = 0 ; k < gl->lagpts  ; k++ )

	mov	eax, DWORD PTR [edi+16]
	xor	esi, esi
	test	eax, eax
	jle	$LN156@lagrange_f@6
	fldz
$LN33@lagrange_f@6:

; 1123 :         for ( kk = 0 ; kk < gl->lagpts ; kk++ )

	xor	ecx, ecx
	test	eax, eax
	jle	$LN32@lagrange_f@6
$LN30@lagrange_f@6:

; 1124 :         { 
; 1125 :           if ( dim == 2 )

	cmp	ebx, 2
	jne	$LN229@lagrange_f@6

; 1126 :           {
; 1127 :              f_info->hess[k][kk][0][1]  += weight*z*
; 1128 :                     (gl->gpolypart[m][0][k]*gl->gpolypart[m][1][kk]
; 1129 :                      - gl->gpolypart[m][1][k]*gl->gpolypart[m][0][kk]);

	mov	eax, DWORD PTR [edi+24]
	fld	ST(1)
	mov	edx, DWORD PTR _m$[ebp]
	fmul	ST(0), ST(3)
	mov	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	fld	QWORD PTR [edx+ecx*8]
	mov	DWORD PTR tv2681[ebp], eax
	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [eax+1340]
	mov	eax, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv2705[ebp], eax
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv6928[ebp], eax
	mov	eax, DWORD PTR tv2681[ebp]
	fmul	QWORD PTR [eax+esi*8]
	fld	QWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR tv6928[ebp]
	fmul	QWORD PTR [edx+esi*8]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]

; 1130 :              f_info->hess[k][kk][1][0]  += weight*z*
; 1131 :                     (gl->gpolypart[m][1][k]*gl->gpolypart[m][0][kk]
; 1132 :                      - gl->gpolypart[m][0][k]*gl->gpolypart[m][1][kk]);

	mov	edx, DWORD PTR [edi+24]
	mov	eax, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv2721[ebp], eax
	mov	eax, DWORD PTR tv2705[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR tv2738[ebp], eax
	mov	eax, DWORD PTR tv2721[ebp]
	fld	QWORD PTR [eax+ecx*8]
	fmul	QWORD PTR [edx+esi*8]
	fld	QWORD PTR [edx+ecx*8]
	fmul	QWORD PTR [eax+esi*8]
	mov	eax, DWORD PTR tv2738[ebp]
	fsubp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	jmp	$LN110@lagrange_f@6
$LN229@lagrange_f@6:

; 1133 :           }
; 1134 :           else if ( dim > 2 )

	jle	$LN22@lagrange_f@6

; 1135 :           { for ( j = 0 ; j < dim ; j++ )

	xor	edx, edx
	mov	DWORD PTR _j$[ebp], edx
	test	ebx, ebx
	jle	$LN115@lagrange_f@6
$LN24@lagrange_f@6:

; 1136 :              { for ( jj = 0 ; jj < dim ; jj++ )

	mov	DWORD PTR _jj$[ebp], 0
$LN21@lagrange_f@6:

; 1137 :                   for ( i = 0 ; i < dim ; i++ )

	xor	edi, edi
$LN18@lagrange_f@6:

; 1138 :                      for ( ii = 0 ; ii < dim ; ii++ )

	xor	eax, eax
	mov	DWORD PTR _ii$[ebp], eax
	cmp	ebx, 4
	jl	$LC102@lagrange_f@6

; 1136 :              { for ( jj = 0 ; jj < dim ; jj++ )

	mov	eax, DWORD PTR _dethess$[ebp]
	fld	ST(1)
	mov	eax, DWORD PTR [eax+edi*4]
	fmul	ST(0), ST(3)
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv2749[ebp], eax
	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [eax+1340]
	mov	eax, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR _jj$[ebp]
	lea	edx, DWORD PTR [edx+eax*8]
	mov	DWORD PTR tv2789[ebp], edx

; 1138 :                      for ( ii = 0 ; ii < dim ; ii++ )

	mov	edx, DWORD PTR tv2749[ebp]
	lea	eax, DWORD PTR [edx+8]

; 1139 :                 { 
; 1140 :                   f_info->hess[k][kk][j][jj]  += weight*z*dethess[i][j][ii][jj]
; 1141 :                     *gl->gpolypart[m][i][k]*gl->gpolypart[m][ii][kk];

	neg	edx
	mov	DWORD PTR tv4441[ebp], edx
	lea	edx, DWORD PTR [ebx-4]
	shr	edx, 2
	inc	edx
	mov	DWORD PTR tv1477[ebp], edx
	add	edx, edx
	add	edx, edx
	mov	DWORD PTR tv4091[ebp], 8
	mov	DWORD PTR _ii$[ebp], edx
$LN112@lagrange_f@6:
	mov	edx, DWORD PTR _gl$[ebp]
	mov	edx, DWORD PTR [edx+24]
	mov	ebx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	ebx, DWORD PTR _jj$[ebp]
	mov	DWORD PTR tv2763[ebp], edx
	mov	edx, DWORD PTR [eax-8]
	fld	QWORD PTR [edx+ebx*8]
	mov	edx, DWORD PTR tv2763[ebp]
	mov	ebx, DWORD PTR [edx+edi*4]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR tv4441[ebp]
	lea	ebx, DWORD PTR [ebx+eax-8]
	mov	edx, DWORD PTR [edx+ebx]
	fmul	QWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR tv2789[ebp]
	mov	ebx, DWORD PTR _m$[ebp]
	fadd	QWORD PTR [edx]
	fst	QWORD PTR [edx]
	mov	edx, DWORD PTR _gl$[ebp]
	mov	edx, DWORD PTR [edx+24]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	ebx, DWORD PTR _jj$[ebp]
	mov	DWORD PTR tv2763[ebp], edx
	mov	edx, DWORD PTR [eax-4]
	fld	QWORD PTR [edx+ebx*8]
	mov	ebx, DWORD PTR tv2763[ebp]
	mov	edx, DWORD PTR [ebx+edi*4]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [edx+esi*8]
	mov	edx, DWORD PTR tv4441[ebp]
	lea	edx, DWORD PTR [edx+eax-8]
	mov	edx, DWORD PTR [ebx+edx+4]
	fmul	QWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR tv2789[ebp]
	mov	ebx, DWORD PTR _m$[ebp]
	add	eax, 16					; 00000010H
	faddp	ST(1), ST(0)
	fst	QWORD PTR [edx]
	mov	edx, DWORD PTR _gl$[ebp]
	mov	edx, DWORD PTR [edx+24]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	ebx, DWORD PTR _jj$[ebp]
	mov	DWORD PTR tv2763[ebp], edx
	mov	edx, DWORD PTR [eax-16]
	fld	QWORD PTR [edx+ebx*8]
	mov	edx, DWORD PTR tv2763[ebp]
	mov	ebx, DWORD PTR [edx+edi*4]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR tv4091[ebp]
	mov	edx, DWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR _m$[ebp]
	fmul	QWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR tv2789[ebp]
	add	DWORD PTR tv4091[ebp], 16		; 00000010H
	dec	DWORD PTR tv1477[ebp]
	faddp	ST(1), ST(0)
	fst	QWORD PTR [edx]
	mov	edx, DWORD PTR _gl$[ebp]
	mov	edx, DWORD PTR [edx+24]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	ebx, DWORD PTR _jj$[ebp]
	mov	DWORD PTR tv2763[ebp], edx
	mov	edx, DWORD PTR [eax-12]
	fld	QWORD PTR [edx+ebx*8]
	mov	edx, DWORD PTR tv2763[ebp]
	mov	ebx, DWORD PTR [edx+edi*4]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR tv4441[ebp]
	lea	edx, DWORD PTR [edx+ebx+4]
	mov	edx, DWORD PTR [edx+eax-16]
	fmul	QWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR tv2789[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [edx]
	jne	$LN112@lagrange_f@6

; 1138 :                      for ( ii = 0 ; ii < dim ; ii++ )

	mov	eax, DWORD PTR _ii$[ebp]
	fstp	ST(0)
	mov	edx, DWORD PTR _j$[ebp]
	mov	ebx, DWORD PTR _dim$[ebp]
$LC102@lagrange_f@6:
	cmp	eax, ebx
	jge	$LN17@lagrange_f@6

; 1136 :              { for ( jj = 0 ; jj < dim ; jj++ )

	mov	ebx, DWORD PTR _dethess$[ebp]
	fld	ST(1)
	mov	ebx, DWORD PTR [ebx+edi*4]
	fmul	ST(0), ST(3)
	mov	ebx, DWORD PTR [ebx+edx*4]
	mov	DWORD PTR tv2749[ebp], ebx
	mov	ebx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ebx, DWORD PTR [ebx+1340]
	mov	ebx, DWORD PTR [ebx+esi*4]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	mov	edx, DWORD PTR [ebx+edx*4]
	mov	ebx, DWORD PTR _jj$[ebp]
	lea	edx, DWORD PTR [edx+ebx*8]
	mov	DWORD PTR tv2878[ebp], edx
$LN113@lagrange_f@6:

; 1139 :                 { 
; 1140 :                   f_info->hess[k][kk][j][jj]  += weight*z*dethess[i][j][ii][jj]
; 1141 :                     *gl->gpolypart[m][i][k]*gl->gpolypart[m][ii][kk];

	mov	edx, DWORD PTR _gl$[ebp]
	mov	edx, DWORD PTR [edx+24]
	mov	ebx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	ebx, DWORD PTR tv2749[ebp]
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	ebx, DWORD PTR _jj$[ebp]
	fld	QWORD PTR [eax+ebx*8]
	mov	eax, DWORD PTR _ii$[ebp]
	mov	ebx, DWORD PTR _dim$[ebp]
	fmul	ST(0), ST(1)
	mov	DWORD PTR tv2852[ebp], edx
	mov	edx, DWORD PTR [edx+edi*4]
	fmul	QWORD PTR [edx+esi*8]
	mov	edx, DWORD PTR tv2852[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	inc	eax
	fmul	QWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR tv2878[ebp]
	mov	DWORD PTR _ii$[ebp], eax
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	cmp	eax, ebx
	jl	SHORT $LN113@lagrange_f@6

; 1138 :                      for ( ii = 0 ; ii < dim ; ii++ )

	mov	edx, DWORD PTR _j$[ebp]
	fstp	ST(0)
$LN17@lagrange_f@6:

; 1137 :                   for ( i = 0 ; i < dim ; i++ )

	inc	edi
	cmp	edi, ebx
	jl	$LN18@lagrange_f@6

; 1136 :              { for ( jj = 0 ; jj < dim ; jj++ )

	mov	eax, DWORD PTR _jj$[ebp]
	inc	eax
	mov	DWORD PTR _jj$[ebp], eax
	cmp	eax, ebx
	jl	$LN21@lagrange_f@6

; 1135 :           { for ( j = 0 ; j < dim ; j++ )

	inc	edx
	mov	DWORD PTR _j$[ebp], edx
	cmp	edx, ebx
	jl	$LN24@lagrange_f@6
$LN22@lagrange_f@6:

; 1142 :                 }
; 1143 :              }
; 1144 :           }
; 1145 :           for ( j = 0 ; j < dim ; j++ )

	mov	edi, DWORD PTR _gl$[ebp]
	test	ebx, ebx
	jle	$LN10@lagrange_f@6
$LN110@lagrange_f@6:
	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [eax+1340]
	mov	eax, DWORD PTR [edx+esi*4]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	edx, DWORD PTR _mat$[ebp]
	sub	edx, eax
	mov	DWORD PTR tv5226[ebp], eax
	mov	DWORD PTR tv5252[ebp], edx
	mov	DWORD PTR tv185[ebp], ebx
$LN118@lagrange_f@6:

; 1146 :           { for ( i = 0, sum = 0.0 ; i < dim ; i++ )

	mov	DWORD PTR _i$[ebp], 0
	fld	ST(0)
	cmp	ebx, 4
	jl	$LN119@lagrange_f@6
	mov	edx, DWORD PTR tv5252[ebp]
	mov	edx, DWORD PTR [edx+eax]
	mov	eax, DWORD PTR [edi+24]
	mov	edi, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [eax+edi*4]
	lea	edi, DWORD PTR [ebx-4]
	shr	edi, 2
	inc	edi
	mov	DWORD PTR tv240[ebp], edi
	add	edi, edi
	add	edx, 16					; 00000010H
	add	eax, 8
	add	edi, edi
	mov	DWORD PTR _i$[ebp], edi
$LN106@lagrange_f@6:

; 1147 :                   sum += gl->gpolypart[m][i][k]*mat[j][i];

	mov	edi, DWORD PTR [eax-8]
	fld	QWORD PTR [edi+esi*8]
	mov	edi, DWORD PTR [eax-4]
	fmul	QWORD PTR [edx-16]
	add	eax, 16					; 00000010H
	add	edx, 32					; 00000020H
	dec	DWORD PTR tv240[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi+esi*8]
	mov	edi, DWORD PTR [eax-16]
	fmul	QWORD PTR [edx-40]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi+esi*8]
	mov	edi, DWORD PTR [eax-12]
	fmul	QWORD PTR [edx-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi+esi*8]
	fmul	QWORD PTR [edx-24]
	faddp	ST(1), ST(0)
	jne	SHORT $LN106@lagrange_f@6

; 1146 :           { for ( i = 0, sum = 0.0 ; i < dim ; i++ )

	mov	eax, DWORD PTR tv5226[ebp]
	mov	edi, DWORD PTR _gl$[ebp]
$LN119@lagrange_f@6:
	cmp	DWORD PTR _i$[ebp], ebx
	jge	SHORT $LN104@lagrange_f@6
	mov	edx, DWORD PTR tv5252[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR [edi+24]
	mov	DWORD PTR tv5167[ebp], eax
	mov	eax, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv5169[ebp], eax
	mov	eax, ebx
	sub	eax, edx
$LN123@lagrange_f@6:

; 1147 :                   sum += gl->gpolypart[m][i][k]*mat[j][i];

	mov	edx, DWORD PTR tv5169[ebp]
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+esi*8]
	mov	edx, DWORD PTR tv5167[ebp]
	fmul	QWORD PTR [edx]
	add	DWORD PTR tv5169[ebp], 4
	add	DWORD PTR tv5167[ebp], 8
	dec	eax
	faddp	ST(1), ST(0)
	jne	SHORT $LN123@lagrange_f@6

; 1146 :           { for ( i = 0, sum = 0.0 ; i < dim ; i++ )

	mov	eax, DWORD PTR tv5226[ebp]
$LN104@lagrange_f@6:

; 1148 :              f_info->hess[k][kk][j][dim] += weight*gl->gpoly[m][kk]*sum;

	mov	eax, DWORD PTR [eax]
	lea	edx, DWORD PTR [eax+ebx*8]
	mov	eax, DWORD PTR [edi+20]
	mov	DWORD PTR tv5242[ebp], edx
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	fld	QWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR tv5242[ebp]
	fmul	ST(0), ST(3)
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR tv5226[ebp]
	add	eax, 4
	dec	DWORD PTR tv185[ebp]
	mov	DWORD PTR tv5226[ebp], eax
	jne	$LN118@lagrange_f@6

; 1142 :                 }
; 1143 :              }
; 1144 :           }
; 1145 :           for ( j = 0 ; j < dim ; j++ )

	jmp	SHORT $LN10@lagrange_f@6
$LN115@lagrange_f@6:
	mov	edi, DWORD PTR _gl$[ebp]
$LN10@lagrange_f@6:

; 1149 :           }
; 1150 :           for ( jj = 0 ; jj < dim ; jj++ )

	xor	eax, eax
	mov	DWORD PTR _jj$[ebp], eax
	test	ebx, ebx
	jle	$LN29@lagrange_f@6
	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [edx+1340]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	DWORD PTR tv5699[ebp], edx
$LN6@lagrange_f@6:

; 1151 :           { for ( ii = 0,sum = 0.0 ; ii < dim ; ii++ )

	mov	DWORD PTR _ii$[ebp], 0
	fld	ST(0)
	cmp	ebx, 4
	jl	$LN120@lagrange_f@6
	mov	edx, DWORD PTR _mat$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [edi+24]
	mov	edi, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [eax+edi*4]
	lea	edi, DWORD PTR [ebx-4]
	shr	edi, 2
	inc	edi
	mov	DWORD PTR tv811[ebp], edi
	add	edi, edi
	add	edx, 16					; 00000010H
	add	eax, 8
	add	edi, edi
	mov	DWORD PTR _ii$[ebp], edi
$LN109@lagrange_f@6:

; 1152 :                 sum +=  gl->gpolypart[m][ii][kk]*mat[jj][ii];

	mov	edi, DWORD PTR [eax-8]
	fld	QWORD PTR [edi+ecx*8]
	mov	edi, DWORD PTR [eax-4]
	fmul	QWORD PTR [edx-16]
	add	eax, 16					; 00000010H
	add	edx, 32					; 00000020H
	dec	DWORD PTR tv811[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi+ecx*8]
	mov	edi, DWORD PTR [eax-16]
	fmul	QWORD PTR [edx-40]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi+ecx*8]
	mov	edi, DWORD PTR [eax-12]
	fmul	QWORD PTR [edx-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi+ecx*8]
	fmul	QWORD PTR [edx-24]
	faddp	ST(1), ST(0)
	jne	SHORT $LN109@lagrange_f@6

; 1151 :           { for ( ii = 0,sum = 0.0 ; ii < dim ; ii++ )

	mov	edi, DWORD PTR _gl$[ebp]
	mov	eax, DWORD PTR _jj$[ebp]
$LN120@lagrange_f@6:
	cmp	DWORD PTR _ii$[ebp], ebx
	jge	SHORT $LN107@lagrange_f@6
	mov	edx, DWORD PTR _mat$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _ii$[ebp]
	lea	eax, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR [edi+24]
	mov	DWORD PTR tv5642[ebp], eax
	mov	eax, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _ii$[ebp]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv5644[ebp], eax
	mov	eax, ebx
	sub	eax, edx
$LN122@lagrange_f@6:

; 1152 :                 sum +=  gl->gpolypart[m][ii][kk]*mat[jj][ii];

	mov	edx, DWORD PTR tv5644[ebp]
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR tv5642[ebp]
	fmul	QWORD PTR [edx]
	add	DWORD PTR tv5644[ebp], 4
	add	DWORD PTR tv5642[ebp], 8
	dec	eax
	faddp	ST(1), ST(0)
	jne	SHORT $LN122@lagrange_f@6
$LN107@lagrange_f@6:

; 1153 :              f_info->hess[k][kk][dim][jj] += weight*gl->gpoly[m][k]*sum;

	mov	eax, DWORD PTR [edi+20]
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	fld	QWORD PTR [eax+esi*8]
	mov	edx, DWORD PTR tv5699[ebp]
	mov	eax, DWORD PTR _jj$[ebp]
	fmul	ST(0), ST(3)
	inc	eax
	add	edx, 8
	fmulp	ST(1), ST(0)
	mov	DWORD PTR _jj$[ebp], eax
	mov	DWORD PTR tv5699[ebp], edx
	fadd	QWORD PTR [edx-8]
	fstp	QWORD PTR [edx-8]
	cmp	eax, ebx
	jl	$LN6@lagrange_f@6
$LN29@lagrange_f@6:

; 1123 :         for ( kk = 0 ; kk < gl->lagpts ; kk++ )

	inc	ecx
	cmp	ecx, DWORD PTR [edi+16]
	jl	$LN30@lagrange_f@6
$LN32@lagrange_f@6:

; 1120 : 
; 1121 :      /* hessian */
; 1122 :      for ( k = 0 ; k < gl->lagpts  ; k++ )

	mov	eax, DWORD PTR [edi+16]
	inc	esi
	cmp	esi, eax
	jl	$LN33@lagrange_f@6

; 1142 :                 }
; 1143 :              }
; 1144 :           }
; 1145 :           for ( j = 0 ; j < dim ; j++ )

	fstp	ST(1)
	fstp	ST(1)
$LN230@lagrange_f@6:
	fstp	ST(0)
$LN55@lagrange_f@6:

; 1096 : 
; 1097 :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	mov	eax, DWORD PTR _m$[ebp]
	inc	eax
	mov	DWORD PTR _m$[ebp], eax
	cmp	eax, DWORD PTR [edi+4]
	jl	$LL226@lagrange_f@6
	pop	edi
	pop	esi
	pop	ebx

; 1154 :           }
; 1155 :         }
; 1156 :   }
; 1157 : 
; 1158 :   return value;  
; 1159 : } // end lagrange_facet_volume_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN132@lagrange_f@6:

; 1120 : 
; 1121 :      /* hessian */
; 1122 :      for ( k = 0 ; k < gl->lagpts  ; k++ )

	fstp	ST(1)
	fstp	ST(1)
	fstp	ST(1)
	jmp	SHORT $LN55@lagrange_f@6
$LN156@lagrange_f@6:

; 1118 :      
; 1119 :      if ( mode == METHOD_GRADIENT ) continue;

	fstp	ST(0)
	jmp	SHORT $LN230@lagrange_f@6
$LN111@lagrange_f@6:

; 1154 :           }
; 1155 :         }
; 1156 :   }
; 1157 : 
; 1158 :   return value;  
; 1159 : } // end lagrange_facet_volume_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _value$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_lagrange_facet_volume_all ENDP
_TEXT	ENDS
PUBLIC	_lagrange_vector_integral_hess
; Function compile flags: /Ogtp
;	COMDAT _lagrange_vector_integral_hess
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_lagrange_vector_integral_hess PROC			; COMDAT

; 699  : { return lagrange_vector_integral_all(f_info,METHOD_HESSIAN);

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _f_info$[ebp]
	push	8763					; 0000223bH
	push	eax
	call	_lagrange_vector_integral_all
	add	esp, 8

; 700  : }

	pop	ebp
	ret	0
_lagrange_vector_integral_hess ENDP
_TEXT	ENDS
PUBLIC	_lagrange_k_vector_integral_hess
; Function compile flags: /Ogtp
;	COMDAT _lagrange_k_vector_integral_hess
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_lagrange_k_vector_integral_hess PROC			; COMDAT

; 894  : { return lagrange_k_vector_integral_all(f_info,METHOD_HESSIAN);

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _f_info$[ebp]
	push	8763					; 0000223bH
	push	eax
	call	_lagrange_k_vector_integral_all
	add	esp, 8

; 895  : }

	pop	ebp
	ret	0
_lagrange_k_vector_integral_hess ENDP
_TEXT	ENDS
PUBLIC	_lagrange_facet_volume_hess
; Function compile flags: /Ogtp
;	COMDAT _lagrange_facet_volume_hess
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_lagrange_facet_volume_hess PROC			; COMDAT

; 1075 : { return lagrange_facet_volume_all(f_info,METHOD_HESSIAN);

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _f_info$[ebp]
	push	8763					; 0000223bH
	push	eax
	call	_lagrange_facet_volume_all
	add	esp, 8

; 1076 : }

	pop	ebp
	ret	0
_lagrange_facet_volume_hess ENDP
_TEXT	ENDS
END
