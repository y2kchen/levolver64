; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\GRAPHER.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_zoomfactor DQ	03ff3333333333333r		; 1.2
_DATA	ENDS
PUBLIC	_get_edge_wrap
EXTRN	_sym_inverse:DWORD
EXTRN	_dymem:DWORD
EXTRN	_web:BYTE
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
;	COMDAT _get_edge_wrap
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_wrap PROC					; COMDAT

; 163  : {

	push	ebp
	mov	ebp, esp

; 164  :   WRAPTYPE wrap = *EINT(e_id,E_WRAP_ATTR) ;

	mov	ecx, DWORD PTR _e_id$[ebp]
	mov	edx, DWORD PTR _web+124
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+216
	push	esi
	mov	esi, DWORD PTR _dymem
	mov	edx, DWORD PTR [edx+esi+784]
	mov	eax, DWORD PTR [eax+edx]
	pop	esi

; 165  :   return    ( inverted(e_id) ? (*sym_inverse)(wrap) : wrap );

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN4@get_edge_w
	push	eax
	call	DWORD PTR _sym_inverse
	add	esp, 4
$LN4@get_edge_w:

; 166  : }

	pop	ebp
	ret	0
_get_edge_wrap ENDP
_TEXT	ENDS
PUBLIC	_get_edge_tailv
; Function compile flags: /Ogtp
;	COMDAT _get_edge_tailv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_tailv PROC					; COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp

; 192  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 193  :      return get_edge_vertices(e_id)[web.headvnum];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_t
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 196  : }

	pop	ebp
	ret	0
$LN2@get_edge_t:

; 194  :   else
; 195  :      return get_edge_vertices(e_id)[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 196  : }

	pop	ebp
	ret	0
_get_edge_tailv ENDP
_TEXT	ENDS
PUBLIC	_get_edge_headv
; Function compile flags: /Ogtp
;	COMDAT _get_edge_headv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_headv PROC					; COMDAT

; 200  : {

	push	ebp
	mov	ebp, esp

; 201  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 202  :      return get_edge_vertices(e_id)[0];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_h
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 205  : }

	pop	ebp
	ret	0
$LN2@get_edge_h:

; 203  :   else
; 204  :      return get_edge_vertices(e_id)[web.headvnum];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 205  : }

	pop	ebp
	ret	0
_get_edge_headv ENDP
_TEXT	ENDS
PUBLIC	_local_update_display
EXTRN	_display:PROC
EXTRN	_UpdateOOGL:PROC
EXTRN	_OOGL_flag:DWORD
EXTRN	_graph_timestamp:DWORD
EXTRN	_go_display_flag:DWORD
EXTRN	_global_timestamp:DWORD
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\grapher.c
;	COMDAT _local_update_display
_TEXT	SEGMENT
_local_update_display PROC				; COMDAT

; 70   :   graph_timestamp = ++global_timestamp;  /* new surface */

	mov	eax, DWORD PTR _global_timestamp
	inc	eax

; 71   :   if ( go_display_flag )

	cmp	DWORD PTR _go_display_flag, 0
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _graph_timestamp, eax
	je	SHORT $LN1@local_upda

; 72   :   {
; 73   :     if ( OOGL_flag ) UpdateOOGL();

	cmp	DWORD PTR _OOGL_flag, 0
	je	SHORT $LN2@local_upda
	jmp	_UpdateOOGL
$LN2@local_upda:

; 74   :     else
; 75   :       display();

	jmp	_display
$LN1@local_upda:

; 76   :   }
; 77   : } // end local_update_display()

	ret	0
_local_update_display ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@LNEIPKHI@Display?5raw?5cell?5or?5connected?5bo@ ; `string'
PUBLIC	??_C@_0CN@JFJCLEGG@There?5are?5no?5bodies?5to?5display?5c@ ; `string'
PUBLIC	??_C@_0EA@IBNAEOIP@Display?5raw?5facets?0?5connected?5bo@ ; `string'
PUBLIC	??_C@_0CM@EJECOGIN@Display?5raw?5facets?5or?5clipped?5ce@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_ask_wrap_display
EXTRN	_kb_error:PROC
EXTRN	_prompt:PROC
EXTRN	_former_torus_display_mode:DWORD
EXTRN	_torus_display_mode:DWORD
EXTRN	_commandfd:DWORD
EXTRN	___iob_func:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0CO@LNEIPKHI@Display?5raw?5cell?5or?5connected?5bo@
CONST	SEGMENT
??_C@_0CO@LNEIPKHI@Display?5raw?5cell?5or?5connected?5bo@ DB 'Display raw'
	DB	' cell or connected bodies? (0,1): ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@JFJCLEGG@There?5are?5no?5bodies?5to?5display?5c@
CONST	SEGMENT
??_C@_0CN@JFJCLEGG@There?5are?5no?5bodies?5to?5display?5c@ DB 'There are '
	DB	'no bodies to display connectedly.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@IBNAEOIP@Display?5raw?5facets?0?5connected?5bo@
CONST	SEGMENT
??_C@_0EA@IBNAEOIP@Display?5raw?5facets?0?5connected?5bo@ DB 'Display raw'
	DB	' facets, connected bodies or clipped cell? (0,1,2): ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@EJECOGIN@Display?5raw?5facets?5or?5clipped?5ce@
CONST	SEGMENT
??_C@_0CM@EJECOGIN@Display?5raw?5facets?5or?5clipped?5ce@ DB 'Display raw'
	DB	' facets or clipped cell? (0,2): ', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _ask_wrap_display
_TEXT	SEGMENT
_response$89074 = -1104					; size = 1000
_response$89091 = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
_ask_wrap_display PROC					; COMDAT

; 132  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1104				; 00000450H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi

; 133  :   if ( commandfd != stdin ) 

	call	___iob_func

; 134  :   { if ( web.torus_flag && (torus_display_mode == TORUS_DEFAULT_MODE) 
; 135  :          && former_torus_display_mode )

	xor	esi, esi
	cmp	DWORD PTR _commandfd, eax
	je	$LN26@ask_wrap_d
	cmp	DWORD PTR _web+860, esi
	je	$LN5@ask_wrap_d
	cmp	DWORD PTR _torus_display_mode, esi
	jne	$LN5@ask_wrap_d
	mov	eax, DWORD PTR _former_torus_display_mode
	cmp	eax, esi
	je	$LN5@ask_wrap_d

; 136  :      { switch ( former_torus_display_mode )

	sub	eax, 2
	je	SHORT $LN22@ask_wrap_d
	mov	ecx, 1
$LN32@ask_wrap_d:
	sub	eax, ecx
	jne	$LN5@ask_wrap_d

; 142  :                        }
; 143  :                        break;
; 144  :           case TORUS_CLIPPED_MODE : 
; 145  :                        web.torus_body_flag = 0; 
; 146  :                        web.torus_clip_flag = 1; 

	mov	DWORD PTR _web+800, ecx

; 147  :                        torus_display_mode = TORUS_CLIPPED_MODE;

	mov	DWORD PTR _torus_display_mode, 3

; 148  :                        break;

	jmp	$LN29@ask_wrap_d
$LN22@ask_wrap_d:

; 137  :        { case TORUS_CONNECTED_MODE : 
; 138  :                        if ( web.skel[BODY].count > 0 )

	cmp	DWORD PTR _web+400, esi
	jle	$LN5@ask_wrap_d

; 139  :                        { web.torus_body_flag = 1; 
; 140  :                          web.torus_clip_flag = 0;

	mov	DWORD PTR _web+800, esi
	mov	DWORD PTR _web+804, 1

; 141  :                          torus_display_mode = TORUS_CONNECTED_MODE;

	mov	DWORD PTR _torus_display_mode, 2
	pop	esi

; 202  :                        break;
; 203  :          }
; 204  :     }
; 205  : } // end ask_wrap_display()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN26@ask_wrap_d:

; 149  :         }
; 150  :     }
; 151  :     return;
; 152  :   }
; 153  :   if ( web.torus_flag )

	cmp	DWORD PTR _web+860, esi
	je	SHORT $LN19@ask_wrap_d

; 154  :     {
; 155  :       char response[1000];
; 156  :       if ( web.skel[BODY].count == 0 )
; 157  :          prompt("Display raw facets or clipped cell? (0,2): ",response,sizeof(response));

	push	1000					; 000003e8H
	cmp	DWORD PTR _web+400, esi
	jne	SHORT $LN18@ask_wrap_d
	lea	eax, DWORD PTR _response$89074[ebp]
	push	eax
	push	OFFSET ??_C@_0CM@EJECOGIN@Display?5raw?5facets?5or?5clipped?5ce@

; 158  :       else

	jmp	SHORT $LN30@ask_wrap_d
$LN18@ask_wrap_d:

; 159  :       prompt("Display raw facets, connected bodies or clipped cell? (0,1,2): ",
; 160  :           response,sizeof(response));

	lea	ecx, DWORD PTR _response$89074[ebp]
	push	ecx
	push	OFFSET ??_C@_0EA@IBNAEOIP@Display?5raw?5facets?0?5connected?5bo@
$LN30@ask_wrap_d:
	call	_prompt

; 161  :       switch ( response[0] )

	movsx	eax, BYTE PTR _response$89074[ebp]
	add	esp, 12					; 0000000cH
	sub	eax, 48					; 00000030H
	je	$LN4@ask_wrap_d
	mov	ecx, 1
	sub	eax, ecx

; 171  :                        else { web.torus_body_flag = 1; 
; 172  :                               web.torus_clip_flag = 0;
; 173  :                               torus_display_mode = TORUS_CONNECTED_MODE;}
; 174  :                        break;
; 175  :             case '2' : 
; 176  :                        web.torus_body_flag = 0; 
; 177  :                        web.torus_clip_flag = 1; 
; 178  :                        torus_display_mode = TORUS_CLIPPED_MODE;
; 179  :                        break;

	jne	$LN32@ask_wrap_d

; 162  :          {
; 163  :             case '0' : torus_display_mode = TORUS_RAW_MODE;
; 164  :                        web.torus_body_flag = 0; 
; 165  :                        web.torus_clip_flag = 0; 
; 166  :                        break;
; 167  :             case '1' : 
; 168  :                        if ( web.skel[BODY].count == 0 )

	cmp	DWORD PTR _web+400, esi
	jne	$LN2@ask_wrap_d

; 169  :                           kb_error(1042,"There are no bodies to display connectedly.\n",
; 170  :                                 WARNING);

	push	2
	push	OFFSET ??_C@_0CN@JFJCLEGG@There?5are?5no?5bodies?5to?5display?5c@
	push	1042					; 00000412H

; 197  :                           kb_error(1043,"There are no bodies to display connectedly.\n",
; 198  :                              WARNING);

	call	_kb_error
	add	esp, 12					; 0000000cH
	pop	esi

; 202  :                        break;
; 203  :          }
; 204  :     }
; 205  : } // end ask_wrap_display()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN19@ask_wrap_d:

; 180  :          }
; 181  :     }
; 182  : 
; 183  :   else if ( web.symmetry_flag )

	cmp	DWORD PTR _web+856, esi
	je	$LN5@ask_wrap_d

; 184  :     {
; 185  :       char response[100];
; 186  :       if ( web.skel[BODY].count == 0 )

	cmp	DWORD PTR _web+400, esi
	jne	SHORT $LN7@ask_wrap_d

; 187  :           { torus_display_mode = TORUS_RAW_MODE; return; }

	mov	DWORD PTR _torus_display_mode, 1
	pop	esi

; 202  :                        break;
; 203  :          }
; 204  :     }
; 205  : } // end ask_wrap_display()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@ask_wrap_d:

; 188  :       prompt("Display raw cell or connected bodies? (0,1): ",response,sizeof(response));

	push	100					; 00000064H
	lea	edx, DWORD PTR _response$89091[ebp]
	push	edx
	push	OFFSET ??_C@_0CO@LNEIPKHI@Display?5raw?5cell?5or?5connected?5bo@
	call	_prompt

; 189  :       switch ( response[0] )

	movsx	eax, BYTE PTR _response$89091[ebp]
	add	esp, 12					; 0000000cH
	sub	eax, 48					; 00000030H
	je	SHORT $LN4@ask_wrap_d
	mov	ecx, 1
	sub	eax, ecx
	jne	SHORT $LN5@ask_wrap_d

; 194  :                        break;
; 195  :             case '1' : 
; 196  :                        if ( web.skel[BODY].count == 0 )

	cmp	DWORD PTR _web+400, esi
	jne	SHORT $LN2@ask_wrap_d

; 197  :                           kb_error(1043,"There are no bodies to display connectedly.\n",
; 198  :                              WARNING);

	push	2
	push	OFFSET ??_C@_0CN@JFJCLEGG@There?5are?5no?5bodies?5to?5display?5c@
	push	1043					; 00000413H
	call	_kb_error
	add	esp, 12					; 0000000cH
	pop	esi

; 202  :                        break;
; 203  :          }
; 204  :     }
; 205  : } // end ask_wrap_display()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@ask_wrap_d:

; 199  :                        else { web.torus_body_flag = 1; 
; 200  :                                  web.torus_clip_flag = 0;  

	mov	DWORD PTR _web+800, esi

; 201  :                                  torus_display_mode = TORUS_CONNECTED_MODE;}

	mov	DWORD PTR _torus_display_mode, 2
	mov	DWORD PTR _web+804, ecx
	pop	esi

; 202  :                        break;
; 203  :          }
; 204  :     }
; 205  : } // end ask_wrap_display()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@ask_wrap_d:

; 193  :                        web.torus_clip_flag = 0; 

	mov	DWORD PTR _web+800, esi
	mov	DWORD PTR _torus_display_mode, 1
$LN29@ask_wrap_d:

; 190  :          {
; 191  :             case '0' : torus_display_mode = TORUS_RAW_MODE;
; 192  :                        web.torus_body_flag = 0; 

	mov	DWORD PTR _web+804, esi
$LN5@ask_wrap_d:

; 202  :                        break;
; 203  :          }
; 204  :     }
; 205  : } // end ask_wrap_display()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_ask_wrap_display ENDP
_TEXT	ENDS
PUBLIC	__real@3fbacee9f37bebd5
PUBLIC	__real@3ff0000000000000
PUBLIC	??_C@_09BMOCGFJ@GRAPHER?4C?$AA@			; `string'
PUBLIC	_init_view
EXTRN	_set_view_matrix_global:PROC
EXTRN	_matcopy:PROC
EXTRN	_from_focus:DWORD
EXTRN	_to_focus:DWORD
EXTRN	_perm_matrix2:PROC
EXTRN	_view:DWORD
EXTRN	_identmat:DWORD
EXTRN	_kb_dmatrix:PROC
EXTRN	__fltused:DWORD
EXTRN	__CIsin:PROC
EXTRN	__CIcos:PROC
_BSS	SEGMENT
_transdown DD	01H DUP (?)
_transright DD	01H DUP (?)
_transup DD	01H DUP (?)
_transleft DD	01H DUP (?)
_shrink	DD	01H DUP (?)
_zoom	DD	01H DUP (?)
_counterclock DD 01H DUP (?)
_clockwise DD	01H DUP (?)
_tipdown DD	01H DUP (?)
_tipup	DD	01H DUP (?)
_spinl	DD	01H DUP (?)
_spinr	DD	01H DUP (?)
_BSS	ENDS
;	COMDAT __real@3fbacee9f37bebd5
CONST	SEGMENT
__real@3fbacee9f37bebd5 DQ 03fbacee9f37bebd5r	; 0.10472
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT ??_C@_09BMOCGFJ@GRAPHER?4C?$AA@
CONST	SEGMENT
??_C@_09BMOCGFJ@GRAPHER?4C?$AA@ DB 'GRAPHER.C', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _init_view
_TEXT	SEGMENT
tv481 = -32						; size = 8
tv737 = -24						; size = 8
tv494 = -16						; size = 8
tv472 = -8						; size = 8
_init_view PROC						; COMDAT

; 496  : {

	push	ebp
	mov	ebp, esp

; 497  :   int i;
; 498  : 
; 499  :   view = dmatrix(0,SDIM,0,SDIM); 

	mov	eax, DWORD PTR _web+616
	sub	esp, 32					; 00000020H
	push	499					; 000001f3H
	push	OFFSET ??_C@_09BMOCGFJ@GRAPHER?4C?$AA@
	push	eax
	push	0
	push	eax
	push	0
	call	_kb_dmatrix
	add	esp, 24					; 00000018H

; 500  : 
; 501  :   if ( identmat == NULL )

	cmp	DWORD PTR _identmat, 0
	mov	DWORD PTR _view, eax
	jne	$LN4@init_view

; 502  :   { /* first time set-up */
; 503  : 
; 504  :     /* set up identity matrix */
; 505  :     identmat = perm_matrix2(MAXCOORD+1,MAXCOORD+1); 

	push	esi
	push	edi
	push	7
	push	7
	call	_perm_matrix2

; 506  :     for ( i = 0 ; i <= MAXCOORD ; i++ )
; 507  :       identmat[i][i] = 1.0;

	fld1
	mov	DWORD PTR _identmat, eax
	mov	eax, DWORD PTR [eax]
	fst	QWORD PTR [eax]
	mov	ecx, DWORD PTR _identmat
	mov	edx, DWORD PTR [ecx+4]
	fst	QWORD PTR [edx+8]
	mov	eax, DWORD PTR _identmat
	mov	ecx, DWORD PTR [eax+8]
	fst	QWORD PTR [ecx+16]
	mov	edx, DWORD PTR _identmat
	mov	eax, DWORD PTR [edx+12]
	fst	QWORD PTR [eax+24]
	mov	ecx, DWORD PTR _identmat
	mov	edx, DWORD PTR [ecx+16]
	fst	QWORD PTR [edx+32]
	mov	eax, DWORD PTR _identmat
	mov	ecx, DWORD PTR [eax+20]
	fst	QWORD PTR [ecx+40]
	mov	edx, DWORD PTR _identmat
	mov	eax, DWORD PTR [edx+24]

; 508  : 
; 509  : 
; 510  :     to_focus = perm_matrix2(MAXCOORD+1,MAXCOORD+1); 

	push	7
	fstp	QWORD PTR [eax+48]
	push	7
	call	_perm_matrix2

; 511  :     from_focus = perm_matrix2(MAXCOORD+1,MAXCOORD+1); 

	push	7
	push	7
	mov	DWORD PTR _to_focus, eax
	call	_perm_matrix2

; 512  :   
; 513  :     /* set rotation matrices */
; 514  :     spinr = perm_matrix2(MAXCOORD+1,MAXCOORD+1);

	push	7
	push	7
	mov	DWORD PTR _from_focus, eax
	call	_perm_matrix2

; 515  :     matcopy(spinr,identmat,SDIM+1,SDIM+1);

	mov	ecx, DWORD PTR _web+616
	inc	ecx
	push	ecx
	push	ecx
	mov	ecx, DWORD PTR _identmat
	push	ecx
	push	eax
	mov	DWORD PTR _spinr, eax
	call	_matcopy

; 516  :     spinr[0][0] = spinr[1][1] = cos(dang);

	fld	QWORD PTR __real@3fbacee9f37bebd5
	add	esp, 48					; 00000030H
	call	__CIcos
	fst	QWORD PTR tv472[ebp]
	mov	eax, DWORD PTR _spinr
	mov	esi, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [eax]
	fst	QWORD PTR [esi+8]
	fstp	QWORD PTR [edi]

; 517  :     spinr[0][1] = -(spinr[1][0] = sin(dang));

	fld	QWORD PTR __real@3fbacee9f37bebd5
	call	__CIsin
	fst	QWORD PTR tv481[ebp]
	fst	QWORD PTR [esi]

; 518  :   
; 519  :     spinl = perm_matrix2(MAXCOORD+1,MAXCOORD+1);

	push	7
	fchs
	push	7
	fst	QWORD PTR tv494[ebp]
	fstp	QWORD PTR [edi+8]
	call	_perm_matrix2

; 520  :     matcopy(spinl,identmat,SDIM+1,SDIM+1);

	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR _identmat
	inc	ecx
	push	ecx
	push	ecx
	push	edx
	push	eax
	mov	DWORD PTR _spinl, eax
	call	_matcopy

; 521  :     spinl[0][0] = spinl[1][1] = cos(dang);

	fld	QWORD PTR tv472[ebp]
	mov	ecx, DWORD PTR _spinl
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx]
	fst	QWORD PTR [eax+8]
	fstp	QWORD PTR [ecx]

; 522  :     spinl[0][1] = -(spinl[1][0] = -sin(dang));

	fld	QWORD PTR tv494[ebp]

; 523  :   
; 524  :     tipup = perm_matrix2(MAXCOORD+1,MAXCOORD+1);

	push	7
	fst	QWORD PTR [eax]
	push	7
	fchs
	fst	QWORD PTR tv737[ebp]
	fstp	QWORD PTR [ecx+8]
	call	_perm_matrix2

; 525  :     matcopy(tipup,identmat,SDIM+1,SDIM+1);

	mov	ecx, DWORD PTR _web+616
	inc	ecx
	push	ecx
	push	ecx
	mov	ecx, DWORD PTR _identmat
	push	ecx
	push	eax
	mov	DWORD PTR _tipup, eax
	call	_matcopy

; 526  :     tipup[0][0] = tipup[2][2] = cos(dang);

	fld	QWORD PTR tv472[ebp]
	mov	ecx, DWORD PTR _tipup
	mov	eax, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR [ecx]
	fst	QWORD PTR [eax+16]
	fstp	QWORD PTR [ecx]

; 527  :     tipup[0][2] = -(tipup[2][0] = sin(dang));
; 528  :   
; 529  :     tipdown = perm_matrix2(MAXCOORD+1,MAXCOORD+1);

	push	7
	fld	QWORD PTR tv481[ebp]
	push	7
	fstp	QWORD PTR [eax]
	fld	QWORD PTR tv494[ebp]
	fstp	QWORD PTR [ecx+16]
	call	_perm_matrix2

; 530  :     matcopy(tipdown,identmat,SDIM+1,SDIM+1);

	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR _identmat
	inc	ecx
	push	ecx
	push	ecx
	push	edx
	push	eax
	mov	DWORD PTR _tipdown, eax
	call	_matcopy

; 531  :     tipdown[0][0] = tipdown[2][2] = cos(dang);

	fld	QWORD PTR tv472[ebp]
	mov	ecx, DWORD PTR _tipdown
	mov	eax, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR [ecx]
	fst	QWORD PTR [eax+16]
	fstp	QWORD PTR [ecx]
	add	esp, 72					; 00000048H

; 532  :     tipdown[0][2] = -(tipdown[2][0] = -sin(dang));

	fld	QWORD PTR tv494[ebp]

; 533  :   
; 534  :     clockwise = perm_matrix2(MAXCOORD+1,MAXCOORD+1);

	push	7
	fstp	QWORD PTR [eax]
	push	7
	fld	QWORD PTR tv737[ebp]
	fstp	QWORD PTR [ecx+16]
	call	_perm_matrix2

; 535  :     matcopy(clockwise,identmat,SDIM+1,SDIM+1);

	mov	ecx, DWORD PTR _web+616
	inc	ecx
	push	ecx
	push	ecx
	mov	ecx, DWORD PTR _identmat
	push	ecx
	push	eax
	mov	DWORD PTR _clockwise, eax
	call	_matcopy

; 536  :     clockwise[1][1] = clockwise[2][2] = cos(dang);

	fld	QWORD PTR tv472[ebp]
	mov	ecx, DWORD PTR _clockwise
	mov	eax, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR [ecx+4]
	fst	QWORD PTR [eax+16]
	fstp	QWORD PTR [ecx+8]

; 537  :     clockwise[1][2] = -(clockwise[2][1] = -sin(dang));
; 538  :   
; 539  :     counterclock = perm_matrix2(MAXCOORD+1,MAXCOORD+1);

	push	7
	fld	QWORD PTR tv494[ebp]
	push	7
	fstp	QWORD PTR [eax+8]
	fld	QWORD PTR tv737[ebp]
	fstp	QWORD PTR [ecx+16]
	call	_perm_matrix2

; 540  :     matcopy(counterclock,identmat,SDIM+1,SDIM+1);

	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR _identmat
	inc	ecx
	push	ecx
	mov	DWORD PTR _counterclock, eax
	push	ecx
	push	edx
	push	eax
	call	_matcopy

; 541  :     counterclock[1][1] = counterclock[2][2] = cos(dang);

	fld	QWORD PTR tv472[ebp]
	mov	ecx, DWORD PTR _counterclock
	mov	eax, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR [ecx+4]
	fst	QWORD PTR [eax+16]
	fstp	QWORD PTR [ecx+8]

; 542  :     counterclock[1][2] = -(counterclock[2][1] = sin(dang));
; 543  :   
; 544  :     /* set magnifying matrix */
; 545  :     zoom = perm_matrix2(MAXCOORD+1,MAXCOORD+1);

	push	7
	fld	QWORD PTR tv481[ebp]
	push	7
	fstp	QWORD PTR [eax+8]
	fld	QWORD PTR tv494[ebp]
	fstp	QWORD PTR [ecx+16]
	call	_perm_matrix2

; 546  :     matcopy(zoom,identmat,SDIM+1,SDIM+1);

	mov	ecx, DWORD PTR _web+616
	inc	ecx
	push	ecx
	push	ecx
	mov	ecx, DWORD PTR _identmat
	push	ecx
	push	eax
	mov	DWORD PTR _zoom, eax
	call	_matcopy

; 547  :     zoom[0][0] = zoom[1][1] = zoom[2][2] = zoomfactor;

	fld	QWORD PTR _zoomfactor
	mov	eax, DWORD PTR _zoom
	mov	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR [eax+4]
	fst	QWORD PTR [edx+16]
	mov	edx, DWORD PTR [eax]
	fst	QWORD PTR [ecx+8]
	add	esp, 72					; 00000048H
	fstp	QWORD PTR [edx]

; 548  :   
; 549  :     /* set shrink matrix */
; 550  :     shrink = perm_matrix2(MAXCOORD+1,MAXCOORD+1);

	push	7
	push	7
	call	_perm_matrix2

; 551  :     matcopy(shrink,identmat,SDIM+1,SDIM+1);

	mov	ecx, DWORD PTR _web+616
	inc	ecx
	push	ecx
	push	ecx
	mov	ecx, DWORD PTR _identmat
	push	ecx
	push	eax
	mov	DWORD PTR _shrink, eax
	call	_matcopy

; 552  :     shrink[0][0] = shrink[1][1] = shrink[2][2] = 1/zoomfactor;

	fld1
	fdiv	QWORD PTR _zoomfactor
	mov	eax, DWORD PTR _shrink
	mov	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR [eax+4]

; 553  :   
; 554  :     /* set translation matrices */
; 555  :     transleft = perm_matrix2(MAXCOORD+1,MAXCOORD+1);

	push	7
	push	7
	fst	QWORD PTR [edx+16]
	fst	QWORD PTR [ecx+8]
	mov	edx, DWORD PTR [eax]
	fstp	QWORD PTR [edx]
	call	_perm_matrix2

; 556  :     transup = perm_matrix2(MAXCOORD+1,MAXCOORD+1);

	push	7
	push	7
	mov	DWORD PTR _transleft, eax
	call	_perm_matrix2

; 557  :     transright = perm_matrix2(MAXCOORD+1,MAXCOORD+1);  

	push	7
	push	7
	mov	DWORD PTR _transup, eax
	call	_perm_matrix2

; 558  :     transdown = perm_matrix2(MAXCOORD+1,MAXCOORD+1);

	push	7
	push	7
	mov	DWORD PTR _transright, eax
	call	_perm_matrix2
	add	esp, 56					; 00000038H
	pop	edi
	mov	DWORD PTR _transdown, eax
	pop	esi
$LN4@init_view:

; 559  :   } 
; 560  :  
; 561  :   set_view_matrix_global();

	call	_set_view_matrix_global

; 562  :   matcopy(to_focus,identmat,SDIM+1,SDIM+1);

	mov	eax, DWORD PTR _web+616
	mov	ecx, DWORD PTR _to_focus
	inc	eax
	push	eax
	push	eax
	mov	eax, DWORD PTR _identmat
	push	eax
	push	ecx
	call	_matcopy

; 563  :   matcopy(from_focus,identmat,SDIM+1,SDIM+1);

	mov	eax, DWORD PTR _web+616
	mov	edx, DWORD PTR _identmat
	inc	eax
	push	eax
	push	eax
	mov	eax, DWORD PTR _from_focus
	push	edx
	push	eax
	call	_matcopy
	add	esp, 32					; 00000020H

; 564  : 
; 565  : } // end init_view()

	mov	esp, ebp
	pop	ebp
	ret	0
_init_view ENDP
_TEXT	ENDS
PUBLIC	_set_spinr
; Function compile flags: /Ogtp
;	COMDAT _set_spinr
_TEXT	SEGMENT
_val$ = 8						; size = 8
_set_spinr PROC						; COMDAT

; 576  : {

	push	ebp
	mov	ebp, esp

; 577  :   spinr[0][0] = spinr[1][1] = cos(val);

	fld	QWORD PTR _val$[ebp]
	push	esi
	push	edi
	call	__CIcos
	mov	eax, DWORD PTR _spinr
	mov	esi, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [eax]
	fst	QWORD PTR [esi+8]
	fstp	QWORD PTR [edi]

; 578  :   spinr[0][1] = -(spinr[1][0] = sin(val));

	fld	QWORD PTR _val$[ebp]
	call	__CIsin
	fst	QWORD PTR [esi]
	fchs
	fstp	QWORD PTR [edi+8]
	pop	edi
	pop	esi

; 579  : }

	pop	ebp
	ret	0
_set_spinr ENDP
_TEXT	ENDS
PUBLIC	_set_spinl
; Function compile flags: /Ogtp
;	COMDAT _set_spinl
_TEXT	SEGMENT
_val$ = 8						; size = 8
_set_spinl PROC						; COMDAT

; 583  : {

	push	ebp
	mov	ebp, esp

; 584  :   spinl[0][0] = spinl[1][1] = cos(val);

	fld	QWORD PTR _val$[ebp]
	push	esi
	push	edi
	call	__CIcos
	mov	eax, DWORD PTR _spinl
	mov	esi, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [eax]
	fst	QWORD PTR [esi+8]
	fstp	QWORD PTR [edi]

; 585  :   spinl[0][1] = -(spinl[1][0] = -sin(val));

	fld	QWORD PTR _val$[ebp]
	call	__CIsin
	fchs
	fst	QWORD PTR [esi]
	fchs
	fstp	QWORD PTR [edi+8]
	pop	edi
	pop	esi

; 586  : }

	pop	ebp
	ret	0
_set_spinl ENDP
_TEXT	ENDS
PUBLIC	_set_tipup
; Function compile flags: /Ogtp
;	COMDAT _set_tipup
_TEXT	SEGMENT
_val$ = 8						; size = 8
_set_tipup PROC						; COMDAT

; 590  : {

	push	ebp
	mov	ebp, esp

; 591  :   tipup[0][0] = tipup[2][2] = cos(val);

	fld	QWORD PTR _val$[ebp]
	push	esi
	push	edi
	call	__CIcos
	mov	eax, DWORD PTR _tipup
	mov	esi, DWORD PTR [eax+8]
	mov	edi, DWORD PTR [eax]
	fst	QWORD PTR [esi+16]
	fstp	QWORD PTR [edi]

; 592  :   tipup[0][2] = -(tipup[2][0] = sin(val));

	fld	QWORD PTR _val$[ebp]
	call	__CIsin
	fst	QWORD PTR [esi]
	fchs
	fstp	QWORD PTR [edi+16]
	pop	edi
	pop	esi

; 593  : }

	pop	ebp
	ret	0
_set_tipup ENDP
_TEXT	ENDS
PUBLIC	_set_tipdown
; Function compile flags: /Ogtp
;	COMDAT _set_tipdown
_TEXT	SEGMENT
_val$ = 8						; size = 8
_set_tipdown PROC					; COMDAT

; 597  : {

	push	ebp
	mov	ebp, esp

; 598  :   tipdown[0][0] = tipdown[2][2] = cos(val);

	fld	QWORD PTR _val$[ebp]
	push	esi
	push	edi
	call	__CIcos
	mov	eax, DWORD PTR _tipdown
	mov	esi, DWORD PTR [eax+8]
	mov	edi, DWORD PTR [eax]
	fst	QWORD PTR [esi+16]
	fstp	QWORD PTR [edi]

; 599  :   tipdown[0][2] = -(tipdown[2][0] = -sin(val));

	fld	QWORD PTR _val$[ebp]
	call	__CIsin
	fchs
	fst	QWORD PTR [esi]
	fchs
	fstp	QWORD PTR [edi+16]
	pop	edi
	pop	esi

; 600  : }

	pop	ebp
	ret	0
_set_tipdown ENDP
_TEXT	ENDS
PUBLIC	_set_clockwise
; Function compile flags: /Ogtp
;	COMDAT _set_clockwise
_TEXT	SEGMENT
_val$ = 8						; size = 8
_set_clockwise PROC					; COMDAT

; 604  : {

	push	ebp
	mov	ebp, esp

; 605  :   clockwise[1][1] = clockwise[2][2] = cos(val);

	fld	QWORD PTR _val$[ebp]
	push	esi
	push	edi
	call	__CIcos
	mov	eax, DWORD PTR _clockwise
	mov	esi, DWORD PTR [eax+8]
	mov	edi, DWORD PTR [eax+4]
	fst	QWORD PTR [esi+16]
	fstp	QWORD PTR [edi+8]

; 606  :   clockwise[1][2] = -(clockwise[2][1] = -sin(val));

	fld	QWORD PTR _val$[ebp]
	call	__CIsin
	fchs
	fst	QWORD PTR [esi+8]
	fchs
	fstp	QWORD PTR [edi+16]
	pop	edi
	pop	esi

; 607  : }

	pop	ebp
	ret	0
_set_clockwise ENDP
_TEXT	ENDS
PUBLIC	_set_counterclockwise
; Function compile flags: /Ogtp
;	COMDAT _set_counterclockwise
_TEXT	SEGMENT
_val$ = 8						; size = 8
_set_counterclockwise PROC				; COMDAT

; 611  : {

	push	ebp
	mov	ebp, esp

; 612  :   counterclock[1][1] = counterclock[2][2] = cos(val);

	fld	QWORD PTR _val$[ebp]
	push	esi
	push	edi
	call	__CIcos
	mov	eax, DWORD PTR _counterclock
	mov	esi, DWORD PTR [eax+8]
	mov	edi, DWORD PTR [eax+4]
	fst	QWORD PTR [esi+16]
	fstp	QWORD PTR [edi+8]

; 613  :   counterclock[1][2] = -(counterclock[2][1] = sin(val));

	fld	QWORD PTR _val$[ebp]
	call	__CIsin
	fst	QWORD PTR [esi+8]
	fchs
	fstp	QWORD PTR [edi+16]
	pop	edi
	pop	esi

; 614  : }

	pop	ebp
	ret	0
_set_counterclockwise ENDP
_TEXT	ENDS
PUBLIC	_set_zoom
; Function compile flags: /Ogtp
;	COMDAT _set_zoom
_TEXT	SEGMENT
_val$ = 8						; size = 8
_set_zoom PROC						; COMDAT

; 618  : { zoom[0][0] = zoom[1][1] = val;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _zoom
	fld	QWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax]
	fst	QWORD PTR [ecx+8]
	fst	QWORD PTR [edx]

; 619  :   if ( web.sdim >= 3 ) 

	cmp	DWORD PTR _web+616, 3
	jl	SHORT $LN5@set_zoom

; 620  :      zoom[2][2] = val;

	mov	eax, DWORD PTR [eax+8]
	fstp	QWORD PTR [eax+16]

; 621  : }

	pop	ebp
	ret	0
$LN5@set_zoom:

; 620  :      zoom[2][2] = val;

	fstp	ST(0)

; 621  : }

	pop	ebp
	ret	0
_set_zoom ENDP
_TEXT	ENDS
PUBLIC	__real@bfd0000000000000
PUBLIC	__real@3fd0000000000000
PUBLIC	_reset_view
EXTRN	_HOMDIM:DWORD
;	COMDAT __real@bfd0000000000000
CONST	SEGMENT
__real@bfd0000000000000 DQ 0bfd0000000000000r	; -0.25
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _reset_view
_TEXT	SEGMENT
_reset_view PROC					; COMDAT

; 632  :   HOMDIM = web.sdim + 1;

	mov	eax, DWORD PTR _web+616

; 633  :   matcopy(transleft,identmat,HOMDIM,HOMDIM);

	mov	ecx, DWORD PTR _transleft
	inc	eax
	push	eax
	push	eax
	mov	DWORD PTR _HOMDIM, eax
	mov	eax, DWORD PTR _identmat
	push	eax
	push	ecx
	call	_matcopy

; 634  :   matcopy(transdown,identmat,HOMDIM,HOMDIM);

	mov	eax, DWORD PTR _HOMDIM
	mov	edx, DWORD PTR _identmat
	push	eax
	push	eax
	mov	eax, DWORD PTR _transdown
	push	edx
	push	eax
	call	_matcopy

; 635  :   matcopy(transright,identmat,HOMDIM,HOMDIM);

	mov	eax, DWORD PTR _HOMDIM
	mov	ecx, DWORD PTR _identmat
	mov	edx, DWORD PTR _transright
	push	eax
	push	eax
	push	ecx
	push	edx
	call	_matcopy

; 636  :   matcopy(transup,identmat,HOMDIM,HOMDIM);

	mov	eax, DWORD PTR _HOMDIM
	mov	ecx, DWORD PTR _transup
	push	eax
	push	eax
	mov	eax, DWORD PTR _identmat
	push	eax
	push	ecx
	call	_matcopy

; 637  :   
; 638  :   if ( SDIM > 2 )
; 639  :   {
; 640  :      transright[1][HOMDIM-1] = .25;

	fld	QWORD PTR __real@3fd0000000000000
	mov	edx, DWORD PTR _transright
	mov	ecx, DWORD PTR _HOMDIM
	add	esp, 64					; 00000040H
	cmp	DWORD PTR _web+616, 2
	jle	SHORT $LN2@reset_view
	mov	eax, DWORD PTR [edx+4]

; 641  :      transleft[1][HOMDIM-1] = -.25;

	mov	edx, DWORD PTR _transleft
	fst	QWORD PTR [eax+ecx*8-8]
	mov	eax, DWORD PTR [edx+4]
	fld	QWORD PTR __real@bfd0000000000000
	mov	ecx, DWORD PTR _HOMDIM

; 642  :      transup[2][HOMDIM-1] = .25;

	mov	edx, DWORD PTR _transup
	fst	QWORD PTR [eax+ecx*8-8]
	mov	eax, DWORD PTR [edx+8]
	fxch	ST(1)
	mov	ecx, DWORD PTR _HOMDIM

; 643  :      transdown[2][HOMDIM-1] = -.25;

	mov	edx, DWORD PTR _transdown
	fstp	QWORD PTR [eax+ecx*8-8]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _HOMDIM
	fstp	QWORD PTR [eax+ecx*8-8]

; 653  :   }
; 654  : } // end reset_view()

	ret	0
$LN2@reset_view:

; 644  :   }
; 645  :   else  /* show x-y plane */
; 646  :   {
; 647  :      transright[0][HOMDIM-1] = .25;

	mov	eax, DWORD PTR [edx]

; 648  :      transleft[0][HOMDIM-1] = -.25;

	mov	edx, DWORD PTR _transleft
	fst	QWORD PTR [eax+ecx*8-8]
	mov	eax, DWORD PTR [edx]
	fld	QWORD PTR __real@bfd0000000000000
	mov	ecx, DWORD PTR _HOMDIM

; 649  :      transup[1][HOMDIM-1] = .25;

	mov	edx, DWORD PTR _transup
	fst	QWORD PTR [eax+ecx*8-8]
	mov	eax, DWORD PTR [edx+4]
	fxch	ST(1)
	mov	ecx, DWORD PTR _HOMDIM

; 650  :      transdown[1][HOMDIM-1] = -.25;

	mov	edx, DWORD PTR _transdown
	fstp	QWORD PTR [eax+ecx*8-8]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _HOMDIM

; 651  :      shrink[2][2] = 1.0;

	mov	edx, DWORD PTR _shrink
	fstp	QWORD PTR [eax+ecx*8-8]
	fld1
	mov	eax, DWORD PTR [edx+8]

; 652  :      zoom[2][2] = 1.0;

	mov	ecx, DWORD PTR _zoom
	fst	QWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+8]
	fstp	QWORD PTR [edx+16]

; 653  :   }
; 654  : } // end reset_view()

	ret	0
_reset_view ENDP
_TEXT	ENDS
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@c000000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	??_C@_0CH@HKEOOABC@View?5transform?5matrix?5?$CFd?5is?5sing@ ; `string'
PUBLIC	__real@3d719799812dea11
PUBLIC	__real@46293e5939a08cea
PUBLIC	__real@c6293e5939a08cea
PUBLIC	__real@0000000000000000
PUBLIC	__$ArrayPad$
PUBLIC	_resize
EXTRN	_thickness:QWORD
EXTRN	_overall_size:QWORD
EXTRN	_user_thickness_flag:DWORD
EXTRN	_slice_coeff:BYTE
EXTRN	_clip_coeff:BYTE
EXTRN	_sprintf:PROC
EXTRN	_errmsg:BYTE
EXTRN	_sym_wrap:DWORD
EXTRN	_matvec_mul:PROC
EXTRN	_view_transforms:DWORD
EXTRN	_transform_count:DWORD
EXTRN	_transforms_flag:DWORD
_BSS	SEGMENT
_mid	DQ	06H DUP (?)
_low	DQ	06H DUP (?)
_high	DQ	06H DUP (?)
_BSS	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@c000000000000000
CONST	SEGMENT
__real@c000000000000000 DQ 0c000000000000000r	; -2
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT ??_C@_0CH@HKEOOABC@View?5transform?5matrix?5?$CFd?5is?5sing@
CONST	SEGMENT
??_C@_0CH@HKEOOABC@View?5transform?5matrix?5?$CFd?5is?5sing@ DB 'View tra'
	DB	'nsform matrix %d is singular.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT __real@3d719799812dea11
CONST	SEGMENT
__real@3d719799812dea11 DQ 03d719799812dea11r	; 1e-012
CONST	ENDS
;	COMDAT __real@46293e5939a08cea
CONST	SEGMENT
__real@46293e5939a08cea DQ 046293e5939a08cear	; 1e+030
CONST	ENDS
;	COMDAT __real@c6293e5939a08cea
CONST	SEGMENT
__real@c6293e5939a08cea DQ 0c6293e5939a08cear	; -1e+030
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\grapher.c
CONST	ENDS
;	COMDAT _resize
_TEXT	SEGMENT
tv5855 = -192						; size = 4
_size$ = -188						; size = 8
tv5857 = -184						; size = 4
tv3310 = -184						; size = 4
tv3142 = -180						; size = 4
tv2779 = -180						; size = 4
tv3132 = -176						; size = 4
_j$ = -176						; size = 4
_y$89387 = -172						; size = 56
_y$89333 = -172						; size = 56
_newx$89357 = -116					; size = 56
_x$89286 = -116						; size = 56
_newx$89395 = -60					; size = 56
_x$89332 = -60						; size = 56
_newx$89310 = -60					; size = 56
_newx$89297 = -60					; size = 56
__$ArrayPad$ = -4					; size = 4
_resize	PROC						; COMDAT

; 666  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 667  :   int i,j,k;
; 668  :   vertex_id v_id;
; 669  :   REAL size;
; 670  : 
; 671  :   /* if domain is torus, get torus fundamental cell in view */
; 672  :   if ( web.torus_flag )

	cmp	DWORD PTR _web+860, 0
	fldz
	push	ebx

; 673  :   {
; 674  :     for ( i = 0 ; i < SDIM ; i++ )  /* coordinate loop */

	mov	ebx, DWORD PTR _web+616
	push	esi
	push	edi
	je	$LN277@resize
	mov	edx, DWORD PTR _web+1608
	xor	esi, esi
	test	ebx, ebx
	jle	$LN311@resize
$LN112@resize:

; 675  :     {
; 676  :       low[i] = high[i] = 0.0;

	fst	QWORD PTR _high[esi*8]

; 677  :       for ( j = 0 ; j < SDIM ; j++ ) /* axis loop */

	mov	DWORD PTR _j$[ebp], 0
	fst	QWORD PTR _low[esi*8]
	cmp	ebx, 4
	jl	$LC177@resize

; 675  :     {
; 676  :       low[i] = high[i] = 0.0;

	lea	eax, DWORD PTR [ebx-4]
	shr	eax, 2
	inc	eax
	mov	DWORD PTR tv2779[ebp], eax
	add	eax, eax
	add	eax, eax
	lea	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR _j$[ebp], eax

; 677  :       for ( j = 0 ; j < SDIM ; j++ ) /* axis loop */

$LN186@resize:

; 678  :       if ( web.torus_period[j][i] < 0.0 ) low[i] += web.torus_period[j][i];

	mov	eax, DWORD PTR [ecx-8]
	fcom	QWORD PTR [eax+esi*8]
	lea	edi, DWORD PTR [eax+esi*8]
	fnstsw	ax
	fld	QWORD PTR [edi]
	test	ah, 65					; 00000041H
	jne	SHORT $LN178@resize
	fadd	QWORD PTR _low[esi*8]
	fstp	QWORD PTR _low[esi*8]
	jmp	SHORT $LN179@resize
$LN178@resize:

; 679  :       else high[i] += web.torus_period[j][i];

	fadd	QWORD PTR _high[esi*8]
	fstp	QWORD PTR _high[esi*8]
$LN179@resize:

; 678  :       if ( web.torus_period[j][i] < 0.0 ) low[i] += web.torus_period[j][i];

	mov	eax, DWORD PTR [ecx-4]
	fcom	QWORD PTR [eax+esi*8]
	lea	edi, DWORD PTR [eax+esi*8]
	fnstsw	ax
	fld	QWORD PTR [edi]
	test	ah, 65					; 00000041H
	jne	SHORT $LN180@resize
	fadd	QWORD PTR _low[esi*8]
	fstp	QWORD PTR _low[esi*8]
	jmp	SHORT $LN181@resize
$LN180@resize:

; 679  :       else high[i] += web.torus_period[j][i];

	fadd	QWORD PTR _high[esi*8]
	fstp	QWORD PTR _high[esi*8]
$LN181@resize:

; 678  :       if ( web.torus_period[j][i] < 0.0 ) low[i] += web.torus_period[j][i];

	mov	eax, DWORD PTR [ecx]
	fcom	QWORD PTR [eax+esi*8]
	lea	edi, DWORD PTR [eax+esi*8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN182@resize
	fld	QWORD PTR _low[esi*8]
	fadd	QWORD PTR [edi]
	fstp	QWORD PTR _low[esi*8]
	jmp	SHORT $LN183@resize
$LN182@resize:

; 679  :       else high[i] += web.torus_period[j][i];

	fld	QWORD PTR _high[esi*8]
	fadd	QWORD PTR [edi]
	fstp	QWORD PTR _high[esi*8]
$LN183@resize:

; 678  :       if ( web.torus_period[j][i] < 0.0 ) low[i] += web.torus_period[j][i];

	mov	eax, DWORD PTR [ecx+4]
	fcom	QWORD PTR [eax+esi*8]
	lea	edi, DWORD PTR [eax+esi*8]
	fnstsw	ax
	fld	QWORD PTR [edi]
	test	ah, 65					; 00000041H
	jne	SHORT $LN184@resize
	fadd	QWORD PTR _low[esi*8]
	fstp	QWORD PTR _low[esi*8]
	jmp	SHORT $LN185@resize
$LN184@resize:

; 679  :       else high[i] += web.torus_period[j][i];

	fadd	QWORD PTR _high[esi*8]
	fstp	QWORD PTR _high[esi*8]
$LN185@resize:

; 675  :     {
; 676  :       low[i] = high[i] = 0.0;

	add	ecx, 16					; 00000010H
	dec	DWORD PTR tv2779[ebp]
	jne	$LN186@resize
$LC177@resize:

; 677  :       for ( j = 0 ; j < SDIM ; j++ ) /* axis loop */

	cmp	DWORD PTR _j$[ebp], ebx
	jge	SHORT $LN111@resize
	mov	edi, DWORD PTR _j$[ebp]
$LC109@resize:

; 673  :   {
; 674  :     for ( i = 0 ; i < SDIM ; i++ )  /* coordinate loop */

	mov	ecx, DWORD PTR [edx+edi*4]

; 678  :       if ( web.torus_period[j][i] < 0.0 ) low[i] += web.torus_period[j][i];

	fcom	QWORD PTR [ecx+esi*8]
	lea	ecx, DWORD PTR [ecx+esi*8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN106@resize
	fld	QWORD PTR _low[esi*8]
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR _low[esi*8]
	jmp	SHORT $LN108@resize
$LN106@resize:

; 679  :       else high[i] += web.torus_period[j][i];

	fld	QWORD PTR _high[esi*8]
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR _high[esi*8]
$LN108@resize:

; 677  :       for ( j = 0 ; j < SDIM ; j++ ) /* axis loop */

	inc	edi
	cmp	edi, ebx
	jl	SHORT $LC109@resize
$LN111@resize:

; 673  :   {
; 674  :     for ( i = 0 ; i < SDIM ; i++ )  /* coordinate loop */

	inc	esi
	cmp	esi, ebx
	jl	$LN112@resize
$LN311@resize:

; 680  :     }
; 681  :     if ( transforms_flag )

	cmp	DWORD PTR _transforms_flag, 0
	fstp	ST(0)
	je	$LN38@resize

; 682  :     { REAL x[MAXCOORD+1];
; 683  :       for ( j = 0 ; j < SDIM ; j++ )

	mov	DWORD PTR _j$[ebp], 0
	test	ebx, ebx
	jle	$LN89@resize
$LL265@resize:

; 684  :       { 
; 685  :         for ( i = 0 ; i < SDIM ; i++ ) x[i] = web.torus_period[j][i];

	xor	eax, eax
	cmp	ebx, 4
	jl	SHORT $LC188@resize
	lea	ecx, DWORD PTR _x$89286[ebp+8]
	mov	esi, 16					; 00000010H
	mov	edi, 24					; 00000018H
	sub	esi, ecx
	sub	edi, ecx
	npad	3
$LL267@resize:
	mov	ebx, DWORD PTR _j$[ebp]
	mov	ebx, DWORD PTR [edx+ebx*4]
	fld	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR _j$[ebp]
	fstp	QWORD PTR _x$89286[ebp+eax*8]
	mov	ebx, DWORD PTR [edx+ebx*4]
	fld	QWORD PTR [ebx+eax*8+8]
	mov	ebx, DWORD PTR _j$[ebp]
	lea	ecx, DWORD PTR _x$89286[ebp+eax*8+8]
	fstp	QWORD PTR [ecx]
	mov	ebx, DWORD PTR [edx+ebx*4]
	add	ebx, ecx
	fld	QWORD PTR [ebx+esi]
	mov	ebx, DWORD PTR _j$[ebp]
	fstp	QWORD PTR [ecx+8]
	mov	ebx, DWORD PTR [edx+ebx*4]
	add	ebx, ecx
	fld	QWORD PTR [ebx+edi]
	mov	ebx, DWORD PTR _web+616
	fstp	QWORD PTR [ecx+16]
	add	eax, 4
	lea	ecx, DWORD PTR [ebx-3]
	cmp	eax, ecx
	jl	SHORT $LL267@resize
$LC188@resize:
	mov	edi, DWORD PTR _j$[ebp]
	cmp	eax, ebx
	jge	SHORT $LN187@resize
	npad	1
$LC100@resize:
	mov	ecx, DWORD PTR [edx+edi*4]
	fld	QWORD PTR [ecx+eax*8]
	inc	eax
	fstp	QWORD PTR _x$89286[ebp+eax*8-8]
	cmp	eax, ebx
	jl	SHORT $LC100@resize
$LN187@resize:

; 686  :         x[SDIM] = 1.0;

	fld1

; 687  :         for ( k = 0 ; k < transform_count ; k++ )

	xor	esi, esi
	fstp	QWORD PTR _x$89286[ebp+ebx*8]
	cmp	DWORD PTR _transform_count, esi
	jle	$LN102@resize
$LL97@resize:

; 688  :         { REAL xx,newx[MAXCOORD+1];
; 689  :           matvec_mul(view_transforms[k],x,newx,SDIM+1,SDIM+1);

	mov	ecx, DWORD PTR _view_transforms
	lea	eax, DWORD PTR [ebx+1]
	push	eax
	push	eax
	lea	edx, DWORD PTR _newx$89297[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+esi*4]
	lea	eax, DWORD PTR _x$89286[ebp]
	push	eax
	push	edx
	call	_matvec_mul

; 690  :           for ( i = 0 ; i < SDIM ; i++ )

	mov	ebx, DWORD PTR _web+616
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	cmp	ebx, 4
	jl	$LC191@resize
	lea	edx, DWORD PTR [ebx-3]
	npad	10
$LL200@resize:

; 691  :           { xx = newx[i]/newx[SDIM];  /* project */

	fld	QWORD PTR _newx$89297[ebp+ecx*8]
	fdiv	QWORD PTR _newx$89297[ebp+ebx*8]

; 692  :             if ( xx < low[i] ) low[i] = xx;

	fcom	QWORD PTR _low[ecx*8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN192@resize
	fst	QWORD PTR _low[ecx*8]
$LN192@resize:

; 693  :             if ( xx > high[i] ) high[i] = xx;

	fcom	QWORD PTR _high[ecx*8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN316@resize
	fstp	QWORD PTR _high[ecx*8]
	jmp	SHORT $LN193@resize
$LN316@resize:
	fstp	ST(0)
$LN193@resize:

; 691  :           { xx = newx[i]/newx[SDIM];  /* project */

	fld	QWORD PTR _newx$89297[ebp+ecx*8+8]
	fdiv	QWORD PTR _newx$89297[ebp+ebx*8]

; 692  :             if ( xx < low[i] ) low[i] = xx;

	fcom	QWORD PTR _low[ecx*8+8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN194@resize
	fst	QWORD PTR _low[ecx*8+8]
$LN194@resize:

; 693  :             if ( xx > high[i] ) high[i] = xx;

	fcom	QWORD PTR _high[ecx*8+8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN322@resize
	fstp	QWORD PTR _high[ecx*8+8]
	jmp	SHORT $LN195@resize
$LN322@resize:
	fstp	ST(0)
$LN195@resize:

; 691  :           { xx = newx[i]/newx[SDIM];  /* project */

	fld	QWORD PTR _newx$89297[ebp+ecx*8+16]
	fdiv	QWORD PTR _newx$89297[ebp+ebx*8]

; 692  :             if ( xx < low[i] ) low[i] = xx;

	fcom	QWORD PTR _low[ecx*8+16]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN196@resize
	fst	QWORD PTR _low[ecx*8+16]
$LN196@resize:

; 693  :             if ( xx > high[i] ) high[i] = xx;

	fcom	QWORD PTR _high[ecx*8+16]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN328@resize
	fstp	QWORD PTR _high[ecx*8+16]
	jmp	SHORT $LN197@resize
$LN328@resize:
	fstp	ST(0)
$LN197@resize:

; 691  :           { xx = newx[i]/newx[SDIM];  /* project */

	fld	QWORD PTR _newx$89297[ebp+ecx*8+24]
	fdiv	QWORD PTR _newx$89297[ebp+ebx*8]

; 692  :             if ( xx < low[i] ) low[i] = xx;

	fcom	QWORD PTR _low[ecx*8+24]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN198@resize
	fst	QWORD PTR _low[ecx*8+24]
$LN198@resize:

; 693  :             if ( xx > high[i] ) high[i] = xx;

	fcom	QWORD PTR _high[ecx*8+24]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN334@resize
	fstp	QWORD PTR _high[ecx*8+24]
	jmp	SHORT $LN199@resize
$LN334@resize:
	fstp	ST(0)
$LN199@resize:
	add	ecx, 4
	cmp	ecx, edx
	jl	$LL200@resize
$LC191@resize:

; 690  :           for ( i = 0 ; i < SDIM ; i++ )

	cmp	ecx, ebx
	jge	SHORT $LN96@resize
	npad	9
$LC94@resize:

; 691  :           { xx = newx[i]/newx[SDIM];  /* project */

	fld	QWORD PTR _newx$89297[ebp+ecx*8]
	fdiv	QWORD PTR _newx$89297[ebp+ebx*8]

; 692  :             if ( xx < low[i] ) low[i] = xx;

	fcom	QWORD PTR _low[ecx*8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN91@resize
	fst	QWORD PTR _low[ecx*8]
$LN91@resize:

; 693  :             if ( xx > high[i] ) high[i] = xx;

	fcom	QWORD PTR _high[ecx*8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN340@resize
	fstp	QWORD PTR _high[ecx*8]
	jmp	SHORT $LN93@resize
$LN340@resize:
	fstp	ST(0)
$LN93@resize:
	inc	ecx

; 690  :           for ( i = 0 ; i < SDIM ; i++ )

	cmp	ecx, ebx
	jl	SHORT $LC94@resize
$LN96@resize:

; 687  :         for ( k = 0 ; k < transform_count ; k++ )

	inc	esi
	cmp	esi, DWORD PTR _transform_count
	jl	$LL97@resize
	mov	edx, DWORD PTR _web+1608
$LN102@resize:

; 682  :     { REAL x[MAXCOORD+1];
; 683  :       for ( j = 0 ; j < SDIM ; j++ )

	inc	edi
	mov	DWORD PTR _j$[ebp], edi
	cmp	edi, ebx
	jl	$LL265@resize

; 694  :           }
; 695  :         }
; 696  :       }
; 697  :       for ( i = 0 ; i < SDIM ; i++ ) x[i] = 0;

	test	ebx, ebx
	jle	SHORT $LN89@resize
	mov	ecx, ebx
	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	xor	eax, eax
	lea	edi, DWORD PTR _x$89286[ebp]
	rep stosd
$LN89@resize:

; 698  :       x[SDIM] = 1.0;

	fld1

; 699  :       for ( k = 0 ; k < transform_count ; k++ )

	xor	esi, esi
	fstp	QWORD PTR _x$89286[ebp+ebx*8]
	cmp	DWORD PTR _transform_count, esi
	jle	$LN38@resize
$LL86@resize:

; 700  :         { REAL xx,newx[MAXCOORD+1];
; 701  :           matvec_mul(view_transforms[k],x,newx,SDIM+1,SDIM+1);

	mov	edx, DWORD PTR _view_transforms
	inc	ebx
	push	ebx
	push	ebx
	lea	eax, DWORD PTR _newx$89310[ebp]
	push	eax
	mov	eax, DWORD PTR [edx+esi*4]
	lea	ecx, DWORD PTR _x$89286[ebp]
	push	ecx
	push	eax
	call	_matvec_mul

; 702  :           for ( i = 0 ; i < SDIM ; i++ )

	mov	ebx, DWORD PTR _web+616
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	cmp	ebx, 4
	jl	$LC202@resize
	lea	edx, DWORD PTR [ebx-3]
	npad	9
$LL211@resize:

; 703  :           { xx = newx[i]/newx[SDIM];  /* project */

	fld	QWORD PTR _newx$89310[ebp+ecx*8]
	fdiv	QWORD PTR _newx$89310[ebp+ebx*8]

; 704  :             if ( xx < low[i] ) low[i] = xx;

	fcom	QWORD PTR _low[ecx*8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN203@resize
	fst	QWORD PTR _low[ecx*8]
$LN203@resize:

; 705  :             if ( xx > high[i] ) high[i] = xx;

	fcom	QWORD PTR _high[ecx*8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN346@resize
	fstp	QWORD PTR _high[ecx*8]
	jmp	SHORT $LN204@resize
$LN346@resize:
	fstp	ST(0)
$LN204@resize:

; 703  :           { xx = newx[i]/newx[SDIM];  /* project */

	fld	QWORD PTR _newx$89310[ebp+ecx*8+8]
	fdiv	QWORD PTR _newx$89310[ebp+ebx*8]

; 704  :             if ( xx < low[i] ) low[i] = xx;

	fcom	QWORD PTR _low[ecx*8+8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN205@resize
	fst	QWORD PTR _low[ecx*8+8]
$LN205@resize:

; 705  :             if ( xx > high[i] ) high[i] = xx;

	fcom	QWORD PTR _high[ecx*8+8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN352@resize
	fstp	QWORD PTR _high[ecx*8+8]
	jmp	SHORT $LN206@resize
$LN352@resize:
	fstp	ST(0)
$LN206@resize:

; 703  :           { xx = newx[i]/newx[SDIM];  /* project */

	fld	QWORD PTR _newx$89310[ebp+ecx*8+16]
	fdiv	QWORD PTR _newx$89310[ebp+ebx*8]

; 704  :             if ( xx < low[i] ) low[i] = xx;

	fcom	QWORD PTR _low[ecx*8+16]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN207@resize
	fst	QWORD PTR _low[ecx*8+16]
$LN207@resize:

; 705  :             if ( xx > high[i] ) high[i] = xx;

	fcom	QWORD PTR _high[ecx*8+16]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN358@resize
	fstp	QWORD PTR _high[ecx*8+16]
	jmp	SHORT $LN208@resize
$LN358@resize:
	fstp	ST(0)
$LN208@resize:

; 703  :           { xx = newx[i]/newx[SDIM];  /* project */

	fld	QWORD PTR _newx$89310[ebp+ecx*8+24]
	fdiv	QWORD PTR _newx$89310[ebp+ebx*8]

; 704  :             if ( xx < low[i] ) low[i] = xx;

	fcom	QWORD PTR _low[ecx*8+24]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN209@resize
	fst	QWORD PTR _low[ecx*8+24]
$LN209@resize:

; 705  :             if ( xx > high[i] ) high[i] = xx;

	fcom	QWORD PTR _high[ecx*8+24]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN364@resize
	fstp	QWORD PTR _high[ecx*8+24]
	jmp	SHORT $LN210@resize
$LN364@resize:
	fstp	ST(0)
$LN210@resize:
	add	ecx, 4
	cmp	ecx, edx
	jl	$LL211@resize
$LC202@resize:

; 702  :           for ( i = 0 ; i < SDIM ; i++ )

	cmp	ecx, ebx
	jge	SHORT $LN85@resize
	npad	9
$LC83@resize:

; 703  :           { xx = newx[i]/newx[SDIM];  /* project */

	fld	QWORD PTR _newx$89310[ebp+ecx*8]
	fdiv	QWORD PTR _newx$89310[ebp+ebx*8]

; 704  :             if ( xx < low[i] ) low[i] = xx;

	fcom	QWORD PTR _low[ecx*8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN80@resize
	fst	QWORD PTR _low[ecx*8]
$LN80@resize:

; 705  :             if ( xx > high[i] ) high[i] = xx;

	fcom	QWORD PTR _high[ecx*8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN370@resize
	fstp	QWORD PTR _high[ecx*8]
	jmp	SHORT $LN82@resize
$LN370@resize:
	fstp	ST(0)
$LN82@resize:
	inc	ecx

; 702  :           for ( i = 0 ; i < SDIM ; i++ )

	cmp	ecx, ebx
	jl	SHORT $LC83@resize
$LN85@resize:

; 699  :       for ( k = 0 ; k < transform_count ; k++ )

	inc	esi
	cmp	esi, DWORD PTR _transform_count
	jl	$LL86@resize

; 706  :           }
; 707  :         }
; 708  :     }

	jmp	$LN38@resize
$LN277@resize:

; 709  :   }
; 710  :   else if ( web.symmetry_flag )

	cmp	DWORD PTR _web+856, 0
	fstp	ST(0)
	je	$LN77@resize

; 711  :   { edge_id e_id;
; 712  :     for ( i = 0 ; i < SDIM ; i++ )  /* initialize */

	test	ebx, ebx
	jle	SHORT $LN76@resize
	fld	QWORD PTR __real@c6293e5939a08cea
	lea	ecx, DWORD PTR [ebx*8-8]
	shr	ecx, 2
	fstp	QWORD PTR _high

; 713  :     { low[i] = 1e30;

	fld	QWORD PTR __real@46293e5939a08cea
	mov	esi, OFFSET _high
	mov	edi, OFFSET _high+8
	fstp	QWORD PTR _low
	rep movsd
	lea	ecx, DWORD PTR [ebx*8-8]
	shr	ecx, 2
	mov	esi, OFFSET _low
	mov	edi, OFFSET _low+8
	rep movsd
$LN76@resize:

; 714  :       high[i] = -1e30;
; 715  :     }
; 716  :     /* figure out how big window should be  */
; 717  :     FOR_ALL_EDGES(e_id)

	mov	ecx, DWORD PTR _web+160
	test	ecx, 268435456				; 10000000H
	je	$LN38@resize
	mov	edi, DWORD PTR _web+124
	npad	4
$LL73@resize:
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv3132[ebp], eax
	mov	eax, DWORD PTR [eax+edi]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	$LN72@resize

; 718  :     { REAL *t;
; 719  :       REAL x[MAXCOORD+1],y[MAXCOORD+1];
; 720  :       t = get_coord(get_edge_tailv(e_id));

	mov	esi, DWORD PTR _dymem
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR tv3142[ebp], ecx
	mov	ecx, DWORD PTR _web+216
	mov	edx, DWORD PTR [ecx+esi+304]
	je	SHORT $LN117@resize
	mov	eax, DWORD PTR _web+636
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR tv3132[ebp]
	mov	eax, DWORD PTR [edx+edi]
	mov	eax, DWORD PTR [ecx+eax]
	jmp	SHORT $LN116@resize
$LN117@resize:
	mov	eax, DWORD PTR tv3132[ebp]
	mov	ecx, DWORD PTR [eax+edi]
	mov	eax, DWORD PTR [edx+ecx]
$LN116@resize:
	mov	edx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR _web+104
	add	edx, DWORD PTR [eax+esi+64]

; 721  :       for ( i = 0 ; i < SDIM ; i++ ) x[i] = t[i];

	xor	ecx, ecx
	cmp	ebx, 4
	jl	SHORT $LN269@resize
	mov	edi, edx
	neg	edi
	lea	ebx, DWORD PTR _x$89332[ebp+edi]
	lea	edi, DWORD PTR _x$89332[ebp+edi+8]
	mov	DWORD PTR tv5855[ebp], ebx
	mov	ebx, DWORD PTR _web+616
	lea	eax, DWORD PTR [edx+16]
	mov	DWORD PTR tv5857[ebp], edi
	npad	10
$LL214@resize:
	fld	QWORD PTR [eax-16]
	mov	edi, DWORD PTR tv5855[ebp]
	fstp	QWORD PTR _x$89332[ebp+ecx*8]
	add	ecx, 4
	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	fstp	QWORD PTR _x$89332[ebp+ecx*8-24]
	fld	QWORD PTR [eax-32]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv5857[ebp]
	fld	QWORD PTR [eax-24]
	fstp	QWORD PTR [edi+eax-32]
	lea	edi, DWORD PTR [ebx-3]
	cmp	ecx, edi
	jl	SHORT $LL214@resize
	mov	edi, DWORD PTR _web+124
$LN269@resize:
	cmp	ecx, ebx
	jge	SHORT $LN212@resize
	lea	eax, DWORD PTR _x$89332[ebp]
	sub	edx, eax
$LC68@resize:
	lea	eax, DWORD PTR [edx+ecx*8]
	fld	QWORD PTR _x$89332[ebp+eax]
	inc	ecx
	fstp	QWORD PTR _x$89332[ebp+ecx*8-8]
	cmp	ecx, ebx
	jl	SHORT $LC68@resize
$LN212@resize:

; 722  :       (*sym_wrap)(get_coord(get_edge_headv(e_id)),y,get_edge_wrap(e_id));

	cmp	DWORD PTR tv3142[ebp], 0
	mov	ecx, DWORD PTR _web+216
	mov	eax, DWORD PTR tv3132[ebp]
	mov	edx, DWORD PTR [ecx+esi+784]
	mov	ecx, DWORD PTR [eax+edi]
	mov	eax, DWORD PTR [edx+ecx]
	je	SHORT $LN125@resize
	push	eax
	call	DWORD PTR _sym_inverse
	mov	edi, DWORD PTR _web+124
	mov	esi, DWORD PTR _dymem
	add	esp, 4
	cmp	DWORD PTR tv3142[ebp], 0
	je	SHORT $LN125@resize
	mov	edx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [edx+esi+304]
	mov	edx, DWORD PTR tv3132[ebp]
	mov	edx, DWORD PTR [edx+edi]
	mov	ecx, DWORD PTR [ecx+edx]
	jmp	SHORT $LN124@resize
$LN125@resize:
	mov	ecx, DWORD PTR _web+216
	mov	edx, DWORD PTR [ecx+esi+304]
	mov	ecx, DWORD PTR tv3132[ebp]
	add	edx, DWORD PTR [ecx+edi]
	mov	ecx, DWORD PTR _web+636
	mov	ecx, DWORD PTR [edx+ecx*4]
$LN124@resize:
	push	eax
	mov	eax, DWORD PTR _web+12
	lea	edx, DWORD PTR _y$89333[ebp]
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	edx, DWORD PTR _web+104
	add	ecx, DWORD PTR [edx+esi+64]
	push	ecx
	call	DWORD PTR _sym_wrap

; 723  :       x[SDIM] = y[SDIM] = 1.0; /* homogeneous coord */

	fld1
	mov	ebx, DWORD PTR _web+616
	fst	QWORD PTR _y$89333[ebp+ebx*8]
	add	esp, 12					; 0000000cH
	fstp	QWORD PTR _x$89332[ebp+ebx*8]

; 724  :       for ( i = 0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	test	ebx, ebx
	jle	$LN270@resize
	npad	10
$LL65@resize:

; 725  :       { if ( x[i] < low[i] ) low[i] = x[i];

	fld	QWORD PTR _low[ecx*8]
	fcomp	QWORD PTR _x$89332[ebp+ecx*8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN62@resize
	fld	QWORD PTR _x$89332[ebp+ecx*8]
	fstp	QWORD PTR _low[ecx*8]
$LN62@resize:

; 726  :         if ( x[i] > high[i] ) high[i] = x[i];

	fld	QWORD PTR _high[ecx*8]
	fcomp	QWORD PTR _x$89332[ebp+ecx*8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN61@resize
	fld	QWORD PTR _x$89332[ebp+ecx*8]
	fstp	QWORD PTR _high[ecx*8]
$LN61@resize:

; 727  :         if ( y[i] < low[i] ) low[i] = y[i];

	fld	QWORD PTR _low[ecx*8]
	fcomp	QWORD PTR _y$89333[ebp+ecx*8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN60@resize
	fld	QWORD PTR _y$89333[ebp+ecx*8]
	fstp	QWORD PTR _low[ecx*8]
$LN60@resize:

; 728  :         if ( y[i] > high[i] ) high[i] = y[i];

	fld	QWORD PTR _high[ecx*8]
	fcomp	QWORD PTR _y$89333[ebp+ecx*8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN64@resize
	fld	QWORD PTR _y$89333[ebp+ecx*8]
	fstp	QWORD PTR _high[ecx*8]
$LN64@resize:

; 724  :       for ( i = 0 ; i < SDIM ; i++ )

	inc	ecx
	cmp	ecx, ebx
	jl	$LL65@resize
$LN270@resize:

; 729  :       }
; 730  :       if ( transforms_flag )

	cmp	DWORD PTR _transforms_flag, 0
	je	$LN263@resize

; 731  :       for ( j = 0 ; j < transform_count ; j++ )

	xor	edi, edi
	cmp	DWORD PTR _transform_count, edi
	jle	$LN263@resize
$LL272@resize:

; 732  :       { REAL xx,newx[MAXCOORD+1];
; 733  :         matvec_mul(view_transforms[j],x,newx,SDIM+1,SDIM+1);

	mov	edx, DWORD PTR _view_transforms
	lea	eax, DWORD PTR [ebx+1]
	push	eax
	push	eax
	lea	eax, DWORD PTR _newx$89357[ebp]
	push	eax
	mov	eax, DWORD PTR [edx+edi*4]
	lea	ecx, DWORD PTR _x$89332[ebp]
	push	ecx
	push	eax
	call	_matvec_mul

; 734  :         for ( i = 0 ; i < SDIM ; i++ )

	mov	edx, DWORD PTR _web+616
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	cmp	edx, 4
	jl	$LC216@resize
	lea	esi, DWORD PTR [edx-3]
	npad	9
$LL225@resize:

; 735  :         { xx = newx[i]/newx[SDIM];  /* project */

	fld	QWORD PTR _newx$89357[ebp+ecx*8]
	fdiv	QWORD PTR _newx$89357[ebp+edx*8]

; 736  :           if ( xx < low[i] ) low[i] = xx;

	fcom	QWORD PTR _low[ecx*8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN217@resize
	fst	QWORD PTR _low[ecx*8]
$LN217@resize:

; 737  :           if ( xx > high[i] ) high[i] = xx;

	fcom	QWORD PTR _high[ecx*8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN376@resize
	fstp	QWORD PTR _high[ecx*8]
	jmp	SHORT $LN218@resize
$LN376@resize:
	fstp	ST(0)
$LN218@resize:

; 735  :         { xx = newx[i]/newx[SDIM];  /* project */

	fld	QWORD PTR _newx$89357[ebp+ecx*8+8]
	fdiv	QWORD PTR _newx$89357[ebp+edx*8]

; 736  :           if ( xx < low[i] ) low[i] = xx;

	fcom	QWORD PTR _low[ecx*8+8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN219@resize
	fst	QWORD PTR _low[ecx*8+8]
$LN219@resize:

; 737  :           if ( xx > high[i] ) high[i] = xx;

	fcom	QWORD PTR _high[ecx*8+8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN382@resize
	fstp	QWORD PTR _high[ecx*8+8]
	jmp	SHORT $LN220@resize
$LN382@resize:
	fstp	ST(0)
$LN220@resize:

; 735  :         { xx = newx[i]/newx[SDIM];  /* project */

	fld	QWORD PTR _newx$89357[ebp+ecx*8+16]
	fdiv	QWORD PTR _newx$89357[ebp+edx*8]

; 736  :           if ( xx < low[i] ) low[i] = xx;

	fcom	QWORD PTR _low[ecx*8+16]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN221@resize
	fst	QWORD PTR _low[ecx*8+16]
$LN221@resize:

; 737  :           if ( xx > high[i] ) high[i] = xx;

	fcom	QWORD PTR _high[ecx*8+16]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN388@resize
	fstp	QWORD PTR _high[ecx*8+16]
	jmp	SHORT $LN222@resize
$LN388@resize:
	fstp	ST(0)
$LN222@resize:

; 735  :         { xx = newx[i]/newx[SDIM];  /* project */

	fld	QWORD PTR _newx$89357[ebp+ecx*8+24]
	fdiv	QWORD PTR _newx$89357[ebp+edx*8]

; 736  :           if ( xx < low[i] ) low[i] = xx;

	fcom	QWORD PTR _low[ecx*8+24]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN223@resize
	fst	QWORD PTR _low[ecx*8+24]
$LN223@resize:

; 737  :           if ( xx > high[i] ) high[i] = xx;

	fcom	QWORD PTR _high[ecx*8+24]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN394@resize
	fstp	QWORD PTR _high[ecx*8+24]
	jmp	SHORT $LN224@resize
$LN394@resize:
	fstp	ST(0)
$LN224@resize:
	add	ecx, 4
	cmp	ecx, esi
	jl	$LL225@resize
$LC216@resize:

; 734  :         for ( i = 0 ; i < SDIM ; i++ )

	cmp	ecx, edx
	jge	SHORT $LN215@resize
	npad	9
$LC54@resize:

; 735  :         { xx = newx[i]/newx[SDIM];  /* project */

	fld	QWORD PTR _newx$89357[ebp+ecx*8]
	fdiv	QWORD PTR _newx$89357[ebp+edx*8]

; 736  :           if ( xx < low[i] ) low[i] = xx;

	fcom	QWORD PTR _low[ecx*8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN51@resize
	fst	QWORD PTR _low[ecx*8]
$LN51@resize:

; 737  :           if ( xx > high[i] ) high[i] = xx;

	fcom	QWORD PTR _high[ecx*8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN400@resize
	fstp	QWORD PTR _high[ecx*8]
	jmp	SHORT $LN53@resize
$LN400@resize:
	fstp	ST(0)
$LN53@resize:
	inc	ecx

; 734  :         for ( i = 0 ; i < SDIM ; i++ )

	cmp	ecx, edx
	jl	SHORT $LC54@resize
$LN215@resize:

; 738  :         }
; 739  :         matvec_mul(view_transforms[j],y,newx,SDIM+1,SDIM+1);

	lea	eax, DWORD PTR [edx+1]
	push	eax
	push	eax
	mov	eax, DWORD PTR _view_transforms
	lea	ecx, DWORD PTR _newx$89357[ebp]
	push	ecx
	mov	ecx, DWORD PTR [eax+edi*4]
	lea	edx, DWORD PTR _y$89333[ebp]
	push	edx
	push	ecx
	call	_matvec_mul

; 740  :         for ( i = 0 ; i < SDIM ; i++ )

	mov	ebx, DWORD PTR _web+616
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	cmp	ebx, 4
	jl	$LC227@resize
	lea	edx, DWORD PTR [ebx-3]
$LL236@resize:

; 741  :         { xx = newx[i]/newx[SDIM];  /* project */

	fld	QWORD PTR _newx$89357[ebp+ecx*8]
	fdiv	QWORD PTR _newx$89357[ebp+ebx*8]

; 742  :           if ( xx < low[i] ) low[i] = xx;

	fcom	QWORD PTR _low[ecx*8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN228@resize
	fst	QWORD PTR _low[ecx*8]
$LN228@resize:

; 743  :           if ( xx > high[i] ) high[i] = xx;

	fcom	QWORD PTR _high[ecx*8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN406@resize
	fstp	QWORD PTR _high[ecx*8]
	jmp	SHORT $LN229@resize
$LN406@resize:
	fstp	ST(0)
$LN229@resize:

; 741  :         { xx = newx[i]/newx[SDIM];  /* project */

	fld	QWORD PTR _newx$89357[ebp+ecx*8+8]
	fdiv	QWORD PTR _newx$89357[ebp+ebx*8]

; 742  :           if ( xx < low[i] ) low[i] = xx;

	fcom	QWORD PTR _low[ecx*8+8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN230@resize
	fst	QWORD PTR _low[ecx*8+8]
$LN230@resize:

; 743  :           if ( xx > high[i] ) high[i] = xx;

	fcom	QWORD PTR _high[ecx*8+8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN412@resize
	fstp	QWORD PTR _high[ecx*8+8]
	jmp	SHORT $LN231@resize
$LN412@resize:
	fstp	ST(0)
$LN231@resize:

; 741  :         { xx = newx[i]/newx[SDIM];  /* project */

	fld	QWORD PTR _newx$89357[ebp+ecx*8+16]
	fdiv	QWORD PTR _newx$89357[ebp+ebx*8]

; 742  :           if ( xx < low[i] ) low[i] = xx;

	fcom	QWORD PTR _low[ecx*8+16]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN232@resize
	fst	QWORD PTR _low[ecx*8+16]
$LN232@resize:

; 743  :           if ( xx > high[i] ) high[i] = xx;

	fcom	QWORD PTR _high[ecx*8+16]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN418@resize
	fstp	QWORD PTR _high[ecx*8+16]
	jmp	SHORT $LN233@resize
$LN418@resize:
	fstp	ST(0)
$LN233@resize:

; 741  :         { xx = newx[i]/newx[SDIM];  /* project */

	fld	QWORD PTR _newx$89357[ebp+ecx*8+24]
	fdiv	QWORD PTR _newx$89357[ebp+ebx*8]

; 742  :           if ( xx < low[i] ) low[i] = xx;

	fcom	QWORD PTR _low[ecx*8+24]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN234@resize
	fst	QWORD PTR _low[ecx*8+24]
$LN234@resize:

; 743  :           if ( xx > high[i] ) high[i] = xx;

	fcom	QWORD PTR _high[ecx*8+24]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN424@resize
	fstp	QWORD PTR _high[ecx*8+24]
	jmp	SHORT $LN235@resize
$LN424@resize:
	fstp	ST(0)
$LN235@resize:
	add	ecx, 4
	cmp	ecx, edx
	jl	$LL236@resize
$LC227@resize:

; 740  :         for ( i = 0 ; i < SDIM ; i++ )

	cmp	ecx, ebx
	jge	SHORT $LN56@resize
	npad	9
$LC49@resize:

; 741  :         { xx = newx[i]/newx[SDIM];  /* project */

	fld	QWORD PTR _newx$89357[ebp+ecx*8]
	fdiv	QWORD PTR _newx$89357[ebp+ebx*8]

; 742  :           if ( xx < low[i] ) low[i] = xx;

	fcom	QWORD PTR _low[ecx*8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN46@resize
	fst	QWORD PTR _low[ecx*8]
$LN46@resize:

; 743  :           if ( xx > high[i] ) high[i] = xx;

	fcom	QWORD PTR _high[ecx*8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN430@resize
	fstp	QWORD PTR _high[ecx*8]
	jmp	SHORT $LN48@resize
$LN430@resize:
	fstp	ST(0)
$LN48@resize:
	inc	ecx

; 740  :         for ( i = 0 ; i < SDIM ; i++ )

	cmp	ecx, ebx
	jl	SHORT $LC49@resize
$LN56@resize:

; 731  :       for ( j = 0 ; j < transform_count ; j++ )

	inc	edi
	cmp	edi, DWORD PTR _transform_count
	jl	$LL272@resize
$LN263@resize:
	mov	edi, DWORD PTR _web+124
$LN72@resize:

; 714  :       high[i] = -1e30;
; 715  :     }
; 716  :     /* figure out how big window should be  */
; 717  :     FOR_ALL_EDGES(e_id)

	mov	edx, DWORD PTR tv3132[ebp]
	mov	eax, DWORD PTR [edx+edi]
	mov	ecx, DWORD PTR [eax]
	test	ecx, 268435456				; 10000000H
	jne	$LL73@resize

; 748  :   else

	jmp	$LN38@resize
$LN77@resize:

; 749  :   {  
; 750  :     for ( i = 0 ; i < SDIM ; i++ )  /* initialize */

	test	ebx, ebx
	jle	SHORT $LN43@resize
	fld	QWORD PTR __real@c6293e5939a08cea
	lea	ecx, DWORD PTR [ebx*8-8]
	shr	ecx, 2
	fstp	QWORD PTR _high

; 751  :     { low[i] = 1e30;

	fld	QWORD PTR __real@46293e5939a08cea
	mov	esi, OFFSET _high
	mov	edi, OFFSET _high+8
	fstp	QWORD PTR _low
	rep movsd
	lea	ecx, DWORD PTR [ebx*8-8]
	shr	ecx, 2
	mov	esi, OFFSET _low
	mov	edi, OFFSET _low+8
	rep movsd
$LN43@resize:

; 752  :       high[i] = -1e30;
; 753  :     }
; 754  :     /* figure out how big window should be  */
; 755  :          
; 756  :     FOR_ALL_VERTICES(v_id)

	mov	eax, DWORD PTR _web+48
	test	eax, 268435456				; 10000000H
	je	$LN38@resize
$LL266@resize:
	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR tv3310[ebp], eax
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	$LN39@resize

; 757  :     { REAL *x = get_coord(v_id);

	mov	eax, DWORD PTR _web+104
	mov	edx, DWORD PTR _dymem
	mov	esi, DWORD PTR [eax+edx+64]

; 758  :       if ( transform_count && transforms_flag )

	mov	eax, DWORD PTR _transform_count
	add	esi, ecx
	test	eax, eax
	je	$LN35@resize
	cmp	DWORD PTR _transforms_flag, 0
	je	$LN35@resize

; 759  :       { REAL y[MAXCOORD+1];
; 760  :         for ( i = 0 ; i < SDIM ; i++ ) y[i] = x[i];

	test	ebx, ebx
	jle	SHORT $LN34@resize

; 744  :         }
; 745  :       } 
; 746  :     }
; 747  :   }

	mov	ecx, ebx
	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	lea	edi, DWORD PTR _y$89387[ebp]
	rep movsd
$LN34@resize:

; 761  :         y[SDIM] = 1.0; /* homogeneous coord */

	fld1

; 762  :         for ( j = 0 ; j < transform_count ; j++ )

	xor	esi, esi
	fstp	QWORD PTR _y$89387[ebp+ebx*8]
	test	eax, eax
	jle	$LN39@resize
	npad	2
$LL31@resize:

; 763  :         { REAL xx,newx[MAXCOORD+1];
; 764  :           matvec_mul(view_transforms[j],y,newx,SDIM+1,SDIM+1);

	mov	eax, DWORD PTR _view_transforms
	inc	ebx
	push	ebx
	push	ebx
	lea	ecx, DWORD PTR _newx$89395[ebp]
	push	ecx
	mov	ecx, DWORD PTR [eax+esi*4]
	lea	edx, DWORD PTR _y$89387[ebp]
	push	edx
	push	ecx
	call	_matvec_mul

; 765  :           if ( fabs(newx[SDIM]) < 1e-12 )

	mov	ebx, DWORD PTR _web+616
	fld	QWORD PTR _newx$89395[ebp+ebx*8]
	add	esp, 20					; 00000014H
	fabs
	fcomp	QWORD PTR __real@3d719799812dea11
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN28@resize

; 766  :           { sprintf(errmsg,"View transform matrix %d is singular.\n",j+1);

	lea	edx, DWORD PTR [esi+1]
	push	edx
	push	OFFSET ??_C@_0CH@HKEOOABC@View?5transform?5matrix?5?$CFd?5is?5sing@
	push	OFFSET _errmsg
	call	_sprintf

; 767  :             kb_error(1045,errmsg,WARNING);

	push	2
	push	OFFSET _errmsg
	push	1045					; 00000415H
	call	_kb_error

; 768  :           }
; 769  :           else      

	mov	ebx, DWORD PTR _web+616
	add	esp, 24					; 00000018H
	jmp	$LN30@resize
$LN28@resize:

; 770  :             for ( i = 0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	cmp	ebx, 4
	jl	$LC238@resize
	lea	edx, DWORD PTR [ebx-3]
	npad	8
$LL247@resize:

; 771  :             { xx = newx[i]/newx[SDIM];;

	fld	QWORD PTR _newx$89395[ebp+ecx*8]
	fdiv	QWORD PTR _newx$89395[ebp+ebx*8]

; 772  :               if ( xx < low[i] ) low[i] = xx;

	fcom	QWORD PTR _low[ecx*8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN239@resize
	fst	QWORD PTR _low[ecx*8]
$LN239@resize:

; 773  :               if ( xx > high[i] ) high[i] = xx;

	fcom	QWORD PTR _high[ecx*8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN436@resize
	fstp	QWORD PTR _high[ecx*8]
	jmp	SHORT $LN240@resize
$LN436@resize:
	fstp	ST(0)
$LN240@resize:

; 771  :             { xx = newx[i]/newx[SDIM];;

	fld	QWORD PTR _newx$89395[ebp+ecx*8+8]
	fdiv	QWORD PTR _newx$89395[ebp+ebx*8]

; 772  :               if ( xx < low[i] ) low[i] = xx;

	fcom	QWORD PTR _low[ecx*8+8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN241@resize
	fst	QWORD PTR _low[ecx*8+8]
$LN241@resize:

; 773  :               if ( xx > high[i] ) high[i] = xx;

	fcom	QWORD PTR _high[ecx*8+8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN442@resize
	fstp	QWORD PTR _high[ecx*8+8]
	jmp	SHORT $LN242@resize
$LN442@resize:
	fstp	ST(0)
$LN242@resize:

; 771  :             { xx = newx[i]/newx[SDIM];;

	fld	QWORD PTR _newx$89395[ebp+ecx*8+16]
	fdiv	QWORD PTR _newx$89395[ebp+ebx*8]

; 772  :               if ( xx < low[i] ) low[i] = xx;

	fcom	QWORD PTR _low[ecx*8+16]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN243@resize
	fst	QWORD PTR _low[ecx*8+16]
$LN243@resize:

; 773  :               if ( xx > high[i] ) high[i] = xx;

	fcom	QWORD PTR _high[ecx*8+16]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN448@resize
	fstp	QWORD PTR _high[ecx*8+16]
	jmp	SHORT $LN244@resize
$LN448@resize:
	fstp	ST(0)
$LN244@resize:

; 771  :             { xx = newx[i]/newx[SDIM];;

	fld	QWORD PTR _newx$89395[ebp+ecx*8+24]
	fdiv	QWORD PTR _newx$89395[ebp+ebx*8]

; 772  :               if ( xx < low[i] ) low[i] = xx;

	fcom	QWORD PTR _low[ecx*8+24]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN245@resize
	fst	QWORD PTR _low[ecx*8+24]
$LN245@resize:

; 773  :               if ( xx > high[i] ) high[i] = xx;

	fcom	QWORD PTR _high[ecx*8+24]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN454@resize
	fstp	QWORD PTR _high[ecx*8+24]
	jmp	SHORT $LN246@resize
$LN454@resize:
	fstp	ST(0)
$LN246@resize:
	add	ecx, 4
	cmp	ecx, edx
	jl	$LL247@resize
$LC238@resize:

; 770  :             for ( i = 0 ; i < SDIM ; i++ )

	cmp	ecx, ebx
	jge	SHORT $LN30@resize
	npad	9
$LC26@resize:

; 771  :             { xx = newx[i]/newx[SDIM];;

	fld	QWORD PTR _newx$89395[ebp+ecx*8]
	fdiv	QWORD PTR _newx$89395[ebp+ebx*8]

; 772  :               if ( xx < low[i] ) low[i] = xx;

	fcom	QWORD PTR _low[ecx*8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN23@resize
	fst	QWORD PTR _low[ecx*8]
$LN23@resize:

; 773  :               if ( xx > high[i] ) high[i] = xx;

	fcom	QWORD PTR _high[ecx*8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN460@resize
	fstp	QWORD PTR _high[ecx*8]
	jmp	SHORT $LN25@resize
$LN460@resize:
	fstp	ST(0)
$LN25@resize:
	inc	ecx

; 770  :             for ( i = 0 ; i < SDIM ; i++ )

	cmp	ecx, ebx
	jl	SHORT $LC26@resize
$LN30@resize:

; 762  :         for ( j = 0 ; j < transform_count ; j++ )

	inc	esi
	cmp	esi, DWORD PTR _transform_count
	jl	$LL31@resize

; 774  :             }
; 775  :         } 
; 776  :       } /* end transforms */
; 777  :       else /* just plain vertices */

	jmp	$LN39@resize
$LN35@resize:

; 778  :         for ( i = 0 ; i < SDIM ; i++ )

	xor	edx, edx
	cmp	ebx, 4
	jl	$LC249@resize
	mov	edi, esi
	lea	ecx, DWORD PTR [esi+16]
	neg	edi
	npad	1
$LL258@resize:

; 779  :         { if ( x[i] < low[i] ) low[i] = x[i];

	fld	QWORD PTR _low[edx*8]
	fcomp	QWORD PTR [ecx-16]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN250@resize
	fld	QWORD PTR [ecx-16]
	fstp	QWORD PTR _low[edx*8]
$LN250@resize:

; 780  :           if ( x[i] > high[i] ) high[i] = x[i];

	fld	QWORD PTR _high[edx*8]
	fcomp	QWORD PTR [ecx-16]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN251@resize
	fld	QWORD PTR [ecx-16]
	fstp	QWORD PTR _high[edx*8]
$LN251@resize:

; 779  :         { if ( x[i] < low[i] ) low[i] = x[i];

	fld	QWORD PTR _low[edx*8+8]
	fcomp	QWORD PTR [ecx-8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN252@resize
	fld	QWORD PTR [ecx-8]
	fstp	QWORD PTR _low[edx*8+8]
$LN252@resize:

; 780  :           if ( x[i] > high[i] ) high[i] = x[i];

	fld	QWORD PTR _high[edx*8+8]
	fcomp	QWORD PTR [ecx-8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN253@resize
	fld	QWORD PTR [ecx-8]
	fstp	QWORD PTR _high[edx*8+8]
$LN253@resize:

; 779  :         { if ( x[i] < low[i] ) low[i] = x[i];

	fld	QWORD PTR _low[edi+ecx]
	fcomp	QWORD PTR [ecx]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN254@resize
	fld	QWORD PTR [ecx]
	fstp	QWORD PTR _low[edi+ecx]
$LN254@resize:

; 780  :           if ( x[i] > high[i] ) high[i] = x[i];

	fld	QWORD PTR _high[edi+ecx]
	fcomp	QWORD PTR [ecx]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN255@resize
	fld	QWORD PTR [ecx]
	fstp	QWORD PTR _high[edi+ecx]
$LN255@resize:

; 779  :         { if ( x[i] < low[i] ) low[i] = x[i];

	fld	QWORD PTR _low[edi+ecx+8]
	fcomp	QWORD PTR [ecx+8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN256@resize
	fld	QWORD PTR [ecx+8]
	fstp	QWORD PTR _low[edi+ecx+8]
$LN256@resize:

; 780  :           if ( x[i] > high[i] ) high[i] = x[i];

	fld	QWORD PTR _high[edi+ecx+8]
	fcomp	QWORD PTR [ecx+8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN257@resize
	fld	QWORD PTR [ecx+8]
	fstp	QWORD PTR _high[edi+ecx+8]
$LN257@resize:

; 778  :         for ( i = 0 ; i < SDIM ; i++ )

	add	edx, 4
	lea	eax, DWORD PTR [ebx-3]
	add	ecx, 32					; 00000020H
	cmp	edx, eax
	jl	$LL258@resize
$LC249@resize:
	cmp	edx, ebx
	jge	SHORT $LN39@resize
	lea	ecx, DWORD PTR [esi+edx*8]
	mov	edi, ebx
	neg	esi
	sub	edi, edx
$LC20@resize:

; 779  :         { if ( x[i] < low[i] ) low[i] = x[i];

	fld	QWORD PTR _low[esi+ecx]
	fcomp	QWORD PTR [ecx]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN17@resize
	fld	QWORD PTR [ecx]
	fstp	QWORD PTR _low[esi+ecx]
$LN17@resize:

; 780  :           if ( x[i] > high[i] ) high[i] = x[i];

	fld	QWORD PTR _high[esi+ecx]
	fcomp	QWORD PTR [ecx]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN19@resize
	fld	QWORD PTR [ecx]
	fstp	QWORD PTR _high[esi+ecx]
$LN19@resize:

; 778  :         for ( i = 0 ; i < SDIM ; i++ )

	add	ecx, 8
	dec	edi
	jne	SHORT $LC20@resize
$LN39@resize:

; 752  :       high[i] = -1e30;
; 753  :     }
; 754  :     /* figure out how big window should be  */
; 755  :          
; 756  :     FOR_ALL_VERTICES(v_id)

	mov	eax, DWORD PTR tv3310[ebp]
	mov	ecx, DWORD PTR _web+12
	mov	edx, DWORD PTR [eax+ecx]
	mov	eax, DWORD PTR [edx]
	test	eax, 268435456				; 10000000H
	jne	$LL266@resize
$LN38@resize:

; 781  :         }
; 782  : 
; 783  :     }
; 784  :   }
; 785  :     
; 786  :   for ( i = 0 ; i < SDIM ; i++ ) mid[i] = (low[i] + high[i])/2;

	fld	QWORD PTR __real@3fe0000000000000
	xor	eax, eax
	cmp	ebx, 4
	jl	SHORT $LC260@resize
	lea	ecx, DWORD PTR [ebx-3]
$LN261@resize:
	fld	QWORD PTR _high[eax*8]
	add	eax, 4
	fadd	QWORD PTR _low[eax*8-32]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _mid[eax*8-32]
	fld	QWORD PTR _high[eax*8-24]
	fadd	QWORD PTR _low[eax*8-24]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _mid[eax*8-24]
	fld	QWORD PTR _high[eax*8-16]
	fadd	QWORD PTR _low[eax*8-16]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _mid[eax*8-16]
	fld	QWORD PTR _high[eax*8-8]
	fadd	QWORD PTR _low[eax*8-8]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _mid[eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LN261@resize
$LC260@resize:
	cmp	eax, ebx
	jge	SHORT $LN468@resize
$LC15@resize:
	fld	QWORD PTR _high[eax*8]
	inc	eax
	fadd	QWORD PTR _low[eax*8-8]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _mid[eax*8-8]
	cmp	eax, ebx
	jl	SHORT $LC15@resize
$LN468@resize:
	fstp	ST(0)
	pop	edi

; 787  :   size = high[2] - low[2];

	fld	QWORD PTR _high+16
	pop	esi
	fsub	QWORD PTR _low+16
	pop	ebx
	fst	QWORD PTR _size$[ebp]

; 788  :   if ( high[1] - low[1] > size ) size = high[1] - low[1];

	fld	QWORD PTR _high+8
	fsub	QWORD PTR _low+8
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN470@resize
	fstp	ST(1)
	fst	QWORD PTR _size$[ebp]
	jmp	SHORT $LN12@resize
$LN470@resize:
	fstp	ST(0)
$LN12@resize:

; 789  :   if ( high[0] - low[0] > size ) size = high[0] - low[0];

	fld	QWORD PTR _high
	fsub	QWORD PTR _low
	fcom	ST(1)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 65					; 00000041H
	jne	SHORT $LN473@resize
	fstp	QWORD PTR _size$[ebp]
	jmp	SHORT $LN11@resize
$LN473@resize:
	fstp	ST(0)
$LN11@resize:

; 790  :   
; 791  :   /* transformation matrix will be set up to scale object into
; 792  :       [-1,1]^3 cube */
; 793  : 
; 794  :   if ( identmat == NULL )

	cmp	DWORD PTR _identmat, 0
	jne	SHORT $LN10@resize

; 795  :     init_view();

	call	_init_view
$LN10@resize:

; 796  : 
; 797  :   matcopy(view,identmat,HOMDIM,HOMDIM);

	mov	eax, DWORD PTR _HOMDIM
	mov	ecx, DWORD PTR _view
	push	eax
	push	eax
	mov	eax, DWORD PTR _identmat
	push	eax
	push	ecx
	call	_matcopy

; 798  :   if ( size > 0.0 )

	fldz
	fld	QWORD PTR _size$[ebp]
	add	esp, 16					; 00000010H
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN476@resize

; 799  :     for ( i = 0 ; i < HOMDIM-1 ; i++ ) 

	mov	ecx, DWORD PTR _HOMDIM
	lea	edx, DWORD PTR [ecx-1]
	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN5@resize
	fld	QWORD PTR __real@4000000000000000
	fdiv	ST(0), ST(1)
	fld	QWORD PTR __real@c000000000000000
	jmp	SHORT $LN8@resize
$LN483@resize:
	fxch	ST(1)
$LN8@resize:

; 800  :      { view[i][i] = 2/size;

	mov	ecx, DWORD PTR _view
	fxch	ST(1)
	mov	ecx, DWORD PTR [ecx+eax*4]
	fst	QWORD PTR [ecx+eax*8]

; 801  :        view[i][HOMDIM-1] = -mid[i]*2/size;

	mov	edx, DWORD PTR _HOMDIM
	fld	QWORD PTR _mid[eax*8]
	inc	eax
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR [ecx+edx*8-8]
	mov	ecx, DWORD PTR _HOMDIM
	lea	edx, DWORD PTR [ecx-1]
	cmp	eax, edx
	jl	SHORT $LN483@resize

; 799  :     for ( i = 0 ; i < HOMDIM-1 ; i++ ) 

	fstp	ST(0)
	fstp	ST(0)

; 802  :      }
; 803  :   else 

	jmp	SHORT $LN5@resize
$LN476@resize:

; 804  :     matcopy(view,identmat,HOMDIM,HOMDIM);

	mov	eax, DWORD PTR _HOMDIM
	fstp	ST(1)
	mov	ecx, DWORD PTR _view
	fstp	ST(0)
	push	eax
	push	eax
	mov	eax, DWORD PTR _identmat
	push	eax
	push	ecx
	call	_matcopy
	fldz
	mov	ecx, DWORD PTR _HOMDIM
	fld	QWORD PTR _size$[ebp]
	add	esp, 16					; 00000010H
$LN5@resize:

; 805  :   if ( to_focus ) /* for oglgraph.c focus reset */

	mov	eax, DWORD PTR _to_focus
	test	eax, eax
	je	SHORT $LN4@resize

; 806  :   { matcopy(to_focus,identmat,HOMDIM,HOMDIM); 

	mov	edx, DWORD PTR _identmat
	fstp	ST(1)
	push	ecx
	fstp	ST(0)
	push	ecx
	push	edx
	push	eax
	call	_matcopy

; 807  :     matcopy(from_focus,identmat,HOMDIM,HOMDIM); 

	mov	eax, DWORD PTR _HOMDIM
	mov	ecx, DWORD PTR _from_focus
	push	eax
	push	eax
	mov	eax, DWORD PTR _identmat
	push	eax
	push	ecx
	call	_matcopy
	fldz
	fld	QWORD PTR _size$[ebp]
	add	esp, 32					; 00000020H
$LN4@resize:

; 808  :   } 
; 809  : 
; 810  :   /* see if clip_view and slice_view need defaults */
; 811  : //  if ( !clip_coeff_set_flag )
; 812  :   if ( clip_coeff[0][0]==0.0 && clip_coeff[0][1]==0.0 && 
; 813  :        clip_coeff[0][2]==0.0 && clip_coeff[0][3]==0.0 )

	fld	QWORD PTR _clip_coeff
	fld	ST(2)
	fucompp
	fnstsw	ax
	fld	QWORD PTR _mid
	test	ah, 68					; 00000044H
	jp	SHORT $LN264@resize
	fld	QWORD PTR _clip_coeff+8
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN264@resize
	fld	QWORD PTR _clip_coeff+16
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN264@resize
	fld	QWORD PTR _clip_coeff+24
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN264@resize

; 814  :   { clip_coeff[0][0] = 1.0;

	fld1
	fstp	QWORD PTR _clip_coeff

; 815  :     clip_coeff[0][3] = mid[0];

	fst	QWORD PTR _clip_coeff+24
$LN264@resize:

; 816  :   }
; 817  : //  if ( !slice_coeff_set_flag )
; 818  :   if ( slice_coeff[0]==0.0 && slice_coeff[1]==0.0 && 
; 819  :        slice_coeff[2]==0.0 && slice_coeff[3]==0.0 )

	fld	QWORD PTR _slice_coeff
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN504@resize
	fld	QWORD PTR _slice_coeff+8
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN504@resize
	fld	QWORD PTR _slice_coeff+16
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN504@resize
	fld	QWORD PTR _slice_coeff+24
	fucomp	ST(3)
	fnstsw	ax
	fstp	ST(2)
	test	ah, 68					; 00000044H
	jp	SHORT $LN507@resize

; 820  :   { slice_coeff[0] = 1.0;

	fld1
	fstp	QWORD PTR _slice_coeff

; 821  :     slice_coeff[3] = mid[0];

	fxch	ST(1)
	fstp	QWORD PTR _slice_coeff+24
	jmp	SHORT $LN2@resize
$LN504@resize:

; 816  :   }
; 817  : //  if ( !slice_coeff_set_flag )
; 818  :   if ( slice_coeff[0]==0.0 && slice_coeff[1]==0.0 && 
; 819  :        slice_coeff[2]==0.0 && slice_coeff[3]==0.0 )

	fstp	ST(0)
$LN507@resize:
	fstp	ST(1)
$LN2@resize:

; 822  :   }
; 823  : 
; 824  :   overall_size = size;  /* for anybody who wants to know how big */
; 825  :   if ( !user_thickness_flag ) thickness = 0.001*size;

	cmp	DWORD PTR _user_thickness_flag, 0
	fst	QWORD PTR _overall_size
	jne	SHORT $LN510@resize
	fmul	QWORD PTR __real@3f50624dd2f1a9fc
	fstp	QWORD PTR _thickness

; 826  : 
; 827  : } // end resize()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN510@resize:
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(0)
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_resize	ENDP
_TEXT	ENDS
PUBLIC	__real@bff921fb54442d18
PUBLIC	__real@3ff921fb54442d18
PUBLIC	__real@4072c00000000000
PUBLIC	__$ArrayPad$
PUBLIC	_fix_ctm
EXTRN	_mat_mult:PROC
EXTRN	_mat2d_setup:PROC
EXTRN	__CIatan:PROC
EXTRN	__CIsqrt:PROC
;	COMDAT __real@bff921fb54442d18
CONST	SEGMENT
__real@bff921fb54442d18 DQ 0bff921fb54442d18r	; -1.5708
CONST	ENDS
;	COMDAT __real@3ff921fb54442d18
CONST	SEGMENT
__real@3ff921fb54442d18 DQ 03ff921fb54442d18r	; 1.5708
CONST	ENDS
;	COMDAT __real@4072c00000000000
CONST	SEGMENT
__real@4072c00000000000 DQ 04072c00000000000r	; 300
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _fix_ctm
_TEXT	SEGMENT
_rotqXvS$ = -456					; size = 28
tv363 = -428						; size = 8
tv354 = -420						; size = 8
_alpha$ = -412						; size = 8
tv366 = -404						; size = 8
_theta$ = -404						; size = 8
_rotxJ$ = -396						; size = 392
__$ArrayPad$ = -4					; size = 4
_viewmat$ = 8						; size = 4
_dx$ = 12						; size = 8
_dy$ = 20						; size = 8
_fix_ctm PROC						; COMDAT

; 841  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 456				; 000001c8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	mov	edi, DWORD PTR _viewmat$[ebp]

; 842  :   MAT2D(rot,MAXCOORD+1,MAXCOORD+1);

	push	7
	push	7
	lea	eax, DWORD PTR _rotxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _rotqXvS$[ebp]
	push	ecx
	call	_mat2d_setup

; 843  :   REAL alpha;  /* angle around axis */
; 844  :   REAL theta;    /* tilt of rotation axis */
; 845  :   int i,j;
; 846  :   
; 847  :   for ( i = 0 ; i < HOMDIM ; i++ )

	fldz
	fld1
	mov	esi, eax
	mov	eax, DWORD PTR _HOMDIM
	add	esp, 16					; 00000010H
	xor	edx, edx
	test	eax, eax
	jle	SHORT $LN30@fix_ctm
$LN15@fix_ctm:

; 848  :   { for ( j = 0 ; j < HOMDIM ; j++ )

	xor	ecx, ecx
	test	eax, eax
	jle	SHORT $LN10@fix_ctm

; 843  :   REAL alpha;  /* angle around axis */
; 844  :   REAL theta;    /* tilt of rotation axis */
; 845  :   int i,j;
; 846  :   
; 847  :   for ( i = 0 ; i < HOMDIM ; i++ )

	mov	eax, DWORD PTR [esi+edx*4]
$LN29@fix_ctm:

; 849  :         rot[i][j] = 0.0;

	fxch	ST(1)
	inc	ecx
	fst	QWORD PTR [eax]
	add	eax, 8
	fxch	ST(1)
	cmp	ecx, DWORD PTR _HOMDIM
	jl	SHORT $LN29@fix_ctm
$LN10@fix_ctm:

; 850  :     rot[i][i] = 1.0;

	mov	eax, DWORD PTR [esi+edx*4]
	fst	QWORD PTR [eax+edx*8]
	mov	eax, DWORD PTR _HOMDIM
	inc	edx
	cmp	edx, eax
	jl	SHORT $LN15@fix_ctm
$LN30@fix_ctm:

; 843  :   REAL alpha;  /* angle around axis */
; 844  :   REAL theta;    /* tilt of rotation axis */
; 845  :   int i,j;
; 846  :   
; 847  :   for ( i = 0 ; i < HOMDIM ; i++ )

	fstp	ST(1)
	fstp	ST(0)

; 851  :   }
; 852  :   alpha = sqrt(dx*dx + dy*dy)/300;  /* one radian per 300 pixels */

	fld	QWORD PTR _dx$[ebp]
	fmul	ST(0), ST(0)
	fld	QWORD PTR _dy$[ebp]
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	call	__CIsqrt
	fdiv	QWORD PTR __real@4072c00000000000
	fstp	QWORD PTR _alpha$[ebp]

; 853  :   if ( dx == 0.0 ) 

	fld	QWORD PTR _dx$[ebp]
	fld	ST(0)
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	SHORT $LN32@fix_ctm
	fstp	ST(1)

; 854  :   { if ( dy > 0.0 ) theta = M_PI/2;

	fld	QWORD PTR _dy$[ebp]
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN8@fix_ctm
	fstp	ST(0)
	fstp	ST(0)
	fld	QWORD PTR __real@3ff921fb54442d18
	fst	QWORD PTR _theta$[ebp]
	jmp	SHORT $LN3@fix_ctm
$LN8@fix_ctm:

; 855  :     else if ( dy < 0.0 ) theta = -M_PI/2;

	fcompp
	fnstsw	ax
	test	ah, 5
	jp	$ctm_exit$89452
	fld	QWORD PTR __real@bff921fb54442d18
	fst	QWORD PTR _theta$[ebp]

; 856  :     else goto ctm_exit;  /* no change */
; 857  :   }
; 858  :   else 

	jmp	SHORT $LN3@fix_ctm
$LN32@fix_ctm:

; 853  :   if ( dx == 0.0 ) 

	fstp	ST(0)

; 859  :   { theta = atan(dy/dx);

	fdivr	QWORD PTR _dy$[ebp]
	call	__CIatan
	fst	QWORD PTR _theta$[ebp]

; 860  :     if ( dx < 0.0 ) alpha = - alpha;

	fldz
	fcomp	QWORD PTR _dx$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@fix_ctm
	fld	QWORD PTR _alpha$[ebp]
	fchs
	fstp	QWORD PTR _alpha$[ebp]
$LN3@fix_ctm:

; 861  :   }
; 862  :   
; 863  :   if ( SDIM == 2 )

	cmp	DWORD PTR _web+616, 2

; 864  :   { 
; 865  :     /* tilt axis */
; 866  :     rot[2][2] = 1.0;

	fld1
	push	ebx
	jne	$LN2@fix_ctm
	mov	ecx, DWORD PTR [esi+8]
	fstp	QWORD PTR [ecx+16]

; 867  :     rot[0][0] = rot[1][1] = cos(theta);

	call	__CIcos
	fst	QWORD PTR tv354[ebp]
	mov	ebx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	fst	QWORD PTR [ebx+8]
	fstp	QWORD PTR [eax]

; 868  :     rot[0][1] = sin(theta);

	fld	QWORD PTR _theta$[ebp]
	call	__CIsin
	fst	QWORD PTR tv363[ebp]
	mov	eax, DWORD PTR [esi]
	fst	QWORD PTR [eax+8]

; 869  :     rot[1][0] = -sin(theta);

	fchs
	fst	QWORD PTR tv366[ebp]
	fstp	QWORD PTR [ebx]

; 870  :     mat_mult(rot,viewmat,viewmat,HOMDIM,HOMDIM,HOMDIM);

	mov	eax, DWORD PTR _HOMDIM
	push	eax
	push	eax
	push	eax
	push	edi
	push	edi
	push	esi
	call	_mat_mult

; 871  :   
; 872  :     /* rotate */
; 873  :     rot[2][2] = rot[0][0] = cos(alpha);

	fld	QWORD PTR _alpha$[ebp]
	add	esp, 24					; 00000018H
	call	__CIcos
	mov	ebx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+8]
	fst	QWORD PTR [ebx]
	fstp	QWORD PTR [eax+16]

; 874  :     rot[2][0] = -sin(alpha);

	fld	QWORD PTR _alpha$[ebp]
	call	__CIsin
	fld	ST(0)
	mov	eax, DWORD PTR [esi+8]
	fchs
	fstp	QWORD PTR [eax]

; 875  :     rot[0][2] = sin(alpha);
; 876  :     rot[1][1] = 1.0;

	mov	eax, DWORD PTR [esi+4]
	fstp	QWORD PTR [ebx+16]
	fld1
	fstp	QWORD PTR [eax+8]

; 877  :     rot[0][1] = rot[1][0] = 0.0;

	fldz
	fst	QWORD PTR [eax]
	fstp	QWORD PTR [ebx+8]

; 878  :     mat_mult(rot,viewmat,viewmat,HOMDIM,HOMDIM,HOMDIM);

	mov	eax, DWORD PTR _HOMDIM
	push	eax
	push	eax
	push	eax
	push	edi
	push	edi
	push	esi
	call	_mat_mult

; 879  :   
; 880  :     /* untilt axis */
; 881  :     rot[2][2] = 1.0;

	fld1
	mov	ecx, DWORD PTR [esi+8]
	fstp	QWORD PTR [ecx+16]

; 882  :     rot[0][0] = rot[1][1] = cos(theta);

	mov	edx, DWORD PTR [esi+4]
	fld	QWORD PTR tv354[ebp]
	mov	eax, DWORD PTR [esi]
	fst	QWORD PTR [edx+8]
	fstp	QWORD PTR [eax]

; 883  :     rot[0][1] = -sin(theta);

	fld	QWORD PTR tv366[ebp]
	fstp	QWORD PTR [eax+8]

; 884  :     rot[1][0] = sin(theta);

	fld	QWORD PTR tv363[ebp]
	fstp	QWORD PTR [edx]

; 885  :     rot[2][0] = rot[0][2] = 0.0;

	fldz
	fst	QWORD PTR [eax+16]
	fstp	QWORD PTR [ecx]

; 886  :   }
; 887  :   else

	jmp	$LN43@fix_ctm
$LN2@fix_ctm:

; 888  :   {
; 889  :     /* tilt axis */
; 890  :     rot[0][0] = 1.0;

	mov	edx, DWORD PTR [esi]
	fstp	QWORD PTR [edx]

; 891  :     rot[1][1] = rot[2][2] = cos(theta);

	call	__CIcos
	fst	QWORD PTR tv354[ebp]
	mov	ebx, DWORD PTR [esi+8]
	mov	eax, DWORD PTR [esi+4]
	fst	QWORD PTR [ebx+16]
	fstp	QWORD PTR [eax+8]

; 892  :     rot[1][2] = sin(theta);

	fld	QWORD PTR _theta$[ebp]
	call	__CIsin
	fst	QWORD PTR tv363[ebp]
	mov	eax, DWORD PTR [esi+4]
	fst	QWORD PTR [eax+16]

; 893  :     rot[2][1] = -sin(theta);

	fchs
	fst	QWORD PTR tv366[ebp]
	fstp	QWORD PTR [ebx+8]

; 894  :     mat_mult(rot,viewmat,viewmat,HOMDIM,HOMDIM,HOMDIM);

	mov	eax, DWORD PTR _HOMDIM
	push	eax
	push	eax
	push	eax
	push	edi
	push	edi
	push	esi
	call	_mat_mult

; 895  :   
; 896  :     /* rotate */
; 897  :     rot[0][0] = rot[1][1] = cos(alpha);

	fld	QWORD PTR _alpha$[ebp]
	add	esp, 24					; 00000018H
	call	__CIcos
	mov	eax, DWORD PTR [esi+4]
	mov	ebx, DWORD PTR [esi]
	fst	QWORD PTR [eax+8]
	fstp	QWORD PTR [ebx]

; 898  :     rot[0][1] = -sin(alpha);

	fld	QWORD PTR _alpha$[ebp]
	call	__CIsin
	fld	ST(0)

; 899  :     rot[1][0] = sin(alpha);

	mov	eax, DWORD PTR [esi+4]
	fchs

; 900  :     rot[2][2] = 1.0;

	mov	ecx, DWORD PTR [esi+8]
	fstp	QWORD PTR [ebx+8]
	fstp	QWORD PTR [eax]
	fld1
	fstp	QWORD PTR [ecx+16]

; 901  :     rot[1][2] = rot[2][1] = 0.0;

	fldz
	fst	QWORD PTR [ecx+8]
	fstp	QWORD PTR [eax+16]

; 902  :     mat_mult(rot,viewmat,viewmat,HOMDIM,HOMDIM,HOMDIM);

	mov	eax, DWORD PTR _HOMDIM
	push	eax
	push	eax
	push	eax
	push	edi
	push	edi
	push	esi
	call	_mat_mult

; 903  :   
; 904  :     /* untilt axis */
; 905  :     rot[0][0] = 1.0;

	fld1
	mov	ecx, DWORD PTR [esi]
	fstp	QWORD PTR [ecx]

; 906  :     rot[1][1] = rot[2][2] = cos(theta);

	mov	edx, DWORD PTR [esi+8]
	fld	QWORD PTR tv354[ebp]
	mov	eax, DWORD PTR [esi+4]
	fst	QWORD PTR [edx+16]
	fstp	QWORD PTR [eax+8]

; 907  :     rot[1][2] = -sin(theta);

	fld	QWORD PTR tv366[ebp]
	fstp	QWORD PTR [eax+16]

; 908  :     rot[2][1] = sin(theta);

	fld	QWORD PTR tv363[ebp]
	fstp	QWORD PTR [edx+8]

; 909  :     rot[0][1] = rot[1][0] = 0.0;

	fldz
	fst	QWORD PTR [eax]
	fstp	QWORD PTR [ecx+8]
$LN43@fix_ctm:

; 910  :   }
; 911  :   mat_mult(rot,viewmat,viewmat,HOMDIM,HOMDIM,HOMDIM);

	mov	eax, DWORD PTR _HOMDIM
	add	esp, 24					; 00000018H
	push	eax
	push	eax
	push	eax
	push	edi
	push	edi
	push	esi
	call	_mat_mult
	add	esp, 24					; 00000018H
	pop	ebx
$ctm_exit$89452:

; 912  :   
; 913  : ctm_exit: ;
; 914  : } /* end fix_ctm() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_fix_ctm ENDP
_TEXT	ENDS
PUBLIC	_update_display
_BSS	SEGMENT
_showflag DD	01H DUP (?)
; Function compile flags: /Ogtp
_BSS	ENDS
;	COMDAT _update_display
_TEXT	SEGMENT
_update_display PROC					; COMDAT

; 48   :   if ( (torus_display_mode == TORUS_DEFAULT_MODE) && showflag ) 

	cmp	DWORD PTR _torus_display_mode, 0
	jne	SHORT $LN1@update_dis
	cmp	DWORD PTR _showflag, 0
	je	SHORT $LN1@update_dis

; 49   :     ask_wrap_display();

	call	_ask_wrap_display
$LN1@update_dis:

; 50   : 
; 51   :   #ifdef MPI_EVOLVER
; 52   :   if ( this_task == 0 )
; 53   :      mpi_update_display();
; 54   :   #endif
; 55   : 
; 56   :   local_update_display();

	jmp	_local_update_display
_update_display ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@ICHPFNE@Unrecognized?5character?3?50x?$CF04x?5?6@ ; `string'
PUBLIC	??_C@_0BJ@PHCFDKMO@Unrecognized?5letter?3?5?$CFc?6?$AA@ ; `string'
PUBLIC	??_C@_0O@ECONJICN@fillcolor?5?$CFd?6?$AA@	; `string'
PUBLIC	??_C@_05KIPBLJDN@?$CIoff?$CJ?$AA@		; `string'
PUBLIC	??_C@_04KNCGPCLD@?$CIon?$CJ?$AA@		; `string'
PUBLIC	??_C@_0CB@KIBFFKOK@Unrecognized?5character?3?50x?$CF04X?5?6@ ; `string'
PUBLIC	??_C@_0CA@PNDLJKJL@Unrecognized?5character?3?50x?$CF04X?6?$AA@ ; `string'
PUBLIC	??_C@_0BN@JFJGBKPO@Unrecognized?5character?3?5?5?$CFc?6?$AA@ ; `string'
PUBLIC	__real@3ff3333333333333
PUBLIC	__real@4066800000000000
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@4018000000000000
PUBLIC	??_C@_0CK@NAHIOMMP@Illegal?5character?5in?5graphics?5co@ ; `string'
PUBLIC	??_C@_0DE@NMOHMJKP@0123456789?4?$CL?9udrlcCRmzsABDxqtvwb@ ; `string'
PUBLIC	_view_transform
EXTRN	_graph_help:PROC
EXTRN	_fillcolor:DWORD
EXTRN	_triple_edgeshow_flag:DWORD
EXTRN	_edgeshow_flag:DWORD
EXTRN	_box_flag:DWORD
EXTRN	_no_wall_flag:DWORD
EXTRN	_ridge_color_flag:DWORD
EXTRN	_bdry_showflag:DWORD
EXTRN	_strncmp:PROC
EXTRN	_bbox_maxy:QWORD
EXTRN	_bbox_miny:QWORD
EXTRN	_bbox_maxx:QWORD
EXTRN	_bbox_minx:QWORD
EXTRN	_do_gfile:PROC
EXTRN	_outstring:PROC
EXTRN	_isprint:PROC
EXTRN	_atof:PROC
EXTRN	_atoi:PROC
EXTRN	_isdigit:PROC
EXTRN	_msg:DWORD
EXTRN	_strspn:PROC
;	COMDAT ??_C@_0CB@ICHPFNE@Unrecognized?5character?3?50x?$CF04x?5?6@
CONST	SEGMENT
??_C@_0CB@ICHPFNE@Unrecognized?5character?3?50x?$CF04x?5?6@ DB 'Unrecogni'
	DB	'zed character: 0x%04x ', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PHCFDKMO@Unrecognized?5letter?3?5?$CFc?6?$AA@
CONST	SEGMENT
??_C@_0BJ@PHCFDKMO@Unrecognized?5letter?3?5?$CFc?6?$AA@ DB 'Unrecognized '
	DB	'letter: %c', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ECONJICN@fillcolor?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0O@ECONJICN@fillcolor?5?$CFd?6?$AA@ DB 'fillcolor %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05KIPBLJDN@?$CIoff?$CJ?$AA@
CONST	SEGMENT
??_C@_05KIPBLJDN@?$CIoff?$CJ?$AA@ DB '(off)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04KNCGPCLD@?$CIon?$CJ?$AA@
CONST	SEGMENT
??_C@_04KNCGPCLD@?$CIon?$CJ?$AA@ DB '(on)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KIBFFKOK@Unrecognized?5character?3?50x?$CF04X?5?6@
CONST	SEGMENT
??_C@_0CB@KIBFFKOK@Unrecognized?5character?3?50x?$CF04X?5?6@ DB 'Unrecogn'
	DB	'ized character: 0x%04X ', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PNDLJKJL@Unrecognized?5character?3?50x?$CF04X?6?$AA@
CONST	SEGMENT
??_C@_0CA@PNDLJKJL@Unrecognized?5character?3?50x?$CF04X?6?$AA@ DB 'Unreco'
	DB	'gnized character: 0x%04X', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JFJGBKPO@Unrecognized?5character?3?5?5?$CFc?6?$AA@
CONST	SEGMENT
??_C@_0BN@JFJGBKPO@Unrecognized?5character?3?5?5?$CFc?6?$AA@ DB 'Unrecogn'
	DB	'ized character:  %c', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT __real@3ff3333333333333
CONST	SEGMENT
__real@3ff3333333333333 DQ 03ff3333333333333r	; 1.2
CONST	ENDS
;	COMDAT __real@4066800000000000
CONST	SEGMENT
__real@4066800000000000 DQ 04066800000000000r	; 180
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@4018000000000000
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
CONST	ENDS
;	COMDAT ??_C@_0CK@NAHIOMMP@Illegal?5character?5in?5graphics?5co@
CONST	SEGMENT
??_C@_0CK@NAHIOMMP@Illegal?5character?5in?5graphics?5co@ DB 'Illegal char'
	DB	'acter in graphics command: %c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@NMOHMJKP@0123456789?4?$CL?9udrlcCRmzsABDxqtvwb@
CONST	SEGMENT
??_C@_0DE@NMOHMJKP@0123456789?4?$CL?9udrlcCRmzsABDxqtvwb@ DB '0123456789.'
	DB	'+-udrlcCRmzsABDxqtvwbeETH?h()onf', 01cH, 01dH, 01eH, 01fH, 01bH
	DB	'[', 0aH, 0dH, 00H				; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _view_transform
_TEXT	SEGMENT
_val$89114 = -12					; size = 8
_reps$89113 = -4					; size = 4
_string$ = 8						; size = 4
_view_transform PROC					; COMDAT

; 216  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi

; 217  :   char *c;
; 218  :   size_t legal; /* number of legal characters at start of string */
; 219  : 
; 220  :   /* test for illegal characters */
; 221  :   legal =  strspn(string,
; 222  :           "0123456789.+-udrlcCRmzsABDxqtvwbeETH?h()onf\034\035\036\037\033\133\n\r");

	mov	edi, DWORD PTR _string$[ebp]
	push	OFFSET ??_C@_0DE@NMOHMJKP@0123456789?4?$CL?9udrlcCRmzsABDxqtvwb@
	push	edi
	call	_strspn

; 223  :   if ( legal != strlen(string) )

	mov	ecx, edi
	add	esp, 8
	lea	esi, DWORD PTR [ecx+1]
	npad	2
$LL142@view_trans:
	mov	dl, BYTE PTR [ecx]
	inc	ecx
	test	dl, dl
	jne	SHORT $LL142@view_trans
	sub	ecx, esi
	cmp	eax, ecx
	je	SHORT $LN108@view_trans

; 224  :   { sprintf(msg,"Illegal character in graphics command: %c",string[legal]);

	movsx	eax, BYTE PTR [eax+edi]
	mov	ecx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0CK@NAHIOMMP@Illegal?5character?5in?5graphics?5co@
	push	ecx
	call	_sprintf

; 225  :     kb_error(1044,msg,WARNING);

	mov	edx, DWORD PTR _msg
	push	2
	push	edx
	push	1044					; 00000414H
	call	_kb_error
	add	esp, 24					; 00000018H
	pop	edi

; 226  :     showflag = 0;  /* don't reshow */

	mov	DWORD PTR _showflag, 0

; 227  :     return 1;

	mov	eax, 1
	pop	esi

; 486  : } /* end view_transform() */

	mov	esp, ebp
	pop	ebp
	ret	0
$LN108@view_trans:

; 228  :   }
; 229  : 
; 230  :   for ( c = string ; *c ; c++ )

	cmp	BYTE PTR [edi], 0
	push	ebx
	je	$LN105@view_trans
	npad	8
$LL107@view_trans:

; 231  :   { int reps = 1;  /* repetition count */
; 232  :     REAL val = 0.0;  /* for arbitrary rotations */
; 233  :     int decflag = 0;  /* whether have real number for angle or other */
; 234  :     char *cc = c;
; 235  :   
; 236  :     if ( isdigit(*c) )

	movsx	eax, BYTE PTR [edi]
	push	eax
	mov	DWORD PTR _reps$89113[ebp], 1
	xor	ebx, ebx
	mov	esi, edi
	call	_isdigit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN104@view_trans

; 237  :         reps = atoi(c);

	push	edi
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _reps$89113[ebp], eax
$LN104@view_trans:

; 238  :     if ( isdigit(*c) || (*c=='.') || (*c=='-'))

	movsx	ecx, BYTE PTR [edi]
	push	ecx
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN102@view_trans
	mov	al, BYTE PTR [edi]
	cmp	al, 46					; 0000002eH
	je	SHORT $LN102@view_trans
	cmp	al, 45					; 0000002dH
	jne	SHORT $LN134@view_trans
$LN102@view_trans:

; 239  :     { val = atof(c);

	push	edi
	call	_atof
	fstp	QWORD PTR _val$89114[ebp]
	add	esp, 4

; 240  :       if ( *cc == '.' ) decflag = 1;

	cmp	BYTE PTR [edi], 46			; 0000002eH
	jne	SHORT $LN101@view_trans
	mov	ebx, 1
$LN101@view_trans:

; 241  :       cc = c+1;

	lea	esi, DWORD PTR [edi+1]
	npad	6
$LL100@view_trans:

; 242  :       while ( isdigit(*cc) || (*cc=='.'))

	movsx	edx, BYTE PTR [esi]
	push	edx
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN98@view_trans
	cmp	BYTE PTR [esi], 46			; 0000002eH
	je	SHORT $LN135@view_trans

; 246  :     }
; 247  :     if ( decflag ) { reps = 1; c = cc; }

	test	ebx, ebx
	je	SHORT $LN96@view_trans
	mov	eax, 1
	mov	edi, esi
	jmp	SHORT $LL92@view_trans
$LN98@view_trans:

; 243  :            { if ( *cc == '.' ) decflag = 1;

	cmp	BYTE PTR [esi], 46			; 0000002eH
	jne	SHORT $LN97@view_trans
$LN135@view_trans:
	mov	ebx, 1
$LN97@view_trans:

; 244  :               cc++;

	inc	esi

; 245  :            }

	jmp	SHORT $LL100@view_trans
$LN96@view_trans:

; 248  :     else if ( *c == '-' ) { /* '-' for color decrement */ }

	cmp	BYTE PTR [edi], 45			; 0000002dH
	je	SHORT $LN146@view_trans
$LN134@view_trans:

; 249  :     else { c = cc;  val = 6.0;  /* default angle */ }

	fld	QWORD PTR __real@4018000000000000
	mov	edi, esi
	fstp	QWORD PTR _val$89114[ebp]
$LN146@view_trans:

; 250  : 
; 251  :     while ( reps-- > 0 )

	mov	eax, DWORD PTR _reps$89113[ebp]
	test	eax, eax
	jle	$LN156@view_trans
	npad	6
$LL92@view_trans:
	dec	eax
	mov	DWORD PTR _reps$89113[ebp], eax

; 252  :      switch ( *c )

	movsx	eax, BYTE PTR [edi]
	cmp	eax, 122				; 0000007aH
	ja	$LN3@view_trans
	movzx	eax, BYTE PTR $LN143@view_trans[eax]
	jmp	DWORD PTR $LN178@view_trans[eax*4]
$LN87@view_trans:

; 253  :      {
; 254  :         case 0: return 1;
; 255  : 
; 256  :         case 'u':
; 257  :          if ( !decflag ) val = 6.0;

	test	ebx, ebx
	jne	SHORT $LN147@view_trans
	fld	QWORD PTR __real@4018000000000000
	fstp	QWORD PTR _val$89114[ebp]
$LN147@view_trans:

; 258  :          set_tipup(val*M_PI/180); 

	fld	QWORD PTR _val$89114[ebp]
	sub	esp, 8
	fmul	QWORD PTR __real@400921fb54442d18
	fdiv	QWORD PTR __real@4066800000000000
	fstp	QWORD PTR [esp]
	call	_set_tipup

; 259  :          mat_mult(tipup,view,view,HOMDIM,HOMDIM,HOMDIM); break;  

	mov	eax, DWORD PTR _HOMDIM
	mov	ecx, DWORD PTR _tipup
	push	eax
	push	eax
	push	eax
	mov	eax, DWORD PTR _view
	push	eax
	push	eax
	push	ecx
	call	_mat_mult
	add	esp, 32					; 00000020H
	jmp	$LN4@view_trans
$LN85@view_trans:

; 260  : 
; 261  :         case 'd': 
; 262  :          if ( !decflag ) val = 6.0;

	test	ebx, ebx
	jne	SHORT $LN148@view_trans
	fld	QWORD PTR __real@4018000000000000
	fstp	QWORD PTR _val$89114[ebp]
$LN148@view_trans:

; 263  :          set_tipdown(val*M_PI/180); 

	fld	QWORD PTR _val$89114[ebp]
	sub	esp, 8
	fmul	QWORD PTR __real@400921fb54442d18
	fdiv	QWORD PTR __real@4066800000000000
	fstp	QWORD PTR [esp]
	call	_set_tipdown

; 264  :          mat_mult(tipdown,view,view,HOMDIM,HOMDIM,HOMDIM); break;  

	mov	eax, DWORD PTR _HOMDIM
	mov	edx, DWORD PTR _tipdown
	push	eax
	push	eax
	push	eax
	mov	eax, DWORD PTR _view
	push	eax
	push	eax
	push	edx
	call	_mat_mult
	add	esp, 32					; 00000020H
	jmp	$LN4@view_trans
$LN83@view_trans:

; 265  : 
; 266  :         case 'r': 
; 267  :          if ( !decflag ) val = 6.0;

	test	ebx, ebx
	jne	SHORT $LN149@view_trans
	fld	QWORD PTR __real@4018000000000000
	fstp	QWORD PTR _val$89114[ebp]
$LN149@view_trans:

; 268  :          set_spinr(val*M_PI/180); 

	fld	QWORD PTR _val$89114[ebp]
	sub	esp, 8
	fmul	QWORD PTR __real@400921fb54442d18
	fdiv	QWORD PTR __real@4066800000000000
	fstp	QWORD PTR [esp]
	call	_set_spinr

; 269  :          mat_mult(spinr,view,view,HOMDIM,HOMDIM,HOMDIM); break;  

	mov	eax, DWORD PTR _HOMDIM
	push	eax
	push	eax
	push	eax
	mov	eax, DWORD PTR _view
	push	eax
	push	eax
	mov	eax, DWORD PTR _spinr
	push	eax
	call	_mat_mult
	add	esp, 32					; 00000020H
	jmp	$LN4@view_trans
$LN81@view_trans:

; 270  : 
; 271  :         case 'l': 
; 272  :          if ( !decflag ) val = 6.0;

	test	ebx, ebx
	jne	SHORT $LN150@view_trans
	fld	QWORD PTR __real@4018000000000000
	fstp	QWORD PTR _val$89114[ebp]
$LN150@view_trans:

; 273  :          set_spinl(val*M_PI/180); 

	fld	QWORD PTR _val$89114[ebp]
	sub	esp, 8
	fmul	QWORD PTR __real@400921fb54442d18
	fdiv	QWORD PTR __real@4066800000000000
	fstp	QWORD PTR [esp]
	call	_set_spinl

; 274  :          mat_mult(spinl,view,view,HOMDIM,HOMDIM,HOMDIM); break;  

	mov	eax, DWORD PTR _HOMDIM
	mov	ecx, DWORD PTR _spinl
	push	eax
	push	eax
	push	eax
	mov	eax, DWORD PTR _view
	push	eax
	push	eax
	push	ecx
	call	_mat_mult
	add	esp, 32					; 00000020H
	jmp	$LN4@view_trans
$LN79@view_trans:

; 275  : 
; 276  :         case 'c': 
; 277  :          if ( !decflag ) val = 6.0;

	test	ebx, ebx
	jne	SHORT $LN151@view_trans
	fld	QWORD PTR __real@4018000000000000
	fstp	QWORD PTR _val$89114[ebp]
$LN151@view_trans:

; 278  :          set_clockwise(val*M_PI/180); 

	fld	QWORD PTR _val$89114[ebp]
	sub	esp, 8
	fmul	QWORD PTR __real@400921fb54442d18
	fdiv	QWORD PTR __real@4066800000000000
	fstp	QWORD PTR [esp]
	call	_set_clockwise

; 279  :          mat_mult(clockwise,view,view,HOMDIM,HOMDIM,HOMDIM); 

	mov	eax, DWORD PTR _HOMDIM
	mov	edx, DWORD PTR _clockwise
	push	eax
	push	eax
	push	eax
	mov	eax, DWORD PTR _view
	push	eax
	push	eax
	push	edx
	call	_mat_mult
	add	esp, 32					; 00000020H

; 280  :          break;  

	jmp	$LN4@view_trans
$LN77@view_trans:

; 281  : 
; 282  :         case 'C': 
; 283  :          if ( !decflag ) val = 6.0;

	test	ebx, ebx
	jne	SHORT $LN152@view_trans
	fld	QWORD PTR __real@4018000000000000
	fstp	QWORD PTR _val$89114[ebp]
$LN152@view_trans:

; 284  :          set_counterclockwise(val*M_PI/180); 

	fld	QWORD PTR _val$89114[ebp]
	sub	esp, 8
	fmul	QWORD PTR __real@400921fb54442d18
	fdiv	QWORD PTR __real@4066800000000000
	fstp	QWORD PTR [esp]
	call	_set_counterclockwise

; 285  :          mat_mult(counterclock,view,view,HOMDIM,HOMDIM,HOMDIM); 

	mov	eax, DWORD PTR _HOMDIM
	push	eax
	push	eax
	push	eax
	mov	eax, DWORD PTR _view
	push	eax
	push	eax
	mov	eax, DWORD PTR _counterclock
	push	eax
	call	_mat_mult
	add	esp, 32					; 00000020H

; 286  :          break;  

	jmp	$LN4@view_trans
$LN75@view_trans:

; 287  : 
; 288  :         case 'z': 
; 289  :          if ( !decflag ) val = 1.2;

	test	ebx, ebx
	jne	SHORT $LN153@view_trans
	fld	QWORD PTR __real@3ff3333333333333
	fstp	QWORD PTR _val$89114[ebp]
$LN153@view_trans:

; 290  :          set_zoom(val);

	fld	QWORD PTR _val$89114[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_set_zoom

; 291  :          mat_mult(zoom ,view,view,HOMDIM,HOMDIM,HOMDIM); break;  

	mov	eax, DWORD PTR _HOMDIM
	mov	ecx, DWORD PTR _zoom
	push	eax
	push	eax
	push	eax
	mov	eax, DWORD PTR _view
	push	eax
	push	eax
	push	ecx
	call	_mat_mult
	add	esp, 32					; 00000020H
	jmp	$LN4@view_trans
$LN73@view_trans:

; 292  : 
; 293  :         case 's': 
; 294  :          if ( !decflag ) val = 1.2;

	test	ebx, ebx
	jne	SHORT $LN154@view_trans
	fld	QWORD PTR __real@3ff3333333333333
	fstp	QWORD PTR _val$89114[ebp]
$LN154@view_trans:

; 295  :          set_zoom(1/val);

	fld1
	sub	esp, 8
	fdiv	QWORD PTR _val$89114[ebp]
	fstp	QWORD PTR [esp]
	call	_set_zoom

; 296  :          mat_mult(zoom,view,view,HOMDIM,HOMDIM,HOMDIM); break;  

	mov	eax, DWORD PTR _HOMDIM
	mov	edx, DWORD PTR _zoom
	push	eax
	push	eax
	push	eax
	mov	eax, DWORD PTR _view
	push	eax
	push	eax
	push	edx
	call	_mat_mult
	add	esp, 32					; 00000020H
	jmp	$LN4@view_trans
$LN111@view_trans:

; 297  : 
; 298  :         /* MS-DOS arrow keys for translation */
; 299  :         case 30: 
; 300  :          transup[SDIM>2?2:1][HOMDIM-1] = decflag ? val : 0.25;

	fld	QWORD PTR __real@3fd0000000000000
$LN112@view_trans:
	mov	ecx, DWORD PTR _transup
	xor	eax, eax
	cmp	DWORD PTR _web+616, 2
	setg	al
	mov	edx, DWORD PTR [ecx+eax*4+4]
$LN174@view_trans:
	mov	eax, DWORD PTR _HOMDIM
	fstp	QWORD PTR [edx+eax*8-8]
$LN173@view_trans:

; 301  :          mat_mult(transup,  view,view,HOMDIM,HOMDIM,HOMDIM);

	mov	eax, DWORD PTR _HOMDIM
	push	eax
	push	eax
	push	eax
	mov	eax, DWORD PTR _view
	push	eax
	push	eax
	push	ecx
	call	_mat_mult
	add	esp, 24					; 00000018H

; 302  :          break;

	jmp	$LN4@view_trans
$LN70@view_trans:

; 303  : 
; 304  :         case 31: 
; 305  :          transdown[SDIM>2?2:1][HOMDIM-1] = decflag ? -val : -0.25;

	test	ebx, ebx
	je	SHORT $LN113@view_trans
	fld	QWORD PTR _val$89114[ebp]
	fchs
	jmp	SHORT $LN114@view_trans
$LN113@view_trans:
	fld	QWORD PTR __real@bfd0000000000000
$LN114@view_trans:
	mov	ecx, DWORD PTR _transdown
	xor	edx, edx
	cmp	DWORD PTR _web+616, 2
	setg	dl
	mov	eax, DWORD PTR [ecx+edx*4+4]
	mov	edx, DWORD PTR _HOMDIM
	fstp	QWORD PTR [eax+edx*8-8]

; 306  :          mat_mult(transdown,view,view,HOMDIM,HOMDIM,HOMDIM);
; 307  :          break;

	jmp	SHORT $LN173@view_trans
$LN69@view_trans:

; 308  : 
; 309  :         case 28: 
; 310  :          transright[SDIM>2?1:0][HOMDIM-1] = decflag ? val : 0.25;

	test	ebx, ebx
	je	SHORT $LN115@view_trans
	fld	QWORD PTR _val$89114[ebp]
	jmp	SHORT $LN116@view_trans
$LN115@view_trans:
	fld	QWORD PTR __real@3fd0000000000000
$LN116@view_trans:
	mov	ecx, DWORD PTR _transright
	xor	eax, eax
	cmp	DWORD PTR _web+616, 2
	setg	al
	mov	edx, DWORD PTR [ecx+eax*4]

; 311  :          mat_mult(transright,view,view,HOMDIM,HOMDIM,HOMDIM);
; 312  :          break;

	jmp	SHORT $LN174@view_trans
$LN68@view_trans:

; 313  : 
; 314  :         case 29: 
; 315  :          transleft[SDIM>2?1:0][HOMDIM-1] = decflag ? -val : -0.25;

	test	ebx, ebx
	je	SHORT $LN117@view_trans
	fld	QWORD PTR _val$89114[ebp]
	fchs
	jmp	SHORT $LN118@view_trans
$LN117@view_trans:
	fld	QWORD PTR __real@bfd0000000000000
$LN118@view_trans:
	mov	ecx, DWORD PTR _transleft
	xor	edx, edx
	cmp	DWORD PTR _web+616, 2
	setg	dl
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	edx, DWORD PTR _HOMDIM
	fstp	QWORD PTR [eax+edx*8-8]

; 316  :          mat_mult(transleft,view,view,HOMDIM,HOMDIM,HOMDIM);
; 317  :          break;

	jmp	$LN173@view_trans
$LN67@view_trans:

; 318  : 
; 319  :         case 0x1b : /* ANSI arrow keys for translation */
; 320  :           if ( *(++c) != 0x5B )

	mov	al, BYTE PTR [edi+1]
	inc	edi
	cmp	al, 91					; 0000005bH
	je	SHORT $LN66@view_trans

; 321  :              { if ( isprint(*c) )

	movsx	eax, al
	push	eax
	call	_isprint
	add	esp, 4
	test	eax, eax
	je	SHORT $LN65@view_trans

; 322  :                  sprintf(msg,"Unrecognized character:  %c\n",*c);

	movsx	ecx, BYTE PTR [edi]
	mov	edx, DWORD PTR _msg
	push	ecx
	push	OFFSET ??_C@_0BN@JFJGBKPO@Unrecognized?5character?3?5?5?$CFc?6?$AA@
	push	edx
	jmp	SHORT $LN171@view_trans
$LN65@view_trans:

; 323  :                 else sprintf(msg,"Unrecognized character: 0x%04X\n",*c);

	movsx	eax, BYTE PTR [edi]
	mov	ecx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0CA@PNDLJKJL@Unrecognized?5character?3?50x?$CF04X?6?$AA@
	push	ecx
$LN171@view_trans:
	call	_sprintf

; 324  :                 outstring(msg);

	mov	edx, DWORD PTR _msg
	add	esp, 12					; 0000000cH
	push	edx
	call	_outstring
	add	esp, 4

; 325  :                 break;

	jmp	$LN4@view_trans
$LN66@view_trans:

; 326  :              }
; 327  :           switch ( *(++c) )

	movsx	ecx, BYTE PTR [edi+1]
	inc	edi
	lea	eax, DWORD PTR [ecx-65]
	cmp	eax, 3
	ja	SHORT $LN57@view_trans
	jmp	DWORD PTR $LN179@view_trans[eax*4]
$LN61@view_trans:

; 328  :             {
; 329  :                 case 0x41: 
; 330  :                  transup[SDIM>2?2:1][HOMDIM-1] = decflag ? val : 0.25;

	test	ebx, ebx
	je	$LN111@view_trans
	fld	QWORD PTR _val$89114[ebp]
	jmp	$LN112@view_trans
$LN57@view_trans:

; 331  :                  mat_mult(transup,  view,view,HOMDIM,HOMDIM,HOMDIM);
; 332  :                  break;
; 333  : 
; 334  :                 case 0x42: 
; 335  :                  transdown[SDIM>2?2:1][HOMDIM-1] = decflag ? -val : -0.25;
; 336  :                  mat_mult(transdown,view,view,HOMDIM,HOMDIM,HOMDIM);
; 337  :                  break;
; 338  : 
; 339  :                 case 0x43: 
; 340  :                  transright[SDIM>2?1:0][HOMDIM-1] = decflag ? val : 0.25;
; 341  :                  mat_mult(transright,view,view,HOMDIM,HOMDIM,HOMDIM);
; 342  :                  break;
; 343  : 
; 344  :                 case 0x44: 
; 345  :                  transleft[SDIM>2?1:0][HOMDIM-1] = decflag ? -val : -0.25;
; 346  :                  mat_mult(transleft,view,view,HOMDIM,HOMDIM,HOMDIM);
; 347  :                  break;
; 348  : 
; 349  :                 default:
; 350  :                  if ( isprint(*c) )

	push	ecx
	call	_isprint
	add	esp, 4
	test	eax, eax
	je	SHORT $LN56@view_trans

; 351  :                      sprintf(msg,"Unrecognized character:  %c\n",*c); 

	movsx	eax, BYTE PTR [edi]
	mov	ecx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0BN@JFJGBKPO@Unrecognized?5character?3?5?5?$CFc?6?$AA@
	push	ecx
	jmp	SHORT $LN172@view_trans
$LN56@view_trans:

; 352  :                  else  sprintf(msg,"Unrecognized character: 0x%04X \n",*c); 

	movsx	edx, BYTE PTR [edi]
	mov	eax, DWORD PTR _msg
	push	edx
	push	OFFSET ??_C@_0CB@KIBFFKOK@Unrecognized?5character?3?50x?$CF04X?5?6@
	push	eax
$LN172@view_trans:
	call	_sprintf

; 353  :                      outstring(msg);

	mov	ecx, DWORD PTR _msg
	add	esp, 12					; 0000000cH
	push	ecx
	call	_outstring
	add	esp, 4

; 354  :                      break; 
; 355  :              }
; 356  :           break;

	jmp	$LN4@view_trans
$LN48@view_trans:

; 369  : 
; 370  :         case 'm': /* middle, for centering */
; 371  :           { do_gfile(0,NULL); /* get bounding box */

	push	0
	push	0
	call	_do_gfile

; 372  :             if ( SDIM == 2 )
; 373  :              { view[0][HOMDIM-1] -= (bbox_maxx+bbox_minx)/2;

	fld	QWORD PTR _bbox_minx
	fadd	QWORD PTR _bbox_maxx
	mov	edx, DWORD PTR _view
	fld	QWORD PTR __real@3fe0000000000000
	mov	ecx, DWORD PTR _HOMDIM
	add	esp, 8
	cmp	DWORD PTR _web+616, 2
	fmul	ST(1), ST(0)
	jne	SHORT $LN47@view_trans
	mov	eax, DWORD PTR [edx]
	fld	QWORD PTR [eax+ecx*8-8]
	lea	eax, DWORD PTR [eax+ecx*8-8]
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax]

; 374  :                view[1][HOMDIM-1] -= (bbox_maxy+bbox_miny)/2;

	mov	edx, DWORD PTR _view
	mov	eax, DWORD PTR [edx+4]

; 375  :              } else

	jmp	SHORT $LN175@view_trans
$LN47@view_trans:

; 376  :              { view[1][HOMDIM-1] -= (bbox_maxx+bbox_minx)/2;

	mov	eax, DWORD PTR [edx+4]
	fld	QWORD PTR [eax+ecx*8-8]
	lea	eax, DWORD PTR [eax+ecx*8-8]
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax]

; 377  :                view[2][HOMDIM-1] -= (bbox_maxy+bbox_miny)/2;

	mov	edx, DWORD PTR _view
	mov	eax, DWORD PTR [edx+8]
$LN175@view_trans:
	fld	QWORD PTR _bbox_miny
	mov	ecx, DWORD PTR _HOMDIM
	fadd	QWORD PTR _bbox_maxy
	lea	eax, DWORD PTR [eax+ecx*8-8]
	fmulp	ST(1), ST(0)
	fsubr	QWORD PTR [eax]
	fstp	QWORD PTR [eax]

; 378  :              }
; 379  :              break;

	jmp	SHORT $LN4@view_trans
$LN44@view_trans:

; 384  : 
; 385  :         case 't': 
; 386  :               if ( !web.symmetry_flag ) break;

	cmp	DWORD PTR _web+856, 0
	jne	SHORT $LN139@view_trans
$LN4@view_trans:

; 250  : 
; 251  :     while ( reps-- > 0 )

	mov	eax, DWORD PTR _reps$89113[ebp]
	test	eax, eax
	jg	$LL92@view_trans
	jmp	$LN156@view_trans
$LN54@view_trans:

; 357  : 
; 358  :         case 'R':
; 359  :           if ( decflag ) /* particular scaling */

	test	ebx, ebx
	je	SHORT $LN53@view_trans

; 360  :              {  int i;
; 361  :                  matcopy(view,identmat,HOMDIM,HOMDIM);

	mov	eax, DWORD PTR _HOMDIM
	mov	edx, DWORD PTR _identmat
	push	eax
	push	eax
	mov	eax, DWORD PTR _view
	push	edx
	push	eax
	call	_matcopy

; 362  :                  for ( i = 0 ; i < HOMDIM-1 ; i++ ) 

	mov	ecx, DWORD PTR _HOMDIM
	dec	ecx
	add	esp, 16					; 00000010H
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN155@view_trans
	fld	QWORD PTR _val$89114[ebp]
$LN158@view_trans:

; 363  :                     { view[i][i] = val;

	mov	edx, DWORD PTR _view
	mov	ecx, DWORD PTR [edx+eax*4]
	fst	QWORD PTR [ecx+eax*8]
	mov	edx, DWORD PTR _HOMDIM
	inc	eax
	dec	edx
	cmp	eax, edx
	jl	SHORT $LN158@view_trans

; 362  :                  for ( i = 0 ; i < HOMDIM-1 ; i++ ) 

	fstp	ST(0)

; 364  :                     }
; 365  :              }
; 366  :           else resize(); 

	jmp	SHORT $LN155@view_trans
$LN53@view_trans:
	call	_resize
$LN155@view_trans:

; 367  :           reps = 0;  graph_timestamp = ++global_timestamp;

	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _graph_timestamp, eax

; 368  :           break;

	jmp	$LN156@view_trans
$LN139@view_trans:

; 387  :               ask_wrap_display(); graph_timestamp = ++global_timestamp;

	call	_ask_wrap_display

; 388  :              reps = 0; break;

	jmp	SHORT $LN155@view_trans
$LN42@view_trans:

; 389  : 
; 390  :         case 'B': if ( strncmp(c+1,"(on)",4) == 0 )

	push	4
	lea	esi, DWORD PTR [edi+1]
	push	OFFSET ??_C@_04KNCGPCLD@?$CIon?$CJ?$AA@
	push	esi
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN41@view_trans

; 391  :                   { bdry_showflag = 1; c += 4; }

	mov	DWORD PTR _bdry_showflag, 1
	add	edi, 4
	jmp	SHORT $LN155@view_trans
$LN41@view_trans:

; 392  :                   else if ( strncmp(c+1,"(off)",4) == 0 )

	push	4
	push	OFFSET ??_C@_05KIPBLJDN@?$CIoff?$CJ?$AA@
	push	esi
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN39@view_trans

; 393  :                   { bdry_showflag = 0; c += 5; }

	mov	DWORD PTR _bdry_showflag, eax
	add	edi, 5

; 394  :                   else 

	jmp	SHORT $LN155@view_trans
$LN39@view_trans:

; 395  :                   { bdry_showflag = !bdry_showflag; }

	xor	eax, eax
	cmp	DWORD PTR _bdry_showflag, eax
	sete	al
	mov	DWORD PTR _bdry_showflag, eax

; 396  :                   graph_timestamp = ++global_timestamp;
; 397  :                   reps = 0; break;

	jmp	SHORT $LN155@view_trans
$LN37@view_trans:

; 398  : 
; 399  :         case 'v': if ( strncmp(c+1,"(on)",4) == 0 )

	push	4
	lea	esi, DWORD PTR [edi+1]
	push	OFFSET ??_C@_04KNCGPCLD@?$CIon?$CJ?$AA@
	push	esi
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN36@view_trans

; 400  :                   { ridge_color_flag = 1; c += 4; }

	mov	DWORD PTR _ridge_color_flag, 1
	add	edi, 4
	jmp	$LN155@view_trans
$LN36@view_trans:

; 401  :                   else if ( strncmp(c+1,"(off)",4) == 0 )

	push	4
	push	OFFSET ??_C@_05KIPBLJDN@?$CIoff?$CJ?$AA@
	push	esi
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN34@view_trans

; 402  :                   { ridge_color_flag = 0; c += 5; }

	mov	DWORD PTR _ridge_color_flag, eax
	add	edi, 5

; 403  :                   else 

	jmp	$LN155@view_trans
$LN34@view_trans:

; 404  :                   { ridge_color_flag = !ridge_color_flag;}

	xor	ecx, ecx
	cmp	DWORD PTR _ridge_color_flag, ecx
	sete	cl
	mov	DWORD PTR _ridge_color_flag, ecx

; 405  :                   reps = 0;
; 406  :                   graph_timestamp = ++global_timestamp; 
; 407  :                   break;

	jmp	$LN155@view_trans
$LN32@view_trans:

; 408  : 
; 409  :         case 'w': if ( strncmp(c+1,"(on)",4) == 0 )

	push	4
	lea	esi, DWORD PTR [edi+1]
	push	OFFSET ??_C@_04KNCGPCLD@?$CIon?$CJ?$AA@
	push	esi
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN31@view_trans

; 410  :                   { no_wall_flag = 1; c += 4; }

	mov	DWORD PTR _no_wall_flag, 1
	add	edi, 4
	jmp	$LN155@view_trans
$LN31@view_trans:

; 411  :                   else if ( strncmp(c+1,"(off)",4) == 0 )

	push	4
	push	OFFSET ??_C@_05KIPBLJDN@?$CIoff?$CJ?$AA@
	push	esi
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN29@view_trans

; 412  :                   { no_wall_flag = 0; c += 5; }

	mov	DWORD PTR _no_wall_flag, eax
	add	edi, 5

; 413  :                   else 

	jmp	$LN155@view_trans
$LN29@view_trans:

; 414  :                   { no_wall_flag = !no_wall_flag; }

	xor	edx, edx
	cmp	DWORD PTR _no_wall_flag, edx
	sete	dl
	mov	DWORD PTR _no_wall_flag, edx

; 415  :                   reps = 0;  
; 416  :                   graph_timestamp = ++global_timestamp;
; 417  :                   break;

	jmp	$LN155@view_trans
$LN27@view_trans:

; 418  : 
; 419  :         case 'b': if ( strncmp(c+1,"(on)",4) == 0 )

	push	4
	lea	esi, DWORD PTR [edi+1]
	push	OFFSET ??_C@_04KNCGPCLD@?$CIon?$CJ?$AA@
	push	esi
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN26@view_trans

; 420  :                   { box_flag = 1; c += 4; }

	mov	DWORD PTR _box_flag, 1
	add	edi, 4
	jmp	$LN155@view_trans
$LN26@view_trans:

; 421  :                   else if ( strncmp(c+1,"(off)",4) == 0 )

	push	4
	push	OFFSET ??_C@_05KIPBLJDN@?$CIoff?$CJ?$AA@
	push	esi
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN24@view_trans

; 422  :                   { box_flag = 0; c += 5; }

	mov	DWORD PTR _box_flag, eax
	add	edi, 5

; 423  :                   else 

	jmp	$LN155@view_trans
$LN24@view_trans:

; 424  :                   { box_flag = !box_flag; }

	xor	eax, eax
	cmp	DWORD PTR _box_flag, eax
	sete	al
	mov	DWORD PTR _box_flag, eax

; 425  :                   reps = 0; 
; 426  :                   graph_timestamp = ++global_timestamp; break;

	jmp	$LN155@view_trans
$LN22@view_trans:

; 427  : 
; 428  :         case 'e': if ( strncmp(c+1,"(on)",4) == 0 )

	push	4
	lea	esi, DWORD PTR [edi+1]
	push	OFFSET ??_C@_04KNCGPCLD@?$CIon?$CJ?$AA@
	push	esi
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN21@view_trans

; 429  :                   { edgeshow_flag = 1; c += 4; }

	mov	DWORD PTR _edgeshow_flag, 1
	add	edi, 4
	jmp	$LN155@view_trans
$LN21@view_trans:

; 430  :                   else if ( strncmp(c+1,"(off)",4) == 0 )

	push	4
	push	OFFSET ??_C@_05KIPBLJDN@?$CIoff?$CJ?$AA@
	push	esi
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN19@view_trans

; 431  :                   { edgeshow_flag = 0; c += 5; }

	mov	DWORD PTR _edgeshow_flag, eax
	add	edi, 5

; 432  :                   else 

	jmp	$LN155@view_trans
$LN19@view_trans:

; 433  :                   { edgeshow_flag = !edgeshow_flag; } 

	xor	ecx, ecx
	cmp	DWORD PTR _edgeshow_flag, ecx
	sete	cl
	mov	DWORD PTR _edgeshow_flag, ecx

; 434  :                   graph_timestamp = ++global_timestamp; reps = 0;
; 435  :                   break;

	jmp	$LN155@view_trans
$LN17@view_trans:

; 436  : 
; 437  :         case 'E': if ( strncmp(c+1,"(on)",4) == 0 )

	push	4
	lea	esi, DWORD PTR [edi+1]
	push	OFFSET ??_C@_04KNCGPCLD@?$CIon?$CJ?$AA@
	push	esi
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN16@view_trans

; 438  :                   { triple_edgeshow_flag = 1; c += 4; }

	mov	DWORD PTR _triple_edgeshow_flag, 1
	add	edi, 4
	jmp	$LN155@view_trans
$LN16@view_trans:

; 439  :                   else if ( strncmp(c+1,"(off)",4) == 0 )

	push	4
	push	OFFSET ??_C@_05KIPBLJDN@?$CIoff?$CJ?$AA@
	push	esi
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN14@view_trans

; 440  :                   { triple_edgeshow_flag = 0; c += 5; }

	mov	DWORD PTR _triple_edgeshow_flag, eax
	add	edi, 5

; 441  :                   else 

	jmp	$LN155@view_trans
$LN14@view_trans:

; 442  :                   { triple_edgeshow_flag = !triple_edgeshow_flag; }

	xor	edx, edx
	cmp	DWORD PTR _triple_edgeshow_flag, edx
	sete	dl
	mov	DWORD PTR _triple_edgeshow_flag, edx

; 443  :                   graph_timestamp = ++global_timestamp; 
; 444  :                   reps = 0; break;

	jmp	$LN155@view_trans
$LN12@view_trans:

; 445  : 
; 446  :         case 'T': if ( strncmp(c+1,"(on)",4) == 0 )

	push	4
	lea	esi, DWORD PTR [edi+1]
	push	OFFSET ??_C@_04KNCGPCLD@?$CIon?$CJ?$AA@
	push	esi
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN11@view_trans

; 447  :                   { transforms_flag = 1; c += 4; }

	mov	DWORD PTR _transforms_flag, 1
	add	edi, 4
	jmp	$LN155@view_trans
$LN11@view_trans:

; 448  :                   else if ( strncmp(c+1,"(off)",4) == 0 )

	push	4
	push	OFFSET ??_C@_05KIPBLJDN@?$CIoff?$CJ?$AA@
	push	esi
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN9@view_trans

; 449  :                   { transforms_flag = 0; c += 5; }

	mov	DWORD PTR _transforms_flag, eax
	add	edi, 5

; 450  :                   else 

	jmp	$LN155@view_trans
$LN9@view_trans:

; 451  :                   transforms_flag = !transforms_flag; 

	xor	eax, eax
	cmp	DWORD PTR _transforms_flag, eax
	sete	al
	mov	DWORD PTR _transforms_flag, eax

; 452  :                   graph_timestamp = ++global_timestamp;
; 453  :                   reps = 0; break;

	jmp	$LN155@view_trans
$LN7@view_trans:

; 454  : 
; 455  :         case '+': fillcolor++;

	mov	eax, DWORD PTR _fillcolor

; 456  :                   sprintf(msg,"fillcolor %d\n",fillcolor);

	mov	ecx, DWORD PTR _msg
	inc	eax
	push	eax
	push	OFFSET ??_C@_0O@ECONJICN@fillcolor?5?$CFd?6?$AA@
	push	ecx
	mov	DWORD PTR _fillcolor, eax
	call	_sprintf

; 457  :                   outstring(msg); 

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 16					; 00000010H

; 458  :                   graph_timestamp = ++global_timestamp;
; 459  :                   reps = 0; break;

	jmp	$LN155@view_trans
$LN6@view_trans:

; 460  : 
; 461  :         case '-': fillcolor--;

	mov	eax, DWORD PTR _fillcolor
	dec	eax

; 462  :                   sprintf(msg,"fillcolor %d\n",fillcolor);

	push	eax
	mov	DWORD PTR _fillcolor, eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0O@ECONJICN@fillcolor?5?$CFd?6?$AA@
	push	eax
	call	_sprintf

; 463  :                   outstring(msg); 

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 16					; 00000010H

; 464  :                   graph_timestamp = ++global_timestamp;
; 465  :                   reps = 0; break;

	jmp	$LN155@view_trans
$LN5@view_trans:

; 466  : 
; 467  :         case '?': 
; 468  :         case 'h':
; 469  :                   graph_help();

	call	_graph_help

; 470  :                   showflag = 0;
; 471  :                   reps = 0; break;

	jmp	SHORT $LN176@view_trans
$LN3@view_trans:

; 472  : 
; 473  :         case '\n': case '\r': break;
; 474  :         default:  
; 475  :                   if ( isprint(*c) )

	movsx	edx, BYTE PTR [edi]
	push	edx
	call	_isprint
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@view_trans

; 476  :                      sprintf(msg,"Unrecognized letter: %c\n",*c);

	movsx	eax, BYTE PTR [edi]
	mov	ecx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0BJ@PHCFDKMO@Unrecognized?5letter?3?5?$CFc?6?$AA@
	push	ecx
	jmp	SHORT $LN177@view_trans
$LN2@view_trans:

; 477  :                   else  sprintf(msg,"Unrecognized character: 0x%04x \n",*c);

	movsx	edx, BYTE PTR [edi]
	mov	eax, DWORD PTR _msg
	push	edx
	push	OFFSET ??_C@_0CB@ICHPFNE@Unrecognized?5character?3?50x?$CF04x?5?6@
	push	eax
$LN177@view_trans:
	call	_sprintf

; 478  :                   outstring(msg);

	mov	ecx, DWORD PTR _msg
	add	esp, 12					; 0000000cH
	push	ecx
	call	_outstring
	add	esp, 4
$LN176@view_trans:

; 479  :                   reps = 0; showflag = 0;

	mov	DWORD PTR _showflag, 0
$LN156@view_trans:

; 228  :   }
; 229  : 
; 230  :   for ( c = string ; *c ; c++ )

	inc	edi
	cmp	BYTE PTR [edi], 0
	jne	$LL107@view_trans
$LN105@view_trans:
	pop	ebx
	pop	edi

; 480  :                   break;
; 481  : 
; 482  :       }
; 483  :   }
; 484  : 
; 485  :   return 1;

	mov	eax, 1
	pop	esi

; 486  : } /* end view_transform() */

	mov	esp, ebp
	pop	ebp
	ret	0
$LN45@view_trans:
	pop	ebx
	pop	edi

; 380  :           }
; 381  : 
; 382  :         case 'x':
; 383  :         case 'q': return 0;      

	xor	eax, eax
	pop	esi

; 486  : } /* end view_transform() */

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN178@view_trans:
	DD	$LN105@view_trans
	DD	$LN4@view_trans
	DD	$LN67@view_trans
	DD	$LN69@view_trans
	DD	$LN68@view_trans
	DD	$LN61@view_trans
	DD	$LN70@view_trans
	DD	$LN7@view_trans
	DD	$LN6@view_trans
	DD	$LN5@view_trans
	DD	$LN42@view_trans
	DD	$LN77@view_trans
	DD	$LN17@view_trans
	DD	$LN54@view_trans
	DD	$LN12@view_trans
	DD	$LN27@view_trans
	DD	$LN79@view_trans
	DD	$LN85@view_trans
	DD	$LN22@view_trans
	DD	$LN81@view_trans
	DD	$LN48@view_trans
	DD	$LN45@view_trans
	DD	$LN83@view_trans
	DD	$LN73@view_trans
	DD	$LN44@view_trans
	DD	$LN87@view_trans
	DD	$LN37@view_trans
	DD	$LN32@view_trans
	DD	$LN75@view_trans
	DD	$LN3@view_trans
$LN143@view_trans:
	DB	0
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	1
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	1
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	7
	DB	29					; 0000001dH
	DB	8
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	9
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	29					; 0000001dH
	DB	12					; 0000000cH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	13					; 0000000dH
	DB	29					; 0000001dH
	DB	14					; 0000000eH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	15					; 0000000fH
	DB	16					; 00000010H
	DB	17					; 00000011H
	DB	18					; 00000012H
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	9
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	19					; 00000013H
	DB	20					; 00000014H
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	29					; 0000001dH
	DB	21					; 00000015H
	DB	22					; 00000016H
	DB	23					; 00000017H
	DB	24					; 00000018H
	DB	25					; 00000019H
	DB	26					; 0000001aH
	DB	27					; 0000001bH
	DB	21					; 00000015H
	DB	29					; 0000001dH
	DB	28					; 0000001cH
	npad	1
$LN179@view_trans:
	DD	$LN61@view_trans
	DD	$LN70@view_trans
	DD	$LN69@view_trans
	DD	$LN68@view_trans
_view_transform ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@PJAGEKAI@Graphics?5command?3?5?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_do_show
EXTRN	_line_no:DWORD
EXTRN	_iterate_flag:DWORD
;	COMDAT ??_C@_0BD@PJAGEKAI@Graphics?5command?3?5?$AA@
CONST	SEGMENT
??_C@_0BD@PJAGEKAI@Graphics?5command?3?5?$AA@ DB 'Graphics command: ', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _do_show
_TEXT	SEGMENT
_line$ = -1004						; size = 1000
__$ArrayPad$ = -4					; size = 4
_do_show PROC						; COMDAT

; 89   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1004				; 000003ecH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 90   :   char line[1000]; /* for reading user commands */
; 91   :   int old_flag = iterate_flag;
; 92   : 
; 93   : #ifdef MAC_OS_X
; 94   :   do_show_flag++;  /* kludge so mac_exec_commands() does do_show() again */
; 95   : #endif
; 96   : 
; 97   : #ifndef OPENGL
; 98   :   /* to prevent unnecessary recalculation of display */
; 99   :   graph_timestamp = ++global_timestamp;  /* new surface */
; 100  : #endif
; 101  : 
; 102  :   if ( torus_display_mode == TORUS_DEFAULT_MODE ) ask_wrap_display();

	cmp	DWORD PTR _torus_display_mode, 0
	push	ebx
	mov	ebx, DWORD PTR _iterate_flag
	push	esi
	jne	SHORT $LN7@do_show
	call	_ask_wrap_display
$LN7@do_show:

; 103  : 
; 104  :   /* main loop */
; 105  :   showflag = 1;

	mov	esi, 1
	mov	DWORD PTR _showflag, esi
$LL6@do_show:

; 106  :   do
; 107  :     { 
; 108  :       iterate_flag = 2;
; 109  :       if ( showflag ) display();

	cmp	DWORD PTR _showflag, 0
	mov	DWORD PTR _iterate_flag, 2
	je	SHORT $LN3@do_show
	call	_display
$LN3@do_show:

; 110  :       showflag = 1; /* default to show next time around, unless option
; 111  :                              below decides otherwise */
; 112  : #ifdef MOTIF
; 113  :       return;
; 114  : #endif
; 115  :       if ( prompt("Graphics command: ",line,sizeof(line)) == EOF ) 

	push	1000					; 000003e8H
	lea	eax, DWORD PTR _line$[ebp]
	push	eax
	push	OFFSET ??_C@_0BD@PJAGEKAI@Graphics?5command?3?5?$AA@
	mov	DWORD PTR _showflag, esi
	call	_prompt
	add	esp, 12					; 0000000cH
	cmp	eax, -1
	je	SHORT $LN12@do_show

; 116  :         break;
; 117  :       else line_no++;

	add	DWORD PTR _line_no, esi

; 118  :      }
; 119  :     while ( view_transform(line) );

	lea	ecx, DWORD PTR _line$[ebp]
	push	ecx
	call	_view_transform
	add	esp, 4
	test	eax, eax
	jne	SHORT $LL6@do_show
$LN12@do_show:

; 120  :     iterate_flag = old_flag;
; 121  : 
; 122  : } // end do_show()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	esi
	mov	DWORD PTR _iterate_flag, ebx
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_do_show ENDP
_TEXT	ENDS
END
