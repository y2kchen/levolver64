; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\COMMAND.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_set_attr
EXTRN	_web:BYTE
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
;	COMDAT _set_attr
_TEXT	SEGMENT
_id$ = 8						; size = 4
_attrib$ = 12						; size = 8
_set_attr PROC						; COMDAT

; 21   : {

	push	ebp
	mov	ebp, esp

; 22   :   elptr(id)->attr |= attrib;

	mov	eax, DWORD PTR _id$[ebp]
	mov	ecx, eax
	shr	ecx, 29					; 0000001dH
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _web[ecx+12]
	mov	ecx, DWORD PTR _attrib$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _attrib$[ebp+4]
	or	DWORD PTR [eax+8], ecx
	or	DWORD PTR [eax+12], edx

; 23   : }

	pop	ebp
	ret	0
_set_attr ENDP
_TEXT	ENDS
PUBLIC	_unset_attr
; Function compile flags: /Ogtp
;	COMDAT _unset_attr
_TEXT	SEGMENT
_id$ = 8						; size = 4
_attrib$ = 12						; size = 8
_unset_attr PROC					; COMDAT

; 28   : {

	push	ebp
	mov	ebp, esp

; 29   :   elptr(id)->attr &= ~attrib;

	mov	eax, DWORD PTR _id$[ebp]
	mov	ecx, eax
	shr	ecx, 29					; 0000001dH
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _web[ecx+12]
	mov	ecx, DWORD PTR _attrib$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _attrib$[ebp+4]
	not	ecx
	and	DWORD PTR [eax+8], ecx
	not	edx
	and	DWORD PTR [eax+12], edx

; 30   : }

	pop	ebp
	ret	0
_unset_attr ENDP
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	_get_body_volume
EXTRN	__fltused:DWORD
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _get_body_volume
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_volume PROC					; COMDAT

; 308  :     { return    ( valid_id(b_id) ?  bptr(b_id)->volume : 0.0 ) ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_v
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+40]
	pop	ebp
	ret	0
$LN3@get_body_v:
	fldz
	pop	ebp
	ret	0
_get_body_volume ENDP
_TEXT	ENDS
PUBLIC	_get_body_fixvol
; Function compile flags: /Ogtp
;	COMDAT _get_body_fixvol
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_fixvol PROC					; COMDAT

; 311  :      { return ( valid_id(b_id) ?  bptr(b_id)->fixvol : 0.0 ) ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_f
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+32]
	pop	ebp
	ret	0
$LN3@get_body_f:
	fldz
	pop	ebp
	ret	0
_get_body_fixvol ENDP
_TEXT	ENDS
PUBLIC	_get_body_pressure
; Function compile flags: /Ogtp
;	COMDAT _get_body_pressure
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_pressure PROC					; COMDAT

; 317  :     { return  ( valid_id(b_id) ?    bptr(b_id)->pressure : 0.0 ) ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_p
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+312]
	pop	ebp
	ret	0
$LN3@get_body_p:
	fldz
	pop	ebp
	ret	0
_get_body_pressure ENDP
_TEXT	ENDS
PUBLIC	_set_body_pressure
; Function compile flags: /Ogtp
;	COMDAT _set_body_pressure
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_v$ = 12						; size = 8
_set_body_pressure PROC					; COMDAT

; 326  :       {         ( valid_id(b_id) ?  bptr(b_id)->pressure = (v) : 0.0 ) ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@set_body_p
	mov	ecx, DWORD PTR _web+348
	fld	QWORD PTR _v$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fstp	QWORD PTR [edx+312]
$LN3@set_body_p:
	pop	ebp
	ret	0
_set_body_pressure ENDP
_TEXT	ENDS
PUBLIC	_get_extra
EXTRN	_dymem:DWORD
; Function compile flags: /Ogtp
;	COMDAT _get_extra
_TEXT	SEGMENT
_id$ = 8						; size = 4
_n$ = 12						; size = 4
_get_extra PROC						; COMDAT

; 348  : { int type = id_type(id);

	push	ebp
	mov	ebp, esp

; 349  : 
; 350  :   return ( (char*)elptr(id) + EXTRAS(type)[n].offset);

	mov	ecx, DWORD PTR _id$[ebp]
	mov	eax, ecx
	push	esi
	mov	esi, DWORD PTR _n$[ebp]
	shr	eax, 29					; 0000001dH
	imul	esi, 240				; 000000f0H
	imul	eax, 112				; 00000070H
	mov	edx, DWORD PTR _web[eax+12]
	push	edi
	mov	edi, DWORD PTR _web[eax+104]
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _dymem
	add	edi, esi
	add	eax, DWORD PTR [edi+ecx+64]
	pop	edi
	pop	esi

; 351  : }

	pop	ebp
	ret	0
_get_extra ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@PMHAOABE@old_force_ribiere?$AA@	; `string'
PUBLIC	_reset_conj_grad
EXTRN	_add_attribute:PROC
EXTRN	_find_attribute:PROC
EXTRN	_ribiere_flag:DWORD
EXTRN	_cg_oldsum:QWORD
EXTRN	_conj_grad_flag:DWORD
EXTRN	_myfree:PROC
EXTRN	_cg_hvector:DWORD
;	COMDAT ??_C@_0BC@PMHAOABE@old_force_ribiere?$AA@
CONST	SEGMENT
??_C@_0BC@PMHAOABE@old_force_ribiere?$AA@ DB 'old_force_ribiere', 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\command.c
CONST	ENDS
;	COMDAT _reset_conj_grad
_TEXT	SEGMENT
_size$ = -8						; size = 4
_r_attr$89079 = -4					; size = 4
_reset_conj_grad PROC					; COMDAT

; 83   : { int i;

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 84   :   vertex_id v_id;
; 85   :   int size = SDIM;

	mov	eax, DWORD PTR _web+616
	mov	DWORD PTR _size$[ebp], eax

; 86   : 
; 87   : #ifdef MPI_EVOLVER
; 88   :   if ( this_task == MASTER_TASK )
; 89   :   { struct mpi_command message;
; 90   :     message.cmd = mpi_RESET_CONJ_GRAD;
; 91   :     message.mode = ribiere_flag;
; 92   :     MPI_Bcast(&message,sizeof(struct mpi_command),MPI_BYTE,MASTER_TASK,
; 93   :           MPI_COMM_WORLD);
; 94   :   }
; 95   : #endif
; 96   :   /* reset conjugate gradient */
; 97   :   if ( cg_hvector ) myfree((char *)cg_hvector);

	mov	eax, DWORD PTR _cg_hvector
	test	eax, eax
	je	SHORT $LN11@reset_conj
	push	eax
	call	_myfree
	add	esp, 4
$LN11@reset_conj:

; 98   :   cg_hvector = NULL;
; 99   :   cg_oldsum = 0.0;
; 100  :   if ( conj_grad_flag && ( ribiere_flag ) )

	cmp	DWORD PTR _conj_grad_flag, 0
	fldz
	fstp	QWORD PTR _cg_oldsum
	mov	DWORD PTR _cg_hvector, 0
	je	$LN6@reset_conj
	cmp	DWORD PTR _ribiere_flag, 0
	je	$LN6@reset_conj

; 101  :   { int r_attr = find_attribute(VERTEX,RIBIERE_ATTR_NAME);

	push	OFFSET ??_C@_0BC@PMHAOABE@old_force_ribiere?$AA@
	push	0
	call	_find_attribute
	add	esp, 8
	mov	DWORD PTR _r_attr$89079[ebp], eax

; 102  :      if ( r_attr == -1 )

	cmp	eax, -1
	jne	SHORT $LN20@reset_conj

; 103  :      { add_attribute(VERTEX,RIBIERE_ATTR_NAME,REAL_TYPE,1,&size,0,NULL,MPI_NO_PROPAGATE);

	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _size$[ebp]
	push	ecx
	push	1
	push	1
	push	OFFSET ??_C@_0BC@PMHAOABE@old_force_ribiere?$AA@
	push	0
	call	_add_attribute

; 104  :        r_attr = find_attribute(VERTEX,RIBIERE_ATTR_NAME);

	push	OFFSET ??_C@_0BC@PMHAOABE@old_force_ribiere?$AA@
	push	0
	call	_find_attribute
	add	esp, 40					; 00000028H
	mov	DWORD PTR _r_attr$89079[ebp], eax
$LN20@reset_conj:

; 105  :      }
; 106  :      FOR_ALL_VERTICES(v_id)

	push	esi
	mov	esi, DWORD PTR _web+48
	test	esi, 268435456				; 10000000H
	je	SHORT $LN22@reset_conj
	mov	eax, DWORD PTR _web+12
	fldz
	push	ebx
	mov	ebx, DWORD PTR _web+616
	push	edi
$LN21@reset_conj:
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	add	edx, edx
	add	edx, edx
	mov	ecx, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [ecx+8]
	and	ecx, 1
	xor	edi, edi
	or	ecx, edi
	je	SHORT $LN7@reset_conj

; 107  :      { REAL *g = (REAL*)get_extra(v_id,r_attr);

	mov	ecx, DWORD PTR _r_attr$89079[ebp]
	shr	esi, 29					; 0000001dH
	imul	ecx, 240				; 000000f0H
	imul	esi, 112				; 00000070H
	mov	edi, DWORD PTR _web[esi+104]
	mov	esi, DWORD PTR _web[esi+12]
	add	edi, ecx
	mov	ecx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [edi+ecx+64]
	add	ecx, DWORD PTR [esi+edx]

; 108  :        for ( i = 0 ; i < SDIM ; i++ ) g[i] = 0.0;

	xor	esi, esi
	test	ebx, ebx
	jle	SHORT $LN7@reset_conj
$LN3@reset_conj:
	fst	QWORD PTR [ecx+esi*8]
	mov	ebx, DWORD PTR _web+616
	inc	esi
	cmp	esi, ebx
	jl	SHORT $LN3@reset_conj
	mov	eax, DWORD PTR _web+12
$LN7@reset_conj:

; 105  :      }
; 106  :      FOR_ALL_VERTICES(v_id)

	mov	edx, DWORD PTR [edx+eax]
	mov	esi, DWORD PTR [edx]
	test	esi, 268435456				; 10000000H
	jne	SHORT $LN21@reset_conj
	pop	edi
	fstp	ST(0)
	pop	ebx
$LN22@reset_conj:
	pop	esi
$LN6@reset_conj:

; 109  :      }
; 110  :   }
; 111  : } /* end reset_conj_grad() */  

	mov	esp, ebp
	pop	ebp
	ret	0
_reset_conj_grad ENDP
_TEXT	ENDS
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_0BI@OMDOJFKN@extrapolation?3?5?$CF19?415f?6?$AA@ ; `string'
PUBLIC	??_C@_0CD@KHNPJDBL@refinement?3?5?$CF1d?5?5energy?3?5?$CF19?415f@ ; `string'
PUBLIC	_extrapolate
EXTRN	_outstring:PROC
EXTRN	_sprintf:PROC
EXTRN	_msg:DWORD
EXTRN	_extrap_val:BYTE
EXTRN	_reflevel:DWORD
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OMDOJFKN@extrapolation?3?5?$CF19?415f?6?$AA@
CONST	SEGMENT
??_C@_0BI@OMDOJFKN@extrapolation?3?5?$CF19?415f?6?$AA@ DB 'extrapolation:'
	DB	' %19.15f', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KHNPJDBL@refinement?3?5?$CF1d?5?5energy?3?5?$CF19?415f@
CONST	SEGMENT
??_C@_0CD@KHNPJDBL@refinement?3?5?$CF1d?5?5energy?3?5?$CF19?415f@ DB 'ref'
	DB	'inement: %1d  energy: %19.15f  ', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _extrapolate
_TEXT	SEGMENT
_extrapolate PROC					; COMDAT

; 884  : {

	push	esi

; 885  :   int m;
; 886  :   REAL d1,d2,ext;
; 887  : 
; 888  :   for ( m = 0 ; m <= reflevel ; m++ )

	xor	esi, esi
	cmp	DWORD PTR _reflevel, esi
	jl	$LN3@extrapolat
	npad	1
$LL5@extrapolat:

; 889  :   { 
; 890  : #ifdef FLOAT128
; 891  :     sprintf(msg,"refinement: %1d  energy: %*.*Qg  ",m,DWIDTH,DPREC,extrap_val[m]);
; 892  : #elif defined(LONGDOUBLE)
; 893  :     sprintf(msg,"refinement: %1d  energy: %*.*Lg  ",m,DWIDTH,DPREC,extrap_val[m]);
; 894  : #else
; 895  :     sprintf(msg,"refinement: %1d  energy: %19.15f  ",m,extrap_val[m]);

	fld	QWORD PTR _extrap_val[esi*8]
	mov	eax, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	esi
	push	OFFSET ??_C@_0CD@KHNPJDBL@refinement?3?5?$CF1d?5?5energy?3?5?$CF19?415f@
	push	eax
	call	_sprintf

; 896  : #endif
; 897  :     outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 24					; 00000018H

; 898  :     if ( m > 1 ) /* can extrapolate */

	cmp	esi, 1
	jle	SHORT $LN2@extrapolat

; 899  :       { d1 = extrap_val[m-1] - extrap_val[m-2];
; 900  :          d2 = extrap_val[m] - extrap_val[m-1];

	fld	QWORD PTR _extrap_val[esi*8]

; 901  :          ext = extrap_val[m] - d2*d2/(d2 - d1);
; 902  : #ifdef FLOAT128
; 903  :          sprintf(msg,"extrapolation: %*.*Qg\n",DWIDTH,DPREC,ext);
; 904  : #elif defined(LONGDOUBLE)
; 905  :          sprintf(msg,"extrapolation: %*.*Lg\n",DWIDTH,DPREC,ext);
; 906  : #else
; 907  :          sprintf(msg,"extrapolation: %19.15f\n",ext);

	mov	edx, DWORD PTR _msg
	fsub	QWORD PTR _extrap_val[esi*8-8]
	sub	esp, 8
	fld	ST(0)
	fmul	ST(0), ST(1)
	fld	QWORD PTR _extrap_val[esi*8-8]
	fsub	QWORD PTR _extrap_val[esi*8-16]
	fsubp	ST(2), ST(0)
	fdivrp	ST(1), ST(0)
	fsubr	QWORD PTR _extrap_val[esi*8]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BI@OMDOJFKN@extrapolation?3?5?$CF19?415f?6?$AA@
	push	edx
	call	_sprintf

; 908  : #endif
; 909  :          outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 20					; 00000014H
	jmp	SHORT $LN4@extrapolat
$LN2@extrapolat:

; 910  :       }
; 911  :     else outstring("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	add	esp, 4
$LN4@extrapolat:

; 885  :   int m;
; 886  :   REAL d1,d2,ext;
; 887  : 
; 888  :   for ( m = 0 ; m <= reflevel ; m++ )

	inc	esi
	cmp	esi, DWORD PTR _reflevel
	jle	$LL5@extrapolat
$LN3@extrapolat:
	pop	esi

; 912  :   }
; 913  : } // end extrapolate()

	ret	0
_extrapolate ENDP
_TEXT	ENDS
PUBLIC	_recalc_verts
EXTRN	_project_v_constr:PROC
EXTRN	_eval:PROC
EXTRN	_V_BOUNDARY_ATTR:DWORD
EXTRN	_thread_launch:PROC
EXTRN	_threadflag:DWORD
; Function compile flags: /Ogtp
;	COMDAT _recalc_verts
_TEXT	SEGMENT
tv229 = -16						; size = 4
tv235 = -12						; size = 8
tv330 = -8						; size = 4
_v_id$ = -4						; size = 4
_recalc_verts PROC					; COMDAT

; 925  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 926  :   vertex_id v_id;
; 927  : 
; 928  :   if ( threadflag )

	cmp	DWORD PTR _threadflag, 0
	je	SHORT $LN12@recalc_ver

; 929  :     thread_launch(TH_PROJECT_ALL_ACTUAL,VERTEX);

	push	0
	push	2
	call	_thread_launch
	add	esp, 8

; 944  :   }
; 945  : } // end recalc_verts()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@recalc_ver:
	push	esi

; 930  :   else
; 931  :   FOR_ALL_VERTICES(v_id)

	mov	esi, DWORD PTR _web+48
	mov	DWORD PTR _v_id$[ebp], esi
	test	esi, 268435456				; 10000000H
	je	$LN26@recalc_ver
	mov	edx, DWORD PTR _web+12
	push	ebx
	push	edi
	jmp	SHORT $LN10@recalc_ver
	npad	1
$LL21@recalc_ver:
	mov	esi, DWORD PTR _v_id$[ebp]
$LN10@recalc_ver:
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	edi, DWORD PTR [esi+edx]
	mov	eax, DWORD PTR [edi+12]
	mov	ecx, DWORD PTR [edi+8]
	mov	DWORD PTR tv235[ebp+4], eax
	mov	eax, ecx
	and	eax, 1
	xor	ebx, ebx
	or	eax, ebx
	mov	DWORD PTR tv229[ebp], esi
	je	$LN9@recalc_ver

; 932  :   {
; 933  :     if ( get_vattr(v_id) & BOUNDARY )

	and	ecx, 128				; 00000080H
	xor	eax, eax
	or	ecx, eax
	je	$LN24@recalc_ver

; 934  :      { struct boundary *boundary = get_boundary(v_id);

	mov	eax, DWORD PTR _V_BOUNDARY_ATTR
	mov	ecx, DWORD PTR _web+104
	mov	ebx, DWORD PTR _dymem
	test	eax, eax
	je	SHORT $LN15@recalc_ver
	imul	eax, 240				; 000000f0H
	add	eax, ecx
	mov	eax, DWORD PTR [eax+ebx+64]
	mov	eax, DWORD PTR [eax+edi]
	imul	eax, 136				; 00000088H
	add	eax, DWORD PTR _web+776
	jmp	SHORT $LN16@recalc_ver
$LN15@recalc_ver:
	xor	eax, eax
$LN16@recalc_ver:

; 935  :         REAL *param = get_param(v_id);

	mov	esi, edi
	mov	edi, DWORD PTR [ecx+ebx+544]

; 936  :         REAL *x = get_coord(v_id);

	mov	ebx, DWORD PTR [ecx+ebx+64]
	add	edi, esi
	add	ebx, esi

; 937  :         int j;
; 938  :         
; 939  :         for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	cmp	DWORD PTR _web+616, esi
	jle	SHORT $LN23@recalc_ver

; 935  :         REAL *param = get_param(v_id);

	add	eax, 48					; 00000030H
	mov	DWORD PTR tv330[ebp], eax
$LL22@recalc_ver:

; 940  :          x[j] = eval(boundary->coordf[j],param,v_id,NULL);

	mov	ecx, DWORD PTR _v_id$[ebp]
	mov	edx, DWORD PTR tv330[ebp]
	mov	eax, DWORD PTR [edx]
	push	0
	push	ecx
	push	edi
	push	eax
	call	_eval
	fstp	QWORD PTR [ebx+esi*8]
	add	DWORD PTR tv330[ebp], 4
	inc	esi
	add	esp, 16					; 00000010H
	cmp	esi, DWORD PTR _web+616
	jl	SHORT $LL22@recalc_ver

; 937  :         int j;
; 938  :         
; 939  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	edx, DWORD PTR _web+12
$LN23@recalc_ver:
	mov	esi, DWORD PTR tv229[ebp]
$LN24@recalc_ver:

; 941  :      }
; 942  :     if ( get_vattr(v_id) & CONSTRAINT )

	mov	eax, DWORD PTR [esi+edx]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1024				; 00000400H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN9@recalc_ver

; 943  :          project_v_constr(v_id,ACTUAL_MOVE,RESET_ONESIDEDNESS);

	mov	ecx, DWORD PTR _v_id$[ebp]
	push	1
	push	1
	push	ecx
	call	_project_v_constr
	mov	edx, DWORD PTR _web+12
	add	esp, 12					; 0000000cH
$LN9@recalc_ver:

; 930  :   else
; 931  :   FOR_ALL_VERTICES(v_id)

	mov	eax, DWORD PTR [esi+edx]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _v_id$[ebp], eax
	test	eax, 268435456				; 10000000H
	jne	$LL21@recalc_ver
	pop	edi
	pop	ebx
$LN26@recalc_ver:
	pop	esi

; 944  :   }
; 945  : } // end recalc_verts()

	mov	esp, ebp
	pop	ebp
	ret	0
_recalc_verts ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@EAGCGJEA@Area?$FO3?1volume?$FO2?5figure?5of?5merit?3@ ; `string'
PUBLIC	__real@4008000000000000
PUBLIC	??_C@_0P@GPLEOAMK@Klein?5metric?4?6?$AA@	; `string'
PUBLIC	??_C@_0BG@JBBBLKCI@Ambient?5pressure?3?5?$CFf?6?$AA@ ; `string'
PUBLIC	??_C@_0BP@GPHKBCJI@Convexity?5gap?5constant?5is?5?$CFf?4?6?$AA@ ; `string'
PUBLIC	??_C@_0CE@IPCNEOLO@Jiggling?5is?5ON?$DL?5temperature?5is?5?$CF@ ; `string'
PUBLIC	??_C@_0BD@EFCPAEOM@Normal?5motion?5ON?4?6?$AA@	; `string'
PUBLIC	??_C@_0BI@GACGAMOH@Boundary?5curvature?5ON?4?6?$AA@ ; `string'
PUBLIC	??_C@_0CF@KBEKMLPA@?5?5?5?5?5Conformal?5edge?5curvature?5mo@ ; `string'
PUBLIC	??_C@_0CC@NKMLAPOI@?5?5?5?5?5Kusner?5edge?5curvature?5mode?4@ ; `string'
PUBLIC	??_C@_0CF@ELFOLPEK@Square?5curvature?5is?5ON?0?5modulus?5@ ; `string'
PUBLIC	??_C@_0CM@GBPFPKJH@Integral?5mean?5curvature?5is?5ON?0?5m@ ; `string'
PUBLIC	??_C@_0BH@NMAHCBJC@Effective_area?5is?5ON?4?6?$AA@ ; `string'
PUBLIC	??_C@_0BJ@MOPKENPJ@Normal_curvature?5is?5ON?4?6?$AA@ ; `string'
PUBLIC	??_C@_0BE@HCFCGPHG@Autopopping?5is?5ON?4?6?$AA@	; `string'
PUBLIC	??_C@_0CH@NKMFABAE@Autochopping?5is?5ON?$DL?5cutoff?5lengt@ ; `string'
PUBLIC	??_C@_0CL@MNHCCBHC@Gravity?5is?5ON?$DL?5gravitational?5con@ ; `string'
PUBLIC	??_C@_0CK@LHAODKKK@Diffusion?5is?5ON?$DL?5diffusion?5const@ ; `string'
PUBLIC	??_C@_0CM@OIJNCEEB@Self?5similar?5motion?5is?5ON?$DL?5coeff@ ; `string'
PUBLIC	??_C@_0P@BKNJOKJM@self_sim_coeff?$AA@		; `string'
PUBLIC	??_C@_0DG@MNGIGMPL@Motion?5scale?5factor?5optimizing?5a@ ; `string'
PUBLIC	??_C@_0CB@KECEDIF@Motion?5scale?5factor?5fixed?5at?5?$CFg?6@ ; `string'
PUBLIC	??_C@_0BI@IBFHIEEN@Conjugate?5gradient?5ON?4?6?$AA@ ; `string'
PUBLIC	??_C@_0BF@CCGGFFLM@Post?9projection?5ON?4?6?$AA@ ; `string'
PUBLIC	??_C@_0BO@EFGAJIMI@Homothety?5ON?0?5target?5size?5?$CFg?6?$AA@ ; `string'
PUBLIC	??_C@_0BK@LPDLOFMK@Representation?3?5LAGRANGE?6?$AA@ ; `string'
PUBLIC	??_C@_0BL@LGLFMBJK@Representation?3?5QUADRATIC?6?$AA@ ; `string'
PUBLIC	??_C@_0BI@BKJHIGLB@Representation?3?5LINEAR?6?$AA@ ; `string'
PUBLIC	??_C@_0BP@NEEAJCAB@?5?5Normal?5change?5checking?5OFF?4?6?$AA@ ; `string'
PUBLIC	??_C@_0BL@IINHCILL@?5?5Max?5normal?5change?5?$CF4?42f?6?$AA@ ; `string'
PUBLIC	??_C@_0BH@LFJMNMPC@Area?5normalization?5ON?4?$AA@ ; `string'
PUBLIC	??_C@_0CB@DOKMPJJK@Integral?5order?51D?3?5?$CFd?5?5?5?52D?3?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BD@KEBACLCD@Lagrange?5order?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_0CO@DMFNGEHL@Lagrange?5order?5?$CFd?5?$CIBezier?5basis?5@ ; `string'
PUBLIC	??_C@_0BM@PIECPNMH@Euclidean?5measure?3?5?$CF17?415f?6?$AA@ ; `string'
PUBLIC	??_C@_0BF@NEFLHKML@Total?5?$CFs?3?5?5?5?$CF17?415g?6?$AA@ ; `string'
PUBLIC	??_C@_0BF@NKHNNPJK@Gap?5energy?3?5?$CF17?415g?6?$AA@ ; `string'
PUBLIC	??_C@_0BH@CHMPDHEE@Total?5energy?3?5?$CF17?415g?6?$AA@ ; `string'
PUBLIC	??_C@_0BA@EKIDOIAC@Total?5time?3?5?$CFf?6?$AA@	; `string'
PUBLIC	??_C@_0O@DOEFPBEE@Datafile?3?5?$CFs?6?$AA@	; `string'
PUBLIC	_information
EXTRN	_klein_metric_flag:DWORD
EXTRN	_normal_motion_flag:DWORD
EXTRN	_boundary_curvature_flag:DWORD
EXTRN	_conf_edge_curv_flag:DWORD
EXTRN	_kusner_flag:DWORD
EXTRN	_square_curvature_flag:DWORD
EXTRN	_square_curvature_param:DWORD
EXTRN	_mean_curv_int_flag:DWORD
EXTRN	_effective_area_flag:DWORD
EXTRN	_normal_curvature_flag:DWORD
EXTRN	_autopop_flag:DWORD
EXTRN	_autochop_length:QWORD
EXTRN	_autochop_flag:DWORD
EXTRN	_localbase:DWORD
EXTRN	_lookup_global:PROC
EXTRN	_self_similar_flag:DWORD
EXTRN	_post_project_flag:DWORD
EXTRN	_homothety_target:QWORD
EXTRN	_memory_report:PROC
EXTRN	_bezier_flag:DWORD
EXTRN	_euclidean_area:QWORD
EXTRN	_areaname:DWORD
EXTRN	_total_time:QWORD
EXTRN	_datafilename:BYTE
EXTRN	__CIpow:PROC
;	COMDAT ??_C@_0CL@EAGCGJEA@Area?$FO3?1volume?$FO2?5figure?5of?5merit?3@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0CL@EAGCGJEA@Area?$FO3?1volume?$FO2?5figure?5of?5merit?3@ DB 'Area^'
	DB	'3/volume^2 figure of merit: %17.15f', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT ??_C@_0P@GPLEOAMK@Klein?5metric?4?6?$AA@
CONST	SEGMENT
??_C@_0P@GPLEOAMK@Klein?5metric?4?6?$AA@ DB 'Klein metric.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JBBBLKCI@Ambient?5pressure?3?5?$CFf?6?$AA@
CONST	SEGMENT
??_C@_0BG@JBBBLKCI@Ambient?5pressure?3?5?$CFf?6?$AA@ DB 'Ambient pressure'
	DB	': %f', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GPHKBCJI@Convexity?5gap?5constant?5is?5?$CFf?4?6?$AA@
CONST	SEGMENT
??_C@_0BP@GPHKBCJI@Convexity?5gap?5constant?5is?5?$CFf?4?6?$AA@ DB 'Conve'
	DB	'xity gap constant is %f.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@IPCNEOLO@Jiggling?5is?5ON?$DL?5temperature?5is?5?$CF@
CONST	SEGMENT
??_C@_0CE@IPCNEOLO@Jiggling?5is?5ON?$DL?5temperature?5is?5?$CF@ DB 'Jiggl'
	DB	'ing is ON; temperature is %f.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EFCPAEOM@Normal?5motion?5ON?4?6?$AA@
CONST	SEGMENT
??_C@_0BD@EFCPAEOM@Normal?5motion?5ON?4?6?$AA@ DB 'Normal motion ON.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GACGAMOH@Boundary?5curvature?5ON?4?6?$AA@
CONST	SEGMENT
??_C@_0BI@GACGAMOH@Boundary?5curvature?5ON?4?6?$AA@ DB 'Boundary curvatur'
	DB	'e ON.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@KBEKMLPA@?5?5?5?5?5Conformal?5edge?5curvature?5mo@
CONST	SEGMENT
??_C@_0CF@KBEKMLPA@?5?5?5?5?5Conformal?5edge?5curvature?5mo@ DB '     Con'
	DB	'formal edge curvature mode.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@NKMLAPOI@?5?5?5?5?5Kusner?5edge?5curvature?5mode?4@
CONST	SEGMENT
??_C@_0CC@NKMLAPOI@?5?5?5?5?5Kusner?5edge?5curvature?5mode?4@ DB '     Ku'
	DB	'sner edge curvature mode.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@ELFOLPEK@Square?5curvature?5is?5ON?0?5modulus?5@
CONST	SEGMENT
??_C@_0CF@ELFOLPEK@Square?5curvature?5is?5ON?0?5modulus?5@ DB 'Square cur'
	DB	'vature is ON, modulus %g.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@GBPFPKJH@Integral?5mean?5curvature?5is?5ON?0?5m@
CONST	SEGMENT
??_C@_0CM@GBPFPKJH@Integral?5mean?5curvature?5is?5ON?0?5m@ DB 'Integral m'
	DB	'ean curvature is ON, modulus %g.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NMAHCBJC@Effective_area?5is?5ON?4?6?$AA@
CONST	SEGMENT
??_C@_0BH@NMAHCBJC@Effective_area?5is?5ON?4?6?$AA@ DB 'Effective_area is '
	DB	'ON.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MOPKENPJ@Normal_curvature?5is?5ON?4?6?$AA@
CONST	SEGMENT
??_C@_0BJ@MOPKENPJ@Normal_curvature?5is?5ON?4?6?$AA@ DB 'Normal_curvature'
	DB	' is ON.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HCFCGPHG@Autopopping?5is?5ON?4?6?$AA@
CONST	SEGMENT
??_C@_0BE@HCFCGPHG@Autopopping?5is?5ON?4?6?$AA@ DB 'Autopopping is ON.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@NKMFABAE@Autochopping?5is?5ON?$DL?5cutoff?5lengt@
CONST	SEGMENT
??_C@_0CH@NKMFABAE@Autochopping?5is?5ON?$DL?5cutoff?5lengt@ DB 'Autochopp'
	DB	'ing is ON; cutoff length %g.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@MNHCCBHC@Gravity?5is?5ON?$DL?5gravitational?5con@
CONST	SEGMENT
??_C@_0CL@MNHCCBHC@Gravity?5is?5ON?$DL?5gravitational?5con@ DB 'Gravity i'
	DB	's ON; gravitational constant %f.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@LHAODKKK@Diffusion?5is?5ON?$DL?5diffusion?5const@
CONST	SEGMENT
??_C@_0CK@LHAODKKK@Diffusion?5is?5ON?$DL?5diffusion?5const@ DB 'Diffusion'
	DB	' is ON; diffusion constant: %f', 0aH, ',', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@OIJNCEEB@Self?5similar?5motion?5is?5ON?$DL?5coeff@
CONST	SEGMENT
??_C@_0CM@OIJNCEEB@Self?5similar?5motion?5is?5ON?$DL?5coeff@ DB 'Self sim'
	DB	'ilar motion is ON; coefficient %f', 0aH, ',', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BKNJOKJM@self_sim_coeff?$AA@
CONST	SEGMENT
??_C@_0P@BKNJOKJM@self_sim_coeff?$AA@ DB 'self_sim_coeff', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@MNGIGMPL@Motion?5scale?5factor?5optimizing?5a@
CONST	SEGMENT
??_C@_0DG@MNGIGMPL@Motion?5scale?5factor?5optimizing?5a@ DB 'Motion scale'
	DB	' factor optimizing at %g; upper bound %f', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KECEDIF@Motion?5scale?5factor?5fixed?5at?5?$CFg?6@
CONST	SEGMENT
??_C@_0CB@KECEDIF@Motion?5scale?5factor?5fixed?5at?5?$CFg?6@ DB 'Motion s'
	DB	'cale factor fixed at %g', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IBFHIEEN@Conjugate?5gradient?5ON?4?6?$AA@
CONST	SEGMENT
??_C@_0BI@IBFHIEEN@Conjugate?5gradient?5ON?4?6?$AA@ DB 'Conjugate gradien'
	DB	't ON.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CCGGFFLM@Post?9projection?5ON?4?6?$AA@
CONST	SEGMENT
??_C@_0BF@CCGGFFLM@Post?9projection?5ON?4?6?$AA@ DB 'Post-projection ON.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EFGAJIMI@Homothety?5ON?0?5target?5size?5?$CFg?6?$AA@
CONST	SEGMENT
??_C@_0BO@EFGAJIMI@Homothety?5ON?0?5target?5size?5?$CFg?6?$AA@ DB 'Homoth'
	DB	'ety ON, target size %g', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LPDLOFMK@Representation?3?5LAGRANGE?6?$AA@
CONST	SEGMENT
??_C@_0BK@LPDLOFMK@Representation?3?5LAGRANGE?6?$AA@ DB 'Representation: '
	DB	'LAGRANGE', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LGLFMBJK@Representation?3?5QUADRATIC?6?$AA@
CONST	SEGMENT
??_C@_0BL@LGLFMBJK@Representation?3?5QUADRATIC?6?$AA@ DB 'Representation:'
	DB	' QUADRATIC', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BKJHIGLB@Representation?3?5LINEAR?6?$AA@
CONST	SEGMENT
??_C@_0BI@BKJHIGLB@Representation?3?5LINEAR?6?$AA@ DB 'Representation: LI'
	DB	'NEAR', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@NEEAJCAB@?5?5Normal?5change?5checking?5OFF?4?6?$AA@
CONST	SEGMENT
??_C@_0BP@NEEAJCAB@?5?5Normal?5change?5checking?5OFF?4?6?$AA@ DB '  Norma'
	DB	'l change checking OFF.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IINHCILL@?5?5Max?5normal?5change?5?$CF4?42f?6?$AA@
CONST	SEGMENT
??_C@_0BL@IINHCILL@?5?5Max?5normal?5change?5?$CF4?42f?6?$AA@ DB '  Max no'
	DB	'rmal change %4.2f', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LFJMNMPC@Area?5normalization?5ON?4?$AA@
CONST	SEGMENT
??_C@_0BH@LFJMNMPC@Area?5normalization?5ON?4?$AA@ DB 'Area normalization '
	DB	'ON.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DOKMPJJK@Integral?5order?51D?3?5?$CFd?5?5?5?52D?3?5?$CFd?6@
CONST	SEGMENT
??_C@_0CB@DOKMPJJK@Integral?5order?51D?3?5?$CFd?5?5?5?52D?3?5?$CFd?6@ DB 'I'
	DB	'ntegral order 1D: %d    2D: %d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KEBACLCD@Lagrange?5order?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BD@KEBACLCD@Lagrange?5order?5?$CFd?6?$AA@ DB 'Lagrange order %d', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@DMFNGEHL@Lagrange?5order?5?$CFd?5?$CIBezier?5basis?5@
CONST	SEGMENT
??_C@_0CO@DMFNGEHL@Lagrange?5order?5?$CFd?5?$CIBezier?5basis?5@ DB 'Lagra'
	DB	'nge order %d (Bezier basis polynomials)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PIECPNMH@Euclidean?5measure?3?5?$CF17?415f?6?$AA@
CONST	SEGMENT
??_C@_0BM@PIECPNMH@Euclidean?5measure?3?5?$CF17?415f?6?$AA@ DB 'Euclidean'
	DB	' measure: %17.15f', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NEFLHKML@Total?5?$CFs?3?5?5?5?$CF17?415g?6?$AA@
CONST	SEGMENT
??_C@_0BF@NEFLHKML@Total?5?$CFs?3?5?5?5?$CF17?415g?6?$AA@ DB 'Total %s:  '
	DB	' %17.15g', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NKHNNPJK@Gap?5energy?3?5?$CF17?415g?6?$AA@
CONST	SEGMENT
??_C@_0BF@NKHNNPJK@Gap?5energy?3?5?$CF17?415g?6?$AA@ DB 'Gap energy: %17.'
	DB	'15g', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CHMPDHEE@Total?5energy?3?5?$CF17?415g?6?$AA@
CONST	SEGMENT
??_C@_0BH@CHMPDHEE@Total?5energy?3?5?$CF17?415g?6?$AA@ DB 'Total energy: '
	DB	'%17.15g', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EKIDOIAC@Total?5time?3?5?$CFf?6?$AA@
CONST	SEGMENT
??_C@_0BA@EKIDOIAC@Total?5time?3?5?$CFf?6?$AA@ DB 'Total time: %f', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DOEFPBEE@Datafile?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0O@DOEFPBEE@Datafile?3?5?$CFs?6?$AA@ DB 'Datafile: %s', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\command.c
CONST	ENDS
;	COMDAT _information
_TEXT	SEGMENT
_total_volume$ = -8					; size = 8
_information PROC					; COMDAT

; 956  : {

	push	ebp
	mov	ebp, esp

; 957  :     REAL total_volume;
; 958  :     body_id b_id;
; 959  : 
; 960  :     sprintf(msg,"Datafile: %s\n",datafilename);

	mov	eax, DWORD PTR _msg
	sub	esp, 8
	push	OFFSET _datafilename
	push	OFFSET ??_C@_0O@DOEFPBEE@Datafile?3?5?$CFs?6?$AA@
	push	eax
	call	_sprintf

; 961  :     outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 16					; 00000010H

; 962  :     if ( web.area_norm_flag )

	cmp	DWORD PTR _web+876, 0
	je	SHORT $LN43@informatio

; 963  :     { sprintf(msg,"Total time: %f\n",(DOUBLE)total_time);

	fld	QWORD PTR _total_time
	mov	edx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BA@EKIDOIAC@Total?5time?3?5?$CFf?6?$AA@
	push	edx
	call	_sprintf

; 964  :       outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 20					; 00000014H
$LN43@informatio:

; 965  :     }
; 966  : #ifdef FLOAT128
; 967  :     sprintf(msg,"Total energy: %*.*Qg\n",DWIDTH,DPREC,web.total_energy);
; 968  : #elif defined(LONGDOUBLE)
; 969  :     sprintf(msg,"Total energy: %*.*Lg\n",DWIDTH,DPREC,web.total_energy);
; 970  : #else
; 971  :     sprintf(msg,"Total energy: %17.15g\n",web.total_energy);

	fld	QWORD PTR _web+1240
	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BH@CHMPDHEE@Total?5energy?3?5?$CF17?415g?6?$AA@
	push	ecx
	call	_sprintf

; 972  : #endif
; 973  :     outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 974  :     if ( web.spring_energy != 0.0 )

	fld	QWORD PTR _web+1488
	fld	ST(0)
	add	esp, 20					; 00000014H
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN72@informatio

; 975  :       {
; 976  : #ifdef FLOAT128
; 977  :          sprintf(msg,"Gap energy: %*.*Qg\n",DWIDTH,DPREC,web.spring_energy);
; 978  : #elif defined(LONGDOUBLE)
; 979  :          sprintf(msg,"Gap energy: %*.*Lg\n",DWIDTH,DPREC,web.spring_energy);
; 980  : #else
; 981  :          sprintf(msg,"Gap energy: %17.15g\n",web.spring_energy);

	mov	eax, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BF@NKHNNPJK@Gap?5energy?3?5?$CF17?415g?6?$AA@
	push	eax
	call	_sprintf

; 982  : #endif
; 983  :          outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 20					; 00000014H
	jmp	SHORT $LN42@informatio
$LN72@informatio:
	fstp	ST(0)
$LN42@informatio:

; 984  :       }
; 985  : #ifdef FLOAT128
; 986  :     sprintf(msg,"Total %s:   %*.*Qg\n",areaname,DWIDTH,DPREC,web.total_area);
; 987  : #elif defined(LONGDOUBLE)
; 988  :     sprintf(msg,"Total %s:   %*.*Lg\n",areaname,DWIDTH,DPREC,web.total_area);
; 989  : #else
; 990  :     sprintf(msg,"Total %s:   %17.15g\n",areaname,web.total_area);

	fld	QWORD PTR _web+992
	mov	edx, DWORD PTR _areaname
	mov	eax, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	edx
	push	OFFSET ??_C@_0BF@NEFLHKML@Total?5?$CFs?3?5?5?5?$CF17?415g?6?$AA@
	push	eax
	call	_sprintf

; 991  : #endif
; 992  :     outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 24					; 00000018H

; 993  :     if ( web.conformal_flag )

	cmp	DWORD PTR _web+1680, 0
	je	SHORT $LN41@informatio

; 994  :       { sprintf(msg,"Euclidean measure: %17.15f\n",
; 995  :          (DOUBLE)euclidean_area);

	fld	QWORD PTR _euclidean_area
	mov	edx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BM@PIECPNMH@Euclidean?5measure?3?5?$CF17?415f?6?$AA@
	push	edx
	call	_sprintf

; 996  :          outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 20					; 00000014H
$LN41@informatio:

; 997  :       }
; 998  :     if ( web.modeltype == LAGRANGE )

	cmp	DWORD PTR _web+628, 3
	jne	SHORT $LN40@informatio

; 999  :     { if ( bezier_flag )

	cmp	DWORD PTR _bezier_flag, 0
	je	SHORT $LN39@informatio

; 1000 :         sprintf(msg,"Lagrange order %d (Bezier basis polynomials)\n",
; 1001 :            web.lagrange_order);

	mov	ecx, DWORD PTR _web+632
	mov	edx, DWORD PTR _msg
	push	ecx
	push	OFFSET ??_C@_0CO@DMFNGEHL@Lagrange?5order?5?$CFd?5?$CIBezier?5basis?5@
	push	edx

; 1002 :       else

	jmp	SHORT $LN92@informatio
$LN39@informatio:

; 1003 :         sprintf(msg,"Lagrange order %d\n",web.lagrange_order);

	mov	eax, DWORD PTR _web+632
	mov	ecx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0BD@KEBACLCD@Lagrange?5order?5?$CFd?6?$AA@
	push	ecx
$LN92@informatio:
	call	_sprintf

; 1004 :       outstring(msg);

	mov	edx, DWORD PTR _msg
	add	esp, 12					; 0000000cH
	push	edx
	call	_outstring
	add	esp, 4
$LN40@informatio:

; 1005 :     }
; 1006 :     sprintf(msg,"Integral order 1D: %d    2D: %d\n",web.gauss1D_order,
; 1007 :         web.gauss2D_order);

	mov	eax, DWORD PTR _web+1596
	mov	ecx, DWORD PTR _web+1592
	mov	edx, DWORD PTR _msg
	push	eax
	push	ecx
	push	OFFSET ??_C@_0CB@DOKMPJJK@Integral?5order?51D?3?5?$CFd?5?5?5?52D?3?5?$CFd?6@
	push	edx
	call	_sprintf

; 1008 :     outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 20					; 00000014H

; 1009 :     memory_report();

	call	_memory_report

; 1010 :     if ( web.area_norm_flag ) 

	cmp	DWORD PTR _web+876, 0
	je	SHORT $LN35@informatio

; 1011 :       { outstring("Area normalization ON.");

	push	OFFSET ??_C@_0BH@LFJMNMPC@Area?5normalization?5ON?4?$AA@
	call	_outstring
	add	esp, 4

; 1012 :          if ( web.norm_check_flag )

	cmp	DWORD PTR _web+880, 0
	je	SHORT $LN36@informatio

; 1013 :         { sprintf(msg,"  Max normal change %4.2f\n",(DOUBLE)web.norm_check_max);

	fld	QWORD PTR _web+888
	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BL@IINHCILL@?5?5Max?5normal?5change?5?$CF4?42f?6?$AA@
	push	ecx
	call	_sprintf

; 1014 :           outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 20					; 00000014H
	jmp	SHORT $LN35@informatio
$LN36@informatio:

; 1015 :         }
; 1016 :          else outstring("  Normal change checking OFF.\n");

	push	OFFSET ??_C@_0BP@NEEAJCAB@?5?5Normal?5change?5checking?5OFF?4?6?$AA@
	call	_outstring
	add	esp, 4
$LN35@informatio:

; 1017 :       }
; 1018 : 
; 1019 :     if ( web.modeltype ==  LINEAR )

	mov	eax, DWORD PTR _web+628
	cmp	eax, 1
	jne	SHORT $LN34@informatio

; 1020 :       outstring("Representation: LINEAR\n");

	push	OFFSET ??_C@_0BI@BKJHIGLB@Representation?3?5LINEAR?6?$AA@
	jmp	SHORT $LN93@informatio
$LN34@informatio:

; 1021 :     else if ( web.modeltype ==  QUADRATIC )

	cmp	eax, 2
	jne	SHORT $LN32@informatio

; 1022 :       outstring("Representation: QUADRATIC\n");

	push	OFFSET ??_C@_0BL@LGLFMBJK@Representation?3?5QUADRATIC?6?$AA@
	jmp	SHORT $LN93@informatio
$LN32@informatio:

; 1023 :     else if ( web.modeltype ==  LAGRANGE )

	cmp	eax, 3
	jne	SHORT $LN30@informatio

; 1024 :       outstring("Representation: LAGRANGE\n");

	push	OFFSET ??_C@_0BK@LPDLOFMK@Representation?3?5LAGRANGE?6?$AA@
$LN93@informatio:
	call	_outstring
	add	esp, 4
$LN30@informatio:

; 1025 : 
; 1026 :     if ( web.homothety )

	cmp	DWORD PTR _web+904, 0
	je	SHORT $LN29@informatio

; 1027 :       { sprintf(msg,"Homothety ON, target size %g\n",
; 1028 :          (DOUBLE)homothety_target);

	fld	QWORD PTR _homothety_target
	mov	eax, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BO@EFGAJIMI@Homothety?5ON?0?5target?5size?5?$CFg?6?$AA@
	push	eax
	call	_sprintf

; 1029 :          outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 20					; 00000014H
$LN29@informatio:

; 1030 :       }
; 1031 : 
; 1032 :     if ( post_project_flag )

	cmp	DWORD PTR _post_project_flag, 0
	je	SHORT $LN28@informatio

; 1033 :       outstring("Post-projection ON.\n");

	push	OFFSET ??_C@_0BF@CCGGFFLM@Post?9projection?5ON?4?6?$AA@
	call	_outstring
	add	esp, 4
$LN28@informatio:

; 1034 : 
; 1035 :     if ( conj_grad_flag )

	cmp	DWORD PTR _conj_grad_flag, 0
	je	SHORT $LN27@informatio

; 1036 :       outstring("Conjugate gradient ON.\n");

	push	OFFSET ??_C@_0BI@IBFHIEEN@Conjugate?5gradient?5ON?4?6?$AA@
	call	_outstring
	add	esp, 4
$LN27@informatio:

; 1037 : 
; 1038 :     if ( web.motion_flag )

	cmp	DWORD PTR _web+852, 0
	je	SHORT $LN26@informatio

; 1039 :       sprintf(msg,"Motion scale factor fixed at %g\n",
; 1040 :         (DOUBLE)web.scale);

	fld	QWORD PTR _web+1512
	mov	edx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CB@KECEDIF@Motion?5scale?5factor?5fixed?5at?5?$CFg?6@
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 1041 :     else

	jmp	SHORT $LN25@informatio
$LN26@informatio:

; 1042 :       sprintf(msg,"Motion scale factor optimizing at %g; upper bound %f\n",
; 1043 :         (DOUBLE)web.scale,(DOUBLE)web.maxscale);

	fld	QWORD PTR _web+1528
	mov	eax, DWORD PTR _msg
	sub	esp, 16					; 00000010H
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR _web+1512
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0DG@MNGIGMPL@Motion?5scale?5factor?5optimizing?5a@
	push	eax
	call	_sprintf
	add	esp, 24					; 00000018H
$LN25@informatio:

; 1044 :     outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 4

; 1045 : 
; 1046 :     if ( self_similar_flag )

	cmp	DWORD PTR _self_similar_flag, 0
	je	$LN24@informatio

; 1047 :       { sprintf(msg,"Self similar motion is ON; coefficient %f\n,",  
; 1048 :         (DOUBLE)globals(lookup_global(SELFSIM_NAME))->value.real);

	push	OFFSET ??_C@_0P@BKNJOKJM@self_sim_coeff?$AA@
	call	_lookup_global
	add	esp, 4
	and	eax, -16777216				; ff000000H
	push	OFFSET ??_C@_0P@BKNJOKJM@self_sim_coeff?$AA@
	cmp	eax, 268435456				; 10000000H
	je	SHORT $LN94@informatio
	call	_lookup_global
	add	esp, 4
	and	eax, -16777216				; ff000000H
	push	OFFSET ??_C@_0P@BKNJOKJM@self_sim_coeff?$AA@
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN48@informatio
	call	_lookup_global
	mov	edx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	esp, 4
	add	eax, DWORD PTR [edx]
	jmp	SHORT $LN47@informatio
$LN48@informatio:
	call	_lookup_global
	add	esp, 4
	and	eax, -16777216				; ff000000H
	push	OFFSET ??_C@_0P@BKNJOKJM@self_sim_coeff?$AA@
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN94@informatio
	call	_lookup_global
	mov	ecx, DWORD PTR _web+5656
	add	esp, 4
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN47@informatio
$LN94@informatio:
	call	_lookup_global
	mov	edx, DWORD PTR _web+5652
	mov	ecx, DWORD PTR _dymem
	add	esp, 4
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ecx]
$LN47@informatio:
	fld	QWORD PTR [eax+64]
	mov	edx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CM@OIJNCEEB@Self?5similar?5motion?5is?5ON?$DL?5coeff@
	push	edx
	call	_sprintf

; 1049 :          outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 20					; 00000014H
$LN24@informatio:

; 1050 :       }
; 1051 : 
; 1052 :     if ( web.diffusion_flag )

	cmp	DWORD PTR _web+780, 0
	je	SHORT $LN23@informatio

; 1053 :       { sprintf(msg,"Diffusion is ON; diffusion constant: %f\n,",  
; 1054 :          (DOUBLE)web.diffusion_const);

	fld	QWORD PTR _web+784
	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CK@LHAODKKK@Diffusion?5is?5ON?$DL?5diffusion?5const@
	push	ecx
	call	_sprintf

; 1055 :          outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 20					; 00000014H
$LN23@informatio:

; 1056 :       }
; 1057 : 
; 1058 :     if ( web.gravflag )

	cmp	DWORD PTR _web+824, 0
	je	SHORT $LN22@informatio

; 1059 :       { sprintf(msg,"Gravity is ON; gravitational constant %f.\n",
; 1060 :           (DOUBLE)web.grav_const);

	fld	QWORD PTR _web+832
	mov	eax, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CL@MNHCCBHC@Gravity?5is?5ON?$DL?5gravitational?5con@
	push	eax
	call	_sprintf

; 1061 :          outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 20					; 00000014H
$LN22@informatio:

; 1062 :       }
; 1063 : 
; 1064 :     if ( autochop_flag )

	cmp	DWORD PTR _autochop_flag, 0
	je	SHORT $LN21@informatio

; 1065 :       { sprintf(msg,"Autochopping is ON; cutoff length %g.\n",
; 1066 :           (DOUBLE)autochop_length);

	fld	QWORD PTR _autochop_length
	mov	edx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CH@NKMFABAE@Autochopping?5is?5ON?$DL?5cutoff?5lengt@
	push	edx
	call	_sprintf

; 1067 :          outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 20					; 00000014H
$LN21@informatio:

; 1068 :       }
; 1069 :     if ( autopop_flag )

	cmp	DWORD PTR _autopop_flag, 0
	je	SHORT $LN20@informatio

; 1070 :         outstring("Autopopping is ON.\n");

	push	OFFSET ??_C@_0BE@HCFCGPHG@Autopopping?5is?5ON?4?6?$AA@
	call	_outstring
	add	esp, 4
$LN20@informatio:

; 1071 :     if ( normal_curvature_flag )

	cmp	DWORD PTR _normal_curvature_flag, 0
	je	SHORT $LN19@informatio

; 1072 :         outstring("Normal_curvature is ON.\n");

	push	OFFSET ??_C@_0BJ@MOPKENPJ@Normal_curvature?5is?5ON?4?6?$AA@
	call	_outstring
	add	esp, 4
$LN19@informatio:

; 1073 :     if ( effective_area_flag )

	cmp	DWORD PTR _effective_area_flag, 0
	je	SHORT $LN18@informatio

; 1074 :         outstring("Effective_area is ON.\n");

	push	OFFSET ??_C@_0BH@NMAHCBJC@Effective_area?5is?5ON?4?6?$AA@
	call	_outstring
	add	esp, 4
$LN18@informatio:

; 1075 :     if ( mean_curv_int_flag )

	cmp	DWORD PTR _mean_curv_int_flag, 0
	je	$LN17@informatio

; 1076 :         { sprintf(msg,"Integral mean curvature is ON, modulus %g.\n",
; 1077 :              (DOUBLE)globals(square_curvature_param)->value.real);

	mov	eax, DWORD PTR _square_curvature_param
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN52@informatio
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN54@informatio
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN53@informatio
$LN54@informatio:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN52@informatio
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN53@informatio
$LN52@informatio:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN53@informatio:
	fld	QWORD PTR [eax+64]
	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CM@GBPFPKJH@Integral?5mean?5curvature?5is?5ON?0?5m@
	push	ecx
	call	_sprintf

; 1078 :           outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 20					; 00000014H
$LN17@informatio:

; 1079 :         }
; 1080 :     if ( square_curvature_flag )

	cmp	DWORD PTR _square_curvature_flag, 0
	je	$LN14@informatio

; 1081 :         { sprintf(msg,"Square curvature is ON, modulus %g.\n",
; 1082 :              (DOUBLE)globals(square_curvature_param)->value.real);

	mov	eax, DWORD PTR _square_curvature_param
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN58@informatio
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN60@informatio
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN59@informatio
$LN60@informatio:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN58@informatio
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN59@informatio
$LN58@informatio:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN59@informatio:
	fld	QWORD PTR [eax+64]
	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CF@ELFOLPEK@Square?5curvature?5is?5ON?0?5modulus?5@
	push	ecx
	call	_sprintf

; 1083 :           outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 20					; 00000014H

; 1084 :           if ( kusner_flag ) outstring("     Kusner edge curvature mode.\n");

	cmp	DWORD PTR _kusner_flag, 0
	je	SHORT $LN15@informatio
	push	OFFSET ??_C@_0CC@NKMLAPOI@?5?5?5?5?5Kusner?5edge?5curvature?5mode?4@
	call	_outstring
	add	esp, 4
$LN15@informatio:

; 1085 :           if ( conf_edge_curv_flag )

	cmp	DWORD PTR _conf_edge_curv_flag, 0
	je	SHORT $LN14@informatio

; 1086 :           outstring("     Conformal edge curvature mode.\n");

	push	OFFSET ??_C@_0CF@KBEKMLPA@?5?5?5?5?5Conformal?5edge?5curvature?5mo@
	call	_outstring
	add	esp, 4
$LN14@informatio:

; 1087 :         }
; 1088 :     if ( boundary_curvature_flag )

	cmp	DWORD PTR _boundary_curvature_flag, 0
	je	SHORT $LN13@informatio

; 1089 :       outstring("Boundary curvature ON.\n");

	push	OFFSET ??_C@_0BI@GACGAMOH@Boundary?5curvature?5ON?4?6?$AA@
	call	_outstring
	add	esp, 4
$LN13@informatio:

; 1090 :     if ( normal_motion_flag )

	cmp	DWORD PTR _normal_motion_flag, 0
	je	SHORT $LN12@informatio

; 1091 :       outstring("Normal motion ON.\n");

	push	OFFSET ??_C@_0BD@EFCPAEOM@Normal?5motion?5ON?4?6?$AA@
	call	_outstring
	add	esp, 4
$LN12@informatio:

; 1092 : 
; 1093 :     if ( web.jiggle_flag )

	cmp	DWORD PTR _web+900, 0
	je	SHORT $LN11@informatio

; 1094 :       { sprintf(msg,"Jiggling is ON; temperature is %f.\n",
; 1095 :           (DOUBLE)web.temperature);

	fld	QWORD PTR _web+1576
	mov	eax, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CE@IPCNEOLO@Jiggling?5is?5ON?$DL?5temperature?5is?5?$CF@
	push	eax
	call	_sprintf

; 1096 :          outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 20					; 00000014H
$LN11@informatio:

; 1097 :       }
; 1098 : 
; 1099 :     if ( web.convex_flag )

	cmp	DWORD PTR _web+840, 0
	je	SHORT $LN10@informatio

; 1100 :       {
; 1101 :          sprintf(msg,"Convexity gap constant is %f.\n",
; 1102 :           (DOUBLE)web.spring_constant); 

	fld	QWORD PTR _web+1584
	mov	edx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BP@GPHKBCJI@Convexity?5gap?5constant?5is?5?$CFf?4?6?$AA@
	push	edx
	call	_sprintf

; 1103 :          outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 20					; 00000014H
$LN10@informatio:

; 1104 :       }
; 1105 : 
; 1106 :     if ( web.pressure_flag )

	cmp	DWORD PTR _web+868, 0
	je	SHORT $LN9@informatio

; 1107 :       { sprintf(msg,"Ambient pressure: %f\n",(DOUBLE)web.pressure);

	fld	QWORD PTR _web+1536
	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BG@JBBBLKCI@Ambient?5pressure?3?5?$CFf?6?$AA@
	push	ecx
	call	_sprintf

; 1108 :          outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 20					; 00000014H
$LN9@informatio:

; 1109 :       }
; 1110 : 
; 1111 :     if ( klein_metric_flag )

	cmp	DWORD PTR _klein_metric_flag, 0
	je	SHORT $LN8@informatio

; 1112 :       outstring("Klein metric.\n");

	push	OFFSET ??_C@_0P@GPLEOAMK@Klein?5metric?4?6?$AA@
	call	_outstring
	add	esp, 4
$LN8@informatio:

; 1113 : 
; 1114 :     total_volume = 0.0;
; 1115 :     FOR_ALL_BODIES(b_id)

	mov	ecx, DWORD PTR _web+384
	fldz
	push	esi
	fld	ST(0)
	mov	esi, ecx
	fst	QWORD PTR _total_volume$[ebp]
	shr	esi, 28					; 0000001cH
	and	esi, 1
	je	SHORT $LN5@informatio
	push	ebx
	mov	ebx, DWORD PTR _web+348
	push	edi
$LN70@informatio:
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+eax*4]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	je	SHORT $LN6@informatio

; 1116 :       { if ( equal_id(b_id,web.outside_body) ) continue;

	cmp	ecx, DWORD PTR _web+1504
	je	SHORT $LN6@informatio

; 1117 :          total_volume += get_body_volume(b_id);

	test	esi, esi
	je	SHORT $LN66@informatio
	fld	QWORD PTR [edx+40]
	jmp	SHORT $LN67@informatio
$LN66@informatio:
	fld	ST(1)
$LN67@informatio:
	faddp	ST(1), ST(0)
$LN6@informatio:

; 1113 : 
; 1114 :     total_volume = 0.0;
; 1115 :     FOR_ALL_BODIES(b_id)

	mov	ecx, DWORD PTR [edx]
	mov	esi, ecx
	shr	esi, 28					; 0000001cH
	and	esi, 1
	jne	SHORT $LN70@informatio

; 1117 :          total_volume += get_body_volume(b_id);

	pop	edi
	fst	QWORD PTR _total_volume$[ebp]
	pop	ebx
$LN5@informatio:

; 1118 :       }
; 1119 : 
; 1120 :     if ( web.meritfactor && (total_volume != 0.0) )

	fld	QWORD PTR _web+816
	pop	esi
	fld	ST(2)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN90@informatio
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN1@informatio

; 1121 :       { sprintf(msg,"Area^3/volume^2 figure of merit: %17.15f\n\n",
; 1122 :           (DOUBLE)(web.meritfactor*pow(web.total_energy,3.0)/
; 1123 :           total_volume/total_volume));

	fld	QWORD PTR _web+1240
	fld	QWORD PTR __real@4008000000000000
	call	__CIpow
	fmul	QWORD PTR _web+816
	fld	QWORD PTR _total_volume$[ebp]
	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fdiv	ST(1), ST(0)
	fdivp	ST(1), ST(0)
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CL@EAGCGJEA@Area?$FO3?1volume?$FO2?5figure?5of?5merit?3@
	push	ecx
	call	_sprintf

; 1124 :          outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 20					; 00000014H

; 1125 :       }
; 1126 : 
; 1127 : } /* end information() */

	mov	esp, ebp
	pop	ebp
	ret	0
$LN90@informatio:

; 1118 :       }
; 1119 : 
; 1120 :     if ( web.meritfactor && (total_volume != 0.0) )

	fstp	ST(0)
	fstp	ST(0)
$LN1@informatio:

; 1125 :       }
; 1126 : 
; 1127 : } /* end information() */

	mov	esp, ebp
	pop	ebp
	ret	0
_information ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@JNNGBMFO@?$CF?$CKs?5?5?5?5?5?5?5?5?5?9?9?9?9?9?9?9?9?9?5?5?5?5?5?5?$CF22?41@ ; `string'
PUBLIC	??_C@_0CA@HMNLIEDF@?$CF?$CKs?5?5?$CF22?415g?5?5?$CF22?415g?5?5?$CF17?415g?6?$AA@ ; `string'
PUBLIC	??_C@_0DE@MPCNLPNL@?$CF?$CKs?5?5?5?5?5?$CIconserved?$CJ?5?5?5?5?5?9?9?9?9?9?9?9?9@ ; `string'
PUBLIC	??_C@_0EJ@EKAKILKO@?6?$CF?$CKs?5?5?5?5?5?5?5target?5value?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BE@PGHIPGJJ@?5?5?5?5?5?5?5?5?5?5?5Quantity?$AA@ ; `string'
PUBLIC	??_C@_0CK@KMNLKCPB@?$CF3s?5?5?5?5?5?5?5?5?5?5?5?5?9?9?9?9?9?9?9?9?9?9?9?9?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0DB@MHMLCEPM@?$CF3s?5?5?5?5?5?5?5?5?5?5?5?5?9?9?9?9?9?9?9?9?9?9?9?9?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_0BP@LEJCMOBM@?$CF3s?5?5?$CF22?415g?5?5?$CF22?415g?5?$CF17?415g?6?$AA@ ; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_0EI@PLPINFFM@?6Body?5?5?5?5?5?5?5?5?5?5target?5volume?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BC@KPPPANFP@recalculating?4?4?4?6?$AA@	; `string'
PUBLIC	??_C@_0BK@IHNIMAMB@No?5bodies?5or?5quantities?4?6?$AA@ ; `string'
PUBLIC	_show_volumes
EXTRN	_elnames:BYTE
EXTRN	_calc_content:PROC
EXTRN	_show_all_quantities:DWORD
EXTRN	_gen_quant_list:DWORD
EXTRN	_info_volume_timestamp:DWORD
EXTRN	_fixed_volume_timestamp:DWORD
EXTRN	_global_timestamp:DWORD
;	COMDAT ??_C@_0CE@JNNGBMFO@?$CF?$CKs?5?5?5?5?5?5?5?5?5?9?9?9?9?9?9?9?9?9?5?5?5?5?5?5?$CF22?41@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0CE@JNNGBMFO@?$CF?$CKs?5?5?5?5?5?5?5?5?5?9?9?9?9?9?9?9?9?9?5?5?5?5?5?5?$CF22?41@ DB '%'
	DB	'*s         ---------      %22.15g', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HMNLIEDF@?$CF?$CKs?5?5?$CF22?415g?5?5?$CF22?415g?5?5?$CF17?415g?6?$AA@
CONST	SEGMENT
??_C@_0CA@HMNLIEDF@?$CF?$CKs?5?5?$CF22?415g?5?5?$CF22?415g?5?5?$CF17?415g?6?$AA@ DB '%'
	DB	'*s  %22.15g  %22.15g  %17.15g', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@MPCNLPNL@?$CF?$CKs?5?5?5?5?5?$CIconserved?$CJ?5?5?5?5?5?9?9?9?9?9?9?9?9@
CONST	SEGMENT
??_C@_0DE@MPCNLPNL@?$CF?$CKs?5?5?5?5?5?$CIconserved?$CJ?5?5?5?5?5?9?9?9?9?9?9?9?9@ DB '%'
	DB	'*s     (conserved)     ----------------   %17.15g', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@EKAKILKO@?6?$CF?$CKs?5?5?5?5?5?5?5target?5value?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0EJ@EKAKILKO@?6?$CF?$CKs?5?5?5?5?5?5?5target?5value?5?5?5?5?5?5?5?5?5@ DB 0aH
	DB	'%*s       target value           actual value                '
	DB	' pressure', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PGHIPGJJ@?5?5?5?5?5?5?5?5?5?5?5Quantity?$AA@
CONST	SEGMENT
??_C@_0BE@PGHIPGJJ@?5?5?5?5?5?5?5?5?5?5?5Quantity?$AA@ DB '           Qua'
	DB	'ntity', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@KMNLKCPB@?$CF3s?5?5?5?5?5?5?5?5?5?5?5?5?9?9?9?9?9?9?9?9?9?9?9?9?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CK@KMNLKCPB@?$CF3s?5?5?5?5?5?5?5?5?5?5?5?5?9?9?9?9?9?9?9?9?9?9?9?9?5?5?5?5?5@ DB '%'
	DB	'3s            ------------     %22.15g ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@MHMLCEPM@?$CF3s?5?5?5?5?5?5?5?5?5?5?5?5?9?9?9?9?9?9?9?9?9?9?9?9?5?5?5?5?5@
CONST	SEGMENT
??_C@_0DB@MHMLCEPM@?$CF3s?5?5?5?5?5?5?5?5?5?5?5?5?9?9?9?9?9?9?9?9?9?9?9?9?5?5?5?5?5@ DB '%'
	DB	'3s            ------------     %22.15g %17.15g', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@LEJCMOBM@?$CF3s?5?5?$CF22?415g?5?5?$CF22?415g?5?$CF17?415g?6?$AA@
CONST	SEGMENT
??_C@_0BP@LEJCMOBM@?$CF3s?5?5?$CF22?415g?5?5?$CF22?415g?5?$CF17?415g?6?$AA@ DB '%'
	DB	'3s  %22.15g  %22.15g %17.15g', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@PLPINFFM@?6Body?5?5?5?5?5?5?5?5?5?5target?5volume?5?5?5?5@
CONST	SEGMENT
??_C@_0EI@PLPINFFM@?6Body?5?5?5?5?5?5?5?5?5?5target?5volume?5?5?5?5@ DB 0aH
	DB	'Body          target volume           actual volume          '
	DB	'pressure', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KPPPANFP@recalculating?4?4?4?6?$AA@
CONST	SEGMENT
??_C@_0BC@KPPPANFP@recalculating?4?4?4?6?$AA@ DB 'recalculating...', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@IHNIMAMB@No?5bodies?5or?5quantities?4?6?$AA@
CONST	SEGMENT
??_C@_0BK@IHNIMAMB@No?5bodies?5or?5quantities?4?6?$AA@ DB 'No bodies or q'
	DB	'uantities.', 0aH, 00H			; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\command.c
CONST	ENDS
;	COMDAT _show_volumes
_TEXT	SEGMENT
_headerflag$ = -16					; size = 4
tv486 = -12						; size = 8
_recalc_flag$ = -8					; size = 4
_max_name$ = -4						; size = 4
_show_volumes PROC					; COMDAT

; 1138 : { body_id b_id;

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	edi

; 1139 :   int k;
; 1140 :   struct gen_quant *quan;
; 1141 :   int headerflag = 0;

	xor	edi, edi
	mov	DWORD PTR _headerflag$[ebp], edi

; 1142 :   int recalc_flag = 0;

	mov	DWORD PTR _recalc_flag$[ebp], edi

; 1143 :   unsigned int max_name = 20;

	mov	DWORD PTR _max_name$[ebp], 20		; 00000014H

; 1144 : 
; 1145 :   if ( (web.bodycount == 0) && !gen_quant_count)

	cmp	DWORD PTR _web+1500, edi
	jne	SHORT $LN81@show_volum
	cmp	DWORD PTR _web+5528, edi
	jne	SHORT $LN81@show_volum

; 1146 :   { outstring("No bodies or quantities.\n");

	push	OFFSET ??_C@_0BK@IHNIMAMB@No?5bodies?5or?5quantities?4?6?$AA@
	call	_outstring
	add	esp, 4
	pop	edi

; 1269 :      }
; 1270 :    }
; 1271 : }  /* end show_volumes() */

	mov	esp, ebp
	pop	ebp
	ret	0
$LN81@show_volum:

; 1147 :     return;
; 1148 :   }
; 1149 : 
; 1150 :   if ( (fixed_volume_timestamp < global_timestamp)
; 1151 :       || ( info_volume_timestamp < global_timestamp) )

	mov	eax, DWORD PTR _global_timestamp
	cmp	DWORD PTR _fixed_volume_timestamp, eax
	jl	SHORT $LN34@show_volum
	cmp	DWORD PTR _info_volume_timestamp, eax
	jge	SHORT $LN79@show_volum
$LN34@show_volum:

; 1152 :     recalc_flag = 1;

	mov	DWORD PTR _recalc_flag$[ebp], 1
$LN79@show_volum:
	push	ebx

; 1153 : 
; 1154 :   for ( k=0 ; k < gen_quant_count; k++ )

	xor	ebx, ebx
	push	esi
	cmp	DWORD PTR _web+5528, edi
	jle	$LN77@show_volum
	npad	12
$LL84@show_volum:

; 1155 :   { quan = GEN_QUANT(k);

	mov	eax, DWORD PTR _gen_quant_list
	lea	edx, DWORD PTR [edi+eax]

; 1156 :     if ( (quan->flags & DEFAULT_QUANTITY) && !show_all_quantities )

	mov	eax, DWORD PTR [edx+136]
	test	eax, 8192				; 00002000H
	je	SHORT $LN30@show_volum
	cmp	DWORD PTR _show_all_quantities, 0
	je	SHORT $LN32@show_volum
$LN30@show_volum:

; 1157 :          continue;
; 1158 :     if (quan->flags & Q_DELETED ) continue;

	test	eax, 524288				; 00080000H
	jne	SHORT $LN32@show_volum

; 1159 : 	if ( !(quan->flags  & (Q_FIXED|Q_INFO|Q_ENERGY)) ) continue;

	test	al, 7
	je	SHORT $LN32@show_volum

; 1160 :     if ( strlen(quan->name) > max_name )

	mov	eax, edx
	lea	esi, DWORD PTR [eax+1]
	npad	2
$LL75@show_volum:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL75@show_volum
	sub	eax, esi
	cmp	eax, DWORD PTR _max_name$[ebp]
	jbe	SHORT $LN27@show_volum

; 1161 :             max_name = strlen(quan->name);

	mov	eax, edx
	lea	esi, DWORD PTR [eax+1]
$LL76@show_volum:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL76@show_volum
	sub	eax, esi
	mov	DWORD PTR _max_name$[ebp], eax
$LN27@show_volum:

; 1162 :     if ( (quan->timestamp < global_timestamp) 
; 1163 :                  || (quan->timestamp < global_timestamp) )

	mov	ecx, DWORD PTR _global_timestamp
	cmp	DWORD PTR [edx+364], ecx
	jge	SHORT $LN32@show_volum

; 1164 :     { 
; 1165 : #ifdef MPI_EVOLVER
; 1166 :       if ( this_task == MASTER_TASK )
; 1167 : #endif
; 1168 : 	  { if ( !recalc_flag )

	cmp	DWORD PTR _recalc_flag$[ebp], 0
	jne	SHORT $LN24@show_volum

; 1169 :           outstring("recalculating...\n");

	push	OFFSET ??_C@_0BC@KPPPANFP@recalculating?4?4?4?6?$AA@
	call	_outstring
	add	esp, 4
$LN24@show_volum:

; 1170 :         recalc_flag = 1;

	mov	DWORD PTR _recalc_flag$[ebp], 1
$LN32@show_volum:

; 1153 : 
; 1154 :   for ( k=0 ; k < gen_quant_count; k++ )

	inc	ebx
	add	edi, 368				; 00000170H
	cmp	ebx, DWORD PTR _web+5528
	jl	$LL84@show_volum
$LN77@show_volum:

; 1171 : 
; 1172 : 	  }
; 1173 : 	  
; 1174 :     }
; 1175 :   }
; 1176 :   if ( recalc_flag )

	cmp	DWORD PTR _recalc_flag$[ebp], 0
	je	SHORT $LN23@show_volum

; 1177 :        calc_content(Q_FIXED|Q_INFO|Q_ENERGY);

	push	7
	call	_calc_content
	fstp	ST(0)
	add	esp, 4
$LN23@show_volum:

; 1178 :   if ( web.bodycount )

	cmp	DWORD PTR _web+1500, 0
	je	$LN78@show_volum

; 1179 :   {
; 1180 :     outstring("\nBody          target volume           actual volume          pressure\n");

	push	OFFSET ??_C@_0EI@PLPINFFM@?6Body?5?5?5?5?5?5?5?5?5?5target?5volume?5?5?5?5@
	call	_outstring

; 1181 :     FOR_ALL_BODIES(b_id)

	mov	edx, DWORD PTR _web+384
	mov	ebx, edx
	shr	ebx, 28					; 0000001cH
	add	esp, 4
	and	ebx, 1
	je	$LN78@show_volum
	fldz
$LN80@show_volum:
	mov	eax, DWORD PTR _web+348
	mov	esi, edx
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR tv486[ebp+4], eax
	mov	eax, ecx
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	je	$LN20@show_volum

; 1182 :     { if ( equal_id(b_id,web.outside_body) ) continue;

	cmp	edx, DWORD PTR _web+1504
	je	$LN20@show_volum

; 1183 : #ifdef FLOAT128
; 1184 :       if ( get_battr(b_id) & FIXEDVOL )
; 1185 :         sprintf(msg,"%3s  %*.*Qg      %*.*Qg    %*.*Qg\n",
; 1186 :              ELNAME(b_id),DWIDTH,DPREC,get_body_fixvol(b_id),
; 1187 :             DWIDTH,DPREC, get_body_volume(b_id),DWIDTH,DPREC,get_body_pressure(b_id));
; 1188 :       else if ( get_battr(b_id) & PRESSURE )
; 1189 :         sprintf(msg,"%3s         ------------     %*.*Qg    %*.*Qg\n",
; 1190 :              ELNAME(b_id),
; 1191 :              DWIDTH,DPREC,get_body_volume(b_id),DWIDTH,DPREC,get_body_pressure(b_id));
; 1192 :       else /* not a constraint */
; 1193 :           sprintf(msg,"%3s         ------------     %*.*Qg \n",
; 1194 :              ELNAME(b_id), DWIDTH,DPREC,get_body_volume(b_id));
; 1195 : #elif defined(LONGDOUBLE)
; 1196 :       if ( get_battr(b_id) & FIXEDVOL )
; 1197 :         sprintf(msg,"%3s  %*.*Lg      %*.*Lg    %*.*Lg\n",
; 1198 :              ELNAME(b_id),DWIDTH,DPREC,get_body_fixvol(b_id),
; 1199 :             DWIDTH,DPREC, get_body_volume(b_id),DWIDTH,DPREC,get_body_pressure(b_id));
; 1200 :       else if ( get_battr(b_id) & PRESSURE )
; 1201 :         sprintf(msg,"%3s         ------------     %*.*Lg    %*.*Lg\n",
; 1202 :              ELNAME(b_id),
; 1203 :              DWIDTH,DPREC,get_body_volume(b_id),DWIDTH,DPREC,get_body_pressure(b_id));
; 1204 :       else /* not a constraint */
; 1205 :           sprintf(msg,"%3s         ------------     %*.*Lg \n",
; 1206 :              ELNAME(b_id), DWIDTH,DPREC,get_body_volume(b_id));
; 1207 : #else
; 1208 :       if ( get_battr(b_id) & FIXEDVOL )

	mov	eax, ecx
	and	eax, 32					; 00000020H
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN15@show_volum

; 1209 :         sprintf(msg,"%3s  %22.15g  %22.15g %17.15g\n",
; 1210 :              ELNAME(b_id),get_body_fixvol(b_id),
; 1211 :              get_body_volume(b_id),get_body_pressure(b_id));

	test	ebx, ebx
	je	SHORT $LN39@show_volum
	lea	ecx, DWORD PTR [esi+1]
	fstp	ST(0)
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	mov	edx, DWORD PTR _web+348
	mov	eax, DWORD PTR [edx+esi*4]
	fld	QWORD PTR [eax+312]
	add	esp, 12					; 0000000cH
	fld	QWORD PTR [eax+40]
	mov	ecx, OFFSET _elnames
	fld	QWORD PTR [eax+32]
	fxch	ST(2)
	fxch	ST(1)
$LN56@show_volum:
	mov	eax, DWORD PTR _msg
	fxch	ST(1)
	sub	esp, 24					; 00000018H
	fstp	QWORD PTR [esp+16]
	fstp	QWORD PTR [esp+8]
	fstp	QWORD PTR [esp]
	push	ecx
	push	OFFSET ??_C@_0BP@LEJCMOBM@?$CF3s?5?5?$CF22?415g?5?5?$CF22?415g?5?$CF17?415g?6?$AA@
	push	eax
	call	_sprintf
	add	esp, 36					; 00000024H
	jmp	$LN12@show_volum
$LN39@show_volum:
	fld	ST(0)
	mov	ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	fld	ST(1)
	jmp	SHORT $LN56@show_volum
$LN15@show_volum:

; 1212 :       else if ( get_battr(b_id) & PRESSURE )

	and	ecx, 2048				; 00000800H
	xor	eax, eax
	or	ecx, eax
	je	SHORT $LN13@show_volum

; 1213 :         sprintf(msg,"%3s            ------------     %22.15g %17.15g\n",
; 1214 :              ELNAME(b_id),
; 1215 :              get_body_volume(b_id),get_body_pressure(b_id));

	test	ebx, ebx
	je	SHORT $LN41@show_volum
	lea	ecx, DWORD PTR [esi+1]
	fstp	ST(0)
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	mov	edx, DWORD PTR _web+348
	mov	ecx, DWORD PTR [edx+esi*4]
	fld	QWORD PTR [ecx+312]
	add	esp, 12					; 0000000cH
	fld	QWORD PTR [ecx+40]
	mov	eax, OFFSET _elnames
	fxch	ST(1)
$LN64@show_volum:
	sub	esp, 16					; 00000010H
	fstp	QWORD PTR [esp+8]
	fstp	QWORD PTR [esp]
	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0DB@MHMLCEPM@?$CF3s?5?5?5?5?5?5?5?5?5?5?5?5?9?9?9?9?9?9?9?9?9?9?9?9?5?5?5?5?5@
	push	eax
	call	_sprintf
	add	esp, 28					; 0000001cH

; 1216 :       else /* not a constraint */

	jmp	SHORT $LN12@show_volum
$LN41@show_volum:

; 1213 :         sprintf(msg,"%3s            ------------     %22.15g %17.15g\n",
; 1214 :              ELNAME(b_id),
; 1215 :              get_body_volume(b_id),get_body_pressure(b_id));

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	fld	ST(0)
	jmp	SHORT $LN64@show_volum
$LN13@show_volum:

; 1217 :         sprintf(msg,"%3s            ------------     %22.15g \n",
; 1218 :              ELNAME(b_id), get_body_volume(b_id));

	test	ebx, ebx
	je	$LN43@show_volum
	lea	ecx, DWORD PTR [esi+1]
	fstp	ST(0)
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	mov	edx, DWORD PTR _web+348
	mov	ecx, DWORD PTR [edx+esi*4]
	fld	QWORD PTR [ecx+40]
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
$LN68@show_volum:
	mov	edx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	eax
	push	OFFSET ??_C@_0CK@KMNLKCPB@?$CF3s?5?5?5?5?5?5?5?5?5?5?5?5?9?9?9?9?9?9?9?9?9?9?9?9?5?5?5?5?5@
	push	edx
	call	_sprintf
	add	esp, 20					; 00000014H
$LN12@show_volum:

; 1219 : #endif
; 1220 :       outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	fldz
	add	esp, 4
$LN20@show_volum:

; 1181 :     FOR_ALL_BODIES(b_id)

	mov	ecx, DWORD PTR _web+348
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [edx]
	mov	ebx, edx
	shr	ebx, 28					; 0000001cH
	and	ebx, 1
	jne	$LN80@show_volum
	fstp	ST(0)
$LN78@show_volum:

; 1221 :     }
; 1222 :   }
; 1223 :   if (  gen_quant_count )

	mov	eax, DWORD PTR _web+5528
	test	eax, eax
	je	$LN85@show_volum

; 1224 :   {
; 1225 :      for ( k=0 ; k < gen_quant_count; k++ )

	xor	edi, edi
	test	eax, eax
	jle	$LN85@show_volum
	xor	ebx, ebx
	npad	13
$LL10@show_volum:

; 1226 :      { quan = GEN_QUANT(k);

	mov	eax, DWORD PTR _gen_quant_list
	lea	esi, DWORD PTR [ebx+eax]

; 1227 :        if ( (quan->flags & DEFAULT_QUANTITY) && !show_all_quantities )

	mov	eax, DWORD PTR [esi+136]
	test	eax, 8192				; 00002000H
	je	SHORT $LN83@show_volum
	cmp	DWORD PTR _show_all_quantities, 0
	je	$LN9@show_volum
$LN83@show_volum:

; 1228 :          continue;
; 1229 :        if ( quan->flags & Q_DELETED ) continue;

	test	eax, 524288				; 00080000H
	jne	$LN9@show_volum

; 1230 :        if ( !headerflag )

	cmp	DWORD PTR _headerflag$[ebp], 0
	jne	SHORT $LN5@show_volum

; 1231 :        { sprintf(msg,"\n%*s       target value           actual value                 pressure\n",max_name,"           Quantity");

	mov	ecx, DWORD PTR _max_name$[ebp]
	mov	edx, DWORD PTR _msg
	push	OFFSET ??_C@_0BE@PGHIPGJJ@?5?5?5?5?5?5?5?5?5?5?5Quantity?$AA@
	push	ecx
	push	OFFSET ??_C@_0EJ@EKAKILKO@?6?$CF?$CKs?5?5?5?5?5?5?5target?5value?5?5?5?5?5?5?5?5?5@
	push	edx
	call	_sprintf

; 1232 :          outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 20					; 00000014H
$LN5@show_volum:

; 1233 :        }
; 1234 :        headerflag = 1;
; 1235 : #ifdef FLOAT128
; 1236 :        if ( quan->flags & Q_CONSERVED )
; 1237 :          sprintf(msg,"%*s    (conserved)      ----------------- %*.*Qg\n",max_name,
; 1238 :               quan->name, DWIDTH,DPREC,quan->pressure);
; 1239 :        else if ( quan->flags & Q_FIXED )
; 1240 :          sprintf(msg,"%*s  %*.*Qg  %*.*Qg  %*.*Qg\n",max_name,
; 1241 :               quan->name,DWIDTH,DPREC,quan->target,DWIDTH,DPREC,
; 1242 :               quan->value,DWIDTH,DPREC,quan->pressure);
; 1243 :        else
; 1244 :          sprintf(msg,"%20s         ---------  %*.*Qg\n",
; 1245 :                quan->name,DWIDTH,DPREC,quan->value);
; 1246 : #elif defined(LONGDOUBLE)
; 1247 :        if ( quan->flags & Q_CONSERVED )
; 1248 :          sprintf(msg,"%*s    (conserved)      ----------------- %*.*Lg\n",max_name,
; 1249 :               quan->name, DWIDTH,DPREC,quan->pressure);
; 1250 :        else if ( quan->flags & Q_FIXED )
; 1251 :          sprintf(msg,"%*s  %*.*Lg  %*.*Lg  %*.*Lg\n",max_name,
; 1252 :               quan->name,DWIDTH,DPREC,quan->target,DWIDTH,DPREC,
; 1253 :               quan->value,DWIDTH,DPREC,quan->pressure);
; 1254 :        else
; 1255 :          sprintf(msg,"%20s         ---------  %*.*Lg\n",
; 1256 :                quan->name,DWIDTH,DPREC,quan->value);
; 1257 : #else
; 1258 :        if ( quan->flags & Q_CONSERVED )

	mov	eax, DWORD PTR [esi+136]
	mov	DWORD PTR _headerflag$[ebp], 1
	test	al, 8
	je	SHORT $LN4@show_volum

; 1259 :          sprintf(msg,"%*s     (conserved)     ----------------   %17.15g\n",max_name,
; 1260 :               quan->name,quan->pressure);

	fld	QWORD PTR [esi+192]
	mov	ecx, DWORD PTR _max_name$[ebp]
	mov	edx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	esi
	push	ecx
	push	OFFSET ??_C@_0DE@MPCNLPNL@?$CF?$CKs?5?5?5?5?5?$CIconserved?$CJ?5?5?5?5?5?9?9?9?9?9?9?9?9@
	push	edx
	jmp	SHORT $LN123@show_volum
$LN43@show_volum:

; 1217 :         sprintf(msg,"%3s            ------------     %22.15g \n",
; 1218 :              ELNAME(b_id), get_body_volume(b_id));

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	$LN68@show_volum
$LN4@show_volum:

; 1261 :        else if ( quan->flags & Q_FIXED )

	test	al, 2
	je	SHORT $LN2@show_volum

; 1262 :          sprintf(msg,"%*s  %22.15g  %22.15g  %17.15g\n",max_name,
; 1263 :               quan->name,quan->target,quan->value,quan->pressure);

	fld	QWORD PTR [esi+192]
	mov	eax, DWORD PTR _max_name$[ebp]
	mov	ecx, DWORD PTR _msg
	sub	esp, 24					; 00000018H
	fstp	QWORD PTR [esp+16]
	fld	QWORD PTR [esi+152]
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR [esi+144]
	fstp	QWORD PTR [esp]
	push	esi
	push	eax
	push	OFFSET ??_C@_0CA@HMNLIEDF@?$CF?$CKs?5?5?$CF22?415g?5?5?$CF22?415g?5?5?$CF17?415g?6?$AA@
	push	ecx
	call	_sprintf
	add	esp, 40					; 00000028H

; 1264 :        else

	jmp	SHORT $LN1@show_volum
$LN2@show_volum:

; 1265 :          sprintf(msg,"%*s         ---------      %22.15g\n",max_name,
; 1266 :                 quan->name,quan->value);

	fld	QWORD PTR [esi+152]
	mov	edx, DWORD PTR _max_name$[ebp]
	mov	eax, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	esi
	push	edx
	push	OFFSET ??_C@_0CE@JNNGBMFO@?$CF?$CKs?5?5?5?5?5?5?5?5?5?9?9?9?9?9?9?9?9?9?5?5?5?5?5?5?$CF22?41@
	push	eax
$LN123@show_volum:
	call	_sprintf
	add	esp, 24					; 00000018H
$LN1@show_volum:

; 1267 : #endif
; 1268 :        outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 4
$LN9@show_volum:

; 1224 :   {
; 1225 :      for ( k=0 ; k < gen_quant_count; k++ )

	inc	edi
	add	ebx, 368				; 00000170H
	cmp	edi, DWORD PTR _web+5528
	jl	$LL10@show_volum
$LN85@show_volum:
	pop	esi
	pop	ebx
	pop	edi

; 1269 :      }
; 1270 :    }
; 1271 : }  /* end show_volumes() */

	mov	esp, ebp
	pop	ebp
	ret	0
_show_volumes ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@NFNPHADI@Need?5number?5AND?5value?4?6?$AA@ ; `string'
PUBLIC	??_C@_0BG@LECECEIM@Bad?5parameter?5number?4?$AA@ ; `string'
PUBLIC	??_C@_0M@JGEILEAN@?$CFd?5?$CF17?415g?6?$AA@	; `string'
PUBLIC	??_C@_0BI@GJJHCJNI@Bad?5parameter?5number?4?5?6?$AA@ ; `string'
PUBLIC	??_C@_02OJDBNLEE@?5?7?$AA@			; `string'
PUBLIC	??_C@_0BH@INPHOKGK@Number?5and?5new?5value?3?5?$AA@ ; `string'
PUBLIC	??_C@_0BH@IFAIJIDP@?5?5?5Nothing?5to?5report?4?6?$AA@ ; `string'
PUBLIC	??_C@_0BH@EEECKJFA@Permanent?5variables?3?5?6?$AA@ ; `string'
PUBLIC	??_C@_0BG@EGKFJGFI@?$CF2d?4?5?$CF31?431s?5?5?$CF1?440s?6?$AA@ ; `string'
PUBLIC	??_C@_04KBDJOJNB@?$FL?$CFd?$FN?$AA@		; `string'
PUBLIC	??_C@_0BH@ECPEEAEO@?$CF2d?4?5?$CF31?431s?5?5array?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BI@FMJDDPLC@?5?5optimizing_parameter?6?$AA@ ; `string'
PUBLIC	??_C@_0BJ@FJKOCOLF@?$CF2d?4?5?$CF31?431s?5?5?$CF?9?$CD21?415g?6?$AA@ ; `string'
PUBLIC	??_C@_0N@EPBABDNH@Variables?3?5?6?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_set_parameters
EXTRN	_const_expr:PROC
EXTRN	_strtok:PROC
EXTRN	_sscanf:PROC
EXTRN	_prompt:PROC
EXTRN	_fprintf:PROC
EXTRN	_logfd:DWORD
EXTRN	_datatype_name:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0BI@NFNPHADI@Need?5number?5AND?5value?4?6?$AA@
CONST	SEGMENT
??_C@_0BI@NFNPHADI@Need?5number?5AND?5value?4?6?$AA@ DB 'Need number AND '
	DB	'value.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LECECEIM@Bad?5parameter?5number?4?$AA@
CONST	SEGMENT
??_C@_0BG@LECECEIM@Bad?5parameter?5number?4?$AA@ DB 'Bad parameter number'
	DB	'.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JGEILEAN@?$CFd?5?$CF17?415g?6?$AA@
CONST	SEGMENT
??_C@_0M@JGEILEAN@?$CFd?5?$CF17?415g?6?$AA@ DB '%d %17.15g', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GJJHCJNI@Bad?5parameter?5number?4?5?6?$AA@
CONST	SEGMENT
??_C@_0BI@GJJHCJNI@Bad?5parameter?5number?4?5?6?$AA@ DB 'Bad parameter nu'
	DB	'mber. ', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02OJDBNLEE@?5?7?$AA@
CONST	SEGMENT
??_C@_02OJDBNLEE@?5?7?$AA@ DB ' ', 09H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@INPHOKGK@Number?5and?5new?5value?3?5?$AA@
CONST	SEGMENT
??_C@_0BH@INPHOKGK@Number?5and?5new?5value?3?5?$AA@ DB 'Number and new va'
	DB	'lue: ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IFAIJIDP@?5?5?5Nothing?5to?5report?4?6?$AA@
CONST	SEGMENT
??_C@_0BH@IFAIJIDP@?5?5?5Nothing?5to?5report?4?6?$AA@ DB '   Nothing to r'
	DB	'eport.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EEECKJFA@Permanent?5variables?3?5?6?$AA@
CONST	SEGMENT
??_C@_0BH@EEECKJFA@Permanent?5variables?3?5?6?$AA@ DB 'Permanent variable'
	DB	's: ', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EGKFJGFI@?$CF2d?4?5?$CF31?431s?5?5?$CF1?440s?6?$AA@
CONST	SEGMENT
??_C@_0BG@EGKFJGFI@?$CF2d?4?5?$CF31?431s?5?5?$CF1?440s?6?$AA@ DB '%2d. %3'
	DB	'1.31s  %1.40s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04KBDJOJNB@?$FL?$CFd?$FN?$AA@
CONST	SEGMENT
??_C@_04KBDJOJNB@?$FL?$CFd?$FN?$AA@ DB '[%d]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@ECPEEAEO@?$CF2d?4?5?$CF31?431s?5?5array?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BH@ECPEEAEO@?$CF2d?4?5?$CF31?431s?5?5array?5?$CFs?$AA@ DB '%2d. %3'
	DB	'1.31s  array %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FMJDDPLC@?5?5optimizing_parameter?6?$AA@
CONST	SEGMENT
??_C@_0BI@FMJDDPLC@?5?5optimizing_parameter?6?$AA@ DB '  optimizing_param'
	DB	'eter', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FJKOCOLF@?$CF2d?4?5?$CF31?431s?5?5?$CF?9?$CD21?415g?6?$AA@
CONST	SEGMENT
??_C@_0BJ@FJKOCOLF@?$CF2d?4?5?$CF31?431s?5?5?$CF?9?$CD21?415g?6?$AA@ DB '%'
	DB	'2d. %31.31s  %-#21.15g', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EPBABDNH@Variables?3?5?6?$AA@
CONST	SEGMENT
??_C@_0N@EPBABDNH@Variables?3?5?6?$AA@ DB 'Variables: ', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _set_parameters
_TEXT	SEGMENT
_val$ = -128						; size = 8
_pchange_flag$ = -120					; size = 4
tv788 = -116						; size = 4
_titleflag$89781 = -116					; size = 4
_showcount$ = -112					; size = 4
_n$ = -108						; size = 4
_response$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
_set_parameters PROC					; COMDAT

; 1283 : { int n;

	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 1284 :   REAL val;
; 1285 :   char response[100];
; 1286 :   int pchange_flag = 0;

	xor	esi, esi

; 1287 :   int showcount = 0;
; 1288 :  
; 1289 :   outstring("Variables: \n");

	push	OFFSET ??_C@_0N@EPBABDNH@Variables?3?5?6?$AA@
	mov	DWORD PTR _pchange_flag$[ebp], esi
	mov	DWORD PTR _showcount$[ebp], esi
	call	_outstring

; 1290 :   for ( n = 0 ; n < web.global_count ; n++ )

	mov	ebx, DWORD PTR _web+5540
	xor	eax, eax
	add	esp, 4
	mov	DWORD PTR _n$[ebp], eax
	cmp	ebx, esi
	jle	$LN100@set_parame
	mov	edx, DWORD PTR _web+5652
	mov	edi, DWORD PTR _dymem
	npad	6
$LL47@set_parame:

; 1291 :   { struct global *g = globals(n);

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN50@set_parame
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN52@set_parame
	mov	ecx, DWORD PTR _localbase
	mov	esi, eax
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	add	esi, DWORD PTR [ecx]
	jmp	SHORT $LN51@set_parame
$LN52@set_parame:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN50@set_parame
	mov	esi, DWORD PTR _web+5656
	mov	ecx, eax
	and	ecx, 16777215				; 00ffffffH
	mov	esi, DWORD PTR [esi+ecx*4]
	jmp	SHORT $LN51@set_parame
$LN50@set_parame:
	mov	ecx, eax
	and	ecx, 16777215				; 00ffffffH
	lea	ecx, DWORD PTR [edx+ecx*4]
	mov	esi, DWORD PTR [ecx+edi]
$LN51@set_parame:

; 1292 :     if ( g->flags & SUBROUTINE ) continue;

	mov	ecx, DWORD PTR [esi+192]
	test	cl, 4
	jne	$LN46@set_parame

; 1293 :     if ( !g->flags ) continue;

	test	ecx, ecx
	je	$LN46@set_parame

; 1294 :     if ( g->flags & ORDINARY_PARAM )

	test	cl, 1
	je	$LN42@set_parame

; 1295 :     { 
; 1296 : #ifdef FLOAT128
; 1297 :       sprintf(msg,"%2d. %31.31s  %-#*.*Qg\n",
; 1298 :         n+1,g->name,DWIDTH,DPREC,g->value.real);
; 1299 : #elif defined(LONGDOUBLE)
; 1300 :       sprintf(msg,"%2d. %31.31s  %-#*.*Lg\n",
; 1301 :         n+1,g->name,DWIDTH,DPREC,g->value.real);
; 1302 : #else
; 1303 :       sprintf(msg,"%2d. %31.31s  %-#21.15g\n",
; 1304 :         n+1,g->name,g->value.real);

	fld	QWORD PTR [esi+64]
	mov	edx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	esi
	inc	eax
	push	eax
	push	OFFSET ??_C@_0BJ@FJKOCOLF@?$CF2d?4?5?$CF31?431s?5?5?$CF?9?$CD21?415g?6?$AA@
	push	edx
	call	_sprintf
	add	esp, 24					; 00000018H

; 1305 : #endif
; 1306 :       if ( g->flags & OPTIMIZING_PARAMETER )

	test	DWORD PTR [esi+192], 32768		; 00008000H
	je	$LN33@set_parame

; 1307 :          strcpy(msg+strlen(msg)-1,"  optimizing_parameter\n");

	mov	edx, DWORD PTR _msg
	mov	eax, edx
	lea	esi, DWORD PTR [eax+1]
$LL95@set_parame:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL95@set_parame
	mov	ecx, DWORD PTR ??_C@_0BI@FMJDDPLC@?5?5optimizing_parameter?6?$AA@
	sub	eax, esi
	lea	eax, DWORD PTR [eax+edx-1]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ??_C@_0BI@FMJDDPLC@?5?5optimizing_parameter?6?$AA@+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR ??_C@_0BI@FMJDDPLC@?5?5optimizing_parameter?6?$AA@+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR ??_C@_0BI@FMJDDPLC@?5?5optimizing_parameter?6?$AA@+12
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR ??_C@_0BI@FMJDDPLC@?5?5optimizing_parameter?6?$AA@+16
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR ??_C@_0BI@FMJDDPLC@?5?5optimizing_parameter?6?$AA@+20
	mov	DWORD PTR [eax+20], edx

; 1308 :     }
; 1309 :     else if ( g->flags & ARRAY_PARAM )

	jmp	$LN33@set_parame
$LN42@set_parame:
	test	ecx, 2048				; 00000800H
	je	$LN39@set_parame

; 1310 :     { int k;
; 1311 :       sprintf(msg,"%2d. %31.31s  array %s",n+1,g->name,datatype_name[g->type]);

	mov	ecx, DWORD PTR [esi+200]
	mov	edx, DWORD PTR _datatype_name[ecx*4]
	push	edx
	push	esi
	inc	eax
	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0BH@ECPEEAEO@?$CF2d?4?5?$CF31?431s?5?5array?5?$CFs?$AA@
	push	eax
	call	_sprintf

; 1312 :       for ( k = 0 ; k < g->attr.arrayptr->dim ; k++ )

	mov	ecx, DWORD PTR [esi+168]
	xor	edi, edi
	add	esp, 20					; 00000014H
	cmp	DWORD PTR [ecx+4], edi
	jle	SHORT $LN36@set_parame

; 1310 :     { int k;
; 1311 :       sprintf(msg,"%2d. %31.31s  array %s",n+1,g->name,datatype_name[g->type]);

	lea	ebx, DWORD PTR [edi+24]
	npad	5
$LL38@set_parame:

; 1313 :         sprintf(msg+strlen(msg),"[%d]",g->attr.arrayptr->sizes[k]);

	mov	eax, DWORD PTR _msg
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR tv788[ebp], edx
	npad	5
$LL96@set_parame:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL96@set_parame
	sub	eax, DWORD PTR tv788[ebp]
	mov	ecx, DWORD PTR [ebx+ecx]
	add	eax, DWORD PTR _msg
	push	ecx
	push	OFFSET ??_C@_04KBDJOJNB@?$FL?$CFd?$FN?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR [esi+168]
	inc	edi
	add	esp, 12					; 0000000cH
	add	ebx, 4
	cmp	edi, DWORD PTR [ecx+4]
	jl	SHORT $LL38@set_parame
$LN36@set_parame:

; 1314 :       strcat(msg,"\n");

	mov	edi, DWORD PTR _msg
	dec	edi
$LL97@set_parame:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL97@set_parame
	mov	ax, WORD PTR ??_C@_01EEMJAFIK@?6?$AA@
	mov	WORD PTR [edi], ax
	jmp	SHORT $LN33@set_parame
$LN39@set_parame:

; 1315 :     }
; 1316 :     else if ( g->flags & STRINGVAL )

	test	ecx, 8192				; 00002000H
	je	SHORT $LN46@set_parame

; 1317 :      sprintf(msg,"%2d. %31.31s  %1.40s\n", n+1,g->name,g->value.string);

	mov	ecx, DWORD PTR [esi+64]
	mov	edx, DWORD PTR _msg
	push	ecx
	push	esi
	inc	eax
	push	eax
	push	OFFSET ??_C@_0BG@EGKFJGFI@?$CF2d?4?5?$CF31?431s?5?5?$CF1?440s?6?$AA@
	push	edx
	call	_sprintf
	add	esp, 20					; 00000014H
$LN33@set_parame:

; 1318 :     else continue;
; 1319 :     outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring

; 1320 :     showcount++;

	mov	eax, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _web+5652
	mov	ebx, DWORD PTR _web+5540
	mov	edi, DWORD PTR _dymem
	add	esp, 4
	inc	DWORD PTR _showcount$[ebp]
$LN46@set_parame:

; 1290 :   for ( n = 0 ; n < web.global_count ; n++ )

	inc	eax
	mov	DWORD PTR _n$[ebp], eax
	cmp	eax, ebx
	jl	$LL47@set_parame
$LN100@set_parame:

; 1321 :   }
; 1322 :   if ( web.perm_global_count )

	mov	esi, DWORD PTR _web+5548
	xor	ecx, ecx
	cmp	esi, ecx
	je	$LN102@set_parame

; 1323 :   { int titleflag = 0;

	mov	DWORD PTR _titleflag$89781[ebp], ecx

; 1324 :     for ( n = 0 ; n < web.perm_global_count ; n++ )

	mov	DWORD PTR _n$[ebp], ecx
	jle	$LN102@set_parame
	mov	edi, DWORD PTR _showcount$[ebp]
	npad	1
$LL31@set_parame:

; 1325 :     { if ( perm_globals(n)->flags & (SUBROUTINE|INTERNAL_NAME) ) continue;

	mov	eax, DWORD PTR _web+5656
	mov	edx, ecx
	and	edx, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+192]
	test	edx, 4194308				; 00400004H
	jne	$LN30@set_parame

; 1326 :       if ( !perm_globals(n)->flags ) continue;

	test	edx, edx
	je	$LN30@set_parame

; 1327 :       if ( perm_globals(n)->flags & ORDINARY_PARAM )

	test	dl, 1
	je	$LN26@set_parame

; 1328 :       { 
; 1329 : #ifdef FLOAT128
; 1330 :         sprintf(msg,"%2d. %31.31s  %-#*.*Qg\n", web.global_count +
; 1331 :           n+1,perm_globals(n)->name,DWIDTH,DPREC,perm_globals(n)->value.real);
; 1332 : #elif defined(LONGDOUBLE)
; 1333 :         sprintf(msg,"%2d. %31.31s  %-#*.*Lg\n", web.global_count +
; 1334 :           n+1,perm_globals(n)->name,DWIDTH,DPREC,perm_globals(n)->value.real);
; 1335 : #else
; 1336 :         sprintf(msg,"%2d. %31.31s  %-#21.15g\n", web.global_count +
; 1337 :           n+1,perm_globals(n)->name,perm_globals(n)->value.real);

	mov	eax, DWORD PTR [eax]
	fld	QWORD PTR [eax+64]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	eax
	lea	eax, DWORD PTR [ebx+ecx+1]
	mov	ecx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0BJ@FJKOCOLF@?$CF2d?4?5?$CF31?431s?5?5?$CF?9?$CD21?415g?6?$AA@
	push	ecx
	call	_sprintf

; 1338 : #endif
; 1339 :         if ( globals(n)->flags & OPTIMIZING_PARAMETER )

	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	add	esp, 24					; 00000018H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN56@set_parame
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN58@set_parame
	mov	edx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [edx]
	jmp	SHORT $LN57@set_parame
$LN58@set_parame:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN56@set_parame
	mov	ecx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN57@set_parame
$LN56@set_parame:
	mov	edx, DWORD PTR _web+5652
	mov	ecx, DWORD PTR _dymem
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ecx]
$LN57@set_parame:
	test	DWORD PTR [eax+192], 32768		; 00008000H
	je	SHORT $LN22@set_parame

; 1340 :            strcpy(msg+strlen(msg)-1,"  optimizing_parameter\n");

	mov	edx, DWORD PTR _msg
	mov	eax, edx
	lea	esi, DWORD PTR [eax+1]
$LL98@set_parame:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL98@set_parame
	sub	eax, esi
	lea	eax, DWORD PTR [eax+edx-1]
	mov	edx, DWORD PTR ??_C@_0BI@FMJDDPLC@?5?5optimizing_parameter?6?$AA@
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR ??_C@_0BI@FMJDDPLC@?5?5optimizing_parameter?6?$AA@+4
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR ??_C@_0BI@FMJDDPLC@?5?5optimizing_parameter?6?$AA@+8
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR ??_C@_0BI@FMJDDPLC@?5?5optimizing_parameter?6?$AA@+12
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR ??_C@_0BI@FMJDDPLC@?5?5optimizing_parameter?6?$AA@+16
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR ??_C@_0BI@FMJDDPLC@?5?5optimizing_parameter?6?$AA@+20
	mov	DWORD PTR [eax+20], ecx

; 1341 :       }
; 1342 :       else if ( perm_globals(n)->flags & STRINGVAL )

	jmp	SHORT $LN22@set_parame
$LN26@set_parame:
	test	edx, 8192				; 00002000H
	je	SHORT $LN30@set_parame

; 1343 :        sprintf(msg,"%2d. %31.31s  %1.40s\n", web.global_count +
; 1344 :           n+1,perm_globals(n)->name,perm_globals(n)->value.string);

	mov	eax, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+64]
	push	edx
	push	eax
	lea	eax, DWORD PTR [ebx+ecx+1]
	mov	ecx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0BG@EGKFJGFI@?$CF2d?4?5?$CF31?431s?5?5?$CF1?440s?6?$AA@
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H
$LN22@set_parame:

; 1345 :       else continue;
; 1346 :       if ( !titleflag )

	cmp	DWORD PTR _titleflag$89781[ebp], 0
	jne	SHORT $LN21@set_parame

; 1347 :       { outstring("Permanent variables: \n");

	push	OFFSET ??_C@_0BH@EEECKJFA@Permanent?5variables?3?5?6?$AA@
	call	_outstring
	add	esp, 4

; 1348 :         titleflag = 1;

	mov	DWORD PTR _titleflag$89781[ebp], 1
$LN21@set_parame:

; 1349 :       }
; 1350 :       outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 1351 :       showcount++;

	mov	ecx, DWORD PTR _n$[ebp]
	mov	esi, DWORD PTR _web+5548
	mov	ebx, DWORD PTR _web+5540
	add	esp, 4
	inc	edi
$LN30@set_parame:

; 1324 :     for ( n = 0 ; n < web.perm_global_count ; n++ )

	inc	ecx
	mov	DWORD PTR _n$[ebp], ecx
	cmp	ecx, esi
	jl	$LL31@set_parame
	jmp	SHORT $LN29@set_parame
$LN102@set_parame:
	mov	edi, DWORD PTR _showcount$[ebp]
$LN29@set_parame:

; 1352 :     }
; 1353 :   }
; 1354 :   if ( showcount == 0 )

	test	edi, edi
	jne	SHORT $LN90@set_parame

; 1355 :     outstring("   Nothing to report.\n");

	push	OFFSET ??_C@_0BH@IFAIJIDP@?5?5?5Nothing?5to?5report?4?6?$AA@
	call	_outstring
	add	esp, 4
$LN103@set_parame:

; 1363 :     if ( retval <= 0 ) break;    /* no more responses */

	mov	esi, DWORD PTR _pchange_flag$[ebp]
$LN91@set_parame:

; 1411 :   }
; 1412 :   if ( logfd ) fprintf(logfd,"\n");

	mov	eax, DWORD PTR _logfd
	test	eax, eax
	je	SHORT $LN99@set_parame
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	push	eax
	call	_fprintf
	add	esp, 8
$LN99@set_parame:

; 1413 :   return pchange_flag;
; 1414 : } /* end set_parameters() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	mov	eax, esi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN90@set_parame:

; 1356 :   else
; 1357 :   /* ask for new values */
; 1358 :   for(;;)
; 1359 :   { int retval;
; 1360 :     char *c;
; 1361 :     prompt("Number and new value: ",response,sizeof(response));

	push	100					; 00000064H
	lea	eax, DWORD PTR _response$[ebp]
	push	eax
	push	OFFSET ??_C@_0BH@INPHOKGK@Number?5and?5new?5value?3?5?$AA@
	call	_prompt

; 1362 :     retval = sscanf(response,"%d",&n);

	lea	ecx, DWORD PTR _n$[ebp]
	push	ecx
	lea	edx, DWORD PTR _response$[ebp]
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	edx
	call	_sscanf
	add	esp, 24					; 00000018H

; 1363 :     if ( retval <= 0 ) break;    /* no more responses */

	test	eax, eax
	jle	SHORT $LN103@set_parame
	mov	esi, DWORD PTR _pchange_flag$[ebp]
$LL18@set_parame:

; 1364 :     strtok(response," \t");

	lea	eax, DWORD PTR _response$[ebp]
	push	OFFSET ??_C@_02OJDBNLEE@?5?7?$AA@
	push	eax
	call	_strtok

; 1365 :     c = strtok(NULL,"");

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	0
	call	_strtok

; 1366 :     if ( const_expr(c,&val) > 0 )

	lea	ecx, DWORD PTR _val$[ebp]
	push	ecx
	push	eax
	call	_const_expr
	add	esp, 24					; 00000018H
	test	eax, eax
	jle	$LN15@set_parame

; 1367 :     { if ( (n > 0) && (n <= web.global_count) )

	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _web+5540
	test	eax, eax
	jle	$LN14@set_parame
	cmp	eax, ecx
	jg	$LN105@set_parame

; 1368 :        { struct global *g = globals(n-1);

	dec	eax
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN62@set_parame
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN64@set_parame
	mov	edx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [edx]
	jmp	SHORT $LN63@set_parame
$LN64@set_parame:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN62@set_parame
	mov	ecx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN63@set_parame
$LN62@set_parame:
	mov	edx, DWORD PTR _web+5652
	mov	ecx, DWORD PTR _dymem
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ecx]
$LN63@set_parame:

; 1369 :          if ( g->flags & ORDINARY_PARAM )

	test	BYTE PTR [eax+192], 1
	je	$LN13@set_parame

; 1370 :          { g->value.real = val;         

	fld	QWORD PTR _val$[ebp]
	fstp	QWORD PTR [eax+64]

; 1371 :            if ( g->flags & ORDINARY_PARAM )
; 1372 :            { g->value.real = val;

	fld	QWORD PTR _val$[ebp]
	fstp	QWORD PTR [eax+64]

; 1373 :              if ( g->attr.varstuff.on_assign_call )

	mov	eax, DWORD PTR [eax+188]
	test	eax, eax
	je	$LN10@set_parame

; 1374 :              { struct global *gg = globals(g->attr.varstuff.on_assign_call);

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN68@set_parame
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN70@set_parame
	mov	edx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [edx]
	jmp	SHORT $LN69@set_parame
$LN70@set_parame:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN68@set_parame
	mov	ecx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN69@set_parame
$LN68@set_parame:
	mov	edx, DWORD PTR _web+5652
	mov	ecx, DWORD PTR _dymem
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ecx]
$LN69@set_parame:

; 1375 :                eval(&gg->value.proc,NULL,NULLID,NULL);

	push	0
	push	0
	add	eax, 64					; 00000040H
	push	0
	push	eax
	call	_eval
	fstp	ST(0)
	add	esp, 16					; 00000010H

; 1376 :              } 
; 1377 :            }
; 1378 :          }
; 1379 :          else

	jmp	SHORT $LN10@set_parame
$LN13@set_parame:

; 1380 :             outstring("Bad parameter number. \n");

	push	OFFSET ??_C@_0BI@GJJHCJNI@Bad?5parameter?5number?4?5?6?$AA@
	call	_outstring
	add	esp, 4
$LN10@set_parame:

; 1381 :          if ( logfd ) 

	mov	eax, DWORD PTR _logfd
	test	eax, eax
	je	SHORT $LN9@set_parame

; 1382 : #ifdef FLOAT128
; 1383 :             fprintf(logfd,"%d %*.*Qg\n",n,DWIDTH,DPREC,val);
; 1384 : #elif defined(LONGDOUBLE)
; 1385 :             fprintf(logfd,"%d %*.*Lg\n",n,DWIDTH,DPREC,val);
; 1386 : #else
; 1387 :             fprintf(logfd,"%d %17.15g\n",n,val);

	fld	QWORD PTR _val$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	edx
	push	OFFSET ??_C@_0M@JGEILEAN@?$CFd?5?$CF17?415g?6?$AA@
	push	eax
	call	_fprintf
	add	esp, 20					; 00000014H
$LN9@set_parame:

; 1388 : #endif
; 1389 :          pchange_flag = 1;

	mov	esi, 1

; 1390 :        }
; 1391 :        else if ( (n >= web.global_count ) && 

	jmp	$LN2@set_parame
$LN14@set_parame:

; 1392 :               (n <= web.global_count+web.perm_global_count) )

	cmp	eax, ecx
	jl	$LN7@set_parame
$LN105@set_parame:
	mov	edx, DWORD PTR _web+5548
	add	edx, ecx
	cmp	eax, edx
	jg	$LN7@set_parame

; 1393 :        { struct global *g;
; 1394 :          n -= web.global_count;

	sub	eax, ecx
	mov	DWORD PTR _n$[ebp], eax

; 1395 :          g = globals(n-1);

	dec	eax
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN74@set_parame
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN76@set_parame
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN75@set_parame
$LN76@set_parame:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN74@set_parame
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN75@set_parame
$LN74@set_parame:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN75@set_parame:

; 1396 :          if ( g->flags & ORDINARY_PARAM )

	test	BYTE PTR [eax+192], 1
	je	$LN6@set_parame

; 1397 :          { g->value.real = val;

	fld	QWORD PTR _val$[ebp]
	fstp	QWORD PTR [eax+64]

; 1398 :            if ( g->attr.varstuff.on_assign_call )

	mov	eax, DWORD PTR [eax+188]
	test	eax, eax
	je	$LN2@set_parame

; 1399 :            { struct global *gg = globals(g->attr.varstuff.on_assign_call);

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN80@set_parame
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN82@set_parame
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN81@set_parame
$LN82@set_parame:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN80@set_parame
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN81@set_parame
$LN80@set_parame:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN81@set_parame:

; 1400 :              eval(&gg->value.proc,NULL,NULLID,NULL);

	push	0
	push	0
	add	eax, 64					; 00000040H
	push	0
	push	eax
	call	_eval
	fstp	ST(0)
	add	esp, 16					; 00000010H

; 1401 :            }
; 1402 :          }
; 1403 :          else

	jmp	SHORT $LN2@set_parame
$LN6@set_parame:

; 1404 :             outstring("Bad parameter number. \n");

	push	OFFSET ??_C@_0BI@GJJHCJNI@Bad?5parameter?5number?4?5?6?$AA@

; 1405 :        }
; 1406 :        else

	jmp	SHORT $LN106@set_parame
$LN7@set_parame:

; 1407 :          outstring("Bad parameter number.");

	push	OFFSET ??_C@_0BG@LECECEIM@Bad?5parameter?5number?4?$AA@

; 1408 :     }
; 1409 :     else

	jmp	SHORT $LN106@set_parame
$LN15@set_parame:

; 1410 :       outstring("Need number AND value.\n");

	push	OFFSET ??_C@_0BI@NFNPHADI@Need?5number?5AND?5value?4?6?$AA@
$LN106@set_parame:
	call	_outstring
	add	esp, 4
$LN2@set_parame:

; 1356 :   else
; 1357 :   /* ask for new values */
; 1358 :   for(;;)
; 1359 :   { int retval;
; 1360 :     char *c;
; 1361 :     prompt("Number and new value: ",response,sizeof(response));

	push	100					; 00000064H
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BH@INPHOKGK@Number?5and?5new?5value?3?5?$AA@
	call	_prompt

; 1362 :     retval = sscanf(response,"%d",&n);

	lea	edx, DWORD PTR _n$[ebp]
	push	edx
	lea	eax, DWORD PTR _response$[ebp]
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	eax
	call	_sscanf
	add	esp, 24					; 00000018H

; 1363 :     if ( retval <= 0 ) break;    /* no more responses */

	test	eax, eax
	jg	$LL18@set_parame
	jmp	$LN91@set_parame
_set_parameters ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@DAPIBOJK@?5?5method?5instance?6?$AA@	; `string'
PUBLIC	??_C@_0BH@IKCOCCIK@?5?5?5?5?$CF?931?431s?5?5?$CF?$CD21?415g?$AA@ ; `string'
PUBLIC	??_C@_08IMINLCCL@volconst?$AA@			; `string'
PUBLIC	??_C@_07CJECEDDG@modulus?$AA@			; `string'
PUBLIC	??_C@_0BH@PKJEHBBC@?5?5?5?5?$CF31?431s?5?5?$CF?$CD21?415g?6?$AA@ ; `string'
PUBLIC	??_C@_06JJLAMBGK@target?$AA@			; `string'
PUBLIC	??_C@_0BG@KFBJPFAD@?5?5info_only?5quantity?6?$AA@ ; `string'
PUBLIC	??_C@_0BG@ENPIFMGJ@?5?5conserved?5quantity?6?$AA@ ; `string'
PUBLIC	??_C@_0BD@NDIOHFPK@?5?5energy?5quantity?6?$AA@	; `string'
PUBLIC	??_C@_0BC@PHMLDJNN@?5?5fixed?5quantity?6?$AA@	; `string'
PUBLIC	??_C@_0BI@OEHOCADO@?$CF2d?4?5?$CF?931?431s?5?5?$CF?$CD21?415g?$AA@ ; `string'
PUBLIC	??_C@_0EG@EMMBAPIC@?$CInot?5showing?5internal?5quantities@ ; `string'
PUBLIC	??_C@_0EP@PODKIBGG@?$CIshowing?5internal?5quantities?5als@ ; `string'
PUBLIC	??_C@_0BL@LLCEDDNO@Quantities?5and?5instances?3?6?$AA@ ; `string'
PUBLIC	_report_quantities
EXTRN	_verbose_flag:DWORD
EXTRN	_meth_inst_list:DWORD
EXTRN	_web_timestamp:DWORD
EXTRN	_graph_timestamp:DWORD
EXTRN	_everything_quantities_flag:DWORD
;	COMDAT ??_C@_0BD@DAPIBOJK@?5?5method?5instance?6?$AA@
CONST	SEGMENT
??_C@_0BD@DAPIBOJK@?5?5method?5instance?6?$AA@ DB '  method instance', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IKCOCCIK@?5?5?5?5?$CF?931?431s?5?5?$CF?$CD21?415g?$AA@
CONST	SEGMENT
??_C@_0BH@IKCOCCIK@?5?5?5?5?$CF?931?431s?5?5?$CF?$CD21?415g?$AA@ DB '    '
	DB	'%-31.31s  %#21.15g', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08IMINLCCL@volconst?$AA@
CONST	SEGMENT
??_C@_08IMINLCCL@volconst?$AA@ DB 'volconst', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07CJECEDDG@modulus?$AA@
CONST	SEGMENT
??_C@_07CJECEDDG@modulus?$AA@ DB 'modulus', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PKJEHBBC@?5?5?5?5?$CF31?431s?5?5?$CF?$CD21?415g?6?$AA@
CONST	SEGMENT
??_C@_0BH@PKJEHBBC@?5?5?5?5?$CF31?431s?5?5?$CF?$CD21?415g?6?$AA@ DB '    '
	DB	'%31.31s  %#21.15g', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JJLAMBGK@target?$AA@
CONST	SEGMENT
??_C@_06JJLAMBGK@target?$AA@ DB 'target', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KFBJPFAD@?5?5info_only?5quantity?6?$AA@
CONST	SEGMENT
??_C@_0BG@KFBJPFAD@?5?5info_only?5quantity?6?$AA@ DB '  info_only quantit'
	DB	'y', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@ENPIFMGJ@?5?5conserved?5quantity?6?$AA@
CONST	SEGMENT
??_C@_0BG@ENPIFMGJ@?5?5conserved?5quantity?6?$AA@ DB '  conserved quantit'
	DB	'y', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NDIOHFPK@?5?5energy?5quantity?6?$AA@
CONST	SEGMENT
??_C@_0BD@NDIOHFPK@?5?5energy?5quantity?6?$AA@ DB '  energy quantity', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PHMLDJNN@?5?5fixed?5quantity?6?$AA@
CONST	SEGMENT
??_C@_0BC@PHMLDJNN@?5?5fixed?5quantity?6?$AA@ DB '  fixed quantity', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OEHOCADO@?$CF2d?4?5?$CF?931?431s?5?5?$CF?$CD21?415g?$AA@
CONST	SEGMENT
??_C@_0BI@OEHOCADO@?$CF2d?4?5?$CF?931?431s?5?5?$CF?$CD21?415g?$AA@ DB '%2'
	DB	'd. %-31.31s  %#21.15g', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@EMMBAPIC@?$CInot?5showing?5internal?5quantities@
CONST	SEGMENT
??_C@_0EG@EMMBAPIC@?$CInot?5showing?5internal?5quantities@ DB '(not showi'
	DB	'ng internal quantities; to show, do "show_all_quantities")', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@PODKIBGG@?$CIshowing?5internal?5quantities?5als@
CONST	SEGMENT
??_C@_0EP@PODKIBGG@?$CIshowing?5internal?5quantities?5als@ DB '(showing i'
	DB	'nternal quantities also; to suppress, do "show_all_quantities'
	DB	' off")', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LLCEDDNO@Quantities?5and?5instances?3?6?$AA@
CONST	SEGMENT
??_C@_0BL@LLCEDDNO@Quantities?5and?5instances?3?6?$AA@ DB 'Quantities and'
	DB	' instances:', 0aH, 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _report_quantities
_TEXT	SEGMENT
tv345 = -8						; size = 4
_k$ = -4						; size = 4
_report_quantities PROC					; COMDAT

; 1426 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1427 :   struct gen_quant *q;
; 1428 :   int k,j;
; 1429 : 
; 1430 :   outstring("Quantities and instances:\n");

	push	OFFSET ??_C@_0BL@LLCEDDNO@Quantities?5and?5instances?3?6?$AA@
	call	_outstring
	add	esp, 4

; 1431 :   if ( everything_quantities_flag )

	cmp	DWORD PTR _everything_quantities_flag, 0
	je	SHORT $LN21@report_qua

; 1432 :   { if ( show_all_quantities )

	cmp	DWORD PTR _show_all_quantities, 0
	je	SHORT $LN22@report_qua

; 1433 :     outstring(
; 1434 :   "(showing internal quantities also; to suppress, do \"show_all_quantities off\")\n");

	push	OFFSET ??_C@_0EP@PODKIBGG@?$CIshowing?5internal?5quantities?5als@

; 1435 :     else outstring(

	jmp	SHORT $LN39@report_qua
$LN22@report_qua:

; 1436 :    "(not showing internal quantities; to show, do \"show_all_quantities\")\n");

	push	OFFSET ??_C@_0EG@EMMBAPIC@?$CInot?5showing?5internal?5quantities@
$LN39@report_qua:
	call	_outstring
	add	esp, 4
$LN21@report_qua:

; 1437 :   }
; 1438 :   for ( k=0 ; k < gen_quant_count ; k++ )

	push	esi
	xor	esi, esi
	mov	DWORD PTR _k$[ebp], esi
	cmp	DWORD PTR _web+5528, esi
	jle	$LN18@report_qua
	push	ebx
	push	edi
	xor	edi, edi
	mov	DWORD PTR tv345[ebp], edi
$LL37@report_qua:

; 1439 :   { q = GEN_QUANT(k);

	add	edi, DWORD PTR _gen_quant_list

; 1440 :      if ( (q->flags & DEFAULT_QUANTITY) && !show_all_quantities ) continue;

	mov	eax, DWORD PTR [edi+136]
	test	eax, 8192				; 00002000H
	je	SHORT $LN38@report_qua
	cmp	DWORD PTR _show_all_quantities, 0
	je	$LN19@report_qua
$LN38@report_qua:

; 1441 :      if ( q->flags & Q_DELETED ) continue;

	test	eax, 524288				; 00080000H
	jne	$LN19@report_qua

; 1442 :      if ( !(q->flags & (Q_INFO|Q_ENERGY|Q_FIXED)) ) continue;

	test	al, 7
	je	$LN19@report_qua

; 1443 :      if ( (q->timestamp < graph_timestamp) || (q->timestamp<web_timestamp) )

	mov	eax, DWORD PTR [edi+364]
	cmp	eax, DWORD PTR _graph_timestamp
	jl	SHORT $LN13@report_qua
	cmp	eax, DWORD PTR _web_timestamp
	jge	SHORT $LN14@report_qua
$LN13@report_qua:

; 1444 :          calc_content(Q_INFO|Q_ENERGY|Q_FIXED);

	push	7
	call	_calc_content
	fstp	ST(0)
	add	esp, 4
$LN14@report_qua:

; 1445 : 
; 1446 :      /* name and value */
; 1447 : #ifdef FLOAT128
; 1448 :       sprintf(msg,"%2d. %-31.31s  %#*.*Qg",k+1,q->name,DWIDTH,DPREC,q->value);
; 1449 : #elif defined(LONGDOUBLE)
; 1450 :       sprintf(msg,"%2d. %-31.31s  %#*.*Lg",k+1,q->name,DWIDTH,DPREC,q->value);
; 1451 : #else
; 1452 :       sprintf(msg,"%2d. %-31.31s  %#21.15g",k+1,q->name,q->value);

	fld	QWORD PTR [edi+152]
	mov	edx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	edi
	lea	ecx, DWORD PTR [esi+1]
	push	ecx
	push	OFFSET ??_C@_0BI@OEHOCADO@?$CF2d?4?5?$CF?931?431s?5?5?$CF?$CD21?415g?$AA@
	push	edx
	call	_sprintf

; 1453 : #endif
; 1454 :       if ( q->flags & Q_FIXED ) strcat(msg,"  fixed quantity\n");

	mov	eax, DWORD PTR [edi+136]
	add	esp, 24					; 00000018H
	test	al, 2
	je	SHORT $LN12@report_qua
	mov	eax, DWORD PTR _msg
	dec	eax
	npad	4
$LL30@report_qua:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL30@report_qua
	mov	ecx, DWORD PTR ??_C@_0BC@PHMLDJNN@?5?5fixed?5quantity?6?$AA@
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ??_C@_0BC@PHMLDJNN@?5?5fixed?5quantity?6?$AA@+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR ??_C@_0BC@PHMLDJNN@?5?5fixed?5quantity?6?$AA@+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR ??_C@_0BC@PHMLDJNN@?5?5fixed?5quantity?6?$AA@+12
	mov	DWORD PTR [eax+12], edx
	mov	cx, WORD PTR ??_C@_0BC@PHMLDJNN@?5?5fixed?5quantity?6?$AA@+16
	mov	WORD PTR [eax+16], cx
	jmp	$LN7@report_qua
$LN12@report_qua:

; 1455 :       else if ( q->flags & Q_ENERGY ) strcat(msg,"  energy quantity\n");

	test	al, 1
	je	SHORT $LN10@report_qua
	mov	eax, DWORD PTR _msg
	dec	eax
$LL31@report_qua:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL31@report_qua
	mov	edx, DWORD PTR ??_C@_0BD@NDIOHFPK@?5?5energy?5quantity?6?$AA@
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR ??_C@_0BD@NDIOHFPK@?5?5energy?5quantity?6?$AA@+4
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR ??_C@_0BD@NDIOHFPK@?5?5energy?5quantity?6?$AA@+8
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR ??_C@_0BD@NDIOHFPK@?5?5energy?5quantity?6?$AA@+12
	mov	DWORD PTR [eax+12], ecx
	mov	dx, WORD PTR ??_C@_0BD@NDIOHFPK@?5?5energy?5quantity?6?$AA@+16
	mov	WORD PTR [eax+16], dx
	mov	cl, BYTE PTR ??_C@_0BD@NDIOHFPK@?5?5energy?5quantity?6?$AA@+18
	mov	BYTE PTR [eax+18], cl
	jmp	$LN7@report_qua
$LN10@report_qua:

; 1456 :       else if ( q->flags & Q_CONSERVED ) strcat(msg,"  conserved quantity\n");

	test	al, 8
	mov	eax, DWORD PTR _msg
	je	SHORT $LN8@report_qua
	dec	eax
$LL32@report_qua:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL32@report_qua
	mov	edx, DWORD PTR ??_C@_0BG@ENPIFMGJ@?5?5conserved?5quantity?6?$AA@
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR ??_C@_0BG@ENPIFMGJ@?5?5conserved?5quantity?6?$AA@+4
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR ??_C@_0BG@ENPIFMGJ@?5?5conserved?5quantity?6?$AA@+8
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR ??_C@_0BG@ENPIFMGJ@?5?5conserved?5quantity?6?$AA@+12
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR ??_C@_0BG@ENPIFMGJ@?5?5conserved?5quantity?6?$AA@+16
	mov	DWORD PTR [eax+16], edx
	mov	cx, WORD PTR ??_C@_0BG@ENPIFMGJ@?5?5conserved?5quantity?6?$AA@+20
	jmp	SHORT $LN40@report_qua
$LN8@report_qua:

; 1457 :       else  strcat(msg,"  info_only quantity\n");

	dec	eax
$LL33@report_qua:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL33@report_qua
	mov	edx, DWORD PTR ??_C@_0BG@KFBJPFAD@?5?5info_only?5quantity?6?$AA@
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR ??_C@_0BG@KFBJPFAD@?5?5info_only?5quantity?6?$AA@+4
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR ??_C@_0BG@KFBJPFAD@?5?5info_only?5quantity?6?$AA@+8
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR ??_C@_0BG@KFBJPFAD@?5?5info_only?5quantity?6?$AA@+12
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR ??_C@_0BG@KFBJPFAD@?5?5info_only?5quantity?6?$AA@+16
	mov	DWORD PTR [eax+16], edx
	mov	cx, WORD PTR ??_C@_0BG@KFBJPFAD@?5?5info_only?5quantity?6?$AA@+20
$LN40@report_qua:
	mov	WORD PTR [eax+20], cx
$LN7@report_qua:

; 1458 :       outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 4

; 1459 : 
; 1460 :       if ( q->flags & Q_FIXED )

	test	BYTE PTR [edi+136], 2
	je	SHORT $LN36@report_qua

; 1461 :       {
; 1462 : #ifdef FLOAT128
; 1463 :         sprintf(msg,"    %31.31s  %#*.*Qg\n","target",DWIDTH,DPREC,
; 1464 :           q->target);
; 1465 : #elif defined(LONGDOUBLE)
; 1466 :         sprintf(msg,"    %31.31s  %#*.*Lg\n","target",DWIDTH,DPREC,
; 1467 :           q->target);
; 1468 : #else
; 1469 :         sprintf(msg,"    %31.31s  %#21.15g\n","target",q->target);

	fld	QWORD PTR [edi+144]
	mov	eax, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_06JJLAMBGK@target?$AA@
	push	OFFSET ??_C@_0BH@PKJEHBBC@?5?5?5?5?$CF31?431s?5?5?$CF?$CD21?415g?6?$AA@
	push	eax
	call	_sprintf

; 1470 : #endif
; 1471 :         outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 24					; 00000018H
$LN36@report_qua:

; 1472 :       }
; 1473 : 
; 1474 :      /* modulus */
; 1475 : #ifdef FLOAT128
; 1476 :       sprintf(msg,"    %31.31s  %#*.*Qg\n","modulus",DWIDTH,
; 1477 :          DPREC, q->modulus); 
; 1478 : #elif defined(LONGDOUBLE)
; 1479 :       sprintf(msg,"    %31.31s  %#*.*Lg\n","modulus",DWIDTH,
; 1480 :          DPREC, q->modulus); 
; 1481 : #else
; 1482 :       sprintf(msg,"    %31.31s  %#21.15g\n","modulus",q->modulus); 

	fld	QWORD PTR [edi+176]
	mov	edx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_07CJECEDDG@modulus?$AA@
	push	OFFSET ??_C@_0BH@PKJEHBBC@?5?5?5?5?$CF31?431s?5?5?$CF?$CD21?415g?6?$AA@
	push	edx
	call	_sprintf

; 1483 : #endif
; 1484 :       outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring

; 1485 : 
; 1486 :      /* volconst */
; 1487 :      if ( q->volconst != 0.0 )

	fld	QWORD PTR [edi+208]
	fldz
	add	esp, 24					; 00000018H
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN5@report_qua

; 1488 :      {
; 1489 : #ifdef FLOAT128
; 1490 :         sprintf(msg,"    %31.31s  %#*.*Qg\n","volconst",DWIDTH,
; 1491 :          DPREC, q->modulus); 
; 1492 : #elif defined(LONGDOUBLE)
; 1493 :         sprintf(msg,"    %31.31s  %#*.*Lg\n","volconst",DWIDTH,
; 1494 :          DPREC, q->modulus); 
; 1495 : #else
; 1496 :         sprintf(msg,"    %31.31s  %#21.15g\n","volconst",q->volconst); 

	fld	QWORD PTR [edi+208]
	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_08IMINLCCL@volconst?$AA@
	push	OFFSET ??_C@_0BH@PKJEHBBC@?5?5?5?5?$CF31?431s?5?5?$CF?$CD21?415g?6?$AA@
	push	ecx
	call	_sprintf

; 1497 : #endif
; 1498 :         outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 24					; 00000018H
$LN5@report_qua:

; 1499 :       }
; 1500 : 
; 1501 :      /* instances */
; 1502 :      for ( j = 0 ; j < q->method_count ; j++ )

	xor	ebx, ebx
	cmp	DWORD PTR [edi+240], ebx
	jle	$LN19@report_qua
	npad	8
$LL4@report_qua:

; 1503 :      { struct method_instance *mi = METH_INSTANCE(q->meth_inst[j]);

	mov	eax, DWORD PTR [edi+244]
	mov	eax, DWORD PTR [eax+ebx*4]
	cdq
	mov	esi, eax
	xor	esi, edx
	sub	esi, edx
	imul	esi, 2928				; 00000b70H
	add	esi, DWORD PTR _meth_inst_list

; 1504 :        if ( !verbose_flag && (mi->flags & (IMPLICIT_INSTANCE|Q_DELETED)) )

	cmp	DWORD PTR _verbose_flag, 0
	jne	SHORT $LN1@report_qua
	test	DWORD PTR [esi+140], 2621440		; 00280000H
	jne	$LN3@report_qua
$LN1@report_qua:

; 1505 :           continue;  /* don't clutter up things */
; 1506 : 
; 1507 :        /* name and value */
; 1508 : #ifdef FLOAT128
; 1509 :       sprintf(msg,"    %-31.31s  %#*.*Qg",mi->name,DWIDTH,DPREC,mi->value);
; 1510 : #elif defined(LONGDOUBLE)
; 1511 :       sprintf(msg,"    %-31.31s  %#*.*Lg",mi->name,DWIDTH,DPREC,mi->value);
; 1512 :  #else
; 1513 :       sprintf(msg,"    %-31.31s  %#21.15g",mi->name,mi->value);

	fld	QWORD PTR [esi+312]
	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	esi
	push	OFFSET ??_C@_0BH@IKCOCCIK@?5?5?5?5?$CF?931?431s?5?5?$CF?$CD21?415g?$AA@
	push	ecx
	call	_sprintf

; 1514 : #endif
; 1515 :       strcat(msg,"  method instance\n");

	mov	eax, DWORD PTR _msg
	add	esp, 20					; 00000014H
	dec	eax
	npad	4
$LL34@report_qua:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL34@report_qua
	mov	edx, DWORD PTR ??_C@_0BD@DAPIBOJK@?5?5method?5instance?6?$AA@
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR ??_C@_0BD@DAPIBOJK@?5?5method?5instance?6?$AA@+4
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR ??_C@_0BD@DAPIBOJK@?5?5method?5instance?6?$AA@+8
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR ??_C@_0BD@DAPIBOJK@?5?5method?5instance?6?$AA@+12
	mov	DWORD PTR [eax+12], ecx
	mov	dx, WORD PTR ??_C@_0BD@DAPIBOJK@?5?5method?5instance?6?$AA@+16
	mov	WORD PTR [eax+16], dx
	mov	cl, BYTE PTR ??_C@_0BD@DAPIBOJK@?5?5method?5instance?6?$AA@+18
	mov	BYTE PTR [eax+18], cl

; 1516 :       outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 1517 : 
; 1518 :       /* modulus */
; 1519 : #ifdef FLOAT128
; 1520 :       sprintf(msg,"    %31.31s  %#*.*Qg\n","modulus",
; 1521 :              DWIDTH, DPREC, mi->modulus);
; 1522 : #elif defined(LONGDOUBLE)
; 1523 :       sprintf(msg,"    %31.31s  %#*.*Lg\n","modulus",
; 1524 :              DWIDTH, DPREC, mi->modulus);
; 1525 : #else
; 1526 :       sprintf(msg,"    %31.31s  %#21.15g\n","modulus",mi->modulus);

	fld	QWORD PTR [esi+304]
	mov	eax, DWORD PTR _msg
	push	ecx
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_07CJECEDDG@modulus?$AA@
	push	OFFSET ??_C@_0BH@PKJEHBBC@?5?5?5?5?$CF31?431s?5?5?$CF?$CD21?415g?6?$AA@
	push	eax
	call	_sprintf

; 1527 : #endif
; 1528 :       outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 24					; 00000018H
$LN3@report_qua:

; 1499 :       }
; 1500 : 
; 1501 :      /* instances */
; 1502 :      for ( j = 0 ; j < q->method_count ; j++ )

	inc	ebx
	cmp	ebx, DWORD PTR [edi+240]
	jl	$LL4@report_qua
	mov	esi, DWORD PTR _k$[ebp]
$LN19@report_qua:

; 1437 :   }
; 1438 :   for ( k=0 ; k < gen_quant_count ; k++ )

	mov	edi, DWORD PTR tv345[ebp]
	inc	esi
	add	edi, 368				; 00000170H
	mov	DWORD PTR _k$[ebp], esi
	mov	DWORD PTR tv345[ebp], edi
	cmp	esi, DWORD PTR _web+5528
	jl	$LL37@report_qua
	pop	edi
	pop	ebx
$LN18@report_qua:
	pop	esi

; 1529 : #ifdef PROFILING_ENABLED
; 1530 :       /* timings */
; 1531 :       if ( verbose_flag )
; 1532 :       { sprintf(msg,"    %31.31s  %#21.15f  %10d calls\n",
; 1533 :         "value elapsed time, sec",mi->value_elapsed_time,mi->value_call_count);
; 1534 :         outstring(msg);
; 1535 :         sprintf(msg,"    %31.31s  %#21.15f  %10d calls\n",
; 1536 :         "gradient elapsed time, sec",mi->grad_elapsed_time,mi->grad_call_count);
; 1537 :         outstring(msg);
; 1538 :         sprintf(msg,"    %31.31s  %#21.15f  %10d calls\n",
; 1539 :         "hessian elapsed time, sec",mi->hess_elapsed_time,mi->hess_call_count);
; 1540 :         outstring(msg);
; 1541 :       }
; 1542 : #endif
; 1543 :     }
; 1544 :   }
; 1545 : 
; 1546 : } // end report_quantities()

	mov	esp, ebp
	pop	ebp
	ret	0
_report_quantities ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@ODAPLCAE@Profiling?5not?5enabled?5on?5this?5sy@ ; `string'
PUBLIC	_report_times
;	COMDAT ??_C@_0CH@ODAPLCAE@Profiling?5not?5enabled?5on?5this?5sy@
CONST	SEGMENT
??_C@_0CH@ODAPLCAE@Profiling?5not?5enabled?5on?5this?5sy@ DB 'Profiling n'
	DB	'ot enabled on this system.', 0aH, 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _report_times
_TEXT	SEGMENT
_report_times PROC					; COMDAT

; 1557 : #ifdef PROFILING_ENABLED
; 1558 :     sprintf(msg,"Method instance element setup time:   %15.10f\n",
; 1559 : 		     PROF_ELAPSED(element_setup));
; 1560 :     outstring(msg);
; 1561 : 
; 1562 :     sprintf(msg,"Overall calc_quants time:             %15.10f\n",
; 1563 : 		     PROF_ELAPSED(calc_quants));
; 1564 :     outstring(msg);
; 1565 : 
; 1566 :     sprintf(msg,"Overall calc_quant_grads time:        %15.10f\n",
; 1567 : 		     PROF_ELAPSED(calc_quant_grads));
; 1568 :     outstring(msg);
; 1569 : 
; 1570 :     sprintf(msg,"Overall calc_quant_hess time:         %15.10f\n",
; 1571 : 		     PROF_ELAPSED(calc_quant_hess));
; 1572 :     outstring(msg);
; 1573 : 
; 1574 :     sprintf(msg,"Hessian solution time:                %15.10f\n",
; 1575 : 		     PROF_ELAPSED(hessian_AIJ_setup)
; 1576 : 		   + PROF_ELAPSED(hessian_constraint_setup)
; 1577 : 		   + PROF_ELAPSED(hessian_project_setup)
; 1578 : 		   + PROF_ELAPSED(hessian_factor)
; 1579 : 		   + PROF_ELAPSED(hessian_CHinvC)
; 1580 : 		   + PROF_ELAPSED(hessian_solve)
; 1581 : 		   + PROF_ELAPSED(hessian_mul)
; 1582 :                      );
; 1583 :     outstring(msg);
; 1584 : 
; 1585 :     if ( verbose_flag )
; 1586 :     {
; 1587 :       sprintf(msg,"    Hessian AIJ setup time:               %15.10f\n",
; 1588 : 		     PROF_ELAPSED(hessian_AIJ_setup));
; 1589 :       outstring(msg);
; 1590 :       sprintf(msg,"    Hessian constraint setup time:        %15.10f\n",
; 1591 : 		     PROF_ELAPSED(hessian_constraint_setup));
; 1592 :       outstring(msg);
; 1593 :       sprintf(msg,"    Hessian project setup time:           %15.10f\n",
; 1594 : 		     PROF_ELAPSED(hessian_project_setup));
; 1595 :       outstring(msg);
; 1596 :       sprintf(msg,"    Hessian factor time:                  %15.10f\n",
; 1597 : 		     PROF_ELAPSED(hessian_factor));
; 1598 :       outstring(msg);
; 1599 :       sprintf(msg,"    Hessian CHinvC time:                  %15.10f\n",
; 1600 : 		     PROF_ELAPSED(hessian_CHinvC));
; 1601 :       outstring(msg);
; 1602 :       sprintf(msg,"    Hessian solve time:                   %15.10f\n",
; 1603 : 		     PROF_ELAPSED(hessian_solve));
; 1604 :       outstring(msg);
; 1605 :       sprintf(msg,"    Hessian multiplication time:          %15.10f\n",
; 1606 : 		     PROF_ELAPSED(hessian_mul));
; 1607 :       outstring(msg);
; 1608 :     }
; 1609 : 
; 1610 : 
; 1611 :     sprintf(msg,"exparse time:                         %15.10f\n",
; 1612 : 		     PROF_ELAPSED(exparse));
; 1613 :     outstring(msg);
; 1614 : 
; 1615 :     sprintf(msg,"yyparse time:                         %15.10f\n",
; 1616 : 		     PROF_ELAPSED(yyparse));
; 1617 :     outstring(msg);
; 1618 : 
; 1619 :     sprintf(msg,"yylex+kblex total time:               %15.10f\n",
; 1620 : 		     PROF_ELAPSED(yylex));
; 1621 :     outstring(msg);
; 1622 : 
; 1623 :     sprintf(msg,"kblex time:                           %15.10f\n",
; 1624 : 		     PROF_ELAPSED(kblex));
; 1625 :     outstring(msg);
; 1626 : 
; 1627 :     sprintf(msg,"Using processor speed of %g Hz\n",cpu_speed);
; 1628 :     outstring(msg);
; 1629 :    
; 1630 : #else
; 1631 :   outstring("Profiling not enabled on this system.\n");

	push	OFFSET ??_C@_0CH@ODAPLCAE@Profiling?5not?5enabled?5on?5this?5sy@
	call	_outstring
	pop	ecx

; 1632 : #endif
; 1633 : 
; 1634 : }  // end report_times()

	ret	0
_report_times ENDP
_TEXT	ENDS
PUBLIC	_recalc
EXTRN	_begin_normal_motion:PROC
EXTRN	_change_flag:DWORD
EXTRN	_calc_energy:PROC
EXTRN	_calc_pressure:PROC
EXTRN	_set_f_phase_density:PROC
EXTRN	_set_e_phase_density:PROC
EXTRN	_phase_flag:DWORD
EXTRN	_update_display:PROC
EXTRN	_resize:PROC
EXTRN	_overall_size:QWORD
EXTRN	_transform_gen_expr:PROC
EXTRN	_calc_view_transform_gens:PROC
EXTRN	_transform_expr:BYTE
EXTRN	_calc_periods:PROC
EXTRN	_reset_rot_order:PROC
EXTRN	_fe_reorder:PROC
EXTRN	_need_fe_reorder_flag:DWORD
; Function compile flags: /Ogtp
;	COMDAT _recalc
_TEXT	SEGMENT
_recalc	PROC						; COMDAT

; 25   :   global_timestamp++;  /* so INFO quantities will recalc later */

	inc	DWORD PTR _global_timestamp

; 26   :   if ( need_fe_reorder_flag )

	cmp	DWORD PTR _need_fe_reorder_flag, 0
	push	esi
	push	edi
	je	SHORT $LN36@recalc

; 27   :   { /* straighten out facet order around edges */
; 28   :     if ( web.representation == SOAPFILM )

	cmp	DWORD PTR _web+624, 2
	jne	SHORT $LN35@recalc

; 29   :     { edge_id e_id;
; 30   :        FOR_ALL_EDGES(e_id)

	mov	ecx, DWORD PTR _web+160
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN35@recalc
	mov	edi, DWORD PTR _web+124
	npad	2
$LL24@recalc:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+edi]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN23@recalc

; 31   :           fe_reorder(e_id);

	push	ecx
	call	_fe_reorder
	mov	edi, DWORD PTR _web+124
	add	esp, 4
$LN23@recalc:

; 29   :     { edge_id e_id;
; 30   :        FOR_ALL_EDGES(e_id)

	mov	eax, DWORD PTR [esi+edi]
	mov	ecx, DWORD PTR [eax]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LL24@recalc
$LN35@recalc:

; 32   :     }
; 33   :     need_fe_reorder_flag = 0;

	mov	DWORD PTR _need_fe_reorder_flag, 0
$LN36@recalc:

; 34   :   }
; 35   :   reset_rot_order();

	call	_reset_rot_order

; 36   :   if ( web.torus_flag ) calc_periods(ADJUST_VOLUMES);

	cmp	DWORD PTR _web+860, 0
	je	SHORT $LN19@recalc
	push	1
	jmp	SHORT $LN39@recalc
$LN19@recalc:

; 37   :   else if ( web.torus_period ) calc_periods(NO_ADJUST_VOLUMES);

	cmp	DWORD PTR _web+1608, 0
	je	SHORT $LN37@recalc
	push	0
$LN39@recalc:
	call	_calc_periods
	add	esp, 4
$LN37@recalc:

; 38   :   if ( transform_expr[0] ) 

	cmp	BYTE PTR _transform_expr, 0
	je	SHORT $LN16@recalc

; 39   :   { calc_view_transform_gens();

	call	_calc_view_transform_gens

; 40   :     transform_gen_expr(transform_expr);

	push	OFFSET _transform_expr
	call	_transform_gen_expr
	add	esp, 4
$LN16@recalc:

; 41   :   }
; 42   :   recalc_verts();

	call	_recalc_verts

; 43   :   if ( overall_size <= 0 ) resize();

	fldz
	fcomp	QWORD PTR _overall_size
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN15@recalc
	call	_resize
$LN15@recalc:

; 44   :   update_display();

	call	_update_display

; 45   : 
; 46   :   if ( phase_flag )

	cmp	DWORD PTR _phase_flag, 0
	je	$LN4@recalc

; 47   :   {
; 48   :     if ( web.representation == STRING )

	cmp	DWORD PTR _web+624, 1
	jne	SHORT $LN13@recalc

; 49   :     { edge_id e_id;
; 50   :       FOR_ALL_EDGES(e_id)

	mov	ecx, DWORD PTR _web+160
	test	ecx, 268435456				; 10000000H
	je	$LN4@recalc
	mov	edi, DWORD PTR _web+124
	npad	3
$LL12@recalc:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+edi]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN11@recalc

; 51   :         set_e_phase_density(e_id);

	push	ecx
	call	_set_e_phase_density
	mov	edi, DWORD PTR _web+124
	add	esp, 4
$LN11@recalc:

; 49   :     { edge_id e_id;
; 50   :       FOR_ALL_EDGES(e_id)

	mov	ecx, DWORD PTR [esi+edi]
	mov	ecx, DWORD PTR [ecx]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LL12@recalc

; 52   :     }
; 53   :     else

	jmp	SHORT $LN4@recalc
$LN13@recalc:

; 54   :     { facet_id f_id;
; 55   :       FOR_ALL_FACETS(f_id)

	mov	ecx, DWORD PTR _web+272
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN4@recalc
	mov	edi, DWORD PTR _web+236
	npad	3
$LL6@recalc:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+edi]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN5@recalc

; 56   :         set_f_phase_density(f_id);

	push	ecx
	call	_set_f_phase_density
	mov	edi, DWORD PTR _web+236
	add	esp, 4
$LN5@recalc:

; 54   :     { facet_id f_id;
; 55   :       FOR_ALL_FACETS(f_id)

	mov	edx, DWORD PTR [esi+edi]
	mov	ecx, DWORD PTR [edx]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LL6@recalc
$LN4@recalc:

; 57   :     }
; 58   :   }
; 59   : 
; 60   :   #ifdef MPI_EVOLVER
; 61   :   if ( this_task == 0 )
; 62   :   #endif
; 63   :   {
; 64   :     calc_content(Q_FIXED);

	push	2
	call	_calc_content
	fstp	ST(0)
	add	esp, 4

; 65   :     /* if ( web.torus_flag ) fix_volconst(); */
; 66   :     calc_pressure();

	call	_calc_pressure

; 67   :     calc_energy();

	call	_calc_energy

; 68   :     change_flag = 0;

	mov	DWORD PTR _change_flag, 0

; 69   :   }
; 70   :   reset_conj_grad();

	call	_reset_conj_grad

; 71   :   if ( normal_motion_flag ) begin_normal_motion();

	cmp	DWORD PTR _normal_motion_flag, 0
	pop	edi
	pop	esi
	je	SHORT $LN1@recalc
	jmp	_begin_normal_motion
$LN1@recalc:

; 72   : } /* end recalc() */

	ret	0
_recalc	ENDP
_TEXT	ENDS
PUBLIC	_old_menu
EXTRN	_command:PROC
EXTRN	_old_history:PROC
; Function compile flags: /Ogtp
;	COMDAT _old_menu
_TEXT	SEGMENT
_text$ = 8						; size = 4
_old_menu PROC						; COMDAT

; 121  : { int retval = 0;

	push	ebp
	mov	ebp, esp

; 122  :   if ( text[0] == '!' ) 

	mov	eax, DWORD PTR _text$[ebp]
	cmp	BYTE PTR [eax], 33			; 00000021H
	push	esi
	jne	SHORT $LN3@old_menu

; 123  :    retval = old_history(text); /* history list */

	push	eax
	call	_old_history
	add	esp, 4

; 124  :   else 

	jmp	SHORT $LN7@old_menu
$LN3@old_menu:

; 125  :    retval = command(text,ADD_TO_HISTORY);

	push	1
	push	eax
	call	_command
	add	esp, 8
$LN7@old_menu:

; 126  : 
; 127  :   if ( change_flag )

	cmp	DWORD PTR _change_flag, 0
	mov	esi, eax
	je	SHORT $LN6@old_menu

; 128  :        recalc();

	call	_recalc
$LN6@old_menu:

; 129  : 
; 130  :   return retval;

	mov	eax, esi
	pop	esi

; 131  : 
; 132  : } // end old_menu ()

	pop	ebp
	ret	0
_old_menu ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@NACAJMAD@Illegal?5command?3?5?$CFc?4?5Type?5h?5for?5@ ; `string'
PUBLIC	??_C@_0CD@KKJEPFCH@R?5?$CIrestore?$CJ?5command?5discontinued@ ; `string'
PUBLIC	??_C@_0DL@OLGFFLJB@Binary?5save?5not?5currently?5functi@ ; `string'
PUBLIC	??_C@_01NOFIACDB@w?$AA@				; `string'
PUBLIC	??_C@_0BD@KCHKOGMF@Name?5of?5log?5file?3?5?$AA@	; `string'
PUBLIC	??_C@_0BG@EIHDJGKL@Command?5logging?5OFF?4?6?$AA@ ; `string'
PUBLIC	??_C@_0BH@MKMHLGMK@Automatic?5display?5OFF?4?$AA@ ; `string'
PUBLIC	??_C@_0BG@CJFPNCJ@Automatic?5display?5ON?4?$AA@	; `string'
PUBLIC	??_C@_0BM@NKGFGCMB@Enter?5cut?9off?5radius?5?$CI?$CFf?$CJ?3?5?$AA@ ; `string'
PUBLIC	??_C@_0BI@GDCBHHFG@Zoom?5vertex?5not?5found?4?6?$AA@ ; `string'
PUBLIC	??_C@_0CA@GBPOGFGD@Enter?5zoom?5vertex?5number?5?$CI?$CFd?$CJ?3?5?$AA@ ; `string'
PUBLIC	??_C@_0BJ@MMPMCFA@Improper?5period?5number?4?6?$AA@ ; `string'
PUBLIC	??_C@_0CA@LHGCPILC@Duplicate?5which?5period?$CI1?02?03?$CJ?$DP?5?$AA@ ; `string'
PUBLIC	??_C@_0BO@JNAGCCKO@Duplicate?5which?5period?$CI1?02?$CJ?$DP?5?$AA@ ; `string'
PUBLIC	??_C@_0BM@IOIDOPMA@Torus?5model?5not?5in?5effect?4?6?$AA@ ; `string'
PUBLIC	??_C@_0DP@FBLDAENN@Torus?5duplication?5not?5implemente@ ; `string'
PUBLIC	??_C@_0BN@ENNEDDMF@Skinny?5triangles?5weeded?3?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_0CO@FEGDDAKC@Enter?5minimum?5area?5desired?$CIh?5for@ ; `string'
PUBLIC	??_C@_0DO@IFFIBCCN@Triangle?5weeding?5not?5implemented@ ; `string'
PUBLIC	??_C@_0BI@DCKMBCPP@Vertex?5averaging?5done?4?6?$AA@ ; `string'
PUBLIC	??_C@_0CG@NHDDACLM@Edges?5switched?5in?5equiangulation@ ; `string'
PUBLIC	??_C@_0EH@OAJIILDD@Fixed?5scale?5is?5ON?$CB?5?5Probably?5not@ ; `string'
PUBLIC	??_C@_0BL@JMDAFIPN@Conjugate?5gradient?5now?5ON?4?$AA@ ; `string'
PUBLIC	??_C@_0BM@ELOHAFKC@Conjugate?5gradient?5now?5OFF?4?$AA@ ; `string'
PUBLIC	??_C@_0BD@LHJNONFJ@Deleted?5edges?3?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_0DF@MEMPCBIC@Enter?5minimum?5edge?5length?5desire@ ; `string'
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fd0000000000000
PUBLIC	??_C@_0DM@GEICAECG@Vertex?5popping?5not?5implemented?5f@ ; `string'
PUBLIC	??_C@_0BC@BGIMLONO@Edges?5popped?3?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_0BF@CLGHNEFK@Vertices?5popped?3?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_0DK@CIEKAHBB@Edge?5popping?5not?5implemented?5for@ ; `string'
PUBLIC	??_C@_0BN@KADAPAAJ@Number?5of?5edges?5notched?3?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_0DC@JKPEEAKK@refine?5edge?5ee?5where?5max?$CIee?4vert@ ; `string'
PUBLIC	??_C@_0BL@KKKCODIA@histogram?$CIvertex?0dihedral?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0EA@JDOPAEKK@Enter?5maximum?5angle?$CIradians?$CJ?5bet@ ; `string'
PUBLIC	??_C@_0BK@IGMMJBCJ@Target?5volumes?5adjusted?4?6?$AA@ ; `string'
PUBLIC	??_C@_0DF@MKDLKPPM@Enter?5maximum?5edge?5length?5desire@ ; `string'
PUBLIC	??_C@_0BD@LKFIBJDB@Edges?5refined?3?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_0DF@KOJFNHHK@Enter?5minimum?5acute?5angle?5desire@ ; `string'
PUBLIC	??_C@_03PPOCCAPH@?$CFf?6?$AA@			; `string'
PUBLIC	??_C@_0BJ@NLHBFEJL@Enter?5target?5size?5?$CI?$CFg?$CJ?3?5?$AA@ ; `string'
PUBLIC	??_C@_0BN@BBKJHOFD@Homothety?5adjustment?5is?5?$CFs?4?6?$AA@ ; `string'
PUBLIC	??_C@_03MPPIHBHJ@OFF?$AA@			; `string'
PUBLIC	??_C@_02BFICIOJL@ON?$AA@			; `string'
PUBLIC	__real@3e45798ee2308c3a
PUBLIC	??_C@_0CH@MHPIELFJ@Enter?5pressure?5?$CI0?5for?5rigid?5volu@ ; `string'
PUBLIC	??_C@_0BB@CFPANFKA@Pressure?5now?5?$CFf?6?$AA@	; `string'
PUBLIC	??_C@_0CD@HAKNIIEA@Can?8t?5do?5pressure?5without?5bodies@ ; `string'
PUBLIC	??_C@_0CL@GGIKDPMC@Scale?5optimizing?4?5Enter?5scale?5li@ ; `string'
PUBLIC	??_C@_0BK@MIKDNHAM@Enter?5scale?5factor?5?$CI?$CFg?$CJ?3?5?$AA@ ; `string'
PUBLIC	??_C@_0EB@MJGDANPD@Higher?9order?5models?5not?5implemen@ ; `string'
PUBLIC	??_C@_0CB@MDMJECBF@Gap?5constant?5is?5?$CFf?4?5?5Enter?5new?3?5@ ; `string'
PUBLIC	??_C@_0CC@BPFKOIKH@Jiggling?5on?5every?5move?5disabled?4@ ; `string'
PUBLIC	??_C@_0CO@KEJHIJDI@Enter?5temperature?5for?5jiggling?5?$CI@ ; `string'
PUBLIC	??_C@_0BN@BGPFIODI@Now?5jiggling?5on?5every?5move?4?6?$AA@ ; `string'
PUBLIC	??_C@_0CB@HCNCBBOM@Enter?5new?5constant?5?$CI0?5for?5OFF?$CJ?3?5@ ; `string'
PUBLIC	??_C@_0BF@NPMJDBIB@Gravity?5is?5now?5OFF?4?6?$AA@ ; `string'
PUBLIC	??_C@_0DD@LMNFIMLA@Gravity?5is?5now?5ON?5with?5gravitati@ ; `string'
PUBLIC	??_C@_0DF@LMJHDGMA@Gravity?5not?5implemented?5for?5simp@ ; `string'
PUBLIC	??_C@_0CH@KGPCGDEP@Diffusion?5constant?5is?5?$CFf?4?5?5Enter@ ; `string'
PUBLIC	??_C@_0DA@ONLPGJLE@Body?5?$CFs?4?5Current?5target?5volume?5?$CF@ ; `string'
PUBLIC	__real@3ff0000000000000
PUBLIC	??_C@_0CL@EEJAFEIK@Body?5?$CFs?4?5Current?5pressure?5?$CFf?4?5?5E@ ; `string'
PUBLIC	??_C@_0M@BKDBGFCO@No?5bodies?4?6?$AA@		; `string'
PUBLIC	??_C@_0BI@NLHBLELH@Area?5normalization?5OFF?4?$AA@ ; `string'
PUBLIC	__real@3e7ad7f29abcaf48
PUBLIC	??_C@_03OFAPEBGM@?$CFs?6?$AA@			; `string'
PUBLIC	??_C@_0DC@IOKPDLHP@If?5you?5want?5to?5check?5normal?5chan@ ; `string'
PUBLIC	??_C@_0M@COEFCKEL@?5?$CIwas?5off?$CJ?6?$AA@	; `string'
PUBLIC	??_C@_0L@BBCJLGBA@?5?$CIwas?5on?$CJ?6?$AA@	; `string'
PUBLIC	??_C@_08NNIHOHLA@?5scalar?5?$AA@		; `string'
PUBLIC	??_C@_0BJ@BEEGLCAB@?$CF9s?5?$CF32s?5?$CF10s?5?$CF5d?5?5?$CF5d?5?5?$AA@ ; `string'
PUBLIC	??_C@_0FA@LMKNJDK@?5?5Element?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5A@ ; `string'
PUBLIC	??_C@_0CN@GEHAJOFP@Not?5implemented?5for?5simplex?5repr@ ; `string'
PUBLIC	??_C@_0BD@LOMCJELH@Checks?5completed?4?6?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_letter_command
EXTRN	_main_help:PROC
EXTRN	_longjmp:PROC
EXTRN	_jumpbuf:BYTE
EXTRN	_startup:PROC
EXTRN	_exit_flag:DWORD
EXTRN	_subshell_depth:DWORD
EXTRN	_perror:PROC
EXTRN	_fopen:PROC
EXTRN	_fclose:PROC
EXTRN	_do_show:PROC
EXTRN	_dont_resize_flag:DWORD
EXTRN	_display_file:PROC
EXTRN	_dump:PROC
EXTRN	_go_display_flag:DWORD
EXTRN	_zoom_vertex:PROC
EXTRN	_tordup:PROC
EXTRN	_atoi:PROC
EXTRN	_areaweed:PROC
EXTRN	_area_histogram:PROC
EXTRN	_vertex_average:PROC
EXTRN	_fix_volconst:PROC
EXTRN	_equiangulate:PROC
EXTRN	_kb_error:PROC
EXTRN	_edgeweed:PROC
EXTRN	_refine:PROC
EXTRN	_popfilm:PROC
EXTRN	_edgepop_film:PROC
EXTRN	_verpop_str:PROC
EXTRN	_ridge_notcher:PROC
EXTRN	_ridge_histogram:PROC
EXTRN	_articulate:PROC
EXTRN	_edge_histogram:PROC
EXTRN	_skinny:PROC
EXTRN	_skinny_histogram:PROC
EXTRN	_kb_lower_array:BYTE
EXTRN	_jiggle:PROC
EXTRN	_iterate:PROC
EXTRN	_breakflag:DWORD
EXTRN	_l_evolver_break:DWORD
EXTRN	_create_pressure_quant:PROC
EXTRN	_add_outside:PROC
EXTRN	_energy_init:DWORD
EXTRN	_change_model:PROC
EXTRN	_gap_quantity_num:DWORD
EXTRN	_gravity_quantity_num:DWORD
EXTRN	_set_body_fixvol:PROC
EXTRN	_cmdptr:DWORD
EXTRN	_datatype_size:BYTE
EXTRN	_typenames:BYTE
EXTRN	_curtest:PROC
EXTRN	_dump_force:PROC
EXTRN	_run_checks:PROC
;	COMDAT ??_C@_0CH@NACAJMAD@Illegal?5command?3?5?$CFc?4?5Type?5h?5for?5@
CONST	SEGMENT
??_C@_0CH@NACAJMAD@Illegal?5command?3?5?$CFc?4?5Type?5h?5for?5@ DB 'Illeg'
	DB	'al command: %c. Type h for help.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KKJEPFCH@R?5?$CIrestore?$CJ?5command?5discontinued@
CONST	SEGMENT
??_C@_0CD@KKJEPFCH@R?5?$CIrestore?$CJ?5command?5discontinued@ DB 'R (rest'
	DB	'ore) command discontinued.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@OLGFFLJB@Binary?5save?5not?5currently?5functi@
CONST	SEGMENT
??_C@_0DL@OLGFFLJB@Binary?5save?5not?5currently?5functi@ DB 'Binary save '
	DB	'not currently functional.', 0aH, 'Use ''d'' Ascii dump.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w?$AA@
CONST	SEGMENT
??_C@_01NOFIACDB@w?$AA@ DB 'w', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KCHKOGMF@Name?5of?5log?5file?3?5?$AA@
CONST	SEGMENT
??_C@_0BD@KCHKOGMF@Name?5of?5log?5file?3?5?$AA@ DB 'Name of log file: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EIHDJGKL@Command?5logging?5OFF?4?6?$AA@
CONST	SEGMENT
??_C@_0BG@EIHDJGKL@Command?5logging?5OFF?4?6?$AA@ DB 'Command logging OFF'
	DB	'.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MKMHLGMK@Automatic?5display?5OFF?4?$AA@
CONST	SEGMENT
??_C@_0BH@MKMHLGMK@Automatic?5display?5OFF?4?$AA@ DB 'Automatic display O'
	DB	'FF.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CJFPNCJ@Automatic?5display?5ON?4?$AA@
CONST	SEGMENT
??_C@_0BG@CJFPNCJ@Automatic?5display?5ON?4?$AA@ DB 'Automatic display ON.'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NKGFGCMB@Enter?5cut?9off?5radius?5?$CI?$CFf?$CJ?3?5?$AA@
CONST	SEGMENT
??_C@_0BM@NKGFGCMB@Enter?5cut?9off?5radius?5?$CI?$CFf?$CJ?3?5?$AA@ DB 'En'
	DB	'ter cut-off radius (%f): ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GDCBHHFG@Zoom?5vertex?5not?5found?4?6?$AA@
CONST	SEGMENT
??_C@_0BI@GDCBHHFG@Zoom?5vertex?5not?5found?4?6?$AA@ DB 'Zoom vertex not '
	DB	'found.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GBPOGFGD@Enter?5zoom?5vertex?5number?5?$CI?$CFd?$CJ?3?5?$AA@
CONST	SEGMENT
??_C@_0CA@GBPOGFGD@Enter?5zoom?5vertex?5number?5?$CI?$CFd?$CJ?3?5?$AA@ DB 'E'
	DB	'nter zoom vertex number (%d): ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MMPMCFA@Improper?5period?5number?4?6?$AA@
CONST	SEGMENT
??_C@_0BJ@MMPMCFA@Improper?5period?5number?4?6?$AA@ DB 'Improper period n'
	DB	'umber.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LHGCPILC@Duplicate?5which?5period?$CI1?02?03?$CJ?$DP?5?$AA@
CONST	SEGMENT
??_C@_0CA@LHGCPILC@Duplicate?5which?5period?$CI1?02?03?$CJ?$DP?5?$AA@ DB 'D'
	DB	'uplicate which period(1,2,3)? ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JNAGCCKO@Duplicate?5which?5period?$CI1?02?$CJ?$DP?5?$AA@
CONST	SEGMENT
??_C@_0BO@JNAGCCKO@Duplicate?5which?5period?$CI1?02?$CJ?$DP?5?$AA@ DB 'Du'
	DB	'plicate which period(1,2)? ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IOIDOPMA@Torus?5model?5not?5in?5effect?4?6?$AA@
CONST	SEGMENT
??_C@_0BM@IOIDOPMA@Torus?5model?5not?5in?5effect?4?6?$AA@ DB 'Torus model'
	DB	' not in effect.', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@FBLDAENN@Torus?5duplication?5not?5implemente@
CONST	SEGMENT
??_C@_0DP@FBLDAENN@Torus?5duplication?5not?5implemente@ DB 'Torus duplica'
	DB	'tion not implemented for simplex representation.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@ENNEDDMF@Skinny?5triangles?5weeded?3?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BN@ENNEDDMF@Skinny?5triangles?5weeded?3?5?$CFd?6?$AA@ DB 'Skinny t'
	DB	'riangles weeded: %d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@FEGDDAKC@Enter?5minimum?5area?5desired?$CIh?5for@
CONST	SEGMENT
??_C@_0CO@FEGDDAKC@Enter?5minimum?5area?5desired?$CIh?5for@ DB 'Enter min'
	DB	'imum area desired(h for histogram): ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@IFFIBCCN@Triangle?5weeding?5not?5implemented@
CONST	SEGMENT
??_C@_0DO@IFFIBCCN@Triangle?5weeding?5not?5implemented@ DB 'Triangle weed'
	DB	'ing not implemented for simplex representation.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DCKMBCPP@Vertex?5averaging?5done?4?6?$AA@
CONST	SEGMENT
??_C@_0BI@DCKMBCPP@Vertex?5averaging?5done?4?6?$AA@ DB 'Vertex averaging '
	DB	'done.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NHDDACLM@Edges?5switched?5in?5equiangulation@
CONST	SEGMENT
??_C@_0CG@NHDDACLM@Edges?5switched?5in?5equiangulation@ DB 'Edges switche'
	DB	'd in equiangulation: %d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@OAJIILDD@Fixed?5scale?5is?5ON?$CB?5?5Probably?5not@
CONST	SEGMENT
??_C@_0EH@OAJIILDD@Fixed?5scale?5is?5ON?$CB?5?5Probably?5not@ DB 'Fixed s'
	DB	'cale is ON!  Probably not a good idea with conjugate gradient'
	DB	'.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JMDAFIPN@Conjugate?5gradient?5now?5ON?4?$AA@
CONST	SEGMENT
??_C@_0BL@JMDAFIPN@Conjugate?5gradient?5now?5ON?4?$AA@ DB 'Conjugate grad'
	DB	'ient now ON.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@ELOHAFKC@Conjugate?5gradient?5now?5OFF?4?$AA@
CONST	SEGMENT
??_C@_0BM@ELOHAFKC@Conjugate?5gradient?5now?5OFF?4?$AA@ DB 'Conjugate gra'
	DB	'dient now OFF.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LHJNONFJ@Deleted?5edges?3?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BD@LHJNONFJ@Deleted?5edges?3?5?$CFd?6?$AA@ DB 'Deleted edges: %d', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@MEMPCBIC@Enter?5minimum?5edge?5length?5desire@
CONST	SEGMENT
??_C@_0DF@MEMPCBIC@Enter?5minimum?5edge?5length?5desire@ DB 'Enter minimu'
	DB	'm edge length desired(h for histogram): ', 00H ; `string'
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT ??_C@_0DM@GEICAECG@Vertex?5popping?5not?5implemented?5f@
CONST	SEGMENT
??_C@_0DM@GEICAECG@Vertex?5popping?5not?5implemented?5f@ DB 'Vertex poppi'
	DB	'ng not implemented for simplex representation.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BGIMLONO@Edges?5popped?3?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BC@BGIMLONO@Edges?5popped?3?5?$CFd?6?$AA@ DB 'Edges popped: %d', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CLGHNEFK@Vertices?5popped?3?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BF@CLGHNEFK@Vertices?5popped?3?5?$CFd?6?$AA@ DB 'Vertices popped: '
	DB	'%d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@CIEKAHBB@Edge?5popping?5not?5implemented?5for@
CONST	SEGMENT
??_C@_0DK@CIEKAHBB@Edge?5popping?5not?5implemented?5for@ DB 'Edge popping'
	DB	' not implemented for simplex representation.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KADAPAAJ@Number?5of?5edges?5notched?3?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BN@KADAPAAJ@Number?5of?5edges?5notched?3?5?$CFd?6?$AA@ DB 'Number '
	DB	'of edges notched: %d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@JKPEEAKK@refine?5edge?5ee?5where?5max?$CIee?4vert@
CONST	SEGMENT
??_C@_0DC@JKPEEAKK@refine?5edge?5ee?5where?5max?$CIee?4vert@ DB 'refine e'
	DB	'dge ee where max(ee.vertex,dihedral) > %f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KKKCODIA@histogram?$CIvertex?0dihedral?$CJ?$AA@
CONST	SEGMENT
??_C@_0BL@KKKCODIA@histogram?$CIvertex?0dihedral?$CJ?$AA@ DB 'histogram(v'
	DB	'ertex,dihedral)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@JDOPAEKK@Enter?5maximum?5angle?$CIradians?$CJ?5bet@
CONST	SEGMENT
??_C@_0EA@JDOPAEKK@Enter?5maximum?5angle?$CIradians?$CJ?5bet@ DB 'Enter m'
	DB	'aximum angle(radians) between normals(h for histogram): ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@IGMMJBCJ@Target?5volumes?5adjusted?4?6?$AA@
CONST	SEGMENT
??_C@_0BK@IGMMJBCJ@Target?5volumes?5adjusted?4?6?$AA@ DB 'Target volumes '
	DB	'adjusted.', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@MKDLKPPM@Enter?5maximum?5edge?5length?5desire@
CONST	SEGMENT
??_C@_0DF@MKDLKPPM@Enter?5maximum?5edge?5length?5desire@ DB 'Enter maximu'
	DB	'm edge length desired(h for histogram): ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LKFIBJDB@Edges?5refined?3?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BD@LKFIBJDB@Edges?5refined?3?5?$CFd?6?$AA@ DB 'Edges refined: %d', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@KOJFNHHK@Enter?5minimum?5acute?5angle?5desire@
CONST	SEGMENT
??_C@_0DF@KOJFNHHK@Enter?5minimum?5acute?5angle?5desire@ DB 'Enter minimu'
	DB	'm acute angle desired(h for histogram): ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03PPOCCAPH@?$CFf?6?$AA@
CONST	SEGMENT
??_C@_03PPOCCAPH@?$CFf?6?$AA@ DB '%f', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NLHBFEJL@Enter?5target?5size?5?$CI?$CFg?$CJ?3?5?$AA@
CONST	SEGMENT
??_C@_0BJ@NLHBFEJL@Enter?5target?5size?5?$CI?$CFg?$CJ?3?5?$AA@ DB 'Enter '
	DB	'target size (%g): ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BBKJHOFD@Homothety?5adjustment?5is?5?$CFs?4?6?$AA@
CONST	SEGMENT
??_C@_0BN@BBKJHOFD@Homothety?5adjustment?5is?5?$CFs?4?6?$AA@ DB 'Homothet'
	DB	'y adjustment is %s.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03MPPIHBHJ@OFF?$AA@
CONST	SEGMENT
??_C@_03MPPIHBHJ@OFF?$AA@ DB 'OFF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BFICIOJL@ON?$AA@
CONST	SEGMENT
??_C@_02BFICIOJL@ON?$AA@ DB 'ON', 00H			; `string'
CONST	ENDS
;	COMDAT __real@3e45798ee2308c3a
CONST	SEGMENT
__real@3e45798ee2308c3a DQ 03e45798ee2308c3ar	; 1e-008
CONST	ENDS
;	COMDAT ??_C@_0CH@MHPIELFJ@Enter?5pressure?5?$CI0?5for?5rigid?5volu@
CONST	SEGMENT
??_C@_0CH@MHPIELFJ@Enter?5pressure?5?$CI0?5for?5rigid?5volu@ DB 'Enter pr'
	DB	'essure (0 for rigid volumes): ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CFPANFKA@Pressure?5now?5?$CFf?6?$AA@
CONST	SEGMENT
??_C@_0BB@CFPANFKA@Pressure?5now?5?$CFf?6?$AA@ DB 'Pressure now %f', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HAKNIIEA@Can?8t?5do?5pressure?5without?5bodies@
CONST	SEGMENT
??_C@_0CD@HAKNIIEA@Can?8t?5do?5pressure?5without?5bodies@ DB 'Can''t do p'
	DB	'ressure without bodies.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@GGIKDPMC@Scale?5optimizing?4?5Enter?5scale?5li@
CONST	SEGMENT
??_C@_0CL@GGIKDPMC@Scale?5optimizing?4?5Enter?5scale?5li@ DB 'Scale optim'
	DB	'izing. Enter scale limit (%g): ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MIKDNHAM@Enter?5scale?5factor?5?$CI?$CFg?$CJ?3?5?$AA@
CONST	SEGMENT
??_C@_0BK@MIKDNHAM@Enter?5scale?5factor?5?$CI?$CFg?$CJ?3?5?$AA@ DB 'Enter'
	DB	' scale factor (%g): ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@MJGDANPD@Higher?9order?5models?5not?5implemen@
CONST	SEGMENT
??_C@_0EB@MJGDANPD@Higher?9order?5models?5not?5implemen@ DB 'Higher-order'
	DB	' models not implemented for simplex representation.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MDMJECBF@Gap?5constant?5is?5?$CFf?4?5?5Enter?5new?3?5@
CONST	SEGMENT
??_C@_0CB@MDMJECBF@Gap?5constant?5is?5?$CFf?4?5?5Enter?5new?3?5@ DB 'Gap '
	DB	'constant is %f.  Enter new: ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BPFKOIKH@Jiggling?5on?5every?5move?5disabled?4@
CONST	SEGMENT
??_C@_0CC@BPFKOIKH@Jiggling?5on?5every?5move?5disabled?4@ DB 'Jiggling on'
	DB	' every move disabled.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@KEJHIJDI@Enter?5temperature?5for?5jiggling?5?$CI@
CONST	SEGMENT
??_C@_0CO@KEJHIJDI@Enter?5temperature?5for?5jiggling?5?$CI@ DB 'Enter tem'
	DB	'perature for jiggling (default %f): ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BGPFIODI@Now?5jiggling?5on?5every?5move?4?6?$AA@
CONST	SEGMENT
??_C@_0BN@BGPFIODI@Now?5jiggling?5on?5every?5move?4?6?$AA@ DB 'Now jiggli'
	DB	'ng on every move.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@HCNCBBOM@Enter?5new?5constant?5?$CI0?5for?5OFF?$CJ?3?5@
CONST	SEGMENT
??_C@_0CB@HCNCBBOM@Enter?5new?5constant?5?$CI0?5for?5OFF?$CJ?3?5@ DB 'Ent'
	DB	'er new constant (0 for OFF): ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NPMJDBIB@Gravity?5is?5now?5OFF?4?6?$AA@
CONST	SEGMENT
??_C@_0BF@NPMJDBIB@Gravity?5is?5now?5OFF?4?6?$AA@ DB 'Gravity is now OFF.'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@LMNFIMLA@Gravity?5is?5now?5ON?5with?5gravitati@
CONST	SEGMENT
??_C@_0DD@LMNFIMLA@Gravity?5is?5now?5ON?5with?5gravitati@ DB 'Gravity is '
	DB	'now ON with gravitational constant %f.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@LMJHDGMA@Gravity?5not?5implemented?5for?5simp@
CONST	SEGMENT
??_C@_0DF@LMJHDGMA@Gravity?5not?5implemented?5for?5simp@ DB 'Gravity not '
	DB	'implemented for simplex representation.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@KGPCGDEP@Diffusion?5constant?5is?5?$CFf?4?5?5Enter@
CONST	SEGMENT
??_C@_0CH@KGPCGDEP@Diffusion?5constant?5is?5?$CFf?4?5?5Enter@ DB 'Diffusi'
	DB	'on constant is %f.  Enter new: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@ONLPGJLE@Body?5?$CFs?4?5Current?5target?5volume?5?$CF@
CONST	SEGMENT
??_C@_0DA@ONLPGJLE@Body?5?$CFs?4?5Current?5target?5volume?5?$CF@ DB 'Body'
	DB	' %s. Current target volume %g.  Enter new: ', 00H ; `string'
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT ??_C@_0CL@EEJAFEIK@Body?5?$CFs?4?5Current?5pressure?5?$CFf?4?5?5E@
CONST	SEGMENT
??_C@_0CL@EEJAFEIK@Body?5?$CFs?4?5Current?5pressure?5?$CFf?4?5?5E@ DB 'Bo'
	DB	'dy %s. Current pressure %f.  Enter new: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BKDBGFCO@No?5bodies?4?6?$AA@
CONST	SEGMENT
??_C@_0M@BKDBGFCO@No?5bodies?4?6?$AA@ DB 'No bodies.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NLHBLELH@Area?5normalization?5OFF?4?$AA@
CONST	SEGMENT
??_C@_0BI@NLHBLELH@Area?5normalization?5OFF?4?$AA@ DB 'Area normalization'
	DB	' OFF.', 00H					; `string'
CONST	ENDS
;	COMDAT __real@3e7ad7f29abcaf48
CONST	SEGMENT
__real@3e7ad7f29abcaf48 DQ 03e7ad7f29abcaf48r	; 1e-007
CONST	ENDS
;	COMDAT ??_C@_03OFAPEBGM@?$CFs?6?$AA@
CONST	SEGMENT
??_C@_03OFAPEBGM@?$CFs?6?$AA@ DB '%s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@IOKPDLHP@If?5you?5want?5to?5check?5normal?5chan@
CONST	SEGMENT
??_C@_0DC@IOKPDLHP@If?5you?5want?5to?5check?5normal?5chan@ DB 'If you wan'
	DB	't to check normal change, enter ratio: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@COEFCKEL@?5?$CIwas?5off?$CJ?6?$AA@
CONST	SEGMENT
??_C@_0M@COEFCKEL@?5?$CIwas?5off?$CJ?6?$AA@ DB ' (was off)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BBCJLGBA@?5?$CIwas?5on?$CJ?6?$AA@
CONST	SEGMENT
??_C@_0L@BBCJLGBA@?5?$CIwas?5on?$CJ?6?$AA@ DB ' (was on)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08NNIHOHLA@?5scalar?5?$AA@
CONST	SEGMENT
??_C@_08NNIHOHLA@?5scalar?5?$AA@ DB ' scalar ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BEEGLCAB@?$CF9s?5?$CF32s?5?$CF10s?5?$CF5d?5?5?$CF5d?5?5?$AA@
CONST	SEGMENT
??_C@_0BJ@BEEGLCAB@?$CF9s?5?$CF32s?5?$CF10s?5?$CF5d?5?5?$CF5d?5?5?$AA@ DB '%'
	DB	'9s %32s %10s %5d  %5d  ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@LMKNJDK@?5?5Element?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5A@
CONST	SEGMENT
??_C@_0FA@LMKNJDK@?5?5Element?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5A@ DB ' '
	DB	' Element                      Attribute      Type   Offset  B'
	DB	'ytes  Dimensions', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@GEHAJOFP@Not?5implemented?5for?5simplex?5repr@
CONST	SEGMENT
??_C@_0CN@GEHAJOFP@Not?5implemented?5for?5simplex?5repr@ DB 'Not implemen'
	DB	'ted for simplex representation.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LOMCJELH@Checks?5completed?4?6?$AA@
CONST	SEGMENT
??_C@_0BD@LOMCJELH@Checks?5completed?4?6?$AA@ DB 'Checks completed.', 0aH
	DB	00H						; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _letter_command
_TEXT	SEGMENT
tv1418 = -184						; size = 8
_k$ = -180						; size = 4
_znum$ = -176						; size = 4
tv2061 = -172						; size = 4
tv1970 = -168						; size = 4
_pp$89177 = -164					; size = 8
tv2071 = -160						; size = 4
tv2057 = -156						; size = 4
_val$ = -152						; size = 8
_response$ = -144					; size = 140
__$ArrayPad$ = -4					; size = 4
_c$ = 8							; size = 4
_letter_command PROC					; COMDAT

; 145  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 184				; 000000b8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 146  :   char response[140]; 
; 147  :   body_id b_id;
; 148  :   REAL val;  /* for scanf */
; 149  :   int i,n,k;
; 150  :   int znum;
; 151  :   int old;
; 152  : 
; 153  :   switch ( c ) 

	mov	ecx, DWORD PTR _c$[ebp]
	push	ebx
	lea	eax, DWORD PTR [ecx-8]
	push	esi
	push	edi
	cmp	eax, 114				; 00000072H
	ja	$LN2@letter_com
	movzx	eax, BYTE PTR $LN292@letter_com[eax]
	jmp	DWORD PTR $LN378@letter_com[eax*4]
$LN247@letter_com:

; 154  :   {
; 155  :      /* Reporting */
; 156  :      case 'C':  run_checks();

	call	_run_checks

; 157  :             outstring("Checks completed.\n");

	push	OFFSET ??_C@_0BD@LOMCJELH@Checks?5completed?4?6?$AA@
	call	_outstring
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN246@letter_com:

; 158  :             break;
; 159  : 
; 160  :      case 'c': /* report count of elements and status */
; 161  :             memory_report();

	call	_memory_report
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN245@letter_com:

; 162  :             break;
; 163  : 
; 164  :      case 'E': dump_force(); break;

	call	_dump_force
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN244@letter_com:

; 165  : 
; 166  :      case 'e' : extrapolate(); break;

	call	_extrapolate
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN243@letter_com:

; 167  : 
; 168  :      case 'i':  /* i for information */
; 169  :             information();

	call	_information
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN242@letter_com:

; 170  :             break;
; 171  : 
; 172  :      case 'v' : /* show volumes and quantities */ 
; 173  :             show_volumes();

	call	_show_volumes
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN241@letter_com:

; 174  :             break;
; 175  : 
; 176  :      case 'z' : /* curvature test */
; 177  :             if ( web.representation == SIMPLEX )

	cmp	DWORD PTR _web+624, 3
	jne	SHORT $LN240@letter_com

; 178  :               outstring("Not implemented for simplex representation.\n");

	push	OFFSET ??_C@_0CN@GEHAJOFP@Not?5implemented?5for?5simplex?5repr@
	call	_outstring
	add	esp, 4
$LN240@letter_com:

; 179  :             curtest();

	call	_curtest
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN239@letter_com:

; 180  :             break;
; 181  : 
; 182  :      case 'X' : /* extra attributes */
; 183  :         { 
; 184  :             outstring(
; 185  :  "  Element                      Attribute      Type   Offset  Bytes  Dimensions\n");

	push	OFFSET ??_C@_0FA@LMKNJDK@?5?5Element?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5A@
	call	_outstring
	add	esp, 4
	mov	DWORD PTR tv2057[ebp], OFFSET _web+108
	mov	DWORD PTR tv2061[ebp], OFFSET _typenames
$LL309@letter_com:

; 187  :             { for ( k = 0 ; k < web.skel[i].extra_count ; k++ )

	mov	ecx, DWORD PTR tv2057[ebp]
	cmp	DWORD PTR [ecx], 0
	mov	DWORD PTR _k$[ebp], 0
	jle	$LN237@letter_com
	xor	ebx, ebx
	npad	4
$LL235@letter_com:

; 188  :               { int j;
; 189  :                 sprintf(msg,"%9s %32s %10s %5d  %5d  ",typenames[i],
; 190  :                 EXTRAS(i)[k].name,
; 191  :                 datatype_name[EXTRAS(i)[k].type],               
; 192  :                 EXTRAS(i)[k].offset,
; 193  :                 datatype_size[EXTRAS(i)[k].type]*EXTRAS(i)[k].array_spec.datacount);

	mov	esi, DWORD PTR tv2057[ebp]
	mov	edx, DWORD PTR [esi-4]
	mov	eax, DWORD PTR _dymem
	add	edx, ebx
	mov	ecx, DWORD PTR [eax+edx+68]
	add	eax, edx
	add	ecx, ecx
	mov	edx, DWORD PTR _datatype_size[ecx+ecx]
	imul	edx, DWORD PTR [eax+88]
	add	ecx, ecx
	mov	ecx, DWORD PTR _datatype_name[ecx]
	push	edx
	mov	edx, DWORD PTR [eax+64]
	push	edx
	mov	edx, DWORD PTR tv2061[ebp]
	push	ecx
	mov	ecx, DWORD PTR _msg
	push	eax
	mov	eax, DWORD PTR [edx]
	push	eax
	push	OFFSET ??_C@_0BJ@BEEGLCAB@?$CF9s?5?$CF32s?5?$CF10s?5?$CF5d?5?5?$CF5d?5?5?$AA@
	push	ecx
	call	_sprintf

; 194  :                 for ( j = 0 ; j < EXTRAS(i)[k].array_spec.dim ; j++ )

	mov	ecx, DWORD PTR [esi-4]
	mov	esi, DWORD PTR _dymem
	xor	edi, edi
	lea	edx, DWORD PTR [ebx+ecx]
	add	esp, 28					; 0000001cH
	cmp	DWORD PTR [edx+esi+76], edi
	jle	SHORT $LN230@letter_com

; 188  :               { int j;
; 189  :                 sprintf(msg,"%9s %32s %10s %5d  %5d  ",typenames[i],
; 190  :                 EXTRAS(i)[k].name,
; 191  :                 datatype_name[EXTRAS(i)[k].type],               
; 192  :                 EXTRAS(i)[k].offset,
; 193  :                 datatype_size[EXTRAS(i)[k].type]*EXTRAS(i)[k].array_spec.datacount);

	lea	eax, DWORD PTR [ebx+96]
	mov	DWORD PTR tv1970[ebp], eax
	npad	4
$LL232@letter_com:

; 195  :                   sprintf(msg+strlen(msg),"[%d]",EXTRAS(i)[k].array_spec.sizes[j]);

	mov	eax, DWORD PTR _msg
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR tv2071[ebp], edx
	npad	2
$LL293@letter_com:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL293@letter_com
	mov	edx, DWORD PTR tv1970[ebp]
	sub	eax, DWORD PTR tv2071[ebp]
	add	edx, ecx
	mov	ecx, DWORD PTR [edx+esi]
	add	eax, DWORD PTR _msg
	push	ecx
	push	OFFSET ??_C@_04KBDJOJNB@?$FL?$CFd?$FN?$AA@
	push	eax
	call	_sprintf
	mov	eax, DWORD PTR tv2057[ebp]
	mov	ecx, DWORD PTR [eax-4]
	mov	esi, DWORD PTR _dymem
	add	DWORD PTR tv1970[ebp], 4
	inc	edi
	lea	edx, DWORD PTR [ebx+ecx]
	add	esp, 12					; 0000000cH
	cmp	edi, DWORD PTR [edx+esi+76]
	jl	SHORT $LL232@letter_com
$LN230@letter_com:

; 196  :                 if ( EXTRAS(i)[k].array_spec.dim == 0 ) strcat(msg," scalar ");

	mov	edi, DWORD PTR tv2057[ebp]
	mov	eax, DWORD PTR [edi-4]
	add	eax, ebx
	cmp	DWORD PTR [eax+esi+76], 0
	jne	SHORT $LN229@letter_com
	mov	eax, DWORD PTR _msg
	dec	eax
$LL294@letter_com:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL294@letter_com
	mov	ecx, DWORD PTR ??_C@_08NNIHOHLA@?5scalar?5?$AA@
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ??_C@_08NNIHOHLA@?5scalar?5?$AA@+4
	mov	DWORD PTR [eax+4], edx
	mov	cl, BYTE PTR ??_C@_08NNIHOHLA@?5scalar?5?$AA@+8
	mov	BYTE PTR [eax+8], cl
$LN229@letter_com:

; 197  :                 outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 198  :                 outstring("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	mov	eax, DWORD PTR _k$[ebp]
	inc	eax
	add	esp, 8
	add	ebx, 240				; 000000f0H
	mov	DWORD PTR _k$[ebp], eax
	cmp	eax, DWORD PTR [edi]
	jl	$LL235@letter_com
$LN237@letter_com:

; 186  :             for ( i = 0 ; i < NUMELEMENTS; i++ )

	mov	eax, DWORD PTR tv2061[ebp]
	add	DWORD PTR tv2057[ebp], 112		; 00000070H
	add	eax, 4
	mov	DWORD PTR tv2061[ebp], eax
	cmp	eax, OFFSET _typenames+20
	jl	$LL309@letter_com
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN228@letter_com:

; 199  :               }
; 200  :             }
; 201  :          }
; 202  :          break;
; 203  :               
; 204  : 
; 205  :      /* Controlling model characteristics */
; 206  : 
; 207  :      case 'A' : /* set adjustable parameters */
; 208  :             if ( set_parameters() )

	call	_set_parameters
	test	eax, eax
	je	$LN1@letter_com

; 209  :               recalc();

	call	_recalc
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN226@letter_com:

; 210  :             break;
; 211  : 
; 212  : 
; 213  :      case 'a' : /* toggle area normalization of force */
; 214  :             old = web.area_norm_flag;

	mov	eax, DWORD PTR _web+876

; 215  :             web.area_norm_flag = !web.area_norm_flag;

	xor	ecx, ecx
	test	eax, eax
	sete	cl
	mov	esi, eax

; 216  :             web.norm_check_flag = 0; /* default OFF */

	mov	DWORD PTR _web+880, 0
	mov	eax, ecx
	mov	DWORD PTR _web+876, eax

; 217  :             if ( web.area_norm_flag ) 

	test	eax, eax
	je	$LN225@letter_com

; 218  :             { outstring("Area normalization ON.");

	push	OFFSET ??_C@_0BH@LFJMNMPC@Area?5normalization?5ON?4?$AA@
	call	_outstring
	add	esp, 4

; 219  :               if ( old ) outstring(" (was on)\n");

	test	esi, esi
	je	SHORT $LN224@letter_com
	push	OFFSET ??_C@_0L@BBCJLGBA@?5?$CIwas?5on?$CJ?6?$AA@
	jmp	SHORT $LN365@letter_com
$LN224@letter_com:

; 220  : 	      else outstring(" (was off)\n");

	push	OFFSET ??_C@_0M@COEFCKEL@?5?$CIwas?5off?$CJ?6?$AA@
$LN365@letter_com:
	call	_outstring
	add	esp, 4

; 221  :               prompt("If you want to check normal change, enter ratio: ",response,sizeof(response));

	push	140					; 0000008cH
	lea	edx, DWORD PTR _response$[ebp]
	push	edx
	push	OFFSET ??_C@_0DC@IOKPDLHP@If?5you?5want?5to?5check?5normal?5chan@
	call	_prompt

; 222  :               if ( logfd ) fprintf(logfd,"%s\n",response);

	mov	eax, DWORD PTR _logfd
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN222@letter_com
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN222@letter_com:

; 223  :               if ( const_expr(response,&val) > 0 )

	lea	edx, DWORD PTR _val$[ebp]
	push	edx
	lea	eax, DWORD PTR _response$[ebp]
	push	eax
	call	_const_expr
	add	esp, 8
	test	eax, eax
	jle	SHORT $LN220@letter_com

; 224  :                 if ( val > 0.0000001 )

	fld	QWORD PTR __real@3e7ad7f29abcaf48
	fld	QWORD PTR _val$[ebp]
	fcom	ST(1)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 65					; 00000041H
	jne	SHORT $LN315@letter_com

; 225  :                     { web.norm_check_flag = 1;
; 226  :                       web.norm_check_max = val;

	fstp	QWORD PTR _web+888
	mov	DWORD PTR _web+880, 1

; 227  :                     }
; 228  :               calc_energy();  /* to make sure vertex areas set */

	call	_calc_energy
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN315@letter_com:

; 225  :                     { web.norm_check_flag = 1;
; 226  :                       web.norm_check_max = val;

	fstp	ST(0)
$LN220@letter_com:

; 227  :                     }
; 228  :               calc_energy();  /* to make sure vertex areas set */

	call	_calc_energy
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN225@letter_com:

; 229  :             }
; 230  :             else
; 231  :             { outstring("Area normalization OFF.");

	push	OFFSET ??_C@_0BI@NLHBLELH@Area?5normalization?5OFF?4?$AA@
$LN377@letter_com:
	call	_outstring
	add	esp, 4
$LN24@letter_com:

; 232  :               if ( old ) outstring(" (was on)\n");

	test	esi, esi
	je	SHORT $LN218@letter_com
	push	OFFSET ??_C@_0L@BBCJLGBA@?5?$CIwas?5on?$CJ?6?$AA@
	call	_outstring
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN218@letter_com:

; 233  : 	      else outstring(" (was off)\n");

	push	OFFSET ??_C@_0M@COEFCKEL@?5?$CIwas?5off?$CJ?6?$AA@
	call	_outstring
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN216@letter_com:

; 234  :             }
; 235  :             break;
; 236  : 
; 237  :      case 'b' : /* set body volumes and pressures */
; 238  :        if ( web.skel[BODY].count == 0 )

	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN215@letter_com

; 239  :        { outstring("No bodies.\n");

	push	OFFSET ??_C@_0M@BKDBGFCO@No?5bodies?4?6?$AA@
	call	_outstring
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN215@letter_com:

; 240  :          break;
; 241  :        }
; 242  :        { REAL pp;
; 243  : 
; 244  :          FOR_ALL_BODIES(b_id)

	mov	edi, DWORD PTR _web+384
	mov	ebx, edi
	shr	ebx, 28					; 0000001cH
	and	ebx, 1
	je	$LN212@letter_com
	npad	6
$LL310@letter_com:
	mov	ecx, DWORD PTR _web+348
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, ecx
	mov	DWORD PTR tv1418[ebp+4], edx
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	$LN213@letter_com

; 245  :          { 
; 246  :            if ( get_battr(b_id) & PRESSURE )

	and	ecx, 2048				; 00000800H
	xor	eax, eax
	or	ecx, eax

; 247  :            {
; 248  :              pp = get_body_pressure(b_id);

	push	edi
	je	$LN209@letter_com
	call	_get_body_pressure
	fstp	QWORD PTR _pp$89177[ebp]
	add	esp, 4

; 249  :              sprintf(msg,"Body %s. Current pressure %f.  Enter new: ",
; 250  :                          ELNAME(b_id),(DOUBLE)pp);

	test	ebx, ebx
	je	SHORT $LN252@letter_com
	lea	eax, DWORD PTR [esi+1]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN253@letter_com
$LN252@letter_com:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN253@letter_com:
	fld	QWORD PTR _pp$89177[ebp]
	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	eax
	push	OFFSET ??_C@_0CL@EEJAFEIK@Body?5?$CFs?4?5Current?5pressure?5?$CFf?4?5?5E@
	push	ecx
	call	_sprintf

; 251  :              prompt(msg,response,sizeof(response));

	mov	eax, DWORD PTR _msg
	push	140					; 0000008cH
	lea	edx, DWORD PTR _response$[ebp]
	push	edx
	push	eax
	call	_prompt

; 252  :              if ( logfd ) fprintf(logfd,"%s\n",response);

	mov	eax, DWORD PTR _logfd
	add	esp, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN208@letter_com
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN208@letter_com:

; 253  :              if ( const_expr(response,&pp) > 0 )

	lea	edx, DWORD PTR _pp$89177[ebp]
	push	edx
	lea	eax, DWORD PTR _response$[ebp]
	push	eax
	call	_const_expr
	add	esp, 8
	test	eax, eax
	jle	$LN213@letter_com

; 254  :              { set_body_pressure(b_id,pp);

	fld	QWORD PTR _pp$89177[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	edi
	call	_set_body_pressure
	add	esp, 12					; 0000000cH

; 255  :                reset_conj_grad();

	call	_reset_conj_grad

; 256  :                if ( everything_quantities_flag )

	cmp	DWORD PTR _everything_quantities_flag, 0
	je	$LN213@letter_com

; 257  :                { struct gen_quant *q = GEN_QUANT(bptr(b_id)->volquant);

	mov	ecx, DWORD PTR _web+348

; 258  :                  if ( pp == 0.0 )

	fld	QWORD PTR _pp$89177[ebp]
	mov	edx, DWORD PTR [ecx+esi*4]
	fld	ST(0)
	mov	ecx, DWORD PTR [edx+404]
	fldz
	imul	ecx, 368				; 00000170H
	fucompp
	fnstsw	ax
	add	ecx, DWORD PTR _gen_quant_list
	test	ah, 68					; 00000044H
	jp	SHORT $LN205@letter_com

; 259  :                  { q->modulus = 1.0;
; 260  :                    q->flags &= ~(Q_FIXED|Q_ENERGY|Q_CONSERVED);

	mov	eax, DWORD PTR [ecx+136]
	fstp	ST(0)
	fld1
	and	eax, -12				; fffffff4H

; 261  :                    q->flags |= Q_INFO;

	or	eax, 4
	fstp	QWORD PTR [ecx+176]
	mov	DWORD PTR [ecx+136], eax

; 262  :                  }
; 263  :                  else 

	jmp	$LN213@letter_com
$LN205@letter_com:

; 264  :                  { q->modulus = -pp;
; 265  :                    q->flags &= ~(Q_FIXED|Q_INFO|Q_CONSERVED);

	mov	edx, DWORD PTR [ecx+136]
	fchs
	and	edx, -15				; fffffff1H
	fstp	QWORD PTR [ecx+176]

; 266  :                    q->flags |= Q_ENERGY;

	or	edx, 1
	mov	DWORD PTR [ecx+136], edx

; 267  :                  }
; 268  :               }
; 269  :             }
; 270  :           } /* end PRESSURE */
; 271  :           else /* edit volumes */

	jmp	$LN213@letter_com
$LN209@letter_com:

; 272  :           { 
; 273  :             pp = get_body_fixvol(b_id);

	call	_get_body_fixvol
	fstp	QWORD PTR _pp$89177[ebp]
	add	esp, 4

; 274  :             sprintf(msg,"Body %s. Current target volume %g.  Enter new: ",
; 275  :                         ELNAME(b_id),(DOUBLE)pp);

	test	ebx, ebx
	je	SHORT $LN254@letter_com
	lea	eax, DWORD PTR [esi+1]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN255@letter_com
$LN254@letter_com:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN255@letter_com:
	fld	QWORD PTR _pp$89177[ebp]
	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	eax
	push	OFFSET ??_C@_0DA@ONLPGJLE@Body?5?$CFs?4?5Current?5target?5volume?5?$CF@
	push	ecx
	call	_sprintf

; 276  :             prompt(msg,response,sizeof(response));

	mov	eax, DWORD PTR _msg
	push	140					; 0000008cH
	lea	edx, DWORD PTR _response$[ebp]
	push	edx
	push	eax
	call	_prompt

; 277  :             if ( logfd ) fprintf(logfd,"%s\n",response);

	mov	eax, DWORD PTR _logfd
	add	esp, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN202@letter_com
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN202@letter_com:

; 278  :             cmdptr = response;

	lea	edx, DWORD PTR _response$[ebp]

; 279  :             if ( const_expr(response,&pp) > 0 )

	lea	eax, DWORD PTR _pp$89177[ebp]
	push	eax
	mov	ecx, edx
	push	ecx
	mov	DWORD PTR _cmdptr, edx
	call	_const_expr
	add	esp, 8
	test	eax, eax
	jle	$LN213@letter_com

; 280  :             { set_body_fixvol(b_id,pp);

	fld	QWORD PTR _pp$89177[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	edi
	call	_set_body_fixvol
	add	esp, 12					; 0000000cH

; 281  :               reset_conj_grad();

	call	_reset_conj_grad

; 282  :               if ( pp == 0.0 )

	fld	QWORD PTR _pp$89177[ebp]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN200@letter_com

; 283  :               { if ( get_attr(b_id) & FIXEDVOL)

	mov	edx, edi
	shr	edx, 29					; 0000001dH
	imul	edx, 112				; 00000070H
	mov	eax, DWORD PTR _web[edx+12]
	mov	eax, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 32					; 00000020H
	xor	ecx, ecx
	or	eax, ecx
	je	$LN213@letter_com

; 284  :                 { unset_attr(b_id,FIXEDVOL);

	push	ecx
	push	32					; 00000020H
	push	edi
	call	_unset_attr
	add	esp, 12					; 0000000cH

; 285  :                   if ( everything_quantities_flag )

	cmp	DWORD PTR _everything_quantities_flag, 0
	je	$LN213@letter_com

; 286  :                   { struct gen_quant *q = GEN_QUANT(bptr(b_id)->volquant);

	mov	ecx, DWORD PTR _web+348

; 287  :                     q->target = 0.0;

	fldz
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR [edx+404]
	imul	eax, 368				; 00000170H
	add	eax, DWORD PTR _gen_quant_list

; 288  :                     q->flags &= ~(Q_FIXED|Q_ENERGY|Q_CONSERVED);

	mov	ecx, DWORD PTR [eax+136]
	and	ecx, -12				; fffffff4H

; 289  :                     q->flags |= Q_INFO;

	or	ecx, 4

; 290  :                   }
; 291  :                 }
; 292  :               }
; 293  :               else

	jmp	SHORT $LN366@letter_com
$LN200@letter_com:

; 294  :               { 
; 295  :                 set_attr(b_id,FIXEDVOL);

	push	0
	push	32					; 00000020H
	push	edi
	call	_set_attr
	add	esp, 12					; 0000000cH

; 296  :                 if ( everything_quantities_flag )

	cmp	DWORD PTR _everything_quantities_flag, 0
	je	SHORT $LN213@letter_com

; 297  :                 { struct gen_quant *q = GEN_QUANT(bptr(b_id)->volquant);

	mov	edx, DWORD PTR _web+348

; 298  :                   q->target = pp;

	fld	QWORD PTR _pp$89177[ebp]
	mov	eax, DWORD PTR [edx+esi*4]
	mov	eax, DWORD PTR [eax+404]
	imul	eax, 368				; 00000170H
	add	eax, DWORD PTR _gen_quant_list

; 299  :                   q->flags &= ~(Q_INFO|Q_ENERGY|Q_CONSERVED);

	mov	ecx, DWORD PTR [eax+136]
	and	ecx, -14				; fffffff2H

; 300  :                   q->flags |= Q_FIXED;

	or	ecx, 2
$LN366@letter_com:
	mov	DWORD PTR [eax+136], ecx
	fstp	QWORD PTR [eax+144]
$LN213@letter_com:

; 240  :          break;
; 241  :        }
; 242  :        { REAL pp;
; 243  : 
; 244  :          FOR_ALL_BODIES(b_id)

	mov	edx, DWORD PTR _web+348
	mov	eax, DWORD PTR [edx+esi*4]
	mov	edi, DWORD PTR [eax]
	mov	ebx, edi
	shr	ebx, 28					; 0000001cH
	and	ebx, 1
	jne	$LL310@letter_com
$LN212@letter_com:

; 301  :                 }
; 302  :               } 
; 303  :             }
; 304  :           } 
; 305  :         }  /* end BODIES */
; 306  :       } /* end block */
; 307  :      recalc();

	call	_recalc
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN195@letter_com:

; 308  :      break; 
; 309  :  
; 310  :          case 'f' : /* Set diffusion */
; 311  :                 sprintf(msg,"Diffusion constant is %f.  Enter new: ",
; 312  :                  (DOUBLE)web.diffusion_const); 

	fld	QWORD PTR _web+784
	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CH@KGPCGDEP@Diffusion?5constant?5is?5?$CFf?4?5?5Enter@
	push	ecx
	call	_sprintf

; 313  :                 prompt(msg,response,sizeof(response));

	mov	eax, DWORD PTR _msg
	push	140					; 0000008cH
	lea	edx, DWORD PTR _response$[ebp]
	push	edx
	push	eax
	call	_prompt

; 314  :                 if ( logfd ) fprintf(logfd,"%s\n",response);

	mov	eax, DWORD PTR _logfd
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN194@letter_com
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN194@letter_com:

; 315  :                 if ( const_expr(response,&val) > 0 )

	lea	edx, DWORD PTR _val$[ebp]
	push	edx
	lea	eax, DWORD PTR _response$[ebp]
	push	eax
	call	_const_expr
	add	esp, 8
	test	eax, eax
	jle	SHORT $LN303@letter_com

; 316  :                   web.diffusion_const = val;

	fld	QWORD PTR _val$[ebp]
	fstp	QWORD PTR _web+784
$LN303@letter_com:

; 317  :                 if ( web.diffusion_const == 0.0 )

	fld	QWORD PTR _web+784
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN192@letter_com

; 318  :                 web.diffusion_flag = 0;

	pop	edi
	pop	esi
	mov	DWORD PTR _web+780, 0
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN192@letter_com:
	pop	edi
	pop	esi

; 319  :                 else web.diffusion_flag = 1;

	mov	DWORD PTR _web+780, 1
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN190@letter_com:

; 320  :                 break;
; 321  : 
; 322  :          case 'G' : /* control gravity */
; 323  :                 if ( web.representation == SIMPLEX )

	cmp	DWORD PTR _web+624, 3
	jne	SHORT $LN189@letter_com

; 324  :                   { outstring(
; 325  :                       "Gravity not implemented for simplex representation.\n");

	push	OFFSET ??_C@_0DF@LMJHDGMA@Gravity?5not?5implemented?5for?5simp@
	call	_outstring
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN189@letter_com:

; 326  :                     break;
; 327  :                   }
; 328  :                 if ( web.gravflag )

	cmp	DWORD PTR _web+824, 0
	je	SHORT $LN188@letter_com

; 329  :                   sprintf(msg,"Gravity is now ON with gravitational constant %f.\n",
; 330  :                   (DOUBLE)web.grav_const);

	fld	QWORD PTR _web+832
	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0DD@LMNFIMLA@Gravity?5is?5now?5ON?5with?5gravitati@
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H
	jmp	SHORT $LN187@letter_com
$LN188@letter_com:

; 331  :                 else sprintf(msg,"Gravity is now OFF.\n");

	mov	edx, DWORD PTR _msg
	push	OFFSET ??_C@_0BF@NPMJDBIB@Gravity?5is?5now?5OFF?4?6?$AA@
	push	edx
	call	_sprintf
	add	esp, 8
$LN187@letter_com:

; 332  :                 outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring

; 333  :                 prompt("Enter new constant (0 for OFF): ",response,sizeof(response));

	push	140					; 0000008cH
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CB@HCNCBBOM@Enter?5new?5constant?5?$CI0?5for?5OFF?$CJ?3?5@
	call	_prompt

; 334  :                 if ( logfd ) fprintf(logfd,"%s\n",response);

	mov	eax, DWORD PTR _logfd
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN186@letter_com
	lea	edx, DWORD PTR _response$[ebp]
	push	edx
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN186@letter_com:

; 335  :                 if ( const_expr(response,&val) > 0 )

	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	call	_const_expr
	fldz
	add	esp, 8
	test	eax, eax
	jle	SHORT $LN304@letter_com

; 336  :                 { web.grav_const = val;

	fld	QWORD PTR _val$[ebp]

; 337  :                   if ( web.grav_const != 0.0 ) web.gravflag = 1;

	mov	DWORD PTR _web+824, 1
	fst	QWORD PTR _web+832
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN304@letter_com

; 338  :                   else web.gravflag = 0;

	mov	DWORD PTR _web+824, 0
$LN304@letter_com:

; 339  :                 }
; 340  :                 if (gravity_quantity_num >= 0 )

	mov	eax, DWORD PTR _gravity_quantity_num
	test	eax, eax
	js	SHORT $LN327@letter_com

; 341  :                   GEN_QUANT(gravity_quantity_num)->modulus =
; 342  :                   web.gravflag ? web.grav_const : 0.0;

	cmp	DWORD PTR _web+824, 0
	je	SHORT $LN257@letter_com
	fstp	ST(0)
	fld	QWORD PTR _web+832
$LN257@letter_com:
	mov	edx, DWORD PTR _gen_quant_list
	imul	eax, 368				; 00000170H
	fstp	QWORD PTR [eax+edx+176]

; 343  :                 recalc();

	call	_recalc
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN327@letter_com:

; 341  :                   GEN_QUANT(gravity_quantity_num)->modulus =
; 342  :                   web.gravflag ? web.grav_const : 0.0;

	fstp	ST(0)

; 343  :                 recalc();

	call	_recalc
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN181@letter_com:

; 344  :                 break;
; 345  : 
; 346  :          case 'J' : /* toggle jiggling on every move */
; 347  :                 web.jiggle_flag = !web.jiggle_flag;

	xor	eax, eax
	cmp	DWORD PTR _web+900, eax
	sete	al
	mov	DWORD PTR _web+900, eax

; 348  :                 if ( web.jiggle_flag ) 

	test	eax, eax
	je	$LN180@letter_com

; 349  :                   { outstring("Now jiggling on every move.\n");

	push	OFFSET ??_C@_0BN@BGPFIODI@Now?5jiggling?5on?5every?5move?4?6?$AA@
	call	_outstring

; 350  :                     sprintf(msg,
; 351  :                     "Enter temperature for jiggling (default %f): ",
; 352  :                       (DOUBLE)web.temperature);

	fld	QWORD PTR _web+1576
	mov	eax, DWORD PTR _msg
	push	ecx
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CO@KEJHIJDI@Enter?5temperature?5for?5jiggling?5?$CI@
	push	eax
	call	_sprintf

; 353  :                     prompt(msg,response,sizeof(response));

	mov	edx, DWORD PTR _msg
	push	140					; 0000008cH
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	push	edx
	call	_prompt

; 354  :                     if ( logfd ) fprintf(logfd,"%s\n",response);

	mov	eax, DWORD PTR _logfd
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN179@letter_com
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN179@letter_com:

; 355  :                     if ( const_expr(response,&val) > 0 )

	lea	edx, DWORD PTR _val$[ebp]
	push	edx
	lea	eax, DWORD PTR _response$[ebp]
	push	eax
	call	_const_expr
	add	esp, 8
	test	eax, eax
	jle	$LN1@letter_com

; 356  :                     web.temperature = val;

	fld	QWORD PTR _val$[ebp]
	pop	edi
	pop	esi
	fstp	QWORD PTR _web+1576
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN180@letter_com:

; 357  :                   }
; 358  :                 else outstring("Jiggling on every move disabled.\n");

	push	OFFSET ??_C@_0CC@BPFKOIKH@Jiggling?5on?5every?5move?5disabled?4@
	call	_outstring
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN176@letter_com:

; 359  :                 break;
; 360  : 
; 361  :          case 'k' : /* Magnitude of force opposing boundary short-circuiting */
; 362  :                 sprintf(msg,"Gap constant is %f.  Enter new: ",
; 363  :                     (DOUBLE)web.spring_constant); 

	fld	QWORD PTR _web+1584
	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CB@MDMJECBF@Gap?5constant?5is?5?$CFf?4?5?5Enter?5new?3?5@
	push	ecx
	call	_sprintf

; 364  :                 prompt(msg,response,sizeof(response));

	mov	eax, DWORD PTR _msg
	push	140					; 0000008cH
	lea	edx, DWORD PTR _response$[ebp]
	push	edx
	push	eax
	call	_prompt

; 365  :                 if ( logfd ) fprintf(logfd,"%s\n",response);

	mov	eax, DWORD PTR _logfd
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN175@letter_com
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN175@letter_com:

; 366  :                 if ( const_expr(response,&val) > 0 )

	lea	edx, DWORD PTR _val$[ebp]
	push	edx
	lea	eax, DWORD PTR _response$[ebp]
	push	eax
	call	_const_expr
	fld	QWORD PTR _val$[ebp]
	add	esp, 8
	test	eax, eax
	jle	SHORT $LN305@letter_com

; 367  :                   web.spring_constant = val;

	fst	QWORD PTR _web+1584
$LN305@letter_com:

; 368  :                 if ( everything_quantities_flag )

	cmp	DWORD PTR _everything_quantities_flag, 0
	je	SHORT $LN337@letter_com

; 369  :                 GEN_QUANT(gap_quantity_num)->modulus = val;

	mov	ecx, DWORD PTR _gap_quantity_num
	mov	edx, DWORD PTR _gen_quant_list
	imul	ecx, 368				; 00000170H
	fstp	QWORD PTR [ecx+edx+176]
	jmp	SHORT $LN173@letter_com
$LN337@letter_com:
	fstp	ST(0)
$LN173@letter_com:

; 370  :                 if ( web.spring_constant == 0.0 )

	fld	QWORD PTR _web+1584

; 371  :                   web.convex_flag = 0;

	mov	DWORD PTR _web+840, 0
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN171@letter_com

; 372  :                 else
; 373  :                   web.convex_flag = 1;

	mov	DWORD PTR _web+840, 1
$LN171@letter_com:

; 374  :                 recalc();

	call	_recalc
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN170@letter_com:

; 375  :                 break;
; 376  : 
; 377  :          case 'M' : /* change model type */
; 378  :                 if ( web.representation == SIMPLEX )

	cmp	DWORD PTR _web+624, 3
	jne	SHORT $LN169@letter_com

; 379  :                   { outstring(
; 380  :                     "Higher-order models not implemented for simplex representation.\n");

	push	OFFSET ??_C@_0EB@MJGDANPD@Higher?9order?5models?5not?5implemen@
	call	_outstring
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN169@letter_com:

; 381  :                     break;
; 382  :                   }
; 383  :                 change_model();

	call	_change_model

; 384  :                 recalc();

	call	_recalc
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN168@letter_com:

; 385  :                 break;
; 386  : 
; 387  :          case 'm' : /* Setting motion scale factor */
; 388  :               web.motion_flag = !web.motion_flag;

	xor	eax, eax
	cmp	DWORD PTR _web+852, eax
	sete	al

; 389  :               if ( web.motion_flag )
; 390  :               {
; 391  :                 sprintf(msg,"Enter scale factor (%g): ",(DOUBLE)web.scale);

	sub	esp, 8
	mov	DWORD PTR _web+852, eax
	test	eax, eax
	je	$LN167@letter_com
	fld	QWORD PTR _web+1512
	mov	eax, DWORD PTR _msg
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BK@MIKDNHAM@Enter?5scale?5factor?5?$CI?$CFg?$CJ?3?5?$AA@
	push	eax
	call	_sprintf

; 392  :                 prompt(msg,response,sizeof(response));

	mov	edx, DWORD PTR _msg
	push	140					; 0000008cH
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	push	edx
	call	_prompt

; 393  :                 if ( logfd ) fprintf(logfd,"%s\n",response);

	mov	eax, DWORD PTR _logfd
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN166@letter_com
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN166@letter_com:

; 394  :                 if ( const_expr(response,&val) > 0 )

	lea	edx, DWORD PTR _val$[ebp]
	push	edx
	lea	eax, DWORD PTR _response$[ebp]
	push	eax
	call	_const_expr
	add	esp, 8
	test	eax, eax
	jle	$LN1@letter_com

; 395  :                   web.scale = val;

	fld	QWORD PTR _val$[ebp]
	pop	edi
	pop	esi
	fstp	QWORD PTR _web+1512
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN167@letter_com:

; 396  :               }
; 397  :               else
; 398  :               { energy_init = 0;
; 399  :                 sprintf(msg,"Scale optimizing. Enter scale limit (%g): ",(DOUBLE)web.maxscale);

	fld	QWORD PTR _web+1528
	mov	ecx, DWORD PTR _msg
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CL@GGIKDPMC@Scale?5optimizing?4?5Enter?5scale?5li@
	push	ecx
	mov	DWORD PTR _energy_init, 0
	call	_sprintf

; 400  :                 prompt(msg,response,sizeof(response));

	mov	eax, DWORD PTR _msg
	push	140					; 0000008cH
	lea	edx, DWORD PTR _response$[ebp]
	push	edx
	push	eax
	call	_prompt

; 401  :                 if ( logfd ) fprintf(logfd,"%s\n",response);

	mov	eax, DWORD PTR _logfd
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN163@letter_com
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN163@letter_com:

; 402  :                 if ( const_expr(response,&val) > 0 )

	lea	edx, DWORD PTR _val$[ebp]
	push	edx
	lea	eax, DWORD PTR _response$[ebp]
	push	eax
	call	_const_expr
	add	esp, 8
	test	eax, eax
	jle	SHORT $LN306@letter_com

; 403  :                   web.maxscale = val;

	fld	QWORD PTR _val$[ebp]
	fst	QWORD PTR _web+1528
	jmp	SHORT $LN162@letter_com
$LN306@letter_com:
	fld	QWORD PTR _web+1528
$LN162@letter_com:

; 404  :                 if ( web.scale > web.maxscale )

	fcom	QWORD PTR _web+1512
	fnstsw	ax
	test	ah, 5
	jp	$LN359@letter_com

; 405  :                   web.scale = web.maxscale;

	pop	edi
	fstp	QWORD PTR _web+1512
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN160@letter_com:

; 406  :               }
; 407  :               break;
; 408  : 
; 409  :          case 'p' : /* Ambient pressure for compressible volumes */ 
; 410  :                 if ( web.bodycount == 0 )

	xor	ebx, ebx
	cmp	DWORD PTR _web+1500, ebx
	jne	SHORT $LN159@letter_com

; 411  :                   { outstring("Can't do pressure without bodies.\n");

	push	OFFSET ??_C@_0CD@HAKNIIEA@Can?8t?5do?5pressure?5without?5bodies@
	call	_outstring
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN159@letter_com:

; 412  :                     break;
; 413  :                   }
; 414  :                 sprintf(msg,"Pressure now %f\n",(DOUBLE)web.pressure);

	fld	QWORD PTR _web+1536
	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BB@CFPANFKA@Pressure?5now?5?$CFf?6?$AA@
	push	ecx
	call	_sprintf

; 415  :                 outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 416  :                 prompt("Enter pressure (0 for rigid volumes): ",response,sizeof(response));

	push	140					; 0000008cH
	lea	eax, DWORD PTR _response$[ebp]
	push	eax
	push	OFFSET ??_C@_0CH@MHPIELFJ@Enter?5pressure?5?$CI0?5for?5rigid?5volu@
	call	_prompt

; 417  :                 if ( logfd ) fprintf(logfd,"%s\n",response);

	mov	eax, DWORD PTR _logfd
	add	esp, 32					; 00000020H
	cmp	eax, ebx
	je	SHORT $LN158@letter_com
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN158@letter_com:

; 418  :                 if ( const_expr(response,&val) > 0 )

	lea	edx, DWORD PTR _val$[ebp]
	push	edx
	lea	eax, DWORD PTR _response$[ebp]
	push	eax
	call	_const_expr
	add	esp, 8
	test	eax, eax
	jle	SHORT $LN307@letter_com

; 419  :                   web.pressure = val;

	fld	QWORD PTR _val$[ebp]
	fstp	QWORD PTR _web+1536
$LN307@letter_com:

; 420  :                 if ( web.pressure > 0.00000001 )

	fld	QWORD PTR __real@3e45798ee2308c3a
	fcomp	QWORD PTR _web+1536
	fnstsw	ax
	test	ah, 5
	jp	$LN156@letter_com

; 421  :                 {
; 422  :                   if ( !web.full_flag && !valid_id(web.outside_body) )

	cmp	DWORD PTR _web+864, ebx
	jne	SHORT $LN312@letter_com
	test	DWORD PTR _web+1504, 268435456		; 10000000H
	jne	SHORT $LN312@letter_com

; 423  :                     add_outside();

	call	_add_outside
$LN312@letter_com:

; 424  :                   web.projection_flag = 0;

	mov	DWORD PTR _web+872, ebx

; 425  :                   web.pressure_flag = 1;

	mov	DWORD PTR _web+868, 1

; 426  :                   if ( everything_quantities_flag )

	cmp	DWORD PTR _everything_quantities_flag, ebx
	je	SHORT $LN148@letter_com

; 427  :                   { FOR_ALL_BODIES(b_id) 

	mov	ecx, DWORD PTR _web+384
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN148@letter_com
	mov	edi, DWORD PTR _web+348
$LL313@letter_com:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+edi]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN152@letter_com

; 428  :                       create_pressure_quant(b_id);

	push	ecx
	call	_create_pressure_quant
	mov	edi, DWORD PTR _web+348
	add	esp, 4
$LN152@letter_com:

; 427  :                   { FOR_ALL_BODIES(b_id) 

	mov	ecx, DWORD PTR [esi+edi]
	mov	ecx, DWORD PTR [ecx]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LL313@letter_com

; 435  :                 }
; 436  :                 recalc();

	call	_recalc
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN156@letter_com:

; 429  :                   }
; 430  :                 }
; 431  :                 else
; 432  :                 {
; 433  :                   web.projection_flag = 1;

	mov	DWORD PTR _web+872, 1

; 434  :                   web.pressure_flag = 0;

	mov	DWORD PTR _web+868, ebx
$LN148@letter_com:

; 435  :                 }
; 436  :                 recalc();

	call	_recalc
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN147@letter_com:

; 437  :                 break;
; 438  : 
; 439  :           case 'Q': /* quantities */
; 440  :                 report_quantities();

	call	_report_quantities
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN146@letter_com:

; 441  :                 break;
; 442  : 
; 443  :           case 'T': /* profiling times */
; 444  :                 report_times();

	call	_report_times
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN145@letter_com:

; 445  :                 break;
; 446  : 
; 447  :           case 'W': /* homothety toggle */
; 448  :                 web.homothety = !web.homothety;

	xor	eax, eax
	cmp	DWORD PTR _web+904, eax
	sete	al
	mov	DWORD PTR _web+904, eax

; 449  :                 sprintf(msg,"Homothety adjustment is %s.\n",
; 450  :                   web.homothety ? "ON" : "OFF");

	test	eax, eax
	mov	eax, OFFSET ??_C@_02BFICIOJL@ON?$AA@
	jne	SHORT $LN259@letter_com
	mov	eax, OFFSET ??_C@_03MPPIHBHJ@OFF?$AA@
$LN259@letter_com:
	mov	edx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0BN@BBKJHOFD@Homothety?5adjustment?5is?5?$CFs?4?6?$AA@
	push	edx
	call	_sprintf

; 451  :                 outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 16					; 00000010H

; 452  :                 if ( web.homothety )

	cmp	DWORD PTR _web+904, 0
	je	$LN1@letter_com

; 453  :                 { sprintf(msg,"Enter target size (%g): ",
; 454  :                      (DOUBLE)homothety_target);

	fld	QWORD PTR _homothety_target
	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BJ@NLHBFEJL@Enter?5target?5size?5?$CI?$CFg?$CJ?3?5?$AA@
	push	ecx
	call	_sprintf

; 455  :                   prompt(msg,response,sizeof(response));

	mov	eax, DWORD PTR _msg
	push	140					; 0000008cH
	lea	edx, DWORD PTR _response$[ebp]
	push	edx
	push	eax
	call	_prompt

; 456  :                   const_expr(response,&homothety_target);

	lea	ecx, DWORD PTR _response$[ebp]
	push	OFFSET _homothety_target
	push	ecx
	call	_const_expr

; 457  :                   if ( logfd ) fprintf(logfd,"%f\n",(DOUBLE)homothety_target);

	mov	eax, DWORD PTR _logfd
	add	esp, 36					; 00000024H
	test	eax, eax
	je	$LN1@letter_com
	fld	QWORD PTR _homothety_target
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_03PPOCCAPH@?$CFf?6?$AA@
	push	eax
	call	_fprintf
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN142@letter_com:

; 458  :                 }
; 459  :                 break;
; 460  : 
; 461  :          /* Surface modification */
; 462  : 
; 463  :          case 'g' :  /* one gradient descent iteration */
; 464  : #ifdef __L_EVOLVER__
; 465  : 			if (l_evolver_break)

	cmp	DWORD PTR _l_evolver_break, 0
	je	SHORT $LN141@letter_com

; 466  : 			{
; 467  : 				  breakflag = BREAKABORT;

	pop	edi
	pop	esi
	mov	DWORD PTR _breakflag, 5

; 468  : 				  l_evolver_break= FALSE;

	mov	DWORD PTR _l_evolver_break, 0
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN141@letter_com:

; 469  : 			}
; 470  : #endif
; 471  :                  if ( breakflag ) break;

	cmp	DWORD PTR _breakflag, 0
	jne	$LN1@letter_com

; 472  :                  iterate();

	call	_iterate
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN139@letter_com:

; 473  :              
; 474  :                  break;
; 475  : 
; 476  :         case 'j' : /* jiggling */
; 477  :             sprintf(msg,"Enter temperature for jiggling (default %f): ",
; 478  :                  (DOUBLE)web.temperature);

	fld	QWORD PTR _web+1576
	mov	edx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CO@KEJHIJDI@Enter?5temperature?5for?5jiggling?5?$CI@
	push	edx
	call	_sprintf

; 479  :             prompt(msg,response,sizeof(response));

	mov	ecx, DWORD PTR _msg
	push	140					; 0000008cH
	lea	eax, DWORD PTR _response$[ebp]
	push	eax
	push	ecx
	call	_prompt

; 480  :             if ( logfd ) fprintf(logfd,"%s\n",response);

	mov	eax, DWORD PTR _logfd
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN138@letter_com
	lea	edx, DWORD PTR _response$[ebp]
	push	edx
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN138@letter_com:

; 481  :             if ( const_expr(response,&val) > 0 )

	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	call	_const_expr
	add	esp, 8
	test	eax, eax
	jle	SHORT $LN137@letter_com

; 482  :               web.temperature = val;

	fld	QWORD PTR _val$[ebp]
	fstp	QWORD PTR _web+1576
$LN137@letter_com:

; 483  :             jiggle();

	call	_jiggle

; 484  :             recalc();

	call	_recalc
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN136@letter_com:

; 485  :             break;
; 486  : 
; 487  :          case 'K' : /* skinny triangle long edge subdivide */
; 488  :                 if ( web.representation == SIMPLEX )

	cmp	DWORD PTR _web+624, 3
	jne	SHORT $LN295@letter_com
$LN372@letter_com:

; 489  :                 { outstring(
; 490  :                   "Not implemented for simplex representation.\n");

	push	OFFSET ??_C@_0CN@GEHAJOFP@Not?5implemented?5for?5simplex?5repr@
	call	_outstring
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN295@letter_com:

; 491  :                   break;

	mov	bl, 104					; 00000068H
	npad	1
$LL134@letter_com:

; 492  :                 }
; 493  :                 for (;;)
; 494  :                 {
; 495  :                   prompt("Enter minimum acute angle desired(h for histogram): ",
; 496  :                        response,sizeof(response));

	push	140					; 0000008cH
	lea	edx, DWORD PTR _response$[ebp]
	push	edx
	push	OFFSET ??_C@_0DF@KOJFNHHK@Enter?5minimum?5acute?5angle?5desire@
	call	_prompt

; 497  :                   if ( logfd ) fprintf(logfd,"%s\n",response);

	mov	eax, DWORD PTR _logfd
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN132@letter_com
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN132@letter_com:

; 498  :                   if ( tolower(response[0]) == 'h' )

	movsx	edx, BYTE PTR _response$[ebp]
	cmp	BYTE PTR _kb_lower_array[edx], bl
	jne	SHORT $LN131@letter_com

; 499  :                      skinny_histogram();

	call	_skinny_histogram

; 500  :                   else break;
; 501  :                 }

	jmp	SHORT $LL134@letter_com
$LN131@letter_com:

; 502  :                 if ( const_expr(response,&val) > 0 )

	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	call	_const_expr
	add	esp, 8
	test	eax, eax
	jle	$LN1@letter_com

; 503  :                 { 
; 504  :                   if ( web.counts_reported & facet_refine_count_bit )

	test	BYTE PTR _web+5520, 32			; 00000020H
	je	SHORT $LN128@letter_com

; 505  :                      web.facet_refine_count = 0;

	mov	DWORD PTR _web+5448, 0
$LN128@letter_com:

; 506  :                   sprintf(msg,"Edges refined: %d\n",
; 507  :                      web.facet_refine_count += n = skinny(val));

	fld	QWORD PTR _val$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_skinny
	mov	ecx, DWORD PTR _web+5448
	mov	edx, DWORD PTR _msg
	add	ecx, eax
	push	ecx
	push	OFFSET ??_C@_0BD@LKFIBJDB@Edges?5refined?3?5?$CFd?6?$AA@
	push	edx
	mov	DWORD PTR _web+5448, ecx
	call	_sprintf

; 508  :                   web.counts_reported |= facet_refine_count_bit; 
; 509  :                   outstring(msg);

	mov	eax, DWORD PTR _msg
	or	DWORD PTR _web+5520, 32			; 00000020H
	push	eax
	call	_outstring
	add	esp, 24					; 00000018H

; 510  :                   recalc();

	call	_recalc
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN296@letter_com:

; 511  :                 }
; 512  :                 break;

	mov	bl, 104					; 00000068H
	npad	4
$LL126@letter_com:

; 513  : 
; 514  : 
; 515  :          case 'l' : /* long edge subdivide */
; 516  :               for (;;)
; 517  :                {
; 518  :                  prompt("Enter maximum edge length desired(h for histogram): ",response,sizeof(response));

	push	140					; 0000008cH
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DF@MKDLKPPM@Enter?5maximum?5edge?5length?5desire@
	call	_prompt

; 519  :                  if ( logfd ) fprintf(logfd,"%s\n",response);

	mov	eax, DWORD PTR _logfd
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN124@letter_com
	lea	edx, DWORD PTR _response$[ebp]
	push	edx
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN124@letter_com:

; 520  :                  if ( tolower(response[0]) == 'h' )

	movsx	eax, BYTE PTR _response$[ebp]
	cmp	BYTE PTR _kb_lower_array[eax], bl
	jne	SHORT $LN123@letter_com

; 521  :                     edge_histogram();

	call	_edge_histogram

; 522  :                  else break;
; 523  :                }

	jmp	SHORT $LL126@letter_com
$LN123@letter_com:

; 524  :               if ( const_expr(response,&val) > 0 )

	lea	ecx, DWORD PTR _val$[ebp]
	push	ecx
	lea	edx, DWORD PTR _response$[ebp]
	push	edx
	call	_const_expr
	add	esp, 8
	test	eax, eax
	jle	$LN1@letter_com

; 525  :                { web.max_len = val;

	fld	QWORD PTR _val$[ebp]

; 526  :                  if ( web.counts_reported & edge_refine_count_bit )

	mov	ebx, 16					; 00000010H
	fst	QWORD PTR _web+1560
	test	BYTE PTR _web+5520, bl
	je	SHORT $LN120@letter_com

; 527  :                    web.equi_count = 0;

	mov	DWORD PTR _web+5432, 0
$LN120@letter_com:

; 528  :                  sprintf(msg,"Edges refined: %d\n",
; 529  :                      web.edge_refine_count += n = articulate(web.max_len));

	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_articulate
	mov	esi, eax
	mov	eax, DWORD PTR _web+5444
	add	eax, esi
	push	eax
	mov	DWORD PTR _web+5444, eax
	push	OFFSET ??_C@_0BD@LKFIBJDB@Edges?5refined?3?5?$CFd?6?$AA@
$LN373@letter_com:
	mov	eax, DWORD PTR _msg
	push	eax
	call	_sprintf

; 530  :                  outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
$LN376@letter_com:
	call	_outstring
	add	esp, 24					; 00000018H

; 531  :                  web.counts_reported |= edge_refine_count_bit;

	or	DWORD PTR _web+5520, ebx
$LN374@letter_com:

; 532  :                  if ( n > 0 ) recalc();

	test	esi, esi
	jle	$LN1@letter_com
$LN375@letter_com:
	call	_recalc
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN118@letter_com:

; 533  :                }
; 534  :               break;
; 535  : 
; 536  :          case 'N' : /* Normalize target volumes to current volumes */
; 537  :                 FOR_ALL_BODIES(b_id)

	mov	edi, DWORD PTR _web+384
	test	edi, 268435456				; 10000000H
	je	SHORT $LN115@letter_com
	mov	edx, DWORD PTR _web+348
	npad	1
$LL117@letter_com:
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+edx]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN116@letter_com

; 538  :                   set_body_fixvol(b_id,get_body_volume(b_id));

	push	edi
	call	_get_body_volume
	push	ecx
	fstp	QWORD PTR [esp]
	push	edi
	call	_set_body_fixvol
	mov	edx, DWORD PTR _web+348
	add	esp, 12					; 0000000cH
$LN116@letter_com:

; 533  :                }
; 534  :               break;
; 535  : 
; 536  :          case 'N' : /* Normalize target volumes to current volumes */
; 537  :                 FOR_ALL_BODIES(b_id)

	mov	eax, DWORD PTR [esi+edx]
	mov	edi, DWORD PTR [eax]
	test	edi, 268435456				; 10000000H
	jne	SHORT $LL117@letter_com
$LN115@letter_com:

; 539  :                 outstring("Target volumes adjusted.\n");

	push	OFFSET ??_C@_0BK@IGMMJBCJ@Target?5volumes?5adjusted?4?6?$AA@
	call	_outstring
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN112@letter_com:

; 540  :                 break;
; 541  : 
; 542  :          case 'n' : /* notching ridges and valleys */
; 543  :                 if ( web.representation == SIMPLEX )

	cmp	DWORD PTR _web+624, 3

; 544  :                  { outstring(
; 545  :                      "Not implemented for simplex representation.\n");
; 546  :                    break;

	je	$LN372@letter_com
	mov	esi, 1
	mov	bl, 104					; 00000068H
$LL110@letter_com:

; 547  :                  }
; 548  :                 for (;;)
; 549  :                 {
; 550  :                   prompt("Enter maximum angle(radians) between normals(h for histogram): ",response,sizeof(response)); 

	push	140					; 0000008cH
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	push	OFFSET ??_C@_0EA@JDOPAEKK@Enter?5maximum?5angle?$CIradians?$CJ?5bet@
	call	_prompt

; 551  :                   if ( logfd ) fprintf(logfd,"%s\n",response);

	mov	eax, DWORD PTR _logfd
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN108@letter_com
	lea	edx, DWORD PTR _response$[ebp]
	push	edx
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN108@letter_com:

; 552  :                   if ( tolower(response[0]) == 'h' )

	movsx	eax, BYTE PTR _response$[ebp]
	cmp	BYTE PTR _kb_lower_array[eax], bl
	jne	SHORT $LN107@letter_com

; 553  :                     { if ( web.representation == STRING )

	cmp	DWORD PTR _web+624, esi
	jne	SHORT $LN106@letter_com

; 554  :                         command("histogram(vertex,dihedral)",NO_HISTORY);

	push	0
	push	OFFSET ??_C@_0BL@KKKCODIA@histogram?$CIvertex?0dihedral?$CJ?$AA@
	call	_command
	add	esp, 8
	jmp	SHORT $LL110@letter_com
$LN106@letter_com:

; 555  :                       else ridge_histogram();

	call	_ridge_histogram

; 556  :                     }
; 557  :                   else break;
; 558  :                 }

	jmp	SHORT $LL110@letter_com
$LN107@letter_com:

; 559  :                 if ( const_expr(response,&val) > 0 )

	lea	ecx, DWORD PTR _val$[ebp]
	push	ecx
	lea	edx, DWORD PTR _response$[ebp]
	push	edx
	call	_const_expr
	add	esp, 8
	test	eax, eax
	jle	$LN1@letter_com

; 560  :                   { if ( web.representation == STRING )
; 561  :                     { sprintf(msg,
; 562  :                         "refine edge ee where max(ee.vertex,dihedral) > %f",
; 563  :                            (DOUBLE)val);

	fld	QWORD PTR _val$[ebp]
	cmp	DWORD PTR _web+624, esi
	jne	SHORT $LN102@letter_com
	mov	eax, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0DC@JKPEEAKK@refine?5edge?5ee?5where?5max?$CIee?4vert@
	push	eax
	call	_sprintf

; 564  :                       command(msg,NO_HISTORY); 

	mov	ecx, DWORD PTR _msg
	push	0
	push	ecx
	call	_command

; 565  : 					  web.notch_count = web.where_count;

	mov	edx, DWORD PTR _web+5496
	add	esp, 24					; 00000018H
	pop	edi
	pop	esi
	mov	DWORD PTR _web+5516, edx
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN102@letter_com:

; 566  :                     }
; 567  :                     else
; 568  :                     { web.max_angle = val;

	fst	QWORD PTR _web+1568

; 569  :                       if ( web.max_angle <= 0.0 ) break;

	fldz
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 1
	je	$LN359@letter_com

; 570  :                       if ( web.counts_reported & notch_count_bit )

	mov	ebx, 64					; 00000040H
	test	BYTE PTR _web+5520, bl
	je	SHORT $LN99@letter_com

; 571  :                         web.equi_count = 0;

	mov	DWORD PTR _web+5432, 0
$LN99@letter_com:

; 572  :                       sprintf(msg,"Number of edges notched: %d\n",
; 573  :                       web.notch_count += n = ridge_notcher(web.max_angle));

	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_ridge_notcher
	mov	esi, eax
	mov	eax, DWORD PTR _web+5516
	add	eax, esi
	push	eax
	mov	DWORD PTR _web+5516, eax
	push	OFFSET ??_C@_0BN@KADAPAAJ@Number?5of?5edges?5notched?3?5?$CFd?6?$AA@

; 574  :                       outstring(msg);
; 575  :                       web.counts_reported |= notch_count_bit;
; 576  :                       if ( n > 0 ) recalc();
; 577  :                     }
; 578  :                   }
; 579  :                 break;

	jmp	$LN373@letter_com
$LN97@letter_com:

; 580  : 
; 581  :          case 'O' : /* pop nonminimal edges */
; 582  :                 if ( web.representation == SIMPLEX )

	mov	eax, DWORD PTR _web+624
	cmp	eax, 3
	jne	SHORT $LN96@letter_com

; 583  :                 { outstring(
; 584  :                     "Edge popping not implemented for simplex representation.\n");

	push	OFFSET ??_C@_0DK@CIEKAHBB@Edge?5popping?5not?5implemented?5for@
	call	_outstring
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN96@letter_com:

; 585  :                   break;
; 586  :                 }
; 587  :                 if ( web.representation == STRING )

	cmp	eax, 1
	jne	SHORT $LN95@letter_com

; 588  :                 { 
; 589  :                   if ( web.counts_reported & vertex_pop_count_bit )

	mov	edi, 2048				; 00000800H
	test	DWORD PTR _web+5520, edi
	je	SHORT $LN94@letter_com

; 590  :                     web.vertex_pop_count = 0;

	mov	DWORD PTR _web+5476, 0
$LN94@letter_com:

; 591  :                   web.vertex_pop_count += n = verpop_str();

	call	_verpop_str

; 592  :                   sprintf(msg,"Vertices popped: %d\n",web.vertex_pop_count);

	mov	edx, DWORD PTR _msg
	mov	esi, eax
	mov	eax, DWORD PTR _web+5476
	add	eax, esi
	push	eax
	push	OFFSET ??_C@_0BF@CLGHNEFK@Vertices?5popped?3?5?$CFd?6?$AA@
	push	edx
	mov	DWORD PTR _web+5476, eax
	call	_sprintf

; 593  :                   outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax

; 602  :                   outstring(msg);

	call	_outstring
	add	esp, 16					; 00000010H

; 603  :                   web.counts_reported |= edge_pop_count_bit;

	or	DWORD PTR _web+5520, edi

; 604  :                 }
; 605  :                 if ( n > 0 ) recalc();
; 606  :                 break;

	jmp	$LN374@letter_com
$LN95@letter_com:

; 594  :                   web.counts_reported |= vertex_pop_count_bit;
; 595  :                 }
; 596  :                 else
; 597  :                 { 
; 598  :                   if ( web.counts_reported & edge_pop_count_bit )

	mov	edi, 4096				; 00001000H
	test	DWORD PTR _web+5520, edi
	je	SHORT $LN92@letter_com

; 599  :                     web.edge_pop_count = 0;

	mov	DWORD PTR _web+5480, 0
$LN92@letter_com:

; 600  :                   web.edge_pop_count = n = edgepop_film();

	call	_edgepop_film

; 601  :                   sprintf(msg,"Edges popped: %d\n",web.edge_pop_count);

	mov	ecx, DWORD PTR _msg
	mov	esi, eax
	push	esi
	push	OFFSET ??_C@_0BC@BGIMLONO@Edges?5popped?3?5?$CFd?6?$AA@
	push	ecx
	mov	DWORD PTR _web+5480, esi
	call	_sprintf

; 602  :                   outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 16					; 00000010H

; 603  :                   web.counts_reported |= edge_pop_count_bit;

	or	DWORD PTR _web+5520, edi

; 604  :                 }
; 605  :                 if ( n > 0 ) recalc();
; 606  :                 break;

	jmp	$LN374@letter_com
$LN90@letter_com:

; 607  : 
; 608  :          case 'o' : /* pop nonminimal edges and vertices */
; 609  :                 if ( web.representation == SIMPLEX )

	mov	eax, DWORD PTR _web+624
	cmp	eax, 3
	jne	SHORT $LN89@letter_com

; 610  :                 { outstring(
; 611  :                    "Vertex popping not implemented for simplex representation.\n");

	push	OFFSET ??_C@_0DM@GEICAECG@Vertex?5popping?5not?5implemented?5f@
	call	_outstring
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN89@letter_com:

; 612  :                   break;
; 613  :                 }
; 614  :                 if ( web.representation == STRING )

	cmp	eax, 1
	jne	SHORT $LN88@letter_com

; 615  :                   web.vertex_pop_count = n = verpop_str();

	call	_verpop_str

; 616  :                 else

	jmp	SHORT $LN368@letter_com
$LN88@letter_com:

; 617  :                   web.vertex_pop_count = n = popfilm();

	call	_popfilm
$LN368@letter_com:

; 618  :                 if ( web.counts_reported & vertex_pop_count_bit )

	mov	edi, 2048				; 00000800H
	mov	esi, eax
	mov	DWORD PTR _web+5476, esi
	test	DWORD PTR _web+5520, edi
	je	SHORT $LN86@letter_com

; 619  :                   web.edge_pop_count = 0;

	mov	DWORD PTR _web+5480, 0
$LN86@letter_com:

; 620  :                 sprintf(msg,"Vertices popped: %d\n",web.vertex_pop_count);

	mov	eax, DWORD PTR _msg
	push	esi
	push	OFFSET ??_C@_0BF@CLGHNEFK@Vertices?5popped?3?5?$CFd?6?$AA@
	push	eax
	call	_sprintf

; 621  :                 outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 16					; 00000010H

; 622  :                 web.counts_reported |= vertex_pop_count_bit;

	or	DWORD PTR _web+5520, edi

; 623  :                 if ( n > 0 ) recalc();
; 624  :                 break;

	jmp	$LN374@letter_com
$LN84@letter_com:

; 625  : 
; 626  :          case 'r' : refine(); energy_init = 0;

	call	_refine
	mov	DWORD PTR _energy_init, 0

; 627  :                 memory_report();

	call	_memory_report

; 628  :                 web.min_area /= 4;

	fld	QWORD PTR _web+1544
	fmul	QWORD PTR __real@3fd0000000000000
	fstp	QWORD PTR _web+1544

; 629  :                 web.max_len /= 2;

	fld	QWORD PTR _web+1560
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _web+1560

; 630  :                 web.min_length /= 2;

	fmul	QWORD PTR _web+1552
	fstp	QWORD PTR _web+1552

; 631  :                 recalc();
; 632  :                 break;

	jmp	$LN375@letter_com
$LN299@letter_com:
	mov	bl, 104					; 00000068H
	npad	3
$LL82@letter_com:

; 633  : 
; 634  :          case 't' : /* tiny edge subdivide */
; 635  :                for (;;)
; 636  :                {
; 637  :                  prompt("Enter minimum edge length desired(h for histogram): ",response,sizeof(response));

	push	140					; 0000008cH
	lea	edx, DWORD PTR _response$[ebp]
	push	edx
	push	OFFSET ??_C@_0DF@MEMPCBIC@Enter?5minimum?5edge?5length?5desire@
	call	_prompt

; 638  :                  if ( logfd ) fprintf(logfd,"%s\n",response);

	mov	eax, DWORD PTR _logfd
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN80@letter_com
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN80@letter_com:

; 639  :                  if ( tolower(response[0]) == 'h' )

	movsx	edx, BYTE PTR _response$[ebp]
	cmp	BYTE PTR _kb_lower_array[edx], bl
	jne	SHORT $LN79@letter_com

; 640  :                     edge_histogram();

	call	_edge_histogram

; 641  :                  else break;
; 642  :                }

	jmp	SHORT $LL82@letter_com
$LN79@letter_com:

; 643  :                web.min_length = 0.0;

	fldz

; 644  :                if ( const_expr(response,&val) > 0 )

	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	fstp	QWORD PTR _web+1552
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	call	_const_expr
	add	esp, 8
	test	eax, eax
	jle	$LN1@letter_com

; 645  :                   web.min_length = val;

	fld	QWORD PTR _val$[ebp]
	fst	QWORD PTR _web+1552

; 646  :                else break;
; 647  :                if ( web.min_length <= 0.0 ) break;

	fldz
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 1
	je	$LN359@letter_com

; 648  :                if ( web.counts_reported & edge_delete_count_bit )

	test	BYTE PTR _web+5520, 4
	je	SHORT $LN74@letter_com

; 649  :                    web.edge_delete_count = 0;

	mov	DWORD PTR _web+5436, 0
$LN74@letter_com:

; 650  :                sprintf(msg,"Deleted edges: %d\n",
; 651  :                   web.edge_delete_count += n = edgeweed(web.min_length));

	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_edgeweed
	mov	edx, DWORD PTR _msg
	mov	esi, eax
	mov	eax, DWORD PTR _web+5436
	add	eax, esi
	push	eax
	push	OFFSET ??_C@_0BD@LHJNONFJ@Deleted?5edges?3?5?$CFd?6?$AA@
	push	edx
	mov	DWORD PTR _web+5436, eax
	call	_sprintf

; 652  :                outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 24					; 00000018H

; 653  :                web.counts_reported |= edge_delete_count_bit;

	or	DWORD PTR _web+5520, 4

; 654  :                if ( n > 0 ) recalc();
; 655  :                break;

	jmp	$LN374@letter_com
$LN72@letter_com:

; 656  : 
; 657  :          case 'U' : /* conjugate gradient */
; 658  :                old = conj_grad_flag;
; 659  :                if ( conj_grad_flag )

	xor	esi, esi
	cmp	DWORD PTR _conj_grad_flag, esi
	je	SHORT $LN71@letter_com

; 660  :                { if ( cg_hvector ) myfree((char *)cg_hvector);

	mov	eax, DWORD PTR _cg_hvector
	cmp	eax, esi
	je	SHORT $LN70@letter_com
	push	eax
	call	_myfree
	add	esp, 4
$LN70@letter_com:

; 661  :                  cg_hvector = NULL;
; 662  :                  cg_oldsum = 0.0;

	fldz

; 663  :                  conj_grad_flag = 0;
; 664  :                  outstring("Conjugate gradient now OFF.");

	push	OFFSET ??_C@_0BM@ELOHAFKC@Conjugate?5gradient?5now?5OFF?4?$AA@
	fstp	QWORD PTR _cg_oldsum
	mov	DWORD PTR _cg_hvector, esi
	mov	DWORD PTR _conj_grad_flag, esi
	call	_outstring

; 665  :                  if ( old ) outstring(" (was on)\n");

	push	OFFSET ??_C@_0L@BBCJLGBA@?5?$CIwas?5on?$CJ?6?$AA@
	call	_outstring
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN71@letter_com:

; 666  : 	         else outstring(" (was off)\n");
; 667  :                }
; 668  :                else
; 669  :                { conj_grad_flag = 1;
; 670  :                  outstring("Conjugate gradient now ON.");

	push	OFFSET ??_C@_0BL@JMDAFIPN@Conjugate?5gradient?5now?5ON?4?$AA@
	mov	DWORD PTR _conj_grad_flag, 1
	call	_outstring

; 671  :                  if ( old ) outstring(" (was on)\n");
; 672  : 	         else outstring(" (was off)\n");

	push	OFFSET ??_C@_0M@COEFCKEL@?5?$CIwas?5off?$CJ?6?$AA@
	call	_outstring
	add	esp, 8

; 673  :                  reset_conj_grad();

	call	_reset_conj_grad

; 674  :                  if ( web.motion_flag )

	cmp	DWORD PTR _web+852, esi
	je	$LN1@letter_com

; 675  :                     kb_error(1639,"Fixed scale is ON!  Probably not a good idea with conjugate gradient.\n",WARNING);

	push	2
	push	OFFSET ??_C@_0EH@OAJIILDD@Fixed?5scale?5is?5ON?$CB?5?5Probably?5not@
	push	1639					; 00000667H
	call	_kb_error
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN63@letter_com:

; 676  : 
; 677  :                }
; 678  :                break;
; 679  : 
; 680  :          case 'u' : /* equiangulate */
; 681  :                 if ( web.counts_reported & equi_count_bit )

	test	BYTE PTR _web+5520, 1
	je	SHORT $LN62@letter_com

; 682  :                    web.equi_count = 0;

	mov	DWORD PTR _web+5432, 0
$LN62@letter_com:

; 683  :                 sprintf(msg,"Edges switched in equiangulation: %d\n",
; 684  :                   web.equi_count += n = equiangulate() );

	call	_equiangulate
	mov	ecx, DWORD PTR _msg
	mov	esi, eax
	mov	eax, DWORD PTR _web+5432
	add	eax, esi
	push	eax
	push	OFFSET ??_C@_0CG@NHDDACLM@Edges?5switched?5in?5equiangulation@
	push	ecx
	mov	DWORD PTR _web+5432, eax
	call	_sprintf

; 685  :                 web.counts_reported |= equi_count_bit;
; 686  :                 outstring(msg);

	mov	edx, DWORD PTR _msg
	or	DWORD PTR _web+5520, 1
	push	edx
	call	_outstring
	add	esp, 16					; 00000010H

; 687  :                 if ( n > 0 )

	test	esi, esi
	jle	$LN1@letter_com

; 688  :                 { recalc();

	call	_recalc

; 689  :                   if ( web.torus_flag )

	cmp	DWORD PTR _web+860, 0
	je	$LN1@letter_com

; 690  :                     fix_volconst();

	call	_fix_volconst
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN59@letter_com:

; 691  :                 }
; 692  :                 break;
; 693  : 
; 694  :          case 'V' : /* move vertex to average of neighbors */
; 695  :                 vertex_average(VOLKEEP);

	push	1
	call	_vertex_average

; 696  :                 outstring("Vertex averaging done.\n");

	push	OFFSET ??_C@_0BI@DCKMBCPP@Vertex?5averaging?5done?4?6?$AA@
	call	_outstring
	add	esp, 8

; 697  :                 recalc();
; 698  :                 break;

	jmp	$LN375@letter_com
$LN58@letter_com:

; 699  : 
; 700  :          case 'w' : /* weed small triangles */
; 701  :                 if ( web.representation == SIMPLEX )

	cmp	DWORD PTR _web+624, 3
	jne	SHORT $LN300@letter_com

; 702  :                 { outstring(
; 703  :             "Triangle weeding not implemented for simplex representation.\n");

	push	OFFSET ??_C@_0DO@IFFIBCCN@Triangle?5weeding?5not?5implemented@
	call	_outstring
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN300@letter_com:

; 704  :                   break;

	mov	bl, 104					; 00000068H
	npad	11
$LL56@letter_com:

; 705  :                 }
; 706  :                 for (;;)
; 707  :                 {
; 708  :                   prompt("Enter minimum area desired(h for histogram): ",
; 709  :                      response,sizeof(response));

	push	140					; 0000008cH
	lea	eax, DWORD PTR _response$[ebp]
	push	eax
	push	OFFSET ??_C@_0CO@FEGDDAKC@Enter?5minimum?5area?5desired?$CIh?5for@
	call	_prompt

; 710  :                   if ( logfd ) fprintf(logfd,"%s\n",response);

	mov	eax, DWORD PTR _logfd
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN54@letter_com
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN54@letter_com:

; 711  :                   if ( tolower(response[0]) == 'h' )

	movsx	edx, BYTE PTR _response$[ebp]
	cmp	BYTE PTR _kb_lower_array[edx], bl
	jne	SHORT $LN53@letter_com

; 712  :                     area_histogram();

	call	_area_histogram

; 713  :                   else break;
; 714  :                 }

	jmp	SHORT $LL56@letter_com
$LN53@letter_com:

; 715  :                 web.min_area = 0.0;

	fldz

; 716  :                 if ( const_expr(response,&val) > 0 )

	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	fstp	QWORD PTR _web+1544
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	call	_const_expr
	add	esp, 8
	test	eax, eax
	jle	$LN1@letter_com

; 717  :                   web.min_area = val;

	fld	QWORD PTR _val$[ebp]
	fst	QWORD PTR _web+1544

; 718  :                 else break; 
; 719  :                 if ( web.min_area <= 0.0 ) break;

	fldz
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 1
	je	$LN359@letter_com

; 720  :                 if ( web.counts_reported & facet_delete_count_bit )

	mov	ebx, 8
	test	BYTE PTR _web+5520, bl
	je	SHORT $LN48@letter_com

; 721  :                    web.facet_delete_count = 0;

	mov	DWORD PTR _web+5440, 0
$LN48@letter_com:

; 722  :                 sprintf(msg,"Skinny triangles weeded: %d\n",
; 723  :                    web.facet_delete_count += n = areaweed(web.min_area));

	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_areaweed
	mov	edx, DWORD PTR _msg
	mov	esi, eax
	mov	eax, DWORD PTR _web+5440
	add	eax, esi
	push	eax
	push	OFFSET ??_C@_0BN@ENNEDDMF@Skinny?5triangles?5weeded?3?5?$CFd?6?$AA@
	push	edx
	mov	DWORD PTR _web+5440, eax
	call	_sprintf

; 724  :                 outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax

; 725  :                 web.counts_reported |= facet_delete_count_bit;
; 726  :                 if ( n > 0 ) recalc();
; 727  :                 break;

	jmp	$LN376@letter_com
$LN46@letter_com:

; 728  : 
; 729  :          case 'y' : /* torus duplication */
; 730  :                 if ( web.representation == SIMPLEX )

	cmp	DWORD PTR _web+624, 3
	jne	SHORT $LN45@letter_com

; 731  :                 { outstring(
; 732  :                      "Torus duplication not implemented for simplex representation.\n");

	push	OFFSET ??_C@_0DP@FBLDAENN@Torus?5duplication?5not?5implemente@
	call	_outstring
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN45@letter_com:

; 733  :                   break;
; 734  :                 }
; 735  :                 if ( ! web.torus_flag )

	cmp	DWORD PTR _web+860, 0
	jne	SHORT $LN44@letter_com

; 736  :                 { outstring("Torus model not in effect.\n");

	push	OFFSET ??_C@_0BM@IOIDOPMA@Torus?5model?5not?5in?5effect?4?6?$AA@
	call	_outstring
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN44@letter_com:

; 737  :                   break;
; 738  :                 }
; 739  :                 if ( SDIM == 2 )

	cmp	DWORD PTR _web+616, 2

; 740  :                   prompt("Duplicate which period(1,2)? ",response,sizeof(response));

	push	140					; 0000008cH
	jne	SHORT $LN43@letter_com
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BO@JNAGCCKO@Duplicate?5which?5period?$CI1?02?$CJ?$DP?5?$AA@

; 741  :                 else

	jmp	SHORT $LN369@letter_com
$LN43@letter_com:

; 742  :                   prompt("Duplicate which period(1,2,3)? ",response,sizeof(response));

	lea	edx, DWORD PTR _response$[ebp]
	push	edx
	push	OFFSET ??_C@_0CA@LHGCPILC@Duplicate?5which?5period?$CI1?02?03?$CJ?$DP?5?$AA@
$LN369@letter_com:
	call	_prompt

; 743  :                 if ( logfd ) fprintf(logfd,"%s\n",response);

	mov	eax, DWORD PTR _logfd
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN41@letter_com
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN41@letter_com:

; 744  :                 i = atoi(response);

	lea	edx, DWORD PTR _response$[ebp]
	push	edx
	call	_atoi
	add	esp, 4

; 745  :                 if ( i < 1 || i > SDIM )

	cmp	eax, 1
	jl	SHORT $LN39@letter_com
	cmp	eax, DWORD PTR _web+616
	jg	SHORT $LN39@letter_com

; 747  :                 else tordup(i-1);

	dec	eax
	push	eax
	call	_tordup
	add	esp, 4

; 748  :                 recalc();
; 749  :                 break;            

	jmp	$LN375@letter_com
$LN39@letter_com:

; 746  :                   outstring("Improper period number.\n");

	push	OFFSET ??_C@_0BJ@MMPMCFA@Improper?5period?5number?4?6?$AA@
	call	_outstring
	add	esp, 4

; 748  :                 recalc();
; 749  :                 break;            

	jmp	$LN375@letter_com
$LN37@letter_com:

; 750  :                 
; 751  :          case 'Z' : /* zooming in on vertex */
; 752  :             znum = loc_ordinal(web.zoom_v) + 1;

	mov	eax, DWORD PTR _web+976
	test	eax, 268435456				; 10000000H
	je	SHORT $LN260@letter_com
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN261@letter_com
$LN260@letter_com:
	or	eax, -1
$LN261@letter_com:
	inc	eax

; 753  :             sprintf(msg,"Enter zoom vertex number (%d): ",znum);

	push	eax
	mov	DWORD PTR _znum$[ebp], eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0CA@GBPOGFGD@Enter?5zoom?5vertex?5number?5?$CI?$CFd?$CJ?3?5?$AA@
	push	eax
	call	_sprintf

; 754  :             prompt(msg,response,sizeof(response));

	mov	edx, DWORD PTR _msg
	push	140					; 0000008cH
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	push	edx
	call	_prompt

; 755  :             if ( logfd ) fprintf(logfd,"%s\n",response);

	mov	eax, DWORD PTR _logfd
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN36@letter_com
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN36@letter_com:

; 756  :             sscanf(response,"%d",&znum);

	lea	edx, DWORD PTR _znum$[ebp]
	push	edx
	lea	eax, DWORD PTR _response$[ebp]
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	eax
	call	_sscanf

; 757  :             /* check vertex still exists */
; 758  :             { vertex_id v_id;
; 759  :               int found = 0;
; 760  :               FOR_ALL_VERTICES(v_id)

	mov	ebx, DWORD PTR _web+48
	mov	edx, ebx
	shr	edx, 28					; 0000001cH
	add	esp, 12					; 0000000cH
	and	edx, 1
	je	SHORT $LN284@letter_com
	npad	10
$LL35@letter_com:
	mov	eax, DWORD PTR _web+12
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [esi+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	je	SHORT $LN34@letter_com

; 761  :               { if ( znum == (loc_ordinal(v_id)+1) )

	test	edx, edx
	jne	SHORT $LN263@letter_com
	or	ecx, -1
$LN263@letter_com:
	inc	ecx
	cmp	DWORD PTR _znum$[ebp], ecx
	je	SHORT $LN276@letter_com
$LN34@letter_com:

; 757  :             /* check vertex still exists */
; 758  :             { vertex_id v_id;
; 759  :               int found = 0;
; 760  :               FOR_ALL_VERTICES(v_id)

	mov	ebx, DWORD PTR [esi]
	mov	edx, ebx
	shr	edx, 28					; 0000001cH
	and	edx, 1
	jne	SHORT $LL35@letter_com
$LN284@letter_com:

; 762  :                 { web.zoom_v = v_id; found = 1; break; }
; 763  :               }
; 764  :               if ( !found )
; 765  :               { kb_error(1640,"Zoom vertex not found.\n",WARNING);

	push	2
	push	OFFSET ??_C@_0BI@GDCBHHFG@Zoom?5vertex?5not?5found?4?6?$AA@
	push	1640					; 00000668H
	call	_kb_error
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN276@letter_com:

; 766  :                 break;
; 767  :               }
; 768  :             }
; 769  :             sprintf(msg,"Enter cut-off radius (%f): ",(DOUBLE)web.zoom_radius);

	fld	QWORD PTR _web+984
	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BM@NKGFGCMB@Enter?5cut?9off?5radius?5?$CI?$CFf?$CJ?3?5?$AA@
	push	ecx
	mov	DWORD PTR _web+976, ebx
	call	_sprintf

; 770  :             prompt(msg,response,sizeof(response));

	mov	eax, DWORD PTR _msg
	push	140					; 0000008cH
	lea	edx, DWORD PTR _response$[ebp]
	push	edx
	push	eax
	call	_prompt

; 771  :             if ( logfd ) fprintf(logfd,"%s\n",response);

	mov	eax, DWORD PTR _logfd
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN28@letter_com
	lea	ecx, DWORD PTR _response$[ebp]
	push	ecx
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN28@letter_com:

; 772  :             if ( const_expr(response,&val) > 0 )

	lea	edx, DWORD PTR _val$[ebp]
	push	edx
	lea	eax, DWORD PTR _response$[ebp]
	push	eax
	call	_const_expr
	add	esp, 8
	test	eax, eax
	jle	SHORT $LN308@letter_com

; 773  :               web.zoom_radius = val;

	fld	QWORD PTR _val$[ebp]
	fstp	QWORD PTR _web+984
$LN308@letter_com:

; 774  :             zoom_vertex(web.zoom_v,web.zoom_radius);

	fld	QWORD PTR _web+984
	mov	ecx, DWORD PTR _web+976
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	ecx
	call	_zoom_vertex
	add	esp, 12					; 0000000cH

; 775  :             recalc();
; 776  :             break;

	jmp	$LN375@letter_com
$LN26@letter_com:

; 777  : 
; 778  :          /* Graphical output */
; 779  : 
; 780  :          case 'D' : old = go_display_flag;

	mov	eax, DWORD PTR _go_display_flag

; 781  :                 go_display_flag = !go_display_flag; 

	xor	edx, edx
	test	eax, eax
	sete	dl
	mov	esi, eax
	mov	eax, edx
	mov	DWORD PTR _go_display_flag, eax

; 782  :                 if ( go_display_flag )

	test	eax, eax
	je	SHORT $LN25@letter_com

; 783  :                 { outstring("Automatic display ON.");

	push	OFFSET ??_C@_0BG@CJFPNCJ@Automatic?5display?5ON?4?$AA@
	call	_outstring
	add	esp, 4

; 784  :                   update_display();

	call	_update_display

; 785  :                 }
; 786  :                 else

	jmp	$LN24@letter_com
$LN25@letter_com:

; 787  :                   outstring("Automatic display OFF.");

	push	OFFSET ??_C@_0BH@MKMHLGMK@Automatic?5display?5OFF?4?$AA@

; 788  :                 if ( old ) outstring(" (was on)\n");

	jmp	$LN377@letter_com
$LN21@letter_com:

; 789  : 	        else outstring(" (was off)\n");
; 790  :                 break;
; 791  : 
; 792  :          case 'd' : 
; 793  :                 dump(); 

	call	_dump
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN20@letter_com:

; 794  :                 break;
; 795  : 
; 796  :          case 'P' : /* create graphics data file */
; 797  :                 display_file(-1);

	push	-1
	call	_display_file
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN19@letter_com:

; 798  :                 break;
; 799  : 
; 800  :          case 's' : /* Show image */ 
; 801  :                 if ( !go_display_flag && !dont_resize_flag )

	cmp	DWORD PTR _go_display_flag, 0
	jne	SHORT $LN18@letter_com
	cmp	DWORD PTR _dont_resize_flag, 0
	jne	SHORT $LN18@letter_com

; 802  :                   resize();

	call	_resize
$LN18@letter_com:

; 803  :                 go_display_flag = 1;

	mov	DWORD PTR _go_display_flag, 1

; 804  :                 do_show();

	call	_do_show
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN17@letter_com:

; 805  :                 break;
; 806  : 
; 807  : 
; 808  :          /* Process control */
; 809  : 
; 810  :          case 'F' : /* log commands */
; 811  :                if ( logfd ) 

	mov	eax, DWORD PTR _logfd
	test	eax, eax
	je	SHORT $LN16@letter_com

; 812  :                { fclose(logfd);

	push	eax
	call	_fclose

; 813  :                  logfd = NULL;
; 814  :                  outstring("Command logging OFF.\n");

	push	OFFSET ??_C@_0BG@EIHDJGKL@Command?5logging?5OFF?4?6?$AA@
	mov	DWORD PTR _logfd, 0
	call	_outstring
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@letter_com:

; 815  :                  break;
; 816  :                }
; 817  :                prompt("Name of log file: ",response,sizeof(response));

	push	140					; 0000008cH
	lea	eax, DWORD PTR _response$[ebp]
	push	eax
	push	OFFSET ??_C@_0BD@KCHKOGMF@Name?5of?5log?5file?3?5?$AA@
	call	_prompt
	add	esp, 12					; 0000000cH

; 818  :                if ( response[0] == '\0' ) break;

	cmp	BYTE PTR _response$[ebp], 0
	je	$LN1@letter_com

; 819  :                logfd = fopen(response,"w");

	lea	ecx, DWORD PTR _response$[ebp]
	push	OFFSET ??_C@_01NOFIACDB@w?$AA@
	push	ecx
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _logfd, eax

; 820  :                if ( logfd == NULL )

	test	eax, eax
	jne	$LN1@letter_com

; 821  :                   { perror(response); break; }

	lea	edx, DWORD PTR _response$[ebp]
	push	edx
	call	_perror
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@letter_com:

; 822  :                break;      
; 823  : 
; 824  :          case 'S' : /* save binary form */
; 825  :                 outstring("Binary save not currently functional.\nUse 'd' Ascii dump.\n"); 

	push	OFFSET ??_C@_0DL@OLGFFLJB@Binary?5save?5not?5currently?5functi@
	call	_outstring
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@letter_com:

; 826  :                 break;
; 827  : 
; 828  :          case 'R' :  /* restore(NULL);  */
; 829  :                 outstring("R (restore) command discontinued.\n");

	push	OFFSET ??_C@_0CD@KKJEPFCH@R?5?$CIrestore?$CJ?5command?5discontinued@
	call	_outstring
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@letter_com:

; 830  :                 break;
; 831  : 
; 832  :          case 'x' : 
; 833  :          case 'q' : /* Exit */
; 834  : 
; 835  : 			 if ( logfd ) 

	mov	eax, DWORD PTR _logfd
	test	eax, eax
	je	SHORT $LN10@letter_com

; 836  :                { fclose(logfd);

	push	eax
	call	_fclose

; 837  :                  logfd = NULL;
; 838  :                  outstring("Command logging OFF.\n");

	push	OFFSET ??_C@_0BG@EIHDJGKL@Command?5logging?5OFF?4?6?$AA@
	mov	DWORD PTR _logfd, 0
	call	_outstring
	add	esp, 8
$LN10@letter_com:

; 839  :                }
; 840  :                if ( subshell_depth )

	cmp	DWORD PTR _subshell_depth, 0
	je	SHORT $LN9@letter_com

; 841  :                { exit_flag = 1; 

	pop	edi
	pop	esi
	mov	DWORD PTR _exit_flag, 1
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@letter_com:

; 842  :                  break;
; 843  :                } 
; 844  : #ifdef __cplusplus
; 845  :                loadfilename[0] = 0;
; 846  :                loadstub();
; 847  : #else
; 848  :                startup(NULL);

	push	0
	call	_startup
	add	esp, 4

; 849  : #ifdef MPI_EVOLVER
; 850  :              /*  MPI_Barrier(MPI_COMM_WORLD); */ /* extra kludge needed */
; 851  : #endif
; 852  :                longjmp(jumpbuf[0],1); /* kludge, but current command

	push	1
	push	OFFSET _jumpbuf
	call	_longjmp
$LN379@letter_com:
$LN8@letter_com:

; 853  :                                       list just got deallocated */
; 854  : #endif
; 855  :                break;
; 856  : 
; 857  :          case '?' :
; 858  :          case 'H' :
; 859  :          case 'h' : /* help screen */
; 860  :                 main_help();

	call	_main_help
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@letter_com:

; 861  :                 break;
; 862  :          case ' ' : break;
; 863  :          case '\t' : break;
; 864  :          case '\b' : break;
; 865  :          case '\r' : break;
; 866  :          case '\n' : break;
; 867  :          default  : if ( c != '\0' )

	test	ecx, ecx
	je	SHORT $LN1@letter_com

; 868  :           { sprintf(msg,"Illegal command: %c. Type h for help.\n", c);

	mov	eax, DWORD PTR _msg
	push	ecx
	push	OFFSET ??_C@_0CH@NACAJMAD@Illegal?5command?3?5?$CFc?4?5Type?5h?5for?5@
	push	eax
	call	_sprintf

; 869  :             outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN359@letter_com:

; 718  :                 else break; 
; 719  :                 if ( web.min_area <= 0.0 ) break;

	fstp	ST(0)
$LN1@letter_com:

; 870  :           }
; 871  :           break;
; 872  :    } /* end switch */
; 873  : } /* end letter_command() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN364@letter_com:
$LN378@letter_com:
	DD	$LN1@letter_com
	DD	$LN8@letter_com
	DD	$LN228@letter_com
	DD	$LN247@letter_com
	DD	$LN26@letter_com
	DD	$LN245@letter_com
	DD	$LN17@letter_com
	DD	$LN190@letter_com
	DD	$LN181@letter_com
	DD	$LN136@letter_com
	DD	$LN170@letter_com
	DD	$LN118@letter_com
	DD	$LN97@letter_com
	DD	$LN20@letter_com
	DD	$LN147@letter_com
	DD	$LN12@letter_com
	DD	$LN13@letter_com
	DD	$LN146@letter_com
	DD	$LN72@letter_com
	DD	$LN59@letter_com
	DD	$LN145@letter_com
	DD	$LN239@letter_com
	DD	$LN37@letter_com
	DD	$LN226@letter_com
	DD	$LN216@letter_com
	DD	$LN246@letter_com
	DD	$LN21@letter_com
	DD	$LN244@letter_com
	DD	$LN195@letter_com
	DD	$LN142@letter_com
	DD	$LN243@letter_com
	DD	$LN139@letter_com
	DD	$LN176@letter_com
	DD	$LN296@letter_com
	DD	$LN168@letter_com
	DD	$LN112@letter_com
	DD	$LN90@letter_com
	DD	$LN160@letter_com
	DD	$LN11@letter_com
	DD	$LN84@letter_com
	DD	$LN19@letter_com
	DD	$LN299@letter_com
	DD	$LN63@letter_com
	DD	$LN242@letter_com
	DD	$LN58@letter_com
	DD	$LN46@letter_com
	DD	$LN241@letter_com
	DD	$LN2@letter_com
$LN292@letter_com:
	DB	0
	DB	0
	DB	0
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	0
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	0
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	1
	DB	47					; 0000002fH
	DB	2
	DB	47					; 0000002fH
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	1
	DB	47					; 0000002fH
	DB	8
	DB	9
	DB	47					; 0000002fH
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	16					; 00000010H
	DB	17					; 00000011H
	DB	18					; 00000012H
	DB	19					; 00000013H
	DB	20					; 00000014H
	DB	21					; 00000015H
	DB	47					; 0000002fH
	DB	22					; 00000016H
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	23					; 00000017H
	DB	24					; 00000018H
	DB	25					; 00000019H
	DB	26					; 0000001aH
	DB	27					; 0000001bH
	DB	28					; 0000001cH
	DB	29					; 0000001dH
	DB	1
	DB	30					; 0000001eH
	DB	31					; 0000001fH
	DB	32					; 00000020H
	DB	33					; 00000021H
	DB	34					; 00000022H
	DB	35					; 00000023H
	DB	36					; 00000024H
	DB	37					; 00000025H
	DB	38					; 00000026H
	DB	39					; 00000027H
	DB	40					; 00000028H
	DB	41					; 00000029H
	DB	42					; 0000002aH
	DB	43					; 0000002bH
	DB	44					; 0000002cH
	DB	38					; 00000026H
	DB	45					; 0000002dH
	DB	46					; 0000002eH
_letter_command ENDP
_TEXT	ENDS
END
