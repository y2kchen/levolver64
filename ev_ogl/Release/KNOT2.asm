; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\KNOT2.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_get_fe_edge
EXTRN	_web:BYTE
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
;	COMDAT _get_fe_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_edge PROC					; COMDAT

; 43   : {

	push	ebp
	mov	ebp, esp

; 44   :   edge_id e_id;
; 45   :     
; 46   :   e_id = feptr(fe_id)->fe_edge_id;

	mov	eax, DWORD PTR _fe_id$[ebp]

; 47   : 
; 48   :   /*
; 49   :   if ( inverted(fe_id) ) invert(e_id);
; 50   :   return e_id;
; 51   :   */
; 52   :   
; 53   :   return same_sign(e_id,fe_id);

	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]

; 54   : }

	pop	ebp
	ret	0
_get_fe_edge ENDP
_TEXT	ENDS
PUBLIC	_get_edge_tailv
EXTRN	_dymem:DWORD
; Function compile flags: /Ogtp
;	COMDAT _get_edge_tailv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_tailv PROC					; COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp

; 192  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 193  :      return get_edge_vertices(e_id)[web.headvnum];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_t
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 196  : }

	pop	ebp
	ret	0
$LN2@get_edge_t:

; 194  :   else
; 195  :      return get_edge_vertices(e_id)[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 196  : }

	pop	ebp
	ret	0
_get_edge_tailv ENDP
_TEXT	ENDS
PUBLIC	_get_edge_headv
; Function compile flags: /Ogtp
;	COMDAT _get_edge_headv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_headv PROC					; COMDAT

; 200  : {

	push	ebp
	mov	ebp, esp

; 201  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 202  :      return get_edge_vertices(e_id)[0];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_h
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 205  : }

	pop	ebp
	ret	0
$LN2@get_edge_h:

; 203  :   else
; 204  :      return get_edge_vertices(e_id)[web.headvnum];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 205  : }

	pop	ebp
	ret	0
_get_edge_headv ENDP
_TEXT	ENDS
PUBLIC	_get_next_tail_edge
; Function compile flags: /Ogtp
;	COMDAT _get_next_tail_edge
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_next_tail_edge PROC				; COMDAT

; 270  : { return eptr(e_id)->next_vedge[inverted(e_id) ?1: 0] ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _e_id$[ebp]
	mov	edx, DWORD PTR _web+124
	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ecx*4+32]
	pop	ebp
	ret	0
_get_next_tail_edge ENDP
_TEXT	ENDS
PUBLIC	_get_next_head_edge
; Function compile flags: /Ogtp
;	COMDAT _get_next_head_edge
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_next_head_edge PROC				; COMDAT

; 273  : { return inverse_id(eptr(e_id)->next_vedge[inverted(e_id) ?0: 1]); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _e_id$[ebp]
	mov	edx, DWORD PTR _web+124
	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	not	ecx
	and	ecx, 1
	mov	eax, DWORD PTR [eax+ecx*4+32]
	xor	eax, 134217728				; 08000000H
	pop	ebp
	ret	0
_get_next_head_edge ENDP
_TEXT	ENDS
PUBLIC	_get_vertex_fe
; Function compile flags: /Ogtp
;	COMDAT _get_vertex_fe
_TEXT	SEGMENT
_v_id$ = 8						; size = 4
_get_vertex_fe PROC					; COMDAT

; 287  : { facet_id fe;

	push	ebp
	mov	ebp, esp

; 288  :   edge_id start_e, xx_id=vptr(v_id)->e_id;

	mov	eax, DWORD PTR _v_id$[ebp]
	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]

; 289  :   // might be bare edge, so seek along edge loop
; 290  :   if ( !valid_id(xx_id) ) return NULLID;

	test	eax, 268435456				; 10000000H
	jne	SHORT $LN4@get_vertex
	xor	eax, eax

; 299  : }

	pop	ebp
	ret	0
$LN4@get_vertex:
	push	esi

; 291  :   fe = eptr(xx_id)->fe_id;

	mov	esi, DWORD PTR _web+124
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	edx, DWORD PTR [ecx+28]
	push	edi

; 292  :   start_e = xx_id;
; 293  :   while ( !valid_id(fe) )

	test	edx, 268435456				; 10000000H
	jne	SHORT $LN2@get_vertex
	mov	edi, eax
	or	edi, 134217728				; 08000000H
	npad	8
$LL3@get_vertex:

; 294  :   { xx_id = get_next_tail_edge(xx_id);

	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	eax, DWORD PTR [ecx+eax*4+32]

; 295  :     if ( equal_element(xx_id,start_e) ) return NULLID;

	mov	edx, eax
	or	edx, 134217728				; 08000000H
	cmp	edx, edi
	je	SHORT $LN10@get_vertex

; 296  :     fe = eptr(xx_id)->fe_id;

	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	edx, DWORD PTR [ecx+28]
	test	edx, 268435456				; 10000000H
	je	SHORT $LL3@get_vertex
$LN2@get_vertex:

; 297  :   }
; 298  :   return  same_sign(fe,xx_id);

	and	eax, 134217728				; 08000000H
	pop	edi
	xor	eax, edx
	pop	esi

; 299  : }

	pop	ebp
	ret	0
$LN10@get_vertex:
	pop	edi

; 295  :     if ( equal_element(xx_id,start_e) ) return NULLID;

	xor	eax, eax
	pop	esi

; 299  : }

	pop	ebp
	ret	0
_get_vertex_fe ENDP
_TEXT	ENDS
PUBLIC	__real@bfe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@0000000000000000
PUBLIC	__$ArrayPad$
PUBLIC	_proj_knot_energy
EXTRN	_dot:PROC
EXTRN	_localbase:DWORD
EXTRN	_exponent_param:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CIpow:PROC
EXTRN	__CIsqrt:PROC
;	COMDAT __real@bfe0000000000000
CONST	SEGMENT
__real@bfe0000000000000 DQ 0bfe0000000000000r	; -0.5
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\knot2.c
CONST	ENDS
;	COMDAT _proj_knot_energy
_TEXT	SEGMENT
_L2$ = -276						; size = 8
_L1$ = -268						; size = 8
_LL1$ = -260						; size = 8
_power$ = -252						; size = 8
tv2635 = -244						; size = 4
tv3162 = -240						; size = 4
_re1$ = -236						; size = 8
_y2$ = -232						; size = 4
_energy$ = -228						; size = 8
tv981 = -220						; size = 8
tv3170 = -216						; size = 4
_e1$ = -212						; size = 4
tv2652 = -208						; size = 4
tv3166 = -204						; size = 4
tv3168 = -200						; size = 4
tv3024 = -196						; size = 8
tv3022 = -196						; size = 8
_LL2$ = -196						; size = 8
_rr$ = -188						; size = 8
_yy1$ = -184						; size = 4
tv879 = -180						; size = 4
_x1$ = -176						; size = 4
_x2$ = -172						; size = 4
tv1569 = -168						; size = 4
tv1287 = -168						; size = 4
_j$ = -164						; size = 4
tv3156 = -160						; size = 4
tv1262 = -160						; size = 4
tv3158 = -156						; size = 4
tv2078 = -156						; size = 4
tv1283 = -156						; size = 4
tv3164 = -152						; size = 4
tv3160 = -152						; size = 4
tv3155 = -152						; size = 4
tv1279 = -152						; size = 4
tv890 = -152						; size = 4
_dx1$ = -148						; size = 48
_dx2$ = -100						; size = 48
_r$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_proj_knot_energy PROC					; COMDAT

; 35   : { edge_id e1 = e_info->id,e2;

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _e_info$[ebp]

; 36   :   REAL *x1,*x2,*yy1,*y2; /* end coordinates */
; 37   :   REAL power;
; 38   :   REAL energy = 0.0;

	fldz

; 39   :   REAL dx1[MAXCOORD];
; 40   :   REAL dx2[MAXCOORD];
; 41   :   REAL r[MAXCOORD];
; 42   :   REAL LL1,L1,LL2,L2,rr,re1,re2;
; 43   :   REAL p;
; 44   :   REAL b1,b2,c1,c2;
; 45   :   int j;
; 46   : 
; 47   :   power = globals(exponent_param)->value.real;

	mov	ecx, DWORD PTR _dymem
	fstp	QWORD PTR _energy$[ebp]
	push	ebx
	push	esi
	mov	esi, DWORD PTR [eax]
	mov	eax, DWORD PTR _exponent_param
	mov	edx, eax
	and	edx, -16777216				; ff000000H
	push	edi
	mov	DWORD PTR _e1$[ebp], esi
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN18@proj_knot_
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN20@proj_knot_
	mov	edx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [edx]
	jmp	SHORT $LN19@proj_knot_
$LN20@proj_knot_:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN18@proj_knot_
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN19@proj_knot_
$LN18@proj_knot_:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ecx]
$LN19@proj_knot_:

; 48   :   x1 = get_coord(get_edge_tailv(e1));

	mov	edx, DWORD PTR _web+124
	fld	QWORD PTR [eax+64]
	mov	edi, esi
	fstp	QWORD PTR _power$[ebp]
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR _web+216
	mov	edx, DWORD PTR [edx+ecx+304]
	shr	edi, 27					; 0000001bH
	add	edx, eax
	and	edi, 1
	je	SHORT $LN25@proj_knot_
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN24@proj_knot_
$LN25@proj_knot_:
	mov	eax, DWORD PTR [edx]
$LN24@proj_knot_:
	mov	esi, DWORD PTR _web+104
	mov	ecx, DWORD PTR [esi+ecx+64]
	mov	ebx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ebx+eax*4]
	add	esi, ecx
	mov	DWORD PTR _x1$[ebp], esi

; 49   :   x2 = get_coord(get_edge_headv(e1));

	test	edi, edi
	je	SHORT $LN29@proj_knot_
	mov	eax, DWORD PTR [edx]
	jmp	SHORT $LN28@proj_knot_
$LN29@proj_knot_:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
$LN28@proj_knot_:
	and	eax, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ebx+eax*4]
	add	edi, ecx

; 50   :   for ( j = 0 ; j < SDIM ; j++ ) dx1[j] = x2[j] - x1[j];

	mov	ecx, DWORD PTR _web+616
	xor	edx, edx
	mov	DWORD PTR _x2$[ebp], edi
	cmp	ecx, 4
	jl	$LC49@proj_knot_
	mov	ebx, edi
	sub	ebx, esi
	mov	DWORD PTR tv1262[ebp], ebx
	lea	ebx, DWORD PTR _dx1$[ebp]
	sub	ebx, esi
	mov	DWORD PTR tv1279[ebp], ebx
	lea	ebx, DWORD PTR _dx1$[ebp+8]
	sub	ebx, esi
	mov	DWORD PTR tv1283[ebp], ebx
	lea	ebx, DWORD PTR _dx1$[ebp+16]
	sub	ebx, esi
	lea	ecx, DWORD PTR [edi+24]
	lea	eax, DWORD PTR [esi+8]
	mov	DWORD PTR tv1287[ebp], ebx
$LL50@proj_knot_:
	fld	QWORD PTR [ecx-24]
	mov	ebx, DWORD PTR tv1262[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _dx1$[ebp+edx*8-32]
	fld	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv1279[ebp]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv1283[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv1287[ebp]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR _web+616
	add	ebx, -3					; fffffffdH
	cmp	edx, ebx
	jl	SHORT $LL50@proj_knot_
	mov	ecx, DWORD PTR _web+616
$LC49@proj_knot_:
	cmp	edx, ecx
	jge	SHORT $LN48@proj_knot_
	lea	ebx, DWORD PTR _dx1$[ebp]
	sub	edi, esi
	sub	ebx, esi
	lea	eax, DWORD PTR [esi+edx*8]
	sub	ecx, edx
$LC15@proj_knot_:
	fld	QWORD PTR [eax+edi]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax+ebx-8]
	jne	SHORT $LC15@proj_knot_
	mov	ecx, DWORD PTR _web+616
$LN48@proj_knot_:

; 51   :   LL1 = SDIM_dot(dx1,dx1);

	push	ecx
	lea	ecx, DWORD PTR _dx1$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	fst	QWORD PTR _LL1$[ebp]
	add	esp, 12					; 0000000cH

; 52   :   L1 = sqrt(LL1);

	call	__CIsqrt
	fstp	QWORD PTR _L1$[ebp]

; 53   :   FOR_ALL_EDGES(e2)

	mov	ecx, DWORD PTR _web+160
	test	ecx, 268435456				; 10000000H
	je	$LN58@proj_knot_
	mov	ebx, DWORD PTR _web+124
	npad	9
$LL12@proj_knot_:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	edx, DWORD PTR [esi+ebx]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	mov	DWORD PTR tv879[ebp], esi
	je	$LN11@proj_knot_

; 54   :     { if ( e2 <= e1 ) continue; /* each pair once */

	cmp	ecx, DWORD PTR _e1$[ebp]
	jbe	$LN11@proj_knot_

; 55   :       yy1 = get_coord(get_edge_tailv(e2));

	mov	edi, DWORD PTR _dymem
	mov	eax, DWORD PTR _web+216
	mov	ebx, DWORD PTR [eax+edi+304]
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR tv890[ebp], ecx
	je	SHORT $LN33@proj_knot_
	add	ebx, edx
	mov	edx, DWORD PTR _web+636
	mov	eax, DWORD PTR [ebx+edx*4]
	jmp	SHORT $LN32@proj_knot_
$LN33@proj_knot_:
	mov	eax, DWORD PTR [ebx+edx]
	add	ebx, edx
$LN32@proj_knot_:
	mov	edx, DWORD PTR _web+104
	mov	edx, DWORD PTR [edx+edi+64]
	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ecx+eax*4]
	add	edi, edx

; 56   :       y2 = get_coord(get_edge_headv(e2));

	cmp	DWORD PTR tv890[ebp], 0
	mov	DWORD PTR _yy1$[ebp], edi
	je	SHORT $LN37@proj_knot_
	mov	eax, DWORD PTR [ebx]
	jmp	SHORT $LN36@proj_knot_
$LN37@proj_knot_:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [ebx+eax*4]
$LN36@proj_knot_:
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ecx+eax*4]
	add	ebx, edx

; 57   :       for ( j = 0 ; j < SDIM ; j++ ) dx2[j] = y2[j] - yy1[j];

	xor	edx, edx
	cmp	DWORD PTR _web+616, 4
	mov	DWORD PTR _y2$[ebp], ebx
	jl	$LC52@proj_knot_
	mov	esi, ebx
	sub	esi, edi
	mov	DWORD PTR tv1569[ebp], esi
	mov	esi, edi
	neg	esi
	mov	DWORD PTR tv3155[ebp], esi
	lea	esi, DWORD PTR _dx2$[ebp+esi]
	mov	DWORD PTR tv3156[ebp], esi
	mov	esi, DWORD PTR tv3155[ebp]
	lea	esi, DWORD PTR _dx2$[ebp+esi+8]
	mov	DWORD PTR tv3158[ebp], esi
	mov	esi, DWORD PTR tv3155[ebp]
	lea	esi, DWORD PTR _dx2$[ebp+esi+16]
	lea	ecx, DWORD PTR [ebx+24]
	lea	eax, DWORD PTR [edi+8]
	mov	DWORD PTR tv3160[ebp], esi
	npad	5
$LL59@proj_knot_:
	fld	QWORD PTR [ecx-24]
	mov	esi, DWORD PTR tv1569[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	mov	DWORD PTR _j$[ebp], edx
	add	eax, 32					; 00000020H
	fstp	QWORD PTR _dx2$[ebp+edx*8-32]
	mov	edx, DWORD PTR _web+616
	fld	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv3156[ebp]
	fsub	QWORD PTR [eax-32]
	add	edx, -3					; fffffffdH
	add	ecx, 32					; 00000020H
	cmp	DWORD PTR _j$[ebp], edx
	mov	edx, DWORD PTR _j$[ebp]
	fstp	QWORD PTR [eax+esi-32]
	fld	QWORD PTR [ecx-40]
	mov	esi, DWORD PTR tv3158[ebp]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [eax+esi-32]
	mov	esi, DWORD PTR tv3160[ebp]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [eax+esi-32]
	jl	SHORT $LL59@proj_knot_
	mov	esi, DWORD PTR tv879[ebp]
$LC52@proj_knot_:
	cmp	edx, DWORD PTR _web+616
	jge	SHORT $LN51@proj_knot_
	lea	ecx, DWORD PTR _dx2$[ebp]
	sub	ecx, edi
	mov	DWORD PTR tv3156[ebp], ecx
	mov	ecx, DWORD PTR _web+616
	mov	esi, ebx
	sub	esi, edi
	lea	eax, DWORD PTR [edi+edx*8]
	sub	ecx, edx
$LC6@proj_knot_:
	fld	QWORD PTR [eax+esi]
	mov	edx, DWORD PTR tv3156[ebp]
	fsub	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fstp	QWORD PTR [eax+edx-8]
	jne	SHORT $LC6@proj_knot_
	mov	esi, DWORD PTR tv879[ebp]
$LN51@proj_knot_:

; 58   :       LL2 = SDIM_dot(dx2,dx2);

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _dx2$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	fst	QWORD PTR _LL2$[ebp]
	add	esp, 12					; 0000000cH

; 59   :       L2 = sqrt(LL2);

	call	__CIsqrt
	fstp	QWORD PTR _L2$[ebp]

; 60   :       for ( j = 0 ; j < SDIM ; j++ ) 

	xor	edx, edx
	cmp	DWORD PTR _web+616, 4
	jl	$LN57@proj_knot_

; 58   :       LL2 = SDIM_dot(dx2,dx2);

	lea	eax, DWORD PTR [edi+8]
	fld	QWORD PTR __real@3fe0000000000000

; 61   :          r[j] = (yy1[j] + y2[j] - x1[j] - x2[j])/2;

	mov	edx, ebx
	sub	edx, edi
	mov	DWORD PTR tv1569[ebp], edx
	mov	edx, edi
	mov	edi, DWORD PTR _x1$[ebp]
	neg	edx
	add	edi, edx
	mov	DWORD PTR tv3162[ebp], edi
	mov	edi, DWORD PTR _x2$[ebp]
	add	edi, edx
	mov	esi, DWORD PTR _x2$[ebp]
	mov	ecx, DWORD PTR _x1$[ebp]
	mov	DWORD PTR tv3164[ebp], edi
	lea	edi, DWORD PTR _r$[ebp+edx]
	mov	DWORD PTR tv3166[ebp], edi
	lea	edi, DWORD PTR _r$[ebp+edx+8]
	lea	edx, DWORD PTR _r$[ebp+edx+16]
	mov	DWORD PTR tv3170[ebp], edx
	mov	DWORD PTR tv3168[ebp], edi
	mov	edi, DWORD PTR _x1$[ebp]
	mov	edx, ebx
	sub	edx, edi
	mov	DWORD PTR tv2635[ebp], edx
	mov	edx, DWORD PTR _x2$[ebp]
	sub	edx, edi
	mov	DWORD PTR tv1262[ebp], edx
	mov	edx, ebx
	sub	edx, DWORD PTR _x2$[ebp]
	lea	edi, DWORD PTR _r$[ebp]
	mov	DWORD PTR tv2652[ebp], edx
	mov	edx, DWORD PTR _web+616
	add	edx, -4					; fffffffcH
	sub	edi, ebx
	shr	edx, 2
	add	esi, 24					; 00000018H
	add	ecx, 16					; 00000010H
	mov	DWORD PTR tv2078[ebp], ebx
	inc	edx
	lea	ebx, DWORD PTR [edx*4]
	mov	DWORD PTR _j$[ebp], ebx
	mov	ebx, DWORD PTR tv2078[ebp]
$LN56@proj_knot_:
	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	fadd	QWORD PTR [ebx]
	add	ecx, 32					; 00000020H
	add	esi, 32					; 00000020H
	fsub	QWORD PTR [ecx-48]
	fsub	QWORD PTR [esi-56]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [edi+ebx]
	mov	ebx, DWORD PTR tv1569[ebp]
	fld	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv3162[ebp]
	fadd	QWORD PTR [eax-32]
	fsub	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv3164[ebp]
	fsub	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv3166[ebp]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv2635[ebp]
	fld	QWORD PTR [ebx+ecx-32]
	mov	ebx, DWORD PTR tv1262[ebp]
	fadd	QWORD PTR [eax-24]
	fsub	QWORD PTR [ecx-32]
	fsub	QWORD PTR [ebx+ecx-32]
	mov	ebx, DWORD PTR tv3168[ebp]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv2652[ebp]
	fld	QWORD PTR [ebx+esi-32]
	mov	ebx, DWORD PTR tv3170[ebp]
	fadd	QWORD PTR [eax-16]
	fsub	QWORD PTR [ecx-24]
	fsub	QWORD PTR [esi-32]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv2078[ebp]
	add	ebx, 32					; 00000020H
	dec	edx
	mov	DWORD PTR tv2078[ebp], ebx
	jne	$LN56@proj_knot_

; 58   :       LL2 = SDIM_dot(dx2,dx2);

	mov	ebx, DWORD PTR _y2$[ebp]
	mov	edi, DWORD PTR _yy1$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR tv879[ebp]
	jmp	SHORT $LC55@proj_knot_
$LN57@proj_knot_:
	fld	QWORD PTR __real@3fe0000000000000
$LC55@proj_knot_:

; 60   :       for ( j = 0 ; j < SDIM ; j++ ) 

	cmp	edx, DWORD PTR _web+616
	jge	SHORT $LN65@proj_knot_
	mov	ecx, DWORD PTR _x1$[ebp]
	sub	ebx, edi
	lea	eax, DWORD PTR [edi+edx*8]
	neg	edi
	lea	esi, DWORD PTR [edi+ecx]
	mov	ecx, DWORD PTR _x2$[ebp]
	add	ecx, edi
	mov	DWORD PTR tv3164[ebp], ecx
	mov	ecx, DWORD PTR _web+616
	lea	edi, DWORD PTR _r$[ebp+edi]
	sub	ecx, edx
$LC3@proj_knot_:

; 61   :          r[j] = (yy1[j] + y2[j] - x1[j] - x2[j])/2;

	fld	QWORD PTR [eax+ebx]
	mov	edx, DWORD PTR tv3164[ebp]
	fadd	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax+esi-8]
	fsub	QWORD PTR [eax+edx-8]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [eax+edi-8]
	jne	SHORT $LC3@proj_knot_

; 60   :       for ( j = 0 ; j < SDIM ; j++ ) 

	mov	esi, DWORD PTR tv879[ebp]
$LN65@proj_knot_:

; 62   :       rr = SDIM_dot(r,r);

	mov	eax, DWORD PTR _web+616
	fstp	ST(0)
	push	eax
	lea	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	fstp	QWORD PTR _rr$[ebp]

; 63   :       re1 = SDIM_dot(r,dx1);

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _dx1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _r$[ebp]
	push	edx
	call	_dot
	fstp	QWORD PTR _re1$[ebp]

; 64   :       re2 = SDIM_dot(r,dx2);

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _dx2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _r$[ebp]
	push	edx
	call	_dot

; 65   :       p = pow(rr ,-power/2);
; 66   :       b1 = 1 - re1*re1/rr/LL1;
; 67   :       b2 = 1 - re2*re2/rr/LL2;
; 68   :       c1 = pow(b1,power/2);
; 69   :       c2 = pow(b2,power/2);

	fld	QWORD PTR _power$[ebp]
	fmul	QWORD PTR __real@3fe0000000000000
	add	esp, 36					; 00000024H
	fst	QWORD PTR tv981[ebp]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	QWORD PTR _rr$[ebp]
	fdiv	QWORD PTR _LL2$[ebp]
	fld1
	fsubrp	ST(1), ST(0)
	fxch	ST(1)
	call	__CIpow

; 70   :       energy += L1*L2*p*(c1 + c2);

	fstp	QWORD PTR tv3022[ebp]
	fld	QWORD PTR _re1$[ebp]
	fmul	ST(0), ST(0)
	fdiv	QWORD PTR _rr$[ebp]
	fdiv	QWORD PTR _LL1$[ebp]
	fld1
	fsubrp	ST(1), ST(0)
	fld	QWORD PTR tv981[ebp]
	call	__CIpow
	fadd	QWORD PTR tv3022[ebp]
	fstp	QWORD PTR tv3024[ebp]
	fld	QWORD PTR _power$[ebp]
	fmul	QWORD PTR __real@bfe0000000000000
	fld	QWORD PTR _rr$[ebp]
	fxch	ST(1)
	call	__CIpow
	fld	QWORD PTR _L2$[ebp]
	fmul	QWORD PTR _L1$[ebp]
	mov	ebx, DWORD PTR _web+124
	fmulp	ST(1), ST(0)
	fmul	QWORD PTR tv3024[ebp]
	fadd	QWORD PTR _energy$[ebp]
	fstp	QWORD PTR _energy$[ebp]
$LN11@proj_knot_:

; 53   :   FOR_ALL_EDGES(e2)

	mov	eax, DWORD PTR [esi+ebx]
	mov	ecx, DWORD PTR [eax]
	test	ecx, 268435456				; 10000000H
	jne	$LL12@proj_knot_
$LN58@proj_knot_:

; 71   :     }
; 72   :   return 2*energy; /* since doing each pair once */
; 73   : } // end proj_knot_energy()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _energy$[ebp]
	pop	edi
	fadd	ST(0), ST(0)
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_proj_knot_energy ENDP
_TEXT	ENDS
PUBLIC	__real@4000000000000000
PUBLIC	_e_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_proj_knot_energy_gradient
;	COMDAT __real@4000000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\knot2.c
CONST	ENDS
;	COMDAT _proj_knot_energy_gradient
_TEXT	SEGMENT
_L1$ = -316						; size = 8
_power$ = -308						; size = 8
_LL1$ = -300						; size = 8
_p$ = -292						; size = 8
tv3683 = -288						; size = 4
_poww$ = -284						; size = 8
_b1$ = -276						; size = 8
tv2620 = -272						; size = 4
_e1$ = -268						; size = 4
tv1234 = -264						; size = 8
_L2$ = -264						; size = 8
_e_info$GSCopy$ = -256					; size = 4
_energy$ = -252						; size = 8
tv1282 = -244						; size = 8
_LL2$ = -244						; size = 8
tv1216 = -236						; size = 8
tv3679 = -232						; size = 4
tv3675 = -232						; size = 4
tv1290 = -228						; size = 8
_c2$ = -228						; size = 8
tv1631 = -224						; size = 4
tv1286 = -220						; size = 8
_re2$ = -220						; size = 8
tv3685 = -216						; size = 4
tv1264 = -212						; size = 8
_re1$ = -212						; size = 8
tv3687 = -208						; size = 4
tv1268 = -204						; size = 8
_b2$ = -204						; size = 8
tv2861 = -200						; size = 4
tv1274 = -196						; size = 8
_c1$ = -196						; size = 8
_y2$ = -192						; size = 4
tv1258 = -188						; size = 8
_rr$ = -188						; size = 8
_yy1$ = -184						; size = 4
_x1$ = -180						; size = 4
_j$ = -176						; size = 4
tv1938 = -172						; size = 4
tv1656 = -172						; size = 4
_x2$ = -168						; size = 4
tv1221 = -164						; size = 8
tv3681 = -160						; size = 4
tv3677 = -160						; size = 4
tv3672 = -160						; size = 4
tv1652 = -160						; size = 4
tv1127 = -160						; size = 4
tv3673 = -156						; size = 4
tv2255 = -156						; size = 4
tv1648 = -152						; size = 4
tv1116 = -152						; size = 4
_dx2$ = -148						; size = 48
_dx1$ = -100						; size = 48
_r$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_proj_knot_energy_gradient PROC				; COMDAT

; 87   : { edge_id e1 = e_info->id,e2;

	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 88   :   REAL *x1,*x2,*yy1,*y2; /* end coordinates */
; 89   :   REAL power,poww;
; 90   :   REAL energy = 0.0;
; 91   :   REAL dx1[MAXCOORD];
; 92   :   REAL dx2[MAXCOORD];
; 93   :   REAL r[MAXCOORD];
; 94   :   REAL LL1,L1,LL2,L2,rr,re1,re2;
; 95   :   REAL p,en;
; 96   :   REAL c1,c2;
; 97   :   REAL b1,b2;
; 98   :   int i,j;
; 99   : 
; 100  :   power = globals(exponent_param)->value.real;

	mov	eax, DWORD PTR _exponent_param
	fldz
	mov	edx, DWORD PTR _e_info$[ebp]
	fst	QWORD PTR _energy$[ebp]
	push	ebx
	mov	ebx, DWORD PTR [edx]
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	push	esi
	push	edi
	mov	DWORD PTR _e_info$GSCopy$[ebp], edx
	mov	DWORD PTR _e1$[ebp], ebx
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN31@proj_knot_@2
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN33@proj_knot_@2
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN32@proj_knot_@2
$LN33@proj_knot_@2:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN31@proj_knot_@2
	mov	ecx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN32@proj_knot_@2
$LN31@proj_knot_@2:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx]
$LN32@proj_knot_@2:
	fld	QWORD PTR [eax+64]
	mov	esi, DWORD PTR _web+616
	fst	QWORD PTR _power$[ebp]
	xor	ecx, ecx

; 101  :   poww = power/2;

	fmul	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _poww$[ebp]
$LN28@proj_knot_@2:

; 103  :      for ( j = 0 ; j < SDIM ; j++ ) e_info->grad[i][j] = 0.0;

	xor	eax, eax
	test	esi, esi
	jle	SHORT $LN27@proj_knot_@2
$LN25@proj_knot_@2:
	mov	esi, DWORD PTR [edx+1336]
	mov	esi, DWORD PTR [ecx+esi]
	fst	QWORD PTR [esi+eax*8]
	mov	esi, DWORD PTR _web+616
	inc	eax
	cmp	eax, esi
	jl	SHORT $LN25@proj_knot_@2
$LN27@proj_knot_@2:

; 102  :   for ( i = 0 ; i < 2 ; i++ )

	add	ecx, 4
	cmp	ecx, 8
	jl	SHORT $LN28@proj_knot_@2

; 104  :   x1 = get_coord(get_edge_tailv(e1));

	mov	edi, ebx
	fstp	ST(0)
	shr	edi, 27					; 0000001bH
	and	ebx, 134217727				; 07ffffffH
	and	edi, 1
	je	SHORT $LN38@proj_knot_@2
	mov	edx, DWORD PTR _web+124
	mov	eax, DWORD PTR [edx+ebx*4]
	mov	ecx, DWORD PTR _dymem
	mov	edx, DWORD PTR _web+216
	mov	edx, DWORD PTR [edx+ecx+304]
	add	edx, eax
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN37@proj_knot_@2
$LN38@proj_knot_@2:
	mov	ecx, DWORD PTR _web+124
	mov	edx, DWORD PTR [ecx+ebx*4]
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR _web+216
	mov	eax, DWORD PTR [eax+ecx+304]
	add	edx, eax
	mov	eax, DWORD PTR [edx]
$LN37@proj_knot_@2:
	mov	ebx, DWORD PTR _web+104
	mov	ecx, DWORD PTR [ebx+ecx+64]
	mov	ebx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ebx+eax*4]
	add	ebx, ecx
	mov	DWORD PTR _x1$[ebp], ebx

; 105  :   x2 = get_coord(get_edge_headv(e1));

	test	edi, edi
	je	SHORT $LN42@proj_knot_@2
	mov	eax, DWORD PTR [edx]
	jmp	SHORT $LN41@proj_knot_@2
$LN42@proj_knot_@2:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
$LN41@proj_knot_@2:
	mov	edx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edx+eax*4]
	add	edi, ecx

; 106  :   for ( j = 0 ; j < SDIM ; j++ ) dx1[j] = x2[j] - x1[j];

	xor	edx, edx
	mov	DWORD PTR _x2$[ebp], edi
	cmp	esi, 4
	jl	$LC68@proj_knot_@2
	lea	esi, DWORD PTR _dx1$[ebp]
	sub	esi, ebx
	mov	DWORD PTR tv1648[ebp], esi
	lea	esi, DWORD PTR _dx1$[ebp+8]
	sub	esi, ebx
	mov	DWORD PTR tv1652[ebp], esi
	lea	ecx, DWORD PTR [edi+24]
	lea	esi, DWORD PTR _dx1$[ebp+16]
	sub	edi, ebx
	sub	esi, ebx
	mov	DWORD PTR tv1656[ebp], esi
	mov	esi, DWORD PTR _web+616
	lea	eax, DWORD PTR [ebx+8]
	npad	5
$LL69@proj_knot_@2:
	fld	QWORD PTR [ecx-24]
	mov	ebx, DWORD PTR tv1648[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _dx1$[ebp+edx*8-32]
	fld	QWORD PTR [edi+eax-32]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv1652[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv1656[ebp]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [ebx+eax-32]
	lea	ebx, DWORD PTR [esi-3]
	cmp	edx, ebx
	jl	SHORT $LL69@proj_knot_@2
	mov	ebx, DWORD PTR _x1$[ebp]
	mov	edi, DWORD PTR _x2$[ebp]
$LC68@proj_knot_@2:
	cmp	edx, esi
	jge	SHORT $LN67@proj_knot_@2
	lea	ecx, DWORD PTR _dx1$[ebp]
	sub	ecx, ebx
	mov	DWORD PTR tv1648[ebp], ecx
	mov	ecx, esi
	sub	edi, ebx
	lea	eax, DWORD PTR [ebx+edx*8]
	sub	ecx, edx
$LC22@proj_knot_@2:
	fld	QWORD PTR [eax+edi]
	mov	edx, DWORD PTR tv1648[ebp]
	fsub	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fstp	QWORD PTR [eax+edx-8]
	jne	SHORT $LC22@proj_knot_@2
$LN67@proj_knot_@2:

; 107  :   LL1 = SDIM_dot(dx1,dx1);

	lea	eax, DWORD PTR _dx1$[ebp]
	push	esi
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fst	QWORD PTR _LL1$[ebp]
	add	esp, 12					; 0000000cH

; 108  :   L1 = sqrt(LL1);

	call	__CIsqrt
	fstp	QWORD PTR _L1$[ebp]

; 109  :   FOR_ALL_EDGES(e2)

	mov	ecx, DWORD PTR _web+160
	test	ecx, 268435456				; 10000000H
	je	$LN76@proj_knot_@2
	npad	6
$LL19@proj_knot_@2:
	mov	edx, DWORD PTR _web+124
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	edx, DWORD PTR [esi+edx]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	mov	DWORD PTR tv1116[ebp], esi
	je	$LN18@proj_knot_@2

; 110  :     { if ( e2 == e1 ) continue;

	cmp	ecx, DWORD PTR _e1$[ebp]
	je	$LN18@proj_knot_@2

; 111  :       yy1 = get_coord(get_edge_tailv(e2));

	mov	edi, DWORD PTR _dymem
	mov	eax, DWORD PTR _web+216
	mov	ebx, DWORD PTR [eax+edi+304]
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR tv1127[ebp], ecx
	je	SHORT $LN46@proj_knot_@2
	add	ebx, edx
	mov	edx, DWORD PTR _web+636
	mov	eax, DWORD PTR [ebx+edx*4]
	jmp	SHORT $LN45@proj_knot_@2
$LN46@proj_knot_@2:
	mov	eax, DWORD PTR [ebx+edx]
	add	ebx, edx
$LN45@proj_knot_@2:
	mov	edx, DWORD PTR _web+104
	mov	edx, DWORD PTR [edx+edi+64]
	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ecx+eax*4]
	add	edi, edx

; 112  :       y2 = get_coord(get_edge_headv(e2));

	cmp	DWORD PTR tv1127[ebp], 0
	mov	DWORD PTR _yy1$[ebp], edi
	je	SHORT $LN50@proj_knot_@2
	mov	eax, DWORD PTR [ebx]
	jmp	SHORT $LN49@proj_knot_@2
$LN50@proj_knot_@2:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [ebx+eax*4]
$LN49@proj_knot_@2:
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ecx+eax*4]
	add	ebx, edx

; 113  :       for ( j = 0 ; j < SDIM ; j++ ) dx2[j] = y2[j] - yy1[j];

	xor	edx, edx
	cmp	DWORD PTR _web+616, 4
	mov	DWORD PTR _y2$[ebp], ebx
	jl	$LC71@proj_knot_@2
	mov	esi, ebx
	sub	esi, edi
	mov	DWORD PTR tv1938[ebp], esi
	mov	esi, edi
	neg	esi
	mov	DWORD PTR tv3672[ebp], esi
	lea	esi, DWORD PTR _dx2$[ebp+esi]
	mov	DWORD PTR tv3673[ebp], esi
	mov	esi, DWORD PTR tv3672[ebp]
	lea	esi, DWORD PTR _dx2$[ebp+esi+8]
	mov	DWORD PTR tv3675[ebp], esi
	mov	esi, DWORD PTR tv3672[ebp]
	lea	esi, DWORD PTR _dx2$[ebp+esi+16]
	lea	ecx, DWORD PTR [ebx+24]
	lea	eax, DWORD PTR [edi+8]
	mov	DWORD PTR tv3677[ebp], esi
	npad	6
$LL80@proj_knot_@2:
	fld	QWORD PTR [ecx-24]
	mov	esi, DWORD PTR tv1938[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	mov	DWORD PTR _j$[ebp], edx
	add	eax, 32					; 00000020H
	fstp	QWORD PTR _dx2$[ebp+edx*8-32]
	mov	edx, DWORD PTR _web+616
	fld	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv3673[ebp]
	fsub	QWORD PTR [eax-32]
	add	edx, -3					; fffffffdH
	add	ecx, 32					; 00000020H
	cmp	DWORD PTR _j$[ebp], edx
	mov	edx, DWORD PTR _j$[ebp]
	fstp	QWORD PTR [eax+esi-32]
	fld	QWORD PTR [ecx-40]
	mov	esi, DWORD PTR tv3675[ebp]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [eax+esi-32]
	mov	esi, DWORD PTR tv3677[ebp]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [eax+esi-32]
	jl	SHORT $LL80@proj_knot_@2
	mov	esi, DWORD PTR tv1116[ebp]
$LC71@proj_knot_@2:
	cmp	edx, DWORD PTR _web+616
	jge	SHORT $LN70@proj_knot_@2
	lea	ecx, DWORD PTR _dx2$[ebp]
	sub	ecx, edi
	mov	DWORD PTR tv3673[ebp], ecx
	mov	ecx, DWORD PTR _web+616
	mov	esi, ebx
	sub	esi, edi
	lea	eax, DWORD PTR [edi+edx*8]
	sub	ecx, edx
$LC13@proj_knot_@2:
	fld	QWORD PTR [eax+esi]
	mov	edx, DWORD PTR tv3673[ebp]
	fsub	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fstp	QWORD PTR [eax+edx-8]
	jne	SHORT $LC13@proj_knot_@2
	mov	esi, DWORD PTR tv1116[ebp]
$LN70@proj_knot_@2:

; 114  :       LL2 = SDIM_dot(dx2,dx2);

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _dx2$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	fst	QWORD PTR _LL2$[ebp]
	add	esp, 12					; 0000000cH

; 115  :       L2 = sqrt(LL2);

	call	__CIsqrt
	fstp	QWORD PTR _L2$[ebp]

; 116  :       for ( j = 0 ; j < SDIM ; j++ ) 

	xor	edx, edx
	cmp	DWORD PTR _web+616, 4
	jl	$LN79@proj_knot_@2

; 114  :       LL2 = SDIM_dot(dx2,dx2);

	lea	eax, DWORD PTR [edi+8]
	fld	QWORD PTR __real@3fe0000000000000

; 117  :          r[j] = (yy1[j] + y2[j] - x1[j] - x2[j])/2;

	mov	edx, ebx
	sub	edx, edi
	mov	DWORD PTR tv1938[ebp], edx
	mov	edx, edi
	mov	edi, DWORD PTR _x1$[ebp]
	neg	edx
	add	edi, edx
	mov	DWORD PTR tv3679[ebp], edi
	mov	edi, DWORD PTR _x2$[ebp]
	add	edi, edx
	mov	esi, DWORD PTR _x2$[ebp]
	mov	ecx, DWORD PTR _x1$[ebp]
	mov	DWORD PTR tv3681[ebp], edi
	lea	edi, DWORD PTR _r$[ebp+edx]
	mov	DWORD PTR tv3683[ebp], edi
	lea	edi, DWORD PTR _r$[ebp+edx+8]
	lea	edx, DWORD PTR _r$[ebp+edx+16]
	mov	DWORD PTR tv3687[ebp], edx
	mov	DWORD PTR tv3685[ebp], edi
	mov	edi, DWORD PTR _x1$[ebp]
	mov	edx, ebx
	sub	edx, edi
	mov	DWORD PTR tv2620[ebp], edx
	mov	edx, DWORD PTR _x2$[ebp]
	sub	edx, edi
	mov	DWORD PTR tv1631[ebp], edx
	mov	edx, ebx
	sub	edx, DWORD PTR _x2$[ebp]
	lea	edi, DWORD PTR _r$[ebp]
	mov	DWORD PTR tv2861[ebp], edx
	mov	edx, DWORD PTR _web+616
	add	edx, -4					; fffffffcH
	sub	edi, ebx
	shr	edx, 2
	add	esi, 24					; 00000018H
	add	ecx, 16					; 00000010H
	mov	DWORD PTR tv2255[ebp], ebx
	inc	edx
	lea	ebx, DWORD PTR [edx*4]
	mov	DWORD PTR _j$[ebp], ebx
	mov	ebx, DWORD PTR tv2255[ebp]
$LN75@proj_knot_@2:
	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	fadd	QWORD PTR [ebx]
	add	ecx, 32					; 00000020H
	add	esi, 32					; 00000020H
	fsub	QWORD PTR [ecx-48]
	fsub	QWORD PTR [esi-56]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [edi+ebx]
	mov	ebx, DWORD PTR tv1938[ebp]
	fld	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv3679[ebp]
	fadd	QWORD PTR [eax-32]
	fsub	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv3681[ebp]
	fsub	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv3683[ebp]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv2620[ebp]
	fld	QWORD PTR [ebx+ecx-32]
	mov	ebx, DWORD PTR tv1631[ebp]
	fadd	QWORD PTR [eax-24]
	fsub	QWORD PTR [ecx-32]
	fsub	QWORD PTR [ebx+ecx-32]
	mov	ebx, DWORD PTR tv3685[ebp]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv2861[ebp]
	fld	QWORD PTR [ebx+esi-32]
	mov	ebx, DWORD PTR tv3687[ebp]
	fadd	QWORD PTR [eax-16]
	fsub	QWORD PTR [ecx-24]
	fsub	QWORD PTR [esi-32]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv2255[ebp]
	add	ebx, 32					; 00000020H
	dec	edx
	mov	DWORD PTR tv2255[ebp], ebx
	jne	$LN75@proj_knot_@2

; 114  :       LL2 = SDIM_dot(dx2,dx2);

	mov	ebx, DWORD PTR _y2$[ebp]
	mov	edi, DWORD PTR _yy1$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR tv1116[ebp]
	jmp	SHORT $LC74@proj_knot_@2
$LN79@proj_knot_@2:
	fld	QWORD PTR __real@3fe0000000000000
$LC74@proj_knot_@2:

; 116  :       for ( j = 0 ; j < SDIM ; j++ ) 

	cmp	edx, DWORD PTR _web+616
	jge	SHORT $LN101@proj_knot_@2
	mov	ecx, DWORD PTR _x1$[ebp]
	sub	ebx, edi
	lea	eax, DWORD PTR [edi+edx*8]
	neg	edi
	lea	esi, DWORD PTR [edi+ecx]
	mov	ecx, DWORD PTR _x2$[ebp]
	add	ecx, edi
	mov	DWORD PTR tv3681[ebp], ecx
	mov	ecx, DWORD PTR _web+616
	lea	edi, DWORD PTR _r$[ebp+edi]
	sub	ecx, edx
$LC10@proj_knot_@2:

; 117  :          r[j] = (yy1[j] + y2[j] - x1[j] - x2[j])/2;

	fld	QWORD PTR [ebx+eax]
	mov	edx, DWORD PTR tv3681[ebp]
	fadd	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [esi+eax-8]
	fsub	QWORD PTR [edx+eax-8]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [edi+eax-8]
	jne	SHORT $LC10@proj_knot_@2

; 116  :       for ( j = 0 ; j < SDIM ; j++ ) 

	mov	esi, DWORD PTR tv1116[ebp]
$LN101@proj_knot_@2:

; 118  :       rr = SDIM_dot(r,r);

	mov	eax, DWORD PTR _web+616
	fstp	ST(0)
	push	eax
	lea	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	fstp	QWORD PTR _rr$[ebp]

; 119  :       re1 = SDIM_dot(r,dx1);

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _dx1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _r$[ebp]
	push	edx
	call	_dot
	fstp	QWORD PTR _re1$[ebp]

; 120  :       re2 = SDIM_dot(r,dx2);

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _dx2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _r$[ebp]
	push	edx
	call	_dot
	fstp	QWORD PTR _re2$[ebp]

; 121  :       p = pow(rr ,-power/2);

	fld	QWORD PTR _power$[ebp]
	add	esp, 36					; 00000024H
	fmul	QWORD PTR __real@bfe0000000000000
	fld	QWORD PTR _rr$[ebp]
	fxch	ST(1)
	call	__CIpow
	fstp	QWORD PTR _p$[ebp]

; 122  :       b1 = 1 - re1*re1/rr/LL1;

	fld	QWORD PTR _re1$[ebp]
	fld	ST(0)
	fmul	ST(0), ST(1)
	fst	QWORD PTR tv1216[ebp]
	fld	QWORD PTR _rr$[ebp]
	fdiv	ST(1), ST(0)
	fld	QWORD PTR _LL1$[ebp]
	fdiv	ST(2), ST(0)
	fld1
	fld	ST(0)
	fsubrp	ST(4), ST(0)
	fxch	ST(3)
	fst	QWORD PTR _b1$[ebp]

; 123  :       if ( b1 <= 0.0 ) continue;

	fldz
	fcom	ST(1)
	fnstsw	ax
	test	ah, 1
	je	$LN107@proj_knot_@2

; 124  :       b2 = 1 - re2*re2/rr/LL2;

	fld	QWORD PTR _re2$[ebp]
	fmul	ST(0), ST(0)
	fst	QWORD PTR tv1221[ebp]
	fdiv	ST(0), ST(4)
	fdiv	QWORD PTR _LL2$[ebp]
	fsubr	ST(0), ST(5)
	fst	QWORD PTR _b2$[ebp]

; 125  :       if ( b2 <= 0.0 ) continue;

	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jnp	$LN110@proj_knot_@2

; 126  :       if ( poww == 0.0 ) 

	fld	QWORD PTR _poww$[ebp]
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	SHORT $LN113@proj_knot_@2

; 127  :           c1 = c2 = 1.0;

	fld	ST(4)
	fst	QWORD PTR _c2$[ebp]
	fxch	ST(5)
	fstp	QWORD PTR _c1$[ebp]

; 128  :       else 

	jmp	SHORT $LN4@proj_knot_@2
$LN113@proj_knot_@2:

; 126  :       if ( poww == 0.0 ) 

	fstp	ST(3)
	fstp	ST(1)
	fstp	ST(3)
	fstp	ST(1)
	fstp	ST(0)

; 129  :          { c1 = pow(b1,poww);

	fld	QWORD PTR _poww$[ebp]
	call	__CIpow
	fstp	QWORD PTR _c1$[ebp]

; 130  :             c2 = pow(b2,poww);

	fld	QWORD PTR _b2$[ebp]
	fld	QWORD PTR _poww$[ebp]
	call	__CIpow
	fst	QWORD PTR _c2$[ebp]
	fld	QWORD PTR _LL1$[ebp]
	fld	QWORD PTR _rr$[ebp]
	fld	QWORD PTR _re1$[ebp]
	fld	QWORD PTR _b1$[ebp]
	fld	QWORD PTR _b2$[ebp]
	fxch	ST(2)
	fxch	ST(5)
	fxch	ST(4)
	fxch	ST(2)
$LN4@proj_knot_@2:

; 131  :          }
; 132  :       en = L1*L2*p*(c1*b1 + c2*b2);

	fld	QWORD PTR _L2$[ebp]

; 133  :       energy += en;
; 134  :       for ( j = 0 ; j < SDIM ; j++ ) 

	xor	eax, eax
	fmul	QWORD PTR _L1$[ebp]
	fmul	QWORD PTR _p$[ebp]
	fst	QWORD PTR tv1234[ebp]
	fxch	ST(5)
	fmulp	ST(1), ST(0)
	fld	QWORD PTR _c1$[ebp]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fmulp	ST(3), ST(0)
	fld	ST(2)
	fadd	QWORD PTR _energy$[ebp]
	fstp	QWORD PTR _energy$[ebp]
	cmp	DWORD PTR _web+616, eax
	jle	$LN117@proj_knot_@2
	fld	QWORD PTR _power$[ebp]
	fld	ST(0)
	fchs
	fmul	ST(0), ST(4)
	fdiv	ST(0), ST(3)
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(5), ST(0)
	fxch	ST(5)
	fdiv	ST(0), ST(3)
	fld	ST(6)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR tv1258[ebp]
	fld	QWORD PTR tv1216[ebp]
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(5)
	fstp	QWORD PTR tv1268[ebp]
	fld	ST(6)
	fmul	ST(0), ST(6)
	fmulp	ST(7), ST(0)
	fxch	ST(6)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(3)
	fdivrp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR tv1264[ebp]
	fmul	QWORD PTR tv1234[ebp]
	fld	QWORD PTR _c1$[ebp]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv1274[ebp]
	fld	QWORD PTR _re2$[ebp]
	fdiv	ST(0), ST(3)
	fld	QWORD PTR _LL2$[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv1282[ebp]
	fdivr	QWORD PTR tv1221[ebp]
	fdiv	ST(0), ST(3)
	fdivrp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR tv1286[ebp]
	fxch	ST(1)
	fmul	QWORD PTR _c2$[ebp]
	fstp	QWORD PTR tv1290[ebp]
$LN3@proj_knot_@2:

; 135  :         { e_info->grad[0][j] += 2*en/LL1*(-dx1[j])
; 136  :              + (-power)*en/rr*(-r[j])
; 137  :              + L1*L2*p*(power)*c1*(-1)*
; 138  :                  (-re1*re1/LL1/rr/rr*(-r[j])
; 139  :                   -2*re1*re1/rr/LL1/LL1*(-dx1[j])
; 140  :                   + re1/rr/LL1*(-dx1[j] - 2*r[j]))
; 141  :              + L1*L2*p*(power)*c2*(-1)*
; 142  :                  (-re2*re2/LL2/rr/rr*(-r[j])
; 143  :                   + re2/rr/LL2*(-dx2[j]));

	fld	QWORD PTR _r$[ebp+eax*8]
	mov	edx, DWORD PTR _e_info$GSCopy$[ebp]
	fchs
	mov	ecx, DWORD PTR [edx+1336]
	fld	QWORD PTR _dx1$[ebp+eax*8]
	mov	ecx, DWORD PTR [ecx]
	fchs
	lea	ecx, DWORD PTR [ecx+eax*8]
	fld	ST(4)
	fmul	ST(0), ST(1)
	fld	ST(2)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _r$[ebp+eax*8]
	fmul	ST(0), ST(5)
	fsubr	ST(0), ST(2)
	fmul	QWORD PTR tv1258[ebp]
	fld	QWORD PTR tv1264[ebp]
	fmulp	ST(3), ST(0)
	fld	QWORD PTR tv1268[ebp]
	fmul	ST(0), ST(4)
	faddp	ST(3), ST(0)
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR tv1274[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _dx2$[ebp+eax*8]
	fchs
	fmul	QWORD PTR tv1282[ebp]
	fld	QWORD PTR tv1286[ebp]
	fmulp	ST(3), ST(0)
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR tv1290[ebp]
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+1336]

; 144  : 
; 145  :           e_info->grad[1][j] += 2*en/LL1*(dx1[j])
; 146  :              + (-power)*en/rr*(-r[j])
; 147  :              + L1*L2*p*(power)*c1*(-1)*
; 148  :                  (-re1*re1/LL1/rr/rr*(-r[j])
; 149  :                   -2*re1*re1/rr/LL1/LL1*(dx1[j])
; 150  :                   + re1/rr/LL1*(-dx1[j] + 2*r[j]))
; 151  :              + L1*L2*p*(power)*c2*(-1)*
; 152  :                  (-re2*re2/LL2/rr/rr*(-r[j])
; 153  :                   + re2/rr/LL2*(-dx2[j]));

	fld	QWORD PTR _r$[ebp+eax*8]
	mov	ecx, DWORD PTR [edx+4]
	fchs
	lea	ecx, DWORD PTR [ecx+eax*8]
	fld	QWORD PTR _dx1$[ebp+eax*8]
	inc	eax
	fmul	ST(0), ST(4)
	fld	ST(1)
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _r$[ebp+eax*8-8]
	fmul	ST(0), ST(4)
	fsub	QWORD PTR _dx1$[ebp+eax*8-8]
	fmul	QWORD PTR tv1258[ebp]
	fld	QWORD PTR _dx1$[ebp+eax*8-8]
	fmul	QWORD PTR tv1264[ebp]
	fld	QWORD PTR tv1268[ebp]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR tv1274[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _dx2$[ebp+eax*8-8]
	fchs
	fmul	QWORD PTR tv1282[ebp]
	fld	QWORD PTR tv1286[ebp]
	fmulp	ST(3), ST(0)
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR tv1290[ebp]
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	$LN3@proj_knot_@2

; 133  :       energy += en;
; 134  :       for ( j = 0 ; j < SDIM ; j++ ) 

	fstp	ST(1)
$LN122@proj_knot_@2:
	fstp	ST(0)
$LN123@proj_knot_@2:
	fstp	ST(0)
$LN18@proj_knot_@2:

; 109  :   FOR_ALL_EDGES(e2)

	mov	edx, DWORD PTR _web+124
	mov	eax, DWORD PTR [esi+edx]
	mov	ecx, DWORD PTR [eax]
	test	ecx, 268435456				; 10000000H
	jne	$LL19@proj_knot_@2
$LN76@proj_knot_@2:

; 154  :         }
; 155  :     }
; 156  : 
; 157  :   return energy;  /* since doing all pairs */
; 158  : } // end proj_knot_energy_gradient()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _energy$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN107@proj_knot_@2:

; 133  :       energy += en;
; 134  :       for ( j = 0 ; j < SDIM ; j++ ) 

	fstp	ST(3)
	fstp	ST(1)
	fstp	ST(0)
	fstp	ST(2)
	jmp	SHORT $LN122@proj_knot_@2
$LN110@proj_knot_@2:

; 125  :       if ( b2 <= 0.0 ) continue;

	fstp	ST(4)
	fstp	ST(2)
	fstp	ST(0)
	fstp	ST(3)
	fstp	ST(1)
	fstp	ST(1)
	jmp	SHORT $LN123@proj_knot_@2
$LN117@proj_knot_@2:

; 133  :       energy += en;
; 134  :       for ( j = 0 ; j < SDIM ; j++ ) 

	fstp	ST(1)
	fstp	ST(0)
	jmp	SHORT $LN122@proj_knot_@2
_proj_knot_energy_gradient ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@BLKMKJOE@local_hooke_flag?$AA@	; `string'
PUBLIC	_local_hooke_init
EXTRN	_add_global:PROC
EXTRN	_lookup_global:PROC
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_local_hooke_flag DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BB@BLKMKJOE@local_hooke_flag?$AA@
CONST	SEGMENT
??_C@_0BB@BLKMKJOE@local_hooke_flag?$AA@ DB 'local_hooke_flag', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _local_hooke_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_local_hooke_init PROC					; COMDAT

; 186  :   int flag_var;
; 187  :   flag_var = lookup_global(HOOKE_FLAG_NAME);

	push	OFFSET ??_C@_0BB@BLKMKJOE@local_hooke_flag?$AA@
	call	_lookup_global
	add	esp, 4

; 188  :   if ( flag_var < 0 ) /* missing, so add */

	test	eax, eax
	jns	$LN1@local_hook

; 189  :   { flag_var = add_global(HOOKE_FLAG_NAME);

	push	esi
	push	edi
	push	OFFSET ??_C@_0BB@BLKMKJOE@local_hooke_flag?$AA@
	call	_add_global

; 190  :     globals(flag_var)->value.real = 0.0;  /* default */

	mov	esi, eax
	and	esi, -16777216				; ff000000H
	add	esp, 4
	cmp	esi, 268435456				; 10000000H
	je	SHORT $LN4@local_hook
	cmp	esi, 805306368				; 30000000H
	jne	SHORT $LN6@local_hook
	mov	edi, DWORD PTR _localbase
	mov	ecx, eax
	and	ecx, 16777215				; 00ffffffH
	mov	edx, ecx
	imul	edx, 224				; 000000e0H
	add	edx, DWORD PTR [edi]
	jmp	SHORT $LN5@local_hook
$LN6@local_hook:
	cmp	esi, 536870912				; 20000000H
	jne	SHORT $LN4@local_hook
	mov	edx, DWORD PTR _web+5656
	mov	ecx, eax
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR [edx+ecx*4]
	jmp	SHORT $LN5@local_hook
$LN4@local_hook:
	mov	edx, DWORD PTR _web+5652
	mov	edi, DWORD PTR _dymem
	mov	ecx, eax
	and	ecx, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [edx+edi]
$LN5@local_hook:
	fldz
	fstp	QWORD PTR [edx+64]

; 191  :     globals(flag_var)->flags |=  ORDINARY_PARAM | RECALC_PARAMETER | ALWAYS_RECALC;

	cmp	esi, 268435456				; 10000000H
	je	SHORT $LN10@local_hook
	cmp	esi, 805306368				; 30000000H
	jne	SHORT $LN12@local_hook
	mov	edx, DWORD PTR _localbase
	imul	ecx, 224				; 000000e0H
	add	ecx, DWORD PTR [edx]
	jmp	SHORT $LN11@local_hook
$LN12@local_hook:
	cmp	esi, 536870912				; 20000000H
	jne	SHORT $LN10@local_hook
	mov	edx, DWORD PTR _web+5656
	mov	ecx, DWORD PTR [edx+ecx*4]
	jmp	SHORT $LN11@local_hook
$LN10@local_hook:
	mov	edx, DWORD PTR _web+5652
	lea	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edx]
$LN11@local_hook:
	or	DWORD PTR [ecx+192], 134217737		; 08000009H
	pop	edi
	pop	esi
$LN1@local_hook:

; 192  :   }
; 193  :   local_hooke_flag = (int)globals(flag_var)->value.real;

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN16@local_hook
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN18@local_hook
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+64]
	call	__ftol2_sse
	mov	DWORD PTR _local_hooke_flag, eax

; 194  : }  // end local_hooke_init()

	ret	0
$LN18@local_hook:

; 192  :   }
; 193  :   local_hooke_flag = (int)globals(flag_var)->value.real;

	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN16@local_hook
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [eax+64]
	call	__ftol2_sse
	mov	DWORD PTR _local_hooke_flag, eax

; 194  : }  // end local_hooke_init()

	ret	0
$LN16@local_hook:

; 192  :   }
; 193  :   local_hooke_flag = (int)globals(flag_var)->value.real;

	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
	fld	QWORD PTR [eax+64]
	call	__ftol2_sse
	mov	DWORD PTR _local_hooke_flag, eax

; 194  : }  // end local_hooke_init()

	ret	0
_local_hooke_init ENDP
_TEXT	ENDS
PUBLIC	_local_hooke
EXTRN	_get_edge_length:PROC
EXTRN	_get_vertex_evalence:PROC
; Function compile flags: /Ogtp
;	COMDAT _local_hooke
_TEXT	SEGMENT
_l1$ = -8						; size = 8
_v_info$ = 8						; size = 4
_local_hooke PROC					; COMDAT

; 207  : { vertex_id v0 = v_info->id;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v_info$[ebp]
	sub	esp, 8

; 208  :   edge_id e1,e2;
; 209  :   REAL l1,l2,energy;
; 210  : 
; 211  :   if ((!local_hooke_flag) && (get_vertex_evalence(v0) != 2))

	cmp	DWORD PTR _local_hooke_flag, 0
	push	esi
	mov	esi, DWORD PTR [eax]
	jne	SHORT $LN1@local_hook@2
	push	esi
	call	_get_vertex_evalence
	add	esp, 4
	cmp	eax, 2
	je	SHORT $LN1@local_hook@2

; 212  :      return 0.;    /* for now calculation is wrong if flag is set */

	fldz
	pop	esi

; 221  : 
; 222  :   return energy;
; 223  : } // end local_hooke()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN1@local_hook@2:

; 213  : 
; 214  :   /* e1 = get_vertex_edge(v0); */
; 215  :   e1 = get_fe_edge(get_vertex_fe(v0));

	push	esi
	call	_get_vertex_fe
	mov	edx, DWORD PTR _web+460

; 216  :   e2 = get_next_tail_edge(e1);

	mov	esi, DWORD PTR _web+124
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	mov	edx, eax
	mov	ecx, eax
	shr	edx, 27					; 0000001bH
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	and	edx, 1
	mov	esi, DWORD PTR [ecx+edx*4+32]

; 217  : 
; 218  :   l1 = get_edge_length(e1); l2 = get_edge_length(e2);

	push	eax
	call	_get_edge_length
	fstp	QWORD PTR _l1$[ebp]
	push	esi
	call	_get_edge_length

; 219  :   energy = (l1-l2)/(l1+l2);

	fld	QWORD PTR _l1$[ebp]
	fld	ST(0)
	add	esp, 12					; 0000000cH
	fsub	ST(0), ST(2)
	pop	esi
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fdivp	ST(1), ST(0)

; 220  :   energy = energy*energy;

	fmul	ST(0), ST(0)

; 221  : 
; 222  :   return energy;
; 223  : } // end local_hooke()

	mov	esp, ebp
	pop	ebp
	ret	0
_local_hooke ENDP
_TEXT	ENDS
PUBLIC	__real@4010000000000000
PUBLIC	_v_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_local_hooke_gradient
EXTRN	_get_edge_side:PROC
;	COMDAT __real@4010000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\knot2.c
CONST	ENDS
;	COMDAT _local_hooke_gradient
_TEXT	SEGMENT
_energy$ = -140						; size = 8
_l2$ = -132						; size = 8
_e1$ = -124						; size = 4
_l0$ = -120						; size = 8
_grad$ = -120						; size = 8
_l1$ = -112						; size = 8
_v_info$GSCopy$ = -104					; size = 4
_ev1$ = -100						; size = 48
_ev2$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_v_info$ = 8						; size = 4
_local_hooke_gradient PROC				; COMDAT

; 237  : { vertex_id v0 = v_info->id;

	push	ebp
	mov	ebp, esp
	sub	esp, 140				; 0000008cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _v_info$[ebp]

; 238  :   edge_id e1,e2, e0,e3;
; 239  :   REAL l1,l2,grad,sum,energy, l0,l3;
; 240  :   REAL ev1[MAXCOORD], ev2[MAXCOORD];
; 241  :   int i;
; 242  : 
; 243  :   for (i=0; i<SDIM; i++)

	fldz
	xor	eax, eax
	push	esi
	mov	esi, DWORD PTR [ecx]

; 259  : 
; 260  :   e0 = get_next_head_edge(e1); e3 = get_next_head_edge(e2);

	mov	DWORD PTR _v_info$GSCopy$[ebp], ecx
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN34@local_hook@3
$LN13@local_hook@3:

; 244  :      v_info->grad[0][i] = 0.;

	mov	edx, DWORD PTR [ecx+1336]
	mov	edx, DWORD PTR [edx]
	fst	QWORD PTR [edx+eax*8]
	inc	eax
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN13@local_hook@3
$LN34@local_hook@3:

; 245  :   if (!local_hooke_flag && (get_vertex_evalence(v0) != 2))

	cmp	DWORD PTR _local_hooke_flag, 0
	fstp	ST(0)
	jne	SHORT $LN10@local_hook@3
	push	esi
	call	_get_vertex_evalence
	add	esp, 4
	cmp	eax, 2
	je	SHORT $LN10@local_hook@3

; 246  :      return 0.;    /* for now calculation is wrong if flag is set */

	fldz
	pop	esi

; 271  : 
; 272  :   return energy*energy;
; 273  : } // end local_hooke_gradient()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@local_hook@3:
	push	ebx
	push	edi

; 247  : 
; 248  :   e1 = get_fe_edge(get_vertex_fe(v0));

	push	esi
	call	_get_vertex_fe
	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]

; 249  :   e2 = get_next_tail_edge(e1);

	mov	ecx, DWORD PTR _web+124
	mov	ebx, eax
	mov	esi, eax
	and	ebx, 134217727				; 07ffffffH
	shr	esi, 27					; 0000001bH
	add	ebx, ebx
	add	ebx, ebx
	mov	ecx, DWORD PTR [ebx+ecx]
	mov	edx, esi
	and	edx, 1
	mov	edi, DWORD PTR [ecx+edx*4+32]

; 250  : 
; 251  :   l1 = get_edge_length(e1); l2 = get_edge_length(e2);

	push	eax
	mov	DWORD PTR _e1$[ebp], eax
	call	_get_edge_length
	fstp	QWORD PTR _l1$[ebp]
	push	edi
	call	_get_edge_length
	fst	QWORD PTR _l2$[ebp]

; 252  :   sum = l1+l2;

	fld	ST(0)

; 253  :   energy = (l1-l2)/sum;
; 254  :   grad = 4*energy/sum/sum; /* dbydl1 = grad*l2; dbydl2 = -grad*l1 */
; 255  : 
; 256  :   get_edge_side(e1,ev1); get_edge_side(e2,ev2); 

	mov	eax, DWORD PTR _e1$[ebp]
	fld	QWORD PTR _l1$[ebp]
	lea	edx, DWORD PTR _ev1$[ebp]
	fadd	ST(1), ST(0)
	push	edx
	fsubrp	ST(2), ST(0)
	push	eax
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _energy$[ebp]
	fmul	QWORD PTR __real@4010000000000000
	fdiv	ST(0), ST(1)
	fdivrp	ST(1), ST(0)
	fstp	QWORD PTR _grad$[ebp]
	call	_get_edge_side
	lea	ecx, DWORD PTR _ev2$[ebp]
	push	ecx
	push	edi
	call	_get_edge_side

; 257  :   for (i=0; i<SDIM; i++)

	xor	eax, eax
	add	esp, 28					; 0000001cH
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN7@local_hook@3
	fld	QWORD PTR _grad$[ebp]
	fld	QWORD PTR _l2$[ebp]
	fld	QWORD PTR _l1$[ebp]
$LN9@local_hook@3:

; 258  :      v_info->grad[0][i] = -ev1[i]*grad*l2/l1 + ev2[i]*grad*l1/l2;

	fld	QWORD PTR _ev2$[ebp+eax*8]
	mov	edx, DWORD PTR _v_info$GSCopy$[ebp]
	fmul	ST(0), ST(3)
	mov	ecx, DWORD PTR [edx+1336]
	mov	edx, DWORD PTR [ecx]
	inc	eax
	fmul	ST(0), ST(1)
	fdiv	ST(0), ST(2)
	fld	QWORD PTR _ev1$[ebp+eax*8-8]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR [edx+eax*8-8]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN9@local_hook@3

; 257  :   for (i=0; i<SDIM; i++)

	fstp	ST(0)
	fstp	ST(0)
	fstp	ST(0)
$LN7@local_hook@3:

; 259  : 
; 260  :   e0 = get_next_head_edge(e1); e3 = get_next_head_edge(e2);

	mov	eax, DWORD PTR _web+124
	mov	ecx, DWORD PTR [ebx+eax]
	mov	edx, edi
	not	esi
	shr	edx, 27					; 0000001bH
	and	esi, 1
	mov	esi, DWORD PTR [ecx+esi*4+32]
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edi*4]
	not	edx
	and	edx, 1
	mov	edi, DWORD PTR [eax+edx*4+32]
	xor	esi, 134217728				; 08000000H

; 261  :   /*    ---><---.---><---    **
; 262  :   **     e3  e2 v e1  e0     */
; 263  :   l0 = get_edge_length(e0); l3 = get_edge_length(e3);

	push	esi
	xor	edi, 134217728				; 08000000H
	call	_get_edge_length
	fstp	QWORD PTR _l0$[ebp]
	push	edi
	call	_get_edge_length

; 264  : 
; 265  :   sum = l0+l1; grad = 4*(l0-l1)/sum/sum/sum;

	fld	QWORD PTR _l0$[ebp]
	fld	ST(0)

; 266  :   for (i=0; i<SDIM; i++)

	mov	ecx, DWORD PTR _web+616
	fld	QWORD PTR _l1$[ebp]
	add	esp, 8
	fadd	ST(1), ST(0)
	xor	eax, eax
	fld	ST(2)
	pop	edi
	pop	ebx
	fsub	ST(0), ST(1)
	fld	QWORD PTR __real@4010000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fdivrp	ST(3), ST(0)
	test	ecx, ecx
	jle	SHORT $LN39@local_hook@3
$LN6@local_hook@3:

; 267  :      v_info->grad[0][i] += ev1[i]*grad*l0/l1;

	fld	QWORD PTR _ev1$[ebp+eax*8]
	mov	ecx, DWORD PTR _v_info$GSCopy$[ebp]
	fmul	ST(0), ST(3)
	mov	edx, DWORD PTR [ecx+1336]
	mov	ecx, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax*8]
	fmul	ST(0), ST(4)
	inc	eax
	fdiv	ST(0), ST(2)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _web+616
	cmp	eax, ecx
	jl	SHORT $LN6@local_hook@3
$LN39@local_hook@3:

; 266  :   for (i=0; i<SDIM; i++)

	fstp	ST(2)

; 268  :   sum = l2+l3; grad = 4*(l2-l3)/sum/sum/sum;
; 269  :   for (i=0; i<SDIM; i++)

	xor	eax, eax
	fstp	ST(2)
	fstp	ST(1)
	fld	ST(1)
	fld	QWORD PTR _l2$[ebp]
	fadd	ST(1), ST(0)
	fld	ST(0)
	fsub	ST(0), ST(4)
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fdiv	ST(0), ST(1)
	fdiv	ST(0), ST(1)
	fdivrp	ST(1), ST(0)
	test	ecx, ecx
	jle	SHORT $LN42@local_hook@3
$LN3@local_hook@3:

; 270  :      v_info->grad[0][i] -= ev2[i]*grad*l3/l2;

	fld	QWORD PTR _ev2$[ebp+eax*8]
	mov	edx, DWORD PTR _v_info$GSCopy$[ebp]
	fmul	ST(0), ST(1)
	mov	ecx, DWORD PTR [edx+1336]
	mov	edx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [edx+eax*8]
	fmul	ST(0), ST(3)
	inc	eax
	fdiv	ST(0), ST(2)
	fsubr	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN3@local_hook@3
$LN42@local_hook@3:

; 271  : 
; 272  :   return energy*energy;
; 273  : } // end local_hooke_gradient()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(0)
	fstp	ST(0)
	xor	ecx, ebp
	fstp	ST(0)
	pop	esi
	fld	QWORD PTR _energy$[ebp]
	fmul	ST(0), ST(0)
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_local_hooke_gradient ENDP
_TEXT	ENDS
PUBLIC	__real@400921fb54442d18
PUBLIC	__$ArrayPad$
PUBLIC	_average_crossing
;	COMDAT __real@400921fb54442d18
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\knot2.c
CONST	ENDS
;	COMDAT _average_crossing
_TEXT	SEGMENT
_LL1$ = -236						; size = 8
_de1$ = -228						; size = 8
_e1e2$ = -220						; size = 8
tv2571 = -212						; size = 4
tv3558 = -208						; size = 4
tv3556 = -204						; size = 4
tv3560 = -200						; size = 4
_yy1$ = -196						; size = 4
tv2835 = -192						; size = 4
tv3568 = -188						; size = 4
_energy$ = -184						; size = 8
tv3562 = -176						; size = 4
_de2$ = -172						; size = 8
_e1$ = -164						; size = 4
tv2844 = -160						; size = 4
tv3554 = -156						; size = 4
tv3040 = -152						; size = 4
tv3564 = -148						; size = 4
_dd$ = -144						; size = 8
_LL2$ = -136						; size = 8
tv3571 = -128						; size = 4
tv3566 = -124						; size = 4
tv1808 = -124						; size = 4
tv1800 = -120						; size = 4
tv1245 = -120						; size = 4
tv3573 = -116						; size = 4
tv3570 = -116						; size = 4
_x1$ = -112						; size = 4
_x2$ = -108						; size = 4
tv1804 = -104						; size = 4
tv1253 = -104						; size = 4
_y2$ = -104						; size = 4
_dx2$ = -100						; size = 48
_dx1$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_average_crossing PROC					; COMDAT

; 300  : { edge_id e1 = e_info->id,e2;

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _e_info$[ebp]

; 301  :   REAL *x1,*x2,*yy1,*y2; /* end coordinates */
; 302  :   REAL ee,energy = 0.0;

	fldz
	mov	eax, DWORD PTR [eax]
	fstp	QWORD PTR _energy$[ebp]

; 303  :   REAL dx1[MAXCOORD];
; 304  :   REAL dx2[MAXCOORD];
; 305  :   REAL LL1,LL2,dd,de1,de2;
; 306  :   REAL e1e2;
; 307  :   int j;
; 308  : 
; 309  :   x1 = get_coord(get_edge_tailv(e1));

	mov	ecx, DWORD PTR _web+124
	push	ebx
	push	esi
	push	edi
	mov	edi, eax
	mov	DWORD PTR _e1$[ebp], eax
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR _web+216
	mov	eax, DWORD PTR [eax+ecx+304]
	shr	edi, 27					; 0000001bH
	add	edx, eax
	and	edi, 1
	je	SHORT $LN17@average_cr
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN16@average_cr
$LN17@average_cr:
	mov	eax, DWORD PTR [edx]
$LN16@average_cr:
	mov	esi, DWORD PTR _web+104
	mov	ecx, DWORD PTR [esi+ecx+64]
	mov	ebx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ebx+eax*4]
	add	esi, ecx
	mov	DWORD PTR _x1$[ebp], esi

; 310  :   x2 = get_coord(get_edge_headv(e1));

	test	edi, edi
	je	SHORT $LN21@average_cr
	mov	eax, DWORD PTR [edx]
	jmp	SHORT $LN20@average_cr
$LN21@average_cr:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
$LN20@average_cr:
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ebx+eax*4]
	add	ebx, ecx

; 311  :   for ( j = 0 ; j < SDIM ; j++ ) dx1[j] = x2[j] - x1[j];

	mov	ecx, DWORD PTR _web+616
	xor	edx, edx
	mov	DWORD PTR _x2$[ebp], ebx
	cmp	ecx, 4
	jl	SHORT $LC39@average_cr
	lea	edi, DWORD PTR _dx1$[ebp]
	sub	edi, esi
	mov	DWORD PTR tv1800[ebp], edi
	lea	edi, DWORD PTR _dx1$[ebp+8]
	sub	edi, esi
	mov	DWORD PTR tv1804[ebp], edi
	lea	ecx, DWORD PTR [ebx+24]
	lea	edi, DWORD PTR _dx1$[ebp+16]
	sub	ebx, esi
	sub	edi, esi
	lea	eax, DWORD PTR [esi+8]
	mov	DWORD PTR tv1808[ebp], edi
	npad	8
$LL40@average_cr:
	fld	QWORD PTR [ecx-24]
	mov	edi, DWORD PTR tv1800[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _dx1$[ebp+edx*8-32]
	fld	QWORD PTR [ebx+eax-32]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv1804[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv1808[ebp]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR _web+616
	add	edi, -3					; fffffffdH
	cmp	edx, edi
	jl	SHORT $LL40@average_cr
	mov	ecx, DWORD PTR _web+616
	mov	ebx, DWORD PTR _x2$[ebp]
$LC39@average_cr:
	cmp	edx, ecx
	jge	SHORT $LN38@average_cr
	lea	edi, DWORD PTR _dx1$[ebp]
	sub	ebx, esi
	sub	edi, esi
	lea	eax, DWORD PTR [esi+edx*8]
	sub	ecx, edx
$LC13@average_cr:
	fld	QWORD PTR [eax+ebx]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax+edi-8]
	jne	SHORT $LC13@average_cr
	mov	ecx, DWORD PTR _web+616
$LN38@average_cr:

; 312  :   LL1 = SDIM_dot(dx1,dx1);

	push	ecx
	lea	ecx, DWORD PTR _dx1$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	fstp	QWORD PTR _LL1$[ebp]

; 313  :   FOR_ALL_EDGES(e2)

	mov	ecx, DWORD PTR _web+160
	fld	QWORD PTR __real@3fe0000000000000
	add	esp, 12					; 0000000cH
	test	ecx, 268435456				; 10000000H
	je	$LN44@average_cr
	fldz
$LN48@average_cr:
	mov	edx, DWORD PTR _web+124
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [edi+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	mov	DWORD PTR tv1245[ebp], edi
	je	$LN9@average_cr

; 314  :     { if ( e2 <= e1 ) continue; /* each pair once */

	cmp	ecx, DWORD PTR _e1$[ebp]
	jbe	$LN9@average_cr

; 315  :       yy1 = get_coord(get_edge_tailv(e2));

	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR tv1253[ebp], ecx
	je	SHORT $LN25@average_cr
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	add	edx, edi
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN24@average_cr
$LN25@average_cr:
	mov	ecx, DWORD PTR _web+216
	mov	edx, DWORD PTR _dymem
	mov	edx, DWORD PTR [ecx+edx+304]
	mov	eax, DWORD PTR [edx+edi]
	add	edx, edi
$LN24@average_cr:
	mov	ecx, DWORD PTR _web+104
	mov	esi, DWORD PTR _dymem
	mov	esi, DWORD PTR [ecx+esi+64]
	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ecx+eax*4]
	add	ebx, esi

; 316  :       y2 = get_coord(get_edge_headv(e2));

	cmp	DWORD PTR tv1253[ebp], 0
	mov	DWORD PTR _yy1$[ebp], ebx
	je	SHORT $LN29@average_cr
	mov	eax, DWORD PTR [edx]
	jmp	SHORT $LN28@average_cr
$LN29@average_cr:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
$LN28@average_cr:

; 317  :       LL2 = dd = de1 = de2 = e1e2 = 0.0;

	fld	ST(0)
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fst	QWORD PTR _e1e2$[ebp]
	fld	ST(1)
	add	edx, esi
	fld	ST(2)

; 318  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	cmp	DWORD PTR _web+616, 4
	fld	ST(3)
	fst	QWORD PTR _dd$[ebp]
	mov	DWORD PTR _y2$[ebp], edx
	fxch	ST(4)
	fstp	QWORD PTR _LL2$[ebp]
	jl	$LC42@average_cr

; 327  :             e1e2 += dx1[j]*dx2[j];

	lea	ecx, DWORD PTR [edx+16]
	fstp	ST(2)
	sub	edx, ebx
	mov	DWORD PTR tv2571[ebp], edx
	mov	edx, ebx
	neg	edx
	lea	eax, DWORD PTR [ebx+8]
	mov	ebx, DWORD PTR _x1$[ebp]
	add	ebx, edx
	mov	DWORD PTR tv3554[ebp], ebx
	mov	ebx, DWORD PTR _x2$[ebp]
	add	ebx, edx
	mov	DWORD PTR tv3556[ebp], ebx
	lea	ebx, DWORD PTR _dx2$[ebp+edx]
	mov	DWORD PTR tv3558[ebp], ebx
	lea	ebx, DWORD PTR _dx2$[ebp+edx+8]
	mov	DWORD PTR tv3560[ebp], ebx
	lea	ebx, DWORD PTR _dx2$[ebp+edx+16]
	mov	DWORD PTR tv3562[ebp], ebx
	lea	ebx, DWORD PTR _dx1$[ebp+edx]
	mov	edi, DWORD PTR _x2$[ebp]
	mov	DWORD PTR tv3564[ebp], ebx
	lea	ebx, DWORD PTR _dx1$[ebp+edx+8]
	lea	edx, DWORD PTR _dx1$[ebp+edx+16]
	mov	DWORD PTR tv3568[ebp], edx
	mov	edx, DWORD PTR _y2$[ebp]
	neg	edx
	mov	DWORD PTR tv3570[ebp], edx
	add	edx, DWORD PTR _x1$[ebp]
	mov	DWORD PTR tv3566[ebp], ebx
	mov	ebx, DWORD PTR _x2$[ebp]
	mov	DWORD PTR tv3571[ebp], edx
	mov	edx, DWORD PTR tv3570[ebp]
	add	edx, ebx
	mov	DWORD PTR tv3573[ebp], edx
	mov	edx, DWORD PTR _x1$[ebp]
	sub	edx, ebx
	mov	DWORD PTR tv2835[ebp], edx
	mov	edx, DWORD PTR _x1$[ebp]
	lea	ebx, DWORD PTR _dx2$[ebp]
	sub	ebx, edx
	mov	DWORD PTR tv2844[ebp], ebx
	lea	ebx, DWORD PTR _dx1$[ebp]
	add	edi, 24					; 00000018H
	sub	edx, ebx
	mov	DWORD PTR tv3040[ebp], edx
	jmp	SHORT $LN43@average_cr
	npad	1
$LL72@average_cr:
	mov	edx, DWORD PTR tv3040[ebp]
	fstp	ST(0)
	fld	QWORD PTR _dd$[ebp]
	fxch	ST(2)
	fxch	ST(1)
$LN43@average_cr:

; 319  :       {
; 320  :             REAL rj;
; 321  :             dx2[j] = y2[j] - yy1[j];

	fld	QWORD PTR [ecx-16]
	mov	ebx, DWORD PTR tv2844[ebp]
	fsub	QWORD PTR [eax-8]

; 327  :             e1e2 += dx1[j]*dx2[j];

	lea	edx, DWORD PTR [edx+esi*8]
	lea	edx, DWORD PTR _dx1$[ebp+edx]
	fst	QWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR tv3558[ebp]
	fld	QWORD PTR [ecx-16]
	fadd	QWORD PTR [eax-8]
	fsub	QWORD PTR [edx]
	mov	edx, DWORD PTR tv2571[ebp]
	fsub	QWORD PTR [edi-24]
	fmul	ST(0), ST(5)
	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(5), ST(0)
	fld	QWORD PTR _dx1$[ebp+esi*8]
	fmul	ST(0), ST(1)
	faddp	ST(4), ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(2), ST(0)
	fld	QWORD PTR [edx+eax]
	fsub	QWORD PTR [eax]
	fst	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv3560[ebp]
	fld	QWORD PTR [eax]
	fadd	QWORD PTR [edx+eax]
	mov	edx, DWORD PTR tv3554[ebp]
	fsub	QWORD PTR [edx+eax]
	mov	edx, DWORD PTR tv3556[ebp]
	fsub	QWORD PTR [edx+eax]
	mov	edx, DWORD PTR tv3564[ebp]
	fmul	ST(0), ST(6)
	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(6), ST(0)
	fld	ST(0)
	fmul	QWORD PTR [edx+eax]
	faddp	ST(5), ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR _de2$[ebp]
	fld	QWORD PTR [ecx]
	fsub	QWORD PTR [eax+8]
	fst	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv3571[ebp]
	fld	QWORD PTR [ecx]
	fadd	QWORD PTR [eax+8]
	fsub	QWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR tv3573[ebp]
	fsub	QWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR tv3566[ebp]
	fmul	ST(0), ST(6)
	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(6), ST(0)
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv3562[ebp]
	fmul	ST(0), ST(1)
	faddp	ST(5), ST(0)
	fxch	ST(4)
	fstp	QWORD PTR _de1$[ebp]
	fld	ST(0)
	fmulp	ST(4), ST(0)
	fxch	ST(3)
	fadd	QWORD PTR _de2$[ebp]
	fstp	QWORD PTR _de2$[ebp]
	fld	QWORD PTR [ecx+8]
	fsub	QWORD PTR [eax+16]
	fst	QWORD PTR [ebx+eax]
	fld	ST(1)
	fmul	ST(0), ST(2)
	fadd	QWORD PTR _LL2$[ebp]
	fld	ST(3)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	ST(4)
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fld	ST(1)

; 322  :             LL2 += dx2[j]*dx2[j];
; 323  :             rj = (yy1[j] + y2[j] - x1[j] - x2[j])/2;

	fmul	ST(0), ST(2)
	mov	ebx, DWORD PTR tv2835[ebp]

; 327  :             e1e2 += dx1[j]*dx2[j];

	add	esi, 4
	add	eax, 32					; 00000020H
	faddp	ST(1), ST(0)
	add	ecx, 32					; 00000020H
	add	edi, 32					; 00000020H
	fstp	QWORD PTR _LL2$[ebp]
	fld	QWORD PTR [ecx-24]
	fadd	QWORD PTR [eax-16]
	fsub	QWORD PTR [ebx+edi-32]
	mov	ebx, DWORD PTR tv3568[ebp]
	fsub	QWORD PTR [edi-32]
	fmul	ST(0), ST(6)
	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(6), ST(0)
	fxch	ST(5)
	fstp	QWORD PTR _dd$[ebp]
	fld	QWORD PTR [ebx+eax-32]
	fmul	ST(0), ST(5)
	fadd	QWORD PTR _de1$[ebp]
	fld	ST(1)
	fmulp	ST(6), ST(0)
	fxch	ST(5)
	fadd	QWORD PTR _de2$[ebp]
	fxch	ST(2)
	fmul	QWORD PTR _dx1$[ebp+esi*8-32]
	fadd	QWORD PTR _e1e2$[ebp]
	fxch	ST(3)
	fmul	QWORD PTR [edx+eax-32]
	mov	edx, DWORD PTR tv3566[ebp]
	faddp	ST(3), ST(0)
	fld	QWORD PTR [edx+eax-32]
	mov	edx, DWORD PTR _web+616
	fmulp	ST(4), ST(0)
	add	edx, -3					; fffffffdH
	fxch	ST(2)
	faddp	ST(3), ST(0)
	fld	QWORD PTR [ebx+eax-32]
	fmulp	ST(2), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fst	QWORD PTR _e1e2$[ebp]
	cmp	esi, edx
	jl	$LL72@average_cr
	fld	QWORD PTR _dd$[ebp]
	mov	ebx, DWORD PTR _yy1$[ebp]
	mov	edx, DWORD PTR _y2$[ebp]
	fxch	ST(3)
	mov	edi, DWORD PTR tv1245[ebp]
	fxch	ST(1)
	fxch	ST(2)
	fxch	ST(1)
$LC42@average_cr:

; 318  :       for ( j = 0 ; j < SDIM ; j++ )

	cmp	esi, DWORD PTR _web+616
	jge	$LN41@average_cr
	mov	ecx, edx
	lea	eax, DWORD PTR [edx+esi*8]
	sub	ebx, edx
	mov	edx, DWORD PTR _x1$[ebp]
	neg	ecx
	add	edx, ecx
	mov	DWORD PTR tv3571[ebp], edx
	mov	edx, DWORD PTR _x2$[ebp]
	add	edx, ecx
	mov	DWORD PTR tv3573[ebp], edx
	mov	edx, DWORD PTR _web+616
	lea	edi, DWORD PTR _dx2$[ebp+ecx]
	lea	ecx, DWORD PTR _dx1$[ebp+ecx]
	sub	edx, esi
$LN47@average_cr:

; 319  :       {
; 320  :             REAL rj;
; 321  :             dx2[j] = y2[j] - yy1[j];

	fld	QWORD PTR [eax]

; 322  :             LL2 += dx2[j]*dx2[j];
; 323  :             rj = (yy1[j] + y2[j] - x1[j] - x2[j])/2;

	mov	esi, DWORD PTR tv3571[ebp]
	fsub	QWORD PTR [ebx+eax]
	add	eax, 8
	dec	edx
	fst	QWORD PTR [edi+eax-8]
	fld	ST(0)
	fmul	ST(0), ST(1)
	fadd	QWORD PTR _LL2$[ebp]
	fstp	QWORD PTR _LL2$[ebp]
	fld	QWORD PTR [ebx+eax-8]
	fadd	QWORD PTR [eax-8]
	fsub	QWORD PTR [esi+eax-8]
	mov	esi, DWORD PTR tv3573[ebp]
	fsub	QWORD PTR [esi+eax-8]
	fmul	ST(0), ST(6)

; 324  :             dd += rj*rj;

	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(6), ST(0)

; 325  :             de1 += rj*dx1[j];

	fld	QWORD PTR [ecx+eax-8]
	fmul	ST(0), ST(1)
	faddp	ST(3), ST(0)

; 326  :             de2 += rj*dx2[j];

	fmul	ST(0), ST(1)
	faddp	ST(3), ST(0)

; 327  :             e1e2 += dx1[j]*dx2[j];

	fmul	QWORD PTR [ecx+eax-8]
	faddp	ST(3), ST(0)
	jne	SHORT $LN47@average_cr

; 324  :             dd += rj*rj;

	mov	edi, DWORD PTR tv1245[ebp]
	fxch	ST(3)
	fst	QWORD PTR _dd$[ebp]
	fxch	ST(3)
$LN41@average_cr:

; 328  :       }
; 329  :       ee = (LL1*LL2*dd + 2*e1e2*de1*de2
; 330  :                             - LL1*de2*de2 - LL2*de1*de1 - dd*e1e2*e1e2)/dd;

	fld	ST(2)
	fadd	ST(0), ST(0)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(2)
	fld	QWORD PTR _LL2$[ebp]
	fld	QWORD PTR _LL1$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(6)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(3)
	fmulp	ST(3), ST(0)
	fsubrp	ST(2), ST(0)
	fld	QWORD PTR _LL2$[ebp]
	fmul	ST(0), ST(1)
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fld	ST(1)
	fmul	ST(0), ST(3)
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	fdivrp	ST(1), ST(0)

; 331  :       if (ee>0.)

	fldz
	fcom	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN83@average_cr
	fstp	ST(0)
	fstp	ST(1)

; 332  :             energy += sqrt(ee)/dd;

	call	__CIsqrt
	fdiv	QWORD PTR _dd$[ebp]
	fadd	QWORD PTR _energy$[ebp]
	fstp	QWORD PTR _energy$[ebp]
	fld	QWORD PTR __real@3fe0000000000000
	fldz
	jmp	SHORT $LN9@average_cr
$LN83@average_cr:

; 331  :       if (ee>0.)

	fstp	ST(1)
$LN9@average_cr:

; 313  :   FOR_ALL_EDGES(e2)

	mov	ecx, DWORD PTR [edi]
	test	ecx, 268435456				; 10000000H
	jne	$LN48@average_cr

; 332  :             energy += sqrt(ee)/dd;

	fstp	ST(0)
$LN44@average_cr:

; 333  :     }
; 334  :   return energy/2/M_PI;

	fmul	QWORD PTR _energy$[ebp]

; 335  : } // end average_crossing()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	fdiv	QWORD PTR __real@400921fb54442d18
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_average_crossing ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_twist
EXTRN	_triple_prod:PROC
EXTRN	_cross_prod:PROC
EXTRN	__CIasin:PROC
; Function compile flags: /Ogtp
;	COMDAT _twist
_TEXT	SEGMENT
tv898 = -276						; size = 8
_l2$ = -268						; size = 8
_l0$ = -260						; size = 8
_l1$ = -252						; size = 8
_a2$ = -244						; size = 48
_a0$ = -196						; size = 48
_a12$ = -148						; size = 48
_a01$ = -100						; size = 48
_a1$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_twist	PROC						; COMDAT

; 367  : { edge_id e1 = e_info->id, e0,e2;

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _e_info$[ebp]

; 368  :   REAL a0[MAXCOORD],a1[MAXCOORD],a2[MAXCOORD]; /* edge vectors */
; 369  :   REAL a01[MAXCOORD], a12[MAXCOORD];
; 370  :   REAL l0 = 0.0, l1 = 0.0, l2 = 0.0;

	fldz

; 371  :   int j;
; 372  : 
; 373  :   e0 = get_next_tail_edge(e1);
; 374  :   e2 = get_next_head_edge(e1);

	mov	edx, DWORD PTR _web+124
	fst	QWORD PTR _l0$[ebp]
	push	esi
	fst	QWORD PTR _l1$[ebp]
	mov	esi, DWORD PTR [eax]
	fstp	QWORD PTR _l2$[ebp]
	mov	ecx, esi
	mov	eax, esi
	shr	eax, 27					; 0000001bH
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, eax
	not	edx
	push	edi
	and	edx, 1
	mov	edi, DWORD PTR [ecx+edx*4+32]

; 375  :   get_edge_side(e0,a0); get_edge_side(e1,a1); get_edge_side(e2,a2);

	lea	edx, DWORD PTR _a0$[ebp]
	and	eax, 1
	mov	eax, DWORD PTR [ecx+eax*4+32]
	push	edx
	push	eax
	xor	edi, 134217728				; 08000000H
	call	_get_edge_side
	lea	ecx, DWORD PTR _a1$[ebp]
	push	ecx
	push	esi
	call	_get_edge_side
	lea	edx, DWORD PTR _a2$[ebp]
	push	edx
	push	edi
	call	_get_edge_side

; 376  : 
; 377  :   cross_prod(a0,a1,a01); cross_prod(a1,a2,a12);

	lea	eax, DWORD PTR _a01$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a0$[ebp]
	push	edx
	call	_cross_prod
	lea	eax, DWORD PTR _a12$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a1$[ebp]
	push	edx
	call	_cross_prod

; 378  : 
; 379  :   for ( j = 0 ; j < SDIM ; j++ )

	fld	QWORD PTR _l1$[ebp]
	mov	ecx, DWORD PTR _web+616
	fld	QWORD PTR _l0$[ebp]
	fld	QWORD PTR _l2$[ebp]
	add	esp, 48					; 00000030H
	xor	eax, eax
	pop	edi
	pop	esi
	cmp	ecx, 4
	jl	$LN16@twist
	lea	edx, DWORD PTR [ecx-3]
$LN15@twist:

; 380  :   {
; 381  :      l0 += a01[j]*a01[j];

	fld	QWORD PTR _a01$[ebp+eax*8]

; 383  :      l2 += a12[j]*a12[j];

	add	eax, 4
	fld	QWORD PTR _a01$[ebp+eax*8-24]
	fld	QWORD PTR _a01$[ebp+eax*8-16]
	fld	QWORD PTR _a01$[ebp+eax*8-8]
	fld	ST(3)
	fmulp	ST(4), ST(0)
	fxch	ST(3)
	faddp	ST(5), ST(0)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fxch	ST(4)
	faddp	ST(1), ST(0)
	fld	ST(3)
	fmulp	ST(4), ST(0)
	faddp	ST(3), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(2), ST(0)
	fld	QWORD PTR _a1$[ebp+eax*8-32]
	fld	QWORD PTR _a1$[ebp+eax*8-24]
	fld	QWORD PTR _a1$[ebp+eax*8-16]
	fld	QWORD PTR _a1$[ebp+eax*8-8]
	fld	ST(3)
	fmulp	ST(4), ST(0)
	fxch	ST(3)
	faddp	ST(6), ST(0)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fxch	ST(5)
	faddp	ST(1), ST(0)
	fld	ST(4)
	fmulp	ST(5), ST(0)
	faddp	ST(4), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(3), ST(0)
	fld	QWORD PTR _a12$[ebp+eax*8-32]
	fld	QWORD PTR _a12$[ebp+eax*8-24]
	fld	QWORD PTR _a12$[ebp+eax*8-16]
	fld	QWORD PTR _a12$[ebp+eax*8-8]
	fld	ST(3)
	fmulp	ST(4), ST(0)
	fxch	ST(3)
	faddp	ST(4), ST(0)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fxch	ST(3)
	faddp	ST(1), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	cmp	eax, edx
	jl	$LN15@twist
	fst	QWORD PTR _l2$[ebp]
	fxch	ST(2)
	fst	QWORD PTR _l1$[ebp]
	fxch	ST(1)
	fst	QWORD PTR _l0$[ebp]
	jmp	SHORT $LC14@twist
$LN16@twist:
	fxch	ST(2)
	fxch	ST(1)
$LC14@twist:

; 378  : 
; 379  :   for ( j = 0 ; j < SDIM ; j++ )

	cmp	eax, ecx
	jge	SHORT $LN21@twist
$LC4@twist:

; 380  :   {
; 381  :      l0 += a01[j]*a01[j];

	fld	QWORD PTR _a01$[ebp+eax*8]
	inc	eax
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)

; 382  :      l1 += a1[j]*a1[j];

	fld	QWORD PTR _a1$[ebp+eax*8-8]
	fmul	ST(0), ST(0)
	faddp	ST(2), ST(0)

; 383  :      l2 += a12[j]*a12[j];

	fld	QWORD PTR _a12$[ebp+eax*8-8]
	fmul	ST(0), ST(0)
	faddp	ST(3), ST(0)
	cmp	eax, ecx
	jl	SHORT $LC4@twist
	fxch	ST(2)
	fst	QWORD PTR _l2$[ebp]
	fxch	ST(1)
	fstp	QWORD PTR _l1$[ebp]
	fxch	ST(1)
	fst	QWORD PTR _l0$[ebp]
	jmp	SHORT $LN13@twist
$LN21@twist:

; 380  :   {
; 381  :      l0 += a01[j]*a01[j];

	fstp	ST(1)
$LN13@twist:

; 384  :   }
; 385  : 
; 386  :   if ( l0*l2 == 0.0 ) return 0.0;

	fmulp	ST(1), ST(0)
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jnp	SHORT $LN5@twist

; 387  :   return asin(triple_prod(a0,a1,a2)*sqrt(l1/l0/l2))/2/M_PI;

	lea	eax, DWORD PTR _a2$[ebp]
	fstp	ST(0)
	push	eax
	lea	ecx, DWORD PTR _a1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a0$[ebp]
	push	edx
	call	_triple_prod
	fstp	QWORD PTR tv898[ebp]
	fld	QWORD PTR _l1$[ebp]
	add	esp, 12					; 0000000cH
	fdiv	QWORD PTR _l0$[ebp]
	fdiv	QWORD PTR _l2$[ebp]
	call	__CIsqrt
	fmul	QWORD PTR tv898[ebp]
	call	__CIasin
	fmul	QWORD PTR __real@3fe0000000000000
	fdiv	QWORD PTR __real@400921fb54442d18
$LN5@twist:

; 388  : } // end twist()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_twist	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0FC@IGCPFIKD@The?5sq_torsion_mark?5edge?5attribu@ ; `string'
PUBLIC	??_C@_0BA@FMHHNIBG@sq_torsion_mark?$AA@		; `string'
PUBLIC	??_C@_0CK@HJBNANOO@Method?5sq_torsion?5only?5for?5LINEA@ ; `string'
PUBLIC	_sq_torsion_init
EXTRN	_sqtor_marked_edge_attr:DWORD
EXTRN	_find_extra:PROC
EXTRN	_kb_error:PROC
;	COMDAT ??_C@_0FC@IGCPFIKD@The?5sq_torsion_mark?5edge?5attribu@
CONST	SEGMENT
??_C@_0FC@IGCPFIKD@The?5sq_torsion_mark?5edge?5attribu@ DB 'The sq_torsio'
	DB	'n_mark edge attribute is missing; needed for the sq_torsion m'
	DB	'ethod.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FMHHNIBG@sq_torsion_mark?$AA@
CONST	SEGMENT
??_C@_0BA@FMHHNIBG@sq_torsion_mark?$AA@ DB 'sq_torsion_mark', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@HJBNANOO@Method?5sq_torsion?5only?5for?5LINEA@
CONST	SEGMENT
??_C@_0CK@HJBNANOO@Method?5sq_torsion?5only?5for?5LINEA@ DB 'Method sq_to'
	DB	'rsion only for LINEAR model.', 0aH, 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _sq_torsion_init
_TEXT	SEGMENT
_eltype$ = -4						; size = 4
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_sq_torsion_init PROC					; COMDAT

; 430  : { int eltype;

	push	ebp
	mov	ebp, esp
	push	ecx

; 431  : 
; 432  :   if ( web.modeltype != LINEAR )

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN2@sq_torsion

; 433  :     kb_error(2865,"Method sq_torsion only for LINEAR model.\n",
; 434  :        RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CK@HJBNANOO@Method?5sq_torsion?5only?5for?5LINEA@
	push	2865					; 00000b31H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN2@sq_torsion:

; 435  : 
; 436  :   sqtor_marked_edge_attr = find_extra("sq_torsion_mark",&eltype);

	lea	eax, DWORD PTR _eltype$[ebp]
	push	eax
	push	OFFSET ??_C@_0BA@FMHHNIBG@sq_torsion_mark?$AA@
	call	_find_extra
	add	esp, 8
	mov	DWORD PTR _sqtor_marked_edge_attr, eax

; 437  : 
; 438  :   if ( sqtor_marked_edge_attr <= 0 )

	test	eax, eax
	jg	SHORT $LN1@sq_torsion

; 439  :       kb_error(2184,"The sq_torsion_mark edge attribute is missing; needed for the sq_torsion method.\n",
; 440  :         RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0FC@IGCPFIKD@The?5sq_torsion_mark?5edge?5attribu@
	push	2184					; 00000888H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@sq_torsion:

; 441  : 
; 442  : } // end sq_torsion_init()

	mov	esp, ebp
	pop	ebp
	ret	0
_sq_torsion_init ENDP
_TEXT	ENDS
PUBLIC	__real@c000000000000000
PUBLIC	??_C@_0CH@GBBIPLAK@More?5than?52?5marked?5edges?5at?5vert@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	_e_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_sq_torsion_all
EXTRN	_errmsg:BYTE
EXTRN	_sprintf:PROC
EXTRN	_elnames:BYTE
;	COMDAT __real@c000000000000000
CONST	SEGMENT
__real@c000000000000000 DQ 0c000000000000000r	; -2
CONST	ENDS
;	COMDAT ??_C@_0CH@GBBIPLAK@More?5than?52?5marked?5edges?5at?5vert@
CONST	SEGMENT
??_C@_0CH@GBBIPLAK@More?5than?52?5marked?5edges?5at?5vert@ DB 'More than '
	DB	'2 marked edges at vertex %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _sq_torsion_all
_TEXT	SEGMENT
_angle$ = -852						; size = 8
_energy$ = -844						; size = 8
tv1144 = -836						; size = 8
tv1142 = -828						; size = 8
tv1143 = -820						; size = 8
tv1141 = -812						; size = 8
tv1140 = -804						; size = 8
_ABC$ = -796						; size = 8
_bc$ = -788						; size = 8
tv1688 = -780						; size = 4
_ab$ = -776						; size = 8
tv1684 = -768						; size = 4
tv1692 = -764						; size = 4
tv1700 = -760						; size = 4
tv1696 = -756						; size = 4
tv1206 = -752						; size = 8
tv1709 = -748						; size = 4
tv1059 = -744						; size = 8
_bb$ = -744						; size = 8
_e_info$GSCopy$ = -736					; size = 4
tv1214 = -732						; size = 8
tv1190 = -732						; size = 8
tv1722 = -728						; size = 4
tv1222 = -724						; size = 8
tv1193 = -724						; size = 8
tv1718 = -720						; size = 4
tv1344 = -716						; size = 8
tv1168 = -716						; size = 8
tv1735 = -712						; size = 4
tv1316 = -708						; size = 8
tv1178 = -708						; size = 8
tv1748 = -704						; size = 4
tv1314 = -700						; size = 8
tv1212 = -700						; size = 8
tv1188 = -700						; size = 8
tv1726 = -696						; size = 4
tv1743 = -692						; size = 4
_k$ = -692						; size = 4
tv1335 = -688						; size = 8
tv1219 = -688						; size = 8
tv1175 = -688						; size = 8
tv1739 = -684						; size = 4
tv634 = -680						; size = 4
_k2$ = -680						; size = 4
_dABC$ = -676						; size = 96
_dab$ = -580						; size = 96
_dbb$ = -484						; size = 96
_denergy$ = -388					; size = 96
_dbc$ = -388						; size = 96
_dangle$ = -292						; size = 96
_AxB$ = -244						; size = 48
_AxC$ = -196						; size = 48
_BxC$ = -148						; size = 48
_dab_db$ = -100						; size = 24
_dbc_dc$ = -76						; size = 24
_dbc_db$ = -52						; size = 24
_dab_da$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_mode$ = 12						; size = 4
_sq_torsion_all PROC					; COMDAT

; 448  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 852				; 00000354H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _e_info$[ebp]

; 449  :   REAL *a = NULL,*b = NULL,*c = NULL;
; 450  :   REAL AxB[MAXCOORD], BxC[MAXCOORD], AxC[MAXCOORD],ABC,bb,ab,bc;
; 451  :   REAL dbb[4][3],dab_da[3],dab_db[3],dbc_db[3],dbc_dc[3],dABC[4][3],dab[4][3],dbc[4][3];
; 452  :   REAL dangle[4][3],denergy[4][3];
; 453  :   REAL angle,energy;
; 454  :   struct method_instance *mi = METH_INSTANCE(e_info->method);
; 455  :   int i,j,k,k1=0,k2=0;
; 456  :   
; 457  :   // find the marked edges
; 458  :   b = e_info->sides[0][0];

	mov	ecx, DWORD PTR [eax+1276]
	mov	edx, DWORD PTR [ecx]
	push	ebx
	push	esi
	mov	esi, DWORD PTR [edx]

; 459  :   for ( k = 1 ; k < e_info->vcount ; k++ )

	mov	ecx, 1
	push	edi
	xor	edi, edi
	xor	ebx, ebx

; 515  :   { dbb[0][i] = -2*b[i];

	mov	DWORD PTR _e_info$GSCopy$[ebp], eax
	mov	DWORD PTR _k2$[ebp], edi
	mov	DWORD PTR _k$[ebp], ecx
	cmp	DWORD PTR [eax+12], ecx
	jle	$LN47@sq_torsion@2
	npad	9
$LL50@sq_torsion@2:

; 460  :   { if ( e_info->marked[k] )

	cmp	DWORD PTR [eax+ecx*4+1352], 0
	je	$LN27@sq_torsion@2

; 461  :     { if ( a == NULL ) 

	test	ebx, ebx
	jne	SHORT $LN24@sq_torsion@2

; 462  :       { a = e_info->sides[0][k]; k1 = k; }  // note: negative orientation

	mov	edx, DWORD PTR [eax+1276]
	mov	edx, DWORD PTR [edx]
	mov	ebx, DWORD PTR [edx+ecx*4]
	jmp	SHORT $LN27@sq_torsion@2
$LN24@sq_torsion@2:

; 463  : 	  else if ( c == NULL )

	test	edi, edi
	jne	SHORT $LN22@sq_torsion@2

; 464  : 	  { c = e_info->sides[0][k]; k2 = k; }

	mov	edx, DWORD PTR [eax+1276]
	mov	edx, DWORD PTR [edx]
	mov	edi, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _k2$[ebp], ecx

; 465  : 	  else 

	jmp	SHORT $LN27@sq_torsion@2
$LN22@sq_torsion@2:

; 466  : 	  { 
; 467  : 	    sprintf(errmsg,"More than 2 marked edges at vertex %s\n",ELNAME(e_info->id));

	mov	eax, DWORD PTR [eax]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN31@sq_torsion@2
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN32@sq_torsion@2
$LN31@sq_torsion@2:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN32@sq_torsion@2:
	push	eax
	push	OFFSET ??_C@_0CH@GBBIPLAK@More?5than?52?5marked?5edges?5at?5vert@
	push	OFFSET _errmsg
	call	_sprintf

; 468  : 		kb_error(2666,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2666					; 00000a6aH
	call	_kb_error
	mov	ecx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _e_info$GSCopy$[ebp]
	add	esp, 24					; 00000018H
$LN27@sq_torsion@2:

; 459  :   for ( k = 1 ; k < e_info->vcount ; k++ )

	inc	ecx
	mov	DWORD PTR _k$[ebp], ecx
	cmp	ecx, DWORD PTR [eax+12]
	jl	$LL50@sq_torsion@2

; 469  : 	  }
; 470  :     }
; 471  :   }
; 472  : 
; 473  :   if ( k2 == 0 ) return 0.0;

	cmp	DWORD PTR _k2$[ebp], 0
	jne	SHORT $LN20@sq_torsion@2
$LN47@sq_torsion@2:
	fldz
	pop	edi
	pop	esi
	pop	ebx

; 548  :    }
; 549  : 
; 550  :   return energy;
; 551  : } // end sq_torsion_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN20@sq_torsion@2:

; 474  : 
; 475  :   AxB[0] = -(a[1]*b[2] - a[2]*b[1]);

	fld	QWORD PTR [esi+16]
	fmul	QWORD PTR [ebx+8]
	fld	QWORD PTR [ebx+16]
	fmul	QWORD PTR [esi+8]
	fsubp	ST(1), ST(0)
	fchs
	fst	QWORD PTR _AxB$[ebp]

; 476  :   AxB[1] = -(a[2]*b[0] - a[0]*b[2]);

	fld	QWORD PTR [ebx+16]
	fmul	QWORD PTR [esi]
	fld	QWORD PTR [ebx]
	fmul	QWORD PTR [esi+16]
	fsubp	ST(1), ST(0)
	fchs
	fst	QWORD PTR _AxB$[ebp+8]

; 477  :   AxB[2] = -(a[0]*b[1] - a[1]*b[0]);

	fld	QWORD PTR [ebx]
	fmul	QWORD PTR [esi+8]
	fld	QWORD PTR [esi]
	fmul	QWORD PTR [ebx+8]
	fsubp	ST(1), ST(0)
	fchs
	fst	QWORD PTR _AxB$[ebp+16]

; 478  : 
; 479  :   BxC[0] = b[1]*c[2] - b[2]*c[1];

	fld	QWORD PTR [edi+16]
	fmul	QWORD PTR [esi+8]
	fld	QWORD PTR [esi+16]
	fmul	QWORD PTR [edi+8]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _BxC$[ebp]

; 480  :   BxC[1] = b[2]*c[0] - b[0]*c[2];

	fld	QWORD PTR [edi]
	fmul	QWORD PTR [esi+16]
	fld	QWORD PTR [esi]
	fmul	QWORD PTR [edi+16]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _BxC$[ebp+8]

; 481  :   BxC[2] = b[0]*c[1] - b[1]*c[0];

	fld	QWORD PTR [esi]
	fmul	QWORD PTR [edi+8]
	fld	QWORD PTR [edi]
	fmul	QWORD PTR [esi+8]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _BxC$[ebp+16]

; 482  : 
; 483  :   AxC[0] = -(a[1]*c[2] - a[2]*c[1]);

	fld	QWORD PTR [edi+16]
	fmul	QWORD PTR [ebx+8]
	fld	QWORD PTR [ebx+16]
	fmul	QWORD PTR [edi+8]
	fsubp	ST(1), ST(0)
	fchs
	fstp	QWORD PTR _AxC$[ebp]

; 484  :   AxC[1] = -(a[2]*c[0] - a[0]*c[2]);

	fld	QWORD PTR [ebx+16]
	fmul	QWORD PTR [edi]
	fld	QWORD PTR [ebx]
	fmul	QWORD PTR [edi+16]
	fsubp	ST(1), ST(0)
	fchs
	fstp	QWORD PTR _AxC$[ebp+8]

; 485  :   AxC[2] = -(a[0]*c[1] - a[1]*c[0]);

	fld	QWORD PTR [ebx]
	fmul	QWORD PTR [edi+8]
	fld	QWORD PTR [edi]
	fmul	QWORD PTR [ebx+8]
	fsubp	ST(1), ST(0)
	fchs
	fstp	QWORD PTR _AxC$[ebp+16]

; 486  : 
; 487  :   ABC = AxB[0]*c[0] + AxB[1]*c[1] + AxB[2]*c[2];

	fld	QWORD PTR [edi]
	fmul	ST(0), ST(5)
	fld	ST(4)
	fmul	QWORD PTR [edi+8]
	faddp	ST(1), ST(0)
	fld	ST(3)
	fmul	QWORD PTR [edi+16]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _ABC$[ebp]

; 488  : 
; 489  :   bb = b[0]*b[0]+b[1]*b[1]+b[2]*b[2];

	fld	QWORD PTR [esi+8]
	fld	QWORD PTR [esi]
	fld	QWORD PTR [esi+16]
	fstp	QWORD PTR tv1059[ebp]
	fmul	ST(0), ST(0)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv1059[ebp]
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fst	QWORD PTR _bb$[ebp]

; 490  :   ab = AxB[0]*AxB[0]+AxB[1]*AxB[1]+AxB[2]*AxB[2];

	fld	ST(4)
	fmulp	ST(5), ST(0)
	fld	ST(5)
	fmulp	ST(6), ST(0)
	fxch	ST(4)
	faddp	ST(5), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(4)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _ab$[ebp]

; 491  :   bc = BxC[0]*BxC[0]+BxC[1]*BxC[1]+BxC[2]*BxC[2];

	fld	ST(2)
	fmulp	ST(3), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(2), ST(0)
	fld	QWORD PTR _BxC$[ebp+16]
	fmul	ST(0), ST(0)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _bc$[ebp]

; 492  :   angle = asin(ABC*sqrt(bb)/sqrt(ab)/sqrt(bc));

	call	__CIsqrt
	fst	QWORD PTR tv1140[ebp]
	fmul	QWORD PTR _ABC$[ebp]
	fstp	QWORD PTR tv1141[ebp]
	fld	QWORD PTR _ab$[ebp]
	call	__CIsqrt
	fst	QWORD PTR tv1142[ebp]
	fdivr	QWORD PTR tv1141[ebp]
	fstp	QWORD PTR tv1143[ebp]
	fld	QWORD PTR _bc$[ebp]
	call	__CIsqrt
	fst	QWORD PTR tv1144[ebp]
	fdivr	QWORD PTR tv1143[ebp]
	call	__CIasin
	fst	QWORD PTR _angle$[ebp]

; 493  :   energy = angle*angle/sqrt(bb);
; 494  : 
; 495  :   if ( mode == METHOD_VALUE ) 

	cmp	DWORD PTR _mode$[ebp], 1767		; 000006e7H
	fld	ST(0)
	fmul	ST(0), ST(1)
	fld	QWORD PTR tv1140[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _energy$[ebp]
	jne	SHORT $LN52@sq_torsion@2
	pop	edi
	fstp	ST(2)
	pop	esi
	fstp	ST(0)
	pop	ebx

; 548  :    }
; 549  : 
; 550  :   return energy;
; 551  : } // end sq_torsion_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN52@sq_torsion@2:

; 493  :   energy = angle*angle/sqrt(bb);
; 494  : 
; 495  :   if ( mode == METHOD_VALUE ) 

	fstp	ST(0)

; 496  :       return energy;
; 497  : 
; 498  :     
; 499  :   // Now the gradient
; 500  :  
; 501  :   dab_da[0] = -(2*b[1]*(-a[1]*b[0]+a[0]*b[1])-2*b[2]*(a[2]*b[0]-a[0]*b[2]));

	fld	QWORD PTR [ebx]
	fmul	QWORD PTR [esi+8]
	fld	QWORD PTR [esi]
	fmul	QWORD PTR [ebx+8]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [esi+8]
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR [ebx+16]
	fmul	QWORD PTR [esi]
	fld	QWORD PTR [ebx]
	fmul	QWORD PTR [esi+16]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [esi+16]
	fmul	ST(0), ST(2)
	fst	QWORD PTR tv1168[ebp]
	fld	ST(3)
	fmul	ST(0), ST(5)
	fxch	ST(1)
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fchs
	fstp	QWORD PTR _dab_da$[ebp]

; 502  :   dab_da[1] = -(-2*b[0]*(-a[1]*b[0]+a[0]*b[1])+2*b[2]*(-a[2]*b[1]+a[1]*b[2]));

	fld	QWORD PTR [esi+16]
	fmul	QWORD PTR [ebx+8]
	fld	QWORD PTR [ebx+16]
	fmul	QWORD PTR [esi+8]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR tv1175[ebp]
	fld	QWORD PTR [esi]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR tv1178[ebp]
	fmul	QWORD PTR tv1168[ebp]
	fld	QWORD PTR tv1178[ebp]
	fmul	ST(0), ST(5)
	fsubp	ST(1), ST(0)
	fchs
	fstp	QWORD PTR _dab_da$[ebp+8]

; 503  :   dab_da[2] = -(2*b[0]*(a[2]*b[0]-a[0]*b[2])-2*b[1]*(-a[2]*b[1]+a[1]*b[2]));

	fld	QWORD PTR tv1178[ebp]
	fmul	ST(0), ST(1)
	fld	QWORD PTR tv1175[ebp]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fchs
	fstp	QWORD PTR _dab_da$[ebp+16]

; 504  :   dab_db[0] = -2*a[1]*(-a[1]*b[0]+a[0]*b[1])+2*a[2]*(a[2]*b[0]-a[0]*b[2]);

	fld	QWORD PTR [ebx+16]
	fmul	ST(0), ST(2)
	fst	QWORD PTR tv1188[ebp]
	fld	QWORD PTR [ebx+8]
	fmul	ST(0), ST(3)
	fst	QWORD PTR tv1190[ebp]
	fxch	ST(1)
	fmul	ST(0), ST(2)
	fxch	ST(1)
	fmul	ST(0), ST(5)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _dab_db$[ebp]

; 505  :   dab_db[1] = 2*a[0]*(-a[1]*b[0]+a[0]*b[1])-2*a[2]*(-a[2]*b[1]+a[1]*b[2]);

	fld	QWORD PTR [ebx]
	fmul	ST(0), ST(2)
	fst	QWORD PTR tv1193[ebp]
	fmulp	ST(4), ST(0)
	fld	QWORD PTR tv1188[ebp]
	fld	QWORD PTR tv1175[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(5)
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR _dab_db$[ebp+8]

; 506  :   dab_db[2] = -2*a[0]*(a[2]*b[0]-a[0]*b[2])+2*a[1]*(-a[2]*b[1]+a[1]*b[2]);

	fld	QWORD PTR tv1190[ebp]
	fmulp	ST(4), ST(0)
	fmul	QWORD PTR tv1193[ebp]
	fsubp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR _dab_db$[ebp+16]

; 507  :   dbc_db[0] = 2*c[1]*(-b[1]*c[0]+b[0]*c[1])-2*c[2]*(b[2]*c[0]-b[0]*c[2]);

	fld	QWORD PTR [esi]
	fmul	QWORD PTR [edi+8]
	fld	QWORD PTR [edi]
	fmul	QWORD PTR [esi+8]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edi+8]
	fmul	ST(0), ST(3)
	fst	QWORD PTR tv1206[ebp]
	fld	QWORD PTR [edi]
	fmul	QWORD PTR [esi+16]
	fld	QWORD PTR [esi]
	fmul	QWORD PTR [edi+16]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR tv1212[ebp]
	fld	QWORD PTR [edi+16]
	fmul	ST(0), ST(5)
	fst	QWORD PTR tv1214[ebp]
	fxch	ST(2)
	fmul	ST(0), ST(3)
	fxch	ST(2)
	fmul	ST(0), ST(1)
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _dbc_db$[ebp]

; 508  :   dbc_db[1] = -2*c[0]*(-b[1]*c[0]+b[0]*c[1])+2*c[2]*(-b[2]*c[1]+b[1]*c[2]);

	fld	QWORD PTR [edi+16]
	fmul	QWORD PTR [esi+8]
	fld	QWORD PTR [esi+16]
	fmul	QWORD PTR [edi+8]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR tv1219[ebp]
	fld	QWORD PTR [edi]

; 509  :   dbc_db[2] = 2*c[0]*(b[2]*c[0]-b[0]*c[2])-2*c[1]*(-b[2]*c[1]+b[1]*c[2]);
; 510  :   dbc_dc[0] = -2*b[1]*(-b[1]*c[0]+b[0]*c[1])+2*b[2]*(b[2]*c[0]-b[0]*c[2]);
; 511  :   dbc_dc[1] = 2*b[0]*(-b[1]*c[0]+b[0]*c[1])-2*b[2]*(-b[2]*c[1]+b[1]*c[2]);
; 512  :   dbc_dc[2] = -2*b[0]*(b[2]*c[0]-b[0]*c[2])+2*b[1]*(-b[2]*c[1]+b[1]*c[2]);
; 513  : 
; 514  :   for ( i = 0 ; i < SDIM ; i++ )

	mov	edi, DWORD PTR _web+616
	fmul	ST(0), ST(5)
	fst	QWORD PTR tv1222[ebp]
	fxch	ST(1)
	fmul	QWORD PTR tv1214[ebp]
	fxch	ST(1)
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _dbc_db$[ebp+8]
	fmul	QWORD PTR tv1222[ebp]
	fld	QWORD PTR tv1219[ebp]
	fmul	QWORD PTR tv1206[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _dbc_db$[ebp+16]
	fld	QWORD PTR tv1212[ebp]
	fld	QWORD PTR tv1168[ebp]
	fmul	ST(1), ST(0)
	fld	ST(2)
	fmul	ST(0), ST(4)
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _dbc_dc$[ebp]
	fld	QWORD PTR tv1178[ebp]
	fmul	ST(2), ST(0)
	fld	QWORD PTR tv1219[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(2)
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR _dbc_dc$[ebp+8]
	fld	QWORD PTR tv1219[ebp]
	fmulp	ST(2), ST(0)
	fmul	QWORD PTR tv1212[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _dbc_dc$[ebp+16]
	test	edi, edi
	jle	$LN16@sq_torsion@2

; 517  :     dbb[2][i] = 0;

	fldz
	lea	ecx, DWORD PTR _dbb$[ebp]
	sub	ecx, esi
	fld	QWORD PTR __real@c000000000000000
	mov	DWORD PTR tv1684[ebp], ecx
	lea	ecx, DWORD PTR _dbb$[ebp+24]
	sub	ecx, esi
	mov	DWORD PTR tv1688[ebp], ecx
	lea	ecx, DWORD PTR _dbb$[ebp+48]
	sub	ecx, esi
	mov	DWORD PTR tv1692[ebp], ecx
	lea	edi, DWORD PTR _dab$[ebp+48]
	sub	edi, esi
	mov	DWORD PTR tv1718[ebp], edi
	lea	ebx, DWORD PTR _dbc$[ebp+24]
	sub	ebx, esi
	mov	DWORD PTR tv1735[ebp], ebx
	lea	ecx, DWORD PTR _dbb$[ebp+72]
	sub	ecx, esi
	lea	edi, DWORD PTR _dab$[ebp+72]
	sub	edi, esi
	mov	DWORD PTR tv1696[ebp], ecx
	mov	DWORD PTR tv1722[ebp], edi
	lea	ebx, DWORD PTR _dbc$[ebp+48]
	sub	ebx, esi
	mov	DWORD PTR tv1739[ebp], ebx
	lea	ecx, DWORD PTR _dab$[ebp]
	sub	ecx, esi
	lea	edx, DWORD PTR _dab$[ebp+24]
	sub	edx, esi
	lea	edi, DWORD PTR _dbc$[ebp]
	sub	edi, esi
	lea	ebx, DWORD PTR _dbc_dc$[ebp]
	sub	ebx, esi
	mov	DWORD PTR tv1700[ebp], ecx
	mov	DWORD PTR tv1709[ebp], edx
	mov	DWORD PTR tv1726[ebp], edi
	mov	DWORD PTR tv1743[ebp], ebx
	lea	ecx, DWORD PTR _dab_db$[ebp]
	sub	ecx, esi
	lea	edx, DWORD PTR _dab_da$[ebp]
	sub	edx, esi
	lea	edi, DWORD PTR _dbc_db$[ebp]
	sub	edi, esi
	lea	ebx, DWORD PTR _dbc$[ebp+72]
	sub	ebx, esi
	mov	eax, esi
	mov	esi, DWORD PTR _web+616
	mov	DWORD PTR tv634[ebp], esi
	mov	esi, DWORD PTR tv1743[ebp]
	mov	DWORD PTR tv1748[ebp], ebx
	jmp	SHORT $LN49@sq_torsion@2
$LN59@sq_torsion@2:

; 509  :   dbc_db[2] = 2*c[0]*(b[2]*c[0]-b[0]*c[2])-2*c[1]*(-b[2]*c[1]+b[1]*c[2]);
; 510  :   dbc_dc[0] = -2*b[1]*(-b[1]*c[0]+b[0]*c[1])+2*b[2]*(b[2]*c[0]-b[0]*c[2]);
; 511  :   dbc_dc[1] = 2*b[0]*(-b[1]*c[0]+b[0]*c[1])-2*b[2]*(-b[2]*c[1]+b[1]*c[2]);
; 512  :   dbc_dc[2] = -2*b[0]*(b[2]*c[0]-b[0]*c[2])+2*b[1]*(-b[2]*c[1]+b[1]*c[2]);
; 513  : 
; 514  :   for ( i = 0 ; i < SDIM ; i++ )

	fxch	ST(1)
$LN49@sq_torsion@2:

; 515  :   { dbb[0][i] = -2*b[i];

	fld	QWORD PTR [eax]
	mov	ebx, DWORD PTR tv1684[ebp]
	fmul	ST(0), ST(1)
	add	eax, 8
	dec	DWORD PTR tv634[ebp]
	fstp	QWORD PTR [ebx+eax-8]

; 516  :     dbb[1][i] =  2*b[i];

	mov	ebx, DWORD PTR tv1688[ebp]
	fld	QWORD PTR [eax-8]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR [ebx+eax-8]

; 517  :     dbb[2][i] = 0;

	mov	ebx, DWORD PTR tv1692[ebp]
	fxch	ST(1)
	fst	QWORD PTR [ebx+eax-8]

; 518  :     dbb[3][i] = 0;

	mov	ebx, DWORD PTR tv1696[ebp]
	fst	QWORD PTR [ebx+eax-8]

; 519  :     dab[0][i] = dab_da[i] - dab_db[i];

	mov	ebx, DWORD PTR tv1700[ebp]
	fld	QWORD PTR [edx+eax-8]
	fsub	QWORD PTR [ecx+eax-8]
	fstp	QWORD PTR [ebx+eax-8]

; 520  :     dab[1][i] = dab_db[i];

	mov	ebx, DWORD PTR tv1709[ebp]
	fld	QWORD PTR [ecx+eax-8]
	fstp	QWORD PTR [ebx+eax-8]

; 521  :     dab[2][i] = -dab_da[i];

	mov	ebx, DWORD PTR tv1718[ebp]
	fld	QWORD PTR [edx+eax-8]
	fchs
	fstp	QWORD PTR [ebx+eax-8]

; 522  :     dab[3][i] = 0.0;

	mov	ebx, DWORD PTR tv1722[ebp]
	fst	QWORD PTR [ebx+eax-8]

; 523  :     dbc[0][i] = -dbc_db[i];

	mov	ebx, DWORD PTR tv1726[ebp]
	fld	QWORD PTR [edi+eax-8]
	fchs
	fstp	QWORD PTR [ebx+eax-8]

; 524  :     dbc[1][i] = dbc_db[i] - dbc_dc[i];

	mov	ebx, DWORD PTR tv1735[ebp]
	fld	QWORD PTR [edi+eax-8]
	fsub	QWORD PTR [esi+eax-8]
	fstp	QWORD PTR [ebx+eax-8]

; 525  :     dbc[2][i] = 0.0;

	mov	ebx, DWORD PTR tv1739[ebp]
	fst	QWORD PTR [ebx+eax-8]

; 526  :     dbc[3][i] = dbc_dc[i];

	mov	ebx, DWORD PTR tv1748[ebp]
	fld	QWORD PTR [esi+eax-8]
	fstp	QWORD PTR [ebx+eax-8]
	jne	$LN59@sq_torsion@2

; 509  :   dbc_db[2] = 2*c[0]*(b[2]*c[0]-b[0]*c[2])-2*c[1]*(-b[2]*c[1]+b[1]*c[2]);
; 510  :   dbc_dc[0] = -2*b[1]*(-b[1]*c[0]+b[0]*c[1])+2*b[2]*(b[2]*c[0]-b[0]*c[2]);
; 511  :   dbc_dc[1] = 2*b[0]*(-b[1]*c[0]+b[0]*c[1])-2*b[2]*(-b[2]*c[1]+b[1]*c[2]);
; 512  :   dbc_dc[2] = -2*b[0]*(b[2]*c[0]-b[0]*c[2])+2*b[1]*(-b[2]*c[1]+b[1]*c[2]);
; 513  : 
; 514  :   for ( i = 0 ; i < SDIM ; i++ )

	mov	edi, DWORD PTR _web+616
	fstp	ST(0)
	fstp	ST(0)
$LN16@sq_torsion@2:

; 527  :   }
; 528  : 
; 529  : 
; 530  :   for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	test	edi, edi
	jle	SHORT $LN13@sq_torsion@2
$LN15@sq_torsion@2:

; 531  :   { dABC[0][i] = AxC[i]+BxC[i];

	fld	QWORD PTR _AxC$[ebp+eax*8]
	inc	eax
	fadd	QWORD PTR _BxC$[ebp+eax*8-8]
	fstp	QWORD PTR _dABC$[ebp+eax*8-8]

; 532  :     dABC[1][i] = -AxC[i]-AxB[i];

	fld	QWORD PTR _AxC$[ebp+eax*8-8]
	fchs
	fsub	QWORD PTR _AxB$[ebp+eax*8-8]
	fstp	QWORD PTR _dABC$[ebp+eax*8+16]

; 533  :     dABC[2][i] = -BxC[i];

	fld	QWORD PTR _BxC$[ebp+eax*8-8]
	fchs
	fstp	QWORD PTR _dABC$[ebp+eax*8+40]

; 534  :     dABC[3][i] = AxB[i];

	fld	QWORD PTR _AxB$[ebp+eax*8-8]
	fstp	QWORD PTR _dABC$[ebp+eax*8+64]
	cmp	eax, edi
	jl	SHORT $LN15@sq_torsion@2
$LN13@sq_torsion@2:

; 535  :   }
; 536  : 
; 537  :   for ( j = 0 ; j < 4 ; j++ )

	fld	QWORD PTR __real@3fe0000000000000
	xor	esi, esi
	fld	QWORD PTR _ABC$[ebp]
$LN12@sq_torsion@2:

; 538  :    for ( i = 0 ; i < SDIM ; i++ )

	test	edi, edi
	jle	$LN11@sq_torsion@2
	fstp	ST(2)
	fstp	ST(3)
	fstp	ST(1)
	fstp	ST(1)
	fmul	ST(0), ST(0)
	fmul	QWORD PTR _bb$[ebp]
	fdiv	QWORD PTR _ab$[ebp]
	fdiv	QWORD PTR _bc$[ebp]
	fld1
	fsubrp	ST(1), ST(0)
	call	__CIsqrt

; 539  :     dangle[j][i] = 1/sqrt(1.0 - ABC*ABC*bb/ab/bc)*(dABC[j][i]*sqrt(bb)/sqrt(ab)/sqrt(bc)
; 540  :        + ABC*0.5/sqrt(bb)*dbb[j][i]/sqrt(ab)/sqrt(bc)
; 541  :        + ABC*sqrt(bb)*(-0.5)/ab/sqrt(ab)*dab[j][i]/sqrt(bc)
; 542  :        + ABC*sqrt(bb)/sqrt(ab)*(-0.5)/bc/sqrt(bc)*dbc[j][i]);

	fld1
	fdivrp	ST(1), ST(0)
	mov	eax, esi
	mov	ecx, edi
	fstp	QWORD PTR tv1314[ebp]
	fld	QWORD PTR _ABC$[ebp]
	fld	ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR tv1140[ebp]
	fdiv	ST(2), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR tv1316[ebp]
	fld	QWORD PTR tv1141[ebp]
	fmul	ST(0), ST(1)
	fdiv	QWORD PTR _ab$[ebp]
	fld	QWORD PTR tv1142[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv1335[ebp]
	fld	QWORD PTR tv1143[ebp]
	fmul	ST(0), ST(2)
	fdiv	QWORD PTR _bc$[ebp]
	fld	QWORD PTR tv1144[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv1344[ebp]
$LN48@sq_torsion@2:
	fld	QWORD PTR _dbb$[ebp+eax]
	add	eax, 8
	dec	ecx
	fmul	QWORD PTR tv1316[ebp]
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(1)
	fld	QWORD PTR _dABC$[ebp+eax-8]
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dab$[ebp+eax-8]
	fmul	QWORD PTR tv1335[ebp]
	fdiv	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _dbc$[ebp+eax-8]
	fmul	QWORD PTR tv1344[ebp]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR tv1314[ebp]
	fstp	QWORD PTR _dangle$[ebp+eax-8]
	jne	SHORT $LN48@sq_torsion@2

; 538  :    for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)
	fstp	ST(0)
	fld	QWORD PTR __real@4000000000000000
	fld	QWORD PTR _angle$[ebp]
	fxch	ST(4)
	fxch	ST(1)
	fxch	ST(2)
	fxch	ST(1)
$LN11@sq_torsion@2:

; 535  :   }
; 536  : 
; 537  :   for ( j = 0 ; j < 4 ; j++ )

	add	esi, 24					; 00000018H
	cmp	esi, 96					; 00000060H
	jl	$LN12@sq_torsion@2

; 543  : 
; 544  :   for ( j = 0 ; j < 4 ; j++ )

	xor	esi, esi
	fstp	ST(0)
	xor	ecx, ecx
$LN6@sq_torsion@2:

; 545  :    for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	test	edi, edi
	jle	SHORT $LN5@sq_torsion@2
	fld	ST(3)
	fmul	ST(0), ST(2)
	fld	ST(4)
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(5)
	fdiv	QWORD PTR _bb$[ebp]
	fdiv	ST(0), ST(4)
$LN3@sq_torsion@2:
	lea	edx, DWORD PTR [ecx+eax*8]

; 546  :    { denergy[j][i] = 2*angle*dangle[j][i]/sqrt(bb) - 0.5*angle*angle/bb/sqrt(bb)*dbb[j][i];

	fld	QWORD PTR _dangle$[ebp+edx]
	lea	edx, DWORD PTR [ecx+eax*8]
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(5)
	fld	QWORD PTR _dbb$[ebp+edx]
	fmul	ST(0), ST(2)
	lea	edx, DWORD PTR [ecx+eax*8]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _denergy$[ebp+edx]
	mov	edx, DWORD PTR _e_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [edx+1336]
	mov	edx, DWORD PTR [edx+esi]

; 547  :      e_info->grad[j][i] += denergy[j][i];

	fadd	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	inc	eax
	fstp	QWORD PTR [edx]
	mov	edi, DWORD PTR _web+616
	cmp	eax, edi
	jl	SHORT $LN3@sq_torsion@2

; 545  :    for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(1)
	fstp	ST(0)
$LN5@sq_torsion@2:

; 543  : 
; 544  :   for ( j = 0 ; j < 4 ; j++ )

	add	ecx, 24					; 00000018H
	add	esi, 4
	cmp	ecx, 96					; 00000060H
	jl	SHORT $LN6@sq_torsion@2

; 548  :    }
; 549  : 
; 550  :   return energy;
; 551  : } // end sq_torsion_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(1)
	fstp	ST(2)
	pop	edi
	fstp	ST(0)
	pop	esi
	fstp	ST(0)
	xor	ecx, ebp
	fld	QWORD PTR _energy$[ebp]
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_sq_torsion_all ENDP
_TEXT	ENDS
PUBLIC	_sq_torsion_energy
; Function compile flags: /Ogtp
;	COMDAT _sq_torsion_energy
_TEXT	SEGMENT
_e_info$ = 8						; size = 4
_sq_torsion_energy PROC					; COMDAT

; 554  : {  return sq_torsion_all(e_info,METHOD_VALUE);

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _e_info$[ebp]
	push	1767					; 000006e7H
	push	eax
	call	_sq_torsion_all
	add	esp, 8

; 555  : }

	pop	ebp
	ret	0
_sq_torsion_energy ENDP
_TEXT	ENDS
PUBLIC	_sq_torsion_gradient
; Function compile flags: /Ogtp
;	COMDAT _sq_torsion_gradient
_TEXT	SEGMENT
_e_info$ = 8						; size = 4
_sq_torsion_gradient PROC				; COMDAT

; 558  : {  return sq_torsion_all(e_info,METHOD_GRADIENT);

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _e_info$[ebp]
	push	4321					; 000010e1H
	push	eax
	call	_sq_torsion_all
	add	esp, 8

; 559  : }

	pop	ebp
	ret	0
_sq_torsion_gradient ENDP
_TEXT	ENDS
PUBLIC	__real@3fd0000000000000
PUBLIC	__$ArrayPad$
PUBLIC	_writhe
;	COMDAT __real@3fd0000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\knot2.c
CONST	ENDS
;	COMDAT _writhe
_TEXT	SEGMENT
_energy$ = -252						; size = 8
_e1$ = -244						; size = 4
tv3008 = -240						; size = 4
tv2452 = -236						; size = 4
tv3016 = -232						; size = 4
tv3004 = -228						; size = 4
tv3012 = -224						; size = 4
tv3010 = -220						; size = 4
tv2978 = -216						; size = 8
_yy1$ = -212						; size = 4
tv3006 = -208						; size = 4
tv2456 = -204						; size = 4
tv2443 = -200						; size = 4
tv2082 = -196						; size = 4
_dd$ = -192						; size = 8
tv3014 = -188						; size = 4
_e1h$ = -184						; size = 4
tv3021 = -180						; size = 4
_e1t$ = -176						; size = 4
tv1414 = -172						; size = 4
tv1018 = -172						; size = 4
_x2$ = -168						; size = 4
tv1431 = -164						; size = 4
_y2$ = -164						; size = 4
tv3018 = -160						; size = 4
tv1435 = -160						; size = 4
_x1$ = -156						; size = 4
tv3023 = -152						; size = 4
tv3020 = -152						; size = 4
tv1439 = -152						; size = 4
_dx2$ = -148						; size = 48
_dx1$ = -100						; size = 48
_d$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_writhe	PROC						; COMDAT

; 587  : { edge_id e1 = e_info->id,e2;

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _e_info$[ebp]

; 588  :   vertex_id e1h,e2h,e1t,e2t;
; 589  :   REAL *x1,*x2,*yy1,*y2; /* end coordinates */
; 590  :   REAL energy = 0.0;

	fldz
	mov	eax, DWORD PTR [eax]
	fst	QWORD PTR _energy$[ebp]

; 591  :   REAL dx1[MAXCOORD];
; 592  :   REAL dx2[MAXCOORD];
; 593  :   REAL d[MAXCOORD];
; 594  :   REAL dd;
; 595  :   int j;
; 596  : 
; 597  :   e1t = get_edge_tailv(e1);

	mov	edx, DWORD PTR _web+124
	mov	ecx, eax
	mov	DWORD PTR _e1$[ebp], eax
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+216
	push	ebx
	mov	ebx, DWORD PTR _dymem
	mov	edx, DWORD PTR [edx+ebx+304]
	shr	ecx, 27					; 0000001bH
	push	esi
	add	eax, edx
	and	ecx, 1
	push	edi
	je	SHORT $LN18@writhe
	mov	edx, DWORD PTR _web+636
	mov	edx, DWORD PTR [eax+edx*4]
	jmp	SHORT $LN100@writhe
$LN18@writhe:
	mov	edx, DWORD PTR [eax]
$LN100@writhe:
	mov	DWORD PTR _e1t$[ebp], edx

; 598  :   e1h = get_edge_headv(e1);

	test	ecx, ecx
	je	SHORT $LN22@writhe
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _e1h$[ebp], eax
	jmp	SHORT $LN21@writhe
$LN22@writhe:
	mov	ecx, DWORD PTR _web+636
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _e1h$[ebp], edx
$LN21@writhe:

; 599  :   x1 = get_coord(e1t);

	mov	ecx, DWORD PTR _e1t$[ebp]

; 600  :   x2 = get_coord(e1h);

	mov	esi, DWORD PTR _e1h$[ebp]
	mov	edx, DWORD PTR _web+12
	mov	eax, DWORD PTR _web+104
	mov	eax, DWORD PTR [eax+ebx+64]
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	and	esi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edx+esi*4]
	add	ecx, eax
	add	edi, eax

; 601  :   for ( j = 0 ; j < SDIM ; j++ ) dx1[j] = x2[j] - x1[j];

	xor	esi, esi
	cmp	DWORD PTR _web+616, 4
	mov	DWORD PTR _x1$[ebp], ecx
	mov	DWORD PTR _x2$[ebp], edi
	jl	$LC40@writhe
	mov	ebx, edi
	sub	ebx, ecx
	mov	DWORD PTR tv1414[ebp], ebx
	lea	ebx, DWORD PTR _dx1$[ebp]
	sub	ebx, ecx
	mov	DWORD PTR tv1431[ebp], ebx
	lea	ebx, DWORD PTR _dx1$[ebp+8]
	sub	ebx, ecx
	mov	DWORD PTR tv1435[ebp], ebx
	lea	ebx, DWORD PTR _dx1$[ebp+16]
	sub	ebx, ecx
	lea	edx, DWORD PTR [edi+24]
	lea	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR tv1439[ebp], ebx
$LN41@writhe:
	fld	QWORD PTR [edx-24]
	mov	ebx, DWORD PTR tv1414[ebp]
	fsub	QWORD PTR [eax-8]
	add	esi, 4
	add	eax, 32					; 00000020H
	add	edx, 32					; 00000020H
	fstp	QWORD PTR _dx1$[ebp+esi*8-32]
	fld	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv1431[ebp]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv1435[ebp]
	fld	QWORD PTR [edx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv1439[ebp]
	fld	QWORD PTR [edx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR _web+616
	add	ebx, -3					; fffffffdH
	cmp	esi, ebx
	jl	SHORT $LN41@writhe
	mov	ebx, DWORD PTR _dymem
$LC40@writhe:
	cmp	esi, DWORD PTR _web+616
	jge	SHORT $LN39@writhe
	lea	edx, DWORD PTR _dx1$[ebp]
	lea	eax, DWORD PTR [ecx+esi*8]
	sub	edi, ecx
	sub	edx, ecx
	mov	ecx, DWORD PTR _web+616
	sub	ecx, esi
$LC14@writhe:
	fld	QWORD PTR [eax+edi]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax+edx-8]
	jne	SHORT $LC14@writhe
$LN39@writhe:

; 602  :   FOR_ALL_EDGES(e2)

	mov	ecx, DWORD PTR _web+160
	test	ecx, 268435456				; 10000000H
	je	$LN9@writhe
	fld	QWORD PTR __real@3fe0000000000000
$LN45@writhe:
	mov	edx, DWORD PTR _web+124
	mov	edi, ecx
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	edx, DWORD PTR [edi+edx]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	xor	esi, esi
	or	eax, esi
	mov	DWORD PTR tv1018[ebp], edi
	je	$LN10@writhe

; 603  :     { if ( e2 == e1 ) continue;  /* equal edges */

	cmp	ecx, DWORD PTR _e1$[ebp]
	je	$LN10@writhe

; 604  :       e2t = get_edge_tailv(e2);

	mov	eax, DWORD PTR _web+216
	mov	eax, DWORD PTR [eax+ebx+304]
	shr	ecx, 27					; 0000001bH
	add	edx, eax
	and	ecx, 1
	je	SHORT $LN26@writhe
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN25@writhe
$LN26@writhe:
	mov	eax, DWORD PTR [edx]
$LN25@writhe:

; 605  :       e2h = get_edge_headv(e2);

	test	ecx, ecx
	je	SHORT $LN30@writhe
	mov	ecx, DWORD PTR [edx]
	jmp	SHORT $LN29@writhe
$LN30@writhe:
	mov	ecx, DWORD PTR _web+636
	mov	ecx, DWORD PTR [edx+ecx*4]
$LN29@writhe:

; 606  :       if (e2t==e1h || e2h==e1t) continue; /* adjacent edges */

	cmp	eax, DWORD PTR _e1h$[ebp]
	je	$LN10@writhe
	cmp	ecx, DWORD PTR _e1t$[ebp]
	je	$LN10@writhe

; 607  :       yy1 = get_coord(e2t);

	mov	edx, DWORD PTR _web+104
	fstp	ST(1)
	mov	esi, DWORD PTR [edx+ebx+64]

; 608  :       y2 = get_coord(e2h);
; 609  :       dd = 0.0;

	fldz
	mov	ebx, DWORD PTR _web+12
	fst	QWORD PTR _dd$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+eax*4]
	and	ecx, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ebx+ecx*4]
	add	edx, esi
	add	ebx, esi

; 610  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	cmp	DWORD PTR _web+616, 4
	mov	DWORD PTR _yy1$[ebp], edx
	mov	DWORD PTR _y2$[ebp], ebx
	jl	$LC43@writhe

; 614  :             dd += d[j]*d[j];

	lea	ecx, DWORD PTR [ebx+16]
	sub	ebx, edx
	mov	DWORD PTR tv2082[ebp], ebx
	mov	ebx, DWORD PTR _x1$[ebp]
	lea	eax, DWORD PTR [edx+8]
	neg	edx
	add	ebx, edx
	mov	DWORD PTR tv3004[ebp], ebx
	mov	ebx, DWORD PTR _x2$[ebp]
	add	ebx, edx
	mov	DWORD PTR tv3006[ebp], ebx
	lea	ebx, DWORD PTR _dx2$[ebp+edx]
	mov	DWORD PTR tv3008[ebp], ebx
	lea	ebx, DWORD PTR _dx2$[ebp+edx+8]
	mov	DWORD PTR tv3010[ebp], ebx
	lea	ebx, DWORD PTR _dx2$[ebp+edx+16]
	mov	DWORD PTR tv3012[ebp], ebx
	lea	ebx, DWORD PTR _d$[ebp+edx+16]
	mov	edi, DWORD PTR _x2$[ebp]
	mov	DWORD PTR tv3014[ebp], ebx
	lea	ebx, DWORD PTR _d$[ebp+edx]
	lea	edx, DWORD PTR _d$[ebp+edx+8]
	mov	DWORD PTR tv3018[ebp], edx
	mov	edx, DWORD PTR _y2$[ebp]
	neg	edx
	mov	DWORD PTR tv3020[ebp], edx
	add	edx, DWORD PTR _x1$[ebp]
	mov	DWORD PTR tv3016[ebp], ebx
	mov	ebx, DWORD PTR _x2$[ebp]
	mov	DWORD PTR tv3021[ebp], edx
	mov	edx, DWORD PTR tv3020[ebp]
	add	edx, ebx
	mov	DWORD PTR tv3023[ebp], edx
	mov	edx, DWORD PTR _x1$[ebp]
	sub	edx, ebx
	mov	DWORD PTR tv2443[ebp], edx
	mov	edx, DWORD PTR _x1$[ebp]
	lea	ebx, DWORD PTR _dx2$[ebp]
	sub	ebx, edx
	mov	DWORD PTR tv2452[ebp], ebx
	lea	ebx, DWORD PTR _d$[ebp]
	add	edi, 24					; 00000018H
	sub	edx, ebx
	mov	DWORD PTR tv2456[ebp], edx
	jmp	SHORT $LN44@writhe
$LN46@writhe:
	mov	edx, DWORD PTR tv2456[ebp]

; 610  :       for ( j = 0 ; j < SDIM ; j++ )

$LN44@writhe:

; 611  :       {
; 612  :             dx2[j] = y2[j] - yy1[j];

	fld	QWORD PTR [ecx-16]
	mov	ebx, DWORD PTR tv2452[ebp]
	fsub	QWORD PTR [eax-8]

; 614  :             dd += d[j]*d[j];

	lea	edx, DWORD PTR [edx+esi*8]
	lea	edx, DWORD PTR _d$[ebp+edx]
	add	esi, 4
	fstp	QWORD PTR [edx+ebx]
	mov	ebx, DWORD PTR tv3008[ebp]
	fld	QWORD PTR [ecx-16]
	add	eax, 32					; 00000020H
	fadd	QWORD PTR [eax-40]
	add	ecx, 32					; 00000020H
	add	edi, 32					; 00000020H
	fsub	QWORD PTR [edx]
	mov	edx, DWORD PTR tv2082[ebp]
	fsub	QWORD PTR [edi-56]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR _d$[ebp+esi*8-32]
	fld	QWORD PTR [eax+edx-32]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv3010[ebp]
	fld	QWORD PTR [eax+edx-32]
	mov	edx, DWORD PTR tv3004[ebp]
	fadd	QWORD PTR [eax-32]
	fsub	QWORD PTR [edx+eax-32]
	mov	edx, DWORD PTR tv3006[ebp]
	fsub	QWORD PTR [edx+eax-32]
	mov	edx, DWORD PTR tv3016[ebp]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [edx+eax-32]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv3021[ebp]
	fld	QWORD PTR [eax-24]
	fadd	QWORD PTR [ecx-32]
	fsub	QWORD PTR [ebx+ecx-32]
	mov	ebx, DWORD PTR tv3023[ebp]
	fsub	QWORD PTR [ebx+ecx-32]
	mov	ebx, DWORD PTR tv3018[ebp]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv3012[ebp]
	fld	QWORD PTR [ecx-24]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv2443[ebp]
	fld	QWORD PTR [ecx-24]
	fadd	QWORD PTR [eax-16]
	fsub	QWORD PTR [edi+ebx-32]
	mov	ebx, DWORD PTR tv3014[ebp]
	fsub	QWORD PTR [edi-32]
	fmul	ST(0), ST(2)
	fld	ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [ebx+eax-32]
	fld	QWORD PTR _d$[ebp+esi*8-32]
	fld	QWORD PTR [edx+eax-32]
	mov	edx, DWORD PTR tv3018[ebp]
	fld	QWORD PTR [edx+eax-32]
	mov	edx, DWORD PTR _web+616
	fld	ST(2)
	add	edx, -3					; fffffffdH
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	faddp	ST(4), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(3), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	cmp	esi, edx
	jl	$LN46@writhe
	mov	edx, DWORD PTR _yy1$[ebp]
	fst	QWORD PTR _dd$[ebp]
	mov	ebx, DWORD PTR _y2$[ebp]
	mov	edi, DWORD PTR tv1018[ebp]
$LC43@writhe:

; 610  :       for ( j = 0 ; j < SDIM ; j++ )

	cmp	esi, DWORD PTR _web+616
	jge	$LN94@writhe
	mov	ecx, ebx
	lea	eax, DWORD PTR [ebx+esi*8]
	sub	edx, ebx
	mov	ebx, DWORD PTR _x1$[ebp]
	neg	ecx
	add	ebx, ecx
	mov	DWORD PTR tv3021[ebp], ebx
	mov	ebx, DWORD PTR _x2$[ebp]
	add	ebx, ecx
	mov	DWORD PTR tv3023[ebp], ebx
	mov	ebx, DWORD PTR _web+616
	lea	edi, DWORD PTR _dx2$[ebp+ecx]
	lea	ecx, DWORD PTR _d$[ebp+ecx]
	sub	ebx, esi
$LC3@writhe:

; 611  :       {
; 612  :             dx2[j] = y2[j] - yy1[j];

	fld	QWORD PTR [eax]

; 613  :             d[j] = (yy1[j] + y2[j] - x1[j] - x2[j])/2;

	mov	esi, DWORD PTR tv3021[ebp]
	fsub	QWORD PTR [edx+eax]
	add	eax, 8
	dec	ebx
	fstp	QWORD PTR [edi+eax-8]
	fld	QWORD PTR [eax-8]
	fadd	QWORD PTR [edx+eax-8]
	fsub	QWORD PTR [esi+eax-8]
	mov	esi, DWORD PTR tv3023[ebp]
	fsub	QWORD PTR [esi+eax-8]
	fmul	ST(0), ST(2)
	fld	ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [ecx+eax-8]

; 614  :             dd += d[j]*d[j];

	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	jne	SHORT $LC3@writhe

; 610  :       for ( j = 0 ; j < SDIM ; j++ )

	mov	edi, DWORD PTR tv1018[ebp]
	fstp	ST(1)

; 614  :             dd += d[j]*d[j];

	fstp	QWORD PTR _dd$[ebp]
	jmp	SHORT $LN42@writhe
$LN94@writhe:

; 610  :       for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(1)
	fstp	ST(0)
$LN42@writhe:

; 615  :       }
; 616  :       energy += triple_prod(dx1,d,dx2)/dd/sqrt(dd);

	lea	eax, DWORD PTR _dx2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _d$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dx1$[ebp]
	push	edx
	call	_triple_prod
	fld	QWORD PTR _dd$[ebp]
	fdiv	ST(1), ST(0)
	add	esp, 12					; 0000000cH
	fxch	ST(1)
	fstp	QWORD PTR tv2978[ebp]
	call	__CIsqrt
	fdivr	QWORD PTR tv2978[ebp]
	mov	ebx, DWORD PTR _dymem
	fadd	QWORD PTR _energy$[ebp]
	fst	QWORD PTR _energy$[ebp]
	fld	QWORD PTR __real@3fe0000000000000
$LN10@writhe:

; 602  :   FOR_ALL_EDGES(e2)

	mov	eax, DWORD PTR _web+124
	mov	ecx, DWORD PTR [edi+eax]
	mov	ecx, DWORD PTR [ecx]
	test	ecx, 268435456				; 10000000H
	jne	$LN45@writhe

; 610  :       for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(0)
$LN9@writhe:

; 617  :     }
; 618  :   return energy/4/M_PI;

	fmul	QWORD PTR __real@3fd0000000000000

; 619  : } // end writhe()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	fdiv	QWORD PTR __real@400921fb54442d18
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_writhe	ENDP
_TEXT	ENDS
PUBLIC	__real@4008000000000000
PUBLIC	_e_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_writhe_gradient
;	COMDAT __real@4008000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\knot2.c
CONST	ENDS
;	COMDAT _writhe_gradient
_TEXT	SEGMENT
tv3317 = -356						; size = 4
_ee$ = -352						; size = 8
tv2601 = -348						; size = 4
tv3307 = -344						; size = 4
tv2610 = -340						; size = 4
_e1$ = -336						; size = 4
tv3311 = -332						; size = 4
tv3309 = -328						; size = 4
tv2614 = -324						; size = 4
tv2240 = -320						; size = 4
tv3313 = -316						; size = 4
_energy$ = -312						; size = 8
_e_info$GSCopy$ = -304					; size = 4
tv3305 = -300						; size = 4
tv1257 = -296						; size = 8
_yy1$ = -292						; size = 4
_dd$ = -288						; size = 8
tv3315 = -284						; size = 4
tv3322 = -280						; size = 4
_e1t$ = -276						; size = 4
_e1h$ = -272						; size = 4
tv3319 = -268						; size = 4
tv1629 = -268						; size = 4
tv1621 = -264						; size = 4
tv1126 = -264						; size = 4
tv1625 = -260						; size = 4
_y2$ = -260						; size = 4
_x1$ = -256						; size = 4
tv3324 = -252						; size = 4
tv3321 = -252						; size = 4
_x2$ = -248						; size = 4
_e1xe2$ = -244						; size = 48
_dxe2$ = -196						; size = 48
_dx1$ = -148						; size = 48
_dx2$ = -100						; size = 48
_d$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_writhe_gradient PROC					; COMDAT

; 632  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 356				; 00000164H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 633  :   edge_id e1 = e_info->id,e2;
; 634  :   vertex_id e1h,e2h,e1t,e2t;
; 635  :   REAL *x1,*x2,*yy1,*y2; /* end coordinates */
; 636  :   REAL triple,ee,energy = 0.0;

	fldz

; 637  :   REAL dx1[MAXCOORD];
; 638  :   REAL dx2[MAXCOORD];
; 639  :   REAL d[MAXCOORD];
; 640  :   REAL e1xe2[MAXCOORD];
; 641  :   REAL dxe2[MAXCOORD];
; 642  :   REAL dd;
; 643  :   int i,j;
; 644  : 
; 645  :   e1t = get_edge_tailv(e1);

	mov	ecx, DWORD PTR _web+124
	push	ebx
	fst	QWORD PTR _energy$[ebp]
	mov	ebx, DWORD PTR _web+216
	push	esi
	mov	esi, DWORD PTR _web+636
	push	edi
	mov	edi, DWORD PTR _e_info$[ebp]
	mov	eax, DWORD PTR [edi]
	mov	edx, eax
	shr	edx, 27					; 0000001bH
	and	edx, 1
	mov	DWORD PTR _e_info$GSCopy$[ebp], edi
	mov	DWORD PTR _e1$[ebp], eax
	je	SHORT $LN27@writhe_gra
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _dymem
	mov	ebx, DWORD PTR [ebx+ecx+304]
	add	eax, ebx
	mov	ebx, DWORD PTR [eax+esi*4]
	jmp	SHORT $LN126@writhe_gra
$LN27@writhe_gra:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _dymem
	mov	ebx, DWORD PTR [ebx+ecx+304]
	add	eax, ebx
	mov	ebx, DWORD PTR [eax]
$LN126@writhe_gra:
	mov	DWORD PTR _e1t$[ebp], ebx

; 646  :   e1h = get_edge_headv(e1);

	test	edx, edx
	je	SHORT $LN31@writhe_gra
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _e1h$[ebp], edx
	jmp	SHORT $LN30@writhe_gra
$LN31@writhe_gra:
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR _e1h$[ebp], eax
$LN30@writhe_gra:

; 647  :   x1 = get_coord(e1t);

	mov	edx, DWORD PTR _web+104
	mov	eax, DWORD PTR [edx+ecx+64]
	mov	edx, DWORD PTR _e1t$[ebp]
	mov	ecx, DWORD PTR _web+12
	and	edx, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ecx+edx*4]

; 648  :   x2 = get_coord(e1h);

	mov	edx, DWORD PTR _e1h$[ebp]
	and	edx, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ecx+edx*4]
	add	esi, eax
	add	ebx, eax
	mov	DWORD PTR _x1$[ebp], esi
	mov	DWORD PTR _x2$[ebp], ebx
	xor	ecx, ecx
$LN62@writhe_gra:

; 650  :      for ( j = 0 ; j < SDIM ; j++ ) e_info->grad[i][j] = 0.0;

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN22@writhe_gra
$LN20@writhe_gra:
	mov	edx, DWORD PTR [edi+1336]
	mov	edx, DWORD PTR [edx+ecx]
	fst	QWORD PTR [edx+eax*8]
	inc	eax
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN20@writhe_gra
$LN22@writhe_gra:

; 649  :   for ( i = 0 ; i < 2 ; i++ )

	add	ecx, 4
	cmp	ecx, 8
	jl	SHORT $LN62@writhe_gra

; 651  :   for ( j = 0 ; j < SDIM ; j++ ) dx1[j] = x2[j] - x1[j];

	xor	edx, edx
	cmp	DWORD PTR _web+616, 4
	jl	$LC55@writhe_gra
	lea	edi, DWORD PTR _dx1$[ebp]
	sub	edi, esi
	mov	DWORD PTR tv1621[ebp], edi
	lea	edi, DWORD PTR _dx1$[ebp+8]
	sub	edi, esi
	mov	DWORD PTR tv1625[ebp], edi
	lea	ecx, DWORD PTR [ebx+24]
	lea	edi, DWORD PTR _dx1$[ebp+16]
	sub	ebx, esi
	sub	edi, esi
	lea	eax, DWORD PTR [esi+8]
	mov	DWORD PTR tv1629[ebp], edi
$LN56@writhe_gra:
	fld	QWORD PTR [ecx-24]
	mov	edi, DWORD PTR tv1621[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _dx1$[ebp+edx*8-32]
	fld	QWORD PTR [ebx+eax-32]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv1625[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv1629[ebp]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR _web+616
	add	edi, -3					; fffffffdH
	cmp	edx, edi
	jl	SHORT $LN56@writhe_gra
	mov	ebx, DWORD PTR _x2$[ebp]
$LC55@writhe_gra:
	cmp	edx, DWORD PTR _web+616
	jge	SHORT $LN54@writhe_gra
	mov	ecx, DWORD PTR _web+616
	lea	edi, DWORD PTR _dx1$[ebp]
	sub	ebx, esi
	sub	edi, esi
	lea	eax, DWORD PTR [esi+edx*8]
	sub	ecx, edx
$LC17@writhe_gra:
	fld	QWORD PTR [eax+ebx]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax+edi-8]
	jne	SHORT $LC17@writhe_gra
$LN54@writhe_gra:

; 652  :   FOR_ALL_EDGES(e2)

	mov	ecx, DWORD PTR _web+160
	fld	QWORD PTR __real@400921fb54442d18
	test	ecx, 268435456				; 10000000H
	je	$LN87@writhe_gra
	fld	QWORD PTR __real@3fe0000000000000
	mov	ebx, DWORD PTR _dymem
$LN14@writhe_gra:
	mov	eax, DWORD PTR _web+124
	mov	edi, ecx
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	edx, DWORD PTR [edi+eax]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	xor	esi, esi
	or	eax, esi
	mov	DWORD PTR tv1126[ebp], edi
	je	$LN13@writhe_gra

; 653  :     { if ( e2 == e1 ) continue;  /* equal edges */

	cmp	ecx, DWORD PTR _e1$[ebp]
	je	$LN13@writhe_gra

; 654  :       e2t = get_edge_tailv(e2);

	mov	eax, DWORD PTR _web+216
	mov	eax, DWORD PTR [eax+ebx+304]
	shr	ecx, 27					; 0000001bH
	add	edx, eax
	and	ecx, 1
	je	SHORT $LN35@writhe_gra
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN34@writhe_gra
$LN35@writhe_gra:
	mov	eax, DWORD PTR [edx]
$LN34@writhe_gra:

; 655  :       e2h = get_edge_headv(e2);

	test	ecx, ecx
	je	SHORT $LN39@writhe_gra
	mov	ecx, DWORD PTR [edx]
	jmp	SHORT $LN38@writhe_gra
$LN39@writhe_gra:
	mov	ecx, DWORD PTR _web+636
	mov	ecx, DWORD PTR [edx+ecx*4]
$LN38@writhe_gra:

; 656  :       if (e2t==e1h || e2h==e1t) continue; /* adjacent edges */

	cmp	eax, DWORD PTR _e1h$[ebp]
	je	$LN13@writhe_gra
	cmp	ecx, DWORD PTR _e1t$[ebp]
	je	$LN13@writhe_gra

; 657  :       yy1 = get_coord(e2t);

	mov	edx, DWORD PTR _web+104
	fstp	ST(1)
	mov	esi, DWORD PTR [edx+ebx+64]

; 658  :       y2 = get_coord(e2h);
; 659  :       dd = 0.0;

	fxch	ST(1)
	mov	ebx, DWORD PTR _web+12
	fst	QWORD PTR _dd$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+eax*4]
	and	ecx, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ebx+ecx*4]
	add	edx, esi
	add	ebx, esi

; 660  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	cmp	DWORD PTR _web+616, 4
	mov	DWORD PTR _yy1$[ebp], edx
	mov	DWORD PTR _y2$[ebp], ebx
	jl	$LC58@writhe_gra

; 664  :             dd += d[j]*d[j];

	lea	ecx, DWORD PTR [ebx+16]
	sub	ebx, edx
	mov	DWORD PTR tv2240[ebp], ebx
	mov	ebx, DWORD PTR _x1$[ebp]
	lea	eax, DWORD PTR [edx+8]
	neg	edx
	add	ebx, edx
	mov	DWORD PTR tv3305[ebp], ebx
	mov	ebx, DWORD PTR _x2$[ebp]
	add	ebx, edx
	mov	DWORD PTR tv3307[ebp], ebx
	lea	ebx, DWORD PTR _dx2$[ebp+edx]
	mov	DWORD PTR tv3309[ebp], ebx
	lea	ebx, DWORD PTR _dx2$[ebp+edx+8]
	mov	DWORD PTR tv3311[ebp], ebx
	lea	ebx, DWORD PTR _dx2$[ebp+edx+16]
	mov	DWORD PTR tv3313[ebp], ebx
	lea	ebx, DWORD PTR _d$[ebp+edx+16]
	mov	edi, DWORD PTR _x2$[ebp]
	mov	DWORD PTR tv3315[ebp], ebx
	lea	ebx, DWORD PTR _d$[ebp+edx]
	lea	edx, DWORD PTR _d$[ebp+edx+8]
	mov	DWORD PTR tv3319[ebp], edx
	mov	edx, DWORD PTR _y2$[ebp]
	neg	edx
	mov	DWORD PTR tv3321[ebp], edx
	add	edx, DWORD PTR _x1$[ebp]
	mov	DWORD PTR tv3317[ebp], ebx
	mov	ebx, DWORD PTR _x2$[ebp]
	mov	DWORD PTR tv3322[ebp], edx
	mov	edx, DWORD PTR tv3321[ebp]
	add	edx, ebx
	mov	DWORD PTR tv3324[ebp], edx
	mov	edx, DWORD PTR _x1$[ebp]
	sub	edx, ebx
	mov	DWORD PTR tv2601[ebp], edx
	mov	edx, DWORD PTR _x1$[ebp]
	lea	ebx, DWORD PTR _dx2$[ebp]
	sub	ebx, edx
	mov	DWORD PTR tv2610[ebp], ebx
	lea	ebx, DWORD PTR _d$[ebp]
	add	edi, 24					; 00000018H
	sub	edx, ebx
	mov	DWORD PTR tv2614[ebp], edx
	jmp	SHORT $LN59@writhe_gra
$LN61@writhe_gra:
	mov	edx, DWORD PTR tv2614[ebp]

; 660  :       for ( j = 0 ; j < SDIM ; j++ )

$LN59@writhe_gra:

; 661  :       {
; 662  :             dx2[j] = y2[j] - yy1[j];

	fld	QWORD PTR [ecx-16]
	mov	ebx, DWORD PTR tv2610[ebp]
	fsub	QWORD PTR [eax-8]

; 664  :             dd += d[j]*d[j];

	lea	edx, DWORD PTR [edx+esi*8]
	lea	edx, DWORD PTR _d$[ebp+edx]
	add	esi, 4
	fstp	QWORD PTR [edx+ebx]
	mov	ebx, DWORD PTR tv3309[ebp]
	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	fadd	QWORD PTR [ecx-16]
	add	ecx, 32					; 00000020H
	add	edi, 32					; 00000020H
	fsub	QWORD PTR [edx]
	mov	edx, DWORD PTR tv2240[ebp]
	fsub	QWORD PTR [edi-56]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR _d$[ebp+esi*8-32]
	fld	QWORD PTR [edx+eax-32]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv3311[ebp]
	fld	QWORD PTR [edx+eax-32]
	mov	edx, DWORD PTR tv3305[ebp]
	fadd	QWORD PTR [eax-32]
	fsub	QWORD PTR [edx+eax-32]
	mov	edx, DWORD PTR tv3307[ebp]
	fsub	QWORD PTR [edx+eax-32]
	mov	edx, DWORD PTR tv3317[ebp]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [edx+eax-32]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv3322[ebp]
	fld	QWORD PTR [eax-24]
	fadd	QWORD PTR [ecx-32]
	fsub	QWORD PTR [ebx+ecx-32]
	mov	ebx, DWORD PTR tv3324[ebp]
	fsub	QWORD PTR [ebx+ecx-32]
	mov	ebx, DWORD PTR tv3319[ebp]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv3313[ebp]
	fld	QWORD PTR [ecx-24]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv2601[ebp]
	fld	QWORD PTR [eax-16]
	fadd	QWORD PTR [ecx-24]
	fsub	QWORD PTR [ebx+edi-32]
	mov	ebx, DWORD PTR tv3315[ebp]
	fsub	QWORD PTR [edi-32]
	fmul	ST(0), ST(2)
	fld	ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [ebx+eax-32]
	fld	QWORD PTR _d$[ebp+esi*8-32]
	fld	QWORD PTR [edx+eax-32]
	mov	edx, DWORD PTR tv3319[ebp]
	fld	QWORD PTR [edx+eax-32]
	mov	edx, DWORD PTR _web+616
	fld	ST(2)
	add	edx, -3					; fffffffdH
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	faddp	ST(4), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(3), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	cmp	esi, edx
	jl	$LN61@writhe_gra
	mov	edi, DWORD PTR tv1126[ebp]
	fst	QWORD PTR _dd$[ebp]
	mov	ebx, DWORD PTR _y2$[ebp]
	mov	edx, DWORD PTR _yy1$[ebp]
$LC58@writhe_gra:

; 660  :       for ( j = 0 ; j < SDIM ; j++ )

	cmp	esi, DWORD PTR _web+616
	jge	SHORT $LN115@writhe_gra
	mov	ecx, ebx
	lea	eax, DWORD PTR [ebx+esi*8]
	sub	edx, ebx
	mov	ebx, DWORD PTR _x1$[ebp]
	neg	ecx
	add	ebx, ecx
	mov	DWORD PTR tv3322[ebp], ebx
	mov	ebx, DWORD PTR _x2$[ebp]
	add	ebx, ecx
	mov	DWORD PTR tv3324[ebp], ebx
	mov	ebx, DWORD PTR _web+616
	lea	edi, DWORD PTR _dx2$[ebp+ecx]
	lea	ecx, DWORD PTR _d$[ebp+ecx]
	sub	ebx, esi
$LC6@writhe_gra:

; 661  :       {
; 662  :             dx2[j] = y2[j] - yy1[j];

	fld	QWORD PTR [eax]

; 663  :             d[j] = (yy1[j] + y2[j] - x1[j] - x2[j])/2;

	mov	esi, DWORD PTR tv3322[ebp]
	fsub	QWORD PTR [edx+eax]
	add	eax, 8
	dec	ebx
	fstp	QWORD PTR [eax+edi-8]
	fld	QWORD PTR [edx+eax-8]
	fadd	QWORD PTR [eax-8]
	fsub	QWORD PTR [eax+esi-8]
	mov	esi, DWORD PTR tv3324[ebp]
	fsub	QWORD PTR [eax+esi-8]
	fmul	ST(0), ST(2)
	fld	ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax+ecx-8]

; 664  :             dd += d[j]*d[j];

	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	jne	SHORT $LC6@writhe_gra

; 660  :       for ( j = 0 ; j < SDIM ; j++ )

	mov	edi, DWORD PTR tv1126[ebp]
	fstp	ST(1)

; 664  :             dd += d[j]*d[j];

	fst	QWORD PTR _dd$[ebp]
	jmp	SHORT $LN57@writhe_gra
$LN115@writhe_gra:

; 660  :       for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(1)
$LN57@writhe_gra:

; 665  :       }
; 666  :       triple = triple_prod(dx1,d,dx2);
; 667  :       ee = triple/dd/sqrt(dd);

	call	__CIsqrt
	fstp	QWORD PTR tv1257[ebp]
	lea	eax, DWORD PTR _dx2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _d$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dx1$[ebp]
	push	edx
	call	_triple_prod
	fdiv	QWORD PTR _dd$[ebp]

; 668  :       energy += ee;
; 669  :       cross_prod(dx1,dx2,e1xe2); cross_prod(d,dx2,dxe2);

	lea	eax, DWORD PTR _e1xe2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dx2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dx1$[ebp]
	push	edx
	fdiv	QWORD PTR tv1257[ebp]
	fst	QWORD PTR _ee$[ebp]
	fadd	QWORD PTR _energy$[ebp]
	fstp	QWORD PTR _energy$[ebp]
	call	_cross_prod
	lea	eax, DWORD PTR _dxe2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dx2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _d$[ebp]
	push	edx
	call	_cross_prod

; 670  :       for ( j = 0 ; j < SDIM ; j++ ) 

	xor	eax, eax
	add	esp, 36					; 00000024H
	cmp	DWORD PTR _web+616, eax
	jle	$LN60@writhe_gra
	fld	QWORD PTR _ee$[ebp]
	fmul	QWORD PTR __real@4008000000000000
	fld	QWORD PTR _dd$[ebp]
	fdiv	ST(1), ST(0)
	fld	QWORD PTR tv1257[ebp]
	fld	QWORD PTR __real@400921fb54442d18
	fld	QWORD PTR __real@3fe0000000000000
$LN3@writhe_gra:

; 671  :       {
; 672  :          register REAL common1 = 3*ee/dd * d[j]/2;

	fld	QWORD PTR _d$[ebp+eax*8]

; 673  :          register REAL common2 = e1xe2[j]/dd/sqrt(dd)/2;
; 674  :          register REAL oppose = dxe2[j]/dd/sqrt(dd);
; 675  :          e_info->grad[0][j] += (common1 + common2 - oppose)/2/M_PI;

	mov	edx, DWORD PTR _e_info$GSCopy$[ebp]
	fmul	ST(0), ST(5)
	mov	ecx, DWORD PTR [edx+1336]
	mov	ecx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx+eax*8]
	fmul	ST(0), ST(1)
	fld	QWORD PTR _e1xe2$[ebp+eax*8]
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(4)
	fmul	ST(0), ST(2)
	fld	QWORD PTR _dxe2$[ebp+eax*8]
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(5)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fld	ST(1)
	fsub	ST(0), ST(1)
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(4)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+1336]
	mov	ecx, DWORD PTR [edx+4]

; 676  :          e_info->grad[1][j] += (common1 + common2 + oppose)/2/M_PI;

	faddp	ST(1), ST(0)
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fmul	ST(0), ST(1)
	fdiv	ST(0), ST(2)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN3@writhe_gra

; 670  :       for ( j = 0 ; j < SDIM ; j++ ) 

	fstp	ST(3)
	fstp	ST(1)
	fstp	ST(2)
	jmp	SHORT $LN127@writhe_gra
$LN60@writhe_gra:
	fld	QWORD PTR __real@400921fb54442d18
	fld	QWORD PTR __real@3fe0000000000000
$LN127@writhe_gra:
	fldz
	mov	ebx, DWORD PTR _dymem
	fxch	ST(2)
	fxch	ST(1)
$LN13@writhe_gra:

; 652  :   FOR_ALL_EDGES(e2)

	mov	edx, DWORD PTR _web+124
	mov	eax, DWORD PTR [edi+edx]
	mov	ecx, DWORD PTR [eax]
	test	ecx, 268435456				; 10000000H
	jne	$LN14@writhe_gra

; 670  :       for ( j = 0 ; j < SDIM ; j++ ) 

	fstp	ST(0)
$LN87@writhe_gra:

; 677  :       }
; 678  :     }
; 679  :   return energy/4/M_PI;
; 680  : } // end writhe_gradient()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(1)
	fld	QWORD PTR _energy$[ebp]
	pop	edi
	fmul	QWORD PTR __real@3fd0000000000000
	pop	esi
	xor	ecx, ebp
	pop	ebx
	fdivrp	ST(1), ST(0)
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_writhe_gradient ENDP
_TEXT	ENDS
PUBLIC	__real@bff0000000000000
PUBLIC	__$ArrayPad$
PUBLIC	_true_ax_wr
EXTRN	__CIacos:PROC
;	COMDAT __real@bff0000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\knot2.c
CONST	ENDS
;	COMDAT _true_ax_wr
_TEXT	SEGMENT
_energy$ = -432						; size = 8
tv3205 = -424						; size = 4
tv3213 = -420						; size = 4
tv3203 = -416						; size = 4
tv3207 = -412						; size = 4
tv3201 = -408						; size = 4
tv3209 = -404						; size = 4
tv3195 = -400						; size = 4
tv3217 = -396						; size = 4
tv3215 = -392						; size = 4
tv1283 = -388						; size = 4
tv3211 = -384						; size = 4
_e1$ = -380						; size = 4
tv3197 = -376						; size = 4
tv3199 = -372						; size = 4
tv3228 = -368						; size = 4
tv2111 = -364						; size = 4
tv3191 = -360						; size = 4
tv3115 = -356						; size = 8
tv3221 = -352						; size = 4
tv2751 = -352						; size = 4
tv3193 = -348						; size = 4
tv3226 = -344						; size = 4
_e1t$ = -340						; size = 4
tv3219 = -336						; size = 4
tv2829 = -336						; size = 4
_e1h$ = -332						; size = 4
_d$ = -328						; size = 4
_j$ = -324						; size = 4
_b$ = -320						; size = 4
_sum$ = -316						; size = 8
tv3223 = -312						; size = 4
tv2742 = -312						; size = 4
tv3225 = -308						; size = 4
tv2435 = -308						; size = 4
_a$ = -304						; size = 4
tv2966 = -300						; size = 4
_c$ = -300						; size = 4
tv2887 = -296						; size = 4
tv2444 = -296						; size = 4
_q$ = -292						; size = 192
_pr$ = -100						; size = 32
_qr$ = -68						; size = 32
_qq$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_absval$ = 12						; size = 4
_true_ax_wr PROC					; COMDAT

; 718  : { edge_id e1 = e_info->id,e2;

	push	ebp
	mov	ebp, esp
	sub	esp, 432				; 000001b0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 719  :   vertex_id e1t,e1h,e2t,e2h;
; 720  :   REAL *a,*b,*c,*d; /* end coordinates */
; 721  :   REAL energy = 0.0;

	fldz
	mov	eax, DWORD PTR _e_info$[ebp]
	mov	eax, DWORD PTR [eax]
	fld	ST(0)

; 722  :   REAL q[4][MAXCOORD];
; 723  :   REAL qq[4];
; 724  :   REAL qr[4];
; 725  :   REAL pr[4];
; 726  :   REAL sum;
; 727  :   int i,j;
; 728  : 
; 729  :   for ( i = 0 ; i < 4 ; i++ ) qq[i] = qr[i] = pr[i] = 0.0;
; 730  : 
; 731  :   e1t = get_edge_tailv(e1); e1h = get_edge_headv(e1);

	mov	ecx, DWORD PTR _web+124
	fst	QWORD PTR _energy$[ebp]
	fxch	ST(1)
	mov	edx, eax
	fst	QWORD PTR _pr$[ebp]
	push	esi
	mov	esi, DWORD PTR _web+636
	fst	QWORD PTR _qr$[ebp]
	fst	QWORD PTR _qq$[ebp]
	shr	edx, 27					; 0000001bH
	and	edx, 1
	fst	QWORD PTR _pr$[ebp+8]
	fst	QWORD PTR _qr$[ebp+8]
	push	edi
	mov	edi, DWORD PTR _web+216
	fst	QWORD PTR _qq$[ebp+8]
	fst	QWORD PTR _pr$[ebp+16]
	mov	DWORD PTR _e1$[ebp], eax
	fst	QWORD PTR _qr$[ebp+16]
	fst	QWORD PTR _qq$[ebp+16]
	fst	QWORD PTR _pr$[ebp+24]
	fst	QWORD PTR _qr$[ebp+24]
	fstp	QWORD PTR _qq$[ebp+24]
	je	SHORT $LN30@true_ax_wr
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _dymem
	mov	edi, DWORD PTR [edi+ecx+304]
	add	eax, edi
	mov	edi, DWORD PTR [eax+esi*4]
	jmp	SHORT $LN121@true_ax_wr
$LN30@true_ax_wr:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _dymem
	mov	edi, DWORD PTR [edi+ecx+304]
	add	eax, edi
	mov	edi, DWORD PTR [eax]
$LN121@true_ax_wr:
	mov	DWORD PTR _e1t$[ebp], edi
	test	edx, edx
	je	SHORT $LN34@true_ax_wr
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _e1h$[ebp], edx
	jmp	SHORT $LN33@true_ax_wr
$LN34@true_ax_wr:
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR _e1h$[ebp], eax
$LN33@true_ax_wr:

; 732  :   a = get_coord(e1t);

	mov	edx, DWORD PTR _web+104
	mov	eax, DWORD PTR [edx+ecx+64]
	mov	edx, DWORD PTR _e1t$[ebp]
	mov	ecx, DWORD PTR _web+12
	and	edx, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ecx+edx*4]

; 733  :   b = get_coord(e1h);

	mov	edx, DWORD PTR _e1h$[ebp]
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	add	ecx, eax
	mov	DWORD PTR _b$[ebp], ecx

; 734  : 
; 735  :   FOR_ALL_EDGES(e2)

	mov	ecx, DWORD PTR _web+160
	add	edi, eax
	mov	DWORD PTR _a$[ebp], edi
	test	ecx, 268435456				; 10000000H
	je	$LN21@true_ax_wr
	push	ebx
$LN71@true_ax_wr:
	mov	eax, DWORD PTR _web+124
	mov	ebx, ecx
	and	ebx, 134217727				; 07ffffffH
	add	ebx, ebx
	add	ebx, ebx
	mov	edx, DWORD PTR [ebx+eax]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	xor	esi, esi
	or	eax, esi
	mov	DWORD PTR tv1283[ebp], ebx
	je	$LN22@true_ax_wr

; 736  :     { if ( e2 <= e1 ) continue; /* each pair once */

	cmp	ecx, DWORD PTR _e1$[ebp]
	jbe	$LN22@true_ax_wr

; 737  :       e2t = get_edge_tailv(e2);

	mov	eax, DWORD PTR _web+216
	mov	esi, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+esi+304]
	shr	ecx, 27					; 0000001bH
	add	edx, eax
	and	ecx, 1
	je	SHORT $LN38@true_ax_wr
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN37@true_ax_wr
$LN38@true_ax_wr:
	mov	eax, DWORD PTR [edx]
$LN37@true_ax_wr:

; 738  :       e2h = get_edge_headv(e2);

	test	ecx, ecx
	je	SHORT $LN42@true_ax_wr
	mov	edx, DWORD PTR [edx]
	jmp	SHORT $LN41@true_ax_wr
$LN42@true_ax_wr:
	mov	ecx, DWORD PTR _web+636
	mov	edx, DWORD PTR [edx+ecx*4]
$LN41@true_ax_wr:

; 739  :       if (e2t==e1h || e2h==e1t) continue; /* adjacent edges */

	cmp	eax, DWORD PTR _e1h$[ebp]
	je	$LN22@true_ax_wr
	cmp	edx, DWORD PTR _e1t$[ebp]
	je	$LN22@true_ax_wr

; 740  :       c = get_coord(e2t);

	mov	ecx, DWORD PTR _web+104
	fstp	ST(0)
	mov	ebx, DWORD PTR [ecx+esi+64]
	mov	esi, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+eax*4]

; 741  :       d = get_coord(e2h);

	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	add	ecx, ebx
	add	edx, ebx

; 742  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	cmp	DWORD PTR _web+616, 4
	mov	DWORD PTR _c$[ebp], ecx
	mov	DWORD PTR _d$[ebp], edx
	mov	DWORD PTR _j$[ebp], eax
	jl	$LN68@true_ax_wr

; 745  :             q[2][j] = c[j]-b[j]; q[3][j] = d[j]-b[j];

	lea	eax, DWORD PTR [ecx+8]
	neg	ecx
	lea	ebx, DWORD PTR [ecx+edi]
	mov	DWORD PTR tv3191[ebp], ebx
	mov	ebx, DWORD PTR _d$[ebp]
	sub	ebx, DWORD PTR _c$[ebp]
	mov	esi, DWORD PTR _b$[ebp]
	mov	DWORD PTR tv2111[ebp], ebx
	mov	ebx, DWORD PTR _b$[ebp]
	add	ebx, ecx
	mov	DWORD PTR tv3193[ebp], ebx
	lea	ebx, DWORD PTR _q$[ebp+ecx+40]
	mov	DWORD PTR tv3195[ebp], ebx
	lea	ebx, DWORD PTR _q$[ebp+ecx+88]
	mov	DWORD PTR tv3197[ebp], ebx
	lea	ebx, DWORD PTR _q$[ebp+ecx+136]
	mov	DWORD PTR tv3199[ebp], ebx
	lea	ebx, DWORD PTR _q$[ebp+ecx]
	mov	DWORD PTR tv3201[ebp], ebx
	lea	ebx, DWORD PTR _q$[ebp+ecx+48]
	mov	DWORD PTR tv3203[ebp], ebx
	lea	ebx, DWORD PTR _q$[ebp+ecx+96]
	mov	DWORD PTR tv3205[ebp], ebx
	lea	ebx, DWORD PTR _q$[ebp+ecx+144]
	mov	DWORD PTR tv3207[ebp], ebx
	lea	ebx, DWORD PTR _q$[ebp+ecx+8]
	mov	DWORD PTR tv3209[ebp], ebx
	lea	ebx, DWORD PTR _q$[ebp+ecx+56]
	mov	DWORD PTR tv3211[ebp], ebx
	lea	ebx, DWORD PTR _q$[ebp+ecx+104]
	mov	DWORD PTR tv3213[ebp], ebx
	lea	ebx, DWORD PTR _q$[ebp+ecx+152]
	mov	DWORD PTR tv3215[ebp], ebx
	lea	ebx, DWORD PTR _q$[ebp+ecx+16]
	mov	DWORD PTR tv3217[ebp], ebx
	lea	ebx, DWORD PTR _q$[ebp+ecx+64]
	mov	DWORD PTR tv3219[ebp], ebx
	lea	ebx, DWORD PTR _q$[ebp+ecx+112]
	lea	ecx, DWORD PTR _q$[ebp+ecx+160]
	mov	DWORD PTR tv3223[ebp], ecx
	mov	ecx, DWORD PTR _d$[ebp]
	neg	ecx
	mov	DWORD PTR tv3225[ebp], ecx
	add	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR tv3221[ebp], ebx
	mov	ebx, DWORD PTR _b$[ebp]
	mov	DWORD PTR tv3226[ebp], ecx
	mov	ecx, DWORD PTR tv3225[ebp]
	add	ecx, ebx
	mov	DWORD PTR tv3228[ebp], ecx
	mov	ecx, DWORD PTR _a$[ebp]
	sub	ecx, ebx
	mov	DWORD PTR tv2435[ebp], ecx
	lea	ecx, DWORD PTR _q$[ebp]
	sub	ecx, DWORD PTR _a$[ebp]
	add	esi, 24					; 00000018H
	mov	DWORD PTR tv2444[ebp], ecx
	mov	ecx, DWORD PTR _web+616
	add	ecx, -4					; fffffffcH
	shr	ecx, 2
	add	edx, 16					; 00000010H
	inc	ecx
	lea	ebx, DWORD PTR [ecx*4]
	mov	DWORD PTR _j$[ebp], ebx
$LL62@true_ax_wr:

; 743  :       {
; 744  :             q[0][j] = d[j]-a[j]; q[1][j] = c[j]-a[j];

	fld	QWORD PTR [edx-16]
	mov	ebx, DWORD PTR tv2444[ebp]
	fsub	QWORD PTR [edi]

; 745  :             q[2][j] = c[j]-b[j]; q[3][j] = d[j]-b[j];

	add	edi, 32					; 00000020H
	add	eax, 32					; 00000020H
	add	edx, 32					; 00000020H
	fstp	QWORD PTR [edi+ebx-32]
	mov	ebx, DWORD PTR tv3195[ebp]
	fld	QWORD PTR [eax-40]
	add	esi, 32					; 00000020H
	fsub	QWORD PTR [edi-32]
	dec	ecx
	fstp	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv3197[ebp]
	fld	QWORD PTR [eax-40]
	fsub	QWORD PTR [esi-56]
	fstp	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv3199[ebp]
	fld	QWORD PTR [edx-48]
	fsub	QWORD PTR [esi-56]
	fstp	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv2111[ebp]
	fld	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv3191[ebp]
	fsub	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv3201[ebp]
	fstp	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv3191[ebp]
	fld	QWORD PTR [eax-32]
	fsub	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv3203[ebp]
	fstp	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv3193[ebp]
	fld	QWORD PTR [eax-32]
	fsub	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv3205[ebp]
	fstp	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv2111[ebp]
	fld	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv3193[ebp]
	fsub	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv3207[ebp]
	fstp	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv3226[ebp]
	fld	QWORD PTR [edx-32]
	fsub	QWORD PTR [edx+ebx-32]
	mov	ebx, DWORD PTR tv3209[ebp]
	fstp	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv3226[ebp]
	fld	QWORD PTR [eax-24]
	fsub	QWORD PTR [edx+ebx-32]
	mov	ebx, DWORD PTR tv3211[ebp]
	fstp	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv3228[ebp]
	fld	QWORD PTR [eax-24]
	fsub	QWORD PTR [edx+ebx-32]
	mov	ebx, DWORD PTR tv3213[ebp]
	fstp	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv3228[ebp]
	fld	QWORD PTR [edx-32]
	fsub	QWORD PTR [edx+ebx-32]
	mov	ebx, DWORD PTR tv3215[ebp]
	fstp	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv2435[ebp]
	fld	QWORD PTR [edx-24]
	fsub	QWORD PTR [esi+ebx-32]
	mov	ebx, DWORD PTR tv3217[ebp]
	fstp	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv2435[ebp]
	fld	QWORD PTR [eax-16]
	fsub	QWORD PTR [esi+ebx-32]
	mov	ebx, DWORD PTR tv3219[ebp]
	fstp	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv3221[ebp]
	fld	QWORD PTR [eax-16]
	fsub	QWORD PTR [esi-32]
	fstp	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv3223[ebp]
	fld	QWORD PTR [edx-24]
	fsub	QWORD PTR [esi-32]
	fstp	QWORD PTR [eax+ebx-32]
	jne	$LL62@true_ax_wr

; 740  :       c = get_coord(e2t);

	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	mov	edi, DWORD PTR _a$[ebp]
$LN68@true_ax_wr:

; 742  :       for ( j = 0 ; j < SDIM ; j++ )

	cmp	eax, DWORD PTR _web+616
	jge	$LN60@true_ax_wr
	mov	esi, DWORD PTR _b$[ebp]
	lea	ebx, DWORD PTR _q$[ebp]
	sub	ebx, edi
	mov	DWORD PTR tv2444[ebp], ebx
	lea	ebx, DWORD PTR _q$[ebp+48]
	sub	ebx, edi
	mov	DWORD PTR tv2742[ebp], ebx
	lea	ebx, DWORD PTR _q$[ebp+96]
	sub	ebx, edi
	mov	DWORD PTR tv2751[ebp], ebx
	mov	ebx, edx
	lea	edx, DWORD PTR _q$[ebp+144]
	sub	edx, edi
	mov	DWORD PTR tv2829[ebp], edx
	mov	edx, DWORD PTR _web+616
	sub	ecx, edi
	sub	ebx, edi
	sub	esi, edi
	sub	edx, DWORD PTR _j$[ebp]
	lea	eax, DWORD PTR [edi+eax*8]
$LL67@true_ax_wr:

; 743  :       {
; 744  :             q[0][j] = d[j]-a[j]; q[1][j] = c[j]-a[j];

	fld	QWORD PTR [ebx+eax]
	mov	edi, DWORD PTR tv2444[ebp]
	fsub	QWORD PTR [eax]
	add	eax, 8
	dec	edx
	fstp	QWORD PTR [eax+edi-8]
	mov	edi, DWORD PTR tv2742[ebp]
	fld	QWORD PTR [ecx+eax-8]
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [edi+eax-8]

; 745  :             q[2][j] = c[j]-b[j]; q[3][j] = d[j]-b[j];

	mov	edi, DWORD PTR tv2751[ebp]
	fld	QWORD PTR [ecx+eax-8]
	fsub	QWORD PTR [esi+eax-8]
	fstp	QWORD PTR [edi+eax-8]
	mov	edi, DWORD PTR tv2829[ebp]
	fld	QWORD PTR [ebx+eax-8]
	fsub	QWORD PTR [esi+eax-8]
	fstp	QWORD PTR [edi+eax-8]
	jne	SHORT $LL67@true_ax_wr
$LN60@true_ax_wr:

; 746  :       }
; 747  :       for (i=0; i<4; i++)

	mov	DWORD PTR tv2887[ebp], -1
	lea	esi, DWORD PTR _q$[ebp]
	xor	edi, edi
	mov	DWORD PTR tv2966[ebp], 4
	npad	8
$LL64@true_ax_wr:

; 748  :       {
; 749  :           int im1 = (i-1)&3, ip1 = (i+1)&3;
; 750  :           qq[i] = SDIM_dot(q[i],q[i]);

	mov	edx, DWORD PTR _web+616
	mov	ebx, DWORD PTR tv2887[ebp]
	push	edx
	push	esi
	add	ebx, -2					; fffffffeH
	push	esi
	and	ebx, 3
	call	_dot
	fstp	QWORD PTR _qq$[ebp+edi]

; 751  :           qr[i] = SDIM_dot(q[i],q[ip1]);

	mov	eax, DWORD PTR _web+616
	lea	ebx, DWORD PTR [ebx+ebx*2]
	add	ebx, ebx
	push	eax
	lea	ebx, DWORD PTR _q$[ebp+ebx*8]
	push	ebx
	push	esi
	call	_dot
	fstp	QWORD PTR _qr$[ebp+edi]

; 752  :           pr[i] = SDIM_dot(q[im1],q[ip1]);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	push	ebx
	mov	ebx, DWORD PTR tv2887[ebp]
	mov	eax, ebx
	and	eax, 3
	lea	edx, DWORD PTR [eax+eax*2]
	add	edx, edx
	lea	eax, DWORD PTR _q$[ebp+edx*8]
	push	eax
	call	_dot
	fstp	QWORD PTR _pr$[ebp+edi]
	inc	ebx
	add	esp, 36					; 00000024H
	add	esi, 48					; 00000030H
	add	edi, 8
	dec	DWORD PTR tv2966[ebp]
	mov	DWORD PTR tv2887[ebp], ebx
	jne	SHORT $LL64@true_ax_wr

; 753  :       }
; 754  :       sum=0.;

	fldz
	mov	edi, 1
	fst	QWORD PTR _sum$[ebp]

; 755  :       for (i=0; i<4; i++)

	xor	esi, esi
	lea	ebx, DWORD PTR [edi+3]
	jmp	SHORT $LN9@true_ax_wr
$LL113@true_ax_wr:
	fstp	ST(0)
	fldz
$LN9@true_ax_wr:

; 756  :       {
; 757  :           int im1 = (i-1)&3, ip1 = (i+1)&3;
; 758  :           REAL denom=(qq[im1]*qq[i]-qr[im1]*qr[im1])*(qq[i]*qq[ip1]-qr[i]*qr[i]);

	fld	QWORD PTR _qr$[ebp+esi]
	lea	eax, DWORD PTR [edi-2]
	and	eax, 3
	fld	QWORD PTR _qr$[ebp+eax*8]
	lea	ecx, DWORD PTR _qr$[ebp+eax*8]
	mov	edx, edi
	and	edx, 3
	fld	QWORD PTR _qq$[ebp+edx*8]
	fmul	QWORD PTR _qq$[ebp+esi]
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fsubrp	ST(2), ST(0)
	fld	QWORD PTR _qq$[ebp+eax*8]
	fmul	QWORD PTR _qq$[ebp+esi]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	fmulp	ST(1), ST(0)

; 759  :           REAL cosine;
; 760  :           if (denom>0.) cosine = (qr[im1]*qr[i] - pr[i]*qq[i]) / sqrt(denom);

	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN119@true_ax_wr
	fstp	ST(1)
	fld	QWORD PTR _qr$[ebp+esi]
	fmul	QWORD PTR [ecx]
	fld	QWORD PTR _pr$[ebp+esi]
	fmul	QWORD PTR _qq$[ebp+esi]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR tv3115[ebp]
	call	__CIsqrt
	fdivr	QWORD PTR tv3115[ebp]

; 761  :           else            cosine = 0.;
; 762  :           if  (cosine>1.)        cosine=1.;

	fld1
	fcom	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN109@true_ax_wr
	fstp	ST(1)
	jmp	SHORT $LN2@true_ax_wr
$LN109@true_ax_wr:
	fstp	ST(0)

; 763  :           else if (cosine<-1.) cosine=-1.;

	fld	QWORD PTR __real@bff0000000000000
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN119@true_ax_wr
	fstp	ST(1)
	jmp	SHORT $LN2@true_ax_wr
$LN119@true_ax_wr:
	fstp	ST(0)
$LN2@true_ax_wr:

; 764  :           sum += acos(cosine);

	call	__CIacos
	fadd	QWORD PTR _sum$[ebp]
	inc	edi
	add	esi, 8
	dec	ebx
	fst	QWORD PTR _sum$[ebp]
	jne	$LL113@true_ax_wr

; 765  :       }
; 766  :       sum = 1-sum/2/M_PI;

	fmul	QWORD PTR __real@3fe0000000000000
	fdiv	QWORD PTR __real@400921fb54442d18
	fld1
	fsubrp	ST(1), ST(0)
	fst	QWORD PTR _sum$[ebp]

; 767  :       if (!absval && triple_prod(q[0],q[1],q[2]) < 0.) sum = -sum;

	cmp	DWORD PTR _absval$[ebp], ebx
	jne	SHORT $LN1@true_ax_wr
	lea	eax, DWORD PTR _q$[ebp+96]
	fstp	ST(0)
	push	eax
	lea	ecx, DWORD PTR _q$[ebp+48]
	push	ecx
	lea	edx, DWORD PTR _q$[ebp]
	push	edx
	call	_triple_prod
	fcomp	QWORD PTR __real@0000000000000000
	add	esp, 12					; 0000000cH
	fnstsw	ax
	fld	QWORD PTR _sum$[ebp]
	test	ah, 5
	jp	SHORT $LN1@true_ax_wr
	fchs
$LN1@true_ax_wr:

; 768  :       energy += sum;

	fadd	QWORD PTR _energy$[ebp]
	mov	ebx, DWORD PTR tv1283[ebp]
	mov	edi, DWORD PTR _a$[ebp]
	fst	QWORD PTR _energy$[ebp]
$LN22@true_ax_wr:

; 734  : 
; 735  :   FOR_ALL_EDGES(e2)

	mov	eax, DWORD PTR _web+124
	mov	ecx, DWORD PTR [ebx+eax]
	mov	ecx, DWORD PTR [ecx]
	test	ecx, 268435456				; 10000000H
	jne	$LN71@true_ax_wr
	pop	ebx
$LN21@true_ax_wr:

; 769  :     }
; 770  : 
; 771  :   return energy;
; 772  : } // end true_ax_wr()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_true_ax_wr ENDP
_TEXT	ENDS
PUBLIC	_true_average_crossing
; Function compile flags: /Ogtp
;	COMDAT _true_average_crossing
_TEXT	SEGMENT
_e_info$ = 8						; size = 4
_true_average_crossing PROC				; COMDAT

; 776  : { return true_ax_wr(e_info, 1); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _e_info$[ebp]
	push	1
	push	eax
	call	_true_ax_wr
	add	esp, 8
	pop	ebp
	ret	0
_true_average_crossing ENDP
_TEXT	ENDS
PUBLIC	_true_writhe
; Function compile flags: /Ogtp
;	COMDAT _true_writhe
_TEXT	SEGMENT
_e_info$ = 8						; size = 4
_true_writhe PROC					; COMDAT

; 780  : { return true_ax_wr(e_info, 0); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _e_info$[ebp]
	push	0
	push	eax
	call	_true_ax_wr
	add	esp, 8
	pop	ebp
	ret	0
_true_writhe ENDP
_TEXT	ENDS
END
