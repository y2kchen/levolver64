; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\FILMQ.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_poly2partial
_DATA	SEGMENT
COMM	_vcoeff:QWORD:0d8H
_poly2partial DQ 03ff0000000000000r		; 1
	DQ	03ff0000000000000r		; 1
	DQ	03ff0000000000000r		; 1
	DQ	03ff0000000000000r		; 1
	DQ	0c000000000000000r		; -2
	DQ	0bff0000000000000r		; -1
	DQ	0bff0000000000000r		; -1
	DQ	00000000000000000r		; 0
	DQ	03ff0000000000000r		; 1
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	03ff0000000000000r		; 1
	DQ	03ff0000000000000r		; 1
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	03ff0000000000000r		; 1
	DQ	00000000000000000r		; 0
	DQ	0bff0000000000000r		; -1
	DQ	0bff0000000000000r		; -1
	DQ	04000000000000000r		; 2
_DATA	ENDS
PUBLIC	_get_fe_edge
EXTRN	_web:BYTE
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
;	COMDAT _get_fe_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_edge PROC					; COMDAT

; 43   : {

	push	ebp
	mov	ebp, esp

; 44   :   edge_id e_id;
; 45   :     
; 46   :   e_id = feptr(fe_id)->fe_edge_id;

	mov	eax, DWORD PTR _fe_id$[ebp]

; 47   : 
; 48   :   /*
; 49   :   if ( inverted(fe_id) ) invert(e_id);
; 50   :   return e_id;
; 51   :   */
; 52   :   
; 53   :   return same_sign(e_id,fe_id);

	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]

; 54   : }

	pop	ebp
	ret	0
_get_fe_edge ENDP
_TEXT	ENDS
PUBLIC	_get_next_edge
; Function compile flags: /Ogtp
;	COMDAT _get_next_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_next_edge PROC					; COMDAT

; 76   : {

	push	ebp
	mov	ebp, esp

; 77   :   if ( inverted(fe_id) ) return inverse_id(feptr(fe_id)->nextedge[0]);

	mov	eax, DWORD PTR _fe_id$[ebp]
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_next_e
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H

; 79   : }

	pop	ebp
	ret	0
$LN2@get_next_e:

; 78   :   else return feptr(fe_id)->nextedge[1];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]

; 79   : }

	pop	ebp
	ret	0
_get_next_edge ENDP
_TEXT	ENDS
PUBLIC	_get_edge_tailv
EXTRN	_dymem:DWORD
; Function compile flags: /Ogtp
;	COMDAT _get_edge_tailv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_tailv PROC					; COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp

; 192  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 193  :      return get_edge_vertices(e_id)[web.headvnum];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_t
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 196  : }

	pop	ebp
	ret	0
$LN2@get_edge_t:

; 194  :   else
; 195  :      return get_edge_vertices(e_id)[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 196  : }

	pop	ebp
	ret	0
_get_edge_tailv ENDP
_TEXT	ENDS
PUBLIC	_get_edge_headv
; Function compile flags: /Ogtp
;	COMDAT _get_edge_headv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_headv PROC					; COMDAT

; 200  : {

	push	ebp
	mov	ebp, esp

; 201  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 202  :      return get_edge_vertices(e_id)[0];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_h
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 205  : }

	pop	ebp
	ret	0
$LN2@get_edge_h:

; 203  :   else
; 204  :      return get_edge_vertices(e_id)[web.headvnum];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 205  : }

	pop	ebp
	ret	0
_get_edge_headv ENDP
_TEXT	ENDS
PUBLIC	_get_facet_body
; Function compile flags: /Ogtp
;	COMDAT _get_facet_body
_TEXT	SEGMENT
_f_id$ = 8						; size = 4
_get_facet_body PROC					; COMDAT

; 250  : {

	push	ebp
	mov	ebp, esp

; 251  :   if ( web.skel[BODY].count == 0 ) return NULLID;

	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN4@get_facet_
$LN7@get_facet_:
	xor	eax, eax

; 255  : }

	pop	ebp
	ret	0
$LN4@get_facet_:

; 252  :   if ( !valid_id(f_id) ) return NULLID;

	mov	eax, DWORD PTR _f_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN7@get_facet_

; 253  :   if ( inverted(f_id) ) return F_ELID(f_id,F_BODY_LIST_ATTR)[1];

	mov	ecx, DWORD PTR _web+236
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_facet_
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax+4]

; 255  : }

	pop	ebp
	ret	0
$LN2@get_facet_:

; 254  :   else  return F_ELID(f_id,F_BODY_LIST_ATTR)[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax]

; 255  : }

	pop	ebp
	ret	0
_get_facet_body ENDP
_TEXT	ENDS
PUBLIC	_get_facet_fe
; Function compile flags: /Ogtp
;	COMDAT _get_facet_fe
_TEXT	SEGMENT
_f_id$ = 8						; size = 4
_get_facet_fe PROC					; COMDAT

; 260  : {

	push	ebp
	mov	ebp, esp

; 261  :   facetedge_id fe;
; 262  :   
; 263  :   if ( !valid_id(f_id) ) return NULLID;

	mov	ecx, DWORD PTR _f_id$[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN2@get_facet_@2
	xor	eax, eax

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
$LN2@get_facet_@2:

; 264  :   fe = fptr(f_id)->fe_id;

	mov	edx, DWORD PTR _web+236
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]

; 265  :   if ( inverted(f_id) ) invert(fe);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_facet_@2
	xor	eax, 134217728				; 08000000H
$LN3@get_facet_@2:

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
_get_facet_fe ENDP
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	_get_body_density
EXTRN	__fltused:DWORD
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _get_body_density
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_density PROC					; COMDAT

; 305  :     { return  ( valid_id(b_id) ?  bptr(b_id)->density : 0.0 ) ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_d
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+344]
	pop	ebp
	ret	0
$LN3@get_body_d:
	fldz
	pop	ebp
	ret	0
_get_body_density ENDP
_TEXT	ENDS
PUBLIC	__real@3fe0000000000000
PUBLIC	_f_id$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_facet_force_q
EXTRN	_sym_form_pullback:DWORD
EXTRN	_gpoly:DWORD
EXTRN	_gauss2Dwt:DWORD
EXTRN	_dot:PROC
EXTRN	_cross_prod:PROC
EXTRN	_mat_mult:PROC
EXTRN	_ctrl_num:DWORD
EXTRN	_gpolypartial:DWORD
EXTRN	_gauss2D_num:DWORD
EXTRN	_simplex_force_metric:PROC
EXTRN	_get_facet_verts:PROC
EXTRN	_mat2d_setup:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CIsqrt:PROC
EXTRN	_memset:PROC
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\filmq.c
CONST	ENDS
;	COMDAT _facet_force_q
_TEXT	SEGMENT
_tangqXvS$ = -1232					; size = 24
_xqXvS$ = -1208						; size = 24
_forceptr$ = -1184					; size = 24
_density$ = -1160					; size = 8
_area$ = -1152						; size = 8
_norm$ = -1144						; size = 8
tv3081 = -1140						; size = 4
_gdensity$ = -1136					; size = 8
tv3073 = -1128						; size = 4
_x$ = -1124						; size = 4
tv5115 = -1120						; size = 4
_f_id$GSCopy$ = -1120					; size = 4
tv5011 = -1116						; size = 4
_fe_id$ = -1116						; size = 4
tv4897 = -1112						; size = 4
tv4676 = -1112						; size = 4
tv4408 = -1112						; size = 4
tv3357 = -1112						; size = 4
tv3093 = -1112						; size = 4
_xxJ$ = -1108						; size = 288
_tangxJ$ = -820						; size = 288
_wforce$89103 = -532					; size = 48
_wraps$ = -484						; size = 24
_normal$ = -460						; size = 48
_summer$ = -412						; size = 96
_forces$ = -316						; size = 288
_v_id$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_f_id$ = 8						; size = 4
_facet_force_q PROC					; COMDAT

; 44   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1232				; 000004d0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	mov	ebx, DWORD PTR _f_id$[ebp]
	push	esi
	push	edi

; 45   :   vertex_id v_id[FACET_CTRL];
; 46   :   MAT2D(x,FACET_CTRL,MAXCOORD);

	push	6
	push	6
	lea	eax, DWORD PTR _xxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _xqXvS$[ebp]
	push	ecx

; 47   :   REAL normal[MAXCOORD];
; 48   :   int i,j,k,n;
; 49   :   REAL norm,summer[2][MAXCOORD];
; 50   :   facetedge_id fe_id;
; 51   :   REAL density = get_facet_density(f_id);
; 52   :   REAL area = 0.0;
; 53   :   REAL gdensity = 0.0;
; 54   :   REAL z;
; 55   :   body_id b_id;
; 56   :   REAL forces[FACET_CTRL][MAXCOORD];  /* total forces from this facet */
; 57   :   REAL *forceptr[FACET_CTRL];    /* pointers to forces */
; 58   :   WRAPTYPE wraps[FACET_CTRL];
; 59   :   MAT2D(tang,MAXCOORD,MAXCOORD);
; 60   : 
; 61   :   memset((char*)forces,0,sizeof(forces));  /* set to 0 */
; 62   :   /* get control points */
; 63   :   fe_id = get_facet_fe(f_id);

	mov	DWORD PTR _f_id$GSCopy$[ebp], ebx
	call	_mat2d_setup
	mov	edx, DWORD PTR _web+236
	mov	esi, ebx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	DWORD PTR _x$[ebp], eax
	mov	eax, DWORD PTR [edx+esi]
	fld	QWORD PTR [eax+32]
	push	6
	fstp	QWORD PTR _density$[ebp]
	push	6
	fldz
	lea	ecx, DWORD PTR _tangxJ$[ebp]
	push	ecx
	fst	QWORD PTR _area$[ebp]
	lea	edx, DWORD PTR _tangqXvS$[ebp]
	fstp	QWORD PTR _gdensity$[ebp]
	push	edx
	mov	DWORD PTR tv3073[ebp], esi
	call	_mat2d_setup
	push	288					; 00000120H
	mov	edi, eax
	lea	eax, DWORD PTR _forces$[ebp]
	push	0
	push	eax
	call	_memset
	mov	eax, ebx
	shr	eax, 28					; 0000001cH
	add	esp, 44					; 0000002cH
	and	eax, 1
	mov	DWORD PTR tv3081[ebp], eax
	jne	SHORT $LN44@facet_forc
	xor	eax, eax
	jmp	SHORT $LN43@facet_forc
$LN44@facet_forc:
	mov	ecx, DWORD PTR _web+236
	mov	edx, DWORD PTR [ecx+esi]
	mov	eax, DWORD PTR [edx+28]
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN43@facet_forc
	xor	eax, 134217728				; 08000000H
$LN43@facet_forc:

; 64   :   for ( i = 0, j = 0 ; i < FACET_EDGES ; i++ )
; 65   :   { v_id[j++] = get_fe_tailv(fe_id);

	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	lea	esi, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR _fe_id$[ebp], eax
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN50@facet_forc
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+216
	mov	ebx, DWORD PTR _web+636
	lea	ecx, DWORD PTR [ecx+edx+304]
	mov	edx, DWORD PTR _web+124
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	lea	eax, DWORD PTR [eax+ebx*4]
	jmp	SHORT $LN191@facet_forc
$LN50@facet_forc:
	mov	edx, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	lea	ecx, DWORD PTR [edx+ecx+304]
	mov	edx, DWORD PTR _web+124
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
$LN191@facet_forc:
	mov	ebx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+ebx]
	mov	DWORD PTR _v_id$[ebp], eax

; 66   :     v_id[j++] = get_fe_midv(fe_id);

	mov	eax, DWORD PTR [esi]
	mov	eax, DWORD PTR [eax+20]
	mov	ebx, DWORD PTR [ecx]
	and	eax, 134217727				; 07ffffffH

; 67   :     fe_id = get_next_edge(fe_id);

	test	DWORD PTR _fe_id$[ebp], 134217728	; 08000000H
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ebx+8]
	mov	DWORD PTR _v_id$[ebp+4], eax
	mov	eax, DWORD PTR [esi]
	je	SHORT $LN56@facet_forc
	mov	esi, DWORD PTR [eax+28]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN39@facet_forc
$LN56@facet_forc:
	mov	esi, DWORD PTR [eax+32]
$LN39@facet_forc:

; 64   :   for ( i = 0, j = 0 ; i < FACET_EDGES ; i++ )
; 65   :   { v_id[j++] = get_fe_tailv(fe_id);

	mov	ebx, DWORD PTR _web+460
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	lea	eax, DWORD PTR [ebx+eax*4]
	mov	ebx, DWORD PTR [eax]
	mov	DWORD PTR tv3093[ebp], eax
	mov	eax, esi
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ebx+20]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN108@facet_forc
	mov	ebx, DWORD PTR _web+636
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	lea	eax, DWORD PTR [eax+ebx*4]
	jmp	SHORT $LN192@facet_forc
$LN108@facet_forc:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
$LN192@facet_forc:
	mov	ebx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+ebx]
	mov	DWORD PTR _v_id$[ebp+8], eax

; 66   :     v_id[j++] = get_fe_midv(fe_id);

	mov	eax, DWORD PTR tv3093[ebp]
	mov	eax, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+20]
	mov	ebx, DWORD PTR [ecx]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ebx+8]
	mov	DWORD PTR _v_id$[ebp+12], eax

; 67   :     fe_id = get_next_edge(fe_id);

	mov	eax, DWORD PTR tv3093[ebp]
	mov	eax, DWORD PTR [eax]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN110@facet_forc
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN111@facet_forc
$LN110@facet_forc:
	mov	eax, DWORD PTR [eax+32]
$LN111@facet_forc:

; 64   :   for ( i = 0, j = 0 ; i < FACET_EDGES ; i++ )
; 65   :   { v_id[j++] = get_fe_tailv(fe_id);

	mov	ebx, DWORD PTR _web+460
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	lea	esi, DWORD PTR [ebx+esi*4]
	mov	ebx, DWORD PTR [esi]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ebx+20]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN113@facet_forc
	mov	ebx, DWORD PTR _web+636
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	lea	eax, DWORD PTR [eax+ebx*4]
	jmp	SHORT $LN193@facet_forc
$LN113@facet_forc:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
$LN193@facet_forc:
	mov	ebx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+ebx]

; 68   :   }
; 69   :      
; 70   :   for ( j = 0 ; j < FACET_CTRL ; j++ )
; 71   :     forceptr[j] = forces[j];
; 72   : 
; 73   :   get_facet_verts(f_id,x,wraps);

	mov	ebx, DWORD PTR _x$[ebp]
	mov	DWORD PTR _v_id$[ebp+16], eax
	mov	eax, DWORD PTR [esi]
	mov	eax, DWORD PTR [eax+20]
	mov	esi, DWORD PTR _f_id$GSCopy$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+eax+8]
	lea	edx, DWORD PTR _forces$[ebp]
	mov	DWORD PTR _forceptr$[ebp], edx
	lea	edx, DWORD PTR _forces$[ebp+144]
	mov	DWORD PTR _forceptr$[ebp+12], edx
	mov	DWORD PTR _v_id$[ebp+20], ecx
	lea	edx, DWORD PTR _wraps$[ebp]
	push	edx
	lea	eax, DWORD PTR _forces$[ebp+48]
	lea	ecx, DWORD PTR _forces$[ebp+96]
	mov	DWORD PTR _forceptr$[ebp+4], eax
	mov	DWORD PTR _forceptr$[ebp+8], ecx
	lea	eax, DWORD PTR _forces$[ebp+192]
	lea	ecx, DWORD PTR _forces$[ebp+240]
	push	ebx
	push	esi
	mov	DWORD PTR _forceptr$[ebp+16], eax
	mov	DWORD PTR _forceptr$[ebp+20], ecx
	call	_get_facet_verts
	add	esp, 12					; 0000000cH

; 74   : 
; 75   :   if ( web.metric_flag )

	cmp	DWORD PTR _web+1676, 0
	je	SHORT $LN34@facet_forc

; 76   :   { simplex_force_metric(v_id,x,density,forceptr);

	fld	QWORD PTR _density$[ebp]
	lea	eax, DWORD PTR _forceptr$[ebp]
	push	eax
	sub	esp, 8
	fstp	QWORD PTR [esp]
	lea	ecx, DWORD PTR _v_id$[ebp]
	push	ebx
	push	ecx
	call	_simplex_force_metric
	add	esp, 20					; 00000014H

; 77   :     goto cumforces;  /* assume no gravity */

	jmp	$cumforces$89070
$LN34@facet_forc:

; 78   :   }
; 79   : 
; 80   :   if ( web.gravflag && !(get_fattr(f_id) & NONCONTENT) )

	cmp	DWORD PTR _web+824, 0
	je	$LN151@facet_forc
	mov	edx, DWORD PTR tv3073[ebp]
	mov	ebx, DWORD PTR _web+236
	mov	ecx, DWORD PTR [ebx+edx]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 536870912				; 20000000H
	xor	edx, edx
	or	eax, edx
	jne	$LN151@facet_forc

; 81   :   { b_id = get_facet_body(f_id);

	cmp	DWORD PTR _web+400, edx
	mov	edx, DWORD PTR _web+328
	je	SHORT $LN59@facet_forc
$LN62@facet_forc:
	cmp	DWORD PTR tv3081[ebp], 0
	jne	SHORT $LN61@facet_forc
	xor	eax, eax
	jmp	SHORT $LN59@facet_forc
$LN61@facet_forc:
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax+784]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN60@facet_forc
	mov	eax, DWORD PTR [eax+ecx+4]
	jmp	SHORT $LN59@facet_forc
$LN60@facet_forc:
	mov	eax, DWORD PTR [ecx+eax]
$LN59@facet_forc:

; 82   :     if ( valid_id(b_id) )

	fld	QWORD PTR _web+832
	mov	ecx, DWORD PTR _web+348
	test	eax, 268435456				; 10000000H
	je	SHORT $LN143@facet_forc

; 83   :        gdensity += get_body_density(b_id)*web.grav_const;

	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [eax+344]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR __real@0000000000000000
	fstp	QWORD PTR _gdensity$[ebp]
$LN143@facet_forc:

; 84   :     b_id = get_facet_body(facet_inverse(f_id));

	xor	esi, 134217728				; 08000000H
	cmp	DWORD PTR _web+400, 0
	mov	eax, esi
	jne	SHORT $LN72@facet_forc
	xor	eax, eax
	jmp	SHORT $LN69@facet_forc
$LN72@facet_forc:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN71@facet_forc
	xor	eax, eax
	jmp	SHORT $LN69@facet_forc
$LN71@facet_forc:
	mov	esi, DWORD PTR _dymem
	mov	edx, DWORD PTR [edx+esi+784]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN70@facet_forc
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	eax, DWORD PTR [eax+edx+4]
	jmp	SHORT $LN69@facet_forc
$LN70@facet_forc:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	eax, DWORD PTR [eax+edx]
$LN69@facet_forc:

; 85   :     if ( valid_id(b_id) )

	test	eax, 268435456				; 10000000H
	je	SHORT $LN163@facet_forc

; 86   :        gdensity -= get_body_density(b_id)*web.grav_const;

	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	fmul	QWORD PTR [eax+344]
	fsubr	QWORD PTR _gdensity$[ebp]
	fstp	QWORD PTR _gdensity$[ebp]
	jmp	SHORT $LN151@facet_forc
$LN163@facet_forc:
	fstp	ST(0)
$LN151@facet_forc:

; 87   :   }
; 88   :   for ( i = 0 ; i < gauss2D_num ; i++ )  /*  integration point number */

	xor	esi, esi
	cmp	DWORD PTR _gauss2D_num, esi
	jle	$cumforces$89070
	mov	ecx, DWORD PTR _gpolypartial
$LL147@facet_forc:

; 89   :   { /* calculate tangents and normals */ 
; 90   :     mat_mult(gpolypartial[i],x,tang,web.dimension,ctrl_num,SDIM);

	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR _ctrl_num
	mov	ecx, DWORD PTR [ecx+esi*4]
	push	edx
	mov	edx, DWORD PTR _web+620
	push	eax
	mov	eax, DWORD PTR _x$[ebp]
	push	edx
	push	edi
	push	eax
	push	ecx
	call	_mat_mult

; 91   :     cross_prod(tang[0],tang[1],normal);

	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [edi]
	lea	edx, DWORD PTR _normal$[ebp]
	push	edx
	push	eax
	push	ecx
	call	_cross_prod

; 92   :     norm = sqrt(SDIM_dot(normal,normal));

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _normal$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	add	esp, 48					; 00000030H
	call	__CIsqrt
	fstp	QWORD PTR _norm$[ebp]
	lea	edx, DWORD PTR _summer$[ebp]

; 93   :     for ( n = 0 ; n < 2 ; n++ ) /* parameter number */

	xor	ebx, ebx
	mov	DWORD PTR tv4408[ebp], edx
	npad	5
$LL150@facet_forc:

; 94   :       cross_prod(normal,tang[n],summer[n]);

	mov	eax, DWORD PTR tv4408[ebp]
	mov	ecx, DWORD PTR [edi+ebx*4]
	push	eax
	push	ecx
	lea	edx, DWORD PTR _normal$[ebp]
	push	edx
	call	_cross_prod
	add	DWORD PTR tv4408[ebp], 48		; 00000030H
	inc	ebx
	add	esp, 12					; 0000000cH
	cmp	ebx, 2
	jl	SHORT $LL150@facet_forc

; 95   : 
; 96   :     area += density*gauss2Dwt[i]/2*norm;

	mov	eax, DWORD PTR _gauss2Dwt
	fld	QWORD PTR [eax+esi*8]
	xor	edx, edx
	fld	QWORD PTR _density$[ebp]
	lea	ecx, DWORD PTR _forces$[ebp+8]
	fmul	ST(1), ST(0)
	mov	DWORD PTR tv5011[ebp], edx
	fld	QWORD PTR __real@3fe0000000000000
	mov	DWORD PTR tv5115[ebp], ecx
	fmul	ST(2), ST(0)
	fld	QWORD PTR _norm$[ebp]
	fmul	ST(3), ST(0)
	fxch	ST(3)
	fadd	QWORD PTR _area$[ebp]
	fstp	QWORD PTR _area$[ebp]
$LN148@facet_forc:

; 98   :       for ( j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	cmp	DWORD PTR _web+616, 4
	jl	$LC125@facet_forc
	mov	ebx, DWORD PTR tv5115[ebp]
	mov	DWORD PTR tv4676[ebp], ebx
$LN144@facet_forc:

; 99   :         forces[k][j] -= density*gauss2Dwt[i]/2/norm*
; 100  :            (gpolypartial[i][1][k]*summer[0][j] 
; 101  :                - gpolypartial[i][0][k]*summer[1][j]);

	mov	ebx, DWORD PTR _gpolypartial
	mov	ebx, DWORD PTR [ebx+esi*4]
	mov	ebx, DWORD PTR [ebx+4]
	fld	QWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR _gpolypartial
	fmul	QWORD PTR _summer$[ebp+ecx*8]
	mov	ebx, DWORD PTR [ebx+esi*4]
	mov	ebx, DWORD PTR [ebx]
	fld	QWORD PTR [edx+ebx]
	mov	ebx, DWORD PTR tv4676[ebp]
	fmul	QWORD PTR _summer$[ebp+ecx*8+48]
	add	ecx, 4
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+esi*8]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(4)
	fmulp	ST(1), ST(0)
	fsubr	QWORD PTR [ebx-8]
	fstp	QWORD PTR [ebx-8]
	mov	ebx, DWORD PTR _gpolypartial
	mov	ebx, DWORD PTR [ebx+esi*4]
	mov	ebx, DWORD PTR [ebx+4]
	fld	QWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR _gpolypartial
	fmul	QWORD PTR _summer$[ebp+ecx*8-24]
	mov	ebx, DWORD PTR [ebx+esi*4]
	mov	ebx, DWORD PTR [ebx]
	fld	QWORD PTR [edx+ebx]
	mov	ebx, DWORD PTR tv4676[ebp]
	fmul	QWORD PTR _summer$[ebp+ecx*8+24]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+esi*8]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(4)
	fmulp	ST(1), ST(0)
	fsubr	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]
	mov	ebx, DWORD PTR _gpolypartial
	mov	ebx, DWORD PTR [ebx+esi*4]
	mov	ebx, DWORD PTR [ebx+4]
	fld	QWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR _gpolypartial
	fmul	QWORD PTR _summer$[ebp+ecx*8-16]
	mov	ebx, DWORD PTR [ebx+esi*4]
	mov	ebx, DWORD PTR [ebx]
	fld	QWORD PTR [edx+ebx]
	mov	ebx, DWORD PTR tv4676[ebp]
	fmul	QWORD PTR _summer$[ebp+ecx*8+32]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+esi*8]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(4)
	fmulp	ST(1), ST(0)
	fsubr	QWORD PTR [ebx+8]
	fstp	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR _gpolypartial
	mov	ebx, DWORD PTR [ebx+esi*4]
	mov	ebx, DWORD PTR [ebx+4]
	fld	QWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR _gpolypartial
	fmul	QWORD PTR _summer$[ebp+ecx*8-8]
	mov	ebx, DWORD PTR [ebx+esi*4]
	mov	ebx, DWORD PTR [ebx]
	fld	QWORD PTR [edx+ebx]
	mov	ebx, DWORD PTR tv4676[ebp]
	fmul	QWORD PTR _summer$[ebp+ecx*8+40]
	add	ebx, 32					; 00000020H
	mov	DWORD PTR tv4676[ebp], ebx
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+esi*8]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(4)
	fmulp	ST(1), ST(0)
	fsubr	QWORD PTR [ebx-16]
	fstp	QWORD PTR [ebx-16]

; 137  :   }
; 138  : 
; 139  :   set_facet_area(f_id,area);

	mov	ebx, DWORD PTR _web+616
	add	ebx, -3					; fffffffdH
	cmp	ecx, ebx
	jl	$LN144@facet_forc
$LC125@facet_forc:

; 98   :       for ( j = 0 ; j < SDIM ; j++ )

	cmp	ecx, DWORD PTR _web+616
	jge	SHORT $LN146@facet_forc
	mov	ebx, DWORD PTR tv5011[ebp]
	add	ebx, ecx
	lea	ebx, DWORD PTR _forces$[ebp+ebx*8]
	mov	DWORD PTR tv4897[ebp], ebx
$LN145@facet_forc:

; 99   :         forces[k][j] -= density*gauss2Dwt[i]/2/norm*
; 100  :            (gpolypartial[i][1][k]*summer[0][j] 
; 101  :                - gpolypartial[i][0][k]*summer[1][j]);

	mov	ebx, DWORD PTR _gpolypartial
	mov	ebx, DWORD PTR [ebx+esi*4]
	mov	ebx, DWORD PTR [ebx+4]
	fld	QWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR _gpolypartial
	fmul	QWORD PTR _summer$[ebp+ecx*8]
	mov	ebx, DWORD PTR [ebx+esi*4]
	mov	ebx, DWORD PTR [ebx]
	fld	QWORD PTR [edx+ebx]
	mov	ebx, DWORD PTR tv4897[ebp]
	fmul	QWORD PTR _summer$[ebp+ecx*8+48]
	inc	ecx
	add	ebx, 8
	mov	DWORD PTR tv4897[ebp], ebx
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+esi*8]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(4)
	fmulp	ST(1), ST(0)
	fsubr	QWORD PTR [ebx-8]
	fstp	QWORD PTR [ebx-8]
	cmp	ecx, DWORD PTR _web+616
	jl	SHORT $LN145@facet_forc
$LN146@facet_forc:

; 97   :     for ( k = 0 ; k < FACET_CTRL ; k++ )

	add	DWORD PTR tv5115[ebp], 48		; 00000030H
	add	DWORD PTR tv5011[ebp], 6

; 98   :       for ( j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR _gpolypartial
	add	edx, 8
	cmp	edx, 48					; 00000030H
	jl	$LN148@facet_forc

; 102  : 
; 103  :     /* add gravitational force */
; 104  :     if ( web.gravflag && !(get_fattr(f_id) & NONCONTENT) )

	cmp	DWORD PTR _web+824, 0
	fstp	ST(2)
	fstp	ST(0)
	je	$LN189@facet_forc
	mov	ebx, DWORD PTR tv3073[ebp]
	mov	edx, DWORD PTR _web+236
	mov	edx, DWORD PTR [edx+ebx]
	mov	edx, DWORD PTR [edx+8]
	and	edx, 536870912				; 20000000H
	xor	ebx, ebx
	or	edx, ebx
	jne	$LN189@facet_forc

; 105  :     { z = 0.0;
; 106  :       for ( j = 0 ; j < FACET_CTRL ; j++ )
; 107  :          z += gpoly[i][j]*x[j][2];

	mov	edx, DWORD PTR _gpoly
	mov	edx, DWORD PTR [edx+esi*4]
	mov	DWORD PTR tv3357[ebp], edx
	mov	edx, DWORD PTR _x$[ebp]
	mov	ebx, DWORD PTR [edx+4]
	fld	QWORD PTR [ebx+16]
	mov	ebx, DWORD PTR tv3357[ebp]
	fmul	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR [edx]
	fld	QWORD PTR [ebx+16]
	mov	ebx, DWORD PTR tv3357[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [edx+8]
	fadd	QWORD PTR __real@0000000000000000
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+16]
	mov	ebx, DWORD PTR tv3357[ebp]
	fmul	QWORD PTR [ebx+16]
	mov	ebx, DWORD PTR [edx+12]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+16]
	mov	ebx, DWORD PTR tv3357[ebp]
	fmul	QWORD PTR [ebx+24]
	mov	ebx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR [edx+20]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+16]
	mov	ebx, DWORD PTR tv3357[ebp]
	fmul	QWORD PTR [ebx+32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx+16]

; 108  :       for ( j = 0 ; j < FACET_CTRL ; j++ )
; 109  :       { forces[j][0] -= 0.5*z*z*gauss2Dwt[i]/2*gdensity
; 110  :                           *(gpolypartial[i][0][j]*tang[1][1] -
; 111  :                                 tang[0][1]*gpolypartial[i][1][j]);

	mov	edx, DWORD PTR [ecx+esi*4]
	fmul	QWORD PTR [ebx+40]
	mov	edx, DWORD PTR [edx]
	mov	ebx, DWORD PTR [edi+4]
	faddp	ST(1), ST(0)
	fld	ST(0)
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(1)
	fld	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR [edi]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [edx+4]
	fld	QWORD PTR [edx]
	fmul	QWORD PTR [ebx+8]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+esi*8]
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(4)
	fld	QWORD PTR _gdensity$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(2)
	fmulp	ST(1), ST(0)
	fsubr	QWORD PTR _forces$[ebp]
	fstp	QWORD PTR _forces$[ebp]

; 112  :         forces[j][1] -= 0.5*z*z*gauss2Dwt[i]/2*gdensity
; 113  :                           *(tang[0][0]*gpolypartial[i][1][j] -
; 114  :                                 gpolypartial[i][0][j]*tang[1][0]);

	mov	edx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [edx+4]
	fld	QWORD PTR [edx]
	mov	ebx, DWORD PTR [edi]
	fmul	QWORD PTR [ebx]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [edx]
	mov	ebx, DWORD PTR [edi+4]
	fld	QWORD PTR [edx]
	fmul	QWORD PTR [ebx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+esi*8]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(2)
	fmulp	ST(1), ST(0)
	fsubr	QWORD PTR _forces$[ebp+8]
	fstp	QWORD PTR _forces$[ebp+8]

; 115  :         forces[j][2] -= z*gpoly[i][j]*gauss2Dwt[i]/2*gdensity
; 116  :                           *(tang[0][0]*tang[1][1] - tang[0][1]*tang[1][0]);

	mov	edx, DWORD PTR [edi+4]
	mov	ebx, DWORD PTR [edi]
	fld	QWORD PTR [edx+8]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [ebx+8]
	fmul	QWORD PTR [edx]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR _gpoly
	mov	edx, DWORD PTR [edx+esi*4]
	fld	QWORD PTR [edx]
	fmul	ST(0), ST(4)
	fmul	QWORD PTR [eax+esi*8]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(2)
	fmulp	ST(1), ST(0)
	fsubr	QWORD PTR _forces$[ebp+16]
	fstp	QWORD PTR _forces$[ebp+16]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+8]
	mov	ebx, DWORD PTR [edi+4]
	fmul	QWORD PTR [ebx+8]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [edx+4]
	fld	QWORD PTR [edx+8]
	mov	ebx, DWORD PTR [edi]
	fmul	QWORD PTR [ebx+8]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+esi*8]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(2)
	fmulp	ST(1), ST(0)
	fsubr	QWORD PTR _forces$[ebp+48]
	fstp	QWORD PTR _forces$[ebp+48]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [edx+4]
	fld	QWORD PTR [edx+8]
	mov	ebx, DWORD PTR [edi]
	fmul	QWORD PTR [ebx]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+8]
	mov	ebx, DWORD PTR [edi+4]
	fmul	QWORD PTR [ebx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+esi*8]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(2)
	fmulp	ST(1), ST(0)
	fsubr	QWORD PTR _forces$[ebp+56]
	fstp	QWORD PTR _forces$[ebp+56]
	mov	edx, DWORD PTR [edi+4]
	fld	QWORD PTR [edx+8]
	mov	ebx, DWORD PTR [edi]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [ebx+8]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR _gpoly
	mov	edx, DWORD PTR [edx+esi*4]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx+8]
	fmul	ST(0), ST(4)
	fmul	QWORD PTR [eax+esi*8]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(2)
	fmulp	ST(1), ST(0)
	fsubr	QWORD PTR _forces$[ebp+64]
	fstp	QWORD PTR _forces$[ebp+64]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+16]
	mov	ebx, DWORD PTR [edi+4]
	fmul	QWORD PTR [ebx+8]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [edx+4]
	mov	ebx, DWORD PTR [edi]
	fld	QWORD PTR [edx+16]
	fmul	QWORD PTR [ebx+8]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+esi*8]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(2)
	fmulp	ST(1), ST(0)
	fsubr	QWORD PTR _forces$[ebp+96]
	fstp	QWORD PTR _forces$[ebp+96]

; 112  :         forces[j][1] -= 0.5*z*z*gauss2Dwt[i]/2*gdensity
; 113  :                           *(tang[0][0]*gpolypartial[i][1][j] -
; 114  :                                 gpolypartial[i][0][j]*tang[1][0]);

	mov	edx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [edx+4]
	fld	QWORD PTR [edx+16]
	mov	ebx, DWORD PTR [edi]
	fmul	QWORD PTR [ebx]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+16]
	mov	ebx, DWORD PTR [edi+4]
	fmul	QWORD PTR [ebx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+esi*8]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(2)
	fmulp	ST(1), ST(0)
	fsubr	QWORD PTR _forces$[ebp+104]
	fstp	QWORD PTR _forces$[ebp+104]

; 115  :         forces[j][2] -= z*gpoly[i][j]*gauss2Dwt[i]/2*gdensity
; 116  :                           *(tang[0][0]*tang[1][1] - tang[0][1]*tang[1][0]);

	mov	edx, DWORD PTR [edi+4]
	fld	QWORD PTR [edx+8]
	mov	ebx, DWORD PTR [edi]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [ebx+8]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR _gpoly
	mov	edx, DWORD PTR [edx+esi*4]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx+16]
	fmul	ST(0), ST(4)
	fmul	QWORD PTR [eax+esi*8]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(2)
	fmulp	ST(1), ST(0)
	fsubr	QWORD PTR _forces$[ebp+112]
	fstp	QWORD PTR _forces$[ebp+112]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+24]
	mov	ebx, DWORD PTR [edi+4]
	fmul	QWORD PTR [ebx+8]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [edx+4]
	fld	QWORD PTR [edx+24]
	mov	ebx, DWORD PTR [edi]
	fmul	QWORD PTR [ebx+8]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+esi*8]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(2)
	fmulp	ST(1), ST(0)
	fsubr	QWORD PTR _forces$[ebp+144]
	fstp	QWORD PTR _forces$[ebp+144]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [edx+4]
	fld	QWORD PTR [edx+24]
	mov	ebx, DWORD PTR [edi]
	fmul	QWORD PTR [ebx]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+24]
	mov	ebx, DWORD PTR [edi+4]
	fmul	QWORD PTR [ebx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+esi*8]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(2)
	fmulp	ST(1), ST(0)
	fsubr	QWORD PTR _forces$[ebp+152]
	fstp	QWORD PTR _forces$[ebp+152]
	mov	edx, DWORD PTR [edi+4]
	fld	QWORD PTR [edx+8]
	mov	ebx, DWORD PTR [edi]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [ebx+8]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR _gpoly
	mov	edx, DWORD PTR [edx+esi*4]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx+24]
	fmul	ST(0), ST(4)
	fmul	QWORD PTR [eax+esi*8]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(2)
	fmulp	ST(1), ST(0)
	fsubr	QWORD PTR _forces$[ebp+160]
	fstp	QWORD PTR _forces$[ebp+160]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+32]
	mov	ebx, DWORD PTR [edi+4]
	fmul	QWORD PTR [ebx+8]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [edx+4]
	fld	QWORD PTR [edx+32]
	mov	ebx, DWORD PTR [edi]
	fmul	QWORD PTR [ebx+8]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+esi*8]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(2)
	fmulp	ST(1), ST(0)
	fsubr	QWORD PTR _forces$[ebp+192]
	fstp	QWORD PTR _forces$[ebp+192]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [edx+4]
	fld	QWORD PTR [edx+32]
	mov	ebx, DWORD PTR [edi]
	fmul	QWORD PTR [ebx]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+32]
	mov	ebx, DWORD PTR [edi+4]
	fmul	QWORD PTR [ebx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+esi*8]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(2)
	fmulp	ST(1), ST(0)
	fsubr	QWORD PTR _forces$[ebp+200]
	fstp	QWORD PTR _forces$[ebp+200]
	mov	edx, DWORD PTR [edi+4]
	fld	QWORD PTR [edx+8]
	mov	ebx, DWORD PTR [edi]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [ebx+8]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR _gpoly
	mov	edx, DWORD PTR [edx+esi*4]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx+32]
	fmul	ST(0), ST(4)
	fmul	QWORD PTR [eax+esi*8]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(2)
	fmulp	ST(1), ST(0)
	fsubr	QWORD PTR _forces$[ebp+208]
	fstp	QWORD PTR _forces$[ebp+208]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+40]
	mov	ebx, DWORD PTR [edi+4]
	fmul	QWORD PTR [ebx+8]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [edx+4]
	fld	QWORD PTR [edx+40]
	mov	ebx, DWORD PTR [edi]
	fmul	QWORD PTR [ebx+8]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+esi*8]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(2)
	fmulp	ST(1), ST(0)
	fsubr	QWORD PTR _forces$[ebp+240]
	fstp	QWORD PTR _forces$[ebp+240]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [edx+4]
	mov	ebx, DWORD PTR [edi]

; 112  :         forces[j][1] -= 0.5*z*z*gauss2Dwt[i]/2*gdensity
; 113  :                           *(tang[0][0]*gpolypartial[i][1][j] -
; 114  :                                 gpolypartial[i][0][j]*tang[1][0]);

	fld	QWORD PTR [edx+40]
	mov	edx, DWORD PTR [ecx+esi*4]
	fmul	QWORD PTR [ebx]
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+40]
	mov	ebx, DWORD PTR [edi+4]
	fmul	QWORD PTR [ebx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+esi*8]
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(1)
	fmulp	ST(2), ST(0)
	fld	QWORD PTR _forces$[ebp+248]
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _forces$[ebp+248]

; 115  :         forces[j][2] -= z*gpoly[i][j]*gauss2Dwt[i]/2*gdensity
; 116  :                           *(tang[0][0]*tang[1][1] - tang[0][1]*tang[1][0]);

	mov	edx, DWORD PTR [edi+4]
	fld	QWORD PTR [edx+8]
	mov	ebx, DWORD PTR [edi]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [ebx+8]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR _gpoly
	mov	edx, DWORD PTR [edx+esi*4]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx+40]
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fmul	QWORD PTR [eax+esi*8]
	fmulp	ST(3), ST(0)
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	fsubr	QWORD PTR _forces$[ebp+256]
	fstp	QWORD PTR _forces$[ebp+256]
	jmp	SHORT $LN29@facet_forc
$LN189@facet_forc:

; 102  : 
; 103  :     /* add gravitational force */
; 104  :     if ( web.gravflag && !(get_fattr(f_id) & NONCONTENT) )

	fstp	ST(0)
$LN29@facet_forc:

; 87   :   }
; 88   :   for ( i = 0 ; i < gauss2D_num ; i++ )  /*  integration point number */

	inc	esi
	cmp	esi, DWORD PTR _gauss2D_num
	jl	$LL147@facet_forc
$cumforces$89070:

; 117  :       } 
; 118  :     }
; 119  :   }
; 120  : 
; 121  : 
; 122  : cumforces:
; 123  :   /* add to totals, unwrapping if necessary */
; 124  :   for ( i = 0 ; i < FACET_CTRL ; i++ )  /* vertex loop */

	lea	ebx, DWORD PTR _forces$[ebp]
	xor	edi, edi
	npad	6
$LL154@facet_forc:

; 125  :   { REAL *f; 
; 126  :     REAL wforce[MAXCOORD];  /* unwrapped forces */
; 127  : 
; 128  :     f= get_force(v_id[i]);

	mov	eax, DWORD PTR _v_id$[ebp+edi]
	mov	ecx, DWORD PTR _web+12
	mov	edx, DWORD PTR _web+104
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _dymem
	mov	esi, DWORD PTR [edx+ecx+784]
	add	esi, eax

; 129  :     if ( web.symmetry_flag )

	cmp	DWORD PTR _web+856, 0
	je	SHORT $LN8@facet_forc

; 130  :     { (*sym_form_pullback)(get_coord(v_id[i]),wforce,forces[i],wraps[i]);

	mov	edx, DWORD PTR _wraps$[ebp+edi]
	push	edx
	push	ebx
	lea	edx, DWORD PTR _wforce$89103[ebp]
	push	edx
	mov	edx, DWORD PTR _web+104
	mov	ecx, DWORD PTR [edx+ecx+64]
	add	ecx, eax
	push	ecx
	call	DWORD PTR _sym_form_pullback

; 131  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	add	esp, 16					; 00000010H
	cmp	DWORD PTR _web+616, ecx
	jle	SHORT $LN10@facet_forc
	lea	edx, DWORD PTR _wforce$89103[ebp]
	mov	eax, esi
	sub	edx, esi
	npad	6
$LL7@facet_forc:

; 132  :         f[j] += wforce[j];

	fld	QWORD PTR [edx+eax]
	inc	ecx
	fadd	QWORD PTR [eax]
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	cmp	ecx, DWORD PTR _web+616
	jl	SHORT $LL7@facet_forc

; 133  :     }
; 134  :     else

	jmp	SHORT $LN10@facet_forc
$LN8@facet_forc:

; 135  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN10@facet_forc
	mov	ecx, ebx
$LL3@facet_forc:

; 136  :         f[j] += forces[i][j];

	fld	QWORD PTR [ecx]
	inc	eax
	fadd	QWORD PTR [esi+eax*8-8]
	add	ecx, 8
	fstp	QWORD PTR [esi+eax*8-8]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LL3@facet_forc
$LN10@facet_forc:

; 117  :       } 
; 118  :     }
; 119  :   }
; 120  : 
; 121  : 
; 122  : cumforces:
; 123  :   /* add to totals, unwrapping if necessary */
; 124  :   for ( i = 0 ; i < FACET_CTRL ; i++ )  /* vertex loop */

	add	edi, 4
	add	ebx, 48					; 00000030H
	cmp	edi, 24					; 00000018H
	jl	$LL154@facet_forc

; 137  :   }
; 138  : 
; 139  :   set_facet_area(f_id,area);

	mov	edx, DWORD PTR _web+236
	fld	QWORD PTR _area$[ebp]
	mov	eax, DWORD PTR tv3073[ebp]
	mov	ecx, DWORD PTR [edx+eax]
	fstp	QWORD PTR [ecx+40]

; 140  : } /* end facet_force_q() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_force_q ENDP
_TEXT	ENDS
PUBLIC	_f_id$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_facet_energy_q
EXTRN	_binary_tree_add:PROC
EXTRN	_simplex_energy_metric:PROC
; Function compile flags: /Ogtp
;	COMDAT _facet_energy_q
_TEXT	SEGMENT
_xqXvS$ = -744						; size = 24
_tangqXvS$ = -720					; size = 24
_u$ = -696						; size = 8
_energy$ = -688						; size = 8
tv723 = -680						; size = 4
_f_id$GSCopy$ = -680					; size = 4
_tangxJ$ = -676						; size = 288
_xxJ$ = -388						; size = 288
_v_id$ = -100						; size = 24
_wraps$ = -76						; size = 24
_normal$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_f_id$ = 8						; size = 4
_mode$ = 12						; size = 4
_facet_energy_q PROC					; COMDAT

; 153  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 744				; 000002e8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 154  :   REAL energy = 0.0;

	fldz
	push	ebx
	mov	ebx, DWORD PTR _f_id$[ebp]
	fstp	QWORD PTR _energy$[ebp]
	push	esi
	push	edi

; 155  :   body_id b_id;
; 156  :   MAT2D(x,FACET_CTRL,MAXCOORD);

	push	6
	push	6
	lea	eax, DWORD PTR _xxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _xqXvS$[ebp]
	push	ecx

; 173  :   }
; 174  : 
; 175  :   for ( i = 0 ; i < gauss2D_num ; i++ )  /*  integration point number */

	mov	DWORD PTR _f_id$GSCopy$[ebp], ebx
	call	_mat2d_setup
	fldz
	push	6
	fstp	QWORD PTR _u$[ebp]
	push	6
	lea	edx, DWORD PTR _tangxJ$[ebp]
	mov	esi, eax
	push	edx
	lea	eax, DWORD PTR _tangqXvS$[ebp]
	push	eax
	call	_mat2d_setup
	lea	ecx, DWORD PTR _wraps$[ebp]
	push	ecx
	push	esi
	push	ebx
	mov	edi, eax
	call	_get_facet_verts
	add	esp, 44					; 0000002cH
	cmp	DWORD PTR _web+1676, 0
	je	SHORT $LN15@facet_ener

; 157  :   vertex_id v_id[FACET_CTRL];
; 158  :   REAL normal[MAXCOORD];
; 159  :   int i,j;
; 160  :   REAL norm;
; 161  :   facetedge_id fe_id;
; 162  :   REAL u = 0.0;  /* gravitational integral */
; 163  :   REAL z;
; 164  :   WRAPTYPE wraps[FACET_CTRL];
; 165  :   MAT2D(tang,MAXCOORD,MAXCOORD);
; 166  : 
; 167  :   /* get control points */
; 168  :   get_facet_verts(f_id,x,wraps);
; 169  : 
; 170  :   if ( web.metric_flag )
; 171  :   { energy = simplex_energy_metric(v_id,x);

	lea	edx, DWORD PTR _v_id$[ebp]
	push	esi
	push	edx
	call	_simplex_energy_metric
	fst	QWORD PTR _energy$[ebp]
	add	esp, 8

; 172  :     goto skip_from_metric;

	jmp	SHORT $skip_from_metric$89146
$LN15@facet_ener:

; 173  :   }
; 174  : 
; 175  :   for ( i = 0 ; i < gauss2D_num ; i++ )  /*  integration point number */

	xor	ebx, ebx
	cmp	DWORD PTR _gauss2D_num, ebx
	jg	SHORT $LN14@facet_ener

; 172  :     goto skip_from_metric;

	fld	QWORD PTR _energy$[ebp]
$LN111@facet_ener:
	mov	ebx, DWORD PTR _f_id$GSCopy$[ebp]
$skip_from_metric$89146:

; 189  :     }
; 190  :   }
; 191  : 
; 192  : skip_from_metric:
; 193  :   set_facet_area(f_id,energy);

	mov	edx, DWORD PTR _web+236
	mov	esi, ebx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi

; 194  : 
; 195  :   if ( mode == AREA_ONLY ) return;

	cmp	DWORD PTR _mode$[ebp], 1
	mov	eax, DWORD PTR [esi+edx]
	fst	QWORD PTR [eax+40]
	je	$LN69@facet_ener

; 196  : 
; 197  :   binary_tree_add(web.total_area_addends,energy);

	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET _web+1000
	call	_binary_tree_add

; 198  :      
; 199  :   /* apportion area to vertices and midpoints to scale motion */
; 200  :   /* Note apportionment ratios depend on equivalent test        */
; 201  :   /* function used to get curvature; here linear used            */
; 202  :   { fe_id = get_facet_fe(f_id);

	mov	eax, ebx
	shr	eax, 28					; 0000001cH
	add	esp, 12					; 0000000cH
	and	eax, 1
	mov	DWORD PTR tv723[ebp], eax
	jne	$LN19@facet_ener
	xor	eax, eax
	jmp	$LN18@facet_ener
$LL78@facet_ener:

; 173  :   }
; 174  : 
; 175  :   for ( i = 0 ; i < gauss2D_num ; i++ )  /*  integration point number */

	fstp	ST(0)
$LN14@facet_ener:

; 176  :   {
; 177  :     /* calculate tangents and normals */ 
; 178  :     mat_mult(gpolypartial[i],x,tang,web.dimension,ctrl_num,SDIM);

	mov	eax, DWORD PTR _web+616
	mov	ecx, DWORD PTR _ctrl_num
	mov	edx, DWORD PTR _web+620
	push	eax
	mov	eax, DWORD PTR _gpolypartial
	push	ecx
	mov	ecx, DWORD PTR [eax+ebx*4]
	push	edx
	push	edi
	push	esi
	push	ecx
	call	_mat_mult

; 179  :     cross_prod(tang[0],tang[1],normal);

	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [edi]
	lea	edx, DWORD PTR _normal$[ebp]
	push	edx
	push	eax
	push	ecx
	call	_cross_prod

; 180  :     norm = sqrt(SDIM_dot(normal,normal));

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _normal$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	add	esp, 48					; 00000030H
	call	__CIsqrt

; 181  :     energy += gauss2Dwt[i]*norm/2;
; 182  : 
; 183  :     if ( web.gravflag && !(get_fattr(f_id) & NONCONTENT) )

	cmp	DWORD PTR _web+824, 0
	mov	edx, DWORD PTR _gauss2Dwt
	fmul	QWORD PTR [edx+ebx*8]
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR _energy$[ebp]
	fst	QWORD PTR _energy$[ebp]
	je	$LN75@facet_ener
	mov	eax, DWORD PTR _f_id$GSCopy$[ebp]
	mov	ecx, DWORD PTR _web+236
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 536870912				; 20000000H
	xor	ecx, ecx
	or	eax, ecx
	jne	$LN75@facet_ener

; 184  :     { z = 0.0;
; 185  :       for ( j = 0 ; j < FACET_CTRL ; j++ )
; 186  :         z += gpoly[i][j]*x[j][2];

	mov	ecx, DWORD PTR [esi+4]
	fld	QWORD PTR [ecx+16]
	mov	eax, DWORD PTR _gpoly
	mov	eax, DWORD PTR [eax+ebx*4]
	fmul	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR [esi]
	fld	QWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [esi+8]
	fmul	QWORD PTR [eax]
	fadd	QWORD PTR __real@0000000000000000
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [esi+12]
	fmul	QWORD PTR [eax+16]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [esi+16]
	fmul	QWORD PTR [eax+24]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [esi+20]
	fmul	QWORD PTR [eax+32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx+16]

; 187  :       u += 0.5*z*z*gauss2Dwt[i]/2*(tang[0][0]*tang[1][1] -
; 188  :                                                     tang[0][1]*tang[1][0]);

	mov	ecx, DWORD PTR [edi]
	fmul	QWORD PTR [eax+40]
	mov	eax, DWORD PTR [edi+4]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [ecx]
	fld	QWORD PTR [ecx+8]
	fmul	QWORD PTR [eax]
	fsubp	ST(1), ST(0)
	fld	ST(1)
	fmul	ST(0), ST(4)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR [edx+ebx*8]
	fmulp	ST(3), ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR _u$[ebp]
	fstp	QWORD PTR _u$[ebp]
	jmp	SHORT $LN13@facet_ener
$LN75@facet_ener:

; 181  :     energy += gauss2Dwt[i]*norm/2;
; 182  : 
; 183  :     if ( web.gravflag && !(get_fattr(f_id) & NONCONTENT) )

	fstp	ST(1)
$LN13@facet_ener:

; 173  :   }
; 174  : 
; 175  :   for ( i = 0 ; i < gauss2D_num ; i++ )  /*  integration point number */

	inc	ebx
	cmp	ebx, DWORD PTR _gauss2D_num
	jl	$LL78@facet_ener

; 172  :     goto skip_from_metric;

	jmp	$LN111@facet_ener

; 198  :      
; 199  :   /* apportion area to vertices and midpoints to scale motion */
; 200  :   /* Note apportionment ratios depend on equivalent test        */
; 201  :   /* function used to get curvature; here linear used            */
; 202  :   { fe_id = get_facet_fe(f_id);

$LN19@facet_ener:
	mov	ecx, DWORD PTR _web+236
	mov	edx, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [edx+28]
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN18@facet_ener
	xor	eax, 134217728				; 08000000H
$LN18@facet_ener:

; 203  :     for ( i = 0 ; i < FACET_EDGES ; i++, fe_id = get_next_edge(fe_id) )

	mov	ecx, DWORD PTR _web+460
	mov	edx, 3
	npad	6
$LL22@facet_ener:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN23@facet_ener
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN57@facet_ener
$LN23@facet_ener:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+32]
$LN57@facet_ener:
	dec	edx
	jne	SHORT $LL22@facet_ener

; 204  :     { vertex_id vv_id;
; 205  :       edge_id e_id = get_fe_edge(fe_id);
; 206  :       vv_id = get_edge_headv(e_id);
; 207  :       vv_id = get_edge_midv(e_id);
; 208  :     }
; 209  :   }
; 210  : 
; 211  :   /* calculate surface energy */
; 212  :   energy *= get_facet_density(f_id);

	mov	ecx, DWORD PTR _web+236
	mov	ecx, DWORD PTR [esi+ecx]
	fld	QWORD PTR [ecx+32]
	fmul	QWORD PTR _energy$[ebp]

; 213  :      
; 214  :   /* add gravitational energy, vector potential z*z/2*k  */
; 215  :   if ( web.gravflag && !(get_fattr(f_id) & NONCONTENT) )

	cmp	DWORD PTR _web+824, edx
	je	$LN1@facet_ener
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 536870912				; 20000000H
	or	eax, edx
	jne	$LN1@facet_ener

; 216  :   { b_id = get_facet_body(f_id);

	mov	edi, DWORD PTR _web+400
	mov	edx, DWORD PTR _web+328
	mov	esi, DWORD PTR _dymem
	test	edi, edi
	je	SHORT $LN32@facet_ener
$LN35@facet_ener:
	cmp	DWORD PTR tv723[ebp], 0
	jne	SHORT $LN34@facet_ener
	xor	eax, eax
	jmp	SHORT $LN32@facet_ener
$LN34@facet_ener:
	mov	eax, DWORD PTR [edx+esi+784]
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN33@facet_ener
	mov	eax, DWORD PTR [eax+ecx+4]
	jmp	SHORT $LN32@facet_ener
$LN33@facet_ener:
	mov	eax, DWORD PTR [ecx+eax]
$LN32@facet_ener:

; 217  :     if ( valid_id(b_id) )

	fld	QWORD PTR _web+832
	mov	ecx, DWORD PTR _web+348
	test	eax, 268435456				; 10000000H
	je	SHORT $LN66@facet_ener

; 218  :        energy += u*get_body_density(b_id)*web.grav_const;

	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [eax+344]
	fmul	QWORD PTR _u$[ebp]
	fmul	ST(0), ST(1)
	faddp	ST(2), ST(0)
$LN66@facet_ener:

; 219  :     b_id = get_facet_body(facet_inverse(f_id));

	xor	ebx, 134217728				; 08000000H
	mov	eax, ebx
	test	edi, edi
	jne	SHORT $LN45@facet_ener
	xor	eax, eax
	jmp	SHORT $LN42@facet_ener
$LN45@facet_ener:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN44@facet_ener
	xor	eax, eax
	jmp	SHORT $LN42@facet_ener
$LN44@facet_ener:
	mov	edi, DWORD PTR _web+236
	mov	edx, DWORD PTR [edx+esi+784]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN43@facet_ener
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [eax+edx+4]
	jmp	SHORT $LN42@facet_ener
$LN43@facet_ener:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [eax+edx]
$LN42@facet_ener:

; 220  :     if ( valid_id(b_id) )

	test	eax, 268435456				; 10000000H
	je	SHORT $LN97@facet_ener

; 221  :        energy -= u*get_body_density(b_id)*web.grav_const;

	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [eax+344]
	pop	edi
	fmul	QWORD PTR _u$[ebp]
	pop	esi
	pop	ebx
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)

; 222  :   }
; 223  : 
; 224  :   web.total_energy = web.total_energy + energy;

	fadd	QWORD PTR _web+1240
	fstp	QWORD PTR _web+1240

; 225  : 
; 226  : }  /* end facet_energy_q() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN97@facet_ener:

; 220  :     if ( valid_id(b_id) )

	fstp	ST(0)
$LN1@facet_ener:

; 222  :   }
; 223  : 
; 224  :   web.total_energy = web.total_energy + energy;

	fadd	QWORD PTR _web+1240
	pop	edi
	pop	esi
	pop	ebx
	fstp	QWORD PTR _web+1240

; 225  : 
; 226  : }  /* end facet_energy_q() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN69@facet_ener:
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(0)
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_energy_q ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EF@HJFPAABE@Do?5convert_to_quantities?5for?5sym@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_facet_volume_q
EXTRN	_add_body_volume:PROC
EXTRN	_kb_error:PROC
EXTRN	_everything_quantities_flag:DWORD
;	COMDAT ??_C@_0EF@HJFPAABE@Do?5convert_to_quantities?5for?5sym@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0EF@HJFPAABE@Do?5convert_to_quantities?5for?5sym@ DB 'Do convert_to'
	DB	'_quantities for symmetric content for quadratic model.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\filmq.c
CONST	ENDS
;	COMDAT _facet_volume_q
_TEXT	SEGMENT
_b_id1$ = -80						; size = 4
_vol$ = -76						; size = 8
tv1516 = -68						; size = 4
_b_id0$ = -64						; size = 4
_x$ = -60						; size = 24
_fe_id$ = -36						; size = 4
tv2898 = -32						; size = 4
tv1538 = -32						; size = 4
$T90108 = -32						; size = 4
_v_id$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_f_id$ = 8						; size = 4
_facet_volume_q PROC					; COMDAT

; 236  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 237  :   body_id b_id0,b_id1;
; 238  :   REAL vol = 0.0;
; 239  :   REAL *x[FACET_CTRL];
; 240  :   vertex_id v_id[FACET_CTRL];
; 241  :   int i,j,k;
; 242  :   facetedge_id fe_id;
; 243  : 
; 244  :   if ( get_fattr(f_id) & NONCONTENT ) return;

	mov	eax, DWORD PTR _web+236
	fldz
	push	esi
	fstp	QWORD PTR _vol$[ebp]
	push	edi
	mov	edi, DWORD PTR _f_id$[ebp]
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 536870912				; 20000000H
	xor	ecx, ecx
	or	eax, ecx
	jne	$LN1@facet_volu

; 245  : 
; 246  :   b_id0 = get_facet_body(f_id);

	push	ebx
	push	edi
	call	_get_facet_body

; 247  :   b_id1 = get_facet_body(facet_inverse(f_id));

	mov	ecx, edi
	xor	ecx, 134217728				; 08000000H
	mov	ebx, eax
	push	ecx
	mov	DWORD PTR _b_id0$[ebp], ebx
	call	_get_facet_body

; 248  :      
; 249  :   if ( !valid_id(b_id0) && !valid_id(b_id1) ) return;

	mov	ecx, ebx
	shr	ecx, 28					; 0000001cH
	add	esp, 8
	and	ecx, 1
	mov	DWORD PTR _b_id1$[ebp], eax
	mov	DWORD PTR tv1516[ebp], ecx
	jne	SHORT $LN19@facet_volu
	test	eax, 268435456				; 10000000H
	je	$LN81@facet_volu
$LN19@facet_volu:

; 250  : 
; 251  :   if ( web.symmetric_content && !everything_quantities_flag )

	cmp	DWORD PTR _web+808, 0
	je	SHORT $LN18@facet_volu
	cmp	DWORD PTR _everything_quantities_flag, 0
	jne	SHORT $LN18@facet_volu

; 252  :      kb_error(1038,
; 253  :       "Do convert_to_quantities for symmetric content for quadratic model.\n",
; 254  :          RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0EF@HJFPAABE@Do?5convert_to_quantities?5for?5sym@
	push	1038					; 0000040eH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN18@facet_volu:

; 255  : 
; 256  : 
; 257  :   /* get control points */
; 258  :   fe_id = get_facet_fe(f_id);

	test	edi, 268435456				; 10000000H
	jne	SHORT $LN24@facet_volu
	xor	ebx, ebx
	jmp	SHORT $LN23@facet_volu
$LN24@facet_volu:
	mov	edx, DWORD PTR _web+236
	mov	eax, DWORD PTR [esi+edx]
	mov	ebx, DWORD PTR [eax+28]
	test	edi, 134217728				; 08000000H
	je	SHORT $LN23@facet_volu
	xor	ebx, 134217728				; 08000000H
$LN23@facet_volu:

; 259  :   for ( i = 0, j = 0 ; i < FACET_EDGES ; i++ )
; 260  :   { v_id[j++] = get_fe_tailv(fe_id);

	mov	edx, DWORD PTR _web+460
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	esi, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+edx+304]
	mov	edx, DWORD PTR _web+124
	mov	DWORD PTR tv1538[ebp], eax
	mov	eax, ebx
	and	eax, 134217728				; 08000000H
	xor	eax, esi
	test	eax, 134217728				; 08000000H
	je	SHORT $LN30@facet_volu
	mov	edi, DWORD PTR _web+636
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	lea	eax, DWORD PTR [eax+edi*4]
	mov	edi, DWORD PTR [eax+ecx]
	jmp	SHORT $LN29@facet_volu
$LN30@facet_volu:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edi, DWORD PTR [ecx+eax]
$LN29@facet_volu:

; 261  :     v_id[j++] = get_fe_midv(fe_id);

	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+esi*4]
	mov	eax, DWORD PTR [eax+ecx+8]
	mov	DWORD PTR _v_id$[ebp+4], eax

; 262  :     fe_id = get_next_edge(fe_id);

	mov	eax, DWORD PTR tv1538[ebp]
	mov	DWORD PTR _v_id$[ebp], edi
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN36@facet_volu
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR _fe_id$[ebp], eax
	jmp	SHORT $LN16@facet_volu
$LN36@facet_volu:
	mov	eax, DWORD PTR [eax+32]
	mov	DWORD PTR _fe_id$[ebp], eax
$LN16@facet_volu:

; 259  :   for ( i = 0, j = 0 ; i < FACET_EDGES ; i++ )
; 260  :   { v_id[j++] = get_fe_tailv(fe_id);

	mov	ebx, DWORD PTR _web+460
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ebx+esi*4]
	mov	ebx, DWORD PTR [esi+20]
	and	eax, 134217728				; 08000000H
	xor	eax, ebx
	mov	DWORD PTR tv1538[ebp], esi
	test	eax, 134217728				; 08000000H
	je	SHORT $LN56@facet_volu
	mov	esi, DWORD PTR _web+636
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	lea	eax, DWORD PTR [eax+esi*4]
	mov	esi, DWORD PTR [eax+ecx]
	jmp	SHORT $LN57@facet_volu
$LN56@facet_volu:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	esi, DWORD PTR [ecx+eax]
$LN57@facet_volu:

; 261  :     v_id[j++] = get_fe_midv(fe_id);

	and	ebx, 134217727				; 07ffffffH

; 262  :     fe_id = get_next_edge(fe_id);

	test	DWORD PTR _fe_id$[ebp], 134217728	; 08000000H
	mov	eax, DWORD PTR [edx+ebx*4]
	mov	eax, DWORD PTR [eax+ecx+8]
	mov	DWORD PTR _v_id$[ebp+12], eax
	mov	eax, DWORD PTR tv1538[ebp]
	je	SHORT $LN58@facet_volu
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN96@facet_volu
$LN58@facet_volu:
	mov	eax, DWORD PTR [eax+32]
$LN96@facet_volu:

; 259  :   for ( i = 0, j = 0 ; i < FACET_EDGES ; i++ )
; 260  :   { v_id[j++] = get_fe_tailv(fe_id);

	mov	ebx, DWORD PTR _web+460

; 262  :     fe_id = get_next_edge(fe_id);

	mov	DWORD PTR _fe_id$[ebp], eax
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	ebx, DWORD PTR _fe_id$[ebp]
	mov	eax, DWORD PTR [eax+20]
	and	ebx, 134217728				; 08000000H
	xor	ebx, eax
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN61@facet_volu

; 259  :   for ( i = 0, j = 0 ; i < FACET_EDGES ; i++ )
; 260  :   { v_id[j++] = get_fe_tailv(fe_id);

	and	ebx, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edx+ebx*4]
	mov	ebx, DWORD PTR _web+636
	lea	edi, DWORD PTR [edi+ebx*4]
	mov	edi, DWORD PTR [edi+ecx]
	mov	DWORD PTR $T90108[ebp], edi
	mov	edi, DWORD PTR _v_id$[ebp]
	jmp	SHORT $LN97@facet_volu
$LN61@facet_volu:
	and	ebx, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [edx+ebx*4]
	mov	ebx, DWORD PTR [ecx+ebx]
	mov	DWORD PTR $T90108[ebp], ebx
$LN97@facet_volu:
	mov	ebx, DWORD PTR _v_id$[ebp+4]

; 261  :     v_id[j++] = get_fe_midv(fe_id);

	fld	QWORD PTR _vol$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [edx+ecx+8]

; 263  :   }
; 264  :   for ( j = 0 ; j < FACET_CTRL ; j++ )
; 265  :      x[j] = get_coord(v_id[j]);

	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR _web+104
	mov	eax, DWORD PTR [eax+ecx+64]
	mov	ecx, DWORD PTR _web+12
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ecx+esi*4]
	add	esi, eax
	mov	DWORD PTR _x$[ebp+8], esi
	mov	esi, DWORD PTR _v_id$[ebp+12]
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ecx+esi*4]
	add	esi, eax
	mov	DWORD PTR _x$[ebp+12], esi
	mov	esi, DWORD PTR $T90108[ebp]
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ecx+edi*4]
	and	ebx, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ecx+ebx*4]
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ecx+esi*4]
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	add	ecx, eax
	lea	edx, DWORD PTR _x$[ebp]
	add	edi, eax
	add	ebx, eax
	add	esi, eax
	mov	DWORD PTR _x$[ebp+16], esi
	mov	DWORD PTR _x$[ebp+20], ecx

; 269  :      for ( j = 0 ; j < FACET_CTRL ; j++ )

	mov	eax, edx
	mov	DWORD PTR _x$[ebp], edi
	mov	DWORD PTR _x$[ebp+4], ebx
	mov	DWORD PTR tv2898[ebp], edx
	mov	edx, DWORD PTR [eax]
	mov	ecx, OFFSET _vcoeff+8
	xor	esi, esi
	jmp	SHORT $LN8@facet_volu
$LN79@facet_volu:
	mov	eax, DWORD PTR tv2898[ebp]
	mov	ebx, DWORD PTR _x$[ebp+4]
	mov	edx, DWORD PTR [eax]
	xor	esi, esi
	jmp	SHORT $LN8@facet_volu
$LN80@facet_volu:
	mov	ebx, DWORD PTR _x$[ebp+4]
$LN8@facet_volu:

; 270  :         for ( k = 0 ; k < FACET_CTRL ; k++ )
; 271  :           vol += vcoeff[i][j][k]*x[i][2]*(x[j][0]*x[k][1]-x[j][1]*x[k][0]);

	mov	eax, DWORD PTR _x$[ebp+esi*4]
	fld	QWORD PTR [edi+8]
	fmul	QWORD PTR [eax]
	inc	esi
	fld	QWORD PTR [eax+8]
	add	ecx, 48					; 00000030H
	fmul	QWORD PTR [edi]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ecx-56]
	fmul	QWORD PTR [edx+16]
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+8]
	fmul	QWORD PTR [eax]
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR _x$[ebp+8]
	fmul	QWORD PTR [eax+8]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx+16]
	fmul	QWORD PTR [ecx-48]
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+8]
	fmul	QWORD PTR [eax]
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR _x$[ebp+12]
	fmul	QWORD PTR [eax+8]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ecx-40]
	fmul	QWORD PTR [edx+16]
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+8]
	fmul	QWORD PTR [eax]
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR _x$[ebp+16]
	fmul	QWORD PTR [eax+8]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ecx-32]
	fmul	QWORD PTR [edx+16]
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax]
	fmul	QWORD PTR [ebx+8]
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR _x$[ebp+20]
	fmul	QWORD PTR [eax+8]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ecx-24]
	fmul	QWORD PTR [edx+16]
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+8]
	fmul	QWORD PTR [eax]
	fld	QWORD PTR [ebx]
	fmul	QWORD PTR [eax+8]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ecx-16]
	fmul	QWORD PTR [edx+16]
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	cmp	esi, 6
	jl	$LN80@facet_volu

; 266  : 
; 267  :   /* volume, integral of z dx dy */
; 268  :   for ( i = 0 ; i < FACET_CTRL ; i++ )

	add	DWORD PTR tv2898[ebp], 4
	cmp	ecx, OFFSET _vcoeff+1736
	jl	$LN79@facet_volu

; 272  : 
; 273  :   /* add to body volumes */
; 274  :   if ( valid_id(b_id0) )

	cmp	DWORD PTR tv1516[ebp], 0
	fst	QWORD PTR _vol$[ebp]
	je	SHORT $LN2@facet_volu

; 275  :      add_body_volume(b_id0,vol);

	mov	ecx, DWORD PTR _b_id0$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	ecx
	call	_add_body_volume
	fld	QWORD PTR _vol$[ebp]
	add	esp, 12					; 0000000cH
$LN2@facet_volu:

; 276  :   if ( valid_id(b_id1) )

	mov	eax, DWORD PTR _b_id1$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN94@facet_volu

; 277  :      add_body_volume(b_id1,-vol);

	sub	esp, 8
	fchs
	fstp	QWORD PTR [esp]
	push	eax
	call	_add_body_volume
	add	esp, 12					; 0000000cH
	pop	ebx
	pop	edi
	pop	esi

; 278  : 
; 279  : } /* end facet_volume_q() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN94@facet_volu:

; 276  :   if ( valid_id(b_id1) )

	fstp	ST(0)
$LN81@facet_volu:
	pop	ebx
$LN1@facet_volu:

; 278  : 
; 279  : } /* end facet_volume_q() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_volume_q ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_film_grad_q
EXTRN	_get_bv_new_vgrad:PROC
; Function compile flags: /Ogtp
;	COMDAT _film_grad_q
_TEXT	SEGMENT
tv3050 = -136						; size = 8
tv3508 = -132						; size = 4
tv3044 = -128						; size = 4
tv3472 = -124						; size = 4
_x$ = -120						; size = 24
_bi_id$ = -96						; size = 4
_bj_id$ = -92						; size = 4
tv3041 = -88						; size = 4
_j$ = -88						; size = 4
tv6100 = -84						; size = 4
tv3069 = -84						; size = 4
tv6102 = -80						; size = 4
_fe_id$ = -80						; size = 4
_g$ = -76						; size = 48
_v_id$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_film_grad_q PROC					; COMDAT

; 290  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi

; 291  :   body_id bi_id;  /* identifier for body i */
; 292  :   body_id bj_id;  /* identifier for body j */
; 293  :   facetedge_id fe_id;
; 294  :   facet_id f_id;
; 295  :   REAL g[MAXCOORD];
; 296  :   vertex_id v_id[FACET_CTRL];
; 297  :   REAL *x[FACET_CTRL];
; 298  :   volgrad *vgptr;
; 299  :   int i,j,k,n;
; 300  : 
; 301  :   FOR_ALL_FACETS(f_id)

	mov	esi, DWORD PTR _web+272
	mov	eax, esi
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv3041[ebp], eax
	je	$LN27@film_grad_
	push	ebx
	push	edi
	npad	3
$LL29@film_grad_:
	mov	eax, DWORD PTR _web+236
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	edi, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR [edi+12]
	mov	edx, DWORD PTR [edi+8]
	mov	DWORD PTR tv3050[ebp+4], eax
	mov	eax, edx
	and	eax, 1
	xor	ebx, ebx
	or	eax, ebx
	mov	DWORD PTR tv3044[ebp], ecx
	je	$LN28@film_grad_

; 302  :   { if ( get_fattr(f_id) & NONCONTENT ) continue;

	and	edx, 536870912				; 20000000H
	xor	eax, eax
	or	edx, eax
	jne	$LN28@film_grad_

; 303  :     bi_id = get_facet_body(f_id);

	push	esi
	call	_get_facet_body

; 304  :     bj_id = get_facet_body(facet_inverse(f_id));

	mov	ecx, esi
	xor	ecx, 134217728				; 08000000H
	push	ecx
	mov	DWORD PTR _bi_id$[ebp], eax
	call	_get_facet_body
	add	esp, 8
	mov	DWORD PTR _bj_id$[ebp], eax

; 305  :                     
; 306  :     /* get control points */
; 307  :     fe_id = get_facet_fe(f_id);

	cmp	DWORD PTR tv3041[ebp], ebx
	jne	SHORT $LN33@film_grad_
	xor	ecx, ecx
	jmp	SHORT $LN32@film_grad_
$LN33@film_grad_:
	mov	ecx, DWORD PTR [edi+28]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN32@film_grad_
	xor	ecx, 134217728				; 08000000H
$LN32@film_grad_:

; 308  :     for ( i = 0, j = 0 ; i < FACET_EDGES ; i++ )
; 309  :     { v_id[j++] = get_fe_tailv(fe_id);

	mov	eax, DWORD PTR _web+460
	mov	esi, DWORD PTR _dymem
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	edi, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _web+216
	mov	esi, DWORD PTR [edx+esi+304]
	mov	edx, DWORD PTR _web+124
	mov	DWORD PTR tv3069[ebp], eax
	mov	eax, ecx
	and	eax, 134217728				; 08000000H
	xor	eax, edi
	test	eax, 134217728				; 08000000H
	je	SHORT $LN39@film_grad_
	mov	ebx, DWORD PTR _web+636
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	lea	eax, DWORD PTR [eax+ebx*4]
	mov	ebx, DWORD PTR [eax+esi]
	jmp	SHORT $LN38@film_grad_
$LN39@film_grad_:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	ebx, DWORD PTR [esi+eax]
$LN38@film_grad_:

; 310  :       v_id[j++] = get_fe_midv(fe_id);

	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+edi*4]
	mov	eax, DWORD PTR [eax+esi+8]
	mov	DWORD PTR _v_id$[ebp], ebx
	mov	DWORD PTR _v_id$[ebp+4], eax

; 311  :       fe_id = get_next_edge(fe_id);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN45@film_grad_
	mov	ecx, DWORD PTR tv3069[ebp]
	mov	eax, DWORD PTR [ecx+28]
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR _fe_id$[ebp], eax
	jmp	SHORT $LN22@film_grad_
$LN45@film_grad_:
	mov	eax, DWORD PTR tv3069[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _fe_id$[ebp], ecx
	mov	eax, ecx
$LN22@film_grad_:

; 308  :     for ( i = 0, j = 0 ; i < FACET_EDGES ; i++ )
; 309  :     { v_id[j++] = get_fe_tailv(fe_id);

	mov	edi, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR tv3069[ebp], ecx
	mov	ecx, DWORD PTR [ecx+20]
	and	eax, 134217728				; 08000000H
	xor	eax, ecx
	test	eax, 134217728				; 08000000H
	je	SHORT $LN71@film_grad_
	mov	edi, DWORD PTR _web+636
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	lea	eax, DWORD PTR [eax+edi*4]
	mov	edi, DWORD PTR [eax+esi]
	jmp	SHORT $LN72@film_grad_
$LN71@film_grad_:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edi, DWORD PTR [esi+eax]
$LN72@film_grad_:

; 310  :       v_id[j++] = get_fe_midv(fe_id);

	and	ecx, 134217727				; 07ffffffH

; 311  :       fe_id = get_next_edge(fe_id);

	test	DWORD PTR _fe_id$[ebp], 134217728	; 08000000H
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR [ecx+esi+8]
	mov	DWORD PTR _v_id$[ebp+8], edi
	mov	DWORD PTR _v_id$[ebp+12], eax
	je	SHORT $LN73@film_grad_
	mov	ecx, DWORD PTR tv3069[ebp]
	mov	eax, DWORD PTR [ecx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN105@film_grad_
$LN73@film_grad_:
	mov	eax, DWORD PTR tv3069[ebp]
	mov	eax, DWORD PTR [eax+32]
$LN105@film_grad_:
	mov	ecx, DWORD PTR _web+460
	mov	DWORD PTR _fe_id$[ebp], eax
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _fe_id$[ebp]
	and	eax, 134217728				; 08000000H
	xor	eax, ecx
	test	eax, 134217728				; 08000000H
	je	SHORT $LN76@film_grad_

; 308  :     for ( i = 0, j = 0 ; i < FACET_EDGES ; i++ )
; 309  :     { v_id[j++] = get_fe_tailv(fe_id);

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR _web+636
	lea	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [edx+esi]
	mov	edx, DWORD PTR _web+124
	jmp	SHORT $LN77@film_grad_
$LN76@film_grad_:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [esi+eax]
$LN77@film_grad_:
	mov	DWORD PTR _v_id$[ebp+16], eax

; 317  :     { g[0] = g[1] = g[2] = 0.0;

	fldz
	and	ecx, 134217727				; 07ffffffH
	fld	ST(0)
	mov	ecx, DWORD PTR [edx+ecx*4]
	fld	ST(1)
	mov	edx, DWORD PTR [ecx+esi+8]
	mov	esi, DWORD PTR _web+12
	mov	ecx, DWORD PTR _web+104
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [esi+edi*4]
	mov	DWORD PTR _v_id$[ebp+20], edx
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edx+64]
	mov	edx, DWORD PTR _v_id$[ebp+4]
	add	eax, ecx
	add	edi, ecx
	mov	DWORD PTR _x$[ebp+16], eax
	mov	eax, DWORD PTR _v_id$[ebp+20]
	mov	DWORD PTR _x$[ebp+8], edi
	mov	edi, DWORD PTR _v_id$[ebp+12]
	and	eax, 134217727				; 07ffffffH
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [esi+edi*4]
	and	ebx, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [esi+ebx*4]
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	mov	esi, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR _bi_id$[ebp]
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv3472[ebp], eax
	mov	eax, DWORD PTR _bj_id$[ebp]
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv3508[ebp], eax
	add	edi, ecx
	add	esi, ecx
	lea	eax, DWORD PTR _v_id$[ebp]
	add	ebx, ecx
	add	edx, ecx
	mov	DWORD PTR tv6100[ebp], eax
	mov	DWORD PTR tv6102[ebp], OFFSET _vcoeff+48
	mov	ecx, DWORD PTR tv6102[ebp]

; 318  :       for ( j = 0 ; j < FACET_CTRL ; j++ ) 

	xor	eax, eax
	mov	DWORD PTR _x$[ebp+12], edi
	mov	DWORD PTR _x$[ebp+20], esi
	mov	DWORD PTR _x$[ebp], ebx
	mov	DWORD PTR _x$[ebp+4], edx
	mov	edi, OFFSET _vcoeff+8
	mov	esi, OFFSET _vcoeff+288
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $LN14@film_grad_
$LL96@film_grad_:

; 317  :     { g[0] = g[1] = g[2] = 0.0;

	fldz
	mov	edx, DWORD PTR _x$[ebp+4]
	mov	ecx, DWORD PTR tv6102[ebp]
	fld	ST(0)

; 318  :       for ( j = 0 ; j < FACET_CTRL ; j++ ) 

	xor	eax, eax
	fld	ST(1)
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $LN14@film_grad_
$LN97@film_grad_:

; 317  :     { g[0] = g[1] = g[2] = 0.0;

	mov	edx, DWORD PTR _x$[ebp+4]
$LN14@film_grad_:

; 319  :         for ( k = 0 ; k < FACET_CTRL  ; k++ )
; 320  :         { g[0] += vcoeff[k][i][j]*x[j][1]*x[k][2] 
; 321  :                   - vcoeff[j][k][i]*x[j][2]*x[k][1];

	mov	eax, DWORD PTR _x$[ebp+eax*4]
	fld	QWORD PTR [ecx-48]
	fmul	QWORD PTR [eax+16]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [esi-288]
	fmul	QWORD PTR [ebx+16]
	fld	ST(1)
	fmul	QWORD PTR [ebx+8]
	fsubp	ST(1), ST(0)
	faddp	ST(4), ST(0)

; 322  :           g[1] += vcoeff[j][k][i]*x[j][2]*x[k][0] 
; 323  :                   - vcoeff[k][i][j]*x[j][0]*x[k][2];

	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [esi-288]
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR [ebx+16]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)

; 324  :           g[2] += vcoeff[i][j][k]*(x[j][0]*x[k][1] - x[j][1]*x[k][0]);

	fld	QWORD PTR [eax]
	fmul	QWORD PTR [ebx+8]
	fld	QWORD PTR [ebx]
	fmul	QWORD PTR [eax+8]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [edi-8]
	faddp	ST(2), ST(0)
	fld	QWORD PTR [ecx]
	fmul	QWORD PTR [eax+16]
	fld	QWORD PTR [esi]
	fmul	QWORD PTR [eax+8]
	fmul	QWORD PTR [edx+16]
	fld	ST(1)
	fmul	QWORD PTR [edx+8]
	fsubp	ST(1), ST(0)
	faddp	ST(4), ST(0)
	fmul	QWORD PTR [edx]
	fld	QWORD PTR [esi]
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR [edx+16]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx+8]
	fmul	QWORD PTR [eax]
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR _x$[ebp+8]
	fmul	QWORD PTR [eax+8]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [edi]
	faddp	ST(2), ST(0)
	fld	QWORD PTR [ecx+48]
	fmul	QWORD PTR [eax+16]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [esi+288]
	fmul	QWORD PTR [edx+16]
	fld	ST(1)
	fmul	QWORD PTR [edx+8]
	fsubp	ST(1), ST(0)
	faddp	ST(4), ST(0)
	fmul	QWORD PTR [edx]
	fld	QWORD PTR [esi+288]
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR [edx+16]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx+8]
	fmul	QWORD PTR [eax]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR _x$[ebp+12]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [edi+8]
	faddp	ST(2), ST(0)
	fld	QWORD PTR [ecx+96]
	fmul	QWORD PTR [eax+16]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [esi+576]
	fmul	QWORD PTR [edx+16]
	fld	ST(1)
	fmul	QWORD PTR [edx+8]
	fsubp	ST(1), ST(0)
	faddp	ST(4), ST(0)
	fmul	QWORD PTR [edx]
	fld	QWORD PTR [esi+576]
	fmul	QWORD PTR [eax]

; 318  :       for ( j = 0 ; j < FACET_CTRL ; j++ ) 

	fmul	QWORD PTR [edx+16]
	add	esi, 8
	add	edi, 48					; 00000030H
	add	ecx, 288				; 00000120H

; 322  :           g[1] += vcoeff[j][k][i]*x[j][2]*x[k][0] 
; 323  :                   - vcoeff[k][i][j]*x[j][0]*x[k][2];

	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)

; 324  :           g[2] += vcoeff[i][j][k]*(x[j][0]*x[k][1] - x[j][1]*x[k][0]);

	fld	QWORD PTR [edx+8]
	fmul	QWORD PTR [eax]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR _x$[ebp+16]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [edi-32]
	faddp	ST(2), ST(0)
	fld	QWORD PTR [ecx-144]
	fmul	QWORD PTR [eax+16]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [esi+856]
	fmul	QWORD PTR [edx+16]
	fld	ST(1)
	fmul	QWORD PTR [edx+8]
	fsubp	ST(1), ST(0)
	faddp	ST(4), ST(0)
	fmul	QWORD PTR [edx]
	fld	QWORD PTR [esi+856]
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR [edx+16]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx+8]
	fmul	QWORD PTR [eax]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR _x$[ebp+20]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [edi-24]
	faddp	ST(2), ST(0)
	fld	QWORD PTR [ecx-96]
	fmul	QWORD PTR [eax+16]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [esi+1144]
	fmul	QWORD PTR [edx+16]
	fld	ST(1)
	fmul	QWORD PTR [edx+8]
	fsubp	ST(1), ST(0)
	faddp	ST(4), ST(0)
	fmul	QWORD PTR [edx]
	fld	QWORD PTR [esi+1144]
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR [edx+16]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx+8]
	fmul	QWORD PTR [eax]
	fld	QWORD PTR [eax+8]
	mov	eax, DWORD PTR _j$[ebp]
	fmul	QWORD PTR [edx]
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [edi-16]
	faddp	ST(2), ST(0)
	cmp	eax, 6
	jl	$LN97@film_grad_

; 325  :         }
; 326  : 
; 327  :       if ( valid_id(bi_id) && (get_battr(bi_id) & (PRESSURE|FIXEDVOL)) )

	cmp	DWORD PTR tv3472[ebp], 0
	fxch	ST(1)
	fstp	QWORD PTR _g$[ebp+16]
	fstp	QWORD PTR _g$[ebp+8]
	fstp	QWORD PTR _g$[ebp]
	je	SHORT $LN94@film_grad_
	mov	ecx, DWORD PTR _bi_id$[ebp]
	mov	edx, DWORD PTR _web+348
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 2080				; 00000820H
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN94@film_grad_

; 328  :       { vgptr = get_bv_new_vgrad(get_body_fixnum(bi_id),v_id[i]);

	mov	eax, DWORD PTR tv6100[ebp]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx+420]
	push	edx
	push	eax
	call	_get_bv_new_vgrad

; 329  :         vgptr->bb_id = bi_id;

	mov	ecx, DWORD PTR _bi_id$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 330  :         for ( n = 0 ; n < SDIM ; n++ )

	xor	ecx, ecx
	add	esp, 8
	cmp	DWORD PTR _web+616, ecx
	jle	SHORT $LN94@film_grad_
$LL7@film_grad_:
	mov	edx, DWORD PTR [eax+16]

; 331  :           vgptr->grad[n] += g[n];

	fld	QWORD PTR _g$[ebp+ecx*8]
	fadd	QWORD PTR [edx+ecx*8]
	lea	edx, DWORD PTR [edx+ecx*8]
	inc	ecx
	fstp	QWORD PTR [edx]
	cmp	ecx, DWORD PTR _web+616
	jl	SHORT $LL7@film_grad_
$LN94@film_grad_:

; 332  :       }
; 333  : 
; 334  :       if ( valid_id(bj_id) && (get_battr(bj_id) & (FIXEDVOL|PRESSURE)) )

	cmp	DWORD PTR tv3508[ebp], 0
	je	SHORT $LN16@film_grad_
	mov	eax, DWORD PTR _bj_id$[ebp]
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 2080				; 00000820H
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN16@film_grad_

; 335  :       { vgptr = get_bv_new_vgrad(get_body_fixnum(bj_id),v_id[i]);

	mov	edx, DWORD PTR tv6100[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+420]
	push	eax
	push	ecx
	call	_get_bv_new_vgrad

; 336  :         vgptr->bb_id = bj_id;

	mov	edx, DWORD PTR _bj_id$[ebp]

; 337  :         for ( n = 0 ; n < SDIM ; n++ )

	xor	ecx, ecx
	add	esp, 8
	mov	DWORD PTR [eax+8], edx
	cmp	DWORD PTR _web+616, ecx
	jle	SHORT $LN16@film_grad_
	npad	7
$LL3@film_grad_:
	mov	edx, DWORD PTR [eax+16]

; 338  :           vgptr->grad[n] -= g[n];

	fld	QWORD PTR [edx+ecx*8]
	lea	edx, DWORD PTR [edx+ecx*8]
	fsub	QWORD PTR _g$[ebp+ecx*8]
	inc	ecx
	fstp	QWORD PTR [edx]
	cmp	ecx, DWORD PTR _web+616
	jl	SHORT $LL3@film_grad_
$LN16@film_grad_:

; 312  :     }
; 313  :     for ( j = 0 ; j < FACET_CTRL ; j++ )
; 314  :       x[j] = get_coord(v_id[j]);
; 315  : 
; 316  :     for ( i = 0 ; i < FACET_CTRL ; i++ )

	add	DWORD PTR tv6102[ebp], 8
	add	DWORD PTR tv6100[ebp], 4
	cmp	esi, OFFSET _vcoeff+576
	jl	$LL96@film_grad_
	mov	ecx, DWORD PTR tv3044[ebp]
$LN28@film_grad_:

; 291  :   body_id bi_id;  /* identifier for body i */
; 292  :   body_id bj_id;  /* identifier for body j */
; 293  :   facetedge_id fe_id;
; 294  :   facet_id f_id;
; 295  :   REAL g[MAXCOORD];
; 296  :   vertex_id v_id[FACET_CTRL];
; 297  :   REAL *x[FACET_CTRL];
; 298  :   volgrad *vgptr;
; 299  :   int i,j,k,n;
; 300  : 
; 301  :   FOR_ALL_FACETS(f_id)

	mov	eax, DWORD PTR _web+236
	mov	ecx, DWORD PTR [ecx+eax]
	mov	esi, DWORD PTR [ecx]
	mov	eax, esi
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv3041[ebp], eax
	jne	$LL29@film_grad_
	pop	edi
	pop	ebx
$LN27@film_grad_:

; 339  :       }
; 340  :     }
; 341  :   }  
; 342  : }  /* end film_grad_q() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_film_grad_q ENDP
_TEXT	ENDS
PUBLIC	__real@4000000000000000
PUBLIC	_triangle_integral
EXTRN	_gauss2Dpt5:BYTE
EXTRN	_gauss2Dwt5:BYTE
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _triangle_integral
_TEXT	SEGMENT
_sum$ = -8						; size = 8
_f$ = 8							; size = 4
_triangle_integral PROC					; COMDAT

; 353  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 354  :   int i;
; 355  :   REAL sum = 0.0;

	fldz
	push	esi
	push	edi
	fstp	QWORD PTR _sum$[ebp]
	mov	edi, OFFSET _gauss2Dwt5
	mov	esi, OFFSET _gauss2Dpt5
	jmp	SHORT $LN13@triangle_i
	npad	7
$LL11@triangle_i:

; 356  : 
; 357  :   for ( i = 0 ; i < 7 ; i++ )

	fstp	ST(0)
$LN13@triangle_i:

; 354  :   int i;
; 355  :   REAL sum = 0.0;

	fld	QWORD PTR __real@4000000000000000

; 358  :      sum += gauss2Dwt5[i]*(*f)(2*gauss2Dpt5[i][0],2*gauss2Dpt5[i][1]);

	sub	esp, 16					; 00000010H
	fld	QWORD PTR [esi+8]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [esp+8]
	fmul	QWORD PTR [esi]
	fstp	QWORD PTR [esp]
	call	DWORD PTR _f$[ebp]
	fmul	QWORD PTR [edi]
	add	esi, 24					; 00000018H
	add	esp, 16					; 00000010H
	add	edi, 8
	fadd	QWORD PTR _sum$[ebp]
	fst	QWORD PTR _sum$[ebp]
	cmp	esi, OFFSET _gauss2Dpt5+168
	jl	SHORT $LL11@triangle_i

; 359  : 
; 360  :   return 2*sum;

	pop	edi
	fadd	ST(0), ST(0)
	pop	esi

; 361  : 
; 362  : } // end triangle_integral()

	mov	esp, ebp
	pop	ebp
	ret	0
_triangle_integral ENDP
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	_intpoly6
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _intpoly6
_TEXT	SEGMENT
_k$ = 8							; size = 4
_u$ = 12						; size = 8
_v$ = 20						; size = 8
_intpoly6 PROC						; COMDAT

; 387  : {

	push	ebp
	mov	ebp, esp

; 388  :   switch ( k )

	mov	eax, DWORD PTR _k$[ebp]
	cmp	eax, 5
	ja	SHORT $LN7@intpoly6
	jmp	DWORD PTR $LN12@intpoly6[eax*4]
$LN6@intpoly6:

; 389  :     {
; 390  :       case 0: return (1 - (u + v))*(2 - (u + v))/2.0;

	fld	QWORD PTR _u$[ebp]
	fadd	QWORD PTR _v$[ebp]
	fld1
	fsub	ST(0), ST(1)
	fld	QWORD PTR __real@4000000000000000
	fsubrp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	fmul	QWORD PTR __real@3fe0000000000000

; 400  : 
; 401  : } // end intpoly6()

	pop	ebp
	ret	0
$LN5@intpoly6:

; 391  :       case 1: return u*(2 - (u + v));

	fld	QWORD PTR _u$[ebp]
	fld	QWORD PTR _v$[ebp]
	fadd	ST(0), ST(1)
	fsubr	QWORD PTR __real@4000000000000000
	fmulp	ST(1), ST(0)

; 400  : 
; 401  : } // end intpoly6()

	pop	ebp
	ret	0
$LN4@intpoly6:

; 392  :       case 2: return u*(u - 1)/2.0;

	fld	QWORD PTR _u$[ebp]
	fld	QWORD PTR __real@3ff0000000000000
	fsubr	ST(0), ST(1)
	fmulp	ST(1), ST(0)
	fmul	QWORD PTR __real@3fe0000000000000

; 400  : 
; 401  : } // end intpoly6()

	pop	ebp
	ret	0
$LN3@intpoly6:

; 393  :       case 3: return u*v;

	fld	QWORD PTR _u$[ebp]
	fmul	QWORD PTR _v$[ebp]

; 400  : 
; 401  : } // end intpoly6()

	pop	ebp
	ret	0
$LN2@intpoly6:

; 394  :       case 4: return v*(v - 1)/2.0;

	fld	QWORD PTR _v$[ebp]
	fld	QWORD PTR __real@3ff0000000000000
	fsubr	ST(0), ST(1)
	fmulp	ST(1), ST(0)
	fmul	QWORD PTR __real@3fe0000000000000

; 400  : 
; 401  : } // end intpoly6()

	pop	ebp
	ret	0
$LN1@intpoly6:

; 395  :       case 5: return v*(2 - (u + v));

	fld	QWORD PTR _u$[ebp]
	fld	QWORD PTR _v$[ebp]
	fadd	ST(1), ST(0)
	fld	QWORD PTR __real@4000000000000000
	fsubrp	ST(2), ST(0)
	fmulp	ST(1), ST(0)

; 400  : 
; 401  : } // end intpoly6()

	pop	ebp
	ret	0
$LN7@intpoly6:

; 396  :     }
; 397  : 
; 398  :   /* bad index */
; 399  :   return 0.0;

	fldz

; 400  : 
; 401  : } // end intpoly6()

	pop	ebp
	ret	0
	npad	2
$LN12@intpoly6:
	DD	$LN6@intpoly6
	DD	$LN5@intpoly6
	DD	$LN4@intpoly6
	DD	$LN3@intpoly6
	DD	$LN2@intpoly6
	DD	$LN1@intpoly6
_intpoly6 ENDP
_TEXT	ENDS
PUBLIC	__real@3ff8000000000000
PUBLIC	_intpoly6part
;	COMDAT __real@3ff8000000000000
CONST	SEGMENT
__real@3ff8000000000000 DQ 03ff8000000000000r	; 1.5
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _intpoly6part
_TEXT	SEGMENT
_k$ = 8							; size = 4
_i$ = 12						; size = 4
_u$ = 16						; size = 8
_v$ = 24						; size = 8
_intpoly6part PROC					; COMDAT

; 415  : {

	push	ebp
	mov	ebp, esp

; 416  :   if ( i == 0 )

	mov	eax, DWORD PTR _i$[ebp]
	test	eax, eax
	jne	SHORT $LN19@intpoly6pa

; 417  :     switch ( k )

	mov	eax, DWORD PTR _k$[ebp]
	cmp	eax, 5
	ja	SHORT $LN7@intpoly6pa
	jmp	DWORD PTR $LN23@intpoly6pa[eax*4]
$LN16@intpoly6pa:

; 418  :      {
; 419  :         case 0: return u + v - 1.5;

	fld	QWORD PTR _u$[ebp]
	fadd	QWORD PTR _v$[ebp]
	fsub	QWORD PTR __real@3ff8000000000000

; 439  : } // intpoly6part()

	pop	ebp
	ret	0
$LN15@intpoly6pa:

; 420  :         case 1: return 2 - 2*u - v;

	fld	QWORD PTR _u$[ebp]
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fsubrp	ST(1), ST(0)
	fsub	QWORD PTR _v$[ebp]

; 439  : } // intpoly6part()

	pop	ebp
	ret	0
$LN14@intpoly6pa:

; 421  :         case 2: return u - 0.5;

	fld	QWORD PTR _u$[ebp]
	fsub	QWORD PTR __real@3fe0000000000000

; 439  : } // intpoly6part()

	pop	ebp
	ret	0
$LN13@intpoly6pa:

; 422  :         case 3: return v;

	fld	QWORD PTR _v$[ebp]

; 439  : } // intpoly6part()

	pop	ebp
	ret	0
$LN11@intpoly6pa:

; 423  :         case 4: return 0.0;
; 424  :         case 5: return -v;

	fld	QWORD PTR _v$[ebp]
	fchs

; 439  : } // intpoly6part()

	pop	ebp
	ret	0
$LN19@intpoly6pa:

; 425  :      }
; 426  :   else if ( i == 1 )

	cmp	eax, 1
	jne	SHORT $LN7@intpoly6pa

; 427  :     switch ( k )

	mov	eax, DWORD PTR _k$[ebp]
	cmp	eax, 5
	ja	SHORT $LN7@intpoly6pa
	jmp	DWORD PTR $LN24@intpoly6pa[eax*4]
$LN5@intpoly6pa:

; 428  :      {
; 429  :         case 0: return u + v - 1.5;
; 430  :         case 1: return -u;

	fld	QWORD PTR _u$[ebp]
	fchs

; 439  : } // intpoly6part()

	pop	ebp
	ret	0
$LN3@intpoly6pa:

; 431  :         case 2: return 0.0;
; 432  :         case 3: return u;

	fld	QWORD PTR _u$[ebp]

; 439  : } // intpoly6part()

	pop	ebp
	ret	0
$LN2@intpoly6pa:

; 433  :         case 4: return v - 0.5;

	fld	QWORD PTR _v$[ebp]
	fsub	QWORD PTR __real@3fe0000000000000

; 439  : } // intpoly6part()

	pop	ebp
	ret	0
$LN1@intpoly6pa:

; 434  :         case 5: return 2 - u - 2*v;

	fld	QWORD PTR __real@4000000000000000
	fld	QWORD PTR _u$[ebp]
	fsubr	ST(0), ST(1)
	fld	QWORD PTR _v$[ebp]
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)

; 439  : } // intpoly6part()

	pop	ebp
	ret	0
$LN7@intpoly6pa:

; 435  :      }
; 436  : 
; 437  :   /* bad index */
; 438  :   return 0.0;

	fldz

; 439  : } // intpoly6part()

	pop	ebp
	ret	0
	npad	1
$LN23@intpoly6pa:
	DD	$LN16@intpoly6pa
	DD	$LN15@intpoly6pa
	DD	$LN14@intpoly6pa
	DD	$LN13@intpoly6pa
	DD	$LN7@intpoly6pa
	DD	$LN11@intpoly6pa
$LN24@intpoly6pa:
	DD	$LN16@intpoly6pa
	DD	$LN5@intpoly6pa
	DD	$LN7@intpoly6pa
	DD	$LN3@intpoly6pa
	DD	$LN2@intpoly6pa
	DD	$LN1@intpoly6pa
_intpoly6part ENDP
_TEXT	ENDS
PUBLIC	_vintzf
_BSS	SEGMENT
_ga	DD	01H DUP (?)
_al	DD	01H DUP (?)
_be	DD	01H DUP (?)
; Function compile flags: /Ogtp
_BSS	ENDS
;	COMDAT _vintzf
_TEXT	SEGMENT
tv163 = -8						; size = 8
tv161 = -8						; size = 8
_u$ = 8							; size = 8
_v$ = 16						; size = 8
_vintzf	PROC						; COMDAT

; 452  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 453  :   return 
; 454  :       intpoly6(al,u,v)*intpoly6part(be,0,u,v)*intpoly6part(ga,1,u,v);

	fld	QWORD PTR _v$[ebp]
	mov	eax, DWORD PTR _be
	sub	esp, 16					; 00000010H
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR _u$[ebp]
	fstp	QWORD PTR [esp]
	push	0
	push	eax
	call	_intpoly6part
	fstp	QWORD PTR tv163[ebp]
	fld	QWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _al
	add	esp, 8
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR _u$[ebp]
	fstp	QWORD PTR [esp]
	push	ecx
	call	_intpoly6
	fmul	QWORD PTR tv163[ebp]
	mov	edx, DWORD PTR _ga
	add	esp, 4
	fstp	QWORD PTR tv161[ebp]
	fld	QWORD PTR _v$[ebp]
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR _u$[ebp]
	fstp	QWORD PTR [esp]
	push	1
	push	edx
	call	_intpoly6part
	fmul	QWORD PTR tv161[ebp]
	add	esp, 24					; 00000018H

; 455  : 
; 456  : } // end vintzf()

	mov	esp, ebp
	pop	ebp
	ret	0
_vintzf	ENDP
_TEXT	ENDS
PUBLIC	__real@4056800000000000
PUBLIC	__real@40568010624dd2f2
PUBLIC	_vcoeff_init
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@4056800000000000
CONST	SEGMENT
__real@4056800000000000 DQ 04056800000000000r	; 90
CONST	ENDS
;	COMDAT __real@40568010624dd2f2
CONST	SEGMENT
__real@40568010624dd2f2 DQ 040568010624dd2f2r	; 90.001
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _vcoeff_init
_TEXT	SEGMENT
tv130 = -4						; size = 4
_vcoeff_init PROC					; COMDAT

; 459  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi

; 460  :   REAL t;
; 461  : 
; 462  :   for ( al = 0 ; al < FACET_CTRL ; al++ )

	xor	esi, esi
	push	edi
	mov	DWORD PTR _al, esi
	npad	2
$LL9@vcoeff_ini:

; 463  :     for ( be = 0; be < FACET_CTRL ; be++ )

	mov	DWORD PTR _be, esi
	npad	10
$LL6@vcoeff_ini:

; 464  :       for ( ga = 0 ; ga < FACET_CTRL ; ga++ )

	mov	DWORD PTR _ga, esi
$LL3@vcoeff_ini:

; 465  :       { t = triangle_integral(vintzf);

	push	OFFSET _vintzf
	call	_triangle_integral

; 466  :         /* round to nearest 90th */
; 467  :         t = (int)(t*90.001)/90.0;

	fmul	QWORD PTR __real@40568010624dd2f2
	add	esp, 4
	call	__ftol2_sse
	mov	DWORD PTR tv130[ebp], eax
	fild	DWORD PTR tv130[ebp]

; 468  :         vcoeff[al][be][ga] = t;

	mov	ecx, DWORD PTR _al
	mov	edx, DWORD PTR _be
	lea	eax, DWORD PTR [ecx+ecx*2]
	fdiv	QWORD PTR __real@4056800000000000
	lea	eax, DWORD PTR [edx+eax*2]
	lea	edi, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR _ga
	lea	edi, DWORD PTR [eax+edi*2]
	inc	eax
	mov	DWORD PTR _ga, eax
	fstp	QWORD PTR _vcoeff[edi*8]
	cmp	eax, 6
	jl	SHORT $LL3@vcoeff_ini

; 463  :     for ( be = 0; be < FACET_CTRL ; be++ )

	inc	edx
	mov	DWORD PTR _be, edx
	cmp	edx, 6
	jl	SHORT $LL6@vcoeff_ini

; 460  :   REAL t;
; 461  : 
; 462  :   for ( al = 0 ; al < FACET_CTRL ; al++ )

	inc	ecx
	mov	DWORD PTR _al, ecx
	cmp	ecx, 6
	jl	$LL9@vcoeff_ini
	pop	edi
	pop	esi

; 469  :       }
; 470  :  
; 471  : }  // end vcoeff_init()

	mov	esp, ebp
	pop	ebp
	ret	0
_vcoeff_init ENDP
_TEXT	ENDS
PUBLIC	_q_facet_tension_q
EXTRN	_meth_inst_list:DWORD
EXTRN	_proc_total_area:BYTE
EXTRN	_win_get_thread_data:PROC
EXTRN	_thread_data_key:DWORD
EXTRN	_nprocs:DWORD
EXTRN	_quantities_only_flag:DWORD
; Function compile flags: /Ogtp
;	COMDAT _q_facet_tension_q
_TEXT	SEGMENT
_st$ = -24						; size = 8
_ss$ = -16						; size = 8
_value$ = -8						; size = 8
_f_info$ = 8						; size = 4
_q_facet_tension_q PROC					; COMDAT

; 496  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 497  :   REAL value = 0.0;

	fldz
	push	ebx

; 498  :   int m;
; 499  :   REAL det;
; 500  :   REAL st,ss,tt;
; 501  :   REAL **tang;
; 502  :      
; 503  :   for ( m = 0 ; m < gauss2D_num ; m++ )  /*  integration point number */

	mov	ebx, DWORD PTR _f_info$[ebp]
	fst	QWORD PTR _value$[ebp]
	push	edi
	xor	edi, edi
	cmp	DWORD PTR _gauss2D_num, edi
	jle	SHORT $LN5@q_facet_te
	push	esi
	npad	5
$LL26@q_facet_te:

; 504  :   { tang = f_info->sides[m];

	mov	eax, DWORD PTR [ebx+1276]
	fstp	ST(0)
	mov	esi, DWORD PTR [eax+edi*4]

; 505  :     ss = SDIM_dot(tang[0],tang[0]);

	mov	ecx, DWORD PTR _web+616
	mov	eax, DWORD PTR [esi]
	push	ecx
	push	eax
	push	eax
	call	_dot
	fstp	QWORD PTR _ss$[ebp]

; 506  :     st = SDIM_dot(tang[0],tang[1]);

	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	push	edx
	push	eax
	push	ecx
	call	_dot
	fstp	QWORD PTR _st$[ebp]

; 507  :     tt = SDIM_dot(tang[1],tang[1]);

	mov	edx, DWORD PTR _web+616
	mov	esi, DWORD PTR [esi+4]
	push	edx
	push	esi
	push	esi
	call	_dot

; 508  :     det = ss*tt - st*st;

	fmul	QWORD PTR _ss$[ebp]
	fld	QWORD PTR _st$[ebp]
	add	esp, 36					; 00000024H
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)

; 509  :     value += gauss2Dwt[m]*sqrt(det);

	call	__CIsqrt
	mov	eax, DWORD PTR _gauss2Dwt
	fmul	QWORD PTR [eax+edi*8]
	inc	edi
	fadd	QWORD PTR _value$[ebp]
	fst	QWORD PTR _value$[ebp]
	cmp	edi, DWORD PTR _gauss2D_num
	jl	SHORT $LL26@q_facet_te
	pop	esi
$LN5@q_facet_te:

; 510  :   }
; 511  : 
; 512  :   value /= 2; /* triangle factor */
; 513  :   if ( quantities_only_flag )

	cmp	DWORD PTR _quantities_only_flag, 0
	fmul	QWORD PTR __real@3fe0000000000000
	fst	QWORD PTR _value$[ebp]
	je	SHORT $LN2@q_facet_te

; 514  :   { set_facet_area(f_info->id,value);

	mov	ecx, DWORD PTR [ebx]
	mov	edx, DWORD PTR _web+236
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	fst	QWORD PTR [eax+40]

; 515  : #ifdef SHARED_MEMORY
; 516  :      if ( nprocs > 1 ) 

	cmp	DWORD PTR _nprocs, 1
	jle	SHORT $LN3@q_facet_te

; 517  :       proc_total_area[GET_THREAD_ID] += value;

	mov	ecx, DWORD PTR _thread_data_key
	fstp	ST(0)
	push	ecx
	call	_win_get_thread_data
	mov	eax, DWORD PTR [eax]
	fld	QWORD PTR _proc_total_area[eax*8]
	add	esp, 4
	fld	QWORD PTR _value$[ebp]
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _proc_total_area[eax*8]

; 518  :      else

	jmp	SHORT $LN2@q_facet_te
$LN3@q_facet_te:

; 519  : #endif
; 520  :      binary_tree_add(web.total_area_addends,value);

	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET _web+1000
	call	_binary_tree_add
	fld	QWORD PTR _value$[ebp]
	add	esp, 12					; 0000000cH
$LN2@q_facet_te:

; 521  :   }
; 522  :   if ( METH_INSTANCE(f_info->method)->flags & USE_DENSITY )

	mov	eax, DWORD PTR [ebx+8]
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	edx, DWORD PTR _meth_inst_list
	imul	eax, 2928				; 00000b70H
	test	DWORD PTR [eax+edx+140], 536870912	; 20000000H
	je	SHORT $LN1@q_facet_te

; 523  :       value *= get_facet_density(f_info->id);

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR _web+236
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fmul	QWORD PTR [edx+32]
$LN1@q_facet_te:
	pop	edi
	pop	ebx

; 524  :   return value;
; 525  : 
; 526  : } /* end q_facet_tension_q() */

	mov	esp, ebp
	pop	ebp
	ret	0
_q_facet_tension_q ENDP
_TEXT	ENDS
PUBLIC	_q_facet_tension_q_grad
; Function compile flags: /Ogtp
;	COMDAT _q_facet_tension_q_grad
_TEXT	SEGMENT
_tt$ = -56						; size = 8
_ss$ = -48						; size = 8
_density$ = -40						; size = 8
_value$ = -32						; size = 8
_tang$89414 = -24					; size = 4
_st$ = -20						; size = 8
tv592 = -16						; size = 4
_m$ = -12						; size = 4
tv586 = -8						; size = 4
tv584 = -4						; size = 4
_f_info$ = 8						; size = 4
_q_facet_tension_q_grad PROC				; COMDAT

; 537  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H

; 538  :   REAL value = 0.0;

	fldz

; 539  :   int m,j,k;
; 540  :   REAL det,norm;
; 541  :   REAL st,ss,tt;
; 542  :   REAL density,fudge;
; 543  : 
; 544  :   if ( METH_INSTANCE(f_info->method)->flags & USE_DENSITY )

	mov	ecx, DWORD PTR _meth_inst_list
	push	ebx
	fld	ST(0)
	mov	ebx, DWORD PTR _f_info$[ebp]
	fst	QWORD PTR _value$[ebp]
	mov	eax, DWORD PTR [ebx+8]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	test	DWORD PTR [eax+ecx+140], 536870912	; 20000000H
	push	edi
	je	SHORT $LN17@q_facet_te@2

; 545  :       density = get_facet_density(f_info->id);

	mov	edx, DWORD PTR [ebx]
	mov	eax, DWORD PTR _web+236
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	fld	QWORD PTR [ecx+32]
	jmp	SHORT $LN58@q_facet_te@2
$LN17@q_facet_te@2:

; 546  :   else density = 1.0;

	fld1
$LN58@q_facet_te@2:

; 547  : 
; 548  :   for ( k = 0 ; k < FACET_CTRL ; k++ )

	mov	ecx, DWORD PTR _web+616
	fst	QWORD PTR _density$[ebp]
	xor	edx, edx
$LN15@q_facet_te@2:

; 549  :      for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN14@q_facet_te@2
$LN39@q_facet_te@2:

; 550  :         f_info->grad[k][j] = 0.0;

	mov	ecx, DWORD PTR [ebx+1336]
	fxch	ST(2)
	mov	ecx, DWORD PTR [ecx+edx]
	fst	QWORD PTR [ecx+eax*8]
	mov	ecx, DWORD PTR _web+616
	inc	eax
	fxch	ST(2)
	cmp	eax, ecx
	jl	SHORT $LN39@q_facet_te@2
$LN14@q_facet_te@2:

; 547  : 
; 548  :   for ( k = 0 ; k < FACET_CTRL ; k++ )

	add	edx, 4
	cmp	edx, 24					; 00000018H
	jl	SHORT $LN15@q_facet_te@2

; 551  : 
; 552  :   for ( m = 0 ; m < gauss2D_num ; m++ )  /*  integration point number */

	xor	edi, edi
	fstp	ST(2)
	mov	DWORD PTR _m$[ebp], edi
	cmp	DWORD PTR _gauss2D_num, edi
	jle	$LN7@q_facet_te@2
	push	esi
$LL56@q_facet_te@2:

; 553  :   { REAL **tang = f_info->sides[m];

	mov	edx, DWORD PTR [ebx+1276]
	fstp	ST(1)
	mov	esi, DWORD PTR [edx+edi*4]
	fstp	ST(0)

; 554  :      /* calculate tangents and det */ 
; 555  :      ss = SDIM_dot(tang[0],tang[0]);

	mov	eax, DWORD PTR [esi]
	push	ecx
	push	eax
	push	eax
	mov	DWORD PTR _tang$89414[ebp], esi
	call	_dot
	fstp	QWORD PTR _ss$[ebp]

; 556  :      st = SDIM_dot(tang[0],tang[1]);

	mov	eax, DWORD PTR _web+616
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	push	eax
	push	ecx
	push	edx
	call	_dot
	fstp	QWORD PTR _st$[ebp]

; 557  :      tt = SDIM_dot(tang[1],tang[1]);

	mov	ecx, DWORD PTR _web+616
	mov	eax, DWORD PTR [esi+4]
	push	ecx
	push	eax
	push	eax
	call	_dot
	fst	QWORD PTR _tt$[ebp]

; 558  :      det = ss*tt - st*st;

	fmul	QWORD PTR _ss$[ebp]
	add	esp, 36					; 00000024H
	fld	QWORD PTR _st$[ebp]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)

; 559  :      norm = sqrt(det);

	call	__CIsqrt
	mov	eax, DWORD PTR _gauss2Dwt

; 560  :      value += gauss2Dwt[m]*norm/2;

	fld	QWORD PTR [eax+edi*8]
	mov	ecx, DWORD PTR _web+616
	fmul	ST(0), ST(1)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR _value$[ebp]
	fst	QWORD PTR _value$[ebp]

; 561  :      /* gradients */
; 562  :      fudge = density*gauss2Dwt[m]/norm/2;

	fld	QWORD PTR [eax+edi*8]
	xor	eax, eax
	fld	QWORD PTR _density$[ebp]
	mov	DWORD PTR tv584[ebp], eax
	fmul	ST(1), ST(0)
	mov	DWORD PTR tv586[ebp], eax
	fxch	ST(1)
	fdivrp	ST(4), ST(0)
	fxch	ST(3)
	fmulp	ST(2), ST(0)
	fld	QWORD PTR _tt$[ebp]
	fld	QWORD PTR _st$[ebp]
	fld	QWORD PTR _ss$[ebp]
$LN6@q_facet_te@2:

; 564  :         for ( j = 0 ; j < SDIM ; j++ )

	xor	edx, edx
	test	ecx, ecx
	jle	SHORT $LN5@q_facet_te@2
	mov	ecx, DWORD PTR _gpolypartial
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	edi, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+4]
	add	ecx, eax
	add	edi, eax
	mov	eax, DWORD PTR [esi+4]
	mov	esi, DWORD PTR [esi]
	mov	DWORD PTR tv592[ebp], ecx
	sub	esi, eax
$LN30@q_facet_te@2:
	mov	ecx, DWORD PTR [ebx+1336]

; 565  :           f_info->grad[k][j] += fudge*
; 566  :              (  tang[0][j]*gpolypartial[m][0][k]*tt
; 567  :               - tang[0][j]*gpolypartial[m][1][k]*st
; 568  :               - tang[1][j]*gpolypartial[m][0][k]*st
; 569  :               + tang[1][j]*gpolypartial[m][1][k]*ss);

	fld	QWORD PTR [edi]
	fmul	QWORD PTR [esi+eax]
	mov	ebx, DWORD PTR tv584[ebp]
	mov	ecx, DWORD PTR [ecx+ebx]
	mov	ebx, DWORD PTR tv592[ebp]
	fmul	ST(0), ST(3)
	lea	ecx, DWORD PTR [ecx+edx*8]
	fld	QWORD PTR [esi+eax]
	inc	edx
	fmul	QWORD PTR [ebx]
	add	eax, 8
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edi]
	fmul	QWORD PTR [eax-8]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR _f_info$[ebp]
	fmul	QWORD PTR [eax-8]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _web+616
	cmp	edx, ecx
	jl	SHORT $LN30@q_facet_te@2

; 564  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR tv586[ebp]
	mov	esi, DWORD PTR _tang$89414[ebp]
	mov	edi, DWORD PTR _m$[ebp]
$LN5@q_facet_te@2:

; 563  :      for ( k = 0 ; k < FACET_CTRL ; k++ )

	add	DWORD PTR tv584[ebp], 4
	add	eax, 8
	mov	DWORD PTR tv586[ebp], eax
	cmp	eax, 48					; 00000030H
	jl	$LN6@q_facet_te@2
	fstp	ST(1)
	inc	edi
	fstp	ST(3)
	mov	DWORD PTR _m$[ebp], edi
	fstp	ST(2)
	fstp	ST(1)
	cmp	edi, DWORD PTR _gauss2D_num
	jl	$LL56@q_facet_te@2
	pop	esi
$LN7@q_facet_te@2:
	pop	edi

; 570  :   }
; 571  : 
; 572  :   return density*value;

	fmulp	ST(1), ST(0)
	pop	ebx

; 573  : 
; 574  : } /* end q_facet_tnesion_grad_q() */

	mov	esp, ebp
	pop	ebp
	ret	0
_q_facet_tension_q_grad ENDP
_TEXT	ENDS
PUBLIC	__real@3fd0000000000000
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_q_facet_tension_q_hess
EXTRN	_mat4d_setup:PROC
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _q_facet_tension_q_hess
_TEXT	SEGMENT
_aaqXvS$ = -2080					; size = 456
_atqXvS$ = -1624					; size = 8
_ainvqXvS$ = -1616					; size = 8
_value$ = -1608						; size = 8
_density$ = -1600					; size = 8
_tt$ = -1592						; size = 8
tv1077 = -1588						; size = 4
_ss$ = -1584						; size = 8
tv1972 = -1580						; size = 4
tv882 = -1576						; size = 4
_fudge$ = -1572						; size = 8
_st$ = -1572						; size = 8
tv1979 = -1568						; size = 4
_det$ = -1564						; size = 8
tv1945 = -1560						; size = 4
tv1528 = -1560						; size = 4
_aa$ = -1556						; size = 4
_f_info$GSCopy$ = -1552					; size = 4
_ainv$ = -1548						; size = 4
_j$ = -1544						; size = 4
_at$ = -1540						; size = 4
tv1831 = -1536						; size = 4
_m$ = -1532						; size = 4
tv1941 = -1528						; size = 4
tv1827 = -1524						; size = 4
_tang$89458 = -1524					; size = 4
tv1902 = -1520						; size = 4
tv1460 = -1520						; size = 4
tv1743 = -1516						; size = 4
tv1505 = -1516						; size = 4
tv1943 = -1512						; size = 4
tv1568 = -1512						; size = 4
_aaxJ$ = -1508						; size = 1152
_tr$ = -356						; size = 288
_atxJ$ = -68						; size = 32
_ainvxJ$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_q_facet_tension_q_hess PROC				; COMDAT

; 585  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2080				; 00000820H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 586  :   REAL value = 0.0;

	fldz
	push	ebx
	push	esi
	fstp	QWORD PTR _value$[ebp]
	mov	esi, DWORD PTR _f_info$[ebp]
	push	edi

; 587  :   int m,j,jj,k,kk,p,q;
; 588  :   REAL det,norm;
; 589  :   REAL st,ss,tt;
; 590  :   REAL tr[FACET_CTRL][MAXCOORD];  /* traces */
; 591  :   MAT2D(at,2,2);

	push	2
	push	2
	lea	eax, DWORD PTR _atxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _atqXvS$[ebp]
	push	ecx
	mov	DWORD PTR _f_info$GSCopy$[ebp], esi
	call	_mat2d_setup

; 592  :   MAT2D(ainv,2,2);

	push	2
	push	2
	lea	edx, DWORD PTR _ainvxJ$[ebp]
	mov	DWORD PTR _at$[ebp], eax
	push	edx
	lea	eax, DWORD PTR _ainvqXvS$[ebp]
	push	eax
	call	_mat2d_setup

; 593  :   MAT4D(aa,FACET_CTRL,MAXCOORD,2,2);

	push	2
	push	2
	push	6
	push	6
	lea	ecx, DWORD PTR _aaxJ$[ebp]
	push	ecx
	lea	edx, DWORD PTR _aaqXvS$[ebp]
	mov	ebx, eax
	push	edx
	mov	DWORD PTR _ainv$[ebp], ebx
	call	_mat4d_setup

; 594  :   REAL density,fudge;
; 595  : 
; 596  :   if ( METH_INSTANCE(f_info->method)->flags & USE_DENSITY )

	mov	ecx, DWORD PTR _meth_inst_list
	mov	DWORD PTR _aa$[ebp], eax
	mov	eax, DWORD PTR [esi+8]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	esp, 56					; 00000038H
	test	DWORD PTR [eax+ecx+140], 536870912	; 20000000H
	je	SHORT $LN30@q_facet_te@3

; 597  :       density = get_facet_density(f_info->id);

	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR _web+236
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	fld	QWORD PTR [ecx+32]
	jmp	SHORT $LN106@q_facet_te@3
$LN30@q_facet_te@3:

; 598  :   else density = 1.0;

	fld1
$LN106@q_facet_te@3:

; 599  : 
; 600  :   for ( m = 0 ; m < gauss2D_num ; m++ )  /*  integration point number */

	xor	edi, edi
	fstp	QWORD PTR _density$[ebp]
	mov	DWORD PTR _m$[ebp], edi
	cmp	DWORD PTR _gauss2D_num, edi
	jle	$LN68@q_facet_te@3
	mov	eax, DWORD PTR _web+616
	jmp	SHORT $LN28@q_facet_te@3
	npad	6
$LL75@q_facet_te@3:
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
$LN28@q_facet_te@3:

; 601  :   { REAL **tang = f_info->sides[m];

	mov	edx, DWORD PTR [esi+1276]
	mov	esi, DWORD PTR [edx+edi*4]

; 602  :      /* calculate tangents and det */ 
; 603  :      ss = SDIM_dot(tang[0],tang[0]);

	mov	ecx, DWORD PTR [esi]
	push	eax
	push	ecx
	push	ecx
	mov	DWORD PTR _tang$89458[ebp], esi
	call	_dot
	fstp	QWORD PTR _ss$[ebp]

; 604  :      st = SDIM_dot(tang[0],tang[1]);

	mov	eax, DWORD PTR _web+616
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	push	eax
	push	ecx
	push	edx
	call	_dot
	fstp	QWORD PTR _st$[ebp]

; 605  :      tt = SDIM_dot(tang[1],tang[1]);

	mov	eax, DWORD PTR _web+616
	mov	esi, DWORD PTR [esi+4]
	push	eax
	push	esi
	push	esi
	call	_dot
	fst	QWORD PTR _tt$[ebp]

; 606  :      det = ss*tt - st*st;

	fmul	QWORD PTR _ss$[ebp]
	add	esp, 36					; 00000024H
	fld	QWORD PTR _st$[ebp]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _det$[ebp]

; 607  :      if ( det <= 0.0 ) continue;

	fldz
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 1
	je	$LN78@q_facet_te@3

; 608  :      norm = sqrt(det);

	call	__CIsqrt
	mov	ecx, DWORD PTR _gauss2Dwt

; 609  :      value += gauss2Dwt[m]*norm/2;

	fld	QWORD PTR [ecx+edi*8]
	lea	eax, DWORD PTR [ecx+edi*8]
	fmul	ST(0), ST(1)

; 610  : 
; 611  :      ainv[0][0] = tt/det;

	mov	ecx, DWORD PTR [ebx]

; 612  :      ainv[0][1] = ainv[1][0] = -st/det;

	mov	edx, DWORD PTR [ebx+4]
	xor	ebx, ebx
	fmul	QWORD PTR __real@3fe0000000000000
	mov	DWORD PTR tv1505[ebp], ebx
	xor	edi, edi
	fadd	QWORD PTR _value$[ebp]
	fstp	QWORD PTR _value$[ebp]
	fld	QWORD PTR _tt$[ebp]
	fld	QWORD PTR _det$[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [ecx]
	fld	QWORD PTR _st$[ebp]
	fdiv	ST(0), ST(1)
	fchs
	fst	QWORD PTR [edx]
	fstp	QWORD PTR [ecx+8]

; 613  :      ainv[1][1] = ss/det;

	fdivr	QWORD PTR _ss$[ebp]
	fstp	QWORD PTR [edx+8]

; 614  : 
; 615  :      /* gradients */
; 616  :      fudge = density*gauss2Dwt[m]*norm/4;

	fld	QWORD PTR [eax]
	fmul	QWORD PTR _density$[ebp]
	lea	edx, DWORD PTR _tr$[ebp]
	mov	eax, DWORD PTR _web+616
	mov	DWORD PTR tv1568[ebp], edx
	fmulp	ST(1), ST(0)
	fmul	QWORD PTR __real@3fd0000000000000
	fst	QWORD PTR _fudge$[ebp]
$LN24@q_facet_te@3:

; 618  :         for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	test	eax, eax
	jle	$LN23@q_facet_te@3
	mov	eax, DWORD PTR tv1568[ebp]
	mov	DWORD PTR tv1460[ebp], eax
	npad	10
$LL105@q_facet_te@3:
	mov	ecx, DWORD PTR _gpolypartial
	fstp	ST(0)
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _tang$89458[ebp]
	lea	ecx, DWORD PTR [ecx+edx*4]
	mov	edx, DWORD PTR [eax]
	lea	eax, DWORD PTR [edx+esi*8]

; 619  :         { for ( p = 0 ; p < 2 ; p++ )
; 620  :             for ( q = 0 ; q < 2; q++ )
; 621  :               at[p][q] = tang[p][j]*gpolypartial[m][q][k] +
; 622  :                   tang[q][j]*gpolypartial[m][p][k];

	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR _at$[ebp]
	fmul	QWORD PTR [eax]
	mov	edx, DWORD PTR [edx]

; 623  :           mat_mult(at,ainv,aa[k][j],2,2,2);

	push	2
	push	2
	fadd	ST(0), ST(0)
	push	2
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR [ecx]
	mov	ebx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+4]
	fld	QWORD PTR [edx+edi]
	mov	ecx, DWORD PTR _tang$89458[ebp]
	fmul	QWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+4]
	fld	QWORD PTR [ecx+esi*8]
	lea	ecx, DWORD PTR [ecx+esi*8]
	fmul	QWORD PTR [ebx+edi]
	add	ebx, edi
	mov	DWORD PTR tv1528[ebp], ebx
	mov	ebx, DWORD PTR _at$[ebp]
	mov	ebx, DWORD PTR [ebx]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR _at$[ebp]
	fld	QWORD PTR [edx+edi]
	mov	ebx, DWORD PTR [ebx+4]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv1528[ebp]
	fld	QWORD PTR [ecx]
	fmul	QWORD PTR [eax]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [ebx]
	fld	QWORD PTR [edx+edi]
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _aa$[ebp]
	fadd	ST(0), ST(0)
	fstp	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR tv1505[ebp]
	mov	edx, DWORD PTR [ebx+ecx]
	mov	eax, DWORD PTR [edx+esi*4]
	mov	ecx, DWORD PTR _ainv$[ebp]
	mov	edx, DWORD PTR _at$[ebp]
	push	eax
	push	ecx
	push	edx
	call	_mat_mult

; 624  : 
; 625  :           tr[k][j] = aa[k][j][0][0] + aa[k][j][1][1];

	mov	eax, DWORD PTR _aa$[ebp]
	mov	ecx, DWORD PTR [ebx+eax]
	mov	eax, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	fld	QWORD PTR [edx+8]
	fadd	QWORD PTR [eax]
	mov	ecx, DWORD PTR tv1460[ebp]
	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [edx+1336]
	mov	edx, DWORD PTR [eax+ebx]
	fst	QWORD PTR [ecx]

; 626  :           f_info->grad[k][j] += fudge*tr[k][j];

	fld	QWORD PTR _fudge$[ebp]
	lea	eax, DWORD PTR [edx+esi*8]
	fmul	ST(1), ST(0)
	add	ecx, 8
	fxch	ST(1)
	inc	esi
	add	esp, 24					; 00000018H
	fadd	QWORD PTR [eax]
	mov	DWORD PTR tv1460[ebp], ecx
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR _web+616
	cmp	esi, eax

; 618  :         for ( j = 0 ; j < SDIM ; j++ )

	jl	$LL105@q_facet_te@3
$LN23@q_facet_te@3:

; 617  :      for ( k = 0 ; k < FACET_CTRL ; k++ )

	add	DWORD PTR tv1568[ebp], 48		; 00000030H
	add	edi, 8
	add	ebx, 4
	mov	DWORD PTR tv1505[ebp], ebx
	cmp	edi, 48					; 00000030H
	jl	$LN24@q_facet_te@3

; 627  :         }
; 628  : 
; 629  :      /* hessians */
; 630  :      for ( k = 0 ; k < FACET_CTRL ; k++ )

	fld	QWORD PTR __real@4000000000000000
	xor	edi, edi
	fldz
	mov	DWORD PTR tv1941[ebp], edi
	mov	DWORD PTR tv1943[ebp], edi
	mov	DWORD PTR tv1945[ebp], edi
$LN73@q_facet_te@3:

; 631  :       for ( kk = 0 ; kk < FACET_CTRL ; kk++ )

	xor	edx, edx
	lea	ecx, DWORD PTR _tr$[ebp]
	mov	DWORD PTR tv1827[ebp], edx
	mov	DWORD PTR tv1831[ebp], edx
	mov	DWORD PTR tv1902[ebp], ecx
$LN74@q_facet_te@3:

; 632  :         for ( j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	mov	DWORD PTR _j$[ebp], ecx
	test	eax, eax
	jle	$LN8@q_facet_te@3
$LN76@q_facet_te@3:

; 633  :          for ( jj = 0 ; jj < SDIM ; jj++ )

	xor	esi, esi
	test	eax, eax
	jle	$LN5@q_facet_te@3
	mov	eax, DWORD PTR tv1943[ebp]
	add	edi, ecx
	fld	QWORD PTR _tr$[ebp+edi*8]
	mov	edi, DWORD PTR _aa$[ebp]
	mov	eax, DWORD PTR [eax+edi]
	fmul	QWORD PTR __real@3fe0000000000000
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	ebx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR tv1979[ebp], eax
	mov	eax, DWORD PTR tv1831[ebp]
	mov	edi, DWORD PTR [eax+edi]
	mov	eax, DWORD PTR tv1902[ebp]
	mov	DWORD PTR tv1972[ebp], ebx
	mov	DWORD PTR tv1743[ebp], eax
$LN3@q_facet_te@3:

; 634  :              f_info->hess[k][kk][j][jj] += fudge*
; 635  :                 ( 0.5*tr[k][j]*tr[kk][jj]  
; 636  :                  - (aa[k][j][0][0]*aa[kk][jj][0][0] +
; 637  :                       aa[k][j][0][1]*aa[kk][jj][1][0] +
; 638  :                       aa[k][j][1][0]*aa[kk][jj][0][1] +
; 639  :                       aa[k][j][1][1]*aa[kk][jj][1][1]) 
; 640  :                   + ( (j==jj)? 
; 641  :                   2*(gpolypartial[m][0][k]*gpolypartial[m][0][kk]*ainv[0][0]
; 642  :                     + gpolypartial[m][0][k]*gpolypartial[m][1][kk]*ainv[0][1]
; 643  :                     + gpolypartial[m][1][k]*gpolypartial[m][0][kk]*ainv[1][0]
; 644  :                     + gpolypartial[m][1][k]*gpolypartial[m][1][kk]*ainv[1][1])
; 645  :                     : 0.0)
; 646  :                 );

	cmp	ecx, esi
	jne	$LN33@q_facet_te@3
	mov	ebx, DWORD PTR _ainv$[ebp]
	mov	ebx, DWORD PTR [ebx]
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _gpolypartial
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR tv882[ebp], ebx
	mov	ebx, DWORD PTR _ainv$[ebp]
	mov	ebx, DWORD PTR [ebx+4]
	mov	DWORD PTR tv1077[ebp], ebx
	mov	ebx, DWORD PTR tv1941[ebp]
	fld	QWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR tv882[ebp]
	fmul	QWORD PTR [edx+eax]
	fmul	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR tv1941[ebp]
	fld	QWORD PTR [ebx+ecx]
	mov	ebx, DWORD PTR tv882[ebp]
	fmul	QWORD PTR [edx+ecx]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv1941[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+eax]
	fmul	QWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR tv1077[ebp]
	fmul	QWORD PTR [ecx]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+eax]
	fmul	QWORD PTR [edx+eax]
	fmul	QWORD PTR [ecx+8]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	jmp	SHORT $LN34@q_facet_te@3
$LN33@q_facet_te@3:
	fld	ST(1)
$LN34@q_facet_te@3:

; 633  :          for ( jj = 0 ; jj < SDIM ; jj++ )

	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]

; 634  :              f_info->hess[k][kk][j][jj] += fudge*
; 635  :                 ( 0.5*tr[k][j]*tr[kk][jj]  
; 636  :                  - (aa[k][j][0][0]*aa[kk][jj][0][0] +
; 637  :                       aa[k][j][0][1]*aa[kk][jj][1][0] +
; 638  :                       aa[k][j][1][0]*aa[kk][jj][0][1] +
; 639  :                       aa[k][j][1][1]*aa[kk][jj][1][1]) 
; 640  :                   + ( (j==jj)? 
; 641  :                   2*(gpolypartial[m][0][k]*gpolypartial[m][0][kk]*ainv[0][0]
; 642  :                     + gpolypartial[m][0][k]*gpolypartial[m][1][kk]*ainv[0][1]
; 643  :                     + gpolypartial[m][1][k]*gpolypartial[m][0][kk]*ainv[1][0]
; 644  :                     + gpolypartial[m][1][k]*gpolypartial[m][1][kk]*ainv[1][1])
; 645  :                     : 0.0)
; 646  :                 );

	fld	ST(1)
	mov	edx, DWORD PTR [edx+1340]
	mov	ebx, DWORD PTR tv1943[ebp]
	mov	edx, DWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR tv1831[ebp]
	mov	edx, DWORD PTR [edx+ebx]
	mov	ebx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax+4]
	mov	ebx, DWORD PTR tv1743[ebp]
	fmul	QWORD PTR [ebx]
	mov	eax, DWORD PTR [eax]
	fld	QWORD PTR [ecx]
	mov	ebx, DWORD PTR tv1972[ebp]
	fmul	QWORD PTR [ebx+8]
	add	DWORD PTR tv1743[ebp], 8
	fld	QWORD PTR [eax]
	lea	edx, DWORD PTR [edx+esi*8]
	fmul	QWORD PTR [ebx]
	inc	esi
	add	edi, 4
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax+8]
	mov	eax, DWORD PTR tv1979[ebp]
	fmul	QWORD PTR [eax]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _j$[ebp]
	fmul	QWORD PTR [eax+8]
	faddp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	mov	eax, DWORD PTR _web+616
	mov	edx, DWORD PTR tv1827[ebp]
	cmp	esi, eax
	jl	$LN3@q_facet_te@3

; 633  :          for ( jj = 0 ; jj < SDIM ; jj++ )

	mov	edi, DWORD PTR tv1945[ebp]
	fstp	ST(0)
$LN5@q_facet_te@3:

; 632  :         for ( j = 0 ; j < SDIM ; j++ )

	inc	ecx
	mov	DWORD PTR _j$[ebp], ecx
	cmp	ecx, eax
	jl	$LN76@q_facet_te@3
$LN8@q_facet_te@3:

; 631  :       for ( kk = 0 ; kk < FACET_CTRL ; kk++ )

	mov	ecx, DWORD PTR tv1831[ebp]
	add	DWORD PTR tv1902[ebp], 48		; 00000030H
	add	ecx, 4
	add	edx, 8
	mov	DWORD PTR tv1831[ebp], ecx
	mov	DWORD PTR tv1827[ebp], edx
	cmp	ecx, 24					; 00000018H
	jl	$LN74@q_facet_te@3

; 627  :         }
; 628  : 
; 629  :      /* hessians */
; 630  :      for ( k = 0 ; k < FACET_CTRL ; k++ )

	add	DWORD PTR tv1943[ebp], 4
	add	DWORD PTR tv1941[ebp], 8
	add	edi, 6
	mov	DWORD PTR tv1945[ebp], edi
	cmp	edi, 36					; 00000024H
	jl	$LN73@q_facet_te@3
	mov	ebx, DWORD PTR _ainv$[ebp]
	fstp	ST(2)
	mov	edi, DWORD PTR _m$[ebp]
	fstp	ST(0)
	jmp	SHORT $LN107@q_facet_te@3
$LN78@q_facet_te@3:
	mov	eax, DWORD PTR _web+616
$LN107@q_facet_te@3:

; 599  : 
; 600  :   for ( m = 0 ; m < gauss2D_num ; m++ )  /*  integration point number */

	inc	edi

; 607  :      if ( det <= 0.0 ) continue;

	fstp	ST(0)
	mov	DWORD PTR _m$[ebp], edi
	cmp	edi, DWORD PTR _gauss2D_num
	jl	$LL75@q_facet_te@3
$LN68@q_facet_te@3:

; 647  :   } /* end gauss pt loop */
; 648  : 
; 649  :   return density*value;
; 650  : 
; 651  : } /* end q_facet_tension_q_hess() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _density$[ebp]
	fmul	QWORD PTR _value$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_q_facet_tension_q_hess ENDP
_TEXT	ENDS
PUBLIC	_q_facet_tension_uq
; Function compile flags: /Ogtp
;	COMDAT _q_facet_tension_uq
_TEXT	SEGMENT
_st$ = -24						; size = 8
_ss$ = -16						; size = 8
_value$ = -8						; size = 8
_f_info$ = 8						; size = 4
_q_facet_tension_uq PROC				; COMDAT

; 669  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 670  :   REAL value = 0.0;

	fldz
	push	ebx

; 671  :   int m;
; 672  :   REAL det;
; 673  :   REAL st,ss,tt;
; 674  : 
; 675  :   for ( m = 0 ; m < gauss2D_num ; m++ )  /*  integration point number */

	mov	ebx, DWORD PTR _f_info$[ebp]
	fst	QWORD PTR _value$[ebp]
	push	edi
	xor	edi, edi
	cmp	DWORD PTR _gauss2D_num, edi
	jle	SHORT $LN5@q_facet_te@4
	push	esi
	npad	5
$LL26@q_facet_te@4:

; 676  :   { REAL **tang = f_info->sides[m];

	mov	eax, DWORD PTR [ebx+1276]
	fstp	ST(0)
	mov	esi, DWORD PTR [eax+edi*4]

; 677  :     ss = SDIM_dot(tang[0],tang[0]);

	mov	ecx, DWORD PTR _web+616
	mov	eax, DWORD PTR [esi]
	push	ecx
	push	eax
	push	eax
	call	_dot
	fstp	QWORD PTR _ss$[ebp]

; 678  :     st = SDIM_dot(tang[0],tang[1]);

	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	push	edx
	push	eax
	push	ecx
	call	_dot
	fstp	QWORD PTR _st$[ebp]

; 679  :     tt = SDIM_dot(tang[1],tang[1]);

	mov	edx, DWORD PTR _web+616
	mov	esi, DWORD PTR [esi+4]
	push	edx
	push	esi
	push	esi
	call	_dot

; 680  :     det = ss*tt - st*st;

	fmul	QWORD PTR _ss$[ebp]
	fld	QWORD PTR _st$[ebp]

; 681  :     value += gauss2Dwt[m]*det;

	mov	eax, DWORD PTR _gauss2Dwt
	fmul	ST(0), ST(0)
	inc	edi
	add	esp, 36					; 00000024H
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [eax+edi*8-8]
	fadd	QWORD PTR _value$[ebp]
	fst	QWORD PTR _value$[ebp]
	cmp	edi, DWORD PTR _gauss2D_num
	jl	SHORT $LL26@q_facet_te@4
	pop	esi
$LN5@q_facet_te@4:

; 682  :   }
; 683  :   value = sqrt(value)/2;

	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000

; 684  :   if ( quantities_only_flag )

	cmp	DWORD PTR _quantities_only_flag, 0
	fst	QWORD PTR _value$[ebp]
	je	SHORT $LN2@q_facet_te@4

; 685  :   { set_facet_area(f_info->id,value);

	mov	ecx, DWORD PTR [ebx]
	mov	edx, DWORD PTR _web+236
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	fst	QWORD PTR [eax+40]

; 686  : #ifdef SHARED_MEMORY
; 687  :      if ( nprocs > 1 ) 

	cmp	DWORD PTR _nprocs, 1
	jle	SHORT $LN3@q_facet_te@4

; 688  :       proc_total_area[GET_THREAD_ID] += value;

	mov	ecx, DWORD PTR _thread_data_key
	fstp	ST(0)
	push	ecx
	call	_win_get_thread_data
	mov	eax, DWORD PTR [eax]
	fld	QWORD PTR _proc_total_area[eax*8]
	add	esp, 4
	fld	QWORD PTR _value$[ebp]
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _proc_total_area[eax*8]

; 689  :      else

	jmp	SHORT $LN2@q_facet_te@4
$LN3@q_facet_te@4:

; 690  : #endif
; 691  :      binary_tree_add(web.total_area_addends,value);

	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET _web+1000
	call	_binary_tree_add
	fld	QWORD PTR _value$[ebp]
	add	esp, 12					; 0000000cH
$LN2@q_facet_te@4:

; 692  :   }
; 693  : 
; 694  :   if ( METH_INSTANCE(f_info->method)->flags & USE_DENSITY )

	mov	eax, DWORD PTR [ebx+8]
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	edx, DWORD PTR _meth_inst_list
	imul	eax, 2928				; 00000b70H
	test	DWORD PTR [eax+edx+140], 536870912	; 20000000H
	je	SHORT $LN1@q_facet_te@4

; 695  :       value *= get_facet_density(f_info->id);

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR _web+236
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fmul	QWORD PTR [edx+32]
$LN1@q_facet_te@4:
	pop	edi
	pop	ebx

; 696  : 
; 697  :   return value; 
; 698  : 
; 699  : } // end q_facet_tension_uq()

	mov	esp, ebp
	pop	ebp
	ret	0
_q_facet_tension_uq ENDP
_TEXT	ENDS
PUBLIC	__real@4010000000000000
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_q_facet_tension_uq_grad
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _q_facet_tension_uq_grad
_TEXT	SEGMENT
_tang$89529 = -356					; size = 4
_ss$ = -352						; size = 8
tv2556 = -348						; size = 4
_density$ = -344					; size = 8
_value$ = -336						; size = 8
_f_info$GSCopy$ = -328					; size = 4
_m$ = -324						; size = 4
tv3016 = -320						; size = 4
tv2959 = -316						; size = 4
_st$ = -312						; size = 8
tv2973 = -308						; size = 4
tv1673 = -308						; size = 4
tv1614 = -308						; size = 4
tv2942 = -304						; size = 4
_j$ = -304						; size = 4
tv2957 = -300						; size = 4
tv182 = -300						; size = 4
tv2975 = -296						; size = 4
tv2370 = -296						; size = 4
_detgrad$ = -292					; size = 288
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_q_facet_tension_uq_grad PROC				; COMDAT

; 708  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 356				; 00000164H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 709  :   REAL value = 0.0;

	fldz

; 710  :   int m,j,k;
; 711  :   REAL det;
; 712  :   REAL norm;
; 713  :   REAL st,ss,tt;
; 714  :   REAL detgrad[FACET_CTRL][MAXCOORD];
; 715  :   REAL density = 1.0;
; 716  : 
; 717  :   if ( METH_INSTANCE(f_info->method)->flags & USE_DENSITY )

	mov	ecx, DWORD PTR _meth_inst_list
	push	ebx
	fst	QWORD PTR _value$[ebp]
	mov	ebx, DWORD PTR _f_info$[ebp]
	fld1
	mov	eax, DWORD PTR [ebx+8]
	fstp	QWORD PTR _density$[ebp]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	test	DWORD PTR [eax+ecx+140], 536870912	; 20000000H
	push	esi
	push	edi

; 736  :           detgrad[k][j] += gauss2Dwt[m]*
; 737  :              (  tang[0][j]*gpolypartial[m][0][k]*tt
; 738  :               - tang[0][j]*gpolypartial[m][1][k]*st
; 739  :               - tang[1][j]*gpolypartial[m][0][k]*st
; 740  :               + tang[1][j]*gpolypartial[m][1][k]*ss);

	mov	DWORD PTR _f_info$GSCopy$[ebp], ebx
	je	SHORT $LN22@q_facet_te@5

; 718  :       density = get_facet_density(f_info->id);

	mov	edx, DWORD PTR [ebx]
	mov	eax, DWORD PTR _web+236
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	fld	QWORD PTR [ecx+32]
	fstp	QWORD PTR _density$[ebp]
$LN22@q_facet_te@5:

; 719  : 
; 720  :   for ( k = 0 ; k < FACET_CTRL ; k++ )

	mov	esi, DWORD PTR _web+616
	lea	edx, DWORD PTR _detgrad$[ebp]
	mov	DWORD PTR tv182[ebp], 6
$LN21@q_facet_te@5:

; 721  :      for ( j = 0 ; j < SDIM ; j++ )

	test	esi, esi
	jle	SHORT $LN20@q_facet_te@5
	mov	ecx, esi
	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	xor	eax, eax
	mov	edi, edx
	rep stosd
$LN20@q_facet_te@5:

; 719  : 
; 720  :   for ( k = 0 ; k < FACET_CTRL ; k++ )

	add	edx, 48					; 00000030H
	dec	DWORD PTR tv182[ebp]
	jne	SHORT $LN21@q_facet_te@5

; 722  :         detgrad[k][j] = 0.0;
; 723  : 
; 724  :   for ( m = 0 ; m < gauss2D_num ; m++ )  /*  integration point number */

	xor	edi, edi
	mov	DWORD PTR _m$[ebp], edi
	cmp	DWORD PTR _gauss2D_num, edi
	jle	$LN13@q_facet_te@5
$LL84@q_facet_te@5:

; 725  :   { REAL **tang = f_info->sides[m]; 

	mov	edx, DWORD PTR [ebx+1276]
	fstp	ST(0)
	mov	ebx, DWORD PTR [edx+edi*4]

; 726  :      /* calculate tangents and det */ 
; 727  :      ss = SDIM_dot(tang[0],tang[0]);

	mov	eax, DWORD PTR [ebx]
	push	esi
	push	eax
	push	eax
	mov	DWORD PTR _tang$89529[ebp], ebx
	call	_dot
	fstp	QWORD PTR _ss$[ebp]

; 728  :      st = SDIM_dot(tang[0],tang[1]);

	mov	eax, DWORD PTR _web+616
	mov	ecx, DWORD PTR [ebx+4]
	mov	edx, DWORD PTR [ebx]
	push	eax
	push	ecx
	push	edx
	call	_dot
	fstp	QWORD PTR _st$[ebp]

; 729  :      tt = SDIM_dot(tang[1],tang[1]);

	mov	ecx, DWORD PTR _web+616
	mov	eax, DWORD PTR [ebx+4]
	push	ecx
	push	eax
	push	eax
	call	_dot

; 730  :      det = ss*tt - st*st;

	fld	ST(0)
	fld	QWORD PTR _ss$[ebp]

; 731  :      value += gauss2Dwt[m]*det;

	mov	edx, DWORD PTR _gauss2Dwt
	mov	esi, DWORD PTR _web+616
	fmul	ST(1), ST(0)
	fld	QWORD PTR _st$[ebp]
	add	esp, 36					; 00000024H
	fld	ST(0)
	xor	eax, eax
	fmul	ST(0), ST(1)
	lea	ecx, DWORD PTR _detgrad$[ebp+8]
	mov	DWORD PTR tv2957[ebp], eax
	mov	DWORD PTR tv2959[ebp], eax
	fsubp	ST(3), ST(0)
	mov	DWORD PTR tv3016[ebp], ecx
	fxch	ST(2)
	fmul	QWORD PTR [edx+edi*8]
	fadd	QWORD PTR _value$[ebp]
	fst	QWORD PTR _value$[ebp]
$LN44@q_facet_te@5:

; 735  :         for ( j = 0 ; j < SDIM ; j++ )

	xor	edx, edx
	mov	DWORD PTR _j$[ebp], edx
	cmp	esi, 4
	jl	$LC40@q_facet_te@5

; 732  : 
; 733  :      /* gradients */
; 734  :      for ( k = 0 ; k < FACET_CTRL ; k++ )

	mov	ecx, DWORD PTR [ebx]
	mov	edx, DWORD PTR _gpolypartial
	mov	edi, DWORD PTR [edx+edi*4]

; 735  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	edx, DWORD PTR [edi]
	mov	esi, DWORD PTR [edi+4]
	mov	ebx, DWORD PTR [ebx+4]
	mov	DWORD PTR tv1673[ebp], ecx

; 736  :           detgrad[k][j] += gauss2Dwt[m]*
; 737  :              (  tang[0][j]*gpolypartial[m][0][k]*tt
; 738  :               - tang[0][j]*gpolypartial[m][1][k]*st
; 739  :               - tang[1][j]*gpolypartial[m][0][k]*st
; 740  :               + tang[1][j]*gpolypartial[m][1][k]*ss);

	mov	edi, ecx
	sub	edi, ebx
	mov	DWORD PTR tv2556[ebp], edi
	mov	edi, DWORD PTR _web+616
	add	edi, -4					; fffffffcH
	shr	edi, 2
	inc	edi
	mov	DWORD PTR tv1614[ebp], edi
	add	ecx, 24					; 00000018H
	add	edi, edi
	add	edx, eax
	add	esi, eax
	add	edi, edi
	mov	DWORD PTR tv2370[ebp], ecx
	mov	ecx, DWORD PTR tv3016[ebp]
	mov	DWORD PTR _j$[ebp], edi
	mov	edi, DWORD PTR _m$[ebp]
	lea	eax, DWORD PTR [ebx+8]
$LN42@q_facet_te@5:
	mov	ebx, DWORD PTR tv2370[ebp]
	fld	QWORD PTR [ebx-24]
	add	eax, 32					; 00000020H
	fmul	QWORD PTR [edx]
	fmul	ST(0), ST(4)
	fld	QWORD PTR [ebx-24]
	mov	ebx, DWORD PTR _gauss2Dwt
	fmul	QWORD PTR [esi]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx]
	fmul	QWORD PTR [eax-40]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax-40]
	fmul	QWORD PTR [esi]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR tv2556[ebp]
	fadd	QWORD PTR [ecx-8]
	fstp	QWORD PTR [ecx-8]
	fld	QWORD PTR [edx]
	fmul	QWORD PTR [ebx+eax-32]
	fmul	ST(0), ST(4)
	fld	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR _gauss2Dwt
	fmul	QWORD PTR [esi]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx]
	fmul	QWORD PTR [eax-32]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [esi]
	fmul	QWORD PTR [eax-32]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR tv2370[ebp]
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	fld	QWORD PTR [ebx-8]
	fmul	QWORD PTR [edx]
	fmul	ST(0), ST(4)
	fld	QWORD PTR [ebx-8]
	mov	ebx, DWORD PTR _gauss2Dwt
	fmul	QWORD PTR [esi]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx]
	fmul	QWORD PTR [eax-24]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax-24]
	fmul	QWORD PTR [esi]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR tv2370[ebp]
	fadd	QWORD PTR [ecx+8]
	fstp	QWORD PTR [ecx+8]
	fld	QWORD PTR [edx]
	fmul	QWORD PTR [ebx]
	fmul	ST(0), ST(4)
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR _gauss2Dwt
	fmul	QWORD PTR [esi]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx]
	fmul	QWORD PTR [eax-16]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax-16]
	fmul	QWORD PTR [esi]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR [ebx+edi*8]
	fadd	QWORD PTR [ecx+16]
	fstp	QWORD PTR [ecx+16]
	add	DWORD PTR tv2370[ebp], 32		; 00000020H
	add	ecx, 32					; 00000020H
	dec	DWORD PTR tv1614[ebp]
	jne	$LN42@q_facet_te@5

; 735  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	esi, DWORD PTR _web+616
	mov	eax, DWORD PTR tv2959[ebp]
	mov	ebx, DWORD PTR _tang$89529[ebp]
	mov	edx, DWORD PTR _j$[ebp]
$LC40@q_facet_te@5:
	cmp	edx, esi
	jge	$LN11@q_facet_te@5
	mov	ecx, DWORD PTR _gpolypartial
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	esi, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+4]
	add	ecx, eax
	add	esi, eax
	mov	DWORD PTR tv2973[ebp], esi
	mov	esi, DWORD PTR [ebx+4]
	mov	DWORD PTR tv2975[ebp], ecx
	mov	ecx, DWORD PTR tv2957[ebp]
	lea	eax, DWORD PTR [esi+edx*8]
	add	ecx, edx
	mov	edx, DWORD PTR [ebx]
	sub	edx, esi
	mov	esi, DWORD PTR _web+616
	sub	esi, DWORD PTR _j$[ebp]
	lea	ecx, DWORD PTR _detgrad$[ebp+ecx*8]
	mov	DWORD PTR tv2942[ebp], esi
$LC9@q_facet_te@5:

; 736  :           detgrad[k][j] += gauss2Dwt[m]*
; 737  :              (  tang[0][j]*gpolypartial[m][0][k]*tt
; 738  :               - tang[0][j]*gpolypartial[m][1][k]*st
; 739  :               - tang[1][j]*gpolypartial[m][0][k]*st
; 740  :               + tang[1][j]*gpolypartial[m][1][k]*ss);

	mov	esi, DWORD PTR tv2973[ebp]
	fld	QWORD PTR [esi]
	mov	esi, DWORD PTR tv2975[ebp]
	fmul	QWORD PTR [edx+eax]
	add	eax, 8
	add	ecx, 8
	dec	DWORD PTR tv2942[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR [esi]
	mov	esi, DWORD PTR tv2973[ebp]
	fmul	QWORD PTR [edx+eax-8]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [esi]
	mov	esi, DWORD PTR tv2975[ebp]
	fmul	QWORD PTR [eax-8]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [esi]
	mov	esi, DWORD PTR _gauss2Dwt
	fmul	QWORD PTR [eax-8]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR [esi+edi*8]
	fadd	QWORD PTR [ecx-8]
	fstp	QWORD PTR [ecx-8]
	jne	SHORT $LC9@q_facet_te@5

; 735  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR tv2959[ebp]
	mov	esi, DWORD PTR _web+616
$LN11@q_facet_te@5:

; 732  : 
; 733  :      /* gradients */
; 734  :      for ( k = 0 ; k < FACET_CTRL ; k++ )

	add	DWORD PTR tv3016[ebp], 48		; 00000030H
	add	DWORD PTR tv2957[ebp], 6
	add	eax, 8
	mov	DWORD PTR tv2959[ebp], eax
	cmp	eax, 48					; 00000030H
	jl	$LN44@q_facet_te@5
	mov	ebx, DWORD PTR _f_info$GSCopy$[ebp]
	fstp	ST(2)
	inc	edi
	fstp	ST(2)
	fstp	ST(1)
	mov	DWORD PTR _m$[ebp], edi
	cmp	edi, DWORD PTR _gauss2D_num
	jl	$LL84@q_facet_te@5
$LN13@q_facet_te@5:

; 741  :   }
; 742  : 
; 743  :   norm = density/sqrt(value*4);

	fmul	QWORD PTR __real@4010000000000000
	call	__CIsqrt
	fdivr	QWORD PTR _density$[ebp]
	xor	edx, edx
	lea	edi, DWORD PTR _detgrad$[ebp]
$LN45@q_facet_te@5:

; 745  :      for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	test	esi, esi
	jle	SHORT $LN5@q_facet_te@5
	mov	ecx, edi
$LN3@q_facet_te@5:

; 746  :         f_info->grad[k][j] = norm*detgrad[k][j];

	fld	QWORD PTR [ecx]
	mov	esi, DWORD PTR [ebx+1336]
	mov	esi, DWORD PTR [esi+edx]
	fmul	ST(0), ST(1)
	inc	eax
	add	ecx, 8
	fstp	QWORD PTR [esi+eax*8-8]
	mov	esi, DWORD PTR _web+616
	cmp	eax, esi
	jl	SHORT $LN3@q_facet_te@5
$LN5@q_facet_te@5:

; 744  :   for ( k = 0 ; k < FACET_CTRL ; k++ )

	add	edx, 4
	add	edi, 48					; 00000030H
	cmp	edx, 24					; 00000018H
	jl	SHORT $LN45@q_facet_te@5
	fstp	ST(0)

; 747  : 
; 748  :   return density*sqrt(value)/2;

	fld	QWORD PTR _value$[ebp]
	call	__CIsqrt
	fmul	QWORD PTR _density$[ebp]

; 749  : 
; 750  : } // end q_facet_tension_uq_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	fmul	QWORD PTR __real@3fe0000000000000
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_q_facet_tension_uq_grad ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_q_facet_tension_uq_hess
EXTRN	__chkstk:PROC
; Function compile flags: /Ogtp
;	COMDAT _q_facet_tension_uq_hess
_TEXT	SEGMENT
_aaqXvS$ = -12444					; size = 456
_atqXvS$ = -11988					; size = 8
_ainvqXvS$ = -11980					; size = 8
_tt$ = -11972						; size = 8
_ss$ = -11964						; size = 8
_st$ = -11956						; size = 8
_density$ = -11948					; size = 8
_aa$ = -11940						; size = 4
_value$ = -11936					; size = 8
_ainv$ = -11928						; size = 4
_f_info$GSCopy$ = -11924				; size = 4
tv2786 = -11920						; size = 4
tv2021 = -11920						; size = 4
_at$ = -11916						; size = 4
_p$89596 = -11912					; size = 4
tv1724 = -11908						; size = 4
tv1193 = -11908						; size = 4
tv1804 = -11904						; size = 4
_jj$ = -11904						; size = 4
tv2744 = -11900						; size = 4
tv1830 = -11900						; size = 4
tv1200 = -11900						; size = 4
tv2746 = -11896						; size = 4
_tang$89597 = -11896					; size = 4
tv1863 = -11892						; size = 4
_j$ = -11892						; size = 4
tv2010 = -11888						; size = 4
tv1861 = -11888						; size = 4
tv1018 = -11888						; size = 4
_m$ = -11884						; size = 4
_kk$ = -11884						; size = 4
tv2730 = -11880						; size = 4
tv2156 = -11880						; size = 4
tv1797 = -11880						; size = 4
tv1599 = -11880						; size = 4
tv1160 = -11880						; size = 4
_dethess$ = -11876					; size = 10368
_aaxJ$ = -1508						; size = 1152
_detgrad$ = -356					; size = 288
_ainvxJ$ = -68						; size = 32
_atxJ$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_q_facet_tension_uq_hess PROC				; COMDAT

; 759  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 12444				; 0000309cH
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 760  :   REAL value = 0.0;

	fldz
	push	ebx
	push	esi
	fstp	QWORD PTR _value$[ebp]
	mov	esi, DWORD PTR _f_info$[ebp]
	push	edi

; 761  :   int m,j,jj,k,kk,r,q;
; 762  :   REAL det,norm;
; 763  :   REAL st,ss,tt;
; 764  :   MAT2D(at,2,2);

	push	2
	push	2
	lea	eax, DWORD PTR _atxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _atqXvS$[ebp]
	push	ecx
	mov	DWORD PTR _f_info$GSCopy$[ebp], esi
	call	_mat2d_setup

; 765  :   MAT2D(ainv,2,2);

	push	2
	push	2
	lea	edx, DWORD PTR _ainvxJ$[ebp]
	mov	DWORD PTR _at$[ebp], eax
	push	edx
	lea	eax, DWORD PTR _ainvqXvS$[ebp]
	push	eax
	call	_mat2d_setup

; 766  :   MAT4D(aa,FACET_CTRL,MAXCOORD,2,2);

	push	2
	push	2
	push	6
	push	6
	lea	ecx, DWORD PTR _aaxJ$[ebp]
	push	ecx
	lea	edx, DWORD PTR _aaqXvS$[ebp]
	push	edx
	mov	DWORD PTR _ainv$[ebp], eax
	call	_mat4d_setup

; 767  :   REAL detgrad[FACET_CTRL][MAXCOORD];
; 768  :   REAL dethess[FACET_CTRL][FACET_CTRL][MAXCOORD][MAXCOORD];
; 769  :   REAL density = 1.0;

	fld1

; 770  : 
; 771  :   if ( METH_INSTANCE(f_info->method)->flags & USE_DENSITY )

	mov	ecx, DWORD PTR _meth_inst_list
	fstp	QWORD PTR _density$[ebp]
	mov	DWORD PTR _aa$[ebp], eax
	mov	eax, DWORD PTR [esi+8]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	esp, 56					; 00000038H
	test	DWORD PTR [eax+ecx+140], 536870912	; 20000000H
	je	SHORT $LN65@q_facet_te@6

; 772  :       density = get_facet_density(f_info->id);

	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR _web+236
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	fld	QWORD PTR [ecx+32]
	fstp	QWORD PTR _density$[ebp]
$LN65@q_facet_te@6:

; 773  :      
; 774  :   for ( k = 0 ; k < FACET_CTRL ; k++ )

	lea	edx, DWORD PTR _detgrad$[ebp]
	mov	esi, 6
$LL64@q_facet_te@6:

; 775  :      for ( j = 0 ; j < SDIM ; j++ )

	mov	ebx, DWORD PTR _web+616
	test	ebx, ebx
	jle	SHORT $LN63@q_facet_te@6
	mov	ecx, ebx
	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	xor	eax, eax
	mov	edi, edx
	rep stosd
$LN63@q_facet_te@6:

; 773  :      
; 774  :   for ( k = 0 ; k < FACET_CTRL ; k++ )

	add	edx, 48					; 00000030H
	dec	esi
	jne	SHORT $LL64@q_facet_te@6

; 776  :         detgrad[k][j] = 0.0;
; 777  : 
; 778  :   for ( k = 0 ; k < FACET_CTRL ; k++ )

	xor	eax, eax
	mov	DWORD PTR tv1599[ebp], eax
	npad	8
$LL136@q_facet_te@6:

; 779  :      for ( kk = 0 ; kk < FACET_CTRL ; kk++ )

	xor	ecx, ecx
	mov	DWORD PTR _kk$[ebp], ecx
$LL137@q_facet_te@6:

; 780  :         for ( j = 0 ; j < SDIM ; j++ )

	test	ebx, ebx
	jle	SHORT $LN54@q_facet_te@6
	add	eax, ecx
	lea	edx, DWORD PTR [eax+eax*8]
	shl	edx, 5
	lea	edx, DWORD PTR _dethess$[ebp+edx]
	mov	esi, ebx
	npad	3
$LL52@q_facet_te@6:

; 781  :          for ( jj = 0 ; jj < SDIM ; jj++ )

	lea	ecx, DWORD PTR [ebx*8]
	mov	edi, edx
	shr	ecx, 2
	xor	eax, eax
	add	edx, 48					; 00000030H
	dec	esi
	rep stosd
	jne	SHORT $LL52@q_facet_te@6

; 780  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR _kk$[ebp]
	mov	eax, DWORD PTR tv1599[ebp]
$LN54@q_facet_te@6:

; 779  :      for ( kk = 0 ; kk < FACET_CTRL ; kk++ )

	inc	ecx
	mov	DWORD PTR _kk$[ebp], ecx
	cmp	ecx, 6
	jl	SHORT $LL137@q_facet_te@6

; 776  :         detgrad[k][j] = 0.0;
; 777  : 
; 778  :   for ( k = 0 ; k < FACET_CTRL ; k++ )

	add	eax, 6
	mov	DWORD PTR tv1599[ebp], eax
	cmp	eax, 36					; 00000024H
	jl	SHORT $LL136@q_facet_te@6

; 782  :             dethess[k][kk][j][jj] = 0.0;
; 783  : 
; 784  :   for ( m = 0 ; m < gauss2D_num ; m++ )  /*  integration point number */

	fld	QWORD PTR __real@4010000000000000
	xor	esi, esi
	mov	DWORD PTR _m$[ebp], esi
	cmp	DWORD PTR _gauss2D_num, esi
	jle	$LN124@q_facet_te@6
	jmp	SHORT $LN194@q_facet_te@6
	npad	8
$LL191@q_facet_te@6:
	mov	esi, DWORD PTR _m$[ebp]
$LN194@q_facet_te@6:

; 785  :   { REAL **p = gpolypartial[m];

	mov	edx, DWORD PTR _gpolypartial
	fstp	ST(0)
	mov	eax, DWORD PTR [edx+esi*4]

; 786  :      REAL **tang = f_info->sides[m];

	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [ecx+1276]
	mov	edi, DWORD PTR [edx+esi*4]
	mov	DWORD PTR _p$89596[ebp], eax

; 787  :      /* calculate tangents and det */ 
; 788  :      ss = SDIM_dot(tang[0],tang[0]);

	mov	eax, DWORD PTR [edi]
	push	ebx
	push	eax
	push	eax
	mov	DWORD PTR _tang$89597[ebp], edi
	call	_dot
	fstp	QWORD PTR _ss$[ebp]

; 789  :      st = SDIM_dot(tang[0],tang[1]);

	mov	eax, DWORD PTR _web+616
	mov	ecx, DWORD PTR [edi+4]
	mov	edx, DWORD PTR [edi]
	push	eax
	push	ecx
	push	edx
	call	_dot
	fstp	QWORD PTR _st$[ebp]

; 790  :      tt = SDIM_dot(tang[1],tang[1]);

	mov	ecx, DWORD PTR _web+616
	mov	eax, DWORD PTR [edi+4]
	push	ecx
	push	eax
	push	eax
	call	_dot
	fst	QWORD PTR _tt$[ebp]

; 791  :      det = ss*tt - st*st;
; 792  :      value += gauss2Dwt[m]*det;

	mov	edx, DWORD PTR _gauss2Dwt
	fld	ST(0)
	fld	QWORD PTR _ss$[ebp]

; 793  : 
; 794  :      ainv[0][0] = tt/det;

	mov	ecx, DWORD PTR _ainv$[ebp]
	fmul	ST(1), ST(0)
	mov	eax, DWORD PTR [ecx]
	fld	QWORD PTR _st$[ebp]

; 795  :      ainv[0][1] = ainv[1][0] = -st/det;

	mov	ecx, DWORD PTR [ecx+4]
	fld	ST(0)
	add	esp, 36					; 00000024H
	fmul	ST(0), ST(1)
	xor	ebx, ebx
	fsubp	ST(3), ST(0)
	fld	QWORD PTR [edx+esi*8]
	fmul	ST(0), ST(3)
	fadd	QWORD PTR _value$[ebp]
	fstp	QWORD PTR _value$[ebp]
	fld	ST(3)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR [eax]
	fdiv	ST(0), ST(2)
	fchs
	fst	QWORD PTR [ecx]
	fstp	QWORD PTR [eax+8]
	lea	eax, DWORD PTR _detgrad$[ebp]
	mov	DWORD PTR tv1861[ebp], eax

; 796  :      ainv[1][1] = ss/det;

	fdivrp	ST(1), ST(0)
	fstp	QWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _aa$[ebp]
	mov	DWORD PTR tv1863[ebp], ecx
$LN131@q_facet_te@6:

; 800  :         for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	cmp	DWORD PTR _web+616, esi
	jle	$LN42@q_facet_te@6
	mov	edx, DWORD PTR tv1861[ebp]
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR tv1724[ebp], edx
$LL193@q_facet_te@6:
	mov	ecx, DWORD PTR _gpolypartial
	fstp	ST(0)
	mov	edx, DWORD PTR _m$[ebp]
	lea	ecx, DWORD PTR [ecx+edx*4]

; 801  :         { for ( r = 0 ; r < 2 ; r++ )
; 802  :             for ( q = 0 ; q < 2; q++ )
; 803  :               at[r][q] = tang[r][j]*gpolypartial[m][q][k] +
; 804  :                   tang[q][j]*gpolypartial[m][r][k];

	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+ebx]
	mov	edx, DWORD PTR _at$[ebp]
	fmul	QWORD PTR [eax+esi*8]
	mov	edx, DWORD PTR [edx]

; 805  :           mat_mult(at,ainv,aa[k][j],2,2,2);

	push	2
	push	2
	fadd	ST(0), ST(0)
	push	2
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+4]
	add	edx, ebx
	add	ecx, ebx
	mov	DWORD PTR tv1804[ebp], edx
	mov	DWORD PTR tv1797[ebp], ecx
	mov	ecx, DWORD PTR [edi+4]
	mov	edx, DWORD PTR tv1797[ebp]
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR tv1804[ebp]
	fmul	QWORD PTR [ecx+esi*8]
	lea	ecx, DWORD PTR [ecx+esi*8]
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR _at$[ebp]
	fmul	QWORD PTR [eax+esi*8]
	mov	edx, DWORD PTR [edx]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [edx+8]
	mov	edx, DWORD PTR tv1797[ebp]
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR tv1804[ebp]
	fmul	QWORD PTR [ecx]
	fld	QWORD PTR [edx]
	fmul	QWORD PTR [eax+esi*8]
	mov	eax, DWORD PTR _at$[ebp]
	mov	eax, DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [eax]
	fld	QWORD PTR [edx]
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv1863[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ainv$[ebp]
	fadd	ST(0), ST(0)
	fstp	QWORD PTR [eax+8]
	mov	eax, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR _at$[ebp]
	push	eax
	push	ecx
	push	edx
	call	_mat_mult

; 806  : 
; 807  :           detgrad[k][j] += gauss2Dwt[m]
; 808  :              *(p[0][k]*tang[0][j]*tt +  ss*p[1][k]*tang[1][j]
; 809  :                   - st*(p[0][k]*tang[1][j] + tang[0][j]*p[1][k]));

	mov	edx, DWORD PTR _p$89596[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edi+4]
	fld	QWORD PTR [edx+ebx]
	lea	eax, DWORD PTR [eax+esi*8]
	add	esp, 24					; 00000018H
	add	edx, ebx
	mov	DWORD PTR tv1160[ebp], eax
	mov	eax, DWORD PTR [edi]
	fmul	QWORD PTR [eax+esi*8]
	mov	DWORD PTR tv1830[ebp], edx
	fld	QWORD PTR _tt$[ebp]
	mov	edx, DWORD PTR tv1160[ebp]
	fmul	ST(1), ST(0)
	fld	QWORD PTR [ecx+ebx]
	fmul	QWORD PTR _ss$[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv1830[ebp]
	faddp	ST(2), ST(0)
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR tv1160[ebp]
	fmul	QWORD PTR [edx]
	fld	QWORD PTR [ecx+ebx]
	fmul	QWORD PTR [eax+esi*8]
	mov	ecx, DWORD PTR _gauss2Dwt
	mov	edx, DWORD PTR _m$[ebp]
	inc	esi
	faddp	ST(1), ST(0)
	fmul	QWORD PTR _st$[ebp]
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR tv1724[ebp]
	add	ecx, 8
	mov	DWORD PTR tv1724[ebp], ecx
	fadd	QWORD PTR [ecx-8]
	fstp	QWORD PTR [ecx-8]
	cmp	esi, DWORD PTR _web+616
	jl	$LL193@q_facet_te@6
$LN42@q_facet_te@6:

; 797  : 
; 798  :      /* gradients */
; 799  :      for ( k = 0 ; k < FACET_CTRL ; k++ )

	add	DWORD PTR tv1863[ebp], 4
	add	DWORD PTR tv1861[ebp], 48		; 00000030H
	add	ebx, 8
	cmp	ebx, 48					; 00000030H
	jl	$LN131@q_facet_te@6

; 810  :         }
; 811  : 
; 812  :      /* hessians */
; 813  :      for ( k = 0 ; k < FACET_CTRL ; k++ )

	fld	QWORD PTR __real@4000000000000000
	xor	edx, edx
	fld	QWORD PTR __real@4010000000000000
	mov	DWORD PTR tv2156[ebp], edx
$LN128@q_facet_te@6:

; 814  :       for ( kk = 0 ; kk < FACET_CTRL ; kk++ )

	xor	eax, eax
$LN129@q_facet_te@6:

; 815  :         for ( j = 0 ; j < SDIM ; j++ )

	xor	ebx, ebx
	mov	DWORD PTR _j$[ebp], ebx
	cmp	DWORD PTR _web+616, ebx
	jle	$LN27@q_facet_te@6
$LN25@q_facet_te@6:
	mov	esi, DWORD PTR [edi]

; 816  :          for ( jj = 0 ; jj < SDIM ; jj++ )

	mov	ecx, DWORD PTR _p$89596[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	edi, DWORD PTR [edi+4]
	fld	QWORD PTR [ecx+edx]
	fmul	ST(0), ST(1)
	mov	DWORD PTR tv1193[ebp], edi
	mov	DWORD PTR tv1018[ebp], esi
	mov	DWORD PTR _jj$[ebp], 0
	fmul	QWORD PTR [esi+ebx*8]
	mov	esi, DWORD PTR _p$89596[ebp]
	fld	QWORD PTR [edi+ebx*8]
	mov	esi, DWORD PTR [esi+4]
	fmul	QWORD PTR [ecx+edx]
	mov	edi, DWORD PTR tv2156[ebp]
	fld	QWORD PTR [esi+edx]
	add	edi, eax
	lea	edi, DWORD PTR [edi+edi*2]
	mov	DWORD PTR tv1200[ebp], esi
	mov	esi, DWORD PTR tv1018[ebp]
	fmul	QWORD PTR [esi+ebx*8]
	lea	ebx, DWORD PTR [ebx+edi*2]
	lea	edi, DWORD PTR [ebx+ebx*2]
	mov	ebx, DWORD PTR _tang$89597[ebp]
	add	edi, edi
	faddp	ST(1), ST(0)
	lea	edi, DWORD PTR _dethess$[ebp+edi*8]
	mov	DWORD PTR tv2010[ebp], edi
	mov	edi, DWORD PTR tv1193[ebp]
	sub	edi, DWORD PTR [ebx]
	mov	DWORD PTR tv2021[ebp], edi
$LN22@q_facet_te@6:

; 817  :          {  dethess[k][kk][j][jj] += gauss2Dwt[m]*
; 818  :             ( 4*p[0][k]*tang[0][j]*tang[1][jj]*p[1][kk]
; 819  :              + 4*tang[0][jj]*p[0][kk]*p[1][k]*tang[1][j]
; 820  :              - 2*(p[0][kk]*tang[1][jj]+tang[0][jj]*p[1][kk])
; 821  :                  *(p[0][k]*tang[1][j]+tang[0][j]*p[1][k]));

	fld	QWORD PTR [esi]
	mov	edi, DWORD PTR tv1200[ebp]
	mov	ebx, DWORD PTR _j$[ebp]
	fmul	ST(0), ST(3)
	fmul	QWORD PTR [ecx+eax*8]
	fmul	QWORD PTR [edi+edx]
	mov	edi, DWORD PTR tv1193[ebp]
	fmul	QWORD PTR [edi+ebx*8]
	mov	ebx, DWORD PTR tv2021[ebp]
	fld	QWORD PTR [ebx+esi]
	mov	edi, DWORD PTR tv1200[ebp]
	fmul	ST(0), ST(3)
	fmul	QWORD PTR [edi+eax*8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+esi]
	mov	ebx, DWORD PTR _m$[ebp]
	fmul	QWORD PTR [ecx+eax*8]
	fld	QWORD PTR [edi+eax*8]
	mov	edi, DWORD PTR _gauss2Dwt
	fmul	QWORD PTR [esi]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [edi+ebx*8]
	mov	edi, DWORD PTR tv2010[ebp]
	fadd	QWORD PTR [edi]
	fld	ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [edi]

; 822  :              if ( j == jj )

	mov	edi, DWORD PTR _j$[ebp]
	cmp	edi, DWORD PTR _jj$[ebp]
	jne	$LN178@q_facet_te@6

; 823  :               dethess[k][kk][j][jj] += gauss2Dwt[m]*
; 824  :               ( 2*p[0][k]*p[0][kk]*tt + 2*ss*p[1][k]*p[1][kk]
; 825  :                  - 2*st*(p[0][k]*p[1][kk] + p[0][kk]*p[1][k]) );

	fld	QWORD PTR [ecx+edx]
	mov	edi, DWORD PTR _p$89596[ebp]
	mov	edi, DWORD PTR [edi+4]
	fmul	ST(0), ST(5)
	fmul	QWORD PTR [ecx+eax*8]
	fmulp	ST(6), ST(0)
	fld	QWORD PTR _ss$[ebp]
	fmul	ST(0), ST(5)
	fmul	QWORD PTR [edi+edx]
	fmul	QWORD PTR [edi+eax*8]
	faddp	ST(6), ST(0)
	fld	QWORD PTR [edi+eax*8]
	fmul	QWORD PTR [ecx+edx]
	fld	QWORD PTR [ecx+eax*8]
	fmul	QWORD PTR [edi+edx]
	mov	edi, DWORD PTR _gauss2Dwt
	faddp	ST(1), ST(0)
	fld	QWORD PTR _st$[ebp]
	fmul	ST(0), ST(6)
	fmulp	ST(1), ST(0)
	fsubp	ST(6), ST(0)
	fxch	ST(5)
	fmul	QWORD PTR [edi+ebx*8]
	mov	edi, DWORD PTR tv2010[ebp]
	faddp	ST(5), ST(0)
	fxch	ST(4)
	fstp	QWORD PTR [edi]
	fld	QWORD PTR _tt$[ebp]
	fxch	ST(4)
$LN21@q_facet_te@6:

; 816  :          for ( jj = 0 ; jj < SDIM ; jj++ )

	mov	ebx, DWORD PTR _jj$[ebp]
	mov	edi, DWORD PTR _web+616
	add	DWORD PTR tv2010[ebp], 8
	inc	ebx
	add	esi, 8
	mov	DWORD PTR _jj$[ebp], ebx
	cmp	ebx, edi
	jl	$LN22@q_facet_te@6
	mov	ebx, DWORD PTR _j$[ebp]
	fstp	ST(1)
	inc	ebx
	fstp	ST(0)
	cmp	ebx, edi
	mov	edi, DWORD PTR _tang$89597[ebp]
	mov	DWORD PTR _j$[ebp], ebx
	jl	$LN25@q_facet_te@6
$LN27@q_facet_te@6:

; 814  :       for ( kk = 0 ; kk < FACET_CTRL ; kk++ )

	inc	eax
	cmp	eax, 6
	jl	$LN129@q_facet_te@6

; 810  :         }
; 811  : 
; 812  :      /* hessians */
; 813  :      for ( k = 0 ; k < FACET_CTRL ; k++ )

	add	DWORD PTR tv2156[ebp], 6
	add	edx, 8
	cmp	edx, 48					; 00000030H
	jl	$LN128@q_facet_te@6
	mov	eax, DWORD PTR _m$[ebp]
	fstp	ST(1)
	mov	ebx, DWORD PTR _web+616
	fstp	ST(1)
	inc	eax
	mov	DWORD PTR _m$[ebp], eax
	cmp	eax, DWORD PTR _gauss2D_num
	jl	$LL191@q_facet_te@6
$LN124@q_facet_te@6:

; 826  :           }
; 827  :   } /* end gauss pt loop */
; 828  : 
; 829  :   /* gradients */
; 830  :   norm = density/sqrt(value*4);

	fmul	QWORD PTR _value$[ebp]
	call	__CIsqrt
	fdivr	QWORD PTR _density$[ebp]
	xor	edx, edx
	lea	esi, DWORD PTR _detgrad$[ebp]
$LN18@q_facet_te@6:

; 832  :      for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	test	ebx, ebx
	jle	SHORT $LN17@q_facet_te@6
	mov	ecx, esi
$LN15@q_facet_te@6:

; 833  :         f_info->grad[k][j] = norm*detgrad[k][j];

	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	fld	ST(0)
	fmul	QWORD PTR [ecx]
	mov	edi, DWORD PTR [edi+1336]
	mov	edi, DWORD PTR [edx+edi]
	inc	eax
	fstp	QWORD PTR [edi+eax*8-8]
	add	ecx, 8
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN15@q_facet_te@6

; 832  :      for ( j = 0 ; j < SDIM ; j++ )

	mov	ebx, DWORD PTR _web+616
$LN17@q_facet_te@6:

; 831  :   for ( k = 0 ; k < FACET_CTRL ; k++ )

	add	edx, 4
	add	esi, 48					; 00000030H
	cmp	edx, 24					; 00000018H
	jl	SHORT $LN18@q_facet_te@6

; 834  : 
; 835  :   /* hessians */
; 836  :   for ( k = 0 ; k < FACET_CTRL ; k++ )

	fld	QWORD PTR __real@3fe0000000000000
	xor	ecx, ecx
	fld	QWORD PTR _value$[ebp]
	mov	DWORD PTR tv2744[ebp], ecx
	mov	DWORD PTR tv2746[ebp], ecx
$LN132@q_facet_te@6:

; 837  :     for ( kk = 0 ; kk < FACET_CTRL ; kk++ )

	xor	edi, edi
	lea	edx, DWORD PTR _detgrad$[ebp]
	mov	DWORD PTR _kk$[ebp], edi
	mov	DWORD PTR tv2730[ebp], edx
$LN133@q_facet_te@6:

; 838  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	test	ebx, ebx
	jle	$LN8@q_facet_te@6
$LN135@q_facet_te@6:

; 839  :          for ( jj = 0 ; jj < SDIM ; jj++ )

	xor	eax, eax
	test	ebx, ebx
	jle	$LN5@q_facet_te@6
	lea	edx, DWORD PTR [ecx+esi]
	add	ecx, edi
	lea	ecx, DWORD PTR [ecx+ecx*2]
	lea	ecx, DWORD PTR [esi+ecx*2]
	lea	ecx, DWORD PTR [ecx+ecx*2]
	lea	edx, DWORD PTR _detgrad$[ebp+edx*8]
	add	ecx, ecx
	mov	DWORD PTR tv2786[ebp], edx
	mov	edx, DWORD PTR tv2730[ebp]
	lea	ecx, DWORD PTR _dethess$[ebp+ecx*8]
$LN134@q_facet_te@6:

; 840  :              f_info->hess[k][kk][j][jj] = norm*
; 841  :              (0.5*dethess[k][kk][j][jj] - detgrad[k][j]*detgrad[kk][jj]/value);

	fld	QWORD PTR [ecx]
	mov	edi, DWORD PTR tv2786[ebp]
	fmul	ST(0), ST(2)
	mov	ebx, DWORD PTR tv2746[ebp]
	fld	QWORD PTR [edx]
	inc	eax
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edi, DWORD PTR [edi+1340]
	mov	ebx, DWORD PTR [ebx+edi]
	fdiv	ST(0), ST(2)
	mov	edi, DWORD PTR _kk$[ebp]
	mov	ebx, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR [ebx+esi*4]
	add	ecx, 8
	add	edx, 8
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fstp	QWORD PTR [ebx+eax*8-8]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN134@q_facet_te@6

; 839  :          for ( jj = 0 ; jj < SDIM ; jj++ )

	mov	ebx, DWORD PTR _web+616
	mov	ecx, DWORD PTR tv2744[ebp]
$LN5@q_facet_te@6:

; 838  :       for ( j = 0 ; j < SDIM ; j++ )

	inc	esi
	cmp	esi, ebx
	jl	$LN135@q_facet_te@6
$LN8@q_facet_te@6:

; 837  :     for ( kk = 0 ; kk < FACET_CTRL ; kk++ )

	add	DWORD PTR tv2730[ebp], 48		; 00000030H
	inc	edi
	mov	DWORD PTR _kk$[ebp], edi
	cmp	edi, 6
	jl	$LN133@q_facet_te@6

; 834  : 
; 835  :   /* hessians */
; 836  :   for ( k = 0 ; k < FACET_CTRL ; k++ )

	mov	eax, DWORD PTR tv2746[ebp]
	add	eax, 4
	add	ecx, 6
	mov	DWORD PTR tv2746[ebp], eax
	mov	DWORD PTR tv2744[ebp], ecx
	cmp	eax, 24					; 00000018H
	jl	$LN132@q_facet_te@6
	fstp	ST(2)
	fstp	ST(0)

; 842  : 
; 843  :   return density*sqrt(value)/2; 

	call	__CIsqrt
	fmul	QWORD PTR _density$[ebp]

; 844  : 
; 845  : } // end q_facet_tension_uq_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	fmul	QWORD PTR __real@3fe0000000000000
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN178@q_facet_te@6:

; 823  :               dethess[k][kk][j][jj] += gauss2Dwt[m]*
; 824  :               ( 2*p[0][k]*p[0][kk]*tt + 2*ss*p[1][k]*p[1][kk]
; 825  :                  - 2*st*(p[0][k]*p[1][kk] + p[0][kk]*p[1][k]) );

	fstp	ST(0)

; 822  :              if ( j == jj )

	jmp	$LN21@q_facet_te@6
_q_facet_tension_uq_hess ENDP
_TEXT	ENDS
PUBLIC	_q_facet_volume_q
; Function compile flags: /Ogtp
;	COMDAT _q_facet_volume_q
_TEXT	SEGMENT
tv217 = -24						; size = 4
tv216 = -20						; size = 4
tv206 = -16						; size = 4
tv198 = -12						; size = 4
tv192 = -8						; size = 4
tv187 = -4						; size = 4
_f_info$ = 8						; size = 4
_q_facet_volume_q PROC					; COMDAT

; 859  : { 

	push	ebp
	mov	ebp, esp

; 860  :   REAL vol = 0.0;

	fldz
	sub	esp, 24					; 00000018H
	push	esi
	fld	ST(0)

; 861  :   int m,i;
; 862  : 
; 863  :   /* volume, integral of z dx dy */
; 864  :   for ( m = 0 ; m < gauss2D_num ; m++ )

	xor	esi, esi
	cmp	DWORD PTR _gauss2D_num, esi
	jle	$LN22@q_facet_vo

; 860  :   REAL vol = 0.0;

	mov	eax, DWORD PTR _f_info$[ebp]
	mov	ecx, DWORD PTR [eax+416]
	mov	edx, DWORD PTR [eax+420]
	mov	DWORD PTR tv187[ebp], ecx
	mov	ecx, DWORD PTR [eax+424]
	mov	DWORD PTR tv192[ebp], edx
	mov	edx, DWORD PTR [eax+428]
	mov	DWORD PTR tv198[ebp], ecx
	mov	ecx, DWORD PTR [eax+432]
	push	ebx
	push	edi

; 861  :   int m,i;
; 862  : 
; 863  :   /* volume, integral of z dx dy */
; 864  :   for ( m = 0 ; m < gauss2D_num ; m++ )

	mov	edi, DWORD PTR [eax+1276]
	mov	DWORD PTR tv206[ebp], edx
	mov	edx, DWORD PTR [eax+436]
	mov	DWORD PTR tv216[ebp], ecx
	mov	ecx, DWORD PTR _gpoly
	mov	DWORD PTR tv217[ebp], edx
	sub	edi, ecx
$LN20@q_facet_vo:

; 865  :   { REAL **t = f_info->sides[m];
; 866  :      REAL z;
; 867  :      for ( z = 0., i = 0 ; i < FACET_CTRL ; i++ ) 
; 868  :         z += gpoly[m][i]*f_info->x[i][2];

	mov	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax]
	mov	ebx, DWORD PTR tv187[ebp]
	fmul	QWORD PTR [ebx+16]
	mov	ebx, DWORD PTR tv192[ebp]
	mov	edx, DWORD PTR [edi+ecx]
	inc	esi
	fadd	ST(0), ST(2)
	add	ecx, 4
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [ebx+16]
	mov	ebx, DWORD PTR tv198[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax+16]
	fmul	QWORD PTR [ebx+16]
	mov	ebx, DWORD PTR tv206[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax+24]
	fmul	QWORD PTR [ebx+16]
	mov	ebx, DWORD PTR tv216[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax+32]
	fmul	QWORD PTR [ebx+16]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax+40]
	mov	eax, DWORD PTR tv217[ebp]
	fmul	QWORD PTR [eax+16]

; 869  :      vol += gauss2Dwt[m]*z*(t[0][0]*t[1][1]-t[0][1]*t[1][0]);

	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [edx]
	fld	QWORD PTR [edx+8]
	mov	edx, DWORD PTR _gauss2Dwt
	fmul	QWORD PTR [eax]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx+esi*8-8]
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	cmp	esi, DWORD PTR _gauss2D_num
	jl	SHORT $LN20@q_facet_vo
	pop	edi
	pop	ebx
$LN22@q_facet_vo:

; 861  :   int m,i;
; 862  : 
; 863  :   /* volume, integral of z dx dy */
; 864  :   for ( m = 0 ; m < gauss2D_num ; m++ )

	fstp	ST(1)
	pop	esi

; 870  :   }
; 871  :   return vol/2;

	fmul	QWORD PTR __real@3fe0000000000000

; 872  : 
; 873  : } /* end q_facet_volume_q() */

	mov	esp, ebp
	pop	ebp
	ret	0
_q_facet_volume_q ENDP
_TEXT	ENDS
PUBLIC	_q_facet_volume_q_grad
; Function compile flags: /Ogtp
;	COMDAT _q_facet_volume_q_grad
_TEXT	SEGMENT
tv2300 = -16						; size = 4
tv2261 = -12						; size = 4
tv2142 = -8						; size = 4
tv2448 = -4						; size = 4
_f_info$ = 8						; size = 4
_q_facet_volume_q_grad PROC				; COMDAT

; 883  : { 

	push	ebp
	mov	ebp, esp

; 884  :   REAL vol = 0.0;

	fldz
	sub	esp, 16					; 00000010H
	push	ebx
	fld	ST(0)
	push	esi

; 885  :   int i,j,k;
; 886  :   REAL **x = f_info->x;

	mov	esi, DWORD PTR _f_info$[ebp]
	push	edi
	lea	edx, DWORD PTR [esi+416]
	mov	eax, OFFSET _vcoeff+8
$LN26@q_facet_vo@2:

; 891  :      for ( j = 0 ; j < FACET_CTRL ; j++ )

	xor	ecx, ecx
	mov	ebx, eax
$LN23@q_facet_vo@2:

; 892  :         for ( k = 0 ; k < FACET_CTRL ; k++ )
; 893  :         { v = vcoeff[i][j][k];

	fld	QWORD PTR [ebx-8]

; 894  :           if ( v == 0.0 ) continue;

	fld	ST(0)
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN62@q_facet_vo@2

; 895  :           vol += v*x[i][2]*(x[j][0]*x[k][1]-x[j][1]*x[k][0]);

	mov	edi, DWORD PTR [esi+416]
	mov	eax, DWORD PTR [esi+ecx*4+416]
	fld	QWORD PTR [edi+8]
	fmul	QWORD PTR [eax]
	fld	QWORD PTR [eax+8]
	mov	eax, DWORD PTR [edx]
	fmul	QWORD PTR [edi]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+16]
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN19@q_facet_vo@2
$LN62@q_facet_vo@2:
	fstp	ST(0)
$LN19@q_facet_vo@2:

; 892  :         for ( k = 0 ; k < FACET_CTRL ; k++ )
; 893  :         { v = vcoeff[i][j][k];

	fld	QWORD PTR [ebx]

; 894  :           if ( v == 0.0 ) continue;

	fld	ST(0)
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN65@q_facet_vo@2

; 895  :           vol += v*x[i][2]*(x[j][0]*x[k][1]-x[j][1]*x[k][0]);

	mov	edi, DWORD PTR [esi+420]
	mov	eax, DWORD PTR [esi+ecx*4+416]
	fld	QWORD PTR [edi+8]
	fmul	QWORD PTR [eax]
	fld	QWORD PTR [eax+8]
	mov	eax, DWORD PTR [edx]
	fmul	QWORD PTR [edi]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+16]
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN49@q_facet_vo@2
$LN65@q_facet_vo@2:
	fstp	ST(0)
$LN49@q_facet_vo@2:

; 892  :         for ( k = 0 ; k < FACET_CTRL ; k++ )
; 893  :         { v = vcoeff[i][j][k];

	fld	QWORD PTR [ebx+8]

; 894  :           if ( v == 0.0 ) continue;

	fld	ST(0)
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN68@q_facet_vo@2

; 895  :           vol += v*x[i][2]*(x[j][0]*x[k][1]-x[j][1]*x[k][0]);

	mov	edi, DWORD PTR [esi+424]
	mov	eax, DWORD PTR [esi+ecx*4+416]
	fld	QWORD PTR [edi+8]
	fmul	QWORD PTR [eax]
	fld	QWORD PTR [eax+8]
	mov	eax, DWORD PTR [edx]
	fmul	QWORD PTR [edi]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+16]
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN51@q_facet_vo@2
$LN68@q_facet_vo@2:
	fstp	ST(0)
$LN51@q_facet_vo@2:

; 892  :         for ( k = 0 ; k < FACET_CTRL ; k++ )
; 893  :         { v = vcoeff[i][j][k];

	fld	QWORD PTR [ebx+16]

; 894  :           if ( v == 0.0 ) continue;

	fld	ST(0)
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN71@q_facet_vo@2

; 895  :           vol += v*x[i][2]*(x[j][0]*x[k][1]-x[j][1]*x[k][0]);

	mov	edi, DWORD PTR [esi+428]
	mov	eax, DWORD PTR [esi+ecx*4+416]
	fld	QWORD PTR [edi+8]
	fmul	QWORD PTR [eax]
	fld	QWORD PTR [eax+8]
	mov	eax, DWORD PTR [edx]
	fmul	QWORD PTR [edi]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+16]
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN53@q_facet_vo@2
$LN71@q_facet_vo@2:
	fstp	ST(0)
$LN53@q_facet_vo@2:

; 892  :         for ( k = 0 ; k < FACET_CTRL ; k++ )
; 893  :         { v = vcoeff[i][j][k];

	fld	QWORD PTR [ebx+24]

; 894  :           if ( v == 0.0 ) continue;

	fld	ST(0)
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN74@q_facet_vo@2

; 895  :           vol += v*x[i][2]*(x[j][0]*x[k][1]-x[j][1]*x[k][0]);

	mov	edi, DWORD PTR [esi+432]
	mov	eax, DWORD PTR [esi+ecx*4+416]
	fld	QWORD PTR [edi+8]
	fmul	QWORD PTR [eax]
	fld	QWORD PTR [eax+8]
	mov	eax, DWORD PTR [edx]
	fmul	QWORD PTR [edi]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+16]
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN55@q_facet_vo@2
$LN74@q_facet_vo@2:
	fstp	ST(0)
$LN55@q_facet_vo@2:

; 892  :         for ( k = 0 ; k < FACET_CTRL ; k++ )
; 893  :         { v = vcoeff[i][j][k];

	fld	QWORD PTR [ebx+32]

; 894  :           if ( v == 0.0 ) continue;

	fld	ST(0)
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN77@q_facet_vo@2

; 895  :           vol += v*x[i][2]*(x[j][0]*x[k][1]-x[j][1]*x[k][0]);

	mov	edi, DWORD PTR [esi+436]
	mov	eax, DWORD PTR [esi+ecx*4+416]
	fld	QWORD PTR [edi+8]
	fmul	QWORD PTR [eax]
	fld	QWORD PTR [eax+8]
	mov	eax, DWORD PTR [edx]
	fmul	QWORD PTR [edi]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+16]
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN22@q_facet_vo@2
$LN77@q_facet_vo@2:
	fstp	ST(0)
$LN22@q_facet_vo@2:

; 891  :      for ( j = 0 ; j < FACET_CTRL ; j++ )

	inc	ecx
	add	ebx, 48					; 00000030H
	cmp	ecx, 6
	jl	$LN23@q_facet_vo@2

; 887  :   REAL v;
; 888  : 
; 889  :   /* volume, integral of z dx dy */
; 890  :   for ( i = 0 ; i < FACET_CTRL ; i++ )

	add	edx, 4
	mov	eax, ebx
	cmp	ebx, OFFSET _vcoeff+1736
	jl	$LN26@q_facet_vo@2

; 896  :         }
; 897  : 
; 898  :   /* gradients */
; 899  :   for ( k = 0 ; k < FACET_CTRL ; k++ )

	mov	edx, DWORD PTR _web+616
	xor	edi, edi
$LN16@q_facet_vo@2:

; 900  :      for ( j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN15@q_facet_vo@2
	mov	edx, DWORD PTR [esi+1336]
	mov	eax, DWORD PTR [edi+edx]
$LN89@q_facet_vo@2:

; 901  :         f_info->grad[k][j] = 0.0;

	fxch	ST(1)
	inc	ecx
	fst	QWORD PTR [eax]
	mov	edx, DWORD PTR _web+616
	add	eax, 8
	fxch	ST(1)
	cmp	ecx, edx
	jl	SHORT $LN89@q_facet_vo@2
$LN15@q_facet_vo@2:

; 896  :         }
; 897  : 
; 898  :   /* gradients */
; 899  :   for ( k = 0 ; k < FACET_CTRL ; k++ )

	add	edi, 4
	cmp	edi, 24					; 00000018H
	jl	SHORT $LN16@q_facet_vo@2

; 902  : 
; 903  :   for ( i = 0 ; i < FACET_CTRL ; i++ )

	mov	DWORD PTR tv2448[ebp], 0
	mov	edx, OFFSET _vcoeff
$LN58@q_facet_vo@2:

; 904  :     for ( j = 0 ; j < FACET_CTRL ; j++ )

	xor	ebx, ebx
	mov	DWORD PTR tv2300[ebp], ebx
$LN7@q_facet_vo@2:

; 905  :      for ( k = 0 ; k < FACET_CTRL ; k++ )

	xor	ecx, ecx
	mov	DWORD PTR tv2142[ebp], ecx
	mov	DWORD PTR tv2261[ebp], edx
$LN4@q_facet_vo@2:

; 906  :      { v = vcoeff[i][j][k];

	fld	QWORD PTR [edx]

; 907  :         if ( v == 0.0 ) continue;

	fld	ST(0)
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN96@q_facet_vo@2

; 908  :         f_info->grad[i][2] += v*(x[j][0]*x[k][1]-x[j][1]*x[k][0]);

	mov	eax, DWORD PTR [ecx+esi+416]
	mov	ecx, DWORD PTR [ebx+esi+416]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [ecx]
	mov	edi, DWORD PTR [esi+1336]
	fld	QWORD PTR [ecx+8]
	lea	edx, DWORD PTR [esi+416]
	fmul	QWORD PTR [eax]
	mov	esi, DWORD PTR tv2448[ebp]
	mov	esi, DWORD PTR [esi+edi]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [esi+16]
	fstp	QWORD PTR [esi+16]

; 909  :         f_info->grad[j][0] += v*x[i][2]*x[k][1];

	mov	esi, DWORD PTR tv2448[ebp]
	mov	edx, DWORD PTR [esi+edx]
	fld	QWORD PTR [edx+16]
	mov	esi, DWORD PTR [ebx+edi]
	fmul	ST(0), ST(1)

; 910  :         f_info->grad[k][1] += v*x[i][2]*x[j][0];

	mov	ebx, DWORD PTR tv2142[ebp]
	mov	edi, DWORD PTR [edi+ebx]

; 911  :         f_info->grad[j][1] -= v*x[i][2]*x[k][0];
; 912  :         f_info->grad[k][0] -= v*x[i][2]*x[j][1];

	mov	ebx, DWORD PTR tv2300[ebp]
	fmul	QWORD PTR [eax+8]
	fadd	QWORD PTR [esi]
	fstp	QWORD PTR [esi]
	fld	QWORD PTR [edx+16]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [ecx]
	fadd	QWORD PTR [edi+8]
	fstp	QWORD PTR [edi+8]
	fld	QWORD PTR [edx+16]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [eax]
	fsubr	QWORD PTR [esi+8]
	fstp	QWORD PTR [esi+8]
	mov	esi, DWORD PTR _f_info$[ebp]
	fmul	QWORD PTR [edx+16]
	mov	edx, DWORD PTR tv2261[ebp]
	fmul	QWORD PTR [ecx+8]
	mov	ecx, DWORD PTR tv2142[ebp]
	fsubr	QWORD PTR [edi]
	fstp	QWORD PTR [edi]
	jmp	SHORT $LN3@q_facet_vo@2
$LN96@q_facet_vo@2:
	fstp	ST(0)
$LN3@q_facet_vo@2:

; 905  :      for ( k = 0 ; k < FACET_CTRL ; k++ )

	add	ecx, 4
	add	edx, 8
	mov	DWORD PTR tv2261[ebp], edx
	mov	DWORD PTR tv2142[ebp], ecx
	cmp	ecx, 24					; 00000018H
	jl	$LN4@q_facet_vo@2

; 904  :     for ( j = 0 ; j < FACET_CTRL ; j++ )

	add	ebx, 4
	mov	DWORD PTR tv2300[ebp], ebx
	cmp	ebx, 24					; 00000018H
	jl	$LN7@q_facet_vo@2

; 902  : 
; 903  :   for ( i = 0 ; i < FACET_CTRL ; i++ )

	add	DWORD PTR tv2448[ebp], 4
	cmp	edx, OFFSET _vcoeff+1728
	jl	$LN58@q_facet_vo@2
	pop	edi
	fstp	ST(1)
	pop	esi
	pop	ebx

; 913  :      }
; 914  :   return vol;
; 915  : } /* end q_facet_volume_grad_q() */

	mov	esp, ebp
	pop	ebp
	ret	0
_q_facet_volume_q_grad ENDP
_TEXT	ENDS
PUBLIC	_q_facet_volume_q_hess
; Function compile flags: /Ogtp
;	COMDAT _q_facet_volume_q_hess
_TEXT	SEGMENT
tv4378 = -76						; size = 4
tv791 = -72						; size = 4
tv1321 = -68						; size = 4
tv808 = -68						; size = 4
tv4158 = -64						; size = 4
tv4154 = -60						; size = 4
tv4162 = -56						; size = 4
tv3932 = -52						; size = 4
tv4145 = -48						; size = 4
_h$ = -44						; size = 4
tv4132 = -40						; size = 4
tv2994 = -40						; size = 4
tv3786 = -36						; size = 4
tv1592 = -36						; size = 4
tv1362 = -32						; size = 4
tv243 = -32						; size = 4
tv3937 = -28						; size = 4
tv284 = -28						; size = 4
tv4347 = -24						; size = 4
tv1380 = -24						; size = 4
tv3560 = -20						; size = 4
tv3143 = -20						; size = 4
_x$ = -16						; size = 4
tv3199 = -12						; size = 4
tv1369 = -12						; size = 4
tv3705 = -8						; size = 4
tv3073 = -8						; size = 4
tv2988 = -4						; size = 4
tv2794 = -4						; size = 4
tv486 = -4						; size = 4
tv4008 = 8						; size = 4
_f_info$ = 8						; size = 4
_q_facet_volume_q_hess PROC				; COMDAT

; 925  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH

; 926  :   REAL vol = 0.0;

	fldz
	push	ebx

; 927  :   int i,j,k;
; 928  :   REAL v;
; 929  :   REAL **x;
; 930  :   REAL ****h;
; 931  : 
; 932  :   x = f_info->x;

	mov	ebx, DWORD PTR _f_info$[ebp]
	fld	ST(0)
	add	ebx, 416				; 000001a0H
	push	esi
	push	edi
	mov	DWORD PTR _x$[ebp], ebx
	mov	ecx, OFFSET _vcoeff+8
	mov	DWORD PTR tv2794[ebp], ebx
$LN33@q_facet_vo@3:

; 936  :      for ( j = 0 ; j < FACET_CTRL ; j++ )

	mov	eax, DWORD PTR tv2794[ebp]
	mov	edx, DWORD PTR [eax]
	xor	esi, esi
$LN30@q_facet_vo@3:

; 937  :         for ( k = 0 ; k < FACET_CTRL ; k++ )
; 938  :           vol += vcoeff[i][j][k]*x[i][2]*(x[j][0]*x[k][1]-x[j][1]*x[k][0]);

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	edi, DWORD PTR [ebx]
	fld	QWORD PTR [eax]
	fmul	QWORD PTR [edi+8]
	inc	esi
	fld	QWORD PTR [edi]
	mov	edi, DWORD PTR [ebx+4]
	fmul	QWORD PTR [eax+8]
	add	ecx, 48					; 00000030H
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ecx-56]
	fmul	QWORD PTR [edx+16]
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi+8]
	fmul	QWORD PTR [eax]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR [ebx+8]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx+16]
	fmul	QWORD PTR [ecx-48]
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi+8]
	fmul	QWORD PTR [eax]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR [ebx+12]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ecx-40]
	fmul	QWORD PTR [edx+16]
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi+8]
	fmul	QWORD PTR [eax]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR [ebx+16]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ecx-32]
	fmul	QWORD PTR [edx+16]
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi+8]
	fmul	QWORD PTR [eax]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR [ebx+20]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ecx-24]
	fmul	QWORD PTR [edx+16]
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi+8]
	fmul	QWORD PTR [eax]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [edi]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ecx-16]
	fmul	QWORD PTR [edx+16]
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	cmp	esi, 6
	jl	$LN30@q_facet_vo@3

; 933  : 
; 934  :   /* volume, integral of z dx dy */
; 935  :   for ( i = 0 ; i < FACET_CTRL ; i++ )

	add	DWORD PTR tv2794[ebp], 4
	cmp	ecx, OFFSET _vcoeff+1736
	jl	$LN33@q_facet_vo@3

; 939  : 
; 940  :   /* gradients */
; 941  :   for ( k = 0 ; k < FACET_CTRL ; k++ )

	mov	edx, DWORD PTR _web+616
	mov	edi, DWORD PTR _f_info$[ebp]
	xor	esi, esi
$LN71@q_facet_vo@3:

; 942  :      for ( j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN23@q_facet_vo@3
	mov	edx, DWORD PTR [edi+1336]
	mov	eax, DWORD PTR [esi+edx]
$LN84@q_facet_vo@3:

; 943  :         f_info->grad[k][j] = 0.0;

	fxch	ST(1)
	inc	ecx
	fst	QWORD PTR [eax]
	mov	edx, DWORD PTR _web+616
	add	eax, 8
	fxch	ST(1)
	cmp	ecx, edx
	jl	SHORT $LN84@q_facet_vo@3
$LN23@q_facet_vo@3:

; 939  : 
; 940  :   /* gradients */
; 941  :   for ( k = 0 ; k < FACET_CTRL ; k++ )

	add	esi, 4
	cmp	esi, 24					; 00000018H
	jl	SHORT $LN71@q_facet_vo@3
	mov	edx, DWORD PTR [edi+1336]
	fstp	ST(1)
	mov	eax, ebx
	sub	eax, edx

; 944  : 
; 945  :   for ( i = 0 ; i < FACET_CTRL ; i++ )

	mov	DWORD PTR tv1592[ebp], edx
	mov	esi, ebx
	sub	edx, ebx
	mov	DWORD PTR tv2994[ebp], eax
	mov	eax, OFFSET _vcoeff
	mov	DWORD PTR tv3199[ebp], esi
	mov	DWORD PTR tv3143[ebp], edx
	jmp	SHORT $LN18@q_facet_vo@3
$LN68@q_facet_vo@3:
	mov	edx, DWORD PTR tv3143[ebp]
	mov	ebx, DWORD PTR _x$[ebp]
	mov	esi, DWORD PTR tv3199[ebp]
$LN18@q_facet_vo@3:

; 946  :     for ( j = 0 ; j < FACET_CTRL ; j++ )

	mov	ecx, DWORD PTR [esi+edx]
	mov	edi, DWORD PTR [esi]
	mov	DWORD PTR tv1380[ebp], ecx
	mov	DWORD PTR tv3073[ebp], ebx
	mov	DWORD PTR tv243[ebp], 6
	jmp	SHORT $LN15@q_facet_vo@3
$LN69@q_facet_vo@3:
	mov	ecx, DWORD PTR tv1380[ebp]
	mov	edx, DWORD PTR tv3143[ebp]
	mov	ebx, DWORD PTR tv3073[ebp]
$LN15@q_facet_vo@3:

; 947  :      for ( k = 0 ; k < FACET_CTRL ; k++ )

	mov	edx, DWORD PTR [edx+ebx]
	mov	esi, DWORD PTR [ebx]
	mov	ebx, DWORD PTR tv1592[ebp]
	mov	DWORD PTR tv2988[ebp], eax
	mov	DWORD PTR tv284[ebp], 6
	jmp	SHORT $LN12@q_facet_vo@3
$LN70@q_facet_vo@3:
	mov	ecx, DWORD PTR tv1380[ebp]
$LN12@q_facet_vo@3:

; 948  :      { v = vcoeff[i][j][k];

	mov	eax, DWORD PTR tv2988[ebp]
	fld	QWORD PTR [eax]

; 949  :         f_info->grad[i][2] += v*(x[j][0]*x[k][1]-x[j][1]*x[k][0]);

	mov	eax, DWORD PTR tv2994[ebp]
	mov	eax, DWORD PTR [eax+ebx]
	fld	QWORD PTR [eax+8]
	add	DWORD PTR tv2988[ebp], 8
	fmul	QWORD PTR [esi]
	add	ebx, 4
	dec	DWORD PTR tv284[ebp]
	fld	QWORD PTR [esi+8]
	fmul	QWORD PTR [eax]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [ecx+16]
	fstp	QWORD PTR [ecx+16]

; 950  :         f_info->grad[j][0] += v*x[i][2]*x[k][1];
; 951  :         f_info->grad[k][1] += v*x[i][2]*x[j][0];

	mov	ecx, DWORD PTR [ebx-4]
	fld	QWORD PTR [edi+16]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [eax+8]
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	fld	QWORD PTR [edi+16]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [esi]
	fadd	QWORD PTR [ecx+8]
	fstp	QWORD PTR [ecx+8]

; 952  :         f_info->grad[j][1] -= v*x[i][2]*x[k][0];

	fld	QWORD PTR [edi+16]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [eax]
	fsubr	QWORD PTR [edx+8]
	fstp	QWORD PTR [edx+8]

; 953  :         f_info->grad[k][0] -= v*x[i][2]*x[j][1];

	fmul	QWORD PTR [edi+16]
	fmul	QWORD PTR [esi+8]
	fsubr	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	jne	SHORT $LN70@q_facet_vo@3

; 946  :     for ( j = 0 ; j < FACET_CTRL ; j++ )

	add	DWORD PTR tv3073[ebp], 4
	dec	DWORD PTR tv243[ebp]
	mov	eax, DWORD PTR tv2988[ebp]
	jne	$LN69@q_facet_vo@3

; 944  : 
; 945  :   for ( i = 0 ; i < FACET_CTRL ; i++ )

	add	DWORD PTR tv3199[ebp], 4
	cmp	eax, OFFSET _vcoeff+1728
	jl	$LN68@q_facet_vo@3

; 954  :      }
; 955  : 
; 956  :   /* hessian */
; 957  :   h = f_info->hess;

	mov	ecx, DWORD PTR _f_info$[ebp]
	mov	esi, DWORD PTR [ecx+1340]
	mov	edi, DWORD PTR _x$[ebp]
	mov	eax, edi
	sub	eax, esi
	mov	DWORD PTR tv3932[ebp], eax

; 958  :   for ( i = 0 ; i < FACET_CTRL ; i++ )

	mov	eax, esi
	sub	eax, edi
	mov	DWORD PTR _h$[ebp], esi
	mov	DWORD PTR tv4008[ebp], 0
	mov	ecx, OFFSET _vcoeff
	mov	DWORD PTR tv4132[ebp], eax
	jmp	SHORT $LN9@q_facet_vo@3
$LN65@q_facet_vo@3:
	mov	eax, DWORD PTR tv4132[ebp]
	mov	esi, DWORD PTR _h$[ebp]
	mov	edi, DWORD PTR _x$[ebp]
$LN9@q_facet_vo@3:
	mov	edx, DWORD PTR tv4008[ebp]
	add	edx, edi
	mov	eax, DWORD PTR [edx+eax]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR tv1369[ebp], edx
	mov	edx, eax
	neg	edx

; 962  :         h[i][j][2][0] += v*x[k][1];

	lea	ebx, DWORD PTR [edx+edi]
	add	edx, esi
	mov	DWORD PTR tv4158[ebp], edx
	mov	edx, eax
	sub	edx, edi
	mov	DWORD PTR tv4145[ebp], eax
	mov	DWORD PTR tv4154[ebp], ebx
	mov	DWORD PTR tv3705[ebp], 0
	mov	DWORD PTR tv3786[ebp], esi
	mov	DWORD PTR tv4162[ebp], edx
	jmp	SHORT $LN6@q_facet_vo@3
$LN66@q_facet_vo@3:

; 959  :     for ( j = 0 ; j < FACET_CTRL ; j++ )

	mov	eax, DWORD PTR tv4145[ebp]
$LN6@q_facet_vo@3:
	mov	edx, DWORD PTR [esi]

; 960  :      for ( k = 0 ; k < FACET_CTRL ; k++ )

	mov	edi, DWORD PTR tv4008[ebp]
	mov	edi, DWORD PTR [edi+edx]
	mov	ebx, DWORD PTR [edi]
	mov	edi, DWORD PTR [edi+4]
	mov	DWORD PTR tv1362[ebp], ebx
	mov	ebx, DWORD PTR tv3932[ebp]
	add	ebx, esi
	mov	esi, DWORD PTR tv4162[ebp]
	mov	esi, DWORD PTR [ebx+esi]
	mov	ebx, DWORD PTR [ebx]
	mov	esi, DWORD PTR [esi+8]
	sub	edx, eax
	mov	DWORD PTR tv791[ebp], edi
	mov	DWORD PTR tv3937[ebp], ebx
	mov	DWORD PTR tv3560[ebp], ecx
	mov	DWORD PTR tv4347[ebp], edx
	mov	DWORD PTR tv486[ebp], 6
$LN67@q_facet_vo@3:

; 961  :      { v = vcoeff[i][j][k];

	fld	QWORD PTR [ecx]

; 962  :         h[i][j][2][0] += v*x[k][1];

	mov	ecx, DWORD PTR tv4154[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	fld	QWORD PTR [ecx+8]
	mov	edx, DWORD PTR tv1362[ebp]
	fmul	ST(0), ST(1)

; 963  :         h[j][i][0][2] += v*x[k][1];
; 964  :         h[i][k][2][1] += v*x[j][0];
; 965  :         h[k][i][1][2] += v*x[j][0];

	mov	edi, DWORD PTR tv4158[ebp]
	mov	edi, DWORD PTR [eax+edi]
	fadd	QWORD PTR [esi]
	fstp	QWORD PTR [esi]
	fld	QWORD PTR [ecx+8]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [edx+16]
	fstp	QWORD PTR [edx+16]
	mov	edx, DWORD PTR [eax]
	fld	QWORD PTR [ebx]
	mov	edx, DWORD PTR [edx+8]
	fmul	ST(0), ST(1)
	mov	ebx, DWORD PTR tv4008[ebp]
	mov	ebx, DWORD PTR [ebx+edi]
	mov	DWORD PTR tv4378[ebp], ebx
	fadd	QWORD PTR [edx+8]
	mov	ebx, DWORD PTR [ebx+4]
	mov	DWORD PTR tv808[ebp], ebx
	mov	ebx, DWORD PTR tv3937[ebp]
	fstp	QWORD PTR [edx+8]
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv808[ebp]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [ebx+16]
	fstp	QWORD PTR [ebx+16]

; 966  :         h[j][k][0][1] += v*x[i][2];

	mov	ebx, DWORD PTR tv4347[ebp]
	mov	ebx, DWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR [ebx]
	mov	DWORD PTR tv1321[ebp], ebx
	mov	ebx, DWORD PTR tv1369[ebp]
	fld	QWORD PTR [ebx+16]
	mov	ebx, DWORD PTR tv1321[ebp]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [ebx+8]
	fstp	QWORD PTR [ebx+8]

; 967  :         h[k][j][1][0] += v*x[i][2];

	mov	ebx, DWORD PTR tv3705[ebp]
	mov	edi, DWORD PTR [ebx+edi]
	mov	ebx, DWORD PTR tv1369[ebp]
	fld	QWORD PTR [ebx+16]
	mov	ebx, DWORD PTR [edi+4]
	fmul	ST(0), ST(1)

; 968  :         h[i][j][2][1] -= v*x[k][0];
; 969  :         h[j][i][1][2] -= v*x[k][0];
; 970  :         h[i][k][2][0] -= v*x[j][1];
; 971  :         h[k][i][0][2] -= v*x[j][1];
; 972  :         h[j][k][1][0] -= v*x[i][2];
; 973  :         h[k][j][0][1] -= v*x[i][2];

	mov	edi, DWORD PTR [edi]
	fadd	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv3937[ebp]
	fld	QWORD PTR [ecx]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [esi+8]
	fstp	QWORD PTR [esi+8]
	fld	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv791[ebp]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [ecx+16]
	fstp	QWORD PTR [ecx+16]
	mov	ecx, DWORD PTR tv4378[ebp]
	fld	QWORD PTR [ebx+8]
	mov	ecx, DWORD PTR [ecx]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR tv4347[ebp]
	fld	QWORD PTR [ebx+8]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [ecx+16]
	fstp	QWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [eax+edx]
	mov	edx, DWORD PTR tv1369[ebp]
	fld	QWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+4]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	fmul	QWORD PTR [edx+16]
	fsubr	QWORD PTR [edi+8]
	fstp	QWORD PTR [edi+8]

; 960  :      for ( k = 0 ; k < FACET_CTRL ; k++ )

	mov	ecx, DWORD PTR tv3560[ebp]
	add	ecx, 8
	add	eax, 4
	dec	DWORD PTR tv486[ebp]
	mov	DWORD PTR tv3560[ebp], ecx
	jne	$LN67@q_facet_vo@3

; 959  :     for ( j = 0 ; j < FACET_CTRL ; j++ )

	mov	eax, DWORD PTR tv3705[ebp]
	mov	esi, DWORD PTR tv3786[ebp]
	add	eax, 4
	add	esi, 4
	mov	DWORD PTR tv3705[ebp], eax
	mov	DWORD PTR tv3786[ebp], esi
	cmp	eax, 24					; 00000018H
	jl	$LN66@q_facet_vo@3

; 958  :   for ( i = 0 ; i < FACET_CTRL ; i++ )

	add	DWORD PTR tv4008[ebp], 4
	cmp	ecx, OFFSET _vcoeff+1728
	jl	$LN65@q_facet_vo@3
	pop	edi
	pop	esi
	pop	ebx

; 974  :      }
; 975  :   return vol;
; 976  : } /* end q_facet_volume_q_hess() */

	mov	esp, ebp
	pop	ebp
	ret	0
_q_facet_volume_q_hess ENDP
_TEXT	ENDS
END
