; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\DUMP.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_05PMAELIEO@white?$AA@			; `string'
PUBLIC	??_C@_06ENJNJKEL@yellow?$AA@			; `string'
PUBLIC	??_C@_0N@BBECPGBJ@lightmagenta?$AA@		; `string'
PUBLIC	??_C@_08EEFKFEFN@lightred?$AA@			; `string'
PUBLIC	??_C@_09KPGEKFMK@lightcyan?$AA@			; `string'
PUBLIC	??_C@_0L@OPBGACJD@lightgreen?$AA@		; `string'
PUBLIC	??_C@_09NBIPJLA@lightblue?$AA@			; `string'
PUBLIC	??_C@_08EADAAFKF@darkgray?$AA@			; `string'
PUBLIC	??_C@_09IIGGAAJN@lightgray?$AA@			; `string'
PUBLIC	??_C@_05EBJGJMAL@brown?$AA@			; `string'
PUBLIC	??_C@_07EMDGAPCI@magenta?$AA@			; `string'
PUBLIC	??_C@_03FAAAOPJM@red?$AA@			; `string'
PUBLIC	??_C@_04EDBDANFH@cyan?$AA@			; `string'
PUBLIC	??_C@_05GBEEJKMC@green?$AA@			; `string'
PUBLIC	??_C@_04OBGPFBCN@blue?$AA@			; `string'
PUBLIC	??_C@_05BIMBDNDC@black?$AA@			; `string'
PUBLIC	??_C@_05MEHLAELG@clear?$AA@			; `string'
PUBLIC	_color_names
_DATA	SEGMENT
_color_names DD	FLAT:??_C@_05MEHLAELG@clear?$AA@
	DD	FLAT:??_C@_05BIMBDNDC@black?$AA@
	DD	FLAT:??_C@_04OBGPFBCN@blue?$AA@
	DD	FLAT:??_C@_05GBEEJKMC@green?$AA@
	DD	FLAT:??_C@_04EDBDANFH@cyan?$AA@
	DD	FLAT:??_C@_03FAAAOPJM@red?$AA@
	DD	FLAT:??_C@_07EMDGAPCI@magenta?$AA@
	DD	FLAT:??_C@_05EBJGJMAL@brown?$AA@
	DD	FLAT:??_C@_09IIGGAAJN@lightgray?$AA@
	DD	FLAT:??_C@_08EADAAFKF@darkgray?$AA@
	DD	FLAT:??_C@_09NBIPJLA@lightblue?$AA@
	DD	FLAT:??_C@_0L@OPBGACJD@lightgreen?$AA@
	DD	FLAT:??_C@_09KPGEKFMK@lightcyan?$AA@
	DD	FLAT:??_C@_08EEFKFEFN@lightred?$AA@
	DD	FLAT:??_C@_0N@BBECPGBJ@lightmagenta?$AA@
	DD	FLAT:??_C@_06ENJNJKEL@yellow?$AA@
	DD	FLAT:??_C@_05PMAELIEO@white?$AA@
_DATA	ENDS
;	COMDAT ??_C@_05PMAELIEO@white?$AA@
CONST	SEGMENT
??_C@_05PMAELIEO@white?$AA@ DB 'white', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ENJNJKEL@yellow?$AA@
CONST	SEGMENT
??_C@_06ENJNJKEL@yellow?$AA@ DB 'yellow', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BBECPGBJ@lightmagenta?$AA@
CONST	SEGMENT
??_C@_0N@BBECPGBJ@lightmagenta?$AA@ DB 'lightmagenta', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EEFKFEFN@lightred?$AA@
CONST	SEGMENT
??_C@_08EEFKFEFN@lightred?$AA@ DB 'lightred', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KPGEKFMK@lightcyan?$AA@
CONST	SEGMENT
??_C@_09KPGEKFMK@lightcyan?$AA@ DB 'lightcyan', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OPBGACJD@lightgreen?$AA@
CONST	SEGMENT
??_C@_0L@OPBGACJD@lightgreen?$AA@ DB 'lightgreen', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NBIPJLA@lightblue?$AA@
CONST	SEGMENT
??_C@_09NBIPJLA@lightblue?$AA@ DB 'lightblue', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08EADAAFKF@darkgray?$AA@
CONST	SEGMENT
??_C@_08EADAAFKF@darkgray?$AA@ DB 'darkgray', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IIGGAAJN@lightgray?$AA@
CONST	SEGMENT
??_C@_09IIGGAAJN@lightgray?$AA@ DB 'lightgray', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05EBJGJMAL@brown?$AA@
CONST	SEGMENT
??_C@_05EBJGJMAL@brown?$AA@ DB 'brown', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EMDGAPCI@magenta?$AA@
CONST	SEGMENT
??_C@_07EMDGAPCI@magenta?$AA@ DB 'magenta', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03FAAAOPJM@red?$AA@
CONST	SEGMENT
??_C@_03FAAAOPJM@red?$AA@ DB 'red', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EDBDANFH@cyan?$AA@
CONST	SEGMENT
??_C@_04EDBDANFH@cyan?$AA@ DB 'cyan', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GBEEJKMC@green?$AA@
CONST	SEGMENT
??_C@_05GBEEJKMC@green?$AA@ DB 'green', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OBGPFBCN@blue?$AA@
CONST	SEGMENT
??_C@_04OBGPFBCN@blue?$AA@ DB 'blue', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BIMBDNDC@black?$AA@
CONST	SEGMENT
??_C@_05BIMBDNDC@black?$AA@ DB 'black', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MEHLAELG@clear?$AA@
CONST	SEGMENT
??_C@_05MEHLAELG@clear?$AA@ DB 'clear', 00H		; `string'
CONST	ENDS
PUBLIC	_get_fe_edge
EXTRN	_web:BYTE
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
;	COMDAT _get_fe_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_edge PROC					; COMDAT

; 43   : {

	push	ebp
	mov	ebp, esp

; 44   :   edge_id e_id;
; 45   :     
; 46   :   e_id = feptr(fe_id)->fe_edge_id;

	mov	eax, DWORD PTR _fe_id$[ebp]

; 47   : 
; 48   :   /*
; 49   :   if ( inverted(fe_id) ) invert(e_id);
; 50   :   return e_id;
; 51   :   */
; 52   :   
; 53   :   return same_sign(e_id,fe_id);

	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]

; 54   : }

	pop	ebp
	ret	0
_get_fe_edge ENDP
_TEXT	ENDS
PUBLIC	_get_fe_facet
EXTRN	_NULLFACET:DWORD
; Function compile flags: /Ogtp
;	COMDAT _get_fe_facet
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_facet PROC					; COMDAT

; 58   : {

	push	ebp
	mov	ebp, esp

; 59   :   facet_id f_id;
; 60   :   
; 61   :   if ( !valid_id(fe_id) ) return NULLFACET;

	mov	ecx, DWORD PTR _fe_id$[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN2@get_fe_fac
	mov	eax, DWORD PTR _NULLFACET

; 64   :   return f_id;
; 65   : }

	pop	ebp
	ret	0
$LN2@get_fe_fac:

; 62   :   f_id = feptr(fe_id)->fe_facet_id;

	mov	edx, DWORD PTR _web+460
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+24]

; 63   :   if ( inverted(fe_id) ) invert(f_id);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_fe_fac
	xor	eax, 134217728				; 08000000H
$LN3@get_fe_fac:

; 64   :   return f_id;
; 65   : }

	pop	ebp
	ret	0
_get_fe_facet ENDP
_TEXT	ENDS
PUBLIC	_get_prev_edge
; Function compile flags: /Ogtp
;	COMDAT _get_prev_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_prev_edge PROC					; COMDAT

; 69   : {

	push	ebp
	mov	ebp, esp

; 70   :   if ( inverted(fe_id) ) return inverse_id(feptr(fe_id)->nextedge[1]);

	mov	eax, DWORD PTR _fe_id$[ebp]
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_prev_e
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H

; 72   : }

	pop	ebp
	ret	0
$LN2@get_prev_e:

; 71   :   else return feptr(fe_id)->nextedge[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]

; 72   : }

	pop	ebp
	ret	0
_get_prev_edge ENDP
_TEXT	ENDS
PUBLIC	_get_next_edge
; Function compile flags: /Ogtp
;	COMDAT _get_next_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_next_edge PROC					; COMDAT

; 76   : {

	push	ebp
	mov	ebp, esp

; 77   :   if ( inverted(fe_id) ) return inverse_id(feptr(fe_id)->nextedge[0]);

	mov	eax, DWORD PTR _fe_id$[ebp]
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_next_e
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H

; 79   : }

	pop	ebp
	ret	0
$LN2@get_next_e:

; 78   :   else return feptr(fe_id)->nextedge[1];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]

; 79   : }

	pop	ebp
	ret	0
_get_next_edge ENDP
_TEXT	ENDS
PUBLIC	_get_prev_facet
; Function compile flags: /Ogtp
;	COMDAT _get_prev_facet
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_prev_facet PROC					; COMDAT

; 83   : {

	push	ebp
	mov	ebp, esp

; 84   :   if ( inverted(fe_id) ) 

	mov	eax, DWORD PTR _fe_id$[ebp]

; 85   :     return inverse_id(feptr(fe_id)->nextfacet[1]);

	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_prev_f
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+40]
	xor	eax, 134217728				; 08000000H

; 88   : }

	pop	ebp
	ret	0
$LN2@get_prev_f:

; 86   :   else 
; 87   :     return feptr(fe_id)->nextfacet[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+36]

; 88   : }

	pop	ebp
	ret	0
_get_prev_facet ENDP
_TEXT	ENDS
PUBLIC	_get_next_facet
; Function compile flags: /Ogtp
;	COMDAT _get_next_facet
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_next_facet PROC					; COMDAT

; 92   : {

	push	ebp
	mov	ebp, esp

; 93   :   if ( inverted(fe_id) ) 

	mov	eax, DWORD PTR _fe_id$[ebp]

; 94   :     return inverse_id(feptr(fe_id)->nextfacet[0]);

	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_next_f
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H

; 97   : }

	pop	ebp
	ret	0
$LN2@get_next_f:

; 95   :   else 
; 96   :     return feptr(fe_id)->nextfacet[1];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+40]

; 97   : }

	pop	ebp
	ret	0
_get_next_facet ENDP
_TEXT	ENDS
PUBLIC	_get_edge_wrap
EXTRN	_sym_inverse:DWORD
EXTRN	_dymem:DWORD
; Function compile flags: /Ogtp
;	COMDAT _get_edge_wrap
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_wrap PROC					; COMDAT

; 163  : {

	push	ebp
	mov	ebp, esp

; 164  :   WRAPTYPE wrap = *EINT(e_id,E_WRAP_ATTR) ;

	mov	ecx, DWORD PTR _e_id$[ebp]
	mov	edx, DWORD PTR _web+124
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+216
	push	esi
	mov	esi, DWORD PTR _dymem
	mov	edx, DWORD PTR [edx+esi+784]
	mov	eax, DWORD PTR [eax+edx]
	pop	esi

; 165  :   return    ( inverted(e_id) ? (*sym_inverse)(wrap) : wrap );

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN4@get_edge_w
	push	eax
	call	DWORD PTR _sym_inverse
	add	esp, 4
$LN4@get_edge_w:

; 166  : }

	pop	ebp
	ret	0
_get_edge_wrap ENDP
_TEXT	ENDS
PUBLIC	_get_edge_tailv
; Function compile flags: /Ogtp
;	COMDAT _get_edge_tailv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_tailv PROC					; COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp

; 192  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 193  :      return get_edge_vertices(e_id)[web.headvnum];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_t
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 196  : }

	pop	ebp
	ret	0
$LN2@get_edge_t:

; 194  :   else
; 195  :      return get_edge_vertices(e_id)[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 196  : }

	pop	ebp
	ret	0
_get_edge_tailv ENDP
_TEXT	ENDS
PUBLIC	_get_edge_headv
; Function compile flags: /Ogtp
;	COMDAT _get_edge_headv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_headv PROC					; COMDAT

; 200  : {

	push	ebp
	mov	ebp, esp

; 201  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 202  :      return get_edge_vertices(e_id)[0];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_h
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 205  : }

	pop	ebp
	ret	0
$LN2@get_edge_h:

; 203  :   else
; 204  :      return get_edge_vertices(e_id)[web.headvnum];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 205  : }

	pop	ebp
	ret	0
_get_edge_headv ENDP
_TEXT	ENDS
PUBLIC	_get_facet_fe
; Function compile flags: /Ogtp
;	COMDAT _get_facet_fe
_TEXT	SEGMENT
_f_id$ = 8						; size = 4
_get_facet_fe PROC					; COMDAT

; 260  : {

	push	ebp
	mov	ebp, esp

; 261  :   facetedge_id fe;
; 262  :   
; 263  :   if ( !valid_id(f_id) ) return NULLID;

	mov	ecx, DWORD PTR _f_id$[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN2@get_facet_
	xor	eax, eax

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
$LN2@get_facet_:

; 264  :   fe = fptr(f_id)->fe_id;

	mov	edx, DWORD PTR _web+236
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]

; 265  :   if ( inverted(f_id) ) invert(fe);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_facet_
	xor	eax, 134217728				; 08000000H
$LN3@get_facet_:

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
_get_facet_fe ENDP
_TEXT	ENDS
PUBLIC	_get_body_facet
; Function compile flags: /Ogtp
;	COMDAT _get_body_facet
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_facet PROC					; COMDAT

; 279  : { return ( valid_id(b_id) ? bptr(b_id)->f_id : NULLID ); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_f
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+400]
	pop	ebp
	ret	0
$LN3@get_body_f:
	xor	eax, eax
	pop	ebp
	ret	0
_get_body_facet ENDP
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	_get_body_density
EXTRN	__fltused:DWORD
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _get_body_density
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_density PROC					; COMDAT

; 305  :     { return  ( valid_id(b_id) ?  bptr(b_id)->density : 0.0 ) ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_d
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+344]
	pop	ebp
	ret	0
$LN3@get_body_d:
	fldz
	pop	ebp
	ret	0
_get_body_density ENDP
_TEXT	ENDS
PUBLIC	_get_body_volume
; Function compile flags: /Ogtp
;	COMDAT _get_body_volume
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_volume PROC					; COMDAT

; 308  :     { return    ( valid_id(b_id) ?  bptr(b_id)->volume : 0.0 ) ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_v
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+40]
	pop	ebp
	ret	0
$LN3@get_body_v:
	fldz
	pop	ebp
	ret	0
_get_body_volume ENDP
_TEXT	ENDS
PUBLIC	_get_body_fixvol
; Function compile flags: /Ogtp
;	COMDAT _get_body_fixvol
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_fixvol PROC					; COMDAT

; 311  :      { return ( valid_id(b_id) ?  bptr(b_id)->fixvol : 0.0 ) ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_f@2
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+32]
	pop	ebp
	ret	0
$LN3@get_body_f@2:
	fldz
	pop	ebp
	ret	0
_get_body_fixvol ENDP
_TEXT	ENDS
PUBLIC	_get_body_pressure
; Function compile flags: /Ogtp
;	COMDAT _get_body_pressure
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_pressure PROC					; COMDAT

; 317  :     { return  ( valid_id(b_id) ?    bptr(b_id)->pressure : 0.0 ) ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_p
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+312]
	pop	ebp
	ret	0
$LN3@get_body_p:
	fldz
	pop	ebp
	ret	0
_get_body_pressure ENDP
_TEXT	ENDS
PUBLIC	_get_body_volconst
; Function compile flags: /Ogtp
;	COMDAT _get_body_volconst
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_volconst PROC					; COMDAT

; 320  :   { return    ( valid_id(b_id) ?  bptr(b_id)->volconst : 0.0 ) ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_v@2
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+328]
	pop	ebp
	ret	0
$LN3@get_body_v@2:
	fldz
	pop	ebp
	ret	0
_get_body_volconst ENDP
_TEXT	ENDS
PUBLIC	_get_extra
; Function compile flags: /Ogtp
;	COMDAT _get_extra
_TEXT	SEGMENT
_id$ = 8						; size = 4
_n$ = 12						; size = 4
_get_extra PROC						; COMDAT

; 348  : { int type = id_type(id);

	push	ebp
	mov	ebp, esp

; 349  : 
; 350  :   return ( (char*)elptr(id) + EXTRAS(type)[n].offset);

	mov	ecx, DWORD PTR _id$[ebp]
	mov	eax, ecx
	push	esi
	mov	esi, DWORD PTR _n$[ebp]
	shr	eax, 29					; 0000001dH
	imul	esi, 240				; 000000f0H
	imul	eax, 112				; 00000070H
	mov	edx, DWORD PTR _web[eax+12]
	push	edi
	mov	edi, DWORD PTR _web[eax+104]
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _dymem
	add	edi, esi
	add	eax, DWORD PTR [edi+ecx+64]
	pop	edi
	pop	esi

; 351  : }

	pop	ebp
	ret	0
_get_extra ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@MOPLMDLF@Illegal?5datatype?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_0CI@BIFFKDPI@Printing?5of?5type?5?$CC?$CFs?$CC?5not?5implem@ ; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_0O@NNCDDCPC@facetedge?$FL?$CFs?$FN?$AA@	; `string'
PUBLIC	??_C@_08LAPBJAFN@body?$FL?$CFs?$FN?$AA@		; `string'
PUBLIC	??_C@_09BNEAKJFC@facet?$FL?$CFs?$FN?$AA@	; `string'
PUBLIC	??_C@_08MMAGDJLP@edge?$FL?$CFs?$FN?$AA@		; `string'
PUBLIC	??_C@_04CGFJFPFD@none?$AA@			; `string'
PUBLIC	??_C@_0L@PMBMNFIG@vertex?$FL?$CFs?$FN?$AA@	; `string'
PUBLIC	??_C@_02BBAHNLBA@?$CFp?$AA@			; `string'
PUBLIC	??_C@_04OEDFLLKD@?$CC?$CFs?$CC?$AA@		; `string'
PUBLIC	??_C@_0CH@DHMEAAKB@String?5length?5exceeds?5maximum?5le@ ; `string'
PUBLIC	??_C@_02JMMFPCED@?$CC?$CC?$AA@			; `string'
PUBLIC	??_C@_03FKNCMABI@?$CFlu?$AA@			; `string'
PUBLIC	??_C@_03JALODAI@?$CFld?$AA@			; `string'
PUBLIC	??_C@_02GMHACPFF@?$CFu?$AA@			; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_06IINOEEKG@?$CF2?415g?$AA@		; `string'
PUBLIC	_print_data_value
EXTRN	_errmsg:BYTE
EXTRN	_datatype_name:BYTE
EXTRN	_localbase:DWORD
EXTRN	_meth_inst_list:DWORD
EXTRN	_gen_quant_list:DWORD
EXTRN	_elnames:BYTE
EXTRN	_kb_error:PROC
EXTRN	_convert_string:PROC
EXTRN	_sprintf:PROC
;	COMDAT ??_C@_0BF@MOPLMDLF@Illegal?5datatype?5?$CFd?6?$AA@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\dump.c
CONST	SEGMENT
??_C@_0BF@MOPLMDLF@Illegal?5datatype?5?$CFd?6?$AA@ DB 'Illegal datatype %'
	DB	'd', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@BIFFKDPI@Printing?5of?5type?5?$CC?$CFs?$CC?5not?5implem@
CONST	SEGMENT
??_C@_0CI@BIFFKDPI@Printing?5of?5type?5?$CC?$CFs?$CC?5not?5implem@ DB 'Pr'
	DB	'inting of type "%s" not implemented.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NNCDDCPC@facetedge?$FL?$CFs?$FN?$AA@
CONST	SEGMENT
??_C@_0O@NNCDDCPC@facetedge?$FL?$CFs?$FN?$AA@ DB 'facetedge[%s]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LAPBJAFN@body?$FL?$CFs?$FN?$AA@
CONST	SEGMENT
??_C@_08LAPBJAFN@body?$FL?$CFs?$FN?$AA@ DB 'body[%s]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BNEAKJFC@facet?$FL?$CFs?$FN?$AA@
CONST	SEGMENT
??_C@_09BNEAKJFC@facet?$FL?$CFs?$FN?$AA@ DB 'facet[%s]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08MMAGDJLP@edge?$FL?$CFs?$FN?$AA@
CONST	SEGMENT
??_C@_08MMAGDJLP@edge?$FL?$CFs?$FN?$AA@ DB 'edge[%s]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04CGFJFPFD@none?$AA@
CONST	SEGMENT
??_C@_04CGFJFPFD@none?$AA@ DB 'none', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PMBMNFIG@vertex?$FL?$CFs?$FN?$AA@
CONST	SEGMENT
??_C@_0L@PMBMNFIG@vertex?$FL?$CFs?$FN?$AA@ DB 'vertex[%s]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02BBAHNLBA@?$CFp?$AA@
CONST	SEGMENT
??_C@_02BBAHNLBA@?$CFp?$AA@ DB '%p', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OEDFLLKD@?$CC?$CFs?$CC?$AA@
CONST	SEGMENT
??_C@_04OEDFLLKD@?$CC?$CFs?$CC?$AA@ DB '"%s"', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@DHMEAAKB@String?5length?5exceeds?5maximum?5le@
CONST	SEGMENT
??_C@_0CH@DHMEAAKB@String?5length?5exceeds?5maximum?5le@ DB 'String lengt'
	DB	'h exceeds maximum length.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02JMMFPCED@?$CC?$CC?$AA@
CONST	SEGMENT
??_C@_02JMMFPCED@?$CC?$CC?$AA@ DB '""', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03FKNCMABI@?$CFlu?$AA@
CONST	SEGMENT
??_C@_03FKNCMABI@?$CFlu?$AA@ DB '%lu', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JALODAI@?$CFld?$AA@
CONST	SEGMENT
??_C@_03JALODAI@?$CFld?$AA@ DB '%ld', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMHACPFF@?$CFu?$AA@
CONST	SEGMENT
??_C@_02GMHACPFF@?$CFu?$AA@ DB '%u', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IINOEEKG@?$CF2?415g?$AA@
CONST	SEGMENT
??_C@_06IINOEEKG@?$CF2?415g?$AA@ DB '%2.15g', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _print_data_value
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_type$ = 12						; size = 4
_src$ = 16						; size = 4
_maxspace$ = 20						; size = 4
_mode$ = 24						; size = 4
_print_data_value PROC					; COMDAT

; 80   : {   if ( type == ELEMENTID_TYPE )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	esi
	mov	esi, DWORD PTR _src$[ebp]
	cmp	eax, 18					; 00000012H
	jne	SHORT $LN42@print_data

; 81   :       type = id_type(*(element_id*)src) + VERTEX_TYPE;

	mov	eax, DWORD PTR [esi]
	shr	eax, 29					; 0000001dH
	add	eax, 13					; 0000000dH
$LN42@print_data:

; 82   : 
; 83   :     switch ( type )

	lea	ecx, DWORD PTR [eax-1]
	cmp	ecx, 22					; 00000016H
	ja	$LN3@print_data
	jmp	DWORD PTR $LN64@print_data[ecx*4]
$LN39@print_data:

; 84   :     { case REAL_TYPE:
; 85   :           sprintf(dest,
; 86   : #ifdef FLOAT128
; 87   :               "%2.*Qg",DPREC,*(REAL *)src);
; 88   : #elif defined(LONGDOUBLE)
; 89   :               "%2.*Lg",DPREC,*(REAL *)src);
; 90   : #else
; 91   :               "%2.15g",*(REAL *)src);

	fld	QWORD PTR [esi]
	mov	eax, DWORD PTR _dest$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_06IINOEEKG@?$CF2?415g?$AA@
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H
	pop	esi

; 183  :      }
; 184  : } // print_data_value()

	pop	ebp
	ret	0
$LN38@print_data:

; 92   : #endif
; 93   :           break; 
; 94   :        case INTEGER_TYPE:
; 95   :             sprintf(dest,"%d",*(int*)src);

	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR _dest$[ebp]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	edx
	call	_sprintf

; 182  :             kb_error(3667,errmsg,RECOVERABLE);

	add	esp, 12					; 0000000cH
	pop	esi

; 183  :      }
; 184  : } // print_data_value()

	pop	ebp
	ret	0
$LN37@print_data:

; 96   :             break;
; 97   :        case UINT_TYPE:
; 98   :             sprintf(dest,"%u",*(unsigned int*)src);

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR _dest$[ebp]
	push	eax
	push	OFFSET ??_C@_02GMHACPFF@?$CFu?$AA@
	push	ecx
	call	_sprintf

; 182  :             kb_error(3667,errmsg,RECOVERABLE);

	add	esp, 12					; 0000000cH
	pop	esi

; 183  :      }
; 184  : } // print_data_value()

	pop	ebp
	ret	0
$LN36@print_data:

; 99   :             break;
; 100  :        case CHAR_TYPE:
; 101  :             sprintf(dest,"%d",*(char*)src);

	movsx	edx, BYTE PTR [esi]
	mov	eax, DWORD PTR _dest$[ebp]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	eax
	call	_sprintf

; 182  :             kb_error(3667,errmsg,RECOVERABLE);

	add	esp, 12					; 0000000cH
	pop	esi

; 183  :      }
; 184  : } // print_data_value()

	pop	ebp
	ret	0
$LN35@print_data:

; 102  :             break;
; 103  :        case UCHAR_TYPE:
; 104  :             sprintf(dest,"%u",*(unsigned char*)src);

	movzx	ecx, BYTE PTR [esi]
	mov	edx, DWORD PTR _dest$[ebp]
	push	ecx
	push	OFFSET ??_C@_02GMHACPFF@?$CFu?$AA@
	push	edx
	call	_sprintf

; 182  :             kb_error(3667,errmsg,RECOVERABLE);

	add	esp, 12					; 0000000cH
	pop	esi

; 183  :      }
; 184  : } // print_data_value()

	pop	ebp
	ret	0
$LN34@print_data:

; 105  :             break;
; 106  :        case SHORT_TYPE:
; 107  :             sprintf(dest,"%d",*(short int*)src);

	movsx	eax, WORD PTR [esi]
	mov	ecx, DWORD PTR _dest$[ebp]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	ecx
	call	_sprintf

; 182  :             kb_error(3667,errmsg,RECOVERABLE);

	add	esp, 12					; 0000000cH
	pop	esi

; 183  :      }
; 184  : } // print_data_value()

	pop	ebp
	ret	0
$LN33@print_data:

; 108  :             break;
; 109  :        case USHORT_TYPE:
; 110  :             sprintf(dest,"%u",*(unsigned short int*)src);

	movzx	edx, WORD PTR [esi]
	mov	eax, DWORD PTR _dest$[ebp]
	push	edx
	push	OFFSET ??_C@_02GMHACPFF@?$CFu?$AA@
	push	eax
	call	_sprintf

; 182  :             kb_error(3667,errmsg,RECOVERABLE);

	add	esp, 12					; 0000000cH
	pop	esi

; 183  :      }
; 184  : } // print_data_value()

	pop	ebp
	ret	0
$LN32@print_data:

; 111  :             break;
; 112  :        case LONG_TYPE:
; 113  :             sprintf(dest,"%ld",*(long int*)src);

	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR _dest$[ebp]
	push	ecx
	push	OFFSET ??_C@_03JALODAI@?$CFld?$AA@
	push	edx
	call	_sprintf

; 182  :             kb_error(3667,errmsg,RECOVERABLE);

	add	esp, 12					; 0000000cH
	pop	esi

; 183  :      }
; 184  : } // print_data_value()

	pop	ebp
	ret	0
$LN31@print_data:

; 114  :             break;
; 115  :        case ULONG_TYPE:
; 116  :             sprintf(dest,"%lu",*(unsigned long int*)src);

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR _dest$[ebp]
	push	eax
	push	OFFSET ??_C@_03FKNCMABI@?$CFlu?$AA@
	push	ecx
	call	_sprintf

; 182  :             kb_error(3667,errmsg,RECOVERABLE);

	add	esp, 12					; 0000000cH
	pop	esi

; 183  :      }
; 184  : } // print_data_value()

	pop	ebp
	ret	0
$LN30@print_data:

; 117  :             break;
; 118  :        case STRING_TYPE: 
; 119  :             if ( *(char**)src == NULL )

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	jne	SHORT $LN29@print_data

; 120  :               strcpy(dest,"\"\"");

	mov	dx, WORD PTR ??_C@_02JMMFPCED@?$CC?$CC?$AA@
	mov	eax, DWORD PTR _dest$[ebp]
	mov	WORD PTR [eax], dx
	mov	cl, BYTE PTR ??_C@_02JMMFPCED@?$CC?$CC?$AA@+2
	mov	BYTE PTR [eax+2], cl
	pop	esi

; 183  :      }
; 184  : } // print_data_value()

	pop	ebp
	ret	0
$LN29@print_data:

; 121  :             else if ( mode == PRINT_DUMP )

	cmp	DWORD PTR _mode$[ebp], 1002		; 000003eaH
	jne	SHORT $LN27@print_data

; 122  :               convert_string(*(char**)src,dest,maxspace);

	mov	edx, DWORD PTR _maxspace$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	push	edx
	push	ecx
	push	eax
	call	_convert_string

; 182  :             kb_error(3667,errmsg,RECOVERABLE);

	add	esp, 12					; 0000000cH
	pop	esi

; 183  :      }
; 184  : } // print_data_value()

	pop	ebp
	ret	0
$LN27@print_data:

; 123  :             else
; 124  :             { if ( strlen(*(char**)src) > maxspace-5 )

	lea	edx, DWORD PTR [eax+1]
$LL61@print_data:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL61@print_data
	sub	eax, edx
	mov	edx, DWORD PTR _maxspace$[ebp]
	add	edx, -5					; fffffffbH
	cmp	eax, edx
	jbe	SHORT $LN25@print_data

; 125  :                 kb_error(6222,"String length exceeds maximum length.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CH@DHMEAAKB@String?5length?5exceeds?5maximum?5le@
	push	6222					; 0000184eH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN25@print_data:

; 126  :               sprintf(dest,"\"%s\"",*(char**)src);

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR _dest$[ebp]
	push	eax
	push	OFFSET ??_C@_04OEDFLLKD@?$CC?$CFs?$CC?$AA@
	push	ecx
	call	_sprintf

; 182  :             kb_error(3667,errmsg,RECOVERABLE);

	add	esp, 12					; 0000000cH
	pop	esi

; 183  :      }
; 184  : } // print_data_value()

	pop	ebp
	ret	0
$LN24@print_data:

; 127  :             }
; 128  :             break;
; 129  :        case PTR_TYPE:
; 130  :             sprintf(dest,"%p",*(char**)src);

	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR _dest$[ebp]
	push	edx
	push	OFFSET ??_C@_02BBAHNLBA@?$CFp?$AA@
	push	eax
	call	_sprintf

; 182  :             kb_error(3667,errmsg,RECOVERABLE);

	add	esp, 12					; 0000000cH
	pop	esi

; 183  :      }
; 184  : } // print_data_value()

	pop	ebp
	ret	0
$LN23@print_data:

; 131  :             break;
; 132  :        case VERTEX_TYPE:
; 133  :             if ( valid_id(*(element_id*)src) )

	mov	esi, DWORD PTR [esi]
	test	esi, 268435456				; 10000000H
	je	SHORT $LN22@print_data

; 134  :               sprintf(dest,"vertex[%s]",ELNAME(*(element_id*)src));

	and	esi, 134217727				; 07ffffffH
	inc	esi
	push	esi
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	mov	ecx, DWORD PTR _dest$[ebp]
	push	OFFSET _elnames
	push	OFFSET ??_C@_0L@PMBMNFIG@vertex?$FL?$CFs?$FN?$AA@
	push	ecx
	call	_sprintf
	add	esp, 24					; 00000018H
	pop	esi

; 183  :      }
; 184  : } // print_data_value()

	pop	ebp
	ret	0
$LN22@print_data:

; 135  :             else 
; 136  :               sprintf(dest,"none");

	mov	edx, DWORD PTR _dest$[ebp]
	push	OFFSET ??_C@_04CGFJFPFD@none?$AA@
	push	edx
	call	_sprintf
	add	esp, 8
	pop	esi

; 183  :      }
; 184  : } // print_data_value()

	pop	ebp
	ret	0
$LN20@print_data:

; 137  :             break;
; 138  :        case EDGE_TYPE:
; 139  :             if ( valid_id(*(element_id*)src) )

	mov	esi, DWORD PTR [esi]
	test	esi, 268435456				; 10000000H
	je	SHORT $LN19@print_data

; 140  :               sprintf(dest,"edge[%s]",ELNAME(*(element_id*)src));

	and	esi, 134217727				; 07ffffffH
	inc	esi
	push	esi
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	mov	eax, DWORD PTR _dest$[ebp]
	push	OFFSET _elnames
	push	OFFSET ??_C@_08MMAGDJLP@edge?$FL?$CFs?$FN?$AA@
	push	eax
	call	_sprintf
	add	esp, 24					; 00000018H
	pop	esi

; 183  :      }
; 184  : } // print_data_value()

	pop	ebp
	ret	0
$LN19@print_data:

; 141  :             else 
; 142  :               sprintf(dest,"none");

	mov	ecx, DWORD PTR _dest$[ebp]
	push	OFFSET ??_C@_04CGFJFPFD@none?$AA@
	push	ecx
	call	_sprintf
	add	esp, 8
	pop	esi

; 183  :      }
; 184  : } // print_data_value()

	pop	ebp
	ret	0
$LN17@print_data:

; 143  :             break;
; 144  :        case FACET_TYPE:
; 145  :             if ( valid_id(*(element_id*)src) )

	mov	esi, DWORD PTR [esi]
	test	esi, 268435456				; 10000000H
	je	SHORT $LN16@print_data

; 146  :               sprintf(dest,"facet[%s]",ELNAME(*(element_id*)src));

	and	esi, 134217727				; 07ffffffH
	inc	esi
	push	esi
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	mov	edx, DWORD PTR _dest$[ebp]
	push	OFFSET _elnames
	push	OFFSET ??_C@_09BNEAKJFC@facet?$FL?$CFs?$FN?$AA@
	push	edx
	call	_sprintf
	add	esp, 24					; 00000018H
	pop	esi

; 183  :      }
; 184  : } // print_data_value()

	pop	ebp
	ret	0
$LN16@print_data:

; 147  :             else 
; 148  :               sprintf(dest,"none");

	mov	eax, DWORD PTR _dest$[ebp]
	push	OFFSET ??_C@_04CGFJFPFD@none?$AA@
	push	eax
	call	_sprintf
	add	esp, 8
	pop	esi

; 183  :      }
; 184  : } // print_data_value()

	pop	ebp
	ret	0
$LN14@print_data:

; 149  :             break;
; 150  :        case BODY_TYPE:
; 151  :             if ( valid_id(*(element_id*)src) )

	mov	esi, DWORD PTR [esi]
	test	esi, 268435456				; 10000000H
	je	$LN22@print_data

; 152  :               sprintf(dest,"body[%s]",ELNAME(*(element_id*)src));

	and	esi, 134217727				; 07ffffffH
	inc	esi
	push	esi
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	mov	ecx, DWORD PTR _dest$[ebp]
	push	OFFSET _elnames
	push	OFFSET ??_C@_08LAPBJAFN@body?$FL?$CFs?$FN?$AA@
	push	ecx
	call	_sprintf
	add	esp, 24					; 00000018H
	pop	esi

; 183  :      }
; 184  : } // print_data_value()

	pop	ebp
	ret	0
$LN11@print_data:

; 153  :             else 
; 154  :               sprintf(dest,"none");
; 155  :             break;
; 156  :        case FACETEDGE_TYPE:
; 157  :             if ( valid_id(*(element_id*)src) )

	mov	esi, DWORD PTR [esi]
	test	esi, 268435456				; 10000000H
	je	$LN19@print_data

; 158  :               sprintf(dest,"facetedge[%s]",ELNAME(*(element_id*)src));

	and	esi, 134217727				; 07ffffffH
	inc	esi
	push	esi
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	mov	eax, DWORD PTR _dest$[ebp]
	push	OFFSET _elnames
	push	OFFSET ??_C@_0O@NNCDDCPC@facetedge?$FL?$CFs?$FN?$AA@
	push	eax
	call	_sprintf
	add	esp, 24					; 00000018H
	pop	esi

; 183  :      }
; 184  : } // print_data_value()

	pop	ebp
	ret	0
$LN8@print_data:

; 159  :             else 
; 160  :               sprintf(dest,"none");
; 161  :             break;
; 162  :        case BOUNDARY_TYPE:
; 163  :             sprintf(dest,"%s",web.boundaries[*(int*)src].name);

	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR _dest$[ebp]
	imul	edx, 136				; 00000088H
	add	edx, DWORD PTR _web+776
	push	edx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	eax
	call	_sprintf

; 182  :             kb_error(3667,errmsg,RECOVERABLE);

	add	esp, 12					; 0000000cH
	pop	esi

; 183  :      }
; 184  : } // print_data_value()

	pop	ebp
	ret	0
$LN7@print_data:

; 164  :             break;
; 165  :        case CONSTRAINT_TYPE:
; 166  :             sprintf(dest,"%s",get_constraint(*(int*)src)->name);

	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR _dest$[ebp]
	and	ecx, 1073741823				; 3fffffffH
	imul	ecx, 176				; 000000b0H
	add	ecx, DWORD PTR _web+652
	push	ecx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	edx
	call	_sprintf

; 182  :             kb_error(3667,errmsg,RECOVERABLE);

	add	esp, 12					; 0000000cH
	pop	esi

; 183  :      }
; 184  : } // print_data_value()

	pop	ebp
	ret	0
$LN6@print_data:

; 167  :             break;
; 168  :        case QUANTITY_TYPE:
; 169  :             sprintf(dest,"%s",GEN_QUANT(*(int*)src)->name);

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR _dest$[ebp]
	imul	eax, 368				; 00000170H
	add	eax, DWORD PTR _gen_quant_list
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	ecx
	call	_sprintf

; 182  :             kb_error(3667,errmsg,RECOVERABLE);

	add	esp, 12					; 0000000cH
	pop	esi

; 183  :      }
; 184  : } // print_data_value()

	pop	ebp
	ret	0
$LN5@print_data:

; 170  :             break;
; 171  :        case INSTANCE_TYPE:
; 172  :             sprintf(dest,"%s",METH_INSTANCE(*(int*)src)->name);

	mov	eax, DWORD PTR [esi]
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	edx, DWORD PTR _dest$[ebp]
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	edx
	call	_sprintf

; 182  :             kb_error(3667,errmsg,RECOVERABLE);

	add	esp, 12					; 0000000cH
	pop	esi

; 183  :      }
; 184  : } // print_data_value()

	pop	ebp
	ret	0
$LN4@print_data:

; 173  :             break;
; 174  :        case PROCEDURE_TYPE:
; 175  :             sprintf(dest,"%s",globals(*(int*)src)->name);

	mov	eax, DWORD PTR [esi]
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN55@print_data
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN57@print_data
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _dest$[ebp]
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	ecx
	call	_sprintf

; 182  :             kb_error(3667,errmsg,RECOVERABLE);

	add	esp, 12					; 0000000cH
	pop	esi

; 183  :      }
; 184  : } // print_data_value()

	pop	ebp
	ret	0
$LN57@print_data:

; 173  :             break;
; 174  :        case PROCEDURE_TYPE:
; 175  :             sprintf(dest,"%s",globals(*(int*)src)->name);

	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN55@print_data
	mov	edx, DWORD PTR _web+5656
	mov	ecx, DWORD PTR _dest$[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	ecx
	call	_sprintf

; 182  :             kb_error(3667,errmsg,RECOVERABLE);

	add	esp, 12					; 0000000cH
	pop	esi

; 183  :      }
; 184  : } // print_data_value()

	pop	ebp
	ret	0
$LN55@print_data:

; 173  :             break;
; 174  :        case PROCEDURE_TYPE:
; 175  :             sprintf(dest,"%s",globals(*(int*)src)->name);

	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR _dest$[ebp]
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	ecx
	call	_sprintf

; 182  :             kb_error(3667,errmsg,RECOVERABLE);

	add	esp, 12					; 0000000cH
	pop	esi

; 183  :      }
; 184  : } // print_data_value()

	pop	ebp
	ret	0
$LN3@print_data:

; 176  :             break;
; 177  :        default: 
; 178  :             if ( type >= 0 && type < NUMDATATYPES )

	cmp	eax, 24					; 00000018H
	ja	SHORT $LN2@print_data

; 179  :              sprintf(errmsg,"Printing of type \"%s\" not implemented.\n",
; 180  :               datatype_name[type]);

	mov	edx, DWORD PTR _datatype_name[eax*4]
	push	edx
	push	OFFSET ??_C@_0CI@BIFFKDPI@Printing?5of?5type?5?$CC?$CFs?$CC?5not?5implem@
	jmp	SHORT $LN63@print_data
$LN2@print_data:

; 181  :             else sprintf(errmsg,"Illegal datatype %d\n",type);

	push	eax
	push	OFFSET ??_C@_0BF@MOPLMDLF@Illegal?5datatype?5?$CFd?6?$AA@
$LN63@print_data:
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 12					; 0000000cH

; 182  :             kb_error(3667,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	3667					; 00000e53H
	call	_kb_error
	add	esp, 12					; 0000000cH
	pop	esi

; 183  :      }
; 184  : } // print_data_value()

	pop	ebp
	ret	0
	npad	3
$LN64@print_data:
	DD	$LN39@print_data
	DD	$LN38@print_data
	DD	$LN31@print_data
	DD	$LN35@print_data
	DD	$LN33@print_data
	DD	$LN37@print_data
	DD	$LN32@print_data
	DD	$LN36@print_data
	DD	$LN34@print_data
	DD	$LN3@print_data
	DD	$LN30@print_data
	DD	$LN24@print_data
	DD	$LN23@print_data
	DD	$LN20@print_data
	DD	$LN17@print_data
	DD	$LN14@print_data
	DD	$LN11@print_data
	DD	$LN3@print_data
	DD	$LN8@print_data
	DD	$LN7@print_data
	DD	$LN6@print_data
	DD	$LN5@print_data
	DD	$LN4@print_data
_print_data_value ENDP
_TEXT	ENDS
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??_C@_02MLAGHBOD@?0?6?$AA@			; `string'
PUBLIC	??_C@_01CELHOKLL@?$HN?$AA@			; `string'
PUBLIC	??_C@_02JIKNIHJJ@?6?5?$AA@			; `string'
PUBLIC	??_C@_01IHBHIGKO@?0?$AA@			; `string'
PUBLIC	??_C@_01HCONENDN@?$HL?$AA@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	_a$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_print_array
EXTRN	_breakflag:DWORD
EXTRN	_outstring:PROC
EXTRN	_msgmax:DWORD
EXTRN	_msg:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MLAGHBOD@?0?6?$AA@
CONST	SEGMENT
??_C@_02MLAGHBOD@?0?6?$AA@ DB ',', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01CELHOKLL@?$HN?$AA@
CONST	SEGMENT
??_C@_01CELHOKLL@?$HN?$AA@ DB '}', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JIKNIHJJ@?6?5?$AA@
CONST	SEGMENT
??_C@_02JIKNIHJJ@?6?5?$AA@ DB 0aH, ' ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01IHBHIGKO@?0?$AA@
CONST	SEGMENT
??_C@_01IHBHIGKO@?0?$AA@ DB ',', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HCONENDN@?$HL?$AA@
CONST	SEGMENT
??_C@_01HCONENDN@?$HL?$AA@ DB '{', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _print_array
_TEXT	SEGMENT
_depth$ = -420						; size = 4
_k$ = -416						; size = 4
_spot$ = -412						; size = 4
_a$GSCopy$ = -408					; size = 4
_spots$ = -404						; size = 400
__$ArrayPad$ = -4					; size = 4
_a$ = 8							; size = 4
_datastart$ = 12					; size = 4
_mode$ = 16						; size = 4
_print_array PROC					; COMDAT

; 198  : { int k;

	push	ebp
	mov	ebp, esp
	sub	esp, 420				; 000001a4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _datastart$[ebp]
	push	esi
	mov	esi, DWORD PTR _a$[ebp]
	push	edi

; 241  : 
; 242  :     if ( breakflag ) break;  /* in case of runaway print, user interrupt */

	mov	DWORD PTR _a$GSCopy$[ebp], esi
	test	eax, eax
	jne	SHORT $LN39@print_arra

; 199  :   int spots[100];
; 200  :   int depth;
; 201  :   char * spot;
; 202  : 
; 203  :   spot = datastart ? datastart : ((char*)a + a->datastart);

	mov	eax, DWORD PTR [esi+20]
	add	eax, esi
$LN39@print_arra:

; 204  : 
; 205  :   if ( a->dim == 0 ) 

	cmp	DWORD PTR [esi+4], 0
	mov	DWORD PTR _spot$[ebp], eax
	jne	SHORT $LN16@print_arra

; 206  :   {
; 207  :     print_data_value(msg+strlen(msg),a->datatype,spot,msgmax-100,mode);

	mov	edx, DWORD PTR _msg
	mov	eax, edx
	lea	edi, DWORD PTR [eax+1]
$LL30@print_arra:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL30@print_arra
	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _msgmax
	add	ecx, -100				; ffffff9cH
	push	ecx
	mov	ecx, DWORD PTR _spot$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [esi+8]
	sub	eax, edi
	push	ecx
	add	eax, edx
	push	eax
	call	_print_data_value

; 208  :     strcat(msg,"\n");

	mov	edi, DWORD PTR _msg
	add	esp, 20					; 00000014H
	dec	edi
$LL31@print_arra:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL31@print_arra
	mov	dx, WORD PTR ??_C@_01EEMJAFIK@?6?$AA@
	mov	WORD PTR [edi], dx

; 209  :     outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 4
	pop	edi
	pop	esi

; 245  : } /* end print_array */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@print_arra:
	push	ebx

; 210  :     return;
; 211  :   }
; 212  : 
; 213  :   outstring("{");

	push	OFFSET ??_C@_01HCONENDN@?$HL?$AA@
	call	_outstring
	add	esp, 4

; 214  :   depth = 1;

	mov	edi, 1

; 215  :   spots[depth] = 0;

	mov	DWORD PTR _spots$[ebp+4], 0
	lea	ebx, DWORD PTR [esi+24]
$LN41@print_arra:

; 214  :   depth = 1;

	mov	DWORD PTR _depth$[ebp], edi
	npad	5
$LL15@print_arra:

; 216  :   for (;;)
; 217  :   { msg[0] = 0;

	mov	ecx, DWORD PTR _msg
	mov	BYTE PTR [ecx], 0

; 218  :     if ( spots[depth] < a->sizes[depth-1] && depth < a->dim )

	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR _spots$[ebp+edi*4], eax
	jge	SHORT $LN13@print_arra
	cmp	edi, DWORD PTR [esi+4]
	jge	SHORT $LN40@print_arra

; 219  :     { outstring("{"); depth++; spots[depth] = 0; continue; }

	push	OFFSET ??_C@_01HCONENDN@?$HL?$AA@
	call	_outstring
	inc	edi
	add	esp, 4
	add	ebx, 4
	mov	DWORD PTR _spots$[ebp+edi*4], 0
	jmp	SHORT $LN41@print_arra
$LN13@print_arra:

; 220  :     if ( depth == a->dim )

	cmp	edi, DWORD PTR [esi+4]
$LN40@print_arra:
	jne	$LN12@print_arra

; 221  :     { for ( k = 0 ; k < a->sizes[depth-1] ; k++ )

	mov	esi, DWORD PTR _msg
	mov	DWORD PTR _k$[ebp], 0
	test	eax, eax
	jle	$LN9@print_arra
$LL11@print_arra:

; 222  :       { 
; 223  :         print_data_value(msg+strlen(msg),a->datatype,spot,msgmax-100,mode);

	mov	eax, esi
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL32@print_arra:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL32@print_arra
	mov	ecx, DWORD PTR _msgmax
	mov	edi, DWORD PTR _spot$[ebp]
	sub	eax, edx
	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	mov	edx, DWORD PTR _a$GSCopy$[ebp]
	add	ecx, -100				; ffffff9cH
	push	ecx
	mov	ecx, DWORD PTR [edx+8]
	push	edi
	push	ecx
	add	eax, esi
	push	eax
	call	_print_data_value

; 224  :         spot += a->itemsize;

	mov	edx, DWORD PTR _a$GSCopy$[ebp]
	add	edi, DWORD PTR [edx+12]

; 225  :         if ( k < a->sizes[depth-1] - 1 ) strcat(msg,",");

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR _spot$[ebp], edi
	mov	edi, DWORD PTR _k$[ebp]
	dec	eax
	add	esp, 20					; 00000014H
	cmp	edi, eax
	jge	SHORT $LN8@print_arra
	mov	edi, DWORD PTR _msg
	dec	edi
$LL33@print_arra:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL33@print_arra
	mov	cx, WORD PTR ??_C@_01IHBHIGKO@?0?$AA@
	mov	WORD PTR [edi], cx
	mov	edi, DWORD PTR _k$[ebp]
$LN8@print_arra:

; 226  :         if ( (strlen(msg) > 60) && (k < a->sizes[depth-1] - 1) ) 

	mov	esi, DWORD PTR _msg
	mov	eax, esi
	lea	edx, DWORD PTR [eax+1]
	npad	7
$LL34@print_arra:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL34@print_arra
	sub	eax, edx
	cmp	eax, 60					; 0000003cH
	jbe	SHORT $LN10@print_arra
	mov	edx, DWORD PTR [ebx]
	dec	edx
	cmp	edi, edx
	jge	SHORT $LN10@print_arra

; 227  :         { outstring(msg); 

	push	esi
	call	_outstring

; 228  :           strcpy(msg,"\n ");

	mov	ax, WORD PTR ??_C@_02JIKNIHJJ@?6?5?$AA@
	mov	ecx, DWORD PTR _msg
	mov	WORD PTR [ecx], ax
	mov	dl, BYTE PTR ??_C@_02JIKNIHJJ@?6?5?$AA@+2
	mov	eax, DWORD PTR _msg
	mov	BYTE PTR [eax+2], dl
	mov	esi, DWORD PTR _msg
	add	esp, 4
$LN10@print_arra:

; 221  :     { for ( k = 0 ; k < a->sizes[depth-1] ; k++ )

	inc	edi
	mov	DWORD PTR _k$[ebp], edi
	cmp	edi, DWORD PTR [ebx]
	jl	$LL11@print_arra
	mov	edi, DWORD PTR _depth$[ebp]
$LN9@print_arra:

; 229  :         }
; 230  :       }
; 231  :       outstring(msg);

	push	esi
	call	_outstring
	mov	esi, DWORD PTR _a$GSCopy$[ebp]
	add	esp, 4
$LN12@print_arra:

; 232  :     }
; 233  :     outstring("}");

	push	OFFSET ??_C@_01CELHOKLL@?$HN?$AA@
	call	_outstring

; 234  :     depth--;

	dec	edi
	add	esp, 4
	sub	ebx, 4
	mov	DWORD PTR _depth$[ebp], edi

; 235  :     if ( depth > 0 && (spots[depth]++ < a->sizes[depth-1]-1) )

	test	edi, edi
	jle	SHORT $LN42@print_arra
	mov	eax, DWORD PTR _spots$[ebp+edi*4]
	mov	ecx, DWORD PTR [ebx]
	dec	ecx
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR _spots$[ebp+edi*4], edx
	cmp	eax, ecx
	jge	SHORT $LN37@print_arra

; 236  :     { int i;
; 237  :       outstring(",\n");

	push	OFFSET ??_C@_02MLAGHBOD@?0?6?$AA@
	call	_outstring
	add	esp, 4

; 238  :       for ( i = 0 ; i < depth ; i++ ) outstring(" ");

	test	edi, edi
	jle	SHORT $LN37@print_arra

; 236  :     { int i;
; 237  :       outstring(",\n");

	mov	esi, edi
	npad	5
$LL5@print_arra:

; 238  :       for ( i = 0 ; i < depth ; i++ ) outstring(" ");

	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	call	_outstring
	add	esp, 4
	dec	esi
	jne	SHORT $LL5@print_arra
$LN37@print_arra:
	mov	esi, DWORD PTR _a$GSCopy$[ebp]

; 239  :     }
; 240  :     if ( depth == 0 ) break;

	test	edi, edi
$LN42@print_arra:
	je	SHORT $LN26@print_arra

; 241  : 
; 242  :     if ( breakflag ) break;  /* in case of runaway print, user interrupt */

	cmp	DWORD PTR _breakflag, 0

; 243  :   }

	je	$LL15@print_arra
$LN26@print_arra:

; 244  :   outstring("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring

; 245  : } /* end print_array */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 4
	pop	ebx
	pop	edi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_print_array ENDP
_TEXT	ENDS
PUBLIC	??_C@_04HOJGNNDP@?6?5?5?5?$AA@			; `string'
PUBLIC	_ex$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_print_array_attribute
;	COMDAT ??_C@_04HOJGNNDP@?6?5?5?5?$AA@
CONST	SEGMENT
??_C@_04HOJGNNDP@?6?5?5?5?$AA@ DB 0aH, '   ', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _print_array_attribute
_TEXT	SEGMENT
_spot$ = -424						; size = 4
_depth$ = -420						; size = 4
tv368 = -416						; size = 4
_ex$GSCopy$ = -412					; size = 4
_linelength$ = -408					; size = 4
_spots$ = -404						; size = 400
__$ArrayPad$ = -4					; size = 4
_ex$ = 8						; size = 4
_datastart$ = 12					; size = 4
_print_array_attribute PROC				; COMDAT

; 259  : { int k;

	push	ebp
	mov	ebp, esp
	sub	esp, 424				; 000001a8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _datastart$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _ex$[ebp]
	push	edi

; 260  :   int spots[100];
; 261  :   int depth;
; 262  :   char * spot = datastart;
; 263  :   size_t linelength;
; 264  : 
; 265  :   if ( ex->array_spec.dim == 0 ) /* scalar */

	xor	edi, edi

; 280  :     { for ( k = 0 ; k < ex->array_spec.sizes[depth-1] ; k++ )

	mov	DWORD PTR _ex$GSCopy$[ebp], ebx
	mov	DWORD PTR _spot$[ebp], eax
	cmp	DWORD PTR [ebx+76], edi
	jne	SHORT $LN13@print_arra@2

; 266  :   { print_data_value(msg,ex->type,spot,msgmax-5,PRINT_PLAIN);

	mov	ecx, DWORD PTR _msgmax
	mov	edx, DWORD PTR [ebx+68]
	push	1001					; 000003e9H
	add	ecx, -5					; fffffffbH
	push	ecx
	push	eax
	mov	eax, DWORD PTR _msg
	push	edx
	push	eax
	call	_print_data_value

; 267  :     outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 24					; 00000018H
	pop	edi
	pop	ebx

; 309  : } /* end print_array_attribute() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@print_arra@2:
	push	esi

; 268  :     return;
; 269  :   }
; 270  : 
; 271  :   outstring("{");

	push	OFFSET ??_C@_01HCONENDN@?$HL?$AA@
	call	_outstring

; 273  :   spots[depth] = 0;

	mov	DWORD PTR _spots$[ebp+4], edi

; 274  :   linelength = 0;

	mov	DWORD PTR _linelength$[ebp], edi
	add	esp, 4
	mov	esi, 1
	lea	edi, DWORD PTR [ebx+96]
$LN31@print_arra@2:

; 272  :   depth = 1;

	mov	DWORD PTR tv368[ebp], edi
	mov	DWORD PTR _depth$[ebp], esi
	npad	6
$LL12@print_arra@2:

; 275  :   for (;;)
; 276  :   { msg[0] = 0;

	mov	edx, DWORD PTR _msg
	mov	BYTE PTR [edx], 0

; 277  :     if ( (spots[depth] < ex->array_spec.sizes[depth-1]) && (depth < ex->array_spec.dim) )

	mov	eax, DWORD PTR [edi]
	cmp	DWORD PTR _spots$[ebp+esi*4], eax
	jge	SHORT $LN10@print_arra@2
	cmp	esi, DWORD PTR [ebx+76]
	jge	SHORT $LN30@print_arra@2

; 278  :     { outstring("{"); depth++; spots[depth] = 0; continue; }

	push	OFFSET ??_C@_01HCONENDN@?$HL?$AA@
	call	_outstring
	inc	esi
	add	esp, 4
	add	edi, 4
	mov	DWORD PTR _spots$[ebp+esi*4], 0
	jmp	SHORT $LN31@print_arra@2
$LN10@print_arra@2:

; 279  :     if ( depth == ex->array_spec.dim )

	cmp	esi, DWORD PTR [ebx+76]
$LN30@print_arra@2:
	jne	$LN9@print_arra@2

; 280  :     { for ( k = 0 ; k < ex->array_spec.sizes[depth-1] ; k++ )

	mov	ecx, DWORD PTR _msg
	xor	ebx, ebx
	test	eax, eax
	jle	$LN6@print_arra@2
$LL8@print_arra@2:

; 281  :       { print_data_value(msg+strlen(msg),ex->type,spot,msgmax-100,PRINT_PLAIN);

	mov	eax, ecx
	lea	esi, DWORD PTR [eax+1]
$LL22@print_arra@2:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL22@print_arra@2
	mov	edx, DWORD PTR _msgmax
	push	1001					; 000003e9H
	add	edx, -100				; ffffff9cH
	push	edx
	mov	edx, DWORD PTR _ex$GSCopy$[ebp]
	mov	edx, DWORD PTR [edx+68]
	sub	eax, esi
	mov	esi, DWORD PTR _spot$[ebp]
	push	esi
	push	edx
	add	eax, ecx
	push	eax
	call	_print_data_value

; 282  :         spot += ex->array_spec.itemsize;

	mov	eax, DWORD PTR _ex$GSCopy$[ebp]

; 283  :         if ( k < ex->array_spec.sizes[depth-1] - 1 ) 

	mov	ecx, DWORD PTR [edi]
	add	esi, DWORD PTR [eax+84]
	dec	ecx
	add	esp, 20					; 00000014H
	mov	DWORD PTR _spot$[ebp], esi
	cmp	ebx, ecx
	jge	$LN26@print_arra@2

; 284  :         { strcat(msg,",");

	mov	edi, DWORD PTR _msg
	dec	edi
	npad	6
$LL23@print_arra@2:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL23@print_arra@2
	mov	dx, WORD PTR ??_C@_01IHBHIGKO@?0?$AA@
	mov	WORD PTR [edi], dx

; 285  :           if ( linelength+strlen(msg) > 70 )

	mov	ecx, DWORD PTR _msg
	mov	eax, ecx
	lea	esi, DWORD PTR [eax+1]
	npad	3
$LL24@print_arra@2:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL24@print_arra@2
	sub	eax, esi
	add	eax, DWORD PTR _linelength$[ebp]
	cmp	eax, 70					; 00000046H
	jbe	SHORT $LN28@print_arra@2

; 286  :           { outstring(msg);

	push	ecx
	call	_outstring

; 287  :             outstring("\n   ");

	push	OFFSET ??_C@_04HOJGNNDP@?6?5?5?5?$AA@
	call	_outstring

; 288  :             linelength = 0;
; 289  :             msg[0] = 0;

	mov	eax, DWORD PTR _msg
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _msg
	add	esp, 8
	mov	DWORD PTR _linelength$[ebp], 0
$LN28@print_arra@2:
	mov	edi, DWORD PTR tv368[ebp]
$LN7@print_arra@2:

; 280  :     { for ( k = 0 ; k < ex->array_spec.sizes[depth-1] ; k++ )

	inc	ebx
	cmp	ebx, DWORD PTR [edi]
	jl	$LL8@print_arra@2
	mov	esi, DWORD PTR _depth$[ebp]
$LN6@print_arra@2:

; 290  :           }
; 291  :         } 
; 292  :       }
; 293  :       outstring(msg);

	push	ecx
	call	_outstring

; 294  :       linelength += strlen(msg);

	mov	eax, DWORD PTR _msg
	add	esp, 4
	lea	edx, DWORD PTR [eax+1]
$LL25@print_arra@2:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL25@print_arra@2
	mov	ebx, DWORD PTR _ex$GSCopy$[ebp]
	sub	eax, edx
	add	DWORD PTR _linelength$[ebp], eax
$LN9@print_arra@2:

; 295  :     }
; 296  :     
; 297  :     outstring("}");

	push	OFFSET ??_C@_01CELHOKLL@?$HN?$AA@
	call	_outstring

; 298  :     depth--;

	dec	esi
	sub	edi, 4
	add	esp, 4
	mov	DWORD PTR _depth$[ebp], esi
	mov	DWORD PTR tv368[ebp], edi

; 299  :     if ( depth > 0 && (spots[depth]++ < ex->array_spec.sizes[depth-1]-1) )

	test	esi, esi
	jle	SHORT $LN32@print_arra@2
	mov	eax, DWORD PTR _spots$[ebp+esi*4]
	mov	ecx, DWORD PTR [edi]
	dec	ecx
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR _spots$[ebp+esi*4], edx
	cmp	eax, ecx
	jge	SHORT $LN29@print_arra@2

; 300  :     { outstring(",");

	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	call	_outstring
	add	esp, 4

; 301  :       if ( linelength > 70 )

	cmp	DWORD PTR _linelength$[ebp], 70		; 00000046H
	jbe	SHORT $LN29@print_arra@2

; 302  :       { outstring("\n   ");

	push	OFFSET ??_C@_04HOJGNNDP@?6?5?5?5?$AA@
	call	_outstring
	add	esp, 4

; 303  :         linelength = 0;

	mov	DWORD PTR _linelength$[ebp], 0
$LN29@print_arra@2:
	mov	ebx, DWORD PTR _ex$GSCopy$[ebp]

; 304  :       }
; 305  :     } 
; 306  :     if ( depth == 0 ) break;

	test	esi, esi
$LN32@print_arra@2:
	jne	$LL12@print_arra@2

; 307  :   }
; 308  :   outstring(" ");

	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	call	_outstring

; 309  : } /* end print_array_attribute() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 4
	pop	esi
	pop	edi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN26@print_arra@2:

; 288  :             linelength = 0;
; 289  :             msg[0] = 0;

	mov	ecx, DWORD PTR _msg
	jmp	$LN7@print_arra@2
_print_array_attribute ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@MKDFHCFK@?$CDdefine?5?$CFs?5?$AA@	; `string'
PUBLIC	_dump_macros
EXTRN	_macro_subs:DWORD
EXTRN	_macros:DWORD
EXTRN	_macro_count:DWORD
EXTRN	_keep_macros_flag:DWORD
;	COMDAT ??_C@_0M@MKDFHCFK@?$CDdefine?5?$CFs?5?$AA@
CONST	SEGMENT
??_C@_0M@MKDFHCFK@?$CDdefine?5?$CFs?5?$AA@ DB '#define %s ', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _dump_macros
_TEXT	SEGMENT
_dump_macros PROC					; COMDAT

; 906  : 
; 907  :   if ( !keep_macros_flag ) return;

	cmp	DWORD PTR _keep_macros_flag, 0
	je	$LN5@dump_macro

; 908  :   outstring("\n");

	push	edi
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring

; 909  :   for ( n = 0 ; n < macro_count ; n++ )

	xor	edi, edi
	add	esp, 4
	cmp	DWORD PTR _macro_count, edi
	jle	SHORT $LN1@dump_macro

; 908  :   outstring("\n");

	push	esi
	xor	esi, esi
	npad	8
$LL3@dump_macro:

; 910  :   { sprintf(msg,"#define %s ",macros[n].name);

	mov	eax, DWORD PTR _macros
	mov	edx, DWORD PTR _msg
	lea	ecx, DWORD PTR [esi+eax]
	push	ecx
	push	OFFSET ??_C@_0M@MKDFHCFK@?$CDdefine?5?$CFs?5?$AA@
	push	edx
	call	_sprintf

; 911  :      outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring

; 912  :      outstring(macro_subs+macros[n].offset);

	mov	ecx, DWORD PTR _macros
	mov	edx, DWORD PTR [esi+ecx+32]
	add	edx, DWORD PTR _macro_subs
	push	edx
	call	_outstring

; 913  :      outstring("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	inc	edi
	add	esp, 24					; 00000018H
	add	esi, 40					; 00000028H
	cmp	edi, DWORD PTR _macro_count
	jl	SHORT $LL3@dump_macro
	pop	esi
$LN1@dump_macro:

; 914  :   }
; 915  :   outstring("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	add	esp, 4
	pop	edi
$LN5@dump_macro:

; 916  : 
; 917  : } // end dump_macros()

	ret	0
_dump_macros ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@JKKDELHO@form_integrand?3?5?6?$AA@	; `string'
PUBLIC	??_C@_0CG@OILKINLB@k_vector_order?5?$CFd?6vector_integra@ ; `string'
PUBLIC	??_C@_06CECNODIB@Q?$CF1d?3?5?$AA@		; `string'
PUBLIC	??_C@_0BE@FFCMACEA@vector_integrand?3?5?6?$AA@	; `string'
PUBLIC	??_C@_0BD@FFHMJOPF@scalar_integrand?3?5?$AA@	; `string'
PUBLIC	??_C@_0BF@HDCJNGOG@?5parameter_1?5?$CF3?415g?5?$AA@ ; `string'
PUBLIC	??_C@_0BB@KHBFAOKE@?5modulus?5?$CF3?415g?5?$AA@	; `string'
PUBLIC	__real@3ff0000000000000
PUBLIC	??_C@_0BC@BKOFLJD@?5element_modulus?5?$AA@	; `string'
PUBLIC	??_C@_0BC@FFFNFGHJ@?5calculate_in_3d?5?$AA@	; `string'
PUBLIC	??_C@_0P@EDHOAPAJ@?5ignore_fixed?5?$AA@		; `string'
PUBLIC	??_C@_0BF@HKBHGILO@?5ignore_constraints?5?$AA@	; `string'
PUBLIC	??_C@_08EALMPJOD@?5global?5?$AA@		; `string'
PUBLIC	_dump_method_specs
EXTRN	_print_express:PROC
EXTRN	_basic_gen_methods:BYTE
;	COMDAT ??_C@_0BC@JKKDELHO@form_integrand?3?5?6?$AA@
CONST	SEGMENT
??_C@_0BC@JKKDELHO@form_integrand?3?5?6?$AA@ DB 'form_integrand: ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@OILKINLB@k_vector_order?5?$CFd?6vector_integra@
CONST	SEGMENT
??_C@_0CG@OILKINLB@k_vector_order?5?$CFd?6vector_integra@ DB 'k_vector_or'
	DB	'der %d', 0aH, 'vector_integrand: ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06CECNODIB@Q?$CF1d?3?5?$AA@
CONST	SEGMENT
??_C@_06CECNODIB@Q?$CF1d?3?5?$AA@ DB 'Q%1d: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FFCMACEA@vector_integrand?3?5?6?$AA@
CONST	SEGMENT
??_C@_0BE@FFCMACEA@vector_integrand?3?5?6?$AA@ DB 'vector_integrand: ', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FFHMJOPF@scalar_integrand?3?5?$AA@
CONST	SEGMENT
??_C@_0BD@FFHMJOPF@scalar_integrand?3?5?$AA@ DB 'scalar_integrand: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HDCJNGOG@?5parameter_1?5?$CF3?415g?5?$AA@
CONST	SEGMENT
??_C@_0BF@HDCJNGOG@?5parameter_1?5?$CF3?415g?5?$AA@ DB ' parameter_1 %3.1'
	DB	'5g ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KHBFAOKE@?5modulus?5?$CF3?415g?5?$AA@
CONST	SEGMENT
??_C@_0BB@KHBFAOKE@?5modulus?5?$CF3?415g?5?$AA@ DB ' modulus %3.15g ', 00H ; `string'
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT ??_C@_0BC@BKOFLJD@?5element_modulus?5?$AA@
CONST	SEGMENT
??_C@_0BC@BKOFLJD@?5element_modulus?5?$AA@ DB ' element_modulus ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FFFNFGHJ@?5calculate_in_3d?5?$AA@
CONST	SEGMENT
??_C@_0BC@FFFNFGHJ@?5calculate_in_3d?5?$AA@ DB ' calculate_in_3d ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EDHOAPAJ@?5ignore_fixed?5?$AA@
CONST	SEGMENT
??_C@_0P@EDHOAPAJ@?5ignore_fixed?5?$AA@ DB ' ignore_fixed ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HKBHGILO@?5ignore_constraints?5?$AA@
CONST	SEGMENT
??_C@_0BF@HKBHGILO@?5ignore_constraints?5?$AA@ DB ' ignore_constraints ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EALMPJOD@?5global?5?$AA@
CONST	SEGMENT
??_C@_08EALMPJOD@?5global?5?$AA@ DB ' global ', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _dump_method_specs
_TEXT	SEGMENT
_meth$ = 8						; size = 4
_dump_method_specs PROC					; COMDAT

; 927  : {

	push	ebp
	mov	ebp, esp

; 928  :   struct method_instance *mi = METH_INSTANCE(meth);

	mov	eax, DWORD PTR _meth$[ebp]
	push	esi
	cdq
	mov	esi, eax
	xor	esi, edx
	sub	esi, edx
	imul	esi, 2928				; 00000b70H
	add	esi, DWORD PTR _meth_inst_list
	push	edi

; 929  :   int j;
; 930  : 
; 931  :   if ( mi->flags & GLOBAL_INST ) outstring(" global ");

	test	DWORD PTR [esi+140], 1073741824		; 40000000H
	je	SHORT $LN20@dump_metho
	push	OFFSET ??_C@_08EALMPJOD@?5global?5?$AA@
	call	_outstring
	add	esp, 4
$LN20@dump_metho:

; 932  :   if ( mi->flags & IGNORE_CONSTR ) outstring(" ignore_constraints ");

	test	DWORD PTR [esi+140], 33554432		; 02000000H
	je	SHORT $LN19@dump_metho
	push	OFFSET ??_C@_0BF@HKBHGILO@?5ignore_constraints?5?$AA@
	call	_outstring
	add	esp, 4
$LN19@dump_metho:

; 933  :   if ( mi->flags & IGNORE_FIXED ) outstring(" ignore_fixed ");

	test	DWORD PTR [esi+140], 134217728		; 08000000H
	je	SHORT $LN18@dump_metho
	push	OFFSET ??_C@_0P@EDHOAPAJ@?5ignore_fixed?5?$AA@
	call	_outstring
	add	esp, 4
$LN18@dump_metho:

; 934  :   if ( mi->flags & CALC_IN_3D ) outstring(" calculate_in_3d ");

	push	ebx
	mov	bl, 1
	test	BYTE PTR [esi+140], bl
	je	SHORT $LN17@dump_metho
	push	OFFSET ??_C@_0BC@FFFNFGHJ@?5calculate_in_3d?5?$AA@
	call	_outstring
	add	esp, 4
$LN17@dump_metho:

; 935  :   if ( mi->flags & ELEMENT_MODULUS_FLAG )

	test	DWORD PTR [esi+140], 268435456		; 10000000H
	je	SHORT $LN16@dump_metho

; 936  :   {  outstring(" element_modulus ");

	push	OFFSET ??_C@_0BC@BKOFLJD@?5element_modulus?5?$AA@
	call	_outstring

; 937  :      outstring(EXTRAS(mi->type)[mi->elmodulus].name);

	mov	eax, DWORD PTR [esi+136]
	mov	ecx, DWORD PTR [esi+228]
	imul	eax, 112				; 00000070H
	mov	edx, DWORD PTR _web[eax+104]
	imul	ecx, 240				; 000000f0H
	add	edx, ecx
	add	edx, DWORD PTR _dymem
	push	edx
	call	_outstring
	add	esp, 8
$LN16@dump_metho:

; 938  :   }
; 939  :   if ( mi->modulus != 1.0 )

	fld	QWORD PTR [esi+304]
	fld1
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN15@dump_metho

; 940  :      { 
; 941  : #ifdef FLOAT128
; 942  :         sprintf(msg," modulus %3.*Qg ",DPREC,mi->modulus);
; 943  : #elif defined(LONGDOUBLE)
; 944  :         sprintf(msg," modulus %3.*Lg ",DPREC,mi->modulus);
; 945  : #else
; 946  :         sprintf(msg," modulus %3.15g ",mi->modulus);

	fld	QWORD PTR [esi+304]
	mov	eax, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BB@KHBFAOKE@?5modulus?5?$CF3?415g?5?$AA@
	push	eax
	call	_sprintf

; 947  : #endif 
; 948  :         outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 20					; 00000014H
$LN15@dump_metho:

; 949  :      }
; 950  :   if ( mi->flags & METH_PARAMETER_1 )

	test	DWORD PTR [esi+140], 8388608		; 00800000H
	je	SHORT $LN14@dump_metho

; 951  :   { 
; 952  : #ifdef FLOAT128
; 953  :      sprintf(msg," parameter_1 %3.*Lg ",DPREC,mi->parameter_1);
; 954  : #elif defined(LONGDOUBLE)
; 955  :      sprintf(msg," parameter_1 %3.*Lg ",DPREC,mi->parameter_1);
; 956  : #else
; 957  :      sprintf(msg," parameter_1 %3.15g ",mi->parameter_1);

	fld	QWORD PTR [esi+2904]
	mov	edx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BF@HDCJNGOG@?5parameter_1?5?$CF3?415g?5?$AA@
	push	edx
	call	_sprintf

; 958  : #endif 
; 959  :      outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 20					; 00000014H
$LN14@dump_metho:

; 960  :   }
; 961  :   outstring("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring

; 962  :   if ( basic_gen_methods[mi->gen_method].spec_flags & SPEC_SCALAR )

	mov	eax, DWORD PTR [esi+148]
	lea	ecx, DWORD PTR [eax+eax*4]
	shl	ecx, 5
	add	esp, 4
	test	BYTE PTR _basic_gen_methods[ecx+136], bl
	je	SHORT $LN29@dump_metho

; 963  :     { outstring("scalar_integrand: ");

	push	OFFSET ??_C@_0BD@FFHMJOPF@scalar_integrand?3?5?$AA@
	call	_outstring

; 964  :       outstring(print_express(mi->expr[0],'X'));

	mov	edx, DWORD PTR [esi+232]
	push	88					; 00000058H
	push	edx
	call	_print_express
	push	eax
	call	_outstring

; 965  :       outstring("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	add	esp, 20					; 00000014H
$LN29@dump_metho:

; 966  :     }
; 967  :   if ( basic_gen_methods[mi->gen_method].spec_flags & SPEC_VECTOR )

	mov	eax, DWORD PTR [esi+148]
	lea	eax, DWORD PTR [eax+eax*4]
	shl	eax, 5
	test	BYTE PTR _basic_gen_methods[eax+136], 2
	je	SHORT $LN30@dump_metho

; 968  :     { outstring("vector_integrand: \n");

	push	OFFSET ??_C@_0BE@FFCMACEA@vector_integrand?3?5?6?$AA@
	call	_outstring

; 969  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	add	esp, 4
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN30@dump_metho

; 968  :     { outstring("vector_integrand: \n");

	lea	ebx, DWORD PTR [esi+232]
$LL11@dump_metho:

; 970  :         { sprintf(msg,"Q%1d: ",j+1); outstring(msg); 

	mov	ecx, DWORD PTR _msg
	lea	edi, DWORD PTR [eax+1]
	push	edi
	push	OFFSET ??_C@_06CECNODIB@Q?$CF1d?3?5?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 971  :           outstring(print_express(mi->expr[j],'X'));

	mov	eax, DWORD PTR [ebx]
	push	88					; 00000058H
	push	eax
	call	_print_express
	push	eax
	call	_outstring

; 972  :           outstring("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	mov	eax, edi
	add	esp, 32					; 00000020H
	add	ebx, 4
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LL11@dump_metho
$LN30@dump_metho:

; 973  :         }
; 974  :     }
; 975  :   if ( basic_gen_methods[mi->gen_method].spec_flags & SPEC_KVECTOR )

	mov	eax, DWORD PTR [esi+148]
	lea	ecx, DWORD PTR [eax+eax*4]
	shl	ecx, 5
	test	BYTE PTR _basic_gen_methods[ecx+136], 64 ; 00000040H
	je	$LN5@dump_metho

; 976  :     { sprintf(msg,"k_vector_order %d\nvector_integrand: \n",mi->vec_order);

	mov	edx, DWORD PTR [esi+224]
	mov	eax, DWORD PTR _msg
	push	edx
	push	OFFSET ??_C@_0CG@OILKINLB@k_vector_order?5?$CFd?6vector_integra@
	push	eax
	call	_sprintf

; 977  :       outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring

; 978  :       for ( j = 0 ; j < (SDIM-mi->vec_order)*SDIM ; j++ )

	mov	ecx, DWORD PTR _web+616
	mov	edx, ecx
	sub	edx, DWORD PTR [esi+224]
	add	esp, 16					; 00000010H
	imul	edx, ecx
	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN5@dump_metho

; 976  :     { sprintf(msg,"k_vector_order %d\nvector_integrand: \n",mi->vec_order);

	lea	ebx, DWORD PTR [esi+232]
	npad	8
$LL7@dump_metho:

; 979  :         { sprintf(msg,"Q%1d: ",j+1); outstring(msg); 

	lea	edi, DWORD PTR [eax+1]
	mov	eax, DWORD PTR _msg
	push	edi
	push	OFFSET ??_C@_06CECNODIB@Q?$CF1d?3?5?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring

; 980  :           outstring(print_express(mi->expr[j],'X'));

	mov	edx, DWORD PTR [ebx]
	push	88					; 00000058H
	push	edx
	call	_print_express
	push	eax
	call	_outstring

; 981  :           outstring("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	mov	ecx, DWORD PTR _web+616
	mov	edx, ecx
	sub	edx, DWORD PTR [esi+224]
	mov	eax, edi
	imul	edx, ecx
	add	esp, 32					; 00000020H
	add	ebx, 4
	cmp	eax, edx
	jl	SHORT $LL7@dump_metho
$LN5@dump_metho:

; 982  :         }
; 983  :     }
; 984  :   if ( basic_gen_methods[mi->gen_method].spec_flags & SPEC_2FORM )

	mov	eax, DWORD PTR [esi+148]
	lea	eax, DWORD PTR [eax+eax*4]
	shl	eax, 5
	test	BYTE PTR _basic_gen_methods[eax+136], 4
	pop	ebx
	je	$LN1@dump_metho

; 985  :     { outstring("form_integrand: \n");

	push	OFFSET ??_C@_0BC@JKKDELHO@form_integrand?3?5?6?$AA@
	call	_outstring

; 986  :       for ( j = 0 ; j < (SDIM*(SDIM-1))/2 ; j++ )

	mov	edx, DWORD PTR _web+616
	lea	eax, DWORD PTR [edx-1]
	imul	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	add	esp, 4
	xor	ecx, ecx
	test	eax, eax
	jle	SHORT $LN1@dump_metho

; 985  :     { outstring("form_integrand: \n");

	lea	edi, DWORD PTR [esi+232]
	npad	5
$LL3@dump_metho:

; 987  :         { sprintf(msg,"Q%1d: ",j+1); outstring(msg); 

	lea	esi, DWORD PTR [ecx+1]
	mov	ecx, DWORD PTR _msg
	push	esi
	push	OFFSET ??_C@_06CECNODIB@Q?$CF1d?3?5?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 988  :           outstring(print_express(mi->expr[j],'X'));

	mov	eax, DWORD PTR [edi]
	push	88					; 00000058H
	push	eax
	call	_print_express
	push	eax
	call	_outstring

; 989  :           outstring("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	mov	edx, DWORD PTR _web+616
	lea	eax, DWORD PTR [edx-1]
	imul	eax, edx
	cdq
	sub	eax, edx
	mov	ecx, esi
	sar	eax, 1
	add	esp, 32					; 00000020H
	add	edi, 4
	cmp	ecx, eax
	jl	SHORT $LL3@dump_metho
$LN1@dump_metho:
	pop	edi
	pop	esi

; 990  :         }
; 991  :     }
; 992  : } /* end dump_method_specs() */

	pop	ebp
	ret	0
_dump_method_specs ENDP
_TEXT	ENDS
PUBLIC	??_C@_06MMEBJFA@?5?$CFs?$CFc?5?$AA@		; `string'
PUBLIC	??_C@_04KMMDIKEB@?5?$CFs?5?$AA@			; `string'
PUBLIC	??_C@_0N@LLGMOCIP@?5original?5?$CFs?$AA@	; `string'
PUBLIC	??_C@_0BE@KMLNMGPF@?5no_hessian_normal?5?$AA@	; `string'
PUBLIC	??_C@_06FGOOKMMP@?5bare?5?$AA@			; `string'
PUBLIC	??_C@_0O@KNIDECJO@?5axial_point?5?$AA@		; `string'
PUBLIC	??_C@_0O@OLGCOGFK@?5hit_partner?5?$AA@		; `string'
PUBLIC	??_C@_07LLDGIOOM@?5fixed?5?$AA@			; `string'
PUBLIC	??_C@_03JDANDILB@?$CFd?5?$AA@			; `string'
PUBLIC	??_C@_03IKGEINEE@?$CFs?5?$AA@			; `string'
PUBLIC	??_C@_0P@NLMCGNKJ@?5?5constraints?5?$AA@	; `string'
PUBLIC	??_C@_04BBFBANHC@?$CF3s?5?$AA@			; `string'
PUBLIC	??_C@_04HCPIBBPC@?$CJ?5?$CK?1?$AA@		; `string'
PUBLIC	??_C@_08DIAEIIJ@?5?$CF17?415g?$AA@		; `string'
PUBLIC	??_C@_05KAJPEEKP@?5?1?$CK?5?$CI?$AA@		; `string'
PUBLIC	??_C@_0P@MGLFIDGF@?5?5boundary?5?$CFs?5?$AA@	; `string'
PUBLIC	??_C@_09EJFODHIB@?5?5?$CF17?415g?$AA@		; `string'
PUBLIC	??_C@_03GLGIAOBD@?$CF3s?$AA@			; `string'
PUBLIC	_vertex_dump
EXTRN	_nullcon:QWORD
EXTRN	_V_BOUNDARY_ATTR:DWORD
EXTRN	_outfd:DWORD
;	COMDAT ??_C@_06MMEBJFA@?5?$CFs?$CFc?5?$AA@
CONST	SEGMENT
??_C@_06MMEBJFA@?5?$CFs?$CFc?5?$AA@ DB ' %s%c ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04KMMDIKEB@?5?$CFs?5?$AA@
CONST	SEGMENT
??_C@_04KMMDIKEB@?5?$CFs?5?$AA@ DB ' %s ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LLGMOCIP@?5original?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0N@LLGMOCIP@?5original?5?$CFs?$AA@ DB ' original %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KMLNMGPF@?5no_hessian_normal?5?$AA@
CONST	SEGMENT
??_C@_0BE@KMLNMGPF@?5no_hessian_normal?5?$AA@ DB ' no_hessian_normal ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FGOOKMMP@?5bare?5?$AA@
CONST	SEGMENT
??_C@_06FGOOKMMP@?5bare?5?$AA@ DB ' bare ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KNIDECJO@?5axial_point?5?$AA@
CONST	SEGMENT
??_C@_0O@KNIDECJO@?5axial_point?5?$AA@ DB ' axial_point ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OLGCOGFK@?5hit_partner?5?$AA@
CONST	SEGMENT
??_C@_0O@OLGCOGFK@?5hit_partner?5?$AA@ DB ' hit_partner ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07LLDGIOOM@?5fixed?5?$AA@
CONST	SEGMENT
??_C@_07LLDGIOOM@?5fixed?5?$AA@ DB ' fixed ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03JDANDILB@?$CFd?5?$AA@
CONST	SEGMENT
??_C@_03JDANDILB@?$CFd?5?$AA@ DB '%d ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IKGEINEE@?$CFs?5?$AA@
CONST	SEGMENT
??_C@_03IKGEINEE@?$CFs?5?$AA@ DB '%s ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NLMCGNKJ@?5?5constraints?5?$AA@
CONST	SEGMENT
??_C@_0P@NLMCGNKJ@?5?5constraints?5?$AA@ DB '  constraints ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04BBFBANHC@?$CF3s?5?$AA@
CONST	SEGMENT
??_C@_04BBFBANHC@?$CF3s?5?$AA@ DB '%3s ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HCPIBBPC@?$CJ?5?$CK?1?$AA@
CONST	SEGMENT
??_C@_04HCPIBBPC@?$CJ?5?$CK?1?$AA@ DB ') */', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DIAEIIJ@?5?$CF17?415g?$AA@
CONST	SEGMENT
??_C@_08DIAEIIJ@?5?$CF17?415g?$AA@ DB ' %17.15g', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05KAJPEEKP@?5?1?$CK?5?$CI?$AA@
CONST	SEGMENT
??_C@_05KAJPEEKP@?5?1?$CK?5?$CI?$AA@ DB ' /* (', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MGLFIDGF@?5?5boundary?5?$CFs?5?$AA@
CONST	SEGMENT
??_C@_0P@MGLFIDGF@?5?5boundary?5?$CFs?5?$AA@ DB '  boundary %s ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09EJFODHIB@?5?5?$CF17?415g?$AA@
CONST	SEGMENT
??_C@_09EJFODHIB@?5?5?$CF17?415g?$AA@ DB '  %17.15g', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03GLGIAOBD@?$CF3s?$AA@
CONST	SEGMENT
??_C@_03GLGIAOBD@?$CF3s?$AA@ DB '%3s', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _vertex_dump
_TEXT	SEGMENT
tv648 = -24						; size = 8
_attr$ = -16						; size = 8
_old_fd$ = -8						; size = 4
tv576 = -4						; size = 4
tv666 = 8						; size = 4
_v_id$ = 8						; size = 4
_i$ = 12						; size = 4
_x$ = 12						; size = 4
_fd$ = 12						; size = 4
_vertex_dump PROC					; COMDAT

; 1006 : { int i;

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 1007 :   REAL *x;
; 1008 :   FILE *old_fd = outfd;

	mov	eax, DWORD PTR _outfd

; 1009 :   struct extra *ex;
; 1010 :   ATTR attr = get_vattr(v_id);

	mov	ecx, DWORD PTR _web+12
	push	esi
	mov	esi, DWORD PTR _v_id$[ebp]
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	DWORD PTR _old_fd$[ebp], eax
	mov	eax, DWORD PTR [ecx+edx*4]
	push	edi
	mov	edi, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR _attr$[ebp+4], eax

; 1011 :   vertex_id orig;
; 1012 : 
; 1013 :   outfd = fd;

	mov	eax, DWORD PTR _fd$[ebp]
	mov	DWORD PTR tv576[ebp], edx
	mov	DWORD PTR _attr$[ebp], edi
	mov	DWORD PTR _outfd, eax

; 1014 :         
; 1015 :   if ( !valid_id(v_id) ) return;

	test	esi, 268435456				; 10000000H
	je	$LN37@vertex_dum

; 1016 :   x = get_coord(v_id);

	mov	eax, DWORD PTR _dymem
	mov	esi, DWORD PTR _web+104
	mov	esi, DWORD PTR [esi+eax+64]
	mov	ecx, DWORD PTR [ecx+edx*4]

; 1017 :   if ( attr & BOUNDARY )

	mov	eax, edi
	push	ebx
	add	esi, ecx
	and	eax, 128				; 00000080H
	xor	ebx, ebx
	or	eax, ebx
	mov	DWORD PTR _x$[ebp], esi
	je	$LN35@vertex_dum

; 1018 :   { /* print boundary parameters */
; 1019 :     struct boundary *bdry = get_boundary(v_id);

	mov	eax, DWORD PTR _V_BOUNDARY_ATTR
	test	eax, eax
	je	SHORT $LN39@vertex_dum
	mov	edx, DWORD PTR _dymem
	imul	eax, 240				; 000000f0H
	add	eax, DWORD PTR _web+104
	mov	eax, DWORD PTR [eax+edx+64]
	mov	esi, DWORD PTR [eax+ecx]
	imul	esi, 136				; 00000088H
	add	esi, DWORD PTR _web+776
	jmp	SHORT $LN40@vertex_dum
$LN39@vertex_dum:
	xor	esi, esi
$LN40@vertex_dum:

; 1020 :     REAL *param = get_param(v_id);

	mov	edx, DWORD PTR _web+104
	mov	eax, DWORD PTR _dymem
	mov	ebx, DWORD PTR [edx+eax+544]
	add	ebx, ecx

; 1021 : 
; 1022 :     sprintf(msg,"%3s",ELNAME(v_id)); outstring(msg); 

	mov	ecx, DWORD PTR tv576[ebp]
	inc	ecx
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	OFFSET _elnames
	push	OFFSET ??_C@_03GLGIAOBD@?$CF3s?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring

; 1023 :     for ( i = 0 ; i < bdry->pcount ; i++ )

	xor	edi, edi
	add	esp, 28					; 0000001cH
	cmp	DWORD PTR [esi+40], edi
	jle	SHORT $LN32@vertex_dum
	npad	11
$LL34@vertex_dum:

; 1024 : #ifdef FLOAT128
; 1025 :     { sprintf(msg,"  %*.*Qg",DWIDTH,DPREC,param[i]); outstring(msg); }
; 1026 : #elif defined(LONGDOUBLE)
; 1027 :     { sprintf(msg,"  %*.*Lg",DWIDTH,DPREC,param[i]); outstring(msg); }
; 1028 : #else
; 1029 :     { sprintf(msg,"  %17.15g",param[i]); outstring(msg); }

	fld	QWORD PTR [ebx+edi*8]
	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_09EJFODHIB@?5?5?$CF17?415g?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	inc	edi
	add	esp, 20					; 00000014H
	cmp	edi, DWORD PTR [esi+40]
	jl	SHORT $LL34@vertex_dum
$LN32@vertex_dum:

; 1030 : #endif 
; 1031 :     sprintf(msg,"  boundary %s ",bdry->name); 

	mov	eax, DWORD PTR _msg
	push	esi
	push	OFFSET ??_C@_0P@MGLFIDGF@?5?5boundary?5?$CFs?5?$AA@
	push	eax
	call	_sprintf

; 1032 :     outstring(msg); 

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring

; 1033 :     sprintf(msg," /* ("); outstring(msg); 

	mov	edx, DWORD PTR _msg
	push	OFFSET ??_C@_05KAJPEEKP@?5?1?$CK?5?$CI?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring

; 1034 :     for ( i = 0; i < SDIM ; i++)

	xor	esi, esi
	add	esp, 28					; 0000001cH
	cmp	DWORD PTR _web+616, esi
	jle	SHORT $LN29@vertex_dum
	npad	11
$LL31@vertex_dum:

; 1035 : #ifdef FLOAT128
; 1036 :     { sprintf(msg," %*.*Qg",DWIDTH,DPREC,x[i]); outstring(msg); }
; 1037 : #elif defined(LONGDOUBLE)
; 1038 :     { sprintf(msg," %*.*Lg",DWIDTH,DPREC,x[i]); outstring(msg); }
; 1039 : #else
; 1040 :     { sprintf(msg," %17.15g",x[i]); outstring(msg); }

	mov	ecx, DWORD PTR _x$[ebp]
	fld	QWORD PTR [ecx+esi*8]
	mov	edx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_08DIAEIIJ@?5?$CF17?415g?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	inc	esi
	add	esp, 20					; 00000014H
	cmp	esi, DWORD PTR _web+616
	jl	SHORT $LL31@vertex_dum
$LN29@vertex_dum:

; 1041 : #endif 
; 1042 :     sprintf(msg,") */"); outstring(msg); 

	mov	ecx, DWORD PTR _msg
	push	OFFSET ??_C@_04HCPIBBPC@?$CJ?5?$CK?1?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 1043 :   } /* end BOUNDARY parameters */
; 1044 :   else

	mov	edi, DWORD PTR _attr$[ebp]
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN25@vertex_dum
$LN35@vertex_dum:

; 1045 :   { /* print regular coordinates */
; 1046 :     sprintf(msg,"%3s ",ELNAME(v_id)); outstring(msg); 

	inc	edx
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	OFFSET _elnames
	push	OFFSET ??_C@_04BBFBANHC@?$CF3s?5?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring

; 1047 :     for ( i = 0; i < SDIM ; i++)

	xor	ebx, ebx
	add	esp, 28					; 0000001cH
	cmp	DWORD PTR _web+616, ebx
	jle	SHORT $LN25@vertex_dum
	npad	8
$LL27@vertex_dum:

; 1048 : #ifdef FLOAT128
; 1049 :       { sprintf(msg," %*.*Qg",DWIDTH,DPREC,x[i]); outstring(msg); }
; 1050 : #elif defined(LONGDOUBLE)
; 1051 :       { sprintf(msg," %*.*Lg",DWIDTH,DPREC,x[i]); outstring(msg); }
; 1052 : #else
; 1053 :       { sprintf(msg," %17.15g",x[i]); outstring(msg); }

	fld	QWORD PTR [esi+ebx*8]
	mov	edx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_08DIAEIIJ@?5?$CF17?415g?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	inc	ebx
	add	esp, 20					; 00000014H
	cmp	ebx, DWORD PTR _web+616
	jl	SHORT $LL27@vertex_dum
$LN25@vertex_dum:

; 1054 : #endif 
; 1055 :   }
; 1056 :   if ( attr & CONSTRAINT )

	mov	eax, edi
	and	eax, 1024				; 00000400H
	xor	ecx, ecx
	or	eax, ecx
	je	$LN63@vertex_dum

; 1057 :   { conmap_t * conmap = get_v_constraint_map(v_id);

	mov	eax, DWORD PTR _web+104
	mov	ecx, DWORD PTR _dymem
	cmp	DWORD PTR [eax+ecx+1288], 0
	je	SHORT $LN45@vertex_dum
	mov	edx, DWORD PTR _web+12
	mov	esi, DWORD PTR tv576[ebp]
	mov	ebx, DWORD PTR [edx+esi*4]
	add	ebx, DWORD PTR [eax+ecx+1264]
	jmp	SHORT $LN46@vertex_dum
$LN45@vertex_dum:
	mov	ebx, OFFSET _nullcon
$LN46@vertex_dum:

; 1058 :     struct constraint *con;
; 1059 :     sprintf(msg,"  constraints "); outstring(msg); 

	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0P@NLMCGNKJ@?5?5constraints?5?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 12					; 0000000cH

; 1060 :     for ( i = 1 ; i <= (int)conmap[0] ; i++ )

	cmp	DWORD PTR [ebx], 1
	mov	DWORD PTR _i$[ebp], 1
	jl	$LN63@vertex_dum
$LL62@vertex_dum:

; 1061 :     { con = get_constraint(conmap[i]);

	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR [ebx+edx*4]
	and	esi, 1073741823				; 3fffffffH
	mov	eax, esi
	imul	eax, 176				; 000000b0H
	add	eax, DWORD PTR _web+652

; 1062 :       if ( !(con->attr & GLOBAL) )

	xor	edi, edi
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [eax+32]
	mov	DWORD PTR tv648[ebp+4], ecx
	mov	ecx, edx
	and	ecx, 4
	or	ecx, edi
	jne	SHORT $LN22@vertex_dum

; 1063 :       { if ( con->attr & NAMED_THING )

	and	edx, 512				; 00000200H
	or	edx, ecx
	je	SHORT $LN19@vertex_dum

; 1064 :          { sprintf(msg,"%s ",con->name); outstring(msg); }

	mov	edx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_03IKGEINEE@?$CFs?5?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax

; 1065 :         else

	jmp	SHORT $LN66@vertex_dum
$LN19@vertex_dum:

; 1066 :          { sprintf(msg,"%d ",conmap[i]&CONMASK); outstring(msg); }

	mov	ecx, DWORD PTR _msg
	push	esi
	push	OFFSET ??_C@_03JDANDILB@?$CFd?5?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
$LN66@vertex_dum:
	call	_outstring
	add	esp, 16					; 00000010H
$LN22@vertex_dum:

; 1060 :     for ( i = 1 ; i <= (int)conmap[0] ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR [ebx]
	jle	SHORT $LL62@vertex_dum
	mov	edi, DWORD PTR _attr$[ebp]
$LN63@vertex_dum:

; 1067 :       }
; 1068 :     }
; 1069 :   }
; 1070 :   if ( attr & FIXED ) { sprintf(msg, " fixed "); outstring(msg); }

	mov	eax, edi
	and	eax, 64					; 00000040H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN17@vertex_dum
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_07LLDGIOOM@?5fixed?5?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 12					; 0000000cH
$LN17@vertex_dum:

; 1071 :   if ( attr & HIT_PARTNER ) outstring(" hit_partner ");

	mov	eax, edi
	and	eax, 32768				; 00008000H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN16@vertex_dum
	push	OFFSET ??_C@_0O@OLGCOGFK@?5hit_partner?5?$AA@
	call	_outstring
	add	esp, 4
$LN16@vertex_dum:

; 1072 :   if ( attr & AXIAL_POINT ) 

	mov	eax, edi
	and	eax, 8388608				; 00800000H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN15@vertex_dum

; 1073 :      { sprintf(msg, " axial_point "); outstring(msg); }

	mov	edx, DWORD PTR _msg
	push	OFFSET ??_C@_0O@KNIDECJO@?5axial_point?5?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 12					; 0000000cH
$LN15@vertex_dum:

; 1074 :   if ( attr & BARE_NAKED )

	mov	eax, edi
	and	eax, 65536				; 00010000H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN14@vertex_dum

; 1075 :      { sprintf(msg, " bare "); outstring(msg); }

	mov	ecx, DWORD PTR _msg
	push	OFFSET ??_C@_06FGOOKMMP@?5bare?5?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 12					; 0000000cH
$LN14@vertex_dum:

; 1076 :   if ( attr & NO_HESSIAN_NORMAL_ATTR )

	and	edi, -2147483648			; 80000000H
	xor	eax, eax
	or	edi, eax
	je	SHORT $LN13@vertex_dum

; 1077 :      { sprintf(msg, " no_hessian_normal "); outstring(msg); }

	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0BE@KMLNMGPF@?5no_hessian_normal?5?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 12					; 0000000cH
$LN13@vertex_dum:

; 1078 : 
; 1079 :   orig = get_original(v_id);

	mov	ecx, DWORD PTR _v_id$[ebp]
	mov	edi, DWORD PTR tv576[ebp]
	mov	edx, ecx
	shr	edx, 29					; 0000001dH
	imul	edx, 112				; 00000070H
	mov	eax, DWORD PTR _web[edx+12]
	lea	esi, DWORD PTR _web[edx+12]
	mov	edx, DWORD PTR [eax+edi*4]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR tv666[ebp], esi

; 1080 :   if ( valid_id(orig) && !equal_element(orig,v_id) ) 

	test	eax, 268435456				; 10000000H
	je	SHORT $LN12@vertex_dum
	mov	edx, eax
	or	edx, 134217728				; 08000000H
	or	ecx, 134217728				; 08000000H
	cmp	edx, ecx
	je	SHORT $LN12@vertex_dum

; 1081 :   { sprintf(msg," original %s",ELNAME(orig)); outstring(msg); }

	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	OFFSET _elnames
	push	OFFSET ??_C@_0N@LLGMOCIP@?5original?5?$CFs?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 28					; 0000001cH
$LN12@vertex_dum:

; 1082 : 
; 1083 :   if ( elptr(v_id)->method_count )

	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+edi*4]
	movzx	ecx, WORD PTR [eax+24]
	test	cx, cx
	je	$LN61@vertex_dum

; 1084 :   { struct method_instance *mi;
; 1085 :     int meth_offset = EXTRAS(VERTEX)[web.meth_attr[VERTEX]].offset;

	mov	edx, DWORD PTR _web+5664

; 1086 :     int *methlist = (int*)((char*)elptr(v_id) + meth_offset);

	mov	esi, DWORD PTR _dymem
	imul	edx, 240				; 000000f0H
	add	edx, DWORD PTR _web+104
	mov	edi, DWORD PTR [edx+esi+64]
	add	edi, eax

; 1087 :     for ( i = 0 ; i < (int)elptr(v_id)->method_count ; i++ )

	xor	eax, eax
	xor	esi, esi
	cmp	ax, cx
	jae	$LN61@vertex_dum
	npad	4
$LL10@vertex_dum:

; 1088 :       { mi = METH_INSTANCE(abs(methlist[i]));

	mov	ecx, DWORD PTR [edi+esi*4]
	mov	eax, ecx
	cdq
	xor	eax, edx
	sub	eax, edx
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list

; 1089 :         if ( GEN_QUANT(mi->quants[0])->flags & (DEFAULT_QUANTITY|Q_DELETED) )

	mov	edx, DWORD PTR [eax+152]
	imul	edx, 368				; 00000170H
	add	edx, DWORD PTR _gen_quant_list
	test	DWORD PTR [edx+136], 532480		; 00082000H
	jne	SHORT $LN9@vertex_dum

; 1090 :           continue;
; 1091 :         if ( mi->flags & IMPLICIT_INSTANCE )

	test	DWORD PTR [eax+140], 2097152		; 00200000H
	je	SHORT $LN6@vertex_dum

; 1092 :            sprintf(msg," %s ",GEN_QUANT(mi->quants[0])->name);

	mov	eax, DWORD PTR _msg
	push	edx
	push	OFFSET ??_C@_04KMMDIKEB@?5?$CFs?5?$AA@
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN5@vertex_dum
$LN6@vertex_dum:

; 1093 :         else sprintf(msg," %s%c ",mi->name,methlist[i]<0?'-':' '); 

	xor	edx, edx
	test	ecx, ecx
	setns	dl
	dec	edx
	and	edx, 13					; 0000000dH
	add	edx, 32					; 00000020H
	push	edx
	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_06MMEBJFA@?5?$CFs?$CFc?5?$AA@
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H
$LN5@vertex_dum:

; 1094 :         outstring(msg); 

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 4
$LN9@vertex_dum:

; 1087 :     for ( i = 0 ; i < (int)elptr(v_id)->method_count ; i++ )

	mov	edx, DWORD PTR tv666[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv576[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	movzx	eax, WORD PTR [edx+24]
	inc	esi
	cmp	esi, eax
	jl	$LL10@vertex_dum
$LN61@vertex_dum:

; 1095 :       }
; 1096 :   }
; 1097 : 
; 1098 :   /* extra attributes */
; 1099 :   for ( i = 0, ex = EXTRAS(VERTEX) ; i < web.skel[VERTEX].extra_count;
; 1100 :               i++,ex++ )

	mov	edi, DWORD PTR _web+104
	add	edi, DWORD PTR _dymem
	cmp	DWORD PTR _web+108, 0
	mov	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN2@vertex_dum
	xor	ebx, ebx
	npad	13
$LL65@vertex_dum:

; 1101 :     { char *at = get_v_extra(v_id,i);

	mov	eax, DWORD PTR _web+104
	mov	edx, DWORD PTR _dymem
	lea	ecx, DWORD PTR [ebx+eax]
	mov	esi, DWORD PTR [ecx+edx+64]
	mov	eax, DWORD PTR _web+12
	mov	ecx, DWORD PTR tv576[ebp]
	add	esi, DWORD PTR [eax+ecx*4]

; 1102 :       if ( !(ex->flags & DUMP_ATTR) ) continue;

	test	BYTE PTR [edi+232], 1
	je	SHORT $LN3@vertex_dum

; 1103 :       sprintf(msg," %s ",ex->name);

	mov	edx, DWORD PTR _msg
	push	edi
	push	OFFSET ??_C@_04KMMDIKEB@?5?$CFs?5?$AA@
	push	edx
	call	_sprintf

; 1104 :       outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring

; 1105 :       print_array_attribute(ex,at);

	push	esi
	push	edi
	call	_print_array_attribute
	add	esp, 24					; 00000018H
$LN3@vertex_dum:

; 1095 :       }
; 1096 :   }
; 1097 : 
; 1098 :   /* extra attributes */
; 1099 :   for ( i = 0, ex = EXTRAS(VERTEX) ; i < web.skel[VERTEX].extra_count;
; 1100 :               i++,ex++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	add	ebx, 240				; 000000f0H
	add	edi, 240				; 000000f0H
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _web+108
	jl	SHORT $LL65@vertex_dum
$LN2@vertex_dum:

; 1106 :     }
; 1107 : 
; 1108 :   sprintf(msg,"\n"); outstring(msg); 

	mov	ecx, DWORD PTR _msg
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 1109 :   outfd = old_fd;

	mov	eax, DWORD PTR _old_fd$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _outfd, eax
	pop	ebx
$LN37@vertex_dum:
	pop	edi
	pop	esi

; 1110 : } /* end vertex_dump() */

	mov	esp, ebp
	pop	ebp
	ret	0
_vertex_dump ENDP
_TEXT	ENDS
PUBLIC	??_C@_05OPNHFOBB@?$CFs?$CFc?5?$AA@		; `string'
PUBLIC	??_C@_0BA@KGNBAPKL@?5?1?$CKlength?5?$CFg?$CK?1?5?$AA@ ; `string'
PUBLIC	??_C@_0L@ICKAJHFD@?5color?5?$CFs?5?$AA@		; `string'
PUBLIC	??_C@_0N@OFNMPAJJ@?5noncontent?5?$AA@		; `string'
PUBLIC	??_C@_0P@LOAPFDCI@?5no_transform?5?$AA@		; `string'
PUBLIC	??_C@_0M@GOKLCPIB@?5no_refine?5?$AA@		; `string'
PUBLIC	??_C@_06LKAOOMKN@fixed?5?$AA@			; `string'
PUBLIC	??_C@_0BB@IPHHNNLI@?5orientation?5?91?5?$AA@	; `string'
PUBLIC	??_C@_0BC@EFJBNHNK@?5?5density?5?$CF1?415g?5?$AA@ ; `string'
PUBLIC	??_C@_0L@INCKGONP@?5wrap?5?$CFld?5?$AA@		; `string'
PUBLIC	??_C@_02FHJIKMCF@?5?$CK?$AA@			; `string'
PUBLIC	??_C@_02EOIDJNGE@?5?$CL?$AA@			; `string'
PUBLIC	??_C@_02BINJDKOC@?5?9?$AA@			; `string'
PUBLIC	??_C@_04CBLHBHNK@?5bad?$AA@			; `string'
PUBLIC	??_C@_0CD@HGIGKDEO@Bad?5wrap?5?$CFlX?5on?5edge?5?$CFs?5period?5?$CF@ ; `string'
PUBLIC	??_C@_0P@PIMBKKPG@?5wrap?50x?$CF06lX?6?$AA@	; `string'
PUBLIC	??_C@_0BB@PFNODBIK@?5?5?1?$CKmidpt?$CK?1?5?$CF3s?5?$AA@ ; `string'
PUBLIC	??_C@_0N@POJAFOAE@?$CF3s?5?5?$CF3s?5?5?5?5?$AA@	; `string'
PUBLIC	??_C@_05CLJOGFLP@?$CF3s?5?5?$AA@		; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_08MMMEFFNL@?$CF3s?5?5?5?5?5?$AA@		; `string'
PUBLIC	_edge_dump
EXTRN	_get_edge_length:PROC
EXTRN	_calc_edge:PROC
EXTRN	_E_BOUNDARY_ATTR:DWORD
;	COMDAT ??_C@_05OPNHFOBB@?$CFs?$CFc?5?$AA@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_05OPNHFOBB@?$CFs?$CFc?5?$AA@ DB '%s%c ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KGNBAPKL@?5?1?$CKlength?5?$CFg?$CK?1?5?$AA@
CONST	SEGMENT
??_C@_0BA@KGNBAPKL@?5?1?$CKlength?5?$CFg?$CK?1?5?$AA@ DB ' /*length %g*/ '
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ICKAJHFD@?5color?5?$CFs?5?$AA@
CONST	SEGMENT
??_C@_0L@ICKAJHFD@?5color?5?$CFs?5?$AA@ DB ' color %s ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OFNMPAJJ@?5noncontent?5?$AA@
CONST	SEGMENT
??_C@_0N@OFNMPAJJ@?5noncontent?5?$AA@ DB ' noncontent ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LOAPFDCI@?5no_transform?5?$AA@
CONST	SEGMENT
??_C@_0P@LOAPFDCI@?5no_transform?5?$AA@ DB ' no_transform ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GOKLCPIB@?5no_refine?5?$AA@
CONST	SEGMENT
??_C@_0M@GOKLCPIB@?5no_refine?5?$AA@ DB ' no_refine ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06LKAOOMKN@fixed?5?$AA@
CONST	SEGMENT
??_C@_06LKAOOMKN@fixed?5?$AA@ DB 'fixed ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IPHHNNLI@?5orientation?5?91?5?$AA@
CONST	SEGMENT
??_C@_0BB@IPHHNNLI@?5orientation?5?91?5?$AA@ DB ' orientation -1 ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EFJBNHNK@?5?5density?5?$CF1?415g?5?$AA@
CONST	SEGMENT
??_C@_0BC@EFJBNHNK@?5?5density?5?$CF1?415g?5?$AA@ DB '  density %1.15g ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@INCKGONP@?5wrap?5?$CFld?5?$AA@
CONST	SEGMENT
??_C@_0L@INCKGONP@?5wrap?5?$CFld?5?$AA@ DB ' wrap %ld ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02FHJIKMCF@?5?$CK?$AA@
CONST	SEGMENT
??_C@_02FHJIKMCF@?5?$CK?$AA@ DB ' *', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EOIDJNGE@?5?$CL?$AA@
CONST	SEGMENT
??_C@_02EOIDJNGE@?5?$CL?$AA@ DB ' +', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02BINJDKOC@?5?9?$AA@
CONST	SEGMENT
??_C@_02BINJDKOC@?5?9?$AA@ DB ' -', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04CBLHBHNK@?5bad?$AA@
CONST	SEGMENT
??_C@_04CBLHBHNK@?5bad?$AA@ DB ' bad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HGIGKDEO@Bad?5wrap?5?$CFlX?5on?5edge?5?$CFs?5period?5?$CF@
CONST	SEGMENT
??_C@_0CD@HGIGKDEO@Bad?5wrap?5?$CFlX?5on?5edge?5?$CFs?5period?5?$CF@ DB 'B'
	DB	'ad wrap %lX on edge %s period %d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PIMBKKPG@?5wrap?50x?$CF06lX?6?$AA@
CONST	SEGMENT
??_C@_0P@PIMBKKPG@?5wrap?50x?$CF06lX?6?$AA@ DB ' wrap 0x%06lX', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PFNODBIK@?5?5?1?$CKmidpt?$CK?1?5?$CF3s?5?$AA@
CONST	SEGMENT
??_C@_0BB@PFNODBIK@?5?5?1?$CKmidpt?$CK?1?5?$CF3s?5?$AA@ DB '  /*midpt*/ %'
	DB	'3s ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@POJAFOAE@?$CF3s?5?5?$CF3s?5?5?5?5?$AA@
CONST	SEGMENT
??_C@_0N@POJAFOAE@?$CF3s?5?5?$CF3s?5?5?5?5?$AA@ DB '%3s  %3s    ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05CLJOGFLP@?$CF3s?5?5?$AA@
CONST	SEGMENT
??_C@_05CLJOGFLP@?$CF3s?5?5?$AA@ DB '%3s  ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08MMMEFFNL@?$CF3s?5?5?5?5?5?$AA@
CONST	SEGMENT
??_C@_08MMMEFFNL@?$CF3s?5?5?5?5?5?$AA@ DB '%3s     ', 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\dump.c
CONST	ENDS
;	COMDAT _edge_dump
_TEXT	SEGMENT
tv1116 = -28						; size = 8
_attr$ = -20						; size = 8
_old_fd$ = -12						; size = 4
_methlist$90317 = -8					; size = 4
_wrap$90214 = -8					; size = 4
_i$ = -8						; size = 4
tv995 = -4						; size = 4
_e_id$ = 8						; size = 4
tv1149 = 12						; size = 4
_fd$ = 12						; size = 4
_edge_dump PROC						; COMDAT

; 1124 : { int i;

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 1125 :   ATTR attr;
; 1126 :   FILE *old_fd = outfd;

	mov	eax, DWORD PTR _outfd

; 1127 :   struct extra *ex;
; 1128 :   edge_id orig;
; 1129 : 
; 1130 :   outfd = fd;

	mov	ecx, DWORD PTR _fd$[ebp]
	push	edi

; 1131 : 
; 1132 :   if ( !valid_id(e_id) ) return;

	mov	edi, DWORD PTR _e_id$[ebp]
	mov	DWORD PTR _old_fd$[ebp], eax
	mov	DWORD PTR _outfd, ecx
	test	edi, 268435456				; 10000000H
	je	$LN65@edge_dump

; 1133 :   attr = get_eattr(e_id);

	mov	edx, DWORD PTR _web+124
	push	ebx
	push	esi
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+esi*4]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [eax+12]

; 1134 : 
; 1135 :   sprintf(msg,"%3s     ",ELNAME(e_id)); outstring(msg); 

	lea	eax, DWORD PTR [esi+1]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	mov	DWORD PTR tv995[ebp], esi
	mov	DWORD PTR _attr$[ebp], ecx
	mov	DWORD PTR _attr$[ebp+4], edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	OFFSET _elnames
	push	OFFSET ??_C@_08MMMEFFNL@?$CF3s?5?5?5?5?5?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring

; 1136 :   if ( web.modeltype == LAGRANGE )

	mov	eax, 3
	add	esp, 28					; 0000001cH
	cmp	DWORD PTR _web+628, eax
	jne	$LN63@edge_dump

; 1137 :   {
; 1138 :       vertex_id *v = get_edge_vertices(e_id);

	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR _web+216
	mov	ebx, DWORD PTR [eax+edx+304]
	mov	edx, DWORD PTR _web+124

; 1139 :       int num = web.skel[EDGE].ctrlpts;

	mov	edi, DWORD PTR _web+120
	mov	ecx, esi
	add	ebx, DWORD PTR [edx+ecx*4]

; 1140 :       for ( i = 0 ; i < num ; i++ )

	xor	esi, esi
	test	edi, edi
	jle	$LN111@edge_dump
	npad	2
$LL113@edge_dump:

; 1141 :         { sprintf(msg,"%3s  ",ELNAME(v[i])); outstring(msg); }

	mov	eax, DWORD PTR [ebx+esi*4]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN69@edge_dump
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN70@edge_dump
$LN69@edge_dump:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN70@edge_dump:
	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_05CLJOGFLP@?$CF3s?5?5?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	inc	esi
	add	esp, 16					; 00000010H
	cmp	esi, edi
	jl	SHORT $LL113@edge_dump

; 1142 :   }
; 1143 :   else

	jmp	$LN111@edge_dump
$LN63@edge_dump:

; 1144 :   {
; 1145 :     if ( web.representation == SIMPLEX )

	cmp	DWORD PTR _web+624, eax
	jne	$LN58@edge_dump

; 1146 :      { vertex_id *v = get_edge_vertices(e_id);

	mov	edx, DWORD PTR _web+216
	mov	eax, DWORD PTR _dymem
	mov	ebx, DWORD PTR [edx+eax+304]
	mov	ecx, DWORD PTR _web+124
	add	ebx, DWORD PTR [ecx+esi*4]

; 1147 :         for ( i = 0 ; i <= web.dimension-1 ; i++ )

	mov	edx, DWORD PTR _web+620
	xor	esi, esi
	dec	edx
	js	$LN54@edge_dump
	npad	1
$LL57@edge_dump:

; 1148 :           { sprintf(msg,"%3s  ",ELNAME(v[i])); outstring(msg); }

	mov	eax, DWORD PTR [ebx+esi*4]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN71@edge_dump
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN72@edge_dump
$LN71@edge_dump:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN72@edge_dump:
	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_05CLJOGFLP@?$CF3s?5?5?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	mov	edx, DWORD PTR _web+620
	inc	esi
	dec	edx
	add	esp, 16					; 00000010H
	cmp	esi, edx
	jle	SHORT $LL57@edge_dump

; 1149 :      }
; 1150 :     else

	jmp	$LN54@edge_dump
$LN58@edge_dump:

; 1151 :     { sprintf(msg,"%3s  %3s    ", ELNAME(get_edge_tailv(e_id)),
; 1152 :                 ELNAME1(get_edge_headv(e_id))); 

	push	edi
	call	_get_edge_headv
	add	esp, 4
	test	eax, 268435456				; 10000000H
	je	SHORT $LN73@edge_dump
	push	edi
	call	_get_edge_headv
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames+30
	call	_sprintf
	add	esp, 16					; 00000010H
	mov	esi, OFFSET _elnames+30
	jmp	SHORT $LN74@edge_dump
$LN73@edge_dump:
	mov	esi, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN74@edge_dump:
	push	edi
	call	_get_edge_tailv
	add	esp, 4
	test	eax, 268435456				; 10000000H
	je	SHORT $LN75@edge_dump
	push	edi
	call	_get_edge_tailv
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 16					; 00000010H
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN76@edge_dump
$LN75@edge_dump:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN76@edge_dump:
	push	esi
	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0N@POJAFOAE@?$CF3s?5?5?$CF3s?5?5?5?5?$AA@
	push	eax
	call	_sprintf

; 1153 :       outstring(msg); 

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 20					; 00000014H
$LN54@edge_dump:

; 1154 :     }
; 1155 :     if ( web.modeltype == QUADRATIC )

	cmp	DWORD PTR _web+628, 2
	jne	SHORT $LN111@edge_dump

; 1156 :     { sprintf(msg,"  /*midpt*/ %3s ",ELNAME(get_edge_midv(e_id))); 

	mov	edx, DWORD PTR _web+216
	mov	eax, DWORD PTR _dymem
	mov	ecx, DWORD PTR [edx+eax+304]
	mov	eax, DWORD PTR _web+124
	mov	edx, DWORD PTR tv995[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [ecx+edx+8]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN77@edge_dump
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN78@edge_dump
$LN77@edge_dump:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN78@edge_dump:
	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0BB@PFNODBIK@?5?5?1?$CKmidpt?$CK?1?5?$CF3s?5?$AA@
	push	eax
	call	_sprintf

; 1157 :       outstring(msg); 

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 16					; 00000010H
$LN111@edge_dump:

; 1158 :     }
; 1159 :   }
; 1160 : 
; 1161 :   if ( web.torus_flag ) 

	cmp	DWORD PTR _web+860, 0
	je	$LN52@edge_dump

; 1162 :   { WRAPTYPE wrap = get_edge_wrap(e_id);

	test	DWORD PTR _e_id$[ebp], 134217728	; 08000000H
	mov	edx, DWORD PTR _web+216
	mov	eax, DWORD PTR _dymem
	mov	ecx, DWORD PTR [edx+eax+784]
	mov	eax, DWORD PTR _web+124
	mov	edx, DWORD PTR tv995[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [ecx+edx]
	je	SHORT $LN91@edge_dump
	push	eax
	call	DWORD PTR _sym_inverse
	mov	esi, eax
	add	esp, 4
	mov	DWORD PTR _wrap$90214[ebp], esi
	jmp	SHORT $LN92@edge_dump
$LN91@edge_dump:
	mov	esi, eax
	mov	DWORD PTR _wrap$90214[ebp], eax
$LN92@edge_dump:

; 1164 :     int smallwrap = 1; /* whether can do with - * + */
; 1165 :     for ( i = 0 ; i < SDIM ; i++, w >>= TWRAPBITS )

	mov	edi, DWORD PTR _web+616
	mov	ecx, esi
	mov	edx, 1
	test	edi, edi
	jle	SHORT $LN44@edge_dump

; 1163 :     WRAPTYPE w = wrap;

	mov	ebx, edi
	npad	4
$LL51@edge_dump:

; 1166 :       switch ( w & WRAPMASK  )

	mov	eax, ecx
	and	eax, 31					; 0000001fH
	jl	SHORT $LN45@edge_dump
	cmp	eax, 1
	jle	SHORT $LN50@edge_dump
	cmp	eax, 31					; 0000001fH

; 1167 :       {
; 1168 :           case  NEGWRAP: case  0:  case  POSWRAP: break;  

	je	SHORT $LN50@edge_dump
$LN45@edge_dump:

; 1169 :           default : 
; 1170 :              smallwrap = 0; 

	xor	edx, edx
$LN50@edge_dump:

; 1164 :     int smallwrap = 1; /* whether can do with - * + */
; 1165 :     for ( i = 0 ; i < SDIM ; i++, w >>= TWRAPBITS )

	sar	ecx, 6
	dec	ebx
	jne	SHORT $LL51@edge_dump

; 1171 :       }
; 1172 :     if ( !smallwrap )

	test	edx, edx
	jne	SHORT $LN44@edge_dump

; 1173 :     { sprintf(msg," wrap 0x%06lX\n",wrap);

	push	esi
	push	OFFSET ??_C@_0P@PIMBKKPG@?5wrap?50x?$CF06lX?6?$AA@

; 1174 :       outstring(msg);
; 1175 :     }
; 1176 :     else 

	jmp	$LN125@edge_dump
$LN44@edge_dump:

; 1177 :      for ( i = 0 ; i < SDIM ; i++, wrap >>= TWRAPBITS )

	xor	ebx, ebx
	test	edi, edi
	jle	$LN116@edge_dump
	mov	edi, DWORD PTR tv995[ebp]
$LL42@edge_dump:

; 1178 :       switch ( wrap & WRAPMASK  )

	mov	esi, DWORD PTR _wrap$90214[ebp]
	and	esi, 31					; 0000001fH
	mov	eax, esi
	sub	eax, 0
	je	$LN36@edge_dump
	dec	eax
	je	$LN35@edge_dump
	sub	eax, 30					; 0000001eH
	je	SHORT $LN37@edge_dump

; 1183 :           default : 
; 1184 :               sprintf(errmsg,"Bad wrap %lX on edge %s period %d\n",
; 1185 :                   wrap&WRAPMASK,ELNAME(e_id),i+1);

	lea	eax, DWORD PTR [edi+1]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	lea	edx, DWORD PTR [ebx+1]
	push	edx
	push	OFFSET _elnames
	push	esi
	push	OFFSET ??_C@_0CD@HGIGKDEO@Bad?5wrap?5?$CFlX?5on?5edge?5?$CFs?5period?5?$CF@
	push	OFFSET _errmsg
	call	_sprintf

; 1186 :               kb_error(1005,errmsg,WARNING);

	push	2
	push	OFFSET _errmsg
	push	1005					; 000003edH
	call	_kb_error

; 1187 :               sprintf(msg," bad"); outstring(msg); 

	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_04CBLHBHNK@?5bad?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 56					; 00000038H

; 1188 :             break;

	jmp	SHORT $LN41@edge_dump
$LN37@edge_dump:

; 1179 :       {
; 1180 :           case  NEGWRAP : sprintf(msg," -"); outstring(msg);   break;

	mov	edx, DWORD PTR _msg
	push	OFFSET ??_C@_02BINJDKOC@?5?9?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax
	jmp	SHORT $LN126@edge_dump
$LN35@edge_dump:

; 1182 :           case  POSWRAP : sprintf(msg," +"); outstring(msg);   break;

	mov	ecx, DWORD PTR _msg
	push	OFFSET ??_C@_02EOIDJNGE@?5?$CL?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	jmp	SHORT $LN126@edge_dump
$LN36@edge_dump:

; 1181 :           case  0       : sprintf(msg," *"); outstring(msg);   break;

	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_02FHJIKMCF@?5?$CK?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
$LN126@edge_dump:
	call	_outstring
	add	esp, 12					; 0000000cH
$LN41@edge_dump:

; 1177 :      for ( i = 0 ; i < SDIM ; i++, wrap >>= TWRAPBITS )

	sar	DWORD PTR _wrap$90214[ebp], 6
	inc	ebx
	cmp	ebx, DWORD PTR _web+616
	jl	$LL42@edge_dump

; 1189 :       }
; 1190 :   }
; 1191 :   else if ( web.symmetry_flag )

	jmp	SHORT $LN116@edge_dump
$LN52@edge_dump:
	cmp	DWORD PTR _web+856, 0
	je	SHORT $LN116@edge_dump

; 1192 :   { WRAPTYPE wrap = get_edge_wrap(e_id);

	test	DWORD PTR _e_id$[ebp], 134217728	; 08000000H
	mov	edx, DWORD PTR _web+216
	mov	eax, DWORD PTR _dymem
	mov	ecx, DWORD PTR [edx+eax+784]
	mov	eax, DWORD PTR _web+124
	mov	edx, DWORD PTR tv995[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [ecx+edx]
	je	SHORT $LN95@edge_dump
	push	eax
	call	DWORD PTR _sym_inverse
	add	esp, 4
$LN95@edge_dump:

; 1193 :     sprintf(msg," wrap %ld ",wrap); outstring(msg); 

	push	eax
	push	OFFSET ??_C@_0L@INCKGONP@?5wrap?5?$CFld?5?$AA@
$LN125@edge_dump:
	mov	eax, DWORD PTR _msg
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 16					; 00000010H
$LN116@edge_dump:

; 1194 :   }
; 1195 :   if ( (attr & DENSITY) || ((web.representation==STRING) &&
; 1196 :                     (get_edge_density(e_id) != 1.0)))

	mov	eax, DWORD PTR _attr$[ebp]
	and	eax, 16					; 00000010H
	xor	ecx, ecx
	or	eax, ecx
	jne	SHORT $LN30@edge_dump
	cmp	DWORD PTR _web+624, 1
	jne	SHORT $LN114@edge_dump
	mov	eax, DWORD PTR tv995[ebp]
	mov	edx, DWORD PTR _web+124
	mov	ecx, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [ecx+40]
	fld1
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN114@edge_dump
$LN30@edge_dump:

; 1197 : #ifdef FLOAT128
; 1198 :     { sprintf(msg,"  density %1.*Qg ",DPREC,get_edge_density(e_id)); outstring(msg); }
; 1199 : #elif defined(LONGDOUBLE)
; 1200 :     { sprintf(msg,"  density %1.*Lg ",DPREC,get_edge_density(e_id)); outstring(msg); }
; 1201 : #else
; 1202 :     { sprintf(msg,"  density %1.15g ",get_edge_density(e_id)); outstring(msg); }

	mov	edx, DWORD PTR tv995[ebp]
	mov	eax, DWORD PTR _web+124
	mov	ecx, DWORD PTR [eax+edx*4]
	fld	QWORD PTR [ecx+40]
	mov	edx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BC@EFJBNHNK@?5?5density?5?$CF1?415g?5?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 20					; 00000014H
$LN114@edge_dump:

; 1203 : #endif 
; 1204 :   if ( attr & BOUNDARY )

	mov	eax, DWORD PTR _attr$[ebp]
	and	eax, 128				; 00000080H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN29@edge_dump

; 1205 :      { struct boundary *bdry = get_edge_boundary(e_id);

	mov	eax, DWORD PTR _E_BOUNDARY_ATTR
	test	eax, eax
	je	SHORT $LN81@edge_dump
	mov	ecx, DWORD PTR _dymem
	imul	eax, 240				; 000000f0H
	add	eax, DWORD PTR _web+216
	mov	edx, DWORD PTR [eax+ecx+64]
	mov	eax, DWORD PTR _web+124
	mov	ecx, DWORD PTR tv995[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [edx+eax]
	imul	eax, 136				; 00000088H
	add	eax, DWORD PTR _web+776
	jmp	SHORT $LN82@edge_dump
$LN81@edge_dump:
	xor	eax, eax
$LN82@edge_dump:

; 1206 :        sprintf(msg,"  boundary %s ",bdry->name); 

	mov	ecx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0P@MGLFIDGF@?5?5boundary?5?$CFs?5?$AA@
	push	ecx
	call	_sprintf

; 1207 :        outstring(msg); 

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 16					; 00000010H
$LN29@edge_dump:

; 1208 :      }                    
; 1209 :   if ( attr & CONSTRAINT )

	mov	eax, DWORD PTR _attr$[ebp]
	and	eax, 1024				; 00000400H
	xor	ecx, ecx
	or	eax, ecx
	je	$LN112@edge_dump

; 1210 :   { conmap_t * conmap = get_e_constraint_map(e_id);

	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	cmp	DWORD PTR [eax+ecx+1048], 0
	je	SHORT $LN83@edge_dump
	mov	edx, DWORD PTR tv995[ebp]
	mov	esi, DWORD PTR _web+124
	mov	ebx, DWORD PTR [esi+edx*4]
	add	ebx, DWORD PTR [eax+ecx+1024]
	jmp	SHORT $LN84@edge_dump
$LN83@edge_dump:
	mov	ebx, OFFSET _nullcon
$LN84@edge_dump:

; 1211 :     struct constraint *con;
; 1212 :     sprintf(msg,"  constraints "); outstring(msg); 

	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0P@NLMCGNKJ@?5?5constraints?5?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 12					; 0000000cH

; 1213 :     for ( i = 1 ; i <= (int)conmap[0] ; i++ )

	cmp	DWORD PTR [ebx], 1
	mov	DWORD PTR _i$[ebp], 1
	jl	$LN112@edge_dump
	npad	1
$LL27@edge_dump:

; 1214 :     { con = get_constraint(conmap[i]);

	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR [ebx+edx*4]
	and	esi, 1073741823				; 3fffffffH
	mov	eax, esi
	imul	eax, 176				; 000000b0H
	add	eax, DWORD PTR _web+652

; 1215 :       if ( !(con->attr & GLOBAL) )

	xor	edi, edi
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [eax+32]
	mov	DWORD PTR tv1116[ebp+4], ecx
	mov	ecx, edx
	and	ecx, 4
	or	ecx, edi
	jne	SHORT $LN26@edge_dump

; 1216 :       { if ( con->attr & NAMED_THING )

	and	edx, 512				; 00000200H
	or	edx, ecx
	je	SHORT $LN23@edge_dump

; 1217 :          { sprintf(msg,"%s ",con->name); outstring(msg); }

	mov	edx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_03IKGEINEE@?$CFs?5?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax

; 1218 :         else

	jmp	SHORT $LN127@edge_dump
$LN23@edge_dump:

; 1219 :          { sprintf(msg,"%d ",conmap[i]&CONMASK); outstring(msg); }

	mov	ecx, DWORD PTR _msg
	push	esi
	push	OFFSET ??_C@_03JDANDILB@?$CFd?5?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
$LN127@edge_dump:
	call	_outstring
	add	esp, 16					; 00000010H
$LN26@edge_dump:

; 1213 :     for ( i = 1 ; i <= (int)conmap[0] ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR [ebx]
	jle	SHORT $LL27@edge_dump
$LN112@edge_dump:

; 1220 :       }
; 1221 :     }
; 1222 :   }
; 1223 : 
; 1224 :   if ( attr & NEGBOUNDARY ) outstring(" orientation -1 ");

	mov	esi, DWORD PTR _attr$[ebp]
	mov	eax, esi
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN120@edge_dump
	push	OFFSET ??_C@_0BB@IPHHNNLI@?5orientation?5?91?5?$AA@
	call	_outstring
	add	esp, 4
$LN120@edge_dump:

; 1225 :   if ( attr & FIXED )

	mov	eax, esi
	and	eax, 64					; 00000040H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN20@edge_dump

; 1226 :       { sprintf(msg,"fixed "); outstring(msg); }

	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_06LKAOOMKN@fixed?5?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 12					; 0000000cH
$LN20@edge_dump:

; 1227 :   if ( attr & BARE_NAKED ) { sprintf(msg," bare "); outstring(msg); }

	mov	eax, esi
	and	eax, 65536				; 00010000H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN19@edge_dump
	mov	edx, DWORD PTR _msg
	push	OFFSET ??_C@_06FGOOKMMP@?5bare?5?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 12					; 0000000cH
$LN19@edge_dump:

; 1228 :   if ( attr & NO_REFINE ) outstring(" no_refine ");

	mov	eax, esi
	and	eax, 16777216				; 01000000H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN18@edge_dump
	push	OFFSET ??_C@_0M@GOKLCPIB@?5no_refine?5?$AA@
	call	_outstring
	add	esp, 4
$LN18@edge_dump:

; 1229 :   if ( attr & NO_TRANSFORM ) outstring(" no_transform ");

	mov	ecx, DWORD PTR _attr$[ebp+4]
	and	ecx, 1
	xor	eax, eax
	or	eax, ecx
	je	SHORT $LN17@edge_dump
	push	OFFSET ??_C@_0P@LOAPFDCI@?5no_transform?5?$AA@
	call	_outstring
	add	esp, 4
$LN17@edge_dump:

; 1230 :   if ( attr & NONCONTENT ) outstring(" noncontent ");

	and	esi, 536870912				; 20000000H
	mov	eax, esi
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN16@edge_dump
	push	OFFSET ??_C@_0N@OFNMPAJJ@?5noncontent?5?$AA@
	call	_outstring
	add	esp, 4
$LN16@edge_dump:

; 1231 :  
; 1232 :   if ( get_edge_color(e_id)  != DEFAULT_EDGE_COLOR )

	mov	edi, DWORD PTR tv995[ebp]
	mov	ecx, DWORD PTR _web+124
	mov	edx, DWORD PTR [ecx+edi*4]
	movzx	eax, WORD PTR [edx+56]
	test	ax, ax
	je	SHORT $LN15@edge_dump

; 1233 :   { sprintf(msg," color %s ",COLORNAME(get_edge_color(e_id))); outstring(msg); }

	cmp	ax, -1
	jl	SHORT $LN85@edge_dump
	cmp	ax, 15					; 0000000fH
	jg	SHORT $LN85@edge_dump
	cwde
	mov	eax, DWORD PTR _color_names[eax*4+4]
	jmp	SHORT $LN86@edge_dump
$LN85@edge_dump:
	mov	eax, OFFSET ??_C@_05BIMBDNDC@black?$AA@
$LN86@edge_dump:
	mov	ecx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0L@ICKAJHFD@?5color?5?$CFs?5?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 16					; 00000010H
$LN15@edge_dump:

; 1234 :   if ( (fd == old_fd) && (web.representation != SIMPLEX) )

	mov	eax, DWORD PTR _old_fd$[ebp]
	cmp	DWORD PTR _fd$[ebp], eax
	jne	SHORT $LN115@edge_dump
	cmp	DWORD PTR _web+624, 3
	je	SHORT $LN115@edge_dump

; 1235 :   { calc_edge(e_id);

	mov	esi, DWORD PTR _e_id$[ebp]
	push	esi
	call	_calc_edge

; 1236 :     sprintf(msg," /*length %g*/ ",(DOUBLE)get_edge_length(e_id)); outstring(msg); 

	push	esi
	call	_get_edge_length
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _msg
	push	OFFSET ??_C@_0BA@KGNBAPKL@?5?1?$CKlength?5?$CFg?$CK?1?5?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 20					; 00000014H
	jmp	SHORT $LN14@edge_dump
$LN115@edge_dump:
	mov	esi, DWORD PTR _e_id$[ebp]
$LN14@edge_dump:

; 1237 :   }
; 1238 :   if ( elptr(e_id)->method_count )

	mov	eax, esi
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	ecx, DWORD PTR _web[eax+12]
	lea	ebx, DWORD PTR _web[eax+12]
	mov	eax, DWORD PTR [ecx+edi*4]
	movzx	ecx, WORD PTR [eax+24]
	mov	DWORD PTR tv1149[ebp], ebx
	test	cx, cx
	je	$LN118@edge_dump

; 1239 :   { struct method_instance *mi;
; 1240 :     int meth_offset = EXTRAS(EDGE)[web.meth_attr[EDGE]].offset;

	mov	edx, DWORD PTR _web+5668

; 1241 :     int *methlist = (int*)((char*)elptr(e_id) + meth_offset);

	mov	edi, DWORD PTR _dymem
	imul	edx, 240				; 000000f0H
	add	edx, DWORD PTR _web+216
	mov	edx, DWORD PTR [edx+edi+64]
	add	edx, eax

; 1242 :     for ( i = 0 ; i < elptr(e_id)->method_count ; i++ )

	xor	eax, eax
	xor	edi, edi
	mov	DWORD PTR _methlist$90317[ebp], edx
	cmp	ax, cx
	jae	$LN118@edge_dump
	mov	ebx, DWORD PTR _gen_quant_list
$LL12@edge_dump:

; 1243 :       { int mm = methlist[i];

	mov	ecx, DWORD PTR _methlist$90317[ebp]
	mov	esi, DWORD PTR [ecx+edi*4]

; 1244 :         mi = METH_INSTANCE(abs(mm));

	mov	eax, esi
	cdq
	xor	eax, edx
	sub	eax, edx
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list

; 1245 :         if ( mi->quants[0] >= 0 && 
; 1246 :           (GEN_QUANT(mi->quants[0])->flags & (DEFAULT_QUANTITY|Q_DELETED)) ) 

	mov	ecx, DWORD PTR [eax+152]
	test	ecx, ecx
	js	SHORT $LN8@edge_dump
	mov	edx, ecx
	imul	edx, 368				; 00000170H
	test	DWORD PTR [edx+ebx+136], 532480		; 00082000H
	jne	SHORT $LN11@edge_dump

; 1247 :           continue;
; 1248 :         if ( mi->quants[0] >= 0 && (mi->flags & IMPLICIT_INSTANCE) )

	test	ecx, ecx
	js	SHORT $LN8@edge_dump
	test	DWORD PTR [eax+140], 2097152		; 00200000H
	je	SHORT $LN8@edge_dump

; 1249 :            sprintf(msg,"%s%c ",GEN_QUANT(mi->quants[0])->name,(mm<0?'-':' '));

	xor	eax, eax
	test	esi, esi
	setns	al
	imul	ecx, 368				; 00000170H
	dec	eax
	and	eax, 13					; 0000000dH
	add	eax, 32					; 00000020H
	push	eax
	add	ecx, ebx
	push	ecx
	mov	ecx, DWORD PTR _msg
	push	OFFSET ??_C@_05OPNHFOBB@?$CFs?$CFc?5?$AA@
	push	ecx
	jmp	SHORT $LN129@edge_dump
$LN8@edge_dump:

; 1250 :         else sprintf(msg,"%s%c ",mi->name,(mm<0?'-':' ')); 

	xor	edx, edx
	test	esi, esi
	setns	dl
	dec	edx
	and	edx, 13					; 0000000dH
	add	edx, 32					; 00000020H
	push	edx
	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_05OPNHFOBB@?$CFs?$CFc?5?$AA@
	push	eax
$LN129@edge_dump:
	call	_sprintf

; 1251 :         outstring(msg); 

	mov	ecx, DWORD PTR _msg
	add	esp, 16					; 00000010H
	push	ecx
	call	_outstring
	mov	ebx, DWORD PTR _gen_quant_list
	add	esp, 4
$LN11@edge_dump:

; 1242 :     for ( i = 0 ; i < elptr(e_id)->method_count ; i++ )

	mov	edx, DWORD PTR tv1149[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv995[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	movzx	eax, WORD PTR [edx+24]
	inc	edi
	cmp	edi, eax
	jl	$LL12@edge_dump
	mov	ebx, DWORD PTR tv1149[ebp]
	mov	esi, DWORD PTR _e_id$[ebp]
$LN118@edge_dump:

; 1252 :       }
; 1253 :   } 
; 1254 :   orig = get_original(e_id);

	mov	ecx, DWORD PTR [ebx]
	mov	edx, DWORD PTR tv995[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	eax, DWORD PTR [eax+20]

; 1255 :   if ( valid_id(orig) && !equal_element(orig,e_id) ) 

	test	eax, 268435456				; 10000000H
	je	SHORT $LN121@edge_dump
	mov	ecx, eax
	or	ecx, 134217728				; 08000000H
	or	esi, 134217728				; 08000000H
	cmp	ecx, esi
	je	SHORT $LN121@edge_dump

; 1256 :      { sprintf(msg," original %s",ELNAME(orig)); outstring(msg); }

	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	OFFSET _elnames
	push	OFFSET ??_C@_0N@LLGMOCIP@?5original?5?$CFs?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 28					; 0000001cH
$LN121@edge_dump:

; 1257 : 
; 1258 :   /* extra attributes */
; 1259 :   for ( i = 0, ex = EXTRAS(EDGE) ; i < web.skel[EDGE].extra_count;
; 1260 :               i++,ex++ )

	mov	esi, DWORD PTR _web+216
	add	esi, DWORD PTR _dymem
	cmp	DWORD PTR _web+220, 0
	mov	DWORD PTR _i$[ebp], 0
	jle	$LN3@edge_dump
	xor	ebx, ebx
	npad	4
$LL5@edge_dump:

; 1261 :     { char *at = get_e_extra(e_id,i);

	mov	eax, DWORD PTR _web+216
	mov	edx, DWORD PTR _dymem
	lea	ecx, DWORD PTR [ebx+eax]
	mov	edi, DWORD PTR [ecx+edx+64]
	mov	eax, DWORD PTR tv995[ebp]
	mov	ecx, DWORD PTR _web+124
	add	edi, DWORD PTR [ecx+eax*4]

; 1262 :       if ( !(ex->flags & DUMP_ATTR) ) continue;

	test	BYTE PTR [esi+232], 1
	je	SHORT $LN4@edge_dump

; 1263 :       if ( ex->array_spec.datacount == 0 ) continue;

	cmp	DWORD PTR [esi+88], 0
	je	SHORT $LN4@edge_dump

; 1264 :       sprintf(msg," %s ",ex->name);

	mov	edx, DWORD PTR _msg
	push	esi
	push	OFFSET ??_C@_04KMMDIKEB@?5?$CFs?5?$AA@
	push	edx
	call	_sprintf

; 1265 :       outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring

; 1266 :       print_array_attribute(ex,at);

	push	edi
	push	esi
	call	_print_array_attribute
	add	esp, 24					; 00000018H
$LN4@edge_dump:

; 1257 : 
; 1258 :   /* extra attributes */
; 1259 :   for ( i = 0, ex = EXTRAS(EDGE) ; i < web.skel[EDGE].extra_count;
; 1260 :               i++,ex++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	add	ebx, 240				; 000000f0H
	add	esi, 240				; 000000f0H
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _web+220
	jl	SHORT $LL5@edge_dump
$LN3@edge_dump:

; 1267 :     }
; 1268 : 
; 1269 :   outstring("\n"); 

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring

; 1270 : 
; 1271 :   outfd = old_fd;

	mov	ecx, DWORD PTR _old_fd$[ebp]
	add	esp, 4
	pop	esi
	mov	DWORD PTR _outfd, ecx
	pop	ebx
$LN65@edge_dump:
	pop	edi

; 1272 : }  /* end edge_dump() */

	mov	esp, ebp
	pop	ebp
	ret	0
_edge_dump ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@JHGDJNGC@?5?1?$CKarea?5?$CFg?$CK?1?$AA@ ; `string'
PUBLIC	??_C@_0N@MIIHHBLE@?5opacity?5?$CFf?5?$AA@	; `string'
PUBLIC	??_C@_0P@KCECHDMK@?5backcolor?5?$CFs?5?$AA@	; `string'
PUBLIC	??_C@_0L@BGJJKEMM@?5phase?5?$CFd?5?$AA@		; `string'
PUBLIC	??_C@_0L@KGODKILG@?5nodisplay?$AA@		; `string'
PUBLIC	??_C@_0L@DHLHDELA@?5vertices?5?$AA@		; `string'
PUBLIC	??_C@_0BC@LGJNMCBN@?5?2?6?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$AA@ ; `string'
PUBLIC	??_C@_03EEBNCBOD@?5?$CFs?$AA@			; `string'
PUBLIC	??_C@_04HGGBINEM@?$CFs?$CFd?$AA@		; `string'
PUBLIC	??_C@_01JOAMLHOP@?9?$AA@			; `string'
PUBLIC	??_C@_04ENMPAJBG@?5?$CF3s?$AA@			; `string'
PUBLIC	_facet_dump
EXTRN	_recalc_facet_area:PROC
EXTRN	_opacity_attr:DWORD
EXTRN	_F_PHASE_ATTR:DWORD
EXTRN	_phase_flag:DWORD
EXTRN	_F_BOUNDARY_ATTR:DWORD
EXTRN	_binom_coeff:PROC
;	COMDAT ??_C@_0N@JHGDJNGC@?5?1?$CKarea?5?$CFg?$CK?1?$AA@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0N@JHGDJNGC@?5?1?$CKarea?5?$CFg?$CK?1?$AA@ DB ' /*area %g*/', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MIIHHBLE@?5opacity?5?$CFf?5?$AA@
CONST	SEGMENT
??_C@_0N@MIIHHBLE@?5opacity?5?$CFf?5?$AA@ DB ' opacity %f ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KCECHDMK@?5backcolor?5?$CFs?5?$AA@
CONST	SEGMENT
??_C@_0P@KCECHDMK@?5backcolor?5?$CFs?5?$AA@ DB ' backcolor %s ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BGJJKEMM@?5phase?5?$CFd?5?$AA@
CONST	SEGMENT
??_C@_0L@BGJJKEMM@?5phase?5?$CFd?5?$AA@ DB ' phase %d ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KGODKILG@?5nodisplay?$AA@
CONST	SEGMENT
??_C@_0L@KGODKILG@?5nodisplay?$AA@ DB ' nodisplay', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DHLHDELA@?5vertices?5?$AA@
CONST	SEGMENT
??_C@_0L@DHLHDELA@?5vertices?5?$AA@ DB ' vertices ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LGJNMCBN@?5?2?6?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$AA@
CONST	SEGMENT
??_C@_0BC@LGJNMCBN@?5?2?6?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$AA@ DB ' \', 0aH, ' '
	DB	'             ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03EEBNCBOD@?5?$CFs?$AA@
CONST	SEGMENT
??_C@_03EEBNCBOD@?5?$CFs?$AA@ DB ' %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HGGBINEM@?$CFs?$CFd?$AA@
CONST	SEGMENT
??_C@_04HGGBINEM@?$CFs?$CFd?$AA@ DB '%s%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01JOAMLHOP@?9?$AA@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9?$AA@ DB '-', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04ENMPAJBG@?5?$CF3s?$AA@
CONST	SEGMENT
??_C@_04ENMPAJBG@?5?$CF3s?$AA@ DB ' %3s', 00H		; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\dump.c
CONST	ENDS
;	COMDAT _facet_dump
_TEXT	SEGMENT
_old_fd$ = -24						; size = 4
_attr$ = -20						; size = 8
tv1272 = -16						; size = 4
tv1209 = -12						; size = 8
_methcount$90496 = -8					; size = 4
tv1088 = -4						; size = 4
_f_id$ = 8						; size = 4
_fe$92195 = 12						; size = 4
_i$ = 12						; size = 4
_fd$ = 12						; size = 4
_facet_dump PROC					; COMDAT

; 1286 : { int i;

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 1287 :   int per_line = 0; 
; 1288 :   edge_id e_id;
; 1289 :   facetedge_id fe;
; 1290 :   FILE *old_fd = outfd;

	mov	eax, DWORD PTR _outfd

; 1291 :   struct extra *ex;
; 1292 :   ATTR attr = get_fattr(f_id);

	mov	ecx, DWORD PTR _web+236
	push	ebx
	push	esi
	mov	esi, DWORD PTR _f_id$[ebp]
	push	edi
	mov	edi, esi
	and	edi, 134217727				; 07ffffffH
	mov	DWORD PTR _old_fd$[ebp], eax
	mov	eax, DWORD PTR [ecx+edi*4]
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+12]

; 1293 :   facet_id orig;
; 1294 : 
; 1295 :   outfd = fd;

	mov	ecx, DWORD PTR _fd$[ebp]
	xor	ebx, ebx
	mov	DWORD PTR tv1088[ebp], edi
	mov	DWORD PTR _attr$[ebp], edx
	mov	DWORD PTR _attr$[ebp+4], eax
	mov	DWORD PTR _outfd, ecx

; 1296 : 
; 1297 :   if ( !valid_id(f_id) ) return;

	test	esi, 268435456				; 10000000H
	je	$LN51@facet_dump

; 1298 :   { sprintf(msg,"%3s  ",ELNAME(f_id)); outstring(msg); }

	lea	edx, DWORD PTR [edi+1]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	OFFSET _elnames
	push	OFFSET ??_C@_05CLJOGFLP@?$CF3s?5?5?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring

; 1299 :     if ( web.representation == SIMPLEX )

	mov	eax, 3
	add	esp, 28					; 0000001cH
	cmp	DWORD PTR _web+624, eax
	jne	$LN49@facet_dump

; 1300 :     { vertex_id *v = get_facet_vertices(f_id);

	mov	edx, DWORD PTR _web+236
	mov	ebx, DWORD PTR [edx+edi*4]
	mov	ecx, DWORD PTR _dymem
	mov	edx, DWORD PTR _web+328
	add	ebx, DWORD PTR [edx+ecx+304]

; 1301 :       int num;
; 1302 :       if (web.modeltype == LAGRANGE)

	cmp	DWORD PTR _web+628, eax
	jne	SHORT $LN48@facet_dump

; 1303 :          num = binom_coeff(web.lagrange_order+web.dimension,web.dimension);

	mov	eax, DWORD PTR _web+620
	mov	ecx, DWORD PTR _web+632
	push	eax
	add	ecx, eax
	push	ecx
	call	_binom_coeff
	add	esp, 8
	mov	edi, eax
	jmp	SHORT $LN47@facet_dump
$LN48@facet_dump:

; 1304 :       else num = web.dimension+1;

	mov	edi, DWORD PTR _web+620
	inc	edi
$LN47@facet_dump:

; 1305 :       for ( i = 0 ; i < num ; i++ )

	xor	esi, esi
	test	edi, edi
	jle	$LN106@facet_dump
$LL46@facet_dump:

; 1306 :          { sprintf(msg," %3s",ELNAME(v[i])); outstring(msg); }

	mov	eax, DWORD PTR [ebx+esi*4]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN55@facet_dump
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN56@facet_dump
$LN55@facet_dump:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN56@facet_dump:
	mov	edx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_04ENMPAJBG@?5?$CF3s?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	inc	esi
	add	esp, 16					; 00000010H
	cmp	esi, edi
	jl	SHORT $LL46@facet_dump

; 1307 :     }
; 1308 :     else

	jmp	$LN106@facet_dump
$LN49@facet_dump:

; 1309 :     { facetedge_id first_fe;
; 1310 :       fe = first_fe = get_facet_fe(f_id);

	mov	ecx, DWORD PTR _web+236
	mov	edx, DWORD PTR [ecx+edi*4]
	mov	edi, DWORD PTR [edx+28]
	mov	DWORD PTR _fe$92195[ebp], edi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN83@facet_dump
	xor	edi, 134217728				; 08000000H
	mov	DWORD PTR _fe$92195[ebp], edi
$LN83@facet_dump:

; 1311 :       if ( valid_id(fe) ) do

	test	edi, 268435456				; 10000000H
	je	$LN39@facet_dump
	mov	eax, DWORD PTR _web+460
	npad	3
$LL41@facet_dump:

; 1312 :       { e_id = get_fe_edge(fe);

	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	ecx, DWORD PTR [eax+esi]
	mov	eax, edi
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]

; 1313 :         sprintf(msg," %s",SELNAME(e_id) );

	test	eax, 268435456				; 10000000H
	je	SHORT $LN59@facet_dump
	mov	ecx, OFFSET ??_C@_01JOAMLHOP@?9?$AA@
	test	eax, 134217728				; 08000000H
	jne	SHORT $LN58@facet_dump
	mov	ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN58@facet_dump:
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	ecx
	push	OFFSET ??_C@_04HGGBINEM@?$CFs?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 16					; 00000010H
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN60@facet_dump
$LN59@facet_dump:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN60@facet_dump:
	mov	edx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_03EEBNCBOD@?5?$CFs?$AA@
	push	edx
	call	_sprintf

; 1314 :         outstring(msg); 

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring

; 1315 :         per_line++;

	inc	ebx
	add	esp, 16					; 00000010H

; 1316 :         if ( per_line >= 10 )

	cmp	ebx, 10					; 0000000aH
	jl	SHORT $LN38@facet_dump

; 1317 :         { sprintf(msg," \\\n              "); outstring(msg); 

	mov	ecx, DWORD PTR _msg
	push	OFFSET ??_C@_0BC@LGJNMCBN@?5?2?6?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 12					; 0000000cH

; 1318 :           per_line = 0;

	xor	ebx, ebx
$LN38@facet_dump:

; 1319 :         }
; 1320 :         fe = get_next_edge(fe);

	mov	eax, DWORD PTR _web+460
	test	edi, 134217728				; 08000000H
	je	SHORT $LN90@facet_dump
	mov	ecx, DWORD PTR [eax+esi]
	mov	edi, DWORD PTR [ecx+28]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN40@facet_dump
$LN90@facet_dump:
	mov	edx, DWORD PTR [eax+esi]
	mov	edi, DWORD PTR [edx+32]
$LN40@facet_dump:

; 1321 :       } while ( valid_id(fe) && !equal_id(fe,first_fe) );

	test	edi, 268435456				; 10000000H
	je	SHORT $LN39@facet_dump
	cmp	edi, DWORD PTR _fe$92195[ebp]
	jne	$LL41@facet_dump
$LN39@facet_dump:

; 1322 :       if ( (web.modeltype == LAGRANGE) && (web.representation != STRING) )

	cmp	DWORD PTR _web+628, 3
	jne	$LN106@facet_dump
	cmp	DWORD PTR _web+624, 1
	je	$LN106@facet_dump

; 1323 :       { int num = binom_coeff(web.lagrange_order+web.dimension,web.dimension);

	mov	eax, DWORD PTR _web+620
	mov	ecx, DWORD PTR _web+632
	push	eax
	add	ecx, eax
	push	ecx
	call	_binom_coeff

; 1324 :         vertex_id *v = get_facet_vertices(f_id);

	mov	edx, DWORD PTR _web+236
	mov	ecx, DWORD PTR _web+328
	mov	ebx, eax
	mov	eax, DWORD PTR tv1088[ebp]
	mov	edi, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	add	edi, DWORD PTR [ecx+edx+304]

; 1325 :         outstring(" vertices ");

	push	OFFSET ??_C@_0L@DHLHDELA@?5vertices?5?$AA@
	call	_outstring
	add	esp, 12					; 0000000cH

; 1326 :         for ( i = 0 ; i < num ; i++ )

	xor	esi, esi
	test	ebx, ebx
	jle	SHORT $LN106@facet_dump
$LL35@facet_dump:

; 1327 :         { sprintf(msg,"%3s ",ELNAME(v[i])); outstring(msg); }

	mov	eax, DWORD PTR [edi+esi*4]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN61@facet_dump
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN62@facet_dump
$LN61@facet_dump:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN62@facet_dump:
	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_04BBFBANHC@?$CF3s?5?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	inc	esi
	add	esp, 16					; 00000010H
	cmp	esi, ebx
	jl	SHORT $LL35@facet_dump
$LN106@facet_dump:

; 1328 :       }
; 1329 :     }
; 1330 :     if ( attr & BOUNDARY )

	mov	esi, DWORD PTR _attr$[ebp]
	mov	eax, esi
	and	eax, 128				; 00000080H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN32@facet_dump

; 1331 :       { struct boundary *bdry = get_facet_boundary(f_id);

	mov	eax, DWORD PTR _F_BOUNDARY_ATTR
	test	eax, eax
	je	SHORT $LN63@facet_dump
	mov	edx, DWORD PTR _dymem
	imul	eax, 240				; 000000f0H
	add	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _web+236
	mov	eax, DWORD PTR [eax+edx+64]
	mov	edx, DWORD PTR tv1088[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	eax, DWORD PTR [eax+ecx]
	imul	eax, 136				; 00000088H
	add	eax, DWORD PTR _web+776
	jmp	SHORT $LN64@facet_dump
$LN63@facet_dump:
	xor	eax, eax
$LN64@facet_dump:

; 1332 :         sprintf(msg,"  boundary %s ",bdry->name); 

	mov	edx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0P@MGLFIDGF@?5?5boundary?5?$CFs?5?$AA@
	push	edx
	call	_sprintf

; 1333 :         outstring(msg); 

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 16					; 00000010H
$LN32@facet_dump:

; 1334 :       }                    
; 1335 :     if ( attr & CONSTRAINT )

	mov	eax, esi
	and	eax, 1024				; 00000400H
	xor	ecx, ecx
	or	eax, ecx
	je	$LN108@facet_dump

; 1336 :       { conmap_t * conmap = get_f_constraint_map(f_id);

	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	cmp	DWORD PTR [eax+ecx+88], 0
	je	SHORT $LN65@facet_dump
	mov	edx, DWORD PTR tv1088[ebp]
	mov	esi, DWORD PTR _web+236
	mov	ebx, DWORD PTR [esi+edx*4]
	add	ebx, DWORD PTR [eax+ecx+64]
	jmp	SHORT $LN66@facet_dump
$LN65@facet_dump:
	mov	ebx, OFFSET _nullcon
$LN66@facet_dump:

; 1337 :         struct constraint *con;
; 1338 :         sprintf(msg,"  constraints "); outstring(msg); 

	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0P@NLMCGNKJ@?5?5constraints?5?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 12					; 0000000cH

; 1339 :         for ( i = 1 ; i <= (int)conmap[0] ; i++ )

	cmp	DWORD PTR [ebx], 1
	mov	DWORD PTR _i$[ebp], 1
	jl	$LN108@facet_dump
	npad	2
$LL30@facet_dump:

; 1340 :         { con = get_constraint(conmap[i]);

	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR [ebx+edx*4]
	and	esi, 1073741823				; 3fffffffH
	mov	eax, esi
	imul	eax, 176				; 000000b0H
	add	eax, DWORD PTR _web+652

; 1341 :           if ( !(con->attr & GLOBAL) )

	xor	edi, edi
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [eax+32]
	mov	DWORD PTR tv1209[ebp+4], ecx
	mov	ecx, edx
	and	ecx, 4
	or	ecx, edi
	jne	SHORT $LN29@facet_dump

; 1342 :           { if ( con->attr & NAMED_THING )

	and	edx, 512				; 00000200H
	or	edx, ecx
	je	SHORT $LN26@facet_dump

; 1343 :              { sprintf(msg,"%s ",con->name); outstring(msg); }

	mov	edx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_03IKGEINEE@?$CFs?5?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax

; 1344 :             else

	jmp	SHORT $LN116@facet_dump
$LN26@facet_dump:

; 1345 :              { sprintf(msg,"%d ",conmap[i]&CONMASK); outstring(msg); }

	mov	ecx, DWORD PTR _msg
	push	esi
	push	OFFSET ??_C@_03JDANDILB@?$CFd?5?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
$LN116@facet_dump:
	call	_outstring
	add	esp, 16					; 00000010H
$LN29@facet_dump:

; 1339 :         for ( i = 1 ; i <= (int)conmap[0] ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR [ebx]
	jle	SHORT $LL30@facet_dump
$LN108@facet_dump:

; 1346 :       }
; 1347 :         }
; 1348 :       }
; 1349 :     if ( attr & NEGBOUNDARY ) outstring(" orientation -1 ");

	mov	esi, DWORD PTR _attr$[ebp]
	mov	eax, esi
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN114@facet_dump
	push	OFFSET ??_C@_0BB@IPHHNNLI@?5orientation?5?91?5?$AA@
	call	_outstring
	add	esp, 4
$LN114@facet_dump:

; 1350 :     if ( attr & DENSITY )
; 1351 : #ifdef FLOAT128
; 1352 :     { sprintf(msg,"  density %1.*Qg ",DPREC,get_facet_density(f_id)); outstring(msg); }
; 1353 : #elif defined(LONGDOUBLE)
; 1354 :     { sprintf(msg,"  density %1.*Lg ",DPREC,get_facet_density(f_id)); outstring(msg); }
; 1355 : #else
; 1356 :     { sprintf(msg,"  density %1.15g ",get_facet_density(f_id)); outstring(msg); }

	mov	ebx, DWORD PTR tv1088[ebp]
	mov	eax, esi
	and	eax, 16					; 00000010H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN23@facet_dump
	mov	eax, DWORD PTR _web+236
	mov	ecx, DWORD PTR [eax+ebx*4]
	fld	QWORD PTR [ecx+32]
	mov	edx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BC@EFJBNHNK@?5?5density?5?$CF1?415g?5?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 20					; 00000014H
$LN23@facet_dump:

; 1357 : #endif 
; 1358 :     if ( attr & FIXED )  outstring(" fixed " ); 

	mov	eax, esi
	and	eax, 64					; 00000040H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN22@facet_dump
	push	OFFSET ??_C@_07LLDGIOOM@?5fixed?5?$AA@
	call	_outstring
	add	esp, 4
$LN22@facet_dump:

; 1359 :     if ( attr & NO_REFINE ) outstring(" no_refine ");

	mov	eax, esi
	and	eax, 16777216				; 01000000H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN21@facet_dump
	push	OFFSET ??_C@_0M@GOKLCPIB@?5no_refine?5?$AA@
	call	_outstring
	add	esp, 4
$LN21@facet_dump:

; 1360 :     if ( attr & NO_TRANSFORM ) outstring(" no_transform ");

	mov	ecx, DWORD PTR _attr$[ebp+4]
	and	ecx, 1
	xor	eax, eax
	or	eax, ecx
	je	SHORT $LN20@facet_dump
	push	OFFSET ??_C@_0P@LOAPFDCI@?5no_transform?5?$AA@
	call	_outstring
	add	esp, 4
$LN20@facet_dump:

; 1361 :     if ( attr & NONCONTENT ) outstring(" noncontent ");

	mov	eax, esi
	and	eax, 536870912				; 20000000H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN19@facet_dump
	push	OFFSET ??_C@_0N@OFNMPAJJ@?5noncontent?5?$AA@
	call	_outstring
	add	esp, 4
$LN19@facet_dump:

; 1362 :     if ( attr & NODISPLAY ) outstring(" nodisplay"); 

	and	esi, 2
	xor	eax, eax
	or	esi, eax
	je	SHORT $LN18@facet_dump
	push	OFFSET ??_C@_0L@KGODKILG@?5nodisplay?$AA@
	call	_outstring
	add	esp, 4
$LN18@facet_dump:

; 1363 :     if ( phase_flag && (web.representation == STRING) )

	cmp	DWORD PTR _phase_flag, 0
	je	SHORT $LN17@facet_dump
	cmp	DWORD PTR _web+624, 1
	jne	SHORT $LN17@facet_dump

; 1364 :      { sprintf(msg," phase %d ",get_f_phase(f_id)); outstring(msg); }

	mov	eax, DWORD PTR _F_PHASE_ATTR
	imul	eax, 240				; 000000f0H
	add	eax, DWORD PTR _web+328
	add	eax, DWORD PTR _dymem
	cmp	DWORD PTR [eax+88], 0
	je	SHORT $LN67@facet_dump
	mov	ecx, DWORD PTR _web+236
	mov	edx, DWORD PTR [ecx+ebx*4]
	mov	eax, DWORD PTR [eax+64]
	mov	eax, DWORD PTR [edx+eax]
	jmp	SHORT $LN68@facet_dump
$LN67@facet_dump:
	xor	eax, eax
$LN68@facet_dump:
	mov	ecx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0L@BGJJKEMM@?5phase?5?$CFd?5?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 16					; 00000010H
$LN17@facet_dump:

; 1365 :     if ( get_facet_color(f_id) != DEFAULT_FACET_COLOR  )

	mov	eax, DWORD PTR _web+236
	mov	ecx, DWORD PTR [eax+ebx*4]
	movzx	eax, WORD PTR [ecx+48]
	cmp	ax, 15					; 0000000fH
	je	SHORT $LN16@facet_dump

; 1366 :      { sprintf(msg," color %s ",COLORNAME(get_facet_color(f_id)));

	cmp	ax, -1
	jl	SHORT $LN69@facet_dump
	cmp	ax, 15					; 0000000fH
	jg	SHORT $LN69@facet_dump
	movsx	edx, ax
	mov	eax, DWORD PTR _color_names[edx*4+4]
	jmp	SHORT $LN70@facet_dump
$LN69@facet_dump:
	mov	eax, OFFSET ??_C@_05BIMBDNDC@black?$AA@
$LN70@facet_dump:
	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0L@ICKAJHFD@?5color?5?$CFs?5?$AA@
	push	eax
	call	_sprintf

; 1367 :        outstring(msg); }

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 16					; 00000010H
$LN16@facet_dump:

; 1368 :     if ( get_facet_backcolor(f_id) !=  get_facet_color(f_id) )

	mov	edi, DWORD PTR _f_id$[ebp]
	mov	edx, edi
	shr	edx, 27					; 0000001bH
	and	edx, 1
	je	SHORT $LN71@facet_dump
	mov	eax, DWORD PTR _web+236
	mov	eax, DWORD PTR [eax+ebx*4]
	movsx	ecx, WORD PTR [eax+48]
	jmp	SHORT $LN72@facet_dump
$LN71@facet_dump:
	mov	ecx, DWORD PTR _web+236
	mov	eax, DWORD PTR [ecx+ebx*4]
	movsx	ecx, WORD PTR [eax+50]
$LN72@facet_dump:
	movsx	esi, WORD PTR [eax+48]
	cmp	ecx, esi
	je	SHORT $LN15@facet_dump

; 1369 :      { sprintf(msg," backcolor %s ",COLORNAME(get_facet_backcolor(f_id))); 

	mov	ecx, esi
	test	edx, edx
	jne	SHORT $LN74@facet_dump
	movsx	ecx, WORD PTR [eax+50]
$LN74@facet_dump:
	cmp	ecx, -1
	jl	SHORT $LN77@facet_dump
	mov	ecx, esi
	test	edx, edx
	jne	SHORT $LN76@facet_dump
	movsx	ecx, WORD PTR [eax+50]
$LN76@facet_dump:
	cmp	ecx, 15					; 0000000fH
	jg	SHORT $LN77@facet_dump
	test	edx, edx
	je	SHORT $LN78@facet_dump
	mov	eax, esi
	mov	eax, DWORD PTR _color_names[eax*4+4]
	jmp	SHORT $LN80@facet_dump
$LN78@facet_dump:
	movsx	eax, WORD PTR [eax+50]
	mov	eax, DWORD PTR _color_names[eax*4+4]
	jmp	SHORT $LN80@facet_dump
$LN77@facet_dump:
	mov	eax, OFFSET ??_C@_05BIMBDNDC@black?$AA@
$LN80@facet_dump:
	mov	edx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0P@KCECHDMK@?5backcolor?5?$CFs?5?$AA@
	push	edx
	call	_sprintf

; 1370 :        outstring(msg); }

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 16					; 00000010H
$LN15@facet_dump:

; 1371 :     if ( opacity_attr )

	mov	ecx, DWORD PTR _opacity_attr
	test	ecx, ecx
	je	SHORT $LN111@facet_dump

; 1372 :     { sprintf(msg," opacity %f ",*(REAL*)get_extra(f_id,opacity_attr));

	mov	eax, edi
	imul	ecx, 240				; 000000f0H
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	edx, DWORD PTR _web[eax+104]
	mov	eax, DWORD PTR _web[eax+12]
	mov	eax, DWORD PTR [eax+ebx*4]
	add	edx, ecx
	mov	ecx, DWORD PTR _dymem
	mov	edx, DWORD PTR [edx+ecx+64]
	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fld	QWORD PTR [edx+eax]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0N@MIIHHBLE@?5opacity?5?$CFf?5?$AA@
	push	ecx
	call	_sprintf

; 1373 :       outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 20					; 00000014H
$LN111@facet_dump:

; 1374 :     }
; 1375 :     if ( elptr(f_id)->method_count )

	shr	edi, 29					; 0000001dH
	imul	edi, 112				; 00000070H
	lea	eax, DWORD PTR _web[edi+12]
	mov	DWORD PTR tv1272[ebp], eax
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax+ebx*4]
	cmp	WORD PTR [ecx+24], 0
	lea	eax, DWORD PTR [eax+ebx*4]
	je	$LN10@facet_dump

; 1376 :     { struct method_instance *mi;
; 1377 :       int meth_offset = EXTRAS(FACET)[web.meth_attr[FACET]].offset;

	mov	edx, DWORD PTR _web+5672
	imul	edx, 240				; 000000f0H
	add	edx, DWORD PTR _web+328

; 1378 :       int *methlist = (int*)((char*)elptr(f_id) + meth_offset);

	mov	eax, ecx
	mov	ecx, DWORD PTR _dymem
	mov	edi, DWORD PTR [edx+ecx+64]
	add	edi, eax

; 1379 :       int methcount = (int)elptr(f_id)->method_count;

	movzx	eax, WORD PTR [eax+24]
	mov	DWORD PTR _methcount$90496[ebp], eax

; 1380 :       for ( i = 0 ; i < methcount ; i++ )

	mov	DWORD PTR _i$[ebp], 0
	test	eax, eax
	jle	$LN10@facet_dump
	mov	ebx, DWORD PTR _gen_quant_list
	npad	1
$LL12@facet_dump:

; 1381 :         { int mm = methlist[i];

	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR [edi+edx*4]

; 1382 :           mi = METH_INSTANCE(abs(mm));

	mov	eax, esi
	cdq
	xor	eax, edx
	sub	eax, edx
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list

; 1383 :           if ( mi->quants[0] >= 0 &&
; 1384 :             (GEN_QUANT(mi->quants[0])->flags & (DEFAULT_QUANTITY|Q_DELETED)) )

	mov	ecx, DWORD PTR [eax+152]
	test	ecx, ecx
	js	SHORT $LN8@facet_dump
	mov	edx, ecx
	imul	edx, 368				; 00000170H
	test	DWORD PTR [edx+ebx+136], 532480		; 00082000H
	jne	SHORT $LN11@facet_dump

; 1385 :              continue;
; 1386 :           if ( mi->quants[0] >= 0 && (mi->flags & IMPLICIT_INSTANCE) )

	test	ecx, ecx
	js	SHORT $LN8@facet_dump
	test	DWORD PTR [eax+140], 2097152		; 00200000H
	je	SHORT $LN8@facet_dump

; 1387 :              sprintf(msg," %s%c ",GEN_QUANT(mi->quants[0])->name,(mm<0?'-':' '));

	xor	eax, eax
	test	esi, esi
	setns	al
	imul	ecx, 368				; 00000170H
	dec	eax
	and	eax, 13					; 0000000dH
	add	eax, 32					; 00000020H
	push	eax
	add	ecx, ebx
	push	ecx
	mov	ecx, DWORD PTR _msg
	push	OFFSET ??_C@_06MMEBJFA@?5?$CFs?$CFc?5?$AA@
	push	ecx
	jmp	SHORT $LN118@facet_dump
$LN8@facet_dump:

; 1388 :           else sprintf(msg," %s%c ",mi->name,(mm<0?'-':' ')); 

	xor	edx, edx
	test	esi, esi
	setns	dl
	dec	edx
	and	edx, 13					; 0000000dH
	add	edx, 32					; 00000020H
	push	edx
	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_06MMEBJFA@?5?$CFs?$CFc?5?$AA@
	push	eax
$LN118@facet_dump:
	call	_sprintf

; 1389 :           outstring(msg); 

	mov	ecx, DWORD PTR _msg
	add	esp, 16					; 00000010H
	push	ecx
	call	_outstring
	mov	ebx, DWORD PTR _gen_quant_list
	add	esp, 4
$LN11@facet_dump:

; 1380 :       for ( i = 0 ; i < methcount ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _methcount$90496[ebp]
	jl	$LL12@facet_dump
$LN10@facet_dump:

; 1390 :         }
; 1391 :     }
; 1392 :     sprintf(msg," /*area %g*/", (DOUBLE)get_facet_area(f_id)); outstring(msg); 

	mov	esi, DWORD PTR _f_id$[ebp]
	push	esi
	call	_recalc_facet_area
	mov	edx, DWORD PTR _web+236
	mov	edi, DWORD PTR tv1088[ebp]
	mov	eax, DWORD PTR [edx+edi*4]
	fld	QWORD PTR [eax+40]
	push	ecx
	mov	ecx, DWORD PTR _msg
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0N@JHGDJNGC@?5?1?$CKarea?5?$CFg?$CK?1?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 1393 :     orig = get_original(f_id);

	mov	eax, DWORD PTR tv1272[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+edi*4]
	mov	eax, DWORD PTR [edx+20]
	add	esp, 20					; 00000014H

; 1394 :     if ( valid_id(orig) && !equal_element(orig,f_id) )

	test	eax, 268435456				; 10000000H
	je	SHORT $LN6@facet_dump
	mov	ecx, eax
	or	ecx, 134217728				; 08000000H
	or	esi, 134217728				; 08000000H
	cmp	ecx, esi
	je	SHORT $LN6@facet_dump

; 1395 :         { sprintf(msg," original %s",ELNAME(orig)); outstring(msg); }

	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	OFFSET _elnames
	push	OFFSET ??_C@_0N@LLGMOCIP@?5original?5?$CFs?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 28					; 0000001cH
$LN6@facet_dump:

; 1396 : 
; 1397 :   /* extra attributes */
; 1398 :   for ( i = 0, ex = EXTRAS(FACET) ; i < web.skel[FACET].extra_count;
; 1399 :               i++,ex++ )

	mov	esi, DWORD PTR _web+328
	add	esi, DWORD PTR _dymem
	cmp	DWORD PTR _web+332, 0
	mov	DWORD PTR _i$[ebp], 0
	jle	$LN3@facet_dump
	xor	ebx, ebx
	npad	9
$LL115@facet_dump:

; 1400 :     { char *at = get_f_extra(f_id,i);

	mov	eax, DWORD PTR _web+328
	mov	edx, DWORD PTR _dymem
	lea	ecx, DWORD PTR [ebx+eax]
	mov	edi, DWORD PTR [ecx+edx+64]
	mov	eax, DWORD PTR _web+236
	mov	ecx, DWORD PTR tv1088[ebp]
	add	edi, DWORD PTR [eax+ecx*4]

; 1401 :       if ( !(ex->flags & DUMP_ATTR) ) continue;

	test	BYTE PTR [esi+232], 1
	je	SHORT $LN4@facet_dump

; 1402 :       if ( ex->array_spec.datacount == 0 ) continue;

	cmp	DWORD PTR [esi+88], 0
	je	SHORT $LN4@facet_dump

; 1403 :       sprintf(msg," %s ",ex->name);

	mov	edx, DWORD PTR _msg
	push	esi
	push	OFFSET ??_C@_04KMMDIKEB@?5?$CFs?5?$AA@
	push	edx
	call	_sprintf

; 1404 :       outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring

; 1405 :       print_array_attribute(ex,at);

	push	edi
	push	esi
	call	_print_array_attribute
	add	esp, 24					; 00000018H
$LN4@facet_dump:

; 1396 : 
; 1397 :   /* extra attributes */
; 1398 :   for ( i = 0, ex = EXTRAS(FACET) ; i < web.skel[FACET].extra_count;
; 1399 :               i++,ex++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	add	ebx, 240				; 000000f0H
	add	esi, 240				; 000000f0H
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _web+332
	jl	SHORT $LL115@facet_dump
$LN3@facet_dump:

; 1406 :     }
; 1407 : 
; 1408 :   outstring("\n"); 

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring

; 1409 : 
; 1410 :   outfd = old_fd;

	mov	ecx, DWORD PTR _old_fd$[ebp]
	add	esp, 4
	mov	DWORD PTR _outfd, ecx
$LN51@facet_dump:
	pop	edi
	pop	esi
	pop	ebx

; 1411 : }  /* end facet_dump() */

	mov	esp, ebp
	pop	ebp
	ret	0
_facet_dump ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@OKFCHLED@?5PHASE?5?$CFd?5?$AA@		; `string'
PUBLIC	??_C@_0BC@DILLNLHG@?5?5pressure?5?$CF1?415g?$AA@ ; `string'
PUBLIC	??_C@_0BI@HLMDHKDG@?5?5actual_volume?5?$CF1?415g?5?$AA@ ; `string'
PUBLIC	??_C@_0BD@COJGMIHJ@?5?5volconst?5?$CF1?415g?5?$AA@ ; `string'
PUBLIC	??_C@_0P@GOKGMPFB@?5centerofmass?5?$AA@		; `string'
PUBLIC	??_C@_0EA@ILELJPGA@?5?5volume?5?$CF1?415g?5?5?1?$CKactual?3?5?$CF1?415@ ; `string'
PUBLIC	??_C@_0DA@PENAHFJH@Internal?5error?3?5body?5?$CFs?5facet?5li@ ; `string'
PUBLIC	??_C@_0O@CMEKCKCL@?5?2?6?5?5?5?5?5?5?5?5?5?5?$AA@ ; `string'
PUBLIC	??_C@_09IEEJOLKL@?$CF3s?5?5?5?5?5?5?$AA@	; `string'
PUBLIC	_body_dump
EXTRN	_B_PHASE_ATTR:DWORD
EXTRN	_get_next_body_facet:PROC
;	COMDAT ??_C@_0L@OKFCHLED@?5PHASE?5?$CFd?5?$AA@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0L@OKFCHLED@?5PHASE?5?$CFd?5?$AA@ DB ' PHASE %d ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DILLNLHG@?5?5pressure?5?$CF1?415g?$AA@
CONST	SEGMENT
??_C@_0BC@DILLNLHG@?5?5pressure?5?$CF1?415g?$AA@ DB '  pressure %1.15g', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HLMDHKDG@?5?5actual_volume?5?$CF1?415g?5?$AA@
CONST	SEGMENT
??_C@_0BI@HLMDHKDG@?5?5actual_volume?5?$CF1?415g?5?$AA@ DB '  actual_volu'
	DB	'me %1.15g ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@COJGMIHJ@?5?5volconst?5?$CF1?415g?5?$AA@
CONST	SEGMENT
??_C@_0BD@COJGMIHJ@?5?5volconst?5?$CF1?415g?5?$AA@ DB '  volconst %1.15g '
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GOKGMPFB@?5centerofmass?5?$AA@
CONST	SEGMENT
??_C@_0P@GOKGMPFB@?5centerofmass?5?$AA@ DB ' centerofmass ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@ILELJPGA@?5?5volume?5?$CF1?415g?5?5?1?$CKactual?3?5?$CF1?415@
CONST	SEGMENT
??_C@_0EA@ILELJPGA@?5?5volume?5?$CF1?415g?5?5?1?$CKactual?3?5?$CF1?415@ DB ' '
	DB	' volume %1.15g  /*actual: %1.15g*/ lagrange_multiplier %1.15g'
	DB	' ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@PENAHFJH@Internal?5error?3?5body?5?$CFs?5facet?5li@
CONST	SEGMENT
??_C@_0DA@PENAHFJH@Internal?5error?3?5body?5?$CFs?5facet?5li@ DB 'Interna'
	DB	'l error: body %s facet list not closed.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CMEKCKCL@?5?2?6?5?5?5?5?5?5?5?5?5?5?$AA@
CONST	SEGMENT
??_C@_0O@CMEKCKCL@?5?2?6?5?5?5?5?5?5?5?5?5?5?$AA@ DB ' \', 0aH, '        '
	DB	'  ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_09IEEJOLKL@?$CF3s?5?5?5?5?5?5?$AA@
CONST	SEGMENT
??_C@_09IEEJOLKL@?$CF3s?5?5?5?5?5?5?$AA@ DB '%3s      ', 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\dump.c
CONST	ENDS
;	COMDAT _body_dump
_TEXT	SEGMENT
_old_fd$ = -24						; size = 4
tv740 = -20						; size = 4
_bvol$ = -16						; size = 8
_maxcount$ = -12					; size = 4
_count$ = -8						; size = 4
_per_line$ = -4						; size = 4
tv809 = 8						; size = 4
_i$ = 8							; size = 4
_b_id$ = 8						; size = 4
_startf$ = 12						; size = 4
_fd$ = 12						; size = 4
_body_dump PROC						; COMDAT

; 1425 : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 1426 :   REAL den;
; 1427 :   int per_line = 0;
; 1428 :   facet_id startf,f_id;
; 1429 :   int i;
; 1430 :   FILE *old_fd = outfd;

	mov	ecx, DWORD PTR _outfd

; 1431 :   struct extra *ex;
; 1432 :   REAL bvol;
; 1433 :   body_id orig;
; 1434 :   int maxcount = 2*web.skel[FACET].count;

	mov	edx, DWORD PTR _web+288
	push	edi

; 1435 :   int count = 0;
; 1436 : 
; 1437 :   outfd = fd;
; 1438 : 
; 1439 :   if ( !valid_id(b_id) ) return;

	mov	edi, DWORD PTR _b_id$[ebp]
	xor	eax, eax
	mov	DWORD PTR _old_fd$[ebp], ecx
	lea	ecx, DWORD PTR [edx+edx]
	mov	edx, DWORD PTR _fd$[ebp]
	mov	DWORD PTR _per_line$[ebp], eax
	mov	DWORD PTR _maxcount$[ebp], ecx
	mov	DWORD PTR _count$[ebp], eax
	mov	DWORD PTR _outfd, edx
	test	edi, 268435456				; 10000000H
	je	$LN27@body_dump

; 1440 :   /* make_bfacet_lists(); */
; 1441 :   sprintf(msg,"%3s      ",ELNAME(b_id)); outstring(msg); 

	push	ebx
	and	edi, 134217727				; 07ffffffH
	push	esi
	lea	ebx, DWORD PTR [edi+1]
	push	ebx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	mov	DWORD PTR tv740[ebp], edi
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	OFFSET _elnames
	push	OFFSET ??_C@_09IEEJOLKL@?$CF3s?5?5?5?5?5?5?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring

; 1442 :   startf = f_id = get_body_facet(b_id);

	mov	edx, DWORD PTR _web+348
	mov	eax, DWORD PTR [edx+edi*4]
	mov	esi, DWORD PTR [eax+400]

; 1443 :   while ( valid_id(f_id) )

	mov	eax, esi
	shr	eax, 28					; 0000001cH
	add	esp, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR _startf$[ebp], esi
	je	$LN79@body_dump
	npad	2
$LL25@body_dump:

; 1444 :   { sprintf(msg," %s",SELNAME(f_id));

	test	eax, eax
	je	SHORT $LN33@body_dump
	mov	eax, OFFSET ??_C@_01JOAMLHOP@?9?$AA@
	test	esi, 134217728				; 08000000H
	jne	SHORT $LN32@body_dump
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN32@body_dump:
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	inc	ecx
	push	ecx
	push	eax
	push	OFFSET ??_C@_04HGGBINEM@?$CFs?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 16					; 00000010H
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN34@body_dump
$LN33@body_dump:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN34@body_dump:
	mov	edx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_03EEBNCBOD@?5?$CFs?$AA@
	push	edx
	call	_sprintf

; 1445 :     outstring(msg); 

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring

; 1446 :     per_line++;

	mov	eax, DWORD PTR _per_line$[ebp]
	inc	eax
	add	esp, 16					; 00000010H
	mov	DWORD PTR _per_line$[ebp], eax

; 1447 :     if ( per_line >= 10 )

	cmp	eax, 10					; 0000000aH
	jl	SHORT $LN23@body_dump

; 1448 :     { sprintf(msg," \\\n          "); outstring(msg); 

	mov	ecx, DWORD PTR _msg
	push	OFFSET ??_C@_0O@CMEKCKCL@?5?2?6?5?5?5?5?5?5?5?5?5?5?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 12					; 0000000cH

; 1449 :       per_line = 0;

	mov	DWORD PTR _per_line$[ebp], 0
$LN23@body_dump:

; 1450 :     }
; 1451 :     f_id = get_next_body_facet(f_id);

	push	esi
	call	_get_next_body_facet
	mov	esi, eax
	add	esp, 4

; 1452 :     if ( equal_id(f_id,startf) )

	cmp	esi, DWORD PTR _startf$[ebp]
	je	SHORT $LN79@body_dump

; 1453 :       break;
; 1454 :     if ( count++ > maxcount )

	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, eax
	inc	eax
	mov	DWORD PTR _count$[ebp], eax
	cmp	ecx, DWORD PTR _maxcount$[ebp]
	jle	SHORT $LN21@body_dump

; 1455 :     { sprintf(errmsg,"Internal error: body %s facet list not closed.\n",
; 1456 :              ELNAME(b_id));

	push	ebx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	push	OFFSET _elnames
	push	OFFSET ??_C@_0DA@PENAHFJH@Internal?5error?3?5body?5?$CFs?5facet?5li@
	push	OFFSET _errmsg
	call	_sprintf

; 1457 :       kb_error(4221,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	4221					; 0000107dH
	call	_kb_error
	add	esp, 36					; 00000024H
$LN21@body_dump:

; 1443 :   while ( valid_id(f_id) )

	mov	eax, esi
	shr	eax, 28					; 0000001cH
	and	eax, 1
	jne	$LL25@body_dump
$LN79@body_dump:

; 1458 :     }
; 1459 :   }
; 1460 :   bvol = get_body_volume(b_id);

	mov	edx, DWORD PTR _web+348
	mov	ecx, DWORD PTR [edx+edi*4]

; 1461 :   if ( get_battr(b_id) & FIXEDVOL )

	mov	eax, DWORD PTR [ecx+8]
	fld	QWORD PTR [ecx+40]
	and	eax, 32					; 00000020H
	fst	QWORD PTR _bvol$[ebp]
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN20@body_dump

; 1462 :     { sprintf(msg,
; 1463 : #ifdef FLOAT128
; 1464 :         "  volume %1.*Qg  /*actual: %1.*Qg*/ lagrange_multiplier %1.*Qg ",
; 1465 :                      DPREC,get_body_fixvol(b_id), DPREC,
; 1466 :                      bvol,DPREC,get_body_pressure(b_id));
; 1467 : #elif defined(LONGDOUBLE)
; 1468 :         "  volume %1.*Lg  /*actual: %1.*Lg*/ lagrange_multiplier %1.*Lg ",
; 1469 :                      DPREC,get_body_fixvol(b_id), DPREC,
; 1470 :                      bvol,DPREC,get_body_pressure(b_id));
; 1471 : #else
; 1472 :         "  volume %1.15g  /*actual: %1.15g*/ lagrange_multiplier %1.15g ",
; 1473 :                     get_body_fixvol(b_id), 
; 1474 :                     bvol,get_body_pressure(b_id));

	fld	QWORD PTR [ecx+312]
	mov	eax, DWORD PTR _msg
	sub	esp, 24					; 00000018H
	fstp	QWORD PTR [esp+16]
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR [ecx+32]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0EA@ILELJPGA@?5?5volume?5?$CF1?415g?5?5?1?$CKactual?3?5?$CF1?415@
	push	eax
	call	_sprintf

; 1475 : #endif 
; 1476 :       outstring(msg); 

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	fld	QWORD PTR _bvol$[ebp]
	add	esp, 36					; 00000024H
$LN20@body_dump:

; 1477 :     }
; 1478 : 
; 1479 :   if ( get_battr(b_id) & WANT_CENTEROFMASS )

	mov	edx, DWORD PTR _web+348
	mov	eax, DWORD PTR [edx+edi*4]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 2
	xor	eax, eax
	or	eax, ecx
	je	SHORT $LN19@body_dump

; 1480 :     {
; 1481 :       outstring(" centerofmass "); 

	push	OFFSET ??_C@_0P@GOKGMPFB@?5centerofmass?5?$AA@
	fstp	ST(0)
	call	_outstring
	fld	QWORD PTR _bvol$[ebp]
	add	esp, 4
$LN19@body_dump:

; 1482 :     }
; 1483 : 
; 1484 :     if ( (get_body_volconst(b_id) != 0.0) )

	mov	eax, DWORD PTR _web+348
	mov	ecx, DWORD PTR [eax+edi*4]
	fld	QWORD PTR [ecx+328]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN18@body_dump
	fstp	ST(0)

; 1485 : #ifdef FLOAT128
; 1486 :       { sprintf(msg, "  volconst %1.*Qg ",DPREC,get_body_volconst(b_id)); 
; 1487 : #elif defined(LONGDOUBLE)
; 1488 :       { sprintf(msg, "  volconst %1.*Lg ",DPREC,get_body_volconst(b_id)); 
; 1489 : #else
; 1490 :       { sprintf(msg, "  volconst %1.15g ",get_body_volconst(b_id)); 

	sub	esp, 8
	fld	QWORD PTR [ecx+328]
	mov	ecx, DWORD PTR _msg
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BD@COJGMIHJ@?5?5volconst?5?$CF1?415g?5?$AA@
	push	ecx
	call	_sprintf

; 1491 : #endif 
; 1492 :         outstring(msg); }

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	fld	QWORD PTR _bvol$[ebp]
	add	esp, 20					; 00000014H
$LN18@body_dump:

; 1493 : 
; 1494 :     if ( web.torus_flag && ((bvol > web.torusv) || (bvol < 0.0)) )

	cmp	DWORD PTR _web+860, 0
	je	SHORT $LN99@body_dump
	fld	QWORD PTR _web+1600
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN16@body_dump
	fldz
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN99@body_dump
$LN16@body_dump:

; 1495 : #ifdef FLOAT128
; 1496 :     { sprintf(msg, "  actual_volume %1.*Qg ",DPREC,bvol); 
; 1497 : #elif defined(LONGDOUBLE)
; 1498 :     { sprintf(msg, "  actual_volume %1.*Lg ",DPREC,bvol); 
; 1499 : #else
; 1500 :     { sprintf(msg, "  actual_volume %1.15g ",bvol); 

	mov	eax, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BI@HLMDHKDG@?5?5actual_volume?5?$CF1?415g?5?$AA@
	push	eax
	call	_sprintf

; 1501 : #endif 
; 1502 :       outstring(msg); }

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 20					; 00000014H
	jmp	SHORT $LN17@body_dump
$LN99@body_dump:

; 1493 : 
; 1494 :     if ( web.torus_flag && ((bvol > web.torusv) || (bvol < 0.0)) )

	fstp	ST(0)
$LN17@body_dump:

; 1503 : 
; 1504 :     if ( get_battr(b_id) & PRESSURE ) 

	mov	edx, DWORD PTR _web+348
	mov	ecx, DWORD PTR [edx+edi*4]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 2048				; 00000800H
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN15@body_dump

; 1505 : #ifdef FLOAT128
; 1506 :       { sprintf(msg,"  pressure %1.*Qg",DPREC, get_body_pressure(b_id)); outstring(msg); }
; 1507 : #elif defined(LONGDOUBLE)
; 1508 :       { sprintf(msg,"  pressure %1.*Lg",DPREC, get_body_pressure(b_id)); outstring(msg); }
; 1509 : #else
; 1510 :       { sprintf(msg,"  pressure %1.15g", get_body_pressure(b_id)); outstring(msg); }

	fld	QWORD PTR [ecx+312]
	mov	eax, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BC@DILLNLHG@?5?5pressure?5?$CF1?415g?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 20					; 00000014H
$LN15@body_dump:

; 1511 : #endif 
; 1512 :     den = get_body_density(b_id);

	mov	edx, DWORD PTR _web+348
	mov	eax, DWORD PTR [edx+edi*4]
	fld	QWORD PTR [eax+344]

; 1513 :     if ( den != 0.0 )

	fld	ST(0)
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN101@body_dump

; 1514 : #ifdef FLOAT128
; 1515 :          { sprintf(msg,"  density %1.*Qg ",DPREC,den); outstring(msg); }
; 1516 : #elif defined(LONGDOUBLE)
; 1517 :          { sprintf(msg,"  density %1.*Lg ",DPREC,den); outstring(msg); }
; 1518 : #else
; 1519 :          { sprintf(msg,"  density %1.15g ",den); outstring(msg); }

	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BC@EFJBNHNK@?5?5density?5?$CF1?415g?5?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 20					; 00000014H
	jmp	SHORT $LN14@body_dump
$LN101@body_dump:
	fstp	ST(0)
$LN14@body_dump:

; 1520 : #endif 
; 1521 :     if ( phase_flag && (web.representation == SOAPFILM) )

	cmp	DWORD PTR _phase_flag, 0
	je	SHORT $LN13@body_dump
	cmp	DWORD PTR _web+624, 2
	jne	SHORT $LN13@body_dump

; 1522 :          { sprintf(msg," PHASE %d ",get_b_phase(b_id)); outstring(msg); }

	mov	eax, DWORD PTR _B_PHASE_ATTR
	imul	eax, 240				; 000000f0H
	add	eax, DWORD PTR _web+440
	add	eax, DWORD PTR _dymem
	cmp	DWORD PTR [eax+88], 0
	je	SHORT $LN37@body_dump
	mov	edx, DWORD PTR _web+348
	mov	ecx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [eax+64]
	mov	eax, DWORD PTR [ecx+edx]
	jmp	SHORT $LN38@body_dump
$LN37@body_dump:
	xor	eax, eax
$LN38@body_dump:
	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0L@OKFCHLED@?5PHASE?5?$CFd?5?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 16					; 00000010H
$LN13@body_dump:

; 1523 :     orig = get_original(b_id);

	mov	edx, DWORD PTR _b_id$[ebp]
	mov	eax, edx
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	lea	ecx, DWORD PTR _web[eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+edi*4]
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR tv809[ebp], ecx

; 1524 :     if ( valid_id(orig) && !equal_element(orig,b_id) ) 

	test	eax, 268435456				; 10000000H
	je	SHORT $LN12@body_dump
	mov	esi, eax
	or	esi, 134217728				; 08000000H
	or	edx, 134217728				; 08000000H
	cmp	esi, edx
	je	SHORT $LN12@body_dump

; 1525 :     { sprintf(msg," original %s",ELNAME(orig)); 

	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	OFFSET _elnames
	push	OFFSET ??_C@_0N@LLGMOCIP@?5original?5?$CFs?$AA@
	push	ecx
	call	_sprintf

; 1526 :     outstring(msg); }

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	mov	ecx, DWORD PTR tv809[ebp]
	add	esp, 28					; 0000001cH
$LN12@body_dump:

; 1527 :     if ( elptr(b_id)->method_count )

	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+edi*4]
	movzx	ecx, WORD PTR [eax+24]
	test	cx, cx
	je	$LN80@body_dump

; 1528 :     { struct method_instance *mi;
; 1529 :       int meth_offset = EXTRAS(BODY)[web.meth_attr[BODY]].offset;

	mov	edx, DWORD PTR _web+5676

; 1530 :       int *methlist = (int*)((char*)elptr(b_id) + meth_offset);

	mov	esi, DWORD PTR _dymem
	imul	edx, 240				; 000000f0H
	add	edx, DWORD PTR _web+440
	mov	ebx, DWORD PTR [edx+esi+64]
	add	ebx, eax

; 1531 :       for ( i = 0 ; i < (int)elptr(b_id)->method_count ; i++ )

	xor	eax, eax
	xor	esi, esi
	cmp	ax, cx
	jae	$LN80@body_dump
$LL10@body_dump:

; 1532 :       { mi = METH_INSTANCE(abs(methlist[i]));

	mov	ecx, DWORD PTR [ebx+esi*4]
	mov	eax, ecx
	cdq
	xor	eax, edx
	sub	eax, edx
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list

; 1533 :         if ( mi->flags & IMPLICIT_INSTANCE )

	test	DWORD PTR [eax+140], 2097152		; 00200000H
	je	SHORT $LN7@body_dump

; 1534 :           sprintf(msg,"%s ",GEN_QUANT(mi->quants[0])->name);

	mov	ecx, DWORD PTR [eax+152]
	mov	edx, DWORD PTR _msg
	imul	ecx, 368				; 00000170H
	add	ecx, DWORD PTR _gen_quant_list
	push	ecx
	push	OFFSET ??_C@_03IKGEINEE@?$CFs?5?$AA@
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN6@body_dump
$LN7@body_dump:

; 1535 :         else sprintf(msg,"%s%c ",mi->name,methlist[i]>0?' ':'-'); 

	xor	edx, edx
	test	ecx, ecx
	setle	dl
	dec	edx
	and	edx, -13				; fffffff3H
	add	edx, 45					; 0000002dH
	push	edx
	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_05OPNHFOBB@?$CFs?$CFc?5?$AA@
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H
$LN6@body_dump:

; 1536 :         outstring(msg); 

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	mov	edx, DWORD PTR tv809[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+edi*4]
	movzx	edx, WORD PTR [ecx+24]
	inc	esi
	add	esp, 4
	cmp	esi, edx
	jl	$LL10@body_dump
$LN80@body_dump:

; 1537 :       }
; 1538 :     }
; 1539 : 
; 1540 :   /* extra attributes */
; 1541 :   for ( i = 0, ex = EXTRAS(BODY) ; i < web.skel[BODY].extra_count;
; 1542 :               i++,ex++ )

	mov	esi, DWORD PTR _web+440
	add	esi, DWORD PTR _dymem
	xor	ebx, ebx
	mov	DWORD PTR _i$[ebp], ebx
	cmp	DWORD PTR _web+444, ebx
	jle	SHORT $LN3@body_dump
$LL83@body_dump:

; 1543 :     { char *at = get_b_extra(b_id,i);

	mov	edx, DWORD PTR _web+440
	mov	ecx, DWORD PTR _dymem
	lea	eax, DWORD PTR [ebx+edx]
	mov	edi, DWORD PTR [eax+ecx+64]
	mov	edx, DWORD PTR tv740[ebp]
	mov	eax, DWORD PTR _web+348
	add	edi, DWORD PTR [eax+edx*4]

; 1544 :       if ( !(ex->flags & DUMP_ATTR) ) continue;

	test	BYTE PTR [esi+232], 1
	je	SHORT $LN4@body_dump

; 1545 :       if ( ex->array_spec.datacount == 0 ) continue;

	cmp	DWORD PTR [esi+88], 0
	je	SHORT $LN4@body_dump

; 1546 :       sprintf(msg," %s ",ex->name);

	mov	ecx, DWORD PTR _msg
	push	esi
	push	OFFSET ??_C@_04KMMDIKEB@?5?$CFs?5?$AA@
	push	ecx
	call	_sprintf

; 1547 :       outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 1548 :       print_array_attribute(ex,at);

	push	edi
	push	esi
	call	_print_array_attribute
	add	esp, 24					; 00000018H
$LN4@body_dump:

; 1537 :       }
; 1538 :     }
; 1539 : 
; 1540 :   /* extra attributes */
; 1541 :   for ( i = 0, ex = EXTRAS(BODY) ; i < web.skel[BODY].extra_count;
; 1542 :               i++,ex++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	add	ebx, 240				; 000000f0H
	add	esi, 240				; 000000f0H
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _web+444
	jl	SHORT $LL83@body_dump
$LN3@body_dump:

; 1549 :     }
; 1550 : 
; 1551 :   outstring("\n"); 

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring

; 1552 : 
; 1553 :   outfd = old_fd;

	mov	eax, DWORD PTR _old_fd$[ebp]
	add	esp, 4
	pop	esi
	mov	DWORD PTR _outfd, eax
	pop	ebx
$LN27@body_dump:
	pop	edi

; 1554 : } /* end body_dump */

	mov	esp, ebp
	pop	ebp
	ret	0
_body_dump ENDP
_TEXT	ENDS
PUBLIC	??_C@_06GIICIPCE@?$CFs?5on?6?$AA@		; `string'
PUBLIC	??_C@_06OHHADACI@?6read?6?$AA@			; `string'
PUBLIC	_toggle_save
_BSS	SEGMENT
_readflag DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_06GIICIPCE@?$CFs?5on?6?$AA@
CONST	SEGMENT
??_C@_06GIICIPCE@?$CFs?5on?6?$AA@ DB '%s on', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06OHHADACI@?6read?6?$AA@
CONST	SEGMENT
??_C@_06OHHADACI@?6read?6?$AA@ DB 0aH, 'read', 0aH, 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _toggle_save
_TEXT	SEGMENT
_togglename$ = 8					; size = 4
_toggle_save PROC					; COMDAT

; 1569 : { if ( readflag == 0 ) { outstring("\nread\n"); readflag = 1; }

	push	ebp
	mov	ebp, esp
	cmp	DWORD PTR _readflag, 0
	jne	SHORT $LN1@toggle_sav
	push	OFFSET ??_C@_06OHHADACI@?6read?6?$AA@
	call	_outstring
	add	esp, 4
	mov	DWORD PTR _readflag, 1
$LN1@toggle_sav:

; 1570 :   sprintf(msg,"%s on\n",togglename);

	mov	eax, DWORD PTR _togglename$[ebp]
	mov	ecx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_06GIICIPCE@?$CFs?5on?6?$AA@
	push	ecx
	call	_sprintf

; 1571 :   outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 16					; 00000010H

; 1572 : 
; 1573 : } // end toggle_save()

	pop	ebp
	ret	0
_toggle_save ENDP
_TEXT	ENDS
PUBLIC	??_C@_07ECPNJEHP@?$CFs?5off?6?$AA@		; `string'
PUBLIC	_toggle_save_off
;	COMDAT ??_C@_07ECPNJEHP@?$CFs?5off?6?$AA@
CONST	SEGMENT
??_C@_07ECPNJEHP@?$CFs?5off?6?$AA@ DB '%s off', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _toggle_save_off
_TEXT	SEGMENT
_togglename$ = 8					; size = 4
_toggle_save_off PROC					; COMDAT

; 1585 : { if ( readflag == 0 ) { outstring("\nread\n"); readflag = 1; }

	push	ebp
	mov	ebp, esp
	cmp	DWORD PTR _readflag, 0
	jne	SHORT $LN1@toggle_sav@2
	push	OFFSET ??_C@_06OHHADACI@?6read?6?$AA@
	call	_outstring
	add	esp, 4
	mov	DWORD PTR _readflag, 1
$LN1@toggle_sav@2:

; 1586 :   sprintf(msg,"%s off\n",togglename);

	mov	eax, DWORD PTR _togglename$[ebp]
	mov	ecx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_07ECPNJEHP@?$CFs?5off?6?$AA@
	push	ecx
	call	_sprintf

; 1587 :   outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 16					; 00000010H

; 1588 : } // end toggle_save_off()

	pop	ebp
	ret	0
_toggle_save_off ENDP
_TEXT	ENDS
PUBLIC	??_C@_02MCILKGOH@?$HL?$HN?$AA@			; `string'
PUBLIC	??_C@_06JFMACMHF@?$CFs?5?3?$DN?5?$AA@		; `string'
PUBLIC	??_C@_07DMFHGJKH@?$CFs?5?3?3?$DN?5?$AA@		; `string'
PUBLIC	??_C@_0CF@JKOMABIH@?8?$CFs?8?5involved?5in?5cyclic?5definiti@ ; `string'
PUBLIC	_list_proc
EXTRN	_proc_timestamp:DWORD
;	COMDAT ??_C@_02MCILKGOH@?$HL?$HN?$AA@
CONST	SEGMENT
??_C@_02MCILKGOH@?$HL?$HN?$AA@ DB '{}', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JFMACMHF@?$CFs?5?3?$DN?5?$AA@
CONST	SEGMENT
??_C@_06JFMACMHF@?$CFs?5?3?$DN?5?$AA@ DB '%s := ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DMFHGJKH@?$CFs?5?3?3?$DN?5?$AA@
CONST	SEGMENT
??_C@_07DMFHGJKH@?$CFs?5?3?3?$DN?5?$AA@ DB '%s ::= ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JKOMABIH@?8?$CFs?8?5involved?5in?5cyclic?5definiti@
CONST	SEGMENT
??_C@_0CF@JKOMABIH@?8?$CFs?8?5involved?5in?5cyclic?5definiti@ DB '''%s'' '
	DB	'involved in cyclic definition.', 0aH, 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _list_proc
_TEXT	SEGMENT
_node$ = -4						; size = 4
_g$ = 8							; size = 4
_level$ = 12						; size = 4
_list_proc PROC						; COMDAT

; 1700 : { struct expnode *ex = &g->value.proc;

	push	ebp
	mov	ebp, esp
	push	ecx

; 1701 :   struct treenode *node;
; 1702 :   int pp;
; 1703 : 
; 1704 :   g->attr.procstuff.proc_timestamp = proc_timestamp;

	mov	eax, DWORD PTR _proc_timestamp

; 1705 :   if ( level > web.global_count ) 

	mov	ecx, DWORD PTR _level$[ebp]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _g$[ebp]
	mov	DWORD PTR [esi+176], eax
	lea	ebx, DWORD PTR [esi+64]
	cmp	ecx, DWORD PTR _web+5540
	jle	SHORT $LN13@list_proc

; 1706 :   { sprintf(errmsg,"'%s' involved in cyclic definition.\n",g->name);

	push	esi
	push	OFFSET ??_C@_0CF@JKOMABIH@?8?$CFs?8?5involved?5in?5cyclic?5definiti@
	push	OFFSET _errmsg
	call	_sprintf

; 1707 :      kb_error(1007,errmsg,WARNING);

	push	2
	push	OFFSET _errmsg
	push	1007					; 000003efH
	call	_kb_error
	add	esp, 24					; 00000018H

; 1708 :   }
; 1709 :   else

	jmp	$LN9@list_proc
$LN13@list_proc:

; 1710 :   {
; 1711 :     /* check dependencies */
; 1712 :     for ( node = ex->start ; node != ex->root ; node ++  )

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR _node$[ebp], eax
	cmp	eax, DWORD PTR [ebx+4]
	je	$LN9@list_proc
	mov	esi, DWORD PTR _web+5652
	push	edi
	mov	edi, DWORD PTR _dymem
	npad	10
$LL11@list_proc:

; 1713 :       if ( node->type == PROCEDURE_NODE )

	cmp	DWORD PTR [eax], 10026			; 0000272aH
	jne	$LN10@list_proc

; 1714 :       { pp = node->op1.name_id;

	mov	eax, DWORD PTR [eax+32]

; 1715 :         if ( globals(pp)->attr.procstuff.proc_timestamp < proc_timestamp )

	mov	edx, eax
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN16@list_proc
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN18@list_proc
	mov	ebx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	mov	ecx, eax
	imul	ecx, 224				; 000000e0H
	add	ecx, DWORD PTR [ebx]
	jmp	SHORT $LN17@list_proc
$LN18@list_proc:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN16@list_proc
	mov	ecx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN17@list_proc
$LN16@list_proc:
	and	eax, 16777215				; 00ffffffH
	lea	ecx, DWORD PTR [esi+eax*4]
	mov	ecx, DWORD PTR [ecx+edi]
$LN17@list_proc:
	mov	ecx, DWORD PTR [ecx+176]
	cmp	ecx, DWORD PTR _proc_timestamp
	jge	SHORT $LN30@list_proc

; 1716 :             list_proc(globals(pp),level+1);

	cmp	edx, 268435456				; 10000000H
	jne	SHORT $LN26@list_proc
	lea	edx, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [edx+edi]
	jmp	SHORT $LN23@list_proc
$LN26@list_proc:
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN24@list_proc
	mov	ecx, DWORD PTR _localbase
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN23@list_proc
$LN24@list_proc:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN22@list_proc
	mov	edx, DWORD PTR _web+5656
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN23@list_proc
$LN22@list_proc:
	lea	eax, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [eax+edi]
$LN23@list_proc:
	mov	ecx, DWORD PTR _level$[ebp]
	inc	ecx
	push	ecx
	push	eax
	call	_list_proc
	mov	esi, DWORD PTR _web+5652
	mov	edi, DWORD PTR _dymem
	add	esp, 8
$LN30@list_proc:
	mov	eax, DWORD PTR _node$[ebp]
$LN10@list_proc:

; 1710 :   {
; 1711 :     /* check dependencies */
; 1712 :     for ( node = ex->start ; node != ex->root ; node ++  )

	mov	ebx, DWORD PTR _g$[ebp]
	add	eax, 168				; 000000a8H
	add	ebx, 64					; 00000040H
	mov	DWORD PTR _node$[ebp], eax
	cmp	eax, DWORD PTR [ebx+4]
	jne	$LL11@list_proc
	mov	esi, DWORD PTR _g$[ebp]
	pop	edi
$LN9@list_proc:

; 1717 :       }
; 1718 :   }
; 1719 : 
; 1720 :   /* print */
; 1721 :   if ( g->flags & PERMANENT )

	test	BYTE PTR [esi+192], 16			; 00000010H

; 1722 :     sprintf(msg,"%s ::= ",g->name);

	push	esi
	je	SHORT $LN6@list_proc
	mov	edx, DWORD PTR _msg
	push	OFFSET ??_C@_07DMFHGJKH@?$CFs?5?3?3?$DN?5?$AA@
	push	edx
	jmp	SHORT $LN31@list_proc
$LN6@list_proc:

; 1723 :   else sprintf(msg,"%s := ",g->name);

	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_06JFMACMHF@?$CFs?5?3?$DN?5?$AA@
	push	eax
$LN31@list_proc:
	call	_sprintf

; 1724 :   outstring(msg);

	mov	ecx, DWORD PTR _msg
	add	esp, 12					; 0000000cH
	push	ecx
	call	_outstring

; 1725 :   if ( g->value.proc.root==NULL )

	mov	eax, DWORD PTR [esi+68]
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN4@list_proc

; 1726 :       outstring("{}");

	push	OFFSET ??_C@_02MCILKGOH@?$HL?$HN?$AA@

; 1727 :   else

	jmp	SHORT $LN32@list_proc
$LN4@list_proc:

; 1728 :   { if ( g->value.proc.root->type != COMMAND_BLOCK_NODE )

	cmp	DWORD PTR [eax], 10029			; 0000272dH
	je	SHORT $LN2@list_proc

; 1729 :       outstring("{"); 

	push	OFFSET ??_C@_01HCONENDN@?$HL?$AA@
	call	_outstring
	add	esp, 4
$LN2@list_proc:

; 1730 :     outstring(print_express(&g->value.proc,'X'));

	push	88					; 00000058H
	push	ebx
	call	_print_express
	push	eax
	call	_outstring

; 1731 :     if ( g->value.proc.root->type != COMMAND_BLOCK_NODE )

	mov	edx, DWORD PTR [esi+68]
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR [edx], 10029			; 0000272dH
	je	SHORT $LN1@list_proc

; 1732 :       outstring("}");

	push	OFFSET ??_C@_01CELHOKLL@?$HN?$AA@
$LN32@list_proc:
	call	_outstring
	add	esp, 4
$LN1@list_proc:

; 1733 :   }
; 1734 :   outstring("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring

; 1735 :   g->attr.procstuff.proc_timestamp = proc_timestamp;

	mov	eax, DWORD PTR _proc_timestamp
	add	esp, 4
	mov	DWORD PTR [esi+176], eax
	pop	esi
	pop	ebx

; 1736 : } /* end list_proc() */

	mov	esp, ebp
	pop	ebp
	ret	0
_list_proc ENDP
_TEXT	ENDS
PUBLIC	??_C@_02PHMGELLB@?6?6?$AA@			; `string'
PUBLIC	??_C@_0CO@CECCPMNH@?5body?5definition?5has?5not?5been?5ex@ ; `string'
PUBLIC	??_C@_03IAHPLKPE@?1?1?5?$AA@			; `string'
PUBLIC	_list_function
;	COMDAT ??_C@_02PHMGELLB@?6?6?$AA@
CONST	SEGMENT
??_C@_02PHMGELLB@?6?6?$AA@ DB 0aH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@CECCPMNH@?5body?5definition?5has?5not?5been?5ex@
CONST	SEGMENT
??_C@_0CO@CECCPMNH@?5body?5definition?5has?5not?5been?5ex@ DB ' body defi'
	DB	'nition has not been executed yet.', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03IAHPLKPE@?1?1?5?$AA@
CONST	SEGMENT
??_C@_03IAHPLKPE@?1?1?5?$AA@ DB '// ', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _list_function
_TEXT	SEGMENT
_g$ = 8							; size = 4
_list_function PROC					; COMDAT

; 1746 : { 

	push	ebp
	mov	ebp, esp
	push	esi

; 1747 :   if ( g->value.proc.root == NULL )

	mov	esi, DWORD PTR _g$[ebp]
	cmp	DWORD PTR [esi+68], 0
	jne	SHORT $LN2@list_funct

; 1748 :   { outstring("// ");

	push	OFFSET ??_C@_03IAHPLKPE@?1?1?5?$AA@
	call	_outstring

; 1749 :     outstring(g->name);

	push	esi
	call	_outstring

; 1750 :     outstring(" body definition has not been executed yet.\n\n");

	push	OFFSET ??_C@_0CO@CECCPMNH@?5body?5definition?5has?5not?5been?5ex@
	call	_outstring
	add	esp, 12					; 0000000cH
	pop	esi

; 1755 :   }
; 1756 : } /* end list_function() */

	pop	ebp
	ret	0
$LN2@list_funct:

; 1751 :   }
; 1752 :   else
; 1753 :   { outstring(print_express(&g->value.proc,'X'));

	push	88					; 00000058H
	add	esi, 64					; 00000040H
	push	esi
	call	_print_express
	push	eax
	call	_outstring

; 1754 :     outstring("\n\n");

	push	OFFSET ??_C@_02PHMGELLB@?6?6?$AA@
	call	_outstring
	add	esp, 16					; 00000010H
	pop	esi

; 1755 :   }
; 1756 : } /* end list_function() */

	pop	ebp
	ret	0
_list_function ENDP
_TEXT	ENDS
PUBLIC	_list_procedure
; Function compile flags: /Ogtp
;	COMDAT _list_procedure
_TEXT	SEGMENT
_g$ = 8							; size = 4
_list_procedure PROC					; COMDAT

; 1765 : { if ( g->value.proc.root == NULL )

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR _g$[ebp]
	cmp	DWORD PTR [esi+68], 0
	jne	SHORT $LN2@list_proce

; 1766 :   { outstring("// ");

	push	OFFSET ??_C@_03IAHPLKPE@?1?1?5?$AA@
	call	_outstring

; 1767 :     outstring(g->name);

	push	esi
	call	_outstring

; 1768 :     outstring(" body definition has not been executed yet.\n\n");

	push	OFFSET ??_C@_0CO@CECCPMNH@?5body?5definition?5has?5not?5been?5ex@
	call	_outstring
	add	esp, 12					; 0000000cH
	pop	esi

; 1773 :   }
; 1774 : } /* end list_procedure() */

	pop	ebp
	ret	0
$LN2@list_proce:

; 1769 :   }
; 1770 :   else
; 1771 :   { outstring(print_express(&g->value.proc,'X'));

	push	88					; 00000058H
	add	esi, 64					; 00000040H
	push	esi
	call	_print_express
	push	eax
	call	_outstring

; 1772 :     outstring("\n\n");

	push	OFFSET ??_C@_02PHMGELLB@?6?6?$AA@
	call	_outstring
	add	esp, 16					; 00000010H
	pop	esi

; 1773 :   }
; 1774 : } /* end list_procedure() */

	pop	ebp
	ret	0
_list_procedure ENDP
_TEXT	ENDS
PUBLIC	??_C@_03NBFACCKM@?$CJ?$DL?6?$AA@		; `string'
PUBLIC	??_C@_01ODHLEDKK@?$CI?$AA@			; `string'
PUBLIC	??_C@_0CP@PECBFLEK@?$CI?$CJ?$DL?5?5?1?1?5definition?5has?5not?5been?5@ ; `string'
PUBLIC	??_C@_09LFJOPOOD@function?5?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_list_function_proto
;	COMDAT ??_C@_03NBFACCKM@?$CJ?$DL?6?$AA@
CONST	SEGMENT
??_C@_03NBFACCKM@?$CJ?$DL?6?$AA@ DB ');', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01ODHLEDKK@?$CI?$AA@
CONST	SEGMENT
??_C@_01ODHLEDKK@?$CI?$AA@ DB '(', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@PECBFLEK@?$CI?$CJ?$DL?5?5?1?1?5definition?5has?5not?5been?5@
CONST	SEGMENT
??_C@_0CP@PECBFLEK@?$CI?$CJ?$DL?5?5?1?1?5definition?5has?5not?5been?5@ DB '('
	DB	');  // definition has not been executed yet.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LFJOPOOD@function?5?$AA@
CONST	SEGMENT
??_C@_09LFJOPOOD@function?5?$AA@ DB 'function ', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _list_function_proto
_TEXT	SEGMENT
_ex$ = -108						; size = 104
__$ArrayPad$ = -4					; size = 4
_g$ = 8							; size = 4
_list_function_proto PROC				; COMDAT

; 1783 : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	mov	ebx, DWORD PTR _g$[ebp]
	push	esi
	push	edi

; 1784 :   struct expnode ex = g->value.proc;  /* copy, since will modify */

	lea	esi, DWORD PTR [ebx+64]
	mov	ecx, 26					; 0000001aH
	lea	edi, DWORD PTR _ex$[ebp]
	rep movsd

; 1785 :   if ( !ex.root ) 

	cmp	DWORD PTR _ex$[ebp+4], 0
	je	$LN1@list_funct@2

; 1786 :       return;
; 1787 :   outstring("function ");

	push	OFFSET ??_C@_09LFJOPOOD@function?5?$AA@
	call	_outstring

; 1788 :   outstring(datatype_name[ex.root->op4.ret_type]);

	mov	eax, DWORD PTR _ex$[ebp+4]
	mov	ecx, DWORD PTR [eax+148]
	mov	edx, DWORD PTR _datatype_name[ecx*4]
	push	edx
	call	_outstring

; 1789 :   outstring(" ");

	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	call	_outstring

; 1790 :   outstring(g->name);

	push	ebx
	call	_outstring
	add	esp, 16					; 00000010H

; 1791 :    if ( ex.root == NULL )

	cmp	DWORD PTR _ex$[ebp+4], 0
	jne	SHORT $LN2@list_funct@2

; 1792 :     outstring("();  // definition has not been executed yet.\n");

	push	OFFSET ??_C@_0CP@PECBFLEK@?$CI?$CJ?$DL?5?5?1?1?5definition?5has?5not?5been?5@
	call	_outstring
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 1798 :   }
; 1799 : } /* end list_function() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@list_funct@2:

; 1793 :   else
; 1794 :   { outstring("(");

	push	OFFSET ??_C@_01ODHLEDKK@?$CI?$AA@
	call	_outstring

; 1795 :     ex.root += ex.root->left; /* so just does function head */

	mov	eax, DWORD PTR _ex$[ebp+4]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 168				; 000000a8H

; 1796 :     outstring(print_express(&ex,'X'));

	lea	edx, DWORD PTR _ex$[ebp]
	add	eax, ecx
	push	88					; 00000058H
	push	edx
	mov	DWORD PTR _ex$[ebp+4], eax
	call	_print_express
	push	eax
	call	_outstring

; 1797 :     outstring(");\n");

	push	OFFSET ??_C@_03NBFACCKM@?$CJ?$DL?6?$AA@
	call	_outstring
	add	esp, 20					; 00000014H
$LN1@list_funct@2:

; 1798 :   }
; 1799 : } /* end list_function() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_list_function_proto ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@EMOGJCEE@?$CI?$CJ?$DL?5?1?1?5definition?5has?5not?5been?5e@ ; `string'
PUBLIC	??_C@_04MHIHGOGI@?$CI?$CJ?$DL?6?$AA@		; `string'
PUBLIC	??_C@_0L@CECPKEKH@procedure?5?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_list_procedure_proto
;	COMDAT ??_C@_0CO@EMOGJCEE@?$CI?$CJ?$DL?5?1?1?5definition?5has?5not?5been?5e@
CONST	SEGMENT
??_C@_0CO@EMOGJCEE@?$CI?$CJ?$DL?5?1?1?5definition?5has?5not?5been?5e@ DB '('
	DB	'); // definition has not been executed yet.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04MHIHGOGI@?$CI?$CJ?$DL?6?$AA@
CONST	SEGMENT
??_C@_04MHIHGOGI@?$CI?$CJ?$DL?6?$AA@ DB '();', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CECPKEKH@procedure?5?$AA@
CONST	SEGMENT
??_C@_0L@CECPKEKH@procedure?5?$AA@ DB 'procedure ', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _list_procedure_proto
_TEXT	SEGMENT
_ex$ = -108						; size = 104
__$ArrayPad$ = -4					; size = 4
_g$ = 8							; size = 4
_list_procedure_proto PROC				; COMDAT

; 1808 : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	mov	ebx, DWORD PTR _g$[ebp]
	push	esi
	push	edi

; 1809 :   struct expnode ex = g->value.proc;

	lea	esi, DWORD PTR [ebx+64]
	mov	ecx, 26					; 0000001aH
	lea	edi, DWORD PTR _ex$[ebp]

; 1810 :   outstring("procedure ");

	push	OFFSET ??_C@_0L@CECPKEKH@procedure?5?$AA@
	rep movsd
	call	_outstring

; 1811 :   outstring(g->name);

	push	ebx
	call	_outstring
	add	esp, 8

; 1812 :   if ( g->attr.procstuff.argcount == 0 ) 

	cmp	DWORD PTR [ebx+168], 0
	jne	SHORT $LN5@list_proce@2

; 1813 :   { if ( g->flags & PROCEDURE_NAME )

	test	DWORD PTR [ebx+192], 2097152		; 00200000H
	je	SHORT $LN4@list_proce@2

; 1814 :        outstring("();\n"); 

	push	OFFSET ??_C@_04MHIHGOGI@?$CI?$CJ?$DL?6?$AA@
	call	_outstring
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 1825 :   }
; 1826 : } /* end list_procedure_proto() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@list_proce@2:

; 1815 :     else outstring("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 1825 :   }
; 1826 : } /* end list_procedure_proto() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@list_proce@2:

; 1816 :     return;
; 1817 :   }
; 1818 :   if ( ex.root == NULL )

	cmp	DWORD PTR _ex$[ebp+4], 0
	jne	SHORT $LN2@list_proce@2

; 1819 :     outstring("(); // definition has not been executed yet.\n");

	push	OFFSET ??_C@_0CO@EMOGJCEE@?$CI?$CJ?$DL?5?1?1?5definition?5has?5not?5been?5e@
	call	_outstring
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 1825 :   }
; 1826 : } /* end list_procedure_proto() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@list_proce@2:

; 1820 :   else
; 1821 :   { outstring("(");

	push	OFFSET ??_C@_01ODHLEDKK@?$CI?$AA@
	call	_outstring

; 1822 :     ex.root += ex.root->left; /* so just does procedure head */

	mov	eax, DWORD PTR _ex$[ebp+4]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 168				; 000000a8H

; 1823 :     outstring(print_express(&ex,'X'));

	lea	edx, DWORD PTR _ex$[ebp]
	add	eax, ecx
	push	88					; 00000058H
	push	edx
	mov	DWORD PTR _ex$[ebp+4], eax
	call	_print_express
	push	eax
	call	_outstring

; 1824 :     outstring(");\n");

	push	OFFSET ??_C@_03NBFACCKM@?$CJ?$DL?6?$AA@
	call	_outstring

; 1825 :   }
; 1826 : } /* end list_procedure_proto() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_list_procedure_proto ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@FDCAEBHI@?1?1?5End?5prototypes?6?6?$AA@ ; `string'
PUBLIC	??_C@_0CH@FINLKJDE@?6?1?1?5Function?5and?5procedure?5proto@ ; `string'
PUBLIC	_list_top_procedures
;	COMDAT ??_C@_0BE@FDCAEBHI@?1?1?5End?5prototypes?6?6?$AA@
CONST	SEGMENT
??_C@_0BE@FDCAEBHI@?1?1?5End?5prototypes?6?6?$AA@ DB '// End prototypes', 0aH
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@FINLKJDE@?6?1?1?5Function?5and?5procedure?5proto@
CONST	SEGMENT
??_C@_0CH@FINLKJDE@?6?1?1?5Function?5and?5procedure?5proto@ DB 0aH, '// F'
	DB	'unction and procedure prototypes', 0aH, 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _list_top_procedures
_TEXT	SEGMENT
_protoflag$ = -4					; size = 4
_flags$90795 = 8					; size = 4
_i$ = 8							; size = 4
_mode$ = 8						; size = 4
_list_top_procedures PROC				; COMDAT

; 1839 : { int i; 

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx

; 1840 :   int protoflag = 0; /* whether printed prototype comment */
; 1841 : 
; 1842 :   proc_timestamp++;

	mov	eax, 1
	add	DWORD PTR _proc_timestamp, eax
	xor	ebx, ebx

; 1843 : 
; 1844 :   /* prototypes */
; 1845 :   if ( mode == LIST_PROTO )

	cmp	DWORD PTR _mode$[ebp], eax
	push	esi
	push	edi
	mov	DWORD PTR _protoflag$[ebp], ebx

; 1846 :   for ( i = 0 ; i < web.global_count ; i++ )

	mov	DWORD PTR _i$[ebp], ebx
	jne	$LN64@list_top_p
	cmp	DWORD PTR _web+5540, ebx
	jle	$LN3@list_top_p
	mov	ecx, DWORD PTR _web+5652
	mov	edx, DWORD PTR _dymem
	npad	5
$LL14@list_top_p:

; 1847 :   {
; 1848 :     if ( globals(i)->flags & FUNCTION_NAME ) 

	mov	edi, ebx
	and	edi, -16777216				; ff000000H
	cmp	edi, 268435456				; 10000000H
	je	SHORT $LN18@list_top_p
	cmp	edi, 805306368				; 30000000H
	jne	SHORT $LN20@list_top_p
	mov	esi, ebx
	mov	ebx, DWORD PTR _localbase
	and	esi, 16777215				; 00ffffffH
	mov	eax, esi
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ebx]
	mov	ebx, DWORD PTR _i$[ebp]
	jmp	SHORT $LN19@list_top_p
$LN20@list_top_p:
	cmp	edi, 536870912				; 20000000H
	jne	SHORT $LN18@list_top_p
	mov	eax, DWORD PTR _web+5656
	mov	esi, ebx
	and	esi, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	jmp	SHORT $LN19@list_top_p
$LN18@list_top_p:
	mov	esi, ebx
	and	esi, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR [eax+edx]
$LN19@list_top_p:
	test	DWORD PTR [eax+192], 1048576		; 00100000H
	je	SHORT $LN66@list_top_p

; 1849 :     { if ( protoflag == 0 )

	cmp	DWORD PTR _protoflag$[ebp], 0
	jne	SHORT $LN65@list_top_p

; 1850 :       { outstring("\n// Function and procedure prototypes\n");

	push	OFFSET ??_C@_0CH@FINLKJDE@?6?1?1?5Function?5and?5procedure?5proto@
	call	_outstring

; 1851 :         protoflag = 1;

	mov	ecx, DWORD PTR _web+5652
	mov	edx, DWORD PTR _dymem
	add	esp, 4
	mov	DWORD PTR _protoflag$[ebp], 1
$LN65@list_top_p:

; 1852 :       }
; 1853 :       list_function_proto(globals(i));

	cmp	edi, 268435456				; 10000000H
	je	SHORT $LN24@list_top_p
	cmp	edi, 805306368				; 30000000H
	jne	SHORT $LN26@list_top_p
	mov	edx, DWORD PTR _localbase
	mov	eax, esi
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [edx]
	jmp	SHORT $LN25@list_top_p
$LN26@list_top_p:
	cmp	edi, 536870912				; 20000000H
	jne	SHORT $LN24@list_top_p
	mov	eax, DWORD PTR _web+5656
	mov	eax, DWORD PTR [eax+esi*4]
	jmp	SHORT $LN25@list_top_p
$LN24@list_top_p:
	lea	ecx, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR [ecx+edx]
$LN25@list_top_p:
	push	eax
	call	_list_function_proto
	mov	ecx, DWORD PTR _web+5652
	mov	edx, DWORD PTR _dymem
	add	esp, 4
$LN66@list_top_p:

; 1854 :     }
; 1855 :     if ( globals(i)->flags & PROCEDURE_NAME ) 

	cmp	edi, 268435456				; 10000000H
	je	SHORT $LN30@list_top_p
	cmp	edi, 805306368				; 30000000H
	jne	SHORT $LN32@list_top_p
	mov	ebx, DWORD PTR _localbase
	mov	eax, esi
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ebx]
	mov	ebx, DWORD PTR _i$[ebp]
	jmp	SHORT $LN31@list_top_p
$LN32@list_top_p:
	cmp	edi, 536870912				; 20000000H
	jne	SHORT $LN30@list_top_p
	mov	eax, DWORD PTR _web+5656
	mov	eax, DWORD PTR [eax+esi*4]
	jmp	SHORT $LN31@list_top_p
$LN30@list_top_p:
	lea	eax, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR [eax+edx]
$LN31@list_top_p:
	test	DWORD PTR [eax+192], 2097152		; 00200000H
	je	SHORT $LN13@list_top_p

; 1856 :     { if ( protoflag == 0 )

	cmp	DWORD PTR _protoflag$[ebp], 0
	jne	SHORT $LN8@list_top_p

; 1857 :       { outstring("\n// Function and procedure prototypes\n");

	push	OFFSET ??_C@_0CH@FINLKJDE@?6?1?1?5Function?5and?5procedure?5proto@
	call	_outstring

; 1858 :         protoflag = 1;

	mov	ecx, DWORD PTR _web+5652
	mov	edx, DWORD PTR _dymem
	add	esp, 4
	mov	DWORD PTR _protoflag$[ebp], 1
$LN8@list_top_p:

; 1859 :       }
; 1860 :       list_procedure_proto(globals(i));

	cmp	edi, 268435456				; 10000000H
	je	SHORT $LN36@list_top_p
	cmp	edi, 805306368				; 30000000H
	jne	SHORT $LN38@list_top_p
	mov	edx, DWORD PTR _localbase
	imul	esi, 224				; 000000e0H
	add	esi, DWORD PTR [edx]
	jmp	SHORT $LN37@list_top_p
$LN38@list_top_p:
	cmp	edi, 536870912				; 20000000H
	jne	SHORT $LN36@list_top_p
	mov	eax, DWORD PTR _web+5656
	mov	esi, DWORD PTR [eax+esi*4]
	jmp	SHORT $LN37@list_top_p
$LN36@list_top_p:
	lea	ecx, DWORD PTR [ecx+esi*4]
	mov	esi, DWORD PTR [ecx+edx]
$LN37@list_top_p:
	push	esi
	call	_list_procedure_proto
	mov	ecx, DWORD PTR _web+5652
	mov	edx, DWORD PTR _dymem
	add	esp, 4
$LN13@list_top_p:

; 1846 :   for ( i = 0 ; i < web.global_count ; i++ )

	inc	ebx
	mov	DWORD PTR _i$[ebp], ebx
	cmp	ebx, DWORD PTR _web+5540
	jl	$LL14@list_top_p

; 1861 :     }
; 1862 :   }
; 1863 :   if ( protoflag )

	cmp	DWORD PTR _protoflag$[ebp], 0
	je	$LN3@list_top_p

; 1864 :     outstring("// End prototypes\n\n");

	push	OFFSET ??_C@_0BE@FDCAEBHI@?1?1?5End?5prototypes?6?6?$AA@
	call	_outstring
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 1876 :   }
; 1877 : 
; 1878 : } /* end list_top_procedures() */

	mov	esp, ebp
	pop	ebp
	ret	0
$LN64@list_top_p:

; 1865 : 
; 1866 :   if ( mode == LIST_PROTO )
; 1867 :     return;
; 1868 : 
; 1869 :   /* full function definitions */
; 1870 :   for ( i = 0 ; i < web.global_count ; i++ )

	cmp	DWORD PTR _web+5540, ebx
	jle	$LN3@list_top_p
	mov	ecx, DWORD PTR _web+5652
	mov	edx, DWORD PTR _dymem
$LL5@list_top_p:

; 1871 :   { int flags = globals(i)->flags;

	mov	edi, ebx
	and	edi, -16777216				; ff000000H
	cmp	edi, 268435456				; 10000000H
	je	SHORT $LN42@list_top_p
	cmp	edi, 805306368				; 30000000H
	jne	SHORT $LN44@list_top_p
	mov	esi, ebx
	mov	ebx, DWORD PTR _localbase
	and	esi, 16777215				; 00ffffffH
	mov	eax, esi
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ebx]
	mov	ebx, DWORD PTR _i$[ebp]
	jmp	SHORT $LN43@list_top_p
$LN44@list_top_p:
	cmp	edi, 536870912				; 20000000H
	jne	SHORT $LN42@list_top_p
	mov	eax, DWORD PTR _web+5656
	mov	esi, ebx
	and	esi, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	jmp	SHORT $LN43@list_top_p
$LN42@list_top_p:
	mov	esi, ebx
	and	esi, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR [eax+edx]
$LN43@list_top_p:
	mov	eax, DWORD PTR [eax+192]
	mov	DWORD PTR _flags$90795[ebp], eax

; 1872 :     if ( (flags & FUNCTION_NAME) && (flags & IN_DATAFILE_TOP) ) 

	test	eax, 1048576				; 00100000H
	je	SHORT $LN2@list_top_p
	test	eax, 67108864				; 04000000H
	je	SHORT $LN2@list_top_p

; 1873 :         list_function(globals(i));

	cmp	edi, 268435456				; 10000000H
	je	SHORT $LN48@list_top_p
	cmp	edi, 805306368				; 30000000H
	jne	SHORT $LN50@list_top_p
	mov	edx, DWORD PTR _localbase
	mov	eax, esi
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [edx]
	jmp	SHORT $LN49@list_top_p
$LN50@list_top_p:
	cmp	edi, 536870912				; 20000000H
	jne	SHORT $LN48@list_top_p
	mov	eax, DWORD PTR _web+5656
	mov	eax, DWORD PTR [eax+esi*4]
	jmp	SHORT $LN49@list_top_p
$LN48@list_top_p:
	lea	ecx, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR [ecx+edx]
$LN49@list_top_p:
	push	eax
	call	_list_function
	mov	ecx, DWORD PTR _web+5652
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR _flags$90795[ebp]
	add	esp, 4
$LN2@list_top_p:

; 1874 :     if ( (flags & PROCEDURE_NAME) && (flags & IN_DATAFILE_TOP) ) 

	test	eax, 2097152				; 00200000H
	je	SHORT $LN4@list_top_p
	test	eax, 67108864				; 04000000H
	je	SHORT $LN4@list_top_p

; 1875 :         list_procedure(globals(i));

	cmp	edi, 268435456				; 10000000H
	je	SHORT $LN54@list_top_p
	cmp	edi, 805306368				; 30000000H
	jne	SHORT $LN56@list_top_p
	mov	ecx, DWORD PTR _localbase
	imul	esi, 224				; 000000e0H
	add	esi, DWORD PTR [ecx]
	jmp	SHORT $LN55@list_top_p
$LN56@list_top_p:
	cmp	edi, 536870912				; 20000000H
	jne	SHORT $LN54@list_top_p
	mov	edx, DWORD PTR _web+5656
	mov	esi, DWORD PTR [edx+esi*4]
	jmp	SHORT $LN55@list_top_p
$LN54@list_top_p:
	lea	eax, DWORD PTR [ecx+esi*4]
	mov	esi, DWORD PTR [eax+edx]
$LN55@list_top_p:
	push	esi
	call	_list_procedure
	mov	ecx, DWORD PTR _web+5652
	mov	edx, DWORD PTR _dymem
	add	esp, 4
$LN4@list_top_p:

; 1865 : 
; 1866 :   if ( mode == LIST_PROTO )
; 1867 :     return;
; 1868 : 
; 1869 :   /* full function definitions */
; 1870 :   for ( i = 0 ; i < web.global_count ; i++ )

	inc	ebx
	mov	DWORD PTR _i$[ebp], ebx
	cmp	ebx, DWORD PTR _web+5540
	jl	$LL5@list_top_p
$LN3@list_top_p:
	pop	edi
	pop	esi
	pop	ebx

; 1876 :   }
; 1877 : 
; 1878 : } /* end list_top_procedures() */

	mov	esp, ebp
	pop	ebp
	ret	0
_list_top_procedures ENDP
_TEXT	ENDS
PUBLIC	??_C@_08CIJIHMDB@?$CFc?5?3?3?3?$DN?5?$AA@	; `string'
PUBLIC	??_C@_02HAOIJKIC@?$CFc?$AA@			; `string'
PUBLIC	??_C@_0CH@FOGKBOPG@?1?1?5Redefined?5single?5letter?5comma@ ; `string'
PUBLIC	??_C@_0DC@NOIDPIGC@?1?1?5Procedures?5and?5functions?5with@ ; `string'
PUBLIC	??_C@_0CC@LAGEPGII@?1?1?5Procedures?5without?5arguments?3@ ; `string'
PUBLIC	??_C@_0L@IHPPGLHE@?$CFs?5?3?3?$DN?5?$HL?$HN?6?$AA@ ; `string'
PUBLIC	??_C@_0CI@EKFPCIEJ@?1?1?5Permanent?5procedures?5and?5func@ ; `string'
PUBLIC	??_C@_09OKJHDHCE@?$CFs?5?3?$DN?5?$HL?$HN?6?$AA@	; `string'
PUBLIC	??_C@_0DC@LLLKONBK@?1?1Procedures?5and?5functions?5forwa@ ; `string'
PUBLIC	??_C@_0N@EMKEKBON@?$CFc?5?3?3?3?$DN?5?$HL?$HN?5?6?$AA@ ; `string'
PUBLIC	??_C@_0DM@HNPEFGEG@?1?1?5Redefined?5single?5letter?5comma@ ; `string'
PUBLIC	_list_procedures
EXTRN	_single_redefine:BYTE
;	COMDAT ??_C@_08CIJIHMDB@?$CFc?5?3?3?3?$DN?5?$AA@
CONST	SEGMENT
??_C@_08CIJIHMDB@?$CFc?5?3?3?3?$DN?5?$AA@ DB '%c :::= ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02HAOIJKIC@?$CFc?$AA@
CONST	SEGMENT
??_C@_02HAOIJKIC@?$CFc?$AA@ DB '%c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@FOGKBOPG@?1?1?5Redefined?5single?5letter?5comma@
CONST	SEGMENT
??_C@_0CH@FOGKBOPG@?1?1?5Redefined?5single?5letter?5comma@ DB '// Redefin'
	DB	'ed single letter commands: ', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@NOIDPIGC@?1?1?5Procedures?5and?5functions?5with@
CONST	SEGMENT
??_C@_0DC@NOIDPIGC@?1?1?5Procedures?5and?5functions?5with@ DB '// Procedu'
	DB	'res and functions with argument lists:', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@LAGEPGII@?1?1?5Procedures?5without?5arguments?3@
CONST	SEGMENT
??_C@_0CC@LAGEPGII@?1?1?5Procedures?5without?5arguments?3@ DB '// Procedu'
	DB	'res without arguments:', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IHPPGLHE@?$CFs?5?3?3?$DN?5?$HL?$HN?6?$AA@
CONST	SEGMENT
??_C@_0L@IHPPGLHE@?$CFs?5?3?3?$DN?5?$HL?$HN?6?$AA@ DB '%s ::= {}', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@EKFPCIEJ@?1?1?5Permanent?5procedures?5and?5func@
CONST	SEGMENT
??_C@_0CI@EKFPCIEJ@?1?1?5Permanent?5procedures?5and?5func@ DB '// Permane'
	DB	'nt procedures and functions:', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OKJHDHCE@?$CFs?5?3?$DN?5?$HL?$HN?6?$AA@
CONST	SEGMENT
??_C@_09OKJHDHCE@?$CFs?5?3?$DN?5?$HL?$HN?6?$AA@ DB '%s := {}', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@LLLKONBK@?1?1Procedures?5and?5functions?5forwa@
CONST	SEGMENT
??_C@_0DC@LLLKONBK@?1?1Procedures?5and?5functions?5forwa@ DB '//Procedure'
	DB	's and functions forward declarations:', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EMKEKBON@?$CFc?5?3?3?3?$DN?5?$HL?$HN?5?6?$AA@
CONST	SEGMENT
??_C@_0N@EMKEKBON@?$CFc?5?3?3?3?$DN?5?$HL?$HN?5?6?$AA@ DB '%c :::= {} ', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@HNPEFGEG@?1?1?5Redefined?5single?5letter?5comma@
CONST	SEGMENT
??_C@_0DM@HNPEFGEG@?1?1?5Redefined?5single?5letter?5comma@ DB '// Redefin'
	DB	'ed single letter commands forward declarations: ', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _list_procedures
_TEXT	SEGMENT
tv588 = -20						; size = 4
_redefheader$ = -16					; size = 4
_without_comment_flag$ = -16				; size = 4
_perm_comment_flag$ = -12				; size = 4
_witharg_comment_flag$ = -8				; size = 4
_i$ = -4						; size = 4
_forward_comment_flag$ = -4				; size = 4
_mode$ = 8						; size = 4
_list_procedures PROC					; COMDAT

; 1889 : { int i; 

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx

; 1890 :   int perm_comment_flag = 0;

	xor	eax, eax
	push	esi

; 1891 :   int witharg_comment_flag = 0;
; 1892 :   int without_comment_flag = 0;
; 1893 :   int forward_comment_flag = 0;
; 1894 :   int redefheader;
; 1895 : 
; 1896 :   proc_timestamp++;

	mov	ecx, 1
	add	DWORD PTR _proc_timestamp, ecx
	push	edi

; 1897 : 
; 1898 :   /* redefined single letters dummy defs (i.e. forward decls) */
; 1899 :   redefheader = 0;

	xor	edi, edi
	mov	DWORD PTR _perm_comment_flag$[ebp], eax
	mov	DWORD PTR _witharg_comment_flag$[ebp], eax
	mov	DWORD PTR _without_comment_flag$[ebp], eax
	mov	DWORD PTR _forward_comment_flag$[ebp], eax

; 1900 :   if ( mode != LIST_PROTO )

	cmp	DWORD PTR _mode$[ebp], ecx
	je	$LN137@list_proce@3

; 1901 :    for ( i = 0 ; i < 128 ; i++ )

	xor	ebx, ebx
	mov	esi, OFFSET _single_redefine
	jmp	SHORT $LN51@list_proce@3
$LL147@list_proce@3:
	xor	eax, eax
$LN51@list_proce@3:

; 1902 :      if ( single_redefine[i].start )

	cmp	DWORD PTR [esi], eax
	je	SHORT $LN50@list_proce@3

; 1903 :      { 
; 1904 :         if ( !redefheader )

	cmp	edi, eax
	jne	SHORT $LN47@list_proce@3

; 1905 :         { outstring("// Redefined single letter commands forward declarations: \n");

	push	OFFSET ??_C@_0DM@HNPEFGEG@?1?1?5Redefined?5single?5letter?5comma@
	call	_outstring
	add	esp, 4

; 1906 :           redefheader = 1;

	mov	edi, 1
$LN47@list_proce@3:

; 1907 :         }
; 1908 :         sprintf(msg,"%c :::= {} \n",i);

	mov	eax, DWORD PTR _msg
	push	ebx
	push	OFFSET ??_C@_0N@EMKEKBON@?$CFc?5?3?3?3?$DN?5?$HL?$HN?5?6?$AA@
	push	eax
	call	_sprintf

; 1909 :         outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 16					; 00000010H
$LN50@list_proce@3:

; 1901 :    for ( i = 0 ; i < 128 ; i++ )

	add	esi, 104				; 00000068H
	inc	ebx
	cmp	esi, OFFSET _single_redefine+13312
	jl	SHORT $LL147@list_proce@3

; 1910 :      }
; 1911 : 
; 1912 : 
; 1913 :   if ( mode != LIST_PROTO )
; 1914 :   { 
; 1915 :     /* function definition forward decls */
; 1916 :     for ( i = 0 ; i < web.global_count ; i++ )

	mov	ecx, DWORD PTR _web+5652
	mov	edx, DWORD PTR _dymem
	xor	edi, edi
	cmp	DWORD PTR _web+5540, edi
	jle	$LN43@list_proce@3
	npad	8
$LL45@list_proce@3:

; 1917 :     { if ( globals(i)->flags & SUBROUTINE ) 

	mov	ebx, edi
	and	ebx, -16777216				; ff000000H
	mov	DWORD PTR tv588[ebp], ebx
	cmp	ebx, 268435456				; 10000000H
	je	SHORT $LN55@list_proce@3
	cmp	ebx, 805306368				; 30000000H
	jne	SHORT $LN57@list_proce@3
	mov	ebx, DWORD PTR _localbase
	mov	esi, edi
	and	esi, 16777215				; 00ffffffH
	mov	eax, esi
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ebx]
	mov	ebx, DWORD PTR tv588[ebp]
	jmp	SHORT $LN56@list_proce@3
$LN57@list_proce@3:
	cmp	ebx, 536870912				; 20000000H
	jne	SHORT $LN55@list_proce@3
	mov	eax, DWORD PTR _web+5656
	mov	esi, edi
	and	esi, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	jmp	SHORT $LN56@list_proce@3
$LN55@list_proce@3:
	mov	esi, edi
	and	esi, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR [eax+edx]
$LN56@list_proce@3:
	test	BYTE PTR [eax+192], 4
	je	$LN44@list_proce@3

; 1918 :       { 
; 1919 :         if ( !forward_comment_flag )

	cmp	DWORD PTR _forward_comment_flag$[ebp], 0
	jne	SHORT $LN41@list_proce@3

; 1920 :         { outstring("//Procedures and functions forward declarations:\n");

	push	OFFSET ??_C@_0DC@LLLKONBK@?1?1Procedures?5and?5functions?5forwa@
	call	_outstring

; 1921 :           forward_comment_flag = 1;

	mov	ecx, DWORD PTR _web+5652
	mov	edx, DWORD PTR _dymem
	add	esp, 4
	mov	DWORD PTR _forward_comment_flag$[ebp], 1
$LN41@list_proce@3:

; 1922 :         }
; 1923 :         sprintf(msg,"%s := {}\n",globals(i)->name);

	cmp	ebx, 268435456				; 10000000H
	je	SHORT $LN61@list_proce@3
	cmp	ebx, 805306368				; 30000000H
	jne	SHORT $LN63@list_proce@3
	mov	edx, DWORD PTR _localbase
	imul	esi, 224				; 000000e0H
	add	esi, DWORD PTR [edx]
	mov	edx, esi
	jmp	SHORT $LN62@list_proce@3
$LN63@list_proce@3:
	cmp	ebx, 536870912				; 20000000H
	jne	SHORT $LN61@list_proce@3
	mov	eax, DWORD PTR _web+5656
	mov	edx, DWORD PTR [eax+esi*4]
	jmp	SHORT $LN62@list_proce@3
$LN61@list_proce@3:
	lea	ecx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [ecx+edx]
$LN62@list_proce@3:
	push	edx
	mov	edx, DWORD PTR _msg
	push	OFFSET ??_C@_09OKJHDHCE@?$CFs?5?3?$DN?5?$HL?$HN?6?$AA@
	push	edx
	call	_sprintf

; 1924 :         outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	mov	ecx, DWORD PTR _web+5652
	mov	edx, DWORD PTR _dymem
	add	esp, 16					; 00000010H
$LN44@list_proce@3:

; 1910 :      }
; 1911 : 
; 1912 : 
; 1913 :   if ( mode != LIST_PROTO )
; 1914 :   { 
; 1915 :     /* function definition forward decls */
; 1916 :     for ( i = 0 ; i < web.global_count ; i++ )

	inc	edi
	cmp	edi, DWORD PTR _web+5540
	jl	$LL45@list_proce@3
$LN43@list_proce@3:

; 1925 :       }
; 1926 :      
; 1927 :     }
; 1928 :   
; 1929 :     for ( i = 0 ; i < web.perm_global_count ; i++ )

	xor	edi, edi
	cmp	DWORD PTR _web+5548, edi
	jle	SHORT $LN38@list_proce@3
$LL148@list_proce@3:

; 1930 :     { if ( perm_globals(i)->flags & SUBROUTINE ) 

	mov	ecx, DWORD PTR _web+5656
	mov	esi, edi
	and	esi, 16777215				; 00ffffffH
	add	esi, esi
	add	esi, esi
	mov	edx, DWORD PTR [esi+ecx]
	test	BYTE PTR [edx+192], 4
	je	SHORT $LN39@list_proce@3

; 1931 :       { if ( !perm_comment_flag )

	cmp	DWORD PTR _perm_comment_flag$[ebp], 0
	jne	SHORT $LN36@list_proce@3

; 1932 :         { outstring("// Permanent procedures and functions:\n");

	push	OFFSET ??_C@_0CI@EKFPCIEJ@?1?1?5Permanent?5procedures?5and?5func@
	call	_outstring
	add	esp, 4

; 1933 :           perm_comment_flag = 1;

	mov	DWORD PTR _perm_comment_flag$[ebp], 1
$LN36@list_proce@3:

; 1934 :         }
; 1935 :         sprintf(msg,"%s ::= {}\n",perm_globals(i)->name);

	mov	eax, DWORD PTR _web+5656
	mov	ecx, DWORD PTR [esi+eax]
	mov	edx, DWORD PTR _msg
	push	ecx
	push	OFFSET ??_C@_0L@IHPPGLHE@?$CFs?5?3?3?$DN?5?$HL?$HN?6?$AA@
	push	edx
	call	_sprintf

; 1936 :         outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 16					; 00000010H
$LN39@list_proce@3:

; 1925 :       }
; 1926 :      
; 1927 :     }
; 1928 :   
; 1929 :     for ( i = 0 ; i < web.perm_global_count ; i++ )

	inc	edi
	cmp	edi, DWORD PTR _web+5548
	jl	SHORT $LL148@list_proce@3
$LN137@list_proce@3:
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+5652
$LN38@list_proce@3:

; 1937 :       }
; 1938 :     }
; 1939 :   }
; 1940 : 
; 1941 :   /* full function definitions */
; 1942 :    for ( i = 0 ; i < web.global_count ; i++ )

	xor	ebx, ebx
	mov	DWORD PTR _i$[ebp], ebx
	cmp	DWORD PTR _web+5540, ebx
	jle	$LN33@list_proce@3
	npad	10
$LL35@list_proce@3:

; 1943 :   { if ( globals(i)->flags & SUBROUTINE ) 

	mov	edi, ebx
	and	edi, -16777216				; ff000000H
	cmp	edi, 268435456				; 10000000H
	je	SHORT $LN67@list_proce@3
	cmp	edi, 805306368				; 30000000H
	jne	SHORT $LN69@list_proce@3
	mov	esi, ebx
	mov	ebx, DWORD PTR _localbase
	and	esi, 16777215				; 00ffffffH
	mov	eax, esi
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ebx]
	mov	ebx, DWORD PTR _i$[ebp]
	jmp	SHORT $LN68@list_proce@3
$LN69@list_proce@3:
	cmp	edi, 536870912				; 20000000H
	jne	SHORT $LN67@list_proce@3
	mov	eax, DWORD PTR _web+5656
	mov	esi, ebx
	and	esi, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	jmp	SHORT $LN68@list_proce@3
$LN67@list_proce@3:
	mov	esi, ebx
	and	esi, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR [eax+edx]
$LN68@list_proce@3:
	test	BYTE PTR [eax+192], 4
	je	$LN34@list_proce@3

; 1944 :       if ( globals(i)->attr.procstuff.proc_timestamp < proc_timestamp )

	cmp	edi, 268435456				; 10000000H
	je	SHORT $LN73@list_proce@3
	cmp	edi, 805306368				; 30000000H
	jne	SHORT $LN75@list_proce@3
	mov	ebx, DWORD PTR _localbase
	mov	eax, esi
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ebx]
	jmp	SHORT $LN74@list_proce@3
$LN75@list_proce@3:
	cmp	edi, 536870912				; 20000000H
	jne	SHORT $LN73@list_proce@3
	mov	eax, DWORD PTR _web+5656
	mov	eax, DWORD PTR [eax+esi*4]
	jmp	SHORT $LN74@list_proce@3
$LN73@list_proce@3:
	lea	eax, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR [eax+edx]
$LN74@list_proce@3:
	mov	eax, DWORD PTR [eax+176]
	cmp	eax, DWORD PTR _proc_timestamp
	jge	$LN139@list_proce@3

; 1945 :         { 
; 1946 :           if ( !without_comment_flag )

	cmp	DWORD PTR _without_comment_flag$[ebp], 0
	jne	SHORT $LN138@list_proce@3

; 1947 :           { outstring("// Procedures without arguments:\n");

	push	OFFSET ??_C@_0CC@LAGEPGII@?1?1?5Procedures?5without?5arguments?3@
	call	_outstring

; 1948 :             without_comment_flag = 1;

	mov	ecx, DWORD PTR _web+5652
	mov	edx, DWORD PTR _dymem
	add	esp, 4
	mov	DWORD PTR _without_comment_flag$[ebp], 1
$LN138@list_proce@3:

; 1949 :           }
; 1950 :           if ( mode == LIST_PROTO )

	cmp	DWORD PTR _mode$[ebp], 1
	jne	SHORT $LN29@list_proce@3

; 1951 :             list_procedure_proto(globals(i)); 

	cmp	edi, 268435456				; 10000000H
	je	SHORT $LN79@list_proce@3
	cmp	edi, 805306368				; 30000000H
	jne	SHORT $LN81@list_proce@3
	mov	edx, DWORD PTR _localbase
	imul	esi, 224				; 000000e0H
	add	esi, DWORD PTR [edx]
	mov	edx, esi
	push	edx
	call	_list_procedure_proto
	add	esp, 4

; 1952 :           else

	jmp	SHORT $LN152@list_proce@3
$LN81@list_proce@3:

; 1951 :             list_procedure_proto(globals(i)); 

	cmp	edi, 536870912				; 20000000H
	jne	SHORT $LN79@list_proce@3
	mov	eax, DWORD PTR _web+5656
	mov	edx, DWORD PTR [eax+esi*4]
	push	edx
	call	_list_procedure_proto
	add	esp, 4

; 1952 :           else

	jmp	SHORT $LN152@list_proce@3
$LN79@list_proce@3:

; 1951 :             list_procedure_proto(globals(i)); 

	lea	ecx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [ecx+edx]
	push	edx
	call	_list_procedure_proto
	add	esp, 4

; 1952 :           else

	jmp	SHORT $LN152@list_proce@3
$LN29@list_proce@3:

; 1953 :              list_proc(globals(i),0);

	cmp	edi, 268435456				; 10000000H
	je	SHORT $LN85@list_proce@3
	cmp	edi, 805306368				; 30000000H
	jne	SHORT $LN87@list_proce@3
	mov	ecx, DWORD PTR _localbase
	imul	esi, 224				; 000000e0H
	add	esi, DWORD PTR [ecx]
	mov	edx, esi
	jmp	SHORT $LN86@list_proce@3
$LN87@list_proce@3:
	cmp	edi, 536870912				; 20000000H
	jne	SHORT $LN85@list_proce@3
	mov	edx, DWORD PTR _web+5656
	mov	edx, DWORD PTR [edx+esi*4]
	jmp	SHORT $LN86@list_proce@3
$LN85@list_proce@3:
	lea	eax, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [eax+edx]
$LN86@list_proce@3:
	push	0
	push	edx
	call	_list_proc
	add	esp, 8
$LN152@list_proce@3:
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+5652
$LN139@list_proce@3:

; 1952 :           else

	mov	ebx, DWORD PTR _i$[ebp]
$LN34@list_proce@3:

; 1937 :       }
; 1938 :     }
; 1939 :   }
; 1940 : 
; 1941 :   /* full function definitions */
; 1942 :    for ( i = 0 ; i < web.global_count ; i++ )

	inc	ebx
	mov	DWORD PTR _i$[ebp], ebx
	cmp	ebx, DWORD PTR _web+5540
	jl	$LL35@list_proce@3
$LN33@list_proce@3:

; 1954 :         }
; 1955 :   }
; 1956 : 
; 1957 :   for ( i = 0 ; i < web.perm_global_count ; i++ )

	xor	edi, edi
	cmp	DWORD PTR _web+5548, edi
	jle	SHORT $LN141@list_proce@3
	mov	ebx, DWORD PTR _perm_comment_flag$[ebp]
	npad	5
$LL149@list_proce@3:

; 1958 :   { if ( perm_globals(i)->flags & SUBROUTINE ) 

	mov	ecx, DWORD PTR _web+5656
	mov	esi, edi
	and	esi, 16777215				; 00ffffffH
	add	esi, esi
	add	esi, esi
	mov	edx, DWORD PTR [esi+ecx]
	test	BYTE PTR [edx+192], 4
	je	SHORT $LN26@list_proce@3

; 1959 :     { if ( !perm_comment_flag )

	test	ebx, ebx
	jne	SHORT $LN23@list_proce@3

; 1960 :       { outstring("// Permanent procedures and functions:\n");

	push	OFFSET ??_C@_0CI@EKFPCIEJ@?1?1?5Permanent?5procedures?5and?5func@
	call	_outstring
	add	esp, 4

; 1961 :         perm_comment_flag = 1;

	mov	ebx, 1
$LN23@list_proce@3:

; 1962 :       }
; 1963 :       if ( mode == LIST_PROTO )

	cmp	DWORD PTR _mode$[ebp], 1
	jne	SHORT $LN22@list_proce@3

; 1964 :         list_procedure_proto(perm_globals(i));

	mov	eax, DWORD PTR _web+5656
	mov	ecx, DWORD PTR [esi+eax]
	push	ecx
	call	_list_procedure_proto
	add	esp, 4

; 1965 :       else 

	jmp	SHORT $LN26@list_proce@3
$LN22@list_proce@3:

; 1966 :         list_proc(perm_globals(i),0);

	mov	edx, DWORD PTR _web+5656
	mov	eax, DWORD PTR [esi+edx]
	push	0
	push	eax
	call	_list_proc
	add	esp, 8
$LN26@list_proce@3:

; 1954 :         }
; 1955 :   }
; 1956 : 
; 1957 :   for ( i = 0 ; i < web.perm_global_count ; i++ )

	inc	edi
	cmp	edi, DWORD PTR _web+5548
	jl	SHORT $LL149@list_proce@3
	mov	ecx, DWORD PTR _web+5652
	mov	edx, DWORD PTR _dymem
$LN141@list_proce@3:

; 1967 :     }
; 1968 :   }
; 1969 : 
; 1970 :   /* full function definitions */
; 1971 :   for ( i = 0 ; i < web.global_count ; i++ )

	xor	esi, esi
	mov	DWORD PTR _i$[ebp], esi
	cmp	DWORD PTR _web+5540, esi
	jle	$LN18@list_proce@3
	jmp	SHORT $LN20@list_proce@3
	npad	7
$LL145@list_proce@3:
	mov	esi, DWORD PTR _i$[ebp]
$LN20@list_proce@3:

; 1972 :   { int flags = globals(i)->flags; 

	mov	edi, esi
	and	edi, -16777216				; ff000000H
	cmp	edi, 268435456				; 10000000H
	je	SHORT $LN91@list_proce@3
	cmp	edi, 805306368				; 30000000H
	jne	SHORT $LN93@list_proce@3
	mov	ebx, DWORD PTR _localbase
	and	esi, 16777215				; 00ffffffH
	mov	eax, esi
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ebx]
	jmp	SHORT $LN92@list_proce@3
$LN93@list_proce@3:
	cmp	edi, 536870912				; 20000000H
	jne	SHORT $LN91@list_proce@3
	mov	eax, DWORD PTR _web+5656
	and	esi, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	jmp	SHORT $LN92@list_proce@3
$LN91@list_proce@3:
	and	esi, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR [eax+edx]
$LN92@list_proce@3:
	mov	ebx, DWORD PTR [eax+192]

; 1973 :     if ( (flags & FUNCTION_NAME) && !(flags & IN_DATAFILE_TOP) ) 

	test	ebx, 1048576				; 00100000H
	je	$LN144@list_proce@3
	test	ebx, 67108864				; 04000000H
	jne	$LN144@list_proce@3

; 1974 :     { 
; 1975 :       if ( !witharg_comment_flag )

	cmp	DWORD PTR _witharg_comment_flag$[ebp], 0
	jne	SHORT $LN143@list_proce@3

; 1976 :       { outstring("// Procedures and functions with argument lists:\n");

	push	OFFSET ??_C@_0DC@NOIDPIGC@?1?1?5Procedures?5and?5functions?5with@
	call	_outstring

; 1977 :         witharg_comment_flag = 1;

	mov	ecx, DWORD PTR _web+5652
	mov	edx, DWORD PTR _dymem
	add	esp, 4
	mov	DWORD PTR _witharg_comment_flag$[ebp], 1
$LN143@list_proce@3:

; 1978 :       }
; 1979 :       if ( mode == LIST_PROTO )

	cmp	DWORD PTR _mode$[ebp], 1
	jne	SHORT $LN15@list_proce@3

; 1980 :         list_function_proto(globals(i));

	cmp	edi, 268435456				; 10000000H
	je	SHORT $LN97@list_proce@3
	cmp	edi, 805306368				; 30000000H
	jne	SHORT $LN99@list_proce@3
	mov	edx, DWORD PTR _localbase
	mov	eax, esi
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [edx]
	push	eax
	call	_list_function_proto

; 1981 :       else 

	jmp	SHORT $LN150@list_proce@3
$LN99@list_proce@3:

; 1980 :         list_function_proto(globals(i));

	cmp	edi, 536870912				; 20000000H
	jne	SHORT $LN97@list_proce@3
	mov	eax, DWORD PTR _web+5656
	mov	eax, DWORD PTR [eax+esi*4]
	push	eax
	call	_list_function_proto

; 1981 :       else 

	jmp	SHORT $LN150@list_proce@3
$LN97@list_proce@3:

; 1980 :         list_function_proto(globals(i));

	lea	ecx, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR [ecx+edx]
	push	eax
	call	_list_function_proto

; 1981 :       else 

	jmp	SHORT $LN150@list_proce@3
$LN15@list_proce@3:

; 1982 :         list_function(globals(i));

	cmp	edi, 268435456				; 10000000H
	je	SHORT $LN103@list_proce@3
	cmp	edi, 805306368				; 30000000H
	jne	SHORT $LN105@list_proce@3
	mov	ecx, DWORD PTR _localbase
	mov	eax, esi
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN104@list_proce@3
$LN105@list_proce@3:
	cmp	edi, 536870912				; 20000000H
	jne	SHORT $LN103@list_proce@3
	mov	edx, DWORD PTR _web+5656
	mov	eax, DWORD PTR [edx+esi*4]
	jmp	SHORT $LN104@list_proce@3
$LN103@list_proce@3:
	lea	eax, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR [eax+edx]
$LN104@list_proce@3:
	push	eax
	call	_list_function
$LN150@list_proce@3:
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+5652
	add	esp, 4
$LN144@list_proce@3:

; 1983 :     }
; 1984 :     if ( (flags & PROCEDURE_NAME) && !(flags & IN_DATAFILE_TOP) ) 

	test	ebx, 2097152				; 00200000H
	je	$LN19@list_proce@3
	test	ebx, 67108864				; 04000000H
	jne	$LN19@list_proce@3

; 1985 :     { 
; 1986 :       if ( !witharg_comment_flag )

	cmp	DWORD PTR _witharg_comment_flag$[ebp], 0
	jne	SHORT $LN12@list_proce@3

; 1987 :       { outstring("// Procedures and functions with argument lists:\n");

	push	OFFSET ??_C@_0DC@NOIDPIGC@?1?1?5Procedures?5and?5functions?5with@
	call	_outstring

; 1988 :         witharg_comment_flag = 1;

	mov	ecx, DWORD PTR _web+5652
	mov	edx, DWORD PTR _dymem
	add	esp, 4
	mov	DWORD PTR _witharg_comment_flag$[ebp], 1
$LN12@list_proce@3:

; 1989 :       }
; 1990 :       if ( mode == LIST_PROTO )

	cmp	DWORD PTR _mode$[ebp], 1
	jne	SHORT $LN11@list_proce@3

; 1991 :         list_procedure_proto(globals(i));

	cmp	edi, 268435456				; 10000000H
	je	SHORT $LN109@list_proce@3
	cmp	edi, 805306368				; 30000000H
	jne	SHORT $LN111@list_proce@3
	mov	edx, DWORD PTR _localbase
	imul	esi, 224				; 000000e0H
	add	esi, DWORD PTR [edx]
	mov	edx, esi
	push	edx
	call	_list_procedure_proto

; 1992 :       else 

	jmp	SHORT $LN151@list_proce@3
$LN111@list_proce@3:

; 1991 :         list_procedure_proto(globals(i));

	cmp	edi, 536870912				; 20000000H
	jne	SHORT $LN109@list_proce@3
	mov	eax, DWORD PTR _web+5656
	mov	edx, DWORD PTR [eax+esi*4]
	push	edx
	call	_list_procedure_proto

; 1992 :       else 

	jmp	SHORT $LN151@list_proce@3
$LN109@list_proce@3:

; 1991 :         list_procedure_proto(globals(i));

	lea	ecx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [ecx+edx]
	push	edx
	call	_list_procedure_proto

; 1992 :       else 

	jmp	SHORT $LN151@list_proce@3
$LN11@list_proce@3:

; 1993 :         list_procedure(globals(i));

	cmp	edi, 268435456				; 10000000H
	je	SHORT $LN115@list_proce@3
	cmp	edi, 805306368				; 30000000H
	jne	SHORT $LN117@list_proce@3
	mov	ecx, DWORD PTR _localbase
	imul	esi, 224				; 000000e0H
	add	esi, DWORD PTR [ecx]
	mov	edx, esi
	jmp	SHORT $LN116@list_proce@3
$LN117@list_proce@3:
	cmp	edi, 536870912				; 20000000H
	jne	SHORT $LN115@list_proce@3
	mov	edx, DWORD PTR _web+5656
	mov	edx, DWORD PTR [edx+esi*4]
	jmp	SHORT $LN116@list_proce@3
$LN115@list_proce@3:
	lea	eax, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [eax+edx]
$LN116@list_proce@3:
	push	edx
	call	_list_procedure
$LN151@list_proce@3:
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+5652
	add	esp, 4
$LN19@list_proce@3:

; 1967 :     }
; 1968 :   }
; 1969 : 
; 1970 :   /* full function definitions */
; 1971 :   for ( i = 0 ; i < web.global_count ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _web+5540
	jl	$LL145@list_proce@3
$LN18@list_proce@3:

; 1994 :     }
; 1995 :   }
; 1996 : 
; 1997 :   /* redefined single letters */
; 1998 :   redefheader = 0;

	xor	ebx, ebx
	mov	DWORD PTR _redefheader$[ebp], ebx
	mov	esi, OFFSET _single_redefine+4
	npad	2
$LL146@list_proce@3:

; 2000 :      if ( single_redefine[i].start )

	cmp	DWORD PTR [esi-4], 0
	lea	edi, DWORD PTR [esi-4]
	je	$LN8@list_proce@3

; 2001 :      { 
; 2002 :         if ( !redefheader )

	cmp	DWORD PTR _redefheader$[ebp], 0
	jne	SHORT $LN5@list_proce@3

; 2003 :         { outstring("// Redefined single letter commands: \n");

	push	OFFSET ??_C@_0CH@FOGKBOPG@?1?1?5Redefined?5single?5letter?5comma@
	call	_outstring
	add	esp, 4

; 2004 :           redefheader = 1;

	mov	DWORD PTR _redefheader$[ebp], 1
$LN5@list_proce@3:

; 2005 :         }
; 2006 :         if ( mode == LIST_PROTO )

	cmp	DWORD PTR _mode$[ebp], 1

; 2007 :         { sprintf(msg,"%c",i);

	push	ebx
	jne	SHORT $LN4@list_proce@3
	mov	ecx, DWORD PTR _msg
	push	OFFSET ??_C@_02HAOIJKIC@?$CFc?$AA@
	push	ecx
	call	_sprintf

; 2008 :           outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 16					; 00000010H

; 2009 :         }
; 2010 :         else

	jmp	SHORT $LN1@list_proce@3
$LN4@list_proce@3:

; 2011 :         { sprintf(msg,"%c :::= ",i);

	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_08CIJIHMDB@?$CFc?5?3?3?3?$DN?5?$AA@
	push	eax
	call	_sprintf

; 2012 :           outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring

; 2013 :           if ( single_redefine[i].root->type != COMMAND_BLOCK_NODE )

	mov	edx, DWORD PTR [esi]
	add	esp, 16					; 00000010H
	cmp	DWORD PTR [edx], 10029			; 0000272dH
	je	SHORT $LN2@list_proce@3

; 2014 :             outstring("{"); 

	push	OFFSET ??_C@_01HCONENDN@?$HL?$AA@
	call	_outstring
	add	esp, 4
$LN2@list_proce@3:

; 2015 :           outstring(print_express(&single_redefine[i],'X'));

	push	88					; 00000058H
	push	edi
	call	_print_express
	push	eax
	call	_outstring

; 2016 :           if ( single_redefine[i].root->type != COMMAND_BLOCK_NODE )

	mov	eax, DWORD PTR [esi]
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR [eax], 10029			; 0000272dH
	je	SHORT $LN1@list_proce@3

; 2017 :             outstring("}"); 

	push	OFFSET ??_C@_01CELHOKLL@?$HN?$AA@
	call	_outstring
	add	esp, 4
$LN1@list_proce@3:

; 2018 :         }
; 2019 :         outstring("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	add	esp, 4
$LN8@list_proce@3:

; 1999 :   for ( i = 0 ; i < 128 ; i++ )

	add	esi, 104				; 00000068H
	inc	ebx
	cmp	esi, OFFSET _single_redefine+13316
	jl	$LL146@list_proce@3
	pop	edi
	pop	esi
	pop	ebx

; 2020 :      }
; 2021 : } /* end list_procedures() */

	mov	esp, ebp
	pop	ebp
	ret	0
_list_procedures ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@INDPJLAD@brightness?5?3?$DN?5?$CF2?415g?6?$AA@ ; `string'
PUBLIC	__real@3fe4cccccccccccd
PUBLIC	??_C@_0BM@OJBOKPEJ@target_tolerance?5?3?$DN?5?$CF2?415g?6?$AA@ ; `string'
PUBLIC	??_C@_0L@DLCCMBJF@transforms?$AA@		; `string'
PUBLIC	??_C@_0BF@GKKNLENB@transform_expr?5?$CC?$CFs?$CC?6?$AA@ ; `string'
PUBLIC	??_C@_0BN@PKOEDJIO@linear_metric_mix?5?3?$DN?5?$CF2?415g?6?$AA@ ; `string'
PUBLIC	??_C@_0O@PLHGPNIO@linear_metric?$AA@		; `string'
PUBLIC	??_C@_07GFBFDLBM@gravity?$AA@			; `string'
PUBLIC	??_C@_0BC@KPHKHJOD@interp_bdry_param?$AA@	; `string'
PUBLIC	??_C@_0N@FFMNCIGF@self_similar?$AA@		; `string'
PUBLIC	??_C@_09BPDDPHCA@gv_binary?$AA@			; `string'
PUBLIC	??_C@_0O@MHBOMMFK@force_pos_def?$AA@		; `string'
PUBLIC	??_C@_0L@MABNKBMJ@autorecalc?$AA@		; `string'
PUBLIC	??_C@_0BC@LJJGFBGD@metric_conversion?$AA@	; `string'
PUBLIC	??_C@_07BCIELMPF@pinning?$AA@			; `string'
PUBLIC	??_C@_0O@PKIOMPCC@normal_motion?$AA@		; `string'
PUBLIC	??_C@_0BD@MOPCCJLG@boundary_curvature?$AA@	; `string'
PUBLIC	??_C@_0N@BNMHNAMC@facet_colors?$AA@		; `string'
PUBLIC	??_C@_07IBJKBKNG@shading?$AA@			; `string'
PUBLIC	??_C@_0BF@KHPBBAHH@div_normal_curvature?$AA@	; `string'
PUBLIC	??_C@_0BB@ODBHHAP@normal_curvature?$AA@		; `string'
PUBLIC	??_C@_0BI@KGGFDDEC@mean_curvature_integral?$AA@	; `string'
PUBLIC	??_C@_0N@NFINOFHM@post_project?$AA@		; `string'
PUBLIC	??_C@_0BG@GAEGJDMI@hessian_double_normal?$AA@	; `string'
PUBLIC	??_C@_0BD@HMMIFHMP@hessian_normal_one?$AA@	; `string'
PUBLIC	??_C@_0BE@IEAFMCH@hessian_normal_perp?$AA@	; `string'
PUBLIC	??_C@_0P@BMDMDICD@hessian_normal?$AA@		; `string'
PUBLIC	??_C@_0N@PBIFKJMI@hessian_diff?$AA@		; `string'
PUBLIC	??_C@_0N@DFPINMIP@smooth_graph?$AA@		; `string'
PUBLIC	??_C@_0BA@MDFPOHGI@ps_crossingflag?$AA@		; `string'
PUBLIC	??_C@_0N@ECHDFDIC@ps_labelflag?$AA@		; `string'
PUBLIC	??_C@_0M@LOFHKFBI@ps_cmykflag?$AA@		; `string'
PUBLIC	??_C@_0N@PDJMPNAK@ps_colorflag?$AA@		; `string'
PUBLIC	??_C@_0M@CAFGBCMP@pop_to_edge?$AA@		; `string'
PUBLIC	??_C@_0M@FHCBDAPB@pop_to_face?$AA@		; `string'
PUBLIC	??_C@_0L@NBNMFCPF@pop_enjoin?$AA@		; `string'
PUBLIC	??_C@_0M@PDGIDHIC@pop_disjoin?$AA@		; `string'
PUBLIC	??_C@_0N@IAKIABKB@sobolev_mode?$AA@		; `string'
PUBLIC	??_C@_0P@DEKALNNI@dirichlet_mode?$AA@		; `string'
PUBLIC	??_C@_0BD@CMGJLAKL@colorfile?5?3?$DN?5?$CC?$CFs?$CC?6?$AA@ ; `string'
PUBLIC	??_C@_08OMBDDLKJ@colormap?$AA@			; `string'
PUBLIC	??_C@_0L@LOICIGID@show_outer?$AA@		; `string'
PUBLIC	??_C@_0L@EAEPHEPG@show_inner?$AA@		; `string'
PUBLIC	??_C@_07KCLCNBJB@thicken?$AA@			; `string'
PUBLIC	??_C@_07HKDEBIPG@clipped?$AA@			; `string'
PUBLIC	??_C@_09JGOMOAGJ@connected?$AA@			; `string'
PUBLIC	??_C@_0P@OMMOBLOA@effective_area?$AA@		; `string'
PUBLIC	??_C@_09MFCEMNNF@conf_edge?$AA@			; `string'
PUBLIC	??_C@_0BD@JAENIDNE@area_normalization?$AA@	; `string'
PUBLIC	??_C@_0P@OGHBAHOF@check_increase?$AA@		; `string'
PUBLIC	??_C@_0M@OBNGAKOC@runge_kutta?$AA@		; `string'
PUBLIC	??_C@_0M@GGBEIMML@approx_curv?$AA@		; `string'
PUBLIC	??_C@_08MINHKHMD@old_area?$AA@			; `string'
PUBLIC	??_C@_07HBPOHFLN@quietgo?$AA@			; `string'
PUBLIC	??_C@_0O@HCDDDEHN@hessian_quiet?$AA@		; `string'
PUBLIC	??_C@_0BH@DJGEPEF@hessian_special_normal?$AA@	; `string'
PUBLIC	??_C@_0BC@OIKNNBJM@augmented_hessian?$AA@	; `string'
PUBLIC	??_C@_05PMBAOCDH@quiet?$AA@			; `string'
PUBLIC	??_C@_0P@BMEBABFE@show_all_edges?$AA@		; `string'
PUBLIC	??_C@_0BB@OFKJMHPN@kraynikpopvertex?$AA@	; `string'
PUBLIC	??_C@_0P@EOAPCHNN@kraynikpopedge?$AA@		; `string'
PUBLIC	??_C@_0L@NAICPCIF@rgb_colors?$AA@		; `string'
PUBLIC	??_C@_0BC@ENFIPPEC@circular_arc_draw?$AA@	; `string'
PUBLIC	??_C@_08BLGPIPGP@autochop?$AA@			; `string'
PUBLIC	??_C@_07LEJGIFAD@autopop?$AA@			; `string'
PUBLIC	??_C@_07ENPKKAPH@sqgauss?$AA@			; `string'
PUBLIC	??_C@_07LLNNGCPP@deturck?$AA@			; `string'
PUBLIC	??_C@_08LDELGPJH@estimate?$AA@			; `string'
PUBLIC	??_C@_06IGFDKMHM@kusner?$AA@			; `string'
PUBLIC	??_C@_07NJBOMLDI@view_4D?$AA@			; `string'
PUBLIC	??_C@_0BA@NLJCNNPB@assume_oriented?$AA@		; `string'
PUBLIC	??_C@_07PIJPCAMN@ribiere?$AA@			; `string'
PUBLIC	??_C@_0BA@HGBJAEID@quantities_only?$AA@		; `string'
PUBLIC	??_C@_09BAKALBHB@conj_grad?$AA@			; `string'
PUBLIC	??_C@_0BB@JEINHGHM@bezier_basis?5on?6?$AA@	; `string'
PUBLIC	??_C@_0BH@CBOEMHLC@convert_to_quantities?6?$AA@	; `string'
PUBLIC	??_C@_0BM@MMPFPOJE@hessian_slant_cutoff?5?3?$DN?5?$CFg?6?$AA@ ; `string'
PUBLIC	??_C@_0BB@NOFPOFEM@thickness?5?3?$DN?5?$CFg?6?$AA@ ; `string'
PUBLIC	??_C@_0M@FKFJNJHN@septum_flag?$AA@		; `string'
PUBLIC	??_C@_0M@NAKIPJII@ps_gridflag?$AA@		; `string'
PUBLIC	??_C@_0P@EJEJKKN@force_edgeswap?$AA@		; `string'
PUBLIC	??_C@_0BC@PCBOIGLG@full_bounding_box?$AA@	; `string'
PUBLIC	??_C@_0BA@FEGMCNGA@K_altitude_mode?$AA@		; `string'
PUBLIC	??_C@_0BA@NBAAGIKN@visibility_test?$AA@		; `string'
PUBLIC	??_C@_0L@KMEPJMME@slice_view?$AA@		; `string'
PUBLIC	??_C@_0CP@MABBEGKP@?5?5view_transforms_unique_point?$FL?$CF@ ; `string'
PUBLIC	??_C@_0CB@GFKKBGMN@view_transforms_use_unique_point@ ; `string'
PUBLIC	??_C@_09FMDIMAMP@clip_view?$AA@			; `string'
PUBLIC	??_C@_0CA@MNCEMECC@window_aspect_ratio?5?3?$DN?5?$CF18?415f?6?$AA@ ; `string'
PUBLIC	??_C@_0L@HHNKKBPM@raw_cells?6?$AA@		; `string'
PUBLIC	??_C@_0L@MOBHNNJG@connected?6?$AA@		; `string'
PUBLIC	??_C@_08KOELILLL@clipped?6?$AA@			; `string'
PUBLIC	??_C@_03NIEPJMFE@?5?$HN?6?$AA@			; `string'
PUBLIC	??_C@_0BA@EGONCABM@?5function?5?6?5?5?$HL?5?$AA@ ; `string'
PUBLIC	??_C@_0BL@EELIHABE@?6define?5?$CFs?5attribute?5?$CFs?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_06HDICOIMH@?$CFs?5?$DN?5?6?$AA@		; `string'
PUBLIC	??_C@_04KBDJOJNB@?$FL?$CFd?$FN?$AA@		; `string'
PUBLIC	??_C@_09CDKNMAHF@define?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_0BE@DJIEBPB@?$CFs?4pscale?5?$DN?5?$CF2?415g?5?$AA@ ; `string'
PUBLIC	??_C@_0BF@ECEAIEOK@?$CFs?4pdelta?5?$DN?5?$CF2?415g?$DL?5?$AA@ ; `string'
PUBLIC	__real@3f1a36e2eb1c432d
PUBLIC	??_C@_0M@PLDHDBIE@?3?$DN?5?$CF2?415g?$DL?5?$AA@	; `string'
PUBLIC	_bottom_dump
EXTRN	_show_command:BYTE
EXTRN	_show_expr:BYTE
EXTRN	_brightness:QWORD
EXTRN	_transform_count:DWORD
EXTRN	_transforms_flag:DWORD
EXTRN	_transform_expr:BYTE
EXTRN	_linear_metric_mix:QWORD
EXTRN	_hessian_linear_metric_flag:DWORD
EXTRN	_interp_bdry_param:DWORD
EXTRN	_self_similar_flag:DWORD
EXTRN	_gv_binary_flag:DWORD
EXTRN	_make_pos_def_flag:DWORD
EXTRN	_autorecalc_flag:DWORD
EXTRN	_metric_convert_flag:DWORD
EXTRN	_check_pinning_flag:DWORD
EXTRN	_normal_motion_flag:DWORD
EXTRN	_boundary_curvature_flag:DWORD
EXTRN	_color_flag:DWORD
EXTRN	_shading_flag:DWORD
EXTRN	_div_normal_curvature_flag:DWORD
EXTRN	_normal_curvature_flag:DWORD
EXTRN	_mean_curv_int_flag:DWORD
EXTRN	_post_project_flag:DWORD
EXTRN	_hessian_double_normal_flag:DWORD
EXTRN	_hessian_normal_one_flag:DWORD
EXTRN	_hessian_normal_perp_flag:DWORD
EXTRN	_hessian_normal_flag:DWORD
EXTRN	_hessian_by_diff_flag:DWORD
EXTRN	_smooth_graph_flag:DWORD
EXTRN	_crossingflag:DWORD
EXTRN	_labelflag:DWORD
EXTRN	_ps_cmykflag:DWORD
EXTRN	_ps_colorflag:DWORD
EXTRN	_pop_to_edge_flag:DWORD
EXTRN	_pop_to_face_flag:DWORD
EXTRN	_pop_enjoin_flag:DWORD
EXTRN	_pop_disjoin_flag:DWORD
EXTRN	_sobolev_flag:DWORD
EXTRN	_dirichlet_flag:DWORD
EXTRN	_cmapname:BYTE
EXTRN	_colorflag:DWORD
EXTRN	_outerflag:DWORD
EXTRN	_innerflag:DWORD
EXTRN	_thickenflag:DWORD
EXTRN	_effective_area_flag:DWORD
EXTRN	_conf_edge_curv_flag:DWORD
EXTRN	_check_increase_flag:DWORD
EXTRN	_runge_kutta_flag:DWORD
EXTRN	_approx_curve_flag:DWORD
EXTRN	_old_area_flag:DWORD
EXTRN	_quiet_go_flag:DWORD
EXTRN	_hessian_quiet_flag:DWORD
EXTRN	_hessian_special_normal_flag:DWORD
EXTRN	_augmented_hessian_flag:DWORD
EXTRN	_quiet_flag:DWORD
EXTRN	_edgeshow_flag:DWORD
EXTRN	_kraynikpopvertex_flag:DWORD
EXTRN	_kraynikpopedge_flag:DWORD
EXTRN	_rgb_colors_flag:DWORD
EXTRN	_circular_arc_flag:DWORD
EXTRN	_autochop_flag:DWORD
EXTRN	_autopop_flag:DWORD
EXTRN	_sqgauss_flag:DWORD
EXTRN	_unit_normal_flag:DWORD
EXTRN	_estimate_flag:DWORD
EXTRN	_kusner_flag:DWORD
EXTRN	_view_4D_flag:DWORD
EXTRN	_assume_oriented_flag:DWORD
EXTRN	_ribiere_flag:DWORD
EXTRN	_quantities_only_flag:DWORD
EXTRN	_conj_grad_flag:DWORD
EXTRN	_bezier_flag:DWORD
EXTRN	_everything_quantities_flag:DWORD
EXTRN	_hessian_slant_cutoff:QWORD
EXTRN	_thickness:QWORD
EXTRN	_user_thickness_flag:DWORD
EXTRN	_septum_flag:DWORD
EXTRN	_gridflag:DWORD
EXTRN	_force_edgeswap_flag:DWORD
EXTRN	_full_bounding_box_flag:DWORD
EXTRN	_K_altitude_flag:DWORD
EXTRN	_visibility_test:DWORD
EXTRN	_slice_view_flag:DWORD
EXTRN	_view_transforms_unique_point:DWORD
EXTRN	_view_transforms_unique_point_flag:DWORD
EXTRN	_clip_view_flag:DWORD
EXTRN	_window_aspect_ratio:QWORD
EXTRN	_torus_display_mode:DWORD
EXTRN	_typenames:BYTE
;	COMDAT ??_C@_0BG@INDPJLAD@brightness?5?3?$DN?5?$CF2?415g?6?$AA@
CONST	SEGMENT
??_C@_0BG@INDPJLAD@brightness?5?3?$DN?5?$CF2?415g?6?$AA@ DB 'brightness :'
	DB	'= %2.15g', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT __real@3fe4cccccccccccd
CONST	SEGMENT
__real@3fe4cccccccccccd DQ 03fe4cccccccccccdr	; 0.65
CONST	ENDS
;	COMDAT ??_C@_0BM@OJBOKPEJ@target_tolerance?5?3?$DN?5?$CF2?415g?6?$AA@
CONST	SEGMENT
??_C@_0BM@OJBOKPEJ@target_tolerance?5?3?$DN?5?$CF2?415g?6?$AA@ DB 'target'
	DB	'_tolerance := %2.15g', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DLCCMBJF@transforms?$AA@
CONST	SEGMENT
??_C@_0L@DLCCMBJF@transforms?$AA@ DB 'transforms', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GKKNLENB@transform_expr?5?$CC?$CFs?$CC?6?$AA@
CONST	SEGMENT
??_C@_0BF@GKKNLENB@transform_expr?5?$CC?$CFs?$CC?6?$AA@ DB 'transform_exp'
	DB	'r "%s"', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PKOEDJIO@linear_metric_mix?5?3?$DN?5?$CF2?415g?6?$AA@
CONST	SEGMENT
??_C@_0BN@PKOEDJIO@linear_metric_mix?5?3?$DN?5?$CF2?415g?6?$AA@ DB 'linea'
	DB	'r_metric_mix := %2.15g', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PLHGPNIO@linear_metric?$AA@
CONST	SEGMENT
??_C@_0O@PLHGPNIO@linear_metric?$AA@ DB 'linear_metric', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GFBFDLBM@gravity?$AA@
CONST	SEGMENT
??_C@_07GFBFDLBM@gravity?$AA@ DB 'gravity', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KPHKHJOD@interp_bdry_param?$AA@
CONST	SEGMENT
??_C@_0BC@KPHKHJOD@interp_bdry_param?$AA@ DB 'interp_bdry_param', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FFMNCIGF@self_similar?$AA@
CONST	SEGMENT
??_C@_0N@FFMNCIGF@self_similar?$AA@ DB 'self_similar', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BPDDPHCA@gv_binary?$AA@
CONST	SEGMENT
??_C@_09BPDDPHCA@gv_binary?$AA@ DB 'gv_binary', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MHBOMMFK@force_pos_def?$AA@
CONST	SEGMENT
??_C@_0O@MHBOMMFK@force_pos_def?$AA@ DB 'force_pos_def', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MABNKBMJ@autorecalc?$AA@
CONST	SEGMENT
??_C@_0L@MABNKBMJ@autorecalc?$AA@ DB 'autorecalc', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LJJGFBGD@metric_conversion?$AA@
CONST	SEGMENT
??_C@_0BC@LJJGFBGD@metric_conversion?$AA@ DB 'metric_conversion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07BCIELMPF@pinning?$AA@
CONST	SEGMENT
??_C@_07BCIELMPF@pinning?$AA@ DB 'pinning', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PKIOMPCC@normal_motion?$AA@
CONST	SEGMENT
??_C@_0O@PKIOMPCC@normal_motion?$AA@ DB 'normal_motion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MOPCCJLG@boundary_curvature?$AA@
CONST	SEGMENT
??_C@_0BD@MOPCCJLG@boundary_curvature?$AA@ DB 'boundary_curvature', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BNMHNAMC@facet_colors?$AA@
CONST	SEGMENT
??_C@_0N@BNMHNAMC@facet_colors?$AA@ DB 'facet_colors', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07IBJKBKNG@shading?$AA@
CONST	SEGMENT
??_C@_07IBJKBKNG@shading?$AA@ DB 'shading', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KHPBBAHH@div_normal_curvature?$AA@
CONST	SEGMENT
??_C@_0BF@KHPBBAHH@div_normal_curvature?$AA@ DB 'div_normal_curvature', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@ODBHHAP@normal_curvature?$AA@
CONST	SEGMENT
??_C@_0BB@ODBHHAP@normal_curvature?$AA@ DB 'normal_curvature', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KGGFDDEC@mean_curvature_integral?$AA@
CONST	SEGMENT
??_C@_0BI@KGGFDDEC@mean_curvature_integral?$AA@ DB 'mean_curvature_integr'
	DB	'al', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NFINOFHM@post_project?$AA@
CONST	SEGMENT
??_C@_0N@NFINOFHM@post_project?$AA@ DB 'post_project', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GAEGJDMI@hessian_double_normal?$AA@
CONST	SEGMENT
??_C@_0BG@GAEGJDMI@hessian_double_normal?$AA@ DB 'hessian_double_normal', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HMMIFHMP@hessian_normal_one?$AA@
CONST	SEGMENT
??_C@_0BD@HMMIFHMP@hessian_normal_one?$AA@ DB 'hessian_normal_one', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IEAFMCH@hessian_normal_perp?$AA@
CONST	SEGMENT
??_C@_0BE@IEAFMCH@hessian_normal_perp?$AA@ DB 'hessian_normal_perp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BMDMDICD@hessian_normal?$AA@
CONST	SEGMENT
??_C@_0P@BMDMDICD@hessian_normal?$AA@ DB 'hessian_normal', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PBIFKJMI@hessian_diff?$AA@
CONST	SEGMENT
??_C@_0N@PBIFKJMI@hessian_diff?$AA@ DB 'hessian_diff', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DFPINMIP@smooth_graph?$AA@
CONST	SEGMENT
??_C@_0N@DFPINMIP@smooth_graph?$AA@ DB 'smooth_graph', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MDFPOHGI@ps_crossingflag?$AA@
CONST	SEGMENT
??_C@_0BA@MDFPOHGI@ps_crossingflag?$AA@ DB 'ps_crossingflag', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@ECHDFDIC@ps_labelflag?$AA@
CONST	SEGMENT
??_C@_0N@ECHDFDIC@ps_labelflag?$AA@ DB 'ps_labelflag', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LOFHKFBI@ps_cmykflag?$AA@
CONST	SEGMENT
??_C@_0M@LOFHKFBI@ps_cmykflag?$AA@ DB 'ps_cmykflag', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PDJMPNAK@ps_colorflag?$AA@
CONST	SEGMENT
??_C@_0N@PDJMPNAK@ps_colorflag?$AA@ DB 'ps_colorflag', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CAFGBCMP@pop_to_edge?$AA@
CONST	SEGMENT
??_C@_0M@CAFGBCMP@pop_to_edge?$AA@ DB 'pop_to_edge', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FHCBDAPB@pop_to_face?$AA@
CONST	SEGMENT
??_C@_0M@FHCBDAPB@pop_to_face?$AA@ DB 'pop_to_face', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NBNMFCPF@pop_enjoin?$AA@
CONST	SEGMENT
??_C@_0L@NBNMFCPF@pop_enjoin?$AA@ DB 'pop_enjoin', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PDGIDHIC@pop_disjoin?$AA@
CONST	SEGMENT
??_C@_0M@PDGIDHIC@pop_disjoin?$AA@ DB 'pop_disjoin', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IAKIABKB@sobolev_mode?$AA@
CONST	SEGMENT
??_C@_0N@IAKIABKB@sobolev_mode?$AA@ DB 'sobolev_mode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DEKALNNI@dirichlet_mode?$AA@
CONST	SEGMENT
??_C@_0P@DEKALNNI@dirichlet_mode?$AA@ DB 'dirichlet_mode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CMGJLAKL@colorfile?5?3?$DN?5?$CC?$CFs?$CC?6?$AA@
CONST	SEGMENT
??_C@_0BD@CMGJLAKL@colorfile?5?3?$DN?5?$CC?$CFs?$CC?6?$AA@ DB 'colorfile '
	DB	':= "%s"', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08OMBDDLKJ@colormap?$AA@
CONST	SEGMENT
??_C@_08OMBDDLKJ@colormap?$AA@ DB 'colormap', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LOICIGID@show_outer?$AA@
CONST	SEGMENT
??_C@_0L@LOICIGID@show_outer?$AA@ DB 'show_outer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EAEPHEPG@show_inner?$AA@
CONST	SEGMENT
??_C@_0L@EAEPHEPG@show_inner?$AA@ DB 'show_inner', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KCLCNBJB@thicken?$AA@
CONST	SEGMENT
??_C@_07KCLCNBJB@thicken?$AA@ DB 'thicken', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HKDEBIPG@clipped?$AA@
CONST	SEGMENT
??_C@_07HKDEBIPG@clipped?$AA@ DB 'clipped', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JGOMOAGJ@connected?$AA@
CONST	SEGMENT
??_C@_09JGOMOAGJ@connected?$AA@ DB 'connected', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OMMOBLOA@effective_area?$AA@
CONST	SEGMENT
??_C@_0P@OMMOBLOA@effective_area?$AA@ DB 'effective_area', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09MFCEMNNF@conf_edge?$AA@
CONST	SEGMENT
??_C@_09MFCEMNNF@conf_edge?$AA@ DB 'conf_edge', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JAENIDNE@area_normalization?$AA@
CONST	SEGMENT
??_C@_0BD@JAENIDNE@area_normalization?$AA@ DB 'area_normalization', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OGHBAHOF@check_increase?$AA@
CONST	SEGMENT
??_C@_0P@OGHBAHOF@check_increase?$AA@ DB 'check_increase', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OBNGAKOC@runge_kutta?$AA@
CONST	SEGMENT
??_C@_0M@OBNGAKOC@runge_kutta?$AA@ DB 'runge_kutta', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GGBEIMML@approx_curv?$AA@
CONST	SEGMENT
??_C@_0M@GGBEIMML@approx_curv?$AA@ DB 'approx_curv', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08MINHKHMD@old_area?$AA@
CONST	SEGMENT
??_C@_08MINHKHMD@old_area?$AA@ DB 'old_area', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07HBPOHFLN@quietgo?$AA@
CONST	SEGMENT
??_C@_07HBPOHFLN@quietgo?$AA@ DB 'quietgo', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HCDDDEHN@hessian_quiet?$AA@
CONST	SEGMENT
??_C@_0O@HCDDDEHN@hessian_quiet?$AA@ DB 'hessian_quiet', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DJGEPEF@hessian_special_normal?$AA@
CONST	SEGMENT
??_C@_0BH@DJGEPEF@hessian_special_normal?$AA@ DB 'hessian_special_normal', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OIKNNBJM@augmented_hessian?$AA@
CONST	SEGMENT
??_C@_0BC@OIKNNBJM@augmented_hessian?$AA@ DB 'augmented_hessian', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05PMBAOCDH@quiet?$AA@
CONST	SEGMENT
??_C@_05PMBAOCDH@quiet?$AA@ DB 'quiet', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BMEBABFE@show_all_edges?$AA@
CONST	SEGMENT
??_C@_0P@BMEBABFE@show_all_edges?$AA@ DB 'show_all_edges', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OFKJMHPN@kraynikpopvertex?$AA@
CONST	SEGMENT
??_C@_0BB@OFKJMHPN@kraynikpopvertex?$AA@ DB 'kraynikpopvertex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EOAPCHNN@kraynikpopedge?$AA@
CONST	SEGMENT
??_C@_0P@EOAPCHNN@kraynikpopedge?$AA@ DB 'kraynikpopedge', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NAICPCIF@rgb_colors?$AA@
CONST	SEGMENT
??_C@_0L@NAICPCIF@rgb_colors?$AA@ DB 'rgb_colors', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ENFIPPEC@circular_arc_draw?$AA@
CONST	SEGMENT
??_C@_0BC@ENFIPPEC@circular_arc_draw?$AA@ DB 'circular_arc_draw', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08BLGPIPGP@autochop?$AA@
CONST	SEGMENT
??_C@_08BLGPIPGP@autochop?$AA@ DB 'autochop', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07LEJGIFAD@autopop?$AA@
CONST	SEGMENT
??_C@_07LEJGIFAD@autopop?$AA@ DB 'autopop', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07ENPKKAPH@sqgauss?$AA@
CONST	SEGMENT
??_C@_07ENPKKAPH@sqgauss?$AA@ DB 'sqgauss', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LLNNGCPP@deturck?$AA@
CONST	SEGMENT
??_C@_07LLNNGCPP@deturck?$AA@ DB 'deturck', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LDELGPJH@estimate?$AA@
CONST	SEGMENT
??_C@_08LDELGPJH@estimate?$AA@ DB 'estimate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06IGFDKMHM@kusner?$AA@
CONST	SEGMENT
??_C@_06IGFDKMHM@kusner?$AA@ DB 'kusner', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NJBOMLDI@view_4D?$AA@
CONST	SEGMENT
??_C@_07NJBOMLDI@view_4D?$AA@ DB 'view_4D', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NLJCNNPB@assume_oriented?$AA@
CONST	SEGMENT
??_C@_0BA@NLJCNNPB@assume_oriented?$AA@ DB 'assume_oriented', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07PIJPCAMN@ribiere?$AA@
CONST	SEGMENT
??_C@_07PIJPCAMN@ribiere?$AA@ DB 'ribiere', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HGBJAEID@quantities_only?$AA@
CONST	SEGMENT
??_C@_0BA@HGBJAEID@quantities_only?$AA@ DB 'quantities_only', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BAKALBHB@conj_grad?$AA@
CONST	SEGMENT
??_C@_09BAKALBHB@conj_grad?$AA@ DB 'conj_grad', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JEINHGHM@bezier_basis?5on?6?$AA@
CONST	SEGMENT
??_C@_0BB@JEINHGHM@bezier_basis?5on?6?$AA@ DB 'bezier_basis on', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CBOEMHLC@convert_to_quantities?6?$AA@
CONST	SEGMENT
??_C@_0BH@CBOEMHLC@convert_to_quantities?6?$AA@ DB 'convert_to_quantities'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MMPFPOJE@hessian_slant_cutoff?5?3?$DN?5?$CFg?6?$AA@
CONST	SEGMENT
??_C@_0BM@MMPFPOJE@hessian_slant_cutoff?5?3?$DN?5?$CFg?6?$AA@ DB 'hessian'
	DB	'_slant_cutoff := %g', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NOFPOFEM@thickness?5?3?$DN?5?$CFg?6?$AA@
CONST	SEGMENT
??_C@_0BB@NOFPOFEM@thickness?5?3?$DN?5?$CFg?6?$AA@ DB 'thickness := %g', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FKFJNJHN@septum_flag?$AA@
CONST	SEGMENT
??_C@_0M@FKFJNJHN@septum_flag?$AA@ DB 'septum_flag', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NAKIPJII@ps_gridflag?$AA@
CONST	SEGMENT
??_C@_0M@NAKIPJII@ps_gridflag?$AA@ DB 'ps_gridflag', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EJEJKKN@force_edgeswap?$AA@
CONST	SEGMENT
??_C@_0P@EJEJKKN@force_edgeswap?$AA@ DB 'force_edgeswap', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PCBOIGLG@full_bounding_box?$AA@
CONST	SEGMENT
??_C@_0BC@PCBOIGLG@full_bounding_box?$AA@ DB 'full_bounding_box', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FEGMCNGA@K_altitude_mode?$AA@
CONST	SEGMENT
??_C@_0BA@FEGMCNGA@K_altitude_mode?$AA@ DB 'K_altitude_mode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NBAAGIKN@visibility_test?$AA@
CONST	SEGMENT
??_C@_0BA@NBAAGIKN@visibility_test?$AA@ DB 'visibility_test', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KMEPJMME@slice_view?$AA@
CONST	SEGMENT
??_C@_0L@KMEPJMME@slice_view?$AA@ DB 'slice_view', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@MABBEGKP@?5?5view_transforms_unique_point?$FL?$CF@
CONST	SEGMENT
??_C@_0CP@MABBEGKP@?5?5view_transforms_unique_point?$FL?$CF@ DB '  view_t'
	DB	'ransforms_unique_point[%d] := %18.15f', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@GFKKBGMN@view_transforms_use_unique_point@
CONST	SEGMENT
??_C@_0CB@GFKKBGMN@view_transforms_use_unique_point@ DB 'view_transforms_'
	DB	'use_unique_point', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09FMDIMAMP@clip_view?$AA@
CONST	SEGMENT
??_C@_09FMDIMAMP@clip_view?$AA@ DB 'clip_view', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MNCEMECC@window_aspect_ratio?5?3?$DN?5?$CF18?415f?6?$AA@
CONST	SEGMENT
??_C@_0CA@MNCEMECC@window_aspect_ratio?5?3?$DN?5?$CF18?415f?6?$AA@ DB 'wi'
	DB	'ndow_aspect_ratio := %18.15f', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HHNKKBPM@raw_cells?6?$AA@
CONST	SEGMENT
??_C@_0L@HHNKKBPM@raw_cells?6?$AA@ DB 'raw_cells', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MOBHNNJG@connected?6?$AA@
CONST	SEGMENT
??_C@_0L@MOBHNNJG@connected?6?$AA@ DB 'connected', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KOELILLL@clipped?6?$AA@
CONST	SEGMENT
??_C@_08KOELILLL@clipped?6?$AA@ DB 'clipped', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03NIEPJMFE@?5?$HN?6?$AA@
CONST	SEGMENT
??_C@_03NIEPJMFE@?5?$HN?6?$AA@ DB ' }', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EGONCABM@?5function?5?6?5?5?$HL?5?$AA@
CONST	SEGMENT
??_C@_0BA@EGONCABM@?5function?5?6?5?5?$HL?5?$AA@ DB ' function ', 0aH, ' '
	DB	' { ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EELIHABE@?6define?5?$CFs?5attribute?5?$CFs?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BL@EELIHABE@?6define?5?$CFs?5attribute?5?$CFs?5?$CFs?$AA@ DB 0aH, 'd'
	DB	'efine %s attribute %s %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HDICOIMH@?$CFs?5?$DN?5?6?$AA@
CONST	SEGMENT
??_C@_06HDICOIMH@?$CFs?5?$DN?5?6?$AA@ DB '%s = ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04KBDJOJNB@?$FL?$CFd?$FN?$AA@
CONST	SEGMENT
??_C@_04KBDJOJNB@?$FL?$CFd?$FN?$AA@ DB '[%d]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CDKNMAHF@define?5?$CFs?$AA@
CONST	SEGMENT
??_C@_09CDKNMAHF@define?5?$CFs?$AA@ DB 'define %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DJIEBPB@?$CFs?4pscale?5?$DN?5?$CF2?415g?5?$AA@
CONST	SEGMENT
??_C@_0BE@DJIEBPB@?$CFs?4pscale?5?$DN?5?$CF2?415g?5?$AA@ DB '%s.pscale = '
	DB	'%2.15g ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@ECEAIEOK@?$CFs?4pdelta?5?$DN?5?$CF2?415g?$DL?5?$AA@
CONST	SEGMENT
??_C@_0BF@ECEAIEOK@?$CFs?4pdelta?5?$DN?5?$CF2?415g?$DL?5?$AA@ DB '%s.pdel'
	DB	'ta = %2.15g; ', 00H				; `string'
CONST	ENDS
;	COMDAT __real@3f1a36e2eb1c432d
CONST	SEGMENT
__real@3f1a36e2eb1c432d DQ 03f1a36e2eb1c432dr	; 0.0001
CONST	ENDS
;	COMDAT ??_C@_0M@PLDHDBIE@?3?$DN?5?$CF2?415g?$DL?5?$AA@
CONST	SEGMENT
??_C@_0M@PLDHDBIE@?3?$DN?5?$CF2?415g?$DL?5?$AA@ DB ':= %2.15g; ', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _bottom_dump
_TEXT	SEGMENT
tv1810 = -16						; size = 4
_old_fd$ = -12						; size = 4
tv1825 = -8						; size = 4
tv1703 = -8						; size = 4
tv1701 = -4						; size = 4
_a$90927 = -4						; size = 4
_i$ = 8							; size = 4
_fd$ = 8						; size = 4
_bottom_dump PROC					; COMDAT

; 2032 : { int i;

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 2033 :   FILE *old_fd = outfd;

	mov	eax, DWORD PTR _outfd

; 2034 :   int e_type;
; 2035 : 
; 2036 :   outfd = fd;

	mov	ecx, DWORD PTR _fd$[ebp]
	push	ebx
	push	esi
	push	edi

; 2037 :   readflag = 0;

	xor	ebx, ebx

; 2038 : 
; 2039 :   outstring("\nread\n"); readflag = 1;

	push	OFFSET ??_C@_06OHHADACI@?6read?6?$AA@
	mov	DWORD PTR _old_fd$[ebp], eax
	mov	DWORD PTR _outfd, ecx
	mov	DWORD PTR _readflag, ebx
	call	_outstring

; 2040 : 
; 2041 :   /* string variables */
; 2042 :   for ( i = 0 ; i < web.global_count ; i++ )

	mov	eax, DWORD PTR _web+5540
	add	esp, 4
	mov	DWORD PTR _readflag, 1
	cmp	eax, ebx
	jle	$LN167@bottom_dum
	npad	10
$LL171@bottom_dum:

; 2043 :   { struct global *g = globals(i);

	mov	eax, ebx
	and	eax, -16777216				; ff000000H
	cmp	eax, 268435456				; 10000000H
	jne	SHORT $LN137@bottom_dum
	mov	eax, DWORD PTR _web+5652
	mov	edx, ebx
	and	edx, 16777215				; 00ffffffH
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _dymem
	mov	esi, DWORD PTR [ecx+edx]
	jmp	SHORT $LN134@bottom_dum
$LN137@bottom_dum:
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN135@bottom_dum
	mov	eax, DWORD PTR _localbase
	mov	esi, ebx
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	add	esi, DWORD PTR [eax]
	jmp	SHORT $LN134@bottom_dum
$LN135@bottom_dum:
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN133@bottom_dum
	mov	edx, DWORD PTR _web+5656
	mov	ecx, ebx
	and	ecx, 16777215				; 00ffffffH
	mov	esi, DWORD PTR [edx+ecx*4]
	jmp	SHORT $LN134@bottom_dum
$LN133@bottom_dum:
	mov	ecx, DWORD PTR _web+5652
	mov	eax, ebx
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	esi, DWORD PTR [edx+eax]
$LN134@bottom_dum:

; 2044 :     if ( g->flags & STRINGVAL )

	test	DWORD PTR [esi+192], 8192		; 00002000H
	je	SHORT $LN129@bottom_dum

; 2045 :     { sprintf(msg,"%s := ",g->name);

	mov	ecx, DWORD PTR _msg
	push	esi
	push	OFFSET ??_C@_06JFMACMHF@?$CFs?5?3?$DN?5?$AA@
	push	ecx
	call	_sprintf

; 2046 :       convert_string(g->value.string,msg+strlen(msg),msgmax-100);

	mov	edx, DWORD PTR _msg
	mov	eax, edx
	add	esp, 12					; 0000000cH
	lea	edi, DWORD PTR [eax+1]
$LL159@bottom_dum:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL159@bottom_dum
	mov	ecx, DWORD PTR _msgmax
	sub	eax, edi
	add	ecx, -100				; ffffff9cH
	push	ecx
	add	eax, edx
	mov	edx, DWORD PTR [esi+64]
	push	eax
	push	edx
	call	_convert_string

; 2047 :       strcat(msg,"\n");

	mov	edi, DWORD PTR _msg
	add	esp, 12					; 0000000cH
	dec	edi
	npad	2
$LL160@bottom_dum:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL160@bottom_dum
	mov	ax, WORD PTR ??_C@_01EEMJAFIK@?6?$AA@
	mov	WORD PTR [edi], ax

; 2048 :       outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 4
$LN129@bottom_dum:

; 2040 : 
; 2041 :   /* string variables */
; 2042 :   for ( i = 0 ; i < web.global_count ; i++ )

	mov	eax, DWORD PTR _web+5540
	inc	ebx
	cmp	ebx, eax
	jl	$LL171@bottom_dum
$LN167@bottom_dum:

; 2049 :     }
; 2050 :   }  
; 2051 :   
; 2052 :   /* "no_dump" global variables */
; 2053 :   for ( i = 0 ; i < web.global_count ; i++ )

	mov	DWORD PTR _i$[ebp], 0
	test	eax, eax
	jle	$LN124@bottom_dum
	npad	3
$LL126@bottom_dum:

; 2054 :   { struct global *g = globals(i);

	mov	eax, DWORD PTR _i$[ebp]
	and	eax, -16777216				; ff000000H
	cmp	eax, 268435456				; 10000000H
	jne	SHORT $LN143@bottom_dum
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _web+5652
	and	edx, 16777215				; 00ffffffH
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _dymem
	mov	ebx, DWORD PTR [ecx+edx]
	jmp	SHORT $LN140@bottom_dum
$LN143@bottom_dum:
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN141@bottom_dum
	mov	ebx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _localbase
	and	ebx, 16777215				; 00ffffffH
	imul	ebx, 224				; 000000e0H
	add	ebx, DWORD PTR [eax]
	jmp	SHORT $LN140@bottom_dum
$LN141@bottom_dum:
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN139@bottom_dum
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _web+5656
	and	ecx, 16777215				; 00ffffffH
	mov	ebx, DWORD PTR [edx+ecx*4]
	jmp	SHORT $LN140@bottom_dum
$LN139@bottom_dum:
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	ebx, DWORD PTR [edx+eax]
$LN140@bottom_dum:

; 2055 :     if ( !(g->flags2 & NO_DUMP_BIT) ) continue;

	test	BYTE PTR [ebx+196], 1
	je	$LN125@bottom_dum

; 2056 :     if ( (g->flags & ORDINARY_PARAM) &&
; 2057 :           !(g->flags & (INTERNAL_NAME|QUANTITY_TYPES)) )

	mov	eax, DWORD PTR [ebx+192]
	test	al, 1
	je	$LN122@bottom_dum
	test	eax, 4194752				; 004001c0H
	jne	$LN122@bottom_dum

; 2058 :       { sprintf(msg,"%s ",g->name); 

	mov	ecx, DWORD PTR _msg
	push	ebx
	push	OFFSET ??_C@_03IKGEINEE@?$CFs?5?$AA@
	push	ecx
	call	_sprintf

; 2059 :         outstring(msg); 

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 2060 : #ifdef FLOAT128
; 2061 :          sprintf(msg,":= %2.*Qg; ",DPREC,g->value.real); 
; 2062 : #elif defined(LONGDOUBLE)
; 2063 :          sprintf(msg,":= %2.*Lg; ",DPREC,g->value.real); 
; 2064 : #else
; 2065 :          sprintf(msg,":= %2.15g; ",g->value.real); 

	fld	QWORD PTR [ebx+64]
	mov	eax, DWORD PTR _msg
	fstp	QWORD PTR [esp+8]
	add	esp, 8
	push	OFFSET ??_C@_0M@PLDHDBIE@?3?$DN?5?$CF2?415g?$DL?5?$AA@
	push	eax
	call	_sprintf

; 2066 : #endif 
; 2067 :          outstring(msg); 

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring

; 2068 :          if ( g->attr.varstuff.delta != OPTPARAM_DELTA 
; 2069 :            && g->attr.varstuff.delta != 0.0 )

	fld	QWORD PTR [ebx+168]
	fld	QWORD PTR __real@3f1a36e2eb1c432d
	add	esp, 20					; 00000014H
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN168@bottom_dum
	fld	QWORD PTR [ebx+168]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN168@bottom_dum

; 2070 :          {
; 2071 : #ifdef FLOAT128
; 2072 :             sprintf(msg,"%s.pdelta = %2.*Qg; ",g->name,DPREC,g->attr.varstuff.delta); 
; 2073 : #elif defined(LONGDOUBLE)
; 2074 :             sprintf(msg,"%s.pdelta = %2.*Lg; ",g->name,DPREC,g->attr.varstuff.delta); 
; 2075 : #else
; 2076 :             sprintf(msg,"%s.pdelta = %2.15g; ",g->name,g->attr.varstuff.delta); 

	fld	QWORD PTR [ebx+168]
	mov	edx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	ebx
	push	OFFSET ??_C@_0BF@ECEAIEOK@?$CFs?4pdelta?5?$DN?5?$CF2?415g?$DL?5?$AA@
	push	edx
	call	_sprintf

; 2077 : #endif 
; 2078 :             outstring(msg); 

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 24					; 00000018H
$LN168@bottom_dum:

; 2079 :          }
; 2080 :          if ( g->attr.varstuff.pscale != 1.0 
; 2081 :            && g->attr.varstuff.pscale != 0.0 )

	fld	QWORD PTR [ebx+176]
	fld1
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN120@bottom_dum
	fld	QWORD PTR [ebx+176]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN120@bottom_dum

; 2082 :          {
; 2083 : #ifdef FLOAT128
; 2084 :             sprintf(msg,"%s.pscale = %2.*Qg ",g->name,DPREC,g->attr.varstuff.pscale); 
; 2085 : #elif defined(LONGDOUBLE)
; 2086 :             sprintf(msg,"%s.pscale = %2.*Lg ",g->name,DPREC,g->attr.varstuff.pscale); 
; 2087 : #else
; 2088 :             sprintf(msg,"%s.pscale = %2.15g ",g->name,g->attr.varstuff.pscale); 

	fld	QWORD PTR [ebx+176]
	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	ebx
	push	OFFSET ??_C@_0BE@DJIEBPB@?$CFs?4pscale?5?$DN?5?$CF2?415g?5?$AA@
	push	ecx
	call	_sprintf

; 2089 : #endif 
; 2090 :             outstring(msg); 

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 24					; 00000018H
$LN120@bottom_dum:

; 2091 :          }
; 2092 :          outstring("\n"); 

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	add	esp, 4
	jmp	$LN125@bottom_dum
$LN122@bottom_dum:

; 2093 :       }
; 2094 :       else if ( g->flags & ARRAY_PARAM )        

	test	eax, 2048				; 00000800H
	je	$LN125@bottom_dum

; 2095 :       { struct array *a = g->attr.arrayptr;

	mov	ecx, DWORD PTR [ebx+168]
	mov	DWORD PTR _a$90927[ebp], ecx

; 2096 :         if ( !(g->flags & INTERNAL_NAME) )

	test	eax, 4194304				; 00400000H
	jne	$LN125@bottom_dum

; 2097 :           if ( a )  /* declaration might not have been executed */

	test	ecx, ecx
	je	$LN125@bottom_dum

; 2098 :           { int j;
; 2099 :             sprintf(msg,"define %s",g->name);

	mov	eax, DWORD PTR _msg
	push	ebx
	push	OFFSET ??_C@_09CDKNMAHF@define?5?$CFs?$AA@
	push	eax
	call	_sprintf

; 2100 :             strcat(msg," ");

	mov	edi, DWORD PTR _msg
	add	esp, 12					; 0000000cH
	dec	edi
$LL161@bottom_dum:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL161@bottom_dum
	mov	cx, WORD PTR ??_C@_01CLKCMJKC@?5?$AA@
	mov	WORD PTR [edi], cx

; 2101 :             strcat(msg,datatype_name[g->type]);

	mov	edx, DWORD PTR [ebx+200]
	mov	eax, DWORD PTR _datatype_name[edx*4]
	mov	esi, eax
$LL162@bottom_dum:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL162@bottom_dum
	mov	edi, DWORD PTR _msg
	sub	eax, esi
	dec	edi
$LL163@bottom_dum:
	mov	cl, BYTE PTR [edi+1]
	inc	edi
	test	cl, cl
	jne	SHORT $LL163@bottom_dum
	mov	ecx, eax
	shr	ecx, 2
	rep movsd
	mov	ecx, eax

; 2102 :             for ( j = 0 ; j < a->dim ; j++ )

	mov	eax, DWORD PTR _a$90927[ebp]
	and	ecx, 3
	rep movsb
	xor	esi, esi
	cmp	DWORD PTR [eax+4], esi
	jle	SHORT $LN113@bottom_dum

; 2098 :           { int j;
; 2099 :             sprintf(msg,"define %s",g->name);

	mov	edi, eax
	add	edi, 24					; 00000018H
	npad	10
$LL115@bottom_dum:

; 2103 :               sprintf(msg+strlen(msg),"[%d]",a->sizes[j]);

	mov	edx, DWORD PTR _msg
	mov	eax, edx
	lea	ecx, DWORD PTR [eax+1]
	mov	DWORD PTR tv1825[ebp], ecx
	npad	2
$LL164@bottom_dum:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL164@bottom_dum
	mov	ecx, DWORD PTR [edi]
	sub	eax, DWORD PTR tv1825[ebp]
	push	ecx
	add	eax, edx
	push	OFFSET ??_C@_04KBDJOJNB@?$FL?$CFd?$FN?$AA@
	push	eax
	call	_sprintf
	mov	edx, DWORD PTR _a$90927[ebp]
	inc	esi
	add	esp, 12					; 0000000cH
	add	edi, 4
	cmp	esi, DWORD PTR [edx+4]
	jl	SHORT $LL115@bottom_dum
$LN113@bottom_dum:

; 2104 :             outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring

; 2105 :             outstring("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring

; 2106 :             sprintf(msg,"%s = \n",g->name);

	mov	ecx, DWORD PTR _msg
	push	ebx
	push	OFFSET ??_C@_06HDICOIMH@?$CFs?5?$DN?5?6?$AA@
	push	ecx
	call	_sprintf

; 2107 :             print_array(a,NULL,PRINT_DUMP);

	mov	edx, DWORD PTR _a$90927[ebp]
	push	1002					; 000003eaH
	push	0
	push	edx
	call	_print_array

; 2108 :             outstring("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	add	esp, 36					; 00000024H
$LN125@bottom_dum:

; 2049 :     }
; 2050 :   }  
; 2051 :   
; 2052 :   /* "no_dump" global variables */
; 2053 :   for ( i = 0 ; i < web.global_count ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _web+5540
	jl	$LL126@bottom_dum
$LN124@bottom_dum:

; 2109 :           }
; 2110 :       }
; 2111 :    }
; 2112 : 
; 2113 :   /* extra attributes with function definitions */
; 2114 :   for ( e_type = VERTEX ; e_type <= FACETEDGE ; e_type++ )

	mov	eax, OFFSET _web+108
	mov	DWORD PTR tv1701[ebp], OFFSET _typenames
	mov	DWORD PTR tv1703[ebp], eax
	npad	1
$LL112@bottom_dum:

; 2115 :   { struct extra *ex;
; 2116 :      for ( i = 0, ex = EXTRAS(e_type) ; 
; 2117 :                 i < web.skel[e_type].extra_count ; i++, ex++ )

	mov	esi, DWORD PTR [eax-4]
	add	esi, DWORD PTR _dymem
	cmp	DWORD PTR [eax], 0
	mov	DWORD PTR _i$[ebp], 0
	jle	$LN111@bottom_dum
	npad	7
$LL170@bottom_dum:

; 2118 :      { int k;
; 2119 :        if ( !(ex->flags & DUMP_ATTR) ) continue;

	test	BYTE PTR [esi+232], 1
	je	$LN108@bottom_dum

; 2120 :        if ( !ex->code.start )  continue;

	cmp	DWORD PTR [esi+128], 0
	je	$LN108@bottom_dum

; 2121 :         sprintf(msg,"\ndefine %s attribute %s %s",typenames[e_type], ex->name,
; 2122 :           datatype_name[ex->type]);

	mov	eax, DWORD PTR [esi+68]
	mov	ecx, DWORD PTR _datatype_name[eax*4]
	mov	edx, DWORD PTR tv1701[ebp]
	mov	eax, DWORD PTR [edx]
	push	ecx
	mov	ecx, DWORD PTR _msg
	push	esi
	push	eax
	push	OFFSET ??_C@_0BL@EELIHABE@?6define?5?$CFs?5attribute?5?$CFs?5?$CFs?$AA@
	push	ecx
	call	_sprintf

; 2123 :         for ( k = 0 ; k < ex->array_spec.dim ; k++ )

	xor	edi, edi
	add	esp, 20					; 00000014H
	cmp	DWORD PTR [esi+76], edi
	jle	SHORT $LN102@bottom_dum

; 2115 :   { struct extra *ex;
; 2116 :      for ( i = 0, ex = EXTRAS(e_type) ; 
; 2117 :                 i < web.skel[e_type].extra_count ; i++, ex++ )

	lea	ebx, DWORD PTR [esi+96]
	npad	6
$LL104@bottom_dum:

; 2124 :           sprintf(msg+strlen(msg),"[%d]",ex->array_spec.sizes[k]);

	mov	edx, DWORD PTR _msg
	mov	eax, edx
	lea	ecx, DWORD PTR [eax+1]
	mov	DWORD PTR tv1810[ebp], ecx
	npad	2
$LL165@bottom_dum:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL165@bottom_dum
	mov	ecx, DWORD PTR [ebx]
	sub	eax, DWORD PTR tv1810[ebp]
	push	ecx
	add	eax, edx
	push	OFFSET ??_C@_04KBDJOJNB@?$FL?$CFd?$FN?$AA@
	push	eax
	call	_sprintf
	inc	edi
	add	esp, 12					; 0000000cH
	add	ebx, 4
	cmp	edi, DWORD PTR [esi+76]
	jl	SHORT $LL104@bottom_dum
$LN102@bottom_dum:

; 2125 :         outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 2126 :         outstring(" function \n  { ");

	push	OFFSET ??_C@_0BA@EGONCABM@?5function?5?6?5?5?$HL?5?$AA@
	call	_outstring

; 2127 :         outstring(print_express(&ex->code,'X'));

	lea	eax, DWORD PTR [esi+128]
	push	88					; 00000058H
	push	eax
	call	_print_express
	push	eax
	call	_outstring

; 2128 :         outstring(" }\n");

	push	OFFSET ??_C@_03NIEPJMFE@?5?$HN?6?$AA@
	call	_outstring
	mov	eax, DWORD PTR tv1703[ebp]
	add	esp, 24					; 00000018H
$LN108@bottom_dum:

; 2115 :   { struct extra *ex;
; 2116 :      for ( i = 0, ex = EXTRAS(e_type) ; 
; 2117 :                 i < web.skel[e_type].extra_count ; i++, ex++ )

	mov	ecx, DWORD PTR _i$[ebp]
	inc	ecx
	add	esi, 240				; 000000f0H
	mov	DWORD PTR _i$[ebp], ecx
	cmp	ecx, DWORD PTR [eax]
	jl	$LL170@bottom_dum
$LN111@bottom_dum:

; 2109 :           }
; 2110 :       }
; 2111 :    }
; 2112 : 
; 2113 :   /* extra attributes with function definitions */
; 2114 :   for ( e_type = VERTEX ; e_type <= FACETEDGE ; e_type++ )

	add	DWORD PTR tv1701[ebp], 4
	add	eax, 112				; 00000070H
	mov	DWORD PTR tv1703[ebp], eax
	cmp	eax, OFFSET _web+556
	jle	$LL112@bottom_dum

; 2129 :      }
; 2130 :   }
; 2131 : 
; 2132 :   /* misc state saving */
; 2133 :   outstring("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring

; 2134 :   switch(torus_display_mode)

	mov	eax, DWORD PTR _torus_display_mode
	add	esp, 4
	dec	eax
	je	SHORT $LN99@bottom_dum
	dec	eax
	je	SHORT $LN97@bottom_dum
	dec	eax
	jne	SHORT $LN100@bottom_dum

; 2136 :     case TORUS_CLIPPED_MODE: outstring("clipped\n"); break;

	push	OFFSET ??_C@_08KOELILLL@clipped?6?$AA@
	jmp	SHORT $LN186@bottom_dum
$LN97@bottom_dum:

; 2137 :     case TORUS_CONNECTED_MODE: outstring("connected\n"); break;

	push	OFFSET ??_C@_0L@MOBHNNJG@connected?6?$AA@
	jmp	SHORT $LN186@bottom_dum
$LN99@bottom_dum:

; 2135 :   { case TORUS_RAW_MODE: outstring("raw_cells\n"); break;

	push	OFFSET ??_C@_0L@HHNKKBPM@raw_cells?6?$AA@
$LN186@bottom_dum:
	call	_outstring
	add	esp, 4
$LN100@bottom_dum:

; 2138 :   }
; 2139 :   if ( window_aspect_ratio != 0.0 )

	fld	QWORD PTR _window_aspect_ratio
	fld	ST(0)
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN175@bottom_dum

; 2140 :   { sprintf(msg,"window_aspect_ratio := %18.15f\n",
; 2141 :        (DOUBLE)window_aspect_ratio); 

	mov	eax, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CA@MNCEMECC@window_aspect_ratio?5?3?$DN?5?$CF18?415f?6?$AA@
	push	eax
	call	_sprintf

; 2142 :     outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 20					; 00000014H
	jmp	SHORT $LN96@bottom_dum
$LN175@bottom_dum:
	fstp	ST(0)
$LN96@bottom_dum:

; 2143 :   }
; 2144 :   if ( clip_view_flag )

	cmp	DWORD PTR _clip_view_flag, 0
	je	SHORT $LN95@bottom_dum

; 2145 :     toggle_save("clip_view");

	push	OFFSET ??_C@_09FMDIMAMP@clip_view?$AA@
	call	_toggle_save
	add	esp, 4
$LN95@bottom_dum:

; 2146 :   
; 2147 :   if ( view_transforms_unique_point_flag )

	cmp	DWORD PTR _view_transforms_unique_point_flag, 0
	je	SHORT $LN169@bottom_dum

; 2148 :   { toggle_save("view_transforms_use_unique_point");

	push	OFFSET ??_C@_0CB@GFKKBGMN@view_transforms_use_unique_point@
	call	_toggle_save

; 2149 :     for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	add	esp, 4
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN169@bottom_dum
$LL93@bottom_dum:

; 2150 :     { sprintf(msg,"  view_transforms_unique_point[%d] := %18.15f\n",i+1,
; 2151 :         (DOUBLE)view_transforms_unique_point[i]);

	mov	edx, DWORD PTR _view_transforms_unique_point
	fld	QWORD PTR [edx+eax*8]
	sub	esp, 8
	lea	esi, DWORD PTR [eax+1]
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _msg
	push	esi
	push	OFFSET ??_C@_0CP@MABBEGKP@?5?5view_transforms_unique_point?$FL?$CF@
	push	eax
	call	_sprintf

; 2152 :       outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	mov	eax, esi
	add	esp, 24					; 00000018H
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LL93@bottom_dum
$LN169@bottom_dum:

; 2153 :     }
; 2154 :   }
; 2155 :   if ( slice_view_flag ) toggle_save("slice_view");

	cmp	DWORD PTR _slice_view_flag, 0
	pop	edi
	pop	esi
	pop	ebx
	je	SHORT $LN90@bottom_dum
	push	OFFSET ??_C@_0L@KMEPJMME@slice_view?$AA@
	call	_toggle_save
	add	esp, 4
$LN90@bottom_dum:

; 2156 :   if ( visibility_test ) toggle_save("visibility_test");

	cmp	DWORD PTR _visibility_test, 0
	je	SHORT $LN89@bottom_dum
	push	OFFSET ??_C@_0BA@NBAAGIKN@visibility_test?$AA@
	call	_toggle_save
	add	esp, 4
$LN89@bottom_dum:

; 2157 :   if ( K_altitude_flag ) toggle_save("K_altitude_mode");

	cmp	DWORD PTR _K_altitude_flag, 0
	je	SHORT $LN88@bottom_dum
	push	OFFSET ??_C@_0BA@FEGMCNGA@K_altitude_mode?$AA@
	call	_toggle_save
	add	esp, 4
$LN88@bottom_dum:

; 2158 :   if ( full_bounding_box_flag ) toggle_save("full_bounding_box");

	cmp	DWORD PTR _full_bounding_box_flag, 0
	je	SHORT $LN87@bottom_dum
	push	OFFSET ??_C@_0BC@PCBOIGLG@full_bounding_box?$AA@
	call	_toggle_save
	add	esp, 4
$LN87@bottom_dum:

; 2159 :   if ( force_edgeswap_flag ) toggle_save("force_edgeswap");

	cmp	DWORD PTR _force_edgeswap_flag, 0
	je	SHORT $LN86@bottom_dum
	push	OFFSET ??_C@_0P@EJEJKKN@force_edgeswap?$AA@
	call	_toggle_save
	add	esp, 4
$LN86@bottom_dum:

; 2160 :   if ( gridflag > 0 ) toggle_save("ps_gridflag");

	cmp	DWORD PTR _gridflag, 0
	jle	SHORT $LN187@bottom_dum
	push	OFFSET ??_C@_0M@NAKIPJII@ps_gridflag?$AA@
	call	_toggle_save
	add	esp, 4

; 2161 :   if ( gridflag == 0 ) toggle_save_off("ps_gridflag");

	cmp	DWORD PTR _gridflag, 0
$LN187@bottom_dum:
	jne	SHORT $LN84@bottom_dum
	push	OFFSET ??_C@_0M@NAKIPJII@ps_gridflag?$AA@
	call	_toggle_save_off
	add	esp, 4
$LN84@bottom_dum:

; 2162 :   if ( septum_flag > 0 ) toggle_save("septum_flag");

	cmp	DWORD PTR _septum_flag, 0
	jle	SHORT $LN188@bottom_dum
	push	OFFSET ??_C@_0M@FKFJNJHN@septum_flag?$AA@
	call	_toggle_save
	add	esp, 4

; 2163 :   if ( septum_flag == 0 ) toggle_save_off("septum_flag");

	cmp	DWORD PTR _septum_flag, 0
$LN188@bottom_dum:
	jne	SHORT $LN82@bottom_dum
	push	OFFSET ??_C@_0M@FKFJNJHN@septum_flag?$AA@
	call	_toggle_save_off
	add	esp, 4
$LN82@bottom_dum:

; 2164 :   if ( user_thickness_flag )

	cmp	DWORD PTR _user_thickness_flag, 0
	je	SHORT $LN81@bottom_dum

; 2165 :   { sprintf(msg,"thickness := %g\n",(double)thickness); outstring(msg); }

	fld	QWORD PTR _thickness
	mov	edx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BB@NOFPOFEM@thickness?5?3?$DN?5?$CFg?6?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 20					; 00000014H
$LN81@bottom_dum:

; 2166 :   if ( hessian_slant_cutoff != 0.0 ) 

	fld	QWORD PTR _hessian_slant_cutoff
	fld	ST(0)
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN178@bottom_dum

; 2167 :   { sprintf(msg,"hessian_slant_cutoff := %g\n",(double)hessian_slant_cutoff); outstring(msg); }

	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BM@MMPFPOJE@hessian_slant_cutoff?5?3?$DN?5?$CFg?6?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 20					; 00000014H
	jmp	SHORT $LN80@bottom_dum
$LN178@bottom_dum:
	fstp	ST(0)
$LN80@bottom_dum:

; 2168 :   if ( everything_quantities_flag ) outstring("convert_to_quantities\n");

	cmp	DWORD PTR _everything_quantities_flag, 0
	je	SHORT $LN79@bottom_dum
	push	OFFSET ??_C@_0BH@CBOEMHLC@convert_to_quantities?6?$AA@
	call	_outstring
	add	esp, 4
$LN79@bottom_dum:

; 2169 :   if ( bezier_flag ) outstring("bezier_basis on\n");

	cmp	DWORD PTR _bezier_flag, 0
	je	SHORT $LN78@bottom_dum
	push	OFFSET ??_C@_0BB@JEINHGHM@bezier_basis?5on?6?$AA@
	call	_outstring
	add	esp, 4
$LN78@bottom_dum:

; 2170 :   if ( conj_grad_flag ) toggle_save("conj_grad");

	cmp	DWORD PTR _conj_grad_flag, 0
	je	SHORT $LN77@bottom_dum
	push	OFFSET ??_C@_09BAKALBHB@conj_grad?$AA@
	call	_toggle_save
	add	esp, 4
$LN77@bottom_dum:

; 2171 :   if ( quantities_only_flag && !everything_quantities_flag) 

	cmp	DWORD PTR _quantities_only_flag, 0
	je	SHORT $LN76@bottom_dum
	cmp	DWORD PTR _everything_quantities_flag, 0
	jne	SHORT $LN76@bottom_dum

; 2172 :       toggle_save("quantities_only");

	push	OFFSET ??_C@_0BA@HGBJAEID@quantities_only?$AA@
	call	_toggle_save
	add	esp, 4
$LN76@bottom_dum:

; 2173 :   if ( !ribiere_flag ) toggle_save_off("ribiere");

	cmp	DWORD PTR _ribiere_flag, 0
	jne	SHORT $LN75@bottom_dum
	push	OFFSET ??_C@_07PIJPCAMN@ribiere?$AA@
	call	_toggle_save_off
	add	esp, 4
$LN75@bottom_dum:

; 2174 :   if ( assume_oriented_flag ) toggle_save("assume_oriented");

	cmp	DWORD PTR _assume_oriented_flag, 0
	je	SHORT $LN74@bottom_dum
	push	OFFSET ??_C@_0BA@NLJCNNPB@assume_oriented?$AA@
	call	_toggle_save
	add	esp, 4
$LN74@bottom_dum:

; 2175 :   if ( view_4D_flag ) toggle_save("view_4D");

	cmp	DWORD PTR _view_4D_flag, 0
	je	SHORT $LN73@bottom_dum
	push	OFFSET ??_C@_07NJBOMLDI@view_4D?$AA@
	call	_toggle_save
	add	esp, 4
$LN73@bottom_dum:

; 2176 :   if ( kusner_flag ) toggle_save("kusner");

	cmp	DWORD PTR _kusner_flag, 0
	je	SHORT $LN72@bottom_dum
	push	OFFSET ??_C@_06IGFDKMHM@kusner?$AA@
	call	_toggle_save
	add	esp, 4
$LN72@bottom_dum:

; 2177 :   if ( estimate_flag ) toggle_save("estimate");

	cmp	DWORD PTR _estimate_flag, 0
	je	SHORT $LN71@bottom_dum
	push	OFFSET ??_C@_08LDELGPJH@estimate?$AA@
	call	_toggle_save
	add	esp, 4
$LN71@bottom_dum:

; 2178 :   if ( unit_normal_flag ) toggle_save("deturck");

	cmp	DWORD PTR _unit_normal_flag, 0
	je	SHORT $LN70@bottom_dum
	push	OFFSET ??_C@_07LLNNGCPP@deturck?$AA@
	call	_toggle_save
	add	esp, 4
$LN70@bottom_dum:

; 2179 :   if ( sqgauss_flag ) toggle_save("sqgauss");

	cmp	DWORD PTR _sqgauss_flag, 0
	je	SHORT $LN69@bottom_dum
	push	OFFSET ??_C@_07ENPKKAPH@sqgauss?$AA@
	call	_toggle_save
	add	esp, 4
$LN69@bottom_dum:

; 2180 :   if ( autopop_flag ) toggle_save("autopop");

	cmp	DWORD PTR _autopop_flag, 0
	je	SHORT $LN68@bottom_dum
	push	OFFSET ??_C@_07LEJGIFAD@autopop?$AA@
	call	_toggle_save
	add	esp, 4
$LN68@bottom_dum:

; 2181 :   if ( autochop_flag ) toggle_save("autochop");

	cmp	DWORD PTR _autochop_flag, 0
	je	SHORT $LN67@bottom_dum
	push	OFFSET ??_C@_08BLGPIPGP@autochop?$AA@
	call	_toggle_save
	add	esp, 4
$LN67@bottom_dum:

; 2182 :   if ( circular_arc_flag ) toggle_save("circular_arc_draw");

	cmp	DWORD PTR _circular_arc_flag, 0
	je	SHORT $LN66@bottom_dum
	push	OFFSET ??_C@_0BC@ENFIPPEC@circular_arc_draw?$AA@
	call	_toggle_save
	add	esp, 4
$LN66@bottom_dum:

; 2183 :   if ( rgb_colors_flag ) toggle_save("rgb_colors");

	cmp	DWORD PTR _rgb_colors_flag, 0
	je	SHORT $LN65@bottom_dum
	push	OFFSET ??_C@_0L@NAICPCIF@rgb_colors?$AA@
	call	_toggle_save
	add	esp, 4
$LN65@bottom_dum:

; 2184 :   if ( kraynikpopedge_flag ) toggle_save("kraynikpopedge");

	cmp	DWORD PTR _kraynikpopedge_flag, 0
	je	SHORT $LN64@bottom_dum
	push	OFFSET ??_C@_0P@EOAPCHNN@kraynikpopedge?$AA@
	call	_toggle_save
	add	esp, 4
$LN64@bottom_dum:

; 2185 :   if ( !kraynikpopvertex_flag ) toggle_save_off("kraynikpopvertex");

	cmp	DWORD PTR _kraynikpopvertex_flag, 0
	jne	SHORT $LN63@bottom_dum
	push	OFFSET ??_C@_0BB@OFKJMHPN@kraynikpopvertex?$AA@
	call	_toggle_save_off
	add	esp, 4
$LN63@bottom_dum:

; 2186 :   if ( !edgeshow_flag ) toggle_save_off("show_all_edges");

	cmp	DWORD PTR _edgeshow_flag, 0
	jne	SHORT $LN62@bottom_dum
	push	OFFSET ??_C@_0P@BMEBABFE@show_all_edges?$AA@
	call	_toggle_save_off
	add	esp, 4
$LN62@bottom_dum:

; 2187 :   if ( quiet_flag ) toggle_save("quiet");

	cmp	DWORD PTR _quiet_flag, 0
	je	SHORT $LN61@bottom_dum
	push	OFFSET ??_C@_05PMBAOCDH@quiet?$AA@
	call	_toggle_save
	add	esp, 4
$LN61@bottom_dum:

; 2188 :   if ( augmented_hessian_flag > 0 ) toggle_save("augmented_hessian");

	cmp	DWORD PTR _augmented_hessian_flag, 0
	jle	SHORT $LN189@bottom_dum
	push	OFFSET ??_C@_0BC@OIKNNBJM@augmented_hessian?$AA@
	call	_toggle_save
	add	esp, 4

; 2189 :   if ( augmented_hessian_flag == 0 ) toggle_save_off("augmented_hessian");

	cmp	DWORD PTR _augmented_hessian_flag, 0
$LN189@bottom_dum:
	jne	SHORT $LN59@bottom_dum
	push	OFFSET ??_C@_0BC@OIKNNBJM@augmented_hessian?$AA@
	call	_toggle_save_off
	add	esp, 4
$LN59@bottom_dum:

; 2190 :   if ( hessian_special_normal_flag ) toggle_save("hessian_special_normal");

	cmp	DWORD PTR _hessian_special_normal_flag, 0
	je	SHORT $LN58@bottom_dum
	push	OFFSET ??_C@_0BH@DJGEPEF@hessian_special_normal?$AA@
	call	_toggle_save
	add	esp, 4
$LN58@bottom_dum:

; 2191 :   if ( !hessian_quiet_flag ) toggle_save_off("hessian_quiet");

	cmp	DWORD PTR _hessian_quiet_flag, 0
	jne	SHORT $LN57@bottom_dum
	push	OFFSET ??_C@_0O@HCDDDEHN@hessian_quiet?$AA@
	call	_toggle_save_off
	add	esp, 4
$LN57@bottom_dum:

; 2192 :   if ( quiet_go_flag ) toggle_save("quietgo");

	cmp	DWORD PTR _quiet_go_flag, 0
	je	SHORT $LN56@bottom_dum
	push	OFFSET ??_C@_07HBPOHFLN@quietgo?$AA@
	call	_toggle_save
	add	esp, 4
$LN56@bottom_dum:

; 2193 :   if ( old_area_flag ) toggle_save("old_area");

	cmp	DWORD PTR _old_area_flag, 0
	je	SHORT $LN55@bottom_dum
	push	OFFSET ??_C@_08MINHKHMD@old_area?$AA@
	call	_toggle_save
	add	esp, 4
$LN55@bottom_dum:

; 2194 :   if ( approx_curve_flag ) toggle_save("approx_curv");

	cmp	DWORD PTR _approx_curve_flag, 0
	je	SHORT $LN54@bottom_dum
	push	OFFSET ??_C@_0M@GGBEIMML@approx_curv?$AA@
	call	_toggle_save
	add	esp, 4
$LN54@bottom_dum:

; 2195 :   if ( runge_kutta_flag ) toggle_save("runge_kutta");

	cmp	DWORD PTR _runge_kutta_flag, 0
	je	SHORT $LN53@bottom_dum
	push	OFFSET ??_C@_0M@OBNGAKOC@runge_kutta?$AA@
	call	_toggle_save
	add	esp, 4
$LN53@bottom_dum:

; 2196 :   if ( check_increase_flag ) toggle_save("check_increase");

	cmp	DWORD PTR _check_increase_flag, 0
	je	SHORT $LN52@bottom_dum
	push	OFFSET ??_C@_0P@OGHBAHOF@check_increase?$AA@
	call	_toggle_save
	add	esp, 4
$LN52@bottom_dum:

; 2197 :   if ( web.area_norm_flag ) toggle_save("area_normalization");

	cmp	DWORD PTR _web+876, 0
	je	SHORT $LN51@bottom_dum
	push	OFFSET ??_C@_0BD@JAENIDNE@area_normalization?$AA@
	call	_toggle_save
	add	esp, 4
$LN51@bottom_dum:

; 2198 :   if ( conf_edge_curv_flag ) toggle_save("conf_edge");

	cmp	DWORD PTR _conf_edge_curv_flag, 0
	je	SHORT $LN50@bottom_dum
	push	OFFSET ??_C@_09MFCEMNNF@conf_edge?$AA@
	call	_toggle_save
	add	esp, 4
$LN50@bottom_dum:

; 2199 :   if ( effective_area_flag ) toggle_save("effective_area");

	cmp	DWORD PTR _effective_area_flag, 0
	je	SHORT $LN49@bottom_dum
	push	OFFSET ??_C@_0P@OMMOBLOA@effective_area?$AA@
	call	_toggle_save
	add	esp, 4
$LN49@bottom_dum:

; 2200 :   if ( web.torus_body_flag ) toggle_save("connected");

	cmp	DWORD PTR _web+804, 0
	je	SHORT $LN48@bottom_dum
	push	OFFSET ??_C@_09JGOMOAGJ@connected?$AA@
	call	_toggle_save
	add	esp, 4
$LN48@bottom_dum:

; 2201 :   if ( web.torus_clip_flag ) toggle_save("clipped");

	cmp	DWORD PTR _web+800, 0
	je	SHORT $LN47@bottom_dum
	push	OFFSET ??_C@_07HKDEBIPG@clipped?$AA@
	call	_toggle_save
	add	esp, 4
$LN47@bottom_dum:

; 2202 :   if ( thickenflag ) toggle_save("thicken");

	cmp	DWORD PTR _thickenflag, 0
	je	SHORT $LN46@bottom_dum
	push	OFFSET ??_C@_07KCLCNBJB@thicken?$AA@
	call	_toggle_save
	add	esp, 4
$LN46@bottom_dum:

; 2203 :   if ( !innerflag ) toggle_save_off("show_inner");

	cmp	DWORD PTR _innerflag, 0
	jne	SHORT $LN45@bottom_dum
	push	OFFSET ??_C@_0L@EAEPHEPG@show_inner?$AA@
	call	_toggle_save_off
	add	esp, 4
$LN45@bottom_dum:

; 2204 :   if ( !outerflag ) toggle_save_off("show_outer");

	cmp	DWORD PTR _outerflag, 0
	jne	SHORT $LN44@bottom_dum
	push	OFFSET ??_C@_0L@LOICIGID@show_outer?$AA@
	call	_toggle_save_off
	add	esp, 4
$LN44@bottom_dum:

; 2205 :   if ( colorflag )

	cmp	DWORD PTR _colorflag, 0
	je	SHORT $LN43@bottom_dum

; 2206 :   { toggle_save("colormap");

	push	OFFSET ??_C@_08OMBDDLKJ@colormap?$AA@
	call	_toggle_save

; 2207 :     sprintf(msg,"colorfile := \"%s\"\n",cmapname);

	mov	eax, DWORD PTR _msg
	push	OFFSET _cmapname
	push	OFFSET ??_C@_0BD@CMGJLAKL@colorfile?5?3?$DN?5?$CC?$CFs?$CC?6?$AA@
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H
$LN43@bottom_dum:

; 2208 :   }
; 2209 :   if ( dirichlet_flag ) toggle_save("dirichlet_mode");

	cmp	DWORD PTR _dirichlet_flag, 0
	je	SHORT $LN42@bottom_dum
	push	OFFSET ??_C@_0P@DEKALNNI@dirichlet_mode?$AA@
	call	_toggle_save
	add	esp, 4
$LN42@bottom_dum:

; 2210 :   if ( sobolev_flag ) toggle_save("sobolev_mode");

	cmp	DWORD PTR _sobolev_flag, 0
	je	SHORT $LN41@bottom_dum
	push	OFFSET ??_C@_0N@IAKIABKB@sobolev_mode?$AA@
	call	_toggle_save
	add	esp, 4
$LN41@bottom_dum:

; 2211 :   if ( pop_disjoin_flag ) toggle_save("pop_disjoin");

	cmp	DWORD PTR _pop_disjoin_flag, 0
	je	SHORT $LN40@bottom_dum
	push	OFFSET ??_C@_0M@PDGIDHIC@pop_disjoin?$AA@
	call	_toggle_save
	add	esp, 4
$LN40@bottom_dum:

; 2212 :   if ( pop_enjoin_flag ) toggle_save("pop_enjoin");

	cmp	DWORD PTR _pop_enjoin_flag, 0
	je	SHORT $LN39@bottom_dum
	push	OFFSET ??_C@_0L@NBNMFCPF@pop_enjoin?$AA@
	call	_toggle_save
	add	esp, 4
$LN39@bottom_dum:

; 2213 :   if ( pop_to_face_flag ) toggle_save("pop_to_face");

	cmp	DWORD PTR _pop_to_face_flag, 0
	je	SHORT $LN38@bottom_dum
	push	OFFSET ??_C@_0M@FHCBDAPB@pop_to_face?$AA@
	call	_toggle_save
	add	esp, 4
$LN38@bottom_dum:

; 2214 :   if ( pop_to_edge_flag ) toggle_save("pop_to_edge");

	cmp	DWORD PTR _pop_to_edge_flag, 0
	je	SHORT $LN37@bottom_dum
	push	OFFSET ??_C@_0M@CAFGBCMP@pop_to_edge?$AA@
	call	_toggle_save
	add	esp, 4
$LN37@bottom_dum:

; 2215 :   if ( ps_colorflag > 0 ) toggle_save("ps_colorflag");

	cmp	DWORD PTR _ps_colorflag, 0
	jle	SHORT $LN190@bottom_dum
	push	OFFSET ??_C@_0N@PDJMPNAK@ps_colorflag?$AA@
	call	_toggle_save
	add	esp, 4

; 2216 :   if ( ps_colorflag == 0 ) toggle_save_off("ps_colorflag");

	cmp	DWORD PTR _ps_colorflag, 0
$LN190@bottom_dum:
	jne	SHORT $LN35@bottom_dum
	push	OFFSET ??_C@_0N@PDJMPNAK@ps_colorflag?$AA@
	call	_toggle_save_off
	add	esp, 4
$LN35@bottom_dum:

; 2217 :   if ( ps_cmykflag ) toggle_save("ps_cmykflag");

	cmp	DWORD PTR _ps_cmykflag, 0
	je	SHORT $LN34@bottom_dum
	push	OFFSET ??_C@_0M@LOFHKFBI@ps_cmykflag?$AA@
	call	_toggle_save
	add	esp, 4
$LN34@bottom_dum:

; 2218 :   if ( labelflag == 0 ) toggle_save_off("ps_labelflag");

	cmp	DWORD PTR _labelflag, 0
	jne	SHORT $LN191@bottom_dum
	push	OFFSET ??_C@_0N@ECHDFDIC@ps_labelflag?$AA@
	call	_toggle_save_off
	add	esp, 4

; 2219 :   if ( labelflag > 0  ) toggle_save("ps_labelflag");

	cmp	DWORD PTR _labelflag, 0
$LN191@bottom_dum:
	jle	SHORT $LN32@bottom_dum
	push	OFFSET ??_C@_0N@ECHDFDIC@ps_labelflag?$AA@
	call	_toggle_save
	add	esp, 4
$LN32@bottom_dum:

; 2220 :   if ( crossingflag > 0 ) toggle_save("ps_crossingflag");

	cmp	DWORD PTR _crossingflag, 0
	jle	SHORT $LN192@bottom_dum
	push	OFFSET ??_C@_0BA@MDFPOHGI@ps_crossingflag?$AA@
	call	_toggle_save
	add	esp, 4

; 2221 :   if ( crossingflag == 0 ) toggle_save_off("ps_crossingflag");

	cmp	DWORD PTR _crossingflag, 0
$LN192@bottom_dum:
	jne	SHORT $LN30@bottom_dum
	push	OFFSET ??_C@_0BA@MDFPOHGI@ps_crossingflag?$AA@
	call	_toggle_save_off
	add	esp, 4
$LN30@bottom_dum:

; 2222 :   if ( smooth_graph_flag ) toggle_save("smooth_graph");

	cmp	DWORD PTR _smooth_graph_flag, 0
	je	SHORT $LN29@bottom_dum
	push	OFFSET ??_C@_0N@DFPINMIP@smooth_graph?$AA@
	call	_toggle_save
	add	esp, 4
$LN29@bottom_dum:

; 2223 :   if ( hessian_by_diff_flag ) toggle_save("hessian_diff");

	cmp	DWORD PTR _hessian_by_diff_flag, 0
	je	SHORT $LN28@bottom_dum
	push	OFFSET ??_C@_0N@PBIFKJMI@hessian_diff?$AA@
	call	_toggle_save
	add	esp, 4
$LN28@bottom_dum:

; 2224 :   if ( !hessian_normal_flag ) toggle_save_off("hessian_normal");

	cmp	DWORD PTR _hessian_normal_flag, 0
	jne	SHORT $LN27@bottom_dum
	push	OFFSET ??_C@_0P@BMDMDICD@hessian_normal?$AA@
	call	_toggle_save_off
	add	esp, 4
$LN27@bottom_dum:

; 2225 :   if ( hessian_normal_perp_flag ) toggle_save("hessian_normal_perp");

	cmp	DWORD PTR _hessian_normal_perp_flag, 0
	je	SHORT $LN26@bottom_dum
	push	OFFSET ??_C@_0BE@IEAFMCH@hessian_normal_perp?$AA@
	call	_toggle_save
	add	esp, 4
$LN26@bottom_dum:

; 2226 :   if ( hessian_normal_one_flag ) toggle_save("hessian_normal_one");

	cmp	DWORD PTR _hessian_normal_one_flag, 0
	je	SHORT $LN25@bottom_dum
	push	OFFSET ??_C@_0BD@HMMIFHMP@hessian_normal_one?$AA@
	call	_toggle_save
	add	esp, 4
$LN25@bottom_dum:

; 2227 :   if ( hessian_double_normal_flag ) toggle_save("hessian_double_normal");

	cmp	DWORD PTR _hessian_double_normal_flag, 0
	je	SHORT $LN24@bottom_dum
	push	OFFSET ??_C@_0BG@GAEGJDMI@hessian_double_normal?$AA@
	call	_toggle_save
	add	esp, 4
$LN24@bottom_dum:

; 2228 :   if ( post_project_flag ) toggle_save("post_project");

	cmp	DWORD PTR _post_project_flag, 0
	je	SHORT $LN23@bottom_dum
	push	OFFSET ??_C@_0N@NFINOFHM@post_project?$AA@
	call	_toggle_save
	add	esp, 4
$LN23@bottom_dum:

; 2229 :   if ( mean_curv_int_flag ) toggle_save("mean_curvature_integral");

	cmp	DWORD PTR _mean_curv_int_flag, 0
	je	SHORT $LN22@bottom_dum
	push	OFFSET ??_C@_0BI@KGGFDDEC@mean_curvature_integral?$AA@
	call	_toggle_save
	add	esp, 4
$LN22@bottom_dum:

; 2230 :   if ( normal_curvature_flag ) toggle_save("normal_curvature");

	cmp	DWORD PTR _normal_curvature_flag, 0
	je	SHORT $LN21@bottom_dum
	push	OFFSET ??_C@_0BB@ODBHHAP@normal_curvature?$AA@
	call	_toggle_save
	add	esp, 4
$LN21@bottom_dum:

; 2231 :   if ( div_normal_curvature_flag ) toggle_save("div_normal_curvature");

	cmp	DWORD PTR _div_normal_curvature_flag, 0
	je	SHORT $LN20@bottom_dum
	push	OFFSET ??_C@_0BF@KHPBBAHH@div_normal_curvature?$AA@
	call	_toggle_save
	add	esp, 4
$LN20@bottom_dum:

; 2232 :   if ( !shading_flag ) toggle_save_off("shading");

	cmp	DWORD PTR _shading_flag, 0
	jne	SHORT $LN19@bottom_dum
	push	OFFSET ??_C@_07IBJKBKNG@shading?$AA@
	call	_toggle_save_off
	add	esp, 4
$LN19@bottom_dum:

; 2233 :   if ( !color_flag ) toggle_save_off("facet_colors");

	cmp	DWORD PTR _color_flag, 0
	jne	SHORT $LN18@bottom_dum
	push	OFFSET ??_C@_0N@BNMHNAMC@facet_colors?$AA@
	call	_toggle_save_off
	add	esp, 4
$LN18@bottom_dum:

; 2234 :   if ( boundary_curvature_flag ) toggle_save("boundary_curvature");

	cmp	DWORD PTR _boundary_curvature_flag, 0
	je	SHORT $LN17@bottom_dum
	push	OFFSET ??_C@_0BD@MOPCCJLG@boundary_curvature?$AA@
	call	_toggle_save
	add	esp, 4
$LN17@bottom_dum:

; 2235 :   if ( normal_motion_flag ) toggle_save("normal_motion");

	cmp	DWORD PTR _normal_motion_flag, 0
	je	SHORT $LN16@bottom_dum
	push	OFFSET ??_C@_0O@PKIOMPCC@normal_motion?$AA@
	call	_toggle_save
	add	esp, 4
$LN16@bottom_dum:

; 2236 :   if ( check_pinning_flag ) toggle_save("pinning");

	cmp	DWORD PTR _check_pinning_flag, 0
	je	SHORT $LN15@bottom_dum
	push	OFFSET ??_C@_07BCIELMPF@pinning?$AA@
	call	_toggle_save
	add	esp, 4
$LN15@bottom_dum:

; 2237 :   if ( !metric_convert_flag ) toggle_save_off("metric_conversion");

	cmp	DWORD PTR _metric_convert_flag, 0
	jne	SHORT $LN14@bottom_dum
	push	OFFSET ??_C@_0BC@LJJGFBGD@metric_conversion?$AA@
	call	_toggle_save_off
	add	esp, 4
$LN14@bottom_dum:

; 2238 :   if ( autorecalc_flag ) toggle_save("autorecalc");

	cmp	DWORD PTR _autorecalc_flag, 0
	je	SHORT $LN13@bottom_dum
	push	OFFSET ??_C@_0L@MABNKBMJ@autorecalc?$AA@
	call	_toggle_save
	add	esp, 4
$LN13@bottom_dum:

; 2239 :   if ( make_pos_def_flag ) toggle_save("force_pos_def");

	cmp	DWORD PTR _make_pos_def_flag, 0
	je	SHORT $LN12@bottom_dum
	push	OFFSET ??_C@_0O@MHBOMMFK@force_pos_def?$AA@
	call	_toggle_save
	add	esp, 4
$LN12@bottom_dum:

; 2240 :   if ( !gv_binary_flag ) toggle_save_off("gv_binary");

	cmp	DWORD PTR _gv_binary_flag, 0
	jne	SHORT $LN11@bottom_dum
	push	OFFSET ??_C@_09BPDDPHCA@gv_binary?$AA@
	call	_toggle_save_off
	add	esp, 4
$LN11@bottom_dum:

; 2241 :   if ( self_similar_flag ) toggle_save("self_similar");

	cmp	DWORD PTR _self_similar_flag, 0
	je	SHORT $LN10@bottom_dum
	push	OFFSET ??_C@_0N@FFMNCIGF@self_similar?$AA@
	call	_toggle_save
	add	esp, 4
$LN10@bottom_dum:

; 2242 :   if ( interp_bdry_param ) toggle_save("interp_bdry_param");

	cmp	DWORD PTR _interp_bdry_param, 0
	je	SHORT $LN9@bottom_dum
	push	OFFSET ??_C@_0BC@KPHKHJOD@interp_bdry_param?$AA@
	call	_toggle_save
	add	esp, 4
$LN9@bottom_dum:

; 2243 :   if ( web.bodycount && !web.gravflag ) toggle_save_off("gravity");

	cmp	DWORD PTR _web+1500, 0
	je	SHORT $LN8@bottom_dum
	cmp	DWORD PTR _web+824, 0
	jne	SHORT $LN8@bottom_dum
	push	OFFSET ??_C@_07GFBFDLBM@gravity?$AA@
	call	_toggle_save_off
	add	esp, 4
$LN8@bottom_dum:

; 2244 :   if ( hessian_linear_metric_flag )

	cmp	DWORD PTR _hessian_linear_metric_flag, 0
	je	SHORT $LN7@bottom_dum

; 2245 :   { toggle_save("linear_metric");

	push	OFFSET ??_C@_0O@PLHGPNIO@linear_metric?$AA@
	call	_toggle_save

; 2246 : #ifdef FLOAT128
; 2247 :      sprintf(msg,"linear_metric_mix := %2.*Qg\n",DPREC,linear_metric_mix);
; 2248 : #elif defined(LONGDOUBLE)
; 2249 :      sprintf(msg,"linear_metric_mix := %2.*Lg\n",DPREC,linear_metric_mix);
; 2250 : #else
; 2251 :      sprintf(msg,"linear_metric_mix := %2.15g\n",(DOUBLE)linear_metric_mix);

	fld	QWORD PTR _linear_metric_mix
	push	ecx
	mov	ecx, DWORD PTR _msg
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BN@PKOEDJIO@linear_metric_mix?5?3?$DN?5?$CF2?415g?6?$AA@
	push	ecx
	call	_sprintf

; 2252 : #endif 
; 2253 :      outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 20					; 00000014H
$LN7@bottom_dum:

; 2254 :   }
; 2255 : 
; 2256 :   if ( transform_expr[0] )

	cmp	BYTE PTR _transform_expr, 0
	je	SHORT $LN6@bottom_dum

; 2257 :   { 
; 2258 :     sprintf(msg,"transform_expr \"%s\"\n",transform_expr);

	mov	eax, DWORD PTR _msg
	push	OFFSET _transform_expr
	push	OFFSET ??_C@_0BF@GKKNLENB@transform_expr?5?$CC?$CFs?$CC?6?$AA@
	push	eax
	call	_sprintf

; 2259 :     outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 16					; 00000010H
$LN6@bottom_dum:

; 2260 :   }
; 2261 :   if ( !transforms_flag && (transform_count>1)) toggle_save_off("transforms");

	cmp	DWORD PTR _transforms_flag, 0
	jne	SHORT $LN5@bottom_dum
	cmp	DWORD PTR _transform_count, 1
	jle	SHORT $LN5@bottom_dum
	push	OFFSET ??_C@_0L@DLCCMBJF@transforms?$AA@
	call	_toggle_save_off
	add	esp, 4
$LN5@bottom_dum:

; 2262 :   outstring("\n\n");

	push	OFFSET ??_C@_02PHMGELLB@?6?6?$AA@
	call	_outstring

; 2263 :   if ( web.target_tolerance != DEFAULT_TARGET_TOLERANCE )

	fld	QWORD PTR _web+760
	fld	ST(0)
	add	esp, 4
	fld	QWORD PTR __real@3f1a36e2eb1c432d
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN181@bottom_dum

; 2264 :   { sprintf(msg,"target_tolerance := %2.15g\n",(DOUBLE)web.target_tolerance);

	mov	edx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BM@OJBOKPEJ@target_tolerance?5?3?$DN?5?$CF2?415g?6?$AA@
	push	edx
	call	_sprintf

; 2265 :     outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 20					; 00000014H
	jmp	SHORT $LN4@bottom_dum
$LN181@bottom_dum:
	fstp	ST(0)
$LN4@bottom_dum:

; 2266 :   }
; 2267 :   if ( brightness != DEFAULT_BRIGHTNESS )

	fld	QWORD PTR _brightness
	fld	ST(0)
	fld	QWORD PTR __real@3fe4cccccccccccd
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN184@bottom_dum

; 2268 :   { sprintf(msg,"brightness := %2.15g\n",(DOUBLE)brightness);

	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BG@INDPJLAD@brightness?5?3?$DN?5?$CF2?415g?6?$AA@
	push	ecx
	call	_sprintf

; 2269 :     outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 20					; 00000014H
	jmp	SHORT $LN3@bottom_dum
$LN184@bottom_dum:
	fstp	ST(0)
$LN3@bottom_dum:

; 2270 :   }
; 2271 : 
; 2272 :   list_procedures(LIST_FULL);

	push	2
	call	_list_procedures
	add	esp, 4

; 2273 : 
; 2274 :   if ( show_expr[EDGE] ) 

	cmp	DWORD PTR _show_expr+4, 0
	je	SHORT $LN173@bottom_dum

; 2275 :   { 
; 2276 :     outstring(print_express(show_command+EDGE,'X'));

	push	88					; 00000058H
	push	OFFSET _show_command+104
	call	_print_express
	push	eax
	call	_outstring

; 2277 :     outstring("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	add	esp, 16					; 00000010H
$LN173@bottom_dum:

; 2278 :   }
; 2279 :   if ( show_expr[FACET] ) 

	cmp	DWORD PTR _show_expr+8, 0
	je	SHORT $LN166@bottom_dum

; 2280 :   { 
; 2281 :     outstring(print_express(show_command+FACET,'X'));

	push	88					; 00000058H
	push	OFFSET _show_command+208
	call	_print_express
	push	eax
	call	_outstring

; 2282 :     outstring("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring

; 2283 :   }
; 2284 : 
; 2285 :   /* windup */
; 2286 :   outfd = old_fd;

	mov	eax, DWORD PTR _old_fd$[ebp]
	add	esp, 16					; 00000010H
	mov	DWORD PTR _outfd, eax

; 2287 : } /* end bottom_dump */

	mov	esp, ebp
	pop	ebp
	ret	0
$LN166@bottom_dum:

; 2283 :   }
; 2284 : 
; 2285 :   /* windup */
; 2286 :   outfd = old_fd;

	mov	ecx, DWORD PTR _old_fd$[ebp]
	mov	DWORD PTR _outfd, ecx

; 2287 : } /* end bottom_dump */

	mov	esp, ebp
	pop	ebp
	ret	0
_bottom_dump ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@IGNIJJAI@?$CF6s?5?5?5?5?5?5?$CF5s?5?5?5?5?$CF5s?5?5?$CF8s?5?$CF8s?5?5?5?5@ ; `string'
PUBLIC	??_C@_01GBGANLPD@0?$AA@				; `string'
PUBLIC	_facetedge_dump
;	COMDAT ??_C@_0CJ@IGNIJJAI@?$CF6s?5?5?5?5?5?5?$CF5s?5?5?5?5?$CF5s?5?5?$CF8s?5?$CF8s?5?5?5?5@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0CJ@IGNIJJAI@?$CF6s?5?5?5?5?5?5?$CF5s?5?5?5?5?$CF5s?5?5?$CF8s?5?$CF8s?5?5?5?5@ DB '%'
	DB	'6s      %5s    %5s  %8s %8s     %8s %8s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
CONST	SEGMENT
??_C@_01GBGANLPD@0?$AA@ DB '0', 00H			; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\dump.c
CONST	ENDS
;	COMDAT _facetedge_dump
_TEXT	SEGMENT
_old_fd$ = -28						; size = 4
tv606 = -24						; size = 4
tv580 = -20						; size = 4
tv579 = -16						; size = 4
tv191 = -12						; size = 4
_pe$ = -12						; size = 4
tv170 = -8						; size = 4
_ne$ = -8						; size = 4
tv577 = -4						; size = 4
tv149 = -4						; size = 4
tv784 = 8						; size = 4
_fe$ = 8						; size = 4
tv128 = 12						; size = 4
_i$ = 12						; size = 4
_fd$ = 12						; size = 4
_facetedge_dump PROC					; COMDAT

; 2301 : { edge_id e_id;

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	ebx

; 2302 :   facet_id f_id;
; 2303 :   facetedge_id nf = get_next_facet(fe);

	mov	ebx, DWORD PTR _fe$[ebp]
	push	esi
	push	edi
	mov	edi, ebx
	shr	edi, 27					; 0000001bH
	and	edi, 1
	mov	DWORD PTR tv577[ebp], edi
	mov	eax, ebx
	je	SHORT $LN43@facetedge_
	and	eax, 134217727				; 07ffffffH
	lea	edx, DWORD PTR [eax*4]
	mov	DWORD PTR tv580[ebp], edx
	add	edx, DWORD PTR _web+460
	mov	DWORD PTR tv579[ebp], eax
	mov	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR [ecx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN42@facetedge_
$LN43@facetedge_:
	and	eax, 134217727				; 07ffffffH
	lea	edx, DWORD PTR [eax*4]
	mov	DWORD PTR tv580[ebp], edx
	add	edx, DWORD PTR _web+460
	mov	DWORD PTR tv579[ebp], eax
	mov	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR [ecx+40]
$LN42@facetedge_:

; 2304 :   facetedge_id pf = get_prev_facet(fe);

	test	edi, edi
	je	SHORT $LN47@facetedge_
	mov	esi, DWORD PTR [ecx+40]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN46@facetedge_
$LN47@facetedge_:
	mov	esi, DWORD PTR [ecx+36]
$LN46@facetedge_:

; 2305 :   facetedge_id ne = get_next_edge(fe);

	test	edi, edi
	je	SHORT $LN51@facetedge_
	mov	edi, DWORD PTR [ecx+28]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN70@facetedge_
$LN51@facetedge_:
	mov	edi, DWORD PTR [ecx+32]
$LN70@facetedge_:

; 2306 :   facetedge_id pe = get_prev_edge(fe);

	cmp	DWORD PTR tv577[ebp], 0
	mov	DWORD PTR _ne$[ebp], edi
	je	SHORT $LN55@facetedge_
	mov	ecx, DWORD PTR [ecx+32]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN71@facetedge_
$LN55@facetedge_:
	mov	ecx, DWORD PTR [ecx+28]
$LN71@facetedge_:
	mov	DWORD PTR _pe$[ebp], ecx

; 2307 :   FILE *old_fd = outfd;

	mov	ecx, DWORD PTR _outfd
	mov	DWORD PTR _old_fd$[ebp], ecx

; 2308 :   int i; 
; 2309 :   struct extra *ex;
; 2310 :   outfd = fd;

	mov	ecx, DWORD PTR _fd$[ebp]
	mov	DWORD PTR _outfd, ecx

; 2311 : 
; 2312 :   e_id = get_fe_edge(fe);

	mov	edx, DWORD PTR [edx]
	mov	edi, ebx
	and	edi, 134217728				; 08000000H
	xor	edi, DWORD PTR [edx+20]

; 2313 :   f_id = get_fe_facet(fe);

	mov	ecx, ebx
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	mov	DWORD PTR tv606[ebp], ecx
	jne	SHORT $LN61@facetedge_
	mov	ebx, DWORD PTR _NULLFACET
	jmp	SHORT $LN62@facetedge_
$LN61@facetedge_:
	cmp	DWORD PTR tv577[ebp], 0
	mov	edx, DWORD PTR [edx+24]
	je	SHORT $LN68@facetedge_
	xor	edx, 134217728				; 08000000H
$LN68@facetedge_:
	mov	ebx, edx
$LN62@facetedge_:

; 2314 :   sprintf(msg,"%6s      %5s    %5s  %8s %8s     %8s %8s",
; 2315 :       ELNAME(fe), SELNAME1(e_id), SELNAME2(f_id),
; 2316 :       (valid_id(pe) ? SELNAME3(pe) : "0"), 
; 2317 :       (valid_id(ne) ? SELNAME4(ne) : "0"), 
; 2318 :       (valid_id(pf) ? SELNAME5(pf) : "0"), 
; 2319 :       (valid_id(nf) ? SELNAME6(nf) : "0")); 

	test	eax, 268435456				; 10000000H
	je	SHORT $LN12@facetedge_
	mov	ecx, OFFSET ??_C@_01JOAMLHOP@?9?$AA@
	test	eax, 134217728				; 08000000H
	jne	SHORT $LN9@facetedge_
	mov	ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN9@facetedge_:
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	ecx
	push	OFFSET ??_C@_04HGGBINEM@?$CFs?$CFd?$AA@
	push	OFFSET _elnames+180
	call	_sprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv128[ebp], OFFSET _elnames+180
	jmp	SHORT $LN13@facetedge_
$LN12@facetedge_:
	mov	DWORD PTR tv128[ebp], OFFSET ??_C@_01GBGANLPD@0?$AA@
$LN13@facetedge_:
	test	esi, 268435456				; 10000000H
	je	SHORT $LN18@facetedge_
	mov	eax, OFFSET ??_C@_01JOAMLHOP@?9?$AA@
	test	esi, 134217728				; 08000000H
	jne	SHORT $LN15@facetedge_
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN15@facetedge_:
	and	esi, 134217727				; 07ffffffH
	inc	esi
	push	esi
	push	eax
	push	OFFSET ??_C@_04HGGBINEM@?$CFs?$CFd?$AA@
	push	OFFSET _elnames+150
	call	_sprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv149[ebp], OFFSET _elnames+150
	jmp	SHORT $LN19@facetedge_
$LN18@facetedge_:
	mov	DWORD PTR tv149[ebp], OFFSET ??_C@_01GBGANLPD@0?$AA@
$LN19@facetedge_:
	mov	ecx, DWORD PTR _ne$[ebp]
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN24@facetedge_
	mov	eax, OFFSET ??_C@_01JOAMLHOP@?9?$AA@
	test	ecx, 134217728				; 08000000H
	jne	SHORT $LN21@facetedge_
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN21@facetedge_:
	and	ecx, 134217727				; 07ffffffH
	inc	ecx
	push	ecx
	push	eax
	push	OFFSET ??_C@_04HGGBINEM@?$CFs?$CFd?$AA@
	push	OFFSET _elnames+120
	call	_sprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv170[ebp], OFFSET _elnames+120
	jmp	SHORT $LN25@facetedge_
$LN24@facetedge_:
	mov	DWORD PTR tv170[ebp], OFFSET ??_C@_01GBGANLPD@0?$AA@
$LN25@facetedge_:
	mov	ecx, DWORD PTR _pe$[ebp]
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN30@facetedge_
	mov	eax, OFFSET ??_C@_01JOAMLHOP@?9?$AA@
	test	ecx, 134217728				; 08000000H
	jne	SHORT $LN27@facetedge_
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN27@facetedge_:
	and	ecx, 134217727				; 07ffffffH
	inc	ecx
	push	ecx
	push	eax
	push	OFFSET ??_C@_04HGGBINEM@?$CFs?$CFd?$AA@
	push	OFFSET _elnames+90
	call	_sprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv191[ebp], OFFSET _elnames+90
	jmp	SHORT $LN31@facetedge_
$LN30@facetedge_:
	mov	DWORD PTR tv191[ebp], OFFSET ??_C@_01GBGANLPD@0?$AA@
$LN31@facetedge_:
	test	ebx, 268435456				; 10000000H
	je	SHORT $LN34@facetedge_
	mov	eax, OFFSET ??_C@_01JOAMLHOP@?9?$AA@
	test	ebx, 134217728				; 08000000H
	jne	SHORT $LN33@facetedge_
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN33@facetedge_:
	and	ebx, 134217727				; 07ffffffH
	inc	ebx
	push	ebx
	push	eax
	push	OFFSET ??_C@_04HGGBINEM@?$CFs?$CFd?$AA@
	push	OFFSET _elnames+60
	call	_sprintf
	add	esp, 16					; 00000010H
	mov	ebx, OFFSET _elnames+60
	jmp	SHORT $LN35@facetedge_
$LN34@facetedge_:
	mov	ebx, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN35@facetedge_:
	test	edi, 268435456				; 10000000H
	je	SHORT $LN38@facetedge_
	mov	eax, OFFSET ??_C@_01JOAMLHOP@?9?$AA@
	test	edi, 134217728				; 08000000H
	jne	SHORT $LN37@facetedge_
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN37@facetedge_:
	and	edi, 134217727				; 07ffffffH
	inc	edi
	push	edi
	push	eax
	push	OFFSET ??_C@_04HGGBINEM@?$CFs?$CFd?$AA@
	push	OFFSET _elnames+30
	call	_sprintf
	add	esp, 16					; 00000010H
	mov	esi, OFFSET _elnames+30
	jmp	SHORT $LN39@facetedge_
$LN38@facetedge_:
	mov	esi, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN39@facetedge_:
	cmp	DWORD PTR tv606[ebp], 0
	je	SHORT $LN40@facetedge_
	mov	edx, DWORD PTR tv579[ebp]
	inc	edx
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN41@facetedge_
$LN40@facetedge_:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN41@facetedge_:
	mov	ecx, DWORD PTR tv128[ebp]
	mov	edx, DWORD PTR tv149[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv170[ebp]
	push	edx
	mov	edx, DWORD PTR tv191[ebp]
	push	ecx
	push	edx
	push	ebx
	push	esi
	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0CJ@IGNIJJAI@?$CF6s?5?5?5?5?5?5?$CF5s?5?5?5?5?$CF5s?5?5?$CF8s?5?$CF8s?5?5?5?5@
	push	eax
	call	_sprintf

; 2320 :   outstring(msg); 

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring

; 2321 : 
; 2322 :   /* extra attributes */
; 2323 :   for ( i = 0, ex = EXTRAS(FACETEDGE) ; 
; 2324 :                 i < web.skel[FACETEDGE].extra_count; i++,ex++ )

	mov	esi, DWORD PTR _web+552
	add	esi, DWORD PTR _dymem
	add	esp, 40					; 00000028H
	cmp	DWORD PTR _web+556, 0
	mov	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN3@facetedge_
	mov	ebx, DWORD PTR _fe$[ebp]
	shr	ebx, 29					; 0000001dH
	imul	ebx, 112				; 00000070H
	mov	DWORD PTR tv784[ebp], 0
	npad	1
$LL69@facetedge_:

; 2325 :     { char *at = get_extra(fe,i);

	mov	ecx, DWORD PTR tv784[ebp]
	add	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR _web[ebx+104]
	mov	edi, DWORD PTR [ecx+eax+64]
	mov	edx, DWORD PTR _web[ebx+12]
	mov	eax, DWORD PTR tv580[ebp]
	add	edi, DWORD PTR [eax+edx]

; 2326 :       if ( !(ex->flags & DUMP_ATTR) ) continue;

	test	BYTE PTR [esi+232], 1
	je	SHORT $LN4@facetedge_

; 2327 :       if ( ex->array_spec.datacount == 0 ) continue;

	cmp	DWORD PTR [esi+88], 0
	je	SHORT $LN4@facetedge_

; 2328 :       sprintf(msg," %s ",ex->name);

	mov	ecx, DWORD PTR _msg
	push	esi
	push	OFFSET ??_C@_04KMMDIKEB@?5?$CFs?5?$AA@
	push	ecx
	call	_sprintf

; 2329 :       print_array_attribute(ex,at);

	push	edi
	push	esi
	call	_print_array_attribute
	add	esp, 20					; 00000014H
$LN4@facetedge_:

; 2321 : 
; 2322 :   /* extra attributes */
; 2323 :   for ( i = 0, ex = EXTRAS(FACETEDGE) ; 
; 2324 :                 i < web.skel[FACETEDGE].extra_count; i++,ex++ )

	mov	eax, DWORD PTR _i$[ebp]
	add	DWORD PTR tv784[ebp], 240		; 000000f0H
	inc	eax
	add	esi, 240				; 000000f0H
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _web+556
	jl	SHORT $LL69@facetedge_
$LN3@facetedge_:

; 2330 :     }
; 2331 :   outstring("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring

; 2332 :   outfd = old_fd;

	mov	edx, DWORD PTR _old_fd$[ebp]
	add	esp, 4
	pop	edi
	pop	esi
	mov	DWORD PTR _outfd, edx
	pop	ebx

; 2333 : } /* end facetedge_dump() */

	mov	esp, ebp
	pop	ebp
	ret	0
_facetedge_dump ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@NBJCLBFP@f?3?5?5?5?5?$CF17?415f?5?$CF17?415f?5?$HMf?$HM?5?$DN?5?$CFg?6?6@ ; `string'
PUBLIC	??_C@_0CK@EFNCEIFN@f?3?5?5?5?5?$CF17?415f?5?$CF17?415f?5?$CF17?415f?5?5?$HM@ ; `string'
PUBLIC	??_C@_08LKOMMHII@?5?5fixed?5?$AA@		; `string'
PUBLIC	??_C@_0CH@PHEKJJKE@?$CF3s?5?5?5?5?$CF17?415f?5?$CF17?415f?5?5?$HMx?$HM?5?$DN?5?$CF1@ ; `string'
PUBLIC	??_C@_0CN@DKFIGPLL@?$CF3s?5?5?$CF17?415f?5?$CF17?415f?5?$CF17?415f?5?5?$HMx@ ; `string'
PUBLIC	??_C@_0CK@LKLPFLKH@?6vertices?5?5?5?5?5?5?5?5?5?5?5?5?5?5coordinat@ ; `string'
PUBLIC	??_C@_0BF@CFCGJEDL@?$CFs?3?5Dump?5of?5force?4?6?6?$AA@ ; `string'
PUBLIC	??_C@_0BG@OFBLDCJP@Cannot?5open?5file?5?$CFs?4?6?$AA@ ; `string'
PUBLIC	??_C@_01NOFIACDB@w?$AA@				; `string'
PUBLIC	??_C@_0BK@GICJIGND@Enter?5name?5of?5dump?5file?3?5?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_dump_force
EXTRN	_fclose:PROC
EXTRN	_dot:PROC
EXTRN	_fopen:PROC
EXTRN	_prompt:PROC
EXTRN	__CIsqrt:PROC
;	COMDAT ??_C@_0CB@NBJCLBFP@f?3?5?5?5?5?$CF17?415f?5?$CF17?415f?5?$HMf?$HM?5?$DN?5?$CFg?6?6@
CONST	SEGMENT
??_C@_0CB@NBJCLBFP@f?3?5?5?5?5?$CF17?415f?5?$CF17?415f?5?$HMf?$HM?5?$DN?5?$CFg?6?6@ DB 'f'
	DB	':    %17.15f %17.15f |f| = %g', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@EFNCEIFN@f?3?5?5?5?5?$CF17?415f?5?$CF17?415f?5?$CF17?415f?5?5?$HM@
CONST	SEGMENT
??_C@_0CK@EFNCEIFN@f?3?5?5?5?5?$CF17?415f?5?$CF17?415f?5?$CF17?415f?5?5?$HM@ DB 'f'
	DB	':    %17.15f %17.15f %17.15f  |f| = %g', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LKOMMHII@?5?5fixed?5?$AA@
CONST	SEGMENT
??_C@_08LKOMMHII@?5?5fixed?5?$AA@ DB '  fixed ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@PHEKJJKE@?$CF3s?5?5?5?5?$CF17?415f?5?$CF17?415f?5?5?$HMx?$HM?5?$DN?5?$CF1@
CONST	SEGMENT
??_C@_0CH@PHEKJJKE@?$CF3s?5?5?5?5?$CF17?415f?5?$CF17?415f?5?5?$HMx?$HM?5?$DN?5?$CF1@ DB '%'
	DB	'3s    %17.15f %17.15f  |x| = %17.15f ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@DKFIGPLL@?$CF3s?5?5?$CF17?415f?5?$CF17?415f?5?$CF17?415f?5?5?$HMx@
CONST	SEGMENT
??_C@_0CN@DKFIGPLL@?$CF3s?5?5?$CF17?415f?5?$CF17?415f?5?$CF17?415f?5?5?$HMx@ DB '%'
	DB	'3s  %17.15f %17.15f %17.15f  |x| = %17.15f ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@LKLPFLKH@?6vertices?5?5?5?5?5?5?5?5?5?5?5?5?5?5coordinat@
CONST	SEGMENT
??_C@_0CK@LKLPFLKH@?6vertices?5?5?5?5?5?5?5?5?5?5?5?5?5?5coordinat@ DB 0aH
	DB	'vertices              coordinates      ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CFCGJEDL@?$CFs?3?5Dump?5of?5force?4?6?6?$AA@
CONST	SEGMENT
??_C@_0BF@CFCGJEDL@?$CFs?3?5Dump?5of?5force?4?6?6?$AA@ DB '%s: Dump of fo'
	DB	'rce.', 0aH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OFBLDCJP@Cannot?5open?5file?5?$CFs?4?6?$AA@
CONST	SEGMENT
??_C@_0BG@OFBLDCJP@Cannot?5open?5file?5?$CFs?4?6?$AA@ DB 'Cannot open fil'
	DB	'e %s.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w?$AA@
CONST	SEGMENT
??_C@_01NOFIACDB@w?$AA@ DB 'w', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GICJIGND@Enter?5name?5of?5dump?5file?3?5?$AA@
CONST	SEGMENT
??_C@_0BK@GICJIGND@Enter?5name?5of?5dump?5file?3?5?$AA@ DB 'Enter name of'
	DB	' dump file: ', 00H				; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _dump_force
_TEXT	SEGMENT
tv437 = -428						; size = 8
_old_fd$ = -420						; size = 4
tv389 = -416						; size = 4
_fd$ = -412						; size = 4
_i$ = -408						; size = 4
_name$ = -404						; size = 400
__$ArrayPad$ = -4					; size = 4
_dump_force PROC					; COMDAT

; 2344 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 428				; 000001acH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2345 :   char name[400];
; 2346 : 
; 2347 :   FILE *fd;
; 2348 :   vertex_id v_id;
; 2349 :   int i;
; 2350 :   FILE *old_fd = outfd;

	mov	eax, DWORD PTR _outfd

; 2351 : 
; 2352 :   prompt("Enter name of dump file: ",name,sizeof(name));

	push	400					; 00000190H
	lea	ecx, DWORD PTR _name$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BK@GICJIGND@Enter?5name?5of?5dump?5file?3?5?$AA@
	mov	DWORD PTR _old_fd$[ebp], eax
	call	_prompt
	add	esp, 12					; 0000000cH

; 2353 :   if ( name[0] == '\0' ) return;

	cmp	BYTE PTR _name$[ebp], 0
	je	$LN24@dump_force

; 2354 : 
; 2355 :   fd = fopen(name,"w");

	push	ebx
	push	esi
	push	edi
	lea	edx, DWORD PTR _name$[ebp]
	push	OFFSET ??_C@_01NOFIACDB@w?$AA@
	push	edx
	call	_fopen
	mov	esi, eax
	add	esp, 8
	mov	DWORD PTR _fd$[ebp], esi

; 2356 : 
; 2357 :   if ( fd == NULL )

	test	esi, esi
	jne	SHORT $LN38@dump_force

; 2358 :   { sprintf(errmsg,"Cannot open file %s.\n",name);

	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_0BG@OFBLDCJP@Cannot?5open?5file?5?$CFs?4?6?$AA@
	push	OFFSET _errmsg
	call	_sprintf

; 2359 :     kb_error(1008,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	1008					; 000003f0H
	call	_kb_error
	add	esp, 24					; 00000018H
$LN38@dump_force:

; 2360 :   }
; 2361 : 
; 2362 :   outfd = fd;
; 2363 :   sprintf(msg,"%s: Dump of force.\n\n",name); outstring(msg); 

	mov	edx, DWORD PTR _msg
	lea	ecx, DWORD PTR _name$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BF@CFCGJEDL@?$CFs?3?5Dump?5of?5force?4?6?6?$AA@
	push	edx
	mov	DWORD PTR _outfd, esi
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring

; 2364 : 
; 2365 :   /* vertex dump */
; 2366 :   outstring("\nvertices              coordinates      \n");

	push	OFFSET ??_C@_0CK@LKLPFLKH@?6vertices?5?5?5?5?5?5?5?5?5?5?5?5?5?5coordinat@
	call	_outstring

; 2367 :   FOR_ALL_VERTICES(v_id)

	mov	edi, DWORD PTR _web+48
	mov	ebx, edi
	shr	ebx, 28					; 0000001cH
	add	esp, 20					; 00000014H
	and	ebx, 1
	je	$LN19@dump_force
	npad	5
$LL40@dump_force:
	mov	ecx, DWORD PTR _web+12
	and	edi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	mov	DWORD PTR tv389[ebp], edi
	je	$LN20@dump_force

; 2368 :   { REAL *x,*f,mag;
; 2369 :     x = get_coord(v_id);

	mov	eax, DWORD PTR _dymem
	mov	edx, DWORD PTR _web+104
	mov	esi, DWORD PTR [edx+eax+64]

; 2370 :     switch(SDIM)

	mov	eax, DWORD PTR _web+616
	add	esi, ecx
	sub	eax, 2
	je	$LN14@dump_force
	dec	eax
	jne	$LN15@dump_force

; 2383 :             break;
; 2384 :           case 3:
; 2385 : #ifdef FLOAT128
; 2386 :           sprintf(msg,"%3s  %17.*Qf %17.*Qf %17.*Qf  |x| = %17.*Qf ",
; 2387 :              ELNAME(v_id),DPREC,x[0],DPREC,x[1],DPREC,x[2],DPREC,sqrt(SDIM_dot(x,x))); 
; 2388 : #elif defined(LONGDOUBLE)
; 2389 :           sprintf(msg,"%3s  %17.*Lf %17.*Lf %17.*Lf  |x| = %17.*Lf ",
; 2390 :              ELNAME(v_id),DPREC,x[0],DPREC,x[1],DPREC,x[2],DPREC,sqrt(SDIM_dot(x,x))); 
; 2391 : #else
; 2392 :           sprintf(msg,"%3s  %17.15f %17.15f %17.15f  |x| = %17.15f ",
; 2393 :              ELNAME(v_id),x[0],x[1],x[2],sqrt(SDIM_dot(x,x))); 

	test	ebx, ebx
	je	SHORT $LN28@dump_force
	lea	ecx, DWORD PTR [edi+1]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	ebx, OFFSET _elnames
	jmp	SHORT $LN29@dump_force
$LN28@dump_force:
	mov	ebx, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN29@dump_force:
	mov	edx, DWORD PTR _web+616
	push	edx
	push	esi
	push	esi
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	mov	eax, DWORD PTR _msg
	sub	esp, 32					; 00000020H
	fstp	QWORD PTR [esp+24]
	fld	QWORD PTR [esi+16]
	fstp	QWORD PTR [esp+16]
	fld	QWORD PTR [esi+8]
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR [esi]
	fstp	QWORD PTR [esp]
	push	ebx
	push	OFFSET ??_C@_0CN@DKFIGPLL@?$CF3s?5?5?$CF17?415f?5?$CF17?415f?5?$CF17?415f?5?5?$HMx@
	push	eax
	call	_sprintf

; 2394 : #endif 
; 2395 :              outstring(msg); 

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 48					; 00000030H

; 2396 :             break;

	jmp	SHORT $LN15@dump_force
$LN14@dump_force:

; 2371 :         { case 2:
; 2372 : #ifdef FLOAT128
; 2373 :           sprintf(msg,"%3s    %17.*Qf %17.*Qf  |x| = %17.*Qf ",
; 2374 :              ELNAME(v_id),DPREC,x[0],DPREC,x[1],DPREC,sqrt(SDIM_dot(x,x))); 
; 2375 : #elif defined(LONGDOUBLE)
; 2376 :           sprintf(msg,"%3s    %17.*Lf %17.*Lf  |x| = %17.*Lf ",
; 2377 :              ELNAME(v_id),DPREC,x[0],DPREC,x[1],DPREC,sqrt(SDIM_dot(x,x))); 
; 2378 : #else
; 2379 :           sprintf(msg,"%3s    %17.15f %17.15f  |x| = %17.15f ",
; 2380 :              ELNAME(v_id),x[0],x[1],sqrt(SDIM_dot(x,x))); 

	test	ebx, ebx
	je	SHORT $LN26@dump_force
	lea	edx, DWORD PTR [edi+1]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	ebx, OFFSET _elnames
	jmp	SHORT $LN27@dump_force
$LN26@dump_force:
	mov	ebx, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN27@dump_force:
	mov	eax, DWORD PTR _web+616
	push	eax
	push	esi
	push	esi
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	mov	ecx, DWORD PTR _msg
	sub	esp, 24					; 00000018H
	fstp	QWORD PTR [esp+16]
	fld	QWORD PTR [esi+8]
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR [esi]
	fstp	QWORD PTR [esp]
	push	ebx
	push	OFFSET ??_C@_0CH@PHEKJJKE@?$CF3s?5?5?5?5?$CF17?415f?5?$CF17?415f?5?5?$HMx?$HM?5?$DN?5?$CF1@
	push	ecx
	call	_sprintf

; 2381 : #endif 
; 2382 :              outstring(msg); 

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 40					; 00000028H
$LN15@dump_force:

; 2397 :          }
; 2398 :     if ( get_vattr(v_id) & CONSTRAINT )

	mov	eax, DWORD PTR _web+12
	mov	ecx, DWORD PTR [eax+edi*4]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 1024				; 00000400H
	xor	edx, edx
	or	eax, edx
	je	$LN36@dump_force

; 2399 :     { conmap_t *conmap = get_v_constraint_map(v_id);

	mov	eax, DWORD PTR _web+104
	mov	edx, DWORD PTR _dymem
	cmp	DWORD PTR [eax+edx+1288], 0
	je	SHORT $LN30@dump_force
	mov	ebx, DWORD PTR [eax+edx+1264]
	add	ebx, ecx
	jmp	SHORT $LN31@dump_force
$LN30@dump_force:
	mov	ebx, OFFSET _nullcon
$LN31@dump_force:

; 2400 :       struct constraint *con;
; 2401 :       sprintf(msg,"  constraints "); outstring(msg); 

	mov	ecx, DWORD PTR _msg
	push	OFFSET ??_C@_0P@NLMCGNKJ@?5?5constraints?5?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 12					; 0000000cH

; 2402 :       for ( i = 1 ; i <= (int)conmap[0] ; i++ )

	cmp	DWORD PTR [ebx], 1
	mov	DWORD PTR _i$[ebp], 1
	jl	$LN36@dump_force
	npad	12
$LL39@dump_force:

; 2403 :       { con = get_constraint(conmap[i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR [ebx+eax*4]
	and	esi, 1073741823				; 3fffffffH
	mov	eax, esi
	imul	eax, 176				; 000000b0H
	add	eax, DWORD PTR _web+652

; 2404 :         if ( !(con->attr & GLOBAL) )

	xor	edi, edi
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [eax+32]
	mov	DWORD PTR tv437[ebp+4], ecx
	mov	ecx, edx
	and	ecx, 4
	or	ecx, edi
	jne	SHORT $LN10@dump_force

; 2405 :         { if ( con->attr & NAMED_THING )

	and	edx, 512				; 00000200H
	or	edx, ecx
	je	SHORT $LN7@dump_force

; 2406 :            { sprintf(msg,"%s ",con->name); outstring(msg); }

	mov	edx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_03IKGEINEE@?$CFs?5?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax

; 2407 :           else

	jmp	SHORT $LN47@dump_force
$LN7@dump_force:

; 2408 :            { sprintf(msg,"%d ",conmap[i]&CONMASK); outstring(msg); }

	mov	ecx, DWORD PTR _msg
	push	esi
	push	OFFSET ??_C@_03JDANDILB@?$CFd?5?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
$LN47@dump_force:
	call	_outstring
	add	esp, 16					; 00000010H
$LN10@dump_force:

; 2402 :       for ( i = 1 ; i <= (int)conmap[0] ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR [ebx]
	jle	$LL39@dump_force
	mov	edi, DWORD PTR tv389[ebp]
$LN36@dump_force:

; 2409 :     }
; 2410 :       }
; 2411 :     }
; 2412 :     if ( get_vattr(v_id)&FIXED ) { sprintf(msg, "  fixed "); outstring(msg); }

	mov	eax, DWORD PTR _web+12
	mov	eax, DWORD PTR [eax+edi*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 64					; 00000040H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN5@dump_force
	mov	ecx, DWORD PTR _msg
	push	OFFSET ??_C@_08LKOMMHII@?5?5fixed?5?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 12					; 0000000cH
$LN5@dump_force:

; 2413 :     sprintf(msg,"\n"); outstring(msg); 

	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring

; 2414 : 
; 2415 :     f = get_force(v_id);

	mov	edx, DWORD PTR _web+12
	mov	esi, DWORD PTR [edx+edi*4]
	mov	eax, DWORD PTR _web+104
	mov	ecx, DWORD PTR _dymem
	add	esi, DWORD PTR [eax+ecx+784]

; 2416 :     mag = sqrt(SDIM_dot(f,f));

	mov	edx, DWORD PTR _web+616
	push	edx
	push	esi
	push	esi
	call	_dot
	add	esp, 24					; 00000018H
	call	__CIsqrt

; 2417 :     switch(SDIM)

	mov	eax, DWORD PTR _web+616
	sub	eax, 2
	je	SHORT $LN2@dump_force
	dec	eax
	jne	SHORT $LN45@dump_force

; 2428 : #endif 
; 2429 :           break;
; 2430 :       case 3:
; 2431 : #ifdef FLOAT128
; 2432 :           sprintf(msg,"f:    %17.*Qf %17.*Qf %17.*Qf  |f| = %g\n\n",
; 2433 :              DPREC,f[0],DPREC,f[1],DPREC,f[2],(DOUBLE)mag); outstring(msg); 
; 2434 : #elif defined(LONGDOUBLE)
; 2435 :           sprintf(msg,"f:    %17.*Lf %17.*Lf %17.*Lf  |f| = %g\n\n",
; 2436 :              DPREC,f[0],DPREC,f[1],DPREC,f[2],(DOUBLE)mag); outstring(msg); 
; 2437 : #else
; 2438 :           sprintf(msg,"f:    %17.15f %17.15f %17.15f  |f| = %g\n\n",
; 2439 :              f[0],f[1],f[2],(DOUBLE)mag); outstring(msg); 

	mov	eax, DWORD PTR _msg
	sub	esp, 32					; 00000020H
	fstp	QWORD PTR [esp+24]
	fld	QWORD PTR [esi+16]
	fstp	QWORD PTR [esp+16]
	fld	QWORD PTR [esi+8]
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR [esi]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CK@EFNCEIFN@f?3?5?5?5?5?$CF17?415f?5?$CF17?415f?5?$CF17?415f?5?5?$HM@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 44					; 0000002cH

; 2440 : #endif 
; 2441 :       break;

	jmp	SHORT $LN20@dump_force
$LN2@dump_force:

; 2418 :     { case 2:
; 2419 : #ifdef FLOAT128
; 2420 :           sprintf(msg,"f:    %17.*Qf %17.*Qf |f| = %g\n\n",
; 2421 :              DPREC,f[0],DPREC,f[1],(DOUBLE)mag); outstring(msg); 
; 2422 : #elif defined(LONGDOUBLE)
; 2423 :           sprintf(msg,"f:    %17.*Lf %17.*Lf |f| = %g\n\n",
; 2424 :              DPREC,f[0],DPREC,f[1],(DOUBLE)mag); outstring(msg); 
; 2425 : #else
; 2426 :           sprintf(msg,"f:    %17.15f %17.15f |f| = %g\n\n",
; 2427 :              f[0],f[1],(DOUBLE)mag); outstring(msg); 

	mov	edx, DWORD PTR _msg
	sub	esp, 24					; 00000018H
	fstp	QWORD PTR [esp+16]
	fld	QWORD PTR [esi+8]
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR [esi]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CB@NBJCLBFP@f?3?5?5?5?5?$CF17?415f?5?$CF17?415f?5?$HMf?$HM?5?$DN?5?$CFg?6?6@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 36					; 00000024H
	jmp	SHORT $LN20@dump_force
$LN45@dump_force:
	fstp	ST(0)
$LN20@dump_force:

; 2367 :   FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR _web+12
	mov	edx, DWORD PTR [ecx+edi*4]
	mov	edi, DWORD PTR [edx]
	mov	ebx, edi
	shr	ebx, 28					; 0000001cH
	and	ebx, 1
	jne	$LL40@dump_force
	mov	esi, DWORD PTR _fd$[ebp]
$LN19@dump_force:

; 2442 :     }
; 2443 :   }
; 2444 : 
; 2445 :   fclose(fd);

	push	esi
	call	_fclose

; 2446 : 
; 2447 :   outfd = old_fd;

	mov	eax, DWORD PTR _old_fd$[ebp]
	add	esp, 4
	pop	edi
	pop	esi
	mov	DWORD PTR _outfd, eax
	pop	ebx
$LN24@dump_force:

; 2448 : } /* end dump_force */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_dump_force ENDP
_TEXT	ENDS
PUBLIC	??_C@_07NPKGMONC@?$CF32s?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_0BA@FLKPEIKJ@?$CFs?5attributes?3?6?$AA@	; `string'
PUBLIC	??_C@_0EC@GAJNEAIP@Extra?5attributes?5?$CIand?5dynamicall@ ; `string'
PUBLIC	_list_attributes
;	COMDAT ??_C@_07NPKGMONC@?$CF32s?5?$CFs?$AA@
CONST	SEGMENT
??_C@_07NPKGMONC@?$CF32s?5?$CFs?$AA@ DB '%32s %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FLKPEIKJ@?$CFs?5attributes?3?6?$AA@
CONST	SEGMENT
??_C@_0BA@FLKPEIKJ@?$CFs?5attributes?3?6?$AA@ DB '%s attributes:', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@GAJNEAIP@Extra?5attributes?5?$CIand?5dynamicall@
CONST	SEGMENT
??_C@_0EC@GAJNEAIP@Extra?5attributes?5?$CIand?5dynamicall@ DB 'Extra attr'
	DB	'ibutes (and dynamically allocated internal attributes)', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _list_attributes
_TEXT	SEGMENT
tv313 = -20						; size = 4
tv274 = -16						; size = 4
tv278 = -12						; size = 4
_k$ = -8						; size = 4
tv243 = -4						; size = 4
_list_attributes PROC					; COMDAT

; 2460 : { int n,k,j;

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi

; 2461 :   struct extra *ex;
; 2462 : 
; 2463 :   outstring(
; 2464 :      "Extra attributes (and dynamically allocated internal attributes)\n");

	push	OFFSET ??_C@_0EC@GAJNEAIP@Extra?5attributes?5?$CIand?5dynamicall@
	call	_outstring
	mov	ebx, OFFSET _web+108
	mov	esi, OFFSET _typenames
	add	esp, 4
	mov	DWORD PTR tv274[ebp], ebx
	mov	DWORD PTR tv278[ebp], esi
$LL9@list_attri:

; 2466 :   {  
; 2467 :       sprintf(msg,"%s attributes:\n",typenames[n]); outstring(msg);

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0BA@FLKPEIKJ@?$CFs?5attributes?3?6?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 2468 :       for ( k = 0 ; k < web.skel[n].extra_count ; k++ )

	xor	eax, eax
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax
	cmp	DWORD PTR [ebx], eax
	jle	$LN8@list_attri

; 2466 :   {  
; 2467 :       sprintf(msg,"%s attributes:\n",typenames[n]); outstring(msg);

	mov	DWORD PTR tv243[ebp], eax
	npad	7
$LL20@list_attri:

; 2469 :       { ex = EXTRAS(n)+k;       

	mov	esi, DWORD PTR [ebx-4]
	add	esi, DWORD PTR tv243[ebp]

; 2470 :         sprintf(msg,"%32s %s",ex->name,datatype_name[ex->type]);

	mov	edx, DWORD PTR _msg
	add	esi, DWORD PTR _dymem
	mov	eax, DWORD PTR [esi+68]
	mov	ecx, DWORD PTR _datatype_name[eax*4]
	push	ecx
	push	esi
	push	OFFSET ??_C@_07NPKGMONC@?$CF32s?5?$CFs?$AA@
	push	edx
	call	_sprintf

; 2471 :         for ( j = 0 ; j < ex->array_spec.dim ; j++ )

	xor	edi, edi
	add	esp, 16					; 00000010H
	cmp	DWORD PTR [esi+76], edi
	jle	SHORT $LN1@list_attri

; 2469 :       { ex = EXTRAS(n)+k;       

	lea	ebx, DWORD PTR [esi+96]
	npad	10
$LL3@list_attri:

; 2472 :           sprintf(msg+strlen(msg),"[%d]",ex->array_spec.sizes[j]);

	mov	edx, DWORD PTR _msg
	mov	eax, edx
	lea	ecx, DWORD PTR [eax+1]
	mov	DWORD PTR tv313[ebp], ecx
	npad	2
$LL18@list_attri:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL18@list_attri
	mov	ecx, DWORD PTR [ebx]
	sub	eax, DWORD PTR tv313[ebp]
	push	ecx
	add	eax, edx
	push	OFFSET ??_C@_04KBDJOJNB@?$FL?$CFd?$FN?$AA@
	push	eax
	call	_sprintf
	inc	edi
	add	esp, 12					; 0000000cH
	add	ebx, 4
	cmp	edi, DWORD PTR [esi+76]
	jl	SHORT $LL3@list_attri

; 2471 :         for ( j = 0 ; j < ex->array_spec.dim ; j++ )

	mov	ebx, DWORD PTR tv274[ebp]
$LN1@list_attri:

; 2473 :         strcat(msg,"\n");

	mov	edi, DWORD PTR _msg
	dec	edi
$LL19@list_attri:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL19@list_attri
	mov	dx, WORD PTR ??_C@_01EEMJAFIK@?6?$AA@
	mov	WORD PTR [edi], dx

; 2474 :         outstring(msg);       

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	mov	eax, DWORD PTR _k$[ebp]
	add	DWORD PTR tv243[ebp], 240		; 000000f0H
	inc	eax
	add	esp, 4
	mov	DWORD PTR _k$[ebp], eax
	cmp	eax, DWORD PTR [ebx]
	jl	$LL20@list_attri

; 2468 :       for ( k = 0 ; k < web.skel[n].extra_count ; k++ )

	mov	esi, DWORD PTR tv278[ebp]
$LN8@list_attri:

; 2465 :   for ( n = 0 ; n < NUMELEMENTS ; n++ )

	add	esi, 4
	add	ebx, 112				; 00000070H
	mov	DWORD PTR tv278[ebp], esi
	mov	DWORD PTR tv274[ebp], ebx
	cmp	esi, OFFSET _typenames+20
	jl	$LL9@list_attri
	pop	edi
	pop	esi
	pop	ebx

; 2475 :       }
; 2476 :   }
; 2477 : } /* end list_attributes() */

	mov	esp, ebp
	pop	ebp
	ret	0
_list_attributes ENDP
_TEXT	ENDS
PUBLIC	??_C@_08IJIJGMIK@?5method?5?$AA@		; `string'
PUBLIC	??_C@_0L@LLAPKIKO@?5function?5?$AA@		; `string'
PUBLIC	??_C@_0BC@IEOJKCNC@?5volconst?5?$CF2?415g?5?$AA@ ; `string'
PUBLIC	??_C@_0BB@BGCAFBA@?5modulus?5?$CF2?415g?5?$AA@	; `string'
PUBLIC	??_C@_0BD@MOGEGIBA@?5tolerance?5?$CF2?415g?5?$AA@ ; `string'
PUBLIC	??_C@_0BE@JBAHBEAH@QUANTITY?5?$CFs?5ENERGY?5?$AA@ ; `string'
PUBLIC	??_C@_0DH@GGEEDLI@QUANTITY?5?$CFs?5FIXED?5?$DN?5?$CF2?415g?5?5lagr@ ; `string'
PUBLIC	??_C@_0DC@GOINFLF@QUANTITY?5?$CFs?5CONSERVED?5?5lagrange_@ ; `string'
PUBLIC	??_C@_0BH@OBDLPCAB@QUANTITY?5?$CFs?5INFO_ONLY?5?$AA@ ; `string'
PUBLIC	??_C@_08OBFAPEKM@?5METHOD?5?$AA@		; `string'
PUBLIC	??_C@_0BB@CIGLAEOI@METHOD_INSTANCE?5?$AA@	; `string'
PUBLIC	_list_quantity
;	COMDAT ??_C@_08IJIJGMIK@?5method?5?$AA@
CONST	SEGMENT
??_C@_08IJIJGMIK@?5method?5?$AA@ DB ' method ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LLAPKIKO@?5function?5?$AA@
CONST	SEGMENT
??_C@_0L@LLAPKIKO@?5function?5?$AA@ DB ' function ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IEOJKCNC@?5volconst?5?$CF2?415g?5?$AA@
CONST	SEGMENT
??_C@_0BC@IEOJKCNC@?5volconst?5?$CF2?415g?5?$AA@ DB ' volconst %2.15g ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BGCAFBA@?5modulus?5?$CF2?415g?5?$AA@
CONST	SEGMENT
??_C@_0BB@BGCAFBA@?5modulus?5?$CF2?415g?5?$AA@ DB ' modulus %2.15g ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MOGEGIBA@?5tolerance?5?$CF2?415g?5?$AA@
CONST	SEGMENT
??_C@_0BD@MOGEGIBA@?5tolerance?5?$CF2?415g?5?$AA@ DB ' tolerance %2.15g ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JBAHBEAH@QUANTITY?5?$CFs?5ENERGY?5?$AA@
CONST	SEGMENT
??_C@_0BE@JBAHBEAH@QUANTITY?5?$CFs?5ENERGY?5?$AA@ DB 'QUANTITY %s ENERGY '
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@GGEEDLI@QUANTITY?5?$CFs?5FIXED?5?$DN?5?$CF2?415g?5?5lagr@
CONST	SEGMENT
??_C@_0DH@GGEEDLI@QUANTITY?5?$CFs?5FIXED?5?$DN?5?$CF2?415g?5?5lagr@ DB 'Q'
	DB	'UANTITY %s FIXED = %2.15g  lagrange_multiplier %2.15g', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@GOINFLF@QUANTITY?5?$CFs?5CONSERVED?5?5lagrange_@
CONST	SEGMENT
??_C@_0DC@GOINFLF@QUANTITY?5?$CFs?5CONSERVED?5?5lagrange_@ DB 'QUANTITY %'
	DB	's CONSERVED  lagrange_multiplier %2.15g', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OBDLPCAB@QUANTITY?5?$CFs?5INFO_ONLY?5?$AA@
CONST	SEGMENT
??_C@_0BH@OBDLPCAB@QUANTITY?5?$CFs?5INFO_ONLY?5?$AA@ DB 'QUANTITY %s INFO'
	DB	'_ONLY ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08OBFAPEKM@?5METHOD?5?$AA@
CONST	SEGMENT
??_C@_08OBFAPEKM@?5METHOD?5?$AA@ DB ' METHOD ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CIGLAEOI@METHOD_INSTANCE?5?$AA@
CONST	SEGMENT
??_C@_0BB@CIGLAEOI@METHOD_INSTANCE?5?$AA@ DB 'METHOD_INSTANCE ', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _list_quantity
_TEXT	SEGMENT
_k$ = 8							; size = 4
_list_quantity PROC					; COMDAT

; 2487 : { struct gen_quant *q;

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi

; 2488 :   int i;
; 2489 :   struct method_instance *mi;
; 2490 : 
; 2491 :   q = GEN_QUANT(k);

	mov	edi, DWORD PTR _k$[ebp]
	imul	edi, 368				; 00000170H
	add	edi, DWORD PTR _gen_quant_list

; 2492 :  
; 2493 :   /* first, its methods */
; 2494 :   outstring("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring

; 2495 :   for ( i = 0 ; i < q->method_count ; i++ )

	xor	ebx, ebx
	add	esp, 4
	cmp	DWORD PTR [edi+240], ebx
	jle	$LN27@list_quant
$LL20@list_quant:

; 2496 :   { mi = METH_INSTANCE(q->meth_inst[i]); 

	mov	eax, DWORD PTR [edi+244]
	mov	eax, DWORD PTR [eax+ebx*4]
	cdq
	mov	esi, eax
	xor	esi, edx
	sub	esi, edx
	imul	esi, 2928				; 00000b70H
	add	esi, DWORD PTR _meth_inst_list

; 2497 :     if ( mi->flags & (IMPLICIT_INSTANCE|DEFAULT_INSTANCE|PRINTED_INST) ) 

	test	DWORD PTR [esi+140], -2141192192	; 80600000H
	jne	SHORT $LN19@list_quant

; 2498 :       continue;
; 2499 :     outstring("METHOD_INSTANCE "); 

	push	OFFSET ??_C@_0BB@CIGLAEOI@METHOD_INSTANCE?5?$AA@
	call	_outstring

; 2500 :     outstring(mi->name);

	push	esi
	call	_outstring

; 2501 :     outstring(" METHOD ");

	push	OFFSET ??_C@_08OBFAPEKM@?5METHOD?5?$AA@
	call	_outstring

; 2502 :     outstring(basic_gen_methods[mi->gen_method].name);

	mov	eax, DWORD PTR [esi+148]
	lea	ecx, DWORD PTR [eax+eax*4]
	shl	ecx, 5
	add	ecx, OFFSET _basic_gen_methods
	push	ecx
	call	_outstring

; 2503 :     dump_method_specs(q->meth_inst[i]);

	mov	edx, DWORD PTR [edi+244]
	mov	eax, DWORD PTR [edx+ebx*4]
	push	eax
	call	_dump_method_specs
	add	esp, 20					; 00000014H

; 2504 :     mi->flags |= PRINTED_INST; // to prevent printing for multiple quants

	or	DWORD PTR [esi+140], -2147483648	; 80000000H
$LN19@list_quant:

; 2495 :   for ( i = 0 ; i < q->method_count ; i++ )

	inc	ebx
	cmp	ebx, DWORD PTR [edi+240]
	jl	SHORT $LL20@list_quant
$LN27@list_quant:

; 2505 :   }
; 2506 :   switch ( q->flags & (Q_INFO|Q_FIXED|Q_ENERGY|Q_CONSERVED) )

	mov	eax, DWORD PTR [edi+136]
	and	eax, 15					; 0000000fH
	dec	eax
	cmp	eax, 7
	ja	$LN15@list_quant
	jmp	DWORD PTR $LN30@list_quant[eax*4]
$LN14@list_quant:

; 2507 :   { case Q_INFO:
; 2508 :       sprintf(msg,"QUANTITY %s INFO_ONLY ",q->name); outstring(msg); 

	push	edi
	push	OFFSET ??_C@_0BH@OBDLPCAB@QUANTITY?5?$CFs?5INFO_ONLY?5?$AA@

; 2509 :       break;

	jmp	SHORT $LN29@list_quant
$LN13@list_quant:

; 2510 :     case Q_CONSERVED:
; 2511 : #ifdef FLOAT128
; 2512 :         sprintf(msg,"QUANTITY %s CONSERVED  lagrange_multiplier %2.*Qg",
; 2513 :                   q->name,DPREC,q->pressure); 
; 2514 : #elif defined(LONGDOUBLE)
; 2515 :         sprintf(msg,"QUANTITY %s CONSERVED  lagrange_multiplier %2.*Lg",
; 2516 :                   q->name,DPREC,q->pressure); 
; 2517 : #else
; 2518 :         sprintf(msg,"QUANTITY %s CONSERVED  lagrange_multiplier %2.15g",
; 2519 :                   q->name,q->pressure); 

	fld	QWORD PTR [edi+192]
	mov	eax, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	edi
	push	OFFSET ??_C@_0DC@GOINFLF@QUANTITY?5?$CFs?5CONSERVED?5?5lagrange_@
	push	eax
	call	_sprintf

; 2520 : #endif 
; 2521 :         outstring(msg); 

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 24					; 00000018H

; 2522 :         break;

	jmp	SHORT $LN15@list_quant
$LN12@list_quant:

; 2523 :     case Q_FIXED:
; 2524 : #ifdef FLOAT128
; 2525 :         sprintf(msg,"QUANTITY %s FIXED = %2.*Qg  lagrange_multiplier %2.*Qg",
; 2526 :                 q->name,DPREC,q->target,DPREC,q->pressure); 
; 2527 : #elif defined(LONGDOUBLE)
; 2528 :         sprintf(msg,"QUANTITY %s FIXED = %2.*Lg  lagrange_multiplier %2.*Lg",
; 2529 :                 q->name,DPREC,q->target,DPREC,q->pressure); 
; 2530 : #else
; 2531 :         sprintf(msg,"QUANTITY %s FIXED = %2.15g  lagrange_multiplier %2.15g",
; 2532 :                   q->name,q->target,q->pressure); 

	fld	QWORD PTR [edi+192]
	mov	edx, DWORD PTR _msg
	sub	esp, 16					; 00000010H
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR [edi+144]
	fstp	QWORD PTR [esp]
	push	edi
	push	OFFSET ??_C@_0DH@GGEEDLI@QUANTITY?5?$CFs?5FIXED?5?$DN?5?$CF2?415g?5?5lagr@
	push	edx
	call	_sprintf

; 2533 : #endif 
; 2534 :         outstring(msg); 

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 32					; 00000020H

; 2535 :         break;

	jmp	SHORT $LN15@list_quant
$LN11@list_quant:

; 2536 :     case Q_ENERGY:
; 2537 :         sprintf(msg,"QUANTITY %s ENERGY ",q->name); outstring(msg); 

	push	edi
	push	OFFSET ??_C@_0BE@JBAHBEAH@QUANTITY?5?$CFs?5ENERGY?5?$AA@
$LN29@list_quant:
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 16					; 00000010H
$LN15@list_quant:

; 2538 :         break;
; 2539 :    }
; 2540 :    if ( q->tolerance >= 0.0 ) 

	fldz
	fcomp	QWORD PTR [edi+184]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN10@list_quant

; 2541 : #ifdef FLOAT128
; 2542 :    { sprintf(msg," tolerance %2.*Qg ",DPREC,q->tolerance); outstring(msg); }
; 2543 : #elif defined(LONGDOUBLE)
; 2544 :    { sprintf(msg," tolerance %2.*Lg ",DPREC,q->tolerance); outstring(msg); }
; 2545 : #else
; 2546 :    { sprintf(msg," tolerance %2.15g ",q->tolerance); outstring(msg); }

	fld	QWORD PTR [edi+184]
	mov	eax, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BD@MOGEGIBA@?5tolerance?5?$CF2?415g?5?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 20					; 00000014H
$LN10@list_quant:

; 2547 : #endif 
; 2548 :    if ( q->modulus != 1.0 ) 

	fld	QWORD PTR [edi+176]
	fld1
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN9@list_quant

; 2549 : #ifdef FLOAT128
; 2550 :    { sprintf(msg," modulus %2.*Qg ",DPREC,q->modulus); outstring(msg); }
; 2551 : #elif defined(LONGDOUBLE)
; 2552 :    { sprintf(msg," modulus %2.*Lg ",DPREC,q->modulus); outstring(msg); }
; 2553 : #else
; 2554 :    { sprintf(msg," modulus %2.15g ",q->modulus); outstring(msg); }

	fld	QWORD PTR [edi+176]
	mov	edx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BB@BGCAFBA@?5modulus?5?$CF2?415g?5?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 20					; 00000014H
$LN9@list_quant:

; 2555 : #endif 
; 2556 :    if ( q->volconst != 0.0 ) 

	fld	QWORD PTR [edi+208]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN8@list_quant

; 2557 : #ifdef FLOAT128
; 2558 :    { sprintf(msg," volconst %2.*Qg ",DPREC,q->volconst); outstring(msg); }
; 2559 : #elif defined(LONGDOUBLE)
; 2560 :    { sprintf(msg," volconst %2.*Lg ",DPREC,q->volconst); outstring(msg); }
; 2561 : #else
; 2562 :    { sprintf(msg," volconst %2.15g ",q->volconst); outstring(msg); }

	fld	QWORD PTR [edi+208]
	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BC@IEOJKCNC@?5volconst?5?$CF2?415g?5?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 20					; 00000014H
$LN8@list_quant:

; 2563 : #endif 
; 2564 :    if ( q->flags & Q_COMPOUND )

	test	DWORD PTR [edi+136], 256		; 00000100H
	je	SHORT $LN7@list_quant

; 2565 :    { outstring(" function ");

	push	OFFSET ??_C@_0L@LLAPKIKO@?5function?5?$AA@
	call	_outstring

; 2566 :      outstring(print_express(&q->expr,'\0'));

	push	0
	add	edi, 256				; 00000100H
	push	edi
	call	_print_express
	push	eax
	call	_outstring
	add	esp, 16					; 00000010H

; 2576 :    }
; 2577 :    outstring("\n"); 

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 2578 : 
; 2579 : } // end list_quantity()

	pop	ebp
	ret	0
$LN7@list_quant:

; 2567 :    }
; 2568 :    else for ( i = 0 ; i < q->method_count ; i++ )

	xor	ebx, ebx
	cmp	DWORD PTR [edi+240], ebx
	jle	SHORT $LN3@list_quant
$LL28@list_quant:

; 2569 :    { mi = METH_INSTANCE(q->meth_inst[i]); 

	mov	eax, DWORD PTR [edi+244]
	mov	eax, DWORD PTR [eax+ebx*4]
	cdq
	mov	esi, eax
	xor	esi, edx
	sub	esi, edx
	imul	esi, 2928				; 00000b70H
	add	esi, DWORD PTR _meth_inst_list

; 2570 :      outstring(" method ");

	push	OFFSET ??_C@_08IJIJGMIK@?5method?5?$AA@
	call	_outstring
	add	esp, 4

; 2571 :      if ( mi->flags & (IMPLICIT_INSTANCE|DEFAULT_INSTANCE) )

	test	DWORD PTR [esi+140], 6291456		; 00600000H
	je	SHORT $LN2@list_quant

; 2572 :      { outstring(basic_gen_methods[mi->gen_method].name);

	mov	esi, DWORD PTR [esi+148]
	lea	ecx, DWORD PTR [esi+esi*4]
	shl	ecx, 5
	add	ecx, OFFSET _basic_gen_methods
	push	ecx
	call	_outstring

; 2573 :        dump_method_specs(q->meth_inst[i]);

	mov	edx, DWORD PTR [edi+244]
	mov	eax, DWORD PTR [edx+ebx*4]
	push	eax
	call	_dump_method_specs
	add	esp, 8
	jmp	SHORT $LN4@list_quant
$LN2@list_quant:

; 2574 :      }
; 2575 :      else outstring(mi->name);

	push	esi
	call	_outstring
	add	esp, 4
$LN4@list_quant:

; 2567 :    }
; 2568 :    else for ( i = 0 ; i < q->method_count ; i++ )

	inc	ebx
	cmp	ebx, DWORD PTR [edi+240]
	jl	SHORT $LL28@list_quant
$LN3@list_quant:

; 2576 :    }
; 2577 :    outstring("\n"); 

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 2578 : 
; 2579 : } // end list_quantity()

	pop	ebp
	ret	0
	npad	3
$LN30@list_quant:
	DD	$LN11@list_quant
	DD	$LN12@list_quant
	DD	$LN15@list_quant
	DD	$LN14@list_quant
	DD	$LN15@list_quant
	DD	$LN15@list_quant
	DD	$LN15@list_quant
	DD	$LN13@list_quant
_list_quantity ENDP
_TEXT	ENDS
PUBLIC	_list_method_instance
; Function compile flags: /Ogtp
;	COMDAT _list_method_instance
_TEXT	SEGMENT
_k$ = 8							; size = 4
_list_method_instance PROC				; COMDAT

; 2589 : { struct method_instance *mi = METH_INSTANCE(k);

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	edi, DWORD PTR _k$[ebp]
	mov	eax, edi
	cdq
	mov	esi, eax
	xor	esi, edx
	sub	esi, edx
	imul	esi, 2928				; 00000b70H
	add	esi, DWORD PTR _meth_inst_list

; 2590 :  
; 2591 :   outstring("METHOD_INSTANCE "); 

	push	OFFSET ??_C@_0BB@CIGLAEOI@METHOD_INSTANCE?5?$AA@
	call	_outstring

; 2592 :   outstring(mi->name);

	push	esi
	call	_outstring

; 2593 :   outstring(" METHOD ");

	push	OFFSET ??_C@_08OBFAPEKM@?5METHOD?5?$AA@
	call	_outstring

; 2594 :   outstring(basic_gen_methods[mi->gen_method].name);

	mov	esi, DWORD PTR [esi+148]
	lea	eax, DWORD PTR [esi+esi*4]
	shl	eax, 5
	add	eax, OFFSET _basic_gen_methods
	push	eax
	call	_outstring

; 2595 :   dump_method_specs(k);

	push	edi
	call	_dump_method_specs
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi

; 2596 : 
; 2597 : } // end list_method_instance()

	pop	ebp
	ret	0
_list_method_instance ENDP
_TEXT	ENDS
PUBLIC	??_C@_06NEGMGOGG@C?$CF1d?3?5?$AA@		; `string'
PUBLIC	??_C@_09LNMFLBOP@CONTENT?5?6?$AA@		; `string'
PUBLIC	??_C@_06LHLMFLFM@E?$CF1d?3?5?$AA@		; `string'
PUBLIC	??_C@_08HIOFOEPP@ENERGY?5?6?$AA@		; `string'
PUBLIC	??_C@_0N@FAGCFNHM@?6FUNCTION?3?5?5?$AA@		; `string'
PUBLIC	??_C@_0BC@ECBBFNLL@?5content_rank?5?$CFd?6?$AA@	; `string'
PUBLIC	??_C@_08FNGNDCJE@?5?5GLOBAL?$AA@		; `string'
PUBLIC	??_C@_0O@DKPKKFIG@?5?5NONPOSITIVE?$AA@		; `string'
PUBLIC	??_C@_0O@LAPKBKBN@?5?5NONNEGATIVE?$AA@		; `string'
PUBLIC	??_C@_0L@BDPJCCPL@?5?5?5CONVEX?5?$AA@		; `string'
PUBLIC	??_C@_0M@OONNJGKK@?5?5?5NONWALL?5?$AA@		; `string'
PUBLIC	??_C@_0BB@EDPALEEG@?6CONSTRAINT?5?$CFd?5?5?$AA@	; `string'
PUBLIC	??_C@_0BB@IODONLGA@?6CONSTRAINT?5?$CFs?5?5?$AA@	; `string'
PUBLIC	_list_constraint
;	COMDAT ??_C@_06NEGMGOGG@C?$CF1d?3?5?$AA@
CONST	SEGMENT
??_C@_06NEGMGOGG@C?$CF1d?3?5?$AA@ DB 'C%1d: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LNMFLBOP@CONTENT?5?6?$AA@
CONST	SEGMENT
??_C@_09LNMFLBOP@CONTENT?5?6?$AA@ DB 'CONTENT ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06LHLMFLFM@E?$CF1d?3?5?$AA@
CONST	SEGMENT
??_C@_06LHLMFLFM@E?$CF1d?3?5?$AA@ DB 'E%1d: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HIOFOEPP@ENERGY?5?6?$AA@
CONST	SEGMENT
??_C@_08HIOFOEPP@ENERGY?5?6?$AA@ DB 'ENERGY ', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FAGCFNHM@?6FUNCTION?3?5?5?$AA@
CONST	SEGMENT
??_C@_0N@FAGCFNHM@?6FUNCTION?3?5?5?$AA@ DB 0aH, 'FUNCTION:  ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ECBBFNLL@?5content_rank?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BC@ECBBFNLL@?5content_rank?5?$CFd?6?$AA@ DB ' content_rank %d', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08FNGNDCJE@?5?5GLOBAL?$AA@
CONST	SEGMENT
??_C@_08FNGNDCJE@?5?5GLOBAL?$AA@ DB '  GLOBAL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DKPKKFIG@?5?5NONPOSITIVE?$AA@
CONST	SEGMENT
??_C@_0O@DKPKKFIG@?5?5NONPOSITIVE?$AA@ DB '  NONPOSITIVE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LAPKBKBN@?5?5NONNEGATIVE?$AA@
CONST	SEGMENT
??_C@_0O@LAPKBKBN@?5?5NONNEGATIVE?$AA@ DB '  NONNEGATIVE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BDPJCCPL@?5?5?5CONVEX?5?$AA@
CONST	SEGMENT
??_C@_0L@BDPJCCPL@?5?5?5CONVEX?5?$AA@ DB '   CONVEX ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OONNJGKK@?5?5?5NONWALL?5?$AA@
CONST	SEGMENT
??_C@_0M@OONNJGKK@?5?5?5NONWALL?5?$AA@ DB '   NONWALL ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EDPALEEG@?6CONSTRAINT?5?$CFd?5?5?$AA@
CONST	SEGMENT
??_C@_0BB@EDPALEEG@?6CONSTRAINT?5?$CFd?5?5?$AA@ DB 0aH, 'CONSTRAINT %d  ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IODONLGA@?6CONSTRAINT?5?$CFs?5?5?$AA@
CONST	SEGMENT
??_C@_0BB@IODONLGA@?6CONSTRAINT?5?$CFs?5?5?$AA@ DB 0aH, 'CONSTRAINT %s  ', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _list_constraint
_TEXT	SEGMENT
_cnum$ = 8						; size = 4
_list_constraint PROC					; COMDAT

; 2607 : { struct constraint *con = get_constraint(cnum);

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _cnum$[ebp]
	push	ebx
	push	esi
	mov	esi, edx
	and	esi, 1073741823				; 3fffffffH
	imul	esi, 176				; 000000b0H
	add	esi, DWORD PTR _web+652

; 2608 :   int j;
; 2609 :   
; 2610 :   if ( con->attr & NAMED_THING )

	xor	ecx, ecx
	mov	eax, DWORD PTR [esi+32]
	and	eax, 512				; 00000200H
	or	eax, ecx
	push	edi
	je	SHORT $LN16@list_const

; 2611 :      sprintf(msg,"\nCONSTRAINT %s  ",con->name);

	mov	eax, DWORD PTR _msg
	push	esi
	push	OFFSET ??_C@_0BB@IODONLGA@?6CONSTRAINT?5?$CFs?5?5?$AA@
	push	eax
	jmp	SHORT $LN23@list_const
$LN16@list_const:

; 2612 :   else sprintf(msg,"\nCONSTRAINT %d  ",cnum); 

	mov	ecx, DWORD PTR _msg
	push	edx
	push	OFFSET ??_C@_0BB@EDPALEEG@?6CONSTRAINT?5?$CFd?5?5?$AA@
	push	ecx
$LN23@list_const:
	call	_sprintf

; 2613 :   outstring(msg); 

	mov	edx, DWORD PTR _msg
	add	esp, 12					; 0000000cH
	push	edx
	call	_outstring

; 2614 :   if ( con->attr & NONWALL     )  outstring("   NONWALL "); 

	mov	eax, DWORD PTR [esi+32]
	and	eax, 1024				; 00000400H
	xor	ecx, ecx
	add	esp, 4
	or	eax, ecx
	je	SHORT $LN14@list_const
	push	OFFSET ??_C@_0M@OONNJGKK@?5?5?5NONWALL?5?$AA@
	call	_outstring
	add	esp, 4
$LN14@list_const:

; 2615 :   if ( con->attr & B_CONVEX    )  outstring("   CONVEX "); 

	mov	eax, DWORD PTR [esi+32]
	and	eax, 8
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN13@list_const
	push	OFFSET ??_C@_0L@BDPJCCPL@?5?5?5CONVEX?5?$AA@
	call	_outstring
	add	esp, 4
$LN13@list_const:

; 2616 :   if ( con->attr & NONNEGATIVE )  outstring("  NONNEGATIVE"); 

	mov	eax, DWORD PTR [esi+32]
	and	eax, 2
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN12@list_const
	push	OFFSET ??_C@_0O@LAPKBKBN@?5?5NONNEGATIVE?$AA@
	call	_outstring
	add	esp, 4
$LN12@list_const:

; 2617 :   if ( con->attr & NONPOSITIVE )  outstring("  NONPOSITIVE"); 

	mov	eax, DWORD PTR [esi+32]
	and	eax, 1
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN11@list_const
	push	OFFSET ??_C@_0O@DKPKKFIG@?5?5NONPOSITIVE?$AA@
	call	_outstring
	add	esp, 4
$LN11@list_const:

; 2618 :   if ( con->attr & GLOBAL      )  outstring("  GLOBAL"); 

	mov	eax, DWORD PTR [esi+32]
	and	eax, 4
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN10@list_const
	push	OFFSET ??_C@_08FNGNDCJE@?5?5GLOBAL?$AA@
	call	_outstring
	add	esp, 4
$LN10@list_const:

; 2619 :   if ( con->content_rank ) 

	mov	eax, DWORD PTR [esi+172]
	test	eax, eax
	je	SHORT $LN9@list_const

; 2620 :   { sprintf(msg," content_rank %d\n",con->content_rank);

	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0BC@ECBBFNLL@?5content_rank?5?$CFd?6?$AA@
	push	eax
	call	_sprintf

; 2621 :     outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 16					; 00000010H
$LN9@list_const:

; 2622 :   }
; 2623 : 
; 2624 :   outstring("\nFUNCTION:  ");

	push	OFFSET ??_C@_0N@FAGCFNHM@?6FUNCTION?3?5?5?$AA@
	call	_outstring

; 2625 :   outstring(print_express(con->formula,'X'));

	mov	edx, DWORD PTR [esi+40]
	push	88					; 00000058H
	push	edx
	call	_print_express
	push	eax
	call	_outstring

; 2626 :   outstring("\n"); 

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring

; 2627 : 
; 2628 :   if ( (con->attr & CON_ENERGY)  )

	mov	eax, DWORD PTR [esi+32]
	and	eax, 64					; 00000040H
	xor	ecx, ecx
	add	esp, 20					; 00000014H
	or	eax, ecx
	je	SHORT $LN5@list_const

; 2629 :   { outstring("ENERGY \n");

	push	OFFSET ??_C@_08HIOFOEPP@ENERGY?5?6?$AA@
	call	_outstring

; 2630 :     for ( j = 0 ; j < con->compcount ; j++ )

	xor	eax, eax
	add	esp, 4
	cmp	DWORD PTR [esi+44], eax
	jle	SHORT $LN5@list_const

; 2629 :   { outstring("ENERGY \n");

	lea	ebx, DWORD PTR [esi+48]
$LL7@list_const:

; 2631 :     { sprintf(msg,"E%1d: ",j+1); outstring(msg); 

	lea	edi, DWORD PTR [eax+1]
	mov	eax, DWORD PTR _msg
	push	edi
	push	OFFSET ??_C@_06LHLMFLFM@E?$CF1d?3?5?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring

; 2632 :       outstring(print_express(con->envect[j],'X'));

	mov	edx, DWORD PTR [ebx]
	push	88					; 00000058H
	push	edx
	call	_print_express
	push	eax
	call	_outstring

; 2633 :       outstring("\n"); 

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	mov	eax, edi
	add	esp, 32					; 00000020H
	add	ebx, 4
	cmp	eax, DWORD PTR [esi+44]
	jl	SHORT $LL7@list_const
$LN5@list_const:

; 2634 :     }
; 2635 :   }
; 2636 :   if ( con->attr & CON_CONTENT )

	mov	eax, DWORD PTR [esi+32]
	and	eax, 128				; 00000080H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN1@list_const

; 2637 :   { outstring("CONTENT \n");

	push	OFFSET ??_C@_09LNMFLBOP@CONTENT?5?6?$AA@
	call	_outstring

; 2638 :     for ( j = 0 ; j < con->compcount ; j++ )

	xor	eax, eax
	add	esp, 4
	cmp	DWORD PTR [esi+44], eax
	jle	SHORT $LN1@list_const

; 2637 :   { outstring("CONTENT \n");

	lea	ebx, DWORD PTR [esi+108]
	npad	3
$LL3@list_const:

; 2639 :     { sprintf(msg,"C%1d: ",j+1); outstring(msg); 

	lea	edi, DWORD PTR [eax+1]
	mov	eax, DWORD PTR _msg
	push	edi
	push	OFFSET ??_C@_06NEGMGOGG@C?$CF1d?3?5?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring

; 2640 :       outstring(print_express(con->convect[j],'X'));

	mov	edx, DWORD PTR [ebx]
	push	88					; 00000058H
	push	edx
	call	_print_express
	push	eax
	call	_outstring

; 2641 :       outstring("\n"); 

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	mov	eax, edi
	add	esp, 32					; 00000020H
	add	ebx, 4
	cmp	eax, DWORD PTR [esi+44]
	jl	SHORT $LL3@list_const
$LN1@list_const:
	pop	edi
	pop	esi
	pop	ebx

; 2642 :     }
; 2643 :   }
; 2644 : } // end list_constraint()

	pop	ebp
	ret	0
_list_constraint ENDP
_TEXT	ENDS
PUBLIC	??_C@_06LBLFKGFC@X?$CF1d?3?5?$AA@		; `string'
PUBLIC	??_C@_0BC@ENBJLDND@?5PARTNER_HITTING?5?$AA@	; `string'
PUBLIC	??_C@_09OICPGMJM@?5NONWALL?5?$AA@		; `string'
PUBLIC	??_C@_07OFNALLLM@?5CONVEX?$AA@			; `string'
PUBLIC	??_C@_0BM@JOEGMPF@?6BOUNDARY?5?$CFd?5?5PARAMETERS?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BM@DOCHIJMD@?6BOUNDARY?5?$CFs?5?5PARAMETERS?5?$CFd?$AA@ ; `string'
PUBLIC	_list_boundary
;	COMDAT ??_C@_06LBLFKGFC@X?$CF1d?3?5?$AA@
CONST	SEGMENT
??_C@_06LBLFKGFC@X?$CF1d?3?5?$AA@ DB 'X%1d: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ENBJLDND@?5PARTNER_HITTING?5?$AA@
CONST	SEGMENT
??_C@_0BC@ENBJLDND@?5PARTNER_HITTING?5?$AA@ DB ' PARTNER_HITTING ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OICPGMJM@?5NONWALL?5?$AA@
CONST	SEGMENT
??_C@_09OICPGMJM@?5NONWALL?5?$AA@ DB ' NONWALL ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OFNALLLM@?5CONVEX?$AA@
CONST	SEGMENT
??_C@_07OFNALLLM@?5CONVEX?$AA@ DB ' CONVEX', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JOEGMPF@?6BOUNDARY?5?$CFd?5?5PARAMETERS?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BM@JOEGMPF@?6BOUNDARY?5?$CFd?5?5PARAMETERS?5?$CFd?$AA@ DB 0aH, 'BO'
	DB	'UNDARY %d  PARAMETERS %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DOCHIJMD@?6BOUNDARY?5?$CFs?5?5PARAMETERS?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BM@DOCHIJMD@?6BOUNDARY?5?$CFs?5?5PARAMETERS?5?$CFd?$AA@ DB 0aH, 'B'
	DB	'OUNDARY %s  PARAMETERS %d', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _list_boundary
_TEXT	SEGMENT
_bnum$ = 8						; size = 4
_list_boundary PROC					; COMDAT

; 2654 : { struct boundary * bdry = web.boundaries + bnum;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _bnum$[ebp]
	push	ebx
	push	esi
	mov	esi, edx
	imul	esi, 136				; 00000088H
	add	esi, DWORD PTR _web+776

; 2655 :   int j;
; 2656 : 
; 2657 :   if ( bdry->attr & NAMED_THING )

	xor	ecx, ecx
	mov	eax, DWORD PTR [esi+32]
	and	eax, 512				; 00000200H
	or	eax, ecx

; 2658 :      sprintf(msg,"\nBOUNDARY %s  PARAMETERS %d",bdry->name,bdry->pcount); 

	mov	eax, DWORD PTR [esi+40]
	mov	ecx, DWORD PTR _msg
	push	edi
	push	eax
	je	SHORT $LN17@list_bound
	push	esi
	push	OFFSET ??_C@_0BM@DOCHIJMD@?6BOUNDARY?5?$CFs?5?5PARAMETERS?5?$CFd?$AA@
	jmp	SHORT $LN26@list_bound
$LN17@list_bound:

; 2659 :   else sprintf(msg,"\nBOUNDARY %d  PARAMETERS %d",bnum,bdry->pcount); 

	push	edx
	push	OFFSET ??_C@_0BM@JOEGMPF@?6BOUNDARY?5?$CFd?5?5PARAMETERS?5?$CFd?$AA@
$LN26@list_bound:
	push	ecx
	call	_sprintf

; 2660 :   outstring(msg); 

	mov	edx, DWORD PTR _msg
	add	esp, 16					; 00000010H
	push	edx
	call	_outstring

; 2661 :   if ( bdry->attr & B_CONVEX ) outstring(" CONVEX");

	mov	eax, DWORD PTR [esi+32]
	and	eax, 8
	xor	ecx, ecx
	add	esp, 4
	or	eax, ecx
	je	SHORT $LN15@list_bound
	push	OFFSET ??_C@_07OFNALLLM@?5CONVEX?$AA@
	call	_outstring
	add	esp, 4
$LN15@list_bound:

; 2662 :   if ( bdry->attr & NONWALL  ) outstring(" NONWALL ");

	mov	eax, DWORD PTR [esi+32]
	and	eax, 1024				; 00000400H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN14@list_bound
	push	OFFSET ??_C@_09OICPGMJM@?5NONWALL?5?$AA@
	call	_outstring
	add	esp, 4
$LN14@list_bound:

; 2663 :   if ( bdry->attr & PARTNER_HITTING ) outstring(" PARTNER_HITTING ");

	mov	eax, DWORD PTR [esi+32]
	and	eax, 2048				; 00000800H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN13@list_bound
	push	OFFSET ??_C@_0BC@ENBJLDND@?5PARTNER_HITTING?5?$AA@
	call	_outstring
	add	esp, 4
$LN13@list_bound:

; 2664 :   if ( bdry->content_rank ) 

	mov	eax, DWORD PTR [esi+128]
	test	eax, eax
	je	SHORT $LN12@list_bound

; 2665 :   { sprintf(msg," content_rank %d\n",bdry->content_rank);

	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0BC@ECBBFNLL@?5content_rank?5?$CFd?6?$AA@
	push	eax
	call	_sprintf

; 2666 :     outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 16					; 00000010H
$LN12@list_bound:

; 2667 :   }
; 2668 :   outstring("\n"); 

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring

; 2669 :   for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	add	esp, 4
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN9@list_bound

; 2667 :   }
; 2668 :   outstring("\n"); 

	lea	ebx, DWORD PTR [esi+48]
	npad	8
$LL11@list_bound:

; 2670 :   { sprintf(msg,"X%1d: ",j+1); outstring(msg); 

	mov	edx, DWORD PTR _msg
	lea	edi, DWORD PTR [eax+1]
	push	edi
	push	OFFSET ??_C@_06LBLFKGFC@X?$CF1d?3?5?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring

; 2671 :     outstring(print_express(bdry->coordf[j],'P'));

	mov	ecx, DWORD PTR [ebx]
	push	80					; 00000050H
	push	ecx
	call	_print_express
	push	eax
	call	_outstring

; 2672 :     outstring("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	mov	eax, edi
	add	esp, 32					; 00000020H
	add	ebx, 4
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LL11@list_bound
$LN9@list_bound:

; 2673 :   }
; 2674 : 
; 2675 :   if ( (bdry->attr & CON_ENERGY)  )

	mov	eax, DWORD PTR [esi+32]
	and	eax, 64					; 00000040H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN5@list_bound

; 2676 :   { outstring("ENERGY \n");

	push	OFFSET ??_C@_08HIOFOEPP@ENERGY?5?6?$AA@
	call	_outstring

; 2677 :     for ( j = 0 ; j < bdry->compcount ; j++ )

	xor	eax, eax
	add	esp, 4
	cmp	DWORD PTR [esi+120], eax
	jle	SHORT $LN5@list_bound

; 2676 :   { outstring("ENERGY \n");

	lea	ebx, DWORD PTR [esi+72]
	npad	3
$LL7@list_bound:

; 2678 :     { sprintf(msg,"E%1d: ",j+1); outstring(msg); 

	mov	edx, DWORD PTR _msg
	lea	edi, DWORD PTR [eax+1]
	push	edi
	push	OFFSET ??_C@_06LHLMFLFM@E?$CF1d?3?5?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring

; 2679 :       outstring(print_express(bdry->envect[j],'X'));

	mov	ecx, DWORD PTR [ebx]
	push	88					; 00000058H
	push	ecx
	call	_print_express
	push	eax
	call	_outstring

; 2680 :       outstring("\n"); 

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	mov	eax, edi
	add	esp, 32					; 00000020H
	add	ebx, 4
	cmp	eax, DWORD PTR [esi+120]
	jl	SHORT $LL7@list_bound
$LN5@list_bound:

; 2681 :     }
; 2682 :   }
; 2683 :   if ( bdry->attr & CON_CONTENT )

	mov	eax, DWORD PTR [esi+32]
	and	eax, 128				; 00000080H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN1@list_bound

; 2684 :   { outstring("CONTENT \n");

	push	OFFSET ??_C@_09LNMFLBOP@CONTENT?5?6?$AA@
	call	_outstring

; 2685 :     for ( j = 0 ; j < bdry->compcount ; j++ )

	xor	eax, eax
	add	esp, 4
	cmp	DWORD PTR [esi+120], eax
	jle	SHORT $LN1@list_bound

; 2684 :   { outstring("CONTENT \n");

	lea	ebx, DWORD PTR [esi+96]
	npad	4
$LL3@list_bound:

; 2686 :     { sprintf(msg,"C%1d: ",j+1); outstring(msg); 

	mov	edx, DWORD PTR _msg
	lea	edi, DWORD PTR [eax+1]
	push	edi
	push	OFFSET ??_C@_06NEGMGOGG@C?$CF1d?3?5?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring

; 2687 :       outstring(print_express(bdry->convect[j],'X'));

	mov	ecx, DWORD PTR [ebx]
	push	88					; 00000058H
	push	ecx
	call	_print_express
	push	eax
	call	_outstring

; 2688 :       outstring("\n"); 

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	mov	eax, edi
	add	esp, 32					; 00000020H
	add	ebx, 4
	cmp	eax, DWORD PTR [esi+120]
	jl	SHORT $LL3@list_bound
$LN1@list_bound:

; 2689 :     }
; 2690 :   }
; 2691 : 
; 2692 :   outstring("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 2693 : } /* end list_boundaryconstraint() */

	pop	ebp
	ret	0
_list_boundary ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@ENIIBJIJ@?1?1?5End?5forward?5declarations?6?6?$AA@ ; `string'
PUBLIC	??_C@_0BB@FKGMICHB@method_instance?5?$AA@	; `string'
PUBLIC	??_C@_09FGGKHCHF@quantity?5?$AA@		; `string'
PUBLIC	??_C@_09ENCBKJCG@boundary?5?$AA@		; `string'
PUBLIC	??_C@_02NCGPMEBG@?$DL?6?$AA@			; `string'
PUBLIC	??_C@_0M@HCINNPA@constraint?5?$AA@		; `string'
PUBLIC	??_C@_0BK@EHJLKCB@?6?1?1?5Forward?5declarations?6?$AA@ ; `string'
PUBLIC	_list_forwards
EXTRN	_isdigit:PROC
;	COMDAT ??_C@_0BO@ENIIBJIJ@?1?1?5End?5forward?5declarations?6?6?$AA@
CONST	SEGMENT
??_C@_0BO@ENIIBJIJ@?1?1?5End?5forward?5declarations?6?6?$AA@ DB '// End f'
	DB	'orward declarations', 0aH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FKGMICHB@method_instance?5?$AA@
CONST	SEGMENT
??_C@_0BB@FKGMICHB@method_instance?5?$AA@ DB 'method_instance ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09FGGKHCHF@quantity?5?$AA@
CONST	SEGMENT
??_C@_09FGGKHCHF@quantity?5?$AA@ DB 'quantity ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09ENCBKJCG@boundary?5?$AA@
CONST	SEGMENT
??_C@_09ENCBKJCG@boundary?5?$AA@ DB 'boundary ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02NCGPMEBG@?$DL?6?$AA@
CONST	SEGMENT
??_C@_02NCGPMEBG@?$DL?6?$AA@ DB ';', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HCINNPA@constraint?5?$AA@
CONST	SEGMENT
??_C@_0M@HCINNPA@constraint?5?$AA@ DB 'constraint ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EHJLKCB@?6?1?1?5Forward?5declarations?6?$AA@
CONST	SEGMENT
??_C@_0BK@EHJLKCB@?6?1?1?5Forward?5declarations?6?$AA@ DB 0aH, '// Forwar'
	DB	'd declarations', 0aH, 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _list_forwards
_TEXT	SEGMENT
_i$ = -4						; size = 4
_list_forwards PROC					; COMDAT

; 2702 : { int i;

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi

; 2703 :   int title_flag = 0;
; 2704 : 
; 2705 : 
; 2706 :   /* constraints */
; 2707 :   for ( i = 0 ; i < web.maxcon ; i++ )

	xor	ebx, ebx
	xor	edi, edi
	cmp	DWORD PTR _web+644, ebx
	jle	SHORT $LN36@list_forwa
	npad	13
$LL39@list_forwa:

; 2708 :   { struct constraint *con = get_constraint(i);

	mov	esi, ebx
	and	esi, 1073741823				; 3fffffffH
	imul	esi, 176				; 000000b0H
	add	esi, DWORD PTR _web+652

; 2709 :     if ( !(con->attr & IN_USE) ) 

	xor	ecx, ecx
	mov	eax, DWORD PTR [esi+32]
	and	eax, 32					; 00000020H
	or	eax, ecx
	je	SHORT $LN22@list_forwa

; 2710 :       continue;
; 2711 :     if ( isdigit(con->name[0]) )

	movsx	eax, BYTE PTR [esi]
	push	eax
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN22@list_forwa

; 2712 :       continue;
; 2713 :     if ( !title_flag )  outstring("\n// Forward declarations\n");

	test	edi, edi
	jne	SHORT $LN18@list_forwa
	push	OFFSET ??_C@_0BK@EHJLKCB@?6?1?1?5Forward?5declarations?6?$AA@
	call	_outstring
	add	esp, 4
$LN18@list_forwa:

; 2714 :     title_flag = 1;
; 2715 :     outstring("constraint ");

	push	OFFSET ??_C@_0M@HCINNPA@constraint?5?$AA@
	mov	edi, 1
	call	_outstring

; 2716 :     outstring(con->name);

	push	esi
	call	_outstring

; 2717 :     outstring(";\n");

	push	OFFSET ??_C@_02NCGPMEBG@?$DL?6?$AA@
	call	_outstring
	add	esp, 12					; 0000000cH
$LN22@list_forwa:

; 2703 :   int title_flag = 0;
; 2704 : 
; 2705 : 
; 2706 :   /* constraints */
; 2707 :   for ( i = 0 ; i < web.maxcon ; i++ )

	inc	ebx
	cmp	ebx, DWORD PTR _web+644
	jl	SHORT $LL39@list_forwa
$LN36@list_forwa:

; 2718 :   }
; 2719 : 
; 2720 :   /* boundaries */
; 2721 :   for ( i = 0 ; i < web.bdrymax ; i++ )

	xor	ebx, ebx
	mov	DWORD PTR _i$[ebp], ebx
	cmp	DWORD PTR _web+768, ebx
	jle	SHORT $LN15@list_forwa
	npad	7
$LL40@list_forwa:

; 2722 :   { struct boundary *bdry = web.boundaries + i;

	mov	ecx, DWORD PTR _web+776

; 2723 :     if ( !(bdry->attr & IN_USE) ) 

	mov	eax, DWORD PTR [ebx+ecx+32]
	lea	esi, DWORD PTR [ebx+ecx]
	and	eax, 32					; 00000020H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN16@list_forwa

; 2724 :       continue;
; 2725 :     if ( isdigit(bdry->name[0]) )

	movsx	edx, BYTE PTR [esi]
	push	edx
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN16@list_forwa

; 2726 :       continue;
; 2727 :     if ( !title_flag )  outstring("\n// Forward declarations\n");

	test	edi, edi
	jne	SHORT $LN12@list_forwa
	push	OFFSET ??_C@_0BK@EHJLKCB@?6?1?1?5Forward?5declarations?6?$AA@
	call	_outstring
	add	esp, 4
$LN12@list_forwa:

; 2728 :     title_flag = 1;
; 2729 :     outstring("boundary ");

	push	OFFSET ??_C@_09ENCBKJCG@boundary?5?$AA@
	mov	edi, 1
	call	_outstring

; 2730 :     outstring(bdry->name);

	push	esi
	call	_outstring

; 2731 :     outstring(";\n");

	push	OFFSET ??_C@_02NCGPMEBG@?$DL?6?$AA@
	call	_outstring
	add	esp, 12					; 0000000cH
$LN16@list_forwa:

; 2718 :   }
; 2719 : 
; 2720 :   /* boundaries */
; 2721 :   for ( i = 0 ; i < web.bdrymax ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	add	ebx, 136				; 00000088H
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _web+768
	jl	SHORT $LL40@list_forwa
$LN15@list_forwa:

; 2732 :   }  
; 2733 :  
; 2734 :   /* quantities */
; 2735 :   for ( i = 0 ; i < gen_quant_count ; i++ )

	xor	ebx, ebx
	mov	DWORD PTR _i$[ebp], ebx
	cmp	DWORD PTR _web+5528, ebx
	jle	SHORT $LN9@list_forwa
	npad	5
$LL41@list_forwa:

; 2736 :   { struct gen_quant *q = GEN_QUANT(i);

	mov	eax, DWORD PTR _gen_quant_list

; 2737 :     if ( q->flags & (Q_DELETED|DEFAULT_QUANTITY) )

	test	DWORD PTR [ebx+eax+136], 532480		; 00082000H
	lea	esi, DWORD PTR [ebx+eax]
	jne	SHORT $LN10@list_forwa

; 2738 :        continue;
; 2739 :     if ( !title_flag )  outstring("\n// Forward declarations\n");

	test	edi, edi
	jne	SHORT $LN7@list_forwa
	push	OFFSET ??_C@_0BK@EHJLKCB@?6?1?1?5Forward?5declarations?6?$AA@
	call	_outstring
	add	esp, 4
$LN7@list_forwa:

; 2740 :     title_flag = 1;
; 2741 :     outstring("quantity ");

	push	OFFSET ??_C@_09FGGKHCHF@quantity?5?$AA@
	mov	edi, 1
	call	_outstring

; 2742 :     outstring(q->name);

	push	esi
	call	_outstring

; 2743 :     outstring(";\n");

	push	OFFSET ??_C@_02NCGPMEBG@?$DL?6?$AA@
	call	_outstring
	add	esp, 12					; 0000000cH
$LN10@list_forwa:

; 2732 :   }  
; 2733 :  
; 2734 :   /* quantities */
; 2735 :   for ( i = 0 ; i < gen_quant_count ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	add	ebx, 368				; 00000170H
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _web+5528
	jl	SHORT $LL41@list_forwa
$LN9@list_forwa:

; 2744 :   }
; 2745 :  
; 2746 :   /* method_instances */
; 2747 :   for ( i = LOW_INST ; i < meth_inst_count ; i++ )

	mov	ebx, 1
	cmp	DWORD PTR _web+5560, ebx
	jle	SHORT $LN4@list_forwa
	npad	6
$LL6@list_forwa:

; 2748 :   { struct method_instance *mi = METH_INSTANCE(i);

	mov	eax, ebx
	cdq
	mov	esi, eax
	xor	esi, edx
	sub	esi, edx
	imul	esi, 2928				; 00000b70H
	add	esi, DWORD PTR _meth_inst_list

; 2749 :     if ( mi->flags & (Q_DELETED|IMPLICIT_INSTANCE|DEFAULT_INSTANCE) )

	test	DWORD PTR [esi+140], 6815744		; 00680000H
	jne	SHORT $LN5@list_forwa

; 2750 :       continue;
; 2751 :     if ( !title_flag )  outstring("\n// Forward declarations\n");

	test	edi, edi
	jne	SHORT $LN2@list_forwa
	push	OFFSET ??_C@_0BK@EHJLKCB@?6?1?1?5Forward?5declarations?6?$AA@
	call	_outstring
	add	esp, 4
$LN2@list_forwa:

; 2752 :     title_flag = 1;
; 2753 :     outstring("method_instance ");

	push	OFFSET ??_C@_0BB@FKGMICHB@method_instance?5?$AA@
	mov	edi, 1
	call	_outstring

; 2754 :     outstring(mi->name);

	push	esi
	call	_outstring

; 2755 :     outstring(";\n");

	push	OFFSET ??_C@_02NCGPMEBG@?$DL?6?$AA@
	call	_outstring
	add	esp, 12					; 0000000cH
$LN5@list_forwa:

; 2744 :   }
; 2745 :  
; 2746 :   /* method_instances */
; 2747 :   for ( i = LOW_INST ; i < meth_inst_count ; i++ )

	inc	ebx
	cmp	ebx, DWORD PTR _web+5560
	jl	SHORT $LL6@list_forwa
$LN4@list_forwa:

; 2756 :   }
; 2757 : 
; 2758 :   if ( title_flag )

	test	edi, edi
	pop	edi
	pop	esi
	pop	ebx
	je	SHORT $LN1@list_forwa

; 2759 :      outstring("// End forward declarations\n\n");

	push	OFFSET ??_C@_0BO@ENIIBJIJ@?1?1?5End?5forward?5declarations?6?6?$AA@
	call	_outstring
	add	esp, 4
$LN1@list_forwa:

; 2760 : 
; 2761 : } /* end list_forwards() */

	mov	esp, ebp
	pop	ebp
	ret	0
_list_forwards ENDP
_TEXT	ENDS
PUBLIC	??_C@_05MBEAKHGM@c?$CFd?3?5?$AA@		; `string'
PUBLIC	??_C@_0CA@KGMEHLCD@?6hessian_special_normal_vector?6?$AA@ ; `string'
PUBLIC	??_C@_0L@EMLBJNPP@MOBILITY?3?5?$AA@		; `string'
PUBLIC	??_C@_0BB@CFIAJAFB@MOBILITY_TENSOR?6?$AA@	; `string'
PUBLIC	??_C@_0BA@IOIIIKB@slice_coeff?5?$DN?5?$HL?$AA@	; `string'
PUBLIC	??_C@_03LAJGDFPO@?$HN?6?6?$AA@			; `string'
PUBLIC	??_C@_05NJOHAKMJ@?$CF8?45f?$AA@			; `string'
PUBLIC	??_C@_02PNCCDJFE@?0?$HL?$AA@			; `string'
PUBLIC	??_C@_0P@LLOBJGMC@clip_coeff?5?$DN?5?$HL?$AA@	; `string'
PUBLIC	??_C@_09FAICKIOG@?$CF18?415f?5?5?$AA@		; `string'
PUBLIC	??_C@_0O@LPABLJLG@VIEW_MATRIX?5?6?$AA@		; `string'
PUBLIC	??_C@_0CI@HKOFEKJL@?5?1?1?5function?5definition?5in?5READ?5@ ; `string'
PUBLIC	??_C@_0CC@JDLNKOIA@?6?1?1Extra?5attributes?5for?5elements@ ; `string'
PUBLIC	??_C@_07IFJFLHJK@METRIC?6?$AA@			; `string'
PUBLIC	??_C@_0BC@EEACCLMG@CONFORMAL_METRIC?6?$AA@	; `string'
PUBLIC	??_C@_0P@GFGAOLIE@KLEIN_METRIC?6?6?$AA@		; `string'
PUBLIC	??_C@_0BE@JIAEIGGF@SYMMETRIC_CONTENT?6?6?$AA@	; `string'
PUBLIC	??_C@_0BP@ONGIFHGD@CONSTRAINT_TOLERANCE?3?5?$CF2?415g?6?6?$AA@ ; `string'
PUBLIC	??_C@_0BI@KLEEHONJ@INTEGRAL_ORDER_2D?3?5?$CFd?6?6?$AA@ ; `string'
PUBLIC	??_C@_0BI@JCMJECBM@INTEGRAL_ORDER_1D?3?5?$CFd?6?6?$AA@ ; `string'
PUBLIC	??_C@_0BG@IJFNEIMI@SCALE_LIMIT?3?5?$CF2?415g?6?6?$AA@ ; `string'
PUBLIC	??_C@_0BD@LNJOLKLL@PRESSURE?3?5?$CF2?415g?6?6?$AA@ ; `string'
PUBLIC	??_C@_0BG@IAEPDHA@TEMPERATURE?3?5?$CF2?415g?6?6?$AA@ ; `string'
PUBLIC	__real@3fa999999999999a
PUBLIC	??_C@_08DBNILKDG@JIGGLE?6?6?$AA@		; `string'
PUBLIC	??_C@_0BG@IKMCNICP@AREA_NORMALIZATION?5?6?6?$AA@ ; `string'
PUBLIC	??_C@_0BH@CIAOINJD@GAP_CONSTANT?3?5?$CF2?415g?6?6?$AA@ ; `string'
PUBLIC	??_C@_0BB@HOHOCNJJ@PHASEFILE?5?$CC?$CFs?$CC?6?6?$AA@ ; `string'
PUBLIC	??_C@_0BD@DAHNFEEE@WULFF?3?5?5?5?5?5?5?$CC?$CFs?$CC?6?6?$AA@ ; `string'
PUBLIC	??_C@_0CC@OBFFBDJB@MEAN_CURVATURE_INTEGRAL?3?5?$CF2?415g?6@ ; `string'
PUBLIC	??_C@_0CE@OAJLHIGK@SQUARE_GAUSSIAN_CURVATURE?3?5?$CF2?415@ ; `string'
PUBLIC	??_C@_0BL@CAKAJBAB@SQUARE_CURVATURE?3?5?$CF2?415g?6?6?$AA@ ; `string'
PUBLIC	??_C@_0O@IEJLEOOO@RUNGE_KUTTA?6?6?$AA@		; `string'
PUBLIC	??_C@_0BA@CIKNEOLK@TOTAL_TIME?5?$CFg?6?6?$AA@	; `string'
PUBLIC	??_C@_0BD@LKOLFBEC@NORMAL_CURVATURE?6?6?$AA@	; `string'
PUBLIC	??_C@_0BF@IOALINFA@BOUNDARY_CURVATURE?6?6?$AA@	; `string'
PUBLIC	??_C@_0BB@BGMDJGGK@EFFECTIVE_AREA?6?6?$AA@	; `string'
PUBLIC	??_C@_0BC@BIBJBPCM@AUTOPOP_QUARTIC?6?6?$AA@	; `string'
PUBLIC	??_C@_0BE@HHIMCCOD@IMMEDIATE_AUTOPOP?6?6?$AA@	; `string'
PUBLIC	??_C@_09NMLPKCBD@AUTOPOP?6?6?$AA@		; `string'
PUBLIC	??_C@_0BB@JFCOMANM@KEEP_ORIGINALS?6?6?$AA@	; `string'
PUBLIC	??_C@_0BD@NGBPAK@HOMOTHETY?5?$CF2?415g?6?6?$AA@	; `string'
PUBLIC	??_C@_0BC@DJLJCMJJ@AUTOCHOP?5?$CF2?415g?6?6?$AA@ ; `string'
PUBLIC	??_C@_0BE@DFKJHDFE@DIFFUSION?3?5?$CF2?415g?6?6?$AA@ ; `string'
PUBLIC	??_C@_0BL@JGJLLNJ@GRAVITY_CONSTANT?3?5?$CF2?415g?6?6?$AA@ ; `string'
PUBLIC	??_C@_0BH@OGDALPNK@MERIT_FACTOR?3?5?$CF2?415g?6?6?$AA@ ; `string'
PUBLIC	??_C@_09OIDOMPID@?$CF18?415g?5?5?$AA@		; `string'
PUBLIC	??_C@_09ODFKANDG@color?5?$CFs?6?$AA@		; `string'
PUBLIC	??_C@_0BF@IPPJNOKE@VIEW_TRANSFORMS?5?$CFd?5?6?$AA@ ; `string'
PUBLIC	??_C@_02KNHHEEKP@?5?5?$AA@			; `string'
PUBLIC	??_C@_0N@EHDPGBPG@swap_colors?6?$AA@		; `string'
PUBLIC	??_C@_0BP@BMCNFKOA@VIEW_TRANSFORM_GENERATORS?5?$CFd?5?6?$AA@ ; `string'
PUBLIC	??_C@_0BA@CNKDAMFM@DISPLAY_ORIGIN?6?$AA@	; `string'
PUBLIC	??_C@_0BB@EBFLEKHE@DISPLAY_PERIODS?6?$AA@	; `string'
PUBLIC	??_C@_09PGGJIFLA@?5?$CF18?415f?5?$AA@		; `string'
PUBLIC	??_C@_0CA@DMIPGGPP@?1?1Numerical?5values?5of?5periods?3?6?$AA@ ; `string'
PUBLIC	??_C@_08MMAELNAF@PERIODS?6?$AA@			; `string'
PUBLIC	??_C@_06GBBCEOME@TORUS?6?$AA@			; `string'
PUBLIC	??_C@_0O@FGDBGBDP@TORUS_FILLED?6?$AA@		; `string'
PUBLIC	??_C@_03KINFBBJE@?5?$DN?6?$AA@			; `string'
PUBLIC	??_C@_0BD@CJBBFGCH@on_assign_call?5?$CFs?5?$AA@	; `string'
PUBLIC	??_C@_0BB@GLCHCGPD@pscale?5?$DN?5?$CF2?415g?5?$AA@ ; `string'
PUBLIC	??_C@_0BB@IPLAKHJ@pdelta?5?$DN?5?$CF2?415g?5?$AA@ ; `string'
PUBLIC	??_C@_09DDONMAAP@?$DN?5?$CF2?415g?5?$AA@	; `string'
PUBLIC	??_C@_0BJ@PPLBIGMF@OPTIMIZING_PARAMETER?5?$CFs?5?$AA@ ; `string'
PUBLIC	??_C@_0L@IDAJBMND@not?5dumped?$AA@		; `string'
PUBLIC	??_C@_0BG@NFANHLBB@PARAMETER_FILE?5?$CC?$CFs?$CC?5?6?$AA@ ; `string'
PUBLIC	??_C@_0O@ECJEEBNC@PARAMETER?5?$CFs?5?$AA@	; `string'
PUBLIC	??_C@_0BA@JIOIKHHC@SCALE?3?5?$CF2?415g?6?6?$AA@	; `string'
PUBLIC	__real@3fb999999999999a
PUBLIC	??_C@_0BK@GDNNKILE@SCALE?3?5?$CF2?415g?5?5?5?5?5FIXED?6?6?$AA@ ; `string'
PUBLIC	??_C@_0BG@JNDANCND@SYMMETRY_GROUP?5?$CC?$CFs?$CC?6?6?$AA@ ; `string'
PUBLIC	??_C@_0M@JBEBAACA@QUADRATIC?6?6?$AA@		; `string'
PUBLIC	??_C@_0BN@JBDKOCJG@LAGRANGE?6lagrange_order?5?$CFd?6?6?$AA@ ; `string'
PUBLIC	??_C@_08KPMMIMPD@LINEAR?6?6?$AA@		; `string'
PUBLIC	??_C@_0BH@OIIPIMAA@SURFACE_DIMENSION?5?$CFd?6?6?$AA@ ; `string'
PUBLIC	??_C@_0L@IKNDAOIK@SOAPFILM?6?6?$AA@		; `string'
PUBLIC	??_C@_08JCACDBE@STRING?6?6?$AA@			; `string'
PUBLIC	??_C@_0BE@PDGPOHJF@SPACE_DIMENSION?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_0BI@LDMHEIAB@SIMPLEX_REPRESENTATION?6?$AA@ ; `string'
PUBLIC	??_C@_0BD@MAEFDIIH@LOAD_LIBRARY?5?$CC?$CFs?$CC?6?$AA@ ; `string'
PUBLIC	??_C@_0BJ@OGJOFBBG@?1?1?5Total?5energy?3?5?$CF2?415g?6?$AA@ ; `string'
PUBLIC	??_C@_0BH@BPBKKFOP@area_method_name?5?$CC?$CFs?$CC?6?$AA@ ; `string'
PUBLIC	??_C@_0BJ@NABFGGHF@length_method_name?5?$CC?$CFs?$CC?6?$AA@ ; `string'
PUBLIC	??_C@_0BJ@BCPFMKMB@volume_method_name?5?$CC?$CFs?$CC?6?$AA@ ; `string'
PUBLIC	??_C@_0CA@MAFMKKJJ@method_instances_predicted?5?$CF6d?6?$AA@ ; `string'
PUBLIC	??_C@_0CA@FJAOFKAI@quantities_predicted?5?5?5?5?5?5?5?$CF6d?6?$AA@ ; `string'
PUBLIC	??_C@_0BM@DBPCIHLL@bodies_predicted?5?5?5?5?5?5?$CF6ld?6?$AA@ ; `string'
PUBLIC	??_C@_0BM@LLGGPLBC@facetedges_predicted?5?5?$CF6ld?6?$AA@ ; `string'
PUBLIC	??_C@_0BM@LIMFEAPC@facets_predicted?5?5?5?5?5?5?$CF6ld?6?$AA@ ; `string'
PUBLIC	??_C@_0BM@NAAPGPA@edges_predicted?5?5?5?5?5?5?5?$CF6ld?6?$AA@ ; `string'
PUBLIC	??_C@_0BM@IPJABLD@vertices_predicted?5?5?5?5?$CF6ld?6?$AA@ ; `string'
PUBLIC	??_C@_0BL@IJLBKKCB@bodies_predicted?5?5?5?5?5?5?$CF6d?6?$AA@ ; `string'
PUBLIC	??_C@_0BL@HIAEOPDK@facetedges_predicted?5?5?$CF6d?6?$AA@ ; `string'
PUBLIC	??_C@_0BL@GNFNADLI@facets_predicted?5?5?5?5?5?5?$CF6d?6?$AA@ ; `string'
PUBLIC	??_C@_0BL@HICEDAAF@edges_predicted?5?5?5?5?5?5?5?$CF6d?6?$AA@ ; `string'
PUBLIC	??_C@_0BL@IBIEGAMC@vertices_predicted?5?5?5?5?$CF6d?6?$AA@ ; `string'
PUBLIC	??_C@_0BC@LJMBCLLC@mpi_local_bodies?6?$AA@	; `string'
PUBLIC	??_C@_0BA@LDFGFHJK@keep_originals?6?$AA@	; `string'
PUBLIC	??_C@_0N@HHCBBDGL@keep_macros?6?$AA@		; `string'
PUBLIC	??_C@_0BF@KBNGNAIF@suppress_warning?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_0DD@KOIHPCNO@?6Evolver_version?5?$CC?$CFs?$CC?5?5?1?1?5minima@ ; `string'
PUBLIC	??_C@_0BF@HFBDDGKE@?1?1?5datafilename?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	_top_dump
EXTRN	_hessian_special_normal_expr:BYTE
EXTRN	_mobility_formula:BYTE
EXTRN	_mobility_tensor:BYTE
EXTRN	_mobility_tensor_flag:DWORD
EXTRN	_mobility_flag:DWORD
EXTRN	_slice_coeff:BYTE
EXTRN	_clip_coeff:BYTE
EXTRN	_view:DWORD
EXTRN	_klein_metric_flag:DWORD
EXTRN	_phase_file_name:BYTE
EXTRN	_total_time:QWORD
EXTRN	_autopop_quartic_flag:DWORD
EXTRN	_immediate_autopop_flag:DWORD
EXTRN	_homothety_target:QWORD
EXTRN	_autochop_length:QWORD
EXTRN	_view_transforms:DWORD
EXTRN	_transform_colors:DWORD
EXTRN	_view_transform_gens_expr:DWORD
EXTRN	_transform_gen_swap:DWORD
EXTRN	_transform_gen_count:DWORD
EXTRN	_torus_display_period_expr:BYTE
EXTRN	_torus_period_expr:BYTE
EXTRN	_reflevel:DWORD
EXTRN	_sqgauss_param:DWORD
EXTRN	_mean_curvature_param:DWORD
EXTRN	_square_curvature_param:DWORD
EXTRN	_square_curvature_flag:DWORD
EXTRN	_symmetry_name:DWORD
EXTRN	_dll_list:BYTE
EXTRN	_area_method_name:BYTE
EXTRN	_length_method_name:BYTE
EXTRN	_volume_method_name:BYTE
EXTRN	_mpi_local_bodies_flag:DWORD
EXTRN	_match_id_flag:DWORD
EXTRN	_warnings_suppressed:BYTE
EXTRN	_warnings_suppressed_count:DWORD
EXTRN	_needed_version:BYTE
EXTRN	_datafilename:BYTE
;	COMDAT ??_C@_05MBEAKHGM@c?$CFd?3?5?$AA@
CONST	SEGMENT
??_C@_05MBEAKHGM@c?$CFd?3?5?$AA@ DB 'c%d: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KGMEHLCD@?6hessian_special_normal_vector?6?$AA@
CONST	SEGMENT
??_C@_0CA@KGMEHLCD@?6hessian_special_normal_vector?6?$AA@ DB 0aH, 'hessia'
	DB	'n_special_normal_vector', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EMLBJNPP@MOBILITY?3?5?$AA@
CONST	SEGMENT
??_C@_0L@EMLBJNPP@MOBILITY?3?5?$AA@ DB 'MOBILITY: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CFIAJAFB@MOBILITY_TENSOR?6?$AA@
CONST	SEGMENT
??_C@_0BB@CFIAJAFB@MOBILITY_TENSOR?6?$AA@ DB 'MOBILITY_TENSOR', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IOIIIKB@slice_coeff?5?$DN?5?$HL?$AA@
CONST	SEGMENT
??_C@_0BA@IOIIIKB@slice_coeff?5?$DN?5?$HL?$AA@ DB 'slice_coeff = {', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03LAJGDFPO@?$HN?6?6?$AA@
CONST	SEGMENT
??_C@_03LAJGDFPO@?$HN?6?6?$AA@ DB '}', 0aH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05NJOHAKMJ@?$CF8?45f?$AA@
CONST	SEGMENT
??_C@_05NJOHAKMJ@?$CF8?45f?$AA@ DB '%8.5f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02PNCCDJFE@?0?$HL?$AA@
CONST	SEGMENT
??_C@_02PNCCDJFE@?0?$HL?$AA@ DB ',{', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LLOBJGMC@clip_coeff?5?$DN?5?$HL?$AA@
CONST	SEGMENT
??_C@_0P@LLOBJGMC@clip_coeff?5?$DN?5?$HL?$AA@ DB 'clip_coeff = {', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09FAICKIOG@?$CF18?415f?5?5?$AA@
CONST	SEGMENT
??_C@_09FAICKIOG@?$CF18?415f?5?5?$AA@ DB '%18.15f  ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LPABLJLG@VIEW_MATRIX?5?6?$AA@
CONST	SEGMENT
??_C@_0O@LPABLJLG@VIEW_MATRIX?5?6?$AA@ DB 'VIEW_MATRIX ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@HKOFEKJL@?5?1?1?5function?5definition?5in?5READ?5@
CONST	SEGMENT
??_C@_0CI@HKOFEKJL@?5?1?1?5function?5definition?5in?5READ?5@ DB ' // func'
	DB	'tion definition in READ section', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@JDLNKOIA@?6?1?1Extra?5attributes?5for?5elements@
CONST	SEGMENT
??_C@_0CC@JDLNKOIA@?6?1?1Extra?5attributes?5for?5elements@ DB 0aH, '//Ext'
	DB	'ra attributes for elements', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07IFJFLHJK@METRIC?6?$AA@
CONST	SEGMENT
??_C@_07IFJFLHJK@METRIC?6?$AA@ DB 'METRIC', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EEACCLMG@CONFORMAL_METRIC?6?$AA@
CONST	SEGMENT
??_C@_0BC@EEACCLMG@CONFORMAL_METRIC?6?$AA@ DB 'CONFORMAL_METRIC', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GFGAOLIE@KLEIN_METRIC?6?6?$AA@
CONST	SEGMENT
??_C@_0P@GFGAOLIE@KLEIN_METRIC?6?6?$AA@ DB 'KLEIN_METRIC', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JIAEIGGF@SYMMETRIC_CONTENT?6?6?$AA@
CONST	SEGMENT
??_C@_0BE@JIAEIGGF@SYMMETRIC_CONTENT?6?6?$AA@ DB 'SYMMETRIC_CONTENT', 0aH
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@ONGIFHGD@CONSTRAINT_TOLERANCE?3?5?$CF2?415g?6?6?$AA@
CONST	SEGMENT
??_C@_0BP@ONGIFHGD@CONSTRAINT_TOLERANCE?3?5?$CF2?415g?6?6?$AA@ DB 'CONSTR'
	DB	'AINT_TOLERANCE: %2.15g', 0aH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KLEEHONJ@INTEGRAL_ORDER_2D?3?5?$CFd?6?6?$AA@
CONST	SEGMENT
??_C@_0BI@KLEEHONJ@INTEGRAL_ORDER_2D?3?5?$CFd?6?6?$AA@ DB 'INTEGRAL_ORDER'
	DB	'_2D: %d', 0aH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JCMJECBM@INTEGRAL_ORDER_1D?3?5?$CFd?6?6?$AA@
CONST	SEGMENT
??_C@_0BI@JCMJECBM@INTEGRAL_ORDER_1D?3?5?$CFd?6?6?$AA@ DB 'INTEGRAL_ORDER'
	DB	'_1D: %d', 0aH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IJFNEIMI@SCALE_LIMIT?3?5?$CF2?415g?6?6?$AA@
CONST	SEGMENT
??_C@_0BG@IJFNEIMI@SCALE_LIMIT?3?5?$CF2?415g?6?6?$AA@ DB 'SCALE_LIMIT: %2'
	DB	'.15g', 0aH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LNJOLKLL@PRESSURE?3?5?$CF2?415g?6?6?$AA@
CONST	SEGMENT
??_C@_0BD@LNJOLKLL@PRESSURE?3?5?$CF2?415g?6?6?$AA@ DB 'PRESSURE: %2.15g', 0aH
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IAEPDHA@TEMPERATURE?3?5?$CF2?415g?6?6?$AA@
CONST	SEGMENT
??_C@_0BG@IAEPDHA@TEMPERATURE?3?5?$CF2?415g?6?6?$AA@ DB 'TEMPERATURE: %2.'
	DB	'15g', 0aH, 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT __real@3fa999999999999a
CONST	SEGMENT
__real@3fa999999999999a DQ 03fa999999999999ar	; 0.05
CONST	ENDS
;	COMDAT ??_C@_08DBNILKDG@JIGGLE?6?6?$AA@
CONST	SEGMENT
??_C@_08DBNILKDG@JIGGLE?6?6?$AA@ DB 'JIGGLE', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IKMCNICP@AREA_NORMALIZATION?5?6?6?$AA@
CONST	SEGMENT
??_C@_0BG@IKMCNICP@AREA_NORMALIZATION?5?6?6?$AA@ DB 'AREA_NORMALIZATION ', 0aH
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CIAOINJD@GAP_CONSTANT?3?5?$CF2?415g?6?6?$AA@
CONST	SEGMENT
??_C@_0BH@CIAOINJD@GAP_CONSTANT?3?5?$CF2?415g?6?6?$AA@ DB 'GAP_CONSTANT: '
	DB	'%2.15g', 0aH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HOHOCNJJ@PHASEFILE?5?$CC?$CFs?$CC?6?6?$AA@
CONST	SEGMENT
??_C@_0BB@HOHOCNJJ@PHASEFILE?5?$CC?$CFs?$CC?6?6?$AA@ DB 'PHASEFILE "%s"', 0aH
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DAHNFEEE@WULFF?3?5?5?5?5?5?5?$CC?$CFs?$CC?6?6?$AA@
CONST	SEGMENT
??_C@_0BD@DAHNFEEE@WULFF?3?5?5?5?5?5?5?$CC?$CFs?$CC?6?6?$AA@ DB 'WULFF:  '
	DB	'    "%s"', 0aH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@OBFFBDJB@MEAN_CURVATURE_INTEGRAL?3?5?$CF2?415g?6@
CONST	SEGMENT
??_C@_0CC@OBFFBDJB@MEAN_CURVATURE_INTEGRAL?3?5?$CF2?415g?6@ DB 'MEAN_CURV'
	DB	'ATURE_INTEGRAL: %2.15g', 0aH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@OAJLHIGK@SQUARE_GAUSSIAN_CURVATURE?3?5?$CF2?415@
CONST	SEGMENT
??_C@_0CE@OAJLHIGK@SQUARE_GAUSSIAN_CURVATURE?3?5?$CF2?415@ DB 'SQUARE_GAU'
	DB	'SSIAN_CURVATURE: %2.15g', 0aH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CAKAJBAB@SQUARE_CURVATURE?3?5?$CF2?415g?6?6?$AA@
CONST	SEGMENT
??_C@_0BL@CAKAJBAB@SQUARE_CURVATURE?3?5?$CF2?415g?6?6?$AA@ DB 'SQUARE_CUR'
	DB	'VATURE: %2.15g', 0aH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IEJLEOOO@RUNGE_KUTTA?6?6?$AA@
CONST	SEGMENT
??_C@_0O@IEJLEOOO@RUNGE_KUTTA?6?6?$AA@ DB 'RUNGE_KUTTA', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CIKNEOLK@TOTAL_TIME?5?$CFg?6?6?$AA@
CONST	SEGMENT
??_C@_0BA@CIKNEOLK@TOTAL_TIME?5?$CFg?6?6?$AA@ DB 'TOTAL_TIME %g', 0aH, 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LKOLFBEC@NORMAL_CURVATURE?6?6?$AA@
CONST	SEGMENT
??_C@_0BD@LKOLFBEC@NORMAL_CURVATURE?6?6?$AA@ DB 'NORMAL_CURVATURE', 0aH, 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IOALINFA@BOUNDARY_CURVATURE?6?6?$AA@
CONST	SEGMENT
??_C@_0BF@IOALINFA@BOUNDARY_CURVATURE?6?6?$AA@ DB 'BOUNDARY_CURVATURE', 0aH
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BGMDJGGK@EFFECTIVE_AREA?6?6?$AA@
CONST	SEGMENT
??_C@_0BB@BGMDJGGK@EFFECTIVE_AREA?6?6?$AA@ DB 'EFFECTIVE_AREA', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BIBJBPCM@AUTOPOP_QUARTIC?6?6?$AA@
CONST	SEGMENT
??_C@_0BC@BIBJBPCM@AUTOPOP_QUARTIC?6?6?$AA@ DB 'AUTOPOP_QUARTIC', 0aH, 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HHIMCCOD@IMMEDIATE_AUTOPOP?6?6?$AA@
CONST	SEGMENT
??_C@_0BE@HHIMCCOD@IMMEDIATE_AUTOPOP?6?6?$AA@ DB 'IMMEDIATE_AUTOPOP', 0aH
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_09NMLPKCBD@AUTOPOP?6?6?$AA@
CONST	SEGMENT
??_C@_09NMLPKCBD@AUTOPOP?6?6?$AA@ DB 'AUTOPOP', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JFCOMANM@KEEP_ORIGINALS?6?6?$AA@
CONST	SEGMENT
??_C@_0BB@JFCOMANM@KEEP_ORIGINALS?6?6?$AA@ DB 'KEEP_ORIGINALS', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NGBPAK@HOMOTHETY?5?$CF2?415g?6?6?$AA@
CONST	SEGMENT
??_C@_0BD@NGBPAK@HOMOTHETY?5?$CF2?415g?6?6?$AA@ DB 'HOMOTHETY %2.15g', 0aH
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DJLJCMJJ@AUTOCHOP?5?$CF2?415g?6?6?$AA@
CONST	SEGMENT
??_C@_0BC@DJLJCMJJ@AUTOCHOP?5?$CF2?415g?6?6?$AA@ DB 'AUTOCHOP %2.15g', 0aH
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DFKJHDFE@DIFFUSION?3?5?$CF2?415g?6?6?$AA@
CONST	SEGMENT
??_C@_0BE@DFKJHDFE@DIFFUSION?3?5?$CF2?415g?6?6?$AA@ DB 'DIFFUSION: %2.15g'
	DB	0aH, 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JGJLLNJ@GRAVITY_CONSTANT?3?5?$CF2?415g?6?6?$AA@
CONST	SEGMENT
??_C@_0BL@JGJLLNJ@GRAVITY_CONSTANT?3?5?$CF2?415g?6?6?$AA@ DB 'GRAVITY_CON'
	DB	'STANT: %2.15g', 0aH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OGDALPNK@MERIT_FACTOR?3?5?$CF2?415g?6?6?$AA@
CONST	SEGMENT
??_C@_0BH@OGDALPNK@MERIT_FACTOR?3?5?$CF2?415g?6?6?$AA@ DB 'MERIT_FACTOR: '
	DB	'%2.15g', 0aH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09OIDOMPID@?$CF18?415g?5?5?$AA@
CONST	SEGMENT
??_C@_09OIDOMPID@?$CF18?415g?5?5?$AA@ DB '%18.15g  ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09ODFKANDG@color?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_09ODFKANDG@color?5?$CFs?6?$AA@ DB 'color %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IPPJNOKE@VIEW_TRANSFORMS?5?$CFd?5?6?$AA@
CONST	SEGMENT
??_C@_0BF@IPPJNOKE@VIEW_TRANSFORMS?5?$CFd?5?6?$AA@ DB 'VIEW_TRANSFORMS %d'
	DB	' ', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02KNHHEEKP@?5?5?$AA@
CONST	SEGMENT
??_C@_02KNHHEEKP@?5?5?$AA@ DB '  ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EHDPGBPG@swap_colors?6?$AA@
CONST	SEGMENT
??_C@_0N@EHDPGBPG@swap_colors?6?$AA@ DB 'swap_colors', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BMCNFKOA@VIEW_TRANSFORM_GENERATORS?5?$CFd?5?6?$AA@
CONST	SEGMENT
??_C@_0BP@BMCNFKOA@VIEW_TRANSFORM_GENERATORS?5?$CFd?5?6?$AA@ DB 'VIEW_TRA'
	DB	'NSFORM_GENERATORS %d ', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CNKDAMFM@DISPLAY_ORIGIN?6?$AA@
CONST	SEGMENT
??_C@_0BA@CNKDAMFM@DISPLAY_ORIGIN?6?$AA@ DB 'DISPLAY_ORIGIN', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EBFLEKHE@DISPLAY_PERIODS?6?$AA@
CONST	SEGMENT
??_C@_0BB@EBFLEKHE@DISPLAY_PERIODS?6?$AA@ DB 'DISPLAY_PERIODS', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PGGJIFLA@?5?$CF18?415f?5?$AA@
CONST	SEGMENT
??_C@_09PGGJIFLA@?5?$CF18?415f?5?$AA@ DB ' %18.15f ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DMIPGGPP@?1?1Numerical?5values?5of?5periods?3?6?$AA@
CONST	SEGMENT
??_C@_0CA@DMIPGGPP@?1?1Numerical?5values?5of?5periods?3?6?$AA@ DB '//Nume'
	DB	'rical values of periods:', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MMAELNAF@PERIODS?6?$AA@
CONST	SEGMENT
??_C@_08MMAELNAF@PERIODS?6?$AA@ DB 'PERIODS', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06GBBCEOME@TORUS?6?$AA@
CONST	SEGMENT
??_C@_06GBBCEOME@TORUS?6?$AA@ DB 'TORUS', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FGDBGBDP@TORUS_FILLED?6?$AA@
CONST	SEGMENT
??_C@_0O@FGDBGBDP@TORUS_FILLED?6?$AA@ DB 'TORUS_FILLED', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03KINFBBJE@?5?$DN?6?$AA@
CONST	SEGMENT
??_C@_03KINFBBJE@?5?$DN?6?$AA@ DB ' =', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CJBBFGCH@on_assign_call?5?$CFs?5?$AA@
CONST	SEGMENT
??_C@_0BD@CJBBFGCH@on_assign_call?5?$CFs?5?$AA@ DB 'on_assign_call %s ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GLCHCGPD@pscale?5?$DN?5?$CF2?415g?5?$AA@
CONST	SEGMENT
??_C@_0BB@GLCHCGPD@pscale?5?$DN?5?$CF2?415g?5?$AA@ DB 'pscale = %2.15g ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IPLAKHJ@pdelta?5?$DN?5?$CF2?415g?5?$AA@
CONST	SEGMENT
??_C@_0BB@IPLAKHJ@pdelta?5?$DN?5?$CF2?415g?5?$AA@ DB 'pdelta = %2.15g ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DDONMAAP@?$DN?5?$CF2?415g?5?$AA@
CONST	SEGMENT
??_C@_09DDONMAAP@?$DN?5?$CF2?415g?5?$AA@ DB '= %2.15g ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PPLBIGMF@OPTIMIZING_PARAMETER?5?$CFs?5?$AA@
CONST	SEGMENT
??_C@_0BJ@PPLBIGMF@OPTIMIZING_PARAMETER?5?$CFs?5?$AA@ DB 'OPTIMIZING_PARA'
	DB	'METER %s ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IDAJBMND@not?5dumped?$AA@
CONST	SEGMENT
??_C@_0L@IDAJBMND@not?5dumped?$AA@ DB 'not dumped', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NFANHLBB@PARAMETER_FILE?5?$CC?$CFs?$CC?5?6?$AA@
CONST	SEGMENT
??_C@_0BG@NFANHLBB@PARAMETER_FILE?5?$CC?$CFs?$CC?5?6?$AA@ DB 'PARAMETER_F'
	DB	'ILE "%s" ', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ECJEEBNC@PARAMETER?5?$CFs?5?$AA@
CONST	SEGMENT
??_C@_0O@ECJEEBNC@PARAMETER?5?$CFs?5?$AA@ DB 'PARAMETER %s ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JIOIKHHC@SCALE?3?5?$CF2?415g?6?6?$AA@
CONST	SEGMENT
??_C@_0BA@JIOIKHHC@SCALE?3?5?$CF2?415g?6?6?$AA@ DB 'SCALE: %2.15g', 0aH, 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT ??_C@_0BK@GDNNKILE@SCALE?3?5?$CF2?415g?5?5?5?5?5FIXED?6?6?$AA@
CONST	SEGMENT
??_C@_0BK@GDNNKILE@SCALE?3?5?$CF2?415g?5?5?5?5?5FIXED?6?6?$AA@ DB 'SCALE:'
	DB	' %2.15g     FIXED', 0aH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JNDANCND@SYMMETRY_GROUP?5?$CC?$CFs?$CC?6?6?$AA@
CONST	SEGMENT
??_C@_0BG@JNDANCND@SYMMETRY_GROUP?5?$CC?$CFs?$CC?6?6?$AA@ DB 'SYMMETRY_GR'
	DB	'OUP "%s"', 0aH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JBEBAACA@QUADRATIC?6?6?$AA@
CONST	SEGMENT
??_C@_0M@JBEBAACA@QUADRATIC?6?6?$AA@ DB 'QUADRATIC', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JBDKOCJG@LAGRANGE?6lagrange_order?5?$CFd?6?6?$AA@
CONST	SEGMENT
??_C@_0BN@JBDKOCJG@LAGRANGE?6lagrange_order?5?$CFd?6?6?$AA@ DB 'LAGRANGE', 0aH
	DB	'lagrange_order %d', 0aH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KPMMIMPD@LINEAR?6?6?$AA@
CONST	SEGMENT
??_C@_08KPMMIMPD@LINEAR?6?6?$AA@ DB 'LINEAR', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OIIPIMAA@SURFACE_DIMENSION?5?$CFd?6?6?$AA@
CONST	SEGMENT
??_C@_0BH@OIIPIMAA@SURFACE_DIMENSION?5?$CFd?6?6?$AA@ DB 'SURFACE_DIMENSIO'
	DB	'N %d', 0aH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IKNDAOIK@SOAPFILM?6?6?$AA@
CONST	SEGMENT
??_C@_0L@IKNDAOIK@SOAPFILM?6?6?$AA@ DB 'SOAPFILM', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08JCACDBE@STRING?6?6?$AA@
CONST	SEGMENT
??_C@_08JCACDBE@STRING?6?6?$AA@ DB 'STRING', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PDGPOHJF@SPACE_DIMENSION?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BE@PDGPOHJF@SPACE_DIMENSION?5?$CFd?6?$AA@ DB 'SPACE_DIMENSION %d', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LDMHEIAB@SIMPLEX_REPRESENTATION?6?$AA@
CONST	SEGMENT
??_C@_0BI@LDMHEIAB@SIMPLEX_REPRESENTATION?6?$AA@ DB 'SIMPLEX_REPRESENTATI'
	DB	'ON', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MAEFDIIH@LOAD_LIBRARY?5?$CC?$CFs?$CC?6?$AA@
CONST	SEGMENT
??_C@_0BD@MAEFDIIH@LOAD_LIBRARY?5?$CC?$CFs?$CC?6?$AA@ DB 'LOAD_LIBRARY "%'
	DB	's"', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OGJOFBBG@?1?1?5Total?5energy?3?5?$CF2?415g?6?$AA@
CONST	SEGMENT
??_C@_0BJ@OGJOFBBG@?1?1?5Total?5energy?3?5?$CF2?415g?6?$AA@ DB '// Total '
	DB	'energy: %2.15g', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BPBKKFOP@area_method_name?5?$CC?$CFs?$CC?6?$AA@
CONST	SEGMENT
??_C@_0BH@BPBKKFOP@area_method_name?5?$CC?$CFs?$CC?6?$AA@ DB 'area_method'
	DB	'_name "%s"', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NABFGGHF@length_method_name?5?$CC?$CFs?$CC?6?$AA@
CONST	SEGMENT
??_C@_0BJ@NABFGGHF@length_method_name?5?$CC?$CFs?$CC?6?$AA@ DB 'length_me'
	DB	'thod_name "%s"', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BCPFMKMB@volume_method_name?5?$CC?$CFs?$CC?6?$AA@
CONST	SEGMENT
??_C@_0BJ@BCPFMKMB@volume_method_name?5?$CC?$CFs?$CC?6?$AA@ DB 'volume_me'
	DB	'thod_name "%s"', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MAFMKKJJ@method_instances_predicted?5?$CF6d?6?$AA@
CONST	SEGMENT
??_C@_0CA@MAFMKKJJ@method_instances_predicted?5?$CF6d?6?$AA@ DB 'method_i'
	DB	'nstances_predicted %6d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FJAOFKAI@quantities_predicted?5?5?5?5?5?5?5?$CF6d?6?$AA@
CONST	SEGMENT
??_C@_0CA@FJAOFKAI@quantities_predicted?5?5?5?5?5?5?5?$CF6d?6?$AA@ DB 'qu'
	DB	'antities_predicted       %6d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DBPCIHLL@bodies_predicted?5?5?5?5?5?5?$CF6ld?6?$AA@
CONST	SEGMENT
??_C@_0BM@DBPCIHLL@bodies_predicted?5?5?5?5?5?5?$CF6ld?6?$AA@ DB 'bodies_'
	DB	'predicted      %6ld', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LLGGPLBC@facetedges_predicted?5?5?$CF6ld?6?$AA@
CONST	SEGMENT
??_C@_0BM@LLGGPLBC@facetedges_predicted?5?5?$CF6ld?6?$AA@ DB 'facetedges_'
	DB	'predicted  %6ld', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LIMFEAPC@facets_predicted?5?5?5?5?5?5?$CF6ld?6?$AA@
CONST	SEGMENT
??_C@_0BM@LIMFEAPC@facets_predicted?5?5?5?5?5?5?$CF6ld?6?$AA@ DB 'facets_'
	DB	'predicted      %6ld', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NAAPGPA@edges_predicted?5?5?5?5?5?5?5?$CF6ld?6?$AA@
CONST	SEGMENT
??_C@_0BM@NAAPGPA@edges_predicted?5?5?5?5?5?5?5?$CF6ld?6?$AA@ DB 'edges_p'
	DB	'redicted       %6ld', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IPJABLD@vertices_predicted?5?5?5?5?$CF6ld?6?$AA@
CONST	SEGMENT
??_C@_0BM@IPJABLD@vertices_predicted?5?5?5?5?$CF6ld?6?$AA@ DB 'vertices_p'
	DB	'redicted    %6ld', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IJLBKKCB@bodies_predicted?5?5?5?5?5?5?$CF6d?6?$AA@
CONST	SEGMENT
??_C@_0BL@IJLBKKCB@bodies_predicted?5?5?5?5?5?5?$CF6d?6?$AA@ DB 'bodies_p'
	DB	'redicted      %6d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HIAEOPDK@facetedges_predicted?5?5?$CF6d?6?$AA@
CONST	SEGMENT
??_C@_0BL@HIAEOPDK@facetedges_predicted?5?5?$CF6d?6?$AA@ DB 'facetedges_p'
	DB	'redicted  %6d', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@GNFNADLI@facets_predicted?5?5?5?5?5?5?$CF6d?6?$AA@
CONST	SEGMENT
??_C@_0BL@GNFNADLI@facets_predicted?5?5?5?5?5?5?$CF6d?6?$AA@ DB 'facets_p'
	DB	'redicted      %6d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HICEDAAF@edges_predicted?5?5?5?5?5?5?5?$CF6d?6?$AA@
CONST	SEGMENT
??_C@_0BL@HICEDAAF@edges_predicted?5?5?5?5?5?5?5?$CF6d?6?$AA@ DB 'edges_p'
	DB	'redicted       %6d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IBIEGAMC@vertices_predicted?5?5?5?5?$CF6d?6?$AA@
CONST	SEGMENT
??_C@_0BL@IBIEGAMC@vertices_predicted?5?5?5?5?$CF6d?6?$AA@ DB 'vertices_p'
	DB	'redicted    %6d', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LJMBCLLC@mpi_local_bodies?6?$AA@
CONST	SEGMENT
??_C@_0BC@LJMBCLLC@mpi_local_bodies?6?$AA@ DB 'mpi_local_bodies', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LDFGFHJK@keep_originals?6?$AA@
CONST	SEGMENT
??_C@_0BA@LDFGFHJK@keep_originals?6?$AA@ DB 'keep_originals', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HHCBBDGL@keep_macros?6?$AA@
CONST	SEGMENT
??_C@_0N@HHCBBDGL@keep_macros?6?$AA@ DB 'keep_macros', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KBNGNAIF@suppress_warning?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BF@KBNGNAIF@suppress_warning?5?$CFd?6?$AA@ DB 'suppress_warning %d'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@KOIHPCNO@?6Evolver_version?5?$CC?$CFs?$CC?5?5?1?1?5minima@
CONST	SEGMENT
??_C@_0DD@KOIHPCNO@?6Evolver_version?5?$CC?$CFs?$CC?5?5?1?1?5minima@ DB 0aH
	DB	'Evolver_version "%s"  // minimal version needed', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HFBDDGKE@?1?1?5datafilename?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BF@HFBDDGKE@?1?1?5datafilename?3?5?$CFs?6?$AA@ DB '// datafilename'
	DB	': %s', 0aH, 00H				; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _top_dump
_TEXT	SEGMENT
tv2873 = -20						; size = 4
_old_fd$ = -16						; size = 4
tv2970 = -12						; size = 4
_maxclip$89906 = -12					; size = 4
_n$89754 = -12						; size = 4
_did_section_title$ = -12				; size = 4
tv2879 = -8						; size = 4
tv2881 = -4						; size = 4
tv2619 = -4						; size = 4
tv3030 = 8						; size = 4
tv2982 = 8						; size = 4
tv2732 = 8						; size = 4
tv2555 = 8						; size = 4
tv2497 = 8						; size = 4
_k$ = 8							; size = 4
_i$ = 8							; size = 4
_fd$ = 8						; size = 4
_top_dump PROC						; COMDAT

; 319  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 320  :   int i,j,k;
; 321  :   struct gen_quant *q;
; 322  :   struct method_instance *mi;
; 323  :   FILE *old_fd = outfd;

	mov	eax, DWORD PTR _outfd

; 324  :   int e_type;
; 325  :   int did_section_title = 0;
; 326  : 
; 327  :   outfd = fd;
; 328  : 
; 329  :   sprintf(msg,"// datafilename: %s\n",datafilename);

	mov	edx, DWORD PTR _msg
	mov	ecx, DWORD PTR _fd$[ebp]
	push	OFFSET _datafilename
	push	OFFSET ??_C@_0BF@HFBDDGKE@?1?1?5datafilename?3?5?$CFs?6?$AA@
	push	edx
	mov	DWORD PTR _old_fd$[ebp], eax
	mov	DWORD PTR _outfd, ecx
	call	_sprintf

; 330  :   outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 16					; 00000010H

; 331  :   if ( needed_version[0] )

	cmp	BYTE PTR _needed_version, 0
	je	SHORT $LN235@top_dump

; 332  :   { sprintf(msg,"\nEvolver_version \"%s\"  // minimal version needed\n\n",
; 333  :         needed_version);

	mov	ecx, DWORD PTR _msg
	push	OFFSET _needed_version
	push	OFFSET ??_C@_0DD@KOIHPCNO@?6Evolver_version?5?$CC?$CFs?$CC?5?5?1?1?5minima@
	push	ecx
	call	_sprintf

; 334  :     outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 16					; 00000010H
$LN235@top_dump:

; 335  :   }
; 336  : 
; 337  :   if ( warnings_suppressed_count ) 

	cmp	DWORD PTR _warnings_suppressed_count, 0
	je	SHORT $LN234@top_dump

; 338  :     outstring("\n");for ( i = 0 ; i < warnings_suppressed_count ; i++ )

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	add	esp, 4
$LN234@top_dump:
	push	esi
	xor	esi, esi
	cmp	DWORD PTR _warnings_suppressed_count, esi
	jle	SHORT $LN230@top_dump
	npad	6
$LL233@top_dump:

; 339  :   { sprintf(msg,"suppress_warning %d\n",warnings_suppressed[i]);

	mov	eax, DWORD PTR _warnings_suppressed[esi*4]
	mov	ecx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0BF@KBNGNAIF@suppress_warning?5?$CFd?6?$AA@
	push	ecx
	call	_sprintf

; 340  :     outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	inc	esi
	add	esp, 16					; 00000010H
	cmp	esi, DWORD PTR _warnings_suppressed_count
	jl	SHORT $LL233@top_dump

; 341  :   }
; 342  :   if ( i ) 

	test	esi, esi
	je	SHORT $LN230@top_dump

; 343  :     outstring("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	add	esp, 4
$LN230@top_dump:

; 344  : 
; 345  :   if ( keep_macros_flag )

	cmp	DWORD PTR _keep_macros_flag, 0
	je	SHORT $LN229@top_dump

; 346  :   { outstring("keep_macros\n");

	push	OFFSET ??_C@_0N@HHCBBDGL@keep_macros?6?$AA@
	call	_outstring
	add	esp, 4

; 347  :     dump_macros();

	call	_dump_macros
$LN229@top_dump:

; 348  :   }
; 349  : 
; 350  :   if ( match_id_flag )

	cmp	DWORD PTR _match_id_flag, 0
	je	SHORT $LN228@top_dump

; 351  :     outstring("keep_originals\n");

	push	OFFSET ??_C@_0BA@LDFGFHJK@keep_originals?6?$AA@
	call	_outstring
	add	esp, 4
$LN228@top_dump:

; 352  : 
; 353  :   if ( mpi_local_bodies_flag )

	cmp	DWORD PTR _mpi_local_bodies_flag, 0
	je	SHORT $LN227@top_dump

; 354  :     outstring("mpi_local_bodies\n");

	push	OFFSET ??_C@_0BC@LJMBCLLC@mpi_local_bodies?6?$AA@
	call	_outstring
	add	esp, 4
$LN227@top_dump:

; 355  : 
; 356  :   if ( match_id_flag ) // keep_originals

	cmp	DWORD PTR _match_id_flag, 0

; 357  :   { sprintf(msg,"vertices_predicted    %6d\n",web.skel[VERTEX].max_ord+1);

	mov	ecx, DWORD PTR _msg
	je	$LN226@top_dump
	mov	eax, DWORD PTR _web+68
	inc	eax
	push	eax
	push	OFFSET ??_C@_0BL@IBIEGAMC@vertices_predicted?5?5?5?5?$CF6d?6?$AA@
	push	ecx
	call	_sprintf

; 358  :     outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 359  :     sprintf(msg,"edges_predicted       %6d\n",web.skel[EDGE].max_ord+1);

	mov	eax, DWORD PTR _web+180
	mov	ecx, DWORD PTR _msg
	inc	eax
	push	eax
	push	OFFSET ??_C@_0BL@HICEDAAF@edges_predicted?5?5?5?5?5?5?5?$CF6d?6?$AA@
	push	ecx
	call	_sprintf

; 360  :     outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 361  :     sprintf(msg,"facets_predicted      %6d\n",web.skel[FACET].max_ord+1);

	mov	eax, DWORD PTR _web+292
	mov	ecx, DWORD PTR _msg
	inc	eax
	push	eax
	push	OFFSET ??_C@_0BL@GNFNADLI@facets_predicted?5?5?5?5?5?5?$CF6d?6?$AA@
	push	ecx
	call	_sprintf

; 362  :     outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 363  :     sprintf(msg,"facetedges_predicted  %6d\n",web.skel[FACETEDGE].max_ord+1);

	mov	eax, DWORD PTR _web+516
	mov	ecx, DWORD PTR _msg
	inc	eax
	push	eax
	push	OFFSET ??_C@_0BL@HIAEOPDK@facetedges_predicted?5?5?$CF6d?6?$AA@
	push	ecx
	call	_sprintf

; 364  :     outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 365  :     sprintf(msg,"bodies_predicted      %6d\n",web.skel[BODY].max_ord+1);

	mov	eax, DWORD PTR _web+404
	add	esp, 64					; 00000040H
	inc	eax
	push	eax
	push	OFFSET ??_C@_0BL@IJLBKKCB@bodies_predicted?5?5?5?5?5?5?$CF6d?6?$AA@

; 366  :     outstring(msg);
; 367  :   }
; 368  :   else

	jmp	$LN439@top_dump
$LN226@top_dump:

; 369  :   { sprintf(msg,"vertices_predicted    %6ld\n",web.skel[VERTEX].count+1);

	mov	eax, DWORD PTR _web+64
	inc	eax
	push	eax
	push	OFFSET ??_C@_0BM@IPJABLD@vertices_predicted?5?5?5?5?$CF6ld?6?$AA@
	push	ecx
	call	_sprintf

; 370  :     outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 371  :     sprintf(msg,"edges_predicted       %6ld\n",web.skel[EDGE].count+1);

	mov	eax, DWORD PTR _web+176
	mov	ecx, DWORD PTR _msg
	inc	eax
	push	eax
	push	OFFSET ??_C@_0BM@NAAPGPA@edges_predicted?5?5?5?5?5?5?5?$CF6ld?6?$AA@
	push	ecx
	call	_sprintf

; 372  :     outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 373  :     sprintf(msg,"facets_predicted      %6ld\n",web.skel[FACET].count+1);

	mov	eax, DWORD PTR _web+288
	mov	ecx, DWORD PTR _msg
	inc	eax
	push	eax
	push	OFFSET ??_C@_0BM@LIMFEAPC@facets_predicted?5?5?5?5?5?5?$CF6ld?6?$AA@
	push	ecx
	call	_sprintf

; 374  :     outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 375  :     sprintf(msg,"facetedges_predicted  %6ld\n",web.skel[FACETEDGE].count+1);

	mov	eax, DWORD PTR _web+512
	mov	ecx, DWORD PTR _msg
	inc	eax
	push	eax
	push	OFFSET ??_C@_0BM@LLGGPLBC@facetedges_predicted?5?5?$CF6ld?6?$AA@
	push	ecx
	call	_sprintf

; 376  :     outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 377  :     sprintf(msg,"bodies_predicted      %6ld\n",web.skel[BODY].count+1);

	mov	eax, DWORD PTR _web+400
	add	esp, 64					; 00000040H
	inc	eax
	push	eax
	push	OFFSET ??_C@_0BM@DBPCIHLL@bodies_predicted?5?5?5?5?5?5?$CF6ld?6?$AA@
$LN439@top_dump:
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_sprintf

; 378  :     outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 379  :   }
; 380  :   sprintf(msg,"quantities_predicted       %6d\n",gen_quant_count);

	mov	eax, DWORD PTR _web+5528
	mov	ecx, DWORD PTR _msg
	add	esp, 16					; 00000010H
	push	eax
	push	OFFSET ??_C@_0CA@FJAOFKAI@quantities_predicted?5?5?5?5?5?5?5?$CF6d?6?$AA@
	push	ecx
	call	_sprintf

; 381  :   outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 382  :   sprintf(msg,"method_instances_predicted %6d\n",meth_inst_count);

	mov	eax, DWORD PTR _web+5560
	mov	ecx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0CA@MAFMKKJJ@method_instances_predicted?5?$CF6d?6?$AA@
	push	ecx
	call	_sprintf

; 383  :   outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 32					; 00000020H

; 384  : 
; 385  :   if ( volume_method_name[0] )

	cmp	BYTE PTR _volume_method_name, 0
	je	SHORT $LN224@top_dump

; 386  :   { sprintf(msg,"volume_method_name \"%s\"\n",volume_method_name); 

	mov	eax, DWORD PTR _msg
	push	OFFSET _volume_method_name
	push	OFFSET ??_C@_0BJ@BCPFMKMB@volume_method_name?5?$CC?$CFs?$CC?6?$AA@
	push	eax
	call	_sprintf

; 387  :     outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 16					; 00000010H
$LN224@top_dump:

; 388  :   }
; 389  :   if ( length_method_name[0] )

	cmp	BYTE PTR _length_method_name, 0
	je	SHORT $LN223@top_dump

; 390  :   { sprintf(msg,"length_method_name \"%s\"\n",length_method_name); 

	mov	edx, DWORD PTR _msg
	push	OFFSET _length_method_name
	push	OFFSET ??_C@_0BJ@NABFGGHF@length_method_name?5?$CC?$CFs?$CC?6?$AA@
	push	edx
	call	_sprintf

; 391  :     outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 16					; 00000010H
$LN223@top_dump:

; 392  :   }
; 393  :   if ( area_method_name[0] )

	cmp	BYTE PTR _area_method_name, 0
	je	SHORT $LN222@top_dump

; 394  :   { sprintf(msg,"area_method_name \"%s\"\n",area_method_name); 

	mov	ecx, DWORD PTR _msg
	push	OFFSET _area_method_name
	push	OFFSET ??_C@_0BH@BPBKKFOP@area_method_name?5?$CC?$CFs?$CC?6?$AA@
	push	ecx
	call	_sprintf

; 395  :     outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 16					; 00000010H
$LN222@top_dump:

; 396  :   }
; 397  : 
; 398  : #ifdef FLOAT128
; 399  :   sprintf(msg,"// Total energy: %2.*Qg\n",DPREC,web.total_energy);
; 400  : #elif defined(LONGDOUBLE)
; 401  :   sprintf(msg,"// Total energy: %2.*Lg\n",DPREC,web.total_energy);
; 402  : #else
; 403  :   sprintf(msg,"// Total energy: %2.15g\n",web.total_energy);

	fld	QWORD PTR _web+1240
	mov	eax, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BJ@OGJOFBBG@?1?1?5Total?5energy?3?5?$CF2?415g?6?$AA@
	push	eax
	call	_sprintf

; 404  : #endif 
; 405  :   outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 20					; 00000014H
	mov	esi, OFFSET _dll_list
	npad	1
$LL221@top_dump:

; 408  :      if ( dll_list[i].name )

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN220@top_dump

; 409  :      { sprintf(msg,"LOAD_LIBRARY \"%s\"\n",dll_list[i].name);

	mov	edx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0BD@MAEFDIIH@LOAD_LIBRARY?5?$CC?$CFs?$CC?6?$AA@
	push	edx
	call	_sprintf

; 410  :        outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 16					; 00000010H
$LN220@top_dump:

; 406  :   /* dynamic libraries */
; 407  :   for ( i = 0 ; i < MAX_DLL ; i++ )

	add	esi, 8
	cmp	esi, OFFSET _dll_list+40
	jl	SHORT $LL221@top_dump

; 411  :      }
; 412  :   /* model info dump */
; 413  :   if ( web.representation == SIMPLEX ) outstring("SIMPLEX_REPRESENTATION\n"); 

	cmp	DWORD PTR _web+624, 3
	jne	SHORT $LN217@top_dump
	push	OFFSET ??_C@_0BI@LDMHEIAB@SIMPLEX_REPRESENTATION?6?$AA@
	call	_outstring
	add	esp, 4
$LN217@top_dump:

; 414  :   if ( SDIM != 3 ) 

	mov	eax, DWORD PTR _web+616
	cmp	eax, 3
	je	SHORT $LN216@top_dump

; 415  :       { sprintf(msg,"SPACE_DIMENSION %d\n",SDIM); outstring(msg); }

	mov	ecx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0BE@PDGPOHJF@SPACE_DIMENSION?5?$CFd?6?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 16					; 00000010H
$LN216@top_dump:

; 416  :   if ( web.representation == STRING ) outstring("STRING\n\n");

	mov	eax, DWORD PTR _web+624
	cmp	eax, 1
	jne	SHORT $LN215@top_dump
	push	OFFSET ??_C@_08JCACDBE@STRING?6?6?$AA@
	call	_outstring
	add	esp, 4
	jmp	SHORT $LN212@top_dump
$LN215@top_dump:

; 417  :   else if ( web.representation == SOAPFILM ) outstring("SOAPFILM\n\n");

	cmp	eax, 2
	jne	SHORT $LN213@top_dump
	push	OFFSET ??_C@_0L@IKNDAOIK@SOAPFILM?6?6?$AA@
	call	_outstring
	add	esp, 4
	jmp	SHORT $LN212@top_dump
$LN213@top_dump:

; 418  :   else { sprintf(msg,"SURFACE_DIMENSION %d\n\n",web.dimension); outstring(msg); }

	mov	eax, DWORD PTR _web+620
	mov	ecx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0BH@OIIPIMAA@SURFACE_DIMENSION?5?$CFd?6?6?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 16					; 00000010H
$LN212@top_dump:

; 419  :   if ( web.modeltype == LINEAR ) outstring("LINEAR\n\n");

	mov	eax, DWORD PTR _web+628
	cmp	eax, 1
	jne	SHORT $LN211@top_dump
	push	OFFSET ??_C@_08KPMMIMPD@LINEAR?6?6?$AA@
	jmp	SHORT $LN440@top_dump
$LN211@top_dump:

; 420  :   else if ( web.modeltype == LAGRANGE ) 

	cmp	eax, 3
	jne	SHORT $LN209@top_dump

; 421  :   { sprintf(msg, "LAGRANGE\nlagrange_order %d\n\n",web.lagrange_order);

	mov	eax, DWORD PTR _web+632
	mov	ecx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0BN@JBDKOCJG@LAGRANGE?6lagrange_order?5?$CFd?6?6?$AA@
	push	ecx
	call	_sprintf

; 422  :     outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 16					; 00000010H
	jmp	SHORT $LN208@top_dump
$LN209@top_dump:

; 423  :   }
; 424  :   else outstring("QUADRATIC\n\n");

	push	OFFSET ??_C@_0M@JBEBAACA@QUADRATIC?6?6?$AA@
$LN440@top_dump:
	call	_outstring
	add	esp, 4
$LN208@top_dump:

; 425  :   if ( web.symmetry_flag && !web.torus_flag )

	cmp	DWORD PTR _web+856, 0
	je	SHORT $LN207@top_dump
	cmp	DWORD PTR _web+860, 0
	jne	SHORT $LN207@top_dump

; 426  :      { sprintf(msg,"SYMMETRY_GROUP \"%s\"\n\n",symmetry_name); outstring(msg); }

	mov	eax, DWORD PTR _symmetry_name
	mov	ecx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0BG@JNDANCND@SYMMETRY_GROUP?5?$CC?$CFs?$CC?6?6?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 16					; 00000010H
$LN207@top_dump:

; 427  : 
; 428  : 
; 429  :   if ( web.motion_flag )  /* do scale before parameters, since scale is

	cmp	DWORD PTR _web+852, 0

; 430  :                              parameter attribute */
; 431  :      { sprintf(msg,"SCALE: %2.15g     FIXED\n\n",(DOUBLE)web.scale); outstring(msg); }

	fld	QWORD PTR _web+1512
	je	SHORT $LN206@top_dump
	mov	eax, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BK@GDNNKILE@SCALE?3?5?$CF2?415g?5?5?5?5?5FIXED?6?6?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 20					; 00000014H
	jmp	SHORT $LN204@top_dump
$LN206@top_dump:

; 432  :   else if ( web.scale != 0.1 )

	fld	ST(0)
	fld	QWORD PTR __real@3fb999999999999a
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN382@top_dump

; 433  :      { sprintf(msg,"SCALE: %2.15g\n\n",(DOUBLE)web.scale); outstring(msg); }

	mov	edx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BA@JIOIKHHC@SCALE?3?5?$CF2?415g?6?6?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 20					; 00000014H
	jmp	SHORT $LN204@top_dump
$LN382@top_dump:
	fstp	ST(0)
$LN204@top_dump:
	push	ebx
	push	edi

; 434  : 
; 435  :   list_top_procedures(LIST_PROTO); /* protos here, in case of on_assign_call */

	push	1
	call	_list_top_procedures

; 436  : 
; 437  :   /* global variables */
; 438  :   for ( i = 0 ; i < web.global_count ; i++ )

	xor	edi, edi
	add	esp, 4
	mov	DWORD PTR _i$[ebp], edi
	cmp	DWORD PTR _web+5540, edi
	jle	$LN201@top_dump
	npad	11
$LL376@top_dump:

; 439  :   { struct global *g = globals(i);

	mov	eax, edi
	and	eax, -16777216				; ff000000H
	cmp	eax, 268435456				; 10000000H
	jne	SHORT $LN242@top_dump
	mov	edx, DWORD PTR _web+5652
	mov	ecx, edi
	and	ecx, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _dymem
	mov	esi, DWORD PTR [eax+ecx]
	jmp	SHORT $LN239@top_dump
$LN242@top_dump:
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN240@top_dump
	mov	edx, DWORD PTR _localbase
	mov	esi, edi
	and	esi, 16777215				; 00ffffffH
	imul	esi, 224				; 000000e0H
	add	esi, DWORD PTR [edx]
	jmp	SHORT $LN239@top_dump
$LN240@top_dump:
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN238@top_dump
	mov	ecx, DWORD PTR _web+5656
	mov	eax, edi
	and	eax, 16777215				; 00ffffffH
	mov	esi, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN239@top_dump
$LN238@top_dump:
	mov	eax, DWORD PTR _web+5652
	mov	edx, edi
	and	edx, 16777215				; 00ffffffH
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _dymem
	mov	esi, DWORD PTR [ecx+edx]
$LN239@top_dump:

; 440  :     if ( square_curvature_flag && (i == (square_curvature_param&GLOBMASK)) )

	cmp	DWORD PTR _square_curvature_flag, 0
	je	SHORT $LN200@top_dump
	mov	eax, DWORD PTR _square_curvature_param
	and	eax, 16777215				; 00ffffffH
	cmp	edi, eax
	je	$LN202@top_dump
$LN200@top_dump:

; 441  :       continue;
; 442  :     if ( mean_curv_int_flag && (i == (mean_curvature_param&GLOBMASK)) )

	cmp	DWORD PTR _mean_curv_int_flag, 0
	je	SHORT $LN199@top_dump
	mov	ecx, DWORD PTR _mean_curvature_param
	and	ecx, 16777215				; 00ffffffH
	cmp	edi, ecx
	je	$LN202@top_dump
$LN199@top_dump:

; 443  :       continue;
; 444  :     if ( sqgauss_flag && (i == (sqgauss_param|GLOBMASK)) ) continue;

	cmp	DWORD PTR _sqgauss_flag, 0
	je	SHORT $LN198@top_dump
	mov	edx, DWORD PTR _sqgauss_param
	or	edx, 16777215				; 00ffffffH
	cmp	edi, edx
	je	$LN202@top_dump
$LN198@top_dump:

; 445  :     if ( g->flags & GLOB_LOCALVAR ) continue;

	mov	eax, DWORD PTR [esi+192]
	test	eax, 524288				; 00080000H
	jne	$LN202@top_dump

; 446  :     if ( g->flags2 & NO_DUMP_BIT ) continue;

	test	BYTE PTR [esi+196], 1
	jne	$LN202@top_dump

; 447  :     if ( g->flags & FILE_VALUES )

	test	al, 2
	je	SHORT $LN195@top_dump

; 448  :     {
; 449  :       sprintf(msg,"PARAMETER %s ",g->name);

	mov	eax, DWORD PTR _msg
	push	esi
	push	OFFSET ??_C@_0O@ECJEEBNC@PARAMETER?5?$CFs?5?$AA@
	push	eax
	call	_sprintf

; 450  :       outstring(msg); 

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 16					; 00000010H

; 451  :       if ( reflevel == 0 )

	cmp	DWORD PTR _reflevel, 0
	jne	SHORT $LN194@top_dump

; 452  :          sprintf(msg,"PARAMETER_FILE \"%s\" \n",
; 453  :               g->value.file.value_file); 

	mov	edx, DWORD PTR [esi+68]
	mov	eax, DWORD PTR _msg
	push	edx
	push	OFFSET ??_C@_0BG@NFANHLBB@PARAMETER_FILE?5?$CC?$CFs?$CC?5?6?$AA@
	push	eax
	jmp	SHORT $LN441@top_dump
$LN194@top_dump:

; 454  :       else    sprintf(msg,"PARAMETER_FILE \"%s\" \n","not dumped");

	mov	ecx, DWORD PTR _msg
	push	OFFSET ??_C@_0L@IDAJBMND@not?5dumped?$AA@
	push	OFFSET ??_C@_0BG@NFANHLBB@PARAMETER_FILE?5?$CC?$CFs?$CC?5?6?$AA@
	push	ecx
$LN441@top_dump:
	call	_sprintf

; 455  :       outstring(msg); 

	mov	edx, DWORD PTR _msg
	add	esp, 12					; 0000000cH
	push	edx
	call	_outstring
	add	esp, 4

; 456  :     }
; 457  :     else if ( (g->flags & ORDINARY_PARAM) &&

	jmp	$LN202@top_dump
$LN195@top_dump:

; 458  :           !(g->flags & (INTERNAL_NAME|QUANTITY_TYPES)) )

	test	al, 1
	je	$LN191@top_dump
	test	eax, 4194752				; 004001c0H
	jne	$LN191@top_dump

; 459  :       { if ( g->flags & OPTIMIZING_PARAMETER )
; 460  :             sprintf(msg,"OPTIMIZING_PARAMETER %s ",g->name);

	push	esi
	test	eax, 32768				; 00008000H
	je	SHORT $LN190@top_dump
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0BJ@PPLBIGMF@OPTIMIZING_PARAMETER?5?$CFs?5?$AA@
	push	eax

; 461  :         else 

	jmp	SHORT $LN442@top_dump
$LN190@top_dump:

; 462  :             sprintf(msg,"PARAMETER %s ",g->name); 

	mov	ecx, DWORD PTR _msg
	push	OFFSET ??_C@_0O@ECJEEBNC@PARAMETER?5?$CFs?5?$AA@
	push	ecx
$LN442@top_dump:
	call	_sprintf

; 463  :     outstring(msg); 

	mov	edx, DWORD PTR _msg
	add	esp, 12					; 0000000cH
	push	edx
	call	_outstring

; 464  : #ifdef FLOAT128
; 465  :          sprintf(msg,"= %2.*Qg ",DPREC,g->value.real); 
; 466  :          outstring(msg); 
; 467  : #elif defined(LONGDOUBLE)
; 468  :          sprintf(msg,"= %2.*Lg ",DPREC,g->value.real); 
; 469  :          outstring(msg); 
; 470  : #else
; 471  :          sprintf(msg,"= %2.15g ",g->value.real); outstring(msg); 

	fld	QWORD PTR [esi+64]
	mov	eax, DWORD PTR _msg
	push	ecx
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_09DDONMAAP@?$DN?5?$CF2?415g?5?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring

; 472  : #endif 
; 473  :          if ( g->attr.varstuff.delta != OPTPARAM_DELTA 
; 474  :            && g->attr.varstuff.delta != 0.0 )

	fld	QWORD PTR [esi+168]
	fld	QWORD PTR __real@3f1a36e2eb1c432d
	add	esp, 20					; 00000014H
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN360@top_dump
	fld	QWORD PTR [esi+168]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN360@top_dump

; 475  :          {
; 476  : #ifdef FLOAT128
; 477  :             sprintf(msg,"pdelta = %2.*Qg ",DPREC,g->attr.varstuff.delta); 
; 478  :             outstring(msg); 
; 479  : #elif defined(LONGDOUBLE)
; 480  :             sprintf(msg,"pdelta = %2.*Lg ",DPREC,g->attr.varstuff.delta); 
; 481  :             outstring(msg); 
; 482  : #else
; 483  :             sprintf(msg,"pdelta = %2.15g ",g->attr.varstuff.delta); 

	fld	QWORD PTR [esi+168]
	mov	edx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BB@IPLAKHJ@pdelta?5?$DN?5?$CF2?415g?5?$AA@
	push	edx
	call	_sprintf

; 484  :             outstring(msg); 

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 20					; 00000014H
$LN360@top_dump:

; 485  : #endif 
; 486  :          }
; 487  :          if ( g->attr.varstuff.pscale != 1.0 
; 488  :            && g->attr.varstuff.pscale != 0.0 )

	fld	QWORD PTR [esi+176]
	fld1
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN187@top_dump
	fld	QWORD PTR [esi+176]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN187@top_dump

; 489  :          {
; 490  : #ifdef FLOAT128
; 491  :             sprintf(msg,"pscale = %2.*rg ",DPREC,g->attr.varstuff.pscale); 
; 492  : #elif defined(LONGDOUBLE)
; 493  :             sprintf(msg,"pscale = %2.*Lg ",DPREC,g->attr.varstuff.pscale); 
; 494  : #else
; 495  :             sprintf(msg,"pscale = %2.15g ",g->attr.varstuff.pscale); 

	fld	QWORD PTR [esi+176]
	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BB@GLCHCGPD@pscale?5?$DN?5?$CF2?415g?5?$AA@
	push	ecx
	call	_sprintf

; 496  : #endif 
; 497  :             outstring(msg); 

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 20					; 00000014H
$LN187@top_dump:

; 498  :          }
; 499  :          if ( g->attr.varstuff.on_assign_call )

	mov	eax, DWORD PTR [esi+188]
	test	eax, eax
	je	SHORT $LN186@top_dump

; 500  :          { sprintf(msg,"on_assign_call %s ",globals(g->attr.varstuff.on_assign_call)->name);

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN244@top_dump
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN246@top_dump
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN245@top_dump
$LN246@top_dump:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN244@top_dump
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN245@top_dump
$LN244@top_dump:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN245@top_dump:
	mov	ecx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0BD@CJBBFGCH@on_assign_call?5?$CFs?5?$AA@
	push	ecx
	call	_sprintf

; 501  :            outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 16					; 00000010H
$LN186@top_dump:

; 502  :          }
; 503  :          outstring("\n"); 

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	add	esp, 4
	jmp	$LN202@top_dump
$LN191@top_dump:

; 504  :       }
; 505  :       else if ( g->flags & ARRAY_PARAM )        

	test	eax, 2048				; 00000800H
	je	$LN202@top_dump

; 506  :       { struct array *a = g->attr.arrayptr;

	mov	ebx, DWORD PTR [esi+168]

; 507  :         if ( !(g->flags & INTERNAL_NAME) )

	test	eax, 4194304				; 00400000H
	jne	$LN202@top_dump

; 508  :           if ( a )  /* declaration might not have been executed */

	test	ebx, ebx
	je	$LN202@top_dump

; 509  :           {
; 510  :             sprintf(msg,"define %s",g->name);

	mov	eax, DWORD PTR _msg
	push	esi
	push	OFFSET ??_C@_09CDKNMAHF@define?5?$CFs?$AA@
	push	eax
	call	_sprintf

; 511  :             strcat(msg," ");

	mov	edi, DWORD PTR _msg
	add	esp, 12					; 0000000cH
	dec	edi
	npad	3
$LL351@top_dump:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL351@top_dump
	mov	cx, WORD PTR ??_C@_01CLKCMJKC@?5?$AA@
	mov	WORD PTR [edi], cx

; 512  :             strcat(msg,datatype_name[g->type]);

	mov	edx, DWORD PTR [esi+200]
	mov	eax, DWORD PTR _datatype_name[edx*4]
	mov	esi, eax
$LL352@top_dump:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL352@top_dump
	mov	edi, DWORD PTR _msg
	sub	eax, esi
	dec	edi
$LL353@top_dump:
	mov	cl, BYTE PTR [edi+1]
	inc	edi
	test	cl, cl
	jne	SHORT $LL353@top_dump
	mov	ecx, eax
	shr	ecx, 2
	rep movsd
	mov	ecx, eax
	and	ecx, 3
	rep movsb

; 513  :             for ( j = 0 ; j < a->dim ; j++ )

	xor	esi, esi
	cmp	DWORD PTR [ebx+4], esi
	jle	SHORT $LN179@top_dump

; 509  :           {
; 510  :             sprintf(msg,"define %s",g->name);

	lea	edi, DWORD PTR [ebx+24]
$LL181@top_dump:

; 514  :               sprintf(msg+strlen(msg),"[%d]",a->sizes[j]);

	mov	edx, DWORD PTR _msg
	mov	eax, edx
	lea	ecx, DWORD PTR [eax+1]
	mov	DWORD PTR tv2970[ebp], ecx
	npad	1
$LL354@top_dump:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL354@top_dump
	mov	ecx, DWORD PTR [edi]
	sub	eax, DWORD PTR tv2970[ebp]
	push	ecx
	add	eax, edx
	push	OFFSET ??_C@_04KBDJOJNB@?$FL?$CFd?$FN?$AA@
	push	eax
	call	_sprintf
	inc	esi
	add	esp, 12					; 0000000cH
	add	edi, 4
	cmp	esi, DWORD PTR [ebx+4]
	jl	SHORT $LL181@top_dump
$LN179@top_dump:

; 515  :             outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 516  :             outstring(" =\n");

	push	OFFSET ??_C@_03KINFBBJE@?5?$DN?6?$AA@
	call	_outstring

; 517  :             print_array(a,NULL,PRINT_DUMP);

	push	1002					; 000003eaH
	push	0
	push	ebx
	call	_print_array

; 518  :             outstring("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	mov	edi, DWORD PTR _i$[ebp]
	add	esp, 24					; 00000018H
$LN202@top_dump:

; 436  : 
; 437  :   /* global variables */
; 438  :   for ( i = 0 ; i < web.global_count ; i++ )

	inc	edi
	mov	DWORD PTR _i$[ebp], edi
	cmp	edi, DWORD PTR _web+5540
	jl	$LL376@top_dump
$LN201@top_dump:

; 519  :           }
; 520  :       }
; 521  :    }
; 522  : 
; 523  :   list_forwards(); /* constraint names, etc. */

	call	_list_forwards

; 524  :   list_top_procedures(LIST_FULL); /* protos, then full */

	push	2
	call	_list_top_procedures
	add	esp, 4

; 525  :   
; 526  :   if ( web.full_flag ) outstring("TORUS_FILLED\n");  

	cmp	DWORD PTR _web+864, 0
	je	SHORT $LN178@top_dump
	push	OFFSET ??_C@_0O@FGDBGBDP@TORUS_FILLED?6?$AA@
	jmp	SHORT $LN443@top_dump
$LN178@top_dump:

; 527  :   else if ( web.torus_flag ) outstring("TORUS\n");

	cmp	DWORD PTR _web+860, 0
	je	SHORT $LN350@top_dump
	push	OFFSET ??_C@_06GBBCEOME@TORUS?6?$AA@
$LN443@top_dump:
	call	_outstring
	add	esp, 4

; 528  :   if ( web.torus_flag || torus_period_expr[0][0].root )

	cmp	DWORD PTR _web+860, 0
	jne	SHORT $LN174@top_dump
$LN350@top_dump:
	cmp	DWORD PTR _torus_period_expr+4, 0
	je	$LN175@top_dump
$LN174@top_dump:

; 529  :      { outstring("PERIODS\n");

	push	OFFSET ??_C@_08MMAELNAF@PERIODS?6?$AA@
	call	_outstring

; 530  :        for ( i = 0 ; i < SDIM ; i++ )

	mov	eax, DWORD PTR _web+616
	add	esp, 4
	xor	ebx, ebx
	test	eax, eax
	jle	SHORT $LN171@top_dump

; 529  :      { outstring("PERIODS\n");

	mov	DWORD PTR tv2497[ebp], OFFSET _torus_period_expr
$LL374@top_dump:

; 531  :        { for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	test	eax, eax
	jle	SHORT $LN365@top_dump
	mov	edi, DWORD PTR tv2497[ebp]
	npad	4
$LL170@top_dump:

; 532  :          { outstring(" "); 

	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	call	_outstring

; 533  :            outstring(print_express(&torus_period_expr[i][j],' '));

	push	32					; 00000020H
	push	edi
	call	_print_express
	push	eax
	call	_outstring
	inc	esi
	add	esp, 16					; 00000010H
	add	edi, 104				; 00000068H
	cmp	esi, DWORD PTR _web+616
	jl	SHORT $LL170@top_dump
$LN365@top_dump:

; 534  :          }
; 535  :          outstring("\n"); 

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	mov	eax, DWORD PTR _web+616
	add	DWORD PTR tv2497[ebp], 624		; 00000270H
	inc	ebx
	add	esp, 4
	cmp	ebx, eax
	jl	SHORT $LL374@top_dump
$LN171@top_dump:

; 536  :        }
; 537  :        outstring("//Numerical values of periods:\n");

	push	OFFSET ??_C@_0CA@DMIPGGPP@?1?1Numerical?5values?5of?5periods?3?6?$AA@
	call	_outstring

; 538  :        for ( i = 0 ; i < SDIM ; i++ )

	xor	edi, edi
	add	esp, 4
	cmp	DWORD PTR _web+616, edi
	jle	SHORT $LN366@top_dump
	npad	4
$LL167@top_dump:

; 539  :        { outstring("// ");

	push	OFFSET ??_C@_03IAHPLKPE@?1?1?5?$AA@
	call	_outstring

; 540  :          for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	add	esp, 4
	cmp	DWORD PTR _web+616, esi
	jle	SHORT $LN377@top_dump
	npad	9
$LL164@top_dump:

; 541  :          { 
; 542  : #ifdef FLOAT128
; 543  :            sprintf(msg," %*.*Qf ",DWIDTH,DPREC,web.torus_period[i][j]);
; 544  : #elif defined(LONGDOUBLE)
; 545  :            sprintf(msg," %*.*Lf ",DWIDTH,DPREC,web.torus_period[i][j]);
; 546  : #else
; 547  :            sprintf(msg," %18.15f ",web.torus_period[i][j]);

	mov	eax, DWORD PTR _web+1608
	mov	ecx, DWORD PTR [eax+edi*4]
	fld	QWORD PTR [ecx+esi*8]
	mov	edx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_09PGGJIFLA@?5?$CF18?415f?5?$AA@
	push	edx
	call	_sprintf

; 548  : #endif 
; 549  :            outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	inc	esi
	add	esp, 20					; 00000014H
	cmp	esi, DWORD PTR _web+616
	jl	SHORT $LL164@top_dump
$LN377@top_dump:

; 550  :          }
; 551  :          outstring("\n"); 

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	inc	edi
	add	esp, 4
	cmp	edi, DWORD PTR _web+616
	jl	SHORT $LL167@top_dump
$LN366@top_dump:

; 552  :        }
; 553  :        outstring("\n"); 

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	add	esp, 4
$LN175@top_dump:

; 554  :      }
; 555  : 
; 556  :   if ( torus_display_period_expr[0][0].root )

	cmp	DWORD PTR _torus_display_period_expr+4, 0
	je	$LN146@top_dump

; 557  :      { outstring("DISPLAY_PERIODS\n");

	push	OFFSET ??_C@_0BB@EBFLEKHE@DISPLAY_PERIODS?6?$AA@
	call	_outstring

; 558  :        for ( i = 0 ; i < SDIM ; i++ )

	mov	eax, DWORD PTR _web+616
	add	esp, 4
	xor	ebx, ebx
	test	eax, eax
	jle	SHORT $LN158@top_dump

; 557  :      { outstring("DISPLAY_PERIODS\n");

	mov	DWORD PTR tv2555[ebp], OFFSET _torus_display_period_expr
$LL160@top_dump:

; 559  :        { for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	test	eax, eax
	jle	SHORT $LN367@top_dump
	mov	edi, DWORD PTR tv2555[ebp]
$LL157@top_dump:

; 560  :          { outstring(" "); 

	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	call	_outstring

; 561  :            outstring(print_express(&torus_display_period_expr[i][j],' '));

	push	32					; 00000020H
	push	edi
	call	_print_express
	push	eax
	call	_outstring
	inc	esi
	add	esp, 16					; 00000010H
	add	edi, 104				; 00000068H
	cmp	esi, DWORD PTR _web+616
	jl	SHORT $LL157@top_dump
$LN367@top_dump:

; 562  :          }
; 563  :          outstring("\n"); 

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	mov	eax, DWORD PTR _web+616
	add	DWORD PTR tv2555[ebp], 624		; 00000270H
	inc	ebx
	add	esp, 4
	cmp	ebx, eax
	jl	SHORT $LL160@top_dump
$LN158@top_dump:

; 564  :        }
; 565  :        outstring("//Numerical values of periods:\n");

	push	OFFSET ??_C@_0CA@DMIPGGPP@?1?1Numerical?5values?5of?5periods?3?6?$AA@
	call	_outstring

; 566  :        for ( i = 0 ; i < SDIM ; i++ )

	xor	edi, edi
	add	esp, 4
	cmp	DWORD PTR _web+616, edi
	jle	SHORT $LN368@top_dump
	npad	3
$LL154@top_dump:

; 567  :        { outstring("// ");

	push	OFFSET ??_C@_03IAHPLKPE@?1?1?5?$AA@
	call	_outstring

; 568  :          for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	add	esp, 4
	cmp	DWORD PTR _web+616, esi
	jle	SHORT $LN378@top_dump
	npad	9
$LL151@top_dump:

; 569  :          { 
; 570  : #ifdef FLOAT128
; 571  :            sprintf(msg," %*.*Qf ",DWIDTH,DPREC,web.torus_display_period[i][j]);
; 572  : #elif defined(LONGDOUBLE)
; 573  :            sprintf(msg," %*.*Lf ",DWIDTH,DPREC,web.torus_display_period[i][j]);
; 574  : #else
; 575  :            sprintf(msg," %18.15f ",web.torus_display_period[i][j]);

	mov	ecx, DWORD PTR _web+1620
	mov	edx, DWORD PTR [ecx+edi*4]
	fld	QWORD PTR [edx+esi*8]
	mov	eax, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_09PGGJIFLA@?5?$CF18?415f?5?$AA@
	push	eax
	call	_sprintf

; 576  : #endif 
; 577  :            outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	inc	esi
	add	esp, 20					; 00000014H
	cmp	esi, DWORD PTR _web+616
	jl	SHORT $LL151@top_dump
$LN378@top_dump:

; 578  :          }
; 579  :          outstring("\n"); 

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	inc	edi
	add	esp, 4
	cmp	edi, DWORD PTR _web+616
	jl	SHORT $LL154@top_dump
$LN368@top_dump:

; 580  :        }
; 581  :        outstring("\n"); 

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring

; 582  : 
; 583  :        outstring("DISPLAY_ORIGIN\n");

	push	OFFSET ??_C@_0BA@CNKDAMFM@DISPLAY_ORIGIN?6?$AA@
	call	_outstring

; 584  :        for ( i = 0 ; i < SDIM  ; i++ )

	xor	esi, esi
	add	esp, 8
	cmp	DWORD PTR _web+616, esi
	jle	SHORT $LN146@top_dump
	npad	15
$LL148@top_dump:

; 585  :        {
; 586  : #ifdef FLOAT128
; 587  :            sprintf(msg," %*.*Qf ",DWIDTH,DPREC,web.display_origin[i]);
; 588  : #elif defined(LONGDOUBLE)
; 589  :            sprintf(msg," %*.*Lf ",DWIDTH,DPREC,web.display_origin[i]);
; 590  : #else
; 591  :            sprintf(msg," %18.15f ",web.display_origin[i]);

	fld	QWORD PTR _web[esi*8+1624]
	mov	edx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_09PGGJIFLA@?5?$CF18?415f?5?$AA@
	push	edx
	call	_sprintf

; 592  : #endif 
; 593  :            outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring

; 594  :            outstring("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	inc	esi
	add	esp, 24					; 00000018H
	cmp	esi, DWORD PTR _web+616
	jl	SHORT $LL148@top_dump
$LN146@top_dump:

; 595  :        }
; 596  :      }
; 597  : 
; 598  :   outstring("\n"); 

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring

; 599  :   if ( transform_gen_count > 0 )

	mov	esi, DWORD PTR _transform_gen_count
	xor	edi, edi
	add	esp, 4
	cmp	esi, edi
	jle	$LN145@top_dump

; 600  :   { int n = web.torus_flag?transform_gen_count-SDIM:transform_gen_count;

	cmp	DWORD PTR _web+860, edi
	je	SHORT $LN250@top_dump
	sub	esi, DWORD PTR _web+616
$LN250@top_dump:
	mov	DWORD PTR _n$89754[ebp], esi

; 601  :     if ( n > 0 )

	cmp	esi, edi
	jle	$LN369@top_dump

; 602  :     { sprintf(msg,"VIEW_TRANSFORM_GENERATORS %d \n",n); 

	mov	ecx, DWORD PTR _msg
	push	esi
	push	OFFSET ??_C@_0BP@BMCNFKOA@VIEW_TRANSFORM_GENERATORS?5?$CFd?5?6?$AA@
	push	ecx
	call	_sprintf

; 603  :       outstring(msg); 

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 16					; 00000010H

; 604  :       for ( k = 0 ; k < n ; k++ )

	mov	DWORD PTR _k$[ebp], edi
	cmp	esi, edi
	jle	$LN369@top_dump

; 602  :     { sprintf(msg,"VIEW_TRANSFORM_GENERATORS %d \n",n); 

	mov	DWORD PTR tv2619[ebp], edi
$LL372@top_dump:

; 605  :       { if ( transform_gen_swap[k] ) 

	mov	eax, DWORD PTR _transform_gen_swap
	mov	ecx, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [eax+ecx*4], 0
	je	SHORT $LN140@top_dump

; 606  :           outstring("swap_colors\n");

	push	OFFSET ??_C@_0N@EHDPGBPG@swap_colors?6?$AA@
	call	_outstring
	add	esp, 4
$LN140@top_dump:

; 607  :         for ( i = 0 ; i <= SDIM ;i++ )

	mov	eax, DWORD PTR _web+616
	xor	ebx, ebx
	test	eax, eax
	js	SHORT $LN137@top_dump
	npad	6
$LL139@top_dump:

; 608  :         { for ( j = 0 ; j <= SDIM ; j++ )

	xor	edi, edi
	test	eax, eax
	js	SHORT $LN134@top_dump
	mov	esi, DWORD PTR tv2619[ebp]
	add	esi, ebx
	imul	esi, 624				; 00000270H
$LL136@top_dump:

; 609  :           { outstring(print_express(&view_transform_gens_expr[k][i][j],' ')); 

	mov	eax, DWORD PTR _view_transform_gens_expr
	lea	ecx, DWORD PTR [esi+eax]
	push	32					; 00000020H
	push	ecx
	call	_print_express
	push	eax
	call	_outstring

; 610  :             outstring("  ");

	push	OFFSET ??_C@_02KNHHEEKP@?5?5?$AA@
	call	_outstring
	inc	edi
	add	esp, 16					; 00000010H
	add	esi, 104				; 00000068H
	cmp	edi, DWORD PTR _web+616
	jle	SHORT $LL136@top_dump
$LN134@top_dump:

; 611  :           }
; 612  :           outstring("\n"); 

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	mov	eax, DWORD PTR _web+616
	inc	ebx
	add	esp, 4
	cmp	ebx, eax
	jle	SHORT $LL139@top_dump
$LN137@top_dump:

; 613  :         }
; 614  :         outstring("\n"); 

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	mov	eax, DWORD PTR _k$[ebp]
	add	DWORD PTR tv2619[ebp], 6
	inc	eax
	add	esp, 4
	mov	DWORD PTR _k$[ebp], eax
	cmp	eax, DWORD PTR _n$89754[ebp]
	jl	$LL372@top_dump

; 615  :       }
; 616  :     }

	jmp	$LN369@top_dump
$LN145@top_dump:

; 617  :   }
; 618  :   else if ( transform_count > 1 )

	mov	eax, DWORD PTR _transform_count
	cmp	eax, 1
	jle	$LN369@top_dump

; 619  :   { sprintf(msg,"VIEW_TRANSFORMS %d \n",transform_count-1); 

	mov	edx, DWORD PTR _msg
	dec	eax
	push	eax
	push	OFFSET ??_C@_0BF@IPPJNOKE@VIEW_TRANSFORMS?5?$CFd?5?6?$AA@
	push	edx
	call	_sprintf

; 620  :     outstring(msg); 

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring

; 621  :     for ( k = 1 ; k < transform_count ; k++ )

	mov	ebx, 1
	add	esp, 16					; 00000010H
	cmp	DWORD PTR _transform_count, ebx
	jle	$LN369@top_dump
	npad	3
$LL131@top_dump:

; 622  :     { if ( transform_colors[k] == SWAP_COLORS )

	mov	ecx, DWORD PTR _transform_colors
	mov	eax, DWORD PTR [ecx+ebx*4]
	cmp	eax, 1
	jne	SHORT $LN128@top_dump

; 623  :          outstring("swap_colors\n");

	push	OFFSET ??_C@_0N@EHDPGBPG@swap_colors?6?$AA@
	call	_outstring
	add	esp, 4
	jmp	SHORT $LN126@top_dump
$LN128@top_dump:

; 624  :       else if ( transform_colors[k] != SAME_COLOR )

	test	eax, eax
	je	SHORT $LN126@top_dump

; 625  :       { sprintf(msg,"color %s\n",COLORNAME(transform_colors[k]));

	cmp	eax, -1
	jl	SHORT $LN252@top_dump
	cmp	eax, 15					; 0000000fH
	jg	SHORT $LN252@top_dump
	mov	eax, DWORD PTR _color_names[eax*4+4]
	jmp	SHORT $LN253@top_dump
$LN252@top_dump:
	mov	eax, OFFSET ??_C@_05BIMBDNDC@black?$AA@
$LN253@top_dump:
	mov	edx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_09ODFKANDG@color?5?$CFs?6?$AA@
	push	edx
	call	_sprintf

; 626  :         outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 16					; 00000010H
$LN126@top_dump:

; 627  :       }
; 628  :       for ( i = 0 ; i <= SDIM ;i++ )

	mov	eax, DWORD PTR _web+616
	xor	edi, edi
	test	eax, eax
	js	SHORT $LN123@top_dump
$LL125@top_dump:

; 629  :       { for ( j = 0 ; j <= SDIM ; j++ )

	xor	esi, esi
	test	eax, eax
	js	SHORT $LN120@top_dump
	npad	6
$LL122@top_dump:

; 630  :         { sprintf(msg,"%18.15g  ",(DOUBLE)view_transforms[k][i][j]); 

	mov	ecx, DWORD PTR _view_transforms
	mov	edx, DWORD PTR [ecx+ebx*4]
	mov	eax, DWORD PTR [edx+edi*4]
	fld	QWORD PTR [eax+esi*8]
	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_09OIDOMPID@?$CF18?415g?5?5?$AA@
	push	ecx
	call	_sprintf

; 631  :           outstring(msg); 

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	inc	esi
	add	esp, 20					; 00000014H
	cmp	esi, DWORD PTR _web+616
	jle	SHORT $LL122@top_dump
$LN120@top_dump:

; 632  :         }
; 633  :         outstring("\n"); 

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	mov	eax, DWORD PTR _web+616
	inc	edi
	add	esp, 4
	cmp	edi, eax
	jle	SHORT $LL125@top_dump
$LN123@top_dump:

; 634  :       }
; 635  :       outstring("\n"); 

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	inc	ebx
	add	esp, 4
	cmp	ebx, DWORD PTR _transform_count
	jl	$LL131@top_dump
$LN369@top_dump:

; 636  :     }
; 637  :   }
; 638  :   if ( web.meritfactor != 0.0 )

	fld	QWORD PTR _web+816
	fld	ST(0)
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN385@top_dump

; 639  :   { sprintf(msg,"MERIT_FACTOR: %2.15g\n\n",(DOUBLE)web.meritfactor); outstring(msg); }

	mov	eax, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BH@OGDALPNK@MERIT_FACTOR?3?5?$CF2?415g?6?6?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 20					; 00000014H
	jmp	SHORT $LN119@top_dump
$LN385@top_dump:
	fstp	ST(0)
$LN119@top_dump:

; 640  :   if ( web.gravflag )

	cmp	DWORD PTR _web+824, 0
	je	SHORT $LN118@top_dump

; 641  : #ifdef FLOAT128
; 642  :   { sprintf(msg,"GRAVITY_CONSTANT: %2.*Qg\n\n",DPREC,web.grav_const); outstring(msg); }
; 643  : #elif defined(LONGDOUBLE)
; 644  :   { sprintf(msg,"GRAVITY_CONSTANT: %2.*Lg\n\n",DPREC,web.grav_const); outstring(msg); }
; 645  : #else
; 646  :   { sprintf(msg,"GRAVITY_CONSTANT: %2.15g\n\n",web.grav_const); outstring(msg); }

	fld	QWORD PTR _web+832
	mov	edx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BL@JGJLLNJ@GRAVITY_CONSTANT?3?5?$CF2?415g?6?6?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 20					; 00000014H
$LN118@top_dump:

; 647  : #endif 
; 648  :   if ( web.diffusion_const != 0.0 )

	fld	QWORD PTR _web+784
	fld	ST(0)
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN388@top_dump

; 649  : #ifdef FLOAT128
; 650  :   { sprintf(msg,"DIFFUSION: %2.*Qg\n\n",DPREC,web.diffusion_const); outstring(msg); }
; 651  : #elif defined(LONGDOUBLE)
; 652  :   { sprintf(msg,"DIFFUSION: %2.*Lg\n\n",DPREC,web.diffusion_const); outstring(msg); }
; 653  : #else
; 654  :   { sprintf(msg,"DIFFUSION: %2.15g\n\n",web.diffusion_const); outstring(msg); }

	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BE@DFKJHDFE@DIFFUSION?3?5?$CF2?415g?6?6?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 20					; 00000014H
	jmp	SHORT $LN117@top_dump
$LN388@top_dump:
	fstp	ST(0)
$LN117@top_dump:

; 655  : #endif 
; 656  :   if ( autochop_flag )

	cmp	DWORD PTR _autochop_flag, 0
	je	SHORT $LN116@top_dump

; 657  :   { sprintf(msg,"AUTOCHOP %2.15g\n\n",(DOUBLE)autochop_length); outstring(msg); }

	fld	QWORD PTR _autochop_length
	mov	eax, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BC@DJLJCMJJ@AUTOCHOP?5?$CF2?415g?6?6?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 20					; 00000014H
$LN116@top_dump:

; 658  :   if ( web.homothety )

	cmp	DWORD PTR _web+904, 0
	je	SHORT $LN115@top_dump

; 659  :   { sprintf(msg,"HOMOTHETY %2.15g\n\n",(DOUBLE)homothety_target); outstring(msg); }

	fld	QWORD PTR _homothety_target
	mov	edx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BD@NGBPAK@HOMOTHETY?5?$CF2?415g?6?6?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 20					; 00000014H
$LN115@top_dump:

; 660  :   if ( match_id_flag ) outstring("KEEP_ORIGINALS\n\n");

	cmp	DWORD PTR _match_id_flag, 0
	je	SHORT $LN114@top_dump
	push	OFFSET ??_C@_0BB@JFCOMANM@KEEP_ORIGINALS?6?6?$AA@
	call	_outstring
	add	esp, 4
$LN114@top_dump:

; 661  :   if ( autopop_flag )

	cmp	DWORD PTR _autopop_flag, 0
	je	SHORT $LN113@top_dump

; 662  :      outstring("AUTOPOP\n\n");

	push	OFFSET ??_C@_09NMLPKCBD@AUTOPOP?6?6?$AA@
	call	_outstring
	add	esp, 4
$LN113@top_dump:

; 663  :   if ( immediate_autopop_flag )

	cmp	DWORD PTR _immediate_autopop_flag, 0
	je	SHORT $LN112@top_dump

; 664  :      outstring("IMMEDIATE_AUTOPOP\n\n");

	push	OFFSET ??_C@_0BE@HHIMCCOD@IMMEDIATE_AUTOPOP?6?6?$AA@
	call	_outstring
	add	esp, 4
$LN112@top_dump:

; 665  :   if ( autopop_quartic_flag )

	cmp	DWORD PTR _autopop_quartic_flag, 0
	je	SHORT $LN111@top_dump

; 666  :      outstring("AUTOPOP_QUARTIC\n\n");

	push	OFFSET ??_C@_0BC@BIBJBPCM@AUTOPOP_QUARTIC?6?6?$AA@
	call	_outstring
	add	esp, 4
$LN111@top_dump:

; 667  :   if ( effective_area_flag )

	cmp	DWORD PTR _effective_area_flag, 0
	je	SHORT $LN110@top_dump

; 668  :      outstring("EFFECTIVE_AREA\n\n"); 

	push	OFFSET ??_C@_0BB@BGMDJGGK@EFFECTIVE_AREA?6?6?$AA@
	call	_outstring
	add	esp, 4
$LN110@top_dump:

; 669  :   if ( boundary_curvature_flag )

	cmp	DWORD PTR _boundary_curvature_flag, 0
	je	SHORT $LN109@top_dump

; 670  :      outstring("BOUNDARY_CURVATURE\n\n"); 

	push	OFFSET ??_C@_0BF@IOALINFA@BOUNDARY_CURVATURE?6?6?$AA@
	call	_outstring
	add	esp, 4
$LN109@top_dump:

; 671  :   if ( normal_curvature_flag )

	cmp	DWORD PTR _normal_curvature_flag, 0
	je	SHORT $LN108@top_dump

; 672  :      outstring("NORMAL_CURVATURE\n\n");

	push	OFFSET ??_C@_0BD@LKOLFBEC@NORMAL_CURVATURE?6?6?$AA@
	call	_outstring
	add	esp, 4
$LN108@top_dump:

; 673  :   if ( total_time > 0.0 )

	fldz
	fld	QWORD PTR _total_time
	fcom	ST(1)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 65					; 00000041H
	jne	SHORT $LN391@top_dump

; 674  :      { sprintf(msg,"TOTAL_TIME %g\n\n",(DOUBLE)total_time); outstring(msg); }

	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BA@CIKNEOLK@TOTAL_TIME?5?$CFg?6?6?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 20					; 00000014H
	jmp	SHORT $LN107@top_dump
$LN391@top_dump:
	fstp	ST(0)
$LN107@top_dump:

; 675  :   if ( runge_kutta_flag )

	cmp	DWORD PTR _runge_kutta_flag, 0
	je	SHORT $LN106@top_dump

; 676  :      outstring("RUNGE_KUTTA\n\n"); 

	push	OFFSET ??_C@_0O@IEJLEOOO@RUNGE_KUTTA?6?6?$AA@
	call	_outstring
	add	esp, 4
$LN106@top_dump:

; 677  :   if ( square_curvature_flag )

	cmp	DWORD PTR _square_curvature_flag, 0
	je	$LN370@top_dump

; 678  :      { sprintf(msg,"SQUARE_CURVATURE: %2.15g\n\n",
; 679  :             (DOUBLE)globals(square_curvature_param)->value.real); outstring(msg); }

	mov	eax, DWORD PTR _square_curvature_param
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN254@top_dump
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN256@top_dump
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN255@top_dump
$LN256@top_dump:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN254@top_dump
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN255@top_dump
$LN254@top_dump:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN255@top_dump:
	fld	QWORD PTR [eax+64]
	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BL@CAKAJBAB@SQUARE_CURVATURE?3?5?$CF2?415g?6?6?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 20					; 00000014H
$LN370@top_dump:

; 680  :   if ( sqgauss_flag )

	cmp	DWORD PTR _sqgauss_flag, 0
	je	$LN379@top_dump

; 681  :      { sprintf(msg,"SQUARE_GAUSSIAN_CURVATURE: %2.15g\n\n",
; 682  :             (DOUBLE)globals(sqgauss_param)->value.real); outstring(msg); }

	mov	eax, DWORD PTR _sqgauss_param
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN260@top_dump
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN262@top_dump
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN261@top_dump
$LN262@top_dump:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN260@top_dump
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN261@top_dump
$LN260@top_dump:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN261@top_dump:
	fld	QWORD PTR [eax+64]
	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CE@OAJLHIGK@SQUARE_GAUSSIAN_CURVATURE?3?5?$CF2?415@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 20					; 00000014H
$LN379@top_dump:

; 683  :   if ( mean_curv_int_flag )

	cmp	DWORD PTR _mean_curv_int_flag, 0
	je	$LN103@top_dump

; 684  :      { sprintf(msg,"MEAN_CURVATURE_INTEGRAL: %2.15g\n\n",
; 685  :             (DOUBLE)globals(square_curvature_param)->value.real); outstring(msg); }

	mov	eax, DWORD PTR _square_curvature_param
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN266@top_dump
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN268@top_dump
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN267@top_dump
$LN268@top_dump:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN266@top_dump
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN267@top_dump
$LN266@top_dump:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN267@top_dump:
	fld	QWORD PTR [eax+64]
	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CC@OBFFBDJB@MEAN_CURVATURE_INTEGRAL?3?5?$CF2?415g?6@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 20					; 00000014H
$LN103@top_dump:

; 686  :   if ( web.wulff_flag )

	cmp	DWORD PTR _web+908, 0
	je	SHORT $LN102@top_dump

; 687  :      { sprintf(msg,"WULFF:      \"%s\"\n\n",web.wulff_name); outstring(msg); }

	mov	eax, DWORD PTR _msg
	push	OFFSET _web+916
	push	OFFSET ??_C@_0BD@DAHNFEEE@WULFF?3?5?5?5?5?5?5?$CC?$CFs?$CC?6?6?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 16					; 00000010H
$LN102@top_dump:

; 688  :   if ( phase_flag )

	cmp	DWORD PTR _phase_flag, 0
	je	SHORT $LN101@top_dump

; 689  :      { sprintf(msg,"PHASEFILE \"%s\"\n\n",phase_file_name); outstring(msg); }

	mov	edx, DWORD PTR _msg
	push	OFFSET _phase_file_name
	push	OFFSET ??_C@_0BB@HOHOCNJJ@PHASEFILE?5?$CC?$CFs?$CC?6?6?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 16					; 00000010H
$LN101@top_dump:

; 690  :   if ( web.spring_constant != 1.0 )

	fld	QWORD PTR _web+1584
	fld	ST(0)
	fld1
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN394@top_dump

; 691  :      { sprintf(msg,"GAP_CONSTANT: %2.15g\n\n",(DOUBLE)web.spring_constant); outstring(msg); }

	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BH@CIAOINJD@GAP_CONSTANT?3?5?$CF2?415g?6?6?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 20					; 00000014H
	jmp	SHORT $LN100@top_dump
$LN394@top_dump:
	fstp	ST(0)
$LN100@top_dump:

; 692  :   if ( web.area_norm_flag )

	cmp	DWORD PTR _web+876, 0
	je	SHORT $LN99@top_dump

; 693  :      { sprintf(msg,"AREA_NORMALIZATION \n\n"); outstring(msg); }

	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0BG@IKMCNICP@AREA_NORMALIZATION?5?6?6?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 12					; 0000000cH
$LN99@top_dump:

; 694  :   if ( web.jiggle_flag )

	cmp	DWORD PTR _web+900, 0
	je	SHORT $LN98@top_dump

; 695  :      { sprintf(msg,"JIGGLE\n\n"); outstring(msg); }

	mov	edx, DWORD PTR _msg
	push	OFFSET ??_C@_08DBNILKDG@JIGGLE?6?6?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 12					; 0000000cH
$LN98@top_dump:

; 696  :   if ( web.temperature != 0.05 )

	fld	QWORD PTR _web+1576
	fld	ST(0)
	fld	QWORD PTR __real@3fa999999999999a
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN397@top_dump

; 697  :      { sprintf(msg,"TEMPERATURE: %2.15g\n\n",(DOUBLE)web.temperature); outstring(msg); }

	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BG@IAEPDHA@TEMPERATURE?3?5?$CF2?415g?6?6?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 20					; 00000014H
	jmp	SHORT $LN97@top_dump
$LN397@top_dump:
	fstp	ST(0)
$LN97@top_dump:

; 698  :   if ( web.pressure != 0.0 )

	fld	QWORD PTR _web+1536
	fld	ST(0)
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN400@top_dump

; 699  :      { sprintf(msg,"PRESSURE: %2.15g\n\n",(DOUBLE)web.pressure); outstring(msg); }

	mov	eax, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BD@LNJOLKLL@PRESSURE?3?5?$CF2?415g?6?6?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 20					; 00000014H
	jmp	SHORT $LN96@top_dump
$LN400@top_dump:
	fstp	ST(0)
$LN96@top_dump:

; 700  :   if ( web.maxscale != 1.0 )

	fld	QWORD PTR _web+1528
	fld	ST(0)
	fld1
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN403@top_dump

; 701  :      { sprintf(msg,"SCALE_LIMIT: %2.15g\n\n",(DOUBLE)web.maxscale); outstring(msg); }

	mov	edx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BG@IJFNEIMI@SCALE_LIMIT?3?5?$CF2?415g?6?6?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 20					; 00000014H
	jmp	SHORT $LN95@top_dump
$LN403@top_dump:
	fstp	ST(0)
$LN95@top_dump:

; 702  :   if ( web.gauss1D_order != 3 )

	mov	eax, DWORD PTR _web+1592
	cmp	eax, 3
	je	SHORT $LN94@top_dump

; 703  :      { sprintf(msg,"INTEGRAL_ORDER_1D: %d\n\n",web.gauss1D_order); outstring(msg); }

	mov	ecx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0BI@JCMJECBM@INTEGRAL_ORDER_1D?3?5?$CFd?6?6?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 16					; 00000010H
$LN94@top_dump:

; 704  :   if ( (web.dimension > 1) && (web.gauss2D_order != 6) )

	cmp	DWORD PTR _web+620, 1
	jle	SHORT $LN93@top_dump
	mov	eax, DWORD PTR _web+1596
	cmp	eax, 6
	je	SHORT $LN93@top_dump

; 705  :      { sprintf(msg,"INTEGRAL_ORDER_2D: %d\n\n",web.gauss2D_order); outstring(msg); }

	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0BI@KLEEHONJ@INTEGRAL_ORDER_2D?3?5?$CFd?6?6?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 16					; 00000010H
$LN93@top_dump:

; 706  :   if ( web.maxcon )

	cmp	DWORD PTR _web+644, 0
	je	SHORT $LN92@top_dump

; 707  :      { sprintf(msg,"CONSTRAINT_TOLERANCE: %2.15g\n\n",(DOUBLE)web.tolerance); outstring(msg); }

	fld	QWORD PTR _web+752
	mov	edx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BP@ONGIFHGD@CONSTRAINT_TOLERANCE?3?5?$CF2?415g?6?6?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 20					; 00000014H
$LN92@top_dump:

; 708  :   if ( web.symmetric_content )

	cmp	DWORD PTR _web+808, 0
	je	SHORT $LN91@top_dump

; 709  :      { sprintf(msg,"SYMMETRIC_CONTENT\n\n"); outstring(msg); }

	mov	ecx, DWORD PTR _msg
	push	OFFSET ??_C@_0BE@JIAEIGGF@SYMMETRIC_CONTENT?6?6?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 12					; 0000000cH
$LN91@top_dump:

; 710  : 
; 711  : /* Too many problems for too little use
; 712  :   if ( loc_ordinal(web.zoom_v) >= 0 ) 
; 713  :      { sprintf(msg,"ZOOM_VERTEX  %s\n\n",ELNAME(web.zoom_v)); outstring(msg); }
; 714  :   if ( web.zoom_radius < 9000.0 )
; 715  :      { sprintf(msg,"ZOOM_RADIUS  %2.15g\n\n",(DOUBLE)web.zoom_radius); outstring(msg); }
; 716  : */
; 717  : 
; 718  :   if ( klein_metric_flag ) { sprintf(msg,"KLEIN_METRIC\n\n"); outstring(msg); }

	cmp	DWORD PTR _klein_metric_flag, 0
	je	SHORT $LN90@top_dump
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_0P@GFGAOLIE@KLEIN_METRIC?6?6?$AA@
	push	eax
	call	_sprintf
	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 12					; 0000000cH
$LN90@top_dump:

; 719  :   if ( web.conformal_flag )

	cmp	DWORD PTR _web+1680, 0
	je	SHORT $LN89@top_dump

; 720  :   { sprintf(msg,"CONFORMAL_METRIC\n"); outstring(msg); 

	mov	edx, DWORD PTR _msg
	push	OFFSET ??_C@_0BC@EEACCLMG@CONFORMAL_METRIC?6?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring

; 721  :     /* metric expression */
; 722  :     outstring(print_express(&web.metric[0][0],'X'));

	push	88					; 00000058H
	push	OFFSET _web+1688
	call	_print_express
	push	eax
	call	_outstring

; 723  :     outstring("\n\n"); 

	push	OFFSET ??_C@_02PHMGELLB@?6?6?$AA@
	call	_outstring
	add	esp, 28					; 0000001cH
	jmp	$LN87@top_dump
$LN89@top_dump:

; 724  :   }
; 725  :   else if ( web.metric_flag && web.metric[0][0].root )

	cmp	DWORD PTR _web+1676, 0
	je	$LN87@top_dump
	cmp	DWORD PTR _web+1692, 0
	je	$LN87@top_dump

; 726  :   { sprintf(msg,"METRIC\n"); outstring(msg); 

	mov	ecx, DWORD PTR _msg
	push	OFFSET ??_C@_07IFJFLHJK@METRIC?6?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 727  :     /* metric expressions */
; 728  :     for ( i = 0 ; i < SDIM ; i++ )

	mov	eax, DWORD PTR _web+616
	add	esp, 12					; 0000000cH
	xor	ebx, ebx
	test	eax, eax
	jle	SHORT $LN371@top_dump

; 726  :   { sprintf(msg,"METRIC\n"); outstring(msg); 

	mov	DWORD PTR tv2732[ebp], OFFSET _web+1688
	npad	5
$LL86@top_dump:

; 729  :     { for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	test	eax, eax
	jle	SHORT $LN81@top_dump
	mov	edi, DWORD PTR tv2732[ebp]
	npad	7
$LL83@top_dump:

; 730  :       { outstring(" "); 

	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	call	_outstring

; 731  :         outstring(print_express(&web.metric[i][j],'X'));

	push	88					; 00000058H
	push	edi
	call	_print_express
	push	eax
	call	_outstring
	inc	esi
	add	esp, 16					; 00000010H
	add	edi, 104				; 00000068H
	cmp	esi, DWORD PTR _web+616
	jl	SHORT $LL83@top_dump
$LN81@top_dump:

; 732  :       }
; 733  :       outstring("\n"); 

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	mov	eax, DWORD PTR _web+616
	add	DWORD PTR tv2732[ebp], 624		; 00000270H
	inc	ebx
	add	esp, 4
	cmp	ebx, eax
	jl	SHORT $LL86@top_dump
$LN371@top_dump:

; 734  :     }
; 735  :     outstring("\n"); 

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	add	esp, 4
$LN87@top_dump:

; 736  :   }
; 737  : 
; 738  :   /* extra attributes for elements */
; 739  :   did_section_title = 0;

	mov	DWORD PTR tv2881[ebp], OFFSET _web+108
	mov	eax, DWORD PTR tv2881[ebp]
	mov	DWORD PTR _did_section_title$[ebp], 0
	mov	DWORD PTR tv2879[ebp], OFFSET _typenames
	npad	6
$LL80@top_dump:

; 741  :   { struct extra *ex;
; 742  :     for ( i = 0, ex = EXTRAS(e_type) ; 
; 743  :                 i < web.skel[e_type].extra_count ; i++, ex++ )

	mov	ebx, DWORD PTR [eax-4]
	add	ebx, DWORD PTR _dymem
	cmp	DWORD PTR [eax], 0
	mov	DWORD PTR _i$[ebp], 0
	jle	$LN79@top_dump
	npad	7
$LL380@top_dump:

; 744  :      { if ( !(ex->flags & DUMP_ATTR) ) continue;

	test	BYTE PTR [ebx+232], 1
	je	$LN76@top_dump

; 745  :        if ( !did_section_title )

	cmp	DWORD PTR _did_section_title$[ebp], 0
	jne	SHORT $LN73@top_dump

; 746  :        { outstring("\n//Extra attributes for elements\n");

	push	OFFSET ??_C@_0CC@JDLNKOIA@?6?1?1Extra?5attributes?5for?5elements@
	call	_outstring
	add	esp, 4

; 747  :          did_section_title = 1;

	mov	DWORD PTR _did_section_title$[ebp], 1
$LN73@top_dump:

; 748  :        }
; 749  :        sprintf(msg,"\ndefine %s attribute %s %s",typenames[e_type], ex->name,
; 750  :           datatype_name[ex->type]);

	mov	eax, DWORD PTR [ebx+68]
	mov	ecx, DWORD PTR _datatype_name[eax*4]
	mov	edx, DWORD PTR tv2879[ebp]
	mov	eax, DWORD PTR [edx]
	push	ecx
	mov	ecx, DWORD PTR _msg
	push	ebx
	push	eax
	push	OFFSET ??_C@_0BL@EELIHABE@?6define?5?$CFs?5attribute?5?$CFs?5?$CFs?$AA@
	push	ecx
	call	_sprintf

; 751  :        for ( j = 0 ; j < ex->array_spec.dim ; j++)

	xor	esi, esi
	add	esp, 20					; 00000014H
	cmp	DWORD PTR [ebx+76], esi
	jle	SHORT $LN70@top_dump

; 741  :   { struct extra *ex;
; 742  :     for ( i = 0, ex = EXTRAS(e_type) ; 
; 743  :                 i < web.skel[e_type].extra_count ; i++, ex++ )

	lea	edi, DWORD PTR [ebx+96]
	npad	9
$LL72@top_dump:

; 752  :           sprintf(msg+strlen(msg),"[%d]",ex->array_spec.sizes[j]);

	mov	edx, DWORD PTR _msg
	mov	eax, edx
	lea	ecx, DWORD PTR [eax+1]
	mov	DWORD PTR tv2873[ebp], ecx
	npad	2
$LL355@top_dump:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL355@top_dump
	mov	ecx, DWORD PTR [edi]
	sub	eax, DWORD PTR tv2873[ebp]
	push	ecx
	add	eax, edx
	push	OFFSET ??_C@_04KBDJOJNB@?$FL?$CFd?$FN?$AA@
	push	eax
	call	_sprintf
	inc	esi
	add	esp, 12					; 0000000cH
	add	edi, 4
	cmp	esi, DWORD PTR [ebx+76]
	jl	SHORT $LL72@top_dump
$LN70@top_dump:

; 753  :        if ( ex->code.start ) 

	cmp	DWORD PTR [ebx+128], 0
	je	SHORT $LN69@top_dump

; 754  :           sprintf(msg+strlen(msg),
; 755  :             " // function definition in READ section");

	mov	edx, DWORD PTR _msg
	mov	eax, edx
	lea	esi, DWORD PTR [eax+1]
	npad	6
$LL356@top_dump:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL356@top_dump
	sub	eax, esi
	add	eax, edx
	push	OFFSET ??_C@_0CI@HKOFEKJL@?5?1?1?5function?5definition?5in?5READ?5@
	push	eax
	call	_sprintf
	add	esp, 8
$LN69@top_dump:

; 756  :        strcat(msg,"\n");

	mov	edi, DWORD PTR _msg
	dec	edi
$LL357@top_dump:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL357@top_dump
	mov	dx, WORD PTR ??_C@_01EEMJAFIK@?6?$AA@
	mov	WORD PTR [edi], dx

; 757  :        outstring(msg);       

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	mov	eax, DWORD PTR tv2881[ebp]
	add	esp, 4
$LN76@top_dump:

; 741  :   { struct extra *ex;
; 742  :     for ( i = 0, ex = EXTRAS(e_type) ; 
; 743  :                 i < web.skel[e_type].extra_count ; i++, ex++ )

	mov	ecx, DWORD PTR _i$[ebp]
	inc	ecx
	add	ebx, 240				; 000000f0H
	mov	DWORD PTR _i$[ebp], ecx
	cmp	ecx, DWORD PTR [eax]
	jl	$LL380@top_dump
$LN79@top_dump:

; 740  :   for ( e_type = VERTEX ; e_type <= FACETEDGE ; e_type++ )

	add	DWORD PTR tv2879[ebp], 4
	add	eax, 112				; 00000070H
	mov	DWORD PTR tv2881[ebp], eax
	cmp	eax, OFFSET _web+556
	jle	$LL80@top_dump

; 758  :      }
; 759  :   }
; 760  :   if ( did_section_title )

	cmp	DWORD PTR _did_section_title$[ebp], 0
	je	SHORT $LN361@top_dump

; 761  :     outstring("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	add	esp, 4
$LN361@top_dump:

; 762  : 
; 763  :   /* view matrix */
; 764  :   outstring("VIEW_MATRIX \n");

	push	OFFSET ??_C@_0O@LPABLJLG@VIEW_MATRIX?5?6?$AA@
	call	_outstring

; 765  :   for ( i = 0 ; i <= SDIM ;i++ )

	mov	ebx, DWORD PTR _web+616
	add	esp, 4
	xor	edi, edi
	test	ebx, ebx
	js	SHORT $LN65@top_dump
	npad	7
$LL67@top_dump:

; 766  :   { for ( j = 0 ; j <= SDIM ; j++ )

	xor	esi, esi
	test	ebx, ebx
	js	SHORT $LN62@top_dump
	npad	10
$LL64@top_dump:

; 767  :     { sprintf(msg,"%18.15f  ", (DOUBLE)view[i][j]); 

	mov	ecx, DWORD PTR _view
	mov	edx, DWORD PTR [ecx+edi*4]
	fld	QWORD PTR [edx+esi*8]
	mov	eax, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_09FAICKIOG@?$CF18?415f?5?5?$AA@
	push	eax
	call	_sprintf

; 768  :       outstring(msg); 

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	inc	esi
	add	esp, 20					; 00000014H
	cmp	esi, DWORD PTR _web+616
	jle	SHORT $LL64@top_dump
$LN62@top_dump:

; 769  :     }
; 770  :     outstring("\n"); 

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	mov	ebx, DWORD PTR _web+616
	inc	edi
	add	esp, 4
	cmp	edi, ebx
	jle	SHORT $LL67@top_dump
$LN65@top_dump:

; 771  :   }
; 772  : 
; 773  :   /* Clipping and slicing planes */
; 774  : //  if ( clip_coeff_set_flag )
; 775  :   if ( !(clip_coeff[0][0]==0.0 && clip_coeff[0][1]==0.0 && 
; 776  :        clip_coeff[0][2]==0.0 && clip_coeff[0][3]==0.0) )

	fld	QWORD PTR _clip_coeff
	fld	ST(0)
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	SHORT $LN60@top_dump
	fld	QWORD PTR _clip_coeff+8
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN60@top_dump
	fld	QWORD PTR _clip_coeff+16
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN60@top_dump
	fld	QWORD PTR _clip_coeff+24
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN412@top_dump
$LN60@top_dump:

; 777  :   { int maxclip = -1;
; 778  :     // see what coefficients are non-default
; 779  :     for ( i = 0 ; i < MAXCLIPS ; i++ )

	fld1
	or	esi, -1
	xor	edx, edx
$LN59@top_dump:

; 780  :       for ( j = 0 ; j <= SDIM ; j++ )

	xor	ecx, ecx
	test	ebx, ebx
	js	SHORT $LN58@top_dump
$LN56@top_dump:

; 781  :       { if ( (i==0) && (j==0) )

	test	edx, edx
	jne	SHORT $LN53@top_dump
	test	ecx, ecx
	jne	SHORT $LN53@top_dump

; 782  :         { if ( clip_coeff[i][j] != 1.0 )

	fld	ST(2)
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN55@top_dump

; 783  :             maxclip = i;

	xor	esi, esi

; 784  :         }
; 785  :         else if ( clip_coeff[i][j] != 0.0 )

	jmp	SHORT $LN55@top_dump
$LN53@top_dump:
	lea	eax, DWORD PTR [ecx+edx*8]
	fld	QWORD PTR _clip_coeff[eax*8]
	fld	ST(2)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN55@top_dump

; 786  :           maxclip = i;

	mov	esi, edx
$LN55@top_dump:

; 780  :       for ( j = 0 ; j <= SDIM ; j++ )

	inc	ecx
	cmp	ecx, ebx
	jle	SHORT $LN56@top_dump
$LN58@top_dump:

; 777  :   { int maxclip = -1;
; 778  :     // see what coefficients are non-default
; 779  :     for ( i = 0 ; i < MAXCLIPS ; i++ )

	inc	edx
	cmp	edx, 10					; 0000000aH
	jl	SHORT $LN59@top_dump
	fstp	ST(2)

; 783  :             maxclip = i;

	mov	DWORD PTR _maxclip$89906[ebp], esi
	fstp	ST(1)

; 787  :       }
; 788  :     if ( maxclip >= 0 )

	test	esi, esi
	js	$LN375@top_dump

; 789  :     { outstring("clip_coeff = {");

	push	OFFSET ??_C@_0P@LLOBJGMC@clip_coeff?5?$DN?5?$HL?$AA@
	fstp	ST(0)
	call	_outstring
	add	esp, 4

; 790  :       for ( i = 0 ; i <= maxclip ; i++ )

	xor	ebx, ebx
	test	esi, esi
	js	$LN46@top_dump

; 789  :     { outstring("clip_coeff = {");

	mov	edi, OFFSET _clip_coeff
	mov	DWORD PTR tv2982[ebp], edi
$LL48@top_dump:

; 791  :       { 
; 792  :         if ( i > 0 ) outstring(",{");

	test	ebx, ebx
	jle	SHORT $LN45@top_dump
	push	OFFSET ??_C@_02PNCCDJFE@?0?$HL?$AA@
	jmp	SHORT $LN444@top_dump
$LN45@top_dump:

; 793  :         else outstring("{");

	push	OFFSET ??_C@_01HCONENDN@?$HL?$AA@
$LN444@top_dump:
	call	_outstring

; 794  :         for ( j = 0 ; j <= SDIM ; j++ )

	xor	esi, esi
	add	esp, 4
	cmp	DWORD PTR _web+616, esi
	jl	SHORT $LN41@top_dump
	npad	6
$LL43@top_dump:

; 795  :         { sprintf(msg,"%8.5f",(DOUBLE)clip_coeff[i][j]);

	fld	QWORD PTR [edi]
	mov	ecx, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_05NJOHAKMJ@?$CF8?45f?$AA@
	push	ecx
	call	_sprintf

; 796  :           outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring
	add	esp, 20					; 00000014H

; 797  :           if ( j < SDIM )

	cmp	esi, DWORD PTR _web+616
	jge	SHORT $LN42@top_dump

; 798  :              outstring(",");

	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	call	_outstring
	add	esp, 4
$LN42@top_dump:

; 794  :         for ( j = 0 ; j <= SDIM ; j++ )

	inc	esi
	add	edi, 8
	cmp	esi, DWORD PTR _web+616
	jle	SHORT $LL43@top_dump
$LN41@top_dump:

; 799  :         }
; 800  :         outstring("}");

	push	OFFSET ??_C@_01CELHOKLL@?$HN?$AA@
	call	_outstring
	mov	edi, DWORD PTR tv2982[ebp]
	inc	ebx
	add	edi, 64					; 00000040H
	add	esp, 4
	mov	DWORD PTR tv2982[ebp], edi
	cmp	ebx, DWORD PTR _maxclip$89906[ebp]
	jle	$LL48@top_dump
$LN46@top_dump:

; 801  :       }
; 802  :       outstring("}\n\n");

	push	OFFSET ??_C@_03LAJGDFPO@?$HN?6?6?$AA@
	call	_outstring
	fldz
	add	esp, 4
	jmp	SHORT $LN375@top_dump
$LN412@top_dump:
	fstp	ST(1)
$LN375@top_dump:

; 803  :     }
; 804  : 
; 805  :   }
; 806  : 
; 807  :   // see if slice_coeff needs to be printed
; 808  : //  if ( slice_coeff_set_flag )
; 809  :   if ( !(slice_coeff[0]==0.0 && slice_coeff[1]==0.0 && 
; 810  :        slice_coeff[2]==0.0 && slice_coeff[3]==0.0) )

	fld	QWORD PTR _slice_coeff
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN420@top_dump
	fld	QWORD PTR _slice_coeff+8
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN420@top_dump
	fld	QWORD PTR _slice_coeff+16
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN420@top_dump
	fld	QWORD PTR _slice_coeff+24
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN39@top_dump
	jmp	SHORT $LN38@top_dump
$LN420@top_dump:
	fstp	ST(0)
$LN38@top_dump:

; 811  :   { outstring("slice_coeff = {");

	push	OFFSET ??_C@_0BA@IOIIIKB@slice_coeff?5?$DN?5?$HL?$AA@
	call	_outstring

; 812  :     for ( j = 0 ; j <= SDIM ; j++ )

	xor	esi, esi
	add	esp, 4
	cmp	DWORD PTR _web+616, esi
	jl	SHORT $LN35@top_dump
	npad	7
$LL37@top_dump:

; 813  :     { sprintf(msg,"%8.5f",(DOUBLE)slice_coeff[j]);

	fld	QWORD PTR _slice_coeff[esi*8]
	mov	eax, DWORD PTR _msg
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_05NJOHAKMJ@?$CF8?45f?$AA@
	push	eax
	call	_sprintf

; 814  :       outstring(msg);

	mov	ecx, DWORD PTR _msg
	push	ecx
	call	_outstring
	add	esp, 20					; 00000014H

; 815  :       if ( j < SDIM )

	cmp	esi, DWORD PTR _web+616
	jge	SHORT $LN36@top_dump

; 816  :         outstring(",");

	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	call	_outstring
	add	esp, 4
$LN36@top_dump:

; 812  :     for ( j = 0 ; j <= SDIM ; j++ )

	inc	esi
	cmp	esi, DWORD PTR _web+616
	jle	SHORT $LL37@top_dump
$LN35@top_dump:

; 817  :     }
; 818  :     outstring("}\n\n");

	push	OFFSET ??_C@_03LAJGDFPO@?$HN?6?6?$AA@
	call	_outstring
	add	esp, 4
$LN39@top_dump:

; 819  :   }
; 820  : 
; 821  : 
; 822  :   if ( mobility_flag ) /* after element attributes, since it can use them */

	cmp	DWORD PTR _mobility_flag, 0
	je	$LN363@top_dump

; 823  :   { if ( mobility_tensor_flag )

	cmp	DWORD PTR _mobility_tensor_flag, 0
	je	$LN32@top_dump

; 824  :     { outstring("MOBILITY_TENSOR\n"); 

	push	OFFSET ??_C@_0BB@CFIAJAFB@MOBILITY_TENSOR?6?$AA@
	call	_outstring

; 825  :       /* mobility tensor expressions */
; 826  :       for ( i = 0 ; i < SDIM ; i++ )

	mov	eax, DWORD PTR _web+616
	add	esp, 4
	xor	ebx, ebx
	test	eax, eax
	jle	SHORT $LN362@top_dump

; 824  :     { outstring("MOBILITY_TENSOR\n"); 

	mov	DWORD PTR tv3030[ebp], OFFSET _mobility_tensor
$LL31@top_dump:

; 827  :       { for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	test	eax, eax
	jle	SHORT $LN26@top_dump
	mov	edi, DWORD PTR tv3030[ebp]
	npad	7
$LL28@top_dump:

; 828  :         { outstring(" "); 

	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	call	_outstring

; 829  :           outstring(print_express(&mobility_tensor[i][j],'X'));

	push	88					; 00000058H
	push	edi
	call	_print_express
	push	eax
	call	_outstring
	inc	esi
	add	esp, 16					; 00000010H
	add	edi, 104				; 00000068H
	cmp	esi, DWORD PTR _web+616
	jl	SHORT $LL28@top_dump
$LN26@top_dump:

; 830  :         }
; 831  :         outstring("\n"); 

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	mov	eax, DWORD PTR _web+616
	add	DWORD PTR tv3030[ebp], 624		; 00000270H
	inc	ebx
	add	esp, 4
	cmp	ebx, eax
	jl	SHORT $LL31@top_dump
$LN362@top_dump:

; 832  :       }
; 833  :       outstring("\n"); 

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	add	esp, 4

; 834  :     }
; 835  :     else

	jmp	SHORT $LN363@top_dump
$LN32@top_dump:

; 836  :     { outstring("MOBILITY: ");

	push	OFFSET ??_C@_0L@EMLBJNPP@MOBILITY?3?5?$AA@
	call	_outstring

; 837  :       outstring(print_express(&mobility_formula,'X'));

	push	88					; 00000058H
	push	OFFSET _mobility_formula
	call	_print_express
	push	eax
	call	_outstring

; 838  :       outstring("\n\n"); 

	push	OFFSET ??_C@_02PHMGELLB@?6?6?$AA@
	call	_outstring
	add	esp, 20					; 00000014H
$LN363@top_dump:

; 839  :     }
; 840  :   }
; 841  : 
; 842  :   // unset method instance print flags
; 843  :   for ( k = LOW_INST  ; k < meth_inst_count  ; k++ )

	mov	ebx, DWORD PTR _web+5560
	mov	ecx, 1
	cmp	ebx, ecx
	jle	SHORT $LN22@top_dump
	mov	esi, 2147483647				; 7fffffffH
$LL24@top_dump:

; 844  :   { mi = METH_INSTANCE(k);

	mov	eax, ecx
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list
	inc	ecx

; 845  :     mi->flags &= ~PRINTED_INST;

	and	DWORD PTR [eax+140], esi
	mov	ebx, DWORD PTR _web+5560
	cmp	ecx, ebx
	jl	SHORT $LL24@top_dump
$LN22@top_dump:

; 846  :   }
; 847  : 
; 848  :   /* unattached instances, probably from compound quantities */
; 849  :   for ( k = LOW_INST  ; k < meth_inst_count  ; k++ )

	mov	edi, 1
	cmp	ebx, edi
	jle	SHORT $LN359@top_dump
	npad	2
$LL21@top_dump:

; 850  :   { mi = METH_INSTANCE(k);

	mov	eax, edi
	cdq
	mov	esi, eax
	xor	esi, edx
	sub	esi, edx
	imul	esi, 2928				; 00000b70H
	add	esi, DWORD PTR _meth_inst_list

; 851  :     if ( (mi->quants[0] >= 0) && !(GEN_QUANT(mi->quants[0])->flags & DEFAULT_QUANTITY) ) 

	mov	eax, DWORD PTR [esi+152]
	test	eax, eax
	js	SHORT $LN18@top_dump
	mov	edx, DWORD PTR _gen_quant_list
	imul	eax, 368				; 00000170H
	test	DWORD PTR [eax+edx+136], 8192		; 00002000H
	je	SHORT $LN20@top_dump
$LN18@top_dump:

; 852  :       continue; /* has a quantity */ 
; 853  :     if ( mi->flags & (Q_DELETED|DEFAULT_INSTANCE|PRINTED_INST) )

	test	DWORD PTR [esi+140], -2142765056	; 80480000H
	jne	SHORT $LN20@top_dump

; 854  :        continue;
; 855  :     list_method_instance(k);

	push	edi
	call	_list_method_instance
	add	esp, 4

; 856  :     mi->flags |= PRINTED_INST; 

	or	DWORD PTR [esi+140], -2147483648	; 80000000H
	mov	ebx, DWORD PTR _web+5560
$LN20@top_dump:

; 846  :   }
; 847  : 
; 848  :   /* unattached instances, probably from compound quantities */
; 849  :   for ( k = LOW_INST  ; k < meth_inst_count  ; k++ )

	inc	edi
	cmp	edi, ebx
	jl	SHORT $LL21@top_dump
$LN359@top_dump:

; 857  :   }
; 858  : 
; 859  :   /* named quantities */
; 860  :   for (  k = 0 ; k < gen_quant_count ; k++ )

	xor	esi, esi
	cmp	DWORD PTR _web+5528, esi
	jle	SHORT $LN14@top_dump
	xor	edi, edi
	mov	ebx, 532480				; 00082000H
	npad	13
$LL16@top_dump:

; 861  :   { q = GEN_QUANT(k);
; 862  :     if ( q->flags & (DEFAULT_QUANTITY|Q_DELETED) ) continue;

	mov	eax, DWORD PTR _gen_quant_list
	test	DWORD PTR [edi+eax+136], ebx
	jne	SHORT $LN15@top_dump

; 863  :     list_quantity(k);

	push	esi
	call	_list_quantity
	add	esp, 4
$LN15@top_dump:

; 857  :   }
; 858  : 
; 859  :   /* named quantities */
; 860  :   for (  k = 0 ; k < gen_quant_count ; k++ )

	inc	esi
	add	edi, 368				; 00000170H
	cmp	esi, DWORD PTR _web+5528
	jl	SHORT $LL16@top_dump
$LN14@top_dump:

; 864  :    }
; 865  : 
; 866  :   if ( hessian_special_normal_expr[0].start )

	cmp	DWORD PTR _hessian_special_normal_expr, 0
	je	SHORT $LN12@top_dump

; 867  :   { outstring("\nhessian_special_normal_vector\n");

	push	OFFSET ??_C@_0CA@KGMEHLCD@?6hessian_special_normal_vector?6?$AA@
	call	_outstring

; 868  :     for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	add	esp, 4
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN373@top_dump

; 867  :   { outstring("\nhessian_special_normal_vector\n");

	mov	edi, OFFSET _hessian_special_normal_expr
	npad	5
$LL11@top_dump:

; 869  :     { sprintf(msg,"c%d: ",i+1); outstring(msg);

	mov	ecx, DWORD PTR _msg
	lea	esi, DWORD PTR [eax+1]
	push	esi
	push	OFFSET ??_C@_05MBEAKHGM@c?$CFd?3?5?$AA@
	push	ecx
	call	_sprintf
	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 870  :       outstring(print_express(hessian_special_normal_expr+i,'x'));

	push	120					; 00000078H
	push	edi
	call	_print_express
	push	eax
	call	_outstring

; 871  :       outstring("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	mov	eax, esi
	add	esp, 32					; 00000020H
	add	edi, 104				; 00000068H
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LL11@top_dump
$LN373@top_dump:

; 872  :     }
; 873  :     outstring("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_outstring
	add	esp, 4
$LN12@top_dump:

; 874  :   }
; 875  :   /* print boundary info */
; 876  :   for ( i = 0 ; i < web.bdrymax ; i++ )

	xor	esi, esi
	cmp	DWORD PTR _web+768, esi
	jle	SHORT $LN364@top_dump
	xor	edi, edi
$LL8@top_dump:

; 877  :   { struct boundary * bdry = web.boundaries + i;
; 878  :     if ( !(bdry->attr & IN_USE) ) continue;

	mov	eax, DWORD PTR _web+776
	mov	eax, DWORD PTR [edi+eax+32]
	and	eax, 32					; 00000020H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN7@top_dump

; 879  :     list_boundary(i);

	push	esi
	call	_list_boundary
	add	esp, 4
$LN7@top_dump:

; 874  :   }
; 875  :   /* print boundary info */
; 876  :   for ( i = 0 ; i < web.bdrymax ; i++ )

	inc	esi
	add	edi, 136				; 00000088H
	cmp	esi, DWORD PTR _web+768
	jl	SHORT $LL8@top_dump
$LN364@top_dump:

; 880  :   }
; 881  : 
; 882  : 
; 883  :   /* print constraint info */
; 884  :   for ( i = 0 ; i < web.maxcon ; i++ )

	xor	esi, esi
	pop	edi
	pop	ebx
	cmp	DWORD PTR _web+644, esi
	jle	SHORT $LN358@top_dump
	npad	8
$LL4@top_dump:

; 885  :   { struct constraint *con = get_constraint(i);
; 886  : 
; 887  :     if ( !(con->attr & IN_USE) ) continue;

	mov	ecx, DWORD PTR _web+652
	mov	eax, esi
	and	eax, 1073741823				; 3fffffffH
	imul	eax, 176				; 000000b0H
	mov	eax, DWORD PTR [eax+ecx+32]
	and	eax, 32					; 00000020H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN3@top_dump

; 888  :     list_constraint(i);

	push	esi
	call	_list_constraint
	add	esp, 4
$LN3@top_dump:

; 880  :   }
; 881  : 
; 882  : 
; 883  :   /* print constraint info */
; 884  :   for ( i = 0 ; i < web.maxcon ; i++ )

	inc	esi
	cmp	esi, DWORD PTR _web+644
	jl	SHORT $LL4@top_dump

; 889  : 
; 890  :   } 
; 891  : 
; 892  :   /* windup */
; 893  :   outfd = old_fd;

	mov	edx, DWORD PTR _old_fd$[ebp]
	mov	DWORD PTR _outfd, edx
	pop	esi

; 894  : } /* end top_dump() */

	mov	esp, ebp
	pop	ebp
	ret	0
$LN358@top_dump:

; 889  : 
; 890  :   } 
; 891  : 
; 892  :   /* windup */
; 893  :   outfd = old_fd;

	mov	eax, DWORD PTR _old_fd$[ebp]
	mov	DWORD PTR _outfd, eax
	pop	esi

; 894  : } /* end top_dump() */

	mov	esp, ebp
	pop	ebp
	ret	0
_top_dump ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@HPGOKJCB@?6bodies?5?5?1?$CK?5facets?5?$CK?1?6?$AA@ ; `string'
PUBLIC	??_C@_0CB@LPOBMMCL@?6faces?5?5?5?5?1?$CK?5edge?5loop?5?$CK?1?5?5?5?5?5?5?6@ ; `string'
PUBLIC	??_C@_0CC@NODCACFL@?6faces?5?5?5?5?1?$CK?5vertex?5set?5?$CK?1?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_09IDMIBKCD@?6edges?5?5?6?$AA@		; `string'
PUBLIC	??_C@_0CK@FAKAJNH@?6vertices?5?5?5?5?5?5?5?5?1?$CK?5?5coordinates@ ; `string'
PUBLIC	??_C@_0BM@HCNPNGJH@?1?1?5?$CFs?3?5Dump?5of?5structure?4?6?6?$AA@ ; `string'
PUBLIC	??_C@_0BA@LBEPBFDN@Dumping?5to?5?$CFs?4?6?$AA@	; `string'
PUBLIC	??_C@_04JMFINIFG@?4dmp?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_do_dump
EXTRN	_fputs:PROC
EXTRN	_fprintf:PROC
EXTRN	_l_evolver_mode:DWORD
EXTRN	_strncpy:PROC
_BSS	SEGMENT
_dumpfd	DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BH@HPGOKJCB@?6bodies?5?5?1?$CK?5facets?5?$CK?1?6?$AA@
CONST	SEGMENT
??_C@_0BH@HPGOKJCB@?6bodies?5?5?1?$CK?5facets?5?$CK?1?6?$AA@ DB 0aH, 'bod'
	DB	'ies  /* facets */', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@LPOBMMCL@?6faces?5?5?5?5?1?$CK?5edge?5loop?5?$CK?1?5?5?5?5?5?5?6@
CONST	SEGMENT
??_C@_0CB@LPOBMMCL@?6faces?5?5?5?5?1?$CK?5edge?5loop?5?$CK?1?5?5?5?5?5?5?6@ DB 0aH
	DB	'faces    /* edge loop */      ', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@NODCACFL@?6faces?5?5?5?5?1?$CK?5vertex?5set?5?$CK?1?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CC@NODCACFL@?6faces?5?5?5?5?1?$CK?5vertex?5set?5?$CK?1?5?5?5?5?5?5@ DB 0aH
	DB	'faces    /* vertex set */      ', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IDMIBKCD@?6edges?5?5?6?$AA@
CONST	SEGMENT
??_C@_09IDMIBKCD@?6edges?5?5?6?$AA@ DB 0aH, 'edges  ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@FAKAJNH@?6vertices?5?5?5?5?5?5?5?5?1?$CK?5?5coordinates@
CONST	SEGMENT
??_C@_0CK@FAKAJNH@?6vertices?5?5?5?5?5?5?5?5?1?$CK?5?5coordinates@ DB 0aH
	DB	'vertices        /*  coordinates  */    ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HCNPNGJH@?1?1?5?$CFs?3?5Dump?5of?5structure?4?6?6?$AA@
CONST	SEGMENT
??_C@_0BM@HCNPNGJH@?1?1?5?$CFs?3?5Dump?5of?5structure?4?6?6?$AA@ DB '// %'
	DB	's: Dump of structure.', 0aH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LBEPBFDN@Dumping?5to?5?$CFs?4?6?$AA@
CONST	SEGMENT
??_C@_0BA@LBEPBFDN@Dumping?5to?5?$CFs?4?6?$AA@ DB 'Dumping to %s.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04JMFINIFG@?4dmp?$AA@
CONST	SEGMENT
??_C@_04JMFINIFG@?4dmp?$AA@ DB '.dmp', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _do_dump
_TEXT	SEGMENT
_old_quiet$ = -112					; size = 4
_old_l_evolver_mode$ = -108				; size = 4
_defaultname$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
_name$ = 8						; size = 4
_do_dump PROC						; COMDAT

; 1598 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1599 :   vertex_id v_id;
; 1600 :   edge_id e_id;
; 1601 :   facet_id f_id;
; 1602 :   body_id b_id;
; 1603 :   char defaultname[100];
; 1604 :   int old_quiet = quiet_flag;

	mov	eax, DWORD PTR _quiet_flag
	push	esi
	mov	esi, DWORD PTR _name$[ebp]
	push	edi
	mov	DWORD PTR _old_quiet$[ebp], eax

; 1605 : 
; 1606 : #ifdef __L_EVOLVER__
; 1607 :   int old_l_evolver_mode =  FALSE;

	mov	DWORD PTR _old_l_evolver_mode$[ebp], 0

; 1608 : #endif
; 1609 :   quiet_flag = 0;  /* so outstring actually produces output */

	mov	DWORD PTR _quiet_flag, 0

; 1610 : 
; 1611 :   if ( name == NULL )

	test	esi, esi
	jne	SHORT $LN27@do_dump

; 1612 :     { /* construct default name */
; 1613 :       strncpy(defaultname,datafilename,sizeof(defaultname)-5);

	push	95					; 0000005fH
	lea	ecx, DWORD PTR _defaultname$[ebp]
	push	OFFSET _datafilename
	push	ecx
	call	_strncpy

; 1614 : #ifdef MPI_EVOLVER
; 1615 :       sprintf(defaultname+strlen(defaultname),".task%d",this_task);
; 1616 : #endif
; 1617 :       strcat(defaultname,".dmp");

	lea	eax, DWORD PTR _defaultname$[ebp]
	add	esp, 12					; 0000000cH
	dec	eax
	npad	7
$LL38@do_dump:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL38@do_dump
	mov	edx, DWORD PTR ??_C@_04JMFINIFG@?4dmp?$AA@
	mov	cl, BYTE PTR ??_C@_04JMFINIFG@?4dmp?$AA@+4
	mov	DWORD PTR [eax], edx
	mov	BYTE PTR [eax+4], cl

; 1618 :       name = defaultname;

	lea	esi, DWORD PTR _defaultname$[ebp]
$LN27@do_dump:

; 1619 :     }
; 1620 : 
; 1621 :   sprintf(msg,"Dumping to %s.\n",name);

	mov	edx, DWORD PTR _msg
	push	esi
	push	OFFSET ??_C@_0BA@LBEPBFDN@Dumping?5to?5?$CFs?4?6?$AA@
	push	edx
	call	_sprintf

; 1622 :   outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring
	add	esp, 16					; 00000010H

; 1623 : #ifdef __L_EVOLVER__
; 1624 :   if ( l_evolver_mode )

	cmp	DWORD PTR _l_evolver_mode, 0
	je	SHORT $LN39@do_dump

; 1625 :   {
; 1626 :     old_l_evolver_mode = TRUE;

	mov	DWORD PTR _old_l_evolver_mode$[ebp], 1

; 1627 : 	l_evolver_mode = FALSE;

	mov	DWORD PTR _l_evolver_mode, 0
$LN39@do_dump:

; 1628 :   }
; 1629 : 
; 1630 : 
; 1631 : #endif
; 1632 :   dumpfd = fopen(name,"w");

	push	OFFSET ??_C@_01NOFIACDB@w?$AA@
	push	esi
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _dumpfd, eax

; 1633 : 
; 1634 :   if ( dumpfd == NULL )

	test	eax, eax
	jne	SHORT $LN25@do_dump

; 1635 :     { 
; 1636 : 	#ifdef __L_EVOLVER__
; 1637 : 	  if ( old_l_evolver_mode )

	cmp	DWORD PTR _old_l_evolver_mode$[ebp], eax
	je	SHORT $LN40@do_dump

; 1638 : 	  {
; 1639 : 		l_evolver_mode = TRUE;

	mov	DWORD PTR _l_evolver_mode, 1
$LN40@do_dump:

; 1640 : 	  }
; 1641 : 	#endif
; 1642 :       sprintf(errmsg,"Cannot open file %s.\n",name);

	push	esi
	push	OFFSET ??_C@_0BG@OFBLDCJP@Cannot?5open?5file?5?$CFs?4?6?$AA@
	push	OFFSET _errmsg
	call	_sprintf

; 1643 :       kb_error(1006,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	1006					; 000003eeH
	call	_kb_error
	mov	eax, DWORD PTR _dumpfd
	add	esp, 24					; 00000018H
$LN25@do_dump:

; 1644 :     }
; 1645 : 
; 1646 : 
; 1647 :   fprintf(dumpfd,"// %s: Dump of structure.\n\n",name); 

	push	esi
	push	OFFSET ??_C@_0BM@HCNPNGJH@?1?1?5?$CFs?3?5Dump?5of?5structure?4?6?6?$AA@
	push	eax
	call	_fprintf

; 1648 : 
; 1649 :   top_dump(dumpfd);

	mov	ecx, DWORD PTR _dumpfd
	push	ecx
	call	_top_dump

; 1650 : 
; 1651 :   /* vertex dump */
; 1652 :   fputs("\nvertices        /*  coordinates  */    \n",dumpfd);

	mov	edx, DWORD PTR _dumpfd
	push	edx
	push	OFFSET ??_C@_0CK@FAKAJNH@?6vertices?5?5?5?5?5?5?5?5?1?$CK?5?5coordinates@
	call	_fputs

; 1653 :   MFOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR _web+48
	add	esp, 24					; 00000018H
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN21@do_dump
	mov	edi, DWORD PTR _web+12
$LL23@do_dump:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+edi]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN22@do_dump

; 1654 :      vertex_dump(v_id,dumpfd);

	mov	eax, DWORD PTR _dumpfd
	push	eax
	push	ecx
	call	_vertex_dump
	mov	edi, DWORD PTR _web+12
	add	esp, 8
$LN22@do_dump:

; 1653 :   MFOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR [esi+edi]
	mov	ecx, DWORD PTR [ecx]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LL23@do_dump
$LN21@do_dump:

; 1655 :      
; 1656 :   /* edge dump */
; 1657 :   fputs("\nedges  \n",dumpfd);

	mov	edx, DWORD PTR _dumpfd
	push	edx
	push	OFFSET ??_C@_09IDMIBKCD@?6edges?5?5?6?$AA@
	call	_fputs

; 1658 :   MFOR_ALL_EDGES(e_id)

	mov	ecx, DWORD PTR _web+160
	add	esp, 8
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN16@do_dump
	mov	edi, DWORD PTR _web+124
	npad	6
$LL18@do_dump:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+edi]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN17@do_dump

; 1659 :      edge_dump(e_id,dumpfd);

	mov	eax, DWORD PTR _dumpfd
	push	eax
	push	ecx
	call	_edge_dump
	mov	edi, DWORD PTR _web+124
	add	esp, 8
$LN17@do_dump:

; 1658 :   MFOR_ALL_EDGES(e_id)

	mov	ecx, DWORD PTR [esi+edi]
	mov	ecx, DWORD PTR [ecx]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LL18@do_dump
$LN16@do_dump:

; 1660 : 
; 1661 :   /* facet dump */
; 1662 :   if ( web.representation == SIMPLEX )

	cmp	DWORD PTR _web+624, 3
	jne	SHORT $LN13@do_dump

; 1663 :      fputs("\nfaces    /* vertex set */      \n",dumpfd);

	mov	edx, DWORD PTR _dumpfd
	push	edx
	push	OFFSET ??_C@_0CC@NODCACFL@?6faces?5?5?5?5?1?$CK?5vertex?5set?5?$CK?1?5?5?5?5?5?5@

; 1664 :   else

	jmp	SHORT $LN41@do_dump
$LN13@do_dump:

; 1665 :      fputs("\nfaces    /* edge loop */      \n",dumpfd);

	mov	eax, DWORD PTR _dumpfd
	push	eax
	push	OFFSET ??_C@_0CB@LPOBMMCL@?6faces?5?5?5?5?1?$CK?5edge?5loop?5?$CK?1?5?5?5?5?5?5?6@
$LN41@do_dump:
	call	_fputs

; 1666 :   MFOR_ALL_FACETS(f_id)

	mov	ecx, DWORD PTR _web+272
	add	esp, 8
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN9@do_dump
	mov	edi, DWORD PTR _web+236
	npad	5
$LL11@do_dump:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+edi]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN10@do_dump

; 1667 :      facet_dump(f_id,dumpfd);

	mov	edx, DWORD PTR _dumpfd
	push	edx
	push	ecx
	call	_facet_dump
	mov	edi, DWORD PTR _web+236
	add	esp, 8
$LN10@do_dump:

; 1666 :   MFOR_ALL_FACETS(f_id)

	mov	eax, DWORD PTR [esi+edi]
	mov	ecx, DWORD PTR [eax]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LL11@do_dump
$LN9@do_dump:

; 1668 : 
; 1669 :   /* body dump */
; 1670 :   #ifndef MPI_EVOLVER
; 1671 : //  calc_content(Q_FIXED|Q_INFO|Q_ENERGY|Q_CONSERVED);
; 1672 :   #endif
; 1673 :   fputs("\nbodies  /* facets */\n",dumpfd);

	mov	ecx, DWORD PTR _dumpfd
	push	ecx
	push	OFFSET ??_C@_0BH@HPGOKJCB@?6bodies?5?5?1?$CK?5facets?5?$CK?1?6?$AA@
	call	_fputs

; 1674 :   MFOR_ALL_BODIES(b_id)

	mov	ecx, DWORD PTR _web+384
	add	esp, 8
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN4@do_dump
	mov	edi, DWORD PTR _web+348
$LL6@do_dump:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+edi]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN5@do_dump

; 1675 :      body_dump(b_id,dumpfd);

	mov	edx, DWORD PTR _dumpfd
	push	edx
	push	ecx
	call	_body_dump
	mov	edi, DWORD PTR _web+348
	add	esp, 8
$LN5@do_dump:

; 1674 :   MFOR_ALL_BODIES(b_id)

	mov	eax, DWORD PTR [esi+edi]
	mov	ecx, DWORD PTR [eax]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LL6@do_dump
$LN4@do_dump:

; 1676 : 
; 1677 :   bottom_dump(dumpfd);

	mov	ecx, DWORD PTR _dumpfd
	push	ecx
	call	_bottom_dump

; 1678 : 
; 1679 :   fclose(dumpfd);

	mov	edx, DWORD PTR _dumpfd
	push	edx
	call	_fclose

; 1680 :   quiet_flag = old_quiet;

	mov	eax, DWORD PTR _old_quiet$[ebp]
	add	esp, 8

; 1681 : #ifdef __L_EVOLVER__
; 1682 :   if ( old_l_evolver_mode )

	cmp	DWORD PTR _old_l_evolver_mode$[ebp], 0
	pop	edi
	mov	DWORD PTR _quiet_flag, eax
	pop	esi
	je	SHORT $LN1@do_dump

; 1683 :   {
; 1684 :     l_evolver_mode = TRUE;

	mov	DWORD PTR _l_evolver_mode, 1
$LN1@do_dump:

; 1685 :   }
; 1686 : #endif
; 1687 : } /* end do_dump() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_do_dump ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@MKBKLJOA@Enter?5name?5of?5dump?5file?5?$CI?$CFs?$CJ?3?5?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_dump
;	COMDAT ??_C@_0BP@MKBKLJOA@Enter?5name?5of?5dump?5file?5?$CI?$CFs?$CJ?3?5?$AA@
CONST	SEGMENT
??_C@_0BP@MKBKLJOA@Enter?5name?5of?5dump?5file?5?$CI?$CFs?$CJ?3?5?$AA@ DB 'E'
	DB	'nter name of dump file (%s): ', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _dump
_TEXT	SEGMENT
_name$ = -4004						; size = 2000
_defaultname$ = -2004					; size = 2000
__$ArrayPad$ = -4					; size = 4
_dump	PROC						; COMDAT

; 52   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 4004				; 00000fa4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 53   :   char name[2000];
; 54   :   char defaultname[2000];
; 55   : 
; 56   :   /* construct default name */
; 57   :   strncpy(defaultname,datafilename,sizeof(defaultname)-5);

	push	1995					; 000007cbH
	lea	eax, DWORD PTR _defaultname$[ebp]
	push	OFFSET _datafilename
	push	eax
	call	_strncpy

; 58   :   strcat(defaultname,".dmp");

	lea	eax, DWORD PTR _defaultname$[ebp]
	add	esp, 12					; 0000000cH
	dec	eax
$LL5@dump:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL5@dump
	mov	ecx, DWORD PTR ??_C@_04JMFINIFG@?4dmp?$AA@
	mov	dl, BYTE PTR ??_C@_04JMFINIFG@?4dmp?$AA@+4
	mov	DWORD PTR [eax], ecx

; 59   :   sprintf(msg,"Enter name of dump file (%s): ",defaultname);

	mov	ecx, DWORD PTR _msg
	mov	BYTE PTR [eax+4], dl
	lea	eax, DWORD PTR _defaultname$[ebp]
	push	eax
	push	OFFSET ??_C@_0BP@MKBKLJOA@Enter?5name?5of?5dump?5file?5?$CI?$CFs?$CJ?3?5?$AA@
	push	ecx
	call	_sprintf

; 60   :   prompt(msg,name,sizeof(name));

	mov	eax, DWORD PTR _msg
	push	2000					; 000007d0H
	lea	edx, DWORD PTR _name$[ebp]
	push	edx
	push	eax
	call	_prompt
	add	esp, 24					; 00000018H

; 61   :   if ( name[0] == 0 ) do_dump(defaultname);

	cmp	BYTE PTR _name$[ebp], 0
	jne	SHORT $LN2@dump
	lea	ecx, DWORD PTR _defaultname$[ebp]
	push	ecx
	jmp	SHORT $LN6@dump
$LN2@dump:

; 62   :   else do_dump(name);

	lea	edx, DWORD PTR _name$[ebp]
	push	edx
$LN6@dump:
	call	_do_dump

; 63   : 
; 64   : } // end dump()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	add	esp, 4
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_dump	ENDP
_TEXT	ENDS
END
