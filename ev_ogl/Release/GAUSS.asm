; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\GAUSS.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_gauss_bdry_e_attr:DWORD
COMM	_gauss_bdry_v_attr:DWORD
_levine_a DQ	03ff0000000000000r		; 1
_levine_t DQ	03ff0000000000000r		; 1
_levine_c DQ	03ff0000000000000r		; 1
_DATA	ENDS
PUBLIC	_get_fe_edge
EXTRN	_web:BYTE
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
;	COMDAT _get_fe_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_edge PROC					; COMDAT

; 43   : {

	push	ebp
	mov	ebp, esp

; 44   :   edge_id e_id;
; 45   :     
; 46   :   e_id = feptr(fe_id)->fe_edge_id;

	mov	eax, DWORD PTR _fe_id$[ebp]

; 47   : 
; 48   :   /*
; 49   :   if ( inverted(fe_id) ) invert(e_id);
; 50   :   return e_id;
; 51   :   */
; 52   :   
; 53   :   return same_sign(e_id,fe_id);

	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]

; 54   : }

	pop	ebp
	ret	0
_get_fe_edge ENDP
_TEXT	ENDS
PUBLIC	_get_prev_edge
; Function compile flags: /Ogtp
;	COMDAT _get_prev_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_prev_edge PROC					; COMDAT

; 69   : {

	push	ebp
	mov	ebp, esp

; 70   :   if ( inverted(fe_id) ) return inverse_id(feptr(fe_id)->nextedge[1]);

	mov	eax, DWORD PTR _fe_id$[ebp]
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_prev_e
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H

; 72   : }

	pop	ebp
	ret	0
$LN2@get_prev_e:

; 71   :   else return feptr(fe_id)->nextedge[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]

; 72   : }

	pop	ebp
	ret	0
_get_prev_edge ENDP
_TEXT	ENDS
PUBLIC	_get_next_edge
; Function compile flags: /Ogtp
;	COMDAT _get_next_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_next_edge PROC					; COMDAT

; 76   : {

	push	ebp
	mov	ebp, esp

; 77   :   if ( inverted(fe_id) ) return inverse_id(feptr(fe_id)->nextedge[0]);

	mov	eax, DWORD PTR _fe_id$[ebp]
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_next_e
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H

; 79   : }

	pop	ebp
	ret	0
$LN2@get_next_e:

; 78   :   else return feptr(fe_id)->nextedge[1];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]

; 79   : }

	pop	ebp
	ret	0
_get_next_edge ENDP
_TEXT	ENDS
PUBLIC	_get_edge_tailv
EXTRN	_dymem:DWORD
; Function compile flags: /Ogtp
;	COMDAT _get_edge_tailv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_tailv PROC					; COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp

; 192  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 193  :      return get_edge_vertices(e_id)[web.headvnum];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_t
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 196  : }

	pop	ebp
	ret	0
$LN2@get_edge_t:

; 194  :   else
; 195  :      return get_edge_vertices(e_id)[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 196  : }

	pop	ebp
	ret	0
_get_edge_tailv ENDP
_TEXT	ENDS
PUBLIC	_get_edge_headv
; Function compile flags: /Ogtp
;	COMDAT _get_edge_headv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_headv PROC					; COMDAT

; 200  : {

	push	ebp
	mov	ebp, esp

; 201  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 202  :      return get_edge_vertices(e_id)[0];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_h
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 205  : }

	pop	ebp
	ret	0
$LN2@get_edge_h:

; 203  :   else
; 204  :      return get_edge_vertices(e_id)[web.headvnum];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 205  : }

	pop	ebp
	ret	0
_get_edge_headv ENDP
_TEXT	ENDS
PUBLIC	_get_facet_fe
; Function compile flags: /Ogtp
;	COMDAT _get_facet_fe
_TEXT	SEGMENT
_f_id$ = 8						; size = 4
_get_facet_fe PROC					; COMDAT

; 260  : {

	push	ebp
	mov	ebp, esp

; 261  :   facetedge_id fe;
; 262  :   
; 263  :   if ( !valid_id(f_id) ) return NULLID;

	mov	ecx, DWORD PTR _f_id$[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN2@get_facet_
	xor	eax, eax

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
$LN2@get_facet_:

; 264  :   fe = fptr(f_id)->fe_id;

	mov	edx, DWORD PTR _web+236
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]

; 265  :   if ( inverted(f_id) ) invert(fe);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_facet_
	xor	eax, 134217728				; 08000000H
$LN3@get_facet_:

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
_get_facet_fe ENDP
_TEXT	ENDS
PUBLIC	_get_next_tail_edge
; Function compile flags: /Ogtp
;	COMDAT _get_next_tail_edge
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_next_tail_edge PROC				; COMDAT

; 270  : { return eptr(e_id)->next_vedge[inverted(e_id) ?1: 0] ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _e_id$[ebp]
	mov	edx, DWORD PTR _web+124
	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ecx*4+32]
	pop	ebp
	ret	0
_get_next_tail_edge ENDP
_TEXT	ENDS
PUBLIC	_get_extra
; Function compile flags: /Ogtp
;	COMDAT _get_extra
_TEXT	SEGMENT
_id$ = 8						; size = 4
_n$ = 12						; size = 4
_get_extra PROC						; COMDAT

; 348  : { int type = id_type(id);

	push	ebp
	mov	ebp, esp

; 349  : 
; 350  :   return ( (char*)elptr(id) + EXTRAS(type)[n].offset);

	mov	ecx, DWORD PTR _id$[ebp]
	mov	eax, ecx
	push	esi
	mov	esi, DWORD PTR _n$[ebp]
	shr	eax, 29					; 0000001dH
	imul	esi, 240				; 000000f0H
	imul	eax, 112				; 00000070H
	mov	edx, DWORD PTR _web[eax+12]
	push	edi
	mov	edi, DWORD PTR _web[eax+104]
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _dymem
	add	edi, esi
	add	eax, DWORD PTR [edi+ecx+64]
	pop	edi
	pop	esi

; 351  : }

	pop	ebp
	ret	0
_get_extra ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@ICNMCBBK@gauss_bdry_e?$AA@		; `string'
PUBLIC	??_C@_0N@ODDDGAII@gauss_bdry_v?$AA@		; `string'
PUBLIC	??_C@_0CO@KNPPNIIO@gauss_integral?5method?5only?5for?5L@ ; `string'
PUBLIC	??_C@_0CK@FJKEKOLF@gauss_integral?5method?5only?5for?53@ ; `string'
PUBLIC	??_C@_0CL@JGDLAEIG@gauss_integral?5method?5only?5for?52@ ; `string'
PUBLIC	_gauss_integral_init
EXTRN	_find_attribute:PROC
EXTRN	_kb_error:PROC
;	COMDAT ??_C@_0N@ICNMCBBK@gauss_bdry_e?$AA@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\gauss.c
CONST	SEGMENT
??_C@_0N@ICNMCBBK@gauss_bdry_e?$AA@ DB 'gauss_bdry_e', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@ODDDGAII@gauss_bdry_v?$AA@
CONST	SEGMENT
??_C@_0N@ODDDGAII@gauss_bdry_v?$AA@ DB 'gauss_bdry_v', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@KNPPNIIO@gauss_integral?5method?5only?5for?5L@
CONST	SEGMENT
??_C@_0CO@KNPPNIIO@gauss_integral?5method?5only?5for?5L@ DB 'gauss_integr'
	DB	'al method only for LINEAR model.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@FJKEKOLF@gauss_integral?5method?5only?5for?53@
CONST	SEGMENT
??_C@_0CK@FJKEKOLF@gauss_integral?5method?5only?5for?53@ DB 'gauss_integr'
	DB	'al method only for 3D space.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@JGDLAEIG@gauss_integral?5method?5only?5for?52@
CONST	SEGMENT
??_C@_0CL@JGDLAEIG@gauss_integral?5method?5only?5for?52@ DB 'gauss_integr'
	DB	'al method only for 2D facets.', 0aH, 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _gauss_integral_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_gauss_integral_init PROC				; COMDAT

; 39   :   if ( web.dimension != 2 )

	cmp	DWORD PTR _web+620, 2
	je	SHORT $LN3@gauss_inte

; 40   :      kb_error(1590,"gauss_integral method only for 2D facets.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CL@JGDLAEIG@gauss_integral?5method?5only?5for?52@
	push	1590					; 00000636H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN3@gauss_inte:

; 41   : 
; 42   :   if ( SDIM != 3 )

	cmp	DWORD PTR _web+616, 3
	je	SHORT $LN2@gauss_inte

; 43   :      kb_error(1591,"gauss_integral method only for 3D space.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CK@FJKEKOLF@gauss_integral?5method?5only?5for?53@
	push	1591					; 00000637H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN2@gauss_inte:

; 44   : 
; 45   :   if ( web.modeltype != LINEAR )

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN1@gauss_inte

; 46   :      kb_error(1592,"gauss_integral method only for LINEAR model.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CO@KNPPNIIO@gauss_integral?5method?5only?5for?5L@
	push	1592					; 00000638H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@gauss_inte:

; 47   : 
; 48   :     gauss_bdry_v_attr = find_attribute(VERTEX,GAUSS_BDRY_V_NAME);

	push	OFFSET ??_C@_0N@ODDDGAII@gauss_bdry_v?$AA@
	push	0
	call	_find_attribute

; 49   :     gauss_bdry_e_attr = find_attribute(EDGE,GAUSS_BDRY_E_NAME);

	push	OFFSET ??_C@_0N@ICNMCBBK@gauss_bdry_e?$AA@
	push	1
	mov	DWORD PTR _gauss_bdry_v_attr, eax
	call	_find_attribute
	add	esp, 16					; 00000010H
	mov	DWORD PTR _gauss_bdry_e_attr, eax

; 50   : 
; 51   : } // end gauss_integral_init()

	ret	0
_gauss_integral_init ENDP
_TEXT	ENDS
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@0000000000000000
PUBLIC	__$ArrayPad$
PUBLIC	_gauss_int_energy
EXTRN	_dot:PROC
EXTRN	_get_edge_side:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CIacos:PROC
EXTRN	__CIsqrt:PROC
;	COMDAT __real@400921fb54442d18
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\gauss.c
CONST	ENDS
;	COMDAT _gauss_int_energy
_TEXT	SEGMENT
tv509 = -128						; size = 8
_energy$ = -120						; size = 8
tv293 = -112						; size = 4
tv507 = -108						; size = 8
_fe$ = -104						; size = 4
_s2$ = -100						; size = 48
_s1$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_gauss_int_energy PROC					; COMDAT

; 63   : { REAL s1[MAXCOORD],s2[MAXCOORD];

	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _f_info$[ebp]

; 64   :   facetedge_id fe;
; 65   :   vertex_id v_id;
; 66   :   int k;
; 67   :   REAL energy = 0.0;

	fldz

; 68   :   REAL a;
; 69   : 
; 70   :   fe = get_facet_fe(f_info->id);

	mov	eax, DWORD PTR [eax]
	fst	QWORD PTR _energy$[ebp]
	push	ebx
	push	esi
	push	edi
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN15@gauss_int_
	xor	edi, edi
	jmp	SHORT $LN14@gauss_int_
$LN15@gauss_int_:
	mov	edx, DWORD PTR _web+236
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edi, DWORD PTR [ecx+28]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN14@gauss_int_
	xor	edi, 134217728				; 08000000H
$LN14@gauss_int_:

; 71   :   for ( k = 0 ; k < FACET_VERTS ; k++, fe = get_next_edge(fe) )

	fld	QWORD PTR __real@400921fb54442d18
	mov	DWORD PTR _fe$[ebp], edi
	mov	DWORD PTR tv293[ebp], 3
	jmp	SHORT $LN47@gauss_int_
$LN77@gauss_int_:
	fxch	ST(1)
$LN47@gauss_int_:

; 72   :   {  edge_id e_id = get_fe_edge(fe);

	mov	edx, DWORD PTR _web+460
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, edi
	and	edx, 134217728				; 08000000H
	xor	ecx, edx

; 73   : 
; 74   :      if ( gauss_bdry_e_attr >= 0 )

	mov	edx, DWORD PTR _gauss_bdry_e_attr
	test	edx, edx
	js	SHORT $LN8@gauss_int_

; 75   :      { if ( *(int*)get_extra(e_id,gauss_bdry_e_attr) )

	mov	eax, ecx
	imul	edx, 240				; 000000f0H
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	ebx, DWORD PTR _web[eax+12]
	mov	eax, DWORD PTR _web[eax+104]
	mov	edi, ecx
	and	edi, 134217727				; 07ffffffH
	add	eax, edx
	mov	edx, DWORD PTR [ebx+edi*4]
	mov	edi, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+edi+64]
	cmp	DWORD PTR [edx+eax], 0

; 77   :      } else

	mov	edi, DWORD PTR _fe$[ebp]
	je	SHORT $LN82@gauss_int_

; 76   :         energy -= M_PI;  /* normalization */

	fsub	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _energy$[ebp]

; 77   :      } else

	jmp	SHORT $LN48@gauss_int_
$LN8@gauss_int_:

; 78   :        if ( get_eattr(e_id) & (BOUNDARY|FIXED) )

	mov	eax, DWORD PTR _web+124
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 192				; 000000c0H
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN82@gauss_int_

; 79   :         energy -= M_PI;  /* normalization */

	fsub	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _energy$[ebp]
	jmp	SHORT $LN48@gauss_int_
$LN82@gauss_int_:

; 78   :        if ( get_eattr(e_id) & (BOUNDARY|FIXED) )

	fxch	ST(1)
$LN48@gauss_int_:

; 80   : 
; 81   :      v_id = get_fe_tailv(fe);

	mov	eax, DWORD PTR _web+124
	mov	ebx, DWORD PTR _dymem
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR _web+216
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN29@gauss_int_
	add	edx, DWORD PTR [eax+ebx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN28@gauss_int_
$LN29@gauss_int_:
	mov	eax, DWORD PTR [eax+ebx+304]
	mov	eax, DWORD PTR [edx+eax]
$LN28@gauss_int_:

; 82   :      if ( gauss_bdry_v_attr >= 0 )

	mov	ebx, DWORD PTR _gauss_bdry_v_attr
	test	ebx, ebx
	js	SHORT $LN4@gauss_int_

; 83   :      { if ( *(int*)get_extra(v_id,gauss_bdry_v_attr) == 0 )

	mov	edx, eax
	imul	ebx, 240				; 000000f0H
	shr	edx, 29					; 0000001dH
	imul	edx, 112				; 00000070H
	mov	edi, DWORD PTR _web[edx+12]
	mov	edx, DWORD PTR _web[edx+104]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	edi, DWORD PTR _dymem
	add	edx, ebx
	mov	edx, DWORD PTR [edx+edi+64]

; 84   :         continue;
; 85   :      }
; 86   :      else if ( !(get_vattr(v_id) & (BOUNDARY|FIXED) ) ) continue;

	mov	edi, DWORD PTR _fe$[ebp]
	cmp	DWORD PTR [eax+edx], 0
	jmp	SHORT $LN90@gauss_int_
$LN4@gauss_int_:
	mov	edx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 192				; 000000c0H
	xor	edx, edx
	or	eax, edx
$LN90@gauss_int_:
	je	$LN10@gauss_int_

; 87   : 
; 88   :      get_fe_side(fe,s1);

	lea	eax, DWORD PTR _s1$[ebp]
	fstp	ST(0)
	push	eax
	fstp	ST(0)
	push	ecx
	call	_get_edge_side

; 89   :      get_fe_side(get_prev_edge(fe),s2);

	mov	ecx, DWORD PTR _web+460
	add	esp, 8
	test	edi, 134217728				; 08000000H
	je	SHORT $LN37@gauss_int_
	mov	edx, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN36@gauss_int_
$LN37@gauss_int_:
	mov	eax, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [eax+28]
$LN36@gauss_int_:
	lea	edx, DWORD PTR _s2$[ebp]
	push	edx
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	push	eax
	call	_get_edge_side

; 90   :      a = -SDIM_dot(s1,s2)/sqrt(SDIM_dot(s1,s1)*SDIM_dot(s2,s2));

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _s2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s1$[ebp]
	push	ecx
	call	_dot
	fstp	QWORD PTR tv509[ebp]
	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _s2$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fstp	QWORD PTR tv507[ebp]
	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _s1$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fmul	QWORD PTR tv507[ebp]
	add	esp, 44					; 0000002cH
	call	__CIsqrt
	fdivr	QWORD PTR tv509[ebp]
	fchs

; 91   :      energy += acos(a);

	call	__CIacos
	fadd	QWORD PTR _energy$[ebp]
	fst	QWORD PTR _energy$[ebp]
	fld	QWORD PTR __real@400921fb54442d18
	fxch	ST(1)
$LN10@gauss_int_:

; 71   :   for ( k = 0 ; k < FACET_VERTS ; k++, fe = get_next_edge(fe) )

	test	edi, 134217728				; 08000000H
	je	SHORT $LN19@gauss_int_
	mov	edx, DWORD PTR _web+460
	mov	eax, DWORD PTR [esi+edx]
	mov	edi, DWORD PTR [eax+28]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN89@gauss_int_
$LN19@gauss_int_:
	mov	ecx, DWORD PTR _web+460
	mov	edx, DWORD PTR [esi+ecx]
	mov	edi, DWORD PTR [edx+32]
$LN89@gauss_int_:
	dec	DWORD PTR tv293[ebp]
	mov	DWORD PTR _fe$[ebp], edi
	jne	$LN77@gauss_int_

; 92   :   }
; 93   :   return energy;
; 94   : 
; 95   : }  // end gauss_int_energy()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(1)
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_gauss_int_energy ENDP
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_gauss_int_gradient
EXTRN	_memset:PROC
;	COMDAT __real@3ff0000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\gauss.c
CONST	ENDS
;	COMDAT _gauss_int_gradient
_TEXT	SEGMENT
tv655 = -160						; size = 8
_a$ = -152						; size = 8
_ss2$ = -144						; size = 8
_f_info$GSCopy$ = -136					; size = 4
tv195 = -132						; size = 4
_ss12$ = -128						; size = 8
tv541 = -124						; size = 4
_energy$ = -120						; size = 8
tv923 = -112						; size = 4
_ss1$ = -108						; size = 8
_fe$ = -104						; size = 4
_s1$ = -100						; size = 48
_s2$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_gauss_int_gradient PROC				; COMDAT

; 108  : { REAL s1[MAXCOORD],s2[MAXCOORD];

	push	ebp
	mov	ebp, esp
	sub	esp, 160				; 000000a0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 109  :   facetedge_id fe;
; 110  :   vertex_id v_id;
; 111  :   int j,k;
; 112  :   REAL energy = 0.0;

	fldz
	push	ebx
	push	esi
	fstp	QWORD PTR _energy$[ebp]
	push	edi
	mov	edi, DWORD PTR _f_info$[ebp]

; 113  :   REAL ss1,ss2,ss12;
; 114  :   REAL a,b;
; 115  : 
; 116  :   fe = get_facet_fe(f_info->id);

	mov	eax, DWORD PTR [edi]

; 119  :   for ( k = 0 ; k < FACET_VERTS ; k++, fe = get_next_edge(fe) )

	mov	DWORD PTR _f_info$GSCopy$[ebp], edi
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN24@gauss_int_@2

; 113  :   REAL ss1,ss2,ss12;
; 114  :   REAL a,b;
; 115  : 
; 116  :   fe = get_facet_fe(f_info->id);

	xor	ebx, ebx
	mov	DWORD PTR _fe$[ebp], ebx
	jmp	SHORT $LN25@gauss_int_@2
$LN24@gauss_int_@2:
	mov	edx, DWORD PTR _web+236
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [ecx+28]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN23@gauss_int_@2
	xor	ecx, 134217728				; 08000000H
$LN23@gauss_int_@2:
	mov	ebx, ecx
	mov	DWORD PTR _fe$[ebp], ecx
$LN25@gauss_int_@2:

; 117  :   for ( k = 0 ; k < FACET_VERTS ; k++ )

	xor	esi, esi
	npad	4
$LL64@gauss_int_@2:

; 118  :      memset((char*)(f_info->grad[k]),0,SDIM*sizeof(REAL));

	mov	edx, DWORD PTR _web+616
	mov	ecx, DWORD PTR [edi+1336]
	lea	eax, DWORD PTR [edx*8]
	mov	edx, DWORD PTR [ecx+esi]
	push	eax
	push	0
	push	edx
	call	_memset
	add	esi, 4
	add	esp, 12					; 0000000cH
	cmp	esi, 12					; 0000000cH
	jl	SHORT $LL64@gauss_int_@2

; 119  :   for ( k = 0 ; k < FACET_VERTS ; k++, fe = get_next_edge(fe) )

	mov	esi, DWORD PTR _dymem
	mov	DWORD PTR tv923[ebp], 2
	mov	DWORD PTR tv195[ebp], 3
$LL61@gauss_int_@2:

; 120  :   {  edge_id e_id = get_fe_edge(fe);

	mov	eax, DWORD PTR _web+460
	fld	QWORD PTR __real@400921fb54442d18
	mov	edi, ebx
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	ecx, DWORD PTR [edi+eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	edx, ebx
	and	edx, 134217728				; 08000000H
	xor	ecx, edx

; 121  : 
; 122  :      if ( gauss_bdry_e_attr >= 0 )

	mov	edx, DWORD PTR _gauss_bdry_e_attr
	mov	DWORD PTR tv541[ebp], edi

; 123  :      { if ( *(int*)get_extra(e_id,gauss_bdry_e_attr) )

	mov	eax, ecx
	test	edx, edx
	js	SHORT $LN14@gauss_int_@2
	shr	eax, 29					; 0000001dH
	imul	edx, 240				; 000000f0H
	imul	eax, 112				; 00000070H
	mov	ebx, DWORD PTR _web[eax+104]
	mov	eax, DWORD PTR _web[eax+12]
	add	ebx, edx
	mov	ebx, DWORD PTR [ebx+esi+64]
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	cmp	DWORD PTR [ebx+edx], 0

; 125  :      } else

	mov	ebx, DWORD PTR _fe$[ebp]
	je	SHORT $LN73@gauss_int_@2

; 124  :         energy -= M_PI;  /* normalization */

	fsubr	QWORD PTR _energy$[ebp]
	fstp	QWORD PTR _energy$[ebp]

; 125  :      } else

	jmp	SHORT $LN11@gauss_int_@2
$LN14@gauss_int_@2:

; 126  :      if ( get_eattr(e_id) & (BOUNDARY|FIXED) )

	mov	edx, DWORD PTR _web+124
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 192				; 000000c0H
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN73@gauss_int_@2

; 127  :         energy -= M_PI;  /* normalization */

	fsubr	QWORD PTR _energy$[ebp]
	fstp	QWORD PTR _energy$[ebp]
	jmp	SHORT $LN11@gauss_int_@2
$LN73@gauss_int_@2:

; 125  :      } else

	fstp	ST(0)
$LN11@gauss_int_@2:

; 128  : 
; 129  :      v_id = get_fe_tailv(fe);

	mov	edx, DWORD PTR _web+124
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+216
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN38@gauss_int_@2
	add	eax, DWORD PTR [edx+esi+304]
	mov	edx, DWORD PTR _web+636
	mov	eax, DWORD PTR [eax+edx*4]
	jmp	SHORT $LN37@gauss_int_@2
$LN38@gauss_int_@2:
	mov	edx, DWORD PTR [edx+esi+304]
	mov	eax, DWORD PTR [eax+edx]
$LN37@gauss_int_@2:

; 130  :      if ( gauss_bdry_v_attr >= 0 )

	cmp	DWORD PTR _gauss_bdry_v_attr, 0
	jl	SHORT $LN10@gauss_int_@2

; 131  :      { if ( *(int*)get_extra(v_id,gauss_bdry_v_attr) == 0 )

	mov	edi, DWORD PTR _gauss_bdry_v_attr
	mov	edx, eax
	imul	edi, 240				; 000000f0H
	shr	edx, 29					; 0000001dH
	imul	edx, 112				; 00000070H
	mov	ebx, DWORD PTR _web[edx+104]
	mov	edx, DWORD PTR _web[edx+12]
	add	ebx, edi
	mov	edi, DWORD PTR [ebx+esi+64]

; 132  :         continue;
; 133  :      }
; 134  :      else if ( !(get_vattr(v_id) & (BOUNDARY|FIXED) ) ) continue; 

	mov	ebx, DWORD PTR _fe$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	cmp	DWORD PTR [edi+eax], 0
	mov	edi, DWORD PTR tv541[ebp]
	jmp	SHORT $LN88@gauss_int_@2
$LN10@gauss_int_@2:
	mov	edx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 192				; 000000c0H
	xor	edx, edx
	or	eax, edx
$LN88@gauss_int_@2:
	je	$LN16@gauss_int_@2

; 135  : 
; 136  :      get_fe_side(fe,s1);

	lea	eax, DWORD PTR _s1$[ebp]
	push	eax
	push	ecx
	call	_get_edge_side

; 137  :      get_fe_side(get_prev_edge(fe),s2);

	mov	ecx, DWORD PTR _web+460
	add	esp, 8
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN46@gauss_int_@2
	mov	edx, DWORD PTR [edi+ecx]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN45@gauss_int_@2
$LN46@gauss_int_@2:
	mov	eax, DWORD PTR [edi+ecx]
	mov	eax, DWORD PTR [eax+28]
$LN45@gauss_int_@2:
	lea	edx, DWORD PTR _s2$[ebp]
	push	edx
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	push	eax
	call	_get_edge_side

; 138  :      ss1 = SDIM_dot(s1,s1);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _s1$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fstp	QWORD PTR _ss1$[ebp]

; 139  :      ss2 = SDIM_dot(s2,s2);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _s2$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fstp	QWORD PTR _ss2$[ebp]

; 140  :      ss12 = SDIM_dot(s1,s2);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _s2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s1$[ebp]
	push	ecx
	call	_dot
	fstp	QWORD PTR _ss12$[ebp]

; 141  :      a = -ss12/sqrt(ss1*ss2);

	fld	QWORD PTR _ss2$[ebp]
	add	esp, 44					; 0000002cH
	fmul	QWORD PTR _ss1$[ebp]
	call	__CIsqrt
	fst	QWORD PTR tv655[ebp]
	fdivr	QWORD PTR _ss12$[ebp]
	fchs
	fst	QWORD PTR _a$[ebp]

; 142  :      energy += acos(a);

	call	__CIacos
	fadd	QWORD PTR _energy$[ebp]
	fstp	QWORD PTR _energy$[ebp]

; 143  :      b = sqrt(1-a*a)*ss1*sqrt(ss1*ss2);

	fld	QWORD PTR _a$[ebp]
	fmul	ST(0), ST(0)
	fld1
	fsubrp	ST(1), ST(0)
	call	__CIsqrt
	fld	ST(0)
	fld	QWORD PTR _ss1$[ebp]

; 144  :      for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR _web+616
	fmul	ST(1), ST(0)
	xor	ecx, ecx
	fld	QWORD PTR tv655[ebp]
	fmul	ST(2), ST(0)
	test	eax, eax
	jle	SHORT $LN76@gauss_int_@2
	mov	eax, DWORD PTR tv923[ebp]
	fld	QWORD PTR _ss12$[ebp]
	dec	eax
	cdq
	mov	esi, 3
	idiv	esi
	add	edx, edx
	add	edx, edx
$LN6@gauss_int_@2:

; 145  :         f_info->grad[(k+1)%3][j] += (ss1*s2[j] - ss12*s1[j])/b;

	fld	QWORD PTR _s2$[ebp+ecx*8]
	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	fmul	ST(0), ST(3)
	mov	eax, DWORD PTR [eax+1336]
	fld	QWORD PTR _s1$[ebp+ecx*8]
	mov	eax, DWORD PTR [edx+eax]
	fmul	ST(0), ST(2)
	lea	eax, DWORD PTR [eax+ecx*8]
	inc	ecx
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR _web+616
	cmp	ecx, eax
	jl	SHORT $LN6@gauss_int_@2

; 144  :      for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(2)
	fstp	ST(2)
	jmp	SHORT $LN4@gauss_int_@2
$LN76@gauss_int_@2:
	fstp	ST(1)
	fstp	ST(1)
	fld	QWORD PTR _ss12$[ebp]
$LN4@gauss_int_@2:

; 146  :      b = sqrt(1-a*a)*ss2*sqrt(ss1*ss2);

	fld	QWORD PTR _ss2$[ebp]

; 147  :      for ( j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	fmul	ST(3), ST(0)
	fxch	ST(3)
	fmulp	ST(2), ST(0)
	test	eax, eax
	jle	SHORT $LN83@gauss_int_@2
	mov	eax, DWORD PTR tv923[ebp]
	cdq
	mov	esi, 3
	idiv	esi
	add	edx, edx
	add	edx, edx
$LN3@gauss_int_@2:

; 148  :         f_info->grad[(k+2)%3][j] += -(ss2*s1[j] - ss12*s2[j])/b;

	fld	QWORD PTR _s1$[ebp+ecx*8]
	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	fmul	ST(0), ST(3)
	mov	eax, DWORD PTR [eax+1336]
	fld	QWORD PTR _s2$[ebp+ecx*8]
	mov	eax, DWORD PTR [edx+eax]
	fmul	ST(0), ST(2)
	lea	eax, DWORD PTR [eax+ecx*8]
	inc	ecx
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(2)
	fsubr	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	cmp	ecx, DWORD PTR _web+616
	jl	SHORT $LN3@gauss_int_@2
$LN83@gauss_int_@2:

; 147  :      for ( j = 0 ; j < SDIM ; j++ )

	mov	esi, DWORD PTR _dymem
	fstp	ST(1)
	fstp	ST(1)
	fstp	ST(0)
$LN16@gauss_int_@2:

; 119  :   for ( k = 0 ; k < FACET_VERTS ; k++, fe = get_next_edge(fe) )

	mov	ecx, DWORD PTR _web+460
	mov	edx, DWORD PTR [edi+ecx]
	mov	eax, 1
	add	DWORD PTR tv923[ebp], eax
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN28@gauss_int_@2
	mov	ebx, DWORD PTR [edx+28]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN89@gauss_int_@2
$LN28@gauss_int_@2:
	mov	ebx, DWORD PTR [edx+32]
$LN89@gauss_int_@2:
	sub	DWORD PTR tv195[ebp], eax
	mov	DWORD PTR _fe$[ebp], ebx
	jne	$LL61@gauss_int_@2

; 149  : 
; 150  :   }
; 151  :   return energy;
; 152  :  
; 153  : } // end gauss_int_gradient()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _energy$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_gauss_int_gradient ENDP
_TEXT	ENDS
PUBLIC	??_C@_0ED@HDAFNNHF@gauss_curvature_integral?3?5More?5t@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	__real@401921fb54442d18
PUBLIC	_v_id$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_wedge_angle
EXTRN	_eval_all:PROC
EXTRN	_errmsg:BYTE
EXTRN	_sprintf:PROC
EXTRN	_elnames:BYTE
EXTRN	_nullcon:QWORD
;	COMDAT ??_C@_0ED@HDAFNNHF@gauss_curvature_integral?3?5More?5t@
CONST	SEGMENT
??_C@_0ED@HDAFNNHF@gauss_curvature_integral?3?5More?5t@ DB 'gauss_curvatu'
	DB	're_integral: More than two constraints on vertex %s.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT __real@401921fb54442d18
CONST	SEGMENT
__real@401921fb54442d18 DQ 0401921fb54442d18r	; 6.28319
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _wedge_angle
_TEXT	SEGMENT
_fval$ = -120						; size = 8
_v_id$GSCopy$ = -112					; size = 4
tv314 = -108						; size = 8
tv139 = -108						; size = 8
tv230 = -104						; size = 4
_normal$ = -100						; size = 96
__$ArrayPad$ = -4					; size = 4
_v_id$ = 8						; size = 4
_wedge_angle PROC					; COMDAT

; 236  : { int concount;

	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 237  :   conmap_t *conmap = get_v_constraint_map(v_id);

	mov	edx, DWORD PTR _web+104
	mov	ecx, DWORD PTR _dymem
	cmp	DWORD PTR [edx+ecx+1288], 0
	mov	eax, DWORD PTR _v_id$[ebp]
	push	esi
	push	edi

; 258  :   { 
; 259  :     con = get_constraint(conmap[j]);
; 260  :     eval_all(con->formula,get_coord(v_id),SDIM,&fval,normal[concount],v_id); 

	mov	DWORD PTR _v_id$GSCopy$[ebp], eax
	je	SHORT $LN9@wedge_angl

; 237  :   conmap_t *conmap = get_v_constraint_map(v_id);

	mov	edi, DWORD PTR _web+12
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edi+esi*4]
	add	edi, DWORD PTR [edx+ecx+1264]
	jmp	SHORT $LN10@wedge_angl
$LN9@wedge_angl:
	mov	edi, OFFSET _nullcon
$LN10@wedge_angl:

; 238  :   REAL normal[2][MAXCOORD];
; 239  :   REAL c;
; 240  :   int j;
; 241  :   struct constraint *con;
; 242  :   REAL fval;
; 243  : 
; 244  :   concount = conmap[0];

	mov	ecx, DWORD PTR [edi]

; 245  : 
; 246  :   if ( concount == 0 ) return 2*M_PI;

	test	ecx, ecx
	jne	SHORT $LN6@wedge_angl
	fld	QWORD PTR __real@401921fb54442d18
	pop	edi
	pop	esi

; 268  : 
; 269  : }  // end wedge_angle()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@wedge_angl:

; 247  :   if ( concount == 1 ) return M_PI;

	cmp	ecx, 1
	jne	SHORT $LN5@wedge_angl
	fld	QWORD PTR __real@400921fb54442d18
	pop	edi
	pop	esi

; 268  : 
; 269  : }  // end wedge_angle()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@wedge_angl:

; 248  : 
; 249  :   /* two constraints, so find angle between */
; 250  : 
; 251  :   if ( concount > 2 ) 

	cmp	ecx, 2
	jle	SHORT $LN4@wedge_angl

; 252  :   { sprintf(errmsg,
; 253  :      "gauss_curvature_integral: More than two constraints on vertex %s.\n",
; 254  :           ELNAME(v_id));

	test	eax, 268435456				; 10000000H
	je	SHORT $LN11@wedge_angl
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN12@wedge_angl
$LN11@wedge_angl:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN12@wedge_angl:
	push	eax
	push	OFFSET ??_C@_0ED@HDAFNNHF@gauss_curvature_integral?3?5More?5t@
	push	OFFSET _errmsg
	call	_sprintf

; 255  :     kb_error(1593,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	1593					; 00000639H
	call	_kb_error
	mov	eax, DWORD PTR _v_id$GSCopy$[ebp]
	add	esp, 24					; 00000018H
$LN4@wedge_angl:

; 256  :   }
; 257  :   for ( j = 1, concount = 0 ; j <= (int)conmap[0] ; j++ ) 

	mov	esi, 1
	cmp	DWORD PTR [edi], esi
	jl	SHORT $LN1@wedge_angl
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	push	ebx

; 258  :   { 
; 259  :     con = get_constraint(conmap[j]);
; 260  :     eval_all(con->formula,get_coord(v_id),SDIM,&fval,normal[concount],v_id); 

	mov	DWORD PTR tv230[ebp], ecx
	lea	ebx, DWORD PTR _normal$[ebp]
	jmp	SHORT $LN3@wedge_angl
	npad	6
$LL15@wedge_angl:

; 256  :   }
; 257  :   for ( j = 1, concount = 0 ; j <= (int)conmap[0] ; j++ ) 

	mov	eax, DWORD PTR _v_id$GSCopy$[ebp]
	mov	ecx, DWORD PTR tv230[ebp]
$LN3@wedge_angl:

; 258  :   { 
; 259  :     con = get_constraint(conmap[j]);
; 260  :     eval_all(con->formula,get_coord(v_id),SDIM,&fval,normal[concount],v_id); 

	mov	edx, DWORD PTR _web+616
	push	eax
	push	ebx
	lea	eax, DWORD PTR _fval$[ebp]
	push	eax
	mov	eax, DWORD PTR _web+12
	mov	ecx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _dymem
	push	edx
	mov	edx, DWORD PTR _web+104
	add	ecx, DWORD PTR [edx+eax+64]
	mov	edx, DWORD PTR _web+652
	push	ecx
	mov	ecx, DWORD PTR [edi+esi*4]
	and	ecx, 1073741823				; 3fffffffH
	imul	ecx, 176				; 000000b0H
	mov	eax, DWORD PTR [ecx+edx+40]
	push	eax
	call	_eval_all
	inc	esi
	add	esp, 24					; 00000018H
	add	ebx, 48					; 00000030H
	cmp	esi, DWORD PTR [edi]
	jle	SHORT $LL15@wedge_angl
	pop	ebx
$LN1@wedge_angl:

; 261  :     concount++;
; 262  :   }
; 263  :   c = SDIM_dot(normal[0],normal[1])
; 264  :         /sqrt(SDIM_dot(normal[0],normal[0])) 
; 265  :         /sqrt(SDIM_dot(normal[1],normal[1]));

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _normal$[ebp+48]
	push	edx
	lea	eax, DWORD PTR _normal$[ebp]
	push	eax
	call	_dot
	fstp	QWORD PTR tv314[ebp]
	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _normal$[ebp]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	add	esp, 24					; 00000018H
	call	__CIsqrt
	fdivr	QWORD PTR tv314[ebp]
	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _normal$[ebp+48]
	push	edx
	mov	eax, edx
	push	eax
	fstp	QWORD PTR tv139[ebp]
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fdivr	QWORD PTR tv139[ebp]

; 266  : 
; 267  :   return M_PI - acos(c);

	call	__CIacos
	fsubr	QWORD PTR __real@400921fb54442d18

; 268  : 
; 269  : }  // end wedge_angle()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_wedge_angle ENDP
_TEXT	ENDS
PUBLIC	__real@4000000000000000
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	??_C@_07EIDGGOJA@GAUSS?4C?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_sqgauss_force
EXTRN	_temp_free:PROC
EXTRN	_binary_tree_add:PROC
EXTRN	_kb_temp_calloc:PROC
EXTRN	_localbase:DWORD
EXTRN	_sqgauss_param:DWORD
;	COMDAT __real@4000000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT ??_C@_07EIDGGOJA@GAUSS?4C?$AA@
CONST	SEGMENT
??_C@_07EIDGGOJA@GAUSS?4C?$AA@ DB 'GAUSS.C', 00H	; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\gauss.c
CONST	ENDS
;	COMDAT _sqgauss_force
_TEXT	SEGMENT
tv3868 = -328						; size = 8
tv1708 = -320						; size = 8
_area$ = -312						; size = 8
tv1728 = -304						; size = 8
tv1530 = -296						; size = 4
tv2471 = -292						; size = 4
tv3866 = -288						; size = 8
tv1814 = -288						; size = 8
_gc$ = -288						; size = 8
_modulus$ = -280					; size = 8
_jj2$89295 = -272					; size = 4
_jj1$89294 = -268					; size = 4
_ge1$89291 = -264					; size = 4
_i1$89289 = -260					; size = 4
tv2948 = -256						; size = 4
_gverts$ = -252						; size = 4
_gedges$ = -248						; size = 4
tv3616 = -244						; size = 4
tv811 = -244						; size = 4
tv3060 = -240						; size = 4
tv2469 = -236						; size = 4
tv2355 = -236						; size = 4
tv2357 = -232						; size = 4
_j$ = -232						; size = 4
tv2946 = -228						; size = 4
tv2214 = -228						; size = 4
tv1887 = -228						; size = 4
tv2944 = -224						; size = 4
tv1876 = -224						; size = 4
_fixcount$ = -224					; size = 4
_side$ = -220						; size = 144
_v$ = -76						; size = 12
_st$ = -64						; size = 24
_ss$ = -40						; size = 24
_e$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_sqgauss_force PROC					; COMDAT

; 281  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 282  :   REAL modulus = globals(sqgauss_param)->value.real;

	mov	eax, DWORD PTR _sqgauss_param
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN52@sqgauss_fo
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN54@sqgauss_fo
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN53@sqgauss_fo
$LN54@sqgauss_fo:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN52@sqgauss_fo
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN53@sqgauss_fo
$LN52@sqgauss_fo:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN53@sqgauss_fo:

; 283  :   vertex_id v_id,v[3];
; 284  :   edge_id e_id,e[3];
; 285  :   facet_id f_id;
; 286  :   facetedge_id fe;
; 287  :   int fixcount;
; 288  :   REAL side[3][MAXCOORD];
; 289  :   REAL ss[3];
; 290  :   REAL st[3];
; 291  :   int j,i;
; 292  :   REAL area,angle,c,c1,c2;
; 293  :   REAL *f;
; 294  :   REAL gc;  /* gaussian curvarture */
; 295  :   struct gvert { REAL angle;
; 296  :                  REAL angle_grad[MAXCOORD];
; 297  :                  REAL area;
; 298  :                  REAL area_grad[MAXCOORD];
; 299  :                  REAL star_area;
; 300  :                  REAL star_area_grad[MAXCOORD];
; 301  :                  REAL gc;  /* gaussian curvature */
; 302  :                  } *gverts;
; 303  :   struct gedge { REAL area_grad[2][MAXCOORD];
; 304  :                  REAL star_area_grad[2][MAXCOORD];
; 305  :                  REAL angle_grad[2][MAXCOORD];
; 306  :                  /* dhead/dtail, dtail/dhead */
; 307  :                } *gedges;
; 308  :   gverts = (struct gvert*)temp_calloc(web.skel[VERTEX].max_ord+1,
; 309  :                                             sizeof(struct gvert));

	mov	ecx, DWORD PTR _web+68
	fld	QWORD PTR [eax+64]
	push	ebx
	fstp	QWORD PTR _modulus$[ebp]
	push	esi
	push	edi
	push	309					; 00000135H
	push	OFFSET ??_C@_07EIDGGOJA@GAUSS?4C?$AA@
	inc	ecx
	push	176					; 000000b0H
	push	ecx
	call	_kb_temp_calloc

; 310  :   gedges = (struct gedge*)temp_calloc(web.skel[EDGE].max_ord+1,
; 311  :                                             sizeof(struct gedge));

	mov	edx, DWORD PTR _web+180
	push	311					; 00000137H
	push	OFFSET ??_C@_07EIDGGOJA@GAUSS?4C?$AA@
	inc	edx
	push	288					; 00000120H
	push	edx
	mov	DWORD PTR _gverts$[ebp], eax
	call	_kb_temp_calloc

; 312  : 
; 313  :   /* accumulate angles around vertices */
; 314  :   FOR_ALL_FACETS(f_id)

	mov	edx, DWORD PTR _web+272
	mov	ecx, edx
	shr	ecx, 28					; 0000001cH
	add	esp, 32					; 00000020H
	and	ecx, 1
	mov	DWORD PTR _gedges$[ebp], eax
	je	$LN144@sqgauss_fo
	mov	ebx, DWORD PTR _web+236
$LL49@sqgauss_fo:
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	esi, DWORD PTR [eax+ebx]
	mov	DWORD PTR tv1530[ebp], eax
	mov	eax, DWORD PTR [esi+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	je	$LN48@sqgauss_fo

; 315  :     { fe = get_facet_fe(f_id);

	xor	ebx, ebx
	cmp	ecx, ebx
	je	SHORT $LN74@sqgauss_fo
$LN73@sqgauss_fo:
	mov	esi, DWORD PTR [esi+28]
	test	edx, 134217728				; 08000000H
	je	SHORT $LN72@sqgauss_fo
	xor	esi, 134217728				; 08000000H
$LN72@sqgauss_fo:
	mov	edi, esi
$LN74@sqgauss_fo:

; 316  :       fixcount = 0;

	lea	eax, DWORD PTR _side$[ebp]
	mov	DWORD PTR tv2214[ebp], eax

; 317  :       for ( i = 0; i < FACET_VERTS ; i++,fe=get_next_edge(fe) )

	mov	eax, DWORD PTR _web+460
	mov	DWORD PTR _fixcount$[ebp], ebx
$LL76@sqgauss_fo:

; 318  :         { e[i] = get_fe_edge(fe);

	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	ecx, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [ecx+20]

; 319  :           get_edge_side(e[i],side[i]);

	mov	ecx, DWORD PTR tv2214[ebp]
	mov	edx, edi
	and	edx, 134217728				; 08000000H
	xor	eax, edx
	push	ecx
	push	eax
	mov	DWORD PTR _e$[ebp+ebx], eax
	call	_get_edge_side

; 320  :           v[i] = get_edge_tailv(e[i]);

	mov	eax, DWORD PTR _e$[ebp+ebx]
	mov	edx, DWORD PTR _web+124
	mov	ecx, DWORD PTR _dymem
	add	esp, 8
	test	eax, 134217728				; 08000000H
	je	SHORT $LN83@sqgauss_fo
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+216
	add	eax, DWORD PTR [edx+ecx+304]
	mov	ecx, DWORD PTR _web+636
	mov	eax, DWORD PTR [eax+ecx*4]
	jmp	SHORT $LN82@sqgauss_fo
$LN83@sqgauss_fo:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [edx+ecx+304]
	mov	eax, DWORD PTR [eax+ecx]
$LN82@sqgauss_fo:

; 321  :           if ( get_vattr(v[i]) & (FIXED|BOUNDARY) ) fixcount++;

	mov	edx, DWORD PTR _web+12
	mov	DWORD PTR _v$[ebp+ebx], eax
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 192				; 000000c0H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN43@sqgauss_fo
	inc	DWORD PTR _fixcount$[ebp]
$LN43@sqgauss_fo:

; 317  :       for ( i = 0; i < FACET_VERTS ; i++,fe=get_next_edge(fe) )

	add	DWORD PTR tv2214[ebp], 48		; 00000030H
	mov	eax, DWORD PTR _web+460
	add	ebx, 4
	test	edi, 134217728				; 08000000H
	je	SHORT $LN77@sqgauss_fo
	mov	ecx, DWORD PTR [esi+eax]
	mov	edi, DWORD PTR [ecx+28]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN131@sqgauss_fo
$LN77@sqgauss_fo:
	mov	edx, DWORD PTR [esi+eax]
	mov	edi, DWORD PTR [edx+32]
$LN131@sqgauss_fo:
	cmp	ebx, 12					; 0000000cH
	jl	$LL76@sqgauss_fo

; 322  :         }
; 323  :         for ( i = 0 ; i < FACET_VERTS ; i++ )

	xor	esi, esi
	lea	edi, DWORD PTR _side$[ebp]
$LL40@sqgauss_fo:

; 324  :          { ss[i] = SDIM_dot(side[i],side[i]);

	mov	eax, DWORD PTR _web+616
	push	eax
	push	edi
	push	edi
	call	_dot
	fstp	QWORD PTR _ss$[ebp+esi*8]

; 325  :            st[i] = SDIM_dot(side[i],side[(i+2)%3]);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	eax, DWORD PTR [esi+2]
	cdq
	mov	ecx, 3
	idiv	ecx
	lea	edx, DWORD PTR [edx+edx*2]
	add	edx, edx
	lea	eax, DWORD PTR _side$[ebp+edx*8]
	push	eax
	push	edi
	call	_dot
	fstp	QWORD PTR _st$[ebp+esi*8]
	inc	esi
	add	esp, 24					; 00000018H
	add	edi, 48					; 00000030H
	cmp	esi, 3
	jl	SHORT $LL40@sqgauss_fo

; 326  :          }
; 327  :         area = 0.5*sqrt(ss[0]*ss[1]-st[1]*st[1]);

	fld	QWORD PTR _ss$[ebp+8]
	fmul	QWORD PTR _ss$[ebp]
	fld	QWORD PTR _st$[ebp+8]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	call	__CIsqrt
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	mov	ecx, 3
	fxch	ST(1)
	sub	ecx, DWORD PTR _fixcount$[ebp]

; 328  :         for ( i = 0 ; i < FACET_VERTS ; i++ )

	xor	eax, eax
	fst	QWORD PTR _area$[ebp]
	mov	DWORD PTR tv3616[ebp], ecx
	fdiv	ST(1), ST(0)
	lea	edx, DWORD PTR _side$[ebp]
	mov	DWORD PTR tv2948[ebp], 2
	mov	DWORD PTR tv3060[ebp], edx
	mov	DWORD PTR tv2946[ebp], eax
	mov	DWORD PTR tv2944[ebp], eax
	fxch	ST(1)
	fstp	QWORD PTR tv1708[ebp]
	fld	QWORD PTR __real@4008000000000000
	fdivr	ST(0), ST(1)
	fstp	QWORD PTR tv1728[ebp]
	fild	DWORD PTR tv3616[ebp]
	mov	DWORD PTR tv811[ebp], 3
	fst	QWORD PTR tv3866[ebp]
	fdivp	ST(1), ST(0)
	fstp	QWORD PTR tv3868[ebp]
	npad	8
$LL37@sqgauss_fo:

; 329  :         { int i1 = (i+1)%3;

	mov	ecx, DWORD PTR tv2948[ebp]
	lea	eax, DWORD PTR [ecx-1]
	cdq
	mov	esi, 3
	idiv	esi

; 330  :           int i2 = (i+2)%3;

	mov	eax, ecx
	mov	ecx, esi
	mov	DWORD PTR _i1$89289[ebp], edx
	cdq
	idiv	ecx
	mov	edi, edx

; 331  :           struct gedge *ge1,*ge2;
; 332  :           struct gvert *gv;
; 333  :           int jj1,jj2;
; 334  : 
; 335  :           gv = gverts + loc_ordinal(v[i]);

	mov	edx, DWORD PTR tv2946[ebp]
	mov	ebx, DWORD PTR _v$[ebp+edx]
	test	ebx, 268435456				; 10000000H
	je	SHORT $LN58@sqgauss_fo
	and	ebx, 134217727				; 07ffffffH
	jmp	SHORT $LN59@sqgauss_fo
$LN58@sqgauss_fo:
	or	ebx, -1
$LN59@sqgauss_fo:

; 336  :           ge1 = gedges + loc_ordinal(e[i]);

	mov	eax, DWORD PTR tv2946[ebp]
	imul	ebx, 176				; 000000b0H
	mov	ecx, DWORD PTR _e$[ebp+eax]
	add	ebx, DWORD PTR _gverts$[ebp]
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN60@sqgauss_fo
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN61@sqgauss_fo
$LN60@sqgauss_fo:
	or	eax, -1
$LN61@sqgauss_fo:
	lea	eax, DWORD PTR [eax+eax*8]
	shl	eax, 5
	add	eax, DWORD PTR _gedges$[ebp]
	mov	DWORD PTR _ge1$89291[ebp], eax

; 337  :           ge2 = gedges + loc_ordinal(e[i2]);

	mov	eax, DWORD PTR _e$[ebp+edi*4]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN62@sqgauss_fo
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	jmp	SHORT $LN63@sqgauss_fo
$LN62@sqgauss_fo:
	or	esi, -1
$LN63@sqgauss_fo:

; 338  :           jj1 =  inverted(e[i]) ? 1 : 0;

	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR _jj1$89294[ebp], ecx

; 339  :           jj2 =  inverted(e[i2]) ? 0 : 1;
; 340  : 
; 341  :           c = -st[i]/sqrt(ss[i]*ss[i2]);

	mov	ecx, DWORD PTR tv2944[ebp]
	fld	QWORD PTR _ss$[ebp+ecx]
	shr	eax, 27					; 0000001bH
	fmul	QWORD PTR _ss$[ebp+edi*8]
	lea	esi, DWORD PTR [esi+esi*8]
	not	eax
	and	eax, 1
	shl	esi, 5
	add	esi, DWORD PTR _gedges$[ebp]
	mov	DWORD PTR _jj2$89295[ebp], eax
	call	__CIsqrt
	mov	edx, DWORD PTR tv2944[ebp]
	fdivr	QWORD PTR _st$[ebp+edx]
	fchs

; 342  :           angle = acos(c);

	call	__CIacos

; 343  :           gv->angle += angle;

	fadd	QWORD PTR [ebx]

; 344  :           c1 = (1+st[i]/ss[i])/area/2;

	mov	eax, DWORD PTR tv2944[ebp]

; 345  :           c2 = (1+st[i]/ss[i2])/area/2;
; 346  :           for ( j = 0 ; j < SDIM ; j++ )

	xor	edx, edx
	fstp	QWORD PTR [ebx]
	mov	ecx, DWORD PTR _web+616
	fld	QWORD PTR _st$[ebp+eax]
	fdiv	QWORD PTR _ss$[ebp+eax]
	fld	ST(0)
	fld1
	fadd	ST(1), ST(0)
	fld	QWORD PTR _area$[ebp]
	fdiv	ST(2), ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(3), ST(0)
	fld	QWORD PTR _st$[ebp+eax]
	fdiv	QWORD PTR _ss$[ebp+edi*8]
	fld	ST(0)
	faddp	ST(4), ST(0)
	fxch	ST(3)
	fdiv	ST(0), ST(2)
	fmul	ST(0), ST(1)
	test	ecx, ecx
	jle	SHORT $LN159@sqgauss_fo

; 337  :           ge2 = gedges + loc_ordinal(e[i2]);

	lea	ecx, DWORD PTR [edi+edi*2]
	add	ecx, ecx
	lea	ecx, DWORD PTR _side$[ebp+ecx*8]
	mov	DWORD PTR tv2355[ebp], ecx
	mov	ecx, DWORD PTR tv3060[ebp]
	lea	eax, DWORD PTR [ebx+8]
	mov	DWORD PTR tv2357[ebp], ecx
$LN34@sqgauss_fo:

; 347  :              gv->angle_grad[j] += c1*side[i][j] - c2*side[i2][j];

	mov	ecx, DWORD PTR tv2357[ebp]
	fld	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv2355[ebp]
	add	DWORD PTR tv2357[ebp], 8
	fmul	ST(0), ST(5)
	fld	QWORD PTR [ecx]
	add	DWORD PTR tv2355[ebp], 8
	fmul	ST(0), ST(2)
	inc	edx
	add	eax, 8
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	mov	ecx, DWORD PTR _web+616
	cmp	edx, ecx
	jl	SHORT $LN34@sqgauss_fo
$LN159@sqgauss_fo:

; 345  :           c2 = (1+st[i]/ss[i2])/area/2;
; 346  :           for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(0)

; 349  :           c2 = 1/area/2;
; 350  :           for ( j = 0 ; j < SDIM ; j++ )

	mov	DWORD PTR _j$[ebp], 0
	fstp	ST(3)
	fdiv	ST(3), ST(0)
	fxch	ST(3)
	fmul	ST(0), ST(2)
	fld	QWORD PTR tv1708[ebp]
	fld	ST(0)
	test	ecx, ecx
	jle	SHORT $LN164@sqgauss_fo

; 348  :           c1 = st[i]/ss[i]/area/2;

	mov	eax, DWORD PTR _jj1$89294[ebp]
	lea	eax, DWORD PTR [eax+eax*2+12]
	shl	eax, 4
	add	eax, DWORD PTR _ge1$89291[ebp]
	lea	edx, DWORD PTR [edi+edi*2]
	add	edx, edx
	lea	ecx, DWORD PTR _side$[ebp+edx*8]
	mov	DWORD PTR tv2469[ebp], ecx
	mov	ecx, DWORD PTR tv3060[ebp]
	jmp	SHORT $LN31@sqgauss_fo
$LN148@sqgauss_fo:
	mov	ecx, DWORD PTR tv2471[ebp]
$LN31@sqgauss_fo:

; 351  :              ge1->angle_grad[jj1][j] -= c1*side[i][j] - c2*side[i2][j];

	fld	QWORD PTR [ecx]
	mov	edx, DWORD PTR tv2469[ebp]
	add	DWORD PTR tv2469[ebp], 8
	fmul	ST(0), ST(3)
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR _j$[ebp]
	fmul	ST(0), ST(2)
	add	ecx, 8
	inc	edx
	mov	DWORD PTR tv2471[ebp], ecx
	fsubp	ST(1), ST(0)
	add	eax, 8
	mov	DWORD PTR _j$[ebp], edx
	fsubr	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	mov	ecx, DWORD PTR _web+616
	cmp	edx, ecx
	jl	SHORT $LN148@sqgauss_fo
$LN164@sqgauss_fo:

; 349  :           c2 = 1/area/2;
; 350  :           for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(2)

; 353  :           c2 = st[i]/ss[i2]/area/2;
; 354  :           for ( j = 0 ; j < SDIM ; j++ )

	xor	edx, edx
	fstp	ST(1)
	fxch	ST(1)
	fdiv	ST(0), ST(3)
	fmulp	ST(2), ST(0)
	test	ecx, ecx
	jle	SHORT $LN170@sqgauss_fo

; 352  :           c1 = 1/area/2;

	mov	eax, DWORD PTR _jj2$89295[ebp]
	mov	ecx, DWORD PTR tv3060[ebp]
	lea	eax, DWORD PTR [eax+eax*2+12]
	shl	eax, 4
	lea	edi, DWORD PTR [edi+edi*2]
	add	eax, esi
	add	edi, edi
	lea	edi, DWORD PTR _side$[ebp+edi*8]
$LN28@sqgauss_fo:

; 355  :              ge2->angle_grad[jj2][j] -= c1*side[i][j] - c2*side[i2][j];

	fld	ST(0)
	inc	edx
	fmul	QWORD PTR [ecx]
	add	ecx, 8
	fld	QWORD PTR [edi]
	add	edi, 8
	fmul	ST(0), ST(3)
	add	eax, 8
	fsubp	ST(1), ST(0)
	fsubr	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	cmp	edx, DWORD PTR _web+616
	jl	SHORT $LN28@sqgauss_fo
$LN170@sqgauss_fo:

; 357  :           gv->star_area  += area/(3-fixcount);
; 358  :           c1 = ss[i1]/area/4;

	mov	eax, DWORD PTR _i1$89289[ebp]
	fstp	ST(1)
	fstp	ST(0)

; 359  :           c2 = st[i1]/area/4;
; 360  :           for ( j = 0 ; j < SDIM ; j++ )

	mov	DWORD PTR _j$[ebp], 0
	fld	QWORD PTR [ebx+56]
	fadd	QWORD PTR tv1728[ebp]
	fstp	QWORD PTR [ebx+56]
	fld	QWORD PTR tv3868[ebp]
	fadd	QWORD PTR [ebx+112]
	fstp	QWORD PTR [ebx+112]
	cmp	DWORD PTR _web+616, 0
	fld	QWORD PTR _ss$[ebp+eax*8]
	fdiv	ST(0), ST(1)
	fld	QWORD PTR __real@3fd0000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR _st$[ebp+eax*8]
	fdivrp	ST(3), ST(0)
	fmulp	ST(2), ST(0)
	jle	$LN172@sqgauss_fo

; 356  :           gv->area  += area/3;

	mov	ecx, DWORD PTR _jj2$89295[ebp]
	fld	QWORD PTR __real@4008000000000000
	mov	eax, DWORD PTR _jj1$89294[ebp]
	fld	QWORD PTR tv3866[ebp]
	mov	edi, DWORD PTR tv3060[ebp]
	lea	ecx, DWORD PTR [ecx+ecx*2+6]
	shl	ecx, 4
	add	ecx, esi
	mov	esi, DWORD PTR _i1$89289[ebp]
	lea	eax, DWORD PTR [eax+eax*2+6]
	shl	eax, 4
	add	eax, DWORD PTR _ge1$89291[ebp]
	lea	esi, DWORD PTR [esi+esi*2]
	add	esi, esi
	lea	edx, DWORD PTR [ebx+120]
	lea	esi, DWORD PTR _side$[ebp+esi*8]
$LN147@sqgauss_fo:

; 361  :             { c = c2*side[i1][j] - c1*side[i][j];

	fld	ST(3)
	inc	DWORD PTR _j$[ebp]
	fmul	QWORD PTR [esi]
	mov	ebx, DWORD PTR _j$[ebp]
	fld	QWORD PTR [edi]
	add	esi, 8
	fmul	ST(0), ST(4)
	add	edi, 8
	add	edx, 8
	add	eax, 8
	fsubp	ST(1), ST(0)
	add	ecx, 8

; 362  :               gv->area_grad[j] += c/3;

	fld	ST(0)
	fdiv	ST(0), ST(3)
	fld	QWORD PTR [edx-64]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx-64]

; 363  :               gv->star_area_grad[j] += c/(3-fixcount);

	fxch	ST(1)
	fdiv	ST(0), ST(2)
	fld	ST(0)
	fadd	QWORD PTR [edx-8]
	fstp	QWORD PTR [edx-8]

; 364  :               ge1->area_grad[jj1][j] += c/3;

	fld	ST(1)
	fadd	QWORD PTR [eax-104]
	fstp	QWORD PTR [eax-104]

; 365  :               ge2->area_grad[jj2][j] += c/3;

	fxch	ST(1)
	fadd	QWORD PTR [ecx-104]
	fstp	QWORD PTR [ecx-104]

; 366  :               ge1->star_area_grad[jj1][j] += c/(3-fixcount);

	fld	ST(0)
	fadd	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]

; 367  :               ge2->star_area_grad[jj2][j] += c/(3-fixcount);

	fadd	QWORD PTR [ecx-8]
	fstp	QWORD PTR [ecx-8]
	cmp	ebx, DWORD PTR _web+616
	jl	SHORT $LN147@sqgauss_fo

; 359  :           c2 = st[i1]/area/4;
; 360  :           for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(2)
	fstp	ST(2)
$LN172@sqgauss_fo:
	add	DWORD PTR tv2946[ebp], 4
	fstp	ST(0)
	add	DWORD PTR tv2944[ebp], 8
	fstp	ST(0)
	add	DWORD PTR tv3060[ebp], 48		; 00000030H
	mov	eax, 1
	add	DWORD PTR tv2948[ebp], eax
	sub	DWORD PTR tv811[ebp], eax
	jne	$LL37@sqgauss_fo

; 328  :         for ( i = 0 ; i < FACET_VERTS ; i++ )

	mov	ebx, DWORD PTR _web+236
$LN48@sqgauss_fo:

; 312  : 
; 313  :   /* accumulate angles around vertices */
; 314  :   FOR_ALL_FACETS(f_id)

	mov	eax, DWORD PTR tv1530[ebp]
	mov	ecx, DWORD PTR [eax+ebx]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, edx
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	jne	$LL49@sqgauss_fo
$LN144@sqgauss_fo:

; 368  :             }
; 369  :         }
; 370  :     }
; 371  :   
; 372  :   /* calc square gauss curvature at each vertex */
; 373  :   FOR_ALL_VERTICES(v_id)

	mov	edx, DWORD PTR _web+48
	fld	QWORD PTR __real@4000000000000000
	fld	QWORD PTR _modulus$[ebp]
	mov	esi, edx
	shr	esi, 28					; 0000001cH
	and	esi, 1
	je	$LN20@sqgauss_fo
$LN22@sqgauss_fo:
	mov	eax, DWORD PTR _web+12
	mov	edi, edx
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edi*4]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR tv1814[ebp+4], eax
	mov	eax, ecx
	and	eax, 1
	xor	ebx, ebx
	or	eax, ebx
	je	$LN21@sqgauss_fo

; 374  :     { struct gvert *gv = gverts + loc_ordinal(v_id);

	test	esi, esi
	je	SHORT $LN64@sqgauss_fo
	mov	esi, edi
	jmp	SHORT $LN65@sqgauss_fo
$LN64@sqgauss_fo:
	or	esi, -1
$LN65@sqgauss_fo:
	imul	esi, 176				; 000000b0H
	add	esi, DWORD PTR _gverts$[ebp]

; 375  :       if ( get_vattr(v_id) & (FIXED|BOUNDARY) ) continue;

	and	ecx, 192				; 000000c0H
	xor	eax, eax
	or	ecx, eax
	jne	$LN21@sqgauss_fo
	fstp	ST(0)

; 376  :       gc = (wedge_angle(v_id) - gv->angle)/gv->area;

	push	edx
	fstp	ST(0)
	call	_wedge_angle
	fsub	QWORD PTR [esi]

; 377  :       binary_tree_add(web.total_energy_addends,modulus*gc*gc*gv->star_area);

	push	ecx
	fdiv	QWORD PTR [esi+56]
	fst	QWORD PTR _gc$[ebp]
	fld	QWORD PTR _modulus$[ebp]
	fmul	ST(0), ST(1)
	fmulp	ST(1), ST(0)
	fmul	QWORD PTR [esi+112]
	fstp	QWORD PTR [esp]
	push	OFFSET _web+1248
	call	_binary_tree_add

; 378  :       gv->gc = gc;

	fld	QWORD PTR _gc$[ebp]
	fst	QWORD PTR [esi+168]

; 379  : 
; 380  :       /* now self terms in derivative */
; 381  :       f = get_force(v_id);

	mov	ecx, DWORD PTR _web+12
	mov	eax, DWORD PTR _web+104
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	edx, DWORD PTR _dymem
	add	ecx, DWORD PTR [eax+edx+784]

; 382  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR _web+616, eax
	jle	$LN257@sqgauss_fo
	fld	ST(0)
	lea	edx, DWORD PTR [esi+64]
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fld	ST(2)
	fmul	ST(0), ST(3)
	fld	QWORD PTR _modulus$[ebp]
$LN150@sqgauss_fo:

; 383  :          f[j] -= (2*gc*gv->star_area*(-gv->angle_grad[j]/gv->area 
; 384  :                          - gc*gv->area_grad[j]/gv->area)
; 385  :                          + gc*gc*gv->star_area_grad[j])*modulus;

	fld	QWORD PTR [edx-56]
	inc	eax
	fdiv	QWORD PTR [esi+56]
	add	edx, 8
	fchs
	fld	QWORD PTR [edx-8]
	fmul	ST(0), ST(6)
	fdiv	QWORD PTR [esi+56]
	fsubp	ST(1), ST(0)
	fld	ST(4)
	fmul	QWORD PTR [esi+112]
	fmulp	ST(1), ST(0)
	fld	QWORD PTR [edx+48]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [ecx+eax*8-8]
	fstp	QWORD PTR [ecx+eax*8-8]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN150@sqgauss_fo

; 382  :       for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(4)
	fstp	ST(2)
	fstp	ST(1)
	fxch	ST(1)
$LN21@sqgauss_fo:

; 368  :             }
; 369  :         }
; 370  :     }
; 371  :   
; 372  :   /* calc square gauss curvature at each vertex */
; 373  :   FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR _web+12
	mov	edx, DWORD PTR [ecx+edi*4]
	mov	edx, DWORD PTR [edx]
	mov	esi, edx
	shr	esi, 28					; 0000001cH
	and	esi, 1
	jne	$LN22@sqgauss_fo
$LN20@sqgauss_fo:

; 386  :     }
; 387  :   
; 388  :   /* now cross terms from edges */
; 389  :   FOR_ALL_EDGES(e_id)

	mov	ecx, DWORD PTR _web+160
	mov	ebx, ecx
	shr	ebx, 28					; 0000001cH
	and	ebx, 1
	je	$LN254@sqgauss_fo
	mov	edx, DWORD PTR _web+124
$LN154@sqgauss_fo:
	mov	edi, DWORD PTR _web+216
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv1876[ebp], eax
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	xor	esi, esi
	or	eax, esi
	je	$LN12@sqgauss_fo

; 390  :     { struct gvert *gv1 = gverts + loc_ordinal(get_edge_tailv(e_id));

	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edi+eax+304]
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR tv1887[ebp], ecx
	je	SHORT $LN87@sqgauss_fo
	add	edx, eax
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN86@sqgauss_fo
$LN257@sqgauss_fo:

; 382  :       for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(0)
	fld	QWORD PTR __real@4000000000000000
	fld	QWORD PTR _modulus$[ebp]
	jmp	$LN21@sqgauss_fo

; 390  :     { struct gvert *gv1 = gverts + loc_ordinal(get_edge_tailv(e_id));

$LN87@sqgauss_fo:
	add	edx, eax
	mov	eax, DWORD PTR [edx]
$LN86@sqgauss_fo:
	test	eax, 268435456				; 10000000H
	je	SHORT $LN66@sqgauss_fo
	test	ecx, ecx
	je	SHORT $LN91@sqgauss_fo
	mov	ecx, DWORD PTR _web+636
	mov	edi, DWORD PTR [edx+ecx*4]
	and	edi, 134217727				; 07ffffffH
	jmp	SHORT $LN67@sqgauss_fo
$LN91@sqgauss_fo:
	mov	edi, DWORD PTR [edx]
	and	edi, 134217727				; 07ffffffH
	jmp	SHORT $LN67@sqgauss_fo
$LN66@sqgauss_fo:
	or	edi, -1
$LN67@sqgauss_fo:
	mov	ecx, DWORD PTR _gverts$[ebp]
	imul	edi, 176				; 000000b0H

; 391  :       struct gvert *gv2 = gverts + loc_ordinal(get_edge_headv(e_id));

	mov	esi, DWORD PTR tv1887[ebp]
	add	edi, ecx
	test	esi, esi
	je	SHORT $LN95@sqgauss_fo
	mov	eax, DWORD PTR [edx]
	jmp	SHORT $LN94@sqgauss_fo
$LN95@sqgauss_fo:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
$LN94@sqgauss_fo:
	test	eax, 268435456				; 10000000H
	je	SHORT $LN68@sqgauss_fo
	test	esi, esi
	je	SHORT $LN99@sqgauss_fo
	mov	eax, DWORD PTR [edx]
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN69@sqgauss_fo
$LN99@sqgauss_fo:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN69@sqgauss_fo
$LN68@sqgauss_fo:
	or	eax, -1
$LN69@sqgauss_fo:
	imul	eax, 176				; 000000b0H
	add	eax, ecx

; 392  :       struct gedge *ge = gedges + loc_ordinal(e_id);

	test	ebx, ebx
	je	SHORT $LN70@sqgauss_fo
	mov	ecx, DWORD PTR tv1876[ebp]
	jmp	SHORT $LN71@sqgauss_fo
$LN70@sqgauss_fo:
	or	ecx, -1
$LN71@sqgauss_fo:
	lea	ebx, DWORD PTR [ecx+ecx*8]
	shl	ebx, 5
	add	ebx, DWORD PTR _gedges$[ebp]

; 393  : 
; 394  :       /* head energy as function of tail */
; 395  :       if ( !(get_vattr(get_edge_headv(e_id)) & (FIXED|BOUNDARY) ) )

	test	esi, esi
	je	SHORT $LN103@sqgauss_fo
	mov	ecx, DWORD PTR [edx]
	jmp	SHORT $LN102@sqgauss_fo
$LN103@sqgauss_fo:
	mov	ecx, DWORD PTR _web+636
	mov	ecx, DWORD PTR [edx+ecx*4]
$LN102@sqgauss_fo:
	mov	esi, DWORD PTR _web+12
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	ecx, DWORD PTR [ecx+8]
	and	ecx, 192				; 000000c0H
	xor	esi, esi
	or	ecx, esi
	jne	$LN5@sqgauss_fo

; 396  :         { f = get_force(get_edge_tailv(e_id));

	cmp	DWORD PTR tv1887[ebp], esi
	je	SHORT $LN107@sqgauss_fo
	mov	ecx, DWORD PTR _web+636
	mov	ecx, DWORD PTR [edx+ecx*4]
	jmp	SHORT $LN106@sqgauss_fo
$LN107@sqgauss_fo:
	mov	ecx, DWORD PTR [edx]
$LN106@sqgauss_fo:
	mov	edx, DWORD PTR _web+12
	and	ecx, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _web+104
	mov	edx, DWORD PTR _dymem
	add	esi, DWORD PTR [ecx+edx+784]

; 397  :           for ( j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	cmp	DWORD PTR _web+616, ecx
	jle	SHORT $LN5@sqgauss_fo

; 396  :         { f = get_force(get_edge_tailv(e_id));

	lea	edx, DWORD PTR [ebx+96]
$LN151@sqgauss_fo:

; 398  :              f[j] -= (2*gv2->gc*gv2->star_area*(-ge->angle_grad[0][j]/gv2->area
; 399  :                         - gv2->gc*ge->area_grad[0][j]/gv2->area)
; 400  :                         + gv2->gc*gv2->gc*ge->star_area_grad[0][j])*modulus;

	fld	QWORD PTR [eax+168]
	inc	ecx
	fld	QWORD PTR [edx+96]
	add	edx, 8
	fdiv	QWORD PTR [eax+56]
	fchs
	fld	QWORD PTR [edx-104]
	fmul	QWORD PTR [eax+168]
	fdiv	QWORD PTR [eax+56]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+168]
	fmul	ST(0), ST(4)
	fmul	QWORD PTR [eax+112]
	fmulp	ST(1), ST(0)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR [edx-8]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [esi+ecx*8-8]
	fstp	QWORD PTR [esi+ecx*8-8]
	cmp	ecx, DWORD PTR _web+616
	jl	SHORT $LN151@sqgauss_fo
$LN5@sqgauss_fo:

; 401  :         }
; 402  :       /* tail energy as function of head */
; 403  :       if ( !(get_vattr(get_edge_tailv(e_id)) & (FIXED|BOUNDARY) ) )

	cmp	DWORD PTR tv1887[ebp], 0
	mov	eax, DWORD PTR _web+124
	mov	ecx, DWORD PTR tv1876[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR _web+216
	mov	eax, DWORD PTR [eax+ecx+304]
	lea	ecx, DWORD PTR [edx+eax]
	je	SHORT $LN111@sqgauss_fo
	mov	edx, DWORD PTR _web+636
	mov	eax, DWORD PTR [ecx+edx*4]
	jmp	SHORT $LN110@sqgauss_fo
$LN111@sqgauss_fo:
	mov	eax, DWORD PTR [ecx]
$LN110@sqgauss_fo:
	mov	edx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 192				; 000000c0H
	xor	edx, edx
	or	eax, edx
	jne	$LN12@sqgauss_fo

; 404  :         { f = get_force(get_edge_headv(e_id));

	cmp	DWORD PTR tv1887[ebp], edx
	je	SHORT $LN115@sqgauss_fo
	mov	eax, DWORD PTR [ecx]
	jmp	SHORT $LN114@sqgauss_fo
$LN115@sqgauss_fo:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [ecx+eax*4]
$LN114@sqgauss_fo:
	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+104
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+784]

; 405  :           for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN12@sqgauss_fo

; 404  :         { f = get_force(get_edge_headv(e_id));

	lea	ecx, DWORD PTR [ebx+48]
$LN3@sqgauss_fo:

; 406  :              f[j] -= (2*gv1->gc*gv1->star_area*(-ge->angle_grad[1][j]/gv1->area
; 407  :                         - gv1->gc*ge->area_grad[1][j]/gv1->area)
; 408  :                         + gv1->gc*gv1->gc*ge->star_area_grad[1][j])*modulus;

	fld	QWORD PTR [edi+168]
	inc	eax
	fld	QWORD PTR [ecx+192]
	add	ecx, 8
	fdiv	QWORD PTR [edi+56]
	fchs
	fld	QWORD PTR [ecx-8]
	fmul	QWORD PTR [edi+168]
	fdiv	QWORD PTR [edi+56]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edi+168]
	fmul	ST(0), ST(4)
	fmul	QWORD PTR [edi+112]
	fmulp	ST(1), ST(0)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR [ecx+88]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [edx+eax*8-8]
	fstp	QWORD PTR [edx+eax*8-8]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN3@sqgauss_fo
$LN12@sqgauss_fo:

; 386  :     }
; 387  :   
; 388  :   /* now cross terms from edges */
; 389  :   FOR_ALL_EDGES(e_id)

	mov	edx, DWORD PTR _web+124
	mov	eax, DWORD PTR tv1876[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR [ecx]
	mov	ebx, ecx
	shr	ebx, 28					; 0000001cH
	and	ebx, 1
	jne	$LN154@sqgauss_fo
$LN254@sqgauss_fo:

; 409  :         }
; 410  :     }
; 411  : 
; 412  :   temp_free((char*)gverts);

	mov	edx, DWORD PTR _gverts$[ebp]
	fstp	ST(0)
	push	edx
	fstp	ST(0)
	call	_temp_free

; 413  :   temp_free((char*)gedges);

	mov	eax, DWORD PTR _gedges$[ebp]
	push	eax
	call	_temp_free

; 414  : 
; 415  : } // end sqgauss_force()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 8
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_sqgauss_force ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DC@GBHIHFFO@Method?5sq_gauss_curvature?5only?5f@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_sqgauss_method_init
_BSS	SEGMENT
_gedges	DD	01H DUP (?)
_gv	DD	01H DUP (?)
_gverts	DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0DC@GBHIHFFO@Method?5sq_gauss_curvature?5only?5f@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0DC@GBHIHFFO@Method?5sq_gauss_curvature?5only?5f@ DB 'Method sq_gau'
	DB	'ss_curvature only for LINEAR model.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\gauss.c
CONST	ENDS
;	COMDAT _sqgauss_method_init
_TEXT	SEGMENT
_area$ = -312						; size = 8
tv3180 = -304						; size = 8
tv1278 = -296						; size = 8
tv1146 = -288						; size = 8
tv1979 = -280						; size = 4
tv3182 = -276						; size = 8
_j2$89477 = -268					; size = 4
_ge1$89474 = -264					; size = 4
_jj1$89476 = -260					; size = 4
_i1$89472 = -256					; size = 4
tv1031 = -252						; size = 4
tv2868 = -248						; size = 4
tv2872 = -244						; size = 4
_i$ = -244						; size = 4
tv3036 = -240						; size = 4
tv2989 = -240						; size = 4
tv2915 = -240						; size = 4
tv1977 = -236						; size = 4
tv1863 = -236						; size = 4
tv1865 = -232						; size = 4
_j$ = -232						; size = 4
tv2870 = -228						; size = 4
tv1722 = -228						; size = 4
tv1523 = -228						; size = 4
tv2984 = -224						; size = 4
_fixcount$ = -224					; size = 4
_side$ = -220						; size = 144
_e$ = -76						; size = 12
_v$ = -64						; size = 12
_st$ = -52						; size = 24
_ss$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_sqgauss_method_init PROC				; COMDAT

; 450  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 451  :   vertex_id v[3];
; 452  :   edge_id e_id,e[3];
; 453  :   facet_id f_id;
; 454  :   facetedge_id fe;
; 455  :   int fixcount;
; 456  :   REAL side[3][MAXCOORD];
; 457  :   REAL ss[3];
; 458  :   REAL st[3];
; 459  :   int j,i;
; 460  :   REAL area,angle,c,c1,c2;
; 461  : 
; 462  :   if ( web.modeltype != LINEAR )

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN46@sqgauss_me

; 463  :     kb_error(2866,"Method sq_gauss_curvature only for LINEAR model.\n",
; 464  :        RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DC@GBHIHFFO@Method?5sq_gauss_curvature?5only?5f@
	push	2866					; 00000b32H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN46@sqgauss_me:

; 465  : 
; 466  :   gverts = (struct gvert*)temp_calloc(web.skel[VERTEX].max_ord+1,
; 467  :                                         sizeof(struct gvert));

	mov	eax, DWORD PTR _web+68
	push	ebx
	push	esi
	push	edi
	push	467					; 000001d3H
	push	OFFSET ??_C@_07EIDGGOJA@GAUSS?4C?$AA@
	inc	eax
	push	176					; 000000b0H
	push	eax
	call	_kb_temp_calloc
	mov	DWORD PTR _gverts, eax

; 468  : 
; 469  :   /* accumulate angles around vertices */
; 470  :   if ( mode == METHOD_VALUE )

	mov	eax, DWORD PTR _mode$[ebp]
	add	esp, 16					; 00000010H
	cmp	eax, 1767				; 000006e7H
	jne	$LN45@sqgauss_me

; 471  :   FOR_ALL_FACETS(f_id)

	mov	ecx, DWORD PTR _web+272
	mov	edx, ecx
	shr	edx, 28					; 0000001cH
	and	edx, 1
	je	$LN25@sqgauss_me
	mov	ebx, DWORD PTR _web+236
	npad	2
$LL112@sqgauss_me:
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	esi, DWORD PTR [ebx+eax]
	mov	DWORD PTR tv1031[ebp], eax
	mov	eax, DWORD PTR [esi+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	je	$LN43@sqgauss_me

; 472  :     { fe = get_facet_fe(f_id);

	xor	eax, eax
	cmp	edx, eax
	jne	SHORT $LN58@sqgauss_me
	xor	ebx, ebx
	jmp	SHORT $LN59@sqgauss_me
$LN58@sqgauss_me:
	mov	esi, DWORD PTR [esi+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN57@sqgauss_me
	xor	esi, 134217728				; 08000000H
$LN57@sqgauss_me:
	mov	ebx, esi
$LN59@sqgauss_me:

; 473  :       fixcount = 0;

	lea	ecx, DWORD PTR _side$[ebp]
	mov	DWORD PTR _fixcount$[ebp], eax

; 474  :       for ( i = 0; i < FACET_VERTS ; i++,fe=get_next_edge(fe) )

	mov	DWORD PTR _i$[ebp], eax
	mov	eax, DWORD PTR _web+460
	mov	DWORD PTR tv1523[ebp], ecx
	npad	2
$LL61@sqgauss_me:

; 475  :         { e_id = get_fe_edge(fe);

	mov	edi, ebx
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	edx, DWORD PTR [edi+eax]

; 476  :           get_edge_side(e_id,side[i]);

	mov	eax, DWORD PTR tv1523[ebp]
	mov	esi, ebx
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [edx+20]
	push	eax
	push	esi
	call	_get_edge_side

; 477  :           v[i] = get_edge_tailv(e_id);

	mov	ecx, DWORD PTR _web+124
	mov	eax, DWORD PTR _web+216
	add	esp, 8
	test	esi, 134217728				; 08000000H
	je	SHORT $LN68@sqgauss_me
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN67@sqgauss_me
$LN68@sqgauss_me:
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]
$LN67@sqgauss_me:
	mov	edx, DWORD PTR _i$[ebp]

; 478  :           if ( get_vattr(v[i]) & (FIXED|BOUNDARY) ) fixcount++;

	mov	ecx, DWORD PTR _web+12
	mov	DWORD PTR _v$[ebp+edx*4], eax
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 192				; 000000c0H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN38@sqgauss_me
	inc	DWORD PTR _fixcount$[ebp]
$LN38@sqgauss_me:

; 474  :       for ( i = 0; i < FACET_VERTS ; i++,fe=get_next_edge(fe) )

	add	DWORD PTR tv1523[ebp], 48		; 00000030H
	mov	eax, DWORD PTR _web+460
	mov	ecx, DWORD PTR [edi+eax]
	inc	edx
	mov	DWORD PTR _i$[ebp], edx
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN62@sqgauss_me
	mov	ebx, DWORD PTR [ecx+28]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN97@sqgauss_me
$LN62@sqgauss_me:
	mov	ebx, DWORD PTR [ecx+32]
$LN97@sqgauss_me:
	cmp	edx, 3
	jl	$LL61@sqgauss_me

; 479  :         }
; 480  :         for ( i = 0 ; i < FACET_VERTS ; i++ )

	xor	esi, esi
	lea	edi, DWORD PTR _side$[ebp]
	npad	1
$LL35@sqgauss_me:

; 481  :          { ss[i] = SDIM_dot(side[i],side[i]);

	mov	edx, DWORD PTR _web+616
	push	edx
	push	edi
	push	edi
	call	_dot
	fstp	QWORD PTR _ss$[ebp+esi*8]

; 482  :            st[i] = SDIM_dot(side[i],side[(i+2)%3]);

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	eax, DWORD PTR [esi+2]
	cdq
	mov	ecx, 3
	idiv	ecx
	lea	edx, DWORD PTR [edx+edx*2]
	add	edx, edx
	lea	eax, DWORD PTR _side$[ebp+edx*8]
	push	eax
	push	edi
	call	_dot
	fstp	QWORD PTR _st$[ebp+esi*8]
	inc	esi
	add	esp, 24					; 00000018H
	add	edi, 48					; 00000030H
	cmp	esi, 3
	jl	SHORT $LL35@sqgauss_me

; 483  :          }
; 484  :         area = 0.5*sqrt(ss[0]*ss[1]-st[1]*st[1]);

	fld	QWORD PTR _ss$[ebp+8]
	fmul	QWORD PTR _ss$[ebp]
	fld	QWORD PTR _st$[ebp+8]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000

; 485  :         for ( i = 0 ; i < FACET_VERTS ; i++ )

	fld	QWORD PTR __real@4008000000000000
	mov	ecx, 3
	xor	esi, esi
	fdivr	ST(0), ST(1)
	sub	ecx, DWORD PTR _fixcount$[ebp]
	mov	edi, DWORD PTR _gverts
	mov	DWORD PTR tv2989[ebp], ecx
	fstp	QWORD PTR tv1146[ebp]
	fild	DWORD PTR tv2989[ebp]
	fdivp	ST(1), ST(0)
	fstp	QWORD PTR tv3182[ebp]
$LL32@sqgauss_me:

; 486  :         { c = -st[i]/sqrt(ss[i]*ss[(i+2)%3]);

	lea	eax, DWORD PTR [esi+2]
	cdq
	mov	ecx, 3
	idiv	ecx
	fld	QWORD PTR _ss$[ebp+edx*8]
	fmul	QWORD PTR _ss$[ebp+esi*8]
	call	__CIsqrt
	fdivr	QWORD PTR _st$[ebp+esi*8]
	fchs

; 487  :           angle = acos(c);

	call	__CIacos

; 488  :           gv = gverts + loc_ordinal(v[i]);

	mov	eax, DWORD PTR _v$[ebp+esi*4]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN49@sqgauss_me
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN50@sqgauss_me
$LN49@sqgauss_me:
	or	eax, -1
$LN50@sqgauss_me:
	imul	eax, 176				; 000000b0H

; 489  :           gv->angle += angle;

	fadd	QWORD PTR [eax+edi]
	fstp	QWORD PTR [eax+edi]

; 490  :           gv->area  += area/3;

	fld	QWORD PTR [eax+edi+56]
	fadd	QWORD PTR tv1146[ebp]
	add	eax, edi
	inc	esi
	mov	DWORD PTR _gv, eax
	fstp	QWORD PTR [eax+56]

; 491  :           gv->star_area  += area/(3-fixcount);

	fld	QWORD PTR [eax+112]
	fadd	QWORD PTR tv3182[ebp]
	fstp	QWORD PTR [eax+112]
	cmp	esi, 3
	jl	SHORT $LL32@sqgauss_me

; 485  :         for ( i = 0 ; i < FACET_VERTS ; i++ )

	mov	ebx, DWORD PTR _web+236
$LN43@sqgauss_me:

; 471  :   FOR_ALL_FACETS(f_id)

	mov	edx, DWORD PTR tv1031[ebp]
	mov	eax, DWORD PTR [ebx+edx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, ecx
	shr	edx, 28					; 0000001cH
	and	edx, 1
	jne	$LL112@sqgauss_me
	pop	edi
	pop	esi
	pop	ebx

; 553  :             }
; 554  :         }
; 555  :     }
; 556  :   } 
; 557  : } // end sqgauss_method_init()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN45@sqgauss_me:

; 492  :         }
; 493  :     }
; 494  :   else if ( mode == METHOD_GRADIENT )

	cmp	eax, 4321				; 000010e1H
	jne	$LN25@sqgauss_me

; 495  :   {
; 496  :     gedges = (struct gedge*)temp_calloc(web.skel[EDGE].max_ord+1,
; 497  :                                             sizeof(struct gedge));

	mov	ecx, DWORD PTR _web+180
	push	497					; 000001f1H
	push	OFFSET ??_C@_07EIDGGOJA@GAUSS?4C?$AA@
	inc	ecx
	push	288					; 00000120H
	push	ecx
	call	_kb_temp_calloc

; 498  : 
; 499  :     /* accumulate angles around vertices */
; 500  :     FOR_ALL_FACETS(f_id)

	mov	edx, DWORD PTR _web+272
	mov	ecx, edx
	shr	ecx, 28					; 0000001cH
	add	esp, 16					; 00000010H
	and	ecx, 1
	mov	DWORD PTR _gedges, eax
	je	$LN25@sqgauss_me
	mov	ebx, DWORD PTR _web+236
$LL109@sqgauss_me:
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	esi, DWORD PTR [ebx+eax]
	mov	DWORD PTR tv1031[ebp], eax
	mov	eax, DWORD PTR [esi+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	je	$LN26@sqgauss_me

; 501  :     { fe = get_facet_fe(f_id);

	xor	ebx, ebx
	cmp	ecx, ebx
	je	SHORT $LN73@sqgauss_me
$LN72@sqgauss_me:
	mov	esi, DWORD PTR [esi+28]
	test	edx, 134217728				; 08000000H
	je	SHORT $LN71@sqgauss_me
	xor	esi, 134217728				; 08000000H
$LN71@sqgauss_me:
	mov	edi, esi
$LN73@sqgauss_me:

; 502  :       fixcount = 0;
; 503  :       for ( i = 0; i < FACET_VERTS ; i++,fe=get_next_edge(fe) )

	mov	eax, DWORD PTR _web+460
	lea	edx, DWORD PTR _side$[ebp]
	mov	DWORD PTR _fixcount$[ebp], ebx
	mov	DWORD PTR tv1722[ebp], edx
	npad	6
$LL75@sqgauss_me:

; 504  :         { e[i] = get_fe_edge(fe);
; 505  :           get_edge_side(e[i],side[i]);

	mov	edx, DWORD PTR tv1722[ebp]
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [eax+20]
	mov	ecx, edi
	and	ecx, 134217728				; 08000000H
	xor	eax, ecx
	push	edx
	push	eax
	mov	DWORD PTR _e$[ebp+ebx], eax
	call	_get_edge_side

; 506  :           v[i] = get_edge_tailv(e[i]);

	mov	eax, DWORD PTR _e$[ebp+ebx]
	mov	ecx, DWORD PTR _web+124
	add	esp, 8
	test	eax, 134217728				; 08000000H
	je	SHORT $LN82@sqgauss_me
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN81@sqgauss_me
$LN82@sqgauss_me:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]
$LN81@sqgauss_me:

; 507  :           if ( get_vattr(v[i]) & (FIXED|BOUNDARY) ) fixcount++;

	mov	ecx, DWORD PTR _web+12
	mov	DWORD PTR _v$[ebp+ebx], eax
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 192				; 000000c0H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN21@sqgauss_me
	inc	DWORD PTR _fixcount$[ebp]
$LN21@sqgauss_me:

; 502  :       fixcount = 0;
; 503  :       for ( i = 0; i < FACET_VERTS ; i++,fe=get_next_edge(fe) )

	add	DWORD PTR tv1722[ebp], 48		; 00000030H
	mov	eax, DWORD PTR _web+460
	add	ebx, 4
	test	edi, 134217728				; 08000000H
	je	SHORT $LN76@sqgauss_me
	mov	edx, DWORD PTR [esi+eax]
	mov	edi, DWORD PTR [edx+28]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN101@sqgauss_me
$LN76@sqgauss_me:
	mov	ecx, DWORD PTR [esi+eax]
	mov	edi, DWORD PTR [ecx+32]
$LN101@sqgauss_me:
	cmp	ebx, 12					; 0000000cH
	jl	$LL75@sqgauss_me

; 508  :         }
; 509  :         for ( i = 0 ; i < FACET_VERTS ; i++ )

	xor	esi, esi
	lea	edi, DWORD PTR _side$[ebp]
$LL18@sqgauss_me:

; 510  :          { ss[i] = SDIM_dot(side[i],side[i]);

	mov	edx, DWORD PTR _web+616
	push	edx
	push	edi
	push	edi
	call	_dot
	fstp	QWORD PTR _ss$[ebp+esi*8]

; 511  :             st[i] = SDIM_dot(side[i],side[(i+2)%3]);

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	eax, DWORD PTR [esi+2]
	cdq
	mov	ecx, 3
	idiv	ecx
	lea	edx, DWORD PTR [edx+edx*2]
	add	edx, edx
	lea	eax, DWORD PTR _side$[ebp+edx*8]
	push	eax
	push	edi
	call	_dot
	fstp	QWORD PTR _st$[ebp+esi*8]
	inc	esi
	add	esp, 24					; 00000018H
	add	edi, 48					; 00000030H
	cmp	esi, 3
	jl	SHORT $LL18@sqgauss_me

; 512  :          }
; 513  :         area = 0.5*sqrt(ss[0]*ss[1]-st[1]*st[1]);

	fld	QWORD PTR _ss$[ebp+8]
	fmul	QWORD PTR _ss$[ebp]
	fld	QWORD PTR _st$[ebp+8]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	call	__CIsqrt
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	mov	ecx, 3
	fxch	ST(1)
	sub	ecx, DWORD PTR _fixcount$[ebp]

; 514  :         for ( i = 0 ; i < FACET_VERTS ; i++ )

	xor	eax, eax
	fst	QWORD PTR _area$[ebp]
	mov	DWORD PTR tv2915[ebp], ecx
	fdiv	ST(1), ST(0)
	lea	edx, DWORD PTR _side$[ebp]
	mov	DWORD PTR tv2872[ebp], 2
	mov	DWORD PTR tv2984[ebp], edx
	mov	DWORD PTR tv2870[ebp], eax
	mov	DWORD PTR tv2868[ebp], eax
	fxch	ST(1)
	fstp	QWORD PTR tv1278[ebp]
	fld	QWORD PTR __real@4008000000000000
	fdivr	ST(0), ST(1)
	fstp	QWORD PTR tv1146[ebp]
	fild	DWORD PTR tv2915[ebp]
	mov	DWORD PTR tv3036[ebp], 3
	fst	QWORD PTR tv3180[ebp]
	fdivp	ST(1), ST(0)
	fstp	QWORD PTR tv3182[ebp]
	npad	9
$LL15@sqgauss_me:

; 515  :         { int i1 = (i+1)%3;

	mov	ecx, DWORD PTR tv2872[ebp]
	lea	eax, DWORD PTR [ecx-1]
	cdq
	mov	esi, 3
	idiv	esi

; 516  :           int i2 = (i+2)%3;

	mov	eax, ecx
	mov	ecx, esi
	mov	DWORD PTR _i1$89472[ebp], edx
	cdq
	idiv	ecx
	mov	edi, edx

; 517  :           struct gedge *ge1,*ge2;
; 518  :           int jj1,j2;
; 519  : 
; 520  :           gv = gverts + loc_ordinal(v[i]);

	mov	edx, DWORD PTR tv2870[ebp]
	mov	ebx, DWORD PTR _v$[ebp+edx]
	test	ebx, 268435456				; 10000000H
	je	SHORT $LN51@sqgauss_me
	and	ebx, 134217727				; 07ffffffH
	jmp	SHORT $LN52@sqgauss_me
$LN51@sqgauss_me:
	or	ebx, -1
$LN52@sqgauss_me:

; 521  :           ge1 = gedges + loc_ordinal(e[i]);

	mov	eax, DWORD PTR tv2870[ebp]
	imul	ebx, 176				; 000000b0H
	add	ebx, DWORD PTR _gverts
	mov	ecx, DWORD PTR _e$[ebp+eax]
	mov	DWORD PTR _gv, ebx
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN53@sqgauss_me
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN54@sqgauss_me
$LN53@sqgauss_me:
	or	eax, -1
$LN54@sqgauss_me:
	lea	eax, DWORD PTR [eax+eax*8]
	shl	eax, 5
	add	eax, DWORD PTR _gedges
	mov	DWORD PTR _ge1$89474[ebp], eax

; 522  :           ge2 = gedges + loc_ordinal(e[i2]);

	mov	eax, DWORD PTR _e$[ebp+edi*4]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN55@sqgauss_me
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	jmp	SHORT $LN56@sqgauss_me
$LN55@sqgauss_me:
	or	edx, -1
$LN56@sqgauss_me:

; 523  :           jj1 =  inverted(e[i]) ? 1 : 0;

	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR _jj1$89476[ebp], ecx

; 524  :           j2 =  inverted(e[i2]) ? 0 : 1;
; 525  : 
; 526  :           c = -st[i]/sqrt(ss[i]*ss[i2]);

	mov	ecx, DWORD PTR tv2868[ebp]
	fld	QWORD PTR _ss$[ebp+ecx]
	shr	eax, 27					; 0000001bH
	fmul	QWORD PTR _ss$[ebp+edi*8]
	lea	esi, DWORD PTR [edx+edx*8]
	not	eax
	and	eax, 1
	shl	esi, 5
	add	esi, DWORD PTR _gedges
	mov	DWORD PTR _j2$89477[ebp], eax
	call	__CIsqrt
	mov	edx, DWORD PTR tv2868[ebp]
	fdivr	QWORD PTR _st$[ebp+edx]
	fchs

; 527  :           angle = acos(c);

	call	__CIacos

; 528  :           gv->angle += angle;

	fadd	QWORD PTR [ebx]

; 529  :           c1 = (1+st[i]/ss[i])/area/2;

	mov	eax, DWORD PTR tv2868[ebp]

; 530  :           c2 = (1+st[i]/ss[i2])/area/2;
; 531  :           for ( j = 0 ; j < SDIM ; j++ )

	xor	edx, edx
	fstp	QWORD PTR [ebx]
	mov	ecx, DWORD PTR _web+616
	fld	QWORD PTR _st$[ebp+eax]
	fdiv	QWORD PTR _ss$[ebp+eax]
	fld	ST(0)
	fld1
	fadd	ST(1), ST(0)
	fld	QWORD PTR _area$[ebp]
	fdiv	ST(2), ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(3), ST(0)
	fld	QWORD PTR _st$[ebp+eax]
	fdiv	QWORD PTR _ss$[ebp+edi*8]
	fld	ST(0)
	faddp	ST(4), ST(0)
	fxch	ST(3)
	fdiv	ST(0), ST(2)
	fmul	ST(0), ST(1)
	test	ecx, ecx
	jle	SHORT $LN122@sqgauss_me

; 522  :           ge2 = gedges + loc_ordinal(e[i2]);

	lea	ecx, DWORD PTR [edi+edi*2]
	add	ecx, ecx
	lea	ecx, DWORD PTR _side$[ebp+ecx*8]
	mov	DWORD PTR tv1863[ebp], ecx
	mov	ecx, DWORD PTR tv2984[ebp]
	lea	eax, DWORD PTR [ebx+8]
	mov	DWORD PTR tv1865[ebp], ecx
$LN12@sqgauss_me:

; 532  :              gv->angle_grad[j] += c1*side[i][j] - c2*side[i2][j];

	mov	ecx, DWORD PTR tv1865[ebp]
	fld	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv1863[ebp]
	add	DWORD PTR tv1865[ebp], 8
	fmul	ST(0), ST(5)
	fld	QWORD PTR [ecx]
	add	DWORD PTR tv1863[ebp], 8
	fmul	ST(0), ST(2)
	inc	edx
	add	eax, 8
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	mov	ecx, DWORD PTR _web+616
	cmp	edx, ecx
	jl	SHORT $LN12@sqgauss_me
$LN122@sqgauss_me:

; 530  :           c2 = (1+st[i]/ss[i2])/area/2;
; 531  :           for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(0)

; 534  :           c2 = 1/area/2;
; 535  :           for ( j = 0 ; j < SDIM ; j++ )

	mov	DWORD PTR _j$[ebp], 0
	fstp	ST(3)
	fdiv	ST(3), ST(0)
	fxch	ST(3)
	fmul	ST(0), ST(2)
	fld	QWORD PTR tv1278[ebp]
	fld	ST(0)
	test	ecx, ecx
	jle	SHORT $LN127@sqgauss_me

; 533  :           c1 = st[i]/ss[i]/area/2;

	mov	eax, DWORD PTR _jj1$89476[ebp]
	lea	eax, DWORD PTR [eax+eax*2+12]
	shl	eax, 4
	add	eax, DWORD PTR _ge1$89474[ebp]
	lea	edx, DWORD PTR [edi+edi*2]
	add	edx, edx
	lea	ecx, DWORD PTR _side$[ebp+edx*8]
	mov	DWORD PTR tv1977[ebp], ecx
	mov	ecx, DWORD PTR tv2984[ebp]
	jmp	SHORT $LN9@sqgauss_me
$LN110@sqgauss_me:
	mov	ecx, DWORD PTR tv1979[ebp]
$LN9@sqgauss_me:

; 536  :              ge1->angle_grad[jj1][j] -= c1*side[i][j] - c2*side[i2][j];

	fld	QWORD PTR [ecx]
	mov	edx, DWORD PTR tv1977[ebp]
	add	DWORD PTR tv1977[ebp], 8
	fmul	ST(0), ST(3)
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR _j$[ebp]
	fmul	ST(0), ST(2)
	add	ecx, 8
	inc	edx
	mov	DWORD PTR tv1979[ebp], ecx
	fsubp	ST(1), ST(0)
	add	eax, 8
	mov	DWORD PTR _j$[ebp], edx
	fsubr	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	mov	ecx, DWORD PTR _web+616
	cmp	edx, ecx
	jl	SHORT $LN110@sqgauss_me
$LN127@sqgauss_me:

; 534  :           c2 = 1/area/2;
; 535  :           for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(2)

; 538  :           c2 = st[i]/ss[i2]/area/2;
; 539  :           for ( j = 0 ; j < SDIM ; j++ )

	xor	edx, edx
	fstp	ST(1)
	fxch	ST(1)
	fdiv	ST(0), ST(3)
	fmulp	ST(2), ST(0)
	test	ecx, ecx
	jle	SHORT $LN133@sqgauss_me

; 537  :           c1 = 1/area/2;

	mov	eax, DWORD PTR _j2$89477[ebp]
	mov	ecx, DWORD PTR tv2984[ebp]
	lea	eax, DWORD PTR [eax+eax*2+12]
	shl	eax, 4
	lea	edi, DWORD PTR [edi+edi*2]
	add	eax, esi
	add	edi, edi
	lea	edi, DWORD PTR _side$[ebp+edi*8]
$LN6@sqgauss_me:

; 540  :              ge2->angle_grad[j2][j] -= c1*side[i][j] - c2*side[i2][j];

	fld	ST(0)
	inc	edx
	fmul	QWORD PTR [ecx]
	add	ecx, 8
	fld	QWORD PTR [edi]
	add	edi, 8
	fmul	ST(0), ST(3)
	add	eax, 8
	fsubp	ST(1), ST(0)
	fsubr	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	cmp	edx, DWORD PTR _web+616
	jl	SHORT $LN6@sqgauss_me
$LN133@sqgauss_me:

; 542  :           gv->star_area  += area/(3-fixcount);
; 543  :           c1 = ss[i1]/area/4;

	mov	eax, DWORD PTR _i1$89472[ebp]
	fstp	ST(1)
	fstp	ST(0)

; 544  :           c2 = st[i1]/area/4;
; 545  :           for ( j = 0 ; j < SDIM ; j++ )

	mov	DWORD PTR _j$[ebp], 0
	fld	QWORD PTR [ebx+56]
	fadd	QWORD PTR tv1146[ebp]
	fstp	QWORD PTR [ebx+56]
	fld	QWORD PTR [ebx+112]
	fadd	QWORD PTR tv3182[ebp]
	fstp	QWORD PTR [ebx+112]
	cmp	DWORD PTR _web+616, 0
	fld	QWORD PTR _ss$[ebp+eax*8]
	fdiv	ST(0), ST(1)
	fld	QWORD PTR __real@3fd0000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR _st$[ebp+eax*8]
	fdivrp	ST(3), ST(0)
	fmulp	ST(2), ST(0)
	jle	$LN135@sqgauss_me

; 541  :           gv->area  += area/3;

	mov	ecx, DWORD PTR _j2$89477[ebp]
	fld	QWORD PTR tv3180[ebp]
	mov	eax, DWORD PTR _jj1$89476[ebp]
	fld	QWORD PTR __real@4008000000000000
	mov	edi, DWORD PTR tv2984[ebp]
	lea	ecx, DWORD PTR [ecx+ecx*2+6]
	shl	ecx, 4
	add	ecx, esi
	mov	esi, DWORD PTR _i1$89472[ebp]
	lea	eax, DWORD PTR [eax+eax*2+6]
	shl	eax, 4
	add	eax, DWORD PTR _ge1$89474[ebp]
	lea	esi, DWORD PTR [esi+esi*2]
	add	esi, esi
	lea	edx, DWORD PTR [ebx+120]
	mov	ebx, DWORD PTR _j$[ebp]
	lea	esi, DWORD PTR _side$[ebp+esi*8]
$LN3@sqgauss_me:

; 546  :             { c = c2*side[i1][j] - c1*side[i][j];

	fld	ST(3)
	inc	ebx
	fmul	QWORD PTR [esi]
	add	esi, 8
	fld	QWORD PTR [edi]
	add	edi, 8
	fmul	ST(0), ST(4)
	add	edx, 8
	add	eax, 8
	add	ecx, 8
	fsubp	ST(1), ST(0)

; 547  :               gv->area_grad[j] += c/3;

	fld	ST(0)
	fdiv	ST(0), ST(2)
	fld	QWORD PTR [edx-64]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx-64]

; 548  :               gv->star_area_grad[j] += c/(3-fixcount);

	fxch	ST(1)
	fdiv	ST(0), ST(3)
	fld	QWORD PTR [edx-8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx-8]

; 549  :               ge1->area_grad[jj1][j] += c/3;

	fld	ST(1)
	fadd	QWORD PTR [eax-104]
	fstp	QWORD PTR [eax-104]

; 550  :               ge2->area_grad[j2][j] += c/3;

	fxch	ST(1)
	fadd	QWORD PTR [ecx-104]
	fstp	QWORD PTR [ecx-104]

; 551  :               ge1->star_area_grad[jj1][j] += c/(3-fixcount);

	fld	ST(0)
	fadd	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]

; 552  :               ge2->star_area_grad[j2][j] += c/(3-fixcount);

	fadd	QWORD PTR [ecx-8]
	fstp	QWORD PTR [ecx-8]
	cmp	ebx, DWORD PTR _web+616
	jl	SHORT $LN3@sqgauss_me

; 544  :           c2 = st[i1]/area/4;
; 545  :           for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(2)
	fstp	ST(2)
	fstp	ST(1)
$LN139@sqgauss_me:
	add	DWORD PTR tv2870[ebp], 4
	fstp	ST(0)
	add	DWORD PTR tv2868[ebp], 8
	add	DWORD PTR tv2984[ebp], 48		; 00000030H
	mov	eax, 1
	add	DWORD PTR tv2872[ebp], eax
	sub	DWORD PTR tv3036[ebp], eax
	jne	$LL15@sqgauss_me

; 514  :         for ( i = 0 ; i < FACET_VERTS ; i++ )

	mov	ebx, DWORD PTR _web+236
$LN26@sqgauss_me:

; 498  : 
; 499  :     /* accumulate angles around vertices */
; 500  :     FOR_ALL_FACETS(f_id)

	mov	eax, DWORD PTR tv1031[ebp]
	mov	ecx, DWORD PTR [ebx+eax]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, edx
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	jne	$LL109@sqgauss_me
$LN25@sqgauss_me:

; 553  :             }
; 554  :         }
; 555  :     }
; 556  :   } 
; 557  : } // end sqgauss_method_init()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN135@sqgauss_me:

; 544  :           c2 = st[i1]/area/4;
; 545  :           for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(0)
	jmp	SHORT $LN139@sqgauss_me
_sqgauss_method_init ENDP
_TEXT	ENDS
PUBLIC	_sqgauss_method_cleanup
; Function compile flags: /Ogtp
;	COMDAT _sqgauss_method_cleanup
_TEXT	SEGMENT
_sqgauss_method_cleanup PROC				; COMDAT

; 568  :   temp_free((char*)gverts);

	mov	eax, DWORD PTR _gverts
	push	eax
	call	_temp_free

; 569  :   temp_free((char*)gedges);

	mov	ecx, DWORD PTR _gedges
	push	ecx
	call	_temp_free
	add	esp, 8

; 570  : 
; 571  : } // end sqgauss_method_cleanup()

	ret	0
_sqgauss_method_cleanup ENDP
_TEXT	ENDS
PUBLIC	_sqgauss_method_value
EXTRN	_sqgauss_flag:DWORD
; Function compile flags: /Ogtp
;	COMDAT _sqgauss_method_value
_TEXT	SEGMENT
_modulus$ = -8						; size = 8
_v_info$ = 8						; size = 4
_sqgauss_method_value PROC				; COMDAT

; 582  : { 

	push	ebp
	mov	ebp, esp

; 583  :   REAL modulus = sqgauss_flag ? globals(sqgauss_param)->value.real : 0.0;

	fldz
	sub	esp, 8
	cmp	DWORD PTR _sqgauss_flag, 0
	je	SHORT $LN10@sqgauss_me@2
	mov	eax, DWORD PTR _sqgauss_param
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN4@sqgauss_me@2
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN6@sqgauss_me@2
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+64]
	fstp	QWORD PTR _modulus$[ebp]
	jmp	SHORT $LN11@sqgauss_me@2
$LN6@sqgauss_me@2:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN4@sqgauss_me@2
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [eax+64]
	fstp	QWORD PTR _modulus$[ebp]
	jmp	SHORT $LN11@sqgauss_me@2
$LN4@sqgauss_me@2:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
	fld	QWORD PTR [eax+64]
	fstp	QWORD PTR _modulus$[ebp]
	jmp	SHORT $LN11@sqgauss_me@2
$LN10@sqgauss_me@2:
	fst	QWORD PTR _modulus$[ebp]
$LN11@sqgauss_me@2:

; 584  :   REAL gc;  /* gaussian curvarture */
; 585  : 
; 586  :   /* calc square gauss curvature at each vertex */
; 587  :   struct gvert *vg = gverts + loc_ordinal(v_info->id);

	mov	ecx, DWORD PTR _v_info$[ebp]
	mov	ecx, DWORD PTR [ecx]
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN12@sqgauss_me@2
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN13@sqgauss_me@2
$LN12@sqgauss_me@2:
	or	eax, -1
$LN13@sqgauss_me@2:
	imul	eax, 176				; 000000b0H
	add	eax, DWORD PTR _gverts
	push	esi
	mov	esi, eax

; 588  :   if ( get_vattr(v_info->id) & (FIXED|BOUNDARY) ) return 0.0;

	mov	eax, DWORD PTR _web+12
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 192				; 000000c0H
	xor	edx, edx
	or	eax, edx
	jne	SHORT $LN2@sqgauss_me@2

; 589  :   gc = (wedge_angle(v_info->id) - vg->angle)/vg->area;

	push	ecx
	fstp	ST(0)
	call	_wedge_angle
	fsub	QWORD PTR [esi]
	add	esp, 4
	fdiv	QWORD PTR [esi+56]

; 590  :   return modulus*gc*gc*vg->star_area;

	fld	QWORD PTR _modulus$[ebp]
	fmul	ST(0), ST(1)
	fmulp	ST(1), ST(0)
	fmul	QWORD PTR [esi+112]
$LN2@sqgauss_me@2:
	pop	esi

; 591  : 
; 592  : } // end sqgauss_method_value()

	mov	esp, ebp
	pop	ebp
	ret	0
_sqgauss_method_value ENDP
_TEXT	ENDS
PUBLIC	_sqgauss_method_grad
; Function compile flags: /Ogtp
;	COMDAT _sqgauss_method_grad
_TEXT	SEGMENT
_modulus$ = -12						; size = 8
tv634 = -8						; size = 4
tv555 = -4						; size = 4
tv477 = -4						; size = 4
_v_info$ = 8						; size = 4
_sqgauss_method_grad PROC				; COMDAT

; 604  : { 

	push	ebp
	mov	ebp, esp

; 605  :   REAL modulus = sqgauss_flag ? globals(sqgauss_param)->value.real : 0.0;

	fldz
	sub	esp, 12					; 0000000cH
	cmp	DWORD PTR _sqgauss_flag, 0
	je	SHORT $LN20@sqgauss_me@3
	mov	eax, DWORD PTR _sqgauss_param
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN14@sqgauss_me@3
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN16@sqgauss_me@3
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+64]
	fstp	QWORD PTR _modulus$[ebp]
	jmp	SHORT $LN21@sqgauss_me@3
$LN16@sqgauss_me@3:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN14@sqgauss_me@3
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [eax+64]
	fstp	QWORD PTR _modulus$[ebp]
	jmp	SHORT $LN21@sqgauss_me@3
$LN14@sqgauss_me@3:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
	fld	QWORD PTR [eax+64]
	fstp	QWORD PTR _modulus$[ebp]
	jmp	SHORT $LN21@sqgauss_me@3
$LN20@sqgauss_me@3:
	fst	QWORD PTR _modulus$[ebp]
$LN21@sqgauss_me@3:

; 606  :   vertex_id v_id;
; 607  :   edge_id e_id,start_e;
; 608  :   int j;
; 609  :   REAL gc;  /* gaussian curvarture */
; 610  :   REAL energy = 0.0;
; 611  : 
; 612  :   /* calc square gauss curvature at each vertex */
; 613  :   v_id = v_info->id;

	mov	ecx, DWORD PTR _v_info$[ebp]
	mov	edx, DWORD PTR [ecx]

; 614  :   gv = gverts + loc_ordinal(v_id);

	test	edx, 268435456				; 10000000H
	je	SHORT $LN22@sqgauss_me@3
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN23@sqgauss_me@3
$LN22@sqgauss_me@3:
	or	eax, -1
$LN23@sqgauss_me@3:

; 615  :   if ( get_vattr(v_id) & (FIXED|BOUNDARY) ) return 0.0;

	mov	ecx, DWORD PTR _web+12
	imul	eax, 176				; 000000b0H
	add	eax, DWORD PTR _gverts
	push	ebx
	mov	ebx, edx
	and	ebx, 134217727				; 07ffffffH
	add	ebx, ebx
	add	ebx, ebx
	mov	ecx, DWORD PTR [ebx+ecx]
	mov	ecx, DWORD PTR [ecx+8]
	push	edi
	and	ecx, 192				; 000000c0H
	xor	edi, edi
	or	ecx, edi
	mov	DWORD PTR _gv, eax
	mov	DWORD PTR tv477[ebp], ebx
	jne	$LN12@sqgauss_me@3
	push	esi
	fstp	ST(0)

; 616  :   gc = (wedge_angle(v_id) - gv->angle)/gv->area;

	push	edx
	lea	esi, DWORD PTR [eax+56]
	call	_wedge_angle
	mov	edx, DWORD PTR _gv
	fsub	QWORD PTR [edx]
	add	esp, 4
	fdiv	QWORD PTR [esi]

; 617  :   energy += modulus*gc*gc*gv->star_area;

	fld	ST(0)
	fld	QWORD PTR _modulus$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [edx+112]
	fadd	QWORD PTR __real@0000000000000000

; 618  :   gv->gc = gc;

	fxch	ST(2)
	fst	QWORD PTR [edx+168]

; 619  : 
; 620  :   /* now self terms in derivative */
; 621  :   for ( j = 0 ; j < SDIM ; j++ )

	fld	QWORD PTR __real@4000000000000000
	cmp	DWORD PTR _web+616, edi
	jle	SHORT $LN69@sqgauss_me@3
	fld	ST(1)
	mov	ebx, -64				; ffffffc0H
	fmul	ST(0), ST(1)
	lea	eax, DWORD PTR [edx+64]
	fld	ST(2)
	sub	ebx, edx
	fmul	ST(0), ST(3)
$LN43@sqgauss_me@3:

; 622  :      v_info->grad[0][j] += (2*gc*gv->star_area*(-gv->angle_grad[j]/gv->area 
; 623  :                          - gc*gv->area_grad[j]/gv->area)
; 624  :                          + gc*gc*gv->star_area_grad[j])*modulus;

	fld	QWORD PTR [eax-56]
	mov	ecx, DWORD PTR _v_info$[ebp]
	fdiv	QWORD PTR [esi]
	mov	ecx, DWORD PTR [ecx+1336]
	mov	ecx, DWORD PTR [ecx]
	add	ecx, ebx
	inc	edi
	add	eax, 8
	fchs
	fld	QWORD PTR [eax-8]
	fmul	ST(0), ST(5)
	fdiv	QWORD PTR [esi]
	fsubp	ST(1), ST(0)
	fld	ST(2)
	fmul	QWORD PTR [edx+112]
	fmulp	ST(1), ST(0)
	fld	QWORD PTR [eax+48]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fadd	QWORD PTR [ecx+eax-8]
	fstp	QWORD PTR [ecx+eax-8]
	cmp	edi, DWORD PTR _web+616
	jl	SHORT $LN43@sqgauss_me@3

; 619  : 
; 620  :   /* now self terms in derivative */
; 621  :   for ( j = 0 ; j < SDIM ; j++ )

	mov	ebx, DWORD PTR tv477[ebp]
	fstp	ST(3)
	fstp	ST(0)
$LN69@sqgauss_me@3:

; 625  :   
; 626  :   /* now cross terms from edges */
; 627  :   start_e = e_id = get_vertex_edge(v_id);

	mov	edx, DWORD PTR _web+12
	fstp	ST(1)
	mov	ebx, DWORD PTR [ebx+edx]

; 628  :   if ( !(get_vattr(v_id) & (FIXED|BOUNDARY) ) )

	mov	eax, DWORD PTR [ebx+8]
	mov	edx, DWORD PTR [ebx+28]
	and	eax, 192				; 000000c0H
	xor	ecx, ecx
	or	eax, ecx
	jne	$LN101@sqgauss_me@3
	mov	edi, DWORD PTR _dymem
	mov	eax, edx
	or	eax, 134217728				; 08000000H

; 640  : 
; 641  :       e_id = get_next_tail_edge(e_id);

	mov	DWORD PTR tv634[ebp], eax
	mov	eax, DWORD PTR _web+124
$LN6@sqgauss_me@3:

; 629  :     do
; 630  :     { 
; 631  :       struct gvert *gv2 = gverts + loc_ordinal(get_edge_headv(e_id));

	mov	esi, DWORD PTR _web+216
	mov	esi, DWORD PTR [esi+edi+304]
	mov	ecx, edx
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR tv555[ebp], ecx
	mov	ecx, edx
	je	SHORT $LN29@sqgauss_me@3
	and	ecx, 134217727				; 07ffffffH
	lea	ebx, DWORD PTR [ecx*4]
	mov	eax, DWORD PTR [ebx+eax]
	add	eax, esi
	mov	esi, DWORD PTR [eax]
	jmp	SHORT $LN28@sqgauss_me@3
$LN29@sqgauss_me@3:
	and	ecx, 134217727				; 07ffffffH
	lea	ebx, DWORD PTR [ecx*4]
	mov	eax, DWORD PTR [ebx+eax]
	add	eax, esi
	mov	esi, DWORD PTR _web+636
	mov	esi, DWORD PTR [eax+esi*4]
$LN28@sqgauss_me@3:
	test	esi, 268435456				; 10000000H
	je	SHORT $LN24@sqgauss_me@3
	cmp	DWORD PTR tv555[ebp], 0
	je	SHORT $LN33@sqgauss_me@3
	mov	eax, DWORD PTR [eax]
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN25@sqgauss_me@3
$LN33@sqgauss_me@3:
	mov	esi, DWORD PTR _web+636
	mov	eax, DWORD PTR [eax+esi*4]
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN25@sqgauss_me@3
$LN24@sqgauss_me@3:
	or	eax, -1
$LN25@sqgauss_me@3:
	imul	eax, 176				; 000000b0H
	add	eax, DWORD PTR _gverts

; 632  :       struct gedge *ge = gedges + loc_ordinal(e_id);

	test	edx, 268435456				; 10000000H
	jne	SHORT $LN27@sqgauss_me@3
	or	ecx, -1
$LN27@sqgauss_me@3:
	lea	edx, DWORD PTR [ecx+ecx*8]
	shl	edx, 5
	add	edx, DWORD PTR _gedges

; 633  : 
; 634  :       /* head energy as function of tail */
; 635  :         for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	cmp	DWORD PTR _web+616, esi
	jle	SHORT $LN46@sqgauss_me@3

; 632  :       struct gedge *ge = gedges + loc_ordinal(e_id);

	mov	edi, -96				; ffffffa0H
	lea	ecx, DWORD PTR [edx+96]
	sub	edi, edx
$LN3@sqgauss_me@3:

; 636  :              v_info->grad[0][j] += 
; 637  :                     (2*gv2->gc*gv2->star_area*(-ge->angle_grad[0][j]/gv2->area
; 638  :                         - gv2->gc*ge->area_grad[0][j]/gv2->area)
; 639  :                         + gv2->gc*gv2->gc*ge->star_area_grad[0][j])*modulus;

	fld	QWORD PTR [eax+168]
	mov	edx, DWORD PTR _v_info$[ebp]
	fld	QWORD PTR [ecx+96]
	mov	edx, DWORD PTR [edx+1336]
	fdiv	QWORD PTR [eax+56]
	mov	edx, DWORD PTR [edx]
	add	edx, ecx
	inc	esi
	add	ecx, 8
	fchs
	fld	QWORD PTR [ecx-104]
	fmul	QWORD PTR [eax+168]
	fdiv	QWORD PTR [eax+56]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+168]
	fmul	ST(0), ST(3)
	fmul	QWORD PTR [eax+112]
	fmulp	ST(1), ST(0)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR [ecx-8]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fadd	QWORD PTR [edx+edi]
	fstp	QWORD PTR [edx+edi]
	cmp	esi, DWORD PTR _web+616
	jl	SHORT $LN3@sqgauss_me@3

; 633  : 
; 634  :       /* head energy as function of tail */
; 635  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	edi, DWORD PTR _dymem
$LN46@sqgauss_me@3:
	mov	eax, DWORD PTR _web+124

; 640  : 
; 641  :       e_id = get_next_tail_edge(e_id);

	mov	ecx, DWORD PTR [ebx+eax]
	mov	edx, DWORD PTR tv555[ebp]
	mov	edx, DWORD PTR [ecx+edx*4+32]

; 642  :     } while ( !equal_element(start_e,e_id) );

	mov	ecx, edx
	or	ecx, 134217728				; 08000000H
	cmp	DWORD PTR tv634[ebp], ecx
	jne	$LN6@sqgauss_me@3
$LN101@sqgauss_me@3:

; 633  : 
; 634  :       /* head energy as function of tail */
; 635  :         for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(1)
	pop	esi
	fstp	ST(0)
$LN12@sqgauss_me@3:
	pop	edi
	pop	ebx

; 643  : 
; 644  :  return energy;
; 645  : 
; 646  : } // end sqgauss_method_grad()

	mov	esp, ebp
	pop	ebp
	ret	0
_sqgauss_method_grad ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CP@JGJIDDL@Method?5gauss_curvature?5only?5for?5@ ; `string'
PUBLIC	_star_gauss_method_init
;	COMDAT ??_C@_0CP@JGJIDDL@Method?5gauss_curvature?5only?5for?5@
CONST	SEGMENT
??_C@_0CP@JGJIDDL@Method?5gauss_curvature?5only?5for?5@ DB 'Method gauss_'
	DB	'curvature only for LINEAR model.', 0aH, 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _star_gauss_method_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_star_gauss_method_init PROC				; COMDAT

; 665  :   if ( web.modeltype != LINEAR )

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN1@star_gauss

; 666  :     kb_error(2869,"Method gauss_curvature only for LINEAR model.\n",
; 667  :        RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CP@JGJIDDL@Method?5gauss_curvature?5only?5for?5@
	push	2869					; 00000b35H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@star_gauss:

; 668  : 
; 669  : } // end star_gauss_method_init()

	ret	0
_star_gauss_method_init ENDP
_TEXT	ENDS
PUBLIC	_star_gauss_method_all
; Function compile flags: /Ogtp
;	COMDAT _star_gauss_method_all
_TEXT	SEGMENT
tv957 = -124						; size = 8
tv889 = -116						; size = 8
tv915 = -108						; size = 8
tv953 = -100						; size = 8
tv829 = -100						; size = 8
tv927 = -92						; size = 8
tv319 = -84						; size = 8
tv907 = -76						; size = 8
_deficit$ = -68						; size = 8
tv851 = -60						; size = 8
tv842 = -52						; size = 8
_ss2$89576 = -44					; size = 8
_ss1$89575 = -36					; size = 8
_s1s2$89577 = -28					; size = 8
_fudge$ = -20						; size = 4
_kk$89578 = -16						; size = 4
tv2282 = -12						; size = 4
tv1658 = -8						; size = 4
_s1$89579 = -4						; size = 4
_s2$89580 = 8						; size = 4
_v_info$ = 8						; size = 4
_mode$ = 12						; size = 4
_star_gauss_method_all PROC				; COMDAT

; 681  : { REAL deficit = 2*M_PI;

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	fld	QWORD PTR __real@401921fb54442d18
	push	esi

; 682  :   int k,i,j;
; 683  :   int fudge = (v_info->flags & INCOMPLETE_STAR) ? 1 : 0;

	mov	esi, DWORD PTR _v_info$[ebp]
	fstp	QWORD PTR _deficit$[ebp]
	mov	ecx, DWORD PTR [esi+4]

; 684  : 
; 685  :   if ( v_info->vcount <= 1 ) return 0.0;

	mov	eax, DWORD PTR [esi+12]
	and	ecx, 1
	mov	DWORD PTR _fudge$[ebp], ecx
	cmp	eax, 1
	jg	SHORT $LN12@star_gauss@2
	fldz
	pop	esi

; 759  : 
; 760  : } // end star_gauss_method_all()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@star_gauss@2:

; 686  : 
; 687  :   for ( k = 1 ; k < v_info->vcount-fudge ; k++ )

	mov	edx, eax
	push	edi
	mov	edi, 1
	sub	edx, ecx
	cmp	edx, edi
	jle	$LN9@star_gauss@2
	push	ebx
	jmp	SHORT $LN11@star_gauss@2
$LL37@star_gauss@2:
	mov	ecx, DWORD PTR _fudge$[ebp]
$LN11@star_gauss@2:

; 688  :   { REAL ss1,ss2,s1s2;
; 689  :     int kk = (!fudge && k==(v_info->vcount-1)) ? 1 : k+1;

	test	ecx, ecx
	jne	SHORT $LN15@star_gauss@2
	dec	eax
	lea	ebx, DWORD PTR [ecx+1]
	cmp	edi, eax
	je	SHORT $LN71@star_gauss@2
$LN15@star_gauss@2:
	lea	ebx, DWORD PTR [edi+1]
$LN71@star_gauss@2:

; 690  :     REAL *s1 = v_info->sides[0][k-1],*s2 = v_info->sides[0][kk-1];

	mov	eax, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax+edi*4-4]
	mov	edx, DWORD PTR [eax+ebx*4-4]

; 691  :     REAL denom;
; 692  : 
; 693  :     ss1 = SDIM_dot(s1,s1);

	mov	eax, DWORD PTR _web+616
	push	eax
	push	ecx
	push	ecx
	mov	DWORD PTR _kk$89578[ebp], ebx
	mov	DWORD PTR _s1$89579[ebp], ecx
	mov	DWORD PTR _s2$89580[ebp], edx
	call	_dot
	fstp	QWORD PTR _ss1$89575[ebp]

; 694  :     ss2 = SDIM_dot(s2,s2);

	mov	ecx, DWORD PTR _web+616
	mov	eax, DWORD PTR _s2$89580[ebp]
	push	ecx
	push	eax
	push	eax
	call	_dot
	fstp	QWORD PTR _ss2$89576[ebp]

; 695  :     s1s2 = SDIM_dot(s1,s2);

	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR _s2$89580[ebp]
	mov	ecx, DWORD PTR _s1$89579[ebp]
	push	edx
	push	eax
	push	ecx
	call	_dot
	fstp	QWORD PTR _s1s2$89577[ebp]

; 696  :     deficit -= acos(s1s2/sqrt(ss1*ss2));

	fld	QWORD PTR _ss2$89576[ebp]
	add	esp, 36					; 00000024H
	fmul	QWORD PTR _ss1$89575[ebp]
	fst	QWORD PTR tv829[ebp]
	call	__CIsqrt
	fdivr	QWORD PTR _s1s2$89577[ebp]
	call	__CIacos
	fsubr	QWORD PTR _deficit$[ebp]

; 697  : 
; 698  :     if ( mode == METHOD_VALUE )

	cmp	DWORD PTR _mode$[ebp], 1767		; 000006e7H
	fstp	QWORD PTR _deficit$[ebp]
	je	$LN10@star_gauss@2

; 699  :       continue;
; 700  : 
; 701  :     denom = sqrt(ss1*ss2 - s1s2*s1s2);

	fld	QWORD PTR _s1s2$89577[ebp]
	fmul	ST(0), ST(0)
	fsubr	QWORD PTR tv829[ebp]
	call	__CIsqrt

; 702  :     for ( i = 0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	cmp	DWORD PTR _web+616, ecx
	jle	$LN39@star_gauss@2
	fld	QWORD PTR _s1s2$89577[ebp]
	mov	edx, DWORD PTR _s1$89579[ebp]
	fld	ST(0)
	sub	edx, DWORD PTR _s2$89580[ebp]
	fld	QWORD PTR _ss1$89575[ebp]
	fdiv	ST(1), ST(0)
	mov	DWORD PTR tv2282[ebp], edx
	fxch	ST(1)
	fstp	QWORD PTR tv842[ebp]
	fld	QWORD PTR _ss2$89576[ebp]
	fdiv	ST(2), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR tv851[ebp]
	fld	QWORD PTR __real@3fe0000000000000
	fld	QWORD PTR __real@4000000000000000
$LN35@star_gauss@2:

; 703  :     { REAL ddefds1,ddefds2;
; 704  :       ddefds1 = (s2[i] - s1s2/ss1*s1[i])/denom;
; 705  :       ddefds2 = (s1[i] - s1s2/ss2*s2[i])/denom;
; 706  : 
; 707  :       v_info->grad[k][i] += ddefds1;
; 708  :       v_info->grad[0][i] -= ddefds1;
; 709  :       v_info->grad[kk][i] += ddefds2;
; 710  :       v_info->grad[0][i] -= ddefds2;
; 711  : 
; 712  :       if ( mode == METHOD_GRADIENT )

	cmp	DWORD PTR _mode$[ebp], 4321		; 000010e1H
	fld	QWORD PTR tv842[ebp]
	mov	eax, DWORD PTR _s2$89580[ebp]
	lea	eax, DWORD PTR [eax+ecx*8]
	fmul	QWORD PTR [eax+edx]
	fsubr	QWORD PTR [eax]
	fdiv	ST(0), ST(5)
	fld	QWORD PTR tv851[ebp]
	fmul	QWORD PTR [eax]
	fsubr	QWORD PTR [eax+edx]
	mov	eax, DWORD PTR [esi+1336]
	mov	eax, DWORD PTR [eax+edi*4]
	lea	eax, DWORD PTR [eax+ecx*8]
	fdiv	ST(0), ST(6)
	fld	QWORD PTR [eax]
	fadd	ST(0), ST(2)
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR [esi+1336]
	mov	eax, DWORD PTR [eax]
	fld	QWORD PTR [eax+ecx*8]
	lea	eax, DWORD PTR [eax+ecx*8]
	fsub	ST(0), ST(2)
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR [esi+1336]
	mov	eax, DWORD PTR [eax+ebx*4]
	fld	QWORD PTR [eax+ecx*8]
	lea	eax, DWORD PTR [eax+ecx*8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR [esi+1336]
	mov	eax, DWORD PTR [eax]
	fld	QWORD PTR [eax+ecx*8]
	lea	eax, DWORD PTR [eax+ecx*8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [eax]
	je	$LN43@star_gauss@2

; 713  :         continue;
; 714  :   
; 715  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	$LN43@star_gauss@2
	fld	QWORD PTR tv842[ebp]
	mov	edx, DWORD PTR _s2$89580[ebp]
	fdiv	ST(0), ST(5)
	sub	edx, DWORD PTR _s1$89579[ebp]
	mov	DWORD PTR tv1658[ebp], edx
	fmul	ST(0), ST(3)
	fstp	QWORD PTR tv889[ebp]
	fxch	ST(1)
	fdiv	ST(0), ST(6)
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(6)
	fst	QWORD PTR tv915[ebp]
	fld	ST(5)
	fmul	ST(0), ST(3)
	fstp	QWORD PTR tv907[ebp]
	fld	QWORD PTR tv851[ebp]
	fdiv	ST(0), ST(6)
	fmul	ST(0), ST(3)
	fstp	QWORD PTR tv957[ebp]
	fld	ST(4)
	fmul	ST(0), ST(3)
	fstp	QWORD PTR tv927[ebp]
	fld	QWORD PTR _s1s2$89577[ebp]
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(6)
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fdiv	ST(0), ST(5)
	fstp	QWORD PTR tv953[ebp]
	jmp	SHORT $LN3@star_gauss@2
$LN34@star_gauss@2:
	fld	QWORD PTR _ss1$89575[ebp]
	fld	QWORD PTR tv915[ebp]
	fld	QWORD PTR _ss2$89576[ebp]
	fxch	ST(3)
$LN3@star_gauss@2:

; 716  :       { REAL dddefds1ds1,dddefds1ds2,dddefds2ds1,dddefds2ds2;
; 717  :   
; 718  :         dddefds1ds1 = (-s2[j]/ss1*s1[i] + s1s2/ss1/ss1*2*s1[j]*s1[i]
; 719  :                  - (i==j ? s1s2/ss1 : 0))/denom
; 720  :           - ddefds1/denom*0.5/denom*(2*ss2*s1[j] - 2*s1s2*s2[j]); 

	cmp	ecx, eax
	jne	SHORT $LN17@star_gauss@2
	fld	QWORD PTR tv842[ebp]
	jmp	SHORT $LN18@star_gauss@2
$LN17@star_gauss@2:
	fldz
$LN18@star_gauss@2:

; 713  :         continue;
; 714  :   
; 715  :       for ( j = 0 ; j < SDIM ; j++ )

	mov	edx, DWORD PTR _s1$89579[ebp]

; 716  :       { REAL dddefds1ds1,dddefds1ds2,dddefds2ds1,dddefds2ds2;
; 717  :   
; 718  :         dddefds1ds1 = (-s2[j]/ss1*s1[i] + s1s2/ss1/ss1*2*s1[j]*s1[i]
; 719  :                  - (i==j ? s1s2/ss1 : 0))/denom
; 720  :           - ddefds1/denom*0.5/denom*(2*ss2*s1[j] - 2*s1s2*s2[j]); 

	fld	QWORD PTR tv889[ebp]
	fmul	QWORD PTR [edx+eax*8]
	mov	ebx, DWORD PTR tv2282[ebp]
	lea	edx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _s2$89580[ebp]
	lea	edx, DWORD PTR [edx+ecx*8]
	fmul	QWORD PTR [edx+ebx]
	mov	edx, DWORD PTR _s1$89579[ebp]
	mov	ebx, DWORD PTR tv1658[ebp]
	lea	edx, DWORD PTR [edx+eax*8]
	fld	QWORD PTR [edx+ebx]
	mov	edx, DWORD PTR _s2$89580[ebp]
	fdiv	ST(0), ST(5)
	mov	ebx, DWORD PTR tv2282[ebp]
	lea	edx, DWORD PTR [edx+ecx*8]
	fmul	QWORD PTR [edx+ebx]
	mov	edx, DWORD PTR _s1$89579[ebp]
	mov	ebx, DWORD PTR tv1658[ebp]
	lea	edx, DWORD PTR [edx+eax*8]
	fsubp	ST(1), ST(0)
	fsubrp	ST(1), ST(0)
	fdiv	ST(0), ST(5)
	fld	QWORD PTR tv907[ebp]
	fmul	QWORD PTR [edx]
	fld	ST(2)
	fmul	QWORD PTR [edx+ebx]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)

; 721  : 
; 722  :         dddefds1ds2 = ((i==j ? 1.0 : 0.0) - s1[j]/ss1*s1[i])/denom
; 723  :           - ddefds1/denom*0.5/denom*(2*ss1*s2[j] - 2*s1s2*s1[j]);

	cmp	ecx, eax
	jne	SHORT $LN19@star_gauss@2
	fld1
	jmp	SHORT $LN20@star_gauss@2
$LN19@star_gauss@2:
	fldz
$LN20@star_gauss@2:
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR _s2$89580[ebp]
	fdivrp	ST(5), ST(0)
	mov	ebx, DWORD PTR tv2282[ebp]
	lea	edx, DWORD PTR [edx+ecx*8]
	fxch	ST(4)
	fmul	QWORD PTR [edx+ebx]
	mov	edx, DWORD PTR _s1$89579[ebp]
	mov	ebx, DWORD PTR tv1658[ebp]
	lea	edx, DWORD PTR [edx+eax*8]
	fsubp	ST(4), ST(0)
	fxch	ST(3)
	fdiv	ST(0), ST(5)
	fld	QWORD PTR tv927[ebp]
	fmul	QWORD PTR [edx+ebx]
	fld	ST(2)
	fmul	QWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fmulp	ST(3), ST(0)
	fsubrp	ST(2), ST(0)

; 724  : 
; 725  :         dddefds2ds1 = ((i==j ? 1.0 : 0.0) - s2[j]/ss2*s2[i])/denom
; 726  :           - ddefds2/denom*0.5/denom*(2*ss2*s1[j] - 2*s1s2*s2[j]);

	cmp	ecx, eax
	jne	SHORT $LN21@star_gauss@2
	fld1
	jmp	SHORT $LN22@star_gauss@2
$LN21@star_gauss@2:
	fldz
$LN22@star_gauss@2:
	fld	QWORD PTR [edx+ebx]
	mov	ebx, DWORD PTR _s2$89580[ebp]
	fdiv	ST(0), ST(5)
	lea	ebx, DWORD PTR [ebx+ecx*8]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv1658[ebp]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(5)
	fld	QWORD PTR tv907[ebp]
	fmul	QWORD PTR [edx]
	fld	ST(2)
	fmul	QWORD PTR [edx+ebx]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR tv953[ebp]
	fsubp	ST(1), ST(0)

; 727  : 
; 728  :         dddefds2ds2 = (-s1[j]/ss2*s2[i] + s1s2/ss2/ss2*2*s2[j]*s2[i]
; 729  :                  - (i==j ? s1s2/ss2 : 0))/denom
; 730  :           - ddefds2/denom*0.5/denom*(2*ss1*s2[j] - 2*s1s2*s1[j]);

	cmp	ecx, eax
	jne	SHORT $LN23@star_gauss@2
	fld	QWORD PTR tv851[ebp]
	jmp	SHORT $LN72@star_gauss@2
$LN23@star_gauss@2:
	fldz
$LN72@star_gauss@2:
	fstp	QWORD PTR tv319[ebp]
	fld	QWORD PTR tv957[ebp]
	fmul	QWORD PTR [edx+ebx]
	mov	ebx, DWORD PTR _s2$89580[ebp]
	lea	ebx, DWORD PTR [ebx+ecx*8]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [edx]
	fdivrp	ST(6), ST(0)
	fxch	ST(5)
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv1658[ebp]
	fsubp	ST(5), ST(0)
	fxch	ST(4)
	fsub	QWORD PTR tv319[ebp]
	fdiv	ST(0), ST(5)
	fld	QWORD PTR tv927[ebp]
	fmul	QWORD PTR [edx+ebx]
	fld	ST(2)
	fmul	QWORD PTR [edx]
	mov	ebx, DWORD PTR _kk$89578[ebp]
	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx+ecx*4]
	fsubp	ST(1), ST(0)
	lea	edx, DWORD PTR [edx+eax*8]
	fmul	QWORD PTR tv953[ebp]
	fsubp	ST(1), ST(0)

; 731  : 
; 732  :         v_info->hess[k][k][i][j] += dddefds1ds1;

	fld	QWORD PTR [edx]
	fadd	ST(0), ST(4)
	fstp	QWORD PTR [edx]

; 733  :         v_info->hess[0][k][i][j] -= dddefds1ds1;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fsub	ST(0), ST(4)
	fstp	QWORD PTR [edx]

; 734  :         v_info->hess[k][0][i][j] -= dddefds1ds1;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fsub	ST(0), ST(4)
	fstp	QWORD PTR [edx]

; 735  :         v_info->hess[0][0][i][j] += dddefds1ds1;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	faddp	ST(4), ST(0)
	fxch	ST(3)
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR [edx+ecx*4]

; 736  : 
; 737  :         v_info->hess[k][kk][i][j] += dddefds1ds2;

	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fadd	ST(0), ST(2)
	fstp	QWORD PTR [edx]

; 738  :         v_info->hess[0][kk][i][j] -= dddefds1ds2;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fsub	ST(0), ST(2)
	fstp	QWORD PTR [edx]

; 739  :         v_info->hess[k][0][i][j] -= dddefds1ds2;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fsub	ST(0), ST(2)
	fstp	QWORD PTR [edx]

; 740  :         v_info->hess[0][0][i][j] += dddefds1ds2;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx+ebx*4]

; 741  : 
; 742  :         v_info->hess[kk][k][i][j] += dddefds2ds1;

	fld	ST(2)
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx+ecx*4]
	fadd	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fstp	QWORD PTR [edx]

; 743  :         v_info->hess[0][k][i][j] -= dddefds2ds1;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fsub	ST(0), ST(3)
	fstp	QWORD PTR [edx]

; 744  :         v_info->hess[kk][0][i][j] -= dddefds2ds1;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fsub	ST(0), ST(3)
	fstp	QWORD PTR [edx]

; 745  :         v_info->hess[0][0][i][j] += dddefds2ds1;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR [edx+ecx*4]

; 746  : 
; 747  :         v_info->hess[kk][kk][i][j] += dddefds2ds2;

	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 748  :         v_info->hess[0][kk][i][j] -= dddefds2ds2;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 749  :         v_info->hess[kk][0][i][j] -= dddefds2ds2;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 750  :         v_info->hess[0][0][i][j] += dddefds2ds2;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ecx*4]
	fadd	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	inc	eax
	fstp	QWORD PTR [edx]
	cmp	eax, DWORD PTR _web+616
	jl	$LN34@star_gauss@2

; 713  :         continue;
; 714  :   
; 715  :       for ( j = 0 ; j < SDIM ; j++ )

	mov	edx, DWORD PTR tv2282[ebp]
	fstp	ST(0)
	fld	QWORD PTR _ss1$89575[ebp]
	fld	QWORD PTR _ss2$89576[ebp]
	fld	QWORD PTR __real@4000000000000000
	fld	QWORD PTR __real@3fe0000000000000
	fxch	ST(2)
	fxch	ST(3)
	fxch	ST(2)
	fxch	ST(1)
$LN6@star_gauss@2:

; 702  :     for ( i = 0 ; i < SDIM ; i++ )

	inc	ecx
	cmp	ecx, DWORD PTR _web+616
	jl	$LN35@star_gauss@2

; 716  :       { REAL dddefds1ds1,dddefds1ds2,dddefds2ds1,dddefds2ds2;
; 717  :   
; 718  :         dddefds1ds1 = (-s2[j]/ss1*s1[i] + s1s2/ss1/ss1*2*s1[j]*s1[i]
; 719  :                  - (i==j ? s1s2/ss1 : 0))/denom
; 720  :           - ddefds1/denom*0.5/denom*(2*ss2*s1[j] - 2*s1s2*s2[j]); 

	fstp	ST(4)
	fstp	ST(3)
	fstp	ST(0)
	fstp	ST(0)
$LN39@star_gauss@2:
	fstp	ST(0)
$LN10@star_gauss@2:

; 686  : 
; 687  :   for ( k = 1 ; k < v_info->vcount-fudge ; k++ )

	mov	eax, DWORD PTR [esi+12]
	mov	ecx, eax
	sub	ecx, DWORD PTR _fudge$[ebp]
	inc	edi
	cmp	edi, ecx
	jl	$LL37@star_gauss@2
	pop	ebx
$LN9@star_gauss@2:

; 751  : 
; 752  :       }
; 753  :         
; 754  :     }
; 755  : 
; 756  :   }
; 757  : 
; 758  :   return deficit;

	fld	QWORD PTR _deficit$[ebp]
	pop	edi
	pop	esi

; 759  : 
; 760  : } // end star_gauss_method_all()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN43@star_gauss@2:

; 713  :         continue;
; 714  :   
; 715  :       for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(1)
	fstp	ST(0)
	jmp	SHORT $LN6@star_gauss@2
_star_gauss_method_all ENDP
_TEXT	ENDS
PUBLIC	_star_gauss_method_value
; Function compile flags: /Ogtp
;	COMDAT _star_gauss_method_value
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_star_gauss_method_value PROC				; COMDAT

; 769  : { return star_gauss_method_all(v_info,METHOD_VALUE);

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v_info$[ebp]
	push	1767					; 000006e7H
	push	eax
	call	_star_gauss_method_all
	add	esp, 8

; 770  : }

	pop	ebp
	ret	0
_star_gauss_method_value ENDP
_TEXT	ENDS
PUBLIC	_star_gauss_method_grad
; Function compile flags: /Ogtp
;	COMDAT _star_gauss_method_grad
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_star_gauss_method_grad PROC				; COMDAT

; 773  : { return star_gauss_method_all(v_info,METHOD_GRADIENT);

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v_info$[ebp]
	push	4321					; 000010e1H
	push	eax
	call	_star_gauss_method_all
	add	esp, 8

; 774  : }

	pop	ebp
	ret	0
_star_gauss_method_grad ENDP
_TEXT	ENDS
PUBLIC	_star_gauss_method_hess
; Function compile flags: /Ogtp
;	COMDAT _star_gauss_method_hess
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_star_gauss_method_hess PROC				; COMDAT

; 777  : { return star_gauss_method_all(v_info,METHOD_HESSIAN);

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v_info$[ebp]
	push	8763					; 0000223bH
	push	eax
	call	_star_gauss_method_all
	add	esp, 8

; 778  : }

	pop	ebp
	ret	0
_star_gauss_method_hess ENDP
_TEXT	ENDS
PUBLIC	_star_sqgauss_method_init
; Function compile flags: /Ogtp
;	COMDAT _star_sqgauss_method_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_star_sqgauss_method_init PROC				; COMDAT

; 797  :   if ( web.modeltype != LINEAR )

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN1@star_sqgau

; 798  :     kb_error(2867,"Method sq_gauss_curvature only for LINEAR model.\n",
; 799  :        RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DC@GBHIHFFO@Method?5sq_gauss_curvature?5only?5f@
	push	2867					; 00000b33H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@star_sqgau:

; 800  : 
; 801  : } // end star_sqgauss_method_init()

	ret	0
_star_sqgauss_method_init ENDP
_TEXT	ENDS
PUBLIC	__real@4018000000000000
PUBLIC	_star_sqgauss_method_all
EXTRN	_free_temp_matrix:PROC
EXTRN	_kb_temp_dmatrix:PROC
;	COMDAT __real@4018000000000000
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _star_sqgauss_method_all
_TEXT	SEGMENT
_ddads2ds2$89672 = -200					; size = 8
tv1527 = -192						; size = 8
tv1665 = -184						; size = 8
tv1634 = -176						; size = 8
_ddads1ds2$89670 = -168					; size = 8
_ddads1ds1$89669 = -160					; size = 8
tv1623 = -152						; size = 8
tv1595 = -144						; size = 8
_dddefds2ds1$89667 = -144				; size = 8
tv1420 = -136						; size = 8
tv1449 = -128						; size = 8
_ss2$89644 = -120					; size = 8
tv1446 = -112						; size = 8
tv1429 = -104						; size = 8
_ss1$89635 = -104					; size = 8
_s1s2$89645 = -96					; size = 8
_s1s2$89637 = -96					; size = 8
_area$ = -88						; size = 8
_ss1$89643 = -80					; size = 8
_ddenomds2j$89674 = -72					; size = 8
_ddefds2$89654 = -72					; size = 8
tv1649 = -64						; size = 8
tv1383 = -64						; size = 8
_dsqds1$89657 = -64					; size = 8
_ss2$89636 = -64					; size = 8
tv3969 = -56						; size = 4
_deficit$ = -52						; size = 8
tv599 = -44						; size = 8
_ddenomds1j$89673 = -44					; size = 8
_dads1$89655 = -44					; size = 8
tv1535 = -36						; size = 8
_ddads2ds1$89671 = -36					; size = 8
_dads2$89656 = -36					; size = 8
tv4391 = -32						; size = 4
tv1908 = -32						; size = 4
_ddefdv$ = -28						; size = 4
_k$ = -24						; size = 4
_ddefds1$89653 = -20					; size = 8
tv4571 = -16						; size = 4
tv2583 = -16						; size = 4
_dadv$ = -12						; size = 4
_s1$89647 = -8						; size = 4
tv3351 = -4						; size = 4
tv1897 = -4						; size = 4
_kk$ = 8						; size = 4
_s2$89648 = 8						; size = 4
_v_info$ = 8						; size = 4
_mode$ = 12						; size = 4
_star_sqgauss_method_all PROC				; COMDAT

; 813  : { REAL deficit = 2*M_PI;

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	fld	QWORD PTR __real@401921fb54442d18
	push	esi

; 814  :   REAL area = 0.0;
; 815  :   int k,kk,i,j;
; 816  :   REAL **dadv=NULL,**ddefdv=NULL; /* gradient storage */
; 817  :   int pairs;
; 818  : 
; 819  :   if ( v_info->vcount <= 1 ) return 0.0;

	mov	esi, DWORD PTR _v_info$[ebp]
	fst	QWORD PTR _deficit$[ebp]
	fldz
	mov	eax, DWORD PTR [esi+12]
	push	edi
	fld	ST(0)
	xor	edi, edi
	fst	QWORD PTR _area$[ebp]
	mov	DWORD PTR _dadv$[ebp], edi
	mov	DWORD PTR _ddefdv$[ebp], edi
	cmp	eax, 1
	jg	SHORT $LN32@star_sqgau@2
$LN172@star_sqgau@2:
	fstp	ST(0)
	pop	edi
	fstp	ST(1)
	pop	esi

; 975  : 
; 976  : } // end star_sqgauss_method_all()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN32@star_sqgau@2:

; 820  :   pairs = (v_info->vcount - 1);

	lea	ecx, DWORD PTR [eax-1]

; 821  :   if ( pairs <= 0 ) return 0.0;

	test	ecx, ecx
	jle	SHORT $LN172@star_sqgau@2

; 822  :   if ( v_info->flags & INCOMPLETE_STAR )
; 823  :   { pairs--;
; 824  :   }
; 825  : 
; 826  :   if ( mode == METHOD_HESSIAN )

	cmp	DWORD PTR _mode$[ebp], 8763		; 0000223bH
	fstp	ST(1)
	jne	SHORT $LN29@star_sqgau@2

; 827  :   { dadv = temp_dmatrix(0,v_info->vcount,0,SDIM-1);

	mov	edx, DWORD PTR _web+616
	fstp	ST(0)
	push	827					; 0000033bH
	fstp	ST(0)
	push	OFFSET ??_C@_07EIDGGOJA@GAUSS?4C?$AA@
	dec	edx
	push	edx
	push	edi
	push	eax
	push	edi
	call	_kb_temp_dmatrix

; 828  :     ddefdv = temp_dmatrix(0,v_info->vcount,0,SDIM-1);

	mov	ecx, DWORD PTR [esi+12]
	push	828					; 0000033cH
	mov	DWORD PTR _dadv$[ebp], eax
	mov	eax, DWORD PTR _web+616
	push	OFFSET ??_C@_07EIDGGOJA@GAUSS?4C?$AA@
	dec	eax
	push	eax
	push	edi
	push	ecx
	push	edi
	call	_kb_temp_dmatrix
	fld	QWORD PTR _deficit$[ebp]
	fld	QWORD PTR _area$[ebp]
	add	esp, 48					; 00000030H
	mov	DWORD PTR _ddefdv$[ebp], eax
$LN29@star_sqgau@2:

; 829  :   } 
; 830  : 
; 831  :   for ( k = 1 ; k < v_info->vcount ; k++ )

	mov	eax, DWORD PTR [esi+12]
	mov	edi, 1
	push	ebx
	cmp	eax, edi
	jle	$LN26@star_sqgau@2
	fstp	ST(0)
$LN115@star_sqgau@2:

; 832  :   { REAL ss1,ss2,s1s2;
; 833  :     int kk = (k==(v_info->vcount-1)) ? 0 : k;
; 834  :     ss1 = SDIM_dot(v_info->sides[0][k-1],v_info->sides[0][k-1]);

	mov	edx, DWORD PTR [esi+1276]
	fstp	ST(0)
	mov	ecx, DWORD PTR _web+616
	dec	eax
	mov	ebx, edi
	sub	ebx, eax
	mov	eax, DWORD PTR [edx]
	mov	eax, DWORD PTR [eax+edi*4-4]
	push	ecx
	neg	ebx
	push	eax
	sbb	ebx, ebx
	push	eax
	and	ebx, edi
	call	_dot
	fstp	QWORD PTR _ss1$89635[ebp]

; 835  :     ss2 = SDIM_dot(v_info->sides[0][kk],v_info->sides[0][kk]);

	mov	edx, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _web+616
	mov	eax, DWORD PTR [eax+ebx*4]
	push	ecx
	push	eax
	push	eax
	call	_dot
	fstp	QWORD PTR _ss2$89636[ebp]

; 836  :     s1s2 = SDIM_dot(v_info->sides[0][k-1],v_info->sides[0][kk]);

	mov	edx, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR [eax+edi*4-4]
	push	ecx
	push	edx
	push	eax
	call	_dot
	fstp	QWORD PTR _s1s2$89637[ebp]

; 837  :     deficit -= acos(s1s2/sqrt(ss1*ss2));

	fld	QWORD PTR _ss2$89636[ebp]
	add	esp, 36					; 00000024H
	fmul	QWORD PTR _ss1$89635[ebp]
	fst	QWORD PTR tv1383[ebp]
	call	__CIsqrt
	fdivr	QWORD PTR _s1s2$89637[ebp]
	call	__CIacos
	fsubr	QWORD PTR _deficit$[ebp]
	fstp	QWORD PTR _deficit$[ebp]

; 838  :     area += sqrt(ss1*ss2 - s1s2*s1s2)/6;

	fld	QWORD PTR _s1s2$89637[ebp]
	fmul	ST(0), ST(0)
	fsubr	QWORD PTR tv1383[ebp]
	call	__CIsqrt
	fdiv	QWORD PTR __real@4018000000000000
	mov	eax, DWORD PTR [esi+12]
	inc	edi
	fadd	QWORD PTR _area$[ebp]
	fst	QWORD PTR _area$[ebp]
	cmp	edi, eax
	jl	$LN115@star_sqgau@2

; 829  :   } 
; 830  : 
; 831  :   for ( k = 1 ; k < v_info->vcount ; k++ )

	fld	QWORD PTR _deficit$[ebp]
	fxch	ST(1)
$LN26@star_sqgau@2:

; 839  :   }
; 840  : 
; 841  :   if ( mode == METHOD_VALUE )

	cmp	DWORD PTR _mode$[ebp], 1767		; 000006e7H

; 842  :     return deficit*deficit/area;

	je	$LN13@star_sqgau@2

; 843  : 
; 844  :   /* now individual vertex gradients */
; 845  :   for ( k = 1 ; k < v_info->vcount ; k++ )

	mov	eax, DWORD PTR [esi+12]
	fld	QWORD PTR __real@4000000000000000
	mov	ebx, 1
	mov	DWORD PTR _k$[ebp], ebx
	cmp	eax, ebx
	jle	$LN66@star_sqgau@2
	mov	ecx, DWORD PTR _ddefdv$[ebp]
	fstp	ST(1)
	sub	ecx, DWORD PTR _dadv$[ebp]
	fstp	ST(1)
	mov	DWORD PTR tv3969[ebp], ecx
	jmp	SHORT $LN170@star_sqgau@2
	npad	6
$LL166@star_sqgau@2:
	fstp	ST(1)
	fstp	ST(0)
$LN170@star_sqgau@2:

; 846  :   {  REAL ss1,ss2,s1s2;
; 847  :      int kk = (k==(v_info->vcount-1)) ? 1 : k+1;

	dec	eax
	fstp	ST(0)
	mov	edi, 1
	cmp	ebx, eax
	je	SHORT $LN36@star_sqgau@2
	lea	edi, DWORD PTR [ebx+1]
$LN36@star_sqgau@2:

; 848  :      REAL *s1 = v_info->sides[0][k-1],*s2 = v_info->sides[0][kk-1];

	mov	ecx, DWORD PTR [esi+1276]
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+ebx*4-4]
	mov	edx, DWORD PTR [ecx+edi*4-4]

; 849  :      REAL denom;
; 850  : 
; 851  :      ss1 = SDIM_dot(s1,s1);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	push	eax
	push	eax
	mov	DWORD PTR _s1$89647[ebp], eax
	mov	DWORD PTR _s2$89648[ebp], edx
	call	_dot
	fstp	QWORD PTR _ss1$89643[ebp]

; 852  :      ss2 = SDIM_dot(s2,s2);

	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR _s2$89648[ebp]
	push	edx
	push	eax
	push	eax
	call	_dot
	fstp	QWORD PTR _ss2$89644[ebp]

; 853  :      s1s2 = SDIM_dot(s1,s2);

	mov	eax, DWORD PTR _web+616
	mov	ecx, DWORD PTR _s2$89648[ebp]
	mov	edx, DWORD PTR _s1$89647[ebp]
	push	eax
	push	ecx
	push	edx
	call	_dot
	fst	QWORD PTR _s1s2$89645[ebp]

; 854  :      
; 855  :      denom = sqrt(ss1*ss2 - s1s2*s1s2);

	fld	QWORD PTR _ss2$89644[ebp]
	add	esp, 36					; 00000024H
	fmul	QWORD PTR _ss1$89643[ebp]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	call	__CIsqrt

; 856  :      for ( i = 0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	cmp	DWORD PTR _web+616, ecx
	jle	$LN119@star_sqgau@2
	fld	QWORD PTR _s1s2$89645[ebp]
	mov	edx, DWORD PTR _s1$89647[ebp]
	fld	QWORD PTR _ss1$89643[ebp]
	sub	edx, DWORD PTR _s2$89648[ebp]
	fdivr	ST(0), ST(1)
	mov	DWORD PTR tv3351[ebp], edx
	fstp	QWORD PTR tv1420[ebp]
	fld	ST(0)
	fld	QWORD PTR _ss2$89644[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv1429[ebp]
	fld	QWORD PTR _deficit$[ebp]
	fld	ST(0)
	fadd	ST(0), ST(1)
	fstp	QWORD PTR tv1446[ebp]
	fmul	ST(0), ST(0)
	fld	QWORD PTR _area$[ebp]
	fdiv	ST(1), ST(0)
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv1449[ebp]
	fld	QWORD PTR __real@4018000000000000
	jmp	SHORT $LN71@star_sqgau@2
$LN162@star_sqgau@2:
	fstp	ST(4)
	fstp	ST(0)
	fxch	ST(1)
	fxch	ST(3)
	fxch	ST(1)
$LN71@star_sqgau@2:

; 857  :      { REAL ddefds1,ddefds2,dads1,dads2,dsqds1,dsqds2;
; 858  :        int j;
; 859  :         ddefds1 = (s2[i] - s1s2/ss1*s1[i])/denom;
; 860  :         ddefds2 = (s1[i] - s1s2/ss2*s2[i])/denom;
; 861  :         dads1 = (s1[i]*ss2 - s1s2*s2[i])/denom/6;
; 862  :         dads2 = (s2[i]*ss1 - s1s2*s1[i])/denom/6;
; 863  :         dsqds1 = 2*deficit*ddefds1/area - deficit*deficit/area/area*dads1;
; 864  :         dsqds2 = 2*deficit*ddefds2/area - deficit*deficit/area/area*dads2;
; 865  :         v_info->grad[k][i] += dsqds1;
; 866  :         v_info->grad[0][i] -= dsqds1;
; 867  :         v_info->grad[kk][i] += dsqds2;
; 868  :         v_info->grad[0][i] -= dsqds2;
; 869  : 
; 870  :         if ( mode == METHOD_GRADIENT )

	cmp	DWORD PTR _mode$[ebp], 4321		; 000010e1H
	fld	QWORD PTR tv1420[ebp]
	mov	eax, DWORD PTR _s2$89648[ebp]
	lea	eax, DWORD PTR [eax+ecx*8]
	fmul	QWORD PTR [eax+edx]
	fsubr	QWORD PTR [eax]
	fdiv	ST(0), ST(5)
	fst	QWORD PTR _ddefds1$89653[ebp]
	fld	QWORD PTR [eax]
	fmul	QWORD PTR tv1429[ebp]
	fsubr	QWORD PTR [eax+edx]
	fdiv	ST(0), ST(6)
	fstp	QWORD PTR _ddefds2$89654[ebp]
	fld	QWORD PTR [eax+edx]
	fmul	ST(0), ST(4)
	fld	QWORD PTR [eax]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR _dads1$89655[ebp]
	fld	QWORD PTR [eax]
	fmul	QWORD PTR _ss1$89643[ebp]
	fld	QWORD PTR [eax+edx]
	fmul	ST(0), ST(6)
	mov	eax, DWORD PTR [esi+1336]
	mov	eax, DWORD PTR [eax+ebx*4]
	lea	eax, DWORD PTR [eax+ecx*8]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR _dads2$89656[ebp]
	fmul	QWORD PTR tv1446[ebp]
	fdiv	ST(0), ST(2)
	fld	QWORD PTR tv1449[ebp]
	fmul	QWORD PTR _dads1$89655[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _dsqds1$89657[ebp]
	fld	QWORD PTR tv1446[ebp]
	fmul	QWORD PTR _ddefds2$89654[ebp]
	fdiv	ST(0), ST(2)
	fld	QWORD PTR tv1449[ebp]
	fmul	QWORD PTR _dads2$89656[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax]
	fld	QWORD PTR _dsqds1$89657[ebp]
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR [esi+1336]
	mov	eax, DWORD PTR [eax]
	fsubr	QWORD PTR [eax+ecx*8]
	lea	eax, DWORD PTR [eax+ecx*8]
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR [esi+1336]
	mov	eax, DWORD PTR [eax+edi*4]
	fld	QWORD PTR [eax+ecx*8]
	lea	eax, DWORD PTR [eax+ecx*8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR [esi+1336]
	mov	eax, DWORD PTR [eax]
	fsubr	QWORD PTR [eax+ecx*8]
	lea	eax, DWORD PTR [eax+ecx*8]
	fstp	QWORD PTR [eax]
	je	$LN65@star_sqgau@2

; 871  :           continue;
; 872  : 
; 873  :         /* record gradients for later */
; 874  :         if ( dadv )

	mov	eax, DWORD PTR _dadv$[ebp]
	test	eax, eax
	je	SHORT $LN69@star_sqgau@2

; 843  : 
; 844  :   /* now individual vertex gradients */
; 845  :   for ( k = 1 ; k < v_info->vcount ; k++ )

	mov	edx, DWORD PTR tv3969[ebp]
	lea	eax, DWORD PTR [eax+ebx*4]

; 856  :      for ( i = 0 ; i < SDIM ; i++ )

	mov	edx, DWORD PTR [edx+eax]

; 875  :         {
; 876  :           ddefdv[k][i] += ddefds1;

	fld	QWORD PTR [edx+ecx*8]
	mov	eax, DWORD PTR [eax]
	fadd	QWORD PTR _ddefds1$89653[ebp]
	lea	edx, DWORD PTR [edx+ecx*8]
	lea	eax, DWORD PTR [eax+ecx*8]
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR _ddefdv$[ebp]
	mov	edx, DWORD PTR [edx+edi*4]

; 877  :           ddefdv[kk][i] += ddefds2;

	fld	QWORD PTR [edx+ecx*8]
	lea	edx, DWORD PTR [edx+ecx*8]
	fadd	QWORD PTR _ddefds2$89654[ebp]
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR _dadv$[ebp]

; 878  :           dadv[k][i] += dads1;

	fld	QWORD PTR _dads1$89655[ebp]
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR [edx+edi*4]

; 879  :           dadv[kk][i] += dads2;

	fld	QWORD PTR [eax+ecx*8]
	lea	eax, DWORD PTR [eax+ecx*8]
	fadd	QWORD PTR _dads2$89656[ebp]
	fstp	QWORD PTR [eax]
$LN69@star_sqgau@2:

; 880  :         }
; 881  :         
; 882  :         /* add in pure second partial terms */
; 883  :         for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	$LN70@star_sqgau@2
	fld1
	mov	ebx, DWORD PTR _s2$89648[ebp]
	fdiv	ST(0), ST(5)
	sub	ebx, DWORD PTR _s1$89647[ebp]
	fst	QWORD PTR tv1527[ebp]
	fld	QWORD PTR tv1420[ebp]
	fdiv	QWORD PTR _ss1$89643[ebp]
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv1623[ebp]
	fld	QWORD PTR _ddefds1$89653[ebp]
	mov	DWORD PTR tv2583[ebp], ebx
	fdiv	ST(0), ST(7)
	fstp	QWORD PTR tv1634[ebp]
	fld	QWORD PTR tv1429[ebp]
	fdiv	ST(0), ST(5)
	fmulp	ST(1), ST(0)
	fstp	QWORD PTR tv1665[ebp]
	fld	QWORD PTR _ddefds2$89654[ebp]
	fdiv	ST(0), ST(6)
	fstp	QWORD PTR tv1649[ebp]
	jmp	SHORT $LN16@star_sqgau@2
$LN68@star_sqgau@2:
	fld	QWORD PTR _s1s2$89645[ebp]
	mov	ebx, DWORD PTR tv2583[ebp]
	fld	QWORD PTR __real@4018000000000000
	fld	QWORD PTR _ss2$89644[ebp]
	fld	QWORD PTR tv1527[ebp]
	fxch	ST(3)
	fxch	ST(4)
	fxch	ST(1)
	fxch	ST(3)
	fxch	ST(1)
	fxch	ST(2)
	fxch	ST(1)
$LN16@star_sqgau@2:
	mov	edx, DWORD PTR _s1$89647[ebp]

; 884  :         { REAL dddefds1ds1,dddefds1ds2,dddefds2ds1,dddefds2ds2;
; 885  :           REAL ddads1ds1,ddads1ds2,ddads2ds1,ddads2ds2;
; 886  :           REAL ddenomds1j,ddenomds2j;
; 887  :           REAL ddsqds1ds1,ddsqds1ds2,ddsqds2ds1,ddsqds2ds2;     
; 888  :   
; 889  :           /*     denom = sqrt(ss1*ss2 - s1s2*s1s2);   */
; 890  :           ddenomds1j = 1.0/denom*(s1[j]*ss2 - s1s2*s2[j]);

	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fmul	ST(0), ST(4)
	fld	QWORD PTR [ebx+edx]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _ddenomds1j$89673[ebp]

; 891  :           ddenomds2j = 1.0/denom*(s2[j]*ss1 - s1s2*s1[j]);

	fld	QWORD PTR [ebx+edx]

; 892  :   
; 893  :           ddads1ds1 = ((i==j ? 1:0)*ss2 - s2[j]*s2[i])/denom/6
; 894  :                    - (s1[i]*ss2 - s1s2*s2[i])/denom/6/denom*ddenomds1j;

	xor	ebx, ebx
	fmul	QWORD PTR _ss1$89643[ebp]
	cmp	ecx, eax
	fld	QWORD PTR [edx]
	sete	bl
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	mov	DWORD PTR tv4391[ebp], ebx
	mov	ebx, DWORD PTR _s2$89648[ebp]
	lea	ebx, DWORD PTR [ebx+ecx*8]
	fstp	QWORD PTR _ddenomds2j$89674[ebp]
	fild	DWORD PTR tv4391[ebp]
	fst	QWORD PTR tv1535[ebp]
	fmul	ST(0), ST(3)
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv2583[ebp]
	fmul	QWORD PTR [ebx+edx]
	mov	edx, DWORD PTR _s2$89648[ebp]
	mov	ebx, DWORD PTR tv3351[ebp]
	lea	edx, DWORD PTR [edx+ecx*8]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(1)
	fld	QWORD PTR [edx+ebx]
	fmul	ST(0), ST(4)
	fld	QWORD PTR [edx]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(6)
	fmul	QWORD PTR _ddenomds1j$89673[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _ddads1ds1$89669[ebp]

; 895  : 
; 896  :           ddads1ds2 = (s1[i]*2*s2[j] - s1[j]*s2[i] - s1s2*(i==j?1.0:0.))/denom/6
; 897  :                    - (s1[i]*ss2 - s1s2*s2[i])/denom/6/denom*ddenomds2j;

	cmp	ecx, eax
	jne	SHORT $LN37@star_sqgau@2
	fld1
	jmp	SHORT $LN38@star_sqgau@2
$LN37@star_sqgau@2:
	fldz
$LN38@star_sqgau@2:
	fld	QWORD PTR [edx+ebx]
	mov	edx, DWORD PTR _s1$89647[ebp]
	fadd	ST(0), ST(0)
	lea	ebx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR tv2583[ebp]
	fmul	QWORD PTR [edx+ebx]
	mov	edx, DWORD PTR _s2$89648[ebp]
	fld	QWORD PTR [edx+ecx*8]
	lea	edx, DWORD PTR [edx+ecx*8]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv3351[ebp]
	fsubp	ST(1), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(5)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(1)
	fld	QWORD PTR [edx+ebx]
	fmul	ST(0), ST(4)
	fld	QWORD PTR [edx]

; 898  :   
; 899  :           ddads2ds1 = (s2[i]*2*s1[j] - s2[j]*s1[i] - s1s2*(i==j?1:0))/denom/6
; 900  :                    - (s2[i]*ss1 - s1s2*s1[i])/denom/6/denom*ddenomds1j;

	mov	ebx, DWORD PTR tv2583[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(6)
	fmul	QWORD PTR _ddenomds2j$89674[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _ddads1ds2$89670[ebp]
	fld	QWORD PTR [edx]
	fmul	QWORD PTR _ss1$89643[ebp]
	fst	QWORD PTR tv1595[ebp]
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR _s1$89647[ebp]
	fadd	ST(0), ST(0)
	lea	edx, DWORD PTR [edx+eax*8]
	fmul	QWORD PTR [edx]
	fld	QWORD PTR [ebx+edx]
	mov	edx, DWORD PTR _s2$89648[ebp]
	mov	ebx, DWORD PTR tv3351[ebp]
	lea	edx, DWORD PTR [edx+ecx*8]
	fmul	QWORD PTR [edx+ebx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv1535[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(2)
	fld	QWORD PTR [edx+ebx]
	fmul	ST(0), ST(6)
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(6)
	fmul	QWORD PTR _ddenomds1j$89673[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _ddads2ds1$89671[ebp]

; 901  :   
; 902  :           ddads2ds2 = ((i==j?1.0:0.0)*ss1 - s1[j]*s1[i])/denom/6
; 903  :                    - (s2[i]*ss1 - s1s2*s1[i])/denom/6/denom*ddenomds2j;

	cmp	ecx, eax
	jne	SHORT $LN39@star_sqgau@2
	fld1
	jmp	SHORT $LN40@star_sqgau@2
$LN39@star_sqgau@2:
	fldz
$LN40@star_sqgau@2:
	fld	QWORD PTR _ss1$89643[ebp]
	mov	ebx, DWORD PTR _s1$89647[ebp]
	fmul	ST(1), ST(0)
	lea	ebx, DWORD PTR [ebx+eax*8]
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv3351[ebp]
	fmul	QWORD PTR [edx+ebx]
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(2)
	fld	QWORD PTR [edx+ebx]
	fmulp	ST(6), ST(0)
	fld	QWORD PTR tv1595[ebp]
	fsubrp	ST(6), ST(0)
	fxch	ST(5)
	fdiv	ST(0), ST(6)
	fdivrp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(5)
	fmul	QWORD PTR _ddenomds2j$89674[ebp]
	fsubp	ST(4), ST(0)
	fxch	ST(3)
	fstp	QWORD PTR _ddads2ds2$89672[ebp]

; 904  :   
; 905  :           dddefds1ds1 = (-s2[j]/ss1*s1[i] + s1s2/ss1/ss1*2*s1[j]*s1[i]
; 906  :                    - (i==j ? s1s2/ss1 : 0))/denom - ddefds1/denom*ddenomds1j; 

	cmp	ecx, eax
	jne	SHORT $LN41@star_sqgau@2
	fld	QWORD PTR tv1420[ebp]
	jmp	SHORT $LN42@star_sqgau@2
$LN41@star_sqgau@2:
	fldz
$LN42@star_sqgau@2:
	mov	ebx, DWORD PTR _s1$89647[ebp]
	fld	QWORD PTR tv1623[ebp]
	fmul	QWORD PTR [ebx+eax*8]
	lea	ebx, DWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR tv3351[ebp]
	fmul	QWORD PTR [edx+ebx]
	mov	edx, DWORD PTR _s1$89647[ebp]
	mov	ebx, DWORD PTR tv2583[ebp]
	lea	edx, DWORD PTR [edx+eax*8]
	fld	QWORD PTR [ebx+edx]
	mov	edx, DWORD PTR _s2$89648[ebp]
	fdiv	ST(0), ST(5)
	mov	ebx, DWORD PTR tv3351[ebp]
	lea	edx, DWORD PTR [edx+ecx*8]
	fmul	QWORD PTR [edx+ebx]
	fsubp	ST(1), ST(0)
	fsubrp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fld	QWORD PTR tv1634[ebp]
	fld	QWORD PTR _ddenomds1j$89673[ebp]
	fmul	ST(0), ST(1)
	fsubp	ST(2), ST(0)

; 907  :   
; 908  :           dddefds1ds2 = ((i==j ? 1.0 : 0.0) - s1[j]/ss1*s1[i])/denom
; 909  :                    - ddefds1/denom*ddenomds2j;

	cmp	ecx, eax
	jne	SHORT $LN43@star_sqgau@2
	fld1
	jmp	SHORT $LN44@star_sqgau@2
$LN43@star_sqgau@2:
	fldz
$LN44@star_sqgau@2:
	mov	ebx, DWORD PTR _s1$89647[ebp]
	fld	QWORD PTR [ebx+eax*8]
	lea	ebx, DWORD PTR [ebx+eax*8]
	fdivrp	ST(6), ST(0)
	mov	ebx, DWORD PTR tv3351[ebp]
	fxch	ST(5)
	fmul	QWORD PTR [edx+ebx]
	fsubp	ST(5), ST(0)
	fxch	ST(4)
	fdiv	ST(0), ST(5)
	fxch	ST(4)
	fmul	QWORD PTR _ddenomds2j$89674[ebp]
	fsubp	ST(4), ST(0)

; 910  :   
; 911  :           dddefds2ds1 = ((i==j ? 1.0 : 0.0) - s2[j]/ss2*s2[i])/denom
; 912  :                    - ddefds2/denom*ddenomds1j;

	cmp	ecx, eax
	jne	SHORT $LN45@star_sqgau@2
	fld1
	jmp	SHORT $LN46@star_sqgau@2
$LN45@star_sqgau@2:
	fldz
$LN46@star_sqgau@2:
	mov	edx, DWORD PTR _s1$89647[ebp]
	lea	ebx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR tv2583[ebp]
	fld	QWORD PTR [edx+ebx]
	mov	edx, DWORD PTR _s2$89648[ebp]
	fdiv	ST(0), ST(4)
	lea	edx, DWORD PTR [edx+ecx*8]
	fmul	QWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(5)
	fld	QWORD PTR tv1649[ebp]
	fmul	QWORD PTR _ddenomds1j$89673[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _dddefds2ds1$89667[ebp]

; 913  :   
; 914  :           dddefds2ds2 = (-s1[j]/ss2*s2[i] + s1s2/ss2/ss2*2*s2[j]*s2[i]
; 915  :                    - (i==j ? s1s2/ss2 : 0))/denom - ddefds2/denom*ddenomds2j;

	cmp	ecx, eax
	jne	SHORT $LN47@star_sqgau@2
	fld	QWORD PTR tv1429[ebp]
	jmp	SHORT $LN171@star_sqgau@2
$LN47@star_sqgau@2:
	fldz
$LN171@star_sqgau@2:
	fstp	QWORD PTR tv599[ebp]
	mov	edx, DWORD PTR tv2583[ebp]

; 916  :   
; 917  :           ddsqds1ds1 = 2*deficit*dddefds1ds1/area                                        
; 918  :                      - deficit*deficit/area/area*ddads1ds1;

	fld	QWORD PTR tv1446[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(2)
	fld	QWORD PTR tv1449[ebp]
	fld	QWORD PTR _ddads1ds1$89669[ebp]
	fmul	ST(0), ST(1)
	fsubp	ST(2), ST(0)

; 919  :   
; 920  :           ddsqds1ds2 = 2*deficit*dddefds1ds2/area                    
; 921  :                      - deficit*deficit/area/area*ddads1ds2;

	fld	ST(2)
	fmulp	ST(6), ST(0)
	fxch	ST(5)
	fdiv	ST(0), ST(3)
	fld	ST(5)
	fmul	QWORD PTR _ddads1ds2$89670[ebp]
	fsubp	ST(1), ST(0)

; 922  :   
; 923  :           ddsqds2ds1 = 2*deficit*dddefds2ds1/area 
; 924  :                      - deficit*deficit/area/area*ddads2ds1;

	fxch	ST(2)
	fmul	QWORD PTR _dddefds2ds1$89667[ebp]
	fdiv	ST(0), ST(3)
	fxch	ST(5)
	fmul	QWORD PTR _ddads2ds1$89671[ebp]
	fsubp	ST(5), ST(0)
	fld	QWORD PTR tv1665[ebp]
	fmul	QWORD PTR [edx+ebx]
	mov	edx, DWORD PTR _s2$89648[ebp]
	lea	edx, DWORD PTR [edx+ecx*8]
	fmul	QWORD PTR [edx]
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR _k$[ebp]
	fdivrp	ST(5), ST(0)
	fxch	ST(4)
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR [edx+ebx*4]
	fsubp	ST(4), ST(0)
	mov	edx, DWORD PTR [edx+ecx*4]
	fxch	ST(3)
	lea	edx, DWORD PTR [edx+eax*8]
	fsub	QWORD PTR tv599[ebp]
	fdiv	ST(0), ST(5)
	fld	QWORD PTR tv1649[ebp]
	fmul	QWORD PTR _ddenomds2j$89674[ebp]
	fsubp	ST(1), ST(0)

; 925  :   
; 926  :           ddsqds2ds2 = 2*deficit*dddefds2ds2/area 
; 927  :                      - deficit*deficit/area/area*ddads2ds2;

	fmul	QWORD PTR tv1446[ebp]
	fdiv	ST(0), ST(2)
	fld	QWORD PTR tv1449[ebp]
	fmul	QWORD PTR _ddads2ds2$89672[ebp]
	fsubp	ST(1), ST(0)

; 928  :    
; 929  :           v_info->hess[k][k][i][j] += ddsqds1ds1;

	fld	ST(3)
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]

; 930  :           v_info->hess[0][k][i][j] -= ddsqds1ds1;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fsub	ST(0), ST(4)
	fstp	QWORD PTR [edx]

; 931  :           v_info->hess[k][0][i][j] -= ddsqds1ds1;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fsub	ST(0), ST(4)
	fstp	QWORD PTR [edx]

; 932  :           v_info->hess[0][0][i][j] += ddsqds1ds1;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	faddp	ST(4), ST(0)
	fxch	ST(3)
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx+ebx*4]

; 880  :         }
; 881  :         
; 882  :         /* add in pure second partial terms */
; 883  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx+ecx*4]

; 933  :   
; 934  :           v_info->hess[k][kk][i][j] += ddsqds1ds2;

	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 935  :           v_info->hess[0][kk][i][j] -= ddsqds1ds2;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 936  :           v_info->hess[k][0][i][j] -= ddsqds1ds2;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 937  :           v_info->hess[0][0][i][j] += ddsqds1ds2;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ecx*4]
	fadd	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR [edx+ecx*4]

; 938  :   
; 939  :           v_info->hess[kk][k][i][j] += ddsqds2ds1;

	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fadd	ST(0), ST(3)
	fstp	QWORD PTR [edx]

; 940  :           v_info->hess[0][k][i][j] -= ddsqds2ds1;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fsub	ST(0), ST(3)
	fstp	QWORD PTR [edx]

; 941  :           v_info->hess[kk][0][i][j] -= ddsqds2ds1;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fsub	ST(0), ST(3)
	fstp	QWORD PTR [edx]

; 942  :           v_info->hess[0][0][i][j] += ddsqds2ds1;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx+ecx*4]

; 943  :   
; 944  :           v_info->hess[kk][kk][i][j] += ddsqds2ds2;

	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 945  :           v_info->hess[0][kk][i][j] -= ddsqds2ds2;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 946  :           v_info->hess[kk][0][i][j] -= ddsqds2ds2;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 947  :           v_info->hess[0][0][i][j] += ddsqds2ds2;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ecx*4]
	fadd	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	inc	eax
	fstp	QWORD PTR [edx]
	cmp	eax, DWORD PTR _web+616
	jl	$LN68@star_sqgau@2

; 880  :         }
; 881  :         
; 882  :         /* add in pure second partial terms */
; 883  :         for ( j = 0 ; j < SDIM ; j++ )

	fld	QWORD PTR _deficit$[ebp]
	mov	edx, DWORD PTR tv3351[ebp]
	fld	QWORD PTR _s1s2$89645[ebp]
	fld	QWORD PTR __real@4018000000000000
	fld	QWORD PTR __real@4000000000000000
	fld	QWORD PTR _ss2$89644[ebp]
	jmp	SHORT $LN20@star_sqgau@2
$LN70@star_sqgau@2:
	mov	edx, DWORD PTR tv3351[ebp]
$LN65@star_sqgau@2:
	fld	QWORD PTR _deficit$[ebp]
	fld	QWORD PTR __real@4000000000000000
	fxch	ST(3)
	fxch	ST(5)
	fxch	ST(1)
	fxch	ST(4)
	fxch	ST(1)
	fxch	ST(3)
	fxch	ST(1)
$LN20@star_sqgau@2:

; 856  :      for ( i = 0 ; i < SDIM ; i++ )

	inc	ecx
	cmp	ecx, DWORD PTR _web+616
	jl	$LN162@star_sqgau@2
	fstp	ST(6)
	fstp	ST(2)
	fstp	ST(0)
	fstp	ST(3)
	jmp	SHORT $LN23@star_sqgau@2
$LN119@star_sqgau@2:
	fstp	ST(0)
	fld	QWORD PTR __real@4000000000000000
	fld	QWORD PTR _area$[ebp]
	fld	QWORD PTR _deficit$[ebp]
$LN23@star_sqgau@2:

; 843  : 
; 844  :   /* now individual vertex gradients */
; 845  :   for ( k = 1 ; k < v_info->vcount ; k++ )

	mov	eax, DWORD PTR [esi+12]
	inc	ebx
	mov	DWORD PTR _k$[ebp], ebx
	cmp	ebx, eax
	jl	$LL166@star_sqgau@2

; 856  :      for ( i = 0 ; i < SDIM ; i++ )

	fxch	ST(2)
$LN66@star_sqgau@2:

; 948  :   
; 949  :         }
; 950  :      }
; 951  :   }
; 952  : 
; 953  :   if ( mode == METHOD_HESSIAN )

	cmp	DWORD PTR _mode$[ebp], 8763		; 0000223bH
	jne	$LN95@star_sqgau@2

; 954  :   { /* add in product of gradient terms */
; 955  :     for ( k = 1 ; k < v_info->vcount ; k++ )

	mov	eax, DWORD PTR [esi+12]
	mov	edi, 1
	mov	DWORD PTR _k$[ebp], edi
	cmp	eax, edi
	jle	$LN112@star_sqgau@2
$LN12@star_sqgau@2:

; 956  :       for ( kk = 1 ; kk < v_info->vcount ; kk++ )

	mov	edx, 1
	mov	DWORD PTR _kk$[ebp], edx
	cmp	eax, edx
	jle	$LN11@star_sqgau@2
	mov	eax, DWORD PTR _ddefdv$[ebp]
	mov	ecx, DWORD PTR _dadv$[ebp]
	sub	eax, ecx
	mov	DWORD PTR tv3969[ebp], eax
$LN9@star_sqgau@2:

; 957  :         for ( i = 0 ; i < SDIM ; i++ )

	xor	ebx, ebx
	cmp	DWORD PTR _web+616, ebx
	jle	$LN8@star_sqgau@2
$LN6@star_sqgau@2:

; 958  :           for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	$LN5@star_sqgau@2
	fld	ST(0)
	lea	edx, DWORD PTR [ecx+edx*4]
	fdiv	ST(0), ST(2)
	lea	ecx, DWORD PTR [ecx+edi*4]
	mov	edi, DWORD PTR tv3969[ebp]
	mov	edi, DWORD PTR [edi+ecx]
	mov	ecx, DWORD PTR [ecx]
	lea	edi, DWORD PTR [edi+ebx*8]
	lea	ecx, DWORD PTR [ecx+ebx*8]
	mov	DWORD PTR tv4571[ebp], edi
	mov	edi, DWORD PTR tv3969[ebp]
	mov	DWORD PTR tv1897[ebp], ecx
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edi+edx]
	mov	DWORD PTR tv1908[ebp], ecx
	sub	edx, ecx
	fld	ST(3)
	fmul	ST(0), ST(2)
	fld	ST(0)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fxch	ST(1)
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	jmp	SHORT $LN3@star_sqgau@2
$LN73@star_sqgau@2:
	mov	ecx, DWORD PTR tv1908[ebp]
$LN3@star_sqgau@2:

; 959  :           { REAL term;
; 960  :             term = 2/area*ddefdv[k][i]*ddefdv[kk][j]
; 961  :                  - 2*deficit/area/area*dadv[k][i]*ddefdv[kk][j]
; 962  :                  - 2*deficit/area/area*ddefdv[k][i]*dadv[kk][j]
; 963  :                  + 2*deficit*deficit/area/area/area*dadv[k][i]*dadv[kk][j];

	mov	edi, DWORD PTR tv4571[ebp]
	fld	ST(2)
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR tv1897[ebp]
	lea	ecx, DWORD PTR [ecx+eax*8]
	fmul	QWORD PTR [ecx+edx]
	fld	ST(2)
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR tv4571[ebp]
	fmul	QWORD PTR [ecx+edx]
	fsubp	ST(1), ST(0)
	fld	ST(2)
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR tv1897[ebp]
	fmul	QWORD PTR [ecx]
	fsubp	ST(1), ST(0)
	fld	ST(1)
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR _k$[ebp]
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR [esi+1340]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	edi, DWORD PTR _kk$[ebp]
	mov	ecx, DWORD PTR [ecx+edi*4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR [ecx+ebx*4]
	lea	ecx, DWORD PTR [ecx+eax*8]

; 964  : 
; 965  :             v_info->hess[k][kk][i][j] += term;

	fld	ST(0)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]

; 966  :             v_info->hess[0][kk][i][j] -= term;

	mov	ecx, DWORD PTR [esi+1340]
	mov	ecx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	ecx, DWORD PTR [ecx+ebx*4]
	fld	QWORD PTR [ecx+eax*8]

; 967  :             v_info->hess[k][0][i][j] -= term;

	mov	edi, DWORD PTR _k$[ebp]
	lea	ecx, DWORD PTR [ecx+eax*8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR [esi+1340]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	ecx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+ebx*4]
	fld	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [ecx]

; 968  :             v_info->hess[0][0][i][j] += term;

	mov	ecx, DWORD PTR [esi+1340]
	mov	ecx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+ebx*4]
	fadd	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	$LN73@star_sqgau@2

; 958  :           for ( j = 0 ; j < SDIM ; j++ )

	mov	edx, DWORD PTR _kk$[ebp]
	fstp	ST(1)
	mov	ecx, DWORD PTR _dadv$[ebp]
	fstp	ST(1)
	fstp	ST(0)
$LN5@star_sqgau@2:

; 957  :         for ( i = 0 ; i < SDIM ; i++ )

	inc	ebx
	cmp	ebx, DWORD PTR _web+616
	jl	$LN6@star_sqgau@2
$LN8@star_sqgau@2:

; 956  :       for ( kk = 1 ; kk < v_info->vcount ; kk++ )

	inc	edx
	mov	DWORD PTR _kk$[ebp], edx
	cmp	edx, DWORD PTR [esi+12]
	jl	$LN9@star_sqgau@2
$LN11@star_sqgau@2:

; 954  :   { /* add in product of gradient terms */
; 955  :     for ( k = 1 ; k < v_info->vcount ; k++ )

	mov	eax, DWORD PTR [esi+12]
	inc	edi
	mov	DWORD PTR _k$[ebp], edi
	cmp	edi, eax
	jl	$LN12@star_sqgau@2
$LN112@star_sqgau@2:

; 969  :          }
; 970  :     free_temp_matrix(dadv);

	mov	edx, DWORD PTR _dadv$[ebp]
	fstp	ST(1)
	fstp	ST(1)
	push	edx
	fstp	ST(0)
	call	_free_temp_matrix

; 971  :     free_temp_matrix(ddefdv);

	mov	eax, DWORD PTR _ddefdv$[ebp]
	push	eax
	call	_free_temp_matrix
	fld	QWORD PTR _area$[ebp]
	fld	QWORD PTR _deficit$[ebp]
	add	esp, 8
	fxch	ST(1)
$LN13@star_sqgau@2:

; 972  :   }
; 973  :    
; 974  :   return deficit*deficit/area;

	fld	ST(1)
	pop	ebx
	fmulp	ST(2), ST(0)
	pop	edi
	pop	esi
	fdivp	ST(1), ST(0)

; 975  : 
; 976  : } // end star_sqgauss_method_all()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN95@star_sqgau@2:

; 971  :     free_temp_matrix(ddefdv);

	fstp	ST(0)
	pop	ebx

; 972  :   }
; 973  :    
; 974  :   return deficit*deficit/area;

	fld	ST(1)
	pop	edi
	fmulp	ST(2), ST(0)
	pop	esi
	fdivp	ST(1), ST(0)

; 975  : 
; 976  : } // end star_sqgauss_method_all()

	mov	esp, ebp
	pop	ebp
	ret	0
_star_sqgauss_method_all ENDP
_TEXT	ENDS
PUBLIC	_star_sqgauss_method_value
; Function compile flags: /Ogtp
;	COMDAT _star_sqgauss_method_value
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_star_sqgauss_method_value PROC				; COMDAT

; 984  : { return star_sqgauss_method_all(v_info,METHOD_VALUE);

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v_info$[ebp]
	push	1767					; 000006e7H
	push	eax
	call	_star_sqgauss_method_all
	add	esp, 8

; 985  : }

	pop	ebp
	ret	0
_star_sqgauss_method_value ENDP
_TEXT	ENDS
PUBLIC	_star_sqgauss_method_grad
; Function compile flags: /Ogtp
;	COMDAT _star_sqgauss_method_grad
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_star_sqgauss_method_grad PROC				; COMDAT

; 988  : { return star_sqgauss_method_all(v_info,METHOD_GRADIENT);

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v_info$[ebp]
	push	4321					; 000010e1H
	push	eax
	call	_star_sqgauss_method_all
	add	esp, 8

; 989  : }

	pop	ebp
	ret	0
_star_sqgauss_method_grad ENDP
_TEXT	ENDS
PUBLIC	_star_sqgauss_method_hess
; Function compile flags: /Ogtp
;	COMDAT _star_sqgauss_method_hess
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_star_sqgauss_method_hess PROC				; COMDAT

; 992  : { return star_sqgauss_method_all(v_info,METHOD_HESSIAN);

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v_info$[ebp]
	push	8763					; 0000223bH
	push	eax
	call	_star_sqgauss_method_all
	add	esp, 8

; 993  : }

	pop	ebp
	ret	0
_star_sqgauss_method_hess ENDP
_TEXT	ENDS
PUBLIC	??_C@_08JICDBDEJ@levine_c?$AA@			; `string'
PUBLIC	??_C@_08JNKAJHNP@levine_t?$AA@			; `string'
PUBLIC	??_C@_08KKBFHBML@levine_a?$AA@			; `string'
PUBLIC	_levine_energy_init
EXTRN	_lookup_global:PROC
;	COMDAT ??_C@_08JICDBDEJ@levine_c?$AA@
CONST	SEGMENT
??_C@_08JICDBDEJ@levine_c?$AA@ DB 'levine_c', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JNKAJHNP@levine_t?$AA@
CONST	SEGMENT
??_C@_08JNKAJHNP@levine_t?$AA@ DB 'levine_t', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KKBFHBML@levine_a?$AA@
CONST	SEGMENT
??_C@_08KKBFHBML@levine_a?$AA@ DB 'levine_a', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _levine_energy_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_meth$ = 12						; size = 4
_levine_energy_init PROC				; COMDAT

; 1024 : 
; 1025 :   /* find the two variables */
; 1026 : 
; 1027 :   k = lookup_global("levine_a");

	push	OFFSET ??_C@_08KKBFHBML@levine_a?$AA@
	call	_lookup_global
	add	esp, 4

; 1028 :   if ( k >= 0 )

	test	eax, eax
	js	SHORT $LN6@levine_ene

; 1029 :       levine_a = globals(k)->value.real;

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN9@levine_ene
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN11@levine_ene
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+64]
	jmp	SHORT $LN27@levine_ene
$LN11@levine_ene:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN9@levine_ene
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [eax+64]
	jmp	SHORT $LN27@levine_ene
$LN9@levine_ene:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
	fld	QWORD PTR [eax+64]
	jmp	SHORT $LN27@levine_ene
$LN6@levine_ene:

; 1030 :   else levine_a = 1.0;

	fld1
$LN27@levine_ene:

; 1031 : 
; 1032 :   k = lookup_global("levine_t");

	push	OFFSET ??_C@_08JNKAJHNP@levine_t?$AA@
	fstp	QWORD PTR _levine_a
	call	_lookup_global
	add	esp, 4

; 1033 :   if ( k >= 0 )

	test	eax, eax
	js	SHORT $LN4@levine_ene

; 1034 :       levine_t = globals(k)->value.real;

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN15@levine_ene
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN17@levine_ene
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+64]
	jmp	SHORT $LN28@levine_ene
$LN17@levine_ene:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN15@levine_ene
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [eax+64]
	jmp	SHORT $LN28@levine_ene
$LN15@levine_ene:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
	fld	QWORD PTR [eax+64]
	jmp	SHORT $LN28@levine_ene
$LN4@levine_ene:

; 1035 :   else levine_t = 1.0;

	fld1
$LN28@levine_ene:

; 1036 : 
; 1037 :   k = lookup_global("levine_c");  /* coeff of log part, for test */

	push	OFFSET ??_C@_08JICDBDEJ@levine_c?$AA@
	fstp	QWORD PTR _levine_t
	call	_lookup_global
	add	esp, 4

; 1038 :   if ( k >= 0 )

	test	eax, eax
	js	SHORT $LN2@levine_ene

; 1039 :       levine_c = globals(k)->value.real;

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN21@levine_ene
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN23@levine_ene
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+64]

; 1040 :   else levine_c = 1.0;

	fstp	QWORD PTR _levine_c

; 1041 : } // levine_energy_init()

	ret	0
$LN23@levine_ene:

; 1039 :       levine_c = globals(k)->value.real;

	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN21@levine_ene
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [eax+64]

; 1040 :   else levine_c = 1.0;

	fstp	QWORD PTR _levine_c

; 1041 : } // levine_energy_init()

	ret	0
$LN21@levine_ene:

; 1039 :       levine_c = globals(k)->value.real;

	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
	fld	QWORD PTR [eax+64]

; 1040 :   else levine_c = 1.0;

	fstp	QWORD PTR _levine_c

; 1041 : } // levine_energy_init()

	ret	0
$LN2@levine_ene:

; 1040 :   else levine_c = 1.0;

	fld1
	fstp	QWORD PTR _levine_c

; 1041 : } // levine_energy_init()

	ret	0
_levine_energy_init ENDP
_TEXT	ENDS
PUBLIC	__real@c000000000000000
PUBLIC	__real@bfe0000000000000
PUBLIC	__real@4010000000000000
PUBLIC	??_C@_0BJ@PHLPKNON@Levine?5energy?5infinite?4?6?$AA@ ; `string'
PUBLIC	__real@7e37e43c8800759c
PUBLIC	__real@fe37e43c8800759c
PUBLIC	__real@3eb0c6f7a0b5ed8d
PUBLIC	__real@3fc0000000000000
PUBLIC	_v_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_levine_energy_all
EXTRN	_kb_dmatrix3:PROC
EXTRN	_cross_prod:PROC
EXTRN	_kb_dmatrix:PROC
EXTRN	_kb_calloc:PROC
EXTRN	_mat3d_setup:PROC
EXTRN	_mat2d_setup:PROC
EXTRN	__chkstk:PROC
EXTRN	__CIlog:PROC
;	COMDAT __real@c000000000000000
CONST	SEGMENT
__real@c000000000000000 DQ 0c000000000000000r	; -2
CONST	ENDS
;	COMDAT __real@bfe0000000000000
CONST	SEGMENT
__real@bfe0000000000000 DQ 0bfe0000000000000r	; -0.5
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT ??_C@_0BJ@PHLPKNON@Levine?5energy?5infinite?4?6?$AA@
CONST	SEGMENT
??_C@_0BJ@PHLPKNON@Levine?5energy?5infinite?4?6?$AA@ DB 'Levine energy in'
	DB	'finite.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT __real@7e37e43c8800759c
CONST	SEGMENT
__real@7e37e43c8800759c DQ 07e37e43c8800759cr	; 1e+300
CONST	ENDS
;	COMDAT __real@fe37e43c8800759c
CONST	SEGMENT
__real@fe37e43c8800759c DQ 0fe37e43c8800759cr	; -1e+300
CONST	ENDS
;	COMDAT __real@3eb0c6f7a0b5ed8d
CONST	SEGMENT
__real@3eb0c6f7a0b5ed8d DQ 03eb0c6f7a0b5ed8dr	; 1e-006
CONST	ENDS
;	COMDAT __real@3fc0000000000000
CONST	SEGMENT
__real@3fc0000000000000 DQ 03fc0000000000000r	; 0.125
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _levine_energy_all
_TEXT	SEGMENT
_ddss11qXvS$ = -59572					; size = 4480
_ds1qXvS$ = -55092					; size = 480
_kappa1$ = -54612					; size = 8
_kappa2$ = -54604					; size = 8
_coeff$ = -54596					; size = 8
tv6215 = -54588						; size = 4
tv6240 = -54584						; size = 4
tv6210 = -54580						; size = 4
tv2840 = -54576						; size = 8
tv8930 = -54572						; size = 4
tv6225 = -54568						; size = 4
tv6230 = -54564						; size = 4
tv6184 = -54560						; size = 4
tv6322 = -54556						; size = 4
tv6176 = -54552						; size = 4
tv6220 = -54548						; size = 4
tv6235 = -54544						; size = 4
tv6181 = -54540						; size = 4
tv2835 = -54536						; size = 8
tv6199 = -54532						; size = 4
tv6190 = -54528						; size = 4
_hh0$ = -54524						; size = 8
_ss1$89796 = -54524					; size = 8
tv8612 = -54516						; size = 8
_fn$ = -54516						; size = 8
tv3437 = -54508						; size = 8
tv2781 = -54508						; size = 8
tv2769 = -54508						; size = 8
tv2614 = -54500						; size = 8
tv7921 = -54496						; size = 4
tv6202 = -54496						; size = 4
tv8907 = -54492						; size = 4
_dnndv1$ = -54492					; size = 4
tv6306 = -54488						; size = 4
_dnndv2$ = -54488					; size = 4
_area$ = -54484						; size = 8
tv2602 = -54476						; size = 8
_energy$ = -54476					; size = 8
_ff$ = -54476						; size = 8
_ss2$89797 = -54476					; size = 8
tv2858 = -54468						; size = 8
_s1s2$89840 = -54468					; size = 8
tv7917 = -54464						; size = 4
tv6248 = -54464						; size = 4
_root$ = -54460						; size = 8
_gc$ = -54460						; size = 8
_s1s2$89798 = -54460					; size = 8
tv6318 = -54452						; size = 4
tv4345 = -54452						; size = 4
tv3423 = -54448						; size = 8
_ss1$89838 = -54448					; size = 8
tv7913 = -54444						; size = 4
tv6263 = -54444						; size = 4
tv7848 = -54440						; size = 4
_dffdv2$ = -54440					; size = 4
tv6278 = -54436						; size = 4
_dAdv1$ = -54436					; size = 4
tv7852 = -54432						; size = 4
_dffdv1$ = -54432					; size = 4
tv6193 = -54428						; size = 4
_s2s2$ = -54428						; size = 4
tv7876 = -54424						; size = 4
_dfndv1$ = -54424					; size = 4
tv6196 = -54420						; size = 4
_s1s2$ = -54420						; size = 4
tv8919 = -54416						; size = 4
tv8576 = -54416						; size = 4
tv8893 = -54412						; size = 4
_ds2$ = -54412						; size = 4
tv8898 = -54408						; size = 4
_dAdv2$ = -54408					; size = 4
tv7844 = -54404						; size = 4
tv2569 = -54404						; size = 4
_dfndv2$ = -54404					; size = 4
tv7886 = -54400						; size = 4
tv6254 = -54400						; size = 4
tv4319 = -54400						; size = 4
tv7791 = -54396						; size = 4
tv6326 = -54396						; size = 4
tv4348 = -54396						; size = 4
tv6205 = -54392						; size = 4
tv4194 = -54392						; size = 4
_ddss22$ = -54392					; size = 4
_i$ = -54392						; size = 4
tv3416 = -54388						; size = 8
_ss2$89839 = -54388					; size = 8
_deficit$ = -54388					; size = 8
tv7925 = -54384						; size = 4
tv7872 = -54384						; size = 4
tv6272 = -54384						; size = 4
tv7770 = -54380						; size = 4
tv4342 = -54380						; size = 4
_dvnorm1$ = -54380					; size = 4
_j$ = -54380						; size = 4
tv6876 = -54376						; size = 4
_s$ = -54376						; size = 4
tv7774 = -54372						; size = 4
_pairs$ = -54372					; size = 4
tv7684 = -54368						; size = 4
tv3841 = -54368						; size = 4
tv7901 = -54364						; size = 4
tv6266 = -54364						; size = 4
tv4337 = -54364						; size = 4
tv7889 = -54360						; size = 4
tv6245 = -54360						; size = 4
_a$ = -54360						; size = 4
tv7879 = -54356						; size = 4
tv6251 = -54356						; size = 4
_s1s1$ = -54356						; size = 4
tv8594 = -54352						; size = 4
tv6314 = -54352						; size = 4
tv4866 = -54352						; size = 4
_dvnorm2$ = -54352					; size = 4
tv8912 = -54348						; size = 4
tv8609 = -54348						; size = 4
tv4864 = -54348						; size = 4
_ddAdv2dv1$ = -54348					; size = 4
tv7881 = -54344						; size = 4
tv4771 = -54344						; size = 4
tv4314 = -54344						; size = 4
tv958 = -54344						; size = 4
_dfdv2$ = -54344					; size = 4
tv7909 = -54340						; size = 4
tv6292 = -54340						; size = 4
_ds1$ = -54340						; size = 4
_v_info$GSCopy$ = -54336				; size = 4
tv7905 = -54332						; size = 4
tv5997 = -54332						; size = 4
_s1$ = -54332						; size = 4
tv7884 = -54328						; size = 4
tv7372 = -54328						; size = 4
tv5696 = -54328						; size = 4
tv4323 = -54328						; size = 4
tv4450 = -54324						; size = 4
_s2$ = -54324						; size = 4
tv6888 = -54320						; size = 4
tv6257 = -54320						; size = 4
tv4200 = -54320						; size = 4
_s2$89843 = -54320					; size = 4
tv6310 = -54316						; size = 4
tv4868 = -54316						; size = 4
tv4863 = -54316						; size = 4
tv2275 = -54316						; size = 4
tv1990 = -54316						; size = 4
_ddAdv1dv1$ = -54316					; size = 4
tv7682 = -54312						; size = 4
tv6187 = -54312						; size = 4
tv4330 = -54312						; size = 4
_k$ = -54312						; size = 4
_ds1xJ$ = -54308					; size = 5760
_ddss11xJ$ = -48548					; size = 46080
_aa$ = -2468						; size = 400
_darea$ = -2068						; size = 480
_dgc$ = -1588						; size = 480
_ddef$ = -1108						; size = 480
_dhh0$ = -628						; size = 480
_temp$ = -148						; size = 48
_dAdv$ = -100						; size = 48
_vnorm$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_v_info$ = 8						; size = 4
_mode$ = 12						; size = 4
_levine_energy_all PROC					; COMDAT

; 1053 : { REAL deficit = 2*M_PI;

	push	ebp
	mov	ebp, esp
	mov	eax, 59572				; 0000e8b4H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	fld	QWORD PTR __real@401921fb54442d18
	push	esi
	fstp	QWORD PTR _deficit$[ebp]
	push	edi

; 1054 :   REAL area = 0.0;

	fldz
	mov	edi, DWORD PTR _v_info$[ebp]
	fstp	QWORD PTR _area$[ebp]

; 1055 :   REAL coeff = levine_c*levine_t/levine_a;
; 1056 :   int variety; /* PLAIN_SQ, EFF_SQ, NORMAL_SQ */
; 1057 :   int pairs;
; 1058 :   int i,j,k;
; 1059 :   REAL energy,ff,fn,g;
; 1060 :   REAL dAdv[MAXCOORD], *a, *d, *s1s1, *s1s2, *s2s2;
; 1061 :   REAL vnorm[MAXCOORD];
; 1062 :   REAL **dAdv1,**dAdv2,***dvnorm1,***dvnorm2,**ds2;
; 1063 :   REAL ***ddAdv1dv1,***ddAdv2dv1,***ddAdv1dv2,***ddAdv2dv2;
; 1064 :   REAL ***ddss12,***ddss21,***ddss22;
; 1065 :   REAL **dfndv1,**dfndv2,**dffdv1,**dffdv2,**dnndv1,**dnndv2;
; 1066 :   REAL ***dfdv1,***dfdv2;
; 1067 :   REAL *s1,*s2;
; 1068 :   REAL **s = v_info->sides[0];

	mov	eax, DWORD PTR [edi+1276]
	fld	QWORD PTR _levine_t
	mov	ecx, DWORD PTR [eax]
	fmul	QWORD PTR _levine_c

; 1069 :   REAL temp[MAXCOORD];
; 1070 : #define MAXV 10
; 1071 :   REAL aa[MAXV*5];
; 1072 :   MAT2D(ds1,12*MAXV,MAXCOORD);

	push	6
	push	120					; 00000078H
	lea	edx, DWORD PTR _ds1xJ$[ebp]
	push	edx
	fdiv	QWORD PTR _levine_a
	lea	eax, DWORD PTR _ds1qXvS$[ebp]
	push	eax
	mov	DWORD PTR _v_info$GSCopy$[ebp], edi
	mov	DWORD PTR _s$[ebp], ecx
	fstp	QWORD PTR _coeff$[ebp]
	call	_mat2d_setup

; 1073 :   MAT3D(ddss11,16*MAXV,MAXCOORD,MAXCOORD);

	push	6
	push	6
	push	160					; 000000a0H
	lea	ecx, DWORD PTR _ddss11xJ$[ebp]
	push	ecx
	lea	edx, DWORD PTR _ddss11qXvS$[ebp]
	push	edx
	mov	DWORD PTR _ds1$[ebp], eax
	call	_mat3d_setup
	mov	esi, eax

; 1074 :   REAL hh0;  /* curvature adjusted for h-h0 */
; 1075 :   REAL gc,root,kappa1,kappa2;
; 1076 :   REAL dgc[MAXV][MAXCOORD];
; 1077 :   REAL dhh0[MAXV][MAXCOORD];
; 1078 :   REAL darea[MAXV][MAXCOORD];
; 1079 :   REAL ddef[MAXV][MAXCOORD];
; 1080 : 
; 1081 :   variety = NORMAL_SQ;
; 1082 : 
; 1083 :   if ( v_info->vcount <= 1 ) return 0.0;

	mov	eax, DWORD PTR [edi+12]
	add	esp, 36					; 00000024H
	cmp	eax, 1
	jg	SHORT $LN67@levine_ene@2
	fldz
	pop	edi
	pop	esi

; 1322 :     return energy;
; 1323 : 
; 1324 :   /* No hessian yet */
; 1325 :   return energy;
; 1326 : 
; 1327 : } // end levine_energy_all(

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN67@levine_ene@2:

; 1084 : 
; 1085 :   /* gaussian curvature */
; 1086 :   for ( k = 1 ; k < v_info->vcount ; k++ )

	mov	edi, 1
	push	ebx
	cmp	eax, edi
	jle	$LN135@levine_ene@2
$LL66@levine_ene@2:

; 1087 :   { REAL ss1,ss2,s1s2;
; 1088 :     int kk = (k==(v_info->vcount-1)) ? 0 : k;

	dec	eax
	mov	ebx, edi
	sub	ebx, eax

; 1089 :     ss1 = SDIM_dot(v_info->sides[0][k-1],v_info->sides[0][k-1]);

	mov	eax, DWORD PTR _v_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [eax+1276]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _web+616
	mov	eax, DWORD PTR [edx+edi*4-4]
	push	ecx
	neg	ebx
	push	eax
	sbb	ebx, ebx
	push	eax
	and	ebx, edi
	call	_dot
	fstp	QWORD PTR _ss1$89796[ebp]

; 1090 :     ss2 = SDIM_dot(v_info->sides[0][kk],v_info->sides[0][kk]);

	mov	edx, DWORD PTR _v_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [edx+1276]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR [ecx+ebx*4]
	push	edx
	push	eax
	push	eax
	call	_dot
	fstp	QWORD PTR _ss2$89797[ebp]

; 1091 :     s1s2 = SDIM_dot(v_info->sides[0][k-1],v_info->sides[0][kk]);

	mov	eax, DWORD PTR _v_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [eax+1276]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _web+616
	mov	ecx, DWORD PTR [eax+ebx*4]
	push	edx
	mov	edx, DWORD PTR [eax+edi*4-4]
	push	ecx
	push	edx
	call	_dot
	fstp	QWORD PTR _s1s2$89798[ebp]

; 1092 :     deficit -= acos(s1s2/sqrt(ss1*ss2));

	fld	QWORD PTR _ss2$89797[ebp]
	add	esp, 36					; 00000024H
	fmul	QWORD PTR _ss1$89796[ebp]
	fst	QWORD PTR tv2602[ebp]
	call	__CIsqrt
	fdivr	QWORD PTR _s1s2$89798[ebp]
	call	__CIacos
	fsubr	QWORD PTR _deficit$[ebp]
	fstp	QWORD PTR _deficit$[ebp]

; 1093 :     area += sqrt(ss1*ss2 - s1s2*s1s2)/6;

	fld	QWORD PTR _s1s2$89798[ebp]
	fmul	ST(0), ST(0)
	fsubr	QWORD PTR tv2602[ebp]
	call	__CIsqrt
	fdiv	QWORD PTR __real@4018000000000000
	mov	eax, DWORD PTR _v_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [eax+12]
	inc	edi
	fadd	QWORD PTR _area$[ebp]
	fstp	QWORD PTR _area$[ebp]
	cmp	edi, eax
	jl	$LL66@levine_ene@2
$LN135@levine_ene@2:

; 1094 :   }
; 1095 :   gc = deficit/area;

	fld	QWORD PTR _deficit$[ebp]

; 1096 : 
; 1097 :   /* mean curvature */
; 1098 :   pairs = (v_info->vcount - 1);

	mov	ecx, DWORD PTR _v_info$GSCopy$[ebp]
	fdiv	QWORD PTR _area$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	lea	ebx, DWORD PTR [eax-1]
	mov	DWORD PTR tv2569[ebp], eax
	mov	DWORD PTR _pairs$[ebp], ebx
	fst	QWORD PTR tv2614[ebp]
	fstp	QWORD PTR _gc$[ebp]

; 1099 :   if ( pairs <= 0 ) return 0.0;

	test	ebx, ebx
	jg	SHORT $LN63@levine_ene@2
	fldz
	pop	ebx
	pop	edi
	pop	esi

; 1322 :     return energy;
; 1323 : 
; 1324 :   /* No hessian yet */
; 1325 :   return energy;
; 1326 : 
; 1327 : } // end levine_energy_all(

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN63@levine_ene@2:

; 1100 : 
; 1101 :   if ( v_info->vcount > MAXV )

	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN62@levine_ene@2

; 1102 :   { a = (REAL*)mycalloc(5*pairs,sizeof(REAL));

	push	1102					; 0000044eH
	push	OFFSET ??_C@_07EIDGGOJA@GAUSS?4C?$AA@
	lea	edx, DWORD PTR [ebx+ebx*4]
	push	8
	push	edx
	call	_kb_calloc

; 1103 :     ds1 = dmatrix(0,12*v_info->vcount,0,SDIM-1);

	mov	ecx, DWORD PTR _v_info$GSCopy$[ebp]
	mov	edi, eax
	mov	eax, DWORD PTR _web+616
	push	1103					; 0000044fH
	push	OFFSET ??_C@_07EIDGGOJA@GAUSS?4C?$AA@
	dec	eax
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	lea	edx, DWORD PTR [eax+eax*2]
	add	edx, edx
	push	0
	add	edx, edx
	push	edx
	push	0
	mov	DWORD PTR _a$[ebp], edi
	call	_kb_dmatrix
	add	esp, 40					; 00000028H
	mov	DWORD PTR _ds1$[ebp], eax

; 1104 :   } else

	jmp	SHORT $LN61@levine_ene@2
$LN62@levine_ene@2:

; 1105 :   { memset((char*)aa,0,sizeof(REAL)*5*pairs);

	lea	eax, DWORD PTR [ebx+ebx*4]
	add	eax, eax
	add	eax, eax
	add	eax, eax
	push	eax
	lea	ecx, DWORD PTR _aa$[ebp]
	push	0
	push	ecx
	call	_memset

; 1106 :     a = aa;
; 1107 :     memset((char*)ds1[0],0,sizeof(REAL)*12*v_info->vcount*MAXCOORD);

	mov	eax, DWORD PTR tv2569[ebp]
	lea	edx, DWORD PTR [eax+eax*8]
	mov	eax, DWORD PTR _ds1$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	edx, 6
	push	edx
	push	0
	lea	edi, DWORD PTR _aa$[ebp]
	push	ecx
	mov	DWORD PTR _a$[ebp], edi
	call	_memset
	add	esp, 24					; 00000018H
$LN61@levine_ene@2:

; 1110 :   ds2 = ds1 + pairs; dAdv1 = ds2 + pairs; dAdv2 = dAdv1 + pairs;

	mov	ecx, DWORD PTR _ds1$[ebp]
	lea	edx, DWORD PTR [edi+ebx*8]
	lea	eax, DWORD PTR [edx+ebx*8]
	mov	DWORD PTR _s1s1$[ebp], eax
	lea	eax, DWORD PTR [eax+ebx*8]
	mov	DWORD PTR _s1s2$[ebp], eax
	lea	eax, DWORD PTR [eax+ebx*8]
	mov	DWORD PTR _s2s2$[ebp], eax
	lea	eax, DWORD PTR [ecx+ebx*4]
	mov	DWORD PTR _ds2$[ebp], eax
	lea	eax, DWORD PTR [eax+ebx*4]
	mov	DWORD PTR _dAdv1$[ebp], eax
	lea	eax, DWORD PTR [eax+ebx*4]
	mov	DWORD PTR _dAdv2$[ebp], eax

; 1111 :   dfndv1 = dAdv2 + pairs; dfndv2 = dfndv1 + pairs; dffdv1 = dfndv2 + pairs;

	lea	eax, DWORD PTR [eax+ebx*4]
	mov	DWORD PTR _dfndv1$[ebp], eax
	lea	eax, DWORD PTR [eax+ebx*4]
	mov	DWORD PTR _dfndv2$[ebp], eax
	lea	eax, DWORD PTR [eax+ebx*4]
	mov	DWORD PTR _dffdv1$[ebp], eax

; 1112 :   dffdv2 = dffdv1 + pairs; dnndv1 = dffdv2 + pairs; dnndv2 = dnndv1 + pairs;

	lea	eax, DWORD PTR [eax+ebx*4]
	mov	DWORD PTR _dffdv2$[ebp], eax
	lea	eax, DWORD PTR [eax+ebx*4]
	mov	DWORD PTR _dnndv1$[ebp], eax
	lea	eax, DWORD PTR [eax+ebx*4]
	mov	DWORD PTR _dnndv2$[ebp], eax

; 1113 : 
; 1114 :   /* basic dot products */
; 1115 :   /* area = 0.0; */
; 1116 :   for ( j = 0 ; j < SDIM ; j++ ) dAdv[j] = vnorm[j] = 0.0;

	mov	eax, DWORD PTR _web+616
	test	eax, eax
	jle	SHORT $LN60@levine_ene@2

; 1108 :   }
; 1109 :   d = a+pairs; s1s1 = d + pairs; s1s2 = s1s1 + pairs; s2s2 = s1s2 + pairs;

	lea	ecx, DWORD PTR [eax*8]
	shr	ecx, 2
	xor	eax, eax
	lea	edi, DWORD PTR _dAdv$[ebp]
	rep stosd

; 1113 : 
; 1114 :   /* basic dot products */
; 1115 :   /* area = 0.0; */
; 1116 :   for ( j = 0 ; j < SDIM ; j++ ) dAdv[j] = vnorm[j] = 0.0;

	mov	ecx, DWORD PTR _web+616
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
	shr	ecx, 2
	lea	edi, DWORD PTR _vnorm$[ebp]
	rep stosd
$LN60@levine_ene@2:

; 1117 :   for ( k = 0 ; k < pairs ; k++ )

	test	ebx, ebx
	jle	$LN146@levine_ene@2
	mov	ebx, DWORD PTR _ds1$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	edi, DWORD PTR _s1s1$[ebp]
	mov	ecx, DWORD PTR _s2s2$[ebp]
	sub	eax, ebx
	mov	DWORD PTR tv4314[ebp], eax
	sub	edx, ecx
	mov	eax, edi
	sub	ecx, eax
	mov	DWORD PTR tv4323[ebp], ecx
	mov	ecx, DWORD PTR _s1s2$[ebp]
	sub	ecx, eax
	mov	DWORD PTR tv4330[ebp], ecx
	mov	ecx, DWORD PTR _a$[ebp]
	sub	ecx, eax
	mov	eax, DWORD PTR _ds2$[ebp]
	sub	eax, ebx
	mov	DWORD PTR tv4342[ebp], eax
	mov	eax, DWORD PTR _dAdv2$[ebp]
	sub	eax, ebx
	mov	DWORD PTR tv4345[ebp], eax
	mov	eax, DWORD PTR _dAdv1$[ebp]
	mov	DWORD PTR tv4337[ebp], ecx
	mov	ecx, DWORD PTR _pairs$[ebp]
	sub	eax, ebx
	mov	DWORD PTR tv4200[ebp], 1
	mov	DWORD PTR tv4319[ebp], edx
	mov	DWORD PTR tv4348[ebp], eax
	mov	DWORD PTR tv2275[ebp], ecx
	npad	11
$LL57@levine_ene@2:

; 1118 :   { s1 = s[k]; s2 = s[(k+1==pairs)?0:k+1];

	mov	edx, DWORD PTR tv4314[ebp]
	mov	ecx, DWORD PTR [edx+ebx]
	mov	edx, DWORD PTR tv4200[ebp]
	mov	eax, edx
	sub	eax, DWORD PTR _pairs$[ebp]
	mov	DWORD PTR _s1$[ebp], ecx
	neg	eax
	sbb	eax, eax
	and	eax, edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]

; 1119 :     s1s1[k] = SDIM_dot(s1,s1);

	mov	edx, DWORD PTR _web+616
	push	edx
	push	ecx
	push	ecx
	mov	DWORD PTR _s2$[ebp], eax
	call	_dot
	fstp	QWORD PTR [edi]

; 1120 :     s1s2[k] = SDIM_dot(s1,s2);

	mov	eax, DWORD PTR _web+616
	mov	ecx, DWORD PTR _s2$[ebp]
	mov	edx, DWORD PTR _s1$[ebp]
	push	eax
	push	ecx
	push	edx
	call	_dot
	mov	eax, DWORD PTR tv4330[ebp]
	fstp	QWORD PTR [eax+edi]

; 1121 :     s2s2[k] = SDIM_dot(s2,s2);

	mov	ecx, DWORD PTR _web+616
	mov	eax, DWORD PTR _s2$[ebp]
	push	ecx
	push	eax
	push	eax
	call	_dot
	mov	eax, DWORD PTR tv4323[ebp]

; 1122 :     d[k] = s1s1[k]*s2s2[k] - s1s2[k]*s1s2[k];

	mov	ecx, DWORD PTR tv4330[ebp]
	fst	QWORD PTR [eax+edi]
	fld	QWORD PTR [ecx+edi]
	mov	edx, DWORD PTR tv4319[ebp]
	add	eax, edi
	fxch	ST(1)
	fmul	QWORD PTR [edi]
	add	esp, 36					; 00000024H
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	fst	QWORD PTR [eax+edx]

; 1123 :     a[k] = 0.5*sqrt(d[k]);

	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000
	mov	eax, DWORD PTR tv4337[ebp]
	fstp	QWORD PTR [eax+edi]

; 1124 :     for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	$LN132@levine_ene@2
	mov	edx, DWORD PTR _s1$[ebp]
	fld	QWORD PTR __real@3fc0000000000000
	mov	ecx, DWORD PTR _s2$[ebp]
	fld	QWORD PTR __real@4000000000000000
	sub	ecx, edx
	mov	DWORD PTR tv3841[ebp], ecx
	lea	ecx, DWORD PTR _dAdv$[ebp]
	sub	ecx, edx
	mov	DWORD PTR tv4194[ebp], ecx
$LN143@levine_ene@2:
	mov	edx, DWORD PTR [ebx]
	mov	ecx, DWORD PTR _s1$[ebp]

; 1125 :     { ds1[k][j] = 2*(s2s2[k]*s1[j] - s1s2[k]*s2[j]);

	fld	QWORD PTR [ecx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	mov	DWORD PTR tv8576[ebp], edx
	mov	edx, DWORD PTR tv4323[ebp]
	fmul	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv4330[ebp]
	fld	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv3841[ebp]
	lea	ecx, DWORD PTR [ecx+eax*8]
	fmul	QWORD PTR [edx+ecx]
	mov	edx, DWORD PTR tv8576[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR tv4342[ebp]
	mov	edx, DWORD PTR [edx+ebx]
	lea	edx, DWORD PTR [edx+eax*8]
	mov	DWORD PTR tv8594[ebp], edx

; 1126 :       ds2[k][j] = 2*(s1s1[k]*s2[j] - s1s2[k]*s1[j]);

	mov	edx, DWORD PTR tv3841[ebp]
	fld	QWORD PTR [edx+ecx]
	mov	edx, DWORD PTR tv4330[ebp]
	fmul	QWORD PTR [edi]
	fld	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv8594[ebp]
	fmul	QWORD PTR [ecx]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR tv4348[ebp]
	mov	edx, DWORD PTR [edx+ebx]

; 1127 :       dAdv1[k][j] = 0.125/a[k]*ds1[k][j];

	fld	ST(1)
	lea	edx, DWORD PTR [edx+eax*8]
	mov	DWORD PTR tv8609[ebp], edx
	mov	edx, DWORD PTR tv4337[ebp]
	fdiv	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv8576[ebp]
	inc	eax
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv8609[ebp]
	fstp	QWORD PTR [edx]

; 1128 :       dAdv2[k][j] = 0.125/a[k]*ds2[k][j];

	mov	edx, DWORD PTR tv4337[ebp]
	fld	ST(1)
	fdiv	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv8594[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv4345[ebp]
	mov	edx, DWORD PTR [edx+ebx]
	fst	QWORD PTR [edx+eax*8-8]

; 1129 :       dAdv[j] -= dAdv1[k][j] + dAdv2[k][j];

	mov	edx, DWORD PTR tv8609[ebp]
	fadd	QWORD PTR [edx]
	mov	edx, DWORD PTR tv4194[ebp]
	fsubr	QWORD PTR [ecx+edx]
	fstp	QWORD PTR [ecx+edx]
	cmp	eax, DWORD PTR _web+616
	jl	$LN143@levine_ene@2

; 1124 :     for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(0)
	fstp	ST(0)
$LN132@levine_ene@2:

; 1130 :     }
; 1131 :     if ( variety != PLAIN_SQ )
; 1132 :     { cross_prod(s1,s2,temp);

	mov	ecx, DWORD PTR _s2$[ebp]
	mov	edx, DWORD PTR _s1$[ebp]
	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	push	ecx
	push	edx
	call	_cross_prod

; 1133 :       for ( j = 0 ; j < SDIM ; j++ )

	fld	QWORD PTR __real@4008000000000000
	mov	edx, DWORD PTR _web+616
	fld	QWORD PTR __real@3fe0000000000000
	add	esp, 12					; 0000000cH
	xor	eax, eax
	cmp	edx, 4
	jl	SHORT $LC119@levine_ene@2
	lea	ecx, DWORD PTR [edx-3]
$LN120@levine_ene@2:

; 1134 :         vnorm[j] += 0.5*temp[j]/3;

	fld	QWORD PTR _temp$[ebp+eax*8]
	add	eax, 4
	fmul	ST(0), ST(1)
	fdiv	ST(0), ST(2)
	fadd	QWORD PTR _vnorm$[ebp+eax*8-32]
	fstp	QWORD PTR _vnorm$[ebp+eax*8-32]
	fld	QWORD PTR _temp$[ebp+eax*8-24]
	fmul	ST(0), ST(1)
	fdiv	ST(0), ST(2)
	fadd	QWORD PTR _vnorm$[ebp+eax*8-24]
	fstp	QWORD PTR _vnorm$[ebp+eax*8-24]
	fld	QWORD PTR _temp$[ebp+eax*8-16]
	fmul	ST(0), ST(1)
	fdiv	ST(0), ST(2)
	fadd	QWORD PTR _vnorm$[ebp+eax*8-16]
	fstp	QWORD PTR _vnorm$[ebp+eax*8-16]
	fld	QWORD PTR _temp$[ebp+eax*8-8]
	fmul	ST(0), ST(1)
	fdiv	ST(0), ST(2)
	fadd	QWORD PTR _vnorm$[ebp+eax*8-8]
	fstp	QWORD PTR _vnorm$[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LN120@levine_ene@2
$LC119@levine_ene@2:

; 1133 :       for ( j = 0 ; j < SDIM ; j++ )

	cmp	eax, edx
	jge	SHORT $LN161@levine_ene@2
$LC50@levine_ene@2:

; 1134 :         vnorm[j] += 0.5*temp[j]/3;

	fld	QWORD PTR _temp$[ebp+eax*8]
	inc	eax
	fmul	ST(0), ST(1)
	fdiv	ST(0), ST(2)
	fadd	QWORD PTR _vnorm$[ebp+eax*8-8]
	fstp	QWORD PTR _vnorm$[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LC50@levine_ene@2
$LN161@levine_ene@2:

; 1117 :   for ( k = 0 ; k < pairs ; k++ )

	mov	eax, 1

; 1133 :       for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(0)
	add	DWORD PTR tv4200[ebp], eax
	fstp	ST(0)
	add	edi, 8
	add	ebx, 4
	sub	DWORD PTR tv2275[ebp], eax
	jne	$LL57@levine_ene@2
$LN146@levine_ene@2:

; 1135 :     }
; 1136 :   }
; 1137 : 
; 1138 :   /* energy */
; 1139 :   ff = SDIM_dot(dAdv,dAdv);

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _dAdv$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	fstp	QWORD PTR _ff$[ebp]

; 1140 :   fn = SDIM_dot(dAdv,vnorm);

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _vnorm$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dAdv$[ebp]
	push	edx
	call	_dot
	fst	QWORD PTR _fn$[ebp]

; 1141 :   if ( fn == 0.0 ) 

	fld	ST(0)
	add	esp, 24					; 00000018H
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	SHORT $LN137@levine_ene@2
	fstp	ST(1)

; 1142 :   { ff = 0.0; fn = 1e-6; }

	fld	ST(0)
	fld	QWORD PTR __real@3eb0c6f7a0b5ed8d
	fst	QWORD PTR _fn$[ebp]
	jmp	SHORT $LN47@levine_ene@2
$LN137@levine_ene@2:
	fld	QWORD PTR _ff$[ebp]
	fxch	ST(1)
	fxch	ST(2)
$LN47@levine_ene@2:

; 1143 :   hh0 = ff/fn/2;  /* mean curvature, so divide by 2 */

	fdivp	ST(1), ST(0)
	fst	QWORD PTR tv2769[ebp]
	fmul	QWORD PTR __real@3fe0000000000000
	fst	QWORD PTR _hh0$[ebp]

; 1144 :   
; 1145 :   if ( hh0*hh0 < gc ) 

	fld	ST(0)
	fmul	ST(0), ST(1)
	fld	QWORD PTR _gc$[ebp]
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN167@levine_ene@2
	fstp	ST(1)
	fstp	ST(0)

; 1146 :     root = 0.0;

	fxch	ST(1)
	fst	QWORD PTR _root$[ebp]

; 1147 :   else 

	jmp	SHORT $LN45@levine_ene@2
$LN167@levine_ene@2:

; 1144 :   
; 1145 :   if ( hh0*hh0 < gc ) 

	fstp	ST(2)
	fstp	ST(2)

; 1148 :     root = sqrt(hh0*hh0 - gc);

	fsubp	ST(1), ST(0)
	call	__CIsqrt
	fst	QWORD PTR _root$[ebp]
	fld	QWORD PTR _hh0$[ebp]
	fxch	ST(1)
$LN45@levine_ene@2:

; 1149 :   kappa1 = hh0 + root;

	fld	ST(0)
	fadd	ST(0), ST(2)
	fst	QWORD PTR _kappa1$[ebp]

; 1150 :   kappa2 = hh0 - root;

	fxch	ST(2)
	fsubrp	ST(1), ST(0)
	fst	QWORD PTR _kappa2$[ebp]

; 1151 : #define APPROX_LEVINE_XX
; 1152 : #ifdef APPROX_LEVINE
; 1153 :   /* express in terms of hh0 and gc without sqrt to keep smooth */
; 1154 :   energy = coeff*deficit 
; 1155 :             + 4*(hh0*hh0 - gc)/4/levine_a*levine_t*(1 + 2*hh0*levine_t)*area;
; 1156 : #else
; 1157 :   energy = coeff*deficit 
; 1158 :             + (2*root)/4/levine_a*
; 1159 :                log((1-kappa2*levine_t)/(1-kappa1*levine_t))*area;

	fld	QWORD PTR _levine_t
	fmul	ST(1), ST(0)
	fld1
	fld	ST(0)
	fsubrp	ST(3), ST(0)
	fxch	ST(3)
	fmulp	ST(1), ST(0)
	fsubp	ST(2), ST(0)
	fdivrp	ST(1), ST(0)
	call	__CIlog
	fld	QWORD PTR _root$[ebp]
	fadd	ST(0), ST(0)
	fmul	QWORD PTR __real@3fd0000000000000
	fdiv	QWORD PTR _levine_a
	fmulp	ST(1), ST(0)
	fmul	QWORD PTR _area$[ebp]
	fld	QWORD PTR _coeff$[ebp]
	fmul	QWORD PTR _deficit$[ebp]
	faddp	ST(1), ST(0)
	fst	QWORD PTR _energy$[ebp]

; 1160 : #endif
; 1161 : 
; 1162 :   if ( !is_finite(energy) )

	fld	QWORD PTR __real@fe37e43c8800759c
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN173@levine_ene@2
	fld	QWORD PTR __real@7e37e43c8800759c
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN44@levine_ene@2
$LN173@levine_ene@2:

; 1163 :       kb_error(2586,"Levine energy infinite.\n",WARNING);

	push	2
	fstp	ST(0)
	push	OFFSET ??_C@_0BJ@PHLPKNON@Levine?5energy?5infinite?4?6?$AA@
	push	2586					; 00000a1aH
	call	_kb_error
	fld	QWORD PTR _energy$[ebp]
	add	esp, 12					; 0000000cH
$LN44@levine_ene@2:

; 1164 :   if ( mode == METHOD_VALUE )

	cmp	DWORD PTR _mode$[ebp], 1767		; 000006e7H

; 1165 :     return energy;

	je	$LN152@levine_ene@2

; 1166 : 
; 1167 :   /* now individual vertex gradients */
; 1168 :   for ( k = 0 ; k < v_info->vcount ; k++ )

	mov	eax, DWORD PTR _v_info$GSCopy$[ebp]
	fstp	ST(0)
	mov	ebx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _web+616
	test	ebx, ebx
	jle	$LN151@levine_ene@2
	mov	DWORD PTR tv4450[ebp], 0
	mov	DWORD PTR tv1990[ebp], ebx
	npad	6
$LL150@levine_ene@2:

; 1169 :    for ( i = 0 ; i < SDIM ; i++ )

	test	edx, edx
	jle	SHORT $LN40@levine_ene@2
	mov	edi, DWORD PTR tv4450[ebp]
	lea	edi, DWORD PTR _dgc$[ebp+edi]
	xor	eax, eax
	lea	ecx, DWORD PTR [edx*8]
	shr	ecx, 2
	rep stosd

; 1170 :    { dgc[k][i] = dhh0[k][i] = darea[k][i] = ddef[k][i] = 0.0;

	mov	edi, DWORD PTR tv4450[ebp]
	lea	edi, DWORD PTR _dhh0$[ebp+edi]
	lea	ecx, DWORD PTR [edx*8]
	shr	ecx, 2
	rep stosd
	mov	edi, DWORD PTR tv4450[ebp]
	lea	edi, DWORD PTR _darea$[ebp+edi]
	lea	ecx, DWORD PTR [edx*8]
	shr	ecx, 2
	rep stosd
	mov	edi, DWORD PTR tv4450[ebp]
	lea	ecx, DWORD PTR [edx*8]
	shr	ecx, 2
	lea	edi, DWORD PTR _ddef$[ebp+edi]
	rep stosd
$LN40@levine_ene@2:

; 1166 : 
; 1167 :   /* now individual vertex gradients */
; 1168 :   for ( k = 0 ; k < v_info->vcount ; k++ )

	add	DWORD PTR tv4450[ebp], 48		; 00000030H
	dec	DWORD PTR tv1990[ebp]
	jne	SHORT $LL150@levine_ene@2
$LN151@levine_ene@2:

; 1171 :    }
; 1172 : 
; 1173 :   /* gaussian part */
; 1174 :   for ( k = 1 ; k < v_info->vcount ; k++ )

	mov	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx
	cmp	ebx, ecx
	jle	$LN33@levine_ene@2
	jmp	SHORT $LN35@levine_ene@2
	npad	2
$LL147@levine_ene@2:
	mov	ecx, DWORD PTR _k$[ebp]
$LN35@levine_ene@2:

; 1175 :   {  REAL ss1,ss2,s1s2;
; 1176 :      int kk = (k==(v_info->vcount-1)) ? 0 : k;
; 1177 :      REAL *s1 = v_info->sides[0][k-1],*s2 = v_info->sides[0][kk];

	mov	eax, DWORD PTR _v_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [eax+1276]
	mov	eax, DWORD PTR [eax]
	dec	ebx
	mov	edi, ecx
	sub	edi, ebx
	mov	ebx, DWORD PTR [eax+ecx*4-4]
	neg	edi
	sbb	edi, edi

; 1178 :      REAL denom;
; 1179 : 
; 1180 :      ss1 = SDIM_dot(s1,s1);

	push	edx
	and	edi, ecx
	mov	ecx, DWORD PTR [eax+edi*4]
	push	ebx
	push	ebx
	mov	DWORD PTR _s2$89843[ebp], ecx
	call	_dot
	fstp	QWORD PTR _ss1$89838[ebp]

; 1181 :      ss2 = SDIM_dot(s2,s2);

	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR _s2$89843[ebp]
	push	edx
	push	eax
	push	eax
	call	_dot
	fstp	QWORD PTR _ss2$89839[ebp]

; 1182 :      s1s2 = SDIM_dot(s1,s2);

	mov	eax, DWORD PTR _web+616
	mov	ecx, DWORD PTR _s2$89843[ebp]
	push	eax
	push	ecx
	push	ebx
	call	_dot
	fst	QWORD PTR _s1s2$89840[ebp]

; 1183 :      
; 1184 :      denom = sqrt(ss1*ss2 - s1s2*s1s2);

	fld	QWORD PTR _ss2$89839[ebp]
	add	esp, 36					; 00000024H
	fmul	QWORD PTR _ss1$89838[ebp]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	call	__CIsqrt

; 1185 :    
; 1186 :      for ( i = 0 ; i < SDIM ; i++ )

	mov	edx, DWORD PTR _web+616
	mov	DWORD PTR _i$[ebp], 0
	test	edx, edx
	jle	$LN181@levine_ene@2
	fld	QWORD PTR _s1s2$89840[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	fld	QWORD PTR _ss1$89838[ebp]
	mov	edx, DWORD PTR _s2$89843[ebp]
	fdivr	ST(0), ST(1)
	sub	edx, ebx
	mov	eax, ebx
	lea	ecx, DWORD PTR [ecx+ecx*2]
	shl	ecx, 4
	neg	ebx
	mov	DWORD PTR tv4863[ebp], ebx
	lea	ebx, DWORD PTR _dgc$[ebp+ebx]
	mov	DWORD PTR tv4864[ebp], ebx
	mov	ebx, DWORD PTR tv4863[ebp]
	lea	ebx, DWORD PTR _ddef$[ebp+ebx]
	mov	DWORD PTR tv4866[ebp], ebx
	mov	ebx, DWORD PTR tv4863[ebp]
	lea	ebx, DWORD PTR _darea$[ebp+ebx]
	mov	DWORD PTR tv4868[ebp], ebx
	mov	ebx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv4771[ebp], edx
	fstp	QWORD PTR tv2835[ebp]
	fld	QWORD PTR _ss2$89839[ebp]
	fdivr	ST(0), ST(1)
	fstp	QWORD PTR tv2840[ebp]
	fld	QWORD PTR tv2614[ebp]
	fdiv	QWORD PTR _area$[ebp]
	fstp	QWORD PTR tv2858[ebp]
	jmp	SHORT $LN274@levine_ene@2
$LN139@levine_ene@2:
	mov	edx, DWORD PTR tv4771[ebp]
$LN274@levine_ene@2:
	fld	QWORD PTR __real@4018000000000000

; 1187 :      { REAL ddefds1,ddefds2,dads1,dads2;
; 1188 :        ddefds1 = (s2[i] - s1s2/ss1*s1[i])/denom;

	fld	QWORD PTR tv2835[ebp]
	fmul	QWORD PTR [eax]
	fsubr	QWORD PTR [edx+eax]
	fdiv	ST(0), ST(3)

; 1189 :        ddefds2 = (s1[i] - s1s2/ss2*s2[i])/denom;

	fld	QWORD PTR tv2840[ebp]
	fmul	QWORD PTR [edx+eax]
	fsubr	QWORD PTR [eax]
	fdiv	ST(0), ST(4)

; 1190 :        dads1 = (s1[i]*ss2 - s1s2*s2[i])/denom/6;

	fld	QWORD PTR [eax]
	fmul	QWORD PTR _ss2$89839[ebp]
	fld	ST(4)
	fmul	QWORD PTR [edx+eax]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(3)

; 1191 :        dads2 = (s2[i]*ss1 - s1s2*s1[i])/denom/6;

	fld	QWORD PTR _ss1$89838[ebp]
	fmul	QWORD PTR [edx+eax]
	fld	QWORD PTR [eax]
	fmul	ST(0), ST(6)

; 1192 : 
; 1193 :        dgc[k][i] += ddefds1/area - deficit/area/area*dads1;
; 1194 :        dgc[0][i] -= ddefds1/area - deficit/area/area*dads1;

	mov	edx, DWORD PTR tv4864[ebp]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(6)
	fdivrp	ST(4), ST(0)
	fld	ST(2)
	fdiv	QWORD PTR _area$[ebp]
	fld	QWORD PTR tv2858[ebp]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fld	ST(0)
	fadd	QWORD PTR _dgc$[ebp+ecx]
	fstp	QWORD PTR _dgc$[ebp+ecx]
	fsubr	QWORD PTR [edx+eax]
	fstp	QWORD PTR [edx+eax]

; 1195 :        dgc[kk?k+1:1][i] += ddefds2/area - deficit/area/area*dads2;

	test	edi, edi
	je	SHORT $LN72@levine_ene@2
	mov	edx, DWORD PTR _k$[ebp]
	inc	edx
	jmp	SHORT $LN73@levine_ene@2
$LN72@levine_ene@2:
	mov	edx, 1
$LN73@levine_ene@2:
	fld	ST(1)
	lea	edx, DWORD PTR [edx+edx*2]
	fdiv	QWORD PTR _area$[ebp]
	lea	edx, DWORD PTR [ebx+edx*2]
	lea	edx, DWORD PTR _dgc$[ebp+edx*8]
	fld	QWORD PTR tv2858[ebp]
	fmul	ST(0), ST(5)
	fsubp	ST(1), ST(0)
	fld	ST(0)
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]

; 1196 :        dgc[0][i] -= ddefds2/area - deficit/area/area*dads2;

	mov	edx, DWORD PTR tv4864[ebp]
	fsubr	QWORD PTR [edx+eax]
	fstp	QWORD PTR [edx+eax]

; 1197 : 
; 1198 :        ddef[k][i] += ddefds1;
; 1199 :        ddef[0][i] -= ddefds1;

	mov	edx, DWORD PTR tv4866[ebp]
	fld	QWORD PTR _ddef$[ebp+ecx]
	fadd	ST(0), ST(3)
	fstp	QWORD PTR _ddef$[ebp+ecx]
	fld	QWORD PTR [edx+eax]
	fsubrp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR [edx+eax]

; 1200 :        ddef[kk?k+1:1][i] += ddefds2;

	test	edi, edi
	je	SHORT $LN74@levine_ene@2
	mov	edx, DWORD PTR _k$[ebp]
	inc	edx
	jmp	SHORT $LN75@levine_ene@2
$LN74@levine_ene@2:
	mov	edx, 1
$LN75@levine_ene@2:
	lea	edx, DWORD PTR [edx+edx*2]
	lea	edx, DWORD PTR [ebx+edx*2]
	fld	QWORD PTR _ddef$[ebp+edx*8]
	lea	edx, DWORD PTR _ddef$[ebp+edx*8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 1201 :        ddef[0][i] -= ddefds2;

	mov	edx, DWORD PTR tv4866[ebp]
	fsubr	QWORD PTR [edx+eax]
	fstp	QWORD PTR [edx+eax]

; 1202 : 
; 1203 :        darea[k][i] += dads1;
; 1204 :        darea[0][i] -= dads1;

	mov	edx, DWORD PTR tv4868[ebp]
	fld	QWORD PTR _darea$[ebp+ecx]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR _darea$[ebp+ecx]
	fsubr	QWORD PTR [edx+eax]
	fstp	QWORD PTR [edx+eax]

; 1205 :        darea[kk?k+1:1][i] += dads2;

	test	edi, edi
	je	SHORT $LN76@levine_ene@2
	mov	edx, DWORD PTR _k$[ebp]
	inc	edx
	jmp	SHORT $LN77@levine_ene@2
$LN76@levine_ene@2:
	mov	edx, 1
$LN77@levine_ene@2:
	lea	edx, DWORD PTR [edx+edx*2]
	fld	ST(0)
	lea	edx, DWORD PTR [ebx+edx*2]
	fadd	QWORD PTR _darea$[ebp+edx*8]
	lea	edx, DWORD PTR _darea$[ebp+edx*8]
	inc	ebx
	add	eax, 8
	fstp	QWORD PTR [edx]

; 1206 :        darea[0][i] -= dads2;

	mov	edx, DWORD PTR tv4868[ebp]
	add	ecx, 8
	fsubr	QWORD PTR [edx+eax-8]
	fstp	QWORD PTR [edx+eax-8]
	mov	edx, DWORD PTR _web+616
	cmp	ebx, edx
	jl	$LN139@levine_ene@2

; 1185 :    
; 1186 :      for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(1)
$LN181@levine_ene@2:

; 1171 :    }
; 1172 : 
; 1173 :   /* gaussian part */
; 1174 :   for ( k = 1 ; k < v_info->vcount ; k++ )

	mov	eax, DWORD PTR _k$[ebp]

; 1185 :    
; 1186 :      for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)
	mov	ecx, DWORD PTR _v_info$GSCopy$[ebp]
	mov	ebx, DWORD PTR [ecx+12]
	inc	eax
	mov	DWORD PTR _k$[ebp], eax
	cmp	eax, ebx
	jl	$LL147@levine_ene@2
$LN33@levine_ene@2:

; 1207 :      }
; 1208 :   }
; 1209 : 
; 1210 : 
; 1211 :   /* other part */
; 1212 :     if ( v_info->vcount > MAXV )

	mov	eax, DWORD PTR _v_info$GSCopy$[ebp]
	cmp	DWORD PTR [eax+12], 10			; 0000000aH

; 1213 :       ddss11 = dmatrix3(16*pairs,SDIM,SDIM);

	mov	edi, DWORD PTR _pairs$[ebp]
	jle	SHORT $LN29@levine_ene@2
	push	1213					; 000004bdH
	push	OFFSET ??_C@_07EIDGGOJA@GAUSS?4C?$AA@
	push	edx
	mov	ecx, edi
	push	edx
	shl	ecx, 4
	push	ecx
	call	_kb_dmatrix3
	add	esp, 20					; 00000014H
	mov	esi, eax
	jmp	SHORT $LN28@levine_ene@2
$LN29@levine_ene@2:

; 1214 :     else memset((char*)ddss11[0][0],0,sizeof(REAL)*16*pairs*MAXCOORD*MAXCOORD);

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	mov	edx, edi
	imul	edx, 4608				; 00001200H
	push	edx
	push	0
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
$LN28@levine_ene@2:

; 1215 :     ddss12 = ddss11 + pairs; ddss21 = ddss12 + pairs; ddss22 = ddss21 + pairs;

	lea	edx, DWORD PTR [esi+edi*4]
	lea	ebx, DWORD PTR [edx+edi*4]
	lea	eax, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR _ddss22$[ebp], eax

; 1216 :     ddAdv1dv1 = ddss22 + pairs; ddAdv1dv2 = ddAdv1dv1 + pairs;

	lea	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR _ddAdv1dv1$[ebp], eax
	lea	eax, DWORD PTR [eax+edi*4]

; 1217 :     ddAdv2dv1 = ddAdv1dv2 + pairs; ddAdv2dv2 = ddAdv2dv1 + pairs;

	lea	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR _ddAdv2dv1$[ebp], eax
	lea	eax, DWORD PTR [eax+edi*4]

; 1218 :     dvnorm1 = ddAdv2dv2 + pairs; dvnorm2 = dvnorm1 + pairs;

	lea	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR _dvnorm1$[ebp], eax
	lea	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR _dvnorm2$[ebp], eax

; 1219 :     dfdv1 = dvnorm2 + pairs; dfdv2 = dfdv1 + pairs;

	lea	eax, DWORD PTR [eax+edi*4]
	lea	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR _dfdv2$[ebp], eax

; 1220 : 
; 1221 :     /* first, some more common terms */
; 1222 :     for ( k = 0 ; k < pairs ; k++ )

	test	edi, edi
	jle	$LN134@levine_ene@2
	mov	eax, DWORD PTR _s1s2$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR tv5997[ebp], eax
	sub	ecx, esi
	mov	DWORD PTR tv6176[ebp], ecx
	mov	ecx, DWORD PTR _s2s2$[ebp]
	sub	ecx, eax
	mov	DWORD PTR tv6181[ebp], ecx
	mov	ecx, DWORD PTR _s1s1$[ebp]
	sub	ecx, eax
	mov	DWORD PTR tv6184[ebp], ecx
	mov	ecx, DWORD PTR _a$[ebp]
	sub	ecx, eax
	mov	eax, edx
	sub	eax, esi
	mov	DWORD PTR tv6190[ebp], eax
	mov	eax, ebx
	sub	eax, esi
	mov	DWORD PTR tv6193[ebp], eax
	mov	eax, DWORD PTR _ddss22$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv6196[ebp], eax
	mov	eax, DWORD PTR _dffdv1$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv6199[ebp], eax
	mov	eax, DWORD PTR _dffdv2$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv6202[ebp], eax
	mov	eax, DWORD PTR _dAdv1$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv6205[ebp], eax
	mov	edx, DWORD PTR _ddAdv2dv1$[ebp]
	mov	DWORD PTR tv6187[ebp], ecx
	mov	ecx, DWORD PTR _ddAdv1dv1$[ebp]
	lea	eax, DWORD PTR [ecx+edi*4]
	sub	eax, esi
	mov	DWORD PTR tv6210[ebp], eax
	mov	eax, ecx
	sub	eax, esi
	mov	DWORD PTR tv6215[ebp], eax
	mov	eax, DWORD PTR _ds1$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv6220[ebp], eax
	mov	eax, DWORD PTR _dAdv2$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv6225[ebp], eax
	mov	eax, DWORD PTR _ds2$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv6230[ebp], eax
	lea	eax, DWORD PTR [edx+edi*4]
	sub	eax, esi
	mov	DWORD PTR tv6235[ebp], eax
	mov	eax, edx
	sub	eax, esi
	mov	DWORD PTR tv6240[ebp], eax
	mov	eax, DWORD PTR _dvnorm2$[ebp]
	lea	eax, DWORD PTR [eax+edi*4]
	sub	eax, esi
	mov	DWORD PTR tv6245[ebp], eax
	mov	eax, DWORD PTR _dfndv1$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv6248[ebp], eax
	mov	eax, DWORD PTR _dfdv2$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv6251[ebp], eax
	mov	eax, DWORD PTR _dfndv2$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv6254[ebp], eax
	mov	eax, DWORD PTR _dvnorm1$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv6257[ebp], eax
	mov	eax, DWORD PTR _dnndv1$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv6263[ebp], eax
	mov	eax, DWORD PTR _dvnorm2$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv6266[ebp], eax
	mov	eax, DWORD PTR _dnndv2$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv5696[ebp], 1
	mov	DWORD PTR tv6272[ebp], eax

; 1215 :     ddss12 = ddss11 + pairs; ddss21 = ddss12 + pairs; ddss22 = ddss21 + pairs;

	fld	QWORD PTR __real@4010000000000000
	mov	edx, DWORD PTR _web+616
	fld	QWORD PTR __real@bfe0000000000000
	mov	DWORD PTR tv958[ebp], edi
	fld	QWORD PTR __real@4008000000000000
	fld	QWORD PTR __real@4000000000000000
	fld	QWORD PTR __real@3fe0000000000000
$LN27@levine_ene@2:

; 1223 :     { s1 = s[k]; s2 = s[(k+1==pairs)?0:k+1];

	mov	ecx, DWORD PTR tv6176[ebp]
	mov	ebx, DWORD PTR [esi+ecx]
	mov	ecx, DWORD PTR tv5696[ebp]
	mov	eax, ecx
	sub	eax, DWORD PTR _pairs$[ebp]
	neg	eax
	sbb	eax, eax
	and	eax, ecx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]

; 1224 :       for ( i = 0 ; i < SDIM ; i++ )

	xor	edi, edi
	mov	DWORD PTR _s2$[ebp], eax
	test	edx, edx
	jle	$LN133@levine_ene@2
	fstp	ST(0)
	sub	eax, ebx
	fstp	ST(1)
	mov	DWORD PTR tv3841[ebp], eax
	fstp	ST(1)
	jmp	SHORT $LN24@levine_ene@2
$LN138@levine_ene@2:
	fld	QWORD PTR __real@4010000000000000
	fxch	ST(1)
$LN24@levine_ene@2:

; 1225 :       { ddss11[k][i][i] = 2*s2s2[k];

	mov	eax, DWORD PTR tv5997[ebp]
	mov	ecx, DWORD PTR tv6181[ebp]
	fld	QWORD PTR [eax+ecx]
	mov	edx, DWORD PTR [esi]
	mov	ecx, DWORD PTR [edx+edi*4]
	fmul	ST(0), ST(1)

; 1226 :         ddss12[k][i][i] = -2*s1s2[k];

	mov	edx, DWORD PTR tv6190[ebp]

; 1227 :         ddss21[k][i][i] = -2*s1s2[k];
; 1228 :         ddss22[k][i][i] = 2*s1s1[k];
; 1229 :         for ( j = 0 ; j < SDIM ; j++ )

	mov	DWORD PTR _j$[ebp], 0
	fstp	QWORD PTR [ecx+edi*8]
	mov	ecx, DWORD PTR [esi+edx]
	fld	QWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+edi*4]
	fld	QWORD PTR __real@c000000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [ecx+edi*8]
	mov	ecx, DWORD PTR tv6193[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	fmul	QWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+edi*4]
	fstp	QWORD PTR [ecx+edi*8]
	mov	ecx, DWORD PTR tv6184[ebp]
	fld	QWORD PTR [eax+ecx]
	mov	eax, DWORD PTR tv6196[ebp]
	mov	ecx, DWORD PTR [esi+eax]
	fmul	ST(0), ST(1)
	mov	eax, DWORD PTR [ecx+edi*4]
	fstp	QWORD PTR [eax+edi*8]
	mov	ecx, DWORD PTR _web+616
	test	ecx, ecx
	jle	$LN204@levine_ene@2
	mov	ecx, DWORD PTR tv6205[ebp]
	fld	QWORD PTR __real@3fc0000000000000
	mov	eax, DWORD PTR [esi+ecx]
	mov	edx, DWORD PTR [esi+edx]
	lea	ecx, DWORD PTR [eax+edi*8]
	mov	DWORD PTR tv6278[ebp], ecx
	mov	eax, DWORD PTR tv6225[ebp]
	mov	ecx, DWORD PTR [esi+eax]
	lea	eax, DWORD PTR [ecx+edi*8]
	mov	ecx, DWORD PTR [esi]
	mov	ecx, DWORD PTR [ecx+edi*4]
	sub	ecx, ebx
	mov	DWORD PTR tv8893[ebp], ecx
	mov	ecx, DWORD PTR [edx+edi*4]
	sub	ecx, ebx
	mov	DWORD PTR tv8898[ebp], ecx
	mov	ecx, DWORD PTR tv6210[ebp]
	mov	edx, DWORD PTR [esi+ecx]
	mov	ecx, DWORD PTR [edx+edi*4]
	sub	ecx, ebx
	mov	DWORD PTR tv6306[ebp], ecx
	mov	ecx, DWORD PTR tv6215[ebp]
	mov	edx, DWORD PTR [esi+ecx]
	mov	ecx, DWORD PTR [edx+edi*4]
	sub	ecx, ebx
	mov	DWORD PTR tv6310[ebp], ecx
	mov	ecx, DWORD PTR tv6245[ebp]
	mov	edx, DWORD PTR [esi+ecx]
	mov	ecx, DWORD PTR [edx+edi*4]
	sub	ecx, ebx
	mov	DWORD PTR tv8907[ebp], ecx
	mov	ecx, DWORD PTR tv6193[ebp]
	mov	edx, DWORD PTR [esi+ecx]
	mov	ecx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR tv6196[ebp]
	sub	ecx, ebx
	mov	DWORD PTR tv8912[ebp], ecx
	mov	ecx, DWORD PTR tv6220[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	sub	ecx, ebx
	mov	DWORD PTR tv6314[ebp], ecx
	mov	ecx, DWORD PTR [esi+edx]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	edx, DWORD PTR tv6230[ebp]
	sub	ecx, ebx
	mov	DWORD PTR tv8919[ebp], ecx
	mov	ecx, DWORD PTR [esi+edx]
	sub	ecx, ebx
	mov	DWORD PTR tv6318[ebp], ecx
	mov	ecx, DWORD PTR tv6235[ebp]
	mov	edx, DWORD PTR [esi+ecx]
	mov	ecx, DWORD PTR [edx+edi*4]
	sub	ecx, ebx
	mov	DWORD PTR tv6322[ebp], ecx
	mov	ecx, DWORD PTR tv6240[ebp]
	mov	edx, DWORD PTR [esi+ecx]
	mov	ecx, DWORD PTR [edx+edi*4]
	sub	ecx, ebx
	mov	DWORD PTR tv6326[ebp], ecx
	mov	ecx, DWORD PTR tv6251[ebp]
	mov	edx, DWORD PTR [esi+ecx]
	mov	ecx, DWORD PTR [edx+edi*4]
	sub	ecx, ebx
	mov	DWORD PTR tv6292[ebp], eax
	mov	eax, ebx
	mov	DWORD PTR tv8930[ebp], ecx
$LN21@levine_ene@2:

; 1230 :         { ddss11[k][i][j] -= 2*s2[i]*s2[j];

	mov	edx, DWORD PTR tv3841[ebp]
	lea	ecx, DWORD PTR [ebx+edi*8]
	fld	QWORD PTR [ecx+edx]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [eax+edx]
	mov	edx, DWORD PTR tv8893[ebp]
	fsubr	QWORD PTR [eax+edx]
	fstp	QWORD PTR [eax+edx]

; 1231 :           ddss12[k][i][j] += 4*s1[i]*s2[j] - 2*s2[i]*s1[j];

	mov	edx, DWORD PTR tv3841[ebp]
	fld	QWORD PTR [ecx]
	fmul	ST(0), ST(3)
	fmul	QWORD PTR [eax+edx]
	fld	QWORD PTR [ecx+edx]
	mov	edx, DWORD PTR tv8898[ebp]
	fmul	ST(0), ST(3)
	fmul	QWORD PTR [eax]
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR [eax+edx]
	fstp	QWORD PTR [eax+edx]

; 1232 :           ddss21[k][i][j] += 4*s2[i]*s1[j] - 2*s1[i]*s2[j];

	mov	edx, DWORD PTR tv3841[ebp]
	fld	QWORD PTR [ecx+edx]
	fmul	ST(0), ST(3)
	fmul	QWORD PTR [eax]
	fld	QWORD PTR [ecx]
	fmul	ST(0), ST(3)
	fmul	QWORD PTR [eax+edx]
	mov	edx, DWORD PTR tv8912[ebp]
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR [eax+edx]
	fstp	QWORD PTR [eax+edx]

; 1233 :           ddss22[k][i][j] -= 2*s1[i]*s1[j];
; 1234 : 
; 1235 :           ddAdv1dv1[k][i][j] = -0.125/a[k]/a[k]*dAdv1[k][i]*ds1[k][j]
; 1236 :                       + 0.125/a[k]*ddss11[k][i][j];

	mov	edx, DWORD PTR tv6187[ebp]
	fld	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv8919[ebp]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [eax]
	fsubr	QWORD PTR [eax+ecx]
	fstp	QWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR tv5997[ebp]
	fld	ST(0)
	fdiv	QWORD PTR [ecx+edx]
	mov	edx, DWORD PTR tv8893[ebp]
	fld	ST(0)
	fmul	QWORD PTR [eax+edx]
	fxch	ST(1)
	mov	edx, DWORD PTR tv6187[ebp]
	fdiv	QWORD PTR [ecx+edx]
	mov	edx, DWORD PTR tv6278[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv6314[ebp]
	fmul	QWORD PTR [eax+edx]
	mov	edx, DWORD PTR tv6310[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR [eax+edx]

; 1237 :           ddAdv1dv2[k][i][j] = -0.125/a[k]/a[k]*dAdv1[k][i]*ds2[k][j]
; 1238 :                       + 0.125/a[k]*ddss12[k][i][j];

	mov	edx, DWORD PTR tv6187[ebp]
	fld	ST(0)
	fdiv	QWORD PTR [ecx+edx]
	mov	edx, DWORD PTR tv8898[ebp]
	fld	ST(0)
	fmul	QWORD PTR [eax+edx]
	fxch	ST(1)
	mov	edx, DWORD PTR tv6187[ebp]
	fdiv	QWORD PTR [ecx+edx]
	mov	edx, DWORD PTR tv6278[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv6318[ebp]
	fmul	QWORD PTR [eax+edx]
	mov	edx, DWORD PTR tv6306[ebp]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR [eax+edx]

; 1239 :           dfdv1[k][i][j] = -ddAdv1dv1[k][i][j] - ddAdv1dv2[k][i][j];

	mov	edx, DWORD PTR tv6310[ebp]
	fld	QWORD PTR [eax+edx]
	mov	edx, DWORD PTR tv8907[ebp]
	fchs
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR [eax+edx]

; 1240 :           ddAdv2dv1[k][i][j] = -0.125/a[k]/a[k]*dAdv2[k][i]*ds1[k][j]
; 1241 :                       + 0.125/a[k]*ddss21[k][i][j];

	mov	edx, DWORD PTR tv6187[ebp]
	fld	ST(0)
	fdiv	QWORD PTR [ecx+edx]
	mov	edx, DWORD PTR tv8912[ebp]
	fld	ST(0)
	fmul	QWORD PTR [eax+edx]
	mov	edx, DWORD PTR tv6187[ebp]
	fxch	ST(1)
	fdiv	QWORD PTR [ecx+edx]
	mov	edx, DWORD PTR tv6292[ebp]
	add	eax, 8
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv6314[ebp]
	fmul	QWORD PTR [eax+edx-8]
	mov	edx, DWORD PTR tv6326[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR [eax+edx-8]

; 1242 :           ddAdv2dv2[k][i][j] = -0.125/a[k]/a[k]*dAdv2[k][i]*ds2[k][j]
; 1243 :                       + 0.125/a[k]*ddss22[k][i][j];

	mov	edx, DWORD PTR tv6187[ebp]
	fld	ST(0)
	fdiv	QWORD PTR [ecx+edx]
	mov	edx, DWORD PTR tv8919[ebp]
	fld	ST(0)
	fmul	QWORD PTR [eax+edx-8]
	fxch	ST(1)
	mov	edx, DWORD PTR tv6187[ebp]
	fdiv	QWORD PTR [ecx+edx]
	mov	ecx, DWORD PTR tv6292[ebp]
	mov	edx, DWORD PTR tv6318[ebp]
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv6322[ebp]
	fmul	QWORD PTR [eax+edx-8]

; 1244 :           dfdv2[k][i][j] = -ddAdv2dv1[k][i][j] - ddAdv2dv2[k][i][j];

	mov	edx, DWORD PTR tv6326[ebp]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR [eax+ecx-8]
	mov	ecx, DWORD PTR tv8930[ebp]
	fld	QWORD PTR [eax+edx-8]
	mov	edx, DWORD PTR _j$[ebp]
	fchs
	inc	edx
	fsubrp	ST(1), ST(0)
	mov	DWORD PTR _j$[ebp], edx
	fstp	QWORD PTR [eax+ecx-8]
	mov	ecx, DWORD PTR _web+616
	cmp	edx, ecx
	jl	$LN21@levine_ene@2

; 1227 :         ddss21[k][i][i] = -2*s1s2[k];
; 1228 :         ddss22[k][i][i] = 2*s1s1[k];
; 1229 :         for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(1)
$LN204@levine_ene@2:

; 1245 :         }
; 1246 :         dffdv1[k][i] = 2*SDIM_dot(dfdv1[k][i],dAdv);

	mov	eax, DWORD PTR tv6245[ebp]
	fstp	ST(0)
	push	ecx
	fstp	ST(0)
	mov	ecx, DWORD PTR [esi+eax]
	lea	edx, DWORD PTR _dAdv$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+edi*4]
	push	edx
	call	_dot
	fadd	ST(0), ST(0)
	mov	eax, DWORD PTR tv6199[ebp]
	mov	ecx, DWORD PTR [esi+eax]
	fstp	QWORD PTR [ecx+edi*8]

; 1247 :         dffdv2[k][i] = 2*SDIM_dot(dfdv2[k][i],dAdv);

	mov	edx, DWORD PTR _web+616
	mov	ecx, DWORD PTR tv6251[ebp]
	push	edx
	mov	edx, DWORD PTR [esi+ecx]
	lea	eax, DWORD PTR _dAdv$[ebp]
	push	eax
	mov	eax, DWORD PTR [edx+edi*4]
	push	eax
	call	_dot
	fld	QWORD PTR __real@4000000000000000
	mov	ecx, DWORD PTR tv6202[ebp]
	fmul	ST(1), ST(0)
	mov	edx, DWORD PTR [esi+ecx]
	fxch	ST(1)
	inc	edi
	fstp	QWORD PTR [edx+edi*8-8]
	add	esp, 24					; 00000018H
	cmp	edi, DWORD PTR _web+616
	jl	$LN138@levine_ene@2

; 1224 :       for ( i = 0 ; i < SDIM ; i++ )

	fld	QWORD PTR __real@bfe0000000000000
	fld	QWORD PTR __real@4010000000000000
	fld	QWORD PTR __real@4008000000000000
	fld	QWORD PTR __real@3fe0000000000000
	fxch	ST(2)
	fxch	ST(4)
	fxch	ST(1)
	fxch	ST(2)
$LN133@levine_ene@2:

; 1248 :       }
; 1249 : 
; 1250 :       if ( variety == PLAIN_SQ ) continue;
; 1251 :       dvnorm1[k][0][1] = -0.5*s2[2]/3;

	mov	eax, DWORD PTR tv6257[ebp]
	mov	ecx, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR _s2$[ebp]
	fld	QWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx]
	fmul	ST(0), ST(4)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR [edx+8]

; 1252 :       dvnorm1[k][0][2] =  0.5*s2[1]/3;

	fld	QWORD PTR [eax+8]
	fmul	ST(0), ST(1)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR [edx+16]

; 1253 :       dvnorm1[k][1][0] =  0.5*s2[2]/3;

	fld	QWORD PTR [eax+16]
	fmul	ST(0), ST(1)
	mov	edx, DWORD PTR [ecx+4]

; 1254 :       dvnorm1[k][1][2] = -0.5*s2[0]/3;
; 1255 :       dvnorm1[k][2][0] = -0.5*s2[1]/3;

	mov	ecx, DWORD PTR [ecx+8]
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR [edx]
	fld	QWORD PTR [eax]
	fmul	ST(0), ST(4)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR [edx+16]
	fld	QWORD PTR [eax+8]
	fmul	ST(0), ST(4)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR [ecx]

; 1256 :       dvnorm1[k][2][1] =  0.5*s2[0]/3;

	fld	QWORD PTR [eax]
	fmul	ST(0), ST(1)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR [ecx+8]

; 1257 :       dvnorm2[k][0][1] =  0.5*s1[2]/3;

	fld	QWORD PTR [ebx+16]
	fmul	ST(0), ST(1)
	mov	ecx, DWORD PTR tv6266[ebp]
	mov	eax, DWORD PTR [esi+ecx]
	mov	ecx, DWORD PTR [eax]
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR [ecx+8]

; 1258 :       dvnorm2[k][0][2] = -0.5*s1[1]/3;

	fld	QWORD PTR [ebx+8]
	fmul	ST(0), ST(4)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR [ecx+16]

; 1259 :       dvnorm2[k][1][0] = -0.5*s1[2]/3;

	fld	QWORD PTR [ebx+16]
	fmul	ST(0), ST(4)
	mov	ecx, DWORD PTR [eax+4]

; 1260 :       dvnorm2[k][1][2] =  0.5*s1[0]/3;
; 1261 :       dvnorm2[k][2][0] =  0.5*s1[1]/3;

	mov	eax, DWORD PTR [eax+8]
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR [ecx]
	fld	QWORD PTR [ebx]
	fmul	ST(0), ST(1)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR [ecx+16]
	fld	QWORD PTR [ebx+8]
	fmul	ST(0), ST(1)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR [eax]

; 1262 :       dvnorm2[k][2][1] = -0.5*s1[0]/3;

	fld	QWORD PTR [ebx]
	fmul	ST(0), ST(4)

; 1263 :       for ( i = 0 ; i < SDIM ; i++ )

	xor	ebx, ebx
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR [eax+8]
	mov	edx, DWORD PTR _web+616
	test	edx, edx
	jle	$LN26@levine_ene@2
	mov	edi, DWORD PTR tv6248[ebp]
	fstp	ST(1)
	fstp	ST(0)
	fstp	ST(0)
	fstp	ST(1)
	npad	3
$LL262@levine_ene@2:

; 1264 :       { dfndv1[k][i] = SDIM_dot(dfdv1[k][i],vnorm);

	mov	eax, DWORD PTR tv6245[ebp]
	fstp	ST(0)
	mov	ecx, DWORD PTR [esi+eax]
	push	edx
	lea	edx, DWORD PTR _vnorm$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+ebx*4]
	push	edx
	call	_dot
	mov	eax, DWORD PTR [esi+edi]

; 1265 :         dfndv1[k][i] += SDIM_dot(dAdv,dvnorm1[k][i]);

	mov	edx, DWORD PTR tv6257[ebp]
	fstp	QWORD PTR [eax+ebx*8]
	mov	ecx, DWORD PTR _web+616
	mov	eax, DWORD PTR [esi+edx]
	push	ecx
	mov	ecx, DWORD PTR [eax+ebx*4]
	push	ecx
	lea	edx, DWORD PTR _dAdv$[ebp]
	push	edx
	call	_dot
	mov	eax, DWORD PTR [esi+edi]
	fadd	QWORD PTR [eax+ebx*8]
	mov	ecx, eax

; 1266 :         dfndv2[k][i] = SDIM_dot(dfdv2[k][i],vnorm);

	lea	eax, DWORD PTR _vnorm$[ebp]
	fstp	QWORD PTR [ecx+ebx*8]
	mov	edx, DWORD PTR _web+616
	mov	ecx, DWORD PTR tv6251[ebp]
	push	edx
	mov	edx, DWORD PTR [esi+ecx]
	push	eax
	mov	eax, DWORD PTR [edx+ebx*4]
	push	eax
	call	_dot
	mov	ecx, DWORD PTR tv6254[ebp]
	mov	edx, DWORD PTR [esi+ecx]

; 1267 :         dfndv2[k][i] += SDIM_dot(dAdv,dvnorm2[k][i]);

	mov	ecx, DWORD PTR tv6266[ebp]
	fstp	QWORD PTR [edx+ebx*8]
	mov	eax, DWORD PTR _web+616
	mov	edx, DWORD PTR [esi+ecx]
	push	eax
	mov	eax, DWORD PTR [edx+ebx*4]
	push	eax
	lea	ecx, DWORD PTR _dAdv$[ebp]
	push	ecx
	call	_dot
	mov	eax, DWORD PTR tv6254[ebp]
	mov	edx, DWORD PTR [esi+eax]
	fadd	QWORD PTR [edx+ebx*8]
	mov	eax, edx

; 1268 :         dnndv1[k][i] = 2*SDIM_dot(vnorm,dvnorm1[k][i]);

	mov	edx, DWORD PTR tv6257[ebp]
	fstp	QWORD PTR [eax+ebx*8]
	mov	ecx, DWORD PTR _web+616
	mov	eax, DWORD PTR [esi+edx]
	push	ecx
	mov	ecx, DWORD PTR [eax+ebx*4]
	push	ecx
	lea	edx, DWORD PTR _vnorm$[ebp]
	push	edx
	call	_dot
	fadd	ST(0), ST(0)
	mov	eax, DWORD PTR tv6263[ebp]
	mov	ecx, DWORD PTR [esi+eax]

; 1269 :         dnndv2[k][i] = 2*SDIM_dot(vnorm,dvnorm2[k][i]);

	mov	eax, DWORD PTR tv6266[ebp]
	fstp	QWORD PTR [ecx+ebx*8]
	mov	edx, DWORD PTR _web+616
	mov	ecx, DWORD PTR [esi+eax]
	push	edx
	mov	edx, DWORD PTR [ecx+ebx*4]
	push	edx
	lea	eax, DWORD PTR _vnorm$[ebp]
	push	eax
	call	_dot
	fld	QWORD PTR __real@4000000000000000
	mov	ecx, DWORD PTR tv6272[ebp]
	fmul	ST(1), ST(0)
	mov	edx, DWORD PTR [esi+ecx]
	fxch	ST(1)
	add	esp, 72					; 00000048H
	fstp	QWORD PTR [edx+ebx*8]
	mov	edx, DWORD PTR _web+616
	inc	ebx

; 1263 :       for ( i = 0 ; i < SDIM ; i++ )

	cmp	ebx, edx
	jl	$LL262@levine_ene@2
	fld	QWORD PTR __real@bfe0000000000000
	fld	QWORD PTR __real@4010000000000000
	fld	QWORD PTR __real@4008000000000000
	fld	QWORD PTR __real@3fe0000000000000
	fxch	ST(2)
	fxch	ST(4)
	fxch	ST(1)
	fxch	ST(2)
$LN26@levine_ene@2:

; 1220 : 
; 1221 :     /* first, some more common terms */
; 1222 :     for ( k = 0 ; k < pairs ; k++ )

	add	DWORD PTR tv5997[ebp], 8
	mov	eax, 1
	add	DWORD PTR tv5696[ebp], eax
	add	esi, 4
	sub	DWORD PTR tv958[ebp], eax
	jne	$LN27@levine_ene@2
	mov	edi, DWORD PTR _pairs$[ebp]
	fstp	ST(1)
	fstp	ST(1)
	fstp	ST(2)
	fstp	ST(0)
	jmp	SHORT $LN25@levine_ene@2
$LN134@levine_ene@2:
	mov	edx, DWORD PTR _web+616
	fld	QWORD PTR __real@3fe0000000000000
$LN25@levine_ene@2:

; 1270 :       }
; 1271 :     }
; 1272 : 
; 1273 :   /* now, the actual gradients */
; 1274 : 
; 1275 :   if ( fn != 0.0 )

	fld	QWORD PTR _fn$[ebp]
	fld	ST(0)
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN215@levine_ene@2

; 1276 :     for ( k = 0 ; k < pairs ; k++ )

	test	edi, edi
	jle	$LN215@levine_ene@2
	mov	eax, DWORD PTR _dfndv1$[ebp]
	fld	QWORD PTR tv2769[ebp]
	mov	esi, DWORD PTR _dffdv1$[ebp]
	lea	ecx, DWORD PTR _dhh0$[ebp+56]
	mov	DWORD PTR tv7774[ebp], ecx
	mov	ecx, DWORD PTR _dffdv2$[ebp]
	sub	ecx, eax
	mov	DWORD PTR tv7881[ebp], ecx
	mov	ecx, DWORD PTR _dfndv2$[ebp]
	sub	esi, eax
	mov	ebx, 2
	sub	ecx, eax
	mov	DWORD PTR tv7682[ebp], ebx
	mov	DWORD PTR tv7684[ebp], 0
	mov	DWORD PTR tv7770[ebp], eax
	mov	DWORD PTR tv7876[ebp], esi
	mov	DWORD PTR tv7886[ebp], ecx
	mov	DWORD PTR tv7791[ebp], edi
	jmp	SHORT $LN13@levine_ene@2
$LN149@levine_ene@2:
	mov	esi, DWORD PTR tv7876[ebp]
$LN13@levine_ene@2:

; 1277 :     { 
; 1278 :       for ( i = 0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	cmp	edx, 4
	jl	$LC122@levine_ene@2
	mov	ebx, DWORD PTR [esi+eax]
	fld	ST(0)
	mov	edx, DWORD PTR [eax]
	fdiv	ST(0), ST(2)
	mov	esi, DWORD PTR tv7881[ebp]
	mov	esi, DWORD PTR [esi+eax]
	mov	DWORD PTR tv7879[ebp], ebx

; 1286 :         dhh0[0][i] -= g/2;

	sub	ebx, edx
	mov	DWORD PTR tv7901[ebp], ebx
	mov	DWORD PTR tv7884[ebp], esi
	mov	esi, DWORD PTR tv7886[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	ebx, DWORD PTR tv7884[ebp]
	sub	ebx, edx
	mov	DWORD PTR tv7889[ebp], eax
	add	eax, 24					; 00000018H
	mov	DWORD PTR tv7905[ebp], ebx
	mov	ebx, DWORD PTR tv7889[ebp]
	sub	ebx, edx
	mov	DWORD PTR tv6876[ebp], eax
	mov	eax, DWORD PTR tv7884[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR tv7909[ebp], ebx
	mov	esi, DWORD PTR tv7774[ebp]
	mov	DWORD PTR tv6888[ebp], eax
	lea	eax, DWORD PTR [edx+8]
	neg	edx
	lea	ebx, DWORD PTR _dhh0$[ebp+edx]
	mov	DWORD PTR tv7844[ebp], ebx
	lea	ebx, DWORD PTR _dhh0$[ebp+edx+8]
	lea	edx, DWORD PTR _dhh0$[ebp+edx+16]
	mov	DWORD PTR tv7848[ebp], ebx
	mov	ebx, DWORD PTR tv7879[ebp]
	mov	DWORD PTR tv7852[ebp], edx
	mov	edx, DWORD PTR tv7884[ebp]
	sub	ebx, edx
	mov	DWORD PTR tv7913[ebp], ebx
	mov	ebx, DWORD PTR tv7889[ebp]
	sub	ebx, edx
	mov	edx, DWORD PTR tv7879[ebp]
	sub	edx, DWORD PTR tv7889[ebp]
	mov	DWORD PTR tv7917[ebp], ebx
	mov	DWORD PTR tv7921[ebp], edx
	mov	edx, DWORD PTR tv7879[ebp]
	lea	ebx, DWORD PTR _dhh0$[ebp]
	sub	edx, ebx
	mov	ebx, DWORD PTR tv6888[ebp]
	mov	DWORD PTR tv7925[ebp], edx
	jmp	SHORT $LN131@levine_ene@2
$LN144@levine_ene@2:
	mov	edx, DWORD PTR tv7925[ebp]

; 1277 :     { 
; 1278 :       for ( i = 0 ; i < SDIM ; i++ )

$LN131@levine_ene@2:

; 1286 :         dhh0[0][i] -= g/2;

	lea	edx, DWORD PTR [edx+ecx*8]
	fld	QWORD PTR _dhh0$[ebp+edx]
	mov	edx, DWORD PTR tv6876[ebp]
	fdiv	ST(0), ST(3)
	fld	QWORD PTR [eax-8]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fld	QWORD PTR [esi-8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [esi-8]
	fsubr	QWORD PTR _dhh0$[ebp+ecx*8]
	fstp	QWORD PTR _dhh0$[ebp+ecx*8]
	fld	QWORD PTR [ebx-16]
	fdiv	ST(0), ST(3)
	fld	QWORD PTR [edx-24]
	fmul	ST(0), ST(2)
	mov	edx, DWORD PTR tv7682[ebp]
	dec	edx
	cmp	edx, edi
	mov	edx, 1
	fsubp	ST(1), ST(0)
	je	SHORT $LN124@levine_ene@2

; 1285 :         dhh0[(k+1==pairs)?1:k+2][i] += g/2;

	mov	edx, DWORD PTR tv7682[ebp]
$LN124@levine_ene@2:
	fmul	ST(0), ST(4)
	lea	edx, DWORD PTR [edx+edx*2]
	lea	edx, DWORD PTR [ecx+edx*2]
	lea	edx, DWORD PTR _dhh0$[ebp+edx*8]
	fld	ST(0)
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR tv7901[ebp]

; 1286 :         dhh0[0][i] -= g/2;

	fsubr	QWORD PTR _dhh0$[ebp+ecx*8]
	fstp	QWORD PTR _dhh0$[ebp+ecx*8]
	fld	QWORD PTR [eax+edx]
	mov	edx, DWORD PTR tv7844[ebp]
	fdiv	ST(0), ST(3)
	fld	QWORD PTR [eax]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fld	ST(0)
	fadd	QWORD PTR [esi]
	fstp	QWORD PTR [esi]
	fsubr	QWORD PTR [eax+edx]
	fstp	QWORD PTR [eax+edx]
	mov	edx, DWORD PTR tv7905[ebp]
	fld	QWORD PTR [eax+edx]
	mov	edx, DWORD PTR tv7909[ebp]
	fdiv	ST(0), ST(3)
	fld	QWORD PTR [eax+edx]
	fmul	ST(0), ST(2)
	mov	edx, DWORD PTR tv7682[ebp]
	dec	edx
	cmp	edx, edi
	mov	edx, 1
	fsubp	ST(1), ST(0)
	je	SHORT $LN126@levine_ene@2

; 1285 :         dhh0[(k+1==pairs)?1:k+2][i] += g/2;

	mov	edx, DWORD PTR tv7682[ebp]
$LN126@levine_ene@2:
	fmul	ST(0), ST(4)
	lea	edx, DWORD PTR [edx+edx*2]
	lea	edx, DWORD PTR [ecx+edx*2]
	fld	QWORD PTR _dhh0$[ebp+edx*8+8]
	lea	edx, DWORD PTR _dhh0$[ebp+edx*8+8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 1286 :         dhh0[0][i] -= g/2;

	mov	edx, DWORD PTR tv7844[ebp]
	fsubr	QWORD PTR [eax+edx]
	fstp	QWORD PTR [eax+edx]
	mov	edx, DWORD PTR tv7913[ebp]
	fld	QWORD PTR [edx+ebx]
	mov	edx, DWORD PTR tv7848[ebp]
	fdiv	ST(0), ST(3)
	fld	QWORD PTR [eax+8]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fld	ST(0)
	fadd	QWORD PTR [esi+8]
	fstp	QWORD PTR [esi+8]
	fsubr	QWORD PTR [eax+edx]
	fstp	QWORD PTR [eax+edx]
	mov	edx, DWORD PTR tv7917[ebp]
	fld	QWORD PTR [ebx]
	fdiv	ST(0), ST(3)
	fld	QWORD PTR [edx+ebx]
	fmul	ST(0), ST(2)
	mov	edx, DWORD PTR tv7682[ebp]
	lea	ebx, DWORD PTR [edx-1]
	fsubp	ST(1), ST(0)
	cmp	ebx, edi
	jne	SHORT $LN127@levine_ene@2

; 1285 :         dhh0[(k+1==pairs)?1:k+2][i] += g/2;

	mov	edx, 1
$LN127@levine_ene@2:
	fmul	ST(0), ST(4)
	mov	ebx, DWORD PTR tv7921[ebp]
	lea	edx, DWORD PTR [edx+edx*2]
	lea	edx, DWORD PTR [ecx+edx*2]
	fld	QWORD PTR _dhh0$[ebp+edx*8+16]
	lea	edx, DWORD PTR _dhh0$[ebp+edx*8+16]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 1286 :         dhh0[0][i] -= g/2;

	mov	edx, DWORD PTR tv7848[ebp]
	fsubr	QWORD PTR [eax+edx]
	fstp	QWORD PTR [eax+edx]
	mov	edx, DWORD PTR tv6876[ebp]
	fld	QWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR tv7852[ebp]
	fdiv	ST(0), ST(3)
	fld	QWORD PTR [eax+16]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fld	QWORD PTR [esi+16]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [esi+16]
	fsubr	QWORD PTR [eax+ebx]
	fstp	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv6888[ebp]
	fld	QWORD PTR [ebx+8]
	fdiv	ST(0), ST(3)
	fld	ST(1)
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv7682[ebp]
	dec	edx
	cmp	edx, edi
	fsubp	ST(1), ST(0)
	mov	edx, 1
	je	SHORT $LN130@levine_ene@2

; 1285 :         dhh0[(k+1==pairs)?1:k+2][i] += g/2;

	mov	edx, DWORD PTR tv7682[ebp]
$LN130@levine_ene@2:

; 1286 :         dhh0[0][i] -= g/2;

	add	DWORD PTR tv6876[ebp], 32		; 00000020H
	fmul	ST(0), ST(4)
	lea	edx, DWORD PTR [edx+edx*2]
	lea	edx, DWORD PTR [ecx+edx*2]
	fld	QWORD PTR _dhh0$[ebp+edx*8+24]
	lea	edx, DWORD PTR _dhh0$[ebp+edx*8+24]
	fadd	ST(0), ST(1)
	add	ecx, 4
	add	ebx, 32					; 00000020H
	add	eax, 32					; 00000020H
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR tv7852[ebp]
	add	esi, 32					; 00000020H
	fsubr	QWORD PTR [eax+edx-32]
	mov	DWORD PTR tv6888[ebp], ebx
	fstp	QWORD PTR [eax+edx-32]
	mov	edx, DWORD PTR _web+616
	add	edx, -3					; fffffffdH
	cmp	ecx, edx
	jl	$LN144@levine_ene@2
	mov	eax, DWORD PTR tv7770[ebp]
	fstp	ST(0)
	mov	ebx, DWORD PTR tv7682[ebp]
	mov	edx, DWORD PTR _web+616
$LC122@levine_ene@2:

; 1277 :     { 
; 1278 :       for ( i = 0 ; i < SDIM ; i++ )

	cmp	ecx, edx
	jge	$LN12@levine_ene@2
	mov	ebx, DWORD PTR tv7684[ebp]
	fld	ST(0)
	mov	esi, DWORD PTR [eax]
	fdiv	ST(0), ST(2)
	add	ebx, ecx
	lea	ebx, DWORD PTR _dhh0$[ebp+ebx*8+48]
	mov	DWORD PTR tv7372[ebp], ebx
	mov	ebx, DWORD PTR tv7876[ebp]
	mov	ebx, DWORD PTR [ebx+eax]
	sub	ebx, esi
	mov	DWORD PTR tv7901[ebp], ebx
	mov	ebx, DWORD PTR tv7881[ebp]
	mov	ebx, DWORD PTR [ebx+eax]
	sub	ebx, esi
	mov	DWORD PTR tv7905[ebp], ebx
	mov	ebx, DWORD PTR tv7886[ebp]
	mov	ebx, DWORD PTR [ebx+eax]
	sub	ebx, esi
	mov	DWORD PTR tv7909[ebp], ebx
	lea	ebx, DWORD PTR _dhh0$[ebp]
	sub	esi, ebx
	mov	DWORD PTR tv7872[ebp], esi
	jmp	SHORT $LC10@levine_ene@2
$LN148@levine_ene@2:
	mov	esi, DWORD PTR tv7872[ebp]
$LC10@levine_ene@2:

; 1279 :       { 
; 1280 :         g = dffdv1[k][i]/fn - ff/fn/fn*dfndv1[k][i];

	mov	ebx, DWORD PTR tv7901[ebp]
	lea	esi, DWORD PTR [esi+ecx*8]
	lea	esi, DWORD PTR _dhh0$[ebp+esi]
	fld	QWORD PTR [ebx+esi]

; 1281 :         dhh0[k+1][i] += g/2;

	mov	ebx, DWORD PTR tv7372[ebp]
	fdiv	ST(0), ST(3)
	fld	QWORD PTR [esi]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fld	ST(0)
	fadd	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]

; 1282 :         dhh0[0][i] -= g/2;
; 1283 : 
; 1284 :         g = dffdv2[k][i]/fn - ff/fn/fn*dfndv2[k][i];

	mov	ebx, DWORD PTR tv7905[ebp]
	fsubr	QWORD PTR _dhh0$[ebp+ecx*8]
	fstp	QWORD PTR _dhh0$[ebp+ecx*8]
	fld	QWORD PTR [ebx+esi]
	mov	ebx, DWORD PTR tv7909[ebp]
	fdiv	ST(0), ST(3)
	fld	QWORD PTR [ebx+esi]
	fmul	ST(0), ST(2)

; 1285 :         dhh0[(k+1==pairs)?1:k+2][i] += g/2;

	mov	ebx, DWORD PTR tv7682[ebp]
	lea	esi, DWORD PTR [ebx-1]
	cmp	esi, edi
	mov	esi, 1
	fsubp	ST(1), ST(0)
	je	SHORT $LN81@levine_ene@2
	mov	esi, ebx
$LN81@levine_ene@2:

; 1277 :     { 
; 1278 :       for ( i = 0 ; i < SDIM ; i++ )

	add	DWORD PTR tv7372[ebp], 8

; 1285 :         dhh0[(k+1==pairs)?1:k+2][i] += g/2;

	fmul	ST(0), ST(4)
	lea	esi, DWORD PTR [esi+esi*2]
	lea	esi, DWORD PTR [ecx+esi*2]
	fld	ST(0)
	lea	esi, DWORD PTR _dhh0$[ebp+esi*8]
	fadd	QWORD PTR [esi]
	inc	ecx
	fstp	QWORD PTR [esi]

; 1286 :         dhh0[0][i] -= g/2;

	fsubr	QWORD PTR _dhh0$[ebp+ecx*8-8]
	fstp	QWORD PTR _dhh0$[ebp+ecx*8-8]
	cmp	ecx, edx
	jl	$LN148@levine_ene@2

; 1277 :     { 
; 1278 :       for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)
$LN12@levine_ene@2:

; 1276 :     for ( k = 0 ; k < pairs ; k++ )

	add	DWORD PTR tv7774[ebp], 48		; 00000030H
	add	DWORD PTR tv7684[ebp], 6
	add	eax, 4
	inc	ebx
	dec	DWORD PTR tv7791[ebp]
	mov	DWORD PTR tv7770[ebp], eax
	mov	DWORD PTR tv7682[ebp], ebx
	jne	$LN149@levine_ene@2

; 1277 :     { 
; 1278 :       for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(1)
	fstp	ST(1)
$LN275@levine_ene@2:

; 1287 : 
; 1288 :       }
; 1289 :     }
; 1290 : 
; 1291 : 
; 1292 : #ifdef APPROX_LEVINE
; 1293 :   for ( k = 0 ; k < v_info->vcount ; k++ )
; 1294 :    for ( i = 0 ; i < SDIM ; i++ )
; 1295 :    { REAL droot = root==0.0 ? 0.0 : 0.5/root*(2*hh0*dhh0[k][i] - dgc[k][i]);
; 1296 :      REAL dkappa1 = dhh0[k][i] + droot;
; 1297 :      REAL dkappa2 = dhh0[k][i] - droot;
; 1298 :      v_info->grad[k][i] += coeff*ddef[k][i] 
; 1299 :       + (2*hh0*dhh0[k][i]-dgc[k][i])/levine_a*levine_t*(1+2*hh0*levine_t)*area
; 1300 :          + (hh0*hh0 - gc)/levine_a*levine_t*(2*dhh0[k][i]*levine_t)*area
; 1301 :          + (hh0*hh0 - gc)/levine_a*levine_t*(1 + 2*hh0*levine_t)*darea[k][i];
; 1302 :    } 
; 1303 : #else
; 1304 :   for ( k = 0 ; k < v_info->vcount ; k++ )

	mov	eax, DWORD PTR _v_info$GSCopy$[ebp]
	fstp	ST(0)
	xor	ebx, ebx
	cmp	DWORD PTR [eax+12], ebx
	jle	$LN5@levine_ene@2
	xor	edi, edi
$LL142@levine_ene@2:

; 1305 :    for ( i = 0 ; i < SDIM ; i++ )

	xor	esi, esi
	test	edx, edx
	jle	$LN6@levine_ene@2
	fld	QWORD PTR _kappa2$[ebp]
	fld	QWORD PTR _levine_t
	fmul	ST(1), ST(0)
	fld1
	fld	ST(0)
	fsubrp	ST(3), ST(0)
	fld	ST(0)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR tv3416[ebp]
	fld	QWORD PTR _kappa1$[ebp]
	fmulp	ST(2), ST(0)
	fld	ST(0)
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv2781[ebp]
	fdivp	ST(1), ST(0)
	fstp	QWORD PTR tv3423[ebp]
	call	__CIlog

; 1309 :      v_info->grad[k][i] += coeff*ddef[k][i] 
; 1310 :          + (
; 1311 :            droot/2/levine_a*
; 1312 :                (log(1-kappa2*levine_t)-log(1-kappa1*levine_t))*area
; 1313 :          + root/2/levine_a*
; 1314 :                (1/(1-kappa2*levine_t)*(-dkappa2*levine_t)
; 1315 :                     -1/(1-kappa1*levine_t)*(-dkappa1*levine_t))*area
; 1316 :          + root/2/levine_a*
; 1317 :                (log(1-kappa2*levine_t)-log(1-kappa1*levine_t))*darea[k][i]);

	fstp	QWORD PTR tv8612[ebp]
	fld	QWORD PTR tv2781[ebp]
	call	__CIlog
	fsubr	QWORD PTR tv8612[ebp]
	fld	QWORD PTR _root$[ebp]
	fld	ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fdiv	QWORD PTR _levine_a
	fld	ST(0)
	fmul	ST(0), ST(4)
	fstp	QWORD PTR tv3437[ebp]
	fld	QWORD PTR _levine_t
	fld	QWORD PTR _area$[ebp]
	jmp	SHORT $LN4@levine_ene@2
$LN215@levine_ene@2:

; 1276 :     for ( k = 0 ; k < pairs ; k++ )

	fstp	ST(0)

; 1270 :       }
; 1271 :     }
; 1272 : 
; 1273 :   /* now, the actual gradients */
; 1274 : 
; 1275 :   if ( fn != 0.0 )

	jmp	$LN275@levine_ene@2
$LN140@levine_ene@2:

; 1309 :      v_info->grad[k][i] += coeff*ddef[k][i] 
; 1310 :          + (
; 1311 :            droot/2/levine_a*
; 1312 :                (log(1-kappa2*levine_t)-log(1-kappa1*levine_t))*area
; 1313 :          + root/2/levine_a*
; 1314 :                (1/(1-kappa2*levine_t)*(-dkappa2*levine_t)
; 1315 :                     -1/(1-kappa1*levine_t)*(-dkappa1*levine_t))*area
; 1316 :          + root/2/levine_a*
; 1317 :                (log(1-kappa2*levine_t)-log(1-kappa1*levine_t))*darea[k][i]);

	fld	QWORD PTR _levine_t
	fld	QWORD PTR _root$[ebp]
	fxch	ST(4)
$LN4@levine_ene@2:

; 1306 :    { REAL droot = root==0.0 ? 0.0 : 0.5/root*(2*hh0*dhh0[k][i] - dgc[k][i]);

	fld	ST(4)
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN82@levine_ene@2
	fstp	ST(4)
	fldz
	jmp	SHORT $LN83@levine_ene@2
$LN82@levine_ene@2:
	fld	QWORD PTR _hh0$[ebp]
	lea	ecx, DWORD PTR [edi+esi*8]
	fadd	ST(0), ST(0)
	lea	edx, DWORD PTR [edi+esi*8]
	fmul	QWORD PTR _dhh0$[ebp+ecx]
	fsub	QWORD PTR _dgc$[ebp+edx]
	fld	ST(4)
	fdivrp	ST(6), ST(0)
	fmulp	ST(5), ST(0)
	fxch	ST(4)
$LN83@levine_ene@2:

; 1307 :      REAL dkappa1 = dhh0[k][i] + droot;
; 1308 :      REAL dkappa2 = dhh0[k][i] - droot;

	lea	eax, DWORD PTR [edi+esi*8]
	fld	QWORD PTR _dhh0$[ebp+eax]
	lea	eax, DWORD PTR _dhh0$[ebp+eax]
	fsub	ST(0), ST(1)
	mov	ecx, DWORD PTR _v_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [ecx+1336]
	mov	ecx, DWORD PTR [edx+ebx*4]

; 1309 :      v_info->grad[k][i] += coeff*ddef[k][i] 
; 1310 :          + (
; 1311 :            droot/2/levine_a*
; 1312 :                (log(1-kappa2*levine_t)-log(1-kappa1*levine_t))*area
; 1313 :          + root/2/levine_a*
; 1314 :                (1/(1-kappa2*levine_t)*(-dkappa2*levine_t)
; 1315 :                     -1/(1-kappa1*levine_t)*(-dkappa1*levine_t))*area
; 1316 :          + root/2/levine_a*
; 1317 :                (log(1-kappa2*levine_t)-log(1-kappa1*levine_t))*darea[k][i]);

	fmul	ST(0), ST(2)
	lea	edx, DWORD PTR [edi+esi*8]
	lea	ecx, DWORD PTR [ecx+esi*8]
	fchs
	fmul	QWORD PTR tv3416[ebp]
	fld	QWORD PTR [eax]
	lea	eax, DWORD PTR [edi+esi*8]
	fadd	ST(0), ST(2)
	inc	esi
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fchs
	fmul	QWORD PTR tv3423[ebp]
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(4)
	fxch	ST(1)
	fmul	ST(0), ST(3)
	fdiv	QWORD PTR _levine_a
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _darea$[ebp+edx]
	fmul	QWORD PTR tv3437[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddef$[ebp+eax]
	fmul	QWORD PTR _coeff$[ebp]
	faddp	ST(1), ST(0)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR _web+616
	cmp	esi, edx
	jl	$LN140@levine_ene@2

; 1305 :    for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(3)
	fstp	ST(2)
	fstp	ST(1)
	fstp	ST(0)
$LN6@levine_ene@2:

; 1287 : 
; 1288 :       }
; 1289 :     }
; 1290 : 
; 1291 : 
; 1292 : #ifdef APPROX_LEVINE
; 1293 :   for ( k = 0 ; k < v_info->vcount ; k++ )
; 1294 :    for ( i = 0 ; i < SDIM ; i++ )
; 1295 :    { REAL droot = root==0.0 ? 0.0 : 0.5/root*(2*hh0*dhh0[k][i] - dgc[k][i]);
; 1296 :      REAL dkappa1 = dhh0[k][i] + droot;
; 1297 :      REAL dkappa2 = dhh0[k][i] - droot;
; 1298 :      v_info->grad[k][i] += coeff*ddef[k][i] 
; 1299 :       + (2*hh0*dhh0[k][i]-dgc[k][i])/levine_a*levine_t*(1+2*hh0*levine_t)*area
; 1300 :          + (hh0*hh0 - gc)/levine_a*levine_t*(2*dhh0[k][i]*levine_t)*area
; 1301 :          + (hh0*hh0 - gc)/levine_a*levine_t*(1 + 2*hh0*levine_t)*darea[k][i];
; 1302 :    } 
; 1303 : #else
; 1304 :   for ( k = 0 ; k < v_info->vcount ; k++ )

	mov	ecx, DWORD PTR _v_info$GSCopy$[ebp]
	inc	ebx
	add	edi, 48					; 00000030H
	cmp	ebx, DWORD PTR [ecx+12]
	jl	$LL142@levine_ene@2
$LN5@levine_ene@2:

; 1318 :    } 
; 1319 : #endif
; 1320 : 
; 1321 :   if ( mode == METHOD_GRADIENT )  

	fld	QWORD PTR _energy$[ebp]
$LN152@levine_ene@2:

; 1322 :     return energy;
; 1323 : 
; 1324 :   /* No hessian yet */
; 1325 :   return energy;
; 1326 : 
; 1327 : } // end levine_energy_all(

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	ebx
	pop	edi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_levine_energy_all ENDP
_TEXT	ENDS
PUBLIC	_levine_energy_value
; Function compile flags: /Ogtp
;	COMDAT _levine_energy_value
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_levine_energy_value PROC				; COMDAT

; 1336 : { return levine_energy_all(v_info,METHOD_VALUE);

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v_info$[ebp]
	push	1767					; 000006e7H
	push	eax
	call	_levine_energy_all
	add	esp, 8

; 1337 : }

	pop	ebp
	ret	0
_levine_energy_value ENDP
_TEXT	ENDS
PUBLIC	_levine_energy_grad
; Function compile flags: /Ogtp
;	COMDAT _levine_energy_grad
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_levine_energy_grad PROC				; COMDAT

; 1341 : { return levine_energy_all(v_info,METHOD_GRADIENT);

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v_info$[ebp]
	push	4321					; 000010e1H
	push	eax
	call	_levine_energy_all
	add	esp, 8

; 1342 : }

	pop	ebp
	ret	0
_levine_energy_grad ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_sqgauss_energy
; Function compile flags: /Ogtp
;	COMDAT _sqgauss_energy
_TEXT	SEGMENT
_modulus$ = -248					; size = 8
tv643 = -240						; size = 8
tv505 = -236						; size = 4
tv620 = -232						; size = 8
tv761 = -228						; size = 4
tv942 = -224						; size = 8
tv833 = -220						; size = 4
_i$ = -220						; size = 4
_fixcount$ = -216					; size = 4
_gverts$ = -212						; size = 4
_side$ = -208						; size = 144
_st$ = -64						; size = 24
_v$ = -40						; size = 12
_ss$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_sqgauss_energy PROC					; COMDAT

; 165  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 166  :   REAL modulus = globals(sqgauss_param)->value.real;

	mov	eax, DWORD PTR _sqgauss_param
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN24@sqgauss_en
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN26@sqgauss_en
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN25@sqgauss_en
$LN26@sqgauss_en:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN24@sqgauss_en
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN25@sqgauss_en
$LN24@sqgauss_en:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN25@sqgauss_en:

; 167  :   vertex_id v_id,v[3];
; 168  :   edge_id e_id;
; 169  :   facet_id f_id;
; 170  :   facetedge_id fe;
; 171  :   int fixcount;
; 172  :   int i;
; 173  :   REAL area;
; 174  :   REAL side[3][MAXCOORD];
; 175  :   REAL ss[3];
; 176  :   REAL st[3];
; 177  :   REAL angle;
; 178  :   REAL c;
; 179  :   REAL gc;  /* gaussian curvarture */
; 180  :   struct gvert { REAL angle;
; 181  :                  REAL area;
; 182  :                  REAL star_area;
; 183  :                 } *gverts,*gv;
; 184  : 
; 185  :   gverts = (struct gvert*)temp_calloc(web.skel[VERTEX].max_ord+1,
; 186  :                                             sizeof(struct gvert));

	mov	ecx, DWORD PTR _web+68
	fld	QWORD PTR [eax+64]
	push	ebx
	fstp	QWORD PTR _modulus$[ebp]
	push	esi
	push	edi
	push	186					; 000000baH
	push	OFFSET ??_C@_07EIDGGOJA@GAUSS?4C?$AA@
	inc	ecx
	push	24					; 00000018H
	push	ecx
	call	_kb_temp_calloc

; 187  : 
; 188  :   /* accumulate angles around vertices */
; 189  :   FOR_ALL_FACETS(f_id)

	mov	esi, DWORD PTR _web+272
	mov	edx, esi
	shr	edx, 28					; 0000001cH
	add	esp, 16					; 00000010H
	and	edx, 1
	mov	DWORD PTR _gverts$[ebp], eax
	je	$LN60@sqgauss_en
	npad	11
$LL21@sqgauss_en:
	mov	eax, DWORD PTR _web+236
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	edi, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR [edi+8]
	and	eax, 1
	xor	ebx, ebx
	or	eax, ebx
	mov	DWORD PTR tv505[ebp], ecx
	je	$LN20@sqgauss_en

; 190  :     { fe = get_facet_fe(f_id);

	xor	eax, eax
	cmp	edx, eax
	je	SHORT $LN36@sqgauss_en
$LN35@sqgauss_en:
	mov	edi, DWORD PTR [edi+28]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN34@sqgauss_en
	xor	edi, 134217728				; 08000000H
$LN34@sqgauss_en:
	mov	ebx, edi
$LN36@sqgauss_en:

; 191  :       fixcount = 0;

	lea	ecx, DWORD PTR _side$[ebp]
	mov	DWORD PTR _fixcount$[ebp], eax

; 192  :       for ( i = 0; i < FACET_VERTS ; i++,fe=get_next_edge(fe) )

	mov	DWORD PTR _i$[ebp], eax
	mov	eax, DWORD PTR _web+460
	mov	DWORD PTR tv761[ebp], ecx
$LL58@sqgauss_en:

; 193  :         { e_id = get_fe_edge(fe);

	mov	edi, ebx
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	edx, DWORD PTR [edi+eax]

; 194  :           get_edge_side(e_id,side[i]);

	mov	eax, DWORD PTR tv761[ebp]
	mov	esi, ebx
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [edx+20]
	push	eax
	push	esi
	call	_get_edge_side

; 195  :           v[i] = get_edge_tailv(e_id);

	mov	ecx, DWORD PTR _web+124
	mov	eax, DWORD PTR _dymem
	add	esp, 8
	test	esi, 134217728				; 08000000H
	je	SHORT $LN45@sqgauss_en
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	ecx, DWORD PTR _web+216
	add	edx, DWORD PTR [ecx+eax+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN44@sqgauss_en
$LN45@sqgauss_en:
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	ecx, DWORD PTR _web+216
	mov	eax, DWORD PTR [ecx+eax+304]
	mov	eax, DWORD PTR [edx+eax]
$LN44@sqgauss_en:
	mov	edx, DWORD PTR _i$[ebp]

; 196  :           if ( get_vattr(v[i]) & (FIXED|BOUNDARY) ) fixcount++;

	mov	ecx, DWORD PTR _web+12
	mov	DWORD PTR _v$[ebp+edx*4], eax
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 192				; 000000c0H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN15@sqgauss_en
	inc	DWORD PTR _fixcount$[ebp]
$LN15@sqgauss_en:

; 192  :       for ( i = 0; i < FACET_VERTS ; i++,fe=get_next_edge(fe) )

	add	DWORD PTR tv761[ebp], 48		; 00000030H
	mov	eax, DWORD PTR _web+460
	mov	ecx, DWORD PTR [edi+eax]
	inc	edx
	mov	DWORD PTR _i$[ebp], edx
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN39@sqgauss_en
	mov	ebx, DWORD PTR [ecx+28]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN53@sqgauss_en
$LN39@sqgauss_en:
	mov	ebx, DWORD PTR [ecx+32]
$LN53@sqgauss_en:
	cmp	edx, 3
	jl	$LL58@sqgauss_en

; 197  :         }
; 198  :         for ( i = 0 ; i < FACET_VERTS ; i++ )

	xor	esi, esi
	lea	edi, DWORD PTR _side$[ebp]
	npad	1
$LL12@sqgauss_en:

; 199  :          { ss[i] = SDIM_dot(side[i],side[i]);

	mov	edx, DWORD PTR _web+616
	push	edx
	push	edi
	push	edi
	call	_dot
	fstp	QWORD PTR _ss$[ebp+esi*8]

; 200  :             st[i] = SDIM_dot(side[i],side[(i+2)%3]);

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	eax, DWORD PTR [esi+2]
	cdq
	mov	ecx, 3
	idiv	ecx
	lea	edx, DWORD PTR [edx+edx*2]
	add	edx, edx
	lea	eax, DWORD PTR _side$[ebp+edx*8]
	push	eax
	push	edi
	call	_dot
	fstp	QWORD PTR _st$[ebp+esi*8]
	inc	esi
	add	esp, 24					; 00000018H
	add	edi, 48					; 00000030H
	cmp	esi, 3
	jl	SHORT $LL12@sqgauss_en

; 201  :          }
; 202  :         area = 0.5*sqrt(ss[0]*ss[1]-st[1]*st[1]);

	fld	QWORD PTR _ss$[ebp+8]
	fmul	QWORD PTR _ss$[ebp]
	fld	QWORD PTR _st$[ebp+8]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000

; 203  :         for ( i = 0 ; i < FACET_VERTS ; i++ )

	fld	QWORD PTR __real@4008000000000000
	mov	ecx, 3
	xor	esi, esi
	fdivr	ST(0), ST(1)
	sub	ecx, DWORD PTR _fixcount$[ebp]
	mov	DWORD PTR tv833[ebp], ecx
	fstp	QWORD PTR tv620[ebp]
	fild	DWORD PTR tv833[ebp]
	fdivp	ST(1), ST(0)
	fstp	QWORD PTR tv942[ebp]
	npad	3
$LL9@sqgauss_en:

; 204  :         { c = -st[i]/sqrt(ss[i]*ss[(i+2)%3]);

	lea	eax, DWORD PTR [esi+2]
	cdq
	mov	ecx, 3
	idiv	ecx
	fld	QWORD PTR _ss$[ebp+edx*8]
	fmul	QWORD PTR _ss$[ebp+esi*8]
	call	__CIsqrt
	fdivr	QWORD PTR _st$[ebp+esi*8]
	fchs

; 205  :           angle = acos(c);

	call	__CIacos

; 206  :           gv = gverts + loc_ordinal(v[i]);

	mov	eax, DWORD PTR _v$[ebp+esi*4]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN30@sqgauss_en
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN31@sqgauss_en
$LN30@sqgauss_en:
	or	eax, -1
$LN31@sqgauss_en:
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR _gverts$[ebp]

; 207  :           gv->angle += angle;

	fadd	QWORD PTR [eax+edx*8]
	lea	eax, DWORD PTR [eax+edx*8]
	inc	esi
	fstp	QWORD PTR [eax]

; 208  :           gv->area  += area/3;

	fld	QWORD PTR [eax+8]
	fadd	QWORD PTR tv620[ebp]
	fstp	QWORD PTR [eax+8]

; 209  :           gv->star_area  += area/(3-fixcount);

	fld	QWORD PTR tv942[ebp]
	fadd	QWORD PTR [eax+16]
	fstp	QWORD PTR [eax+16]
	cmp	esi, 3
	jl	SHORT $LL9@sqgauss_en

; 203  :         for ( i = 0 ; i < FACET_VERTS ; i++ )

	mov	ecx, DWORD PTR tv505[ebp]
$LN20@sqgauss_en:

; 187  : 
; 188  :   /* accumulate angles around vertices */
; 189  :   FOR_ALL_FACETS(f_id)

	mov	edx, DWORD PTR _web+236
	mov	eax, DWORD PTR [ecx+edx]
	mov	esi, DWORD PTR [eax]
	mov	edx, esi
	shr	edx, 28					; 0000001cH
	and	edx, 1
	jne	$LL21@sqgauss_en
$LN60@sqgauss_en:

; 210  :         }
; 211  :     }
; 212  :   
; 213  :   /* calc square gauss curvature at each vertex */
; 214  :   FOR_ALL_VERTICES(v_id)

	mov	ebx, DWORD PTR _web+48
	mov	edx, ebx
	shr	edx, 28					; 0000001cH
	and	edx, 1
	je	$LN4@sqgauss_en
	npad	6
$LL62@sqgauss_en:
	mov	ecx, DWORD PTR _web+12
	mov	esi, ebx
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+esi*4]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR tv643[ebp+4], eax
	mov	eax, ecx
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	je	SHORT $LN5@sqgauss_en

; 215  :     { struct gvert *vg = gverts + loc_ordinal(v_id);

	test	edx, edx
	je	SHORT $LN32@sqgauss_en
	mov	eax, esi
	jmp	SHORT $LN33@sqgauss_en
$LN32@sqgauss_en:
	or	eax, -1
$LN33@sqgauss_en:
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR _gverts$[ebp]
	lea	edi, DWORD PTR [eax+edx*8]

; 216  :       if ( get_vattr(v_id) & (FIXED|BOUNDARY) ) continue;

	and	ecx, 192				; 000000c0H
	xor	eax, eax
	or	ecx, eax
	jne	SHORT $LN5@sqgauss_en

; 217  :       gc = (wedge_angle(v_id) - vg->angle)/vg->area;

	push	ebx
	call	_wedge_angle
	fsub	QWORD PTR [edi]

; 218  :       binary_tree_add(web.total_energy_addends,modulus*gc*gc*vg->star_area);

	push	ecx
	fdiv	QWORD PTR [edi+8]
	fld	QWORD PTR _modulus$[ebp]
	fmul	ST(0), ST(1)
	fmulp	ST(1), ST(0)
	fmul	QWORD PTR [edi+16]
	fstp	QWORD PTR [esp]
	push	OFFSET _web+1248
	call	_binary_tree_add
	add	esp, 12					; 0000000cH
$LN5@sqgauss_en:

; 210  :         }
; 211  :     }
; 212  :   
; 213  :   /* calc square gauss curvature at each vertex */
; 214  :   FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR _web+12
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	ebx, DWORD PTR [edx]
	mov	edx, ebx
	shr	edx, 28					; 0000001cH
	and	edx, 1
	jne	$LL62@sqgauss_en
$LN4@sqgauss_en:

; 219  :     }
; 220  : 
; 221  :   temp_free((char*)gverts);

	mov	eax, DWORD PTR _gverts$[ebp]
	push	eax
	call	_temp_free

; 222  : 
; 223  : } // end sqgauss_energy()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 4
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_sqgauss_energy ENDP
_TEXT	ENDS
END
