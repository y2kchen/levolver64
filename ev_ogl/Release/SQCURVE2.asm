; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\SQCURVE2.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_sqcurve_init_timestamp:DWORD
COMM	_sqcurve_grad_init_timestamp:DWORD
_DATA	ENDS
PUBLIC	_get_fe_edge
EXTRN	_web:BYTE
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
;	COMDAT _get_fe_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_edge PROC					; COMDAT

; 43   : {

	push	ebp
	mov	ebp, esp

; 44   :   edge_id e_id;
; 45   :     
; 46   :   e_id = feptr(fe_id)->fe_edge_id;

	mov	eax, DWORD PTR _fe_id$[ebp]

; 47   : 
; 48   :   /*
; 49   :   if ( inverted(fe_id) ) invert(e_id);
; 50   :   return e_id;
; 51   :   */
; 52   :   
; 53   :   return same_sign(e_id,fe_id);

	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]

; 54   : }

	pop	ebp
	ret	0
_get_fe_edge ENDP
_TEXT	ENDS
PUBLIC	_get_fe_facet
EXTRN	_NULLFACET:DWORD
; Function compile flags: /Ogtp
;	COMDAT _get_fe_facet
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_facet PROC					; COMDAT

; 58   : {

	push	ebp
	mov	ebp, esp

; 59   :   facet_id f_id;
; 60   :   
; 61   :   if ( !valid_id(fe_id) ) return NULLFACET;

	mov	ecx, DWORD PTR _fe_id$[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN2@get_fe_fac
	mov	eax, DWORD PTR _NULLFACET

; 64   :   return f_id;
; 65   : }

	pop	ebp
	ret	0
$LN2@get_fe_fac:

; 62   :   f_id = feptr(fe_id)->fe_facet_id;

	mov	edx, DWORD PTR _web+460
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+24]

; 63   :   if ( inverted(fe_id) ) invert(f_id);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_fe_fac
	xor	eax, 134217728				; 08000000H
$LN3@get_fe_fac:

; 64   :   return f_id;
; 65   : }

	pop	ebp
	ret	0
_get_fe_facet ENDP
_TEXT	ENDS
PUBLIC	_get_prev_edge
; Function compile flags: /Ogtp
;	COMDAT _get_prev_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_prev_edge PROC					; COMDAT

; 69   : {

	push	ebp
	mov	ebp, esp

; 70   :   if ( inverted(fe_id) ) return inverse_id(feptr(fe_id)->nextedge[1]);

	mov	eax, DWORD PTR _fe_id$[ebp]
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_prev_e
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H

; 72   : }

	pop	ebp
	ret	0
$LN2@get_prev_e:

; 71   :   else return feptr(fe_id)->nextedge[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]

; 72   : }

	pop	ebp
	ret	0
_get_prev_edge ENDP
_TEXT	ENDS
PUBLIC	_get_next_edge
; Function compile flags: /Ogtp
;	COMDAT _get_next_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_next_edge PROC					; COMDAT

; 76   : {

	push	ebp
	mov	ebp, esp

; 77   :   if ( inverted(fe_id) ) return inverse_id(feptr(fe_id)->nextedge[0]);

	mov	eax, DWORD PTR _fe_id$[ebp]
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_next_e
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H

; 79   : }

	pop	ebp
	ret	0
$LN2@get_next_e:

; 78   :   else return feptr(fe_id)->nextedge[1];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]

; 79   : }

	pop	ebp
	ret	0
_get_next_edge ENDP
_TEXT	ENDS
PUBLIC	_get_next_facet
; Function compile flags: /Ogtp
;	COMDAT _get_next_facet
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_next_facet PROC					; COMDAT

; 92   : {

	push	ebp
	mov	ebp, esp

; 93   :   if ( inverted(fe_id) ) 

	mov	eax, DWORD PTR _fe_id$[ebp]

; 94   :     return inverse_id(feptr(fe_id)->nextfacet[0]);

	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_next_f
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H

; 97   : }

	pop	ebp
	ret	0
$LN2@get_next_f:

; 95   :   else 
; 96   :     return feptr(fe_id)->nextfacet[1];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+40]

; 97   : }

	pop	ebp
	ret	0
_get_next_facet ENDP
_TEXT	ENDS
PUBLIC	_get_edge_fe
; Function compile flags: /Ogtp
;	COMDAT _get_edge_fe
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_fe PROC					; COMDAT

; 179  : {   struct edge *ep;

	push	ebp
	mov	ebp, esp

; 180  :     facetedge_id fe;
; 181  : 
; 182  :  	ep = eptr(e_id);

	mov	ecx, DWORD PTR _e_id$[ebp]
	mov	edx, DWORD PTR _web+124
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]

; 183  :     if ( !ep ) return NULLID;

	test	eax, eax
	jne	SHORT $LN2@get_edge_f

; 186  :     return fe;
; 187  : }

	pop	ebp
	ret	0
$LN2@get_edge_f:

; 184  :     fe = ep->fe_id; 

	mov	eax, DWORD PTR [eax+28]

; 185  :     if ( inverted(e_id) ) invert(fe);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_edge_f
	xor	eax, 134217728				; 08000000H
$LN3@get_edge_f:

; 186  :     return fe;
; 187  : }

	pop	ebp
	ret	0
_get_edge_fe ENDP
_TEXT	ENDS
PUBLIC	_get_edge_tailv
EXTRN	_dymem:DWORD
; Function compile flags: /Ogtp
;	COMDAT _get_edge_tailv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_tailv PROC					; COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp

; 192  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 193  :      return get_edge_vertices(e_id)[web.headvnum];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_t
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 196  : }

	pop	ebp
	ret	0
$LN2@get_edge_t:

; 194  :   else
; 195  :      return get_edge_vertices(e_id)[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 196  : }

	pop	ebp
	ret	0
_get_edge_tailv ENDP
_TEXT	ENDS
PUBLIC	_get_edge_headv
; Function compile flags: /Ogtp
;	COMDAT _get_edge_headv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_headv PROC					; COMDAT

; 200  : {

	push	ebp
	mov	ebp, esp

; 201  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 202  :      return get_edge_vertices(e_id)[0];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_h
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 205  : }

	pop	ebp
	ret	0
$LN2@get_edge_h:

; 203  :   else
; 204  :      return get_edge_vertices(e_id)[web.headvnum];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 205  : }

	pop	ebp
	ret	0
_get_edge_headv ENDP
_TEXT	ENDS
PUBLIC	_get_facet_fe
; Function compile flags: /Ogtp
;	COMDAT _get_facet_fe
_TEXT	SEGMENT
_f_id$ = 8						; size = 4
_get_facet_fe PROC					; COMDAT

; 260  : {

	push	ebp
	mov	ebp, esp

; 261  :   facetedge_id fe;
; 262  :   
; 263  :   if ( !valid_id(f_id) ) return NULLID;

	mov	ecx, DWORD PTR _f_id$[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN2@get_facet_
	xor	eax, eax

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
$LN2@get_facet_:

; 264  :   fe = fptr(f_id)->fe_id;

	mov	edx, DWORD PTR _web+236
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]

; 265  :   if ( inverted(f_id) ) invert(fe);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_facet_
	xor	eax, 134217728				; 08000000H
$LN3@get_facet_:

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
_get_facet_fe ENDP
_TEXT	ENDS
PUBLIC	_get_next_tail_edge
; Function compile flags: /Ogtp
;	COMDAT _get_next_tail_edge
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_next_tail_edge PROC				; COMDAT

; 270  : { return eptr(e_id)->next_vedge[inverted(e_id) ?1: 0] ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _e_id$[ebp]
	mov	edx, DWORD PTR _web+124
	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ecx*4+32]
	pop	ebp
	ret	0
_get_next_tail_edge ENDP
_TEXT	ENDS
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@bfd0000000000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	_wraps$GSCopy$
PUBLIC	_v_id$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_sqcurve_energy_precalc
EXTRN	_cross_prod:PROC
EXTRN	_sym_form_pullback:DWORD
EXTRN	_boundary_curvature_flag:DWORD
EXTRN	_v_curve:DWORD
EXTRN	_dot:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CIsqrt:PROC
;	COMDAT __real@3fd0000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\sqcurve2.c
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@bfd0000000000000
CONST	SEGMENT
__real@bfd0000000000000 DQ 0bfd0000000000000r	; -0.25
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _sqcurve_energy_precalc
_TEXT	SEGMENT
tv3147 = -312						; size = 4
_t1t2$ = -308						; size = 8
_t1t1$ = -300						; size = 8
_vc$ = -292						; size = 12
tv3652 = -280						; size = 4
tv3151 = -280						; size = 4
tv2304 = -276						; size = 8
tv3889 = -272						; size = 4
tv3647 = -272						; size = 4
tv3155 = -272						; size = 4
tv1764 = -268						; size = 4
_wraps$GSCopy$ = -268					; size = 4
tv3490 = -264						; size = 8
tv3270 = -264						; size = 8
tv3237 = -264						; size = 8
tv3206 = -264						; size = 8
tv3175 = -264						; size = 8
_t2t2$ = -264						; size = 8
_v_id$GSCopy$ = -256					; size = 4
tv4094 = -252						; size = 4
tv4080 = -252						; size = 4
tv4066 = -252						; size = 4
tv3139 = -252						; size = 4
tv2215 = -252						; size = 4
tv3143 = -248						; size = 4
tv764 = -248						; size = 4
_fixcount$89296 = -248					; size = 4
_wnorm$89339 = -244					; size = 48
_normal$89334 = -196					; size = 48
_wforce$89316 = -196					; size = 48
_f$89315 = -148						; size = 144
__$ArrayPad$ = -4					; size = 4
_v_id$ = 8						; size = 4
_side$ = 12						; size = 4
_wraps$ = 16						; size = 4
_sqcurve_energy_precalc PROC				; COMDAT

; 267  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 268  :   REAL t1t1,t1t2,t2t2;
; 269  :   REAL det;
; 270  :   struct v_curve_t *vc[FACET_VERTS];
; 271  :   int i,j;
; 272  :   REAL area;
; 273  : 
; 274  :   t1t1 = SDIM_dot(side[0],side[0]);

	mov	ecx, DWORD PTR _web+616

; 323  :     for ( i = 0 ; i < FACET_VERTS ; i ++ )

	mov	eax, DWORD PTR _wraps$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _v_id$[ebp]
	push	esi
	mov	esi, DWORD PTR _side$[ebp]
	push	edi
	push	ecx
	push	esi
	push	esi
	mov	DWORD PTR _v_id$GSCopy$[ebp], ebx
	mov	DWORD PTR _wraps$GSCopy$[ebp], eax
	call	_dot
	fstp	QWORD PTR _t1t1$[ebp]
	mov	edx, DWORD PTR _web+616
	push	edx
	lea	edi, DWORD PTR [esi+48]
	push	edi
	push	esi
	call	_dot
	fstp	QWORD PTR _t1t2$[ebp]
	mov	eax, DWORD PTR _web+616
	push	eax
	push	edi
	push	edi
	call	_dot
	fst	QWORD PTR _t2t2$[ebp]
	fmul	QWORD PTR _t1t1$[ebp]
	add	esp, 36					; 00000024H
	fld	QWORD PTR _t1t2$[ebp]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000
	mov	eax, DWORD PTR [ebx]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN41@sqcurve_en

; 275  :   t1t2 = SDIM_dot(side[0],side[1]);
; 276  :   t2t2 = SDIM_dot(side[1],side[1]);
; 277  : 
; 278  :   det = t1t1*t2t2 - t1t2*t1t2;
; 279  : 
; 280  :   area = sqrt(det)/2;
; 281  :   for ( i = 0 ; i < FACET_VERTS ; i++ )
; 282  :   { vc[i] = v_curve + loc_ordinal(v_id[i]);

	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN42@sqcurve_en
$LN41@sqcurve_en:
	or	eax, -1
$LN42@sqcurve_en:
	imul	eax, 544				; 00000220H

; 283  :     vc[i]->area += area;

	fld	ST(0)
	add	eax, DWORD PTR _v_curve
	mov	edi, eax
	fadd	QWORD PTR [edi]
	mov	DWORD PTR _vc$[ebp], edi
	fstp	QWORD PTR [edi]
	mov	eax, DWORD PTR [ebx+4]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN70@sqcurve_en

; 275  :   t1t2 = SDIM_dot(side[0],side[1]);
; 276  :   t2t2 = SDIM_dot(side[1],side[1]);
; 277  : 
; 278  :   det = t1t1*t2t2 - t1t2*t1t2;
; 279  : 
; 280  :   area = sqrt(det)/2;
; 281  :   for ( i = 0 ; i < FACET_VERTS ; i++ )
; 282  :   { vc[i] = v_curve + loc_ordinal(v_id[i]);

	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN71@sqcurve_en
$LN70@sqcurve_en:
	or	eax, -1
$LN71@sqcurve_en:
	imul	eax, 544				; 00000220H
	add	eax, DWORD PTR _v_curve
	mov	ebx, eax

; 283  :     vc[i]->area += area;

	fld	QWORD PTR [ebx]
	mov	eax, DWORD PTR _v_id$GSCopy$[ebp]
	fadd	ST(0), ST(1)
	mov	DWORD PTR _vc$[ebp+4], ebx
	fstp	QWORD PTR [ebx]
	mov	edx, DWORD PTR [eax+8]
	test	edx, 268435456				; 10000000H
	je	SHORT $LN73@sqcurve_en

; 275  :   t1t2 = SDIM_dot(side[0],side[1]);
; 276  :   t2t2 = SDIM_dot(side[1],side[1]);
; 277  : 
; 278  :   det = t1t1*t2t2 - t1t2*t1t2;
; 279  : 
; 280  :   area = sqrt(det)/2;
; 281  :   for ( i = 0 ; i < FACET_VERTS ; i++ )
; 282  :   { vc[i] = v_curve + loc_ordinal(v_id[i]);

	and	edx, 134217727				; 07ffffffH
	jmp	SHORT $LN74@sqcurve_en
$LN73@sqcurve_en:
	or	edx, -1
$LN74@sqcurve_en:
	imul	edx, 544				; 00000220H
	add	edx, DWORD PTR _v_curve

; 283  :     vc[i]->area += area;

	fld	QWORD PTR [edx]
	mov	DWORD PTR _vc$[ebp+8], edx
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 284  :   }
; 285  :   if ( boundary_curvature_flag ) /* apportion area differently */

	cmp	DWORD PTR _boundary_curvature_flag, 0
	je	$LN94@sqcurve_en

; 286  :   { int fixcount = 0;
; 287  :     for ( i = 0 ; i < FACET_VERTS ; i++ )
; 288  :       if ( get_vattr(v_id[i]) & (BOUNDARY|FIXED) ) fixcount++;

	mov	ebx, DWORD PTR [eax]
	mov	edi, DWORD PTR _web+12
	mov	DWORD PTR tv2215[ebp], ebx
	and	ebx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+ebx*4]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 192				; 000000c0H
	xor	eax, eax
	mov	edx, ecx
	or	edx, eax
	mov	DWORD PTR _fixcount$89296[ebp], 0
	mov	DWORD PTR tv2304[ebp+4], eax
	je	SHORT $LN33@sqcurve_en
	mov	DWORD PTR _fixcount$89296[ebp], 1
$LN33@sqcurve_en:
	mov	eax, DWORD PTR _v_id$GSCopy$[ebp]
	mov	edx, DWORD PTR [eax+4]
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+edx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 192				; 000000c0H
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN79@sqcurve_en
	inc	DWORD PTR _fixcount$89296[ebp]
$LN79@sqcurve_en:
	mov	eax, DWORD PTR _v_id$GSCopy$[ebp]
	mov	edx, DWORD PTR [eax+8]
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+edx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 192				; 000000c0H
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN108@sqcurve_en
	inc	DWORD PTR _fixcount$89296[ebp]
$LN108@sqcurve_en:

; 289  :     for ( i = 0 ; i < FACET_VERTS ; i++ )
; 290  :     { vc[i] = v_curve+loc_ordinal(v_id[i]);

	test	DWORD PTR tv2215[ebp], 268435456	; 10000000H
	je	SHORT $LN43@sqcurve_en
	mov	eax, ebx
	jmp	SHORT $LN44@sqcurve_en
$LN43@sqcurve_en:
	or	eax, -1
$LN44@sqcurve_en:

; 291  :       if ( !(get_vattr(v_id[i]) & (BOUNDARY|FIXED)) )

	fld	QWORD PTR __real@4008000000000000
	imul	eax, 544				; 00000220H
	add	eax, DWORD PTR _v_curve
	or	ecx, DWORD PTR tv2304[ebp+4]
	mov	DWORD PTR _vc$[ebp], eax
	jne	SHORT $LN29@sqcurve_en

; 292  :          vc[i]->a += 3*area/(3-fixcount);

	mov	ecx, 3
	fld	ST(1)
	sub	ecx, DWORD PTR _fixcount$89296[ebp]
	fmul	ST(0), ST(1)
	mov	DWORD PTR tv4094[ebp], ecx
	fild	DWORD PTR tv4094[ebp]
	fdivp	ST(1), ST(0)
	fadd	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]
	mov	edi, DWORD PTR _web+12
$LN29@sqcurve_en:

; 289  :     for ( i = 0 ; i < FACET_VERTS ; i++ )
; 290  :     { vc[i] = v_curve+loc_ordinal(v_id[i]);

	mov	edx, DWORD PTR _v_id$GSCopy$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN88@sqcurve_en
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN89@sqcurve_en
$LN88@sqcurve_en:
	or	eax, -1
$LN89@sqcurve_en:
	imul	eax, 544				; 00000220H
	add	eax, DWORD PTR _v_curve

; 291  :       if ( !(get_vattr(v_id[i]) & (BOUNDARY|FIXED)) )

	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	ebx, eax
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 192				; 000000c0H
	xor	ecx, ecx
	or	eax, ecx
	mov	DWORD PTR _vc$[ebp+4], ebx
	jne	SHORT $LN90@sqcurve_en

; 292  :          vc[i]->a += 3*area/(3-fixcount);

	mov	eax, 3
	fld	ST(1)
	sub	eax, DWORD PTR _fixcount$89296[ebp]
	fmul	ST(0), ST(1)
	mov	DWORD PTR tv4080[ebp], eax
	fild	DWORD PTR tv4080[ebp]
	fdivp	ST(1), ST(0)
	fadd	QWORD PTR [ebx+8]
	fstp	QWORD PTR [ebx+8]
	mov	edi, DWORD PTR _web+12
$LN90@sqcurve_en:

; 289  :     for ( i = 0 ; i < FACET_VERTS ; i++ )
; 290  :     { vc[i] = v_curve+loc_ordinal(v_id[i]);

	mov	ecx, DWORD PTR [edx+8]
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN92@sqcurve_en
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN93@sqcurve_en
$LN92@sqcurve_en:
	or	eax, -1
$LN93@sqcurve_en:
	imul	eax, 544				; 00000220H
	add	eax, DWORD PTR _v_curve

; 291  :       if ( !(get_vattr(v_id[i]) & (BOUNDARY|FIXED)) )

	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]

; 292  :          vc[i]->a += 3*area/(3-fixcount);

	mov	edi, DWORD PTR _vc$[ebp]
	mov	edx, eax
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 192				; 000000c0H
	xor	ecx, ecx
	or	eax, ecx
	mov	DWORD PTR _vc$[ebp+8], edx
	jne	SHORT $LN152@sqcurve_en
	mov	ecx, 3
	fmul	ST(0), ST(1)
	sub	ecx, DWORD PTR _fixcount$89296[ebp]
	mov	DWORD PTR tv4066[ebp], ecx
	fild	DWORD PTR tv4066[ebp]
	fdivp	ST(1), ST(0)
	fadd	QWORD PTR [edx+8]
	fstp	QWORD PTR [edx+8]
	jmp	SHORT $LN94@sqcurve_en
$LN152@sqcurve_en:

; 291  :       if ( !(get_vattr(v_id[i]) & (BOUNDARY|FIXED)) )

	fstp	ST(0)
$LN94@sqcurve_en:

; 293  :     }
; 294  :   }
; 295  : 
; 296  :   if ( area > 0.0 )

	fldz
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	$LN156@sqcurve_en

; 297  :   { if ( web.symmetry_flag )

	cmp	DWORD PTR _web+856, 0
	je	$LN25@sqcurve_en

; 298  :     { REAL f[FACET_VERTS][MAXCOORD];
; 299  :       REAL wforce[MAXCOORD];  /* unwrapped forces */
; 300  :       for ( i = 0 ; i < SDIM ; i++ )

	fld	QWORD PTR __real@bfd0000000000000
	mov	ebx, DWORD PTR _web+616
	fld	QWORD PTR __real@3fd0000000000000
	xor	ecx, ecx

; 304  :          f[1][i] -= (t1t1*side[1][i]-t1t2*side[0][i])/4/area;

	fld	QWORD PTR _t2t2$[ebp]
	fld	QWORD PTR _t1t2$[ebp]
	fld	QWORD PTR _t1t1$[ebp]
	cmp	ebx, 4
	jl	$LC96@sqcurve_en
	lea	ebx, DWORD PTR _f$89315[ebp]
	sub	ebx, esi
	mov	DWORD PTR tv3139[ebp], ebx
	lea	ebx, DWORD PTR _f$89315[ebp+56]
	sub	ebx, esi
	mov	DWORD PTR tv3143[ebp], ebx
	lea	ebx, DWORD PTR _f$89315[ebp+8]
	sub	ebx, esi
	mov	DWORD PTR tv3147[ebp], ebx
	lea	ebx, DWORD PTR _f$89315[ebp+64]
	sub	ebx, esi
	mov	DWORD PTR tv3151[ebp], ebx
	lea	edx, DWORD PTR _f$89315[ebp+40]
	lea	edi, DWORD PTR _f$89315[ebp+48]
	lea	ebx, DWORD PTR _f$89315[ebp+16]
	sub	edx, esi
	sub	edi, esi
	sub	ebx, esi
	lea	eax, DWORD PTR [esi+56]
	mov	DWORD PTR tv3155[ebp], ebx
$LN97@sqcurve_en:
	fld	QWORD PTR [eax-56]
	mov	ebx, DWORD PTR tv3139[ebp]
	fmul	ST(0), ST(3)
	fld	QWORD PTR [eax-8]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fst	QWORD PTR tv3175[ebp]
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(6)
	fstp	QWORD PTR _f$89315[ebp+ecx*8]
	fld	QWORD PTR [eax-8]
	fmul	ST(0), ST(1)
	fld	QWORD PTR [eax-56]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fdiv	ST(0), ST(6)
	fst	QWORD PTR [eax+edx]
	fld	QWORD PTR tv3175[ebp]
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(7)
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR _f$89315[ebp+ecx*8+48]
	fld	QWORD PTR [eax-48]
	fmul	ST(0), ST(3)
	fld	QWORD PTR [eax]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fst	QWORD PTR tv3206[ebp]
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(6)
	fstp	QWORD PTR _f$89315[ebp+ecx*8+8]
	fld	QWORD PTR [eax]
	fmul	ST(0), ST(1)
	fld	QWORD PTR [eax-48]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fdiv	ST(0), ST(6)
	fst	QWORD PTR [eax+edi]
	fld	QWORD PTR tv3206[ebp]
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(7)
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv3143[ebp]
	fld	QWORD PTR [eax-40]
	fmul	ST(0), ST(3)
	fld	QWORD PTR [eax+8]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fst	QWORD PTR tv3237[ebp]
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(6)
	fstp	QWORD PTR _f$89315[ebp+ecx*8+16]
	fld	QWORD PTR [eax+8]
	fmul	ST(0), ST(1)
	fld	QWORD PTR [eax-40]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fdiv	ST(0), ST(6)
	fst	QWORD PTR [eax+ebx]
	fld	QWORD PTR tv3237[ebp]
	fmul	ST(0), ST(5)
	mov	ebx, DWORD PTR tv3147[ebp]
	fdiv	ST(0), ST(7)
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR [eax+ebx]
	fld	QWORD PTR [eax-32]
	fmul	ST(0), ST(3)
	fld	QWORD PTR [eax+16]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fst	QWORD PTR tv3270[ebp]
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(6)
	fstp	QWORD PTR _f$89315[ebp+ecx*8+24]
	fld	QWORD PTR [eax+16]
	fmul	ST(0), ST(1)
	fld	QWORD PTR [eax-32]

; 302  :          f[1][i] = (t2t2*side[0][i]-t1t2*side[1][i])/4/area;
; 303  :          f[2][i] = (t1t1*side[1][i]-t1t2*side[0][i])/4/area;

	fmul	ST(0), ST(3)
	mov	ebx, DWORD PTR tv3151[ebp]

; 304  :          f[1][i] -= (t1t1*side[1][i]-t1t2*side[0][i])/4/area;

	add	ecx, 4
	add	eax, 32					; 00000020H
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fdiv	ST(0), ST(6)
	fst	QWORD PTR [eax+ebx-32]
	fld	QWORD PTR tv3270[ebp]
	fmul	ST(0), ST(5)
	mov	ebx, DWORD PTR tv3155[ebp]
	fdiv	ST(0), ST(7)
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR _web+616
	add	ebx, -3					; fffffffdH
	cmp	ecx, ebx
	jl	$LN97@sqcurve_en
	mov	ebx, DWORD PTR _web+616
$LC96@sqcurve_en:

; 298  :     { REAL f[FACET_VERTS][MAXCOORD];
; 299  :       REAL wforce[MAXCOORD];  /* unwrapped forces */
; 300  :       for ( i = 0 ; i < SDIM ; i++ )

	cmp	ecx, ebx
	jge	SHORT $LN172@sqcurve_en
	lea	edx, DWORD PTR _f$89315[ebp+48]
	lea	edi, DWORD PTR _f$89315[ebp]
	sub	edx, esi
	lea	eax, DWORD PTR [esi+ecx*8+48]
	sub	edi, esi
$LC24@sqcurve_en:

; 301  :       { f[0][i] = -(t2t2*side[0][i]-t1t2*side[1][i])/4/area;

	fld	QWORD PTR [eax-48]
	inc	ecx
	fmul	ST(0), ST(3)
	add	eax, 8
	fld	QWORD PTR [eax-8]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fst	QWORD PTR tv3490[ebp]
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(6)
	fstp	QWORD PTR _f$89315[ebp+ecx*8-8]

; 302  :          f[1][i] = (t2t2*side[0][i]-t1t2*side[1][i])/4/area;
; 303  :          f[2][i] = (t1t1*side[1][i]-t1t2*side[0][i])/4/area;

	fld	QWORD PTR [eax-8]
	fmul	ST(0), ST(1)
	fld	QWORD PTR [eax-56]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fdiv	ST(0), ST(6)
	fst	QWORD PTR [eax+edx-8]
	fld	QWORD PTR tv3490[ebp]
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(7)

; 304  :          f[1][i] -= (t1t1*side[1][i]-t1t2*side[0][i])/4/area;

	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR [eax+edi-8]
	cmp	ecx, ebx
	jl	SHORT $LC24@sqcurve_en
$LN172@sqcurve_en:

; 305  :       }
; 306  :       for ( i = 0 ; i < FACET_VERTS ; i++ )  /* vertex loop */

	mov	edi, DWORD PTR _v_id$GSCopy$[ebp]
	fstp	ST(5)
	mov	eax, DWORD PTR _wraps$GSCopy$[ebp]
	fstp	ST(2)
	fstp	ST(1)
	mov	ecx, edi
	fstp	ST(1)
	sub	eax, ecx
	lea	edx, DWORD PTR _vc$[ebp]
	fstp	ST(1)
	sub	edx, ecx
	fstp	ST(0)
	lea	ebx, DWORD PTR _f$89315[ebp]
	mov	DWORD PTR tv3647[ebp], eax
	mov	DWORD PTR tv3652[ebp], edx
	mov	DWORD PTR tv764[ebp], 3
	jmp	SHORT $LN21@sqcurve_en
	npad	8
$LL99@sqcurve_en:
	mov	eax, DWORD PTR tv3647[ebp]
$LN21@sqcurve_en:

; 307  :       { (*sym_form_pullback)(get_coord(v_id[i]),wforce,f[i],wraps[i]);

	mov	edx, DWORD PTR [eax+edi]
	mov	ecx, DWORD PTR [edi]
	push	edx
	mov	edx, DWORD PTR _web+12
	push	ebx
	lea	eax, DWORD PTR _wforce$89316[ebp]
	push	eax
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _web+104
	mov	edx, DWORD PTR _dymem
	add	eax, DWORD PTR [ecx+edx+64]
	push	eax
	call	DWORD PTR _sym_form_pullback

; 308  :          for ( j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	add	esp, 16					; 00000010H
	cmp	DWORD PTR _web+616, ecx
	jle	SHORT $LN20@sqcurve_en

; 307  :       { (*sym_form_pullback)(get_coord(v_id[i]),wforce,f[i],wraps[i]);

	mov	eax, DWORD PTR tv3652[ebp]
	mov	eax, DWORD PTR [eax+edi]
	add	eax, 16					; 00000010H
$LL18@sqcurve_en:

; 309  :             vc[i]->force[j] += wforce[j];

	fld	QWORD PTR _wforce$89316[ebp+ecx*8]
	inc	ecx
	fadd	QWORD PTR [eax]
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	cmp	ecx, DWORD PTR _web+616
	jl	SHORT $LL18@sqcurve_en
$LN20@sqcurve_en:

; 305  :       }
; 306  :       for ( i = 0 ; i < FACET_VERTS ; i++ )  /* vertex loop */

	add	ebx, 48					; 00000030H
	add	edi, 4
	dec	DWORD PTR tv764[ebp]
	jne	SHORT $LL99@sqcurve_en

; 312  :     else for ( i = 0 ; i < SDIM ; i++ )

	jmp	$LN107@sqcurve_en
$LN25@sqcurve_en:
	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	$LN156@sqcurve_en
	fld	QWORD PTR __real@3fd0000000000000
	sub	edi, edx
	fld	QWORD PTR _t2t2$[ebp]
	sub	edx, ebx
	fld	QWORD PTR _t1t2$[ebp]
	lea	ecx, DWORD PTR [ebx+16]
	fld	QWORD PTR _t1t1$[ebp]
	mov	DWORD PTR tv3889[ebp], edx
	jmp	SHORT $LN14@sqcurve_en
$LN102@sqcurve_en:
	mov	edx, DWORD PTR tv3889[ebp]
$LN14@sqcurve_en:

; 313  :     { vc[0]->force[i] -= (t2t2*side[0][i]-t1t2*side[1][i])/4/area;

	fld	QWORD PTR [esi+eax*8]
	add	edx, ecx
	fmul	ST(0), ST(3)
	inc	eax
	fld	QWORD PTR [esi+eax*8+40]
	add	ecx, 8
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fdiv	ST(0), ST(5)
	fsubr	QWORD PTR [edx+edi]
	fstp	QWORD PTR [edx+edi]

; 314  :       vc[1]->force[i] += (t2t2*side[0][i]-t1t2*side[1][i])/4/area;

	fld	QWORD PTR [esi+eax*8-8]
	fmul	ST(0), ST(3)
	fld	QWORD PTR [esi+eax*8+40]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fdiv	ST(0), ST(5)
	fadd	QWORD PTR [ecx-8]
	fstp	QWORD PTR [ecx-8]

; 315  :       vc[2]->force[i] += (t1t1*side[1][i]-t1t2*side[0][i])/4/area;

	fld	QWORD PTR [esi+eax*8+40]
	fmul	ST(0), ST(1)
	fld	QWORD PTR [esi+eax*8-8]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fdiv	ST(0), ST(5)
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]

; 316  :       vc[1]->force[i] -= (t1t1*side[1][i]-t1t2*side[0][i])/4/area;

	fld	QWORD PTR [esi+eax*8+40]
	fmul	ST(0), ST(1)
	fld	QWORD PTR [esi+eax*8-8]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fdiv	ST(0), ST(5)
	fsubr	QWORD PTR [ecx-8]
	fstp	QWORD PTR [ecx-8]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN102@sqcurve_en

; 312  :     else for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(4)
	fstp	ST(2)
	fstp	ST(1)
	fstp	ST(1)
$LN156@sqcurve_en:
	fstp	ST(0)
$LN107@sqcurve_en:

; 317  :     }
; 318  :   }
; 319  : 
; 320  :   /* accumulate normal vector at each vertex;  should pullback */
; 321  :   { REAL normal[MAXCOORD];
; 322  :     cross_prod(side[0],side[1],normal);

	lea	ecx, DWORD PTR _normal$89334[ebp]
	push	ecx
	lea	eax, DWORD PTR [esi+48]
	push	eax
	push	esi
	call	_cross_prod
	mov	esi, DWORD PTR _wraps$GSCopy$[ebp]

; 323  :     for ( i = 0 ; i < FACET_VERTS ; i ++ )

	mov	ebx, DWORD PTR _v_id$GSCopy$[ebp]
	mov	edx, DWORD PTR _web+616
	lea	edi, DWORD PTR _vc$[ebp]
	add	esp, 12					; 0000000cH
	sub	ebx, esi
	sub	edi, esi
	mov	DWORD PTR tv1764[ebp], 3
	npad	8
$LL11@sqcurve_en:

; 324  :     { if ( web.symmetry_flag && wraps[i] )

	cmp	DWORD PTR _web+856, 0
	je	SHORT $LN8@sqcurve_en
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN8@sqcurve_en

; 325  :       { REAL wnorm[MAXCOORD];
; 326  :         (*sym_form_pullback)(get_coord(v_id[i]),wnorm,normal,wraps[i]);

	mov	ecx, DWORD PTR [ebx+esi]
	push	eax
	lea	edx, DWORD PTR _normal$89334[ebp]
	push	edx
	mov	edx, DWORD PTR _web+12
	lea	eax, DWORD PTR _wnorm$89339[ebp]
	push	eax
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _web+104
	mov	edx, DWORD PTR _dymem
	add	eax, DWORD PTR [ecx+edx+64]
	push	eax
	call	DWORD PTR _sym_form_pullback

; 327  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	edx, DWORD PTR _web+616
	add	esp, 16					; 00000010H
	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN10@sqcurve_en

; 310  :       }
; 311  :     }

	mov	eax, DWORD PTR [edi+esi]
	add	eax, 416				; 000001a0H
	npad	2
$LL7@sqcurve_en:

; 328  :         vc[i]->normal[j] += wnorm[j];

	fld	QWORD PTR _wnorm$89339[ebp+ecx*8]
	inc	ecx
	fadd	QWORD PTR [eax]
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	mov	edx, DWORD PTR _web+616
	cmp	ecx, edx
	jl	SHORT $LL7@sqcurve_en

; 329  :       }
; 330  :       else

	jmp	SHORT $LN10@sqcurve_en
$LN8@sqcurve_en:

; 331  :         for ( j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN10@sqcurve_en
	mov	eax, DWORD PTR [edi+esi]
	add	eax, 416				; 000001a0H
	npad	6
$LL3@sqcurve_en:

; 332  :           vc[i]->normal[j] += normal[j];

	fld	QWORD PTR _normal$89334[ebp+ecx*8]
	inc	ecx
	fadd	QWORD PTR [eax]
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	mov	edx, DWORD PTR _web+616
	cmp	ecx, edx
	jl	SHORT $LL3@sqcurve_en
$LN10@sqcurve_en:

; 323  :     for ( i = 0 ; i < FACET_VERTS ; i ++ )

	add	esi, 4
	dec	DWORD PTR tv1764[ebp]
	jne	$LL11@sqcurve_en

; 333  :     }
; 334  :   }
; 335  : } // end sqcurve_energy_precalc()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_sqcurve_energy_precalc ENDP
_TEXT	ENDS
PUBLIC	_side$GSCopy$
PUBLIC	_e_id$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_sqcurve_grad_precalc
EXTRN	_self_similar_flag:DWORD
EXTRN	_e_curve:DWORD
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT _sqcurve_grad_precalc
_TEXT	SEGMENT
tv4505 = -380						; size = 4
_area$ = -376						; size = 8
tv5617 = -368						; size = 4
_i2$89431 = -364					; size = 4
_i1$89430 = -360					; size = 4
_ec$ = -356						; size = 12
tv5620 = -344						; size = 4
tv5053 = -340						; size = 4
_k$ = -336						; size = 4
tv4948 = -332						; size = 4
_vc$ = -328						; size = 12
_e_id$GSCopy$ = -316					; size = 4
tv5523 = -312						; size = 4
tv2085 = -312						; size = 4
_i$ = -312						; size = 4
_side$GSCopy$ = -308					; size = 4
tv2188 = -304						; size = 4
tv1810 = -304						; size = 4
_ii$89413 = -304					; size = 4
tv4952 = -300						; size = 4
_fixcount$ = -300					; size = 4
tv5593 = -296						; size = 4
tv820 = -296						; size = 4
tv184 = -296						; size = 4
tv4491 = -292						; size = 4
tv4053 = -292						; size = 4
tv3450 = -292						; size = 4
tv5555 = -288						; size = 4
tv5522 = -288						; size = 4
tv5509 = -288						; size = 4
tv5496 = -288						; size = 4
tv5461 = -288						; size = 4
tv4142 = -288						; size = 4
_i2$89406 = -288					; size = 4
tv4780 = -284						; size = 4
tv4073 = -284						; size = 4
tv3476 = -284						; size = 4
tv2829 = -284						; size = 4
tv4958 = -280						; size = 4
tv4051 = -280						; size = 4
tv3454 = -280						; size = 4
tv2827 = -280						; size = 4
tv2003 = -276						; size = 4
_j$ = -276						; size = 4
tv5591 = -272						; size = 4
tv4146 = -272						; size = 4
tv2831 = -272						; size = 4
tv1990 = -272						; size = 4
_force$ = -268						; size = 144
_normal$89470 = -124					; size = 48
_cp$89452 = -124					; size = 48
_tt$ = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
_v_id$ = 8						; size = 4
_e_id$ = 12						; size = 4
_side$ = 16						; size = 4
_wraps$ = 20						; size = 4
_sqcurve_grad_precalc PROC				; COMDAT

; 352  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 380				; 0000017cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 380  :      }
; 381  :   for ( i = 0 ; i < FACET_EDGES ; i++ )
; 382  :      ec[i] = e_curve + loc_ordinal(e_id[i]);

	mov	eax, DWORD PTR _e_id$[ebp]
	xor	ecx, ecx
	mov	DWORD PTR _fixcount$[ebp], ecx
	mov	DWORD PTR _j$[ebp], ecx
	lea	ecx, DWORD PTR _tt$[ebp]
	push	ebx
	mov	DWORD PTR _e_id$GSCopy$[ebp], eax
	mov	eax, DWORD PTR _side$[ebp]
	mov	edx, ecx
	push	esi

; 416  :       for ( k = 0 ; k < SDIM ; k++ )

	mov	DWORD PTR _side$GSCopy$[ebp], eax
	mov	DWORD PTR tv2827[ebp], ecx
	mov	DWORD PTR tv2829[ebp], edx
	mov	DWORD PTR tv2831[ebp], eax
	push	edi
	npad	3
$LL72@sqcurve_gr:

; 363  :      for ( k = 0 ; k <= j ; k++ )

	cmp	DWORD PTR _j$[ebp], 0
	jl	SHORT $LN71@sqcurve_gr
	mov	eax, DWORD PTR _j$[ebp]
	mov	edi, DWORD PTR _side$GSCopy$[ebp]
	mov	esi, DWORD PTR tv2829[ebp]
	mov	ebx, DWORD PTR tv2827[ebp]
	inc	eax
	mov	DWORD PTR tv820[ebp], eax
	npad	8
$LL69@sqcurve_gr:

; 364  :         tt[j][k] = tt[k][j] = SDIM_dot(side[j],side[k]);

	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR tv2831[ebp]
	push	ecx
	push	edi
	push	edx
	call	_dot
	fst	QWORD PTR [ebx]
	fstp	QWORD PTR [esi]
	add	esp, 12					; 0000000cH
	add	esi, 8
	add	edi, 48					; 00000030H
	add	ebx, 24					; 00000018H
	dec	DWORD PTR tv820[ebp]
	jne	SHORT $LL69@sqcurve_gr
$LN71@sqcurve_gr:

; 353  :   REAL det;
; 354  :   struct v_curve_t *vc[FACET_VERTS];
; 355  :   int i,j,k;
; 356  :   REAL force[FACET_VERTS][MAXCOORD];
; 357  :   REAL tt[FACET_VERTS][FACET_VERTS]; /* side dot products */
; 358  :   REAL area;
; 359  :   struct e_curve_t *ec[FACET_EDGES];
; 360  :   int fixcount=0;
; 361  : 
; 362  :   for ( j = 0 ; j < FACET_VERTS ; j++ )

	mov	eax, DWORD PTR _j$[ebp]
	add	DWORD PTR tv2831[ebp], 48		; 00000030H
	add	DWORD PTR tv2829[ebp], 24		; 00000018H
	add	DWORD PTR tv2827[ebp], 8
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, 3
	jl	$LL72@sqcurve_gr

; 365  : 
; 366  :   det = tt[0][0]*tt[1][1] - tt[0][1]*tt[0][1];

	fld	QWORD PTR _tt$[ebp+32]
	fmul	QWORD PTR _tt$[ebp]
	fld	QWORD PTR _tt$[ebp+8]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)

; 367  : 
; 368  :   area = sqrt(det)/2;

	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000

; 369  :   for ( i = 0 ; i < FACET_VERTS ; i++ )
; 370  :      { vc[i] = v_curve + loc_ordinal(v_id[i]);

	mov	edx, DWORD PTR _v_id$[ebp]
	mov	eax, DWORD PTR [edx]
	fst	QWORD PTR _area$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN75@sqcurve_gr
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN76@sqcurve_gr
$LN75@sqcurve_gr:
	or	eax, -1
$LN76@sqcurve_gr:
	imul	eax, 544				; 00000220H

; 371  :        vc[i]->area += area;

	fld	ST(0)
	add	eax, DWORD PTR _v_curve
	fadd	QWORD PTR [eax]
	mov	DWORD PTR _vc$[ebp], eax
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR [edx+4]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN132@sqcurve_gr

; 369  :   for ( i = 0 ; i < FACET_VERTS ; i++ )
; 370  :      { vc[i] = v_curve + loc_ordinal(v_id[i]);

	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN133@sqcurve_gr
$LN132@sqcurve_gr:
	or	eax, -1
$LN133@sqcurve_gr:
	imul	eax, 544				; 00000220H
	add	eax, DWORD PTR _v_curve

; 371  :        vc[i]->area += area;

	fld	QWORD PTR [eax]
	mov	DWORD PTR _vc$[ebp+4], eax
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR [edx+8]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN135@sqcurve_gr

; 369  :   for ( i = 0 ; i < FACET_VERTS ; i++ )
; 370  :      { vc[i] = v_curve + loc_ordinal(v_id[i]);

	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN136@sqcurve_gr
$LN135@sqcurve_gr:
	or	eax, -1
$LN136@sqcurve_gr:
	imul	eax, 544				; 00000220H
	add	eax, DWORD PTR _v_curve

; 371  :        vc[i]->area += area;

	fld	QWORD PTR [eax]
	mov	DWORD PTR _vc$[ebp+8], eax
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax]

; 372  :      }
; 373  :   if ( boundary_curvature_flag ) /* apportion area differently */

	cmp	DWORD PTR _boundary_curvature_flag, 0
	fld	QWORD PTR __real@4008000000000000
	je	$LN209@sqcurve_gr

; 374  :      { fixcount = 0;
; 375  :        for ( i = 0 ; i < FACET_VERTS ; i++ )
; 376  :           if ( get_vattr(v_id[i]) & (BOUNDARY|FIXED) ) fixcount++;

	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	esi, DWORD PTR [eax+8]
	and	esi, 192				; 000000c0H
	xor	ebx, ebx
	xor	eax, eax
	mov	edi, esi
	or	edi, eax
	mov	DWORD PTR _fixcount$[ebp], ebx
	je	SHORT $LN61@sqcurve_gr
	mov	ebx, 1
	mov	DWORD PTR _fixcount$[ebp], ebx
$LN61@sqcurve_gr:
	mov	eax, DWORD PTR [edx+4]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 192				; 000000c0H
	xor	edi, edi
	or	eax, edi
	je	SHORT $LN141@sqcurve_gr
	inc	ebx
	mov	DWORD PTR _fixcount$[ebp], ebx
$LN141@sqcurve_gr:
	mov	eax, DWORD PTR [edx+8]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 192				; 000000c0H
	xor	edi, edi
	or	eax, edi
	je	SHORT $LN143@sqcurve_gr
	inc	ebx
	mov	DWORD PTR _fixcount$[ebp], ebx
$LN143@sqcurve_gr:

; 377  :        for ( i = 0 ; i < FACET_VERTS ; i++ )
; 378  :           if ( !(get_vattr(v_id[i]) & (BOUNDARY|FIXED)) )

	xor	eax, eax
	or	esi, eax
	jne	SHORT $LN57@sqcurve_gr

; 379  :              vc[i]->a += 3*area/(3-fixcount);

	mov	ecx, 3
	fld	ST(1)
	sub	ecx, ebx
	fmul	ST(0), ST(1)
	mov	DWORD PTR tv5522[ebp], ecx
	fild	DWORD PTR tv5522[ebp]
	mov	eax, DWORD PTR _vc$[ebp]
	fdivp	ST(1), ST(0)
	fadd	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR _web+12
$LN57@sqcurve_gr:

; 377  :        for ( i = 0 ; i < FACET_VERTS ; i++ )
; 378  :           if ( !(get_vattr(v_id[i]) & (BOUNDARY|FIXED)) )

	mov	eax, DWORD PTR [edx+4]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 192				; 000000c0H
	xor	esi, esi
	or	eax, esi
	jne	SHORT $LN176@sqcurve_gr

; 379  :              vc[i]->a += 3*area/(3-fixcount);

	mov	ecx, 3
	fld	ST(1)
	sub	ecx, ebx
	fmul	ST(0), ST(1)
	mov	DWORD PTR tv5509[ebp], ecx
	fild	DWORD PTR tv5509[ebp]
	mov	eax, DWORD PTR _vc$[ebp+4]
	fdivp	ST(1), ST(0)
	fadd	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR _web+12
$LN176@sqcurve_gr:

; 377  :        for ( i = 0 ; i < FACET_VERTS ; i++ )
; 378  :           if ( !(get_vattr(v_id[i]) & (BOUNDARY|FIXED)) )

	mov	edx, DWORD PTR [edx+8]
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 192				; 000000c0H
	xor	ecx, ecx
	or	eax, ecx
	jne	SHORT $LN209@sqcurve_gr

; 379  :              vc[i]->a += 3*area/(3-fixcount);

	mov	eax, 3
	fmulp	ST(1), ST(0)
	sub	eax, ebx
	mov	DWORD PTR tv5496[ebp], eax
	fild	DWORD PTR tv5496[ebp]
	mov	eax, DWORD PTR _vc$[ebp+8]
	fdivp	ST(1), ST(0)
	fadd	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]
	jmp	SHORT $LN174@sqcurve_gr
$LN209@sqcurve_gr:

; 377  :        for ( i = 0 ; i < FACET_VERTS ; i++ )
; 378  :           if ( !(get_vattr(v_id[i]) & (BOUNDARY|FIXED)) )

	fstp	ST(1)
	fstp	ST(0)
$LN174@sqcurve_gr:

; 380  :      }
; 381  :   for ( i = 0 ; i < FACET_EDGES ; i++ )
; 382  :      ec[i] = e_curve + loc_ordinal(e_id[i]);

	mov	edx, DWORD PTR _e_id$GSCopy$[ebp]
	mov	eax, DWORD PTR [edx]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN77@sqcurve_gr
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN78@sqcurve_gr
$LN77@sqcurve_gr:
	or	eax, -1
$LN78@sqcurve_gr:
	mov	ecx, DWORD PTR _e_curve
	lea	eax, DWORD PTR [eax+eax*8]
	shl	eax, 6
	add	eax, ecx
	mov	DWORD PTR _ec$[ebp], eax
	mov	eax, DWORD PTR [edx+4]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN156@sqcurve_gr
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN157@sqcurve_gr
$LN156@sqcurve_gr:
	or	eax, -1
$LN157@sqcurve_gr:
	lea	eax, DWORD PTR [eax+eax*8]
	shl	eax, 6
	add	eax, ecx
	mov	DWORD PTR _ec$[ebp+4], eax
	mov	eax, DWORD PTR [edx+8]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN159@sqcurve_gr
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN160@sqcurve_gr
$LN159@sqcurve_gr:
	or	eax, -1
$LN160@sqcurve_gr:
	lea	edx, DWORD PTR [eax+eax*8]

; 383  : 
; 384  :   memset((char*)force,0,sizeof(force));

	push	144					; 00000090H
	shl	edx, 6
	lea	eax, DWORD PTR _force$[ebp]
	add	edx, ecx
	push	0
	push	eax
	mov	DWORD PTR _ec$[ebp+8], edx
	call	_memset
	fld	QWORD PTR __real@3fd0000000000000
	fld	QWORD PTR _area$[ebp]
	lea	ecx, DWORD PTR _force$[ebp+8]
	mov	DWORD PTR tv3476[ebp], ecx
	mov	ecx, DWORD PTR _web+616
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv3450[ebp], 0
	mov	DWORD PTR tv3454[ebp], 2
	mov	DWORD PTR tv1810[ebp], 3
$LN51@sqcurve_gr:

; 386  :      { int i1 = (j+1)%FACET_VERTS;

	mov	esi, DWORD PTR tv3454[ebp]
	lea	eax, DWORD PTR [esi-1]
	cdq
	mov	edi, 3
	idiv	edi

; 387  :         int i2 = (j+2)%FACET_VERTS;

	mov	eax, esi
	mov	esi, 3
	mov	edi, edx
	cdq
	idiv	esi
	mov	eax, edx

; 388  :         for ( i = 0 ; i < SDIM ; i++ )

	xor	edx, edx
	mov	DWORD PTR _i2$89406[ebp], eax
	cmp	ecx, 4
	jl	$LN171@sqcurve_gr
	mov	ebx, DWORD PTR _side$GSCopy$[ebp]
	mov	edx, edi
	shl	edx, 5
	lea	edx, DWORD PTR _tt$[ebp+edx]
	mov	DWORD PTR tv1990[ebp], edx
	lea	edx, DWORD PTR [eax+edi*2]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	esi, DWORD PTR [edi+edi*2]
	shl	esi, 4
	add	esi, ebx
	shl	eax, 4
	add	eax, ebx
	lea	ebx, DWORD PTR [ecx-4]
	shr	ebx, 2
	inc	ebx
	add	edx, edi
	mov	DWORD PTR tv184[ebp], ebx
	lea	edx, DWORD PTR _tt$[ebp+edx*8]
	add	ebx, ebx
	add	ebx, ebx
	mov	DWORD PTR tv2003[ebp], edx
	mov	edx, DWORD PTR tv3476[ebp]
	mov	DWORD PTR _i$[ebp], ebx
$LN163@sqcurve_gr:

; 389  :           force[j][i] = (tt[i1][i1]*side[i2][i] - tt[i1][i2]*side[i1][i])
; 390  :                                     /4/area;

	fld	QWORD PTR [eax]
	mov	ebx, DWORD PTR tv1990[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv2003[ebp]
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv1990[ebp]
	fmul	QWORD PTR [esi]
	add	eax, 32					; 00000020H
	add	esi, 32					; 00000020H
	add	edx, 32					; 00000020H
	dec	DWORD PTR tv184[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [edx-40]
	fld	QWORD PTR [eax-24]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [esi-24]
	mov	ebx, DWORD PTR tv2003[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv1990[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [edx-32]
	fld	QWORD PTR [eax-16]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [esi-16]
	mov	ebx, DWORD PTR tv2003[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv1990[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [edx-24]
	fld	QWORD PTR [eax-8]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [esi-8]
	mov	ebx, DWORD PTR tv2003[ebp]
	fmul	QWORD PTR [ebx]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [edx-16]
	jne	$LN163@sqcurve_gr

; 386  :      { int i1 = (j+1)%FACET_VERTS;

	mov	eax, DWORD PTR _i2$89406[ebp]
	mov	edx, DWORD PTR _i$[ebp]
$LN171@sqcurve_gr:

; 388  :         for ( i = 0 ; i < SDIM ; i++ )

	cmp	edx, ecx
	jge	SHORT $LN50@sqcurve_gr
	mov	ebx, DWORD PTR tv3450[ebp]
	mov	esi, edi
	shl	esi, 5
	lea	esi, DWORD PTR _tt$[ebp+esi]

; 389  :           force[j][i] = (tt[i1][i1]*side[i2][i] - tt[i1][i2]*side[i1][i])
; 390  :                                     /4/area;

	mov	DWORD PTR tv1990[ebp], esi
	lea	esi, DWORD PTR [eax+edi*2]
	add	esi, edi
	lea	esi, DWORD PTR _tt$[ebp+esi*8]
	mov	DWORD PTR tv2003[ebp], esi
	lea	esi, DWORD PTR [edi+edi*2]
	lea	edi, DWORD PTR [edx+esi*2]
	mov	esi, DWORD PTR _side$GSCopy$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [edx+eax*2]
	lea	edi, DWORD PTR [esi+edi*8]
	lea	esi, DWORD PTR [esi+eax*8]
	add	ebx, edx
	mov	eax, ecx
	lea	ebx, DWORD PTR _force$[ebp+ebx*8]
	sub	eax, edx
$LC48@sqcurve_gr:
	fld	QWORD PTR [esi]
	mov	edx, DWORD PTR tv1990[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv2003[ebp]
	fld	QWORD PTR [edx]
	add	esi, 8
	fmul	QWORD PTR [edi]
	add	edi, 8
	add	ebx, 8
	dec	eax
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ebx-8]
	jne	SHORT $LC48@sqcurve_gr
$LN50@sqcurve_gr:

; 385  :   for ( j = 0 ; j < FACET_VERTS ; j++ )

	add	DWORD PTR tv3476[ebp], 48		; 00000030H
	add	DWORD PTR tv3450[ebp], 6
	mov	eax, 1
	add	DWORD PTR tv3454[ebp], eax
	sub	DWORD PTR tv1810[ebp], eax
	jne	$LN51@sqcurve_gr

; 391  :      }
; 392  : 
; 393  :   /* first and second derivatives at vertices; should add pullback */
; 394  :   for ( i = 0 ; i < FACET_VERTS ; i++ )

	fld	QWORD PTR __real@4008000000000000
	xor	edi, edi
	lea	eax, DWORD PTR _force$[ebp]
	mov	DWORD PTR tv4073[ebp], edi
	mov	DWORD PTR tv4146[ebp], eax
$LN45@sqcurve_gr:

; 395  :      { int ii = (i+1)%FACET_VERTS; /* opposite side from vertex i */

	lea	eax, DWORD PTR [edi+1]
	mov	DWORD PTR tv2085[ebp], eax
	cdq
	mov	esi, 3
	idiv	esi

; 396  :         for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	mov	DWORD PTR _ii$89413[ebp], edx
	test	ecx, ecx
	jle	SHORT $LN166@sqcurve_gr

; 395  :      { int ii = (i+1)%FACET_VERTS; /* opposite side from vertex i */

	mov	eax, DWORD PTR _vc$[ebp+edi*4]
	mov	edx, DWORD PTR tv4146[ebp]
	add	eax, 16					; 00000010H
$LN42@sqcurve_gr:

; 397  :           vc[i]->force[j] += force[i][j];

	fld	QWORD PTR [eax]
	inc	esi
	fadd	QWORD PTR [edx]
	add	edx, 8
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	mov	ecx, DWORD PTR _web+616
	cmp	esi, ecx
	jl	SHORT $LN42@sqcurve_gr
$LN166@sqcurve_gr:

; 398  :         if ( boundary_curvature_flag && (fixcount != 3) )

	cmp	DWORD PTR _boundary_curvature_flag, 0
	je	SHORT $LN36@sqcurve_gr
	mov	eax, DWORD PTR _fixcount$[ebp]
	cmp	eax, 3
	je	SHORT $LN36@sqcurve_gr

; 399  :          for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	test	ecx, ecx
	jle	SHORT $LN36@sqcurve_gr
	mov	edx, DWORD PTR tv4146[ebp]
	mov	ecx, 3
	sub	ecx, eax
	mov	eax, DWORD PTR _vc$[ebp+edi*4]
	mov	DWORD PTR tv5461[ebp], ecx
	fild	DWORD PTR tv5461[ebp]
	add	eax, 80					; 00000050H
$LN38@sqcurve_gr:

; 400  :           vc[i]->star_force[j] += 3*force[i][j]/(3-fixcount);

	fld	QWORD PTR [edx]
	inc	esi
	fmul	ST(0), ST(2)
	add	edx, 8
	add	eax, 8
	fdiv	ST(0), ST(1)
	fadd	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	mov	ecx, DWORD PTR _web+616
	cmp	esi, ecx
	jl	SHORT $LN38@sqcurve_gr

; 399  :          for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(0)
$LN36@sqcurve_gr:

; 401  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	DWORD PTR _j$[ebp], 0
	test	ecx, ecx
	jle	$LN44@sqcurve_gr
	mov	edx, DWORD PTR _ii$89413[ebp]
	mov	eax, DWORD PTR _vc$[ebp+edi*4]
	shl	edx, 5
	fld	QWORD PTR _tt$[ebp+edx]
	sub	eax, -128				; ffffff80H
	fmul	ST(0), ST(3)
	mov	DWORD PTR tv4051[ebp], eax
	mov	DWORD PTR tv4053[ebp], eax
	fdiv	ST(0), ST(2)
$LN35@sqcurve_gr:

; 402  :           { vc[i]->deriv2[j][j] +=  tt[ii][ii]/4/area;

	mov	eax, DWORD PTR tv4053[ebp]
	fld	QWORD PTR [eax]

; 403  :              for ( k = 0 ; k < SDIM ; k++ )

	xor	edx, edx
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax]
	mov	ecx, DWORD PTR _web+616
	test	ecx, ecx
	jle	SHORT $LN34@sqcurve_gr
	mov	eax, DWORD PTR _ii$89413[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	lea	esi, DWORD PTR [eax+eax*2]
	lea	edi, DWORD PTR [ecx+esi*2]
	mov	esi, DWORD PTR _side$GSCopy$[ebp]
	lea	ebx, DWORD PTR [esi+edi*8]
	mov	edi, DWORD PTR tv4073[ebp]
	add	edi, ecx
	lea	eax, DWORD PTR [eax+eax*2]
	lea	ecx, DWORD PTR _force$[ebp+edi*8]
	mov	edi, DWORD PTR tv4146[ebp]
	shl	eax, 4
	add	eax, esi
	mov	esi, DWORD PTR tv4051[ebp]
	mov	DWORD PTR tv4142[ebp], ecx
$LN32@sqcurve_gr:

; 404  :                 vc[i]->deriv2[j][k] -= (force[i][j]*force[i][k]+0.25*side[ii][j]
; 405  :                                                 *side[ii][k])/area;

	fld	QWORD PTR [ebx]
	mov	ecx, DWORD PTR tv4142[ebp]
	fmul	ST(0), ST(4)
	inc	edx
	add	eax, 8
	add	edi, 8
	fmul	QWORD PTR [eax-8]
	add	esi, 8
	fld	QWORD PTR [edi-8]
	fmul	QWORD PTR [ecx]
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(3)
	fsubr	QWORD PTR [esi-8]
	fstp	QWORD PTR [esi-8]
	mov	ecx, DWORD PTR _web+616
	cmp	edx, ecx
	jl	SHORT $LN32@sqcurve_gr
$LN34@sqcurve_gr:

; 401  :         for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR _j$[ebp]
	add	DWORD PTR tv4053[ebp], 56		; 00000038H
	add	DWORD PTR tv4051[ebp], 48		; 00000030H
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, ecx
	jl	$LN35@sqcurve_gr

; 403  :              for ( k = 0 ; k < SDIM ; k++ )

	fstp	ST(0)
$LN44@sqcurve_gr:

; 391  :      }
; 392  : 
; 393  :   /* first and second derivatives at vertices; should add pullback */
; 394  :   for ( i = 0 ; i < FACET_VERTS ; i++ )

	mov	eax, DWORD PTR tv4073[ebp]
	add	DWORD PTR tv4146[ebp], 48		; 00000030H
	mov	edi, DWORD PTR tv2085[ebp]
	add	eax, 6
	mov	DWORD PTR tv4073[ebp], eax
	cmp	eax, 18					; 00000012H
	jl	$LN45@sqcurve_gr

; 406  :           }
; 407  :      }
; 408  : 
; 409  :   /* now first and second derivatives on edges; should add pullback */
; 410  :   for ( i = 0 ; i < FACET_EDGES ; i++ )

	mov	eax, DWORD PTR _e_id$GSCopy$[ebp]
	fstp	ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	lea	edx, DWORD PTR _ec$[ebp]
	mov	esi, 2
	lea	ebx, DWORD PTR _force$[ebp]
	sub	edx, eax
	mov	DWORD PTR tv5523[ebp], esi
	mov	DWORD PTR tv5591[ebp], eax
	mov	DWORD PTR tv5593[ebp], ebx
	mov	DWORD PTR tv5617[ebp], edx
	mov	DWORD PTR tv5555[ebp], 3
$LN175@sqcurve_gr:

; 411  :   { 
; 412  :     int i1 =  (i+1)%FACET_EDGES;

	lea	eax, DWORD PTR [esi-1]
	cdq
	mov	edi, 3
	idiv	edi

; 413  :     int i2 =  (i+2)%FACET_EDGES;

	mov	eax, esi
	mov	esi, 3

; 414  :     for ( j = 0 ; j < SDIM ; j++ )

	mov	DWORD PTR _j$[ebp], 0
	mov	edi, edx
	cdq
	idiv	esi
	mov	DWORD PTR _i1$89430[ebp], edi
	mov	esi, edx
	mov	DWORD PTR _i2$89431[ebp], esi
	test	ecx, ecx
	jle	$LN24@sqcurve_gr
	mov	eax, DWORD PTR tv5617[ebp]
	mov	ecx, DWORD PTR tv5591[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	lea	edx, DWORD PTR [esi+edi*2]
	add	edx, edi
	fld	QWORD PTR _tt$[ebp+edx*8]
	lea	eax, DWORD PTR [edi+edi*2]
	shl	eax, 4
	fmul	ST(0), ST(3)
	mov	DWORD PTR tv5620[ebp], ecx
	mov	DWORD PTR tv4505[ebp], eax
	lea	edx, DWORD PTR _force$[ebp+eax]
	fdiv	ST(0), ST(2)
	lea	eax, DWORD PTR [ecx+96]
	add	ecx, 192				; 000000c0H
	mov	DWORD PTR tv4958[ebp], ecx
	mov	ecx, DWORD PTR _side$GSCopy$[ebp]
	lea	edi, DWORD PTR _force$[ebp]
	sub	ecx, edi
	mov	DWORD PTR tv4780[ebp], 24		; 00000018H
	mov	DWORD PTR tv4948[ebp], ebx
	mov	DWORD PTR tv4952[ebp], eax
	mov	DWORD PTR tv5053[ebp], ecx
$LN26@sqcurve_gr:

; 415  :     { ec[i]->deriv2[j][j] += tt[i1][i2]/4/area;

	mov	ecx, DWORD PTR tv4958[ebp]
	fld	QWORD PTR [ecx]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [ecx]

; 416  :       for ( k = 0 ; k < SDIM ; k++ )

	xor	ecx, ecx
	mov	DWORD PTR _k$[ebp], ecx
	cmp	DWORD PTR _web+616, ecx
	jle	$LN169@sqcurve_gr
	mov	edi, DWORD PTR _j$[ebp]
	mov	ebx, DWORD PTR _side$GSCopy$[ebp]
	lea	eax, DWORD PTR [esi+esi*2]
	lea	eax, DWORD PTR [edi+eax*2]
	mov	edi, DWORD PTR tv5593[ebp]
	lea	eax, DWORD PTR [ebx+eax*8]
	mov	DWORD PTR tv2188[ebp], eax
	lea	eax, DWORD PTR [esi+esi*2]
	mov	esi, DWORD PTR tv4505[ebp]
	shl	eax, 4
	add	eax, ebx
	add	esi, ebx
	mov	ebx, DWORD PTR tv4952[ebp]
	add	ebx, 96					; 00000060H
	mov	DWORD PTR tv4491[ebp], ebx
$LN23@sqcurve_gr:

; 417  :         if ( inverted(e_id[i]) )

	mov	ebx, DWORD PTR tv5591[ebp]

; 418  :            ec[i]->deriv2[k][j] += (-side[i1][j]*side[i2][k]/2
; 419  :                                 + side[i2][j]*side[i1][k]/4
; 420  :                                 -force[i1][j]*force[i][k])/area;

	fld	QWORD PTR [esi]
	test	DWORD PTR [ebx], 134217728		; 08000000H
	je	SHORT $LN20@sqcurve_gr
	mov	ebx, DWORD PTR tv2188[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv5053[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR [eax]
	fmul	QWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR tv4491[ebp]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx]
	fmul	QWORD PTR [edi]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(3)
	fadd	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]

; 421  :          else

	jmp	SHORT $LN22@sqcurve_gr
$LN20@sqcurve_gr:

; 422  :            ec[i]->deriv2[j][k] += (-side[i1][j]*side[i2][k]/2
; 423  :                                    + side[i2][j]*side[i1][k]/4
; 424  :                                    -force[i1][j]*force[i][k])/area;

	mov	ebx, DWORD PTR tv4780[ebp]
	add	ebx, ecx
	mov	ecx, DWORD PTR tv5620[ebp]
	lea	ecx, DWORD PTR [ecx+ebx*8]
	mov	ebx, DWORD PTR tv2188[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv5053[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR [eax]
	fmul	QWORD PTR [ebx+edx]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx]
	fmul	QWORD PTR [edi]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(3)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _k$[ebp]
$LN22@sqcurve_gr:

; 416  :       for ( k = 0 ; k < SDIM ; k++ )

	add	DWORD PTR tv4491[ebp], 48		; 00000030H
	inc	ecx
	add	esi, 8
	add	eax, 8
	add	edi, 8
	mov	DWORD PTR _k$[ebp], ecx
	cmp	ecx, DWORD PTR _web+616
	jl	$LN23@sqcurve_gr
	mov	ebx, DWORD PTR tv4948[ebp]
	mov	eax, DWORD PTR tv4952[ebp]
	mov	esi, DWORD PTR _i2$89431[ebp]
$LN169@sqcurve_gr:

; 425  :       if ( boundary_curvature_flag 
; 426  :                      && (get_vattr(v_id[i2]) & (FIXED|BOUNDARY)) )

	cmp	DWORD PTR _boundary_curvature_flag, 0
	je	SHORT $LN170@sqcurve_gr
	mov	ecx, DWORD PTR _v_id$[ebp]
	mov	ecx, DWORD PTR [ecx+esi*4]
	mov	edi, DWORD PTR _web+12
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	ecx, DWORD PTR [ecx+8]
	and	ecx, 192				; 000000c0H
	xor	edi, edi
	or	ecx, edi
	je	SHORT $LN170@sqcurve_gr

; 427  :       { if ( inverted(e_id[i]) )

	mov	ecx, DWORD PTR tv5591[ebp]
	test	DWORD PTR [ecx], 134217728		; 08000000H
	je	SHORT $LN17@sqcurve_gr

; 428  :         { ec[i]->aderiv[0][j] += 0.5*force[i1][j];

	fld	QWORD PTR [edx]
	fmul	ST(0), ST(2)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]

; 429  :           ec[i]->aderiv[1][j] += 0.5*force[i][j];

	fld	QWORD PTR [ebx]

; 430  :         }
; 431  :         else

	jmp	SHORT $LN285@sqcurve_gr
$LN17@sqcurve_gr:

; 432  :         { ec[i]->aderiv[0][j] += 0.5*force[i][j];

	fld	QWORD PTR [ebx]
	fmul	ST(0), ST(2)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]

; 433  :           ec[i]->aderiv[1][j] += 0.5*force[i1][j];

	fld	QWORD PTR [edx]
$LN285@sqcurve_gr:
	fmul	ST(0), ST(2)
	fadd	QWORD PTR [eax+48]
	fstp	QWORD PTR [eax+48]
$LN170@sqcurve_gr:

; 434  :         }
; 435  :       }
; 436  : 
; 437  :       if ( inverted(e_id[i]) )

	mov	ecx, DWORD PTR tv5591[ebp]
	test	DWORD PTR [ecx], 134217728		; 08000000H
	je	SHORT $LN15@sqcurve_gr

; 438  :       { ec[i]->deriv[0][j] += force[i1][j];

	fld	QWORD PTR [edx]
	fadd	QWORD PTR [eax-96]
	fstp	QWORD PTR [eax-96]

; 439  :         ec[i]->deriv[1][j] += force[i][j];

	fld	QWORD PTR [eax-48]
	fadd	QWORD PTR [ebx]

; 440  :       }
; 441  :       else

	jmp	SHORT $LN286@sqcurve_gr
$LN15@sqcurve_gr:

; 442  :       { ec[i]->deriv[0][j] += force[i][j];

	fld	QWORD PTR [eax-96]
	fadd	QWORD PTR [ebx]
	fstp	QWORD PTR [eax-96]

; 443  :         ec[i]->deriv[1][j] += force[i1][j];

	fld	QWORD PTR [eax-48]
	fadd	QWORD PTR [edx]
$LN286@sqcurve_gr:
	mov	edi, DWORD PTR _j$[ebp]
	fstp	QWORD PTR [eax-48]
	mov	ecx, DWORD PTR _web+616
	add	DWORD PTR tv4958[ebp], 56		; 00000038H
	add	DWORD PTR tv4780[ebp], 6
	inc	edi
	add	eax, 8
	add	ebx, 8
	add	edx, 8
	mov	DWORD PTR _j$[ebp], edi
	mov	DWORD PTR tv4952[ebp], eax
	mov	DWORD PTR tv4948[ebp], ebx
	cmp	edi, ecx
	jl	$LN26@sqcurve_gr

; 414  :     for ( j = 0 ; j < SDIM ; j++ )

	mov	edi, DWORD PTR _i1$89430[ebp]
	fstp	ST(0)
$LN24@sqcurve_gr:

; 444  :       }
; 445  :     }
; 446  :     if ( self_similar_flag )

	cmp	DWORD PTR _self_similar_flag, 0
	je	$LN28@sqcurve_gr

; 447  :     { REAL cp[MAXCOORD];
; 448  :       int ii;
; 449  :       cross_prod(get_coord(get_edge_tailv(e_id[i])),
; 450  :                        get_coord(get_edge_headv(e_id[i])), cp);

	mov	edx, DWORD PTR tv5591[ebp]
	fstp	ST(2)
	mov	eax, DWORD PTR [edx]
	fstp	ST(0)
	mov	ebx, DWORD PTR _web+124
	fstp	ST(0)
	test	eax, 134217728				; 08000000H
	je	SHORT $LN80@sqcurve_gr
	mov	ecx, DWORD PTR _web+216
	mov	edx, DWORD PTR _dymem
	mov	edx, DWORD PTR [ecx+edx+304]
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	mov	ecx, DWORD PTR [edx+ecx]
	jmp	SHORT $LN79@sqcurve_gr
$LN80@sqcurve_gr:
	mov	ecx, DWORD PTR _dymem
	mov	edx, DWORD PTR _web+216
	mov	edx, DWORD PTR [edx+ecx+304]
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	mov	ebx, DWORD PTR _web+636
	lea	ecx, DWORD PTR [ecx+ebx*4]
	mov	ecx, DWORD PTR [ecx+edx]
	mov	ebx, DWORD PTR _web+124
$LN79@sqcurve_gr:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN84@sqcurve_gr
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	ebx, DWORD PTR _web+636
	lea	eax, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR [eax+edx]
	jmp	SHORT $LN83@sqcurve_gr
$LN84@sqcurve_gr:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	eax, DWORD PTR [edx+eax]
$LN83@sqcurve_gr:
	mov	ebx, DWORD PTR _dymem
	mov	edx, DWORD PTR _web+104
	mov	edx, DWORD PTR [edx+ebx+64]
	lea	ebx, DWORD PTR _cp$89452[ebp]
	push	ebx
	mov	ebx, DWORD PTR _web+12
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	add	ecx, edx
	push	ecx
	add	eax, edx
	push	eax
	call	_cross_prod

; 451  :       ii =  inverted(e_id[i1]) ? 0 : 1;

	mov	ebx, DWORD PTR _e_id$GSCopy$[ebp]
	mov	eax, DWORD PTR [ebx+edi*4]

; 452  :       for ( j = 0 ; j < SDIM ; j++ ) ec[i1]->volderiv[ii][j] += cp[j];

	mov	ecx, DWORD PTR _web+616
	shr	eax, 27					; 0000001bH
	not	eax
	add	esp, 12					; 0000000cH
	and	eax, 1
	xor	edx, edx
	test	ecx, ecx
	jle	SHORT $LN167@sqcurve_gr

; 447  :     { REAL cp[MAXCOORD];
; 448  :       int ii;
; 449  :       cross_prod(get_coord(get_edge_tailv(e_id[i])),
; 450  :                        get_coord(get_edge_headv(e_id[i])), cp);

	lea	eax, DWORD PTR [eax+eax*2+30]
	shl	eax, 4
	add	eax, DWORD PTR _ec$[ebp+edi*4]
$LL12@sqcurve_gr:

; 452  :       for ( j = 0 ; j < SDIM ; j++ ) ec[i1]->volderiv[ii][j] += cp[j];

	fld	QWORD PTR _cp$89452[ebp+edx*8]
	inc	edx
	fadd	QWORD PTR [eax]
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	mov	ecx, DWORD PTR _web+616
	cmp	edx, ecx
	jl	SHORT $LL12@sqcurve_gr
$LN167@sqcurve_gr:

; 453  :       ii =  inverted(e_id[i2]) ? 1 : 0;

	mov	eax, DWORD PTR [ebx+esi*4]
	shr	eax, 27					; 0000001bH
	and	eax, 1

; 454  :       for ( j = 0 ; j < SDIM ; j++ ) ec[i2]->volderiv[ii][j] += cp[j];

	xor	edx, edx
	test	ecx, ecx
	jle	SHORT $LN164@sqcurve_gr

; 453  :       ii =  inverted(e_id[i2]) ? 1 : 0;

	lea	eax, DWORD PTR [eax+eax*2+30]
	shl	eax, 4
	add	eax, DWORD PTR _ec$[ebp+esi*4]
	npad	5
$LL9@sqcurve_gr:

; 454  :       for ( j = 0 ; j < SDIM ; j++ ) ec[i2]->volderiv[ii][j] += cp[j];

	fld	QWORD PTR _cp$89452[ebp+edx*8]
	inc	edx
	fadd	QWORD PTR [eax]
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	mov	ecx, DWORD PTR _web+616
	cmp	edx, ecx
	jl	SHORT $LL9@sqcurve_gr
$LN164@sqcurve_gr:
	fld	QWORD PTR __real@3fd0000000000000
	fld	QWORD PTR __real@3fe0000000000000
	fld	QWORD PTR _area$[ebp]
	fxch	ST(1)
$LN28@sqcurve_gr:

; 406  :           }
; 407  :      }
; 408  : 
; 409  :   /* now first and second derivatives on edges; should add pullback */
; 410  :   for ( i = 0 ; i < FACET_EDGES ; i++ )

	mov	esi, DWORD PTR tv5523[ebp]
	mov	ebx, DWORD PTR tv5593[ebp]
	add	DWORD PTR tv5591[ebp], 4
	inc	esi
	add	ebx, 48					; 00000030H
	dec	DWORD PTR tv5555[ebp]
	mov	DWORD PTR tv5523[ebp], esi
	mov	DWORD PTR tv5593[ebp], ebx
	jne	$LN175@sqcurve_gr

; 455  :     }
; 456  :   } 
; 457  :   
; 458  :   /* accumulate normal vector at each vertex */
; 459  :     { REAL normal[MAXCOORD];
; 460  :       cross_prod(side[0],side[1],normal);

	mov	eax, DWORD PTR _side$GSCopy$[ebp]
	fstp	ST(2)
	lea	ecx, DWORD PTR _normal$89470[ebp]
	fstp	ST(0)
	push	ecx
	fstp	ST(0)
	lea	edx, DWORD PTR [eax+48]
	push	edx
	push	eax
	call	_cross_prod

; 461  :       for ( i = 0 ; i < 3 ; i ++ )

	mov	edx, DWORD PTR _web+616
	add	esp, 12					; 0000000cH
	xor	esi, esi
	npad	1
$LL6@sqcurve_gr:

; 462  :          for ( j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN5@sqcurve_gr
	mov	eax, DWORD PTR _vc$[ebp+esi*4]
	add	eax, 416				; 000001a0H
$LL3@sqcurve_gr:

; 463  :             vc[i]->normal[j] += normal[j];

	fld	QWORD PTR _normal$89470[ebp+ecx*8]
	inc	ecx
	fadd	QWORD PTR [eax]
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	mov	edx, DWORD PTR _web+616
	cmp	ecx, edx
	jl	SHORT $LL3@sqcurve_gr
$LN5@sqcurve_gr:

; 461  :       for ( i = 0 ; i < 3 ; i ++ )

	inc	esi
	cmp	esi, 3
	jl	SHORT $LL6@sqcurve_gr

; 464  :     }
; 465  : } // end sqcurve_grad_precalc()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_sqcurve_grad_precalc ENDP
_TEXT	ENDS
PUBLIC	_sqcurve_method_cleanup
EXTRN	_temp_free:PROC
; Function compile flags: /Ogtp
;	COMDAT _sqcurve_method_cleanup
_TEXT	SEGMENT
_sqcurve_method_cleanup PROC				; COMDAT

; 476  :   if ( v_curve ) { temp_free((char*)v_curve); v_curve = NULL; }

	mov	eax, DWORD PTR _v_curve
	test	eax, eax
	je	SHORT $LN2@sqcurve_me
	push	eax
	call	_temp_free
	add	esp, 4
	mov	DWORD PTR _v_curve, 0
$LN2@sqcurve_me:

; 477  :   if ( e_curve ) { temp_free((char*)e_curve); e_curve = NULL; }

	mov	eax, DWORD PTR _e_curve
	test	eax, eax
	je	SHORT $LN1@sqcurve_me
	push	eax
	call	_temp_free
	add	esp, 4
	mov	DWORD PTR _e_curve, 0
$LN1@sqcurve_me:

; 478  : } // end sqcurve_method_cleanup()

	ret	0
_sqcurve_method_cleanup ENDP
_TEXT	ENDS
PUBLIC	__real@bff5555555555555
PUBLIC	__real@4018000000000000
PUBLIC	__real@3ff5555555555555
PUBLIC	__real@4032000000000000
PUBLIC	__real@4022000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4010000000000000
PUBLIC	??_C@_0DF@BEBOABHA@Force?5not?5implemented?5yet?5for?5di@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_sqcurve_method_grad
EXTRN	_triple_prod:PROC
EXTRN	_assume_oriented_flag:DWORD
EXTRN	_get_edge_side:PROC
EXTRN	_eff_area_sq_mean_curvature_mi:DWORD
EXTRN	_mix_sq_mean_curvature_mi:DWORD
EXTRN	_h0_attr:DWORD
EXTRN	_normal_sq_mean_curvature_mi:DWORD
EXTRN	_kb_error:PROC
EXTRN	_div_normal_curvature_flag:DWORD
EXTRN	_meth_inst_list:DWORD
_BSS	SEGMENT
_sq_mean_mix DQ	01H DUP (?)
_selfsim_coeff DQ 01H DUP (?)
_h0_value DQ	01H DUP (?)
_h0_flag DD	01H DUP (?)
_BSS	ENDS
;	COMDAT __real@bff5555555555555
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@bff5555555555555 DQ 0bff5555555555555r	; -1.33333
CONST	ENDS
;	COMDAT __real@4018000000000000
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
CONST	ENDS
;	COMDAT __real@3ff5555555555555
CONST	SEGMENT
__real@3ff5555555555555 DQ 03ff5555555555555r	; 1.33333
CONST	ENDS
;	COMDAT __real@4032000000000000
CONST	SEGMENT
__real@4032000000000000 DQ 04032000000000000r	; 18
CONST	ENDS
;	COMDAT __real@4022000000000000
CONST	SEGMENT
__real@4022000000000000 DQ 04022000000000000r	; 9
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT ??_C@_0DF@BEBOABHA@Force?5not?5implemented?5yet?5for?5di@
CONST	SEGMENT
??_C@_0DF@BEBOABHA@Force?5not?5implemented?5yet?5for?5di@ DB 'Force not i'
	DB	'mplemented yet for div_normal_curvature.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\sqcurve2.c
CONST	ENDS
;	COMDAT _sqcurve_method_grad
_TEXT	SEGMENT
_fudge22$ = -788					; size = 8
_fudge12$ = -780					; size = 8
_fudge23$ = -772					; size = 8
_fudge21$ = -764					; size = 8
_fudge13$ = -756					; size = 8
_fudge11$ = -748					; size = 8
_venergy$ = -740					; size = 8
_a$ = -732						; size = 8
tv5616 = -728						; size = 4
tv5431 = -724						; size = 4
_eee_id$ = -724						; size = 4
_e1$ = -720						; size = 8
_fudge2$ = -720						; size = 8
tv6349 = -712						; size = 8
tv5519 = -712						; size = 8
_denom1$89783 = -712					; size = 8
_fudge1$ = -712						; size = 8
_fudge3$ = -704						; size = 8
_e$ = -704						; size = 8
_ee_id$ = -700						; size = 4
_area$ = -696						; size = 8
tv5731 = -692						; size = 4
tv5706 = -692						; size = 4
tv5429 = -692						; size = 4
_e_id$ = -692						; size = 4
tv20014 = -688						; size = 8
_e2$ = -688						; size = 8
_h$ = -688						; size = 8
tv5623 = -680						; size = 4
tv19984 = -676						; size = 8
tv19269 = -676						; size = 8
tv6152 = -676						; size = 8
tv5530 = -676						; size = 8
_tattr$89918 = -676					; size = 8
_denom2$89784 = -676					; size = 8
tv223 = -676						; size = 8
_denom$ = -676						; size = 8
_attr$ = -676						; size = 8
_grad$ = -668						; size = 4
tv5620 = -664						; size = 4
tv5321 = -664						; size = 4
tv13333 = -660						; size = 4
_headv$89775 = -660					; size = 4
_mi$ = -656						; size = 4
_ec$89777 = -652					; size = 4
_vc$ = -648						; size = 4
tv14297 = -644						; size = 4
tv7795 = -644						; size = 4
tv7602 = -644						; size = 4
_fe_a$89873 = -644					; size = 4
_fe_a$89805 = -644					; size = 4
tv17284 = -640						; size = 4
tv15525 = -640						; size = 4
tv13328 = -640						; size = 4
tv7597 = -640						; size = 4
tv5669 = -640						; size = 4
tv5432 = -640						; size = 4
_tailv$89776 = -640					; size = 4
_j$ = -636						; size = 4
_fe_b$89874 = -636					; size = 4
_fe_b$89806 = -636					; size = 4
_vc1$89778 = -632					; size = 4
_i$ = -632						; size = 4
_aw$89789 = -628					; size = 48
_simd$89744 = -628					; size = 48
_aread$89745 = -628					; size = 48
_aread$89714 = -628					; size = 48
_vw$89790 = -580					; size = 48
_fd$89743 = -580					; size = 48
_fd$89713 = -580					; size = 48
_fd$89941 = -532					; size = 48
_sa$89875 = -532					; size = 48
_sb$89808 = -532					; size = 48
_s0$89785 = -484					; size = 48
_fd$89996 = -436					; size = 48
_sb$89876 = -436					; size = 48
_sa$89807 = -436					; size = 48
_ad$ = -388						; size = 48
_wa$89786 = -340					; size = 48
_wb$89787 = -292					; size = 48
_w$89788 = -244						; size = 48
_f$ = -196						; size = 48
_s$89780 = -148						; size = 48
_cross2$89782 = -100					; size = 48
_cross1$89781 = -52					; size = 48
__$ArrayPad$ = -4					; size = 4
_v_info$ = 8						; size = 4
_sqcurve_method_grad PROC				; COMDAT

; 625  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 788				; 00000314H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 626  :   vertex_id v_id = v_info->v[0];
; 627  :   edge_id e_id,ee_id,eee_id;
; 628  :   int i,j;
; 629  :   REAL e,e1,e2,denom;
; 630  :   REAL f[MAXCOORD];
; 631  :   REAL fudge1,fudge2,fudge3; /* combinations of values */
; 632  :   REAL fudge11=0.0,fudge12=0.0,fudge13=0.0; /* combinations of values */

	fldz
	mov	edx, DWORD PTR _v_info$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	fst	QWORD PTR _fudge11$[ebp]
	fst	QWORD PTR _fudge12$[ebp]
	fst	QWORD PTR _fudge13$[ebp]

; 633  :   REAL fudge21=0.0,fudge22=0.0,fudge23=0.0; /* combinations of values */

	fst	QWORD PTR _fudge21$[ebp]
	fst	QWORD PTR _fudge22$[ebp]
	fst	QWORD PTR _fudge23$[ebp]

; 634  :   REAL h; /* curvature */
; 635  :   REAL area; /* curvature normalization area */
; 636  :   REAL a;     /* integral area allocation */
; 637  :   struct v_curve_t *vc = v_curve + loc_ordinal(v_id);

	test	ecx, 268435456				; 10000000H
	je	SHORT $LN271@sqcurve_me@2
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN272@sqcurve_me@2
$LN271@sqcurve_me@2:
	or	eax, -1
$LN272@sqcurve_me@2:
	imul	eax, 544				; 00000220H

; 638  :   ATTR attr = get_vattr(v_id);
; 639  :   REAL  ad[MAXCOORD];
; 640  :   REAL venergy = 0.0;

	fst	QWORD PTR _venergy$[ebp]
	add	eax, DWORD PTR _v_curve
	push	ebx
	and	ecx, 134217727				; 07ffffffH
	push	esi
	add	ecx, ecx
	add	ecx, ecx
	push	edi
	mov	edi, eax
	mov	eax, DWORD PTR _web+12
	mov	eax, DWORD PTR [ecx+eax]
	mov	esi, DWORD PTR [eax+8]
	mov	DWORD PTR tv5321[ebp], ecx
	mov	ecx, DWORD PTR [eax+12]

; 641  :   REAL *grad = v_info->grad[0]; 

	mov	eax, DWORD PTR [edx+1336]
	mov	DWORD PTR _attr$[ebp+4], ecx
	mov	ecx, DWORD PTR [eax]

; 642  :   struct method_instance *mi = METH_INSTANCE(v_info->method);

	mov	eax, DWORD PTR [edx+8]
	cdq
	mov	ebx, eax
	xor	ebx, edx
	sub	ebx, edx
	imul	ebx, 2928				; 00000b70H
	add	ebx, DWORD PTR _meth_inst_list

; 643  : 
; 644  :   if ( div_normal_curvature_flag ) 

	cmp	DWORD PTR _div_normal_curvature_flag, 0
	mov	DWORD PTR _vc$[ebp], edi
	mov	DWORD PTR _grad$[ebp], ecx
	mov	DWORD PTR _mi$[ebp], ebx
	je	SHORT $LN268@sqcurve_me@2

; 645  :       kb_error(1761,"Force not implemented yet for div_normal_curvature.\n",
; 646  :          RECOVERABLE );

	push	1
	fstp	ST(0)
	push	OFFSET ??_C@_0DF@BEBOABHA@Force?5not?5implemented?5yet?5for?5di@
	push	1761					; 000006e1H
	call	_kb_error
	fldz
	add	esp, 12					; 0000000cH
$LN268@sqcurve_me@2:

; 647  : 
; 648  :   for ( i = 0 ; i < SDIM ; i++ ) grad[i] = 0.0;

	mov	edx, DWORD PTR _web+616
	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN631@sqcurve_me@2
	mov	ecx, DWORD PTR _grad$[ebp]
$LN267@sqcurve_me@2:
	fst	QWORD PTR [ecx+eax*8]
	mov	edx, DWORD PTR _web+616
	inc	eax
	cmp	eax, edx
	jl	SHORT $LN267@sqcurve_me@2
$LN631@sqcurve_me@2:

; 649  : 
; 650  :   if ((attr & BOUNDARY) && !(mi->flags & IGNORE_CONSTR))

	mov	eax, esi
	and	eax, 128				; 00000080H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN264@sqcurve_me@2
	test	DWORD PTR [ebx+140], 33554432		; 02000000H

; 651  :          return 0.0;

	je	$LN269@sqcurve_me@2
$LN264@sqcurve_me@2:

; 652  :   if ((attr & FIXED) && !(mi->flags & IGNORE_FIXED))

	and	esi, 64					; 00000040H
	xor	eax, eax
	or	esi, eax
	je	SHORT $LN263@sqcurve_me@2
	test	DWORD PTR [ebx+140], 134217728		; 08000000H

; 653  :          return 0.0;

	je	$LN269@sqcurve_me@2
$LN263@sqcurve_me@2:

; 654  :   if ( vc->area == 0.0 ) return 0.0;

	fld	QWORD PTR [edi]
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN269@sqcurve_me@2

; 655  :   if ( !boundary_curvature_flag ) {  area = a = vc->a/3; } 

	mov	esi, DWORD PTR _boundary_curvature_flag
	fstp	ST(0)
	fld	QWORD PTR [edi+8]
	fld	QWORD PTR __real@4008000000000000
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	test	esi, esi
	jne	SHORT $LN261@sqcurve_me@2
	fst	QWORD PTR _a$[ebp]
	jmp	SHORT $LN1010@sqcurve_me@2
$LN261@sqcurve_me@2:

; 656  :   else { a = vc->a/3; area = vc->area/3; }

	fstp	QWORD PTR _a$[ebp]
	fld	QWORD PTR [edi]
	fdiv	ST(0), ST(1)
$LN1010@sqcurve_me@2:

; 657  :   for ( i = 0 ; i < SDIM  ;i++ ) /* alloc area deriv */

	xor	ecx, ecx
	fstp	QWORD PTR _area$[ebp]
	cmp	edx, 4
	jl	$LC511@sqcurve_me@2
	lea	esi, DWORD PTR _ad$[ebp]
	sub	esi, edi
	mov	DWORD PTR tv7597[ebp], esi
	lea	esi, DWORD PTR _ad$[ebp+8]
	sub	esi, edi
	lea	eax, DWORD PTR [edi+16]
	mov	DWORD PTR tv7602[ebp], esi
$LN520@sqcurve_me@2:

; 658  :     if ( boundary_curvature_flag ) 

	cmp	DWORD PTR _boundary_curvature_flag, 0
	je	SHORT $LN512@sqcurve_me@2

; 659  :        ad[i] = vc->star_force[i]/3;

	fld	QWORD PTR [eax+64]
	mov	esi, DWORD PTR tv7597[ebp]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR _ad$[ebp+ecx*8]
	fld	QWORD PTR [eax+72]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR _ad$[ebp+ecx*8+8]
	fld	QWORD PTR [eax+80]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [esi+eax]
	fld	QWORD PTR [eax+88]
	jmp	SHORT $LN1011@sqcurve_me@2
$LN512@sqcurve_me@2:

; 660  :     else ad[i] = vc->force[i]/3;

	fld	QWORD PTR [eax]
	mov	esi, DWORD PTR tv7597[ebp]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR _ad$[ebp+ecx*8]
	fld	QWORD PTR [eax+8]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR _ad$[ebp+ecx*8+8]
	fld	QWORD PTR [eax+16]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [esi+eax]
	fld	QWORD PTR [eax+24]
$LN1011@sqcurve_me@2:
	fdiv	ST(0), ST(1)
	mov	esi, DWORD PTR tv7602[ebp]
	add	ecx, 4
	add	eax, 32					; 00000020H
	fstp	QWORD PTR [esi+eax-32]
	lea	esi, DWORD PTR [edx-3]
	cmp	ecx, esi
	jl	SHORT $LN520@sqcurve_me@2

; 657  :   for ( i = 0 ; i < SDIM  ;i++ ) /* alloc area deriv */

	mov	esi, DWORD PTR _boundary_curvature_flag
$LC511@sqcurve_me@2:
	cmp	ecx, edx
	jge	SHORT $LN692@sqcurve_me@2
	lea	eax, DWORD PTR [edi+ecx*8+16]
$LC259@sqcurve_me@2:

; 658  :     if ( boundary_curvature_flag ) 

	test	esi, esi
	je	SHORT $LN256@sqcurve_me@2

; 659  :        ad[i] = vc->star_force[i]/3;

	fld	QWORD PTR [eax+64]
	jmp	SHORT $LN1012@sqcurve_me@2
$LN256@sqcurve_me@2:

; 660  :     else ad[i] = vc->force[i]/3;

	fld	QWORD PTR [eax]
$LN1012@sqcurve_me@2:
	fdiv	ST(0), ST(1)
	inc	ecx
	add	eax, 8
	fstp	QWORD PTR _ad$[ebp+ecx*8-8]
	cmp	ecx, edx
	jl	SHORT $LC259@sqcurve_me@2
$LN692@sqcurve_me@2:

; 661  : 
; 662  :   /* vertex self-second derivatives */
; 663  :   if ( mi->gen_method==normal_sq_mean_curvature_mi )

	mov	eax, DWORD PTR [ebx+148]
	fstp	ST(0)

; 664  :   { e = SDIM_dot(vc->force,vc->force);

	push	edx
	cmp	eax, DWORD PTR _normal_sq_mean_curvature_mi
	jne	$LN254@sqcurve_me@2
	lea	ebx, DWORD PTR [edi+16]
	push	ebx
	push	ebx
	call	_dot
	fstp	QWORD PTR _e$[ebp]

; 665  :     denom = SDIM_dot(vc->force,vc->normal);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR [edi+416]
	push	eax
	push	ebx
	call	_dot

; 666  :     if ( denom != 0.0 )

	fld	ST(0)
	fldz
	add	esp, 24					; 00000018H
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN694@sqcurve_me@2

; 667  :     {
; 668  :        h = 3*e/denom;

	fld	QWORD PTR _e$[ebp]

; 669  :        switch ( h0_flag )

	mov	eax, DWORD PTR _h0_flag
	dec	eax
	fld	ST(0)
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(3)
	je	SHORT $LN250@sqcurve_me@2
	dec	eax
	jne	SHORT $LN629@sqcurve_me@2

; 671  :          case H0_IN_ATTR:   h -= *VREAL(v_id,h0_attr); break;

	mov	eax, DWORD PTR _h0_attr
	mov	ecx, DWORD PTR _dymem
	imul	eax, 240				; 000000f0H
	add	eax, DWORD PTR _web+104
	mov	edx, DWORD PTR [eax+ecx+64]
	mov	eax, DWORD PTR tv5321[ebp]
	mov	ecx, DWORD PTR _web+12
	mov	eax, DWORD PTR [eax+ecx]
	fsub	QWORD PTR [edx+eax]
	jmp	SHORT $LN629@sqcurve_me@2
$LN250@sqcurve_me@2:

; 670  :        { case H0_IN_GLOBAL: h -= h0_value; break;

	fsub	QWORD PTR _h0_value
$LN629@sqcurve_me@2:

; 672  :        }
; 673  :        venergy = h*h;

	fld	ST(0)

; 674  :        fudge1 = 4*h/denom*vc->area;

	mov	esi, DWORD PTR _vc$[ebp]
	fmul	ST(0), ST(1)

; 675  :        fudge2 = fudge1*e/denom/2;
; 676  :        fudge3 = h*h/3;
; 677  :        for ( i = 0 ; i < SDIM ; i++ )

	mov	edx, DWORD PTR _web+616
	xor	edi, edi
	fst	QWORD PTR _venergy$[ebp]
	fxch	ST(1)
	fmul	QWORD PTR __real@4010000000000000
	fdiv	ST(0), ST(4)
	fmul	QWORD PTR [esi]
	fst	QWORD PTR _fudge1$[ebp]
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fdivrp	ST(3), ST(0)
	fxch	ST(2)
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _fudge2$[ebp]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR _fudge3$[ebp]
	test	edx, edx
	jle	$LN591@sqcurve_me@2
	mov	eax, ebx
	fstp	ST(0)
	sub	esi, -128				; ffffff80H
	mov	DWORD PTR tv7795[ebp], eax
	jmp	SHORT $LN248@sqcurve_me@2
	npad	2
$LL622@sqcurve_me@2:

; 672  :        }
; 673  :        venergy = h*h;

	mov	eax, DWORD PTR tv7795[ebp]
$LN248@sqcurve_me@2:

; 678  :        f[i] = fudge1*SDIM_dot(vc->force,vc->deriv2[i])
; 679  :                    - fudge2*SDIM_dot(vc->normal,vc->deriv2[i])
; 680  :                    + fudge3*(boundary_curvature_flag ? vc->star_force[i] :
; 681  :                         vc->force[i]);

	cmp	DWORD PTR _boundary_curvature_flag, 0
	je	SHORT $LN273@sqcurve_me@2
	fld	QWORD PTR [eax+64]
	jmp	SHORT $LN1013@sqcurve_me@2
$LN273@sqcurve_me@2:
	fld	QWORD PTR [eax]
$LN1013@sqcurve_me@2:
	push	edx
	fstp	QWORD PTR tv223[ebp]
	push	esi
	push	ebx
	call	_dot
	fmul	QWORD PTR _fudge1$[ebp]
	mov	ecx, DWORD PTR _web+616
	mov	eax, DWORD PTR _vc$[ebp]
	push	ecx
	fstp	QWORD PTR tv20014[ebp]
	add	eax, 416				; 000001a0H
	push	esi
	push	eax
	call	_dot
	fmul	QWORD PTR _fudge2$[ebp]
	mov	edx, DWORD PTR _web+616
	add	DWORD PTR tv7795[ebp], 8
	fsubr	QWORD PTR tv20014[ebp]
	inc	edi
	fld	QWORD PTR tv223[ebp]
	add	esp, 24					; 00000018H
	fmul	QWORD PTR _fudge3$[ebp]
	add	esi, 48					; 00000030H
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _f$[ebp+edi*8-8]
	cmp	edi, edx
	jl	$LL622@sqcurve_me@2

; 682  :     }
; 683  :     else 

	mov	ebx, DWORD PTR _mi$[ebp]
$LN592@sqcurve_me@2:
	fld	QWORD PTR __real@4008000000000000
$LN206@sqcurve_me@2:

; 753  :   }
; 754  : 
; 755  :   if ( h0_flag  && !(mi->gen_method==normal_sq_mean_curvature_mi) )

	cmp	DWORD PTR _h0_flag, 0
	je	$LN202@sqcurve_me@2
	mov	eax, DWORD PTR [ebx+148]
	cmp	eax, DWORD PTR _normal_sq_mean_curvature_mi
	je	$LN202@sqcurve_me@2

; 756  :     {
; 757  :       REAL net,sim;
; 758  :       REAL fd[MAXCOORD],simd[MAXCOORD];
; 759  :       REAL aread[MAXCOORD];
; 760  :       for ( i = 0 ; i < SDIM  ;i++ )

	mov	ebx, DWORD PTR _vc$[ebp]
	xor	esi, esi
	test	edx, edx
	jle	SHORT $LN199@sqcurve_me@2
	lea	edi, DWORD PTR [ebx+128]
$LL822@sqcurve_me@2:

; 761  :         fd[i] = SDIM_dot(vc->normal,vc->deriv2[i])/vc->norm*3;

	push	edx
	fstp	ST(0)
	lea	eax, DWORD PTR [ebx+416]
	push	edi
	push	eax
	call	_dot
	fdiv	QWORD PTR [ebx+464]
	mov	edx, DWORD PTR _web+616
	inc	esi
	add	esp, 12					; 0000000cH
	add	edi, 48					; 00000030H
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _fd$89743[ebp+esi*8-8]
	cmp	esi, edx
	jl	SHORT $LL822@sqcurve_me@2
$LN199@sqcurve_me@2:

; 762  :       for ( i = 0 ; i < SDIM  ;i++ )

	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN625@sqcurve_me@2
	mov	esi, DWORD PTR _boundary_curvature_flag
	lea	ecx, DWORD PTR [ebx+80]
$LN198@sqcurve_me@2:

; 763  :       { aread[i] = vc->force[i]/3;

	fld	QWORD PTR [ecx-64]
	fdiv	ST(0), ST(1)
	fst	QWORD PTR _aread$89745[ebp+eax*8]

; 764  :         if ( boundary_curvature_flag ) ad[i] = vc->star_force[i]/3;

	test	esi, esi
	je	SHORT $LN195@sqcurve_me@2
	fstp	ST(0)
	fld	QWORD PTR [ecx]
	fdiv	ST(0), ST(1)
$LN195@sqcurve_me@2:

; 765  :         else ad[i] = aread[i];

	fstp	QWORD PTR _ad$[ebp+eax*8]
	inc	eax
	add	ecx, 8
	cmp	eax, edx
	jl	SHORT $LN198@sqcurve_me@2
$LN625@sqcurve_me@2:

; 766  :       }
; 767  :       if ( self_similar_flag )

	cmp	DWORD PTR _self_similar_flag, 0
	je	$LN190@sqcurve_me@2

; 768  :       { vc->vol = SDIM_dot(get_coord(v_id),vc->normal);

	mov	ecx, DWORD PTR tv5321[ebp]
	fstp	ST(0)
	push	edx
	mov	edx, DWORD PTR _web+12
	mov	eax, DWORD PTR [ecx+edx]
	mov	ecx, DWORD PTR _dymem
	mov	edx, DWORD PTR _web+104
	add	eax, DWORD PTR [edx+ecx+64]
	lea	esi, DWORD PTR [ebx+416]
	push	esi
	push	eax
	call	_dot
	fst	QWORD PTR [ebx+520]

; 769  :         sim = selfsim_coeff*vc->vol/area;

	fld	QWORD PTR _selfsim_coeff
	add	esp, 12					; 0000000cH
	fmul	ST(1), ST(0)

; 770  :         vc->term -= sim/area;
; 771  :         for ( i = 0 ; i < SDIM  ;i++ )

	xor	ecx, ecx
	fld	QWORD PTR _area$[ebp]
	fdiv	ST(2), ST(0)
	fdivp	ST(2), ST(0)
	fld	QWORD PTR [ebx+536]
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [ebx+536]
	mov	edx, DWORD PTR _web+616
	test	edx, edx
	jle	SHORT $LN825@sqcurve_me@2
	mov	eax, DWORD PTR _grad$[ebp]
	lea	edi, DWORD PTR _simd$89744[ebp]
	sub	edi, eax
$LN192@sqcurve_me@2:

; 772  :         { simd[i] = selfsim_coeff*vc->normal[i];

	fld	QWORD PTR [esi]
	inc	ecx
	fmul	ST(0), ST(1)
	add	esi, 8
	add	eax, 8
	fst	QWORD PTR [edi+eax-8]

; 773  :           grad[i] += 2*vc->term* (- simd[i])*a;

	fld	QWORD PTR [ebx+536]
	fadd	ST(0), ST(0)
	fxch	ST(1)
	fchs
	fmulp	ST(1), ST(0)
	fmul	QWORD PTR _a$[ebp]
	fadd	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	mov	edx, DWORD PTR _web+616
	cmp	ecx, edx
	jl	SHORT $LN192@sqcurve_me@2
$LN825@sqcurve_me@2:

; 770  :         vc->term -= sim/area;
; 771  :         for ( i = 0 ; i < SDIM  ;i++ )

	fstp	ST(0)
	fld	QWORD PTR __real@4008000000000000
$LN190@sqcurve_me@2:

; 774  :         }
; 775  :       }
; 776  :       for ( i = 0  ; i < SDIM ; i++ )

	xor	eax, eax
	test	edx, edx
	jle	$LN630@sqcurve_me@2
	fld	QWORD PTR __real@4000000000000000
	mov	esi, DWORD PTR _grad$[ebp]
	fld	QWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _vc$[ebp]
$LN189@sqcurve_me@2:

; 777  :       { net = 2*vc->term*fd[i]*a + vc->term*vc->term*ad[i];

	fld	QWORD PTR [ecx+536]
	inc	eax
	fld	QWORD PTR [ecx+536]
	fmul	ST(0), ST(3)
	fmul	QWORD PTR _fd$89743[ebp+eax*8-8]
	fmul	ST(0), ST(2)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fld	QWORD PTR _ad$[ebp+eax*8-8]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)

; 778  :         grad[i] += net;

	fadd	QWORD PTR [esi+eax*8-8]
	fstp	QWORD PTR [esi+eax*8-8]
	mov	edx, DWORD PTR _web+616
	cmp	eax, edx
	jl	SHORT $LN189@sqcurve_me@2

; 774  :         }
; 775  :       }
; 776  :       for ( i = 0  ; i < SDIM ; i++ )

	fstp	ST(1)
	fstp	ST(0)

; 779  :       }
; 780  :     }
; 781  :   else

	jmp	$LN630@sqcurve_me@2
$LN694@sqcurve_me@2:

; 684  :        for ( i = 0 ; i < SDIM ; i++ ) f[i] =0.0;

	mov	edx, DWORD PTR _web+616
	fstp	ST(0)

; 685  :   }
; 686  :   else

	fld	QWORD PTR __real@4008000000000000
	mov	ebx, DWORD PTR _mi$[ebp]
	test	edx, edx
	jle	$LN206@sqcurve_me@2

; 684  :        for ( i = 0 ; i < SDIM ; i++ ) f[i] =0.0;

	mov	ecx, edx
	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	xor	eax, eax
	lea	edi, DWORD PTR _f$[ebp]
	rep stosd

; 685  :   }
; 686  :   else

	jmp	$LN206@sqcurve_me@2
$LN254@sqcurve_me@2:

; 687  :   if ( mi->gen_method==mix_sq_mean_curvature_mi )

	cmp	eax, DWORD PTR _mix_sq_mean_curvature_mi
	jne	$LN240@sqcurve_me@2

; 688  :   {
; 689  :     /* normal_sq_mean part */
; 690  :     e = SDIM_dot(vc->force,vc->force);

	lea	ebx, DWORD PTR [edi+16]
	push	ebx
	push	ebx
	call	_dot
	fstp	QWORD PTR _e$[ebp]

; 691  :     denom = SDIM_dot(vc->force,vc->normal);

	mov	edx, DWORD PTR _web+616
	push	edx
	add	edi, 416				; 000001a0H
	push	edi
	push	ebx
	mov	DWORD PTR tv5432[ebp], edi
	call	_dot

; 692  :     h = 0.0;

	fldz
	fld	ST(0)
	add	esp, 24					; 00000018H
	fst	QWORD PTR _h$[ebp]

; 693  :     if ( denom != 0.0 )

	fld	ST(2)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jnp	$LN771@sqcurve_me@2
	fstp	ST(0)

; 694  :     {
; 695  :        h = 3*e/denom;
; 696  :        switch ( h0_flag )

	mov	eax, DWORD PTR _h0_flag
	dec	eax
	fld	QWORD PTR _e$[ebp]
	fld	ST(0)
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(3)
	fst	QWORD PTR _h$[ebp]
	je	SHORT $LN236@sqcurve_me@2
	dec	eax
	jne	SHORT $LN237@sqcurve_me@2

; 698  :          case H0_IN_ATTR:   h -= *VREAL(v_id,h0_attr); break;

	mov	eax, DWORD PTR _h0_attr
	mov	ecx, DWORD PTR _dymem
	imul	eax, 240				; 000000f0H
	add	eax, DWORD PTR _web+104
	mov	edx, DWORD PTR [eax+ecx+64]
	mov	eax, DWORD PTR _web+12
	mov	ecx, DWORD PTR tv5321[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	fsub	QWORD PTR [edx+eax]
	jmp	SHORT $LN1014@sqcurve_me@2
$LN236@sqcurve_me@2:

; 697  :        { case H0_IN_GLOBAL: h -= h0_value; break;

	fsub	QWORD PTR _h0_value
$LN1014@sqcurve_me@2:
	fst	QWORD PTR _h$[ebp]
$LN237@sqcurve_me@2:

; 699  :        }
; 700  : 
; 701  :        fudge1 = 4/denom;

	fld	QWORD PTR __real@4010000000000000

; 702  :        fudge2 = fudge1*e/denom/2;
; 703  : 
; 704  :        fudge3 = h*h/3;
; 705  :        for ( i = 0 ; i < SDIM ; i++ )

	mov	edx, DWORD PTR _web+616
	fdiv	ST(0), ST(4)
	xor	esi, esi
	fst	QWORD PTR _fudge1$[ebp]
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fdivrp	ST(3), ST(0)
	fxch	ST(2)
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _fudge2$[ebp]
	test	edx, edx
	jle	$LN230@sqcurve_me@2
	mov	edi, DWORD PTR _vc$[ebp]
	fstp	ST(1)
	fstp	ST(0)
	sub	edi, -128				; ffffff80H
$LL234@sqcurve_me@2:

; 706  :        f[i] = fudge1*SDIM_dot(vc->force,vc->deriv2[i])
; 707  :                    - fudge2*SDIM_dot(vc->normal,vc->deriv2[i]);

	push	edx
	push	edi
	push	ebx
	call	_dot
	fmul	QWORD PTR _fudge1$[ebp]
	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR tv5432[ebp]
	push	ecx
	fstp	QWORD PTR tv19984[ebp]
	push	edi
	push	edx
	call	_dot
	fmul	QWORD PTR _fudge2$[ebp]
	mov	edx, DWORD PTR _web+616
	inc	esi
	fsubr	QWORD PTR tv19984[ebp]
	add	esp, 24					; 00000018H
	add	edi, 48					; 00000030H
	fstp	QWORD PTR _f$[ebp+esi*8-8]
	cmp	esi, edx
	jl	SHORT $LL234@sqcurve_me@2

; 708  : 
; 709  :     }
; 710  :     else 

	fld	QWORD PTR __real@4008000000000000
	fld	QWORD PTR _h$[ebp]
	jmp	SHORT $LN230@sqcurve_me@2
$LN771@sqcurve_me@2:

; 711  :        for ( i = 0 ; i < SDIM ; i++ ) f[i] =0.0;

	mov	edx, DWORD PTR _web+616
	fstp	ST(1)
	fld	QWORD PTR __real@4008000000000000
	test	edx, edx
	jle	SHORT $LN802@sqcurve_me@2
	mov	ecx, edx
	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	xor	eax, eax
	lea	edi, DWORD PTR _f$[ebp]
	rep stosd
$LN802@sqcurve_me@2:
	fxch	ST(1)
$LN230@sqcurve_me@2:

; 712  : 
; 713  :       /* add other part */
; 714  :     {
; 715  :       REAL net;
; 716  :       REAL fd[MAXCOORD];
; 717  :       REAL aread[MAXCOORD];
; 718  :       for ( i = 0 ; i < SDIM  ;i++ )

	xor	esi, esi
	test	edx, edx
	jle	SHORT $LN623@sqcurve_me@2
	mov	edi, DWORD PTR _vc$[ebp]
	fstp	ST(1)
	mov	ebx, DWORD PTR tv5432[ebp]
	sub	edi, -128				; ffffff80H
$LL804@sqcurve_me@2:

; 719  :         fd[i] = SDIM_dot(vc->normal,vc->deriv2[i])/vc->norm*3;

	push	edx
	fstp	ST(0)
	push	edi
	push	ebx
	call	_dot
	mov	eax, DWORD PTR _vc$[ebp]
	fdiv	QWORD PTR [eax+464]
	mov	edx, DWORD PTR _web+616
	inc	esi
	add	esp, 12					; 0000000cH
	add	edi, 48					; 00000030H
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _fd$89713[ebp+esi*8-8]
	cmp	esi, edx
	jl	SHORT $LL804@sqcurve_me@2

; 712  : 
; 713  :       /* add other part */
; 714  :     {
; 715  :       REAL net;
; 716  :       REAL fd[MAXCOORD];
; 717  :       REAL aread[MAXCOORD];
; 718  :       for ( i = 0 ; i < SDIM  ;i++ )

	fld	QWORD PTR _h$[ebp]
$LN623@sqcurve_me@2:

; 720  :       for ( i = 0 ; i < SDIM  ;i++ )

	mov	esi, DWORD PTR _boundary_curvature_flag
	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN633@sqcurve_me@2
	mov	ecx, DWORD PTR _vc$[ebp]
	add	ecx, 80					; 00000050H
$LN224@sqcurve_me@2:

; 721  :       { aread[i] = vc->force[i]/3;

	fld	QWORD PTR [ecx-64]
	fdiv	ST(0), ST(2)
	fst	QWORD PTR _aread$89714[ebp+eax*8]

; 722  :         if ( boundary_curvature_flag ) ad[i] = vc->star_force[i]/3;

	test	esi, esi
	je	SHORT $LN221@sqcurve_me@2
	fstp	ST(0)
	fld	QWORD PTR [ecx]
	fdiv	ST(0), ST(2)
$LN221@sqcurve_me@2:

; 723  :         else ad[i] = aread[i];

	fstp	QWORD PTR _ad$[ebp+eax*8]
	inc	eax
	add	ecx, 8
	cmp	eax, edx
	jl	SHORT $LN224@sqcurve_me@2
$LN633@sqcurve_me@2:

; 724  :       }
; 725  :       h = (h*sq_mean_mix+(1-sq_mean_mix)*vc->term);  /* make combination */

	fld1
	mov	ecx, DWORD PTR _vc$[ebp]
	fld	QWORD PTR _sq_mean_mix

; 726  :       for ( i = 0  ; i < SDIM ; i++ )

	xor	eax, eax
	fsub	ST(1), ST(0)
	fld	QWORD PTR [ecx+536]
	fmul	ST(0), ST(2)
	fld	ST(1)
	fmulp	ST(4), ST(0)
	faddp	ST(3), ST(0)
	test	edx, edx
	jle	SHORT $LN794@sqcurve_me@2
	mov	ecx, DWORD PTR _grad$[ebp]
	fld	ST(2)
	fadd	ST(0), ST(0)
	fld	ST(3)
	fmul	ST(0), ST(4)
$LN614@sqcurve_me@2:

; 727  :       { net = 2*h*(f[i]*sq_mean_mix+(1-sq_mean_mix)*fd[i])*a + h*h*ad[i];

	fld	QWORD PTR _fd$89713[ebp+eax*8]
	inc	eax
	fmul	ST(0), ST(4)
	fld	QWORD PTR _f$[ebp+eax*8-8]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fmul	QWORD PTR _a$[ebp]
	fld	QWORD PTR _ad$[ebp+eax*8-8]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)

; 728  :         grad[i] += net;

	fadd	QWORD PTR [ecx+eax*8-8]
	fstp	QWORD PTR [ecx+eax*8-8]
	mov	edx, DWORD PTR _web+616
	cmp	eax, edx
	jl	SHORT $LN614@sqcurve_me@2

; 726  :       for ( i = 0  ; i < SDIM ; i++ )

	fstp	ST(2)
	fstp	ST(2)
	fstp	ST(1)
	fstp	ST(0)

; 729  :       }
; 730  :     }
; 731  :     venergy = h*h;

	fmul	ST(0), ST(0)
	fstp	QWORD PTR _venergy$[ebp]
$LN591@sqcurve_me@2:
	mov	ebx, DWORD PTR _mi$[ebp]
	jmp	$LN206@sqcurve_me@2
$LN794@sqcurve_me@2:
	mov	ebx, DWORD PTR _mi$[ebp]
	fstp	ST(0)
	fstp	ST(0)
	fmul	ST(0), ST(0)
	fstp	QWORD PTR _venergy$[ebp]
	jmp	$LN206@sqcurve_me@2
$LN240@sqcurve_me@2:

; 732  :   }
; 733  :   else if ( mi->gen_method == eff_area_sq_mean_curvature_mi )

	cmp	eax, DWORD PTR _eff_area_sq_mean_curvature_mi

; 734  :   { e = SDIM_dot(vc->force,vc->force);

	lea	eax, DWORD PTR [edi+16]
	push	eax
	push	eax
	jne	$LN215@sqcurve_me@2
	mov	DWORD PTR tv5431[ebp], eax
	call	_dot
	fstp	QWORD PTR _e$[ebp]

; 735  :     denom = SDIM_dot(vc->normal,vc->normal);

	mov	edx, DWORD PTR _web+616
	lea	eax, DWORD PTR [edi+416]
	push	edx
	push	eax
	push	eax
	call	_dot
	fst	QWORD PTR _denom$[ebp]

; 737  :     { for ( i = 0 ; i < SDIM ; i++ )

	mov	edx, DWORD PTR _web+616
	fld	ST(0)
	fldz
	add	esp, 24					; 00000018H
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN807@sqcurve_me@2
	xor	esi, esi
	test	edx, edx
	jle	$LN604@sqcurve_me@2
	fld	QWORD PTR _e$[ebp]
	lea	ebx, DWORD PTR [edi+128]
	fmul	QWORD PTR __real@4022000000000000
	mov	edi, DWORD PTR tv5431[ebp]
	fdivrp	ST(1), ST(0)
	fstp	QWORD PTR tv5519[ebp]
	jmp	SHORT $LN213@sqcurve_me@2
	npad	7
$LL813@sqcurve_me@2:
	fstp	ST(0)
$LN213@sqcurve_me@2:

; 738  :         f[i] = 18*SDIM_dot(vc->force,vc->deriv2[i])/denom*a
; 739  :           + 9*e/denom*ad[i];

	push	edx
	push	ebx
	push	edi
	call	_dot
	fmul	QWORD PTR __real@4032000000000000
	fld	QWORD PTR _denom$[ebp]
	mov	edx, DWORD PTR _web+616
	inc	esi
	fdiv	ST(1), ST(0)
	add	esp, 12					; 0000000cH
	add	ebx, 48					; 00000030H
	fxch	ST(1)
	fmul	QWORD PTR _a$[ebp]
	fld	QWORD PTR _ad$[ebp+esi*8-8]
	fmul	QWORD PTR tv5519[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _f$[ebp+esi*8-8]
	cmp	esi, edx
	jl	SHORT $LL813@sqcurve_me@2

; 737  :     { for ( i = 0 ; i < SDIM ; i++ )

	mov	ebx, DWORD PTR _mi$[ebp]
$LN604@sqcurve_me@2:

; 740  :       venergy = 9*e/denom;  /* 9 = 36/4 */

	fld	QWORD PTR _e$[ebp]
	fmul	QWORD PTR __real@4022000000000000
	fdivrp	ST(1), ST(0)
	fstp	QWORD PTR _venergy$[ebp]

; 741  :     }
; 742  :     else

	jmp	$LN592@sqcurve_me@2
$LN807@sqcurve_me@2:

; 736  :     if ( denom != 0.0 )

	fstp	ST(0)

; 743  :        for ( i = 0 ; i < SDIM ; i++ ) f[i] =0.0;

	test	edx, edx
	jle	$LN592@sqcurve_me@2
	mov	ecx, edx
	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	xor	eax, eax
	lea	edi, DWORD PTR _f$[ebp]
	rep stosd

; 744  :   }
; 745  :   else /* squared curvature */

	jmp	$LN592@sqcurve_me@2
$LN215@sqcurve_me@2:

; 746  :   { e = SDIM_dot(vc->force,vc->force)/vc->area*3.0/4;

	call	_dot
	fdiv	QWORD PTR [edi]

; 747  :     for ( i = 0 ; i < SDIM ; i++ )

	mov	edx, DWORD PTR _web+616
	add	esp, 12					; 0000000cH
	xor	esi, esi
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR __real@3fd0000000000000
	fmul	ST(2), ST(0)
	fxch	ST(2)
	fst	QWORD PTR _e$[ebp]
	test	edx, edx
	jle	$LN605@sqcurve_me@2
	mov	ebx, DWORD PTR _vc$[ebp]
	fstp	ST(1)
	fstp	ST(1)
	lea	edi, DWORD PTR [ebx+472]
	fmul	QWORD PTR __real@3ff5555555555555
	sub	ebx, -128				; ffffff80H
	fstp	QWORD PTR tv5530[ebp]
	jmp	SHORT $LN205@sqcurve_me@2
	npad	4
$LL819@sqcurve_me@2:

; 746  :   { e = SDIM_dot(vc->force,vc->force)/vc->area*3.0/4;

	fstp	ST(0)
	fstp	ST(0)
$LN205@sqcurve_me@2:

; 748  :     { f[i] = (2*SDIM_dot(vc->force,vc->deriv2[i])
; 749  :             - 4/3.0*e*vc->force[i])/vc->area*3.0/4;

	mov	eax, DWORD PTR _vc$[ebp]
	push	edx
	add	eax, 16					; 00000010H
	push	ebx
	push	eax
	call	_dot
	fadd	ST(0), ST(0)
	fld	QWORD PTR [edi-456]
	mov	eax, DWORD PTR _vc$[ebp]
	fmul	QWORD PTR tv5530[ebp]
	mov	edx, DWORD PTR _web+616
	inc	esi
	add	esp, 12					; 0000000cH
	fsubp	ST(1), ST(0)
	add	ebx, 48					; 00000030H
	add	edi, 8
	fdiv	QWORD PTR [eax]
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR __real@3fd0000000000000
	fmul	ST(2), ST(0)

; 750  :       f[i] += vc->fpgradf[i]/vc->area*3.0/4;

	fld	QWORD PTR [edi-8]
	fdiv	QWORD PTR [eax]
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(1)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR _f$[ebp+esi*8-8]
	cmp	esi, edx
	jl	SHORT $LL819@sqcurve_me@2

; 747  :     for ( i = 0 ; i < SDIM ; i++ )

	fld	QWORD PTR _e$[ebp]
	mov	ebx, DWORD PTR _mi$[ebp]
	mov	edi, eax
$LN605@sqcurve_me@2:

; 751  :     }
; 752  :     venergy = e*3/vc->area/4;

	fmul	ST(0), ST(1)
	fdiv	QWORD PTR [edi]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _venergy$[ebp]
	jmp	$LN206@sqcurve_me@2
$LN202@sqcurve_me@2:

; 782  :     for ( i = 0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN630@sqcurve_me@2
	mov	eax, DWORD PTR _grad$[ebp]
	lea	esi, DWORD PTR _f$[ebp]
	sub	esi, eax
$LN185@sqcurve_me@2:

; 783  :        grad[i] += f[i];

	fld	QWORD PTR [esi+eax]
	inc	ecx
	fadd	QWORD PTR [eax]
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	mov	edx, DWORD PTR _web+616
	cmp	ecx, edx
	jl	SHORT $LN185@sqcurve_me@2
$LN630@sqcurve_me@2:

; 784  :     
; 785  : 
; 786  :   ee_id = get_vertex_edge(v_id);

	mov	eax, DWORD PTR tv5321[ebp]
	mov	ecx, DWORD PTR _web+12
	mov	eax, DWORD PTR [eax+ecx]
	mov	ebx, DWORD PTR [eax+28]
	mov	DWORD PTR _ee_id$[ebp], ebx

; 787  :   eee_id = ee_id;

	mov	DWORD PTR _eee_id$[ebp], ebx

; 788  :   if ( valid_id(eee_id) ) do

	test	ebx, 268435456				; 10000000H
	je	$LN179@sqcurve_me@2
	mov	esi, DWORD PTR _web+124
	fldz
$LN632@sqcurve_me@2:
	mov	edi, DWORD PTR _web+216

; 789  :   {
; 790  :     vertex_id headv;
; 791  :     vertex_id tailv;
; 792  :     struct e_curve_t *ec;
; 793  :     struct v_curve_t *vc1;
; 794  :     struct v_curve_t *vc2;
; 795  :     REAL s[MAXCOORD],cross1[MAXCOORD],cross2[MAXCOORD];
; 796  :     REAL denom1=0.0,denom2=0.0;

	fst	QWORD PTR _denom1$89783[ebp]

; 797  :     REAL s0[MAXCOORD];
; 798  :     REAL wa[MAXCOORD],wb[MAXCOORD],w[MAXCOORD],aw[MAXCOORD],vw[MAXCOORD];
; 799  :     facetedge_id fe;
; 800  :     facet_id f_id;
; 801  :   
; 802  :     if ( inverted(eee_id) ) e_id = inverse_id(eee_id);

	mov	eax, ebx
	fst	QWORD PTR _denom2$89784[ebp]
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR tv5616[ebp], eax
	mov	eax, ebx
	je	SHORT $LN178@sqcurve_me@2
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR _e_id$[ebp], eax
	jmp	SHORT $LN177@sqcurve_me@2
$LN178@sqcurve_me@2:

; 803  :     else e_id = eee_id;

	mov	DWORD PTR _e_id$[ebp], ebx
$LN177@sqcurve_me@2:

; 804  :     headv = get_edge_headv(e_id);

	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR tv5620[ebp], ecx
	je	SHORT $LN282@sqcurve_me@2
	and	eax, 134217727				; 07ffffffH
	lea	ecx, DWORD PTR [eax*4]
	mov	DWORD PTR tv5623[ebp], ecx
	mov	ecx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [edi+ecx+304]
	mov	edi, DWORD PTR tv5623[ebp]
	mov	edi, DWORD PTR [edi+esi]
	add	ecx, edi
	mov	edi, DWORD PTR [ecx]
	jmp	SHORT $LN1016@sqcurve_me@2
$LN282@sqcurve_me@2:
	and	eax, 134217727				; 07ffffffH
	lea	ecx, DWORD PTR [eax*4]
	mov	DWORD PTR tv5623[ebp], ecx
	mov	ecx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [edi+ecx+304]
	mov	edi, DWORD PTR tv5623[ebp]
	mov	edi, DWORD PTR [edi+esi]
	add	ecx, edi
	mov	edi, DWORD PTR _web+636
	mov	edi, DWORD PTR [ecx+edi*4]
$LN1016@sqcurve_me@2:

; 805  :     tailv = get_edge_tailv(e_id);

	cmp	DWORD PTR tv5620[ebp], 0
	mov	DWORD PTR _headv$89775[ebp], edi
	je	SHORT $LN286@sqcurve_me@2
	mov	edi, DWORD PTR _web+636
	mov	ecx, DWORD PTR [ecx+edi*4]
	jmp	SHORT $LN1017@sqcurve_me@2
$LN286@sqcurve_me@2:
	mov	ecx, DWORD PTR [ecx]
$LN1017@sqcurve_me@2:

; 806  :     ec = e_curve + loc_ordinal(e_id);

	mov	edi, 268435456				; 10000000H
	mov	DWORD PTR _tailv$89776[ebp], ecx
	test	DWORD PTR _e_id$[ebp], edi
	jne	SHORT $LN276@sqcurve_me@2
	or	eax, -1
$LN276@sqcurve_me@2:
	lea	eax, DWORD PTR [eax+eax*8]
	shl	eax, 6
	add	eax, DWORD PTR _e_curve
	mov	DWORD PTR _ec$89777[ebp], eax

; 807  :     vc1 = v_curve + loc_ordinal(tailv);

	test	ecx, edi
	je	SHORT $LN277@sqcurve_me@2
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN278@sqcurve_me@2
$LN277@sqcurve_me@2:
	or	eax, -1
$LN278@sqcurve_me@2:
	imul	eax, 544				; 00000220H
	add	eax, DWORD PTR _v_curve
	mov	DWORD PTR _vc1$89778[ebp], eax

; 808  :     vc2 = v_curve + loc_ordinal(headv);

	test	DWORD PTR _headv$89775[ebp], edi
	je	SHORT $LN279@sqcurve_me@2
	mov	edi, DWORD PTR _headv$89775[ebp]
	and	edi, 134217727				; 07ffffffH
	jmp	SHORT $LN280@sqcurve_me@2
$LN279@sqcurve_me@2:
	or	edi, -1
$LN280@sqcurve_me@2:

; 809  :     
; 810  :     if ( (vc1->area == 0.0) || (vc2->area == 0.0) ) continue;

	mov	eax, DWORD PTR _vc1$89778[ebp]
	imul	edi, 544				; 00000220H
	fld	QWORD PTR [eax]
	fld	ST(1)
	fucompp
	fnstsw	ax
	add	edi, DWORD PTR _v_curve
	test	ah, 68					; 00000044H
	jnp	$LN180@sqcurve_me@2
	fld	QWORD PTR [edi]
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN180@sqcurve_me@2

; 811  :     if ( mi->gen_method == normal_sq_mean_curvature_mi )

	mov	ecx, DWORD PTR _mi$[ebp]
	fstp	ST(1)
	mov	eax, DWORD PTR [ecx+148]
	fstp	ST(0)
	cmp	eax, DWORD PTR _normal_sq_mean_curvature_mi
	jne	$LN174@sqcurve_me@2

; 812  :      { facetedge_id fe_a;
; 813  :         facetedge_id fe_b;
; 814  :         REAL sa[MAXCOORD],sb[MAXCOORD];
; 815  :   
; 816  :         fe = get_edge_fe(e_id);

	mov	edx, DWORD PTR tv5623[ebp]
	mov	eax, DWORD PTR [edx+esi]
	test	eax, eax
	je	SHORT $LN626@sqcurve_me@2
$LN290@sqcurve_me@2:
	cmp	DWORD PTR tv5620[ebp], 0
	mov	eax, DWORD PTR [eax+28]
	je	SHORT $LN626@sqcurve_me@2
	xor	eax, 134217728				; 08000000H
$LN626@sqcurve_me@2:

; 817  :         fe_a = get_prev_edge(fe);

	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	and	eax, 134217727				; 07ffffffH
	and	ecx, 1
	mov	eax, DWORD PTR [edx+eax*4]
	je	SHORT $LN294@sqcurve_me@2
	mov	ebx, DWORD PTR [eax+32]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN1018@sqcurve_me@2
$LN294@sqcurve_me@2:
	mov	ebx, DWORD PTR [eax+28]
$LN1018@sqcurve_me@2:
	mov	DWORD PTR _fe_a$89805[ebp], ebx

; 818  :         fe_b = get_prev_edge(get_next_facet(fe));

	test	ecx, ecx
	je	SHORT $LN298@sqcurve_me@2
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN297@sqcurve_me@2
$LN298@sqcurve_me@2:
	mov	eax, DWORD PTR [eax+40]
$LN297@sqcurve_me@2:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN302@sqcurve_me@2
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+32]
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR _fe_b$89806[ebp], eax
	jmp	SHORT $LN301@sqcurve_me@2
$LN302@sqcurve_me@2:
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _fe_b$89806[ebp], edx
$LN301@sqcurve_me@2:

; 819  :         get_edge_side(e_id,s0);

	mov	ecx, DWORD PTR _e_id$[ebp]
	lea	eax, DWORD PTR _s0$89785[ebp]
	push	eax
	push	ecx
	call	_get_edge_side

; 820  :   
; 821  :         get_edge_side(get_fe_edge(fe_a),sa);

	mov	eax, DWORD PTR _web+460
	mov	esi, ebx
	and	esi, 134217727				; 07ffffffH
	lea	edx, DWORD PTR _sa$89807[ebp]
	push	edx
	add	esi, esi
	add	esi, esi
	mov	ecx, DWORD PTR [esi+eax]
	mov	edx, ebx
	and	edx, 134217728				; 08000000H
	xor	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR tv5706[ebp], esi
	push	edx
	call	_get_edge_side

; 822  :         cross_prod(vc1->force,sa,cross1);

	mov	eax, DWORD PTR _vc1$89778[ebp]
	lea	ecx, DWORD PTR _cross1$89781[ebp]
	push	ecx
	lea	edx, DWORD PTR _sa$89807[ebp]
	add	eax, 16					; 00000010H
	push	edx
	push	eax
	call	_cross_prod
	add	esp, 28					; 0000001cH

; 823  :         if ( (assume_oriented_flag && inverted(get_fe_facet(fe_a)))
; 824  :            || (!assume_oriented_flag && triple_prod(vc1->normal,sa,s0) < 0.0 ) )

	cmp	DWORD PTR _assume_oriented_flag, 0
	je	$LN588@sqcurve_me@2
	test	ebx, 268435456				; 10000000H
	jne	SHORT $LN308@sqcurve_me@2
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN307@sqcurve_me@2
$LN308@sqcurve_me@2:
	mov	eax, DWORD PTR _web+460
	mov	ecx, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [ecx+24]
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN307@sqcurve_me@2
	xor	eax, 134217728				; 08000000H
$LN307@sqcurve_me@2:
	test	eax, 134217728				; 08000000H
	jne	$LN172@sqcurve_me@2
$LN594@sqcurve_me@2:
	mov	ecx, DWORD PTR _web+616
$LN521@sqcurve_me@2:

; 826  :         if ( fe_b != fe_a ) /* check for single edge on constraint */

	cmp	DWORD PTR _fe_b$89806[ebp], ebx
	je	$LN637@sqcurve_me@2

; 827  :         { get_edge_side(get_fe_edge(fe_b),sb);

	mov	ebx, DWORD PTR _fe_b$89806[ebp]
	mov	eax, DWORD PTR _web+460
	mov	esi, ebx
	and	esi, 134217727				; 07ffffffH
	lea	edx, DWORD PTR _sb$89808[ebp]
	push	edx
	add	esi, esi
	add	esi, esi
	mov	ecx, DWORD PTR [esi+eax]
	mov	edx, ebx
	and	edx, 134217728				; 08000000H
	xor	edx, DWORD PTR [ecx+20]
	push	edx
	call	_get_edge_side

; 828  :           cross_prod(vc1->force,sb,s);

	lea	eax, DWORD PTR _s$89780[ebp]
	push	eax
	mov	eax, DWORD PTR _vc1$89778[ebp]
	lea	ecx, DWORD PTR _sb$89808[ebp]
	push	ecx
	add	eax, 16					; 00000010H
	push	eax
	call	_cross_prod
	add	esp, 20					; 00000014H

; 829  :           if ( (assume_oriented_flag && inverted(get_fe_facet(fe_b)))
; 830  :            || (!assume_oriented_flag && triple_prod(vc1->normal,sb,s0) < 0.0 ) )

	cmp	DWORD PTR _assume_oriented_flag, 0
	je	$LN587@sqcurve_me@2
	test	ebx, 268435456				; 10000000H
	jne	$LN314@sqcurve_me@2
	mov	eax, DWORD PTR _NULLFACET
	jmp	$LN313@sqcurve_me@2
$LN588@sqcurve_me@2:

; 823  :         if ( (assume_oriented_flag && inverted(get_fe_facet(fe_a)))
; 824  :            || (!assume_oriented_flag && triple_prod(vc1->normal,sa,s0) < 0.0 ) )

	mov	ecx, DWORD PTR _vc1$89778[ebp]
	lea	edx, DWORD PTR _s0$89785[ebp]
	push	edx
	lea	eax, DWORD PTR _sa$89807[ebp]
	push	eax
	add	ecx, 416				; 000001a0H
	push	ecx
	call	_triple_prod
	fcomp	QWORD PTR __real@0000000000000000
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 5
	jp	$LN594@sqcurve_me@2
$LN172@sqcurve_me@2:

; 825  :           for ( i = 0 ; i < SDIM ; i++ ) cross1[i] = -cross1[i];

	mov	ecx, DWORD PTR _web+616
	xor	eax, eax
	cmp	ecx, 4
	jl	SHORT $LC522@sqcurve_me@2
	lea	edx, DWORD PTR [ecx-3]
$LL523@sqcurve_me@2:
	fld	QWORD PTR _cross1$89781[ebp+eax*8]
	add	eax, 4
	fchs
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-32]
	fld	QWORD PTR _cross1$89781[ebp+eax*8-24]
	fchs
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-24]
	fld	QWORD PTR _cross1$89781[ebp+eax*8-16]
	fchs
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-16]
	fld	QWORD PTR _cross1$89781[ebp+eax*8-8]
	fchs
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LL523@sqcurve_me@2
$LC522@sqcurve_me@2:
	cmp	eax, ecx
	jge	$LN521@sqcurve_me@2
$LC170@sqcurve_me@2:
	fld	QWORD PTR _cross1$89781[ebp+eax*8]
	inc	eax
	fchs
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LC170@sqcurve_me@2

; 823  :         if ( (assume_oriented_flag && inverted(get_fe_facet(fe_a)))
; 824  :            || (!assume_oriented_flag && triple_prod(vc1->normal,sa,s0) < 0.0 ) )

	jmp	$LN521@sqcurve_me@2

; 829  :           if ( (assume_oriented_flag && inverted(get_fe_facet(fe_b)))
; 830  :            || (!assume_oriented_flag && triple_prod(vc1->normal,sb,s0) < 0.0 ) )

$LN314@sqcurve_me@2:
	mov	edx, DWORD PTR _web+460
	mov	eax, DWORD PTR [esi+edx]
	mov	eax, DWORD PTR [eax+24]
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN313@sqcurve_me@2
	xor	eax, 134217728				; 08000000H
$LN313@sqcurve_me@2:
	test	eax, 134217728				; 08000000H
	jne	$LN165@sqcurve_me@2
$LN166@sqcurve_me@2:

; 832  :           else  for ( i = 0 ; i < SDIM ; i++ ) cross1[i] += s[i];

	mov	ecx, DWORD PTR _web+616
	xor	eax, eax
	cmp	ecx, 4
	jl	SHORT $LC528@sqcurve_me@2
	lea	edx, DWORD PTR [ecx-3]
	npad	1
$LL529@sqcurve_me@2:
	fld	QWORD PTR _s$89780[ebp+eax*8]
	add	eax, 4
	fadd	QWORD PTR _cross1$89781[ebp+eax*8-32]
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-32]
	fld	QWORD PTR _s$89780[ebp+eax*8-24]
	fadd	QWORD PTR _cross1$89781[ebp+eax*8-24]
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-24]
	fld	QWORD PTR _s$89780[ebp+eax*8-16]
	fadd	QWORD PTR _cross1$89781[ebp+eax*8-16]
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-16]
	fld	QWORD PTR _s$89780[ebp+eax*8-8]
	fadd	QWORD PTR _cross1$89781[ebp+eax*8-8]
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LL529@sqcurve_me@2
$LC528@sqcurve_me@2:
	cmp	eax, ecx
	jge	SHORT $LN637@sqcurve_me@2
	npad	9
$LC159@sqcurve_me@2:
	fld	QWORD PTR _s$89780[ebp+eax*8]
	inc	eax
	fadd	QWORD PTR _cross1$89781[ebp+eax*8-8]
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LC159@sqcurve_me@2
$LN637@sqcurve_me@2:

; 833  :         }
; 834  :   
; 835  :         e1 = SDIM_dot(vc1->force,vc1->force);

	mov	ebx, DWORD PTR _vc1$89778[ebp]
	push	ecx
	lea	esi, DWORD PTR [ebx+16]
	push	esi
	push	esi
	call	_dot
	fstp	QWORD PTR _e1$[ebp]

; 836  :         denom1 = SDIM_dot(vc1->force,vc1->normal);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR [ebx+416]
	push	edx
	push	esi
	call	_dot
	fst	QWORD PTR _denom1$89783[ebp]

; 837  :         if ( denom1 != 0.0 )

	fld	ST(0)
	add	esp, 24					; 00000018H
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jnp	$LN831@sqcurve_me@2

; 838  :         { h = 3*e1/denom1;
; 839  :           switch ( h0_flag )

	mov	eax, DWORD PTR _h0_flag
	fstp	ST(0)
	dec	eax
	fld	QWORD PTR _e1$[ebp]
	fld	ST(0)
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(3)
	je	$LN153@sqcurve_me@2
	dec	eax
	jne	$LN154@sqcurve_me@2

; 841  :             case H0_IN_ATTR:   h -= *VREAL(headv,h0_attr); break;

	mov	ecx, DWORD PTR _h0_attr
	mov	eax, DWORD PTR _headv$89775[ebp]
	imul	ecx, 240				; 000000f0H
	mov	edx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	add	ecx, DWORD PTR _web+104
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edx+64]
	fsub	QWORD PTR [eax+ecx]
	jmp	$LN154@sqcurve_me@2
$LN587@sqcurve_me@2:

; 829  :           if ( (assume_oriented_flag && inverted(get_fe_facet(fe_b)))
; 830  :            || (!assume_oriented_flag && triple_prod(vc1->normal,sb,s0) < 0.0 ) )

	mov	eax, DWORD PTR _vc1$89778[ebp]
	lea	ecx, DWORD PTR _s0$89785[ebp]
	push	ecx
	lea	edx, DWORD PTR _sb$89808[ebp]
	push	edx
	add	eax, 416				; 000001a0H
	push	eax
	call	_triple_prod
	fcomp	QWORD PTR __real@0000000000000000
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 5
	jp	$LN166@sqcurve_me@2
$LN165@sqcurve_me@2:

; 831  :              for ( i = 0 ; i < SDIM ; i++ ) cross1[i] -= s[i];

	mov	ecx, DWORD PTR _web+616
	xor	eax, eax
	cmp	ecx, 4
	jl	SHORT $LC525@sqcurve_me@2
	lea	edx, DWORD PTR [ecx-3]
$LL526@sqcurve_me@2:
	fld	QWORD PTR _cross1$89781[ebp+eax*8]
	add	eax, 4
	fsub	QWORD PTR _s$89780[ebp+eax*8-32]
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-32]
	fld	QWORD PTR _cross1$89781[ebp+eax*8-24]
	fsub	QWORD PTR _s$89780[ebp+eax*8-24]
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-24]
	fld	QWORD PTR _cross1$89781[ebp+eax*8-16]
	fsub	QWORD PTR _s$89780[ebp+eax*8-16]
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-16]
	fld	QWORD PTR _cross1$89781[ebp+eax*8-8]
	fsub	QWORD PTR _s$89780[ebp+eax*8-8]
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LL526@sqcurve_me@2
$LC525@sqcurve_me@2:
	cmp	eax, ecx
	jge	$LN637@sqcurve_me@2
	npad	4
$LC163@sqcurve_me@2:
	fld	QWORD PTR _cross1$89781[ebp+eax*8]
	inc	eax
	fsub	QWORD PTR _s$89780[ebp+eax*8-8]
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LC163@sqcurve_me@2

; 832  :           else  for ( i = 0 ; i < SDIM ; i++ ) cross1[i] += s[i];

	jmp	$LN637@sqcurve_me@2
$LN153@sqcurve_me@2:

; 840  :           { case H0_IN_GLOBAL: h -= h0_value; break;

	fsub	QWORD PTR _h0_value
$LN154@sqcurve_me@2:

; 842  :           }
; 843  :           fudge11 = 4*h/denom1*vc1->area;

	fld	QWORD PTR __real@4010000000000000
	fmul	ST(0), ST(1)
	fdiv	ST(0), ST(4)
	fmul	QWORD PTR [ebx]
	fst	QWORD PTR _fudge11$[ebp]

; 844  :           fudge12 = fudge11*e1/denom1/2;

	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fdivrp	ST(3), ST(0)
	fxch	ST(2)
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _fudge12$[ebp]

; 845  :           fudge13 = h*h/3;

	fmul	ST(0), ST(0)
	fdivrp	ST(1), ST(0)
	fstp	QWORD PTR _fudge13$[ebp]
	jmp	SHORT $LN151@sqcurve_me@2
$LN831@sqcurve_me@2:

; 837  :         if ( denom1 != 0.0 )

	fstp	ST(1)

; 846  :         }
; 847  :         else  fudge11 = fudge12 = fudge13 = 0.0; 

	fst	QWORD PTR _fudge13$[ebp]
	fst	QWORD PTR _fudge12$[ebp]
	fstp	QWORD PTR _fudge11$[ebp]
$LN151@sqcurve_me@2:

; 848  :   
; 849  :         e2 = SDIM_dot(vc2->force,vc2->force);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	esi, DWORD PTR [edi+16]
	push	esi
	push	esi
	call	_dot
	fstp	QWORD PTR _e2$[ebp]

; 850  :         denom2 = SDIM_dot(vc2->force,vc2->normal);

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ebx, DWORD PTR [edi+416]
	push	ebx
	push	esi
	call	_dot
	fst	QWORD PTR _denom2$89784[ebp]

; 851  :         if ( denom2 != 0.0 )

	fld	ST(0)
	add	esp, 24					; 00000018H
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jnp	$LN840@sqcurve_me@2

; 852  :         { h = 3*e2/denom2;
; 853  :           switch ( h0_flag )

	mov	eax, DWORD PTR _h0_flag
	fstp	ST(0)
	dec	eax
	fld	QWORD PTR _e2$[ebp]
	fld	ST(0)
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(3)
	je	SHORT $LN147@sqcurve_me@2
	dec	eax
	jne	SHORT $LN148@sqcurve_me@2

; 855  :             case H0_IN_ATTR:   h -= *VREAL(tailv,h0_attr); break;

	mov	edx, DWORD PTR _h0_attr
	mov	ecx, DWORD PTR _tailv$89776[ebp]
	imul	edx, 240				; 000000f0H
	mov	eax, DWORD PTR _web+12
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	add	edx, DWORD PTR _web+104
	mov	eax, DWORD PTR _dymem
	mov	edx, DWORD PTR [edx+eax+64]
	fsub	QWORD PTR [ecx+edx]
	jmp	SHORT $LN148@sqcurve_me@2
$LN147@sqcurve_me@2:

; 854  :           { case H0_IN_GLOBAL: h -= h0_value; break;

	fsub	QWORD PTR _h0_value
$LN148@sqcurve_me@2:

; 856  :           }
; 857  :           fudge21 = 4*h/denom2*vc2->area;

	fld	QWORD PTR __real@4010000000000000
	fmul	ST(0), ST(1)
	fdiv	ST(0), ST(4)
	fmul	QWORD PTR [edi]
	fst	QWORD PTR _fudge21$[ebp]

; 858  :           fudge22 = fudge21*e2/denom2/2;

	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fdivrp	ST(3), ST(0)
	fxch	ST(2)
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _fudge22$[ebp]

; 859  :           fudge23 = h*h/3;

	fmul	ST(0), ST(0)
	fdivrp	ST(1), ST(0)
	fstp	QWORD PTR _fudge23$[ebp]
	jmp	SHORT $LN145@sqcurve_me@2
$LN840@sqcurve_me@2:

; 851  :         if ( denom2 != 0.0 )

	fstp	ST(1)

; 860  :         }
; 861  :         else  fudge21 = fudge22 = fudge23 = 0.0; 

	fst	QWORD PTR _fudge23$[ebp]
	fst	QWORD PTR _fudge22$[ebp]
	fstp	QWORD PTR _fudge21$[ebp]
$LN145@sqcurve_me@2:

; 862  :   
; 863  :         cross_prod(vc2->force,sa,cross2);

	lea	eax, DWORD PTR _cross2$89782[ebp]
	push	eax
	lea	ecx, DWORD PTR _sa$89807[ebp]
	push	ecx
	push	esi
	call	_cross_prod
	add	esp, 12					; 0000000cH

; 864  :         if ( (assume_oriented_flag && !inverted(get_fe_facet(fe_a)))
; 865  :            || (!assume_oriented_flag && triple_prod(vc2->normal,sa,s0) > 0.0 ) )

	cmp	DWORD PTR _assume_oriented_flag, 0
	je	$LN586@sqcurve_me@2
	mov	ecx, DWORD PTR _fe_a$89805[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN318@sqcurve_me@2
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN317@sqcurve_me@2
$LN318@sqcurve_me@2:
	mov	eax, DWORD PTR tv5706[ebp]
	mov	edx, DWORD PTR _web+460
	mov	edx, DWORD PTR [eax+edx]
	mov	eax, DWORD PTR [edx+24]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN317@sqcurve_me@2
	xor	eax, 134217728				; 08000000H
$LN317@sqcurve_me@2:
	test	eax, 134217728				; 08000000H
	je	$LN606@sqcurve_me@2
$LN595@sqcurve_me@2:
	mov	edx, DWORD PTR _web+616
$LN530@sqcurve_me@2:

; 867  :         if ( fe_b != fe_a ) /* check for single edge on constraint */

	mov	esi, DWORD PTR _fe_b$89806[ebp]
	cmp	esi, DWORD PTR _fe_a$89805[ebp]
	je	$LN610@sqcurve_me@2

; 868  :         { cross_prod(vc2->force,sb,s);

	lea	edx, DWORD PTR _s$89780[ebp]
	push	edx
	lea	eax, DWORD PTR _sb$89808[ebp]
	push	eax
	lea	eax, DWORD PTR [edi+16]
	push	eax
	call	_cross_prod
	add	esp, 12					; 0000000cH

; 869  :           if ( (assume_oriented_flag && !inverted(get_fe_facet(fe_b)))
; 870  :            || (!assume_oriented_flag && triple_prod(vc2->normal,sb,s0) > 0.0 ) )

	cmp	DWORD PTR _assume_oriented_flag, 0
	je	$LN585@sqcurve_me@2
	test	esi, 268435456				; 10000000H
	jne	$LN322@sqcurve_me@2
	mov	eax, DWORD PTR _NULLFACET
	jmp	$LN321@sqcurve_me@2
$LN586@sqcurve_me@2:

; 864  :         if ( (assume_oriented_flag && !inverted(get_fe_facet(fe_a)))
; 865  :            || (!assume_oriented_flag && triple_prod(vc2->normal,sa,s0) > 0.0 ) )

	lea	eax, DWORD PTR _s0$89785[ebp]
	push	eax
	lea	ecx, DWORD PTR _sa$89807[ebp]
	push	ecx
	push	ebx
	call	_triple_prod
	fcomp	QWORD PTR __real@0000000000000000
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN595@sqcurve_me@2
$LN606@sqcurve_me@2:

; 866  :           for ( i = 0 ; i < SDIM ; i++ ) cross2[i] = -cross2[i];

	mov	edx, DWORD PTR _web+616
	xor	eax, eax
	cmp	edx, 4
	jl	SHORT $LC531@sqcurve_me@2
	lea	ecx, DWORD PTR [edx-3]
$LL532@sqcurve_me@2:
	fld	QWORD PTR _cross2$89782[ebp+eax*8]
	add	eax, 4
	fchs
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-32]
	fld	QWORD PTR _cross2$89782[ebp+eax*8-24]
	fchs
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-24]
	fld	QWORD PTR _cross2$89782[ebp+eax*8-16]
	fchs
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-16]
	fld	QWORD PTR _cross2$89782[ebp+eax*8-8]
	fchs
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LL532@sqcurve_me@2
$LC531@sqcurve_me@2:
	cmp	eax, edx
	jge	$LN530@sqcurve_me@2
$LC141@sqcurve_me@2:
	fld	QWORD PTR _cross2$89782[ebp+eax*8]
	inc	eax
	fchs
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LC141@sqcurve_me@2

; 864  :         if ( (assume_oriented_flag && !inverted(get_fe_facet(fe_a)))
; 865  :            || (!assume_oriented_flag && triple_prod(vc2->normal,sa,s0) > 0.0 ) )

	jmp	$LN530@sqcurve_me@2

; 869  :           if ( (assume_oriented_flag && !inverted(get_fe_facet(fe_b)))
; 870  :            || (!assume_oriented_flag && triple_prod(vc2->normal,sb,s0) > 0.0 ) )

$LN322@sqcurve_me@2:
	mov	edx, DWORD PTR _web+460
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR [eax+24]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN321@sqcurve_me@2
	xor	eax, 134217728				; 08000000H
$LN321@sqcurve_me@2:
	test	eax, 134217728				; 08000000H
	je	$LN607@sqcurve_me@2
$LN596@sqcurve_me@2:

; 872  :           else  for ( i = 0 ; i < SDIM ; i++ ) cross2[i] += s[i];

	mov	edx, DWORD PTR _web+616
	xor	eax, eax
	cmp	edx, 4
	jl	SHORT $LC537@sqcurve_me@2
	lea	ecx, DWORD PTR [edx-3]
$LL538@sqcurve_me@2:
	fld	QWORD PTR _s$89780[ebp+eax*8]
	add	eax, 4
	fadd	QWORD PTR _cross2$89782[ebp+eax*8-32]
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-32]
	fld	QWORD PTR _s$89780[ebp+eax*8-24]
	fadd	QWORD PTR _cross2$89782[ebp+eax*8-24]
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-24]
	fld	QWORD PTR _s$89780[ebp+eax*8-16]
	fadd	QWORD PTR _cross2$89782[ebp+eax*8-16]
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-16]
	fld	QWORD PTR _s$89780[ebp+eax*8-8]
	fadd	QWORD PTR _cross2$89782[ebp+eax*8-8]
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LL538@sqcurve_me@2
$LC537@sqcurve_me@2:
	cmp	eax, edx
	jge	$LN610@sqcurve_me@2
$LC130@sqcurve_me@2:
	fld	QWORD PTR _s$89780[ebp+eax*8]
	inc	eax
	fadd	QWORD PTR _cross2$89782[ebp+eax*8-8]
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LC130@sqcurve_me@2

; 873  :         }

	fld	QWORD PTR __real@3fd0000000000000
	fld	QWORD PTR __real@4008000000000000
	fld	QWORD PTR _e2$[ebp]
	jmp	$LN91@sqcurve_me@2
$LN585@sqcurve_me@2:

; 869  :           if ( (assume_oriented_flag && !inverted(get_fe_facet(fe_b)))
; 870  :            || (!assume_oriented_flag && triple_prod(vc2->normal,sb,s0) > 0.0 ) )

	lea	ecx, DWORD PTR _s0$89785[ebp]
	push	ecx
	lea	edx, DWORD PTR _sb$89808[ebp]
	push	edx
	push	ebx
	call	_triple_prod
	fcomp	QWORD PTR __real@0000000000000000
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN596@sqcurve_me@2
$LN607@sqcurve_me@2:

; 871  :               for ( i = 0 ; i < SDIM ; i++ ) cross2[i] -= s[i];

	mov	edx, DWORD PTR _web+616
	xor	eax, eax
	cmp	edx, 4
	jl	SHORT $LC534@sqcurve_me@2
	lea	ecx, DWORD PTR [edx-3]
	npad	11
$LL535@sqcurve_me@2:
	fld	QWORD PTR _cross2$89782[ebp+eax*8]
	add	eax, 4
	fsub	QWORD PTR _s$89780[ebp+eax*8-32]
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-32]
	fld	QWORD PTR _cross2$89782[ebp+eax*8-24]
	fsub	QWORD PTR _s$89780[ebp+eax*8-24]
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-24]
	fld	QWORD PTR _cross2$89782[ebp+eax*8-16]
	fsub	QWORD PTR _s$89780[ebp+eax*8-16]
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-16]
	fld	QWORD PTR _cross2$89782[ebp+eax*8-8]
	fsub	QWORD PTR _s$89780[ebp+eax*8-8]
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LL535@sqcurve_me@2
$LC534@sqcurve_me@2:
	cmp	eax, edx
	jge	$LN610@sqcurve_me@2
	npad	2
$LC134@sqcurve_me@2:
	fld	QWORD PTR _cross2$89782[ebp+eax*8]
	inc	eax
	fsub	QWORD PTR _s$89780[ebp+eax*8-8]
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LC134@sqcurve_me@2

; 872  :           else  for ( i = 0 ; i < SDIM ; i++ ) cross2[i] += s[i];

	fld	QWORD PTR __real@3fd0000000000000
	fld	QWORD PTR __real@4008000000000000
	fld	QWORD PTR _e2$[ebp]
	jmp	$LN91@sqcurve_me@2
$LN174@sqcurve_me@2:

; 874  :      }
; 875  :     else if ( mi->gen_method == eff_area_sq_mean_curvature_mi )

	cmp	eax, DWORD PTR _eff_area_sq_mean_curvature_mi
	jne	$LN126@sqcurve_me@2

; 876  :      { 
; 877  :         facetedge_id fe_a;
; 878  :         facetedge_id fe_b;
; 879  :         REAL sa[MAXCOORD],sb[MAXCOORD];
; 880  :   
; 881  :         fe = get_edge_fe(e_id);

	mov	eax, DWORD PTR tv5623[ebp]
	mov	eax, DWORD PTR [eax+esi]
	test	eax, eax
	je	SHORT $LN627@sqcurve_me@2
$LN326@sqcurve_me@2:
	cmp	DWORD PTR tv5620[ebp], 0
	mov	eax, DWORD PTR [eax+28]
	je	SHORT $LN627@sqcurve_me@2
	xor	eax, 134217728				; 08000000H
$LN627@sqcurve_me@2:

; 882  :         fe_a = get_prev_edge(fe);

	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	and	eax, 134217727				; 07ffffffH
	and	ecx, 1
	mov	eax, DWORD PTR [edx+eax*4]
	je	SHORT $LN330@sqcurve_me@2
	mov	esi, DWORD PTR [eax+32]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN1019@sqcurve_me@2
$LN330@sqcurve_me@2:
	mov	esi, DWORD PTR [eax+28]
$LN1019@sqcurve_me@2:
	mov	DWORD PTR _fe_a$89873[ebp], esi

; 883  :         fe_b = get_prev_edge(get_next_facet(fe));

	test	ecx, ecx
	je	SHORT $LN334@sqcurve_me@2
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN333@sqcurve_me@2
$LN334@sqcurve_me@2:
	mov	eax, DWORD PTR [eax+40]
$LN333@sqcurve_me@2:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN338@sqcurve_me@2
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [ecx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN1020@sqcurve_me@2
$LN338@sqcurve_me@2:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [edx+28]
$LN1020@sqcurve_me@2:

; 884  :         get_edge_side(e_id,s0);

	mov	edx, DWORD PTR _e_id$[ebp]
	lea	ecx, DWORD PTR _s0$89785[ebp]
	push	ecx
	push	edx
	mov	DWORD PTR _fe_b$89874[ebp], eax
	call	_get_edge_side

; 885  :   
; 886  :         get_edge_side(get_fe_edge(fe_a),sa);

	mov	esi, DWORD PTR _fe_a$89873[ebp]
	mov	ecx, DWORD PTR _web+460
	mov	ebx, esi
	and	ebx, 134217727				; 07ffffffH
	lea	eax, DWORD PTR _sa$89875[ebp]
	push	eax
	add	ebx, ebx
	add	ebx, ebx
	mov	edx, DWORD PTR [ebx+ecx]
	mov	eax, esi
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]
	push	eax
	call	_get_edge_side

; 887  :         cross_prod(vc1->normal,sa,cross1);

	mov	eax, DWORD PTR _vc1$89778[ebp]
	lea	ecx, DWORD PTR _cross1$89781[ebp]
	push	ecx
	lea	edx, DWORD PTR _sa$89875[ebp]
	add	eax, 416				; 000001a0H
	push	edx
	push	eax
	mov	DWORD PTR tv5731[ebp], eax
	call	_cross_prod
	add	esp, 28					; 0000001cH

; 888  :         if ( (assume_oriented_flag && inverted(get_fe_facet(fe_a)))
; 889  :              || (!assume_oriented_flag &&  SDIM_dot(cross1,s0) < 0.0 ) )

	cmp	DWORD PTR _assume_oriented_flag, 0
	je	$LN584@sqcurve_me@2
	test	esi, 268435456				; 10000000H
	jne	SHORT $LN344@sqcurve_me@2
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN343@sqcurve_me@2
$LN344@sqcurve_me@2:
	mov	eax, DWORD PTR _web+460
	mov	ecx, DWORD PTR [ebx+eax]
	mov	eax, DWORD PTR [ecx+24]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN343@sqcurve_me@2
	xor	eax, 134217728				; 08000000H
$LN343@sqcurve_me@2:
	test	eax, 134217728				; 08000000H
	jne	$LN124@sqcurve_me@2
$LN597@sqcurve_me@2:
	mov	ecx, DWORD PTR _web+616
$LN539@sqcurve_me@2:

; 891  :         if ( fe_b != fe_a ) /* check for single edge on constraint */

	cmp	DWORD PTR _fe_b$89874[ebp], esi
	je	$LN545@sqcurve_me@2

; 892  :         { get_edge_side(get_fe_edge(fe_b),sb);

	mov	eax, DWORD PTR _fe_b$89874[ebp]
	mov	ecx, DWORD PTR _web+460
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	lea	edx, DWORD PTR _sb$89876[ebp]
	push	edx
	add	esi, esi
	mov	edx, DWORD PTR [esi+ecx]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]
	push	eax
	call	_get_edge_side

; 893  :           cross_prod(vc1->normal,sb,s);

	mov	edx, DWORD PTR tv5731[ebp]
	lea	eax, DWORD PTR _s$89780[ebp]
	push	eax
	lea	ecx, DWORD PTR _sb$89876[ebp]
	push	ecx
	push	edx
	call	_cross_prod
	add	esp, 20					; 00000014H

; 894  :           if ( (assume_oriented_flag && inverted(get_fe_facet(fe_b)))
; 895  :                || (!assume_oriented_flag && SDIM_dot(s,s0) < 0.0 ) )

	cmp	DWORD PTR _assume_oriented_flag, 0
	je	$LN583@sqcurve_me@2
	mov	ecx, DWORD PTR _fe_b$89874[ebp]
	test	ecx, 268435456				; 10000000H
	jne	$LN350@sqcurve_me@2
	mov	eax, DWORD PTR _NULLFACET
	jmp	$LN349@sqcurve_me@2
$LN584@sqcurve_me@2:

; 888  :         if ( (assume_oriented_flag && inverted(get_fe_facet(fe_a)))
; 889  :              || (!assume_oriented_flag &&  SDIM_dot(cross1,s0) < 0.0 ) )

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _s0$89785[ebp]
	push	eax
	lea	ecx, DWORD PTR _cross1$89781[ebp]
	push	ecx
	call	_dot
	fcomp	QWORD PTR __real@0000000000000000
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 5
	jp	$LN597@sqcurve_me@2
$LN124@sqcurve_me@2:

; 890  :           for ( i = 0 ; i < SDIM ; i++ ) cross1[i] = -cross1[i];

	mov	ecx, DWORD PTR _web+616
	xor	eax, eax
	cmp	ecx, 4
	jl	SHORT $LC540@sqcurve_me@2
	lea	edx, DWORD PTR [ecx-3]
	npad	8
$LL541@sqcurve_me@2:
	fld	QWORD PTR _cross1$89781[ebp+eax*8]
	add	eax, 4
	fchs
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-32]
	fld	QWORD PTR _cross1$89781[ebp+eax*8-24]
	fchs
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-24]
	fld	QWORD PTR _cross1$89781[ebp+eax*8-16]
	fchs
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-16]
	fld	QWORD PTR _cross1$89781[ebp+eax*8-8]
	fchs
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LL541@sqcurve_me@2
$LC540@sqcurve_me@2:
	cmp	eax, ecx
	jge	$LN539@sqcurve_me@2
$LC122@sqcurve_me@2:
	fld	QWORD PTR _cross1$89781[ebp+eax*8]
	inc	eax
	fchs
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LC122@sqcurve_me@2

; 888  :         if ( (assume_oriented_flag && inverted(get_fe_facet(fe_a)))
; 889  :              || (!assume_oriented_flag &&  SDIM_dot(cross1,s0) < 0.0 ) )

	jmp	$LN539@sqcurve_me@2

; 894  :           if ( (assume_oriented_flag && inverted(get_fe_facet(fe_b)))
; 895  :                || (!assume_oriented_flag && SDIM_dot(s,s0) < 0.0 ) )

$LN350@sqcurve_me@2:
	mov	eax, DWORD PTR _web+460
	mov	edx, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [edx+24]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN349@sqcurve_me@2
	xor	eax, 134217728				; 08000000H
$LN349@sqcurve_me@2:
	test	eax, 134217728				; 08000000H
	jne	$LN117@sqcurve_me@2
$LN118@sqcurve_me@2:

; 897  :           else  for ( i = 0 ; i < SDIM ; i++ ) cross1[i] += s[i];

	mov	ecx, DWORD PTR _web+616
	xor	eax, eax
	cmp	ecx, 4
	jl	SHORT $LC546@sqcurve_me@2
	lea	edx, DWORD PTR [ecx-3]
	npad	2
$LL547@sqcurve_me@2:
	fld	QWORD PTR _s$89780[ebp+eax*8]
	add	eax, 4
	fadd	QWORD PTR _cross1$89781[ebp+eax*8-32]
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-32]
	fld	QWORD PTR _s$89780[ebp+eax*8-24]
	fadd	QWORD PTR _cross1$89781[ebp+eax*8-24]
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-24]
	fld	QWORD PTR _s$89780[ebp+eax*8-16]
	fadd	QWORD PTR _cross1$89781[ebp+eax*8-16]
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-16]
	fld	QWORD PTR _s$89780[ebp+eax*8-8]
	fadd	QWORD PTR _cross1$89781[ebp+eax*8-8]
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LL547@sqcurve_me@2
$LC546@sqcurve_me@2:
	cmp	eax, ecx
	jge	SHORT $LN545@sqcurve_me@2
	npad	9
$LC111@sqcurve_me@2:
	fld	QWORD PTR _s$89780[ebp+eax*8]
	inc	eax
	fadd	QWORD PTR _cross1$89781[ebp+eax*8-8]
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LC111@sqcurve_me@2
$LN545@sqcurve_me@2:

; 898  :         }
; 899  :   
; 900  :         e1 = SDIM_dot(vc1->force,vc1->force);

	mov	eax, DWORD PTR _vc1$89778[ebp]
	add	eax, 16					; 00000010H
	push	ecx
	push	eax
	push	eax
	call	_dot
	fstp	QWORD PTR _e1$[ebp]

; 901  :         denom1 = SDIM_dot(vc1->normal,vc1->normal);

	mov	eax, DWORD PTR _web+616
	push	eax
	mov	eax, DWORD PTR tv5731[ebp]
	push	eax
	push	eax
	call	_dot
	fstp	QWORD PTR _denom1$89783[ebp]

; 902  :         e2 = SDIM_dot(vc2->force,vc2->force);

	mov	ecx, DWORD PTR _web+616
	lea	eax, DWORD PTR [edi+16]
	push	ecx
	push	eax
	push	eax
	call	_dot
	fstp	QWORD PTR _e2$[ebp]

; 903  :         denom2 = SDIM_dot(vc2->normal,vc2->normal);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	esi, DWORD PTR [edi+416]
	push	esi
	push	esi
	call	_dot
	fstp	QWORD PTR _denom2$89784[ebp]

; 904  :   
; 905  :         cross_prod(vc2->normal,sa,cross2);

	lea	eax, DWORD PTR _cross2$89782[ebp]
	push	eax
	lea	ecx, DWORD PTR _sa$89875[ebp]
	push	ecx
	push	esi
	call	_cross_prod
	add	esp, 60					; 0000003cH

; 906  :         if ( (assume_oriented_flag && !inverted(get_fe_facet(fe_a)))
; 907  :               || (!assume_oriented_flag &&  SDIM_dot(cross2,s0) > 0.0 ) )

	cmp	DWORD PTR _assume_oriented_flag, 0
	je	$LN582@sqcurve_me@2
	mov	ecx, DWORD PTR _fe_a$89873[ebp]
	test	ecx, 268435456				; 10000000H
	jne	$LN354@sqcurve_me@2
	mov	eax, DWORD PTR _NULLFACET
	jmp	$LN353@sqcurve_me@2
$LN583@sqcurve_me@2:

; 894  :           if ( (assume_oriented_flag && inverted(get_fe_facet(fe_b)))
; 895  :                || (!assume_oriented_flag && SDIM_dot(s,s0) < 0.0 ) )

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _s0$89785[ebp]
	push	ecx
	lea	edx, DWORD PTR _s$89780[ebp]
	push	edx
	call	_dot
	fcomp	QWORD PTR __real@0000000000000000
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 5
	jp	$LN118@sqcurve_me@2
$LN117@sqcurve_me@2:

; 896  :              for ( i = 0 ; i < SDIM ; i++ ) cross1[i] -= s[i];

	mov	ecx, DWORD PTR _web+616
	xor	eax, eax
	cmp	ecx, 4
	jl	SHORT $LC543@sqcurve_me@2
	lea	edx, DWORD PTR [ecx-3]
	npad	1
$LL544@sqcurve_me@2:
	fld	QWORD PTR _cross1$89781[ebp+eax*8]
	add	eax, 4
	fsub	QWORD PTR _s$89780[ebp+eax*8-32]
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-32]
	fld	QWORD PTR _cross1$89781[ebp+eax*8-24]
	fsub	QWORD PTR _s$89780[ebp+eax*8-24]
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-24]
	fld	QWORD PTR _cross1$89781[ebp+eax*8-16]
	fsub	QWORD PTR _s$89780[ebp+eax*8-16]
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-16]
	fld	QWORD PTR _cross1$89781[ebp+eax*8-8]
	fsub	QWORD PTR _s$89780[ebp+eax*8-8]
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LL544@sqcurve_me@2
$LC543@sqcurve_me@2:
	cmp	eax, ecx
	jge	$LN545@sqcurve_me@2
	npad	5
$LC115@sqcurve_me@2:
	fld	QWORD PTR _cross1$89781[ebp+eax*8]
	inc	eax
	fsub	QWORD PTR _s$89780[ebp+eax*8-8]
	fstp	QWORD PTR _cross1$89781[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LC115@sqcurve_me@2

; 897  :           else  for ( i = 0 ; i < SDIM ; i++ ) cross1[i] += s[i];

	jmp	$LN545@sqcurve_me@2

; 906  :         if ( (assume_oriented_flag && !inverted(get_fe_facet(fe_a)))
; 907  :               || (!assume_oriented_flag &&  SDIM_dot(cross2,s0) > 0.0 ) )

$LN354@sqcurve_me@2:
	mov	edx, DWORD PTR _web+460
	mov	eax, DWORD PTR [ebx+edx]
	mov	eax, DWORD PTR [eax+24]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN353@sqcurve_me@2
	xor	eax, 134217728				; 08000000H
$LN353@sqcurve_me@2:
	test	eax, 134217728				; 08000000H
	je	$LN608@sqcurve_me@2
$LN598@sqcurve_me@2:
	mov	edx, DWORD PTR _web+616
$LN548@sqcurve_me@2:

; 909  :         if ( fe_b != fe_a ) /* check for single edge on constraint */

	mov	ebx, DWORD PTR _fe_b$89874[ebp]
	cmp	ebx, DWORD PTR _fe_a$89873[ebp]
	je	$LN610@sqcurve_me@2

; 910  :           { cross_prod(vc2->normal,sb,s);

	lea	ecx, DWORD PTR _s$89780[ebp]
	push	ecx
	lea	edx, DWORD PTR _sb$89876[ebp]
	push	edx
	push	esi
	call	_cross_prod
	add	esp, 12					; 0000000cH

; 911  :              if ( (assume_oriented_flag && !inverted(get_fe_facet(fe_b)))
; 912  :               || (!assume_oriented_flag &&  SDIM_dot(s,s0) > 0.0 ) )

	cmp	DWORD PTR _assume_oriented_flag, 0
	je	$LN581@sqcurve_me@2
	test	ebx, 268435456				; 10000000H
	jne	$LN358@sqcurve_me@2
	mov	eax, DWORD PTR _NULLFACET
	jmp	$LN357@sqcurve_me@2
$LN582@sqcurve_me@2:

; 906  :         if ( (assume_oriented_flag && !inverted(get_fe_facet(fe_a)))
; 907  :               || (!assume_oriented_flag &&  SDIM_dot(cross2,s0) > 0.0 ) )

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _s0$89785[ebp]
	push	edx
	lea	eax, DWORD PTR _cross2$89782[ebp]
	push	eax
	call	_dot
	fcomp	QWORD PTR __real@0000000000000000
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN598@sqcurve_me@2
$LN608@sqcurve_me@2:

; 908  :           for ( i = 0 ; i < SDIM ; i++ ) cross2[i] = -cross2[i];

	mov	edx, DWORD PTR _web+616
	xor	eax, eax
	cmp	edx, 4
	jl	SHORT $LC549@sqcurve_me@2
	lea	ecx, DWORD PTR [edx-3]
$LL550@sqcurve_me@2:
	fld	QWORD PTR _cross2$89782[ebp+eax*8]
	add	eax, 4
	fchs
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-32]
	fld	QWORD PTR _cross2$89782[ebp+eax*8-24]
	fchs
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-24]
	fld	QWORD PTR _cross2$89782[ebp+eax*8-16]
	fchs
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-16]
	fld	QWORD PTR _cross2$89782[ebp+eax*8-8]
	fchs
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LL550@sqcurve_me@2
$LC549@sqcurve_me@2:
	cmp	eax, edx
	jge	$LN548@sqcurve_me@2
$LC105@sqcurve_me@2:
	fld	QWORD PTR _cross2$89782[ebp+eax*8]
	inc	eax
	fchs
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LC105@sqcurve_me@2

; 906  :         if ( (assume_oriented_flag && !inverted(get_fe_facet(fe_a)))
; 907  :               || (!assume_oriented_flag &&  SDIM_dot(cross2,s0) > 0.0 ) )

	jmp	$LN548@sqcurve_me@2

; 911  :              if ( (assume_oriented_flag && !inverted(get_fe_facet(fe_b)))
; 912  :               || (!assume_oriented_flag &&  SDIM_dot(s,s0) > 0.0 ) )

$LN358@sqcurve_me@2:
	mov	ecx, DWORD PTR _web+460
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+24]
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN357@sqcurve_me@2
	xor	eax, 134217728				; 08000000H
$LN357@sqcurve_me@2:
	test	eax, 134217728				; 08000000H
	je	$LN609@sqcurve_me@2
$LN599@sqcurve_me@2:

; 914  :              else  for ( i = 0 ; i < SDIM ; i++ ) cross2[i] += s[i];

	mov	edx, DWORD PTR _web+616
	xor	eax, eax
	cmp	edx, 4
	jl	SHORT $LC555@sqcurve_me@2
	lea	ecx, DWORD PTR [edx-3]
	npad	1
$LL556@sqcurve_me@2:
	fld	QWORD PTR _s$89780[ebp+eax*8]
	add	eax, 4
	fadd	QWORD PTR _cross2$89782[ebp+eax*8-32]
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-32]
	fld	QWORD PTR _s$89780[ebp+eax*8-24]
	fadd	QWORD PTR _cross2$89782[ebp+eax*8-24]
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-24]
	fld	QWORD PTR _s$89780[ebp+eax*8-16]
	fadd	QWORD PTR _cross2$89782[ebp+eax*8-16]
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-16]
	fld	QWORD PTR _s$89780[ebp+eax*8-8]
	fadd	QWORD PTR _cross2$89782[ebp+eax*8-8]
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LL556@sqcurve_me@2
$LC555@sqcurve_me@2:
	cmp	eax, edx
	jge	SHORT $LN610@sqcurve_me@2
	npad	3
$LC94@sqcurve_me@2:
	fld	QWORD PTR _s$89780[ebp+eax*8]
	inc	eax
	fadd	QWORD PTR _cross2$89782[ebp+eax*8-8]
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LC94@sqcurve_me@2
$LN610@sqcurve_me@2:

; 915  :           }
; 916  :      }
; 917  :     else  /* squared curvature */

	fld	QWORD PTR __real@3fd0000000000000
	fld	QWORD PTR __real@4008000000000000
	fld	QWORD PTR _e2$[ebp]
	jmp	$LN91@sqcurve_me@2
$LN581@sqcurve_me@2:

; 911  :              if ( (assume_oriented_flag && !inverted(get_fe_facet(fe_b)))
; 912  :               || (!assume_oriented_flag &&  SDIM_dot(s,s0) > 0.0 ) )

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _s0$89785[ebp]
	push	ecx
	lea	edx, DWORD PTR _s$89780[ebp]
	push	edx
	call	_dot
	fcomp	QWORD PTR __real@0000000000000000
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN599@sqcurve_me@2
$LN609@sqcurve_me@2:

; 913  :                 for ( i = 0 ; i < SDIM ; i++ ) cross2[i] -= s[i];

	mov	edx, DWORD PTR _web+616
	xor	eax, eax
	cmp	edx, 4
	jl	SHORT $LC552@sqcurve_me@2
	lea	ecx, DWORD PTR [edx-3]
	npad	8
$LL553@sqcurve_me@2:
	fld	QWORD PTR _cross2$89782[ebp+eax*8]
	add	eax, 4
	fsub	QWORD PTR _s$89780[ebp+eax*8-32]
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-32]
	fld	QWORD PTR _cross2$89782[ebp+eax*8-24]
	fsub	QWORD PTR _s$89780[ebp+eax*8-24]
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-24]
	fld	QWORD PTR _cross2$89782[ebp+eax*8-16]
	fsub	QWORD PTR _s$89780[ebp+eax*8-16]
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-16]
	fld	QWORD PTR _cross2$89782[ebp+eax*8-8]
	fsub	QWORD PTR _s$89780[ebp+eax*8-8]
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LL553@sqcurve_me@2
$LC552@sqcurve_me@2:
	cmp	eax, edx
	jge	$LN610@sqcurve_me@2
	npad	2
$LC98@sqcurve_me@2:
	fld	QWORD PTR _cross2$89782[ebp+eax*8]
	inc	eax
	fsub	QWORD PTR _s$89780[ebp+eax*8-8]
	fstp	QWORD PTR _cross2$89782[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LC98@sqcurve_me@2

; 914  :              else  for ( i = 0 ; i < SDIM ; i++ ) cross2[i] += s[i];

	fld	QWORD PTR __real@3fd0000000000000
	fld	QWORD PTR __real@4008000000000000
	fld	QWORD PTR _e2$[ebp]
	jmp	SHORT $LN91@sqcurve_me@2
$LN126@sqcurve_me@2:

; 918  :     { e1 = SDIM_dot(vc1->force,vc1->force)/vc1->area*3.0/4;

	mov	esi, DWORD PTR _vc1$89778[ebp]
	lea	eax, DWORD PTR [esi+16]
	push	edx
	push	eax
	push	eax
	call	_dot
	fdiv	QWORD PTR [esi]

; 919  :       e2 = SDIM_dot(vc2->force,vc2->force)/vc2->area*3.0/4;

	mov	ecx, DWORD PTR _web+616
	lea	eax, DWORD PTR [edi+16]
	push	ecx
	push	eax
	push	eax
	fmul	QWORD PTR __real@4008000000000000
	fmul	QWORD PTR __real@3fd0000000000000
	fstp	QWORD PTR _e1$[ebp]
	call	_dot
	fdiv	QWORD PTR [edi]
	mov	edx, DWORD PTR _web+616
	add	esp, 24					; 00000018H
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR __real@3fd0000000000000
	fmul	ST(2), ST(0)
	fxch	ST(2)
$LN91@sqcurve_me@2:

; 923  :     { ATTR tattr = get_vattr(tailv);

	mov	ecx, DWORD PTR _web+12

; 924  :       if ( (!(tattr & FIXED) || (mi->flags & IGNORE_FIXED))
; 925  :            && (!(tattr & BOUNDARY) || (mi->flags & IGNORE_CONSTR))
; 926  :       )

	xor	esi, esi
	cmp	DWORD PTR tv5616[ebp], esi
	je	$LN90@sqcurve_me@2

; 920  :     }
; 921  :   
; 922  :     if ( inverted(eee_id) )

	mov	eax, DWORD PTR _tailv$89776[ebp]
	fstp	ST(2)

; 923  :     { ATTR tattr = get_vattr(tailv);

	and	eax, 134217727				; 07ffffffH
	fstp	ST(1)
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR _tattr$89918[ebp+4], eax

; 924  :       if ( (!(tattr & FIXED) || (mi->flags & IGNORE_FIXED))
; 925  :            && (!(tattr & BOUNDARY) || (mi->flags & IGNORE_CONSTR))
; 926  :       )

	mov	eax, ecx
	and	eax, 64					; 00000040H
	or	eax, esi
	je	SHORT $LN635@sqcurve_me@2
	mov	eax, DWORD PTR _mi$[ebp]
	test	DWORD PTR [eax+140], 134217728		; 08000000H
	je	$LN601@sqcurve_me@2
$LN635@sqcurve_me@2:
	and	ecx, 128				; 00000080H
	xor	eax, eax
	or	ecx, eax
	je	SHORT $LN639@sqcurve_me@2
	mov	ecx, DWORD PTR _mi$[ebp]
	test	DWORD PTR [ecx+140], 33554432		; 02000000H
	je	$LN601@sqcurve_me@2
$LN639@sqcurve_me@2:

; 927  :       { /* force on head due to curvature at tail */
; 928  :         if ( mi->gen_method == normal_sq_mean_curvature_mi )

	mov	eax, DWORD PTR _mi$[ebp]
	mov	eax, DWORD PTR [eax+148]

; 929  :           for ( i = 0 ; i < SDIM ; i++ )

	xor	esi, esi
	cmp	eax, DWORD PTR _normal_sq_mean_curvature_mi
	jne	$LN86@sqcurve_me@2
	test	edx, edx
	jle	$LN600@sqcurve_me@2
	mov	edi, DWORD PTR _ec$89777[ebp]
	fstp	ST(0)
	lea	ebx, DWORD PTR [edi+48]
	add	edi, 192				; 000000c0H
$LL85@sqcurve_me@2:

; 930  :           { f[i] = fudge11*SDIM_dot(vc1->force,ec->deriv2[i])
; 931  :                  - fudge12*(cross1[i]+SDIM_dot(vc1->normal,ec->deriv2[i]))
; 932  :                  + fudge13*ec->deriv[1][i] ;

	mov	eax, DWORD PTR _vc1$89778[ebp]
	push	edx
	add	eax, 16					; 00000010H
	push	edi
	push	eax
	call	_dot
	fmul	QWORD PTR _fudge11$[ebp]
	mov	ecx, DWORD PTR _web+616
	mov	eax, DWORD PTR _vc1$89778[ebp]
	push	ecx
	fstp	QWORD PTR tv19269[ebp]
	add	eax, 416				; 000001a0H
	push	edi
	push	eax
	call	_dot
	fadd	QWORD PTR _cross1$89781[ebp+esi*8]
	mov	edx, DWORD PTR _web+616
	inc	esi
	fmul	QWORD PTR _fudge12$[ebp]
	add	esp, 24					; 00000018H
	add	edi, 48					; 00000030H
	add	ebx, 8
	fsubr	QWORD PTR tv19269[ebp]
	fld	QWORD PTR [ebx-8]
	fmul	QWORD PTR _fudge13$[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _f$[ebp+esi*8-8]
	cmp	esi, edx
	jl	SHORT $LL85@sqcurve_me@2

; 933  :           }
; 934  :         else if ( mi->gen_method == eff_area_sq_mean_curvature_mi )

	fld	QWORD PTR __real@4008000000000000
	jmp	$LN600@sqcurve_me@2
$LN86@sqcurve_me@2:
	cmp	eax, DWORD PTR _eff_area_sq_mean_curvature_mi
	jne	$LN81@sqcurve_me@2

; 935  :             for ( i = 0 ; i < SDIM ; i++ )

	test	edx, edx
	jle	$LN600@sqcurve_me@2
	mov	edi, DWORD PTR _ec$89777[ebp]
	fld	QWORD PTR _denom1$89783[ebp]
	lea	ebx, DWORD PTR [edi+48]
	add	edi, 192				; 000000c0H
$LN80@sqcurve_me@2:

; 936  :             { if ( denom1 != 0.0 )

	fld	ST(0)
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jnp	$LN77@sqcurve_me@2

; 937  :                   f[i] = 6*SDIM_dot(vc1->force,ec->deriv2[i])/denom1*vc1->area
; 938  :                     + 3*e1/denom1*ec->deriv[1][i] 
; 939  :                     - 6*e1/denom1/denom1*cross1[i]*vc1->area;

	mov	eax, DWORD PTR _vc1$89778[ebp]
	fstp	ST(2)
	push	edx
	fstp	ST(0)
	add	eax, 16					; 00000010H
	fstp	ST(0)
	push	edi
	push	eax
	call	_dot
	fld	QWORD PTR __real@4018000000000000
	fmul	ST(1), ST(0)
	mov	eax, DWORD PTR _vc1$89778[ebp]
	fld	QWORD PTR _denom1$89783[ebp]
	mov	edx, DWORD PTR _web+616
	add	esp, 12					; 0000000cH
	fdiv	ST(2), ST(0)
	fxch	ST(2)
	fmul	QWORD PTR [eax]
	fld	QWORD PTR _e1$[ebp]
	fld	ST(0)
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(5)
	fmul	QWORD PTR [ebx]
	faddp	ST(3), ST(0)
	fxch	ST(1)
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fmul	QWORD PTR _cross1$89781[ebp+esi*8]
	fmul	QWORD PTR [eax]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _f$[ebp+esi*8]
	fxch	ST(1)
$LN79@sqcurve_me@2:

; 935  :             for ( i = 0 ; i < SDIM ; i++ )

	inc	esi
	add	edi, 48					; 00000030H
	add	ebx, 8
	cmp	esi, edx
	jl	$LN80@sqcurve_me@2
	fstp	ST(0)

; 941  :             }
; 942  :          else  /* squared curvature */

	jmp	$LN600@sqcurve_me@2
$LN77@sqcurve_me@2:

; 940  :               else f[i] = 0.0;

	fstp	QWORD PTR _f$[ebp+esi*8]
	jmp	SHORT $LN79@sqcurve_me@2
$LN81@sqcurve_me@2:

; 943  :           for ( i = 0 ; i < SDIM ; i++ )

	test	edx, edx
	jle	$LN600@sqcurve_me@2
	mov	edi, DWORD PTR _ec$89777[ebp]
	fstp	ST(0)
	fld	QWORD PTR _e1$[ebp]
	lea	ebx, DWORD PTR [edi+48]
	fmul	QWORD PTR __real@3ff5555555555555
	add	edi, 192				; 000000c0H
	fstp	QWORD PTR tv6152[ebp]
	jmp	SHORT $LN74@sqcurve_me@2
	npad	1
$LL971@sqcurve_me@2:
	fstp	ST(0)
$LN74@sqcurve_me@2:

; 944  :             f[i] = (- 4/3.0*e1*ec->deriv[1][i]
; 945  :             + 2*SDIM_dot(vc1->force,ec->deriv2[i]))/vc1->area*3.0/4;

	mov	eax, DWORD PTR _vc1$89778[ebp]
	push	edx
	add	eax, 16					; 00000010H
	push	edi
	push	eax
	call	_dot
	fadd	ST(0), ST(0)
	fld	QWORD PTR tv6152[ebp]
	mov	edx, DWORD PTR _vc1$89778[ebp]
	fmul	QWORD PTR [ebx]
	inc	esi
	add	esp, 12					; 0000000cH
	add	edi, 48					; 00000030H
	fsubp	ST(1), ST(0)
	add	ebx, 8
	fdiv	QWORD PTR [edx]
	mov	edx, DWORD PTR _web+616
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR __real@3fd0000000000000
	fstp	QWORD PTR _f$[ebp+esi*8-8]
	cmp	esi, edx
	jl	SHORT $LL971@sqcurve_me@2
$LN600@sqcurve_me@2:

; 946  :          if ( h0_flag && !(mi->gen_method == normal_sq_mean_curvature_mi) )

	cmp	DWORD PTR _h0_flag, 0
	je	$LN71@sqcurve_me@2
	mov	eax, DWORD PTR _normal_sq_mean_curvature_mi
	mov	ecx, DWORD PTR _mi$[ebp]
	cmp	DWORD PTR [ecx+148], eax
	je	$LN71@sqcurve_me@2

; 947  :           { REAL fd[MAXCOORD],net;
; 948  :             fe = get_edge_fe(e_id);

	mov	edx, DWORD PTR _web+124
	fstp	ST(0)
	mov	eax, DWORD PTR tv5623[ebp]
	mov	eax, DWORD PTR [eax+edx]
	test	eax, eax
	jne	SHORT $LN362@sqcurve_me@2
	xor	edi, edi
	jmp	SHORT $LN363@sqcurve_me@2
$LN362@sqcurve_me@2:
	cmp	DWORD PTR tv5620[ebp], 0
	mov	eax, DWORD PTR [eax+28]
	je	SHORT $LN361@sqcurve_me@2
	xor	eax, 134217728				; 08000000H
$LN361@sqcurve_me@2:
	mov	edi, eax
$LN363@sqcurve_me@2:

; 949  :             get_edge_side(get_fe_edge(get_next_edge(fe)),wa);

	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	mov	ebx, edi
	add	esi, esi
	shr	ebx, 27					; 0000001bH
	add	esi, esi
	and	ebx, 1
	je	SHORT $LN366@sqcurve_me@2
	mov	ecx, DWORD PTR _web+460
	mov	edx, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN365@sqcurve_me@2
$LN366@sqcurve_me@2:
	mov	eax, DWORD PTR _web+460
	mov	ecx, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [ecx+32]
$LN365@sqcurve_me@2:
	mov	ecx, eax
	lea	edx, DWORD PTR _wa$89786[ebp]
	push	edx
	mov	edx, DWORD PTR _web+460
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	push	eax
	call	_get_edge_side

; 950  :             get_edge_side(get_fe_edge(get_next_edge(get_next_facet(fe))),wb);

	mov	ecx, DWORD PTR _web+460
	add	esp, 8
	test	ebx, ebx
	je	SHORT $LN372@sqcurve_me@2
	mov	edx, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN371@sqcurve_me@2
$LN372@sqcurve_me@2:
	mov	eax, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [eax+40]
$LN371@sqcurve_me@2:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN376@sqcurve_me@2
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN375@sqcurve_me@2
$LN376@sqcurve_me@2:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+32]
$LN375@sqcurve_me@2:
	lea	edx, DWORD PTR _wb$89787[ebp]
	push	edx
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	push	eax
	call	_get_edge_side
	add	esp, 8

; 951  :             f_id = get_fe_facet(fe);

	test	edi, 268435456				; 10000000H
	jne	SHORT $LN382@sqcurve_me@2
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN381@sqcurve_me@2
$LN382@sqcurve_me@2:
	mov	edx, DWORD PTR _web+460
	mov	eax, DWORD PTR [esi+edx]
	mov	eax, DWORD PTR [eax+24]
	test	ebx, ebx
	je	SHORT $LN381@sqcurve_me@2
	xor	eax, 134217728				; 08000000H
$LN381@sqcurve_me@2:

; 952  :             if ( inverted(f_id) )
; 953  :               for ( i = 0 ; i < SDIM ; i++ ) w[i] = wb[i] - wa[i];

	mov	ecx, DWORD PTR _web+616
	test	eax, 134217728				; 08000000H
	je	$LN70@sqcurve_me@2
	xor	eax, eax
	cmp	ecx, 4
	jl	$LC558@sqcurve_me@2
	lea	edx, DWORD PTR [ecx-3]
$LL559@sqcurve_me@2:
	fld	QWORD PTR _wb$89787[ebp+eax*8]
	add	eax, 4
	fsub	QWORD PTR _wa$89786[ebp+eax*8-32]
	fstp	QWORD PTR _w$89788[ebp+eax*8-32]
	fld	QWORD PTR _wb$89787[ebp+eax*8-24]
	fsub	QWORD PTR _wa$89786[ebp+eax*8-24]
	fstp	QWORD PTR _w$89788[ebp+eax*8-24]
	fld	QWORD PTR _wb$89787[ebp+eax*8-16]
	fsub	QWORD PTR _wa$89786[ebp+eax*8-16]
	fstp	QWORD PTR _w$89788[ebp+eax*8-16]
	fld	QWORD PTR _wb$89787[ebp+eax*8-8]
	fsub	QWORD PTR _wa$89786[ebp+eax*8-8]
	fstp	QWORD PTR _w$89788[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LL559@sqcurve_me@2
$LC558@sqcurve_me@2:
	cmp	eax, ecx
	jge	$LN634@sqcurve_me@2
	npad	7
$LC69@sqcurve_me@2:
	fld	QWORD PTR _wb$89787[ebp+eax*8]
	inc	eax
	fsub	QWORD PTR _wa$89786[ebp+eax*8-8]
	fstp	QWORD PTR _w$89788[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LC69@sqcurve_me@2

; 954  :             else for ( i = 0 ; i < SDIM ; i++ ) w[i] = wa[i] - wb[i];

	jmp	$LN634@sqcurve_me@2
$LN70@sqcurve_me@2:
	xor	eax, eax
	cmp	ecx, 4
	jl	SHORT $LC561@sqcurve_me@2
	lea	edx, DWORD PTR [ecx-3]
	npad	7
$LL562@sqcurve_me@2:
	fld	QWORD PTR _wa$89786[ebp+eax*8]
	add	eax, 4
	fsub	QWORD PTR _wb$89787[ebp+eax*8-32]
	fstp	QWORD PTR _w$89788[ebp+eax*8-32]
	fld	QWORD PTR _wa$89786[ebp+eax*8-24]
	fsub	QWORD PTR _wb$89787[ebp+eax*8-24]
	fstp	QWORD PTR _w$89788[ebp+eax*8-24]
	fld	QWORD PTR _wa$89786[ebp+eax*8-16]
	fsub	QWORD PTR _wb$89787[ebp+eax*8-16]
	fstp	QWORD PTR _w$89788[ebp+eax*8-16]
	fld	QWORD PTR _wa$89786[ebp+eax*8-8]
	fsub	QWORD PTR _wb$89787[ebp+eax*8-8]
	fstp	QWORD PTR _w$89788[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LL562@sqcurve_me@2
$LC561@sqcurve_me@2:
	cmp	eax, ecx
	jge	SHORT $LN634@sqcurve_me@2
	npad	1
$LC65@sqcurve_me@2:
	fld	QWORD PTR _wa$89786[ebp+eax*8]
	inc	eax
	fsub	QWORD PTR _wb$89787[ebp+eax*8-8]
	fstp	QWORD PTR _w$89788[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LC65@sqcurve_me@2
$LN634@sqcurve_me@2:

; 955  :             cross_prod(w,vc1->force,aw);

	mov	edi, DWORD PTR _vc1$89778[ebp]
	lea	ecx, DWORD PTR _aw$89789[ebp]
	push	ecx
	lea	eax, DWORD PTR [edi+16]
	push	eax
	lea	edx, DWORD PTR _w$89788[ebp]
	push	edx
	call	_cross_prod

; 956  :             cross_prod(w,vc1->normal,vw);

	lea	ecx, DWORD PTR _vw$89790[ebp]
	push	ecx
	lea	eax, DWORD PTR [edi+416]
	push	eax
	lea	edx, DWORD PTR _w$89788[ebp]
	push	edx
	call	_cross_prod

; 957  :             for ( i = 0 ; i < SDIM ; i++ )

	mov	edx, DWORD PTR _web+616
	add	esp, 24					; 00000018H
	xor	esi, esi
	test	edx, edx
	jle	$LN611@sqcurve_me@2

; 955  :             cross_prod(w,vc1->force,aw);

	mov	edi, DWORD PTR _ec$89777[ebp]
	lea	ebx, DWORD PTR [edi+48]
	add	edi, 192				; 000000c0H
	jmp	SHORT $LN62@sqcurve_me@2
$LL973@sqcurve_me@2:
	fstp	ST(1)
	fstp	ST(0)
$LN62@sqcurve_me@2:

; 958  :             { fd[i] = (SDIM_dot(vc1->normal,ec->deriv2[i])/vc1->norm
; 959  :                 + aw[i]/vc1->norm - vc1->f*2*vw[i]/vc1->norm/vc1->norm)*3;

	mov	eax, DWORD PTR _vc1$89778[ebp]
	push	edx
	add	eax, 416				; 000001a0H
	push	edi
	push	eax
	call	_dot
	mov	eax, DWORD PTR _vc1$89778[ebp]
	fdiv	QWORD PTR [eax+464]
	mov	edx, DWORD PTR _web+616
	inc	esi
	add	esp, 12					; 0000000cH
	add	edi, 48					; 00000030H
	add	ebx, 8
	fld	QWORD PTR _aw$89789[ebp+esi*8-8]
	fdiv	QWORD PTR [eax+464]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax+64]
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR _vw$89790[ebp+esi*8-8]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	QWORD PTR [eax+464]
	fdiv	QWORD PTR [eax+464]
	fsubp	ST(2), ST(0)
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(2), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR _fd$89941[ebp+esi*8-8]

; 960  :               ad[i] = ec->deriv[1][i]/3;

	fld	QWORD PTR [ebx-8]
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR _ad$[ebp+esi*8-8]
	cmp	esi, edx
	jl	$LL973@sqcurve_me@2

; 957  :             for ( i = 0 ; i < SDIM ; i++ )

	mov	edi, eax
	jmp	SHORT $LN60@sqcurve_me@2
$LN611@sqcurve_me@2:
	fld	QWORD PTR __real@4008000000000000
	fld	QWORD PTR __real@4000000000000000
$LN60@sqcurve_me@2:

; 961  :             }
; 962  :             area = vc1->area/3;
; 963  :             a = vc1->a/3;

	fld	QWORD PTR [edi+8]

; 964  :             for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	fdiv	ST(0), ST(2)
	test	edx, edx
	jle	$LN977@sqcurve_me@2

; 961  :             }
; 962  :             area = vc1->area/3;
; 963  :             a = vc1->a/3;

	mov	ecx, DWORD PTR _ec$89777[ebp]
	fld	QWORD PTR _selfsim_coeff
	mov	esi, DWORD PTR _grad$[ebp]
	add	ecx, 528				; 00000210H
$LN59@sqcurve_me@2:

; 965  :             {
; 966  :               net = 2*vc1->term*fd[i]*a 
; 967  :                       + vc1->term*vc1->term*(ad[i]+ec->aderiv[1][i]/3);
; 968  :               if ( self_similar_flag )

	cmp	DWORD PTR _self_similar_flag, 0
	fld	QWORD PTR [edi+536]
	fld	QWORD PTR [ecx-384]
	fdiv	ST(0), ST(5)
	fadd	QWORD PTR _ad$[ebp+eax*8]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	fld	QWORD PTR [edi+536]
	fmul	ST(0), ST(4)
	fmul	QWORD PTR _fd$89941[ebp+eax*8]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	je	SHORT $LN56@sqcurve_me@2

; 969  :                 net += 2*vc1->term*(-selfsim_coeff*ec->volderiv[1][i])*a;

	fld	QWORD PTR [ecx]
	fmul	ST(0), ST(2)
	fchs
	fld	QWORD PTR [edi+536]
	fmul	ST(0), ST(5)
	fmulp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
$LN56@sqcurve_me@2:

; 970  :               grad[i] += net;

	fadd	QWORD PTR [esi+eax*8]
	inc	eax
	add	ecx, 8
	fstp	QWORD PTR [esi+eax*8-8]
	mov	edx, DWORD PTR _web+616
	cmp	eax, edx
	jl	SHORT $LN59@sqcurve_me@2

; 964  :             for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(2)
$LN1001@sqcurve_me@2:

; 1027 :             for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)
$LN1022@sqcurve_me@2:
	fstp	ST(0)
$LN601@sqcurve_me@2:

; 1039 :       }
; 1040 :     eee_id = get_next_tail_edge(eee_id);

	mov	eax, DWORD PTR _eee_id$[ebp]
	fldz
	mov	esi, DWORD PTR _web+124
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR tv5616[ebp]
	mov	ebx, DWORD PTR [ecx+eax*4+32]
	mov	DWORD PTR _eee_id$[ebp], ebx
$LN180@sqcurve_me@2:

; 1041 :   } while ( !equal_id(eee_id,ee_id) );

	cmp	ebx, DWORD PTR _ee_id$[ebp]
	jne	$LN632@sqcurve_me@2

; 809  :     
; 810  :     if ( (vc1->area == 0.0) || (vc2->area == 0.0) ) continue;

	fstp	ST(0)
$LN179@sqcurve_me@2:

; 1042 :     return venergy*vc->a/3;

	mov	ecx, DWORD PTR _vc$[ebp]
	fld	QWORD PTR [ecx+8]
	fmul	QWORD PTR _venergy$[ebp]
	fdivrp	ST(1), ST(0)
$LN269@sqcurve_me@2:

; 1043 : }  /* end sqcurve_method_grad */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN71@sqcurve_me@2:

; 971  :             }
; 972  :           }
; 973  :          else
; 974  :           for ( i = 0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN601@sqcurve_me@2
	mov	eax, DWORD PTR _grad$[ebp]
	lea	esi, DWORD PTR _f$[ebp]
	sub	esi, eax
$LN54@sqcurve_me@2:

; 975  :             grad[i] += f[i];

	fld	QWORD PTR [eax+esi]
	inc	ecx
	fadd	QWORD PTR [eax]
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	mov	edx, DWORD PTR _web+616
	cmp	ecx, edx
	jl	SHORT $LN54@sqcurve_me@2

; 976  :          }
; 977  :       }
; 978  :       else /* not inverted */

	jmp	$LN601@sqcurve_me@2
$LN90@sqcurve_me@2:

; 979  :       if ( (!(get_vattr(headv) & FIXED) ||(mi->flags & IGNORE_FIXED))
; 980  :      && (!(get_vattr(headv) & BOUNDARY) ||(mi->flags & IGNORE_CONSTR))
; 981  :       )

	mov	eax, DWORD PTR _headv$89775[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR tv6349[ebp+4], eax
	mov	eax, ecx
	and	eax, 64					; 00000040H
	or	eax, esi
	mov	esi, DWORD PTR _mi$[ebp]
	je	SHORT $LN49@sqcurve_me@2
	test	DWORD PTR [esi+140], 134217728		; 08000000H
	je	$LN893@sqcurve_me@2
$LN49@sqcurve_me@2:
	and	ecx, 128				; 00000080H
	xor	eax, eax
	or	ecx, eax
	je	SHORT $LN48@sqcurve_me@2
	test	DWORD PTR [esi+140], 33554432		; 02000000H
	je	$LN893@sqcurve_me@2
$LN48@sqcurve_me@2:

; 982  :       { /* force on tail due to curvature at head */
; 983  :          if ( mi->gen_method == normal_sq_mean_curvature_mi )

	mov	eax, DWORD PTR [esi+148]

; 984  :           for ( i = 0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	mov	DWORD PTR tv5429[ebp], eax
	mov	DWORD PTR _i$[ebp], ecx
	cmp	eax, DWORD PTR _normal_sq_mean_curvature_mi
	jne	$LN47@sqcurve_me@2

; 982  :       { /* force on tail due to curvature at head */
; 983  :          if ( mi->gen_method == normal_sq_mean_curvature_mi )

	fstp	ST(2)
	fstp	ST(1)

; 984  :           for ( i = 0 ; i < SDIM ; i++ )

	test	edx, edx
	jle	$LN27@sqcurve_me@2
	mov	eax, DWORD PTR _ec$89777[ebp]
	fld	QWORD PTR _fudge23$[ebp]
	fld	QWORD PTR _fudge22$[ebp]
	lea	esi, DWORD PTR _cross2$89782[ebp]
	fld	QWORD PTR _fudge21$[ebp]
	sub	esi, eax
	lea	ebx, DWORD PTR _f$[ebp]
	sub	eax, ebx
	mov	DWORD PTR tv13328[ebp], esi
	mov	DWORD PTR tv13333[ebp], eax
	jmp	SHORT $LN46@sqcurve_me@2
$LN640@sqcurve_me@2:
	mov	eax, DWORD PTR tv13333[ebp]
	mov	esi, DWORD PTR tv13328[ebp]
$LN46@sqcurve_me@2:
	lea	eax, DWORD PTR [eax+ecx*8]

; 985  :           { f[i] = fudge23*ec->deriv[0][i] - fudge22*cross2[i];

	fld	ST(2)
	fmul	QWORD PTR _f$[ebp+eax]
	lea	eax, DWORD PTR _f$[ebp+eax]
	fld	QWORD PTR [eax+esi]

; 986  :             for ( j = 0 ; j < SDIM ; j++ )

	xor	ebx, ebx
	fmul	ST(0), ST(3)
	mov	DWORD PTR _j$[ebp], ebx
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _f$[ebp+ecx*8]
	cmp	edx, 4
	jl	$LC564@sqcurve_me@2

; 985  :           { f[i] = fudge23*ec->deriv[0][i] - fudge22*cross2[i];

	lea	esi, DWORD PTR [edx-4]
	shr	esi, 2
	add	eax, 240				; 000000f0H
	inc	esi
	lea	ebx, DWORD PTR [esi*4]
	lea	ecx, DWORD PTR [edi+416]
	mov	DWORD PTR _j$[ebp], ebx

; 986  :             for ( j = 0 ; j < SDIM ; j++ )

$LN565@sqcurve_me@2:

; 987  :               f[i] += fudge21*vc2->force[j]*ec->deriv2[j][i]
; 988  :                               - fudge22*vc2->normal[j]*ec->deriv2[j][i];

	fld	QWORD PTR [ecx-400]
	mov	ebx, DWORD PTR _i$[ebp]
	fmul	ST(0), ST(1)
	add	eax, 192				; 000000c0H
	add	ecx, 32					; 00000020H
	dec	esi
	fmul	QWORD PTR [eax-240]
	fld	QWORD PTR [ecx-32]
	fmul	ST(0), ST(3)
	fmul	QWORD PTR [eax-240]
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR _f$[ebp+ebx*8]
	fld	QWORD PTR [ecx-424]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [eax-192]
	fld	QWORD PTR [ecx-24]
	fmul	ST(0), ST(4)
	fmul	QWORD PTR [eax-192]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-416]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [eax-144]
	fld	QWORD PTR [ecx-16]
	fmul	ST(0), ST(4)
	fmul	QWORD PTR [eax-144]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-408]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [eax-96]
	fld	QWORD PTR [ecx-8]
	fmul	ST(0), ST(4)
	fmul	QWORD PTR [eax-96]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _f$[ebp+ebx*8]
	jne	$LN565@sqcurve_me@2

; 985  :           { f[i] = fudge23*ec->deriv[0][i] - fudge22*cross2[i];

	mov	ebx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
$LC564@sqcurve_me@2:

; 986  :             for ( j = 0 ; j < SDIM ; j++ )

	cmp	ebx, edx
	jge	SHORT $LN45@sqcurve_me@2
	lea	eax, DWORD PTR [ebx+ebx*2+12]
	lea	esi, DWORD PTR [edi+ebx*8+416]
	mov	ebx, DWORD PTR _ec$89777[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]
	lea	eax, DWORD PTR [ebx+eax*8]
	mov	ebx, edx
	sub	ebx, DWORD PTR _j$[ebp]
$LN615@sqcurve_me@2:

; 987  :               f[i] += fudge21*vc2->force[j]*ec->deriv2[j][i]
; 988  :                               - fudge22*vc2->normal[j]*ec->deriv2[j][i];

	fld	QWORD PTR [esi-400]
	add	eax, 48					; 00000030H
	fmul	ST(0), ST(1)
	add	esi, 8
	dec	ebx
	fmul	QWORD PTR [eax-48]
	fld	QWORD PTR [esi-8]
	fmul	ST(0), ST(3)
	fmul	QWORD PTR [eax-48]
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR _f$[ebp+ecx*8]
	fstp	QWORD PTR _f$[ebp+ecx*8]
	jne	SHORT $LN615@sqcurve_me@2
$LN45@sqcurve_me@2:

; 984  :           for ( i = 0 ; i < SDIM ; i++ )

	inc	ecx
	mov	DWORD PTR _i$[ebp], ecx
	cmp	ecx, edx
	jl	$LN640@sqcurve_me@2
	fstp	ST(1)
	fstp	ST(0)
	fstp	ST(0)

; 989  :          }
; 990  :          else if ( mi->gen_method == eff_area_sq_mean_curvature_mi )

	jmp	$LN27@sqcurve_me@2
$LN47@sqcurve_me@2:
	cmp	eax, DWORD PTR _eff_area_sq_mean_curvature_mi
	jne	$LN39@sqcurve_me@2
	fstp	ST(2)

; 991  :           for ( i = 0 ; i < SDIM ; i++ )

	test	edx, edx
	jle	$LN932@sqcurve_me@2

; 997  :             }
; 998  :             else f[i] = 0.0;

	mov	eax, DWORD PTR _ec$89777[ebp]
	fld	QWORD PTR __real@4018000000000000
	fld	QWORD PTR _denom2$89784[ebp]
	lea	esi, DWORD PTR _cross2$89782[ebp]
	fldz
	sub	esi, eax
	mov	ebx, eax
	lea	eax, DWORD PTR _f$[ebp]
	sub	ebx, eax
	mov	DWORD PTR tv13328[ebp], esi
	mov	DWORD PTR tv13333[ebp], ebx
	jmp	SHORT $LN38@sqcurve_me@2
$LN641@sqcurve_me@2:
	mov	ebx, DWORD PTR tv13333[ebp]
	mov	esi, DWORD PTR tv13328[ebp]
$LN38@sqcurve_me@2:

; 992  :           { if ( denom2 != 0.0 )

	fld	ST(1)
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN35@sqcurve_me@2

; 993  :             { f[i] = 3*e2/denom2*ec->deriv[0][i] 
; 994  :                               - 6*e2/denom2/denom2*cross2[i]*vc2->area;

	fld	ST(4)
	lea	eax, DWORD PTR [ebx+ecx*8]
	fmul	ST(0), ST(4)
	lea	eax, DWORD PTR _f$[ebp+eax]
	fdiv	ST(0), ST(2)
	fmul	QWORD PTR [eax]
	fld	ST(5)
	fmul	ST(0), ST(4)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fmul	QWORD PTR [eax+esi]

; 995  :               for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	fmul	QWORD PTR [edi]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _f$[ebp+ecx*8]
	cmp	edx, 4
	jl	$LC567@sqcurve_me@2

; 993  :             { f[i] = 3*e2/denom2*ec->deriv[0][i] 
; 994  :                               - 6*e2/denom2/denom2*cross2[i]*vc2->area;

	lea	esi, DWORD PTR [edx-4]
	shr	esi, 2
	add	eax, 240				; 000000f0H
	inc	esi
	lea	ebx, DWORD PTR [esi*4]
	lea	ecx, DWORD PTR [edi+24]
	mov	DWORD PTR _j$[ebp], ebx

; 995  :               for ( j = 0 ; j < SDIM ; j++ )

$LN568@sqcurve_me@2:

; 996  :                 f[i] += 6*vc2->force[j]*ec->deriv2[j][i]/denom2*vc2->area;

	fld	QWORD PTR [ecx-8]
	mov	ebx, DWORD PTR _i$[ebp]
	fmul	ST(0), ST(3)
	add	eax, 192				; 000000c0H
	add	ecx, 32					; 00000020H
	dec	esi
	fmul	QWORD PTR [eax-240]
	fdiv	ST(0), ST(2)
	fmul	QWORD PTR [edi]
	fadd	QWORD PTR _f$[ebp+ebx*8]
	fld	QWORD PTR [ecx-32]
	fmul	ST(0), ST(4)
	fmul	QWORD PTR [eax-192]
	fdiv	ST(0), ST(3)
	fmul	QWORD PTR [edi]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-24]
	fmul	ST(0), ST(4)
	fmul	QWORD PTR [eax-144]
	fdiv	ST(0), ST(3)
	fmul	QWORD PTR [edi]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-16]
	fmul	ST(0), ST(4)
	fmul	QWORD PTR [eax-96]
	fdiv	ST(0), ST(3)
	fmul	QWORD PTR [edi]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _f$[ebp+ebx*8]
	jne	SHORT $LN568@sqcurve_me@2

; 993  :             { f[i] = 3*e2/denom2*ec->deriv[0][i] 
; 994  :                               - 6*e2/denom2/denom2*cross2[i]*vc2->area;

	mov	esi, DWORD PTR _j$[ebp]
	mov	ecx, ebx
$LC567@sqcurve_me@2:

; 995  :               for ( j = 0 ; j < SDIM ; j++ )

	cmp	esi, edx
	jge	SHORT $LN37@sqcurve_me@2
	mov	ebx, DWORD PTR _ec$89777[ebp]
	lea	eax, DWORD PTR [edi+esi*8+16]
	mov	DWORD PTR tv14297[ebp], eax
	lea	eax, DWORD PTR [esi+esi*2+12]
	lea	eax, DWORD PTR [ecx+eax*2]
	lea	eax, DWORD PTR [ebx+eax*8]
	mov	ebx, edx
	sub	ebx, esi
	mov	esi, DWORD PTR tv14297[ebp]
$LC34@sqcurve_me@2:

; 996  :                 f[i] += 6*vc2->force[j]*ec->deriv2[j][i]/denom2*vc2->area;

	fld	QWORD PTR [esi]
	add	eax, 48					; 00000030H
	fmul	ST(0), ST(3)
	add	esi, 8
	dec	ebx
	fmul	QWORD PTR [eax-48]
	fdiv	ST(0), ST(2)
	fmul	QWORD PTR [edi]
	fadd	QWORD PTR _f$[ebp+ecx*8]
	fstp	QWORD PTR _f$[ebp+ecx*8]
	jne	SHORT $LC34@sqcurve_me@2

; 997  :             }
; 998  :             else f[i] = 0.0;

	jmp	SHORT $LN37@sqcurve_me@2
$LN35@sqcurve_me@2:
	fst	QWORD PTR _f$[ebp+ecx*8]
$LN37@sqcurve_me@2:

; 991  :           for ( i = 0 ; i < SDIM ; i++ )

	inc	ecx
	mov	DWORD PTR _i$[ebp], ecx
	cmp	ecx, edx
	jl	$LN641@sqcurve_me@2
	fstp	ST(1)
	fstp	ST(1)

; 999  :           }
; 1000 :          else  /* squared curvature */

	jmp	$LN1021@sqcurve_me@2
$LN39@sqcurve_me@2:

; 1001 :           for ( i = 0 ; i < SDIM ; i++ )

	test	edx, edx
	jle	$LN1021@sqcurve_me@2
	mov	eax, DWORD PTR _ec$89777[ebp]
	fmul	QWORD PTR __real@bff5555555555555
	fld	QWORD PTR __real@4000000000000000
	lea	esi, DWORD PTR _f$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv13333[ebp], eax
	jmp	SHORT $LN29@sqcurve_me@2
$LN642@sqcurve_me@2:
	mov	eax, DWORD PTR tv13333[ebp]
$LN29@sqcurve_me@2:
	lea	eax, DWORD PTR [eax+ecx*8]

; 1002 :           { f[i] = -4/3.0*e2*ec->deriv[0][i]/vc2->area*3.0/4;

	fld	ST(1)
	fmul	QWORD PTR _f$[ebp+eax]
	lea	eax, DWORD PTR _f$[ebp+eax]

; 1003 :             for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	fdiv	QWORD PTR [edi]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(4)
	fstp	QWORD PTR _f$[ebp+ecx*8]
	cmp	edx, 4
	jl	$LC570@sqcurve_me@2

; 1002 :           { f[i] = -4/3.0*e2*ec->deriv[0][i]/vc2->area*3.0/4;

	lea	esi, DWORD PTR [edx-4]
	shr	esi, 2
	add	eax, 240				; 000000f0H
	inc	esi
	lea	ebx, DWORD PTR [esi*4]
	lea	ecx, DWORD PTR [edi+24]
	mov	DWORD PTR _j$[ebp], ebx

; 1003 :             for ( j = 0 ; j < SDIM ; j++ )

$LN571@sqcurve_me@2:

; 1004 :               f[i] += 2*vc2->force[j]*ec->deriv2[j][i]/vc2->area*3.0/4;

	fld	QWORD PTR [ecx-8]
	mov	ebx, DWORD PTR _i$[ebp]
	fmul	ST(0), ST(1)
	add	eax, 192				; 000000c0H
	add	ecx, 32					; 00000020H
	dec	esi
	fmul	QWORD PTR [eax-240]
	fdiv	QWORD PTR [edi]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(4)
	fadd	QWORD PTR _f$[ebp+ebx*8]
	fld	QWORD PTR [ecx-32]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [eax-192]
	fdiv	QWORD PTR [edi]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-24]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [eax-144]
	fdiv	QWORD PTR [edi]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-16]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [eax-96]
	fdiv	QWORD PTR [edi]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _f$[ebp+ebx*8]
	jne	SHORT $LN571@sqcurve_me@2

; 1002 :           { f[i] = -4/3.0*e2*ec->deriv[0][i]/vc2->area*3.0/4;

	mov	esi, DWORD PTR _j$[ebp]
	mov	ecx, ebx
$LC570@sqcurve_me@2:

; 1003 :             for ( j = 0 ; j < SDIM ; j++ )

	cmp	esi, edx
	jge	SHORT $LN28@sqcurve_me@2
	mov	ebx, DWORD PTR _ec$89777[ebp]
	lea	eax, DWORD PTR [edi+esi*8+16]
	mov	DWORD PTR tv15525[ebp], eax
	lea	eax, DWORD PTR [esi+esi*2+12]
	lea	eax, DWORD PTR [ecx+eax*2]
	lea	eax, DWORD PTR [ebx+eax*8]
	mov	ebx, edx
	sub	ebx, esi
	mov	esi, DWORD PTR tv15525[ebp]
$LC26@sqcurve_me@2:

; 1004 :               f[i] += 2*vc2->force[j]*ec->deriv2[j][i]/vc2->area*3.0/4;

	fld	QWORD PTR [esi]
	add	eax, 48					; 00000030H
	fmul	ST(0), ST(1)
	add	esi, 8
	dec	ebx
	fmul	QWORD PTR [eax-48]
	fdiv	QWORD PTR [edi]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(4)
	fadd	QWORD PTR _f$[ebp+ecx*8]
	fstp	QWORD PTR _f$[ebp+ecx*8]
	jne	SHORT $LC26@sqcurve_me@2
$LN28@sqcurve_me@2:

; 1001 :           for ( i = 0 ; i < SDIM ; i++ )

	inc	ecx
	mov	DWORD PTR _i$[ebp], ecx
	cmp	ecx, edx
	jl	$LN642@sqcurve_me@2

; 1003 :             for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(3)
$LN1021@sqcurve_me@2:
	fstp	ST(2)
$LN932@sqcurve_me@2:
	fstp	ST(1)
$LN27@sqcurve_me@2:

; 1005 :           }
; 1006 :   
; 1007 :          if ( h0_flag && !(mi->gen_method == normal_sq_mean_curvature_mi) )

	cmp	DWORD PTR _h0_flag, 0
	je	$LN23@sqcurve_me@2
	mov	ecx, DWORD PTR _normal_sq_mean_curvature_mi
	cmp	DWORD PTR tv5429[ebp], ecx
	je	$LN23@sqcurve_me@2

; 1008 :           { REAL fd[MAXCOORD],net;
; 1009 :             fe = get_edge_fe(e_id);

	mov	edx, DWORD PTR _web+124
	fstp	ST(0)
	mov	eax, DWORD PTR tv5623[ebp]
	mov	eax, DWORD PTR [eax+edx]
	test	eax, eax
	jne	SHORT $LN386@sqcurve_me@2
	xor	ebx, ebx
	jmp	SHORT $LN387@sqcurve_me@2
$LN386@sqcurve_me@2:
	cmp	DWORD PTR tv5620[ebp], 0
	mov	eax, DWORD PTR [eax+28]
	je	SHORT $LN620@sqcurve_me@2
	xor	eax, 134217728				; 08000000H
$LN620@sqcurve_me@2:
	mov	ebx, eax
$LN387@sqcurve_me@2:

; 1010 :             get_edge_side(get_fe_edge(get_next_edge(fe)),wa);

	mov	ecx, DWORD PTR _web+460
	mov	eax, ebx
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR tv5669[ebp], eax
	mov	esi, ebx
	je	SHORT $LN390@sqcurve_me@2
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	edx, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN389@sqcurve_me@2
$LN390@sqcurve_me@2:
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [eax+32]
$LN389@sqcurve_me@2:
	lea	edx, DWORD PTR _wa$89786[ebp]
	push	edx
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	push	eax
	call	_get_edge_side

; 1011 :             get_edge_side(get_fe_edge(get_next_edge(get_next_facet(fe))),wb);

	mov	ecx, DWORD PTR _web+460
	add	esp, 8
	cmp	DWORD PTR tv5669[ebp], 0
	je	SHORT $LN396@sqcurve_me@2
	mov	edx, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN395@sqcurve_me@2
$LN396@sqcurve_me@2:
	mov	eax, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [eax+40]
$LN395@sqcurve_me@2:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN400@sqcurve_me@2
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN399@sqcurve_me@2
$LN400@sqcurve_me@2:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+32]
$LN399@sqcurve_me@2:
	lea	edx, DWORD PTR _wb$89787[ebp]
	push	edx
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	push	eax
	call	_get_edge_side
	add	esp, 8

; 1012 :             f_id = get_fe_facet(fe);

	test	ebx, 268435456				; 10000000H
	jne	SHORT $LN406@sqcurve_me@2
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN405@sqcurve_me@2
$LN406@sqcurve_me@2:
	cmp	DWORD PTR tv5669[ebp], 0
	mov	edx, DWORD PTR _web+460
	mov	eax, DWORD PTR [esi+edx]
	mov	eax, DWORD PTR [eax+24]
	je	SHORT $LN405@sqcurve_me@2
	xor	eax, 134217728				; 08000000H
$LN405@sqcurve_me@2:

; 1013 :             if ( inverted(f_id) )
; 1014 :               for ( i = 0 ; i < SDIM ; i++ ) w[i] = wb[i] - wa[i];

	mov	ecx, DWORD PTR _web+616
	test	eax, 134217728				; 08000000H
	je	$LN22@sqcurve_me@2
	xor	eax, eax
	cmp	ecx, 4
	jl	$LC573@sqcurve_me@2
	lea	edx, DWORD PTR [ecx-3]
	npad	1
$LL574@sqcurve_me@2:
	fld	QWORD PTR _wb$89787[ebp+eax*8]
	add	eax, 4
	fsub	QWORD PTR _wa$89786[ebp+eax*8-32]
	fstp	QWORD PTR _w$89788[ebp+eax*8-32]
	fld	QWORD PTR _wb$89787[ebp+eax*8-24]
	fsub	QWORD PTR _wa$89786[ebp+eax*8-24]
	fstp	QWORD PTR _w$89788[ebp+eax*8-24]
	fld	QWORD PTR _wb$89787[ebp+eax*8-16]
	fsub	QWORD PTR _wa$89786[ebp+eax*8-16]
	fstp	QWORD PTR _w$89788[ebp+eax*8-16]
	fld	QWORD PTR _wb$89787[ebp+eax*8-8]
	fsub	QWORD PTR _wa$89786[ebp+eax*8-8]
	fstp	QWORD PTR _w$89788[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LL574@sqcurve_me@2
$LC573@sqcurve_me@2:
	cmp	eax, ecx
	jge	$LN575@sqcurve_me@2
	npad	13
$LC21@sqcurve_me@2:
	fld	QWORD PTR _wb$89787[ebp+eax*8]
	inc	eax
	fsub	QWORD PTR _wa$89786[ebp+eax*8-8]
	fstp	QWORD PTR _w$89788[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LC21@sqcurve_me@2

; 1015 :             else for ( i = 0 ; i < SDIM ; i++ ) w[i] = wa[i] - wb[i];

	jmp	$LN575@sqcurve_me@2
$LN22@sqcurve_me@2:
	xor	eax, eax
	cmp	ecx, 4
	jl	SHORT $LC576@sqcurve_me@2
	lea	edx, DWORD PTR [ecx-3]
	npad	7
$LL577@sqcurve_me@2:
	fld	QWORD PTR _wa$89786[ebp+eax*8]
	add	eax, 4
	fsub	QWORD PTR _wb$89787[ebp+eax*8-32]
	fstp	QWORD PTR _w$89788[ebp+eax*8-32]
	fld	QWORD PTR _wa$89786[ebp+eax*8-24]
	fsub	QWORD PTR _wb$89787[ebp+eax*8-24]
	fstp	QWORD PTR _w$89788[ebp+eax*8-24]
	fld	QWORD PTR _wa$89786[ebp+eax*8-16]
	fsub	QWORD PTR _wb$89787[ebp+eax*8-16]
	fstp	QWORD PTR _w$89788[ebp+eax*8-16]
	fld	QWORD PTR _wa$89786[ebp+eax*8-8]
	fsub	QWORD PTR _wb$89787[ebp+eax*8-8]
	fstp	QWORD PTR _w$89788[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LL577@sqcurve_me@2
$LC576@sqcurve_me@2:
	cmp	eax, ecx
	jge	SHORT $LN575@sqcurve_me@2
	npad	1
$LC17@sqcurve_me@2:
	fld	QWORD PTR _wa$89786[ebp+eax*8]
	inc	eax
	fsub	QWORD PTR _wb$89787[ebp+eax*8-8]
	fstp	QWORD PTR _w$89788[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LC17@sqcurve_me@2
$LN575@sqcurve_me@2:

; 1016 :             cross_prod(vc2->force,w,aw);

	lea	ecx, DWORD PTR _aw$89789[ebp]
	push	ecx
	lea	edx, DWORD PTR _w$89788[ebp]
	push	edx
	lea	eax, DWORD PTR [edi+16]
	push	eax
	call	_cross_prod

; 1017 :             cross_prod(vc2->normal,w,vw);

	lea	eax, DWORD PTR _vw$89790[ebp]
	push	eax
	lea	ecx, DWORD PTR _w$89788[ebp]
	push	ecx
	lea	edx, DWORD PTR [edi+416]
	push	edx
	call	_cross_prod

; 1018 :             for ( i = 0 ; i < SDIM ; i++ )

	mov	edx, DWORD PTR _web+616
	xor	eax, eax
	add	esp, 24					; 00000018H
	mov	DWORD PTR _i$[ebp], eax
	test	edx, edx
	jle	$LN612@sqcurve_me@2
	fld	QWORD PTR [edi+64]
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR __real@4008000000000000
$LN14@sqcurve_me@2:

; 1019 :             { for ( j = 0, fd[i] = 0.0 ; j < SDIM ; j++ )

	fldz
	xor	ecx, ecx
	fstp	QWORD PTR _fd$89996[ebp+eax*8]
	cmp	edx, 4
	jl	$LN619@sqcurve_me@2
	mov	esi, DWORD PTR _ec$89777[ebp]
	lea	eax, DWORD PTR [esi+eax*8+240]
	lea	esi, DWORD PTR [edx-4]
	shr	esi, 2
	inc	esi
	lea	ebx, DWORD PTR [esi*4]
	lea	ecx, DWORD PTR [edi+424]
	mov	DWORD PTR _j$[ebp], ebx
$LN580@sqcurve_me@2:

; 1020 :                  fd[i] += vc2->normal[j]*ec->deriv2[j][i];

	fld	QWORD PTR [eax-48]
	mov	ebx, DWORD PTR _i$[ebp]
	fmul	QWORD PTR [ecx-8]
	add	eax, 192				; 000000c0H
	add	ecx, 32					; 00000020H
	dec	esi
	fadd	QWORD PTR _fd$89996[ebp+ebx*8]
	fld	QWORD PTR [eax-192]
	fmul	QWORD PTR [ecx-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax-144]
	fmul	QWORD PTR [ecx-24]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax-96]
	fmul	QWORD PTR [ecx-16]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _fd$89996[ebp+ebx*8]
	jne	SHORT $LN580@sqcurve_me@2

; 1019 :             { for ( j = 0, fd[i] = 0.0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR _j$[ebp]
	mov	eax, ebx
$LN619@sqcurve_me@2:
	cmp	ecx, edx
	jge	SHORT $LN621@sqcurve_me@2
	mov	ebx, DWORD PTR _ec$89777[ebp]
	lea	esi, DWORD PTR [edi+ecx*8+416]
	mov	DWORD PTR tv17284[ebp], esi
	lea	esi, DWORD PTR [ecx+ecx*2+12]
	lea	esi, DWORD PTR [eax+esi*2]
	lea	ebx, DWORD PTR [ebx+esi*8]
	mov	esi, edx
	sub	esi, ecx
	mov	ecx, DWORD PTR tv17284[ebp]
$LC11@sqcurve_me@2:

; 1020 :                  fd[i] += vc2->normal[j]*ec->deriv2[j][i];

	fld	QWORD PTR [ebx]
	add	ebx, 48					; 00000030H
	fmul	QWORD PTR [ecx]
	add	ecx, 8
	dec	esi
	fadd	QWORD PTR _fd$89996[ebp+eax*8]
	fstp	QWORD PTR _fd$89996[ebp+eax*8]
	jne	SHORT $LC11@sqcurve_me@2
$LN621@sqcurve_me@2:

; 1021 :               fd[i] = (fd[i]/vc2->norm
; 1022 :                           + aw[i]/vc2->norm - vc2->f*2*vw[i]/vc2->norm/vc2->norm)*3;

	fld	QWORD PTR _aw$89789[ebp+eax*8]

; 1023 :               ad[i] = ec->deriv[0][i]/3;

	mov	ecx, DWORD PTR _ec$89777[ebp]
	fdiv	QWORD PTR [edi+464]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	fld	QWORD PTR _fd$89996[ebp+eax*8-8]
	fdiv	QWORD PTR [edi+464]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _vw$89790[ebp+eax*8-8]
	fmul	ST(0), ST(4)
	fdiv	QWORD PTR [edi+464]
	fdiv	QWORD PTR [edi+464]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _fd$89996[ebp+eax*8-8]
	fld	QWORD PTR [ecx+eax*8-8]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR _ad$[ebp+eax*8-8]
	cmp	eax, edx
	jl	$LN14@sqcurve_me@2

; 1018 :             for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(2)
	jmp	SHORT $LN12@sqcurve_me@2
$LN612@sqcurve_me@2:
	fld	QWORD PTR __real@4008000000000000
	fld	QWORD PTR __real@4000000000000000
$LN12@sqcurve_me@2:

; 1024 :             }
; 1025 :             area = vc2->area/3;
; 1026 :             a = vc2->a/3;

	fld	QWORD PTR [edi+8]

; 1027 :             for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	fdiv	ST(0), ST(2)
	test	edx, edx
	jle	$LN1001@sqcurve_me@2

; 1024 :             }
; 1025 :             area = vc2->area/3;
; 1026 :             a = vc2->a/3;

	mov	ecx, DWORD PTR _ec$89777[ebp]
	fld	QWORD PTR _selfsim_coeff
	mov	esi, DWORD PTR _grad$[ebp]
	add	ecx, 480				; 000001e0H
$LN8@sqcurve_me@2:

; 1028 :             {
; 1029 :               net = 2*vc2->term*fd[i]*a 
; 1030 :                       + vc2->term*vc2->term*(ad[i]+ec->aderiv[0][i]/3);
; 1031 :               if ( self_similar_flag )

	cmp	DWORD PTR _self_similar_flag, 0
	fld	QWORD PTR [edi+536]
	fld	QWORD PTR [ecx-384]
	fdiv	ST(0), ST(5)
	fadd	QWORD PTR _ad$[ebp+eax*8]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	fld	QWORD PTR [edi+536]
	fmul	ST(0), ST(4)
	fmul	QWORD PTR _fd$89996[ebp+eax*8]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	je	SHORT $LN5@sqcurve_me@2

; 1032 :                 net += 2*vc2->term*(-selfsim_coeff*ec->volderiv[0][i])*a;

	fld	ST(1)
	fmul	QWORD PTR [ecx]
	fchs
	fld	QWORD PTR [edi+536]
	fmul	ST(0), ST(5)
	fmulp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
$LN5@sqcurve_me@2:

; 1033 :               grad[i] += net;

	fadd	QWORD PTR [esi+eax*8]
	inc	eax
	add	ecx, 8
	fstp	QWORD PTR [esi+eax*8-8]
	mov	edx, DWORD PTR _web+616
	cmp	eax, edx
	jl	SHORT $LN8@sqcurve_me@2

; 1027 :             for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(1)
$LN977@sqcurve_me@2:
	fstp	ST(1)

; 1034 :             }
; 1035 :           }
; 1036 :          else

	jmp	$LN1022@sqcurve_me@2
$LN23@sqcurve_me@2:

; 1037 :           for ( i = 0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	test	edx, edx
	jle	$LN601@sqcurve_me@2
	mov	eax, DWORD PTR _grad$[ebp]
	lea	esi, DWORD PTR _f$[ebp]
	sub	esi, eax
$LN3@sqcurve_me@2:

; 1038 :             grad[i] += f[i];

	fld	QWORD PTR [eax+esi]
	inc	ecx
	fadd	QWORD PTR [eax]
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	mov	edx, DWORD PTR _web+616
	cmp	ecx, edx
	jl	SHORT $LN3@sqcurve_me@2

; 1037 :           for ( i = 0 ; i < SDIM ; i++ )

	jmp	$LN601@sqcurve_me@2
$LN893@sqcurve_me@2:

; 979  :       if ( (!(get_vattr(headv) & FIXED) ||(mi->flags & IGNORE_FIXED))
; 980  :      && (!(get_vattr(headv) & BOUNDARY) ||(mi->flags & IGNORE_CONSTR))
; 981  :       )

	fstp	ST(2)
	fstp	ST(1)
	jmp	$LN601@sqcurve_me@2
_sqcurve_method_grad ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@PPFAEFFP@Method?5sqcurve_string?5only?5for?5L@ ; `string'
PUBLIC	_sqcurve_string_init
EXTRN	_sqcurve_energy_string_init:PROC
;	COMDAT ??_C@_0CO@PPFAEFFP@Method?5sqcurve_string?5only?5for?5L@
CONST	SEGMENT
??_C@_0CO@PPFAEFFP@Method?5sqcurve_string?5only?5for?5L@ DB 'Method sqcur'
	DB	've_string only for LINEAR model.', 0aH, 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _sqcurve_string_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_sqcurve_string_init PROC				; COMDAT

; 1063 :   if ( web.modeltype != LINEAR )

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN1@sqcurve_st

; 1064 :     kb_error(2864,"Method sqcurve_string only for LINEAR model.\n",
; 1065 :        RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CO@PPFAEFFP@Method?5sqcurve_string?5only?5for?5L@
	push	2864					; 00000b30H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@sqcurve_st:

; 1066 : 
; 1067 :   sqcurve_energy_string_init(); /* sets up curve_power */

	jmp	_sqcurve_energy_string_init
_sqcurve_string_init ENDP
_TEXT	ENDS
PUBLIC	__real@4042000000000000
PUBLIC	__real@4028000000000000
PUBLIC	_sqcurve_string_value
EXTRN	_curve_power:QWORD
EXTRN	__CIpow:PROC
;	COMDAT __real@4042000000000000
CONST	SEGMENT
__real@4042000000000000 DQ 04042000000000000r	; 36
CONST	ENDS
;	COMDAT __real@4028000000000000
CONST	SEGMENT
__real@4028000000000000 DQ 04028000000000000r	; 12
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _sqcurve_string_value
_TEXT	SEGMENT
_a2$ = -24						; size = 8
_s2$ = -24						; size = 8
_s1$ = -16						; size = 8
_power$ = -8						; size = 8
_v_info$ = 8						; size = 4
_sqcurve_string_value PROC				; COMDAT

; 1080 : {

	push	ebp
	mov	ebp, esp

; 1081 :   REAL s1,s2,s1s2;  /* edge lengths */
; 1082 :   REAL *side1 = v_info->sides[0][0],*side2 = v_info->sides[0][1];

	mov	ecx, DWORD PTR _v_info$[ebp]
	mov	eax, DWORD PTR [ecx+1276]
	mov	eax, DWORD PTR [eax]
	sub	esp, 24					; 00000018H
	push	esi
	mov	esi, DWORD PTR [eax]
	push	edi
	mov	edi, DWORD PTR [eax+4]

; 1083 :   REAL energy;
; 1084 :   REAL hh,a1,a2;
; 1085 :   REAL power;
; 1086 :   struct method_instance *mi = METH_INSTANCE(v_info->method);

	mov	eax, DWORD PTR [ecx+8]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list

; 1087 : 
; 1088 :   if ( v_info->vcount < 3 ) return 0.;

	cmp	DWORD PTR [ecx+12], 3
	jge	SHORT $LN5@sqcurve_st@2
	fldz
	pop	edi
	pop	esi

; 1103 : 
; 1104 :   return energy;
; 1105 : } // end sqcurve_string_value()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@sqcurve_st@2:

; 1089 : 
; 1090 :   if ( mi->flags & METH_PARAMETER_1 )

	test	DWORD PTR [eax+140], 8388608		; 00800000H
	je	SHORT $LN4@sqcurve_st@2

; 1091 :      power = mi->parameter_1;

	fld	QWORD PTR [eax+2904]
	jmp	SHORT $LN14@sqcurve_st@2
$LN4@sqcurve_st@2:

; 1092 :   else power = curve_power;

	fld	QWORD PTR _curve_power
$LN14@sqcurve_st@2:

; 1093 :   s1 = sqrt(SDIM_dot(side1,side1));

	mov	ecx, DWORD PTR _web+616
	fstp	QWORD PTR _power$[ebp]
	push	ecx
	push	esi
	push	esi
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR _s1$[ebp]

; 1094 :   s2 = sqrt(SDIM_dot(side2,side2));

	mov	edx, DWORD PTR _web+616
	push	edx
	push	edi
	push	edi
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR _s2$[ebp]

; 1095 :   s1s2 = SDIM_dot(side1,side2);

	mov	eax, DWORD PTR _web+616
	push	eax
	push	edi
	push	esi
	call	_dot

; 1096 : 
; 1097 :   a1 = 1 + s1s2/s1/s2;

	fld	QWORD PTR _s1$[ebp]
	fdiv	ST(1), ST(0)
	add	esp, 12					; 0000000cH
	fld	QWORD PTR _s2$[ebp]
	fdiv	ST(2), ST(0)
	fxch	ST(2)
	fadd	QWORD PTR __real@3ff0000000000000

; 1098 :   a2 = (s1 + s2)/2;

	fxch	ST(2)
	faddp	ST(1), ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _a2$[ebp]

; 1099 :   if ( (a1 <= 0.0) || (a2 == 0.0) ) return 0.0;

	fldz
	fcom	ST(3)
	fnstsw	ax
	test	ah, 1
	je	SHORT $LN12@sqcurve_st@2
	fld	ST(1)
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN12@sqcurve_st@2
	fstp	ST(0)

; 1100 : 
; 1101 :   hh = (2*a1+12*a1*a1/36)/a2/a2;

	fld	ST(2)
	fmul	QWORD PTR __real@4028000000000000
	fmul	ST(0), ST(3)
	fdiv	QWORD PTR __real@4042000000000000
	fxch	ST(3)
	fadd	ST(0), ST(0)
	faddp	ST(3), ST(0)
	fdiv	ST(2), ST(0)
	fdivp	ST(2), ST(0)

; 1102 :   energy = a2*pow(hh,power/2);

	fmul	QWORD PTR _power$[ebp]
	call	__CIpow
	fmul	QWORD PTR _a2$[ebp]
	pop	edi
	pop	esi

; 1103 : 
; 1104 :   return energy;
; 1105 : } // end sqcurve_string_value()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@sqcurve_st@2:

; 1099 :   if ( (a1 <= 0.0) || (a2 == 0.0) ) return 0.0;

	fstp	ST(3)
	pop	edi
	fstp	ST(0)
	pop	esi
	fstp	ST(0)

; 1103 : 
; 1104 :   return energy;
; 1105 : } // end sqcurve_string_value()

	mov	esp, ebp
	pop	ebp
	ret	0
_sqcurve_string_value ENDP
_TEXT	ENDS
PUBLIC	_v_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_sqcurve_string_grad
; Function compile flags: /Ogtp
;	COMDAT _sqcurve_string_grad
_TEXT	SEGMENT
_s$ = -304						; size = 16
_a1$ = -288						; size = 8
_a2$ = -280						; size = 8
_energy$ = -272						; size = 8
_hh$ = -264						; size = 8
tv2080 = -256						; size = 4
tv830 = -252						; size = 8
_term$ = -252						; size = 8
_s1$ = -244						; size = 8
_i$ = -240						; size = 4
_power$ = -236						; size = 8
_v_info$GSCopy$ = -228					; size = 4
_side$ = -224						; size = 8
_s2$ = -224						; size = 8
tv1887 = -216						; size = 4
tv2066 = -212						; size = 4
tv1881 = -208						; size = 4
tv2064 = -204						; size = 4
tv1981 = -200						; size = 4
_a2g$ = -196						; size = 96
_a1g$ = -100						; size = 96
__$ArrayPad$ = -4					; size = 4
_v_info$ = 8						; size = 4
_sqcurve_string_grad PROC				; COMDAT

; 1117 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	mov	esi, DWORD PTR _v_info$[ebp]

; 1118 :   REAL s1,s2,s1s2;  /* edge lengths */
; 1119 :   REAL *side1 = v_info->sides[0][0],*side2 = v_info->sides[0][1];

	mov	eax, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [eax]
	mov	ebx, DWORD PTR [eax+4]
	push	edi
	mov	edi, DWORD PTR [eax]

; 1120 :   int  i,k;
; 1121 :   REAL hh,a1,a2,energy;
; 1122 :   REAL a1g[2][MAXCOORD],a2g[2][MAXCOORD];
; 1123 :   REAL s[2];
; 1124 :   REAL *side[2];
; 1125 :   REAL term; /* common factor */
; 1126 :   REAL power;
; 1127 :   struct method_instance *mi = METH_INSTANCE(v_info->method);

	mov	eax, DWORD PTR [esi+8]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list

; 1128 : 
; 1129 :   if ( v_info->vcount < 3 ) return 0.0;

	cmp	DWORD PTR [esi+12], 3

; 1155 :         { a1g[k][i] = 2*side[1-k][i]/s1/s2 - coeff*side[k][i];

	mov	DWORD PTR _v_info$GSCopy$[ebp], esi
	jl	$LN76@sqcurve_st@3

; 1130 : 
; 1131 :   if ( mi->flags & METH_PARAMETER_1 )

	test	DWORD PTR [eax+140], 8388608		; 00800000H
	je	SHORT $LN20@sqcurve_st@3

; 1132 :      power = mi->parameter_1;

	fld	QWORD PTR [eax+2904]
	jmp	SHORT $LN75@sqcurve_st@3
$LN20@sqcurve_st@3:

; 1133 :   else power = curve_power;

	fld	QWORD PTR _curve_power
$LN75@sqcurve_st@3:

; 1134 : 
; 1135 :   s1 = sqrt(SDIM_dot(side1,side1));

	mov	ecx, DWORD PTR _web+616
	fstp	QWORD PTR _power$[ebp]
	push	ecx
	push	edi
	push	edi
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR _s1$[ebp]

; 1136 :   s2 = sqrt(SDIM_dot(side2,side2));

	mov	edx, DWORD PTR _web+616
	push	edx
	push	ebx
	push	ebx
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR _s2$[ebp]

; 1137 :   s1s2 = SDIM_dot(side1,side2);

	mov	eax, DWORD PTR _web+616
	push	eax
	push	ebx
	push	edi
	call	_dot

; 1138 : 
; 1139 :   a1 = 2 + 2*s1s2/s1/s2;

	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	add	esp, 12					; 0000000cH
	fxch	ST(1)
	fst	QWORD PTR tv830[ebp]
	fld	QWORD PTR _s1$[ebp]
	fdiv	ST(1), ST(0)
	fld	QWORD PTR _s2$[ebp]
	fdiv	ST(2), ST(0)
	fxch	ST(2)
	fadd	ST(0), ST(3)
	fst	QWORD PTR _a1$[ebp]

; 1140 :   a2 = (s1 + s2)/2;

	fld	ST(2)
	fadd	ST(0), ST(2)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _a2$[ebp]

; 1141 :   if (a2 == 0.0) return 0.0;

	fld	ST(0)
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN18@sqcurve_st@3
	fstp	ST(1)
	fstp	ST(2)
	fstp	ST(2)
	fstp	ST(2)
	fstp	ST(1)
	fstp	ST(0)
$LN76@sqcurve_st@3:
	fldz
	pop	edi
	pop	esi
	pop	ebx

; 1168 :      }
; 1169 :   return energy;
; 1170 : 
; 1171 : } // end sqcurve_string_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@sqcurve_st@3:

; 1142 : 
; 1143 :   hh = (a1+3*a1*a1/36)/a2/a2;

	fld	ST(2)
	fmul	QWORD PTR __real@4008000000000000
	fmul	ST(0), ST(3)
	fdiv	QWORD PTR __real@4042000000000000
	faddp	ST(3), ST(0)
	fdiv	ST(2), ST(0)
	fdivp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _hh$[ebp]

; 1144 :   if ( hh <= 0.0 )

	fldz
	fcom	ST(1)
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN43@sqcurve_st@3
	fstp	ST(1)

; 1145 :   { hh = 0.0;

	fst	QWORD PTR _hh$[ebp]

; 1146 :     energy = 0.0;

	fst	QWORD PTR _energy$[ebp]

; 1147 :   }
; 1148 :   else

	jmp	SHORT $LN16@sqcurve_st@3
$LN43@sqcurve_st@3:

; 1144 :   if ( hh <= 0.0 )

	fstp	ST(3)
	fstp	ST(3)
	fstp	ST(3)
	fstp	ST(0)

; 1149 :     energy = a2*pow(hh,power/2);

	fld	QWORD PTR _power$[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	call	__CIpow
	fmul	QWORD PTR _a2$[ebp]
	fstp	QWORD PTR _energy$[ebp]
	fld	QWORD PTR _s2$[ebp]
	fld	QWORD PTR _s1$[ebp]
	fldz
	fld	QWORD PTR __real@3fe0000000000000
	fld	QWORD PTR __real@4000000000000000
	fxch	ST(4)
	fxch	ST(3)
	fxch	ST(2)
$LN16@sqcurve_st@3:

; 1150 : 
; 1151 :   side[0] = side1; side[1] = side2; s[0] = s1; s[1] = s2;

	xor	eax, eax
	fxch	ST(2)
	lea	ecx, DWORD PTR _side$[ebp]
	fst	QWORD PTR _s$[ebp]
	mov	DWORD PTR tv1881[ebp], eax
	fxch	ST(3)
	mov	DWORD PTR tv1887[ebp], eax
	fst	QWORD PTR _s$[ebp+8]
	mov	DWORD PTR tv1981[ebp], ecx
	lea	eax, DWORD PTR _side$[ebp+4]
	lea	ecx, DWORD PTR _s$[ebp+8]
	mov	DWORD PTR _side$[ebp], edi
	mov	DWORD PTR _side$[ebp+4], ebx
	lea	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR tv2064[ebp], eax
	mov	DWORD PTR tv2066[ebp], ecx
	mov	edi, 4
$LN38@sqcurve_st@3:

; 1153 :   { REAL coeff = 2*s1s2/s[k]/s[k]/s[k]/s[1-k];

	fld	QWORD PTR tv830[ebp]
	mov	eax, DWORD PTR tv2066[ebp]
	fdiv	QWORD PTR [edx]

; 1154 :      for ( i = 0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	fdiv	QWORD PTR [edx]
	fdiv	QWORD PTR [edx]
	fdiv	QWORD PTR [eax]
	cmp	DWORD PTR _web+616, edi
	jl	$LC35@sqcurve_st@3
	mov	ecx, DWORD PTR tv2064[ebp]
	mov	esi, DWORD PTR [ecx]
	mov	eax, DWORD PTR tv1981[ebp]
	mov	ebx, DWORD PTR [eax]

; 1156 :           a2g[k][i] = 0.5*side[k][i]/s[k];

	mov	ecx, DWORD PTR tv1887[ebp]
	lea	edi, DWORD PTR [esi+24]
	sub	esi, ebx
	mov	DWORD PTR tv2080[ebp], esi
	mov	esi, DWORD PTR _web+616
	add	esi, -4					; fffffffcH
	shr	esi, 2
	lea	eax, DWORD PTR [ebx+8]
	inc	esi
	lea	ebx, DWORD PTR [esi*4]
	mov	DWORD PTR _i$[ebp], ebx
	mov	ebx, DWORD PTR tv2080[ebp]
$LN36@sqcurve_st@3:
	fld	QWORD PTR [edi-24]
	add	eax, 32					; 00000020H
	fmul	ST(0), ST(6)
	add	edi, 32					; 00000020H
	add	ecx, 32					; 00000020H
	dec	esi
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(2)
	fld	QWORD PTR [eax-40]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _a1g$[ebp+ecx-32]
	fld	QWORD PTR [eax-40]
	fmul	ST(0), ST(3)
	fdiv	QWORD PTR [edx]
	fstp	QWORD PTR _a2g$[ebp+ecx-32]
	fld	QWORD PTR [eax+ebx-32]
	fmul	ST(0), ST(6)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(2)
	fld	QWORD PTR [eax-32]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _a1g$[ebp+ecx-24]
	fld	QWORD PTR [eax-32]
	fmul	ST(0), ST(3)
	fdiv	QWORD PTR [edx]
	fstp	QWORD PTR _a2g$[ebp+ecx-24]
	fld	QWORD PTR [edi-40]
	fmul	ST(0), ST(6)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(2)
	fld	QWORD PTR [eax-24]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _a1g$[ebp+ecx-16]
	fld	QWORD PTR [eax-24]
	fmul	ST(0), ST(3)
	fdiv	QWORD PTR [edx]
	fstp	QWORD PTR _a2g$[ebp+ecx-16]
	fld	QWORD PTR [edi-32]
	fmul	ST(0), ST(6)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(2)
	fld	QWORD PTR [eax-16]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _a1g$[ebp+ecx-8]
	fld	QWORD PTR [eax-16]
	fmul	ST(0), ST(3)
	fdiv	QWORD PTR [edx]
	fstp	QWORD PTR _a2g$[ebp+ecx-8]
	jne	$LN36@sqcurve_st@3

; 1153 :   { REAL coeff = 2*s1s2/s[k]/s[k]/s[k]/s[1-k];

	mov	esi, DWORD PTR _v_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
$LC35@sqcurve_st@3:

; 1154 :      for ( i = 0 ; i < SDIM ; i++ )

	cmp	ecx, DWORD PTR _web+616
	jge	SHORT $LN54@sqcurve_st@3
	mov	eax, DWORD PTR tv1981[ebp]
	mov	edi, DWORD PTR [eax]
	mov	eax, DWORD PTR tv1881[ebp]
	mov	ebx, DWORD PTR tv2064[ebp]
	mov	ebx, DWORD PTR [ebx]
	add	eax, ecx
	add	eax, eax
	lea	esi, DWORD PTR [edi+ecx*8]
	add	eax, eax
	sub	ebx, edi
	mov	edi, DWORD PTR _web+616
	add	eax, eax
	sub	edi, ecx
$LC12@sqcurve_st@3:

; 1155 :         { a1g[k][i] = 2*side[1-k][i]/s1/s2 - coeff*side[k][i];

	fld	QWORD PTR [esi+ebx]
	add	esi, 8
	fmul	ST(0), ST(6)
	add	eax, 8
	dec	edi
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(2)
	fld	QWORD PTR [esi-8]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _a1g$[ebp+eax-8]

; 1156 :           a2g[k][i] = 0.5*side[k][i]/s[k];

	fld	QWORD PTR [esi-8]
	fmul	ST(0), ST(3)
	fdiv	QWORD PTR [edx]
	fstp	QWORD PTR _a2g$[ebp+eax-8]
	jne	SHORT $LC12@sqcurve_st@3

; 1154 :      for ( i = 0 ; i < SDIM ; i++ )

	mov	esi, DWORD PTR _v_info$GSCopy$[ebp]
$LN54@sqcurve_st@3:

; 1152 :   for ( k = 0 ; k < 2 ; k++ )

	mov	eax, DWORD PTR tv1887[ebp]

; 1154 :      for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)
	sub	DWORD PTR tv2066[ebp], 8
	add	DWORD PTR tv1881[ebp], 6
	mov	edi, 4
	sub	DWORD PTR tv2064[ebp], edi
	add	DWORD PTR tv1981[ebp], edi
	add	eax, 48					; 00000030H
	add	edx, 8
	mov	DWORD PTR tv1887[ebp], eax
	cmp	eax, 96					; 00000060H
	jl	$LN38@sqcurve_st@3

; 1157 :         }
; 1158 :   }
; 1159 :   for ( i = 0 ; i < SDIM ; i++ ) v_info->grad[0][i] = 0.0;

	fstp	ST(3)
	xor	eax, eax
	fstp	ST(2)
	fstp	ST(2)
	cmp	DWORD PTR _web+616, eax
	jg	SHORT $LN9@sqcurve_st@3
	fstp	ST(1)
	jmp	SHORT $LN7@sqcurve_st@3
$LN64@sqcurve_st@3:
	fxch	ST(1)
$LN9@sqcurve_st@3:
	mov	ecx, DWORD PTR [esi+1336]
	fxch	ST(1)
	mov	edx, DWORD PTR [ecx]
	fst	QWORD PTR [edx+eax*8]
	inc	eax
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN64@sqcurve_st@3
	fstp	ST(0)
$LN7@sqcurve_st@3:

; 1160 :   term = a2*pow(hh,power/2-1); 

	fmul	QWORD PTR _power$[ebp]
	fsub	QWORD PTR __real@3ff0000000000000
	fld	QWORD PTR _hh$[ebp]
	fxch	ST(1)
	call	__CIpow
	fld	QWORD PTR _a2$[ebp]
	fmul	ST(1), ST(0)
	xor	edi, edi
	fxch	ST(1)
	xor	edx, edx
	fstp	QWORD PTR _term$[ebp]
	fld	QWORD PTR _a1$[ebp]
	fld	QWORD PTR _energy$[ebp]
	fld	QWORD PTR __real@4042000000000000
$LN37@sqcurve_st@3:

; 1162 :      for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	$LN5@sqcurve_st@3
	fld	ST(2)
	fmul	QWORD PTR __real@4018000000000000
	fld	ST(0)
	fdiv	ST(0), ST(2)
	fadd	QWORD PTR __real@3ff0000000000000
	fxch	ST(1)
	fmul	ST(0), ST(4)
	fdivrp	ST(2), ST(0)
	fld	ST(3)
	fadd	ST(0), ST(0)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fld	QWORD PTR _term$[ebp]
	fmul	QWORD PTR _power$[ebp]
	fmul	QWORD PTR __real@3fe0000000000000
$LN3@sqcurve_st@3:
	lea	ebx, DWORD PTR [edx+eax*8]

; 1163 :      { REAL f;
; 1164 :         f = a2g[k][i]*energy/a2 + term*power/2
; 1165 :               *(a1g[k][i]*(1+6*a1/36)/a2/a2 - (2*a1+6*a1*a1/36)/a2/a2/a2*a2g[k][i]);

	fld	QWORD PTR _a1g$[ebp+ebx]
	lea	ecx, DWORD PTR [edx+eax*8]
	fmul	ST(0), ST(3)
	lea	ecx, DWORD PTR _a2g$[ebp+ecx]
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(6)
	fld	ST(2)
	fmul	QWORD PTR [ecx]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fld	QWORD PTR [ecx]

; 1166 :         v_info->grad[k+1][i] = f; 

	mov	ecx, DWORD PTR [esi+1336]
	fmul	ST(0), ST(5)
	mov	ecx, DWORD PTR [edi+ecx+4]
	fdiv	ST(0), ST(7)
	faddp	ST(1), ST(0)
	fst	QWORD PTR [ecx+eax*8]

; 1167 :         v_info->grad[0][i] += -f; 

	mov	ecx, DWORD PTR [esi+1336]
	mov	ecx, DWORD PTR [ecx]
	fsubr	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN3@sqcurve_st@3

; 1162 :      for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(2)
	fstp	ST(0)
	fstp	ST(0)
	fld	QWORD PTR __real@4042000000000000
$LN5@sqcurve_st@3:

; 1161 :   for ( k = 0 ; k < 2 ; k++ )

	add	edx, 48					; 00000030H
	add	edi, 4
	cmp	edx, 96					; 00000060H
	jl	$LN37@sqcurve_st@3

; 1168 :      }
; 1169 :   return energy;
; 1170 : 
; 1171 : } // end sqcurve_string_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(3)
	pop	edi
	fstp	ST(1)
	pop	esi
	fstp	ST(1)
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_sqcurve_string_grad ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DD@COKPNKMM@Hessian?5not?5implemented?5for?5curv@ ; `string'
PUBLIC	_v_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_sqcurve_string_hess
;	COMDAT ??_C@_0DD@COKPNKMM@Hessian?5not?5implemented?5for?5curv@
CONST	SEGMENT
??_C@_0DD@COKPNKMM@Hessian?5not?5implemented?5for?5curv@ DB 'Hessian not '
	DB	'implemented for curvature_power != 2.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _sqcurve_string_hess
_TEXT	SEGMENT
_a1$ = -2696						; size = 8
_energy$ = -2688					; size = 8
tv4097 = -2680						; size = 8
tv4120 = -2672						; size = 8
tv10774 = -2664						; size = 8
tv3950 = -2656						; size = 8
tv4311 = -2648						; size = 8
_a2$ = -2640						; size = 8
_s1$ = -2632						; size = 8
_s$ = -2624						; size = 16
tv3948 = -2608						; size = 8
_termc$90145 = -2600					; size = 8
_s2$ = -2592						; size = 8
_s1s2$ = -2584						; size = 8
tv10238 = -2576						; size = 4
_h$ = -2572						; size = 4
_side$ = -2568						; size = 8
tv12052 = -2560						; size = 4
tv9330 = -2560						; size = 4
tv8789 = -2560						; size = 4
tv10414 = -2556						; size = 4
_kk$ = -2556						; size = 4
tv12034 = -2552						; size = 4
tv10878 = -2552						; size = 4
tv12263 = -2548						; size = 4
tv10904 = -2548						; size = 4
tv7222 = -2548						; size = 4
tv5845 = -2548						; size = 4
tv12178 = -2544						; size = 4
tv10009 = -2544						; size = 4
tv5153 = -2544						; size = 4
tv11945 = -2540						; size = 4
tv10660 = -2540						; size = 4
_v_info$GSCopy$ = -2540					; size = 4
tv10412 = -2536						; size = 4
tv5215 = -2536						; size = 4
tv10795 = -2532						; size = 4
tv9783 = -2532						; size = 4
tv8478 = -2532						; size = 4
tv6096 = -2532						; size = 4
tv10656 = -2528						; size = 4
tv5147 = -2528						; size = 4
tv12030 = -2524						; size = 4
tv10662 = -2524						; size = 4
tv4850 = -2524						; size = 4
tv10408 = -2520						; size = 4
tv5268 = -2520						; size = 4
tv6325 = -2516						; size = 4
_ii$ = -2516						; size = 4
tv10922 = -2512						; size = 4
tv6285 = -2512						; size = 4
tv5282 = -2512						; size = 4
tv11241 = -2508						; size = 4
tv10876 = -2508						; size = 4
tv5266 = -2508						; size = 4
tv9046 = -2504						; size = 4
tv7210 = -2504						; size = 4
tv6327 = -2504						; size = 4
tv5833 = -2504						; size = 4
_i$ = -2504						; size = 4
_a2h$ = -2500						; size = 1152
_a1h$ = -1348						; size = 1152
_a2g$ = -196						; size = 96
_a1g$ = -100						; size = 96
__$ArrayPad$ = -4					; size = 4
_v_info$ = 8						; size = 4
_sqcurve_string_hess PROC				; COMDAT

; 1183 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2696				; 00000a88H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	mov	esi, DWORD PTR _v_info$[ebp]

; 1184 :   REAL s1,s2,s1s2;  /* edge lengths */
; 1185 :   REAL *side1 = v_info->sides[0][0],*side2 = v_info->sides[0][1];

	mov	eax, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [eax]
	mov	ebx, DWORD PTR [eax+4]

; 1186 :   REAL *side[2];
; 1187 :   int  i,k,kk,ii;
; 1188 :   REAL a1,a2,energy;
; 1189 :   REAL a1g[2][MAXCOORD],a2g[2][MAXCOORD];
; 1190 :   REAL a1h[2][2][MAXCOORD][MAXCOORD],a2h[2][2][MAXCOORD][MAXCOORD];
; 1191 :   REAL s[2];
; 1192 :   REAL ****h = v_info->hess;

	mov	ecx, DWORD PTR [esi+1340]
	push	edi
	mov	edi, DWORD PTR [eax]

; 1193 :   REAL term; /* common factor */
; 1194 :   REAL power;
; 1195 :   struct method_instance *mi = METH_INSTANCE(v_info->method);

	mov	eax, DWORD PTR [esi+8]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list

; 1196 : 
; 1197 :   if ( v_info->vcount < 3 ) return 0.0;

	cmp	DWORD PTR [esi+12], 3

; 1218 :   for ( k = 0 ; k < 2 ; k++ )

	mov	DWORD PTR _v_info$GSCopy$[ebp], esi
	mov	DWORD PTR _h$[ebp], ecx
	jl	$LN198@sqcurve_st@4

; 1198 : 
; 1199 :   if ( mi->flags & METH_PARAMETER_1 )

	test	DWORD PTR [eax+140], 8388608		; 00800000H
	je	SHORT $LN46@sqcurve_st@4

; 1200 :      power = mi->parameter_1;

	fld	QWORD PTR [eax+2904]
	jmp	SHORT $LN45@sqcurve_st@4
$LN46@sqcurve_st@4:

; 1201 :   else power = curve_power;

	fld	QWORD PTR _curve_power
$LN45@sqcurve_st@4:

; 1202 : 
; 1203 :   if ( power != 2 )

	fld	QWORD PTR __real@4000000000000000
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN96@sqcurve_st@4

; 1204 :      kb_error(1763,"Hessian not implemented for curvature_power != 2.\n",
; 1205 :         RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DD@COKPNKMM@Hessian?5not?5implemented?5for?5curv@
	push	1763					; 000006e3H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN96@sqcurve_st@4:

; 1206 : 
; 1207 :   s1 = sqrt(SDIM_dot(side1,side1));

	mov	edx, DWORD PTR _web+616
	push	edx
	push	edi
	push	edi
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR _s1$[ebp]

; 1208 :   s2 = sqrt(SDIM_dot(side2,side2));

	mov	eax, DWORD PTR _web+616
	push	eax
	push	ebx
	push	ebx
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR _s2$[ebp]

; 1209 :   s1s2 = SDIM_dot(side1,side2);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	push	ebx
	push	edi
	call	_dot
	fst	QWORD PTR _s1s2$[ebp]

; 1210 : 
; 1211 :   a1 = 1 + s1s2/s1/s2;

	fld	ST(0)
	add	esp, 12					; 0000000cH
	fld	QWORD PTR _s1$[ebp]
	fdiv	ST(1), ST(0)
	fld	QWORD PTR _s2$[ebp]
	fdiv	ST(2), ST(0)
	fxch	ST(2)
	fadd	QWORD PTR __real@3ff0000000000000
	fst	QWORD PTR _a1$[ebp]

; 1212 :   a2 = (s1 + s2)/2;

	fld	ST(2)
	fadd	ST(0), ST(2)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _a2$[ebp]

; 1213 :   if ( a2 == 0.0 ) return 0.0;

	fld	ST(0)
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN43@sqcurve_st@4
	fstp	ST(3)
	fstp	ST(3)
	fstp	ST(2)
	fstp	ST(0)
	fstp	ST(0)
	fstp	ST(0)
$LN198@sqcurve_st@4:
	fldz
	pop	edi
	pop	esi
	pop	ebx

; 1275 :       }
; 1276 :   return energy;
; 1277 : } // end sqcurve_string_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN43@sqcurve_st@4:

; 1214 : 
; 1215 :   energy = 2*(a1+6*a1*a1/36)/a2;

	fld	ST(2)
	lea	eax, DWORD PTR _side$[ebp]
	fmul	QWORD PTR __real@4018000000000000
	mov	DWORD PTR tv5215[ebp], eax
	lea	eax, DWORD PTR _side$[ebp+4]
	xor	ecx, ecx
	fmul	ST(0), ST(3)
	mov	DWORD PTR tv5266[ebp], eax
	lea	eax, DWORD PTR _s$[ebp+8]

; 1216 : 
; 1217 :   side[0] = side1; side[1] = side2; s[0] = s1; s[1] = s2;

	mov	DWORD PTR _side$[ebp+4], ebx
	fdiv	QWORD PTR __real@4042000000000000
	mov	ebx, DWORD PTR _web+616
	mov	DWORD PTR _side$[ebp], edi
	mov	DWORD PTR tv5147[ebp], ecx
	mov	DWORD PTR tv5153[ebp], ecx
	lea	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR tv5268[ebp], eax
	fadd	ST(0), ST(3)
	fst	QWORD PTR tv3948[ebp]
	fadd	ST(0), ST(0)
	fst	QWORD PTR tv3950[ebp]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR _energy$[ebp]
	fxch	ST(3)
	fst	QWORD PTR _s$[ebp]
	fxch	ST(4)
	fst	QWORD PTR _s$[ebp+8]
	jmp	SHORT $LN42@sqcurve_st@4
$LN91@sqcurve_st@4:

; 1214 : 
; 1215 :   energy = 2*(a1+6*a1*a1/36)/a2;

	fld	QWORD PTR _s1s2$[ebp]
	fxch	ST(5)
$LN42@sqcurve_st@4:

; 1219 :   { term = s1s2/s[k]/s[k]/s[k]/s[1-k];

	fxch	ST(5)
	mov	eax, DWORD PTR tv5268[ebp]
	fdiv	QWORD PTR [edx]
	fdiv	QWORD PTR [edx]
	fdiv	QWORD PTR [edx]
	fdiv	QWORD PTR [eax]

; 1220 :      for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	ebx, 4
	jl	$LC79@sqcurve_st@4
	mov	eax, DWORD PTR tv5266[ebp]
	mov	esi, DWORD PTR [eax]
	mov	eax, DWORD PTR tv5215[ebp]
	mov	edi, DWORD PTR [eax]
	lea	eax, DWORD PTR [esi+24]

; 1222 :           a2g[k][i] = 0.5*side[k][i]/s[k];

	sub	esi, edi
	mov	DWORD PTR tv5282[ebp], esi
	lea	esi, DWORD PTR [ebx-4]
	shr	esi, 2
	mov	DWORD PTR tv4850[ebp], eax
	lea	eax, DWORD PTR [edi+8]
	inc	esi
	lea	edi, DWORD PTR [esi*4]
	mov	DWORD PTR _i$[ebp], edi
	mov	edi, DWORD PTR tv4850[ebp]
$LN80@sqcurve_st@4:

; 1221 :         { a1g[k][i] = side[1-k][i]/s1/s2 - term*side[k][i];

	fld	QWORD PTR [edi-24]
	mov	edi, DWORD PTR tv5282[ebp]
	fdiv	ST(0), ST(5)

; 1222 :           a2g[k][i] = 0.5*side[k][i]/s[k];

	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fdiv	ST(0), ST(6)
	fld	QWORD PTR [eax-40]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _a1g$[ebp+ecx-32]
	fld	QWORD PTR [eax-40]
	fmul	ST(0), ST(2)
	fdiv	QWORD PTR [edx]
	fstp	QWORD PTR _a2g$[ebp+ecx-32]
	fld	QWORD PTR [eax+edi-32]
	fdiv	ST(0), ST(5)
	mov	edi, DWORD PTR tv4850[ebp]
	add	edi, 32					; 00000020H
	dec	esi
	mov	DWORD PTR tv4850[ebp], edi
	fdiv	ST(0), ST(6)
	fld	QWORD PTR [eax-32]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _a1g$[ebp+ecx-24]
	fld	QWORD PTR [eax-32]
	fmul	ST(0), ST(2)
	fdiv	QWORD PTR [edx]
	fstp	QWORD PTR _a2g$[ebp+ecx-24]
	fld	QWORD PTR [edi-40]
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(6)
	fld	QWORD PTR [eax-24]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _a1g$[ebp+ecx-16]
	fld	QWORD PTR [eax-24]
	fmul	ST(0), ST(2)
	fdiv	QWORD PTR [edx]
	fstp	QWORD PTR _a2g$[ebp+ecx-16]
	fld	QWORD PTR [edi-32]
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(6)
	fld	QWORD PTR [eax-16]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _a1g$[ebp+ecx-8]
	fld	QWORD PTR [eax-16]
	fmul	ST(0), ST(2)
	fdiv	QWORD PTR [edx]
	fstp	QWORD PTR _a2g$[ebp+ecx-8]
	jne	$LN80@sqcurve_st@4

; 1219 :   { term = s1s2/s[k]/s[k]/s[k]/s[1-k];

	mov	esi, DWORD PTR _v_info$GSCopy$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
$LC79@sqcurve_st@4:

; 1220 :      for ( i = 0 ; i < SDIM ; i++ )

	cmp	eax, ebx
	jge	SHORT $LN116@sqcurve_st@4
	mov	ecx, DWORD PTR tv5215[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	edi, DWORD PTR tv5266[ebp]
	mov	edi, DWORD PTR [edi]
	lea	esi, DWORD PTR [ecx+eax*8]
	add	eax, DWORD PTR tv5147[ebp]
	sub	edi, ecx
	add	eax, eax
	add	eax, eax
	mov	ecx, ebx
	add	eax, eax
	sub	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv5282[ebp], edi
$LC39@sqcurve_st@4:

; 1221 :         { a1g[k][i] = side[1-k][i]/s1/s2 - term*side[k][i];

	fld	QWORD PTR [esi+edi]
	add	esi, 8
	fdiv	ST(0), ST(5)
	add	eax, 8
	dec	ecx
	fdiv	ST(0), ST(6)
	fld	QWORD PTR [esi-8]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _a1g$[ebp+eax-8]

; 1222 :           a2g[k][i] = 0.5*side[k][i]/s[k];

	fld	QWORD PTR [esi-8]
	fmul	ST(0), ST(2)
	fdiv	QWORD PTR [edx]
	fstp	QWORD PTR _a2g$[ebp+eax-8]
	jne	SHORT $LC39@sqcurve_st@4

; 1220 :      for ( i = 0 ; i < SDIM ; i++ )

	mov	esi, DWORD PTR _v_info$GSCopy$[ebp]
$LN116@sqcurve_st@4:

; 1218 :   for ( k = 0 ; k < 2 ; k++ )

	mov	ecx, DWORD PTR tv5153[ebp]

; 1220 :      for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)
	sub	DWORD PTR tv5268[ebp], 8
	add	DWORD PTR tv5147[ebp], 6
	mov	eax, 4
	sub	DWORD PTR tv5266[ebp], eax
	add	DWORD PTR tv5215[ebp], eax
	add	ecx, 48					; 00000030H
	add	edx, 8
	mov	DWORD PTR tv5153[ebp], ecx
	cmp	ecx, 96					; 00000060H
	jl	$LN91@sqcurve_st@4

; 1223 :         }
; 1224 :   }
; 1225 :   for ( i = 0 ; i < SDIM ; i++ ) v_info->grad[0][i] = 0.0;

	fstp	ST(3)
	xor	eax, eax
	fstp	ST(3)
	fstp	ST(1)
	test	ebx, ebx
	jle	SHORT $LN34@sqcurve_st@4
	fldz
$LN36@sqcurve_st@4:
	mov	edx, DWORD PTR [esi+1336]
	mov	ecx, DWORD PTR [edx]
	fst	QWORD PTR [ecx+eax*8]
	mov	ebx, DWORD PTR _web+616
	inc	eax
	cmp	eax, ebx
	jl	SHORT $LN36@sqcurve_st@4
	fstp	ST(0)
$LN34@sqcurve_st@4:

; 1226 :   term = (a1+6*a1*a1/36)/a2/a2;

	fld	QWORD PTR tv3948[ebp]
	xor	edi, edi
	fdiv	ST(0), ST(1)
	xor	edx, edx
	fdiv	ST(0), ST(1)
	fld	QWORD PTR __real@4028000000000000
	fld	QWORD PTR __real@4000000000000000
$LN102@sqcurve_st@4:

; 1228 :      for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	test	ebx, ebx
	jle	SHORT $LN32@sqcurve_st@4
	fld	ST(4)
	fmul	ST(0), ST(2)
	fdiv	QWORD PTR __real@4042000000000000
	fadd	QWORD PTR __real@3ff0000000000000
$LN30@sqcurve_st@4:
	lea	ecx, DWORD PTR [edx+eax*8]

; 1229 :      { REAL f = 2*(a1g[k][i]*(1+12*a1/36)/a2 - term*a2g[k][i]);

	fld	QWORD PTR _a1g$[ebp+ecx]
	lea	ecx, DWORD PTR [edx+eax*8]
	fmul	ST(0), ST(1)
	fdiv	ST(0), ST(5)
	fld	QWORD PTR _a2g$[ebp+ecx]
	fmul	ST(0), ST(5)

; 1230 :         v_info->grad[k+1][i] = f; 

	mov	ecx, DWORD PTR [esi+1336]
	mov	ecx, DWORD PTR [edi+ecx+4]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fst	QWORD PTR [ecx+eax*8]

; 1231 :         v_info->grad[0][i] += -f; 

	mov	ecx, DWORD PTR [esi+1336]
	mov	ecx, DWORD PTR [ecx]
	fsubr	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fstp	QWORD PTR [ecx]
	mov	ebx, DWORD PTR _web+616
	cmp	eax, ebx
	jl	SHORT $LN30@sqcurve_st@4

; 1228 :      for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)
$LN32@sqcurve_st@4:

; 1227 :   for ( k = 0 ; k < 2 ; k++ )

	add	edx, 48					; 00000030H
	add	edi, 4
	cmp	edx, 96					; 00000060H
	jl	SHORT $LN102@sqcurve_st@4
	fstp	ST(2)

; 1232 :      }
; 1233 : 
; 1234 :   /* hessian */
; 1235 :   memset((char*)a1h,0,sizeof(a1h));

	push	1152					; 00000480H
	fstp	ST(0)
	lea	edx, DWORD PTR _a1h$[ebp]
	fstp	ST(1)
	push	0
	fstp	ST(1)
	push	edx
	fstp	ST(0)
	call	_memset

; 1236 :   memset((char*)a2h,0,sizeof(a2h));

	push	1152					; 00000480H
	xor	esi, esi
	lea	eax, DWORD PTR _a2h$[ebp]
	push	esi
	push	eax
	call	_memset
	fld	QWORD PTR _s1s2$[ebp]
	fld	QWORD PTR __real@4008000000000000
	lea	ecx, DWORD PTR _side$[ebp]
	mov	DWORD PTR tv10656[ebp], ecx
	fmul	ST(0), ST(1)
	lea	ecx, DWORD PTR _side$[ebp+4]
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv10408[ebp], esi
	fstp	QWORD PTR tv4097[ebp]
	fld1
	mov	DWORD PTR tv10412[ebp], esi
	mov	DWORD PTR tv10876[ebp], ecx
	xor	edx, edx
	lea	eax, DWORD PTR _a1h$[ebp+288]
	lea	esi, DWORD PTR _s$[ebp]
	lea	ecx, DWORD PTR _s$[ebp+8]
	mov	DWORD PTR tv10414[ebp], edx
	mov	DWORD PTR tv10660[ebp], eax
	mov	DWORD PTR tv10662[ebp], esi
	mov	DWORD PTR tv10878[ebp], ecx
$LN94@sqcurve_st@4:

; 1238 :   { REAL terma = 3*s1s2/s[k]/s[k]/s[k]/s[k]/s[k]/s[1-k];

	fld	QWORD PTR tv4097[ebp]

; 1239 :      REAL termb = s1s2/s[k]/s[k]/s[k]/s[1-k]/s[1-k]/s[1-k];
; 1240 :      REAL termc = 1/s[k]/s[1-k]/s[1-k]/s[1-k];
; 1241 :      term = 1/s[k]/s[k]/s[k]/s[1-k];
; 1242 :      for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	fdiv	QWORD PTR [esi]
	fdiv	QWORD PTR [esi]
	fdiv	QWORD PTR [esi]
	fdiv	QWORD PTR [esi]
	fdiv	QWORD PTR [esi]
	fdiv	QWORD PTR [ecx]
	fld	ST(2)
	fdiv	QWORD PTR [esi]
	fdiv	QWORD PTR [esi]
	fdiv	QWORD PTR [esi]
	fdiv	QWORD PTR [ecx]
	fdiv	QWORD PTR [ecx]
	fdiv	QWORD PTR [ecx]
	fld	ST(2)
	fdiv	QWORD PTR [esi]
	fld	ST(0)
	fdiv	QWORD PTR [ecx]
	fdiv	QWORD PTR [ecx]
	fdiv	QWORD PTR [ecx]
	fstp	QWORD PTR _termc$90145[ebp]
	fdiv	QWORD PTR [esi]
	fdiv	QWORD PTR [esi]
	fdiv	QWORD PTR [ecx]
	test	ebx, ebx
	jle	$LN140@sqcurve_st@4
	fld	ST(3)
	mov	ecx, DWORD PTR tv10660[ebp]
	fdiv	QWORD PTR _s1$[ebp]
	mov	DWORD PTR tv10238[ebp], ecx
	mov	DWORD PTR tv10009[ebp], edx
	fdiv	QWORD PTR _s2$[ebp]
	fstp	QWORD PTR tv4120[ebp]
	fld	ST(0)
	fmulp	ST(5), ST(0)
	fxch	ST(4)
	fstp	QWORD PTR tv4311[ebp]
	fld	QWORD PTR __real@3fe0000000000000
	fdiv	QWORD PTR [esi]
	fstp	QWORD PTR tv10774[ebp]
$LN92@sqcurve_st@4:

; 1243 :      { a1h[k][1-k][i][i] += 1/s1/s2;

	fld	QWORD PTR [ecx]

; 1244 :         for ( ii = 0 ; ii < SDIM ; ii++ )

	xor	edx, edx
	fadd	QWORD PTR tv4120[ebp]
	fstp	QWORD PTR [ecx]
	cmp	ebx, 4
	jl	$LC82@sqcurve_st@4
	mov	ecx, DWORD PTR tv10656[ebp]
	mov	edi, DWORD PTR [ecx]
	mov	edx, DWORD PTR tv10876[ebp]
	mov	esi, DWORD PTR [edx]
	fld	QWORD PTR [esi+eax*8]
	mov	ecx, DWORD PTR tv10412[ebp]
	add	ecx, eax
	fmul	ST(0), ST(4)
	fld	QWORD PTR [esi+eax*8]
	lea	edx, DWORD PTR [edi+24]
	fmul	QWORD PTR _termc$90145[ebp]

; 1246 :           a1h[k][1-k][i][ii] += 
; 1247 :               -side[1-k][i]*termc*side[1-k][ii];

	sub	edi, esi
	mov	DWORD PTR tv5833[ebp], edx
	lea	edx, DWORD PTR [ecx+ecx*2]
	lea	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR tv5845[ebp], ecx
	mov	ecx, DWORD PTR tv10408[ebp]
	lea	esi, DWORD PTR [ebx-4]
	shr	esi, 2
	add	ecx, eax
	inc	esi
	mov	DWORD PTR tv6096[ebp], esi
	lea	ecx, DWORD PTR [ecx+ecx*2]
	add	esi, esi
	add	edx, edx
	add	ecx, ecx
	add	esi, esi
	mov	DWORD PTR _ii$[ebp], esi
	mov	esi, DWORD PTR tv5845[ebp]
	lea	edx, DWORD PTR _a1h$[ebp+edx*8+296]
	lea	ecx, DWORD PTR _a1h$[ebp+ecx*8+8]
	mov	DWORD PTR tv10922[ebp], edi
$LN97@sqcurve_st@4:

; 1245 :         { a1h[k][k][i][ii] += -side[1-k][i]*term*side[k][ii];

	mov	edi, DWORD PTR tv5833[ebp]
	fld	QWORD PTR [edi-24]
	mov	edi, DWORD PTR tv10922[ebp]
	fmul	ST(0), ST(2)

; 1246 :           a1h[k][1-k][i][ii] += 
; 1247 :               -side[1-k][i]*termc*side[1-k][ii];

	add	esi, 32					; 00000020H
	add	ecx, 32					; 00000020H
	add	edx, 32					; 00000020H
	fsubr	QWORD PTR [ecx-40]
	fstp	QWORD PTR [ecx-40]
	fld	QWORD PTR [esi-40]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [edx-40]
	fstp	QWORD PTR [edx-40]
	fld	QWORD PTR [esi+edi-32]
	mov	edi, DWORD PTR tv5833[ebp]
	fmul	ST(0), ST(2)
	add	edi, 32					; 00000020H
	dec	DWORD PTR tv6096[ebp]
	mov	DWORD PTR tv5833[ebp], edi
	fsubr	QWORD PTR [ecx-32]
	fstp	QWORD PTR [ecx-32]
	fld	ST(0)
	fmul	QWORD PTR [esi-32]
	fsubr	QWORD PTR [edx-32]
	fstp	QWORD PTR [edx-32]
	fld	QWORD PTR [edi-40]
	fmul	ST(0), ST(2)
	fsubr	QWORD PTR [ecx-24]
	fstp	QWORD PTR [ecx-24]
	fld	QWORD PTR [esi-24]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [edx-24]
	fstp	QWORD PTR [edx-24]
	fld	ST(1)
	fmul	QWORD PTR [edi-32]
	fsubr	QWORD PTR [ecx-16]
	fstp	QWORD PTR [ecx-16]
	fld	QWORD PTR [esi-16]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [edx-16]
	fstp	QWORD PTR [edx-16]
	jne	$LN97@sqcurve_st@4

; 1243 :      { a1h[k][1-k][i][i] += 1/s1/s2;

	mov	esi, DWORD PTR tv10662[ebp]
	fstp	ST(1)
	mov	edx, DWORD PTR _ii$[ebp]
	fstp	ST(0)
$LC82@sqcurve_st@4:

; 1244 :         for ( ii = 0 ; ii < SDIM ; ii++ )

	cmp	edx, ebx
	jge	$LN81@sqcurve_st@4
	mov	ecx, DWORD PTR tv10876[ebp]
	mov	ecx, DWORD PTR [ecx]
	fld	QWORD PTR [ecx+eax*8]
	lea	edi, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR tv6285[ebp], edi
	fmul	ST(0), ST(4)
	mov	edi, DWORD PTR tv10412[ebp]
	fld	QWORD PTR [ecx+eax*8]
	add	edi, eax
	fmul	QWORD PTR _termc$90145[ebp]
	lea	edi, DWORD PTR [edi+edi*2]
	lea	edi, DWORD PTR [edx+edi*2]
	lea	edi, DWORD PTR _a1h$[ebp+edi*8+288]
	mov	DWORD PTR tv6325[ebp], edi
	mov	edi, DWORD PTR tv10408[ebp]
	add	edi, eax
	lea	edi, DWORD PTR [edi+edi*2]
	lea	edi, DWORD PTR [edx+edi*2]
	lea	edi, DWORD PTR _a1h$[ebp+edi*8]
	mov	DWORD PTR tv6327[ebp], edi
	mov	edi, DWORD PTR tv10656[ebp]
	mov	edi, DWORD PTR [edi]
	sub	edi, ecx
	mov	ecx, ebx
	sub	ecx, edx
$LN100@sqcurve_st@4:

; 1245 :         { a1h[k][k][i][ii] += -side[1-k][i]*term*side[k][ii];

	mov	edx, DWORD PTR tv6285[ebp]
	fld	QWORD PTR [edi+edx]
	mov	edx, DWORD PTR tv6327[ebp]
	add	DWORD PTR tv6327[ebp], 8
	fmul	ST(0), ST(2)
	fsubr	QWORD PTR [edx]
	fstp	QWORD PTR [edx]

; 1246 :           a1h[k][1-k][i][ii] += 
; 1247 :               -side[1-k][i]*termc*side[1-k][ii];

	mov	edx, DWORD PTR tv6285[ebp]
	add	DWORD PTR tv6285[ebp], 8
	fld	ST(0)
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv6325[ebp]
	add	DWORD PTR tv6325[ebp], 8
	dec	ecx
	fsubr	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	jne	SHORT $LN100@sqcurve_st@4

; 1244 :         for ( ii = 0 ; ii < SDIM ; ii++ )

	fstp	ST(1)
	fstp	ST(0)
$LN81@sqcurve_st@4:

; 1248 :         }
; 1249 :         for ( ii = 0 ; ii < SDIM ; ii++ )

	xor	ecx, ecx
	mov	DWORD PTR _ii$[ebp], ecx
	cmp	ebx, 4
	jl	$LC85@sqcurve_st@4
	mov	ecx, DWORD PTR tv10656[ebp]
	mov	esi, DWORD PTR [ecx]
	mov	edx, DWORD PTR tv10876[ebp]
	fld	QWORD PTR [esi+eax*8]
	mov	edi, DWORD PTR [edx]
	fmul	ST(0), ST(2)
	fld	QWORD PTR [esi+eax*8]
	lea	ecx, DWORD PTR [esi+24]
	mov	DWORD PTR tv7210[ebp], ecx
	fmul	ST(0), ST(2)
	mov	ecx, DWORD PTR tv10412[ebp]
	add	ecx, eax
	lea	edx, DWORD PTR [ecx+ecx*2]
	lea	ecx, DWORD PTR [edi+8]

; 1253 :           a1h[k][1-k][i][ii] += termb*side[k][i]*side[1-k][ii];

	mov	ebx, esi
	sub	ebx, edi
	mov	edi, DWORD PTR _web+616
	mov	DWORD PTR tv7222[ebp], ecx
	mov	ecx, DWORD PTR tv10408[ebp]
	add	edi, -4					; fffffffcH
	shr	edi, 2
	add	ecx, eax
	inc	edi
	mov	DWORD PTR tv8478[ebp], edi
	lea	ecx, DWORD PTR [ecx+ecx*2]
	add	edi, edi
	add	edx, edx
	add	ecx, ecx
	add	edi, edi
	mov	DWORD PTR _ii$[ebp], edi
	mov	edi, DWORD PTR tv7222[ebp]
	lea	edx, DWORD PTR _a1h$[ebp+edx*8+296]
	lea	ecx, DWORD PTR _a1h$[ebp+ecx*8+8]
	mov	DWORD PTR tv10922[ebp], ebx
$LN95@sqcurve_st@4:

; 1248 :         }
; 1249 :         for ( ii = 0 ; ii < SDIM ; ii++ )

	fld	QWORD PTR [edi-8]
	mov	ebx, DWORD PTR tv7210[ebp]

; 1250 :         { a1h[k][k][i][ii] += -side[1-k][ii]*term*side[k][i];

	fmul	ST(0), ST(6)

; 1253 :           a1h[k][1-k][i][ii] += termb*side[k][i]*side[1-k][ii];

	add	edi, 32					; 00000020H
	add	ecx, 32					; 00000020H
	add	edx, 32					; 00000020H
	fmul	QWORD PTR [esi+eax*8]
	fsubr	QWORD PTR [ecx-40]
	fstp	QWORD PTR [ecx-40]
	fld	QWORD PTR [ebx-24]
	fmul	ST(0), ST(6)
	fmul	QWORD PTR [esi+eax*8]
	fsubr	QWORD PTR [edx-40]
	fstp	QWORD PTR [edx-40]
	fld	ST(1)
	fmul	QWORD PTR [ebx-24]
	mov	ebx, DWORD PTR tv10922[ebp]
	fadd	QWORD PTR [ecx-40]
	fstp	QWORD PTR [ecx-40]
	fld	ST(0)
	fmul	QWORD PTR [edi-40]
	fadd	QWORD PTR [edx-40]
	fstp	QWORD PTR [edx-40]
	fld	QWORD PTR [edi-32]
	fmul	ST(0), ST(6)
	fmul	QWORD PTR [esi+eax*8]
	fsubr	QWORD PTR [ecx-32]
	fstp	QWORD PTR [ecx-32]
	fld	ST(5)
	fmul	QWORD PTR [ebx+edi-32]
	fmul	QWORD PTR [esi+eax*8]
	fsubr	QWORD PTR [edx-32]
	fstp	QWORD PTR [edx-32]
	fld	ST(1)
	fmul	QWORD PTR [ebx+edi-32]
	mov	ebx, DWORD PTR tv7210[ebp]
	add	ebx, 32					; 00000020H
	dec	DWORD PTR tv8478[ebp]
	fadd	QWORD PTR [ecx-32]
	mov	DWORD PTR tv7210[ebp], ebx
	fstp	QWORD PTR [ecx-32]
	fld	ST(0)
	fmul	QWORD PTR [edi-32]
	fadd	QWORD PTR [edx-32]
	fstp	QWORD PTR [edx-32]
	fld	QWORD PTR [edi-24]
	fmul	ST(0), ST(6)
	fmul	QWORD PTR [esi+eax*8]
	fsubr	QWORD PTR [ecx-24]
	fstp	QWORD PTR [ecx-24]
	fld	QWORD PTR [ebx-40]
	fmul	ST(0), ST(6)
	fmul	QWORD PTR [esi+eax*8]
	fsubr	QWORD PTR [edx-24]
	fstp	QWORD PTR [edx-24]
	fld	ST(1)
	fmul	QWORD PTR [ebx-40]
	fadd	QWORD PTR [ecx-24]
	fstp	QWORD PTR [ecx-24]
	fld	ST(0)
	fmul	QWORD PTR [edi-24]
	fadd	QWORD PTR [edx-24]
	fstp	QWORD PTR [edx-24]
	fld	QWORD PTR [edi-16]
	fmul	ST(0), ST(6)
	fmul	QWORD PTR [esi+eax*8]
	fsubr	QWORD PTR [ecx-16]
	fstp	QWORD PTR [ecx-16]
	fld	QWORD PTR [ebx-32]
	fmul	ST(0), ST(6)
	fmul	QWORD PTR [esi+eax*8]
	fsubr	QWORD PTR [edx-16]
	fstp	QWORD PTR [edx-16]
	fld	ST(1)
	fmul	QWORD PTR [ebx-32]
	fadd	QWORD PTR [ecx-16]
	fstp	QWORD PTR [ecx-16]
	fld	ST(0)
	fmul	QWORD PTR [edi-16]
	fadd	QWORD PTR [edx-16]
	fstp	QWORD PTR [edx-16]
	jne	$LN95@sqcurve_st@4

; 1248 :         }
; 1249 :         for ( ii = 0 ; ii < SDIM ; ii++ )

	mov	esi, DWORD PTR tv10662[ebp]
	fstp	ST(1)
	mov	ebx, DWORD PTR _web+616
	fstp	ST(0)
	mov	ecx, DWORD PTR _ii$[ebp]
$LC85@sqcurve_st@4:
	cmp	ecx, ebx
	jge	$LN84@sqcurve_st@4
	mov	edx, DWORD PTR tv10656[ebp]
	mov	esi, DWORD PTR [edx]
	mov	edi, DWORD PTR tv10412[ebp]
	fld	QWORD PTR [esi+eax*8]
	mov	edx, DWORD PTR tv10876[ebp]
	fmul	ST(0), ST(2)
	fld	QWORD PTR [esi+eax*8]
	mov	edx, DWORD PTR [edx]
	add	edi, eax
	fmul	ST(0), ST(2)
	lea	edi, DWORD PTR [edi+edi*2]
	lea	edi, DWORD PTR [ecx+edi*2]
	mov	DWORD PTR tv10795[ebp], esi
	lea	edi, DWORD PTR _a1h$[ebp+edi*8+288]
	mov	DWORD PTR tv10904[ebp], edx
	sub	esi, DWORD PTR tv10904[ebp]
	mov	DWORD PTR tv8789[ebp], edi
	mov	edi, DWORD PTR tv10408[ebp]
	mov	DWORD PTR tv10922[ebp], esi
	add	edi, eax
	mov	esi, ebx
	sub	esi, DWORD PTR _ii$[ebp]
	lea	edx, DWORD PTR [edx+ecx*8]
	lea	edi, DWORD PTR [edi+edi*2]
	lea	ecx, DWORD PTR [ecx+edi*2]
	mov	DWORD PTR tv9046[ebp], esi
	mov	esi, DWORD PTR tv8789[ebp]
	lea	ecx, DWORD PTR _a1h$[ebp+ecx*8]
$LN98@sqcurve_st@4:

; 1250 :         { a1h[k][k][i][ii] += -side[1-k][ii]*term*side[k][i];

	mov	edi, DWORD PTR tv10795[ebp]
	fld	ST(5)
	fmul	QWORD PTR [edx]
	add	ecx, 8
	add	edx, 8
	add	esi, 8
	dec	DWORD PTR tv9046[ebp]
	fmul	QWORD PTR [edi+eax*8]

; 1251 :           a1h[k][1-k][i][ii] += -side[k][ii]*term*side[k][i];

	mov	edi, DWORD PTR tv10922[ebp]
	fsubr	QWORD PTR [ecx-8]
	fstp	QWORD PTR [ecx-8]
	fld	QWORD PTR [edi+edx-8]
	mov	edi, DWORD PTR tv10795[ebp]
	fmul	ST(0), ST(6)
	fmul	QWORD PTR [edi+eax*8]

; 1252 :           a1h[k][k][i][ii] += terma*side[k][i]*side[k][ii];

	mov	edi, DWORD PTR tv10922[ebp]
	fsubr	QWORD PTR [esi-8]
	fstp	QWORD PTR [esi-8]
	fld	ST(1)
	fmul	QWORD PTR [edi+edx-8]
	fadd	QWORD PTR [ecx-8]
	fstp	QWORD PTR [ecx-8]

; 1253 :           a1h[k][1-k][i][ii] += termb*side[k][i]*side[1-k][ii];

	fld	ST(0)
	fmul	QWORD PTR [edx-8]
	fadd	QWORD PTR [esi-8]
	fstp	QWORD PTR [esi-8]
	jne	SHORT $LN98@sqcurve_st@4

; 1248 :         }
; 1249 :         for ( ii = 0 ; ii < SDIM ; ii++ )

	mov	esi, DWORD PTR tv10662[ebp]
	fstp	ST(1)
	fstp	ST(0)
$LN84@sqcurve_st@4:

; 1254 :         }
; 1255 :         a1h[k][k][i][i] += - s1s2*term;

	mov	ecx, DWORD PTR tv10009[ebp]
	fld	QWORD PTR _a1h$[ebp+ecx]

; 1256 :         a2h[k][k][i][i] += 0.5/s[k];
; 1257 :         for ( ii = 0 ; ii < SDIM ; ii++ )

	xor	edx, edx
	fsub	QWORD PTR tv4311[ebp]
	fstp	QWORD PTR _a1h$[ebp+ecx]
	lea	ecx, DWORD PTR _a2h$[ebp+ecx]
	fld	QWORD PTR [ecx]
	fadd	QWORD PTR tv10774[ebp]
	fstp	QWORD PTR [ecx]
	cmp	ebx, 4
	jl	$LN93@sqcurve_st@4
	mov	ecx, DWORD PTR tv10656[ebp]
	mov	ecx, DWORD PTR [ecx]
	fld	QWORD PTR [ecx+eax*8]
	add	ecx, 16					; 00000010H
	fmul	QWORD PTR __real@3fe0000000000000
	mov	DWORD PTR tv9330[ebp], ecx
	mov	ecx, DWORD PTR tv10408[ebp]
	add	ecx, eax
	fdiv	QWORD PTR [esi]
	lea	ecx, DWORD PTR [ecx+ecx*2]
	lea	edx, DWORD PTR [ebx-4]
	add	ecx, ecx
	shr	edx, 2
	inc	edx
	lea	edi, DWORD PTR [edx*4]
	mov	DWORD PTR _ii$[ebp], edi
	mov	edi, DWORD PTR tv9330[ebp]
	lea	ecx, DWORD PTR _a2h$[ebp+ecx*8+8]
	fdiv	QWORD PTR [esi]
	fdiv	QWORD PTR [esi]
$LN89@sqcurve_st@4:

; 1258 :           a2h[k][k][i][ii] += -0.5*side[k][i]/s[k]/s[k]/s[k]*side[k][ii];

	fld	QWORD PTR [edi-16]
	add	edi, 32					; 00000020H
	fmul	ST(0), ST(1)
	add	ecx, 32					; 00000020H
	dec	edx
	fsubr	QWORD PTR [ecx-40]
	fstp	QWORD PTR [ecx-40]
	fld	QWORD PTR [edi-40]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [ecx-32]
	fstp	QWORD PTR [ecx-32]
	fld	ST(0)
	fmul	QWORD PTR [edi-32]
	fsubr	QWORD PTR [ecx-24]
	fstp	QWORD PTR [ecx-24]
	fld	QWORD PTR [edi-24]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [ecx-16]
	fstp	QWORD PTR [ecx-16]
	jne	SHORT $LN89@sqcurve_st@4

; 1254 :         }
; 1255 :         a1h[k][k][i][i] += - s1s2*term;

	mov	edx, DWORD PTR _ii$[ebp]
	fstp	ST(0)
$LN93@sqcurve_st@4:

; 1256 :         a2h[k][k][i][i] += 0.5/s[k];
; 1257 :         for ( ii = 0 ; ii < SDIM ; ii++ )

	cmp	edx, ebx
	jge	SHORT $LN23@sqcurve_st@4
	mov	ecx, DWORD PTR tv10656[ebp]
	mov	ecx, DWORD PTR [ecx]
	fld	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+edx*8]
	fmul	QWORD PTR __real@3fe0000000000000
	mov	DWORD PTR tv9783[ebp], ecx
	mov	ecx, DWORD PTR tv10408[ebp]
	add	ecx, eax
	fdiv	QWORD PTR [esi]
	lea	ecx, DWORD PTR [ecx+ecx*2]
	lea	edi, DWORD PTR [edx+ecx*2]
	mov	ecx, ebx
	lea	edi, DWORD PTR _a2h$[ebp+edi*8]
	sub	ecx, edx
	fdiv	QWORD PTR [esi]
	fdiv	QWORD PTR [esi]
$LC15@sqcurve_st@4:

; 1258 :           a2h[k][k][i][ii] += -0.5*side[k][i]/s[k]/s[k]/s[k]*side[k][ii];

	mov	edx, DWORD PTR tv9783[ebp]
	fld	ST(0)
	fmul	QWORD PTR [edx]
	add	edx, 8
	add	edi, 8
	dec	ecx
	fsubr	QWORD PTR [edi-8]
	mov	DWORD PTR tv9783[ebp], edx
	fstp	QWORD PTR [edi-8]
	jne	SHORT $LC15@sqcurve_st@4

; 1256 :         a2h[k][k][i][i] += 0.5/s[k];
; 1257 :         for ( ii = 0 ; ii < SDIM ; ii++ )

	fstp	ST(0)
$LN23@sqcurve_st@4:

; 1239 :      REAL termb = s1s2/s[k]/s[k]/s[k]/s[1-k]/s[1-k]/s[1-k];
; 1240 :      REAL termc = 1/s[k]/s[1-k]/s[1-k]/s[1-k];
; 1241 :      term = 1/s[k]/s[k]/s[k]/s[1-k];
; 1242 :      for ( i = 0 ; i < SDIM ; i++ )

	mov	ecx, DWORD PTR tv10238[ebp]
	add	DWORD PTR tv10009[ebp], 56		; 00000038H
	inc	eax
	add	ecx, 56					; 00000038H
	mov	DWORD PTR tv10238[ebp], ecx
	cmp	eax, ebx
	jl	$LN92@sqcurve_st@4
	mov	ecx, DWORD PTR tv10878[ebp]
	fstp	ST(3)
	mov	edx, DWORD PTR tv10414[ebp]
	fstp	ST(0)
	fstp	ST(1)
	fld	QWORD PTR _s1s2$[ebp]
	fxch	ST(1)
$LN26@sqcurve_st@4:

; 1237 :   for ( k = 0 ; k < 2 ; k++ )

	add	DWORD PTR tv10660[ebp], 288		; 00000120H
	add	DWORD PTR tv10412[ebp], 6
	add	DWORD PTR tv10408[ebp], 18		; 00000012H
	mov	eax, 4
	sub	DWORD PTR tv10876[ebp], eax
	add	DWORD PTR tv10656[ebp], eax
	add	edx, 864				; 00000360H
	sub	ecx, 8
	add	esi, 8
	mov	DWORD PTR tv10878[ebp], ecx
	mov	DWORD PTR tv10662[ebp], esi
	mov	DWORD PTR tv10414[ebp], edx
	cmp	edx, 1728				; 000006c0H
	jl	$LN94@sqcurve_st@4

; 1259 : 
; 1260 :      }
; 1261 :   }
; 1262 :   for ( k = 0 ; k < 2 ; k++ )

	mov	edx, DWORD PTR _h$[ebp]
	fstp	ST(1)
	fld	QWORD PTR __real@4028000000000000
	xor	eax, eax
	fld	QWORD PTR _a2$[ebp]
	add	edx, 4
	mov	DWORD PTR tv12030[ebp], eax
	mov	DWORD PTR tv12034[ebp], eax
	mov	DWORD PTR tv12178[ebp], edx
$LN99@sqcurve_st@4:

; 1263 :     for ( kk = 0 ; kk < 2 ; kk++ )

	xor	edi, edi
	mov	DWORD PTR _kk$[ebp], edi
	mov	DWORD PTR tv11945[ebp], edi
$LN103@sqcurve_st@4:

; 1264 :      for ( i = 0 ; i < SDIM ; i++ )

	xor	edx, edx
	test	ebx, ebx
	jle	$LN8@sqcurve_st@4
$LN101@sqcurve_st@4:

; 1265 :       for ( ii = 0 ; ii < SDIM ; ii++ )

	mov	DWORD PTR _ii$[ebp], 0
	test	ebx, ebx
	jle	$LN5@sqcurve_st@4
	add	eax, edx
	add	eax, eax
	add	eax, eax
	add	eax, eax
	fld	QWORD PTR _a1g$[ebp+eax]
	mov	ebx, DWORD PTR tv11945[ebp]
	fmul	ST(0), ST(2)
	mov	DWORD PTR tv11241[ebp], ebx
	fld	QWORD PTR _a1$[ebp]
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fdiv	QWORD PTR __real@4042000000000000
	faddp	ST(3), ST(0)
	fld	ST(2)
	fmul	QWORD PTR _a1g$[ebp+eax]
	lea	eax, DWORD PTR _a2g$[ebp+eax]
	fld	QWORD PTR tv3950[ebp]
	mov	DWORD PTR tv12052[ebp], eax
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv12178[ebp]
	mov	esi, DWORD PTR [eax]
	mov	ecx, DWORD PTR [esi]
	mov	esi, DWORD PTR [esi+edi*4+4]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	esi, DWORD PTR [esi+edx*4]
	mov	ecx, DWORD PTR tv12030[ebp]
	sub	esi, eax
	add	ecx, edi
	mov	DWORD PTR tv12263[ebp], esi
	mov	esi, DWORD PTR _h$[ebp]
	mov	ebx, DWORD PTR [esi]
	mov	esi, DWORD PTR [ebx+edi*4+4]
	mov	edi, DWORD PTR [ebx]
	mov	esi, DWORD PTR [esi+edx*4]
	mov	edi, DWORD PTR [edi+edx*4]
	lea	ecx, DWORD PTR [ecx+ecx*2]
	lea	ecx, DWORD PTR [edx+ecx*2]
	lea	ecx, DWORD PTR [ecx+ecx*2]
	shl	ecx, 4
	sub	esi, eax
	sub	edi, eax
$LN90@sqcurve_st@4:

; 1266 :       { REAL f = 2*((a1h[k][kk][i][ii]*(1+12*a1/36)+12*a1g[k][i]*a1g[kk][ii]/36)/a2
; 1267 :                          - a1g[k][i]*(1+12*a1/36)*a2g[kk][ii]/a2/a2
; 1268 :                          - a1g[kk][ii]*(1+12*a1/36)*a2g[k][i]/a2/a2
; 1269 :                          - (a1+6*a1*a1/36)*a2h[k][kk][i][ii]/a2/a2
; 1270 :                          + 2*(a1+6*a1*a1/36)*a2g[k][i]*a2g[kk][ii]/a2/a2/a2);

	fld	QWORD PTR _a1h$[ebp+ecx]
	mov	ebx, DWORD PTR tv11241[ebp]
	fmul	ST(0), ST(5)
	inc	DWORD PTR _ii$[ebp]
	fld	ST(4)
	add	ecx, 8
	fmul	QWORD PTR _a1g$[ebp+ebx]
	add	eax, 8
	fdiv	QWORD PTR __real@4042000000000000
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(3)
	fld	ST(2)
	fmul	QWORD PTR _a2g$[ebp+ebx]
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	ST(5)
	fmul	QWORD PTR _a1g$[ebp+ebx]
	mov	ebx, DWORD PTR tv12052[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv11241[ebp]
	add	DWORD PTR tv11241[ebp], 8
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _a2h$[ebp+ecx-8]
	fmul	QWORD PTR tv3948[ebp]
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	ST(1)
	fmul	QWORD PTR _a2g$[ebp+ebx]

; 1271 :          h[k+1][kk+1][i][ii] += f;

	mov	ebx, DWORD PTR tv12263[ebp]
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fadd	ST(0), ST(0)
	fld	QWORD PTR [ebx+eax-8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [ebx+eax-8]

; 1272 :          h[k+1][0][i][ii] += -f;

	fld	QWORD PTR [eax-8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [eax-8]

; 1273 :          h[0][kk+1][i][ii] += -f;

	fld	QWORD PTR [eax+esi-8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [eax+esi-8]

; 1274 :          h[0][0][i][ii] += f;

	fadd	QWORD PTR [eax+edi-8]
	fstp	QWORD PTR [eax+edi-8]
	mov	ebx, DWORD PTR _web+616
	cmp	DWORD PTR _ii$[ebp], ebx
	jl	$LN90@sqcurve_st@4

; 1265 :       for ( ii = 0 ; ii < SDIM ; ii++ )

	mov	eax, DWORD PTR tv12034[ebp]
	fstp	ST(4)
	mov	edi, DWORD PTR _kk$[ebp]
	fstp	ST(2)
	fstp	ST(1)
	fstp	ST(1)
	fld1
	fld	QWORD PTR __real@4028000000000000
	fxch	ST(1)
	fxch	ST(2)
$LN5@sqcurve_st@4:

; 1264 :      for ( i = 0 ; i < SDIM ; i++ )

	inc	edx
	cmp	edx, ebx
	jl	$LN101@sqcurve_st@4
$LN8@sqcurve_st@4:

; 1263 :     for ( kk = 0 ; kk < 2 ; kk++ )

	add	DWORD PTR tv11945[ebp], 48		; 00000030H
	inc	edi
	mov	DWORD PTR _kk$[ebp], edi
	cmp	edi, 2
	jl	$LN103@sqcurve_st@4

; 1259 : 
; 1260 :      }
; 1261 :   }
; 1262 :   for ( k = 0 ; k < 2 ; k++ )

	add	DWORD PTR tv12178[ebp], 4
	add	DWORD PTR tv12030[ebp], 2
	add	eax, 6
	mov	DWORD PTR tv12034[ebp], eax
	cmp	eax, 12					; 0000000cH
	jl	$LN99@sqcurve_st@4

; 1275 :       }
; 1276 :   return energy;
; 1277 : } // end sqcurve_string_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(0)
	pop	edi
	fstp	ST(0)
	pop	esi
	fstp	ST(0)
	fld	QWORD PTR _energy$[ebp]
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN140@sqcurve_st@4:

; 1239 :      REAL termb = s1s2/s[k]/s[k]/s[k]/s[1-k]/s[1-k]/s[1-k];
; 1240 :      REAL termc = 1/s[k]/s[1-k]/s[1-k]/s[1-k];
; 1241 :      term = 1/s[k]/s[k]/s[k]/s[1-k];
; 1242 :      for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)
	fstp	ST(1)
	fstp	ST(0)
	jmp	$LN26@sqcurve_st@4
_sqcurve_string_hess ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DC@LMBAHHJA@sqcurve_string_mark?5should?5be?5an@ ; `string'
PUBLIC	??_C@_0BE@KCGBLICA@sqcurve_string_mark?$AA@	; `string'
PUBLIC	??_C@_0DD@IAGEHGND@Method?5sqcurve_string_mark?5only?5@ ; `string'
PUBLIC	_sqcurve_string_marked_init
EXTRN	_marked_edge_attr:DWORD
EXTRN	_find_extra:PROC
;	COMDAT ??_C@_0DC@LMBAHHJA@sqcurve_string_mark?5should?5be?5an@
CONST	SEGMENT
??_C@_0DC@LMBAHHJA@sqcurve_string_mark?5should?5be?5an@ DB 'sqcurve_strin'
	DB	'g_mark should be an edge attribute.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KCGBLICA@sqcurve_string_mark?$AA@
CONST	SEGMENT
??_C@_0BE@KCGBLICA@sqcurve_string_mark?$AA@ DB 'sqcurve_string_mark', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@IAGEHGND@Method?5sqcurve_string_mark?5only?5@
CONST	SEGMENT
??_C@_0DD@IAGEHGND@Method?5sqcurve_string_mark?5only?5@ DB 'Method sqcurv'
	DB	'e_string_mark only for LINEAR model.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _sqcurve_string_marked_init
_TEXT	SEGMENT
_eltype$ = -4						; size = 4
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_sqcurve_string_marked_init PROC			; COMDAT

; 1291 : { int eltype;

	push	ebp
	mov	ebp, esp
	push	ecx

; 1292 : 
; 1293 :   if ( web.modeltype != LINEAR )

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN2@sqcurve_st@5

; 1294 :     kb_error(2662,"Method sqcurve_string_mark only for LINEAR model.\n",
; 1295 :        RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DD@IAGEHGND@Method?5sqcurve_string_mark?5only?5@
	push	2662					; 00000a66H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN2@sqcurve_st@5:

; 1296 : 
; 1297 :   sqcurve_energy_string_init(); /* sets up curve_power */

	call	_sqcurve_energy_string_init

; 1298 : 
; 1299 :   marked_edge_attr = find_extra(MARKED_EDGE_ATTR_NAME,&eltype);

	lea	eax, DWORD PTR _eltype$[ebp]
	push	eax
	push	OFFSET ??_C@_0BE@KCGBLICA@sqcurve_string_mark?$AA@
	call	_find_extra
	add	esp, 8

; 1300 : 
; 1301 :   if ( eltype != EDGE )

	cmp	DWORD PTR _eltype$[ebp], 1
	mov	DWORD PTR _marked_edge_attr, eax
	je	SHORT $LN1@sqcurve_st@5

; 1302 :       kb_error(2661,"sqcurve_string_mark should be an edge attribute.\n",
; 1303 :         RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DC@LMBAHHJA@sqcurve_string_mark?5should?5be?5an@
	push	2661					; 00000a65H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@sqcurve_st@5:

; 1304 : } // end sqcurve_string_marked_init()

	mov	esp, ebp
	pop	ebp
	ret	0
_sqcurve_string_marked_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@GBBIPLAK@More?5than?52?5marked?5edges?5at?5vert@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	_sqcurve_string_marked_value
EXTRN	_errmsg:BYTE
EXTRN	_sprintf:PROC
EXTRN	_elnames:BYTE
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0CH@GBBIPLAK@More?5than?52?5marked?5edges?5at?5vert@
CONST	SEGMENT
??_C@_0CH@GBBIPLAK@More?5than?52?5marked?5edges?5at?5vert@ DB 'More than '
	DB	'2 marked edges at vertex %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _sqcurve_string_marked_value
_TEXT	SEGMENT
_power$ = -24						; size = 8
_mark$ = -20						; size = 4
_a2$ = -16						; size = 8
_s2$ = -16						; size = 8
_side2$ = -12						; size = 4
_s1$ = -8						; size = 8
_side1$ = -4						; size = 4
_k2$ = 8						; size = 4
_v_info$ = 8						; size = 4
_sqcurve_string_marked_value PROC			; COMDAT

; 1316 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi

; 1317 :   REAL s1,s2,s1s2;  /* edge lengths */
; 1318 :   REAL *side1 = NULL,*side2 = NULL;
; 1319 :   REAL energy;
; 1320 :   REAL hh,a1,a2;
; 1321 :   REAL power;
; 1322 :   struct method_instance *mi = METH_INSTANCE(v_info->method);

	mov	esi, DWORD PTR _v_info$[ebp]
	mov	eax, DWORD PTR [esi+8]
	cdq
	mov	ebx, eax
	xor	ebx, edx
	sub	ebx, edx
	imul	ebx, 2928				; 00000b70H
	add	ebx, DWORD PTR _meth_inst_list
	push	edi
	xor	edi, edi
	mov	DWORD PTR _side1$[ebp], edi

; 1323 :   int k,k1=0,k2=0;
; 1324 :   int mark = (int)(mi->parameter_2);

	fld	QWORD PTR [ebx+2912]
	mov	DWORD PTR _side2$[ebp], edi
	mov	DWORD PTR _k2$[ebp], edi
	call	__ftol2_sse
	mov	ecx, eax
	mov	DWORD PTR _mark$[ebp], ecx

; 1325 :   
; 1326 :   // find the marked edges
; 1327 :   for ( k = 0 ; k < v_info->vcount ; k++ )

	cmp	DWORD PTR [esi+12], edi
	jle	$LN22@sqcurve_st@6
	npad	10
$LL23@sqcurve_st@6:

; 1328 :   { if ( mark ? (v_info->marked[k] & mark) : v_info->marked[k] )

	mov	eax, DWORD PTR [esi+edi*4+1352]
	test	ecx, ecx
	je	SHORT $LN17@sqcurve_st@6
	and	eax, ecx
$LN17@sqcurve_st@6:
	test	eax, eax
	je	$LN12@sqcurve_st@6

; 1329 :     { if ( side1 == NULL ) 

	cmp	DWORD PTR _side1$[ebp], 0
	jne	SHORT $LN9@sqcurve_st@6

; 1330 :       { side1 = v_info->sides[0][k]; k1 = k; }

	mov	eax, DWORD PTR [esi+1276]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+edi*4]
	mov	DWORD PTR _side1$[ebp], eax
	jmp	SHORT $LN12@sqcurve_st@6
$LN9@sqcurve_st@6:

; 1331 : 	  else if ( side2 == NULL )

	cmp	DWORD PTR _side2$[ebp], 0
	jne	SHORT $LN7@sqcurve_st@6

; 1332 : 	  { side2 = v_info->sides[0][k]; k2 = k; }

	mov	edx, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+edi*4]
	mov	DWORD PTR _side2$[ebp], edx
	mov	DWORD PTR _k2$[ebp], edi

; 1333 : 	  else 

	jmp	SHORT $LN12@sqcurve_st@6
$LN7@sqcurve_st@6:

; 1334 : 	  { 
; 1335 : 	    sprintf(errmsg,"More than 2 marked edges at vertex %s\n",ELNAME(v_info->id));

	mov	eax, DWORD PTR [esi]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN18@sqcurve_st@6
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN19@sqcurve_st@6
$LN18@sqcurve_st@6:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN19@sqcurve_st@6:
	push	eax
	push	OFFSET ??_C@_0CH@GBBIPLAK@More?5than?52?5marked?5edges?5at?5vert@
	push	OFFSET _errmsg
	call	_sprintf

; 1336 : 		kb_error(5798,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	5798					; 000016a6H
	call	_kb_error
	mov	ecx, DWORD PTR _mark$[ebp]
	add	esp, 24					; 00000018H
$LN12@sqcurve_st@6:

; 1325 :   
; 1326 :   // find the marked edges
; 1327 :   for ( k = 0 ; k < v_info->vcount ; k++ )

	inc	edi
	cmp	edi, DWORD PTR [esi+12]
	jl	$LL23@sqcurve_st@6

; 1337 : 	  }
; 1338 :     }
; 1339 :   }
; 1340 : 
; 1341 :   if ( k2 == 0 ) return 0.0;

	cmp	DWORD PTR _k2$[ebp], 0
	jne	SHORT $LN5@sqcurve_st@6
$LN22@sqcurve_st@6:
	fldz
	pop	edi
	pop	esi
	pop	ebx

; 1356 : 
; 1357 :   return energy;
; 1358 : } // end sqcurve_string_marked_value()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@sqcurve_st@6:

; 1342 : 
; 1343 :   if ( mi->flags & METH_PARAMETER_1 )

	test	DWORD PTR [ebx+140], 8388608		; 00800000H
	je	SHORT $LN4@sqcurve_st@6

; 1344 :      power = mi->parameter_1;

	fld	QWORD PTR [ebx+2904]
	jmp	SHORT $LN30@sqcurve_st@6
$LN4@sqcurve_st@6:

; 1345 :   else power = curve_power;

	fld	QWORD PTR _curve_power
$LN30@sqcurve_st@6:

; 1346 :   s1 = sqrt(SDIM_dot(side1,side1));

	mov	eax, DWORD PTR _web+616
	fstp	QWORD PTR _power$[ebp]
	mov	edi, DWORD PTR _side1$[ebp]
	push	eax
	push	edi
	push	edi
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR _s1$[ebp]

; 1347 :   s2 = sqrt(SDIM_dot(side2,side2));

	mov	ecx, DWORD PTR _web+616
	mov	esi, DWORD PTR _side2$[ebp]
	push	ecx
	push	esi
	push	esi
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR _s2$[ebp]

; 1348 :   s1s2 = SDIM_dot(side1,side2);

	mov	edx, DWORD PTR _web+616
	push	edx
	push	esi
	push	edi
	call	_dot

; 1349 : 
; 1350 :   a1 = 1 + s1s2/s1/s2;

	fld	QWORD PTR _s1$[ebp]
	fdiv	ST(1), ST(0)
	add	esp, 12					; 0000000cH
	fld	QWORD PTR _s2$[ebp]
	fdiv	ST(2), ST(0)
	fxch	ST(2)
	fadd	QWORD PTR __real@3ff0000000000000

; 1351 :   a2 = (s1 + s2)/2;

	fxch	ST(2)
	faddp	ST(1), ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _a2$[ebp]

; 1352 :   if ( (a1 <= 0.0) || (a2 == 0.0) ) return 0.0;

	fldz
	fcom	ST(3)
	fnstsw	ax
	test	ah, 1
	je	SHORT $LN28@sqcurve_st@6
	fld	ST(1)
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN28@sqcurve_st@6
	fstp	ST(0)

; 1353 : 
; 1354 :   hh = (2*a1+12*a1*a1/36)/a2/a2;

	fld	ST(2)
	fmul	QWORD PTR __real@4028000000000000
	fmul	ST(0), ST(3)
	fdiv	QWORD PTR __real@4042000000000000
	fxch	ST(3)
	fadd	ST(0), ST(0)
	faddp	ST(3), ST(0)
	fdiv	ST(2), ST(0)
	fdivp	ST(2), ST(0)

; 1355 :   energy = a2*pow(hh,power/2);

	fmul	QWORD PTR _power$[ebp]
	call	__CIpow
	fmul	QWORD PTR _a2$[ebp]
	pop	edi
	pop	esi
	pop	ebx

; 1356 : 
; 1357 :   return energy;
; 1358 : } // end sqcurve_string_marked_value()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN28@sqcurve_st@6:

; 1352 :   if ( (a1 <= 0.0) || (a2 == 0.0) ) return 0.0;

	fstp	ST(3)
	pop	edi
	fstp	ST(0)
	pop	esi
	fstp	ST(0)
	pop	ebx

; 1356 : 
; 1357 :   return energy;
; 1358 : } // end sqcurve_string_marked_value()

	mov	esp, ebp
	pop	ebp
	ret	0
_sqcurve_string_marked_value ENDP
_TEXT	ENDS
PUBLIC	_v_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_sqcurve_string_marked_grad
; Function compile flags: /Ogtp
;	COMDAT _sqcurve_string_marked_grad
_TEXT	SEGMENT
_s$ = -312						; size = 16
_a1$ = -296						; size = 8
_a2$ = -288						; size = 8
_energy$ = -280						; size = 8
_hh$ = -272						; size = 8
tv2222 = -264						; size = 4
tv917 = -260						; size = 8
_term$ = -260						; size = 8
_power$ = -252						; size = 8
_s1$ = -244						; size = 8
_i$ = -240						; size = 4
_k1$ = -236						; size = 4
_v_info$GSCopy$ = -232					; size = 4
_side$ = -228						; size = 8
_s2$ = -228						; size = 8
tv2208 = -220						; size = 4
tv2061 = -216						; size = 4
_k2$ = -212						; size = 4
tv2055 = -208						; size = 4
_mark$ = -208						; size = 4
tv2206 = -204						; size = 4
_side2$ = -204						; size = 4
tv2155 = -200						; size = 4
_side1$ = -200						; size = 4
_a2g$ = -196						; size = 96
_a1g$ = -100						; size = 96
__$ArrayPad$ = -4					; size = 4
_v_info$ = 8						; size = 4
_sqcurve_string_marked_grad PROC			; COMDAT

; 1370 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	mov	esi, DWORD PTR _v_info$[ebp]

; 1371 :   REAL s1,s2,s1s2;  /* edge lengths */
; 1372 :   REAL *side1 = NULL,*side2 = NULL;
; 1373 :   int  i,k,k1=0,k2=0;
; 1374 :   REAL hh,a1,a2,energy;
; 1375 :   REAL a1g[2][MAXCOORD],a2g[2][MAXCOORD];
; 1376 :   REAL s[2];
; 1377 :   REAL *side[2];
; 1378 :   REAL term; /* common factor */
; 1379 :   REAL power;
; 1380 :   struct method_instance *mi = METH_INSTANCE(v_info->method);

	mov	eax, DWORD PTR [esi+8]
	cdq
	mov	ebx, eax
	xor	ebx, edx
	sub	ebx, edx
	imul	ebx, 2928				; 00000b70H
	add	ebx, DWORD PTR _meth_inst_list
	push	edi
	xor	edi, edi
	mov	DWORD PTR _v_info$GSCopy$[ebp], esi

; 1381 :   int mark = (int)(mi->parameter_2);

	fld	QWORD PTR [ebx+2912]
	mov	DWORD PTR _side1$[ebp], edi
	mov	DWORD PTR _side2$[ebp], edi
	mov	DWORD PTR _k1$[ebp], edi
	mov	DWORD PTR _k2$[ebp], edi
	call	__ftol2_sse
	mov	ecx, eax
	mov	DWORD PTR _mark$[ebp], ecx

; 1382 : 
; 1383 :   // find the marked edges
; 1384 :   for ( k = 0 ; k < v_info->vcount ; k++ )

	cmp	DWORD PTR [esi+12], edi
	jle	$LN53@sqcurve_st@7
	npad	5
$LL56@sqcurve_st@7:

; 1385 :   { if ( mark ? (v_info->marked[k] & mark) : v_info->marked[k] )

	mov	eax, DWORD PTR [esi+edi*4+1352]
	test	ecx, ecx
	je	SHORT $LN33@sqcurve_st@7
	and	eax, ecx
$LN33@sqcurve_st@7:
	test	eax, eax
	je	$LN28@sqcurve_st@7

; 1386 :     { if ( side1 == NULL ) 

	cmp	DWORD PTR _side1$[ebp], 0
	jne	SHORT $LN25@sqcurve_st@7

; 1387 :       { side1 = v_info->sides[0][k]; k1 = k; }

	mov	eax, DWORD PTR [esi+1276]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+edi*4]
	mov	DWORD PTR _side1$[ebp], eax
	mov	DWORD PTR _k1$[ebp], edi
	jmp	SHORT $LN28@sqcurve_st@7
$LN25@sqcurve_st@7:

; 1388 : 	  else if ( side2 == NULL )

	cmp	DWORD PTR _side2$[ebp], 0
	jne	SHORT $LN23@sqcurve_st@7

; 1389 : 	  { side2 = v_info->sides[0][k]; k2 = k; }

	mov	edx, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+edi*4]
	mov	DWORD PTR _side2$[ebp], edx
	mov	DWORD PTR _k2$[ebp], edi

; 1390 : 	  else 

	jmp	SHORT $LN28@sqcurve_st@7
$LN23@sqcurve_st@7:

; 1391 : 	  { 
; 1392 : 	    sprintf(errmsg,"More than 2 marked edges at vertex %s\n",ELNAME(v_info->id));

	mov	eax, DWORD PTR [esi]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN34@sqcurve_st@7
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN35@sqcurve_st@7
$LN34@sqcurve_st@7:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN35@sqcurve_st@7:
	push	eax
	push	OFFSET ??_C@_0CH@GBBIPLAK@More?5than?52?5marked?5edges?5at?5vert@
	push	OFFSET _errmsg
	call	_sprintf

; 1393 : 		kb_error(6015,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	6015					; 0000177fH
	call	_kb_error
	mov	ecx, DWORD PTR _mark$[ebp]
	add	esp, 24					; 00000018H
$LN28@sqcurve_st@7:

; 1382 : 
; 1383 :   // find the marked edges
; 1384 :   for ( k = 0 ; k < v_info->vcount ; k++ )

	inc	edi
	cmp	edi, DWORD PTR [esi+12]
	jl	$LL56@sqcurve_st@7

; 1394 : 	  }
; 1395 :     }
; 1396 :   }
; 1397 : 
; 1398 :   if ( k2 == 0 ) return 0.0;

	cmp	DWORD PTR _k2$[ebp], 0
	je	$LN53@sqcurve_st@7

; 1399 : 
; 1400 :   if ( mi->flags & METH_PARAMETER_1 )

	test	DWORD PTR [ebx+140], 8388608		; 00800000H
	je	SHORT $LN20@sqcurve_st@7

; 1401 :      power = mi->parameter_1;

	fld	QWORD PTR [ebx+2904]
	jmp	SHORT $LN98@sqcurve_st@7
$LN20@sqcurve_st@7:

; 1402 :   else power = curve_power;

	fld	QWORD PTR _curve_power
$LN98@sqcurve_st@7:

; 1403 : 
; 1404 :   s1 = sqrt(SDIM_dot(side1,side1));

	mov	eax, DWORD PTR _web+616
	fstp	QWORD PTR _power$[ebp]
	mov	ebx, DWORD PTR _side1$[ebp]
	push	eax
	push	ebx
	push	ebx
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR _s1$[ebp]

; 1405 :   s2 = sqrt(SDIM_dot(side2,side2));

	mov	ecx, DWORD PTR _web+616
	mov	edi, DWORD PTR _side2$[ebp]
	push	ecx
	push	edi
	push	edi
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR _s2$[ebp]

; 1406 :   s1s2 = SDIM_dot(side1,side2);

	mov	edx, DWORD PTR _web+616
	push	edx
	push	edi
	push	ebx
	call	_dot

; 1407 : 
; 1408 :   a1 = 2 + 2*s1s2/s1/s2;

	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	add	esp, 12					; 0000000cH
	fxch	ST(1)
	fst	QWORD PTR tv917[ebp]
	fld	QWORD PTR _s1$[ebp]
	fdiv	ST(1), ST(0)
	fld	QWORD PTR _s2$[ebp]
	fdiv	ST(2), ST(0)
	fxch	ST(2)
	fadd	ST(0), ST(3)
	fst	QWORD PTR _a1$[ebp]

; 1409 :   a2 = (s1 + s2)/2;

	fld	ST(2)
	fadd	ST(0), ST(2)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _a2$[ebp]

; 1410 :   if (a2 == 0.0) return 0.0;

	fld	ST(0)
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN18@sqcurve_st@7
	fstp	ST(1)
	fstp	ST(2)
	fstp	ST(2)
	fstp	ST(2)
	fstp	ST(1)
	fstp	ST(0)
$LN53@sqcurve_st@7:
	fldz
	pop	edi
	pop	esi
	pop	ebx

; 1437 :      }
; 1438 :   return energy;
; 1439 : 
; 1440 : } // end sqcurve_string_marked_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@sqcurve_st@7:

; 1411 : 
; 1412 :   hh = (a1+3*a1*a1/36)/a2/a2;

	fld	ST(2)
	fmul	QWORD PTR __real@4008000000000000
	fmul	ST(0), ST(3)
	fdiv	QWORD PTR __real@4042000000000000
	faddp	ST(3), ST(0)
	fdiv	ST(2), ST(0)
	fdivp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _hh$[ebp]

; 1413 :   if ( hh <= 0.0 )

	fldz
	fcom	ST(1)
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN62@sqcurve_st@7
	fstp	ST(1)

; 1414 :   { hh = 0.0;

	fst	QWORD PTR _hh$[ebp]

; 1415 :     energy = 0.0;

	fst	QWORD PTR _energy$[ebp]

; 1416 :   }
; 1417 :   else

	jmp	SHORT $LN16@sqcurve_st@7
$LN62@sqcurve_st@7:

; 1413 :   if ( hh <= 0.0 )

	fstp	ST(3)
	fstp	ST(3)
	fstp	ST(3)
	fstp	ST(0)

; 1418 :     energy = a2*pow(hh,power/2);

	fld	QWORD PTR _power$[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	call	__CIpow
	fmul	QWORD PTR _a2$[ebp]
	fstp	QWORD PTR _energy$[ebp]
	fld	QWORD PTR _s2$[ebp]
	fld	QWORD PTR _s1$[ebp]
	fldz
	fld	QWORD PTR __real@3fe0000000000000
	fld	QWORD PTR __real@4000000000000000
	fxch	ST(4)
	fxch	ST(3)
	fxch	ST(2)
$LN16@sqcurve_st@7:

; 1419 : 
; 1420 :   side[0] = side1; side[1] = side2; s[0] = s1; s[1] = s2;

	xor	eax, eax
	fxch	ST(2)
	mov	DWORD PTR tv2055[ebp], eax
	fst	QWORD PTR _s$[ebp]
	mov	DWORD PTR tv2061[ebp], eax
	fxch	ST(3)
	lea	eax, DWORD PTR _side$[ebp]
	fst	QWORD PTR _s$[ebp+8]
	mov	DWORD PTR tv2155[ebp], eax
	lea	ecx, DWORD PTR _side$[ebp+4]
	lea	eax, DWORD PTR _s$[ebp+8]
	mov	DWORD PTR _side$[ebp+4], edi
	mov	DWORD PTR _side$[ebp], ebx
	lea	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR tv2206[ebp], ecx
	mov	DWORD PTR tv2208[ebp], eax
	mov	edi, 4
$LN57@sqcurve_st@7:

; 1421 :   for ( k = 0 ; k < 2 ; k++ )
; 1422 :   { REAL coeff = 2*s1s2/s[k]/s[k]/s[k]/s[1-k];

	fld	QWORD PTR tv917[ebp]
	mov	ecx, DWORD PTR tv2208[ebp]
	fdiv	QWORD PTR [edx]
	fdiv	QWORD PTR [edx]
	fdiv	QWORD PTR [edx]
	fdiv	QWORD PTR [ecx]

; 1423 :      for ( i = 0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	cmp	DWORD PTR _web+616, edi
	jl	$LC51@sqcurve_st@7
	mov	eax, DWORD PTR tv2206[ebp]
	mov	esi, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv2155[ebp]
	mov	ebx, DWORD PTR [ecx]

; 1425 :           a2g[k][i] = 0.5*side[k][i]/s[k];

	mov	ecx, DWORD PTR tv2061[ebp]
	lea	edi, DWORD PTR [esi+24]
	sub	esi, ebx
	mov	DWORD PTR tv2222[ebp], esi
	mov	esi, DWORD PTR _web+616
	add	esi, -4					; fffffffcH
	shr	esi, 2
	lea	eax, DWORD PTR [ebx+8]
	inc	esi
	lea	ebx, DWORD PTR [esi*4]
	mov	DWORD PTR _i$[ebp], ebx
	mov	ebx, DWORD PTR tv2222[ebp]
$LN52@sqcurve_st@7:
	fld	QWORD PTR [edi-24]
	add	eax, 32					; 00000020H
	fmul	ST(0), ST(6)
	add	edi, 32					; 00000020H
	add	ecx, 32					; 00000020H
	dec	esi
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(2)
	fld	QWORD PTR [eax-40]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _a1g$[ebp+ecx-32]
	fld	QWORD PTR [eax-40]
	fmul	ST(0), ST(3)
	fdiv	QWORD PTR [edx]
	fstp	QWORD PTR _a2g$[ebp+ecx-32]
	fld	QWORD PTR [eax+ebx-32]
	fmul	ST(0), ST(6)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(2)
	fld	ST(1)
	fmul	QWORD PTR [eax-32]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _a1g$[ebp+ecx-24]
	fld	QWORD PTR [eax-32]
	fmul	ST(0), ST(3)
	fdiv	QWORD PTR [edx]
	fstp	QWORD PTR _a2g$[ebp+ecx-24]
	fld	QWORD PTR [edi-40]
	fmul	ST(0), ST(6)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(2)
	fld	QWORD PTR [eax-24]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _a1g$[ebp+ecx-16]
	fld	QWORD PTR [eax-24]
	fmul	ST(0), ST(3)
	fdiv	QWORD PTR [edx]
	fstp	QWORD PTR _a2g$[ebp+ecx-16]
	fld	QWORD PTR [edi-32]
	fmul	ST(0), ST(6)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(2)
	fld	QWORD PTR [eax-16]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _a1g$[ebp+ecx-8]
	fld	QWORD PTR [eax-16]
	fmul	ST(0), ST(3)
	fdiv	QWORD PTR [edx]
	fstp	QWORD PTR _a2g$[ebp+ecx-8]
	jne	$LN52@sqcurve_st@7

; 1421 :   for ( k = 0 ; k < 2 ; k++ )
; 1422 :   { REAL coeff = 2*s1s2/s[k]/s[k]/s[k]/s[1-k];

	mov	esi, DWORD PTR _v_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edi, 4
$LC51@sqcurve_st@7:

; 1423 :      for ( i = 0 ; i < SDIM ; i++ )

	cmp	ecx, DWORD PTR _web+616
	jge	SHORT $LN73@sqcurve_st@7
	mov	eax, DWORD PTR tv2155[ebp]
	mov	edi, DWORD PTR [eax]
	mov	eax, DWORD PTR tv2055[ebp]
	mov	ebx, DWORD PTR tv2206[ebp]
	mov	ebx, DWORD PTR [ebx]
	add	eax, ecx
	add	eax, eax
	lea	esi, DWORD PTR [edi+ecx*8]
	add	eax, eax
	sub	ebx, edi
	mov	edi, DWORD PTR _web+616
	add	eax, eax
	sub	edi, ecx
$LC12@sqcurve_st@7:

; 1424 :         { a1g[k][i] = 2*side[1-k][i]/s1/s2 - coeff*side[k][i];

	fld	QWORD PTR [esi+ebx]
	add	esi, 8
	fmul	ST(0), ST(6)
	add	eax, 8
	dec	edi
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(2)
	fld	QWORD PTR [esi-8]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _a1g$[ebp+eax-8]

; 1425 :           a2g[k][i] = 0.5*side[k][i]/s[k];

	fld	QWORD PTR [esi-8]
	fmul	ST(0), ST(3)
	fdiv	QWORD PTR [edx]
	fstp	QWORD PTR _a2g$[ebp+eax-8]
	jne	SHORT $LC12@sqcurve_st@7

; 1423 :      for ( i = 0 ; i < SDIM ; i++ )

	mov	esi, DWORD PTR _v_info$GSCopy$[ebp]
	mov	edi, 4
$LN73@sqcurve_st@7:
	mov	eax, DWORD PTR tv2061[ebp]
	fstp	ST(0)
	sub	DWORD PTR tv2206[ebp], edi
	add	DWORD PTR tv2155[ebp], edi
	sub	DWORD PTR tv2208[ebp], 8
	add	DWORD PTR tv2055[ebp], 6
	add	eax, 48					; 00000030H
	add	edx, 8
	mov	DWORD PTR tv2061[ebp], eax
	cmp	eax, 96					; 00000060H
	jl	$LN57@sqcurve_st@7

; 1426 :         }
; 1427 :   }
; 1428 :   for ( i = 0 ; i < SDIM ; i++ ) v_info->grad[0][i] = 0.0;

	fstp	ST(3)
	xor	eax, eax
	fstp	ST(2)
	fstp	ST(2)
	cmp	DWORD PTR _web+616, eax
	jg	SHORT $LN9@sqcurve_st@7
	fstp	ST(1)
	jmp	SHORT $LN7@sqcurve_st@7
$LN83@sqcurve_st@7:
	fxch	ST(1)
$LN9@sqcurve_st@7:
	mov	ecx, DWORD PTR [esi+1336]
	fxch	ST(1)
	mov	edx, DWORD PTR [ecx]
	fst	QWORD PTR [edx+eax*8]
	inc	eax
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN83@sqcurve_st@7
	fstp	ST(0)
$LN7@sqcurve_st@7:

; 1429 :   term = a2*pow(hh,power/2-1); 

	fmul	QWORD PTR _power$[ebp]
	fsub	QWORD PTR __real@3ff0000000000000
	fld	QWORD PTR _hh$[ebp]
	fxch	ST(1)
	call	__CIpow
	fld	QWORD PTR _a2$[ebp]
	fmul	ST(1), ST(0)

; 1430 :   for ( k = 0 ; k < 2 ; k++ )

	xor	edi, edi
	fxch	ST(1)
	fstp	QWORD PTR _term$[ebp]
	fld	QWORD PTR _a1$[ebp]
	fld	QWORD PTR _energy$[ebp]
	fld	QWORD PTR __real@4042000000000000
$LN54@sqcurve_st@7:

; 1431 :      for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	$LN5@sqcurve_st@7
	fld	ST(2)
	lea	edx, DWORD PTR [edi+edi*2]
	fmul	QWORD PTR __real@4018000000000000
	shl	edx, 4
	fld	ST(0)
	fdiv	ST(0), ST(2)
	fadd	QWORD PTR __real@3ff0000000000000
	fxch	ST(1)
	fmul	ST(0), ST(4)
	fdivrp	ST(2), ST(0)
	fld	ST(3)
	fadd	ST(0), ST(0)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fld	QWORD PTR _term$[ebp]
	fmul	QWORD PTR _power$[ebp]
	fmul	QWORD PTR __real@3fe0000000000000
$LN3@sqcurve_st@7:
	lea	ebx, DWORD PTR [edx+eax*8]

; 1432 :      { REAL f;
; 1433 :         f = a2g[k][i]*energy/a2 + term*power/2
; 1434 :               *(a1g[k][i]*(1+6*a1/36)/a2/a2 - (2*a1+6*a1*a1/36)/a2/a2/a2*a2g[k][i]);

	fld	QWORD PTR _a1g$[ebp+ebx]
	lea	ecx, DWORD PTR [edx+eax*8]
	fmul	ST(0), ST(3)
	lea	ecx, DWORD PTR _a2g$[ebp+ecx]
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(6)
	fld	QWORD PTR [ecx]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fld	QWORD PTR [ecx]

; 1435 :         v_info->grad[k?k2+1:k1+1][i] = f; 

	mov	ecx, DWORD PTR _k2$[ebp]
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(7)
	faddp	ST(1), ST(0)
	test	edi, edi
	jne	SHORT $LN99@sqcurve_st@7
	mov	ecx, DWORD PTR _k1$[ebp]
$LN99@sqcurve_st@7:
	mov	ebx, DWORD PTR [esi+1336]
	inc	ecx
	mov	ecx, DWORD PTR [ebx+ecx*4]
	fst	QWORD PTR [ecx+eax*8]

; 1436 :         v_info->grad[0][i] += -f; 

	mov	ecx, DWORD PTR [esi+1336]
	mov	ecx, DWORD PTR [ecx]
	fsubr	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN3@sqcurve_st@7

; 1431 :      for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(1)
	fstp	ST(1)
	fstp	ST(0)
	fld	QWORD PTR __real@4042000000000000
$LN5@sqcurve_st@7:

; 1430 :   for ( k = 0 ; k < 2 ; k++ )

	inc	edi
	cmp	edi, 2
	jl	$LN54@sqcurve_st@7

; 1437 :      }
; 1438 :   return energy;
; 1439 : 
; 1440 : } // end sqcurve_string_marked_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(3)
	pop	edi
	fstp	ST(1)
	pop	esi
	fstp	ST(1)
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_sqcurve_string_marked_grad ENDP
_TEXT	ENDS
PUBLIC	_v_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_sqcurve_string_marked_hess
; Function compile flags: /Ogtp
;	COMDAT _sqcurve_string_marked_hess
_TEXT	SEGMENT
_a1$ = -2704						; size = 8
_energy$ = -2696					; size = 8
_a2$ = -2688						; size = 8
tv4153 = -2680						; size = 8
tv10925 = -2672						; size = 8
tv4005 = -2664						; size = 8
tv4367 = -2656						; size = 8
tv4176 = -2648						; size = 8
_s1$ = -2640						; size = 8
_s$ = -2632						; size = 16
tv4003 = -2616						; size = 8
_termc$90354 = -2608					; size = 8
_s2$ = -2600						; size = 8
_s1s2$ = -2592						; size = 8
_h$ = -2584						; size = 4
_side$ = -2580						; size = 8
tv10357 = -2572						; size = 4
tv11029 = -2568						; size = 4
tv10160 = -2564						; size = 4
_k1$ = -2560						; size = 4
_k2$ = -2556						; size = 4
tv11055 = -2552						; size = 4
tv7341 = -2552						; size = 4
tv5996 = -2552						; size = 4
tv4044 = -2552						; size = 4
tv11878 = -2548						; size = 4
tv9934 = -2548						; size = 4
tv9449 = -2548						; size = 4
tv8908 = -2548						; size = 4
tv10811 = -2544						; size = 4
tv4506 = -2544						; size = 4
_v_info$GSCopy$ = -2544					; size = 4
tv10807 = -2540						; size = 4
tv10595 = -2536						; size = 4
tv5402 = -2536						; size = 4
tv10597 = -2532						; size = 4
tv5340 = -2532						; size = 4
tv4491 = -2532						; size = 4
_mark$ = -2532						; size = 4
tv11880 = -2528						; size = 4
tv10946 = -2528						; size = 4
tv8626 = -2528						; size = 4
tv6226 = -2528						; size = 4
tv10559 = -2524						; size = 4
tv5334 = -2524						; size = 4
tv10813 = -2520						; size = 4
tv5037 = -2520						; size = 4
_side1$ = -2520						; size = 4
tv6444 = -2516						; size = 4
tv5455 = -2516						; size = 4
_ii$ = -2516						; size = 4
tv11073 = -2512						; size = 4
tv6404 = -2512						; size = 4
tv5469 = -2512						; size = 4
tv11027 = -2508						; size = 4
tv5453 = -2508						; size = 4
_kk$ = -2508						; size = 4
tv9198 = -2504						; size = 4
tv7329 = -2504						; size = 4
tv6446 = -2504						; size = 4
tv5984 = -2504						; size = 4
_i$ = -2504						; size = 4
_side2$ = -2504						; size = 4
_a2h$ = -2500						; size = 1152
_a1h$ = -1348						; size = 1152
_a2g$ = -196						; size = 96
_a1g$ = -100						; size = 96
__$ArrayPad$ = -4					; size = 4
_v_info$ = 8						; size = 4
_sqcurve_string_marked_hess PROC			; COMDAT

; 1452 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2704				; 00000a90H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _v_info$[ebp]

; 1453 :   REAL s1,s2,s1s2;  /* edge lengths */
; 1454 :   REAL *side1 = NULL,*side2 = NULL;
; 1455 :   REAL *side[2];
; 1456 :   int  i,k,kk,ii,k1=0,k2=0;
; 1457 :   REAL a1,a2,energy;
; 1458 :   REAL a1g[2][MAXCOORD],a2g[2][MAXCOORD];
; 1459 :   REAL a1h[2][2][MAXCOORD][MAXCOORD],a2h[2][2][MAXCOORD][MAXCOORD];
; 1460 :   REAL s[2];
; 1461 :   REAL ****h = v_info->hess;

	mov	eax, DWORD PTR [edi+1340]
	mov	DWORD PTR _h$[ebp], eax

; 1462 :   REAL term; /* common factor */
; 1463 :   REAL power;
; 1464 :   struct method_instance *mi = METH_INSTANCE(v_info->method);

	mov	eax, DWORD PTR [edi+8]
	cdq
	mov	ebx, eax
	xor	ebx, edx
	sub	ebx, edx
	imul	ebx, 2928				; 00000b70H
	add	ebx, DWORD PTR _meth_inst_list
	xor	esi, esi

; 1503 :   for ( k = 0 ; k < 2 ; k++ )

	mov	DWORD PTR _v_info$GSCopy$[ebp], edi
	mov	DWORD PTR _side1$[ebp], esi
	fld	QWORD PTR [ebx+2912]
	mov	DWORD PTR _side2$[ebp], esi
	mov	DWORD PTR _k1$[ebp], esi
	mov	DWORD PTR _k2$[ebp], esi
	call	__ftol2_sse
	mov	DWORD PTR _mark$[ebp], eax
	cmp	DWORD PTR [edi+12], esi
	jle	$LN114@sqcurve_st@8

; 1465 :   int mark = (int)(mi->parameter_2);
; 1466 : 
; 1467 :   // find the marked edges
; 1468 :   for ( k = 0 ; k < v_info->vcount ; k++ )

	mov	ecx, eax
	npad	9
$LL55@sqcurve_st@8:

; 1469 :   { if ( mark ? (v_info->marked[k] & mark) : v_info->marked[k] )

	mov	eax, DWORD PTR [edi+esi*4+1352]
	test	ecx, ecx
	je	SHORT $LN59@sqcurve_st@8
	and	eax, ecx
$LN59@sqcurve_st@8:
	test	eax, eax
	je	$LN54@sqcurve_st@8

; 1470 :     { if ( side1 == NULL ) 

	cmp	DWORD PTR _side1$[ebp], 0
	jne	SHORT $LN51@sqcurve_st@8

; 1471 :       { side1 = v_info->sides[0][k]; k1 = k; }

	mov	edx, DWORD PTR [edi+1276]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+esi*4]
	mov	DWORD PTR _side1$[ebp], edx
	mov	DWORD PTR _k1$[ebp], esi
	jmp	SHORT $LN54@sqcurve_st@8
$LN51@sqcurve_st@8:

; 1472 : 	  else if ( side2 == NULL )

	cmp	DWORD PTR _side2$[ebp], 0
	jne	SHORT $LN49@sqcurve_st@8

; 1473 : 	  { side2 = v_info->sides[0][k]; k2 = k; }

	mov	eax, DWORD PTR [edi+1276]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+esi*4]
	mov	DWORD PTR _side2$[ebp], eax
	mov	DWORD PTR _k2$[ebp], esi

; 1474 : 	  else 

	jmp	SHORT $LN54@sqcurve_st@8
$LN49@sqcurve_st@8:

; 1475 : 	  { 
; 1476 : 	    sprintf(errmsg,"More than 2 marked edges at vertex %s\n",ELNAME(v_info->id));

	mov	eax, DWORD PTR [edi]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN60@sqcurve_st@8
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN61@sqcurve_st@8
$LN60@sqcurve_st@8:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN61@sqcurve_st@8:
	push	eax
	push	OFFSET ??_C@_0CH@GBBIPLAK@More?5than?52?5marked?5edges?5at?5vert@
	push	OFFSET _errmsg
	call	_sprintf

; 1477 : 		kb_error(5799,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	5799					; 000016a7H
	call	_kb_error
	mov	ecx, DWORD PTR _mark$[ebp]
	add	esp, 24					; 00000018H
$LN54@sqcurve_st@8:

; 1465 :   int mark = (int)(mi->parameter_2);
; 1466 : 
; 1467 :   // find the marked edges
; 1468 :   for ( k = 0 ; k < v_info->vcount ; k++ )

	inc	esi
	cmp	esi, DWORD PTR [edi+12]
	jl	$LL55@sqcurve_st@8

; 1478 : 	  }
; 1479 :     }
; 1480 :   }
; 1481 : 
; 1482 :   if ( k2 == 0 ) return 0.0;

	cmp	DWORD PTR _k2$[ebp], 0
	je	$LN114@sqcurve_st@8

; 1483 : 
; 1484 :   if ( mi->flags & METH_PARAMETER_1 )

	test	DWORD PTR [ebx+140], 8388608		; 00800000H
	je	SHORT $LN46@sqcurve_st@8

; 1485 :      power = mi->parameter_1;

	fld	QWORD PTR [ebx+2904]
	jmp	SHORT $LN45@sqcurve_st@8
$LN46@sqcurve_st@8:

; 1486 :   else power = curve_power;

	fld	QWORD PTR _curve_power
$LN45@sqcurve_st@8:

; 1487 : 
; 1488 :   if ( power != 2 )

	fld	QWORD PTR __real@4000000000000000
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN44@sqcurve_st@8

; 1489 :      kb_error(1762,"Hessian not implemented for curvature_power != 2.\n",
; 1490 :         RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DD@COKPNKMM@Hessian?5not?5implemented?5for?5curv@
	push	1762					; 000006e2H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN44@sqcurve_st@8:

; 1491 : 
; 1492 :   s1 = sqrt(SDIM_dot(side1,side1));

	mov	ecx, DWORD PTR _web+616
	mov	ebx, DWORD PTR _side1$[ebp]
	push	ecx
	push	ebx
	push	ebx
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR _s1$[ebp]

; 1493 :   s2 = sqrt(SDIM_dot(side2,side2));

	mov	edx, DWORD PTR _web+616
	mov	esi, DWORD PTR _side2$[ebp]
	push	edx
	push	esi
	push	esi
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR _s2$[ebp]

; 1494 :   s1s2 = SDIM_dot(side1,side2);

	mov	eax, DWORD PTR _web+616
	push	eax
	push	esi
	push	ebx
	call	_dot
	fst	QWORD PTR _s1s2$[ebp]

; 1495 : 
; 1496 :   a1 = 1 + s1s2/s1/s2;

	fld	ST(0)
	add	esp, 12					; 0000000cH
	fld	QWORD PTR _s1$[ebp]
	fdiv	ST(1), ST(0)
	fld	QWORD PTR _s2$[ebp]
	fdiv	ST(2), ST(0)
	fxch	ST(2)
	fadd	QWORD PTR __real@3ff0000000000000
	fst	QWORD PTR _a1$[ebp]

; 1497 :   a2 = (s1 + s2)/2;

	fld	ST(2)
	fadd	ST(0), ST(2)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _a2$[ebp]

; 1498 :   if ( a2 == 0.0 ) return 0.0;

	fld	ST(0)
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN43@sqcurve_st@8
	fstp	ST(3)
	fstp	ST(3)
	fstp	ST(2)
	fstp	ST(0)
	fstp	ST(0)
	fstp	ST(0)
$LN114@sqcurve_st@8:
	fldz
	pop	edi
	pop	esi
	pop	ebx

; 1560 :       }
; 1561 :   return energy;
; 1562 : 
; 1563 : } // end sqcurve_string_marked_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN43@sqcurve_st@8:

; 1499 : 
; 1500 :   energy = 2*(a1+6*a1*a1/36)/a2;

	fld	ST(2)
	lea	eax, DWORD PTR _side$[ebp]
	fmul	QWORD PTR __real@4018000000000000
	mov	DWORD PTR tv5402[ebp], eax
	lea	eax, DWORD PTR _side$[ebp+4]
	xor	ecx, ecx
	fmul	ST(0), ST(3)
	mov	DWORD PTR tv5453[ebp], eax
	lea	eax, DWORD PTR _s$[ebp+8]

; 1501 : 
; 1502 :   side[0] = side1; side[1] = side2; s[0] = s1; s[1] = s2;

	mov	DWORD PTR _side$[ebp+4], esi
	fdiv	QWORD PTR __real@4042000000000000
	mov	esi, DWORD PTR _web+616
	mov	DWORD PTR _side$[ebp], ebx
	mov	DWORD PTR tv5334[ebp], ecx
	mov	DWORD PTR tv5340[ebp], ecx
	lea	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR tv5455[ebp], eax
	fadd	ST(0), ST(3)
	fst	QWORD PTR tv4003[ebp]
	fadd	ST(0), ST(0)
	fst	QWORD PTR tv4005[ebp]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR _energy$[ebp]
	fxch	ST(3)
	fst	QWORD PTR _s$[ebp]
	fxch	ST(4)
	fst	QWORD PTR _s$[ebp+8]
	jmp	SHORT $LN42@sqcurve_st@8
$LN116@sqcurve_st@8:

; 1499 : 
; 1500 :   energy = 2*(a1+6*a1*a1/36)/a2;

	fld	QWORD PTR _s1s2$[ebp]
	fxch	ST(5)
$LN42@sqcurve_st@8:

; 1504 :   { term = s1s2/s[k]/s[k]/s[k]/s[1-k];

	fxch	ST(5)
	mov	eax, DWORD PTR tv5455[ebp]
	fdiv	QWORD PTR [edx]
	fdiv	QWORD PTR [edx]
	fdiv	QWORD PTR [edx]
	fdiv	QWORD PTR [eax]

; 1505 :      for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	esi, 4
	jl	$LN127@sqcurve_st@8
	mov	eax, DWORD PTR tv5453[ebp]
	mov	edi, DWORD PTR [eax]
	mov	eax, DWORD PTR tv5402[ebp]
	mov	ebx, DWORD PTR [eax]
	lea	eax, DWORD PTR [edi+24]

; 1507 :           a2g[k][i] = 0.5*side[k][i]/s[k];

	sub	edi, ebx
	mov	DWORD PTR tv5469[ebp], edi
	lea	edi, DWORD PTR [esi-4]
	shr	edi, 2
	mov	DWORD PTR tv5037[ebp], eax
	lea	eax, DWORD PTR [ebx+8]
	inc	edi
	lea	ebx, DWORD PTR [edi*4]
	mov	DWORD PTR _i$[ebp], ebx
	mov	ebx, DWORD PTR tv5037[ebp]
$LN104@sqcurve_st@8:

; 1506 :         { a1g[k][i] = side[1-k][i]/s1/s2 - term*side[k][i];

	fld	QWORD PTR [ebx-24]
	mov	ebx, DWORD PTR tv5469[ebp]
	fdiv	ST(0), ST(5)

; 1507 :           a2g[k][i] = 0.5*side[k][i]/s[k];

	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fdiv	ST(0), ST(6)
	fld	ST(1)
	fmul	QWORD PTR [eax-40]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _a1g$[ebp+ecx-32]
	fld	QWORD PTR [eax-40]
	fmul	ST(0), ST(2)
	fdiv	QWORD PTR [edx]
	fstp	QWORD PTR _a2g$[ebp+ecx-32]
	fld	QWORD PTR [eax+ebx-32]
	fdiv	ST(0), ST(5)
	mov	ebx, DWORD PTR tv5037[ebp]
	add	ebx, 32					; 00000020H
	dec	edi
	mov	DWORD PTR tv5037[ebp], ebx
	fdiv	ST(0), ST(6)
	fld	QWORD PTR [eax-32]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _a1g$[ebp+ecx-24]
	fld	QWORD PTR [eax-32]
	fmul	ST(0), ST(2)
	fdiv	QWORD PTR [edx]
	fstp	QWORD PTR _a2g$[ebp+ecx-24]
	fld	QWORD PTR [ebx-40]
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(6)
	fld	ST(1)
	fmul	QWORD PTR [eax-24]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _a1g$[ebp+ecx-16]
	fld	QWORD PTR [eax-24]
	fmul	ST(0), ST(2)
	fdiv	QWORD PTR [edx]
	fstp	QWORD PTR _a2g$[ebp+ecx-16]
	fld	QWORD PTR [ebx-32]
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(6)
	fld	ST(1)
	fmul	QWORD PTR [eax-16]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _a1g$[ebp+ecx-8]
	fld	QWORD PTR [eax-16]
	fmul	ST(0), ST(2)
	fdiv	QWORD PTR [edx]
	fstp	QWORD PTR _a2g$[ebp+ecx-8]
	jne	$LN104@sqcurve_st@8

; 1504 :   { term = s1s2/s[k]/s[k]/s[k]/s[1-k];

	mov	edi, DWORD PTR _v_info$GSCopy$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
$LN127@sqcurve_st@8:

; 1505 :      for ( i = 0 ; i < SDIM ; i++ )

	cmp	eax, esi
	jge	SHORT $LN143@sqcurve_st@8
	mov	ecx, DWORD PTR tv5402[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	ebx, DWORD PTR tv5453[ebp]
	mov	ebx, DWORD PTR [ebx]
	lea	edi, DWORD PTR [ecx+eax*8]
	add	eax, DWORD PTR tv5334[ebp]
	sub	ebx, ecx
	add	eax, eax
	add	eax, eax
	mov	ecx, esi
	add	eax, eax
	sub	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv5469[ebp], ebx
$LC39@sqcurve_st@8:

; 1506 :         { a1g[k][i] = side[1-k][i]/s1/s2 - term*side[k][i];

	fld	QWORD PTR [ebx+edi]
	add	edi, 8
	fdiv	ST(0), ST(5)
	add	eax, 8
	dec	ecx
	fdiv	ST(0), ST(6)
	fld	QWORD PTR [edi-8]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _a1g$[ebp+eax-8]

; 1507 :           a2g[k][i] = 0.5*side[k][i]/s[k];

	fld	QWORD PTR [edi-8]
	fmul	ST(0), ST(2)
	fdiv	QWORD PTR [edx]
	fstp	QWORD PTR _a2g$[ebp+eax-8]
	jne	SHORT $LC39@sqcurve_st@8

; 1505 :      for ( i = 0 ; i < SDIM ; i++ )

	mov	edi, DWORD PTR _v_info$GSCopy$[ebp]
$LN143@sqcurve_st@8:

; 1503 :   for ( k = 0 ; k < 2 ; k++ )

	mov	ecx, DWORD PTR tv5340[ebp]

; 1505 :      for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)
	sub	DWORD PTR tv5455[ebp], 8
	add	DWORD PTR tv5334[ebp], 6
	mov	eax, 4
	sub	DWORD PTR tv5453[ebp], eax
	add	DWORD PTR tv5402[ebp], eax
	add	ecx, 48					; 00000030H
	add	edx, 8
	mov	DWORD PTR tv5340[ebp], ecx
	cmp	ecx, 96					; 00000060H
	jl	$LN116@sqcurve_st@8

; 1508 :         }
; 1509 :   }
; 1510 :   for ( i = 0 ; i < SDIM ; i++ ) v_info->grad[0][i] = 0.0;

	fstp	ST(3)
	xor	eax, eax
	fstp	ST(3)
	fstp	ST(1)
	test	esi, esi
	jle	SHORT $LN34@sqcurve_st@8
	fldz
$LN36@sqcurve_st@8:
	mov	edx, DWORD PTR [edi+1336]
	mov	ecx, DWORD PTR [edx]
	fst	QWORD PTR [ecx+eax*8]
	mov	esi, DWORD PTR _web+616
	inc	eax
	cmp	eax, esi
	jl	SHORT $LN36@sqcurve_st@8
	fstp	ST(0)
$LN34@sqcurve_st@8:

; 1511 :   term = (a1+6*a1*a1/36)/a2/a2;

	fld	QWORD PTR tv4003[ebp]

; 1512 :   for ( k = 0 ; k < 2 ; k++ )

	xor	ebx, ebx
	fdiv	ST(0), ST(1)
	fdiv	ST(0), ST(1)
	fld	QWORD PTR __real@4028000000000000
	fld	QWORD PTR __real@4000000000000000
$LN33@sqcurve_st@8:

; 1513 :      for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	test	esi, esi
	jle	SHORT $LN32@sqcurve_st@8
	fld	ST(4)
	lea	edx, DWORD PTR [ebx+ebx*2]
	fmul	ST(0), ST(2)
	shl	edx, 4
	fdiv	QWORD PTR __real@4042000000000000
	fadd	QWORD PTR __real@3ff0000000000000
$LN30@sqcurve_st@8:
	lea	ecx, DWORD PTR [edx+eax*8]

; 1514 :      { REAL f = 2*(a1g[k][i]*(1+12*a1/36)/a2 - term*a2g[k][i]);

	fld	QWORD PTR _a1g$[ebp+ecx]
	lea	ecx, DWORD PTR [edx+eax*8]
	fmul	ST(0), ST(1)
	fdiv	ST(0), ST(5)
	fld	QWORD PTR _a2g$[ebp+ecx]
	fmul	ST(0), ST(5)

; 1515 :         v_info->grad[k?k2+1:k1+1][i] = f; 

	mov	ecx, DWORD PTR _k2$[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	test	ebx, ebx
	jne	SHORT $LN246@sqcurve_st@8
	mov	ecx, DWORD PTR _k1$[ebp]
$LN246@sqcurve_st@8:
	mov	esi, DWORD PTR [edi+1336]
	inc	ecx
	mov	ecx, DWORD PTR [esi+ecx*4]
	fst	QWORD PTR [ecx+eax*8]

; 1516 :         v_info->grad[0][i] += -f; 

	mov	ecx, DWORD PTR [edi+1336]
	mov	ecx, DWORD PTR [ecx]
	fsubr	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fstp	QWORD PTR [ecx]
	mov	esi, DWORD PTR _web+616
	cmp	eax, esi
	jl	SHORT $LN30@sqcurve_st@8

; 1513 :      for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)
$LN32@sqcurve_st@8:

; 1512 :   for ( k = 0 ; k < 2 ; k++ )

	inc	ebx
	cmp	ebx, 2
	jl	SHORT $LN33@sqcurve_st@8
	fstp	ST(2)

; 1517 :      }
; 1518 : 
; 1519 :   /* hessian */
; 1520 :   memset((char*)a1h,0,sizeof(a1h));

	push	1152					; 00000480H
	fstp	ST(0)
	xor	edi, edi
	fstp	ST(1)
	lea	edx, DWORD PTR _a1h$[ebp]
	push	edi
	fstp	ST(1)
	push	edx
	fstp	ST(0)
	call	_memset

; 1521 :   memset((char*)a2h,0,sizeof(a2h));

	push	1152					; 00000480H
	lea	eax, DWORD PTR _a2h$[ebp]
	push	edi
	push	eax
	call	_memset
	fld	QWORD PTR _s1s2$[ebp]
	fld	QWORD PTR __real@4008000000000000
	lea	ecx, DWORD PTR _side$[ebp]
	fmul	ST(0), ST(1)
	mov	DWORD PTR tv10559[ebp], edi
	mov	DWORD PTR tv10595[ebp], edi
	mov	DWORD PTR tv10597[ebp], edi
	mov	DWORD PTR tv10807[ebp], ecx
	fstp	QWORD PTR tv4153[ebp]
	fld1
	lea	edx, DWORD PTR _a1h$[ebp+288]
	lea	edi, DWORD PTR _s$[ebp]
	lea	eax, DWORD PTR _side$[ebp+4]
	lea	ecx, DWORD PTR _s$[ebp+8]
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv10811[ebp], edx
	mov	DWORD PTR tv10813[ebp], edi
	mov	DWORD PTR tv11027[ebp], eax
	mov	DWORD PTR tv11029[ebp], ecx
$LN119@sqcurve_st@8:

; 1523 :   { REAL terma = 3*s1s2/s[k]/s[k]/s[k]/s[k]/s[k]/s[1-k];

	fld	QWORD PTR tv4153[ebp]
	mov	eax, DWORD PTR tv11029[ebp]
	fdiv	QWORD PTR [edi]
	fdiv	QWORD PTR [edi]
	fdiv	QWORD PTR [edi]
	fdiv	QWORD PTR [edi]
	fdiv	QWORD PTR [edi]
	fdiv	QWORD PTR [eax]

; 1524 :      REAL termb = s1s2/s[k]/s[k]/s[k]/s[1-k]/s[1-k]/s[1-k];

	fld	ST(2)
	fdiv	QWORD PTR [edi]
	fdiv	QWORD PTR [edi]
	fdiv	QWORD PTR [edi]
	fdiv	QWORD PTR [eax]
	fdiv	QWORD PTR [eax]
	fdiv	QWORD PTR [eax]

; 1525 :      REAL termc = 1/s[k]/s[1-k]/s[1-k]/s[1-k];

	fld	ST(2)
	fdiv	QWORD PTR [edi]
	fld	ST(0)
	fdiv	QWORD PTR [eax]
	fdiv	QWORD PTR [eax]
	fdiv	QWORD PTR [eax]
	fstp	QWORD PTR _termc$90354[ebp]

; 1526 :      term = 1/s[k]/s[k]/s[k]/s[1-k];

	fdiv	QWORD PTR [edi]
	fdiv	QWORD PTR [edi]
	fdiv	QWORD PTR [eax]

; 1527 :      for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	test	esi, esi
	jle	$LN171@sqcurve_st@8
	fld	ST(3)
	mov	edx, DWORD PTR tv10811[ebp]
	fdiv	QWORD PTR _s1$[ebp]
	mov	ecx, DWORD PTR tv10597[ebp]
	mov	DWORD PTR tv10357[ebp], edx
	mov	DWORD PTR tv10160[ebp], ecx
	fdiv	QWORD PTR _s2$[ebp]
	fstp	QWORD PTR tv4176[ebp]
	fld	ST(0)
	fmulp	ST(5), ST(0)
	fxch	ST(4)
	fstp	QWORD PTR tv4367[ebp]
	fld	QWORD PTR __real@3fe0000000000000
	fdiv	QWORD PTR [edi]
	fstp	QWORD PTR tv10925[ebp]
$LN117@sqcurve_st@8:

; 1528 :      { a1h[k][1-k][i][i] += 1/s1/s2;

	mov	ecx, DWORD PTR tv10357[ebp]
	fld	QWORD PTR [ecx]

; 1529 :         for ( ii = 0 ; ii < SDIM ; ii++ )

	xor	edx, edx
	fadd	QWORD PTR tv4176[ebp]
	fstp	QWORD PTR [ecx]
	cmp	esi, 4
	jl	$LN123@sqcurve_st@8
	mov	ecx, DWORD PTR tv10807[ebp]
	mov	ebx, DWORD PTR [ecx]
	mov	edx, DWORD PTR tv11027[ebp]
	mov	edi, DWORD PTR [edx]
	fld	QWORD PTR [edi+eax*8]
	mov	ecx, DWORD PTR tv10595[ebp]
	add	ecx, eax
	fmul	ST(0), ST(4)
	fld	QWORD PTR [edi+eax*8]
	lea	edx, DWORD PTR [ebx+24]
	fmul	QWORD PTR _termc$90354[ebp]

; 1531 :           a1h[k][1-k][i][ii] += 
; 1532 :               -side[1-k][i]*termc*side[1-k][ii];

	sub	ebx, edi
	mov	DWORD PTR tv5984[ebp], edx
	lea	edx, DWORD PTR [ecx+ecx*2]
	lea	ecx, DWORD PTR [edi+8]
	mov	DWORD PTR tv5996[ebp], ecx
	mov	ecx, DWORD PTR tv10559[ebp]
	lea	edi, DWORD PTR [esi-4]
	shr	edi, 2
	add	ecx, eax
	inc	edi
	mov	DWORD PTR tv6226[ebp], edi
	lea	ecx, DWORD PTR [ecx+ecx*2]
	add	edi, edi
	add	edx, edx
	add	ecx, ecx
	add	edi, edi
	mov	DWORD PTR _ii$[ebp], edi
	mov	edi, DWORD PTR tv5996[ebp]
	lea	edx, DWORD PTR _a1h$[ebp+edx*8+296]
	lea	ecx, DWORD PTR _a1h$[ebp+ecx*8+8]
	mov	DWORD PTR tv11073[ebp], ebx
$LN121@sqcurve_st@8:

; 1530 :         { a1h[k][k][i][ii] += -side[1-k][i]*term*side[k][ii];

	mov	ebx, DWORD PTR tv5984[ebp]
	fld	QWORD PTR [ebx-24]
	mov	ebx, DWORD PTR tv11073[ebp]
	fmul	ST(0), ST(2)

; 1531 :           a1h[k][1-k][i][ii] += 
; 1532 :               -side[1-k][i]*termc*side[1-k][ii];

	add	edi, 32					; 00000020H
	add	ecx, 32					; 00000020H
	add	edx, 32					; 00000020H
	fsubr	QWORD PTR [ecx-40]
	fstp	QWORD PTR [ecx-40]
	fld	QWORD PTR [edi-40]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [edx-40]
	fstp	QWORD PTR [edx-40]
	fld	QWORD PTR [edi+ebx-32]
	mov	ebx, DWORD PTR tv5984[ebp]
	fmul	ST(0), ST(2)
	add	ebx, 32					; 00000020H
	dec	DWORD PTR tv6226[ebp]
	mov	DWORD PTR tv5984[ebp], ebx
	fsubr	QWORD PTR [ecx-32]
	fstp	QWORD PTR [ecx-32]
	fld	ST(0)
	fmul	QWORD PTR [edi-32]
	fsubr	QWORD PTR [edx-32]
	fstp	QWORD PTR [edx-32]
	fld	QWORD PTR [ebx-40]
	fmul	ST(0), ST(2)
	fsubr	QWORD PTR [ecx-24]
	fstp	QWORD PTR [ecx-24]
	fld	QWORD PTR [edi-24]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [edx-24]
	fstp	QWORD PTR [edx-24]
	fld	ST(1)
	fmul	QWORD PTR [ebx-32]
	fsubr	QWORD PTR [ecx-16]
	fstp	QWORD PTR [ecx-16]
	fld	QWORD PTR [edi-16]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [edx-16]
	fstp	QWORD PTR [edx-16]
	jne	$LN121@sqcurve_st@8

; 1528 :      { a1h[k][1-k][i][i] += 1/s1/s2;

	mov	edx, DWORD PTR _ii$[ebp]
	fstp	ST(1)
	mov	edi, DWORD PTR tv10813[ebp]
	fstp	ST(0)
$LN123@sqcurve_st@8:

; 1529 :         for ( ii = 0 ; ii < SDIM ; ii++ )

	cmp	edx, esi
	jge	$LN128@sqcurve_st@8
	mov	ecx, DWORD PTR tv11027[ebp]
	mov	ecx, DWORD PTR [ecx]
	fld	QWORD PTR [ecx+eax*8]
	lea	ebx, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR tv6404[ebp], ebx
	fmul	ST(0), ST(4)
	mov	ebx, DWORD PTR tv10595[ebp]
	fld	QWORD PTR [ecx+eax*8]
	add	ebx, eax
	fmul	QWORD PTR _termc$90354[ebp]
	lea	ebx, DWORD PTR [ebx+ebx*2]
	lea	ebx, DWORD PTR [edx+ebx*2]
	lea	ebx, DWORD PTR _a1h$[ebp+ebx*8+288]
	mov	DWORD PTR tv6444[ebp], ebx
	mov	ebx, DWORD PTR tv10559[ebp]
	add	ebx, eax
	lea	ebx, DWORD PTR [ebx+ebx*2]
	lea	ebx, DWORD PTR [edx+ebx*2]
	lea	ebx, DWORD PTR _a1h$[ebp+ebx*8]
	mov	DWORD PTR tv6446[ebp], ebx
	mov	ebx, DWORD PTR tv10807[ebp]
	mov	ebx, DWORD PTR [ebx]
	sub	ebx, ecx
	mov	ecx, esi
	sub	ecx, edx
$LN126@sqcurve_st@8:

; 1530 :         { a1h[k][k][i][ii] += -side[1-k][i]*term*side[k][ii];

	mov	edx, DWORD PTR tv6404[ebp]
	fld	QWORD PTR [ebx+edx]
	mov	edx, DWORD PTR tv6446[ebp]
	add	DWORD PTR tv6446[ebp], 8
	fmul	ST(0), ST(2)
	fsubr	QWORD PTR [edx]
	fstp	QWORD PTR [edx]

; 1531 :           a1h[k][1-k][i][ii] += 
; 1532 :               -side[1-k][i]*termc*side[1-k][ii];

	mov	edx, DWORD PTR tv6404[ebp]
	add	DWORD PTR tv6404[ebp], 8
	fld	ST(0)
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv6444[ebp]
	add	DWORD PTR tv6444[ebp], 8
	dec	ecx
	fsubr	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	jne	SHORT $LN126@sqcurve_st@8

; 1529 :         for ( ii = 0 ; ii < SDIM ; ii++ )

	fstp	ST(1)
	fstp	ST(0)
$LN128@sqcurve_st@8:

; 1533 :         }
; 1534 :         for ( ii = 0 ; ii < SDIM ; ii++ )

	xor	ecx, ecx
	mov	DWORD PTR _ii$[ebp], ecx
	cmp	esi, 4
	jl	$LC109@sqcurve_st@8
	mov	ecx, DWORD PTR tv10807[ebp]
	fld	ST(1)
	mov	esi, DWORD PTR [ecx]
	mov	edx, DWORD PTR tv11027[ebp]
	fmul	QWORD PTR [esi+eax*8]
	mov	edi, DWORD PTR [edx]
	fld	ST(1)
	fmul	QWORD PTR [esi+eax*8]
	lea	ecx, DWORD PTR [esi+24]
	mov	DWORD PTR tv7329[ebp], ecx
	mov	ecx, DWORD PTR tv10595[ebp]
	add	ecx, eax
	lea	edx, DWORD PTR [ecx+ecx*2]
	lea	ecx, DWORD PTR [edi+8]

; 1538 :           a1h[k][1-k][i][ii] += termb*side[k][i]*side[1-k][ii];

	mov	ebx, esi
	sub	ebx, edi
	mov	edi, DWORD PTR _web+616
	mov	DWORD PTR tv7341[ebp], ecx
	mov	ecx, DWORD PTR tv10559[ebp]
	add	edi, -4					; fffffffcH
	shr	edi, 2
	add	ecx, eax
	inc	edi
	mov	DWORD PTR tv8626[ebp], edi
	lea	ecx, DWORD PTR [ecx+ecx*2]
	add	edi, edi
	add	edx, edx
	add	ecx, ecx
	add	edi, edi
	mov	DWORD PTR _ii$[ebp], edi
	mov	edi, DWORD PTR tv7341[ebp]
	lea	edx, DWORD PTR _a1h$[ebp+edx*8+296]
	lea	ecx, DWORD PTR _a1h$[ebp+ecx*8+8]
	mov	DWORD PTR tv11073[ebp], ebx
$LN120@sqcurve_st@8:

; 1533 :         }
; 1534 :         for ( ii = 0 ; ii < SDIM ; ii++ )

	fld	QWORD PTR [edi-8]
	mov	ebx, DWORD PTR tv7329[ebp]

; 1535 :         { a1h[k][k][i][ii] += -side[1-k][ii]*term*side[k][i];

	fmul	ST(0), ST(6)

; 1538 :           a1h[k][1-k][i][ii] += termb*side[k][i]*side[1-k][ii];

	add	edi, 32					; 00000020H
	add	ecx, 32					; 00000020H
	add	edx, 32					; 00000020H
	fmul	QWORD PTR [esi+eax*8]
	fsubr	QWORD PTR [ecx-40]
	fstp	QWORD PTR [ecx-40]
	fld	QWORD PTR [ebx-24]
	fmul	ST(0), ST(6)
	fmul	QWORD PTR [esi+eax*8]
	fsubr	QWORD PTR [edx-40]
	fstp	QWORD PTR [edx-40]
	fld	ST(1)
	fmul	QWORD PTR [ebx-24]
	mov	ebx, DWORD PTR tv11073[ebp]
	fadd	QWORD PTR [ecx-40]
	fstp	QWORD PTR [ecx-40]
	fld	ST(0)
	fmul	QWORD PTR [edi-40]
	fadd	QWORD PTR [edx-40]
	fstp	QWORD PTR [edx-40]
	fld	QWORD PTR [edi-32]
	fmul	ST(0), ST(6)
	fmul	QWORD PTR [esi+eax*8]
	fsubr	QWORD PTR [ecx-32]
	fstp	QWORD PTR [ecx-32]
	fld	ST(5)
	fmul	QWORD PTR [ebx+edi-32]
	fmul	QWORD PTR [esi+eax*8]
	fsubr	QWORD PTR [edx-32]
	fstp	QWORD PTR [edx-32]
	fld	ST(1)
	fmul	QWORD PTR [ebx+edi-32]
	mov	ebx, DWORD PTR tv7329[ebp]
	add	ebx, 32					; 00000020H
	dec	DWORD PTR tv8626[ebp]
	fadd	QWORD PTR [ecx-32]
	mov	DWORD PTR tv7329[ebp], ebx
	fstp	QWORD PTR [ecx-32]
	fld	ST(0)
	fmul	QWORD PTR [edi-32]
	fadd	QWORD PTR [edx-32]
	fstp	QWORD PTR [edx-32]
	fld	QWORD PTR [edi-24]
	fmul	ST(0), ST(6)
	fmul	QWORD PTR [esi+eax*8]
	fsubr	QWORD PTR [ecx-24]
	fstp	QWORD PTR [ecx-24]
	fld	QWORD PTR [ebx-40]
	fmul	ST(0), ST(6)
	fmul	QWORD PTR [esi+eax*8]
	fsubr	QWORD PTR [edx-24]
	fstp	QWORD PTR [edx-24]
	fld	ST(1)
	fmul	QWORD PTR [ebx-40]
	fadd	QWORD PTR [ecx-24]
	fstp	QWORD PTR [ecx-24]
	fld	ST(0)
	fmul	QWORD PTR [edi-24]
	fadd	QWORD PTR [edx-24]
	fstp	QWORD PTR [edx-24]
	fld	QWORD PTR [edi-16]
	fmul	ST(0), ST(6)
	fmul	QWORD PTR [esi+eax*8]
	fsubr	QWORD PTR [ecx-16]
	fstp	QWORD PTR [ecx-16]
	fld	QWORD PTR [ebx-32]
	fmul	ST(0), ST(6)
	fmul	QWORD PTR [esi+eax*8]
	fsubr	QWORD PTR [edx-16]
	fstp	QWORD PTR [edx-16]
	fld	ST(1)
	fmul	QWORD PTR [ebx-32]
	fadd	QWORD PTR [ecx-16]
	fstp	QWORD PTR [ecx-16]
	fld	ST(0)
	fmul	QWORD PTR [edi-16]
	fadd	QWORD PTR [edx-16]
	fstp	QWORD PTR [edx-16]
	jne	$LN120@sqcurve_st@8

; 1533 :         }
; 1534 :         for ( ii = 0 ; ii < SDIM ; ii++ )

	mov	esi, DWORD PTR _web+616
	fstp	ST(1)
	mov	edi, DWORD PTR tv10813[ebp]
	fstp	ST(0)
	mov	ecx, DWORD PTR _ii$[ebp]
$LC109@sqcurve_st@8:
	cmp	ecx, esi
	jge	$LN124@sqcurve_st@8
	mov	edx, DWORD PTR tv10807[ebp]
	fld	ST(1)
	mov	edi, DWORD PTR [edx]
	fmul	QWORD PTR [edi+eax*8]
	mov	ebx, DWORD PTR tv10595[ebp]
	mov	edx, DWORD PTR tv11027[ebp]
	fld	ST(1)
	mov	edx, DWORD PTR [edx]
	fmul	QWORD PTR [edi+eax*8]
	add	ebx, eax
	lea	ebx, DWORD PTR [ebx+ebx*2]
	lea	ebx, DWORD PTR [ecx+ebx*2]
	mov	DWORD PTR tv10946[ebp], edi
	lea	ebx, DWORD PTR _a1h$[ebp+ebx*8+288]
	mov	DWORD PTR tv11055[ebp], edx
	sub	edi, DWORD PTR tv11055[ebp]
	mov	DWORD PTR tv8908[ebp], ebx
	mov	ebx, DWORD PTR tv10559[ebp]
	mov	DWORD PTR tv11073[ebp], edi
	add	ebx, eax
	mov	edi, esi
	sub	edi, DWORD PTR _ii$[ebp]
	lea	edx, DWORD PTR [edx+ecx*8]
	lea	ebx, DWORD PTR [ebx+ebx*2]
	lea	ecx, DWORD PTR [ecx+ebx*2]
	mov	DWORD PTR tv9198[ebp], edi
	mov	edi, DWORD PTR tv8908[ebp]
	lea	ecx, DWORD PTR _a1h$[ebp+ecx*8]
$LN122@sqcurve_st@8:

; 1535 :         { a1h[k][k][i][ii] += -side[1-k][ii]*term*side[k][i];

	fld	QWORD PTR [edx]
	mov	ebx, DWORD PTR tv10946[ebp]
	fmul	ST(0), ST(6)
	add	ecx, 8
	add	edx, 8
	add	edi, 8
	dec	DWORD PTR tv9198[ebp]
	fmul	QWORD PTR [ebx+eax*8]

; 1536 :           a1h[k][1-k][i][ii] += -side[k][ii]*term*side[k][i];

	mov	ebx, DWORD PTR tv11073[ebp]
	fsubr	QWORD PTR [ecx-8]
	fstp	QWORD PTR [ecx-8]
	fld	QWORD PTR [ebx+edx-8]
	mov	ebx, DWORD PTR tv10946[ebp]
	fmul	ST(0), ST(6)
	fmul	QWORD PTR [ebx+eax*8]

; 1537 :           a1h[k][k][i][ii] += terma*side[k][i]*side[k][ii];

	mov	ebx, DWORD PTR tv11073[ebp]
	fsubr	QWORD PTR [edi-8]
	fstp	QWORD PTR [edi-8]
	fld	ST(1)
	fmul	QWORD PTR [ebx+edx-8]
	fadd	QWORD PTR [ecx-8]
	fstp	QWORD PTR [ecx-8]

; 1538 :           a1h[k][1-k][i][ii] += termb*side[k][i]*side[1-k][ii];

	fld	QWORD PTR [edx-8]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [edi-8]
	fstp	QWORD PTR [edi-8]
	jne	SHORT $LN122@sqcurve_st@8

; 1533 :         }
; 1534 :         for ( ii = 0 ; ii < SDIM ; ii++ )

	mov	edi, DWORD PTR tv10813[ebp]
	fstp	ST(1)
	fstp	ST(0)
$LN124@sqcurve_st@8:

; 1539 :         }
; 1540 :         a1h[k][k][i][i] += - s1s2*term;

	mov	ecx, DWORD PTR tv10160[ebp]
	fld	QWORD PTR _a1h$[ebp+ecx]

; 1541 :         a2h[k][k][i][i] += 0.5/s[k];
; 1542 :         for ( ii = 0 ; ii < SDIM ; ii++ )

	xor	ebx, ebx
	fsub	QWORD PTR tv4367[ebp]
	fstp	QWORD PTR _a1h$[ebp+ecx]
	lea	ecx, DWORD PTR _a2h$[ebp+ecx]
	fld	QWORD PTR tv10925[ebp]
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	esi, 4
	jl	$LN118@sqcurve_st@8
	mov	ecx, DWORD PTR tv10807[ebp]
	mov	ecx, DWORD PTR [ecx]
	fld	QWORD PTR [ecx+eax*8]
	add	ecx, 16					; 00000010H
	fmul	QWORD PTR __real@3fe0000000000000
	mov	DWORD PTR tv9449[ebp], ecx
	mov	ecx, DWORD PTR tv10559[ebp]
	add	ecx, eax
	fdiv	QWORD PTR [edi]
	lea	ecx, DWORD PTR [ecx+ecx*2]
	lea	edx, DWORD PTR [esi-4]
	add	ecx, ecx
	shr	edx, 2
	inc	edx
	lea	ebx, DWORD PTR [edx*4]
	mov	DWORD PTR _ii$[ebp], ebx
	mov	ebx, DWORD PTR tv9449[ebp]
	lea	ecx, DWORD PTR _a2h$[ebp+ecx*8+8]
	fdiv	QWORD PTR [edi]
	fdiv	QWORD PTR [edi]
$LN113@sqcurve_st@8:

; 1543 :           a2h[k][k][i][ii] += -0.5*side[k][i]/s[k]/s[k]/s[k]*side[k][ii];

	fld	QWORD PTR [ebx-16]
	add	ebx, 32					; 00000020H
	fmul	ST(0), ST(1)
	add	ecx, 32					; 00000020H
	dec	edx
	fsubr	QWORD PTR [ecx-40]
	fstp	QWORD PTR [ecx-40]
	fld	QWORD PTR [ebx-40]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [ecx-32]
	fstp	QWORD PTR [ecx-32]
	fld	ST(0)
	fmul	QWORD PTR [ebx-32]
	fsubr	QWORD PTR [ecx-24]
	fstp	QWORD PTR [ecx-24]
	fld	QWORD PTR [ebx-24]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [ecx-16]
	fstp	QWORD PTR [ecx-16]
	jne	SHORT $LN113@sqcurve_st@8

; 1539 :         }
; 1540 :         a1h[k][k][i][i] += - s1s2*term;

	mov	ebx, DWORD PTR _ii$[ebp]
	fstp	ST(0)
$LN118@sqcurve_st@8:

; 1541 :         a2h[k][k][i][i] += 0.5/s[k];
; 1542 :         for ( ii = 0 ; ii < SDIM ; ii++ )

	cmp	ebx, esi
	jge	SHORT $LN23@sqcurve_st@8
	mov	ecx, DWORD PTR tv10807[ebp]
	mov	ecx, DWORD PTR [ecx]
	fld	QWORD PTR [ecx+eax*8]
	lea	edx, DWORD PTR [ecx+ebx*8]
	fmul	QWORD PTR __real@3fe0000000000000
	mov	ecx, DWORD PTR tv10559[ebp]
	mov	DWORD PTR tv9934[ebp], edx
	add	ecx, eax
	fdiv	QWORD PTR [edi]
	lea	edx, DWORD PTR [ecx+ecx*2]
	lea	edx, DWORD PTR [ebx+edx*2]
	mov	ecx, esi
	sub	ecx, ebx
	mov	ebx, DWORD PTR tv9934[ebp]
	lea	edx, DWORD PTR _a2h$[ebp+edx*8]
	fdiv	QWORD PTR [edi]
	fdiv	QWORD PTR [edi]
$LC15@sqcurve_st@8:

; 1543 :           a2h[k][k][i][ii] += -0.5*side[k][i]/s[k]/s[k]/s[k]*side[k][ii];

	fld	ST(0)
	add	ebx, 8
	fmul	QWORD PTR [ebx-8]
	add	edx, 8
	dec	ecx
	fsubr	QWORD PTR [edx-8]
	fstp	QWORD PTR [edx-8]
	jne	SHORT $LC15@sqcurve_st@8

; 1541 :         a2h[k][k][i][i] += 0.5/s[k];
; 1542 :         for ( ii = 0 ; ii < SDIM ; ii++ )

	fstp	ST(0)
$LN23@sqcurve_st@8:

; 1527 :      for ( i = 0 ; i < SDIM ; i++ )

	mov	ecx, 56					; 00000038H
	add	DWORD PTR tv10357[ebp], ecx
	add	DWORD PTR tv10160[ebp], ecx
	inc	eax
	cmp	eax, esi
	jl	$LN117@sqcurve_st@8
	fstp	ST(3)
	fstp	ST(0)
	fstp	ST(1)
	fld	QWORD PTR _s1s2$[ebp]
	fxch	ST(1)
$LN26@sqcurve_st@8:

; 1522 :   for ( k = 0 ; k < 2 ; k++ )

	mov	eax, DWORD PTR tv10597[ebp]
	sub	DWORD PTR tv11029[ebp], 8
	add	DWORD PTR tv10811[ebp], 288		; 00000120H
	add	DWORD PTR tv10595[ebp], 6
	add	DWORD PTR tv10559[ebp], 18		; 00000012H
	mov	ecx, 4
	sub	DWORD PTR tv11027[ebp], ecx
	add	DWORD PTR tv10807[ebp], ecx
	add	eax, 864				; 00000360H
	add	edi, 8
	mov	DWORD PTR tv10813[ebp], edi
	mov	DWORD PTR tv10597[ebp], eax
	cmp	eax, 1728				; 000006c0H
	jl	$LN119@sqcurve_st@8
	fstp	ST(1)

; 1544 : 
; 1545 :      }
; 1546 :   }
; 1547 :   for ( k = 0 ; k < 2 ; k++ )

	xor	ebx, ebx
	fld	QWORD PTR __real@4028000000000000
	fld	QWORD PTR _a2$[ebp]
$LN125@sqcurve_st@8:

; 1548 :     for ( kk = 0 ; kk < 2 ; kk++ )

	mov	DWORD PTR _kk$[ebp], 0
$LN9@sqcurve_st@8:

; 1549 :      for ( i = 0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	test	esi, esi
	jle	$LN8@sqcurve_st@8
$LN6@sqcurve_st@8:

; 1550 :       for ( ii = 0 ; ii < SDIM ; ii++ )

	xor	eax, eax
	test	esi, esi
	jle	$LN5@sqcurve_st@8
	lea	edx, DWORD PTR [ebx+ebx*2]
	lea	edx, DWORD PTR [ecx+edx*2]
	add	edx, edx
	add	edx, edx
	add	edx, edx
	fld	QWORD PTR _a1g$[ebp+edx]
	mov	esi, DWORD PTR _kk$[ebp]
	fmul	ST(0), ST(2)
	lea	edi, DWORD PTR [esi+esi*2]
	fld	QWORD PTR _a1$[ebp]
	lea	esi, DWORD PTR [esi+ebx*2]
	fmulp	ST(3), ST(0)
	shl	edi, 4
	fxch	ST(2)
	mov	DWORD PTR tv11878[ebp], edi
	fdiv	QWORD PTR __real@4042000000000000
	faddp	ST(3), ST(0)
	fld	ST(2)
	fmul	QWORD PTR _a1g$[ebp+edx]
	lea	edx, DWORD PTR _a2g$[ebp+edx]
	fld	QWORD PTR tv4005[ebp]
	mov	DWORD PTR tv4044[ebp], edx
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR tv4491[ebp], edx
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv4506[ebp], edx
	lea	edx, DWORD PTR [esi+esi*2]
	lea	esi, DWORD PTR [ecx+edx*2]
	lea	edx, DWORD PTR [esi+esi*2]
	shl	edx, 4
	mov	DWORD PTR tv11880[ebp], edx
	jmp	SHORT $LN3@sqcurve_st@8
$LN171@sqcurve_st@8:

; 1527 :      for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)
	fstp	ST(1)
	fstp	ST(0)
	jmp	$LN26@sqcurve_st@8
$LN115@sqcurve_st@8:

; 1550 :       for ( ii = 0 ; ii < SDIM ; ii++ )

	mov	edi, DWORD PTR tv11878[ebp]
	mov	edx, DWORD PTR tv11880[ebp]
$LN3@sqcurve_st@8:
	lea	edx, DWORD PTR [edx+eax*8]

; 1551 :       { REAL f = 2*((a1h[k][kk][i][ii]*(1+12*a1/36)+12*a1g[k][i]*a1g[kk][ii]/36)/a2
; 1552 :                          - a1g[k][i]*(1+12*a1/36)*a2g[kk][ii]/a2/a2
; 1553 :                          - a1g[kk][ii]*(1+12*a1/36)*a2g[k][i]/a2/a2
; 1554 :                          - (a1+6*a1*a1/36)*a2h[k][kk][i][ii]/a2/a2
; 1555 :                          + 2*(a1+6*a1*a1/36)*a2g[k][i]*a2g[kk][ii]/a2/a2/a2);

	fld	QWORD PTR _a1h$[ebp+edx]
	lea	esi, DWORD PTR [edi+eax*8]
	fmul	ST(0), ST(5)
	lea	esi, DWORD PTR _a1g$[ebp+esi]
	fld	QWORD PTR [esi]
	lea	edi, DWORD PTR [edi+eax*8]
	fmul	ST(0), ST(5)
	lea	edi, DWORD PTR _a2g$[ebp+edi]
	mov	edx, DWORD PTR tv4044[ebp]
	fdiv	QWORD PTR __real@4042000000000000
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(3)
	fld	QWORD PTR [edi]
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [esi]
	fmul	ST(0), ST(6)

; 1556 :          h[k?k2+1:k1+1][kk?k2+1:k1+1][i][ii] += f;

	mov	esi, DWORD PTR _k2$[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv11880[ebp]
	lea	edx, DWORD PTR [edx+eax*8]
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _a2h$[ebp+edx]
	fmul	QWORD PTR tv4003[ebp]
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edi]
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fadd	ST(0), ST(0)
	test	ebx, ebx
	jne	SHORT $LN247@sqcurve_st@8
	mov	esi, DWORD PTR _k1$[ebp]
$LN247@sqcurve_st@8:
	mov	edx, DWORD PTR _k2$[ebp]
	inc	esi
	cmp	DWORD PTR _kk$[ebp], 0
	jne	SHORT $LN248@sqcurve_st@8
	mov	edx, DWORD PTR _k1$[ebp]
$LN248@sqcurve_st@8:

; 1550 :       for ( ii = 0 ; ii < SDIM ; ii++ )

	mov	edi, DWORD PTR _h$[ebp]

; 1556 :          h[k?k2+1:k1+1][kk?k2+1:k1+1][i][ii] += f;

	fld	ST(0)
	mov	esi, DWORD PTR [edi+esi*4]
	inc	edx
	mov	edx, DWORD PTR [esi+edx*4]
	mov	edx, DWORD PTR [edx+ecx*4]
	fadd	QWORD PTR [edx+eax*8]
	lea	esi, DWORD PTR [edx+eax*8]

; 1557 :          h[k?k2+1:k1+1][0][i][ii] += -f;

	mov	edx, DWORD PTR _k2$[ebp]
	fstp	QWORD PTR [esi]
	test	ebx, ebx
	jne	SHORT $LN249@sqcurve_st@8
	mov	edx, DWORD PTR _k1$[ebp]
$LN249@sqcurve_st@8:
	inc	edx

; 1558 :          h[0][kk?k2+1:k1+1][i][ii] += -f;

	cmp	DWORD PTR _kk$[ebp], 0
	mov	edx, DWORD PTR [edi+edx*4]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	esi, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _k2$[ebp]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [esi]
	jne	SHORT $LN250@sqcurve_st@8
	mov	edx, DWORD PTR _k1$[ebp]
$LN250@sqcurve_st@8:

; 1550 :       for ( ii = 0 ; ii < SDIM ; ii++ )

	mov	esi, DWORD PTR tv4491[ebp]

; 1558 :          h[0][kk?k2+1:k1+1][i][ii] += -f;

	inc	edx
	mov	edx, DWORD PTR [esi+edx*4]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	esi, DWORD PTR [edx+eax*8]

; 1559 :          h[0][0][i][ii] += f;

	mov	edx, DWORD PTR tv4506[ebp]
	fsub	ST(0), ST(1)
	inc	eax
	fstp	QWORD PTR [esi]
	fadd	QWORD PTR [edx+eax*8-8]
	fstp	QWORD PTR [edx+eax*8-8]
	mov	esi, DWORD PTR _web+616
	cmp	eax, esi
	jl	$LN115@sqcurve_st@8

; 1550 :       for ( ii = 0 ; ii < SDIM ; ii++ )

	fstp	ST(4)
	fstp	ST(2)
	fstp	ST(1)
	fstp	ST(1)
	fld	QWORD PTR __real@4028000000000000
	fld1
	fxch	ST(2)
$LN5@sqcurve_st@8:

; 1549 :      for ( i = 0 ; i < SDIM ; i++ )

	inc	ecx
	cmp	ecx, esi
	jl	$LN6@sqcurve_st@8
$LN8@sqcurve_st@8:

; 1548 :     for ( kk = 0 ; kk < 2 ; kk++ )

	mov	eax, DWORD PTR _kk$[ebp]
	inc	eax
	mov	DWORD PTR _kk$[ebp], eax
	cmp	eax, 2
	jl	$LN9@sqcurve_st@8

; 1544 : 
; 1545 :      }
; 1546 :   }
; 1547 :   for ( k = 0 ; k < 2 ; k++ )

	inc	ebx
	cmp	ebx, 2
	jl	$LN125@sqcurve_st@8

; 1560 :       }
; 1561 :   return energy;
; 1562 : 
; 1563 : } // end sqcurve_string_marked_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(0)
	pop	edi
	fstp	ST(0)
	pop	esi
	fstp	ST(0)
	fld	QWORD PTR _energy$[ebp]
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_sqcurve_string_marked_hess ENDP
_TEXT	ENDS
PUBLIC	??_C@_06CNJIKMCI@h_zero?$AA@			; `string'
PUBLIC	_sqcurve2_string_init
EXTRN	_localbase:DWORD
EXTRN	_lookup_global:PROC
;	COMDAT ??_C@_06CNJIKMCI@h_zero?$AA@
CONST	SEGMENT
??_C@_06CNJIKMCI@h_zero?$AA@ DB 'h_zero', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _sqcurve2_string_init
_TEXT	SEGMENT
_eltype$ = -4						; size = 4
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_sqcurve2_string_init PROC				; COMDAT

; 1583 : { int eltype;

	push	ebp
	mov	ebp, esp
	push	ecx

; 1584 :   int k;
; 1585 :   
; 1586 :   if ( web.modeltype != LINEAR )

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN4@sqcurve2_s

; 1587 :     kb_error(3211,"Method sqcurve_string only for LINEAR model.\n",
; 1588 :        RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CO@PPFAEFFP@Method?5sqcurve_string?5only?5for?5L@
	push	3211					; 00000c8bH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN4@sqcurve2_s:

; 1589 : 
; 1590 :   /* see if using (H - H_0)^2 adjustment */
; 1591 :   h0_flag = 0;
; 1592 :   h0_attr = find_extra("h_zero",&eltype);

	lea	eax, DWORD PTR _eltype$[ebp]
	push	eax
	push	OFFSET ??_C@_06CNJIKMCI@h_zero?$AA@
	mov	DWORD PTR _h0_flag, 0
	call	_find_extra
	add	esp, 8
	mov	DWORD PTR _h0_attr, eax

; 1593 :   if ( h0_attr >= 0 )

	test	eax, eax
	js	SHORT $LN3@sqcurve2_s

; 1594 :     h0_flag = H0_IN_ATTR; 

	mov	DWORD PTR _h0_flag, 2

; 1600 :     }
; 1601 :   }
; 1602 : 
; 1603 : } // end sqcurve2_string_init()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@sqcurve2_s:

; 1595 :   else
; 1596 :   { k = lookup_global("h_zero");

	push	OFFSET ??_C@_06CNJIKMCI@h_zero?$AA@
	call	_lookup_global
	add	esp, 4

; 1597 :     if ( k >= 0 ) 

	test	eax, eax
	js	$LN1@sqcurve2_s

; 1598 :     { h0_flag = H0_IN_GLOBAL;
; 1599 :       h0_value = globals(k)->value.real;

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	mov	DWORD PTR _h0_flag, 1
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN7@sqcurve2_s
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN9@sqcurve2_s
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+64]
	fstp	QWORD PTR _h0_value

; 1600 :     }
; 1601 :   }
; 1602 : 
; 1603 : } // end sqcurve2_string_init()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@sqcurve2_s:

; 1598 :     { h0_flag = H0_IN_GLOBAL;
; 1599 :       h0_value = globals(k)->value.real;

	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN7@sqcurve2_s
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [eax+64]
	fstp	QWORD PTR _h0_value

; 1600 :     }
; 1601 :   }
; 1602 : 
; 1603 : } // end sqcurve2_string_init()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@sqcurve2_s:

; 1598 :     { h0_flag = H0_IN_GLOBAL;
; 1599 :       h0_value = globals(k)->value.real;

	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
	fld	QWORD PTR [eax+64]
	fstp	QWORD PTR _h0_value
$LN1@sqcurve2_s:

; 1600 :     }
; 1601 :   }
; 1602 : 
; 1603 : } // end sqcurve2_string_init()

	mov	esp, ebp
	pop	ebp
	ret	0
_sqcurve2_string_init ENDP
_TEXT	ENDS
PUBLIC	_sqcurve2_string_value
; Function compile flags: /Ogtp
;	COMDAT _sqcurve2_string_value
_TEXT	SEGMENT
_s1$ = -8						; size = 8
_v_info$ = 8						; size = 4
_sqcurve2_string_value PROC				; COMDAT

; 1615 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx

; 1616 :   REAL s1,s2,s1xs2;  /* edge lengths */
; 1617 :   REAL *side1 = v_info->sides[0][0],*side2 = v_info->sides[0][1];

	mov	ebx, DWORD PTR _v_info$[ebp]

; 1618 :   REAL energy;
; 1619 :   REAL h,h0,hh,a1,a2;
; 1620 : 
; 1621 :   if ( v_info->vcount < 3 ) return 0.;

	cmp	DWORD PTR [ebx+12], 3
	mov	eax, DWORD PTR [ebx+1276]
	mov	eax, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [eax]
	push	edi
	mov	edi, DWORD PTR [eax+4]
	jge	SHORT $LN4@sqcurve2_s@2
	fldz
	pop	edi
	pop	esi
	pop	ebx

; 1638 : 
; 1639 :   return energy;
; 1640 : } // end sqcurve2_string_value()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@sqcurve2_s@2:

; 1622 : 
; 1623 :   s1 = sqrt(SDIM_dot(side1,side1));

	mov	ecx, DWORD PTR _web+616
	push	ecx
	push	esi
	push	esi
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR _s1$[ebp]

; 1624 :   s2 = sqrt(SDIM_dot(side2,side2));

	mov	edx, DWORD PTR _web+616
	push	edx
	push	edi
	push	edi
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt

; 1625 :   s1xs2 = side1[0]*side2[1] - side1[1]*side2[0];
; 1626 : 
; 1627 :   a1 = s1xs2/s1/s2;  /* sin(theta) */
; 1628 :   a2 = (s1 + s2)/2;

	fld	ST(0)
	fld	QWORD PTR _s1$[ebp]
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR __real@3fe0000000000000

; 1629 :   if ( a2 == 0.0 ) return 0.0;

	fld	ST(0)
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@sqcurve2_s@2
	fstp	ST(1)
	pop	edi
	fstp	ST(2)
	pop	esi
	fstp	ST(0)
	pop	ebx

; 1638 : 
; 1639 :   return energy;
; 1640 : } // end sqcurve2_string_value()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@sqcurve2_s@2:

; 1630 : 
; 1631 :   h = a1/a2;  /* curvature */
; 1632 :   if ( h0_flag == H0_IN_ATTR )

	cmp	DWORD PTR _h0_flag, 2
	fstp	ST(0)
	fld	QWORD PTR [edi+8]
	fmul	QWORD PTR [esi]
	fld	QWORD PTR [esi+8]
	fmul	QWORD PTR [edi]
	fsubp	ST(1), ST(0)
	fdivrp	ST(2), ST(0)
	fxch	ST(1)
	fdivrp	ST(2), ST(0)
	fdiv	ST(1), ST(0)
	jne	SHORT $LN2@sqcurve2_s@2

; 1633 :     h0 = *VREAL(v_info->id,h0_attr);

	mov	eax, DWORD PTR _h0_attr
	mov	edx, DWORD PTR _dymem
	imul	eax, 240				; 000000f0H
	add	eax, DWORD PTR _web+104
	mov	ecx, DWORD PTR [ebx]
	mov	eax, DWORD PTR [eax+edx+64]
	mov	edx, DWORD PTR _web+12
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	pop	edi
	pop	esi
	fld	QWORD PTR [eax+ecx]
	pop	ebx

; 1636 :   hh = (h - h0)*(h - h0);  /* square net curvature */

	fsubp	ST(2), ST(0)
	fld	ST(1)
	fmulp	ST(2), ST(0)

; 1637 :   energy = a2*hh;

	fmulp	ST(1), ST(0)

; 1638 : 
; 1639 :   return energy;
; 1640 : } // end sqcurve2_string_value()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@sqcurve2_s@2:

; 1634 :   else
; 1635 :     h0 = h0_value;

	fld	QWORD PTR _h0_value
	pop	edi

; 1636 :   hh = (h - h0)*(h - h0);  /* square net curvature */

	fsubp	ST(2), ST(0)
	pop	esi
	pop	ebx
	fld	ST(1)
	fmulp	ST(2), ST(0)

; 1637 :   energy = a2*hh;

	fmulp	ST(1), ST(0)

; 1638 : 
; 1639 :   return energy;
; 1640 : } // end sqcurve2_string_value()

	mov	esp, ebp
	pop	ebp
	ret	0
_sqcurve2_string_value ENDP
_TEXT	ENDS
PUBLIC	_v_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_sqcurve2_string_grad
; Function compile flags: /Ogtp
;	COMDAT _sqcurve2_string_grad
_TEXT	SEGMENT
_energy$ = -284						; size = 8
tv853 = -276						; size = 8
tv835 = -268						; size = 8
_s1xs2$ = -260						; size = 8
_s$ = -252						; size = 16
tv1914 = -236						; size = 4
_v_info$GSCopy$ = -232					; size = 4
_i$ = -228						; size = 4
_side$ = -224						; size = 8
_s1$ = -224						; size = 8
tv1908 = -216						; size = 4
tv2129 = -212						; size = 4
tv2127 = -208						; size = 4
tv1085 = -204						; size = 4
tv2438 = -200						; size = 4
tv2432 = -200						; size = 4
tv2422 = -200						; size = 4
tv2416 = -200						; size = 4
tv2407 = -200						; size = 4
_a2g$ = -196						; size = 96
_a1g$ = -100						; size = 96
__$ArrayPad$ = -4					; size = 4
_v_info$ = 8						; size = 4
_sqcurve2_string_grad PROC				; COMDAT

; 1652 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 284				; 0000011cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _v_info$[ebp]

; 1653 :   REAL s1,s2,s1xs2;  /* edge lengths */
; 1654 :   REAL *side1 = v_info->sides[0][0],*side2 = v_info->sides[0][1];
; 1655 :   int  i,k;
; 1656 :   REAL hh,h,h0,a1,a2,energy;
; 1657 :   REAL a1g[2][MAXCOORD],a2g[2][MAXCOORD];
; 1658 :   REAL s[2];
; 1659 :   REAL *side[2];
; 1660 : 
; 1661 :   if ( v_info->vcount < 3 ) return 0.;

	cmp	DWORD PTR [edi+12], 3
	mov	eax, DWORD PTR [edi+1276]
	mov	eax, DWORD PTR [eax]
	mov	esi, DWORD PTR [eax]
	mov	ebx, DWORD PTR [eax+4]

; 1684 :     { a1g[k][i] = (k==i?1:-1)*side[1-k][1-i]/s1/s2 - coeff*side[k][i];

	mov	DWORD PTR _v_info$GSCopy$[ebp], edi
	jl	SHORT $LN74@sqcurve2_s@3

; 1662 : 
; 1663 :   s1 = sqrt(SDIM_dot(side1,side1));

	mov	ecx, DWORD PTR _web+616
	push	ecx
	push	esi
	push	esi
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR _s1$[ebp]

; 1664 :   s2 = sqrt(SDIM_dot(side2,side2));

	mov	edx, DWORD PTR _web+616
	push	edx
	push	ebx
	push	ebx
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt

; 1665 :   s1xs2 = side1[0]*side2[1] - side1[1]*side2[0];

	fld	QWORD PTR [ebx+8]
	fmul	QWORD PTR [esi]
	fld	QWORD PTR [esi+8]
	fmul	QWORD PTR [ebx]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _s1xs2$[ebp]

; 1666 : 
; 1667 :   a1 = s1xs2/s1/s2;  /* sin(theta) */

	fld	ST(0)
	fld	QWORD PTR _s1$[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(3)

; 1668 :   a2 = (s1 + s2)/2;

	fld	ST(3)
	fadd	ST(0), ST(2)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)

; 1669 :   if ( a2 == 0.0 ) return 0.0;

	fld	ST(1)
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN18@sqcurve2_s@3
	fstp	ST(5)
	fstp	ST(2)
	fstp	ST(0)
	fstp	ST(2)
	fstp	ST(1)
	fstp	ST(0)
$LN74@sqcurve2_s@3:
	fldz
	pop	edi
	pop	esi
	pop	ebx

; 1695 :     }
; 1696 :   return energy;
; 1697 : 
; 1698 : } // end sqcurve2_string_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@sqcurve2_s@3:

; 1670 : 
; 1671 :   h = a1/a2;  /* curvature */
; 1672 :   if ( h0_flag == H0_IN_ATTR )

	cmp	DWORD PTR _h0_flag, 2
	fxch	ST(2)
	fdiv	ST(0), ST(1)
	fst	QWORD PTR tv835[ebp]
	jne	SHORT $LN17@sqcurve2_s@3

; 1673 :     h0 = *VREAL(v_info->id,h0_attr);

	mov	ecx, DWORD PTR _h0_attr
	mov	eax, DWORD PTR [edi]
	imul	ecx, 240				; 000000f0H
	mov	edx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	add	ecx, DWORD PTR _web+104
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edx+64]
	fld	QWORD PTR [eax+ecx]

; 1674 :   else

	jmp	SHORT $LN16@sqcurve2_s@3
$LN17@sqcurve2_s@3:

; 1675 :     h0 = h0_value;

	fld	QWORD PTR _h0_value
$LN16@sqcurve2_s@3:

; 1676 :   hh = (h - h0)*(h - h0);  /* square net curvature */

	fsubp	ST(1), ST(0)

; 1677 :   energy = a2*hh;
; 1678 : 
; 1679 : 
; 1680 :   side[0] = side1; side[1] = side2; s[0] = s1; s[1] = s2;
; 1681 :   for ( k = 0 ; k < 2 ; k++ )

	xor	ecx, ecx
	lea	edx, DWORD PTR _side$[ebp+4]
	lea	eax, DWORD PTR _s$[ebp+8]
	fst	QWORD PTR tv853[ebp]
	mov	DWORD PTR _side$[ebp], esi
	fmul	ST(0), ST(0)
	mov	DWORD PTR _side$[ebp+4], ebx
	mov	ebx, DWORD PTR _web+616
	xor	esi, esi
	fld	ST(0)
	mov	DWORD PTR tv1908[ebp], ecx
	fmul	ST(0), ST(2)
	mov	DWORD PTR tv1914[ebp], ecx
	mov	DWORD PTR tv2127[ebp], edx
	mov	DWORD PTR tv2129[ebp], eax
	fstp	QWORD PTR _energy$[ebp]
	fxch	ST(3)
	fst	QWORD PTR _s$[ebp]
	fxch	ST(5)
	fst	QWORD PTR _s$[ebp+8]
	jmp	SHORT $LN15@sqcurve2_s@3
$LN35@sqcurve2_s@3:

; 1676 :   hh = (h - h0)*(h - h0);  /* square net curvature */

	fld	QWORD PTR _s1xs2$[ebp]
	fxch	ST(4)
$LN15@sqcurve2_s@3:

; 1682 :   { REAL coeff = s1xs2/s[k]/s[k]/s[k]/s[1-k];

	fxch	ST(4)
	mov	edx, DWORD PTR tv2129[ebp]
	fdiv	QWORD PTR _s$[ebp+esi*8]
	fdiv	QWORD PTR _s$[ebp+esi*8]
	fdiv	QWORD PTR _s$[ebp+esi*8]
	fdiv	QWORD PTR [edx]

; 1683 :     for ( i = 0 ; i < SDIM ; i++ )

	xor	edx, edx
	mov	DWORD PTR _i$[ebp], edx
	cmp	ebx, 4
	jl	$LC33@sqcurve2_s@3

; 1682 :   { REAL coeff = s1xs2/s[k]/s[k]/s[k]/s[1-k];

	mov	edi, DWORD PTR tv2127[ebp]
	mov	eax, DWORD PTR _side$[ebp+esi*4]
	mov	edi, DWORD PTR [edi]
	add	eax, 16					; 00000010H
	mov	DWORD PTR tv1085[ebp], 2
	sub	edi, 8

; 1683 :     for ( i = 0 ; i < SDIM ; i++ )

$LN34@sqcurve2_s@3:

; 1684 :     { a1g[k][i] = (k==i?1:-1)*side[1-k][1-i]/s1/s2 - coeff*side[k][i];

	xor	ebx, ebx
	cmp	esi, edx
	sete	bl
	mov	edx, DWORD PTR tv1085[ebp]
	dec	edx
	lea	ebx, DWORD PTR [ebx+ebx-1]
	mov	DWORD PTR tv2438[ebp], ebx
	fild	DWORD PTR tv2438[ebp]
	xor	ebx, ebx
	cmp	esi, edx
	sete	bl
	fmul	QWORD PTR [edi+16]
	mov	edx, DWORD PTR tv1085[ebp]
	fdiv	ST(0), ST(6)
	lea	ebx, DWORD PTR [ebx+ebx-1]
	mov	DWORD PTR tv2432[ebp], ebx
	xor	ebx, ebx
	cmp	esi, edx
	sete	bl

; 1685 :       a2g[k][i] = 0.5*side[k][i]/s[k];

	inc	edx
	lea	ebx, DWORD PTR [ebx+ebx-1]
	fdiv	ST(0), ST(5)
	fld	ST(1)
	fmul	QWORD PTR [eax-16]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _a1g$[ebp+ecx]
	fld	QWORD PTR [eax-16]
	fmul	ST(0), ST(3)
	fdiv	QWORD PTR _s$[ebp+esi*8]
	fstp	QWORD PTR _a2g$[ebp+ecx]
	fild	DWORD PTR tv2432[ebp]
	mov	DWORD PTR tv2422[ebp], ebx
	xor	ebx, ebx
	cmp	esi, edx
	fmul	QWORD PTR [edi+8]
	sete	bl
	mov	edx, DWORD PTR _i$[ebp]
	add	DWORD PTR tv1085[ebp], 4
	fdiv	ST(0), ST(6)
	add	edx, 4
	sub	edi, 32					; 00000020H
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	lea	ebx, DWORD PTR [ebx+ebx-1]
	mov	DWORD PTR _i$[ebp], edx
	fdiv	ST(0), ST(5)
	fld	ST(1)
	fmul	QWORD PTR [eax-40]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _a1g$[ebp+ecx-24]
	fld	QWORD PTR [eax-40]
	fmul	ST(0), ST(3)
	fdiv	QWORD PTR _s$[ebp+esi*8]
	fstp	QWORD PTR _a2g$[ebp+ecx-24]
	fild	DWORD PTR tv2422[ebp]
	mov	DWORD PTR tv2416[ebp], ebx
	mov	ebx, DWORD PTR _web+616
	add	ebx, -3					; fffffffdH
	fmul	QWORD PTR [edi+32]
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(5)
	fld	QWORD PTR [eax-32]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _a1g$[ebp+ecx-16]
	fld	QWORD PTR [eax-32]
	fmul	ST(0), ST(3)
	fdiv	QWORD PTR _s$[ebp+esi*8]
	fstp	QWORD PTR _a2g$[ebp+ecx-16]
	fild	DWORD PTR tv2416[ebp]
	fmul	QWORD PTR [edi+24]
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(5)
	fld	ST(1)
	fmul	QWORD PTR [eax-24]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _a1g$[ebp+ecx-8]
	fld	QWORD PTR [eax-24]
	fmul	ST(0), ST(3)
	fdiv	QWORD PTR _s$[ebp+esi*8]
	fstp	QWORD PTR _a2g$[ebp+ecx-8]
	cmp	edx, ebx
	jl	$LN34@sqcurve2_s@3
	mov	ebx, DWORD PTR _web+616
	mov	edi, DWORD PTR _v_info$GSCopy$[ebp]
$LC33@sqcurve2_s@3:

; 1683 :     for ( i = 0 ; i < SDIM ; i++ )

	cmp	edx, ebx
	jge	$LN52@sqcurve2_s@3
	mov	ecx, DWORD PTR tv2127[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _side$[ebp+esi*4]
	lea	edi, DWORD PTR [edx*8]
	sub	ecx, edi
	add	eax, edi
	mov	edi, DWORD PTR tv1908[ebp]
	add	edi, edx
	add	edi, edi
	add	edi, edi
	add	ecx, 8
	add	edi, edi
$LC12@sqcurve2_s@3:

; 1684 :     { a1g[k][i] = (k==i?1:-1)*side[1-k][1-i]/s1/s2 - coeff*side[k][i];

	xor	ebx, ebx
	cmp	esi, edx
	sete	bl
	inc	edx
	sub	ecx, 8
	add	eax, 8
	add	edi, 8
	lea	ebx, DWORD PTR [ebx+ebx-1]
	mov	DWORD PTR tv2407[ebp], ebx
	fild	DWORD PTR tv2407[ebp]
	mov	ebx, DWORD PTR _web+616
	fmul	QWORD PTR [ecx+8]
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(5)
	fld	QWORD PTR [eax-8]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _a1g$[ebp+edi-8]

; 1685 :       a2g[k][i] = 0.5*side[k][i]/s[k];

	fld	QWORD PTR [eax-8]
	fmul	ST(0), ST(3)
	fdiv	QWORD PTR _s$[ebp+esi*8]
	fstp	QWORD PTR _a2g$[ebp+edi-8]
	cmp	edx, ebx
	jl	SHORT $LC12@sqcurve2_s@3

; 1683 :     for ( i = 0 ; i < SDIM ; i++ )

	mov	edi, DWORD PTR _v_info$GSCopy$[ebp]
$LN52@sqcurve2_s@3:

; 1677 :   energy = a2*hh;
; 1678 : 
; 1679 : 
; 1680 :   side[0] = side1; side[1] = side2; s[0] = s1; s[1] = s2;
; 1681 :   for ( k = 0 ; k < 2 ; k++ )

	mov	ecx, DWORD PTR tv1914[ebp]

; 1683 :     for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)
	sub	DWORD PTR tv2129[ebp], 8
	sub	DWORD PTR tv2127[ebp], 4
	add	DWORD PTR tv1908[ebp], 6
	add	ecx, 48					; 00000030H
	inc	esi
	mov	DWORD PTR tv1914[ebp], ecx
	cmp	ecx, 96					; 00000060H
	jl	$LN35@sqcurve2_s@3

; 1686 :     }
; 1687 :   }
; 1688 :   for ( i = 0 ; i < SDIM ; i++ ) v_info->grad[0][i] = 0.0;

	fstp	ST(3)
	xor	eax, eax
	fstp	ST(3)
	fstp	ST(2)
	test	ebx, ebx
	jle	SHORT $LN7@sqcurve2_s@3
	fldz
$LN9@sqcurve2_s@3:
	mov	edx, DWORD PTR [edi+1336]
	mov	ecx, DWORD PTR [edx]
	fst	QWORD PTR [ecx+eax*8]
	mov	ebx, DWORD PTR _web+616
	inc	eax
	cmp	eax, ebx
	jl	SHORT $LN9@sqcurve2_s@3
	fstp	ST(0)
$LN7@sqcurve2_s@3:

; 1689 :   for ( k = 0 ; k < 2 ; k++ )

	fld	QWORD PTR __real@4000000000000000
	xor	esi, esi
	fld	QWORD PTR tv853[ebp]
	xor	edx, edx
$LN36@sqcurve2_s@3:

; 1690 :     for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	test	ebx, ebx
	jle	SHORT $LN5@sqcurve2_s@3
	fld	QWORD PTR tv835[ebp]
	fdiv	ST(0), ST(3)
	fld	ST(3)
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(2)
$LN3@sqcurve2_s@3:
	lea	ebx, DWORD PTR [edx+eax*8]

; 1691 :     { REAL f;
; 1692 :       f = a2g[k][i]*hh + a2*2*(h - h0)*(a1g[k][i]/a2 - a1/a2/a2*a2g[k][i]);

	fld	QWORD PTR _a1g$[ebp+ebx]
	lea	ecx, DWORD PTR [edx+eax*8]
	fdiv	ST(0), ST(5)
	lea	ecx, DWORD PTR _a2g$[ebp+ecx]
	fld	ST(2)
	fmul	QWORD PTR [ecx]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fld	ST(6)
	fmul	QWORD PTR [ecx]

; 1693 :       v_info->grad[k+1][i] = f; 

	mov	ecx, DWORD PTR [edi+1336]
	mov	ecx, DWORD PTR [esi+ecx+4]
	faddp	ST(1), ST(0)
	fst	QWORD PTR [ecx+eax*8]

; 1694 :       v_info->grad[0][i] += -f; 

	mov	ecx, DWORD PTR [edi+1336]
	mov	ecx, DWORD PTR [ecx]
	fsubr	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fstp	QWORD PTR [ecx]
	mov	ebx, DWORD PTR _web+616
	cmp	eax, ebx
	jl	SHORT $LN3@sqcurve2_s@3

; 1690 :     for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(1)
	fstp	ST(0)
$LN5@sqcurve2_s@3:

; 1689 :   for ( k = 0 ; k < 2 ; k++ )

	add	edx, 48					; 00000030H
	add	esi, 4
	cmp	edx, 96					; 00000060H
	jl	SHORT $LN36@sqcurve2_s@3

; 1695 :     }
; 1696 :   return energy;
; 1697 : 
; 1698 : } // end sqcurve2_string_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(1)
	fstp	ST(1)
	pop	edi
	fstp	ST(1)
	pop	esi
	fstp	ST(0)
	xor	ecx, ebp
	fld	QWORD PTR _energy$[ebp]
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_sqcurve2_string_grad ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CP@IPJACDOM@Method?5sqcurve3_string?5only?5for?5@ ; `string'
PUBLIC	_sqcurve3_string_init
;	COMDAT ??_C@_0CP@IPJACDOM@Method?5sqcurve3_string?5only?5for?5@
CONST	SEGMENT
??_C@_0CP@IPJACDOM@Method?5sqcurve3_string?5only?5for?5@ DB 'Method sqcur'
	DB	've3_string only for LINEAR model.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _sqcurve3_string_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_sqcurve3_string_init PROC				; COMDAT

; 1717 :   if ( web.modeltype != LINEAR )

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN1@sqcurve3_s

; 1718 :     kb_error(4864,"Method sqcurve3_string only for LINEAR model.\n",
; 1719 :        RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CP@IPJACDOM@Method?5sqcurve3_string?5only?5for?5@
	push	4864					; 00001300H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@sqcurve3_s:

; 1720 : } // end sqcurve3_string_init()

	ret	0
_sqcurve3_string_init ENDP
_TEXT	ENDS
PUBLIC	__real@8000000000000000
PUBLIC	__real@3ff8000000000000
PUBLIC	__real@bfe0000000000000
PUBLIC	_v_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_sqcurve3_string_all
EXTRN	__chkstk:PROC
;	COMDAT __real@8000000000000000
CONST	SEGMENT
__real@8000000000000000 DQ 08000000000000000r	; -0
CONST	ENDS
;	COMDAT __real@3ff8000000000000
CONST	SEGMENT
__real@3ff8000000000000 DQ 03ff8000000000000r	; 1.5
CONST	ENDS
;	COMDAT __real@bfe0000000000000
CONST	SEGMENT
__real@bfe0000000000000 DQ 0bfe0000000000000r	; -0.5
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _sqcurve3_string_all
_TEXT	SEGMENT
_a2$ = -5696						; size = 8
tv1821 = -5688						; size = 8
tv1811 = -5680						; size = 8
tv1814 = -5672						; size = 8
tv5420 = -5664						; size = 8
tv3235 = -5660						; size = 4
tv4657 = -5656						; size = 8
tv3239 = -5652						; size = 4
tv2184 = -5648						; size = 8
tv3231 = -5644						; size = 4
tv4610 = -5640						; size = 8
tv3243 = -5636						; size = 4
tv2198 = -5632						; size = 8
tv3227 = -5628						; size = 4
tv4649 = -5624						; size = 8
tv3247 = -5620						; size = 4
tv2092 = -5616						; size = 8
_s1s2$ = -5616						; size = 8
tv3219 = -5608						; size = 4
tv3223 = -5604						; size = 4
tv3207 = -5600						; size = 4
tv3203 = -5596						; size = 4
tv3211 = -5592						; size = 4
tv1820 = -5588						; size = 8
_s2$ = -5588						; size = 8
_energy$ = -5580					; size = 8
_s1$ = -5580						; size = 8
tv4635 = -5572						; size = 8
tv3564 = -5568						; size = 4
tv3271 = -5568						; size = 4
tv4590 = -5564						; size = 8
tv1864 = -5564						; size = 8
tv3251 = -5560						; size = 4
tv4568 = -5556						; size = 8
tv3568 = -5552						; size = 4
tv3267 = -5552						; size = 4
tv1834 = -5548						; size = 8
tv3263 = -5544						; size = 4
tv4583 = -5540						; size = 8
tv1858 = -5540						; size = 8
tv3255 = -5536						; size = 4
tv1810 = -5532						; size = 8
tv374 = -5532						; size = 8
tv4639 = -5524						; size = 8
tv3591 = -5524						; size = 8
tv3576 = -5524						; size = 8
tv3259 = -5520						; size = 4
tv2142 = -5516						; size = 8
tv5329 = -5512						; size = 4
tv3555 = -5512						; size = 4
_side1$ = -5512						; size = 4
tv3183 = -5508						; size = 4
_kk$ = -5508						; size = 4
_v_info$GSCopy$ = -5504					; size = 4
tv5309 = -5500						; size = 4
tv3547 = -5500						; size = 4
tv3187 = -5500						; size = 4
tv4451 = -5496						; size = 4
tv3191 = -5496						; size = 4
_k$ = -5496						; size = 4
tv3395 = -5492						; size = 8
tv3382 = -5492						; size = 8
tv3370 = -5492						; size = 8
tv3350 = -5492						; size = 8
tv3321 = -5492						; size = 8
tv3311 = -5492						; size = 8
tv3291 = -5492						; size = 8
tv3071 = -5492						; size = 8
tv2058 = -5492						; size = 8
tv2032 = -5492						; size = 8
tv1845 = -5492						; size = 8
tv5313 = -5484						; size = 4
tv3199 = -5484						; size = 4
_i$ = -5484						; size = 4
tv5257 = -5480						; size = 4
tv3935 = -5480						; size = 4
tv3559 = -5480						; size = 4
tv3195 = -5480						; size = 4
_dda1$ = -5476						; size = 2592
_dda2$ = -2884						; size = 2592
_da1$ = -292						; size = 144
_da2$ = -148						; size = 144
__$ArrayPad$ = -4					; size = 4
_v_info$ = 8						; size = 4
_mode$ = 12						; size = 4
_sqcurve3_string_all PROC				; COMDAT

; 1735 : {

	push	ebp
	mov	ebp, esp
	mov	eax, 5696				; 00001640H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _v_info$[ebp]

; 1736 :   REAL s1,s2,s1s2;  /* edge lengths */
; 1737 :   REAL *side1 = v_info->sides[0][0],*side2 = v_info->sides[0][1];
; 1738 :   REAL energy;
; 1739 :   REAL a1,a2;
; 1740 :   REAL da1[3][MAXCOORD],da2[3][MAXCOORD];
; 1741 :   REAL dda1[3][3][MAXCOORD][MAXCOORD],dda2[3][3][MAXCOORD][MAXCOORD];
; 1742 :   int i,j,k,kk;
; 1743 : 
; 1744 : 
; 1745 :   if ( v_info->vcount != 3 ) return 0.;

	cmp	DWORD PTR [ecx+12], 3
	mov	eax, DWORD PTR [ecx+1276]
	mov	eax, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	push	edi
	mov	edi, DWORD PTR [eax]

; 1816 :         for ( j = 0 ; j < SDIM ; j++ )

	mov	DWORD PTR _v_info$GSCopy$[ebp], ecx
	mov	DWORD PTR _side1$[ebp], edi
	je	SHORT $LN32@sqcurve3_s@2

; 1736 :   REAL s1,s2,s1s2;  /* edge lengths */
; 1737 :   REAL *side1 = v_info->sides[0][0],*side2 = v_info->sides[0][1];
; 1738 :   REAL energy;
; 1739 :   REAL a1,a2;
; 1740 :   REAL da1[3][MAXCOORD],da2[3][MAXCOORD];
; 1741 :   REAL dda1[3][3][MAXCOORD][MAXCOORD],dda2[3][3][MAXCOORD][MAXCOORD];
; 1742 :   int i,j,k,kk;
; 1743 : 
; 1744 : 
; 1745 :   if ( v_info->vcount != 3 ) return 0.;

	fldz
	pop	edi
	pop	esi

; 1824 : } // end sqcurve3_string_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN32@sqcurve3_s@2:

; 1746 : 
; 1747 :   s1 = sqrt(SDIM_dot(side1,side1));

	mov	ecx, DWORD PTR _web+616
	push	ecx
	push	edi
	push	edi
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR _s1$[ebp]

; 1748 :   s2 = sqrt(SDIM_dot(side2,side2));

	mov	edx, DWORD PTR _web+616
	push	edx
	push	esi
	push	esi
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR _s2$[ebp]

; 1749 :   s1s2 = SDIM_dot(side1,side2);

	mov	eax, DWORD PTR _web+616
	push	eax
	push	esi
	push	edi
	call	_dot
	fst	QWORD PTR _s1s2$[ebp]

; 1750 :   if ( (s1 == 0.0) || (s2 == 0.0) ) return 0.0;

	fld	QWORD PTR _s1$[ebp]
	add	esp, 12					; 0000000cH
	fld	ST(0)
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jnp	$LN83@sqcurve3_s@2
	fld	QWORD PTR _s2$[ebp]
	fld	ST(0)
	fld	ST(2)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN86@sqcurve3_s@2

; 1751 : 
; 1752 :   a1 = 1 + s1s2/s1/s2;  /* 1 - cos(theta)^2 */
; 1753 :   a2 = (1/s1 + 1/s2)/2;  /* inverse length approximation */
; 1754 : 
; 1755 :   energy = (2*a1+a1*a1/3)*a2;
; 1756 : 
; 1757 :   if ( mode == METHOD_VALUE )

	cmp	DWORD PTR _mode$[ebp], 1767		; 000006e7H
	fstp	ST(1)
	fxch	ST(2)
	fdiv	ST(0), ST(1)
	fst	QWORD PTR tv1810[ebp]
	fdiv	ST(0), ST(2)
	fst	QWORD PTR tv1811[ebp]
	fld	ST(0)
	fld1
	fadd	ST(1), ST(0)
	fld	ST(0)
	fdiv	ST(0), ST(4)
	fst	QWORD PTR tv1814[ebp]
	fxch	ST(1)
	fdiv	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __real@3fe0000000000000
	fst	QWORD PTR _a2$[ebp]
	fld	ST(1)
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv1820[ebp]
	fld	ST(3)
	fmulp	ST(4), ST(0)
	fld	QWORD PTR __real@4008000000000000
	fdiv	ST(4), ST(0)
	fxch	ST(4)
	faddp	ST(1), ST(0)
	fst	QWORD PTR tv1821[ebp]
	fld	ST(0)
	fmul	ST(0), ST(3)
	fst	QWORD PTR _energy$[ebp]
	jne	SHORT $LN89@sqcurve3_s@2
	fstp	ST(7)
	pop	edi
	fstp	ST(5)
	pop	esi
	fstp	ST(1)
	fstp	ST(1)
	fstp	ST(0)
	fstp	ST(1)
	fstp	ST(0)

; 1824 : } // end sqcurve3_string_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN89@sqcurve3_s@2:
	push	ebx

; 1751 : 
; 1752 :   a1 = 1 + s1s2/s1/s2;  /* 1 - cos(theta)^2 */
; 1753 :   a2 = (1/s1 + 1/s2)/2;  /* inverse length approximation */
; 1754 : 
; 1755 :   energy = (2*a1+a1*a1/3)*a2;
; 1756 : 
; 1757 :   if ( mode == METHOD_VALUE )

	fstp	ST(0)

; 1758 :   return energy;
; 1759 : 
; 1760 :   /* Gradient */
; 1761 :   for ( i = 0 ; i < SDIM ; i++ )

	mov	ebx, DWORD PTR _web+616
	fld	QWORD PTR __real@bfe0000000000000
	xor	edx, edx
	cmp	ebx, 4
	jl	$LN92@sqcurve3_s@2
	fstp	ST(3)

; 1767 :     da2[0][i] = -da2[1][i] - da2[2][i];

	lea	ebx, DWORD PTR _da1$[ebp+40]
	fstp	ST(3)
	sub	ebx, esi
	fstp	ST(0)
	mov	DWORD PTR tv3183[ebp], ebx
	fstp	ST(1)
	lea	ebx, DWORD PTR _da1$[ebp+88]
	fld	QWORD PTR tv1810[ebp]
	sub	ebx, esi
	fdiv	ST(0), ST(3)
	mov	DWORD PTR tv3187[ebp], ebx
	lea	ebx, DWORD PTR _da2$[ebp+40]
	sub	ebx, esi
	mov	DWORD PTR tv3191[ebp], ebx
	lea	ebx, DWORD PTR _da2$[ebp+88]
	sub	ebx, esi
	mov	DWORD PTR tv3195[ebp], ebx
	lea	ebx, DWORD PTR _da1$[ebp+48]
	sub	ebx, esi
	mov	DWORD PTR tv3199[ebp], ebx
	lea	ebx, DWORD PTR _da1$[ebp+96]
	sub	ebx, esi
	mov	DWORD PTR tv3203[ebp], ebx
	lea	ebx, DWORD PTR _da1$[ebp]
	sub	ebx, esi
	mov	DWORD PTR tv3207[ebp], ebx
	lea	ebx, DWORD PTR _da2$[ebp+48]
	sub	ebx, esi
	mov	DWORD PTR tv3211[ebp], ebx
	lea	ebx, DWORD PTR _da2$[ebp+96]
	sub	ebx, esi
	mov	DWORD PTR tv3219[ebp], ebx
	lea	ebx, DWORD PTR _da2$[ebp]
	sub	ebx, esi
	mov	DWORD PTR tv3223[ebp], ebx
	lea	ebx, DWORD PTR _da1$[ebp+56]
	sub	ebx, esi
	mov	DWORD PTR tv3227[ebp], ebx
	lea	ebx, DWORD PTR _da1$[ebp+104]
	sub	ebx, esi
	mov	DWORD PTR tv3231[ebp], ebx
	lea	ebx, DWORD PTR _da1$[ebp+8]
	sub	ebx, esi
	mov	DWORD PTR tv3235[ebp], ebx
	lea	ebx, DWORD PTR _da2$[ebp+56]
	sub	ebx, esi
	mov	DWORD PTR tv3239[ebp], ebx
	fdiv	ST(0), ST(3)
	lea	ebx, DWORD PTR _da2$[ebp+104]
	sub	ebx, esi
	mov	DWORD PTR tv3243[ebp], ebx
	lea	ebx, DWORD PTR _da2$[ebp+8]
	sub	ebx, esi
	mov	DWORD PTR tv3247[ebp], ebx
	lea	ebx, DWORD PTR _da1$[ebp+64]
	sub	ebx, esi
	mov	DWORD PTR tv3251[ebp], ebx
	lea	ebx, DWORD PTR _da1$[ebp+112]
	sub	ebx, esi
	mov	DWORD PTR tv3255[ebp], ebx
	lea	ebx, DWORD PTR _da1$[ebp+16]
	sub	ebx, esi
	mov	DWORD PTR tv3259[ebp], ebx
	lea	ecx, DWORD PTR [edi+24]
	lea	ebx, DWORD PTR _da2$[ebp+64]
	sub	edi, esi
	lea	eax, DWORD PTR [esi+8]
	sub	ebx, esi
	fdiv	ST(0), ST(4)
	fxch	ST(2)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fld	ST(1)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fxch	ST(2)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(5)
	mov	DWORD PTR tv3263[ebp], ebx
	lea	ebx, DWORD PTR _da2$[ebp+112]
	sub	ebx, esi
	mov	DWORD PTR tv3267[ebp], ebx
	lea	ebx, DWORD PTR _da2$[ebp+16]
	sub	ebx, esi
	mov	DWORD PTR tv3271[ebp], ebx
$LN67@sqcurve3_s@2:

; 1762 :   { da1[1][i] = side2[i]/s1/s2 - s1s2/s1/s1/s1/s2*side1[i];

	fld	QWORD PTR [eax-8]
	mov	ebx, DWORD PTR tv3183[ebp]
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(6)
	fld	ST(4)
	fmul	QWORD PTR [ecx-24]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR tv3291[ebp]
	fstp	QWORD PTR [eax+ebx]

; 1763 :     da1[2][i] = side1[i]/s1/s2 - s1s2/s1/s2/s2/s2*side2[i];

	mov	ebx, DWORD PTR tv3187[ebp]
	fld	QWORD PTR [ecx-24]
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(6)
	fld	ST(2)
	fmul	QWORD PTR [eax-8]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR [eax+ebx]

; 1765 :     da2[1][i] = -1./2/s1/s1/s1*side1[i];

	mov	ebx, DWORD PTR tv3191[ebp]
	fld	QWORD PTR tv3291[ebp]
	fchs
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR _da1$[ebp+edx*8]
	fld	ST(2)
	fmul	QWORD PTR [ecx-24]
	fst	QWORD PTR [eax+ebx]

; 1766 :     da2[2][i] = -1./2/s2/s2/s2*side2[i];

	mov	ebx, DWORD PTR tv3195[ebp]
	fld	ST(1)
	fmul	QWORD PTR [eax-8]
	fst	QWORD PTR tv3311[ebp]
	fstp	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv3199[ebp]

; 1767 :     da2[0][i] = -da2[1][i] - da2[2][i];

	fchs
	fsub	QWORD PTR tv3311[ebp]
	fstp	QWORD PTR _da2$[ebp+edx*8]
	fld	QWORD PTR [eax]
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(6)
	fld	ST(4)
	fmul	QWORD PTR [eax+edi]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR tv3321[ebp]
	fstp	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv3203[ebp]
	fld	QWORD PTR [eax+edi]
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(6)
	fld	ST(2)
	fmul	QWORD PTR [eax]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv3207[ebp]
	fld	QWORD PTR tv3321[ebp]
	fchs
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv3211[ebp]
	fld	ST(2)
	fmul	QWORD PTR [eax+edi]
	fst	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv3219[ebp]
	fld	ST(1)
	fmul	QWORD PTR [eax]
	fst	QWORD PTR tv3071[ebp]
	fstp	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv3223[ebp]
	fchs
	fsub	QWORD PTR tv3071[ebp]
	fstp	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv3227[ebp]
	fld	QWORD PTR [eax+8]
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(6)
	fld	ST(4)
	fmul	QWORD PTR [ecx-8]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR tv3350[ebp]
	fstp	QWORD PTR [eax+ebx]
	fld	QWORD PTR [ecx-8]
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(6)
	fld	ST(2)

; 1763 :     da1[2][i] = side1[i]/s1/s2 - s1s2/s1/s2/s2/s2*side2[i];

	fmul	QWORD PTR [eax+8]
	mov	ebx, DWORD PTR tv3231[ebp]

; 1767 :     da2[0][i] = -da2[1][i] - da2[2][i];

	add	edx, 4
	add	eax, 32					; 00000020H
	fsubp	ST(1), ST(0)
	add	ecx, 32					; 00000020H
	fst	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv3235[ebp]
	fld	QWORD PTR tv3350[ebp]
	fchs
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv3239[ebp]
	fld	ST(2)
	fmul	QWORD PTR [ecx-40]
	fst	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv3243[ebp]
	fld	ST(1)
	fmul	QWORD PTR [eax-24]
	fst	QWORD PTR tv3370[ebp]
	fstp	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv3247[ebp]
	fchs
	fsub	QWORD PTR tv3370[ebp]
	fstp	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv3251[ebp]
	fld	QWORD PTR [eax-16]
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(6)
	fld	ST(4)
	fmul	QWORD PTR [ecx-32]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR tv3382[ebp]
	fstp	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv3255[ebp]
	fld	QWORD PTR [ecx-32]
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(6)
	fld	ST(2)
	fmul	QWORD PTR [eax-16]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv3259[ebp]
	fld	QWORD PTR tv3382[ebp]
	fchs
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv3263[ebp]
	fld	ST(2)
	fmul	QWORD PTR [ecx-32]
	fst	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv3267[ebp]
	fld	ST(1)
	fmul	QWORD PTR [eax-16]
	fst	QWORD PTR tv3395[ebp]
	fstp	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv3271[ebp]
	fchs
	fsub	QWORD PTR tv3395[ebp]
	fstp	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR _web+616
	add	ebx, -3					; fffffffdH
	cmp	edx, ebx
	jl	$LN67@sqcurve3_s@2
	mov	ebx, DWORD PTR _web+616
	fstp	ST(3)
	mov	edi, DWORD PTR _side1$[ebp]
	fstp	ST(0)
	fstp	ST(0)
	fstp	ST(0)
	fldz
	fld	QWORD PTR tv1821[ebp]
	fld	QWORD PTR tv1811[ebp]
	fld	QWORD PTR __real@4008000000000000
	fld	QWORD PTR __real@4000000000000000
	fld	QWORD PTR _a2$[ebp]
	jmp	SHORT $LC66@sqcurve3_s@2
$LN92@sqcurve3_s@2:

; 1758 :   return energy;
; 1759 : 
; 1760 :   /* Gradient */
; 1761 :   for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)

; 1767 :     da2[0][i] = -da2[1][i] - da2[2][i];

	fldz
	fxch	ST(5)
	fxch	ST(1)
	fxch	ST(4)
	fxch	ST(1)
	fxch	ST(3)
	fxch	ST(1)
	fxch	ST(2)
	fxch	ST(1)
$LC66@sqcurve3_s@2:

; 1758 :   return energy;
; 1759 : 
; 1760 :   /* Gradient */
; 1761 :   for ( i = 0 ; i < SDIM ; i++ )

	cmp	edx, ebx
	jge	$LN99@sqcurve3_s@2
	fstp	ST(5)
	lea	ecx, DWORD PTR _da1$[ebp+96]
	fld	QWORD PTR tv1810[ebp]
	sub	ecx, edi
	fdiv	ST(0), ST(6)
	mov	DWORD PTR tv3547[ebp], ecx
	lea	ecx, DWORD PTR _da2$[ebp+48]
	sub	ecx, edi
	mov	DWORD PTR tv3555[ebp], ecx
	mov	ecx, esi
	sub	ecx, edi
	mov	DWORD PTR tv3559[ebp], ecx
	lea	ecx, DWORD PTR _da2$[ebp+96]
	sub	ecx, edi
	mov	DWORD PTR tv3564[ebp], ecx
	lea	ecx, DWORD PTR _da2$[ebp]
	sub	ecx, edi
	mov	DWORD PTR tv3568[ebp], ecx
	mov	ecx, ebx
	lea	eax, DWORD PTR [edi+edx*8]
	sub	ecx, edx
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(7)
	fstp	QWORD PTR tv1834[ebp]
	fxch	ST(2)
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(6)
	fstp	QWORD PTR tv1845[ebp]
	fld	QWORD PTR __real@bfe0000000000000
	fld	ST(0)
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(6)
	fstp	QWORD PTR tv1858[ebp]
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(6)
	fstp	QWORD PTR tv1864[ebp]
$LN71@sqcurve3_s@2:

; 1762 :   { da1[1][i] = side2[i]/s1/s2 - s1s2/s1/s1/s1/s2*side1[i];

	mov	edx, DWORD PTR tv3559[ebp]
	fld	QWORD PTR [edx+eax]
	mov	edx, DWORD PTR tv3547[ebp]
	fdiv	ST(0), ST(5)
	add	eax, 8
	dec	ecx
	fdiv	ST(0), ST(6)
	fld	QWORD PTR tv1834[ebp]
	fmul	QWORD PTR [eax-8]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR tv3576[ebp]
	fstp	QWORD PTR [edx+eax-56]

; 1763 :     da1[2][i] = side1[i]/s1/s2 - s1s2/s1/s2/s2/s2*side2[i];

	mov	edx, DWORD PTR tv3559[ebp]
	fld	QWORD PTR [eax-8]
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(6)
	fld	QWORD PTR tv1845[ebp]
	fmul	QWORD PTR [edx+eax-8]
	mov	edx, DWORD PTR tv3547[ebp]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR [edx+eax-8]

; 1764 :     da1[0][i] = -da1[1][i] - da1[2][i];

	fld	QWORD PTR tv3576[ebp]
	fchs
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR [edx+eax-104]

; 1765 :     da2[1][i] = -1./2/s1/s1/s1*side1[i];

	mov	edx, DWORD PTR tv3555[ebp]
	fld	QWORD PTR tv1858[ebp]
	fmul	QWORD PTR [eax-8]
	fst	QWORD PTR [edx+eax-8]

; 1766 :     da2[2][i] = -1./2/s2/s2/s2*side2[i];

	mov	edx, DWORD PTR tv3559[ebp]
	fld	QWORD PTR tv1864[ebp]
	fmul	QWORD PTR [edx+eax-8]
	mov	edx, DWORD PTR tv3564[ebp]
	fst	QWORD PTR tv3591[ebp]
	fstp	QWORD PTR [edx+eax-8]

; 1767 :     da2[0][i] = -da2[1][i] - da2[2][i];

	mov	edx, DWORD PTR tv3568[ebp]
	fchs
	fsub	QWORD PTR tv3591[ebp]
	fstp	QWORD PTR [edx+eax-8]
	jne	$LN71@sqcurve3_s@2

; 1758 :   return energy;
; 1759 : 
; 1760 :   /* Gradient */
; 1761 :   for ( i = 0 ; i < SDIM ; i++ )

	fldz
	fxch	ST(4)
	fxch	ST(2)
$LN65@sqcurve3_s@2:

; 1768 :   }
; 1769 :   for ( k = 0 ; k < v_info->vcount ; k++ )

	mov	eax, DWORD PTR _v_info$GSCopy$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+12], ecx
	jle	SHORT $LN23@sqcurve3_s@2
	xor	edx, edx
$LN75@sqcurve3_s@2:

; 1770 :     for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	test	ebx, ebx
	jle	SHORT $LN24@sqcurve3_s@2
	fstp	ST(4)
	fld	QWORD PTR tv1820[ebp]
	fdiv	ST(0), ST(1)
	fadd	ST(0), ST(4)
	fstp	QWORD PTR tv2032[ebp]
$LN70@sqcurve3_s@2:
	lea	ebx, DWORD PTR [edx+eax*8]

; 1771 :       v_info->grad[k][i] = (2 + 2*a1/3)*da1[k][i]*a2 + (2*a1+a1*a1/3)*da2[k][i];

	fld	QWORD PTR _da1$[ebp+ebx]
	lea	ebx, DWORD PTR [edx+eax*8]
	fmul	QWORD PTR tv2032[ebp]
	inc	eax
	fmul	ST(0), ST(2)
	fld	QWORD PTR _da2$[ebp+ebx]
	mov	ebx, DWORD PTR _v_info$GSCopy$[ebp]
	mov	ebx, DWORD PTR [ebx+1336]
	fmul	ST(0), ST(4)
	mov	ebx, DWORD PTR [ebx+ecx*4]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [ebx+eax*8-8]
	mov	ebx, DWORD PTR _web+616
	cmp	eax, ebx
	jl	SHORT $LN70@sqcurve3_s@2

; 1770 :     for ( i = 0 ; i < SDIM ; i++ )

	fldz
	fxch	ST(4)
$LN24@sqcurve3_s@2:

; 1768 :   }
; 1769 :   for ( k = 0 ; k < v_info->vcount ; k++ )

	mov	eax, DWORD PTR _v_info$GSCopy$[ebp]
	inc	ecx
	add	edx, 48					; 00000030H
	cmp	ecx, DWORD PTR [eax+12]
	jl	SHORT $LN75@sqcurve3_s@2
$LN23@sqcurve3_s@2:

; 1772 : 
; 1773 :   if ( mode == METHOD_GRADIENT )

	cmp	DWORD PTR _mode$[ebp], 4321		; 000010e1H
	jne	SHORT $LN19@sqcurve3_s@2
	fstp	ST(6)
	fstp	ST(4)
	fstp	ST(0)
	fstp	ST(2)
	fstp	ST(2)
	fstp	ST(0)
$LN174@sqcurve3_s@2:
	pop	ebx
	fstp	ST(0)

; 1774 :   return energy;

	fld	QWORD PTR _energy$[ebp]
	pop	edi
	pop	esi

; 1824 : } // end sqcurve3_string_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN99@sqcurve3_s@2:

; 1758 :   return energy;
; 1759 : 
; 1760 :   /* Gradient */
; 1761 :   for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(3)
	jmp	$LN65@sqcurve3_s@2
$LN19@sqcurve3_s@2:

; 1775 : 
; 1776 :   /* Hessian */
; 1777 :   for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	ebx, eax
	jle	$LN120@sqcurve3_s@2
	fstp	ST(2)
	mov	edx, edi
	fstp	ST(1)
	mov	DWORD PTR tv4451[ebp], eax
	fstp	ST(1)
	mov	ecx, esi
	fmul	QWORD PTR _s1s2$[ebp]
	sub	edx, esi
	fdiv	ST(0), ST(2)
	fld	ST(0)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR tv2058[ebp]
	fld	QWORD PTR tv1810[ebp]
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(4)
	fst	QWORD PTR tv1834[ebp]
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fst	QWORD PTR tv2092[ebp]
	fxch	ST(1)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR tv2142[ebp]
	fld	QWORD PTR __real@3ff8000000000000
	fld	ST(0)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR tv2184[ebp]
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR tv2198[ebp]
	jmp	SHORT $LN18@sqcurve3_s@2
$LN68@sqcurve3_s@2:
	fld	QWORD PTR tv2092[ebp]
$LN18@sqcurve3_s@2:

; 1778 :   {
; 1779 :     for ( j = 0 ; j < SDIM ; j++ )

	fld	QWORD PTR tv2058[ebp]

; 1803 :       dda2[1][2][i][j] = 0.0;

	mov	ebx, DWORD PTR tv4451[ebp]
	fmul	QWORD PTR [ecx+edx]
	xor	edi, edi
	mov	eax, esi
	mov	DWORD PTR tv3935[ebp], ebx
	fstp	QWORD PTR tv4635[ebp]
	fld	QWORD PTR [ecx]
	fdiv	ST(0), ST(3)
	fld	ST(0)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(5)
	fstp	QWORD PTR tv4568[ebp]
	fld	ST(1)
	fmul	QWORD PTR [ecx+edx]
	fstp	QWORD PTR tv4639[ebp]
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR tv4583[ebp]
	fmul	QWORD PTR [ecx]
	fstp	QWORD PTR tv4590[ebp]
	fld	QWORD PTR [ecx+edx]
	fdiv	ST(0), ST(2)
	fld	ST(0)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR tv4649[ebp]
	fld	QWORD PTR tv2142[ebp]
	fmul	QWORD PTR [ecx]
	fstp	QWORD PTR tv4610[ebp]
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR tv4657[ebp]
$LN69@sqcurve3_s@2:

; 1780 :     { 
; 1781 :       dda1[1][1][i][j] = -side2[i]/s1/s1/s1/s2*side1[j]
; 1782 :                           - side2[j]/s1/s1/s1/s2*side1[i]
; 1783 :                           + 3*s1s2/s1/s1/s1/s1/s1/s2*side1[i]*side1[j]
; 1784 :                           + (j==i ? -s1s2/s1/s1/s1/s2 : 0.0);

	cmp	edi, DWORD PTR _i$[ebp]
	jne	SHORT $LN36@sqcurve3_s@2
	fstp	ST(0)
	fld	QWORD PTR tv1834[ebp]
	fchs
$LN36@sqcurve3_s@2:
	fld	QWORD PTR [eax]
	mov	ebx, DWORD PTR tv3935[ebp]
	fdiv	ST(0), ST(2)
	fld	QWORD PTR [eax+edx]
	fmul	QWORD PTR tv4635[ebp]
	fld	ST(1)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(5)
	fmul	QWORD PTR [ecx+edx]
	fld	QWORD PTR [eax+edx]
	fmul	QWORD PTR tv4568[ebp]
	faddp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv5420[ebp]
	fstp	QWORD PTR _dda1$[ebp+ebx+1152]

; 1785 :       dda1[1][2][i][j] = -side2[i]/s1/s2/s2/s2*side2[j]
; 1786 :                           - side1[j]/s1/s1/s1/s2*side1[i]
; 1787 :                           + s1s2/s1/s1/s1/s2/s2/s2*side1[i]*side2[j]
; 1788 :                           + (j==i ? 1/s1/s2 : 0.0);

	cmp	edi, DWORD PTR _i$[ebp]
	jne	SHORT $LN37@sqcurve3_s@2
	fld	QWORD PTR tv1814[ebp]
	fdiv	ST(0), ST(3)
	jmp	SHORT $LN38@sqcurve3_s@2
$LN37@sqcurve3_s@2:
	fldz
$LN38@sqcurve3_s@2:
	fld	QWORD PTR [eax+edx]
	mov	ebx, DWORD PTR tv3935[ebp]
	fdiv	ST(0), ST(3)
	fld	QWORD PTR tv4639[ebp]
	fmul	QWORD PTR [eax]
	fld	ST(1)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(6)
	fmul	QWORD PTR [ecx+edx]
	fld	QWORD PTR tv4583[ebp]
	fmul	QWORD PTR [eax]
	faddp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _dda1$[ebp+ebx+1440]

; 1789 :       dda1[2][1][i][j] = -side1[i]/s1/s1/s1/s2*side1[j]
; 1790 :                           - side2[j]/s1/s2/s2/s2*side2[i]
; 1791 :                           + s1s2/s1/s1/s1/s2/s2/s2*side2[i]*side1[j]
; 1792 :                           + (j==i ? 1/s1/s2 : 0.0);

	cmp	edi, DWORD PTR _i$[ebp]
	jne	SHORT $LN39@sqcurve3_s@2
	fld	QWORD PTR tv1814[ebp]
	fdiv	ST(0), ST(5)
	jmp	SHORT $LN173@sqcurve3_s@2
$LN39@sqcurve3_s@2:
	fldz
$LN173@sqcurve3_s@2:
	fstp	QWORD PTR tv374[ebp]
	mov	ebx, DWORD PTR tv3935[ebp]
	fld	QWORD PTR [eax+edx]
	fmul	QWORD PTR tv4590[ebp]
	fxch	ST(3)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(5)
	fmul	QWORD PTR [ecx]
	fld	QWORD PTR [eax+edx]
	fmul	QWORD PTR tv4649[ebp]
	faddp	ST(1), ST(0)
	fsubp	ST(3), ST(0)
	fxch	ST(2)
	fadd	QWORD PTR tv374[ebp]
	fst	QWORD PTR _dda1$[ebp+ebx+2016]

; 1793 :       dda1[2][2][i][j] = -side1[i]/s1/s2/s2/s2*side2[j]
; 1794 :                           - side1[j]/s1/s2/s2/s2*side2[i]
; 1795 :                           + 3*s1s2/s1/s2/s2/s2/s2/s2*side2[i]*side2[j]
; 1796 :                           + (j==i ? -s1s2/s1/s2/s2/s2 : 0.0);

	cmp	edi, DWORD PTR _i$[ebp]
	jne	SHORT $LN41@sqcurve3_s@2
	fld	QWORD PTR tv1811[ebp]
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(5)
	fchs
	jmp	SHORT $LN42@sqcurve3_s@2
$LN41@sqcurve3_s@2:
	fldz
$LN42@sqcurve3_s@2:
	fld	QWORD PTR tv4610[ebp]
	mov	ebx, DWORD PTR tv3935[ebp]
	fmul	QWORD PTR [eax]
	fxch	ST(3)
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(6)
	fmul	QWORD PTR [ecx]
	fld	QWORD PTR tv4657[ebp]
	fmul	QWORD PTR [eax]
	faddp	ST(1), ST(0)
	fsubp	ST(3), ST(0)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _dda1$[ebp+ebx+2304]

; 1797 :       dda1[0][1][i][j] = -dda1[1][1][i][j] - dda1[2][1][i][j];

	fld	QWORD PTR tv5420[ebp]
	fchs
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _dda1$[ebp+ebx+288]

; 1798 :       dda1[0][2][i][j] = -dda1[1][2][i][j] - dda1[2][2][i][j];

	fxch	ST(2)
	fchs
	fsubrp	ST(1), ST(0)
	fst	QWORD PTR _dda1$[ebp+ebx+576]

; 1799 :       dda1[0][0][i][j] = -dda1[0][1][i][j] - dda1[0][2][i][j];

	fxch	ST(1)
	fchs
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR _dda1$[ebp+ebx]

; 1800 :       
; 1801 :       dda2[1][1][i][j] = 3./2/s1/s1/s1/s1/s1*side1[j]*side1[i]
; 1802 :                            + (j==i ? -1./2/s1/s1/s1 : 0.0 );

	cmp	edi, DWORD PTR _i$[ebp]
	jne	SHORT $LN43@sqcurve3_s@2
	fld	QWORD PTR __real@bfe0000000000000
	fdiv	ST(0), ST(1)
	fdiv	ST(0), ST(1)
	fdiv	ST(0), ST(1)
	fldz
	jmp	SHORT $LN44@sqcurve3_s@2
$LN43@sqcurve3_s@2:
	fldz
	fld	ST(0)
	fxch	ST(1)
$LN44@sqcurve3_s@2:
	fld	QWORD PTR [eax+edx]
	mov	ebx, DWORD PTR tv3935[ebp]
	fmul	QWORD PTR tv2184[ebp]
	fmul	QWORD PTR [ecx+edx]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _dda2$[ebp+ebx+1152]

; 1803 :       dda2[1][2][i][j] = 0.0;

	fxch	ST(1)
	fst	QWORD PTR _dda2$[ebp+ebx+1440]

; 1804 :       dda2[2][1][i][j] = 0.0;

	fst	QWORD PTR _dda2$[ebp+ebx+2016]

; 1805 :       dda2[2][2][i][j] = 3./2/s2/s2/s2/s2/s2*side2[j]*side2[i]
; 1806 :                            + (j==i ? -1./2/s2/s2/s2 : 0.0 );

	cmp	edi, DWORD PTR _i$[ebp]
	jne	SHORT $LN45@sqcurve3_s@2
	fld	QWORD PTR __real@bfe0000000000000
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	jmp	SHORT $LN46@sqcurve3_s@2
$LN45@sqcurve3_s@2:
	fld	ST(0)
$LN46@sqcurve3_s@2:
	fld	QWORD PTR tv2198[ebp]
	mov	ebx, DWORD PTR tv3935[ebp]
	fmul	QWORD PTR [eax]
	add	ebx, 8
	mov	DWORD PTR tv3935[ebp], ebx
	inc	edi
	fmul	QWORD PTR [ecx]
	add	eax, 8
	faddp	ST(1), ST(0)
	fst	QWORD PTR _dda2$[ebp+ebx+2296]

; 1807 :       dda2[0][1][i][j] = -dda2[1][1][i][j] - dda2[2][1][i][j];

	fxch	ST(2)
	fchs
	fsub	ST(0), ST(1)
	fst	QWORD PTR _dda2$[ebp+ebx+280]

; 1808 :       dda2[0][2][i][j] = -dda2[1][2][i][j] - dda2[2][2][i][j];

	fld	QWORD PTR __real@8000000000000000
	fsubrp	ST(3), ST(0)
	fxch	ST(2)
	fst	QWORD PTR _dda2$[ebp+ebx+568]

; 1809 :       dda2[0][0][i][j] = -dda2[0][1][i][j] - dda2[0][2][i][j];

	fxch	ST(2)
	fchs
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _dda2$[ebp+ebx-8]
	mov	ebx, DWORD PTR _web+616
	cmp	edi, ebx
	jl	$LN69@sqcurve3_s@2

; 1775 : 
; 1776 :   /* Hessian */
; 1777 :   for ( i = 0 ; i < SDIM ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	add	DWORD PTR tv4451[ebp], 48		; 00000030H
	inc	eax
	add	ecx, 8
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, ebx
	jl	$LN68@sqcurve3_s@2
	fstp	ST(2)
	fstp	ST(0)
	fstp	ST(0)
	fld	QWORD PTR _a2$[ebp]
	fld	QWORD PTR __real@4000000000000000
	fld	QWORD PTR __real@4008000000000000
	fld	QWORD PTR tv1821[ebp]
	fxch	ST(2)
	fxch	ST(3)
	fxch	ST(1)
	fxch	ST(2)
$LN74@sqcurve3_s@2:

; 1810 :     }
; 1811 :   }
; 1812 : 
; 1813 :   for ( k = 0 ; k < v_info->vcount ; k++ )

	mov	ecx, DWORD PTR _v_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	xor	edx, edx
	mov	DWORD PTR _k$[ebp], 0
	cmp	eax, edx
	jle	$LN169@sqcurve3_s@2
	mov	DWORD PTR tv5309[ebp], edx
	mov	DWORD PTR tv5313[ebp], edx
	jmp	SHORT $LN12@sqcurve3_s@2
$LN120@sqcurve3_s@2:

; 1775 : 
; 1776 :   /* Hessian */
; 1777 :   for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(6)
	fstp	ST(4)
	fstp	ST(2)
	jmp	SHORT $LN74@sqcurve3_s@2
$LN79@sqcurve3_s@2:

; 1810 :     }
; 1811 :   }
; 1812 : 
; 1813 :   for ( k = 0 ; k < v_info->vcount ; k++ )

	xor	edx, edx
$LN12@sqcurve3_s@2:

; 1814 :     for ( kk = 0 ; kk < v_info->vcount ; kk++ )

	mov	DWORD PTR _kk$[ebp], edx
	cmp	eax, edx
	jle	$LN11@sqcurve3_s@2
	mov	DWORD PTR tv5257[ebp], edx
$LN77@sqcurve3_s@2:

; 1815 :       for ( i = 0 ; i < SDIM ; i++ )

	xor	esi, esi
	test	ebx, ebx
	jle	$LN8@sqcurve3_s@2
$LN76@sqcurve3_s@2:

; 1816 :         for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	test	ebx, ebx
	jle	$LN5@sqcurve3_s@2
	fld	QWORD PTR tv1820[ebp]
	mov	ecx, DWORD PTR tv5313[ebp]
	fdiv	ST(0), ST(3)
	add	ecx, esi
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
	lea	edi, DWORD PTR _da1$[ebp+ecx]
	lea	ecx, DWORD PTR _da2$[ebp+ecx]
	mov	DWORD PTR tv5329[ebp], ecx
	mov	ecx, DWORD PTR tv5309[ebp]
	add	ecx, edx
	lea	edx, DWORD PTR [ecx+ecx*2]
	lea	ecx, DWORD PTR [esi+edx*2]
	lea	ecx, DWORD PTR [ecx+ecx*2]
	shl	ecx, 4
	fadd	ST(0), ST(4)
	fld	ST(0)
	fmul	QWORD PTR [edi]
$LN73@sqcurve3_s@2:
	mov	edx, DWORD PTR tv5257[ebp]
	lea	ebx, DWORD PTR [ecx+eax*8]

; 1817 :           v_info->hess[k][kk][i][j] = (2*da1[kk][j]/3)*da1[k][i]*a2
; 1818 :                 + (2 + 2*a1/3)*dda1[k][kk][i][j]*a2
; 1819 :                 + (2 + 2*a1/3)*da1[k][i]*da2[kk][j]
; 1820 :                 + (2 + 2*a1/3)*da1[kk][j]*da2[k][i]
; 1821 :                 + (2*a1+a1*a1/3)*dda2[k][kk][i][j];

	fld	QWORD PTR _dda1$[ebp+ebx]
	lea	edx, DWORD PTR [edx+eax*8]
	fmul	ST(0), ST(2)
	lea	edx, DWORD PTR _da1$[ebp+edx]
	mov	ebx, DWORD PTR tv5257[ebp]
	lea	ebx, DWORD PTR [ebx+eax*8]
	fmul	ST(0), ST(4)
	fld	QWORD PTR [edx]
	fmul	ST(0), ST(7)
	fdiv	ST(0), ST(6)
	fmul	QWORD PTR [edi]
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _da2$[ebp+ebx]
	mov	ebx, DWORD PTR _k$[ebp]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fld	ST(2)
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv5329[ebp]
	fmul	QWORD PTR [edx]
	lea	edx, DWORD PTR [ecx+eax*8]
	inc	eax
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dda2$[ebp+edx]
	mov	edx, DWORD PTR _v_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [edx+1340]
	fmul	ST(0), ST(4)
	mov	ebx, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR _kk$[ebp]
	mov	ebx, DWORD PTR [ebx+edx*4]
	faddp	ST(1), ST(0)
	mov	ebx, DWORD PTR [ebx+esi*4]
	fstp	QWORD PTR [ebx+eax*8-8]
	mov	ebx, DWORD PTR _web+616
	cmp	eax, ebx
	jl	$LN73@sqcurve3_s@2

; 1816 :         for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(1)
	fstp	ST(0)
$LN5@sqcurve3_s@2:

; 1815 :       for ( i = 0 ; i < SDIM ; i++ )

	inc	esi
	cmp	esi, ebx
	jl	$LN76@sqcurve3_s@2
$LN8@sqcurve3_s@2:

; 1814 :     for ( kk = 0 ; kk < v_info->vcount ; kk++ )

	mov	eax, DWORD PTR _v_info$GSCopy$[ebp]
	add	DWORD PTR tv5257[ebp], 48		; 00000030H
	inc	edx
	mov	DWORD PTR _kk$[ebp], edx
	cmp	edx, DWORD PTR [eax+12]
	jl	$LN77@sqcurve3_s@2
$LN11@sqcurve3_s@2:

; 1810 :     }
; 1811 :   }
; 1812 : 
; 1813 :   for ( k = 0 ; k < v_info->vcount ; k++ )

	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _v_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	DWORD PTR tv5313[ebp], 6
	add	DWORD PTR tv5309[ebp], 3
	inc	ecx
	mov	DWORD PTR _k$[ebp], ecx
	cmp	ecx, eax
	jl	$LN79@sqcurve3_s@2
$LN169@sqcurve3_s@2:

; 1816 :         for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(1)
	fstp	ST(1)
	fstp	ST(1)

; 1822 :        
; 1823 :   return energy;

	jmp	$LN174@sqcurve3_s@2
$LN86@sqcurve3_s@2:

; 1750 :   if ( (s1 == 0.0) || (s2 == 0.0) ) return 0.0;

	fstp	ST(0)
$LN83@sqcurve3_s@2:

; 1824 : } // end sqcurve3_string_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(1)
	pop	edi
	fstp	ST(1)
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_sqcurve3_string_all ENDP
_TEXT	ENDS
PUBLIC	_sqcurve3_string_value
; Function compile flags: /Ogtp
;	COMDAT _sqcurve3_string_value
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_sqcurve3_string_value PROC				; COMDAT

; 1834 : { return sqcurve3_string_all(v_info,METHOD_VALUE);

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v_info$[ebp]
	push	1767					; 000006e7H
	push	eax
	call	_sqcurve3_string_all
	add	esp, 8

; 1835 : }

	pop	ebp
	ret	0
_sqcurve3_string_value ENDP
_TEXT	ENDS
PUBLIC	_sqcurve3_string_grad
; Function compile flags: /Ogtp
;	COMDAT _sqcurve3_string_grad
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_sqcurve3_string_grad PROC				; COMDAT

; 1839 : { return sqcurve3_string_all(v_info,METHOD_GRADIENT);

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v_info$[ebp]
	push	4321					; 000010e1H
	push	eax
	call	_sqcurve3_string_all
	add	esp, 8

; 1840 : }

	pop	ebp
	ret	0
_sqcurve3_string_grad ENDP
_TEXT	ENDS
PUBLIC	_sqcurve3_string_hess
; Function compile flags: /Ogtp
;	COMDAT _sqcurve3_string_hess
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_sqcurve3_string_hess PROC				; COMDAT

; 1844 : { return sqcurve3_string_all(v_info,METHOD_HESSIAN);

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v_info$[ebp]
	push	8763					; 0000223bH
	push	eax
	call	_sqcurve3_string_all
	add	esp, 8

; 1845 : }

	pop	ebp
	ret	0
_sqcurve3_string_hess ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DA@FPFEKFDG@sq_mean_curv_cyl?5method?5only?5for@ ; `string'
PUBLIC	_sq_mean_curv_cyl_init
;	COMDAT ??_C@_0DA@FPFEKFDG@sq_mean_curv_cyl?5method?5only?5for@
CONST	SEGMENT
??_C@_0DA@FPFEKFDG@sq_mean_curv_cyl?5method?5only?5for@ DB 'sq_mean_curv_'
	DB	'cyl method only for LINEAR model.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _sq_mean_curv_cyl_init
_TEXT	SEGMENT
_eltype$ = -4						; size = 4
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_sq_mean_curv_cyl_init PROC				; COMDAT

; 1871 : { int k;

	push	ebp
	mov	ebp, esp
	push	ecx

; 1872 :   int eltype;
; 1873 : 
; 1874 :   if ( web.modeltype != LINEAR )

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN4@sq_mean_cu

; 1875 :      kb_error(2486,"sq_mean_curv_cyl method only for LINEAR model.\n",
; 1876 :         RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DA@FPFEKFDG@sq_mean_curv_cyl?5method?5only?5for@
	push	2486					; 000009b6H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN4@sq_mean_cu:

; 1877 : 
; 1878 :   /* see if using (H - H_0)^2 adjustment */
; 1879 :   h0_flag = 0;
; 1880 :   h0_attr = find_extra("h_zero",&eltype);

	lea	eax, DWORD PTR _eltype$[ebp]
	push	eax
	push	OFFSET ??_C@_06CNJIKMCI@h_zero?$AA@
	mov	DWORD PTR _h0_flag, 0
	call	_find_extra
	add	esp, 8
	mov	DWORD PTR _h0_attr, eax

; 1881 :   if ( h0_attr >= 0 )

	test	eax, eax
	js	SHORT $LN3@sq_mean_cu

; 1882 :     h0_flag = H0_IN_ATTR; 

	mov	DWORD PTR _h0_flag, 2

; 1888 :     }
; 1889 :   }
; 1890 : } // end sq_mean_curv_cyl_init()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@sq_mean_cu:

; 1883 :   else
; 1884 :   { k = lookup_global("h_zero");

	push	OFFSET ??_C@_06CNJIKMCI@h_zero?$AA@
	call	_lookup_global
	add	esp, 4

; 1885 :     if ( k >= 0 ) 

	test	eax, eax
	js	$LN1@sq_mean_cu

; 1886 :     { h0_flag = H0_IN_GLOBAL;
; 1887 :       h0_value = globals(k)->value.real;

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	mov	DWORD PTR _h0_flag, 1
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN7@sq_mean_cu
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN9@sq_mean_cu
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+64]
	fstp	QWORD PTR _h0_value

; 1888 :     }
; 1889 :   }
; 1890 : } // end sq_mean_curv_cyl_init()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@sq_mean_cu:

; 1886 :     { h0_flag = H0_IN_GLOBAL;
; 1887 :       h0_value = globals(k)->value.real;

	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN7@sq_mean_cu
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [eax+64]
	fstp	QWORD PTR _h0_value

; 1888 :     }
; 1889 :   }
; 1890 : } // end sq_mean_curv_cyl_init()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@sq_mean_cu:

; 1886 :     { h0_flag = H0_IN_GLOBAL;
; 1887 :       h0_value = globals(k)->value.real;

	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
	fld	QWORD PTR [eax+64]
	fstp	QWORD PTR _h0_value
$LN1@sq_mean_cu:

; 1888 :     }
; 1889 :   }
; 1890 : } // end sq_mean_curv_cyl_init()

	mov	esp, ebp
	pop	ebp
	ret	0
_sq_mean_curv_cyl_init ENDP
_TEXT	ENDS
PUBLIC	__real@c008000000000000
PUBLIC	__real@401921fb54442d18
PUBLIC	__real@3fe921fb54442d18
PUBLIC	__real@bff0000000000000
PUBLIC	__real@c000000000000000
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@3ddb7cdfd9d7bdbb
PUBLIC	__$ArrayPad$
PUBLIC	_sq_mean_curv_cyl_all
;	COMDAT __real@c008000000000000
CONST	SEGMENT
__real@c008000000000000 DQ 0c008000000000000r	; -3
CONST	ENDS
;	COMDAT __real@401921fb54442d18
CONST	SEGMENT
__real@401921fb54442d18 DQ 0401921fb54442d18r	; 6.28319
CONST	ENDS
;	COMDAT __real@3fe921fb54442d18
CONST	SEGMENT
__real@3fe921fb54442d18 DQ 03fe921fb54442d18r	; 0.785398
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@c000000000000000
CONST	SEGMENT
__real@c000000000000000 DQ 0c000000000000000r	; -2
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@3ddb7cdfd9d7bdbb
CONST	SEGMENT
__real@3ddb7cdfd9d7bdbb DQ 03ddb7cdfd9d7bdbbr	; 1e-010
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _sq_mean_curv_cyl_all
_TEXT	SEGMENT
tv5853 = -2732						; size = 8
tv5340 = -2732						; size = 8
tv5872 = -2724						; size = 8
tv5360 = -2724						; size = 8
tv5289 = -2724						; size = 8
tv5952 = -2716						; size = 8
tv5878 = -2716						; size = 8
tv5375 = -2716						; size = 8
_r1$ = -2708						; size = 8
tv7620 = -2700						; size = 8
tv5389 = -2700						; size = 8
tv5306 = -2700						; size = 8
tv5839 = -2692						; size = 8
tv5368 = -2692						; size = 8
tv5354 = -2692						; size = 8
tv4955 = -2692						; size = 8
tv5437 = -2684						; size = 8
_energy$ = -2676					; size = 8
tv7689 = -2668						; size = 8
tv6128 = -2668						; size = 8
tv6018 = -2668						; size = 8
tv5384 = -2668						; size = 8
tv5400 = -2660						; size = 8
tv5412 = -2652						; size = 8
tv6888 = -2644						; size = 8
tv5417 = -2644						; size = 8
tv5427 = -2636						; size = 8
tv4963 = -2636						; size = 8
tv5432 = -2628						; size = 8
_dprod_dx1$90615 = -2628				; size = 8
tv6604 = -2620						; size = 8
tv6445 = -2620						; size = 8
tv6099 = -2620						; size = 8
tv5434 = -2620						; size = 8
tv5296 = -2620						; size = 8
tv6910 = -2612						; size = 8
_r2$ = -2612						; size = 8
tv5408 = -2604						; size = 8
tv7659 = -2596						; size = 8
tv6017 = -2596						; size = 8
tv5381 = -2596						; size = 8
tv5304 = -2596						; size = 8
tv5444 = -2588						; size = 8
tv10724 = -2580						; size = 8
tv9162 = -2580						; size = 8
tv6149 = -2580						; size = 8
tv6062 = -2580						; size = 8
tv5874 = -2580						; size = 8
tv5457 = -2580						; size = 8
tv7723 = -2572						; size = 8
tv5301 = -2572						; size = 8
_dhterm_dx0$90610 = -2572				; size = 8
tv7762 = -2564						; size = 8
tv5294 = -2564						; size = 8
_prod$90597 = -2564					; size = 8
tv7609 = -2556						; size = 8
tv6921 = -2556						; size = 8
tv6133 = -2556						; size = 8
tv5392 = -2556						; size = 8
tv5290 = -2556						; size = 8
tv12109 = -2548						; size = 8
tv6199 = -2548						; size = 8
tv5415 = -2548						; size = 8
tv5298 = -2548						; size = 8
_dhterm_dy1$90613 = -2548				; size = 8
tv5078 = -2540						; size = 8
tv4949 = -2540						; size = 8
_area$ = -2540						; size = 8
tv5933 = -2532						; size = 8
tv5278 = -2532						; size = 8
tv4940 = -2532						; size = 8
tv10670 = -2524						; size = 8
tv9102 = -2524						; size = 8
tv8977 = -2524						; size = 8
tv7586 = -2524						; size = 8
tv6140 = -2524						; size = 8
tv5303 = -2524						; size = 8
tv5033 = -2524						; size = 8
tv7712 = -2516						; size = 8
tv6025 = -2516						; size = 8
tv5968 = -2516						; size = 8
tv5944 = -2516						; size = 8
tv5917 = -2516						; size = 8
tv5892 = -2516						; size = 8
tv5378 = -2516						; size = 8
tv12098 = -2508						; size = 8
tv6205 = -2508						; size = 8
tv5420 = -2508						; size = 8
tv5399 = -2508						; size = 8
tv5283 = -2508						; size = 8
tv5037 = -2508						; size = 8
_hh$ = -2500						; size = 8
tv6923 = -2492						; size = 8
tv6559 = -2492						; size = 8
tv6198 = -2492						; size = 8
tv5042 = -2492						; size = 8
_root$ = -2492						; size = 8
_dx$90596 = -2492					; size = 8
tv7698 = -2484						; size = 8
tv6929 = -2484						; size = 8
tv5405 = -2484						; size = 8
tv5014 = -2484						; size = 8
_gradprod$90599 = -2484					; size = 8
tv6539 = -2476						; size = 8
tv6394 = -2476						; size = 8
tv6238 = -2476						; size = 8
tv5073 = -2476						; size = 8
tv4961 = -2476						; size = 8
_h$ = -2476						; size = 8
_hterm$90598 = -2476					; size = 8
tv5551 = -2468						; size = 8
tv5407 = -2468						; size = 8
tv5386 = -2468						; size = 8
tv5036 = -2468						; size = 8
_hessprod$90600 = -2468					; size = 8
tv5960 = -2460						; size = 8
tv5554 = -2460						; size = 8
tv4956 = -2460						; size = 8
_s1$ = -2460						; size = 8
_dss_dx1$90607 = -2460					; size = 8
tv6085 = -2452						; size = 8
tv6041 = -2452						; size = 8
_r0$ = -2452						; size = 8
_dprod_dy1$90616 = -2452				; size = 8
tv7595 = -2444						; size = 8
tv6104 = -2444						; size = 8
tv5785 = -2444						; size = 8
tv5779 = -2444						; size = 8
tv5394 = -2444						; size = 8
tv5348 = -2444						; size = 8
tv5297 = -2444						; size = 8
_dhterm_dx1$90611 = -2444				; size = 8
tv7665 = -2436						; size = 8
tv6011 = -2436						; size = 8
tv5980 = -2436						; size = 8
tv5888 = -2436						; size = 8
tv5849 = -2436						; size = 8
tv5815 = -2436						; size = 8
_s2$ = -2436						; size = 8
tv6951 = -2428						; size = 8
tv6309 = -2428						; size = 8
tv6120 = -2428						; size = 8
tv5403 = -2428						; size = 8
tv5023 = -2428						; size = 8
tv4968 = -2428						; size = 8
tv7768 = -2420						; size = 8
tv6050 = -2420						; size = 8
tv6000 = -2420						; size = 8
tv5925 = -2420						; size = 8
tv5274 = -2420						; size = 8
_dprod_dx0$90614 = -2420				; size = 8
tv5313 = -2412						; size = 8
tv12072 = -2408						; size = 4
tv11354 = -2408						; size = 4
tv10570 = -2408						; size = 4
tv9875 = -2408						; size = 4
_sign$ = -2408						; size = 4
_k$90601 = -2408					; size = 4
_ddhdrdx$ = -2404					; size = 72
_dddadxdrdr$ = -2332					; size = 216
_dddadrdrdx$ = -2116					; size = 216
_dddadxdrdx$ = -1900					; size = 216
_dddadrdrdr$ = -1684					; size = 216
_ddhdxdx$ = -1468					; size = 72
_ddhdxdr$ = -1396					; size = 72
_ddhdrdr$ = -1324					; size = 72
_dddadxdxdx$ = -1252					; size = 216
_dddadrdxdx$ = -1036					; size = 216
_dddadxdxdr$ = -820					; size = 216
_dddadrdxdr$ = -604					; size = 216
_ddadrdx$ = -388					; size = 72
_ddadrdr$ = -316					; size = 72
_ddadxdr$ = -244					; size = 72
_ddadxdx$ = -172					; size = 72
_dhdx$ = -100						; size = 24
_dhdr$ = -76						; size = 24
_dadx$ = -52						; size = 24
_dadr$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_v_info$ = 8						; size = 4
_mode$ = 12						; size = 4
_power$ = 16						; size = 8
_sq_mean_curv_cyl_all PROC				; COMDAT

; 1903 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2732				; 00000aacH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	mov	esi, DWORD PTR _v_info$[ebp]

; 1904 :   REAL s1,s2;  /* edge lengths */
; 1905 :   REAL *side1 = v_info->sides[0][0],*side2 = v_info->sides[0][1];

	mov	eax, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [eax]

; 1906 :   REAL energy;
; 1907 :   REAL area;  /* of entire pair of frustrums */
; 1908 :   REAL h,hh;
; 1909 :   REAL r0,r1,r2;  /* radii; r1 is middle radius, at varying vertex */
; 1910 :   REAL dadx[3],dadr[3]; /* index refers to v_info order */
; 1911 :   REAL ddadxdx[3][3],ddadxdr[3][3],ddadrdr[3][3],ddadrdx[3][3],dhdx[3],dhdr[3];
; 1912 :   REAL ddhdxdx[3][3],ddhdxdr[3][3],ddhdrdr[3][3],ddhdrdx[3][3];
; 1913 :   REAL dddadxdxdx[3][3][3];
; 1914 :   REAL dddadxdxdr[3][3][3];
; 1915 :   REAL dddadxdrdx[3][3][3];
; 1916 :   REAL dddadxdrdr[3][3][3];
; 1917 :   REAL dddadrdxdx[3][3][3];
; 1918 :   REAL dddadrdxdr[3][3][3];
; 1919 :   REAL dddadrdrdx[3][3][3];
; 1920 :   REAL dddadrdrdr[3][3][3];
; 1921 :   REAL root;
; 1922 :   int i,j;
; 1923 :   int sign; /* of curvature */
; 1924 : 
; 1925 : 
; 1926 :   if ( (v_info->vcount == 2)  &&
; 1927 :           (fabs(v_info->x[0][1]) < 1e-10) )

	mov	ecx, DWORD PTR [esi+12]
	mov	ebx, DWORD PTR [eax+4]
	push	edi
	mov	edi, DWORD PTR [eax]
	cmp	ecx, 2
	jne	$LN62@sq_mean_cu@2
	mov	edx, DWORD PTR [esi+416]
	fld	QWORD PTR [edx+8]
	fabs
	fcomp	QWORD PTR __real@3ddb7cdfd9d7bdbb
	fnstsw	ax
	test	ah, 5
	jp	$LN62@sq_mean_cu@2

; 1928 :   { /* assume this is an endpoint on the axis, so we do special
; 1929 :        concentrated squared curvature */
; 1930 :     edge_id e_id = get_vertex_edge(v_info->id);

	mov	eax, DWORD PTR [esi]

; 1931 :     int sign = inverted(e_id) ? 1 : -1; /* in case of h0 */

	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	ebx, DWORD PTR [edx+28]

; 1932 :     REAL ss = SDIM_dot(side1,side1);

	mov	eax, DWORD PTR _web+616
	and	ebx, 134217728				; 08000000H
	push	eax
	neg	ebx
	sbb	ebx, ebx
	push	edi
	push	edi
	and	ebx, 2
	call	_dot

; 1933 :     REAL dx = v_info->x[1][0] - v_info->x[0][0];

	mov	ecx, DWORD PTR [esi+420]
	fld	QWORD PTR [ecx]
	mov	edx, DWORD PTR [esi+416]
	fsub	QWORD PTR [edx]

; 1934 :     REAL prod; /* full power */
; 1935 :     REAL hterm; /* h - h0 */
; 1936 :     REAL gradprod=0.0; /* one less power, for grad */
; 1937 :     REAL hessprod=0.0; /* two less power, for hess */
; 1938 :     int k;
; 1939 :     REAL dx_dx0=-1,dx_dx1=1,dx_dy0=0,dx_dy1=0;
; 1940 :     REAL dss_dx0,dss_dx1,dss_dy0,dss_dy1;
; 1941 :     REAL dhterm_dx0,dhterm_dx1,dhterm_dy0,dhterm_dy1;
; 1942 :     REAL dprod_dx0,dprod_dx1,dprod_dy1;
; 1943 :     
; 1944 :     REAL dss_dx0_dx0,dss_dx0_dx1,dss_dx0_dy0=0,dss_dx0_dy1=0;
; 1945 :     REAL dss_dx1_dx0,dss_dx1_dx1,dss_dx1_dy0=0,dss_dx1_dy1=0;
; 1946 :     REAL dss_dy0_dx0=0,dss_dy0_dx1=0,dss_dy0_dy0,dss_dy0_dy1;
; 1947 :     REAL dss_dy1_dx0=0,dss_dy1_dx1=0,dss_dy1_dy0,dss_dy1_dy1;
; 1948 :    
; 1949 :     REAL dhterm_dx0_dx0,dhterm_dx0_dx1,dhterm_dx0_dy0,dhterm_dx0_dy1;
; 1950 :     REAL dhterm_dx1_dx0,dhterm_dx1_dx1,dhterm_dx1_dy0,dhterm_dx1_dy1;
; 1951 :     REAL dhterm_dy0_dx0,dhterm_dy0_dx1,dhterm_dy0_dy0,dhterm_dy0_dy1;
; 1952 :     REAL dhterm_dy1_dx0,dhterm_dy1_dx1,dhterm_dy1_dy0,dhterm_dy1_dy1;
; 1953 :     
; 1954 :     REAL dprod_dx0_dx0,dprod_dx0_dy1;
; 1955 :     REAL dprod_dx1_dy1;
; 1956 :     REAL dprod_dy1_dy1;
; 1957 :        
; 1958 :     hterm = sign*2*dx/ss - h0_value;

	lea	eax, DWORD PTR [ebx+ebx-2]
	mov	DWORD PTR tv12072[ebp], eax
	add	esp, 12					; 0000000cH
	fst	QWORD PTR _dx$90596[ebp]

; 1959 :     for ( prod = 1.0, k = 0 ; k < power ; k++ )

	xor	ecx, ecx
	fldz
	fld	ST(0)
	fst	QWORD PTR _gradprod$90599[ebp]
	fxch	ST(1)
	fst	QWORD PTR _hessprod$90600[ebp]
	fild	DWORD PTR tv12072[ebp]
	fst	QWORD PTR tv4940[ebp]
	fld	ST(0)
	fmul	ST(0), ST(4)
	fdiv	ST(0), ST(5)
	fsub	QWORD PTR _h0_value
	fstp	QWORD PTR _hterm$90598[ebp]
	fld1
	fst	QWORD PTR _prod$90597[ebp]
	fld	QWORD PTR _power$[ebp]
	fcom	ST(3)
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN115@sq_mean_cu@2

; 1961 :       gradprod = prod;

	fstp	ST(4)
	fstp	ST(3)
$LN59@sq_mean_cu@2:

; 1963 :     }
; 1964 :     energy = prod*M_PI*ss/4;
; 1965 :     if ( mode == METHOD_VALUE )

	mov	eax, DWORD PTR _mode$[ebp]
	fxch	ST(2)
	fmul	QWORD PTR __real@400921fb54442d18
	fst	QWORD PTR tv4949[ebp]
	fmul	ST(0), ST(4)
	fmul	QWORD PTR __real@3fd0000000000000
	fst	QWORD PTR _energy$[ebp]
	cmp	eax, 1767				; 000006e7H
	jne	SHORT $LN124@sq_mean_cu@2
	fstp	ST(4)
	pop	edi
	fstp	ST(0)
	pop	esi
	fstp	ST(1)
	pop	ebx
	fstp	ST(0)

; 2493 : 
; 2494 : } // end sq_mean_curv_cyl_all(:

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN121@sq_mean_cu@2:

; 1959 :     for ( prod = 1.0, k = 0 ; k < power ; k++ )

	fxch	ST(1)
	fxch	ST(4)
$LN115@sq_mean_cu@2:

; 1960 :     { hessprod = gradprod;

	fxch	ST(4)
	inc	ecx
	fstp	QWORD PTR _hessprod$90600[ebp]
	mov	DWORD PTR _k$90601[ebp], ecx

; 1961 :       gradprod = prod;

	fld	ST(0)

; 1962 :       prod *= hterm;

	fxch	ST(1)
	fmul	QWORD PTR _hterm$90598[ebp]
	fild	DWORD PTR _k$90601[ebp]
	fcomp	ST(5)
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN121@sq_mean_cu@2
	fstp	ST(4)
	fxch	ST(3)
	fst	QWORD PTR _prod$90597[ebp]
	fxch	ST(3)
	fstp	QWORD PTR _gradprod$90599[ebp]
	jmp	SHORT $LN59@sq_mean_cu@2
$LN124@sq_mean_cu@2:

; 1963 :     }
; 1964 :     energy = prod*M_PI*ss/4;
; 1965 :     if ( mode == METHOD_VALUE )

	fstp	ST(0)

; 1966 :       return energy;
; 1967 : 
; 1968 :     /* gradient */
; 1969 :     dss_dx0 = -2*side1[0];
; 1970 :     dss_dx1 =  2*side1[0];
; 1971 :     dss_dy0 = -2*side1[1];
; 1972 :     dss_dy1 =  2*side1[1];
; 1973 :     dhterm_dx0 = sign*2*(-1/ss - dx/ss/ss*dss_dx0);
; 1974 :     dhterm_dy0 = sign*2*(      - dx/ss/ss*dss_dy0);
; 1975 :     dhterm_dx1 = sign*2*( 1/ss - dx/ss/ss*dss_dx1);
; 1976 :     dhterm_dy1 = sign*2*(      - dx/ss/ss*dss_dy1);
; 1977 :     dprod_dx0 = power*gradprod*dhterm_dx0;
; 1978 :     dprod_dx1 = power*gradprod*dhterm_dx1;
; 1979 :     dprod_dy1 = power*gradprod*dhterm_dy1;
; 1980 :     v_info->grad[0][0] = dprod_dx0*M_PI*ss/4 +prod*M_PI*dss_dx0/4;

	mov	ecx, DWORD PTR [esi+1336]
	fld	QWORD PTR [edi]
	mov	edx, DWORD PTR [ecx]
	fmul	QWORD PTR __real@c000000000000000
	fld	QWORD PTR [edi]
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _dss_dx1$90607[ebp]
	fmul	QWORD PTR [edi+8]
	fld	QWORD PTR __real@bff0000000000000
	fdiv	ST(0), ST(6)
	fst	QWORD PTR tv4961[ebp]
	fxch	ST(5)
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(6)
	fst	QWORD PTR tv4963[ebp]
	fld	ST(0)
	fmul	ST(0), ST(3)
	fsubp	ST(6), ST(0)
	fxch	ST(5)
	fmul	ST(0), ST(4)
	fstp	QWORD PTR _dhterm_dx0$90610[ebp]
	fld1
	fdiv	ST(0), ST(6)
	fstp	QWORD PTR tv4968[ebp]
	fld	ST(4)
	fmul	QWORD PTR _dss_dx1$90607[ebp]
	fsubr	QWORD PTR tv4968[ebp]
	fmul	ST(0), ST(4)
	fst	QWORD PTR _dhterm_dx1$90611[ebp]
	fxch	ST(5)
	fmul	ST(0), ST(1)
	fchs
	fmulp	ST(4), ST(0)
	fxch	ST(3)
	fst	QWORD PTR _dhterm_dy1$90613[ebp]
	fld	QWORD PTR _gradprod$90599[ebp]
	fmul	QWORD PTR _power$[ebp]
	fld	QWORD PTR _dhterm_dx0$90610[ebp]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _dprod_dx0$90614[ebp]
	fld	ST(0)
	fmulp	ST(6), ST(0)
	fxch	ST(5)
	fstp	QWORD PTR _dprod_dx1$90615[ebp]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR _dprod_dy1$90616[ebp]
	fld	QWORD PTR _dprod_dx0$90614[ebp]
	fmul	QWORD PTR __real@400921fb54442d18
	fmul	ST(0), ST(5)
	fld	QWORD PTR __real@3fd0000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR tv4949[ebp]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(1)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [edx]

; 1981 :     v_info->grad[0][1] = 0.0; /* assuming constrained to axis */

	mov	ecx, DWORD PTR [esi+1336]
	mov	edx, DWORD PTR [ecx]
	fxch	ST(2)
	fst	QWORD PTR [edx+8]

; 1982 :     v_info->grad[1][0] = dprod_dx1*M_PI*ss/4 +prod*M_PI*dss_dx1/4;

	mov	ecx, DWORD PTR [esi+1336]
	fld	QWORD PTR _dprod_dx1$90615[ebp]
	mov	edx, DWORD PTR [ecx+4]
	fmul	QWORD PTR __real@400921fb54442d18
	fmul	ST(0), ST(6)
	fmulp	ST(3), ST(0)
	fld	QWORD PTR tv4949[ebp]
	fmul	QWORD PTR _dss_dx1$90607[ebp]
	fld	QWORD PTR __real@3fd0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(4)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [edx]

; 1983 :     v_info->grad[1][1] = dprod_dy1*M_PI*ss/4 +prod*M_PI*dss_dy1/4;

	fld	QWORD PTR _dprod_dy1$90616[ebp]
	fmul	QWORD PTR __real@400921fb54442d18
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(3)
	fld	QWORD PTR tv4949[ebp]
	mov	ecx, DWORD PTR [esi+1336]
	mov	edx, DWORD PTR [ecx+4]
	fmul	ST(0), ST(5)
	fmulp	ST(4), ST(0)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR [edx+8]

; 1984 :     if ( mode == METHOD_GRADIENT )

	cmp	eax, 4321				; 000010e1H
	jne	SHORT $LN57@sq_mean_cu@2
	fstp	ST(4)
	fstp	ST(0)
	fstp	ST(2)
	fstp	ST(1)

; 1985 :       return energy;

	jmp	$LN198@sq_mean_cu@2
$LN57@sq_mean_cu@2:

; 1986 : 
; 1987 :     /* hessian */
; 1988 :     dss_dx0_dx0 = 2;
; 1989 :     dss_dx0_dx1 = -2;
; 1990 :     dss_dx1_dx0 = -2;
; 1991 :     dss_dx1_dx1 = 2;
; 1992 :     dss_dy0_dy0 = 2;
; 1993 :     dss_dy0_dy1 = -2;
; 1994 :     dss_dy1_dy0 = -2;
; 1995 :     dss_dy1_dy1 = 2;
; 1996 :      
; 1997 :     dhterm_dx0_dx0 = sign*2*(1/ss/ss*dss_dx0 - dx_dx0/ss/ss*dss_dx0
; 1998 :                          +2*dx/ss/ss/ss*dss_dx0*dss_dx0 - dx/ss/ss*dss_dx0_dx0);

	fld	QWORD PTR tv4968[ebp]

; 1999 :     dhterm_dx0_dx1 = sign*2*(1/ss/ss*dss_dx1 - dx_dx1/ss/ss*dss_dx0
; 2000 :                          +2*dx/ss/ss/ss*dss_dx1*dss_dx0 - dx/ss/ss*dss_dx0_dx1);
; 2001 :     dhterm_dx0_dy0 = sign*2*(1/ss/ss*dss_dy0 - dx_dy0/ss/ss*dss_dx0
; 2002 :                          +2*dx/ss/ss/ss*dss_dy0*dss_dx0 - dx/ss/ss*dss_dx0_dy0);
; 2003 :     dhterm_dx0_dy1 = sign*2*(1/ss/ss*dss_dy1 - dx_dy1/ss/ss*dss_dx0
; 2004 :                          +2*dx/ss/ss/ss*dss_dy1*dss_dx0 - dx/ss/ss*dss_dx0_dy1);
; 2005 :                          
; 2006 :     dhterm_dy0_dx0 = sign*2*(-dx_dx0/ss/ss*dss_dy0 +2*dx/ss/ss/ss*dss_dx0*dss_dy0
; 2007 :                                   - dx/ss/ss*dss_dy0_dx0);
; 2008 :     dhterm_dy0_dx1 = sign*2*(-dx_dx1/ss/ss*dss_dy0 +2*dx/ss/ss/ss*dss_dx1*dss_dy0
; 2009 :                                   - dx/ss/ss*dss_dy0_dx1);
; 2010 :     dhterm_dy0_dy0 = sign*2*(-dx_dy0/ss/ss*dss_dy0 +2*dx/ss/ss/ss*dss_dy0*dss_dy0
; 2011 :                                   - dx/ss/ss*dss_dy0_dy0);
; 2012 :     dhterm_dy0_dy1 = sign*2*(-dx_dy1/ss/ss*dss_dy0 +2*dx/ss/ss/ss*dss_dy1*dss_dy0
; 2013 :                                   - dx/ss/ss*dss_dy0_dy1);
; 2014 :    
; 2015 :      
; 2016 :     dhterm_dx1_dx0 = sign*2*(-1/ss/ss*dss_dx0 - dx_dx0/ss/ss*dss_dx1
; 2017 :                          +2*dx/ss/ss/ss*dss_dx0*dss_dx1 - dx/ss/ss*dss_dx1_dx0);
; 2018 :     dhterm_dx1_dx1 = sign*2*(-1/ss/ss*dss_dx1 - dx_dx1/ss/ss*dss_dx1
; 2019 :                          +2*dx/ss/ss/ss*dss_dx1*dss_dx1 - dx/ss/ss*dss_dx1_dx1);
; 2020 :     dhterm_dx1_dy0 = sign*2*(-1/ss/ss*dss_dy0 - dx_dy0/ss/ss*dss_dx0
; 2021 :                          +2*dx/ss/ss/ss*dss_dy0*dss_dx1 - dx/ss/ss*dss_dx1_dy0);
; 2022 :     dhterm_dx1_dy1 = sign*2*(-1/ss/ss*dss_dy1 - dx_dy1/ss/ss*dss_dx0
; 2023 :                          +2*dx/ss/ss/ss*dss_dy1*dss_dx1 - dx/ss/ss*dss_dx1_dy1);
; 2024 :     
; 2025 :     
; 2026 :     
; 2027 :     dhterm_dy1_dx0 = sign*2*(-dx_dx0/ss/ss*dss_dy1 +2*dx/ss/ss/ss*dss_dx0*dss_dy1
; 2028 :                                   - dx/ss/ss*dss_dy1_dx0);
; 2029 :     dhterm_dy1_dx1 = sign*2*(-dx_dx1/ss/ss*dss_dy1 +2*dx/ss/ss/ss*dss_dx1*dss_dy1
; 2030 :                                   - dx/ss/ss*dss_dy1_dx1);
; 2031 :     dhterm_dy1_dy0 = sign*2*(-dx_dy0/ss/ss*dss_dy1 +2*dx/ss/ss/ss*dss_dy0*dss_dy1
; 2032 :                                   - dx/ss/ss*dss_dy1_dy0);
; 2033 :     dhterm_dy1_dy1 = sign*2*(-dx_dy1/ss/ss*dss_dy1 +2*dx/ss/ss/ss*dss_dy1*dss_dy1
; 2034 :                                   - dx/ss/ss*dss_dy1_dy1);
; 2035 :    
; 2036 :     
; 2037 :     dprod_dx0_dx0 = power*(power-1)*hessprod*dhterm_dx0*dhterm_dx0
; 2038 :         + power*gradprod*dhterm_dx0_dx0;
; 2039 :     dprod_dx0_dy1 = power*(power-1)*hessprod*dhterm_dx0*dhterm_dy1
; 2040 :         + power*gradprod*dhterm_dx0_dy1;
; 2041 :    
; 2042 :     dprod_dx1_dy1 = power*(power-1)*hessprod*dhterm_dx1*dhterm_dy1
; 2043 :         + power*gradprod*dhterm_dx1_dy1;
; 2044 :       
; 2045 :     dprod_dy1_dy1 = power*(power-1)*hessprod*dhterm_dy1*dhterm_dy1
; 2046 :         + power*gradprod*dhterm_dy1_dy1;
; 2047 :   
; 2048 :     v_info->hess[0][0][0][0] = M_PI/4*(dprod_dx0_dx0*ss + dprod_dx0*dss_dx0
; 2049 :             + dprod_dx0*dss_dx0 + prod*dss_dx0_dx0);

	mov	eax, DWORD PTR [esi+1340]
	fdiv	ST(0), ST(5)
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	fstp	QWORD PTR tv5014[ebp]
	fld	QWORD PTR _dx$90596[ebp]
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(6)
	fstp	QWORD PTR tv5023[ebp]
	fld	QWORD PTR tv4963[ebp]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv6888[ebp]
	fld	QWORD PTR _power$[ebp]
	fld	QWORD PTR __real@3ff0000000000000
	fsubr	ST(0), ST(1)
	fmulp	ST(1), ST(0)
	fmul	QWORD PTR _hessprod$90600[ebp]
	fst	QWORD PTR tv5036[ebp]
	fmul	QWORD PTR _dhterm_dx0$90610[ebp]
	fst	QWORD PTR tv5037[ebp]
	fld	QWORD PTR _dprod_dx0$90614[ebp]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR tv5042[ebp]
	fld	QWORD PTR _prod$90597[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv6910[ebp]
	fld	QWORD PTR tv5014[ebp]
	fmul	ST(0), ST(2)
	fld	QWORD PTR tv4961[ebp]
	fdiv	ST(0), ST(7)
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv5023[ebp]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fsub	QWORD PTR tv6888[ebp]
	fmul	QWORD PTR tv4940[ebp]
	fmul	ST(0), ST(5)
	fxch	ST(1)
	fmul	QWORD PTR _dhterm_dx0$90610[ebp]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fld	QWORD PTR tv5042[ebp]
	fadd	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fadd	QWORD PTR tv6910[ebp]
	fmul	QWORD PTR __real@3fe921fb54442d18
	fstp	QWORD PTR [eax]

; 2050 :     v_info->hess[0][0][0][1] = 0.0;

	mov	ecx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [ecx]
	fxch	ST(1)
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	fst	QWORD PTR [ecx+8]

; 2051 :     v_info->hess[0][1][0][0] =  -v_info->hess[0][0][0][0];

	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [ecx]
	fld	QWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	fchs
	mov	eax, DWORD PTR [edx]
	fstp	QWORD PTR [eax]
	fld	QWORD PTR tv5014[ebp]
	fmul	ST(0), ST(3)
	fst	QWORD PTR tv5073[ebp]
	fld	ST(1)
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(6)
	fst	QWORD PTR tv6921[ebp]
	fmul	ST(0), ST(3)

; 2052 :     v_info->hess[0][1][0][1] =  M_PI/4*(dprod_dx0_dy1*ss + dprod_dx0*dss_dy1
; 2053 :             + dprod_dy1*dss_dx0 + prod*dss_dx0_dy1);

	fst	QWORD PTR tv6923[ebp]
	mov	ecx, DWORD PTR [esi+1340]
	fld	QWORD PTR tv5023[ebp]
	mov	edx, DWORD PTR [ecx]
	fmul	ST(0), ST(5)
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax]
	fstp	QWORD PTR tv5078[ebp]
	fld	QWORD PTR tv4963[ebp]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR tv6929[ebp]
	fld	QWORD PTR _prod$90597[ebp]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR tv6951[ebp]
	fld	QWORD PTR tv5078[ebp]
	fmul	ST(0), ST(4)
	fxch	ST(2)
	fsubrp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fsub	QWORD PTR tv6929[ebp]
	fmul	QWORD PTR tv4940[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv5037[ebp]
	fld	QWORD PTR _dhterm_dy1$90613[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(6)
	fld	QWORD PTR _dprod_dx0$90614[ebp]
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dprod_dy1$90616[ebp]
	fmulp	ST(4), ST(0)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fadd	QWORD PTR tv6951[ebp]
	fld	QWORD PTR __real@3fe921fb54442d18
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [ecx+8]

; 2054 : 
; 2055 :     v_info->hess[0][0][1][0] = 0.0; /* assuming constrained to axis */

	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx]
	fxch	ST(1)
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	fst	QWORD PTR [edx]

; 2056 :     v_info->hess[0][0][1][1] = 0.0; /* assuming constrained to axis */

	mov	eax, DWORD PTR [esi+1340]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	fst	QWORD PTR [eax+8]

; 2057 :     v_info->hess[0][1][1][0] = 0.0; /* assuming constrained to axis */

	mov	ecx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	fst	QWORD PTR [ecx]

; 2058 :     v_info->hess[0][1][1][1] = 0.0; /* assuming constrained to axis */

	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	fst	QWORD PTR [edx+8]

; 2059 : 
; 2060 :     v_info->hess[1][0][0][0] = v_info->hess[0][1][0][0];

	mov	eax, DWORD PTR [esi+1340]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+4]
	fld	QWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax]
	fstp	QWORD PTR [edx]

; 2061 :     v_info->hess[1][0][0][1] = 0.0;

	mov	eax, DWORD PTR [esi+1340]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	fstp	QWORD PTR [eax+8]

; 2062 :     v_info->hess[1][1][0][0] = -v_info->hess[1][0][0][0];

	mov	ecx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx]
	fld	QWORD PTR [ecx]
	fchs
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [edx]
	fstp	QWORD PTR [eax]

; 2063 :     v_info->hess[1][1][0][1] = M_PI/4*(dprod_dx1_dy1*ss + dprod_dx1*dss_dy1
; 2064 :                + dprod_dy1*dss_dx1 + prod*dss_dx1_dy1);

	mov	ecx, DWORD PTR [esi+1340]
	fld	QWORD PTR tv5078[ebp]
	mov	edx, DWORD PTR [ecx+4]
	fld	QWORD PTR _dss_dx1$90607[ebp]
	mov	eax, DWORD PTR [edx+4]
	fmul	ST(1), ST(0)
	mov	ecx, DWORD PTR [eax]
	fld	QWORD PTR tv5073[ebp]
	fadd	QWORD PTR tv6923[ebp]
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fsub	QWORD PTR tv6929[ebp]
	fmul	QWORD PTR tv4940[ebp]
	fmul	ST(0), ST(5)
	fld	QWORD PTR tv5036[ebp]
	fmul	QWORD PTR _dhterm_dx1$90611[ebp]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(6)
	fld	QWORD PTR _dprod_dx1$90615[ebp]
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dprod_dy1$90616[ebp]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fadd	QWORD PTR tv6951[ebp]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [ecx+8]

; 2065 :     
; 2066 :     v_info->hess[1][0][1][0] = v_info->hess[0][1][0][1];

	mov	eax, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax]
	fld	QWORD PTR [edx+8]
	mov	eax, DWORD PTR [ecx+4]
	fstp	QWORD PTR [eax]

; 2067 :     v_info->hess[1][0][1][1] = v_info->hess[0][1][1][1];

	mov	eax, DWORD PTR [esi+1340]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax+4]
	fld	QWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+4]
	fstp	QWORD PTR [edx+8]

; 2068 :     v_info->hess[1][1][1][0] = v_info->hess[1][1][0][1];

	mov	eax, DWORD PTR [esi+1340]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	fld	QWORD PTR [edx+8]
	fstp	QWORD PTR [eax]

; 2069 :     v_info->hess[1][1][1][1]=  M_PI/4*(dprod_dy1_dy1*ss + dprod_dy1*dss_dy1
; 2070 :                  + dprod_dy1*dss_dy1 + prod*dss_dy1_dy1);

	mov	ecx, DWORD PTR [esi+1340]
	fld	QWORD PTR _dprod_dy1$90616[ebp]
	mov	edx, DWORD PTR [ecx+4]
	fmul	ST(0), ST(3)
	mov	eax, DWORD PTR [edx+4]
	fld	QWORD PTR tv5078[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv6921[ebp]
	fmulp	ST(5), ST(0)
	fsubrp	ST(4), ST(0)
	fxch	ST(3)
	fsub	QWORD PTR tv6888[ebp]
	fmul	QWORD PTR tv4940[ebp]
	fmulp	ST(4), ST(0)
	fld	QWORD PTR tv5036[ebp]
	fmul	ST(0), ST(2)
	fmulp	ST(2), ST(0)
	fxch	ST(3)
	faddp	ST(1), ST(0)
	fmulp	ST(3), ST(0)
	fadd	ST(2), ST(0)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR tv6910[ebp]
	fmulp	ST(1), ST(0)
	mov	ecx, DWORD PTR [eax+4]
	pop	edi
	fstp	QWORD PTR [ecx+8]

; 2489 :      }
; 2490 :   }
; 2491 : 
; 2492 :   return energy;

	fld	QWORD PTR _energy$[ebp]
	pop	esi
	pop	ebx

; 2493 : 
; 2494 : } // end sq_mean_curv_cyl_all(:

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN62@sq_mean_cu@2:

; 2071 : 
; 2072 :     return energy;
; 2073 :   } 
; 2074 : 
; 2075 :   if ( v_info->vcount < 3 ) return 0.;

	cmp	ecx, 3
	jge	SHORT $LN56@sq_mean_cu@2
	fldz
	pop	edi
	pop	esi
	pop	ebx

; 2493 : 
; 2494 : } // end sq_mean_curv_cyl_all(:

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN56@sq_mean_cu@2:

; 2076 : 
; 2077 :   /* now regular case */
; 2078 : 
; 2079 :   r0 = v_info->x[1][1];

	mov	edx, DWORD PTR [esi+420]
	fld	QWORD PTR [edx+8]

; 2080 :   r1 = v_info->x[0][1];

	mov	eax, DWORD PTR [esi+416]

; 2081 :   r2 = v_info->x[2][1];
; 2082 :   s1 = sqrt(SDIM_dot(side1,side1));

	mov	edx, DWORD PTR _web+616
	fstp	QWORD PTR _r0$[ebp]
	fld	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR [esi+424]
	push	edx
	fstp	QWORD PTR _r1$[ebp]
	fld	QWORD PTR [ecx+8]
	push	edi
	push	edi
	fstp	QWORD PTR _r2$[ebp]
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR _s1$[ebp]

; 2083 :   s2 = sqrt(SDIM_dot(side2,side2));

	mov	eax, DWORD PTR _web+616
	push	eax
	push	ebx
	push	ebx
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fst	QWORD PTR _s2$[ebp]

; 2084 :   area = s1*(r0 + r1)/2 + s2*(r1 + r2)/2;

	fld	QWORD PTR _r2$[ebp]
	fld	QWORD PTR _r1$[ebp]
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv5274[ebp]
	fld	ST(1)
	fld	QWORD PTR _r0$[ebp]
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv5278[ebp]
	fld	QWORD PTR _s1$[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(2), ST(0)
	fld	ST(6)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(1)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR _area$[ebp]

; 2085 : 
; 2086 :   dadx[0] = -side1[0]*(r0+r1)/2/s1 - side2[0]*(r1+r2)/2/s2;

	fld	QWORD PTR [edi]
	fmul	QWORD PTR tv5278[ebp]
	fst	QWORD PTR tv5283[ebp]
	fld	QWORD PTR [ebx]
	fmulp	ST(5), ST(0)
	fxch	ST(4)
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(6)
	fst	QWORD PTR tv5290[ebp]
	fxch	ST(4)
	fmul	QWORD PTR __real@bfe0000000000000
	fdiv	ST(0), ST(1)
	fsubrp	ST(4), ST(0)
	fxch	ST(3)
	fst	QWORD PTR _dadx$[ebp]

; 2087 :   dadr[0] = (r1*r1 - r0*r0)/s1/2 + s1/2 + (r1*r1 - r2*r2)/s2/2 + s2/2;

	fld	ST(4)
	fmulp	ST(5), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fld	ST(4)
	fsubrp	ST(3), ST(0)
	fxch	ST(2)
	fst	QWORD PTR tv5294[ebp]
	fdiv	ST(0), ST(3)
	fst	QWORD PTR tv5296[ebp]
	fmul	ST(0), ST(1)
	fst	QWORD PTR tv5297[ebp]
	fxch	ST(3)
	fmul	ST(0), ST(1)
	fst	QWORD PTR tv5298[ebp]
	fld	QWORD PTR _r2$[ebp]
	fmul	ST(0), ST(0)
	fsubp	ST(5), ST(0)
	fxch	ST(4)
	fst	QWORD PTR tv5301[ebp]
	fdiv	ST(0), ST(5)

; 2088 : 
; 2089 :   sign = ( dadr[0] < 0 ) ? -1 : 1;

	mov	DWORD PTR _sign$[ebp], -1
	fst	QWORD PTR tv5303[ebp]
	fmul	ST(0), ST(1)
	fst	QWORD PTR tv5304[ebp]
	fxch	ST(5)
	fmulp	ST(1), ST(0)
	fst	QWORD PTR tv5306[ebp]
	fxch	ST(3)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fst	QWORD PTR _dadr$[ebp]
	fldz
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN66@sq_mean_cu@2
	mov	DWORD PTR _sign$[ebp], 1
$LN66@sq_mean_cu@2:

; 2090 :   root = sqrt(dadx[0]*dadx[0] + dadr[0]*dadr[0]); 

	fmul	ST(0), ST(0)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	call	__CIsqrt
	fst	QWORD PTR _root$[ebp]

; 2091 :   h = sign*root/area; /* half factor included here */

	fild	DWORD PTR _sign$[ebp]

; 2092 : 
; 2093 :   switch ( h0_flag )

	mov	eax, DWORD PTR _h0_flag
	dec	eax
	fst	QWORD PTR tv5313[ebp]
	fmulp	ST(1), ST(0)
	fld	QWORD PTR _area$[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _h$[ebp]
	je	SHORT $LN53@sq_mean_cu@2
	dec	eax

; 2096 :     default: hh = h;

	jne	SHORT $LN199@sq_mean_cu@2

; 2095 :     case H0_IN_ATTR:   hh = h - *VREAL(v_info->id,h0_attr); break;

	mov	edx, DWORD PTR _h0_attr
	mov	ecx, DWORD PTR [esi]
	imul	edx, 240				; 000000f0H
	mov	eax, DWORD PTR _web+12
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	add	edx, DWORD PTR _web+104
	mov	eax, DWORD PTR _dymem
	mov	edx, DWORD PTR [edx+eax+64]
	fsub	QWORD PTR [ecx+edx]
	jmp	SHORT $LN199@sq_mean_cu@2
$LN53@sq_mean_cu@2:

; 2094 :   { case H0_IN_GLOBAL: hh = h - h0_value; break;

	fsub	QWORD PTR _h0_value
$LN199@sq_mean_cu@2:
	fst	QWORD PTR _hh$[ebp]

; 2097 :   }
; 2098 : 
; 2099 :   if ( power == 2.0 ) energy = 2*M_PI*hh*hh*area/2;

	fld	QWORD PTR _power$[ebp]
	fld	ST(0)
	fld	QWORD PTR __real@4000000000000000
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN50@sq_mean_cu@2
	fstp	ST(0)
	fld	QWORD PTR __real@401921fb54442d18
	fmul	ST(0), ST(1)
	fmulp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _energy$[ebp]
	jmp	SHORT $LN47@sq_mean_cu@2
$LN50@sq_mean_cu@2:

; 2100 :   else if ( power == 1.0 ) energy = 2*M_PI*hh*area/2;

	fld	ST(0)
	fld1
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN195@sq_mean_cu@2
	fstp	ST(0)
	fmul	QWORD PTR __real@401921fb54442d18
	fmul	ST(0), ST(1)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _energy$[ebp]
	jmp	SHORT $LN47@sq_mean_cu@2
$LN195@sq_mean_cu@2:
	fstp	ST(2)

; 2101 :   else energy = 2*M_PI*area/2*pow(fabs(hh),power);

	fabs
	fxch	ST(1)
	call	__CIpow
	fld	QWORD PTR _area$[ebp]
	fld	QWORD PTR __real@401921fb54442d18
	fmul	ST(0), ST(1)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(3)
	fmulp	ST(1), ST(0)
	fst	QWORD PTR _energy$[ebp]
	fxch	ST(1)
	fxch	ST(2)
	fxch	ST(1)
$LN47@sq_mean_cu@2:

; 2102 : 
; 2103 :   if ( mode == METHOD_VALUE )

	cmp	DWORD PTR _mode$[ebp], 1767		; 000006e7H
	jne	SHORT $LN145@sq_mean_cu@2
	pop	edi
	fstp	ST(1)
	pop	esi
	fstp	ST(1)
	pop	ebx

; 2493 : 
; 2494 : } // end sq_mean_curv_cyl_all(:

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN145@sq_mean_cu@2:

; 2102 : 
; 2103 :   if ( mode == METHOD_VALUE )

	fstp	ST(0)

; 2104 :     return energy;
; 2105 : 
; 2106 :   /* Gradient */
; 2107 :   /* Note: v_info->grad[i][j] is component j of gradient at vertex i */
; 2108 : 
; 2109 :   dadx[1] = side1[0]*(r0+r1)/2/s1;

	fld	QWORD PTR tv5283[ebp]
	fmul	ST(0), ST(1)
	fld	QWORD PTR _s1$[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _dadx$[ebp+8]

; 2110 :   dadr[1] = -(r1*r1 - r0*r0)/s1/2 + s1/2;

	fld	QWORD PTR tv5298[ebp]
	fsub	QWORD PTR tv5297[ebp]
	fstp	QWORD PTR _dadr$[ebp+8]

; 2111 : 
; 2112 :   dadx[2] = side2[0]*(r1+r2)/2/s2;

	fld	QWORD PTR tv5290[ebp]
	fst	QWORD PTR _dadx$[ebp+16]

; 2113 :   dadr[2] = -(r1*r1 - r2*r2)/s2/2 + s2/2;

	fld	QWORD PTR tv5306[ebp]
	fsub	QWORD PTR tv5304[ebp]
	fstp	QWORD PTR _dadr$[ebp+16]

; 2114 : 
; 2115 :   ddadxdx[0][1] = -(r0+r1)/2/s1 + side1[0]*(r0+r1)/2/s1/s1/s1*side1[0];

	fld	QWORD PTR tv5278[ebp]
	fmul	ST(0), ST(4)
	fdiv	ST(0), ST(3)
	fst	QWORD PTR tv5348[ebp]
	fxch	ST(2)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fmul	QWORD PTR [edi]
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _ddadxdx$[ebp+8]

; 2116 :   ddadxdx[0][2] = -(r1+r2)/2/s2 + side2[0]*(r1+r2)/2/s2/s2/s2*side2[0];

	fld	QWORD PTR tv5274[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR _s2$[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv5354[ebp]
	fxch	ST(3)
	fdiv	ST(0), ST(1)
	fdiv	ST(0), ST(1)
	fmul	QWORD PTR [ebx]
	fsubrp	ST(3), ST(0)
	fxch	ST(2)
	fst	QWORD PTR _ddadxdx$[ebp+16]

; 2117 :   ddadxdx[0][0] = -ddadxdx[0][1] - ddadxdx[0][2];

	fxch	ST(1)
	fchs
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR _ddadxdx$[ebp]

; 2118 : 
; 2119 :   /* dadx[0] = -side1[0]*(r0+r1)/2/s1 - side2[0]*(r1+r2)/2/s2; */
; 2120 :   ddadxdr[0][1] = -side1[0]/2/s1 - side1[0]*(r1*r1-r0*r0)/s1/s1/s1/2;

	fld	QWORD PTR [edi]
	fmul	QWORD PTR tv5294[ebp]
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(2)
	fmul	ST(0), ST(3)
	fld	QWORD PTR [edi]
	fld	QWORD PTR __real@bfe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(4)
	fsub	ST(0), ST(2)
	fstp	QWORD PTR _ddadxdr$[ebp+8]

; 2121 :   ddadxdr[0][2] = -side2[0]/2/s2 - side2[0]*(r1*r1-r2*r2)/s2/s2/s2/2;

	fld	QWORD PTR [ebx]
	fmul	QWORD PTR tv5301[ebp]
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fmul	ST(0), ST(5)
	fld	QWORD PTR [ebx]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(3)
	fsub	ST(0), ST(1)
	fstp	QWORD PTR _ddadxdr$[ebp+16]

; 2122 :   ddadxdr[0][0] = -side1[0]/2/s1 + side1[0]*(r1*r1-r0*r0)/s1/s1/s1/2 
; 2123 :                   -side2[0]/2/s2 + side2[0]*(r1*r1-r2*r2)/s2/s2/s2/2;

	fld	QWORD PTR [edi]
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(4)
	fsubp	ST(2), ST(0)
	fld	QWORD PTR [ebx]
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(3)
	fsubp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _ddadxdr$[ebp]

; 2124 : 
; 2125 :   ddadrdx[0][1] = ((r1*r1-r0*r0)/2*(-1)/s1/s1 + 1/2.)*(side1[0]/s1);

	fld	QWORD PTR tv5294[ebp]
	fmul	ST(0), ST(3)
	fst	QWORD PTR tv5381[ebp]
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(2)
	fsubr	ST(0), ST(3)
	fst	QWORD PTR tv5384[ebp]
	fld	QWORD PTR [edi]
	fdiv	ST(0), ST(3)
	fmul	ST(0), ST(1)
	fst	QWORD PTR _ddadrdx$[ebp+8]

; 2126 :   ddadrdx[0][2] = ((r1*r1-r2*r2)/2*(-1)/s2/s2 + 1/2.)*(side2[0]/s2);

	fld	QWORD PTR tv5301[ebp]
	fmul	ST(0), ST(5)
	fst	QWORD PTR tv5389[ebp]
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fsubr	ST(0), ST(5)
	fst	QWORD PTR tv5392[ebp]
	fld	QWORD PTR [ebx]
	fdiv	ST(0), ST(4)
	fmulp	ST(1), ST(0)
	fst	QWORD PTR _ddadrdx$[ebp+16]

; 2127 :   ddadrdx[0][0] = -ddadrdx[0][1]-ddadrdx[0][2];

	fxch	ST(1)
	fchs
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR _ddadrdx$[ebp]

; 2128 : 
; 2129 :   ddadrdr[0][0] = r1/s1 + ((r1*r1-r0*r0)/2*(-1)/s1/s1 + 0.5)/s1*(r1-r0)
; 2130 :                 + r1/s2 + ((r1*r1-r2*r2)/2*(-1)/s2/s2 + 0.5)/s2*(r1-r2);  

	fdiv	ST(0), ST(2)
	fst	QWORD PTR tv5399[ebp]
	fld	QWORD PTR _r1$[ebp]
	fld	QWORD PTR _r0$[ebp]
	fsubr	ST(0), ST(1)
	fst	QWORD PTR tv5400[ebp]
	fld	ST(1)
	fdiv	ST(0), ST(5)
	fstp	QWORD PTR tv5403[ebp]
	fld	ST(1)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR tv5405[ebp]
	fld	QWORD PTR tv5392[ebp]
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR tv5407[ebp]
	fxch	ST(1)
	fsub	QWORD PTR _r2$[ebp]
	fst	QWORD PTR tv5408[ebp]
	fld	ST(1)
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fadd	QWORD PTR tv5403[ebp]
	fadd	QWORD PTR tv5405[ebp]
	fxch	ST(2)
	fmul	QWORD PTR tv5407[ebp]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _ddadrdr$[ebp]

; 2131 :   ddadrdr[0][1] = -r0/s1 +((r1*r1-r0*r0)/2*(-1)/s1/s1 + 0.5)/s1*(r0-r1);

	fld	QWORD PTR _r0$[ebp]
	fld	ST(0)
	fld	QWORD PTR _r1$[ebp]
	fsub	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv5412[ebp]
	fxch	ST(2)
	fdiv	ST(0), ST(5)
	fst	QWORD PTR tv5415[ebp]
	fxch	ST(2)
	fmul	QWORD PTR tv5399[ebp]
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _ddadrdr$[ebp+8]

; 2132 :   ddadrdr[0][2] = -r2/s2 + ((r1*r1-r2*r2)/2*(-1)/s2/s2 + 0.5)/s2*(r2-r1);

	fld	QWORD PTR _r2$[ebp]
	fld	ST(0)
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv5417[ebp]
	fxch	ST(1)
	fdiv	ST(0), ST(3)
	fst	QWORD PTR tv5420[ebp]
	fxch	ST(1)
	fmul	QWORD PTR tv5407[ebp]
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR _ddadrdr$[ebp+16]

; 2133 : 
; 2134 :   for ( i = 0 ; i < 3 ; i++ )
; 2135 :   { dhdx[i] = sign*(.5/root/area*
; 2136 :          (2*dadx[0]*ddadxdx[0][i] + 2*dadr[0]*ddadrdx[0][i]))
; 2137 :          - h/area*dadx[i];

	fld	QWORD PTR _dadr$[ebp]
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv5427[ebp]
	fld	QWORD PTR _dadx$[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv5432[ebp]
	fld	ST(5)
	fdiv	QWORD PTR _root$[ebp]
	fdiv	ST(0), ST(7)
	fstp	QWORD PTR tv5437[ebp]
	fld	QWORD PTR _h$[ebp]
	fdiv	ST(0), ST(7)
	fstp	QWORD PTR tv5444[ebp]
	fmul	QWORD PTR _ddadxdx$[ebp]
	fld	QWORD PTR _ddadrdx$[ebp]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR tv5437[ebp]
	fmul	QWORD PTR tv5313[ebp]
	fld	QWORD PTR tv5444[ebp]
	fmul	QWORD PTR _dadx$[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _dhdx$[ebp]

; 2138 :     dhdr[i] = sign*(.5/root/area*
; 2139 :          (2*dadx[0]*ddadxdr[0][i] + 2*dadr[0]*ddadrdr[0][i]))
; 2140 :          - h/area*dadr[i];

	fld	QWORD PTR _ddadxdr$[ebp]
	fmul	QWORD PTR tv5432[ebp]
	fld	QWORD PTR _ddadrdr$[ebp]
	fmul	QWORD PTR tv5427[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR tv5437[ebp]
	fmul	QWORD PTR tv5313[ebp]
	fld	QWORD PTR tv5444[ebp]
	fmul	QWORD PTR _dadr$[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _dhdr$[ebp]
	fld	QWORD PTR _ddadxdx$[ebp+8]
	fmul	QWORD PTR tv5432[ebp]
	fld	QWORD PTR _ddadrdx$[ebp+8]
	fmul	QWORD PTR tv5427[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR tv5437[ebp]
	fmul	QWORD PTR tv5313[ebp]
	fld	QWORD PTR tv5444[ebp]
	fmul	QWORD PTR _dadx$[ebp+8]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _dhdx$[ebp+8]
	fld	QWORD PTR _ddadxdr$[ebp+8]
	fmul	QWORD PTR tv5432[ebp]
	fld	QWORD PTR _ddadrdr$[ebp+8]
	fmul	QWORD PTR tv5427[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR tv5437[ebp]
	fmul	QWORD PTR tv5313[ebp]
	fld	QWORD PTR tv5444[ebp]
	fmul	QWORD PTR _dadr$[ebp+8]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _dhdr$[ebp+8]
	fld	QWORD PTR _ddadxdx$[ebp+16]
	fmul	QWORD PTR tv5432[ebp]
	fld	QWORD PTR _ddadrdx$[ebp+16]
	fmul	QWORD PTR tv5427[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR tv5437[ebp]
	fmul	QWORD PTR tv5313[ebp]
	fld	QWORD PTR tv5444[ebp]
	fmul	QWORD PTR _dadx$[ebp+16]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _dhdx$[ebp+16]
	fld	QWORD PTR _ddadxdr$[ebp+16]
	fmul	QWORD PTR tv5432[ebp]
	fld	QWORD PTR _ddadrdr$[ebp+16]
	fmul	QWORD PTR tv5427[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR tv5437[ebp]
	fmul	QWORD PTR tv5313[ebp]
	fld	QWORD PTR tv5444[ebp]
	fmul	QWORD PTR _dadr$[ebp+16]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _dhdr$[ebp+16]

; 2141 :   }
; 2142 :   
; 2143 :   if ( power == 2.0 ) 

	fld	QWORD PTR _power$[ebp]
	fld	QWORD PTR __real@4000000000000000
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	$LN148@sq_mean_cu@2

; 2144 :   { for ( i = 0 ; i < 3 ; i++ )
; 2145 :     { v_info->grad[i][0] = 2*M_PI*(2*hh*dhdx[i]*area + hh*hh*dadx[i])/2;

	fld	QWORD PTR _hh$[ebp]
	mov	eax, DWORD PTR [esi+1336]
	fld	ST(0)
	mov	ecx, DWORD PTR [eax]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv5551[ebp]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv5554[ebp]
	fxch	ST(1)
	fmul	QWORD PTR _dhdx$[ebp]
	fmul	ST(0), ST(6)
	fxch	ST(1)
	fmul	QWORD PTR _dadx$[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __real@401921fb54442d18
	fmul	ST(0), ST(4)
	fstp	QWORD PTR [ecx]

; 2146 :       v_info->grad[i][1] = 2*M_PI*(2*hh*dhdr[i]*area + hh*hh*dadr[i])/2;

	mov	edx, DWORD PTR [esi+1336]
	fld	QWORD PTR tv5551[ebp]
	mov	eax, DWORD PTR [edx]
	fmul	QWORD PTR _dhdr$[ebp]
	fmul	ST(0), ST(5)
	fld	QWORD PTR tv5554[ebp]
	fmul	QWORD PTR _dadr$[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __real@401921fb54442d18
	fmul	ST(0), ST(4)
	fstp	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR [esi+1336]
	fld	QWORD PTR tv5551[ebp]
	mov	edx, DWORD PTR [ecx+4]
	fmul	QWORD PTR _dhdx$[ebp+8]
	fmul	ST(0), ST(5)
	fld	QWORD PTR tv5554[ebp]
	fmul	QWORD PTR _dadx$[ebp+8]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __real@401921fb54442d18
	fmul	ST(0), ST(4)
	fstp	QWORD PTR [edx]
	mov	eax, DWORD PTR [esi+1336]
	fld	QWORD PTR tv5551[ebp]
	mov	ecx, DWORD PTR [eax+4]
	fmul	QWORD PTR _dhdr$[ebp+8]
	fmul	ST(0), ST(5)
	fld	QWORD PTR tv5554[ebp]
	fmul	QWORD PTR _dadr$[ebp+8]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __real@401921fb54442d18
	fmul	ST(0), ST(4)
	fstp	QWORD PTR [ecx+8]
	mov	edx, DWORD PTR [esi+1336]
	fld	QWORD PTR tv5551[ebp]
	mov	eax, DWORD PTR [edx+8]
	fmul	QWORD PTR _dhdx$[ebp+16]
	fmul	ST(0), ST(5)
	fld	QWORD PTR tv5554[ebp]
	fmul	QWORD PTR _dadx$[ebp+16]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __real@401921fb54442d18
	fmul	ST(0), ST(4)
	fstp	QWORD PTR [eax]
	fld	QWORD PTR tv5551[ebp]
	fmul	QWORD PTR _dhdr$[ebp+16]
	fmul	ST(0), ST(5)
	fld	QWORD PTR tv5554[ebp]
	fmul	QWORD PTR _dadr$[ebp+16]

; 2147 :     }
; 2148 :   }
; 2149 :   else if ( power == 1.0 ) 

	jmp	$LN200@sq_mean_cu@2
$LN148@sq_mean_cu@2:

; 2141 :   }
; 2142 :   
; 2143 :   if ( power == 2.0 ) 

	fstp	ST(0)

; 2147 :     }
; 2148 :   }
; 2149 :   else if ( power == 1.0 ) 

	fld	QWORD PTR _power$[ebp]
	fld1
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	$LN191@sq_mean_cu@2
	fstp	ST(0)

; 2150 :   { for ( i = 0 ; i < 3 ; i++ )
; 2151 :     { v_info->grad[i][0] = 2*M_PI*(dhdx[i]*area + hh*dadx[i])/2;

	mov	eax, DWORD PTR [esi+1336]
	fld	QWORD PTR _dhdx$[ebp]
	mov	ecx, DWORD PTR [eax]
	fmul	ST(0), ST(5)
	fld	QWORD PTR _hh$[ebp]
	fmul	QWORD PTR _dadx$[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __real@401921fb54442d18
	fmul	ST(0), ST(4)
	fstp	QWORD PTR [ecx]

; 2152 :       v_info->grad[i][1] = 2*M_PI*(dhdr[i]*area + hh*dadr[i])/2;

	mov	edx, DWORD PTR [esi+1336]
	fld	QWORD PTR _dhdr$[ebp]
	mov	eax, DWORD PTR [edx]
	fmul	ST(0), ST(5)
	fld	QWORD PTR _hh$[ebp]
	fmul	QWORD PTR _dadr$[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __real@401921fb54442d18
	fmul	ST(0), ST(4)
	fstp	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR [esi+1336]
	fld	QWORD PTR _dhdx$[ebp+8]
	mov	edx, DWORD PTR [ecx+4]
	fmul	ST(0), ST(5)
	fld	QWORD PTR _dadx$[ebp+8]
	fld	QWORD PTR _hh$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __real@401921fb54442d18
	fmul	ST(0), ST(5)
	fstp	QWORD PTR [edx]
	mov	eax, DWORD PTR [esi+1336]
	fld	QWORD PTR _dhdr$[ebp+8]
	mov	ecx, DWORD PTR [eax+4]
	fmul	ST(0), ST(6)
	fld	QWORD PTR _dadr$[ebp+8]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __real@401921fb54442d18
	fmul	ST(0), ST(5)
	fstp	QWORD PTR [ecx+8]
	mov	edx, DWORD PTR [esi+1336]
	fld	QWORD PTR _dhdx$[ebp+16]
	mov	eax, DWORD PTR [edx+8]
	fmul	ST(0), ST(6)
	fld	QWORD PTR _dadx$[ebp+16]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __real@401921fb54442d18
	fmul	ST(0), ST(5)
	fstp	QWORD PTR [eax]
	fld	QWORD PTR _dhdr$[ebp+16]
	fmul	ST(0), ST(6)
	fld	QWORD PTR _dadr$[ebp+16]
	fmulp	ST(2), ST(0)
$LN200@sq_mean_cu@2:
	mov	ecx, DWORD PTR [esi+1336]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR [ecx+8]
	fmul	QWORD PTR __real@401921fb54442d18
	fmul	ST(0), ST(4)
	fstp	QWORD PTR [edx+8]

; 2153 :     }
; 2154 :   }
; 2155 :   else

	jmp	$LN105@sq_mean_cu@2
$LN191@sq_mean_cu@2:

; 2147 :     }
; 2148 :   }
; 2149 :   else if ( power == 1.0 ) 

	fstp	ST(3)
	fstp	ST(1)
	fstp	ST(2)
	fstp	ST(2)
	fstp	ST(0)

; 2156 :   { REAL pp = pow(fabs(hh),power-1);

	fld	QWORD PTR _hh$[ebp]
	fabs
	fld	QWORD PTR _power$[ebp]
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	call	__CIpow

; 2157 :     for ( i = 0 ; i < 3 ; i++ )
; 2158 :     { v_info->grad[i][0] = 2*M_PI*(power*pp*dhdx[i]*area + pp*hh*dadx[i])/2;

	fld	QWORD PTR _power$[ebp]
	fmul	ST(0), ST(1)
	mov	eax, DWORD PTR [esi+1336]
	mov	ecx, DWORD PTR [eax]
	fxch	ST(1)
	fmul	QWORD PTR _hh$[ebp]
	fld	ST(1)
	fmul	QWORD PTR _dhdx$[ebp]
	fld	QWORD PTR _area$[ebp]
	fmul	ST(1), ST(0)
	fld	ST(2)
	fmul	QWORD PTR _dadx$[ebp]
	faddp	ST(2), ST(0)
	fld	QWORD PTR __real@401921fb54442d18
	fmul	ST(2), ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(3), ST(0)
	fxch	ST(3)
	fstp	QWORD PTR [ecx]

; 2159 :       v_info->grad[i][1] = 2*M_PI*(power*pp*dhdr[i]*area + pp*hh*dadr[i])/2;

	mov	edx, DWORD PTR [esi+1336]
	mov	eax, DWORD PTR [edx]
	fld	ST(4)
	fmul	QWORD PTR _dhdr$[ebp]
	fmul	ST(0), ST(2)
	fld	ST(4)
	fmul	QWORD PTR _dadr$[ebp]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(3)
	fstp	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR [esi+1336]
	mov	edx, DWORD PTR [ecx+4]
	fld	ST(4)
	fmul	QWORD PTR _dhdx$[ebp+8]
	fmul	ST(0), ST(2)
	fld	ST(4)
	fmul	QWORD PTR _dadx$[ebp+8]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(3)
	fstp	QWORD PTR [edx]
	mov	eax, DWORD PTR [esi+1336]
	mov	ecx, DWORD PTR [eax+4]
	fld	ST(4)
	fmul	QWORD PTR _dhdr$[ebp+8]
	fmul	ST(0), ST(2)
	fld	ST(4)
	fmul	QWORD PTR _dadr$[ebp+8]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(3)
	fstp	QWORD PTR [ecx+8]
	mov	edx, DWORD PTR [esi+1336]
	mov	eax, DWORD PTR [edx+8]
	fld	ST(4)
	fmul	QWORD PTR _dhdx$[ebp+16]
	fmul	ST(0), ST(2)
	fld	ST(4)
	fmul	QWORD PTR _dadx$[ebp+16]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(3)
	fstp	QWORD PTR [eax]
	fxch	ST(4)
	fmul	QWORD PTR _dhdr$[ebp+16]
	fmul	ST(0), ST(1)
	fxch	ST(3)
	fmul	QWORD PTR _dadr$[ebp+16]
	faddp	ST(3), ST(0)
	fxch	ST(2)
	mov	ecx, DWORD PTR [esi+1336]
	fmulp	ST(3), ST(0)
	mov	edx, DWORD PTR [ecx+8]
	fmul	ST(2), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR [edx+8]
	fld	QWORD PTR _s1$[ebp]
	fld	QWORD PTR _s2$[ebp]
	fld	QWORD PTR tv5400[ebp]
	fxch	ST(3)
	fxch	ST(4)
	fxch	ST(3)
$LN105@sq_mean_cu@2:

; 2160 :     }
; 2161 :   }
; 2162 : 
; 2163 :   if ( mode == METHOD_GRADIENT )

	cmp	DWORD PTR _mode$[ebp], 4321		; 000010e1H
	jne	SHORT $LN29@sq_mean_cu@2
	fstp	ST(2)
	fstp	ST(0)
	fstp	ST(1)
	fstp	ST(1)

; 2164 :     return energy;

	jmp	$LN198@sq_mean_cu@2
$LN29@sq_mean_cu@2:

; 2165 : 
; 2166 :   /*  Hessian */
; 2167 :   /*  Note: v_info->hess[i][ii][j][jj] is component j of vertex i and 
; 2168 :       component jj of vertex ii */
; 2169 : 
; 2170 :   /* dadx[1] = side1[0]*(r0+r1)/2/s1; */
; 2171 : 
; 2172 :   ddadxdx[1][1] =  (r0+r1)/2/s1 - side1[0]*(r0+r1)/2/s1/s1/s1*side1[0];

	fld	QWORD PTR [edi]
	fmul	QWORD PTR tv5278[ebp]
	fld	ST(0)
	fmul	ST(0), ST(5)
	fst	QWORD PTR tv5340[ebp]
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fmul	QWORD PTR [edi]
	fsubr	QWORD PTR tv5348[ebp]
	fstp	QWORD PTR _ddadxdx$[ebp+32]

; 2173 :   ddadxdx[1][2] =  0;

	fldz
	fst	QWORD PTR _ddadxdx$[ebp+40]

; 2174 :   ddadxdx[1][0] =  -ddadxdx[1][1];

	fld	QWORD PTR _ddadxdx$[ebp+32]
	fchs
	fstp	QWORD PTR _ddadxdx$[ebp+24]

; 2175 : 
; 2176 :   ddadxdr[1][1] =  side1[0]/2/s1 + side1[0]*(r0+r1)/s1/s1/s1/2*(r1-r0);

	fxch	ST(1)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(2)
	fst	QWORD PTR tv5779[ebp]
	fld	QWORD PTR [edi]
	fmul	ST(0), ST(6)
	fdiv	ST(0), ST(5)
	fst	QWORD PTR tv5375[ebp]
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _ddadxdr$[ebp+32]

; 2177 :   ddadxdr[1][2] =  0;

	fxch	ST(1)
	fst	QWORD PTR _ddadxdr$[ebp+40]

; 2178 :   ddadxdr[1][0] =  side1[0]/2/s1 - side1[0]*(r0+r1)/s1/s1/s1/2*(r1-r0);

	fxch	ST(1)
	fsub	QWORD PTR tv5779[ebp]
	fstp	QWORD PTR _ddadxdr$[ebp+24]

; 2179 : 
; 2180 :   /* dadr[1] = -(r1*r1 - r0*r0)/s1/2 + s1/2; */
; 2181 : 
; 2182 :   ddadrdx[1][1] = (-(r1*r1-r0*r0)/2*(-1)/s1/s1 + 1/2.)*(side1[0]/s1);

	fld	QWORD PTR tv5381[ebp]
	fmul	QWORD PTR __real@bff0000000000000
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fsubr	ST(0), ST(5)
	fst	QWORD PTR tv5785[ebp]
	fld	QWORD PTR [edi]
	fdiv	ST(0), ST(5)
	fst	QWORD PTR tv5386[ebp]
	fmulp	ST(1), ST(0)
	fst	QWORD PTR _ddadrdx$[ebp+32]

; 2183 :   ddadrdx[1][2] = 0;

	fxch	ST(1)
	fst	QWORD PTR _ddadrdx$[ebp+40]

; 2184 :   ddadrdx[1][0] = -ddadrdx[1][1];

	fxch	ST(1)
	fchs
	fstp	QWORD PTR _ddadrdx$[ebp+24]

; 2185 : 
; 2186 :   ddadrdr[1][0] = -r1/s1 + (-(r1*r1-r0*r0)/2*(-1)/s1/s1 + 0.5)/s1*(r1-r0);

	fld	QWORD PTR tv5785[ebp]
	fdiv	ST(0), ST(4)
	fld	ST(0)
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fsub	QWORD PTR tv5403[ebp]
	fstp	QWORD PTR _ddadrdr$[ebp+24]

; 2187 :   ddadrdr[1][1] =  r0/s1 + (-(r1*r1-r0*r0)/2*(-1)/s1/s1 + 0.5)/s1*(r0-r1);

	fxch	ST(1)
	fmul	QWORD PTR tv5412[ebp]
	fadd	QWORD PTR tv5415[ebp]
	fstp	QWORD PTR _ddadrdr$[ebp+32]

; 2188 :   ddadrdr[1][2] = 0;

	fst	QWORD PTR _ddadrdr$[ebp+40]

; 2189 : 
; 2190 : 
; 2191 :   /* dadx[2] = side2[0]*(r1+r2)/2/s2; */
; 2192 : 
; 2193 :   ddadxdx[2][1] = 0;

	fst	QWORD PTR _ddadxdx$[ebp+56]

; 2194 :   ddadxdx[2][2] = (r1+r2)/2/s2 - side2[0]*(r1+r2)/2/s2/s2/s2*side2[0];

	fld	QWORD PTR [ebx]
	fmul	QWORD PTR tv5274[ebp]
	fld	ST(0)
	fmul	ST(0), ST(5)
	fst	QWORD PTR tv5289[ebp]
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fmul	QWORD PTR [ebx]
	fsubr	QWORD PTR tv5354[ebp]
	fst	QWORD PTR _ddadxdx$[ebp+64]

; 2195 :   ddadxdx[2][0] = -ddadxdx[2][2];

	fchs
	fstp	QWORD PTR _ddadxdx$[ebp+48]

; 2196 : 
; 2197 :   ddadxdr[2][1] = 0;

	fxch	ST(1)
	fst	QWORD PTR _ddadxdr$[ebp+56]

; 2198 :   ddadxdr[2][2] =  side2[0]/2/s2 + side2[0]*(r2+r1)/s2/s2/s2/2*(r1-r2);

	fxch	ST(1)
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(2)
	fmul	ST(0), ST(4)
	fmul	QWORD PTR tv5408[ebp]
	fld	QWORD PTR [ebx]
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(3)
	fst	QWORD PTR tv5378[ebp]
	fld	ST(1)
	fadd	ST(0), ST(1)
	fstp	QWORD PTR _ddadxdr$[ebp+64]

; 2199 :   ddadxdr[2][0] =  side2[0]/2/s2 - side2[0]*(r2+r1)/s2/s2/s2/2*(r1-r2);

	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR _ddadxdr$[ebp+48]

; 2200 : 
; 2201 :   /* dadr[2] = -(r1*r1 - r2*r2)/s2/2 + s2/2; */
; 2202 : 
; 2203 :   ddadrdx[2][1] = 0;

	fst	QWORD PTR _ddadrdx$[ebp+56]

; 2204 :   ddadrdx[2][2] = (-(r1*r1-r2*r2)/2*(-1)/s2/s2 + 1/2.)*(side2[0]/s2);

	fld	QWORD PTR tv5389[ebp]
	fmul	QWORD PTR __real@bff0000000000000
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(2)
	fsubr	ST(0), ST(4)
	fld	QWORD PTR [ebx]
	fdiv	ST(0), ST(3)
	fst	QWORD PTR tv5394[ebp]
	fmul	ST(0), ST(1)
	fst	QWORD PTR _ddadrdx$[ebp+64]

; 2205 :   ddadrdx[2][0] = -ddadrdx[2][2];

	fchs
	fstp	QWORD PTR _ddadrdx$[ebp+48]

; 2206 : 
; 2207 :   ddadrdr[2][0] = -r1/s2 + (-(r1*r1-r2*r2)/2*(-1)/s2/s2 + 0.5)/s2*(r1-r2);  

	fdiv	ST(0), ST(2)
	fld	QWORD PTR tv5408[ebp]
	fmul	ST(0), ST(1)
	fsub	QWORD PTR tv5405[ebp]
	fstp	QWORD PTR _ddadrdr$[ebp+48]

; 2208 :   ddadrdr[2][1] = 0;

	fxch	ST(1)
	fst	QWORD PTR _ddadrdr$[ebp+56]

; 2209 :   ddadrdr[2][2] =  r2/s2 + (-(r1*r1-r2*r2)/2*(-1)/s2/s2 + 0.5)/s2*(r2-r1);

	fxch	ST(1)
	fmul	QWORD PTR tv5417[ebp]
	fadd	QWORD PTR tv5420[ebp]
	fstp	QWORD PTR _ddadrdr$[ebp+64]

; 2210 : 
; 2211 :   /* ddadxdx[0][1] = -(r0+r1)/2/s1 + side1[0]*(r0+r1)/2/s1/s1/s1*side1[0]; */
; 2212 :   dddadxdxdx[0][1][0] = -(r0+r1)/2/s1/s1/s1/(-2)*(-2*side1[0])
; 2213 :         - 2*side1[0]*(r0+r1)/2/s1/s1/s1
; 2214 :         - 1.5*side1[0]*side1[0]*(r0+r1)/2/s1/s1/s1/s1/s1*(-2*side1[0]);

	fld	QWORD PTR tv5278[ebp]
	fmul	QWORD PTR __real@bfe0000000000000
	fst	QWORD PTR tv5815[ebp]
	fld	QWORD PTR [edi]
	fmul	QWORD PTR __real@c000000000000000
	fst	QWORD PTR tv4955[ebp]
	fld	QWORD PTR [edi]
	fadd	ST(0), ST(0)
	fstp	QWORD PTR tv4956[ebp]
	fxch	ST(1)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fmul	QWORD PTR __real@bfe0000000000000
	fmulp	ST(1), ST(0)
	fld	QWORD PTR tv4956[ebp]
	fld	QWORD PTR tv5278[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(6)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(5)
	fsubp	ST(2), ST(0)
	fld	QWORD PTR [edi]
	fmul	QWORD PTR __real@3ff8000000000000
	fmul	QWORD PTR [edi]
	fmulp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fmul	QWORD PTR tv4955[ebp]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _dddadxdxdx$[ebp+24]

; 2215 :   dddadxdxdx[0][1][1] = -dddadxdxdx[0][1][0];

	fchs
	fst	QWORD PTR tv5839[ebp]
	fstp	QWORD PTR _dddadxdxdx$[ebp+32]

; 2216 :   dddadxdxdx[0][1][2] = 0;

	fst	QWORD PTR _dddadxdxdx$[ebp+40]

; 2217 :   dddadxdxdr[0][1][0] = -1./2/s1 + side1[0]/2/s1/s1/s1*side1[0]
; 2218 :       + (-(r0+r1)/2*(-1)/s1/s1 + side1[0]*(r0+r1)/2*(-3)/s1/s1/s1/s1*side1[0])
; 2219 :        *(r1-r0)/s1;

	fld	QWORD PTR tv5815[ebp]
	fmul	QWORD PTR __real@bff0000000000000
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fld	QWORD PTR tv5340[ebp]
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(5)
	fmul	QWORD PTR [edi]
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv5849[ebp]
	fld	QWORD PTR tv5375[ebp]
	fdiv	ST(0), ST(4)
	fst	QWORD PTR tv5853[ebp]
	fdiv	ST(0), ST(4)
	fmul	QWORD PTR [edi]
	fld	ST(5)
	fdiv	ST(0), ST(5)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv5849[ebp]
	fmul	QWORD PTR tv5400[ebp]
	fdiv	ST(0), ST(5)
	fadd	ST(0), ST(1)
	fstp	QWORD PTR _dddadxdxdr$[ebp+24]

; 2220 :   dddadxdxdr[0][1][1] = -1./2/s1 + side1[0]/2/s1/s1/s1*side1[0]
; 2221 :       + (-(r0+r1)/2*(-1)/s1/s1 + side1[0]*(r0+r1)/2*(-3)/s1/s1/s1/s1*side1[0])
; 2222 :        *(r0-r1)/s1;

	fld	QWORD PTR tv5849[ebp]
	fmul	QWORD PTR tv5412[ebp]
	fdiv	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _dddadxdxdr$[ebp+32]

; 2223 :   dddadxdxdr[0][1][2] = 0;

	fxch	ST(1)
	fst	QWORD PTR _dddadxdxdr$[ebp+40]

; 2224 : 
; 2225 :   /* ddadxdx[0][2] = -(r1+r2)/2/s2 + side2[0]*(r1+r2)/2/s2/s2/s2*side2[0]; */
; 2226 : 
; 2227 :   dddadxdxdx[0][2][0] = + 2*side2[0]*(-1)*(r1+r2)/2/s2/s2/s2
; 2228 :       + (-(r1+r2)/2*(-1)/s2/s2 + side2[0]*(r1+r2)/2*(-3)/s2/s2/s2/s2*side2[0])
; 2229 :              *(-side2[0])/s2;

	fld	QWORD PTR tv5274[ebp]
	fmul	QWORD PTR __real@bfe0000000000000
	fmul	QWORD PTR __real@bff0000000000000
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fld	QWORD PTR tv5289[ebp]
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fmul	QWORD PTR [ebx]
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv5872[ebp]
	fld	QWORD PTR [ebx]
	fchs
	fst	QWORD PTR tv5874[ebp]
	fld	QWORD PTR [ebx]
	fadd	ST(0), ST(0)
	fst	QWORD PTR tv5878[ebp]
	fxch	ST(1)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(3)
	fxch	ST(1)
	fmul	QWORD PTR tv5274[ebp]
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _dddadxdxdx$[ebp+48]

; 2230 :   dddadxdxdx[0][2][1] = 0;

	fxch	ST(1)
	fst	QWORD PTR _dddadxdxdx$[ebp+56]

; 2231 :   dddadxdxdx[0][2][2] = -dddadxdxdx[0][2][0];

	fxch	ST(1)
	fchs
	fstp	QWORD PTR _dddadxdxdx$[ebp+64]

; 2232 :   dddadxdxdr[0][2][0] = -1./2/s2 + side2[0]/2/s2/s2/s2*side2[0] +
; 2233 :       (-(r1+r2)/2*(-1)/s2/s2 + side2[0]*(r1+r2)/2*(-3)/s2/s2/s2/s2*side2[0])
; 2234 :          *(r1-r2)/s2;

	fld	QWORD PTR tv5378[ebp]
	fdiv	ST(0), ST(2)
	fst	QWORD PTR tv5888[ebp]
	fdiv	ST(0), ST(2)
	fmul	QWORD PTR [ebx]
	fld	ST(4)
	fdiv	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fst	QWORD PTR tv5892[ebp]
	fld	QWORD PTR tv5872[ebp]
	fld	QWORD PTR tv5408[ebp]
	fmul	ST(0), ST(1)
	fdiv	ST(0), ST(4)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _dddadxdxdr$[ebp+48]

; 2235 :   dddadxdxdr[0][2][1] = 0;

	fxch	ST(2)
	fst	QWORD PTR _dddadxdxdr$[ebp+56]

; 2236 :   dddadxdxdr[0][2][2] = -1./2/s2 + side2[0]/2/s2/s2/s2*side2[0] +
; 2237 :       (-(r1+r2)/2*(-1)/s2/s2 + side2[0]*(r1+r2)/2*(-3)/s2/s2/s2/s2*side2[0])
; 2238 :          *(r2-r1)/s2;

	fxch	ST(1)
	fmul	QWORD PTR tv5417[ebp]
	fdiv	ST(0), ST(3)
	fadd	QWORD PTR tv5892[ebp]
	fst	QWORD PTR _dddadxdxdr$[ebp+64]

; 2239 : 
; 2240 :   /* ddadxdx[0][0] = -ddadxdx[0][1] - ddadxdx[0][2]; */
; 2241 :   dddadxdxdx[0][0][0] = -dddadxdxdx[0][1][0] - dddadxdxdx[0][2][0]; 

	fld	QWORD PTR tv5839[ebp]
	fsub	QWORD PTR _dddadxdxdx$[ebp+48]
	fstp	QWORD PTR _dddadxdxdx$[ebp]

; 2242 :   dddadxdxdx[0][0][1] = -dddadxdxdx[0][1][1] - dddadxdxdx[0][2][1];

	fld	QWORD PTR _dddadxdxdx$[ebp+32]
	fchs
	fsub	ST(0), ST(2)
	fstp	QWORD PTR _dddadxdxdx$[ebp+8]

; 2243 :   dddadxdxdx[0][0][2] = -dddadxdxdx[0][1][2] - dddadxdxdx[0][2][2];

	fld	QWORD PTR __real@8000000000000000
	fsub	QWORD PTR _dddadxdxdx$[ebp+64]
	fstp	QWORD PTR _dddadxdxdx$[ebp+16]

; 2244 :   dddadxdxdr[0][0][0] = -dddadxdxdr[0][1][0] - dddadxdxdr[0][2][0]; 

	fld	QWORD PTR _dddadxdxdr$[ebp+24]
	fchs
	fsubrp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR _dddadxdxdr$[ebp]

; 2245 :   dddadxdxdr[0][0][1] = -dddadxdxdr[0][1][1] - dddadxdxdr[0][2][1];

	fld	QWORD PTR _dddadxdxdr$[ebp+32]
	fld	ST(0)
	fchs
	fsub	ST(0), ST(2)
	fstp	QWORD PTR _dddadxdxdr$[ebp+8]

; 2246 :   dddadxdxdr[0][0][2] = -dddadxdxdr[0][1][2] - dddadxdxdr[0][2][2];

	fld	QWORD PTR __real@8000000000000000
	fsubrp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR _dddadxdxdr$[ebp+16]

; 2247 : 
; 2248 : 
; 2249 :   /* ddadxdr[0][1] = -side1[0]/2/s1 - side1[0]*(r1*r1-r0*r0)/s1/s1/s1/2; */
; 2250 :   dddadxdrdx[0][1][0] = dddadxdxdr[0][0][1];

	fld	QWORD PTR _dddadxdxdr$[ebp+8]
	fstp	QWORD PTR _dddadxdrdx$[ebp+24]

; 2251 :   dddadxdrdx[0][1][1] = dddadxdxdr[0][1][1];

	fxch	ST(1)
	fstp	QWORD PTR _dddadxdrdx$[ebp+32]

; 2252 :   dddadxdrdx[0][1][2] = dddadxdxdr[0][2][1]; 

	fst	QWORD PTR _dddadxdrdx$[ebp+40]

; 2253 :   dddadxdrdr[0][1][0] = -side1[0]*2*r1/s1/s1/s1/2 +
; 2254 :        (-side1[0]/2*(-1)/s1/s1 - side1[0]*(r1*r1-r0*r0)*(-3)/s1/s1/s1/s1/2)
; 2255 :         *(r1-r0)/s1; 

	fld	QWORD PTR [edi]
	fmul	QWORD PTR tv5294[ebp]
	fst	QWORD PTR tv5360[ebp]
	fld	QWORD PTR [edi]
	fmul	QWORD PTR __real@bfe0000000000000
	fmul	QWORD PTR __real@bff0000000000000
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fxch	ST(1)
	fmul	QWORD PTR __real@c008000000000000
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fmul	ST(0), ST(5)
	fsubp	ST(1), ST(0)
	fst	QWORD PTR tv5917[ebp]
	fld	QWORD PTR tv4956[ebp]
	fld	QWORD PTR _r1$[ebp]
	fmul	ST(0), ST(1)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(5)
	fmul	ST(0), ST(6)
	fst	QWORD PTR tv5925[ebp]
	fxch	ST(2)
	fmul	QWORD PTR tv5400[ebp]
	fdiv	ST(0), ST(5)
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _dddadxdrdr$[ebp+24]

; 2256 :   dddadxdrdr[0][1][1] = -side1[0]*(-2)*r0/s1/s1/s1/2 +
; 2257 :        (-side1[0]/2*(-1)/s1/s1 - side1[0]*(r1*r1-r0*r0)*(-3)/s1/s1/s1/s1/2)
; 2258 :         *(r0-r1)/s1; 

	fmul	QWORD PTR _r0$[ebp]
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fmul	ST(0), ST(4)
	fst	QWORD PTR tv5933[ebp]
	fld	QWORD PTR tv5917[ebp]
	fmul	QWORD PTR tv5412[ebp]
	fdiv	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _dddadxdrdr$[ebp+32]

; 2259 :   dddadxdrdr[0][1][2] = 0;

	fst	QWORD PTR _dddadxdrdr$[ebp+40]

; 2260 : 
; 2261 :   /* ddadxdr[0][2] = -side2[0]/2/s2 - side2[0]*(r1*r1-r2*r2)/s2/s2/s2/2 */;
; 2262 :   dddadxdrdx[0][2][0] = dddadxdxdr[0][0][2];

	fld	QWORD PTR _dddadxdxdr$[ebp+16]
	fstp	QWORD PTR _dddadxdrdx$[ebp+48]

; 2263 :   dddadxdrdx[0][2][1] = dddadxdxdr[0][1][2];

	fst	QWORD PTR _dddadxdrdx$[ebp+56]

; 2264 :   dddadxdrdx[0][2][2] = dddadxdxdr[0][2][2]; 

	fld	QWORD PTR _dddadxdxdr$[ebp+64]
	fstp	QWORD PTR _dddadxdrdx$[ebp+64]

; 2265 :   dddadxdrdr[0][2][0] = -side2[0]*2*r1/s2/s2/s2/2 +
; 2266 :      + (-side2[0]/2*(-1)/s2/s2 - side2[0]*(r1*r1-r2*r2)*(-3)/s2/s2/s2/s2/2) *
; 2267 :         (r1-r2)/s2;

	fld	QWORD PTR [ebx]
	fmul	QWORD PTR tv5301[ebp]
	fst	QWORD PTR tv5368[ebp]
	fld	QWORD PTR [ebx]
	fmul	QWORD PTR __real@bfe0000000000000
	fmul	QWORD PTR __real@bff0000000000000
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fxch	ST(1)
	fmul	QWORD PTR __real@c008000000000000
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fmul	ST(0), ST(5)
	fsubp	ST(1), ST(0)
	fst	QWORD PTR tv5944[ebp]
	fld	QWORD PTR tv5878[ebp]
	fld	QWORD PTR _r1$[ebp]
	fmul	ST(0), ST(1)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fmul	ST(0), ST(6)
	fst	QWORD PTR tv5952[ebp]
	fxch	ST(2)
	fmul	QWORD PTR tv5408[ebp]
	fdiv	ST(0), ST(4)
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _dddadxdrdr$[ebp+48]

; 2268 :   dddadxdrdr[0][2][1] = 0;

	fxch	ST(1)
	fst	QWORD PTR _dddadxdrdr$[ebp+56]

; 2269 :   dddadxdrdr[0][2][2] = -side2[0]*(-2)*r2/s2/s2/s2/2 +
; 2270 :      + (-side2[0]/2*(-1)/s2/s2 - side2[0]*(r1*r1-r2*r2)*(-3)/s2/s2/s2/s2/2) *
; 2271 :         (r2-r1)/s2;

	fxch	ST(1)
	fmul	QWORD PTR _r2$[ebp]
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(2)
	fmul	ST(0), ST(4)
	fst	QWORD PTR tv5960[ebp]
	fld	QWORD PTR tv5944[ebp]
	fmul	QWORD PTR tv5417[ebp]
	fdiv	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _dddadxdrdr$[ebp+64]

; 2272 : 
; 2273 : 
; 2274 : 
; 2275 :   /* ddadxdr[0][0] = -side1[0]/2/s1 + side1[0]*(r1*r1-r0*r0)/s1/s1/s1/2 
; 2276 :                   -side2[0]/2/s2 + side2[0]*(r1*r1-r2*r2)/s2/s2/s2/2;   */
; 2277 :   dddadxdrdx[0][0][0] = dddadxdxdr[0][0][0];

	fld	QWORD PTR _dddadxdxdr$[ebp]
	fstp	QWORD PTR _dddadxdrdx$[ebp]

; 2278 :   dddadxdrdx[0][0][1] = dddadxdxdr[0][1][0];

	fld	QWORD PTR _dddadxdxdr$[ebp+24]
	fstp	QWORD PTR _dddadxdrdx$[ebp+8]

; 2279 :   dddadxdrdx[0][0][2] = dddadxdxdr[0][2][0]; 

	fld	QWORD PTR _dddadxdxdr$[ebp+48]
	fstp	QWORD PTR _dddadxdrdx$[ebp+16]

; 2280 :   dddadxdrdr[0][0][0] = side1[0]*2*r1/s1/s1/s1/2 + side2[0]*2*r1/s2/s2/s2/2
; 2281 :     + (side1[0]/2/s1/s1 + side1[0]*(r1*r1-r0*r0)*(-3)/s1/s1/s1/s1/2)*(r1-r0)/s1
; 2282 :     + (side2[0]/2/s2/s2 + side2[0]*(r1*r1-r2*r2)*(-3)/s2/s2/s2/s2/2)*(r1-r2)/s2;

	fld	QWORD PTR tv5360[ebp]
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fmul	ST(0), ST(5)
	fsubr	QWORD PTR tv5853[ebp]
	fst	QWORD PTR tv5968[ebp]
	fld	QWORD PTR tv5368[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fmul	ST(0), ST(5)
	fsubr	QWORD PTR tv5888[ebp]
	fstp	QWORD PTR tv5980[ebp]
	fmul	QWORD PTR tv5400[ebp]
	fdiv	ST(0), ST(3)
	fld	QWORD PTR tv5952[ebp]
	fadd	QWORD PTR tv5925[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv5980[ebp]
	fmul	QWORD PTR tv5408[ebp]
	fdiv	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _dddadxdrdr$[ebp]

; 2283 :   dddadxdrdr[0][0][1] = side1[0]*(-2)*r0/s1/s1/s1/2 
; 2284 :     + (side1[0]/2/s1/s1 + side1[0]*(r1*r1-r0*r0)*(-3)/s1/s1/s1/s1/2)*(r0-r1)/s1;

	fld	QWORD PTR tv5968[ebp]
	fmul	QWORD PTR tv5412[ebp]
	fdiv	ST(0), ST(3)
	fsub	QWORD PTR tv5933[ebp]
	fstp	QWORD PTR _dddadxdrdr$[ebp+8]

; 2285 :   dddadxdrdr[0][0][2] = side2[0]*(-2)*r2/s2/s2/s2/2
; 2286 :     + (side2[0]/2/s2/s2 + side2[0]*(r1*r1-r2*r2)*(-3)/s2/s2/s2/s2/2)*(r2-r1)/s2;

	fld	QWORD PTR tv5980[ebp]
	fmul	QWORD PTR tv5417[ebp]
	fdiv	ST(0), ST(2)
	fsub	QWORD PTR tv5960[ebp]
	fstp	QWORD PTR _dddadxdrdr$[ebp+16]

; 2287 : 
; 2288 :   /* ddadrdx[0][1] = ((r1*r1-r0*r0)/2*(-1)/s1/s1 + 1/2.)*(side1[0]/s1); */
; 2289 :   dddadrdxdx[0][1][0] = ((r1*r1-r0*r0)/2*(-1)/s1/s1 + 1/2.)*(-1/s1)
; 2290 :     + side1[0]*((r1*r1-r0*r0)/2*(-1)*(-3)/s1/s1/s1/s1 + 1/2.*(-1)/s1/s1)
; 2291 :         *(-side1[0])/s1;

	fld	QWORD PTR __real@bfe0000000000000
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fld	QWORD PTR tv5381[ebp]
	fmul	QWORD PTR __real@c008000000000000
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [edi]
	fst	QWORD PTR tv6000[ebp]
	fld	QWORD PTR [edi]
	fchs
	fmulp	ST(1), ST(0)
	fdiv	ST(0), ST(3)
	fld	QWORD PTR __real@bff0000000000000
	fdiv	ST(0), ST(4)
	fld	QWORD PTR tv5384[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _dddadrdxdx$[ebp+24]

; 2292 :   dddadrdxdx[0][1][1] = ((r1*r1-r0*r0)/2*(-1)/s1/s1 + 1/2.)*(1/s1)
; 2293 :     + side1[0]*((r1*r1-r0*r0)/2*(-1)*(-3)/s1/s1/s1/s1 + 1/2.*(-1)/s1/s1)
; 2294 :         *(side1[0])/s1;

	fld1
	fdiv	ST(0), ST(4)
	fst	QWORD PTR tv6011[ebp]
	fld	QWORD PTR tv6000[ebp]
	fmul	QWORD PTR [edi]
	fdiv	ST(0), ST(5)
	fxch	ST(1)
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _dddadrdxdx$[ebp+32]

; 2295 :   dddadrdxdx[0][1][2] = 0;

	fst	QWORD PTR _dddadrdxdx$[ebp+40]

; 2296 :   dddadrdxdr[0][1][0] = 2*r1/2*(-1)/s1/s1*(side1[0]/s1) +
; 2297 :          side1[0]*((r1*r1-r0*r0)/2*(-1)*(-3)/s1/s1/s1/s1 
; 2298 :          + 1/2.*(-1)/s1/s1)*(r1-r0)/s1;

	fld	QWORD PTR _r1$[ebp]
	fadd	ST(0), ST(0)
	fst	QWORD PTR tv6017[ebp]
	fmul	ST(0), ST(4)
	fst	QWORD PTR tv6018[ebp]
	fld	QWORD PTR tv6000[ebp]
	fmul	QWORD PTR tv5400[ebp]
	fdiv	ST(0), ST(4)
	fxch	ST(1)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fmul	QWORD PTR tv5386[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _dddadrdxdr$[ebp+24]

; 2299 :   dddadrdxdr[0][1][1] = -2*r0/2*(-1)/s1/s1*(side1[0]/s1) +
; 2300 :           side1[0]*((r1*r1-r0*r0)/2*(-1)*(-3)/s1/s1/s1/s1 
; 2301 :          + 1/2.*(-1)/s1/s1)*(r0-r1)/s1;

	fld	QWORD PTR _r0$[ebp]
	fadd	ST(0), ST(0)
	fst	QWORD PTR tv6025[ebp]
	fld	QWORD PTR tv6000[ebp]
	fmul	QWORD PTR tv5412[ebp]
	fdiv	ST(0), ST(4)
	fxch	ST(1)
	fmul	ST(0), ST(5)
	fmul	QWORD PTR __real@bff0000000000000
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fmul	QWORD PTR tv5386[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _dddadrdxdr$[ebp+32]

; 2302 :   dddadrdxdr[0][1][2] = 0;

	fst	QWORD PTR _dddadrdxdr$[ebp+40]

; 2303 : 
; 2304 :   /* ddadrdx[0][2] = ((r1*r1-r2*r2)/2*(-1)/s2/s2 + 1/2.)*(side2[0]/s2); */
; 2305 :   dddadrdxdx[0][2][0] = ((r1*r1-r2*r2)/2*(-1)/s2/s2 + 1/2.)*(-1/s2)
; 2306 :     + side2[0]*((r1*r1-r2*r2)/2*(-1)*(-3)/s2/s2/s2/s2 + 1/2.*(-1)/s2/s2)
; 2307 :         *(-side2[0])/s2;

	fld	QWORD PTR __real@bfe0000000000000
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(2)
	fld	QWORD PTR tv5389[ebp]
	fmul	QWORD PTR __real@c008000000000000
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR [ebx]
	fst	QWORD PTR tv6041[ebp]
	fmul	QWORD PTR tv5874[ebp]
	fdiv	ST(0), ST(2)
	fld	QWORD PTR __real@bff0000000000000
	fdiv	ST(0), ST(3)
	fld	QWORD PTR tv5392[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _dddadrdxdx$[ebp+48]

; 2308 :   dddadrdxdx[0][2][1] = 0;

	fxch	ST(1)
	fst	QWORD PTR _dddadrdxdx$[ebp+56]

; 2309 :   dddadrdxdx[0][2][2] = ((r1*r1-r2*r2)/2*(-1)/s2/s2 + 1/2.)*(1/s2)
; 2310 :     + side2[0]*((r1*r1-r2*r2)/2*(-1)*(-3)/s2/s2/s2/s2 + 1/2.*(-1)/s2/s2)
; 2311 :         *(side2[0])/s2;

	fld1
	fdiv	ST(0), ST(3)
	fst	QWORD PTR tv6050[ebp]
	fld	QWORD PTR tv6041[ebp]
	fmul	QWORD PTR [ebx]
	fdiv	ST(0), ST(4)
	fxch	ST(1)
	fmulp	ST(3), ST(0)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _dddadrdxdx$[ebp+64]

; 2312 :   dddadrdxdr[0][2][0] = 2*r1/2*(-1)/s2/s2*(side2[0]/s2) +
; 2313 :          side2[0]*((r1*r1-r2*r2)/2*(-1)*(-3)/s2/s2/s2/s2 
; 2314 :          + 1/2.*(-1)/s2/s2)*(r1-r2)/s2;

	fld	QWORD PTR tv6041[ebp]
	fmul	QWORD PTR tv5408[ebp]
	fdiv	ST(0), ST(2)
	fld	QWORD PTR tv6018[ebp]
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fmul	QWORD PTR tv5394[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _dddadrdxdr$[ebp+48]

; 2315 :   dddadrdxdr[0][2][1] = 0;

	fst	QWORD PTR _dddadrdxdr$[ebp+56]

; 2316 :   dddadrdxdr[0][2][2] = -2*r2/2*(-1)/s2/s2*(side2[0]/s2) +
; 2317 :           side2[0]*((r1*r1-r2*r2)/2*(-1)*(-3)/s2/s2/s2/s2 
; 2318 :          + 1/2.*(-1)/s2/s2)*(r2-r1)/s2;

	fld	QWORD PTR _r2$[ebp]
	fadd	ST(0), ST(0)
	fst	QWORD PTR tv6062[ebp]
	fld	QWORD PTR tv6041[ebp]
	fmul	QWORD PTR tv5417[ebp]
	fdiv	ST(0), ST(3)
	fxch	ST(1)
	fmul	ST(0), ST(5)
	fmul	QWORD PTR __real@bff0000000000000
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fmul	QWORD PTR tv5394[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _dddadrdxdr$[ebp+64]

; 2319 : 
; 2320 : 
; 2321 :   /* ddadrdx[0][0] = -ddadrdx[0][1]-ddadrdx[0][2]; */
; 2322 :   dddadrdxdx[0][0][0] = -dddadrdxdx[0][1][0]-dddadrdxdx[0][2][0];

	fld	QWORD PTR _dddadrdxdx$[ebp+24]
	fchs
	fsub	QWORD PTR _dddadrdxdx$[ebp+48]
	fstp	QWORD PTR _dddadrdxdx$[ebp]

; 2323 :   dddadrdxdx[0][0][1] = -dddadrdxdx[0][1][1]-dddadrdxdx[0][2][1];

	fld	QWORD PTR _dddadrdxdx$[ebp+32]
	fchs
	fsub	ST(0), ST(1)
	fstp	QWORD PTR _dddadrdxdx$[ebp+8]

; 2324 :   dddadrdxdx[0][0][2] = -dddadrdxdx[0][1][2]-dddadrdxdx[0][2][2];

	fld	QWORD PTR __real@8000000000000000
	fld	QWORD PTR _dddadrdxdx$[ebp+64]
	fsubr	ST(0), ST(1)
	fstp	QWORD PTR _dddadrdxdx$[ebp+16]

; 2325 :   dddadrdxdr[0][0][0] = -dddadrdxdr[0][1][0]-dddadrdxdr[0][2][0];

	fld	QWORD PTR _dddadrdxdr$[ebp+24]
	fchs
	fld	QWORD PTR _dddadrdxdr$[ebp+48]
	fsub	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _dddadrdxdr$[ebp]

; 2326 :   dddadrdxdr[0][0][1] = -dddadrdxdr[0][1][1]-dddadrdxdr[0][2][1];

	fld	QWORD PTR _dddadrdxdr$[ebp+32]
	fchs
	fsub	ST(0), ST(3)
	fstp	QWORD PTR _dddadrdxdr$[ebp+8]

; 2327 :   dddadrdxdr[0][0][2] = -dddadrdxdr[0][1][2]-dddadrdxdr[0][2][2];

	fxch	ST(1)
	fsub	QWORD PTR _dddadrdxdr$[ebp+64]
	fstp	QWORD PTR _dddadrdxdr$[ebp+16]

; 2328 : 
; 2329 :   /* ddadrdr[0][0] = r1/s1 + (-(r1*r1-r0*r0)/s1/s1/s1 + 1/s1)*(r1-r0)/2
; 2330 :                 + r1/s2 + (-(r1*r1-r2*r2)/s2/s2/s2 + 1/s2)*(r1-r2)/2;   */
; 2331 :   dddadrdrdx[0][0][0] = dddadrdxdr[0][0][0];

	fld	QWORD PTR _dddadrdxdr$[ebp]
	fstp	QWORD PTR _dddadrdrdx$[ebp]

; 2332 :   dddadrdrdx[0][0][1] = dddadrdxdr[0][1][0];

	fld	QWORD PTR _dddadrdxdr$[ebp+24]
	fstp	QWORD PTR _dddadrdrdx$[ebp+8]

; 2333 :   dddadrdrdx[0][0][2] = dddadrdxdr[0][2][0];

	fstp	QWORD PTR _dddadrdrdx$[ebp+16]

; 2334 :   dddadrdrdr[0][0][0] = 1/s1 - 2*r1/s1/s1/s1*(r1-r0)/2
; 2335 :            + (-(r1*r1-r0*r0)/s1/s1/s1 + 1/s1)/2
; 2336 :           + (-r1/s1/s1 + (-(r1*r1-r0*r0)*(-3)/s1/s1/s1/s1 - 1/s1/s1)*(r1-r0)/2)
; 2337 :                *(r1-r0)/s1
; 2338 :                    +  1/s2 - 2*r1/s2/s2/s2*(r1-r2)/2
; 2339 :            + (-(r1*r1-r2*r2)/s2/s2/s2 + 1/s2)/2
; 2340 :           + (-r1/s2/s2 + (-(r1*r1-r2*r2)*(-3)/s2/s2/s2/s2 - 1/s2/s2)*(r1-r2)/2)
; 2341 :                *(r1-r2)/s2;

	fld	QWORD PTR tv5296[ebp]
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fld	QWORD PTR tv6011[ebp]
	fld	ST(0)
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(5)
	fstp	QWORD PTR tv6085[ebp]
	fld	QWORD PTR tv5294[ebp]
	fmul	QWORD PTR __real@4008000000000000
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fld	ST(1)
	fdiv	ST(0), ST(5)
	fsubp	ST(1), ST(0)
	fst	QWORD PTR tv6099[ebp]
	fmul	QWORD PTR tv5400[ebp]
	fmul	ST(0), ST(5)
	fld	QWORD PTR tv5403[ebp]
	fdiv	ST(0), ST(5)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR tv6104[ebp]
	fld	QWORD PTR tv5303[ebp]
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fsubr	QWORD PTR tv6050[ebp]
	fmul	ST(0), ST(5)
	fstp	QWORD PTR tv6120[ebp]
	fld	QWORD PTR tv5301[ebp]
	fmul	QWORD PTR __real@4008000000000000
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fld	QWORD PTR tv6050[ebp]
	fdiv	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fst	QWORD PTR tv6128[ebp]
	fmul	QWORD PTR tv5408[ebp]
	fmul	ST(0), ST(5)
	fld	QWORD PTR tv5405[ebp]
	fdiv	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR tv6133[ebp]
	fld	QWORD PTR tv6017[ebp]
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fld	QWORD PTR tv5400[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(6)
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR tv6085[ebp]
	fld	QWORD PTR tv6104[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fadd	QWORD PTR tv6050[ebp]
	fld	QWORD PTR tv6017[ebp]
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fld	QWORD PTR tv5408[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(6)
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR tv6120[ebp]
	fld	QWORD PTR tv6133[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _dddadrdrdr$[ebp]

; 2342 :   dddadrdrdr[0][0][1] =   2*r0/s1/s1/s1*(r1-r0)/2
; 2343 :            - (-(r1*r1-r0*r0)/s1/s1/s1 + 1/s1)/2
; 2344 :           + (-r1/s1/s1 + (-(r1*r1-r0*r0)*(-3)/s1/s1/s1/s1 - 1/s1/s1)*(r1-r0)/2)
; 2345 :                *(r0-r1)/s1;

	fld	QWORD PTR tv6025[ebp]
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fst	QWORD PTR tv6140[ebp]
	fmul	QWORD PTR tv5400[ebp]
	fmul	ST(0), ST(4)
	fsub	QWORD PTR tv6085[ebp]
	fld	QWORD PTR tv6104[ebp]
	fmul	QWORD PTR tv5412[ebp]
	fdiv	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _dddadrdrdr$[ebp+8]

; 2346 :   dddadrdrdr[0][0][2] =  2*r2/s2/s2/s2*(r1-r2)/2
; 2347 :            - (-(r1*r1-r2*r2)/s2/s2/s2 + 1/s2)/2
; 2348 :           + (-r1/s2/s2 + (-(r1*r1-r2*r2)*(-3)/s2/s2/s2/s2 - 1/s2/s2)*(r1-r2)/2)
; 2349 :                *(r2-r1)/s2;

	fld	QWORD PTR tv6062[ebp]
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(2)
	fst	QWORD PTR tv6149[ebp]
	fmul	QWORD PTR tv5408[ebp]
	fmul	ST(0), ST(4)
	fsub	QWORD PTR tv6120[ebp]
	fld	QWORD PTR tv6133[ebp]
	fld	QWORD PTR tv5417[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(4)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _dddadrdrdr$[ebp+16]

; 2350 : 
; 2351 : 
; 2352 :   /* ddadrdr[0][1] = -r0/s1 +(-(r1*r1-r0*r0)/s1/s1/s1 + 1/s1)*(r0-r1)/2; */
; 2353 :   dddadrdrdx[0][1][0] = dddadrdxdr[0][0][1];

	fld	QWORD PTR _dddadrdxdr$[ebp+8]
	fstp	QWORD PTR _dddadrdrdx$[ebp+24]

; 2354 :   dddadrdrdx[0][1][1] = dddadrdxdr[0][1][1];

	fld	QWORD PTR _dddadrdxdr$[ebp+32]
	fstp	QWORD PTR _dddadrdrdx$[ebp+32]

; 2355 :   dddadrdrdx[0][1][2] = dddadrdxdr[0][2][1];

	fxch	ST(1)
	fst	QWORD PTR _dddadrdrdx$[ebp+40]

; 2356 :   dddadrdrdr[0][1][0] = dddadrdrdr[0][0][1];

	fld	QWORD PTR _dddadrdrdr$[ebp+8]
	fstp	QWORD PTR _dddadrdrdr$[ebp+24]

; 2357 :   dddadrdrdr[0][1][1] = -1/s1 + 2*r0/s1/s1/s1*(r0-r1)/2 
; 2358 :           + (-(r1*r1-r0*r0)/s1/s1/s1 + 1/s1)/2
; 2359 :         + (r0/s1/s1 + (-(r1*r1-r0*r0)*(-3)/s1/s1/s1/s1 + (-1)/s1/s1)*(r0-r1)/2)
; 2360 :           *(r0-r1)/s1;

	fld	QWORD PTR tv6099[ebp]
	fmul	QWORD PTR tv5412[ebp]
	fmul	ST(0), ST(5)
	fld	QWORD PTR tv5415[ebp]
	fdiv	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv5412[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fdivrp	ST(5), ST(0)
	fmul	QWORD PTR tv6140[ebp]
	fmul	ST(0), ST(5)
	fsub	QWORD PTR tv6011[ebp]
	fadd	QWORD PTR tv6085[ebp]
	faddp	ST(4), ST(0)
	fxch	ST(3)
	fstp	QWORD PTR _dddadrdrdr$[ebp+32]

; 2361 :   dddadrdrdr[0][1][2] = 0;

	fxch	ST(2)
	fst	QWORD PTR _dddadrdrdr$[ebp+40]

; 2362 : 
; 2363 : 
; 2364 :   /* ddadrdr[0][2] = -r2/s2 + ((r1*r1-r2*r2)/2*(-1)/s2/s2 + 0.5)/s2*(r2-r1); */
; 2365 :   dddadrdrdx[0][2][0] = dddadrdxdr[0][0][2];

	fld	QWORD PTR _dddadrdxdr$[ebp+16]
	fstp	QWORD PTR _dddadrdrdx$[ebp+48]

; 2366 :   dddadrdrdx[0][2][1] = dddadrdxdr[0][1][2];

	fst	QWORD PTR _dddadrdrdx$[ebp+56]

; 2367 :   dddadrdrdx[0][2][2] = dddadrdxdr[0][2][2];

	fld	QWORD PTR _dddadrdxdr$[ebp+64]
	fstp	QWORD PTR _dddadrdrdx$[ebp+64]

; 2368 :   dddadrdrdr[0][2][0] = dddadrdrdr[0][0][2];

	fld	QWORD PTR _dddadrdrdr$[ebp+16]
	fstp	QWORD PTR _dddadrdrdr$[ebp+48]

; 2369 :   dddadrdrdr[0][2][1] = dddadrdrdr[0][1][2];

	fstp	QWORD PTR _dddadrdrdr$[ebp+56]

; 2370 :   dddadrdrdr[0][2][2] = -1/s2 + 2*r2/s2/s2/s2*(r2-r1)/2 
; 2371 :           + (-(r1*r1-r2*r2)/s2/s2/s2 + 1/s2)/2
; 2372 :         + (r2/s2/s2 + (-(r1*r1-r2*r2)*(-3)/s2/s2/s2/s2 + (-1)/s2/s2)*(r2-r1)/2)
; 2373 :           *(r2-r1)/s2;

	fld	QWORD PTR tv6128[ebp]
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(3)
	fld	QWORD PTR tv5420[ebp]
	fdiv	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fdivrp	ST(1), ST(0)
	xor	edi, edi
	xor	ecx, ecx

; 2374 : 
; 2375 : 
; 2376 :   for ( i = 0 ; i < 3 ; i++ )

	xor	edx, edx
	fxch	ST(1)
	fmul	QWORD PTR tv6149[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fsub	QWORD PTR tv6050[ebp]
	fadd	QWORD PTR tv6120[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _dddadrdrdr$[ebp+64]
	fld	QWORD PTR __real@3fd0000000000000
	fld	QWORD PTR _root$[ebp]
	fdiv	ST(1), ST(0)
	fdiv	ST(1), ST(0)
	fdivp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR tv6198[ebp]
	fld	QWORD PTR tv5437[ebp]
	fld	ST(0)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR tv6205[ebp]
	fld	QWORD PTR _h$[ebp]
	fmul	QWORD PTR __real@bff0000000000000
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR tv6238[ebp]
	fld	QWORD PTR tv5432[ebp]
	fld	QWORD PTR tv5427[ebp]
$LN109@sq_mean_cu@2:
	fld	QWORD PTR __real@4000000000000000

; 2377 :     for ( j = 0 ; j < 3 ; j++ )

	xor	eax, eax
	fld	ST(1)
	fmul	QWORD PTR _ddadrdx$[ebp+edx]
	fld	ST(3)
	fmul	QWORD PTR _ddadxdx$[ebp+edx]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6198[ebp]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv6199[ebp]
	fst	QWORD PTR tv5434[ebp]
	fld	QWORD PTR _ddadrdr$[ebp+edx]
	fmul	ST(0), ST(3)
	fld	QWORD PTR _ddadxdr$[ebp+edx]
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fst	QWORD PTR tv8977[ebp]
	fmul	QWORD PTR tv6198[ebp]
	fstp	QWORD PTR tv6309[ebp]
	fld	QWORD PTR tv8977[ebp]
	fstp	QWORD PTR tv5457[ebp]
	jmp	SHORT $LN25@sq_mean_cu@2
$LN110@sq_mean_cu@2:
	fld	QWORD PTR __real@4000000000000000
	fld	QWORD PTR tv5434[ebp]
$LN25@sq_mean_cu@2:

; 2378 :     { ddhdxdx[i][j] = sign*(
; 2379 :       (-.5)*.5/root/root/root/area*
; 2380 :          (2*dadx[0]*ddadxdx[0][i] + 2*dadr[0]*ddadrdx[0][i])
; 2381 :         *(2*dadx[0]*ddadxdx[0][j] + 2*dadr[0]*ddadrdx[0][j])
; 2382 :    + (-1)*.5/root/area/area*dadx[j]*
; 2383 :          (2*dadx[0]*ddadxdx[0][i] + 2*dadr[0]*ddadrdx[0][i])
; 2384 :    + .5/root/area*
; 2385 :          (2*ddadxdx[0][j]*ddadxdx[0][i] + 2*ddadrdx[0][j]*ddadrdx[0][i])
; 2386 :    + .5/root/area*
; 2387 :          (2*dadx[0]*dddadxdxdx[0][i][j] + 2*dadr[0]*dddadrdxdx[0][i][j])
; 2388 :      )
; 2389 :          - dhdx[j]/area*dadx[i]
; 2390 :          - (-1)*h/area/area*dadx[j]*dadx[i]
; 2391 :          - h/area*ddadxdx[i][j];

	fld	QWORD PTR _ddadrdx$[ebp+eax]
	lea	ebx, DWORD PTR [ecx+eax]
	fmul	ST(0), ST(2)
	fst	QWORD PTR tv7586[ebp]
	fld	QWORD PTR _ddadxdx$[ebp+eax]
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR tv7595[ebp]
	fld	ST(2)
	fmul	QWORD PTR _ddadrdx$[ebp+eax]
	fld	QWORD PTR _ddadxdx$[ebp+eax]
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR tv7609[ebp]
	fld	QWORD PTR _dadx$[ebp+eax]
	fmul	QWORD PTR tv6205[ebp]
	fstp	QWORD PTR tv7620[ebp]
	fld	QWORD PTR _dhdx$[ebp+eax]
	fdiv	ST(0), ST(6)
	fstp	QWORD PTR tv7659[ebp]
	fld	QWORD PTR _dadx$[ebp+eax]
	fmul	QWORD PTR tv6238[ebp]
	fstp	QWORD PTR tv7665[ebp]
	fxch	ST(1)
	fmul	QWORD PTR _ddadrdx$[ebp+edx]
	fld	QWORD PTR tv7595[ebp]
	fmul	QWORD PTR _ddadxdx$[ebp+edx]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv7609[ebp]
	fmul	QWORD PTR tv6199[ebp]
	fld	QWORD PTR tv7620[ebp]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _dddadrdxdx$[ebp+ebx]
	lea	ebx, DWORD PTR [ecx+eax]
	fmul	ST(0), ST(3)
	fld	QWORD PTR _dddadxdxdx$[ebp+ebx]
	lea	ebx, DWORD PTR [ecx+eax]
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR tv5313[ebp]
	fld	QWORD PTR tv7659[ebp]
	fmul	QWORD PTR _dadx$[ebp+edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv7665[ebp]
	fmul	QWORD PTR _dadx$[ebp+edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _ddadxdx$[ebp+ebx]
	lea	ebx, DWORD PTR [ecx+eax]
	fmul	QWORD PTR tv5444[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _ddhdxdx$[ebp+ebx]

; 2392 : 
; 2393 :       ddhdxdr[i][j] = sign*(
; 2394 :       (-.5)*.5/root/root/root/area*
; 2395 :          (2*dadx[0]*ddadxdx[0][i] + 2*dadr[0]*ddadrdx[0][i])
; 2396 :         *(2*dadx[0]*ddadxdr[0][j] + 2*dadr[0]*ddadrdr[0][j])
; 2397 :    + (-1)*.5/root/area/area*dadr[j]*
; 2398 :          (2*dadx[0]*ddadxdx[0][i] + 2*dadr[0]*ddadrdx[0][i])
; 2399 :    + .5/root/area*
; 2400 :          (2*ddadxdr[0][j]*ddadxdx[0][i] + 2*ddadrdr[0][j]*ddadrdx[0][i])
; 2401 :    + .5/root/area*
; 2402 :          (2*dadx[0]*dddadxdxdr[0][i][j] + 2*dadr[0]*dddadrdxdr[0][i][j])
; 2403 :      )
; 2404 :          - dhdr[j]/area*dadx[i]
; 2405 :          - (-1)*h/area/area*dadr[j]*dadx[i]
; 2406 :          - h/area*ddadxdr[i][j];

	fld	QWORD PTR _ddadrdr$[ebp+eax]
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv7689[ebp]
	fld	QWORD PTR _ddadxdr$[ebp+eax]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv7698[ebp]
	fld	ST(3)
	fmul	QWORD PTR _ddadxdr$[ebp+eax]
	fld	ST(3)
	fmul	QWORD PTR _ddadrdr$[ebp+eax]
	faddp	ST(1), ST(0)
	fst	QWORD PTR tv7712[ebp]
	fld	QWORD PTR _dadr$[ebp+eax]
	fmul	QWORD PTR tv6205[ebp]
	fstp	QWORD PTR tv7723[ebp]
	fld	QWORD PTR _dhdr$[ebp+eax]
	fdiv	ST(0), ST(7)
	fstp	QWORD PTR tv7762[ebp]
	fld	QWORD PTR _dadr$[ebp+eax]
	fmul	QWORD PTR tv6238[ebp]
	fstp	QWORD PTR tv7768[ebp]
	fld	QWORD PTR tv7698[ebp]
	fmul	QWORD PTR _ddadxdx$[ebp+edx]
	lea	ebx, DWORD PTR [ecx+eax]
	fxch	ST(2)
	fmul	QWORD PTR _ddadrdx$[ebp+edx]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(5)
	fxch	ST(1)
	fmul	QWORD PTR tv6199[ebp]
	fld	QWORD PTR tv7723[ebp]
	fmulp	ST(3), ST(0)
	faddp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	fld	QWORD PTR _dddadrdxdr$[ebp+ebx]
	lea	ebx, DWORD PTR [ecx+eax]
	fmul	ST(0), ST(2)
	fld	QWORD PTR _dddadxdxdr$[ebp+ebx]
	lea	ebx, DWORD PTR [ecx+eax]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR tv5313[ebp]
	fld	QWORD PTR tv7762[ebp]
	fmul	QWORD PTR _dadx$[ebp+edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv7768[ebp]
	fmul	QWORD PTR _dadx$[ebp+edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _ddadxdr$[ebp+ebx]
	lea	ebx, DWORD PTR [ecx+eax]
	fmul	QWORD PTR tv5444[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _ddhdxdr$[ebp+ebx]
	lea	ebx, DWORD PTR [ecx+eax]

; 2407 : 
; 2408 :       ddhdrdx[i][j] = sign*(
; 2409 :       (-.5)*.5/root/root/root/area*
; 2410 :          (2*dadx[0]*ddadxdr[0][i] + 2*dadr[0]*ddadrdr[0][i])
; 2411 :         *(2*dadx[0]*ddadxdx[0][j] + 2*dadr[0]*ddadrdx[0][j])
; 2412 :    + (-1)*.5/root/area/area*dadx[j]*
; 2413 :          (2*dadx[0]*ddadxdr[0][i] + 2*dadr[0]*ddadrdr[0][i])
; 2414 :    + .5/root/area*
; 2415 :          (2*ddadxdx[0][j]*ddadxdr[0][i] + 2*ddadrdx[0][j]*ddadrdr[0][i])
; 2416 :    + .5/root/area*
; 2417 :          (2*dadx[0]*dddadxdrdx[0][i][j] + 2*dadr[0]*dddadrdrdx[0][i][j])
; 2418 :      )
; 2419 :          - dhdx[j]/area*dadr[i]
; 2420 :          - (-1)*h/area/area*dadx[j]*dadr[i]
; 2421 :          - h/area*ddadrdx[i][j];

	fld	QWORD PTR _ddadrdr$[ebp+edx]
	fmul	QWORD PTR tv7586[ebp]
	fld	QWORD PTR _ddadxdr$[ebp+edx]
	fmul	QWORD PTR tv7595[ebp]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fld	QWORD PTR tv7609[ebp]
	fmul	QWORD PTR tv6309[ebp]
	fld	QWORD PTR tv7620[ebp]
	fld	QWORD PTR tv5457[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fsubp	ST(2), ST(0)
	fld	QWORD PTR _dddadrdrdx$[ebp+ebx]
	lea	ebx, DWORD PTR [ecx+eax]
	fmul	ST(0), ST(3)
	fld	QWORD PTR _dddadxdrdx$[ebp+ebx]
	lea	ebx, DWORD PTR [ecx+eax]
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR tv5313[ebp]
	fld	QWORD PTR _dadr$[ebp+edx]
	fmul	QWORD PTR tv7659[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _dadr$[ebp+edx]
	fmul	QWORD PTR tv7665[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _ddadrdx$[ebp+ebx]
	lea	ebx, DWORD PTR [ecx+eax]
	fmul	QWORD PTR tv5444[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _ddhdrdx$[ebp+ebx]

; 2422 : 
; 2423 :       ddhdrdr[i][j] = sign*(
; 2424 :       (-.5)*.5/root/root/root/area*
; 2425 :          (2*dadx[0]*ddadxdr[0][i] + 2*dadr[0]*ddadrdr[0][i])
; 2426 :         *(2*dadx[0]*ddadxdr[0][j] + 2*dadr[0]*ddadrdr[0][j])
; 2427 :    + (-1)*.5/root/area/area*dadr[j]*
; 2428 :          (2*dadx[0]*ddadxdr[0][i] + 2*dadr[0]*ddadrdr[0][i])
; 2429 :    + .5/root/area*
; 2430 :          (2*ddadxdr[0][j]*ddadxdr[0][i] + 2*ddadrdr[0][j]*ddadrdr[0][i])
; 2431 :    + .5/root/area*
; 2432 :          (2*dadx[0]*dddadxdrdr[0][i][j] + 2*dadr[0]*dddadrdrdr[0][i][j])
; 2433 :      )
; 2434 :          - dhdr[j]/area*dadr[i]
; 2435 :          - (-1)*h/area/area*dadr[j]*dadr[i]
; 2436 :          - h/area*ddadrdr[i][j];

	fld	QWORD PTR _ddadrdr$[ebp+edx]
	fmul	QWORD PTR tv7689[ebp]
	fld	QWORD PTR tv7698[ebp]
	fmul	QWORD PTR _ddadxdr$[ebp+edx]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv7712[ebp]
	fmul	QWORD PTR tv6309[ebp]
	fld	QWORD PTR tv7723[ebp]
	fmulp	ST(3), ST(0)
	faddp	ST(2), ST(0)
	lea	ebx, DWORD PTR [ecx+eax]
	fsubrp	ST(1), ST(0)
	fld	QWORD PTR _dddadrdrdr$[ebp+ebx]
	lea	ebx, DWORD PTR [ecx+eax]
	fmul	ST(0), ST(2)
	fld	QWORD PTR _dddadxdrdr$[ebp+ebx]
	lea	ebx, DWORD PTR [ecx+eax]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR tv5313[ebp]
	fld	QWORD PTR _dadr$[ebp+edx]
	fmul	QWORD PTR tv7762[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _dadr$[ebp+edx]
	fmul	QWORD PTR tv7768[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _ddadrdr$[ebp+ebx]
	lea	ebx, DWORD PTR [ecx+eax]
	fmul	QWORD PTR tv5444[ebp]
	add	eax, 8
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _ddhdrdr$[ebp+ebx]
	cmp	eax, 24					; 00000018H
	jl	$LN110@sq_mean_cu@2

; 2374 : 
; 2375 : 
; 2376 :   for ( i = 0 ; i < 3 ; i++ )

	add	ecx, 24					; 00000018H
	add	edx, 8
	cmp	ecx, 72					; 00000048H
	jl	$LN109@sq_mean_cu@2
	fstp	ST(2)
	fstp	ST(1)
	fstp	ST(0)

; 2437 :   } 
; 2438 : 
; 2439 :   if ( power == 2.0 ) 

	fld	QWORD PTR _power$[ebp]
	fld	ST(0)
	fld	QWORD PTR __real@4000000000000000
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	$LN163@sq_mean_cu@2
	fstp	ST(1)

; 2440 :   { for ( i = 0 ; i < 3 ; i++ )

	xor	ecx, ecx
	fld	QWORD PTR _hh$[ebp]
	xor	ebx, ebx
	fld	ST(0)
	mov	DWORD PTR tv9875[ebp], ebx
	fmul	ST(0), ST(1)
	fld	ST(1)
	fmulp	ST(3), ST(0)
	fld	QWORD PTR __real@400921fb54442d18
	jmp	SHORT $LN21@sq_mean_cu@2
$LN111@sq_mean_cu@2:
	fld	QWORD PTR _hh$[ebp]
	fxch	ST(2)
$LN21@sq_mean_cu@2:

; 2441 :      for ( j = 0 ; j < 3 ; j++ )

	fld	QWORD PTR _dhdx$[ebp+ebx]
	xor	edx, edx
	fmul	ST(0), ST(4)
	xor	eax, eax
	fstp	QWORD PTR tv6394[ebp]
	fld	QWORD PTR _dhdr$[ebp+ebx]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR tv6445[ebp]
	jmp	SHORT $LN18@sq_mean_cu@2
$LN112@sq_mean_cu@2:
	fld	QWORD PTR _hh$[ebp]
	fxch	ST(2)
$LN18@sq_mean_cu@2:

; 2442 :      { v_info->hess[i][j][0][0] = M_PI*( 2*dhdx[j]*dhdx[i]*area 
; 2443 :              + 2*dhdx[j]*hh*dadx[i] + 2*hh*ddhdxdx[i][j]*area 
; 2444 :              + hh*hh*ddadxdx[i][j] + 2*hh*dhdx[i]*dadx[j]);

	fld	QWORD PTR _dhdx$[ebp+eax]
	fadd	ST(0), ST(0)
	fld	ST(0)
	fmul	ST(0), ST(4)
	fst	QWORD PTR tv9102[ebp]
	fld	ST(1)
	fmul	QWORD PTR _dhdx$[ebp+ebx]
	fmul	ST(0), ST(7)
	fxch	ST(1)
	fmul	QWORD PTR _dadx$[ebp+ebx]
	lea	ebx, DWORD PTR [eax+ecx]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddhdxdx$[ebp+ebx]
	lea	ebx, DWORD PTR [eax+ecx]
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(7)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddadxdx$[ebp+ebx]
	mov	ebx, DWORD PTR [esi+1340]
	fmul	ST(0), ST(4)
	mov	ebx, DWORD PTR [edi+ebx]
	mov	ebx, DWORD PTR [edx+ebx]
	mov	ebx, DWORD PTR [ebx]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6394[ebp]
	fmul	QWORD PTR _dadx$[ebp+eax]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [ebx]

; 2445 :        v_info->hess[i][j][0][1] = M_PI*( 2*dhdr[j]*dhdx[i]*area 
; 2446 :              + 2*dhdr[j]*hh*dadx[i] + 2*hh*ddhdxdr[i][j]*area 
; 2447 :              + hh*hh*ddadxdr[i][j] + 2*hh*dhdx[i]*dadr[j]);

	mov	ebx, DWORD PTR tv9875[ebp]
	fld	QWORD PTR _dhdr$[ebp+eax]
	fadd	ST(0), ST(0)
	fld	ST(0)
	fmulp	ST(5), ST(0)
	fxch	ST(4)
	fst	QWORD PTR tv9162[ebp]
	fld	ST(4)
	fmul	QWORD PTR _dhdx$[ebp+ebx]
	fmul	ST(0), ST(7)
	fxch	ST(1)
	fmul	QWORD PTR _dadx$[ebp+ebx]
	lea	ebx, DWORD PTR [eax+ecx]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddhdxdr$[ebp+ebx]
	lea	ebx, DWORD PTR [eax+ecx]
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(7)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddadxdr$[ebp+ebx]
	mov	ebx, DWORD PTR [esi+1340]
	fmul	ST(0), ST(4)
	mov	ebx, DWORD PTR [edi+ebx]
	mov	ebx, DWORD PTR [edx+ebx]
	mov	ebx, DWORD PTR [ebx]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6394[ebp]
	fmul	QWORD PTR _dadr$[ebp+eax]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [ebx+8]

; 2448 :        v_info->hess[i][j][1][0] = M_PI*( 2*dhdx[j]*dhdr[i]*area 
; 2449 :              + 2*dhdx[j]*hh*dadr[i] + 2*hh*ddhdrdx[i][j]*area 
; 2450 :              + hh*hh*ddadrdx[i][j] + 2*hh*dhdr[i]*dadx[j]);

	mov	ebx, DWORD PTR tv9875[ebp]
	fmul	QWORD PTR _dhdr$[ebp+ebx]
	fmul	ST(0), ST(5)
	fld	QWORD PTR tv9102[ebp]
	fmul	QWORD PTR _dadr$[ebp+ebx]
	lea	ebx, DWORD PTR [eax+ecx]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddhdrdx$[ebp+ebx]
	lea	ebx, DWORD PTR [eax+ecx]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddadrdx$[ebp+ebx]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6445[ebp]
	fld	ST(0)
	fmul	QWORD PTR _dadx$[ebp+eax]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(2)
	mov	ebx, DWORD PTR [esi+1340]
	mov	ebx, DWORD PTR [edi+ebx]
	mov	ebx, DWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR [ebx+4]
	fstp	QWORD PTR [ebx]

; 2451 :        v_info->hess[i][j][1][1] = M_PI*( 2*dhdr[j]*dhdr[i]*area 
; 2452 :              + 2*dhdr[j]*hh*dadr[i] + 2*hh*ddhdrdr[i][j]*area 
; 2453 :              + hh*hh*ddadrdr[i][j] + 2*hh*dhdr[i]*dadr[j]);

	mov	ebx, DWORD PTR tv9875[ebp]
	fxch	ST(3)
	add	edx, 4
	fmul	QWORD PTR _dhdr$[ebp+ebx]
	fmul	ST(0), ST(5)
	fld	QWORD PTR tv9162[ebp]
	fmul	QWORD PTR _dadr$[ebp+ebx]
	lea	ebx, DWORD PTR [eax+ecx]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddhdrdr$[ebp+ebx]
	lea	ebx, DWORD PTR [eax+ecx]
	fmul	ST(0), ST(5)
	add	eax, 8
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddadrdr$[ebp+ebx]
	mov	ebx, DWORD PTR [esi+1340]
	mov	ebx, DWORD PTR [edi+ebx]
	fmul	ST(0), ST(3)
	mov	ebx, DWORD PTR [ebx+edx-4]
	mov	ebx, DWORD PTR [ebx+4]
	faddp	ST(1), ST(0)
	fxch	ST(3)
	fmul	QWORD PTR _dadr$[ebp+eax-8]
	faddp	ST(3), ST(0)
	fmul	ST(2), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR tv9875[ebp]
	cmp	eax, 24					; 00000018H
	jl	$LN112@sq_mean_cu@2

; 2440 :   { for ( i = 0 ; i < 3 ; i++ )

	add	ebx, 8
	add	ecx, 24					; 00000018H
	add	edi, 4
	mov	DWORD PTR tv9875[ebp], ebx
	cmp	ecx, 72					; 00000048H
	jl	$LN111@sq_mean_cu@2
	fstp	ST(2)
	fstp	ST(1)
	fstp	ST(1)

; 2454 :      }
; 2455 :   }
; 2456 :   else if ( power == 1.0 ) 

	jmp	$LN198@sq_mean_cu@2
$LN163@sq_mean_cu@2:

; 2437 :   } 
; 2438 : 
; 2439 :   if ( power == 2.0 ) 

	fstp	ST(0)

; 2454 :      }
; 2455 :   }
; 2456 :   else if ( power == 1.0 ) 

	fld	ST(0)
	fld1
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	$LN176@sq_mean_cu@2
	fstp	ST(1)

; 2457 :   { for ( i = 0 ; i < 3 ; i++ )

	xor	ecx, ecx
	fstp	ST(0)
	mov	DWORD PTR tv10570[ebp], edi
	fld	QWORD PTR __real@400921fb54442d18
	fld	QWORD PTR _hh$[ebp]
$LN116@sq_mean_cu@2:

; 2458 :      for ( j = 0 ; j < 3 ; j++ )

	xor	edx, edx
	xor	eax, eax
$LN117@sq_mean_cu@2:
	lea	ebx, DWORD PTR [eax+ecx]

; 2459 :      { v_info->hess[i][j][0][0] = M_PI*(ddhdxdx[i][j]*area + dhdx[j]*dadx[i]
; 2460 :                                + dhdx[i]*dadx[j] + hh*ddadxdx[i][j]);

	fld	QWORD PTR _ddhdxdx$[ebp+ebx]
	mov	ebx, DWORD PTR tv10570[ebp]
	fmul	ST(0), ST(3)
	add	edx, 4
	fld	QWORD PTR _dadx$[ebp+ebx]
	fmul	QWORD PTR _dhdx$[ebp+eax]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dadx$[ebp+eax]
	fmul	QWORD PTR _dhdx$[ebp+ebx]
	lea	ebx, DWORD PTR [eax+ecx]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddadxdx$[ebp+ebx]
	mov	ebx, DWORD PTR [esi+1340]
	mov	ebx, DWORD PTR [edi+ebx]
	fmul	ST(0), ST(2)
	mov	ebx, DWORD PTR [edx+ebx-4]
	mov	ebx, DWORD PTR [ebx]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [ebx]
	lea	ebx, DWORD PTR [eax+ecx]

; 2461 :        v_info->hess[i][j][0][1] = M_PI*(ddhdxdr[i][j]*area + dhdr[j]*dadx[i]
; 2462 :                                + dhdx[i]*dadr[j] + hh*ddadxdr[i][j]);

	fld	QWORD PTR _ddhdxdr$[ebp+ebx]
	lea	ebx, DWORD PTR [eax+ecx]
	fmul	ST(0), ST(3)
	fld	QWORD PTR _ddadxdr$[ebp+ebx]
	mov	ebx, DWORD PTR tv10570[ebp]
	fmul	ST(0), ST(2)
	fld	QWORD PTR _dadx$[ebp+ebx]
	fmul	QWORD PTR _dhdr$[ebp+eax]
	fadd	ST(0), ST(2)
	fld	QWORD PTR _dadr$[ebp+eax]
	fmul	QWORD PTR _dhdx$[ebp+ebx]
	mov	ebx, DWORD PTR [esi+1340]
	mov	ebx, DWORD PTR [edi+ebx]
	mov	ebx, DWORD PTR [edx+ebx-4]
	mov	ebx, DWORD PTR [ebx]
	faddp	ST(1), ST(0)
	fadd	ST(0), ST(1)
	fmul	ST(0), ST(4)
	fstp	QWORD PTR [ebx+8]

; 2463 :        v_info->hess[i][j][1][0] = M_PI*(ddhdxdr[i][j]*area + dhdx[j]*dadr[i]
; 2464 :                                + dhdr[i]*dadx[j] + hh*ddadxdr[i][j]);

	mov	ebx, DWORD PTR tv10570[ebp]
	fld	QWORD PTR _dadr$[ebp+ebx]
	fmul	QWORD PTR _dhdx$[ebp+eax]
	faddp	ST(2), ST(0)
	fld	QWORD PTR _dadx$[ebp+eax]
	fmul	QWORD PTR _dhdr$[ebp+ebx]
	mov	ebx, DWORD PTR [esi+1340]
	mov	ebx, DWORD PTR [edi+ebx]
	mov	ebx, DWORD PTR [ebx+edx-4]
	mov	ebx, DWORD PTR [ebx+4]
	faddp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [ebx]
	lea	ebx, DWORD PTR [eax+ecx]

; 2465 :        v_info->hess[i][j][1][1] = M_PI*(ddhdrdr[i][j]*area + dhdr[j]*dadr[i]
; 2466 :                                + dhdr[i]*dadr[j] + hh*ddadrdr[i][j]);

	fld	QWORD PTR _ddhdrdr$[ebp+ebx]
	mov	ebx, DWORD PTR tv10570[ebp]
	fmul	ST(0), ST(3)
	fld	QWORD PTR _dadr$[ebp+ebx]
	fmul	QWORD PTR _dhdr$[ebp+eax]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dadr$[ebp+eax]
	fmul	QWORD PTR _dhdr$[ebp+ebx]
	lea	ebx, DWORD PTR [eax+ecx]
	add	eax, 8
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddadrdr$[ebp+ebx]
	mov	ebx, DWORD PTR [esi+1340]
	mov	ebx, DWORD PTR [edi+ebx]
	fmul	ST(0), ST(2)
	mov	ebx, DWORD PTR [ebx+edx-4]
	mov	ebx, DWORD PTR [ebx+4]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [ebx+8]
	cmp	eax, 24					; 00000018H
	jl	$LN117@sq_mean_cu@2

; 2457 :   { for ( i = 0 ; i < 3 ; i++ )

	add	DWORD PTR tv10570[ebp], 8
	add	ecx, 24					; 00000018H
	add	edi, 4
	cmp	ecx, 72					; 00000048H
	jl	$LN116@sq_mean_cu@2

; 2467 :      }
; 2468 :   }
; 2469 :   else 

	jmp	$LN201@sq_mean_cu@2
$LN176@sq_mean_cu@2:

; 2454 :      }
; 2455 :   }
; 2456 :   else if ( power == 1.0 ) 

	fstp	ST(2)

; 2470 :   { REAL pp = pow(fabs(hh),power-1);

	fsubrp	ST(1), ST(0)
	fst	QWORD PTR tv5033[ebp]
	fld	QWORD PTR _hh$[ebp]
	fabs
	fxch	ST(1)
	call	__CIpow
	fld	QWORD PTR tv5033[ebp]
	fld	QWORD PTR _power$[ebp]
	xor	edi, edi
	fmul	ST(1), ST(0)
	xor	ecx, ecx
	fxch	ST(1)

; 2471 :     for ( i = 0 ; i < 3 ; i++ )

	xor	ebx, ebx
	mov	DWORD PTR tv11354[ebp], ebx
	fmul	ST(0), ST(2)
	fld	QWORD PTR _hh$[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv6539[ebp]
	fmul	ST(0), ST(2)
	fxch	ST(2)
	fmulp	ST(1), ST(0)
	fld	QWORD PTR __real@400921fb54442d18
	fld	QWORD PTR _area$[ebp]
$LN113@sq_mean_cu@2:

; 2472 :      for ( j = 0 ; j < 3 ; j++ )

	fld	ST(2)
	xor	edx, edx
	fmul	QWORD PTR _dhdx$[ebp+ebx]
	xor	eax, eax
	fstp	QWORD PTR tv6559[ebp]
	fld	QWORD PTR _dhdr$[ebp+ebx]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR tv6604[ebp]
$LN114@sq_mean_cu@2:

; 2473 :      { v_info->hess[i][j][0][0] = M_PI*(
; 2474 :            power*(power-1)*pp/hh*dhdx[j]*dhdx[i]*area + power*pp*dhdx[j]*dadx[i]
; 2475 :          + power*pp*ddhdxdx[i][j]*area + pp*hh*ddadxdx[i][j]
; 2476 :          + power*pp*dhdx[i]*dadx[j]);

	fld	QWORD PTR _dhdx$[ebp+eax]
	fmul	QWORD PTR tv6539[ebp]
	fld	QWORD PTR _dhdx$[ebp+eax]
	fmul	ST(0), ST(4)
	fst	QWORD PTR tv10670[ebp]
	fld	ST(1)
	fmul	QWORD PTR _dhdx$[ebp+ebx]
	fmul	ST(0), ST(3)
	fld	QWORD PTR _dadx$[ebp+ebx]
	lea	ebx, DWORD PTR [eax+ecx]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddhdxdx$[ebp+ebx]
	lea	ebx, DWORD PTR [eax+ecx]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddadxdx$[ebp+ebx]
	mov	ebx, DWORD PTR [esi+1340]
	fmul	ST(0), ST(6)
	mov	ebx, DWORD PTR [ebx+edi]
	mov	ebx, DWORD PTR [edx+ebx]
	mov	ebx, DWORD PTR [ebx]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6559[ebp]
	fmul	QWORD PTR _dadx$[ebp+eax]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fstp	QWORD PTR [ebx]
	lea	ebx, DWORD PTR [eax+ecx]

; 2477 :        v_info->hess[i][j][0][1] = M_PI*(
; 2478 :            power*(power-1)*pp/hh*dhdr[j]*dhdx[i]*area + power*pp*dhdr[j]*dadx[i]
; 2479 :          + power*pp*ddhdxdr[i][j]*area + pp*hh*ddadxdr[i][j]
; 2480 :          + power*pp*dhdx[i]*dadr[j]);

	fld	QWORD PTR _dhdr$[ebp+eax]
	fmul	QWORD PTR tv6539[ebp]
	fst	QWORD PTR tv10724[ebp]
	fld	QWORD PTR _dhdr$[ebp+eax]
	fmul	ST(0), ST(5)
	fld	QWORD PTR _ddhdxdr$[ebp+ebx]
	lea	ebx, DWORD PTR [eax+ecx]
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(4)
	fstp	QWORD PTR tv12098[ebp]
	fld	QWORD PTR _ddadxdr$[ebp+ebx]
	mov	ebx, DWORD PTR tv11354[ebp]
	fmul	ST(0), ST(7)
	fstp	QWORD PTR tv12109[ebp]
	fxch	ST(1)
	fmul	QWORD PTR _dhdx$[ebp+ebx]
	fmul	ST(0), ST(3)
	fld	QWORD PTR _dadx$[ebp+ebx]
	mov	ebx, DWORD PTR [esi+1340]
	fmul	ST(0), ST(2)
	mov	ebx, DWORD PTR [ebx+edi]
	mov	ebx, DWORD PTR [edx+ebx]
	mov	ebx, DWORD PTR [ebx]
	faddp	ST(1), ST(0)
	fadd	QWORD PTR tv12098[ebp]
	fadd	QWORD PTR tv12109[ebp]
	fld	QWORD PTR tv6559[ebp]
	fmul	QWORD PTR _dadr$[ebp+eax]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fstp	QWORD PTR [ebx+8]

; 2481 :        v_info->hess[i][j][1][0] = M_PI*(
; 2482 :            power*(power-1)*pp/hh*dhdx[j]*dhdr[i]*area + power*pp*dhdx[j]*dadr[i]
; 2483 :          + power*pp*ddhdxdr[i][j]*area + pp*hh*ddadxdr[i][j]
; 2484 :          + power*pp*dhdr[i]*dadx[j]);

	mov	ebx, DWORD PTR tv11354[ebp]
	fld	QWORD PTR _dhdr$[ebp+ebx]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(2)
	fld	QWORD PTR tv10670[ebp]
	fmul	QWORD PTR _dadr$[ebp+ebx]
	mov	ebx, DWORD PTR [esi+1340]
	mov	ebx, DWORD PTR [ebx+edi]
	mov	ebx, DWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR [ebx+4]
	faddp	ST(1), ST(0)
	fadd	QWORD PTR tv12098[ebp]
	fadd	QWORD PTR tv12109[ebp]
	fld	QWORD PTR tv6604[ebp]
	fld	ST(0)
	fmul	QWORD PTR _dadx$[ebp+eax]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(4)
	fstp	QWORD PTR [ebx]

; 2485 :        v_info->hess[i][j][1][1] = M_PI*(
; 2486 :            power*(power-1)*pp/hh*dhdr[j]*dhdr[i]*area + power*pp*dhdr[j]*dadr[i]
; 2487 :          + power*pp*ddhdrdr[i][j]*area + pp*hh*ddadrdr[i][j]
; 2488 :          + power*pp*dhdr[i]*dadr[j]);

	mov	ebx, DWORD PTR tv11354[ebp]
	fld	QWORD PTR _dhdr$[ebp+ebx]
	add	edx, 4
	fmul	QWORD PTR tv10724[ebp]
	fmul	ST(0), ST(3)
	fxch	ST(2)
	fmul	QWORD PTR _dadr$[ebp+ebx]
	lea	ebx, DWORD PTR [eax+ecx]
	faddp	ST(2), ST(0)
	fld	QWORD PTR _ddhdrdr$[ebp+ebx]
	lea	ebx, DWORD PTR [eax+ecx]
	fmul	ST(0), ST(5)
	add	eax, 8
	fmul	ST(0), ST(3)
	faddp	ST(2), ST(0)
	fld	QWORD PTR _ddadrdr$[ebp+ebx]
	mov	ebx, DWORD PTR [esi+1340]
	mov	ebx, DWORD PTR [ebx+edi]
	fmul	ST(0), ST(6)
	mov	ebx, DWORD PTR [ebx+edx-4]
	mov	ebx, DWORD PTR [ebx+4]
	faddp	ST(2), ST(0)
	fmul	QWORD PTR _dadr$[ebp+eax-8]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR tv11354[ebp]
	cmp	eax, 24					; 00000018H
	jl	$LN114@sq_mean_cu@2

; 2471 :     for ( i = 0 ; i < 3 ; i++ )

	add	ebx, 8
	add	ecx, 24					; 00000018H
	add	edi, 4
	mov	DWORD PTR tv11354[ebp], ebx
	cmp	ecx, 72					; 00000048H
	jl	$LN113@sq_mean_cu@2
	fstp	ST(0)
$LN201@sq_mean_cu@2:
	fstp	ST(1)
	fstp	ST(0)
$LN198@sq_mean_cu@2:

; 2493 : 
; 2494 : } // end sq_mean_curv_cyl_all(:

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(0)
	fld	QWORD PTR _energy$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_sq_mean_curv_cyl_all ENDP
_TEXT	ENDS
PUBLIC	_sq_mean_curv_cyl_value
; Function compile flags: /Ogtp
;	COMDAT _sq_mean_curv_cyl_value
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_sq_mean_curv_cyl_value PROC				; COMDAT

; 2506 : {

	push	ebp
	mov	ebp, esp

; 2507 :   return sq_mean_curv_cyl_all(v_info,METHOD_VALUE,2.0);

	fld	QWORD PTR __real@4000000000000000
	mov	eax, DWORD PTR _v_info$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	1767					; 000006e7H
	push	eax
	call	_sq_mean_curv_cyl_all
	add	esp, 16					; 00000010H

; 2508 : } // end sq_mean_curv_cyl_value()

	pop	ebp
	ret	0
_sq_mean_curv_cyl_value ENDP
_TEXT	ENDS
PUBLIC	_sq_mean_curv_cyl_grad
; Function compile flags: /Ogtp
;	COMDAT _sq_mean_curv_cyl_grad
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_sq_mean_curv_cyl_grad PROC				; COMDAT

; 2520 : {

	push	ebp
	mov	ebp, esp

; 2521 :   return sq_mean_curv_cyl_all(v_info,METHOD_GRADIENT,2.0);

	fld	QWORD PTR __real@4000000000000000
	mov	eax, DWORD PTR _v_info$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	4321					; 000010e1H
	push	eax
	call	_sq_mean_curv_cyl_all
	add	esp, 16					; 00000010H

; 2522 : } // end sq_mean_curv_cyl_grad()

	pop	ebp
	ret	0
_sq_mean_curv_cyl_grad ENDP
_TEXT	ENDS
PUBLIC	_sq_mean_curv_cyl_hess
; Function compile flags: /Ogtp
;	COMDAT _sq_mean_curv_cyl_hess
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_sq_mean_curv_cyl_hess PROC				; COMDAT

; 2534 : {

	push	ebp
	mov	ebp, esp

; 2535 :   return sq_mean_curv_cyl_all(v_info,METHOD_HESSIAN,2.0);

	fld	QWORD PTR __real@4000000000000000
	mov	eax, DWORD PTR _v_info$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	8763					; 0000223bH
	push	eax
	call	_sq_mean_curv_cyl_all
	add	esp, 16					; 00000010H

; 2536 : } // end sq_mean_curv_cyl_hess()

	pop	ebp
	ret	0
_sq_mean_curv_cyl_hess ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DE@JDGMPHJD@sq_gaussian_curv_cyl?5method?5only@ ; `string'
PUBLIC	_sq_gauss_curv_cyl_init
;	COMDAT ??_C@_0DE@JDGMPHJD@sq_gaussian_curv_cyl?5method?5only@
CONST	SEGMENT
??_C@_0DE@JDGMPHJD@sq_gaussian_curv_cyl?5method?5only@ DB 'sq_gaussian_cu'
	DB	'rv_cyl method only for LINEAR model.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _sq_gauss_curv_cyl_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_sq_gauss_curv_cyl_init PROC				; COMDAT

; 2560 :   if ( web.modeltype != LINEAR )

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN1@sq_gauss_c

; 2561 :      kb_error(4486,"sq_gaussian_curv_cyl method only for LINEAR model.\n",
; 2562 :         RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DE@JDGMPHJD@sq_gaussian_curv_cyl?5method?5only@
	push	4486					; 00001186H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@sq_gauss_c:

; 2563 : 
; 2564 : } // end sq_gauss_curv_cyl_init()

	ret	0
_sq_gauss_curv_cyl_init ENDP
_TEXT	ENDS
PUBLIC	_sq_gauss_curv_cyl_all
; Function compile flags: /Ogtp
;	COMDAT _sq_gauss_curv_cyl_all
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_mode$ = 12						; size = 4
_sq_gauss_curv_cyl_all PROC				; COMDAT

; 2578 : { REAL energy = 0.0;

	push	ebp
	mov	ebp, esp

; 2579 : 
; 2580 :   /* Notes on incoming data:
; 2581 :        v_info->vcount is number of vertices in v_info; it will be 3
; 2582 :            for an interior vertex and 2 for an endpoint.
; 2583 :        v_info->x[0][] is the coordinates of the vertex in question.
; 2584 :        v_info->x[1][] is the coordinates of one neighbor vertex.
; 2585 :        v_info->x[2][] is the coordinates of the other neighbor vertex.
; 2586 :        v_info->sides[0][0][] is the vector from vertex 0 to vertex 1.
; 2587 :        v_info->sides[0][1][] is the vector from vertex 0 to vertex 2.
; 2588 :   */
; 2589 : 
; 2590 :   /* calculate value for single vertex here */
; 2591 : 
; 2592 :   if ( mode == METHOD_VALUE )
; 2593 :     return energy;

	fldz

; 2594 : 
; 2595 :   /* Gradient */
; 2596 : 
; 2597 :   /* calculate gradient for the energy of the vertex here */
; 2598 : 
; 2599 :   if ( mode == METHOD_GRADIENT )
; 2600 :     return energy;
; 2601 : 
; 2602 :   /*  Hessian */
; 2603 : 
; 2604 :   /* calculate hessian for the energy of the vertex here */
; 2605 : 
; 2606 :   return energy;
; 2607 : 
; 2608 : } // end sq_gauss_curv_cyl_all()

	pop	ebp
	ret	0
_sq_gauss_curv_cyl_all ENDP
_TEXT	ENDS
PUBLIC	_sq_gauss_curv_cyl_value
; Function compile flags: /Ogtp
;	COMDAT _sq_gauss_curv_cyl_value
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_sq_gauss_curv_cyl_value PROC				; COMDAT

; 2620 : {

	push	ebp
	mov	ebp, esp

; 2621 :   return sq_gauss_curv_cyl_all(v_info,METHOD_VALUE);

	mov	eax, DWORD PTR _v_info$[ebp]
	push	1767					; 000006e7H
	push	eax
	call	_sq_gauss_curv_cyl_all
	add	esp, 8

; 2622 : } // end sq_gauss_curv_cyl_value()

	pop	ebp
	ret	0
_sq_gauss_curv_cyl_value ENDP
_TEXT	ENDS
PUBLIC	_sq_gauss_curv_cyl_grad
; Function compile flags: /Ogtp
;	COMDAT _sq_gauss_curv_cyl_grad
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_sq_gauss_curv_cyl_grad PROC				; COMDAT

; 2633 : {

	push	ebp
	mov	ebp, esp

; 2634 :   return sq_gauss_curv_cyl_all(v_info,METHOD_GRADIENT);

	mov	eax, DWORD PTR _v_info$[ebp]
	push	4321					; 000010e1H
	push	eax
	call	_sq_gauss_curv_cyl_all
	add	esp, 8

; 2635 : } // end sq_gauss_curv_cyl_grad()

	pop	ebp
	ret	0
_sq_gauss_curv_cyl_grad ENDP
_TEXT	ENDS
PUBLIC	_sq_gauss_curv_cyl_hess
; Function compile flags: /Ogtp
;	COMDAT _sq_gauss_curv_cyl_hess
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_sq_gauss_curv_cyl_hess PROC				; COMDAT

; 2646 : {

	push	ebp
	mov	ebp, esp

; 2647 :   return sq_gauss_curv_cyl_all(v_info,METHOD_HESSIAN);

	mov	eax, DWORD PTR _v_info$[ebp]
	push	8763					; 0000223bH
	push	eax
	call	_sq_gauss_curv_cyl_all
	add	esp, 8

; 2648 : } // end sq_gauss_curv_cyl_hess()

	pop	ebp
	ret	0
_sq_gauss_curv_cyl_hess ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@JEAAFJGL@SQCURVE2?4C?$AA@		; `string'
PUBLIC	??_C@_0P@BKNJOKJM@self_sim_coeff?$AA@		; `string'
PUBLIC	??_C@_0M@FJLKKPKA@sq_mean_mix?$AA@		; `string'
PUBLIC	??_C@_0DB@FHLLNPGI@mix_sq_mean_curvature?5method?5onl@ ; `string'
PUBLIC	??_C@_0DE@JDIOGMHK@normal_sq_mean_curvature?5method?5@ ; `string'
PUBLIC	??_C@_0DG@NKKMHLDO@eff_area_sq_mean_curvature?5metho@ ; `string'
PUBLIC	??_C@_0BG@IFIMADCL@mix_sq_mean_curvature?$AA@	; `string'
PUBLIC	??_C@_0BJ@NDLEJAHB@normal_sq_mean_curvature?$AA@ ; `string'
PUBLIC	??_C@_0BL@EOLDLGED@eff_area_sq_mean_curvature?$AA@ ; `string'
PUBLIC	??_C@_0BC@GMGIDDOF@sq_mean_curvature?$AA@	; `string'
PUBLIC	??_C@_0DI@IOEEAMAC@sq_mean_curvature?5method?5method?5@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_sqcurve_method_init
EXTRN	_constr_proj:PROC
EXTRN	_vec_mat_mul:PROC
EXTRN	_matvec_mul:PROC
EXTRN	_mat_mult:PROC
EXTRN	_mat_inv:PROC
EXTRN	_eval_second:PROC
EXTRN	_nullcon:QWORD
EXTRN	_sqcurve_ignore_constr:DWORD
EXTRN	_mat3d_setup:PROC
EXTRN	_get_facet_verts:PROC
EXTRN	_kb_temp_calloc:PROC
EXTRN	_global_timestamp:DWORD
EXTRN	_add_global:PROC
EXTRN	_kb_stricmp:PROC
EXTRN	_basic_gen_methods:BYTE
EXTRN	_sq_mean_curvature_mi:DWORD
EXTRN	_gen_quant_list:DWORD
EXTRN	_sq_mean_curv_quantity_num:DWORD
EXTRN	_square_curvature_param:DWORD
EXTRN	_square_curvature_flag:DWORD
EXTRN	_everything_quantities_flag:DWORD
EXTRN	_mat2d_setup:PROC
;	COMDAT ??_C@_0L@JEAAFJGL@SQCURVE2?4C?$AA@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0L@JEAAFJGL@SQCURVE2?4C?$AA@ DB 'SQCURVE2.C', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BKNJOKJM@self_sim_coeff?$AA@
CONST	SEGMENT
??_C@_0P@BKNJOKJM@self_sim_coeff?$AA@ DB 'self_sim_coeff', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FJLKKPKA@sq_mean_mix?$AA@
CONST	SEGMENT
??_C@_0M@FJLKKPKA@sq_mean_mix?$AA@ DB 'sq_mean_mix', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@FHLLNPGI@mix_sq_mean_curvature?5method?5onl@
CONST	SEGMENT
??_C@_0DB@FHLLNPGI@mix_sq_mean_curvature?5method?5onl@ DB 'mix_sq_mean_cu'
	DB	'rvature method only for 3D space.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@JDIOGMHK@normal_sq_mean_curvature?5method?5@
CONST	SEGMENT
??_C@_0DE@JDIOGMHK@normal_sq_mean_curvature?5method?5@ DB 'normal_sq_mean'
	DB	'_curvature method only for 3D space.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@NKKMHLDO@eff_area_sq_mean_curvature?5metho@
CONST	SEGMENT
??_C@_0DG@NKKMHLDO@eff_area_sq_mean_curvature?5metho@ DB 'eff_area_sq_mea'
	DB	'n_curvature method only for 3D space.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IFIMADCL@mix_sq_mean_curvature?$AA@
CONST	SEGMENT
??_C@_0BG@IFIMADCL@mix_sq_mean_curvature?$AA@ DB 'mix_sq_mean_curvature', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NDLEJAHB@normal_sq_mean_curvature?$AA@
CONST	SEGMENT
??_C@_0BJ@NDLEJAHB@normal_sq_mean_curvature?$AA@ DB 'normal_sq_mean_curva'
	DB	'ture', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EOLDLGED@eff_area_sq_mean_curvature?$AA@
CONST	SEGMENT
??_C@_0BL@EOLDLGED@eff_area_sq_mean_curvature?$AA@ DB 'eff_area_sq_mean_c'
	DB	'urvature', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GMGIDDOF@sq_mean_curvature?$AA@
CONST	SEGMENT
??_C@_0BC@GMGIDDOF@sq_mean_curvature?$AA@ DB 'sq_mean_curvature', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@IOEEAMAC@sq_mean_curvature?5method?5method?5@
CONST	SEGMENT
??_C@_0DI@IOEEAMAC@sq_mean_curvature?5method?5method?5@ DB 'sq_mean_curva'
	DB	'ture method method only for LINEAR model.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\sqcurve2.c
CONST	ENDS
;	COMDAT _sqcurve_method_init
_TEXT	SEGMENT
_secondsqXvS$89155 = -3556				; size = 168
_aqXvS$89141 = -3388					; size = 24
_adftqXvS$89151 = -3364					; size = 24
_gradqXvS$89147 = -3340					; size = 24
_xqXvS$ = -3316						; size = 24
_con$89213 = -3292					; size = 28
_eltype$ = -3264					; size = 4
tv6009 = -3260						; size = 4
tv4964 = -3256						; size = 4
_a$89143 = -3252					; size = 4
tv2570 = -3248						; size = 4
_adft$89153 = -3248					; size = 4
_vc$89197 = -3244					; size = 4
_ii$89184 = -3244					; size = 4
_ii$89135 = -3244					; size = 4
_seconds$89157 = -3240					; size = 4
_i$89124 = -3240					; size = 4
tv2504 = -3236						; size = 4
_oncount$89212 = -3236					; size = 4
tv5472 = -3232						; size = 4
tv4341 = -3232						; size = 4
tv4251 = -3232						; size = 4
tv2854 = -3232						; size = 4
tv2700 = -3232						; size = 4
tv3605 = -3228						; size = 4
_grad$89149 = -3228					; size = 4
tv5795 = -3224						; size = 4
tv4362 = -3224						; size = 4
tv4259 = -3224						; size = 4
tv4131 = -3224						; size = 4
tv2765 = -3220						; size = 4
_x$ = -3220						; size = 4
tv4028 = -3216						; size = 4
tv3644 = -3216						; size = 4
tv2655 = -3216						; size = 4
_i$89210 = -3216					; size = 4
_vv_id$ = -3216						; size = 4
tv4335 = -3212						; size = 4
tv4288 = -3212						; size = 4
_i$89172 = -3212					; size = 4
_f_id$ = -3212						; size = 4
_k$ = -3212						; size = 4
_secondsxJ$89156 = -3208				; size = 1728
_gradxJ$89148 = -1480					; size = 288
_axJ$89142 = -1192					; size = 288
_adftxJ$89152 = -904					; size = 288
_xxJ$ = -616						; size = 288
_side$89177 = -328					; size = 144
_side$89128 = -328					; size = 144
_af$89145 = -184					; size = 48
_perp$89214 = -136					; size = 48
_gaf$89146 = -88					; size = 48
_v_id$89174 = -40					; size = 12
_wraps$ = -28						; size = 12
_e_id$89175 = -16					; size = 12
_v_id$89126 = -16					; size = 12
_dummy$89215 = -12					; size = 8
__$ArrayPad$ = -4					; size = 4
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_sqcurve_method_init PROC				; COMDAT

; 41   : { int k,n;

	push	ebp
	mov	ebp, esp
	sub	esp, 3556				; 00000de4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 42   :   facet_id f_id;
; 43   :   struct gen_quant_method *gm;
; 44   :   MAT2D(x,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	eax, DWORD PTR _xxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _xqXvS$[ebp]
	push	ecx
	call	_mat2d_setup
	add	esp, 16					; 00000010H

; 45   :   vertex_id vv_id;
; 46   :   WRAPTYPE wraps[FACET_VERTS];
; 47   :   int eltype;
; 48   : 
; 49   :   if ( web.modeltype != LINEAR )

	cmp	DWORD PTR _web+628, 1
	mov	DWORD PTR _x$[ebp], eax
	je	SHORT $LN98@sqcurve_me@3

; 50   :      kb_error(1758,"sq_mean_curvature method method only for LINEAR model.\n",
; 51   :           RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DI@IOEEAMAC@sq_mean_curvature?5method?5method?5@
	push	1758					; 000006deH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN98@sqcurve_me@3:

; 52   : 
; 53   :  
; 54   :   if ( everything_quantities_flag && square_curvature_flag)

	cmp	DWORD PTR _everything_quantities_flag, 0
	je	$LN97@sqcurve_me@3
	cmp	DWORD PTR _square_curvature_flag, 0
	je	SHORT $LN97@sqcurve_me@3

; 55   :      GEN_QUANT(sq_mean_curv_quantity_num)->modulus = 
; 56   :         globals(square_curvature_param)->value.real;

	mov	eax, DWORD PTR _square_curvature_param
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN101@sqcurve_me@3
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN103@sqcurve_me@3
	mov	edx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [edx]
	jmp	SHORT $LN102@sqcurve_me@3
$LN103@sqcurve_me@3:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN101@sqcurve_me@3
	mov	ecx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN102@sqcurve_me@3
$LN101@sqcurve_me@3:
	mov	edx, DWORD PTR _web+5652
	mov	ecx, DWORD PTR _dymem
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ecx]
$LN102@sqcurve_me@3:
	mov	edx, DWORD PTR _sq_mean_curv_quantity_num
	fld	QWORD PTR [eax+64]
	mov	eax, DWORD PTR _gen_quant_list
	imul	edx, 368				; 00000170H
	fstp	QWORD PTR [edx+eax+176]
$LN97@sqcurve_me@3:

; 57   :   if ( mi )

	push	ebx
	mov	ebx, DWORD PTR _mi$[ebp]
	push	esi
	push	edi
	test	ebx, ebx
	je	$LN79@sqcurve_me@3

; 58   :   {
; 59   :   if ( sq_mean_curvature_mi < 0 )

	cmp	DWORD PTR _sq_mean_curvature_mi, 0
	jge	$LN92@sqcurve_me@3

; 60   :   { /* see what method indices correspond to what methods */
; 61   :     for ( n=0,gm = basic_gen_methods ; gm->name[0] != ' ' ; gm++,n++ )

	xor	edi, edi
	cmp	BYTE PTR _basic_gen_methods, 32		; 00000020H
	mov	esi, OFFSET _basic_gen_methods
	je	SHORT $LN92@sqcurve_me@3
	npad	3
$LL94@sqcurve_me@3:

; 62   :     { if ( stricmp(gm->name,"sq_mean_curvature") == 0 ) 

	push	OFFSET ??_C@_0BC@GMGIDDOF@sq_mean_curvature?$AA@
	push	esi
	call	_kb_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN91@sqcurve_me@3

; 63   :            sq_mean_curvature_mi = n;

	mov	DWORD PTR _sq_mean_curvature_mi, edi
$LN91@sqcurve_me@3:

; 64   :       if ( stricmp(gm->name,"eff_area_sq_mean_curvature") == 0 ) 

	push	OFFSET ??_C@_0BL@EOLDLGED@eff_area_sq_mean_curvature?$AA@
	push	esi
	call	_kb_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN90@sqcurve_me@3

; 65   :            eff_area_sq_mean_curvature_mi = n;

	mov	DWORD PTR _eff_area_sq_mean_curvature_mi, edi
$LN90@sqcurve_me@3:

; 66   :       if ( stricmp(gm->name,"normal_sq_mean_curvature") == 0 ) 

	push	OFFSET ??_C@_0BJ@NDLEJAHB@normal_sq_mean_curvature?$AA@
	push	esi
	call	_kb_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN89@sqcurve_me@3

; 67   :            normal_sq_mean_curvature_mi = n;

	mov	DWORD PTR _normal_sq_mean_curvature_mi, edi
$LN89@sqcurve_me@3:

; 68   :       if ( stricmp(gm->name,"mix_sq_mean_curvature") == 0 ) 

	push	OFFSET ??_C@_0BG@IFIMADCL@mix_sq_mean_curvature?$AA@
	push	esi
	call	_kb_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN93@sqcurve_me@3

; 69   :            mix_sq_mean_curvature_mi = n;

	mov	DWORD PTR _mix_sq_mean_curvature_mi, edi
$LN93@sqcurve_me@3:

; 60   :   { /* see what method indices correspond to what methods */
; 61   :     for ( n=0,gm = basic_gen_methods ; gm->name[0] != ' ' ; gm++,n++ )

	add	esi, 160				; 000000a0H
	inc	edi
	cmp	BYTE PTR [esi], 32			; 00000020H
	jne	SHORT $LL94@sqcurve_me@3
$LN92@sqcurve_me@3:

; 70   :     }
; 71   :   }
; 72   : 
; 73   :   if ( mi->gen_method == eff_area_sq_mean_curvature_mi )

	mov	ecx, DWORD PTR [ebx+148]
	cmp	ecx, DWORD PTR _eff_area_sq_mean_curvature_mi
	jne	SHORT $LN250@sqcurve_me@3

; 74   :     if ( SDIM != 3 )

	cmp	DWORD PTR _web+616, 3
	je	SHORT $LN250@sqcurve_me@3

; 75   :       kb_error(1759,"eff_area_sq_mean_curvature method only for 3D space.\n",
; 76   :                 RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DG@NKKMHLDO@eff_area_sq_mean_curvature?5metho@
	push	1759					; 000006dfH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN250@sqcurve_me@3:

; 77   :   if ( mi->gen_method == normal_sq_mean_curvature_mi )

	mov	edx, DWORD PTR [ebx+148]
	cmp	edx, DWORD PTR _normal_sq_mean_curvature_mi
	jne	SHORT $LN84@sqcurve_me@3

; 78   :     if ( SDIM != 3 )

	cmp	DWORD PTR _web+616, 3
	je	SHORT $LN84@sqcurve_me@3

; 79   :       kb_error(1760,"normal_sq_mean_curvature method only for 3D space.\n",
; 80   :                 RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DE@JDIOGMHK@normal_sq_mean_curvature?5method?5@
	push	1760					; 000006e0H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN84@sqcurve_me@3:

; 81   :   if ( mi->gen_method == normal_sq_mean_curvature_mi )

	mov	eax, DWORD PTR _normal_sq_mean_curvature_mi
	cmp	DWORD PTR [ebx+148], eax
	jne	SHORT $LN82@sqcurve_me@3

; 82   :     if ( SDIM != 3 )

	cmp	DWORD PTR _web+616, 3
	je	SHORT $LN82@sqcurve_me@3

; 83   :       kb_error(1450,"mix_sq_mean_curvature method only for 3D space.\n",
; 84   :                 RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DB@FHLLNPGI@mix_sq_mean_curvature?5method?5onl@
	push	1450					; 000005aaH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN82@sqcurve_me@3:

; 85   : 
; 86   :   /* get mix coefficient */
; 87   :   if ( mi->gen_method == normal_sq_mean_curvature_mi )

	mov	ecx, DWORD PTR _normal_sq_mean_curvature_mi
	cmp	DWORD PTR [ebx+148], ecx
	jne	$LN79@sqcurve_me@3

; 88   :   { k = lookup_global("sq_mean_mix");

	push	OFFSET ??_C@_0M@FJLKKPKA@sq_mean_mix?$AA@
	call	_lookup_global
	add	esp, 4

; 89   :     if ( k >= 0 ) sq_mean_mix = globals(k)->value.real;

	test	eax, eax
	js	SHORT $LN80@sqcurve_me@3
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN107@sqcurve_me@3
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN109@sqcurve_me@3
	mov	edx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [edx]
	fld	QWORD PTR [eax+64]
	jmp	SHORT $LN290@sqcurve_me@3
$LN109@sqcurve_me@3:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN107@sqcurve_me@3
	mov	ecx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [eax+64]
	jmp	SHORT $LN290@sqcurve_me@3
$LN107@sqcurve_me@3:
	mov	edx, DWORD PTR _web+5652
	mov	ecx, DWORD PTR _dymem
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ecx]
	fld	QWORD PTR [eax+64]
	jmp	SHORT $LN290@sqcurve_me@3
$LN80@sqcurve_me@3:

; 90   :     else sq_mean_mix = 0.0;

	fldz
$LN290@sqcurve_me@3:
	fstp	QWORD PTR _sq_mean_mix
$LN79@sqcurve_me@3:

; 91   :   }
; 92   :   } /* end if ( mi ) */
; 93   : 
; 94   :   /* see if using (H - H_0)^2 adjustment */
; 95   :   h0_flag = 0;
; 96   :   h0_attr = find_extra("h_zero",&eltype);

	lea	edx, DWORD PTR _eltype$[ebp]
	push	edx
	push	OFFSET ??_C@_06CNJIKMCI@h_zero?$AA@
	mov	DWORD PTR _h0_flag, 0
	call	_find_extra
	add	esp, 8
	mov	DWORD PTR _h0_attr, eax

; 97   :   if ( h0_attr >= 0 )

	test	eax, eax
	js	SHORT $LN78@sqcurve_me@3

; 98   :     h0_flag = H0_IN_ATTR; 

	mov	DWORD PTR _h0_flag, 2

; 99   :   else

	jmp	$LN263@sqcurve_me@3
$LN78@sqcurve_me@3:

; 100  :   { k = lookup_global("h_zero");

	push	OFFSET ??_C@_06CNJIKMCI@h_zero?$AA@
	call	_lookup_global
	add	esp, 4

; 101  :     if ( k >= 0 ) 

	test	eax, eax
	js	SHORT $LN263@sqcurve_me@3

; 102  :     { h0_flag = H0_IN_GLOBAL;
; 103  :       h0_value = globals(k)->value.real;

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	mov	DWORD PTR _h0_flag, 1
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN113@sqcurve_me@3
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN115@sqcurve_me@3
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN114@sqcurve_me@3
$LN115@sqcurve_me@3:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN113@sqcurve_me@3
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN114@sqcurve_me@3
$LN113@sqcurve_me@3:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN114@sqcurve_me@3:
	fld	QWORD PTR [eax+64]
	fstp	QWORD PTR _h0_value
$LN263@sqcurve_me@3:

; 104  :     }
; 105  :   }
; 106  : 
; 107  :   if ( self_similar_flag )

	cmp	DWORD PTR _self_similar_flag, 0
	je	$LN265@sqcurve_me@3

; 108  :   { int param = lookup_global(SELFSIM_NAME);

	push	OFFSET ??_C@_0P@BKNJOKJM@self_sim_coeff?$AA@
	call	_lookup_global
	add	esp, 4

; 109  :     if ( param < 0 ) /* missing, so add */

	test	eax, eax
	jns	$LN264@sqcurve_me@3

; 110  :     { param = add_global(SELFSIM_NAME);

	push	OFFSET ??_C@_0P@BKNJOKJM@self_sim_coeff?$AA@
	call	_add_global

; 111  :       globals(param)->value.real = 1.0;  /* default */

	mov	esi, eax
	and	esi, -16777216				; ff000000H
	add	esp, 4
	cmp	esi, 268435456				; 10000000H
	je	SHORT $LN119@sqcurve_me@3
	cmp	esi, 805306368				; 30000000H
	jne	SHORT $LN121@sqcurve_me@3
	mov	edi, DWORD PTR _localbase
	mov	ecx, eax
	and	ecx, 16777215				; 00ffffffH
	mov	edx, ecx
	imul	edx, 224				; 000000e0H
	add	edx, DWORD PTR [edi]
	jmp	SHORT $LN120@sqcurve_me@3
$LN121@sqcurve_me@3:
	cmp	esi, 536870912				; 20000000H
	jne	SHORT $LN119@sqcurve_me@3
	mov	edx, DWORD PTR _web+5656
	mov	ecx, eax
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR [edx+ecx*4]
	jmp	SHORT $LN120@sqcurve_me@3
$LN119@sqcurve_me@3:
	mov	edx, DWORD PTR _web+5652
	mov	edi, DWORD PTR _dymem
	mov	ecx, eax
	and	ecx, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [edx+edi]
$LN120@sqcurve_me@3:
	fld1
	fstp	QWORD PTR [edx+64]

; 112  :       globals(param)->flags |=  ORDINARY_PARAM | RECALC_PARAMETER | ALWAYS_RECALC;

	cmp	esi, 268435456				; 10000000H
	je	SHORT $LN125@sqcurve_me@3
	cmp	esi, 805306368				; 30000000H
	jne	SHORT $LN127@sqcurve_me@3
	mov	edx, DWORD PTR _localbase
	imul	ecx, 224				; 000000e0H
	add	ecx, DWORD PTR [edx]
	jmp	SHORT $LN126@sqcurve_me@3
$LN127@sqcurve_me@3:
	cmp	esi, 536870912				; 20000000H
	jne	SHORT $LN125@sqcurve_me@3
	mov	edx, DWORD PTR _web+5656
	mov	ecx, DWORD PTR [edx+ecx*4]
	jmp	SHORT $LN126@sqcurve_me@3
$LN125@sqcurve_me@3:
	mov	edx, DWORD PTR _web+5652
	lea	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edx]
$LN126@sqcurve_me@3:
	or	DWORD PTR [ecx+192], 134217737		; 08000009H
$LN264@sqcurve_me@3:

; 113  :     }
; 114  :     selfsim_coeff = globals(param)->value.real/6; /* area and volume factor */

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN131@sqcurve_me@3
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN133@sqcurve_me@3
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN132@sqcurve_me@3
$LN133@sqcurve_me@3:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN131@sqcurve_me@3
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN132@sqcurve_me@3
$LN131@sqcurve_me@3:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN132@sqcurve_me@3:

; 115  :     if ( h0_flag == 0 ) { h0_flag = H0_IN_GLOBAL; h0_value = 0.0; }

	cmp	DWORD PTR _h0_flag, 0
	fld	QWORD PTR [eax+64]
	fdiv	QWORD PTR __real@4018000000000000
	fstp	QWORD PTR _selfsim_coeff
	jne	SHORT $LN265@sqcurve_me@3
	fldz
	mov	DWORD PTR _h0_flag, 1
	fstp	QWORD PTR _h0_value
$LN265@sqcurve_me@3:

; 116  :   }
; 117  : 
; 118  :   /* necessary precalculations, if anything changed */
; 119  :   if ( ( mode == METHOD_VALUE )
; 120  :      && ( sqcurve_init_timestamp < global_timestamp || !v_curve) ) 

	mov	eax, DWORD PTR _mode$[ebp]
	cmp	eax, 1767				; 000006e7H
	jne	$LN72@sqcurve_me@3
	mov	ecx, DWORD PTR _sqcurve_init_timestamp
	cmp	ecx, DWORD PTR _global_timestamp
	jl	SHORT $LN71@sqcurve_me@3
	cmp	DWORD PTR _v_curve, 0
	jne	$LN56@sqcurve_me@3
$LN71@sqcurve_me@3:

; 121  :   {
; 122  :      v_curve = (struct v_curve_t *)temp_calloc(web.skel[VERTEX].max_ord+1,
; 123  :                          sizeof(struct v_curve_t));

	mov	edx, DWORD PTR _web+68
	push	123					; 0000007bH
	push	OFFSET ??_C@_0L@JEAAFJGL@SQCURVE2?4C?$AA@
	inc	edx
	push	544					; 00000220H
	push	edx
	call	_kb_temp_calloc

; 124  : 
; 125  :      FOR_ALL_FACETS(f_id)

	mov	edi, DWORD PTR _web+272
	mov	ecx, edi
	shr	ecx, 28					; 0000001cH
	add	esp, 16					; 00000010H
	and	ecx, 1
	mov	DWORD PTR _v_curve, eax
	mov	DWORD PTR _f_id$[ebp], edi
	je	$LN68@sqcurve_me@3
	mov	edx, DWORD PTR _web+236
	npad	4
$LL70@sqcurve_me@3:
	mov	ebx, edi
	and	ebx, 134217727				; 07ffffffH
	add	ebx, ebx
	add	ebx, ebx
	mov	eax, DWORD PTR [ebx+edx]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	esi, esi
	or	eax, esi
	mov	DWORD PTR tv2504[ebp], ebx
	je	$LN69@sqcurve_me@3

; 126  :      { /* get side vectors */
; 127  :         int i,j;
; 128  :         vertex_id v_id[FACET_VERTS];
; 129  :         facetedge_id fe_id;
; 130  :         REAL side[FACET_EDGES][MAXCOORD];
; 131  : 
; 132  :         fe_id = get_facet_fe(f_id);

	test	ecx, ecx
	jne	SHORT $LN142@sqcurve_me@3
	xor	edx, edx
	jmp	SHORT $LN141@sqcurve_me@3
$LN142@sqcurve_me@3:
	mov	eax, DWORD PTR [ebx+edx]
	mov	edx, DWORD PTR [eax+28]
	test	edi, 134217728				; 08000000H
	je	SHORT $LN141@sqcurve_me@3
	xor	edx, 134217728				; 08000000H
$LN141@sqcurve_me@3:

; 133  :         for ( i = 0 ; i < FACET_EDGES ; i++ )
; 134  :         {
; 135  :           v_id[i] = get_fe_tailv(fe_id);

	mov	eax, DWORD PTR _web+460
	mov	esi, DWORD PTR _dymem
	mov	ecx, edx
	and	ecx, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+esi+304]
	mov	esi, DWORD PTR _web+124
	mov	eax, edx
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ebx+20]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN148@sqcurve_me@3
	mov	edi, DWORD PTR _web+636
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	lea	eax, DWORD PTR [eax+edi*4]
	mov	eax, DWORD PTR [eax+ecx]
	mov	edi, DWORD PTR _f_id$[ebp]
	jmp	SHORT $LN147@sqcurve_me@3
$LN148@sqcurve_me@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [ecx+eax]
$LN147@sqcurve_me@3:
	mov	DWORD PTR _v_id$89126[ebp], eax

; 136  :           fe_id = get_next_edge(fe_id);

	test	edx, 134217728				; 08000000H
	je	SHORT $LN152@sqcurve_me@3
	mov	edx, DWORD PTR [ebx+28]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN64@sqcurve_me@3
$LN152@sqcurve_me@3:
	mov	edx, DWORD PTR [ebx+32]
$LN64@sqcurve_me@3:

; 133  :         for ( i = 0 ; i < FACET_EDGES ; i++ )
; 134  :         {
; 135  :           v_id[i] = get_fe_tailv(fe_id);

	mov	ebx, DWORD PTR _web+460
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ebx+eax*4]
	mov	eax, edx
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ebx+20]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN216@sqcurve_me@3
	mov	edi, DWORD PTR _web+636
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	lea	eax, DWORD PTR [eax+edi*4]
	mov	eax, DWORD PTR [eax+ecx]
	mov	edi, DWORD PTR _f_id$[ebp]
	jmp	SHORT $LN217@sqcurve_me@3
$LN216@sqcurve_me@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [ecx+eax]
$LN217@sqcurve_me@3:
	mov	DWORD PTR _v_id$89126[ebp+4], eax

; 136  :           fe_id = get_next_edge(fe_id);

	test	edx, 134217728				; 08000000H
	je	SHORT $LN218@sqcurve_me@3
	mov	eax, DWORD PTR [ebx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN219@sqcurve_me@3
$LN218@sqcurve_me@3:
	mov	eax, DWORD PTR [ebx+32]
$LN219@sqcurve_me@3:

; 133  :         for ( i = 0 ; i < FACET_EDGES ; i++ )
; 134  :         {
; 135  :           v_id[i] = get_fe_tailv(fe_id);

	mov	ebx, DWORD PTR _web+460
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN221@sqcurve_me@3
	mov	edx, DWORD PTR _web+636
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR [eax+ecx]
	jmp	SHORT $LN222@sqcurve_me@3
$LN221@sqcurve_me@3:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+eax*4]
	mov	ecx, DWORD PTR [ecx+edx]
$LN222@sqcurve_me@3:

; 137  :         }
; 138  :         get_facet_verts(f_id,x,wraps);  /* in tail order */

	lea	eax, DWORD PTR _wraps$[ebp]
	mov	DWORD PTR _v_id$89126[ebp+8], ecx
	mov	ecx, DWORD PTR _x$[ebp]
	push	eax
	push	ecx
	push	edi
	call	_get_facet_verts
	add	esp, 12					; 0000000cH

; 139  :         for ( i = 0 ; i < FACET_EDGES ; i++ )

	xor	esi, esi
	lea	ecx, DWORD PTR _side$89128[ebp+8]
	mov	DWORD PTR _i$89124[ebp], esi
	mov	DWORD PTR tv3605[ebp], esi
	mov	DWORD PTR tv3644[ebp], ecx
	npad	3
$LL62@sqcurve_me@3:

; 140  :         { int ii = (i+1)%FACET_EDGES;

	lea	eax, DWORD PTR [esi+1]
	mov	DWORD PTR tv2570[ebp], eax
	cdq
	mov	edi, 3
	idiv	edi
	mov	ebx, edx

; 141  :           for ( j = 0 ; j < SDIM ; j++ )

	xor	edx, edx
	cmp	DWORD PTR _web+616, 4
	mov	DWORD PTR _ii$89135[ebp], ebx
	jl	SHORT $LC226@sqcurve_me@3
	mov	eax, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR [eax+ebx*4]
	mov	esi, DWORD PTR [eax+esi*4]
	lea	eax, DWORD PTR [esi+8]

; 142  :              side[i][j] = x[ii][j] - x[i][j];

	mov	ebx, edx
	sub	ebx, esi
	mov	esi, DWORD PTR _web+616
	add	esi, -4					; fffffffcH
	shr	esi, 2
	inc	esi
	lea	edi, DWORD PTR [edx+24]
	lea	edx, DWORD PTR [esi*4]
	npad	2
$LL227@sqcurve_me@3:
	fld	QWORD PTR [edi-24]
	add	eax, 32					; 00000020H
	fsub	QWORD PTR [eax-40]
	add	edi, 32					; 00000020H
	add	ecx, 32					; 00000020H
	dec	esi
	fstp	QWORD PTR [ecx-40]
	fld	QWORD PTR [ebx+eax-32]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [ecx-32]
	fld	QWORD PTR [edi-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [ecx-24]
	fld	QWORD PTR [edi-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [ecx-16]
	jne	SHORT $LL227@sqcurve_me@3

; 140  :         { int ii = (i+1)%FACET_EDGES;

	mov	ebx, DWORD PTR _ii$89135[ebp]
	mov	esi, DWORD PTR _i$89124[ebp]
$LC226@sqcurve_me@3:

; 141  :           for ( j = 0 ; j < SDIM ; j++ )

	cmp	edx, DWORD PTR _web+616
	jge	SHORT $LN61@sqcurve_me@3
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax+esi*4]
	mov	esi, DWORD PTR _x$[ebp]
	mov	esi, DWORD PTR [esi+ebx*4]
	mov	edi, DWORD PTR tv3605[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	sub	esi, ecx
	mov	ecx, DWORD PTR _web+616
	add	edi, edx
	lea	edi, DWORD PTR _side$89128[ebp+edi*8]
	sub	ecx, edx
$LC59@sqcurve_me@3:

; 142  :              side[i][j] = x[ii][j] - x[i][j];

	fld	QWORD PTR [eax+esi]
	add	eax, 8
	fsub	QWORD PTR [eax-8]
	add	edi, 8
	dec	ecx
	fstp	QWORD PTR [edi-8]
	jne	SHORT $LC59@sqcurve_me@3
$LN61@sqcurve_me@3:

; 139  :         for ( i = 0 ; i < FACET_EDGES ; i++ )

	mov	eax, DWORD PTR tv3605[ebp]
	mov	ecx, DWORD PTR tv3644[ebp]
	mov	esi, DWORD PTR tv2570[ebp]
	add	eax, 6
	add	ecx, 48					; 00000030H
	mov	DWORD PTR _i$89124[ebp], esi
	mov	DWORD PTR tv3644[ebp], ecx
	mov	DWORD PTR tv3605[ebp], eax
	cmp	eax, 18					; 00000012H
	jl	$LL62@sqcurve_me@3

; 143  :         }
; 144  :         sqcurve_energy_precalc(v_id,side,wraps);

	lea	ecx, DWORD PTR _wraps$[ebp]
	push	ecx
	lea	edx, DWORD PTR _side$89128[ebp]
	push	edx
	lea	eax, DWORD PTR _v_id$89126[ebp]
	push	eax
	call	_sqcurve_energy_precalc
	mov	edx, DWORD PTR _web+236
	mov	ebx, DWORD PTR tv2504[ebp]
	add	esp, 12					; 0000000cH
$LN69@sqcurve_me@3:

; 124  : 
; 125  :      FOR_ALL_FACETS(f_id)

	mov	ecx, DWORD PTR [ebx+edx]
	mov	edi, DWORD PTR [ecx]
	mov	ecx, edi
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	mov	DWORD PTR _f_id$[ebp], edi
	jne	$LL70@sqcurve_me@3
$LN68@sqcurve_me@3:

; 145  :      }
; 146  : 
; 147  :      sqcurve_init_timestamp = global_timestamp; 

	mov	edx, DWORD PTR _global_timestamp
	pop	edi
	pop	esi
	mov	DWORD PTR _sqcurve_init_timestamp, edx
	pop	ebx

; 251  :   }
; 252  : } // end sqcurve_method_init()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN72@sqcurve_me@3:

; 148  :   }
; 149  : 
; 150  :   if ( ( mode == METHOD_GRADIENT )
; 151  :      && ( sqcurve_grad_init_timestamp < global_timestamp || !v_curve )  ) 

	cmp	eax, 4321				; 000010e1H
	jne	$LN56@sqcurve_me@3
	mov	eax, DWORD PTR _sqcurve_grad_init_timestamp
	cmp	eax, DWORD PTR _global_timestamp
	jl	SHORT $LN55@sqcurve_me@3
	cmp	DWORD PTR _v_curve, 0
	jne	$LN56@sqcurve_me@3
$LN55@sqcurve_me@3:

; 152  :   {
; 153  :      MAT2D(a,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	ecx, DWORD PTR _axJ$89142[ebp]
	push	ecx
	lea	edx, DWORD PTR _aqXvS$89141[ebp]
	push	edx
	call	_mat2d_setup

; 154  :      REAL af[MAXCOORD], gaf[MAXCOORD];
; 155  :      MAT2D(grad,MAXCOORD,MAXCOORD);

	push	6
	mov	DWORD PTR _a$89143[ebp], eax
	push	6
	lea	eax, DWORD PTR _gradxJ$89148[ebp]
	push	eax
	lea	ecx, DWORD PTR _gradqXvS$89147[ebp]
	push	ecx
	call	_mat2d_setup

; 156  :      MAT2D(adft,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	edx, DWORD PTR _adftxJ$89152[ebp]
	mov	DWORD PTR _grad$89149[ebp], eax
	push	edx
	lea	eax, DWORD PTR _adftqXvS$89151[ebp]
	push	eax
	call	_mat2d_setup

; 157  :      MAT3D(seconds,MAXCOORD,MAXCOORD,MAXCOORD);

	push	6
	push	6
	push	6
	lea	ecx, DWORD PTR _secondsxJ$89156[ebp]
	push	ecx
	lea	edx, DWORD PTR _secondsqXvS$89155[ebp]
	push	edx
	mov	DWORD PTR _adft$89153[ebp], eax
	call	_mat3d_setup
	add	esp, 68					; 00000044H

; 158  : 
; 159  :      v_curve = (struct v_curve_t *)temp_calloc(web.skel[VERTEX].max_ord+1,
; 160  :                          sizeof(struct v_curve_t));

	push	160					; 000000a0H
	mov	DWORD PTR _seconds$89157[ebp], eax
	mov	eax, DWORD PTR _web+68
	push	OFFSET ??_C@_0L@JEAAFJGL@SQCURVE2?4C?$AA@
	inc	eax
	push	544					; 00000220H
	push	eax
	call	_kb_temp_calloc

; 161  :      e_curve = (struct e_curve_t *)temp_calloc(web.skel[EDGE].max_ord+1,
; 162  :                          sizeof(struct e_curve_t));

	mov	ecx, DWORD PTR _web+180
	push	162					; 000000a2H
	push	OFFSET ??_C@_0L@JEAAFJGL@SQCURVE2?4C?$AA@
	inc	ecx
	push	576					; 00000240H
	push	ecx
	mov	DWORD PTR _v_curve, eax
	call	_kb_temp_calloc

; 163  :       
; 164  : 
; 165  :      FOR_ALL_FACETS(f_id)

	mov	ebx, DWORD PTR _web+272
	mov	ecx, ebx
	shr	ecx, 28					; 0000001cH
	add	esp, 32					; 00000020H
	and	ecx, 1
	mov	DWORD PTR _e_curve, eax
	mov	DWORD PTR _f_id$[ebp], ebx
	je	$LN52@sqcurve_me@3
	mov	edx, DWORD PTR _web+236
$LL54@sqcurve_me@3:
	mov	edi, ebx
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	eax, DWORD PTR [edi+edx]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	esi, esi
	or	eax, esi
	mov	DWORD PTR tv2504[ebp], edi
	je	$LN53@sqcurve_me@3

; 166  :      { /* get side vectors */
; 167  :         int i,j;
; 168  :         vertex_id v_id[FACET_VERTS];
; 169  :         edge_id e_id[FACET_VERTS];
; 170  :         facetedge_id fe_id;
; 171  :         REAL side[FACET_EDGES][MAXCOORD];
; 172  : 
; 173  :         fe_id = get_facet_fe(f_id);

	test	ecx, ecx
	je	SHORT $LN155@sqcurve_me@3
$LN156@sqcurve_me@3:
	mov	edx, DWORD PTR [edi+edx]
	mov	ecx, DWORD PTR [edx+28]
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN155@sqcurve_me@3
	xor	ecx, 134217728				; 08000000H
$LN155@sqcurve_me@3:

; 174  :         for ( i = 0 ; i < FACET_EDGES ; i++ )
; 175  :         {
; 176  :           v_id[i] = get_fe_tailv(fe_id);

	mov	edx, DWORD PTR _web+460
	mov	esi, DWORD PTR _dymem
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [edi+20]
	mov	edx, ecx
	and	edx, 134217728				; 08000000H
	xor	eax, edx
	mov	edx, DWORD PTR _web+216
	mov	edx, DWORD PTR [edx+esi+304]
	mov	esi, DWORD PTR _web+124
	mov	DWORD PTR tv2655[ebp], edi
	test	eax, 134217728				; 08000000H
	je	SHORT $LN162@sqcurve_me@3
	mov	ebx, DWORD PTR _web+636
	mov	edi, eax
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [esi+edi*4]
	lea	edi, DWORD PTR [edi+ebx*4]
	mov	ebx, DWORD PTR [edi+edx]
	mov	edi, DWORD PTR tv2655[ebp]
	jmp	SHORT $LN161@sqcurve_me@3
$LN162@sqcurve_me@3:
	mov	ebx, eax
	and	ebx, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [esi+ebx*4]
	mov	ebx, DWORD PTR [edx+ebx]
$LN161@sqcurve_me@3:
	mov	DWORD PTR _v_id$89174[ebp], ebx

; 177  :           e_id[i] = get_fe_edge(fe_id);

	mov	DWORD PTR _e_id$89175[ebp], eax

; 178  :           fe_id = get_next_edge(fe_id);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN168@sqcurve_me@3
	mov	ecx, DWORD PTR [edi+28]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN48@sqcurve_me@3
$LN168@sqcurve_me@3:
	mov	ecx, DWORD PTR [edi+32]
$LN48@sqcurve_me@3:

; 174  :         for ( i = 0 ; i < FACET_EDGES ; i++ )
; 175  :         {
; 176  :           v_id[i] = get_fe_tailv(fe_id);

	mov	edi, DWORD PTR _web+460
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [edi+20]
	mov	ebx, ecx
	and	ebx, 134217728				; 08000000H
	xor	eax, ebx
	mov	DWORD PTR tv2655[ebp], edi
	test	eax, 134217728				; 08000000H
	je	SHORT $LN235@sqcurve_me@3
	mov	ebx, DWORD PTR _web+636
	mov	edi, eax
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [esi+edi*4]
	lea	edi, DWORD PTR [edi+ebx*4]
	mov	ebx, DWORD PTR [edi+edx]
	mov	edi, DWORD PTR tv2655[ebp]
	jmp	SHORT $LN236@sqcurve_me@3
$LN235@sqcurve_me@3:
	mov	ebx, eax
	and	ebx, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [esi+ebx*4]
	mov	ebx, DWORD PTR [edx+ebx]
$LN236@sqcurve_me@3:
	mov	DWORD PTR _v_id$89174[ebp+4], ebx

; 177  :           e_id[i] = get_fe_edge(fe_id);

	mov	DWORD PTR _e_id$89175[ebp+4], eax

; 178  :           fe_id = get_next_edge(fe_id);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN237@sqcurve_me@3
	mov	ecx, DWORD PTR [edi+28]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN238@sqcurve_me@3
$LN237@sqcurve_me@3:
	mov	ecx, DWORD PTR [edi+32]
$LN238@sqcurve_me@3:

; 174  :         for ( i = 0 ; i < FACET_EDGES ; i++ )
; 175  :         {
; 176  :           v_id[i] = get_fe_tailv(fe_id);

	mov	edi, DWORD PTR _web+460
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [eax+20]
	and	ecx, 134217728				; 08000000H
	xor	eax, ecx
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN240@sqcurve_me@3
	mov	esi, DWORD PTR _web+636
	lea	ecx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [ecx+edx]
	jmp	SHORT $LN241@sqcurve_me@3
$LN240@sqcurve_me@3:
	mov	edx, DWORD PTR [edx+ecx]
$LN241@sqcurve_me@3:

; 179  :         }
; 180  :         get_facet_verts(f_id,x,wraps);  /* in tail order */

	mov	ecx, DWORD PTR _f_id$[ebp]
	mov	DWORD PTR _v_id$89174[ebp+8], edx
	lea	edx, DWORD PTR _wraps$[ebp]
	mov	DWORD PTR _e_id$89175[ebp+8], eax
	mov	eax, DWORD PTR _x$[ebp]
	push	edx
	push	eax
	push	ecx
	call	_get_facet_verts
	add	esp, 12					; 0000000cH

; 181  :         for ( i = 0 ; i < FACET_EDGES ; i++ )

	xor	esi, esi
	lea	ecx, DWORD PTR _side$89177[ebp+8]
	mov	DWORD PTR _i$89172[ebp], esi
	mov	DWORD PTR tv4028[ebp], esi
	mov	DWORD PTR tv4131[ebp], ecx
	npad	9
$LL46@sqcurve_me@3:

; 182  :         { int ii = (i+1)%FACET_EDGES;

	lea	eax, DWORD PTR [esi+1]
	mov	DWORD PTR tv2700[ebp], eax
	cdq
	mov	edi, 3
	idiv	edi
	mov	ebx, edx

; 183  :           for ( j = 0 ; j < SDIM ; j++ )

	xor	edx, edx
	cmp	DWORD PTR _web+616, 4
	mov	DWORD PTR _ii$89184[ebp], ebx
	jl	SHORT $LC245@sqcurve_me@3
	mov	eax, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR [eax+ebx*4]
	mov	esi, DWORD PTR [eax+esi*4]
	lea	eax, DWORD PTR [esi+8]

; 184  :              side[i][j] = x[ii][j] - x[i][j];

	mov	ebx, edx
	sub	ebx, esi
	mov	esi, DWORD PTR _web+616
	add	esi, -4					; fffffffcH
	shr	esi, 2
	inc	esi
	lea	edi, DWORD PTR [edx+24]
	lea	edx, DWORD PTR [esi*4]
	npad	2
$LL246@sqcurve_me@3:
	fld	QWORD PTR [edi-24]
	add	eax, 32					; 00000020H
	fsub	QWORD PTR [eax-40]
	add	edi, 32					; 00000020H
	add	ecx, 32					; 00000020H
	dec	esi
	fstp	QWORD PTR [ecx-40]
	fld	QWORD PTR [ebx+eax-32]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [ecx-32]
	fld	QWORD PTR [edi-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [ecx-24]
	fld	QWORD PTR [edi-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [ecx-16]
	jne	SHORT $LL246@sqcurve_me@3

; 182  :         { int ii = (i+1)%FACET_EDGES;

	mov	ebx, DWORD PTR _ii$89184[ebp]
	mov	esi, DWORD PTR _i$89172[ebp]
$LC245@sqcurve_me@3:

; 183  :           for ( j = 0 ; j < SDIM ; j++ )

	cmp	edx, DWORD PTR _web+616
	jge	SHORT $LN45@sqcurve_me@3
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax+esi*4]
	mov	esi, DWORD PTR _x$[ebp]
	mov	esi, DWORD PTR [esi+ebx*4]
	mov	edi, DWORD PTR tv4028[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	sub	esi, ecx
	mov	ecx, DWORD PTR _web+616
	add	edi, edx
	lea	edi, DWORD PTR _side$89177[ebp+edi*8]
	sub	ecx, edx
$LC43@sqcurve_me@3:

; 184  :              side[i][j] = x[ii][j] - x[i][j];

	fld	QWORD PTR [eax+esi]
	add	eax, 8
	fsub	QWORD PTR [eax-8]
	add	edi, 8
	dec	ecx
	fstp	QWORD PTR [edi-8]
	jne	SHORT $LC43@sqcurve_me@3
$LN45@sqcurve_me@3:

; 181  :         for ( i = 0 ; i < FACET_EDGES ; i++ )

	mov	eax, DWORD PTR tv4028[ebp]
	mov	ecx, DWORD PTR tv4131[ebp]
	mov	esi, DWORD PTR tv2700[ebp]
	add	eax, 6
	add	ecx, 48					; 00000030H
	mov	DWORD PTR _i$89172[ebp], esi
	mov	DWORD PTR tv4131[ebp], ecx
	mov	DWORD PTR tv4028[ebp], eax
	cmp	eax, 18					; 00000012H
	jl	$LL46@sqcurve_me@3

; 185  :         }
; 186  :         sqcurve_grad_precalc(v_id,e_id,side,wraps);

	lea	ecx, DWORD PTR _wraps$[ebp]
	push	ecx
	lea	edx, DWORD PTR _side$89177[ebp]
	push	edx
	lea	eax, DWORD PTR _e_id$89175[ebp]
	push	eax
	lea	ecx, DWORD PTR _v_id$89174[ebp]
	push	ecx
	call	_sqcurve_grad_precalc
	mov	edx, DWORD PTR _web+236
	mov	edi, DWORD PTR tv2504[ebp]
	add	esp, 16					; 00000010H
$LN53@sqcurve_me@3:

; 163  :       
; 164  : 
; 165  :      FOR_ALL_FACETS(f_id)

	mov	eax, DWORD PTR [edi+edx]
	mov	ebx, DWORD PTR [eax]
	mov	ecx, ebx
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	mov	DWORD PTR _f_id$[ebp], ebx
	jne	$LL54@sqcurve_me@3
$LN52@sqcurve_me@3:

; 187  :      }
; 188  : 
; 189  :     FOR_ALL_VERTICES(vv_id) 

	mov	eax, DWORD PTR _web+48
	mov	ecx, eax
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	mov	DWORD PTR _vv_id$[ebp], eax
	je	$LN38@sqcurve_me@3
	jmp	SHORT $LN40@sqcurve_me@3
$LL254@sqcurve_me@3:
	mov	eax, DWORD PTR _vv_id$[ebp]
$LN40@sqcurve_me@3:
	mov	edx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	DWORD PTR tv2765[ebp], eax
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	$LN39@sqcurve_me@3

; 190  :     { struct v_curve_t *vc = v_curve + loc_ordinal(vv_id);

	test	ecx, ecx
	je	SHORT $LN137@sqcurve_me@3
	mov	edi, DWORD PTR tv2765[ebp]
	jmp	SHORT $LN138@sqcurve_me@3
$LN137@sqcurve_me@3:
	or	edi, -1
$LN138@sqcurve_me@3:
	imul	edi, 544				; 00000220H
	add	edi, DWORD PTR _v_curve
	mov	DWORD PTR _vc$89197[ebp], edi

; 191  :       if ( !boundary_curvature_flag ) vc->a = vc->area; 

	cmp	DWORD PTR _boundary_curvature_flag, edx
	jne	SHORT $LN35@sqcurve_me@3
	fld	QWORD PTR [edi]
	fstp	QWORD PTR [edi+8]
$LN35@sqcurve_me@3:

; 192  :       if ( (get_vattr(vv_id) & CONSTRAINT) && !(sqcurve_ignore_constr) )

	mov	esi, DWORD PTR _web+12
	mov	eax, DWORD PTR tv2765[ebp]
	mov	eax, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1024				; 00000400H
	xor	ecx, ecx
	or	eax, ecx
	je	$LN252@sqcurve_me@3
	cmp	DWORD PTR _sqcurve_ignore_constr, ecx
	jne	$LN252@sqcurve_me@3

; 193  :       { conmap_t * conmap = get_v_constraint_map(vv_id);

	mov	edx, DWORD PTR _web+104
	mov	eax, DWORD PTR _dymem
	cmp	DWORD PTR [edx+eax+1288], ecx
	je	SHORT $LN139@sqcurve_me@3
	mov	ecx, DWORD PTR [edx+eax+1264]
	mov	eax, DWORD PTR tv2765[ebp]
	add	ecx, DWORD PTR [esi+eax*4]
	jmp	SHORT $LN140@sqcurve_me@3
$LN139@sqcurve_me@3:
	mov	ecx, OFFSET _nullcon
$LN140@sqcurve_me@3:

; 194  :         int i,j,oncount = 0;

	xor	ebx, ebx

; 195  :          struct constraint *con[MAXCONHIT];
; 196  :          REAL perp[MAXCOORD];
; 197  :          REAL dummy;
; 198  : 
; 199  :          for ( j = 1 ; j <= (int)conmap[0] ; j++ )

	mov	esi, 1
	mov	DWORD PTR _oncount$89212[ebp], ebx
	cmp	DWORD PTR [ecx], esi
	jl	$LN24@sqcurve_me@3
$LL33@sqcurve_me@3:

; 200  :           if ( (conmap[j] & CON_HIT_BIT) && (oncount < web.sdim) )

	mov	eax, DWORD PTR [ecx+esi*4]
	test	eax, eax
	jns	SHORT $LN32@sqcurve_me@3
	cmp	ebx, DWORD PTR _web+616
	jge	SHORT $LN32@sqcurve_me@3

; 201  :              con[oncount++] = get_constraint(conmap[j]);

	and	eax, 1073741823				; 3fffffffH
	imul	eax, 176				; 000000b0H
	add	eax, DWORD PTR _web+652
	inc	ebx
	mov	DWORD PTR _con$89213[ebp+ebx*4-4], eax
$LN32@sqcurve_me@3:

; 195  :          struct constraint *con[MAXCONHIT];
; 196  :          REAL perp[MAXCOORD];
; 197  :          REAL dummy;
; 198  : 
; 199  :          for ( j = 1 ; j <= (int)conmap[0] ; j++ )

	inc	esi
	cmp	esi, DWORD PTR [ecx]
	jle	SHORT $LL33@sqcurve_me@3

; 201  :              con[oncount++] = get_constraint(conmap[j]);

	mov	DWORD PTR _oncount$89212[ebp], ebx

; 202  : 
; 203  :          /* stuff for gradient of projection operator */
; 204  :          for ( j = 0 ; j < oncount ; j++ )

	test	ebx, ebx
	jle	$LN24@sqcurve_me@3
	mov	esi, DWORD PTR _grad$89149[ebp]
	mov	eax, DWORD PTR _seconds$89157[ebp]
	sub	eax, esi
	mov	DWORD PTR tv4251[ebp], eax
	lea	eax, DWORD PTR _con$89213[ebp]
	sub	eax, esi
	mov	DWORD PTR tv4288[ebp], eax
	mov	DWORD PTR tv4259[ebp], ebx
	jmp	SHORT $LN29@sqcurve_me@3
	npad	3
$LL251@sqcurve_me@3:
	mov	edx, DWORD PTR _web+104
$LN29@sqcurve_me@3:

; 205  :            eval_second(con[j]->formula,get_coord(vv_id),SDIM,&dummy,
; 206  :                   grad[j],seconds[j],vv_id);

	mov	ecx, DWORD PTR _vv_id$[ebp]
	mov	eax, DWORD PTR tv4251[ebp]
	push	ecx
	mov	ecx, DWORD PTR [eax+esi]
	mov	eax, DWORD PTR [esi]
	push	ecx
	push	eax
	mov	eax, DWORD PTR _web+616
	lea	ecx, DWORD PTR _dummy$89215[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv2765[ebp]
	push	eax
	mov	eax, DWORD PTR _web+12
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _dymem
	add	ecx, DWORD PTR [edx+eax+64]
	push	ecx
	mov	ecx, DWORD PTR tv4288[ebp]
	mov	edx, DWORD PTR [ecx+esi]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	call	_eval_second
	add	esp, 28					; 0000001cH
	add	esi, 4
	dec	DWORD PTR tv4259[ebp]
	jne	SHORT $LL251@sqcurve_me@3

; 207  : 
; 208  :          /* construct matrix A */
; 209  :          for ( i = 0 ; i < oncount ; i++ )

	mov	ecx, DWORD PTR _a$89143[ebp]
	mov	eax, DWORD PTR _grad$89149[ebp]
	sub	eax, ecx
	mov	DWORD PTR tv4335[ebp], ecx
	mov	DWORD PTR tv4341[ebp], eax
	mov	DWORD PTR tv4362[ebp], ebx
	npad	4
$LL26@sqcurve_me@3:

; 210  :             for ( j = 0 ; j < oncount ; j++ )

	xor	esi, esi
	npad	14
$LL23@sqcurve_me@3:

; 211  :               a[i][j] = SDIM_dot(grad[i],grad[j]);

	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR _grad$89149[ebp]
	mov	eax, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR tv4335[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv4341[ebp]
	push	eax
	mov	eax, DWORD PTR [ecx+edx]
	push	eax
	call	_dot
	mov	ecx, DWORD PTR tv4335[ebp]
	mov	edx, DWORD PTR [ecx]
	fstp	QWORD PTR [edx+esi*8]
	inc	esi
	add	esp, 12					; 0000000cH
	cmp	esi, ebx
	jl	SHORT $LL23@sqcurve_me@3

; 207  : 
; 208  :          /* construct matrix A */
; 209  :          for ( i = 0 ; i < oncount ; i++ )

	add	DWORD PTR tv4335[ebp], 4
	dec	DWORD PTR tv4362[ebp]
	jne	SHORT $LL26@sqcurve_me@3
$LN24@sqcurve_me@3:

; 212  : 
; 213  :          /* invert */
; 214  :          mat_inv(a,oncount);

	mov	esi, DWORD PTR _a$89143[ebp]
	push	ebx
	push	esi
	call	_mat_inv

; 215  : 
; 216  :          mat_mult(a,grad,adft,oncount,oncount,SDIM);

	mov	eax, DWORD PTR _web+616
	mov	ecx, DWORD PTR _adft$89153[ebp]
	mov	edx, DWORD PTR _grad$89149[ebp]
	push	eax
	push	ebx
	push	ebx
	push	ecx
	push	edx
	push	esi
	call	_mat_mult

; 217  :          matvec_mul(adft,vc->force,af,oncount,SDIM);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	push	ebx
	lea	edx, DWORD PTR _af$89145[ebp]
	push	edx
	lea	eax, DWORD PTR [edi+16]
	push	eax
	mov	eax, DWORD PTR _adft$89153[ebp]
	push	eax
	call	_matvec_mul

; 218  :          vec_mat_mul(af,grad,gaf,oncount,SDIM);

	mov	ecx, DWORD PTR _web+616
	mov	eax, DWORD PTR _grad$89149[ebp]
	push	ecx
	push	ebx
	lea	edx, DWORD PTR _gaf$89146[ebp]
	push	edx
	push	eax
	lea	ecx, DWORD PTR _af$89145[ebp]
	push	ecx
	call	_vec_mat_mul

; 219  :          for ( k = 0 ; k < SDIM ; k++ )

	xor	edx, edx
	add	esp, 72					; 00000048H
	mov	DWORD PTR _k$[ebp], edx
	cmp	DWORD PTR _web+616, edx
	jle	$LN18@sqcurve_me@3

; 212  : 
; 213  :          /* invert */
; 214  :          mat_inv(a,oncount);

	fld	QWORD PTR __real@c000000000000000
	lea	eax, DWORD PTR [edi+472]
	fldz
	mov	DWORD PTR tv5795[ebp], eax
$LN20@sqcurve_me@3:

; 221  :            for ( i = 0 ; i < oncount ; i++ )

	xor	ecx, ecx
	fld	ST(0)
	mov	DWORD PTR _i$89210[ebp], ecx
	test	ebx, ebx
	jle	$LN15@sqcurve_me@3

; 220  :          { REAL sum = 0.0;

	lea	eax, DWORD PTR _af$89145[ebp]
$LN17@sqcurve_me@3:

; 222  :              for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	cmp	DWORD PTR _web+616, 4
	jl	$LC248@sqcurve_me@3
	mov	ebx, DWORD PTR _seconds$89157[ebp]
	mov	ecx, DWORD PTR [ebx+ecx*4]
	mov	ebx, DWORD PTR [ecx+edx*4]

; 224  :                sum += vc->force[j]*seconds[i][k][j]*af[i];

	mov	DWORD PTR tv2854[ebp], ebx
	lea	ecx, DWORD PTR [ebx+16]
	sub	ebx, edi
	mov	DWORD PTR tv4964[ebp], ebx
	lea	ebx, DWORD PTR _gaf$89146[ebp]
	sub	ebx, edi
	lea	edx, DWORD PTR [edi+24]
	lea	edi, DWORD PTR _gaf$89146[ebp]
	sub	edi, DWORD PTR tv2854[ebp]
	mov	DWORD PTR tv6009[ebp], ebx
	mov	ebx, DWORD PTR tv4964[ebp]
	mov	DWORD PTR tv5472[ebp], edi
$LN249@sqcurve_me@3:

; 223  :              { sum += af[i]*seconds[i][k][j]*gaf[j];

	fld	QWORD PTR [eax]
	mov	edi, DWORD PTR tv5472[ebp]
	fmul	QWORD PTR [ecx-16]

; 224  :                sum += vc->force[j]*seconds[i][k][j]*af[i];

	add	esi, 4
	add	ecx, 32					; 00000020H
	add	edx, 32					; 00000020H
	fmul	QWORD PTR _gaf$89146[ebp+esi*8-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx-40]
	fmul	QWORD PTR [ecx-48]
	fmul	QWORD PTR [eax]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax]
	fmul	QWORD PTR [ecx-40]
	fmul	QWORD PTR _gaf$89146[ebp+esi*8-24]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx-32]
	fmul	QWORD PTR [ecx-40]
	fmul	QWORD PTR [eax]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax]
	fmul	QWORD PTR [ecx-32]
	fmul	QWORD PTR [ecx+edi-32]
	mov	edi, DWORD PTR tv6009[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx-24]
	fmul	QWORD PTR [ecx-32]
	fmul	QWORD PTR [eax]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax]
	fmul	QWORD PTR [ebx+edx-32]
	fmul	QWORD PTR [edi+edx-32]
	mov	edi, DWORD PTR _web+616
	add	edi, -3					; fffffffdH
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx-16]
	fmul	QWORD PTR [ebx+edx-32]
	fmul	QWORD PTR [eax]
	faddp	ST(1), ST(0)
	cmp	esi, edi
	jl	SHORT $LN249@sqcurve_me@3
	mov	ecx, DWORD PTR _i$89210[ebp]
	mov	ebx, DWORD PTR _oncount$89212[ebp]
	mov	edi, DWORD PTR _vc$89197[ebp]
	mov	edx, DWORD PTR _k$[ebp]
$LC248@sqcurve_me@3:

; 222  :              for ( j = 0 ; j < SDIM ; j++ )

	cmp	esi, DWORD PTR _web+616
	jge	SHORT $LN16@sqcurve_me@3
	mov	ebx, DWORD PTR _seconds$89157[ebp]
	mov	ecx, DWORD PTR [ebx+ecx*4]
	mov	edx, DWORD PTR [ecx+edx*4]
	lea	ebx, DWORD PTR _gaf$89146[ebp]
	lea	ecx, DWORD PTR [edx+esi*8]
	sub	ebx, edx
	mov	edx, DWORD PTR _web+616
	lea	edi, DWORD PTR [edi+esi*8+16]
	sub	edx, esi
$LC14@sqcurve_me@3:

; 223  :              { sum += af[i]*seconds[i][k][j]*gaf[j];

	fld	QWORD PTR [ecx]
	add	ecx, 8
	fmul	QWORD PTR [eax]
	add	edi, 8
	dec	edx
	fmul	QWORD PTR [ebx+ecx-8]
	faddp	ST(1), ST(0)

; 224  :                sum += vc->force[j]*seconds[i][k][j]*af[i];

	fld	QWORD PTR [ecx-8]
	fmul	QWORD PTR [edi-8]
	fmul	QWORD PTR [eax]
	faddp	ST(1), ST(0)
	jne	SHORT $LC14@sqcurve_me@3

; 222  :              for ( j = 0 ; j < SDIM ; j++ )

	mov	ecx, DWORD PTR _i$89210[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	mov	edi, DWORD PTR _vc$89197[ebp]
	mov	ebx, DWORD PTR _oncount$89212[ebp]
$LN16@sqcurve_me@3:

; 221  :            for ( i = 0 ; i < oncount ; i++ )

	inc	ecx
	add	eax, 8
	mov	DWORD PTR _i$89210[ebp], ecx
	cmp	ecx, ebx
	jl	$LN17@sqcurve_me@3
$LN15@sqcurve_me@3:

; 225  :              }
; 226  :            vc->fpgradf[k] = -2*sum;

	mov	eax, DWORD PTR tv5795[ebp]
	fmul	ST(0), ST(2)
	inc	edx
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	mov	DWORD PTR _k$[ebp], edx
	mov	DWORD PTR tv5795[ebp], eax
	cmp	edx, DWORD PTR _web+616
	jl	$LN20@sqcurve_me@3

; 219  :          for ( k = 0 ; k < SDIM ; k++ )

	fstp	ST(1)
	fstp	ST(0)
$LN18@sqcurve_me@3:

; 227  :          } 
; 228  :   
; 229  :          constr_proj(TANGPROJ,oncount,con,get_coord(vv_id),
; 230  :                                  vc->force,perp,NULL,NO_DETECT,NULLID);

	mov	eax, DWORD PTR _web+12
	mov	ecx, DWORD PTR tv2765[ebp]
	push	0
	push	0
	push	0
	lea	edx, DWORD PTR _perp$89214[ebp]
	push	edx
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _web+104
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+64]
	lea	esi, DWORD PTR [edi+16]
	push	esi
	push	edx
	lea	edx, DWORD PTR _con$89213[ebp]
	push	edx
	push	ebx
	push	2
	call	_constr_proj

; 231  :          for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	add	esp, 36					; 00000024H
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN256@sqcurve_me@3

; 227  :          } 
; 228  :   
; 229  :          constr_proj(TANGPROJ,oncount,con,get_coord(vv_id),
; 230  :                                  vc->force,perp,NULL,NO_DETECT,NULLID);

	mov	ecx, esi
	npad	8
$LL11@sqcurve_me@3:

; 232  :            vc->force[j] -= perp[j];

	fld	QWORD PTR [ecx]
	inc	eax
	fsub	QWORD PTR _perp$89214[ebp+eax*8-8]
	add	ecx, 8
	fstp	QWORD PTR [ecx-8]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LL11@sqcurve_me@3
$LN256@sqcurve_me@3:

; 233  : 
; 234  :          constr_proj(TANGPROJ,oncount,con,get_coord(vv_id),
; 235  :                                  vc->normal,perp,NULL,NO_DETECT,NULLID);

	mov	ecx, DWORD PTR _web+12
	mov	edx, DWORD PTR tv2765[ebp]
	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _perp$89214[ebp]
	push	eax
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _web+104
	mov	edx, DWORD PTR _dymem
	add	eax, DWORD PTR [ecx+edx+64]
	lea	esi, DWORD PTR [edi+416]
	push	esi
	push	eax
	lea	eax, DWORD PTR _con$89213[ebp]
	push	eax
	push	ebx
	push	2
	call	_constr_proj

; 236  :          for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	add	esp, 36					; 00000024H
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN252@sqcurve_me@3

; 233  : 
; 234  :          constr_proj(TANGPROJ,oncount,con,get_coord(vv_id),
; 235  :                                  vc->normal,perp,NULL,NO_DETECT,NULLID);

	mov	ecx, esi
	npad	6
$LL8@sqcurve_me@3:

; 237  :                   vc->normal[j] -= perp[j];

	fld	QWORD PTR [ecx]
	inc	eax
	fsub	QWORD PTR _perp$89214[ebp+eax*8-8]
	add	ecx, 8
	fstp	QWORD PTR [ecx-8]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LL8@sqcurve_me@3
$LN252@sqcurve_me@3:

; 238  :        }
; 239  : 
; 240  :        if ( h0_flag ) 

	cmp	DWORD PTR _h0_flag, 0
	je	$LN39@sqcurve_me@3

; 241  :        { vc->norm = SDIM_dot(vc->normal,vc->normal);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	esi, DWORD PTR [edi+416]
	push	esi
	push	esi
	call	_dot
	fstp	QWORD PTR [edi+464]

; 242  :          vc->f = SDIM_dot(vc->force,vc->normal);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR [edi+16]
	push	esi
	push	eax
	call	_dot
	fst	QWORD PTR [edi+64]

; 243  :          vc->h = vc->f/vc->norm*3;

	fdiv	QWORD PTR [edi+464]

; 244  :          switch ( h0_flag )

	mov	eax, DWORD PTR _h0_flag
	add	esp, 24					; 00000018H
	dec	eax
	fmul	QWORD PTR __real@4008000000000000
	fst	QWORD PTR [edi+72]
	je	SHORT $LN2@sqcurve_me@3
	dec	eax
	jne	SHORT $LN288@sqcurve_me@3

; 246  :            case H0_IN_ATTR:   vc->term = vc->h - *VREAL(vv_id,h0_attr); break;

	mov	ecx, DWORD PTR _h0_attr
	mov	edx, DWORD PTR _dymem
	imul	ecx, 240				; 000000f0H
	add	ecx, DWORD PTR _web+104
	mov	eax, DWORD PTR [ecx+edx+64]
	mov	ecx, DWORD PTR _web+12
	mov	edx, DWORD PTR tv2765[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	fsub	QWORD PTR [eax+ecx]
	fstp	QWORD PTR [edi+536]
	jmp	SHORT $LN39@sqcurve_me@3
$LN2@sqcurve_me@3:

; 245  :          { case H0_IN_GLOBAL: vc->term = vc->h - h0_value; break;

	fsub	QWORD PTR _h0_value
	fstp	QWORD PTR [edi+536]
	jmp	SHORT $LN39@sqcurve_me@3
$LN288@sqcurve_me@3:
	fstp	ST(0)
$LN39@sqcurve_me@3:

; 187  :      }
; 188  : 
; 189  :     FOR_ALL_VERTICES(vv_id) 

	mov	edx, DWORD PTR tv2765[ebp]
	mov	eax, DWORD PTR _web+12
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR _vv_id$[ebp], ecx
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	jne	$LL254@sqcurve_me@3
$LN38@sqcurve_me@3:

; 247  :          }
; 248  :        }
; 249  :      }
; 250  :      sqcurve_grad_init_timestamp = global_timestamp; 

	mov	edx, DWORD PTR _global_timestamp
	mov	DWORD PTR _sqcurve_grad_init_timestamp, edx
$LN56@sqcurve_me@3:

; 251  :   }
; 252  : } // end sqcurve_method_init()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_sqcurve_method_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EL@DJKAIEPH@eff_area_sq_mean_curvature?5and?5n@ ; `string'
PUBLIC	??_C@_0DN@KCGNEO@Inconsistent?5orientation?5of?5?6fac@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_sqcurve_method_value
;	COMDAT ??_C@_0EL@DJKAIEPH@eff_area_sq_mean_curvature?5and?5n@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0EL@DJKAIEPH@eff_area_sq_mean_curvature?5and?5n@ DB 'eff_area_sq_me'
	DB	'an_curvature and normal_sq_mean_curvature need consistency.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@KCGNEO@Inconsistent?5orientation?5of?5?6fac@
CONST	SEGMENT
??_C@_0DN@KCGNEO@Inconsistent?5orientation?5of?5?6fac@ DB 'Inconsistent o'
	DB	'rientation of ', 0aH, 'facets %s and %s at vertex %s.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\sqcurve2.c
CONST	ENDS
;	COMDAT _sqcurve_method_value
_TEXT	SEGMENT
_con$89543 = -132					; size = 28
tv971 = -104						; size = 4
tv160 = -100						; size = 4
_v_id$ = -96						; size = 4
tv955 = -92						; size = 4
tv941 = -88						; size = 4
_eid$89510 = -84					; size = 4
tv1192 = -80						; size = 8
_h$ = -80						; size = 8
_area$ = -80						; size = 8
_attr$ = -80						; size = 8
_mi$ = -72						; size = 4
_vc$ = -68						; size = 4
tv1190 = -64						; size = 8
_term$89599 = -64					; size = 8
_f$ = -64						; size = 8
tv1020 = -60						; size = 4
tv899 = -56						; size = 4
_perp$89544 = -52					; size = 48
__$ArrayPad$ = -4					; size = 4
_v_info$ = 8						; size = 4
_sqcurve_method_value PROC				; COMDAT

; 490  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _v_info$[ebp]

; 491  :   vertex_id v_id = v_info->v[0];

	mov	edx, DWORD PTR [ecx+16]

; 492  :   REAL h,venergy;
; 493  :   ATTR attr = get_vattr(v_id);

	mov	eax, DWORD PTR _web+12
	push	ebx
	push	esi
	push	edi
	mov	edi, edx
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edi*4]
	mov	ebx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR _v_id$[ebp], edx
	mov	DWORD PTR tv899[ebp], edi
	mov	DWORD PTR _attr$[ebp], ebx
	mov	DWORD PTR _attr$[ebp+4], eax

; 494  :   int ordv = loc_ordinal(v_id);

	test	edx, 268435456				; 10000000H
	je	SHORT $LN53@sqcurve_me@4
	mov	esi, edi
	jmp	SHORT $LN54@sqcurve_me@4
$LN53@sqcurve_me@4:
	or	esi, -1
$LN54@sqcurve_me@4:

; 495  :   struct v_curve_t *vc;
; 496  :   REAL denom,f;
; 497  :   REAL area; /* curvature normalization area */
; 498  :   struct method_instance *mi = METH_INSTANCE(v_info->method);

	mov	eax, DWORD PTR [ecx+8]

; 499  : 
; 500  :   /* kludge check here, needed for info_only individual attributes */
; 501  :   if ( sqcurve_init_timestamp < global_timestamp ) 

	mov	ecx, DWORD PTR _sqcurve_init_timestamp
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list
	mov	DWORD PTR _mi$[ebp], eax
	cmp	ecx, DWORD PTR _global_timestamp
	jge	SHORT $LN50@sqcurve_me@4

; 502  :     sqcurve_method_init(METHOD_VALUE,mi);

	mov	edx, eax
	push	edx
	push	1767					; 000006e7H
	call	_sqcurve_method_init
	add	esp, 8
$LN50@sqcurve_me@4:

; 503  : 
; 504  :   if ( v_curve == NULL )

	cmp	DWORD PTR _v_curve, 0
	jne	SHORT $LN49@sqcurve_me@4

; 505  :     sqcurve_method_init(METHOD_VALUE,NULL);

	push	0
	push	1767					; 000006e7H
	call	_sqcurve_method_init
	add	esp, 8
$LN49@sqcurve_me@4:

; 506  : 
; 507  :   vc = v_curve + ordv;
; 508  :   if ((attr & BOUNDARY) && !(mi->flags & IGNORE_CONSTR))

	mov	edx, DWORD PTR _mi$[ebp]
	imul	esi, 544				; 00000220H
	add	esi, DWORD PTR _v_curve
	mov	eax, ebx
	and	eax, 128				; 00000080H
	xor	ecx, ecx
	or	eax, ecx
	mov	DWORD PTR _vc$[ebp], esi
	je	SHORT $LN48@sqcurve_me@4
	test	DWORD PTR [edx+140], 33554432		; 02000000H
	jne	SHORT $LN48@sqcurve_me@4
$LN153@sqcurve_me@4:

; 509  :      return 0.0;

	fldz
	pop	edi
	pop	esi
	pop	ebx

; 614  : } // end sqcurve_method_value()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN48@sqcurve_me@4:

; 510  :   if ((attr & FIXED) && !(mi->flags & IGNORE_FIXED))

	mov	eax, ebx
	and	eax, 64					; 00000040H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN47@sqcurve_me@4
	test	DWORD PTR [edx+140], 134217728		; 08000000H

; 511  :      return 0.0;

	je	SHORT $LN153@sqcurve_me@4
$LN47@sqcurve_me@4:

; 512  :   if ( vc->area == 0.0 ) return 0.0;

	fld	QWORD PTR [esi]
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jnp	$LN51@sqcurve_me@4

; 513  : 
; 514  :   if ( mi->gen_method != sq_mean_curvature_mi )

	mov	eax, DWORD PTR [edx+148]
	fstp	ST(0)
	cmp	eax, DWORD PTR _sq_mean_curvature_mi
	je	$LN42@sqcurve_me@4

; 515  :   { /* need to check facet orientation consistency */
; 516  :     edge_id eid,starteid;
; 517  :     eid = starteid = get_vertex_edge(v_id);

	mov	ecx, DWORD PTR _web+12
	mov	edx, DWORD PTR [ecx+edi*4]
	mov	edx, DWORD PTR [edx+28]
	mov	eax, edx
	or	eax, 134217728				; 08000000H
	mov	DWORD PTR tv1020[ebp], eax
	mov	eax, DWORD PTR _web+460
	mov	DWORD PTR _eid$89510[ebp], edx
	npad	10
$LL44@sqcurve_me@4:

; 518  :     do
; 519  :     { facetedge_id fa,fb;
; 520  :       fa = get_edge_fe(eid);

	mov	esi, DWORD PTR _web+124
	mov	ecx, edx
	and	ecx, 134217727				; 07ffffffH
	mov	DWORD PTR tv941[ebp], ecx
	mov	ecx, DWORD PTR [esi+ecx*4]
	test	ecx, ecx
	je	SHORT $LN63@sqcurve_me@4
$LN64@sqcurve_me@4:
	mov	ecx, DWORD PTR [ecx+28]
	test	edx, 134217728				; 08000000H
	je	SHORT $LN63@sqcurve_me@4
	xor	ecx, 134217728				; 08000000H
$LN63@sqcurve_me@4:

; 521  :       fb = get_next_facet(fa);

	mov	ebx, ecx
	shr	ebx, 27					; 0000001bH
	and	ebx, 1
	mov	DWORD PTR tv955[ebp], ebx
	mov	edi, ecx
	je	SHORT $LN68@sqcurve_me@4
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	edx, DWORD PTR [edi+eax]
	mov	esi, DWORD PTR [edx+36]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN67@sqcurve_me@4
$LN68@sqcurve_me@4:
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	edx, DWORD PTR [edi+eax]
	mov	esi, DWORD PTR [edx+40]
$LN67@sqcurve_me@4:

; 522  :       if ( (fa != fb) && 
; 523  :                (inverted(get_fe_facet(fa))==inverted(get_fe_facet(fb))) )

	cmp	ecx, esi
	je	$LN115@sqcurve_me@4
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	mov	DWORD PTR tv971[ebp], ecx
	jne	SHORT $LN72@sqcurve_me@4
	mov	edx, DWORD PTR _NULLFACET
	jmp	SHORT $LN71@sqcurve_me@4
$LN72@sqcurve_me@4:
	mov	edx, DWORD PTR [edx+24]
	test	ebx, ebx
	je	SHORT $LN71@sqcurve_me@4
	xor	edx, 134217728				; 08000000H
$LN71@sqcurve_me@4:
	mov	ebx, esi
	shr	ebx, 28					; 0000001cH
	and	ebx, 1
	jne	SHORT $LN76@sqcurve_me@4
	mov	ecx, DWORD PTR _NULLFACET
	jmp	SHORT $LN75@sqcurve_me@4
$LN76@sqcurve_me@4:
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [ecx+24]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN75@sqcurve_me@4
	xor	ecx, 134217728				; 08000000H
$LN75@sqcurve_me@4:
	xor	ecx, edx
	test	ecx, 134217728				; 08000000H
	jne	$LN115@sqcurve_me@4

; 524  :       { sprintf(errmsg,
; 525  :            "Inconsistent orientation of \nfacets %s and %s at vertex %s.\n",
; 526  :             ELNAME(get_fe_facet(fa)),ELNAME1(get_fe_facet(fb)),
; 527  :                ELNAME(eid));

	test	DWORD PTR _eid$89510[ebp], 268435456	; 10000000H
	je	SHORT $LN55@sqcurve_me@4
	mov	edx, DWORD PTR tv941[ebp]
	inc	edx
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	mov	eax, DWORD PTR _web+460
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv160[ebp], OFFSET _elnames
	jmp	SHORT $LN56@sqcurve_me@4
$LN55@sqcurve_me@4:
	mov	DWORD PTR tv160[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN56@sqcurve_me@4:
	test	ebx, ebx
	jne	SHORT $LN80@sqcurve_me@4
	mov	ecx, DWORD PTR _NULLFACET
	jmp	SHORT $LN79@sqcurve_me@4
$LN80@sqcurve_me@4:
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [edx+24]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN79@sqcurve_me@4
	xor	ecx, 134217728				; 08000000H
$LN79@sqcurve_me@4:
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN57@sqcurve_me@4
	test	ebx, ebx
	jne	SHORT $LN84@sqcurve_me@4
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN83@sqcurve_me@4
$LN84@sqcurve_me@4:
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [edx+24]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN83@sqcurve_me@4
	xor	eax, 134217728				; 08000000H
$LN83@sqcurve_me@4:
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames+30
	call	_sprintf
	mov	eax, DWORD PTR _web+460
	add	esp, 12					; 0000000cH
	mov	esi, OFFSET _elnames+30
	jmp	SHORT $LN58@sqcurve_me@4
$LN57@sqcurve_me@4:
	mov	esi, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN58@sqcurve_me@4:
	mov	edx, DWORD PTR tv971[ebp]
	test	edx, edx
	jne	SHORT $LN88@sqcurve_me@4
	mov	ecx, DWORD PTR _NULLFACET
	jmp	SHORT $LN112@sqcurve_me@4
$LN88@sqcurve_me@4:
	cmp	DWORD PTR tv955[ebp], 0
	mov	ecx, DWORD PTR [edi+eax]
	mov	ecx, DWORD PTR [ecx+24]
	je	SHORT $LN112@sqcurve_me@4
	xor	ecx, 134217728				; 08000000H
$LN112@sqcurve_me@4:
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN59@sqcurve_me@4
	test	edx, edx
	jne	SHORT $LN92@sqcurve_me@4
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN91@sqcurve_me@4
$LN92@sqcurve_me@4:
	cmp	DWORD PTR tv955[ebp], 0
	mov	edx, DWORD PTR [edi+eax]
	mov	eax, DWORD PTR [edx+24]
	je	SHORT $LN91@sqcurve_me@4
	xor	eax, 134217728				; 08000000H
$LN91@sqcurve_me@4:
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN60@sqcurve_me@4
$LN59@sqcurve_me@4:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN60@sqcurve_me@4:
	mov	ecx, DWORD PTR tv160[ebp]
	push	ecx
	push	esi
	push	eax
	push	OFFSET ??_C@_0DN@KCGNEO@Inconsistent?5orientation?5of?5?6fac@
	push	OFFSET _errmsg
	call	_sprintf

; 528  :         strcat(errmsg,"eff_area_sq_mean_curvature and normal_sq_mean_curvature need consistency.\n"); 

	mov	edi, OFFSET _errmsg
	add	esp, 20					; 00000014H
	dec	edi
$LL104@sqcurve_me@4:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL104@sqcurve_me@4
	mov	ecx, 18					; 00000012H
	mov	esi, OFFSET ??_C@_0EL@DJKAIEPH@eff_area_sq_mean_curvature?5and?5n@
	rep movsd
	movsw

; 529  :         kb_error(2183,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2183					; 00000887H
	movsb
	call	_kb_error
	mov	eax, DWORD PTR _web+460
	add	esp, 12					; 0000000cH
$LN115@sqcurve_me@4:

; 530  :       }
; 531  :       eid = get_next_tail_edge(eid); 

	mov	edx, DWORD PTR _eid$89510[ebp]
	mov	ecx, DWORD PTR tv941[ebp]
	mov	esi, DWORD PTR _web+124
	mov	ecx, DWORD PTR [esi+ecx*4]
	shr	edx, 27					; 0000001bH
	and	edx, 1
	mov	edx, DWORD PTR [ecx+edx*4+32]

; 532  :     } while ( !equal_element(eid,starteid) );

	mov	ecx, edx
	or	ecx, 134217728				; 08000000H
	mov	DWORD PTR _eid$89510[ebp], edx
	cmp	ecx, DWORD PTR tv1020[ebp]
	jne	$LL44@sqcurve_me@4
	mov	ebx, DWORD PTR _attr$[ebp]
	mov	esi, DWORD PTR _vc$[ebp]
$LN42@sqcurve_me@4:

; 533  :   }
; 534  : 
; 535  :   if ( !boundary_curvature_flag )

	cmp	DWORD PTR _boundary_curvature_flag, 0

; 536  :   { vc->a = vc->area; area = vc->area/3; } 

	fld	QWORD PTR [esi]
	jne	SHORT $LN40@sqcurve_me@4
	fstp	QWORD PTR [esi+8]
	fld	QWORD PTR [esi]
$LN40@sqcurve_me@4:

; 537  :   else { area = vc->area/3; }

	fdiv	QWORD PTR __real@4008000000000000

; 538  :   if ( (attr & CONSTRAINT) && !(mi->flags & IGNORE_CONSTR) )

	and	ebx, 1024				; 00000400H
	mov	eax, ebx
	xor	ecx, ecx
	or	eax, ecx
	fstp	QWORD PTR _area$[ebp]
	je	$LN105@sqcurve_me@4
	mov	edx, DWORD PTR _mi$[ebp]
	test	DWORD PTR [edx+140], 33554432		; 02000000H
	jne	$LN105@sqcurve_me@4

; 539  :   { conmap_t * conmap = get_v_constraint_map(v_id);

	mov	ebx, DWORD PTR _web+104
	mov	eax, DWORD PTR _dymem
	cmp	DWORD PTR [ebx+eax+1288], ecx
	je	SHORT $LN61@sqcurve_me@4
	mov	ecx, DWORD PTR _web+12
	mov	edx, DWORD PTR tv899[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	add	ecx, DWORD PTR [ebx+eax+1264]
	jmp	SHORT $LN62@sqcurve_me@4
$LN61@sqcurve_me@4:
	mov	ecx, OFFSET _nullcon
$LN62@sqcurve_me@4:

; 540  :     int j,oncount = 0;
; 541  :     struct constraint *con[MAXCONHIT];
; 542  :     REAL perp[MAXCOORD];
; 543  : 
; 544  :     for ( j = 1 ; j <= (int)conmap[0] ; j++ )

	mov	edx, 1
	xor	esi, esi
	cmp	DWORD PTR [ecx], edx
	jl	SHORT $LN35@sqcurve_me@4
	mov	edi, DWORD PTR _web+652
$LL37@sqcurve_me@4:

; 545  :       if ( (conmap[j] & CON_HIT_BIT) && (oncount < web.sdim) )

	mov	eax, DWORD PTR [ecx+edx*4]
	test	eax, eax
	jns	SHORT $LN36@sqcurve_me@4
	cmp	esi, DWORD PTR _web+616
	jge	SHORT $LN36@sqcurve_me@4

; 546  :          con[oncount++] = get_constraint(conmap[j]);

	and	eax, 1073741823				; 3fffffffH
	imul	eax, 176				; 000000b0H
	add	eax, edi
	mov	DWORD PTR _con$89543[ebp+esi*4], eax
	inc	esi
$LN36@sqcurve_me@4:

; 540  :     int j,oncount = 0;
; 541  :     struct constraint *con[MAXCONHIT];
; 542  :     REAL perp[MAXCOORD];
; 543  : 
; 544  :     for ( j = 1 ; j <= (int)conmap[0] ; j++ )

	inc	edx
	cmp	edx, DWORD PTR [ecx]
	jle	SHORT $LL37@sqcurve_me@4
$LN35@sqcurve_me@4:

; 547  : 
; 548  :     constr_proj(TANGPROJ,oncount,con,get_coord(v_id),
; 549  :                         vc->force,perp,NULL,NO_DETECT,v_id);

	mov	eax, DWORD PTR _v_id$[ebp]
	mov	edx, DWORD PTR _web+12
	mov	edi, DWORD PTR _vc$[ebp]
	push	eax
	mov	eax, DWORD PTR tv899[ebp]
	push	0
	push	0
	lea	ecx, DWORD PTR _perp$89544[ebp]
	push	ecx
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	add	ecx, DWORD PTR [ebx+edx+64]
	add	edi, 16					; 00000010H
	push	edi
	push	ecx
	lea	eax, DWORD PTR _con$89543[ebp]
	push	eax
	push	esi
	push	2
	call	_constr_proj

; 550  :     for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	add	esp, 36					; 00000024H
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN110@sqcurve_me@4

; 547  : 
; 548  :     constr_proj(TANGPROJ,oncount,con,get_coord(v_id),
; 549  :                         vc->force,perp,NULL,NO_DETECT,v_id);

	mov	ecx, edi
$LL33@sqcurve_me@4:

; 551  :        vc->force[j] -= perp[j];

	fld	QWORD PTR [ecx]
	inc	eax
	fsub	QWORD PTR _perp$89544[ebp+eax*8-8]
	add	ecx, 8
	fstp	QWORD PTR [ecx-8]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LL33@sqcurve_me@4
$LN110@sqcurve_me@4:

; 552  : 
; 553  :     constr_proj(TANGPROJ,oncount,con,get_coord(v_id),
; 554  :                                  vc->normal,perp,NULL,NO_DETECT,v_id);

	mov	ecx, DWORD PTR _v_id$[ebp]
	mov	eax, DWORD PTR _web+12
	mov	ebx, DWORD PTR _vc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv899[ebp]
	push	0
	push	0
	lea	edx, DWORD PTR _perp$89544[ebp]
	push	edx
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _web+104
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+64]
	lea	edi, DWORD PTR [ebx+416]
	push	edi
	push	edx
	lea	edx, DWORD PTR _con$89543[ebp]
	push	edx
	push	esi
	push	2
	call	_constr_proj

; 555  :     for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR _web+616
	add	esp, 36					; 00000024H
	xor	ecx, ecx
	test	eax, eax
	jle	SHORT $LN106@sqcurve_me@4

; 552  : 
; 553  :     constr_proj(TANGPROJ,oncount,con,get_coord(v_id),
; 554  :                                  vc->normal,perp,NULL,NO_DETECT,v_id);

	mov	edx, edi
$LL30@sqcurve_me@4:

; 556  :                   vc->normal[j] -= perp[j];

	fld	QWORD PTR [edx]
	inc	ecx
	fsub	QWORD PTR _perp$89544[ebp+ecx*8-8]
	add	edx, 8
	fstp	QWORD PTR [edx-8]
	mov	eax, DWORD PTR _web+616
	cmp	ecx, eax
	jl	SHORT $LL30@sqcurve_me@4

; 555  :     for ( j = 0 ; j < SDIM ; j++ )

	jmp	SHORT $LN106@sqcurve_me@4
$LN105@sqcurve_me@4:
	mov	eax, DWORD PTR _web+616
	mov	ebx, DWORD PTR _vc$[ebp]
$LN106@sqcurve_me@4:

; 557  :   }
; 558  :   if ( mi->gen_method == normal_sq_mean_curvature_mi )

	mov	ecx, DWORD PTR _mi$[ebp]
	mov	ecx, DWORD PTR [ecx+148]

; 559  :   { f = SDIM_dot(vc->force,vc->force);

	push	eax
	cmp	ecx, DWORD PTR _normal_sq_mean_curvature_mi
	jne	$LN27@sqcurve_me@4
	lea	esi, DWORD PTR [ebx+16]
	push	esi
	push	esi
	call	_dot
	fstp	QWORD PTR _f$[ebp]

; 560  :     denom = SDIM_dot(vc->force,vc->normal);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR [ebx+416]
	push	eax
	push	esi
	call	_dot

; 561  :     if ( denom == 0.0 )  h = 0.0;

	fld	ST(0)
	fldz
	add	esp, 24					; 00000018H
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	SHORT $LN120@sqcurve_me@4
	fstp	ST(1)
	jmp	SHORT $LN25@sqcurve_me@4
$LN120@sqcurve_me@4:
	fstp	ST(0)

; 562  :     else h = 3*f/denom;  /* mean, and  normal was twice area */

	fld	QWORD PTR _f$[ebp]
	fmul	QWORD PTR __real@4008000000000000
	fdivrp	ST(1), ST(0)
$LN25@sqcurve_me@4:

; 563  :     switch ( h0_flag )

	mov	eax, DWORD PTR _h0_flag
	dec	eax
	je	$LN14@sqcurve_me@4
	dec	eax
	jne	$LN15@sqcurve_me@4

; 564  :     { case H0_IN_GLOBAL: h -= h0_value; break;
; 565  :       case H0_IN_ATTR:   h -= *VREAL(v_id,h0_attr); break;

	mov	ecx, DWORD PTR _h0_attr
	mov	edx, DWORD PTR _dymem
	imul	ecx, 240				; 000000f0H
	add	ecx, DWORD PTR _web+104
	mov	eax, DWORD PTR [ecx+edx+64]
	mov	ecx, DWORD PTR _web+12
	mov	edx, DWORD PTR tv899[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	fsub	QWORD PTR [eax+ecx]

; 584  :      }
; 585  :      venergy = h*h;

	fmul	ST(0), ST(0)
	jmp	$LN1@sqcurve_me@4
$LN27@sqcurve_me@4:

; 566  :     }
; 567  :     venergy = h*h;
; 568  :   }
; 569  :   else 
; 570  :    if ( mi->gen_method == mix_sq_mean_curvature_mi )

	cmp	ecx, DWORD PTR _mix_sq_mean_curvature_mi
	jne	$LN19@sqcurve_me@4

; 571  :    { /* normal_sq_mean part */
; 572  :      f = SDIM_dot(vc->force,vc->force);

	lea	edi, DWORD PTR [ebx+16]
	push	edi
	push	edi
	call	_dot
	fstp	QWORD PTR _f$[ebp]

; 573  :      denom = SDIM_dot(vc->force,vc->normal);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	esi, DWORD PTR [ebx+416]
	push	esi
	push	edi
	call	_dot

; 574  :      if ( denom == 0.0 )  h = 0.0;

	fld	ST(0)
	fldz
	add	esp, 24					; 00000018H
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	SHORT $LN131@sqcurve_me@4
	fstp	ST(1)
	jmp	SHORT $LN152@sqcurve_me@4
$LN131@sqcurve_me@4:
	fstp	ST(0)

; 575  :      else h = 3*f/denom;  /* mean, and  normal was twice area */

	fld	QWORD PTR _f$[ebp]
	fmul	QWORD PTR __real@4008000000000000
	fdivrp	ST(1), ST(0)
$LN152@sqcurve_me@4:

; 576  : 
; 577  :      /* add other part */
; 578  :      vc->h = h = h*sq_mean_mix + SDIM_dot(vc->force,vc->normal)/
; 579  :                           SDIM_dot(vc->normal,vc->normal)*3*(1-sq_mean_mix);

	mov	eax, DWORD PTR _web+616
	fstp	QWORD PTR _h$[ebp]
	push	eax
	push	esi
	push	edi
	call	_dot
	fstp	QWORD PTR tv1190[ebp]
	mov	ecx, DWORD PTR _web+616
	push	ecx
	push	esi
	push	esi
	call	_dot
	fdivr	QWORD PTR tv1190[ebp]

; 580  : 
; 581  :      switch ( h0_flag )

	mov	eax, DWORD PTR _h0_flag
	add	esp, 24					; 00000018H
	dec	eax
	fmul	QWORD PTR __real@4008000000000000
	fld1
	fld	QWORD PTR _sq_mean_mix
	fsub	ST(1), ST(0)
	fxch	ST(2)
	fmulp	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR _h$[ebp]
	faddp	ST(1), ST(0)
	fst	QWORD PTR [ebx+72]
	je	SHORT $LN14@sqcurve_me@4
	dec	eax
	jne	SHORT $LN15@sqcurve_me@4

; 583  :        case H0_IN_ATTR:   h -= *VREAL(v_id,h0_attr); break;

	mov	edx, DWORD PTR _h0_attr
	mov	eax, DWORD PTR _dymem
	imul	edx, 240				; 000000f0H
	add	edx, DWORD PTR _web+104
	mov	ecx, DWORD PTR [edx+eax+64]
	mov	edx, DWORD PTR _web+12
	mov	eax, DWORD PTR tv899[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	fsub	QWORD PTR [ecx+edx]

; 584  :      }
; 585  :      venergy = h*h;

	fmul	ST(0), ST(0)
	jmp	$LN1@sqcurve_me@4
$LN14@sqcurve_me@4:

; 582  :      { case H0_IN_GLOBAL: h -= h0_value; break;

	fsub	QWORD PTR _h0_value
$LN15@sqcurve_me@4:

; 584  :      }
; 585  :      venergy = h*h;

	fmul	ST(0), ST(0)
	jmp	$LN1@sqcurve_me@4
$LN19@sqcurve_me@4:

; 586  :    }
; 587  :    else if ( h0_flag )

	cmp	DWORD PTR _h0_flag, 0
	je	$LN11@sqcurve_me@4

; 588  :    { REAL term=0.0,sim;

	fldz

; 589  :      vc->h = h = SDIM_dot(vc->force,vc->normal)/
; 590  :                           SDIM_dot(vc->normal,vc->normal)*3;

	lea	esi, DWORD PTR [ebx+416]
	lea	eax, DWORD PTR [ebx+16]
	fstp	QWORD PTR _term$89599[ebp]
	push	esi
	push	eax
	call	_dot
	fstp	QWORD PTR tv1192[ebp]
	mov	ecx, DWORD PTR _web+616
	push	ecx
	push	esi
	push	esi
	call	_dot
	fdivr	QWORD PTR tv1192[ebp]

; 591  :                             /* since vc->normal = 6*volgrad */
; 592  :      switch ( h0_flag )

	mov	eax, DWORD PTR _h0_flag
	add	esp, 24					; 00000018H
	dec	eax
	fmul	QWORD PTR __real@4008000000000000
	fst	QWORD PTR [ebx+72]
	mov	ecx, DWORD PTR _web+104
	mov	edx, DWORD PTR _web+12
	mov	edi, DWORD PTR _dymem
	je	SHORT $LN8@sqcurve_me@4
	dec	eax
	jne	SHORT $LN143@sqcurve_me@4

; 594  :        case H0_IN_ATTR:   term = h - *VREAL(v_id,h0_attr); break;

	mov	eax, DWORD PTR _h0_attr
	mov	ebx, DWORD PTR tv899[ebp]
	imul	eax, 240				; 000000f0H
	mov	ebx, DWORD PTR [edx+ebx*4]
	add	eax, ecx
	mov	eax, DWORD PTR [eax+edi+64]
	fsub	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR _vc$[ebp]
	fst	QWORD PTR _term$89599[ebp]
	jmp	SHORT $LN9@sqcurve_me@4
$LN8@sqcurve_me@4:

; 593  :      { case H0_IN_GLOBAL: term = h - h0_value; break;

	fsub	QWORD PTR _h0_value
	fst	QWORD PTR _term$89599[ebp]
	jmp	SHORT $LN9@sqcurve_me@4
$LN143@sqcurve_me@4:

; 591  :                             /* since vc->normal = 6*volgrad */
; 592  :      switch ( h0_flag )

	fstp	ST(0)

; 593  :      { case H0_IN_GLOBAL: term = h - h0_value; break;

	fld	QWORD PTR _term$89599[ebp]
$LN9@sqcurve_me@4:

; 595  :      }
; 596  :      if ( self_similar_flag )

	cmp	DWORD PTR _self_similar_flag, 0
	je	SHORT $LN6@sqcurve_me@4

; 597  :      { vc->vol = SDIM_dot(get_coord(v_id),vc->normal);

	mov	eax, DWORD PTR _web+616
	fstp	ST(0)
	push	eax
	mov	eax, DWORD PTR tv899[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	add	edx, DWORD PTR [ecx+edi+64]
	push	esi
	push	edx
	call	_dot
	fst	QWORD PTR [ebx+520]

; 598  :        sim = selfsim_coeff*vc->vol;

	fmul	QWORD PTR _selfsim_coeff
	add	esp, 12					; 0000000cH

; 599  :        term -= sim;

	fsubr	QWORD PTR _term$89599[ebp]
$LN6@sqcurve_me@4:

; 600  :      }
; 601  :      venergy = term*term;

	fmul	ST(0), ST(0)
	jmp	SHORT $LN1@sqcurve_me@4
$LN11@sqcurve_me@4:

; 602  :    }
; 603  :    else if ( mi->gen_method == eff_area_sq_mean_curvature_mi )

	cmp	ecx, DWORD PTR _eff_area_sq_mean_curvature_mi

; 604  :    { f = SDIM_dot(vc->force,vc->force);

	lea	ecx, DWORD PTR [ebx+16]
	push	ecx
	push	ecx
	jne	SHORT $LN4@sqcurve_me@4
	call	_dot
	fstp	QWORD PTR _f$[ebp]

; 605  :      denom = SDIM_dot(vc->normal,vc->normal);

	mov	ecx, DWORD PTR _web+616
	lea	eax, DWORD PTR [ebx+416]
	push	ecx
	push	eax
	push	eax
	call	_dot

; 606  :      if ( denom == 0.0 ) venergy = 0.0;

	fld	ST(0)
	fldz
	add	esp, 24					; 00000018H
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	SHORT $LN150@sqcurve_me@4
	fstp	ST(1)

; 607  :      else

	jmp	SHORT $LN1@sqcurve_me@4
$LN150@sqcurve_me@4:

; 606  :      if ( denom == 0.0 ) venergy = 0.0;

	fstp	ST(0)

; 608  :         venergy = 9*f/denom;  /* 9 = 36/4 */

	fld	QWORD PTR _f$[ebp]
	fmul	QWORD PTR __real@4022000000000000
	fdivrp	ST(1), ST(0)

; 609  :    }
; 610  :    else /* plain squared curvature */

	jmp	SHORT $LN1@sqcurve_me@4
$LN4@sqcurve_me@4:

; 611  :      venergy = SDIM_dot(vc->force,vc->force)/area/area/4;

	call	_dot
	fld	QWORD PTR _area$[ebp]
	fdiv	ST(1), ST(0)
	add	esp, 12					; 0000000cH
	fdivp	ST(1), ST(0)
	fmul	QWORD PTR __real@3fd0000000000000
$LN1@sqcurve_me@4:

; 612  : 
; 613  :    return venergy*vc->a/3;

	fmul	QWORD PTR [ebx+8]
	fdiv	QWORD PTR __real@4008000000000000
$LN51@sqcurve_me@4:

; 614  : } // end sqcurve_method_value()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_sqcurve_method_value ENDP
_TEXT	ENDS
END
