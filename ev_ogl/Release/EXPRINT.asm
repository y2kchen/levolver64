; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\EXPRINT.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_current_proc_locals:DWORD:064H
COMM	_current_proc_depth:DWORD
_DATA	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_03CHHAMGLO@?5?1?$DN?$AA@			; `string'
PUBLIC	??_C@_03CBLLAEFF@?5?$CK?$DN?$AA@		; `string'
PUBLIC	??_C@_03CEPEBCNA@?5?9?$DN?$AA@			; `string'
PUBLIC	??_C@_03CAHJGOGC@?5?$CL?$DN?$AA@		; `string'
PUBLIC	??_C@_03DNJNKHCF@?5?3?$DN?$AA@			; `string'
PUBLIC	_assign_symbol
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\exprint.c
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03CHHAMGLO@?5?1?$DN?$AA@
CONST	SEGMENT
??_C@_03CHHAMGLO@?5?1?$DN?$AA@ DB ' /=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CBLLAEFF@?5?$CK?$DN?$AA@
CONST	SEGMENT
??_C@_03CBLLAEFF@?5?$CK?$DN?$AA@ DB ' *=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CEPEBCNA@?5?9?$DN?$AA@
CONST	SEGMENT
??_C@_03CEPEBCNA@?5?9?$DN?$AA@ DB ' -=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CAHJGOGC@?5?$CL?$DN?$AA@
CONST	SEGMENT
??_C@_03CAHJGOGC@?5?$CL?$DN?$AA@ DB ' +=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DNJNKHCF@?5?3?$DN?$AA@
CONST	SEGMENT
??_C@_03DNJNKHCF@?5?3?$DN?$AA@ DB ' :=', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _assign_symbol
_TEXT	SEGMENT
_sym$ = 8						; size = 4
_assign_symbol PROC					; COMDAT

; 34   : { switch ( sym )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _sym$[ebp]
	add	eax, -30001				; ffff8acfH
	cmp	eax, 4
	ja	SHORT $LN6@assign_sym
	jmp	DWORD PTR $LN10@assign_sym[eax*4]
$LN5@assign_sym:

; 35   :   { case ASSIGN_OP: return " :="; 

	mov	eax, OFFSET ??_C@_03DNJNKHCF@?5?3?$DN?$AA@

; 42   : } // end assign_symbol()

	pop	ebp
	ret	0
$LN4@assign_sym:

; 36   :     case PLUSASSIGN_OP: return " +=";

	mov	eax, OFFSET ??_C@_03CAHJGOGC@?5?$CL?$DN?$AA@

; 42   : } // end assign_symbol()

	pop	ebp
	ret	0
$LN3@assign_sym:

; 37   :     case SUBASSIGN_OP: return " -="; 

	mov	eax, OFFSET ??_C@_03CEPEBCNA@?5?9?$DN?$AA@

; 42   : } // end assign_symbol()

	pop	ebp
	ret	0
$LN2@assign_sym:

; 38   :     case MULTASSIGN_OP: return " *=";

	mov	eax, OFFSET ??_C@_03CBLLAEFF@?5?$CK?$DN?$AA@

; 42   : } // end assign_symbol()

	pop	ebp
	ret	0
$LN1@assign_sym:

; 39   :     case DIVASSIGN_OP: return " /=";

	mov	eax, OFFSET ??_C@_03CHHAMGLO@?5?1?$DN?$AA@

; 42   : } // end assign_symbol()

	pop	ebp
	ret	0
$LN6@assign_sym:

; 40   :   }
; 41   :   return ""; 

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@

; 42   : } // end assign_symbol()

	pop	ebp
	ret	0
	npad	3
$LN10@assign_sym:
	DD	$LN5@assign_sym
	DD	$LN4@assign_sym
	DD	$LN3@assign_sym
	DD	$LN2@assign_sym
	DD	$LN1@assign_sym
_assign_symbol ENDP
_TEXT	ENDS
PUBLIC	_linebreak
EXTRN	_kb_memmove:PROC
EXTRN	_isalpha:PROC
EXTRN	_memset:PROC
_BSS	SEGMENT
_bracket_depth DD 01H DUP (?)
_linestart DD	01H DUP (?)
_pos	DD	01H DUP (?)
; Function compile flags: /Ogtp
_BSS	ENDS
;	COMDAT _linebreak
_TEXT	SEGMENT
tv401 = -12						; size = 4
_extra_indent$ = -8					; size = 4
_cc$ = -4						; size = 4
_linebreak PROC						; COMDAT

; 142  : { int i;

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 143  :   char *c,*cc;
; 144  :   char *minline = linestart + MINLEN;
; 145  :   int extra_indent = 0;
; 146  : 
; 147  :   if ( pos - linestart < GOODLEN ) return;

	mov	eax, DWORD PTR _pos
	mov	ecx, DWORD PTR _linestart
	mov	edx, eax
	sub	edx, ecx
	push	edi
	lea	edi, DWORD PTR [ecx+30]
	mov	DWORD PTR _extra_indent$[ebp], 0
	cmp	edx, 75					; 0000004bH
	jl	$LN5@linebreak

; 148  : 
; 149  :   cc = NULL;

	push	ebx
	xor	ebx, ebx

; 150  :  
; 151  :   /* search for end of quote, starting at end so don't break quote */
; 152  :   for ( c = pos-1 ; c != linestart ; c-- )

	dec	eax
	push	esi
	mov	DWORD PTR _cc$[ebp], ebx
	cmp	eax, ecx
	je	SHORT $LN137@linebreak
$LL83@linebreak:

; 153  :       if ( *c == '"' ) 

	cmp	BYTE PTR [eax], 34			; 00000022H
	je	SHORT $LN107@linebreak

; 150  :  
; 151  :   /* search for end of quote, starting at end so don't break quote */
; 152  :   for ( c = pos-1 ; c != linestart ; c-- )

	dec	eax
	cmp	eax, ecx
	jne	SHORT $LL83@linebreak

; 195  :        if ( *c == '(' ) { cc = c; break; }

	jmp	SHORT $LN137@linebreak
$LN107@linebreak:

; 154  :       { cc = (c[1] == ';' || c[1] == ',') ? c+1 : c; 

	mov	cl, BYTE PTR [eax+1]
	lea	edx, DWORD PTR [eax+1]
	cmp	cl, 59					; 0000003bH
	je	SHORT $LN87@linebreak
	cmp	cl, 44					; 0000002cH
	je	SHORT $LN87@linebreak
	mov	ebx, eax
	mov	DWORD PTR _cc$[ebp], ebx
	jmp	SHORT $LN88@linebreak
$LN87@linebreak:
	mov	ebx, edx
	mov	DWORD PTR _cc$[ebp], edx
$LN88@linebreak:

; 155  :         if ( c[1] == ',' ) extra_indent = 2;

	cmp	cl, 44					; 0000002cH
	jne	SHORT $LN79@linebreak
	mov	DWORD PTR _extra_indent$[ebp], 2
$LN79@linebreak:

; 156  :         break; 
; 157  :       } 
; 158  : 
; 159  :   if ( cc == NULL ) /* search for end bracket */

	test	ebx, ebx
	jne	$LN151@linebreak
$LN137@linebreak:

; 160  :      for ( c = linestart + GOODLEN ; c != minline ; c-- )

	mov	esi, DWORD PTR _linestart
	add	esi, 75					; 0000004bH
	mov	eax, esi
	cmp	eax, edi
	je	SHORT $LN150@linebreak
$LL77@linebreak:

; 161  :     if ( *c == '}' ) { cc = (c[1] == ';') ? c+1 : c; break; }

	cmp	BYTE PTR [eax], 125			; 0000007dH
	je	SHORT $LN108@linebreak

; 160  :      for ( c = linestart + GOODLEN ; c != minline ; c-- )

	dec	eax
	cmp	eax, edi
	jne	SHORT $LL77@linebreak

; 195  :        if ( *c == '(' ) { cc = c; break; }

	jmp	SHORT $LN150@linebreak
$LN108@linebreak:

; 161  :     if ( *c == '}' ) { cc = (c[1] == ';') ? c+1 : c; break; }

	cmp	BYTE PTR [eax+1], 59			; 0000003bH
	lea	ecx, DWORD PTR [eax+1]
	jne	SHORT $LN89@linebreak
	mov	ebx, ecx
	mov	DWORD PTR _cc$[ebp], ebx
	jmp	SHORT $LN90@linebreak
$LN89@linebreak:
	mov	ebx, eax
	mov	DWORD PTR _cc$[ebp], eax
$LN90@linebreak:

; 162  :   if ( cc == NULL ) /* scan back for handy ';' */ 

	test	ebx, ebx
	jne	$LN151@linebreak
$LN150@linebreak:

; 163  :     for ( c = linestart + GOODLEN ; c != minline ; c-- )

	mov	eax, esi
	cmp	eax, edi
	je	SHORT $LN157@linebreak
	npad	1
$LL72@linebreak:

; 164  :      if ( *c == ';' ) { cc = c;  break; }

	cmp	BYTE PTR [eax], 59			; 0000003bH
	je	$LN109@linebreak

; 163  :     for ( c = linestart + GOODLEN ; c != minline ; c-- )

	dec	eax
	cmp	eax, edi
	jne	SHORT $LL72@linebreak
$LN157@linebreak:

; 166  :      for ( c = linestart + GOODLEN ; c != minline ; c-- )

	mov	eax, esi
	cmp	eax, edi
	je	SHORT $LN158@linebreak
$LL67@linebreak:

; 167  :        if ( *c == '{' ) { cc = c; break; }

	cmp	BYTE PTR [eax], 123			; 0000007bH
	je	$LN109@linebreak

; 166  :      for ( c = linestart + GOODLEN ; c != minline ; c-- )

	dec	eax
	cmp	eax, edi
	jne	SHORT $LL67@linebreak
$LN158@linebreak:

; 168  :   if ( cc == NULL ) extra_indent = 2;
; 169  :   if ( cc == NULL ) /* just look for space */
; 170  :      for ( c = linestart + GOODLEN ; c != minline ; c-- )

	mov	eax, esi
	mov	DWORD PTR _extra_indent$[ebp], 2
	cmp	eax, edi
	je	SHORT $LN159@linebreak
	npad	1
$LL61@linebreak:

; 171  :        if ( *c == ' ' ) { cc = c; break; }

	cmp	BYTE PTR [eax], 32			; 00000020H
	je	SHORT $LN109@linebreak

; 168  :   if ( cc == NULL ) extra_indent = 2;
; 169  :   if ( cc == NULL ) /* just look for space */
; 170  :      for ( c = linestart + GOODLEN ; c != minline ; c-- )

	dec	eax
	cmp	eax, edi
	jne	SHORT $LL61@linebreak
$LN159@linebreak:

; 172  :   if ( cc == NULL ) /* just look for comma */
; 173  :      for ( c = linestart + GOODLEN ; c != minline ; c-- )

	mov	eax, esi
	cmp	eax, edi
	je	SHORT $LN160@linebreak
$LL56@linebreak:

; 174  :        if ( *c == ',' ) { cc = c; break; }

	cmp	BYTE PTR [eax], 44			; 0000002cH
	je	SHORT $LN109@linebreak

; 172  :   if ( cc == NULL ) /* just look for comma */
; 173  :      for ( c = linestart + GOODLEN ; c != minline ; c-- )

	dec	eax
	cmp	eax, edi
	jne	SHORT $LL56@linebreak
$LN160@linebreak:

; 175  :   if ( cc == NULL ) /* just look for = */
; 176  :      for ( c = linestart + GOODLEN ; c != minline ; c-- )

	mov	eax, esi
	cmp	eax, edi
	je	SHORT $LN161@linebreak
$LL51@linebreak:

; 177  :        if ( *c == '=' ) { cc = c; break; }

	cmp	BYTE PTR [eax], 61			; 0000003dH
	je	SHORT $LN109@linebreak

; 175  :   if ( cc == NULL ) /* just look for = */
; 176  :      for ( c = linestart + GOODLEN ; c != minline ; c-- )

	dec	eax
	cmp	eax, edi
	jne	SHORT $LL51@linebreak
$LN161@linebreak:

; 178  :   if ( cc == NULL ) /* just look for logic signs */
; 179  :      for ( c = linestart + GOODLEN ; c != minline ; c-- )

	mov	eax, esi
	cmp	eax, edi
	je	SHORT $LN144@linebreak
$LL46@linebreak:

; 180  :        if ( (*c == '&') || (*c == '%') ) 

	mov	cl, BYTE PTR [eax]
	cmp	cl, 38					; 00000026H
	je	SHORT $LN109@linebreak
	cmp	cl, 37					; 00000025H
	je	SHORT $LN109@linebreak

; 178  :   if ( cc == NULL ) /* just look for logic signs */
; 179  :      for ( c = linestart + GOODLEN ; c != minline ; c-- )

	dec	eax
	cmp	eax, edi
	jne	SHORT $LL46@linebreak
$LN144@linebreak:

; 181  :           { cc = c; break; }
; 182  :   if ( cc == NULL ) /* just look for arithmetic signs */
; 183  :    for ( c = linestart + GOODLEN ; c != minline ; c-- )

	cmp	esi, edi
	je	SHORT $LN152@linebreak
$LL40@linebreak:

; 184  :     if ( ((*c == '+') || (*c == '-')) &&  !(isalpha(c[-1]) && !isalpha(c[-2]))) 

	mov	al, BYTE PTR [esi]
	cmp	al, 43					; 0000002bH
	je	SHORT $LN36@linebreak
	cmp	al, 45					; 0000002dH
	jne	SHORT $LN39@linebreak
$LN36@linebreak:
	movsx	eax, BYTE PTR [esi-1]
	push	eax
	call	_isalpha
	add	esp, 4
	test	eax, eax
	je	SHORT $LN115@linebreak
	movsx	ecx, BYTE PTR [esi-2]
	push	ecx
	call	_isalpha
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN115@linebreak
$LN39@linebreak:

; 181  :           { cc = c; break; }
; 182  :   if ( cc == NULL ) /* just look for arithmetic signs */
; 183  :    for ( c = linestart + GOODLEN ; c != minline ; c-- )

	dec	esi
	cmp	esi, edi
	jne	SHORT $LL40@linebreak

; 195  :        if ( *c == '(' ) { cc = c; break; }

	jmp	SHORT $LN152@linebreak
$LN109@linebreak:

; 164  :      if ( *c == ';' ) { cc = c;  break; }

	mov	ebx, eax

; 165  :   if ( cc == NULL ) /* just look for { */

	jmp	SHORT $LN164@linebreak
$LN115@linebreak:

; 185  :           { cc = c; break; }              /* don't split scientific notation */

	mov	ebx, esi
$LN164@linebreak:
	mov	DWORD PTR _cc$[ebp], ebx
$LN151@linebreak:

; 186  :   if ( (cc == NULL) || (cc - linestart < GOODLEN/2) )

	mov	esi, DWORD PTR _linestart
	mov	edx, ebx
	sub	edx, esi
	cmp	edx, 37					; 00000025H
	jge	SHORT $LN153@linebreak
$LN152@linebreak:

; 187  :      for ( c = linestart + GOODLEN ; c != minline ; c-- )

	mov	esi, DWORD PTR _linestart
	mov	edx, DWORD PTR _pos
	lea	eax, DWORD PTR [esi+75]
	cmp	eax, edi
	je	SHORT $LN156@linebreak
$LL32@linebreak:

; 188  :        if ( ((*c == '*') || (*c == '/')) && (c[1] != '=') && (c[1] != '*') ) 

	mov	cl, BYTE PTR [eax]
	cmp	cl, 42					; 0000002aH
	je	SHORT $LN28@linebreak
	cmp	cl, 47					; 0000002fH
	jne	SHORT $LN31@linebreak
$LN28@linebreak:
	mov	cl, BYTE PTR [eax+1]
	cmp	cl, 61					; 0000003dH
	je	SHORT $LN31@linebreak
	cmp	cl, 42					; 0000002aH
	jne	SHORT $LN116@linebreak
$LN31@linebreak:

; 187  :      for ( c = linestart + GOODLEN ; c != minline ; c-- )

	dec	eax
	cmp	eax, edi
	jne	SHORT $LL32@linebreak

; 195  :        if ( *c == '(' ) { cc = c; break; }

	jmp	SHORT $LN156@linebreak
$LN116@linebreak:

; 189  :          { cc = c; break; }

	mov	ebx, eax
	mov	DWORD PTR _cc$[ebp], ebx
	jmp	SHORT $LN156@linebreak
$LN153@linebreak:
	mov	edx, DWORD PTR _pos
$LN156@linebreak:

; 190  :   if ( cc == NULL ) /* just look for closing parenthesis */

	test	ebx, ebx
	jne	SHORT $LN19@linebreak

; 191  :      for ( c = linestart + GOODLEN ; c != minline ; c-- )

	lea	eax, DWORD PTR [esi+75]
	cmp	eax, edi
	je	SHORT $LN145@linebreak
	npad	5
$LL26@linebreak:

; 192  :        if ( *c == ')' ) { cc = c; break; }

	cmp	BYTE PTR [eax], 41			; 00000029H
	je	SHORT $LN118@linebreak

; 191  :      for ( c = linestart + GOODLEN ; c != minline ; c-- )

	dec	eax
	cmp	eax, edi
	jne	SHORT $LL26@linebreak
$LN145@linebreak:

; 193  :   if ( cc == NULL ) /* just look for opening parenthesis */
; 194  :      for ( c = linestart + GOODLEN ; c != minline ; c-- )

	lea	eax, DWORD PTR [esi+75]
	cmp	eax, edi
	je	SHORT $LN17@linebreak
$LL21@linebreak:

; 195  :        if ( *c == '(' ) { cc = c; break; }

	cmp	BYTE PTR [eax], 40			; 00000028H
	je	SHORT $LN118@linebreak

; 193  :   if ( cc == NULL ) /* just look for opening parenthesis */
; 194  :      for ( c = linestart + GOODLEN ; c != minline ; c-- )

	dec	eax
	cmp	eax, edi
	jne	SHORT $LL21@linebreak
$LN17@linebreak:

; 212  :   }
; 213  :   else
; 214  :   { if ( bracket_depth <= 0 ) *(pos++) = '\\';

	mov	eax, DWORD PTR _bracket_depth
	test	eax, eax
	jg	SHORT $LN4@linebreak
	mov	BYTE PTR [edx], 92			; 0000005cH
	inc	edx
$LN4@linebreak:

; 215  :     *(pos++) = '\n';

	inc	edx
	mov	BYTE PTR [edx-1], 10			; 0000000aH

; 216  :     linestart = pos;
; 217  :     for ( i = 0 ; i < INDENT*bracket_depth ; i++ ) *(pos++) = ' ';

	lea	esi, DWORD PTR [eax+eax]
	mov	DWORD PTR _pos, edx
	mov	DWORD PTR _linestart, edx
	test	esi, esi
	jle	SHORT $LN3@linebreak

; 215  :     *(pos++) = '\n';

	push	esi
	mov	edi, edx
	push	32					; 00000020H
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH

; 216  :     linestart = pos;
; 217  :     for ( i = 0 ; i < INDENT*bracket_depth ; i++ ) *(pos++) = ' ';

	add	edi, esi
	mov	DWORD PTR _pos, edi
	mov	edx, edi
$LN3@linebreak:

; 218  :     *pos = 0;

	pop	esi
	mov	BYTE PTR [edx], 0
	pop	ebx
$LN5@linebreak:
	pop	edi

; 219  :   }
; 220  : } // end linebreak()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN118@linebreak:

; 195  :        if ( *c == '(' ) { cc = c; break; }

	mov	DWORD PTR _cc$[ebp], eax
$LN19@linebreak:

; 196  :  
; 197  :   /* Have break, so do split, with *cc as last character on old line */
; 198  :   if ( cc ) 
; 199  :   { char *ch;
; 200  :     int bd = bracket_depth;
; 201  :     linestart = cc+3; 

	mov	ebx, DWORD PTR _cc$[ebp]

; 202  :      c = cc+1 ; while (*c == ' ' ) c++ ;  /* skip spaces */

	cmp	BYTE PTR [ebx+1], 32			; 00000020H
	mov	esi, DWORD PTR _bracket_depth
	lea	eax, DWORD PTR [ebx+3]
	lea	ecx, DWORD PTR [ebx+1]
	mov	DWORD PTR tv401[ebp], eax
	mov	DWORD PTR _linestart, eax
	jne	SHORT $LN148@linebreak
$LL16@linebreak:
	inc	ecx
	cmp	BYTE PTR [ecx], 32			; 00000020H
	je	SHORT $LL16@linebreak
$LN148@linebreak:

; 203  :      for ( ch = c ; ch < pos ; ch++ ) /* unwind bracket depth */

	mov	edi, DWORD PTR _pos
	mov	edx, ecx
	cmp	ecx, edi
	jae	SHORT $LN12@linebreak
$LL14@linebreak:

; 204  :        if ( *ch == '{' ) bd--;

	mov	al, BYTE PTR [edx]
	cmp	al, 123					; 0000007bH
	jne	SHORT $LN11@linebreak
	dec	esi
	jmp	SHORT $LN13@linebreak
$LN11@linebreak:

; 205  :        else if ( *ch == '}' ) bd++;

	cmp	al, 125					; 0000007dH
	jne	SHORT $LN13@linebreak
	inc	esi
$LN13@linebreak:

; 203  :      for ( ch = c ; ch < pos ; ch++ ) /* unwind bracket depth */

	inc	edx
	cmp	edx, edi
	jb	SHORT $LL14@linebreak
$LN12@linebreak:

; 206  :      pos = cc + 3 + INDENT*bd + extra_indent + strlen(c);

	mov	eax, ecx
	lea	edi, DWORD PTR [eax+1]
	npad	4
$LL146@linebreak:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL146@linebreak
	mov	edx, DWORD PTR _extra_indent$[ebp]
	sub	eax, edi
	lea	eax, DWORD PTR [eax+esi*2]
	add	eax, DWORD PTR _cc$[ebp]
	lea	eax, DWORD PTR [eax+edx+3]
	mov	DWORD PTR _pos, eax

; 207  :      kb_memmove(cc+3+INDENT*bd+extra_indent,c,strlen(c));

	mov	eax, ecx
	lea	edi, DWORD PTR [eax+1]
$LL147@linebreak:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL147@linebreak
	sub	eax, edi
	push	eax
	mov	eax, DWORD PTR _extra_indent$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _cc$[ebp]
	lea	edx, DWORD PTR [ecx+esi*2]
	lea	ecx, DWORD PTR [edx+eax+3]
	push	ecx
	call	_kb_memmove

; 208  :      cc[1] = (char)(bd ? ' ' : '\\');
; 209  :      cc[2] = '\n';

	mov	eax, DWORD PTR _cc$[ebp]

; 210  :      for ( i = 0 ; i < INDENT*bd + extra_indent ; i++ ) cc[i+3] = ' ';

	mov	ecx, DWORD PTR _extra_indent$[ebp]
	add	esp, 12					; 0000000cH
	mov	edx, esi
	neg	edx
	sbb	dl, dl
	and	dl, -60					; ffffffc4H
	mov	BYTE PTR [eax+2], 10			; 0000000aH
	add	dl, 92					; 0000005cH
	lea	eax, DWORD PTR [ecx+esi*2]
	mov	BYTE PTR [ebx+1], dl
	test	eax, eax
	jle	SHORT $LN8@linebreak

; 206  :      pos = cc + 3 + INDENT*bd + extra_indent + strlen(c);

	mov	edx, DWORD PTR tv401[ebp]
	push	eax
	push	32					; 00000020H
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
$LN8@linebreak:

; 211  :      *pos = 0;

	mov	eax, DWORD PTR _pos
	pop	esi
	pop	ebx
	mov	BYTE PTR [eax], 0
	pop	edi

; 219  :   }
; 220  : } // end linebreak()

	mov	esp, ebp
	pop	ebp
	ret	0
_linebreak ENDP
_TEXT	ENDS
PUBLIC	_newline
; Function compile flags: /Ogtp
;	COMDAT _newline
_TEXT	SEGMENT
_newline PROC						; COMDAT

; 229  : {

	push	esi

; 230  :   int i;
; 231  :   *(pos++) = '\n';

	mov	esi, DWORD PTR _pos
	push	edi

; 232  :   for ( i = 0 ; i < INDENT*bracket_depth ; i++ )

	mov	edi, DWORD PTR _bracket_depth
	mov	BYTE PTR [esi], 10			; 0000000aH
	inc	esi
	add	edi, edi
	mov	DWORD PTR _pos, esi
	test	edi, edi
	jle	SHORT $LN8@newline

; 230  :   int i;
; 231  :   *(pos++) = '\n';

	push	edi
	push	32					; 00000020H
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH

; 232  :   for ( i = 0 ; i < INDENT*bracket_depth ; i++ )

	add	esi, edi
	mov	DWORD PTR _pos, esi
$LN8@newline:

; 233  :     *(pos++) = ' ';
; 234  :   *pos = 0;
; 235  :   linestart = pos;

	pop	edi
	mov	DWORD PTR _linestart, esi
	mov	BYTE PTR [esi], 0
	pop	esi

; 236  : 
; 237  : } // end newline()

	ret	0
_newline ENDP
_TEXT	ENDS
PUBLIC	??_C@_09COHMOBAO@EXPRINT?4C?$AA@		; `string'
PUBLIC	_check_room_left
EXTRN	_list_realloc:PROC
_BSS	SEGMENT
_strsize DD	01H DUP (?)
_strstart DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_09COHMOBAO@EXPRINT?4C?$AA@
CONST	SEGMENT
??_C@_09COHMOBAO@EXPRINT?4C?$AA@ DB 'EXPRINT.C', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _check_room_left
_TEXT	SEGMENT
_n$ = 8							; size = 4
_check_room_left PROC					; COMDAT

; 247  : {

	push	ebp
	mov	ebp, esp

; 248  :    /* check room remaining */
; 249  :    if ( (pos + n - strstart) > (int)strsize )

	mov	eax, DWORD PTR _strstart
	mov	ecx, DWORD PTR _strsize
	push	ebx
	mov	ebx, DWORD PTR _n$[ebp]
	push	edi
	mov	edi, DWORD PTR _pos
	sub	edi, eax
	lea	edx, DWORD PTR [edi+ebx]
	cmp	edx, ecx
	jle	SHORT $LN1@check_room

; 250  :     { size_t len = pos - strstart;
; 251  :       size_t linespot = linestart - strstart;

	push	esi
	mov	esi, DWORD PTR _linestart

; 252  :       strstart = my_list_realloc(strstart,strsize + 1000 + n,ETERNAL_BLOCK); 

	push	252					; 000000fcH
	push	OFFSET ??_C@_09COHMOBAO@EXPRINT?4C?$AA@
	push	60138					; 0000eaeaH
	lea	ecx, DWORD PTR [ecx+ebx+1000]
	push	ecx
	push	eax
	sub	esi, eax
	call	_list_realloc

; 253  :       strsize += 1000 + n;

	mov	edx, DWORD PTR _strsize
	lea	ecx, DWORD PTR [edx+ebx+1000]

; 254  :       linestart = strstart + linespot;

	lea	edx, DWORD PTR [eax+esi]
	add	esp, 20					; 00000014H
	mov	DWORD PTR _strstart, eax

; 255  :       pos = strstart + len;

	add	eax, edi
	mov	DWORD PTR _strsize, ecx
	mov	DWORD PTR _linestart, edx
	mov	DWORD PTR _pos, eax
	pop	esi
$LN1@check_room:
	pop	edi
	pop	ebx

; 256  :     }
; 257  : } // end check_room_left()

	pop	ebp
	ret	0
_check_room_left ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@FIENHNPC@String?5too?5long?4?6?$AA@	; `string'
PUBLIC	_convert_string
EXTRN	_kb_error:PROC
;	COMDAT ??_C@_0BC@FIENHNPC@String?5too?5long?4?6?$AA@
CONST	SEGMENT
??_C@_0BC@FIENHNPC@String?5too?5long?4?6?$AA@ DB 'String too long.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _convert_string
_TEXT	SEGMENT
_c$ = 8							; size = 4
_p$ = 12						; size = 4
_space$ = 16						; size = 4
_convert_string PROC					; COMDAT

; 286  : { int count;

	push	ebp
	mov	ebp, esp
	push	esi

; 287  :   /* convert to C escape sequences */
; 288  :   *(p++) = '"';

	mov	esi, DWORD PTR _p$[ebp]
	push	edi

; 289  :   if ( c )

	mov	edi, DWORD PTR _c$[ebp]
	mov	BYTE PTR [esi], 34			; 00000022H
	inc	esi
	test	edi, edi
	je	$LN1@convert_st

; 290  :   { for ( count=5 ; *c && count<space; c++ )

	mov	cl, BYTE PTR [edi]
	mov	eax, 5
	test	cl, cl
	je	$LN1@convert_st
	push	ebx
	mov	ebx, DWORD PTR _space$[ebp]
	npad	6
$LL20@convert_st:
	cmp	eax, ebx
	jge	SHORT $LN11@convert_st

; 291  :     { switch ( *c )

	movsx	edx, cl
	add	edx, -8					; fffffff8H
	cmp	edx, 84					; 00000054H
	ja	SHORT $LN2@convert_st
	movzx	edx, BYTE PTR $LN19@convert_st[edx]
	jmp	DWORD PTR $LN22@convert_st[edx*4]
$LN8@convert_st:

; 292  :       { case '\n': *(p++) = '\\'; *(p++) = 'n'; count += 2; break;

	mov	WORD PTR [esi], 28252			; 00006e5cH
	add	esi, 2
	add	eax, 2
	jmp	SHORT $LN12@convert_st
$LN7@convert_st:

; 293  :         case '\r': *(p++) = '\\'; *(p++) = 'r'; count += 2; break;

	mov	WORD PTR [esi], 29276			; 0000725cH
	add	esi, 2
	add	eax, 2
	jmp	SHORT $LN12@convert_st
$LN6@convert_st:

; 294  :         case '\t': *(p++) = '\\'; *(p++) = 't'; count += 2; break;

	mov	WORD PTR [esi], 29788			; 0000745cH
	add	esi, 2
	add	eax, 2
	jmp	SHORT $LN12@convert_st
$LN5@convert_st:

; 295  :         case '\b': *(p++) = '\\'; *(p++) = 'b'; count += 2; break;

	mov	WORD PTR [esi], 25180			; 0000625cH
	add	esi, 2
	add	eax, 2
	jmp	SHORT $LN12@convert_st
$LN4@convert_st:

; 296  :         case '"': *(p++) = '\\'; *(p++) = '"'; count += 2; break;

	mov	WORD PTR [esi], 8796			; 0000225cH
	add	esi, 2
	add	eax, 2
	jmp	SHORT $LN12@convert_st
$LN3@convert_st:

; 297  :         case '\\': *(p++) = '\\'; *(p++) = '\\'; count += 2; break;

	mov	WORD PTR [esi], 23644			; 00005c5cH
	add	esi, 2
	add	eax, 2
	jmp	SHORT $LN12@convert_st
$LN2@convert_st:

; 298  :         default: *(p++) = *c; count++;

	mov	BYTE PTR [esi], cl
	inc	esi
	inc	eax
$LN12@convert_st:

; 290  :   { for ( count=5 ; *c && count<space; c++ )

	mov	cl, BYTE PTR [edi+1]
	inc	edi
	test	cl, cl
	jne	SHORT $LL20@convert_st

; 303  :   }
; 304  :   *(p++) = '"';

	pop	ebx
	pop	edi
	mov	WORD PTR [esi], 34			; 00000022H
	pop	esi

; 305  :   *p = 0;
; 306  :   return;
; 307  : }   // end convert_string()

	pop	ebp
	ret	0
$LN11@convert_st:

; 299  :       }
; 300  :    }
; 301  :    if ( *c )

	cmp	BYTE PTR [edi], 0
	je	SHORT $LN21@convert_st

; 302  :      kb_error(4556,"String too long.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0BC@FIENHNPC@String?5too?5long?4?6?$AA@
	push	4556					; 000011ccH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN21@convert_st:
	pop	ebx
$LN1@convert_st:
	pop	edi

; 303  :   }
; 304  :   *(p++) = '"';

	mov	WORD PTR [esi], 34			; 00000022H
	pop	esi

; 305  :   *p = 0;
; 306  :   return;
; 307  : }   // end convert_string()

	pop	ebp
	ret	0
$LN22@convert_st:
	DD	$LN5@convert_st
	DD	$LN6@convert_st
	DD	$LN8@convert_st
	DD	$LN7@convert_st
	DD	$LN4@convert_st
	DD	$LN3@convert_st
	DD	$LN2@convert_st
$LN19@convert_st:
	DB	0
	DB	1
	DB	2
	DB	6
	DB	6
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	5
_convert_string ENDP
_TEXT	ENDS
PUBLIC	??_C@_01PKGAHCOL@?$CJ?$AA@			; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	_exprint_recur
PUBLIC	??_C@_01ODHLEDKK@?$CI?$AA@			; `string'
PUBLIC	_binary_print
EXTRN	_sprintf:PROC
;	COMDAT ??_C@_01PKGAHCOL@?$CJ?$AA@
CONST	SEGMENT
??_C@_01PKGAHCOL@?$CJ?$AA@ DB ')', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01ODHLEDKK@?$CI?$AA@
CONST	SEGMENT
??_C@_01ODHLEDKK@?$CI?$AA@ DB '(', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _binary_print
_TEXT	SEGMENT
_node$ = 8						; size = 4
_prec_parent$ = 12					; size = 4
_prec1$ = 16						; size = 4
_op$ = 20						; size = 4
_prec2$ = 24						; size = 4
_binary_print PROC					; COMDAT

; 3452 : {

	push	ebp
	mov	ebp, esp
	push	ebx

; 3453 :   if ( prec_parent > prec1 ) 

	mov	ebx, DWORD PTR _prec_parent$[ebp]
	push	esi
	push	edi
	mov	edi, DWORD PTR _prec1$[ebp]
	cmp	ebx, edi
	jle	SHORT $LN2@binary_pri

; 3454 :    { sprintf(pos,"(");

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_01ODHLEDKK@?$CI?$AA@
	push	eax
	call	_sprintf

; 3455 :      pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	5
$LL5@binary_pri:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL5@binary_pri
	sub	eax, edx
	add	DWORD PTR _pos, eax
$LN2@binary_pri:

; 3456 :    }
; 3457 :   exprint_recur(node+node->left,prec1);

	mov	esi, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [esi+4]
	imul	ecx, 168				; 000000a8H
	add	ecx, esi
	push	edi
	push	ecx
	call	_exprint_recur

; 3458 :   sprintf(pos,"%s",op);

	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _pos
	push	edx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	eax
	call	_sprintf

; 3459 :   pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 20					; 00000014H
	lea	edx, DWORD PTR [eax+1]
$LL6@binary_pri:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL6@binary_pri

; 3460 :   exprint_recur(node+node->right,prec2);

	mov	ecx, DWORD PTR _prec2$[ebp]
	sub	eax, edx
	mov	edx, DWORD PTR [esi+8]
	add	DWORD PTR _pos, eax
	imul	edx, 168				; 000000a8H
	push	ecx
	add	edx, esi
	push	edx
	call	_exprint_recur
	add	esp, 8

; 3461 :   if ( prec_parent > prec1 )

	cmp	ebx, edi
	pop	edi
	pop	esi
	pop	ebx
	jle	SHORT $LN1@binary_pri

; 3462 :     { sprintf(pos,")");

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	eax
	call	_sprintf

; 3463 :       pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL7@binary_pri:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL7@binary_pri
	sub	eax, edx
	add	DWORD PTR _pos, eax
$LN1@binary_pri:

; 3464 :     }
; 3465 :   return;
; 3466 : } // end binary_print()

	pop	ebp
	ret	0
_binary_print ENDP
_TEXT	ENDS
PUBLIC	_print_attr
; Function compile flags: /Ogtp
;	COMDAT _print_attr
_TEXT	SEGMENT
_node$ = 8						; size = 4
_word$ = 12						; size = 4
_print_attr PROC					; COMDAT

; 3509 : {

	push	ebp
	mov	ebp, esp

; 3510 :   sprintf(pos,"%s",word); 

	mov	eax, DWORD PTR _word$[ebp]
	mov	ecx, DWORD PTR _pos
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	ecx
	call	_sprintf

; 3511 :   pos += strlen(pos); return;

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL3@print_attr:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL3@print_attr
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 3512 : } // end print_attr()

	pop	ebp
	ret	0
_print_attr ENDP
_TEXT	ENDS
PUBLIC	_print_set_attr
; Function compile flags: /Ogtp
;	COMDAT _print_set_attr
_TEXT	SEGMENT
_node$ = 8						; size = 4
_word$ = 12						; size = 4
_print_set_attr PROC					; COMDAT

; 3524 : {

	push	ebp
	mov	ebp, esp

; 3525 :   sprintf(pos,"%s",word); 

	mov	eax, DWORD PTR _word$[ebp]
	mov	ecx, DWORD PTR _pos
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	ecx
	call	_sprintf

; 3526 :   pos += strlen(pos); return;

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL3@print_set_:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL3@print_set_
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 3527 : } // end print_set_attr()

	pop	ebp
	ret	0
_print_set_attr ENDP
_TEXT	ENDS
PUBLIC	_print_quote
EXTRN	_msgmax:DWORD
; Function compile flags: /Ogtp
;	COMDAT _print_quote
_TEXT	SEGMENT
_c$ = 8							; size = 4
_print_quote PROC					; COMDAT

; 267  : { check_room_left(strlen(c)+30);

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR _c$[ebp]
	mov	eax, esi
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL3@print_quot:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL3@print_quot
	sub	eax, edx
	add	eax, 30					; 0000001eH
	push	eax
	call	_check_room_left

; 268  :   convert_string(c,pos,msgmax);

	mov	eax, DWORD PTR _msgmax
	mov	ecx, DWORD PTR _pos
	push	eax
	push	ecx
	push	esi
	call	_convert_string

; 269  :   pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	pop	esi
$LL4@print_quot:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL4@print_quot
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 270  : 
; 271  : } // end print_quote()

	pop	ebp
	ret	0
_print_quote ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@DFGJEPPA@procedure?5?$CFs?5?$CI?$AA@	; `string'
PUBLIC	??_C@_0DJ@JKBDOPAM@Printing?5of?5expression?5node?5type@ ; `string'
PUBLIC	??_C@_09GPGAJHPD@?$CIunknown?$CJ?$AA@		; `string'
PUBLIC	??_C@_03NBFACCKM@?$CJ?$DL?6?$AA@		; `string'
PUBLIC	??_C@_02MNMNLDAI@?$CJ?6?$AA@			; `string'
PUBLIC	??_C@_0BB@CHELAHME@function?5?$CFs?5?$CFs?5?$CI?$AA@ ; `string'
PUBLIC	??_C@_03HHCAAOLL@?$CJ?3?$CI?$AA@		; `string'
PUBLIC	??_C@_01HCONENDN@?$HL?$AA@			; `string'
PUBLIC	??_C@_08CIJIHMDB@?$CFc?5?3?3?3?$DN?5?$AA@	; `string'
PUBLIC	??_C@_0L@PJAPHMCA@show_expr?5?$AA@		; `string'
PUBLIC	??_C@_0BD@CJDDBPIE@make_thread_lists?5?$AA@	; `string'
PUBLIC	??_C@_05OINEHIOC@else?5?$AA@			; `string'
PUBLIC	??_C@_04BBJKINFE@?5?$HM?$HM?5?$AA@		; `string'
PUBLIC	??_C@_04NEABMJPE@?5?$CG?$CG?5?$AA@		; `string'
PUBLIC	??_C@_03MGHMLHIL@?5?$DM?5?$AA@			; `string'
PUBLIC	??_C@_03MFPIGDOF@?5?$DO?5?$AA@			; `string'
PUBLIC	??_C@_04PLNGDCJO@?5?$DM?$DN?5?$AA@		; `string'
PUBLIC	??_C@_04FBNPPKBF@?5?$DO?$DN?5?$AA@		; `string'
PUBLIC	??_C@_04FJKFLNNM@?5?$CB?$DN?5?$AA@		; `string'
PUBLIC	??_C@_04EDGKFFPL@?5?$DN?$DN?5?$AA@		; `string'
PUBLIC	??_C@_02GFKOMOKH@?5?$CI?$AA@			; `string'
PUBLIC	??_C@_0CM@GOMFLGCL@Internal?5error?3?5bad?5SET_ATTRIBUT@ ; `string'
PUBLIC	??_C@_02OPGFLNEK@p4?$AA@			; `string'
PUBLIC	??_C@_02KACECLIN@p3?$AA@			; `string'
PUBLIC	??_C@_02LJDPBKMM@p2?$AA@			; `string'
PUBLIC	??_C@_02JCBCEJAP@p1?$AA@			; `string'
PUBLIC	??_C@_03MJGCILEH@p1?$FL?$AA@			; `string'
PUBLIC	??_C@_02ENMDKDPO@x8?$AA@			; `string'
PUBLIC	??_C@_02MKFLLPDB@x7?$AA@			; `string'
PUBLIC	??_C@_02NDEAIOHA@x6?$AA@			; `string'
PUBLIC	??_C@_02PIGNNNLD@x5?$AA@			; `string'
PUBLIC	??_C@_02OBHGOMPC@x4?$AA@			; `string'
PUBLIC	??_C@_01GLPGHMHM@z?$AA@				; `string'
PUBLIC	??_C@_02KODHHKDF@x3?$AA@			; `string'
PUBLIC	??_C@_01EANLCPLP@y?$AA@				; `string'
PUBLIC	??_C@_09ENCBKJCG@boundary?5?$AA@		; `string'
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??_C@_08KEAKBNCK@mpi_task?$AA@			; `string'
PUBLIC	??_C@_06EMCPHFGM@volume?$AA@			; `string'
PUBLIC	??_C@_04GOEDGNCF@area?$AA@			; `string'
PUBLIC	??_C@_08BKGECACE@dihedral?$AA@			; `string'
PUBLIC	??_C@_07MEIPJMCG@sqcurve?$AA@			; `string'
PUBLIC	??_C@_04NFDDIEML@wrap?$AA@			; `string'
PUBLIC	??_C@_09BPLDEHMH@mid_facet?$AA@			; `string'
PUBLIC	??_C@_08EJNLDOMI@mid_edge?$AA@			; `string'
PUBLIC	??_C@_0BC@KBMGOFNF@no_hessian_normal?$AA@	; `string'
PUBLIC	??_C@_08HEBLBDOI@volfixed?$AA@			; `string'
PUBLIC	??_C@_0P@FKOPBMAL@mean_curvature?$AA@		; `string'
PUBLIC	??_C@_06IJDLPEM@length?$AA@			; `string'
PUBLIC	??_C@_04FKMICODN@show?$AA@			; `string'
PUBLIC	??_C@_0M@KPMDGEHG@orientation?$AA@		; `string'
PUBLIC	??_C@_08JONLCJIM@backbody?$AA@			; `string'
PUBLIC	??_C@_09GNLMKAKO@frontbody?$AA@			; `string'
PUBLIC	??_C@_09OPNKCLNO@backcolor?$AA@			; `string'
PUBLIC	??_C@_0L@DKEJANLD@frontcolor?$AA@		; `string'
PUBLIC	??_C@_05PEENBMOG@color?$AA@			; `string'
PUBLIC	??_C@_07HKCFKCGH@valence?$AA@			; `string'
PUBLIC	??_C@_03PLGJJJLK@oid?$AA@			; `string'
PUBLIC	??_C@_02EGCJHIOB@id?$AA@			; `string'
PUBLIC	??_C@_08LAAABFKN@original?$AA@			; `string'
PUBLIC	??_C@_0L@DKEDBIHO@noncontent?$AA@		; `string'
PUBLIC	??_C@_05OFLEIIDM@fixed?$AA@			; `string'
PUBLIC	??_C@_0M@BIHLDDLK@axial_point?$AA@		; `string'
PUBLIC	??_C@_0M@DFLKEBKH@tetra_point?$AA@		; `string'
PUBLIC	??_C@_0N@DHNCNHBM@triple_point?$AA@		; `string'
PUBLIC	??_C@_04CIOKLOBL@midv?$AA@			; `string'
PUBLIC	??_C@_0N@KCHJBOEN@on_boundary?5?$AA@		; `string'
PUBLIC	??_C@_06OPEHNENO@?5value?$AA@			; `string'
PUBLIC	??_C@_0BF@ICBGKBMB@value_of_constraint?5?$AA@	; `string'
PUBLIC	??_C@_0BA@DDGBMOJE@hit_constraint?5?$AA@	; `string'
PUBLIC	??_C@_0P@NECEKGOL@on_constraint?5?$AA@		; `string'
PUBLIC	??_C@_0BE@FCGNGMMH@on_method_instance?5?$AA@	; `string'
PUBLIC	??_C@_0N@LJDCMFBO@on_quantity?5?$AA@		; `string'
PUBLIC	??_C@_05MKKKJBDN@?5not?5?$AA@			; `string'
PUBLIC	??_C@_0L@OBLFGKBL@ellipticE?$CI?$AA@		; `string'
PUBLIC	??_C@_0L@OLCLEHBB@ellipticK?$CI?$AA@		; `string'
PUBLIC	??_C@_05BNEJBMEK@atan?$CI?$AA@			; `string'
PUBLIC	??_C@_05DLKIBAMI@acos?$CI?$AA@			; `string'
PUBLIC	??_C@_05GKNNOILF@asin?$CI?$AA@			; `string'
PUBLIC	??_C@_04BGJPAGPE@log?$CI?$AA@			; `string'
PUBLIC	??_C@_04MPCILOFG@exp?$CI?$AA@			; `string'
PUBLIC	??_C@_04KJABJGAL@tan?$CI?$AA@			; `string'
PUBLIC	??_C@_04IPOAJKIJ@cos?$CI?$AA@			; `string'
PUBLIC	??_C@_04NOJFGCPE@sin?$CI?$AA@			; `string'
PUBLIC	??_C@_06LLNDMCPI@atanh?$CI?$AA@			; `string'
PUBLIC	??_C@_06JGKGLJIB@asinh?$CI?$AA@			; `string'
PUBLIC	??_C@_06LIEDMBPI@acosh?$CI?$AA@			; `string'
PUBLIC	??_C@_05LKLMPLHE@tanh?$CI?$AA@			; `string'
PUBLIC	??_C@_05LJCMPIHE@cosh?$CI?$AA@			; `string'
PUBLIC	??_C@_05JHMJIAAN@sinh?$CI?$AA@			; `string'
PUBLIC	??_C@_04HEKBBDE@abs?$CI?$AA@			; `string'
PUBLIC	??_C@_05MLDBPPPC@ceil?$CI?$AA@			; `string'
PUBLIC	??_C@_06IHMMIDCC@floor?$CI?$AA@			; `string'
PUBLIC	??_C@_05MIKKOOHN@sqrt?$CI?$AA@			; `string'
PUBLIC	??_C@_03IINDJHJM@?$CJ?$FO2?$AA@			; `string'
PUBLIC	??_C@_0O@HFHNBMBB@wrap_inverse?$CI?$AA@		; `string'
PUBLIC	??_C@_0O@ICELJODO@wrap_compose?$CI?$AA@		; `string'
PUBLIC	??_C@_06NKPIGJJO@atan2?$CI?$AA@			; `string'
PUBLIC	??_C@_0BF@NPPPB@incompleteEllipticE?$CI?$AA@	; `string'
PUBLIC	??_C@_0BF@CELEBKI@incompleteEllipticF?$CI?$AA@	; `string'
PUBLIC	??_C@_08KPBNEKJD@minimum?$CI?$AA@		; `string'
PUBLIC	??_C@_08HIPGPINC@maximum?$CI?$AA@		; `string'
PUBLIC	??_C@_02FKAPCJPD@?$CK?$CK?$AA@			; `string'
PUBLIC	??_C@_04NCKAHEA@?$FO?$CF1d?$AA@			; `string'
PUBLIC	??_C@_05LKLPDELB@?$FO?$CI?91?$CJ?$AA@		; `string'
PUBLIC	??_C@_03HBOLMMFA@?$CJ?$DP?$CI?$AA@		; `string'
PUBLIC	??_C@_06GNLBBOML@?5idiv?5?$AA@			; `string'
PUBLIC	??_C@_06FKGIFEHI@?5imod?5?$AA@			; `string'
PUBLIC	??_C@_01FGNFDNOH@?$CF?$AA@			; `string'
PUBLIC	??_C@_01NBENCBCI@?$CK?$AA@			; `string'
PUBLIC	??_C@_03MHLONNLM@?5?$DN?5?$AA@			; `string'
PUBLIC	??_C@_01KMDKNFGN@?1?$AA@			; `string'
PUBLIC	??_C@_03NLJIHOMM@?5?9?5?$AA@			; `string'
PUBLIC	??_C@_03NPBFACHO@?5?$CL?5?$AA@			; `string'
PUBLIC	??_C@_05FFIBBKIO@usr?$CFd?$AA@			; `string'
PUBLIC	??_C@_08KAJJHIBE@total?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_05NNFHCGPF@?$CFs?4?$CFs?$AA@		; `string'
PUBLIC	??_C@_0O@LMDPDPKO@?$CFs?4p_velocity?$AA@	; `string'
PUBLIC	??_C@_0L@BLNBIMLF@?$CFs?4p_force?$AA@		; `string'
PUBLIC	??_C@_0M@KHJHMLJD@?$CFs?4volconst?$AA@		; `string'
PUBLIC	??_C@_0L@IHGBGJIM@?$CFs?4modulus?$AA@		; `string'
PUBLIC	??_C@_08COKEDFMM@?$CFs?4value?$AA@		; `string'
PUBLIC	??_C@_09GLPADBIC@?$CFs?4target?$AA@		; `string'
PUBLIC	??_C@_0M@NFGODCJB@?$CFs?4pressure?$AA@		; `string'
PUBLIC	??_C@_0N@KCPNEKBJ@?$CFs?4conserved?$AA@		; `string'
PUBLIC	??_C@_0N@IJLOHMIH@?$CFs?4info_only?$AA@		; `string'
PUBLIC	??_C@_09FICCFCDB@?$CFs?4energy?$AA@		; `string'
PUBLIC	??_C@_08MHEECOGP@?$CFs?4fixed?$AA@		; `string'
PUBLIC	??_C@_0BB@KCCCOBAL@?$CFs?4tolerance?5?$CFs?5?$AA@ ; `string'
PUBLIC	??_C@_0BA@NBKDJPNO@?$CFs?4volconst?5?$CFs?5?$AA@ ; `string'
PUBLIC	??_C@_0O@DJDLCKNJ@?$CFs?4target?5?$CFs?5?$AA@	; `string'
PUBLIC	??_C@_0P@HKKNDHOK@?$CFs?4modulus?5?$CFs?5?$AA@	; `string'
PUBLIC	??_C@_03IKJDKKNH@p?$CFd?$AA@			; `string'
PUBLIC	??_C@_04CGHINKND@?$CFc?$CFd?$AA@		; `string'
PUBLIC	??_C@_02HAOIJKIC@?$CFc?$AA@			; `string'
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
PUBLIC	??_C@_01BBODEMC@G?$AA@				; `string'
PUBLIC	??_C@_01KGKMHCOC@e?$AA@				; `string'
PUBLIC	??_C@_02OAHAJOFD@pi?$AA@			; `string'
PUBLIC	??_C@_06OEKDGAI@?$CF1?415g?$AA@			; `string'
PUBLIC	??_C@_08HEHJIEEA@?4bodies?5?$AA@		; `string'
PUBLIC	??_C@_07LNGBBGLG@bodies?5?$AA@			; `string'
PUBLIC	??_C@_08JAFMBMKE@?4facets?5?$AA@		; `string'
PUBLIC	??_C@_07FJEEIOFC@facets?5?$AA@			; `string'
PUBLIC	??_C@_07NIBDCADL@?4edges?5?$AA@			; `string'
PUBLIC	??_C@_06MMKBFAEI@edges?5?$AA@			; `string'
PUBLIC	??_C@_0L@GFMBBPLG@?4vertices?5?$AA@		; `string'
PUBLIC	??_C@_09DJCGGCPN@vertices?5?$AA@		; `string'
PUBLIC	??_C@_0M@HIBDCNLL@facetedges?5?$AA@		; `string'
PUBLIC	??_C@_0O@KOCBPMJD@loghistogram?$CI?$AA@		; `string'
PUBLIC	??_C@_0L@MHHMKAFA@histogram?$CI?$AA@		; `string'
PUBLIC	??_C@_06MFABEKNP@count?$CI?$AA@			; `string'
PUBLIC	??_C@_04MDBONKFA@avg?$CI?$AA@			; `string'
PUBLIC	??_C@_04MGBMDEIK@sum?$CI?$AA@			; `string'
PUBLIC	??_C@_04BEFELBH@min?$CI?$AA@			; `string'
PUBLIC	??_C@_04NMFKLMDK@max?$CI?$AA@			; `string'
PUBLIC	??_C@_08ECALEGKJ@foreach?5?$AA@			; `string'
PUBLIC	??_C@_07OFLPJMBB@?5where?5?$AA@			; `string'
PUBLIC	??_C@_04ENCLHBOC@set?5?$AA@			; `string'
PUBLIC	??_C@_0P@BMDMDICD@hessian_normal?$AA@		; `string'
PUBLIC	??_C@_0M@FGEAHLHH@boundary?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_08KIKGFOKI@boundary?$AA@			; `string'
PUBLIC	??_C@_0O@NGEKOGMC@constraint?5?$CFs?$AA@	; `string'
PUBLIC	??_C@_0BA@FCDDEKDG@method_instance?$AA@		; `string'
PUBLIC	??_C@_08OCNIHGPN@quantity?$AA@			; `string'
PUBLIC	??_C@_0M@HCINNPA@constraint?5?$AA@		; `string'
PUBLIC	??_C@_0L@HOHHMJMM@constraint?$AA@		; `string'
PUBLIC	??_C@_07IJGPCJHC@opacity?$AA@			; `string'
PUBLIC	??_C@_08POHEELCJ@pressure?$AA@			; `string'
PUBLIC	??_C@_06JJLAMBGK@target?$AA@			; `string'
PUBLIC	??_C@_08IMINLCCL@volconst?$AA@			; `string'
PUBLIC	??_C@_07HAFFKDBK@density?$AA@			; `string'
PUBLIC	??_C@_04BGEKJPHF@bare?$AA@			; `string'
PUBLIC	??_C@_05CBPKLGJM@phase?$AA@			; `string'
PUBLIC	??_C@_0L@ODCODBLD@no_display?$AA@		; `string'
PUBLIC	??_C@_0N@OFAMNBMC@centerofmass?$AA@		; `string'
PUBLIC	??_C@_0N@CMIGFPCH@no_transform?$AA@		; `string'
PUBLIC	??_C@_05EPBFLBEJ@unset?$AA@			; `string'
PUBLIC	??_C@_09PFNGBABC@no_refine?$AA@			; `string'
PUBLIC	_set_print
PUBLIC	??_C@_03KCHOJKKI@set?$AA@			; `string'
PUBLIC	??_C@_0M@JAGBIOBF@hit_partner?$AA@		; `string'
PUBLIC	??_C@_04PJDNGLKJ@self?$AA@			; `string'
PUBLIC	??_C@_04NPDIJEBN@?4?$CFs?$FL?$AA@		; `string'
PUBLIC	??_C@_0L@HCNHJHCK@facetedge?$FL?$AA@		; `string'
PUBLIC	??_C@_05KGEIKHIF@body?$FL?$AA@			; `string'
PUBLIC	??_C@_06JBIAMLBO@facet?$FL?$AA@			; `string'
PUBLIC	??_C@_05MLBEFDNG@edge?$FL?$AA@			; `string'
PUBLIC	??_C@_07GMIBILEA@vertex?$FL?$AA@		; `string'
PUBLIC	??_C@_01FJMABOPO@x?$AA@				; `string'
PUBLIC	??_C@_0N@ICOOBCNI@vertexnormal?$AA@		; `string'
PUBLIC	??_C@_04KMMDIKEB@?5?$CFs?5?$AA@			; `string'
PUBLIC	??_C@_09OLACHOMO@whereami?5?$AA@		; `string'
PUBLIC	??_C@_0BF@KJJDFLC@reverse_orientation?5?$AA@	; `string'
PUBLIC	??_C@_0N@FPEGLGLO@t1_edgeswap?5?$AA@		; `string'
PUBLIC	??_C@_0BC@PDFHAOFI@pop_quad_to_quad?5?$AA@	; `string'
PUBLIC	??_C@_0BB@HLINOHGN@pop_tri_to_edge?5?$AA@	; `string'
PUBLIC	??_C@_0BB@POFEJAAI@pop_edge_to_tri?5?$AA@	; `string'
PUBLIC	??_C@_0O@PMHDHEAM@equiangulate?5?$AA@		; `string'
PUBLIC	??_C@_0BH@LEHBHCDC@rawest_vertex_average?5?$AA@	; `string'
PUBLIC	??_C@_0BE@LKOOEJIA@raw_vertex_average?5?$AA@	; `string'
PUBLIC	??_C@_0BA@EEDBPPPI@vertex_average?5?$AA@	; `string'
PUBLIC	??_C@_09KNDPNNNB@edgeswap?5?$AA@		; `string'
PUBLIC	??_C@_06HBAHJGAJ@unfix?5?$AA@			; `string'
PUBLIC	??_C@_04KGOHCPMM@fix?5?$AA@			; `string'
PUBLIC	??_C@_04GCDPEDIK@pop?5?$AA@			; `string'
PUBLIC	??_C@_09PLEKKNFD@dissolve?5?$AA@		; `string'
PUBLIC	??_C@_07OHMIIBBL@refine?5?$AA@			; `string'
PUBLIC	??_C@_07GNDMACL@delete?5?$AA@			; `string'
PUBLIC	??_C@_05BKNPGPBN@list?5?$AA@			; `string'
PUBLIC	??_C@_0BB@BEPCFKIE@list?5bottominfo?5?$AA@	; `string'
PUBLIC	??_C@_0O@NKCPFOBE@list?5topinfo?5?$AA@		; `string'
PUBLIC	??_C@_0P@PKNGHLMP@list?5boundary?5?$AA@		; `string'
PUBLIC	??_C@_0BB@OAEJJBFK@list?5constraint?5?$AA@	; `string'
PUBLIC	??_C@_0BD@PNMIFIHL@list?5constraint?5?$CFs?$AA@	; `string'
PUBLIC	??_C@_0BI@HLLNDPKC@list?5method_instance?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BB@DBLGCJFN@list?5quantity?5?$CFs?$AA@	; `string'
PUBLIC	??_C@_0BB@PEELHDCG@list?5attributes?5?$AA@	; `string'
PUBLIC	??_C@_0BB@FEIJOBAO@list?5procedures?5?$AA@	; `string'
PUBLIC	??_C@_05FPPEDHBM@exit?5?$AA@			; `string'
PUBLIC	??_C@_02NAHKEMLJ@j?5?$AA@			; `string'
PUBLIC	??_C@_07KIABCNGA@ometis?5?$AA@			; `string'
PUBLIC	??_C@_0N@EHMDFEMF@edge_divide?5?$AA@		; `string'
PUBLIC	??_C@_06LGDJAKGO@notch?5?$AA@			; `string'
PUBLIC	??_C@_0M@FOAHLABL@body?9metis?5?$AA@		; `string'
PUBLIC	??_C@_07CMELCDJK@kmetis?5?$AA@			; `string'
PUBLIC	??_C@_0BA@DAJKOHFA@metis_readjust?5?$AA@	; `string'
PUBLIC	??_C@_06FJIEJPGA@metis?5?$AA@			; `string'
PUBLIC	??_C@_09LIMDMHNO@edgeweed?5?$AA@		; `string'
PUBLIC	??_C@_09NIJIHPDB@areaweed?5?$AA@		; `string'
PUBLIC	??_C@_05HEPJHAGN@move?5?$AA@			; `string'
PUBLIC	??_C@_0O@MBIEAIBG@hessian_seek?5?$AA@		; `string'
PUBLIC	??_C@_07MAHMAIKH@saddle?5?$AA@			; `string'
PUBLIC	??_C@_0BA@ODEJHEGJ@inverse_periods?$AA@		; `string'
PUBLIC	??_C@_01OHGJGJJP@?$FL?$AA@			; `string'
PUBLIC	??_C@_0O@IMAKABFD@torus_periods?$AA@		; `string'
PUBLIC	??_C@_05HMJDJDEN@ritz?$CI?$AA@			; `string'
PUBLIC	??_C@_0M@ELLGNMC@eigenprobe?5?$AA@		; `string'
PUBLIC	??_C@_08PJBNJOBI@lanczos?5?$AA@			; `string'
PUBLIC	??_C@_09KFKMHJDA@lagrange?5?$AA@		; `string'
PUBLIC	??_C@_07CPAFJHCE@sizeof?$CI?$AA@		; `string'
PUBLIC	??_C@_0L@PEDDBAKP@sizeof?$CI?$CFs?$CJ?$AA@	; `string'
PUBLIC	??_C@_03CJPCKGBB@?9?9?5?$AA@			; `string'
PUBLIC	??_C@_03IBEIFHP@?$CL?$CL?5?$AA@			; `string'
PUBLIC	??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@		; `string'
PUBLIC	??_C@_03GODGAAIB@?5?9?9?$AA@			; `string'
PUBLIC	??_C@_03DMOBNLLF@?5?$CL?$CL?$AA@		; `string'
PUBLIC	??_C@_06PCAHILNI@?$CFs?5?1?$DN?5?$AA@		; `string'
PUBLIC	??_C@_06MFNJHLOK@?$CFs?5?$CK?$DN?5?$AA@		; `string'
PUBLIC	??_C@_06FIAOEDFD@?$CFs?5?9?$DN?5?$AA@		; `string'
PUBLIC	??_C@_06HNGFBMIP@?$CFs?5?$CL?$DN?5?$AA@		; `string'
PUBLIC	??_C@_0BA@DEIKBKKN@?$CFs?4no_dump?5off?5?$AA@	; `string'
PUBLIC	??_C@_0P@HHJNMIJK@?$CFs?4no_dump?5on?5?$AA@	; `string'
PUBLIC	??_C@_06JFMACMHF@?$CFs?5?3?$DN?5?$AA@		; `string'
PUBLIC	??_C@_07DMFHGJKH@?$CFs?5?3?3?$DN?5?$AA@		; `string'
PUBLIC	??_C@_0BI@LALPNJNO@?$CFs?4on_assign_call?5?3?$DN?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_09PFECEPHA@?$CFs?4pscale?$AA@		; `string'
PUBLIC	??_C@_09OAOCGHOC@?$CFs?4pdelta?$AA@		; `string'
PUBLIC	??_C@_03ECLNAHEM@?$CFs?$CI?$AA@			; `string'
PUBLIC	??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_0N@CBEMEMEM@burchard?5?$CFd?5?$AA@	; `string'
PUBLIC	??_C@_08HNDHMNDL@detorus?5?$AA@			; `string'
PUBLIC	??_C@_0M@BKEGOHCM@subcommand?5?$AA@		; `string'
PUBLIC	??_C@_0N@CKNFECO@repartition?5?$AA@		; `string'
PUBLIC	??_C@_0P@IMACOPAH@free_discards?5?$AA@		; `string'
PUBLIC	??_C@_0O@JHIKHPAF@dump_memlist?5?$AA@		; `string'
PUBLIC	??_C@_0O@DBMMCKIH@renumber_all?5?$AA@		; `string'
PUBLIC	??_C@_0BH@EOIPALJK@convert_to_quantities?5?$AA@	; `string'
PUBLIC	??_C@_0O@PFJLCOPI@sobolev_seek?5?$AA@		; `string'
PUBLIC	??_C@_0BA@NMPGOPNM@dirichlet_seek?5?$AA@	; `string'
PUBLIC	??_C@_0BB@ELMGCAEE@reorder_storage?5?$AA@	; `string'
PUBLIC	??_C@_08KJFKOLCI@sobolev?5?$AA@			; `string'
PUBLIC	??_C@_0L@IAMJHGMM@dirichlet?5?$AA@		; `string'
PUBLIC	??_C@_0O@DJOBGCIG@hessian_menu?5?$AA@		; `string'
PUBLIC	??_C@_06HGIJDJHM@showq?5?$AA@			; `string'
PUBLIC	??_C@_0O@ECJLFEKE@simplex_to_fe?$AA@		; `string'
PUBLIC	??_C@_08PGAFJEDJ@hessian?5?$AA@			; `string'
PUBLIC	??_C@_07IJJIIMNN@rebody?5?$AA@			; `string'
PUBLIC	??_C@_0L@IJDLAEPK@quadratic?5?$AA@		; `string'
PUBLIC	??_C@_07CBPAACLJ@linear?5?$AA@			; `string'
PUBLIC	??_C@_0N@DEBOAOL@extrapolate?5?$AA@		; `string'
PUBLIC	??_C@_08DFMDENPP@rawestv?5?$AA@			; `string'
PUBLIC	??_C@_07ODMECLPM@counts?5?$AA@			; `string'
PUBLIC	??_C@_07CJPBOPFA@recalc?5?$AA@			; `string'
PUBLIC	??_C@_06FGENMIEJ@alice?5?$AA@			; `string'
PUBLIC	??_C@_06KPNPMBGA@shell?5?$AA@			; `string'
PUBLIC	??_C@_02NIKCNPOK@g?5?$AA@			; `string'
PUBLIC	??_C@_06KCFEIDLL@utest?5?$AA@			; `string'
PUBLIC	??_C@_0BA@GBCKKNJC@stability_test?5?$AA@	; `string'
PUBLIC	??_C@_05JPJFAEAO@rawv?5?$AA@			; `string'
PUBLIC	??_C@_0N@GJPIEBBJ@long_jiggle?5?$AA@		; `string'
PUBLIC	??_C@_06JFCNFLHN@check?5?$AA@			; `string'
PUBLIC	??_C@_09PKPCIIOC@show_vol?5?$AA@		; `string'
PUBLIC	??_C@_0N@DHGONGJP@colormap?5?3?$DN?5?$AA@	; `string'
PUBLIC	??_C@_05OEFDBPID@dump?5?$AA@			; `string'
PUBLIC	??_C@_0M@HIGONMEP@is_defined?$CI?$AA@		; `string'
PUBLIC	??_C@_0BB@JMHAAMMM@view_transforms?$FL?$AA@	; `string'
PUBLIC	??_C@_0BM@CEMFOJOL@view_transform_swap_colors?$FL?$AA@ ; `string'
PUBLIC	??_C@_0BH@OFAOMDFN@view_transform_parity?$FL?$AA@ ; `string'
PUBLIC	??_C@_09FLILHFPP@geomview?5?$AA@		; `string'
PUBLIC	??_C@_0M@OHJEHJPG@show_trans?5?$AA@		; `string'
PUBLIC	??_C@_0O@GDNEAALN@replace_load?5?$AA@		; `string'
PUBLIC	??_C@_08EECCEAIE@addload?5?$AA@			; `string'
PUBLIC	??_C@_09MFEIJFLH@permload?5?$AA@		; `string'
PUBLIC	??_C@_05HDKJKGNJ@load?5?$AA@			; `string'
PUBLIC	??_C@_05MFNNJD@read?5?$AA@			; `string'
PUBLIC	??_C@_05MELDNFB@exec?5?$AA@			; `string'
PUBLIC	??_C@_07JJGFGBJN@system?5?$AA@			; `string'
PUBLIC	??_C@_06NEAHAKFG@chdir?5?$AA@			; `string'
PUBLIC	??_C@_05EJCIALOD@zoom?5?$AA@			; `string'
PUBLIC	??_C@_02MBMLGKBP@p?5?$AA@			; `string'
PUBLIC	??_C@_0N@GEMGAMM@autochop?5?3?$DN?5?$AA@	; `string'
PUBLIC	??_C@_0M@IAPMLCJI@thicken?5?3?$DN?5?$AA@	; `string'
PUBLIC	??_C@_0O@PDNHPOPF@diffusion?5?3?$DN?5?$AA@	; `string'
PUBLIC	??_C@_0M@LIDLFDJI@gravity?5?1?$DN?5?$AA@	; `string'
PUBLIC	??_C@_0M@IPOFKDKK@gravity?5?$CK?$DN?5?$AA@	; `string'
PUBLIC	??_C@_0M@BCDCJLBD@gravity?5?9?$DN?5?$AA@	; `string'
PUBLIC	??_C@_0M@DHFJMEMP@gravity?5?$CL?$DN?5?$AA@	; `string'
PUBLIC	??_C@_02OAOPJJAK@G?5?$AA@			; `string'
PUBLIC	??_C@_02PJIGCMPP@P?5?$AA@			; `string'
PUBLIC	??_C@_02ONHIBMNM@M?5?$AA@			; `string'
PUBLIC	??_C@_02MOBKFBJA@y?5?$AA@			; `string'
PUBLIC	??_C@_02OJPFGAGO@K?5?$AA@			; `string'
PUBLIC	??_C@_0BB@GOPKHFKJ@gap_constant?5?3?$DN?5?$AA@	; `string'
PUBLIC	??_C@_09FFMPJNE@optimize?5?$AA@			; `string'
PUBLIC	??_C@_02NFDFFKDM@m?5?$AA@			; `string'
PUBLIC	??_C@_01LBDDMOBJ@?$FN?$AA@			; `string'
PUBLIC	??_C@_02DNJFBPJB@?$FN?$FL?$AA@			; `string'
PUBLIC	??_C@_0N@PHJBGNDM@view_matrix?$FL?$AA@		; `string'
PUBLIC	??_C@_06OHLOMLHG@?$CFs?5?$CFs?5?$AA@		; `string'
PUBLIC	??_C@_0BB@DGCNEFB@set?5?$CFs?5conserved?$AA@	; `string'
PUBLIC	??_C@_0BB@CICBOCMP@set?5?$CFs?5info_only?$AA@	; `string'
PUBLIC	??_C@_0O@FLJLJLDN@set?5?$CFs?5energy?$AA@	; `string'
PUBLIC	??_C@_0N@MIGPCOON@set?5?$CFs?5fixed?$AA@	; `string'
PUBLIC	??_C@_08PCDKFCAB@unfix?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_06PGAKKNMC@fix?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_03IKGEINEE@?$CFs?5?$AA@			; `string'
PUBLIC	??_C@_05HHHBCPMM@?$CI?$CFs?$CJ?5?$AA@		; `string'
PUBLIC	??_C@_09MJJMJFJL@ooglfile?5?$AA@		; `string'
PUBLIC	??_C@_0BB@GPAKCJEL@binary_off_file?5?$AA@	; `string'
PUBLIC	??_C@_0M@DEHHELJH@postscript?5?$AA@		; `string'
PUBLIC	??_C@_09PFLHEGFB@geompipe?5?$AA@		; `string'
PUBLIC	??_C@_0N@MKIHCHHJ@geompipe?5?$CFs?5?$AA@	; `string'
PUBLIC	??_C@_0N@MCGFEOAK@geomview?5?$CFs?5?$AA@	; `string'
PUBLIC	??_C@_0P@DNFKKNDG@keylogfile?5?$CFs?5?$AA@	; `string'
PUBLIC	??_C@_0M@DIIJBMIL@logfile?5?$CFs?5?$AA@		; `string'
PUBLIC	??_C@_0N@HEDCIHMP@autochop?5?$CFs?5?$AA@	; `string'
PUBLIC	??_C@_0N@HJPMHHGF@optimize?5?$CFs?5?$AA@	; `string'
PUBLIC	??_C@_03MPPIHBHJ@OFF?$AA@			; `string'
PUBLIC	??_C@_02BFICIOJL@ON?$AA@			; `string'
PUBLIC	??_C@_05NMKAOHIM@?8?$CFc?8?5?$AA@		; `string'
PUBLIC	??_C@_03JGECCODE@?$CFc?5?$AA@			; `string'
PUBLIC	??_C@_08DLMHGJKG@?5?$HM?5?$CC?$CFs?$CC?5?$AA@	; `string'
PUBLIC	??_C@_03LGOGDKEL@?5?$HM?5?$AA@			; `string'
PUBLIC	??_C@_0M@OKBJPLDC@?5?$DO?$DO?$DO2?5?$CC?$CFs?$CC?5?$AA@ ; `string'
PUBLIC	??_C@_06CPNAODOJ@?5?$DO?$DO?$DO2?5?$AA@		; `string'
PUBLIC	??_C@_0L@BOPKLIIE@?5?$DO?$DO2?5?$CC?$CFs?$CC?5?$AA@ ; `string'
PUBLIC	??_C@_05PFBPMHED@?5?$DO?$DO2?5?$AA@		; `string'
PUBLIC	??_C@_0L@EJFFKNML@?5?$DO?$DO?$DO?5?$CC?$CFs?$CC?5?$AA@ ; `string'
PUBLIC	??_C@_05PMAFDOCH@?5?$DO?$DO?$DO?5?$AA@		; `string'
PUBLIC	??_C@_09HOKDEKNN@?5?$DO?$DO?5?$CC?$CFs?$CC?5?$AA@ ; `string'
PUBLIC	??_C@_04FDJJEEEM@?5?$DO?$DO?5?$AA@		; `string'
PUBLIC	??_C@_03MDDDKBAO@?5?$DL?5?$AA@			; `string'
PUBLIC	??_C@_03NMJBNGBA@?5?$CJ?5?$AA@			; `string'
PUBLIC	??_C@_06PDKNMLLK@for?5?$CI?5?$AA@		; `string'
PUBLIC	??_C@_08JPBKNIFM@?5while?5?$CI?$AA@		; `string'
PUBLIC	??_C@_03LMPAOIAI@do?5?$AA@			; `string'
PUBLIC	??_C@_02KCKGHPCA@?$CJ?5?$AA@			; `string'
PUBLIC	??_C@_07JOMAJBDI@while?5?$CI?$AA@		; `string'
PUBLIC	??_C@_02EEBIPDF@?5?$DL?$AA@			; `string'
PUBLIC	??_C@_04JKFHOPAN@?5do?5?$AA@			; `string'
PUBLIC	??_C@_08FAEHJPPB@?5?$CJ?5then?5?$AA@		; `string'
PUBLIC	??_C@_05HEFMBOOH@if?5?$CI?5?$AA@		; `string'
PUBLIC	??_C@_0M@EJKGLOKJ@exprint?5?$CFs?5?$AA@		; `string'
PUBLIC	??_C@_0O@FKNOAAMF@?4vertexnormal?$AA@		; `string'
PUBLIC	??_C@_09CFOJLIBO@print?5?$CFs?5?$AA@		; `string'
PUBLIC	??_C@_09DJMPBLGO@print?5?$CFc?5?$AA@		; `string'
PUBLIC	??_C@_0P@EFNJCGJK@binary_printf?5?$AA@		; `string'
PUBLIC	??_C@_0L@HKMPKJEI@errprintf?5?$AA@		; `string'
PUBLIC	??_C@_07HJAAEDEB@printf?5?$AA@			; `string'
PUBLIC	??_C@_08DDAFHHJG@sprintf?5?$AA@			; `string'
PUBLIC	??_C@_0O@CIMNNBLM@datafilename?5?$AA@		; `string'
PUBLIC	??_C@_0BC@DILLGGAL@warning_messages?5?$AA@	; `string'
PUBLIC	??_C@_0BA@OACEACLK@transform_expr?5?$AA@	; `string'
PUBLIC	??_C@_08GICKAJOK@history?5?$AA@			; `string'
PUBLIC	??_C@_09PGLJMKEH@continue?5?$AA@		; `string'
PUBLIC	??_C@_0M@PLJOCOHN@continue?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_06DLBOLJLP@break?5?$AA@			; `string'
PUBLIC	??_C@_08OOPHKIOJ@break?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_0O@DICBBEEI@date_and_time?$AA@		; `string'
PUBLIC	??_C@_0BA@DKKLMIEO@evolver_version?$AA@		; `string'
PUBLIC	??_C@_07BKFMFPMO@return?5?$AA@			; `string'
PUBLIC	??_C@_05PDJBBECF@pause?$AA@			; `string'
PUBLIC	??_C@_0BA@OHLAHHBM@reset_profiling?$AA@		; `string'
PUBLIC	??_C@_0BA@IBOFDNEL@print?5profiling?$AA@	; `string'
PUBLIC	??_C@_0N@HEKOHBEK@flush_counts?$AA@		; `string'
PUBLIC	??_C@_0N@BFEIANBO@reset_counts?$AA@		; `string'
PUBLIC	??_C@_0BL@KFJJNIHG@unset?5constraint?5?$CFs?5global?$AA@ ; `string'
PUBLIC	??_C@_0BJ@DICHIFDL@set?5constraint?5?$CFs?5global?$AA@ ; `string'
PUBLIC	??_C@_0BC@MDBPAFMN@unset?5constraint?5?$AA@	; `string'
PUBLIC	??_C@_08EALMPJOD@?5global?5?$AA@		; `string'
PUBLIC	??_C@_0BA@FHOMNLOC@set?5constraint?5?$AA@	; `string'
PUBLIC	??_C@_04LAOFCJDB@?5?$CFc?5?$AA@			; `string'
PUBLIC	??_C@_08JODPKOOO@?$FN?4normal?$AA@		; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_0N@PGNKLKGF@?4constraint?$FL?$AA@		; `string'
PUBLIC	??_C@_03KEMCFGNA@?4?$CFs?$AA@			; `string'
PUBLIC	??_C@_03EEBNCBOD@?5?$CFs?$AA@			; `string'
PUBLIC	??_C@_06EBLGCNEC@print?5?$AA@			; `string'
PUBLIC	??_C@_03NONHGIEJ@?5?$CK?5?$AA@			; `string'
PUBLIC	??_C@_04LJHKMKOP@?5?1?$DN?5?$AA@		; `string'
PUBLIC	??_C@_04IOKEDKNN@?5?$CK?$DN?5?$AA@		; `string'
PUBLIC	??_C@_04BDHDACGE@?5?9?$DN?5?$AA@		; `string'
PUBLIC	??_C@_04DGBIFNLI@?5?$CL?$DN?5?$AA@		; `string'
PUBLIC	??_C@_04NOLNGNEC@?5?3?$DN?5?$AA@		; `string'
PUBLIC	??_C@_04KBDJOJNB@?$FL?$CFd?$FN?$AA@		; `string'
PUBLIC	??_C@_0N@KLABKDID@define?5?$CFs?5?$CFs?$AA@	; `string'
PUBLIC	??_C@_0L@LLAPKIKO@?5function?5?$AA@		; `string'
PUBLIC	??_C@_0BK@OOLEHMJN@define?5?$CFs?5attribute?5?$CFs?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0DE@INHIPMAN@?1?$CK?5Definition?5of?5boundary?5?$CFd?5was@ ; `string'
PUBLIC	??_C@_0DE@BLDPCHML@?1?$CK?5Definition?5of?5boundary?5?$CFs?5was@ ; `string'
PUBLIC	??_C@_0DG@DNPIOFL@?1?$CK?5Definition?5of?5constraint?5?$CFd?5w@ ; `string'
PUBLIC	??_C@_0DG@JFJIFFJN@?1?$CK?5Definition?5of?5constraint?5?$CFs?5w@ ; `string'
PUBLIC	??_C@_0DL@PIPFCDIL@?1?$CK?5Definition?5of?5method?5instance@ ; `string'
PUBLIC	??_C@_0DE@JKPGKFB@?1?$CK?5Definition?5of?5quantity?5?$CFs?5was@ ; `string'
PUBLIC	??_C@_06FOGGDAIC@local?5?$AA@			; `string'
PUBLIC	??_C@_01CELHOKLL@?$HN?$AA@			; `string'
PUBLIC	??_C@_02MNJOIFPO@?$HL?5?$AA@			; `string'
PUBLIC	??_C@_0N@LGCBLIJP@facet_merge?$CI?$AA@		; `string'
PUBLIC	??_C@_0M@PJOFJFAC@edge_merge?$CI?$AA@		; `string'
PUBLIC	??_C@_0O@NNPGAOLH@vertex_merge?$CI?$AA@		; `string'
PUBLIC	??_C@_0BH@CJCHMGEH@matrix_determinant?$CI?$CFs?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BK@EMGJAFJA@matrix_multiply?$CI?$CFs?0?$CFs?0?$CFs?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BG@ICBGMJLO@matrix_inverse?$CI?$CFs?0?$CFs?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BA@BCKHPENM@valid_boundary?$CI?$AA@	; `string'
PUBLIC	??_C@_0BC@PBMMAEOP@valid_constraint?$CI?$AA@	; `string'
PUBLIC	??_C@_02CAJMAEOF@?$FN?$CJ?$AA@			; `string'
PUBLIC	??_C@_0BC@HAFOGDEI@valid_element?$CI?$CFs?$FL?$AA@ ; `string'
PUBLIC	??_C@_08IHIBGNIK@?$CFs?$CFd?$EA?$CFd?6?$AA@	; `string'
PUBLIC	??_C@_02BINJDKOC@?5?9?$AA@			; `string'
PUBLIC	??_C@_08PANPCJAE@new_body?$AA@			; `string'
PUBLIC	??_C@_0L@EONBLCMF@new_facet?$CI?$AA@		; `string'
PUBLIC	??_C@_09DHJMEBMJ@new_edge?$CI?$AA@		; `string'
PUBLIC	??_C@_0BA@JMJFPOOP@facet_crosscut?$CI?$AA@	; `string'
PUBLIC	??_C@_0M@CPPKCNFJ@new_vertex?$CI?$AA@		; `string'
PUBLIC	??_C@_01IHBHIGKO@?0?$AA@			; `string'
PUBLIC	??_C@_0N@MHMLBPOO@wrap_vertex?$CI?$AA@		; `string'
PUBLIC	??_C@_03LHCEFAHM@?5?$HN?5?$AA@			; `string'
PUBLIC	??_C@_0M@PNBOCBHK@?5function?5?$HL?$AA@		; `string'
PUBLIC	??_C@_02KEGNLNML@?0?5?$AA@			; `string'
PUBLIC	??_C@_02ENHNEHDL@?$DL?$GA?$AA@			; `string'
PUBLIC	??_C@_0P@CIAKADLN@?$FN?4nonpositive?5?$AA@	; `string'
PUBLIC	??_C@_0P@EPFNEJMO@?$FN?4nonnegative?5?$AA@	; `string'
PUBLIC	??_C@_08KOIKPBDI@?$FN?4fixed?5?$AA@		; `string'
PUBLIC	??_C@_0P@OLFNJOBD@is_constraint?$FL?$AA@	; `string'
PUBLIC	??_C@_0N@GCKGCNIB@delete_text?$CI?$AA@		; `string'
PUBLIC	??_C@_0O@BIKLGEAI@display_text?$CI?$AA@		; `string'
PUBLIC	??_C@_02LNAEAIDO@?$DL?5?$AA@			; `string'
PUBLIC	??_C@_08EJMMFDE@logfile?5?$AA@			; `string'
PUBLIC	??_C@_0M@OLFPELNL@keylogfile?5?$AA@		; `string'
PUBLIC	??_C@_0BE@LDMGAIBD@unsuppress_warning?5?$AA@	; `string'
PUBLIC	??_C@_0BC@MALBFLFO@suppress_warning?5?$AA@	; `string'
PUBLIC	??_C@_0BC@NOJGAMCH@unset?5breakpoints?$AA@	; `string'
PUBLIC	??_C@_0BF@KDLHDBHK@unset?5breakpoint?5?$CFs?5?$AA@ ; `string'
PUBLIC	??_C@_02MCILKGOH@?$HL?$HN?$AA@			; `string'
PUBLIC	??_C@_06BGEGKFCE@abort?5?$AA@			; `string'
PUBLIC	??_C@_0P@HOFIKNGF@breakpoint?5?$CFs?5?$AA@	; `string'
PUBLIC	__$ArrayPad$
EXTRN	_tokname:PROC
EXTRN	_errmsg:BYTE
EXTRN	_msg:DWORD
EXTRN	_default_name:DWORD
EXTRN	_keywordname:PROC
EXTRN	_single_redefine:BYTE
EXTRN	_get_name_name:PROC
EXTRN	_datatype_name:BYTE
EXTRN	_meth_inst_list:DWORD
EXTRN	_gen_quant_list:DWORD
EXTRN	_typenames:BYTE
EXTRN	_dymem:DWORD
EXTRN	_web:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_vch	DB	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0P@DFGJEPPA@procedure?5?$CFs?5?$CI?$AA@
CONST	SEGMENT
??_C@_0P@DFGJEPPA@procedure?5?$CFs?5?$CI?$AA@ DB 'procedure %s (', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@JKBDOPAM@Printing?5of?5expression?5node?5type@
CONST	SEGMENT
??_C@_0DJ@JKBDOPAM@Printing?5of?5expression?5node?5type@ DB 'Printing of '
	DB	'expression node type %s (%d) unimplemented.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GPGAJHPD@?$CIunknown?$CJ?$AA@
CONST	SEGMENT
??_C@_09GPGAJHPD@?$CIunknown?$CJ?$AA@ DB '(unknown)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03NBFACCKM@?$CJ?$DL?6?$AA@
CONST	SEGMENT
??_C@_03NBFACCKM@?$CJ?$DL?6?$AA@ DB ');', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02MNMNLDAI@?$CJ?6?$AA@
CONST	SEGMENT
??_C@_02MNMNLDAI@?$CJ?6?$AA@ DB ')', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CHELAHME@function?5?$CFs?5?$CFs?5?$CI?$AA@
CONST	SEGMENT
??_C@_0BB@CHELAHME@function?5?$CFs?5?$CFs?5?$CI?$AA@ DB 'function %s %s ('
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_03HHCAAOLL@?$CJ?3?$CI?$AA@
CONST	SEGMENT
??_C@_03HHCAAOLL@?$CJ?3?$CI?$AA@ DB '):(', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01HCONENDN@?$HL?$AA@
CONST	SEGMENT
??_C@_01HCONENDN@?$HL?$AA@ DB '{', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08CIJIHMDB@?$CFc?5?3?3?3?$DN?5?$AA@
CONST	SEGMENT
??_C@_08CIJIHMDB@?$CFc?5?3?3?3?$DN?5?$AA@ DB '%c :::= ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PJAPHMCA@show_expr?5?$AA@
CONST	SEGMENT
??_C@_0L@PJAPHMCA@show_expr?5?$AA@ DB 'show_expr ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CJDDBPIE@make_thread_lists?5?$AA@
CONST	SEGMENT
??_C@_0BD@CJDDBPIE@make_thread_lists?5?$AA@ DB 'make_thread_lists ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05OINEHIOC@else?5?$AA@
CONST	SEGMENT
??_C@_05OINEHIOC@else?5?$AA@ DB 'else ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BBJKINFE@?5?$HM?$HM?5?$AA@
CONST	SEGMENT
??_C@_04BBJKINFE@?5?$HM?$HM?5?$AA@ DB ' || ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04NEABMJPE@?5?$CG?$CG?5?$AA@
CONST	SEGMENT
??_C@_04NEABMJPE@?5?$CG?$CG?5?$AA@ DB ' && ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03MGHMLHIL@?5?$DM?5?$AA@
CONST	SEGMENT
??_C@_03MGHMLHIL@?5?$DM?5?$AA@ DB ' < ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03MFPIGDOF@?5?$DO?5?$AA@
CONST	SEGMENT
??_C@_03MFPIGDOF@?5?$DO?5?$AA@ DB ' > ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PLNGDCJO@?5?$DM?$DN?5?$AA@
CONST	SEGMENT
??_C@_04PLNGDCJO@?5?$DM?$DN?5?$AA@ DB ' <= ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04FBNPPKBF@?5?$DO?$DN?5?$AA@
CONST	SEGMENT
??_C@_04FBNPPKBF@?5?$DO?$DN?5?$AA@ DB ' >= ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04FJKFLNNM@?5?$CB?$DN?5?$AA@
CONST	SEGMENT
??_C@_04FJKFLNNM@?5?$CB?$DN?5?$AA@ DB ' != ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04EDGKFFPL@?5?$DN?$DN?5?$AA@
CONST	SEGMENT
??_C@_04EDGKFFPL@?5?$DN?$DN?5?$AA@ DB ' == ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02GFKOMOKH@?5?$CI?$AA@
CONST	SEGMENT
??_C@_02GFKOMOKH@?5?$CI?$AA@ DB ' (', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@GOMFLGCL@Internal?5error?3?5bad?5SET_ATTRIBUT@
CONST	SEGMENT
??_C@_0CM@GOMFLGCL@Internal?5error?3?5bad?5SET_ATTRIBUT@ DB 'Internal err'
	DB	'or: bad SET_ATTRIBUTE type %d.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02OPGFLNEK@p4?$AA@
CONST	SEGMENT
??_C@_02OPGFLNEK@p4?$AA@ DB 'p4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KACECLIN@p3?$AA@
CONST	SEGMENT
??_C@_02KACECLIN@p3?$AA@ DB 'p3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LJDPBKMM@p2?$AA@
CONST	SEGMENT
??_C@_02LJDPBKMM@p2?$AA@ DB 'p2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JCBCEJAP@p1?$AA@
CONST	SEGMENT
??_C@_02JCBCEJAP@p1?$AA@ DB 'p1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MJGCILEH@p1?$FL?$AA@
CONST	SEGMENT
??_C@_03MJGCILEH@p1?$FL?$AA@ DB 'p1[', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02ENMDKDPO@x8?$AA@
CONST	SEGMENT
??_C@_02ENMDKDPO@x8?$AA@ DB 'x8', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MKFLLPDB@x7?$AA@
CONST	SEGMENT
??_C@_02MKFLLPDB@x7?$AA@ DB 'x7', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02NDEAIOHA@x6?$AA@
CONST	SEGMENT
??_C@_02NDEAIOHA@x6?$AA@ DB 'x6', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PIGNNNLD@x5?$AA@
CONST	SEGMENT
??_C@_02PIGNNNLD@x5?$AA@ DB 'x5', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OBHGOMPC@x4?$AA@
CONST	SEGMENT
??_C@_02OBHGOMPC@x4?$AA@ DB 'x4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GLPGHMHM@z?$AA@
CONST	SEGMENT
??_C@_01GLPGHMHM@z?$AA@ DB 'z', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KODHHKDF@x3?$AA@
CONST	SEGMENT
??_C@_02KODHHKDF@x3?$AA@ DB 'x3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EANLCPLP@y?$AA@
CONST	SEGMENT
??_C@_01EANLCPLP@y?$AA@ DB 'y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09ENCBKJCG@boundary?5?$AA@
CONST	SEGMENT
??_C@_09ENCBKJCG@boundary?5?$AA@ DB 'boundary ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEAKBNCK@mpi_task?$AA@
CONST	SEGMENT
??_C@_08KEAKBNCK@mpi_task?$AA@ DB 'mpi_task', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06EMCPHFGM@volume?$AA@
CONST	SEGMENT
??_C@_06EMCPHFGM@volume?$AA@ DB 'volume', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GOEDGNCF@area?$AA@
CONST	SEGMENT
??_C@_04GOEDGNCF@area?$AA@ DB 'area', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BKGECACE@dihedral?$AA@
CONST	SEGMENT
??_C@_08BKGECACE@dihedral?$AA@ DB 'dihedral', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07MEIPJMCG@sqcurve?$AA@
CONST	SEGMENT
??_C@_07MEIPJMCG@sqcurve?$AA@ DB 'sqcurve', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NFDDIEML@wrap?$AA@
CONST	SEGMENT
??_C@_04NFDDIEML@wrap?$AA@ DB 'wrap', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09BPLDEHMH@mid_facet?$AA@
CONST	SEGMENT
??_C@_09BPLDEHMH@mid_facet?$AA@ DB 'mid_facet', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08EJNLDOMI@mid_edge?$AA@
CONST	SEGMENT
??_C@_08EJNLDOMI@mid_edge?$AA@ DB 'mid_edge', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KBMGOFNF@no_hessian_normal?$AA@
CONST	SEGMENT
??_C@_0BC@KBMGOFNF@no_hessian_normal?$AA@ DB 'no_hessian_normal', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HEBLBDOI@volfixed?$AA@
CONST	SEGMENT
??_C@_08HEBLBDOI@volfixed?$AA@ DB 'volfixed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FKOPBMAL@mean_curvature?$AA@
CONST	SEGMENT
??_C@_0P@FKOPBMAL@mean_curvature?$AA@ DB 'mean_curvature', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06IJDLPEM@length?$AA@
CONST	SEGMENT
??_C@_06IJDLPEM@length?$AA@ DB 'length', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FKMICODN@show?$AA@
CONST	SEGMENT
??_C@_04FKMICODN@show?$AA@ DB 'show', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KPMDGEHG@orientation?$AA@
CONST	SEGMENT
??_C@_0M@KPMDGEHG@orientation?$AA@ DB 'orientation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08JONLCJIM@backbody?$AA@
CONST	SEGMENT
??_C@_08JONLCJIM@backbody?$AA@ DB 'backbody', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09GNLMKAKO@frontbody?$AA@
CONST	SEGMENT
??_C@_09GNLMKAKO@frontbody?$AA@ DB 'frontbody', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OPNKCLNO@backcolor?$AA@
CONST	SEGMENT
??_C@_09OPNKCLNO@backcolor?$AA@ DB 'backcolor', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DKEJANLD@frontcolor?$AA@
CONST	SEGMENT
??_C@_0L@DKEJANLD@frontcolor?$AA@ DB 'frontcolor', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05PEENBMOG@color?$AA@
CONST	SEGMENT
??_C@_05PEENBMOG@color?$AA@ DB 'color', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HKCFKCGH@valence?$AA@
CONST	SEGMENT
??_C@_07HKCFKCGH@valence?$AA@ DB 'valence', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03PLGJJJLK@oid?$AA@
CONST	SEGMENT
??_C@_03PLGJJJLK@oid?$AA@ DB 'oid', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGCJHIOB@id?$AA@
CONST	SEGMENT
??_C@_02EGCJHIOB@id?$AA@ DB 'id', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08LAAABFKN@original?$AA@
CONST	SEGMENT
??_C@_08LAAABFKN@original?$AA@ DB 'original', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DKEDBIHO@noncontent?$AA@
CONST	SEGMENT
??_C@_0L@DKEDBIHO@noncontent?$AA@ DB 'noncontent', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05OFLEIIDM@fixed?$AA@
CONST	SEGMENT
??_C@_05OFLEIIDM@fixed?$AA@ DB 'fixed', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BIHLDDLK@axial_point?$AA@
CONST	SEGMENT
??_C@_0M@BIHLDDLK@axial_point?$AA@ DB 'axial_point', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DFLKEBKH@tetra_point?$AA@
CONST	SEGMENT
??_C@_0M@DFLKEBKH@tetra_point?$AA@ DB 'tetra_point', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DHNCNHBM@triple_point?$AA@
CONST	SEGMENT
??_C@_0N@DHNCNHBM@triple_point?$AA@ DB 'triple_point', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04CIOKLOBL@midv?$AA@
CONST	SEGMENT
??_C@_04CIOKLOBL@midv?$AA@ DB 'midv', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KCHJBOEN@on_boundary?5?$AA@
CONST	SEGMENT
??_C@_0N@KCHJBOEN@on_boundary?5?$AA@ DB 'on_boundary ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06OPEHNENO@?5value?$AA@
CONST	SEGMENT
??_C@_06OPEHNENO@?5value?$AA@ DB ' value', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@ICBGKBMB@value_of_constraint?5?$AA@
CONST	SEGMENT
??_C@_0BF@ICBGKBMB@value_of_constraint?5?$AA@ DB 'value_of_constraint ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DDGBMOJE@hit_constraint?5?$AA@
CONST	SEGMENT
??_C@_0BA@DDGBMOJE@hit_constraint?5?$AA@ DB 'hit_constraint ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NECEKGOL@on_constraint?5?$AA@
CONST	SEGMENT
??_C@_0P@NECEKGOL@on_constraint?5?$AA@ DB 'on_constraint ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FCGNGMMH@on_method_instance?5?$AA@
CONST	SEGMENT
??_C@_0BE@FCGNGMMH@on_method_instance?5?$AA@ DB 'on_method_instance ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LJDCMFBO@on_quantity?5?$AA@
CONST	SEGMENT
??_C@_0N@LJDCMFBO@on_quantity?5?$AA@ DB 'on_quantity ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05MKKKJBDN@?5not?5?$AA@
CONST	SEGMENT
??_C@_05MKKKJBDN@?5not?5?$AA@ DB ' not ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OBLFGKBL@ellipticE?$CI?$AA@
CONST	SEGMENT
??_C@_0L@OBLFGKBL@ellipticE?$CI?$AA@ DB 'ellipticE(', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OLCLEHBB@ellipticK?$CI?$AA@
CONST	SEGMENT
??_C@_0L@OLCLEHBB@ellipticK?$CI?$AA@ DB 'ellipticK(', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05BNEJBMEK@atan?$CI?$AA@
CONST	SEGMENT
??_C@_05BNEJBMEK@atan?$CI?$AA@ DB 'atan(', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DLKIBAMI@acos?$CI?$AA@
CONST	SEGMENT
??_C@_05DLKIBAMI@acos?$CI?$AA@ DB 'acos(', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GKNNOILF@asin?$CI?$AA@
CONST	SEGMENT
??_C@_05GKNNOILF@asin?$CI?$AA@ DB 'asin(', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BGJPAGPE@log?$CI?$AA@
CONST	SEGMENT
??_C@_04BGJPAGPE@log?$CI?$AA@ DB 'log(', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MPCILOFG@exp?$CI?$AA@
CONST	SEGMENT
??_C@_04MPCILOFG@exp?$CI?$AA@ DB 'exp(', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KJABJGAL@tan?$CI?$AA@
CONST	SEGMENT
??_C@_04KJABJGAL@tan?$CI?$AA@ DB 'tan(', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IPOAJKIJ@cos?$CI?$AA@
CONST	SEGMENT
??_C@_04IPOAJKIJ@cos?$CI?$AA@ DB 'cos(', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NOJFGCPE@sin?$CI?$AA@
CONST	SEGMENT
??_C@_04NOJFGCPE@sin?$CI?$AA@ DB 'sin(', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LLNDMCPI@atanh?$CI?$AA@
CONST	SEGMENT
??_C@_06LLNDMCPI@atanh?$CI?$AA@ DB 'atanh(', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JGKGLJIB@asinh?$CI?$AA@
CONST	SEGMENT
??_C@_06JGKGLJIB@asinh?$CI?$AA@ DB 'asinh(', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06LIEDMBPI@acosh?$CI?$AA@
CONST	SEGMENT
??_C@_06LIEDMBPI@acosh?$CI?$AA@ DB 'acosh(', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05LKLMPLHE@tanh?$CI?$AA@
CONST	SEGMENT
??_C@_05LKLMPLHE@tanh?$CI?$AA@ DB 'tanh(', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LJCMPIHE@cosh?$CI?$AA@
CONST	SEGMENT
??_C@_05LJCMPIHE@cosh?$CI?$AA@ DB 'cosh(', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JHMJIAAN@sinh?$CI?$AA@
CONST	SEGMENT
??_C@_05JHMJIAAN@sinh?$CI?$AA@ DB 'sinh(', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HEKBBDE@abs?$CI?$AA@
CONST	SEGMENT
??_C@_04HEKBBDE@abs?$CI?$AA@ DB 'abs(', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MLDBPPPC@ceil?$CI?$AA@
CONST	SEGMENT
??_C@_05MLDBPPPC@ceil?$CI?$AA@ DB 'ceil(', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IHMMIDCC@floor?$CI?$AA@
CONST	SEGMENT
??_C@_06IHMMIDCC@floor?$CI?$AA@ DB 'floor(', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MIKKOOHN@sqrt?$CI?$AA@
CONST	SEGMENT
??_C@_05MIKKOOHN@sqrt?$CI?$AA@ DB 'sqrt(', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IINDJHJM@?$CJ?$FO2?$AA@
CONST	SEGMENT
??_C@_03IINDJHJM@?$CJ?$FO2?$AA@ DB ')^2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HFHNBMBB@wrap_inverse?$CI?$AA@
CONST	SEGMENT
??_C@_0O@HFHNBMBB@wrap_inverse?$CI?$AA@ DB 'wrap_inverse(', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ICELJODO@wrap_compose?$CI?$AA@
CONST	SEGMENT
??_C@_0O@ICELJODO@wrap_compose?$CI?$AA@ DB 'wrap_compose(', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06NKPIGJJO@atan2?$CI?$AA@
CONST	SEGMENT
??_C@_06NKPIGJJO@atan2?$CI?$AA@ DB 'atan2(', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NPPPB@incompleteEllipticE?$CI?$AA@
CONST	SEGMENT
??_C@_0BF@NPPPB@incompleteEllipticE?$CI?$AA@ DB 'incompleteEllipticE(', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CELEBKI@incompleteEllipticF?$CI?$AA@
CONST	SEGMENT
??_C@_0BF@CELEBKI@incompleteEllipticF?$CI?$AA@ DB 'incompleteEllipticF(', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KPBNEKJD@minimum?$CI?$AA@
CONST	SEGMENT
??_C@_08KPBNEKJD@minimum?$CI?$AA@ DB 'minimum(', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HIPGPINC@maximum?$CI?$AA@
CONST	SEGMENT
??_C@_08HIPGPINC@maximum?$CI?$AA@ DB 'maximum(', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02FKAPCJPD@?$CK?$CK?$AA@
CONST	SEGMENT
??_C@_02FKAPCJPD@?$CK?$CK?$AA@ DB '**', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NCKAHEA@?$FO?$CF1d?$AA@
CONST	SEGMENT
??_C@_04NCKAHEA@?$FO?$CF1d?$AA@ DB '^%1d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LKLPDELB@?$FO?$CI?91?$CJ?$AA@
CONST	SEGMENT
??_C@_05LKLPDELB@?$FO?$CI?91?$CJ?$AA@ DB '^(-1)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03HBOLMMFA@?$CJ?$DP?$CI?$AA@
CONST	SEGMENT
??_C@_03HBOLMMFA@?$CJ?$DP?$CI?$AA@ DB ')?(', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06GNLBBOML@?5idiv?5?$AA@
CONST	SEGMENT
??_C@_06GNLBBOML@?5idiv?5?$AA@ DB ' idiv ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FKGIFEHI@?5imod?5?$AA@
CONST	SEGMENT
??_C@_06FKGIFEHI@?5imod?5?$AA@ DB ' imod ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01FGNFDNOH@?$CF?$AA@
CONST	SEGMENT
??_C@_01FGNFDNOH@?$CF?$AA@ DB '%', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01NBENCBCI@?$CK?$AA@
CONST	SEGMENT
??_C@_01NBENCBCI@?$CK?$AA@ DB '*', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MHLONNLM@?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_03MHLONNLM@?5?$DN?5?$AA@ DB ' = ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KMDKNFGN@?1?$AA@
CONST	SEGMENT
??_C@_01KMDKNFGN@?1?$AA@ DB '/', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NLJIHOMM@?5?9?5?$AA@
CONST	SEGMENT
??_C@_03NLJIHOMM@?5?9?5?$AA@ DB ' - ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NPBFACHO@?5?$CL?5?$AA@
CONST	SEGMENT
??_C@_03NPBFACHO@?5?$CL?5?$AA@ DB ' + ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FFIBBKIO@usr?$CFd?$AA@
CONST	SEGMENT
??_C@_05FFIBBKIO@usr?$CFd?$AA@ DB 'usr%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KAJJHIBE@total?5?$CFs?$AA@
CONST	SEGMENT
??_C@_08KAJJHIBE@total?5?$CFs?$AA@ DB 'total %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05NNFHCGPF@?$CFs?4?$CFs?$AA@
CONST	SEGMENT
??_C@_05NNFHCGPF@?$CFs?4?$CFs?$AA@ DB '%s.%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LMDPDPKO@?$CFs?4p_velocity?$AA@
CONST	SEGMENT
??_C@_0O@LMDPDPKO@?$CFs?4p_velocity?$AA@ DB '%s.p_velocity', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BLNBIMLF@?$CFs?4p_force?$AA@
CONST	SEGMENT
??_C@_0L@BLNBIMLF@?$CFs?4p_force?$AA@ DB '%s.p_force', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KHJHMLJD@?$CFs?4volconst?$AA@
CONST	SEGMENT
??_C@_0M@KHJHMLJD@?$CFs?4volconst?$AA@ DB '%s.volconst', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IHGBGJIM@?$CFs?4modulus?$AA@
CONST	SEGMENT
??_C@_0L@IHGBGJIM@?$CFs?4modulus?$AA@ DB '%s.modulus', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08COKEDFMM@?$CFs?4value?$AA@
CONST	SEGMENT
??_C@_08COKEDFMM@?$CFs?4value?$AA@ DB '%s.value', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09GLPADBIC@?$CFs?4target?$AA@
CONST	SEGMENT
??_C@_09GLPADBIC@?$CFs?4target?$AA@ DB '%s.target', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NFGODCJB@?$CFs?4pressure?$AA@
CONST	SEGMENT
??_C@_0M@NFGODCJB@?$CFs?4pressure?$AA@ DB '%s.pressure', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KCPNEKBJ@?$CFs?4conserved?$AA@
CONST	SEGMENT
??_C@_0N@KCPNEKBJ@?$CFs?4conserved?$AA@ DB '%s.conserved', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IJLOHMIH@?$CFs?4info_only?$AA@
CONST	SEGMENT
??_C@_0N@IJLOHMIH@?$CFs?4info_only?$AA@ DB '%s.info_only', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09FICCFCDB@?$CFs?4energy?$AA@
CONST	SEGMENT
??_C@_09FICCFCDB@?$CFs?4energy?$AA@ DB '%s.energy', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08MHEECOGP@?$CFs?4fixed?$AA@
CONST	SEGMENT
??_C@_08MHEECOGP@?$CFs?4fixed?$AA@ DB '%s.fixed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KCCCOBAL@?$CFs?4tolerance?5?$CFs?5?$AA@
CONST	SEGMENT
??_C@_0BB@KCCCOBAL@?$CFs?4tolerance?5?$CFs?5?$AA@ DB '%s.tolerance %s ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NBKDJPNO@?$CFs?4volconst?5?$CFs?5?$AA@
CONST	SEGMENT
??_C@_0BA@NBKDJPNO@?$CFs?4volconst?5?$CFs?5?$AA@ DB '%s.volconst %s ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DJDLCKNJ@?$CFs?4target?5?$CFs?5?$AA@
CONST	SEGMENT
??_C@_0O@DJDLCKNJ@?$CFs?4target?5?$CFs?5?$AA@ DB '%s.target %s ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HKKNDHOK@?$CFs?4modulus?5?$CFs?5?$AA@
CONST	SEGMENT
??_C@_0P@HKKNDHOK@?$CFs?4modulus?5?$CFs?5?$AA@ DB '%s.modulus %s ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03IKJDKKNH@p?$CFd?$AA@
CONST	SEGMENT
??_C@_03IKJDKKNH@p?$CFd?$AA@ DB 'p%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CGHINKND@?$CFc?$CFd?$AA@
CONST	SEGMENT
??_C@_04CGHINKND@?$CFc?$CFd?$AA@ DB '%c%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02HAOIJKIC@?$CFc?$AA@
CONST	SEGMENT
??_C@_02HAOIJKIC@?$CFc?$AA@ DB '%c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01BBODEMC@G?$AA@
CONST	SEGMENT
??_C@_01BBODEMC@G?$AA@ DB 'G', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KGKMHCOC@e?$AA@
CONST	SEGMENT
??_C@_01KGKMHCOC@e?$AA@ DB 'e', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OAHAJOFD@pi?$AA@
CONST	SEGMENT
??_C@_02OAHAJOFD@pi?$AA@ DB 'pi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06OEKDGAI@?$CF1?415g?$AA@
CONST	SEGMENT
??_C@_06OEKDGAI@?$CF1?415g?$AA@ DB '%1.15g', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HEHJIEEA@?4bodies?5?$AA@
CONST	SEGMENT
??_C@_08HEHJIEEA@?4bodies?5?$AA@ DB '.bodies ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07LNGBBGLG@bodies?5?$AA@
CONST	SEGMENT
??_C@_07LNGBBGLG@bodies?5?$AA@ DB 'bodies ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JAFMBMKE@?4facets?5?$AA@
CONST	SEGMENT
??_C@_08JAFMBMKE@?4facets?5?$AA@ DB '.facets ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07FJEEIOFC@facets?5?$AA@
CONST	SEGMENT
??_C@_07FJEEIOFC@facets?5?$AA@ DB 'facets ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07NIBDCADL@?4edges?5?$AA@
CONST	SEGMENT
??_C@_07NIBDCADL@?4edges?5?$AA@ DB '.edges ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06MMKBFAEI@edges?5?$AA@
CONST	SEGMENT
??_C@_06MMKBFAEI@edges?5?$AA@ DB 'edges ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GFMBBPLG@?4vertices?5?$AA@
CONST	SEGMENT
??_C@_0L@GFMBBPLG@?4vertices?5?$AA@ DB '.vertices ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DJCGGCPN@vertices?5?$AA@
CONST	SEGMENT
??_C@_09DJCGGCPN@vertices?5?$AA@ DB 'vertices ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HIBDCNLL@facetedges?5?$AA@
CONST	SEGMENT
??_C@_0M@HIBDCNLL@facetedges?5?$AA@ DB 'facetedges ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KOCBPMJD@loghistogram?$CI?$AA@
CONST	SEGMENT
??_C@_0O@KOCBPMJD@loghistogram?$CI?$AA@ DB 'loghistogram(', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MHHMKAFA@histogram?$CI?$AA@
CONST	SEGMENT
??_C@_0L@MHHMKAFA@histogram?$CI?$AA@ DB 'histogram(', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06MFABEKNP@count?$CI?$AA@
CONST	SEGMENT
??_C@_06MFABEKNP@count?$CI?$AA@ DB 'count(', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04MDBONKFA@avg?$CI?$AA@
CONST	SEGMENT
??_C@_04MDBONKFA@avg?$CI?$AA@ DB 'avg(', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MGBMDEIK@sum?$CI?$AA@
CONST	SEGMENT
??_C@_04MGBMDEIK@sum?$CI?$AA@ DB 'sum(', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BEFELBH@min?$CI?$AA@
CONST	SEGMENT
??_C@_04BEFELBH@min?$CI?$AA@ DB 'min(', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NMFKLMDK@max?$CI?$AA@
CONST	SEGMENT
??_C@_04NMFKLMDK@max?$CI?$AA@ DB 'max(', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08ECALEGKJ@foreach?5?$AA@
CONST	SEGMENT
??_C@_08ECALEGKJ@foreach?5?$AA@ DB 'foreach ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OFLPJMBB@?5where?5?$AA@
CONST	SEGMENT
??_C@_07OFLPJMBB@?5where?5?$AA@ DB ' where ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04ENCLHBOC@set?5?$AA@
CONST	SEGMENT
??_C@_04ENCLHBOC@set?5?$AA@ DB 'set ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BMDMDICD@hessian_normal?$AA@
CONST	SEGMENT
??_C@_0P@BMDMDICD@hessian_normal?$AA@ DB 'hessian_normal', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FGEAHLHH@boundary?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0M@FGEAHLHH@boundary?5?$CFs?$AA@ DB 'boundary %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KIKGFOKI@boundary?$AA@
CONST	SEGMENT
??_C@_08KIKGFOKI@boundary?$AA@ DB 'boundary', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NGEKOGMC@constraint?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0O@NGEKOGMC@constraint?5?$CFs?$AA@ DB 'constraint %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FCDDEKDG@method_instance?$AA@
CONST	SEGMENT
??_C@_0BA@FCDDEKDG@method_instance?$AA@ DB 'method_instance', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08OCNIHGPN@quantity?$AA@
CONST	SEGMENT
??_C@_08OCNIHGPN@quantity?$AA@ DB 'quantity', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HCINNPA@constraint?5?$AA@
CONST	SEGMENT
??_C@_0M@HCINNPA@constraint?5?$AA@ DB 'constraint ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HOHHMJMM@constraint?$AA@
CONST	SEGMENT
??_C@_0L@HOHHMJMM@constraint?$AA@ DB 'constraint', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07IJGPCJHC@opacity?$AA@
CONST	SEGMENT
??_C@_07IJGPCJHC@opacity?$AA@ DB 'opacity', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08POHEELCJ@pressure?$AA@
CONST	SEGMENT
??_C@_08POHEELCJ@pressure?$AA@ DB 'pressure', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JJLAMBGK@target?$AA@
CONST	SEGMENT
??_C@_06JJLAMBGK@target?$AA@ DB 'target', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IMINLCCL@volconst?$AA@
CONST	SEGMENT
??_C@_08IMINLCCL@volconst?$AA@ DB 'volconst', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07HAFFKDBK@density?$AA@
CONST	SEGMENT
??_C@_07HAFFKDBK@density?$AA@ DB 'density', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BGEKJPHF@bare?$AA@
CONST	SEGMENT
??_C@_04BGEKJPHF@bare?$AA@ DB 'bare', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CBPKLGJM@phase?$AA@
CONST	SEGMENT
??_C@_05CBPKLGJM@phase?$AA@ DB 'phase', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ODCODBLD@no_display?$AA@
CONST	SEGMENT
??_C@_0L@ODCODBLD@no_display?$AA@ DB 'no_display', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OFAMNBMC@centerofmass?$AA@
CONST	SEGMENT
??_C@_0N@OFAMNBMC@centerofmass?$AA@ DB 'centerofmass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CMIGFPCH@no_transform?$AA@
CONST	SEGMENT
??_C@_0N@CMIGFPCH@no_transform?$AA@ DB 'no_transform', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05EPBFLBEJ@unset?$AA@
CONST	SEGMENT
??_C@_05EPBFLBEJ@unset?$AA@ DB 'unset', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PFNGBABC@no_refine?$AA@
CONST	SEGMENT
??_C@_09PFNGBABC@no_refine?$AA@ DB 'no_refine', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03KCHOJKKI@set?$AA@
CONST	SEGMENT
??_C@_03KCHOJKKI@set?$AA@ DB 'set', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JAGBIOBF@hit_partner?$AA@
CONST	SEGMENT
??_C@_0M@JAGBIOBF@hit_partner?$AA@ DB 'hit_partner', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04PJDNGLKJ@self?$AA@
CONST	SEGMENT
??_C@_04PJDNGLKJ@self?$AA@ DB 'self', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NPDIJEBN@?4?$CFs?$FL?$AA@
CONST	SEGMENT
??_C@_04NPDIJEBN@?4?$CFs?$FL?$AA@ DB '.%s[', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HCNHJHCK@facetedge?$FL?$AA@
CONST	SEGMENT
??_C@_0L@HCNHJHCK@facetedge?$FL?$AA@ DB 'facetedge[', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05KGEIKHIF@body?$FL?$AA@
CONST	SEGMENT
??_C@_05KGEIKHIF@body?$FL?$AA@ DB 'body[', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JBIAMLBO@facet?$FL?$AA@
CONST	SEGMENT
??_C@_06JBIAMLBO@facet?$FL?$AA@ DB 'facet[', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MLBEFDNG@edge?$FL?$AA@
CONST	SEGMENT
??_C@_05MLBEFDNG@edge?$FL?$AA@ DB 'edge[', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GMIBILEA@vertex?$FL?$AA@
CONST	SEGMENT
??_C@_07GMIBILEA@vertex?$FL?$AA@ DB 'vertex[', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01FJMABOPO@x?$AA@
CONST	SEGMENT
??_C@_01FJMABOPO@x?$AA@ DB 'x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@ICOOBCNI@vertexnormal?$AA@
CONST	SEGMENT
??_C@_0N@ICOOBCNI@vertexnormal?$AA@ DB 'vertexnormal', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04KMMDIKEB@?5?$CFs?5?$AA@
CONST	SEGMENT
??_C@_04KMMDIKEB@?5?$CFs?5?$AA@ DB ' %s ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09OLACHOMO@whereami?5?$AA@
CONST	SEGMENT
??_C@_09OLACHOMO@whereami?5?$AA@ DB 'whereami ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KJJDFLC@reverse_orientation?5?$AA@
CONST	SEGMENT
??_C@_0BF@KJJDFLC@reverse_orientation?5?$AA@ DB 'reverse_orientation ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FPEGLGLO@t1_edgeswap?5?$AA@
CONST	SEGMENT
??_C@_0N@FPEGLGLO@t1_edgeswap?5?$AA@ DB 't1_edgeswap ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PDFHAOFI@pop_quad_to_quad?5?$AA@
CONST	SEGMENT
??_C@_0BC@PDFHAOFI@pop_quad_to_quad?5?$AA@ DB 'pop_quad_to_quad ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HLINOHGN@pop_tri_to_edge?5?$AA@
CONST	SEGMENT
??_C@_0BB@HLINOHGN@pop_tri_to_edge?5?$AA@ DB 'pop_tri_to_edge ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@POFEJAAI@pop_edge_to_tri?5?$AA@
CONST	SEGMENT
??_C@_0BB@POFEJAAI@pop_edge_to_tri?5?$AA@ DB 'pop_edge_to_tri ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PMHDHEAM@equiangulate?5?$AA@
CONST	SEGMENT
??_C@_0O@PMHDHEAM@equiangulate?5?$AA@ DB 'equiangulate ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LEHBHCDC@rawest_vertex_average?5?$AA@
CONST	SEGMENT
??_C@_0BH@LEHBHCDC@rawest_vertex_average?5?$AA@ DB 'rawest_vertex_average'
	DB	' ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LKOOEJIA@raw_vertex_average?5?$AA@
CONST	SEGMENT
??_C@_0BE@LKOOEJIA@raw_vertex_average?5?$AA@ DB 'raw_vertex_average ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EEDBPPPI@vertex_average?5?$AA@
CONST	SEGMENT
??_C@_0BA@EEDBPPPI@vertex_average?5?$AA@ DB 'vertex_average ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09KNDPNNNB@edgeswap?5?$AA@
CONST	SEGMENT
??_C@_09KNDPNNNB@edgeswap?5?$AA@ DB 'edgeswap ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HBAHJGAJ@unfix?5?$AA@
CONST	SEGMENT
??_C@_06HBAHJGAJ@unfix?5?$AA@ DB 'unfix ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KGOHCPMM@fix?5?$AA@
CONST	SEGMENT
??_C@_04KGOHCPMM@fix?5?$AA@ DB 'fix ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GCDPEDIK@pop?5?$AA@
CONST	SEGMENT
??_C@_04GCDPEDIK@pop?5?$AA@ DB 'pop ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PLEKKNFD@dissolve?5?$AA@
CONST	SEGMENT
??_C@_09PLEKKNFD@dissolve?5?$AA@ DB 'dissolve ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OHMIIBBL@refine?5?$AA@
CONST	SEGMENT
??_C@_07OHMIIBBL@refine?5?$AA@ DB 'refine ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07GNDMACL@delete?5?$AA@
CONST	SEGMENT
??_C@_07GNDMACL@delete?5?$AA@ DB 'delete ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BKNPGPBN@list?5?$AA@
CONST	SEGMENT
??_C@_05BKNPGPBN@list?5?$AA@ DB 'list ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BEPCFKIE@list?5bottominfo?5?$AA@
CONST	SEGMENT
??_C@_0BB@BEPCFKIE@list?5bottominfo?5?$AA@ DB 'list bottominfo ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NKCPFOBE@list?5topinfo?5?$AA@
CONST	SEGMENT
??_C@_0O@NKCPFOBE@list?5topinfo?5?$AA@ DB 'list topinfo ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PKNGHLMP@list?5boundary?5?$AA@
CONST	SEGMENT
??_C@_0P@PKNGHLMP@list?5boundary?5?$AA@ DB 'list boundary ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OAEJJBFK@list?5constraint?5?$AA@
CONST	SEGMENT
??_C@_0BB@OAEJJBFK@list?5constraint?5?$AA@ DB 'list constraint ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PNMIFIHL@list?5constraint?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BD@PNMIFIHL@list?5constraint?5?$CFs?$AA@ DB 'list constraint %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HLLNDPKC@list?5method_instance?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BI@HLLNDPKC@list?5method_instance?5?$CFs?$AA@ DB 'list method_inst'
	DB	'ance %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DBLGCJFN@list?5quantity?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BB@DBLGCJFN@list?5quantity?5?$CFs?$AA@ DB 'list quantity %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PEELHDCG@list?5attributes?5?$AA@
CONST	SEGMENT
??_C@_0BB@PEELHDCG@list?5attributes?5?$AA@ DB 'list attributes ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FEIJOBAO@list?5procedures?5?$AA@
CONST	SEGMENT
??_C@_0BB@FEIJOBAO@list?5procedures?5?$AA@ DB 'list procedures ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05FPPEDHBM@exit?5?$AA@
CONST	SEGMENT
??_C@_05FPPEDHBM@exit?5?$AA@ DB 'exit ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02NAHKEMLJ@j?5?$AA@
CONST	SEGMENT
??_C@_02NAHKEMLJ@j?5?$AA@ DB 'j ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07KIABCNGA@ometis?5?$AA@
CONST	SEGMENT
??_C@_07KIABCNGA@ometis?5?$AA@ DB 'ometis ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EHMDFEMF@edge_divide?5?$AA@
CONST	SEGMENT
??_C@_0N@EHMDFEMF@edge_divide?5?$AA@ DB 'edge_divide ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06LGDJAKGO@notch?5?$AA@
CONST	SEGMENT
??_C@_06LGDJAKGO@notch?5?$AA@ DB 'notch ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FOAHLABL@body?9metis?5?$AA@
CONST	SEGMENT
??_C@_0M@FOAHLABL@body?9metis?5?$AA@ DB 'body-metis ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CMELCDJK@kmetis?5?$AA@
CONST	SEGMENT
??_C@_07CMELCDJK@kmetis?5?$AA@ DB 'kmetis ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DAJKOHFA@metis_readjust?5?$AA@
CONST	SEGMENT
??_C@_0BA@DAJKOHFA@metis_readjust?5?$AA@ DB 'metis_readjust ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FJIEJPGA@metis?5?$AA@
CONST	SEGMENT
??_C@_06FJIEJPGA@metis?5?$AA@ DB 'metis ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09LIMDMHNO@edgeweed?5?$AA@
CONST	SEGMENT
??_C@_09LIMDMHNO@edgeweed?5?$AA@ DB 'edgeweed ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NIJIHPDB@areaweed?5?$AA@
CONST	SEGMENT
??_C@_09NIJIHPDB@areaweed?5?$AA@ DB 'areaweed ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05HEPJHAGN@move?5?$AA@
CONST	SEGMENT
??_C@_05HEPJHAGN@move?5?$AA@ DB 'move ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MBIEAIBG@hessian_seek?5?$AA@
CONST	SEGMENT
??_C@_0O@MBIEAIBG@hessian_seek?5?$AA@ DB 'hessian_seek ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07MAHMAIKH@saddle?5?$AA@
CONST	SEGMENT
??_C@_07MAHMAIKH@saddle?5?$AA@ DB 'saddle ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ODEJHEGJ@inverse_periods?$AA@
CONST	SEGMENT
??_C@_0BA@ODEJHEGJ@inverse_periods?$AA@ DB 'inverse_periods', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01OHGJGJJP@?$FL?$AA@
CONST	SEGMENT
??_C@_01OHGJGJJP@?$FL?$AA@ DB '[', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IMAKABFD@torus_periods?$AA@
CONST	SEGMENT
??_C@_0O@IMAKABFD@torus_periods?$AA@ DB 'torus_periods', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05HMJDJDEN@ritz?$CI?$AA@
CONST	SEGMENT
??_C@_05HMJDJDEN@ritz?$CI?$AA@ DB 'ritz(', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ELLGNMC@eigenprobe?5?$AA@
CONST	SEGMENT
??_C@_0M@ELLGNMC@eigenprobe?5?$AA@ DB 'eigenprobe ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08PJBNJOBI@lanczos?5?$AA@
CONST	SEGMENT
??_C@_08PJBNJOBI@lanczos?5?$AA@ DB 'lanczos ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KFKMHJDA@lagrange?5?$AA@
CONST	SEGMENT
??_C@_09KFKMHJDA@lagrange?5?$AA@ DB 'lagrange ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07CPAFJHCE@sizeof?$CI?$AA@
CONST	SEGMENT
??_C@_07CPAFJHCE@sizeof?$CI?$AA@ DB 'sizeof(', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PEDDBAKP@sizeof?$CI?$CFs?$CJ?$AA@
CONST	SEGMENT
??_C@_0L@PEDDBAKP@sizeof?$CI?$CFs?$CJ?$AA@ DB 'sizeof(%s)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03CJPCKGBB@?9?9?5?$AA@
CONST	SEGMENT
??_C@_03CJPCKGBB@?9?9?5?$AA@ DB '-- ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IBEIFHP@?$CL?$CL?5?$AA@
CONST	SEGMENT
??_C@_03IBEIFHP@?$CL?$CL?5?$AA@ DB '++ ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@
CONST	SEGMENT
??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@ DB '%s%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GODGAAIB@?5?9?9?$AA@
CONST	SEGMENT
??_C@_03GODGAAIB@?5?9?9?$AA@ DB ' --', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DMOBNLLF@?5?$CL?$CL?$AA@
CONST	SEGMENT
??_C@_03DMOBNLLF@?5?$CL?$CL?$AA@ DB ' ++', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PCAHILNI@?$CFs?5?1?$DN?5?$AA@
CONST	SEGMENT
??_C@_06PCAHILNI@?$CFs?5?1?$DN?5?$AA@ DB '%s /= ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06MFNJHLOK@?$CFs?5?$CK?$DN?5?$AA@
CONST	SEGMENT
??_C@_06MFNJHLOK@?$CFs?5?$CK?$DN?5?$AA@ DB '%s *= ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FIAOEDFD@?$CFs?5?9?$DN?5?$AA@
CONST	SEGMENT
??_C@_06FIAOEDFD@?$CFs?5?9?$DN?5?$AA@ DB '%s -= ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HNGFBMIP@?$CFs?5?$CL?$DN?5?$AA@
CONST	SEGMENT
??_C@_06HNGFBMIP@?$CFs?5?$CL?$DN?5?$AA@ DB '%s += ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DEIKBKKN@?$CFs?4no_dump?5off?5?$AA@
CONST	SEGMENT
??_C@_0BA@DEIKBKKN@?$CFs?4no_dump?5off?5?$AA@ DB '%s.no_dump off ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HHJNMIJK@?$CFs?4no_dump?5on?5?$AA@
CONST	SEGMENT
??_C@_0P@HHJNMIJK@?$CFs?4no_dump?5on?5?$AA@ DB '%s.no_dump on ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06JFMACMHF@?$CFs?5?3?$DN?5?$AA@
CONST	SEGMENT
??_C@_06JFMACMHF@?$CFs?5?3?$DN?5?$AA@ DB '%s := ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DMFHGJKH@?$CFs?5?3?3?$DN?5?$AA@
CONST	SEGMENT
??_C@_07DMFHGJKH@?$CFs?5?3?3?$DN?5?$AA@ DB '%s ::= ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LALPNJNO@?$CFs?4on_assign_call?5?3?$DN?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BI@LALPNJNO@?$CFs?4on_assign_call?5?3?$DN?5?$CFs?$AA@ DB '%s.on_as'
	DB	'sign_call := %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09PFECEPHA@?$CFs?4pscale?$AA@
CONST	SEGMENT
??_C@_09PFECEPHA@?$CFs?4pscale?$AA@ DB '%s.pscale', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OAOCGHOC@?$CFs?4pdelta?$AA@
CONST	SEGMENT
??_C@_09OAOCGHOC@?$CFs?4pdelta?$AA@ DB '%s.pdelta', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03ECLNAHEM@?$CFs?$CI?$AA@
CONST	SEGMENT
??_C@_03ECLNAHEM@?$CFs?$CI?$AA@ DB '%s(', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@
CONST	SEGMENT
??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@ DB '%s %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CBEMEMEM@burchard?5?$CFd?5?$AA@
CONST	SEGMENT
??_C@_0N@CBEMEMEM@burchard?5?$CFd?5?$AA@ DB 'burchard %d ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HNDHMNDL@detorus?5?$AA@
CONST	SEGMENT
??_C@_08HNDHMNDL@detorus?5?$AA@ DB 'detorus ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BKEGOHCM@subcommand?5?$AA@
CONST	SEGMENT
??_C@_0M@BKEGOHCM@subcommand?5?$AA@ DB 'subcommand ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CKNFECO@repartition?5?$AA@
CONST	SEGMENT
??_C@_0N@CKNFECO@repartition?5?$AA@ DB 'repartition ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IMACOPAH@free_discards?5?$AA@
CONST	SEGMENT
??_C@_0P@IMACOPAH@free_discards?5?$AA@ DB 'free_discards ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JHIKHPAF@dump_memlist?5?$AA@
CONST	SEGMENT
??_C@_0O@JHIKHPAF@dump_memlist?5?$AA@ DB 'dump_memlist ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DBMMCKIH@renumber_all?5?$AA@
CONST	SEGMENT
??_C@_0O@DBMMCKIH@renumber_all?5?$AA@ DB 'renumber_all ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EOIPALJK@convert_to_quantities?5?$AA@
CONST	SEGMENT
??_C@_0BH@EOIPALJK@convert_to_quantities?5?$AA@ DB 'convert_to_quantities'
	DB	' ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PFJLCOPI@sobolev_seek?5?$AA@
CONST	SEGMENT
??_C@_0O@PFJLCOPI@sobolev_seek?5?$AA@ DB 'sobolev_seek ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NMPGOPNM@dirichlet_seek?5?$AA@
CONST	SEGMENT
??_C@_0BA@NMPGOPNM@dirichlet_seek?5?$AA@ DB 'dirichlet_seek ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@ELMGCAEE@reorder_storage?5?$AA@
CONST	SEGMENT
??_C@_0BB@ELMGCAEE@reorder_storage?5?$AA@ DB 'reorder_storage ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KJFKOLCI@sobolev?5?$AA@
CONST	SEGMENT
??_C@_08KJFKOLCI@sobolev?5?$AA@ DB 'sobolev ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IAMJHGMM@dirichlet?5?$AA@
CONST	SEGMENT
??_C@_0L@IAMJHGMM@dirichlet?5?$AA@ DB 'dirichlet ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DJOBGCIG@hessian_menu?5?$AA@
CONST	SEGMENT
??_C@_0O@DJOBGCIG@hessian_menu?5?$AA@ DB 'hessian_menu ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06HGIJDJHM@showq?5?$AA@
CONST	SEGMENT
??_C@_06HGIJDJHM@showq?5?$AA@ DB 'showq ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ECJLFEKE@simplex_to_fe?$AA@
CONST	SEGMENT
??_C@_0O@ECJLFEKE@simplex_to_fe?$AA@ DB 'simplex_to_fe', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08PGAFJEDJ@hessian?5?$AA@
CONST	SEGMENT
??_C@_08PGAFJEDJ@hessian?5?$AA@ DB 'hessian ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07IJJIIMNN@rebody?5?$AA@
CONST	SEGMENT
??_C@_07IJJIIMNN@rebody?5?$AA@ DB 'rebody ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IJDLAEPK@quadratic?5?$AA@
CONST	SEGMENT
??_C@_0L@IJDLAEPK@quadratic?5?$AA@ DB 'quadratic ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07CBPAACLJ@linear?5?$AA@
CONST	SEGMENT
??_C@_07CBPAACLJ@linear?5?$AA@ DB 'linear ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DEBOAOL@extrapolate?5?$AA@
CONST	SEGMENT
??_C@_0N@DEBOAOL@extrapolate?5?$AA@ DB 'extrapolate ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08DFMDENPP@rawestv?5?$AA@
CONST	SEGMENT
??_C@_08DFMDENPP@rawestv?5?$AA@ DB 'rawestv ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07ODMECLPM@counts?5?$AA@
CONST	SEGMENT
??_C@_07ODMECLPM@counts?5?$AA@ DB 'counts ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07CJPBOPFA@recalc?5?$AA@
CONST	SEGMENT
??_C@_07CJPBOPFA@recalc?5?$AA@ DB 'recalc ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FGENMIEJ@alice?5?$AA@
CONST	SEGMENT
??_C@_06FGENMIEJ@alice?5?$AA@ DB 'alice ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KPNPMBGA@shell?5?$AA@
CONST	SEGMENT
??_C@_06KPNPMBGA@shell?5?$AA@ DB 'shell ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02NIKCNPOK@g?5?$AA@
CONST	SEGMENT
??_C@_02NIKCNPOK@g?5?$AA@ DB 'g ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06KCFEIDLL@utest?5?$AA@
CONST	SEGMENT
??_C@_06KCFEIDLL@utest?5?$AA@ DB 'utest ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GBCKKNJC@stability_test?5?$AA@
CONST	SEGMENT
??_C@_0BA@GBCKKNJC@stability_test?5?$AA@ DB 'stability_test ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05JPJFAEAO@rawv?5?$AA@
CONST	SEGMENT
??_C@_05JPJFAEAO@rawv?5?$AA@ DB 'rawv ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GJPIEBBJ@long_jiggle?5?$AA@
CONST	SEGMENT
??_C@_0N@GJPIEBBJ@long_jiggle?5?$AA@ DB 'long_jiggle ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06JFCNFLHN@check?5?$AA@
CONST	SEGMENT
??_C@_06JFCNFLHN@check?5?$AA@ DB 'check ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PKPCIIOC@show_vol?5?$AA@
CONST	SEGMENT
??_C@_09PKPCIIOC@show_vol?5?$AA@ DB 'show_vol ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DHGONGJP@colormap?5?3?$DN?5?$AA@
CONST	SEGMENT
??_C@_0N@DHGONGJP@colormap?5?3?$DN?5?$AA@ DB 'colormap := ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05OEFDBPID@dump?5?$AA@
CONST	SEGMENT
??_C@_05OEFDBPID@dump?5?$AA@ DB 'dump ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HIGONMEP@is_defined?$CI?$AA@
CONST	SEGMENT
??_C@_0M@HIGONMEP@is_defined?$CI?$AA@ DB 'is_defined(', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JMHAAMMM@view_transforms?$FL?$AA@
CONST	SEGMENT
??_C@_0BB@JMHAAMMM@view_transforms?$FL?$AA@ DB 'view_transforms[', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@CEMFOJOL@view_transform_swap_colors?$FL?$AA@
CONST	SEGMENT
??_C@_0BM@CEMFOJOL@view_transform_swap_colors?$FL?$AA@ DB 'view_transform'
	DB	'_swap_colors[', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OFAOMDFN@view_transform_parity?$FL?$AA@
CONST	SEGMENT
??_C@_0BH@OFAOMDFN@view_transform_parity?$FL?$AA@ DB 'view_transform_pari'
	DB	'ty[', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_09FLILHFPP@geomview?5?$AA@
CONST	SEGMENT
??_C@_09FLILHFPP@geomview?5?$AA@ DB 'geomview ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OHJEHJPG@show_trans?5?$AA@
CONST	SEGMENT
??_C@_0M@OHJEHJPG@show_trans?5?$AA@ DB 'show_trans ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GDNEAALN@replace_load?5?$AA@
CONST	SEGMENT
??_C@_0O@GDNEAALN@replace_load?5?$AA@ DB 'replace_load ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EECCEAIE@addload?5?$AA@
CONST	SEGMENT
??_C@_08EECCEAIE@addload?5?$AA@ DB 'addload ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MFEIJFLH@permload?5?$AA@
CONST	SEGMENT
??_C@_09MFEIJFLH@permload?5?$AA@ DB 'permload ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05HDKJKGNJ@load?5?$AA@
CONST	SEGMENT
??_C@_05HDKJKGNJ@load?5?$AA@ DB 'load ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MFNNJD@read?5?$AA@
CONST	SEGMENT
??_C@_05MFNNJD@read?5?$AA@ DB 'read ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MELDNFB@exec?5?$AA@
CONST	SEGMENT
??_C@_05MELDNFB@exec?5?$AA@ DB 'exec ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JJGFGBJN@system?5?$AA@
CONST	SEGMENT
??_C@_07JJGFGBJN@system?5?$AA@ DB 'system ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06NEAHAKFG@chdir?5?$AA@
CONST	SEGMENT
??_C@_06NEAHAKFG@chdir?5?$AA@ DB 'chdir ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EJCIALOD@zoom?5?$AA@
CONST	SEGMENT
??_C@_05EJCIALOD@zoom?5?$AA@ DB 'zoom ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02MBMLGKBP@p?5?$AA@
CONST	SEGMENT
??_C@_02MBMLGKBP@p?5?$AA@ DB 'p ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GEMGAMM@autochop?5?3?$DN?5?$AA@
CONST	SEGMENT
??_C@_0N@GEMGAMM@autochop?5?3?$DN?5?$AA@ DB 'autochop := ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IAPMLCJI@thicken?5?3?$DN?5?$AA@
CONST	SEGMENT
??_C@_0M@IAPMLCJI@thicken?5?3?$DN?5?$AA@ DB 'thicken := ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PDNHPOPF@diffusion?5?3?$DN?5?$AA@
CONST	SEGMENT
??_C@_0O@PDNHPOPF@diffusion?5?3?$DN?5?$AA@ DB 'diffusion := ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LIDLFDJI@gravity?5?1?$DN?5?$AA@
CONST	SEGMENT
??_C@_0M@LIDLFDJI@gravity?5?1?$DN?5?$AA@ DB 'gravity /= ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IPOFKDKK@gravity?5?$CK?$DN?5?$AA@
CONST	SEGMENT
??_C@_0M@IPOFKDKK@gravity?5?$CK?$DN?5?$AA@ DB 'gravity *= ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BCDCJLBD@gravity?5?9?$DN?5?$AA@
CONST	SEGMENT
??_C@_0M@BCDCJLBD@gravity?5?9?$DN?5?$AA@ DB 'gravity -= ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DHFJMEMP@gravity?5?$CL?$DN?5?$AA@
CONST	SEGMENT
??_C@_0M@DHFJMEMP@gravity?5?$CL?$DN?5?$AA@ DB 'gravity += ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02OAOPJJAK@G?5?$AA@
CONST	SEGMENT
??_C@_02OAOPJJAK@G?5?$AA@ DB 'G ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PJIGCMPP@P?5?$AA@
CONST	SEGMENT
??_C@_02PJIGCMPP@P?5?$AA@ DB 'P ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02ONHIBMNM@M?5?$AA@
CONST	SEGMENT
??_C@_02ONHIBMNM@M?5?$AA@ DB 'M ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MOBKFBJA@y?5?$AA@
CONST	SEGMENT
??_C@_02MOBKFBJA@y?5?$AA@ DB 'y ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OJPFGAGO@K?5?$AA@
CONST	SEGMENT
??_C@_02OJPFGAGO@K?5?$AA@ DB 'K ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GOPKHFKJ@gap_constant?5?3?$DN?5?$AA@
CONST	SEGMENT
??_C@_0BB@GOPKHFKJ@gap_constant?5?3?$DN?5?$AA@ DB 'gap_constant := ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09FFMPJNE@optimize?5?$AA@
CONST	SEGMENT
??_C@_09FFMPJNE@optimize?5?$AA@ DB 'optimize ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02NFDFFKDM@m?5?$AA@
CONST	SEGMENT
??_C@_02NFDFFKDM@m?5?$AA@ DB 'm ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LBDDMOBJ@?$FN?$AA@
CONST	SEGMENT
??_C@_01LBDDMOBJ@?$FN?$AA@ DB ']', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DNJFBPJB@?$FN?$FL?$AA@
CONST	SEGMENT
??_C@_02DNJFBPJB@?$FN?$FL?$AA@ DB '][', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PHJBGNDM@view_matrix?$FL?$AA@
CONST	SEGMENT
??_C@_0N@PHJBGNDM@view_matrix?$FL?$AA@ DB 'view_matrix[', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06OHLOMLHG@?$CFs?5?$CFs?5?$AA@
CONST	SEGMENT
??_C@_06OHLOMLHG@?$CFs?5?$CFs?5?$AA@ DB '%s %s ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DGCNEFB@set?5?$CFs?5conserved?$AA@
CONST	SEGMENT
??_C@_0BB@DGCNEFB@set?5?$CFs?5conserved?$AA@ DB 'set %s conserved', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CICBOCMP@set?5?$CFs?5info_only?$AA@
CONST	SEGMENT
??_C@_0BB@CICBOCMP@set?5?$CFs?5info_only?$AA@ DB 'set %s info_only', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FLJLJLDN@set?5?$CFs?5energy?$AA@
CONST	SEGMENT
??_C@_0O@FLJLJLDN@set?5?$CFs?5energy?$AA@ DB 'set %s energy', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MIGPCOON@set?5?$CFs?5fixed?$AA@
CONST	SEGMENT
??_C@_0N@MIGPCOON@set?5?$CFs?5fixed?$AA@ DB 'set %s fixed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08PCDKFCAB@unfix?5?$CFs?$AA@
CONST	SEGMENT
??_C@_08PCDKFCAB@unfix?5?$CFs?$AA@ DB 'unfix %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06PGAKKNMC@fix?5?$CFs?$AA@
CONST	SEGMENT
??_C@_06PGAKKNMC@fix?5?$CFs?$AA@ DB 'fix %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03IKGEINEE@?$CFs?5?$AA@
CONST	SEGMENT
??_C@_03IKGEINEE@?$CFs?5?$AA@ DB '%s ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HHHBCPMM@?$CI?$CFs?$CJ?5?$AA@
CONST	SEGMENT
??_C@_05HHHBCPMM@?$CI?$CFs?$CJ?5?$AA@ DB '(%s) ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MJJMJFJL@ooglfile?5?$AA@
CONST	SEGMENT
??_C@_09MJJMJFJL@ooglfile?5?$AA@ DB 'ooglfile ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GPAKCJEL@binary_off_file?5?$AA@
CONST	SEGMENT
??_C@_0BB@GPAKCJEL@binary_off_file?5?$AA@ DB 'binary_off_file ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DEHHELJH@postscript?5?$AA@
CONST	SEGMENT
??_C@_0M@DEHHELJH@postscript?5?$AA@ DB 'postscript ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PFLHEGFB@geompipe?5?$AA@
CONST	SEGMENT
??_C@_09PFLHEGFB@geompipe?5?$AA@ DB 'geompipe ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MKIHCHHJ@geompipe?5?$CFs?5?$AA@
CONST	SEGMENT
??_C@_0N@MKIHCHHJ@geompipe?5?$CFs?5?$AA@ DB 'geompipe %s ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MCGFEOAK@geomview?5?$CFs?5?$AA@
CONST	SEGMENT
??_C@_0N@MCGFEOAK@geomview?5?$CFs?5?$AA@ DB 'geomview %s ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DNFKKNDG@keylogfile?5?$CFs?5?$AA@
CONST	SEGMENT
??_C@_0P@DNFKKNDG@keylogfile?5?$CFs?5?$AA@ DB 'keylogfile %s ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DIIJBMIL@logfile?5?$CFs?5?$AA@
CONST	SEGMENT
??_C@_0M@DIIJBMIL@logfile?5?$CFs?5?$AA@ DB 'logfile %s ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HEDCIHMP@autochop?5?$CFs?5?$AA@
CONST	SEGMENT
??_C@_0N@HEDCIHMP@autochop?5?$CFs?5?$AA@ DB 'autochop %s ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HJPMHHGF@optimize?5?$CFs?5?$AA@
CONST	SEGMENT
??_C@_0N@HJPMHHGF@optimize?5?$CFs?5?$AA@ DB 'optimize %s ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03MPPIHBHJ@OFF?$AA@
CONST	SEGMENT
??_C@_03MPPIHBHJ@OFF?$AA@ DB 'OFF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BFICIOJL@ON?$AA@
CONST	SEGMENT
??_C@_02BFICIOJL@ON?$AA@ DB 'ON', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NMKAOHIM@?8?$CFc?8?5?$AA@
CONST	SEGMENT
??_C@_05NMKAOHIM@?8?$CFc?8?5?$AA@ DB '''%c'' ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03JGECCODE@?$CFc?5?$AA@
CONST	SEGMENT
??_C@_03JGECCODE@?$CFc?5?$AA@ DB '%c ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DLMHGJKG@?5?$HM?5?$CC?$CFs?$CC?5?$AA@
CONST	SEGMENT
??_C@_08DLMHGJKG@?5?$HM?5?$CC?$CFs?$CC?5?$AA@ DB ' | "%s" ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03LGOGDKEL@?5?$HM?5?$AA@
CONST	SEGMENT
??_C@_03LGOGDKEL@?5?$HM?5?$AA@ DB ' | ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OKBJPLDC@?5?$DO?$DO?$DO2?5?$CC?$CFs?$CC?5?$AA@
CONST	SEGMENT
??_C@_0M@OKBJPLDC@?5?$DO?$DO?$DO2?5?$CC?$CFs?$CC?5?$AA@ DB ' >>>2 "%s" ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06CPNAODOJ@?5?$DO?$DO?$DO2?5?$AA@
CONST	SEGMENT
??_C@_06CPNAODOJ@?5?$DO?$DO?$DO2?5?$AA@ DB ' >>>2 ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BOPKLIIE@?5?$DO?$DO2?5?$CC?$CFs?$CC?5?$AA@
CONST	SEGMENT
??_C@_0L@BOPKLIIE@?5?$DO?$DO2?5?$CC?$CFs?$CC?5?$AA@ DB ' >>2 "%s" ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05PFBPMHED@?5?$DO?$DO2?5?$AA@
CONST	SEGMENT
??_C@_05PFBPMHED@?5?$DO?$DO2?5?$AA@ DB ' >>2 ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EJFFKNML@?5?$DO?$DO?$DO?5?$CC?$CFs?$CC?5?$AA@
CONST	SEGMENT
??_C@_0L@EJFFKNML@?5?$DO?$DO?$DO?5?$CC?$CFs?$CC?5?$AA@ DB ' >>> "%s" ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05PMAFDOCH@?5?$DO?$DO?$DO?5?$AA@
CONST	SEGMENT
??_C@_05PMAFDOCH@?5?$DO?$DO?$DO?5?$AA@ DB ' >>> ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09HOKDEKNN@?5?$DO?$DO?5?$CC?$CFs?$CC?5?$AA@
CONST	SEGMENT
??_C@_09HOKDEKNN@?5?$DO?$DO?5?$CC?$CFs?$CC?5?$AA@ DB ' >> "%s" ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04FDJJEEEM@?5?$DO?$DO?5?$AA@
CONST	SEGMENT
??_C@_04FDJJEEEM@?5?$DO?$DO?5?$AA@ DB ' >> ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03MDDDKBAO@?5?$DL?5?$AA@
CONST	SEGMENT
??_C@_03MDDDKBAO@?5?$DL?5?$AA@ DB ' ; ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NMJBNGBA@?5?$CJ?5?$AA@
CONST	SEGMENT
??_C@_03NMJBNGBA@?5?$CJ?5?$AA@ DB ' ) ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PDKNMLLK@for?5?$CI?5?$AA@
CONST	SEGMENT
??_C@_06PDKNMLLK@for?5?$CI?5?$AA@ DB 'for ( ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JPBKNIFM@?5while?5?$CI?$AA@
CONST	SEGMENT
??_C@_08JPBKNIFM@?5while?5?$CI?$AA@ DB ' while (', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03LMPAOIAI@do?5?$AA@
CONST	SEGMENT
??_C@_03LMPAOIAI@do?5?$AA@ DB 'do ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02KCKGHPCA@?$CJ?5?$AA@
CONST	SEGMENT
??_C@_02KCKGHPCA@?$CJ?5?$AA@ DB ') ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JOMAJBDI@while?5?$CI?$AA@
CONST	SEGMENT
??_C@_07JOMAJBDI@while?5?$CI?$AA@ DB 'while (', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02EEBIPDF@?5?$DL?$AA@
CONST	SEGMENT
??_C@_02EEBIPDF@?5?$DL?$AA@ DB ' ;', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JKFHOPAN@?5do?5?$AA@
CONST	SEGMENT
??_C@_04JKFHOPAN@?5do?5?$AA@ DB ' do ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FAEHJPPB@?5?$CJ?5then?5?$AA@
CONST	SEGMENT
??_C@_08FAEHJPPB@?5?$CJ?5then?5?$AA@ DB ' ) then ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05HEFMBOOH@if?5?$CI?5?$AA@
CONST	SEGMENT
??_C@_05HEFMBOOH@if?5?$CI?5?$AA@ DB 'if ( ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EJKGLOKJ@exprint?5?$CFs?5?$AA@
CONST	SEGMENT
??_C@_0M@EJKGLOKJ@exprint?5?$CFs?5?$AA@ DB 'exprint %s ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FKNOAAMF@?4vertexnormal?$AA@
CONST	SEGMENT
??_C@_0O@FKNOAAMF@?4vertexnormal?$AA@ DB '.vertexnormal', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09CFOJLIBO@print?5?$CFs?5?$AA@
CONST	SEGMENT
??_C@_09CFOJLIBO@print?5?$CFs?5?$AA@ DB 'print %s ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DJMPBLGO@print?5?$CFc?5?$AA@
CONST	SEGMENT
??_C@_09DJMPBLGO@print?5?$CFc?5?$AA@ DB 'print %c ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EFNJCGJK@binary_printf?5?$AA@
CONST	SEGMENT
??_C@_0P@EFNJCGJK@binary_printf?5?$AA@ DB 'binary_printf ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HKMPKJEI@errprintf?5?$AA@
CONST	SEGMENT
??_C@_0L@HKMPKJEI@errprintf?5?$AA@ DB 'errprintf ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07HJAAEDEB@printf?5?$AA@
CONST	SEGMENT
??_C@_07HJAAEDEB@printf?5?$AA@ DB 'printf ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DDAFHHJG@sprintf?5?$AA@
CONST	SEGMENT
??_C@_08DDAFHHJG@sprintf?5?$AA@ DB 'sprintf ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CIMNNBLM@datafilename?5?$AA@
CONST	SEGMENT
??_C@_0O@CIMNNBLM@datafilename?5?$AA@ DB 'datafilename ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DILLGGAL@warning_messages?5?$AA@
CONST	SEGMENT
??_C@_0BC@DILLGGAL@warning_messages?5?$AA@ DB 'warning_messages ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OACEACLK@transform_expr?5?$AA@
CONST	SEGMENT
??_C@_0BA@OACEACLK@transform_expr?5?$AA@ DB 'transform_expr ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GICKAJOK@history?5?$AA@
CONST	SEGMENT
??_C@_08GICKAJOK@history?5?$AA@ DB 'history ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PGLJMKEH@continue?5?$AA@
CONST	SEGMENT
??_C@_09PGLJMKEH@continue?5?$AA@ DB 'continue ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PLJOCOHN@continue?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0M@PLJOCOHN@continue?5?$CFd?$AA@ DB 'continue %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06DLBOLJLP@break?5?$AA@
CONST	SEGMENT
??_C@_06DLBOLJLP@break?5?$AA@ DB 'break ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OOPHKIOJ@break?5?$CFd?$AA@
CONST	SEGMENT
??_C@_08OOPHKIOJ@break?5?$CFd?$AA@ DB 'break %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DICBBEEI@date_and_time?$AA@
CONST	SEGMENT
??_C@_0O@DICBBEEI@date_and_time?$AA@ DB 'date_and_time', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DKKLMIEO@evolver_version?$AA@
CONST	SEGMENT
??_C@_0BA@DKKLMIEO@evolver_version?$AA@ DB 'evolver_version', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07BKFMFPMO@return?5?$AA@
CONST	SEGMENT
??_C@_07BKFMFPMO@return?5?$AA@ DB 'return ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05PDJBBECF@pause?$AA@
CONST	SEGMENT
??_C@_05PDJBBECF@pause?$AA@ DB 'pause', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OHLAHHBM@reset_profiling?$AA@
CONST	SEGMENT
??_C@_0BA@OHLAHHBM@reset_profiling?$AA@ DB 'reset_profiling', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IBOFDNEL@print?5profiling?$AA@
CONST	SEGMENT
??_C@_0BA@IBOFDNEL@print?5profiling?$AA@ DB 'print profiling', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HEKOHBEK@flush_counts?$AA@
CONST	SEGMENT
??_C@_0N@HEKOHBEK@flush_counts?$AA@ DB 'flush_counts', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BFEIANBO@reset_counts?$AA@
CONST	SEGMENT
??_C@_0N@BFEIANBO@reset_counts?$AA@ DB 'reset_counts', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KFJJNIHG@unset?5constraint?5?$CFs?5global?$AA@
CONST	SEGMENT
??_C@_0BL@KFJJNIHG@unset?5constraint?5?$CFs?5global?$AA@ DB 'unset constr'
	DB	'aint %s global', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DICHIFDL@set?5constraint?5?$CFs?5global?$AA@
CONST	SEGMENT
??_C@_0BJ@DICHIFDL@set?5constraint?5?$CFs?5global?$AA@ DB 'set constraint'
	DB	' %s global', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MDBPAFMN@unset?5constraint?5?$AA@
CONST	SEGMENT
??_C@_0BC@MDBPAFMN@unset?5constraint?5?$AA@ DB 'unset constraint ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EALMPJOD@?5global?5?$AA@
CONST	SEGMENT
??_C@_08EALMPJOD@?5global?5?$AA@ DB ' global ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FHOMNLOC@set?5constraint?5?$AA@
CONST	SEGMENT
??_C@_0BA@FHOMNLOC@set?5constraint?5?$AA@ DB 'set constraint ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04LAOFCJDB@?5?$CFc?5?$AA@
CONST	SEGMENT
??_C@_04LAOFCJDB@?5?$CFc?5?$AA@ DB ' %c ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JODPKOOO@?$FN?4normal?$AA@
CONST	SEGMENT
??_C@_08JODPKOOO@?$FN?4normal?$AA@ DB '].normal', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PGNKLKGF@?4constraint?$FL?$AA@
CONST	SEGMENT
??_C@_0N@PGNKLKGF@?4constraint?$FL?$AA@ DB '.constraint[', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03KEMCFGNA@?4?$CFs?$AA@
CONST	SEGMENT
??_C@_03KEMCFGNA@?4?$CFs?$AA@ DB '.%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03EEBNCBOD@?5?$CFs?$AA@
CONST	SEGMENT
??_C@_03EEBNCBOD@?5?$CFs?$AA@ DB ' %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EBLGCNEC@print?5?$AA@
CONST	SEGMENT
??_C@_06EBLGCNEC@print?5?$AA@ DB 'print ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NONHGIEJ@?5?$CK?5?$AA@
CONST	SEGMENT
??_C@_03NONHGIEJ@?5?$CK?5?$AA@ DB ' * ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LJHKMKOP@?5?1?$DN?5?$AA@
CONST	SEGMENT
??_C@_04LJHKMKOP@?5?1?$DN?5?$AA@ DB ' /= ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IOKEDKNN@?5?$CK?$DN?5?$AA@
CONST	SEGMENT
??_C@_04IOKEDKNN@?5?$CK?$DN?5?$AA@ DB ' *= ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04BDHDACGE@?5?9?$DN?5?$AA@
CONST	SEGMENT
??_C@_04BDHDACGE@?5?9?$DN?5?$AA@ DB ' -= ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DGBIFNLI@?5?$CL?$DN?5?$AA@
CONST	SEGMENT
??_C@_04DGBIFNLI@?5?$CL?$DN?5?$AA@ DB ' += ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04NOLNGNEC@?5?3?$DN?5?$AA@
CONST	SEGMENT
??_C@_04NOLNGNEC@?5?3?$DN?5?$AA@ DB ' := ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KBDJOJNB@?$FL?$CFd?$FN?$AA@
CONST	SEGMENT
??_C@_04KBDJOJNB@?$FL?$CFd?$FN?$AA@ DB '[%d]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KLABKDID@define?5?$CFs?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0N@KLABKDID@define?5?$CFs?5?$CFs?$AA@ DB 'define %s %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LLAPKIKO@?5function?5?$AA@
CONST	SEGMENT
??_C@_0L@LLAPKIKO@?5function?5?$AA@ DB ' function ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@OOLEHMJN@define?5?$CFs?5attribute?5?$CFs?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BK@OOLEHMJN@define?5?$CFs?5attribute?5?$CFs?5?$CFs?$AA@ DB 'define'
	DB	' %s attribute %s %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@INHIPMAN@?1?$CK?5Definition?5of?5boundary?5?$CFd?5was@
CONST	SEGMENT
??_C@_0DE@INHIPMAN@?1?$CK?5Definition?5of?5boundary?5?$CFd?5was@ DB '/* D'
	DB	'efinition of boundary %d was originally here.*/', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@BLDPCHML@?1?$CK?5Definition?5of?5boundary?5?$CFs?5was@
CONST	SEGMENT
??_C@_0DE@BLDPCHML@?1?$CK?5Definition?5of?5boundary?5?$CFs?5was@ DB '/* D'
	DB	'efinition of boundary %s was originally here.*/', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@DNPIOFL@?1?$CK?5Definition?5of?5constraint?5?$CFd?5w@
CONST	SEGMENT
??_C@_0DG@DNPIOFL@?1?$CK?5Definition?5of?5constraint?5?$CFd?5w@ DB '/* De'
	DB	'finition of constraint %d was originally here.*/', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@JFJIFFJN@?1?$CK?5Definition?5of?5constraint?5?$CFs?5w@
CONST	SEGMENT
??_C@_0DG@JFJIFFJN@?1?$CK?5Definition?5of?5constraint?5?$CFs?5w@ DB '/* D'
	DB	'efinition of constraint %s was originally here.*/', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@PIPFCDIL@?1?$CK?5Definition?5of?5method?5instance@
CONST	SEGMENT
??_C@_0DL@PIPFCDIL@?1?$CK?5Definition?5of?5method?5instance@ DB '/* Defin'
	DB	'ition of method instance %s was originally here.*/', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@JKPGKFB@?1?$CK?5Definition?5of?5quantity?5?$CFs?5was@
CONST	SEGMENT
??_C@_0DE@JKPGKFB@?1?$CK?5Definition?5of?5quantity?5?$CFs?5was@ DB '/* De'
	DB	'finition of quantity %s was originally here.*/', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FOGGDAIC@local?5?$AA@
CONST	SEGMENT
??_C@_06FOGGDAIC@local?5?$AA@ DB 'local ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01CELHOKLL@?$HN?$AA@
CONST	SEGMENT
??_C@_01CELHOKLL@?$HN?$AA@ DB '}', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MNJOIFPO@?$HL?5?$AA@
CONST	SEGMENT
??_C@_02MNJOIFPO@?$HL?5?$AA@ DB '{ ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LGCBLIJP@facet_merge?$CI?$AA@
CONST	SEGMENT
??_C@_0N@LGCBLIJP@facet_merge?$CI?$AA@ DB 'facet_merge(', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PJOFJFAC@edge_merge?$CI?$AA@
CONST	SEGMENT
??_C@_0M@PJOFJFAC@edge_merge?$CI?$AA@ DB 'edge_merge(', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NNPGAOLH@vertex_merge?$CI?$AA@
CONST	SEGMENT
??_C@_0O@NNPGAOLH@vertex_merge?$CI?$AA@ DB 'vertex_merge(', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CJCHMGEH@matrix_determinant?$CI?$CFs?$CJ?$AA@
CONST	SEGMENT
??_C@_0BH@CJCHMGEH@matrix_determinant?$CI?$CFs?$CJ?$AA@ DB 'matrix_determ'
	DB	'inant(%s)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EMGJAFJA@matrix_multiply?$CI?$CFs?0?$CFs?0?$CFs?$CJ?$AA@
CONST	SEGMENT
??_C@_0BK@EMGJAFJA@matrix_multiply?$CI?$CFs?0?$CFs?0?$CFs?$CJ?$AA@ DB 'ma'
	DB	'trix_multiply(%s,%s,%s)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@ICBGMJLO@matrix_inverse?$CI?$CFs?0?$CFs?$CJ?$AA@
CONST	SEGMENT
??_C@_0BG@ICBGMJLO@matrix_inverse?$CI?$CFs?0?$CFs?$CJ?$AA@ DB 'matrix_inv'
	DB	'erse(%s,%s)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BCKHPENM@valid_boundary?$CI?$AA@
CONST	SEGMENT
??_C@_0BA@BCKHPENM@valid_boundary?$CI?$AA@ DB 'valid_boundary(', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PBMMAEOP@valid_constraint?$CI?$AA@
CONST	SEGMENT
??_C@_0BC@PBMMAEOP@valid_constraint?$CI?$AA@ DB 'valid_constraint(', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02CAJMAEOF@?$FN?$CJ?$AA@
CONST	SEGMENT
??_C@_02CAJMAEOF@?$FN?$CJ?$AA@ DB '])', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HAFOGDEI@valid_element?$CI?$CFs?$FL?$AA@
CONST	SEGMENT
??_C@_0BC@HAFOGDEI@valid_element?$CI?$CFs?$FL?$AA@ DB 'valid_element(%s[', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08IHIBGNIK@?$CFs?$CFd?$EA?$CFd?6?$AA@
CONST	SEGMENT
??_C@_08IHIBGNIK@?$CFs?$CFd?$EA?$CFd?6?$AA@ DB '%s%d@%d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02BINJDKOC@?5?9?$AA@
CONST	SEGMENT
??_C@_02BINJDKOC@?5?9?$AA@ DB ' -', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08PANPCJAE@new_body?$AA@
CONST	SEGMENT
??_C@_08PANPCJAE@new_body?$AA@ DB 'new_body', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EONBLCMF@new_facet?$CI?$AA@
CONST	SEGMENT
??_C@_0L@EONBLCMF@new_facet?$CI?$AA@ DB 'new_facet(', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DHJMEBMJ@new_edge?$CI?$AA@
CONST	SEGMENT
??_C@_09DHJMEBMJ@new_edge?$CI?$AA@ DB 'new_edge(', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JMJFPOOP@facet_crosscut?$CI?$AA@
CONST	SEGMENT
??_C@_0BA@JMJFPOOP@facet_crosscut?$CI?$AA@ DB 'facet_crosscut(', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CPPKCNFJ@new_vertex?$CI?$AA@
CONST	SEGMENT
??_C@_0M@CPPKCNFJ@new_vertex?$CI?$AA@ DB 'new_vertex(', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01IHBHIGKO@?0?$AA@
CONST	SEGMENT
??_C@_01IHBHIGKO@?0?$AA@ DB ',', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MHMLBPOO@wrap_vertex?$CI?$AA@
CONST	SEGMENT
??_C@_0N@MHMLBPOO@wrap_vertex?$CI?$AA@ DB 'wrap_vertex(', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03LHCEFAHM@?5?$HN?5?$AA@
CONST	SEGMENT
??_C@_03LHCEFAHM@?5?$HN?5?$AA@ DB ' } ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PNBOCBHK@?5function?5?$HL?$AA@
CONST	SEGMENT
??_C@_0M@PNBOCBHK@?5function?5?$HL?$AA@ DB ' function {', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5?$AA@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5?$AA@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02ENHNEHDL@?$DL?$GA?$AA@
CONST	SEGMENT
??_C@_02ENHNEHDL@?$DL?$GA?$AA@ DB ';`', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CIAKADLN@?$FN?4nonpositive?5?$AA@
CONST	SEGMENT
??_C@_0P@CIAKADLN@?$FN?4nonpositive?5?$AA@ DB '].nonpositive ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EPFNEJMO@?$FN?4nonnegative?5?$AA@
CONST	SEGMENT
??_C@_0P@EPFNEJMO@?$FN?4nonnegative?5?$AA@ DB '].nonnegative ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KOIKPBDI@?$FN?4fixed?5?$AA@
CONST	SEGMENT
??_C@_08KOIKPBDI@?$FN?4fixed?5?$AA@ DB '].fixed ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OLFNJOBD@is_constraint?$FL?$AA@
CONST	SEGMENT
??_C@_0P@OLFNJOBD@is_constraint?$FL?$AA@ DB 'is_constraint[', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GCKGCNIB@delete_text?$CI?$AA@
CONST	SEGMENT
??_C@_0N@GCKGCNIB@delete_text?$CI?$AA@ DB 'delete_text(', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BIKLGEAI@display_text?$CI?$AA@
CONST	SEGMENT
??_C@_0O@BIKLGEAI@display_text?$CI?$AA@ DB 'display_text(', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02LNAEAIDO@?$DL?5?$AA@
CONST	SEGMENT
??_C@_02LNAEAIDO@?$DL?5?$AA@ DB '; ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EJMMFDE@logfile?5?$AA@
CONST	SEGMENT
??_C@_08EJMMFDE@logfile?5?$AA@ DB 'logfile ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OLFPELNL@keylogfile?5?$AA@
CONST	SEGMENT
??_C@_0M@OLFPELNL@keylogfile?5?$AA@ DB 'keylogfile ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LDMGAIBD@unsuppress_warning?5?$AA@
CONST	SEGMENT
??_C@_0BE@LDMGAIBD@unsuppress_warning?5?$AA@ DB 'unsuppress_warning ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MALBFLFO@suppress_warning?5?$AA@
CONST	SEGMENT
??_C@_0BC@MALBFLFO@suppress_warning?5?$AA@ DB 'suppress_warning ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NOJGAMCH@unset?5breakpoints?$AA@
CONST	SEGMENT
??_C@_0BC@NOJGAMCH@unset?5breakpoints?$AA@ DB 'unset breakpoints', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KDLHDBHK@unset?5breakpoint?5?$CFs?5?$AA@
CONST	SEGMENT
??_C@_0BF@KDLHDBHK@unset?5breakpoint?5?$CFs?5?$AA@ DB 'unset breakpoint %'
	DB	's ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_02MCILKGOH@?$HL?$HN?$AA@
CONST	SEGMENT
??_C@_02MCILKGOH@?$HL?$HN?$AA@ DB '{}', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BGEGKFCE@abort?5?$AA@
CONST	SEGMENT
??_C@_06BGEGKFCE@abort?5?$AA@ DB 'abort ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HOFIKNGF@breakpoint?5?$CFs?5?$AA@
CONST	SEGMENT
??_C@_0P@HOFIKNGF@breakpoint?5?$CFs?5?$AA@ DB 'breakpoint %s ', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _exprint_recur
_TEXT	SEGMENT
tv5077 = -216						; size = 8
tv5044 = -212						; size = 4
_g$90156 = -208						; size = 4
_a$89727 = -208						; size = 4
_localbase$ = -208					; size = 4
tv5000 = -206						; size = 2
_temp$90495 = -204					; size = 100
_temp$90488 = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
_node$ = 8						; size = 4
_prec_parent$ = 12					; size = 4
_exprint_recur PROC					; COMDAT

; 320  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 321  :   struct treenode *nn;
; 322  :   struct extra *ex;
; 323  :   struct locallist_t *localbase = current_proc_locals[current_proc_depth];

	mov	eax, DWORD PTR _current_proc_depth
	push	ebx
	mov	ebx, DWORD PTR _node$[ebp]
	push	esi
	mov	esi, DWORD PTR _current_proc_locals[eax*4]
	push	edi

; 324  : 
; 325  :    check_room_left(1000); 

	push	1000					; 000003e8H
	mov	DWORD PTR _localbase$[ebp], esi
	call	_check_room_left

; 326  :   /* insert some handy line breaks */
; 327  :   if ( (pos - linestart > GOODLEN) /* && (pos[-2] != ';') */ ) 

	mov	ecx, DWORD PTR _pos
	mov	edx, ecx
	sub	edx, DWORD PTR _linestart
	add	esp, 4
	cmp	edx, 75					; 0000004bH
	jle	SHORT $LN732@exprint_re

; 328  :     linebreak(); 

	call	_linebreak
	mov	ecx, DWORD PTR _pos
$LN732@exprint_re:

; 329  :   switch ( node->type )

	mov	edx, DWORD PTR [ebx]
	mov	eax, edx
	cmp	eax, 10002				; 00002712H
	jg	$LN1055@exprint_re
	je	$LN440@exprint_re
	cmp	eax, 4096				; 00001000H
	jne	$LN1@exprint_re

; 333  :       case NULLCMD_NODE:  return;
; 334  : 
; 335  :       case BREAKPOINT_NODE:
; 336  :          sprintf(pos,"breakpoint %s ",globals(node->op1.name_id)->name);

	mov	eax, DWORD PTR [ebx+32]
	mov	edx, eax
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN735@exprint_re
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN737@exprint_re
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [esi]
	jmp	SHORT $LN736@exprint_re
$LN737@exprint_re:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN735@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN736@exprint_re
$LN735@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+edx]
$LN736@exprint_re:
	push	eax
	push	OFFSET ??_C@_0P@HOFIKNGF@breakpoint?5?$CFs?5?$AA@
	push	ecx
	call	_sprintf

; 337  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1060@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1060@exprint_re

; 338  :          exprint_recur(node+node->left,prec_parent);
; 339  :          return;

	jmp	$LN1676@exprint_re
$LN440@exprint_re:

; 1577 :       case ABORT_NODE: sprintf(pos,"abort "); pos+=strlen(pos); break;

	push	OFFSET ??_C@_06BGEGKFCE@abort?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1061@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1061@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN1055@exprint_re:

; 329  :   switch ( node->type )

	cmp	eax, 10755				; 00002a03H
	jg	$LN1056@exprint_re
	cmp	eax, 10749				; 000029fdH
	jge	$LN538@exprint_re
	sub	eax, 10003				; 00002713H
	cmp	eax, 744				; 000002e8H
	ja	$LN1@exprint_re
	jmp	DWORD PTR $LN1691@exprint_re[eax*4]
$LN728@exprint_re:

; 330  :     { 
; 331  :       case NOP_NODE:  return;
; 332  :       case NULLBLOCK_NODE: sprintf(pos,"{}");pos+=2; return;

	push	OFFSET ??_C@_02MCILKGOH@?$HL?$HN?$AA@
	push	ecx
	call	_sprintf
	add	esp, 8
	add	DWORD PTR _pos, 2
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN725@exprint_re:

; 340  :          
; 341  :       case UNSET_BREAKPOINT_NODE:
; 342  :          if ( node->left )

	cmp	DWORD PTR [ebx+4], 0
	je	$LN724@exprint_re

; 343  :          { sprintf(pos,"unset breakpoint %s ",globals(node->op1.name_id)->name);

	mov	eax, DWORD PTR [ebx+32]
	mov	edx, eax
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN741@exprint_re
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN743@exprint_re
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [esi]
	jmp	SHORT $LN742@exprint_re
$LN743@exprint_re:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN741@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN742@exprint_re
$LN741@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+edx]
$LN742@exprint_re:
	push	eax
	push	OFFSET ??_C@_0BF@KDLHDBHK@unset?5breakpoint?5?$CFs?5?$AA@
	push	ecx
	call	_sprintf

; 344  :            pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1062@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1062@exprint_re

; 345  :            exprint_recur(node+node->left,prec_parent);
; 346  :          }
; 347  :          else

	jmp	$LN1676@exprint_re
$LN724@exprint_re:

; 348  :          { sprintf(pos,"unset breakpoints");

	push	OFFSET ??_C@_0BC@NOJGAMCH@unset?5breakpoints?$AA@
	push	ecx
	call	_sprintf

; 349  :            pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1063@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1063@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN722@exprint_re:

; 350  :          }
; 351  :          return;
; 352  :          
; 353  :       case SUPPRESS_WARNING_NODE:
; 354  :          sprintf(pos,"suppress_warning "); pos += strlen(pos);

	push	OFFSET ??_C@_0BC@MALBFLFO@suppress_warning?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL1064@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1064@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1334 :          exprint_recur(node+node->left,PREC_ASSIGN);

	mov	eax, DWORD PTR [ebx+4]
	mov	edx, DWORD PTR _prec_parent$[ebp]
	imul	eax, 168				; 000000a8H
	push	edx
	add	eax, ebx
	push	eax
	call	_exprint_recur
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN721@exprint_re:

; 355  :          exprint_recur(node+node->left,prec_parent);
; 356  :          return;
; 357  : 
; 358  :       case UNSUPPRESS_WARNING_NODE:
; 359  :          sprintf(pos,"unsuppress_warning "); pos += strlen(pos);

	push	OFFSET ??_C@_0BE@LDMGAIBD@unsuppress_warning?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1065@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1065@exprint_re

; 360  :          exprint_recur(node+node->left,prec_parent);
; 361  :          return;

	jmp	$LN1651@exprint_re
$LN720@exprint_re:

; 362  : 
; 363  :       case KEYLOGFILE_NODE:
; 364  :          sprintf(pos,"keylogfile "); pos += strlen(pos);

	push	OFFSET ??_C@_0M@OLFPELNL@keylogfile?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1066@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1066@exprint_re

; 365  :          exprint_recur(node+node->left,prec_parent);
; 366  :          return;

	jmp	$LN1676@exprint_re
$LN719@exprint_re:

; 367  : 
; 368  :       case LOGFILE_NODE:
; 369  :          sprintf(pos,"logfile "); pos += strlen(pos);

	push	OFFSET ??_C@_08EJMMFDE@logfile?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1067@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1067@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1334 :          exprint_recur(node+node->left,PREC_ASSIGN);

	mov	eax, DWORD PTR [ebx+4]
	mov	edx, DWORD PTR _prec_parent$[ebp]
	imul	eax, 168				; 000000a8H
	push	edx
	add	eax, ebx
	push	eax
	call	_exprint_recur
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN718@exprint_re:

; 370  :          exprint_recur(node+node->left,prec_parent);
; 371  :          return;
; 372  : 
; 373  :       case CMDLIST_NODE:
; 374  :          exprint_recur(node+node->left,prec_parent);

	mov	ecx, DWORD PTR [ebx+4]
	mov	esi, DWORD PTR _prec_parent$[ebp]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	push	esi
	push	ecx
	call	_exprint_recur
	add	esp, 8

; 375  :          if ( node->right )

	cmp	DWORD PTR [ebx+8], 0
	je	$LN730@exprint_re

; 376  :          {  if ( pos[-1] == ' ' ) 

	mov	eax, DWORD PTR _pos
	cmp	BYTE PTR [eax-1], 32			; 00000020H
	jne	SHORT $LN716@exprint_re
	dec	eax

; 377  :               pos--;

	mov	DWORD PTR _pos, eax
$LN716@exprint_re:

; 378  :             sprintf(pos,"; "); pos += 2;

	push	OFFSET ??_C@_02LNAEAIDO@?$DL?5?$AA@
	push	eax
	call	_sprintf
	add	DWORD PTR _pos, 2

; 379  :             newline();

	call	_newline

; 380  :             exprint_recur(node+node->right,prec_parent);

	mov	edx, DWORD PTR [ebx+8]
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	esi
	push	edx

; 657  :          exprint_recur(node+node->right,prec_parent);

	call	_exprint_recur
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN714@exprint_re:

; 381  :           }
; 382  :          return;
; 383  :      
; 384  :       case BACKQUOTE_START_NODE: return;
; 385  :       case BACKQUOTE_END_NODE:
; 386  :          exprint_recur(node+node->right,prec_parent); /* left was dummy */

	mov	ecx, DWORD PTR [ebx+8]
	mov	eax, DWORD PTR _prec_parent$[ebp]

; 1267 :          exprint_recur(node+node->left,prec_parent);

	imul	ecx, 168				; 000000a8H
	push	eax
	add	ecx, ebx
	push	ecx
	call	_exprint_recur
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN712@exprint_re:

; 387  :          return;
; 388  : 
; 389  :       case TEXT_SPOT_NODE:
; 390  :          exprint_recur(node+node->left,prec_parent); 
; 391  :          *(pos++) = ',';  *pos = 0;
; 392  :          exprint_recur(node+node->right,prec_parent);
; 393  :          return;
; 394  : 
; 395  :       case TEXT_SIZE_NODE:
; 396  :          exprint_recur(node+node->left,prec_parent); 

	mov	ecx, DWORD PTR [ebx+4]
	mov	esi, DWORD PTR _prec_parent$[ebp]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	push	esi
	push	ecx
	call	_exprint_recur

; 397  :          *(pos++) = ',';  *pos = 0;

	mov	eax, DWORD PTR _pos
	mov	BYTE PTR [eax], 44			; 0000002cH
	inc	eax
	mov	BYTE PTR [eax], 0

; 398  :          exprint_recur(node+node->right,prec_parent);

	mov	edx, DWORD PTR [ebx+8]
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	esi
	push	edx
	mov	DWORD PTR _pos, eax

; 657  :          exprint_recur(node+node->right,prec_parent);

	call	_exprint_recur
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN711@exprint_re:

; 399  :          return;
; 400  : 
; 401  :       case DISPLAY_TEXT_NODE:
; 402  :          sprintf(pos,"display_text("); pos += strlen(pos);

	push	OFFSET ??_C@_0O@BIKLGEAI@display_text?$CI?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1068@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1068@exprint_re

; 403  :          exprint_recur(node+node->left,prec_parent);

	mov	esi, DWORD PTR _prec_parent$[ebp]
	sub	eax, edx
	add	DWORD PTR _pos, eax
	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	esi
	push	eax
	call	_exprint_recur

; 404  :          *(pos++) = ',';  *pos = 0;

	mov	eax, DWORD PTR _pos
	mov	BYTE PTR [eax], 44			; 0000002cH
	inc	eax
	mov	BYTE PTR [eax], 0

; 405  :          exprint_recur(node+node->right,prec_parent);

	mov	ecx, DWORD PTR [ebx+8]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	push	esi
	push	ecx
	mov	DWORD PTR _pos, eax
	call	_exprint_recur
	add	esp, 16					; 00000010H

; 406  :          *(pos++) = ')';  *pos = 0;
; 407  :          return;

	jmp	$LN1665@exprint_re
$LN710@exprint_re:

; 408  : 
; 409  :       case DELETE_TEXT_NODE:
; 410  :          sprintf(pos,"delete_text("); pos += strlen(pos);

	push	OFFSET ??_C@_0N@GCKGCNIB@delete_text?$CI?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1069@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1069@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 411  :          exprint_recur(node+node->left,prec_parent);

	mov	eax, DWORD PTR [ebx+4]
	mov	edx, DWORD PTR _prec_parent$[ebp]
	imul	eax, 168				; 000000a8H
	push	edx
	add	eax, ebx
	push	eax

; 412  :          *(pos++) = ')';  *pos = 0;
; 413  :          return;

	jmp	$LN1666@exprint_re
$LN709@exprint_re:

; 414  : 
; 415  :       case CONSTRAINT_FIXED_NODE:
; 416  :          strcat(pos,"is_constraint["); pos += strlen(pos);

	lea	esi, DWORD PTR [ecx-1]
$LL1070@exprint_re:
	mov	al, BYTE PTR [esi+1]
	inc	esi
	test	al, al
	jne	SHORT $LL1070@exprint_re
	mov	edx, DWORD PTR ??_C@_0P@OLFNJOBD@is_constraint?$FL?$AA@
	mov	DWORD PTR [esi], edx
	mov	eax, DWORD PTR ??_C@_0P@OLFNJOBD@is_constraint?$FL?$AA@+4
	mov	DWORD PTR [esi+4], eax
	mov	edx, DWORD PTR ??_C@_0P@OLFNJOBD@is_constraint?$FL?$AA@+8
	mov	DWORD PTR [esi+8], edx
	mov	ax, WORD PTR ??_C@_0P@OLFNJOBD@is_constraint?$FL?$AA@+12
	mov	WORD PTR [esi+12], ax
	mov	dl, BYTE PTR ??_C@_0P@OLFNJOBD@is_constraint?$FL?$AA@+14
	mov	BYTE PTR [esi+14], dl
	mov	esi, ecx
	lea	edx, DWORD PTR [esi+1]
$LL1071@exprint_re:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL1071@exprint_re

; 417  :          exprint_recur(node+node->left,prec_parent);

	mov	eax, DWORD PTR _prec_parent$[ebp]
	sub	esi, edx
	add	ecx, esi
	mov	DWORD PTR _pos, ecx
	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	push	eax
	add	ecx, ebx
	push	ecx
	call	_exprint_recur

; 418  :          strcat(pos,"].fixed "); pos += strlen(pos);

	mov	edx, DWORD PTR _pos
	add	esp, 8
	lea	eax, DWORD PTR [edx-1]
$LL1072@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1072@exprint_re
	mov	ecx, DWORD PTR ??_C@_08KOIKPBDI@?$FN?4fixed?5?$AA@
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR ??_C@_08KOIKPBDI@?$FN?4fixed?5?$AA@+4
	mov	DWORD PTR [eax+4], ecx
	mov	cl, BYTE PTR ??_C@_08KOIKPBDI@?$FN?4fixed?5?$AA@+8
	mov	BYTE PTR [eax+8], cl
	mov	eax, edx
	lea	esi, DWORD PTR [eax+1]
	npad	7
$LL1073@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1073@exprint_re
	sub	eax, esi
	pop	edi
	add	edx, eax
	pop	esi
	mov	DWORD PTR _pos, edx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN708@exprint_re:

; 419  :          break;
; 420  : 
; 421  :          case CONSTRAINT_NONNEGATIVE_NODE:
; 422  :          strcat(pos,"is_constraint["); pos += strlen(pos);

	lea	esi, DWORD PTR [ecx-1]
$LL1074@exprint_re:
	mov	al, BYTE PTR [esi+1]
	inc	esi
	test	al, al
	jne	SHORT $LL1074@exprint_re
	mov	edx, DWORD PTR ??_C@_0P@OLFNJOBD@is_constraint?$FL?$AA@
	mov	DWORD PTR [esi], edx
	mov	eax, DWORD PTR ??_C@_0P@OLFNJOBD@is_constraint?$FL?$AA@+4
	mov	DWORD PTR [esi+4], eax
	mov	edx, DWORD PTR ??_C@_0P@OLFNJOBD@is_constraint?$FL?$AA@+8
	mov	DWORD PTR [esi+8], edx
	mov	ax, WORD PTR ??_C@_0P@OLFNJOBD@is_constraint?$FL?$AA@+12
	mov	WORD PTR [esi+12], ax
	mov	dl, BYTE PTR ??_C@_0P@OLFNJOBD@is_constraint?$FL?$AA@+14
	mov	BYTE PTR [esi+14], dl
	mov	esi, ecx
	lea	edx, DWORD PTR [esi+1]
	npad	2
$LL1075@exprint_re:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL1075@exprint_re

; 423  :          exprint_recur(node+node->left,prec_parent);

	mov	eax, DWORD PTR _prec_parent$[ebp]
	sub	esi, edx
	add	ecx, esi
	mov	DWORD PTR _pos, ecx
	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	push	eax
	add	ecx, ebx
	push	ecx
	call	_exprint_recur

; 424  :          strcat(pos,"].nonnegative "); pos += strlen(pos);

	mov	edx, DWORD PTR _pos
	add	esp, 8
	lea	eax, DWORD PTR [edx-1]
$LL1076@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1076@exprint_re
	mov	ecx, DWORD PTR ??_C@_0P@EPFNEJMO@?$FN?4nonnegative?5?$AA@
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR ??_C@_0P@EPFNEJMO@?$FN?4nonnegative?5?$AA@+4
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR ??_C@_0P@EPFNEJMO@?$FN?4nonnegative?5?$AA@+8
	mov	DWORD PTR [eax+8], ecx
	mov	cx, WORD PTR ??_C@_0P@EPFNEJMO@?$FN?4nonnegative?5?$AA@+12
	mov	WORD PTR [eax+12], cx
	mov	cl, BYTE PTR ??_C@_0P@EPFNEJMO@?$FN?4nonnegative?5?$AA@+14
	mov	BYTE PTR [eax+14], cl
	mov	eax, edx
	lea	esi, DWORD PTR [eax+1]
	npad	3
$LL1077@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1077@exprint_re
	sub	eax, esi
	pop	edi
	add	edx, eax
	pop	esi
	mov	DWORD PTR _pos, edx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN707@exprint_re:

; 425  :          break;
; 426  : 
; 427  :      case CONSTRAINT_NONPOSITIVE_NODE:
; 428  :          strcat(pos,"is_constraint["); pos += strlen(pos);

	lea	esi, DWORD PTR [ecx-1]
$LL1078@exprint_re:
	mov	al, BYTE PTR [esi+1]
	inc	esi
	test	al, al
	jne	SHORT $LL1078@exprint_re
	mov	edx, DWORD PTR ??_C@_0P@OLFNJOBD@is_constraint?$FL?$AA@
	mov	DWORD PTR [esi], edx
	mov	eax, DWORD PTR ??_C@_0P@OLFNJOBD@is_constraint?$FL?$AA@+4
	mov	DWORD PTR [esi+4], eax
	mov	edx, DWORD PTR ??_C@_0P@OLFNJOBD@is_constraint?$FL?$AA@+8
	mov	DWORD PTR [esi+8], edx
	mov	ax, WORD PTR ??_C@_0P@OLFNJOBD@is_constraint?$FL?$AA@+12
	mov	WORD PTR [esi+12], ax
	mov	dl, BYTE PTR ??_C@_0P@OLFNJOBD@is_constraint?$FL?$AA@+14
	mov	BYTE PTR [esi+14], dl
	mov	esi, ecx
	lea	edx, DWORD PTR [esi+1]
	npad	2
$LL1079@exprint_re:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL1079@exprint_re

; 429  :          exprint_recur(node+node->left,prec_parent);

	mov	eax, DWORD PTR _prec_parent$[ebp]
	sub	esi, edx
	add	ecx, esi
	mov	DWORD PTR _pos, ecx
	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	push	eax
	add	ecx, ebx
	push	ecx
	call	_exprint_recur

; 430  :          strcat(pos,"].nonpositive "); pos += strlen(pos);

	mov	edx, DWORD PTR _pos
	add	esp, 8
	lea	eax, DWORD PTR [edx-1]
$LL1080@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1080@exprint_re
	mov	ecx, DWORD PTR ??_C@_0P@CIAKADLN@?$FN?4nonpositive?5?$AA@
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR ??_C@_0P@CIAKADLN@?$FN?4nonpositive?5?$AA@+4
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR ??_C@_0P@CIAKADLN@?$FN?4nonpositive?5?$AA@+8
	mov	DWORD PTR [eax+8], ecx
	mov	cx, WORD PTR ??_C@_0P@CIAKADLN@?$FN?4nonpositive?5?$AA@+12
	mov	WORD PTR [eax+12], cx
	mov	cl, BYTE PTR ??_C@_0P@CIAKADLN@?$FN?4nonpositive?5?$AA@+14
	mov	BYTE PTR [eax+14], cl
	mov	eax, edx
	lea	esi, DWORD PTR [eax+1]
	npad	3
$LL1081@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1081@exprint_re
	sub	eax, esi
	pop	edi
	add	edx, eax
	pop	esi
	mov	DWORD PTR _pos, edx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN706@exprint_re:

; 431  :          break;
; 432  : 
; 433  :       case ACOMMANDEXPR_NODE:
; 434  :          *(pos++) = '`';   *pos = 0;/* surround with backquotes */
; 435  :          exprint_recur(node+node->left,prec_parent);

	mov	esi, DWORD PTR _prec_parent$[ebp]
	mov	BYTE PTR [ecx], 96			; 00000060H
	inc	ecx
	mov	BYTE PTR [ecx], 0
	mov	edx, DWORD PTR [ebx+4]
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	esi
	push	edx
	mov	DWORD PTR _pos, ecx
	call	_exprint_recur

; 436  :          sprintf(pos,";`");

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_02ENHNEHDL@?$DL?$GA?$AA@
	push	eax
	call	_sprintf

; 437  :          pos+=2; /* surround with backquotes; make sure of ; */

	mov	edi, 2
	add	DWORD PTR _pos, edi
	add	esp, 16					; 00000010H

; 438  :          if ( node->right )

	cmp	DWORD PTR [ebx+8], 0
	je	$LN730@exprint_re

; 439  :           { sprintf(pos,", "); pos += 2;

	mov	ecx, DWORD PTR _pos
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	push	ecx
	call	_sprintf

; 440  :             exprint_recur(node+node->right,prec_parent);

	mov	edx, DWORD PTR [ebx+8]
	add	DWORD PTR _pos, edi
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	esi
	push	edx

; 657  :          exprint_recur(node+node->right,prec_parent);

	call	_exprint_recur
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN704@exprint_re:

; 441  :           }
; 442  :          return;
; 443  : 
; 444  :       case ATTR_FUNCTION_END_NODE:
; 445  :          exprint_recur(node+node->left,prec_parent);  /* define part */

	mov	eax, DWORD PTR [ebx+4]
	mov	edi, DWORD PTR _prec_parent$[ebp]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	edi
	push	eax
	call	_exprint_recur

; 446  :          strcat(pos," function {"); pos += strlen(pos);

	mov	edx, DWORD PTR _pos
	add	esp, 8
	lea	eax, DWORD PTR [edx-1]
	npad	6
$LL1082@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1082@exprint_re
	mov	ecx, DWORD PTR ??_C@_0M@PNBOCBHK@?5function?5?$HL?$AA@
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR ??_C@_0M@PNBOCBHK@?5function?5?$HL?$AA@+4
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR ??_C@_0M@PNBOCBHK@?5function?5?$HL?$AA@+8
	mov	DWORD PTR [eax+8], ecx
	mov	eax, edx
	lea	esi, DWORD PTR [eax+1]
$LL1083@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1083@exprint_re
	sub	eax, esi
	add	edx, eax
	mov	DWORD PTR _pos, edx

; 447  :          exprint_recur(node+node->right,prec_parent);  /* code part */

	mov	edx, DWORD PTR [ebx+8]
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	edi
	push	edx
	call	_exprint_recur

; 448  :          strcat(pos," } "); pos += strlen(pos);

	mov	edx, DWORD PTR _pos
	add	esp, 8
	lea	edi, DWORD PTR [edx-1]
$LL1084@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1084@exprint_re
	mov	eax, DWORD PTR ??_C@_03LHCEFAHM@?5?$HN?5?$AA@
	mov	DWORD PTR [edi], eax
	mov	eax, edx
	lea	esi, DWORD PTR [eax+1]
	npad	6
$LL1085@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1085@exprint_re
	sub	eax, esi
	pop	edi
	add	edx, eax
	pop	esi
	mov	DWORD PTR _pos, edx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN702@exprint_re:

; 449  :          return;
; 450  :      
; 451  :       case ATTR_FUNCTION_NODE:
; 452  :          exprint_recur(node+node->left,prec_parent);  /* define part */
; 453  :          return;
; 454  : 
; 455  :       case WRAP_VERTEX_NODE:
; 456  :          strcat(pos,"wrap_vertex("); pos += strlen(pos);

	lea	esi, DWORD PTR [ecx-1]
$LL1086@exprint_re:
	mov	al, BYTE PTR [esi+1]
	inc	esi
	test	al, al
	jne	SHORT $LL1086@exprint_re
	mov	eax, DWORD PTR ??_C@_0N@MHMLBPOO@wrap_vertex?$CI?$AA@
	mov	DWORD PTR [esi], eax
	mov	edx, DWORD PTR ??_C@_0N@MHMLBPOO@wrap_vertex?$CI?$AA@+4
	mov	DWORD PTR [esi+4], edx
	mov	eax, DWORD PTR ??_C@_0N@MHMLBPOO@wrap_vertex?$CI?$AA@+8
	mov	DWORD PTR [esi+8], eax
	mov	dl, BYTE PTR ??_C@_0N@MHMLBPOO@wrap_vertex?$CI?$AA@+12
	mov	BYTE PTR [esi+12], dl
	mov	esi, ecx
	lea	edx, DWORD PTR [esi+1]
$LL1087@exprint_re:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL1087@exprint_re
	sub	esi, edx
	add	ecx, esi
	mov	DWORD PTR _pos, ecx
$LN1667@exprint_re:

; 457  :          exprint_recur(node+node->left,prec_parent);

	mov	eax, DWORD PTR [ebx+4]
	mov	esi, DWORD PTR _prec_parent$[ebp]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	esi
	push	eax
	call	_exprint_recur

; 458  :          sprintf(pos,","); pos++;

	mov	ecx, DWORD PTR _pos
	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	push	ecx
	call	_sprintf

; 459  :          exprint_recur(node+node->right,prec_parent);

	mov	edx, DWORD PTR [ebx+8]
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	esi
	mov	edi, 1
	add	DWORD PTR _pos, edi
	push	edx
	call	_exprint_recur

; 460  :          sprintf(pos,")"); pos++;

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	eax
	call	_sprintf
	add	esp, 32					; 00000020H
	add	DWORD PTR _pos, edi
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN701@exprint_re:

; 461  :          return;
; 462  : 
; 463  :       case CREATE_VERTEX_NODE:
; 464  :          sprintf(pos,"new_vertex("); pos += strlen(pos);

	push	OFFSET ??_C@_0M@CPPKCNFJ@new_vertex?$CI?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1088@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1088@exprint_re
$LN1668@exprint_re:

; 465  :          exprint_recur(node+node->left,prec_parent);

	mov	ecx, DWORD PTR _prec_parent$[ebp]
	sub	eax, edx
	mov	edx, DWORD PTR [ebx+4]
	add	DWORD PTR _pos, eax
	imul	edx, 168				; 000000a8H
	push	ecx
	add	edx, ebx
	push	edx
	call	_exprint_recur

; 466  :          sprintf(pos,")"); pos++;

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	eax
$LN1669@exprint_re:
	call	_sprintf
	add	esp, 16					; 00000010H
	inc	DWORD PTR _pos
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN700@exprint_re:

; 467  :          return;
; 468  : 
; 469  :       case FACET_CROSSCUT_NODE:
; 470  :          sprintf(pos,"facet_crosscut("); pos += strlen(pos);

	push	OFFSET ??_C@_0BA@JMJFPOOP@facet_crosscut?$CI?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	5
$LL1089@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1089@exprint_re

; 471  :          exprint_recur(node+node->left,prec_parent);
; 472  :          sprintf(pos,")"); pos++;
; 473  :          return;

	jmp	SHORT $LN1668@exprint_re
$LN699@exprint_re:

; 474  : 
; 475  :       case CREATE_EDGE_NODE:
; 476  :          sprintf(pos,"new_edge("); pos += strlen(pos);

	push	OFFSET ??_C@_09DHJMEBMJ@new_edge?$CI?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	1
$LL1090@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1090@exprint_re
$LN1670@exprint_re:

; 477  :          exprint_recur(node+node->left,prec_parent);

	mov	ecx, DWORD PTR [ebx+4]
	mov	esi, DWORD PTR _prec_parent$[ebp]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	sub	eax, edx
	add	DWORD PTR _pos, eax
	push	esi
	push	ecx
	call	_exprint_recur

; 478  :          sprintf(pos,","); pos++;

	mov	edx, DWORD PTR _pos
	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	push	edx
	call	_sprintf

; 479  :          exprint_recur(node+node->right,prec_parent);

	mov	eax, DWORD PTR [ebx+8]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	esi
	mov	edi, 1
	add	DWORD PTR _pos, edi
	push	eax
	call	_exprint_recur

; 480  :          sprintf(pos,")"); pos++;

	mov	ecx, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	ecx
$LN1671@exprint_re:
	call	_sprintf
	add	esp, 32					; 00000020H
	add	DWORD PTR _pos, edi
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN698@exprint_re:

; 481  :          return;
; 482  : 
; 483  :       case CREATE_FACET_NODE:
; 484  :          sprintf(pos,"new_facet("); pos += strlen(pos);

	push	OFFSET ??_C@_0L@EONBLCMF@new_facet?$CI?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1091@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1091@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 485  :          exprint_recur(node+node->left,prec_parent);

	mov	eax, DWORD PTR [ebx+4]
	mov	edx, DWORD PTR _prec_parent$[ebp]
	imul	eax, 168				; 000000a8H
	push	edx
	add	eax, ebx
	push	eax
	call	_exprint_recur

; 486  :          sprintf(pos,")"); pos++;

	mov	ecx, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	ecx

; 487  :          return;

	jmp	$LN1669@exprint_re
$LN697@exprint_re:

; 488  : 
; 489  :       case CREATE_BODY_NODE:
; 490  :          sprintf(pos,"new_body"); pos += strlen(pos);

	push	OFFSET ??_C@_08PANPCJAE@new_body?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1092@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1092@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN696@exprint_re:

; 491  :          return;
; 492  : 
; 493  :       case ELINDEX_NODE:
; 494  :          exprint_recur(node+node->left,prec_parent);

	mov	edx, DWORD PTR [ebx+4]
	mov	esi, DWORD PTR _prec_parent$[ebp]
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	esi
	push	edx
	call	_exprint_recur
	add	esp, 8

; 495  :          if ( node->right )

	cmp	DWORD PTR [ebx+8], 0
	je	$LN730@exprint_re

; 496  :          { *pos = '@'; pos++; *pos = 0;

	mov	eax, DWORD PTR _pos
	mov	BYTE PTR [eax], 64			; 00000040H
	inc	eax
	mov	DWORD PTR _pos, eax
	mov	BYTE PTR [eax], 0

; 497  :             exprint_recur(node+node->right,prec_parent);

	mov	eax, DWORD PTR [ebx+8]

; 1334 :          exprint_recur(node+node->left,PREC_ASSIGN);

	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	esi
	push	eax
	call	_exprint_recur
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN694@exprint_re:

; 498  :          }
; 499  :          return;
; 500  : 
; 501  :       case PUSH_ELEMENT_ID_NODE:
; 502  : 		  sprintf(pos,"%s%d@%d\n",(inverted(node->op1.id)?" -":""),
; 503  :              node->op1.id & OFFSETMASK, id_task(node->op1.id));

	mov	ebx, DWORD PTR [ebx+32]
	mov	eax, OFFSET ??_C@_02BINJDKOC@?5?9?$AA@
	test	ebx, 134217728				; 08000000H
	jne	SHORT $LN748@exprint_re
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN748@exprint_re:
	push	0
	and	ebx, 134217727				; 07ffffffH
	push	ebx
	push	eax
	push	OFFSET ??_C@_08IHIBGNIK@?$CFs?$CFd?$EA?$CFd?6?$AA@
	push	ecx
	call	_sprintf

; 504  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 20					; 00000014H
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1093@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1093@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN693@exprint_re:

; 505  :          return;
; 506  :          
; 507  :       case VALID_ELEMENT_NODE:
; 508  :          sprintf(pos,"valid_element(%s[",typenames[node->op1.eltype]); 

	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR _typenames[edx*4]
	push	eax
	push	OFFSET ??_C@_0BC@HAFOGDEI@valid_element?$CI?$CFs?$FL?$AA@
	push	ecx
	call	_sprintf

; 509  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1094@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1094@exprint_re

; 510  :          exprint_recur(node+node->left,prec_parent);

	mov	ecx, DWORD PTR _prec_parent$[ebp]
	sub	eax, edx
	mov	edx, DWORD PTR [ebx+4]
	add	DWORD PTR _pos, eax
	imul	edx, 168				; 000000a8H
	push	ecx
	add	edx, ebx
	push	edx
	call	_exprint_recur

; 511  :          sprintf(pos,"])"); pos+=2;

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_02CAJMAEOF@?$FN?$CJ?$AA@
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H
	add	DWORD PTR _pos, 2
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN692@exprint_re:

; 512  :          return;
; 513  :    
; 514  :       case VALID_CONSTRAINT_NODE:
; 515  :          sprintf(pos,"valid_constraint("); 

	push	OFFSET ??_C@_0BC@PBMMAEOP@valid_constraint?$CI?$AA@
	push	ecx
	call	_sprintf

; 516  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1095@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1095@exprint_re

; 517  :          exprint_recur(node+node->left,prec_parent);
; 518  :          sprintf(pos,")"); pos+=1;
; 519  :          return;

	jmp	$LN1668@exprint_re
$LN691@exprint_re:

; 520  :    
; 521  :       case VALID_BOUNDARY_NODE:
; 522  :          sprintf(pos,"valid_boundary("); 

	push	OFFSET ??_C@_0BA@BCKHPENM@valid_boundary?$CI?$AA@
	push	ecx
	call	_sprintf

; 523  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1096@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1096@exprint_re

; 524  :          exprint_recur(node+node->left,prec_parent);
; 525  :          sprintf(pos,")"); pos+=1;
; 526  :          return;

	jmp	$LN1668@exprint_re
$LN690@exprint_re:

; 527  :    
; 528  :       case MATRIX_INVERSE_NODE:
; 529  :          sprintf(pos,"matrix_inverse(%s,%s)",
; 530  :             globals(node->op1.name_id)->name,globals(node->op2.name_id)->name);

	mov	eax, DWORD PTR [ebx+136]
	mov	edi, DWORD PTR _dymem
	mov	edx, eax
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN749@exprint_re
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN751@exprint_re
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [esi]
	jmp	SHORT $LN750@exprint_re
$LN751@exprint_re:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN749@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN750@exprint_re
$LN749@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+edi]
$LN750@exprint_re:
	mov	ebx, DWORD PTR [ebx+32]
	mov	edx, ebx
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN755@exprint_re
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN757@exprint_re
	and	ebx, 16777215				; 00ffffffH
	imul	ebx, 224				; 000000e0H
	add	ebx, DWORD PTR [esi]
	jmp	SHORT $LN756@exprint_re
$LN757@exprint_re:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN755@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	ebx, 16777215				; 00ffffffH
	mov	ebx, DWORD PTR [edx+ebx*4]
	jmp	SHORT $LN756@exprint_re
$LN755@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	ebx, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [edx+ebx*4]
	mov	ebx, DWORD PTR [edx+edi]
$LN756@exprint_re:
	push	eax
	push	ebx
	push	OFFSET ??_C@_0BG@ICBGMJLO@matrix_inverse?$CI?$CFs?0?$CFs?$CJ?$AA@
	push	ecx
	call	_sprintf

; 531  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1097@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1097@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN689@exprint_re:

; 532  :          return;
; 533  : 
; 534  :       case MATRIX_MULTIPLY_NODE:
; 535  :          sprintf(pos,"matrix_multiply(%s,%s,%s)",
; 536  :             globals(node->op1.name_id)->name,globals(node->op2.name_id)->name,
; 537  :             globals(node->op3.name_id)->name);

	mov	eax, DWORD PTR [ebx+140]
	mov	edi, DWORD PTR _dymem
	mov	edx, eax
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN761@exprint_re
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN763@exprint_re
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [esi]
	jmp	SHORT $LN762@exprint_re
$LN763@exprint_re:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN761@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN762@exprint_re
$LN761@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+edi]
$LN762@exprint_re:
	mov	edx, DWORD PTR [ebx+136]
	mov	esi, edx
	and	esi, -16777216				; ff000000H
	cmp	esi, 268435456				; 10000000H
	je	SHORT $LN767@exprint_re
	cmp	esi, 805306368				; 30000000H
	jne	SHORT $LN769@exprint_re
	mov	esi, DWORD PTR _localbase$[ebp]
	and	edx, 16777215				; 00ffffffH
	imul	edx, 224				; 000000e0H
	add	edx, DWORD PTR [esi]
	jmp	SHORT $LN768@exprint_re
$LN769@exprint_re:
	cmp	esi, 536870912				; 20000000H
	jne	SHORT $LN767@exprint_re
	mov	esi, DWORD PTR _web+5656
	and	edx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	jmp	SHORT $LN768@exprint_re
$LN767@exprint_re:
	mov	esi, DWORD PTR _web+5652
	and	edx, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [esi+edx*4]
	mov	edx, DWORD PTR [edx+edi]
$LN768@exprint_re:
	mov	ebx, DWORD PTR [ebx+32]
	mov	esi, ebx
	and	esi, -16777216				; ff000000H
	cmp	esi, 268435456				; 10000000H
	je	SHORT $LN773@exprint_re
	cmp	esi, 805306368				; 30000000H
	jne	SHORT $LN775@exprint_re
	mov	esi, DWORD PTR _localbase$[ebp]
	and	ebx, 16777215				; 00ffffffH
	imul	ebx, 224				; 000000e0H
	add	ebx, DWORD PTR [esi]
	jmp	SHORT $LN774@exprint_re
$LN775@exprint_re:
	cmp	esi, 536870912				; 20000000H
	jne	SHORT $LN773@exprint_re
	mov	esi, DWORD PTR _web+5656
	and	ebx, 16777215				; 00ffffffH
	mov	ebx, DWORD PTR [esi+ebx*4]
	jmp	SHORT $LN774@exprint_re
$LN773@exprint_re:
	mov	esi, DWORD PTR _web+5652
	and	ebx, 16777215				; 00ffffffH
	lea	esi, DWORD PTR [esi+ebx*4]
	mov	ebx, DWORD PTR [esi+edi]
$LN774@exprint_re:
	push	eax
	push	edx
	push	ebx
	push	OFFSET ??_C@_0BK@EMGJAFJA@matrix_multiply?$CI?$CFs?0?$CFs?0?$CFs?$CJ?$AA@
	push	ecx
	call	_sprintf

; 538  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 20					; 00000014H
	lea	edx, DWORD PTR [eax+1]
$LL1098@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1098@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN688@exprint_re:

; 539  :          return;
; 540  : 
; 541  :       case MATRIX_DETERMINANT_NODE:
; 542  :          sprintf(pos,"matrix_determinant(%s)",
; 543  :             globals(node->op1.name_id)->name);

	mov	ebx, DWORD PTR [ebx+32]
	mov	eax, ebx
	and	eax, -16777216				; ff000000H
	cmp	eax, 268435456				; 10000000H
	je	SHORT $LN779@exprint_re
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN781@exprint_re
	and	ebx, 16777215				; 00ffffffH
	imul	ebx, 224				; 000000e0H
	add	ebx, DWORD PTR [esi]
	jmp	SHORT $LN780@exprint_re
$LN781@exprint_re:
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN779@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	ebx, 16777215				; 00ffffffH
	mov	ebx, DWORD PTR [edx+ebx*4]
	jmp	SHORT $LN780@exprint_re
$LN779@exprint_re:
	mov	eax, DWORD PTR _web+5652
	and	ebx, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR _dymem
	mov	ebx, DWORD PTR [edx+eax]
$LN780@exprint_re:
	push	ebx
	push	OFFSET ??_C@_0BH@CJCHMGEH@matrix_determinant?$CI?$CFs?$CJ?$AA@
	push	ecx
	call	_sprintf

; 544  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL1099@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1099@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN687@exprint_re:

; 545  :          return;
; 546  : 
; 547  :       case MERGE_VERTEX_NODE:
; 548  :          sprintf(pos,"vertex_merge("); pos += strlen(pos);

	push	OFFSET ??_C@_0O@NNPGAOLH@vertex_merge?$CI?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1100@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1100@exprint_re

; 549  :          exprint_recur(node+node->left,prec_parent);
; 550  :          sprintf(pos,","); pos++;
; 551  :          exprint_recur(node+node->right,prec_parent);
; 552  :          sprintf(pos,")"); pos++;
; 553  :          return;

	jmp	$LN1670@exprint_re
$LN686@exprint_re:

; 554  : 
; 555  :       case MERGE_EDGE_NODE:
; 556  :          sprintf(pos,"edge_merge("); pos += strlen(pos);

	push	OFFSET ??_C@_0M@PJOFJFAC@edge_merge?$CI?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1101@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1101@exprint_re

; 557  :          exprint_recur(node+node->left,prec_parent);

	mov	esi, DWORD PTR _prec_parent$[ebp]
	sub	eax, edx
	mov	edx, DWORD PTR [ebx+4]
	add	DWORD PTR _pos, eax
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	esi
	push	edx
	call	_exprint_recur

; 558  :          sprintf(pos,","); pos++;

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	push	eax
	call	_sprintf

; 559  :          exprint_recur(node+node->right,prec_parent);

	mov	ecx, DWORD PTR [ebx+8]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	push	esi
	mov	edi, 1
	add	DWORD PTR _pos, edi
	push	ecx
	call	_exprint_recur

; 560  :          sprintf(pos,")"); pos++;

	mov	edx, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	edx

; 561  :          return;

	jmp	$LN1671@exprint_re
$LN685@exprint_re:

; 562  : 
; 563  :       case MERGE_FACET_NODE:
; 564  :          sprintf(pos,"facet_merge("); pos += strlen(pos);

	push	OFFSET ??_C@_0N@LGCBLIJP@facet_merge?$CI?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1102@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1102@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 565  :          exprint_recur(node+node->left,prec_parent);
; 566  :          sprintf(pos,","); pos++;
; 567  :          exprint_recur(node+node->right,prec_parent);
; 568  :          sprintf(pos,")"); pos++;
; 569  :          return;

	jmp	$LN1667@exprint_re
$LN684@exprint_re:

; 570  : 
; 571  :       case COMMAND_BLOCK_NODE:
; 572  :          sprintf(pos,"{ "); pos+=2; bracket_depth++;

	push	OFFSET ??_C@_02MNJOIFPO@?$HL?5?$AA@
	push	ecx
	call	_sprintf

; 573  :          exprint_recur(node+node->left,prec_parent);

	mov	edx, DWORD PTR [ebx+4]
	mov	ecx, DWORD PTR _prec_parent$[ebp]
	imul	edx, 168				; 000000a8H
	add	DWORD PTR _pos, 2
	push	ecx
	add	edx, ebx
	mov	esi, 1
	add	DWORD PTR _bracket_depth, esi
	push	edx
	call	_exprint_recur

; 574  :          bracket_depth--;

	sub	DWORD PTR _bracket_depth, esi

; 575  :          newline();

	call	_newline

; 576  :          sprintf(pos,"}"); pos++;

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_01CELHOKLL@?$HN?$AA@
	push	eax
	call	_sprintf
	add	esp, 24					; 00000018H
	add	DWORD PTR _pos, esi
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN683@exprint_re:

; 577  :          return;
; 578  : 
; 579  :       case LOCAL_LIST_START_NODE:
; 580  :          sprintf (pos,"local ");

	push	OFFSET ??_C@_06FOGGDAIC@local?5?$AA@
	push	ecx
	call	_sprintf

; 581  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1103@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1103@exprint_re
$LN1651@exprint_re:
	sub	eax, edx
	add	DWORD PTR _pos, eax
$LN417@exprint_re:

; 582  :          exprint_recur(node+node->left,prec_parent);

	mov	ecx, DWORD PTR _prec_parent$[ebp]
	push	ecx
$LN1653@exprint_re:
	mov	edx, DWORD PTR [ebx+4]
$LN1654@exprint_re:
	imul	edx, 168				; 000000a8H
	add	edx, ebx
$LN1655@exprint_re:
	push	edx
$LN1652@exprint_re:
	call	_exprint_recur
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN682@exprint_re:

; 583  :          break;
; 584  : 
; 585  :       case DECLARE_LOCAL_NODE:
; 586  :        { 
; 587  :          if ( node->left )

	mov	eax, DWORD PTR [ebx+4]
	test	eax, eax
	je	SHORT $LN681@exprint_re

; 588  :          { 
; 589  :            exprint_recur(node+node->left,0);

	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	0
	push	eax
	call	_exprint_recur

; 590  :            *pos = ','; pos++; *pos = 0;

	mov	ecx, DWORD PTR _pos
	mov	BYTE PTR [ecx], 44			; 0000002cH
	add	esp, 8
	inc	ecx
	mov	DWORD PTR _pos, ecx
	mov	BYTE PTR [ecx], 0
$LN681@exprint_re:

; 591  :          }
; 592  :          sprintf (pos,"%s",globals(node->op1.name_id)->name);

	mov	ebx, DWORD PTR [ebx+32]
	mov	eax, ebx
	and	eax, -16777216				; ff000000H
	cmp	eax, 268435456				; 10000000H
	je	SHORT $LN785@exprint_re
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN787@exprint_re
	and	ebx, 16777215				; 00ffffffH
	imul	ebx, 224				; 000000e0H
	add	ebx, DWORD PTR [esi]
	jmp	SHORT $LN786@exprint_re
$LN787@exprint_re:
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN785@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	ebx, 16777215				; 00ffffffH
	mov	ebx, DWORD PTR [edx+ebx*4]
	jmp	SHORT $LN786@exprint_re
$LN785@exprint_re:
	mov	eax, DWORD PTR _web+5652
	and	ebx, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR _dymem
	mov	ebx, DWORD PTR [edx+eax]
$LN786@exprint_re:
	push	ebx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	ecx
	call	_sprintf

; 593  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1104@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1104@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN680@exprint_re:

; 594  :          return;
; 595  :        }
; 596  :       
; 597  :       case DEFINE_QUANTITY_NODE:
; 598  :        { struct gen_quant *g = GEN_QUANT(node->op1.quant_id);

	mov	edx, DWORD PTR [ebx+32]
	imul	edx, 368				; 00000170H
	add	edx, DWORD PTR _gen_quant_list

; 599  :          sprintf(pos,"/* Definition of quantity %s was originally here.*/",
; 600  :             g->name);

	push	edx
	push	OFFSET ??_C@_0DE@JKPGKFB@?1?$CK?5Definition?5of?5quantity?5?$CFs?5was@
	push	ecx
	call	_sprintf

; 601  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	7
$LL1105@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1105@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN679@exprint_re:

; 602  :          return;
; 603  :        }
; 604  : 
; 605  :       case DEFINE_METHOD_INSTANCE_NODE:
; 606  :        { struct method_instance *mi = METH_INSTANCE(node->op1.meth_id);

	mov	eax, DWORD PTR [ebx+32]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list

; 607  :          sprintf(pos,
; 608  :            "/* Definition of method instance %s was originally here.*/",
; 609  :             mi->name);

	push	eax
	push	OFFSET ??_C@_0DL@PIPFCDIL@?1?$CK?5Definition?5of?5method?5instance@
	push	ecx
	call	_sprintf

; 610  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	5
$LL1106@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1106@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN678@exprint_re:

; 611  :          return;
; 612  :        }
; 613  : 
; 614  :       case DEFINE_CONSTRAINT_NODE:
; 615  :        { struct constraint *con = get_constraint(node->op1.con_id);

	mov	ebx, DWORD PTR [ebx+32]
	mov	eax, ebx
	and	eax, 1073741823				; 3fffffffH
	imul	eax, 176				; 000000b0H
	add	eax, DWORD PTR _web+652

; 616  :          if ( con->attr & NAMED_THING )

	xor	esi, esi
	mov	edx, DWORD PTR [eax+32]
	and	edx, 512				; 00000200H
	or	edx, esi
	je	SHORT $LN677@exprint_re

; 617  :            sprintf(pos,
; 618  :              "/* Definition of constraint %s was originally here.*/",
; 619  :               con->name);

	push	eax
	push	OFFSET ??_C@_0DG@JFJIFFJN@?1?$CK?5Definition?5of?5constraint?5?$CFs?5w@

; 620  :          else

	jmp	SHORT $LN1633@exprint_re
$LN677@exprint_re:

; 621  :            sprintf(pos,
; 622  :              "/* Definition of constraint %d was originally here.*/",
; 623  :               node->op1.con_id);

	push	ebx
	push	OFFSET ??_C@_0DG@DNPIOFL@?1?$CK?5Definition?5of?5constraint?5?$CFd?5w@
$LN1633@exprint_re:
	push	ecx
	call	_sprintf

; 624  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1107@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1107@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN675@exprint_re:

; 625  :          return;
; 626  :        }
; 627  : 
; 628  :       case DEFINE_BOUNDARY_NODE:
; 629  :        { struct boundary *bdry = web.boundaries+node->op1.bdry_id;

	mov	ebx, DWORD PTR [ebx+32]
	mov	eax, ebx
	imul	eax, 136				; 00000088H
	add	eax, DWORD PTR _web+776

; 630  :          if ( bdry->attr & NAMED_THING )

	xor	esi, esi
	mov	edx, DWORD PTR [eax+32]
	and	edx, 512				; 00000200H
	or	edx, esi
	je	SHORT $LN674@exprint_re

; 631  :            sprintf(pos,
; 632  :              "/* Definition of boundary %s was originally here.*/",
; 633  :               bdry->name);

	push	eax
	push	OFFSET ??_C@_0DE@BLDPCHML@?1?$CK?5Definition?5of?5boundary?5?$CFs?5was@

; 634  :          else

	jmp	SHORT $LN1634@exprint_re
$LN674@exprint_re:

; 635  :            sprintf(pos,
; 636  :              "/* Definition of boundary %d was originally here.*/",
; 637  :               node->op1.con_id);

	push	ebx
	push	OFFSET ??_C@_0DE@INHIPMAN@?1?$CK?5Definition?5of?5boundary?5?$CFd?5was@
$LN1634@exprint_re:
	push	ecx
	call	_sprintf

; 638  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1108@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1108@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN672@exprint_re:

; 639  :          return;
; 640  :        }
; 641  : 
; 642  :       case DEFINE_EXTRA_NODE:
; 643  :          ex = EXTRAS(node->op2.eltype)+node->op1.extranum;

	mov	eax, DWORD PTR [ebx+136]
	mov	edi, DWORD PTR [ebx+32]
	mov	edx, eax
	imul	edi, 240				; 000000f0H

; 644  :          sprintf(pos,"define %s attribute %s %s",
; 645  :            typenames[node->op2.eltype],ex->name, datatype_name[ex->type]);

	mov	eax, DWORD PTR _typenames[eax*4]
	imul	edx, 112				; 00000070H
	mov	esi, DWORD PTR _web[edx+104]
	add	esi, edi
	add	esi, DWORD PTR _dymem
	mov	edx, DWORD PTR [esi+68]
	mov	edx, DWORD PTR _datatype_name[edx*4]
	push	edx
	push	esi
	push	eax
	push	OFFSET ??_C@_0BK@OOLEHMJN@define?5?$CFs?5attribute?5?$CFs?5?$CFs?$AA@
	push	ecx
	call	_sprintf

; 646  :          pos += strlen(pos);

	mov	ecx, DWORD PTR _pos
	mov	eax, ecx
	add	esp, 20					; 00000014H
	lea	edi, DWORD PTR [eax+1]
$LL1109@exprint_re:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1109@exprint_re
	sub	eax, edi
	add	ecx, eax

; 647  :          if ( ex->code.start )

	cmp	DWORD PTR [esi+128], 0
	mov	DWORD PTR _pos, ecx
	je	$LN730@exprint_re

; 648  :          { strcat(pos," function "); pos += strlen(pos);

	lea	eax, DWORD PTR [ecx-1]
$LL1110@exprint_re:
	mov	dl, BYTE PTR [eax+1]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1110@exprint_re
	mov	edx, DWORD PTR ??_C@_0L@LLAPKIKO@?5function?5?$AA@
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR ??_C@_0L@LLAPKIKO@?5function?5?$AA@+4
	mov	DWORD PTR [eax+4], edx
	mov	dx, WORD PTR ??_C@_0L@LLAPKIKO@?5function?5?$AA@+8
	mov	WORD PTR [eax+8], dx
	mov	dl, BYTE PTR ??_C@_0L@LLAPKIKO@?5function?5?$AA@+10
	mov	BYTE PTR [eax+10], dl
	mov	eax, ecx
	lea	edi, DWORD PTR [eax+1]
$LL1111@exprint_re:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1111@exprint_re
	sub	eax, edi
	add	ecx, eax

; 649  :            /*current_proc_locals[++current_proc_depth] = ex->locals;*/
; 650  :            exprint_recur(ex->code.root,prec_parent);

	mov	eax, DWORD PTR _prec_parent$[ebp]
	mov	DWORD PTR _pos, ecx
	mov	ecx, DWORD PTR [esi+132]
	push	eax
	push	ecx
	call	_exprint_recur
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN670@exprint_re:

; 651  :            /*current_proc_depth--;*/
; 652  :          }
; 653  :          break;
; 654  : 
; 655  :       case DEFINE_EXTRA_INDEX_NODE:
; 656  :          exprint_recur(node+node->left,prec_parent);

	mov	edx, DWORD PTR [ebx+4]
	mov	esi, DWORD PTR _prec_parent$[ebp]
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	esi
	push	edx
	call	_exprint_recur
$LN1657@exprint_re:

; 657  :          exprint_recur(node+node->right,prec_parent);

	mov	eax, DWORD PTR [ebx+8]
	push	esi
$LN1660@exprint_re:
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	eax
$LN1658@exprint_re:
	call	_exprint_recur
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN669@exprint_re:

; 658  :          break; 
; 659  : 
; 660  :       case DEFINE_ARRAY_NODE: 
; 661  :          sprintf(pos,"define %s %s",globals(node->op1.name_id)->name,
; 662  :             datatype_name[node->op2.valtype]);

	mov	eax, DWORD PTR [ebx+32]
	mov	edx, eax
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN791@exprint_re
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN793@exprint_re
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [esi]
	jmp	SHORT $LN792@exprint_re
$LN793@exprint_re:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN791@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN792@exprint_re
$LN791@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+edx]
$LN792@exprint_re:
	mov	edx, DWORD PTR [ebx+136]
	mov	edx, DWORD PTR _datatype_name[edx*4]
	push	edx
	push	eax
	push	OFFSET ??_C@_0N@KLABKDID@define?5?$CFs?5?$CFs?$AA@
	push	ecx
	call	_sprintf

; 663  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
$LL1112@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1112@exprint_re
$LN1661@exprint_re:
	sub	eax, edx
	add	DWORD PTR _pos, eax
$LN664@exprint_re:

; 664  :          exprint_recur(node+node->left,prec_parent);

	mov	eax, DWORD PTR _prec_parent$[ebp]
	mov	ecx, DWORD PTR [ebx+4]
$LN1688@exprint_re:
	imul	ecx, 168				; 000000a8H
	push	eax
	add	ecx, ebx
	push	ecx
$LN1662@exprint_re:
	call	_exprint_recur
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN668@exprint_re:

; 665  :          break;
; 666  : 
; 667  :       case DEFINE_FIXED_LOCAL_ARRAY_NODE: 
; 668  :         { struct global *g = globals(node->op1.name_id);

	mov	eax, DWORD PTR [ebx+32]
	mov	edx, eax
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN797@exprint_re
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN799@exprint_re
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [esi]
	jmp	SHORT $LN798@exprint_re
$LN799@exprint_re:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN797@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN798@exprint_re
$LN797@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+edx]
$LN798@exprint_re:

; 670  :           int i;
; 671  : 
; 672  :           sprintf(pos,"define %s %s",g->name,
; 673  :             datatype_name[node->op2.valtype]);

	mov	edx, DWORD PTR [ebx+136]
	mov	edx, DWORD PTR _datatype_name[edx*4]
	mov	edi, DWORD PTR [eax+168]
	push	edx
	push	eax
	push	OFFSET ??_C@_0N@KLABKDID@define?5?$CFs?5?$CFs?$AA@
	push	ecx
	mov	DWORD PTR _a$89727[ebp], edi
	call	_sprintf

; 674  :           pos += strlen(pos);

	mov	ecx, DWORD PTR _pos
	mov	eax, ecx
	add	esp, 16					; 00000010H
	lea	esi, DWORD PTR [eax+1]
$LL1113@exprint_re:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1113@exprint_re
	sub	eax, esi
	add	ecx, eax

; 675  :           for ( i = 0 ; i < a->dim ; i++ )

	xor	esi, esi
	mov	DWORD PTR _pos, ecx
	cmp	DWORD PTR [edi+4], esi
	jle	$LN730@exprint_re

; 669  :           struct array *a = g->attr.arrayptr;

	lea	ebx, DWORD PTR [edi+24]
$LL667@exprint_re:

; 676  :           { sprintf(pos,"[%d]",a->sizes[i]);

	mov	eax, DWORD PTR [ebx]
	push	eax
	push	OFFSET ??_C@_04KBDJOJNB@?$FL?$CFd?$FN?$AA@
	push	ecx
	call	_sprintf

; 677  :             pos += strlen(pos);

	mov	ecx, DWORD PTR _pos
	mov	eax, ecx
	add	esp, 12					; 0000000cH
	lea	edi, DWORD PTR [eax+1]
$LL1114@exprint_re:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1114@exprint_re
	mov	edx, DWORD PTR _a$89727[ebp]
	sub	eax, edi
	add	ecx, eax
	inc	esi
	add	ebx, 4
	mov	DWORD PTR _pos, ecx
	cmp	esi, DWORD PTR [edx+4]
	jl	SHORT $LL667@exprint_re
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN663@exprint_re:

; 678  :           }
; 679  :         }
; 680  :          break;
; 681  : 
; 682  :       case ARRAY_EVAL_NODE:
; 683  :          exprint_recur(node+node->left,prec_parent);
; 684  :          break;
; 685  : 
; 686  :       case ARRAY_HEAD_NODE:
; 687  :          exprint_recur(node+node->left,prec_parent);

	mov	edx, DWORD PTR _prec_parent$[ebp]
	mov	eax, DWORD PTR [ebx+4]
	push	edx
$LN1664@exprint_re:
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	eax
	call	_exprint_recur
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN662@exprint_re:

; 688  :          break;
; 689  : 
; 690  :       case ARRAYASSIGN_NODE:
; 691  :          sprintf(pos,"%s",globals(node->op2.name_id)->name);

	mov	eax, DWORD PTR [ebx+136]
	mov	edx, eax
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN803@exprint_re
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN805@exprint_re
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [esi]
	jmp	SHORT $LN804@exprint_re
$LN805@exprint_re:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN803@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN804@exprint_re
$LN803@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+edx]
$LN804@exprint_re:
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	ecx
	call	_sprintf

; 692  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1115@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1115@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 693  :          exprint_recur(node+node->left,PREC_ASSIGN);

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	10					; 0000000aH
	push	eax
	call	_exprint_recur

; 694  :          switch ( node->op1.assigntype )

	mov	eax, DWORD PTR [ebx+32]
	add	eax, -30001				; ffff8acfH
	add	esp, 8
	cmp	eax, 4
	ja	SHORT $LN660@exprint_re
	jmp	DWORD PTR $LN1692@exprint_re[eax*4]
$LN659@exprint_re:

; 695  :          { case ASSIGN_OP: sprintf(pos," := "); break;

	mov	ecx, DWORD PTR _pos
	push	OFFSET ??_C@_04NOLNGNEC@?5?3?$DN?5?$AA@
	push	ecx
	jmp	SHORT $LN1635@exprint_re
$LN658@exprint_re:

; 696  :            case PLUSASSIGN_OP: sprintf(pos," += "); break;

	push	OFFSET ??_C@_04DGBIFNLI@?5?$CL?$DN?5?$AA@
	jmp	SHORT $LN1636@exprint_re
$LN657@exprint_re:

; 697  :            case SUBASSIGN_OP: sprintf(pos," -= "); break;

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_04BDHDACGE@?5?9?$DN?5?$AA@
	push	eax
	jmp	SHORT $LN1635@exprint_re
$LN656@exprint_re:

; 698  :            case MULTASSIGN_OP: sprintf(pos," *= "); break;

	mov	ecx, DWORD PTR _pos
	push	OFFSET ??_C@_04IOKEDKNN@?5?$CK?$DN?5?$AA@
	push	ecx
	jmp	SHORT $LN1635@exprint_re
$LN655@exprint_re:

; 699  :            case DIVASSIGN_OP: sprintf(pos," /= "); break;

	push	OFFSET ??_C@_04LJHKMKOP@?5?1?$DN?5?$AA@
$LN1636@exprint_re:
	mov	edx, DWORD PTR _pos
	push	edx
$LN1635@exprint_re:
	call	_sprintf
	add	esp, 8
$LN660@exprint_re:

; 700  :          } 
; 701  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	lea	edx, DWORD PTR [eax+1]
$LL1116@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1116@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 702  :          exprint_recur(node+node->right,PREC_ASSIGN);

	mov	eax, DWORD PTR [ebx+8]
	push	10					; 0000000aH

; 703  :          break;

	jmp	$LN1664@exprint_re
$LN654@exprint_re:

; 704  : 
; 705  :       case ARRAYEVAL_NODE:
; 706  :          sprintf(pos,"%s",globals(node->op2.name_id)->name);

	mov	eax, DWORD PTR [ebx+136]
	mov	edx, eax
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN809@exprint_re
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN811@exprint_re
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [esi]
	jmp	SHORT $LN810@exprint_re
$LN811@exprint_re:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN809@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN810@exprint_re
$LN809@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+edx]
$LN810@exprint_re:
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	ecx
	call	_sprintf

; 707  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1117@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1117@exprint_re

; 708  :          exprint_recur(node+node->left,prec_parent);
; 709  :          break;  

	jmp	$LN1661@exprint_re
$LN653@exprint_re:

; 710  : 
; 711  :       /* initializer array syntax */
; 712  :       case ARRAYLIST_NODE: 
; 713  :         exprint_recur(node+node->left,prec_parent);

	mov	edx, DWORD PTR [ebx+4]
	mov	esi, DWORD PTR _prec_parent$[ebp]
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	esi
	push	edx
	call	_exprint_recur

; 714  :         *(pos++) = ','; *pos=0;

	mov	eax, DWORD PTR _pos
	mov	BYTE PTR [eax], 44			; 0000002cH
	inc	eax
	mov	DWORD PTR _pos, eax
	mov	BYTE PTR [eax], 0

; 715  :         exprint_recur(node+node->right,prec_parent);
; 716  :         break;

	jmp	$LN1657@exprint_re
$LN652@exprint_re:

; 717  : 
; 718  :       case ARRAYEXPR_NODE:
; 719  :         *(pos++) = '{'; *pos = 0;

	mov	BYTE PTR [ecx], 123			; 0000007bH
	inc	ecx
	mov	BYTE PTR [ecx], 0

; 720  :         if ( node->left )

	mov	eax, DWORD PTR [ebx+4]
	mov	DWORD PTR _pos, ecx
	test	eax, eax
	je	SHORT $LN651@exprint_re

; 721  :           exprint_recur(node+node->left,prec_parent);

	mov	ecx, DWORD PTR _prec_parent$[ebp]
	imul	eax, 168				; 000000a8H
	push	ecx
	add	eax, ebx
	push	eax
	call	_exprint_recur
	mov	ecx, DWORD PTR _pos
	add	esp, 8
$LN651@exprint_re:

; 722  :         *(pos++) = '}';

	pop	edi
	mov	BYTE PTR [ecx], 125			; 0000007dH
	inc	ecx
	pop	esi
	mov	DWORD PTR _pos, ecx

; 723  :         *pos = 0;

	mov	BYTE PTR [ecx], 0
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN650@exprint_re:

; 724  :         break;
; 725  : 
; 726  : 
; 727  :       /* whole-array syntax */
; 728  :       case ARRAYIDENT_NODE:
; 729  :       case FIXED_ARRAY_RVAL_NODE:
; 730  :          sprintf(pos,"%s",get_name_name(node->op2.name_id,localbase));

	mov	edx, DWORD PTR [ebx+136]
	push	esi
	push	edx
	call	_get_name_name
	push	eax
	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	eax
	call	_sprintf

; 731  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 20					; 00000014H
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1118@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1118@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN649@exprint_re:

; 732  :          break;
; 733  : 
; 734  :       case ARRAY_ASSIGNOP_ARRAY_NODE:
; 735  :       case ARRAYEXPR_ASSIGN_NODE:
; 736  :       case ARRAY_ASSIGNOP_SCALAR_NODE:
; 737  :       case ARRAY_ASSIGNOP_STRING_NODE:
; 738  :       case ARRAY_ASSIGNOP_S_X_A_NODE:
; 739  :       case ARRAY_ASSIGNOP_A_P_A_NODE:
; 740  :       case ARRAY_ASSIGNOP_A_S_A_NODE:
; 741  :       case ARRAY_ASSIGNOP_A_X_A_NODE:
; 742  :          exprint_recur(node+node->left,PREC_ASSIGN);

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	push	10					; 0000000aH
	push	ecx
	call	_exprint_recur
	add	esp, 8

; 743  :          if ( !(node->flags & SET_ASSIGNOP) )

	test	DWORD PTR [ebx+24], 16384		; 00004000H
	jne	$LN648@exprint_re

; 744  :          {
; 745  :            switch ( node->op1.assigntype )

	mov	eax, DWORD PTR [ebx+32]
	add	eax, -30001				; ffff8acfH
	cmp	eax, 4
	ja	SHORT $LN646@exprint_re
	jmp	DWORD PTR $LN1693@exprint_re[eax*4]
$LN645@exprint_re:

; 746  :            { case ASSIGN_OP: sprintf(pos," := "); break;

	mov	edx, DWORD PTR _pos
	push	OFFSET ??_C@_04NOLNGNEC@?5?3?$DN?5?$AA@
	push	edx
	jmp	SHORT $LN1637@exprint_re
$LN644@exprint_re:

; 747  :              case PLUSASSIGN_OP: sprintf(pos," += "); break;

	push	OFFSET ??_C@_04DGBIFNLI@?5?$CL?$DN?5?$AA@
	jmp	SHORT $LN1638@exprint_re
$LN643@exprint_re:

; 748  :              case SUBASSIGN_OP: sprintf(pos," -= "); break;

	mov	ecx, DWORD PTR _pos
	push	OFFSET ??_C@_04BDHDACGE@?5?9?$DN?5?$AA@
	push	ecx
	jmp	SHORT $LN1637@exprint_re
$LN642@exprint_re:

; 749  :              case MULTASSIGN_OP: sprintf(pos," *= "); break;

	mov	edx, DWORD PTR _pos
	push	OFFSET ??_C@_04IOKEDKNN@?5?$CK?$DN?5?$AA@
	push	edx
	jmp	SHORT $LN1637@exprint_re
$LN641@exprint_re:

; 750  :              case DIVASSIGN_OP: sprintf(pos," /= "); break;

	push	OFFSET ??_C@_04LJHKMKOP@?5?1?$DN?5?$AA@
$LN1638@exprint_re:
	mov	eax, DWORD PTR _pos
	push	eax
$LN1637@exprint_re:
	call	_sprintf
	add	esp, 8
$LN646@exprint_re:

; 751  :            } 
; 752  :            pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	lea	edx, DWORD PTR [eax+1]
$LL1119@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1119@exprint_re

; 753  :            exprint_recur(node+node->right,PREC_ASSIGN);

	mov	ecx, DWORD PTR [ebx+8]

; 1267 :          exprint_recur(node+node->left,prec_parent);

	imul	ecx, 168				; 000000a8H
	sub	eax, edx
	add	DWORD PTR _pos, eax
	push	10					; 0000000aH
	add	ecx, ebx
	push	ecx

; 1268 :          break;

	jmp	$LN1652@exprint_re
$LN648@exprint_re:

; 754  :          }
; 755  :          else
; 756  :          {
; 757  :            sprintf(pos++,"(");  // kludge for "-" after []     

	mov	eax, DWORD PTR _pos
	mov	ecx, eax
	inc	eax
	push	OFFSET ??_C@_01ODHLEDKK@?$CI?$AA@
	push	ecx
	mov	DWORD PTR _pos, eax
	call	_sprintf

; 758  :            exprint_recur(node+node->right,PREC_ASSIGN);

	mov	edx, DWORD PTR [ebx+8]
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	10					; 0000000aH
	push	edx
	call	_exprint_recur

; 759  :            sprintf(pos++,")");

	mov	eax, DWORD PTR _pos
	mov	ecx, eax
	inc	eax
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	ecx
	mov	DWORD PTR _pos, eax
	call	_sprintf
	add	esp, 24					; 00000018H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN639@exprint_re:

; 760  :          }
; 761  :          break;
; 762  : 
; 763  :       case DOT_NODE:
; 764  :          binary_print(node,prec_parent,PREC_MUL," * ",PREC_MUL);

	mov	eax, DWORD PTR _prec_parent$[ebp]
	push	40					; 00000028H
	push	OFFSET ??_C@_03NONHGIEJ@?5?$CK?5?$AA@
	push	40					; 00000028H
	push	eax
	push	ebx
	call	_binary_print
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN638@exprint_re:

; 765  :          break;
; 766  : 
; 767  :       case ARRAY_LVALUE_INDEXED_NODE:
; 768  :       case ARRAY_RVALUE_INDEXED_NODE:
; 769  :          exprint_recur(node+node->left,PREC_INDEX);

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	push	55					; 00000037H
	push	ecx
	call	_exprint_recur

; 770  :          if ( node->right )

	mov	eax, DWORD PTR [ebx+8]
	add	esp, 8
	test	eax, eax
	je	$LN730@exprint_re

; 771  :            exprint_recur(node+node->right,PREC_INDEX);

	imul	eax, 168				; 000000a8H
	push	55					; 00000037H
	add	eax, ebx
	push	eax

; 772  :      //    *pos = ' '; *(++pos) = 0;  //why would this be needed?
; 773  :          break;

	jmp	$LN1662@exprint_re
$LN636@exprint_re:

; 774  : 
; 775  :       case PRINT_ARRAY_LVALUE_NODE:
; 776  :          sprintf(pos,"print ");

	push	OFFSET ??_C@_06EBLGCNEC@print?5?$AA@
	push	ecx
	call	_sprintf

; 777  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL1120@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1120@exprint_re
$LN1687@exprint_re:
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 778  :          exprint_recur(node+node->left,prec_parent);

	mov	eax, DWORD PTR [ebx+4]
	mov	edx, DWORD PTR _prec_parent$[ebp]
	imul	eax, 168				; 000000a8H
	push	edx
	add	eax, ebx
	push	eax

; 779  :          break;

	jmp	$LN1662@exprint_re
$LN635@exprint_re:

; 780  :            
; 781  :       case ATTRIB_LVALUE_NODE:
; 782  :       case ARRAY_VERTEX_NORMAL_NODE:
; 783  :       case ARRAY_EDGE_VECTOR_NODE:
; 784  :       case ARRAY_FACET_NORMAL_NODE:
; 785  :          if ( node->left )

	mov	eax, DWORD PTR [ebx+4]
	test	eax, eax
	je	SHORT $LN634@exprint_re

; 786  :          { exprint_recur(node+node->left,prec_parent);

	mov	ecx, DWORD PTR _prec_parent$[ebp]
	imul	eax, 168				; 000000a8H
	push	ecx
	add	eax, ebx
	push	eax
	call	_exprint_recur
	add	esp, 8
$LN634@exprint_re:

; 787  :          }
; 788  :          if ( node->op1.localnum == 0)

	cmp	DWORD PTR [ebx+32], 0

; 789  :            sprintf(pos," %s",get_name_name(node->op2.name_id,localbase));

	push	esi
	jne	SHORT $LN633@exprint_re
	mov	edx, DWORD PTR [ebx+136]
	push	edx
	call	_get_name_name
	push	eax
	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_03EEBNCBOD@?5?$CFs?$AA@
	push	eax

; 790  :          else

	jmp	SHORT $LN1639@exprint_re
$LN633@exprint_re:

; 791  :            sprintf(pos,".%s",get_name_name(node->op2.name_id,localbase));

	mov	ecx, DWORD PTR [ebx+136]
	push	ecx
	call	_get_name_name
	mov	edx, DWORD PTR _pos
	push	eax
	push	OFFSET ??_C@_03KEMCFGNA@?4?$CFs?$AA@
	push	edx
$LN1639@exprint_re:
	call	_sprintf

; 792  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 20					; 00000014H
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL1121@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1121@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN631@exprint_re:

; 793  :          break;
; 794  : 
; 795  :       case ARRAY_VERTEX_CONSTRAINT_NORMAL_NODE:
; 796  :          exprint_recur(node+node->left,prec_parent);

	mov	eax, DWORD PTR [ebx+4]
	mov	esi, DWORD PTR _prec_parent$[ebp]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	esi
	push	eax
	call	_exprint_recur

; 797  :          strcat(pos,".constraint[");

	mov	edi, DWORD PTR _pos
	add	esp, 8
	lea	eax, DWORD PTR [edi-1]
$LL1122@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1122@exprint_re
	mov	ecx, DWORD PTR ??_C@_0N@PGNKLKGF@?4constraint?$FL?$AA@
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ??_C@_0N@PGNKLKGF@?4constraint?$FL?$AA@+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR ??_C@_0N@PGNKLKGF@?4constraint?$FL?$AA@+8
	mov	DWORD PTR [eax+8], ecx
	mov	dl, BYTE PTR ??_C@_0N@PGNKLKGF@?4constraint?$FL?$AA@+12
	mov	BYTE PTR [eax+12], dl

; 798  :          pos += strlen(pos);

	mov	eax, edi
	lea	edx, DWORD PTR [eax+1]
$LL1123@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1123@exprint_re
	sub	eax, edx
	add	edi, eax

; 799  :          if ( node[node->right].type == PUSHCONST_NODE )

	mov	eax, DWORD PTR [ebx+8]
	imul	eax, 168				; 000000a8H
	add	ebx, eax
	cmp	DWORD PTR [ebx], 10095			; 0000276fH
	mov	DWORD PTR _pos, edi
	jne	SHORT $LN630@exprint_re

; 800  :          { int connum = (int)(node[node->right].op1.real);

	fld	QWORD PTR [ebx+32]
	call	__ftol2_sse

; 801  :            struct constraint *con;
; 802  :            if ( connum < 1 || connum >= web.maxcon )

	cmp	eax, 1
	jl	SHORT $LN628@exprint_re
	cmp	eax, DWORD PTR _web+644
	jge	SHORT $LN628@exprint_re

; 804  :            else
; 805  :            { con= get_constraint(connum);

	and	eax, 1073741823				; 3fffffffH
	imul	eax, 176				; 000000b0H
	add	eax, DWORD PTR _web+652

; 806  :              strcat(pos,con->name);

	mov	ecx, eax
	npad	3
$LL1124@exprint_re:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1124@exprint_re
	sub	eax, ecx
	mov	esi, ecx
	dec	edi
	npad	4
$LL1125@exprint_re:
	mov	cl, BYTE PTR [edi+1]
	inc	edi
	test	cl, cl
	jne	SHORT $LL1125@exprint_re
	mov	ecx, eax
	shr	ecx, 2
	rep movsd
	mov	ecx, eax
	and	ecx, 3
	rep movsb
	jmp	SHORT $LN627@exprint_re
$LN628@exprint_re:

; 803  :              sprintf(pos,"%d",connum);

	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	edi
	call	_sprintf
	add	esp, 12					; 0000000cH
$LN627@exprint_re:

; 807  :            }
; 808  :            pos += strlen(pos);

	mov	edx, DWORD PTR _pos
	mov	eax, edx
	lea	esi, DWORD PTR [eax+1]
$LL1126@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1126@exprint_re
	sub	eax, esi
	add	edx, eax

; 809  :          }
; 810  :          else

	jmp	SHORT $LN626@exprint_re
$LN630@exprint_re:

; 811  :            exprint_recur(node+node->right,prec_parent);

	push	esi
	push	ebx
	call	_exprint_recur
	mov	edx, DWORD PTR _pos
	add	esp, 8
$LN626@exprint_re:

; 812  :          strcat(pos,"].normal"); 

	lea	eax, DWORD PTR [edx-1]
$LL1127@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1127@exprint_re
	mov	ecx, DWORD PTR ??_C@_08JODPKOOO@?$FN?4normal?$AA@
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR ??_C@_08JODPKOOO@?$FN?4normal?$AA@+4
	mov	DWORD PTR [eax+4], ecx
	mov	cl, BYTE PTR ??_C@_08JODPKOOO@?$FN?4normal?$AA@+8
	mov	BYTE PTR [eax+8], cl

; 813  :          pos += strlen(pos);

	mov	eax, edx
	lea	esi, DWORD PTR [eax+1]
	npad	7
$LL1128@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1128@exprint_re
	sub	eax, esi
	pop	edi
	add	edx, eax
	pop	esi
	mov	DWORD PTR _pos, edx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN625@exprint_re:

; 814  :          break;
; 815  : 
; 816  :       case ARRAY_RVALUE_NODE:
; 817  : 		  exprint_recur(node+node->left,node->op1.intval=='*'?PREC_MUL:PREC_ADD);

	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+4]
	sub	edx, 42					; 0000002aH
	neg	edx
	sbb	edx, edx
	imul	eax, 168				; 000000a8H
	and	edx, -5					; fffffffbH
	add	edx, 40					; 00000028H
	push	edx
	add	eax, ebx
	push	eax
	call	_exprint_recur

; 818  :          sprintf(pos," %c ",node->op1.intval);

	mov	ecx, DWORD PTR [ebx+32]
	mov	edx, DWORD PTR _pos
	push	ecx
	push	OFFSET ??_C@_04LAOFCJDB@?5?$CFc?5?$AA@
	push	edx
	call	_sprintf

; 819  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 20					; 00000014H
	lea	edx, DWORD PTR [eax+1]
$LL1129@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1129@exprint_re

; 820  :          exprint_recur(node+node->right,node->op1.intval=='*'?PREC_MUL:PREC_ADD);

	mov	ecx, DWORD PTR [ebx+8]
	sub	eax, edx
	add	DWORD PTR _pos, eax
	mov	eax, DWORD PTR [ebx+32]
	sub	eax, 42					; 0000002aH
	neg	eax
	sbb	eax, eax
	and	eax, -5					; fffffffbH
	add	eax, 40					; 00000028H

; 821  :          break;

	jmp	$LN1688@exprint_re
$LN624@exprint_re:

; 822  : 
; 823  :       /* end whole-array syntax */
; 824  : 
; 825  :       case SET_CONSTRAINT_GLOBAL_NODE:
; 826  :          strcat(pos,"set constraint "); pos += strlen(pos);

	lea	esi, DWORD PTR [ecx-1]
	npad	2
$LL1130@exprint_re:
	mov	al, BYTE PTR [esi+1]
	inc	esi
	test	al, al
	jne	SHORT $LL1130@exprint_re
	mov	edx, DWORD PTR ??_C@_0BA@FHOMNLOC@set?5constraint?5?$AA@
	mov	DWORD PTR [esi], edx
	mov	eax, DWORD PTR ??_C@_0BA@FHOMNLOC@set?5constraint?5?$AA@+4
	mov	DWORD PTR [esi+4], eax
	mov	edx, DWORD PTR ??_C@_0BA@FHOMNLOC@set?5constraint?5?$AA@+8
	mov	DWORD PTR [esi+8], edx
	mov	eax, DWORD PTR ??_C@_0BA@FHOMNLOC@set?5constraint?5?$AA@+12
	mov	DWORD PTR [esi+12], eax
	mov	esi, ecx
	lea	edx, DWORD PTR [esi+1]
	npad	2
$LL1131@exprint_re:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL1131@exprint_re
	sub	esi, edx

; 827  :          exprint_recur(node+node->left,prec_parent);

	mov	edx, DWORD PTR [ebx+4]
	imul	edx, 168				; 000000a8H
	add	ecx, esi
	mov	DWORD PTR _pos, ecx
	mov	ecx, DWORD PTR _prec_parent$[ebp]
	push	ecx
	add	edx, ebx
	push	edx
	call	_exprint_recur

; 828  :          strcat(pos," global "); pos += strlen(pos);

	mov	edx, DWORD PTR _pos
	add	esp, 8
	lea	eax, DWORD PTR [edx-1]
$LL1132@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1132@exprint_re
	mov	ecx, DWORD PTR ??_C@_08EALMPJOD@?5global?5?$AA@
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR ??_C@_08EALMPJOD@?5global?5?$AA@+4
	mov	DWORD PTR [eax+4], ecx
	mov	cl, BYTE PTR ??_C@_08EALMPJOD@?5global?5?$AA@+8
	mov	BYTE PTR [eax+8], cl
	mov	eax, edx
	lea	esi, DWORD PTR [eax+1]
	npad	7
$LL1133@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1133@exprint_re
	sub	eax, esi
	pop	edi
	add	edx, eax
	pop	esi
	mov	DWORD PTR _pos, edx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN623@exprint_re:

; 829  :          break;
; 830  : 
; 831  :       case UNSET_CONSTRAINT_GLOBAL_NODE:
; 832  :          strcat(pos,"unset constraint "); pos += strlen(pos);

	lea	esi, DWORD PTR [ecx-1]
$LL1134@exprint_re:
	mov	al, BYTE PTR [esi+1]
	inc	esi
	test	al, al
	jne	SHORT $LL1134@exprint_re
	mov	edx, DWORD PTR ??_C@_0BC@MDBPAFMN@unset?5constraint?5?$AA@
	mov	DWORD PTR [esi], edx
	mov	eax, DWORD PTR ??_C@_0BC@MDBPAFMN@unset?5constraint?5?$AA@+4
	mov	DWORD PTR [esi+4], eax
	mov	edx, DWORD PTR ??_C@_0BC@MDBPAFMN@unset?5constraint?5?$AA@+8
	mov	DWORD PTR [esi+8], edx
	mov	eax, DWORD PTR ??_C@_0BC@MDBPAFMN@unset?5constraint?5?$AA@+12
	mov	DWORD PTR [esi+12], eax
	mov	dx, WORD PTR ??_C@_0BC@MDBPAFMN@unset?5constraint?5?$AA@+16
	mov	WORD PTR [esi+16], dx
	mov	esi, ecx
	lea	edx, DWORD PTR [esi+1]
	npad	2
$LL1135@exprint_re:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL1135@exprint_re

; 833  :          exprint_recur(node+node->left,prec_parent);

	mov	eax, DWORD PTR _prec_parent$[ebp]
	sub	esi, edx
	add	ecx, esi
	mov	DWORD PTR _pos, ecx
	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	push	eax
	add	ecx, ebx
	push	ecx
	call	_exprint_recur

; 834  :          strcat(pos," global "); pos += strlen(pos);

	mov	edx, DWORD PTR _pos
	add	esp, 8
	lea	eax, DWORD PTR [edx-1]
$LL1136@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1136@exprint_re
	mov	ecx, DWORD PTR ??_C@_08EALMPJOD@?5global?5?$AA@
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR ??_C@_08EALMPJOD@?5global?5?$AA@+4
	mov	DWORD PTR [eax+4], ecx
	mov	cl, BYTE PTR ??_C@_08EALMPJOD@?5global?5?$AA@+8
	mov	BYTE PTR [eax+8], cl
	mov	eax, edx
	lea	esi, DWORD PTR [eax+1]
	npad	7
$LL1137@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1137@exprint_re
	sub	eax, esi
	pop	edi
	add	edx, eax
	pop	esi
	mov	DWORD PTR _pos, edx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN622@exprint_re:

; 835  :          break;
; 836  : 
; 837  :       case SET_CONSTRAINT_NAME_GLOBAL_NODE:
; 838  :          sprintf(pos,"set constraint %s global",
; 839  :               get_constraint(node->op3.connum)->name); 

	mov	edx, DWORD PTR [ebx+140]
	and	edx, 1073741823				; 3fffffffH
	imul	edx, 176				; 000000b0H
	add	edx, DWORD PTR _web+652
	push	edx
	push	OFFSET ??_C@_0BJ@DICHIFDL@set?5constraint?5?$CFs?5global?$AA@
	push	ecx
	call	_sprintf

; 840  :          pos += strlen(pos);   

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1138@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1138@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN621@exprint_re:

; 841  :          break;
; 842  : 
; 843  :       case UNSET_CONSTRAINT_NAME_GLOBAL_NODE:
; 844  :          sprintf(pos,"unset constraint %s global",
; 845  :               get_constraint(node->op3.connum)->name); 

	mov	eax, DWORD PTR [ebx+140]
	and	eax, 1073741823				; 3fffffffH
	imul	eax, 176				; 000000b0H
	add	eax, DWORD PTR _web+652
	push	eax
	push	OFFSET ??_C@_0BL@KFJJNIHG@unset?5constraint?5?$CFs?5global?$AA@
	push	ecx
	call	_sprintf

; 846  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	1
$LL1139@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1139@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN620@exprint_re:

; 847  :          break;
; 848  : 
; 849  :       case RESET_COUNTS_NODE:
; 850  :          strcat(pos,"reset_counts"); pos += strlen(pos); 

	lea	eax, DWORD PTR [ecx-1]
$LL1140@exprint_re:
	mov	dl, BYTE PTR [eax+1]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1140@exprint_re
	mov	edx, DWORD PTR ??_C@_0N@BFEIANBO@reset_counts?$AA@
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR ??_C@_0N@BFEIANBO@reset_counts?$AA@+4
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR ??_C@_0N@BFEIANBO@reset_counts?$AA@+8
	mov	DWORD PTR [eax+8], edx
	mov	dl, BYTE PTR ??_C@_0N@BFEIANBO@reset_counts?$AA@+12
	mov	BYTE PTR [eax+12], dl
	mov	eax, ecx
	lea	esi, DWORD PTR [eax+1]
$LL1141@exprint_re:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1141@exprint_re
	sub	eax, esi
	pop	edi
	add	ecx, eax
	pop	esi
	mov	DWORD PTR _pos, ecx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN619@exprint_re:

; 851  :          return;
; 852  : 
; 853  :       case FLUSH_COUNTS_NODE:
; 854  :          strcat(pos,"flush_counts"); pos += strlen(pos); 

	lea	eax, DWORD PTR [ecx-1]
$LL1142@exprint_re:
	mov	dl, BYTE PTR [eax+1]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1142@exprint_re
	mov	edx, DWORD PTR ??_C@_0N@HEKOHBEK@flush_counts?$AA@
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR ??_C@_0N@HEKOHBEK@flush_counts?$AA@+4
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR ??_C@_0N@HEKOHBEK@flush_counts?$AA@+8
	mov	DWORD PTR [eax+8], edx
	mov	dl, BYTE PTR ??_C@_0N@HEKOHBEK@flush_counts?$AA@+12
	mov	BYTE PTR [eax+12], dl
	mov	eax, ecx
	lea	esi, DWORD PTR [eax+1]
$LL1143@exprint_re:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1143@exprint_re
	sub	eax, esi
	pop	edi
	add	ecx, eax
	pop	esi
	mov	DWORD PTR _pos, ecx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN618@exprint_re:

; 855  :          return;
; 856  : 
; 857  :       case PRINT_PROFILING_NODE:
; 858  :          strcat(pos,"print profiling"); pos += strlen(pos); 

	lea	eax, DWORD PTR [ecx-1]
	npad	3
$LL1144@exprint_re:
	mov	dl, BYTE PTR [eax+1]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1144@exprint_re
	mov	edx, DWORD PTR ??_C@_0BA@IBOFDNEL@print?5profiling?$AA@
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR ??_C@_0BA@IBOFDNEL@print?5profiling?$AA@+4
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR ??_C@_0BA@IBOFDNEL@print?5profiling?$AA@+8
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR ??_C@_0BA@IBOFDNEL@print?5profiling?$AA@+12
	mov	DWORD PTR [eax+12], edx
	mov	eax, ecx
	lea	esi, DWORD PTR [eax+1]
$LL1145@exprint_re:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1145@exprint_re
	sub	eax, esi
	pop	edi
	add	ecx, eax
	pop	esi
	mov	DWORD PTR _pos, ecx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN617@exprint_re:

; 859  :          return;
; 860  : 
; 861  :       case RESET_PROFILING_NODE:
; 862  :          strcat(pos,"reset_profiling"); pos += strlen(pos); 

	lea	eax, DWORD PTR [ecx-1]
$LL1146@exprint_re:
	mov	dl, BYTE PTR [eax+1]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1146@exprint_re
	mov	edx, DWORD PTR ??_C@_0BA@OHLAHHBM@reset_profiling?$AA@
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR ??_C@_0BA@OHLAHHBM@reset_profiling?$AA@+4
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR ??_C@_0BA@OHLAHHBM@reset_profiling?$AA@+8
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR ??_C@_0BA@OHLAHHBM@reset_profiling?$AA@+12
	mov	DWORD PTR [eax+12], edx
	mov	eax, ecx
	lea	esi, DWORD PTR [eax+1]
$LL1147@exprint_re:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1147@exprint_re
	sub	eax, esi
	pop	edi
	add	ecx, eax
	pop	esi
	mov	DWORD PTR _pos, ecx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN616@exprint_re:

; 863  :          return;
; 864  : 
; 865  :       case PAUSE_NODE:
; 866  :          strcat(pos,"pause"); pos += strlen(pos); 

	lea	eax, DWORD PTR [ecx-1]
	npad	6
$LL1148@exprint_re:
	mov	dl, BYTE PTR [eax+1]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1148@exprint_re
	mov	edx, DWORD PTR ??_C@_05PDJBBECF@pause?$AA@
	mov	DWORD PTR [eax], edx
	mov	dx, WORD PTR ??_C@_05PDJBBECF@pause?$AA@+4
	mov	WORD PTR [eax+4], dx
	mov	eax, ecx
	lea	esi, DWORD PTR [eax+1]
$LL1149@exprint_re:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1149@exprint_re
	sub	eax, esi
	pop	edi
	add	ecx, eax
	pop	esi
	mov	DWORD PTR _pos, ecx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN615@exprint_re:

; 867  :          return;
; 868  : 
; 869  :       case RETURN_NODE:
; 870  :          strcat(pos,"return "); pos += strlen(pos); 

	lea	esi, DWORD PTR [ecx-1]
$LL1150@exprint_re:
	mov	al, BYTE PTR [esi+1]
	inc	esi
	test	al, al
	jne	SHORT $LL1150@exprint_re
	mov	eax, DWORD PTR ??_C@_07BKFMFPMO@return?5?$AA@
	mov	DWORD PTR [esi], eax
	mov	edx, DWORD PTR ??_C@_07BKFMFPMO@return?5?$AA@+4
	mov	DWORD PTR [esi+4], edx
	mov	esi, ecx
	lea	edx, DWORD PTR [esi+1]
$LL1151@exprint_re:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL1151@exprint_re

; 871  :          if ( node->left )

	mov	eax, DWORD PTR [ebx+4]
	sub	esi, edx
	add	ecx, esi
	mov	DWORD PTR _pos, ecx
	test	eax, eax
	je	$LN730@exprint_re

; 872  :            exprint_recur(node+node->left,prec_parent);

	mov	ecx, DWORD PTR _prec_parent$[ebp]

; 1334 :          exprint_recur(node+node->left,PREC_ASSIGN);

	imul	eax, 168				; 000000a8H
	push	ecx
	add	eax, ebx
	push	eax

; 1335 :          break;

	jmp	$LN1652@exprint_re
$LN613@exprint_re:

; 873  :          return;
; 874  : 
; 875  :       case EVOLVER_VERSION_NODE:
; 876  :          strcat(pos,"evolver_version"); pos += strlen(pos); 

	lea	eax, DWORD PTR [ecx-1]
$LL1152@exprint_re:
	mov	dl, BYTE PTR [eax+1]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1152@exprint_re
	mov	edx, DWORD PTR ??_C@_0BA@DKKLMIEO@evolver_version?$AA@
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR ??_C@_0BA@DKKLMIEO@evolver_version?$AA@+4
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR ??_C@_0BA@DKKLMIEO@evolver_version?$AA@+8
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR ??_C@_0BA@DKKLMIEO@evolver_version?$AA@+12
	mov	DWORD PTR [eax+12], edx
	mov	eax, ecx
	lea	esi, DWORD PTR [eax+1]
$LL1153@exprint_re:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1153@exprint_re
	sub	eax, esi
	pop	edi
	add	ecx, eax
	pop	esi
	mov	DWORD PTR _pos, ecx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN612@exprint_re:

; 877  :          return;
; 878  : 
; 879  :       case DATE_AND_TIME_NODE:
; 880  :          strcat(pos,"date_and_time"); pos += strlen(pos); 

	lea	eax, DWORD PTR [ecx-1]
$LL1154@exprint_re:
	mov	dl, BYTE PTR [eax+1]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1154@exprint_re
	mov	edx, DWORD PTR ??_C@_0O@DICBBEEI@date_and_time?$AA@
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR ??_C@_0O@DICBBEEI@date_and_time?$AA@+4
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR ??_C@_0O@DICBBEEI@date_and_time?$AA@+8
	mov	DWORD PTR [eax+8], edx
	mov	dx, WORD PTR ??_C@_0O@DICBBEEI@date_and_time?$AA@+12
	mov	WORD PTR [eax+12], dx
	mov	eax, ecx
	lea	esi, DWORD PTR [eax+1]
	npad	6
$LL1155@exprint_re:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1155@exprint_re
	sub	eax, esi
	pop	edi
	add	ecx, eax
	pop	esi
	mov	DWORD PTR _pos, ecx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN611@exprint_re:

; 881  :          return;
; 882  : 
; 883  :       case BREAK_NODE:
; 884  :          if ( node->op2.breakdepth > 1 )

	mov	ebx, DWORD PTR [ebx+136]
	cmp	ebx, 1
	jle	SHORT $LN610@exprint_re

; 885  :          sprintf(pos,"break %d",node->op2.breakdepth);

	push	ebx
	push	OFFSET ??_C@_08OOPHKIOJ@break?5?$CFd?$AA@
	push	ecx
	call	_sprintf
	mov	ecx, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN609@exprint_re
$LN610@exprint_re:

; 886  :          else strcat(pos,"break "); 

	lea	eax, DWORD PTR [ecx-1]
$LL1156@exprint_re:
	mov	dl, BYTE PTR [eax+1]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1156@exprint_re
	mov	edx, DWORD PTR ??_C@_06DLBOLJLP@break?5?$AA@
	mov	DWORD PTR [eax], edx
	mov	dx, WORD PTR ??_C@_06DLBOLJLP@break?5?$AA@+4
	mov	WORD PTR [eax+4], dx
	mov	dl, BYTE PTR ??_C@_06DLBOLJLP@break?5?$AA@+6
	mov	BYTE PTR [eax+6], dl
$LN609@exprint_re:

; 887  :          pos += strlen(pos);

	mov	eax, ecx
	lea	esi, DWORD PTR [eax+1]
$LL1157@exprint_re:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1157@exprint_re
	sub	eax, esi
	pop	edi
	add	ecx, eax
	pop	esi
	mov	DWORD PTR _pos, ecx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN608@exprint_re:

; 888  :          return;
; 889  : 
; 890  :       case CONTINUE_NODE:
; 891  :          if ( node->op2.breakdepth > 1 )

	mov	ebx, DWORD PTR [ebx+136]
	cmp	ebx, 1
	jle	SHORT $LN607@exprint_re

; 892  :          sprintf(pos,"continue %d",node->op2.breakdepth);

	push	ebx
	push	OFFSET ??_C@_0M@PLJOCOHN@continue?5?$CFd?$AA@
	push	ecx
	call	_sprintf
	mov	ecx, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN606@exprint_re
$LN607@exprint_re:

; 893  :          else strcat(pos,"continue "); 

	lea	eax, DWORD PTR [ecx-1]
$LL1158@exprint_re:
	mov	dl, BYTE PTR [eax+1]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1158@exprint_re
	mov	edx, DWORD PTR ??_C@_09PGLJMKEH@continue?5?$AA@
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR ??_C@_09PGLJMKEH@continue?5?$AA@+4
	mov	DWORD PTR [eax+4], edx
	mov	dx, WORD PTR ??_C@_09PGLJMKEH@continue?5?$AA@+8
	mov	WORD PTR [eax+8], dx
$LN606@exprint_re:

; 894  :          pos += strlen(pos);

	mov	eax, ecx
	lea	esi, DWORD PTR [eax+1]
$LL1159@exprint_re:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1159@exprint_re
	sub	eax, esi
	pop	edi
	add	ecx, eax
	pop	esi
	mov	DWORD PTR _pos, ecx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN605@exprint_re:

; 895  :          return;
; 896  : 
; 897  :       case HISTORY_NODE:
; 898  :          strcat(pos,"history "); pos += strlen(pos);

	lea	eax, DWORD PTR [ecx-1]
$LL1160@exprint_re:
	mov	dl, BYTE PTR [eax+1]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1160@exprint_re
	mov	edx, DWORD PTR ??_C@_08GICKAJOK@history?5?$AA@
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR ??_C@_08GICKAJOK@history?5?$AA@+4
	mov	DWORD PTR [eax+4], edx
	mov	dl, BYTE PTR ??_C@_08GICKAJOK@history?5?$AA@+8
	mov	BYTE PTR [eax+8], dl
	mov	eax, ecx
	lea	esi, DWORD PTR [eax+1]
	npad	4
$LL1161@exprint_re:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1161@exprint_re
	sub	eax, esi
	pop	edi
	add	ecx, eax
	pop	esi
	mov	DWORD PTR _pos, ecx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN604@exprint_re:

; 899  :          return;
; 900  : 
; 901  :       case GET_TRANSFORM_EXPR_NODE:
; 902  :          strcat(pos,"transform_expr "); pos += strlen(pos);

	lea	eax, DWORD PTR [ecx-1]
$LL1162@exprint_re:
	mov	dl, BYTE PTR [eax+1]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1162@exprint_re
	mov	edx, DWORD PTR ??_C@_0BA@OACEACLK@transform_expr?5?$AA@
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR ??_C@_0BA@OACEACLK@transform_expr?5?$AA@+4
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR ??_C@_0BA@OACEACLK@transform_expr?5?$AA@+8
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR ??_C@_0BA@OACEACLK@transform_expr?5?$AA@+12
	mov	DWORD PTR [eax+12], edx
	mov	eax, ecx
	lea	esi, DWORD PTR [eax+1]
$LL1163@exprint_re:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1163@exprint_re
	sub	eax, esi
	pop	edi
	add	ecx, eax
	pop	esi
	mov	DWORD PTR _pos, ecx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN603@exprint_re:

; 903  :          return;
; 904  : 
; 905  :       case WARNING_MESSAGES_NODE:
; 906  :          strcat(pos,"warning_messages "); pos += strlen(pos);

	lea	eax, DWORD PTR [ecx-1]
	npad	6
$LL1164@exprint_re:
	mov	dl, BYTE PTR [eax+1]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1164@exprint_re
	mov	edx, DWORD PTR ??_C@_0BC@DILLGGAL@warning_messages?5?$AA@
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR ??_C@_0BC@DILLGGAL@warning_messages?5?$AA@+4
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR ??_C@_0BC@DILLGGAL@warning_messages?5?$AA@+8
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR ??_C@_0BC@DILLGGAL@warning_messages?5?$AA@+12
	mov	DWORD PTR [eax+12], edx
	mov	dx, WORD PTR ??_C@_0BC@DILLGGAL@warning_messages?5?$AA@+16
	mov	WORD PTR [eax+16], dx
	mov	eax, ecx
	lea	esi, DWORD PTR [eax+1]
	npad	5
$LL1165@exprint_re:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1165@exprint_re
	sub	eax, esi
	pop	edi
	add	ecx, eax
	pop	esi
	mov	DWORD PTR _pos, ecx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN602@exprint_re:

; 907  :          return;
; 908  : 
; 909  :       case DATAFILENAME_NODE:
; 910  :          strcat(pos,"datafilename "); pos += strlen(pos);

	lea	eax, DWORD PTR [ecx-1]
$LL1166@exprint_re:
	mov	dl, BYTE PTR [eax+1]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1166@exprint_re
	mov	edx, DWORD PTR ??_C@_0O@CIMNNBLM@datafilename?5?$AA@
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR ??_C@_0O@CIMNNBLM@datafilename?5?$AA@+4
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR ??_C@_0O@CIMNNBLM@datafilename?5?$AA@+8
	mov	DWORD PTR [eax+8], edx
	mov	dx, WORD PTR ??_C@_0O@CIMNNBLM@datafilename?5?$AA@+12
	mov	WORD PTR [eax+12], dx
	mov	eax, ecx
	lea	esi, DWORD PTR [eax+1]
$LL1167@exprint_re:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1167@exprint_re
	sub	eax, esi
	pop	edi
	add	ecx, eax
	pop	esi
	mov	DWORD PTR _pos, ecx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN601@exprint_re:

; 911  :          return;
; 912  : 
; 913  :       case REPEAT_NODE:
; 914  :          exprint_recur(node+node->right,PREC_ARG);

	mov	eax, DWORD PTR [ebx+8]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	0
	push	eax
	call	_exprint_recur

; 915  :          nn = node + node->left;

	mov	eax, DWORD PTR [ebx+4]

; 916  :          *pos = ' '; pos++; *pos = 0;

	mov	ecx, DWORD PTR _pos
	imul	eax, 168				; 000000a8H
	mov	BYTE PTR [ecx], 32			; 00000020H
	inc	ecx
	add	eax, ebx
	mov	DWORD PTR _pos, ecx
	mov	BYTE PTR [ecx], 0

; 917  :          exprint_recur(nn+nn->left,PREC_ARG);

	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 168				; 000000a8H
	push	0
	add	ecx, eax
	push	ecx

; 918  :          return;

	jmp	$LN1658@exprint_re
$LN600@exprint_re:

; 919  : 
; 920  :       case EXPRLIST_NODE:
; 921  :          exprint_recur(node+node->left,PREC_ARG);

	mov	edx, DWORD PTR [ebx+4]
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	0
	push	edx
	call	_exprint_recur
	add	esp, 8

; 922  :          if ( node->right )

	cmp	DWORD PTR [ebx+8], 0
	je	$LN730@exprint_re

; 923  :           { strcat(pos,", "); pos += 2;

	mov	eax, DWORD PTR _pos
	dec	eax
$LL1168@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1168@exprint_re
	mov	cx, WORD PTR ??_C@_02KEGNLNML@?0?5?$AA@
	add	DWORD PTR _pos, 2
	mov	WORD PTR [eax], cx
	mov	dl, BYTE PTR ??_C@_02KEGNLNML@?0?5?$AA@+2
	mov	BYTE PTR [eax+2], dl

; 924  :             exprint_recur(node+node->right,PREC_ARG);

	mov	eax, DWORD PTR [ebx+8]

; 1334 :          exprint_recur(node+node->left,PREC_ASSIGN);

	imul	eax, 168				; 000000a8H
	push	0
	add	eax, ebx
	push	eax

; 1335 :          break;

	jmp	$LN1652@exprint_re
$LN597@exprint_re:

; 930  :          return;
; 931  : 
; 932  :       case SPRINTFHEAD_NODE:
; 933  :       case PRESPRINTF_NODE:
; 934  :          sprintf(pos,"sprintf ");

	push	OFFSET ??_C@_08DDAFHHJG@sprintf?5?$AA@
	push	ecx
	call	_sprintf

; 935  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1169@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1169@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 936  :          if ( node->op1.string ) print_quote(node->op1.string);

	cmp	DWORD PTR [ebx+32], 0
	je	$LN596@exprint_re
$LN1675@exprint_re:
	mov	edx, DWORD PTR [ebx+32]
	push	edx
	call	_print_quote
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN594@exprint_re:

; 937  :          else exprint_recur(node+node->left,PREC_ARG);
; 938  :          return;
; 939  : 
; 940  :       case PREPRINTF_NODE:
; 941  :       case PRINTFHEAD_NODE:
; 942  :          sprintf(pos,"printf ");

	push	OFFSET ??_C@_07HJAAEDEB@printf?5?$AA@
	push	ecx
	call	_sprintf

; 943  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1170@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1170@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 944  :          if ( node->op1.string ) print_quote(node->op1.string);

	cmp	DWORD PTR [ebx+32], 0
	je	$LN593@exprint_re
$LN598@exprint_re:

; 925  :           }
; 926  :          return;
; 927  :      
; 928  :       case QUOTATION_NODE:
; 929  :          print_quote(node->op1.string);

	mov	ecx, DWORD PTR [ebx+32]
	push	ecx
	call	_print_quote
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN591@exprint_re:

; 945  :          else exprint_recur(node+node->left,PREC_ARG);
; 946  :          return;
; 947  : 
; 948  :       case ERRPRINTFHEAD_NODE:
; 949  :          sprintf(pos,"errprintf ");

	push	OFFSET ??_C@_0L@HKMPKJEI@errprintf?5?$AA@
	push	ecx
	call	_sprintf

; 950  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1171@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1171@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 951  :          if ( node->op1.string ) print_quote(node->op1.string);

	cmp	DWORD PTR [ebx+32], 0
	je	$LN590@exprint_re
	mov	eax, DWORD PTR [ebx+32]
	push	eax
	call	_print_quote
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN588@exprint_re:

; 952  :          else exprint_recur(node+node->left,PREC_ARG);
; 953  :          return;
; 954  : 
; 955  :       case BINARY_PRINTFHEAD_NODE:
; 956  :          sprintf(pos,"binary_printf ");

	push	OFFSET ??_C@_0P@EFNJCGJK@binary_printf?5?$AA@
	push	ecx
	call	_sprintf

; 957  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1172@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1172@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 958  :          if ( node->op1.string ) print_quote(node->op1.string);

	cmp	DWORD PTR [ebx+32], 0
	jne	$LN1675@exprint_re

; 1334 :          exprint_recur(node+node->left,PREC_ASSIGN);

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	push	0
	add	eax, ebx
	push	eax

; 1335 :          break;

	jmp	$LN1652@exprint_re
$LN585@exprint_re:

; 959  :          else exprint_recur(node+node->left,PREC_ARG);
; 960  :          return;
; 961  : 
; 962  :       case PRINTF_NODE:
; 963  :       case BINARY_PRINTF_NODE:
; 964  :       case ERRPRINTF_NODE:
; 965  :       case SPRINTF_NODE:
; 966  :          exprint_recur(node+node->left,PREC_ARG);

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	push	0
	push	ecx
	call	_exprint_recur

; 967  :          strcat(pos++,",");

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edi, DWORD PTR [eax-1]
	inc	eax
	mov	DWORD PTR _pos, eax
$LL1173@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1173@exprint_re
	mov	dx, WORD PTR ??_C@_01IHBHIGKO@?0?$AA@
	mov	WORD PTR [edi], dx

; 968  :          exprint_recur(node+node->right,PREC_ARG);

	mov	eax, DWORD PTR [ebx+8]

; 1334 :          exprint_recur(node+node->left,PREC_ASSIGN);

	imul	eax, 168				; 000000a8H
	push	0
	add	eax, ebx
	push	eax

; 1335 :          break;

	jmp	$LN1652@exprint_re
$LN584@exprint_re:

; 969  :          return;
; 970  : 
; 971  :       case STRPRINT_NODE: 
; 972  :       case PRINT_NODE: 
; 973  :       case EPRINT_NODE:
; 974  :          sprintf(pos,"print "); pos += strlen(pos);

	push	OFFSET ??_C@_06EBLGCNEC@print?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	5
$LL1174@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1174@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax
$LN590@exprint_re:

; 1267 :          exprint_recur(node+node->left,prec_parent);

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	push	0
	add	ecx, ebx
	push	ecx

; 1268 :          break;

	jmp	$LN1652@exprint_re
$LN583@exprint_re:

; 975  :          exprint_recur(node+node->left,PREC_ARG);
; 976  :          return;
; 977  :     
; 978  :       case PRINT_LETTER_NODE: 
; 979  :          sprintf(pos,"print %c ",node->op1.name_id); 

	mov	edx, DWORD PTR [ebx+32]
	push	edx
	push	OFFSET ??_C@_09DJMPBLGO@print?5?$CFc?5?$AA@
	push	ecx
	call	_sprintf

; 980  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1175@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1175@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN582@exprint_re:

; 981  :          return;
; 982  :     
; 983  :       case PRINT_PROCEDURE_NODE: 
; 984  :       case PRINT_ARRAY_NODE: 
; 985  :          sprintf(pos,"print %s ",globals(node->op1.name_id)->name); 

	mov	ebx, DWORD PTR [ebx+32]
	mov	eax, ebx
	and	eax, -16777216				; ff000000H
	cmp	eax, 268435456				; 10000000H
	je	SHORT $LN815@exprint_re
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN817@exprint_re
	and	ebx, 16777215				; 00ffffffH
	imul	ebx, 224				; 000000e0H
	add	ebx, DWORD PTR [esi]
	jmp	SHORT $LN816@exprint_re
$LN817@exprint_re:
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN815@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	ebx, 16777215				; 00ffffffH
	mov	ebx, DWORD PTR [edx+ebx*4]
	jmp	SHORT $LN816@exprint_re
$LN815@exprint_re:
	mov	eax, DWORD PTR _web+5652
	and	ebx, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR _dymem
	mov	ebx, DWORD PTR [edx+eax]
$LN816@exprint_re:
	push	ebx
	push	OFFSET ??_C@_09CFOJLIBO@print?5?$CFs?5?$AA@
	push	ecx
	call	_sprintf

; 986  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL1176@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1176@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN581@exprint_re:

; 987  :          return;
; 988  :     
; 989  :       case PRINT_ARRAYPART_NODE: 
; 990  :          sprintf(pos,"print ");

	push	OFFSET ??_C@_06EBLGCNEC@print?5?$AA@
	push	ecx
	call	_sprintf

; 991  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1177@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1177@exprint_re

; 1267 :          exprint_recur(node+node->left,prec_parent);

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	sub	eax, edx
	add	DWORD PTR _pos, eax
	push	0
	add	ecx, ebx
	push	ecx

; 1268 :          break;

	jmp	$LN1652@exprint_re
$LN580@exprint_re:

; 992  :          exprint_recur(node+node->left,PREC_ARG);
; 993  :          return;
; 994  :     
; 995  :       case PRINT_VERTEXNORMAL_NODE:
; 996  :          sprintf(pos,"print ");

	push	OFFSET ??_C@_06EBLGCNEC@print?5?$AA@
	push	ecx
	call	_sprintf

; 997  :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1178@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1178@exprint_re
	sub	eax, edx

; 998  :          exprint_recur(node+node->left,PREC_ARG);

	mov	edx, DWORD PTR [ebx+4]
	add	DWORD PTR _pos, eax
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	0
	push	edx
	call	_exprint_recur

; 999  :          strcat(pos,".vertexnormal");

	mov	edx, DWORD PTR _pos
	add	esp, 8
	lea	eax, DWORD PTR [edx-1]
	npad	2
$LL1179@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1179@exprint_re
	mov	ecx, DWORD PTR ??_C@_0O@FKNOAAMF@?4vertexnormal?$AA@
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR ??_C@_0O@FKNOAAMF@?4vertexnormal?$AA@+4
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR ??_C@_0O@FKNOAAMF@?4vertexnormal?$AA@+8
	mov	DWORD PTR [eax+8], ecx
	mov	cx, WORD PTR ??_C@_0O@FKNOAAMF@?4vertexnormal?$AA@+12
	mov	WORD PTR [eax+12], cx

; 1000 :          pos += strlen(pos);

	mov	eax, edx
	lea	esi, DWORD PTR [eax+1]
$LL1180@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1180@exprint_re
	sub	eax, esi
	pop	edi
	add	edx, eax
	pop	esi
	mov	DWORD PTR _pos, edx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN579@exprint_re:

; 1001 :          return;
; 1002 : 
; 1003 :       case PRINT_ATTR_ARRAY_NODE: 
; 1004 :          sprintf(pos,"print ");

	push	OFFSET ??_C@_06EBLGCNEC@print?5?$AA@
	push	ecx
	call	_sprintf

; 1005 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL1181@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1181@exprint_re
	sub	eax, edx

; 1006 :          exprint_recur(node+node->left,PREC_INDEX);

	mov	edx, DWORD PTR [ebx+4]
	add	DWORD PTR _pos, eax
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	55					; 00000037H
	push	edx
	call	_exprint_recur

; 1007 :          sprintf(pos,".%s",EXTRAS(node->op2.eltype)[node->op3.extranum].name);

	mov	eax, DWORD PTR [ebx+136]
	mov	ecx, DWORD PTR [ebx+140]
	imul	eax, 112				; 00000070H
	mov	edx, DWORD PTR _web[eax+104]
	imul	ecx, 240				; 000000f0H
	mov	eax, DWORD PTR _pos
	add	edx, ecx
	add	edx, DWORD PTR _dymem
	push	edx
	push	OFFSET ??_C@_03KEMCFGNA@?4?$CFs?$AA@
	push	eax
	call	_sprintf

; 1008 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 20					; 00000014H
	lea	esi, DWORD PTR [eax+1]
$LL1182@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1182@exprint_re
	sub	eax, esi
	add	DWORD PTR _pos, eax

; 1009 :          if ( node->right )

	mov	eax, DWORD PTR [ebx+8]
	test	eax, eax
	je	$LN730@exprint_re

; 1334 :          exprint_recur(node+node->left,PREC_ASSIGN);

	imul	eax, 168				; 000000a8H
	push	55					; 00000037H
	add	eax, ebx
	push	eax

; 1335 :          break;

	jmp	$LN1652@exprint_re
$LN577@exprint_re:

; 1010 :            exprint_recur(node+node->right,PREC_INDEX);
; 1011 :          return;
; 1012 :     
; 1013 :       case PRINT_PERM_PROCEDURE_NODE: 
; 1014 :          sprintf(pos,"print %s ",perm_globals(node->op1.name_id)->name); 

	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR _web+5656
	and	edx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	push	edx
	push	OFFSET ??_C@_09CFOJLIBO@print?5?$CFs?5?$AA@
	push	ecx
	call	_sprintf

; 1015 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1183@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1183@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN576@exprint_re:

; 1016 :          return;
; 1017 :     
; 1018 :       case EXPRINT_PROCEDURE_NODE: 
; 1019 :          sprintf(pos,"exprint %s ",globals(node->op1.name_id)->name); 

	mov	ebx, DWORD PTR [ebx+32]
	mov	eax, ebx
	and	eax, -16777216				; ff000000H
	cmp	eax, 268435456				; 10000000H
	je	SHORT $LN821@exprint_re
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN823@exprint_re
	and	ebx, 16777215				; 00ffffffH
	imul	ebx, 224				; 000000e0H
	add	ebx, DWORD PTR [esi]
	jmp	SHORT $LN822@exprint_re
$LN823@exprint_re:
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN821@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	ebx, 16777215				; 00ffffffH
	mov	ebx, DWORD PTR [edx+ebx*4]
	jmp	SHORT $LN822@exprint_re
$LN821@exprint_re:
	mov	eax, DWORD PTR _web+5652
	and	ebx, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR _dymem
	mov	ebx, DWORD PTR [edx+eax]
$LN822@exprint_re:
	push	ebx
	push	OFFSET ??_C@_0M@EJKGLOKJ@exprint?5?$CFs?5?$AA@
	push	ecx
	call	_sprintf

; 1020 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1184@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1184@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN572@exprint_re:

; 1033 :            }
; 1034 :          else bracket_depth--;
; 1035 :          return;
; 1036 : 
; 1037 :       case IF_NODE:
; 1038 :          exprint_recur(node+node->left,prec_parent); /* IF part */

	mov	ecx, DWORD PTR [ebx+4]
	mov	esi, DWORD PTR _prec_parent$[ebp]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	push	esi
	push	ecx
	call	_exprint_recur

; 1039 :          exprint_recur(node+node->right,prec_parent); /* command */

	mov	edx, DWORD PTR [ebx+8]
	imul	edx, 168				; 000000a8H
	push	esi
	add	edx, ebx
	push	edx

; 1040 :          return;

	jmp	$LN1658@exprint_re
$LN571@exprint_re:

; 1041 :          
; 1042 :       case IFTEST_NODE:
; 1043 :          sprintf(pos,"if ( "); pos += strlen(pos);

	push	OFFSET ??_C@_05HEFMBOOH@if?5?$CI?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL1185@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1185@exprint_re

; 1044 :          exprint_recur(node+node->left,prec_parent); /* expr */

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	sub	eax, edx
	add	DWORD PTR _pos, eax
	mov	eax, DWORD PTR _prec_parent$[ebp]
	push	eax
	add	ecx, ebx
	push	ecx
	call	_exprint_recur

; 1045 :          sprintf(pos," ) then "); pos += strlen(pos);

	mov	edx, DWORD PTR _pos
	push	OFFSET ??_C@_08FAEHJPPB@?5?$CJ?5then?5?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
$LL1186@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1186@exprint_re

; 1046 :          bracket_depth++;

	inc	DWORD PTR _bracket_depth
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1047 :          newline();

	call	_newline
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN570@exprint_re:

; 1048 :          return;
; 1049 : 
; 1050 :       case WHILE_END_NODE:
; 1051 :          exprint_recur(node+node->left,prec_parent); /* test part */

	mov	eax, DWORD PTR [ebx+4]
	mov	edi, DWORD PTR _prec_parent$[ebp]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	edi
	push	eax
	call	_exprint_recur

; 1052 :          sprintf(pos," do "); pos += strlen(pos);

	mov	ecx, DWORD PTR _pos
	push	OFFSET ??_C@_04JKFHOPAN@?5do?5?$AA@
	push	ecx
	call	_sprintf
	mov	esi, DWORD PTR _pos
	mov	eax, esi
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	1
$LL1187@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1187@exprint_re

; 1053 :          bracket_depth++;

	inc	DWORD PTR _bracket_depth
	sub	eax, edx
	add	esi, eax

; 1054 :          if ( node->right )

	cmp	DWORD PTR [ebx+8], 0
	mov	DWORD PTR _pos, esi
	je	SHORT $LN569@exprint_re

; 1055 :          { newline();

	call	_newline

; 1056 :            exprint_recur(node+node->right,prec_parent); /* command */

	mov	edx, DWORD PTR [ebx+8]
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	edi
	push	edx
	call	_exprint_recur
	add	esp, 8

; 1059 :          bracket_depth--;

	dec	DWORD PTR _bracket_depth
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN569@exprint_re:

; 1057 :          } else
; 1058 :          { strcat(pos," ;"); pos += strlen(pos); }

	lea	eax, DWORD PTR [esi-1]
$LL1188@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1188@exprint_re
	mov	cx, WORD PTR ??_C@_02EEBIPDF@?5?$DL?$AA@
	mov	WORD PTR [eax], cx
	mov	dl, BYTE PTR ??_C@_02EEBIPDF@?5?$DL?$AA@+2
	mov	BYTE PTR [eax+2], dl
	mov	eax, esi
	lea	edx, DWORD PTR [eax+1]
$LL1189@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1189@exprint_re
	sub	eax, edx
	add	esi, eax
	mov	DWORD PTR _pos, esi
$LN568@exprint_re:

; 1059 :          bracket_depth--;

	dec	DWORD PTR _bracket_depth
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN567@exprint_re:

; 1060 :          return;
; 1061 : 
; 1062 :       case WHILE_TOP_NODE:
; 1063 :          sprintf(pos,"while ("); pos += strlen(pos);

	push	OFFSET ??_C@_07JOMAJBDI@while?5?$CI?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	1
$LL1190@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1190@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1064 :          exprint_recur(node+node->left,PREC_ARG); /* expr */

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	0
	push	eax
	call	_exprint_recur

; 1065 :          strcat(pos,") "); pos += strlen(pos);

	mov	edx, DWORD PTR _pos
	add	esp, 8
	lea	eax, DWORD PTR [edx-1]
	npad	2
$LL1191@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1191@exprint_re
	mov	cx, WORD PTR ??_C@_02KCKGHPCA@?$CJ?5?$AA@
	mov	WORD PTR [eax], cx
	mov	cl, BYTE PTR ??_C@_02KCKGHPCA@?$CJ?5?$AA@+2
	mov	BYTE PTR [eax+2], cl
	mov	eax, edx
	lea	esi, DWORD PTR [eax+1]
$LL1192@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1192@exprint_re
	sub	eax, esi
	pop	edi
	add	edx, eax
	pop	esi
	mov	DWORD PTR _pos, edx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN566@exprint_re:

; 1066 :          return;
; 1067 : 
; 1068 :       case DO_TOP_NODE:
; 1069 :          exprint_recur(node+node->right,prec_parent); /* command */

	mov	eax, DWORD PTR [ebx+8]
	mov	edx, DWORD PTR _prec_parent$[ebp]

; 1334 :          exprint_recur(node+node->left,PREC_ASSIGN);

	imul	eax, 168				; 000000a8H
	push	edx
	add	eax, ebx
	push	eax

; 1335 :          break;

	jmp	$LN1652@exprint_re
$LN565@exprint_re:

; 1070 :          return;
; 1071 : 
; 1072 :       case DO_END_NODE:
; 1073 :          sprintf(pos,"do "); pos += strlen(pos);

	push	OFFSET ??_C@_03LMPAOIAI@do?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL1193@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1193@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1074 :          bracket_depth++;

	mov	esi, 1
	add	DWORD PTR _bracket_depth, esi

; 1075 :          newline();

	call	_newline

; 1076 :          exprint_recur(node+node->left,prec_parent); /* command */

	mov	edx, DWORD PTR [ebx+4]
	mov	ecx, DWORD PTR _prec_parent$[ebp]
	imul	edx, 168				; 000000a8H
	push	ecx
	add	edx, ebx
	push	edx
	call	_exprint_recur

; 1077 :          bracket_depth--;

	sub	DWORD PTR _bracket_depth, esi

; 1078 :          newline();

	call	_newline

; 1079 :          sprintf(pos," while ("); pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_08JPBKNIFM@?5while?5?$CI?$AA@
	push	eax
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	esi, DWORD PTR [eax+1]
	npad	6
$LL1194@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1194@exprint_re

; 1080 :          exprint_recur(node+node->right,PREC_ARG); /* expr */

	mov	ecx, DWORD PTR [ebx+8]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	sub	eax, esi
	add	DWORD PTR _pos, eax
	push	0
	push	ecx
	call	_exprint_recur

; 1081 :          strcat(pos,") "); pos += strlen(pos);

	mov	edx, DWORD PTR _pos
	add	esp, 8
	lea	eax, DWORD PTR [edx-1]
	npad	2
$LL1195@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1195@exprint_re
	mov	cx, WORD PTR ??_C@_02KCKGHPCA@?$CJ?5?$AA@
	mov	WORD PTR [eax], cx
	mov	cl, BYTE PTR ??_C@_02KCKGHPCA@?$CJ?5?$AA@+2
	mov	BYTE PTR [eax+2], cl
	mov	eax, edx
	lea	esi, DWORD PTR [eax+1]
$LL1196@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1196@exprint_re
	sub	eax, esi
	pop	edi
	add	edx, eax
	pop	esi
	mov	DWORD PTR _pos, edx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN564@exprint_re:

; 1082 :          return;
; 1083 : 
; 1084 :       case FOR_END_NODE:
; 1085 :          sprintf(pos,"for ( "); pos += strlen(pos);

	push	OFFSET ??_C@_06PDKNMLLK@for?5?$CI?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1197@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1197@exprint_re
	sub	eax, edx

; 1086 :          exprint_recur(node+node->left,PREC_ARG); /* FOR_TOP_ */

	mov	edx, DWORD PTR [ebx+4]
	add	DWORD PTR _pos, eax
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	0
	push	edx
	call	_exprint_recur

; 1087 :          sprintf(pos," ) "); pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_03NMJBNGBA@?5?$CJ?5?$AA@
	push	eax
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	esi, DWORD PTR [eax+1]
$LL1198@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1198@exprint_re
	sub	eax, esi
	add	DWORD PTR _pos, eax

; 1088 :          bracket_depth++;

	mov	edi, 1
	add	DWORD PTR _bracket_depth, edi

; 1089 :          newline();

	call	_newline

; 1090 :          if ( node->right )

	mov	eax, DWORD PTR [ebx+8]
	test	eax, eax
	je	SHORT $LN563@exprint_re

; 1091 :            exprint_recur(node+node->right,prec_parent); /* command3 */

	mov	ecx, DWORD PTR _prec_parent$[ebp]
	imul	eax, 168				; 000000a8H
	push	ecx
	add	eax, ebx
	push	eax
	call	_exprint_recur

; 1093 :          bracket_depth--;

	sub	DWORD PTR _bracket_depth, edi
	add	esp, 8

; 1094 :          newline();

	call	_newline
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN563@exprint_re:

; 1092 :          else { strcat(pos," ;") ; pos += strlen(pos); } /* empty command3 */

	mov	esi, DWORD PTR _pos
	lea	eax, DWORD PTR [esi-1]
$LL1199@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1199@exprint_re
	mov	dx, WORD PTR ??_C@_02EEBIPDF@?5?$DL?$AA@
	mov	WORD PTR [eax], dx
	mov	cl, BYTE PTR ??_C@_02EEBIPDF@?5?$DL?$AA@+2
	mov	BYTE PTR [eax+2], cl
	mov	eax, esi
	lea	edx, DWORD PTR [eax+1]
$LL1200@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1200@exprint_re

; 1093 :          bracket_depth--;

	sub	DWORD PTR _bracket_depth, edi
	sub	eax, edx
	add	esi, eax
	mov	DWORD PTR _pos, esi

; 1094 :          newline();

	call	_newline
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN561@exprint_re:

; 1095 :          return;
; 1096 : 
; 1097 :       case FOR_TOP_NODE:
; 1098 :          exprint_recur(node+node->left,PREC_ARG); /* FOR_HEAD_ */

	mov	edx, DWORD PTR [ebx+4]
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	0
	push	edx
	call	_exprint_recur

; 1099 :          sprintf(pos," ; "); pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_03MDDDKBAO@?5?$DL?5?$AA@
	push	eax
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
$LL1201@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1201@exprint_re

; 1100 :          exprint_recur(node+node->right,prec_parent); /* command2 */

	mov	ecx, DWORD PTR _prec_parent$[ebp]
	sub	eax, edx
	add	DWORD PTR _pos, eax
	mov	edx, DWORD PTR [ebx+8]
	push	ecx

; 1101 :          return;

	jmp	$LN1654@exprint_re
$LN560@exprint_re:

; 1102 : 
; 1103 :       case FOR_HEAD_NODE:
; 1104 :          exprint_recur(node+node->left,PREC_ARG); /* FOR_ENTRY */

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	0
	push	eax
	call	_exprint_recur

; 1105 :          sprintf(pos," ; "); pos += strlen(pos);

	mov	ecx, DWORD PTR _pos
	push	OFFSET ??_C@_03MDDDKBAO@?5?$DL?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL1202@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1202@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1106 :          exprint_recur(node+node->right,PREC_ARG); /* expr */

	mov	edx, DWORD PTR [ebx+8]
	push	0

; 1107 :          return;

	jmp	$LN1654@exprint_re
$LN558@exprint_re:

; 1108 : 
; 1109 :       case FOR_ENTRY_NODE: 
; 1110 :          exprint_recur(node+node->left,prec_parent); /* command1 */
; 1111 :          return;
; 1112 : 
; 1113 :       case REDIRECT_NODE:
; 1114 :          if ( node->left ) 

	cmp	DWORD PTR [ebx+4], 0
	je	SHORT $LN557@exprint_re

; 1115 :            { strcat(pos," >> "); pos += strlen(pos);

	lea	esi, DWORD PTR [ecx-1]
$LL1203@exprint_re:
	mov	al, BYTE PTR [esi+1]
	inc	esi
	test	al, al
	jne	SHORT $LL1203@exprint_re
	mov	edx, DWORD PTR ??_C@_04FDJJEEEM@?5?$DO?$DO?5?$AA@
	mov	DWORD PTR [esi], edx
	mov	al, BYTE PTR ??_C@_04FDJJEEEM@?5?$DO?$DO?5?$AA@+4
	mov	BYTE PTR [esi+4], al
	mov	esi, ecx
	lea	edx, DWORD PTR [esi+1]
	npad	1
$LL1204@exprint_re:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL1204@exprint_re
	sub	esi, edx

; 1116 :              exprint_recur(node+node->left,prec_parent); /* command */

	mov	edx, DWORD PTR [ebx+4]
	imul	edx, 168				; 000000a8H
	add	ecx, esi
	mov	DWORD PTR _pos, ecx
	mov	ecx, DWORD PTR _prec_parent$[ebp]
	push	ecx
	add	edx, ebx
	push	edx
	call	_exprint_recur
	add	esp, 8

; 1117 :            }
; 1118 :          else

	jmp	SHORT $LN556@exprint_re
$LN557@exprint_re:

; 1119 :            sprintf(pos," >> \"%s\" ",node->op1.string); pos += strlen(pos);

	mov	eax, DWORD PTR [ebx+32]
	push	eax
	push	OFFSET ??_C@_09HOKDEKNN@?5?$DO?$DO?5?$CC?$CFs?$CC?5?$AA@
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
$LN556@exprint_re:
	mov	eax, DWORD PTR _pos
	lea	edx, DWORD PTR [eax+1]
$LL1205@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1205@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN555@exprint_re:

; 1120 :          return;
; 1121 : 
; 1122 :       case REDIRECTOVER_NODE:
; 1123 :          if ( node->left ) 

	cmp	DWORD PTR [ebx+4], 0
	je	SHORT $LN554@exprint_re

; 1124 :            { strcat(pos," >>> "); pos += strlen(pos);

	lea	esi, DWORD PTR [ecx-1]
	npad	2
$LL1206@exprint_re:
	mov	al, BYTE PTR [esi+1]
	inc	esi
	test	al, al
	jne	SHORT $LL1206@exprint_re
	mov	edx, DWORD PTR ??_C@_05PMAFDOCH@?5?$DO?$DO?$DO?5?$AA@
	mov	DWORD PTR [esi], edx
	mov	ax, WORD PTR ??_C@_05PMAFDOCH@?5?$DO?$DO?$DO?5?$AA@+4
	mov	WORD PTR [esi+4], ax
	mov	esi, ecx
	lea	edx, DWORD PTR [esi+1]
	npad	1
$LL1207@exprint_re:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL1207@exprint_re
	sub	esi, edx

; 1125 :              exprint_recur(node+node->left,prec_parent); /* command */

	mov	edx, DWORD PTR [ebx+4]
	imul	edx, 168				; 000000a8H
	add	ecx, esi
	mov	DWORD PTR _pos, ecx
	mov	ecx, DWORD PTR _prec_parent$[ebp]
	push	ecx
	add	edx, ebx
	push	edx
	call	_exprint_recur
	add	esp, 8

; 1126 :            }
; 1127 :          else

	jmp	SHORT $LN553@exprint_re
$LN554@exprint_re:

; 1128 :            sprintf(pos," >>> \"%s\" ",node->op1.string); pos += strlen(pos);

	mov	eax, DWORD PTR [ebx+32]
	push	eax
	push	OFFSET ??_C@_0L@EJFFKNML@?5?$DO?$DO?$DO?5?$CC?$CFs?$CC?5?$AA@
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
$LN553@exprint_re:
	mov	eax, DWORD PTR _pos
	lea	edx, DWORD PTR [eax+1]
$LL1208@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1208@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN552@exprint_re:

; 1129 :          return;
; 1130 : 
; 1131 :        case REDIRECT_ERR_NODE:
; 1132 :          if ( node->left ) 

	cmp	DWORD PTR [ebx+4], 0
	je	SHORT $LN551@exprint_re

; 1133 :            { strcat(pos," >>2 "); pos += strlen(pos);

	lea	esi, DWORD PTR [ecx-1]
	npad	2
$LL1209@exprint_re:
	mov	al, BYTE PTR [esi+1]
	inc	esi
	test	al, al
	jne	SHORT $LL1209@exprint_re
	mov	edx, DWORD PTR ??_C@_05PFBPMHED@?5?$DO?$DO2?5?$AA@
	mov	DWORD PTR [esi], edx
	mov	ax, WORD PTR ??_C@_05PFBPMHED@?5?$DO?$DO2?5?$AA@+4
	mov	WORD PTR [esi+4], ax
	mov	esi, ecx
	lea	edx, DWORD PTR [esi+1]
	npad	1
$LL1210@exprint_re:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL1210@exprint_re
	sub	esi, edx

; 1134 :              exprint_recur(node+node->left,prec_parent); /* command */

	mov	edx, DWORD PTR [ebx+4]
	imul	edx, 168				; 000000a8H
	add	ecx, esi
	mov	DWORD PTR _pos, ecx
	mov	ecx, DWORD PTR _prec_parent$[ebp]
	push	ecx
	add	edx, ebx
	push	edx
	call	_exprint_recur
	add	esp, 8

; 1135 :            }
; 1136 :          else

	jmp	SHORT $LN550@exprint_re
$LN551@exprint_re:

; 1137 :            sprintf(pos," >>2 \"%s\" ",node->op1.string); pos += strlen(pos);

	mov	eax, DWORD PTR [ebx+32]
	push	eax
	push	OFFSET ??_C@_0L@BOPKLIIE@?5?$DO?$DO2?5?$CC?$CFs?$CC?5?$AA@
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
$LN550@exprint_re:
	mov	eax, DWORD PTR _pos
	lea	edx, DWORD PTR [eax+1]
$LL1211@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1211@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN549@exprint_re:

; 1138 :          return;
; 1139 : 
; 1140 :       case REDIRECTOVER_ERR_NODE:
; 1141 :          if ( node->left ) 

	cmp	DWORD PTR [ebx+4], 0
	je	SHORT $LN548@exprint_re

; 1142 :            { strcat(pos," >>>2 "); pos += strlen(pos);

	lea	esi, DWORD PTR [ecx-1]
	npad	2
$LL1212@exprint_re:
	mov	al, BYTE PTR [esi+1]
	inc	esi
	test	al, al
	jne	SHORT $LL1212@exprint_re
	mov	edx, DWORD PTR ??_C@_06CPNAODOJ@?5?$DO?$DO?$DO2?5?$AA@
	mov	DWORD PTR [esi], edx
	mov	ax, WORD PTR ??_C@_06CPNAODOJ@?5?$DO?$DO?$DO2?5?$AA@+4
	mov	WORD PTR [esi+4], ax
	mov	dl, BYTE PTR ??_C@_06CPNAODOJ@?5?$DO?$DO?$DO2?5?$AA@+6
	mov	BYTE PTR [esi+6], dl
	mov	esi, ecx
	lea	edx, DWORD PTR [esi+1]
$LL1213@exprint_re:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL1213@exprint_re

; 1143 :              exprint_recur(node+node->left,prec_parent); /* command */

	mov	eax, DWORD PTR _prec_parent$[ebp]
	sub	esi, edx
	add	ecx, esi
	mov	DWORD PTR _pos, ecx
	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	push	eax
	add	ecx, ebx
	push	ecx
	call	_exprint_recur
	add	esp, 8

; 1144 :            }
; 1145 :          else

	jmp	SHORT $LN547@exprint_re
$LN548@exprint_re:

; 1146 :            sprintf(pos," >>>2 \"%s\" ",node->op1.string); pos += strlen(pos);

	mov	edx, DWORD PTR [ebx+32]
	push	edx
	push	OFFSET ??_C@_0M@OKBJPLDC@?5?$DO?$DO?$DO2?5?$CC?$CFs?$CC?5?$AA@
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
$LN547@exprint_re:
	mov	eax, DWORD PTR _pos
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL1214@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1214@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN546@exprint_re:

; 1147 :          return;
; 1148 : 
; 1149 : 
; 1150 :       case PIPE_NODE:
; 1151 :          if ( node->left ) 

	cmp	DWORD PTR [ebx+4], 0
	je	SHORT $LN545@exprint_re

; 1152 :            { strcat(pos," | "); pos += strlen(pos);

	lea	edi, DWORD PTR [ecx-1]
	npad	7
$LL1215@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1215@exprint_re
	mov	eax, DWORD PTR ??_C@_03LGOGDKEL@?5?$HM?5?$AA@
	mov	esi, ecx
	mov	DWORD PTR [edi], eax
	lea	edx, DWORD PTR [esi+1]
$LL1216@exprint_re:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL1216@exprint_re
	sub	esi, edx

; 1153 :              exprint_recur(node+node->left,prec_parent); /* command */

	mov	edx, DWORD PTR [ebx+4]
	imul	edx, 168				; 000000a8H
	add	ecx, esi
	mov	DWORD PTR _pos, ecx
	mov	ecx, DWORD PTR _prec_parent$[ebp]
	push	ecx
	add	edx, ebx
	push	edx
	call	_exprint_recur
	add	esp, 8

; 1154 :            }
; 1155 :          else

	jmp	SHORT $LN544@exprint_re
$LN545@exprint_re:

; 1156 :            sprintf(pos," | \"%s\" ",node->op1.string); pos += strlen(pos);

	mov	eax, DWORD PTR [ebx+32]
	push	eax
	push	OFFSET ??_C@_08DLMHGJKG@?5?$HM?5?$CC?$CFs?$CC?5?$AA@
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
$LN544@exprint_re:
	mov	eax, DWORD PTR _pos
	lea	edx, DWORD PTR [eax+1]
	npad	7
$LL1217@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1217@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN543@exprint_re:

; 1157 :          return;
; 1158 : 
; 1159 :       case PIPE_END_NODE:
; 1160 :       case REDIRECT_END_NODE:
; 1161 :          exprint_recur(node+node->right,prec_parent); /* command */

	mov	ecx, DWORD PTR [ebx+8]
	mov	esi, DWORD PTR _prec_parent$[ebp]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	push	esi
	push	ecx
	call	_exprint_recur

; 1162 :          exprint_recur(node+node->left,prec_parent); /* pipe */

	mov	edx, DWORD PTR [ebx+4]
	imul	edx, 168				; 000000a8H
	push	esi
	add	edx, ebx
	push	edx

; 1163 :          return;

	jmp	$LN1658@exprint_re
$LN542@exprint_re:

; 1164 : 
; 1165 :       case SINGLE_REDEFD_NODE:
; 1166 :          sprintf(pos,"%c ",node->op1.letter); 

	mov	eax, DWORD PTR [ebx+32]
	push	eax
	push	OFFSET ??_C@_03JGECCODE@?$CFc?5?$AA@
	push	ecx
	call	_sprintf

; 1167 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1218@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1218@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN541@exprint_re:

; 1168 :          return;
; 1169 : 
; 1170 :       case SINGLE_LETTER_NODE:
; 1171 :          if ( single_redefine[node->op1.letter].start )

	mov	ebx, DWORD PTR [ebx+32]
	mov	edx, ebx
	imul	edx, 104				; 00000068H
	cmp	DWORD PTR _single_redefine[edx], 0

; 1172 :             sprintf(pos,"'%c' ",node->op1.letter);

	push	ebx
	je	SHORT $LN540@exprint_re
	push	OFFSET ??_C@_05NMKAOHIM@?8?$CFc?8?5?$AA@
	jmp	SHORT $LN1640@exprint_re
$LN540@exprint_re:

; 1173 :          else sprintf(pos,"%c ",node->op1.letter); 

	push	OFFSET ??_C@_03JGECCODE@?$CFc?5?$AA@
$LN1640@exprint_re:
	push	ecx
	call	_sprintf

; 1174 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1219@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1219@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN537@exprint_re:

; 1218 :          break;
; 1219 : 
; 1220 :     case OPTIMIZE_NODE: 
; 1221 :          sprintf(pos,"optimize %s ",
; 1222 :           node->op1.toggle_state==ON_?"ON":"OFF"); pos += strlen(pos);

	cmp	DWORD PTR [ebx+32], 15000		; 00003a98H
	mov	eax, OFFSET ??_C@_02BFICIOJL@ON?$AA@
	je	SHORT $LN830@exprint_re
	mov	eax, OFFSET ??_C@_03MPPIHBHJ@OFF?$AA@
$LN830@exprint_re:
	push	eax
	push	OFFSET ??_C@_0N@HJPMHHGF@optimize?5?$CFs?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL1220@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1220@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN536@exprint_re:

; 1223 :          break;
; 1224 :    
; 1225 :     case AUTOCHOP_NODE: 
; 1226 :             sprintf(pos,"autochop %s ",
; 1227 :           node->op1.toggle_state==ON_?"ON":"OFF"); pos += strlen(pos);

	cmp	DWORD PTR [ebx+32], 15000		; 00003a98H
	mov	eax, OFFSET ??_C@_02BFICIOJL@ON?$AA@
	je	SHORT $LN832@exprint_re
	mov	eax, OFFSET ??_C@_03MPPIHBHJ@OFF?$AA@
$LN832@exprint_re:
	push	eax
	push	OFFSET ??_C@_0N@HEDCIHMP@autochop?5?$CFs?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL1221@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1221@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN535@exprint_re:

; 1228 :          break;
; 1229 :     
; 1230 :     case LOGFILE_TOGGLE_NODE:
; 1231 :          sprintf(pos,"logfile %s ",
; 1232 :           node->op1.toggle_state==ON_?"ON":"OFF"); pos += strlen(pos);

	cmp	DWORD PTR [ebx+32], 15000		; 00003a98H
	mov	eax, OFFSET ??_C@_02BFICIOJL@ON?$AA@
	je	SHORT $LN834@exprint_re
	mov	eax, OFFSET ??_C@_03MPPIHBHJ@OFF?$AA@
$LN834@exprint_re:
	push	eax
	push	OFFSET ??_C@_0M@DIIJBMIL@logfile?5?$CFs?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL1222@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1222@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN534@exprint_re:

; 1233 :          break;
; 1234 : 
; 1235 :     case KEYLOGFILE_TOGGLE_NODE:
; 1236 :          sprintf(pos,"keylogfile %s ",
; 1237 :           node->op1.toggle_state==ON_?"ON":"OFF"); pos += strlen(pos);

	cmp	DWORD PTR [ebx+32], 15000		; 00003a98H
	mov	eax, OFFSET ??_C@_02BFICIOJL@ON?$AA@
	je	SHORT $LN836@exprint_re
	mov	eax, OFFSET ??_C@_03MPPIHBHJ@OFF?$AA@
$LN836@exprint_re:
	push	eax
	push	OFFSET ??_C@_0P@DNFKKNDG@keylogfile?5?$CFs?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL1223@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1223@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN533@exprint_re:

; 1238 :          break;
; 1239 : 
; 1240 :     case GEOMVIEW_TOGGLE_NODE:
; 1241 :          sprintf(pos,"geomview %s ",
; 1242 :           node->op1.toggle_state==ON_?"ON":"OFF"); pos += strlen(pos);

	cmp	DWORD PTR [ebx+32], 15000		; 00003a98H
	mov	eax, OFFSET ??_C@_02BFICIOJL@ON?$AA@
	je	SHORT $LN838@exprint_re
	mov	eax, OFFSET ??_C@_03MPPIHBHJ@OFF?$AA@
$LN838@exprint_re:
	push	eax
	push	OFFSET ??_C@_0N@MCGFEOAK@geomview?5?$CFs?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL1224@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1224@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN532@exprint_re:

; 1243 :          break;
; 1244 : 
; 1245 :     case GEOMPIPE_TOGGLE_NODE:
; 1246 :          sprintf(pos,"geompipe %s ",
; 1247 :           node->op1.toggle_state==ON_?"ON":"OFF"); pos += strlen(pos);

	cmp	DWORD PTR [ebx+32], 15000		; 00003a98H
	mov	eax, OFFSET ??_C@_02BFICIOJL@ON?$AA@
	je	SHORT $LN840@exprint_re
	mov	eax, OFFSET ??_C@_03MPPIHBHJ@OFF?$AA@
$LN840@exprint_re:
	push	eax
	push	OFFSET ??_C@_0N@MKIHCHHJ@geompipe?5?$CFs?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL1225@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1225@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN531@exprint_re:

; 1248 :          break;
; 1249 : 
; 1250 :     case GEOMPIPE_NODE:
; 1251 :          sprintf(pos,"geompipe "); pos += strlen(pos);

	push	OFFSET ??_C@_09PFLHEGFB@geompipe?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1226@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1226@exprint_re

; 1252 :          exprint_recur(node+node->left,prec_parent);
; 1253 :          break;

	jmp	$LN1661@exprint_re
$LN530@exprint_re:

; 1254 : 
; 1255 :     case POSTSCRIPT_NODE:
; 1256 :          sprintf(pos,"postscript "); pos += strlen(pos);

	push	OFFSET ??_C@_0M@DEHHELJH@postscript?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1227@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1227@exprint_re

; 1257 :          exprint_recur(node+node->left,prec_parent);
; 1258 :          break;

	jmp	$LN1687@exprint_re
$LN529@exprint_re:

; 1259 : 
; 1260 :     case BINARY_OFF_FILE_NODE:
; 1261 :          sprintf(pos,"binary_off_file "); pos += strlen(pos);

	push	OFFSET ??_C@_0BB@GPAKCJEL@binary_off_file?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL1228@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1228@exprint_re

; 1262 :          exprint_recur(node+node->left,prec_parent);
; 1263 :          break;

	jmp	$LN1651@exprint_re
$LN528@exprint_re:

; 1264 : 
; 1265 :     case OOGLFILE_NODE:
; 1266 :          sprintf(pos,"ooglfile "); pos += strlen(pos);

	push	OFFSET ??_C@_09MJJMJFJL@ooglfile?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1229@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1229@exprint_re
$LN1676@exprint_re:
	sub	eax, edx
	add	DWORD PTR _pos, eax
$LN407@exprint_re:

; 1267 :          exprint_recur(node+node->left,prec_parent);

	mov	ecx, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR _prec_parent$[ebp]
	imul	ecx, 168				; 000000a8H
	push	eax
	add	ecx, ebx
	push	ecx

; 1268 :          break;

	jmp	$LN1652@exprint_re
$LN527@exprint_re:

; 1269 : 
; 1270 :     case TOGGLEVALUE_NODE:
; 1271 :          sprintf(pos,"(%s) ",keywordname(node->op1.toggle_id)); 

	mov	edx, DWORD PTR [ebx+32]
	push	edx
	call	_keywordname
	push	eax
	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_05HHHBCPMM@?$CI?$CFs?$CJ?5?$AA@
	push	eax
	call	_sprintf

; 1272 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	5
$LL1230@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1230@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN526@exprint_re:

; 1273 :          break;
; 1274 :     
; 1275 :     case GET_INTERNAL_NODE:
; 1276 :          sprintf(pos,"%s",keywordname(node->op1.name_id));

	mov	ecx, DWORD PTR [ebx+32]
	push	ecx
	call	_keywordname
	mov	edx, DWORD PTR _pos
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	edx
	call	_sprintf

; 1277 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
$LL1231@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1231@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN525@exprint_re:

; 1278 :          break;
; 1279 : 
; 1280 :     case PROCEDURE_NODE:
; 1281 :          sprintf(pos,"%s ",globals(node->op1.name_id)->name);

	mov	ebx, DWORD PTR [ebx+32]
	mov	eax, ebx
	and	eax, -16777216				; ff000000H
	cmp	eax, 268435456				; 10000000H
	je	SHORT $LN841@exprint_re
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN843@exprint_re
	and	ebx, 16777215				; 00ffffffH
	imul	ebx, 224				; 000000e0H
	add	ebx, DWORD PTR [esi]
	jmp	SHORT $LN842@exprint_re
$LN843@exprint_re:
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN841@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	ebx, 16777215				; 00ffffffH
	mov	ebx, DWORD PTR [edx+ebx*4]
	jmp	SHORT $LN842@exprint_re
$LN841@exprint_re:
	mov	eax, DWORD PTR _web+5652
	and	ebx, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR _dymem
	mov	ebx, DWORD PTR [edx+eax]
$LN842@exprint_re:
	push	ebx
	push	OFFSET ??_C@_03IKGEINEE@?$CFs?5?$AA@
	push	ecx
	call	_sprintf

; 1282 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1232@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1232@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN524@exprint_re:

; 1283 :          break;
; 1284 : 
; 1285 :     case PERM_PROCEDURE_NODE:
; 1286 :          sprintf(pos,"%s ",perm_globals(node->op1.name_id)->name);

	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR _web+5656
	and	edx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	push	edx
	push	OFFSET ??_C@_03IKGEINEE@?$CFs?5?$AA@
	push	ecx
	call	_sprintf

; 1287 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	5
$LL1233@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1233@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN523@exprint_re:

; 1288 :          break;
; 1289 : 
; 1290 :     case FIX_PARAMETER_NODE:
; 1291 :           sprintf(pos,"fix %s",globals(node->op1.name_id)->name);

	mov	ebx, DWORD PTR [ebx+32]
	mov	eax, ebx
	and	eax, -16777216				; ff000000H
	cmp	eax, 268435456				; 10000000H
	je	SHORT $LN847@exprint_re
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN849@exprint_re
	and	ebx, 16777215				; 00ffffffH
	imul	ebx, 224				; 000000e0H
	add	ebx, DWORD PTR [esi]
	jmp	SHORT $LN848@exprint_re
$LN849@exprint_re:
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN847@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	ebx, 16777215				; 00ffffffH
	mov	ebx, DWORD PTR [edx+ebx*4]
	jmp	SHORT $LN848@exprint_re
$LN847@exprint_re:
	mov	eax, DWORD PTR _web+5652
	and	ebx, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR _dymem
	mov	ebx, DWORD PTR [edx+eax]
$LN848@exprint_re:
	push	ebx
	push	OFFSET ??_C@_06PGAKKNMC@fix?5?$CFs?$AA@
	push	ecx
	call	_sprintf

; 1292 :           pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL1234@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1234@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN522@exprint_re:

; 1293 :           break;
; 1294 : 
; 1295 :     case UNFIX_PARAMETER_NODE:
; 1296 :           sprintf(pos,"unfix %s",globals(node->op1.name_id)->name);

	mov	ebx, DWORD PTR [ebx+32]
	mov	eax, ebx
	and	eax, -16777216				; ff000000H
	cmp	eax, 268435456				; 10000000H
	je	SHORT $LN853@exprint_re
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN855@exprint_re
	and	ebx, 16777215				; 00ffffffH
	imul	ebx, 224				; 000000e0H
	add	ebx, DWORD PTR [esi]
	jmp	SHORT $LN854@exprint_re
$LN855@exprint_re:
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN853@exprint_re
	mov	eax, DWORD PTR _web+5656
	and	ebx, 16777215				; 00ffffffH
	mov	ebx, DWORD PTR [eax+ebx*4]
	jmp	SHORT $LN854@exprint_re
$LN853@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	ebx, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR _dymem
	mov	ebx, DWORD PTR [eax+edx]
$LN854@exprint_re:
	push	ebx
	push	OFFSET ??_C@_08PCDKFCAB@unfix?5?$CFs?$AA@
	push	ecx
	call	_sprintf

; 1297 :           pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1235@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1235@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN521@exprint_re:

; 1298 :           break;
; 1299 : 
; 1300 :     case FIX_QUANTITY_NODE:
; 1301 :           sprintf(pos,"fix %s",GEN_QUANT(node->op1.quant_id)->name);

	mov	eax, DWORD PTR [ebx+32]
	imul	eax, 368				; 00000170H
	add	eax, DWORD PTR _gen_quant_list
	push	eax
	push	OFFSET ??_C@_06PGAKKNMC@fix?5?$CFs?$AA@
	push	ecx
	call	_sprintf

; 1302 :           pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1236@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1236@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN520@exprint_re:

; 1303 :           break;
; 1304 : 
; 1305 :     case UNFIX_QUANTITY_NODE:
; 1306 :           sprintf(pos,"unfix %s",GEN_QUANT(node->op1.quant_id)->name);

	mov	edx, DWORD PTR [ebx+32]
	imul	edx, 368				; 00000170H
	add	edx, DWORD PTR _gen_quant_list
	push	edx
	push	OFFSET ??_C@_08PCDKFCAB@unfix?5?$CFs?$AA@
	push	ecx
	call	_sprintf

; 1307 :           pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1237@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1237@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN519@exprint_re:

; 1308 :           break;
; 1309 : 
; 1310 :     case SET_Q_FIXED_NODE:
; 1311 :           sprintf(pos,"set %s fixed",GEN_QUANT(node->op1.quant_id)->name);

	mov	eax, DWORD PTR [ebx+32]
	imul	eax, 368				; 00000170H
	add	eax, DWORD PTR _gen_quant_list
	push	eax
	push	OFFSET ??_C@_0N@MIGPCOON@set?5?$CFs?5fixed?$AA@
	push	ecx
	call	_sprintf

; 1312 :           pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1238@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1238@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN518@exprint_re:

; 1313 :           break;
; 1314 : 
; 1315 :     case SET_Q_ENERGY_NODE:
; 1316 :           sprintf(pos,"set %s energy",GEN_QUANT(node->op1.quant_id)->name);

	mov	edx, DWORD PTR [ebx+32]
	imul	edx, 368				; 00000170H
	add	edx, DWORD PTR _gen_quant_list
	push	edx
	push	OFFSET ??_C@_0O@FLJLJLDN@set?5?$CFs?5energy?$AA@
	push	ecx
	call	_sprintf

; 1317 :           pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1239@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1239@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN517@exprint_re:

; 1318 :           break;
; 1319 : 
; 1320 :     case SET_Q_INFO_NODE:
; 1321 :           sprintf(pos,"set %s info_only",GEN_QUANT(node->op1.quant_id)->name);

	mov	eax, DWORD PTR [ebx+32]
	imul	eax, 368				; 00000170H
	add	eax, DWORD PTR _gen_quant_list
	push	eax
	push	OFFSET ??_C@_0BB@CICBOCMP@set?5?$CFs?5info_only?$AA@
	push	ecx
	call	_sprintf

; 1322 :           pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1240@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1240@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN516@exprint_re:

; 1323 :           break;
; 1324 : 
; 1325 :     case SET_Q_CONSERVED_NODE:
; 1326 :           sprintf(pos,"set %s conserved",GEN_QUANT(node->op1.quant_id)->name);

	mov	edx, DWORD PTR [ebx+32]
	imul	edx, 368				; 00000170H
	add	edx, DWORD PTR _gen_quant_list
	push	edx
	push	OFFSET ??_C@_0BB@DGCNEFB@set?5?$CFs?5conserved?$AA@
	push	ecx
	call	_sprintf

; 1327 :           pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1241@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1241@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN515@exprint_re:

; 1328 :           break;
; 1329 : 
; 1330 :     case SET_INTERNAL_NODE:
; 1331 :          sprintf(pos,"%s %s ",keywordname(node->op1.name_id),
; 1332 :            assign_symbol(node->op2.assigntype));

	mov	eax, DWORD PTR [ebx+136]
	push	eax
	call	_assign_symbol
	mov	ecx, DWORD PTR [ebx+32]
	add	esp, 4
	push	eax
	push	ecx
	call	_keywordname
	mov	edx, DWORD PTR _pos
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_06OHLOMLHG@?$CFs?5?$CFs?5?$AA@
	push	edx
	call	_sprintf

; 1333 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	7
$LL1242@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1242@exprint_re
$LN1679@exprint_re:
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1334 :          exprint_recur(node+node->left,PREC_ASSIGN);

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	push	10					; 0000000aH
	add	eax, ebx
	push	eax

; 1335 :          break;

	jmp	$LN1652@exprint_re
$LN514@exprint_re:

; 1336 : 
; 1337 :     case VIEW_MATRIX_LVALUE_NODE:
; 1338 :          sprintf(pos,"view_matrix["); pos += strlen("view_matrix[");

	push	OFFSET ??_C@_0N@PHJBGNDM@view_matrix?$FL?$AA@
	push	ecx
	call	_sprintf

; 1339 :          exprint_recur(node+node->left,PREC_ARG);

	mov	ecx, DWORD PTR [ebx+4]
	add	DWORD PTR _pos, 12			; 0000000cH
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	push	0
	push	ecx
	call	_exprint_recur

; 1340 :          sprintf(pos,"]["); pos += 2;

	mov	edx, DWORD PTR _pos
	push	OFFSET ??_C@_02DNJFBPJB@?$FN?$FL?$AA@
	push	edx
	call	_sprintf

; 1341 :          exprint_recur(node+node->right,PREC_ARG);

	mov	eax, DWORD PTR [ebx+8]
	add	DWORD PTR _pos, 2
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	0
	push	eax
	call	_exprint_recur

; 1342 :          sprintf(pos,"]"); pos += 1;

	mov	ecx, DWORD PTR _pos
	push	OFFSET ??_C@_01LBDDMOBJ@?$FN?$AA@
	push	ecx
	call	_sprintf
	add	esp, 40					; 00000028H
	inc	DWORD PTR _pos
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN513@exprint_re:

; 1343 :          break;
; 1344 : 
; 1345 :     case SET_VIEW_MATRIX_NODE:
; 1346 :          exprint_recur(node+node->left,PREC_ASSIGN);

	mov	edx, DWORD PTR [ebx+4]
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	10					; 0000000aH
	push	edx
	call	_exprint_recur

; 1347 :          sprintf(pos," := "); pos += 4;

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_04NOLNGNEC@?5?3?$DN?5?$AA@
	push	eax
	call	_sprintf

; 1348 :          exprint_recur(node+node->right,PREC_ASSIGN);

	mov	ecx, DWORD PTR [ebx+8]
	add	DWORD PTR _pos, 4
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	push	10					; 0000000aH
	push	ecx
	call	_exprint_recur
	add	esp, 24					; 00000018H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN512@exprint_re:

; 1349 :          break;
; 1350 : 
; 1351 :     case SET_SCALE_NODE:
; 1352 :           sprintf(pos,"m "); pos += strlen(pos);

	push	OFFSET ??_C@_02NFDFFKDM@m?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1243@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1243@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1353 :           exprint_recur(node+node->left,PREC_ASSIGN);

	push	10					; 0000000aH

; 1354 :           break;

	jmp	$LN1653@exprint_re
$LN511@exprint_re:

; 1355 : 
; 1356 :     case SET_OPTIMIZE_NODE:
; 1357 :           sprintf(pos,"optimize "); pos += strlen(pos);

	push	OFFSET ??_C@_09FFMPJNE@optimize?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1244@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1244@exprint_re

; 1358 :           exprint_recur(node+node->left,PREC_ASSIGN);
; 1359 :           break;

	jmp	$LN1679@exprint_re
$LN510@exprint_re:

; 1360 : 
; 1361 :     case SET_GAP_CONSTANT_NODE:
; 1362 :           sprintf(pos,"gap_constant := "); pos += strlen(pos);

	push	OFFSET ??_C@_0BB@GOPKHFKJ@gap_constant?5?3?$DN?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1245@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1245@exprint_re
$LN1684@exprint_re:

; 1363 :           exprint_recur(node+node->left,PREC_ASSIGN);

	push	10					; 0000000aH
$LN1690@exprint_re:
	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	sub	eax, edx
	add	DWORD PTR _pos, eax
	add	ecx, ebx
	push	ecx

; 1364 :           break;

	jmp	$LN1652@exprint_re
$LN509@exprint_re:

; 1365 : 
; 1366 :     case SKINNY_NODE:
; 1367 :           sprintf(pos,"K "); pos += strlen(pos);

	push	OFFSET ??_C@_02OJPFGAGO@K?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL1246@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1246@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1368 :           exprint_recur(node+node->left,PREC_ASSIGN);

	push	10					; 0000000aH

; 1369 :           break;

	jmp	$LN1653@exprint_re
$LN508@exprint_re:

; 1370 : 
; 1371 :     case TORDUP_NODE:
; 1372 :           sprintf(pos,"y "); pos += strlen(pos);

	push	OFFSET ??_C@_02MOBKFBJA@y?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1247@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1247@exprint_re

; 1373 :           exprint_recur(node+node->left,PREC_ASSIGN);
; 1374 :           break;

	jmp	$LN1679@exprint_re
$LN507@exprint_re:

; 1375 : 
; 1376 :     case SET_MODEL_NODE:
; 1377 :           sprintf(pos,"M "); pos += strlen(pos);

	push	OFFSET ??_C@_02ONHIBMNM@M?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1248@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1248@exprint_re

; 1378 :           exprint_recur(node+node->left,PREC_ASSIGN);
; 1379 :           break;

	jmp	$LN1684@exprint_re
$LN506@exprint_re:

; 1380 : 
; 1381 :     case INVOKE_P_MENU_NODE:
; 1382 :           sprintf(pos,"P "); pos += strlen(pos);

	push	OFFSET ??_C@_02PJIGCMPP@P?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1249@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1249@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1383 :           exprint_recur(node+node->left,PREC_ASSIGN);

	push	10					; 0000000aH

; 1384 :           break;

	jmp	$LN1653@exprint_re
$LN505@exprint_re:

; 1385 : 
; 1386 :     case SET_GRAVITY_NODE:
; 1387 :           switch ( node->op1.assigntype )

	mov	eax, DWORD PTR [ebx+32]
	add	eax, -30001				; ffff8acfH
	cmp	eax, 4
	ja	SHORT $LN503@exprint_re
	jmp	DWORD PTR $LN1694@exprint_re[eax*4]
$LN502@exprint_re:

; 1388 :           { case ASSIGN_OP: sprintf(pos,"G "); break;

	push	OFFSET ??_C@_02OAOPJJAK@G?5?$AA@
	jmp	SHORT $LN1641@exprint_re
$LN501@exprint_re:

; 1389 :             case PLUSASSIGN_OP: sprintf(pos,"gravity += "); break;

	push	OFFSET ??_C@_0M@DHFJMEMP@gravity?5?$CL?$DN?5?$AA@
	jmp	SHORT $LN1641@exprint_re
$LN500@exprint_re:

; 1390 :             case SUBASSIGN_OP: sprintf(pos,"gravity -= "); break;

	push	OFFSET ??_C@_0M@BCDCJLBD@gravity?5?9?$DN?5?$AA@
	jmp	SHORT $LN1641@exprint_re
$LN499@exprint_re:

; 1391 :             case MULTASSIGN_OP: sprintf(pos,"gravity *= "); break;

	push	OFFSET ??_C@_0M@IPOFKDKK@gravity?5?$CK?$DN?5?$AA@
	jmp	SHORT $LN1641@exprint_re
$LN498@exprint_re:

; 1392 :             case DIVASSIGN_OP: sprintf(pos,"gravity /= "); break;

	push	OFFSET ??_C@_0M@LIDLFDJI@gravity?5?1?$DN?5?$AA@
$LN1641@exprint_re:
	push	ecx
	call	_sprintf
	mov	ecx, DWORD PTR _pos
	add	esp, 8
$LN503@exprint_re:

; 1393 :           } 
; 1394 :           pos += strlen(pos);

	mov	esi, ecx
	lea	edx, DWORD PTR [esi+1]
$LL1250@exprint_re:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL1250@exprint_re

; 1334 :          exprint_recur(node+node->left,PREC_ASSIGN);

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H

; 1393 :           } 
; 1394 :           pos += strlen(pos);

	sub	esi, edx
	add	ecx, esi
	push	10					; 0000000aH
	add	eax, ebx
	mov	DWORD PTR _pos, ecx
	push	eax
	jmp	$LN1652@exprint_re
$LN497@exprint_re:

; 1395 :           exprint_recur(node+node->left,PREC_ASSIGN);
; 1396 :           break;
; 1397 : 
; 1398 :     case SET_DIFFUSION_NODE:
; 1399 :           sprintf(pos,"diffusion := "); pos += strlen(pos);

	push	OFFSET ??_C@_0O@PDNHPOPF@diffusion?5?3?$DN?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL1251@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1251@exprint_re

; 1400 :           exprint_recur(node+node->left,PREC_ASSIGN);
; 1401 :           break;

	jmp	$LN1684@exprint_re
$LN496@exprint_re:

; 1402 : 
; 1403 :     case SET_THICKEN_NODE:
; 1404 :           sprintf(pos,"thicken := "); pos += strlen(pos);

	push	OFFSET ??_C@_0M@IAPMLCJI@thicken?5?3?$DN?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1252@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1252@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1405 :           exprint_recur(node+node->left,PREC_ASSIGN);

	push	10					; 0000000aH

; 1406 :           break;

	jmp	$LN1653@exprint_re
$LN495@exprint_re:

; 1407 : 
; 1408 :     case SET_AUTOCHOP_NODE:
; 1409 :           sprintf(pos,"autochop := "); pos += strlen(pos);

	push	OFFSET ??_C@_0N@GEMGAMM@autochop?5?3?$DN?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1253@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1253@exprint_re

; 1410 :           exprint_recur(node+node->left,PREC_ASSIGN);
; 1411 :           break;

	jmp	$LN1679@exprint_re
$LN494@exprint_re:

; 1412 : 
; 1413 :     case SET_AMBIENT_PRESSURE_NODE:
; 1414 :           sprintf(pos,"p "); pos += strlen(pos);

	push	OFFSET ??_C@_02MBMLGKBP@p?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1254@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1254@exprint_re

; 1415 :           exprint_recur(node+node->left,PREC_ASSIGN);
; 1416 :           break;

	jmp	$LN1684@exprint_re
$LN493@exprint_re:

; 1417 : 
; 1418 :     case ZOOM_NODE:
; 1419 :           sprintf(pos,"zoom "); pos+=strlen(pos);

	push	OFFSET ??_C@_05EJCIALOD@zoom?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1255@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1255@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1420 :           if ( node->left )

	mov	eax, DWORD PTR [ebx+4]
	test	eax, eax
	je	$LN730@exprint_re

; 1421 :             { exprint_recur(node+node->left,PREC_ASSIGN);

	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	10					; 0000000aH
	push	eax
	call	_exprint_recur

; 1422 :               exprint_recur(node+node->right,PREC_ASSIGN);

	mov	edx, DWORD PTR [ebx+8]
	imul	edx, 168				; 000000a8H
	push	10					; 0000000aH
	add	edx, ebx
	push	edx

; 1423 :             }
; 1424 :           break;

	jmp	$LN1658@exprint_re
$LN491@exprint_re:

; 1425 : 
; 1426 :     case CHDIR_NODE:
; 1427 :          sprintf(pos,"chdir ");

	push	OFFSET ??_C@_06NEAHAKFG@chdir?5?$AA@
	push	ecx
	call	_sprintf

; 1428 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1256@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1256@exprint_re

; 1429 :          exprint_recur(node+node->left,PREC_ASSIGN);
; 1430 :          break;

	jmp	$LN1679@exprint_re
$LN490@exprint_re:

; 1431 : 
; 1432 :    case SYSTEM_NODE:
; 1433 :          sprintf(pos,"system ");

	push	OFFSET ??_C@_07JJGFGBJN@system?5?$AA@
	push	ecx
	call	_sprintf

; 1434 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	7
$LL1257@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1257@exprint_re

; 1435 :          exprint_recur(node+node->left,PREC_ASSIGN);
; 1436 :          break;

	jmp	$LN1684@exprint_re
$LN489@exprint_re:

; 1437 : 
; 1438 :    case EXEC_NODE: case PARALLEL_EXEC_NODE:
; 1439 :          sprintf(pos,"exec ");

	push	OFFSET ??_C@_05MELDNFB@exec?5?$AA@
	push	ecx
	call	_sprintf

; 1440 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1258@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1258@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1441 :          exprint_recur(node+node->left,PREC_ASSIGN);

	push	10					; 0000000aH

; 1442 :          break;

	jmp	$LN1653@exprint_re
$LN488@exprint_re:

; 1443 : 
; 1444 :     case READ_NODE:
; 1445 :          sprintf(pos,"read ");

	push	OFFSET ??_C@_05MFNNJD@read?5?$AA@
	push	ecx
	call	_sprintf

; 1446 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1259@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1259@exprint_re

; 1447 :          exprint_recur(node+node->left,PREC_ASSIGN);
; 1448 :          break;

	jmp	$LN1679@exprint_re
$LN487@exprint_re:

; 1449 : 
; 1450 :     case LOAD_NODE:
; 1451 :          sprintf(pos,"load ");

	push	OFFSET ??_C@_05HDKJKGNJ@load?5?$AA@
	push	ecx
	call	_sprintf

; 1452 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1260@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1260@exprint_re

; 1453 :          exprint_recur(node+node->left,PREC_ASSIGN);
; 1454 :          break;

	jmp	$LN1684@exprint_re
$LN486@exprint_re:

; 1455 : 
; 1456 :     case PERMLOAD_NODE:
; 1457 :          sprintf(pos,"permload ");

	push	OFFSET ??_C@_09MFEIJFLH@permload?5?$AA@
	push	ecx
	call	_sprintf

; 1458 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1261@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1261@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1459 :          exprint_recur(node+node->left,PREC_ASSIGN);

	push	10					; 0000000aH

; 1460 :          break;

	jmp	$LN1653@exprint_re
$LN485@exprint_re:

; 1461 : 
; 1462 :     case ADDLOAD_NODE:
; 1463 :          sprintf(pos,"addload ");

	push	OFFSET ??_C@_08EECCEAIE@addload?5?$AA@
	push	ecx
	call	_sprintf

; 1464 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1262@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1262@exprint_re

; 1465 :          exprint_recur(node+node->left,PREC_ASSIGN);
; 1466 :          break;

	jmp	$LN1679@exprint_re
$LN484@exprint_re:

; 1467 : 
; 1468 :     case REPLACE_LOAD_NODE:
; 1469 :          sprintf(pos,"replace_load ");

	push	OFFSET ??_C@_0O@GDNEAALN@replace_load?5?$AA@
	push	ecx
	call	_sprintf

; 1470 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1263@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1263@exprint_re

; 1471 :          exprint_recur(node+node->left,PREC_ASSIGN);
; 1472 :          break;

	jmp	$LN1684@exprint_re
$LN483@exprint_re:

; 1473 : 
; 1474 :     case SHOW_TRANS_NODE:
; 1475 :          sprintf(pos,"show_trans ");

	push	OFFSET ??_C@_0M@OHJEHJPG@show_trans?5?$AA@
	push	ecx
	call	_sprintf

; 1476 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1264@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1264@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1477 :          exprint_recur(node+node->left,PREC_ASSIGN);

	push	10					; 0000000aH

; 1478 :          break;

	jmp	$LN1653@exprint_re
$LN482@exprint_re:

; 1479 : 
; 1480 :     case TRANSFORM_EXPR_NODE:
; 1481 :          sprintf(pos,"transform_expr ");

	push	OFFSET ??_C@_0BA@OACEACLK@transform_expr?5?$AA@
	push	ecx
	call	_sprintf

; 1482 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1265@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1265@exprint_re

; 1483 :          exprint_recur(node+node->left,PREC_ASSIGN);
; 1484 :          break;

	jmp	$LN1679@exprint_re
$LN481@exprint_re:

; 1485 : 
; 1486 :    case GEOMVIEW_NODE:
; 1487 :          sprintf(pos,"geomview ");

	push	OFFSET ??_C@_09FLILHFPP@geomview?5?$AA@
	push	ecx
	call	_sprintf

; 1488 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1266@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1266@exprint_re

; 1489 :          exprint_recur(node+node->left,PREC_ASSIGN);
; 1490 :          break;

	jmp	$LN1684@exprint_re
$LN480@exprint_re:

; 1491 :  
; 1492 :     case TASK_EXEC_NODE:
; 1493 :          sprintf(pos,"%s ",keywordname(node->type));

	push	edx
	call	_keywordname
	mov	edx, DWORD PTR _pos
	push	eax
	push	OFFSET ??_C@_03IKGEINEE@?$CFs?5?$AA@
	push	edx
	call	_sprintf

; 1494 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
$LL1267@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1267@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1495 :          exprint_recur(node+node->left,PREC_ARG);

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	0
	push	eax
	call	_exprint_recur

; 1496 :          *pos = ','; pos++; *pos = 0;

	mov	eax, DWORD PTR _pos
	mov	BYTE PTR [eax], 44			; 0000002cH
	inc	eax
	mov	BYTE PTR [eax], 0

; 1497 :          exprint_recur(node+node->right,PREC_ARG);

	mov	ecx, DWORD PTR [ebx+8]
	imul	ecx, 168				; 000000a8H
	push	0
	add	ecx, ebx
	mov	DWORD PTR _pos, eax
	push	ecx

; 1498 :          break;

	jmp	$LN1658@exprint_re
$LN479@exprint_re:

; 1499 : 
; 1500 :       case VIEW_TRANSFORM_PARITY_NODE:
; 1501 :          strcat(pos,"view_transform_parity["); pos += strlen(pos);

	dec	ecx
$LL1268@exprint_re:
	mov	al, BYTE PTR [ecx+1]
	inc	ecx
	test	al, al
	jne	SHORT $LL1268@exprint_re
	mov	eax, DWORD PTR _pos
	mov	edi, ecx
	mov	ecx, 5
	mov	esi, OFFSET ??_C@_0BH@OFAOMDFN@view_transform_parity?$FL?$AA@
	rep movsd
	movsw
	movsb
	lea	edx, DWORD PTR [eax+1]
	npad	7
$LL1269@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1269@exprint_re
	sub	eax, edx

; 1502 :          exprint_recur(node+node->left,PREC_ARG);

	mov	edx, DWORD PTR [ebx+4]
	add	DWORD PTR _pos, eax
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	0
	push	edx
	call	_exprint_recur

; 1503 :          strcat(pos,"]"); pos++;

	mov	edi, DWORD PTR _pos
	add	esp, 8
	dec	edi
	npad	4
$LL1270@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1270@exprint_re
	mov	ax, WORD PTR ??_C@_01LBDDMOBJ@?$FN?$AA@
	inc	DWORD PTR _pos
	mov	WORD PTR [edi], ax
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN478@exprint_re:

; 1504 :          break;
; 1505 : 
; 1506 :       case VIEW_TRANSFORM_SWAP_COLORS_NODE:
; 1507 :          strcat(pos,"view_transform_swap_colors["); pos += strlen(pos);

	dec	ecx
	npad	7
$LL1271@exprint_re:
	mov	al, BYTE PTR [ecx+1]
	inc	ecx
	test	al, al
	jne	SHORT $LL1271@exprint_re
	mov	eax, DWORD PTR _pos
	mov	edi, ecx
	mov	ecx, 7
	mov	esi, OFFSET ??_C@_0BM@CEMFOJOL@view_transform_swap_colors?$FL?$AA@
	rep movsd
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1272@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1272@exprint_re

; 1508 :          exprint_recur(node+node->left,PREC_ARG);

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	sub	eax, edx
	add	DWORD PTR _pos, eax
	push	0
	push	ecx
	call	_exprint_recur

; 1509 :          strcat(pos,"]"); pos++;

	mov	edi, DWORD PTR _pos
	add	esp, 8
	dec	edi
	npad	4
$LL1273@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1273@exprint_re
	mov	dx, WORD PTR ??_C@_01LBDDMOBJ@?$FN?$AA@
	inc	DWORD PTR _pos
	mov	WORD PTR [edi], dx
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN477@exprint_re:

; 1510 :          break;
; 1511 : 
; 1512 :       case VIEW_TRANSFORMS_NOP_NODE:
; 1513 :          strcat(pos,"view_transforms["); pos += strlen(pos);

	lea	esi, DWORD PTR [ecx-1]
	npad	4
$LL1274@exprint_re:
	mov	al, BYTE PTR [esi+1]
	inc	esi
	test	al, al
	jne	SHORT $LL1274@exprint_re
	mov	eax, DWORD PTR ??_C@_0BB@JMHAAMMM@view_transforms?$FL?$AA@
	mov	DWORD PTR [esi], eax
	mov	edx, DWORD PTR ??_C@_0BB@JMHAAMMM@view_transforms?$FL?$AA@+4
	mov	DWORD PTR [esi+4], edx
	mov	eax, DWORD PTR ??_C@_0BB@JMHAAMMM@view_transforms?$FL?$AA@+8
	mov	DWORD PTR [esi+8], eax
	mov	edx, DWORD PTR ??_C@_0BB@JMHAAMMM@view_transforms?$FL?$AA@+12
	mov	DWORD PTR [esi+12], edx
	mov	al, BYTE PTR ??_C@_0BB@JMHAAMMM@view_transforms?$FL?$AA@+16
	mov	BYTE PTR [esi+16], al
	mov	esi, ecx
	lea	edx, DWORD PTR [esi+1]
$LL1275@exprint_re:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL1275@exprint_re
	sub	esi, edx
	add	ecx, esi
	mov	DWORD PTR _pos, ecx

; 1514 :          exprint_recur(node+node->left,PREC_ARG);

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	push	0
	push	ecx
	call	_exprint_recur

; 1515 :          strcat(pos,"]["); pos += 2;

	mov	eax, DWORD PTR _pos
	add	esp, 8
	dec	eax
$LL1276@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1276@exprint_re
	mov	dx, WORD PTR ??_C@_02DNJFBPJB@?$FN?$FL?$AA@
	add	DWORD PTR _pos, 2
	mov	WORD PTR [eax], dx
	mov	cl, BYTE PTR ??_C@_02DNJFBPJB@?$FN?$FL?$AA@+2
	mov	BYTE PTR [eax+2], cl
$LN403@exprint_re:

; 1516 :          exprint_recur(node+node->right,PREC_ARG);

	mov	edx, DWORD PTR [ebx+8]
	push	0

; 1517 :          break;

	jmp	$LN1654@exprint_re
$LN476@exprint_re:

; 1518 : 
; 1519 :       case VIEW_TRANSFORMS_ELEMENT_NODE:
; 1520 :          exprint_recur(node+node->left,PREC_ARG);

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	0
	push	eax
	call	_exprint_recur

; 1521 :          strcat(pos,"]["); pos += 2;

	mov	eax, DWORD PTR _pos
	add	esp, 8
	dec	eax
	npad	5
$LL1277@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1277@exprint_re
	mov	cx, WORD PTR ??_C@_02DNJFBPJB@?$FN?$FL?$AA@
	add	DWORD PTR _pos, 2
	mov	WORD PTR [eax], cx
	mov	dl, BYTE PTR ??_C@_02DNJFBPJB@?$FN?$FL?$AA@+2
	mov	BYTE PTR [eax+2], dl

; 1522 :          exprint_recur(node+node->right,PREC_ARG);

	mov	eax, DWORD PTR [ebx+8]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	0
	push	eax
	call	_exprint_recur

; 1523 :          *(pos++) = ']'; *pos = 0;

	mov	eax, DWORD PTR _pos
	add	esp, 8
	pop	edi
	mov	BYTE PTR [eax], 93			; 0000005dH
	inc	eax
	pop	esi
	mov	DWORD PTR _pos, eax
	mov	BYTE PTR [eax], 0
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN475@exprint_re:

; 1524 :          break;
; 1525 : 
; 1526 :     case IS_DEFINED_NODE:
; 1527 :          sprintf(pos,"is_defined(");

	push	OFFSET ??_C@_0M@HIGONMEP@is_defined?$CI?$AA@
	push	ecx
	call	_sprintf

; 1528 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1278@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1278@exprint_re

; 1529 :          exprint_recur(node+node->left,PREC_ARG);

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	sub	eax, edx
	add	DWORD PTR _pos, eax
	push	0
	add	ecx, ebx
	push	ecx
$LN1666@exprint_re:
	call	_exprint_recur
	add	esp, 8
$LN1665@exprint_re:

; 1530 :          *(pos++) = ')'; *pos = 0;

	mov	eax, DWORD PTR _pos
	pop	edi
	mov	BYTE PTR [eax], 41			; 00000029H
	inc	eax
	pop	esi
	mov	DWORD PTR _pos, eax
	mov	BYTE PTR [eax], 0
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN474@exprint_re:

; 1531 :          break;
; 1532 : 
; 1533 :     case DUMP_NODE:
; 1534 :          sprintf(pos,"dump ");

	push	OFFSET ??_C@_05OEFDBPID@dump?5?$AA@
	push	ecx
	call	_sprintf

; 1535 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL1279@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1279@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1536 :          if ( node->left )

	mov	eax, DWORD PTR [ebx+4]
	test	eax, eax
	je	$LN730@exprint_re

; 1537 :          exprint_recur(node+node->left,PREC_ASSIGN);

	imul	eax, 168				; 000000a8H
	push	10					; 0000000aH
	add	eax, ebx
	push	eax
	jmp	$LN1652@exprint_re
$LN472@exprint_re:

; 1538 :          break;
; 1539 : 
; 1540 :     case SET_COLORMAP_NODE:
; 1541 :          sprintf(pos,"colormap := "); 

	push	OFFSET ??_C@_0N@DHGONGJP@colormap?5?3?$DN?5?$AA@
	push	ecx
	call	_sprintf

; 1542 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1280@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1280@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1543 :          exprint_recur(node+node->left,PREC_ASSIGN);

	push	10					; 0000000aH

; 1544 :          break;

	jmp	$LN1653@exprint_re
$LN471@exprint_re:

; 1545 : 
; 1546 :       case SHOW_VOL_NODE: sprintf(pos,"show_vol "); pos+=strlen(pos); break; 

	push	OFFSET ??_C@_09PKPCIIOC@show_vol?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1281@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1281@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN470@exprint_re:

; 1547 :       case CHECK_NODE:sprintf(pos,"check "); pos+=strlen(pos); break; 

	push	OFFSET ??_C@_06JFCNFLHN@check?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1282@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1282@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN469@exprint_re:

; 1548 :       case LONG_JIGGLE_NODE: sprintf(pos,"long_jiggle "); pos+=strlen(pos); break;

	push	OFFSET ??_C@_0N@GJPIEBBJ@long_jiggle?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1283@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1283@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN468@exprint_re:

; 1549 :       case RAW_VERAVG_NODE:sprintf(pos,"rawv "); pos+=strlen(pos); break;

	push	OFFSET ??_C@_05JPJFAEAO@rawv?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1284@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1284@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN467@exprint_re:

; 1550 :       case STABILITY_TEST_NODE:sprintf(pos,"stability_test "); pos+=strlen(pos); break; 

	push	OFFSET ??_C@_0BA@GBCKKNJC@stability_test?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1285@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1285@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN466@exprint_re:

; 1551 :       case UTEST_NODE: sprintf(pos,"utest "); pos+=strlen(pos); break;

	push	OFFSET ??_C@_06KCFEIDLL@utest?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1286@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1286@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN465@exprint_re:

; 1552 :       case GO_NODE: sprintf(pos,"g "); pos+=strlen(pos); break;

	push	OFFSET ??_C@_02NIKCNPOK@g?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1287@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1287@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN464@exprint_re:

; 1553 :       case SHELL_NODE: sprintf(pos,"shell "); pos+=strlen(pos); break;

	push	OFFSET ??_C@_06KPNPMBGA@shell?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1288@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1288@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN463@exprint_re:

; 1554 :       case ALICE_NODE:   sprintf(pos,"alice "); pos+=strlen(pos); break; 

	push	OFFSET ??_C@_06FGENMIEJ@alice?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1289@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1289@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN462@exprint_re:

; 1555 :       case RECALC_NODE: sprintf(pos,"recalc "); pos+=strlen(pos); break;

	push	OFFSET ??_C@_07CJPBOPFA@recalc?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1290@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1290@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN461@exprint_re:

; 1556 :       case COUNTS_NODE: sprintf(pos,"counts "); pos+=strlen(pos); break;

	push	OFFSET ??_C@_07ODMECLPM@counts?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1291@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1291@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN460@exprint_re:

; 1557 :       case RAWEST_VERAVG_NODE:sprintf(pos,"rawestv "); pos+=strlen(pos); break;

	push	OFFSET ??_C@_08DFMDENPP@rawestv?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1292@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1292@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN459@exprint_re:

; 1558 :       case EXTRAPOLATE_NODE:sprintf(pos,"extrapolate "); pos+=strlen(pos); break; 

	push	OFFSET ??_C@_0N@DEBOAOL@extrapolate?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1293@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1293@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN458@exprint_re:

; 1559 :       case LINEAR_NODE: sprintf(pos,"linear "); pos+=strlen(pos); break;

	push	OFFSET ??_C@_07CBPAACLJ@linear?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1294@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1294@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN457@exprint_re:

; 1560 :       case QUADRATIC_NODE:sprintf(pos,"quadratic "); pos+=strlen(pos); break; 

	push	OFFSET ??_C@_0L@IJDLAEPK@quadratic?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1295@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1295@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN456@exprint_re:

; 1561 :       case REBODY_NODE:sprintf(pos,"rebody "); pos+=strlen(pos); break;

	push	OFFSET ??_C@_07IJJIIMNN@rebody?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1296@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1296@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN455@exprint_re:

; 1562 :       case HESSIAN_NODE: sprintf(pos,"hessian "); pos+=strlen(pos); break;

	push	OFFSET ??_C@_08PGAFJEDJ@hessian?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1297@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1297@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN454@exprint_re:

; 1563 :       case SHOWQ_NODE: sprintf(pos,"simplex_to_fe"); pos+=strlen(pos); break;

	push	OFFSET ??_C@_0O@ECJLFEKE@simplex_to_fe?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1298@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1298@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN453@exprint_re:

; 1564 :       case CLOSE_SHOW_NODE: sprintf(pos,"showq "); pos+=strlen(pos); break;

	push	OFFSET ??_C@_06HGIJDJHM@showq?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1299@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1299@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN452@exprint_re:

; 1565 :       case HESSIAN_MENU_NODE:sprintf(pos,"hessian_menu "); pos+=strlen(pos); break;

	push	OFFSET ??_C@_0O@DJOBGCIG@hessian_menu?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1300@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1300@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN451@exprint_re:

; 1566 :       case DIRICHLET_NODE: sprintf(pos,"dirichlet "); pos+=strlen(pos); break;

	push	OFFSET ??_C@_0L@IAMJHGMM@dirichlet?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1301@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1301@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN450@exprint_re:

; 1567 :       case SOBOLEV_NODE: sprintf(pos,"sobolev "); pos+=strlen(pos); break;

	push	OFFSET ??_C@_08KJFKOLCI@sobolev?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1302@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1302@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN449@exprint_re:

; 1568 :       case REORDER_STORAGE_NODE:sprintf(pos,"reorder_storage "); pos+=strlen(pos); break;

	push	OFFSET ??_C@_0BB@ELMGCAEE@reorder_storage?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1303@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1303@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN448@exprint_re:

; 1569 :       case DIRICHLET_SEEK_NODE: sprintf(pos,"dirichlet_seek "); pos+=strlen(pos); break;

	push	OFFSET ??_C@_0BA@NMPGOPNM@dirichlet_seek?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1304@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1304@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN447@exprint_re:

; 1570 :       case SOBOLEV_SEEK_NODE: sprintf(pos,"sobolev_seek "); pos+=strlen(pos); break;

	push	OFFSET ??_C@_0O@PFJLCOPI@sobolev_seek?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1305@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1305@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN446@exprint_re:

; 1571 :       case CONVERT_TO_QUANTS_NODE:sprintf(pos,"convert_to_quantities "); pos+=strlen(pos); break;

	push	OFFSET ??_C@_0BH@EOIPALJK@convert_to_quantities?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1306@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1306@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN445@exprint_re:

; 1572 :       case RENUMBER_ALL_NODE: sprintf(pos,"renumber_all "); pos+=strlen(pos); break;

	push	OFFSET ??_C@_0O@DBMMCKIH@renumber_all?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1307@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1307@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN444@exprint_re:

; 1573 :       case DUMP_MEMLIST_NODE: sprintf(pos,"dump_memlist "); pos+=strlen(pos); break;

	push	OFFSET ??_C@_0O@JHIKHPAF@dump_memlist?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1308@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1308@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN443@exprint_re:

; 1574 :       case FREE_DISCARDS_NODE:sprintf(pos,"free_discards "); pos+=strlen(pos); break;

	push	OFFSET ??_C@_0P@IMACOPAH@free_discards?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1309@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1309@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN442@exprint_re:

; 1575 :       case REPARTITION_NODE: sprintf(pos,"repartition "); pos+=strlen(pos); break;

	push	OFFSET ??_C@_0N@CKNFECO@repartition?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1310@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1310@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN441@exprint_re:

; 1576 :       case SUBCOMMAND_NODE: sprintf(pos,"subcommand "); pos+=strlen(pos); break;

	push	OFFSET ??_C@_0M@BKEGOHCM@subcommand?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1311@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1311@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN439@exprint_re:

; 1578 :       case DETORUS_NODE:sprintf(pos,"detorus "); pos+=strlen(pos); break;

	push	OFFSET ??_C@_08HNDHMNDL@detorus?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1312@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1312@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN437@exprint_re:

; 1580 :       case SIMPLEX_TO_FE_NODE: sprintf(pos,"simplex_to_fe"); pos+=strlen(pos); break;

	push	OFFSET ??_C@_0O@ECJLFEKE@simplex_to_fe?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1313@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1313@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN436@exprint_re:

; 1581 :              
; 1582 :       case BURCHARD_NODE:
; 1583 :          sprintf(pos,"burchard %d ",node->op1.maxsteps); 

	mov	eax, DWORD PTR [ebx+32]
	push	eax
	push	OFFSET ??_C@_0N@CBEMEMEM@burchard?5?$CFd?5?$AA@
	push	ecx
	call	_sprintf

; 1584 :          pos+=strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL1314@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1314@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN422@exprint_re:

; 1625 :          break;
; 1626 : 
; 1627 :       case ARGLIST_NODE:
; 1628 :        { struct global *g;
; 1629 :          if ( node->op1.name_id == 0 ) break; /* empty list */

	mov	eax, DWORD PTR [ebx+32]
	test	eax, eax
	je	$LN730@exprint_re

; 1630 :          g = globals(node->op1.name_id);

	mov	edx, eax
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN865@exprint_re
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN867@exprint_re
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [esi]
	mov	esi, eax
	jmp	SHORT $LN866@exprint_re
$LN867@exprint_re:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN865@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	esi, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN866@exprint_re
$LN865@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	esi, DWORD PTR [eax+edx]
$LN866@exprint_re:

; 1631 :          if ( node->left )

	mov	eax, DWORD PTR [ebx+4]
	test	eax, eax
	je	SHORT $LN420@exprint_re

; 1632 :          { exprint_recur(node+node->left,PREC_ARG); /* arglist */

	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	0
	push	eax
	call	_exprint_recur

; 1633 :            strcat(pos,","); pos++;

	mov	ecx, DWORD PTR _pos
	add	esp, 8
	lea	edi, DWORD PTR [ecx-1]
$LL1315@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1315@exprint_re
	mov	ax, WORD PTR ??_C@_01IHBHIGKO@?0?$AA@
	inc	ecx
	mov	WORD PTR [edi], ax
	mov	DWORD PTR _pos, ecx
$LN420@exprint_re:

; 1634 :          }
; 1635 :          sprintf(pos,"%s %s",datatype_name[node->op3.argtype],g->name);

	mov	edx, DWORD PTR [ebx+140]
	mov	eax, DWORD PTR _datatype_name[edx*4]
	push	esi
	push	eax
	push	OFFSET ??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@
	push	ecx
	call	_sprintf

; 1636 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
$LL1316@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1316@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN419@exprint_re:

; 1637 :          break;
; 1638 :        }
; 1639 : 
; 1640 :       case FUNCTION_CALL_NODE:
; 1641 :        { struct global *g = globals(node->op1.name_id);

	mov	eax, DWORD PTR [ebx+32]
	mov	edx, eax
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN871@exprint_re
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN873@exprint_re
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [esi]
	jmp	SHORT $LN872@exprint_re
$LN873@exprint_re:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN871@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN872@exprint_re
$LN871@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+edx]
$LN872@exprint_re:

; 1642 :          sprintf(pos,"%s(",g->name);

	push	eax
	push	OFFSET ??_C@_03ECLNAHEM@?$CFs?$CI?$AA@
	push	ecx
	call	_sprintf

; 1643 :          pos += strlen(pos);  

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1317@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1317@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1644 :          if ( node->left )

	mov	eax, DWORD PTR [ebx+4]
	test	eax, eax
	je	SHORT $LN418@exprint_re

; 1645 :            exprint_recur(node+node->left,PREC_ARG); /* arglist */

	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	0
	push	eax
	call	_exprint_recur
	add	esp, 8
$LN418@exprint_re:

; 1646 :          strcat(pos,")"); pos++;

	mov	edi, DWORD PTR _pos
	dec	edi
$LL1318@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1318@exprint_re
	mov	ax, WORD PTR ??_C@_01PKGAHCOL@?$CJ?$AA@
	inc	DWORD PTR _pos
	mov	WORD PTR [edi], ax
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN413@exprint_re:

; 1647 :          break;
; 1648 :        }
; 1649 : 
; 1650 :       case FUNCTION_CALL_RETURN_NODE:
; 1651 :          exprint_recur(node+node->left,prec_parent); /* FUNCTION_CALL_ */
; 1652 :          break;
; 1653 : 
; 1654 :       case FUNCTION_START_NODE: break;
; 1655 :       case FUNCTION_DEF_START_NODE: break;
; 1656 :       case FUNCTION_PROTO_START_NODE: break;
; 1657 : 
; 1658 :       case FUNCTION_HEAD_NODE:
; 1659 :          exprint_recur(node+node->right,prec_parent); /* arglist */

	mov	ecx, DWORD PTR [ebx+8]
	mov	eax, DWORD PTR _prec_parent$[ebp]
	imul	ecx, 168				; 000000a8H
	push	eax
	add	ecx, ebx
	push	ecx
	jmp	$LN1652@exprint_re
$LN409@exprint_re:

; 1677 :        }
; 1678 :       case PROCEDURE_CALL_NODE:
; 1679 :          sprintf(pos,"%s(",globals(node->op1.name_id)->name);

	mov	eax, DWORD PTR [ebx+32]
	mov	edx, eax
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN883@exprint_re
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN885@exprint_re
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [esi]
	jmp	SHORT $LN884@exprint_re
$LN885@exprint_re:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN883@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN884@exprint_re
$LN883@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+edx]
$LN884@exprint_re:
	push	eax
	push	OFFSET ??_C@_03ECLNAHEM@?$CFs?$CI?$AA@
	push	ecx
	call	_sprintf

; 1680 :          pos += strlen(pos); 

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1319@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1319@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1681 :          if ( node->left ) 

	mov	eax, DWORD PTR [ebx+4]
	test	eax, eax
	je	SHORT $LN408@exprint_re

; 1682 :             exprint_recur(node+node->left,prec_parent); /* arglist */

	mov	ecx, DWORD PTR _prec_parent$[ebp]
	imul	eax, 168				; 000000a8H
	push	ecx
	add	eax, ebx
	push	eax
	call	_exprint_recur
	add	esp, 8
$LN408@exprint_re:

; 1683 :          strcat(pos,")"); pos++;

	mov	edi, DWORD PTR _pos
	dec	edi
$LL1320@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1320@exprint_re
	mov	dx, WORD PTR ??_C@_01PKGAHCOL@?$CJ?$AA@
	inc	DWORD PTR _pos
	mov	WORD PTR [edi], dx
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN399@exprint_re:

; 1710 :          break;
; 1711 :        }
; 1712 : 
; 1713 :       case DEFINE_IDENT_NODE:
; 1714 :          sprintf(pos,"define %s %s",globals(node->op1.name_id)->name,
; 1715 :               datatype_name[node->op2.valtype]);

	mov	eax, DWORD PTR [ebx+32]
	mov	edx, eax
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN895@exprint_re
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN897@exprint_re
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [esi]
	jmp	SHORT $LN896@exprint_re
$LN897@exprint_re:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN895@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN896@exprint_re
$LN895@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+edx]
$LN896@exprint_re:
	mov	edx, DWORD PTR [ebx+136]
	mov	edx, DWORD PTR _datatype_name[edx*4]
	push	edx
	push	eax
	push	OFFSET ??_C@_0N@KLABKDID@define?5?$CFs?5?$CFs?$AA@
	push	ecx
	call	_sprintf

; 1716 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	7
$LL1321@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1321@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN398@exprint_re:

; 1717 :          break;
; 1718 : 
; 1719 :     case SET_DELTA_NODE:
; 1720 :           sprintf(pos,"%s.pdelta",globals(node->op1.name_id)->name);

	mov	eax, DWORD PTR [ebx+32]
	mov	edx, eax
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN901@exprint_re
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN903@exprint_re
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [esi]
	jmp	SHORT $LN902@exprint_re
$LN903@exprint_re:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN901@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN902@exprint_re
$LN901@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+edx]
$LN902@exprint_re:
	push	eax
	push	OFFSET ??_C@_09OAOCGHOC@?$CFs?4pdelta?$AA@
	push	ecx
	call	_sprintf

; 1721 :           pos += strlen(pos);

	mov	esi, DWORD PTR _pos
	mov	eax, esi
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1322@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1322@exprint_re
	sub	eax, edx
	add	esi, eax

; 1722 :           switch ( node->op2.assigntype )

	mov	eax, DWORD PTR [ebx+136]
	add	eax, -30001				; ffff8acfH
	mov	DWORD PTR _pos, esi
	cmp	eax, 4
	ja	SHORT $LN396@exprint_re
	jmp	DWORD PTR $LN1695@exprint_re[eax*4]
$LN395@exprint_re:

; 1723 :           { case ASSIGN_OP: sprintf(pos," := "); break;

	push	OFFSET ??_C@_04NOLNGNEC@?5?3?$DN?5?$AA@
	jmp	SHORT $LN1642@exprint_re
$LN394@exprint_re:

; 1724 :             case PLUSASSIGN_OP: sprintf(pos," += "); break;

	push	OFFSET ??_C@_04DGBIFNLI@?5?$CL?$DN?5?$AA@
	jmp	SHORT $LN1642@exprint_re
$LN393@exprint_re:

; 1725 :             case SUBASSIGN_OP: sprintf(pos," -= "); break;

	push	OFFSET ??_C@_04BDHDACGE@?5?9?$DN?5?$AA@
	jmp	SHORT $LN1642@exprint_re
$LN392@exprint_re:

; 1726 :             case MULTASSIGN_OP: sprintf(pos," *= "); break;

	push	OFFSET ??_C@_04IOKEDKNN@?5?$CK?$DN?5?$AA@
	jmp	SHORT $LN1642@exprint_re
$LN391@exprint_re:

; 1727 :             case DIVASSIGN_OP: sprintf(pos," /= "); break;

	push	OFFSET ??_C@_04LJHKMKOP@?5?1?$DN?5?$AA@
$LN1642@exprint_re:
	push	esi
	call	_sprintf
	mov	esi, DWORD PTR _pos
	add	esp, 8
$LN396@exprint_re:

; 1728 :           } 
; 1729 :           pos += strlen(pos);

	mov	eax, esi
	lea	edx, DWORD PTR [eax+1]
$LL1323@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1323@exprint_re
	sub	eax, edx
	add	esi, eax
	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	push	10					; 0000000aH
	add	eax, ebx
	mov	DWORD PTR _pos, esi
	push	eax
	jmp	$LN1652@exprint_re
$LN390@exprint_re:

; 1730 :           exprint_recur(node+node->left,PREC_ASSIGN);
; 1731 :           break;
; 1732 : 
; 1733 :     case SET_PARAM_SCALE_NODE:
; 1734 :           sprintf(pos,"%s.pscale",globals(node->op1.name_id)->name);

	mov	eax, DWORD PTR [ebx+32]
	mov	edx, eax
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN907@exprint_re
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN909@exprint_re
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [esi]
	jmp	SHORT $LN908@exprint_re
$LN909@exprint_re:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN907@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN908@exprint_re
$LN907@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+edx]
$LN908@exprint_re:
	push	eax
	push	OFFSET ??_C@_09PFECEPHA@?$CFs?4pscale?$AA@
	push	ecx
	call	_sprintf

; 1735 :           pos += strlen(pos);

	mov	esi, DWORD PTR _pos
	mov	eax, esi
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1324@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1324@exprint_re
	sub	eax, edx
	add	esi, eax

; 1736 :           switch ( node->op2.assigntype )

	mov	eax, DWORD PTR [ebx+136]
	add	eax, -30001				; ffff8acfH
	mov	DWORD PTR _pos, esi
	cmp	eax, 4
	ja	SHORT $LN388@exprint_re
	jmp	DWORD PTR $LN1696@exprint_re[eax*4]
$LN387@exprint_re:

; 1737 :           { case ASSIGN_OP: sprintf(pos," := "); break;

	push	OFFSET ??_C@_04NOLNGNEC@?5?3?$DN?5?$AA@
	jmp	SHORT $LN1643@exprint_re
$LN386@exprint_re:

; 1738 :             case PLUSASSIGN_OP: sprintf(pos," += "); break;

	push	OFFSET ??_C@_04DGBIFNLI@?5?$CL?$DN?5?$AA@
	jmp	SHORT $LN1643@exprint_re
$LN385@exprint_re:

; 1739 :             case SUBASSIGN_OP: sprintf(pos," -= "); break;

	push	OFFSET ??_C@_04BDHDACGE@?5?9?$DN?5?$AA@
	jmp	SHORT $LN1643@exprint_re
$LN384@exprint_re:

; 1740 :             case MULTASSIGN_OP: sprintf(pos," *= "); break;

	push	OFFSET ??_C@_04IOKEDKNN@?5?$CK?$DN?5?$AA@
	jmp	SHORT $LN1643@exprint_re
$LN383@exprint_re:

; 1741 :             case DIVASSIGN_OP: sprintf(pos," /= "); break;

	push	OFFSET ??_C@_04LJHKMKOP@?5?1?$DN?5?$AA@
$LN1643@exprint_re:
	push	esi
	call	_sprintf
	mov	esi, DWORD PTR _pos
	add	esp, 8
$LN388@exprint_re:

; 1742 :           } 
; 1743 :           pos += strlen(pos);

	mov	eax, esi
	lea	edx, DWORD PTR [eax+1]
$LL1325@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1325@exprint_re
	sub	eax, edx
	add	esi, eax
	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	push	10					; 0000000aH
	add	eax, ebx
	mov	DWORD PTR _pos, esi
	push	eax
	jmp	$LN1652@exprint_re
$LN382@exprint_re:

; 1744 :           exprint_recur(node+node->left,PREC_ASSIGN);
; 1745 :           break;
; 1746 : 
; 1747 :     case SET_ON_ASSIGN_CALL_NODE:
; 1748 :       { struct global *g = globals(node->op1.name_id);

	mov	ebx, DWORD PTR [ebx+32]
	mov	edi, DWORD PTR _dymem
	mov	edx, DWORD PTR _web+5652
	mov	eax, ebx
	and	eax, -16777216				; ff000000H
	cmp	eax, 268435456				; 10000000H
	je	SHORT $LN913@exprint_re
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN915@exprint_re
	and	ebx, 16777215				; 00ffffffH
	imul	ebx, 224				; 000000e0H
	add	ebx, DWORD PTR [esi]
	jmp	SHORT $LN914@exprint_re
$LN915@exprint_re:
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN913@exprint_re
	mov	eax, DWORD PTR _web+5656
	and	ebx, 16777215				; 00ffffffH
	mov	ebx, DWORD PTR [eax+ebx*4]
	jmp	SHORT $LN914@exprint_re
$LN913@exprint_re:
	and	ebx, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [edx+ebx*4]
	mov	ebx, DWORD PTR [edx+edi]
$LN914@exprint_re:

; 1749 :         sprintf(pos,"%s.on_assign_call := %s",g->name,
; 1750 :              globals(g->attr.varstuff.on_assign_call)->name);

	mov	eax, DWORD PTR [ebx+188]
	mov	edx, eax
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN919@exprint_re
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN921@exprint_re
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [esi]
	jmp	SHORT $LN920@exprint_re
$LN921@exprint_re:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN919@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN920@exprint_re
$LN919@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+edi]
$LN920@exprint_re:
	push	eax
	push	ebx
	push	OFFSET ??_C@_0BI@LALPNJNO@?$CFs?4on_assign_call?5?3?$DN?5?$CFs?$AA@
	push	ecx
	call	_sprintf

; 1751 :         pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL1326@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1326@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN381@exprint_re:

; 1752 :         break;
; 1753 :       }
; 1754 : 
; 1755 :       case SET_GLOBAL_NODE: case SET_SGLOBAL_NODE:
; 1756 :          { struct global *g = globals(node->op1.name_id);

	mov	eax, DWORD PTR [ebx+32]
	mov	edx, eax
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN925@exprint_re
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN927@exprint_re
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [esi]
	jmp	SHORT $LN926@exprint_re
$LN927@exprint_re:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN925@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN926@exprint_re
$LN925@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+edx]
$LN926@exprint_re:

; 1757 :            if ( g->flags & PERMANENT )

	test	BYTE PTR [eax+192], 16			; 00000010H

; 1758 :            sprintf(pos,"%s ::= ",g->name);

	push	eax
	je	SHORT $LN380@exprint_re
	push	OFFSET ??_C@_07DMFHGJKH@?$CFs?5?3?3?$DN?5?$AA@
	jmp	SHORT $LN1644@exprint_re
$LN380@exprint_re:

; 1759 :            else sprintf(pos,"%s := ",g->name);

	push	OFFSET ??_C@_06JFMACMHF@?$CFs?5?3?$DN?5?$AA@
$LN1644@exprint_re:
	push	ecx
	call	_sprintf

; 1760 :            pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1327@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1327@exprint_re

; 1761 :            exprint_recur(node+node->left,PREC_ASSIGN);
; 1762 :            break;

	jmp	$LN1679@exprint_re
$LN378@exprint_re:

; 1763 :          }
; 1764 :       case SET_PERM_GLOBAL_NODE: case SET_PERM_SGLOBAL_NODE:
; 1765 :          sprintf(pos,"%s ::= ",globals(node->op1.name_id)->name);

	mov	eax, DWORD PTR [ebx+32]
	mov	edx, eax
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN931@exprint_re
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN933@exprint_re
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [esi]
	jmp	SHORT $LN932@exprint_re
$LN933@exprint_re:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN931@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN932@exprint_re
$LN931@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+edx]
$LN932@exprint_re:
	push	eax
	push	OFFSET ??_C@_07DMFHGJKH@?$CFs?5?3?3?$DN?5?$AA@
	push	ecx
	call	_sprintf

; 1766 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1328@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1328@exprint_re

; 1767 :          exprint_recur(node+node->left,PREC_ASSIGN);
; 1768 :          break;

	jmp	$LN1679@exprint_re
$LN377@exprint_re:

; 1769 : 
; 1770 :       case SET_NO_DUMP_NODE:
; 1771 :          if ( node->op2.intval )

	cmp	DWORD PTR [ebx+136], 0

; 1772 :            sprintf(pos,"%s.no_dump on ",globals(node->op1.name_id)->name);

	mov	ebx, DWORD PTR [ebx+32]
	mov	eax, ebx
	je	SHORT $LN376@exprint_re
	and	eax, -16777216				; ff000000H
	cmp	eax, 268435456				; 10000000H
	je	SHORT $LN937@exprint_re
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN939@exprint_re
	and	ebx, 16777215				; 00ffffffH
	imul	ebx, 224				; 000000e0H
	add	ebx, DWORD PTR [esi]
	push	ebx
	push	OFFSET ??_C@_0P@HHJNMIJK@?$CFs?4no_dump?5on?5?$AA@

; 1773 :          else 

	jmp	$LN1645@exprint_re
$LN939@exprint_re:

; 1772 :            sprintf(pos,"%s.no_dump on ",globals(node->op1.name_id)->name);

	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN937@exprint_re
	mov	eax, DWORD PTR _web+5656
	and	ebx, 16777215				; 00ffffffH
	mov	ebx, DWORD PTR [eax+ebx*4]
	push	ebx
	push	OFFSET ??_C@_0P@HHJNMIJK@?$CFs?4no_dump?5on?5?$AA@

; 1773 :          else 

	jmp	$LN1645@exprint_re
$LN937@exprint_re:

; 1772 :            sprintf(pos,"%s.no_dump on ",globals(node->op1.name_id)->name);

	mov	edx, DWORD PTR _web+5652
	and	ebx, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR _dymem
	mov	ebx, DWORD PTR [eax+edx]
	push	ebx
	push	OFFSET ??_C@_0P@HHJNMIJK@?$CFs?4no_dump?5on?5?$AA@

; 1773 :          else 

	jmp	SHORT $LN1645@exprint_re
$LN376@exprint_re:

; 1774 :             sprintf(pos,"%s.no_dump off ",globals(node->op1.name_id)->name);

	and	eax, -16777216				; ff000000H
	cmp	eax, 268435456				; 10000000H
	je	SHORT $LN943@exprint_re
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN945@exprint_re
	and	ebx, 16777215				; 00ffffffH
	imul	ebx, 224				; 000000e0H
	add	ebx, DWORD PTR [esi]
	jmp	SHORT $LN944@exprint_re
$LN945@exprint_re:
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN943@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	ebx, 16777215				; 00ffffffH
	mov	ebx, DWORD PTR [edx+ebx*4]
	jmp	SHORT $LN944@exprint_re
$LN943@exprint_re:
	mov	eax, DWORD PTR _web+5652
	and	ebx, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR _dymem
	mov	ebx, DWORD PTR [edx+eax]
$LN944@exprint_re:
	push	ebx
	push	OFFSET ??_C@_0BA@DEIKBKKN@?$CFs?4no_dump?5off?5?$AA@
$LN1645@exprint_re:
	push	ecx
	call	_sprintf

; 1775 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1329@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1329@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN374@exprint_re:

; 1776 :          break;
; 1777 : 
; 1778 :       case PLUSASSIGN_NODE:
; 1779 :          sprintf(pos,"%s += ",globals(node->op1.name_id)->name);

	mov	eax, DWORD PTR [ebx+32]
	mov	edx, eax
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN949@exprint_re
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN951@exprint_re
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [esi]
	jmp	SHORT $LN950@exprint_re
$LN951@exprint_re:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN949@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN950@exprint_re
$LN949@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+edx]
$LN950@exprint_re:
	push	eax
	push	OFFSET ??_C@_06HNGFBMIP@?$CFs?5?$CL?$DN?5?$AA@
	push	ecx
	call	_sprintf

; 1780 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1330@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1330@exprint_re

; 1781 :          exprint_recur(node+node->left,PREC_ASSIGN);
; 1782 :          break;

	jmp	$LN1679@exprint_re
$LN373@exprint_re:

; 1783 : 
; 1784 :       case SUBASSIGN_NODE:
; 1785 :          sprintf(pos,"%s -= ",globals(node->op1.name_id)->name);

	mov	eax, DWORD PTR [ebx+32]
	mov	edx, eax
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN955@exprint_re
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN957@exprint_re
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [esi]
	jmp	SHORT $LN956@exprint_re
$LN957@exprint_re:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN955@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN956@exprint_re
$LN955@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+edx]
$LN956@exprint_re:
	push	eax
	push	OFFSET ??_C@_06FIAOEDFD@?$CFs?5?9?$DN?5?$AA@
	push	ecx
	call	_sprintf

; 1786 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1331@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1331@exprint_re

; 1787 :          exprint_recur(node+node->left,PREC_ASSIGN);
; 1788 :          break;

	jmp	$LN1679@exprint_re
$LN372@exprint_re:

; 1789 : 
; 1790 :       case MULTASSIGN_NODE:
; 1791 :          sprintf(pos,"%s *= ",globals(node->op1.name_id)->name);

	mov	eax, DWORD PTR [ebx+32]
	mov	edx, eax
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN961@exprint_re
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN963@exprint_re
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [esi]
	jmp	SHORT $LN962@exprint_re
$LN963@exprint_re:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN961@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN962@exprint_re
$LN961@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+edx]
$LN962@exprint_re:
	push	eax
	push	OFFSET ??_C@_06MFNJHLOK@?$CFs?5?$CK?$DN?5?$AA@
	push	ecx
	call	_sprintf

; 1792 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1332@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1332@exprint_re

; 1793 :          exprint_recur(node+node->left,PREC_ASSIGN);
; 1794 :          break;

	jmp	$LN1679@exprint_re
$LN371@exprint_re:

; 1795 : 
; 1796 :       case DIVASSIGN_NODE:
; 1797 :          sprintf(pos,"%s /= ",globals(node->op1.name_id)->name);

	mov	eax, DWORD PTR [ebx+32]
	mov	edx, eax
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN967@exprint_re
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN969@exprint_re
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [esi]
	jmp	SHORT $LN968@exprint_re
$LN969@exprint_re:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN967@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN968@exprint_re
$LN967@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+edx]
$LN968@exprint_re:
	push	eax
	push	OFFSET ??_C@_06PCAHILNI@?$CFs?5?1?$DN?5?$AA@
	push	ecx
	call	_sprintf

; 1798 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1333@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1333@exprint_re

; 1799 :          exprint_recur(node+node->left,PREC_ASSIGN);
; 1800 :          break;

	jmp	$LN1679@exprint_re
$LN370@exprint_re:

; 1801 : 
; 1802 :       case PRE_INCREMENT_NODE:
; 1803 :          sprintf(pos,"%s%s",node->op2.assigntype==PLUSPLUS_OP ? " ++" : " --",
; 1804 :             globals(node->op1.name_id)->name);

	mov	eax, DWORD PTR [ebx+32]
	mov	edx, eax
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN973@exprint_re
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN975@exprint_re
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [esi]
	jmp	SHORT $LN974@exprint_re
$LN975@exprint_re:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN973@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN974@exprint_re
$LN973@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+edx]
$LN974@exprint_re:
	cmp	DWORD PTR [ebx+136], 30006		; 00007536H
	mov	edx, OFFSET ??_C@_03DMOBNLLF@?5?$CL?$CL?$AA@
	je	SHORT $LN980@exprint_re
	mov	edx, OFFSET ??_C@_03GODGAAIB@?5?9?9?$AA@
$LN980@exprint_re:
	push	eax
	push	edx
	push	OFFSET ??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@
	push	ecx
	call	_sprintf

; 1805 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
$LL1334@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1334@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN369@exprint_re:

; 1806 :          break;
; 1807 : 
; 1808 :       case POST_INCREMENT_NODE:
; 1809 :          sprintf(pos,"%s%s",globals(node->op1.name_id)->name,
; 1810 :              node->op2.assigntype==PLUSPLUS_OP ? "++ " : "-- ");

	cmp	DWORD PTR [ebx+136], 30006		; 00007536H
	mov	edx, OFFSET ??_C@_03IBEIFHP@?$CL?$CL?5?$AA@
	je	SHORT $LN982@exprint_re
	mov	edx, OFFSET ??_C@_03CJPCKGBB@?9?9?5?$AA@
$LN982@exprint_re:
	mov	ebx, DWORD PTR [ebx+32]
	mov	eax, ebx
	and	eax, -16777216				; ff000000H
	cmp	eax, 268435456				; 10000000H
	je	SHORT $LN983@exprint_re
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN985@exprint_re
	and	ebx, 16777215				; 00ffffffH
	imul	ebx, 224				; 000000e0H
	add	ebx, DWORD PTR [esi]
	jmp	SHORT $LN984@exprint_re
$LN985@exprint_re:
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN983@exprint_re
	mov	eax, DWORD PTR _web+5656
	and	ebx, 16777215				; 00ffffffH
	mov	ebx, DWORD PTR [eax+ebx*4]
	jmp	SHORT $LN984@exprint_re
$LN983@exprint_re:
	mov	eax, DWORD PTR _web+5652
	mov	esi, DWORD PTR _dymem
	and	ebx, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [eax+ebx*4]
	mov	ebx, DWORD PTR [eax+esi]
$LN984@exprint_re:
	push	edx
	push	ebx
	push	OFFSET ??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@
	push	ecx
	call	_sprintf

; 1811 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
$LL1335@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1335@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN368@exprint_re:

; 1812 :          break;
; 1813 : 
; 1814 : 
; 1815 :       case SIZEOF_ATTR_NODE:
; 1816 :          sprintf(pos,"sizeof(%s)",
; 1817 :            EXTRAS(node->op2.eltype)[node->op1.extranum].name); 

	mov	edx, DWORD PTR [ebx+136]
	mov	eax, DWORD PTR [ebx+32]
	imul	edx, 112				; 00000070H
	mov	edx, DWORD PTR _web[edx+104]
	imul	eax, 240				; 000000f0H
	add	edx, eax
	add	edx, DWORD PTR _dymem
	push	edx
	push	OFFSET ??_C@_0L@PEDDBAKP@sizeof?$CI?$CFs?$CJ?$AA@
	push	ecx
	call	_sprintf

; 1818 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1336@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1336@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN367@exprint_re:

; 1819 :          break;
; 1820 : 
; 1821 :       case SIZEOF_ARRAY_NODE:
; 1822 :          sprintf(pos,"sizeof(%s)",globals(node->op1.name_id)->name);

	mov	ebx, DWORD PTR [ebx+32]
	mov	eax, ebx
	and	eax, -16777216				; ff000000H
	cmp	eax, 268435456				; 10000000H
	je	SHORT $LN989@exprint_re
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN991@exprint_re
	and	ebx, 16777215				; 00ffffffH
	imul	ebx, 224				; 000000e0H
	add	ebx, DWORD PTR [esi]
	jmp	SHORT $LN990@exprint_re
$LN991@exprint_re:
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN989@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	ebx, 16777215				; 00ffffffH
	mov	ebx, DWORD PTR [edx+ebx*4]
	jmp	SHORT $LN990@exprint_re
$LN989@exprint_re:
	mov	eax, DWORD PTR _web+5652
	and	ebx, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR _dymem
	mov	ebx, DWORD PTR [edx+eax]
$LN990@exprint_re:
	push	ebx
	push	OFFSET ??_C@_0L@PEDDBAKP@sizeof?$CI?$CFs?$CJ?$AA@
	push	ecx
	call	_sprintf

; 1823 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL1337@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1337@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN366@exprint_re:

; 1824 :          break;
; 1825 : 
; 1826 :       case SIZEOF_STRING_NODE:
; 1827 :          sprintf(pos,"sizeof(");

	push	OFFSET ??_C@_07CPAFJHCE@sizeof?$CI?$AA@
	push	ecx
	call	_sprintf

; 1828 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1338@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1338@exprint_re

; 1829 :          exprint_recur(node+node->left,prec_parent);

	mov	ecx, DWORD PTR _prec_parent$[ebp]
	sub	eax, edx
	mov	edx, DWORD PTR [ebx+4]
	add	DWORD PTR _pos, eax
	imul	edx, 168				; 000000a8H
	push	ecx
	add	edx, ebx
	push	edx
	call	_exprint_recur

; 1830 :          strcat(pos,")");

	mov	edi, DWORD PTR _pos
	add	esp, 8
	dec	edi
$LL1339@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1339@exprint_re
	mov	ax, WORD PTR ??_C@_01PKGAHCOL@?$CJ?$AA@

; 1831 :          pos++;

	inc	DWORD PTR _pos
	mov	WORD PTR [edi], ax
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN365@exprint_re:

; 1832 :          break;
; 1833 : 
; 1834 :       case LAGRANGE_NODE:
; 1835 :          sprintf(pos,"lagrange "); pos += strlen(pos);

	push	OFFSET ??_C@_09KFKMHJDA@lagrange?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1340@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1340@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax
$LN363@exprint_re:

; 1267 :          exprint_recur(node+node->left,prec_parent);

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H

; 1836 :          exprint_recur(node+node->left,PREC_ASSIGN);

	push	10					; 0000000aH
	add	ecx, ebx
	push	ecx
	jmp	$LN1652@exprint_re
$LN364@exprint_re:

; 1837 :          return;
; 1838 : 
; 1839 :       case LANCZOS_NODE: 
; 1840 :          sprintf(pos,"lanczos "); pos += strlen(pos);

	push	OFFSET ??_C@_08PJBNJOBI@lanczos?5?$AA@
	push	ecx
	call	_sprintf
	mov	esi, DWORD PTR _pos
	mov	eax, esi
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL1341@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1341@exprint_re
	sub	eax, edx
	add	esi, eax

; 1841 :          if ( node->right )

	cmp	DWORD PTR [ebx+8], 0
	mov	DWORD PTR _pos, esi
	je	SHORT $LN363@exprint_re

; 1842 :          { strcat(pos,"("); pos++;

	lea	edi, DWORD PTR [esi-1]
	npad	6
$LL1342@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1342@exprint_re
	mov	dx, WORD PTR ??_C@_01ODHLEDKK@?$CI?$AA@
	mov	WORD PTR [edi], dx

; 1843 :            exprint_recur(node+node->left,PREC_ARG);

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	0
	inc	esi
	push	eax
	mov	DWORD PTR _pos, esi
	call	_exprint_recur

; 1844 :            strcat(pos,","); pos++;

	mov	edi, DWORD PTR _pos
	add	esp, 8
	dec	edi
$LL1343@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1343@exprint_re
	mov	cx, WORD PTR ??_C@_01IHBHIGKO@?0?$AA@
	mov	WORD PTR [edi], cx

; 1845 :            exprint_recur(node+node->right,PREC_ARG);

	mov	edx, DWORD PTR [ebx+8]
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	0
	mov	esi, 1
	add	DWORD PTR _pos, esi
	push	edx
	call	_exprint_recur

; 1846 :            strcat(pos,")"); pos++;

	mov	edi, DWORD PTR _pos
	add	esp, 8
	dec	edi
$LL1344@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1344@exprint_re
	mov	ax, WORD PTR ??_C@_01PKGAHCOL@?$CJ?$AA@

; 2327 :          sprintf(pos,")"); pos++;

	add	DWORD PTR _pos, esi
	mov	WORD PTR [edi], ax
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN361@exprint_re:

; 1847 :          }
; 1848 :          else exprint_recur(node+node->left,PREC_ASSIGN);
; 1849 :          return;
; 1850 : 
; 1851 :        case EIGENPROBE_NODE: 
; 1852 :          sprintf(pos,"eigenprobe "); pos += strlen(pos);

	push	OFFSET ??_C@_0M@ELLGNMC@eigenprobe?5?$AA@
	push	ecx
	call	_sprintf
	mov	esi, DWORD PTR _pos
	mov	eax, esi
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1345@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1345@exprint_re
	sub	eax, edx
	add	esi, eax

; 1853 :          if ( node->right )

	cmp	DWORD PTR [ebx+8], 0
	mov	DWORD PTR _pos, esi
	je	$LN363@exprint_re

; 1854 :          { strcat(pos,"("); pos++;

	lea	edi, DWORD PTR [esi-1]
	npad	1
$LL1346@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1346@exprint_re
	mov	dx, WORD PTR ??_C@_01ODHLEDKK@?$CI?$AA@
	mov	WORD PTR [edi], dx

; 1855 :            exprint_recur(node+node->left,PREC_ARG);

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	0
	inc	esi
	push	eax
	mov	DWORD PTR _pos, esi
	call	_exprint_recur

; 1856 :            strcat(pos,","); pos++;

	mov	edi, DWORD PTR _pos
	add	esp, 8
	dec	edi
$LL1347@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1347@exprint_re
	mov	cx, WORD PTR ??_C@_01IHBHIGKO@?0?$AA@
	mov	WORD PTR [edi], cx

; 1857 :            exprint_recur(node+node->right,PREC_ARG);

	mov	edx, DWORD PTR [ebx+8]
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	0
	mov	esi, 1
	add	DWORD PTR _pos, esi
	push	edx
	call	_exprint_recur

; 1858 :            strcat(pos,")"); pos++;

	mov	edi, DWORD PTR _pos
	add	esp, 8
	dec	edi
$LL1348@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1348@exprint_re
	mov	ax, WORD PTR ??_C@_01PKGAHCOL@?$CJ?$AA@

; 2327 :          sprintf(pos,")"); pos++;

	add	DWORD PTR _pos, esi
	mov	WORD PTR [edi], ax
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN358@exprint_re:

; 1859 :          }
; 1860 :          else exprint_recur(node+node->left,PREC_ASSIGN);
; 1861 :          return;
; 1862 : 
; 1863 :       case RITZ_NODE:
; 1864 :          sprintf(pos,"ritz("); pos += strlen(pos);

	push	OFFSET ??_C@_05HMJDJDEN@ritz?$CI?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1349@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1349@exprint_re
	sub	eax, edx

; 1865 :          exprint_recur(node+node->left,PREC_ARG);

	mov	edx, DWORD PTR [ebx+4]
	add	DWORD PTR _pos, eax
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	0
	push	edx
	call	_exprint_recur

; 1866 :          strcat(pos,","); pos++;

	mov	edi, DWORD PTR _pos
	add	esp, 8
	dec	edi
	npad	4
$LL1350@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1350@exprint_re
	mov	ax, WORD PTR ??_C@_01IHBHIGKO@?0?$AA@
	mov	WORD PTR [edi], ax

; 1867 :          exprint_recur(node+node->right,PREC_ARG);

	mov	ecx, DWORD PTR [ebx+8]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	push	0
	mov	esi, 1
	add	DWORD PTR _pos, esi
	push	ecx
	call	_exprint_recur

; 1868 :          strcat(pos,")"); pos++;

	mov	edi, DWORD PTR _pos
	add	esp, 8
	dec	edi
	npad	7
$LL1351@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1351@exprint_re
	mov	dx, WORD PTR ??_C@_01PKGAHCOL@?$CJ?$AA@
	add	DWORD PTR _pos, esi
	mov	WORD PTR [edi], dx
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN357@exprint_re:

; 1869 :          return;
; 1870 : 
; 1871 :       case GET_TORUS_PERIODS_NODE:
; 1872 :          sprintf(pos,"torus_periods"); pos += strlen(pos);

	push	OFFSET ??_C@_0O@IMAKABFD@torus_periods?$AA@
	push	ecx
	call	_sprintf
	mov	esi, DWORD PTR _pos
	mov	eax, esi
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1352@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1352@exprint_re
	sub	eax, edx
	add	esi, eax

; 1873 :          strcat(pos++,"[");

	lea	eax, DWORD PTR [esi-1]
	inc	esi
	mov	DWORD PTR _pos, esi
$LL1353@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1353@exprint_re
	mov	edi, eax
	mov	ax, WORD PTR ??_C@_01OHGJGJJP@?$FL?$AA@
	mov	WORD PTR [edi], ax

; 1874 :          exprint_recur(node+node->left,PREC_ARG);

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	push	0
	push	ecx
	call	_exprint_recur

; 1875 :          strcat(pos,"]["); pos+=2;

	mov	eax, DWORD PTR _pos
	add	esp, 8
	dec	eax
$LL1354@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1354@exprint_re
	mov	dx, WORD PTR ??_C@_02DNJFBPJB@?$FN?$FL?$AA@
	add	DWORD PTR _pos, 2
	mov	WORD PTR [eax], dx
	mov	cl, BYTE PTR ??_C@_02DNJFBPJB@?$FN?$FL?$AA@+2
	mov	BYTE PTR [eax+2], cl

; 1876 :          exprint_recur(node+node->right,PREC_ARG);

	mov	edx, DWORD PTR [ebx+8]
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	0
	push	edx
	call	_exprint_recur

; 1877 :          strcat(pos++,"]");

	mov	ecx, DWORD PTR _pos
	add	esp, 8
	lea	eax, DWORD PTR [ecx-1]
	inc	ecx
	mov	DWORD PTR _pos, ecx
	npad	2
$LL1355@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1355@exprint_re
	mov	edi, eax
	mov	ax, WORD PTR ??_C@_01LBDDMOBJ@?$FN?$AA@
	mov	WORD PTR [edi], ax
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN356@exprint_re:

; 1878 :          return;
; 1879 : 
; 1880 :       case GET_INVERSE_PERIODS_NODE:
; 1881 :          sprintf(pos,"inverse_periods"); pos += strlen(pos);

	push	OFFSET ??_C@_0BA@ODEJHEGJ@inverse_periods?$AA@
	push	ecx
	call	_sprintf
	mov	esi, DWORD PTR _pos
	mov	eax, esi
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL1356@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1356@exprint_re
	sub	eax, edx
	add	esi, eax

; 1882 :          strcat(pos++,"[");

	lea	eax, DWORD PTR [esi-1]
	inc	esi
	mov	DWORD PTR _pos, esi
$LL1357@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1357@exprint_re
	mov	cx, WORD PTR ??_C@_01OHGJGJJP@?$FL?$AA@
	mov	edi, eax
	mov	WORD PTR [edi], cx

; 1883 :          exprint_recur(node+node->left,PREC_ARG);

	mov	edx, DWORD PTR [ebx+4]
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	0
	push	edx
	call	_exprint_recur

; 1884 :          strcat(pos,"]["); pos+=2;

	mov	eax, DWORD PTR _pos
	add	esp, 8
	dec	eax
$LL1358@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1358@exprint_re
	mov	cx, WORD PTR ??_C@_02DNJFBPJB@?$FN?$FL?$AA@
	add	DWORD PTR _pos, 2
	mov	WORD PTR [eax], cx
	mov	dl, BYTE PTR ??_C@_02DNJFBPJB@?$FN?$FL?$AA@+2
	mov	BYTE PTR [eax+2], dl

; 1885 :          exprint_recur(node+node->right,PREC_ARG);

	mov	eax, DWORD PTR [ebx+8]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	0
	push	eax
	call	_exprint_recur

; 1886 :          strcat(pos++,"]");

	mov	ecx, DWORD PTR _pos
	add	esp, 8
	lea	eax, DWORD PTR [ecx-1]
	inc	ecx
	mov	DWORD PTR _pos, ecx
	npad	3
$LL1359@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1359@exprint_re
	mov	cx, WORD PTR ??_C@_01LBDDMOBJ@?$FN?$AA@
	mov	edi, eax
	mov	WORD PTR [edi], cx
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN355@exprint_re:

; 1887 :          return;
; 1888 : 
; 1889 :       case HESSIAN_SADDLE_NODE:
; 1890 :          sprintf(pos,"saddle "); pos += strlen(pos);

	push	OFFSET ??_C@_07MAHMAIKH@saddle?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	5
$LL1360@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1360@exprint_re
$LN1689@exprint_re:
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1891 :          if ( node->left )

	mov	eax, DWORD PTR [ebx+4]
	test	eax, eax
	je	$LN730@exprint_re

; 1892 :            exprint_recur(node+node->left,PREC_ARG);

	imul	eax, 168				; 000000a8H
	push	0
	add	eax, ebx
	push	eax
	jmp	$LN1652@exprint_re
$LN353@exprint_re:

; 1893 :          return;
; 1894 :    
; 1895 :       case HESSIAN_SEEK_NODE:
; 1896 :          sprintf(pos,"hessian_seek "); pos += strlen(pos);

	push	OFFSET ??_C@_0O@MBIEAIBG@hessian_seek?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1361@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1361@exprint_re

; 1897 :          if ( node->left )
; 1898 :            exprint_recur(node+node->left,PREC_ARG);
; 1899 :          return;

	jmp	SHORT $LN1689@exprint_re
$LN351@exprint_re:

; 1900 : 
; 1901 :       case MOVE_NODE:
; 1902 :          sprintf(pos,"move "); pos += strlen(pos);

	push	OFFSET ??_C@_05HEPJHAGN@move?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	1
$LL1362@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1362@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax
$LN593@exprint_re:

; 1903 :          exprint_recur(node+node->left,PREC_ARG);

	push	0

; 1904 :          return;

	jmp	$LN1653@exprint_re
$LN350@exprint_re:

; 1905 : 
; 1906 :      case AREAWEED_NODE:
; 1907 :          sprintf(pos,"areaweed "); pos += strlen(pos);

	push	OFFSET ??_C@_09NIJIHPDB@areaweed?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1363@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1363@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax
	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H

; 1908 :          exprint_recur(node+node->left,PREC_ARG);

	push	0
	add	eax, ebx
	push	eax
	jmp	$LN1652@exprint_re
$LN349@exprint_re:

; 1909 :          return;
; 1910 : 
; 1911 :      case EDGEWEED_NODE:
; 1912 :         sprintf(pos,"edgeweed "); pos += strlen(pos);

	push	OFFSET ??_C@_09LIMDMHNO@edgeweed?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1364@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1364@exprint_re

; 1267 :          exprint_recur(node+node->left,prec_parent);

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H

; 1909 :          return;
; 1910 : 
; 1911 :      case EDGEWEED_NODE:
; 1912 :         sprintf(pos,"edgeweed "); pos += strlen(pos);

	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1913 :          exprint_recur(node+node->left,PREC_ARG);

	push	0
	add	ecx, ebx
	push	ecx
	jmp	$LN1652@exprint_re
$LN348@exprint_re:

; 1914 :          return;
; 1915 : 
; 1916 :       case METIS_NODE:
; 1917 :         sprintf(pos,"metis "); pos += strlen(pos);

	push	OFFSET ??_C@_06FJIEJPGA@metis?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1365@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1365@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1918 :          exprint_recur(node+node->left,PREC_ARG);

	push	0

; 1919 :          return;

	jmp	$LN1653@exprint_re
$LN347@exprint_re:

; 1920 : 
; 1921 :       case METIS_READJUST_NODE:
; 1922 :         sprintf(pos,"metis_readjust "); pos += strlen(pos);

	push	OFFSET ??_C@_0BA@DAJKOHFA@metis_readjust?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1366@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1366@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax
	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H

; 1923 :          exprint_recur(node+node->left,PREC_ARG);

	push	0
	add	eax, ebx
	push	eax
	jmp	$LN1652@exprint_re
$LN346@exprint_re:

; 1924 :          return;
; 1925 : 
; 1926 :       case KMETIS_NODE:
; 1927 :         sprintf(pos,"kmetis "); pos += strlen(pos);

	push	OFFSET ??_C@_07CMELCDJK@kmetis?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1367@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1367@exprint_re

; 1267 :          exprint_recur(node+node->left,prec_parent);

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H

; 1924 :          return;
; 1925 : 
; 1926 :       case KMETIS_NODE:
; 1927 :         sprintf(pos,"kmetis "); pos += strlen(pos);

	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1928 :          exprint_recur(node+node->left,PREC_ARG);

	push	0
	add	ecx, ebx
	push	ecx
	jmp	$LN1652@exprint_re
$LN345@exprint_re:

; 1929 :          return;
; 1930 : 
; 1931 :       case BODY_METIS_NODE:
; 1932 :         sprintf(pos,"body-metis "); pos += strlen(pos);

	push	OFFSET ??_C@_0M@FOAHLABL@body?9metis?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1368@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1368@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1933 :          exprint_recur(node+node->left,PREC_ARG);

	push	0

; 1934 :          return;

	jmp	$LN1653@exprint_re
$LN344@exprint_re:

; 1935 : 
; 1936 :       case NOTCH_NODE:
; 1937 :         sprintf(pos,"notch "); pos += strlen(pos);

	push	OFFSET ??_C@_06LGDJAKGO@notch?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1369@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1369@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax
	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H

; 1938 :          exprint_recur(node+node->left,PREC_ARG);

	push	0
	add	eax, ebx
	push	eax
	jmp	$LN1652@exprint_re
$LN343@exprint_re:

; 1939 :          return;
; 1940 : 
; 1941 :       case EDGEDIVIDE_NODE:
; 1942 :          sprintf(pos,"edge_divide "); pos += strlen(pos);

	push	OFFSET ??_C@_0N@EHMDFEMF@edge_divide?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1370@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1370@exprint_re

; 1267 :          exprint_recur(node+node->left,prec_parent);

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H

; 1939 :          return;
; 1940 : 
; 1941 :       case EDGEDIVIDE_NODE:
; 1942 :          sprintf(pos,"edge_divide "); pos += strlen(pos);

	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1943 :          exprint_recur(node+node->left,PREC_ARG);

	push	0
	add	ecx, ebx
	push	ecx
	jmp	$LN1652@exprint_re
$LN342@exprint_re:

; 1944 :          return;
; 1945 : 
; 1946 :       case OMETIS_NODE:
; 1947 :          sprintf(pos,"ometis "); pos += strlen(pos);

	push	OFFSET ??_C@_07KIABCNGA@ometis?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1371@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1371@exprint_re

; 1948 :          if ( node->left )
; 1949 :            exprint_recur(node+node->left,PREC_ARG);
; 1950 :          return;

	jmp	$LN1689@exprint_re
$LN340@exprint_re:

; 1951 : 
; 1952 :       case JIGGLE_NODE:
; 1953 :          strcat(pos,"j "); pos += 2;

	lea	esi, DWORD PTR [ecx-1]
	npad	1
$LL1372@exprint_re:
	mov	al, BYTE PTR [esi+1]
	inc	esi
	test	al, al
	jne	SHORT $LL1372@exprint_re
	mov	dx, WORD PTR ??_C@_02NAHKEMLJ@j?5?$AA@
	mov	WORD PTR [esi], dx
	mov	al, BYTE PTR ??_C@_02NAHKEMLJ@j?5?$AA@+2
	add	ecx, 2
	mov	DWORD PTR _pos, ecx
	mov	BYTE PTR [esi+2], al
	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H

; 1954 :          exprint_recur(node+node->left,PREC_ARG);

	push	0
	add	ecx, ebx
	push	ecx
	jmp	$LN1652@exprint_re
$LN339@exprint_re:

; 1955 :          return;
; 1956 : 
; 1957 :       case QUIT_NODE:
; 1958 :          strcat(pos,"exit "); pos += 5;

	lea	esi, DWORD PTR [ecx-1]
	npad	7
$LL1373@exprint_re:
	mov	al, BYTE PTR [esi+1]
	inc	esi
	test	al, al
	jne	SHORT $LL1373@exprint_re
	mov	edx, DWORD PTR ??_C@_05FPPEDHBM@exit?5?$AA@
	mov	DWORD PTR [esi], edx
	mov	ax, WORD PTR ??_C@_05FPPEDHBM@exit?5?$AA@+4
	add	ecx, 5
	mov	DWORD PTR _pos, ecx
	mov	WORD PTR [esi+4], ax
	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H

; 1959 :          exprint_recur(node+node->left,PREC_ARG);

	push	0
	add	ecx, ebx
	push	ecx
	jmp	$LN1652@exprint_re
$LN338@exprint_re:

; 1960 :          return;
; 1961 : 
; 1962 :       case LIST_PROCS_NODE:
; 1963 :          sprintf(pos,"list procedures "); pos+=strlen(pos);

	push	OFFSET ??_C@_0BB@FEIJOBAO@list?5procedures?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1374@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1374@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN337@exprint_re:

; 1964 :          break;
; 1965 :              
; 1966 :       case LIST_ATTRIBUTES_NODE:
; 1967 :          sprintf(pos,"list attributes "); pos+=strlen(pos);

	push	OFFSET ??_C@_0BB@PEELHDCG@list?5attributes?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1375@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1375@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN336@exprint_re:

; 1968 :          break;
; 1969 : 
; 1970 :       case LIST_QUANTITY_NODE:
; 1971 :          sprintf(pos,"list quantity %s",GEN_QUANT(node->op1.quant_id)->name);

	mov	edx, DWORD PTR [ebx+32]
	imul	edx, 368				; 00000170H
	add	edx, DWORD PTR _gen_quant_list
	push	edx
	push	OFFSET ??_C@_0BB@DBLGCJFN@list?5quantity?5?$CFs?$AA@
	push	ecx
	call	_sprintf

; 1972 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1376@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1376@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN335@exprint_re:

; 1973 :          break;
; 1974 : 
; 1975 :       case LIST_METHOD_INSTANCE_NODE:
; 1976 :          sprintf(pos,"list method_instance %s",
; 1977 :               METH_INSTANCE(node->op1.meth_id)->name);

	mov	eax, DWORD PTR [ebx+32]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list
	push	eax
	push	OFFSET ??_C@_0BI@HLLNDPKC@list?5method_instance?5?$CFs?$AA@
	push	ecx
	call	_sprintf

; 1978 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	5
$LL1377@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1377@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN334@exprint_re:

; 1979 :          break;
; 1980 :              
; 1981 :       case LIST_CONSTRAINT_NODE:
; 1982 :          {
; 1983 :            if ( node->op1.con_id > 0 )

	mov	eax, DWORD PTR [ebx+32]
	test	eax, eax
	jle	SHORT $LN333@exprint_re

; 1984 :            { sprintf(pos,"list constraint %s",
; 1985 :                 get_constraint(node->op1.con_id)->name);

	and	eax, 1073741823				; 3fffffffH
	imul	eax, 176				; 000000b0H
	add	eax, DWORD PTR _web+652
	push	eax
	push	OFFSET ??_C@_0BD@PNMIFIHL@list?5constraint?5?$CFs?$AA@
	push	ecx
	call	_sprintf

; 1986 :              pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	1
$LL1378@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1378@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN333@exprint_re:

; 1987 :            }
; 1988 :            else
; 1989 :            { sprintf(pos,"list constraint ");

	push	OFFSET ??_C@_0BB@OAEJJBFK@list?5constraint?5?$AA@
	push	ecx
	call	_sprintf

; 1990 :              pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1379@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1379@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax
$LN596@exprint_re:

; 1334 :          exprint_recur(node+node->left,PREC_ASSIGN);

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H

; 1991 :              exprint_recur(node+node->left,PREC_ARG);

	push	0
	add	eax, ebx
	push	eax
	jmp	$LN1652@exprint_re
$LN331@exprint_re:

; 1992 :            }
; 1993 :          }    
; 1994 :          break;
; 1995 : 
; 1996 :       case LIST_BOUNDARY_NODE:
; 1997 :          { 
; 1998 :            if ( node->op1.bdry_id > 0 )

	mov	eax, DWORD PTR [ebx+32]
	test	eax, eax
	jle	SHORT $LN330@exprint_re

; 1999 :            { sprintf(pos,"list constraint %s",
; 2000 :                 web.boundaries[node->op1.bdry_id].name);

	imul	eax, 136				; 00000088H
	add	eax, DWORD PTR _web+776
	push	eax
	push	OFFSET ??_C@_0BD@PNMIFIHL@list?5constraint?5?$CFs?$AA@
	push	ecx
	call	_sprintf

; 2001 :              pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1380@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1380@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN330@exprint_re:

; 2002 :            }
; 2003 :            else
; 2004 :            { sprintf(pos,"list boundary ");

	push	OFFSET ??_C@_0P@PKNGHLMP@list?5boundary?5?$AA@
	push	ecx
	call	_sprintf

; 2005 :              pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1381@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1381@exprint_re

; 2006 :              exprint_recur(node+node->left,PREC_ARG);

	push	0

; 2007 :            }
; 2008 :          }    
; 2009 :          break;

	jmp	$LN1690@exprint_re
$LN328@exprint_re:

; 2010 : 
; 2011 :       case TOPINFO_NODE:
; 2012 :          sprintf(pos,"list topinfo "); pos+=strlen(pos);

	push	OFFSET ??_C@_0O@NKCPFOBE@list?5topinfo?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1382@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1382@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN327@exprint_re:

; 2013 :          break;
; 2014 :              
; 2015 :       case BOTTOMINFO_NODE:
; 2016 :          sprintf(pos,"list bottominfo "); pos+=strlen(pos);

	push	OFFSET ??_C@_0BB@BEPCFKIE@list?5bottominfo?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1383@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1383@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN325@exprint_re:

; 2017 :          break;
; 2018 :              
; 2019 :       case AGGREGATE_END_NODE:
; 2020 :          exprint_recur(node+node->right,prec_parent);
; 2021 :          return;
; 2022 : 
; 2023 :       case LIST_NODE: 
; 2024 :         sprintf(pos,"list ");

	push	OFFSET ??_C@_05BKNPGPBN@list?5?$AA@
	push	ecx
	call	_sprintf

; 2025 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1384@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1384@exprint_re

; 1267 :          exprint_recur(node+node->left,prec_parent);

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H

; 2025 :          pos += strlen(pos);

	sub	eax, edx
	add	DWORD PTR _pos, eax

; 2026 :          exprint_recur(node+node->left,PREC_ARG);

	push	0
	add	ecx, ebx
	push	ecx
	jmp	$LN1652@exprint_re
$LN324@exprint_re:

; 2027 :          return;
; 2028 : 
; 2029 :       case DELETE_NODE: 
; 2030 :         sprintf(pos,"delete ");

	push	OFFSET ??_C@_07GNDMACL@delete?5?$AA@
	push	ecx
	call	_sprintf

; 2031 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1385@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1385@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax
	mov	eax, DWORD PTR [ebx+4]

; 2032 :          exprint_recur(node+node->left,prec_parent);

	mov	edx, DWORD PTR _prec_parent$[ebp]
	imul	eax, 168				; 000000a8H
	push	edx
	add	eax, ebx
	push	eax
	jmp	$LN1652@exprint_re
$LN323@exprint_re:

; 2033 :          return;
; 2034 : 
; 2035 :       case REFINE_NODE: 
; 2036 :         sprintf(pos,"refine ");

	push	OFFSET ??_C@_07OHMIIBBL@refine?5?$AA@
	push	ecx
	call	_sprintf

; 2037 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1386@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1386@exprint_re

; 2038 :          exprint_recur(node+node->left,prec_parent);
; 2039 :          return;

	jmp	$LN1651@exprint_re
$LN322@exprint_re:

; 2040 : 
; 2041 :       case DISSOLVE_NODE: 
; 2042 :         sprintf(pos,"dissolve ");

	push	OFFSET ??_C@_09PLEKKNFD@dissolve?5?$AA@
	push	ecx
	call	_sprintf

; 2043 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1387@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1387@exprint_re

; 2044 :          exprint_recur(node+node->left,prec_parent);
; 2045 :          return;

	jmp	$LN1676@exprint_re
$LN321@exprint_re:

; 2046 : 
; 2047 :       case POP_NODE:
; 2048 :         sprintf(pos,"pop ");

	push	OFFSET ??_C@_04GCDPEDIK@pop?5?$AA@
	push	ecx
	call	_sprintf

; 2049 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1388@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1388@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax
	mov	eax, DWORD PTR [ebx+4]

; 2050 :          exprint_recur(node+node->left,prec_parent);

	mov	edx, DWORD PTR _prec_parent$[ebp]
	imul	eax, 168				; 000000a8H
	push	edx
	add	eax, ebx
	push	eax
	jmp	$LN1652@exprint_re
$LN320@exprint_re:

; 2051 :          return;
; 2052 : 
; 2053 :       case FIX_NODE: 
; 2054 :         sprintf(pos,"fix ");

	push	OFFSET ??_C@_04KGOHCPMM@fix?5?$AA@
	push	ecx
	call	_sprintf

; 2055 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1389@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1389@exprint_re

; 2056 :          exprint_recur(node+node->left,prec_parent);
; 2057 :          return;

	jmp	$LN1651@exprint_re
$LN319@exprint_re:

; 2058 : 
; 2059 :       case UNFIX_NODE: 
; 2060 :          sprintf(pos,"unfix ");

	push	OFFSET ??_C@_06HBAHJGAJ@unfix?5?$AA@
	push	ecx
	call	_sprintf

; 2061 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1390@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1390@exprint_re

; 2062 :          exprint_recur(node+node->left,prec_parent);
; 2063 :          return;

	jmp	$LN1676@exprint_re
$LN318@exprint_re:

; 2064 : 
; 2065 :      case EDGESWAP_NODE: 
; 2066 :          sprintf(pos,"edgeswap ");

	push	OFFSET ??_C@_09KNDPNNNB@edgeswap?5?$AA@
	push	ecx
	call	_sprintf

; 2067 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1391@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1391@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax
	mov	eax, DWORD PTR [ebx+4]

; 2068 :          exprint_recur(node+node->left,prec_parent);

	mov	edx, DWORD PTR _prec_parent$[ebp]
	imul	eax, 168				; 000000a8H
	push	edx
	add	eax, ebx
	push	eax
	jmp	$LN1652@exprint_re
$LN317@exprint_re:

; 2069 :          return;
; 2070 : 
; 2071 :      case VERTEX_AVERAGE_NODE:
; 2072 :          sprintf(pos,"vertex_average ");

	push	OFFSET ??_C@_0BA@EEDBPPPI@vertex_average?5?$AA@
	push	ecx
	call	_sprintf

; 2073 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1392@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1392@exprint_re

; 2074 :          exprint_recur(node+node->left,prec_parent);
; 2075 :          return;

	jmp	$LN1651@exprint_re
$LN316@exprint_re:

; 2076 : 
; 2077 :      case RAW_VERTEX_AVERAGE_NODE: 
; 2078 :         sprintf(pos,"raw_vertex_average ");

	push	OFFSET ??_C@_0BE@LKOOEJIA@raw_vertex_average?5?$AA@
	push	ecx
	call	_sprintf

; 2079 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1393@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1393@exprint_re

; 2080 :          exprint_recur(node+node->left,prec_parent);
; 2081 :          return;

	jmp	$LN1676@exprint_re
$LN315@exprint_re:

; 2082 : 
; 2083 :       case RAWEST_VERTEX_AVERAGE_NODE:
; 2084 :         sprintf(pos,"rawest_vertex_average ");

	push	OFFSET ??_C@_0BH@LEHBHCDC@rawest_vertex_average?5?$AA@
	push	ecx
	call	_sprintf

; 2085 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1394@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1394@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax
	mov	eax, DWORD PTR [ebx+4]

; 2086 :          exprint_recur(node+node->left,prec_parent);

	mov	edx, DWORD PTR _prec_parent$[ebp]
	imul	eax, 168				; 000000a8H
	push	edx
	add	eax, ebx
	push	eax
	jmp	$LN1652@exprint_re
$LN314@exprint_re:

; 2087 :          return;
; 2088 : 
; 2089 :       case EQUIANGULATE_NODE: 
; 2090 :          sprintf(pos,"equiangulate ");

	push	OFFSET ??_C@_0O@PMHDHEAM@equiangulate?5?$AA@
	push	ecx
	call	_sprintf

; 2091 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1395@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1395@exprint_re

; 2092 :          exprint_recur(node+node->left,prec_parent);
; 2093 :          return;

	jmp	$LN1651@exprint_re
$LN313@exprint_re:

; 2094 : 
; 2095 :      case POP_EDGE_TO_TRI_NODE: 
; 2096 :          sprintf(pos,"pop_edge_to_tri ");

	push	OFFSET ??_C@_0BB@POFEJAAI@pop_edge_to_tri?5?$AA@
	push	ecx
	call	_sprintf

; 2097 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1396@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1396@exprint_re

; 2098 :          exprint_recur(node+node->left,prec_parent);
; 2099 :          return;

	jmp	$LN1676@exprint_re
$LN312@exprint_re:

; 2100 : 
; 2101 :      case POP_TRI_TO_EDGE_NODE:
; 2102 :          sprintf(pos,"pop_tri_to_edge ");

	push	OFFSET ??_C@_0BB@HLINOHGN@pop_tri_to_edge?5?$AA@
	push	ecx
	call	_sprintf

; 2103 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1397@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1397@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax
	mov	eax, DWORD PTR [ebx+4]

; 2104 :          exprint_recur(node+node->left,prec_parent);

	mov	edx, DWORD PTR _prec_parent$[ebp]
	imul	eax, 168				; 000000a8H
	push	edx
	add	eax, ebx
	push	eax
	jmp	$LN1652@exprint_re
$LN311@exprint_re:

; 2105 :          return;
; 2106 : 
; 2107 :      case POP_QUAD_TO_QUAD_NODE: 
; 2108 :          sprintf(pos,"pop_quad_to_quad ");

	push	OFFSET ??_C@_0BC@PDFHAOFI@pop_quad_to_quad?5?$AA@
	push	ecx
	call	_sprintf

; 2109 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1398@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1398@exprint_re

; 2110 :          exprint_recur(node+node->left,prec_parent);
; 2111 :          return;

	jmp	$LN1651@exprint_re
$LN310@exprint_re:

; 2112 : 
; 2113 :      case T1_EDGESWAP_NODE:
; 2114 :          sprintf(pos,"t1_edgeswap ");

	push	OFFSET ??_C@_0N@FPEGLGLO@t1_edgeswap?5?$AA@
	push	ecx
	call	_sprintf

; 2115 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1399@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1399@exprint_re

; 2116 :          exprint_recur(node+node->left,prec_parent);
; 2117 :          return;

	jmp	$LN1676@exprint_re
$LN309@exprint_re:

; 2118 : 
; 2119 :      case REVERSE_ORIENTATION_NODE:
; 2120 :          sprintf(pos,"reverse_orientation ");

	push	OFFSET ??_C@_0BF@KJJDFLC@reverse_orientation?5?$AA@
	push	ecx
	call	_sprintf

; 2121 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1400@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1400@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax
	mov	eax, DWORD PTR [ebx+4]

; 2122 :          exprint_recur(node+node->left,prec_parent);

	mov	edx, DWORD PTR _prec_parent$[ebp]
	imul	eax, 168				; 000000a8H
	push	edx
	add	eax, ebx
	push	eax
	jmp	$LN1652@exprint_re
$LN308@exprint_re:

; 2123 :          return;
; 2124 : 
; 2125 :      case WHEREAMI_COMMAND_NODE:
; 2126 :          sprintf(pos,"whereami ");

	push	OFFSET ??_C@_09OLACHOMO@whereami?5?$AA@
	push	ecx
	call	_sprintf

; 2127 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1401@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1401@exprint_re

; 2128 :          exprint_recur(node+node->left,prec_parent);
; 2129 :          return;

	jmp	$LN1651@exprint_re
$LN306@exprint_re:

; 2130 : 
; 2131 :       case SINGLE_ELEMENT_INIT_NODE:
; 2132 :          return;
; 2133 : 
; 2134 :       case SINGLE_ELEMENT_NODE:
; 2135 :          exprint_recur(node+node->left,prec_parent);

	mov	ecx, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR _prec_parent$[ebp]
	imul	ecx, 168				; 000000a8H
	push	eax
	add	ecx, ebx
	push	ecx
	call	_exprint_recur

; 2136 :          if ( node[node->left].type == INDEXED_SUBTYPE_NODE ||
; 2137 :            node[node->left].type == INDEXED_ELEMENT_NODE )

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	mov	ecx, DWORD PTR [eax+ebx]
	add	esp, 8
	cmp	ecx, 10236				; 000027fcH
	je	SHORT $LN304@exprint_re
	cmp	ecx, 10237				; 000027fdH
	jne	$LN730@exprint_re
$LN304@exprint_re:

; 2138 :            if ( node[node->left].op5.string )

	mov	eax, DWORD PTR [eax+ebx+152]
	test	eax, eax
	je	$LN730@exprint_re

; 2139 :              { sprintf(pos," %s ",node[node->left].op5.string);

	push	eax
	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_04KMMDIKEB@?5?$CFs?5?$AA@
	push	eax
	call	_sprintf

; 2140 :                pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	1
$LL1402@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1402@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN302@exprint_re:

; 2141 :              }      
; 2142 :          return;
; 2143 : 
; 2144 :       case GET_VERTEXNORMAL_NODE:
; 2145 :          strcat(pos,"vertexnormal"); pos += strlen(pos);

	lea	esi, DWORD PTR [ecx-1]
$LL1403@exprint_re:
	mov	al, BYTE PTR [esi+1]
	inc	esi
	test	al, al
	jne	SHORT $LL1403@exprint_re
	mov	edx, DWORD PTR ??_C@_0N@ICOOBCNI@vertexnormal?$AA@
	mov	DWORD PTR [esi], edx
	mov	eax, DWORD PTR ??_C@_0N@ICOOBCNI@vertexnormal?$AA@+4
	mov	DWORD PTR [esi+4], eax
	mov	edx, DWORD PTR ??_C@_0N@ICOOBCNI@vertexnormal?$AA@+8
	mov	DWORD PTR [esi+8], edx
	mov	al, BYTE PTR ??_C@_0N@ICOOBCNI@vertexnormal?$AA@+12
	mov	BYTE PTR [esi+12], al
	mov	esi, ecx
	lea	edx, DWORD PTR [esi+1]
$LL1404@exprint_re:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL1404@exprint_re
	sub	esi, edx
	add	ecx, esi
	mov	DWORD PTR _pos, ecx

; 2146 :          exprint_recur(node+node->left,prec_parent);
; 2147 :          return;

	jmp	$LN417@exprint_re
$LN301@exprint_re:

; 2148 : 
; 2149 : 
; 2150 :       case INDEXED_COORD_NODE:
; 2151 :          strcat(pos,"x"); pos += 1;

	lea	edi, DWORD PTR [ecx-1]
	npad	6
$LL1405@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1405@exprint_re
	mov	ax, WORD PTR ??_C@_01FJMABOPO@x?$AA@
	inc	ecx
	mov	DWORD PTR _pos, ecx
	mov	WORD PTR [edi], ax
	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H

; 2152 :          exprint_recur(node+node->left,PREC_INDEX);

	push	55					; 00000037H
	add	ecx, ebx
	push	ecx
	jmp	$LN1652@exprint_re
$LN300@exprint_re:

; 2153 :          return;
; 2154 : 
; 2155 :       case INDEXED_ELEMENT_NODE:
; 2156 :          switch ( node->op1.eltype )

	mov	eax, DWORD PTR [ebx+32]
	cmp	eax, 4
	ja	$LN298@exprint_re
	jmp	DWORD PTR $LN1697@exprint_re[eax*4]
$LN297@exprint_re:

; 2157 :          { case VERTEX: strcat(pos,"vertex["); break;

	lea	esi, DWORD PTR [ecx-1]
$LL1406@exprint_re:
	mov	al, BYTE PTR [esi+1]
	inc	esi
	test	al, al
	jne	SHORT $LL1406@exprint_re
	mov	edx, DWORD PTR ??_C@_07GMIBILEA@vertex?$FL?$AA@
	mov	DWORD PTR [esi], edx
	mov	eax, DWORD PTR ??_C@_07GMIBILEA@vertex?$FL?$AA@+4
	mov	DWORD PTR [esi+4], eax
	jmp	$LN298@exprint_re
$LN296@exprint_re:

; 2158 :            case EDGE: strcat(pos,"edge["); break;

	lea	esi, DWORD PTR [ecx-1]
$LL1407@exprint_re:
	mov	al, BYTE PTR [esi+1]
	inc	esi
	test	al, al
	jne	SHORT $LL1407@exprint_re
	mov	edx, DWORD PTR ??_C@_05MLBEFDNG@edge?$FL?$AA@
	mov	DWORD PTR [esi], edx
	mov	ax, WORD PTR ??_C@_05MLBEFDNG@edge?$FL?$AA@+4
	mov	WORD PTR [esi+4], ax
	jmp	$LN298@exprint_re
$LN295@exprint_re:

; 2159 :            case FACET: strcat(pos,"facet["); break;

	lea	esi, DWORD PTR [ecx-1]
$LL1408@exprint_re:
	mov	al, BYTE PTR [esi+1]
	inc	esi
	test	al, al
	jne	SHORT $LL1408@exprint_re
	mov	edx, DWORD PTR ??_C@_06JBIAMLBO@facet?$FL?$AA@
	mov	DWORD PTR [esi], edx
	mov	ax, WORD PTR ??_C@_06JBIAMLBO@facet?$FL?$AA@+4
	mov	WORD PTR [esi+4], ax
	mov	dl, BYTE PTR ??_C@_06JBIAMLBO@facet?$FL?$AA@+6
	mov	BYTE PTR [esi+6], dl
	jmp	$LN298@exprint_re
$LN294@exprint_re:

; 2160 :            case BODY: strcat(pos,"body["); break;

	lea	esi, DWORD PTR [ecx-1]
	npad	2
$LL1409@exprint_re:
	mov	al, BYTE PTR [esi+1]
	inc	esi
	test	al, al
	jne	SHORT $LL1409@exprint_re
	mov	eax, DWORD PTR ??_C@_05KGEIKHIF@body?$FL?$AA@
	mov	DWORD PTR [esi], eax
	mov	dx, WORD PTR ??_C@_05KGEIKHIF@body?$FL?$AA@+4
	mov	WORD PTR [esi+4], dx
	jmp	SHORT $LN298@exprint_re
$LN293@exprint_re:

; 2161 :            case FACETEDGE: strcat(pos,"facetedge["); break;

	lea	esi, DWORD PTR [ecx-1]
	npad	1
$LL1410@exprint_re:
	mov	al, BYTE PTR [esi+1]
	inc	esi
	test	al, al
	jne	SHORT $LL1410@exprint_re
	mov	eax, DWORD PTR ??_C@_0L@HCNHJHCK@facetedge?$FL?$AA@
	mov	DWORD PTR [esi], eax
	mov	edx, DWORD PTR ??_C@_0L@HCNHJHCK@facetedge?$FL?$AA@+4
	mov	DWORD PTR [esi+4], edx
	mov	ax, WORD PTR ??_C@_0L@HCNHJHCK@facetedge?$FL?$AA@+8
	mov	WORD PTR [esi+8], ax
	mov	dl, BYTE PTR ??_C@_0L@HCNHJHCK@facetedge?$FL?$AA@+10
	mov	BYTE PTR [esi+10], dl
$LN298@exprint_re:

; 2162 :          }
; 2163 :          pos += strlen(pos);

	mov	esi, ecx
	lea	edx, DWORD PTR [esi+1]
$LL1411@exprint_re:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL1411@exprint_re

; 2164 :          exprint_recur(node+node->left,PREC_ARG);

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	sub	esi, edx
	add	eax, ebx
	add	ecx, esi
	push	0
	push	eax
	mov	DWORD PTR _pos, ecx
	call	_exprint_recur

; 2165 :          strcat(pos++,"]");

	mov	ecx, DWORD PTR _pos
	add	esp, 8
	lea	eax, DWORD PTR [ecx-1]
	inc	ecx
	mov	DWORD PTR _pos, ecx
$LL1412@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1412@exprint_re
	mov	cx, WORD PTR ??_C@_01LBDDMOBJ@?$FN?$AA@
	mov	edi, eax
	mov	WORD PTR [edi], cx
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN292@exprint_re:

; 2166 :          return;
; 2167 : 
; 2168 :       case INDEXED_SUBTYPE_NODE:
; 2169 :          exprint_recur(node+node->left,prec_parent);

	mov	eax, DWORD PTR [ebx+4]
	mov	edx, DWORD PTR _prec_parent$[ebp]
	imul	eax, 168				; 000000a8H
	push	edx
	add	eax, ebx
	push	eax
	call	_exprint_recur

; 2170 :          sprintf(pos,".%s[",typenames[node->op1.eltype]);

	mov	ecx, DWORD PTR [ebx+32]
	mov	edx, DWORD PTR _typenames[ecx*4]
	mov	eax, DWORD PTR _pos
	push	edx
	push	OFFSET ??_C@_04NPDIJEBN@?4?$CFs?$FL?$AA@
	push	eax
	call	_sprintf

; 2171 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 20					; 00000014H
	lea	edx, DWORD PTR [eax+1]
$LL1413@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1413@exprint_re

; 2172 :          exprint_recur(node+node->right,PREC_ARG);

	mov	ecx, DWORD PTR [ebx+8]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	sub	eax, edx
	add	DWORD PTR _pos, eax
	push	0
	push	ecx
	call	_exprint_recur

; 2173 :          strcat(pos,"]");

	mov	edx, DWORD PTR _pos
	add	esp, 8
	lea	edi, DWORD PTR [edx-1]
$LL1414@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1414@exprint_re
	mov	ax, WORD PTR ??_C@_01LBDDMOBJ@?$FN?$AA@
	mov	WORD PTR [edi], ax

; 2174 :          pos += strlen(pos);

	mov	eax, edx
	lea	esi, DWORD PTR [eax+1]
	npad	5
$LL1415@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1415@exprint_re
	sub	eax, esi
	pop	edi
	add	edx, eax
	pop	esi
	mov	DWORD PTR _pos, edx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN291@exprint_re:

; 2175 :          return;
; 2176 : 
; 2177 :       case SELF_ELEMENT_NODE:
; 2178 :          strcat(pos,"self"); pos+=4; break;

	lea	eax, DWORD PTR [ecx-1]
$LL1416@exprint_re:
	mov	dl, BYTE PTR [eax+1]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1416@exprint_re
	mov	edx, DWORD PTR ??_C@_04PJDNGLKJ@self?$AA@
	pop	edi
	mov	DWORD PTR [eax], edx
	mov	dl, BYTE PTR ??_C@_04PJDNGLKJ@self?$AA@+4
	add	ecx, 4
	pop	esi
	mov	BYTE PTR [eax+4], dl
	mov	DWORD PTR _pos, ecx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN289@exprint_re:

; 2179 : 
; 2180 :       case SINGLE_ELEMENT_EXPR_NODE:
; 2181 :          exprint_recur(node+node->left,prec_parent);
; 2182 :          break;
; 2183 : 
; 2184 :       case SYMBOL_ELEMENT_NODE:
; 2185 :          sprintf(pos,"%s", node->op5.string);

	mov	edx, DWORD PTR [ebx+152]
	push	edx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	ecx
	call	_sprintf

; 2186 :          pos += strlen(pos); break;

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1417@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1417@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN288@exprint_re:

; 2187 : 
; 2188 :       case SET_HIT_PARTNER_NODE:
; 2189 :          set_print(node,"set","hit_partner",PREC_ARG); break;

	push	0
	push	OFFSET ??_C@_0M@JAGBIOBF@hit_partner?$AA@
	push	OFFSET ??_C@_03KCHOJKKI@set?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN287@exprint_re:

; 2190 : 
; 2191 :       case SET_NO_REFINE_NODE:
; 2192 :          set_print(node,"set","no_refine",prec_parent); break;

	mov	eax, DWORD PTR _prec_parent$[ebp]
	push	eax
	push	OFFSET ??_C@_09PFNGBABC@no_refine?$AA@
	push	OFFSET ??_C@_03KCHOJKKI@set?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN286@exprint_re:

; 2193 : 
; 2194 :       case UNSET_NO_REFINE_NODE:
; 2195 :          set_print(node,"unset","no_refine",prec_parent); break;

	mov	ecx, DWORD PTR _prec_parent$[ebp]
	push	ecx
	push	OFFSET ??_C@_09PFNGBABC@no_refine?$AA@
	push	OFFSET ??_C@_05EPBFLBEJ@unset?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN285@exprint_re:

; 2196 : 
; 2197 :       case SET_NO_TRANSFORM_NODE:
; 2198 :          set_print(node,"set","no_transform",prec_parent); break;

	mov	edx, DWORD PTR _prec_parent$[ebp]
	push	edx
	push	OFFSET ??_C@_0N@CMIGFPCH@no_transform?$AA@
	push	OFFSET ??_C@_03KCHOJKKI@set?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN284@exprint_re:

; 2199 : 
; 2200 :       case UNSET_NO_TRANSFORM_NODE:
; 2201 :          set_print(node,"unset","no_transform",prec_parent); break;

	mov	eax, DWORD PTR _prec_parent$[ebp]
	push	eax
	push	OFFSET ??_C@_0N@CMIGFPCH@no_transform?$AA@
	push	OFFSET ??_C@_05EPBFLBEJ@unset?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN283@exprint_re:

; 2202 : 
; 2203 :       case SET_CENTEROFMASS_NODE:
; 2204 :          set_print(node, "set","centerofmass",prec_parent); break;

	mov	ecx, DWORD PTR _prec_parent$[ebp]
	push	ecx
	push	OFFSET ??_C@_0N@OFAMNBMC@centerofmass?$AA@
	push	OFFSET ??_C@_03KCHOJKKI@set?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN282@exprint_re:

; 2205 : 
; 2206 :       case UNSET_CENTEROFMASS_NODE:
; 2207 :          set_print(node,"unset","centerofmass",prec_parent); break;

	mov	edx, DWORD PTR _prec_parent$[ebp]
	push	edx
	push	OFFSET ??_C@_0N@OFAMNBMC@centerofmass?$AA@
	push	OFFSET ??_C@_05EPBFLBEJ@unset?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN281@exprint_re:

; 2208 : 
; 2209 :       case SET_NO_DISPLAY_NODE:
; 2210 :          set_print(node,"set","no_display",prec_parent); break;

	mov	eax, DWORD PTR _prec_parent$[ebp]
	push	eax
	push	OFFSET ??_C@_0L@ODCODBLD@no_display?$AA@
	push	OFFSET ??_C@_03KCHOJKKI@set?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN280@exprint_re:

; 2211 : 
; 2212 :       case SET_PHASE_NODE:
; 2213 :          set_print(node,"set","phase",prec_parent); break;

	mov	ecx, DWORD PTR _prec_parent$[ebp]
	push	ecx
	push	OFFSET ??_C@_05CBPKLGJM@phase?$AA@
	push	OFFSET ??_C@_03KCHOJKKI@set?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN279@exprint_re:

; 2214 : 
; 2215 :       case SET_BARE_NODE:
; 2216 :          set_print(node,"set","bare",prec_parent); break;

	mov	edx, DWORD PTR _prec_parent$[ebp]
	push	edx
	push	OFFSET ??_C@_04BGEKJPHF@bare?$AA@
	push	OFFSET ??_C@_03KCHOJKKI@set?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN278@exprint_re:

; 2217 : 
; 2218 :       case SET_DENSITY_NODE:
; 2219 :          set_print(node,"set","density",prec_parent); break;

	mov	eax, DWORD PTR _prec_parent$[ebp]
	push	eax
	push	OFFSET ??_C@_07HAFFKDBK@density?$AA@
	push	OFFSET ??_C@_03KCHOJKKI@set?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN277@exprint_re:

; 2220 : 
; 2221 :       case SET_VOLCONST_NODE:
; 2222 :          set_print(node,"set","volconst",prec_parent); break;

	mov	ecx, DWORD PTR _prec_parent$[ebp]
	push	ecx
	push	OFFSET ??_C@_08IMINLCCL@volconst?$AA@
	push	OFFSET ??_C@_03KCHOJKKI@set?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN276@exprint_re:

; 2223 : 
; 2224 :       case SET_TARGET_NODE:
; 2225 :          set_print(node,"set","target",prec_parent); break;

	mov	edx, DWORD PTR _prec_parent$[ebp]
	push	edx
	push	OFFSET ??_C@_06JJLAMBGK@target?$AA@
	push	OFFSET ??_C@_03KCHOJKKI@set?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN275@exprint_re:

; 2226 : 
; 2227 :       case SET_PRESSURE_NODE:
; 2228 :          set_print(node,"set","pressure",prec_parent); break;

	mov	eax, DWORD PTR _prec_parent$[ebp]
	push	eax
	push	OFFSET ??_C@_08POHEELCJ@pressure?$AA@
	push	OFFSET ??_C@_03KCHOJKKI@set?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN274@exprint_re:

; 2229 : 
; 2230 :       case SET_OPACITY_NODE:
; 2231 :          set_print(node,"set","opacity",prec_parent); break;

	mov	ecx, DWORD PTR _prec_parent$[ebp]
	push	ecx
	push	OFFSET ??_C@_07IJGPCJHC@opacity?$AA@
	push	OFFSET ??_C@_03KCHOJKKI@set?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN273@exprint_re:

; 2232 : 
; 2233 :       case SET_CONSTRAINT_NODE:
; 2234 :          set_print(node,"set","constraint",prec_parent); break;

	mov	edx, DWORD PTR _prec_parent$[ebp]
	push	edx
	push	OFFSET ??_C@_0L@HOHHMJMM@constraint?$AA@
	push	OFFSET ??_C@_03KCHOJKKI@set?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN272@exprint_re:

; 2235 : 
; 2236 :       case SET_CONSTRAINT_NAME_NODE:
; 2237 :          set_print(node,"set","constraint ",prec_parent); 

	mov	eax, DWORD PTR _prec_parent$[ebp]
	push	eax
	push	OFFSET ??_C@_0M@HCINNPA@constraint?5?$AA@
	push	OFFSET ??_C@_03KCHOJKKI@set?$AA@
	push	ebx
	call	_set_print

; 2238 :          strcat(pos,get_constraint((int)(node[node->left].op1.real))->name);

	fnstcw	WORD PTR tv5000[ebp]
	mov	ecx, DWORD PTR [ebx+4]
	movzx	eax, WORD PTR tv5000[ebp]
	imul	ecx, 168				; 000000a8H
	fld	QWORD PTR [ecx+ebx+32]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv5044[ebp], eax
	add	esp, 16					; 00000010H
	fldcw	WORD PTR tv5044[ebp]
	fistp	QWORD PTR tv5077[ebp]
	mov	eax, DWORD PTR tv5077[ebp]
	and	eax, 1073741823				; 3fffffffH
	fldcw	WORD PTR tv5000[ebp]
	imul	eax, 176				; 000000b0H
	add	eax, DWORD PTR _web+652
	mov	edx, eax
	npad	6
$LL1418@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1418@exprint_re
	mov	ebx, DWORD PTR _pos
	sub	eax, edx
	lea	edi, DWORD PTR [ebx-1]
$LL1419@exprint_re:
	mov	cl, BYTE PTR [edi+1]
	inc	edi
	test	cl, cl
	jne	SHORT $LL1419@exprint_re
	mov	ecx, eax
	shr	ecx, 2
	mov	esi, edx
	rep movsd
	mov	ecx, eax
	and	ecx, 3

; 2239 :          pos += strlen(pos); break;

	mov	eax, ebx
	rep movsb
	lea	edx, DWORD PTR [eax+1]
	npad	1
$LL1420@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1420@exprint_re
	sub	eax, edx
	pop	edi
	add	ebx, eax
	pop	esi
	mov	DWORD PTR _pos, ebx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN271@exprint_re:

; 2240 : 
; 2241 :       case SET_NAMED_QUANTITY_NODE:
; 2242 :          set_print(node,"set","quantity",prec_parent); break;

	mov	edx, DWORD PTR _prec_parent$[ebp]
	push	edx
	push	OFFSET ??_C@_08OCNIHGPN@quantity?$AA@
	push	OFFSET ??_C@_03KCHOJKKI@set?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN270@exprint_re:

; 2243 : 
; 2244 :       case UNSET_NAMED_QUANTITY_NODE:
; 2245 :          set_print(node,"unset","quantity",prec_parent); break;

	mov	eax, DWORD PTR _prec_parent$[ebp]
	push	eax
	push	OFFSET ??_C@_08OCNIHGPN@quantity?$AA@
	push	OFFSET ??_C@_05EPBFLBEJ@unset?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN269@exprint_re:

; 2246 : 
; 2247 :       case SET_METHOD_INSTANCE_NODE:
; 2248 :          set_print(node,"set","method_instance",prec_parent); break;

	mov	ecx, DWORD PTR _prec_parent$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BA@FCDDEKDG@method_instance?$AA@
	push	OFFSET ??_C@_03KCHOJKKI@set?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN268@exprint_re:

; 2249 : 
; 2250 :       case UNSET_METHOD_INSTANCE_NODE:
; 2251 :          set_print(node,"unset","method_instance",prec_parent); break;

	mov	edx, DWORD PTR _prec_parent$[ebp]
	push	edx
	push	OFFSET ??_C@_0BA@FCDDEKDG@method_instance?$AA@
	push	OFFSET ??_C@_05EPBFLBEJ@unset?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN267@exprint_re:

; 2252 : 
; 2253 :       case UNSET_CONSTRAINT_NODE:
; 2254 :          set_print(node,"unset","constraint",prec_parent); 

	mov	eax, DWORD PTR _prec_parent$[ebp]
	push	eax
	push	OFFSET ??_C@_0L@HOHHMJMM@constraint?$AA@
	push	OFFSET ??_C@_05EPBFLBEJ@unset?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN266@exprint_re:

; 2255 :          break;
; 2256 : 
; 2257 :       case UNSET_CONSTRAINT_NAME_NODE:
; 2258 :        { char temp[100];
; 2259 :          sprintf(temp,"constraint %s",get_constraint(node->op3.connum)->name);

	mov	ecx, DWORD PTR [ebx+140]
	and	ecx, 1073741823				; 3fffffffH
	imul	ecx, 176				; 000000b0H
	add	ecx, DWORD PTR _web+652
	lea	edx, DWORD PTR _temp$90488[ebp]
	push	ecx
	push	OFFSET ??_C@_0O@NGEKOGMC@constraint?5?$CFs?$AA@
	push	edx
	call	_sprintf

; 2260 :          set_print(node,"unset",temp,prec_parent); 

	mov	eax, DWORD PTR _prec_parent$[ebp]
	push	eax
	lea	ecx, DWORD PTR _temp$90488[ebp]
	push	ecx
	push	OFFSET ??_C@_05EPBFLBEJ@unset?$AA@
	push	ebx
	call	_set_print

; 2261 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 28					; 0000001cH
	lea	edx, DWORD PTR [eax+1]
	npad	1
$LL1421@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1421@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN265@exprint_re:

; 2262 :          break;
; 2263 :        }
; 2264 : 
; 2265 :       case UNSET_BOUNDARY_NODE:
; 2266 :          set_print(node,"unset","boundary",prec_parent); break;

	mov	edx, DWORD PTR _prec_parent$[ebp]
	push	edx
	push	OFFSET ??_C@_08KIKGFOKI@boundary?$AA@
	push	OFFSET ??_C@_05EPBFLBEJ@unset?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN264@exprint_re:

; 2267 : 
; 2268 :       case UNSET_BOUNDARY_NAME_NODE:
; 2269 :        { char temp[100];
; 2270 :          sprintf(temp,"boundary %s",web.boundaries[node->op3.bdrynum].name);

	mov	eax, DWORD PTR [ebx+140]
	imul	eax, 136				; 00000088H
	add	eax, DWORD PTR _web+776
	lea	ecx, DWORD PTR _temp$90495[ebp]
	push	eax
	push	OFFSET ??_C@_0M@FGEAHLHH@boundary?5?$CFs?$AA@
	push	ecx
	call	_sprintf

; 2271 :          set_print(node,"unset",temp,prec_parent); 

	mov	edx, DWORD PTR _prec_parent$[ebp]
	push	edx
	lea	eax, DWORD PTR _temp$90495[ebp]
	push	eax
	push	OFFSET ??_C@_05EPBFLBEJ@unset?$AA@
	push	ebx
	call	_set_print

; 2272 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 28					; 0000001cH
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL1422@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1422@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN263@exprint_re:

; 2273 :          break;
; 2274 :        }
; 2275 : 
; 2276 :       case UNSET_TARGET_NODE:
; 2277 :          set_print(node,"unset","target",prec_parent); break;

	mov	ecx, DWORD PTR _prec_parent$[ebp]
	push	ecx
	push	OFFSET ??_C@_06JJLAMBGK@target?$AA@
	push	OFFSET ??_C@_05EPBFLBEJ@unset?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN262@exprint_re:

; 2278 : 
; 2279 :       case UNSET_PRESSURE_NODE:
; 2280 :          set_print(node,"unset","pressure",prec_parent); break;

	mov	edx, DWORD PTR _prec_parent$[ebp]
	push	edx
	push	OFFSET ??_C@_08POHEELCJ@pressure?$AA@
	push	OFFSET ??_C@_05EPBFLBEJ@unset?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN261@exprint_re:

; 2281 : 
; 2282 : 
; 2283 :       case SET_NO_HESSIAN_NORMAL_NODE:
; 2284 :          set_print(node,"set","hessian_normal",prec_parent); break;

	mov	eax, DWORD PTR _prec_parent$[ebp]
	push	eax
	push	OFFSET ??_C@_0P@BMDMDICD@hessian_normal?$AA@
	push	OFFSET ??_C@_03KCHOJKKI@set?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN260@exprint_re:

; 2285 : 
; 2286 :       case UNSET_NO_HESSIAN_NORMAL_NODE:
; 2287 :          set_print(node,"unset","hessian_normal",prec_parent); break;

	mov	ecx, DWORD PTR _prec_parent$[ebp]
	push	ecx
	push	OFFSET ??_C@_0P@BMDMDICD@hessian_normal?$AA@
	push	OFFSET ??_C@_05EPBFLBEJ@unset?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN258@exprint_re:

; 2288 : 
; 2289 :       case SET_INIT_NODE: break;
; 2290 : 
; 2291 :       case SET_ATTRIBUTE_LOOP_NODE:
; 2292 :       { struct treenode *nnode;
; 2293 : 
; 2294 :          sprintf(pos,"set ");

	push	OFFSET ??_C@_04ENCLHBOC@set?5?$AA@
	push	ecx
	call	_sprintf

; 2295 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1423@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1423@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 2296 :          nnode = node + node->left;

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	add	eax, ebx

; 2297 :          if ( nnode->type == WHERE_NODE ) nnode += nnode->left; /* get NEXT_ */

	cmp	DWORD PTR [eax], 10262			; 00002816H
	jne	SHORT $LN257@exprint_re
	mov	edx, DWORD PTR [eax+4]
	imul	edx, 168				; 000000a8H
	add	eax, edx
$LN257@exprint_re:

; 2298 :          exprint_recur(nnode,prec_parent);

	mov	edi, DWORD PTR _prec_parent$[ebp]
	push	edi
	push	eax
	call	_exprint_recur

; 2299 : 
; 2300 :          if ( node->right )  exprint_recur(node+node->right,prec_parent);

	mov	eax, DWORD PTR [ebx+8]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN256@exprint_re
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	edi
	push	eax
	call	_exprint_recur
	add	esp, 8
$LN256@exprint_re:

; 2301 :          if ( node[node->left].type == WHERE_NODE )

	mov	esi, DWORD PTR [ebx+4]
	imul	esi, 168				; 000000a8H
	add	esi, ebx
	cmp	DWORD PTR [esi], 10262			; 00002816H
	jne	$LN730@exprint_re

; 2302 :            { node+= node->left;
; 2303 :              sprintf(pos," where "); pos += strlen(pos);

	mov	ecx, DWORD PTR _pos
	push	OFFSET ??_C@_07OFLPJMBB@?5where?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1424@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1424@exprint_re
	sub	eax, edx

; 2304 :              exprint_recur(node+node->right,prec_parent);

	mov	edx, DWORD PTR [esi+8]
	add	DWORD PTR _pos, eax
	imul	edx, 168				; 000000a8H
	push	edi
	add	edx, esi

; 2305 :            }
; 2306 :        }
; 2307 :        return;

	jmp	$LN1655@exprint_re
$LN254@exprint_re:

; 2308 : 
; 2309 :       case FOREACH_NODE:
; 2310 :          sprintf(pos,"foreach ");

	push	OFFSET ??_C@_08ECALEGKJ@foreach?5?$AA@
	push	ecx
	call	_sprintf

; 2311 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1425@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1425@exprint_re

; 2312 :          exprint_recur(node+node->left,prec_parent);

	mov	esi, DWORD PTR _prec_parent$[ebp]
	sub	eax, edx
	add	DWORD PTR _pos, eax
	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	esi
	push	eax
	call	_exprint_recur

; 2313 :          sprintf(pos," do "); 

	mov	ecx, DWORD PTR _pos
	push	OFFSET ??_C@_04JKFHOPAN@?5do?5?$AA@
	push	ecx
	call	_sprintf

; 2314 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edi, DWORD PTR [eax+1]
$LL1426@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1426@exprint_re
	sub	eax, edi
	add	DWORD PTR _pos, eax

; 2315 :          bracket_depth++;

	mov	edi, 1
	add	DWORD PTR _bracket_depth, edi

; 2316 :          newline();

	call	_newline

; 2317 :          exprint_recur(node+node->right,prec_parent);

	mov	edx, DWORD PTR [ebx+8]
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	esi
	push	edx
	call	_exprint_recur
	add	esp, 8

; 2318 :          bracket_depth--;

	sub	DWORD PTR _bracket_depth, edi
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN253@exprint_re:

; 2319 :          return;
; 2320 : 
; 2321 :       case MAX_NODE: 
; 2322 :          sprintf(pos,"max(");

	push	OFFSET ??_C@_04NMFKLMDK@max?$CI?$AA@
	push	ecx
	call	_sprintf

; 2323 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1427@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1427@exprint_re
$LN1672@exprint_re:
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 2324 :          exprint_recur(node+node->left,PREC_ARG);

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	0
	push	eax
	call	_exprint_recur

; 2325 :          sprintf(pos,","); pos++;

	mov	ecx, DWORD PTR _pos
	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	push	ecx
	call	_sprintf

; 2326 :          exprint_recur(node+node->right,PREC_ARG);

	mov	edx, DWORD PTR [ebx+8]
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	0
	mov	esi, 1
	add	DWORD PTR _pos, esi
	push	edx
	call	_exprint_recur

; 2327 :          sprintf(pos,")"); pos++;

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	eax
$LN1673@exprint_re:
	call	_sprintf
	add	esp, 32					; 00000020H
	add	DWORD PTR _pos, esi
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN252@exprint_re:

; 2328 :          return;
; 2329 : 
; 2330 :       case MIN_NODE: 
; 2331 :          sprintf(pos,"min(");

	push	OFFSET ??_C@_04BEFELBH@min?$CI?$AA@
	push	ecx
	call	_sprintf

; 2332 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1428@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1428@exprint_re

; 2333 :          exprint_recur(node+node->left,PREC_ARG);

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	sub	eax, edx
	add	DWORD PTR _pos, eax
	push	0
	push	ecx
	call	_exprint_recur

; 2334 :          sprintf(pos,","); pos++;

	mov	edx, DWORD PTR _pos
	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	push	edx
	call	_sprintf

; 2335 :          exprint_recur(node+node->right,PREC_ARG);

	mov	eax, DWORD PTR [ebx+8]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	0
	mov	esi, 1
	add	DWORD PTR _pos, esi
	push	eax
	call	_exprint_recur

; 2336 :          sprintf(pos,")"); pos++;

	mov	ecx, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	ecx
	call	_sprintf
	add	esp, 32					; 00000020H
	add	DWORD PTR _pos, esi
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN251@exprint_re:

; 2337 :          return;
; 2338 : 
; 2339 :       case SUM_NODE: 
; 2340 :          sprintf(pos,"sum(");

	push	OFFSET ??_C@_04MGBMDEIK@sum?$CI?$AA@
	push	ecx
	call	_sprintf

; 2341 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL1429@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1429@exprint_re
	sub	eax, edx

; 2342 :          exprint_recur(node+node->left,PREC_ARG);

	mov	edx, DWORD PTR [ebx+4]
	add	DWORD PTR _pos, eax
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	0
	push	edx
	call	_exprint_recur

; 2343 :          sprintf(pos,","); pos++;

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	push	eax
	call	_sprintf

; 2344 :          exprint_recur(node+node->right,PREC_ARG);

	mov	ecx, DWORD PTR [ebx+8]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	push	0
	mov	esi, 1
	add	DWORD PTR _pos, esi
	push	ecx
	call	_exprint_recur

; 2345 :          sprintf(pos,")"); pos++;

	mov	edx, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	edx
	call	_sprintf
	add	esp, 32					; 00000020H
	add	DWORD PTR _pos, esi
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN250@exprint_re:

; 2346 :          return;
; 2347 : 
; 2348 :       case AVG_NODE: 
; 2349 :          sprintf(pos,"avg(");

	push	OFFSET ??_C@_04MDBONKFA@avg?$CI?$AA@
	push	ecx
	call	_sprintf

; 2350 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1430@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1430@exprint_re

; 2351 :          exprint_recur(node+node->left,PREC_ARG);
; 2352 :          sprintf(pos,","); pos++;
; 2353 :          exprint_recur(node+node->right,PREC_ARG);
; 2354 :          sprintf(pos,")"); pos++;
; 2355 :          return;

	jmp	$LN1672@exprint_re
$LN249@exprint_re:

; 2356 : 
; 2357 :       case COUNT_NODE:
; 2358 :          sprintf(pos,"count(");

	push	OFFSET ??_C@_06MFABEKNP@count?$CI?$AA@
	push	ecx
	call	_sprintf

; 2359 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1431@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1431@exprint_re

; 2360 :          exprint_recur(node+node->left,PREC_ARG);

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	sub	eax, edx
	add	DWORD PTR _pos, eax
	push	0
	push	ecx
	call	_exprint_recur

; 2361 :          sprintf(pos,","); pos++;

	mov	edx, DWORD PTR _pos
	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	push	edx
	call	_sprintf

; 2362 :          exprint_recur(node+node->right,PREC_ARG);

	mov	eax, DWORD PTR [ebx+8]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	0
	mov	esi, 1
	add	DWORD PTR _pos, esi
	push	eax
	call	_exprint_recur

; 2363 :          sprintf(pos,")"); pos++;

	mov	ecx, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	ecx

; 2364 :          return;

	jmp	$LN1673@exprint_re
$LN248@exprint_re:

; 2365 : 
; 2366 :       case HISTOGRAM_NODE: 
; 2367 :          sprintf(pos,"histogram(");

	push	OFFSET ??_C@_0L@MHHMKAFA@histogram?$CI?$AA@
	push	ecx
	call	_sprintf

; 2368 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	5
$LL1432@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1432@exprint_re
	sub	eax, edx

; 2369 :          exprint_recur(node+node->left,PREC_ARG);

	mov	edx, DWORD PTR [ebx+4]
	add	DWORD PTR _pos, eax
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	0
	push	edx
	call	_exprint_recur

; 2370 :          sprintf(pos,","); pos++;

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	push	eax
	call	_sprintf

; 2371 :          exprint_recur(node+node->right,PREC_ARG);

	mov	ecx, DWORD PTR [ebx+8]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	push	0
	mov	esi, 1
	add	DWORD PTR _pos, esi
	push	ecx
	call	_exprint_recur

; 2372 :          sprintf(pos,")"); pos++;

	mov	edx, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	edx

; 2373 :          return;

	jmp	$LN1673@exprint_re
$LN247@exprint_re:

; 2374 : 
; 2375 :       case LOGHISTOGRAM_NODE:
; 2376 :          sprintf(pos,"loghistogram(");

	push	OFFSET ??_C@_0O@KOCBPMJD@loghistogram?$CI?$AA@
	push	ecx
	call	_sprintf

; 2377 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1433@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1433@exprint_re

; 2378 :          exprint_recur(node+node->left,PREC_ARG);
; 2379 :          sprintf(pos,","); pos++;
; 2380 :          exprint_recur(node+node->right,PREC_ARG);
; 2381 :          sprintf(pos,")"); pos++;
; 2382 :          return;

	jmp	$LN1672@exprint_re
$LN246@exprint_re:

; 2383 : 
; 2384 :       case WHERE_NODE:
; 2385 :          exprint_recur(node+node->left,prec_parent);

	mov	ecx, DWORD PTR [ebx+4]
	mov	esi, DWORD PTR _prec_parent$[ebp]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	push	esi
	push	ecx
	call	_exprint_recur

; 2386 :          sprintf(pos," where "); pos += strlen(pos);

	mov	edx, DWORD PTR _pos
	push	OFFSET ??_C@_07OFLPJMBB@?5where?5?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
$LL1434@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1434@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 2387 :          exprint_recur(node+node->right,prec_parent);

	mov	eax, DWORD PTR [ebx+8]
	imul	eax, 168				; 000000a8H
	push	esi
	add	eax, ebx
	push	eax
	jmp	$LN1652@exprint_re
$LN245@exprint_re:

; 2388 :          return;
; 2389 : 
; 2390 :       case NEXT_VERTEX_NODE: case NEXT_EDGE_VERTEX_NODE: case NEXT_FACET_VERTEX_NODE:
; 2391 :       case NEXT_BODY_VERTEX_NODE: case NEXT_FACETEDGE_NODE:
; 2392 :       case NEXT_EDGE_NODE: case NEXT_VERTEX_EDGE_NODE: case NEXT_FACET_EDGE_NODE:
; 2393 :       case NEXT_FACET_NODE: case NEXT_VERTEX_FACET_NODE: case NEXT_EDGE_FACET_NODE:
; 2394 :       case NEXT_BODY_NODE: case NEXT_VERTEX_BODY_NODE: case NEXT_EDGE_BODY_NODE:
; 2395 :       case NEXT_FACET_BODY_NODE:
; 2396 :       case NEXT_BODY_FACET_NODE:
; 2397 :       case NEXT_BODY_EDGE_NODE:
; 2398 :          exprint_recur(node+node->left,prec_parent);

	mov	edx, DWORD PTR [ebx+4]
	mov	ecx, DWORD PTR _prec_parent$[ebp]
	imul	edx, 168				; 000000a8H
	push	ecx
	add	edx, ebx
	push	edx
	call	_exprint_recur

; 2399 :          if ( strcmp(node->op5.string,default_name) != 0 )

	mov	ebx, DWORD PTR [ebx+152]
	mov	ecx, DWORD PTR _default_name
	add	esp, 8
	mov	eax, ebx
	npad	5
$LL1435@exprint_re:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN1436@exprint_re
	test	dl, dl
	je	SHORT $LN1437@exprint_re
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN1436@exprint_re
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL1435@exprint_re
$LN1437@exprint_re:
	xor	eax, eax
	jmp	SHORT $LN1438@exprint_re
$LN1436@exprint_re:
	sbb	eax, eax
	sbb	eax, -1
$LN1438@exprint_re:
	test	eax, eax
	je	$LN730@exprint_re

; 2400 :            { sprintf(pos,"%s ",node->op5.string);

	mov	eax, DWORD PTR _pos
	push	ebx
	push	OFFSET ??_C@_03IKGEINEE@?$CFs?5?$AA@
	push	eax
	call	_sprintf

; 2401 :              pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	7
$LL1439@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1439@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN243@exprint_re:

; 2402 :            } 
; 2403 :          return; 
; 2404 :       
; 2405 :       case INIT_FACETEDGE_NODE: 
; 2406 :          sprintf(pos,"facetedges "); pos += strlen(pos);

	push	OFFSET ??_C@_0M@HIBDCNLL@facetedges?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1440@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1440@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN242@exprint_re:

; 2407 :          return;
; 2408 :       
; 2409 :       case INIT_VERTEX_NODE: 
; 2410 :          sprintf(pos,"vertices "); pos += strlen(pos);

	push	OFFSET ??_C@_09DJCGGCPN@vertices?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1441@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1441@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN241@exprint_re:

; 2411 :          return;
; 2412 :       
; 2413 :       case INIT_EDGE_VERTEX_NODE: case INIT_FACET_VERTEX_NODE: case INIT_BODY_VERTEX_NODE:
; 2414 :          exprint_recur(node+node->left,prec_parent);

	mov	edx, DWORD PTR [ebx+4]
	mov	ecx, DWORD PTR _prec_parent$[ebp]
	imul	edx, 168				; 000000a8H
	push	ecx
	add	edx, ebx
	push	edx
	call	_exprint_recur

; 2415 :          sprintf(pos,".vertices "); 

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_0L@GFMBBPLG@?4vertices?5?$AA@
	push	eax
	call	_sprintf

; 2416 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
$LL1442@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1442@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN240@exprint_re:

; 2417 :          return;
; 2418 :       
; 2419 :       case INIT_EDGE_NODE: 
; 2420 :          sprintf(pos,"edges "); pos += strlen(pos);

	push	OFFSET ??_C@_06MMKBFAEI@edges?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1443@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1443@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN239@exprint_re:

; 2421 :          return;
; 2422 :       
; 2423 :       case INIT_VERTEX_EDGE_NODE: case INIT_FACET_EDGE_NODE: case INIT_BODY_EDGE_NODE:
; 2424 :          exprint_recur(node+node->left,prec_parent);

	mov	edx, DWORD PTR [ebx+4]
	mov	ecx, DWORD PTR _prec_parent$[ebp]
	imul	edx, 168				; 000000a8H
	push	ecx
	add	edx, ebx
	push	edx
	call	_exprint_recur

; 2425 :          sprintf(pos,".edges "); 

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_07NIBDCADL@?4edges?5?$AA@
	push	eax
	call	_sprintf

; 2426 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
$LL1444@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1444@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN238@exprint_re:

; 2427 :          return;
; 2428 :       
; 2429 :       case INIT_FACET_NODE: 
; 2430 :          sprintf(pos,"facets "); pos += strlen(pos);

	push	OFFSET ??_C@_07FJEEIOFC@facets?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1445@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1445@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN237@exprint_re:

; 2431 :          return;
; 2432 :       
; 2433 :       case INIT_VERTEX_FACET_NODE: case INIT_EDGE_FACET_NODE: case INIT_BODY_FACET_NODE:
; 2434 :          exprint_recur(node+node->left,prec_parent);

	mov	edx, DWORD PTR [ebx+4]
	mov	ecx, DWORD PTR _prec_parent$[ebp]
	imul	edx, 168				; 000000a8H
	push	ecx
	add	edx, ebx
	push	edx
	call	_exprint_recur

; 2435 :          sprintf(pos,".facets "); 

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_08JAFMBMKE@?4facets?5?$AA@
	push	eax
	call	_sprintf

; 2436 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
$LL1446@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1446@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN236@exprint_re:

; 2437 :          return;
; 2438 :       
; 2439 :       case INIT_BODY_NODE: 
; 2440 :          sprintf(pos,"bodies "); pos += strlen(pos);

	push	OFFSET ??_C@_07LNGBBGLG@bodies?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1447@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1447@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN235@exprint_re:

; 2441 :          break;
; 2442 : 
; 2443 :       case INIT_VERTEX_BODY_NODE: case INIT_EDGE_BODY_NODE: case INIT_FACET_BODY_NODE:
; 2444 :          exprint_recur(node+node->left,prec_parent);

	mov	edx, DWORD PTR [ebx+4]
	mov	ecx, DWORD PTR _prec_parent$[ebp]
	imul	edx, 168				; 000000a8H
	push	ecx
	add	edx, ebx
	push	edx
	call	_exprint_recur

; 2445 :          sprintf(pos,".bodies "); 

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_08HEHJIEEA@?4bodies?5?$AA@
	push	eax
	call	_sprintf

; 2446 :           pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
$LL1448@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1448@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN234@exprint_re:

; 2447 :          return;
; 2448 :       
; 2449 :       case PUSH_NAMED_QUANTITY_NODE:
; 2450 :          sprintf(pos,"%s ",GEN_QUANT(node->op1.quant_id)->name);

	mov	edx, DWORD PTR [ebx+32]
	imul	edx, 368				; 00000170H
	add	edx, DWORD PTR _gen_quant_list
	push	edx
	push	OFFSET ??_C@_03IKGEINEE@?$CFs?5?$AA@
	push	ecx
	call	_sprintf

; 2451 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1449@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1449@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN233@exprint_re:

; 2452 :          return;
; 2453 : 
; 2454 :       case PUSH_METHOD_INSTANCE_NODE:
; 2455 :          sprintf(pos,"%s ",METH_INSTANCE(node->op1.meth_id)->name);

	mov	eax, DWORD PTR [ebx+32]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list
	push	eax
	push	OFFSET ??_C@_03IKGEINEE@?$CFs?5?$AA@
	push	ecx
	call	_sprintf

; 2456 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	5
$LL1450@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1450@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN232@exprint_re:

; 2457 :          return;
; 2458 : 
; 2459 :       case PUSHCONST_NODE:
; 2460 : #ifdef FLOAT128
; 2461 :          sprintf(pos,"%1.*Qg",DPREC,node->op1.real);
; 2462 : #elif defined(LONGDOUBLE)
; 2463 :          sprintf(pos,"%1.*Lg",DPREC,node->op1.real);
; 2464 : #else
; 2465 :          sprintf(pos,"%1.15g",node->op1.real);

	fld	QWORD PTR [ebx+32]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_06OEKDGAI@?$CF1?415g?$AA@
	push	ecx
	call	_sprintf

; 2466 : #endif 
; 2467 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	1
$LL1451@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1451@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN231@exprint_re:

; 2468 :          return;
; 2469 : 
; 2470 :       case PUSHPI_NODE:
; 2471 :          sprintf(pos,"pi");

	push	OFFSET ??_C@_02OAHAJOFD@pi?$AA@
	push	ecx
	call	_sprintf

; 2472 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1452@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1452@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN230@exprint_re:

; 2473 :          return;
; 2474 : 
; 2475 :       case PUSHE_NODE:
; 2476 :          sprintf(pos,"e");

	push	OFFSET ??_C@_01KGKMHCOC@e?$AA@
	push	ecx
	call	_sprintf

; 2477 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1453@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1453@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN229@exprint_re:

; 2478 :          return;
; 2479 : 
; 2480 :       case PUSHG_NODE:
; 2481 :          sprintf(pos,"G");

	push	OFFSET ??_C@_01BBODEMC@G?$AA@
	push	ecx
	call	_sprintf

; 2482 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1454@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1454@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN228@exprint_re:

; 2483 :          return;
; 2484 : 
; 2485 :       case COORD_NODE:
; 2486 :          if ( node->left )

	mov	eax, DWORD PTR [ebx+4]
	test	eax, eax
	je	SHORT $LN227@exprint_re

; 2487 :          { exprint_recur(node+node->left,PREC_COND);

	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	13					; 0000000dH
	push	eax
	call	_exprint_recur

; 2488 :            sprintf(pos,"."); pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_01LFCBOECM@?4?$AA@
	push	eax
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
$LL1455@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1455@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax
$LN227@exprint_re:

; 2489 :          }
; 2490 :          if ( (vch == 'X') && (node->op2.coordnum+1 <= 3) )

	mov	cl, BYTE PTR _vch
	cmp	cl, 88					; 00000058H
	jne	SHORT $LN226@exprint_re
	mov	eax, DWORD PTR [ebx+136]
	lea	edx, DWORD PTR [eax+1]
	cmp	edx, 3
	jg	SHORT $LN226@exprint_re

; 2491 :            sprintf(msg,"%c",'x'+node->op2.coordnum);

	add	eax, 120				; 00000078H
	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_02HAOIJKIC@?$CFc?$AA@
	push	eax
	call	_sprintf

; 2494 :          print_attr(node,msg);

	mov	edx, DWORD PTR _msg
	add	esp, 12					; 0000000cH
	push	edx
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN226@exprint_re:

; 2492 :          else
; 2493 :            sprintf(msg,"%c%d",vch,node->op2.coordnum+1);

	mov	edx, DWORD PTR [ebx+136]
	movsx	eax, cl
	mov	ecx, DWORD PTR _msg
	inc	edx
	push	edx
	push	eax
	push	OFFSET ??_C@_04CGHINKND@?$CFc?$CFd?$AA@
	push	ecx
	call	_sprintf

; 2494 :          print_attr(node,msg);

	mov	edx, DWORD PTR _msg
	add	esp, 16					; 00000010H
	push	edx
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN224@exprint_re:

; 2495 :          return;
; 2496 : 
; 2497 :       case PARAM_NODE:
; 2498 :          sprintf(msg,"p%d",node->op2.coordnum+1);

	mov	eax, DWORD PTR [ebx+136]
	mov	ecx, DWORD PTR _msg
	inc	eax
	push	eax
	push	OFFSET ??_C@_03IKJDKKNH@p?$CFd?$AA@
	push	ecx
	call	_sprintf

; 2499 :          print_attr(node,msg);

	mov	edx, DWORD PTR _msg
	push	edx
	push	ebx
	call	_print_attr
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN223@exprint_re:

; 2500 :          return;
; 2501 : 
; 2502 :       case PUSHPARAM_NODE:
; 2503 : 	     if ( (vch == 'X') && (node->op1.coordnum+1 <= web.sdim) && (web.sdim <= 3) )

	mov	dl, BYTE PTR _vch
	cmp	dl, 88					; 00000058H
	jne	$LN222@exprint_re
	mov	eax, DWORD PTR [ebx+32]
	mov	ecx, DWORD PTR _web+616
	lea	esi, DWORD PTR [eax+1]
	cmp	esi, ecx
	jg	SHORT $LN222@exprint_re
	cmp	ecx, 3
	jg	SHORT $LN222@exprint_re

; 2504 :            sprintf(msg,"%c",'x'+node->op1.coordnum);

	add	eax, 120				; 00000078H
	push	eax
	mov	eax, DWORD PTR _msg
	push	OFFSET ??_C@_02HAOIJKIC@?$CFc?$AA@
	push	eax
	call	_sprintf

; 2507 :          print_attr(node,msg);

	mov	ecx, DWORD PTR _msg
	add	esp, 12					; 0000000cH
	push	ecx
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN222@exprint_re:

; 2505 :          else
; 2506 : 		   sprintf(msg,"%c%d",vch,node->op1.coordnum+1);

	mov	ecx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR _msg
	inc	ecx
	push	ecx
	movsx	edx, dl
	push	edx
	push	OFFSET ??_C@_04CGHINKND@?$CFc?$CFd?$AA@
	push	eax
	call	_sprintf

; 2507 :          print_attr(node,msg);

	mov	ecx, DWORD PTR _msg
	add	esp, 16					; 00000010H
	push	ecx
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN220@exprint_re:

; 2508 :          return;
; 2509 : 
; 2510 :     case SET_MMODULUS_NODE:
; 2511 :           sprintf(pos,"%s.modulus %s ",METH_INSTANCE(node->op1.meth_id)->name,
; 2512 :               assign_symbol(node->op2.assigntype)); 

	mov	edx, DWORD PTR [ebx+136]
	push	edx
	call	_assign_symbol
	push	eax
	mov	eax, DWORD PTR [ebx+32]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list
	push	eax
	push	OFFSET ??_C@_0P@HKKNDHOK@?$CFs?4modulus?5?$CFs?5?$AA@
	push	ecx
	call	_sprintf

; 2513 :           pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 20					; 00000014H
	lea	edx, DWORD PTR [eax+1]
$LL1456@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1456@exprint_re

; 2514 :           exprint_recur(node+node->left,PREC_ASSIGN);
; 2515 :           break;

	jmp	$LN1679@exprint_re
$LN219@exprint_re:

; 2516 : 
; 2517 :     case SET_QMODULUS_NODE:
; 2518 :           sprintf(pos,"%s.modulus %s ",GEN_QUANT(node->op1.quant_id)->name,
; 2519 :                assign_symbol(node->op2.assigntype)); 

	mov	edx, DWORD PTR [ebx+136]
	push	edx
	call	_assign_symbol
	push	eax
	mov	eax, DWORD PTR [ebx+32]
	imul	eax, 368				; 00000170H
	add	eax, DWORD PTR _gen_quant_list
	push	eax
	push	OFFSET ??_C@_0P@HKKNDHOK@?$CFs?4modulus?5?$CFs?5?$AA@
	push	ecx
	call	_sprintf

; 2520 :           pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 20					; 00000014H
	lea	edx, DWORD PTR [eax+1]
$LL1457@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1457@exprint_re

; 2521 :           exprint_recur(node+node->left,PREC_ASSIGN);
; 2522 :           break;

	jmp	$LN1684@exprint_re
$LN218@exprint_re:

; 2523 : 
; 2524 :     case SET_QTARGET_NODE:
; 2525 :           sprintf(pos,"%s.target %s ",GEN_QUANT(node->op1.quant_id)->name,
; 2526 :           assign_symbol(node->op2.assigntype)); 

	mov	edx, DWORD PTR [ebx+136]
	push	edx
	call	_assign_symbol
	push	eax
	mov	eax, DWORD PTR [ebx+32]
	imul	eax, 368				; 00000170H
	add	eax, DWORD PTR _gen_quant_list
	push	eax
	push	OFFSET ??_C@_0O@DJDLCKNJ@?$CFs?4target?5?$CFs?5?$AA@
	push	ecx
	call	_sprintf

; 2527 :           pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 20					; 00000014H
	lea	edx, DWORD PTR [eax+1]
$LL1458@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1458@exprint_re

; 2528 :           exprint_recur(node+node->left,PREC_ASSIGN);
; 2529 :           break;

	jmp	$LN1684@exprint_re
$LN217@exprint_re:

; 2530 : 
; 2531 :     case SET_QVOLCONST_NODE:
; 2532 :           sprintf(pos,"%s.volconst %s ",GEN_QUANT(node->op1.quant_id)->name,
; 2533 :           assign_symbol(node->op2.assigntype)); 

	mov	edx, DWORD PTR [ebx+136]
	push	edx
	call	_assign_symbol
	push	eax
	mov	eax, DWORD PTR [ebx+32]
	imul	eax, 368				; 00000170H
	add	eax, DWORD PTR _gen_quant_list
	push	eax
	push	OFFSET ??_C@_0BA@NBKDJPNO@?$CFs?4volconst?5?$CFs?5?$AA@
	push	ecx
	call	_sprintf

; 2534 :           pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 20					; 00000014H
	lea	edx, DWORD PTR [eax+1]
$LL1459@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1459@exprint_re

; 2535 :           exprint_recur(node+node->left,PREC_ASSIGN);
; 2536 :           break;

	jmp	$LN1684@exprint_re
$LN216@exprint_re:

; 2537 : 
; 2538 :     case SET_QTOLERANCE_NODE:
; 2539 :           sprintf(pos,"%s.tolerance %s ",GEN_QUANT(node->op1.quant_id)->name,
; 2540 :           assign_symbol(node->op2.assigntype)); 

	mov	edx, DWORD PTR [ebx+136]
	push	edx
	call	_assign_symbol
	push	eax
	mov	eax, DWORD PTR [ebx+32]
	imul	eax, 368				; 00000170H
	add	eax, DWORD PTR _gen_quant_list
	push	eax
	push	OFFSET ??_C@_0BB@KCCCOBAL@?$CFs?4tolerance?5?$CFs?5?$AA@
	push	ecx
	call	_sprintf

; 2541 :           pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 20					; 00000014H
	lea	edx, DWORD PTR [eax+1]
$LL1460@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1460@exprint_re

; 2542 :           exprint_recur(node+node->left,PREC_ASSIGN);
; 2543 :           break;

	jmp	$LN1684@exprint_re
$LN215@exprint_re:

; 2544 : 
; 2545 :       case PUSHQFIXED_NODE:
; 2546 :          sprintf(pos,"%s.fixed",GEN_QUANT(node->op1.quant_id)->name);

	mov	edx, DWORD PTR [ebx+32]
	imul	edx, 368				; 00000170H
	add	edx, DWORD PTR _gen_quant_list
	push	edx
	push	OFFSET ??_C@_08MHEECOGP@?$CFs?4fixed?$AA@
	push	ecx
	call	_sprintf

; 2547 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1461@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1461@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN214@exprint_re:

; 2548 :          return;
; 2549 : 
; 2550 :       case PUSHQENERGY_NODE:
; 2551 :          sprintf(pos,"%s.energy",GEN_QUANT(node->op1.quant_id)->name);

	mov	eax, DWORD PTR [ebx+32]
	imul	eax, 368				; 00000170H
	add	eax, DWORD PTR _gen_quant_list
	push	eax
	push	OFFSET ??_C@_09FICCFCDB@?$CFs?4energy?$AA@
	push	ecx
	call	_sprintf

; 2552 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1462@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1462@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN213@exprint_re:

; 2553 :          return;
; 2554 : 
; 2555 :       case PUSHQINFO_ONLY_NODE:
; 2556 :          sprintf(pos,"%s.info_only",GEN_QUANT(node->op1.quant_id)->name);

	mov	edx, DWORD PTR [ebx+32]
	imul	edx, 368				; 00000170H
	add	edx, DWORD PTR _gen_quant_list
	push	edx
	push	OFFSET ??_C@_0N@IJLOHMIH@?$CFs?4info_only?$AA@
	push	ecx
	call	_sprintf

; 2557 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1463@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1463@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN212@exprint_re:

; 2558 :          return;
; 2559 : 
; 2560 :       case PUSHQCONSERVED_NODE:
; 2561 :          sprintf(pos,"%s.conserved",GEN_QUANT(node->op1.quant_id)->name);

	mov	eax, DWORD PTR [ebx+32]
	imul	eax, 368				; 00000170H
	add	eax, DWORD PTR _gen_quant_list
	push	eax
	push	OFFSET ??_C@_0N@KCPNEKBJ@?$CFs?4conserved?$AA@
	push	ecx
	call	_sprintf

; 2562 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1464@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1464@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN211@exprint_re:

; 2563 :          return;
; 2564 : 
; 2565 :       case PUSHQPRESSURE_NODE:
; 2566 :          sprintf(pos,"%s.pressure",GEN_QUANT(node->op1.quant_id)->name);

	mov	edx, DWORD PTR [ebx+32]
	imul	edx, 368				; 00000170H
	add	edx, DWORD PTR _gen_quant_list
	push	edx
	push	OFFSET ??_C@_0M@NFGODCJB@?$CFs?4pressure?$AA@
	push	ecx
	call	_sprintf

; 2567 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1465@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1465@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN210@exprint_re:

; 2568 :          return;
; 2569 : 
; 2570 :       case PUSHQTARGET_NODE:
; 2571 :          sprintf(pos,"%s.target",GEN_QUANT(node->op1.quant_id)->name);

	mov	eax, DWORD PTR [ebx+32]
	imul	eax, 368				; 00000170H
	add	eax, DWORD PTR _gen_quant_list
	push	eax
	push	OFFSET ??_C@_09GLPADBIC@?$CFs?4target?$AA@
	push	ecx
	call	_sprintf

; 2572 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1466@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1466@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN209@exprint_re:

; 2573 :          return;
; 2574 : 
; 2575 :       case PUSHMVALUE_NODE:
; 2576 :          sprintf(pos,"%s.value",METH_INSTANCE(node->op1.meth_id)->name);

	mov	eax, DWORD PTR [ebx+32]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list
	push	eax
	push	OFFSET ??_C@_08COKEDFMM@?$CFs?4value?$AA@
	push	ecx
	call	_sprintf

; 2577 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1467@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1467@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN208@exprint_re:

; 2578 :          return;
; 2579 : 
; 2580 :       case PUSHQVALUE_NODE:
; 2581 :          sprintf(pos,"%s.value",GEN_QUANT(node->op1.quant_id)->name);

	mov	edx, DWORD PTR [ebx+32]
	imul	edx, 368				; 00000170H
	add	edx, DWORD PTR _gen_quant_list
	push	edx
	push	OFFSET ??_C@_08COKEDFMM@?$CFs?4value?$AA@
	push	ecx
	call	_sprintf

; 2582 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1468@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1468@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN207@exprint_re:

; 2583 :          return;
; 2584 : 
; 2585 :       case PUSHMMODULUS_NODE:
; 2586 :          sprintf(pos,"%s.modulus",GEN_QUANT(node->op1.meth_id)->name);

	mov	eax, DWORD PTR [ebx+32]
	imul	eax, 368				; 00000170H
	add	eax, DWORD PTR _gen_quant_list
	push	eax
	push	OFFSET ??_C@_0L@IHGBGJIM@?$CFs?4modulus?$AA@
	push	ecx
	call	_sprintf

; 2587 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL1469@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1469@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN206@exprint_re:

; 2588 :          return;
; 2589 : 
; 2590 :       case PUSHQMODULUS_NODE:
; 2591 :          sprintf(pos,"%s.modulus",GEN_QUANT(node->op1.quant_id)->name);

	mov	edx, DWORD PTR [ebx+32]
	imul	edx, 368				; 00000170H
	add	edx, DWORD PTR _gen_quant_list
	push	edx
	push	OFFSET ??_C@_0L@IHGBGJIM@?$CFs?4modulus?$AA@
	push	ecx
	call	_sprintf

; 2592 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1470@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1470@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN205@exprint_re:

; 2593 :          return;
; 2594 : 
; 2595 :       case PUSHQVOLCONST_NODE:
; 2596 :          sprintf(pos,"%s.volconst",globals(node->op1.quant_id)->name);

	mov	ebx, DWORD PTR [ebx+32]
	mov	eax, ebx
	and	eax, -16777216				; ff000000H
	cmp	eax, 268435456				; 10000000H
	je	SHORT $LN995@exprint_re
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN997@exprint_re
	and	ebx, 16777215				; 00ffffffH
	imul	ebx, 224				; 000000e0H
	add	ebx, DWORD PTR [esi]
	jmp	SHORT $LN996@exprint_re
$LN997@exprint_re:
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN995@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	ebx, 16777215				; 00ffffffH
	mov	ebx, DWORD PTR [edx+ebx*4]
	jmp	SHORT $LN996@exprint_re
$LN995@exprint_re:
	mov	eax, DWORD PTR _web+5652
	and	ebx, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR _dymem
	mov	ebx, DWORD PTR [edx+eax]
$LN996@exprint_re:
	push	ebx
	push	OFFSET ??_C@_0M@KHJHMLJD@?$CFs?4volconst?$AA@
	push	ecx
	call	_sprintf

; 2597 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1471@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1471@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN204@exprint_re:

; 2598 :          return;
; 2599 : 
; 2600 :       case PUSHDELTA_NODE:
; 2601 :          sprintf(pos,"%s.pdelta",globals(node->op1.name_id)->name);

	mov	ebx, DWORD PTR [ebx+32]
	mov	eax, ebx
	and	eax, -16777216				; ff000000H
	cmp	eax, 268435456				; 10000000H
	je	SHORT $LN1001@exprint_re
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN1003@exprint_re
	and	ebx, 16777215				; 00ffffffH
	imul	ebx, 224				; 000000e0H
	add	ebx, DWORD PTR [esi]
	jmp	SHORT $LN1002@exprint_re
$LN1003@exprint_re:
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN1001@exprint_re
	mov	eax, DWORD PTR _web+5656
	and	ebx, 16777215				; 00ffffffH
	mov	ebx, DWORD PTR [eax+ebx*4]
	jmp	SHORT $LN1002@exprint_re
$LN1001@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	ebx, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR _dymem
	mov	ebx, DWORD PTR [eax+edx]
$LN1002@exprint_re:
	push	ebx
	push	OFFSET ??_C@_09OAOCGHOC@?$CFs?4pdelta?$AA@
	push	ecx
	call	_sprintf

; 2602 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1472@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1472@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN203@exprint_re:

; 2603 :          return;
; 2604 : 
; 2605 :       case PUSH_PARAM_SCALE_NODE:
; 2606 :          sprintf(pos,"%s.pscale",globals(node->op1.name_id)->name);

	mov	ebx, DWORD PTR [ebx+32]
	mov	eax, ebx
	and	eax, -16777216				; ff000000H
	cmp	eax, 268435456				; 10000000H
	je	SHORT $LN1007@exprint_re
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN1009@exprint_re
	and	ebx, 16777215				; 00ffffffH
	imul	ebx, 224				; 000000e0H
	add	ebx, DWORD PTR [esi]
	jmp	SHORT $LN1008@exprint_re
$LN1009@exprint_re:
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN1007@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	ebx, 16777215				; 00ffffffH
	mov	ebx, DWORD PTR [edx+ebx*4]
	jmp	SHORT $LN1008@exprint_re
$LN1007@exprint_re:
	mov	eax, DWORD PTR _web+5652
	and	ebx, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR _dymem
	mov	ebx, DWORD PTR [edx+eax]
$LN1008@exprint_re:
	push	ebx
	push	OFFSET ??_C@_09PFECEPHA@?$CFs?4pscale?$AA@
	push	ecx
	call	_sprintf

; 2607 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1473@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1473@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN202@exprint_re:

; 2608 :          return;
; 2609 : 
; 2610 :       case PUSH_PARAM_FIXED_NODE:
; 2611 :          sprintf(pos,"%s.fixed",globals(node->op1.name_id)->name);

	mov	ebx, DWORD PTR [ebx+32]
	mov	eax, ebx
	and	eax, -16777216				; ff000000H
	cmp	eax, 268435456				; 10000000H
	je	SHORT $LN1013@exprint_re
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN1015@exprint_re
	and	ebx, 16777215				; 00ffffffH
	imul	ebx, 224				; 000000e0H
	add	ebx, DWORD PTR [esi]
	jmp	SHORT $LN1014@exprint_re
$LN1015@exprint_re:
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN1013@exprint_re
	mov	eax, DWORD PTR _web+5656
	and	ebx, 16777215				; 00ffffffH
	mov	ebx, DWORD PTR [eax+ebx*4]
	jmp	SHORT $LN1014@exprint_re
$LN1013@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	ebx, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR _dymem
	mov	ebx, DWORD PTR [eax+edx]
$LN1014@exprint_re:
	push	ebx
	push	OFFSET ??_C@_08MHEECOGP@?$CFs?4fixed?$AA@
	push	ecx
	call	_sprintf

; 2612 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1474@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1474@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN201@exprint_re:

; 2613 :          return;
; 2614 : 
; 2615 :       case PUSH_PARAM_FORCE_NODE:
; 2616 :          sprintf(pos,"%s.p_force",globals(node->op1.name_id)->name);

	mov	ebx, DWORD PTR [ebx+32]
	mov	eax, ebx
	and	eax, -16777216				; ff000000H
	cmp	eax, 268435456				; 10000000H
	je	SHORT $LN1019@exprint_re
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN1021@exprint_re
	and	ebx, 16777215				; 00ffffffH
	imul	ebx, 224				; 000000e0H
	add	ebx, DWORD PTR [esi]
	jmp	SHORT $LN1020@exprint_re
$LN1021@exprint_re:
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN1019@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	ebx, 16777215				; 00ffffffH
	mov	ebx, DWORD PTR [edx+ebx*4]
	jmp	SHORT $LN1020@exprint_re
$LN1019@exprint_re:
	mov	eax, DWORD PTR _web+5652
	and	ebx, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR _dymem
	mov	ebx, DWORD PTR [edx+eax]
$LN1020@exprint_re:
	push	ebx
	push	OFFSET ??_C@_0L@BLNBIMLF@?$CFs?4p_force?$AA@
	push	ecx
	call	_sprintf

; 2617 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL1475@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1475@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN200@exprint_re:

; 2618 :          return;
; 2619 : 
; 2620 :       case PUSH_PARAM_VELOCITY_NODE:
; 2621 :          sprintf(pos,"%s.p_velocity",globals(node->op1.name_id)->name);

	mov	ebx, DWORD PTR [ebx+32]
	mov	eax, ebx
	and	eax, -16777216				; ff000000H
	cmp	eax, 268435456				; 10000000H
	je	SHORT $LN1025@exprint_re
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN1027@exprint_re
	and	ebx, 16777215				; 00ffffffH
	imul	ebx, 224				; 000000e0H
	add	ebx, DWORD PTR [esi]
	jmp	SHORT $LN1026@exprint_re
$LN1027@exprint_re:
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN1025@exprint_re
	mov	eax, DWORD PTR _web+5656
	and	ebx, 16777215				; 00ffffffH
	mov	ebx, DWORD PTR [eax+ebx*4]
	jmp	SHORT $LN1026@exprint_re
$LN1025@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	ebx, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR _dymem
	mov	ebx, DWORD PTR [eax+edx]
$LN1026@exprint_re:
	push	ebx
	push	OFFSET ??_C@_0O@LMDPDPKO@?$CFs?4p_velocity?$AA@
	push	ecx
	call	_sprintf

; 2622 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1476@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1476@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN199@exprint_re:

; 2623 :          return;
; 2624 : 
; 2625 :       case PUSH_PARAM_EXTRA_NODE:
; 2626 :          sprintf(pos,"%s.%s",globals(node->op1.name_id)->name,
; 2627 :               EXTRAS(0)[node->op2.extranum].name);

	mov	eax, DWORD PTR [ebx+32]
	mov	esi, DWORD PTR _dymem
	mov	edx, eax
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN1031@exprint_re
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN1033@exprint_re
	mov	edx, DWORD PTR _localbase$[ebp]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [edx]
	jmp	SHORT $LN1032@exprint_re
$LN1033@exprint_re:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN1031@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN1032@exprint_re
$LN1031@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+esi]
$LN1032@exprint_re:
	mov	edx, DWORD PTR [ebx+136]
	imul	edx, 240				; 000000f0H
	add	edx, DWORD PTR _web+104
	add	edx, esi
	push	edx
	push	eax
	push	OFFSET ??_C@_05NNFHCGPF@?$CFs?4?$CFs?$AA@
	push	ecx
	call	_sprintf

; 2628 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	5
$LL1477@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1477@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN198@exprint_re:

; 2629 :          return;
; 2630 : 
; 2631 :       case ELEMENT_IDENT_NODE:
; 2632 :          { struct global *g = globals(node->op3.name_id); 

	mov	ebx, DWORD PTR [ebx+140]
	mov	eax, ebx
	and	eax, -16777216				; ff000000H
	cmp	eax, 268435456				; 10000000H
	je	SHORT $LN1037@exprint_re
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN1039@exprint_re
	and	ebx, 16777215				; 00ffffffH
	imul	ebx, 224				; 000000e0H
	add	ebx, DWORD PTR [esi]
	jmp	SHORT $LN1038@exprint_re
$LN1039@exprint_re:
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN1037@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	ebx, 16777215				; 00ffffffH
	mov	ebx, DWORD PTR [edx+ebx*4]
	jmp	SHORT $LN1038@exprint_re
$LN1037@exprint_re:
	mov	eax, DWORD PTR _web+5652
	and	ebx, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR _dymem
	mov	ebx, DWORD PTR [edx+eax]
$LN1038@exprint_re:

; 2633 :            sprintf(pos,"%s",g->name);

	push	ebx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	ecx
	call	_sprintf

; 2634 :            pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1478@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1478@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN197@exprint_re:

; 2635 :            return;
; 2636 :          }
; 2637 :       case PUSHGLOBAL_NODE:
; 2638 :       case STRINGGLOBAL_NODE:
; 2639 :        { struct global *g = globals(node->op1.name_id);

	mov	ebx, DWORD PTR [ebx+32]
	mov	eax, ebx
	and	eax, -16777216				; ff000000H
	cmp	eax, 268435456				; 10000000H
	je	SHORT $LN1043@exprint_re
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN1045@exprint_re
	and	ebx, 16777215				; 00ffffffH
	imul	ebx, 224				; 000000e0H
	add	ebx, DWORD PTR [esi]
	jmp	SHORT $LN1044@exprint_re
$LN1045@exprint_re:
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN1043@exprint_re
	mov	eax, DWORD PTR _web+5656
	and	ebx, 16777215				; 00ffffffH
	mov	ebx, DWORD PTR [eax+ebx*4]
	jmp	SHORT $LN1044@exprint_re
$LN1043@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	ebx, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR _dymem
	mov	ebx, DWORD PTR [eax+edx]
$LN1044@exprint_re:

; 2640 :          if ( g->flags & QUANTITY_NAME )

	test	BYTE PTR [ebx+192], -128		; ffffff80H

; 2641 :            sprintf(pos,"total %s",g->name);

	push	ebx
	je	SHORT $LN196@exprint_re
	push	OFFSET ??_C@_08KAJJHIBE@total?5?$CFs?$AA@
	jmp	SHORT $LN1646@exprint_re
$LN196@exprint_re:

; 2642 :          else sprintf(pos,"%s",g->name);

	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
$LN1646@exprint_re:
	push	ecx
	call	_sprintf

; 2643 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1479@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1479@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN194@exprint_re:

; 2644 :          return;
; 2645 :        }
; 2646 :       case PUSH_PERM_GLOBAL_NODE:
; 2647 :       case PERM_STRINGGLOBAL_NODE:
; 2648 :          sprintf(pos,"%s",perm_globals(node->op1.name_id)->name);

	mov	eax, DWORD PTR [ebx+32]
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	ecx
	call	_sprintf

; 2649 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1480@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1480@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN193@exprint_re:

; 2650 :          return;
; 2651 : 
; 2652 :       case USERFUNC_NODE:
; 2653 :          sprintf(pos,"usr%d",node->op1.userfunc+1);

	mov	edx, DWORD PTR [ebx+32]
	inc	edx
	push	edx
	push	OFFSET ??_C@_05FFIBBKIO@usr?$CFd?$AA@
	push	ecx
	call	_sprintf

; 2654 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1481@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1481@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN192@exprint_re:

; 2655 :          return;
; 2656 : 
; 2657 :       case DYNAMIC_LOAD_FUNC_NODE:
; 2658 :          sprintf(pos,"%s",globals(node->op2.name_id)->name);

	mov	ebx, DWORD PTR [ebx+136]
	mov	eax, ebx
	and	eax, -16777216				; ff000000H
	cmp	eax, 268435456				; 10000000H
	je	SHORT $LN1049@exprint_re
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN1051@exprint_re
	and	ebx, 16777215				; 00ffffffH
	imul	ebx, 224				; 000000e0H
	add	ebx, DWORD PTR [esi]
	jmp	SHORT $LN1050@exprint_re
$LN1051@exprint_re:
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN1049@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	ebx, 16777215				; 00ffffffH
	mov	ebx, DWORD PTR [edx+ebx*4]
	jmp	SHORT $LN1050@exprint_re
$LN1049@exprint_re:
	mov	eax, DWORD PTR _web+5652
	and	ebx, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR _dymem
	mov	ebx, DWORD PTR [edx+eax]
$LN1050@exprint_re:
	push	ebx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	ecx
	call	_sprintf

; 2659 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1482@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1482@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN191@exprint_re:

; 2660 :          return;
; 2661 : 
; 2662 :       case ARRAY_ADD_NODE:
; 2663 :          binary_print(node,prec_parent,PREC_ADD," + ",PREC_ADD);

	mov	ecx, DWORD PTR _prec_parent$[ebp]
	push	35					; 00000023H
	push	OFFSET ??_C@_03NPBFACHO@?5?$CL?5?$AA@
	push	35					; 00000023H
	push	ecx
	push	ebx
	call	_binary_print
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN190@exprint_re:

; 2664 :          return;
; 2665 : 
; 2666 :       case ARRAY_SUBTRACT_NODE:
; 2667 :          binary_print(node,prec_parent,PREC_ADD," - ",PREC_ADD);

	mov	edx, DWORD PTR _prec_parent$[ebp]
	push	35					; 00000023H
	push	OFFSET ??_C@_03NLJIHOMM@?5?9?5?$AA@
	push	35					; 00000023H
	push	edx
	push	ebx
	call	_binary_print
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN188@exprint_re:

; 2668 :          return;
; 2669 : 
; 2670 :       case ARRAY_MULTIPLY_NODE:
; 2671 :       case ARRAY_SCALAR_MULTIPLY_NODE:
; 2672 :          binary_print(node,prec_parent,PREC_MUL," * ",PREC_MUL);
; 2673 :          return;
; 2674 : 
; 2675 :       case ARRAY_SCALAR_DIVIDE_NODE: // special, since denominator got swapped to first
; 2676 :         if ( prec_parent > PREC_DIV ) 

	mov	esi, DWORD PTR _prec_parent$[ebp]
	cmp	esi, 40					; 00000028H
	jle	SHORT $LN187@exprint_re

; 2677 :         { sprintf(pos,"(");

	push	OFFSET ??_C@_01ODHLEDKK@?$CI?$AA@
	push	ecx
	call	_sprintf

; 2678 :           pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	1
$LL1483@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1483@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax
$LN187@exprint_re:

; 2679 :         }
; 2680 :         exprint_recur(node+node->right,PREC_DIV);

	mov	ecx, DWORD PTR [ebx+8]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	push	40					; 00000028H
	push	ecx
	call	_exprint_recur

; 2681 :         sprintf(pos,"/");

	mov	edx, DWORD PTR _pos
	push	OFFSET ??_C@_01KMDKNFGN@?1?$AA@
	push	edx
	call	_sprintf

; 2682 :         pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1484@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1484@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 2683 :         exprint_recur(node+node->left,PREC_DIV+1);

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	41					; 00000029H
	push	eax
	call	_exprint_recur
	add	esp, 8

; 2684 :         if ( prec_parent > PREC_DIV )

	cmp	esi, 40					; 00000028H
	jle	$LN730@exprint_re

; 2685 :         { sprintf(pos,")");

	mov	ecx, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	ecx
	call	_sprintf

; 2686 :           pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL1485@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1485@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN185@exprint_re:

; 2687 :         }
; 2688 :         break;
; 2689 : 
; 2690 :       case PLUS_NODE:
; 2691 :          binary_print(node,prec_parent,PREC_ADD," + ",PREC_ADD);

	mov	edx, DWORD PTR _prec_parent$[ebp]
	push	35					; 00000023H
	push	OFFSET ??_C@_03NPBFACHO@?5?$CL?5?$AA@
	push	35					; 00000023H
	push	edx
	push	ebx
	call	_binary_print
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN184@exprint_re:

; 2692 :          return;
; 2693 : 
; 2694 :       case MINUS_NODE:
; 2695 :          binary_print(node,prec_parent,PREC_SUB," - ",PREC_SUB+1);

	mov	eax, DWORD PTR _prec_parent$[ebp]
	push	36					; 00000024H
	push	OFFSET ??_C@_03NLJIHOMM@?5?9?5?$AA@
	push	35					; 00000023H
	push	eax
	push	ebx
	call	_binary_print
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN183@exprint_re:

; 2696 :          return;
; 2697 : 
; 2698 :       case EQUATE_NODE:
; 2699 :          binary_print(node,prec_parent,PREC_ASSIGN," = ",PREC_ASSIGN+1);

	mov	ecx, DWORD PTR _prec_parent$[ebp]
	push	11					; 0000000bH
	push	OFFSET ??_C@_03MHLONNLM@?5?$DN?5?$AA@
	push	10					; 0000000aH
	push	ecx
	push	ebx
	call	_binary_print
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN182@exprint_re:

; 2700 :          return;
; 2701 : 
; 2702 :       case TIMES_NODE:
; 2703 :          binary_print(node,prec_parent,PREC_MUL,"*",PREC_MUL);

	mov	edx, DWORD PTR _prec_parent$[ebp]
	push	40					; 00000028H
	push	OFFSET ??_C@_01NBENCBCI@?$CK?$AA@
	push	40					; 00000028H
	push	edx
	push	ebx
	call	_binary_print
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN181@exprint_re:

; 2704 :          return;
; 2705 : 
; 2706 :       case DIVIDE_NODE:
; 2707 :          binary_print(node,prec_parent,PREC_DIV,"/",PREC_DIV+1);

	mov	eax, DWORD PTR _prec_parent$[ebp]
	push	41					; 00000029H
	push	OFFSET ??_C@_01KMDKNFGN@?1?$AA@
	push	40					; 00000028H
	push	eax
	push	ebx
	call	_binary_print
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN180@exprint_re:

; 2708 :          return;
; 2709 : 
; 2710 :       case REALMOD_NODE: 
; 2711 :          binary_print(node,prec_parent,PREC_MOD,"%",PREC_MOD+1);

	mov	ecx, DWORD PTR _prec_parent$[ebp]
	push	38					; 00000026H
	push	OFFSET ??_C@_01FGNFDNOH@?$CF?$AA@
	push	37					; 00000025H
	push	ecx
	push	ebx
	call	_binary_print
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN179@exprint_re:

; 2712 :          return;
; 2713 : 
; 2714 :       case IMOD_NODE: 
; 2715 :          binary_print(node,prec_parent,PREC_MOD," imod ",PREC_MOD+1);

	mov	edx, DWORD PTR _prec_parent$[ebp]
	push	38					; 00000026H
	push	OFFSET ??_C@_06FKGIFEHI@?5imod?5?$AA@
	push	37					; 00000025H
	push	edx
	push	ebx
	call	_binary_print
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN178@exprint_re:

; 2716 :          return;
; 2717 : 
; 2718 :       case IDIV_NODE:
; 2719 :          binary_print(node,prec_parent,PREC_DIV," idiv ",PREC_DIV+1);

	mov	eax, DWORD PTR _prec_parent$[ebp]
	push	41					; 00000029H
	push	OFFSET ??_C@_06GNLBBOML@?5idiv?5?$AA@
	push	40					; 00000028H
	push	eax
	push	ebx
	call	_binary_print
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN176@exprint_re:

; 2725 :          return;
; 2726 : 
; 2727 :       case COND_EXPR_NODE:
; 2728 :          strcat(pos++,"(");

	lea	edi, DWORD PTR [ecx-1]
	inc	ecx
	mov	DWORD PTR _pos, ecx
$LL1486@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1486@exprint_re

; 2729 :          binary_print(node,prec_parent,PREC_COND,")?(",PREC_COND);

	mov	edx, DWORD PTR _prec_parent$[ebp]
	mov	cx, WORD PTR ??_C@_01ODHLEDKK@?$CI?$AA@
	push	13					; 0000000dH
	push	OFFSET ??_C@_03HBOLMMFA@?$CJ?$DP?$CI?$AA@
	push	13					; 0000000dH
	push	edx
	push	ebx
	mov	WORD PTR [edi], cx
	call	_binary_print
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN175@exprint_re:

; 1334 :          exprint_recur(node+node->left,PREC_ASSIGN);

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H

; 2730 :          return;
; 2731 : 
; 2732 :       case COND_TEST_NODE:
; 2733 :          exprint_recur(node+node->left,PREC_COND);

	push	13					; 0000000dH
	add	eax, ebx
	push	eax
	jmp	$LN1652@exprint_re
$LN174@exprint_re:

; 2734 :          return;
; 2735 : 
; 2736 :       case INV_NODE:
; 2737 :          exprint_recur(node+node->left,PREC_POW);

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	push	50					; 00000032H
	push	ecx
	call	_exprint_recur

; 2738 :          sprintf(pos,"^(-1)");

	mov	edx, DWORD PTR _pos
	push	OFFSET ??_C@_05LKLPDELB@?$FO?$CI?91?$CJ?$AA@
	push	edx
	call	_sprintf

; 2739 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL1487@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1487@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN173@exprint_re:

; 2740 :          return;
; 2741 : 
; 2742 :       case INTPOW_NODE:
; 2743 :          exprint_recur(node+node->left,PREC_POW);

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	50					; 00000032H
	push	eax
	call	_exprint_recur

; 2744 :          sprintf(pos,"^%1d",node->op1.intpow);

	mov	ecx, DWORD PTR [ebx+32]
	mov	edx, DWORD PTR _pos
	push	ecx
	push	OFFSET ??_C@_04NCKAHEA@?$FO?$CF1d?$AA@
	push	edx
	call	_sprintf

; 2745 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 20					; 00000014H
	lea	edx, DWORD PTR [eax+1]
$LL1488@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1488@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN172@exprint_re:

; 2746 :          return;
; 2747 : 
; 2748 :       case POW_NODE:
; 2749 :          binary_print(node,prec_parent,PREC_POW,"**",PREC_POW);

	mov	eax, DWORD PTR _prec_parent$[ebp]
	push	50					; 00000032H
	push	OFFSET ??_C@_02FKAPCJPD@?$CK?$CK?$AA@
	push	50					; 00000032H
	push	eax
	push	ebx
	call	_binary_print
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN171@exprint_re:

; 2750 :          return;
; 2751 : 
; 2752 :       case MAXIMUM_NODE:
; 2753 :          strcat(pos,"maximum(");

	lea	esi, DWORD PTR [ecx-1]
	npad	3
$LL1489@exprint_re:
	mov	al, BYTE PTR [esi+1]
	inc	esi
	test	al, al
	jne	SHORT $LL1489@exprint_re
	mov	edx, DWORD PTR ??_C@_08HIPGPINC@maximum?$CI?$AA@
	mov	DWORD PTR [esi], edx
	mov	eax, DWORD PTR ??_C@_08HIPGPINC@maximum?$CI?$AA@+4
	mov	DWORD PTR [esi+4], eax
	mov	dl, BYTE PTR ??_C@_08HIPGPINC@maximum?$CI?$AA@+8
	mov	BYTE PTR [esi+8], dl

; 2754 :          pos += strlen(pos);

	mov	esi, ecx
	lea	edx, DWORD PTR [esi+1]
$LL1490@exprint_re:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL1490@exprint_re

; 2755 :          exprint_recur(node+node->left,PREC_ARG);

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	sub	esi, edx
	add	eax, ebx
	add	ecx, esi
	push	0
	push	eax
	mov	DWORD PTR _pos, ecx
	call	_exprint_recur

; 2756 :          strcat(pos++,",");

	mov	ecx, DWORD PTR _pos
	add	esp, 8
	lea	eax, DWORD PTR [ecx-1]
	inc	ecx
	mov	DWORD PTR _pos, ecx
	npad	3
$LL1491@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1491@exprint_re
	mov	cx, WORD PTR ??_C@_01IHBHIGKO@?0?$AA@
	mov	edi, eax
	mov	WORD PTR [edi], cx

; 2757 :          exprint_recur(node+node->right,PREC_ARG);

	mov	edx, DWORD PTR [ebx+8]
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	0
	push	edx
	call	_exprint_recur

; 2758 :          strcat(pos++,")");

	mov	ecx, DWORD PTR _pos
	add	esp, 8
	lea	eax, DWORD PTR [ecx-1]
	inc	ecx
	mov	DWORD PTR _pos, ecx
	npad	6
$LL1492@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1492@exprint_re
	mov	edi, eax
	mov	ax, WORD PTR ??_C@_01PKGAHCOL@?$CJ?$AA@
	mov	WORD PTR [edi], ax
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN170@exprint_re:

; 2759 :          return;
; 2760 : 
; 2761 :       case MINIMUM_NODE:
; 2762 :          strcat(pos,"minimum(");

	lea	esi, DWORD PTR [ecx-1]
$LL1493@exprint_re:
	mov	al, BYTE PTR [esi+1]
	inc	esi
	test	al, al
	jne	SHORT $LL1493@exprint_re
	mov	edx, DWORD PTR ??_C@_08KPBNEKJD@minimum?$CI?$AA@
	mov	DWORD PTR [esi], edx
	mov	eax, DWORD PTR ??_C@_08KPBNEKJD@minimum?$CI?$AA@+4
	mov	DWORD PTR [esi+4], eax
	mov	dl, BYTE PTR ??_C@_08KPBNEKJD@minimum?$CI?$AA@+8
	mov	BYTE PTR [esi+8], dl

; 2763 :          pos += strlen(pos);

	mov	esi, ecx
	lea	edx, DWORD PTR [esi+1]
	npad	3
$LL1494@exprint_re:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL1494@exprint_re

; 2764 :          exprint_recur(node+node->left,PREC_ARG);

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	sub	esi, edx
	add	eax, ebx
	add	ecx, esi
	push	0
	push	eax
	mov	DWORD PTR _pos, ecx
	call	_exprint_recur

; 2765 :          strcat(pos++,",");

	mov	ecx, DWORD PTR _pos
	add	esp, 8
	lea	eax, DWORD PTR [ecx-1]
	inc	ecx
	mov	DWORD PTR _pos, ecx
$LL1495@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1495@exprint_re
	mov	cx, WORD PTR ??_C@_01IHBHIGKO@?0?$AA@
	mov	edi, eax
	mov	WORD PTR [edi], cx

; 2766 :          exprint_recur(node+node->right,PREC_ARG);

	mov	edx, DWORD PTR [ebx+8]
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	0
	push	edx
	call	_exprint_recur

; 2767 :          strcat(pos++,")");

	mov	ecx, DWORD PTR _pos
	add	esp, 8
	lea	eax, DWORD PTR [ecx-1]
	inc	ecx
	mov	DWORD PTR _pos, ecx
$LL1496@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1496@exprint_re
	mov	edi, eax
	mov	ax, WORD PTR ??_C@_01PKGAHCOL@?$CJ?$AA@
	mov	WORD PTR [edi], ax
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN169@exprint_re:

; 2768 :          return;
; 2769 : 
; 2770 :       case INCOMPLETE_ELLIPTICF_NODE:
; 2771 :          sprintf(pos,"incompleteEllipticF(");

	push	OFFSET ??_C@_0BF@CELEBKI@incompleteEllipticF?$CI?$AA@
	push	ecx
	call	_sprintf

; 2772 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	5
$LL1497@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1497@exprint_re

; 2773 :          exprint_recur(node+node->left,PREC_ARG);

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	sub	eax, edx
	add	DWORD PTR _pos, eax
	push	0
	push	ecx
	call	_exprint_recur

; 2774 :          strcat(pos++,",");

	mov	ecx, DWORD PTR _pos
	add	esp, 8
	lea	eax, DWORD PTR [ecx-1]
	inc	ecx
	mov	DWORD PTR _pos, ecx
$LL1498@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1498@exprint_re
	mov	dx, WORD PTR ??_C@_01IHBHIGKO@?0?$AA@
	mov	edi, eax
	mov	WORD PTR [edi], dx

; 2775 :          exprint_recur(node+node->right,PREC_ARG);

	mov	eax, DWORD PTR [ebx+8]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	0
	push	eax
	call	_exprint_recur

; 2776 :          strcat(pos++,")");

	mov	ecx, DWORD PTR _pos
	add	esp, 8
	lea	eax, DWORD PTR [ecx-1]
	inc	ecx
	mov	DWORD PTR _pos, ecx
	npad	1
$LL1499@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1499@exprint_re
	mov	cx, WORD PTR ??_C@_01PKGAHCOL@?$CJ?$AA@
	mov	edi, eax
	mov	WORD PTR [edi], cx
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN168@exprint_re:

; 2777 :          return;
; 2778 : 
; 2779 :       case INCOMPLETE_ELLIPTICE_NODE:
; 2780 :          sprintf(pos,"incompleteEllipticE(");

	push	OFFSET ??_C@_0BF@NPPPB@incompleteEllipticE?$CI?$AA@
	push	ecx
	call	_sprintf

; 2781 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	5
$LL1500@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1500@exprint_re
	sub	eax, edx

; 2782 :          exprint_recur(node+node->left,PREC_ARG);

	mov	edx, DWORD PTR [ebx+4]
	add	DWORD PTR _pos, eax
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	0
	push	edx
	call	_exprint_recur

; 2783 :          strcat(pos++,",");

	mov	ecx, DWORD PTR _pos
	add	esp, 8
	lea	eax, DWORD PTR [ecx-1]
	inc	ecx
	mov	DWORD PTR _pos, ecx
$LL1501@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1501@exprint_re
	mov	edi, eax
	mov	ax, WORD PTR ??_C@_01IHBHIGKO@?0?$AA@
	mov	WORD PTR [edi], ax

; 2784 :          exprint_recur(node+node->right,PREC_ARG);

	mov	ecx, DWORD PTR [ebx+8]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	push	0
	push	ecx
	call	_exprint_recur

; 2785 :          strcat(pos++,")");

	mov	ecx, DWORD PTR _pos
	add	esp, 8
	lea	eax, DWORD PTR [ecx-1]
	inc	ecx
	mov	DWORD PTR _pos, ecx
	npad	2
$LL1502@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1502@exprint_re
	mov	dx, WORD PTR ??_C@_01PKGAHCOL@?$CJ?$AA@
	mov	edi, eax
	mov	WORD PTR [edi], dx
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN167@exprint_re:

; 2786 :          return;
; 2787 : 
; 2788 :       case ATAN2_NODE:
; 2789 :          sprintf(pos,"atan2(");

	push	OFFSET ??_C@_06NKPIGJJO@atan2?$CI?$AA@
	push	ecx
	call	_sprintf

; 2790 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	5
$LL1503@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1503@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 2791 :          exprint_recur(node+node->left,PREC_ARG);

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	0
	push	eax
	call	_exprint_recur

; 2792 :          strcat(pos++,",");

	mov	ecx, DWORD PTR _pos
	add	esp, 8
	lea	eax, DWORD PTR [ecx-1]
	inc	ecx
	mov	DWORD PTR _pos, ecx
$LL1504@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1504@exprint_re
	mov	cx, WORD PTR ??_C@_01IHBHIGKO@?0?$AA@
	mov	edi, eax
	mov	WORD PTR [edi], cx

; 2793 :          exprint_recur(node+node->right,PREC_ARG);

	mov	edx, DWORD PTR [ebx+8]
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	0
	push	edx
	call	_exprint_recur

; 2794 :          strcat(pos++,")");

	mov	ecx, DWORD PTR _pos
	add	esp, 8
	lea	eax, DWORD PTR [ecx-1]
	inc	ecx
	mov	DWORD PTR _pos, ecx
	npad	1
$LL1505@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1505@exprint_re
	mov	edi, eax
	mov	ax, WORD PTR ??_C@_01PKGAHCOL@?$CJ?$AA@
	mov	WORD PTR [edi], ax
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN166@exprint_re:

; 2795 :          return;
; 2796 : 
; 2797 :       case WRAP_COMPOSE_NODE:
; 2798 :          sprintf(pos,"wrap_compose(");

	push	OFFSET ??_C@_0O@ICELJODO@wrap_compose?$CI?$AA@
	push	ecx
	call	_sprintf

; 2799 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL1506@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1506@exprint_re

; 2800 :          exprint_recur(node+node->left,PREC_ARG);

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	sub	eax, edx
	add	DWORD PTR _pos, eax
	push	0
	push	ecx
	call	_exprint_recur

; 2801 :          strcat(pos++,",");

	mov	ecx, DWORD PTR _pos
	add	esp, 8
	lea	eax, DWORD PTR [ecx-1]
	inc	ecx
	mov	DWORD PTR _pos, ecx
$LL1507@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1507@exprint_re
	mov	dx, WORD PTR ??_C@_01IHBHIGKO@?0?$AA@
	mov	edi, eax
	mov	WORD PTR [edi], dx

; 2802 :          exprint_recur(node+node->right,PREC_ARG);

	mov	eax, DWORD PTR [ebx+8]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	0
	push	eax
	call	_exprint_recur

; 2803 :          strcat(pos++,")");

	mov	ecx, DWORD PTR _pos
	add	esp, 8
	lea	eax, DWORD PTR [ecx-1]
	inc	ecx
	mov	DWORD PTR _pos, ecx
	npad	1
$LL1508@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1508@exprint_re
	mov	cx, WORD PTR ??_C@_01PKGAHCOL@?$CJ?$AA@
	mov	edi, eax
	mov	WORD PTR [edi], cx
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN165@exprint_re:

; 2804 :          return;
; 2805 : 
; 2806 :       case WRAP_INVERSE_NODE:
; 2807 :          sprintf(pos,"wrap_inverse(");

	push	OFFSET ??_C@_0O@HFHNBMBB@wrap_inverse?$CI?$AA@
	push	ecx
	call	_sprintf

; 2808 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	5
$LL1509@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1509@exprint_re
	sub	eax, edx

; 2809 :          exprint_recur(node+node->left,PREC_ARG);

	mov	edx, DWORD PTR [ebx+4]
	add	DWORD PTR _pos, eax
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	0
	push	edx
	call	_exprint_recur

; 2810 :          sprintf(pos,")");

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	eax
	call	_sprintf

; 2811 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL1510@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1510@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN164@exprint_re:

; 2812 :          return;
; 2813 : 
; 2814 :       case SQR_NODE:
; 2815 :          sprintf(pos,"(");

	push	OFFSET ??_C@_01ODHLEDKK@?$CI?$AA@
	push	ecx
	call	_sprintf

; 2816 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1511@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1511@exprint_re

; 2817 :          exprint_recur(node+node->left,PREC_ARG);

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	sub	eax, edx
	add	DWORD PTR _pos, eax
	push	0
	push	ecx
	call	_exprint_recur

; 2818 :          sprintf(pos,")^2");

	mov	edx, DWORD PTR _pos
	push	OFFSET ??_C@_03IINDJHJM@?$CJ?$FO2?$AA@
	push	edx
	call	_sprintf

; 2819 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
$LL1512@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1512@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN163@exprint_re:

; 2820 :          return;
; 2821 : 
; 2822 :       case SQRT_NODE:
; 2823 :          sprintf(pos,"sqrt(");

	push	OFFSET ??_C@_05MIKKOOHN@sqrt?$CI?$AA@
	push	ecx
	call	_sprintf

; 2824 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL1513@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1513@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 2825 :          exprint_recur(node+node->left,PREC_ARG);

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	0
	push	eax
	call	_exprint_recur

; 2826 :          sprintf(pos,")");

	mov	ecx, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	ecx
	call	_sprintf

; 2827 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1514@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1514@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN162@exprint_re:

; 2828 :          return;
; 2829 : 
; 2830 :       case FLOOR_NODE:
; 2831 :          sprintf(pos,"floor(");

	push	OFFSET ??_C@_06IHMMIDCC@floor?$CI?$AA@
	push	ecx
	call	_sprintf

; 2832 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1515@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1515@exprint_re
	sub	eax, edx

; 2833 :          exprint_recur(node+node->left,PREC_ARG);

	mov	edx, DWORD PTR [ebx+4]
	add	DWORD PTR _pos, eax
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	0
	push	edx
	call	_exprint_recur

; 2834 :          sprintf(pos,")");

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	eax
	call	_sprintf

; 2835 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
$LL1516@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1516@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN161@exprint_re:

; 2836 :          return;
; 2837 : 
; 2838 :       case CEIL_NODE:
; 2839 :          sprintf(pos,"ceil(");

	push	OFFSET ??_C@_05MLDBPPPC@ceil?$CI?$AA@
	push	ecx
	call	_sprintf

; 2840 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	7
$LL1517@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1517@exprint_re

; 2841 :          exprint_recur(node+node->left,PREC_ARG);

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	sub	eax, edx
	add	DWORD PTR _pos, eax
	push	0
	push	ecx
	call	_exprint_recur

; 2842 :          sprintf(pos,")");

	mov	edx, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	edx
	call	_sprintf

; 2843 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1518@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1518@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN160@exprint_re:

; 2844 :          return;
; 2845 : 
; 2846 :       case ABS_NODE:
; 2847 :          sprintf(pos,"abs(");

	push	OFFSET ??_C@_04HEKBBDE@abs?$CI?$AA@
	push	ecx
	call	_sprintf

; 2848 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1519@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1519@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 2849 :          exprint_recur(node+node->left,PREC_ARG);

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	0
	push	eax
	call	_exprint_recur

; 2850 :          sprintf(pos,")");

	mov	ecx, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	ecx
	call	_sprintf

; 2851 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
$LL1520@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1520@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN159@exprint_re:

; 2852 :          return;
; 2853 : 
; 2854 :       case SINH_NODE:
; 2855 :          sprintf(pos,"sinh(");

	push	OFFSET ??_C@_05JHMJIAAN@sinh?$CI?$AA@
	push	ecx
	call	_sprintf

; 2856 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL1521@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1521@exprint_re
	sub	eax, edx

; 2857 :          exprint_recur(node+node->left,PREC_ARG);

	mov	edx, DWORD PTR [ebx+4]
	add	DWORD PTR _pos, eax
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	0
	push	edx
	call	_exprint_recur

; 2858 :          sprintf(pos,")");

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	eax
	call	_sprintf

; 2859 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL1522@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1522@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN158@exprint_re:

; 2860 :          return;
; 2861 : 
; 2862 :       case COSH_NODE:
; 2863 :          sprintf(pos,"cosh(");

	push	OFFSET ??_C@_05LJCMPIHE@cosh?$CI?$AA@
	push	ecx
	call	_sprintf

; 2864 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1523@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1523@exprint_re

; 2865 :          exprint_recur(node+node->left,PREC_ARG);

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	sub	eax, edx
	add	DWORD PTR _pos, eax
	push	0
	push	ecx
	call	_exprint_recur

; 2866 :          sprintf(pos,")");

	mov	edx, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	edx
	call	_sprintf

; 2867 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
$LL1524@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1524@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN157@exprint_re:

; 2868 :          return;
; 2869 : 
; 2870 :       case TANH_NODE:
; 2871 :          sprintf(pos,"tanh(");

	push	OFFSET ??_C@_05LKLMPLHE@tanh?$CI?$AA@
	push	ecx
	call	_sprintf

; 2872 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL1525@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1525@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 2873 :          exprint_recur(node+node->left,PREC_ARG);

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	0
	push	eax
	call	_exprint_recur

; 2874 :          sprintf(pos,")");

	mov	ecx, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	ecx
	call	_sprintf

; 2875 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1526@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1526@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN156@exprint_re:

; 2876 :          return;
; 2877 : 
; 2878 :       case ACOSH_NODE:
; 2879 :          sprintf(pos,"acosh(");

	push	OFFSET ??_C@_06LIEDMBPI@acosh?$CI?$AA@
	push	ecx
	call	_sprintf

; 2880 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1527@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1527@exprint_re
	sub	eax, edx

; 2881 :          exprint_recur(node+node->left,PREC_ARG);

	mov	edx, DWORD PTR [ebx+4]
	add	DWORD PTR _pos, eax
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	0
	push	edx
	call	_exprint_recur

; 2882 :          sprintf(pos,")");

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	eax
	call	_sprintf

; 2883 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
$LL1528@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1528@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN155@exprint_re:

; 2884 :          return;
; 2885 : 
; 2886 :       case ASINH_NODE:
; 2887 :          sprintf(pos,"asinh(");

	push	OFFSET ??_C@_06JGKGLJIB@asinh?$CI?$AA@
	push	ecx
	call	_sprintf

; 2888 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	7
$LL1529@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1529@exprint_re

; 2889 :          exprint_recur(node+node->left,PREC_ARG);

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	sub	eax, edx
	add	DWORD PTR _pos, eax
	push	0
	push	ecx
	call	_exprint_recur

; 2890 :          sprintf(pos,")");

	mov	edx, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	edx
	call	_sprintf

; 2891 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1530@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1530@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN154@exprint_re:

; 2892 :          return;
; 2893 : 
; 2894 :       case ATANH_NODE:
; 2895 :          sprintf(pos,"atanh(");

	push	OFFSET ??_C@_06LLNDMCPI@atanh?$CI?$AA@
	push	ecx
	call	_sprintf

; 2896 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1531@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1531@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 2897 :          exprint_recur(node+node->left,PREC_ARG);

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	0
	push	eax
	call	_exprint_recur

; 2898 :          sprintf(pos,")");

	mov	ecx, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	ecx
	call	_sprintf

; 2899 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
$LL1532@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1532@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN153@exprint_re:

; 2900 :          return;
; 2901 : 
; 2902 :       case SIN_NODE:
; 2903 :          sprintf(pos,"sin(");

	push	OFFSET ??_C@_04NOJFGCPE@sin?$CI?$AA@
	push	ecx
	call	_sprintf

; 2904 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL1533@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1533@exprint_re
	sub	eax, edx

; 2905 :          exprint_recur(node+node->left,PREC_ARG);

	mov	edx, DWORD PTR [ebx+4]
	add	DWORD PTR _pos, eax
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	0
	push	edx
	call	_exprint_recur

; 2906 :          sprintf(pos,")");

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	eax
	call	_sprintf

; 2907 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL1534@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1534@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN152@exprint_re:

; 2908 :          return;
; 2909 : 
; 2910 :       case COS_NODE:
; 2911 :          sprintf(pos,"cos(");

	push	OFFSET ??_C@_04IPOAJKIJ@cos?$CI?$AA@
	push	ecx
	call	_sprintf

; 2912 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1535@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1535@exprint_re

; 2913 :          exprint_recur(node+node->left,PREC_ARG);

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	sub	eax, edx
	add	DWORD PTR _pos, eax
	push	0
	push	ecx
	call	_exprint_recur

; 2914 :          sprintf(pos,")");

	mov	edx, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	edx
	call	_sprintf

; 2915 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
$LL1536@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1536@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN151@exprint_re:

; 2916 :          return;
; 2917 : 
; 2918 :       case TAN_NODE:
; 2919 :          sprintf(pos,"tan(");

	push	OFFSET ??_C@_04KJABJGAL@tan?$CI?$AA@
	push	ecx
	call	_sprintf

; 2920 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL1537@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1537@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 2921 :          exprint_recur(node+node->left,PREC_ARG);

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	0
	push	eax
	call	_exprint_recur

; 2922 :          sprintf(pos,")");

	mov	ecx, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	ecx
	call	_sprintf

; 2923 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1538@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1538@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN150@exprint_re:

; 2924 :          return;
; 2925 : 
; 2926 :       case EXP_NODE:
; 2927 :          sprintf(pos,"exp(");

	push	OFFSET ??_C@_04MPCILOFG@exp?$CI?$AA@
	push	ecx
	call	_sprintf

; 2928 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1539@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1539@exprint_re
	sub	eax, edx

; 2929 :          exprint_recur(node+node->left,PREC_ARG);

	mov	edx, DWORD PTR [ebx+4]
	add	DWORD PTR _pos, eax
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	0
	push	edx
	call	_exprint_recur

; 2930 :          sprintf(pos,")");

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	eax
	call	_sprintf

; 2931 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
$LL1540@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1540@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN149@exprint_re:

; 2932 :          return;
; 2933 : 
; 2934 :       case LOG_NODE:
; 2935 :          sprintf(pos,"log(");

	push	OFFSET ??_C@_04BGJPAGPE@log?$CI?$AA@
	push	ecx
	call	_sprintf

; 2936 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	7
$LL1541@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1541@exprint_re

; 2937 :          exprint_recur(node+node->left,PREC_ARG);

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	sub	eax, edx
	add	DWORD PTR _pos, eax
	push	0
	push	ecx
	call	_exprint_recur

; 2938 :          sprintf(pos,")");

	mov	edx, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	edx
	call	_sprintf

; 2939 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1542@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1542@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN148@exprint_re:

; 2940 :          return;
; 2941 : 
; 2942 :       case ASIN_NODE:
; 2943 :          sprintf(pos,"asin(");

	push	OFFSET ??_C@_05GKNNOILF@asin?$CI?$AA@
	push	ecx
	call	_sprintf

; 2944 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1543@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1543@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 2945 :          exprint_recur(node+node->left,PREC_ARG);

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	0
	push	eax
	call	_exprint_recur

; 2946 :          sprintf(pos,")");

	mov	ecx, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	ecx
	call	_sprintf

; 2947 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
$LL1544@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1544@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN147@exprint_re:

; 2948 :          return;
; 2949 : 
; 2950 :       case ACOS_NODE:
; 2951 :          sprintf(pos,"acos(");

	push	OFFSET ??_C@_05DLKIBAMI@acos?$CI?$AA@
	push	ecx
	call	_sprintf

; 2952 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL1545@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1545@exprint_re
	sub	eax, edx

; 2953 :          exprint_recur(node+node->left,PREC_ARG);

	mov	edx, DWORD PTR [ebx+4]
	add	DWORD PTR _pos, eax
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	0
	push	edx
	call	_exprint_recur

; 2954 :          sprintf(pos,")");

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	eax
	call	_sprintf

; 2955 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL1546@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1546@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN146@exprint_re:

; 2956 :          return;
; 2957 : 
; 2958 :       case ATAN_NODE:
; 2959 :          sprintf(pos,"atan(");

	push	OFFSET ??_C@_05BNEJBMEK@atan?$CI?$AA@
	push	ecx
	call	_sprintf

; 2960 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1547@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1547@exprint_re

; 2961 :          exprint_recur(node+node->left,PREC_ARG);

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	sub	eax, edx
	add	DWORD PTR _pos, eax
	push	0
	push	ecx
	call	_exprint_recur

; 2962 :          sprintf(pos,")");

	mov	edx, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	edx
	call	_sprintf

; 2963 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
$LL1548@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1548@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN145@exprint_re:

; 2964 :          return;
; 2965 :       
; 2966 :       case ELLIPTICK_NODE:
; 2967 :          sprintf(pos,"ellipticK(");

	push	OFFSET ??_C@_0L@OLCLEHBB@ellipticK?$CI?$AA@
	push	ecx
	call	_sprintf

; 2968 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL1549@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1549@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 2969 :          exprint_recur(node+node->left,PREC_ARG);

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	0
	push	eax
	call	_exprint_recur

; 2970 :          sprintf(pos,")");

	mov	ecx, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	ecx
	call	_sprintf

; 2971 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1550@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1550@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN144@exprint_re:

; 2972 :          return;
; 2973 :       
; 2974 :       case ELLIPTICE_NODE:
; 2975 :          sprintf(pos,"ellipticE(");

	push	OFFSET ??_C@_0L@OBLFGKBL@ellipticE?$CI?$AA@
	push	ecx
	call	_sprintf

; 2976 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1551@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1551@exprint_re
	sub	eax, edx

; 2977 :          exprint_recur(node+node->left,PREC_ARG);

	mov	edx, DWORD PTR [ebx+4]
	add	DWORD PTR _pos, eax
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	0
	push	edx
	call	_exprint_recur

; 2978 :          sprintf(pos,")");

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	push	eax
	call	_sprintf

; 2979 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
$LL1552@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1552@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN143@exprint_re:

; 2980 :          return;
; 2981 :       
; 2982 :       case CHS_NODE:
; 2983 :          sprintf(pos," -");

	push	OFFSET ??_C@_02BINJDKOC@?5?9?$AA@
	push	ecx
	call	_sprintf

; 2984 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	7
$LL1553@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1553@exprint_re

; 1267 :          exprint_recur(node+node->left,prec_parent);

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H

; 2984 :          pos += strlen(pos);

	sub	eax, edx
	add	DWORD PTR _pos, eax

; 2985 :          exprint_recur(node+node->left,PREC_UMINUS);

	push	45					; 0000002dH
	add	ecx, ebx
	push	ecx
	jmp	$LN1652@exprint_re
$LN142@exprint_re:

; 2986 :          return;
; 2987 :       
; 2988 :       case NOT_NODE:
; 2989 :          sprintf(pos," not ");

	push	OFFSET ??_C@_05MKKKJBDN@?5not?5?$AA@
	push	ecx
	call	_sprintf

; 2990 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1554@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1554@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 2991 :          exprint_recur(node+node->left,PREC_NOT);

	push	25					; 00000019H

; 2992 :          return;

	jmp	$LN1653@exprint_re
$LN141@exprint_re:

; 2993 :       
; 2994 :       case VIEW_MATRIX_NODE:
; 2995 :          sprintf(pos,"view_matrix[");

	push	OFFSET ??_C@_0N@PHJBGNDM@view_matrix?$FL?$AA@
	push	ecx
	call	_sprintf

; 2996 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1555@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1555@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 2997 :          exprint_recur(node+node->left,PREC_ARG);

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	0
	push	eax
	call	_exprint_recur

; 2998 :          strcat(pos,"]["); pos += 2;

	mov	eax, DWORD PTR _pos
	add	esp, 8
	dec	eax
	npad	1
$LL1556@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1556@exprint_re
	mov	cx, WORD PTR ??_C@_02DNJFBPJB@?$FN?$FL?$AA@
	add	DWORD PTR _pos, 2
	mov	WORD PTR [eax], cx
	mov	dl, BYTE PTR ??_C@_02DNJFBPJB@?$FN?$FL?$AA@+2
	mov	BYTE PTR [eax+2], dl

; 2999 :          exprint_recur(node+node->right,PREC_ARG);

	mov	eax, DWORD PTR [ebx+8]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	0
	push	eax
	call	_exprint_recur

; 3000 :          strcat(pos++,"]");

	mov	ecx, DWORD PTR _pos
	add	esp, 8
	lea	eax, DWORD PTR [ecx-1]
	inc	ecx
	mov	DWORD PTR _pos, ecx
$LL1557@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1557@exprint_re
	mov	cx, WORD PTR ??_C@_01LBDDMOBJ@?$FN?$AA@
	mov	edi, eax
	mov	WORD PTR [edi], cx
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN140@exprint_re:

; 3001 :          return;
; 3002 : 
; 3003 :       case GET_EXTRA_ATTR_NODE:
; 3004 :          ex = EXTRAS(node->op2.eltype) + node->op3.extranum;

	mov	edx, DWORD PTR [ebx+136]
	mov	eax, DWORD PTR [ebx+140]
	imul	edx, 112				; 00000070H
	mov	ecx, DWORD PTR _web[edx+104]
	imul	eax, 240				; 000000f0H
	add	ecx, eax
	add	ecx, DWORD PTR _dymem

; 3005 :          print_attr(node,ex->name);

	push	ecx
	push	ebx
	call	_print_attr

; 3006 :          if ( node->left ) 

	mov	eax, DWORD PTR [ebx+4]
	add	esp, 8
	test	eax, eax
	je	$LN730@exprint_re

; 3007 :            exprint_recur(node+node->left,prec_parent);       

	mov	edx, DWORD PTR _prec_parent$[ebp]
	imul	eax, 168				; 000000a8H
	push	edx
	add	eax, ebx
	push	eax
	jmp	$LN1652@exprint_re
$LN138@exprint_re:

; 3008 :          break;
; 3009 : 
; 3010 :       case ON_QUANTITY_NODE:
; 3011 :          print_attr(node,"on_quantity ");

	push	OFFSET ??_C@_0N@LJDCMFBO@on_quantity?5?$AA@
	push	ebx
	call	_print_attr

; 3012 :          strcat(pos,GEN_QUANT(node->op2.quant_id)->name);

	mov	ebx, DWORD PTR [ebx+136]
	imul	ebx, 368				; 00000170H
	add	esp, 8
	add	ebx, DWORD PTR _gen_quant_list
	mov	ecx, ebx
	npad	7
$LL1558@exprint_re:
	mov	al, BYTE PTR [ebx]
	inc	ebx
	test	al, al
	jne	SHORT $LL1558@exprint_re
	mov	edx, DWORD PTR _pos
	sub	ebx, ecx
	mov	esi, ecx
	lea	edi, DWORD PTR [edx-1]
$LL1559@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1559@exprint_re
	mov	ecx, ebx
	shr	ecx, 2
	rep movsd
	mov	ecx, ebx
	and	ecx, 3

; 3013 :          pos += strlen(pos);

	mov	eax, edx
	rep movsb
	lea	esi, DWORD PTR [eax+1]
	npad	1
$LL1560@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1560@exprint_re
	sub	eax, esi
	pop	edi
	add	edx, eax
	pop	esi
	mov	DWORD PTR _pos, edx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN137@exprint_re:

; 3014 :          return;
; 3015 : 
; 3016 :       case ON_METHOD_INSTANCE_NODE:
; 3017 :          print_attr(node,"on_method_instance ");

	push	OFFSET ??_C@_0BE@FCGNGMMH@on_method_instance?5?$AA@
	push	ebx
	call	_print_attr

; 3018 :          strcat(pos,METH_INSTANCE(node->op2.meth_id)->name);

	mov	eax, DWORD PTR [ebx+136]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	esp, 8
	add	eax, DWORD PTR _meth_inst_list
	mov	edx, eax
	npad	7
$LL1561@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1561@exprint_re
	mov	ebx, DWORD PTR _pos
	sub	eax, edx
	lea	edi, DWORD PTR [ebx-1]
$LL1562@exprint_re:
	mov	cl, BYTE PTR [edi+1]
	inc	edi
	test	cl, cl
	jne	SHORT $LL1562@exprint_re
	mov	ecx, eax
	shr	ecx, 2
	mov	esi, edx
	rep movsd
	mov	ecx, eax
	and	ecx, 3

; 3019 :          pos += strlen(pos);

	mov	eax, ebx
	rep movsb
	lea	edx, DWORD PTR [eax+1]
	npad	1
$LL1563@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1563@exprint_re
	sub	eax, edx
	pop	edi
	add	ebx, eax
	pop	esi
	mov	DWORD PTR _pos, ebx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN136@exprint_re:

; 3020 :          return;
; 3021 : 
; 3022 :       case ON_CONSTRAINT_NODE:
; 3023 :          print_attr(node,"on_constraint ");

	push	OFFSET ??_C@_0P@NECEKGOL@on_constraint?5?$AA@
	push	ebx
	call	_print_attr

; 3024 :          exprint_recur(node+node->left,PREC_INDEX);

	mov	eax, DWORD PTR [ebx+4]
	push	55					; 00000037H

; 3025 :          return;

	jmp	$LN1660@exprint_re
$LN135@exprint_re:

; 3026 : 
; 3027 :       case ON_CONSTRAINT_NAME_NODE:
; 3028 :          print_attr(node,"on_constraint ");

	push	OFFSET ??_C@_0P@NECEKGOL@on_constraint?5?$AA@
	push	ebx
	call	_print_attr

; 3029 :          strcat(pos,get_constraint(node->op3.connum)->name);

	mov	ebx, DWORD PTR [ebx+140]
	and	ebx, 1073741823				; 3fffffffH
	imul	ebx, 176				; 000000b0H
	add	esp, 8
	add	ebx, DWORD PTR _web+652
	mov	ecx, ebx
	npad	1
$LL1564@exprint_re:
	mov	al, BYTE PTR [ebx]
	inc	ebx
	test	al, al
	jne	SHORT $LL1564@exprint_re
	mov	edx, DWORD PTR _pos
	sub	ebx, ecx
	mov	esi, ecx
	lea	edi, DWORD PTR [edx-1]
$LL1565@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1565@exprint_re
	mov	ecx, ebx
	shr	ecx, 2
	rep movsd
	mov	ecx, ebx
	and	ecx, 3

; 3030 :          pos += strlen(pos);

	mov	eax, edx
	rep movsb
	lea	esi, DWORD PTR [eax+1]
	npad	1
$LL1566@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1566@exprint_re
	sub	eax, esi
	pop	edi
	add	edx, eax
	pop	esi
	mov	DWORD PTR _pos, edx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN134@exprint_re:

; 3031 :          return;
; 3032 : 
; 3033 :       case HIT_CONSTRAINT_NODE:
; 3034 :          print_attr(node,"hit_constraint ");

	push	OFFSET ??_C@_0BA@DDGBMOJE@hit_constraint?5?$AA@
	push	ebx
	call	_print_attr

; 3035 :          exprint_recur(node+node->left,PREC_INDEX);

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	push	55					; 00000037H
	add	ecx, ebx
	push	ecx

; 3036 :          return;

	jmp	$LN1658@exprint_re
$LN133@exprint_re:

; 3037 : 
; 3038 :       case HIT_CONSTRAINT_NAME_NODE:
; 3039 :          print_attr(node,"hit_constraint ");

	push	OFFSET ??_C@_0BA@DDGBMOJE@hit_constraint?5?$AA@
	push	ebx
	call	_print_attr

; 3040 :          strcat(pos,get_constraint(node->op3.connum)->name);

	mov	ebx, DWORD PTR [ebx+140]
	and	ebx, 1073741823				; 3fffffffH
	imul	ebx, 176				; 000000b0H
	add	esp, 8
	add	ebx, DWORD PTR _web+652
	mov	ecx, ebx
$LL1567@exprint_re:
	mov	al, BYTE PTR [ebx]
	inc	ebx
	test	al, al
	jne	SHORT $LL1567@exprint_re
	mov	edx, DWORD PTR _pos
	sub	ebx, ecx
	mov	esi, ecx
	lea	edi, DWORD PTR [edx-1]
	npad	4
$LL1568@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1568@exprint_re
	mov	ecx, ebx
	shr	ecx, 2
	rep movsd
	mov	ecx, ebx
	and	ecx, 3

; 3041 :          pos += strlen(pos);

	mov	eax, edx
	rep movsb
	lea	esi, DWORD PTR [eax+1]
	npad	5
$LL1569@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1569@exprint_re
	sub	eax, esi
	pop	edi
	add	edx, eax
	pop	esi
	mov	DWORD PTR _pos, edx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN132@exprint_re:

; 3042 :          return;
; 3043 : 
; 3044 :       case CONSTRAINT_VALUE_NODE:
; 3045 :          print_attr(node,"value_of_constraint ");

	push	OFFSET ??_C@_0BF@ICBGKBMB@value_of_constraint?5?$AA@
	push	ebx
	call	_print_attr

; 3046 :          exprint_recur(node+node->left,PREC_INDEX);

	mov	edx, DWORD PTR [ebx+4]
	imul	edx, 168				; 000000a8H
	push	55					; 00000037H
	add	edx, ebx
	push	edx

; 3047 :          return;

	jmp	$LN1658@exprint_re
$LN131@exprint_re:

; 3048 : 
; 3049 :       case CONSTRAINT_NAME_VALUE_NODE:
; 3050 :          print_attr(node,"constraint ");

	push	OFFSET ??_C@_0M@HCINNPA@constraint?5?$AA@
	push	ebx
	call	_print_attr

; 3051 :          strcat(pos,get_constraint(node->op3.connum)->name);

	mov	ebx, DWORD PTR [ebx+140]
	and	ebx, 1073741823				; 3fffffffH
	imul	ebx, 176				; 000000b0H
	add	esp, 8
	add	ebx, DWORD PTR _web+652
	mov	eax, ebx
$LL1570@exprint_re:
	mov	cl, BYTE PTR [ebx]
	inc	ebx
	test	cl, cl
	jne	SHORT $LL1570@exprint_re
	mov	edx, DWORD PTR _pos
	sub	ebx, eax
	lea	edi, DWORD PTR [edx-1]
	npad	6
$LL1571@exprint_re:
	mov	cl, BYTE PTR [edi+1]
	inc	edi
	test	cl, cl
	jne	SHORT $LL1571@exprint_re
	mov	ecx, ebx
	shr	ecx, 2
	mov	esi, eax
	rep movsd
	mov	ecx, ebx
	and	ecx, 3
	rep movsb

; 3052 :          strcat(pos," value");

	lea	eax, DWORD PTR [edx-1]
	npad	5
$LL1572@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1572@exprint_re
	mov	ecx, DWORD PTR ??_C@_06OPEHNENO@?5value?$AA@
	mov	DWORD PTR [eax], ecx
	mov	cx, WORD PTR ??_C@_06OPEHNENO@?5value?$AA@+4
	mov	WORD PTR [eax+4], cx
	mov	cl, BYTE PTR ??_C@_06OPEHNENO@?5value?$AA@+6
	mov	BYTE PTR [eax+6], cl

; 3053 :          pos += strlen(pos);

	mov	eax, edx
	lea	esi, DWORD PTR [eax+1]
	npad	7
$LL1573@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1573@exprint_re
	sub	eax, esi
	pop	edi
	add	edx, eax
	pop	esi
	mov	DWORD PTR _pos, edx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN130@exprint_re:

; 3054 :          return;
; 3055 :       
; 3056 : 
; 3057 :       case ON_BOUNDARY_NODE:
; 3058 :          print_attr(node,"on_boundary ");

	push	OFFSET ??_C@_0N@KCHJBOEN@on_boundary?5?$AA@
	push	ebx
	call	_print_attr

; 3059 :          exprint_recur(node+node->left,PREC_INDEX);

	mov	edx, DWORD PTR [ebx+4]
	imul	edx, 168				; 000000a8H
	push	55					; 00000037H
	add	edx, ebx
	push	edx

; 3060 :          return;

	jmp	$LN1658@exprint_re
$LN129@exprint_re:

; 3061 : 
; 3062 :       case ON_BOUNDARY_NAME_NODE:
; 3063 :          print_attr(node,"on_boundary ");

	push	OFFSET ??_C@_0N@KCHJBOEN@on_boundary?5?$AA@
	push	ebx
	call	_print_attr

; 3064 :          strcat(pos,web.boundaries[node->op3.bdrynum].name);

	mov	ebx, DWORD PTR [ebx+140]
	imul	ebx, 136				; 00000088H
	add	esp, 8
	add	ebx, DWORD PTR _web+776
	mov	ecx, ebx
$LL1574@exprint_re:
	mov	al, BYTE PTR [ebx]
	inc	ebx
	test	al, al
	jne	SHORT $LL1574@exprint_re
	mov	edx, DWORD PTR _pos
	sub	ebx, ecx
	mov	esi, ecx
	lea	edi, DWORD PTR [edx-1]
$LL1575@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1575@exprint_re
	mov	ecx, ebx
	shr	ecx, 2
	rep movsd
	mov	ecx, ebx
	and	ecx, 3

; 3065 :          pos += strlen(pos);

	mov	eax, edx
	rep movsb
	lea	esi, DWORD PTR [eax+1]
$LL1576@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1576@exprint_re
	sub	eax, esi
	pop	edi
	add	edx, eax
	pop	esi
	mov	DWORD PTR _pos, edx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN128@exprint_re:

; 3066 :          return;
; 3067 : 
; 3068 :       case QUALIFIED_ATTRIBUTE_NODE:
; 3069 :          exprint_recur(node+node->left,prec_parent);

	mov	eax, DWORD PTR [ebx+4]
	mov	esi, DWORD PTR _prec_parent$[ebp]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	esi
	push	eax
	call	_exprint_recur

; 3070 :          strcat(pos,"."); pos++;

	mov	edi, DWORD PTR _pos
	add	esp, 8
	dec	edi
$LL1577@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1577@exprint_re
	mov	cx, WORD PTR ??_C@_01LFCBOECM@?4?$AA@
	inc	DWORD PTR _pos
	mov	WORD PTR [edi], cx

; 3071 :          exprint_recur(node+node->right,prec_parent);

	mov	edx, DWORD PTR [ebx+8]
	push	esi

; 3072 :          return;

	jmp	$LN1654@exprint_re
$LN127@exprint_re:

; 3073 : 
; 3074 :       case GET_MIDV_NODE:
; 3075 :          print_attr(node,"midv");

	push	OFFSET ??_C@_04CIOKLOBL@midv?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN126@exprint_re:

; 3076 :          return;
; 3077 : 
; 3078 :       case GET_TRIPLE_PT_NODE:
; 3079 :          print_attr(node,"triple_point");

	push	OFFSET ??_C@_0N@DHNCNHBM@triple_point?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN125@exprint_re:

; 3080 :          return;
; 3081 : 
; 3082 :       case GET_TETRA_PT_NODE:
; 3083 :          print_attr(node,"tetra_point");

	push	OFFSET ??_C@_0M@DFLKEBKH@tetra_point?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN124@exprint_re:

; 3084 :          return;
; 3085 : 
; 3086 :       case GET_AXIAL_POINT_NODE:
; 3087 :          print_attr(node,"axial_point");

	push	OFFSET ??_C@_0M@BIHLDDLK@axial_point?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN123@exprint_re:

; 3088 :          return;
; 3089 : 
; 3090 :       case GET_FIXED_NODE:
; 3091 :          print_attr(node,"fixed");

	push	OFFSET ??_C@_05OFLEIIDM@fixed?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN122@exprint_re:

; 3092 :          return;
; 3093 : 
; 3094 :       case GET_BARE_NODE:
; 3095 :          print_attr(node,"bare");

	push	OFFSET ??_C@_04BGEKJPHF@bare?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN121@exprint_re:

; 3096 :          return;
; 3097 : 
; 3098 :       case GET_NO_DISPLAY_NODE:
; 3099 :          print_attr(node,"no_display");

	push	OFFSET ??_C@_0L@ODCODBLD@no_display?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN120@exprint_re:

; 3100 :          return;
; 3101 : 
; 3102 :       case GET_NONCONTENT_NODE:
; 3103 :          print_attr(node,"noncontent");

	push	OFFSET ??_C@_0L@DKEDBIHO@noncontent?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN119@exprint_re:

; 3104 :          return;
; 3105 : 
; 3106 :       case GET_HIT_PARTNER_NODE:
; 3107 :          print_attr(node,"hit_partner");

	push	OFFSET ??_C@_0M@JAGBIOBF@hit_partner?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN118@exprint_re:

; 3108 :          return;
; 3109 : 
; 3110 :       case GET_NO_REFINE_NODE:
; 3111 :          print_attr(node,"no_refine");

	push	OFFSET ??_C@_09PFNGBABC@no_refine?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN117@exprint_re:

; 3112 :          return;
; 3113 : 
; 3114 :       case GET_NO_TRANSFORM_NODE:
; 3115 :          print_attr(node,"no_transform");

	push	OFFSET ??_C@_0N@CMIGFPCH@no_transform?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN116@exprint_re:

; 3116 :          return;
; 3117 : 
; 3118 :       case GET_OPACITY_NODE:
; 3119 :          print_attr(node,"opacity");

	push	OFFSET ??_C@_07IJGPCJHC@opacity?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN115@exprint_re:

; 3120 :          return;
; 3121 : 
; 3122 :       case GET_ORIGINAL_NODE:
; 3123 :          print_attr(node,"original");

	push	OFFSET ??_C@_08LAAABFKN@original?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN114@exprint_re:

; 3124 :          return;
; 3125 : 
; 3126 : 
; 3127 :       case GET_ID_NODE:
; 3128 :          print_attr(node,"id");

	push	OFFSET ??_C@_02EGCJHIOB@id?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN113@exprint_re:

; 3129 :          return;
; 3130 : 
; 3131 :       case GET_OID_NODE:
; 3132 :          print_attr(node,"oid");

	push	OFFSET ??_C@_03PLGJJJLK@oid?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN112@exprint_re:

; 3133 :          return;
; 3134 : 
; 3135 :       case GET_VALENCE_NODE:
; 3136 :          print_attr(node,"valence");

	push	OFFSET ??_C@_07HKCFKCGH@valence?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN111@exprint_re:

; 3137 :          return;
; 3138 : 
; 3139 :       case GET_COLOR_NODE:
; 3140 :          print_attr(node,"color");

	push	OFFSET ??_C@_05PEENBMOG@color?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN110@exprint_re:

; 3141 :          return;
; 3142 : 
; 3143 :       case GET_FRONTCOLOR_NODE:
; 3144 :          print_attr(node,"frontcolor");

	push	OFFSET ??_C@_0L@DKEJANLD@frontcolor?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN109@exprint_re:

; 3145 :          return;
; 3146 : 
; 3147 :       case GET_BACKCOLOR_NODE:
; 3148 :          print_attr(node,"backcolor");

	push	OFFSET ??_C@_09OPNKCLNO@backcolor?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN108@exprint_re:

; 3149 :          return;
; 3150 : 
; 3151 :       case GET_FRONTBODY_NODE:
; 3152 :          print_attr(node,"frontbody");

	push	OFFSET ??_C@_09GNLMKAKO@frontbody?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN107@exprint_re:

; 3153 :          return;
; 3154 : 
; 3155 :       case GET_BACKBODY_NODE:
; 3156 :          print_attr(node,"backbody");

	push	OFFSET ??_C@_08JONLCJIM@backbody?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN106@exprint_re:

; 3157 :          return;
; 3158 : 
; 3159 :       case GET_ORIENTATION_NODE:
; 3160 :          print_attr(node,"orientation");

	push	OFFSET ??_C@_0M@KPMDGEHG@orientation?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN105@exprint_re:

; 3161 :          return;
; 3162 : 
; 3163 :       case GET_SHOW_NODE:
; 3164 :          print_attr(node,"show");

	push	OFFSET ??_C@_04FKMICODN@show?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN104@exprint_re:

; 3165 :          return;
; 3166 : 
; 3167 :       case GET_LENGTH_NODE:
; 3168 :          print_attr(node,"length");

	push	OFFSET ??_C@_06IJDLPEM@length?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN103@exprint_re:

; 3169 :          return;
; 3170 : 
; 3171 :       case GET_MEANCURV_NODE:
; 3172 :          print_attr(node,"mean_curvature");

	push	OFFSET ??_C@_0P@FKOPBMAL@mean_curvature?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN102@exprint_re:

; 3173 :          return;
; 3174 : 
; 3175 :       case GET_FIXEDVOL_NODE:
; 3176 :          print_attr(node,"volfixed");

	push	OFFSET ??_C@_08HEBLBDOI@volfixed?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN101@exprint_re:

; 3177 :          return;
; 3178 : 
; 3179 :       case GET_NO_HESSIAN_NORMAL_NODE:
; 3180 :          print_attr(node,"no_hessian_normal");

	push	OFFSET ??_C@_0BC@KBMGOFNF@no_hessian_normal?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN100@exprint_re:

; 3181 :          return;
; 3182 : 
; 3183 :       case GET_MID_EDGE_NODE:
; 3184 :          print_attr(node,"mid_edge");

	push	OFFSET ??_C@_08EJNLDOMI@mid_edge?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN99@exprint_re:

; 3185 :          return;
; 3186 : 
; 3187 :       case GET_MID_FACET_NODE:
; 3188 :          print_attr(node,"mid_facet");

	push	OFFSET ??_C@_09BPLDEHMH@mid_facet?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN98@exprint_re:

; 3189 :          return;
; 3190 : 
; 3191 :       case GET_WRAP_NODE:
; 3192 :          print_attr(node,"wrap");

	push	OFFSET ??_C@_04NFDDIEML@wrap?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN97@exprint_re:

; 3193 :          return;
; 3194 : 
; 3195 :       case GET_SQ_MEAN_CURV_NODE:
; 3196 :          print_attr(node,"sqcurve");

	push	OFFSET ??_C@_07MEIPJMCG@sqcurve?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN96@exprint_re:

; 3197 :          return;
; 3198 : 
; 3199 :       case GET_DIHEDRAL_NODE:
; 3200 :          print_attr(node,"dihedral");

	push	OFFSET ??_C@_08BKGECACE@dihedral?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN95@exprint_re:

; 3201 :          return;
; 3202 : 
; 3203 :       case GET_AREA_NODE:
; 3204 :          print_attr(node,"area");

	push	OFFSET ??_C@_04GOEDGNCF@area?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN94@exprint_re:

; 3205 :          return;
; 3206 : 
; 3207 :       case GET_VOLUME_NODE:
; 3208 :          print_attr(node,"volume");

	push	OFFSET ??_C@_06EMCPHFGM@volume?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN93@exprint_re:

; 3209 :          return;
; 3210 : 
; 3211 :       case GET_VOLCONST_NODE:
; 3212 :          print_attr(node,"volconst");

	push	OFFSET ??_C@_08IMINLCCL@volconst?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN92@exprint_re:

; 3213 :          return;
; 3214 : 
; 3215 :       case GET_TARGET_NODE:
; 3216 :          print_attr(node,"target");

	push	OFFSET ??_C@_06JJLAMBGK@target?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN91@exprint_re:

; 3217 :          return;
; 3218 : 
; 3219 :       case GET_MPI_TASK_NODE:
; 3220 :          print_attr(node,"mpi_task");

	push	OFFSET ??_C@_08KEAKBNCK@mpi_task?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN90@exprint_re:

; 3221 :          return;
; 3222 : 
; 3223 :       case GET_PRESSURE_NODE:
; 3224 :          print_attr(node,"pressure");

	push	OFFSET ??_C@_08POHEELCJ@pressure?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN89@exprint_re:

; 3225 :          return;
; 3226 : 
; 3227 :       case GET_DENSITY_NODE:
; 3228 :          print_attr(node,"density");

	push	OFFSET ??_C@_07HAFFKDBK@density?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN88@exprint_re:

; 3229 :          return;
; 3230 : 
; 3231 :       case GET_PHASE_NODE:
; 3232 :          print_attr(node,"phase");

	push	OFFSET ??_C@_05CBPKLGJM@phase?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN87@exprint_re:

; 3233 :          return;
; 3234 : 
; 3235 :       case GET_QUANTITY_NODE:
; 3236 :          print_attr(node,GEN_QUANT(node->op2.quant_id)->name);

	mov	eax, DWORD PTR [ebx+136]
	imul	eax, 368				; 00000170H
	add	eax, DWORD PTR _gen_quant_list
	push	eax
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN86@exprint_re:

; 3237 :          return;
; 3238 : 
; 3239 :       case GET_INSTANCE_NODE:
; 3240 :          print_attr(node,METH_INSTANCE(node->op2.meth_id)->name);

	mov	eax, DWORD PTR [ebx+136]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list
	push	eax
	push	ebx
	call	_print_attr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN85@exprint_re:

; 3241 :          return;
; 3242 : 
; 3243 :       case INDEXSET_NODE:
; 3244 :       case DIMENSIONSET_NODE:
; 3245 :          if ( node->right )

	cmp	DWORD PTR [ebx+8], 0
	je	$LN84@exprint_re

; 3246 :          { exprint_recur(node+node->left,prec_parent);

	mov	edx, DWORD PTR [ebx+4]
	mov	ecx, DWORD PTR _prec_parent$[ebp]
	imul	edx, 168				; 000000a8H
	push	ecx
	add	edx, ebx
	push	edx
	call	_exprint_recur

; 3247 :            strcat(pos++,"[");

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edi, DWORD PTR [eax-1]
	inc	eax
	mov	DWORD PTR _pos, eax
	npad	6
$LL1578@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1578@exprint_re
	mov	ax, WORD PTR ??_C@_01OHGJGJJP@?$FL?$AA@
	mov	WORD PTR [edi], ax

; 3248 :            exprint_recur(node+node->right,PREC_ARG);

	mov	ecx, DWORD PTR [ebx+8]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	push	0
	push	ecx
	call	_exprint_recur

; 3249 :            strcat(pos++,"]");

	mov	ecx, DWORD PTR _pos
	add	esp, 8
	lea	eax, DWORD PTR [ecx-1]
	inc	ecx
	mov	DWORD PTR _pos, ecx
$LL1579@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1579@exprint_re
	mov	dx, WORD PTR ??_C@_01LBDDMOBJ@?$FN?$AA@
	mov	edi, eax
	mov	WORD PTR [edi], dx
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN84@exprint_re:

; 3250 :          } else
; 3251 :          {
; 3252 :            strcat(pos++,"[");

	lea	edi, DWORD PTR [ecx-1]
	inc	ecx
	mov	DWORD PTR _pos, ecx
$LL1580@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1580@exprint_re
	mov	ax, WORD PTR ??_C@_01OHGJGJJP@?$FL?$AA@
	mov	WORD PTR [edi], ax

; 3253 :            exprint_recur(node+node->left,PREC_ARG);

	mov	ecx, DWORD PTR [ebx+4]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	push	0
	push	ecx
	call	_exprint_recur

; 3254 :            strcat(pos++,"]");

	mov	ecx, DWORD PTR _pos
	add	esp, 8
	lea	eax, DWORD PTR [ecx-1]
	inc	ecx
	mov	DWORD PTR _pos, ecx
	npad	3
$LL1581@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1581@exprint_re
	mov	dx, WORD PTR ??_C@_01LBDDMOBJ@?$FN?$AA@
	mov	edi, eax
	mov	WORD PTR [edi], dx
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN82@exprint_re:

; 3255 :          }
; 3256 :          break;
; 3257 : 
; 3258 :       case UNSET_FRONTBODY_NODE:
; 3259 :          set_print(node,"unset","frontbody",prec_parent); break;

	mov	eax, DWORD PTR _prec_parent$[ebp]
	push	eax
	push	OFFSET ??_C@_09GNLMKAKO@frontbody?$AA@
	push	OFFSET ??_C@_05EPBFLBEJ@unset?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN81@exprint_re:

; 3260 :  
; 3261 :       case UNSET_BACKBODY_NODE:
; 3262 :          set_print(node,"unset","backbody",prec_parent); break;

	mov	ecx, DWORD PTR _prec_parent$[ebp]
	push	ecx
	push	OFFSET ??_C@_08JONLCJIM@backbody?$AA@
	push	OFFSET ??_C@_05EPBFLBEJ@unset?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN80@exprint_re:

; 3263 :  
; 3264 :       case SET_FIXED_NODE: set_print(node,"set","fixed",prec_parent); break;

	mov	edx, DWORD PTR _prec_parent$[ebp]
	push	edx
	push	OFFSET ??_C@_05OFLEIIDM@fixed?$AA@
	push	OFFSET ??_C@_03KCHOJKKI@set?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN79@exprint_re:

; 3265 :       case UNSET_FIXED_NODE: set_print(node,"unset","fixed",prec_parent); break;

	mov	eax, DWORD PTR _prec_parent$[ebp]
	push	eax
	push	OFFSET ??_C@_05OFLEIIDM@fixed?$AA@
	push	OFFSET ??_C@_05EPBFLBEJ@unset?$AA@
	push	ebx
	call	_set_print
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN78@exprint_re:

; 3266 :   
; 3267 :       case SET_ATTRIBUTE_NODE:
; 3268 :          strcat(pos,"set "); pos += 4;

	lea	esi, DWORD PTR [ecx-1]
$LL1582@exprint_re:
	mov	al, BYTE PTR [esi+1]
	inc	esi
	test	al, al
	jne	SHORT $LL1582@exprint_re
	mov	edx, DWORD PTR ??_C@_04ENCLHBOC@set?5?$AA@
	mov	DWORD PTR [esi], edx
	mov	al, BYTE PTR ??_C@_04ENCLHBOC@set?5?$AA@+4
	add	ecx, 4
	mov	BYTE PTR [esi+4], al
	mov	DWORD PTR _pos, ecx
$LN1628@exprint_re:

; 3269 :       case SET_ATTRIBUTE_A_NODE: /* single element assign */
; 3270 :       case SET_ATTRIBUTE_L_NODE:  /* skip printing set when in set loop */
; 3271 :         if ( pos[-1] != '.' ) strcat(pos++," "); /* just to be sure */

	cmp	BYTE PTR [ecx-1], 46			; 0000002eH
	je	SHORT $LN1629@exprint_re
	lea	eax, DWORD PTR [ecx-1]
	inc	ecx
	mov	DWORD PTR _pos, ecx
	npad	7
$LL1583@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1583@exprint_re
	mov	cx, WORD PTR ??_C@_01CLKCMJKC@?5?$AA@
	mov	edi, eax
	mov	WORD PTR [edi], cx
$LN1629@exprint_re:

; 3272 :         switch ( node->op2.attr_kind )

	mov	eax, DWORD PTR [ebx+136]
	lea	ecx, DWORD PTR [eax-10265]
	cmp	ecx, 187				; 000000bbH
	ja	$LN22@exprint_re
	movzx	edx, BYTE PTR $LN1584@exprint_re[ecx]
	jmp	DWORD PTR $LN1698@exprint_re[edx*4]
$LN73@exprint_re:

; 3273 :         { case SET_DENSITY_NODE: print_set_attr(node,"density"); break;

	push	OFFSET ??_C@_07HAFFKDBK@density?$AA@
	push	ebx
$LN39@exprint_re:
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN72@exprint_re:

; 3274 :           case SET_EXTRA_ATTR_NODE: 
; 3275 :             { ex = EXTRAS(node->op3.extra_info>>ESHIFT)
; 3276 :                         +(node->op3.extra_info&0xFF);

	mov	eax, DWORD PTR [ebx+140]
	mov	ecx, eax
	sar	ecx, 12					; 0000000cH
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _web[ecx+104]
	and	eax, 255				; 000000ffH
	imul	eax, 240				; 000000f0H
	add	edx, eax
	add	edx, DWORD PTR _dymem

; 3277 :               print_attr(node,ex->name);

	push	edx
	push	ebx
	call	_print_attr

; 3278 :               if ( node->right )        

	mov	eax, DWORD PTR [ebx+8]
	add	esp, 8
	test	eax, eax
	je	$LN1627@exprint_re

; 3279 :                 exprint_recur(node+node->right,prec_parent);

	mov	ecx, DWORD PTR _prec_parent$[ebp]
	imul	eax, 168				; 000000a8H
	push	ecx
	add	eax, ebx
	push	eax
	call	_exprint_recur
	add	esp, 8

; 3280 :             }
; 3281 :             break;

	jmp	$LN1627@exprint_re
$LN70@exprint_re:

; 3282 :           case SET_PHASE_NODE : print_set_attr(node,"phase"); break;

	push	OFFSET ??_C@_05CBPKLGJM@phase?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN69@exprint_re:

; 3283 :           case SET_WRAP_NODE : print_set_attr(node,"wrap"); break;

	push	OFFSET ??_C@_04NFDDIEML@wrap?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN68@exprint_re:

; 3284 :           case SET_ORIENTATION_NODE : print_set_attr(node,"orientation"); break;

	push	OFFSET ??_C@_0M@KPMDGEHG@orientation?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN67@exprint_re:

; 3285 :           case SET_TARGET_NODE: print_set_attr(node,"target"); break;

	push	OFFSET ??_C@_06JJLAMBGK@target?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN66@exprint_re:

; 3286 :           case SET_VOLCONST_NODE: print_set_attr(node,"volconst"); break;

	push	OFFSET ??_C@_08IMINLCCL@volconst?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN65@exprint_re:

; 3287 :           case SET_PRESSURE_NODE: print_set_attr(node,"pressure"); break;

	push	OFFSET ??_C@_08POHEELCJ@pressure?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN64@exprint_re:

; 3288 :           case SET_OPACITY_NODE: print_set_attr(node,"opacity"); break;

	push	OFFSET ??_C@_07IJGPCJHC@opacity?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN63@exprint_re:

; 3289 :           case SET_COLOR_NODE: print_set_attr(node,"color"); break;

	push	OFFSET ??_C@_05PEENBMOG@color?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN62@exprint_re:

; 3290 :           case SET_ORIGINAL_NODE: print_set_attr(node,"original"); break;

	push	OFFSET ??_C@_08LAAABFKN@original?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN61@exprint_re:

; 3291 :           case SET_FRONTBODY_NODE: print_set_attr(node,"frontbody"); break;

	push	OFFSET ??_C@_09GNLMKAKO@frontbody?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN60@exprint_re:

; 3292 :           case SET_BACKBODY_NODE: print_set_attr(node,"backbody"); break;

	push	OFFSET ??_C@_08JONLCJIM@backbody?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN59@exprint_re:

; 3293 :           case SET_FRONTCOLOR_NODE: print_attr(node,"frontcolor"); break;

	push	OFFSET ??_C@_0L@DKEJANLD@frontcolor?$AA@
	push	ebx
	call	_print_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN58@exprint_re:

; 3294 :           case SET_BACKCOLOR_NODE: print_set_attr(node,"backcolor"); break; 

	push	OFFSET ??_C@_09OPNKCLNO@backcolor?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN57@exprint_re:

; 3295 :           case SET_CONSTRAINT_NODE: 
; 3296 :              { struct constraint *con;
; 3297 :                print_set_attr(node,"constraint "); 

	push	OFFSET ??_C@_0M@HCINNPA@constraint?5?$AA@
	push	ebx
	call	_print_set_attr

; 3298 :                if ( node[node->left].type == PUSHCONST_NODE )

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	add	esp, 8
	cmp	DWORD PTR [eax+ebx], 10095		; 0000276fH
	jne	$LN55@exprint_re

; 3299 :                { int cnum = (int)(node[node->left].op1.real);

	fld	QWORD PTR [eax+ebx+32]
	call	__ftol2_sse

; 3300 :                  con = get_constraint(cnum);

	mov	ecx, eax
	and	ecx, 1073741823				; 3fffffffH
	imul	ecx, 176				; 000000b0H
	add	ecx, DWORD PTR _web+652

; 3301 :                  if ( (cnum <= web.maxcon) && (con->attr & NAMED_THING) )

	cmp	eax, DWORD PTR _web+644
	jg	$LN55@exprint_re
	mov	eax, DWORD PTR [ecx+32]
	and	eax, 512				; 00000200H
	xor	edx, edx
	or	eax, edx
	je	$LN55@exprint_re

; 3302 :                  { strcat(pos,con->name);

	mov	eax, ecx
	npad	5
$LL1585@exprint_re:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1585@exprint_re
	mov	edx, DWORD PTR _pos
	sub	eax, ecx
	mov	esi, ecx
	lea	edi, DWORD PTR [edx-1]
$LL1586@exprint_re:
	mov	cl, BYTE PTR [edi+1]
	inc	edi
	test	cl, cl
	jne	SHORT $LL1586@exprint_re
	mov	ecx, eax
	shr	ecx, 2
	rep movsd
	mov	ecx, eax
	and	ecx, 3

; 3303 :                    pos += strlen(pos); 

	mov	eax, edx
	rep movsb
	lea	esi, DWORD PTR [eax+1]
	npad	1
$LL1587@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1587@exprint_re
	sub	eax, esi
	pop	edi
	add	edx, eax
	pop	esi
	mov	DWORD PTR _pos, edx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN55@exprint_re:

; 3304 :                    return;
; 3305 :                  } /* else recursion takes care of expression number constant */
; 3306 :                }
; 3307 :                pos += strlen(pos); 

	mov	eax, DWORD PTR _pos
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL1588@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1588@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 3308 :                break;

	jmp	$LN1627@exprint_re
$LN54@exprint_re:

; 3309 :              }
; 3310 :           case SET_BOUNDARY_NODE: 
; 3311 :              { struct boundary *bdry;
; 3312 :                print_set_attr(node,"boundary "); 

	push	OFFSET ??_C@_09ENCBKJCG@boundary?5?$AA@
	push	ebx
	call	_print_set_attr

; 3313 :                if ( node[node->left].type == PUSHCONST_NODE )

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	add	esp, 8
	cmp	DWORD PTR [eax+ebx], 10095		; 0000276fH
	jne	$LN52@exprint_re

; 3314 :                { int bnum = (int)(node[node->left].op1.real);

	fld	QWORD PTR [eax+ebx+32]
	call	__ftol2_sse

; 3315 :                  bdry = web.boundaries+bnum;

	mov	edx, eax
	imul	edx, 136				; 00000088H
	add	edx, DWORD PTR _web+776

; 3316 :                  if ( (bnum <= web.bdrymax) && (bdry->attr & NAMED_THING) )

	cmp	eax, DWORD PTR _web+768
	jg	$LN52@exprint_re
	mov	ecx, DWORD PTR [edx+32]
	and	ecx, 512				; 00000200H
	xor	eax, eax
	or	ecx, eax
	je	$LN52@exprint_re

; 3317 :                  { strcat(pos,bdry->name);

	mov	eax, edx
	mov	ecx, edx
$LL1589@exprint_re:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL1589@exprint_re
	mov	edx, DWORD PTR _pos
	sub	eax, ecx
	mov	esi, ecx
	lea	edi, DWORD PTR [edx-1]
$LL1590@exprint_re:
	mov	cl, BYTE PTR [edi+1]
	inc	edi
	test	cl, cl
	jne	SHORT $LL1590@exprint_re
	mov	ecx, eax
	shr	ecx, 2
	rep movsd
	mov	ecx, eax
	and	ecx, 3

; 3318 :                    pos += strlen(pos); 

	mov	eax, edx
	rep movsb
	lea	esi, DWORD PTR [eax+1]
$LL1591@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1591@exprint_re
	sub	eax, esi
	pop	edi
	add	edx, eax
	pop	esi
	mov	DWORD PTR _pos, edx
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN52@exprint_re:

; 3319 :                    return;
; 3320 :                  } /* else recursion takes care of expression number constant */
; 3321 :                }
; 3322 :                pos += strlen(pos); 

	mov	eax, DWORD PTR _pos
	lea	edx, DWORD PTR [eax+1]
	npad	5
$LL1592@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1592@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 3323 :                break;

	jmp	$LN1627@exprint_re
$LN51@exprint_re:

; 3324 :              }
; 3325 :           case SET_FIXED_NODE: print_set_attr(node,"fixed"); break;

	push	OFFSET ??_C@_05OFLEIIDM@fixed?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN50@exprint_re:

; 3326 :           case SET_NO_HESSIAN_NORMAL_NODE: print_set_attr(node,"no_hessian_normal"); break;

	push	OFFSET ??_C@_0BC@KBMGOFNF@no_hessian_normal?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN49@exprint_re:

; 3327 :           case SET_BARE_NODE: print_set_attr(node,"bare"); break;

	push	OFFSET ??_C@_04BGEKJPHF@bare?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN48@exprint_re:

; 3328 :           case SET_NO_REFINE_NODE: print_set_attr(node,"no_refine"); break;

	push	OFFSET ??_C@_09PFNGBABC@no_refine?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN47@exprint_re:

; 3329 :           case SET_NO_TRANSFORM_NODE: print_set_attr(node,"no_transform"); break;

	push	OFFSET ??_C@_0N@CMIGFPCH@no_transform?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN46@exprint_re:

; 3330 :           case SET_HIT_PARTNER_NODE: print_set_attr(node,"hit_partner"); break;

	push	OFFSET ??_C@_0M@JAGBIOBF@hit_partner?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN45@exprint_re:

; 3331 :           case SET_NONCONTENT_NODE: print_set_attr(node,"noncontent"); break;

	push	OFFSET ??_C@_0L@DKEDBIHO@noncontent?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN44@exprint_re:

; 3332 :           case SET_NO_DISPLAY_NODE: print_set_attr(node,"no_display"); break;

	push	OFFSET ??_C@_0L@ODCODBLD@no_display?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN43@exprint_re:

; 3333 :           case SET_TETRA_PT_NODE: print_set_attr(node,"tetra_point"); break;

	push	OFFSET ??_C@_0M@DFLKEBKH@tetra_point?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN42@exprint_re:

; 3334 :           case SET_AXIAL_POINT_NODE: print_set_attr(node,"axial_point"); break;

	push	OFFSET ??_C@_0M@BIHLDDLK@axial_point?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN41@exprint_re:

; 3335 :           case SET_TRIPLE_PT_NODE: print_set_attr(node,"triple_point"); break;

	push	OFFSET ??_C@_0N@DHNCNHBM@triple_point?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN40@exprint_re:

; 3336 :           case SET_COORD_1_NODE: 
; 3337 :              if ( node->right )

	cmp	DWORD PTR [ebx+8], 0

; 3338 :              { print_set_attr(node,"x"); 

	push	OFFSET ??_C@_01FJMABOPO@x?$AA@
	push	ebx
	je	$LN39@exprint_re
	call	_print_set_attr

; 3339 :                exprint_recur(node+node->right,PREC_INDEX);

	mov	ecx, DWORD PTR [ebx+8]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	push	55					; 00000037H
	push	ecx
	call	_exprint_recur
	add	esp, 16					; 00000010H

; 3340 :                break;

	jmp	$LN1627@exprint_re
$LN37@exprint_re:

; 3341 :              }
; 3342 :              else print_set_attr(node,"x"); 
; 3343 :              break;
; 3344 :           case SET_COORD_2_NODE: print_set_attr(node,"y"); break;

	push	OFFSET ??_C@_01EANLCPLP@y?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN36@exprint_re:

; 3345 :           case SET_COORD_3_NODE: if ( web.sdim <= 2 ) print_set_attr(node,"x3");

	cmp	DWORD PTR _web+616, 2
	jg	SHORT $LN35@exprint_re
	push	OFFSET ??_C@_02KODHHKDF@x3?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN35@exprint_re:

; 3346 :                else print_set_attr(node,"z"); break;

	push	OFFSET ??_C@_01GLPGHMHM@z?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN33@exprint_re:

; 3347 :           case SET_COORD_4_NODE: print_set_attr(node,"x4"); break;

	push	OFFSET ??_C@_02OBHGOMPC@x4?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN32@exprint_re:

; 3348 :           case SET_COORD_5_NODE: print_set_attr(node,"x5"); break;

	push	OFFSET ??_C@_02PIGNNNLD@x5?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN31@exprint_re:

; 3349 :           case SET_COORD_6_NODE: print_set_attr(node,"x6"); break;

	push	OFFSET ??_C@_02NDEAIOHA@x6?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN30@exprint_re:

; 3350 :           case SET_COORD_7_NODE: print_set_attr(node,"x7"); break;

	push	OFFSET ??_C@_02MKFLLPDB@x7?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN29@exprint_re:

; 3351 :           case SET_COORD_8_NODE: print_set_attr(node,"x8"); break;

	push	OFFSET ??_C@_02ENMDKDPO@x8?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	$LN1627@exprint_re
$LN28@exprint_re:

; 3352 :           case SET_PARAM_1_NODE: 
; 3353 :              if ( node->right )

	cmp	DWORD PTR [ebx+8], 0
	je	$LN27@exprint_re

; 3354 :              { print_set_attr(node,"p1["); pos += 3;

	push	OFFSET ??_C@_03MJGCILEH@p1?$FL?$AA@
	push	ebx
	call	_print_set_attr

; 3355 :                exprint_recur(node+node->right,PREC_ARG);

	mov	edx, DWORD PTR [ebx+8]
	add	DWORD PTR _pos, 3
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	0
	push	edx
	call	_exprint_recur

; 3356 :                strcat(pos,"]"); pos += strlen(pos);

	mov	esi, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edi, DWORD PTR [esi-1]
$LL1593@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1593@exprint_re
	mov	ax, WORD PTR ??_C@_01LBDDMOBJ@?$FN?$AA@
	mov	WORD PTR [edi], ax
	mov	eax, esi
	lea	edx, DWORD PTR [eax+1]
$LL1594@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1594@exprint_re
	sub	eax, edx
	add	esi, eax
	mov	DWORD PTR _pos, esi

; 3357 :                break;

	jmp	$LN1627@exprint_re
$LN27@exprint_re:

; 3358 :              }
; 3359 :              else print_set_attr(node,"p1"); 

	push	OFFSET ??_C@_02JCBCEJAP@p1?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8

; 3360 :              break;

	jmp	$LN1627@exprint_re
$LN25@exprint_re:

; 3361 :           case SET_PARAM_2_NODE: print_set_attr(node,"p2"); break;

	push	OFFSET ??_C@_02LJDPBKMM@p2?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	SHORT $LN1627@exprint_re
$LN24@exprint_re:

; 3362 :           case SET_PARAM_3_NODE: print_set_attr(node,"p3"); break;

	push	OFFSET ??_C@_02KACECLIN@p3?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	SHORT $LN1627@exprint_re
$LN23@exprint_re:

; 3363 :           case SET_PARAM_4_NODE: print_set_attr(node,"p4"); break;

	push	OFFSET ??_C@_02OPGFLNEK@p4?$AA@
	push	ebx
	call	_print_set_attr
	add	esp, 8
	jmp	SHORT $LN1627@exprint_re
$LN22@exprint_re:

; 3364 :           default:  
; 3365 :               sprintf(errmsg,"Internal error: bad SET_ATTRIBUTE type %d.\n",
; 3366 :                 node->op2.attr_kind);

	push	eax
	push	OFFSET ??_C@_0CM@GOMFLGCL@Internal?5error?3?5bad?5SET_ATTRIBUT@
	push	OFFSET _errmsg
	call	_sprintf

; 3367 :               kb_error(1655,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	1655					; 00000677H
	call	_kb_error
	add	esp, 24					; 00000018H
$LN1627@exprint_re:

; 3368 : 
; 3369 :         }
; 3370 :         if ( node->type == SET_ATTRIBUTE_A_NODE )

	cmp	DWORD PTR [ebx], 10453			; 000028d5H
	jne	$LN21@exprint_re

; 3371 :           { switch ( node[1].op1.assigntype )

	mov	eax, DWORD PTR [ebx+200]
	add	eax, -30001				; ffff8acfH
	cmp	eax, 4
	ja	$LN1632@exprint_re
	jmp	DWORD PTR $LN1699@exprint_re[eax*4]
$LN18@exprint_re:

; 3372 :              { case ASSIGN_OP: strcat(pos," := "); break;

	mov	esi, DWORD PTR _pos
	lea	eax, DWORD PTR [esi-1]
$LL1595@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1595@exprint_re
	mov	ecx, DWORD PTR ??_C@_04NOLNGNEC@?5?3?$DN?5?$AA@
	mov	DWORD PTR [eax], ecx
	mov	dl, BYTE PTR ??_C@_04NOLNGNEC@?5?3?$DN?5?$AA@+4
	mov	BYTE PTR [eax+4], dl
	jmp	$LN19@exprint_re
$LN17@exprint_re:

; 3373 :                case PLUSASSIGN_OP: strcat(pos," += "); break;

	mov	esi, DWORD PTR _pos
	lea	eax, DWORD PTR [esi-1]
	npad	5
$LL1596@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1596@exprint_re
	mov	ecx, DWORD PTR ??_C@_04DGBIFNLI@?5?$CL?$DN?5?$AA@
	mov	DWORD PTR [eax], ecx
	mov	dl, BYTE PTR ??_C@_04DGBIFNLI@?5?$CL?$DN?5?$AA@+4
	mov	BYTE PTR [eax+4], dl
	jmp	$LN19@exprint_re
$LN16@exprint_re:

; 3374 :                case SUBASSIGN_OP: strcat(pos," -= "); break;

	mov	esi, DWORD PTR _pos
	lea	eax, DWORD PTR [esi-1]
$LL1597@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1597@exprint_re
	mov	ecx, DWORD PTR ??_C@_04BDHDACGE@?5?9?$DN?5?$AA@
	mov	DWORD PTR [eax], ecx
	mov	dl, BYTE PTR ??_C@_04BDHDACGE@?5?9?$DN?5?$AA@+4
	mov	BYTE PTR [eax+4], dl
	jmp	$LN19@exprint_re
$LN15@exprint_re:

; 3375 :                case MULTASSIGN_OP: strcat(pos," *= "); break;

	mov	esi, DWORD PTR _pos
	lea	eax, DWORD PTR [esi-1]
	npad	2
$LL1598@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1598@exprint_re
	mov	ecx, DWORD PTR ??_C@_04IOKEDKNN@?5?$CK?$DN?5?$AA@
	mov	DWORD PTR [eax], ecx
	mov	dl, BYTE PTR ??_C@_04IOKEDKNN@?5?$CK?$DN?5?$AA@+4
	mov	BYTE PTR [eax+4], dl
	jmp	SHORT $LN19@exprint_re
$LN14@exprint_re:

; 3376 :                case DIVASSIGN_OP: strcat(pos," /= "); break;

	mov	esi, DWORD PTR _pos
	lea	eax, DWORD PTR [esi-1]
$LL1599@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1599@exprint_re
	mov	ecx, DWORD PTR ??_C@_04LJHKMKOP@?5?1?$DN?5?$AA@
	mov	DWORD PTR [eax], ecx
	mov	dl, BYTE PTR ??_C@_04LJHKMKOP@?5?1?$DN?5?$AA@+4
	mov	BYTE PTR [eax+4], dl
	jmp	SHORT $LN19@exprint_re
$LN1632@exprint_re:
	mov	esi, DWORD PTR _pos
$LN19@exprint_re:

; 3377 :              }
; 3378 :              pos += 4; 
; 3379 :              strcat(pos," ("); pos += 2;  // kludge for "-" after []

	lea	eax, DWORD PTR [esi+3]
$LL1600@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1600@exprint_re
	mov	cx, WORD PTR ??_C@_02GFKOMOKH@?5?$CI?$AA@
	mov	WORD PTR [eax], cx
	mov	dl, BYTE PTR ??_C@_02GFKOMOKH@?5?$CI?$AA@+2
	mov	BYTE PTR [eax+2], dl

; 3380 :              exprint_recur(node+node->left,PREC_ASSIGN);

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	10					; 0000000aH
	add	esi, 6
	push	eax
	mov	DWORD PTR _pos, esi
	call	_exprint_recur

; 3381 :              strcat(pos++,")");

	mov	ecx, DWORD PTR _pos
	add	esp, 8
	lea	eax, DWORD PTR [ecx-1]
	inc	ecx
	mov	DWORD PTR _pos, ecx
$LL1601@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1601@exprint_re
	mov	cx, WORD PTR ??_C@_01PKGAHCOL@?$CJ?$AA@
	mov	edi, eax
	mov	WORD PTR [edi], cx
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN21@exprint_re:

; 3382 :           }
; 3383 :         else
; 3384 :         {
; 3385 :           strcat(pos," ("); pos += 2;

	mov	eax, DWORD PTR _pos
	dec	eax
	npad	3
$LL1602@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1602@exprint_re
	mov	dx, WORD PTR ??_C@_02GFKOMOKH@?5?$CI?$AA@
	add	DWORD PTR _pos, 2
	mov	WORD PTR [eax], dx
	mov	cl, BYTE PTR ??_C@_02GFKOMOKH@?5?$CI?$AA@+2
	mov	BYTE PTR [eax+2], cl

; 3386 :           if ( node->left )  exprint_recur(node+node->left,PREC_ARG);

	mov	eax, DWORD PTR [ebx+4]
	test	eax, eax
	je	SHORT $LN12@exprint_re
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	0
	push	eax
	call	_exprint_recur
	add	esp, 8
$LN12@exprint_re:

; 3387 :           strcat(pos++,")");

	mov	ecx, DWORD PTR _pos
	lea	eax, DWORD PTR [ecx-1]
	inc	ecx
	mov	DWORD PTR _pos, ecx
	npad	4
$LL1603@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1603@exprint_re
	mov	dx, WORD PTR ??_C@_01PKGAHCOL@?$CJ?$AA@
	mov	edi, eax
	mov	WORD PTR [edi], dx
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@exprint_re:

; 3388 :         }
; 3389 :         return;
; 3390 : 
; 3391 :      case SINGLE_ASSIGN_NODE: 
; 3392 :          exprint_recur(node+node->left,prec_parent);

	mov	eax, DWORD PTR [ebx+4]
	mov	esi, DWORD PTR _prec_parent$[ebp]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	esi
	push	eax
	call	_exprint_recur

; 3393 :          *(pos++) = '.'; *pos = 0;

	mov	eax, DWORD PTR _pos
	mov	BYTE PTR [eax], 46			; 0000002eH
	inc	eax
	mov	BYTE PTR [eax], 0

; 3394 :          exprint_recur(node+node->right,prec_parent);

	mov	ecx, DWORD PTR [ebx+8]
	imul	ecx, 168				; 000000a8H
	push	esi
	add	ecx, ebx
	mov	DWORD PTR _pos, eax
	push	ecx

; 3395 :          return;

	jmp	$LN1658@exprint_re
$LN10@exprint_re:

; 3396 : 
; 3397 :      case EQ_NODE:
; 3398 :          binary_print(node,prec_parent,PREC_COMP," == ",PREC_COMP);

	mov	edx, DWORD PTR _prec_parent$[ebp]
	push	30					; 0000001eH
	push	OFFSET ??_C@_04EDGKFFPL@?5?$DN?$DN?5?$AA@
	push	30					; 0000001eH
	push	edx
	push	ebx
	call	_binary_print
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@exprint_re:

; 3399 :          return;
; 3400 :      case NE_NODE:
; 3401 :          binary_print(node,prec_parent,PREC_COMP," != ",PREC_COMP);

	mov	eax, DWORD PTR _prec_parent$[ebp]
	push	30					; 0000001eH
	push	OFFSET ??_C@_04FJKFLNNM@?5?$CB?$DN?5?$AA@
	push	30					; 0000001eH
	push	eax
	push	ebx
	call	_binary_print
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@exprint_re:

; 3402 :          return;
; 3403 :      case GE_NODE:
; 3404 :          binary_print(node,prec_parent,PREC_COMP," >= ",PREC_COMP);

	mov	ecx, DWORD PTR _prec_parent$[ebp]
	push	30					; 0000001eH
	push	OFFSET ??_C@_04FBNPPKBF@?5?$DO?$DN?5?$AA@
	push	30					; 0000001eH
	push	ecx
	push	ebx
	call	_binary_print
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@exprint_re:

; 3405 :          return;
; 3406 :      case LE_NODE:
; 3407 :          binary_print(node,prec_parent,PREC_COMP," <= ",PREC_COMP);

	mov	edx, DWORD PTR _prec_parent$[ebp]
	push	30					; 0000001eH
	push	OFFSET ??_C@_04PLNGDCJO@?5?$DM?$DN?5?$AA@
	push	30					; 0000001eH
	push	edx
	push	ebx
	call	_binary_print
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@exprint_re:

; 3408 :          return;
; 3409 :      case GT_NODE:
; 3410 :          binary_print(node,prec_parent,PREC_COMP," > ",PREC_COMP);

	mov	eax, DWORD PTR _prec_parent$[ebp]
	push	30					; 0000001eH
	push	OFFSET ??_C@_03MFPIGDOF@?5?$DO?5?$AA@
	push	30					; 0000001eH
	push	eax
	push	ebx
	call	_binary_print
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@exprint_re:

; 3411 :          return;
; 3412 :      case LT_NODE:
; 3413 :          binary_print(node,prec_parent,PREC_COMP," < ",PREC_COMP);

	mov	ecx, DWORD PTR _prec_parent$[ebp]
	push	30					; 0000001eH
	push	OFFSET ??_C@_03MGHMLHIL@?5?$DM?5?$AA@
	push	30					; 0000001eH
	push	ecx
	push	ebx
	call	_binary_print
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@exprint_re:

; 3414 :          return;
; 3415 :      case AND_NODE:
; 3416 :          binary_print(node,prec_parent,PREC_AND," && ",PREC_AND);

	mov	edx, DWORD PTR _prec_parent$[ebp]
	push	20					; 00000014H
	push	OFFSET ??_C@_04NEABMJPE@?5?$CG?$CG?5?$AA@
	push	20					; 00000014H
	push	edx
	push	ebx
	call	_binary_print
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@exprint_re:

; 3417 :          return;
; 3418 :      case OR_NODE:
; 3419 :          binary_print(node,prec_parent,PREC_OR," || ",PREC_OR);

	mov	eax, DWORD PTR _prec_parent$[ebp]
	push	15					; 0000000fH
	push	OFFSET ??_C@_04BBJKINFE@?5?$HM?$HM?5?$AA@
	push	15					; 0000000fH
	push	eax
	push	ebx
	call	_binary_print
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN538@exprint_re:

; 1175 :          return;
; 1176 : 
; 1177 :     /* toggles */ case QUIETGO_NODE: case QUIETLOAD_NODE: case SLICE_VIEW_NODE:
; 1178 :     case CLIP_VIEW_NODE: case STAR_FINAGLING_NODE: case FORCE_DELETION_NODE:
; 1179 :     case KUSNER_NODE: case ESTIMATE_NODE: case DETURCK_NODE: case HOMOTHETY_NODE:
; 1180 :     case SQGAUSS_NODE: case AUTOPOP_NODE: case QUIET_NODE:
; 1181 :     case OLD_AREA_NODE: case APPROX_CURV_NODE: case RUNGE_KUTTA_NODE: 
; 1182 :     case CHECK_INCREASE_NODE:  case DEBUG_NODE: case MEAN_CURV_NODE: case RIBIERE_CG_NODE:
; 1183 :     case DIFFUSION_NODE: case GRAVITY_NODE: case CONJ_GRAD_NODE: case TRANSFORMS_NODE:
; 1184 :     case CONF_EDGE_SQCURV_NODE: case EFFECTIVE_AREA_NODE: 
; 1185 :     case RAW_CELLS_NODE: case CONNECTED_CELLS_NODE: case CLIPPED_CELLS_NODE:
; 1186 :     case THICKEN_NODE: case SHOW_INNER_NODE: case SHOW_OUTER_NODE: case COLORMAP_NODE: 
; 1187 :     case HESSIAN_DIFF_NODE: case POST_PROJECT_NODE: case MEAN_CURV_INT_NODE:
; 1188 :     case NORMAL_CURVATURE_NODE: case DIV_NORMAL_CURVATURE_NODE:
; 1189 :     case SHADING_NODE:  case FACET_COLORS_NODE: case BOUNDARY_CURVATURE_NODE:
; 1190 :     case NORMAL_MOTION_NODE: case PINNING_NODE: case VIEW_4D_NODE: case MEMDEBUG_NODE:
; 1191 :     case METRIC_CONVERSION_NODE: case AUTORECALC_NODE: case GV_BINARY_NODE:
; 1192 :     case SELF_SIMILAR_NODE: case AUTODISPLAY_NODE: case FORCE_POS_DEF_NODE:
; 1193 :     case ASSUME_ORIENTED_NODE: case HESSIAN_QUIET_NODE: case JIGGLE_TOGGLE_NODE:
; 1194 :     case HESSIAN_NORMAL_NODE: case YSMP_NODE: case BUNCH_KAUFMAN_NODE:
; 1195 :     case QUANTITIES_ONLY_NODE: case LINEAR_METRIC_NODE: case DETORUS_STICKY_NODE:
; 1196 :     case SQUARED_GRADIENT_NODE: case H_INVERSE_METRIC_NODE: case MKL_NODE:
; 1197 :     case HESSIAN_DOUBLE_NORMAL_NODE: case INTERP_BDRY_PARAM_NODE: 
; 1198 :     case HESSIAN_NORMAL_ONE_NODE: case PSCOLORFLAG_NODE: case GRIDFLAG_NODE:
; 1199 :     case SEPTUM_FLAG_NODE: case BOX_FLAG_NODE: case SHOW_ALL_EDGES_NODE:
; 1200 :     case CROSSINGFLAG_NODE: case LABELFLAG_NODE: case SHOW_ALL_QUANTITIES_NODE:
; 1201 :     case HESSIAN_NORMAL_PERP_NODE: case HESSIAN_SPECIAL_NORMAL_NODE: case ITDEBUG_NODE:
; 1202 :     case METIS_FACTOR_NODE: case VOLGRADS_EVERY_NODE: case ZENER_DRAG_NODE: 
; 1203 :     case BACKCULL_NODE: case INTERP_NORMALS_NODE: case TORUS_FILLED_NODE: case VERBOSE_NODE:
; 1204 :     case AMBIENT_PRESSURE_NODE: case DIRICHLET_MODE_NODE: case SOBOLEV_MODE_NODE:
; 1205 :     case KRAYNIKPOPVERTEX_FLAG_NODE: case FUNCTION_QUANTITY_SPARSE_NODE:
; 1206 :     case KRAYNIKPOPEDGE_FLAG_NODE: case VISIBILITY_TEST_NODE: case SPARSE_CONSTRAINTS_NODE:
; 1207 :     case K_ALTITUDE_FLAG_NODE: case FORCE_EDGESWAP_NODE:
; 1208 :     case BLAS_FLAG_NODE: case AUGMENTED_HESSIAN_NODE: case BREAK_AFTER_WARNING_NODE:
; 1209 :     case RGB_COLORS_FLAG_NODE:  case CIRCULAR_ARC_DRAW_NODE: case BEZIER_BASIS_NODE:
; 1210 :     case SMOOTH_GRAPH_NODE: case MPI_DEBUG_NODE: case POP_DISJOIN_NODE:
; 1211 :     case POP_TO_EDGE_NODE: case POP_TO_FACE_NODE: case POP_ENJOIN_NODE:
; 1212 :     case FULL_BOUNDING_BOX_NODE: case BIG_ENDIAN_NODE: case LITTLE_ENDIAN_NODE:
; 1213 :     case AUTOPOP_QUARTIC_NODE: case IMMEDIATE_AUTOPOP_NODE: case ROTATE_LIGHTS_NODE:
; 1214 :     case VIEW_TRANSFORMS_USE_UNIQUE_NODE: case PS_CMYKFLAG_NODE: case BREAK_ON_WARNING_NODE:
; 1215 :          sprintf(pos,"%s %s ",keywordname(node->type),
; 1216 :              node->op1.toggle_state==ON_?"ON":"OFF"); 

	cmp	DWORD PTR [ebx+32], 15000		; 00003a98H
	mov	eax, OFFSET ??_C@_02BFICIOJL@ON?$AA@
	je	SHORT $LN828@exprint_re
	mov	eax, OFFSET ??_C@_03MPPIHBHJ@OFF?$AA@
$LN828@exprint_re:
	push	eax
	push	edx
	call	_keywordname
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_06OHLOMLHG@?$CFs?5?$CFs?5?$AA@
	push	eax
	call	_sprintf

; 1217 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL1604@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1604@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN1056@exprint_re:

; 329  :   switch ( node->type )

	cmp	eax, 20001				; 00004e21H
	jg	$LN1057@exprint_re
	je	$LN412@exprint_re
	sub	eax, 10756				; 00002a04H
	cmp	eax, 6
	ja	$LN1@exprint_re
	jmp	DWORD PTR $LN1700@exprint_re[eax*4]
$LN575@exprint_re:

; 1021 :          return;
; 1022 :     
; 1023 :       case ELSE_NODE: /* root of IF */
; 1024 :          exprint_recur(node+node->left,prec_parent); /* IF part */

	mov	ecx, DWORD PTR [ebx+4]
	mov	esi, DWORD PTR _prec_parent$[ebp]
	imul	ecx, 168				; 000000a8H
	add	ecx, ebx
	push	esi
	push	ecx
	call	_exprint_recur
	add	esp, 8

; 1025 :          if ( node->right )

	cmp	DWORD PTR [ebx+8], 0
	je	$LN568@exprint_re

; 1026 :            { bracket_depth--;

	mov	edi, 1
	sub	DWORD PTR _bracket_depth, edi

; 1027 :              newline();

	call	_newline

; 1028 :              sprintf(pos,"else "); pos += strlen(pos);

	mov	edx, DWORD PTR _pos
	push	OFFSET ??_C@_05OINEHIOC@else?5?$AA@
	push	edx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1605@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1605@exprint_re

; 1029 :              bracket_depth++;

	add	DWORD PTR _bracket_depth, edi
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1030 :              newline();

	call	_newline

; 1031 :              exprint_recur(node+node->right,prec_parent); /* command */

	mov	eax, DWORD PTR [ebx+8]
	imul	eax, 168				; 000000a8H
	add	eax, ebx
	push	esi
	push	eax
	call	_exprint_recur
	add	esp, 8

; 1032 :              bracket_depth--;

	sub	DWORD PTR _bracket_depth, edi
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN438@exprint_re:

; 1579 :       case MAKE_THREAD_LISTS_NODE:sprintf(pos,"make_thread_lists "); pos+=strlen(pos); break;

	push	OFFSET ??_C@_0BD@CJDDBPIE@make_thread_lists?5?$AA@
	push	ecx
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1606@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1606@exprint_re
	pop	edi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN435@exprint_re:

; 1585 :          break;
; 1586 :              
; 1587 :       case SHOW_END_NODE:
; 1588 :          if ( node[node->left].type == SHOW_NODE )

	mov	edx, DWORD PTR [ebx+4]

; 1589 :            sprintf(pos,"show_expr ");  /* prevent extraneous shows from dump */

	push	OFFSET ??_C@_0L@PJAPHMCA@show_expr?5?$AA@
	imul	edx, 168				; 000000a8H
	push	ecx

; 1590 :          else sprintf(pos,"show_expr ");

	call	_sprintf

; 1591 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
	npad	1
$LL1607@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1607@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1592 :          exprint_recur(node+node->right,PREC_ASSIGN);

	mov	eax, DWORD PTR [ebx+8]
	imul	eax, 168				; 000000a8H
	push	10					; 0000000aH
	add	eax, ebx
	push	eax
	jmp	$LN1652@exprint_re
$LN432@exprint_re:

; 1593 :          break;
; 1594 : 
; 1595 :       case SET_PROC_END_NODE:
; 1596 :        { struct global *g = globals(node[node->left].op1.name_id);

	mov	esi, DWORD PTR [ebx+4]
	imul	esi, 168				; 000000a8H
	mov	eax, DWORD PTR [esi+ebx+32]
	add	esi, ebx
	mov	edx, eax
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN859@exprint_re
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN861@exprint_re
	mov	edx, DWORD PTR _localbase$[ebp]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [edx]
	jmp	SHORT $LN1647@exprint_re
$LN861@exprint_re:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN859@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN1647@exprint_re
$LN859@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+edx]
$LN1647@exprint_re:

; 1597 :          if ( node[node->left].type == REDEFINE_SINGLE_NODE )

	cmp	DWORD PTR [esi], 10045			; 0000273dH
	mov	DWORD PTR _g$90156[ebp], eax
	jne	SHORT $LN431@exprint_re

; 1598 :          { struct treenode *nnode = node+node->left;
; 1599 :            sprintf(pos,"%c :::= ",nnode->op1.letter);

	mov	edx, DWORD PTR [esi+32]
	push	edx
	push	OFFSET ??_C@_08CIJIHMDB@?$CFc?5?3?3?3?$DN?5?$AA@
	push	ecx
	call	_sprintf

; 1600 :            pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1608@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1608@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1601 :            exprint_recur(nnode+nnode->op2.jumpsize,0);

	mov	eax, DWORD PTR [esi+136]
	imul	eax, 168				; 000000a8H
	push	0
	add	eax, esi
	push	eax
	jmp	$LN1652@exprint_re
$LN431@exprint_re:

; 1602 :            break;
; 1603 :          }
; 1604 :          else if ( g->flags & PERMANENT )

	mov	eax, DWORD PTR _g$90156[ebp]
	test	BYTE PTR [eax+192], 16			; 00000010H

; 1605 :           sprintf(pos,"%s ::= ",g->name);

	push	eax
	je	SHORT $LN429@exprint_re
	push	OFFSET ??_C@_07DMFHGJKH@?$CFs?5?3?3?$DN?5?$AA@
	jmp	SHORT $LN1648@exprint_re
$LN429@exprint_re:

; 1606 :          else  sprintf(pos,"%s := ",g->name);

	push	OFFSET ??_C@_06JFMACMHF@?$CFs?5?3?$DN?5?$AA@
$LN1648@exprint_re:
	push	ecx
	call	_sprintf

; 1607 :          pos += strlen(pos);

	mov	edx, DWORD PTR _pos
	mov	eax, edx
	add	esp, 12					; 0000000cH
	lea	esi, DWORD PTR [eax+1]
	npad	6
$LL1609@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1609@exprint_re

; 1608 :          if ( node[node->right].type != COMMAND_BLOCK_NODE )

	mov	ecx, DWORD PTR [ebx+8]
	imul	ecx, 168				; 000000a8H
	sub	eax, esi
	add	edx, eax
	cmp	DWORD PTR [ecx+ebx], 10029		; 0000272dH
	mov	DWORD PTR _pos, edx
	je	SHORT $LN1630@exprint_re

; 1609 :          { strcat(pos,"{"); pos++; } 

	lea	edi, DWORD PTR [edx-1]
$LL1610@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1610@exprint_re
	mov	ax, WORD PTR ??_C@_01HCONENDN@?$HL?$AA@
	inc	edx
	mov	WORD PTR [edi], ax
	mov	DWORD PTR _pos, edx
$LN1630@exprint_re:

; 1610 :          current_proc_locals[++current_proc_depth] = g->value.proc.locals;

	mov	eax, DWORD PTR _current_proc_depth
	mov	ecx, DWORD PTR _g$90156[ebp]
	mov	esi, 1
	add	eax, esi
	mov	DWORD PTR _current_proc_depth, eax
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR _current_proc_locals[eax*4], edx

; 1611 :          exprint_recur(node+node->right,prec_parent);

	mov	ecx, DWORD PTR [ebx+8]
	mov	eax, DWORD PTR _prec_parent$[ebp]
	imul	ecx, 168				; 000000a8H
	push	eax
	add	ecx, ebx
	push	ecx
	call	_exprint_recur

; 1612 :          current_proc_depth--;

	sub	DWORD PTR _current_proc_depth, esi

; 1613 :          if ( node[node->right].type != COMMAND_BLOCK_NODE )

	mov	edx, DWORD PTR [ebx+8]
	imul	edx, 168				; 000000a8H
	add	esp, 8
	cmp	DWORD PTR [edx+ebx], 10029		; 0000272dH
	je	$LN730@exprint_re

; 1614 :          { strcat(pos,"}"); pos++; } 

	mov	edi, DWORD PTR _pos
	dec	edi
	npad	6
$LL1611@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1611@exprint_re
	mov	ax, WORD PTR ??_C@_01CELHOKLL@?$HN?$AA@
	add	DWORD PTR _pos, esi
	mov	WORD PTR [edi], ax
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN425@exprint_re:

; 1615 :          break;
; 1616 :        }
; 1617 :       case SET_PERM_PROC_END_NODE:
; 1618 :          sprintf(pos,"%s ::= ",perm_globals(node[node->left].op1.name_id)->name);

	mov	edx, DWORD PTR [ebx+4]
	imul	edx, 168				; 000000a8H
	mov	eax, DWORD PTR [edx+ebx+32]
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	push	eax
	push	OFFSET ??_C@_07DMFHGJKH@?$CFs?5?3?3?$DN?5?$AA@
	push	ecx
	call	_sprintf

; 1619 :          pos += strlen(pos);

	mov	esi, DWORD PTR _pos
	mov	eax, esi
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL1612@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1612@exprint_re

; 1620 :          if ( node[node->right].type != COMMAND_BLOCK_NODE )

	mov	ecx, DWORD PTR [ebx+8]
	imul	ecx, 168				; 000000a8H
	sub	eax, edx
	add	esi, eax
	cmp	DWORD PTR [ecx+ebx], 10029		; 0000272dH
	mov	DWORD PTR _pos, esi
	je	SHORT $LN1631@exprint_re

; 1621 :          { strcat(pos,"{"); pos++; } 

	lea	edi, DWORD PTR [esi-1]
$LL1613@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1613@exprint_re
	mov	dx, WORD PTR ??_C@_01HCONENDN@?$HL?$AA@
	inc	esi
	mov	WORD PTR [edi], dx
	mov	DWORD PTR _pos, esi
$LN1631@exprint_re:

; 1622 :          exprint_recur(node+node->right,prec_parent);

	mov	ecx, DWORD PTR [ebx+8]
	mov	eax, DWORD PTR _prec_parent$[ebp]
	imul	ecx, 168				; 000000a8H
	push	eax
	add	ecx, ebx
	push	ecx
	call	_exprint_recur

; 1623 :          if ( node[node->right].type != COMMAND_BLOCK_NODE )

	mov	edx, DWORD PTR [ebx+8]
	imul	edx, 168				; 000000a8H
	add	esp, 8
	cmp	DWORD PTR [edx+ebx], 10029		; 0000272dH
	je	$LN730@exprint_re

; 1624 :          { strcat(pos,"}"); pos++; } 

	mov	edi, DWORD PTR _pos
	dec	edi
$LL1614@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1614@exprint_re
	mov	ax, WORD PTR ??_C@_01CELHOKLL@?$HN?$AA@
	inc	DWORD PTR _pos
	mov	WORD PTR [edi], ax
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN177@exprint_re:

; 2720 :          return;
; 2721 : 
; 2722 :       case COND_ELSE_NODE:
; 2723 :          binary_print(node,prec_parent,PREC_COND,"):(",PREC_COND);

	mov	ecx, DWORD PTR _prec_parent$[ebp]
	push	13					; 0000000dH
	push	OFFSET ??_C@_03HHCAAOLL@?$CJ?3?$CI?$AA@
	push	13					; 0000000dH
	push	ecx
	push	ebx
	call	_binary_print

; 2724 :          strcat(pos++,")");

	mov	ecx, DWORD PTR _pos
	add	esp, 20					; 00000014H
	lea	eax, DWORD PTR [ecx-1]
	inc	ecx
	mov	DWORD PTR _pos, ecx
$LL1615@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1615@exprint_re
	mov	dx, WORD PTR ??_C@_01PKGAHCOL@?$CJ?$AA@
	mov	edi, eax
	mov	WORD PTR [edi], dx
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN412@exprint_re:

; 1660 :          break;
; 1661 : 
; 1662 :       case SET_FUNCTION_NODE:
; 1663 :       case FUNCTION_PROTO_NODE:
; 1664 :        { struct global *g = globals(node[node->left].op1.name_id);

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	mov	eax, DWORD PTR [eax+ebx+32]
	mov	edx, eax
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN877@exprint_re
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN879@exprint_re
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	edx, esi
	add	eax, DWORD PTR [edx]
	mov	esi, eax
	jmp	SHORT $LN878@exprint_re
$LN879@exprint_re:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN877@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	esi, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN878@exprint_re
$LN877@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	esi, DWORD PTR [eax+edx]
$LN878@exprint_re:

; 1665 :          sprintf(pos,"function %s %s (",datatype_name[node->op4.ret_type],
; 1666 :                 g->name);

	mov	eax, DWORD PTR [ebx+148]
	mov	edx, DWORD PTR _datatype_name[eax*4]
	push	esi
	push	edx
	push	OFFSET ??_C@_0BB@CHELAHME@function?5?$CFs?5?$CFs?5?$CI?$AA@
	push	ecx
	call	_sprintf

; 1667 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
$LL1616@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1616@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1668 :          current_proc_locals[++current_proc_depth] = g->value.proc.locals;

	mov	eax, DWORD PTR _current_proc_depth
	inc	eax
	mov	DWORD PTR _current_proc_depth, eax
	mov	ecx, DWORD PTR [esi+72]
	mov	DWORD PTR _current_proc_locals[eax*4], ecx

; 1669 :          exprint_recur(node+node->left,PREC_ARG); /* arglist */

	mov	edx, DWORD PTR [ebx+4]
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	0
	push	edx
	call	_exprint_recur

; 1670 :          if ( node->type == SET_FUNCTION_NODE )
; 1671 :          { strcat(pos,")\n"); pos += strlen(pos);

	mov	esi, DWORD PTR _pos
	add	esp, 8
	cmp	DWORD PTR [ebx], 10048			; 00002740H
	jne	SHORT $LN411@exprint_re
	lea	eax, DWORD PTR [esi-1]
	npad	2
$LL1617@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1617@exprint_re
	mov	cx, WORD PTR ??_C@_02MNMNLDAI@?$CJ?6?$AA@
	mov	WORD PTR [eax], cx
	mov	dl, BYTE PTR ??_C@_02MNMNLDAI@?$CJ?6?$AA@+2
	mov	BYTE PTR [eax+2], dl
	mov	eax, esi
	lea	edx, DWORD PTR [eax+1]
$LL1618@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1618@exprint_re

; 1672 :            exprint_recur(node+node->right,prec_parent); /* body */

	jmp	$LN1650@exprint_re
$LN411@exprint_re:

; 1673 :          }
; 1674 :          else { strcat(pos,");\n"); pos += strlen(pos); }

	lea	edi, DWORD PTR [esi-1]
	npad	1
$LL1619@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1619@exprint_re
	mov	edx, DWORD PTR ??_C@_03NBFACCKM@?$CJ?$DL?6?$AA@
	mov	eax, esi
	mov	DWORD PTR [edi], edx
	lea	edx, DWORD PTR [eax+1]
$LL1620@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1620@exprint_re

; 1675 :          current_proc_depth--;
; 1676 :          break;

	jmp	$LN1649@exprint_re
$LN1057@exprint_re:

; 329  :   switch ( node->type )

	cmp	eax, 20002				; 00004e22H
	je	$LN402@exprint_re
$LN1@exprint_re:

; 3420 :          return;
; 3421 :      case CONJUNCTION_END_NODE:     
; 3422 :          exprint_recur(node+node->left,prec_parent);
; 3423 :          return;
; 3424 : 
; 3425 :      default: 
; 3426 :          sprintf(pos,"(unknown)");

	push	OFFSET ??_C@_09GPGAJHPD@?$CIunknown?$CJ?$AA@
	push	ecx
	call	_sprintf

; 3427 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL1621@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1621@exprint_re

; 3428 :          sprintf(errmsg,"Printing of expression node type %s (%d) unimplemented.\n",
; 3429 :          tokname(node->type),node->type);

	mov	ebx, DWORD PTR [ebx]
	sub	eax, edx
	add	DWORD PTR _pos, eax
	push	ebx
	push	ebx
	call	_tokname
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0DJ@JKBDOPAM@Printing?5of?5expression?5node?5type@
	push	OFFSET _errmsg
	call	_sprintf

; 3430 :          kb_error(1656,errmsg,WARNING);

	push	2
	push	OFFSET _errmsg
	push	1656					; 00000678H
	call	_kb_error
	add	esp, 28					; 0000001cH
	pop	edi
	pop	esi
	pop	ebx

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN402@exprint_re:

; 1684 :          break;
; 1685 :       case PROCEDURE_CALL_RETURN_NODE:
; 1686 :          exprint_recur(node+node->left,prec_parent); /* PROCEDURE_CALL_ */
; 1687 :          break;
; 1688 : 
; 1689 :       case PROCEDURE_START_NODE: break;
; 1690 :       case PROCEDURE_DEF_START_NODE: break;
; 1691 :       case PROCEDURE_PROTO_START_NODE: break;
; 1692 : 
; 1693 :       case PROCEDURE_HEAD_NODE:
; 1694 :          exprint_recur(node+node->right,PREC_ARG); /* arglist */
; 1695 :          break;
; 1696 : 
; 1697 :       case SET_ARGSPROC_NODE:
; 1698 :       case PROCEDURE_PROTO_NODE:
; 1699 :        { struct global *g = globals(node[node->left].op1.name_id);

	mov	eax, DWORD PTR [ebx+4]
	imul	eax, 168				; 000000a8H
	mov	eax, DWORD PTR [eax+ebx+32]
	mov	edx, eax
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN889@exprint_re
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN891@exprint_re
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	edx, esi
	add	eax, DWORD PTR [edx]
	mov	esi, eax
	jmp	SHORT $LN890@exprint_re
$LN891@exprint_re:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN889@exprint_re
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	esi, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN890@exprint_re
$LN889@exprint_re:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	esi, DWORD PTR [eax+edx]
$LN890@exprint_re:

; 1700 :          sprintf(pos,"procedure %s (",g->name);

	push	esi
	push	OFFSET ??_C@_0P@DFGJEPPA@procedure?5?$CFs?5?$CI?$AA@
	push	ecx
	call	_sprintf

; 1701 :          pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL1622@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1622@exprint_re
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 1702 :          current_proc_locals[++current_proc_depth] = g->value.proc.locals;

	mov	eax, DWORD PTR _current_proc_depth
	inc	eax
	mov	DWORD PTR _current_proc_depth, eax
	mov	ecx, DWORD PTR [esi+72]
	mov	DWORD PTR _current_proc_locals[eax*4], ecx

; 1703 :          exprint_recur(node+node->left,PREC_ARG); /* arglist */

	mov	edx, DWORD PTR [ebx+4]
	imul	edx, 168				; 000000a8H
	add	edx, ebx
	push	0
	push	edx
	call	_exprint_recur

; 1704 :          if ( node->type == SET_ARGSPROC_NODE )
; 1705 :          { strcat(pos,")\n"); pos += strlen(pos);

	mov	esi, DWORD PTR _pos
	add	esp, 8
	cmp	DWORD PTR [ebx], 10054			; 00002746H
	jne	$LN401@exprint_re
	lea	eax, DWORD PTR [esi-1]
	npad	1
$LL1623@exprint_re:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1623@exprint_re
	mov	cx, WORD PTR ??_C@_02MNMNLDAI@?$CJ?6?$AA@
	mov	WORD PTR [eax], cx
	mov	dl, BYTE PTR ??_C@_02MNMNLDAI@?$CJ?6?$AA@+2
	mov	BYTE PTR [eax+2], dl
	mov	eax, esi
	lea	edx, DWORD PTR [eax+1]
$LL1624@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1624@exprint_re
$LN1650@exprint_re:

; 1706 :            exprint_recur(node+node->right,prec_parent); /* body */

	mov	ecx, DWORD PTR [ebx+8]
	imul	ecx, 168				; 000000a8H
	sub	eax, edx
	add	esi, eax
	mov	eax, DWORD PTR _prec_parent$[ebp]
	push	eax
	add	ecx, ebx
	push	ecx
	mov	DWORD PTR _pos, esi
	call	_exprint_recur
	add	esp, 8
	jmp	SHORT $LN400@exprint_re
$LN401@exprint_re:

; 1707 :          }
; 1708 :          else { strcat(pos,");\n"); pos += strlen(pos); }

	lea	edi, DWORD PTR [esi-1]
	npad	2
$LL1625@exprint_re:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL1625@exprint_re
	mov	edx, DWORD PTR ??_C@_03NBFACCKM@?$CJ?$DL?6?$AA@
	mov	eax, esi
	mov	DWORD PTR [edi], edx
	lea	edx, DWORD PTR [eax+1]
$LL1626@exprint_re:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL1626@exprint_re
$LN1649@exprint_re:
	sub	eax, edx
	add	esi, eax
	mov	DWORD PTR _pos, esi
$LN400@exprint_re:

; 1709 :          current_proc_depth--;

	dec	DWORD PTR _current_proc_depth
$LN730@exprint_re:

; 3431 : 
; 3432 :          return;
; 3433 :      }
; 3434 :   return ; /* shouldn't happen */
; 3435 : } /* end exprint_recur */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN1691@exprint_re:
	DD	$LN441@exprint_re
	DD	$LN1@exprint_re
	DD	$LN725@exprint_re
	DD	$LN439@exprint_re
	DD	$LN308@exprint_re
	DD	$LN443@exprint_re
	DD	$LN541@exprint_re
	DD	$LN458@exprint_re
	DD	$LN457@exprint_re
	DD	$LN365@exprint_re
	DD	$LN696@exprint_re
	DD	$LN694@exprint_re
	DD	$LN693@exprint_re
	DD	$LN692@exprint_re
	DD	$LN691@exprint_re
	DD	$LN487@exprint_re
	DD	$LN485@exprint_re
	DD	$LN484@exprint_re
	DD	$LN486@exprint_re
	DD	$LN419@exprint_re
	DD	$LN417@exprint_re
	DD	$LN409@exprint_re
	DD	$LN407@exprint_re
	DD	$LN525@exprint_re
	DD	$LN524@exprint_re
	DD	$LN718@exprint_re
	DD	$LN684@exprint_re
	DD	$LN682@exprint_re
	DD	$LN683@exprint_re
	DD	$LN542@exprint_re
	DD	$LN690@exprint_re
	DD	$LN689@exprint_re
	DD	$LN688@exprint_re
	DD	$LN730@exprint_re
	DD	$LN714@exprint_re
	DD	$LN706@exprint_re
	DD	$LN85@exprint_re
	DD	$LN85@exprint_re
	DD	$LN668@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN412@exprint_re
	DD	$LN413@exprint_re
	DD	$LN422@exprint_re
	DD	$LN730@exprint_re
	DD	$LN730@exprint_re
	DD	$LN730@exprint_re
	DD	$LN402@exprint_re
	DD	$LN403@exprint_re
	DD	$LN730@exprint_re
	DD	$LN730@exprint_re
	DD	$LN730@exprint_re
	DD	$LN615@exprint_re
	DD	$LN1@exprint_re
	DD	$LN601@exprint_re
	DD	$LN571@exprint_re
	DD	$LN175@exprint_re
	DD	$LN572@exprint_re
	DD	$LN176@exprint_re
	DD	$LN608@exprint_re
	DD	$LN611@exprint_re
	DD	$LN567@exprint_re
	DD	$LN570@exprint_re
	DD	$LN566@exprint_re
	DD	$LN1@exprint_re
	DD	$LN565@exprint_re
	DD	$LN407@exprint_re
	DD	$LN560@exprint_re
	DD	$LN561@exprint_re
	DD	$LN564@exprint_re
	DD	$LN325@exprint_re
	DD	$LN323@exprint_re
	DD	$LN321@exprint_re
	DD	$LN312@exprint_re
	DD	$LN313@exprint_re
	DD	$LN311@exprint_re
	DD	$LN318@exprint_re
	DD	$LN310@exprint_re
	DD	$LN314@exprint_re
	DD	$LN322@exprint_re
	DD	$LN309@exprint_re
	DD	$LN320@exprint_re
	DD	$LN319@exprint_re
	DD	$LN317@exprint_re
	DD	$LN316@exprint_re
	DD	$LN315@exprint_re
	DD	$LN324@exprint_re
	DD	$LN1@exprint_re
	DD	$LN232@exprint_re
	DD	$LN204@exprint_re
	DD	$LN203@exprint_re
	DD	$LN202@exprint_re
	DD	$LN201@exprint_re
	DD	$LN200@exprint_re
	DD	$LN199@exprint_re
	DD	$LN197@exprint_re
	DD	$LN197@exprint_re
	DD	$LN194@exprint_re
	DD	$LN194@exprint_re
	DD	$LN231@exprint_re
	DD	$LN230@exprint_re
	DD	$LN229@exprint_re
	DD	$LN223@exprint_re
	DD	$LN193@exprint_re
	DD	$LN192@exprint_re
	DD	$LN6@exprint_re
	DD	$LN5@exprint_re
	DD	$LN7@exprint_re
	DD	$LN8@exprint_re
	DD	$LN9@exprint_re
	DD	$LN10@exprint_re
	DD	$LN4@exprint_re
	DD	$LN417@exprint_re
	DD	$LN3@exprint_re
	DD	$LN142@exprint_re
	DD	$LN185@exprint_re
	DD	$LN184@exprint_re
	DD	$LN183@exprint_re
	DD	$LN182@exprint_re
	DD	$LN181@exprint_re
	DD	$LN180@exprint_re
	DD	$LN179@exprint_re
	DD	$LN178@exprint_re
	DD	$LN173@exprint_re
	DD	$LN172@exprint_re
	DD	$LN171@exprint_re
	DD	$LN170@exprint_re
	DD	$LN166@exprint_re
	DD	$LN165@exprint_re
	DD	$LN167@exprint_re
	DD	$LN164@exprint_re
	DD	$LN163@exprint_re
	DD	$LN161@exprint_re
	DD	$LN162@exprint_re
	DD	$LN160@exprint_re
	DD	$LN153@exprint_re
	DD	$LN152@exprint_re
	DD	$LN151@exprint_re
	DD	$LN150@exprint_re
	DD	$LN159@exprint_re
	DD	$LN158@exprint_re
	DD	$LN157@exprint_re
	DD	$LN155@exprint_re
	DD	$LN156@exprint_re
	DD	$LN154@exprint_re
	DD	$LN149@exprint_re
	DD	$LN148@exprint_re
	DD	$LN147@exprint_re
	DD	$LN146@exprint_re
	DD	$LN145@exprint_re
	DD	$LN144@exprint_re
	DD	$LN169@exprint_re
	DD	$LN168@exprint_re
	DD	$LN143@exprint_re
	DD	$LN174@exprint_re
	DD	$LN228@exprint_re
	DD	$LN301@exprint_re
	DD	$LN580@exprint_re
	DD	$LN302@exprint_re
	DD	$LN224@exprint_re
	DD	$LN97@exprint_re
	DD	$LN102@exprint_re
	DD	$LN1@exprint_re
	DD	$LN103@exprint_re
	DD	$LN104@exprint_re
	DD	$LN96@exprint_re
	DD	$LN106@exprint_re
	DD	$LN1@exprint_re
	DD	$LN112@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN95@exprint_re
	DD	$LN100@exprint_re
	DD	$LN99@exprint_re
	DD	$LN98@exprint_re
	DD	$LN90@exprint_re
	DD	$LN87@exprint_re
	DD	$LN86@exprint_re
	DD	$LN88@exprint_re
	DD	$LN1@exprint_re
	DD	$LN89@exprint_re
	DD	$LN1@exprint_re
	DD	$LN94@exprint_re
	DD	$LN93@exprint_re
	DD	$LN92@exprint_re
	DD	$LN1@exprint_re
	DD	$LN114@exprint_re
	DD	$LN113@exprint_re
	DD	$LN1@exprint_re
	DD	$LN115@exprint_re
	DD	$LN91@exprint_re
	DD	$LN111@exprint_re
	DD	$LN110@exprint_re
	DD	$LN109@exprint_re
	DD	$LN108@exprint_re
	DD	$LN107@exprint_re
	DD	$LN122@exprint_re
	DD	$LN127@exprint_re
	DD	$LN1@exprint_re
	DD	$LN123@exprint_re
	DD	$LN116@exprint_re
	DD	$LN121@exprint_re
	DD	$LN120@exprint_re
	DD	$LN119@exprint_re
	DD	$LN118@exprint_re
	DD	$LN117@exprint_re
	DD	$LN126@exprint_re
	DD	$LN125@exprint_re
	DD	$LN101@exprint_re
	DD	$LN124@exprint_re
	DD	$LN105@exprint_re
	DD	$LN417@exprint_re
	DD	$LN704@exprint_re
	DD	$LN140@exprint_re
	DD	$LN136@exprint_re
	DD	$LN135@exprint_re
	DD	$LN132@exprint_re
	DD	$LN131@exprint_re
	DD	$LN134@exprint_re
	DD	$LN133@exprint_re
	DD	$LN130@exprint_re
	DD	$LN129@exprint_re
	DD	$LN137@exprint_re
	DD	$LN138@exprint_re
	DD	$LN291@exprint_re
	DD	$LN289@exprint_re
	DD	$LN407@exprint_re
	DD	$LN198@exprint_re
	DD	$LN292@exprint_re
	DD	$LN300@exprint_re
	DD	$LN128@exprint_re
	DD	$LN730@exprint_re
	DD	$LN1@exprint_re
	DD	$LN306@exprint_re
	DD	$LN245@exprint_re
	DD	$LN245@exprint_re
	DD	$LN245@exprint_re
	DD	$LN245@exprint_re
	DD	$LN245@exprint_re
	DD	$LN245@exprint_re
	DD	$LN245@exprint_re
	DD	$LN245@exprint_re
	DD	$LN245@exprint_re
	DD	$LN245@exprint_re
	DD	$LN1@exprint_re
	DD	$LN245@exprint_re
	DD	$LN245@exprint_re
	DD	$LN245@exprint_re
	DD	$LN245@exprint_re
	DD	$LN245@exprint_re
	DD	$LN245@exprint_re
	DD	$LN245@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN246@exprint_re
	DD	$LN11@exprint_re
	DD	$LN566@exprint_re
	DD	$LN80@exprint_re
	DD	$LN79@exprint_re
	DD	$LN279@exprint_re
	DD	$LN1@exprint_re
	DD	$LN282@exprint_re
	DD	$LN283@exprint_re
	DD	$LN281@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN288@exprint_re
	DD	$LN1@exprint_re
	DD	$LN261@exprint_re
	DD	$LN260@exprint_re
	DD	$LN287@exprint_re
	DD	$LN286@exprint_re
	DD	$LN285@exprint_re
	DD	$LN284@exprint_re
	DD	$LN262@exprint_re
	DD	$LN267@exprint_re
	DD	$LN266@exprint_re
	DD	$LN1@exprint_re
	DD	$LN265@exprint_re
	DD	$LN264@exprint_re
	DD	$LN1@exprint_re
	DD	$LN263@exprint_re
	DD	$LN1@exprint_re
	DD	$LN82@exprint_re
	DD	$LN81@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN278@exprint_re
	DD	$LN1@exprint_re
	DD	$LN275@exprint_re
	DD	$LN274@exprint_re
	DD	$LN273@exprint_re
	DD	$LN272@exprint_re
	DD	$LN271@exprint_re
	DD	$LN270@exprint_re
	DD	$LN269@exprint_re
	DD	$LN268@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN253@exprint_re
	DD	$LN252@exprint_re
	DD	$LN251@exprint_re
	DD	$LN250@exprint_re
	DD	$LN249@exprint_re
	DD	$LN248@exprint_re
	DD	$LN247@exprint_re
	DD	$LN254@exprint_re
	DD	$LN258@exprint_re
	DD	$LN663@exprint_re
	DD	$LN662@exprint_re
	DD	$LN654@exprint_re
	DD	$LN650@exprint_re
	DD	$LN650@exprint_re
	DD	$LN635@exprint_re
	DD	$LN635@exprint_re
	DD	$LN635@exprint_re
	DD	$LN635@exprint_re
	DD	$LN631@exprint_re
	DD	$LN638@exprint_re
	DD	$LN638@exprint_re
	DD	$LN625@exprint_re
	DD	$LN639@exprint_re
	DD	$LN664@exprint_re
	DD	$LN649@exprint_re
	DD	$LN649@exprint_re
	DD	$LN649@exprint_re
	DD	$LN653@exprint_re
	DD	$LN652@exprint_re
	DD	$LN649@exprint_re
	DD	$LN649@exprint_re
	DD	$LN649@exprint_re
	DD	$LN649@exprint_re
	DD	$LN191@exprint_re
	DD	$LN190@exprint_re
	DD	$LN639@exprint_re
	DD	$LN188@exprint_re
	DD	$LN639@exprint_re
	DD	$LN649@exprint_re
	DD	$LN374@exprint_re
	DD	$LN373@exprint_re
	DD	$LN372@exprint_re
	DD	$LN371@exprint_re
	DD	$LN381@exprint_re
	DD	$LN370@exprint_re
	DD	$LN369@exprint_re
	DD	$LN378@exprint_re
	DD	$LN1@exprint_re
	DD	$LN709@exprint_re
	DD	$LN707@exprint_re
	DD	$LN708@exprint_re
	DD	$LN1@exprint_re
	DD	$LN437@exprint_re
	DD	$LN449@exprint_re
	DD	$LN445@exprint_re
	DD	$LN444@exprint_re
	DD	$LN141@exprint_re
	DD	$LN620@exprint_re
	DD	$LN619@exprint_re
	DD	$LN618@exprint_re
	DD	$LN617@exprint_re
	DD	$LN616@exprint_re
	DD	$LN1@exprint_re
	DD	$LN701@exprint_re
	DD	$LN700@exprint_re
	DD	$LN699@exprint_re
	DD	$LN698@exprint_re
	DD	$LN697@exprint_re
	DD	$LN687@exprint_re
	DD	$LN686@exprint_re
	DD	$LN685@exprint_re
	DD	$LN357@exprint_re
	DD	$LN356@exprint_re
	DD	$LN510@exprint_re
	DD	$LN526@exprint_re
	DD	$LN515@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN368@exprint_re
	DD	$LN367@exprint_re
	DD	$LN366@exprint_re
	DD	$LN508@exprint_re
	DD	$LN509@exprint_re
	DD	$LN211@exprint_re
	DD	$LN210@exprint_re
	DD	$LN206@exprint_re
	DD	$LN1@exprint_re
	DD	$LN207@exprint_re
	DD	$LN208@exprint_re
	DD	$LN215@exprint_re
	DD	$LN214@exprint_re
	DD	$LN213@exprint_re
	DD	$LN212@exprint_re
	DD	$LN209@exprint_re
	DD	$LN205@exprint_re
	DD	$LN234@exprint_re
	DD	$LN233@exprint_re
	DD	$LN521@exprint_re
	DD	$LN519@exprint_re
	DD	$LN520@exprint_re
	DD	$LN517@exprint_re
	DD	$LN518@exprint_re
	DD	$LN516@exprint_re
	DD	$LN522@exprint_re
	DD	$LN523@exprint_re
	DD	$LN78@exprint_re
	DD	$LN1628@exprint_re
	DD	$LN280@exprint_re
	DD	$LN277@exprint_re
	DD	$LN276@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1628@exprint_re
	DD	$LN242@exprint_re
	DD	$LN241@exprint_re
	DD	$LN241@exprint_re
	DD	$LN241@exprint_re
	DD	$LN240@exprint_re
	DD	$LN239@exprint_re
	DD	$LN239@exprint_re
	DD	$LN239@exprint_re
	DD	$LN238@exprint_re
	DD	$LN237@exprint_re
	DD	$LN1@exprint_re
	DD	$LN1@exprint_re
	DD	$LN237@exprint_re
	DD	$LN1@exprint_re
	DD	$LN237@exprint_re
	DD	$LN236@exprint_re
	DD	$LN235@exprint_re
	DD	$LN235@exprint_re
	DD	$LN235@exprint_re
	DD	$LN243@exprint_re
	DD	$LN730@exprint_re
	DD	$LN730@exprint_re
	DD	$LN728@exprint_re
	DD	$LN730@exprint_re
	DD	$LN672@exprint_re
	DD	$LN670@exprint_re
	DD	$LN605@exprint_re
	DD	$LN558@exprint_re
	DD	$LN555@exprint_re
	DD	$LN543@exprint_re
	DD	$LN552@exprint_re
	DD	$LN549@exprint_re
	DD	$LN1@exprint_re
	DD	$LN546@exprint_re
	DD	$LN543@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN462@exprint_re
	DD	$LN453@exprint_re
	DD	$LN328@exprint_re
	DD	$LN327@exprint_re
	DD	$LN336@exprint_re
	DD	$LN335@exprint_re
	DD	$LN334@exprint_re
	DD	$LN331@exprint_re
	DD	$LN338@exprint_re
	DD	$LN337@exprint_re
	DD	$LN582@exprint_re
	DD	$LN636@exprint_re
	DD	$LN581@exprint_re
	DD	$LN579@exprint_re
	DD	$LN451@exprint_re
	DD	$LN448@exprint_re
	DD	$LN450@exprint_re
	DD	$LN447@exprint_re
	DD	$LN353@exprint_re
	DD	$LN355@exprint_re
	DD	$LN452@exprint_re
	DD	$LN455@exprint_re
	DD	$LN464@exprint_re
	DD	$LN483@exprint_re
	DD	$LN470@exprint_re
	DD	$LN446@exprint_re
	DD	$LN471@exprint_re
	DD	$LN719@exprint_re
	DD	$LN720@exprint_re
	DD	$LN481@exprint_re
	DD	$LN475@exprint_re
	DD	$LN442@exprint_re
	DD	$LN489@exprint_re
	DD	$LN489@exprint_re
	DD	$LN480@exprint_re
	DD	$LN490@exprint_re
	DD	$LN491@exprint_re
	DD	$LN488@exprint_re
	DD	$LN478@exprint_re
	DD	$LN479@exprint_re
	DD	$LN1@exprint_re
	DD	$LN477@exprint_re
	DD	$LN476@exprint_re
	DD	$LN1@exprint_re
	DD	$LN482@exprint_re
	DD	$LN679@exprint_re
	DD	$LN680@exprint_re
	DD	$LN678@exprint_re
	DD	$LN675@exprint_re
	DD	$LN538@exprint_re
	DD	$LN527@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN594@exprint_re
	DD	$LN597@exprint_re
	DD	$LN465@exprint_re
	DD	$LN702@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN467@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN536@exprint_re
	DD	$LN466@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN528@exprint_re
	DD	$LN529@exprint_re
	DD	$LN530@exprint_re
	DD	$LN624@exprint_re
	DD	$LN623@exprint_re
	DD	$LN622@exprint_re
	DD	$LN621@exprint_re
	DD	$LN531@exprint_re
	DD	$LN532@exprint_re
	DD	$LN533@exprint_re
	DD	$LN535@exprint_re
	DD	$LN534@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN1@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN358@exprint_re
	DD	$LN364@exprint_re
	DD	$LN351@exprint_re
	DD	$LN361@exprint_re
	DD	$LN377@exprint_re
	DD	$LN600@exprint_re
	DD	$LN604@exprint_re
	DD	$LN602@exprint_re
	DD	$LN603@exprint_re
	DD	$LN598@exprint_re
	DD	$LN612@exprint_re
	DD	$LN613@exprint_re
	DD	$LN594@exprint_re
	DD	$LN588@exprint_re
	DD	$LN591@exprint_re
	DD	$LN597@exprint_re
	DD	$LN585@exprint_re
	DD	$LN585@exprint_re
	DD	$LN585@exprint_re
	DD	$LN585@exprint_re
	DD	$LN584@exprint_re
	DD	$LN584@exprint_re
	DD	$LN583@exprint_re
	DD	$LN582@exprint_re
	DD	$LN577@exprint_re
	DD	$LN576@exprint_re
	DD	$LN584@exprint_re
	DD	$LN454@exprint_re
	DD	$LN496@exprint_re
	DD	$LN340@exprint_re
	DD	$LN339@exprint_re
	DD	$LN344@exprint_re
	DD	$LN495@exprint_re
	DD	$LN494@exprint_re
	DD	$LN497@exprint_re
	DD	$LN350@exprint_re
	DD	$LN348@exprint_re
	DD	$LN346@exprint_re
	DD	$LN347@exprint_re
	DD	$LN345@exprint_re
	DD	$LN342@exprint_re
	DD	$LN349@exprint_re
	DD	$LN537@exprint_re
	DD	$LN511@exprint_re
	DD	$LN512@exprint_re
	DD	$LN505@exprint_re
	DD	$LN507@exprint_re
	DD	$LN506@exprint_re
	DD	$LN343@exprint_re
	DD	$LN381@exprint_re
	DD	$LN378@exprint_re
	DD	$LN390@exprint_re
	DD	$LN398@exprint_re
	DD	$LN382@exprint_re
	DD	$LN399@exprint_re
	DD	$LN669@exprint_re
	DD	$LN1@exprint_re
	DD	$LN493@exprint_re
	DD	$LN514@exprint_re
	DD	$LN513@exprint_re
	DD	$LN218@exprint_re
	DD	$LN219@exprint_re
	DD	$LN216@exprint_re
	DD	$LN220@exprint_re
	DD	$LN217@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN461@exprint_re
	DD	$LN459@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN469@exprint_re
	DD	$LN468@exprint_re
	DD	$LN460@exprint_re
	DD	$LN653@exprint_re
	DD	$LN712@exprint_re
	DD	$LN711@exprint_re
	DD	$LN710@exprint_re
	DD	$LN456@exprint_re
	DD	$LN722@exprint_re
	DD	$LN721@exprint_re
	DD	$LN463@exprint_re
	DD	$LN436@exprint_re
	DD	$LN474@exprint_re
	DD	$LN472@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
	DD	$LN538@exprint_re
$LN1692@exprint_re:
	DD	$LN659@exprint_re
	DD	$LN658@exprint_re
	DD	$LN657@exprint_re
	DD	$LN656@exprint_re
	DD	$LN655@exprint_re
$LN1693@exprint_re:
	DD	$LN645@exprint_re
	DD	$LN644@exprint_re
	DD	$LN643@exprint_re
	DD	$LN642@exprint_re
	DD	$LN641@exprint_re
$LN1694@exprint_re:
	DD	$LN502@exprint_re
	DD	$LN501@exprint_re
	DD	$LN500@exprint_re
	DD	$LN499@exprint_re
	DD	$LN498@exprint_re
$LN1695@exprint_re:
	DD	$LN395@exprint_re
	DD	$LN394@exprint_re
	DD	$LN393@exprint_re
	DD	$LN392@exprint_re
	DD	$LN391@exprint_re
$LN1696@exprint_re:
	DD	$LN387@exprint_re
	DD	$LN386@exprint_re
	DD	$LN385@exprint_re
	DD	$LN384@exprint_re
	DD	$LN383@exprint_re
$LN1697@exprint_re:
	DD	$LN297@exprint_re
	DD	$LN296@exprint_re
	DD	$LN295@exprint_re
	DD	$LN294@exprint_re
	DD	$LN293@exprint_re
$LN1698@exprint_re:
	DD	$LN51@exprint_re
	DD	$LN49@exprint_re
	DD	$LN44@exprint_re
	DD	$LN45@exprint_re
	DD	$LN46@exprint_re
	DD	$LN50@exprint_re
	DD	$LN48@exprint_re
	DD	$LN47@exprint_re
	DD	$LN54@exprint_re
	DD	$LN41@exprint_re
	DD	$LN43@exprint_re
	DD	$LN42@exprint_re
	DD	$LN73@exprint_re
	DD	$LN65@exprint_re
	DD	$LN64@exprint_re
	DD	$LN57@exprint_re
	DD	$LN63@exprint_re
	DD	$LN59@exprint_re
	DD	$LN58@exprint_re
	DD	$LN40@exprint_re
	DD	$LN37@exprint_re
	DD	$LN36@exprint_re
	DD	$LN33@exprint_re
	DD	$LN32@exprint_re
	DD	$LN31@exprint_re
	DD	$LN30@exprint_re
	DD	$LN29@exprint_re
	DD	$LN28@exprint_re
	DD	$LN25@exprint_re
	DD	$LN24@exprint_re
	DD	$LN23@exprint_re
	DD	$LN72@exprint_re
	DD	$LN61@exprint_re
	DD	$LN60@exprint_re
	DD	$LN62@exprint_re
	DD	$LN68@exprint_re
	DD	$LN70@exprint_re
	DD	$LN66@exprint_re
	DD	$LN67@exprint_re
	DD	$LN69@exprint_re
	DD	$LN22@exprint_re
$LN1584@exprint_re:
	DB	0
	DB	40					; 00000028H
	DB	1
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	2
	DB	40					; 00000028H
	DB	3
	DB	40					; 00000028H
	DB	4
	DB	40					; 00000028H
	DB	5
	DB	40					; 00000028H
	DB	6
	DB	40					; 00000028H
	DB	7
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	8
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	9
	DB	40					; 00000028H
	DB	10					; 0000000aH
	DB	40					; 00000028H
	DB	11					; 0000000bH
	DB	40					; 00000028H
	DB	12					; 0000000cH
	DB	40					; 00000028H
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	16					; 00000010H
	DB	17					; 00000011H
	DB	18					; 00000012H
	DB	40					; 00000028H
	DB	19					; 00000013H
	DB	20					; 00000014H
	DB	21					; 00000015H
	DB	22					; 00000016H
	DB	23					; 00000017H
	DB	24					; 00000018H
	DB	25					; 00000019H
	DB	26					; 0000001aH
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	27					; 0000001bH
	DB	28					; 0000001cH
	DB	29					; 0000001dH
	DB	30					; 0000001eH
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	31					; 0000001fH
	DB	32					; 00000020H
	DB	33					; 00000021H
	DB	34					; 00000022H
	DB	35					; 00000023H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	40					; 00000028H
	DB	36					; 00000024H
	DB	37					; 00000025H
	DB	38					; 00000026H
	DB	39					; 00000027H
$LN1699@exprint_re:
	DD	$LN18@exprint_re
	DD	$LN17@exprint_re
	DD	$LN16@exprint_re
	DD	$LN15@exprint_re
	DD	$LN14@exprint_re
$LN1700@exprint_re:
	DD	$LN432@exprint_re
	DD	$LN1@exprint_re
	DD	$LN425@exprint_re
	DD	$LN435@exprint_re
	DD	$LN575@exprint_re
	DD	$LN177@exprint_re
	DD	$LN438@exprint_re
_exprint_recur ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _set_print
_TEXT	SEGMENT
_node$ = 8						; size = 4
_keyw$ = 12						; size = 4
_attrw$ = 16						; size = 4
_prec_parent$ = 20					; size = 4
_set_print PROC						; COMDAT

; 3481 : { struct treenode *nnode;

	push	ebp
	mov	ebp, esp

; 3482 :   sprintf(pos,"%s ",keyw);

	mov	eax, DWORD PTR _keyw$[ebp]
	mov	ecx, DWORD PTR _pos
	push	eax
	push	OFFSET ??_C@_03IKGEINEE@?$CFs?5?$AA@
	push	ecx
	call	_sprintf

; 3483 :   pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL6@set_print:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL6@set_print
	sub	eax, edx
	add	DWORD PTR _pos, eax
	push	esi

; 3484 :   nnode = node + node->left;

	mov	esi, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [esi+4]
	imul	eax, 168				; 000000a8H
	add	eax, esi

; 3485 :   if ( nnode->type == WHERE_NODE ) nnode += nnode->left; /* get NEXT_ */

	cmp	DWORD PTR [eax], 10262			; 00002816H
	push	edi
	jne	SHORT $LN3@set_print
	mov	edx, DWORD PTR [eax+4]
	imul	edx, 168				; 000000a8H
	add	eax, edx
$LN3@set_print:

; 3486 :   exprint_recur(nnode,prec_parent);

	mov	edi, DWORD PTR _prec_parent$[ebp]
	push	edi
	push	eax
	call	_exprint_recur

; 3487 :   sprintf(pos," %s ",attrw); 

	mov	eax, DWORD PTR _attrw$[ebp]
	mov	ecx, DWORD PTR _pos
	push	eax
	push	OFFSET ??_C@_04KMMDIKEB@?5?$CFs?5?$AA@
	push	ecx
	call	_sprintf

; 3488 :   pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	add	esp, 20					; 00000014H
	lea	edx, DWORD PTR [eax+1]
	npad	1
$LL7@set_print:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL7@set_print
	sub	eax, edx
	add	DWORD PTR _pos, eax

; 3489 :   if ( node->right )  exprint_recur(node+node->right,prec_parent);

	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN2@set_print
	imul	eax, 168				; 000000a8H
	add	eax, esi
	push	edi
	push	eax
	call	_exprint_recur
	add	esp, 8
$LN2@set_print:

; 3490 :   if ( node[node->left].type == WHERE_NODE )

	mov	edx, DWORD PTR [esi+4]
	imul	edx, 168				; 000000a8H
	add	esi, edx
	cmp	DWORD PTR [esi], 10262			; 00002816H
	jne	SHORT $LN1@set_print

; 3491 :   { node+= node->left;
; 3492 :     sprintf(pos," where "); pos += strlen(pos);

	mov	eax, DWORD PTR _pos
	push	OFFSET ??_C@_07OFLPJMBB@?5where?5?$AA@
	push	eax
	call	_sprintf
	mov	eax, DWORD PTR _pos
	add	esp, 8
	lea	edx, DWORD PTR [eax+1]
$LL8@set_print:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL8@set_print

; 3493 :     exprint_recur(node+node->right,prec_parent);

	mov	ecx, DWORD PTR [esi+8]
	imul	ecx, 168				; 000000a8H
	add	ecx, esi
	sub	eax, edx
	add	DWORD PTR _pos, eax
	push	edi
	push	ecx
	call	_exprint_recur
	add	esp, 8
$LN1@set_print:
	pop	edi
	pop	esi

; 3494 :   }
; 3495 :   return;
; 3496 : } // end set_print()

	pop	ebp
	ret	0
_set_print ENDP
_TEXT	ENDS
PUBLIC	_print_express
EXTRN	_list_calloc:PROC
; Function compile flags: /Ogtp
;	COMDAT _print_express
_TEXT	SEGMENT
_node$ = 8						; size = 4
_c$ = 12						; size = 4
_print_express PROC					; COMDAT

; 90   : { char *src,*dest;

	push	ebp
	mov	ebp, esp

; 91   :   int linestart_flag;
; 92   : 
; 93   :   if ( !strstart )  /* for first time thru */

	mov	eax, DWORD PTR _strstart
	test	eax, eax
	jne	SHORT $LN12@print_expr

; 94   :     { strsize = 200;
; 95   :       strstart = my_list_calloc(1,strsize,ETERNAL_BLOCK);

	push	95					; 0000005fH
	push	OFFSET ??_C@_09COHMOBAO@EXPRINT?4C?$AA@
	push	60138					; 0000eaeaH
	push	200					; 000000c8H
	push	1
	mov	DWORD PTR _strsize, 200			; 000000c8H
	call	_list_calloc
	add	esp, 20					; 00000014H
	mov	DWORD PTR _strstart, eax
	jmp	SHORT $LN11@print_expr
$LN12@print_expr:

; 96   :     }
; 97   :   else strstart[0] = '\0';

	mov	BYTE PTR [eax], 0
$LN11@print_expr:

; 98   :   linestart = pos = strstart;
; 99   :   vch = (char)c;

	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR _vch, cl

; 100  : 
; 101  :   if ( !node || !node->root ) { strcpy(strstart,"{}"); return strstart;}

	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR _pos, eax
	mov	DWORD PTR _linestart, eax
	test	ecx, ecx
	je	$LN9@print_expr
	cmp	DWORD PTR [ecx+4], 0
	je	$LN9@print_expr

; 102  : 
; 103  :   bracket_depth = 0;
; 104  :   current_proc_locals[0] = node->locals;

	mov	edx, DWORD PTR [ecx+8]
	push	esi
	push	edi
	mov	DWORD PTR _current_proc_locals, edx

; 105  :   current_proc_depth = 0;

	mov	DWORD PTR _current_proc_depth, 0

; 106  :   exprint_recur(node->root,0);

	mov	eax, DWORD PTR [ecx+4]
	push	0
	push	eax
	mov	DWORD PTR _bracket_depth, 0
	call	_exprint_recur

; 107  : 
; 108  :   // Combine multiple spaces, except at start of line
; 109  :   // Also eliminate spaces before commas
; 110  :   linestart_flag = 1;
; 111  :   for ( src = strstart, dest = strstart ; *src != 0 ; src++ )

	mov	eax, DWORD PTR _strstart
	add	esp, 8
	cmp	BYTE PTR [eax], 0
	mov	edi, 1
	mov	edx, eax
	mov	esi, eax
	je	SHORT $LN6@print_expr
$LL8@print_expr:

; 112  :   { if ( *src == '\n' ) linestart_flag = 1;

	mov	cl, BYTE PTR [edx]
	cmp	cl, 10					; 0000000aH
	jne	SHORT $LN5@print_expr
	mov	edi, 1
	jmp	SHORT $LN3@print_expr
$LN5@print_expr:

; 113  :     else if ( linestart_flag && (*src != ' ') )

	test	edi, edi
	je	SHORT $LN3@print_expr
	cmp	cl, 32					; 00000020H
	je	SHORT $LN17@print_expr

; 114  :       linestart_flag = 0;

	xor	edi, edi
$LN3@print_expr:

; 115  :     if ( *src == ' ' && src[-1] == ' ' && !linestart_flag ) 

	cmp	cl, 32					; 00000020H
	jne	SHORT $LN2@print_expr
$LN17@print_expr:
	cmp	BYTE PTR [edx-1], 32			; 00000020H
	jne	SHORT $LN2@print_expr
	test	edi, edi
	je	SHORT $LN7@print_expr
$LN2@print_expr:

; 116  :       continue;
; 117  :     if ( *src == ',' && dest[-1] == ' ' )

	cmp	cl, 44					; 0000002cH
	jne	SHORT $LN1@print_expr
	cmp	BYTE PTR [esi-1], 32			; 00000020H
	jne	SHORT $LN1@print_expr

; 118  :     { dest[-1] = *src;

	mov	BYTE PTR [esi-1], cl

; 119  :       continue;

	jmp	SHORT $LN7@print_expr
$LN1@print_expr:

; 120  :     }
; 121  :     *dest = *src;

	mov	BYTE PTR [esi], cl

; 122  :      dest++; 

	inc	esi
$LN7@print_expr:

; 107  : 
; 108  :   // Combine multiple spaces, except at start of line
; 109  :   // Also eliminate spaces before commas
; 110  :   linestart_flag = 1;
; 111  :   for ( src = strstart, dest = strstart ; *src != 0 ; src++ )

	inc	edx
	cmp	BYTE PTR [edx], 0
	jne	SHORT $LL8@print_expr
$LN6@print_expr:
	pop	edi

; 123  :   }
; 124  :   *dest = 0;

	mov	BYTE PTR [esi], 0
	pop	esi

; 125  :        
; 126  :     
; 127  :   return strstart;
; 128  : 
; 129  : } // end print_express()

	pop	ebp
	ret	0
$LN9@print_expr:

; 100  : 
; 101  :   if ( !node || !node->root ) { strcpy(strstart,"{}"); return strstart;}

	mov	cx, WORD PTR ??_C@_02MCILKGOH@?$HL?$HN?$AA@
	mov	WORD PTR [eax], cx
	mov	dl, BYTE PTR ??_C@_02MCILKGOH@?$HL?$HN?$AA@+2
	mov	BYTE PTR [eax+2], dl

; 125  :        
; 126  :     
; 127  :   return strstart;
; 128  : 
; 129  : } // end print_express()

	pop	ebp
	ret	0
_print_express ENDP
_TEXT	ENDS
END
