; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\EVAL_SEC.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	__real@0000000000000000
PUBLIC	_zero_seconds
EXTRN	__fltused:DWORD
;	COMDAT __real@0000000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\eval_sec.c
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _zero_seconds
_TEXT	SEGMENT
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_pcount$ = 8						; size = 4
_stacktop$ = 12						; size = 4
_zero_seconds PROC					; COMDAT

; 34   : { int i,j;

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 35   :   FIRST = 0.0;

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@zero_secon
$LN8@zero_secon:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@zero_secon:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN7@zero_secon
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fldz
	fstp	QWORD PTR [eax+edx*8+8]
	jmp	SHORT $LN8@zero_secon
$LN7@zero_secon:

; 36   :   SECOND = 0.0;

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@zero_secon
$LN5@zero_secon:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN6@zero_secon:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN4@zero_secon
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@zero_secon
$LN2@zero_secon:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN3@zero_secon:
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN1@zero_secon
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _j$[ebp]
	fldz
	fstp	QWORD PTR [ecx+edx*8]
	jmp	SHORT $LN2@zero_secon
$LN1@zero_secon:
	jmp	SHORT $LN5@zero_secon
$LN4@zero_secon:

; 37   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_zero_seconds ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@LBIGDBGK@Bad?5expression?5eval_second?$CI?$CJ?5nod@ ; `string'
PUBLIC	??_C@_0DI@KHNAHFIG@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@ ; `string'
PUBLIC	??_C@_0DH@DOJNKOOH@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@ ; `string'
PUBLIC	??_C@_0CJ@MIEHCCIC@Can?8t?5do?5boundary?5on?5this?5type?5e@ ; `string'
PUBLIC	??_C@_0CM@IPCEGKDM@Can?5only?5do?5constraint?5value?5for@ ; `string'
PUBLIC	??_C@_0CK@OJPFAPEO@Can?5do?5hit_constraints?5only?5on?5v@ ; `string'
PUBLIC	??_C@_0CM@PABLLOJJ@Can?8t?5do?5constraints?5on?5this?5typ@ ; `string'
PUBLIC	_get_extra
PUBLIC	??_C@_0DJ@FLIAONNC@Attribute?5?$CFs?5is?5?$CFs?5attribute?0?5no@ ; `string'
PUBLIC	??_C@_0DF@MPPJKLHD@Attribute?5?$CFs?5index?5?$CFd?5is?5?$CFd?$DL?5max@ ; `string'
PUBLIC	_get_facet_body
PUBLIC	??_C@_0CA@OHHPJEHI@Density?5of?5wrong?5type?5element?4?6?$AA@ ; `string'
PUBLIC	??_C@_0BO@GAPLEMFA@Phase?5of?5wrong?5type?5element?4?6?$AA@ ; `string'
PUBLIC	??_C@_0BL@KPLMFDOD@Pressure?5only?5for?5bodies?4?6?$AA@ ; `string'
PUBLIC	_get_edge_wrap
PUBLIC	_get_fe_facet
PUBLIC	??_C@_0CK@NCOPKELJ@Atanh?5argument?5magnitude?5greater@ ; `string'
PUBLIC	??_C@_0BN@BLAKMPAE@Acosh?5argument?5less?5than?51?4?6?$AA@ ; `string'
PUBLIC	??_C@_0CJ@CABPJLML@Acos?5argument?5magnitude?5greater?5@ ; `string'
PUBLIC	??_C@_0CJ@HMFEKONA@Asin?5argument?5magnitude?5greater?5@ ; `string'
PUBLIC	??_C@_0BM@JHOLMPFH@Log?5of?5nonpositive?5number?4?6?$AA@ ; `string'
PUBLIC	__real@c000000000000000
PUBLIC	__real@bff0000000000000
PUBLIC	__real@4010000000000000
PUBLIC	??_C@_0CE@FLAAOADA@Square?5root?5of?5negative?5number?5?$CF@ ; `string'
PUBLIC	??_C@_0CM@MKJCJODL@Nonintegral?5power?5?$CI?$CFf?$CJ?5of?5negati@ ; `string'
PUBLIC	??_C@_0DD@POCGBPNE@Negative?5power?5?$CI?$CFf?$CJ?5of?5zero?5in?5s@ ; `string'
PUBLIC	??_C@_0BG@DFDLDDME@Negative?5power?5zero?4?6?$AA@ ; `string'
PUBLIC	??_C@_0BB@HKELHEEP@Modulus?5base?50?4?6?$AA@	; `string'
PUBLIC	__real@4000000000000000
PUBLIC	??_C@_0BD@KKBNAHFA@Division?5by?5zero?4?6?$AA@	; `string'
PUBLIC	??_C@_0CE@JGNMBEAC@Can?8t?5have?5indexed?5x?5on?5?$CFs?0?5in?5?$CF@ ; `string'
PUBLIC	??_C@_0EE@NBEFOKMP@Invalid?5index?5?$CFd?5for?5x?5in?5?$CFs?$DL?5mu@ ; `string'
PUBLIC	??_C@_0BL@MACKFC@?$CFs?5index?5?$CFd?5is?5not?5valid?4?6?$AA@ ; `string'
PUBLIC	__real@3ff0000000000000
PUBLIC	??_C@_0L@JPAEHJJG@EVAL_SEC?4C?$AA@		; `string'
PUBLIC	??_C@_0DH@FHIGAOPK@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@ ; `string'
PUBLIC	??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@ ; `string'
PUBLIC	??_C@_0DG@BDAMNFPJ@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@ ; `string'
PUBLIC	??_C@_0DC@PGCBJIMC@More?5variables?5than?52?$CKMAXCOORD?5i@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_eval_second
EXTRN	_tokname:PROC
EXTRN	_get_name_name:PROC
EXTRN	_get_name_arrayptr:PROC
EXTRN	_dot:PROC
EXTRN	_project_vertex_normals:PROC
EXTRN	_new_calc_vertex_normal:PROC
EXTRN	_F_BOUNDARY_ATTR:DWORD
EXTRN	_E_BOUNDARY_ATTR:DWORD
EXTRN	_V_BOUNDARY_ATTR:DWORD
EXTRN	_get_v_constraint_status:PROC
EXTRN	_f_on_constraint:PROC
EXTRN	_e_on_constraint:PROC
EXTRN	_v_on_constraint:PROC
EXTRN	_autorecalc_flag:DWORD
EXTRN	_interp_facet_attribute:PROC
EXTRN	_interp_edge_attribute:PROC
EXTRN	_B_PHASE_ATTR:DWORD
EXTRN	_F_PHASE_ATTR:DWORD
EXTRN	_instance_attribute:PROC
EXTRN	_quantity_attribute:PROC
EXTRN	_recalc_facet_area:PROC
EXTRN	_get_body_valence:PROC
EXTRN	_get_facet_valence:PROC
EXTRN	_get_edge_valence:PROC
EXTRN	_get_vertex_evalence:PROC
EXTRN	_vertex_angle:PROC
EXTRN	_dihedral:PROC
EXTRN	_get_edge_length:PROC
EXTRN	_calc_edge:PROC
EXTRN	_vertex_mean_curvature:PROC
EXTRN	_vertex_sq_mean_curvature:PROC
EXTRN	_incompleteEllipticEseconds:PROC
EXTRN	_incompleteEllipticFseconds:PROC
EXTRN	_ellipticEdm:PROC
EXTRN	_ellipticEdmdm:PROC
EXTRN	_ellipticE:PROC
EXTRN	_ellipticKdm:PROC
EXTRN	_ellipticKdmdm:PROC
EXTRN	_ellipticK:PROC
EXTRN	_tan:PROC
EXTRN	_acos:PROC
EXTRN	_asin:PROC
EXTRN	_exp:PROC
EXTRN	_atan:PROC
EXTRN	_sin:PROC
EXTRN	_cos:PROC
EXTRN	_ceil:PROC
EXTRN	_sqrt:PROC
EXTRN	_atan2:PROC
EXTRN	_log:PROC
EXTRN	_fabs:PROC
EXTRN	_pow:PROC
EXTRN	_floor:PROC
EXTRN	_get_facet_normal:PROC
EXTRN	_get_edge_side:PROC
EXTRN	_typenames:BYTE
EXTRN	_get_full_id:PROC
EXTRN	_userfunc_seconds:BYTE
EXTRN	_mat2d_setup:PROC
EXTRN	_get_internal_variable:PROC
EXTRN	_comp_quant_vertexj:DWORD
EXTRN	_comp_quant_vertexi:DWORD
EXTRN	_comp_quant_stamp:DWORD
EXTRN	_comp_quant_vj:DWORD
EXTRN	_get_vertex_vgrad:PROC
EXTRN	_comp_quant_vi:DWORD
EXTRN	_quantity_function_sparse_flag:DWORD
EXTRN	_compound_hess_flag:DWORD
EXTRN	_calc_quants:PROC
EXTRN	_web_timestamp:DWORD
EXTRN	_graph_timestamp:DWORD
EXTRN	_meth_inst_list:DWORD
EXTRN	_abs:PROC
EXTRN	_gen_quant_list:DWORD
EXTRN	_int_val:DWORD
EXTRN	_get_toggle_value:PROC
EXTRN	_kb_calloc:PROC
EXTRN	_strlen:PROC
EXTRN	_file_names:DWORD
EXTRN	_sprintf:PROC
EXTRN	_errmsg:BYTE
EXTRN	_eval:PROC
EXTRN	_web:BYTE
EXTRN	_dymem:DWORD
EXTRN	_win_get_thread_data:PROC
EXTRN	_thread_data_key:DWORD
EXTRN	_kb_error:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0CM@LBIGDBGK@Bad?5expression?5eval_second?$CI?$CJ?5nod@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0CM@LBIGDBGK@Bad?5expression?5eval_second?$CI?$CJ?5nod@ DB 'Bad exp'
	DB	'ression eval_second() node type: %s.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@KHNAHFIG@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@
CONST	SEGMENT
??_C@_0DI@KHNAHFIG@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@ DB 'A'
	DB	'rray index %d of array %s is %d; exceeds bound of %d.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@DOJNKOOH@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@
CONST	SEGMENT
??_C@_0DH@DOJNKOOH@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@ DB 'A'
	DB	'rray index %d of array %s is %d. Indexes start at 1.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@MIEHCCIC@Can?8t?5do?5boundary?5on?5this?5type?5e@
CONST	SEGMENT
??_C@_0CJ@MIEHCCIC@Can?8t?5do?5boundary?5on?5this?5type?5e@ DB 'Can''t do'
	DB	' boundary on this type element.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@IPCEGKDM@Can?5only?5do?5constraint?5value?5for@
CONST	SEGMENT
??_C@_0CM@IPCEGKDM@Can?5only?5do?5constraint?5value?5for@ DB 'Can only do'
	DB	' constraint value for vertices.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@OJPFAPEO@Can?5do?5hit_constraints?5only?5on?5v@
CONST	SEGMENT
??_C@_0CK@OJPFAPEO@Can?5do?5hit_constraints?5only?5on?5v@ DB 'Can do hit_'
	DB	'constraints only on vertices.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@PABLLOJJ@Can?8t?5do?5constraints?5on?5this?5typ@
CONST	SEGMENT
??_C@_0CM@PABLLOJJ@Can?8t?5do?5constraints?5on?5this?5typ@ DB 'Can''t do '
	DB	'constraints on this type element.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@FLIAONNC@Attribute?5?$CFs?5is?5?$CFs?5attribute?0?5no@
CONST	SEGMENT
??_C@_0DJ@FLIAONNC@Attribute?5?$CFs?5is?5?$CFs?5attribute?0?5no@ DB 'Attr'
	DB	'ibute %s is %s attribute, not %s attribute (in %s).', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@MPPJKLHD@Attribute?5?$CFs?5index?5?$CFd?5is?5?$CFd?$DL?5max@
CONST	SEGMENT
??_C@_0DF@MPPJKLHD@Attribute?5?$CFs?5index?5?$CFd?5is?5?$CFd?$DL?5max@ DB 'A'
	DB	'ttribute %s index %d is %d; maximum is %d (in %s).', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@OHHPJEHI@Density?5of?5wrong?5type?5element?4?6?$AA@
CONST	SEGMENT
??_C@_0CA@OHHPJEHI@Density?5of?5wrong?5type?5element?4?6?$AA@ DB 'Density'
	DB	' of wrong type element.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GAPLEMFA@Phase?5of?5wrong?5type?5element?4?6?$AA@
CONST	SEGMENT
??_C@_0BO@GAPLEMFA@Phase?5of?5wrong?5type?5element?4?6?$AA@ DB 'Phase of '
	DB	'wrong type element.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KPLMFDOD@Pressure?5only?5for?5bodies?4?6?$AA@
CONST	SEGMENT
??_C@_0BL@KPLMFDOD@Pressure?5only?5for?5bodies?4?6?$AA@ DB 'Pressure only'
	DB	' for bodies.', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NCOPKELJ@Atanh?5argument?5magnitude?5greater@
CONST	SEGMENT
??_C@_0CK@NCOPKELJ@Atanh?5argument?5magnitude?5greater@ DB 'Atanh argumen'
	DB	't magnitude greater than 1.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BLAKMPAE@Acosh?5argument?5less?5than?51?4?6?$AA@
CONST	SEGMENT
??_C@_0BN@BLAKMPAE@Acosh?5argument?5less?5than?51?4?6?$AA@ DB 'Acosh argu'
	DB	'ment less than 1.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@CABPJLML@Acos?5argument?5magnitude?5greater?5@
CONST	SEGMENT
??_C@_0CJ@CABPJLML@Acos?5argument?5magnitude?5greater?5@ DB 'Acos argumen'
	DB	't magnitude greater than 1.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@HMFEKONA@Asin?5argument?5magnitude?5greater?5@
CONST	SEGMENT
??_C@_0CJ@HMFEKONA@Asin?5argument?5magnitude?5greater?5@ DB 'Asin argumen'
	DB	't magnitude greater than 1.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JHOLMPFH@Log?5of?5nonpositive?5number?4?6?$AA@
CONST	SEGMENT
??_C@_0BM@JHOLMPFH@Log?5of?5nonpositive?5number?4?6?$AA@ DB 'Log of nonpo'
	DB	'sitive number.', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT __real@c000000000000000
CONST	SEGMENT
__real@c000000000000000 DQ 0c000000000000000r	; -2
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT ??_C@_0CE@FLAAOADA@Square?5root?5of?5negative?5number?5?$CF@
CONST	SEGMENT
??_C@_0CE@FLAAOADA@Square?5root?5of?5negative?5number?5?$CF@ DB 'Square r'
	DB	'oot of negative number %g.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@MKJCJODL@Nonintegral?5power?5?$CI?$CFf?$CJ?5of?5negati@
CONST	SEGMENT
??_C@_0CM@MKJCJODL@Nonintegral?5power?5?$CI?$CFf?$CJ?5of?5negati@ DB 'Non'
	DB	'integral power (%f) of negative number.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@POCGBPNE@Negative?5power?5?$CI?$CFf?$CJ?5of?5zero?5in?5s@
CONST	SEGMENT
??_C@_0DD@POCGBPNE@Negative?5power?5?$CI?$CFf?$CJ?5of?5zero?5in?5s@ DB 'N'
	DB	'egative power (%f) of zero in second derivative.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DFDLDDME@Negative?5power?5zero?4?6?$AA@
CONST	SEGMENT
??_C@_0BG@DFDLDDME@Negative?5power?5zero?4?6?$AA@ DB 'Negative power zero'
	DB	'.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HKELHEEP@Modulus?5base?50?4?6?$AA@
CONST	SEGMENT
??_C@_0BB@HKELHEEP@Modulus?5base?50?4?6?$AA@ DB 'Modulus base 0.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT ??_C@_0BD@KKBNAHFA@Division?5by?5zero?4?6?$AA@
CONST	SEGMENT
??_C@_0BD@KKBNAHFA@Division?5by?5zero?4?6?$AA@ DB 'Division by zero.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@JGNMBEAC@Can?8t?5have?5indexed?5x?5on?5?$CFs?0?5in?5?$CF@
CONST	SEGMENT
??_C@_0CE@JGNMBEAC@Can?8t?5have?5indexed?5x?5on?5?$CFs?0?5in?5?$CF@ DB 'C'
	DB	'an''t have indexed x on %s, in %s.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@NBEFOKMP@Invalid?5index?5?$CFd?5for?5x?5in?5?$CFs?$DL?5mu@
CONST	SEGMENT
??_C@_0EE@NBEFOKMP@Invalid?5index?5?$CFd?5for?5x?5in?5?$CFs?$DL?5mu@ DB 'I'
	DB	'nvalid index %d for x in %s; must be between 1 and %d, inclus'
	DB	'ive.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MACKFC@?$CFs?5index?5?$CFd?5is?5not?5valid?4?6?$AA@
CONST	SEGMENT
??_C@_0BL@MACKFC@?$CFs?5index?5?$CFd?5is?5not?5valid?4?6?$AA@ DB '%s inde'
	DB	'x %d is not valid.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT ??_C@_0L@JPAEHJJG@EVAL_SEC?4C?$AA@
CONST	SEGMENT
??_C@_0L@JPAEHJJG@EVAL_SEC?4C?$AA@ DB 'EVAL_SEC.C', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@FHIGAOPK@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@
CONST	SEGMENT
??_C@_0DH@FHIGAOPK@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@ DB 'A'
	DB	'rray index %d of array %s is %d; exceeds bound of %d.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
CONST	SEGMENT
??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@ DB '('
	DB	'source file %s, line %d)', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@BDAMNFPJ@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@
CONST	SEGMENT
??_C@_0DG@BDAMNFPJ@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@ DB 'A'
	DB	'rray index %d of array %s is %d. Indexes start at 1.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@PGCBJIMC@More?5variables?5than?52?$CKMAXCOORD?5i@
CONST	SEGMENT
??_C@_0DC@PGCBJIMC@More?5variables?5than?52?$CKMAXCOORD?5i@ DB 'More vari'
	DB	'ables than 2*MAXCOORD in eval_second().', 0aH, 00H ; `string'
; Function compile flags: /Odtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\eval_sec.c
CONST	ENDS
;	COMDAT _eval_second
_TEXT	SEGMENT
tv8961 = -127992					; size = 8
tv8958 = -127984					; size = 4
tv8956 = -127980					; size = 4
tv8952 = -127976					; size = 8
tv8948 = -127968					; size = 4
tv8946 = -127964					; size = 4
tv8942 = -127960					; size = 8
tv4808 = -127952					; size = 4
tv4694 = -127948					; size = 4
tv4646 = -127944					; size = 4
tv4592 = -127940					; size = 4
tv4593 = -127936					; size = 4
tv4594 = -127932					; size = 4
tv4562 = -127928					; size = 8
tv4539 = -127920					; size = 4
tv4523 = -127916					; size = 4
tv4507 = -127912					; size = 4
tv4495 = -127908					; size = 4
tv4482 = -127904					; size = 4
tv4399 = -127900					; size = 4
tv8618 = -127896					; size = 4
tv4371 = -127892					; size = 4
tv4358 = -127888					; size = 4
tv8586 = -127884					; size = 4
tv8581 = -127880					; size = 4
tv8576 = -127876					; size = 4
tv4320 = -127872					; size = 4
tv4307 = -127868					; size = 4
tv8543 = -127864					; size = 8
tv8535 = -127856					; size = 4
tv8528 = -127852					; size = 4
tv8513 = -127848					; size = 8
tv8505 = -127840					; size = 4
tv8498 = -127836					; size = 4
tv8489 = -127832					; size = 8
tv4190 = -127824					; size = 4
tv4012 = -127820					; size = 8
tv8328 = -127812					; size = 8
tv3986 = -127804					; size = 4
tv3945 = -127800					; size = 8
tv8282 = -127792					; size = 8
tv3918 = -127784					; size = 4
tv3907 = -127780					; size = 4
tv3889 = -127776					; size = 4
tv3880 = -127772					; size = 4
tv3863 = -127768					; size = 4
tv3845 = -127764					; size = 4
tv3828 = -127760					; size = 4
tv3810 = -127756					; size = 4
tv8187 = -127752					; size = 4
tv8183 = -127748					; size = 4
tv3777 = -127744					; size = 4
tv3762 = -127740					; size = 8
tv3758 = -127732					; size = 4
tv8148 = -127728					; size = 4
tv3719 = -127724					; size = 4
tv8143 = -127720					; size = 4
tv3711 = -127716					; size = 4
tv8128 = -127712					; size = 4
tv4988 = -127708					; size = 8
tv4979 = -127700					; size = 8
tv4970 = -127692					; size = 8
tv4961 = -127684					; size = 8
tv3600 = -127676					; size = 4
tv3566 = -127672					; size = 4
tv3542 = -127668					; size = 4
tv3519 = -127664					; size = 4
tv4936 = -127660					; size = 8
tv3453 = -127652					; size = 4
tv7941 = -127648					; size = 4
tv7912 = -127644					; size = 4
tv3401 = -127640					; size = 4
tv7895 = -127636					; size = 4
tv3378 = -127632					; size = 4
tv7874 = -127628					; size = 4
tv7870 = -127624					; size = 4
tv7866 = -127620					; size = 4
tv7862 = -127616					; size = 4
tv3344 = -127612					; size = 4
tv9043 = -127608					; size = 8
tv9041 = -127600					; size = 8
tv9039 = -127592					; size = 8
tv9037 = -127584					; size = 8
tv9035 = -127576					; size = 8
tv9033 = -127568					; size = 8
tv9031 = -127560					; size = 8
tv6580 = -127552					; size = 4
tv6510 = -127548					; size = 4
tv6466 = -127544					; size = 4
tv9029 = -127540					; size = 8
tv9027 = -127532					; size = 8
tv9025 = -127524					; size = 8
tv1224 = -127516					; size = 4
tv1201 = -127512					; size = 4
tv1193 = -127508					; size = 4
tv1185 = -127504					; size = 4
tv1177 = -127500					; size = 4
tv1169 = -127496					; size = 4
tv1161 = -127492					; size = 4
tv1100 = -127488					; size = 4
tv1024 = -127484					; size = 4
tv985 = -127480						; size = 4
tv864 = -127476						; size = 8
tv823 = -127468						; size = 8
tv611 = -127460						; size = 4
tv612 = -127456						; size = 4
tv613 = -127452						; size = 4
tv581 = -127448						; size = 8
tv5589 = -127440					; size = 4
tv460 = -127436						; size = 4
tv461 = -127432						; size = 4
tv462 = -127428						; size = 4
tv427 = -127424						; size = 4
tv428 = -127420						; size = 4
tv429 = -127416						; size = 4
tv5440 = -127412					; size = 8
tv5435 = -127404					; size = 8
tv5431 = -127396					; size = 4
tv5429 = -127392					; size = 4
tv5427 = -127388					; size = 4
tv5425 = -127384					; size = 4
tv5421 = -127380					; size = 8
tv355 = -127372						; size = 4
tv304 = -127368						; size = 4
tv305 = -127364						; size = 4
tv306 = -127360						; size = 4
tv246 = -127356						; size = 4
tv247 = -127352						; size = 4
tv248 = -127348						; size = 4
tv203 = -127344						; size = 4
tv204 = -127340						; size = 4
tv205 = -127336						; size = 4
tv151 = -127332						; size = 4
tv152 = -127328						; size = 4
tv153 = -127324						; size = 4
tv82 = -127320						; size = 4
tv74 = -127316						; size = 4
_e_id$91041 = -127256					; size = 4
_e_id$91037 = -127252					; size = 4
_k$90789 = -127248					; size = 4
_datastart$90783 = -127244				; size = 4
_offset$90781 = -127240					; size = 4
_lvalue$90782 = -127236					; size = 4
_i$90780 = -127232					; size = 4
_a$90778 = -127228					; size = 4
_value$90779 = -127224					; size = 8
_sum$90767 = -127216					; size = 8
_name2$90764 = -127208					; size = 4
_b$90762 = -127204					; size = 4
_datastart2$90766 = -127200				; size = 4
_name1$90763 = -127196					; size = 4
_i$90768 = -127192					; size = 4
_a$90761 = -127188					; size = 4
_datastart1$90765 = -127184				; size = 4
_count$90769 = -127180					; size = 4
_normcount$90751 = -127176				; size = 4
_normal$90748 = -127172					; size = 4
_mag$90750 = -127168					; size = 8
_normalqXvS$90746 = -127160				; size = 24
_normalxJ$90747 = -127136				; size = 288
_datastart$90734 = -126844				; size = 4
_i$90733 = -126840					; size = 4
_id$90732 = -126836					; size = 4
_id$90725 = -126832					; size = 4
_alvalue$90717 = -126828				; size = 4
_glvalue$90714 = -126824				; size = 4
_testb$90684 = -126820					; size = 4
_b$90682 = -126816					; size = 4
_connum$90666 = -126812					; size = 4
_testcon$90651 = -126808				; size = 4
_testcon$90632 = -126804				; size = 4
_oldflag$90592 = -126800				; size = 4
_j$90564 = -126796					; size = 4
_k$90555 = -126792					; size = 4
_ext$90553 = -126788					; size = 4
_spot$90554 = -126784					; size = 4
_i$90556 = -126780					; size = 4
_m$90264 = -126776					; size = 8
_j$90272 = -126764					; size = 4
_phi$90263 = -126760					; size = 8
_dphi$90267 = -126752					; size = 8
_ddm$90268 = -126744					; size = 8
_ddphi$90269 = -126736					; size = 8
_val$90265 = -126728					; size = 8
_dmdphi$90270 = -126720					; size = 8
_dm$90266 = -126712					; size = 8
_i$90271 = -126700					; size = 4
_m$90244 = -126696					; size = 8
_j$90252 = -126684					; size = 4
_phi$90243 = -126680					; size = 8
_dphi$90247 = -126672					; size = 8
_ddm$90248 = -126664					; size = 8
_ddphi$90249 = -126656					; size = 8
_val$90245 = -126648					; size = 8
_dmdphi$90250 = -126640					; size = 8
_dm$90246 = -126632					; size = 8
_i$90251 = -126620					; size = 4
_j$90232 = -126616					; size = 4
_i$90231 = -126612					; size = 4
_j$90220 = -126608					; size = 4
_i$90219 = -126604					; size = 4
_j$90207 = -126600					; size = 4
_i$90206 = -126596					; size = 4
_j$90195 = -126592					; size = 4
_i$90194 = -126588					; size = 4
_j$90181 = -126584					; size = 4
_i$90180 = -126580					; size = 4
_j$90167 = -126576					; size = 4
_i$90166 = -126572					; size = 4
_j$90155 = -126568					; size = 4
_i$90154 = -126564					; size = 4
_j$90143 = -126560					; size = 4
_i$90142 = -126556					; size = 4
_j$90131 = -126552					; size = 4
_i$90130 = -126548					; size = 4
_j$90119 = -126544					; size = 4
_i$90118 = -126540					; size = 4
_j$90107 = -126536					; size = 4
_i$90106 = -126532					; size = 4
_j$90093 = -126528					; size = 4
_i$90092 = -126524					; size = 4
_j$90079 = -126520					; size = 4
_i$90078 = -126516					; size = 4
_j$90065 = -126512					; size = 4
_i$90064 = -126508					; size = 4
_j$90053 = -126504					; size = 4
_i$90052 = -126500					; size = 4
_j$90041 = -126496					; size = 4
_i$90040 = -126492					; size = 4
_j$90029 = -126488					; size = 4
_i$90028 = -126484					; size = 4
_j$90017 = -126480					; size = 4
_i$90016 = -126476					; size = 4
_j$90005 = -126472					; size = 4
_i$90004 = -126468					; size = 4
_j$89992 = -126464					; size = 4
_i$89991 = -126460					; size = 4
_j$89980 = -126456					; size = 4
_i$89979 = -126452					; size = 4
_j$89955 = -126448					; size = 4
_i$89954 = -126444					; size = 4
_j$89943 = -126440					; size = 4
_i$89942 = -126436					; size = 4
_j$89931 = -126432					; size = 4
_i$89930 = -126428					; size = 4
_denom$89929 = -126424					; size = 8
_j$89918 = -126412					; size = 4
_i$89917 = -126408					; size = 4
_j$89896 = -126404					; size = 4
_i$89895 = -126400					; size = 4
_j$89871 = -126396					; size = 4
_f1$89868 = -126392					; size = 8
_f2$89869 = -126384					; size = 8
_i$89870 = -126372					; size = 4
_j$89843 = -126368					; size = 4
_i$89842 = -126364					; size = 4
_j$89829 = -126360					; size = 4
_i$89828 = -126356					; size = 4
_j$89817 = -126352					; size = 4
_i$89816 = -126348					; size = 4
_j$89805 = -126344					; size = 4
_i$89804 = -126340					; size = 4
_j$89793 = -126336					; size = 4
_i$89792 = -126332					; size = 4
_j$89738 = -126328					; size = 4
_k$89735 = -126324					; size = 4
_vect$89739 = -126320					; size = 48
_i$89737 = -126272					; size = 4
_j$89709 = -126268					; size = 4
_vect$89707 = -126264					; size = 48
_i$89708 = -126216					; size = 4
_partid$89697 = -126212					; size = 4
_id$89699 = -126208					; size = 4
_j$89689 = -126204					; size = 4
_tmpqXvS$89684 = -126200				; size = 24
_tmpxJ$89685 = -126176					; size = 288
_tmp$89686 = -125884					; size = 4
_i$89688 = -125880					; size = 4
_vgptri$89637 = -125876					; size = 4
_vgptrj$89638 = -125872					; size = 4
_mi$89621 = -125868					; size = 4
_j$89623 = -125864					; size = 4
_i$89622 = -125860					; size = 4
_q$89617 = -125856					; size = 4
_j$89592 = -125852					; size = 4
_i$89591 = -125848					; size = 4
_j$89578 = -125844					; size = 4
_i$89577 = -125840					; size = 4
_j$89560 = -125836					; size = 4
_g$89556 = -125832					; size = 4
_i$89559 = -125828					; size = 4
_gg$89520 = -125824					; size = 4
_j$89518 = -125820					; size = 4
_g$89514 = -125816					; size = 4
_i$89517 = -125812					; size = 4
_bqnode$89509 = -125808					; size = 104
_k$89452 = -125704					; size = 4
_j$89446 = -125700					; size = 4
_offset$89447 = -125696					; size = 4
_lvalue$89448 = -125692					; size = 4
_i$89445 = -125688					; size = 4
_a$89441 = -125684					; size = 4
_value$89444 = -125680					; size = 8
_j$89420 = -125668					; size = 4
_td$89417 = -125664					; size = 4
_i$89419 = -125660					; size = 4
_value$89418 = -125656					; size = 8
_m$ = -125648						; size = 4
_node$ = -125644					; size = 4
_localstack$ = -125640					; size = 125600
__$ArrayPad$ = -40					; size = 4
_localbase$ = -36					; size = 4
_n$ = -32						; size = 4
_stacktop$ = -28					; size = 4
_x$ = -24						; size = 8
_y$ = -16						; size = 8
_id$ = -4						; size = 4
_ex$ = 8						; size = 4
_params$ = 12						; size = 4
_pcount$ = 16						; size = 4
_fval$ = 20						; size = 4
_partials$ = 24						; size = 4
_seconds$ = 28						; size = 4
_q_id$ = 32						; size = 4
_eval_second PROC					; COMDAT

; 63   : {

	push	ebp
	mov	ebp, esp
	mov	eax, 127992				; 0001f3f8H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi

; 64   :   int n,m;   /* i, j missing since want them local for optimization */
; 65   :   REAL x,y;
; 66   :   struct dstack localstack[ESTACKSIZE];
; 67   :   struct dstack *stacktop = localstack;

	lea	eax, DWORD PTR _localstack$[ebp]
	mov	DWORD PTR _stacktop$[ebp], eax

; 68   :   struct treenode *node;
; 69   :   element_id id;
; 70   :   struct locallist_t *localbase = ex->locals;

	mov	ecx, DWORD PTR _ex$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _localbase$[ebp], edx

; 71   : 
; 72   :   if ( pcount > 2*MAXCOORD )

	cmp	DWORD PTR _pcount$[ebp], 12		; 0000000cH
	jle	SHORT $LN893@eval_secon

; 73   :       kb_error(1009,"More variables than 2*MAXCOORD in eval_second().\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DC@PGCBJIMC@More?5variables?5than?52?$CKMAXCOORD?5i@
	push	1009					; 000003f1H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN893@eval_secon:

; 74   : 
; 75   :   stacktop->value = 0.0;  /* in case of empty expression */

	mov	eax, DWORD PTR _stacktop$[ebp]
	fldz
	fstp	QWORD PTR [eax]

; 76   :   zero_seconds(pcount,stacktop);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcount$[ebp]
	push	edx
	call	_zero_seconds
	add	esp, 8

; 77   : 
; 78   :   if ( ex )

	cmp	DWORD PTR _ex$[ebp], 0
	je	$LN889@eval_secon

; 79   :    for ( node = ex->start+1 ; ; node++ )

	mov	eax, DWORD PTR _ex$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 168				; 000000a8H
	mov	DWORD PTR _node$[ebp], ecx
	jmp	SHORT $LN891@eval_secon
$LN890@eval_secon:
	mov	edx, DWORD PTR _node$[ebp]
	add	edx, 168				; 000000a8H
	mov	DWORD PTR _node$[ebp], edx
$LN891@eval_secon:

; 80   :    {
; 81   :      switch ( node->type )

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv74[ebp], ecx
	cmp	DWORD PTR tv74[ebp], 10107		; 0000277bH
	jg	SHORT $LN1014@eval_secon
	cmp	DWORD PTR tv74[ebp], 10106		; 0000277aH
	jge	$LN810@eval_secon
	mov	edx, DWORD PTR tv74[ebp]
	sub	edx, 10001				; 00002711H
	mov	DWORD PTR tv74[ebp], edx
	cmp	DWORD PTR tv74[ebp], 101		; 00000065H
	ja	$LN8@eval_secon
	mov	eax, DWORD PTR tv74[ebp]
	movzx	ecx, BYTE PTR $LN1099@eval_secon[eax]
	jmp	DWORD PTR $LN1103@eval_secon[ecx*4]
$LN1014@eval_secon:
	cmp	DWORD PTR tv74[ebp], 10382		; 0000288eH
	jg	SHORT $LN1015@eval_secon
	cmp	DWORD PTR tv74[ebp], 10382		; 0000288eH
	je	$LN833@eval_secon
	mov	edx, DWORD PTR tv74[ebp]
	sub	edx, 10108				; 0000277cH
	mov	DWORD PTR tv74[ebp], edx
	cmp	DWORD PTR tv74[ebp], 254		; 000000feH
	ja	$LN8@eval_secon
	mov	eax, DWORD PTR tv74[ebp]
	movzx	ecx, BYTE PTR $LN1100@eval_secon[eax]
	jmp	DWORD PTR $LN1104@eval_secon[ecx*4]
$LN1015@eval_secon:
	cmp	DWORD PTR tv74[ebp], 10761		; 00002a09H
	jg	SHORT $LN1016@eval_secon
	cmp	DWORD PTR tv74[ebp], 10761		; 00002a09H
	je	$LN817@eval_secon
	mov	edx, DWORD PTR tv74[ebp]
	sub	edx, 10413				; 000028adH
	mov	DWORD PTR tv74[ebp], edx
	cmp	DWORD PTR tv74[ebp], 242		; 000000f2H
	ja	$LN8@eval_secon
	mov	eax, DWORD PTR tv74[ebp]
	movzx	ecx, BYTE PTR $LN1101@eval_secon[eax]
	jmp	DWORD PTR $LN1105@eval_secon[ecx*4]
$LN1016@eval_secon:
	jmp	$LN8@eval_secon
$LN886@eval_secon:

; 82   :      {
; 83   :      
; 84   :        case SETUP_FRAME_NODE:
; 85   :              break;

	jmp	$LN887@eval_secon
$LN885@eval_secon:

; 86   :   
; 87   :        case EXPRLIST_NODE:
; 88   :              break;  /* leave expression on stack */

	jmp	$LN887@eval_secon
$LN884@eval_secon:

; 89   : 
; 90   :        case FUNCTION_CALL_NODE:
; 91   :        { struct thread_data *td = GET_THREAD_DATA;

	mov	edx, DWORD PTR _thread_data_key
	push	edx
	call	_win_get_thread_data
	add	esp, 4
	mov	DWORD PTR _td$89417[ebp], eax

; 92   :          REAL value;
; 93   :          int i,j;
; 94   :         
; 95   :          /* push arguments on eval() stack */
; 96   :          for ( i = 0 ; i < node->op2.argcount ; i++ )

	mov	DWORD PTR _i$89419[ebp], 0
	jmp	SHORT $LN883@eval_secon
$LN882@eval_secon:
	mov	eax, DWORD PTR _i$89419[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89419[ebp], eax
$LN883@eval_secon:
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR _i$89419[ebp]
	cmp	edx, DWORD PTR [ecx+136]
	jge	SHORT $LN881@eval_secon

; 97   :           *(++(td->stack_top)) = stacktop[i-node->op2.argcount+1].value;

	mov	eax, DWORD PTR _td$89417[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 8
	mov	DWORD PTR tv82[ebp], ecx
	mov	edx, DWORD PTR _td$89417[ebp]
	mov	eax, DWORD PTR tv82[ebp]
	mov	DWORD PTR [edx+48], eax
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR _i$89419[ebp]
	sub	edx, DWORD PTR [ecx+136]
	add	edx, 1
	imul	edx, 1256				; 000004e8H
	mov	eax, DWORD PTR tv82[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+edx]
	fstp	QWORD PTR [eax]
	jmp	SHORT $LN882@eval_secon
$LN881@eval_secon:

; 98   : 
; 99   :          value = eval(&globals(node->op1.name_id)->value.proc,
; 100  :            NULL,NULLID,NULL);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, -16777216				; ff000000H
	cmp	eax, 268435456				; 10000000H
	jne	SHORT $LN900@eval_secon
	mov	ecx, DWORD PTR _dymem
	add	ecx, DWORD PTR _web+5652
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, 16777215				; 00ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv153[ebp], ecx
	jmp	$LN901@eval_secon
$LN900@eval_secon:
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, -16777216				; ff000000H
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN898@eval_secon
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	and	edx, 16777215				; 00ffffffH
	imul	edx, 224				; 000000e0H
	mov	eax, DWORD PTR _localbase$[ebp]
	add	edx, DWORD PTR [eax]
	mov	DWORD PTR tv152[ebp], edx
	jmp	SHORT $LN899@eval_secon
$LN898@eval_secon:
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	and	edx, -16777216				; ff000000H
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN896@eval_secon
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR _web+5656
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv151[ebp], eax
	jmp	SHORT $LN897@eval_secon
$LN896@eval_secon:
	mov	ecx, DWORD PTR _dymem
	add	ecx, DWORD PTR _web+5652
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, 16777215				; 00ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv151[ebp], ecx
$LN897@eval_secon:
	mov	edx, DWORD PTR tv151[ebp]
	mov	DWORD PTR tv152[ebp], edx
$LN899@eval_secon:
	mov	eax, DWORD PTR tv152[ebp]
	mov	DWORD PTR tv153[ebp], eax
$LN901@eval_secon:
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR tv153[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	call	_eval
	add	esp, 16					; 00000010H
	fstp	QWORD PTR _value$89418[ebp]

; 101  :          td->stack_top -= node->op2.argcount; /* pop arguments */

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+136]
	shl	eax, 3
	mov	ecx, DWORD PTR _td$89417[ebp]
	mov	edx, DWORD PTR [ecx+48]
	sub	edx, eax
	mov	eax, DWORD PTR _td$89417[ebp]
	mov	DWORD PTR [eax+48], edx

; 102  :          (++stacktop)->value = value;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _value$89418[ebp]
	fstp	QWORD PTR [edx]

; 103  :          FIRST = 0.0;

	mov	DWORD PTR _i$89419[ebp], 0
	jmp	SHORT $LN880@eval_secon
$LN879@eval_secon:
	mov	eax, DWORD PTR _i$89419[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89419[ebp], eax
$LN880@eval_secon:
	mov	ecx, DWORD PTR _i$89419[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN878@eval_secon
	mov	edx, DWORD PTR _i$89419[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fldz
	fstp	QWORD PTR [eax+edx*8+8]
	jmp	SHORT $LN879@eval_secon
$LN878@eval_secon:

; 104  :          SECOND = 0.0;

	mov	DWORD PTR _i$89419[ebp], 0
	jmp	SHORT $LN877@eval_secon
$LN876@eval_secon:
	mov	ecx, DWORD PTR _i$89419[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$89419[ebp], ecx
$LN877@eval_secon:
	mov	edx, DWORD PTR _i$89419[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN875@eval_secon
	mov	DWORD PTR _j$89420[ebp], 0
	jmp	SHORT $LN874@eval_secon
$LN873@eval_secon:
	mov	eax, DWORD PTR _j$89420[ebp]
	add	eax, 1
	mov	DWORD PTR _j$89420[ebp], eax
$LN874@eval_secon:
	mov	ecx, DWORD PTR _j$89420[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN872@eval_secon
	mov	edx, DWORD PTR _i$89419[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _j$89420[ebp]
	fldz
	fstp	QWORD PTR [ecx+edx*8]
	jmp	SHORT $LN873@eval_secon
$LN872@eval_secon:
	jmp	SHORT $LN876@eval_secon
$LN875@eval_secon:

; 105  :          break;

	jmp	$LN887@eval_secon
$LN871@eval_secon:

; 106  :        }
; 107  : 
; 108  :        case FUNCTION_CALL_RETURN_NODE:
; 109  :         {
; 110  :           /* nothing to do here since FUNCTION_CALL used eval() */
; 111  :           break;

	jmp	$LN887@eval_secon
$LN870@eval_secon:

; 112  :         }
; 113  : 
; 114  : 
; 115  :        case INDEXSET_NODE: break; /* just accumulate index values */

	jmp	$LN887@eval_secon
$LN869@eval_secon:

; 116  : 
; 117  :        case ARRAY_HEAD_NODE: break;  /* let indices accumulate */

	jmp	$LN887@eval_secon
$LN868@eval_secon:

; 118  : 
; 119  :        case ARRAYEVAL_NODE:
; 120  :        { struct array *a = globals(node->op2.name_id)->attr.arrayptr; 

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	jne	SHORT $LN906@eval_secon
	mov	edx, DWORD PTR _dymem
	add	edx, DWORD PTR _web+5652
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv205[ebp], edx
	jmp	$LN907@eval_secon
$LN906@eval_secon:
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN904@eval_secon
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+136]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _localbase$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR tv204[ebp], eax
	jmp	SHORT $LN905@eval_secon
$LN904@eval_secon:
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+136]
	and	eax, -16777216				; ff000000H
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN902@eval_secon
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	and	edx, 16777215				; 00ffffffH
	mov	eax, DWORD PTR _web+5656
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv203[ebp], ecx
	jmp	SHORT $LN903@eval_secon
$LN902@eval_secon:
	mov	edx, DWORD PTR _dymem
	add	edx, DWORD PTR _web+5652
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv203[ebp], edx
$LN903@eval_secon:
	mov	eax, DWORD PTR tv203[ebp]
	mov	DWORD PTR tv204[ebp], eax
$LN905@eval_secon:
	mov	ecx, DWORD PTR tv204[ebp]
	mov	DWORD PTR tv205[ebp], ecx
$LN907@eval_secon:
	mov	edx, DWORD PTR tv205[ebp]
	mov	eax, DWORD PTR [edx+168]
	mov	DWORD PTR _a$89441[ebp], eax

; 121  :          REAL value=0.0;

	fldz
	fstp	QWORD PTR _value$89444[ebp]

; 122  :          int i,j,offset;
; 123  :          void *lvalue;
; 124  :          for ( i = 0 ; i < a->dim ; i++ )

	mov	DWORD PTR _i$89445[ebp], 0
	jmp	SHORT $LN867@eval_secon
$LN866@eval_secon:
	mov	ecx, DWORD PTR _i$89445[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$89445[ebp], ecx
$LN867@eval_secon:
	mov	edx, DWORD PTR _a$89441[ebp]
	mov	eax, DWORD PTR _i$89445[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jge	$LN865@eval_secon

; 125  :          { int k = (int)stacktop[i+1-a->dim].value;

	mov	ecx, DWORD PTR _i$89445[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _a$89441[ebp]
	sub	ecx, DWORD PTR [edx+4]
	imul	ecx, 1256				; 000004e8H
	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax+ecx]
	call	__ftol2_sse
	mov	DWORD PTR _k$89452[ebp], eax

; 126  :            if ( k < 1 )

	cmp	DWORD PTR _k$89452[ebp], 1
	jge	$LN864@eval_secon

; 127  :            { sprintf(errmsg,"Array index %d of array %s is %d. Indexes start at 1.",
; 128  :                i+1,globals(node->op2.name_id)->name,k);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	jne	SHORT $LN912@eval_secon
	mov	eax, DWORD PTR _dymem
	add	eax, DWORD PTR _web+5652
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	and	edx, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv248[ebp], eax
	jmp	$LN913@eval_secon
$LN912@eval_secon:
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	and	edx, -16777216				; ff000000H
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN910@eval_secon
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	and	ecx, 16777215				; 00ffffffH
	imul	ecx, 224				; 000000e0H
	mov	edx, DWORD PTR _localbase$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	DWORD PTR tv247[ebp], ecx
	jmp	SHORT $LN911@eval_secon
$LN910@eval_secon:
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN908@eval_secon
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+136]
	and	eax, 16777215				; 00ffffffH
	mov	ecx, DWORD PTR _web+5656
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv246[ebp], edx
	jmp	SHORT $LN909@eval_secon
$LN908@eval_secon:
	mov	eax, DWORD PTR _dymem
	add	eax, DWORD PTR _web+5652
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	and	edx, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv246[ebp], eax
$LN909@eval_secon:
	mov	ecx, DWORD PTR tv246[ebp]
	mov	DWORD PTR tv247[ebp], ecx
$LN911@eval_secon:
	mov	edx, DWORD PTR tv247[ebp]
	mov	DWORD PTR tv248[ebp], edx
$LN913@eval_secon:
	mov	eax, DWORD PTR _k$89452[ebp]
	push	eax
	mov	ecx, DWORD PTR tv248[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$89445[ebp]
	add	edx, 1
	push	edx
	push	OFFSET ??_C@_0DG@BDAMNFPJ@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 20					; 00000014H

; 129  :              sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 130  :                  file_names[node->file_no],node->line_no);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _file_names
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 131  :              kb_error(2534,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2534					; 000009e6H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN864@eval_secon:

; 132  :            }
; 133  :            if ( k > a->sizes[i] )

	mov	eax, DWORD PTR _i$89445[ebp]
	mov	ecx, DWORD PTR _a$89441[ebp]
	mov	edx, DWORD PTR _k$89452[ebp]
	cmp	edx, DWORD PTR [ecx+eax*4+24]
	jle	$LN863@eval_secon

; 134  :            { sprintf(errmsg,"Array index %d of array %s is %d; exceeds bound of %d.",
; 135  :                i+1,globals(node->op2.name_id)->name,k,a->sizes[i]);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	jne	SHORT $LN918@eval_secon
	mov	edx, DWORD PTR _dymem
	add	edx, DWORD PTR _web+5652
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv306[ebp], edx
	jmp	$LN919@eval_secon
$LN918@eval_secon:
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN916@eval_secon
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+136]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _localbase$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR tv305[ebp], eax
	jmp	SHORT $LN917@eval_secon
$LN916@eval_secon:
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+136]
	and	eax, -16777216				; ff000000H
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN914@eval_secon
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	and	edx, 16777215				; 00ffffffH
	mov	eax, DWORD PTR _web+5656
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv304[ebp], ecx
	jmp	SHORT $LN915@eval_secon
$LN914@eval_secon:
	mov	edx, DWORD PTR _dymem
	add	edx, DWORD PTR _web+5652
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv304[ebp], edx
$LN915@eval_secon:
	mov	eax, DWORD PTR tv304[ebp]
	mov	DWORD PTR tv305[ebp], eax
$LN917@eval_secon:
	mov	ecx, DWORD PTR tv305[ebp]
	mov	DWORD PTR tv306[ebp], ecx
$LN919@eval_secon:
	mov	edx, DWORD PTR _i$89445[ebp]
	mov	eax, DWORD PTR _a$89441[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+24]
	push	ecx
	mov	edx, DWORD PTR _k$89452[ebp]
	push	edx
	mov	eax, DWORD PTR tv306[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$89445[ebp]
	add	ecx, 1
	push	ecx
	push	OFFSET ??_C@_0DH@FHIGAOPK@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 24					; 00000018H

; 136  :              sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 137  :                  file_names[node->file_no],node->line_no);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _file_names
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 138  :              kb_error(2535,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2535					; 000009e7H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN863@eval_secon:

; 139  :            }
; 140  :          }

	jmp	$LN866@eval_secon
$LN865@eval_secon:

; 141  :          for ( i = 1, offset = (int)stacktop[1-a->dim].value-1 ; i < a->dim ; i++ )

	mov	DWORD PTR _i$89445[ebp], 1
	mov	edx, DWORD PTR _a$89441[ebp]
	mov	eax, 1
	sub	eax, DWORD PTR [edx+4]
	imul	eax, 1256				; 000004e8H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+eax]
	call	__ftol2_sse
	sub	eax, 1
	mov	DWORD PTR _offset$89447[ebp], eax
	jmp	SHORT $LN862@eval_secon
$LN861@eval_secon:
	mov	edx, DWORD PTR _i$89445[ebp]
	add	edx, 1
	mov	DWORD PTR _i$89445[ebp], edx
$LN862@eval_secon:
	mov	eax, DWORD PTR _a$89441[ebp]
	mov	ecx, DWORD PTR _i$89445[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN860@eval_secon

; 142  :          { offset *= a->sizes[i];

	mov	edx, DWORD PTR _i$89445[ebp]
	mov	eax, DWORD PTR _a$89441[ebp]
	mov	ecx, DWORD PTR _offset$89447[ebp]
	imul	ecx, DWORD PTR [eax+edx*4+24]
	mov	DWORD PTR _offset$89447[ebp], ecx

; 143  :            offset += (int)stacktop[i+1-a->dim].value-1;  /* 1-based indexing */

	mov	edx, DWORD PTR _i$89445[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _a$89441[ebp]
	sub	edx, DWORD PTR [eax+4]
	imul	edx, 1256				; 000004e8H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+edx]
	call	__ftol2_sse
	mov	edx, DWORD PTR _offset$89447[ebp]
	lea	eax, DWORD PTR [edx+eax-1]
	mov	DWORD PTR _offset$89447[ebp], eax

; 144  :         }

	jmp	SHORT $LN861@eval_secon
$LN860@eval_secon:

; 145  :           stacktop -= a->dim;

	mov	ecx, DWORD PTR _a$89441[ebp]
	mov	edx, DWORD PTR [ecx+4]
	imul	edx, 1256				; 000004e8H
	mov	eax, DWORD PTR _stacktop$[ebp]
	sub	eax, edx
	mov	DWORD PTR _stacktop$[ebp], eax

; 146  :          lvalue = ((char *)a) + a->datastart + offset*a->itemsize;

	mov	ecx, DWORD PTR _a$89441[ebp]
	mov	edx, DWORD PTR _a$89441[ebp]
	add	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _a$89441[ebp]
	mov	ecx, DWORD PTR _offset$89447[ebp]
	imul	ecx, DWORD PTR [eax+12]
	add	edx, ecx
	mov	DWORD PTR _lvalue$89448[ebp], edx

; 147  :          switch ( a->datatype )

	mov	edx, DWORD PTR _a$89441[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv355[ebp], eax
	mov	ecx, DWORD PTR tv355[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv355[ebp], ecx
	cmp	DWORD PTR tv355[ebp], 17		; 00000011H
	ja	$LN846@eval_secon
	mov	edx, DWORD PTR tv355[ebp]
	jmp	DWORD PTR $LN1106@eval_secon[edx*4]
$LN857@eval_secon:

; 148  :          { case REAL_TYPE: value = *(REAL*)(lvalue);    break;

	mov	eax, DWORD PTR _lvalue$89448[ebp]
	fld	QWORD PTR [eax]
	fstp	QWORD PTR _value$89444[ebp]
	jmp	$LN858@eval_secon
$LN856@eval_secon:

; 149  :            case INTEGER_TYPE: value = *(int*)(lvalue);    break;

	mov	ecx, DWORD PTR _lvalue$89448[ebp]
	fild	DWORD PTR [ecx]
	fstp	QWORD PTR _value$89444[ebp]
	jmp	$LN858@eval_secon
$LN855@eval_secon:

; 150  :            case UINT_TYPE: value = *(unsigned int*)(lvalue);    break;

	mov	edx, DWORD PTR _lvalue$89448[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv5421[ebp], eax
	mov	DWORD PTR tv5421[ebp+4], 0
	fild	QWORD PTR tv5421[ebp]
	fstp	QWORD PTR _value$89444[ebp]
	jmp	$LN858@eval_secon
$LN854@eval_secon:

; 151  :            case CHAR_TYPE: value = *(char*)(lvalue);    break;

	mov	ecx, DWORD PTR _lvalue$89448[ebp]
	movsx	edx, BYTE PTR [ecx]
	mov	DWORD PTR tv5425[ebp], edx
	fild	DWORD PTR tv5425[ebp]
	fstp	QWORD PTR _value$89444[ebp]
	jmp	$LN858@eval_secon
$LN853@eval_secon:

; 152  :            case UCHAR_TYPE: value = *(unsigned char*)(lvalue);    break;

	mov	eax, DWORD PTR _lvalue$89448[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR tv5427[ebp], ecx
	fild	DWORD PTR tv5427[ebp]
	fstp	QWORD PTR _value$89444[ebp]
	jmp	$LN858@eval_secon
$LN852@eval_secon:

; 153  :            case SHORT_TYPE: value = *(short int*)(lvalue);    break;

	mov	edx, DWORD PTR _lvalue$89448[ebp]
	movsx	eax, WORD PTR [edx]
	mov	DWORD PTR tv5429[ebp], eax
	fild	DWORD PTR tv5429[ebp]
	fstp	QWORD PTR _value$89444[ebp]
	jmp	$LN858@eval_secon
$LN851@eval_secon:

; 154  :            case USHORT_TYPE: value = *(unsigned short int*)(lvalue);    break;

	mov	ecx, DWORD PTR _lvalue$89448[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	DWORD PTR tv5431[ebp], edx
	fild	DWORD PTR tv5431[ebp]
	fstp	QWORD PTR _value$89444[ebp]
	jmp	SHORT $LN858@eval_secon
$LN850@eval_secon:

; 155  :            case LONG_TYPE: value = *(long*)(lvalue);    break;

	mov	eax, DWORD PTR _lvalue$89448[ebp]
	fild	DWORD PTR [eax]
	fstp	QWORD PTR _value$89444[ebp]
	jmp	SHORT $LN858@eval_secon
$LN849@eval_secon:

; 156  :            case ULONG_TYPE: value = *(unsigned long*)(lvalue);    break;

	mov	ecx, DWORD PTR _lvalue$89448[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv5435[ebp], edx
	mov	DWORD PTR tv5435[ebp+4], 0
	fild	QWORD PTR tv5435[ebp]
	fstp	QWORD PTR _value$89444[ebp]
	jmp	SHORT $LN858@eval_secon
$LN848@eval_secon:

; 157  :            case PTR_TYPE: value = (unsigned long)*(char**)(lvalue);    break;

	mov	eax, DWORD PTR _lvalue$89448[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv5440[ebp], ecx
	mov	DWORD PTR tv5440[ebp+4], 0
	fild	QWORD PTR tv5440[ebp]
	fstp	QWORD PTR _value$89444[ebp]
	jmp	SHORT $LN858@eval_secon
$LN847@eval_secon:

; 158  :            case VERTEX_TYPE:
; 159  :            case EDGE_TYPE:
; 160  :            case FACET_TYPE:
; 161  :            case BODY_TYPE:
; 162  :            case FACETEDGE_TYPE:
; 163  :            case ELEMENTID_TYPE: value = (int)*(element_id*)(lvalue); break;

	mov	edx, DWORD PTR _lvalue$89448[ebp]
	fild	DWORD PTR [edx]
	fstp	QWORD PTR _value$89444[ebp]
	jmp	SHORT $LN858@eval_secon
$LN846@eval_secon:

; 164  :            default: value = *(int*)(lvalue); break;        

	mov	eax, DWORD PTR _lvalue$89448[ebp]
	fild	DWORD PTR [eax]
	fstp	QWORD PTR _value$89444[ebp]
$LN858@eval_secon:

; 165  :          }
; 166  :          (++stacktop)->value = value;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _value$89444[ebp]
	fstp	QWORD PTR [edx]

; 167  :          FIRST=0.0;

	mov	DWORD PTR _i$89445[ebp], 0
	jmp	SHORT $LN845@eval_secon
$LN844@eval_secon:
	mov	eax, DWORD PTR _i$89445[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89445[ebp], eax
$LN845@eval_secon:
	mov	ecx, DWORD PTR _i$89445[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN843@eval_secon
	mov	edx, DWORD PTR _i$89445[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fldz
	fstp	QWORD PTR [eax+edx*8+8]
	jmp	SHORT $LN844@eval_secon
$LN843@eval_secon:

; 168  :          SECOND = 0.0;

	mov	DWORD PTR _i$89445[ebp], 0
	jmp	SHORT $LN842@eval_secon
$LN841@eval_secon:
	mov	ecx, DWORD PTR _i$89445[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$89445[ebp], ecx
$LN842@eval_secon:
	mov	edx, DWORD PTR _i$89445[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN840@eval_secon
	mov	DWORD PTR _j$89446[ebp], 0
	jmp	SHORT $LN839@eval_secon
$LN838@eval_secon:
	mov	eax, DWORD PTR _j$89446[ebp]
	add	eax, 1
	mov	DWORD PTR _j$89446[ebp], eax
$LN839@eval_secon:
	mov	ecx, DWORD PTR _j$89446[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN837@eval_secon
	mov	edx, DWORD PTR _i$89445[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _j$89446[ebp]
	fldz
	fstp	QWORD PTR [ecx+edx*8]
	jmp	SHORT $LN838@eval_secon
$LN837@eval_secon:
	jmp	SHORT $LN841@eval_secon
$LN840@eval_secon:

; 169  :        }
; 170  :        break;

	jmp	$LN887@eval_secon
$LN836@eval_secon:

; 171  : 
; 172  :        case BACKQUOTE_START_NODE:
; 173  :         { struct expnode bqnode = *ex;

	mov	esi, DWORD PTR _ex$[ebp]
	mov	ecx, 26					; 0000001aH
	lea	edi, DWORD PTR _bqnode$89509[ebp]
	rep movsd

; 174  :           bqnode.start = node;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR _bqnode$89509[ebp], eax

; 175  :           bqnode.root = node+node->op1.skipsize;

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	imul	edx, 168				; 000000a8H
	add	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR _bqnode$89509[ebp+4], edx

; 176  :           bqnode.locals = localbase;

	mov	eax, DWORD PTR _localbase$[ebp]
	mov	DWORD PTR _bqnode$89509[ebp+8], eax

; 177  :           eval(&bqnode,params,q_id,NULL);

	push	0
	mov	ecx, DWORD PTR _q_id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _params$[ebp]
	push	edx
	lea	eax, DWORD PTR _bqnode$89509[ebp]
	push	eax
	call	_eval
	fstp	ST(0)
	add	esp, 16					; 00000010H

; 178  :           node += node->op1.skipsize-1;

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	sub	edx, 1
	imul	edx, 168				; 000000a8H
	add	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR _node$[ebp], edx

; 179  :         }
; 180  :         break;

	jmp	$LN887@eval_secon
$LN835@eval_secon:

; 181  : 
; 182  :        case BACKQUOTE_END_NODE: break;  /* just a placeholder */

	jmp	$LN887@eval_secon
$LN834@eval_secon:

; 183  :        case ACOMMANDEXPR_NODE: /* backquoted command at start of expression */
; 184  :            break;

	jmp	$LN887@eval_secon
$LN833@eval_secon:

; 185  : 
; 186  :        case SET_GLOBAL_NODE:
; 187  :          { struct global *g = globals(node->op1.name_id);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	jne	SHORT $LN924@eval_secon
	mov	edx, DWORD PTR _dymem
	add	edx, DWORD PTR _web+5652
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv429[ebp], edx
	jmp	$LN925@eval_secon
$LN924@eval_secon:
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN922@eval_secon
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _localbase$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR tv428[ebp], eax
	jmp	SHORT $LN923@eval_secon
$LN922@eval_secon:
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, -16777216				; ff000000H
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN920@eval_secon
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	and	edx, 16777215				; 00ffffffH
	mov	eax, DWORD PTR _web+5656
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv427[ebp], ecx
	jmp	SHORT $LN921@eval_secon
$LN920@eval_secon:
	mov	edx, DWORD PTR _dymem
	add	edx, DWORD PTR _web+5652
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv427[ebp], edx
$LN921@eval_secon:
	mov	eax, DWORD PTR tv427[ebp]
	mov	DWORD PTR tv428[ebp], eax
$LN923@eval_secon:
	mov	ecx, DWORD PTR tv428[ebp]
	mov	DWORD PTR tv429[ebp], ecx
$LN925@eval_secon:
	mov	edx, DWORD PTR tv429[ebp]
	mov	DWORD PTR _g$89514[ebp], edx

; 188  :            int i,j;
; 189  :            g->value.real = stacktop->value;

	mov	eax, DWORD PTR _g$89514[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx]
	fstp	QWORD PTR [eax+64]

; 190  :            if ( g->attr.varstuff.on_assign_call )

	mov	edx, DWORD PTR _g$89514[ebp]
	cmp	DWORD PTR [edx+188], 0
	je	$LN832@eval_secon

; 191  :            { struct  global *gg = globals(g->attr.varstuff.on_assign_call);

	mov	eax, DWORD PTR _g$89514[ebp]
	mov	ecx, DWORD PTR [eax+188]
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	jne	SHORT $LN930@eval_secon
	mov	edx, DWORD PTR _dymem
	add	edx, DWORD PTR _web+5652
	mov	eax, DWORD PTR _g$89514[ebp]
	mov	ecx, DWORD PTR [eax+188]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv462[ebp], edx
	jmp	$LN931@eval_secon
$LN930@eval_secon:
	mov	eax, DWORD PTR _g$89514[ebp]
	mov	ecx, DWORD PTR [eax+188]
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN928@eval_secon
	mov	edx, DWORD PTR _g$89514[ebp]
	mov	eax, DWORD PTR [edx+188]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _localbase$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR tv461[ebp], eax
	jmp	SHORT $LN929@eval_secon
$LN928@eval_secon:
	mov	edx, DWORD PTR _g$89514[ebp]
	mov	eax, DWORD PTR [edx+188]
	and	eax, -16777216				; ff000000H
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN926@eval_secon
	mov	ecx, DWORD PTR _g$89514[ebp]
	mov	edx, DWORD PTR [ecx+188]
	and	edx, 16777215				; 00ffffffH
	mov	eax, DWORD PTR _web+5656
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv460[ebp], ecx
	jmp	SHORT $LN927@eval_secon
$LN926@eval_secon:
	mov	edx, DWORD PTR _dymem
	add	edx, DWORD PTR _web+5652
	mov	eax, DWORD PTR _g$89514[ebp]
	mov	ecx, DWORD PTR [eax+188]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv460[ebp], edx
$LN927@eval_secon:
	mov	eax, DWORD PTR tv460[ebp]
	mov	DWORD PTR tv461[ebp], eax
$LN929@eval_secon:
	mov	ecx, DWORD PTR tv461[ebp]
	mov	DWORD PTR tv462[ebp], ecx
$LN931@eval_secon:
	mov	edx, DWORD PTR tv462[ebp]
	mov	DWORD PTR _gg$89520[ebp], edx

; 192  :              eval(&gg->value.proc,NULL,NULLID,NULL);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _gg$89520[ebp]
	add	eax, 64					; 00000040H
	push	eax
	call	_eval
	fstp	ST(0)
	add	esp, 16					; 00000010H
$LN832@eval_secon:

; 193  :            }
; 194  :            if ( g->attr.varstuff.gradhess == NULL )

	mov	ecx, DWORD PTR _g$89514[ebp]
	cmp	DWORD PTR [ecx+184], 0
	jne	SHORT $LN831@eval_secon

; 195  :               g->attr.varstuff.gradhess = (REAL*)mycalloc(MAXCOORD*(MAXCOORD+1), sizeof(REAL));

	push	195					; 000000c3H
	push	OFFSET ??_C@_0L@JPAEHJJG@EVAL_SEC?4C?$AA@
	push	8
	push	42					; 0000002aH
	call	_kb_calloc
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _g$89514[ebp]
	mov	DWORD PTR [edx+184], eax
$LN831@eval_secon:

; 196  :            for ( i = 0 ; i < pcount ; i++ )

	mov	DWORD PTR _i$89517[ebp], 0
	jmp	SHORT $LN830@eval_secon
$LN829@eval_secon:
	mov	eax, DWORD PTR _i$89517[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89517[ebp], eax
$LN830@eval_secon:
	mov	ecx, DWORD PTR _i$89517[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN828@eval_secon

; 197  :               g->attr.varstuff.gradhess[i] = stacktop->deriv[i];

	mov	edx, DWORD PTR _g$89514[ebp]
	mov	eax, DWORD PTR [edx+184]
	mov	ecx, DWORD PTR _i$89517[ebp]
	mov	edx, DWORD PTR _i$89517[ebp]
	mov	esi, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [esi+edx*8+8]
	fstp	QWORD PTR [eax+ecx*8]
	jmp	SHORT $LN829@eval_secon
$LN828@eval_secon:

; 198  :            for ( i = 0 ; i < pcount ; i++ )

	mov	DWORD PTR _i$89517[ebp], 0
	jmp	SHORT $LN827@eval_secon
$LN826@eval_secon:
	mov	eax, DWORD PTR _i$89517[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89517[ebp], eax
$LN827@eval_secon:
	mov	ecx, DWORD PTR _i$89517[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN825@eval_secon

; 199  :              for ( j = 0 ; j < pcount ; j++ )

	mov	DWORD PTR _j$89518[ebp], 0
	jmp	SHORT $LN824@eval_secon
$LN823@eval_secon:
	mov	edx, DWORD PTR _j$89518[ebp]
	add	edx, 1
	mov	DWORD PTR _j$89518[ebp], edx
$LN824@eval_secon:
	mov	eax, DWORD PTR _j$89518[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN822@eval_secon

; 200  :                 (g->attr.varstuff.gradhess+MAXCOORD)[i*MAXCOORD+j] = stacktop->second[i][j];

	mov	ecx, DWORD PTR _i$89517[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [edx+ecx+104]
	mov	ecx, DWORD PTR _g$89514[ebp]
	mov	edx, DWORD PTR [ecx+184]
	mov	ecx, DWORD PTR _i$89517[ebp]
	imul	ecx, 6
	add	ecx, DWORD PTR _j$89518[ebp]
	mov	esi, DWORD PTR _j$89518[ebp]
	fld	QWORD PTR [eax+esi*8]
	fstp	QWORD PTR [edx+ecx*8+48]
	jmp	SHORT $LN823@eval_secon
$LN822@eval_secon:
	jmp	SHORT $LN826@eval_secon
$LN825@eval_secon:

; 201  :            stacktop--;

	mov	edx, DWORD PTR _stacktop$[ebp]
	sub	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx

; 202  :            break;

	jmp	$LN887@eval_secon
$LN821@eval_secon:

; 203  :          }
; 204  : 
; 205  :        case REPLACECONST_NODE:
; 206  :           zero_seconds(pcount,stacktop);

	mov	eax, DWORD PTR _stacktop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcount$[ebp]
	push	ecx
	call	_zero_seconds
	add	esp, 8

; 207  :           stacktop->value = node->op1.real;

	mov	edx, DWORD PTR _stacktop$[ebp]
	mov	eax, DWORD PTR _node$[ebp]
	fld	QWORD PTR [eax+32]
	fstp	QWORD PTR [edx]

; 208  :              break;

	jmp	$LN887@eval_secon
$LN820@eval_secon:

; 209  : 
; 210  :        case COND_TEST_NODE:
; 211  :           if ( (stacktop--)->value == 0. )

	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx]
	fldz
	fucompp
	fnstsw	ax
	mov	edx, DWORD PTR _stacktop$[ebp]
	sub	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx
	test	ah, 68					; 00000044H
	jp	SHORT $LN819@eval_secon

; 212  :              { /* jump */
; 213  :                node += node->op1.skipsize;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	imul	ecx, 168				; 000000a8H
	add	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR _node$[ebp], ecx
$LN819@eval_secon:

; 214  :              }
; 215  :           break;

	jmp	$LN887@eval_secon
$LN818@eval_secon:

; 216  : 
; 217  :        case COND_EXPR_NODE:
; 218  :           /* did first command, so skip second */
; 219  :           node += node->op1.skipsize;

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	imul	eax, 168				; 000000a8H
	add	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR _node$[ebp], eax

; 220  :           break;

	jmp	$LN887@eval_secon
$LN817@eval_secon:

; 221  : 
; 222  :        case COND_ELSE_NODE:
; 223  :           break;

	jmp	$LN887@eval_secon
$LN816@eval_secon:

; 224  : 
; 225  :        case MAXIMUM_NODE:
; 226  :              stacktop--;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	sub	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx

; 227  :              if  (stacktop[0].value < stacktop[1].value) 

	mov	edx, DWORD PTR _stacktop$[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax+1256]
	fcomp	QWORD PTR [edx]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN815@eval_secon

; 228  :                stacktop[0] = stacktop[1];

	mov	esi, DWORD PTR _stacktop$[ebp]
	add	esi, 1256				; 000004e8H
	mov	ecx, 314				; 0000013aH
	mov	edi, DWORD PTR _stacktop$[ebp]
	rep movsd
$LN815@eval_secon:

; 229  :              break;

	jmp	$LN887@eval_secon
$LN814@eval_secon:

; 230  : 
; 231  :        case MINIMUM_NODE:
; 232  :              stacktop--;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	sub	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx

; 233  :              if (stacktop[0].value > stacktop[1].value) 

	mov	edx, DWORD PTR _stacktop$[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax+1256]
	fcomp	QWORD PTR [edx]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN813@eval_secon

; 234  :                stacktop[0] = stacktop[1];

	mov	esi, DWORD PTR _stacktop$[ebp]
	add	esi, 1256				; 000004e8H
	mov	ecx, 314				; 0000013aH
	mov	edi, DWORD PTR _stacktop$[ebp]
	rep movsd
$LN813@eval_secon:

; 235  :              break;

	jmp	$LN887@eval_secon
$LN812@eval_secon:

; 236  : 
; 237  :        case TOGGLEVALUE_NODE:
; 238  :           (++stacktop)->value = (REAL)get_toggle_value(node->op1.toggle_state);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_get_toggle_value
	add	esp, 4
	mov	DWORD PTR tv5589[ebp], eax
	fild	DWORD PTR tv5589[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx]

; 239  :           zero_seconds(pcount,stacktop);

	mov	edx, DWORD PTR _stacktop$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcount$[ebp]
	push	eax
	call	_zero_seconds
	add	esp, 8

; 240  :           break;

	jmp	$LN887@eval_secon
$LN811@eval_secon:

; 241  : 
; 242  :        case SIZEOF_ATTR_NODE:
; 243  :           (++stacktop)->value = 
; 244  :               (REAL)EXTRAS(node->op2.eltype)[node->op1.extranum].array_spec.datacount;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	imul	eax, 240				; 000000f0H
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	imul	edx, 112				; 00000070H
	mov	ecx, DWORD PTR _dymem
	add	ecx, DWORD PTR _web[edx+104]
	fild	DWORD PTR [ecx+eax+88]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]

; 245  :           zero_seconds(pcount,stacktop);

	mov	eax, DWORD PTR _stacktop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcount$[ebp]
	push	ecx
	call	_zero_seconds
	add	esp, 8

; 246  :           break;

	jmp	$LN887@eval_secon
$LN810@eval_secon:

; 247  : 
; 248  :        case PUSHCONST_NODE:
; 249  :        case PUSHPI_NODE:
; 250  :        case PUSHE_NODE:
; 251  :           (++stacktop)->value = node->op1.real;

	mov	edx, DWORD PTR _stacktop$[ebp]
	add	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx
	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	fld	QWORD PTR [ecx+32]
	fstp	QWORD PTR [eax]

; 252  :           zero_seconds(pcount,stacktop);

	mov	edx, DWORD PTR _stacktop$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcount$[ebp]
	push	eax
	call	_zero_seconds
	add	esp, 8

; 253  :              break;

	jmp	$LN887@eval_secon
$LN809@eval_secon:

; 254  : 
; 255  :        case PUSHG_NODE:
; 256  :           (++stacktop)->value = web.gravflag ? web.grav_const : 0.0;

	cmp	DWORD PTR _web+824, 0
	je	SHORT $LN932@eval_secon
	fld	QWORD PTR _web+832
	fstp	QWORD PTR tv581[ebp]
	jmp	SHORT $LN933@eval_secon
$LN932@eval_secon:
	fldz
	fstp	QWORD PTR tv581[ebp]
$LN933@eval_secon:
	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR tv581[ebp]
	fstp	QWORD PTR [edx]

; 257  :           zero_seconds(pcount,stacktop);

	mov	eax, DWORD PTR _stacktop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcount$[ebp]
	push	ecx
	call	_zero_seconds
	add	esp, 8

; 258  :              break;

	jmp	$LN887@eval_secon
$LN808@eval_secon:

; 259  : 
; 260  :        case PUSHGLOBAL_NODE:
; 261  :              { struct global *g = globals(node->op1.name_id);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, -16777216				; ff000000H
	cmp	eax, 268435456				; 10000000H
	jne	SHORT $LN938@eval_secon
	mov	ecx, DWORD PTR _dymem
	add	ecx, DWORD PTR _web+5652
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, 16777215				; 00ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv613[ebp], ecx
	jmp	$LN939@eval_secon
$LN938@eval_secon:
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, -16777216				; ff000000H
	cmp	eax, 805306368				; 30000000H
	jne	SHORT $LN936@eval_secon
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	and	edx, 16777215				; 00ffffffH
	imul	edx, 224				; 000000e0H
	mov	eax, DWORD PTR _localbase$[ebp]
	add	edx, DWORD PTR [eax]
	mov	DWORD PTR tv612[ebp], edx
	jmp	SHORT $LN937@eval_secon
$LN936@eval_secon:
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	and	edx, -16777216				; ff000000H
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN934@eval_secon
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR _web+5656
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv611[ebp], eax
	jmp	SHORT $LN935@eval_secon
$LN934@eval_secon:
	mov	ecx, DWORD PTR _dymem
	add	ecx, DWORD PTR _web+5652
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, 16777215				; 00ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv611[ebp], ecx
$LN935@eval_secon:
	mov	edx, DWORD PTR tv611[ebp]
	mov	DWORD PTR tv612[ebp], edx
$LN937@eval_secon:
	mov	eax, DWORD PTR tv612[ebp]
	mov	DWORD PTR tv613[ebp], eax
$LN939@eval_secon:
	mov	ecx, DWORD PTR tv613[ebp]
	mov	DWORD PTR _g$89556[ebp], ecx

; 262  :                int i,j;
; 263  :                if ( g->flags & FILE_VALUES )

	mov	edx, DWORD PTR _g$89556[ebp]
	mov	eax, DWORD PTR [edx+192]
	and	eax, 2
	je	SHORT $LN807@eval_secon

; 264  :                (++stacktop)->value = g->value.file.values[int_val];

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx
	mov	edx, DWORD PTR _g$89556[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	mov	edx, DWORD PTR _int_val
	fld	QWORD PTR [eax+edx*8]
	fstp	QWORD PTR [ecx]
	jmp	SHORT $LN804@eval_secon
$LN807@eval_secon:

; 265  :                else if ( g->flags & STRINGVAL )

	mov	eax, DWORD PTR _g$89556[ebp]
	mov	ecx, DWORD PTR [eax+192]
	and	ecx, 8192				; 00002000H
	je	SHORT $LN805@eval_secon

; 266  :                (++stacktop)->value = 0.0;

	mov	edx, DWORD PTR _stacktop$[ebp]
	add	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx
	mov	eax, DWORD PTR _stacktop$[ebp]
	fldz
	fstp	QWORD PTR [eax]

; 267  :                else

	jmp	SHORT $LN804@eval_secon
$LN805@eval_secon:

; 268  :                (++stacktop)->value = g->value.real;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx
	mov	edx, DWORD PTR _stacktop$[ebp]
	mov	eax, DWORD PTR _g$89556[ebp]
	fld	QWORD PTR [eax+64]
	fstp	QWORD PTR [edx]
$LN804@eval_secon:

; 269  :                if ( g->attr.varstuff.gradhess )

	mov	ecx, DWORD PTR _g$89556[ebp]
	cmp	DWORD PTR [ecx+184], 0
	je	$LN803@eval_secon

; 270  :                { for ( i = 0 ; i < pcount ; i++ )

	mov	DWORD PTR _i$89559[ebp], 0
	jmp	SHORT $LN802@eval_secon
$LN801@eval_secon:
	mov	edx, DWORD PTR _i$89559[ebp]
	add	edx, 1
	mov	DWORD PTR _i$89559[ebp], edx
$LN802@eval_secon:
	mov	eax, DWORD PTR _i$89559[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN800@eval_secon

; 271  :                    stacktop->deriv[i] = g->attr.varstuff.gradhess[i];

	mov	ecx, DWORD PTR _g$89556[ebp]
	mov	edx, DWORD PTR [ecx+184]
	mov	eax, DWORD PTR _i$89559[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	mov	esi, DWORD PTR _i$89559[ebp]
	fld	QWORD PTR [edx+esi*8]
	fstp	QWORD PTR [ecx+eax*8+8]
	jmp	SHORT $LN801@eval_secon
$LN800@eval_secon:

; 272  :                  for ( i = 0 ; i < pcount ; i++ )

	mov	DWORD PTR _i$89559[ebp], 0
	jmp	SHORT $LN799@eval_secon
$LN798@eval_secon:
	mov	edx, DWORD PTR _i$89559[ebp]
	add	edx, 1
	mov	DWORD PTR _i$89559[ebp], edx
$LN799@eval_secon:
	mov	eax, DWORD PTR _i$89559[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN797@eval_secon

; 273  :                    for ( j = 0 ; j < pcount ; j++ )

	mov	DWORD PTR _j$89560[ebp], 0
	jmp	SHORT $LN796@eval_secon
$LN795@eval_secon:
	mov	ecx, DWORD PTR _j$89560[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$89560[ebp], ecx
$LN796@eval_secon:
	mov	edx, DWORD PTR _j$89560[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN794@eval_secon

; 274  :                      stacktop->second[i][j] = 
; 275  :                        (g->attr.varstuff.gradhess+MAXCOORD)[i*MAXCOORD+j];

	mov	eax, DWORD PTR _g$89556[ebp]
	mov	ecx, DWORD PTR [eax+184]
	mov	edx, DWORD PTR _i$89559[ebp]
	imul	edx, 6
	add	edx, DWORD PTR _j$89560[ebp]
	mov	eax, DWORD PTR _i$89559[ebp]
	imul	eax, 96					; 00000060H
	mov	esi, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [esi+eax+104]
	mov	esi, DWORD PTR _j$89560[ebp]
	fld	QWORD PTR [ecx+edx*8+48]
	fstp	QWORD PTR [eax+esi*8]
	jmp	SHORT $LN795@eval_secon
$LN794@eval_secon:
	jmp	SHORT $LN798@eval_secon
$LN797@eval_secon:

; 276  :                }
; 277  :                else zero_seconds(pcount,stacktop);

	jmp	SHORT $LN793@eval_secon
$LN803@eval_secon:
	mov	ecx, DWORD PTR _stacktop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcount$[ebp]
	push	edx
	call	_zero_seconds
	add	esp, 8
$LN793@eval_secon:

; 278  :              }
; 279  :              break;

	jmp	$LN887@eval_secon
$LN792@eval_secon:

; 280  : 
; 281  :        case PUSHPARAM_NODE:
; 282  :         { int i,j;
; 283  :           (++stacktop)->value = params[node->op1.coordnum];

	mov	eax, DWORD PTR _stacktop$[ebp]
	add	eax, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], eax
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _params$[ebp]
	fld	QWORD PTR [ecx+edx*8]
	fstp	QWORD PTR [eax]

; 284  :           for ( i = 0 ; i < pcount ; i++ )

	mov	DWORD PTR _i$89577[ebp], 0
	jmp	SHORT $LN791@eval_secon
$LN790@eval_secon:
	mov	edx, DWORD PTR _i$89577[ebp]
	add	edx, 1
	mov	DWORD PTR _i$89577[ebp], edx
$LN791@eval_secon:
	mov	eax, DWORD PTR _i$89577[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN789@eval_secon

; 285  :              if ( i == node->op1.coordnum )

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR _i$89577[ebp]
	cmp	edx, DWORD PTR [ecx+32]
	jne	SHORT $LN788@eval_secon

; 286  :                 stacktop->deriv[i] = 1.0;

	mov	eax, DWORD PTR _i$89577[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld1
	fstp	QWORD PTR [ecx+eax*8+8]
	jmp	SHORT $LN787@eval_secon
$LN788@eval_secon:

; 287  :              else stacktop->deriv[i] = 0.0;

	mov	edx, DWORD PTR _i$89577[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fldz
	fstp	QWORD PTR [eax+edx*8+8]
$LN787@eval_secon:
	jmp	SHORT $LN790@eval_secon
$LN789@eval_secon:

; 288  :           SECOND = 0.0;

	mov	DWORD PTR _i$89577[ebp], 0
	jmp	SHORT $LN786@eval_secon
$LN785@eval_secon:
	mov	ecx, DWORD PTR _i$89577[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$89577[ebp], ecx
$LN786@eval_secon:
	mov	edx, DWORD PTR _i$89577[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN784@eval_secon
	mov	DWORD PTR _j$89578[ebp], 0
	jmp	SHORT $LN783@eval_secon
$LN782@eval_secon:
	mov	eax, DWORD PTR _j$89578[ebp]
	add	eax, 1
	mov	DWORD PTR _j$89578[ebp], eax
$LN783@eval_secon:
	mov	ecx, DWORD PTR _j$89578[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN781@eval_secon
	mov	edx, DWORD PTR _i$89577[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _j$89578[ebp]
	fldz
	fstp	QWORD PTR [ecx+edx*8]
	jmp	SHORT $LN782@eval_secon
$LN781@eval_secon:
	jmp	SHORT $LN785@eval_secon
$LN784@eval_secon:

; 289  :           break;

	jmp	$LN887@eval_secon
$LN780@eval_secon:

; 290  :         }
; 291  : 
; 292  :        case PARAM_NODE:
; 293  :        { int i,j;
; 294  :          if ( node->op1.localnum ) 

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN779@eval_secon

; 295  :            id = *(element_id*)get_localp(node->op1.localnum);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	and	edx, 16777215				; 00ffffffH
	imul	edx, 224				; 000000e0H
	mov	eax, DWORD PTR _localbase$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+edx+216]
	imul	edx, 1256				; 000004e8H
	mov	eax, DWORD PTR _localstack$[ebp+edx]
	mov	DWORD PTR _id$[ebp], eax
	jmp	SHORT $LN778@eval_secon
$LN779@eval_secon:

; 296  :          else id = q_id;

	mov	ecx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], ecx
$LN778@eval_secon:

; 297  :          (++stacktop)->value = get_param(id)[node->op2.coordnum];

	mov	edx, DWORD PTR _stacktop$[ebp]
	add	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	edx, DWORD PTR _id$[ebp]
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR _web+12
	mov	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR _dymem
	add	eax, DWORD PTR _web+104
	add	edx, DWORD PTR [eax+544]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [edx+ecx*8]
	fstp	QWORD PTR [eax]

; 298  :          for ( i = 0 ; i < SDIM ; i++ )

	mov	DWORD PTR _i$89591[ebp], 0
	jmp	SHORT $LN777@eval_secon
$LN776@eval_secon:
	mov	ecx, DWORD PTR _i$89591[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$89591[ebp], ecx
$LN777@eval_secon:
	mov	edx, DWORD PTR _i$89591[ebp]
	cmp	edx, DWORD PTR _web+616
	jge	SHORT $LN775@eval_secon

; 299  :              if ( i == node->op2.coordnum )

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _i$89591[ebp]
	cmp	ecx, DWORD PTR [eax+136]
	jne	SHORT $LN774@eval_secon

; 300  :                 stacktop->deriv[i] = 1.0;

	mov	edx, DWORD PTR _i$89591[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fld1
	fstp	QWORD PTR [eax+edx*8+8]
	jmp	SHORT $LN773@eval_secon
$LN774@eval_secon:

; 301  :              else stacktop->deriv[i] = 0.0;

	mov	ecx, DWORD PTR _i$89591[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fldz
	fstp	QWORD PTR [edx+ecx*8+8]
$LN773@eval_secon:
	jmp	SHORT $LN776@eval_secon
$LN775@eval_secon:

; 302  :          SECOND = 0;

	mov	DWORD PTR _i$89591[ebp], 0
	jmp	SHORT $LN772@eval_secon
$LN771@eval_secon:
	mov	eax, DWORD PTR _i$89591[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89591[ebp], eax
$LN772@eval_secon:
	mov	ecx, DWORD PTR _i$89591[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN770@eval_secon
	mov	DWORD PTR _j$89592[ebp], 0
	jmp	SHORT $LN769@eval_secon
$LN768@eval_secon:
	mov	edx, DWORD PTR _j$89592[ebp]
	add	edx, 1
	mov	DWORD PTR _j$89592[ebp], edx
$LN769@eval_secon:
	mov	eax, DWORD PTR _j$89592[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN767@eval_secon
	mov	ecx, DWORD PTR _i$89591[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [edx+ecx+104]
	mov	ecx, DWORD PTR _j$89592[ebp]
	fldz
	fstp	QWORD PTR [eax+ecx*8]
	jmp	SHORT $LN768@eval_secon
$LN767@eval_secon:
	jmp	SHORT $LN771@eval_secon
$LN770@eval_secon:

; 303  :          break;

	jmp	$LN887@eval_secon
$LN766@eval_secon:

; 304  :        }
; 305  : 
; 306  :        case PUSHQPRESSURE_NODE:
; 307  :            (++stacktop)->value = GEN_QUANT(node->op1.quant_id)->pressure;

	mov	edx, DWORD PTR _stacktop$[ebp]
	add	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	imul	ecx, 368				; 00000170H
	mov	edx, DWORD PTR _stacktop$[ebp]
	mov	eax, DWORD PTR _gen_quant_list
	fld	QWORD PTR [eax+ecx+192]
	fstp	QWORD PTR [edx]

; 308  :            zero_seconds(pcount,stacktop);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcount$[ebp]
	push	edx
	call	_zero_seconds
	add	esp, 8

; 309  :            break;

	jmp	$LN887@eval_secon
$LN765@eval_secon:

; 310  : 
; 311  :        case PUSHQTARGET_NODE:
; 312  :            (++stacktop)->value = GEN_QUANT(node->op1.quant_id)->target;

	mov	eax, DWORD PTR _stacktop$[ebp]
	add	eax, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], eax
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	imul	edx, 368				; 00000170H
	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _gen_quant_list
	fld	QWORD PTR [ecx+edx+144]
	fstp	QWORD PTR [eax]

; 313  :            zero_seconds(pcount,stacktop);

	mov	edx, DWORD PTR _stacktop$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcount$[ebp]
	push	eax
	call	_zero_seconds
	add	esp, 8

; 314  :            break;

	jmp	$LN887@eval_secon
$LN764@eval_secon:

; 315  : 
; 316  :        case PUSHQMODULUS_NODE:
; 317  :            (++stacktop)->value = GEN_QUANT(node->op1.quant_id)->modulus;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	imul	eax, 368				; 00000170H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	mov	edx, DWORD PTR _gen_quant_list
	fld	QWORD PTR [edx+eax+176]
	fstp	QWORD PTR [ecx]

; 318  :            zero_seconds(pcount,stacktop);

	mov	eax, DWORD PTR _stacktop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcount$[ebp]
	push	ecx
	call	_zero_seconds
	add	esp, 8

; 319  :            break;

	jmp	$LN887@eval_secon
$LN763@eval_secon:

; 320  : 
; 321  :        case PUSHQTOLERANCE_NODE:
; 322  :            (++stacktop)->value = GEN_QUANT(node->op1.quant_id)->tolerance;

	mov	edx, DWORD PTR _stacktop$[ebp]
	add	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	imul	ecx, 368				; 00000170H
	mov	edx, DWORD PTR _stacktop$[ebp]
	mov	eax, DWORD PTR _gen_quant_list
	fld	QWORD PTR [eax+ecx+184]
	fstp	QWORD PTR [edx]

; 323  :            zero_seconds(pcount,stacktop);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcount$[ebp]
	push	edx
	call	_zero_seconds
	add	esp, 8

; 324  :            break;

	jmp	$LN887@eval_secon
$LN762@eval_secon:

; 325  : 
; 326  :        case PUSHMMODULUS_NODE:
; 327  :            (++stacktop)->value = METH_INSTANCE(node->op1.meth_id)->modulus;

	mov	eax, DWORD PTR _stacktop$[ebp]
	add	eax, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], eax
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_abs
	add	esp, 4
	imul	eax, 2928				; 00000b70H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	mov	edx, DWORD PTR _meth_inst_list
	fld	QWORD PTR [edx+eax+304]
	fstp	QWORD PTR [ecx]

; 328  :            zero_seconds(pcount,stacktop);

	mov	eax, DWORD PTR _stacktop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcount$[ebp]
	push	ecx
	call	_zero_seconds
	add	esp, 8

; 329  :            break;

	jmp	$LN887@eval_secon
$LN761@eval_secon:

; 330  : 
; 331  :        case PUSHQVALUE_NODE:
; 332  :          { struct gen_quant *q = GEN_QUANT(node->op1.quant_id);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	imul	eax, 368				; 00000170H
	add	eax, DWORD PTR _gen_quant_list
	mov	DWORD PTR _q$89617[ebp], eax

; 333  :            if ((q->timestamp<graph_timestamp) || (q->timestamp<web_timestamp))

	mov	ecx, DWORD PTR _q$89617[ebp]
	mov	edx, DWORD PTR [ecx+364]
	cmp	edx, DWORD PTR _graph_timestamp
	jl	SHORT $LN759@eval_secon
	mov	eax, DWORD PTR _q$89617[ebp]
	mov	ecx, DWORD PTR [eax+364]
	cmp	ecx, DWORD PTR _web_timestamp
	jge	SHORT $LN760@eval_secon
$LN759@eval_secon:

; 334  :                       calc_quants(q->flags&(Q_INFO|Q_ENERGY|Q_FIXED));

	mov	edx, DWORD PTR _q$89617[ebp]
	mov	eax, DWORD PTR [edx+136]
	and	eax, 7
	push	eax
	call	_calc_quants
	fstp	ST(0)
	add	esp, 4
$LN760@eval_secon:

; 335  :            (++stacktop)->value = q->value;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx
	mov	edx, DWORD PTR _stacktop$[ebp]
	mov	eax, DWORD PTR _q$89617[ebp]
	fld	QWORD PTR [eax+152]
	fstp	QWORD PTR [edx]

; 336  :            zero_seconds(pcount,stacktop);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcount$[ebp]
	push	edx
	call	_zero_seconds
	add	esp, 8

; 337  :          }
; 338  :          break;

	jmp	$LN887@eval_secon
$LN758@eval_secon:

; 339  : 
; 340  :        case PUSHMVALUE_NODE:
; 341  :          { struct method_instance *mi = METH_INSTANCE(node->op1.meth_id);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_abs
	add	esp, 4
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list
	mov	DWORD PTR _mi$89621[ebp], eax

; 342  :            int i,j;
; 343  :            if ( mi->flags & Q_COMPOUND )

	mov	edx, DWORD PTR _mi$89621[ebp]
	mov	eax, DWORD PTR [edx+140]
	and	eax, 256				; 00000100H
	je	$LN757@eval_secon

; 344  :            { if ( compound_hess_flag == CH_GRADS )

	cmp	DWORD PTR _compound_hess_flag, 1
	jne	$LN731@eval_secon

; 345  :              { if ( quantity_function_sparse_flag )

	cmp	DWORD PTR _quantity_function_sparse_flag, 0
	je	$LN755@eval_secon

; 346  :                { /* saving up second partials of quantity wrt methods */
; 347  :                  (++stacktop)->value = mi->value;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx
	mov	edx, DWORD PTR _stacktop$[ebp]
	mov	eax, DWORD PTR _mi$89621[ebp]
	fld	QWORD PTR [eax+312]
	fstp	QWORD PTR [edx]

; 348  :                  FIRST = 0.0;

	mov	DWORD PTR _i$89622[ebp], 0
	jmp	SHORT $LN754@eval_secon
$LN753@eval_secon:
	mov	ecx, DWORD PTR _i$89622[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$89622[ebp], ecx
$LN754@eval_secon:
	mov	edx, DWORD PTR _i$89622[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN752@eval_secon
	mov	eax, DWORD PTR _i$89622[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fldz
	fstp	QWORD PTR [ecx+eax*8+8]
	jmp	SHORT $LN753@eval_secon
$LN752@eval_secon:

; 349  :                  stacktop->deriv[mi->quants_index[0]] = 1.0;

	mov	edx, DWORD PTR _mi$89621[ebp]
	mov	eax, DWORD PTR [edx+184]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld1
	fstp	QWORD PTR [ecx+eax*8+8]

; 350  :                  SECOND = 0.0;

	mov	DWORD PTR _i$89622[ebp], 0
	jmp	SHORT $LN751@eval_secon
$LN750@eval_secon:
	mov	edx, DWORD PTR _i$89622[ebp]
	add	edx, 1
	mov	DWORD PTR _i$89622[ebp], edx
$LN751@eval_secon:
	mov	eax, DWORD PTR _i$89622[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN749@eval_secon
	mov	DWORD PTR _j$89623[ebp], 0
	jmp	SHORT $LN748@eval_secon
$LN747@eval_secon:
	mov	ecx, DWORD PTR _j$89623[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$89623[ebp], ecx
$LN748@eval_secon:
	mov	edx, DWORD PTR _j$89623[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN746@eval_secon
	mov	eax, DWORD PTR _i$89622[ebp]
	imul	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	lea	edx, DWORD PTR [ecx+eax+104]
	mov	eax, DWORD PTR _j$89623[ebp]
	fldz
	fstp	QWORD PTR [edx+eax*8]
	jmp	SHORT $LN747@eval_secon
$LN746@eval_secon:
	jmp	SHORT $LN750@eval_secon
$LN749@eval_secon:

; 351  :                }
; 352  :                else /* old dense way */

	jmp	$LN731@eval_secon
$LN755@eval_secon:

; 353  :                { volgrad *vgptri = get_vertex_vgrad(comp_quant_vi);

	mov	ecx, DWORD PTR _comp_quant_vi
	push	ecx
	call	_get_vertex_vgrad
	add	esp, 4
	mov	DWORD PTR _vgptri$89637[ebp], eax

; 354  :                  volgrad *vgptrj = get_vertex_vgrad(comp_quant_vj);

	mov	edx, DWORD PTR _comp_quant_vj
	push	edx
	call	_get_vertex_vgrad
	add	esp, 4
	mov	DWORD PTR _vgptrj$89638[ebp], eax

; 355  :                  for ( ; vgptri ; vgptri = vgptri->chain ) 

	jmp	SHORT $LN744@eval_secon
$LN743@eval_secon:
	mov	eax, DWORD PTR _vgptri$89637[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _vgptri$89637[ebp], ecx
$LN744@eval_secon:
	cmp	DWORD PTR _vgptri$89637[ebp], 0
	je	SHORT $LN742@eval_secon

; 356  :                    if ( vgptri->qnum == mi->self_id ) break;

	mov	edx, DWORD PTR _vgptri$89637[ebp]
	mov	eax, DWORD PTR _mi$89621[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+132]
	jne	SHORT $LN741@eval_secon
	jmp	SHORT $LN742@eval_secon
$LN741@eval_secon:

; 357  :                  for ( ; vgptrj ; vgptrj = vgptrj->chain ) 

	jmp	SHORT $LN743@eval_secon
$LN742@eval_secon:
	jmp	SHORT $LN740@eval_secon
$LN739@eval_secon:
	mov	edx, DWORD PTR _vgptrj$89638[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _vgptrj$89638[ebp], eax
$LN740@eval_secon:
	cmp	DWORD PTR _vgptrj$89638[ebp], 0
	je	SHORT $LN738@eval_secon

; 358  :                    if ( vgptrj->qnum == mi->self_id ) break;

	mov	ecx, DWORD PTR _vgptrj$89638[ebp]
	mov	edx, DWORD PTR _mi$89621[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+132]
	jne	SHORT $LN737@eval_secon
	jmp	SHORT $LN738@eval_secon
$LN737@eval_secon:

; 359  :                  (++stacktop)->value = mi->value;

	jmp	SHORT $LN739@eval_secon
$LN738@eval_secon:
	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx
	mov	edx, DWORD PTR _stacktop$[ebp]
	mov	eax, DWORD PTR _mi$89621[ebp]
	fld	QWORD PTR [eax+312]
	fstp	QWORD PTR [edx]

; 360  :                  for ( i = 0 ; i < SDIM ; i++ )

	mov	DWORD PTR _i$89622[ebp], 0
	jmp	SHORT $LN736@eval_secon
$LN735@eval_secon:
	mov	ecx, DWORD PTR _i$89622[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$89622[ebp], ecx
$LN736@eval_secon:
	mov	edx, DWORD PTR _i$89622[ebp]
	cmp	edx, DWORD PTR _web+616
	jge	$LN734@eval_secon

; 361  :                    { stacktop->deriv[i] = (vgptri ? vgptri->grad[i] : 0.0);

	cmp	DWORD PTR _vgptri$89637[ebp], 0
	je	SHORT $LN940@eval_secon
	mov	eax, DWORD PTR _vgptri$89637[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _i$89622[ebp]
	fld	QWORD PTR [ecx+edx*8]
	fstp	QWORD PTR tv823[ebp]
	jmp	SHORT $LN941@eval_secon
$LN940@eval_secon:
	fldz
	fstp	QWORD PTR tv823[ebp]
$LN941@eval_secon:
	mov	eax, DWORD PTR _i$89622[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR tv823[ebp]
	fstp	QWORD PTR [ecx+eax*8+8]

; 362  :                      stacktop->deriv[i+SDIM] = (vgptrj ? vgptrj->grad[i] : 0.0);

	cmp	DWORD PTR _vgptrj$89638[ebp], 0
	je	SHORT $LN942@eval_secon
	mov	edx, DWORD PTR _vgptrj$89638[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _i$89622[ebp]
	fld	QWORD PTR [eax+ecx*8]
	fstp	QWORD PTR tv864[ebp]
	jmp	SHORT $LN943@eval_secon
$LN942@eval_secon:
	fldz
	fstp	QWORD PTR tv864[ebp]
$LN943@eval_secon:
	mov	edx, DWORD PTR _i$89622[ebp]
	add	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR tv864[ebp]
	fstp	QWORD PTR [eax+edx*8+8]

; 363  :                    }

	jmp	$LN735@eval_secon
$LN734@eval_secon:

; 364  :                  SECOND = 0.0;

	mov	DWORD PTR _i$89622[ebp], 0
	jmp	SHORT $LN733@eval_secon
$LN732@eval_secon:
	mov	ecx, DWORD PTR _i$89622[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$89622[ebp], ecx
$LN733@eval_secon:
	mov	edx, DWORD PTR _i$89622[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN731@eval_secon
	mov	DWORD PTR _j$89623[ebp], 0
	jmp	SHORT $LN730@eval_secon
$LN729@eval_secon:
	mov	eax, DWORD PTR _j$89623[ebp]
	add	eax, 1
	mov	DWORD PTR _j$89623[ebp], eax
$LN730@eval_secon:
	mov	ecx, DWORD PTR _j$89623[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN728@eval_secon
	mov	edx, DWORD PTR _i$89622[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _j$89623[ebp]
	fldz
	fstp	QWORD PTR [ecx+edx*8]
	jmp	SHORT $LN729@eval_secon
$LN728@eval_secon:
	jmp	SHORT $LN732@eval_secon
$LN731@eval_secon:

; 365  :                }
; 366  :              }
; 367  :              if ( compound_hess_flag == CH_HESS )

	cmp	DWORD PTR _compound_hess_flag, 2
	jne	$LN713@eval_secon

; 368  :              { (++stacktop)->value = mi->value;

	mov	eax, DWORD PTR _stacktop$[ebp]
	add	eax, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], eax
	mov	ecx, DWORD PTR _stacktop$[ebp]
	mov	edx, DWORD PTR _mi$89621[ebp]
	fld	QWORD PTR [edx+312]
	fstp	QWORD PTR [ecx]

; 369  :                FIRST = 0.0;

	mov	DWORD PTR _i$89622[ebp], 0
	jmp	SHORT $LN726@eval_secon
$LN725@eval_secon:
	mov	eax, DWORD PTR _i$89622[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89622[ebp], eax
$LN726@eval_secon:
	mov	ecx, DWORD PTR _i$89622[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN724@eval_secon
	mov	edx, DWORD PTR _i$89622[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fldz
	fstp	QWORD PTR [eax+edx*8+8]
	jmp	SHORT $LN725@eval_secon
$LN724@eval_secon:

; 370  :                if ( mi->stamp == comp_quant_stamp )

	fild	DWORD PTR _comp_quant_stamp
	mov	ecx, DWORD PTR _mi$89621[ebp]
	fld	QWORD PTR [ecx+2888]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$LN723@eval_secon

; 371  :                  for ( i = 0 ; i < pcount ; i++ )

	mov	DWORD PTR _i$89622[ebp], 0
	jmp	SHORT $LN722@eval_secon
$LN721@eval_secon:
	mov	edx, DWORD PTR _i$89622[ebp]
	add	edx, 1
	mov	DWORD PTR _i$89622[ebp], edx
$LN722@eval_secon:
	mov	eax, DWORD PTR _i$89622[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN720@eval_secon

; 372  :                    for ( j = 0 ; j < pcount ; j++ )

	mov	DWORD PTR _j$89623[ebp], 0
	jmp	SHORT $LN719@eval_secon
$LN718@eval_secon:
	mov	ecx, DWORD PTR _j$89623[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$89623[ebp], ecx
$LN719@eval_secon:
	mov	edx, DWORD PTR _j$89623[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN717@eval_secon

; 373  :                      stacktop->second[i][j] = 
; 374  :                        mi->hess[comp_quant_vertexi][comp_quant_vertexj][i][j];

	mov	eax, DWORD PTR _mi$89621[ebp]
	mov	ecx, DWORD PTR [eax+2900]
	mov	edx, DWORD PTR _comp_quant_vertexi
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _comp_quant_vertexj
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _i$89622[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _i$89622[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	edx, DWORD PTR [eax+edx+104]
	mov	eax, DWORD PTR _j$89623[ebp]
	mov	esi, DWORD PTR _j$89623[ebp]
	fld	QWORD PTR [ecx+esi*8]
	fstp	QWORD PTR [edx+eax*8]
	jmp	SHORT $LN718@eval_secon
$LN717@eval_secon:
	jmp	$LN721@eval_secon
$LN720@eval_secon:

; 375  :                else SECOND = 0.0;

	jmp	SHORT $LN713@eval_secon
$LN723@eval_secon:
	mov	DWORD PTR _i$89622[ebp], 0
	jmp	SHORT $LN715@eval_secon
$LN714@eval_secon:
	mov	ecx, DWORD PTR _i$89622[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$89622[ebp], ecx
$LN715@eval_secon:
	mov	edx, DWORD PTR _i$89622[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN713@eval_secon
	mov	DWORD PTR _j$89623[ebp], 0
	jmp	SHORT $LN712@eval_secon
$LN711@eval_secon:
	mov	eax, DWORD PTR _j$89623[ebp]
	add	eax, 1
	mov	DWORD PTR _j$89623[ebp], eax
$LN712@eval_secon:
	mov	ecx, DWORD PTR _j$89623[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN710@eval_secon
	mov	edx, DWORD PTR _i$89622[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _j$89623[ebp]
	fldz
	fstp	QWORD PTR [ecx+edx*8]
	jmp	SHORT $LN711@eval_secon
$LN710@eval_secon:
	jmp	SHORT $LN714@eval_secon
$LN713@eval_secon:

; 376  :              }
; 377  :            }
; 378  :            else 

	jmp	SHORT $LN709@eval_secon
$LN757@eval_secon:

; 379  :            { if ((mi->timestamp<graph_timestamp) || (mi->timestamp<web_timestamp))

	mov	eax, DWORD PTR _mi$89621[ebp]
	mov	ecx, DWORD PTR [eax+2924]
	cmp	ecx, DWORD PTR _graph_timestamp
	jl	SHORT $LN707@eval_secon
	mov	edx, DWORD PTR _mi$89621[ebp]
	mov	eax, DWORD PTR [edx+2924]
	cmp	eax, DWORD PTR _web_timestamp
	jge	SHORT $LN708@eval_secon
$LN707@eval_secon:

; 380  :                       calc_quants((Q_INFO|Q_ENERGY|Q_FIXED));

	push	7
	call	_calc_quants
	fstp	ST(0)
	add	esp, 4
$LN708@eval_secon:

; 381  :              (++stacktop)->value = mi->value;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx
	mov	edx, DWORD PTR _stacktop$[ebp]
	mov	eax, DWORD PTR _mi$89621[ebp]
	fld	QWORD PTR [eax+312]
	fstp	QWORD PTR [edx]

; 382  :              zero_seconds(pcount,stacktop);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcount$[ebp]
	push	edx
	call	_zero_seconds
	add	esp, 8
$LN709@eval_secon:

; 383  :            }
; 384  :          }
; 385  :          break;

	jmp	$LN887@eval_secon
$LN706@eval_secon:

; 386  : 
; 387  :        case PUSHQVOLCONST_NODE:
; 388  :            (++stacktop)->value = GEN_QUANT(node->op1.quant_id)->volconst;

	mov	eax, DWORD PTR _stacktop$[ebp]
	add	eax, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], eax
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	imul	edx, 368				; 00000170H
	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _gen_quant_list
	fld	QWORD PTR [ecx+edx+208]
	fstp	QWORD PTR [eax]

; 389  :            zero_seconds(pcount,stacktop);

	mov	edx, DWORD PTR _stacktop$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcount$[ebp]
	push	eax
	call	_zero_seconds
	add	esp, 8

; 390  :            break;

	jmp	$LN887@eval_secon
$LN705@eval_secon:

; 391  : 
; 392  : 
; 393  :        case PUSH_NAMED_QUANTITY_NODE:
; 394  :        case PUSH_METHOD_INSTANCE_NODE:
; 395  :              (++stacktop)->value = (REAL)node->op1.quant_id;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx
	mov	edx, DWORD PTR _node$[ebp]
	fild	DWORD PTR [edx+32]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]

; 396  :              zero_seconds(pcount,stacktop);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcount$[ebp]
	push	edx
	call	_zero_seconds
	add	esp, 8

; 397  :              break;

	jmp	$LN887@eval_secon
$LN704@eval_secon:

; 398  : 
; 399  : 
; 400  :        case GET_INTERNAL_NODE:
; 401  :              (++stacktop)->value = get_internal_variable(node->op1.name_id);

	mov	eax, DWORD PTR _stacktop$[ebp]
	add	eax, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], eax
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_get_internal_variable
	add	esp, 4
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]

; 402  :              zero_seconds(pcount,stacktop);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcount$[ebp]
	push	edx
	call	_zero_seconds
	add	esp, 8

; 403  :              break;

	jmp	$LN887@eval_secon
$LN703@eval_secon:

; 404  : 
; 405  :        case DYNAMIC_LOAD_FUNC_NODE:
; 406  :              (*node->op1.funcptr)(FUNC_SECOND,params,(struct dstack*)(++stacktop));

	mov	eax, DWORD PTR _stacktop$[ebp]
	add	eax, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], eax
	mov	ecx, DWORD PTR _stacktop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _params$[ebp]
	push	edx
	push	3
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 12					; 0000000cH

; 407  :              break;

	jmp	$LN887@eval_secon
$LN702@eval_secon:

; 408  : 
; 409  :        case USERFUNC_NODE:
; 410  :           { MAT2D(tmp,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	edx, DWORD PTR _tmpxJ$89685[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpqXvS$89684[ebp]
	push	eax
	call	_mat2d_setup
	add	esp, 16					; 00000010H
	mov	DWORD PTR _tmp$89686[ebp], eax

; 411  :             int i,j;
; 412  :             stacktop++;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx

; 413  :             stacktop->value =
; 414  :               (*userfunc_seconds[node->op1.userfunc])(params,stacktop->deriv,tmp);

	mov	edx, DWORD PTR _tmp$89686[ebp]
	push	edx
	mov	eax, DWORD PTR _stacktop$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _params$[ebp]
	push	ecx
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _userfunc_seconds[eax*4]
	call	ecx
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]

; 415  :             SECOND = tmp[i][j];

	mov	DWORD PTR _i$89688[ebp], 0
	jmp	SHORT $LN701@eval_secon
$LN700@eval_secon:
	mov	eax, DWORD PTR _i$89688[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89688[ebp], eax
$LN701@eval_secon:
	mov	ecx, DWORD PTR _i$89688[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN699@eval_secon
	mov	DWORD PTR _j$89689[ebp], 0
	jmp	SHORT $LN698@eval_secon
$LN697@eval_secon:
	mov	edx, DWORD PTR _j$89689[ebp]
	add	edx, 1
	mov	DWORD PTR _j$89689[ebp], edx
$LN698@eval_secon:
	mov	eax, DWORD PTR _j$89689[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN696@eval_secon
	mov	ecx, DWORD PTR _i$89688[ebp]
	mov	edx, DWORD PTR _tmp$89686[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _i$89688[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [edx+ecx+104]
	mov	edx, DWORD PTR _j$89689[ebp]
	mov	esi, DWORD PTR _j$89689[ebp]
	fld	QWORD PTR [eax+esi*8]
	fstp	QWORD PTR [ecx+edx*8]
	jmp	SHORT $LN697@eval_secon
$LN696@eval_secon:
	jmp	SHORT $LN700@eval_secon
$LN699@eval_secon:

; 416  :           }
; 417  :           break;

	jmp	$LN887@eval_secon
$LN695@eval_secon:

; 418  : 
; 419  :       case INDEXED_ELEMENT_NODE:
; 420  :          { element_id partid = *(element_id*)&((stacktop--)->value);

	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _partid$89697[ebp], ecx
	mov	edx, DWORD PTR _stacktop$[ebp]
	sub	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx

; 421  :            element_id id;
; 422  :            id = get_full_id(node->op1.eltype,partid);

	mov	eax, DWORD PTR _partid$89697[ebp]
	push	eax
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_get_full_id
	add	esp, 8
	mov	DWORD PTR _id$89699[ebp], eax

; 423  :            if ( !valid_id(id) ) 

	mov	eax, DWORD PTR _id$89699[ebp]
	and	eax, 268435456				; 10000000H
	shr	eax, 28					; 0000001cH
	test	eax, eax
	jne	$LN694@eval_secon

; 424  :            { sprintf(errmsg,"%s index %d is not valid.\n",
; 425  :                 typenames[node->op1.eltype],
; 426  :                 valid_id(partid) ? (int)(partid & OFFSETMASK)+1 : 0);

	mov	ecx, DWORD PTR _partid$89697[ebp]
	and	ecx, 268435456				; 10000000H
	shr	ecx, 28					; 0000001cH
	test	ecx, ecx
	je	SHORT $LN944@eval_secon
	mov	edx, DWORD PTR _partid$89697[ebp]
	and	edx, 134217727				; 07ffffffH
	add	edx, 1
	mov	DWORD PTR tv985[ebp], edx
	jmp	SHORT $LN945@eval_secon
$LN944@eval_secon:
	mov	DWORD PTR tv985[ebp], 0
$LN945@eval_secon:
	mov	eax, DWORD PTR tv985[ebp]
	push	eax
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _typenames[edx*4]
	push	eax
	push	OFFSET ??_C@_0BL@MACKFC@?$CFs?5index?5?$CFd?5is?5not?5valid?4?6?$AA@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 16					; 00000010H

; 427  :              sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 428  :                  file_names[node->file_no],node->line_no);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _file_names
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 429  :              kb_error(1291,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	1291					; 0000050bH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN694@eval_secon:

; 430  :            }
; 431  :            *(element_id*)get_localp(node->op2.localnum) = id;

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	and	edx, 16777215				; 00ffffffH
	imul	edx, 224				; 000000e0H
	mov	eax, DWORD PTR _localbase$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+edx+216]
	imul	edx, 1256				; 000004e8H
	mov	eax, DWORD PTR _id$89699[ebp]
	mov	DWORD PTR _localstack$[ebp+edx], eax

; 432  :            break;

	jmp	$LN887@eval_secon
$LN693@eval_secon:

; 433  :          }
; 434  : 
; 435  :               /* here are attributes for queries */
; 436  :       case COORD_NODE:
; 437  :       { REAL vect[MAXCOORD];
; 438  :         int i,j;
; 439  :         if ( node->op1.localnum ) 

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN692@eval_secon

; 440  :            id = *(element_id*)get_localp(node->op1.localnum);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax+216]
	imul	eax, 1256				; 000004e8H
	mov	ecx, DWORD PTR _localstack$[ebp+eax]
	mov	DWORD PTR _id$[ebp], ecx
	jmp	SHORT $LN691@eval_secon
$LN692@eval_secon:

; 441  :         else id = q_id;

	mov	edx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], edx
$LN691@eval_secon:

; 442  :         switch ( id_type(id) )

	mov	eax, DWORD PTR _id$[ebp]
	and	eax, -536870912				; e0000000H
	shr	eax, 29					; 0000001dH
	mov	DWORD PTR tv1024[ebp], eax
	cmp	DWORD PTR tv1024[ebp], 0
	je	SHORT $LN688@eval_secon
	cmp	DWORD PTR tv1024[ebp], 1
	je	SHORT $LN687@eval_secon
	cmp	DWORD PTR tv1024[ebp], 2
	je	$LN686@eval_secon
	jmp	$LN689@eval_secon
$LN688@eval_secon:

; 443  :         { case VERTEX:
; 444  :              (++stacktop)->value = get_coord(id)[node->op2.coordnum];

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+136]
	mov	ecx, DWORD PTR _id$[ebp]
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR _web+12
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _dymem
	add	edx, DWORD PTR _web+104
	add	ecx, DWORD PTR [edx+64]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+eax*8]
	fstp	QWORD PTR [edx]

; 445  :              break;

	jmp	SHORT $LN689@eval_secon
$LN687@eval_secon:

; 446  :           case EDGE:
; 447  :              get_edge_side(id,vect);

	lea	eax, DWORD PTR _vect$89707[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	call	_get_edge_side
	add	esp, 8

; 448  :              (++stacktop)->value = vect[node->op2.coordnum];

	mov	edx, DWORD PTR _stacktop$[ebp]
	add	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _vect$89707[ebp+ecx*8]
	fstp	QWORD PTR [edx]

; 449  :              break;

	jmp	SHORT $LN689@eval_secon
$LN686@eval_secon:

; 450  :           case FACET:
; 451  :              get_facet_normal(id,vect);

	lea	eax, DWORD PTR _vect$89707[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	call	_get_facet_normal
	add	esp, 8

; 452  :              (++stacktop)->value = vect[node->op2.coordnum];

	mov	edx, DWORD PTR _stacktop$[ebp]
	add	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _vect$89707[ebp+ecx*8]
	fstp	QWORD PTR [edx]
$LN689@eval_secon:

; 453  :              break;
; 454  :          }
; 455  :          FIRST = 0.0;

	mov	DWORD PTR _i$89708[ebp], 0
	jmp	SHORT $LN685@eval_secon
$LN684@eval_secon:
	mov	eax, DWORD PTR _i$89708[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89708[ebp], eax
$LN685@eval_secon:
	mov	ecx, DWORD PTR _i$89708[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN683@eval_secon
	mov	edx, DWORD PTR _i$89708[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fldz
	fstp	QWORD PTR [eax+edx*8+8]
	jmp	SHORT $LN684@eval_secon
$LN683@eval_secon:

; 456  :          SECOND = 0.0;

	mov	DWORD PTR _i$89708[ebp], 0
	jmp	SHORT $LN682@eval_secon
$LN681@eval_secon:
	mov	ecx, DWORD PTR _i$89708[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$89708[ebp], ecx
$LN682@eval_secon:
	mov	edx, DWORD PTR _i$89708[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN680@eval_secon
	mov	DWORD PTR _j$89709[ebp], 0
	jmp	SHORT $LN679@eval_secon
$LN678@eval_secon:
	mov	eax, DWORD PTR _j$89709[ebp]
	add	eax, 1
	mov	DWORD PTR _j$89709[ebp], eax
$LN679@eval_secon:
	mov	ecx, DWORD PTR _j$89709[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN677@eval_secon
	mov	edx, DWORD PTR _i$89708[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _j$89709[ebp]
	fldz
	fstp	QWORD PTR [ecx+edx*8]
	jmp	SHORT $LN678@eval_secon
$LN677@eval_secon:
	jmp	SHORT $LN681@eval_secon
$LN680@eval_secon:

; 457  :         }
; 458  :         break;

	jmp	$LN887@eval_secon
$LN676@eval_secon:

; 459  : 
; 460  :      case INDEXED_COORD_NODE:
; 461  :       { int k = (int)(stacktop->value) - 1;  /* 1 based indexing */

	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax]
	call	__ftol2_sse
	sub	eax, 1
	mov	DWORD PTR _k$89735[ebp], eax

; 462  :         int i,j;
; 463  :         REAL vect[MAXCOORD];
; 464  :         if ( k < 0 || k >= SDIM )

	js	SHORT $LN674@eval_secon
	mov	ecx, DWORD PTR _k$89735[ebp]
	cmp	ecx, DWORD PTR _web+616
	jl	SHORT $LN675@eval_secon
$LN674@eval_secon:

; 465  :         { sprintf(errmsg,
; 466  :          "Invalid index %d for x in %s; must be between 1 and %d, inclusive.\n",
; 467  :             k+1,ex->name,SDIM);

	mov	edx, DWORD PTR _web+616
	push	edx
	mov	eax, DWORD PTR _ex$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _k$89735[ebp]
	add	ecx, 1
	push	ecx
	push	OFFSET ??_C@_0EE@NBEFOKMP@Invalid?5index?5?$CFd?5for?5x?5in?5?$CFs?$DL?5mu@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 20					; 00000014H

; 468  :           sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 469  :                  file_names[node->file_no],node->line_no);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _file_names
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 470  :           kb_error(2045,errmsg,RECOVERABLE );

	push	1
	push	OFFSET _errmsg
	push	2045					; 000007fdH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN675@eval_secon:

; 471  :         }
; 472  :         if ( node->op1.localnum ) 

	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN673@eval_secon

; 473  :            id = *(element_id*)get_localp(node->op1.localnum);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, 16777215				; 00ffffffH
	imul	ecx, 224				; 000000e0H
	mov	edx, DWORD PTR _localbase$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+ecx+216]
	imul	ecx, 1256				; 000004e8H
	mov	edx, DWORD PTR _localstack$[ebp+ecx]
	mov	DWORD PTR _id$[ebp], edx
	jmp	SHORT $LN672@eval_secon
$LN673@eval_secon:

; 474  :         else id = q_id;

	mov	eax, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], eax
$LN672@eval_secon:

; 475  :         switch( id_type(id) )

	mov	ecx, DWORD PTR _id$[ebp]
	and	ecx, -536870912				; e0000000H
	shr	ecx, 29					; 0000001dH
	mov	DWORD PTR tv1100[ebp], ecx
	cmp	DWORD PTR tv1100[ebp], 0
	je	SHORT $LN669@eval_secon
	cmp	DWORD PTR tv1100[ebp], 1
	je	SHORT $LN668@eval_secon
	cmp	DWORD PTR tv1100[ebp], 2
	je	SHORT $LN667@eval_secon
	jmp	$LN666@eval_secon
$LN669@eval_secon:

; 476  :          { case VERTEX:
; 477  :              stacktop->value = get_coord(id)[k];

	mov	edx, DWORD PTR _id$[ebp]
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR _web+12
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _dymem
	add	edx, DWORD PTR _web+104
	add	ecx, DWORD PTR [edx+64]
	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	edx, DWORD PTR _k$89735[ebp]
	fld	QWORD PTR [ecx+edx*8]
	fstp	QWORD PTR [eax]

; 478  :              break;

	jmp	$LN670@eval_secon
$LN668@eval_secon:

; 479  :           case EDGE:
; 480  :              get_edge_side(id,vect);

	lea	eax, DWORD PTR _vect$89739[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	call	_get_edge_side
	add	esp, 8

; 481  :              stacktop->value = vect[k];

	mov	edx, DWORD PTR _stacktop$[ebp]
	mov	eax, DWORD PTR _k$89735[ebp]
	fld	QWORD PTR _vect$89739[ebp+eax*8]
	fstp	QWORD PTR [edx]

; 482  :              break;

	jmp	$LN670@eval_secon
$LN667@eval_secon:

; 483  :           case FACET:
; 484  :              get_facet_normal(id,vect);

	lea	ecx, DWORD PTR _vect$89739[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	call	_get_facet_normal
	add	esp, 8

; 485  :              stacktop->value = vect[k];

	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _k$89735[ebp]
	fld	QWORD PTR _vect$89739[ebp+ecx*8]
	fstp	QWORD PTR [eax]

; 486  :              break;

	jmp	SHORT $LN670@eval_secon
$LN666@eval_secon:

; 487  :           default: 
; 488  :              sprintf(errmsg,"Can't have indexed x on %s, in %s.\n",
; 489  :                typenames[id_type(id)], ex->name);

	mov	edx, DWORD PTR _ex$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	and	eax, -536870912				; e0000000H
	shr	eax, 29					; 0000001dH
	mov	ecx, DWORD PTR _typenames[eax*4]
	push	ecx
	push	OFFSET ??_C@_0CE@JGNMBEAC@Can?8t?5have?5indexed?5x?5on?5?$CFs?0?5in?5?$CF@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 16					; 00000010H

; 490  :              sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 491  :                  file_names[node->file_no],node->line_no);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _file_names
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 492  :              kb_error(2074,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2074					; 0000081aH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN670@eval_secon:

; 493  :          }
; 494  :          FIRST = 0.0;

	mov	DWORD PTR _i$89737[ebp], 0
	jmp	SHORT $LN665@eval_secon
$LN664@eval_secon:
	mov	edx, DWORD PTR _i$89737[ebp]
	add	edx, 1
	mov	DWORD PTR _i$89737[ebp], edx
$LN665@eval_secon:
	mov	eax, DWORD PTR _i$89737[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN663@eval_secon
	mov	ecx, DWORD PTR _i$89737[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fldz
	fstp	QWORD PTR [edx+ecx*8+8]
	jmp	SHORT $LN664@eval_secon
$LN663@eval_secon:

; 495  :          SECOND = 0.0;

	mov	DWORD PTR _i$89737[ebp], 0
	jmp	SHORT $LN662@eval_secon
$LN661@eval_secon:
	mov	eax, DWORD PTR _i$89737[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89737[ebp], eax
$LN662@eval_secon:
	mov	ecx, DWORD PTR _i$89737[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN660@eval_secon
	mov	DWORD PTR _j$89738[ebp], 0
	jmp	SHORT $LN659@eval_secon
$LN658@eval_secon:
	mov	edx, DWORD PTR _j$89738[ebp]
	add	edx, 1
	mov	DWORD PTR _j$89738[ebp], edx
$LN659@eval_secon:
	mov	eax, DWORD PTR _j$89738[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN657@eval_secon
	mov	ecx, DWORD PTR _i$89737[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [edx+ecx+104]
	mov	ecx, DWORD PTR _j$89738[ebp]
	fldz
	fstp	QWORD PTR [eax+ecx*8]
	jmp	SHORT $LN658@eval_secon
$LN657@eval_secon:
	jmp	SHORT $LN661@eval_secon
$LN660@eval_secon:

; 496  :        }
; 497  :        break;

	jmp	$LN887@eval_secon
$LN656@eval_secon:

; 498  : 
; 499  :        case QUALIFIED_ATTRIBUTE_NODE:
; 500  :            break; /* just a no-op in execution */

	jmp	$LN887@eval_secon
$LN655@eval_secon:

; 501  : 
; 502  :        case GT_NODE:
; 503  :              stacktop--;

	mov	edx, DWORD PTR _stacktop$[ebp]
	sub	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx

; 504  :              stacktop[0].value = (REAL)(stacktop[0].value > stacktop[1].value);

	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+1256]
	fcomp	QWORD PTR [eax]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN946@eval_secon
	mov	DWORD PTR tv1161[ebp], 1
	jmp	SHORT $LN947@eval_secon
$LN946@eval_secon:
	mov	DWORD PTR tv1161[ebp], 0
$LN947@eval_secon:
	fild	DWORD PTR tv1161[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]

; 505  :              zero_seconds(pcount,stacktop);

	mov	eax, DWORD PTR _stacktop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcount$[ebp]
	push	ecx
	call	_zero_seconds
	add	esp, 8

; 506  :              break;

	jmp	$LN887@eval_secon
$LN654@eval_secon:

; 507  : 
; 508  :        case LT_NODE:
; 509  :              stacktop--;

	mov	edx, DWORD PTR _stacktop$[ebp]
	sub	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx

; 510  :              stacktop[0].value = (REAL)(stacktop[0].value < stacktop[1].value);

	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+1256]
	fcomp	QWORD PTR [eax]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN948@eval_secon
	mov	DWORD PTR tv1169[ebp], 1
	jmp	SHORT $LN949@eval_secon
$LN948@eval_secon:
	mov	DWORD PTR tv1169[ebp], 0
$LN949@eval_secon:
	fild	DWORD PTR tv1169[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]

; 511  :              zero_seconds(pcount,stacktop);

	mov	eax, DWORD PTR _stacktop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcount$[ebp]
	push	ecx
	call	_zero_seconds
	add	esp, 8

; 512  :              break;

	jmp	$LN887@eval_secon
$LN653@eval_secon:

; 513  : 
; 514  :        case LE_NODE:
; 515  :              stacktop--;

	mov	edx, DWORD PTR _stacktop$[ebp]
	sub	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx

; 516  :              stacktop[0].value = (REAL)(stacktop[0].value <= stacktop[1].value);

	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+1256]
	fcomp	QWORD PTR [eax]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN950@eval_secon
	mov	DWORD PTR tv1177[ebp], 1
	jmp	SHORT $LN951@eval_secon
$LN950@eval_secon:
	mov	DWORD PTR tv1177[ebp], 0
$LN951@eval_secon:
	fild	DWORD PTR tv1177[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]

; 517  :              zero_seconds(pcount,stacktop);

	mov	eax, DWORD PTR _stacktop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcount$[ebp]
	push	ecx
	call	_zero_seconds
	add	esp, 8

; 518  :              break;

	jmp	$LN887@eval_secon
$LN652@eval_secon:

; 519  : 
; 520  :        case GE_NODE:
; 521  :              stacktop--;

	mov	edx, DWORD PTR _stacktop$[ebp]
	sub	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx

; 522  :              stacktop[0].value = (REAL)(stacktop[0].value >= stacktop[1].value);

	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+1256]
	fcomp	QWORD PTR [eax]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN952@eval_secon
	mov	DWORD PTR tv1185[ebp], 1
	jmp	SHORT $LN953@eval_secon
$LN952@eval_secon:
	mov	DWORD PTR tv1185[ebp], 0
$LN953@eval_secon:
	fild	DWORD PTR tv1185[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]

; 523  :              zero_seconds(pcount,stacktop);

	mov	eax, DWORD PTR _stacktop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcount$[ebp]
	push	ecx
	call	_zero_seconds
	add	esp, 8

; 524  :              break;

	jmp	$LN887@eval_secon
$LN651@eval_secon:

; 525  : 
; 526  :        case NE_NODE:
; 527  :              stacktop--;

	mov	edx, DWORD PTR _stacktop$[ebp]
	sub	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx

; 528  :              stacktop[0].value = (REAL)(stacktop[0].value != stacktop[1].value);

	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax]
	fld	QWORD PTR [ecx+1256]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN954@eval_secon
	mov	DWORD PTR tv1193[ebp], 1
	jmp	SHORT $LN955@eval_secon
$LN954@eval_secon:
	mov	DWORD PTR tv1193[ebp], 0
$LN955@eval_secon:
	fild	DWORD PTR tv1193[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]

; 529  :              zero_seconds(pcount,stacktop);

	mov	eax, DWORD PTR _stacktop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcount$[ebp]
	push	ecx
	call	_zero_seconds
	add	esp, 8

; 530  :              break;

	jmp	$LN887@eval_secon
$LN650@eval_secon:

; 531  : 
; 532  :        case EQ_NODE:
; 533  :              stacktop--;

	mov	edx, DWORD PTR _stacktop$[ebp]
	sub	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx

; 534  :              stacktop[0].value = (REAL)(stacktop[0].value == stacktop[1].value);

	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax]
	fld	QWORD PTR [ecx+1256]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN956@eval_secon
	mov	DWORD PTR tv1201[ebp], 1
	jmp	SHORT $LN957@eval_secon
$LN956@eval_secon:
	mov	DWORD PTR tv1201[ebp], 0
$LN957@eval_secon:
	fild	DWORD PTR tv1201[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]

; 535  :              zero_seconds(pcount,stacktop);

	mov	eax, DWORD PTR _stacktop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcount$[ebp]
	push	ecx
	call	_zero_seconds
	add	esp, 8

; 536  :              break;

	jmp	$LN887@eval_secon
$LN649@eval_secon:

; 537  : 
; 538  :        case AND_NODE: /* short-circuit */
; 539  :           if ( stacktop->value == 0.0 )

	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [edx]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN648@eval_secon

; 540  :           { (++stacktop)->value = 0.0;

	mov	eax, DWORD PTR _stacktop$[ebp]
	add	eax, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], eax
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fldz
	fstp	QWORD PTR [ecx]

; 541  :             zero_seconds(pcount,stacktop);

	mov	edx, DWORD PTR _stacktop$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcount$[ebp]
	push	eax
	call	_zero_seconds
	add	esp, 8

; 542  :             node += node->op1.skipsize;

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	imul	edx, 168				; 000000a8H
	add	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR _node$[ebp], edx
$LN648@eval_secon:

; 543  :           } 
; 544  :           break;

	jmp	$LN887@eval_secon
$LN647@eval_secon:

; 545  : 
; 546  :        case CONJUNCTION_END_NODE: 
; 547  :          /* short-circuiting results in second arg being answer */
; 548  :          stacktop--;

	mov	eax, DWORD PTR _stacktop$[ebp]
	sub	eax, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], eax

; 549  :          *stacktop = stacktop[1];

	mov	esi, DWORD PTR _stacktop$[ebp]
	add	esi, 1256				; 000004e8H
	mov	ecx, 314				; 0000013aH
	mov	edi, DWORD PTR _stacktop$[ebp]
	rep movsd

; 550  :          if ( stacktop->value != 0.0 ) 

	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN646@eval_secon

; 551  :              stacktop->value = 1.0;

	mov	edx, DWORD PTR _stacktop$[ebp]
	fld1
	fstp	QWORD PTR [edx]
$LN646@eval_secon:

; 552  :          break;

	jmp	$LN887@eval_secon
$LN645@eval_secon:

; 553  : 
; 554  :        case OR_NODE:  /* short-circuit */
; 555  :          if ( stacktop->value != 0.0 )

	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN644@eval_secon

; 556  :          { (++stacktop)->value = 1.0;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld1
	fstp	QWORD PTR [edx]

; 557  :            zero_seconds(pcount,stacktop);

	mov	eax, DWORD PTR _stacktop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcount$[ebp]
	push	ecx
	call	_zero_seconds
	add	esp, 8

; 558  :            node += node->op1.skipsize;

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	imul	eax, 168				; 000000a8H
	add	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR _node$[ebp], eax
$LN644@eval_secon:

; 559  :          } 
; 560  :          break;

	jmp	$LN887@eval_secon
$LN643@eval_secon:

; 561  : 
; 562  :        case NOT_NODE:
; 563  :              stacktop[0].value = (REAL)(!stacktop[0].value);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN958@eval_secon
	mov	DWORD PTR tv1224[ebp], 1
	jmp	SHORT $LN959@eval_secon
$LN958@eval_secon:
	mov	DWORD PTR tv1224[ebp], 0
$LN959@eval_secon:
	fild	DWORD PTR tv1224[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]

; 564  :              zero_seconds(pcount,stacktop);

	mov	eax, DWORD PTR _stacktop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcount$[ebp]
	push	ecx
	call	_zero_seconds
	add	esp, 8

; 565  :              break;

	jmp	$LN887@eval_secon
$LN642@eval_secon:

; 566  : 
; 567  :        case PLUS_NODE:
; 568  :            { int i,j;
; 569  :              stacktop--;

	mov	edx, DWORD PTR _stacktop$[ebp]
	sub	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx

; 570  :              stacktop[0].value += stacktop[1].value;

	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax]
	fadd	QWORD PTR [ecx+1256]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]

; 571  :              FIRST += stacktop[1].deriv[i];

	mov	DWORD PTR _i$89792[ebp], 0
	jmp	SHORT $LN641@eval_secon
$LN640@eval_secon:
	mov	eax, DWORD PTR _i$89792[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89792[ebp], eax
$LN641@eval_secon:
	mov	ecx, DWORD PTR _i$89792[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN639@eval_secon
	mov	edx, DWORD PTR _i$89792[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _i$89792[ebp]
	mov	esi, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax+edx*8+8]
	fadd	QWORD PTR [esi+ecx*8+1264]
	mov	edx, DWORD PTR _i$89792[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax+edx*8+8]
	jmp	SHORT $LN640@eval_secon
$LN639@eval_secon:

; 572  :              SECOND += stacktop[1].second[i][j];

	mov	DWORD PTR _i$89792[ebp], 0
	jmp	SHORT $LN638@eval_secon
$LN637@eval_secon:
	mov	ecx, DWORD PTR _i$89792[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$89792[ebp], ecx
$LN638@eval_secon:
	mov	edx, DWORD PTR _i$89792[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN636@eval_secon
	mov	DWORD PTR _j$89793[ebp], 0
	jmp	SHORT $LN635@eval_secon
$LN634@eval_secon:
	mov	eax, DWORD PTR _j$89793[ebp]
	add	eax, 1
	mov	DWORD PTR _j$89793[ebp], eax
$LN635@eval_secon:
	mov	ecx, DWORD PTR _j$89793[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN633@eval_secon
	mov	edx, DWORD PTR _i$89792[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _i$89792[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	edx, DWORD PTR [eax+edx+1360]
	mov	eax, DWORD PTR _j$89793[ebp]
	mov	esi, DWORD PTR _j$89793[ebp]
	fld	QWORD PTR [ecx+eax*8]
	fadd	QWORD PTR [edx+esi*8]
	mov	ecx, DWORD PTR _i$89792[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [edx+ecx+104]
	mov	ecx, DWORD PTR _j$89793[ebp]
	fstp	QWORD PTR [eax+ecx*8]
	jmp	SHORT $LN634@eval_secon
$LN633@eval_secon:
	jmp	$LN637@eval_secon
$LN636@eval_secon:

; 573  :              break;

	jmp	$LN887@eval_secon
$LN632@eval_secon:

; 574  :            }
; 575  :           
; 576  :        case MINUS_NODE:
; 577  :        case EQUATE_NODE:
; 578  :            { int i,j;
; 579  :              stacktop--;

	mov	edx, DWORD PTR _stacktop$[ebp]
	sub	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx

; 580  :              stacktop[0].value -= stacktop[1].value;

	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax]
	fsub	QWORD PTR [ecx+1256]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]

; 581  :              FIRST -= stacktop[1].deriv[i];

	mov	DWORD PTR _i$89804[ebp], 0
	jmp	SHORT $LN631@eval_secon
$LN630@eval_secon:
	mov	eax, DWORD PTR _i$89804[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89804[ebp], eax
$LN631@eval_secon:
	mov	ecx, DWORD PTR _i$89804[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN629@eval_secon
	mov	edx, DWORD PTR _i$89804[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _i$89804[ebp]
	mov	esi, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax+edx*8+8]
	fsub	QWORD PTR [esi+ecx*8+1264]
	mov	edx, DWORD PTR _i$89804[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax+edx*8+8]
	jmp	SHORT $LN630@eval_secon
$LN629@eval_secon:

; 582  :              SECOND -= stacktop[1].second[i][j];

	mov	DWORD PTR _i$89804[ebp], 0
	jmp	SHORT $LN628@eval_secon
$LN627@eval_secon:
	mov	ecx, DWORD PTR _i$89804[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$89804[ebp], ecx
$LN628@eval_secon:
	mov	edx, DWORD PTR _i$89804[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN626@eval_secon
	mov	DWORD PTR _j$89805[ebp], 0
	jmp	SHORT $LN625@eval_secon
$LN624@eval_secon:
	mov	eax, DWORD PTR _j$89805[ebp]
	add	eax, 1
	mov	DWORD PTR _j$89805[ebp], eax
$LN625@eval_secon:
	mov	ecx, DWORD PTR _j$89805[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN623@eval_secon
	mov	edx, DWORD PTR _i$89804[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _i$89804[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	edx, DWORD PTR [eax+edx+1360]
	mov	eax, DWORD PTR _j$89805[ebp]
	mov	esi, DWORD PTR _j$89805[ebp]
	fld	QWORD PTR [ecx+eax*8]
	fsub	QWORD PTR [edx+esi*8]
	mov	ecx, DWORD PTR _i$89804[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [edx+ecx+104]
	mov	ecx, DWORD PTR _j$89805[ebp]
	fstp	QWORD PTR [eax+ecx*8]
	jmp	SHORT $LN624@eval_secon
$LN623@eval_secon:
	jmp	$LN627@eval_secon
$LN626@eval_secon:

; 583  :              break;

	jmp	$LN887@eval_secon
$LN622@eval_secon:

; 584  :            }
; 585  : 
; 586  :        case TIMES_NODE:
; 587  :            { int i,j;
; 588  :              stacktop--;

	mov	edx, DWORD PTR _stacktop$[ebp]
	sub	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx

; 589  :              SECOND = stacktop[0].second[i][j]*stacktop[1].value

	mov	DWORD PTR _i$89816[ebp], 0
	jmp	SHORT $LN621@eval_secon
$LN620@eval_secon:
	mov	eax, DWORD PTR _i$89816[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89816[ebp], eax
$LN621@eval_secon:
	mov	ecx, DWORD PTR _i$89816[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	$LN619@eval_secon
	mov	DWORD PTR _j$89817[ebp], 0
	jmp	SHORT $LN618@eval_secon
$LN617@eval_secon:
	mov	edx, DWORD PTR _j$89817[ebp]
	add	edx, 1
	mov	DWORD PTR _j$89817[ebp], edx
$LN618@eval_secon:
	mov	eax, DWORD PTR _j$89817[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	$LN616@eval_secon

; 590  :                       + stacktop[0].deriv[i]*stacktop[1].deriv[j]
; 591  :                       + stacktop[0].deriv[j]*stacktop[1].deriv[i]
; 592  :                       + stacktop[0].value*stacktop[1].second[i][j];

	mov	ecx, DWORD PTR _i$89816[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [edx+ecx+104]
	mov	ecx, DWORD PTR _j$89817[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax+ecx*8]
	fmul	QWORD PTR [edx+1256]
	mov	eax, DWORD PTR _i$89816[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	mov	edx, DWORD PTR _j$89817[ebp]
	mov	esi, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+eax*8+8]
	fmul	QWORD PTR [esi+edx*8+1264]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _j$89817[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	mov	edx, DWORD PTR _i$89816[ebp]
	mov	esi, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+eax*8+8]
	fmul	QWORD PTR [esi+edx*8+1264]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _i$89816[ebp]
	imul	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1360]
	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _j$89817[ebp]
	fld	QWORD PTR [eax]
	fmul	QWORD PTR [edx+ecx*8]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _i$89816[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _j$89817[ebp]
	fstp	QWORD PTR [ecx+edx*8]
	jmp	$LN617@eval_secon
$LN616@eval_secon:
	jmp	$LN620@eval_secon
$LN619@eval_secon:

; 593  :              FIRST = stacktop[1].value*stacktop[0].deriv[i]

	mov	DWORD PTR _i$89816[ebp], 0
	jmp	SHORT $LN615@eval_secon
$LN614@eval_secon:
	mov	eax, DWORD PTR _i$89816[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89816[ebp], eax
$LN615@eval_secon:
	mov	ecx, DWORD PTR _i$89816[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN613@eval_secon

; 594  :                           + stacktop[0].value*stacktop[1].deriv[i];

	mov	edx, DWORD PTR _stacktop$[ebp]
	mov	eax, DWORD PTR _i$89816[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [edx+1256]
	fmul	QWORD PTR [ecx+eax*8+8]
	mov	edx, DWORD PTR _stacktop$[ebp]
	mov	eax, DWORD PTR _i$89816[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [edx]
	fmul	QWORD PTR [ecx+eax*8+1264]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _i$89816[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax+edx*8+8]
	jmp	SHORT $LN614@eval_secon
$LN613@eval_secon:

; 595  :              stacktop[0].value *= stacktop[1].value;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx]
	fmul	QWORD PTR [edx+1256]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]

; 596  :              break;

	jmp	$LN887@eval_secon
$LN612@eval_secon:

; 597  :            }
; 598  : 
; 599  :        case DIVIDE_NODE:
; 600  :            { int i,j;
; 601  :              stacktop--;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	sub	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx

; 602  :              if ( stacktop[1].value == 0.0 )

	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [edx+1256]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN611@eval_secon

; 603  :                { sprintf(errmsg,"Division by zero.\n");

	push	OFFSET ??_C@_0BD@KKBNAHFA@Division?5by?5zero?4?6?$AA@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 8

; 604  :                  sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 605  :                     file_names[node->file_no],node->line_no);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _file_names
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 606  :                  kb_error(1011,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	1011					; 000003f3H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN611@eval_secon:

; 607  :                }
; 608  : 
; 609  :              SECOND = (stacktop[0].second[i][j]*stacktop[1].value

	mov	DWORD PTR _i$89828[ebp], 0
	jmp	SHORT $LN610@eval_secon
$LN609@eval_secon:
	mov	eax, DWORD PTR _i$89828[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89828[ebp], eax
$LN610@eval_secon:
	mov	ecx, DWORD PTR _i$89828[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	$LN608@eval_secon
	mov	DWORD PTR _j$89829[ebp], 0
	jmp	SHORT $LN607@eval_secon
$LN606@eval_secon:
	mov	edx, DWORD PTR _j$89829[ebp]
	add	edx, 1
	mov	DWORD PTR _j$89829[ebp], edx
$LN607@eval_secon:
	mov	eax, DWORD PTR _j$89829[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	$LN605@eval_secon

; 610  :                       - stacktop[0].deriv[i]*stacktop[1].deriv[j]
; 611  :                       - stacktop[0].deriv[j]*stacktop[1].deriv[i]
; 612  :                       - stacktop[0].value*stacktop[1].second[i][j]
; 613  :                       + 2*stacktop[0].value*stacktop[1].deriv[i]
; 614  :                          *stacktop[1].deriv[j]/stacktop[1].value)
; 615  :                           /stacktop[1].value/stacktop[1].value;

	mov	ecx, DWORD PTR _i$89828[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [edx+ecx+104]
	mov	ecx, DWORD PTR _j$89829[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax+ecx*8]
	fmul	QWORD PTR [edx+1256]
	mov	eax, DWORD PTR _i$89828[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	mov	edx, DWORD PTR _j$89829[ebp]
	mov	esi, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+eax*8+8]
	fmul	QWORD PTR [esi+edx*8+1264]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _j$89829[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	mov	edx, DWORD PTR _i$89828[ebp]
	mov	esi, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+eax*8+8]
	fmul	QWORD PTR [esi+edx*8+1264]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _i$89828[ebp]
	imul	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1360]
	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _j$89829[ebp]
	fld	QWORD PTR [eax]
	fmul	QWORD PTR [edx+ecx*8]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR __real@4000000000000000
	fmul	QWORD PTR [edx]
	mov	eax, DWORD PTR _i$89828[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [ecx+eax*8+1264]
	mov	edx, DWORD PTR _j$89829[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [eax+edx*8+1264]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fdiv	QWORD PTR [ecx+1256]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _stacktop$[ebp]
	fdiv	QWORD PTR [edx+1256]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fdiv	QWORD PTR [eax+1256]
	mov	ecx, DWORD PTR _i$89828[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [edx+ecx+104]
	mov	ecx, DWORD PTR _j$89829[ebp]
	fstp	QWORD PTR [eax+ecx*8]
	jmp	$LN606@eval_secon
$LN605@eval_secon:
	jmp	$LN609@eval_secon
$LN608@eval_secon:

; 616  :              FIRST = (stacktop[1].value*stacktop[0].deriv[i]

	mov	DWORD PTR _i$89828[ebp], 0
	jmp	SHORT $LN604@eval_secon
$LN603@eval_secon:
	mov	edx, DWORD PTR _i$89828[ebp]
	add	edx, 1
	mov	DWORD PTR _i$89828[ebp], edx
$LN604@eval_secon:
	mov	eax, DWORD PTR _i$89828[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN602@eval_secon

; 617  :                           - stacktop[0].value*stacktop[1].deriv[i])
; 618  :                           /stacktop[1].value/stacktop[1].value;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	mov	edx, DWORD PTR _i$89828[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+1256]
	fmul	QWORD PTR [eax+edx*8+8]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	mov	edx, DWORD PTR _i$89828[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx]
	fmul	QWORD PTR [eax+edx*8+1264]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fdiv	QWORD PTR [ecx+1256]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fdiv	QWORD PTR [edx+1256]
	mov	eax, DWORD PTR _i$89828[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx+eax*8+8]
	jmp	SHORT $LN603@eval_secon
$LN602@eval_secon:

; 619  :              stacktop[0].value /= stacktop[1].value;

	mov	edx, DWORD PTR _stacktop$[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [edx]
	fdiv	QWORD PTR [eax+1256]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx]

; 620  :              break;

	jmp	$LN887@eval_secon
$LN601@eval_secon:

; 621  :            }
; 622  : 
; 623  :        case REALMOD_NODE:
; 624  :            { int i,j;
; 625  :              stacktop--;

	mov	edx, DWORD PTR _stacktop$[ebp]
	sub	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx

; 626  :              if ( stacktop[1].value == 0.0 )

	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax+1256]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN600@eval_secon

; 627  :                { sprintf(errmsg,"Modulus base 0.\n");

	push	OFFSET ??_C@_0BB@HKELHEEP@Modulus?5base?50?4?6?$AA@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 8

; 628  :                  sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 629  :                     file_names[node->file_no],node->line_no);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _file_names
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 630  :                  kb_error(1012,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	1012					; 000003f4H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN600@eval_secon:

; 631  :                }
; 632  :              y = floor(stacktop[0].value/stacktop[1].value); /* integer part */

	mov	ecx, DWORD PTR _stacktop$[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx]
	fdiv	QWORD PTR [edx+1256]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_floor
	add	esp, 8
	fstp	QWORD PTR _y$[ebp]

; 633  :              FIRST = stacktop[0].deriv[i] - y*stacktop[1].deriv[i];

	mov	DWORD PTR _i$89842[ebp], 0
	jmp	SHORT $LN599@eval_secon
$LN598@eval_secon:
	mov	eax, DWORD PTR _i$89842[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89842[ebp], eax
$LN599@eval_secon:
	mov	ecx, DWORD PTR _i$89842[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN597@eval_secon
	mov	edx, DWORD PTR _i$89842[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _y$[ebp]
	fmul	QWORD PTR [eax+edx*8+1264]
	mov	ecx, DWORD PTR _i$89842[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fsubr	QWORD PTR [edx+ecx*8+8]
	mov	eax, DWORD PTR _i$89842[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx+eax*8+8]
	jmp	SHORT $LN598@eval_secon
$LN597@eval_secon:

; 634  :              SECOND = stacktop[0].second[i][j] - y*stacktop[1].second[i][j];

	mov	DWORD PTR _i$89842[ebp], 0
	jmp	SHORT $LN596@eval_secon
$LN595@eval_secon:
	mov	edx, DWORD PTR _i$89842[ebp]
	add	edx, 1
	mov	DWORD PTR _i$89842[ebp], edx
$LN596@eval_secon:
	mov	eax, DWORD PTR _i$89842[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN594@eval_secon
	mov	DWORD PTR _j$89843[ebp], 0
	jmp	SHORT $LN593@eval_secon
$LN592@eval_secon:
	mov	ecx, DWORD PTR _j$89843[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$89843[ebp], ecx
$LN593@eval_secon:
	mov	edx, DWORD PTR _j$89843[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN591@eval_secon
	mov	eax, DWORD PTR _i$89842[ebp]
	imul	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	lea	edx, DWORD PTR [ecx+eax+104]
	mov	eax, DWORD PTR _i$89842[ebp]
	imul	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [ecx+eax+1360]
	mov	ecx, DWORD PTR _j$89843[ebp]
	fld	QWORD PTR _y$[ebp]
	fmul	QWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR _j$89843[ebp]
	fsubr	QWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _i$89842[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [edx+ecx+104]
	mov	ecx, DWORD PTR _j$89843[ebp]
	fstp	QWORD PTR [eax+ecx*8]
	jmp	SHORT $LN592@eval_secon
$LN591@eval_secon:
	jmp	$LN595@eval_secon
$LN594@eval_secon:

; 635  :              stacktop[0].value -= y*stacktop[1].value;

	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _y$[ebp]
	fmul	QWORD PTR [edx+1256]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fsubr	QWORD PTR [eax]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx]

; 636  :              break;

	jmp	$LN887@eval_secon
$LN590@eval_secon:

; 637  :            }
; 638  : 
; 639  :        case IMOD_NODE:
; 640  :              stacktop--;

	mov	edx, DWORD PTR _stacktop$[ebp]
	sub	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx

; 641  :              if ( stacktop[1].value == 0.0 ) 

	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax+1256]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN589@eval_secon

; 642  :                { sprintf(errmsg,"Modulus base 0.\n");

	push	OFFSET ??_C@_0BB@HKELHEEP@Modulus?5base?50?4?6?$AA@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 8

; 643  :                  sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 644  :                     file_names[node->file_no],node->line_no);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _file_names
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 645  :                  kb_error(1013,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	1013					; 000003f5H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN589@eval_secon:

; 646  :                }
; 647  :              stacktop[0].value = floor(stacktop[0].value) - 
; 648  :                  floor(floor(stacktop[0].value)/floor(stacktop[1].value))
; 649  :                                                    *floor(stacktop[1].value);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	sub	esp, 8
	fld	QWORD PTR [ecx]
	fstp	QWORD PTR [esp]
	call	_floor
	add	esp, 8
	mov	edx, DWORD PTR _stacktop$[ebp]
	sub	esp, 8
	fld	QWORD PTR [edx]
	fstp	QWORD PTR [esp]
	fstp	QWORD PTR tv9025[ebp]
	call	_floor
	add	esp, 8
	mov	eax, DWORD PTR _stacktop$[ebp]
	sub	esp, 8
	fld	QWORD PTR [eax+1256]
	fstp	QWORD PTR [esp]
	fstp	QWORD PTR tv9027[ebp]
	call	_floor
	add	esp, 8
	fdivr	QWORD PTR tv9027[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_floor
	add	esp, 8
	mov	ecx, DWORD PTR _stacktop$[ebp]
	sub	esp, 8
	fld	QWORD PTR [ecx+1256]
	fstp	QWORD PTR [esp]
	fstp	QWORD PTR tv9029[ebp]
	call	_floor
	add	esp, 8
	fmul	QWORD PTR tv9029[ebp]
	fsubr	QWORD PTR tv9025[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]

; 650  :              zero_seconds(pcount,stacktop);

	mov	eax, DWORD PTR _stacktop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcount$[ebp]
	push	ecx
	call	_zero_seconds
	add	esp, 8

; 651  :              break;

	jmp	$LN887@eval_secon
$LN588@eval_secon:

; 652  : 
; 653  :        case IDIV_NODE:
; 654  :              stacktop--;

	mov	edx, DWORD PTR _stacktop$[ebp]
	sub	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx

; 655  :              if ( (int)stacktop[1].value == 0 ) 

	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax+1256]
	call	__ftol2_sse
	test	eax, eax
	jne	SHORT $LN587@eval_secon

; 656  :                { sprintf(errmsg,"Division by zero.\n");

	push	OFFSET ??_C@_0BD@KKBNAHFA@Division?5by?5zero?4?6?$AA@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 8

; 657  :                  sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 658  :                     file_names[node->file_no],node->line_no);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _file_names
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 659  :                  kb_error(1014,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	1014					; 000003f6H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN587@eval_secon:

; 660  :                }
; 661  :              stacktop[0].value = 
; 662  :                  (REAL)((int)(stacktop[0].value)/(int)(stacktop[1].value));

	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx]
	call	__ftol2_sse
	mov	esi, eax
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [edx+1256]
	call	__ftol2_sse
	mov	ecx, eax
	mov	eax, esi
	cdq
	idiv	ecx
	mov	DWORD PTR tv6466[ebp], eax
	fild	DWORD PTR tv6466[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]

; 663  :              zero_seconds(pcount,stacktop);

	mov	eax, DWORD PTR _stacktop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcount$[ebp]
	push	ecx
	call	_zero_seconds
	add	esp, 8

; 664  :              break;

	jmp	$LN887@eval_secon
$LN586@eval_secon:

; 665  : 
; 666  :        case INTPOW_NODE:
; 667  :            if ( node->op1.intpow == 0 )

	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx+32], 0
	jne	SHORT $LN585@eval_secon

; 668  :               { stacktop->value = 1.;

	mov	eax, DWORD PTR _stacktop$[ebp]
	fld1
	fstp	QWORD PTR [eax]

; 669  :                  zero_seconds(pcount,stacktop);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcount$[ebp]
	push	edx
	call	_zero_seconds
	add	esp, 8
	jmp	$LN563@eval_secon
$LN585@eval_secon:

; 670  :               }
; 671  :            else if ( node->op1.intpow == 1 )

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+32], 1
	jne	SHORT $LN583@eval_secon

; 672  :               { /* no action necessary */
; 673  :               }
; 674  :            else

	jmp	$LN563@eval_secon
$LN583@eval_secon:

; 675  :              { REAL f1,f2=1.0;

	fld1
	fstp	QWORD PTR _f2$89869[ebp]

; 676  :                int i,j;
; 677  :                x = stacktop->value;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx]
	fstp	QWORD PTR _x$[ebp]

; 678  :                if ( node->op1.intpow > 1 ) /* get n-2 power first */ 

	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx+32], 1
	jle	SHORT $LN581@eval_secon

; 679  :                   for ( n = 1 ; n < node->op1.intpow-1 ; n++ )

	mov	DWORD PTR _n$[ebp], 1
	jmp	SHORT $LN580@eval_secon
$LN579@eval_secon:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN580@eval_secon:
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	sub	edx, 1
	cmp	DWORD PTR _n$[ebp], edx
	jge	SHORT $LN578@eval_secon

; 680  :                      f2 *= x;

	fld	QWORD PTR _f2$89869[ebp]
	fmul	QWORD PTR _x$[ebp]
	fstp	QWORD PTR _f2$89869[ebp]
	jmp	SHORT $LN579@eval_secon
$LN578@eval_secon:

; 681  :                else if ( node->op1.intpow < 0 ) 

	jmp	$LN572@eval_secon
$LN581@eval_secon:
	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jge	$LN572@eval_secon

; 682  :                { if ( x == 0.0 ) 

	fld	QWORD PTR _x$[ebp]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN575@eval_secon

; 683  :                  { sprintf(errmsg,"Negative power zero.\n");

	push	OFFSET ??_C@_0BG@DFDLDDME@Negative?5power?5zero?4?6?$AA@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 8

; 684  :                    sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 685  :                       file_names[node->file_no],node->line_no);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _file_names
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 686  :                    kb_error(1015,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	1015					; 000003f7H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN575@eval_secon:

; 687  :                  }
; 688  :                  for ( f2 = 1/x, n = 0 ; n <= -node->op1.intpow ; n++ )

	fld1
	fdiv	QWORD PTR _x$[ebp]
	fstp	QWORD PTR _f2$89869[ebp]
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN574@eval_secon
$LN573@eval_secon:
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
$LN574@eval_secon:
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	neg	eax
	cmp	DWORD PTR _n$[ebp], eax
	jg	SHORT $LN572@eval_secon

; 689  :                      f2 /= x;

	fld	QWORD PTR _f2$89869[ebp]
	fdiv	QWORD PTR _x$[ebp]
	fstp	QWORD PTR _f2$89869[ebp]
	jmp	SHORT $LN573@eval_secon
$LN572@eval_secon:

; 690  :                }
; 691  :                f1 = f2*x;

	fld	QWORD PTR _f2$89869[ebp]
	fmul	QWORD PTR _x$[ebp]
	fstp	QWORD PTR _f1$89868[ebp]

; 692  :                stacktop->value = f1*x;

	fld	QWORD PTR _f1$89868[ebp]
	fmul	QWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx]

; 693  :                SECOND = node->op1.intpow*(node->op1.intpow-1)*f2

	mov	DWORD PTR _i$89870[ebp], 0
	jmp	SHORT $LN571@eval_secon
$LN570@eval_secon:
	mov	edx, DWORD PTR _i$89870[ebp]
	add	edx, 1
	mov	DWORD PTR _i$89870[ebp], edx
$LN571@eval_secon:
	mov	eax, DWORD PTR _i$89870[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	$LN569@eval_secon
	mov	DWORD PTR _j$89871[ebp], 0
	jmp	SHORT $LN568@eval_secon
$LN567@eval_secon:
	mov	ecx, DWORD PTR _j$89871[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$89871[ebp], ecx
$LN568@eval_secon:
	mov	edx, DWORD PTR _j$89871[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	$LN566@eval_secon

; 694  :                          *stacktop->deriv[i]*stacktop->deriv[j] +
; 695  :                       node->op1.intpow*f1*stacktop->second[i][j];

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sub	ecx, 1
	mov	edx, DWORD PTR _node$[ebp]
	imul	ecx, DWORD PTR [edx+32]
	mov	DWORD PTR tv6510[ebp], ecx
	fild	DWORD PTR tv6510[ebp]
	fmul	QWORD PTR _f2$89869[ebp]
	mov	eax, DWORD PTR _i$89870[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [ecx+eax*8+8]
	mov	edx, DWORD PTR _j$89871[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [eax+edx*8+8]
	mov	ecx, DWORD PTR _node$[ebp]
	fild	DWORD PTR [ecx+32]
	fmul	QWORD PTR _f1$89868[ebp]
	mov	edx, DWORD PTR _i$89870[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _j$89871[ebp]
	fmul	QWORD PTR [ecx+edx*8]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _i$89870[ebp]
	imul	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	lea	edx, DWORD PTR [ecx+eax+104]
	mov	eax, DWORD PTR _j$89871[ebp]
	fstp	QWORD PTR [edx+eax*8]
	jmp	$LN567@eval_secon
$LN566@eval_secon:
	jmp	$LN570@eval_secon
$LN569@eval_secon:

; 696  :                FIRST = node->op1.intpow*f1*stacktop->deriv[i];

	mov	DWORD PTR _i$89870[ebp], 0
	jmp	SHORT $LN565@eval_secon
$LN564@eval_secon:
	mov	ecx, DWORD PTR _i$89870[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$89870[ebp], ecx
$LN565@eval_secon:
	mov	edx, DWORD PTR _i$89870[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN563@eval_secon
	mov	eax, DWORD PTR _node$[ebp]
	fild	DWORD PTR [eax+32]
	fmul	QWORD PTR _f1$89868[ebp]
	mov	ecx, DWORD PTR _i$89870[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [edx+ecx*8+8]
	mov	eax, DWORD PTR _i$89870[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx+eax*8+8]
	jmp	SHORT $LN564@eval_secon
$LN563@eval_secon:

; 697  :              }
; 698  :            break;

	jmp	$LN887@eval_secon
$LN562@eval_secon:

; 699  : 
; 700  :        case POW_NODE:
; 701  :           stacktop--;

	mov	edx, DWORD PTR _stacktop$[ebp]
	sub	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx

; 702  :           x = stacktop[0].value;

	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax]
	fstp	QWORD PTR _x$[ebp]

; 703  :           y = stacktop[1].value;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+1256]
	fstp	QWORD PTR _y$[ebp]

; 704  :           if ( x == 0.0 )

	fld	QWORD PTR _x$[ebp]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$LN561@eval_secon

; 705  :           { stacktop->value = 0.0;

	mov	edx, DWORD PTR _stacktop$[ebp]
	fldz
	fstp	QWORD PTR [edx]

; 706  :             if ( y > 2.0 )

	fld	QWORD PTR __real@4000000000000000
	fcomp	QWORD PTR _y$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	$LN560@eval_secon

; 707  :             { int i,j;  FIRST = 0.0; SECOND = 0.0; }

	mov	DWORD PTR _i$89895[ebp], 0
	jmp	SHORT $LN559@eval_secon
$LN558@eval_secon:
	mov	eax, DWORD PTR _i$89895[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89895[ebp], eax
$LN559@eval_secon:
	mov	ecx, DWORD PTR _i$89895[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN557@eval_secon
	mov	edx, DWORD PTR _i$89895[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fldz
	fstp	QWORD PTR [eax+edx*8+8]
	jmp	SHORT $LN558@eval_secon
$LN557@eval_secon:
	mov	DWORD PTR _i$89895[ebp], 0
	jmp	SHORT $LN556@eval_secon
$LN555@eval_secon:
	mov	ecx, DWORD PTR _i$89895[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$89895[ebp], ecx
$LN556@eval_secon:
	mov	edx, DWORD PTR _i$89895[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN554@eval_secon
	mov	DWORD PTR _j$89896[ebp], 0
	jmp	SHORT $LN553@eval_secon
$LN552@eval_secon:
	mov	eax, DWORD PTR _j$89896[ebp]
	add	eax, 1
	mov	DWORD PTR _j$89896[ebp], eax
$LN553@eval_secon:
	mov	ecx, DWORD PTR _j$89896[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN551@eval_secon
	mov	edx, DWORD PTR _i$89895[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _j$89896[ebp]
	fldz
	fstp	QWORD PTR [ecx+edx*8]
	jmp	SHORT $LN552@eval_secon
$LN551@eval_secon:
	jmp	SHORT $LN555@eval_secon
$LN554@eval_secon:

; 708  :             else if ( y < 2.0 )

	jmp	$LN549@eval_secon
$LN560@eval_secon:
	fld	QWORD PTR __real@4000000000000000
	fcomp	QWORD PTR _y$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN549@eval_secon

; 709  :             { sprintf(errmsg,"Negative power (%f) of zero in second derivative.\n",
; 710  :                       (DOUBLE)(y-2));

	fld	QWORD PTR _y$[ebp]
	fsub	QWORD PTR __real@4000000000000000
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0DD@POCGBPNE@Negative?5power?5?$CI?$CFf?$CJ?5of?5zero?5in?5s@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 16					; 00000010H

; 711  :               sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 712  :                  file_names[node->file_no],node->line_no);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _file_names
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 713  :               kb_error(2005,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2005					; 000007d5H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN549@eval_secon:

; 714  :             }

	jmp	$LN537@eval_secon
$LN561@eval_secon:

; 715  :           }
; 716  :           else if ( (x < 0) && ( (REAL)(int)y != y ) )

	fldz
	fcomp	QWORD PTR _x$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN547@eval_secon
	fld	QWORD PTR _y$[ebp]
	call	__ftol2_sse
	mov	DWORD PTR tv6580[ebp], eax
	fild	DWORD PTR tv6580[ebp]
	fld	QWORD PTR _y$[ebp]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN547@eval_secon

; 717  :           { sprintf(errmsg,"Nonintegral power (%f) of negative number.\n",(double)y);

	sub	esp, 8
	fld	QWORD PTR _y$[ebp]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CM@MKJCJODL@Nonintegral?5power?5?$CI?$CFf?$CJ?5of?5negati@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 16					; 00000010H

; 718  :             sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 719  :                  file_names[node->file_no],node->line_no);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _file_names
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 720  :             kb_error(2006,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2006					; 000007d6H
	call	_kb_error
	add	esp, 12					; 0000000cH

; 721  :           }
; 722  :           else

	jmp	$LN537@eval_secon
$LN547@eval_secon:

; 723  :           { int i,j;
; 724  :             stacktop->value = pow(x,y);

	sub	esp, 8
	fld	QWORD PTR _y$[ebp]
	fstp	QWORD PTR [esp]
	sub	esp, 8
	fld	QWORD PTR _x$[ebp]
	fstp	QWORD PTR [esp]
	call	_pow
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]

; 725  :             SECOND = ((log(fabs(x))*stacktop[1].deriv[i]+y/x*stacktop[0].deriv[i])

	mov	DWORD PTR _i$89917[ebp], 0
	jmp	SHORT $LN545@eval_secon
$LN544@eval_secon:
	mov	ecx, DWORD PTR _i$89917[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$89917[ebp], ecx
$LN545@eval_secon:
	mov	edx, DWORD PTR _i$89917[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	$LN543@eval_secon
	mov	DWORD PTR _j$89918[ebp], 0
	jmp	SHORT $LN542@eval_secon
$LN541@eval_secon:
	mov	eax, DWORD PTR _j$89918[ebp]
	add	eax, 1
	mov	DWORD PTR _j$89918[ebp], eax
$LN542@eval_secon:
	mov	ecx, DWORD PTR _j$89918[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	$LN540@eval_secon

; 726  :                  *(log(fabs(x))*stacktop[1].deriv[j]+y/x*stacktop[0].deriv[j])
; 727  :                  +log(fabs(x))*stacktop->second[i][j] 
; 728  :                  + stacktop[0].deriv[i]* stacktop[1].deriv[j]/x
; 729  :                  + stacktop[0].deriv[j]* stacktop[1].deriv[i]/x
; 730  :                  + stacktop[0].deriv[i]* stacktop[0].deriv[j]*y/x/x
; 731  :                  + stacktop[0].second[i][j]*y/x)*stacktop->value;

	sub	esp, 8
	fld	QWORD PTR _x$[ebp]
	fstp	QWORD PTR [esp]
	call	_fabs
	fstp	QWORD PTR [esp]
	call	_log
	add	esp, 8
	mov	edx, DWORD PTR _i$89917[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [eax+edx*8+1264]
	fld	QWORD PTR _y$[ebp]
	fdiv	QWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _i$89917[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [edx+ecx*8+8]
	faddp	ST(1), ST(0)
	sub	esp, 8
	fld	QWORD PTR _x$[ebp]
	fstp	QWORD PTR [esp]
	fstp	QWORD PTR tv9031[ebp]
	call	_fabs
	fstp	QWORD PTR [esp]
	call	_log
	add	esp, 8
	mov	eax, DWORD PTR _j$89918[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [ecx+eax*8+1264]
	fld	QWORD PTR _y$[ebp]
	fdiv	QWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _j$89918[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [eax+edx*8+8]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR tv9031[ebp]
	sub	esp, 8
	fld	QWORD PTR _x$[ebp]
	fstp	QWORD PTR [esp]
	fstp	QWORD PTR tv9033[ebp]
	call	_fabs
	fstp	QWORD PTR [esp]
	call	_log
	add	esp, 8
	mov	ecx, DWORD PTR _i$89917[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [edx+ecx+104]
	mov	ecx, DWORD PTR _j$89918[ebp]
	fmul	QWORD PTR [eax+ecx*8]
	fadd	QWORD PTR tv9033[ebp]
	mov	edx, DWORD PTR _i$89917[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _j$89918[ebp]
	mov	esi, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax+edx*8+8]
	fmul	QWORD PTR [esi+ecx*8+1264]
	fdiv	QWORD PTR _x$[ebp]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _j$89918[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _i$89917[ebp]
	mov	esi, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax+edx*8+8]
	fmul	QWORD PTR [esi+ecx*8+1264]
	fdiv	QWORD PTR _x$[ebp]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _i$89917[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _j$89918[ebp]
	mov	esi, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax+edx*8+8]
	fmul	QWORD PTR [esi+ecx*8+8]
	fmul	QWORD PTR _y$[ebp]
	fdiv	QWORD PTR _x$[ebp]
	fdiv	QWORD PTR _x$[ebp]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _i$89917[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _j$89918[ebp]
	fld	QWORD PTR [ecx+edx*8]
	fmul	QWORD PTR _y$[ebp]
	fdiv	QWORD PTR _x$[ebp]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [eax]
	mov	ecx, DWORD PTR _i$89917[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [edx+ecx+104]
	mov	ecx, DWORD PTR _j$89918[ebp]
	fstp	QWORD PTR [eax+ecx*8]
	jmp	$LN541@eval_secon
$LN540@eval_secon:
	jmp	$LN544@eval_secon
$LN543@eval_secon:

; 732  :             FIRST = (log(fabs(x))*stacktop[1].deriv[i]

	mov	DWORD PTR _i$89917[ebp], 0
	jmp	SHORT $LN539@eval_secon
$LN538@eval_secon:
	mov	edx, DWORD PTR _i$89917[ebp]
	add	edx, 1
	mov	DWORD PTR _i$89917[ebp], edx
$LN539@eval_secon:
	mov	eax, DWORD PTR _i$89917[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN537@eval_secon

; 733  :                    + y/x*stacktop[0].deriv[i]) *stacktop->value;

	sub	esp, 8
	fld	QWORD PTR _x$[ebp]
	fstp	QWORD PTR [esp]
	call	_fabs
	fstp	QWORD PTR [esp]
	call	_log
	add	esp, 8
	mov	ecx, DWORD PTR _i$89917[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [edx+ecx*8+1264]
	fld	QWORD PTR _y$[ebp]
	fdiv	QWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _i$89917[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [ecx+eax*8+8]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [edx]
	mov	eax, DWORD PTR _i$89917[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx+eax*8+8]
	jmp	SHORT $LN538@eval_secon
$LN537@eval_secon:

; 734  :           }
; 735  :           break;

	jmp	$LN887@eval_secon
$LN536@eval_secon:

; 736  : 
; 737  :        /* This case causes a 2-min slowdown in VisualStudio.NET opt compile time*/
; 738  :        case ATAN2_NODE:
; 739  :         { REAL denom;
; 740  :           int i,j;
; 741  :           stacktop--;

	mov	edx, DWORD PTR _stacktop$[ebp]
	sub	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx

; 742  :           y = stacktop[0].value;

	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax]
	fstp	QWORD PTR _y$[ebp]

; 743  :           x = stacktop[1].value;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+1256]
	fstp	QWORD PTR _x$[ebp]

; 744  :           stacktop->value = atan2(y,x);

	sub	esp, 8
	fld	QWORD PTR _x$[ebp]
	fstp	QWORD PTR [esp]
	sub	esp, 8
	fld	QWORD PTR _y$[ebp]
	fstp	QWORD PTR [esp]
	call	_atan2
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]

; 745  :           denom = x*x + y*y;

	fld	QWORD PTR _x$[ebp]
	fmul	QWORD PTR _x$[ebp]
	fld	QWORD PTR _y$[ebp]
	fmul	QWORD PTR _y$[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _denom$89929[ebp]

; 746  :           SECOND = (x*stacktop[0].second[i][j]

	mov	DWORD PTR _i$89930[ebp], 0
	jmp	SHORT $LN535@eval_secon
$LN534@eval_secon:
	mov	eax, DWORD PTR _i$89930[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89930[ebp], eax
$LN535@eval_secon:
	mov	ecx, DWORD PTR _i$89930[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	$LN533@eval_secon
	mov	DWORD PTR _j$89931[ebp], 0
	jmp	SHORT $LN532@eval_secon
$LN531@eval_secon:
	mov	edx, DWORD PTR _j$89931[ebp]
	add	edx, 1
	mov	DWORD PTR _j$89931[ebp], edx
$LN532@eval_secon:
	mov	eax, DWORD PTR _j$89931[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	$LN530@eval_secon

; 747  :               +stacktop[1].deriv[j]*stacktop[0].deriv[i]
; 748  :               -stacktop[0].deriv[j]*stacktop[1].deriv[i]
; 749  :               -y*stacktop[1].second[i][j])/denom
; 750  :               - 2*(x*stacktop[0].deriv[i]-y*stacktop[1].deriv[i])
; 751  :                   *(x*stacktop[1].deriv[j]+y*stacktop[0].deriv[j])/denom/denom;

	mov	ecx, DWORD PTR _i$89930[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [edx+ecx+104]
	mov	ecx, DWORD PTR _j$89931[ebp]
	fld	QWORD PTR _x$[ebp]
	fmul	QWORD PTR [eax+ecx*8]
	mov	edx, DWORD PTR _j$89931[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _i$89930[ebp]
	mov	esi, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax+edx*8+1264]
	fmul	QWORD PTR [esi+ecx*8+8]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _j$89931[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _i$89930[ebp]
	mov	esi, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax+edx*8+8]
	fmul	QWORD PTR [esi+ecx*8+1264]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR _i$89930[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+1360]
	mov	edx, DWORD PTR _j$89931[ebp]
	fld	QWORD PTR _y$[ebp]
	fmul	QWORD PTR [ecx+edx*8]
	fsubp	ST(1), ST(0)
	fdiv	QWORD PTR _denom$89929[ebp]
	mov	eax, DWORD PTR _i$89930[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _x$[ebp]
	fmul	QWORD PTR [ecx+eax*8+8]
	mov	edx, DWORD PTR _i$89930[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _y$[ebp]
	fmul	QWORD PTR [eax+edx*8+1264]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR __real@4000000000000000
	mov	ecx, DWORD PTR _j$89931[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _x$[ebp]
	fmul	QWORD PTR [edx+ecx*8+1264]
	mov	eax, DWORD PTR _j$89931[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _y$[ebp]
	fmul	QWORD PTR [ecx+eax*8+8]
	faddp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	fdiv	QWORD PTR _denom$89929[ebp]
	fdiv	QWORD PTR _denom$89929[ebp]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR _i$89930[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _j$89931[ebp]
	fstp	QWORD PTR [ecx+edx*8]
	jmp	$LN531@eval_secon
$LN530@eval_secon:
	jmp	$LN534@eval_secon
$LN533@eval_secon:

; 752  :           FIRST = (x*stacktop[0].deriv[i]-y*stacktop[1].deriv[i])/denom;

	mov	DWORD PTR _i$89930[ebp], 0
	jmp	SHORT $LN529@eval_secon
$LN528@eval_secon:
	mov	eax, DWORD PTR _i$89930[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89930[ebp], eax
$LN529@eval_secon:
	mov	ecx, DWORD PTR _i$89930[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN527@eval_secon
	mov	edx, DWORD PTR _i$89930[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _x$[ebp]
	fmul	QWORD PTR [eax+edx*8+8]
	mov	ecx, DWORD PTR _i$89930[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _y$[ebp]
	fmul	QWORD PTR [edx+ecx*8+1264]
	fsubp	ST(1), ST(0)
	fdiv	QWORD PTR _denom$89929[ebp]
	mov	eax, DWORD PTR _i$89930[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx+eax*8+8]
	jmp	SHORT $LN528@eval_secon
$LN527@eval_secon:

; 753  :           break;

	jmp	$LN887@eval_secon
$LN526@eval_secon:

; 754  :         }
; 755  : 
; 756  :        case SQR_NODE:
; 757  :         { int i,j;
; 758  :           SECOND = 2*(stacktop->deriv[i]*stacktop->deriv[j]

	mov	DWORD PTR _i$89942[ebp], 0
	jmp	SHORT $LN525@eval_secon
$LN524@eval_secon:
	mov	edx, DWORD PTR _i$89942[ebp]
	add	edx, 1
	mov	DWORD PTR _i$89942[ebp], edx
$LN525@eval_secon:
	mov	eax, DWORD PTR _i$89942[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	$LN523@eval_secon
	mov	DWORD PTR _j$89943[ebp], 0
	jmp	SHORT $LN522@eval_secon
$LN521@eval_secon:
	mov	ecx, DWORD PTR _j$89943[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$89943[ebp], ecx
$LN522@eval_secon:
	mov	edx, DWORD PTR _j$89943[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN520@eval_secon

; 759  :                               + stacktop->value*stacktop->second[i][j]);

	mov	eax, DWORD PTR _i$89942[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	mov	edx, DWORD PTR _j$89943[ebp]
	mov	esi, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+eax*8+8]
	fmul	QWORD PTR [esi+edx*8+8]
	mov	eax, DWORD PTR _i$89942[ebp]
	imul	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	lea	edx, DWORD PTR [ecx+eax+104]
	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _j$89943[ebp]
	fld	QWORD PTR [eax]
	fmul	QWORD PTR [edx+ecx*8]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __real@4000000000000000
	mov	edx, DWORD PTR _i$89942[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _j$89943[ebp]
	fstp	QWORD PTR [ecx+edx*8]
	jmp	SHORT $LN521@eval_secon
$LN520@eval_secon:
	jmp	$LN524@eval_secon
$LN523@eval_secon:

; 760  :           FIRST *= 2*stacktop->value;

	mov	DWORD PTR _i$89942[ebp], 0
	jmp	SHORT $LN519@eval_secon
$LN518@eval_secon:
	mov	eax, DWORD PTR _i$89942[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89942[ebp], eax
$LN519@eval_secon:
	mov	ecx, DWORD PTR _i$89942[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN517@eval_secon
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR __real@4000000000000000
	fmul	QWORD PTR [edx]
	mov	eax, DWORD PTR _i$89942[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [ecx+eax*8+8]
	mov	edx, DWORD PTR _i$89942[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax+edx*8+8]
	jmp	SHORT $LN518@eval_secon
$LN517@eval_secon:

; 761  :           stacktop->value *= stacktop->value;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx]
	fmul	QWORD PTR [edx]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]

; 762  :           break;

	jmp	$LN887@eval_secon
$LN516@eval_secon:

; 763  :         }
; 764  : 
; 765  :        case SQRT_NODE:
; 766  :            { int i,j;
; 767  :              if ( stacktop->value < 0.0 )

	mov	ecx, DWORD PTR _stacktop$[ebp]
	fldz
	fcomp	QWORD PTR [ecx]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN515@eval_secon

; 768  :              { sprintf(errmsg,"Square root of negative number %g.\n",stacktop->value);

	mov	edx, DWORD PTR _stacktop$[ebp]
	sub	esp, 8
	fld	QWORD PTR [edx]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CE@FLAAOADA@Square?5root?5of?5negative?5number?5?$CF@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 16					; 00000010H

; 769  :                sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 770  :                  file_names[node->file_no],node->line_no);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _file_names
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 771  :                kb_error(2567,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2567					; 00000a07H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN515@eval_secon:

; 772  :              }
; 773  :              x = sqrt(stacktop->value);

	mov	eax, DWORD PTR _stacktop$[ebp]
	sub	esp, 8
	fld	QWORD PTR [eax]
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	QWORD PTR _x$[ebp]

; 774  :              if ( x == 0.0 )

	fld	QWORD PTR _x$[ebp]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$LN514@eval_secon

; 775  :               { SECOND = 0.0; FIRST = 0.0;}

	mov	DWORD PTR _i$89954[ebp], 0
	jmp	SHORT $LN513@eval_secon
$LN512@eval_secon:
	mov	ecx, DWORD PTR _i$89954[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$89954[ebp], ecx
$LN513@eval_secon:
	mov	edx, DWORD PTR _i$89954[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN511@eval_secon
	mov	DWORD PTR _j$89955[ebp], 0
	jmp	SHORT $LN510@eval_secon
$LN509@eval_secon:
	mov	eax, DWORD PTR _j$89955[ebp]
	add	eax, 1
	mov	DWORD PTR _j$89955[ebp], eax
$LN510@eval_secon:
	mov	ecx, DWORD PTR _j$89955[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN508@eval_secon
	mov	edx, DWORD PTR _i$89954[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _j$89955[ebp]
	fldz
	fstp	QWORD PTR [ecx+edx*8]
	jmp	SHORT $LN509@eval_secon
$LN508@eval_secon:
	jmp	SHORT $LN512@eval_secon
$LN511@eval_secon:
	mov	DWORD PTR _i$89954[ebp], 0
	jmp	SHORT $LN507@eval_secon
$LN506@eval_secon:
	mov	eax, DWORD PTR _i$89954[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89954[ebp], eax
$LN507@eval_secon:
	mov	ecx, DWORD PTR _i$89954[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN505@eval_secon
	mov	edx, DWORD PTR _i$89954[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fldz
	fstp	QWORD PTR [eax+edx*8+8]
	jmp	SHORT $LN506@eval_secon
$LN505@eval_secon:

; 776  :              else

	jmp	$LN495@eval_secon
$LN514@eval_secon:

; 777  :               { SECOND = (stacktop->second[i][j]/2 - stacktop->deriv[i]*

	mov	DWORD PTR _i$89954[ebp], 0
	jmp	SHORT $LN503@eval_secon
$LN502@eval_secon:
	mov	ecx, DWORD PTR _i$89954[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$89954[ebp], ecx
$LN503@eval_secon:
	mov	edx, DWORD PTR _i$89954[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	$LN501@eval_secon
	mov	DWORD PTR _j$89955[ebp], 0
	jmp	SHORT $LN500@eval_secon
$LN499@eval_secon:
	mov	eax, DWORD PTR _j$89955[ebp]
	add	eax, 1
	mov	DWORD PTR _j$89955[ebp], eax
$LN500@eval_secon:
	mov	ecx, DWORD PTR _j$89955[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN498@eval_secon

; 778  :                          stacktop->deriv[j]/stacktop->value/4)/x;

	mov	edx, DWORD PTR _i$89954[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _j$89955[ebp]
	fld	QWORD PTR [ecx+edx*8]
	fdiv	QWORD PTR __real@4000000000000000
	mov	eax, DWORD PTR _i$89954[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	mov	edx, DWORD PTR _j$89955[ebp]
	mov	esi, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+eax*8+8]
	fmul	QWORD PTR [esi+edx*8+8]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fdiv	QWORD PTR [eax]
	fdiv	QWORD PTR __real@4010000000000000
	fsubp	ST(1), ST(0)
	fdiv	QWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _i$89954[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [edx+ecx+104]
	mov	ecx, DWORD PTR _j$89955[ebp]
	fstp	QWORD PTR [eax+ecx*8]
	jmp	SHORT $LN499@eval_secon
$LN498@eval_secon:
	jmp	$LN502@eval_secon
$LN501@eval_secon:

; 779  :                 FIRST /= 2*x;

	mov	DWORD PTR _i$89954[ebp], 0
	jmp	SHORT $LN497@eval_secon
$LN496@eval_secon:
	mov	edx, DWORD PTR _i$89954[ebp]
	add	edx, 1
	mov	DWORD PTR _i$89954[ebp], edx
$LN497@eval_secon:
	mov	eax, DWORD PTR _i$89954[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN495@eval_secon
	fld	QWORD PTR __real@4000000000000000
	fmul	QWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _i$89954[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fdivr	QWORD PTR [edx+ecx*8+8]
	mov	eax, DWORD PTR _i$89954[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx+eax*8+8]
	jmp	SHORT $LN496@eval_secon
$LN495@eval_secon:

; 780  :               }
; 781  :              stacktop->value = x;

	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _x$[ebp]
	fstp	QWORD PTR [edx]

; 782  :              break;

	jmp	$LN887@eval_secon
$LN494@eval_secon:

; 783  :            }
; 784  : 
; 785  :        case CEIL_NODE:
; 786  :         { int i,j;
; 787  :           stacktop->value = ceil(stacktop->value);

	mov	eax, DWORD PTR _stacktop$[ebp]
	sub	esp, 8
	fld	QWORD PTR [eax]
	fstp	QWORD PTR [esp]
	call	_ceil
	add	esp, 8
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx]

; 788  :           FIRST = 0;

	mov	DWORD PTR _i$89979[ebp], 0
	jmp	SHORT $LN493@eval_secon
$LN492@eval_secon:
	mov	edx, DWORD PTR _i$89979[ebp]
	add	edx, 1
	mov	DWORD PTR _i$89979[ebp], edx
$LN493@eval_secon:
	mov	eax, DWORD PTR _i$89979[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN491@eval_secon
	mov	ecx, DWORD PTR _i$89979[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fldz
	fstp	QWORD PTR [edx+ecx*8+8]
	jmp	SHORT $LN492@eval_secon
$LN491@eval_secon:

; 789  :           SECOND = 0;

	mov	DWORD PTR _i$89979[ebp], 0
	jmp	SHORT $LN490@eval_secon
$LN489@eval_secon:
	mov	eax, DWORD PTR _i$89979[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89979[ebp], eax
$LN490@eval_secon:
	mov	ecx, DWORD PTR _i$89979[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN488@eval_secon
	mov	DWORD PTR _j$89980[ebp], 0
	jmp	SHORT $LN487@eval_secon
$LN486@eval_secon:
	mov	edx, DWORD PTR _j$89980[ebp]
	add	edx, 1
	mov	DWORD PTR _j$89980[ebp], edx
$LN487@eval_secon:
	mov	eax, DWORD PTR _j$89980[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN485@eval_secon
	mov	ecx, DWORD PTR _i$89979[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [edx+ecx+104]
	mov	ecx, DWORD PTR _j$89980[ebp]
	fldz
	fstp	QWORD PTR [eax+ecx*8]
	jmp	SHORT $LN486@eval_secon
$LN485@eval_secon:
	jmp	SHORT $LN489@eval_secon
$LN488@eval_secon:

; 790  :           break;

	jmp	$LN887@eval_secon
$LN484@eval_secon:

; 791  :         }
; 792  : 
; 793  :        case FLOOR_NODE:
; 794  :         { int i,j;
; 795  :           stacktop->value = floor(stacktop->value);

	mov	edx, DWORD PTR _stacktop$[ebp]
	sub	esp, 8
	fld	QWORD PTR [edx]
	fstp	QWORD PTR [esp]
	call	_floor
	add	esp, 8
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]

; 796  :           FIRST = 0;

	mov	DWORD PTR _i$89991[ebp], 0
	jmp	SHORT $LN483@eval_secon
$LN482@eval_secon:
	mov	ecx, DWORD PTR _i$89991[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$89991[ebp], ecx
$LN483@eval_secon:
	mov	edx, DWORD PTR _i$89991[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN481@eval_secon
	mov	eax, DWORD PTR _i$89991[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fldz
	fstp	QWORD PTR [ecx+eax*8+8]
	jmp	SHORT $LN482@eval_secon
$LN481@eval_secon:

; 797  :           SECOND = 0;

	mov	DWORD PTR _i$89991[ebp], 0
	jmp	SHORT $LN480@eval_secon
$LN479@eval_secon:
	mov	edx, DWORD PTR _i$89991[ebp]
	add	edx, 1
	mov	DWORD PTR _i$89991[ebp], edx
$LN480@eval_secon:
	mov	eax, DWORD PTR _i$89991[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN478@eval_secon
	mov	DWORD PTR _j$89992[ebp], 0
	jmp	SHORT $LN477@eval_secon
$LN476@eval_secon:
	mov	ecx, DWORD PTR _j$89992[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$89992[ebp], ecx
$LN477@eval_secon:
	mov	edx, DWORD PTR _j$89992[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN475@eval_secon
	mov	eax, DWORD PTR _i$89991[ebp]
	imul	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	lea	edx, DWORD PTR [ecx+eax+104]
	mov	eax, DWORD PTR _j$89992[ebp]
	fldz
	fstp	QWORD PTR [edx+eax*8]
	jmp	SHORT $LN476@eval_secon
$LN475@eval_secon:
	jmp	SHORT $LN479@eval_secon
$LN478@eval_secon:

; 798  :           break;

	jmp	$LN887@eval_secon
$LN474@eval_secon:

; 799  :         }
; 800  : 
; 801  :        case ABS_NODE:
; 802  :              if ( stacktop->value < 0.0 )

	mov	ecx, DWORD PTR _stacktop$[ebp]
	fldz
	fcomp	QWORD PTR [ecx]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN473@eval_secon

; 803  :              { int i,j;
; 804  :                FIRST *= -1 ;

	mov	DWORD PTR _i$90004[ebp], 0
	jmp	SHORT $LN472@eval_secon
$LN471@eval_secon:
	mov	edx, DWORD PTR _i$90004[ebp]
	add	edx, 1
	mov	DWORD PTR _i$90004[ebp], edx
$LN472@eval_secon:
	mov	eax, DWORD PTR _i$90004[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN470@eval_secon
	mov	ecx, DWORD PTR _i$90004[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [edx+ecx*8+8]
	fmul	QWORD PTR __real@bff0000000000000
	mov	eax, DWORD PTR _i$90004[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx+eax*8+8]
	jmp	SHORT $LN471@eval_secon
$LN470@eval_secon:

; 805  :                SECOND *= -1;

	mov	DWORD PTR _i$90004[ebp], 0
	jmp	SHORT $LN469@eval_secon
$LN468@eval_secon:
	mov	edx, DWORD PTR _i$90004[ebp]
	add	edx, 1
	mov	DWORD PTR _i$90004[ebp], edx
$LN469@eval_secon:
	mov	eax, DWORD PTR _i$90004[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN467@eval_secon
	mov	DWORD PTR _j$90005[ebp], 0
	jmp	SHORT $LN466@eval_secon
$LN465@eval_secon:
	mov	ecx, DWORD PTR _j$90005[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$90005[ebp], ecx
$LN466@eval_secon:
	mov	edx, DWORD PTR _j$90005[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN464@eval_secon
	mov	eax, DWORD PTR _i$90004[ebp]
	imul	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	lea	edx, DWORD PTR [ecx+eax+104]
	mov	eax, DWORD PTR _j$90005[ebp]
	fld	QWORD PTR [edx+eax*8]
	fmul	QWORD PTR __real@bff0000000000000
	mov	ecx, DWORD PTR _i$90004[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [edx+ecx+104]
	mov	ecx, DWORD PTR _j$90005[ebp]
	fstp	QWORD PTR [eax+ecx*8]
	jmp	SHORT $LN465@eval_secon
$LN464@eval_secon:
	jmp	SHORT $LN468@eval_secon
$LN467@eval_secon:

; 806  :                stacktop->value = -stacktop->value;

	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [edx]
	fchs
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]
$LN473@eval_secon:

; 807  :              }
; 808  :              break;

	jmp	$LN887@eval_secon
$LN463@eval_secon:

; 809  : 
; 810  :        case SIN_NODE:
; 811  :            { int i,j;
; 812  :              x = cos(stacktop->value); y = sin(stacktop->value);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	sub	esp, 8
	fld	QWORD PTR [ecx]
	fstp	QWORD PTR [esp]
	call	_cos
	add	esp, 8
	fstp	QWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	sub	esp, 8
	fld	QWORD PTR [edx]
	fstp	QWORD PTR [esp]
	call	_sin
	add	esp, 8
	fstp	QWORD PTR _y$[ebp]

; 813  :              SECOND = -y*stacktop->deriv[i]*stacktop->deriv[j]

	mov	DWORD PTR _i$90016[ebp], 0
	jmp	SHORT $LN462@eval_secon
$LN461@eval_secon:
	mov	eax, DWORD PTR _i$90016[ebp]
	add	eax, 1
	mov	DWORD PTR _i$90016[ebp], eax
$LN462@eval_secon:
	mov	ecx, DWORD PTR _i$90016[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	$LN460@eval_secon
	mov	DWORD PTR _j$90017[ebp], 0
	jmp	SHORT $LN459@eval_secon
$LN458@eval_secon:
	mov	edx, DWORD PTR _j$90017[ebp]
	add	edx, 1
	mov	DWORD PTR _j$90017[ebp], edx
$LN459@eval_secon:
	mov	eax, DWORD PTR _j$90017[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN457@eval_secon

; 814  :                          + x*stacktop->second[i][j];

	fld	QWORD PTR _y$[ebp]
	fchs
	mov	ecx, DWORD PTR _i$90016[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [edx+ecx*8+8]
	mov	eax, DWORD PTR _j$90017[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [ecx+eax*8+8]
	mov	edx, DWORD PTR _i$90016[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _j$90017[ebp]
	fld	QWORD PTR _x$[ebp]
	fmul	QWORD PTR [ecx+edx*8]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _i$90016[ebp]
	imul	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	lea	edx, DWORD PTR [ecx+eax+104]
	mov	eax, DWORD PTR _j$90017[ebp]
	fstp	QWORD PTR [edx+eax*8]
	jmp	SHORT $LN458@eval_secon
$LN457@eval_secon:
	jmp	$LN461@eval_secon
$LN460@eval_secon:

; 815  :              FIRST *= x;

	mov	DWORD PTR _i$90016[ebp], 0
	jmp	SHORT $LN456@eval_secon
$LN455@eval_secon:
	mov	ecx, DWORD PTR _i$90016[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$90016[ebp], ecx
$LN456@eval_secon:
	mov	edx, DWORD PTR _i$90016[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN454@eval_secon
	mov	eax, DWORD PTR _i$90016[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+eax*8+8]
	fmul	QWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _i$90016[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax+edx*8+8]
	jmp	SHORT $LN455@eval_secon
$LN454@eval_secon:

; 816  :              stacktop->value = y;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _y$[ebp]
	fstp	QWORD PTR [ecx]

; 817  :              break;

	jmp	$LN887@eval_secon
$LN453@eval_secon:

; 818  :            }
; 819  : 
; 820  :        case COS_NODE:
; 821  :            { int i,j;
; 822  :              x = cos(stacktop->value); y = sin(stacktop->value);

	mov	edx, DWORD PTR _stacktop$[ebp]
	sub	esp, 8
	fld	QWORD PTR [edx]
	fstp	QWORD PTR [esp]
	call	_cos
	add	esp, 8
	fstp	QWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	sub	esp, 8
	fld	QWORD PTR [eax]
	fstp	QWORD PTR [esp]
	call	_sin
	add	esp, 8
	fstp	QWORD PTR _y$[ebp]

; 823  :              SECOND = -x*stacktop->deriv[i]*stacktop->deriv[j]

	mov	DWORD PTR _i$90028[ebp], 0
	jmp	SHORT $LN452@eval_secon
$LN451@eval_secon:
	mov	ecx, DWORD PTR _i$90028[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$90028[ebp], ecx
$LN452@eval_secon:
	mov	edx, DWORD PTR _i$90028[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	$LN450@eval_secon
	mov	DWORD PTR _j$90029[ebp], 0
	jmp	SHORT $LN449@eval_secon
$LN448@eval_secon:
	mov	eax, DWORD PTR _j$90029[ebp]
	add	eax, 1
	mov	DWORD PTR _j$90029[ebp], eax
$LN449@eval_secon:
	mov	ecx, DWORD PTR _j$90029[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN447@eval_secon

; 824  :                          - y*stacktop->second[i][j];

	fld	QWORD PTR _x$[ebp]
	fchs
	mov	edx, DWORD PTR _i$90028[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [eax+edx*8+8]
	mov	ecx, DWORD PTR _j$90029[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [edx+ecx*8+8]
	mov	eax, DWORD PTR _i$90028[ebp]
	imul	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	lea	edx, DWORD PTR [ecx+eax+104]
	mov	eax, DWORD PTR _j$90029[ebp]
	fld	QWORD PTR _y$[ebp]
	fmul	QWORD PTR [edx+eax*8]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _i$90028[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [edx+ecx+104]
	mov	ecx, DWORD PTR _j$90029[ebp]
	fstp	QWORD PTR [eax+ecx*8]
	jmp	SHORT $LN448@eval_secon
$LN447@eval_secon:
	jmp	$LN451@eval_secon
$LN450@eval_secon:

; 825  :              FIRST *= -y;

	mov	DWORD PTR _i$90028[ebp], 0
	jmp	SHORT $LN446@eval_secon
$LN445@eval_secon:
	mov	edx, DWORD PTR _i$90028[ebp]
	add	edx, 1
	mov	DWORD PTR _i$90028[ebp], edx
$LN446@eval_secon:
	mov	eax, DWORD PTR _i$90028[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN444@eval_secon
	fld	QWORD PTR _y$[ebp]
	fchs
	mov	ecx, DWORD PTR _i$90028[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [edx+ecx*8+8]
	mov	eax, DWORD PTR _i$90028[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx+eax*8+8]
	jmp	SHORT $LN445@eval_secon
$LN444@eval_secon:

; 826  :              stacktop->value = x;

	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _x$[ebp]
	fstp	QWORD PTR [edx]

; 827  :              break;

	jmp	$LN887@eval_secon
$LN443@eval_secon:

; 828  :            }
; 829  : 
; 830  :        case ATAN_NODE:
; 831  :            { int i,j;
; 832  :              x = (1 + stacktop->value*stacktop->value);

	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax]
	fmul	QWORD PTR [ecx]
	fld1
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _x$[ebp]

; 833  :              SECOND = -2*stacktop->value/x/x*stacktop->deriv[i]

	mov	DWORD PTR _i$90040[ebp], 0
	jmp	SHORT $LN442@eval_secon
$LN441@eval_secon:
	mov	edx, DWORD PTR _i$90040[ebp]
	add	edx, 1
	mov	DWORD PTR _i$90040[ebp], edx
$LN442@eval_secon:
	mov	eax, DWORD PTR _i$90040[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	$LN440@eval_secon
	mov	DWORD PTR _j$90041[ebp], 0
	jmp	SHORT $LN439@eval_secon
$LN438@eval_secon:
	mov	ecx, DWORD PTR _j$90041[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$90041[ebp], ecx
$LN439@eval_secon:
	mov	edx, DWORD PTR _j$90041[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN437@eval_secon

; 834  :              *stacktop->deriv[j] +stacktop->second[i][j]/x;

	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR __real@c000000000000000
	fmul	QWORD PTR [eax]
	fdiv	QWORD PTR _x$[ebp]
	fdiv	QWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _i$90040[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [edx+ecx*8+8]
	mov	eax, DWORD PTR _j$90041[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [ecx+eax*8+8]
	mov	edx, DWORD PTR _i$90040[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _j$90041[ebp]
	fld	QWORD PTR [ecx+edx*8]
	fdiv	QWORD PTR _x$[ebp]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _i$90040[ebp]
	imul	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	lea	edx, DWORD PTR [ecx+eax+104]
	mov	eax, DWORD PTR _j$90041[ebp]
	fstp	QWORD PTR [edx+eax*8]
	jmp	SHORT $LN438@eval_secon
$LN437@eval_secon:
	jmp	$LN441@eval_secon
$LN440@eval_secon:

; 835  :              FIRST /= x;

	mov	DWORD PTR _i$90040[ebp], 0
	jmp	SHORT $LN436@eval_secon
$LN435@eval_secon:
	mov	ecx, DWORD PTR _i$90040[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$90040[ebp], ecx
$LN436@eval_secon:
	mov	edx, DWORD PTR _i$90040[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN434@eval_secon
	mov	eax, DWORD PTR _i$90040[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+eax*8+8]
	fdiv	QWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _i$90040[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax+edx*8+8]
	jmp	SHORT $LN435@eval_secon
$LN434@eval_secon:

; 836  :              stacktop->value = atan(stacktop->value);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	sub	esp, 8
	fld	QWORD PTR [ecx]
	fstp	QWORD PTR [esp]
	call	_atan
	add	esp, 8
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]

; 837  :              break ;

	jmp	$LN887@eval_secon
$LN433@eval_secon:

; 838  :            }
; 839  : 
; 840  :        case EXP_NODE:
; 841  :            { int i,j;
; 842  :              stacktop->value = exp(stacktop->value);

	mov	eax, DWORD PTR _stacktop$[ebp]
	sub	esp, 8
	fld	QWORD PTR [eax]
	fstp	QWORD PTR [esp]
	call	_exp
	add	esp, 8
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx]

; 843  :              SECOND = (stacktop->deriv[i]*stacktop->deriv[j] +

	mov	DWORD PTR _i$90052[ebp], 0
	jmp	SHORT $LN432@eval_secon
$LN431@eval_secon:
	mov	edx, DWORD PTR _i$90052[ebp]
	add	edx, 1
	mov	DWORD PTR _i$90052[ebp], edx
$LN432@eval_secon:
	mov	eax, DWORD PTR _i$90052[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN430@eval_secon
	mov	DWORD PTR _j$90053[ebp], 0
	jmp	SHORT $LN429@eval_secon
$LN428@eval_secon:
	mov	ecx, DWORD PTR _j$90053[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$90053[ebp], ecx
$LN429@eval_secon:
	mov	edx, DWORD PTR _j$90053[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN427@eval_secon

; 844  :                           stacktop->second[i][j])*stacktop->value;

	mov	eax, DWORD PTR _i$90052[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	mov	edx, DWORD PTR _j$90053[ebp]
	mov	esi, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+eax*8+8]
	fmul	QWORD PTR [esi+edx*8+8]
	mov	eax, DWORD PTR _i$90052[ebp]
	imul	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	lea	edx, DWORD PTR [ecx+eax+104]
	mov	eax, DWORD PTR _j$90053[ebp]
	fadd	QWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [ecx]
	mov	edx, DWORD PTR _i$90052[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _j$90053[ebp]
	fstp	QWORD PTR [ecx+edx*8]
	jmp	SHORT $LN428@eval_secon
$LN427@eval_secon:
	jmp	$LN431@eval_secon
$LN430@eval_secon:

; 845  :              FIRST *= stacktop->value;

	mov	DWORD PTR _i$90052[ebp], 0
	jmp	SHORT $LN426@eval_secon
$LN425@eval_secon:
	mov	eax, DWORD PTR _i$90052[ebp]
	add	eax, 1
	mov	DWORD PTR _i$90052[ebp], eax
$LN426@eval_secon:
	mov	ecx, DWORD PTR _i$90052[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN424@eval_secon
	mov	edx, DWORD PTR _i$90052[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax+edx*8+8]
	fmul	QWORD PTR [ecx]
	mov	edx, DWORD PTR _i$90052[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax+edx*8+8]
	jmp	SHORT $LN425@eval_secon
$LN424@eval_secon:

; 846  :              break;

	jmp	$LN887@eval_secon
$LN423@eval_secon:

; 847  :            }
; 848  : 
; 849  :        case LOG_NODE:
; 850  :            { int i,j;
; 851  :              if ( stacktop->value <= 0.0 )

	mov	ecx, DWORD PTR _stacktop$[ebp]
	fldz
	fcomp	QWORD PTR [ecx]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN422@eval_secon

; 852  :              { sprintf(errmsg,"Log of nonpositive number.\n");

	push	OFFSET ??_C@_0BM@JHOLMPFH@Log?5of?5nonpositive?5number?4?6?$AA@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 8

; 853  :                sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 854  :                  file_names[node->file_no],node->line_no);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _file_names
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 855  :                kb_error(2497,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2497					; 000009c1H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN422@eval_secon:

; 856  :              }
; 857  :              SECOND = (stacktop->second[i][j] 

	mov	DWORD PTR _i$90064[ebp], 0
	jmp	SHORT $LN421@eval_secon
$LN420@eval_secon:
	mov	edx, DWORD PTR _i$90064[ebp]
	add	edx, 1
	mov	DWORD PTR _i$90064[ebp], edx
$LN421@eval_secon:
	mov	eax, DWORD PTR _i$90064[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	$LN419@eval_secon
	mov	DWORD PTR _j$90065[ebp], 0
	jmp	SHORT $LN418@eval_secon
$LN417@eval_secon:
	mov	ecx, DWORD PTR _j$90065[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$90065[ebp], ecx
$LN418@eval_secon:
	mov	edx, DWORD PTR _j$90065[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN416@eval_secon

; 858  :                   - stacktop->deriv[i]*stacktop->deriv[j]/stacktop->value)
; 859  :                   /stacktop->value;

	mov	eax, DWORD PTR _i$90064[ebp]
	imul	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	lea	edx, DWORD PTR [ecx+eax+104]
	mov	eax, DWORD PTR _i$90064[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	mov	esi, DWORD PTR _j$90065[ebp]
	mov	edi, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+eax*8+8]
	fmul	QWORD PTR [edi+esi*8+8]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fdiv	QWORD PTR [eax]
	mov	ecx, DWORD PTR _j$90065[ebp]
	fsubr	QWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fdiv	QWORD PTR [edx]
	mov	eax, DWORD PTR _i$90064[ebp]
	imul	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	lea	edx, DWORD PTR [ecx+eax+104]
	mov	eax, DWORD PTR _j$90065[ebp]
	fstp	QWORD PTR [edx+eax*8]
	jmp	SHORT $LN417@eval_secon
$LN416@eval_secon:
	jmp	$LN420@eval_secon
$LN419@eval_secon:

; 860  :              FIRST /= stacktop->value;

	mov	DWORD PTR _i$90064[ebp], 0
	jmp	SHORT $LN415@eval_secon
$LN414@eval_secon:
	mov	ecx, DWORD PTR _i$90064[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$90064[ebp], ecx
$LN415@eval_secon:
	mov	edx, DWORD PTR _i$90064[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN413@eval_secon
	mov	eax, DWORD PTR _i$90064[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+eax*8+8]
	fdiv	QWORD PTR [edx]
	mov	eax, DWORD PTR _i$90064[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx+eax*8+8]
	jmp	SHORT $LN414@eval_secon
$LN413@eval_secon:

; 861  :              stacktop->value = log(stacktop->value) ;

	mov	edx, DWORD PTR _stacktop$[ebp]
	sub	esp, 8
	fld	QWORD PTR [edx]
	fstp	QWORD PTR [esp]
	call	_log
	add	esp, 8
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]

; 862  :               break;

	jmp	$LN887@eval_secon
$LN412@eval_secon:

; 863  :            }
; 864  : 
; 865  :        case ASIN_NODE:
; 866  :            { int i,j;
; 867  :              if ( fabs(stacktop->value) >= 1.0 )

	mov	ecx, DWORD PTR _stacktop$[ebp]
	sub	esp, 8
	fld	QWORD PTR [ecx]
	fstp	QWORD PTR [esp]
	call	_fabs
	add	esp, 8
	fcomp	QWORD PTR __real@3ff0000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN411@eval_secon

; 868  :              { sprintf(errmsg,"Asin argument magnitude greater than 1.\n");

	push	OFFSET ??_C@_0CJ@HMFEKONA@Asin?5argument?5magnitude?5greater?5@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 8

; 869  :                sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 870  :                   file_names[node->file_no],node->line_no);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _file_names
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 871  :                kb_error(2570,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2570					; 00000a0aH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN411@eval_secon:

; 872  :              }
; 873  :                x = 1 - stacktop->value*stacktop->value;

	mov	edx, DWORD PTR _stacktop$[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [edx]
	fmul	QWORD PTR [eax]
	fld1
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR _x$[ebp]

; 874  :                y = sqrt(x);

	sub	esp, 8
	fld	QWORD PTR _x$[ebp]
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	QWORD PTR _y$[ebp]

; 875  :                SECOND = stacktop->second[i][j]/y +

	mov	DWORD PTR _i$90078[ebp], 0
	jmp	SHORT $LN410@eval_secon
$LN409@eval_secon:
	mov	ecx, DWORD PTR _i$90078[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$90078[ebp], ecx
$LN410@eval_secon:
	mov	edx, DWORD PTR _i$90078[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	$LN408@eval_secon
	mov	DWORD PTR _j$90079[ebp], 0
	jmp	SHORT $LN407@eval_secon
$LN406@eval_secon:
	mov	eax, DWORD PTR _j$90079[ebp]
	add	eax, 1
	mov	DWORD PTR _j$90079[ebp], eax
$LN407@eval_secon:
	mov	ecx, DWORD PTR _j$90079[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN405@eval_secon

; 876  :                   stacktop->deriv[i]*stacktop->deriv[j]*stacktop->value/x/y;

	mov	edx, DWORD PTR _i$90078[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _j$90079[ebp]
	fld	QWORD PTR [ecx+edx*8]
	fdiv	QWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _i$90078[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	mov	edx, DWORD PTR _j$90079[ebp]
	mov	esi, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+eax*8+8]
	fmul	QWORD PTR [esi+edx*8+8]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [eax]
	fdiv	QWORD PTR _x$[ebp]
	fdiv	QWORD PTR _y$[ebp]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _i$90078[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [edx+ecx+104]
	mov	ecx, DWORD PTR _j$90079[ebp]
	fstp	QWORD PTR [eax+ecx*8]
	jmp	SHORT $LN406@eval_secon
$LN405@eval_secon:
	jmp	$LN409@eval_secon
$LN408@eval_secon:

; 877  :                FIRST /= y;

	mov	DWORD PTR _i$90078[ebp], 0
	jmp	SHORT $LN404@eval_secon
$LN403@eval_secon:
	mov	edx, DWORD PTR _i$90078[ebp]
	add	edx, 1
	mov	DWORD PTR _i$90078[ebp], edx
$LN404@eval_secon:
	mov	eax, DWORD PTR _i$90078[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN402@eval_secon
	mov	ecx, DWORD PTR _i$90078[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [edx+ecx*8+8]
	fdiv	QWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _i$90078[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx+eax*8+8]
	jmp	SHORT $LN403@eval_secon
$LN402@eval_secon:

; 878  :                stacktop->value = asin(stacktop->value);

	mov	edx, DWORD PTR _stacktop$[ebp]
	sub	esp, 8
	fld	QWORD PTR [edx]
	fstp	QWORD PTR [esp]
	call	_asin
	add	esp, 8
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]

; 879  :                break ;

	jmp	$LN887@eval_secon
$LN401@eval_secon:

; 880  :            }
; 881  : 
; 882  :        case ACOS_NODE:
; 883  :            { int i,j;
; 884  :              if ( fabs(stacktop->value) >= 1.0 )

	mov	ecx, DWORD PTR _stacktop$[ebp]
	sub	esp, 8
	fld	QWORD PTR [ecx]
	fstp	QWORD PTR [esp]
	call	_fabs
	add	esp, 8
	fcomp	QWORD PTR __real@3ff0000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN400@eval_secon

; 885  :              { sprintf(errmsg,"Acos argument magnitude greater than 1.\n");

	push	OFFSET ??_C@_0CJ@CABPJLML@Acos?5argument?5magnitude?5greater?5@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 8

; 886  :                sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 887  :                     file_names[node->file_no],node->line_no);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _file_names
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 888  :                kb_error(2571,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2571					; 00000a0bH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN400@eval_secon:

; 889  :              }
; 890  :                x = 1 - stacktop->value*stacktop->value;

	mov	edx, DWORD PTR _stacktop$[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [edx]
	fmul	QWORD PTR [eax]
	fld1
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR _x$[ebp]

; 891  :                y = sqrt(x);

	sub	esp, 8
	fld	QWORD PTR _x$[ebp]
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	QWORD PTR _y$[ebp]

; 892  :                SECOND = -stacktop->second[i][j]/y -

	mov	DWORD PTR _i$90092[ebp], 0
	jmp	SHORT $LN399@eval_secon
$LN398@eval_secon:
	mov	ecx, DWORD PTR _i$90092[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$90092[ebp], ecx
$LN399@eval_secon:
	mov	edx, DWORD PTR _i$90092[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	$LN397@eval_secon
	mov	DWORD PTR _j$90093[ebp], 0
	jmp	SHORT $LN396@eval_secon
$LN395@eval_secon:
	mov	eax, DWORD PTR _j$90093[ebp]
	add	eax, 1
	mov	DWORD PTR _j$90093[ebp], eax
$LN396@eval_secon:
	mov	ecx, DWORD PTR _j$90093[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN394@eval_secon

; 893  :                   stacktop->deriv[i]*stacktop->deriv[j]*stacktop->value/x/y;

	mov	edx, DWORD PTR _i$90092[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _j$90093[ebp]
	fld	QWORD PTR [ecx+edx*8]
	fchs
	fdiv	QWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _i$90092[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	mov	edx, DWORD PTR _j$90093[ebp]
	mov	esi, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+eax*8+8]
	fmul	QWORD PTR [esi+edx*8+8]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [eax]
	fdiv	QWORD PTR _x$[ebp]
	fdiv	QWORD PTR _y$[ebp]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _i$90092[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [edx+ecx+104]
	mov	ecx, DWORD PTR _j$90093[ebp]
	fstp	QWORD PTR [eax+ecx*8]
	jmp	SHORT $LN395@eval_secon
$LN394@eval_secon:
	jmp	$LN398@eval_secon
$LN397@eval_secon:

; 894  :                FIRST /= -y;

	mov	DWORD PTR _i$90092[ebp], 0
	jmp	SHORT $LN393@eval_secon
$LN392@eval_secon:
	mov	edx, DWORD PTR _i$90092[ebp]
	add	edx, 1
	mov	DWORD PTR _i$90092[ebp], edx
$LN393@eval_secon:
	mov	eax, DWORD PTR _i$90092[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN391@eval_secon
	fld	QWORD PTR _y$[ebp]
	fchs
	mov	ecx, DWORD PTR _i$90092[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fdivr	QWORD PTR [edx+ecx*8+8]
	mov	eax, DWORD PTR _i$90092[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx+eax*8+8]
	jmp	SHORT $LN392@eval_secon
$LN391@eval_secon:

; 895  :                stacktop->value = acos(stacktop->value);

	mov	edx, DWORD PTR _stacktop$[ebp]
	sub	esp, 8
	fld	QWORD PTR [edx]
	fstp	QWORD PTR [esp]
	call	_acos
	add	esp, 8
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]

; 896  :                break;

	jmp	$LN887@eval_secon
$LN390@eval_secon:

; 897  :            }
; 898  : 
; 899  :        case TAN_NODE:
; 900  :            { int i,j;
; 901  :                stacktop->value = tan(stacktop->value);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	sub	esp, 8
	fld	QWORD PTR [ecx]
	fstp	QWORD PTR [esp]
	call	_tan
	add	esp, 8
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]

; 902  :                x = 1+stacktop->value*stacktop->value; /* sec^2 */

	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax]
	fmul	QWORD PTR [ecx]
	fld1
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _x$[ebp]

; 903  :                SECOND = x*stacktop->second[i][j] +

	mov	DWORD PTR _i$90106[ebp], 0
	jmp	SHORT $LN389@eval_secon
$LN388@eval_secon:
	mov	edx, DWORD PTR _i$90106[ebp]
	add	edx, 1
	mov	DWORD PTR _i$90106[ebp], edx
$LN389@eval_secon:
	mov	eax, DWORD PTR _i$90106[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	$LN387@eval_secon
	mov	DWORD PTR _j$90107[ebp], 0
	jmp	SHORT $LN386@eval_secon
$LN385@eval_secon:
	mov	ecx, DWORD PTR _j$90107[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$90107[ebp], ecx
$LN386@eval_secon:
	mov	edx, DWORD PTR _j$90107[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN384@eval_secon

; 904  :                  2*x*stacktop->value*stacktop->deriv[i]*stacktop->deriv[j];

	mov	eax, DWORD PTR _i$90106[ebp]
	imul	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	lea	edx, DWORD PTR [ecx+eax+104]
	mov	eax, DWORD PTR _j$90107[ebp]
	fld	QWORD PTR _x$[ebp]
	fmul	QWORD PTR [edx+eax*8]
	fld	QWORD PTR __real@4000000000000000
	fmul	QWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [ecx]
	mov	edx, DWORD PTR _i$90106[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [eax+edx*8+8]
	mov	ecx, DWORD PTR _j$90107[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [edx+ecx*8+8]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _i$90106[ebp]
	imul	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	lea	edx, DWORD PTR [ecx+eax+104]
	mov	eax, DWORD PTR _j$90107[ebp]
	fstp	QWORD PTR [edx+eax*8]
	jmp	SHORT $LN385@eval_secon
$LN384@eval_secon:
	jmp	$LN388@eval_secon
$LN387@eval_secon:

; 905  :                FIRST *= x;

	mov	DWORD PTR _i$90106[ebp], 0
	jmp	SHORT $LN383@eval_secon
$LN382@eval_secon:
	mov	ecx, DWORD PTR _i$90106[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$90106[ebp], ecx
$LN383@eval_secon:
	mov	edx, DWORD PTR _i$90106[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN381@eval_secon
	mov	eax, DWORD PTR _i$90106[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+eax*8+8]
	fmul	QWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _i$90106[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax+edx*8+8]
	jmp	SHORT $LN382@eval_secon
$LN381@eval_secon:

; 906  :                 break;

	jmp	$LN887@eval_secon
$LN380@eval_secon:

; 907  :            }
; 908  : 
; 909  :        case SINH_NODE:
; 910  :            { int i,j;
; 911  :              y = exp(stacktop->value);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	sub	esp, 8
	fld	QWORD PTR [ecx]
	fstp	QWORD PTR [esp]
	call	_exp
	add	esp, 8
	fstp	QWORD PTR _y$[ebp]

; 912  :              x = (y+1/y)/2;

	fld1
	fdiv	QWORD PTR _y$[ebp]
	fadd	QWORD PTR _y$[ebp]
	fdiv	QWORD PTR __real@4000000000000000
	fstp	QWORD PTR _x$[ebp]

; 913  :              y = (y-1/y)/2;

	fld1
	fdiv	QWORD PTR _y$[ebp]
	fsubr	QWORD PTR _y$[ebp]
	fdiv	QWORD PTR __real@4000000000000000
	fstp	QWORD PTR _y$[ebp]

; 914  :              SECOND = y*stacktop->deriv[i]*stacktop->deriv[j]

	mov	DWORD PTR _i$90118[ebp], 0
	jmp	SHORT $LN379@eval_secon
$LN378@eval_secon:
	mov	edx, DWORD PTR _i$90118[ebp]
	add	edx, 1
	mov	DWORD PTR _i$90118[ebp], edx
$LN379@eval_secon:
	mov	eax, DWORD PTR _i$90118[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	$LN377@eval_secon
	mov	DWORD PTR _j$90119[ebp], 0
	jmp	SHORT $LN376@eval_secon
$LN375@eval_secon:
	mov	ecx, DWORD PTR _j$90119[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$90119[ebp], ecx
$LN376@eval_secon:
	mov	edx, DWORD PTR _j$90119[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN374@eval_secon

; 915  :                          + x*stacktop->second[i][j];

	mov	eax, DWORD PTR _i$90118[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _y$[ebp]
	fmul	QWORD PTR [ecx+eax*8+8]
	mov	edx, DWORD PTR _j$90119[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [eax+edx*8+8]
	mov	ecx, DWORD PTR _i$90118[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [edx+ecx+104]
	mov	ecx, DWORD PTR _j$90119[ebp]
	fld	QWORD PTR _x$[ebp]
	fmul	QWORD PTR [eax+ecx*8]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _i$90118[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _j$90119[ebp]
	fstp	QWORD PTR [ecx+edx*8]
	jmp	SHORT $LN375@eval_secon
$LN374@eval_secon:
	jmp	$LN378@eval_secon
$LN377@eval_secon:

; 916  :              FIRST *= x;

	mov	DWORD PTR _i$90118[ebp], 0
	jmp	SHORT $LN373@eval_secon
$LN372@eval_secon:
	mov	eax, DWORD PTR _i$90118[ebp]
	add	eax, 1
	mov	DWORD PTR _i$90118[ebp], eax
$LN373@eval_secon:
	mov	ecx, DWORD PTR _i$90118[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN371@eval_secon
	mov	edx, DWORD PTR _i$90118[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax+edx*8+8]
	fmul	QWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _i$90118[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx+ecx*8+8]
	jmp	SHORT $LN372@eval_secon
$LN371@eval_secon:

; 917  :              stacktop->value = y;

	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _y$[ebp]
	fstp	QWORD PTR [eax]

; 918  :              break ;

	jmp	$LN887@eval_secon
$LN370@eval_secon:

; 919  :            }
; 920  :        
; 921  :        case COSH_NODE:
; 922  :            { int i,j;
; 923  :              y = exp(stacktop->value);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	sub	esp, 8
	fld	QWORD PTR [ecx]
	fstp	QWORD PTR [esp]
	call	_exp
	add	esp, 8
	fstp	QWORD PTR _y$[ebp]

; 924  :              x = (y-1/y)/2;

	fld1
	fdiv	QWORD PTR _y$[ebp]
	fsubr	QWORD PTR _y$[ebp]
	fdiv	QWORD PTR __real@4000000000000000
	fstp	QWORD PTR _x$[ebp]

; 925  :              y = (y+1/y)/2;

	fld1
	fdiv	QWORD PTR _y$[ebp]
	fadd	QWORD PTR _y$[ebp]
	fdiv	QWORD PTR __real@4000000000000000
	fstp	QWORD PTR _y$[ebp]

; 926  :              SECOND = y*stacktop->deriv[i]*stacktop->deriv[j]

	mov	DWORD PTR _i$90130[ebp], 0
	jmp	SHORT $LN369@eval_secon
$LN368@eval_secon:
	mov	edx, DWORD PTR _i$90130[ebp]
	add	edx, 1
	mov	DWORD PTR _i$90130[ebp], edx
$LN369@eval_secon:
	mov	eax, DWORD PTR _i$90130[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	$LN367@eval_secon
	mov	DWORD PTR _j$90131[ebp], 0
	jmp	SHORT $LN366@eval_secon
$LN365@eval_secon:
	mov	ecx, DWORD PTR _j$90131[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$90131[ebp], ecx
$LN366@eval_secon:
	mov	edx, DWORD PTR _j$90131[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN364@eval_secon

; 927  :                          + x*stacktop->second[i][j];

	mov	eax, DWORD PTR _i$90130[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _y$[ebp]
	fmul	QWORD PTR [ecx+eax*8+8]
	mov	edx, DWORD PTR _j$90131[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [eax+edx*8+8]
	mov	ecx, DWORD PTR _i$90130[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [edx+ecx+104]
	mov	ecx, DWORD PTR _j$90131[ebp]
	fld	QWORD PTR _x$[ebp]
	fmul	QWORD PTR [eax+ecx*8]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _i$90130[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _j$90131[ebp]
	fstp	QWORD PTR [ecx+edx*8]
	jmp	SHORT $LN365@eval_secon
$LN364@eval_secon:
	jmp	$LN368@eval_secon
$LN367@eval_secon:

; 928  :              FIRST *= x;

	mov	DWORD PTR _i$90130[ebp], 0
	jmp	SHORT $LN363@eval_secon
$LN362@eval_secon:
	mov	eax, DWORD PTR _i$90130[ebp]
	add	eax, 1
	mov	DWORD PTR _i$90130[ebp], eax
$LN363@eval_secon:
	mov	ecx, DWORD PTR _i$90130[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN361@eval_secon
	mov	edx, DWORD PTR _i$90130[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax+edx*8+8]
	fmul	QWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _i$90130[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx+ecx*8+8]
	jmp	SHORT $LN362@eval_secon
$LN361@eval_secon:

; 929  :              stacktop->value = y;

	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _y$[ebp]
	fstp	QWORD PTR [eax]

; 930  :              break;

	jmp	$LN887@eval_secon
$LN360@eval_secon:

; 931  :            }
; 932  : 
; 933  :        case TANH_NODE:
; 934  :            { int i,j;
; 935  :              y = exp(stacktop->value);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	sub	esp, 8
	fld	QWORD PTR [ecx]
	fstp	QWORD PTR [esp]
	call	_exp
	add	esp, 8
	fstp	QWORD PTR _y$[ebp]

; 936  :              x = (y-1/y)/2;

	fld1
	fdiv	QWORD PTR _y$[ebp]
	fsubr	QWORD PTR _y$[ebp]
	fdiv	QWORD PTR __real@4000000000000000
	fstp	QWORD PTR _x$[ebp]

; 937  :              y = (y+1/y)/2;

	fld1
	fdiv	QWORD PTR _y$[ebp]
	fadd	QWORD PTR _y$[ebp]
	fdiv	QWORD PTR __real@4000000000000000
	fstp	QWORD PTR _y$[ebp]

; 938  :              SECOND = -2*x/y/y/y*stacktop->deriv[i]*stacktop->deriv[j]

	mov	DWORD PTR _i$90142[ebp], 0
	jmp	SHORT $LN359@eval_secon
$LN358@eval_secon:
	mov	edx, DWORD PTR _i$90142[ebp]
	add	edx, 1
	mov	DWORD PTR _i$90142[ebp], edx
$LN359@eval_secon:
	mov	eax, DWORD PTR _i$90142[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	$LN357@eval_secon
	mov	DWORD PTR _j$90143[ebp], 0
	jmp	SHORT $LN356@eval_secon
$LN355@eval_secon:
	mov	ecx, DWORD PTR _j$90143[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$90143[ebp], ecx
$LN356@eval_secon:
	mov	edx, DWORD PTR _j$90143[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN354@eval_secon

; 939  :                          + 1/y/y*stacktop->second[i][j];

	fld	QWORD PTR __real@c000000000000000
	fmul	QWORD PTR _x$[ebp]
	fdiv	QWORD PTR _y$[ebp]
	fdiv	QWORD PTR _y$[ebp]
	fdiv	QWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _i$90142[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [ecx+eax*8+8]
	mov	edx, DWORD PTR _j$90143[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [eax+edx*8+8]
	fld1
	fdiv	QWORD PTR _y$[ebp]
	fdiv	QWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _i$90142[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [edx+ecx+104]
	mov	ecx, DWORD PTR _j$90143[ebp]
	fmul	QWORD PTR [eax+ecx*8]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _i$90142[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _j$90143[ebp]
	fstp	QWORD PTR [ecx+edx*8]
	jmp	$LN355@eval_secon
$LN354@eval_secon:
	jmp	$LN358@eval_secon
$LN357@eval_secon:

; 940  :              FIRST  /= y*y ;

	mov	DWORD PTR _i$90142[ebp], 0
	jmp	SHORT $LN353@eval_secon
$LN352@eval_secon:
	mov	eax, DWORD PTR _i$90142[ebp]
	add	eax, 1
	mov	DWORD PTR _i$90142[ebp], eax
$LN353@eval_secon:
	mov	ecx, DWORD PTR _i$90142[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN351@eval_secon
	fld	QWORD PTR _y$[ebp]
	fmul	QWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _i$90142[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fdivr	QWORD PTR [eax+edx*8+8]
	mov	ecx, DWORD PTR _i$90142[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx+ecx*8+8]
	jmp	SHORT $LN352@eval_secon
$LN351@eval_secon:

; 941  :              stacktop->value = x/y;

	fld	QWORD PTR _x$[ebp]
	fdiv	QWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]

; 942  :              break;

	jmp	$LN887@eval_secon
$LN350@eval_secon:

; 943  :            }
; 944  : 
; 945  :        case ASINH_NODE:
; 946  :            { int i,j;
; 947  :              y = 1/sqrt(1+stacktop->value*stacktop->value);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx]
	fmul	QWORD PTR [edx]
	fld1
	faddp	ST(1), ST(0)
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fld1
	fdivrp	ST(1), ST(0)
	fstp	QWORD PTR _y$[ebp]

; 948  :              x = -stacktop->value*y*y*y;

	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax]
	fchs
	fmul	QWORD PTR _y$[ebp]
	fmul	QWORD PTR _y$[ebp]
	fmul	QWORD PTR _y$[ebp]
	fstp	QWORD PTR _x$[ebp]

; 949  :              SECOND = x*stacktop->deriv[i]*stacktop->deriv[j]

	mov	DWORD PTR _i$90154[ebp], 0
	jmp	SHORT $LN349@eval_secon
$LN348@eval_secon:
	mov	ecx, DWORD PTR _i$90154[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$90154[ebp], ecx
$LN349@eval_secon:
	mov	edx, DWORD PTR _i$90154[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	$LN347@eval_secon
	mov	DWORD PTR _j$90155[ebp], 0
	jmp	SHORT $LN346@eval_secon
$LN345@eval_secon:
	mov	eax, DWORD PTR _j$90155[ebp]
	add	eax, 1
	mov	DWORD PTR _j$90155[ebp], eax
$LN346@eval_secon:
	mov	ecx, DWORD PTR _j$90155[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN344@eval_secon

; 950  :                          + y*stacktop->second[i][j];

	mov	edx, DWORD PTR _i$90154[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _x$[ebp]
	fmul	QWORD PTR [eax+edx*8+8]
	mov	ecx, DWORD PTR _j$90155[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [edx+ecx*8+8]
	mov	eax, DWORD PTR _i$90154[ebp]
	imul	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	lea	edx, DWORD PTR [ecx+eax+104]
	mov	eax, DWORD PTR _j$90155[ebp]
	fld	QWORD PTR _y$[ebp]
	fmul	QWORD PTR [edx+eax*8]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _i$90154[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [edx+ecx+104]
	mov	ecx, DWORD PTR _j$90155[ebp]
	fstp	QWORD PTR [eax+ecx*8]
	jmp	SHORT $LN345@eval_secon
$LN344@eval_secon:
	jmp	$LN348@eval_secon
$LN347@eval_secon:

; 951  :              FIRST *= y;

	mov	DWORD PTR _i$90154[ebp], 0
	jmp	SHORT $LN343@eval_secon
$LN342@eval_secon:
	mov	edx, DWORD PTR _i$90154[ebp]
	add	edx, 1
	mov	DWORD PTR _i$90154[ebp], edx
$LN343@eval_secon:
	mov	eax, DWORD PTR _i$90154[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN341@eval_secon
	mov	ecx, DWORD PTR _i$90154[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [edx+ecx*8+8]
	fmul	QWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _i$90154[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx+eax*8+8]
	jmp	SHORT $LN342@eval_secon
$LN341@eval_secon:

; 952  :              stacktop->value = log(stacktop->value + 
; 953  :                       sqrt(stacktop->value*stacktop->value + 1));

	mov	edx, DWORD PTR _stacktop$[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [edx]
	fmul	QWORD PTR [eax]
	fadd	QWORD PTR __real@3ff0000000000000
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fadd	QWORD PTR [ecx]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_log
	add	esp, 8
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]

; 954  :              break;

	jmp	$LN887@eval_secon
$LN340@eval_secon:

; 955  :            }
; 956  : 
; 957  :        case ACOSH_NODE:
; 958  :            { int i,j;
; 959  :              if ( stacktop->value <= 1.0 )

	mov	eax, DWORD PTR _stacktop$[ebp]
	fld1
	fcomp	QWORD PTR [eax]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN339@eval_secon

; 960  :              { sprintf(errmsg,"Acosh argument less than 1.\n");

	push	OFFSET ??_C@_0BN@BLAKMPAE@Acosh?5argument?5less?5than?51?4?6?$AA@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 8

; 961  :                sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 962  :                  file_names[node->file_no],node->line_no);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _file_names
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 963  :                kb_error(2572,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2572					; 00000a0cH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN339@eval_secon:

; 964  :              }
; 965  :              y = 1/sqrt(stacktop->value*stacktop->value - 1);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx]
	fmul	QWORD PTR [edx]
	fsub	QWORD PTR __real@3ff0000000000000
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fld1
	fdivrp	ST(1), ST(0)
	fstp	QWORD PTR _y$[ebp]

; 966  :              x = -stacktop->value*y*y*y;

	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax]
	fchs
	fmul	QWORD PTR _y$[ebp]
	fmul	QWORD PTR _y$[ebp]
	fmul	QWORD PTR _y$[ebp]
	fstp	QWORD PTR _x$[ebp]

; 967  :              SECOND = x*stacktop->deriv[i]*stacktop->deriv[j]

	mov	DWORD PTR _i$90166[ebp], 0
	jmp	SHORT $LN338@eval_secon
$LN337@eval_secon:
	mov	ecx, DWORD PTR _i$90166[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$90166[ebp], ecx
$LN338@eval_secon:
	mov	edx, DWORD PTR _i$90166[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	$LN336@eval_secon
	mov	DWORD PTR _j$90167[ebp], 0
	jmp	SHORT $LN335@eval_secon
$LN334@eval_secon:
	mov	eax, DWORD PTR _j$90167[ebp]
	add	eax, 1
	mov	DWORD PTR _j$90167[ebp], eax
$LN335@eval_secon:
	mov	ecx, DWORD PTR _j$90167[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN333@eval_secon

; 968  :                          + y*stacktop->second[i][j];

	mov	edx, DWORD PTR _i$90166[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _x$[ebp]
	fmul	QWORD PTR [eax+edx*8+8]
	mov	ecx, DWORD PTR _j$90167[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [edx+ecx*8+8]
	mov	eax, DWORD PTR _i$90166[ebp]
	imul	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	lea	edx, DWORD PTR [ecx+eax+104]
	mov	eax, DWORD PTR _j$90167[ebp]
	fld	QWORD PTR _y$[ebp]
	fmul	QWORD PTR [edx+eax*8]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _i$90166[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [edx+ecx+104]
	mov	ecx, DWORD PTR _j$90167[ebp]
	fstp	QWORD PTR [eax+ecx*8]
	jmp	SHORT $LN334@eval_secon
$LN333@eval_secon:
	jmp	$LN337@eval_secon
$LN336@eval_secon:

; 969  :              FIRST *= y;

	mov	DWORD PTR _i$90166[ebp], 0
	jmp	SHORT $LN332@eval_secon
$LN331@eval_secon:
	mov	edx, DWORD PTR _i$90166[ebp]
	add	edx, 1
	mov	DWORD PTR _i$90166[ebp], edx
$LN332@eval_secon:
	mov	eax, DWORD PTR _i$90166[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN330@eval_secon
	mov	ecx, DWORD PTR _i$90166[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [edx+ecx*8+8]
	fmul	QWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _i$90166[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx+eax*8+8]
	jmp	SHORT $LN331@eval_secon
$LN330@eval_secon:

; 970  :              stacktop->value = 2*log(sqrt(stacktop->value + 1) +
; 971  :                    sqrt(stacktop->value - 1)) - log(2.0);

	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [edx]
	fadd	QWORD PTR __real@3ff0000000000000
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax]
	fsub	QWORD PTR __real@3ff0000000000000
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fstp	QWORD PTR tv9035[ebp]
	call	_sqrt
	add	esp, 8
	fadd	QWORD PTR tv9035[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_log
	add	esp, 8
	fmul	QWORD PTR __real@4000000000000000
	sub	esp, 8
	fld	QWORD PTR __real@4000000000000000
	fstp	QWORD PTR [esp]
	fstp	QWORD PTR tv9037[ebp]
	call	_log
	add	esp, 8
	fsubr	QWORD PTR tv9037[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx]

; 972  :              break;

	jmp	$LN887@eval_secon
$LN329@eval_secon:

; 973  :            }
; 974  : 
; 975  :        case ATANH_NODE:
; 976  :            { int i,j;
; 977  :              if ( fabs(stacktop->value)  >= 1 )

	mov	edx, DWORD PTR _stacktop$[ebp]
	sub	esp, 8
	fld	QWORD PTR [edx]
	fstp	QWORD PTR [esp]
	call	_fabs
	add	esp, 8
	fcomp	QWORD PTR __real@3ff0000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN328@eval_secon

; 978  :              { sprintf(errmsg,"Atanh argument magnitude greater than 1.\n");

	push	OFFSET ??_C@_0CK@NCOPKELJ@Atanh?5argument?5magnitude?5greater@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 8

; 979  :                sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 980  :                  file_names[node->file_no],node->line_no);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _file_names
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 981  :                kb_error(2573,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2573					; 00000a0dH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN328@eval_secon:

; 982  :              }
; 983  :              y = 1/(1 - stacktop->value*stacktop->value);

	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax]
	fmul	QWORD PTR [ecx]
	fld1
	fsubrp	ST(1), ST(0)
	fld1
	fdivrp	ST(1), ST(0)
	fstp	QWORD PTR _y$[ebp]

; 984  :              x = 2*stacktop->value*y*y;

	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR __real@4000000000000000
	fmul	QWORD PTR [edx]
	fmul	QWORD PTR _y$[ebp]
	fmul	QWORD PTR _y$[ebp]
	fstp	QWORD PTR _x$[ebp]

; 985  :              SECOND = x*stacktop->deriv[i]*stacktop->deriv[j]

	mov	DWORD PTR _i$90180[ebp], 0
	jmp	SHORT $LN327@eval_secon
$LN326@eval_secon:
	mov	eax, DWORD PTR _i$90180[ebp]
	add	eax, 1
	mov	DWORD PTR _i$90180[ebp], eax
$LN327@eval_secon:
	mov	ecx, DWORD PTR _i$90180[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	$LN325@eval_secon
	mov	DWORD PTR _j$90181[ebp], 0
	jmp	SHORT $LN324@eval_secon
$LN323@eval_secon:
	mov	edx, DWORD PTR _j$90181[ebp]
	add	edx, 1
	mov	DWORD PTR _j$90181[ebp], edx
$LN324@eval_secon:
	mov	eax, DWORD PTR _j$90181[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN322@eval_secon

; 986  :                          + y*stacktop->second[i][j];

	mov	ecx, DWORD PTR _i$90180[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _x$[ebp]
	fmul	QWORD PTR [edx+ecx*8+8]
	mov	eax, DWORD PTR _j$90181[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [ecx+eax*8+8]
	mov	edx, DWORD PTR _i$90180[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _j$90181[ebp]
	fld	QWORD PTR _y$[ebp]
	fmul	QWORD PTR [ecx+edx*8]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _i$90180[ebp]
	imul	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	lea	edx, DWORD PTR [ecx+eax+104]
	mov	eax, DWORD PTR _j$90181[ebp]
	fstp	QWORD PTR [edx+eax*8]
	jmp	SHORT $LN323@eval_secon
$LN322@eval_secon:
	jmp	$LN326@eval_secon
$LN325@eval_secon:

; 987  :              FIRST *= y;

	mov	DWORD PTR _i$90180[ebp], 0
	jmp	SHORT $LN321@eval_secon
$LN320@eval_secon:
	mov	ecx, DWORD PTR _i$90180[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$90180[ebp], ecx
$LN321@eval_secon:
	mov	edx, DWORD PTR _i$90180[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN319@eval_secon
	mov	eax, DWORD PTR _i$90180[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+eax*8+8]
	fmul	QWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _i$90180[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax+edx*8+8]
	jmp	SHORT $LN320@eval_secon
$LN319@eval_secon:

; 988  :              stacktop->value = log(stacktop->value + 1)/2 -
; 989  :                    log(stacktop->value - 1)/2;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx]
	fadd	QWORD PTR __real@3ff0000000000000
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_log
	add	esp, 8
	fdiv	QWORD PTR __real@4000000000000000
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [edx]
	fsub	QWORD PTR __real@3ff0000000000000
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fstp	QWORD PTR tv9039[ebp]
	call	_log
	add	esp, 8
	fdiv	QWORD PTR __real@4000000000000000
	fsubr	QWORD PTR tv9039[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]

; 990  :              break;

	jmp	$LN887@eval_secon
$LN318@eval_secon:

; 991  :            }
; 992  : 
; 993  :        case CHS_NODE:
; 994  :            { int i,j;
; 995  :              SECOND *= -1;

	mov	DWORD PTR _i$90194[ebp], 0
	jmp	SHORT $LN317@eval_secon
$LN316@eval_secon:
	mov	ecx, DWORD PTR _i$90194[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$90194[ebp], ecx
$LN317@eval_secon:
	mov	edx, DWORD PTR _i$90194[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN315@eval_secon
	mov	DWORD PTR _j$90195[ebp], 0
	jmp	SHORT $LN314@eval_secon
$LN313@eval_secon:
	mov	eax, DWORD PTR _j$90195[ebp]
	add	eax, 1
	mov	DWORD PTR _j$90195[ebp], eax
$LN314@eval_secon:
	mov	ecx, DWORD PTR _j$90195[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN312@eval_secon
	mov	edx, DWORD PTR _i$90194[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _j$90195[ebp]
	fld	QWORD PTR [ecx+edx*8]
	fmul	QWORD PTR __real@bff0000000000000
	mov	eax, DWORD PTR _i$90194[ebp]
	imul	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	lea	edx, DWORD PTR [ecx+eax+104]
	mov	eax, DWORD PTR _j$90195[ebp]
	fstp	QWORD PTR [edx+eax*8]
	jmp	SHORT $LN313@eval_secon
$LN312@eval_secon:
	jmp	SHORT $LN316@eval_secon
$LN315@eval_secon:

; 996  :              FIRST = -stacktop->deriv[i];

	mov	DWORD PTR _i$90194[ebp], 0
	jmp	SHORT $LN311@eval_secon
$LN310@eval_secon:
	mov	ecx, DWORD PTR _i$90194[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$90194[ebp], ecx
$LN311@eval_secon:
	mov	edx, DWORD PTR _i$90194[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN309@eval_secon
	mov	eax, DWORD PTR _i$90194[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+eax*8+8]
	fchs
	mov	edx, DWORD PTR _i$90194[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax+edx*8+8]
	jmp	SHORT $LN310@eval_secon
$LN309@eval_secon:

; 997  :              stacktop->value = -stacktop->value;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx]
	fchs
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]

; 998  :              break;

	jmp	$LN887@eval_secon
$LN308@eval_secon:

; 999  :            }
; 1000 :        
; 1001 :        case INV_NODE:
; 1002 :            { int i,j;
; 1003 :              if ( stacktop->value == 0.0 )

	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN307@eval_secon

; 1004 :                { sprintf(errmsg,"Division by zero.\n");

	push	OFFSET ??_C@_0BD@KKBNAHFA@Division?5by?5zero?4?6?$AA@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 8

; 1005 :                  sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 1006 :                     file_names[node->file_no],node->line_no);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _file_names
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 1007 :                  kb_error(2574,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2574					; 00000a0eH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN307@eval_secon:

; 1008 :                }
; 1009 :              SECOND = (2*stacktop->deriv[i]*stacktop->deriv[i]/stacktop->value

	mov	DWORD PTR _i$90206[ebp], 0
	jmp	SHORT $LN306@eval_secon
$LN305@eval_secon:
	mov	ecx, DWORD PTR _i$90206[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$90206[ebp], ecx
$LN306@eval_secon:
	mov	edx, DWORD PTR _i$90206[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	$LN304@eval_secon
	mov	DWORD PTR _j$90207[ebp], 0
	jmp	SHORT $LN303@eval_secon
$LN302@eval_secon:
	mov	eax, DWORD PTR _j$90207[ebp]
	add	eax, 1
	mov	DWORD PTR _j$90207[ebp], eax
$LN303@eval_secon:
	mov	ecx, DWORD PTR _j$90207[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN301@eval_secon

; 1010 :                  - stacktop->second[i][j])/stacktop->value/stacktop->value;

	mov	edx, DWORD PTR _i$90206[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR __real@4000000000000000
	fmul	QWORD PTR [eax+edx*8+8]
	mov	ecx, DWORD PTR _i$90206[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [edx+ecx*8+8]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fdiv	QWORD PTR [eax]
	mov	ecx, DWORD PTR _i$90206[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [edx+ecx+104]
	mov	ecx, DWORD PTR _j$90207[ebp]
	fsub	QWORD PTR [eax+ecx*8]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fdiv	QWORD PTR [edx]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fdiv	QWORD PTR [eax]
	mov	ecx, DWORD PTR _i$90206[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [edx+ecx+104]
	mov	ecx, DWORD PTR _j$90207[ebp]
	fstp	QWORD PTR [eax+ecx*8]
	jmp	SHORT $LN302@eval_secon
$LN301@eval_secon:
	jmp	$LN305@eval_secon
$LN304@eval_secon:

; 1011 :              FIRST /= stacktop->value*stacktop->value;

	mov	DWORD PTR _i$90206[ebp], 0
	jmp	SHORT $LN300@eval_secon
$LN299@eval_secon:
	mov	edx, DWORD PTR _i$90206[ebp]
	add	edx, 1
	mov	DWORD PTR _i$90206[ebp], edx
$LN300@eval_secon:
	mov	eax, DWORD PTR _i$90206[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN298@eval_secon
	mov	ecx, DWORD PTR _stacktop$[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx]
	fmul	QWORD PTR [edx]
	mov	eax, DWORD PTR _i$90206[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fdivr	QWORD PTR [ecx+eax*8+8]
	mov	edx, DWORD PTR _i$90206[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax+edx*8+8]
	jmp	SHORT $LN299@eval_secon
$LN298@eval_secon:

; 1012 :              stacktop->value = 1/stacktop->value;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld1
	fdiv	QWORD PTR [ecx]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]

; 1013 :              break;

	jmp	$LN887@eval_secon
$LN297@eval_secon:

; 1014 :            }
; 1015 : 
; 1016 :        case ELLIPTICK_NODE:
; 1017 :            { int i,j;
; 1018 :              x = stacktop->value;

	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax]
	fstp	QWORD PTR _x$[ebp]

; 1019 :              stacktop->value = ellipticK(x);

	sub	esp, 8
	fld	QWORD PTR _x$[ebp]
	fstp	QWORD PTR [esp]
	call	_ellipticK
	add	esp, 8
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx]

; 1020 :              SECOND = ellipticKdmdm(x)*stacktop->deriv[i]*stacktop->deriv[j]

	mov	DWORD PTR _i$90219[ebp], 0
	jmp	SHORT $LN296@eval_secon
$LN295@eval_secon:
	mov	edx, DWORD PTR _i$90219[ebp]
	add	edx, 1
	mov	DWORD PTR _i$90219[ebp], edx
$LN296@eval_secon:
	mov	eax, DWORD PTR _i$90219[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	$LN294@eval_secon
	mov	DWORD PTR _j$90220[ebp], 0
	jmp	SHORT $LN293@eval_secon
$LN292@eval_secon:
	mov	ecx, DWORD PTR _j$90220[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$90220[ebp], ecx
$LN293@eval_secon:
	mov	edx, DWORD PTR _j$90220[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN291@eval_secon

; 1021 :                           + ellipticKdm(x)*stacktop->second[i][j];

	sub	esp, 8
	fld	QWORD PTR _x$[ebp]
	fstp	QWORD PTR [esp]
	call	_ellipticKdmdm
	add	esp, 8
	mov	eax, DWORD PTR _i$90219[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [ecx+eax*8+8]
	mov	edx, DWORD PTR _j$90220[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [eax+edx*8+8]
	sub	esp, 8
	fld	QWORD PTR _x$[ebp]
	fstp	QWORD PTR [esp]
	fstp	QWORD PTR tv9041[ebp]
	call	_ellipticKdm
	add	esp, 8
	mov	ecx, DWORD PTR _i$90219[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [edx+ecx+104]
	mov	ecx, DWORD PTR _j$90220[ebp]
	fmul	QWORD PTR [eax+ecx*8]
	fadd	QWORD PTR tv9041[ebp]
	mov	edx, DWORD PTR _i$90219[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _j$90220[ebp]
	fstp	QWORD PTR [ecx+edx*8]
	jmp	$LN292@eval_secon
$LN291@eval_secon:
	jmp	$LN295@eval_secon
$LN294@eval_secon:

; 1022 :              FIRST = ellipticKdm(x)*stacktop->deriv[i];

	mov	DWORD PTR _i$90219[ebp], 0
	jmp	SHORT $LN290@eval_secon
$LN289@eval_secon:
	mov	eax, DWORD PTR _i$90219[ebp]
	add	eax, 1
	mov	DWORD PTR _i$90219[ebp], eax
$LN290@eval_secon:
	mov	ecx, DWORD PTR _i$90219[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN288@eval_secon
	sub	esp, 8
	fld	QWORD PTR _x$[ebp]
	fstp	QWORD PTR [esp]
	call	_ellipticKdm
	add	esp, 8
	mov	edx, DWORD PTR _i$90219[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [eax+edx*8+8]
	mov	ecx, DWORD PTR _i$90219[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx+ecx*8+8]
	jmp	SHORT $LN289@eval_secon
$LN288@eval_secon:

; 1023 :              break;

	jmp	$LN887@eval_secon
$LN287@eval_secon:

; 1024 :            }
; 1025 : 
; 1026 :        case ELLIPTICE_NODE:
; 1027 :            { int i,j;
; 1028 :              x = stacktop->value;

	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax]
	fstp	QWORD PTR _x$[ebp]

; 1029 :              stacktop->value = ellipticE(x);

	sub	esp, 8
	fld	QWORD PTR _x$[ebp]
	fstp	QWORD PTR [esp]
	call	_ellipticE
	add	esp, 8
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx]

; 1030 :              SECOND = ellipticEdmdm(x)*stacktop->deriv[i]*stacktop->deriv[j]

	mov	DWORD PTR _i$90231[ebp], 0
	jmp	SHORT $LN286@eval_secon
$LN285@eval_secon:
	mov	edx, DWORD PTR _i$90231[ebp]
	add	edx, 1
	mov	DWORD PTR _i$90231[ebp], edx
$LN286@eval_secon:
	mov	eax, DWORD PTR _i$90231[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	$LN284@eval_secon
	mov	DWORD PTR _j$90232[ebp], 0
	jmp	SHORT $LN283@eval_secon
$LN282@eval_secon:
	mov	ecx, DWORD PTR _j$90232[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$90232[ebp], ecx
$LN283@eval_secon:
	mov	edx, DWORD PTR _j$90232[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN281@eval_secon

; 1031 :                           + ellipticEdm(x)*stacktop->second[i][j];

	sub	esp, 8
	fld	QWORD PTR _x$[ebp]
	fstp	QWORD PTR [esp]
	call	_ellipticEdmdm
	add	esp, 8
	mov	eax, DWORD PTR _i$90231[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [ecx+eax*8+8]
	mov	edx, DWORD PTR _j$90232[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [eax+edx*8+8]
	sub	esp, 8
	fld	QWORD PTR _x$[ebp]
	fstp	QWORD PTR [esp]
	fstp	QWORD PTR tv9043[ebp]
	call	_ellipticEdm
	add	esp, 8
	mov	ecx, DWORD PTR _i$90231[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [edx+ecx+104]
	mov	ecx, DWORD PTR _j$90232[ebp]
	fmul	QWORD PTR [eax+ecx*8]
	fadd	QWORD PTR tv9043[ebp]
	mov	edx, DWORD PTR _i$90231[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _j$90232[ebp]
	fstp	QWORD PTR [ecx+edx*8]
	jmp	$LN282@eval_secon
$LN281@eval_secon:
	jmp	$LN285@eval_secon
$LN284@eval_secon:

; 1032 :              FIRST = ellipticEdm(x)*stacktop->deriv[i];

	mov	DWORD PTR _i$90231[ebp], 0
	jmp	SHORT $LN280@eval_secon
$LN279@eval_secon:
	mov	eax, DWORD PTR _i$90231[ebp]
	add	eax, 1
	mov	DWORD PTR _i$90231[ebp], eax
$LN280@eval_secon:
	mov	ecx, DWORD PTR _i$90231[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN278@eval_secon
	sub	esp, 8
	fld	QWORD PTR _x$[ebp]
	fstp	QWORD PTR [esp]
	call	_ellipticEdm
	add	esp, 8
	mov	edx, DWORD PTR _i$90231[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [eax+edx*8+8]
	mov	ecx, DWORD PTR _i$90231[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx+ecx*8+8]
	jmp	SHORT $LN279@eval_secon
$LN278@eval_secon:

; 1033 :              break;

	jmp	$LN887@eval_secon
$LN277@eval_secon:

; 1034 :            }
; 1035 :  
; 1036 :        case INCOMPLETE_ELLIPTICF_NODE:
; 1037 :             { REAL phi,m,val,dm,dphi,ddm,ddphi,dmdphi;
; 1038 :               int i,j;
; 1039 :               stacktop--;

	mov	eax, DWORD PTR _stacktop$[ebp]
	sub	eax, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], eax

; 1040 :               phi = stacktop[0].value;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx]
	fstp	QWORD PTR _phi$90243[ebp]

; 1041 :               m = stacktop[1].value;

	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [edx+1256]
	fstp	QWORD PTR _m$90244[ebp]

; 1042 :               val = incompleteEllipticFseconds(phi,m,
; 1043 :                                      &dphi,&dm,&ddphi,&ddm,&dmdphi);

	lea	eax, DWORD PTR _dmdphi$90250[ebp]
	push	eax
	lea	ecx, DWORD PTR _ddm$90248[ebp]
	push	ecx
	lea	edx, DWORD PTR _ddphi$90249[ebp]
	push	edx
	lea	eax, DWORD PTR _dm$90246[ebp]
	push	eax
	lea	ecx, DWORD PTR _dphi$90247[ebp]
	push	ecx
	sub	esp, 8
	fld	QWORD PTR _m$90244[ebp]
	fstp	QWORD PTR [esp]
	sub	esp, 8
	fld	QWORD PTR _phi$90243[ebp]
	fstp	QWORD PTR [esp]
	call	_incompleteEllipticFseconds
	add	esp, 36					; 00000024H
	fstp	QWORD PTR _val$90245[ebp]

; 1044 :               stacktop->value = val;

	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _val$90245[ebp]
	fstp	QWORD PTR [edx]

; 1045 :               SECOND = ddphi*stacktop[0].deriv[i]*stacktop[0].deriv[j]

	mov	DWORD PTR _i$90251[ebp], 0
	jmp	SHORT $LN276@eval_secon
$LN275@eval_secon:
	mov	eax, DWORD PTR _i$90251[ebp]
	add	eax, 1
	mov	DWORD PTR _i$90251[ebp], eax
$LN276@eval_secon:
	mov	ecx, DWORD PTR _i$90251[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	$LN274@eval_secon
	mov	DWORD PTR _j$90252[ebp], 0
	jmp	SHORT $LN273@eval_secon
$LN272@eval_secon:
	mov	edx, DWORD PTR _j$90252[ebp]
	add	edx, 1
	mov	DWORD PTR _j$90252[ebp], edx
$LN273@eval_secon:
	mov	eax, DWORD PTR _j$90252[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	$LN271@eval_secon

; 1046 :                 + ddm*stacktop[1].deriv[i]*stacktop[1].deriv[j]
; 1047 :                 + dmdphi*(stacktop[0].deriv[i]*stacktop[1].deriv[j]
; 1048 :                         + stacktop[1].deriv[i]*stacktop[0].deriv[j])
; 1049 :                 + dphi*stacktop[0].second[i][j]
; 1050 :                 + dm*stacktop[1].second[i][j];

	mov	ecx, DWORD PTR _i$90251[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _ddphi$90249[ebp]
	fmul	QWORD PTR [edx+ecx*8+8]
	mov	eax, DWORD PTR _j$90252[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [ecx+eax*8+8]
	mov	edx, DWORD PTR _i$90251[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _ddm$90248[ebp]
	fmul	QWORD PTR [eax+edx*8+1264]
	mov	ecx, DWORD PTR _j$90252[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [edx+ecx*8+1264]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _i$90251[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	mov	edx, DWORD PTR _j$90252[ebp]
	mov	esi, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+eax*8+8]
	fmul	QWORD PTR [esi+edx*8+1264]
	mov	eax, DWORD PTR _i$90251[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	mov	edx, DWORD PTR _j$90252[ebp]
	mov	esi, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+eax*8+1264]
	fmul	QWORD PTR [esi+edx*8+8]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR _dmdphi$90250[ebp]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _i$90251[ebp]
	imul	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	lea	edx, DWORD PTR [ecx+eax+104]
	mov	eax, DWORD PTR _j$90252[ebp]
	fld	QWORD PTR _dphi$90247[ebp]
	fmul	QWORD PTR [edx+eax*8]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _i$90251[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1360]
	mov	ecx, DWORD PTR _j$90252[ebp]
	fld	QWORD PTR _dm$90246[ebp]
	fmul	QWORD PTR [eax+ecx*8]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _i$90251[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _j$90252[ebp]
	fstp	QWORD PTR [ecx+edx*8]
	jmp	$LN272@eval_secon
$LN271@eval_secon:
	jmp	$LN275@eval_secon
$LN274@eval_secon:

; 1051 :               FIRST = dphi*stacktop[0].deriv[i]+dm*stacktop[1].deriv[i];

	mov	DWORD PTR _i$90251[ebp], 0
	jmp	SHORT $LN270@eval_secon
$LN269@eval_secon:
	mov	eax, DWORD PTR _i$90251[ebp]
	add	eax, 1
	mov	DWORD PTR _i$90251[ebp], eax
$LN270@eval_secon:
	mov	ecx, DWORD PTR _i$90251[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN268@eval_secon
	mov	edx, DWORD PTR _i$90251[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _dphi$90247[ebp]
	fmul	QWORD PTR [eax+edx*8+8]
	mov	ecx, DWORD PTR _i$90251[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _dm$90246[ebp]
	fmul	QWORD PTR [edx+ecx*8+1264]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _i$90251[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx+eax*8+8]
	jmp	SHORT $LN269@eval_secon
$LN268@eval_secon:

; 1052 :               break;

	jmp	$LN887@eval_secon
$LN267@eval_secon:

; 1053 :             }
; 1054 :  
; 1055 :        case INCOMPLETE_ELLIPTICE_NODE:
; 1056 :             { REAL phi,m,val,dm,dphi,ddm,ddphi,dmdphi;
; 1057 :               int i,j;
; 1058 :               stacktop--;

	mov	edx, DWORD PTR _stacktop$[ebp]
	sub	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx

; 1059 :               phi = stacktop[0].value;

	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax]
	fstp	QWORD PTR _phi$90263[ebp]

; 1060 :               m = stacktop[1].value;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+1256]
	fstp	QWORD PTR _m$90264[ebp]

; 1061 :               val = incompleteEllipticEseconds(phi,m,
; 1062 :                                    &dphi,&dm,&ddphi,&ddm,&dmdphi);

	lea	edx, DWORD PTR _dmdphi$90270[ebp]
	push	edx
	lea	eax, DWORD PTR _ddm$90268[ebp]
	push	eax
	lea	ecx, DWORD PTR _ddphi$90269[ebp]
	push	ecx
	lea	edx, DWORD PTR _dm$90266[ebp]
	push	edx
	lea	eax, DWORD PTR _dphi$90267[ebp]
	push	eax
	sub	esp, 8
	fld	QWORD PTR _m$90264[ebp]
	fstp	QWORD PTR [esp]
	sub	esp, 8
	fld	QWORD PTR _phi$90263[ebp]
	fstp	QWORD PTR [esp]
	call	_incompleteEllipticEseconds
	add	esp, 36					; 00000024H
	fstp	QWORD PTR _val$90265[ebp]

; 1063 :               stacktop->value = val;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _val$90265[ebp]
	fstp	QWORD PTR [ecx]

; 1064 :               SECOND = ddphi*stacktop[0].deriv[i]*stacktop[0].deriv[j]

	mov	DWORD PTR _i$90271[ebp], 0
	jmp	SHORT $LN266@eval_secon
$LN265@eval_secon:
	mov	edx, DWORD PTR _i$90271[ebp]
	add	edx, 1
	mov	DWORD PTR _i$90271[ebp], edx
$LN266@eval_secon:
	mov	eax, DWORD PTR _i$90271[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	$LN264@eval_secon
	mov	DWORD PTR _j$90272[ebp], 0
	jmp	SHORT $LN263@eval_secon
$LN262@eval_secon:
	mov	ecx, DWORD PTR _j$90272[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$90272[ebp], ecx
$LN263@eval_secon:
	mov	edx, DWORD PTR _j$90272[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	$LN261@eval_secon

; 1065 :                 + ddm*stacktop[1].deriv[i]*stacktop[1].deriv[j]
; 1066 :                 + dmdphi*(stacktop[0].deriv[i]*stacktop[1].deriv[j]
; 1067 :                         + stacktop[1].deriv[i]*stacktop[0].deriv[j])
; 1068 :                 + dphi*stacktop[0].second[i][j]
; 1069 :                 + dm*stacktop[1].second[i][j];

	mov	eax, DWORD PTR _i$90271[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _ddphi$90269[ebp]
	fmul	QWORD PTR [ecx+eax*8+8]
	mov	edx, DWORD PTR _j$90272[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [eax+edx*8+8]
	mov	ecx, DWORD PTR _i$90271[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _ddm$90268[ebp]
	fmul	QWORD PTR [edx+ecx*8+1264]
	mov	eax, DWORD PTR _j$90272[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fmul	QWORD PTR [ecx+eax*8+1264]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _i$90271[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _j$90272[ebp]
	mov	esi, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax+edx*8+8]
	fmul	QWORD PTR [esi+ecx*8+1264]
	mov	edx, DWORD PTR _i$90271[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _j$90272[ebp]
	mov	esi, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax+edx*8+1264]
	fmul	QWORD PTR [esi+ecx*8+8]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR _dmdphi$90270[ebp]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _i$90271[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _j$90272[ebp]
	fld	QWORD PTR _dphi$90267[ebp]
	fmul	QWORD PTR [ecx+edx*8]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _i$90271[ebp]
	imul	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1360]
	mov	eax, DWORD PTR _j$90272[ebp]
	fld	QWORD PTR _dm$90266[ebp]
	fmul	QWORD PTR [edx+eax*8]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _i$90271[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _stacktop$[ebp]
	lea	eax, DWORD PTR [edx+ecx+104]
	mov	ecx, DWORD PTR _j$90272[ebp]
	fstp	QWORD PTR [eax+ecx*8]
	jmp	$LN262@eval_secon
$LN261@eval_secon:
	jmp	$LN265@eval_secon
$LN264@eval_secon:

; 1070 :               FIRST = dphi*stacktop[0].deriv[i]+dm*stacktop[1].deriv[i];

	mov	DWORD PTR _i$90271[ebp], 0
	jmp	SHORT $LN260@eval_secon
$LN259@eval_secon:
	mov	edx, DWORD PTR _i$90271[ebp]
	add	edx, 1
	mov	DWORD PTR _i$90271[ebp], edx
$LN260@eval_secon:
	mov	eax, DWORD PTR _i$90271[ebp]
	cmp	eax, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN258@eval_secon
	mov	ecx, DWORD PTR _i$90271[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _dphi$90267[ebp]
	fmul	QWORD PTR [edx+ecx*8+8]
	mov	eax, DWORD PTR _i$90271[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _dm$90266[ebp]
	fmul	QWORD PTR [ecx+eax*8+1264]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _i$90271[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax+edx*8+8]
	jmp	SHORT $LN259@eval_secon
$LN258@eval_secon:

; 1071 :               break;

	jmp	$LN887@eval_secon
$LN257@eval_secon:

; 1072 :             }
; 1073 :        /* attribute values */
; 1074 :        case GET_SQ_MEAN_CURV_NODE:
; 1075 :              if ( node->op1.localnum ) 

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN256@eval_secon

; 1076 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax+216]
	imul	eax, 1256				; 000004e8H
	mov	ecx, DWORD PTR _localstack$[ebp+eax]
	mov	DWORD PTR _id$[ebp], ecx
	jmp	SHORT $LN255@eval_secon
$LN256@eval_secon:

; 1077 :              else id = q_id;

	mov	edx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], edx
$LN255@eval_secon:

; 1078 :              stacktop->value = vertex_sq_mean_curvature(id);

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	_vertex_sq_mean_curvature
	add	esp, 4
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx]

; 1079 :              zero_seconds(pcount,stacktop);

	mov	edx, DWORD PTR _stacktop$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcount$[ebp]
	push	eax
	call	_zero_seconds
	add	esp, 8

; 1080 :              break;

	jmp	$LN887@eval_secon
$LN254@eval_secon:

; 1081 : 
; 1082 :        case GET_MEANCURV_NODE:
; 1083 :              if ( node->op1.localnum ) 

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN253@eval_secon

; 1084 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax+216]
	imul	eax, 1256				; 000004e8H
	mov	ecx, DWORD PTR _localstack$[ebp+eax]
	mov	DWORD PTR _id$[ebp], ecx
	jmp	SHORT $LN252@eval_secon
$LN253@eval_secon:

; 1085 :              else id = q_id;

	mov	edx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], edx
$LN252@eval_secon:

; 1086 :              stacktop->value = vertex_mean_curvature(id);

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	_vertex_mean_curvature
	add	esp, 4
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx]

; 1087 :              zero_seconds(pcount,stacktop);

	mov	edx, DWORD PTR _stacktop$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcount$[ebp]
	push	eax
	call	_zero_seconds
	add	esp, 8

; 1088 :              break;

	jmp	$LN887@eval_secon
$LN251@eval_secon:

; 1089 : 
; 1090 :        case GET_LENGTH_NODE:
; 1091 :              if ( node->op1.localnum ) 

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN250@eval_secon

; 1092 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax+216]
	imul	eax, 1256				; 000004e8H
	mov	ecx, DWORD PTR _localstack$[ebp+eax]
	mov	DWORD PTR _id$[ebp], ecx
	jmp	SHORT $LN249@eval_secon
$LN250@eval_secon:

; 1093 :              else id = q_id;

	mov	edx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], edx
$LN249@eval_secon:

; 1094 :              calc_edge(id);

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	_calc_edge
	add	esp, 4

; 1095 :              ++stacktop;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx

; 1096 :              stacktop->value = get_edge_length(id);

	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	call	_get_edge_length
	add	esp, 4
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]

; 1097 :              zero_seconds(pcount,stacktop);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcount$[ebp]
	push	edx
	call	_zero_seconds
	add	esp, 8

; 1098 :              break;

	jmp	$LN887@eval_secon
$LN248@eval_secon:

; 1099 : 
; 1100 :        case GET_DIHEDRAL_NODE:
; 1101 :              if ( node->op1.localnum ) 

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN247@eval_secon

; 1102 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	and	edx, 16777215				; 00ffffffH
	imul	edx, 224				; 000000e0H
	mov	eax, DWORD PTR _localbase$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+edx+216]
	imul	edx, 1256				; 000004e8H
	mov	eax, DWORD PTR _localstack$[ebp+edx]
	mov	DWORD PTR _id$[ebp], eax
	jmp	SHORT $LN246@eval_secon
$LN247@eval_secon:

; 1103 :              else id = q_id;

	mov	ecx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], ecx
$LN246@eval_secon:

; 1104 :              ++stacktop;

	mov	edx, DWORD PTR _stacktop$[ebp]
	add	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx

; 1105 :              if ( id_type(id) == EDGE )    stacktop->value = dihedral(id);

	mov	eax, DWORD PTR _id$[ebp]
	and	eax, -536870912				; e0000000H
	shr	eax, 29					; 0000001dH
	cmp	eax, 1
	jne	SHORT $LN245@eval_secon
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	call	_dihedral
	add	esp, 4
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]
	jmp	SHORT $LN242@eval_secon
$LN245@eval_secon:

; 1106 :              else if ( id_type(id) == VERTEX )    stacktop->value = vertex_angle(id);

	mov	eax, DWORD PTR _id$[ebp]
	and	eax, -536870912				; e0000000H
	shr	eax, 29					; 0000001dH
	test	eax, eax
	jne	SHORT $LN243@eval_secon
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	call	_vertex_angle
	add	esp, 4
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]
	jmp	SHORT $LN242@eval_secon
$LN243@eval_secon:

; 1107 :              else    stacktop->value = 0.0;

	mov	eax, DWORD PTR _stacktop$[ebp]
	fldz
	fstp	QWORD PTR [eax]
$LN242@eval_secon:

; 1108 :              zero_seconds(pcount,stacktop);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcount$[ebp]
	push	edx
	call	_zero_seconds
	add	esp, 8

; 1109 :              break;

	jmp	$LN887@eval_secon
$LN241@eval_secon:

; 1110 : 
; 1111 :        case VALENCE_NODE:
; 1112 :        case GET_VALENCE_NODE:
; 1113 :              if ( node->op1.localnum ) 

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN240@eval_secon

; 1114 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	and	edx, 16777215				; 00ffffffH
	imul	edx, 224				; 000000e0H
	mov	eax, DWORD PTR _localbase$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+edx+216]
	imul	edx, 1256				; 000004e8H
	mov	eax, DWORD PTR _localstack$[ebp+edx]
	mov	DWORD PTR _id$[ebp], eax
	jmp	SHORT $LN239@eval_secon
$LN240@eval_secon:

; 1115 :              else id = q_id;

	mov	ecx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], ecx
$LN239@eval_secon:

; 1116 :              ++stacktop;

	mov	edx, DWORD PTR _stacktop$[ebp]
	add	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx

; 1117 :              switch ( id_type(id) )

	mov	eax, DWORD PTR _id$[ebp]
	and	eax, -536870912				; e0000000H
	shr	eax, 29					; 0000001dH
	mov	DWORD PTR tv3344[ebp], eax
	cmp	DWORD PTR tv3344[ebp], 3
	ja	$LN237@eval_secon
	mov	ecx, DWORD PTR tv3344[ebp]
	jmp	DWORD PTR $LN1107@eval_secon[ecx*4]
$LN236@eval_secon:

; 1118 :               { case VERTEX:
; 1119 :                       stacktop->value = (REAL)get_vertex_evalence(id);

	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	call	_get_vertex_evalence
	add	esp, 4
	mov	DWORD PTR tv7862[ebp], eax
	fild	DWORD PTR tv7862[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]

; 1120 :                    break;

	jmp	SHORT $LN237@eval_secon
$LN235@eval_secon:

; 1121 :                 case EDGE:
; 1122 :                       stacktop->value = (REAL)get_edge_valence(id);

	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	call	_get_edge_valence
	add	esp, 4
	mov	DWORD PTR tv7866[ebp], eax
	fild	DWORD PTR tv7866[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]

; 1123 :                    break;

	jmp	SHORT $LN237@eval_secon
$LN234@eval_secon:

; 1124 :                 case FACET:
; 1125 :                       stacktop->value = (REAL)get_facet_valence(id);

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	_get_facet_valence
	add	esp, 4
	mov	DWORD PTR tv7870[ebp], eax
	fild	DWORD PTR tv7870[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx]

; 1126 :                    break;

	jmp	SHORT $LN237@eval_secon
$LN233@eval_secon:

; 1127 :                 case BODY:
; 1128 :                       stacktop->value = (REAL)get_body_valence(id);

	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	call	_get_body_valence
	add	esp, 4
	mov	DWORD PTR tv7874[ebp], eax
	fild	DWORD PTR tv7874[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]
$LN237@eval_secon:

; 1129 :                    break;
; 1130 :               }
; 1131 :              zero_seconds(pcount,stacktop);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcount$[ebp]
	push	edx
	call	_zero_seconds
	add	esp, 8

; 1132 :              break;

	jmp	$LN887@eval_secon
$LN232@eval_secon:

; 1133 : 
; 1134 :        case GET_EDGE_NODE:
; 1135 :              if ( node->op1.localnum ) 

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN231@eval_secon

; 1136 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	and	edx, 16777215				; 00ffffffH
	imul	edx, 224				; 000000e0H
	mov	eax, DWORD PTR _localbase$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+edx+216]
	imul	edx, 1256				; 000004e8H
	mov	eax, DWORD PTR _localstack$[ebp+edx]
	mov	DWORD PTR _id$[ebp], eax
	jmp	SHORT $LN230@eval_secon
$LN231@eval_secon:

; 1137 :              else id = q_id;

	mov	ecx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], ecx
$LN230@eval_secon:

; 1138 :              ++stacktop;

	mov	edx, DWORD PTR _stacktop$[ebp]
	add	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx

; 1139 :              stacktop->value = (REAL)(ordinal(get_fe_edge(id))+1);

	mov	eax, DWORD PTR _id$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR _web+460
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _e_id$91037[ebp], eax
	mov	ecx, DWORD PTR _id$[ebp]
	and	ecx, 134217728				; 08000000H
	xor	ecx, DWORD PTR _e_id$91037[ebp]
	and	ecx, 268435456				; 10000000H
	shr	ecx, 28					; 0000001cH
	test	ecx, ecx
	je	SHORT $LN960@eval_secon
	mov	edx, DWORD PTR _id$[ebp]
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR _web+460
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _e_id$91041[ebp], edx
	mov	eax, DWORD PTR _id$[ebp]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR _e_id$91041[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	DWORD PTR tv3378[ebp], eax
	jmp	SHORT $LN961@eval_secon
$LN960@eval_secon:
	mov	DWORD PTR tv3378[ebp], -1
$LN961@eval_secon:
	mov	ecx, DWORD PTR tv3378[ebp]
	add	ecx, 1
	mov	DWORD PTR tv7895[ebp], ecx
	fild	DWORD PTR tv7895[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]

; 1140 :              zero_seconds(pcount,stacktop);

	mov	eax, DWORD PTR _stacktop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcount$[ebp]
	push	ecx
	call	_zero_seconds
	add	esp, 8

; 1141 :              break;

	jmp	$LN887@eval_secon
$LN229@eval_secon:

; 1142 : 
; 1143 :        case GET_FACET_NODE:
; 1144 :              if ( node->op1.localnum ) 

	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN228@eval_secon

; 1145 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, 16777215				; 00ffffffH
	imul	ecx, 224				; 000000e0H
	mov	edx, DWORD PTR _localbase$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+ecx+216]
	imul	ecx, 1256				; 000004e8H
	mov	edx, DWORD PTR _localstack$[ebp+ecx]
	mov	DWORD PTR _id$[ebp], edx
	jmp	SHORT $LN227@eval_secon
$LN228@eval_secon:

; 1146 :              else id = q_id;

	mov	eax, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], eax
$LN227@eval_secon:

; 1147 :              ++stacktop;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx

; 1148 :              stacktop->value = (REAL)(ordinal(get_fe_facet(id))+1);

	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	call	_get_fe_facet
	add	esp, 4
	and	eax, 268435456				; 10000000H
	shr	eax, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN962@eval_secon
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	_get_fe_facet
	add	esp, 4
	and	eax, 134217727				; 07ffffffH
	mov	DWORD PTR tv3401[ebp], eax
	jmp	SHORT $LN963@eval_secon
$LN962@eval_secon:
	mov	DWORD PTR tv3401[ebp], -1
$LN963@eval_secon:
	mov	ecx, DWORD PTR tv3401[ebp]
	add	ecx, 1
	mov	DWORD PTR tv7912[ebp], ecx
	fild	DWORD PTR tv7912[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]

; 1149 :              zero_seconds(pcount,stacktop);

	mov	eax, DWORD PTR _stacktop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcount$[ebp]
	push	ecx
	call	_zero_seconds
	add	esp, 8

; 1150 :              break;

	jmp	$LN887@eval_secon
$LN226@eval_secon:

; 1151 : 
; 1152 :        case AREA_NODE:
; 1153 :        case GET_AREA_NODE:
; 1154 :              if ( node->op1.localnum ) 

	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN225@eval_secon

; 1155 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, 16777215				; 00ffffffH
	imul	ecx, 224				; 000000e0H
	mov	edx, DWORD PTR _localbase$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+ecx+216]
	imul	ecx, 1256				; 000004e8H
	mov	edx, DWORD PTR _localstack$[ebp+ecx]
	mov	DWORD PTR _id$[ebp], edx
	jmp	SHORT $LN224@eval_secon
$LN225@eval_secon:

; 1156 :              else id = q_id;

	mov	eax, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], eax
$LN224@eval_secon:

; 1157 :              ++stacktop;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx

; 1158 :              stacktop->value = get_facet_area(id);

	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	call	_recalc_facet_area
	add	esp, 4
	mov	eax, DWORD PTR _id$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR _web+236
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+40]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]

; 1159 :              zero_seconds(pcount,stacktop);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcount$[ebp]
	push	edx
	call	_zero_seconds
	add	esp, 8

; 1160 :              break;

	jmp	$LN887@eval_secon
$LN223@eval_secon:

; 1161 : 
; 1162 :        case GET_WRAP_NODE:
; 1163 :              if ( node->op1.localnum ) 

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN222@eval_secon

; 1164 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	and	edx, 16777215				; 00ffffffH
	imul	edx, 224				; 000000e0H
	mov	eax, DWORD PTR _localbase$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+edx+216]
	imul	edx, 1256				; 000004e8H
	mov	eax, DWORD PTR _localstack$[ebp+edx]
	mov	DWORD PTR _id$[ebp], eax
	jmp	SHORT $LN221@eval_secon
$LN222@eval_secon:

; 1165 :              else id = q_id;

	mov	ecx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], ecx
$LN221@eval_secon:

; 1166 :              ++stacktop;

	mov	edx, DWORD PTR _stacktop$[ebp]
	add	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx

; 1167 :              stacktop->value = (REAL)get_edge_wrap(id); 

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	_get_edge_wrap
	add	esp, 4
	mov	DWORD PTR tv7941[ebp], eax
	fild	DWORD PTR tv7941[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx]

; 1168 :              zero_seconds(pcount,stacktop);

	mov	edx, DWORD PTR _stacktop$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcount$[ebp]
	push	eax
	call	_zero_seconds
	add	esp, 8

; 1169 :              break;

	jmp	$LN887@eval_secon
$LN220@eval_secon:

; 1170 : 
; 1171 :        case GET_PRESSURE_NODE:
; 1172 :              if ( node->op1.localnum ) 

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN219@eval_secon

; 1173 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax+216]
	imul	eax, 1256				; 000004e8H
	mov	ecx, DWORD PTR _localstack$[ebp+eax]
	mov	DWORD PTR _id$[ebp], ecx
	jmp	SHORT $LN218@eval_secon
$LN219@eval_secon:

; 1174 :              else id = q_id;

	mov	edx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], edx
$LN218@eval_secon:

; 1175 :              ++stacktop;

	mov	eax, DWORD PTR _stacktop$[ebp]
	add	eax, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], eax

; 1176 :              switch ( id_type(id) )

	mov	ecx, DWORD PTR _id$[ebp]
	and	ecx, -536870912				; e0000000H
	shr	ecx, 29					; 0000001dH
	mov	DWORD PTR tv3453[ebp], ecx
	cmp	DWORD PTR tv3453[ebp], 3
	je	SHORT $LN215@eval_secon
	jmp	SHORT $LN214@eval_secon
$LN215@eval_secon:

; 1177 :                { 
; 1178 :                   case BODY:    stacktop->value = get_body_pressure(id); break;

	mov	edx, DWORD PTR _id$[ebp]
	and	edx, 268435456				; 10000000H
	shr	edx, 28					; 0000001cH
	test	edx, edx
	je	SHORT $LN1035@eval_secon
	mov	eax, DWORD PTR _id$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR _web+348
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+312]
	fstp	QWORD PTR tv4936[ebp]
	jmp	SHORT $LN1036@eval_secon
$LN1035@eval_secon:
	fldz
	fstp	QWORD PTR tv4936[ebp]
$LN1036@eval_secon:
	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR tv4936[ebp]
	fstp	QWORD PTR [eax]
	jmp	SHORT $LN216@eval_secon
$LN214@eval_secon:

; 1179 :                   default: sprintf(errmsg,"Pressure only for bodies.\n");

	push	OFFSET ??_C@_0BL@KPLMFDOD@Pressure?5only?5for?5bodies?4?6?$AA@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 8

; 1180 :                    sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 1181 :                     file_names[node->file_no],node->line_no);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _file_names
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 1182 :                     kb_error(1003,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	1003					; 000003ebH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN216@eval_secon:

; 1183 :                }
; 1184 :              zero_seconds(pcount,stacktop);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcount$[ebp]
	push	edx
	call	_zero_seconds
	add	esp, 8

; 1185 :              break;

	jmp	$LN887@eval_secon
$LN213@eval_secon:

; 1186 : 
; 1187 :        case GET_QUANTITY_NODE:
; 1188 :              if ( node->op1.localnum ) 

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN212@eval_secon

; 1189 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	and	edx, 16777215				; 00ffffffH
	imul	edx, 224				; 000000e0H
	mov	eax, DWORD PTR _localbase$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+edx+216]
	imul	edx, 1256				; 000004e8H
	mov	eax, DWORD PTR _localstack$[ebp+edx]
	mov	DWORD PTR _id$[ebp], eax
	jmp	SHORT $LN211@eval_secon
$LN212@eval_secon:

; 1190 :              else id = q_id;

	mov	ecx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], ecx
$LN211@eval_secon:

; 1191 :              ++stacktop;

	mov	edx, DWORD PTR _stacktop$[ebp]
	add	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx

; 1192 :              stacktop->value = quantity_attribute(id,node->op2.quant_id);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	call	_quantity_attribute
	add	esp, 8
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]

; 1193 :              zero_seconds(pcount,stacktop);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcount$[ebp]
	push	edx
	call	_zero_seconds
	add	esp, 8

; 1194 :              break;

	jmp	$LN887@eval_secon
$LN210@eval_secon:

; 1195 : 
; 1196 :        case GET_INSTANCE_NODE:
; 1197 :              if ( node->op1.localnum ) 

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN209@eval_secon

; 1198 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	and	edx, 16777215				; 00ffffffH
	imul	edx, 224				; 000000e0H
	mov	eax, DWORD PTR _localbase$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+edx+216]
	imul	edx, 1256				; 000004e8H
	mov	eax, DWORD PTR _localstack$[ebp+edx]
	mov	DWORD PTR _id$[ebp], eax
	jmp	SHORT $LN208@eval_secon
$LN209@eval_secon:

; 1199 :              else id = q_id;

	mov	ecx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], ecx
$LN208@eval_secon:

; 1200 :              ++stacktop;

	mov	edx, DWORD PTR _stacktop$[ebp]
	add	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx

; 1201 :              stacktop->value = instance_attribute(id,node->op2.meth_id);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	call	_instance_attribute
	add	esp, 8
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]

; 1202 :              zero_seconds(pcount,stacktop);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcount$[ebp]
	push	edx
	call	_zero_seconds
	add	esp, 8

; 1203 :              break;

	jmp	$LN887@eval_secon
$LN207@eval_secon:

; 1204 : 
; 1205 :        case GET_PHASE_NODE:
; 1206 :              if ( node->op1.localnum ) 

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN206@eval_secon

; 1207 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	and	edx, 16777215				; 00ffffffH
	imul	edx, 224				; 000000e0H
	mov	eax, DWORD PTR _localbase$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+edx+216]
	imul	edx, 1256				; 000004e8H
	mov	eax, DWORD PTR _localstack$[ebp+edx]
	mov	DWORD PTR _id$[ebp], eax
	jmp	SHORT $LN205@eval_secon
$LN206@eval_secon:

; 1208 :              else id = q_id;

	mov	ecx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], ecx
$LN205@eval_secon:

; 1209 :              ++stacktop;

	mov	edx, DWORD PTR _stacktop$[ebp]
	add	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx

; 1210 :              switch ( id_type(id) )

	mov	eax, DWORD PTR _id$[ebp]
	and	eax, -536870912				; e0000000H
	shr	eax, 29					; 0000001dH
	mov	DWORD PTR tv3519[ebp], eax
	cmp	DWORD PTR tv3519[ebp], 2
	je	SHORT $LN202@eval_secon
	cmp	DWORD PTR tv3519[ebp], 3
	je	$LN201@eval_secon
	jmp	$LN200@eval_secon
$LN202@eval_secon:

; 1211 :                { 
; 1212 :                   case FACET:  stacktop->value = (REAL)get_f_phase(id); break;

	mov	ecx, DWORD PTR _dymem
	add	ecx, DWORD PTR _web+328
	mov	edx, DWORD PTR _F_PHASE_ATTR
	imul	edx, 240				; 000000f0H
	cmp	DWORD PTR [ecx+edx+88], 0
	je	SHORT $LN964@eval_secon
	mov	eax, DWORD PTR _id$[ebp]
	and	eax, 268435456				; 10000000H
	shr	eax, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN964@eval_secon
	mov	ecx, DWORD PTR _id$[ebp]
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR _dymem
	add	edx, DWORD PTR _web+328
	mov	eax, DWORD PTR _F_PHASE_ATTR
	imul	eax, 240				; 000000f0H
	mov	esi, DWORD PTR _web+236
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	edx, DWORD PTR [edx+eax+64]
	mov	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR tv3542[ebp], eax
	jmp	SHORT $LN965@eval_secon
$LN964@eval_secon:
	mov	DWORD PTR tv3542[ebp], 0
$LN965@eval_secon:
	fild	DWORD PTR tv3542[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx]
	jmp	$LN203@eval_secon
$LN201@eval_secon:

; 1213 :                   case BODY:    stacktop->value = (REAL)get_b_phase(id); break;

	mov	edx, DWORD PTR _dymem
	add	edx, DWORD PTR _web+440
	mov	eax, DWORD PTR _B_PHASE_ATTR
	imul	eax, 240				; 000000f0H
	cmp	DWORD PTR [edx+eax+88], 0
	je	SHORT $LN966@eval_secon
	mov	ecx, DWORD PTR _id$[ebp]
	and	ecx, 268435456				; 10000000H
	shr	ecx, 28					; 0000001cH
	test	ecx, ecx
	je	SHORT $LN966@eval_secon
	mov	edx, DWORD PTR _id$[ebp]
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR _dymem
	add	eax, DWORD PTR _web+440
	mov	ecx, DWORD PTR _B_PHASE_ATTR
	imul	ecx, 240				; 000000f0H
	mov	esi, DWORD PTR _web+348
	mov	edx, DWORD PTR [esi+edx*4]
	mov	eax, DWORD PTR [eax+ecx+64]
	mov	ecx, DWORD PTR [edx+eax]
	mov	DWORD PTR tv3566[ebp], ecx
	jmp	SHORT $LN967@eval_secon
$LN966@eval_secon:
	mov	DWORD PTR tv3566[ebp], 0
$LN967@eval_secon:
	fild	DWORD PTR tv3566[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]
	jmp	SHORT $LN203@eval_secon
$LN200@eval_secon:

; 1214 :                   default: sprintf(errmsg,"Phase of wrong type element.\n");

	push	OFFSET ??_C@_0BO@GAPLEMFA@Phase?5of?5wrong?5type?5element?4?6?$AA@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 8

; 1215 :                    sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 1216 :                      file_names[node->file_no],node->line_no);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _file_names
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 1217 :                    kb_error(1010,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	1010					; 000003f2H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN203@eval_secon:

; 1218 :                }
; 1219 :              zero_seconds(pcount,stacktop);

	mov	eax, DWORD PTR _stacktop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcount$[ebp]
	push	ecx
	call	_zero_seconds
	add	esp, 8

; 1220 :              break;

	jmp	$LN887@eval_secon
$LN199@eval_secon:

; 1221 : 
; 1222 :        case DENSITY_NODE:
; 1223 :        case GET_DENSITY_NODE:
; 1224 :              if ( node->op1.localnum ) 

	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN198@eval_secon

; 1225 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, 16777215				; 00ffffffH
	imul	ecx, 224				; 000000e0H
	mov	edx, DWORD PTR _localbase$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+ecx+216]
	imul	ecx, 1256				; 000004e8H
	mov	edx, DWORD PTR _localstack$[ebp+ecx]
	mov	DWORD PTR _id$[ebp], edx
	jmp	SHORT $LN197@eval_secon
$LN198@eval_secon:

; 1226 :              else id = q_id;

	mov	eax, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], eax
$LN197@eval_secon:

; 1227 :              ++stacktop;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx

; 1228 :              switch ( id_type(id) )

	mov	edx, DWORD PTR _id$[ebp]
	and	edx, -536870912				; e0000000H
	shr	edx, 29					; 0000001dH
	mov	DWORD PTR tv3600[ebp], edx
	cmp	DWORD PTR tv3600[ebp], 1
	je	SHORT $LN194@eval_secon
	cmp	DWORD PTR tv3600[ebp], 2
	je	SHORT $LN193@eval_secon
	cmp	DWORD PTR tv3600[ebp], 3
	je	SHORT $LN192@eval_secon
	jmp	$LN191@eval_secon
$LN194@eval_secon:

; 1229 :                { case EDGE:    stacktop->value = get_edge_density(id); break;

	mov	eax, DWORD PTR _id$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR _web+124
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+40]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]
	jmp	$LN195@eval_secon
$LN193@eval_secon:

; 1230 :                  case FACET:    stacktop->value = get_facet_density(id); break;

	mov	ecx, DWORD PTR _id$[ebp]
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR _web+236
	mov	eax, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [eax+32]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx]
	jmp	$LN195@eval_secon
$LN192@eval_secon:

; 1231 :                  case BODY:    stacktop->value = get_body_density(id); break;

	mov	edx, DWORD PTR _id$[ebp]
	and	edx, 268435456				; 10000000H
	shr	edx, 28					; 0000001cH
	test	edx, edx
	je	SHORT $LN1039@eval_secon
	mov	eax, DWORD PTR _id$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR _web+348
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+344]
	fstp	QWORD PTR tv4961[ebp]
	jmp	SHORT $LN1040@eval_secon
$LN1039@eval_secon:
	fldz
	fstp	QWORD PTR tv4961[ebp]
$LN1040@eval_secon:
	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR tv4961[ebp]
	fstp	QWORD PTR [eax]
	jmp	SHORT $LN195@eval_secon
$LN191@eval_secon:

; 1232 :                  default: sprintf(errmsg,"Density of wrong type element.\n");

	push	OFFSET ??_C@_0CA@OHHPJEHI@Density?5of?5wrong?5type?5element?4?6?$AA@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 8

; 1233 :                   sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 1234 :                     file_names[node->file_no],node->line_no);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _file_names
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 1235 :                   kb_error(1018,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	1018					; 000003faH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN195@eval_secon:

; 1236 :                }
; 1237 :              zero_seconds(pcount,stacktop);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcount$[ebp]
	push	edx
	call	_zero_seconds
	add	esp, 8

; 1238 :              break;

	jmp	$LN887@eval_secon
$LN190@eval_secon:

; 1239 : 
; 1240 :        case VOLUME_NODE:
; 1241 :        case GET_VOLUME_NODE:
; 1242 :              if ( node->op1.localnum ) 

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN189@eval_secon

; 1243 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	and	edx, 16777215				; 00ffffffH
	imul	edx, 224				; 000000e0H
	mov	eax, DWORD PTR _localbase$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+edx+216]
	imul	edx, 1256				; 000004e8H
	mov	eax, DWORD PTR _localstack$[ebp+edx]
	mov	DWORD PTR _id$[ebp], eax
	jmp	SHORT $LN188@eval_secon
$LN189@eval_secon:

; 1244 :              else id = q_id;

	mov	ecx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], ecx
$LN188@eval_secon:

; 1245 :              ++stacktop;

	mov	edx, DWORD PTR _stacktop$[ebp]
	add	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx

; 1246 :              stacktop->value = get_body_volume(id);

	mov	eax, DWORD PTR _id$[ebp]
	and	eax, 268435456				; 10000000H
	shr	eax, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN1043@eval_secon
	mov	ecx, DWORD PTR _id$[ebp]
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR _web+348
	mov	eax, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [eax+40]
	fstp	QWORD PTR tv4970[ebp]
	jmp	SHORT $LN1044@eval_secon
$LN1043@eval_secon:
	fldz
	fstp	QWORD PTR tv4970[ebp]
$LN1044@eval_secon:
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR tv4970[ebp]
	fstp	QWORD PTR [ecx]

; 1247 :              zero_seconds(pcount,stacktop);

	mov	edx, DWORD PTR _stacktop$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcount$[ebp]
	push	eax
	call	_zero_seconds
	add	esp, 8

; 1248 :              break;

	jmp	$LN887@eval_secon
$LN187@eval_secon:

; 1249 : 
; 1250 :        case GET_VOLCONST_NODE:
; 1251 :              if ( node->op1.localnum ) 

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN186@eval_secon

; 1252 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax+216]
	imul	eax, 1256				; 000004e8H
	mov	ecx, DWORD PTR _localstack$[ebp+eax]
	mov	DWORD PTR _id$[ebp], ecx
	jmp	SHORT $LN185@eval_secon
$LN186@eval_secon:

; 1253 :              else id = q_id;

	mov	edx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], edx
$LN185@eval_secon:

; 1254 :              (++stacktop)->value = get_body_volconst(id);

	mov	eax, DWORD PTR _stacktop$[ebp]
	add	eax, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], eax
	mov	ecx, DWORD PTR _id$[ebp]
	and	ecx, 268435456				; 10000000H
	shr	ecx, 28					; 0000001cH
	test	ecx, ecx
	je	SHORT $LN1047@eval_secon
	mov	edx, DWORD PTR _id$[ebp]
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR _web+348
	mov	ecx, DWORD PTR [eax+edx*4]
	fld	QWORD PTR [ecx+328]
	fstp	QWORD PTR tv4979[ebp]
	jmp	SHORT $LN1048@eval_secon
$LN1047@eval_secon:
	fldz
	fstp	QWORD PTR tv4979[ebp]
$LN1048@eval_secon:
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR tv4979[ebp]
	fstp	QWORD PTR [edx]

; 1255 :              zero_seconds(pcount,stacktop);

	mov	eax, DWORD PTR _stacktop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcount$[ebp]
	push	ecx
	call	_zero_seconds
	add	esp, 8

; 1256 :              break;

	jmp	$LN887@eval_secon
$LN184@eval_secon:

; 1257 : 
; 1258 :        case GET_TARGET_NODE:
; 1259 :              if ( node->op1.localnum ) 

	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN183@eval_secon

; 1260 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, 16777215				; 00ffffffH
	imul	ecx, 224				; 000000e0H
	mov	edx, DWORD PTR _localbase$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+ecx+216]
	imul	ecx, 1256				; 000004e8H
	mov	edx, DWORD PTR _localstack$[ebp+ecx]
	mov	DWORD PTR _id$[ebp], edx
	jmp	SHORT $LN182@eval_secon
$LN183@eval_secon:

; 1261 :              else id = q_id;

	mov	eax, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], eax
$LN182@eval_secon:

; 1262 :              (++stacktop)->value = get_body_fixvol(id);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx
	mov	edx, DWORD PTR _id$[ebp]
	and	edx, 268435456				; 10000000H
	shr	edx, 28					; 0000001cH
	test	edx, edx
	je	SHORT $LN1051@eval_secon
	mov	eax, DWORD PTR _id$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR _web+348
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+32]
	fstp	QWORD PTR tv4988[ebp]
	jmp	SHORT $LN1052@eval_secon
$LN1051@eval_secon:
	fldz
	fstp	QWORD PTR tv4988[ebp]
$LN1052@eval_secon:
	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR tv4988[ebp]
	fstp	QWORD PTR [eax]

; 1263 :              zero_seconds(pcount,stacktop);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcount$[ebp]
	push	edx
	call	_zero_seconds
	add	esp, 8

; 1264 :              break;

	jmp	$LN887@eval_secon
$LN181@eval_secon:

; 1265 : 
; 1266 :        case GET_MPI_TASK_NODE:
; 1267 :              if ( node->op1.localnum ) 

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN180@eval_secon

; 1268 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	and	edx, 16777215				; 00ffffffH
	imul	edx, 224				; 000000e0H
	mov	eax, DWORD PTR _localbase$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+edx+216]
	imul	edx, 1256				; 000004e8H
	mov	eax, DWORD PTR _localstack$[ebp+edx]
	mov	DWORD PTR _id$[ebp], eax
	jmp	SHORT $LN179@eval_secon
$LN180@eval_secon:

; 1269 :              else id = q_id;

	mov	ecx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], ecx
$LN179@eval_secon:

; 1270 :              (++stacktop)->value = id_task(id);

	mov	edx, DWORD PTR _stacktop$[ebp]
	add	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx
	mov	eax, DWORD PTR _id$[ebp]
	and	eax, 0
	shr	eax, 27					; 0000001bH
	mov	DWORD PTR tv8128[ebp], eax
	fild	DWORD PTR tv8128[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx]

; 1271 :              break;

	jmp	$LN887@eval_secon
$LN178@eval_secon:

; 1272 : 
; 1273 :        case ID_NODE:
; 1274 :        case GET_ID_NODE:
; 1275 :        case GET_OID_NODE:
; 1276 :              if ( node->op1.localnum ) 

	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN177@eval_secon

; 1277 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, 16777215				; 00ffffffH
	imul	ecx, 224				; 000000e0H
	mov	edx, DWORD PTR _localbase$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+ecx+216]
	imul	ecx, 1256				; 000004e8H
	mov	edx, DWORD PTR _localstack$[ebp+ecx]
	mov	DWORD PTR _id$[ebp], edx
	jmp	SHORT $LN176@eval_secon
$LN177@eval_secon:

; 1278 :              else id = q_id;

	mov	eax, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], eax
$LN176@eval_secon:

; 1279 :              ++stacktop;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx

; 1280 :              if ( (node->type == GET_OID_NODE) && inverted(id) )

	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx], 10195			; 000027d3H
	jne	SHORT $LN175@eval_secon
	mov	eax, DWORD PTR _id$[ebp]
	and	eax, 134217728				; 08000000H
	shr	eax, 27					; 0000001bH
	test	eax, eax
	je	SHORT $LN175@eval_secon

; 1281 :                   stacktop->value = -(REAL)(ordinal(id)+1);

	mov	ecx, DWORD PTR _id$[ebp]
	and	ecx, 268435456				; 10000000H
	shr	ecx, 28					; 0000001cH
	test	ecx, ecx
	je	SHORT $LN968@eval_secon
	mov	edx, DWORD PTR _id$[ebp]
	and	edx, 134217727				; 07ffffffH
	mov	DWORD PTR tv3711[ebp], edx
	jmp	SHORT $LN969@eval_secon
$LN968@eval_secon:
	mov	DWORD PTR tv3711[ebp], -1
$LN969@eval_secon:
	mov	eax, DWORD PTR tv3711[ebp]
	add	eax, 1
	mov	DWORD PTR tv8143[ebp], eax
	fild	DWORD PTR tv8143[ebp]
	fchs
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx]
	jmp	SHORT $LN174@eval_secon
$LN175@eval_secon:

; 1282 :              else    stacktop->value = (REAL)(ordinal(id)+1);

	mov	edx, DWORD PTR _id$[ebp]
	and	edx, 268435456				; 10000000H
	shr	edx, 28					; 0000001cH
	test	edx, edx
	je	SHORT $LN970@eval_secon
	mov	eax, DWORD PTR _id$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	DWORD PTR tv3719[ebp], eax
	jmp	SHORT $LN971@eval_secon
$LN970@eval_secon:
	mov	DWORD PTR tv3719[ebp], -1
$LN971@eval_secon:
	mov	ecx, DWORD PTR tv3719[ebp]
	add	ecx, 1
	mov	DWORD PTR tv8148[ebp], ecx
	fild	DWORD PTR tv8148[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]
$LN174@eval_secon:

; 1283 :              zero_seconds(pcount,stacktop);

	mov	eax, DWORD PTR _stacktop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcount$[ebp]
	push	ecx
	call	_zero_seconds
	add	esp, 8

; 1284 :              break;

	jmp	$LN887@eval_secon
$LN173@eval_secon:

; 1285 : 
; 1286 :        case ORIGINAL_NODE:
; 1287 :        case GET_ORIGINAL_NODE:
; 1288 :              if ( node->op1.localnum ) 

	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN172@eval_secon

; 1289 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, 16777215				; 00ffffffH
	imul	ecx, 224				; 000000e0H
	mov	edx, DWORD PTR _localbase$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+ecx+216]
	imul	ecx, 1256				; 000004e8H
	mov	edx, DWORD PTR _localstack$[ebp+ecx]
	mov	DWORD PTR _id$[ebp], edx
	jmp	SHORT $LN171@eval_secon
$LN172@eval_secon:

; 1290 :              else id = q_id;

	mov	eax, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], eax
$LN171@eval_secon:

; 1291 :              ++stacktop;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx

; 1292 :              stacktop->value = valid_id(id)?(REAL)ordinal(get_original(id))+1:0;

	mov	edx, DWORD PTR _id$[ebp]
	and	edx, 268435456				; 10000000H
	shr	edx, 28					; 0000001cH
	test	edx, edx
	je	SHORT $LN974@eval_secon
	mov	eax, DWORD PTR _id$[ebp]
	and	eax, -536870912				; e0000000H
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	ecx, DWORD PTR _id$[ebp]
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR _web[eax+12]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [eax+20]
	and	ecx, 268435456				; 10000000H
	shr	ecx, 28					; 0000001cH
	test	ecx, ecx
	je	SHORT $LN972@eval_secon
	mov	edx, DWORD PTR _id$[ebp]
	and	edx, -536870912				; e0000000H
	shr	edx, 29					; 0000001dH
	imul	edx, 112				; 00000070H
	mov	eax, DWORD PTR _id$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR _web[edx+12]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+20]
	and	eax, 134217727				; 07ffffffH
	mov	DWORD PTR tv3758[ebp], eax
	jmp	SHORT $LN973@eval_secon
$LN972@eval_secon:
	mov	DWORD PTR tv3758[ebp], -1
$LN973@eval_secon:
	fild	DWORD PTR tv3758[ebp]
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	QWORD PTR tv3762[ebp]
	jmp	SHORT $LN975@eval_secon
$LN974@eval_secon:
	fldz
	fstp	QWORD PTR tv3762[ebp]
$LN975@eval_secon:
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR tv3762[ebp]
	fstp	QWORD PTR [ecx]

; 1293 :              zero_seconds(pcount,stacktop);

	mov	edx, DWORD PTR _stacktop$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcount$[ebp]
	push	eax
	call	_zero_seconds
	add	esp, 8

; 1294 :              break;

	jmp	$LN887@eval_secon
$LN170@eval_secon:

; 1295 : 
; 1296 :        case GET_COLOR_NODE:
; 1297 :              if ( node->op1.localnum ) 

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN169@eval_secon

; 1298 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax+216]
	imul	eax, 1256				; 000004e8H
	mov	ecx, DWORD PTR _localstack$[ebp+eax]
	mov	DWORD PTR _id$[ebp], ecx
	jmp	SHORT $LN168@eval_secon
$LN169@eval_secon:

; 1299 :              else id = q_id;

	mov	edx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], edx
$LN168@eval_secon:

; 1300 :              ++stacktop;

	mov	eax, DWORD PTR _stacktop$[ebp]
	add	eax, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], eax

; 1301 :              switch ( id_type(id) )

	mov	ecx, DWORD PTR _id$[ebp]
	and	ecx, -536870912				; e0000000H
	shr	ecx, 29					; 0000001dH
	mov	DWORD PTR tv3777[ebp], ecx
	cmp	DWORD PTR tv3777[ebp], 1
	je	SHORT $LN165@eval_secon
	cmp	DWORD PTR tv3777[ebp], 2
	je	SHORT $LN164@eval_secon
	jmp	SHORT $LN163@eval_secon
$LN165@eval_secon:

; 1302 :               { case EDGE:     stacktop->value = (REAL)get_edge_color(id); break;

	mov	edx, DWORD PTR _id$[ebp]
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR _web+124
	mov	ecx, DWORD PTR [eax+edx*4]
	movsx	edx, WORD PTR [ecx+56]
	mov	DWORD PTR tv8183[ebp], edx
	fild	DWORD PTR tv8183[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]
	jmp	SHORT $LN166@eval_secon
$LN164@eval_secon:

; 1303 :                  case FACET:     stacktop->value = (REAL)get_facet_color(id); break;

	mov	ecx, DWORD PTR _id$[ebp]
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR _web+236
	mov	eax, DWORD PTR [edx+ecx*4]
	movsx	ecx, WORD PTR [eax+48]
	mov	DWORD PTR tv8187[ebp], ecx
	fild	DWORD PTR tv8187[ebp]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]
	jmp	SHORT $LN166@eval_secon
$LN163@eval_secon:

; 1304 :                  default:    stacktop->value = 0.0;

	mov	eax, DWORD PTR _stacktop$[ebp]
	fldz
	fstp	QWORD PTR [eax]
$LN166@eval_secon:

; 1305 :               }
; 1306 :              zero_seconds(pcount,stacktop);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcount$[ebp]
	push	edx
	call	_zero_seconds
	add	esp, 8

; 1307 :              break;

	jmp	$LN887@eval_secon
$LN162@eval_secon:

; 1308 : 
; 1309 :        case GET_FRONTCOLOR_NODE:
; 1310 :              if ( node->op1.localnum ) 

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN161@eval_secon

; 1311 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	and	edx, 16777215				; 00ffffffH
	imul	edx, 224				; 000000e0H
	mov	eax, DWORD PTR _localbase$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+edx+216]
	imul	edx, 1256				; 000004e8H
	mov	eax, DWORD PTR _localstack$[ebp+edx]
	mov	DWORD PTR _id$[ebp], eax
	jmp	SHORT $LN160@eval_secon
$LN161@eval_secon:

; 1312 :              else id = q_id;

	mov	ecx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], ecx
$LN160@eval_secon:

; 1313 :              ++stacktop;

	mov	edx, DWORD PTR _stacktop$[ebp]
	add	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx

; 1314 :              switch ( id_type(id) )

	mov	eax, DWORD PTR _id$[ebp]
	and	eax, -536870912				; e0000000H
	shr	eax, 29					; 0000001dH
	mov	DWORD PTR tv3810[ebp], eax
	cmp	DWORD PTR tv3810[ebp], 2
	je	SHORT $LN157@eval_secon
	jmp	SHORT $LN156@eval_secon
$LN157@eval_secon:

; 1315 :               { case FACET: stacktop->value = (REAL)get_facet_frontcolor(id);

	mov	ecx, DWORD PTR _id$[ebp]
	and	ecx, 134217728				; 08000000H
	shr	ecx, 27					; 0000001bH
	test	ecx, ecx
	je	SHORT $LN976@eval_secon
	mov	edx, DWORD PTR _id$[ebp]
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR _web+236
	mov	ecx, DWORD PTR [eax+edx*4]
	movsx	edx, WORD PTR [ecx+50]
	mov	DWORD PTR tv3828[ebp], edx
	jmp	SHORT $LN977@eval_secon
$LN976@eval_secon:
	mov	eax, DWORD PTR _id$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR _web+236
	mov	edx, DWORD PTR [ecx+eax*4]
	movsx	eax, WORD PTR [edx+48]
	mov	DWORD PTR tv3828[ebp], eax
$LN977@eval_secon:
	fild	DWORD PTR tv3828[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx]

; 1316 :                      break;

	jmp	SHORT $LN158@eval_secon
$LN156@eval_secon:

; 1317 :                 default:    stacktop->value = 0.0;

	mov	edx, DWORD PTR _stacktop$[ebp]
	fldz
	fstp	QWORD PTR [edx]
$LN158@eval_secon:

; 1318 :               }
; 1319 :              zero_seconds(pcount,stacktop);

	mov	eax, DWORD PTR _stacktop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcount$[ebp]
	push	ecx
	call	_zero_seconds
	add	esp, 8

; 1320 :              break;

	jmp	$LN887@eval_secon
$LN155@eval_secon:

; 1321 : 
; 1322 :        case GET_BACKCOLOR_NODE:
; 1323 :              if ( node->op1.localnum ) 

	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN154@eval_secon

; 1324 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, 16777215				; 00ffffffH
	imul	ecx, 224				; 000000e0H
	mov	edx, DWORD PTR _localbase$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+ecx+216]
	imul	ecx, 1256				; 000004e8H
	mov	edx, DWORD PTR _localstack$[ebp+ecx]
	mov	DWORD PTR _id$[ebp], edx
	jmp	SHORT $LN153@eval_secon
$LN154@eval_secon:

; 1325 :              else id = q_id;

	mov	eax, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], eax
$LN153@eval_secon:

; 1326 :              ++stacktop;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx

; 1327 :              switch ( id_type(id) )

	mov	edx, DWORD PTR _id$[ebp]
	and	edx, -536870912				; e0000000H
	shr	edx, 29					; 0000001dH
	mov	DWORD PTR tv3845[ebp], edx
	cmp	DWORD PTR tv3845[ebp], 2
	je	SHORT $LN150@eval_secon
	jmp	SHORT $LN149@eval_secon
$LN150@eval_secon:

; 1328 :               { case FACET: stacktop->value = (REAL)get_facet_backcolor(id);

	mov	eax, DWORD PTR _id$[ebp]
	and	eax, 134217728				; 08000000H
	shr	eax, 27					; 0000001bH
	test	eax, eax
	je	SHORT $LN978@eval_secon
	mov	ecx, DWORD PTR _id$[ebp]
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR _web+236
	mov	eax, DWORD PTR [edx+ecx*4]
	movsx	ecx, WORD PTR [eax+48]
	mov	DWORD PTR tv3863[ebp], ecx
	jmp	SHORT $LN979@eval_secon
$LN978@eval_secon:
	mov	edx, DWORD PTR _id$[ebp]
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR _web+236
	mov	ecx, DWORD PTR [eax+edx*4]
	movsx	edx, WORD PTR [ecx+50]
	mov	DWORD PTR tv3863[ebp], edx
$LN979@eval_secon:
	fild	DWORD PTR tv3863[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]

; 1329 :                      break;

	jmp	SHORT $LN151@eval_secon
$LN149@eval_secon:

; 1330 :                 default:    stacktop->value = 0.0;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	fldz
	fstp	QWORD PTR [ecx]
$LN151@eval_secon:

; 1331 :               }
; 1332 :              zero_seconds(pcount,stacktop);

	mov	edx, DWORD PTR _stacktop$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcount$[ebp]
	push	eax
	call	_zero_seconds
	add	esp, 8

; 1333 :              break;

	jmp	$LN887@eval_secon
$LN148@eval_secon:

; 1334 : 
; 1335 : 
; 1336 :        case GET_FRONTBODY_NODE:
; 1337 :              if ( node->op1.localnum ) 

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN147@eval_secon

; 1338 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax+216]
	imul	eax, 1256				; 000004e8H
	mov	ecx, DWORD PTR _localstack$[ebp+eax]
	mov	DWORD PTR _id$[ebp], ecx
	jmp	SHORT $LN146@eval_secon
$LN147@eval_secon:

; 1339 :              else id = q_id;

	mov	edx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], edx
$LN146@eval_secon:

; 1340 :              ++stacktop;

	mov	eax, DWORD PTR _stacktop$[ebp]
	add	eax, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], eax

; 1341 :              switch ( id_type(id) )

	mov	ecx, DWORD PTR _id$[ebp]
	and	ecx, -536870912				; e0000000H
	shr	ecx, 29					; 0000001dH
	mov	DWORD PTR tv3880[ebp], ecx
	cmp	DWORD PTR tv3880[ebp], 3
	je	SHORT $LN143@eval_secon
	jmp	SHORT $LN142@eval_secon
$LN143@eval_secon:

; 1342 :               { case BODY:  stacktop->value = 
; 1343 :                    (REAL)ordinal(get_facet_body(id))+1; break;

	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	call	_get_facet_body
	add	esp, 4
	and	eax, 268435456				; 10000000H
	shr	eax, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN980@eval_secon
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	_get_facet_body
	add	esp, 4
	and	eax, 134217727				; 07ffffffH
	mov	DWORD PTR tv3889[ebp], eax
	jmp	SHORT $LN981@eval_secon
$LN980@eval_secon:
	mov	DWORD PTR tv3889[ebp], -1
$LN981@eval_secon:
	fild	DWORD PTR tv3889[ebp]
	fadd	QWORD PTR __real@3ff0000000000000
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx]
	jmp	SHORT $LN144@eval_secon
$LN142@eval_secon:

; 1344 :                 default: stacktop->value = 0.0;

	mov	edx, DWORD PTR _stacktop$[ebp]
	fldz
	fstp	QWORD PTR [edx]
$LN144@eval_secon:

; 1345 :               }
; 1346 :              zero_seconds(pcount,stacktop);

	mov	eax, DWORD PTR _stacktop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcount$[ebp]
	push	ecx
	call	_zero_seconds
	add	esp, 8

; 1347 :              break;

	jmp	$LN887@eval_secon
$LN141@eval_secon:

; 1348 : 
; 1349 :        case GET_BACKBODY_NODE:
; 1350 :              if ( node->op1.localnum ) 

	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN140@eval_secon

; 1351 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, 16777215				; 00ffffffH
	imul	ecx, 224				; 000000e0H
	mov	edx, DWORD PTR _localbase$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+ecx+216]
	imul	ecx, 1256				; 000004e8H
	mov	edx, DWORD PTR _localstack$[ebp+ecx]
	mov	DWORD PTR _id$[ebp], edx
	jmp	SHORT $LN139@eval_secon
$LN140@eval_secon:

; 1352 :              else id = q_id;

	mov	eax, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], eax
$LN139@eval_secon:

; 1353 :              ++stacktop;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx

; 1354 :              switch ( id_type(id) )

	mov	edx, DWORD PTR _id$[ebp]
	and	edx, -536870912				; e0000000H
	shr	edx, 29					; 0000001dH
	mov	DWORD PTR tv3907[ebp], edx
	cmp	DWORD PTR tv3907[ebp], 3
	je	SHORT $LN136@eval_secon
	jmp	SHORT $LN135@eval_secon
$LN136@eval_secon:

; 1355 :               { case BODY:  stacktop->value = 
; 1356 :                      (REAL)ordinal(get_facet_body(inverse_id(id)))+ 1;

	mov	eax, DWORD PTR _id$[ebp]
	xor	eax, 134217728				; 08000000H
	push	eax
	call	_get_facet_body
	add	esp, 4
	and	eax, 268435456				; 10000000H
	shr	eax, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN982@eval_secon
	mov	ecx, DWORD PTR _id$[ebp]
	xor	ecx, 134217728				; 08000000H
	push	ecx
	call	_get_facet_body
	add	esp, 4
	and	eax, 134217727				; 07ffffffH
	mov	DWORD PTR tv3918[ebp], eax
	jmp	SHORT $LN983@eval_secon
$LN982@eval_secon:
	mov	DWORD PTR tv3918[ebp], -1
$LN983@eval_secon:
	fild	DWORD PTR tv3918[ebp]
	fadd	QWORD PTR __real@3ff0000000000000
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]

; 1357 :                      break;

	jmp	SHORT $LN137@eval_secon
$LN135@eval_secon:

; 1358 :                  default: stacktop->value = 0.0;

	mov	eax, DWORD PTR _stacktop$[ebp]
	fldz
	fstp	QWORD PTR [eax]
$LN137@eval_secon:

; 1359 :               }
; 1360 :              zero_seconds(pcount,stacktop);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcount$[ebp]
	push	edx
	call	_zero_seconds
	add	esp, 8

; 1361 :              break;

	jmp	$LN887@eval_secon
$LN134@eval_secon:

; 1362 : 
; 1363 :        case GET_BARE_NODE:
; 1364 :              if ( node->op1.localnum ) 

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN133@eval_secon

; 1365 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	and	edx, 16777215				; 00ffffffH
	imul	edx, 224				; 000000e0H
	mov	eax, DWORD PTR _localbase$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+edx+216]
	imul	edx, 1256				; 000004e8H
	mov	eax, DWORD PTR _localstack$[ebp+edx]
	mov	DWORD PTR _id$[ebp], eax
	jmp	SHORT $LN132@eval_secon
$LN133@eval_secon:

; 1366 :              else id = q_id;

	mov	ecx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], ecx
$LN132@eval_secon:

; 1367 :              ++stacktop;

	mov	edx, DWORD PTR _stacktop$[ebp]
	add	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx

; 1368 :              stacktop->value = (get_attr(id) & BARE_NAKED) ? 1.0 : 0.0;

	mov	eax, DWORD PTR _id$[ebp]
	and	eax, -536870912				; e0000000H
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	ecx, DWORD PTR _id$[ebp]
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR _web[eax+12]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 65536				; 00010000H
	mov	edx, DWORD PTR [eax+12]
	and	edx, 0
	mov	DWORD PTR tv8282[ebp], ecx
	mov	DWORD PTR tv8282[ebp+4], edx
	mov	eax, DWORD PTR tv8282[ebp]
	or	eax, DWORD PTR tv8282[ebp+4]
	je	SHORT $LN984@eval_secon
	fld1
	fstp	QWORD PTR tv3945[ebp]
	jmp	SHORT $LN985@eval_secon
$LN984@eval_secon:
	fldz
	fstp	QWORD PTR tv3945[ebp]
$LN985@eval_secon:
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR tv3945[ebp]
	fstp	QWORD PTR [ecx]

; 1369 :              zero_seconds(pcount,stacktop);

	mov	edx, DWORD PTR _stacktop$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcount$[ebp]
	push	eax
	call	_zero_seconds
	add	esp, 8

; 1370 :              break;

	jmp	$LN887@eval_secon
$LN131@eval_secon:

; 1371 : 
; 1372 :        case GET_MIDV_NODE:
; 1373 :              if ( node->op1.localnum ) 

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN130@eval_secon

; 1374 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax+216]
	imul	eax, 1256				; 000004e8H
	mov	ecx, DWORD PTR _localstack$[ebp+eax]
	mov	DWORD PTR _id$[ebp], ecx
	jmp	SHORT $LN129@eval_secon
$LN130@eval_secon:

; 1375 :              else id = q_id;

	mov	edx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], edx
$LN129@eval_secon:

; 1376 :              ++stacktop;

	mov	eax, DWORD PTR _stacktop$[ebp]
	add	eax, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], eax

; 1377 :              stacktop->value = ordinal(get_edge_midv(id)) + 1.;

	mov	ecx, DWORD PTR _id$[ebp]
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR _web+124
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _dymem
	add	ecx, DWORD PTR _web+216
	mov	edx, DWORD PTR [ecx+304]
	mov	eax, DWORD PTR [eax+edx+8]
	and	eax, 268435456				; 10000000H
	shr	eax, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN986@eval_secon
	mov	ecx, DWORD PTR _id$[ebp]
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR _web+124
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _dymem
	add	ecx, DWORD PTR _web+216
	mov	edx, DWORD PTR [ecx+304]
	mov	eax, DWORD PTR [eax+edx+8]
	and	eax, 134217727				; 07ffffffH
	mov	DWORD PTR tv3986[ebp], eax
	jmp	SHORT $LN987@eval_secon
$LN986@eval_secon:
	mov	DWORD PTR tv3986[ebp], -1
$LN987@eval_secon:
	fild	DWORD PTR tv3986[ebp]
	fadd	QWORD PTR __real@3ff0000000000000
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx]

; 1378 :              zero_seconds(pcount,stacktop);

	mov	edx, DWORD PTR _stacktop$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcount$[ebp]
	push	eax
	call	_zero_seconds
	add	esp, 8

; 1379 :              break;

	jmp	$LN887@eval_secon
$LN128@eval_secon:

; 1380 : 
; 1381 :        case FIXED_NODE:
; 1382 :        case GET_FIXED_NODE:
; 1383 :              if ( node->op1.localnum ) 

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN127@eval_secon

; 1384 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax+216]
	imul	eax, 1256				; 000004e8H
	mov	ecx, DWORD PTR _localstack$[ebp+eax]
	mov	DWORD PTR _id$[ebp], ecx
	jmp	SHORT $LN126@eval_secon
$LN127@eval_secon:

; 1385 :              else id = q_id;

	mov	edx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], edx
$LN126@eval_secon:

; 1386 :              ++stacktop;

	mov	eax, DWORD PTR _stacktop$[ebp]
	add	eax, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], eax

; 1387 :              stacktop->value = (get_attr(id) & FIXED) ? 1.0 : 0.0;

	mov	ecx, DWORD PTR _id$[ebp]
	and	ecx, -536870912				; e0000000H
	shr	ecx, 29					; 0000001dH
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _id$[ebp]
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR _web[ecx+12]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 64					; 00000040H
	mov	eax, DWORD PTR [ecx+12]
	and	eax, 0
	mov	DWORD PTR tv8328[ebp], edx
	mov	DWORD PTR tv8328[ebp+4], eax
	mov	ecx, DWORD PTR tv8328[ebp]
	or	ecx, DWORD PTR tv8328[ebp+4]
	je	SHORT $LN988@eval_secon
	fld1
	fstp	QWORD PTR tv4012[ebp]
	jmp	SHORT $LN989@eval_secon
$LN988@eval_secon:
	fldz
	fstp	QWORD PTR tv4012[ebp]
$LN989@eval_secon:
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR tv4012[ebp]
	fstp	QWORD PTR [edx]

; 1388 :              zero_seconds(pcount,stacktop);

	mov	eax, DWORD PTR _stacktop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcount$[ebp]
	push	ecx
	call	_zero_seconds
	add	esp, 8

; 1389 :              break;

	jmp	$LN887@eval_secon
$LN125@eval_secon:

; 1390 : 
; 1391 :        case GET_EXTRA_ATTR_NODE:
; 1392 :            { struct extra *ext;
; 1393 :              int spot,k;
; 1394 :              int i; 
; 1395 :              
; 1396 :              n = node->op3.extranum;

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	DWORD PTR _n$[ebp], eax

; 1397 :              if ( node->op1.localnum ) 

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN124@eval_secon

; 1398 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax+216]
	imul	eax, 1256				; 000004e8H
	mov	ecx, DWORD PTR _localstack$[ebp+eax]
	mov	DWORD PTR _id$[ebp], ecx
	jmp	SHORT $LN123@eval_secon
$LN124@eval_secon:

; 1399 :              else id = q_id;

	mov	edx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], edx
$LN123@eval_secon:

; 1400 :              ext = EXTRAS(node->op2.eltype) + n;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _dymem
	add	edx, DWORD PTR _web[ecx+104]
	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 240				; 000000f0H
	add	edx, eax
	mov	DWORD PTR _ext$90553[ebp], edx

; 1401 :              /* get index */
; 1402 :              spot = 0;

	mov	DWORD PTR _spot$90554[ebp], 0

; 1403 :              for ( k = 0 ; k < ext->array_spec.dim ; k++ )

	mov	DWORD PTR _k$90555[ebp], 0
	jmp	SHORT $LN122@eval_secon
$LN121@eval_secon:
	mov	ecx, DWORD PTR _k$90555[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$90555[ebp], ecx
$LN122@eval_secon:
	mov	edx, DWORD PTR _ext$90553[ebp]
	mov	eax, DWORD PTR _k$90555[ebp]
	cmp	eax, DWORD PTR [edx+76]
	jge	$LN120@eval_secon

; 1404 :              { int j = (int)(stacktop[-ext->array_spec.dim+k+1].value);

	mov	ecx, DWORD PTR _ext$90553[ebp]
	mov	edx, DWORD PTR [ecx+76]
	neg	edx
	mov	eax, DWORD PTR _k$90555[ebp]
	lea	ecx, DWORD PTR [edx+eax+1]
	imul	ecx, 1256				; 000004e8H
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [edx+ecx]
	call	__ftol2_sse
	mov	DWORD PTR _j$90564[ebp], eax

; 1405 :                spot *= ext->array_spec.sizes[k];

	mov	eax, DWORD PTR _k$90555[ebp]
	mov	ecx, DWORD PTR _ext$90553[ebp]
	mov	edx, DWORD PTR _spot$90554[ebp]
	imul	edx, DWORD PTR [ecx+eax*4+96]
	mov	DWORD PTR _spot$90554[ebp], edx

; 1406 :                if ( (j < 1) || (j > ext->array_spec.sizes[k]) )

	cmp	DWORD PTR _j$90564[ebp], 1
	jl	SHORT $LN118@eval_secon
	mov	eax, DWORD PTR _k$90555[ebp]
	mov	ecx, DWORD PTR _ext$90553[ebp]
	mov	edx, DWORD PTR _j$90564[ebp]
	cmp	edx, DWORD PTR [ecx+eax*4+96]
	jle	$LN119@eval_secon
$LN118@eval_secon:

; 1407 :                { sprintf(errmsg,
; 1408 :                     "Attribute %s index %d is %d; maximum is %d (in %s).\n",
; 1409 :                     ext->name,k+1,j,ext->array_spec.sizes[k],ex->name);

	mov	eax, DWORD PTR _ex$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _k$90555[ebp]
	mov	edx, DWORD PTR _ext$90553[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+96]
	push	eax
	mov	ecx, DWORD PTR _j$90564[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$90555[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _ext$90553[ebp]
	push	eax
	push	OFFSET ??_C@_0DF@MPPJKLHD@Attribute?5?$CFs?5index?5?$CFd?5is?5?$CFd?$DL?5max@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 28					; 0000001cH

; 1410 :                  sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 1411 :                      file_names[node->file_no],node->line_no);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _file_names
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 1412 :                  kb_error(2578,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2578					; 00000a12H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN119@eval_secon:

; 1413 :                }
; 1414 :                spot += (int)(stacktop[-ext->array_spec.dim+k+1].value) - 1;

	mov	ecx, DWORD PTR _ext$90553[ebp]
	mov	edx, DWORD PTR [ecx+76]
	neg	edx
	mov	eax, DWORD PTR _k$90555[ebp]
	lea	ecx, DWORD PTR [edx+eax+1]
	imul	ecx, 1256				; 000004e8H
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [edx+ecx]
	call	__ftol2_sse
	mov	ecx, DWORD PTR _spot$90554[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _spot$90554[ebp], edx

; 1415 :              }

	jmp	$LN121@eval_secon
$LN120@eval_secon:

; 1416 :              stacktop -= ext->array_spec.dim;

	mov	eax, DWORD PTR _ext$90553[ebp]
	mov	ecx, DWORD PTR [eax+76]
	imul	ecx, 1256				; 000004e8H
	mov	edx, DWORD PTR _stacktop$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _stacktop$[ebp], edx

; 1417 :              if ( id_type(id) != node->op2.eltype )

	mov	eax, DWORD PTR _id$[ebp]
	and	eax, -536870912				; e0000000H
	shr	eax, 29					; 0000001dH
	mov	ecx, DWORD PTR _node$[ebp]
	cmp	eax, DWORD PTR [ecx+136]
	je	$LN107@eval_secon

; 1418 :              { if ( (id_type(id)==EDGE) && (node->op2.eltype==VERTEX) && params )

	mov	edx, DWORD PTR _id$[ebp]
	and	edx, -536870912				; e0000000H
	shr	edx, 29					; 0000001dH
	cmp	edx, 1
	jne	$LN116@eval_secon
	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+136], 0
	jne	$LN116@eval_secon
	cmp	DWORD PTR _params$[ebp], 0
	je	$LN116@eval_secon

; 1419 :                { ext = EXTRAS(VERTEX) + n;

	mov	ecx, DWORD PTR _dymem
	add	ecx, DWORD PTR _web+104
	mov	edx, DWORD PTR _n$[ebp]
	imul	edx, 240				; 000000f0H
	add	ecx, edx
	mov	DWORD PTR _ext$90553[ebp], ecx

; 1420 :                  (++stacktop)->value = interp_edge_attribute(id,ext,spot,(int)params[2*SDIM]);

	mov	eax, DWORD PTR _stacktop$[ebp]
	add	eax, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], eax
	mov	ecx, DWORD PTR _web+616
	shl	ecx, 1
	mov	edx, DWORD PTR _params$[ebp]
	fld	QWORD PTR [edx+ecx*8]
	call	__ftol2_sse
	push	eax
	mov	eax, DWORD PTR _spot$90554[ebp]
	push	eax
	mov	ecx, DWORD PTR _ext$90553[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	call	_interp_edge_attribute
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]

; 1421 :                  FIRST = 0.0; zero_seconds(pcount,stacktop);

	mov	DWORD PTR _i$90556[ebp], 0
	jmp	SHORT $LN115@eval_secon
$LN114@eval_secon:
	mov	ecx, DWORD PTR _i$90556[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$90556[ebp], ecx
$LN115@eval_secon:
	mov	edx, DWORD PTR _i$90556[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN113@eval_secon
	mov	eax, DWORD PTR _i$90556[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fldz
	fstp	QWORD PTR [ecx+eax*8+8]
	jmp	SHORT $LN114@eval_secon
$LN113@eval_secon:
	mov	edx, DWORD PTR _stacktop$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcount$[ebp]
	push	eax
	call	_zero_seconds
	add	esp, 8

; 1422 :                  break;

	jmp	$LN887@eval_secon

; 1423 :                }
; 1424 :                else 

	jmp	$LN107@eval_secon
$LN116@eval_secon:

; 1425 :                if ( (id_type(id)==FACET) && (node->op2.eltype==VERTEX) && params )

	mov	ecx, DWORD PTR _id$[ebp]
	and	ecx, -536870912				; e0000000H
	shr	ecx, 29					; 0000001dH
	cmp	ecx, 2
	jne	$LN111@eval_secon
	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx+136], 0
	jne	$LN111@eval_secon
	cmp	DWORD PTR _params$[ebp], 0
	je	$LN111@eval_secon

; 1426 :                { ext = EXTRAS(VERTEX) + n;

	mov	eax, DWORD PTR _dymem
	add	eax, DWORD PTR _web+104
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, 240				; 000000f0H
	add	eax, ecx
	mov	DWORD PTR _ext$90553[ebp], eax

; 1427 :                  (++stacktop)->value = interp_facet_attribute(id,ext,spot,(int)params[2*SDIM]);

	mov	edx, DWORD PTR _stacktop$[ebp]
	add	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx
	mov	eax, DWORD PTR _web+616
	shl	eax, 1
	mov	ecx, DWORD PTR _params$[ebp]
	fld	QWORD PTR [ecx+eax*8]
	call	__ftol2_sse
	push	eax
	mov	edx, DWORD PTR _spot$90554[ebp]
	push	edx
	mov	eax, DWORD PTR _ext$90553[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	call	_interp_facet_attribute
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]

; 1428 :                  FIRST = 0.0; zero_seconds(pcount,stacktop);

	mov	DWORD PTR _i$90556[ebp], 0
	jmp	SHORT $LN110@eval_secon
$LN109@eval_secon:
	mov	eax, DWORD PTR _i$90556[ebp]
	add	eax, 1
	mov	DWORD PTR _i$90556[ebp], eax
$LN110@eval_secon:
	mov	ecx, DWORD PTR _i$90556[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN108@eval_secon
	mov	edx, DWORD PTR _i$90556[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fldz
	fstp	QWORD PTR [eax+edx*8+8]
	jmp	SHORT $LN109@eval_secon
$LN108@eval_secon:
	mov	ecx, DWORD PTR _stacktop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcount$[ebp]
	push	edx
	call	_zero_seconds
	add	esp, 8

; 1429 :                  break;

	jmp	$LN887@eval_secon

; 1430 :                }
; 1431 :                else 

	jmp	$LN107@eval_secon
$LN111@eval_secon:

; 1432 :                { sprintf(errmsg,
; 1433 :                    "Attribute %s is %s attribute, not %s attribute (in %s).\n",
; 1434 :                    EXTRAS(node->op2.eltype)[n].name,
; 1435 :                      typenames[node->op2.eltype], typenames[id_type(id)],ex->name);

	mov	eax, DWORD PTR _ex$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	and	ecx, -536870912				; e0000000H
	shr	ecx, 29					; 0000001dH
	mov	edx, DWORD PTR _typenames[ecx*4]
	push	edx
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	edx, DWORD PTR _typenames[ecx*4]
	push	edx
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _dymem
	add	edx, DWORD PTR _web[ecx+104]
	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 240				; 000000f0H
	add	edx, eax
	push	edx
	push	OFFSET ??_C@_0DJ@FLIAONNC@Attribute?5?$CFs?5is?5?$CFs?5attribute?0?5no@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 24					; 00000018H

; 1436 :                  sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 1437 :                      file_names[node->file_no],node->line_no);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _file_names
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 1438 :                  kb_error(2538,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2538					; 000009eaH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN107@eval_secon:

; 1439 :                }
; 1440 :              }
; 1441 :              if ( ext->code.start ) 

	mov	ecx, DWORD PTR _ext$90553[ebp]
	cmp	DWORD PTR [ecx+128], 0
	je	SHORT $LN106@eval_secon

; 1442 :              { int oldflag = autorecalc_flag;

	mov	edx, DWORD PTR _autorecalc_flag
	mov	DWORD PTR _oldflag$90592[ebp], edx

; 1443 :                autorecalc_flag = 0;

	mov	DWORD PTR _autorecalc_flag, 0

; 1444 :                eval(&ext->code,NULL,id,NULL);  /* side-effect fills in values */

	push	0
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _ext$90553[ebp]
	add	ecx, 128				; 00000080H
	push	ecx
	call	_eval
	fstp	ST(0)
	add	esp, 16					; 00000010H

; 1445 :                autorecalc_flag = oldflag;

	mov	edx, DWORD PTR _oldflag$90592[ebp]
	mov	DWORD PTR _autorecalc_flag, edx
$LN106@eval_secon:

; 1446 :               }
; 1447 :              switch ( ext->type )

	mov	eax, DWORD PTR _ext$90553[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR tv4190[ebp], ecx
	mov	edx, DWORD PTR tv4190[ebp]
	sub	edx, 1
	mov	DWORD PTR tv4190[ebp], edx
	cmp	DWORD PTR tv4190[ebp], 22		; 00000016H
	ja	$LN104@eval_secon
	mov	eax, DWORD PTR tv4190[ebp]
	movzx	ecx, BYTE PTR $LN1102@eval_secon[eax]
	jmp	DWORD PTR $LN1108@eval_secon[ecx*4]
$LN103@eval_secon:

; 1448 :              { case REAL_TYPE: 
; 1449 :                 (++stacktop)->value = ((REAL*)get_extra(id,n))[spot]; 

	mov	edx, DWORD PTR _stacktop$[ebp]
	add	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	call	_get_extra
	add	esp, 8
	mov	edx, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _spot$90554[ebp]
	fld	QWORD PTR [eax+ecx*8]
	fstp	QWORD PTR [edx]

; 1450 :                 break;

	jmp	$LN104@eval_secon
$LN102@eval_secon:

; 1451 :                case INTEGER_TYPE: 
; 1452 :                case CONSTRAINT_TYPE: 
; 1453 :                case BOUNDARY_TYPE: 
; 1454 :                case QUANTITY_TYPE: 
; 1455 :                case INSTANCE_TYPE: 
; 1456 :                case PROCEDURE_TYPE: 
; 1457 :                 (++stacktop)->value = (REAL)((int*)get_extra(id,n))[spot];

	mov	edx, DWORD PTR _stacktop$[ebp]
	add	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	call	_get_extra
	add	esp, 8
	mov	edx, DWORD PTR _spot$90554[ebp]
	fild	DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]

; 1458 :                 break;

	jmp	$LN104@eval_secon
$LN101@eval_secon:

; 1459 :                case UINT_TYPE: 
; 1460 :                 (++stacktop)->value = (REAL)((unsigned int*)get_extra(id,n))[spot];

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	_get_extra
	add	esp, 8
	mov	ecx, DWORD PTR _spot$90554[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv8489[ebp], edx
	mov	DWORD PTR tv8489[ebp+4], 0
	fild	QWORD PTR tv8489[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]

; 1461 :                 break;

	jmp	$LN104@eval_secon
$LN100@eval_secon:

; 1462 :                case USHORT_TYPE: 
; 1463 :                 (++stacktop)->value = (REAL)((unsigned short*)get_extra(id,n))[spot];

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	_get_extra
	add	esp, 8
	mov	ecx, DWORD PTR _spot$90554[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR tv8498[ebp], edx
	fild	DWORD PTR tv8498[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]

; 1464 :                 break;

	jmp	$LN104@eval_secon
$LN99@eval_secon:

; 1465 :                case SHORT_TYPE: 
; 1466 :                 (++stacktop)->value = (REAL)((short*)get_extra(id,n))[spot];

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	_get_extra
	add	esp, 8
	mov	ecx, DWORD PTR _spot$90554[ebp]
	movsx	edx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR tv8505[ebp], edx
	fild	DWORD PTR tv8505[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]

; 1467 :                 break;

	jmp	$LN104@eval_secon
$LN98@eval_secon:

; 1468 :                case ULONG_TYPE: 
; 1469 :                 (++stacktop)->value = (REAL)((unsigned long*)get_extra(id,n))[spot];

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	_get_extra
	add	esp, 8
	mov	ecx, DWORD PTR _spot$90554[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv8513[ebp], edx
	mov	DWORD PTR tv8513[ebp+4], 0
	fild	QWORD PTR tv8513[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]

; 1470 :                 break;

	jmp	$LN104@eval_secon
$LN97@eval_secon:

; 1471 :                case LONG_TYPE: 
; 1472 :                 (++stacktop)->value = (REAL)((long*)get_extra(id,n))[spot];

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	_get_extra
	add	esp, 8
	mov	ecx, DWORD PTR _spot$90554[ebp]
	fild	DWORD PTR [eax+ecx*4]
	mov	edx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [edx]

; 1473 :                 break;

	jmp	$LN104@eval_secon
$LN96@eval_secon:

; 1474 :                case UCHAR_TYPE: 
; 1475 :                 (++stacktop)->value = (REAL)((unsigned char*)get_extra(id,n))[spot];

	mov	eax, DWORD PTR _stacktop$[ebp]
	add	eax, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	call	_get_extra
	add	esp, 8
	mov	ecx, DWORD PTR _spot$90554[ebp]
	movzx	edx, BYTE PTR [eax+ecx]
	mov	DWORD PTR tv8528[ebp], edx
	fild	DWORD PTR tv8528[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]

; 1476 :                   break;

	jmp	SHORT $LN104@eval_secon
$LN95@eval_secon:

; 1477 :                case CHAR_TYPE: 
; 1478 :                 (++stacktop)->value = (REAL)((char*)get_extra(id,n))[spot];

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	_get_extra
	add	esp, 8
	mov	ecx, DWORD PTR _spot$90554[ebp]
	movsx	edx, BYTE PTR [eax+ecx]
	mov	DWORD PTR tv8535[ebp], edx
	fild	DWORD PTR tv8535[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]

; 1479 :                   break;

	jmp	SHORT $LN104@eval_secon
$LN94@eval_secon:

; 1480 :                case ELEMENTID_TYPE: 
; 1481 :                case VERTEX_TYPE: 
; 1482 :                case EDGE_TYPE: 
; 1483 :                case FACET_TYPE: 
; 1484 :                case BODY_TYPE: 
; 1485 :                case FACETEDGE_TYPE: 
; 1486 :                 (++stacktop)->value = (REAL)((element_id*)get_extra(id,n))[spot];

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	_get_extra
	add	esp, 8
	mov	ecx, DWORD PTR _spot$90554[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv8543[ebp], edx
	mov	DWORD PTR tv8543[ebp+4], 0
	fild	QWORD PTR tv8543[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [eax]
$LN104@eval_secon:

; 1487 :                 break;
; 1488 :              }
; 1489 :              FIRST = 0.0; zero_seconds(pcount,stacktop);

	mov	DWORD PTR _i$90556[ebp], 0
	jmp	SHORT $LN93@eval_secon
$LN92@eval_secon:
	mov	ecx, DWORD PTR _i$90556[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$90556[ebp], ecx
$LN93@eval_secon:
	mov	edx, DWORD PTR _i$90556[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN91@eval_secon
	mov	eax, DWORD PTR _i$90556[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fldz
	fstp	QWORD PTR [ecx+eax*8+8]
	jmp	SHORT $LN92@eval_secon
$LN91@eval_secon:
	mov	edx, DWORD PTR _stacktop$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcount$[ebp]
	push	eax
	call	_zero_seconds
	add	esp, 8

; 1490 :              break;

	jmp	$LN887@eval_secon
$LN90@eval_secon:

; 1491 :            }
; 1492 : 
; 1493 :        case ON_CONSTRAINT_NODE:
; 1494 :        case ON_CONSTRAINT_NAME_NODE:
; 1495 :            { int testcon = (node->type == ON_CONSTRAINT_NODE) ? (int)((stacktop--)->value)
; 1496 :                             : node->op3.connum;

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx], 10222			; 000027eeH
	jne	SHORT $LN990@eval_secon
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [edx]
	call	__ftol2_sse
	mov	DWORD PTR tv4307[ebp], eax
	mov	eax, DWORD PTR _stacktop$[ebp]
	sub	eax, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], eax
	jmp	SHORT $LN991@eval_secon
$LN990@eval_secon:
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	DWORD PTR tv4307[ebp], edx
$LN991@eval_secon:
	mov	eax, DWORD PTR tv4307[ebp]
	mov	DWORD PTR _testcon$90632[ebp], eax

; 1497 :              if ( node->op1.localnum ) 

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN89@eval_secon

; 1498 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax+216]
	imul	eax, 1256				; 000004e8H
	mov	ecx, DWORD PTR _localstack$[ebp+eax]
	mov	DWORD PTR _id$[ebp], ecx
	jmp	SHORT $LN88@eval_secon
$LN89@eval_secon:

; 1499 :              else id = q_id;

	mov	edx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], edx
$LN88@eval_secon:

; 1500 :              ++stacktop;

	mov	eax, DWORD PTR _stacktop$[ebp]
	add	eax, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], eax

; 1501 :              switch(id_type(id))

	mov	ecx, DWORD PTR _id$[ebp]
	and	ecx, -536870912				; e0000000H
	shr	ecx, 29					; 0000001dH
	mov	DWORD PTR tv4320[ebp], ecx
	cmp	DWORD PTR tv4320[ebp], 0
	je	SHORT $LN85@eval_secon
	cmp	DWORD PTR tv4320[ebp], 1
	je	SHORT $LN84@eval_secon
	cmp	DWORD PTR tv4320[ebp], 2
	je	SHORT $LN83@eval_secon
	jmp	SHORT $LN82@eval_secon
$LN85@eval_secon:

; 1502 :               { case VERTEX: stacktop->value = (REAL)v_on_constraint(id,testcon);

	mov	edx, DWORD PTR _testcon$90632[ebp]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	_v_on_constraint
	add	esp, 8
	mov	DWORD PTR tv8576[ebp], eax
	fild	DWORD PTR tv8576[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx]

; 1503 :                      break;

	jmp	$LN86@eval_secon
$LN84@eval_secon:

; 1504 :                  case EDGE  : stacktop->value = (REAL)e_on_constraint(id,testcon);

	mov	edx, DWORD PTR _testcon$90632[ebp]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	_e_on_constraint
	add	esp, 8
	mov	DWORD PTR tv8581[ebp], eax
	fild	DWORD PTR tv8581[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx]

; 1505 :                      break;

	jmp	$LN86@eval_secon
$LN83@eval_secon:

; 1506 :                  case FACET : stacktop->value = (REAL)f_on_constraint(id,testcon);

	mov	edx, DWORD PTR _testcon$90632[ebp]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	_f_on_constraint
	add	esp, 8
	mov	DWORD PTR tv8586[ebp], eax
	fild	DWORD PTR tv8586[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx]

; 1507 :                      break;

	jmp	SHORT $LN86@eval_secon
$LN82@eval_secon:

; 1508 :                  default: sprintf(errmsg,
; 1509 :                      "Can't do constraints on this type element.\n");

	push	OFFSET ??_C@_0CM@PABLLOJJ@Can?8t?5do?5constraints?5on?5this?5typ@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 8

; 1510 :                    sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 1511 :                       file_names[node->file_no],node->line_no);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _file_names
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 1512 :                    kb_error(1052,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	1052					; 0000041cH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN86@eval_secon:

; 1513 :               }
; 1514 :              }
; 1515 :              zero_seconds(pcount,stacktop);

	mov	edx, DWORD PTR _stacktop$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcount$[ebp]
	push	eax
	call	_zero_seconds
	add	esp, 8

; 1516 :              break;

	jmp	$LN887@eval_secon
$LN81@eval_secon:

; 1517 : 
; 1518 :        case HIT_CONSTRAINT_NODE:
; 1519 :        case HIT_CONSTRAINT_NAME_NODE:
; 1520 :            { 
; 1521 :              int testcon = (node->type == ON_CONSTRAINT_NODE) ? (int)((stacktop--)->value)
; 1522 :                             : node->op3.connum;

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx], 10222			; 000027eeH
	jne	SHORT $LN992@eval_secon
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [edx]
	call	__ftol2_sse
	mov	DWORD PTR tv4358[ebp], eax
	mov	eax, DWORD PTR _stacktop$[ebp]
	sub	eax, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], eax
	jmp	SHORT $LN993@eval_secon
$LN992@eval_secon:
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	DWORD PTR tv4358[ebp], edx
$LN993@eval_secon:
	mov	eax, DWORD PTR tv4358[ebp]
	mov	DWORD PTR _testcon$90651[ebp], eax

; 1523 :              if ( node->op1.localnum ) 

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN80@eval_secon

; 1524 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax+216]
	imul	eax, 1256				; 000004e8H
	mov	ecx, DWORD PTR _localstack$[ebp+eax]
	mov	DWORD PTR _id$[ebp], ecx
	jmp	SHORT $LN79@eval_secon
$LN80@eval_secon:

; 1525 :              else id = q_id;

	mov	edx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], edx
$LN79@eval_secon:

; 1526 :              ++stacktop;

	mov	eax, DWORD PTR _stacktop$[ebp]
	add	eax, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], eax

; 1527 :              switch(id_type(id))

	mov	ecx, DWORD PTR _id$[ebp]
	and	ecx, -536870912				; e0000000H
	shr	ecx, 29					; 0000001dH
	mov	DWORD PTR tv4371[ebp], ecx
	cmp	DWORD PTR tv4371[ebp], 0
	je	SHORT $LN76@eval_secon
	jmp	SHORT $LN75@eval_secon
$LN76@eval_secon:

; 1528 :               { case VERTEX: stacktop->value =
; 1529 :                       (REAL)get_v_constraint_status(id,testcon);

	mov	edx, DWORD PTR _testcon$90651[ebp]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	_get_v_constraint_status
	add	esp, 8
	mov	DWORD PTR tv8618[ebp], eax
	fild	DWORD PTR tv8618[ebp]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx]

; 1530 :                       break;

	jmp	SHORT $LN77@eval_secon
$LN75@eval_secon:

; 1531 :                  default: sprintf(errmsg,
; 1532 :                     "Can do hit_constraints only on vertices.\n");

	push	OFFSET ??_C@_0CK@OJPFAPEO@Can?5do?5hit_constraints?5only?5on?5v@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 8

; 1533 :                    sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 1534 :                       file_names[node->file_no],node->line_no);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _file_names
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 1535 :                    kb_error(1053,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	1053					; 0000041dH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN77@eval_secon:

; 1536 :               }
; 1537 :            }
; 1538 :            zero_seconds(pcount,stacktop);

	mov	edx, DWORD PTR _stacktop$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcount$[ebp]
	push	eax
	call	_zero_seconds
	add	esp, 8

; 1539 :            break;

	jmp	$LN887@eval_secon
$LN74@eval_secon:

; 1540 :  
; 1541 :       case CONSTRAINT_VALUE_NODE:
; 1542 :       case CONSTRAINT_NAME_VALUE_NODE:
; 1543 :       { int connum = (node->type == CONSTRAINT_VALUE_NODE) ? (int)((stacktop--)->value)
; 1544 :                             : node->op3.connum;

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx], 10224			; 000027f0H
	jne	SHORT $LN994@eval_secon
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [edx]
	call	__ftol2_sse
	mov	DWORD PTR tv4399[ebp], eax
	mov	eax, DWORD PTR _stacktop$[ebp]
	sub	eax, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], eax
	jmp	SHORT $LN995@eval_secon
$LN994@eval_secon:
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	DWORD PTR tv4399[ebp], edx
$LN995@eval_secon:
	mov	eax, DWORD PTR tv4399[ebp]
	mov	DWORD PTR _connum$90666[ebp], eax

; 1545 :         if ( node->op1.localnum ) 

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN73@eval_secon

; 1546 :            id = *(element_id*)get_localp(node->op1.localnum);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax+216]
	imul	eax, 1256				; 000004e8H
	mov	ecx, DWORD PTR _localstack$[ebp+eax]
	mov	DWORD PTR _id$[ebp], ecx
	jmp	SHORT $LN72@eval_secon
$LN73@eval_secon:

; 1547 :         else id = q_id;

	mov	edx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], edx
$LN72@eval_secon:

; 1548 :         if ( id_type(id) != VERTEX )

	mov	eax, DWORD PTR _id$[ebp]
	and	eax, -536870912				; e0000000H
	shr	eax, 29					; 0000001dH
	test	eax, eax
	je	SHORT $LN71@eval_secon

; 1549 :         { sprintf(errmsg,"Can only do constraint value for vertices.\n");

	push	OFFSET ??_C@_0CM@IPCEGKDM@Can?5only?5do?5constraint?5value?5for@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 8

; 1550 :           sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 1551 :                  file_names[node->file_no],node->line_no);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _file_names
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 1552 :           kb_error(4273,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	4273					; 000010b1H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN71@eval_secon:

; 1553 :         }
; 1554 :         ++stacktop;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx

; 1555 :         stacktop->value = eval(get_constraint(connum)->formula ,get_coord(id), id, NULL);

	push	0
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR _web+12
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	add	eax, DWORD PTR _web+104
	add	edx, DWORD PTR [eax+64]
	push	edx
	mov	ecx, DWORD PTR _connum$90666[ebp]
	and	ecx, 1073741823				; 3fffffffH
	imul	ecx, 176				; 000000b0H
	mov	edx, DWORD PTR _web+652
	mov	eax, DWORD PTR [edx+ecx+40]
	push	eax
	call	_eval
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fstp	QWORD PTR [ecx]

; 1556 :         zero_seconds(pcount,stacktop);

	mov	edx, DWORD PTR _stacktop$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcount$[ebp]
	push	eax
	call	_zero_seconds
	add	esp, 8

; 1557 :       }
; 1558 :       break;

	jmp	$LN887@eval_secon
$LN70@eval_secon:

; 1559 : 
; 1560 :        case ON_BOUNDARY_NODE:
; 1561 :        case ON_BOUNDARY_NAME_NODE:
; 1562 :            { struct boundary *b=NULL;

	mov	DWORD PTR _b$90682[ebp], 0

; 1563 :              int testb = (node->type == ON_BOUNDARY_NODE) ? (int)((stacktop--)->value)
; 1564 :                             : node->op3.bdrynum;

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx], 10228			; 000027f4H
	jne	SHORT $LN996@eval_secon
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [edx]
	call	__ftol2_sse
	mov	DWORD PTR tv4482[ebp], eax
	mov	eax, DWORD PTR _stacktop$[ebp]
	sub	eax, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], eax
	jmp	SHORT $LN997@eval_secon
$LN996@eval_secon:
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	DWORD PTR tv4482[ebp], edx
$LN997@eval_secon:
	mov	eax, DWORD PTR tv4482[ebp]
	mov	DWORD PTR _testb$90684[ebp], eax

; 1565 :              if ( node->op1.localnum ) 

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN69@eval_secon

; 1566 :                 id = *(element_id*)get_localp(node->op1.localnum);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax+216]
	imul	eax, 1256				; 000004e8H
	mov	ecx, DWORD PTR _localstack$[ebp+eax]
	mov	DWORD PTR _id$[ebp], ecx
	jmp	SHORT $LN68@eval_secon
$LN69@eval_secon:

; 1567 :              else id = q_id;

	mov	edx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$[ebp], edx
$LN68@eval_secon:

; 1568 :              ++stacktop;

	mov	eax, DWORD PTR _stacktop$[ebp]
	add	eax, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], eax

; 1569 :              switch(id_type(id))

	mov	ecx, DWORD PTR _id$[ebp]
	and	ecx, -536870912				; e0000000H
	shr	ecx, 29					; 0000001dH
	mov	DWORD PTR tv4495[ebp], ecx
	cmp	DWORD PTR tv4495[ebp], 0
	je	SHORT $LN65@eval_secon
	cmp	DWORD PTR tv4495[ebp], 1
	je	SHORT $LN64@eval_secon
	cmp	DWORD PTR tv4495[ebp], 2
	je	$LN63@eval_secon
	jmp	$LN62@eval_secon
$LN65@eval_secon:

; 1570 :               { case VERTEX: b = get_boundary(id); break;

	cmp	DWORD PTR _V_BOUNDARY_ATTR, 0
	je	SHORT $LN998@eval_secon
	mov	edx, DWORD PTR _id$[ebp]
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR _dymem
	add	eax, DWORD PTR _web+104
	mov	ecx, DWORD PTR _V_BOUNDARY_ATTR
	imul	ecx, 240				; 000000f0H
	mov	esi, DWORD PTR _web+12
	mov	edx, DWORD PTR [esi+edx*4]
	mov	eax, DWORD PTR [eax+ecx+64]
	mov	ecx, DWORD PTR [edx+eax]
	imul	ecx, 136				; 00000088H
	add	ecx, DWORD PTR _web+776
	mov	DWORD PTR tv4507[ebp], ecx
	jmp	SHORT $LN999@eval_secon
$LN998@eval_secon:
	mov	DWORD PTR tv4507[ebp], 0
$LN999@eval_secon:
	mov	edx, DWORD PTR tv4507[ebp]
	mov	DWORD PTR _b$90682[ebp], edx
	jmp	$LN66@eval_secon
$LN64@eval_secon:

; 1571 :                 case EDGE  : b = get_edge_boundary(id); break;

	cmp	DWORD PTR _E_BOUNDARY_ATTR, 0
	je	SHORT $LN1000@eval_secon
	mov	eax, DWORD PTR _id$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR _dymem
	add	ecx, DWORD PTR _web+216
	mov	edx, DWORD PTR _E_BOUNDARY_ATTR
	imul	edx, 240				; 000000f0H
	mov	esi, DWORD PTR _web+124
	mov	eax, DWORD PTR [esi+eax*4]
	mov	ecx, DWORD PTR [ecx+edx+64]
	mov	edx, DWORD PTR [eax+ecx]
	imul	edx, 136				; 00000088H
	add	edx, DWORD PTR _web+776
	mov	DWORD PTR tv4523[ebp], edx
	jmp	SHORT $LN1001@eval_secon
$LN1000@eval_secon:
	mov	DWORD PTR tv4523[ebp], 0
$LN1001@eval_secon:
	mov	eax, DWORD PTR tv4523[ebp]
	mov	DWORD PTR _b$90682[ebp], eax
	jmp	$LN66@eval_secon
$LN63@eval_secon:

; 1572 :                 case FACET : b = get_facet_boundary(id); break;

	cmp	DWORD PTR _F_BOUNDARY_ATTR, 0
	je	SHORT $LN1002@eval_secon
	mov	ecx, DWORD PTR _id$[ebp]
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR _dymem
	add	edx, DWORD PTR _web+328
	mov	eax, DWORD PTR _F_BOUNDARY_ATTR
	imul	eax, 240				; 000000f0H
	mov	esi, DWORD PTR _web+236
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	edx, DWORD PTR [edx+eax+64]
	mov	eax, DWORD PTR [ecx+edx]
	imul	eax, 136				; 00000088H
	add	eax, DWORD PTR _web+776
	mov	DWORD PTR tv4539[ebp], eax
	jmp	SHORT $LN1003@eval_secon
$LN1002@eval_secon:
	mov	DWORD PTR tv4539[ebp], 0
$LN1003@eval_secon:
	mov	ecx, DWORD PTR tv4539[ebp]
	mov	DWORD PTR _b$90682[ebp], ecx
	jmp	SHORT $LN66@eval_secon
$LN62@eval_secon:

; 1573 :                 default: sprintf(errmsg,
; 1574 :                    "Can't do boundary on this type element.\n");

	push	OFFSET ??_C@_0CJ@MIEHCCIC@Can?8t?5do?5boundary?5on?5this?5type?5e@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 8

; 1575 :                   sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 1576 :                    file_names[node->file_no],node->line_no);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _file_names
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 1577 :                   kb_error(1054,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	1054					; 0000041eH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN66@eval_secon:

; 1578 :               }
; 1579 :              stacktop->value = (b == web.boundaries+testb) ? 1.0 : 0.0;

	mov	edx, DWORD PTR _testb$90684[ebp]
	imul	edx, 136				; 00000088H
	add	edx, DWORD PTR _web+776
	cmp	DWORD PTR _b$90682[ebp], edx
	jne	SHORT $LN1004@eval_secon
	fld1
	fstp	QWORD PTR tv4562[ebp]
	jmp	SHORT $LN1005@eval_secon
$LN1004@eval_secon:
	fldz
	fstp	QWORD PTR tv4562[ebp]
$LN1005@eval_secon:
	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR tv4562[ebp]
	fstp	QWORD PTR [eax]

; 1580 :            }
; 1581 :            zero_seconds(pcount,stacktop);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcount$[ebp]
	push	edx
	call	_zero_seconds
	add	esp, 8

; 1582 :            break;

	jmp	$LN887@eval_secon
$LN61@eval_secon:

; 1583 : 
; 1584 :        /* whole-array syntax */
; 1585 : 
; 1586 :        case ARRAYIDENT_NODE: /* push datastart for array */
; 1587 :         { struct global *glvalue = globals(node->op2.name_id);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	jne	SHORT $LN1010@eval_secon
	mov	edx, DWORD PTR _dymem
	add	edx, DWORD PTR _web+5652
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv4594[ebp], edx
	jmp	$LN1011@eval_secon
$LN1010@eval_secon:
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN1008@eval_secon
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+136]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _localbase$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR tv4593[ebp], eax
	jmp	SHORT $LN1009@eval_secon
$LN1008@eval_secon:
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+136]
	and	eax, -16777216				; ff000000H
	cmp	eax, 536870912				; 20000000H
	jne	SHORT $LN1006@eval_secon
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	and	edx, 16777215				; 00ffffffH
	mov	eax, DWORD PTR _web+5656
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv4592[ebp], ecx
	jmp	SHORT $LN1007@eval_secon
$LN1006@eval_secon:
	mov	edx, DWORD PTR _dymem
	add	edx, DWORD PTR _web+5652
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv4592[ebp], edx
$LN1007@eval_secon:
	mov	eax, DWORD PTR tv4592[ebp]
	mov	DWORD PTR tv4593[ebp], eax
$LN1009@eval_secon:
	mov	ecx, DWORD PTR tv4593[ebp]
	mov	DWORD PTR tv4594[ebp], ecx
$LN1011@eval_secon:
	mov	edx, DWORD PTR tv4594[ebp]
	mov	DWORD PTR _glvalue$90714[ebp], edx

; 1588 :           struct array *alvalue = glvalue->attr.arrayptr;

	mov	eax, DWORD PTR _glvalue$90714[ebp]
	mov	ecx, DWORD PTR [eax+168]
	mov	DWORD PTR _alvalue$90717[ebp], ecx

; 1589 :           if ( glvalue->flags & FIXED_SIZE_ARRAY )

	mov	edx, DWORD PTR _glvalue$90714[ebp]
	mov	eax, DWORD PTR [edx+192]
	and	eax, 268435456				; 10000000H
	je	SHORT $LN60@eval_secon

; 1590 :             *(REAL**)(++stacktop) = 
; 1591 :                 (REAL*)get_localp(glvalue->attr.arrayptr->datastart);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx
	mov	edx, DWORD PTR _glvalue$90714[ebp]
	mov	eax, DWORD PTR [edx+168]
	mov	ecx, DWORD PTR [eax+20]
	and	ecx, 16777215				; 00ffffffH
	imul	ecx, 224				; 000000e0H
	mov	edx, DWORD PTR _localbase$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+ecx+216]
	imul	ecx, 1256				; 000004e8H
	lea	edx, DWORD PTR _localstack$[ebp+ecx]
	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	DWORD PTR [eax], edx

; 1592 :           else 

	jmp	SHORT $LN59@eval_secon
$LN60@eval_secon:

; 1593 :             *(char**)(++stacktop) = (char*)alvalue + alvalue->datastart;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx
	mov	edx, DWORD PTR _alvalue$90717[ebp]
	mov	eax, DWORD PTR _alvalue$90717[ebp]
	add	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _stacktop$[ebp]
	mov	DWORD PTR [ecx], eax
$LN59@eval_secon:

; 1594 :           break;

	jmp	$LN887@eval_secon
$LN58@eval_secon:

; 1595 :         }
; 1596 : 
; 1597 :         case ATTRIB_LVALUE_NODE:  /* push datastart for attribute array */
; 1598 :         { element_id id;
; 1599 :           n = node->op2.name_id & GLOBMASK; /* attribute number */

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+136]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _n$[ebp], eax

; 1600 :           if ( node->op1.localnum )

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN57@eval_secon

; 1601 :             id = *(element_id*)get_localp(node->op1.localnum);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax+216]
	imul	eax, 1256				; 000004e8H
	mov	ecx, DWORD PTR _localstack$[ebp+eax]
	mov	DWORD PTR _id$90725[ebp], ecx
	jmp	SHORT $LN56@eval_secon
$LN57@eval_secon:

; 1602 :           else id = q_id;

	mov	edx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$90725[ebp], edx
$LN56@eval_secon:

; 1603 :           *(char**)(++stacktop) = (char*)get_extra(id,n);

	mov	eax, DWORD PTR _stacktop$[ebp]
	add	eax, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$90725[ebp]
	push	edx
	call	_get_extra
	add	esp, 8
	mov	ecx, DWORD PTR _stacktop$[ebp]
	mov	DWORD PTR [ecx], eax

; 1604 :         }
; 1605 :         break;

	jmp	$LN887@eval_secon
$LN55@eval_secon:

; 1606 : 
; 1607 :        case ARRAY_VERTEX_NORMAL_NODE:
; 1608 :        case ARRAY_EDGE_VECTOR_NODE:
; 1609 :        case ARRAY_FACET_NORMAL_NODE:
; 1610 :         { element_id id;
; 1611 :           int i;
; 1612 :           REAL *datastart =  (REAL*)get_localp(node->op3.localnum);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+140]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax+216]
	imul	eax, 1256				; 000004e8H
	lea	ecx, DWORD PTR _localstack$[ebp+eax]
	mov	DWORD PTR _datastart$90734[ebp], ecx

; 1613 :           *(REAL**)(++stacktop) = datastart;

	mov	edx, DWORD PTR _stacktop$[ebp]
	add	edx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], edx
	mov	eax, DWORD PTR _stacktop$[ebp]
	mov	ecx, DWORD PTR _datastart$90734[ebp]
	mov	DWORD PTR [eax], ecx

; 1614 :           if ( node->flags & IS_RVALUE )

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+24]
	and	eax, 8192				; 00002000H
	je	$LN50@eval_secon

; 1615 :           { if ( node->op1.localnum )

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN53@eval_secon

; 1616 :               id = *(element_id*)get_localp(node->op1.localnum);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _localbase$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax+216]
	imul	eax, 1256				; 000004e8H
	mov	ecx, DWORD PTR _localstack$[ebp+eax]
	mov	DWORD PTR _id$90732[ebp], ecx
	jmp	SHORT $LN52@eval_secon
$LN53@eval_secon:

; 1617 :             else id = q_id;

	mov	edx, DWORD PTR _q_id$[ebp]
	mov	DWORD PTR _id$90732[ebp], edx
$LN52@eval_secon:

; 1618 :             switch ( node->type )

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv4646[ebp], ecx
	cmp	DWORD PTR tv4646[ebp], 10354		; 00002872H
	je	SHORT $LN49@eval_secon
	cmp	DWORD PTR tv4646[ebp], 10355		; 00002873H
	je	$LN44@eval_secon
	cmp	DWORD PTR tv4646[ebp], 10356		; 00002874H
	je	$LN43@eval_secon
	jmp	$LN50@eval_secon
$LN49@eval_secon:

; 1619 :             { case ARRAY_VERTEX_NORMAL_NODE:
; 1620 :                { MAT2D(normal,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	edx, DWORD PTR _normalxJ$90747[ebp]
	push	edx
	lea	eax, DWORD PTR _normalqXvS$90746[ebp]
	push	eax
	call	_mat2d_setup
	add	esp, 16					; 00000010H
	mov	DWORD PTR _normal$90748[ebp], eax

; 1621 :                  REAL mag;
; 1622 :                  int normcount;
; 1623 : 
; 1624 :                  normcount = new_calc_vertex_normal(id,normal);

	mov	ecx, DWORD PTR _normal$90748[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$90732[ebp]
	push	edx
	call	_new_calc_vertex_normal
	add	esp, 8
	mov	DWORD PTR _normcount$90751[ebp], eax

; 1625 :                  project_vertex_normals(id,normal,normcount);

	mov	eax, DWORD PTR _normcount$90751[ebp]
	push	eax
	mov	ecx, DWORD PTR _normal$90748[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$90732[ebp]
	push	edx
	call	_project_vertex_normals
	add	esp, 12					; 0000000cH

; 1626 :                  mag = sqrt(SDIM_dot(normal[0],normal[0]));

	mov	eax, DWORD PTR _web+616
	push	eax
	mov	ecx, DWORD PTR _normal$90748[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _normal$90748[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_dot
	add	esp, 4
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	QWORD PTR _mag$90750[ebp]

; 1627 :                  if ( mag == 0.0 ) mag = 1;

	fld	QWORD PTR _mag$90750[ebp]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN48@eval_secon
	fld1
	fstp	QWORD PTR _mag$90750[ebp]
$LN48@eval_secon:

; 1628 :                  for ( i = 0 ; i < SDIM ; i++ )

	mov	DWORD PTR _i$90733[ebp], 0
	jmp	SHORT $LN47@eval_secon
$LN46@eval_secon:
	mov	edx, DWORD PTR _i$90733[ebp]
	add	edx, 1
	mov	DWORD PTR _i$90733[ebp], edx
$LN47@eval_secon:
	mov	eax, DWORD PTR _i$90733[ebp]
	cmp	eax, DWORD PTR _web+616
	jge	SHORT $LN45@eval_secon

; 1629 :                     datastart[i] = normal[0][i]/mag;

	mov	ecx, DWORD PTR _normal$90748[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _i$90733[ebp]
	fld	QWORD PTR [edx+eax*8]
	fdiv	QWORD PTR _mag$90750[ebp]
	mov	ecx, DWORD PTR _i$90733[ebp]
	mov	edx, DWORD PTR _datastart$90734[ebp]
	fstp	QWORD PTR [edx+ecx*8]
	jmp	SHORT $LN46@eval_secon
$LN45@eval_secon:

; 1630 :               
; 1631 :                  break;

	jmp	SHORT $LN50@eval_secon
$LN44@eval_secon:

; 1632 :                 }
; 1633 :               case ARRAY_EDGE_VECTOR_NODE:
; 1634 :                  get_edge_side(id,datastart);

	mov	eax, DWORD PTR _datastart$90734[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$90732[ebp]
	push	ecx
	call	_get_edge_side
	add	esp, 8

; 1635 :                  break;

	jmp	SHORT $LN50@eval_secon
$LN43@eval_secon:

; 1636 :               case ARRAY_FACET_NORMAL_NODE:
; 1637 :                  get_facet_normal(id,datastart);

	mov	edx, DWORD PTR _datastart$90734[ebp]
	push	edx
	mov	eax, DWORD PTR _id$90732[ebp]
	push	eax
	call	_get_facet_normal
	add	esp, 8
$LN50@eval_secon:

; 1638 :                  break;
; 1639 :             }
; 1640 :           }
; 1641 :         }
; 1642 :         break;

	jmp	$LN887@eval_secon
$LN42@eval_secon:

; 1643 : 
; 1644 : 
; 1645 : 
; 1646 :        case ARRAY_LVALUE_INDEXED_NODE:
; 1647 :         break;

	jmp	$LN887@eval_secon
$LN41@eval_secon:

; 1648 :        case ARRAY_RVALUE_INDEXED_NODE:
; 1649 :        case ARRAY_RVALUE_NODE:
; 1650 :         break;

	jmp	$LN887@eval_secon
$LN40@eval_secon:

; 1651 :         
; 1652 :        case DOT_NODE:  /* dot product */
; 1653 :         { struct array *a,*b;
; 1654 :           int name1 = node->op2.name_id;

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	mov	DWORD PTR _name1$90763[ebp], edx

; 1655 :           int name2 = node->op3.name_id;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _name2$90764[ebp], ecx

; 1656 :           REAL *datastart1,*datastart2;
; 1657 :           REAL sum;
; 1658 :           int i,count;
; 1659 :           a = get_name_arrayptr(name1,NULL,localbase);

	mov	edx, DWORD PTR _localbase$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _name1$90763[ebp]
	push	eax
	call	_get_name_arrayptr
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _a$90761[ebp], eax

; 1660 :           b = get_name_arrayptr(name2,NULL,localbase);

	mov	ecx, DWORD PTR _localbase$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _name2$90764[ebp]
	push	edx
	call	_get_name_arrayptr
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _b$90762[ebp], eax

; 1661 :           count = (a->datacount < b->datacount) ? a->datacount : b->datacount;

	mov	eax, DWORD PTR _a$90761[ebp]
	mov	ecx, DWORD PTR _b$90762[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+16]
	jge	SHORT $LN1012@eval_secon
	mov	eax, DWORD PTR _a$90761[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv4694[ebp], ecx
	jmp	SHORT $LN1013@eval_secon
$LN1012@eval_secon:
	mov	edx, DWORD PTR _b$90762[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR tv4694[ebp], eax
$LN1013@eval_secon:
	mov	ecx, DWORD PTR tv4694[ebp]
	mov	DWORD PTR _count$90769[ebp], ecx

; 1662 :           datastart1 = *(REAL**)(stacktop--);

	mov	edx, DWORD PTR _stacktop$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _datastart1$90765[ebp], eax
	mov	ecx, DWORD PTR _stacktop$[ebp]
	sub	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx

; 1663 :           datastart2 = *(REAL**)(stacktop--);

	mov	edx, DWORD PTR _stacktop$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _datastart2$90766[ebp], eax
	mov	ecx, DWORD PTR _stacktop$[ebp]
	sub	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx

; 1664 :           for ( sum = 0.0, i = 0 ; i < count ; i++ )

	fldz
	fstp	QWORD PTR _sum$90767[ebp]
	mov	DWORD PTR _i$90768[ebp], 0
	jmp	SHORT $LN39@eval_secon
$LN38@eval_secon:
	mov	edx, DWORD PTR _i$90768[ebp]
	add	edx, 1
	mov	DWORD PTR _i$90768[ebp], edx
$LN39@eval_secon:
	mov	eax, DWORD PTR _i$90768[ebp]
	cmp	eax, DWORD PTR _count$90769[ebp]
	jge	SHORT $LN37@eval_secon

; 1665 :             sum += datastart1[i]*datastart2[i];

	mov	ecx, DWORD PTR _i$90768[ebp]
	mov	edx, DWORD PTR _datastart1$90765[ebp]
	mov	eax, DWORD PTR _i$90768[ebp]
	mov	esi, DWORD PTR _datastart2$90766[ebp]
	fld	QWORD PTR [edx+ecx*8]
	fmul	QWORD PTR [esi+eax*8]
	fadd	QWORD PTR _sum$90767[ebp]
	fstp	QWORD PTR _sum$90767[ebp]
	jmp	SHORT $LN38@eval_secon
$LN37@eval_secon:

; 1666 :           (++stacktop)->value = sum;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _sum$90767[ebp]
	fstp	QWORD PTR [edx]

; 1667 :           zero_seconds(pcount,stacktop);

	mov	eax, DWORD PTR _stacktop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcount$[ebp]
	push	ecx
	call	_zero_seconds
	add	esp, 8

; 1668 :           break;

	jmp	$LN887@eval_secon
$LN36@eval_secon:

; 1669 :         }
; 1670 :  
; 1671 :  
; 1672 :        case ARRAY_EVAL_NODE:  /* rexpr: arraylvalue indexset */
; 1673 :        { /* use info on stack to push value of array element.
; 1674 :              stack: datastart index-values -> rexpr */
; 1675 :         struct array *a;
; 1676 :         REAL value=0.0;

	fldz
	fstp	QWORD PTR _value$90779[ebp]

; 1677 :         int i,offset;
; 1678 :         void *lvalue;
; 1679 :         char *datastart;
; 1680 : 
; 1681 :         a = get_name_arrayptr(node->op2.name_id,NULL,NULL);

	push	0
	push	0
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+136]
	push	eax
	call	_get_name_arrayptr
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _a$90778[ebp], eax

; 1682 : 
; 1683 :         for ( i = 0 ; i < a->dim ; i++ )

	mov	DWORD PTR _i$90780[ebp], 0
	jmp	SHORT $LN35@eval_secon
$LN34@eval_secon:
	mov	ecx, DWORD PTR _i$90780[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$90780[ebp], ecx
$LN35@eval_secon:
	mov	edx, DWORD PTR _a$90778[ebp]
	mov	eax, DWORD PTR _i$90780[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jge	$LN33@eval_secon

; 1684 :         { int k = (int)stacktop[i+1-a->dim].value;

	mov	ecx, DWORD PTR _i$90780[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _a$90778[ebp]
	sub	ecx, DWORD PTR [edx+4]
	imul	ecx, 1256				; 000004e8H
	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax+ecx]
	call	__ftol2_sse
	mov	DWORD PTR _k$90789[ebp], eax

; 1685 :           if ( k < 1 )

	cmp	DWORD PTR _k$90789[ebp], 1
	jge	$LN32@eval_secon

; 1686 :           { sprintf(errmsg,
; 1687 :              "Array index %d of array %s is %d. Indexes start at 1.\n",
; 1688 :                i+1,get_name_name(node->op2.name_id,localbase),k);

	mov	ecx, DWORD PTR _k$90789[ebp]
	push	ecx
	mov	edx, DWORD PTR _localbase$[ebp]
	push	edx
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call	_get_name_name
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _i$90780[ebp]
	add	edx, 1
	push	edx
	push	OFFSET ??_C@_0DH@DOJNKOOH@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 20					; 00000014H

; 1689 :             sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 1690 :                  file_names[node->file_no],node->line_no);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _file_names
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 1691 :             kb_error(3010,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	3010					; 00000bc2H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN32@eval_secon:

; 1692 :           }
; 1693 :           if ( k > a->sizes[i] )

	mov	eax, DWORD PTR _i$90780[ebp]
	mov	ecx, DWORD PTR _a$90778[ebp]
	mov	edx, DWORD PTR _k$90789[ebp]
	cmp	edx, DWORD PTR [ecx+eax*4+24]
	jle	$LN31@eval_secon

; 1694 :           { sprintf(errmsg,"Array index %d of array %s is %d; exceeds bound of %d.\n",
; 1695 :                i+1,get_name_name(node->op2.name_id,localbase),k,a->sizes[i]);

	mov	eax, DWORD PTR _i$90780[ebp]
	mov	ecx, DWORD PTR _a$90778[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+24]
	push	edx
	mov	eax, DWORD PTR _k$90789[ebp]
	push	eax
	mov	ecx, DWORD PTR _localbase$[ebp]
	push	ecx
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+136]
	push	eax
	call	_get_name_name
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _i$90780[ebp]
	add	ecx, 1
	push	ecx
	push	OFFSET ??_C@_0DI@KHNAHFIG@Array?5index?5?$CFd?5of?5array?5?$CFs?5is?5?$CFd@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 24					; 00000018H

; 1696 :             sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 1697 :                  file_names[node->file_no],node->line_no);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _file_names
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 1698 :             kb_error(3009,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	3009					; 00000bc1H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN31@eval_secon:

; 1699 :           }
; 1700 :         }

	jmp	$LN34@eval_secon
$LN33@eval_secon:

; 1701 :         for ( i = 1, offset = (int)stacktop[1-a->dim].value-1 ; i < a->dim ; i++ )

	mov	DWORD PTR _i$90780[ebp], 1
	mov	edx, DWORD PTR _a$90778[ebp]
	mov	eax, 1
	sub	eax, DWORD PTR [edx+4]
	imul	eax, 1256				; 000004e8H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+eax]
	call	__ftol2_sse
	sub	eax, 1
	mov	DWORD PTR _offset$90781[ebp], eax
	jmp	SHORT $LN30@eval_secon
$LN29@eval_secon:
	mov	edx, DWORD PTR _i$90780[ebp]
	add	edx, 1
	mov	DWORD PTR _i$90780[ebp], edx
$LN30@eval_secon:
	mov	eax, DWORD PTR _a$90778[ebp]
	mov	ecx, DWORD PTR _i$90780[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN28@eval_secon

; 1702 :         { offset *= a->sizes[i];

	mov	edx, DWORD PTR _i$90780[ebp]
	mov	eax, DWORD PTR _a$90778[ebp]
	mov	ecx, DWORD PTR _offset$90781[ebp]
	imul	ecx, DWORD PTR [eax+edx*4+24]
	mov	DWORD PTR _offset$90781[ebp], ecx

; 1703 :           offset += (int)stacktop[i+1-a->dim].value-1;  /* 1-based indexing */

	mov	edx, DWORD PTR _i$90780[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _a$90778[ebp]
	sub	edx, DWORD PTR [eax+4]
	imul	edx, 1256				; 000004e8H
	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx+edx]
	call	__ftol2_sse
	mov	edx, DWORD PTR _offset$90781[ebp]
	lea	eax, DWORD PTR [edx+eax-1]
	mov	DWORD PTR _offset$90781[ebp], eax

; 1704 :         }

	jmp	SHORT $LN29@eval_secon
$LN28@eval_secon:

; 1705 :         stacktop -= a->dim;

	mov	ecx, DWORD PTR _a$90778[ebp]
	mov	edx, DWORD PTR [ecx+4]
	imul	edx, 1256				; 000004e8H
	mov	eax, DWORD PTR _stacktop$[ebp]
	sub	eax, edx
	mov	DWORD PTR _stacktop$[ebp], eax

; 1706 :         datastart = *(char**)(stacktop--);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _datastart$90783[ebp], edx
	mov	eax, DWORD PTR _stacktop$[ebp]
	sub	eax, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], eax

; 1707 :         lvalue = datastart + offset*a->itemsize;

	mov	ecx, DWORD PTR _a$90778[ebp]
	mov	edx, DWORD PTR _offset$90781[ebp]
	imul	edx, DWORD PTR [ecx+12]
	add	edx, DWORD PTR _datastart$90783[ebp]
	mov	DWORD PTR _lvalue$90782[ebp], edx

; 1708 :         switch ( a->datatype )

	mov	eax, DWORD PTR _a$90778[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv4808[ebp], ecx
	mov	edx, DWORD PTR tv4808[ebp]
	sub	edx, 1
	mov	DWORD PTR tv4808[ebp], edx
	cmp	DWORD PTR tv4808[ebp], 17		; 00000011H
	ja	$LN14@eval_secon
	mov	eax, DWORD PTR tv4808[ebp]
	jmp	DWORD PTR $LN1109@eval_secon[eax*4]
$LN25@eval_secon:

; 1709 :         { case REAL_TYPE: value = *(REAL*)(lvalue);  break;

	mov	ecx, DWORD PTR _lvalue$90782[ebp]
	fld	QWORD PTR [ecx]
	fstp	QWORD PTR _value$90779[ebp]
	jmp	$LN26@eval_secon
$LN24@eval_secon:

; 1710 :           case INTEGER_TYPE: value = *(int*)(lvalue); break;

	mov	edx, DWORD PTR _lvalue$90782[ebp]
	fild	DWORD PTR [edx]
	fstp	QWORD PTR _value$90779[ebp]
	jmp	$LN26@eval_secon
$LN23@eval_secon:

; 1711 :           case UINT_TYPE: value = *(unsigned int*)(lvalue); break;

	mov	eax, DWORD PTR _lvalue$90782[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv8942[ebp], ecx
	mov	DWORD PTR tv8942[ebp+4], 0
	fild	QWORD PTR tv8942[ebp]
	fstp	QWORD PTR _value$90779[ebp]
	jmp	$LN26@eval_secon
$LN22@eval_secon:

; 1712 :           case SHORT_TYPE: value = *(short int*)(lvalue); break;

	mov	edx, DWORD PTR _lvalue$90782[ebp]
	movsx	eax, WORD PTR [edx]
	mov	DWORD PTR tv8946[ebp], eax
	fild	DWORD PTR tv8946[ebp]
	fstp	QWORD PTR _value$90779[ebp]
	jmp	$LN26@eval_secon
$LN21@eval_secon:

; 1713 :           case USHORT_TYPE: value = *(unsigned short int*)(lvalue); break;

	mov	ecx, DWORD PTR _lvalue$90782[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	DWORD PTR tv8948[ebp], edx
	fild	DWORD PTR tv8948[ebp]
	fstp	QWORD PTR _value$90779[ebp]
	jmp	$LN26@eval_secon
$LN20@eval_secon:

; 1714 :           case LONG_TYPE: value = *(long int*)(lvalue); break;

	mov	eax, DWORD PTR _lvalue$90782[ebp]
	fild	DWORD PTR [eax]
	fstp	QWORD PTR _value$90779[ebp]
	jmp	$LN26@eval_secon
$LN19@eval_secon:

; 1715 :           case ULONG_TYPE: value = *(unsigned long int*)(lvalue); break;

	mov	ecx, DWORD PTR _lvalue$90782[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv8952[ebp], edx
	mov	DWORD PTR tv8952[ebp+4], 0
	fild	QWORD PTR tv8952[ebp]
	fstp	QWORD PTR _value$90779[ebp]
	jmp	SHORT $LN26@eval_secon
$LN18@eval_secon:

; 1716 :           case CHAR_TYPE: value = *(char*)(lvalue); break;

	mov	eax, DWORD PTR _lvalue$90782[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	DWORD PTR tv8956[ebp], ecx
	fild	DWORD PTR tv8956[ebp]
	fstp	QWORD PTR _value$90779[ebp]
	jmp	SHORT $LN26@eval_secon
$LN17@eval_secon:

; 1717 :           case UCHAR_TYPE: value = *(unsigned char*)(lvalue); break;

	mov	edx, DWORD PTR _lvalue$90782[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR tv8958[ebp], eax
	fild	DWORD PTR tv8958[ebp]
	fstp	QWORD PTR _value$90779[ebp]
	jmp	SHORT $LN26@eval_secon
$LN16@eval_secon:

; 1718 :           case PTR_TYPE: value = (unsigned long int)*(char**)(lvalue); break;

	mov	ecx, DWORD PTR _lvalue$90782[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv8961[ebp], edx
	mov	DWORD PTR tv8961[ebp+4], 0
	fild	QWORD PTR tv8961[ebp]
	fstp	QWORD PTR _value$90779[ebp]
	jmp	SHORT $LN26@eval_secon
$LN15@eval_secon:

; 1719 :           case VERTEX_TYPE:
; 1720 :           case EDGE_TYPE:
; 1721 :           case FACET_TYPE:
; 1722 :           case BODY_TYPE:
; 1723 :           case FACETEDGE_TYPE:
; 1724 :           case ELEMENTID_TYPE:  break;

	jmp	SHORT $LN26@eval_secon
$LN14@eval_secon:

; 1725 :           default: value = *(int*)(lvalue); break;

	mov	eax, DWORD PTR _lvalue$90782[ebp]
	fild	DWORD PTR [eax]
	fstp	QWORD PTR _value$90779[ebp]
$LN26@eval_secon:

; 1726 :         
; 1727 :         }
; 1728 :         (++stacktop)->value = value;

	mov	ecx, DWORD PTR _stacktop$[ebp]
	add	ecx, 1256				; 000004e8H
	mov	DWORD PTR _stacktop$[ebp], ecx
	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR _value$90779[ebp]
	fstp	QWORD PTR [edx]

; 1729 :         zero_seconds(pcount,stacktop);

	mov	eax, DWORD PTR _stacktop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcount$[ebp]
	push	ecx
	call	_zero_seconds
	add	esp, 8

; 1730 : 
; 1731 :         break;

	jmp	$LN887@eval_secon
$LN13@eval_secon:

; 1732 :        }
; 1733 : 
; 1734 :        /* end whole-array syntax */
; 1735 : 
; 1736 :        case ELINDEX_NODE: /* id possibly with mpi task number */
; 1737 :          /* creates typeless valid id */
; 1738 :          { 
; 1739 :            if ( stacktop->value == 0 )

	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [edx]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN12@eval_secon

; 1740 :              id = NULLID;

	mov	DWORD PTR _id$[ebp], 0

; 1741 :            else 

	jmp	SHORT $LN11@eval_secon
$LN12@eval_secon:

; 1742 :            { if ( stacktop->value > 0.0 )

	mov	eax, DWORD PTR _stacktop$[ebp]
	fldz
	fcomp	QWORD PTR [eax]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN10@eval_secon

; 1743 :              id = ((int)(stacktop->value)-1);

	mov	ecx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [ecx]
	call	__ftol2_sse
	sub	eax, 1
	mov	DWORD PTR _id$[ebp], eax

; 1744 :              else 

	jmp	SHORT $LN9@eval_secon
$LN10@eval_secon:

; 1745 :              { id = -((int)(stacktop->value)+1);         

	mov	edx, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [edx]
	call	__ftol2_sse
	add	eax, 1
	neg	eax
	mov	DWORD PTR _id$[ebp], eax

; 1746 :                invert(id); 

	mov	eax, DWORD PTR _id$[ebp]
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR _id$[ebp], eax
$LN9@eval_secon:

; 1747 :              }
; 1748 :              id |= VALIDMASK;

	mov	ecx, DWORD PTR _id$[ebp]
	or	ecx, 268435456				; 10000000H
	mov	DWORD PTR _id$[ebp], ecx
$LN11@eval_secon:

; 1749 :            }
; 1750 : #ifdef MPI_EVOLVER
; 1751 :          { int task;
; 1752 :            if ( node->right )
; 1753 :               task = (int)((stacktop--)->value);
; 1754 :            else task = this_task;
; 1755 :            if ( task < 0 || task >= mpi_nprocs )
; 1756 :            { sprintf(errmsg,
; 1757 :                 "Illegal task number %d.  Must be between 1 and %d.\n",task,mpi_nprocs);
; 1758 :              sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 1759 :                  file_names[node->file_no],node->line_no);
; 1760 :              kb_error(1914,errmsg,RECOVERABLE);
; 1761 :            }
; 1762 :            id |= (element_id)task << TASK_ID_SHIFT;
; 1763 :          }
; 1764 : #endif
; 1765 :           
; 1766 :            *(element_id *)&(stacktop->value) = id;

	mov	edx, DWORD PTR _stacktop$[ebp]
	mov	eax, DWORD PTR _id$[ebp]
	mov	DWORD PTR [edx], eax

; 1767 :            break;

	jmp	SHORT $LN887@eval_secon
$LN8@eval_secon:

; 1768 :          }
; 1769 : 
; 1770 :           default:
; 1771 :              sprintf(errmsg,"Bad expression eval_second() node type: %s.",
; 1772 :                    tokname(node->type));

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_tokname
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0CM@LBIGDBGK@Bad?5expression?5eval_second?$CI?$CJ?5nod@
	push	OFFSET _errmsg
	call	_sprintf
	add	esp, 12					; 0000000cH

; 1773 :              sprintf(errmsg+strlen(errmsg),"(source file %s, line %d)\n",
; 1774 :                  file_names[node->file_no],node->line_no);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _file_names
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	OFFSET ??_C@_0BL@LMCMICK@?$CIsource?5file?5?$CFs?0?5line?5?$CFd?$CJ?6?$AA@
	push	OFFSET _errmsg
	call	_strlen
	add	esp, 4
	add	eax, OFFSET _errmsg
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 1775 :              kb_error(1016,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	1016					; 000003f8H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN887@eval_secon:

; 1776 :              break;
; 1777 :       }      
; 1778 :     if ( node == ex->root ) break;

	mov	eax, DWORD PTR _ex$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN7@eval_secon
	jmp	SHORT $LN889@eval_secon
$LN7@eval_secon:

; 1779 :   }      

	jmp	$LN890@eval_secon
$LN889@eval_secon:

; 1780 : 
; 1781 :   *fval = stacktop->value;

	mov	edx, DWORD PTR _fval$[ebp]
	mov	eax, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [eax]
	fstp	QWORD PTR [edx]

; 1782 :   for ( n = 0 ; n < pcount ; n++ )

	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN6@eval_secon
$LN5@eval_secon:
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
$LN6@eval_secon:
	mov	edx, DWORD PTR _n$[ebp]
	cmp	edx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN4@eval_secon

; 1783 :   { partials[n] = stacktop->deriv[n]; 

	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _partials$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	esi, DWORD PTR _stacktop$[ebp]
	fld	QWORD PTR [esi+edx*8+8]
	fstp	QWORD PTR [ecx+eax*8]

; 1784 :     for ( m = 0 ; m < pcount ; m++ )

	mov	DWORD PTR _m$[ebp], 0
	jmp	SHORT $LN3@eval_secon
$LN2@eval_secon:
	mov	eax, DWORD PTR _m$[ebp]
	add	eax, 1
	mov	DWORD PTR _m$[ebp], eax
$LN3@eval_secon:
	mov	ecx, DWORD PTR _m$[ebp]
	cmp	ecx, DWORD PTR _pcount$[ebp]
	jge	SHORT $LN1@eval_secon

; 1785 :       seconds[n][m] = stacktop->second[n][m];

	mov	edx, DWORD PTR _n$[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _stacktop$[ebp]
	lea	ecx, DWORD PTR [eax+edx+104]
	mov	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR _seconds$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR _m$[ebp]
	mov	esi, DWORD PTR _m$[ebp]
	fld	QWORD PTR [ecx+esi*8]
	fstp	QWORD PTR [edx+eax*8]
	jmp	SHORT $LN2@eval_secon
$LN1@eval_secon:

; 1786 :   }

	jmp	SHORT $LN5@eval_secon
$LN4@eval_secon:

; 1787 : 
; 1788 :   return;
; 1789 : } /* end eval_second() */

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN1103@eval_secon:
	DD	$LN886@eval_secon
	DD	$LN13@eval_secon
	DD	$LN884@eval_secon
	DD	$LN871@eval_secon
	DD	$LN836@eval_secon
	DD	$LN835@eval_secon
	DD	$LN834@eval_secon
	DD	$LN870@eval_secon
	DD	$LN820@eval_secon
	DD	$LN818@eval_secon
	DD	$LN821@eval_secon
	DD	$LN810@eval_secon
	DD	$LN808@eval_secon
	DD	$LN8@eval_secon
$LN1099@eval_secon:
	DB	0
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	1
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	2
	DB	3
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	4
	DB	5
	DB	6
	DB	7
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	8
	DB	13					; 0000000dH
	DB	9
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	12					; 0000000cH
	npad	2
$LN1104@eval_secon:
	DD	$LN809@eval_secon
	DD	$LN792@eval_secon
	DD	$LN702@eval_secon
	DD	$LN703@eval_secon
	DD	$LN655@eval_secon
	DD	$LN654@eval_secon
	DD	$LN653@eval_secon
	DD	$LN652@eval_secon
	DD	$LN651@eval_secon
	DD	$LN650@eval_secon
	DD	$LN649@eval_secon
	DD	$LN647@eval_secon
	DD	$LN645@eval_secon
	DD	$LN643@eval_secon
	DD	$LN642@eval_secon
	DD	$LN632@eval_secon
	DD	$LN622@eval_secon
	DD	$LN612@eval_secon
	DD	$LN601@eval_secon
	DD	$LN590@eval_secon
	DD	$LN588@eval_secon
	DD	$LN586@eval_secon
	DD	$LN562@eval_secon
	DD	$LN816@eval_secon
	DD	$LN814@eval_secon
	DD	$LN536@eval_secon
	DD	$LN526@eval_secon
	DD	$LN516@eval_secon
	DD	$LN494@eval_secon
	DD	$LN484@eval_secon
	DD	$LN474@eval_secon
	DD	$LN463@eval_secon
	DD	$LN453@eval_secon
	DD	$LN390@eval_secon
	DD	$LN433@eval_secon
	DD	$LN380@eval_secon
	DD	$LN370@eval_secon
	DD	$LN360@eval_secon
	DD	$LN350@eval_secon
	DD	$LN340@eval_secon
	DD	$LN329@eval_secon
	DD	$LN423@eval_secon
	DD	$LN412@eval_secon
	DD	$LN401@eval_secon
	DD	$LN443@eval_secon
	DD	$LN297@eval_secon
	DD	$LN287@eval_secon
	DD	$LN277@eval_secon
	DD	$LN267@eval_secon
	DD	$LN318@eval_secon
	DD	$LN308@eval_secon
	DD	$LN693@eval_secon
	DD	$LN676@eval_secon
	DD	$LN780@eval_secon
	DD	$LN257@eval_secon
	DD	$LN254@eval_secon
	DD	$LN251@eval_secon
	DD	$LN248@eval_secon
	DD	$LN241@eval_secon
	DD	$LN232@eval_secon
	DD	$LN229@eval_secon
	DD	$LN226@eval_secon
	DD	$LN223@eval_secon
	DD	$LN220@eval_secon
	DD	$LN213@eval_secon
	DD	$LN210@eval_secon
	DD	$LN207@eval_secon
	DD	$LN199@eval_secon
	DD	$LN190@eval_secon
	DD	$LN187@eval_secon
	DD	$LN184@eval_secon
	DD	$LN178@eval_secon
	DD	$LN173@eval_secon
	DD	$LN181@eval_secon
	DD	$LN170@eval_secon
	DD	$LN162@eval_secon
	DD	$LN155@eval_secon
	DD	$LN148@eval_secon
	DD	$LN141@eval_secon
	DD	$LN134@eval_secon
	DD	$LN131@eval_secon
	DD	$LN128@eval_secon
	DD	$LN125@eval_secon
	DD	$LN90@eval_secon
	DD	$LN74@eval_secon
	DD	$LN81@eval_secon
	DD	$LN70@eval_secon
	DD	$LN695@eval_secon
	DD	$LN656@eval_secon
	DD	$LN869@eval_secon
	DD	$LN868@eval_secon
	DD	$LN61@eval_secon
	DD	$LN58@eval_secon
	DD	$LN55@eval_secon
	DD	$LN42@eval_secon
	DD	$LN41@eval_secon
	DD	$LN40@eval_secon
	DD	$LN36@eval_secon
	DD	$LN8@eval_secon
$LN1100@eval_secon:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	15					; 0000000fH
	DB	16					; 00000010H
	DB	17					; 00000011H
	DB	18					; 00000012H
	DB	19					; 00000013H
	DB	20					; 00000014H
	DB	21					; 00000015H
	DB	22					; 00000016H
	DB	23					; 00000017H
	DB	24					; 00000018H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	25					; 00000019H
	DB	26					; 0000001aH
	DB	27					; 0000001bH
	DB	28					; 0000001cH
	DB	29					; 0000001dH
	DB	30					; 0000001eH
	DB	31					; 0000001fH
	DB	32					; 00000020H
	DB	33					; 00000021H
	DB	34					; 00000022H
	DB	35					; 00000023H
	DB	36					; 00000024H
	DB	37					; 00000025H
	DB	38					; 00000026H
	DB	39					; 00000027H
	DB	40					; 00000028H
	DB	41					; 00000029H
	DB	42					; 0000002aH
	DB	43					; 0000002bH
	DB	44					; 0000002cH
	DB	45					; 0000002dH
	DB	46					; 0000002eH
	DB	47					; 0000002fH
	DB	48					; 00000030H
	DB	49					; 00000031H
	DB	50					; 00000032H
	DB	51					; 00000033H
	DB	52					; 00000034H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	53					; 00000035H
	DB	54					; 00000036H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	55					; 00000037H
	DB	56					; 00000038H
	DB	57					; 00000039H
	DB	98					; 00000062H
	DB	58					; 0000003aH
	DB	58					; 0000003aH
	DB	59					; 0000003bH
	DB	60					; 0000003cH
	DB	61					; 0000003dH
	DB	61					; 0000003dH
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	62					; 0000003eH
	DB	63					; 0000003fH
	DB	64					; 00000040H
	DB	65					; 00000041H
	DB	66					; 00000042H
	DB	67					; 00000043H
	DB	67					; 00000043H
	DB	68					; 00000044H
	DB	68					; 00000044H
	DB	69					; 00000045H
	DB	70					; 00000046H
	DB	71					; 00000047H
	DB	71					; 00000047H
	DB	71					; 00000047H
	DB	72					; 00000048H
	DB	72					; 00000048H
	DB	73					; 00000049H
	DB	74					; 0000004aH
	DB	75					; 0000004bH
	DB	76					; 0000004cH
	DB	77					; 0000004dH
	DB	78					; 0000004eH
	DB	79					; 0000004fH
	DB	80					; 00000050H
	DB	81					; 00000051H
	DB	81					; 00000051H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	82					; 00000052H
	DB	83					; 00000053H
	DB	83					; 00000053H
	DB	84					; 00000054H
	DB	84					; 00000054H
	DB	85					; 00000055H
	DB	85					; 00000055H
	DB	86					; 00000056H
	DB	86					; 00000056H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	87					; 00000057H
	DB	88					; 00000058H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	89					; 00000059H
	DB	98					; 00000062H
	DB	90					; 0000005aH
	DB	91					; 0000005bH
	DB	98					; 00000062H
	DB	92					; 0000005cH
	DB	93					; 0000005dH
	DB	93					; 0000005dH
	DB	93					; 0000005dH
	DB	98					; 00000062H
	DB	94					; 0000005eH
	DB	95					; 0000005fH
	DB	95					; 0000005fH
	DB	96					; 00000060H
	DB	97					; 00000061H
	npad	1
$LN1105@eval_secon:
	DD	$LN704@eval_secon
	DD	$LN811@eval_secon
	DD	$LN766@eval_secon
	DD	$LN765@eval_secon
	DD	$LN764@eval_secon
	DD	$LN763@eval_secon
	DD	$LN762@eval_secon
	DD	$LN761@eval_secon
	DD	$LN758@eval_secon
	DD	$LN706@eval_secon
	DD	$LN705@eval_secon
	DD	$LN812@eval_secon
	DD	$LN885@eval_secon
	DD	$LN8@eval_secon
$LN1101@eval_secon:
	DB	0
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	1
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	11					; 0000000bH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	12					; 0000000cH
	npad	1
$LN1106@eval_secon:
	DD	$LN857@eval_secon
	DD	$LN856@eval_secon
	DD	$LN849@eval_secon
	DD	$LN853@eval_secon
	DD	$LN851@eval_secon
	DD	$LN855@eval_secon
	DD	$LN850@eval_secon
	DD	$LN854@eval_secon
	DD	$LN852@eval_secon
	DD	$LN846@eval_secon
	DD	$LN846@eval_secon
	DD	$LN848@eval_secon
	DD	$LN847@eval_secon
	DD	$LN847@eval_secon
	DD	$LN847@eval_secon
	DD	$LN847@eval_secon
	DD	$LN847@eval_secon
	DD	$LN847@eval_secon
$LN1107@eval_secon:
	DD	$LN236@eval_secon
	DD	$LN235@eval_secon
	DD	$LN234@eval_secon
	DD	$LN233@eval_secon
$LN1108@eval_secon:
	DD	$LN103@eval_secon
	DD	$LN102@eval_secon
	DD	$LN98@eval_secon
	DD	$LN96@eval_secon
	DD	$LN100@eval_secon
	DD	$LN101@eval_secon
	DD	$LN97@eval_secon
	DD	$LN95@eval_secon
	DD	$LN99@eval_secon
	DD	$LN94@eval_secon
	DD	$LN104@eval_secon
$LN1102@eval_secon:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	npad	1
$LN1109@eval_secon:
	DD	$LN25@eval_secon
	DD	$LN24@eval_secon
	DD	$LN19@eval_secon
	DD	$LN17@eval_secon
	DD	$LN21@eval_secon
	DD	$LN23@eval_secon
	DD	$LN20@eval_secon
	DD	$LN18@eval_secon
	DD	$LN22@eval_secon
	DD	$LN14@eval_secon
	DD	$LN14@eval_secon
	DD	$LN16@eval_secon
	DD	$LN15@eval_secon
	DD	$LN15@eval_secon
	DD	$LN15@eval_secon
	DD	$LN15@eval_secon
	DD	$LN15@eval_secon
	DD	$LN15@eval_secon
_eval_second ENDP
_TEXT	ENDS
EXTRN	_NULLFACET:DWORD
; Function compile flags: /Odtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
;	COMDAT _get_fe_facet
_TEXT	SEGMENT
_f_id$ = -4						; size = 4
_fe_id$ = 8						; size = 4
_get_fe_facet PROC					; COMDAT

; 58   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 59   :   facet_id f_id;
; 60   :   
; 61   :   if ( !valid_id(fe_id) ) return NULLFACET;

	mov	eax, DWORD PTR _fe_id$[ebp]
	and	eax, 268435456				; 10000000H
	shr	eax, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN2@get_fe_fac
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN3@get_fe_fac
$LN2@get_fe_fac:

; 62   :   f_id = feptr(fe_id)->fe_facet_id;

	mov	ecx, DWORD PTR _fe_id$[ebp]
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR _web+460
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _f_id$[ebp], ecx

; 63   :   if ( inverted(fe_id) ) invert(f_id);

	mov	edx, DWORD PTR _fe_id$[ebp]
	and	edx, 134217728				; 08000000H
	shr	edx, 27					; 0000001bH
	test	edx, edx
	je	SHORT $LN1@get_fe_fac
	mov	eax, DWORD PTR _f_id$[ebp]
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR _f_id$[ebp], eax
$LN1@get_fe_fac:

; 64   :   return f_id;

	mov	eax, DWORD PTR _f_id$[ebp]
$LN3@get_fe_fac:

; 65   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_get_fe_facet ENDP
_TEXT	ENDS
EXTRN	_sym_inverse:DWORD
; Function compile flags: /Odtp
;	COMDAT _get_edge_wrap
_TEXT	SEGMENT
tv80 = -8						; size = 4
_wrap$ = -4						; size = 4
_e_id$ = 8						; size = 4
_get_edge_wrap PROC					; COMDAT

; 163  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 164  :   WRAPTYPE wrap = *EINT(e_id,E_WRAP_ATTR) ;

	mov	eax, DWORD PTR _e_id$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR _web+124
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	add	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR [eax+784]
	mov	edx, DWORD PTR [edx+ecx]
	mov	DWORD PTR _wrap$[ebp], edx

; 165  :   return    ( inverted(e_id) ? (*sym_inverse)(wrap) : wrap );

	mov	eax, DWORD PTR _e_id$[ebp]
	and	eax, 134217728				; 08000000H
	shr	eax, 27					; 0000001bH
	test	eax, eax
	je	SHORT $LN3@get_edge_w
	mov	ecx, DWORD PTR _wrap$[ebp]
	push	ecx
	call	DWORD PTR _sym_inverse
	add	esp, 4
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN4@get_edge_w
$LN3@get_edge_w:
	mov	edx, DWORD PTR _wrap$[ebp]
	mov	DWORD PTR tv80[ebp], edx
$LN4@get_edge_w:
	mov	eax, DWORD PTR tv80[ebp]

; 166  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_get_edge_wrap ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _get_facet_body
_TEXT	SEGMENT
_f_id$ = 8						; size = 4
_get_facet_body PROC					; COMDAT

; 250  : {

	push	ebp
	mov	ebp, esp

; 251  :   if ( web.skel[BODY].count == 0 ) return NULLID;

	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN4@get_facet_
	xor	eax, eax
	jmp	SHORT $LN5@get_facet_
$LN4@get_facet_:

; 252  :   if ( !valid_id(f_id) ) return NULLID;

	mov	eax, DWORD PTR _f_id$[ebp]
	and	eax, 268435456				; 10000000H
	shr	eax, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN3@get_facet_
	xor	eax, eax
	jmp	SHORT $LN5@get_facet_
$LN3@get_facet_:

; 253  :   if ( inverted(f_id) ) return F_ELID(f_id,F_BODY_LIST_ATTR)[1];

	mov	ecx, DWORD PTR _f_id$[ebp]
	and	ecx, 134217728				; 08000000H
	shr	ecx, 27					; 0000001bH
	test	ecx, ecx
	je	SHORT $LN2@get_facet_
	mov	edx, DWORD PTR _f_id$[ebp]
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR _web+236
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _dymem
	add	edx, DWORD PTR _web+328
	mov	eax, DWORD PTR [edx+784]
	mov	eax, DWORD PTR [ecx+eax+4]
	jmp	SHORT $LN5@get_facet_
	jmp	SHORT $LN5@get_facet_
$LN2@get_facet_:

; 254  :   else  return F_ELID(f_id,F_BODY_LIST_ATTR)[0];

	mov	ecx, DWORD PTR _f_id$[ebp]
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR _web+236
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _dymem
	add	ecx, DWORD PTR _web+328
	mov	edx, DWORD PTR [ecx+784]
	mov	eax, DWORD PTR [eax+edx]
$LN5@get_facet_:

; 255  : }

	pop	ebp
	ret	0
_get_facet_body ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _get_extra
_TEXT	SEGMENT
_type$ = -4						; size = 4
_id$ = 8						; size = 4
_n$ = 12						; size = 4
_get_extra PROC						; COMDAT

; 348  : { int type = id_type(id);

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	eax, DWORD PTR _id$[ebp]
	and	eax, -536870912				; e0000000H
	shr	eax, 29					; 0000001dH
	mov	DWORD PTR _type$[ebp], eax

; 349  : 
; 350  :   return ( (char*)elptr(id) + EXTRAS(type)[n].offset);

	mov	ecx, DWORD PTR _id$[ebp]
	and	ecx, -536870912				; e0000000H
	shr	ecx, 29					; 0000001dH
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _id$[ebp]
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR _web[ecx+12]
	mov	ecx, DWORD PTR _type$[ebp]
	imul	ecx, 112				; 00000070H
	mov	esi, DWORD PTR _dymem
	add	esi, DWORD PTR _web[ecx+104]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, 240				; 000000f0H
	mov	eax, DWORD PTR [eax+edx*4]
	add	eax, DWORD PTR [esi+ecx+64]

; 351  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_get_extra ENDP
_TEXT	ENDS
END
