; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\KNOT1.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BA@BGMCBBBD@bi_surface_attr?$AA@		; `string'
PUBLIC	_charge_attr
PUBLIC	_bi_surface_attr_name
_DATA	SEGMENT
COMM	_bi_sums:DWORD
COMM	_exponent_param:DWORD
COMM	_bi_surface_attr:DWORD
_DATA	ENDS
_BSS	SEGMENT
_charge_grads DD 01H DUP (?)
_cg_nverts DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BA@BGMCBBBD@bi_surface_attr?$AA@
CONST	SEGMENT
??_C@_0BA@BGMCBBBD@bi_surface_attr?$AA@ DB 'bi_surface_attr', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
_charge_attr DD	0ffffffffH
_bi_surface_attr_name DD FLAT:??_C@_0BA@BGMCBBBD@bi_surface_attr?$AA@
_DATA	ENDS
PUBLIC	_get_fe_edge
EXTRN	_web:BYTE
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
;	COMDAT _get_fe_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_edge PROC					; COMDAT

; 43   : {

	push	ebp
	mov	ebp, esp

; 44   :   edge_id e_id;
; 45   :     
; 46   :   e_id = feptr(fe_id)->fe_edge_id;

	mov	eax, DWORD PTR _fe_id$[ebp]

; 47   : 
; 48   :   /*
; 49   :   if ( inverted(fe_id) ) invert(e_id);
; 50   :   return e_id;
; 51   :   */
; 52   :   
; 53   :   return same_sign(e_id,fe_id);

	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]

; 54   : }

	pop	ebp
	ret	0
_get_fe_edge ENDP
_TEXT	ENDS
PUBLIC	_get_prev_edge
; Function compile flags: /Ogtp
;	COMDAT _get_prev_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_prev_edge PROC					; COMDAT

; 69   : {

	push	ebp
	mov	ebp, esp

; 70   :   if ( inverted(fe_id) ) return inverse_id(feptr(fe_id)->nextedge[1]);

	mov	eax, DWORD PTR _fe_id$[ebp]
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_prev_e
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H

; 72   : }

	pop	ebp
	ret	0
$LN2@get_prev_e:

; 71   :   else return feptr(fe_id)->nextedge[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]

; 72   : }

	pop	ebp
	ret	0
_get_prev_edge ENDP
_TEXT	ENDS
PUBLIC	_get_next_edge
; Function compile flags: /Ogtp
;	COMDAT _get_next_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_next_edge PROC					; COMDAT

; 76   : {

	push	ebp
	mov	ebp, esp

; 77   :   if ( inverted(fe_id) ) return inverse_id(feptr(fe_id)->nextedge[0]);

	mov	eax, DWORD PTR _fe_id$[ebp]
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_next_e
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H

; 79   : }

	pop	ebp
	ret	0
$LN2@get_next_e:

; 78   :   else return feptr(fe_id)->nextedge[1];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]

; 79   : }

	pop	ebp
	ret	0
_get_next_edge ENDP
_TEXT	ENDS
PUBLIC	_get_next_facet
; Function compile flags: /Ogtp
;	COMDAT _get_next_facet
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_next_facet PROC					; COMDAT

; 92   : {

	push	ebp
	mov	ebp, esp

; 93   :   if ( inverted(fe_id) ) 

	mov	eax, DWORD PTR _fe_id$[ebp]

; 94   :     return inverse_id(feptr(fe_id)->nextfacet[0]);

	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_next_f
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H

; 97   : }

	pop	ebp
	ret	0
$LN2@get_next_f:

; 95   :   else 
; 96   :     return feptr(fe_id)->nextfacet[1];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+40]

; 97   : }

	pop	ebp
	ret	0
_get_next_facet ENDP
_TEXT	ENDS
PUBLIC	_get_edge_tailv
EXTRN	_dymem:DWORD
; Function compile flags: /Ogtp
;	COMDAT _get_edge_tailv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_tailv PROC					; COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp

; 192  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 193  :      return get_edge_vertices(e_id)[web.headvnum];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_t
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 196  : }

	pop	ebp
	ret	0
$LN2@get_edge_t:

; 194  :   else
; 195  :      return get_edge_vertices(e_id)[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 196  : }

	pop	ebp
	ret	0
_get_edge_tailv ENDP
_TEXT	ENDS
PUBLIC	_get_edge_headv
; Function compile flags: /Ogtp
;	COMDAT _get_edge_headv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_headv PROC					; COMDAT

; 200  : {

	push	ebp
	mov	ebp, esp

; 201  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 202  :      return get_edge_vertices(e_id)[0];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_h
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 205  : }

	pop	ebp
	ret	0
$LN2@get_edge_h:

; 203  :   else
; 204  :      return get_edge_vertices(e_id)[web.headvnum];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 205  : }

	pop	ebp
	ret	0
_get_edge_headv ENDP
_TEXT	ENDS
PUBLIC	_get_next_tail_edge
; Function compile flags: /Ogtp
;	COMDAT _get_next_tail_edge
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_next_tail_edge PROC				; COMDAT

; 270  : { return eptr(e_id)->next_vedge[inverted(e_id) ?1: 0] ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _e_id$[ebp]
	mov	edx, DWORD PTR _web+124
	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ecx*4+32]
	pop	ebp
	ret	0
_get_next_tail_edge ENDP
_TEXT	ENDS
PUBLIC	_get_next_head_edge
; Function compile flags: /Ogtp
;	COMDAT _get_next_head_edge
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_next_head_edge PROC				; COMDAT

; 273  : { return inverse_id(eptr(e_id)->next_vedge[inverted(e_id) ?0: 1]); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _e_id$[ebp]
	mov	edx, DWORD PTR _web+124
	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	not	ecx
	and	ecx, 1
	mov	eax, DWORD PTR [eax+ecx*4+32]
	xor	eax, 134217728				; 08000000H
	pop	ebp
	ret	0
_get_next_head_edge ENDP
_TEXT	ENDS
PUBLIC	_get_vertex_fe
; Function compile flags: /Ogtp
;	COMDAT _get_vertex_fe
_TEXT	SEGMENT
_v_id$ = 8						; size = 4
_get_vertex_fe PROC					; COMDAT

; 287  : { facet_id fe;

	push	ebp
	mov	ebp, esp

; 288  :   edge_id start_e, xx_id=vptr(v_id)->e_id;

	mov	eax, DWORD PTR _v_id$[ebp]
	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]

; 289  :   // might be bare edge, so seek along edge loop
; 290  :   if ( !valid_id(xx_id) ) return NULLID;

	test	eax, 268435456				; 10000000H
	jne	SHORT $LN4@get_vertex
	xor	eax, eax

; 299  : }

	pop	ebp
	ret	0
$LN4@get_vertex:
	push	esi

; 291  :   fe = eptr(xx_id)->fe_id;

	mov	esi, DWORD PTR _web+124
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	edx, DWORD PTR [ecx+28]
	push	edi

; 292  :   start_e = xx_id;
; 293  :   while ( !valid_id(fe) )

	test	edx, 268435456				; 10000000H
	jne	SHORT $LN2@get_vertex
	mov	edi, eax
	or	edi, 134217728				; 08000000H
	npad	8
$LL3@get_vertex:

; 294  :   { xx_id = get_next_tail_edge(xx_id);

	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	eax, DWORD PTR [ecx+eax*4+32]

; 295  :     if ( equal_element(xx_id,start_e) ) return NULLID;

	mov	edx, eax
	or	edx, 134217728				; 08000000H
	cmp	edx, edi
	je	SHORT $LN10@get_vertex

; 296  :     fe = eptr(xx_id)->fe_id;

	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	edx, DWORD PTR [ecx+28]
	test	edx, 268435456				; 10000000H
	je	SHORT $LL3@get_vertex
$LN2@get_vertex:

; 297  :   }
; 298  :   return  same_sign(fe,xx_id);

	and	eax, 134217728				; 08000000H
	pop	edi
	xor	eax, edx
	pop	esi

; 299  : }

	pop	ebp
	ret	0
$LN10@get_vertex:
	pop	edi

; 295  :     if ( equal_element(xx_id,start_e) ) return NULLID;

	xor	eax, eax
	pop	esi

; 299  : }

	pop	ebp
	ret	0
_get_vertex_fe ENDP
_TEXT	ENDS
PUBLIC	_get_extra
; Function compile flags: /Ogtp
;	COMDAT _get_extra
_TEXT	SEGMENT
_id$ = 8						; size = 4
_n$ = 12						; size = 4
_get_extra PROC						; COMDAT

; 348  : { int type = id_type(id);

	push	ebp
	mov	ebp, esp

; 349  : 
; 350  :   return ( (char*)elptr(id) + EXTRAS(type)[n].offset);

	mov	ecx, DWORD PTR _id$[ebp]
	mov	eax, ecx
	push	esi
	mov	esi, DWORD PTR _n$[ebp]
	shr	eax, 29					; 0000001dH
	imul	esi, 240				; 000000f0H
	imul	eax, 112				; 00000070H
	mov	edx, DWORD PTR _web[eax+12]
	push	edi
	mov	edi, DWORD PTR _web[eax+104]
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _dymem
	add	edi, esi
	add	eax, DWORD PTR [edi+ecx+64]
	pop	edi
	pop	esi

; 351  : }

	pop	ebp
	ret	0
_get_extra ENDP
_TEXT	ENDS
PUBLIC	__real@4062c00000000000
PUBLIC	__real@3d719799812dea11
PUBLIC	__real@3e45798ee2308c3a
PUBLIC	__real@0000000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	??_C@_0L@ODEDEECK@knot_power?$AA@		; `string'
PUBLIC	??_C@_0M@KKBEMKBB@node_charge?$AA@		; `string'
PUBLIC	_knot_power_init
EXTRN	_localbase:DWORD
EXTRN	_add_global:PROC
EXTRN	_lookup_global:PROC
EXTRN	_find_attribute:PROC
EXTRN	__fltused:DWORD
EXTRN	__CIlog:PROC
EXTRN	__ftol2_sse:PROC
_BSS	SEGMENT
_ke_power_l DD	01H DUP (?)
_ke_power_flag DD 01H DUP (?)
_ke_power_i DD	01H DUP (?)
	ALIGN	8

_ke_power DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT __real@4062c00000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\knot1.c
CONST	SEGMENT
__real@4062c00000000000 DQ 04062c00000000000r	; 150
CONST	ENDS
;	COMDAT __real@3d719799812dea11
CONST	SEGMENT
__real@3d719799812dea11 DQ 03d719799812dea11r	; 1e-012
CONST	ENDS
;	COMDAT __real@3e45798ee2308c3a
CONST	SEGMENT
__real@3e45798ee2308c3a DQ 03e45798ee2308c3ar	; 1e-008
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT ??_C@_0L@ODEDEECK@knot_power?$AA@
CONST	SEGMENT
??_C@_0L@ODEDEECK@knot_power?$AA@ DB 'knot_power', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KKBEMKBB@node_charge?$AA@
CONST	SEGMENT
??_C@_0M@KKBEMKBB@node_charge?$AA@ DB 'node_charge', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _knot_power_init
_TEXT	SEGMENT
tv219 = -8						; size = 8
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_knot_power_init PROC					; COMDAT

; 52   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 53   :   charge_attr = find_attribute(VERTEX,CHARGE_ATTR_NAME);

	push	OFFSET ??_C@_0M@KKBEMKBB@node_charge?$AA@
	push	0
	call	_find_attribute

; 54   :           /* see if charge attribute */
; 55   : 
; 56   :   exponent_param = lookup_global(KNOTPOWER_NAME);

	push	OFFSET ??_C@_0L@ODEDEECK@knot_power?$AA@
	mov	DWORD PTR _charge_attr, eax
	call	_lookup_global
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _exponent_param, eax

; 57   :   if ( exponent_param < 0 ) /* missing, so add */

	test	eax, eax
	jns	$LN5@knot_power

; 58   :     { exponent_param = add_global(KNOTPOWER_NAME);

	push	OFFSET ??_C@_0L@ODEDEECK@knot_power?$AA@
	call	_add_global

; 59   :       globals(exponent_param)->value.real = 2.0;  /* default */

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	add	esp, 4
	mov	DWORD PTR _exponent_param, eax
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN8@knot_power
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN10@knot_power
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN9@knot_power
$LN10@knot_power:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN8@knot_power
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN9@knot_power
$LN8@knot_power:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN9@knot_power:
	fld	QWORD PTR __real@4000000000000000
	fstp	QWORD PTR [eax+64]

; 60   :       globals(exponent_param)->flags |=  ORDINARY_PARAM | RECALC_PARAMETER | ALWAYS_RECALC;

	mov	eax, DWORD PTR _exponent_param
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN14@knot_power
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN16@knot_power
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN15@knot_power
$LN16@knot_power:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN14@knot_power
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN15@knot_power
$LN14@knot_power:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN15@knot_power:
	or	DWORD PTR [eax+192], 134217737		; 08000009H
	mov	eax, DWORD PTR _exponent_param
$LN5@knot_power:

; 61   :     }
; 62   :   ke_power = globals(exponent_param)->value.real/2; /* since rr is squared */

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN20@knot_power
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN22@knot_power
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN21@knot_power
$LN22@knot_power:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN20@knot_power
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN21@knot_power
$LN20@knot_power:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN21@knot_power:
	fld	QWORD PTR [eax+64]
	fmul	QWORD PTR __real@3fe0000000000000
	fst	QWORD PTR _ke_power

; 63   :   ke_power_i = (int) ke_power;

	fld	ST(0)
	call	__ftol2_sse

; 64   :   ke_power_flag = 0; /* use REAL by default */
; 65   :   if (ke_power<0.) return; /* don't do anything special for negative powers */

	fldz
	fcomp	ST(1)
	mov	DWORD PTR _ke_power_i, eax
	mov	DWORD PTR _ke_power_flag, 0
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	$LN30@knot_power

; 66   :   ke_power_l = (int) (log(ke_power)/log(2.)); /* see if power of 2 */

	call	__CIlog
	fstp	QWORD PTR tv219[ebp]
	fld	QWORD PTR __real@4000000000000000
	call	__CIlog
	fdivr	QWORD PTR tv219[ebp]
	fld	ST(0)
	call	__ftol2_sse
	mov	ecx, eax
	mov	DWORD PTR _ke_power_l, ecx

; 67   :   if ( fabs(ke_power_l - log(ke_power)/log(2.)) < 1e-8  && ke_power_l <= 20)

	fisubr	DWORD PTR _ke_power_l
	fabs
	fcomp	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@knot_power
	cmp	ecx, 20					; 00000014H
	jg	SHORT $LN3@knot_power

; 68   :     ke_power_flag = -1;

	mov	DWORD PTR _ke_power_flag, -1

; 71   : } // end knot_power_init()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@knot_power:

; 69   :   else if ( fabs(ke_power_i - ke_power) < 1e-12 && ke_power <= 150)

	fild	DWORD PTR _ke_power_i
	fld	QWORD PTR _ke_power
	fsub	ST(1), ST(0)
	fxch	ST(1)
	fabs
	fcomp	QWORD PTR __real@3d719799812dea11
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN30@knot_power
	fcomp	QWORD PTR __real@4062c00000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN1@knot_power

; 70   :     ke_power_flag = 1;

	mov	DWORD PTR _ke_power_flag, 1

; 71   : } // end knot_power_init()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN30@knot_power:

; 69   :   else if ( fabs(ke_power_i - ke_power) < 1e-12 && ke_power <= 150)

	fstp	ST(0)
$LN1@knot_power:

; 71   : } // end knot_power_init()

	mov	esp, ebp
	pop	ebp
	ret	0
_knot_power_init ENDP
_TEXT	ENDS
PUBLIC	__real@4010000000000000
PUBLIC	__$ArrayPad$
PUBLIC	_radp
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CIpow:PROC
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _radp
_TEXT	SEGMENT
_Area$ = -84						; size = 8
_lca$ = -76						; size = 8
_lbc$ = -68						; size = 8
_lab$ = -60						; size = 8
_vab$ = -52						; size = 24
_vbc$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_radp	PROC						; COMDAT

; 92   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 93   :   REAL vab[3], vbc[3], vca[3];
; 94   :   REAL lab=0, lbc=0, lca=0, Area=0, rr, temp;
; 95   :   int i;
; 96   :   for ( i = 0 ; i < 3 ; i++ ) {
; 97   :     vab[i] = b[i] - a[i]; lab += vab[i]*vab[i];

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	fld	QWORD PTR [eax]
	fsub	QWORD PTR [ecx]

; 98   :     vbc[i] = c[i] - b[i]; lbc += vbc[i]*vbc[i];

	mov	edx, DWORD PTR _c$[ebp]
	fld	QWORD PTR [edx]
	fsub	QWORD PTR [eax]
	fstp	QWORD PTR _vbc$[ebp]

; 99   :     vca[i] = a[i] - c[i]; lca += vca[i]*vca[i];

	fld	QWORD PTR [ecx]
	fsub	QWORD PTR [edx]
	fld	QWORD PTR [eax+8]
	fsub	QWORD PTR [ecx+8]
	fld	QWORD PTR [edx+8]
	fsub	QWORD PTR [eax+8]
	fstp	QWORD PTR _vbc$[ebp+8]
	fld	QWORD PTR [ecx+8]
	fsub	QWORD PTR [edx+8]
	fld	QWORD PTR [eax+16]
	fsub	QWORD PTR [ecx+16]
	fst	QWORD PTR _vab$[ebp+16]
	fld	ST(4)
	fmul	ST(0), ST(5)
	fldz
	fadd	ST(1), ST(0)
	fld	ST(4)
	fmul	ST(0), ST(5)
	faddp	ST(2), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _lab$[ebp]
	fld	QWORD PTR [edx+16]
	fsub	QWORD PTR [eax+16]
	fstp	QWORD PTR _vbc$[ebp+16]
	fld	QWORD PTR _vbc$[ebp]
	fmul	ST(0), ST(0)
	fadd	ST(0), ST(1)
	fld	QWORD PTR _vbc$[ebp+8]
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _vbc$[ebp+16]
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _lbc$[ebp]
	fld	QWORD PTR [ecx+16]
	fsub	QWORD PTR [edx+16]
	fld	ST(4)
	fmul	ST(0), ST(5)
	fadd	ST(0), ST(2)
	fld	ST(3)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	ST(1)
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _lca$[ebp]

; 100  :   }
; 101  :   /*lab=SDIM_dot(vab,vab); lbc=SDIM_dot(vbc,vbc); lca=SDIM_dot(vca,vca);*/
; 102  :   /*cross_prod(vca,vab,Ar); Area = SDIM_dot(Ar,Ar);*/
; 103  :   temp = vca[0]*vab[1]-vca[1]*vab[0]; Area += temp*temp;

	fld	ST(3)
	fmul	ST(0), ST(5)
	fld	ST(6)
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(0)
	fadd	ST(0), ST(2)
	fstp	QWORD PTR _Area$[ebp]

; 104  :   temp = vca[1]*vab[2]-vca[2]*vab[1]; Area += temp*temp;

	fld	QWORD PTR _vab$[ebp+16]
	fld	ST(0)
	fmulp	ST(4), ST(0)
	fld	ST(1)
	fmulp	ST(5), ST(0)
	fxch	ST(3)
	fsubrp	ST(4), ST(0)
	fld	ST(3)
	fmulp	ST(4), ST(0)
	fxch	ST(3)
	fadd	QWORD PTR _Area$[ebp]

; 105  :   temp = vca[2]*vab[0]-vca[0]*vab[2]; Area += temp*temp;

	fxch	ST(3)
	fmulp	ST(5), ST(0)
	fxch	ST(1)
	fmulp	ST(3), ST(0)
	fxch	ST(3)
	fsubrp	ST(2), ST(0)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)

; 106  :   rr = 4*Area/(lab*lbc*lca); if (rr==0.) return 0;

	fmul	QWORD PTR __real@4010000000000000
	fld	QWORD PTR _lbc$[ebp]
	fmul	QWORD PTR _lab$[ebp]
	fmul	QWORD PTR _lca$[ebp]
	fdivp	ST(1), ST(0)
	fld	ST(0)
	fld	ST(2)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN34@radp
	fstp	ST(0)

; 108  :   return temp;
; 109  : } // end radp()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN34@radp:

; 107  :   ke_pow(rr,temp);

	mov	eax, DWORD PTR _ke_power_flag
	fstp	ST(1)
	test	eax, eax
	jle	SHORT $LN64@radp
	mov	ecx, DWORD PTR _ke_power_i
	fld	ST(0)
	mov	edx, 1
	cmp	ecx, edx
	jle	SHORT $LN47@radp
	lea	eax, DWORD PTR [ecx-1]
	cmp	eax, 8
	jl	SHORT $LC28@radp
	lea	eax, DWORD PTR [ecx-9]
	shr	eax, 3
	inc	eax
	lea	edx, DWORD PTR [eax*8+1]
$LN29@radp:
	dec	eax
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	jne	SHORT $LN29@radp
$LC28@radp:
	cmp	edx, ecx
	jge	SHORT $LN47@radp
	sub	ecx, edx
$LC9@radp:
	dec	ecx
	fmul	ST(0), ST(1)
	jne	SHORT $LC9@radp
$LN47@radp:
	fstp	ST(1)
$LN15@radp:

; 108  :   return temp;
; 109  : } // end radp()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN64@radp:

; 107  :   ke_pow(rr,temp);

	jns	SHORT $LN5@radp
	mov	ecx, DWORD PTR _ke_power_l
	xor	edx, edx
	cmp	ecx, 8
	jl	SHORT $LC31@radp
	lea	eax, DWORD PTR [ecx-8]
	shr	eax, 3
	inc	eax
	lea	edx, DWORD PTR [eax*8]
$LN32@radp:
	dec	eax
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	jne	SHORT $LN32@radp
$LC31@radp:
	cmp	edx, ecx
	jge	SHORT $LN15@radp
	sub	ecx, edx
$LC4@radp:
	dec	ecx
	fmul	ST(0), ST(0)
	jne	SHORT $LC4@radp

; 108  :   return temp;
; 109  : } // end radp()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@radp:

; 107  :   ke_pow(rr,temp);

	fld	QWORD PTR _ke_power
	call	__CIpow

; 108  :   return temp;
; 109  : } // end radp()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_radp	ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_rad
EXTRN	__CIsqrt:PROC
; Function compile flags: /Ogtp
;	COMDAT _rad
_TEXT	SEGMENT
_lbc$ = -52						; size = 8
_lca$ = -44						; size = 8
_lab$ = -36						; size = 8
_vbc$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_rad	PROC						; COMDAT

; 126  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 127  : /******
; 128  :   REAL vab[MAXCOORD], vbc[MAXCOORD], vca[MAXCOORD], Ar[MAXCOORD];
; 129  :   REAL lab, lbc, lca, Area, rr; int i;
; 130  :   for ( i = 0 ; i < SDIM ; i++ )
; 131  :     {vab[i] = b[i] - a[i]; vbc[i] = c[i] - b[i]; vca[i] = a[i] - c[i];}
; 132  :   lab = SDIM_dot(vab,vab); lbc = SDIM_dot(vbc,vbc); lca = SDIM_dot(vca,vca);
; 133  :   cross_prod(vca,vab,Ar); Area = SDIM_dot(Ar,Ar);
; 134  : ******/
; 135  :   REAL vab[3], vbc[3], vca[3];
; 136  :   REAL lab=0, lbc=0, lca=0, Area=0, temp;
; 137  :   int i;
; 138  :   for ( i = 0 ; i < 3 ; i++ ) {
; 139  :     vab[i] = b[i] - a[i]; lab += vab[i]*vab[i];

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	fld	QWORD PTR [eax]
	fsub	QWORD PTR [ecx]

; 140  :     vbc[i] = c[i] - b[i]; lbc += vbc[i]*vbc[i];

	mov	edx, DWORD PTR _c$[ebp]
	fld	QWORD PTR [edx]
	fsub	QWORD PTR [eax]

; 141  :     vca[i] = a[i] - c[i]; lca += vca[i]*vca[i];

	fld	QWORD PTR [ecx]
	fsub	QWORD PTR [edx]
	fld	QWORD PTR [eax+8]
	fsub	QWORD PTR [ecx+8]
	fld	QWORD PTR [edx+8]
	fsub	QWORD PTR [eax+8]
	fstp	QWORD PTR _vbc$[ebp+8]
	fld	QWORD PTR [ecx+8]
	fsub	QWORD PTR [edx+8]
	fld	QWORD PTR [eax+16]
	fsub	QWORD PTR [ecx+16]
	fld	ST(5)
	fmul	ST(0), ST(6)
	fadd	QWORD PTR __real@0000000000000000
	fld	ST(3)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	ST(1)
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _lab$[ebp]
	fld	QWORD PTR [edx+16]
	fsub	QWORD PTR [eax+16]
	fstp	QWORD PTR _vbc$[ebp+16]
	fld	ST(4)
	fmulp	ST(5), ST(0)
	fxch	ST(4)
	fadd	QWORD PTR __real@0000000000000000
	fld	QWORD PTR _vbc$[ebp+8]
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _vbc$[ebp+16]
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _lbc$[ebp]
	fld	QWORD PTR [ecx+16]
	fsub	QWORD PTR [edx+16]
	fld	ST(3)
	fmul	ST(0), ST(4)
	fadd	QWORD PTR __real@0000000000000000
	fld	ST(2)
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	ST(1)
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _lca$[ebp]

; 142  :   }
; 143  :   temp = vca[0]*vab[1]-vca[1]*vab[0]; Area += temp*temp;

	fld	ST(2)
	fmul	ST(0), ST(4)
	fld	ST(6)
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(0)
	fadd	QWORD PTR __real@0000000000000000

; 144  :   temp = vca[1]*vab[2]-vca[2]*vab[1]; Area += temp*temp;

	fld	ST(5)
	fmulp	ST(3), ST(0)
	fld	ST(1)
	fmulp	ST(4), ST(0)
	fxch	ST(2)
	fsubrp	ST(3), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)

; 145  :   temp = vca[2]*vab[0]-vca[0]*vab[2]; Area += temp*temp;

	fxch	ST(1)
	fmulp	ST(4), ST(0)
	fxch	ST(2)
	fmulp	ST(1), ST(0)
	fsubp	ST(2), ST(0)

; 146  : /*****/
; 147  :   return sqrt(lab*lbc*lca/(4*Area));

	fld	QWORD PTR _lbc$[ebp]
	fmul	QWORD PTR _lab$[ebp]
	fmul	QWORD PTR _lca$[ebp]
	fld	ST(2)
	fmulp	ST(3), ST(0)

; 145  :   temp = vca[2]*vab[0]-vca[0]*vab[2]; Area += temp*temp;

	fxch	ST(2)
	faddp	ST(1), ST(0)

; 146  : /*****/
; 147  :   return sqrt(lab*lbc*lca/(4*Area));

	fmul	QWORD PTR __real@4010000000000000
	fdivp	ST(1), ST(0)
	call	__CIsqrt

; 148  : } // end 

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_rad	ENDP
_TEXT	ENDS
PUBLIC	__real@c000000000000000
PUBLIC	__$ArrayPad$
PUBLIC	_dradp
EXTRN	_dot:PROC
EXTRN	_cross_prod:PROC
;	COMDAT __real@c000000000000000
CONST	SEGMENT
__real@c000000000000000 DQ 0c000000000000000r	; -2
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _dradp
_TEXT	SEGMENT
_Area$ = -156						; size = 8
_lab$ = -148						; size = 8
_lca$ = -140						; size = 8
_rp$ = -132						; size = 8
_lbc$ = -132						; size = 8
_tmp$ = -124						; size = 24
_Ar$ = -100						; size = 24
_vbc$ = -76						; size = 24
_vca$ = -52						; size = 24
_vab$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_result$ = 20						; size = 4
_mult$ = 24						; size = 8
_dradp	PROC						; COMDAT

; 166  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 167  :   REAL vab[3], vbc[3], vca[3], Ar[3], tmp[3];
; 168  :   REAL lab=0, lbc=0, lca=0, Area, rp, rr;
; 169  :   int i;
; 170  :   for ( i = 0 ; i < 3 ; i++ ) {
; 171  :     vab[i] = b[i] - a[i]; lab += vab[i]*vab[i];

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	fld	QWORD PTR [eax]
	fsub	QWORD PTR [ecx]

; 172  :     vbc[i] = c[i] - b[i]; lbc += vbc[i]*vbc[i];

	mov	edx, DWORD PTR _c$[ebp]
	push	esi
	mov	esi, DWORD PTR _result$[ebp]
	fst	QWORD PTR _vab$[ebp]
	fld	QWORD PTR [edx]
	fsub	QWORD PTR [eax]
	fst	QWORD PTR _vbc$[ebp]

; 173  :     vca[i] = a[i] - c[i]; lca += vca[i]*vca[i];

	fld	QWORD PTR [ecx]
	fsub	QWORD PTR [edx]
	fst	QWORD PTR _vca$[ebp]
	fld	QWORD PTR [eax+8]
	fsub	QWORD PTR [ecx+8]
	fst	QWORD PTR _vab$[ebp+8]
	fld	QWORD PTR [edx+8]
	fsub	QWORD PTR [eax+8]
	fst	QWORD PTR _vbc$[ebp+8]
	fld	QWORD PTR [ecx+8]
	fsub	QWORD PTR [edx+8]
	fst	QWORD PTR _vca$[ebp+8]
	fld	QWORD PTR [eax+16]
	fsub	QWORD PTR [ecx+16]
	fstp	QWORD PTR _vab$[ebp+16]
	fld	ST(5)
	fmulp	ST(6), ST(0)
	fldz
	fadd	ST(6), ST(0)
	fld	ST(3)
	fmulp	ST(4), ST(0)
	fxch	ST(6)
	faddp	ST(3), ST(0)
	fld	QWORD PTR _vab$[ebp+16]
	fmul	ST(0), ST(0)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR _lab$[ebp]
	fld	QWORD PTR [edx+16]
	fsub	QWORD PTR [eax+16]

; 174  :   }
; 175  :   /*lab=SDIM_dot(vab,vab); lbc=SDIM_dot(vbc,vbc); lca=SDIM_dot(vca,vca);*/
; 176  :   cross_prod(vca,vab,Ar); Area = SDIM_dot(Ar,Ar);

	lea	eax, DWORD PTR _Ar$[ebp]
	push	eax
	fst	QWORD PTR _vbc$[ebp+16]
	fld	ST(4)
	fmulp	ST(5), ST(0)
	fxch	ST(4)
	fadd	ST(0), ST(5)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fld	ST(3)
	fmulp	ST(4), ST(0)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR _lbc$[ebp]
	fld	QWORD PTR [ecx+16]
	lea	ecx, DWORD PTR _vab$[ebp]
	fsub	QWORD PTR [edx+16]
	push	ecx
	lea	edx, DWORD PTR _vca$[ebp]
	push	edx
	fst	QWORD PTR _vca$[ebp+16]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	faddp	ST(3), ST(0)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _lca$[ebp]
	call	_cross_prod
	mov	eax, DWORD PTR _web+616
	lea	ecx, DWORD PTR _Ar$[ebp]
	push	eax
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	fst	QWORD PTR _Area$[ebp]

; 177  : 
; 178  :   rr = 4*Area/(lab*lbc*lca); if (rr==0.) return 0;

	fmul	QWORD PTR __real@4010000000000000
	add	esp, 24					; 00000018H
	fld	QWORD PTR _lbc$[ebp]
	fmul	QWORD PTR _lab$[ebp]
	fmul	QWORD PTR _lca$[ebp]
	fdivp	ST(1), ST(0)
	fld	ST(0)
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	SHORT $LN39@dradp
	fstp	ST(1)
	pop	esi

; 183  :   return rp;
; 184  : } // end dradp()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN39@dradp:

; 179  :   ke_pow(rr,rp); rp *= mult;

	mov	eax, DWORD PTR _ke_power_flag
	fstp	ST(0)
	test	eax, eax
	jle	$LN71@dradp
	mov	ecx, DWORD PTR _ke_power_i
	fld	ST(0)
	mov	edx, 1
	cmp	ecx, edx
	jle	SHORT $LN52@dradp
	lea	eax, DWORD PTR [ecx-1]
	cmp	eax, 8
	jl	SHORT $LC33@dradp
	lea	eax, DWORD PTR [ecx-9]
	shr	eax, 3
	inc	eax
	lea	edx, DWORD PTR [eax*8+1]
$LN34@dradp:
	dec	eax
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	jne	SHORT $LN34@dradp
$LC33@dradp:
	cmp	edx, ecx
	jge	SHORT $LN52@dradp
	sub	ecx, edx
$LC12@dradp:
	dec	ecx
	fmul	ST(0), ST(1)
	jne	SHORT $LC12@dradp
$LN52@dradp:
	fstp	ST(1)
$LN4@dradp:
	fmul	QWORD PTR _mult$[ebp]

; 180  :   mult = -2*ke_power*rp; cross_prod(vbc,Ar,tmp);

	lea	ecx, DWORD PTR _tmp$[ebp]
	push	ecx
	lea	edx, DWORD PTR _Ar$[ebp]
	fst	QWORD PTR _rp$[ebp]
	push	edx
	fld	QWORD PTR _ke_power
	lea	eax, DWORD PTR _vbc$[ebp]
	fmul	QWORD PTR __real@c000000000000000
	push	eax
	fmulp	ST(1), ST(0)
	fstp	QWORD PTR _mult$[ebp]
	call	_cross_prod

; 181  :   for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN1@dradp
	fld	QWORD PTR _Area$[ebp]
	fld	QWORD PTR _lca$[ebp]
	fld	QWORD PTR _lab$[ebp]
	fld	QWORD PTR _mult$[ebp]
$LN3@dradp:

; 182  :     result[i] += mult*(vca[i]/lca - vab[i]/lab + tmp[i]/Area);

	fld	QWORD PTR _vca$[ebp+eax*8]
	inc	eax
	fdiv	ST(0), ST(3)
	fld	QWORD PTR _vab$[ebp+eax*8-8]
	fdiv	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _tmp$[ebp+eax*8-8]
	fdiv	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [esi+eax*8-8]
	fstp	QWORD PTR [esi+eax*8-8]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN3@dradp

; 181  :   for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)
	fstp	ST(0)
	fstp	ST(0)
	fstp	ST(0)
$LN1@dradp:

; 183  :   return rp;
; 184  : } // end dradp()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _rp$[ebp]
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN71@dradp:

; 179  :   ke_pow(rr,rp); rp *= mult;

	jns	SHORT $LN8@dradp
	mov	ecx, DWORD PTR _ke_power_l
	xor	edx, edx
	cmp	ecx, 8
	jl	SHORT $LC36@dradp
	lea	eax, DWORD PTR [ecx-8]
	shr	eax, 3
	inc	eax
	lea	edx, DWORD PTR [eax*8]
$LN37@dradp:
	dec	eax
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	jne	SHORT $LN37@dradp
$LC36@dradp:
	cmp	edx, ecx
	jge	$LN4@dradp
	sub	ecx, edx
$LC7@dradp:
	dec	ecx
	fmul	ST(0), ST(0)
	jne	SHORT $LC7@dradp
	jmp	$LN4@dradp
$LN8@dradp:
	fld	QWORD PTR _ke_power
	call	__CIpow
	jmp	$LN4@dradp
_dradp	ENDP
_TEXT	ENDS
PUBLIC	_knot_thickness_0
; Function compile flags: /Ogtp
;	COMDAT _knot_thickness_0
_TEXT	SEGMENT
_thick$ = -12						; size = 8
_a$ = -4						; size = 4
tv289 = 8						; size = 4
_v_info$ = 8						; size = 4
_knot_thickness_0 PROC					; COMDAT

; 198  : { REAL *a = get_coord(v_info->id), *b, *c;

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _v_info$[ebp]

; 199  :   REAL thick = 0.0;  /* for this vertex */

	fldz
	mov	eax, DWORD PTR [eax]
	fst	QWORD PTR _thick$[ebp]
	mov	ecx, DWORD PTR _web+104
	mov	DWORD PTR tv289[ebp], eax
	push	ebx
	mov	ebx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	push	edi
	mov	edi, DWORD PTR _dymem
	add	eax, DWORD PTR [ecx+edi+64]

; 200  :   edge_id e_id;  /* edge to create triple */
; 201  : 
; 202  :   FOR_ALL_EDGES(e_id)

	mov	ecx, DWORD PTR _web+160
	mov	DWORD PTR _a$[ebp], eax
	test	ecx, 268435456				; 10000000H
	je	$LN5@knot_thick
	push	esi
$LN21@knot_thick:
	mov	eax, DWORD PTR _web+124
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [esi+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN6@knot_thick

; 203  :   { vertex_id eh_id = get_edge_headv(e_id);

	mov	edx, DWORD PTR _web+216
	mov	edx, DWORD PTR [edx+edi+304]
	shr	ecx, 27					; 0000001bH
	add	edx, esi
	and	ecx, 1
	je	SHORT $LN11@knot_thick
	mov	eax, DWORD PTR [edx]
	jmp	SHORT $LN10@knot_thick
$LN11@knot_thick:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
$LN10@knot_thick:

; 204  :     vertex_id et_id = get_edge_tailv(e_id);

	test	ecx, ecx
	je	SHORT $LN15@knot_thick
	mov	ecx, DWORD PTR _web+636
	mov	ecx, DWORD PTR [edx+ecx*4]
	jmp	SHORT $LN14@knot_thick
$LN15@knot_thick:
	mov	ecx, DWORD PTR [edx]
$LN14@knot_thick:

; 205  :     if ( v_info->id == eh_id || v_info->id == et_id ) continue; /* incident */

	mov	edx, DWORD PTR tv289[ebp]
	cmp	edx, eax
	je	SHORT $LN6@knot_thick
	cmp	edx, ecx
	je	SHORT $LN6@knot_thick

; 206  :     b = get_coord(eh_id); c = get_coord(et_id);

	mov	edx, DWORD PTR _web+104
	fstp	ST(0)
	mov	edx, DWORD PTR [edx+edi+64]
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	add	ecx, edx

; 207  :     thick += radp(a,b,c);

	push	ecx
	mov	ecx, DWORD PTR _a$[ebp]
	add	eax, edx
	push	eax
	push	ecx
	call	_radp
	fadd	QWORD PTR _thick$[ebp]
	add	esp, 12					; 0000000cH
	fst	QWORD PTR _thick$[ebp]
$LN6@knot_thick:

; 200  :   edge_id e_id;  /* edge to create triple */
; 201  : 
; 202  :   FOR_ALL_EDGES(e_id)

	mov	ecx, DWORD PTR [esi]
	test	ecx, 268435456				; 10000000H
	jne	$LN21@knot_thick
	pop	esi
$LN5@knot_thick:
	pop	edi
	pop	ebx

; 208  :   }
; 209  :   return thick;
; 210  : } // end knot_thickness_0()

	mov	esp, ebp
	pop	ebp
	ret	0
_knot_thickness_0 ENDP
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	_knot_thickness_0_gradient
;	COMDAT __real@3ff0000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\knot1.c
CONST	ENDS
;	COMDAT _knot_thickness_0_gradient
_TEXT	SEGMENT
_thick$ = -28						; size = 8
_c$ = -20						; size = 4
_b$ = -16						; size = 4
_a$ = -12						; size = 4
_v2_id$ = -8						; size = 4
_v1_id$ = -4						; size = 4
_v_info$ = 8						; size = 4
_knot_thickness_0_gradient PROC				; COMDAT

; 222  : { REAL *a , *b, *c, *d;

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 223  :   REAL thick = 0.0;  /* thickness at this vertex */
; 224  :   edge_id e_id;  /* edge to create triple */
; 225  :   vertex_id v_id, v1_id, v2_id;  /* vertex to create triple */
; 226  : 
; 227  :   a = get_coord(v_info->id);

	mov	eax, DWORD PTR _v_info$[ebp]
	fldz
	mov	ecx, DWORD PTR [eax]
	fstp	QWORD PTR _thick$[ebp]
	mov	edx, DWORD PTR _dymem
	push	ebx
	mov	ebx, DWORD PTR _web+12
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+ecx*4]
	mov	ecx, DWORD PTR _web+104
	add	eax, DWORD PTR [ecx+edx+64]

; 228  :   FOR_ALL_EDGES(e_id)

	mov	ecx, DWORD PTR _web+160
	push	esi
	push	edi
	mov	DWORD PTR _a$[ebp], eax
	test	ecx, 268435456				; 10000000H
	je	$LN42@knot_thick@2
	npad	9
$LL44@knot_thick@2:
	mov	edx, DWORD PTR _web+124
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	edx, DWORD PTR [esi+edx]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	je	$LN15@knot_thick@2

; 229  :   { vertex_id eh_id = get_edge_headv(e_id);

	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	je	SHORT $LN20@knot_thick@2
	mov	eax, DWORD PTR _web+216
	mov	edi, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+edi+304]
	add	edx, eax
	mov	eax, DWORD PTR [edx]
	jmp	SHORT $LN19@knot_thick@2
$LN20@knot_thick@2:
	mov	eax, DWORD PTR _dymem
	mov	edi, DWORD PTR _web+216
	mov	eax, DWORD PTR [edi+eax+304]
	add	edx, eax
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
$LN19@knot_thick@2:

; 230  :     vertex_id et_id = get_edge_tailv(e_id);

	test	ecx, ecx
	je	SHORT $LN24@knot_thick@2
	mov	ecx, DWORD PTR _web+636
	mov	ecx, DWORD PTR [edx+ecx*4]
	jmp	SHORT $LN23@knot_thick@2
$LN24@knot_thick@2:
	mov	ecx, DWORD PTR [edx]
$LN23@knot_thick@2:

; 231  :     if ( v_info->id == eh_id || v_info->id == et_id ) continue; /* incident */

	mov	edx, DWORD PTR _v_info$[ebp]
	mov	edx, DWORD PTR [edx]
	cmp	edx, eax
	je	SHORT $LN15@knot_thick@2
	cmp	edx, ecx
	je	SHORT $LN15@knot_thick@2

; 232  :     b = get_coord(eh_id); c = get_coord(et_id);

	mov	edx, DWORD PTR _web+104

; 233  :     thick += dradp(a,b,c, v_info->grad[0], 1.);

	fld1
	mov	edi, DWORD PTR _dymem
	mov	edx, DWORD PTR [edx+edi+64]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	add	eax, edx
	add	ecx, edx
	mov	edx, DWORD PTR _v_info$[ebp]
	mov	edx, DWORD PTR [edx+1336]
	mov	edx, DWORD PTR [edx]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	edx
	push	ecx
	push	eax
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	call	_dradp
	fadd	QWORD PTR _thick$[ebp]
	mov	ebx, DWORD PTR _web+12
	add	esp, 24					; 00000018H
	fstp	QWORD PTR _thick$[ebp]
$LN15@knot_thick@2:

; 228  :   FOR_ALL_EDGES(e_id)

	mov	ecx, DWORD PTR _web+124
	mov	edx, DWORD PTR [esi+ecx]
	mov	ecx, DWORD PTR [edx]
	test	ecx, 268435456				; 10000000H
	jne	$LL44@knot_thick@2
	mov	edx, DWORD PTR _dymem
$LN42@knot_thick@2:

; 234  :   }
; 235  :   e_id = get_vertex_edge(v_info->id);

	mov	eax, DWORD PTR _v_info$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+ecx*4]
	mov	eax, DWORD PTR [eax+28]

; 236  :   b = get_coord(v1_id=get_edge_headv(e_id));

	mov	ecx, DWORD PTR _web+124
	mov	edi, eax
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+edx+304]
	shr	edi, 27					; 0000001bH
	and	edi, 1
	je	SHORT $LN28@knot_thick@2
	mov	esi, DWORD PTR [ecx+eax]
	jmp	SHORT $LN48@knot_thick@2
$LN28@knot_thick@2:
	mov	esi, DWORD PTR _web+636
	lea	esi, DWORD PTR [ecx+esi*4]
	mov	esi, DWORD PTR [esi+eax]
$LN48@knot_thick@2:

; 237  :   e_id = get_next_tail_edge(e_id);  /* assuming <= two edges per vertex */

	mov	eax, DWORD PTR [eax+edi*4+32]

; 238  :   c = get_coord(v2_id=get_edge_headv(e_id)); /* b and c are now two nbrs of v */

	mov	edi, DWORD PTR _web+124
	mov	DWORD PTR _v1_id$[ebp], esi
	mov	esi, DWORD PTR _web+104
	mov	edx, DWORD PTR [esi+edx+64]
	mov	esi, DWORD PTR _v1_id$[ebp]
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ebx+esi*4]
	add	esi, edx
	mov	DWORD PTR _b$[ebp], esi
	test	eax, 134217728				; 08000000H
	je	SHORT $LN34@knot_thick@2
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	ecx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _v2_id$[ebp], ecx
	jmp	SHORT $LN33@knot_thick@2
$LN34@knot_thick@2:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	edi, DWORD PTR _web+636
	lea	eax, DWORD PTR [eax+edi*4]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR _v2_id$[ebp], ecx
$LN33@knot_thick@2:
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	add	eax, edx
	mov	DWORD PTR _c$[ebp], eax

; 239  :   if (v1_id != v2_id) /* skip this if v had valence 1 */

	cmp	DWORD PTR _v1_id$[ebp], ecx
	je	SHORT $LN9@knot_thick@2

; 240  :     dradp(a,b,c, v_info->grad[0], 2.); /* case of triples (v,v1,v2),(v,v2,v1) */

	mov	ecx, DWORD PTR _v_info$[ebp]
	fld	QWORD PTR __real@4000000000000000
	mov	edx, DWORD PTR [ecx+1336]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR _a$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	ecx
	push	eax
	push	esi
	push	edx
	call	_dradp
	fstp	ST(0)
	mov	ebx, DWORD PTR _web+12
	add	esp, 24					; 00000018H
$LN9@knot_thick@2:

; 241  :   FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR _web+48
	test	ecx, 268435456				; 10000000H
	je	$LN41@knot_thick@2
$LL8@knot_thick@2:
	mov	edi, ecx
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	edx, DWORD PTR [edi+ebx]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	xor	esi, esi
	or	eax, esi
	je	SHORT $LN7@knot_thick@2

; 242  :   { if (v_id == v_info->id || v_id == v1_id || v_id == v2_id) continue;

	mov	eax, DWORD PTR _v_info$[ebp]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN7@knot_thick@2
	cmp	ecx, DWORD PTR _v1_id$[ebp]
	je	SHORT $LN7@knot_thick@2
	cmp	ecx, DWORD PTR _v2_id$[ebp]
	je	SHORT $LN7@knot_thick@2

; 243  :     d = get_coord(v_id);

	mov	ecx, DWORD PTR _web+104

; 244  :     dradp(a,b,d, v_info->grad[0], 1.);

	fld1
	mov	eax, DWORD PTR _dymem
	mov	esi, DWORD PTR [ecx+eax+64]
	mov	ebx, DWORD PTR _v_info$[ebp]
	mov	ecx, DWORD PTR [ebx+1336]
	mov	eax, DWORD PTR _b$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	add	esi, edx
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _a$[ebp]
	push	edx
	push	esi
	push	eax
	push	ecx
	call	_dradp
	fstp	ST(0)

; 245  :     if (v1_id != v2_id)

	mov	edx, DWORD PTR _v2_id$[ebp]
	add	esp, 24					; 00000018H
	cmp	DWORD PTR _v1_id$[ebp], edx
	je	SHORT $LN43@knot_thick@2

; 246  :       dradp(a,c,d, v_info->grad[0], 1.);

	mov	eax, DWORD PTR [ebx+1336]
	fld1
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	ecx
	push	esi
	push	edx
	push	eax
	call	_dradp
	fstp	ST(0)
	add	esp, 24					; 00000018H
$LN43@knot_thick@2:
	mov	ebx, DWORD PTR _web+12
$LN7@knot_thick@2:

; 241  :   FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR [edi+ebx]
	mov	ecx, DWORD PTR [ecx]
	test	ecx, 268435456				; 10000000H
	jne	$LL8@knot_thick@2
$LN41@knot_thick@2:

; 247  :   }
; 248  :   return thick;

	fld	QWORD PTR _thick$[ebp]
	pop	edi
	pop	esi
	pop	ebx

; 249  : } // end knot_thickness_0_gradient()

	mov	esp, ebp
	pop	ebp
	ret	0
_knot_thickness_0_gradient ENDP
_TEXT	ENDS
PUBLIC	__real@bff0000000000000
PUBLIC	_knot_thickness
;	COMDAT __real@bff0000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\knot1.c
CONST	ENDS
;	COMDAT _knot_thickness
_TEXT	SEGMENT
_thick$ = -12						; size = 8
_a$ = -4						; size = 4
tv289 = 8						; size = 4
_v_info$ = 8						; size = 4
_knot_thickness PROC					; COMDAT

; 266  : { REAL *a = get_coord(v_info->id), *b, *c;

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _v_info$[ebp]

; 267  :   REAL r, thick = -1.;

	fld	QWORD PTR __real@bff0000000000000
	mov	eax, DWORD PTR [eax]
	fst	QWORD PTR _thick$[ebp]
	mov	ecx, DWORD PTR _web+104
	mov	DWORD PTR tv289[ebp], eax
	push	ebx
	mov	ebx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	push	edi
	mov	edi, DWORD PTR _dymem
	add	eax, DWORD PTR [ecx+edi+64]

; 268  :   edge_id e_id;  /* edge to create triple */
; 269  : 
; 270  :   FOR_ALL_EDGES(e_id)

	mov	ecx, DWORD PTR _web+160
	mov	DWORD PTR _a$[ebp], eax
	test	ecx, 268435456				; 10000000H
	je	$LN7@knot_thick@3
	push	esi
$LN24@knot_thick@3:
	mov	eax, DWORD PTR _web+124
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [esi+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	$LN8@knot_thick@3

; 271  :   { vertex_id eh_id = get_edge_headv(e_id);

	mov	edx, DWORD PTR _web+216
	mov	edx, DWORD PTR [edx+edi+304]
	shr	ecx, 27					; 0000001bH
	add	edx, esi
	and	ecx, 1
	je	SHORT $LN13@knot_thick@3
	mov	eax, DWORD PTR [edx]
	jmp	SHORT $LN12@knot_thick@3
$LN13@knot_thick@3:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
$LN12@knot_thick@3:

; 272  :     vertex_id et_id = get_edge_tailv(e_id);

	test	ecx, ecx
	je	SHORT $LN17@knot_thick@3
	mov	ecx, DWORD PTR _web+636
	mov	ecx, DWORD PTR [edx+ecx*4]
	jmp	SHORT $LN16@knot_thick@3
$LN17@knot_thick@3:
	mov	ecx, DWORD PTR [edx]
$LN16@knot_thick@3:

; 273  :     if ( v_info->id == eh_id || v_info->id == et_id ) continue; /* incident */

	mov	edx, DWORD PTR tv289[ebp]
	cmp	edx, eax
	je	SHORT $LN8@knot_thick@3
	cmp	edx, ecx
	je	SHORT $LN8@knot_thick@3

; 274  :     b = get_coord(eh_id); c = get_coord(et_id);

	mov	edx, DWORD PTR _web+104
	fstp	ST(0)
	mov	edx, DWORD PTR [edx+edi+64]
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	add	ecx, edx

; 275  :     r = rad(a,b,c);

	push	ecx
	mov	ecx, DWORD PTR _a$[ebp]
	add	eax, edx
	push	eax
	push	ecx
	call	_rad

; 276  :     if (thick < 0 || r < thick) thick = r;

	fldz
	fld	QWORD PTR _thick$[ebp]
	add	esp, 12					; 0000000cH
	fcom	ST(1)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 5
	jnp	SHORT $LN50@knot_thick@3
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN49@knot_thick@3
$LN50@knot_thick@3:
	fstp	ST(0)
	fst	QWORD PTR _thick$[ebp]
	jmp	SHORT $LN8@knot_thick@3
$LN49@knot_thick@3:
	fstp	ST(1)
$LN8@knot_thick@3:

; 268  :   edge_id e_id;  /* edge to create triple */
; 269  : 
; 270  :   FOR_ALL_EDGES(e_id)

	mov	ecx, DWORD PTR [esi]
	test	ecx, 268435456				; 10000000H
	jne	$LN24@knot_thick@3
	pop	esi
$LN7@knot_thick@3:
	pop	edi
	pop	ebx

; 277  :   }
; 278  :   return thick; /* returns -1 if component only has 2 edges */
; 279  : } // end knot_thickness()

	mov	esp, ebp
	pop	ebp
	ret	0
_knot_thickness ENDP
_TEXT	ENDS
PUBLIC	_knot_thickness2
; Function compile flags: /Ogtp
;	COMDAT _knot_thickness2
_TEXT	SEGMENT
_thick$ = -20						; size = 8
tv339 = -12						; size = 4
_a$ = -8						; size = 4
tv330 = -4						; size = 4
tv321 = 8						; size = 4
_v_info$ = 8						; size = 4
_knot_thickness2 PROC					; COMDAT

; 296  : { REAL *a = get_coord(v_info->id), *b, *c;

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR _v_info$[ebp]

; 297  :   REAL r, thick = -1.;

	fld	QWORD PTR __real@bff0000000000000
	mov	eax, DWORD PTR [eax]
	fst	QWORD PTR _thick$[ebp]
	mov	ecx, DWORD PTR _web+104
	mov	edx, DWORD PTR _web+12
	mov	DWORD PTR tv321[ebp], eax
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	push	ebx
	mov	ebx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+ebx+64]
	add	eax, ecx
	mov	DWORD PTR _a$[ebp], eax

; 298  :   vertex_id v_id,w_id,w1_id,w2_id;  /* vertex and neighbors to create triple */
; 299  :   edge_id e_id;
; 300  : 
; 301  :   v_id = v_info->id;
; 302  :   FOR_ALL_VERTICES(w_id)

	mov	eax, DWORD PTR _web+48
	mov	DWORD PTR tv330[ebp], ecx
	test	eax, 268435456				; 10000000H
	je	$LN7@knot_thick@4
	push	esi
	push	edi
	mov	edi, DWORD PTR _web+124
	jmp	SHORT $LN9@knot_thick@4
$LN28@knot_thick@4:
	mov	ebx, DWORD PTR _dymem
$LN9@knot_thick@4:
	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	xor	ecx, ecx
	or	eax, ecx
	mov	DWORD PTR tv339[ebp], edx
	je	$LN8@knot_thick@4

; 303  :   {
; 304  :     e_id = get_vertex_edge(w_id);

	mov	eax, DWORD PTR [edx+28]

; 305  :     if ((w1_id = get_edge_headv(e_id))==v_id) continue;

	mov	esi, eax
	shr	esi, 27					; 0000001bH
	and	eax, 134217727				; 07ffffffH
	and	esi, 1
	mov	eax, DWORD PTR [edi+eax*4]
	je	SHORT $LN13@knot_thick@4
	mov	edx, DWORD PTR _web+216
	mov	edx, DWORD PTR [edx+ebx+304]
	mov	ecx, DWORD PTR [edx+eax]
	jmp	SHORT $LN12@knot_thick@4
$LN13@knot_thick@4:
	mov	ecx, DWORD PTR _web+216
	mov	edx, DWORD PTR [ecx+ebx+304]
	mov	ecx, DWORD PTR _web+636
	lea	ecx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [ecx+eax]
$LN12@knot_thick@4:
	cmp	ecx, DWORD PTR tv321[ebp]
	je	$LN8@knot_thick@4

; 306  :     b = get_coord(w1_id);

	mov	ebx, DWORD PTR _web+12

; 307  :     e_id = get_next_tail_edge(e_id);  /* assuming two edges per vertex */

	mov	eax, DWORD PTR [eax+esi*4+32]
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	mov	ebx, DWORD PTR tv330[ebp]
	add	ecx, ebx

; 308  :     if ((w2_id = get_edge_headv(e_id))==v_id) continue;

	test	eax, 134217728				; 08000000H
	je	SHORT $LN19@knot_thick@4
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	edx, DWORD PTR [edx+eax]
	jmp	SHORT $LN18@knot_thick@4
$LN19@knot_thick@4:
	mov	esi, DWORD PTR _web+636
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	lea	eax, DWORD PTR [eax+esi*4]
	mov	edx, DWORD PTR [eax+edx]
$LN18@knot_thick@4:
	cmp	edx, DWORD PTR tv321[ebp]
	je	SHORT $LN8@knot_thick@4

; 309  :     c = get_coord(w2_id);

	mov	eax, DWORD PTR _web+12
	fstp	ST(0)
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]

; 310  :     r = rad(a,b,c);

	mov	eax, DWORD PTR _a$[ebp]
	add	edx, ebx
	push	edx
	push	ecx
	push	eax
	call	_rad

; 311  :     if (thick < 0 || r < thick) thick = r;

	fldz
	fld	QWORD PTR _thick$[ebp]
	add	esp, 12					; 0000000cH
	fcom	ST(1)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 5
	jnp	SHORT $LN55@knot_thick@4
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN54@knot_thick@4
$LN55@knot_thick@4:
	fstp	ST(0)
	fst	QWORD PTR _thick$[ebp]
	jmp	SHORT $LN8@knot_thick@4
$LN54@knot_thick@4:
	fstp	ST(1)
$LN8@knot_thick@4:

; 298  :   vertex_id v_id,w_id,w1_id,w2_id;  /* vertex and neighbors to create triple */
; 299  :   edge_id e_id;
; 300  : 
; 301  :   v_id = v_info->id;
; 302  :   FOR_ALL_VERTICES(w_id)

	mov	ecx, DWORD PTR tv339[ebp]
	mov	eax, DWORD PTR [ecx]
	test	eax, 268435456				; 10000000H
	jne	$LN28@knot_thick@4
	pop	edi
	pop	esi
$LN7@knot_thick@4:
	pop	ebx

; 312  :   }
; 313  :   return thick;
; 314  : } // end knot_thickness2()

	mov	esp, ebp
	pop	ebp
	ret	0
_knot_thickness2 ENDP
_TEXT	ENDS
PUBLIC	_knot_local_thickness
; Function compile flags: /Ogtp
;	COMDAT _knot_local_thickness
_TEXT	SEGMENT
_a$ = -4						; size = 4
tv298 = 8						; size = 4
_v_info$ = 8						; size = 4
_knot_local_thickness PROC				; COMDAT

; 330  : { REAL *a = get_coord(v_info->id), *b, *c;

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	eax, DWORD PTR _v_info$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _web+104
	push	ebx
	mov	ebx, DWORD PTR _web+12
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+ecx*4]
	mov	ecx, DWORD PTR _dymem
	mov	edx, DWORD PTR [edx+ecx+64]
	mov	DWORD PTR tv298[ebp], edx
	add	edx, eax

; 331  :   edge_id e_id;  /* edge to create triple */
; 332  : 
; 333  :   e_id = get_vertex_edge(v_info->id);

	mov	eax, DWORD PTR [eax+28]
	push	esi

; 334  :   b = get_coord(get_edge_headv(e_id));

	mov	esi, eax
	mov	DWORD PTR _a$[ebp], edx
	mov	edx, DWORD PTR _web+216
	mov	edx, DWORD PTR [edx+ecx+304]
	push	edi
	mov	edi, DWORD PTR _web+124
	shr	esi, 27					; 0000001bH
	and	eax, 134217727				; 07ffffffH
	and	esi, 1
	mov	eax, DWORD PTR [edi+eax*4]
	je	SHORT $LN4@knot_local
	mov	ecx, DWORD PTR [edx+eax]
	jmp	SHORT $LN3@knot_local
$LN4@knot_local:
	mov	ecx, DWORD PTR _web+636
	lea	ecx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [ecx+eax]
$LN3@knot_local:

; 335  :   e_id = get_next_tail_edge(e_id);  /* assuming exactly two edges per vertex */

	mov	eax, DWORD PTR [eax+esi*4+32]
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	mov	ebx, DWORD PTR tv298[ebp]
	add	ecx, ebx

; 336  :   c = get_coord(get_edge_headv(e_id)); /* b and c are two nbrs of v */

	test	eax, 134217728				; 08000000H
	je	SHORT $LN10@knot_local
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	edx, DWORD PTR [edx+eax]
	jmp	SHORT $LN9@knot_local
$LN10@knot_local:
	mov	esi, DWORD PTR _web+636
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	lea	eax, DWORD PTR [eax+esi*4]
	mov	edx, DWORD PTR [eax+edx]
$LN9@knot_local:
	mov	eax, DWORD PTR _web+12
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]

; 337  : 
; 338  :   return rad(b,a,c);

	mov	eax, DWORD PTR _a$[ebp]
	add	edx, ebx
	push	edx
	push	eax
	push	ecx
	call	_rad
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebx

; 339  : } // end knot_local_thickness()

	mov	esp, ebp
	pop	ebp
	ret	0
_knot_local_thickness ENDP
_TEXT	ENDS
PUBLIC	_knot_thickness_id2
EXTRN	_get_vertex_length_star:PROC
; Function compile flags: /Ogtp
;	COMDAT _knot_thickness_id2
_TEXT	SEGMENT
tv323 = -28						; size = 8
_thick$ = -20						; size = 8
_a$ = -12						; size = 4
tv302 = -8						; size = 4
_w_id$ = -4						; size = 4
_v_id$ = 8						; size = 4
_knot_thickness_id2 PROC				; COMDAT

; 362  : { REAL *a = get_coord(v_id), *b, *c;

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR _v_id$[ebp]

; 363  :   REAL thick = 0.0;  /* for this vertex */

	fldz
	mov	edx, DWORD PTR _dymem
	fstp	QWORD PTR _thick$[ebp]
	mov	ecx, DWORD PTR _web+104
	and	eax, 134217727				; 07ffffffH
	push	ebx
	mov	ebx, DWORD PTR _web+12
	mov	eax, DWORD PTR [ebx+eax*4]
	add	eax, DWORD PTR [ecx+edx+64]

; 364  :   vertex_id w_id,w1_id,w2_id;  /* vertex and neighbors to create triple */
; 365  :   edge_id e_id;  /* temp edge */
; 366  : 
; 367  :   FOR_ALL_VERTICES(w_id)

	mov	edx, DWORD PTR _web+48
	mov	DWORD PTR _a$[ebp], eax
	mov	DWORD PTR _w_id$[ebp], edx
	test	edx, 268435456				; 10000000H
	je	$LN6@knot_thick@5
	push	esi
	push	edi
	jmp	SHORT $LN8@knot_thick@5
	npad	7
$LL19@knot_thick@5:
	mov	edx, DWORD PTR _w_id$[ebp]
$LN8@knot_thick@5:
	mov	esi, edx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	ecx, DWORD PTR [esi+ebx]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	mov	DWORD PTR tv302[ebp], esi
	je	$LN7@knot_thick@5

; 368  :   {
; 369  :     if (w_id==v_id) continue;  /* don't include local thickness at v */

	cmp	edx, DWORD PTR _v_id$[ebp]
	je	$LN7@knot_thick@5

; 370  :     e_id = get_vertex_edge(w_id);

	mov	eax, DWORD PTR [ecx+28]

; 371  :     if ((w1_id = get_edge_headv(e_id))==v_id) continue;

	mov	ecx, DWORD PTR _web+124
	mov	edi, DWORD PTR _dymem
	mov	edx, eax
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+edi+304]
	shr	edx, 27					; 0000001bH
	and	edx, 1
	je	SHORT $LN12@knot_thick@5
	mov	ecx, DWORD PTR [eax+ecx]
	jmp	SHORT $LN11@knot_thick@5
$LN12@knot_thick@5:
	mov	edi, DWORD PTR _web+636
	lea	ecx, DWORD PTR [ecx+edi*4]
	mov	ecx, DWORD PTR [ecx+eax]
$LN11@knot_thick@5:
	cmp	ecx, DWORD PTR _v_id$[ebp]
	je	SHORT $LN7@knot_thick@5

; 372  :     b = get_coord(w1_id);

	mov	esi, DWORD PTR _web+104
	mov	edi, DWORD PTR _dymem
	mov	edi, DWORD PTR [esi+edi+64]

; 373  :     e_id = get_next_tail_edge(e_id);  /* assuming two edges per vertex */
; 374  :     if ((w2_id = get_edge_headv(e_id))==v_id) continue;

	mov	edx, DWORD PTR [eax+edx*4+32]
	and	ecx, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ebx+ecx*4]
	push	edx
	add	esi, edi
	call	_get_edge_headv
	add	esp, 4
	cmp	eax, DWORD PTR _v_id$[ebp]
	je	SHORT $LN20@knot_thick@5

; 375  :     c = get_coord(w2_id);

	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	add	eax, edi

; 376  :     thick += radp(a,b,c) * get_vertex_length_star(w_id);

	push	eax
	mov	eax, DWORD PTR _a$[ebp]
	push	esi
	push	eax
	call	_radp
	fstp	QWORD PTR tv323[ebp]
	mov	ecx, DWORD PTR _w_id$[ebp]
	push	ecx
	call	_get_vertex_length_star
	fmul	QWORD PTR tv323[ebp]
	mov	ebx, DWORD PTR _web+12
	add	esp, 16					; 00000010H
	fadd	QWORD PTR _thick$[ebp]
	fstp	QWORD PTR _thick$[ebp]
$LN20@knot_thick@5:
	mov	esi, DWORD PTR tv302[ebp]
$LN7@knot_thick@5:

; 364  :   vertex_id w_id,w1_id,w2_id;  /* vertex and neighbors to create triple */
; 365  :   edge_id e_id;  /* temp edge */
; 366  : 
; 367  :   FOR_ALL_VERTICES(w_id)

	mov	edx, DWORD PTR [esi+ebx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _w_id$[ebp], eax
	test	eax, 268435456				; 10000000H
	jne	$LL19@knot_thick@5
	pop	edi
	pop	esi
$LN6@knot_thick@5:

; 377  :   }
; 378  :   return thick * get_vertex_length_star(v_id);

	mov	eax, DWORD PTR _v_id$[ebp]
	push	eax
	call	_get_vertex_length_star
	fmul	QWORD PTR _thick$[ebp]
	add	esp, 4
	pop	ebx

; 379  : } // end knot_thickness_id2()

	mov	esp, ebp
	pop	ebp
	ret	0
_knot_thickness_id2 ENDP
_TEXT	ENDS
PUBLIC	_v_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_knot_thickness_p2_gradient
EXTRN	_get_edge_length:PROC
EXTRN	_get_edge_side:PROC
; Function compile flags: /Ogtp
;	COMDAT _knot_thickness_p2_gradient
_TEXT	SEGMENT
_lv2$ = -236						; size = 8
_lv1$ = -228						; size = 8
tv1081 = -220						; size = 8
tv1015 = -216						; size = 4
_c$ = -216						; size = 4
_thick$ = -212						; size = 8
_a$ = -204						; size = 4
tv1408 = -200						; size = 8
_lw$89495 = -200					; size = 8
tv967 = -196						; size = 4
tv943 = -192						; size = 4
_bb$ = -192						; size = 4
tv755 = -188						; size = 8
_lv$ = -188						; size = 8
_l1$ = -188						; size = 8
_b$ = -184						; size = 4
tv1001 = -180						; size = 4
tv971 = -176						; size = 4
_cc$ = -176						; size = 4
_v_info$GSCopy$ = -172					; size = 4
_v1_id$ = -168						; size = 4
_v_id$ = -164						; size = 4
tv947 = -160						; size = 4
_v11_id$ = -160						; size = 4
_v2_id$ = -156						; size = 4
_v22_id$ = -152						; size = 4
_w_id$ = -152						; size = 4
_temp$ = -148						; size = 48
_e2$ = -100						; size = 48
_e1$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_v_info$ = 8						; size = 4
_knot_thickness_p2_gradient PROC			; COMDAT

; 395  : { vertex_id v_id = v_info->id;

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _v_info$[ebp]

; 396  :   REAL *a = get_coord(v_id), *b, *c, *d, *bb, *cc;
; 397  :   REAL temp[MAXCOORD], e1[MAXCOORD], e2[MAXCOORD];
; 398  :   REAL l1, l2, lv1, lv2, lv;
; 399  :   REAL thick = 0.0;  /* for this vertex */

	fldz
	mov	ecx, DWORD PTR _web+12
	fstp	QWORD PTR _thick$[ebp]
	mov	edx, DWORD PTR _dymem
	mov	DWORD PTR _v_info$GSCopy$[ebp], eax
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _v_id$[ebp], eax
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _web+104
	mov	ecx, DWORD PTR [ecx+edx+64]
	push	ebx
	push	esi
	add	ecx, eax
	push	edi

; 400  :   vertex_id v1_id,v2_id, w_id,w1_id,w2_id, v11_id,v22_id;  /* neighbors */
; 401  :   edge_id e_id, e1_id, e2_id;  /* temp edges */
; 402  :   int i;
; 403  : 
; 404  :   e1_id = get_vertex_edge(v_id);

	mov	edi, DWORD PTR [eax+28]

; 405  :   v1_id=get_edge_headv(e1_id); lv1 = get_vertex_length_star(v1_id);

	mov	eax, edi
	shr	eax, 27					; 0000001bH
	mov	esi, eax
	and	esi, 1
	mov	DWORD PTR _a$[ebp], ecx
	mov	DWORD PTR tv943[ebp], eax
	je	SHORT $LN39@knot_thick@6
	mov	eax, DWORD PTR _web+124
	mov	ebx, edi
	and	ebx, 134217727				; 07ffffffH
	add	ebx, ebx
	add	ebx, ebx
	mov	ecx, DWORD PTR [ebx+eax]
	mov	eax, DWORD PTR _web+216
	mov	edx, DWORD PTR [eax+edx+304]
	mov	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR tv947[ebp], ebx
	jmp	SHORT $LN150@knot_thick@6
$LN39@knot_thick@6:
	mov	ecx, DWORD PTR _web+124
	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv947[ebp], eax
	mov	eax, DWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR _web+216
	add	eax, DWORD PTR [ecx+edx+304]
	mov	edx, DWORD PTR _web+636
	mov	eax, DWORD PTR [eax+edx*4]
	mov	ebx, DWORD PTR tv947[ebp]
$LN150@knot_thick@6:
	mov	ecx, eax
	push	ecx
	mov	DWORD PTR _v1_id$[ebp], eax
	call	_get_vertex_length_star
	fstp	QWORD PTR _lv1$[ebp]

; 406  :   get_edge_side(e1_id,e1); l1 = get_edge_length(e1_id);

	lea	edx, DWORD PTR _e1$[ebp]
	push	edx
	push	edi
	call	_get_edge_side
	push	edi
	call	_get_edge_length
	fstp	QWORD PTR _l1$[ebp]

; 407  :   e2_id = get_next_tail_edge(e1_id); /* assuming two edges per vertex */

	mov	ecx, DWORD PTR _web+124
	mov	eax, DWORD PTR [ebx+ecx]
	mov	edi, DWORD PTR [eax+esi*4+32]

; 408  :   v2_id=get_edge_headv(e2_id); lv2 = get_vertex_length_star(v2_id);

	mov	edx, DWORD PTR _web+216
	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	ecx, DWORD PTR [eax+ecx]
	mov	ebx, edi
	shr	ebx, 27					; 0000001bH
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv971[ebp], eax
	mov	eax, DWORD PTR _dymem
	mov	DWORD PTR tv967[ebp], ebx
	test	bl, 1
	je	SHORT $LN45@knot_thick@6
	mov	edx, DWORD PTR [edx+eax+304]
	mov	eax, DWORD PTR [ecx+edx]
	jmp	SHORT $LN151@knot_thick@6
$LN45@knot_thick@6:
	add	ecx, DWORD PTR [edx+eax+304]
	mov	edx, DWORD PTR _web+636
	mov	eax, DWORD PTR [ecx+edx*4]
$LN151@knot_thick@6:
	mov	ecx, eax
	push	ecx
	mov	DWORD PTR _v2_id$[ebp], eax
	call	_get_vertex_length_star
	fstp	QWORD PTR _lv2$[ebp]

; 409  :    /* v1 and v2 are two nbrs of v  and lv1,lv2 are their star lengths */
; 410  :   get_edge_side(e2_id,e2); l2 = get_edge_length(e2_id);

	lea	edx, DWORD PTR _e2$[ebp]
	push	edx
	push	edi
	call	_get_edge_side
	push	edi
	call	_get_edge_length

; 411  :     /* e1, e2 are edge vectors out of v; l1, l2 are their lengths */
; 412  :   for ( i = 0 ; i < SDIM ; i++ )

	mov	esi, DWORD PTR _web+616
	add	esp, 16					; 00000010H
	xor	edx, edx
	test	esi, esi
	jle	SHORT $LN96@knot_thick@6
	fld	QWORD PTR _l1$[ebp]
	mov	ecx, esi
	fld	QWORD PTR __real@4000000000000000
	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	fmul	ST(1), ST(0)
	xor	eax, eax
	fmulp	ST(2), ST(0)
	lea	edi, DWORD PTR _temp$[ebp]
	rep stosd
$LN35@knot_thick@6:

; 413  :   {
; 414  :     e1[i] /= 2*l1; e2[i] /= 2*l2; /* now they're half unit vectors */

	fld	QWORD PTR _e1$[ebp+edx*8]
	inc	edx
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR _e1$[ebp+edx*8-8]
	fld	QWORD PTR _e2$[ebp+edx*8-8]
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR _e2$[ebp+edx*8-8]
	cmp	edx, esi
	jl	SHORT $LN35@knot_thick@6

; 411  :     /* e1, e2 are edge vectors out of v; l1, l2 are their lengths */
; 412  :   for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(1)
$LN96@knot_thick@6:

; 415  :     temp[i] = 0;
; 416  :   }
; 417  :   lv = get_vertex_length_star(v_id); /* should be half of l1+l2 */

	mov	eax, DWORD PTR _v_id$[ebp]
	fstp	ST(0)
	push	eax
	call	_get_vertex_length_star
	fst	QWORD PTR _lv$[ebp]

; 418  : 
; 419  :   FOR_ALL_VERTICES(w_id)

	mov	esi, DWORD PTR _web+48
	fld	QWORD PTR _thick$[ebp]
	mov	edx, DWORD PTR _web+124
	add	esp, 4
	mov	DWORD PTR _w_id$[ebp], esi
	test	esi, 268435456				; 10000000H
	je	$LN30@knot_thick@6
	jmp	SHORT $LN32@knot_thick@6
$LN89@knot_thick@6:
	mov	esi, DWORD PTR _w_id$[ebp]
$LN32@knot_thick@6:
	mov	ecx, DWORD PTR _web+12
	mov	ebx, esi
	and	ebx, 134217727				; 07ffffffH
	add	ebx, ebx
	add	ebx, ebx
	mov	ecx, DWORD PTR [ebx+ecx]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	mov	DWORD PTR tv1001[ebp], ebx
	je	$LN31@knot_thick@6

; 420  :   {
; 421  :     if (w_id == v_id) continue;

	cmp	esi, DWORD PTR _v_id$[ebp]
	je	$LN31@knot_thick@6

; 422  :     e_id = get_vertex_edge(w_id);

	mov	eax, DWORD PTR [ecx+28]

; 423  :     if ((w1_id = get_edge_headv(e_id))==v_id) continue;

	mov	esi, DWORD PTR _dymem
	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR tv1015[ebp], ecx
	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+esi+304]
	je	SHORT $LN49@knot_thick@6
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edi, DWORD PTR [eax+ecx]
	jmp	SHORT $LN48@knot_thick@6
$LN49@knot_thick@6:
	mov	esi, DWORD PTR _web+636
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	lea	esi, DWORD PTR [eax+esi*4]
	mov	edi, DWORD PTR [esi+ecx]
$LN48@knot_thick@6:
	cmp	edi, DWORD PTR _v_id$[ebp]
	je	$LN31@knot_thick@6

; 424  :     e_id = get_next_tail_edge(e_id);  /* assuming two edges per vertex */

	mov	esi, DWORD PTR tv1015[ebp]
	mov	eax, DWORD PTR [eax+esi*4+32]

; 425  :     if ((w2_id = get_edge_headv(e_id))==v_id) continue;

	test	eax, 134217728				; 08000000H
	je	SHORT $LN55@knot_thick@6
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	esi, DWORD PTR [ecx+eax]
	jmp	SHORT $LN54@knot_thick@6
$LN55@knot_thick@6:
	mov	esi, DWORD PTR _web+636
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	lea	eax, DWORD PTR [eax+esi*4]
	mov	esi, DWORD PTR [eax+ecx]
$LN54@knot_thick@6:
	cmp	esi, DWORD PTR _v_id$[ebp]
	je	SHORT $LN31@knot_thick@6

; 426  :     thick += dradp(a,get_coord(w1_id),get_coord(w2_id),
; 427  :                  temp, get_vertex_length_star(w_id));

	mov	eax, DWORD PTR _w_id$[ebp]
	fstp	ST(0)
	mov	ecx, DWORD PTR _web+104
	fstp	ST(0)
	mov	edx, DWORD PTR _dymem
	mov	ebx, DWORD PTR [ecx+edx+64]
	push	eax
	call	_get_vertex_length_star
	mov	eax, DWORD PTR _web+12
	push	ecx
	fstp	QWORD PTR [esp]
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+esi*4]
	lea	ecx, DWORD PTR _temp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _a$[ebp]
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edi*4]
	add	edx, ebx
	push	edx
	add	eax, ebx
	push	eax
	push	ecx
	call	_dradp
	fadd	QWORD PTR _thick$[ebp]
	mov	edx, DWORD PTR _web+124
	mov	ebx, DWORD PTR tv1001[ebp]
	fst	QWORD PTR _thick$[ebp]
	add	esp, 24					; 00000018H
	fld	QWORD PTR _lv$[ebp]
	fxch	ST(1)
$LN31@knot_thick@6:

; 418  : 
; 419  :   FOR_ALL_VERTICES(w_id)

	mov	eax, DWORD PTR _web+12
	mov	ecx, DWORD PTR [ebx+eax]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR _w_id$[ebp], eax
	test	eax, 268435456				; 10000000H
	jne	$LN89@knot_thick@6
	mov	ebx, DWORD PTR tv967[ebp]
$LN30@knot_thick@6:

; 428  :   }     /* now temp is sum_w l(w)*d_v(rp(v,w1,w2)) */
; 429  :   for ( i = 0 ; i < SDIM ; i++ )

	mov	ecx, DWORD PTR _web+616
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN22@knot_thick@6
$LN24@knot_thick@6:

; 430  :     v_info->grad[0][i] += (temp[i]*lv - thick*(e1[i]+e2[i]));

	fld	QWORD PTR _temp$[ebp+eax*8]
	mov	edx, DWORD PTR _v_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [edx+1336]
	fmul	ST(0), ST(2)
	fld	QWORD PTR _e2$[ebp+eax*8]
	mov	edx, DWORD PTR [ecx]
	fadd	QWORD PTR _e1$[ebp+eax*8]
	lea	ecx, DWORD PTR [edx+eax*8]
	inc	eax
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _web+616
	cmp	eax, ecx
	jl	SHORT $LN24@knot_thick@6

; 428  :   }     /* now temp is sum_w l(w)*d_v(rp(v,w1,w2)) */
; 429  :   for ( i = 0 ; i < SDIM ; i++ )

	mov	edx, DWORD PTR _web+124
$LN22@knot_thick@6:

; 431  :     /* so far we should have the gradient of knot_thickness_p2(v_info) */
; 432  :     /* which is: d_v(l(v))*thick + l(v)*temp */
; 433  :   thick *= lv;  /* this is the energy at v, to be returned */

	fmulp	ST(1), ST(0)

; 434  : 
; 435  :     /* Now we must compute derivative due to v of all other terms,
; 436  :     first just its effect on length for energy of neighbors, then
; 437  :     when v is playing the role of w (affects only length) or w1 or w2 */
; 438  :   for ( i = 0 ; i < SDIM ; i++ )

	xor	esi, esi
	fstp	QWORD PTR _thick$[ebp]
	test	ecx, ecx
	jle	SHORT $LN19@knot_thick@6
	npad	10
$LL21@knot_thick@6:

; 439  :     v_info->grad[0][i] -= (  knot_thickness_id2(v1_id)*e1[i]/lv1
; 440  :                + knot_thickness_id2(v2_id)*e2[i]/lv2 );

	mov	edi, DWORD PTR _v_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [edi+1336]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _v2_id$[ebp]
	fld	QWORD PTR [ecx+esi*8]
	push	edx
	fstp	QWORD PTR tv1081[ebp]
	call	_knot_thickness_id2
	fmul	QWORD PTR _e2$[ebp+esi*8]
	mov	eax, DWORD PTR _v1_id$[ebp]
	push	eax
	fdiv	QWORD PTR _lv2$[ebp]
	fstp	QWORD PTR tv755[ebp]
	call	_knot_thickness_id2
	fmul	QWORD PTR _e1$[ebp+esi*8]
	mov	ecx, DWORD PTR [edi+1336]
	mov	edx, DWORD PTR [ecx]
	inc	esi
	fdiv	QWORD PTR _lv1$[ebp]
	add	esp, 8
	fadd	QWORD PTR tv755[ebp]
	fsubr	QWORD PTR tv1081[ebp]
	fstp	QWORD PTR [edx+esi*8-8]
	cmp	esi, DWORD PTR _web+616
	jl	SHORT $LL21@knot_thick@6

; 434  : 
; 435  :     /* Now we must compute derivative due to v of all other terms,
; 436  :     first just its effect on length for energy of neighbors, then
; 437  :     when v is playing the role of w (affects only length) or w1 or w2 */
; 438  :   for ( i = 0 ; i < SDIM ; i++ )

	mov	edx, DWORD PTR _web+124
$LN19@knot_thick@6:

; 441  :     /* this is effect of v on l(v1) and l(v2) in energy at v1 and v2 */
; 442  : 
; 443  :   b = get_coord(v1_id); c = get_coord(v2_id);  /* will need these nbrs */

	mov	edi, DWORD PTR _v1_id$[ebp]
	mov	esi, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+12
	mov	eax, DWORD PTR _web+104
	mov	eax, DWORD PTR [eax+esi+64]
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ecx+edi*4]
	add	edi, eax
	mov	DWORD PTR _b$[ebp], edi
	mov	edi, DWORD PTR _v2_id$[ebp]
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ecx+edi*4]
	add	edi, eax

; 444  :   e_id = get_next_head_edge(e1_id); /* move out beyond v1 */

	mov	eax, DWORD PTR tv943[ebp]
	mov	DWORD PTR _c$[ebp], edi
	mov	edi, DWORD PTR tv947[ebp]
	mov	edi, DWORD PTR [edi+edx]
	not	eax
	and	eax, 1
	mov	eax, DWORD PTR [edi+eax*4+32]

; 445  :   bb = get_coord(v11_id=get_edge_tailv(e_id)); /* coords of next vertex */

	mov	edi, DWORD PTR _web+216
	mov	edi, DWORD PTR [edi+esi+304]
	xor	eax, 134217728				; 08000000H
	test	eax, 134217728				; 08000000H
	je	SHORT $LN61@knot_thick@6
	mov	ebx, DWORD PTR _web+636
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	lea	eax, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR [eax+edi]
	mov	ebx, DWORD PTR tv967[ebp]
	jmp	SHORT $LN152@knot_thick@6
$LN61@knot_thick@6:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [edi+eax]
$LN152@knot_thick@6:
	mov	DWORD PTR _v11_id$[ebp], eax
	mov	eax, DWORD PTR _web+104
	mov	esi, DWORD PTR [eax+esi+64]
	mov	eax, DWORD PTR _v11_id$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	add	eax, esi
	mov	DWORD PTR _bb$[ebp], eax

; 446  :   e_id = get_next_head_edge(e2_id); /* move out beyond v2 */

	mov	eax, DWORD PTR tv971[ebp]
	mov	eax, DWORD PTR [eax+edx]
	not	ebx
	and	ebx, 1
	mov	eax, DWORD PTR [eax+ebx*4+32]
	xor	eax, 134217728				; 08000000H

; 447  :   cc = get_coord(v22_id=get_edge_tailv(e_id)); /* coords of next vertex */

	test	eax, 134217728				; 08000000H
	je	SHORT $LN67@knot_thick@6
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR _web+636
	lea	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [edx+edi]
	jmp	SHORT $LN153@knot_thick@6
$LN67@knot_thick@6:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [edi+edx]
$LN153@knot_thick@6:
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	DWORD PTR _v22_id$[ebp], eax
	mov	eax, DWORD PTR [ecx+edx*4]
	add	eax, esi

; 448  : 
; 449  :   FOR_ALL_VERTICES(w_id)

	mov	esi, DWORD PTR _web+48
	mov	DWORD PTR _cc$[ebp], eax
	test	esi, 268435456				; 10000000H
	je	$LN16@knot_thick@6
	npad	4
$LL93@knot_thick@6:
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	add	edx, edx
	add	edx, edx
	mov	edi, DWORD PTR [edx+ecx]
	mov	eax, DWORD PTR [edi+8]
	and	eax, 1
	xor	ebx, ebx
	or	eax, ebx
	mov	DWORD PTR tv1001[ebp], edx
	je	$LN17@knot_thick@6

; 450  :   { /* here w is playing the role of v, and v that of w (or w1 or w2) */
; 451  :     REAL t,lw;
; 452  :     if (w_id == v_id) continue; /* not allowed in any of the three */

	cmp	esi, DWORD PTR _v_id$[ebp]
	je	$LN17@knot_thick@6

; 453  :     d = get_coord(w_id); lw = get_vertex_length_star(w_id);

	mov	eax, DWORD PTR _web+104
	mov	ecx, DWORD PTR _dymem
	mov	ebx, DWORD PTR [eax+ecx+64]
	push	esi
	add	ebx, edi
	call	_get_vertex_length_star
	fst	QWORD PTR _lw$89495[ebp]
	add	esp, 4

; 454  : 
; 455  :     if (w_id != v1_id && w_id != v2_id)

	cmp	esi, DWORD PTR _v1_id$[ebp]
	je	$LN137@knot_thick@6
	cmp	esi, DWORD PTR _v2_id$[ebp]
	je	SHORT $LN9@knot_thick@6

; 456  :     {
; 457  :       t = radp(d,b,c) * lw;

	mov	edx, DWORD PTR _c$[ebp]
	fstp	ST(0)
	mov	eax, DWORD PTR _b$[ebp]
	push	edx
	push	eax
	push	ebx
	call	_radp
	fld	QWORD PTR _lw$89495[ebp]

; 458  :       for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	fmul	ST(1), ST(0)
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN145@knot_thick@6
$LN11@knot_thick@6:

; 459  :         v_info->grad[0][i] -= t * (e1[i]+e2[i]); /* v as w affects len only */

	fld	QWORD PTR _e2$[ebp+eax*8]
	mov	ecx, DWORD PTR _v_info$GSCopy$[ebp]
	fadd	QWORD PTR _e1$[ebp+eax*8]
	mov	edx, DWORD PTR [ecx+1336]
	mov	ecx, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax*8]
	fmul	ST(0), ST(2)
	inc	eax
	fsubr	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN11@knot_thick@6
$LN145@knot_thick@6:

; 458  :       for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(1)
$LN9@knot_thick@6:

; 460  :     }
; 461  : 
; 462  :     /* now, when v1=b is w, v=a is w1, and v11=bb is w2 */
; 463  :     if (w_id != v1_id && w_id != v11_id)

	cmp	esi, DWORD PTR _v11_id$[ebp]
	je	SHORT $LN137@knot_thick@6

; 464  :     {
; 465  :       t = dradp(a,bb,d, v_info->grad[0], lv1*lw) / lv1; /* effect on radp() */

	fmul	QWORD PTR _lv1$[ebp]
	mov	edi, DWORD PTR _v_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [edi+1336]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _bb$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	eax
	push	ebx
	push	ecx
	push	edx
	call	_dradp
	fdiv	QWORD PTR _lv1$[ebp]

; 466  :       for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	add	esp, 24					; 00000018H
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN139@knot_thick@6
$LN7@knot_thick@6:

; 467  :         v_info->grad[0][i] -= t*e1[i]; /* finally, effects on l(v1) */

	mov	ecx, DWORD PTR [edi+1336]
	fld	QWORD PTR _e1$[ebp+eax*8]
	mov	edx, DWORD PTR [ecx]
	fmul	ST(0), ST(1)
	lea	ecx, DWORD PTR [edx+eax*8]
	inc	eax
	fsubr	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN7@knot_thick@6

; 466  :       for ( i = 0 ; i < SDIM ; i++ )

	jmp	SHORT $LN139@knot_thick@6
$LN137@knot_thick@6:
	mov	edi, DWORD PTR _v_info$GSCopy$[ebp]
$LN139@knot_thick@6:

; 460  :     }
; 461  : 
; 462  :     /* now, when v1=b is w, v=a is w1, and v11=bb is w2 */
; 463  :     if (w_id != v1_id && w_id != v11_id)

	fstp	ST(0)

; 468  :     }
; 469  : 
; 470  :     /* now, when v2=c is w, v=a is w2, and cc is w1 */
; 471  :     if (w_id != v2_id && w_id != v22_id)

	cmp	esi, DWORD PTR _v2_id$[ebp]
	je	SHORT $LN87@knot_thick@6
	cmp	esi, DWORD PTR _v22_id$[ebp]
	je	SHORT $LN87@knot_thick@6

; 472  :     {
; 473  :       t = dradp( a,cc,d, v_info->grad[0], lv2*lw ) / get_vertex_length_star(v2_id);

	fld	QWORD PTR _lw$89495[ebp]
	mov	eax, DWORD PTR [edi+1336]
	fmul	QWORD PTR _lv2$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _cc$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	ecx
	push	ebx
	push	edx
	push	eax
	call	_dradp
	fstp	QWORD PTR tv1408[ebp]
	mov	ecx, DWORD PTR _v2_id$[ebp]
	push	ecx
	call	_get_vertex_length_star
	fdivr	QWORD PTR tv1408[ebp]

; 474  :       for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	add	esp, 28					; 0000001cH
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN146@knot_thick@6
$LN3@knot_thick@6:

; 475  :         v_info->grad[0][i] -= t*e2[i];

	fld	QWORD PTR _e2$[ebp+eax*8]
	mov	edx, DWORD PTR [edi+1336]
	mov	ecx, DWORD PTR [edx]
	fmul	ST(0), ST(1)
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fsubr	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN3@knot_thick@6
$LN146@knot_thick@6:

; 474  :       for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)
$LN87@knot_thick@6:
	mov	edx, DWORD PTR tv1001[ebp]
	mov	ecx, DWORD PTR _web+12
$LN17@knot_thick@6:

; 448  : 
; 449  :   FOR_ALL_VERTICES(w_id)

	mov	edx, DWORD PTR [edx+ecx]
	mov	esi, DWORD PTR [edx]
	test	esi, 268435456				; 10000000H
	jne	$LL93@knot_thick@6
$LN16@knot_thick@6:

; 476  :     }
; 477  :   }
; 478  :   return thick * get_vertex_length_star(v_id);

	mov	eax, DWORD PTR _v_id$[ebp]
	push	eax
	call	_get_vertex_length_star
	fmul	QWORD PTR _thick$[ebp]

; 479  : } // end knot_thickness_p2_gradient()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 4
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_knot_thickness_p2_gradient ENDP
_TEXT	ENDS
PUBLIC	_knot_thickness_id
; Function compile flags: /Ogtp
;	COMDAT _knot_thickness_id
_TEXT	SEGMENT
tv316 = -20						; size = 8
_thick$ = -12						; size = 8
_a$ = -4						; size = 4
_v_id$ = 8						; size = 4
_knot_thickness_id PROC					; COMDAT

; 499  : { REAL *a = get_coord(v_id), *b, *c;

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR _v_id$[ebp]

; 500  :   REAL thick = 0.0;  /* for this vertex */

	fldz
	mov	ecx, DWORD PTR _web+12
	fstp	QWORD PTR _thick$[ebp]
	mov	edx, DWORD PTR _web+104
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	push	ebx
	mov	ebx, DWORD PTR _dymem
	add	eax, DWORD PTR [edx+ebx+64]
	push	esi

; 501  :   edge_id e_id;  /* edge to create triple */
; 502  : 
; 503  :   FOR_ALL_EDGES(e_id)

	mov	esi, DWORD PTR _web+160
	mov	DWORD PTR _a$[ebp], eax
	test	esi, 268435456				; 10000000H
	je	$LN5@knot_thick@7
	push	edi
	npad	12
$LL20@knot_thick@7:
	mov	eax, DWORD PTR _web+124
	mov	edi, esi
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	ecx, DWORD PTR [edi+eax]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	$LN6@knot_thick@7

; 504  :   { vertex_id eh_id = get_edge_headv(e_id);

	mov	eax, DWORD PTR _web+216
	mov	eax, DWORD PTR [eax+ebx+304]
	mov	edx, esi
	shr	edx, 27					; 0000001bH
	add	ecx, eax
	and	edx, 1
	je	SHORT $LN11@knot_thick@7
	mov	eax, DWORD PTR [ecx]
	jmp	SHORT $LN10@knot_thick@7
$LN11@knot_thick@7:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [ecx+eax*4]
$LN10@knot_thick@7:

; 505  :     vertex_id et_id = get_edge_tailv(e_id);

	test	edx, edx
	je	SHORT $LN15@knot_thick@7
	mov	edx, DWORD PTR _web+636
	mov	ecx, DWORD PTR [ecx+edx*4]
	jmp	SHORT $LN14@knot_thick@7
$LN15@knot_thick@7:
	mov	ecx, DWORD PTR [ecx]
$LN14@knot_thick@7:

; 506  :     if ( v_id == eh_id || v_id == et_id ) continue; /* incident */

	mov	edx, DWORD PTR _v_id$[ebp]
	cmp	edx, eax
	je	SHORT $LN6@knot_thick@7
	cmp	edx, ecx
	je	SHORT $LN6@knot_thick@7

; 507  :     b = get_coord(eh_id); c = get_coord(et_id);

	mov	edx, DWORD PTR _web+104
	mov	edx, DWORD PTR [edx+ebx+64]
	mov	ebx, DWORD PTR _web+12
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	add	ecx, edx
	add	eax, edx

; 508  :     thick += radp(a,b,c) * get_edge_length(e_id);

	push	ecx
	push	eax
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	call	_radp
	fstp	QWORD PTR tv316[ebp]
	push	esi
	call	_get_edge_length
	fmul	QWORD PTR tv316[ebp]
	mov	ebx, DWORD PTR _dymem
	add	esp, 16					; 00000010H
	fadd	QWORD PTR _thick$[ebp]
	fstp	QWORD PTR _thick$[ebp]
$LN6@knot_thick@7:

; 501  :   edge_id e_id;  /* edge to create triple */
; 502  : 
; 503  :   FOR_ALL_EDGES(e_id)

	mov	ecx, DWORD PTR _web+124
	mov	edx, DWORD PTR [edi+ecx]
	mov	esi, DWORD PTR [edx]
	test	esi, 268435456				; 10000000H
	jne	$LL20@knot_thick@7
	pop	edi
$LN5@knot_thick@7:

; 509  :   }
; 510  :   return thick * get_vertex_length_star(v_id); /* this is rp(v,eh,et)*l(e)*l(v) */

	mov	eax, DWORD PTR _v_id$[ebp]
	push	eax
	call	_get_vertex_length_star
	fmul	QWORD PTR _thick$[ebp]
	add	esp, 4
	pop	esi
	pop	ebx

; 511  : } // end knot_thickness_id()

	mov	esp, ebp
	pop	ebp
	ret	0
_knot_thickness_id ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_knot_thickness_p_gradient
; Function compile flags: /Ogtp
;	COMDAT _knot_thickness_p_gradient
_TEXT	SEGMENT
tv210 = -232						; size = 8
tv136 = -224						; size = 8
tv611 = -220						; size = 4
tv1105 = -216						; size = 8
tv1103 = -216						; size = 8
_l2$ = -208						; size = 8
_l1$ = -200						; size = 8
_c$ = -192						; size = 4
_thick$ = -188						; size = 8
tv1101 = -180						; size = 8
tv627 = -180						; size = 8
tv619 = -180						; size = 8
tv472 = -180						; size = 8
tv134 = -180						; size = 8
tv824 = -176						; size = 4
tv691 = -172						; size = 4
tv688 = -172						; size = 4
_b$ = -172						; size = 4
_i$ = -168						; size = 4
_a$ = -164						; size = 4
_v1_id$ = -160						; size = 4
_w_id$ = -156						; size = 4
_e_id$ = -156						; size = 4
_v2_id$ = -152						; size = 4
_temp$ = -148						; size = 48
_e1$ = -100						; size = 48
_e2$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_v_info$ = 8						; size = 4
_knot_thickness_p_gradient PROC				; COMDAT

; 523  : { REAL *a , *b, *c, *d;

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 524  :   REAL temp[MAXCOORD], e1[MAXCOORD], e2[MAXCOORD], l1, l2;
; 525  :   REAL thick = 0.0;  /* thickness at this vertex */
; 526  :   edge_id e_id;  /* edge to create triple */
; 527  :   vertex_id w_id, v1_id, v2_id;  /* vertex to create triple */
; 528  :   int i;
; 529  : 
; 530  :   a = get_coord(v_info->id);

	mov	ecx, DWORD PTR _web+12
	fldz
	mov	edx, DWORD PTR _dymem
	fstp	QWORD PTR _thick$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _v_info$[ebp]
	mov	eax, DWORD PTR [ebx]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _web+104
	mov	ecx, DWORD PTR [ecx+edx+64]
	push	esi

; 531  :   e_id = get_vertex_edge(v_info->id);

	mov	esi, DWORD PTR [eax+28]
	add	ecx, eax

; 532  :   v1_id=get_edge_headv(e_id);

	mov	eax, esi
	shr	eax, 27					; 0000001bH
	and	eax, 1
	push	edi
	mov	DWORD PTR _a$[ebp], ecx
	mov	DWORD PTR tv688[ebp], eax
	mov	edi, esi
	je	SHORT $LN36@knot_thick@8
	mov	eax, DWORD PTR _web+124
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	ecx, DWORD PTR [edi+eax]
	mov	eax, DWORD PTR _web+216
	mov	edx, DWORD PTR [eax+edx+304]
	mov	eax, DWORD PTR [ecx+edx]
	jmp	SHORT $LN76@knot_thick@8
$LN36@knot_thick@8:
	mov	ecx, DWORD PTR _web+124
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	eax, DWORD PTR [edi+ecx]
	mov	ecx, DWORD PTR _web+216
	add	eax, DWORD PTR [ecx+edx+304]
	mov	edx, DWORD PTR _web+636
	mov	eax, DWORD PTR [eax+edx*4]
$LN76@knot_thick@8:

; 533  :   get_edge_side(e_id,e1); l1 = get_edge_length(e_id);

	lea	ecx, DWORD PTR _e1$[ebp]
	push	ecx
	push	esi
	mov	DWORD PTR _v1_id$[ebp], eax
	call	_get_edge_side
	push	esi
	call	_get_edge_length
	fstp	QWORD PTR _l1$[ebp]

; 534  :   e_id = get_next_tail_edge(e_id);  /* assuming <= two edges per vertex */

	mov	eax, DWORD PTR _web+124
	mov	edx, DWORD PTR [edi+eax]
	mov	ecx, DWORD PTR tv688[ebp]
	mov	esi, DWORD PTR [edx+ecx*4+32]
	add	esp, 12					; 0000000cH

; 535  :   v2_id=get_edge_headv(e_id); /* v1 and v2 are two nbrs of v */

	test	esi, 134217728				; 08000000H
	je	SHORT $LN42@knot_thick@8
	mov	ecx, DWORD PTR _web+216
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edx+304]
	mov	edx, DWORD PTR [eax+ecx]
	mov	DWORD PTR _v2_id$[ebp], edx
	jmp	SHORT $LN41@knot_thick@8
$LN42@knot_thick@8:
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _v2_id$[ebp], ecx
$LN41@knot_thick@8:

; 536  :   get_edge_side(e_id,e2); l2 = get_edge_length(e_id);

	lea	edx, DWORD PTR _e2$[ebp]
	push	edx
	push	esi
	call	_get_edge_side
	push	esi
	call	_get_edge_length
	fstp	QWORD PTR _l2$[ebp]

; 537  :   if (v1_id == v2_id) for (i=0; i<SDIM; i++) e2[i] = 0.; /* v val. 1, no e2 */

	mov	eax, DWORD PTR _v1_id$[ebp]
	mov	edx, DWORD PTR _web+616
	add	esp, 12					; 0000000cH
	cmp	eax, DWORD PTR _v2_id$[ebp]
	jne	SHORT $LN70@knot_thick@8
	test	edx, edx
	jle	SHORT $LN28@knot_thick@8
	mov	ecx, edx
	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	xor	eax, eax
	lea	edi, DWORD PTR _e2$[ebp]
	rep stosd
$LN70@knot_thick@8:

; 538  : 
; 539  :   for ( i = 0 ; i < SDIM ; i++ ) temp[i] = 0.;

	test	edx, edx
	jle	SHORT $LN28@knot_thick@8
	mov	ecx, edx
	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	xor	eax, eax
	lea	edi, DWORD PTR _temp$[ebp]
	rep stosd
$LN28@knot_thick@8:

; 540  :   FOR_ALL_EDGES(e_id)

	mov	edi, DWORD PTR _web+160
	mov	DWORD PTR _e_id$[ebp], edi
	test	edi, 268435456				; 10000000H
	je	$LN23@knot_thick@8
	jmp	SHORT $LN25@knot_thick@8
	npad	5
$LL74@knot_thick@8:
	mov	edi, DWORD PTR _e_id$[ebp]
$LN25@knot_thick@8:
	mov	ecx, DWORD PTR _web+124
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	add	edx, edx
	add	edx, edx
	mov	ecx, DWORD PTR [edx+ecx]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 1
	xor	esi, esi
	or	eax, esi
	mov	DWORD PTR tv691[ebp], edx
	je	$LN24@knot_thick@8

; 541  :   { vertex_id eh_id = get_edge_headv(e_id);

	mov	eax, DWORD PTR _web+216
	mov	esi, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+esi+304]
	shr	edi, 27					; 0000001bH
	add	ecx, eax
	and	edi, 1
	je	SHORT $LN46@knot_thick@8
	mov	eax, DWORD PTR [ecx]
	jmp	SHORT $LN45@knot_thick@8
$LN46@knot_thick@8:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [ecx+eax*4]
$LN45@knot_thick@8:

; 542  :     vertex_id et_id = get_edge_tailv(e_id);

	test	edi, edi
	je	SHORT $LN50@knot_thick@8
	mov	esi, DWORD PTR _web+636
	mov	ecx, DWORD PTR [ecx+esi*4]
	jmp	SHORT $LN49@knot_thick@8
$LN50@knot_thick@8:
	mov	ecx, DWORD PTR [ecx]
$LN49@knot_thick@8:

; 543  :     if ( v_info->id == eh_id || v_info->id == et_id ) continue; /* incident */

	mov	esi, DWORD PTR [ebx]
	cmp	esi, eax
	je	SHORT $LN24@knot_thick@8
	cmp	esi, ecx
	je	SHORT $LN24@knot_thick@8

; 544  :     b = get_coord(eh_id); c = get_coord(et_id);

	mov	esi, DWORD PTR _dymem
	mov	edx, DWORD PTR _web+104
	mov	edx, DWORD PTR [edx+esi+64]
	mov	esi, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [esi+eax*4]

; 545  :     thick += dradp(a,b,c,temp, get_edge_length(e_id));

	mov	eax, DWORD PTR _e_id$[ebp]
	and	ecx, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+ecx*4]
	push	eax
	add	edi, edx
	add	esi, edx
	call	_get_edge_length
	mov	edx, DWORD PTR _a$[ebp]
	push	ecx
	fstp	QWORD PTR [esp]
	lea	ecx, DWORD PTR _temp$[ebp]
	push	ecx
	push	esi
	push	edi
	push	edx
	call	_dradp
	fadd	QWORD PTR _thick$[ebp]
	mov	edx, DWORD PTR tv691[ebp]
	add	esp, 24					; 00000018H
	fstp	QWORD PTR _thick$[ebp]
$LN24@knot_thick@8:

; 540  :   FOR_ALL_EDGES(e_id)

	mov	eax, DWORD PTR _web+124
	mov	ecx, DWORD PTR [edx+eax]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR _e_id$[ebp], eax
	test	eax, 268435456				; 10000000H
	jne	$LL74@knot_thick@8
	mov	edx, DWORD PTR _web+616
$LN23@knot_thick@8:

; 546  :   }     /* now temp is sum_e l(e)*d_v(rp(v,eh,et)) */
; 547  :   for ( i = 0 ; i < SDIM ; i++ )

	xor	edi, edi
	test	edx, edx
	jle	SHORT $LN16@knot_thick@8
$LL18@knot_thick@8:

; 548  :     v_info->grad[0][i] += (temp[i] * get_vertex_length_star(v_info->id) -
; 549  :                              thick * (e1[i]/l1 + e2[i]/l2)/2);

	mov	edx, DWORD PTR [ebx+1336]
	mov	ecx, DWORD PTR [ebx]
	mov	eax, DWORD PTR [edx]
	push	ecx
	lea	esi, DWORD PTR [eax+edi*8]
	call	_get_vertex_length_star
	fmul	QWORD PTR _temp$[ebp+edi*8]
	fld	QWORD PTR _e2$[ebp+edi*8]
	inc	edi
	fdiv	QWORD PTR _l2$[ebp]
	add	esp, 4
	fld	QWORD PTR _e1$[ebp+edi*8-8]
	fdiv	QWORD PTR _l1$[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR _thick$[ebp]
	fmul	QWORD PTR __real@3fe0000000000000
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR [esi]
	fstp	QWORD PTR [esi]
	cmp	edi, DWORD PTR _web+616
	jl	SHORT $LL18@knot_thick@8
$LN16@knot_thick@8:

; 550  :     /* so far we should have the gradient of knot_thickness_p(v_info) */
; 551  :     /* which is: d_v(l(v))*thick + l(v)*temp */
; 552  :   thick *= get_vertex_length_star(v_info->id);

	mov	edx, DWORD PTR [ebx]
	push	edx
	call	_get_vertex_length_star
	fmul	QWORD PTR _thick$[ebp]

; 553  : 
; 554  :     /* Next we consider the triple v1,v,v2,
; 555  :        which enters into thickness at v1 and v2 */
; 556  :   b = get_coord(v1_id); c = get_coord(v2_id);

	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR _web+104
	mov	eax, DWORD PTR [eax+ecx+64]
	fstp	QWORD PTR _thick$[ebp]
	mov	edx, DWORD PTR _v1_id$[ebp]
	mov	ecx, DWORD PTR _web+12
	and	edx, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ecx+edx*4]
	mov	edx, DWORD PTR _v2_id$[ebp]
	and	edx, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ecx+edx*4]
	add	edi, eax
	add	esi, eax

; 557  :   if (v1_id != v2_id) /* skip if v valence 1 */

	mov	eax, DWORD PTR _v1_id$[ebp]
	add	esp, 4
	mov	DWORD PTR _b$[ebp], edi
	mov	DWORD PTR _c$[ebp], esi
	cmp	eax, DWORD PTR _v2_id$[ebp]
	je	$LN68@knot_thick@8

; 558  :   {
; 559  :     dradp(a,b,c, v_info->grad[0],       /* triples (v,v1,v2), (v,v2,v1) */
; 560  :         l1*get_vertex_length_star(v2_id) + l2*get_vertex_length_star(v1_id));

	push	eax
	call	_get_vertex_length_star
	fmul	QWORD PTR _l2$[ebp]
	mov	eax, DWORD PTR _v2_id$[ebp]
	push	eax
	fstp	QWORD PTR tv472[ebp]
	call	_get_vertex_length_star
	fmul	QWORD PTR _l1$[ebp]
	mov	ecx, DWORD PTR [ebx+1336]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _a$[ebp]
	fadd	QWORD PTR tv472[ebp]
	fstp	QWORD PTR [esp]
	push	edx
	push	esi
	push	edi
	push	eax
	call	_dradp
	fstp	ST(0)
	add	esp, 24					; 00000018H

; 561  : 	/* this term gets d_v rp(a,b,c) times appropriate lengths */
; 562  :     for ( i = 0 ; i < SDIM ; i++ )

	cmp	DWORD PTR _web+616, 0
	mov	DWORD PTR _i$[ebp], 0
	jle	$LN68@knot_thick@8
	npad	6
$LL73@knot_thick@8:
	mov	esi, DWORD PTR _i$[ebp]

; 563  :     { v_info->grad[0][i] -= radp(a,b,c) *  /* - is from orientation of ei */
; 564  : 			  ( get_vertex_length_star(v2_id)*e1[i]/l1 +
; 565  : 			    get_vertex_length_star(v1_id)*e2[i]/l2  );

	mov	edx, DWORD PTR _v1_id$[ebp]
	mov	ecx, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [ecx]
	add	esi, esi
	add	esi, esi
	push	edx
	add	esi, esi
	call	_get_vertex_length_star
	fmul	QWORD PTR _e2$[ebp+esi]
	mov	eax, DWORD PTR _v2_id$[ebp]
	push	eax
	fdiv	QWORD PTR _l2$[ebp]
	fstp	QWORD PTR tv627[ebp]
	call	_get_vertex_length_star
	fmul	QWORD PTR _e1$[ebp+esi]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	fdiv	QWORD PTR _l1$[ebp]
	push	ecx
	push	edx
	push	eax
	fadd	QWORD PTR tv627[ebp]
	fstp	QWORD PTR tv1101[ebp]
	call	_radp
	fmul	QWORD PTR tv1101[ebp]
	mov	ecx, DWORD PTR [ebx+1336]
	mov	edx, DWORD PTR [ecx]

; 566  : 	/* term above accounts for changing lengths at v as l(e) factor */
; 567  :       v_info->grad[0][i] -=
; 568  :        (  knot_thickness_id(v1_id)*e1[i]/l1/get_vertex_length_star(v1_id)/2
; 569  :         + knot_thickness_id(v2_id)*e2[i]/l2/get_vertex_length_star(v2_id)/2 );

	mov	ecx, DWORD PTR _v2_id$[ebp]
	fsubr	QWORD PTR [edi+esi]
	push	ecx
	fstp	QWORD PTR [esi+edx]
	mov	eax, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [eax]
	call	_knot_thickness_id
	fmul	QWORD PTR _e2$[ebp+esi]
	mov	edx, DWORD PTR _v2_id$[ebp]
	push	edx
	fdiv	QWORD PTR _l2$[ebp]
	fstp	QWORD PTR tv134[ebp]
	call	_get_vertex_length_star
	fdivr	QWORD PTR tv134[ebp]
	mov	eax, DWORD PTR _v1_id$[ebp]
	push	eax
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR tv136[ebp]
	call	_knot_thickness_id
	fmul	QWORD PTR _e1$[ebp+esi]
	mov	ecx, DWORD PTR _v1_id$[ebp]
	push	ecx
	fdiv	QWORD PTR _l1$[ebp]
	fstp	QWORD PTR tv619[ebp]
	call	_get_vertex_length_star
	fdivr	QWORD PTR tv619[ebp]
	mov	edx, DWORD PTR [ebx+1336]
	mov	eax, DWORD PTR [edx]
	add	esp, 36					; 00000024H
	fmul	QWORD PTR __real@3fe0000000000000
	fadd	QWORD PTR tv136[ebp]
	fsubr	QWORD PTR [edi+esi]
	fstp	QWORD PTR [esi+eax]
	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _web+616
	jl	$LL73@knot_thick@8
$LN68@knot_thick@8:

; 570  : 	/* this is effect of v on l(v1) and l(v2) in energy at v1 and v2 */
; 571  :     }
; 572  :   }
; 573  : 
; 574  :   FOR_ALL_VERTICES(w_id)

	mov	edx, DWORD PTR _web+48
	mov	DWORD PTR _w_id$[ebp], edx
	test	edx, 268435456				; 10000000H
	je	$LN67@knot_thick@8
	jmp	SHORT $LN11@knot_thick@8
$LL71@knot_thick@8:
	mov	edx, DWORD PTR _w_id$[ebp]
$LN11@knot_thick@8:
	mov	ecx, DWORD PTR _web+12
	mov	esi, edx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	ecx, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	mov	DWORD PTR tv824[ebp], esi
	je	$LN10@knot_thick@8

; 575  :   { if (w_id == v_info->id || w_id == v1_id || w_id == v2_id) continue;

	cmp	edx, DWORD PTR [ebx]
	je	$LN10@knot_thick@8
	cmp	edx, DWORD PTR _v1_id$[ebp]
	je	$LN10@knot_thick@8
	cmp	edx, DWORD PTR _v2_id$[ebp]
	je	$LN10@knot_thick@8

; 576  :     d = get_coord(w_id);

	mov	eax, DWORD PTR _web+104
	mov	edi, DWORD PTR _dymem
	mov	edi, DWORD PTR [eax+edi+64]

; 577  :     dradp(a,b,d, v_info->grad[0], l1*get_vertex_length_star(w_id));

	push	edx
	add	edi, ecx
	call	_get_vertex_length_star
	fmul	QWORD PTR _l1$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [ebx+1336]
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _a$[ebp]
	push	edx
	push	edi
	push	eax
	push	ecx
	call	_dradp
	fstp	ST(0)

; 578  :     if (v1_id != v2_id) dradp(a,c,d, v_info->grad[0], l2*get_vertex_length_star(w_id));

	mov	edx, DWORD PTR _v2_id$[ebp]
	add	esp, 24					; 00000018H
	cmp	DWORD PTR _v1_id$[ebp], edx
	je	SHORT $LN4@knot_thick@8
	mov	eax, DWORD PTR _w_id$[ebp]
	push	eax
	call	_get_vertex_length_star
	fmul	QWORD PTR _l2$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [ebx+1336]
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _a$[ebp]
	push	edx
	push	edi
	push	eax
	push	ecx
	call	_dradp
	fstp	ST(0)
	add	esp, 24					; 00000018H
$LN4@knot_thick@8:

; 579  : 	/* these are changes d_v (rp(w,ei)) times lengths, i=1,2 */
; 580  :     for ( i = 0 ; i < SDIM ; i++ )

	cmp	DWORD PTR _web+616, 0
	mov	DWORD PTR _i$[ebp], 0
	jle	$LN10@knot_thick@8
$LL72@knot_thick@8:
	mov	esi, DWORD PTR _i$[ebp]

; 581  :       v_info->grad[0][i] -= (  radp(a,b,d) * get_vertex_length_star(w_id) * e1[i]/l1
; 582  :                              + radp(a,c,d) * get_vertex_length_star(w_id) * e2[i]/l2 );

	mov	edx, DWORD PTR [ebx+1336]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _a$[ebp]
	add	esi, esi
	add	esi, esi
	add	esi, esi
	add	eax, esi
	mov	DWORD PTR tv611[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	push	edi
	push	eax
	push	ecx
	call	_radp
	fstp	QWORD PTR tv1103[ebp]
	mov	edx, DWORD PTR _w_id$[ebp]
	push	edx
	call	_get_vertex_length_star
	fmul	QWORD PTR tv1103[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	fmul	QWORD PTR _e2$[ebp+esi]
	push	edi
	push	eax
	push	ecx
	fdiv	QWORD PTR _l2$[ebp]
	fstp	QWORD PTR tv210[ebp]
	call	_radp
	fstp	QWORD PTR tv1105[ebp]
	mov	edx, DWORD PTR _w_id$[ebp]
	push	edx
	call	_get_vertex_length_star
	fmul	QWORD PTR tv1105[ebp]
	mov	eax, DWORD PTR tv611[ebp]
	mov	ecx, DWORD PTR [ebx+1336]
	fmul	QWORD PTR _e1$[ebp+esi]
	mov	edx, DWORD PTR [ecx]
	add	esp, 32					; 00000020H
	fdiv	QWORD PTR _l1$[ebp]
	fadd	QWORD PTR tv210[ebp]
	fsubr	QWORD PTR [eax]
	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	fstp	QWORD PTR [esi+edx]
	cmp	eax, DWORD PTR _web+616
	jl	$LL72@knot_thick@8

; 579  : 	/* these are changes d_v (rp(w,ei)) times lengths, i=1,2 */
; 580  :     for ( i = 0 ; i < SDIM ; i++ )

	mov	esi, DWORD PTR tv824[ebp]
$LN10@knot_thick@8:

; 570  : 	/* this is effect of v on l(v1) and l(v2) in energy at v1 and v2 */
; 571  :     }
; 572  :   }
; 573  : 
; 574  :   FOR_ALL_VERTICES(w_id)

	mov	eax, DWORD PTR _web+12
	mov	ecx, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR _w_id$[ebp], eax
	test	eax, 268435456				; 10000000H
	jne	$LL71@knot_thick@8
$LN67@knot_thick@8:

; 583  :         /* v's effect on l(ei), i=1,2 */
; 584  :   }
; 585  :   return thick;
; 586  : } // end knot_thickness_p_gradient()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _thick$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_knot_thickness_p_gradient ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_knot_energy
; Function compile flags: /Ogtp
;	COMDAT _knot_energy
_TEXT	SEGMENT
_vcharge$ = -80						; size = 8
_energy$ = -72						; size = 8
_charges$89665 = -64					; size = 8
_x$ = -56						; size = 4
_d$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_v_info$ = 8						; size = 4
_knot_energy PROC					; COMDAT

; 601  : { REAL *x = get_coord(v_info->id);

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _v_info$[ebp]

; 602  :   REAL energy = 0.0;  /* for this vertex */

	fldz
	mov	eax, DWORD PTR [eax]
	fst	QWORD PTR _energy$[ebp]
	mov	edx, DWORD PTR _web+12
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _dymem
	push	ebx
	push	esi
	mov	esi, DWORD PTR _web+104
	add	ecx, DWORD PTR [esi+edx+64]
	push	edi

; 603  :   vertex_id v_id;  /* other vertex */
; 604  :   int i;
; 605  :   REAL d[MAXCOORD]; /* difference vector between vertices */
; 606  :   REAL rr,p;
; 607  :   REAL vcharge = charge_attr >= 0 ? 
; 608  :         *((REAL*)get_extra(v_info->id,charge_attr)) : 1.;

	mov	edi, DWORD PTR _charge_attr
	mov	DWORD PTR _x$[ebp], ecx
	test	edi, edi
	js	SHORT $LN22@knot_energ
	mov	ecx, eax
	shr	ecx, 29					; 0000001dH
	imul	ecx, 112				; 00000070H
	mov	esi, DWORD PTR _web[ecx+12]
	mov	ecx, DWORD PTR _web[ecx+104]
	mov	ebx, edi
	imul	ebx, 240				; 000000f0H
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	add	ecx, ebx
	mov	ecx, DWORD PTR [ecx+edx+64]
	fld	QWORD PTR [eax+ecx]
	jmp	SHORT $LN84@knot_energ
$LN22@knot_energ:
	fld1
$LN84@knot_energ:

; 609  : 
; 610  :   FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR _web+48
	fstp	QWORD PTR _vcharge$[ebp]
	test	ecx, 268435456				; 10000000H
	je	$LN17@knot_energ
$LN44@knot_energ:
	mov	edx, DWORD PTR _web+12
	mov	ebx, ecx
	and	ebx, 134217727				; 07ffffffH
	add	ebx, ebx
	add	ebx, ebx
	mov	edx, DWORD PTR [ebx+edx]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	xor	esi, esi
	or	eax, esi
	je	$LN18@knot_energ

; 611  :   { REAL *y = get_coord(v_id);

	mov	eax, DWORD PTR _web+104
	mov	esi, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+esi+64]
	add	eax, edx

; 612  :     REAL charges;
; 613  :     if ( v_id <= v_info->id ) continue; /* each pair once */

	mov	edx, DWORD PTR _v_info$[ebp]
	cmp	ecx, DWORD PTR [edx]
	jbe	$LN18@knot_energ
	fstp	ST(0)

; 614  :     charges = charge_attr >= 0 ? 
; 615  :                   *((REAL*)get_extra(v_id,charge_attr))*vcharge : 1.;

	test	edi, edi
	js	SHORT $LN24@knot_energ
	shr	ecx, 29					; 0000001dH
	imul	edi, 240				; 000000f0H
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _web[ecx+104]
	mov	ecx, DWORD PTR _web[ecx+12]
	mov	ecx, DWORD PTR [ecx+ebx]
	add	edx, edi
	mov	edx, DWORD PTR [edx+esi+64]
	fld	QWORD PTR [edx+ecx]
	fmul	QWORD PTR _vcharge$[ebp]
	jmp	SHORT $LN85@knot_energ
$LN24@knot_energ:
	fld1
$LN85@knot_energ:

; 616  :     for ( i = 0 ; i < SDIM ; i++ ) d[i] = x[i] - y[i];

	mov	edi, DWORD PTR _web+616
	fstp	QWORD PTR _charges$89665[ebp]
	test	edi, edi
	jle	SHORT $LN11@knot_energ
	mov	edx, DWORD PTR _x$[ebp]
	mov	ecx, eax
	neg	ecx
	add	edx, ecx
	lea	esi, DWORD PTR _d$[ebp+ecx]
	mov	ecx, edi
	npad	1
$LL13@knot_energ:
	fld	QWORD PTR [edx+eax]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [esi+eax-8]
	jne	SHORT $LL13@knot_energ
$LN11@knot_energ:

; 617  :     rr = SDIM_dot(d,d);

	lea	eax, DWORD PTR _d$[ebp]
	push	edi
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot

; 618  :     ke_pow(rr,p);

	mov	eax, DWORD PTR _ke_power_flag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jle	$LN86@knot_energ
	mov	ecx, DWORD PTR _ke_power_i
	fld	ST(0)
	mov	edx, 1
	cmp	ecx, edx
	jle	SHORT $LN67@knot_energ
	lea	eax, DWORD PTR [ecx-1]
	cmp	eax, 8
	jl	SHORT $LC39@knot_energ
	lea	eax, DWORD PTR [ecx-9]
	shr	eax, 3
	inc	eax
	lea	edx, DWORD PTR [eax*8+1]
$LN40@knot_energ:
	dec	eax
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	jne	SHORT $LN40@knot_energ
$LC39@knot_energ:
	cmp	edx, ecx
	jge	SHORT $LN67@knot_energ
	sub	ecx, edx
$LC9@knot_energ:
	dec	ecx
	fmul	ST(0), ST(1)
	jne	SHORT $LC9@knot_energ
$LN67@knot_energ:
	fstp	ST(1)
$LN1@knot_energ:

; 619  :     energy += charges/p;  /* inverse power potential */

	fdivr	QWORD PTR _charges$89665[ebp]
	mov	edi, DWORD PTR _charge_attr
	fadd	QWORD PTR _energy$[ebp]
	fst	QWORD PTR _energy$[ebp]
$LN18@knot_energ:

; 609  : 
; 610  :   FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR _web+12
	mov	edx, DWORD PTR [ebx+ecx]
	mov	ecx, DWORD PTR [edx]
	test	ecx, 268435456				; 10000000H
	jne	$LN44@knot_energ
$LN17@knot_energ:

; 620  :   }
; 621  :   return 2*energy; /* since each pair once */
; 622  : } // end knot_energy()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fadd	ST(0), ST(0)
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN86@knot_energ:

; 618  :     ke_pow(rr,p);

	jns	SHORT $LN5@knot_energ
	mov	ecx, DWORD PTR _ke_power_l
	xor	edx, edx
	cmp	ecx, 8
	jl	SHORT $LC42@knot_energ
	lea	eax, DWORD PTR [ecx-8]
	shr	eax, 3
	inc	eax
	lea	edx, DWORD PTR [eax*8]
$LN43@knot_energ:
	dec	eax
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	jne	SHORT $LN43@knot_energ
$LC42@knot_energ:
	cmp	edx, ecx
	jge	SHORT $LN1@knot_energ
	sub	ecx, edx
$LC4@knot_energ:
	dec	ecx
	fmul	ST(0), ST(0)
	jne	SHORT $LC4@knot_energ
	jmp	SHORT $LN1@knot_energ
$LN5@knot_energ:
	fld	QWORD PTR _ke_power
	call	__CIpow
	jmp	$LN1@knot_energ
_knot_energy ENDP
_TEXT	ENDS
PUBLIC	_v_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_knot_energy_gradient
; Function compile flags: /Ogtp
;	COMDAT _knot_energy_gradient
_TEXT	SEGMENT
_rr$ = -96						; size = 8
_energy$ = -88						; size = 8
_charges$89714 = -80					; size = 8
_vcharge$ = -72						; size = 8
_x$ = -64						; size = 4
_v_info$GSCopy$ = -60					; size = 4
tv359 = -56						; size = 4
_d$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_v_info$ = 8						; size = 4
_knot_energy_gradient PROC				; COMDAT

; 638  : { REAL *x = get_coord(v_info->id);

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _v_info$[ebp]

; 639  :   REAL energy = 0.0;  /* for this vertex */

	fldz
	mov	edx, DWORD PTR _web+12
	fst	QWORD PTR _energy$[ebp]
	mov	DWORD PTR _v_info$GSCopy$[ebp], eax
	mov	eax, DWORD PTR [eax]
	push	ebx
	mov	ebx, DWORD PTR _dymem
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _web+104
	add	ecx, DWORD PTR [edx+ebx+64]
	push	esi
	push	edi

; 640  :   vertex_id v_id;
; 641  :   int i;
; 642  :   REAL d[MAXCOORD]; /* difference vector between vertices */
; 643  :   REAL rr,p,fact;
; 644  :   REAL vcharge = charge_attr >= 0 ? 
; 645  :         *((REAL*)get_extra(v_info->id,charge_attr)) : 1.;

	mov	edi, DWORD PTR _charge_attr
	mov	DWORD PTR _x$[ebp], ecx
	test	edi, edi
	js	SHORT $LN25@knot_energ@2
	mov	ecx, eax
	shr	ecx, 29					; 0000001dH
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _web[ecx+12]
	mov	ecx, DWORD PTR _web[ecx+104]
	mov	esi, edi
	imul	esi, 240				; 000000f0H
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
	add	ecx, esi
	mov	eax, DWORD PTR [ecx+ebx+64]
	fld	QWORD PTR [edx+eax]
	jmp	SHORT $LN100@knot_energ@2
$LN25@knot_energ@2:
	fld1
$LN100@knot_energ@2:

; 646  : 
; 647  :   FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR _web+48
	fstp	QWORD PTR _vcharge$[ebp]
	test	ecx, 268435456				; 10000000H
	je	$LN20@knot_energ@2
$LN51@knot_energ@2:
	mov	edx, DWORD PTR _web+12
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR tv359[ebp], eax
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	xor	esi, esi
	or	eax, esi
	je	$LN21@knot_energ@2

; 648  :   { REAL *y = get_coord(v_id);

	mov	eax, DWORD PTR _web+104
	mov	eax, DWORD PTR [eax+ebx+64]

; 649  :     REAL charges;
; 650  :     if ( equal_id(v_info->id,v_id) ) continue;

	mov	esi, DWORD PTR _v_info$GSCopy$[ebp]
	add	eax, edx
	cmp	DWORD PTR [esi], ecx
	je	$LN21@knot_energ@2
	fstp	ST(0)

; 651  :     charges = charge_attr >= 0 ? 
; 652  :               *((REAL*)get_extra(v_id,charge_attr))*vcharge : 1.;

	test	edi, edi
	js	SHORT $LN27@knot_energ@2
	shr	ecx, 29					; 0000001dH
	imul	edi, 240				; 000000f0H
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _web[ecx+104]
	mov	ecx, DWORD PTR _web[ecx+12]
	add	edx, edi
	mov	edi, DWORD PTR tv359[ebp]
	mov	edx, DWORD PTR [edx+ebx+64]
	mov	ecx, DWORD PTR [ecx+edi]
	fld	QWORD PTR [edx+ecx]
	fmul	QWORD PTR _vcharge$[ebp]
	jmp	SHORT $LN101@knot_energ@2
$LN27@knot_energ@2:
	fld1
$LN101@knot_energ@2:

; 653  :     for ( i = 0 ; i < SDIM ; i++ ) d[i] = x[i] - y[i];

	mov	edi, DWORD PTR _web+616
	fstp	QWORD PTR _charges$89714[ebp]
	test	edi, edi
	jle	SHORT $LN14@knot_energ@2
	mov	edx, DWORD PTR _x$[ebp]
	mov	ecx, eax
	neg	ecx
	add	edx, ecx
	lea	esi, DWORD PTR _d$[ebp+ecx]
	mov	ecx, edi
$LL16@knot_energ@2:
	fld	QWORD PTR [edx+eax]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [esi+eax-8]
	jne	SHORT $LL16@knot_energ@2
	mov	esi, DWORD PTR _v_info$GSCopy$[ebp]
$LN14@knot_energ@2:

; 654  :     rr = SDIM_dot(d,d);

	lea	eax, DWORD PTR _d$[ebp]
	push	edi
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fst	QWORD PTR _rr$[ebp]

; 655  :     ke_pow(rr,p);

	mov	eax, DWORD PTR _ke_power_flag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jle	SHORT $LN102@knot_energ@2
	mov	ecx, DWORD PTR _ke_power_i
	fld	ST(0)
	mov	edx, 1
	cmp	ecx, edx
	jle	$LN52@knot_energ@2
	lea	eax, DWORD PTR [ecx-1]
	cmp	eax, 8
	jl	SHORT $LC44@knot_energ@2
	lea	eax, DWORD PTR [ecx-9]
	shr	eax, 3
	inc	eax
	lea	edx, DWORD PTR [eax*8+1]
$LN45@knot_energ@2:
	dec	eax
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	jne	SHORT $LN45@knot_energ@2
$LC44@knot_energ@2:
	cmp	edx, ecx
	jge	SHORT $LN52@knot_energ@2
	sub	ecx, edx
$LC12@knot_energ@2:
	dec	ecx
	fmul	ST(0), ST(1)
	jne	SHORT $LC12@knot_energ@2
	jmp	SHORT $LN52@knot_energ@2
$LN102@knot_energ@2:
	jns	SHORT $LN8@knot_energ@2
	mov	ecx, DWORD PTR _ke_power_l
	fld	ST(0)
	xor	edx, edx
	cmp	ecx, 8
	jl	SHORT $LC47@knot_energ@2
	lea	eax, DWORD PTR [ecx-8]
	shr	eax, 3
	inc	eax
	lea	edx, DWORD PTR [eax*8]
$LN48@knot_energ@2:
	dec	eax
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	jne	SHORT $LN48@knot_energ@2
$LC47@knot_energ@2:
	cmp	edx, ecx
	jge	SHORT $LN52@knot_energ@2
	sub	ecx, edx
$LC7@knot_energ@2:
	dec	ecx
	fmul	ST(0), ST(0)
	jne	SHORT $LC7@knot_energ@2
	jmp	SHORT $LN52@knot_energ@2
$LN8@knot_energ@2:
	fld	QWORD PTR _ke_power
	call	__CIpow
	fld	QWORD PTR _rr$[ebp]
	fxch	ST(1)
$LN52@knot_energ@2:

; 656  :     energy += charges/p;

	fld	QWORD PTR _charges$89714[ebp]

; 657  :     fact = 2*ke_power/(p*rr);
; 658  :     for ( i = 0 ; i < SDIM ; i++ ) 

	xor	eax, eax
	fld	ST(0)
	fdiv	ST(0), ST(2)
	fadd	QWORD PTR _energy$[ebp]
	fst	QWORD PTR _energy$[ebp]
	fld	QWORD PTR _ke_power
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fxch	ST(4)
	fmulp	ST(5), ST(0)
	fdivrp	ST(4), ST(0)
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN82@knot_energ@2
	fxch	ST(1)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmulp	ST(2), ST(0)
$LN3@knot_energ@2:

; 659  :       v_info->grad[0][i] -= 2*charges*fact*d[i];

	mov	ecx, DWORD PTR [esi+1336]
	fld	QWORD PTR _d$[ebp+eax*8]
	mov	edx, DWORD PTR [ecx]
	fmul	ST(0), ST(2)
	lea	ecx, DWORD PTR [edx+eax*8]
	inc	eax
	fsubr	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN3@knot_energ@2

; 657  :     fact = 2*ke_power/(p*rr);
; 658  :     for ( i = 0 ; i < SDIM ; i++ ) 

	fstp	ST(1)
	jmp	SHORT $LN103@knot_energ@2
$LN82@knot_energ@2:
	fstp	ST(3)
	fstp	ST(0)
	fstp	ST(0)
$LN103@knot_energ@2:
	mov	edi, DWORD PTR _charge_attr
	mov	ebx, DWORD PTR _dymem
$LN21@knot_energ@2:

; 646  : 
; 647  :   FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR _web+12
	mov	eax, DWORD PTR tv359[ebp]
	mov	edx, DWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR [edx]
	test	ecx, 268435456				; 10000000H
	jne	$LN51@knot_energ@2
$LN20@knot_energ@2:

; 660  :   }
; 661  :   return energy;
; 662  : } // end knot_energy_gradient()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_knot_energy_gradient ENDP
_TEXT	ENDS
PUBLIC	_v_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_knot_energy_hessian
EXTRN	_fill_self_entry:PROC
EXTRN	_fill_mixed_entry:PROC
EXTRN	_meth_inst_list:DWORD
EXTRN	_gen_quant_list:DWORD
EXTRN	_mat2d_setup:PROC
; Function compile flags: /Ogtp
;	COMDAT _knot_energy_hessian
_TEXT	SEGMENT
_hessvvqXvS$ = -756					; size = 24
_hessvwqXvS$ = -732					; size = 24
_vcharge$ = -708					; size = 8
_modulus$ = -700					; size = 8
_x$ = -692						; size = 4
_rr$ = -688						; size = 8
tv1013 = -684						; size = 4
_energy$ = -680						; size = 8
_charges$89782 = -672					; size = 8
tv929 = -664						; size = 4
_hessvw$ = -660						; size = 4
tv518 = -656						; size = 4
tv989 = -652						; size = 4
_i$ = -648						; size = 4
_hessvv$ = -644						; size = 4
tv993 = -640						; size = 4
_w_id$ = -636						; size = 4
_v_info$GSCopy$ = -632					; size = 4
_hessvvxJ$ = -628					; size = 288
_hessvwxJ$ = -340					; size = 288
_d$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_v_info$ = 8						; size = 4
_knot_energy_hessian PROC				; COMDAT

; 672  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 756				; 000002f4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 673  :   REAL *x = get_coord(v_info->id);

	mov	ecx, DWORD PTR _web+12

; 674  :   REAL energy = 0.0;  /* for this vertex */

	fldz
	mov	edx, DWORD PTR _dymem
	fstp	QWORD PTR _energy$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _v_info$[ebp]
	mov	eax, DWORD PTR [ebx]
	push	esi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _web+104
	add	eax, DWORD PTR [ecx+edx+64]
	push	edi

; 675  :   vertex_id w_id;
; 676  :   int i,j;
; 677  :   REAL d[MAXCOORD]; /* difference vector between vertices */
; 678  :   REAL rr,p,fact;
; 679  :   MAT2D(hessvw,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	edx, DWORD PTR _hessvwxJ$[ebp]
	mov	DWORD PTR _x$[ebp], eax
	push	edx
	lea	eax, DWORD PTR _hessvwqXvS$[ebp]
	push	eax
	mov	DWORD PTR _v_info$GSCopy$[ebp], ebx
	call	_mat2d_setup

; 680  :   MAT2D(hessvv,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	ecx, DWORD PTR _hessvvxJ$[ebp]
	push	ecx
	lea	edx, DWORD PTR _hessvvqXvS$[ebp]
	push	edx
	mov	DWORD PTR _hessvw$[ebp], eax
	call	_mat2d_setup

; 681  :   REAL modulus;
; 682  :   REAL vcharge = charge_attr >= 0 ? 
; 683  :         *((REAL*)get_extra(v_info->id,charge_attr)) : 1.;

	mov	esi, DWORD PTR _charge_attr
	add	esp, 32					; 00000020H
	mov	DWORD PTR _hessvv$[ebp], eax
	test	esi, esi
	js	SHORT $LN37@knot_energ@3
	mov	ecx, DWORD PTR [ebx]
	mov	eax, ecx
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	edx, DWORD PTR _web[eax+12]
	mov	eax, DWORD PTR _web[eax+104]
	mov	edi, esi
	imul	edi, 240				; 000000f0H
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _dymem
	add	eax, edi
	mov	eax, DWORD PTR [eax+edx+64]
	fld	QWORD PTR [ecx+eax]
	jmp	SHORT $LN128@knot_energ@3
$LN37@knot_energ@3:
	fld1
$LN128@knot_energ@3:

; 684  : 
; 685  :   modulus = METH_INSTANCE(v_info->method)->modulus
; 686  :                   *GEN_QUANT(METH_INSTANCE(v_info->method)->quants[0])->modulus;

	mov	eax, DWORD PTR [ebx+8]
	fstp	QWORD PTR _vcharge$[ebp]
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	ecx, DWORD PTR _gen_quant_list
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list

; 687  :   /* need modulus due to direct insertion into hessian */
; 688  : 
; 689  :   for(i=0;i<SDIM;i++) for(j=0;j<SDIM;j++) hessvv[i][j]=0.;

	mov	edi, DWORD PTR _web+616
	mov	edx, DWORD PTR [eax+152]
	imul	edx, 368				; 00000170H
	fld	QWORD PTR [edx+ecx+176]
	xor	edx, edx
	fmul	QWORD PTR [eax+304]
	fstp	QWORD PTR _modulus$[ebp]
	test	edi, edi
	jle	SHORT $LN32@knot_energ@3
	fldz
$LN74@knot_energ@3:
	xor	ecx, ecx
	test	edi, edi
	jle	SHORT $LN33@knot_energ@3
	mov	eax, DWORD PTR _hessvv$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
$LN31@knot_energ@3:
	fst	QWORD PTR [eax]
	mov	edi, DWORD PTR _web+616
	inc	ecx
	add	eax, 8
	cmp	ecx, edi
	jl	SHORT $LN31@knot_energ@3
$LN33@knot_energ@3:
	inc	edx
	cmp	edx, edi
	jl	SHORT $LN74@knot_energ@3
	mov	esi, DWORD PTR _charge_attr
	fstp	ST(0)
$LN32@knot_energ@3:

; 690  : 
; 691  :   FOR_ALL_VERTICES(w_id)

	mov	eax, DWORD PTR _web+48
	mov	DWORD PTR _w_id$[ebp], eax
	test	eax, 268435456				; 10000000H
	je	$LN26@knot_energ@3
	mov	ebx, DWORD PTR _web+12
	jmp	SHORT $LN28@knot_energ@3
	npad	11
$LL69@knot_energ@3:
	mov	eax, DWORD PTR _w_id$[ebp]
$LN28@knot_energ@3:
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	ecx, DWORD PTR [eax+ebx]
	mov	DWORD PTR tv518[ebp], eax
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	$LN27@knot_energ@3

; 692  :   { REAL *y = get_coord(w_id);

	mov	edx, DWORD PTR _web+104
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax+64]

; 693  :     REAL charges;
; 694  :     if ( equal_id(v_info->id,w_id) ) continue;

	mov	edx, DWORD PTR _v_info$GSCopy$[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR _w_id$[ebp]
	cmp	DWORD PTR [edx], ecx
	je	$LN27@knot_energ@3

; 695  :     charges = charge_attr >= 0 ? 
; 696  :               *((REAL*)get_extra(w_id,charge_attr))*vcharge : 1.;

	test	esi, esi
	js	SHORT $LN39@knot_energ@3
	shr	ecx, 29					; 0000001dH
	imul	esi, 240				; 000000f0H
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _web[ecx+104]
	mov	ecx, DWORD PTR _web[ecx+12]
	add	edx, esi
	mov	esi, DWORD PTR _dymem
	mov	edx, DWORD PTR [edx+esi+64]
	mov	esi, DWORD PTR tv518[ebp]
	mov	ecx, DWORD PTR [ecx+esi]
	fld	QWORD PTR [edx+ecx]
	fmul	QWORD PTR _vcharge$[ebp]
	jmp	SHORT $LN129@knot_energ@3
$LN39@knot_energ@3:
	fld1
$LN129@knot_energ@3:
	fstp	QWORD PTR _charges$89782[ebp]

; 697  :     for ( i = 0 ; i < SDIM ; i++ ) d[i] = x[i] - y[i];

	test	edi, edi
	jle	SHORT $LN20@knot_energ@3
	mov	edx, DWORD PTR _x$[ebp]
	mov	ecx, eax
	neg	ecx
	add	edx, ecx
	lea	esi, DWORD PTR _d$[ebp+ecx]
	mov	ecx, edi
$LL22@knot_energ@3:
	fld	QWORD PTR [eax+edx]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax+esi-8]
	jne	SHORT $LL22@knot_energ@3
$LN20@knot_energ@3:

; 698  :     rr = SDIM_dot(d,d);

	lea	eax, DWORD PTR _d$[ebp]
	push	edi
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fst	QWORD PTR _rr$[ebp]

; 699  :     ke_pow(rr,p);

	mov	eax, DWORD PTR _ke_power_flag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jle	SHORT $LN130@knot_energ@3
	mov	ecx, DWORD PTR _ke_power_i
	fld	ST(0)
	mov	edx, 1
	cmp	ecx, edx
	jle	$LN71@knot_energ@3
	lea	eax, DWORD PTR [ecx-1]
	cmp	eax, 8
	jl	SHORT $LC64@knot_energ@3
	lea	eax, DWORD PTR [ecx-9]
	shr	eax, 3
	inc	eax
	lea	edx, DWORD PTR [eax*8+1]
$LN65@knot_energ@3:
	dec	eax
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	jne	SHORT $LN65@knot_energ@3
$LC64@knot_energ@3:
	cmp	edx, ecx
	jge	SHORT $LN71@knot_energ@3
	sub	ecx, edx
$LC18@knot_energ@3:
	dec	ecx
	fmul	ST(0), ST(1)
	jne	SHORT $LC18@knot_energ@3
	jmp	SHORT $LN71@knot_energ@3
$LN130@knot_energ@3:
	jns	SHORT $LN14@knot_energ@3
	mov	ecx, DWORD PTR _ke_power_l
	fld	ST(0)
	xor	edx, edx
	cmp	ecx, 8
	jl	SHORT $LC67@knot_energ@3
	lea	eax, DWORD PTR [ecx-8]
	shr	eax, 3
	inc	eax
	lea	edx, DWORD PTR [eax*8]
$LN68@knot_energ@3:
	dec	eax
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	jne	SHORT $LN68@knot_energ@3
$LC67@knot_energ@3:
	cmp	edx, ecx
	jge	SHORT $LN71@knot_energ@3
	sub	ecx, edx
$LC13@knot_energ@3:
	dec	ecx
	fmul	ST(0), ST(0)
	jne	SHORT $LC13@knot_energ@3
	jmp	SHORT $LN71@knot_energ@3
$LN14@knot_energ@3:
	fld	QWORD PTR _ke_power
	call	__CIpow
	fld	QWORD PTR _rr$[ebp]
	fxch	ST(1)
$LN71@knot_energ@3:

; 700  :     energy += charges/p;

	fld	QWORD PTR _charges$89782[ebp]

; 701  :     fact = 2*ke_power/(p*rr);
; 702  :     for ( i = 0 ; i < SDIM ; i++ ) 

	mov	ecx, DWORD PTR _web+616
	fld	ST(0)
	xor	eax, eax
	fdiv	ST(0), ST(2)
	fadd	QWORD PTR _energy$[ebp]
	fstp	QWORD PTR _energy$[ebp]
	fld	QWORD PTR _ke_power
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fxch	ST(3)
	fmul	ST(0), ST(4)
	fdivr	ST(0), ST(1)
	test	ecx, ecx
	jle	SHORT $LN7@knot_energ@3
	fld	ST(2)
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(1)
$LN9@knot_energ@3:

; 703  :       v_info->grad[0][i] -= 2*charges*fact*d[i];

	mov	ecx, DWORD PTR _v_info$GSCopy$[ebp]
	fld	QWORD PTR _d$[ebp+eax*8]
	mov	edx, DWORD PTR [ecx+1336]
	fmul	ST(0), ST(1)
	mov	ecx, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax*8]
	fsubr	QWORD PTR [ecx]
	inc	eax
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _web+616
	cmp	eax, ecx
	jl	SHORT $LN9@knot_energ@3

; 701  :     fact = 2*ke_power/(p*rr);
; 702  :     for ( i = 0 ; i < SDIM ; i++ ) 

	fstp	ST(0)
$LN7@knot_energ@3:

; 704  :     for ( i=0; i<SDIM; i++ )

	mov	DWORD PTR _i$[ebp], 0
	test	ecx, ecx
	jle	$LN114@knot_energ@3
	mov	eax, DWORD PTR _hessvv$[ebp]
	lea	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR tv993[ebp], edx
	mov	edx, DWORD PTR _hessvw$[ebp]
	sub	edx, eax
	mov	DWORD PTR tv989[ebp], eax
	mov	DWORD PTR tv1013[ebp], edx
$LN75@knot_energ@3:

; 705  :       for ( j=0; j<SDIM; j++ )

	xor	esi, esi
	test	ecx, ecx
	jle	SHORT $LN5@knot_energ@3
	mov	edx, DWORD PTR [edx+eax]
	fld	ST(1)
	mov	eax, DWORD PTR [eax]
	fadd	ST(0), ST(4)
	lea	edi, DWORD PTR _d$[ebp]
	sub	edi, edx
	fdiv	ST(0), ST(5)
	sub	edx, eax
	fxch	ST(3)
	fmul	QWORD PTR _modulus$[ebp]
$LN70@knot_energ@3:

; 706  :       {
; 707  :         register REAL hessij = fact*((2*ke_power+2)/rr * d[i]*d[j] - (i==j));

	mov	ebx, DWORD PTR tv993[ebp]
	fld	ST(3)
	fmul	QWORD PTR [ebx]
	xor	ebx, ebx
	cmp	DWORD PTR _i$[ebp], esi
	lea	ecx, DWORD PTR [edx+eax]
	fmul	QWORD PTR [edi+ecx]
	sete	bl
	inc	esi
	add	eax, 8

; 708  :         hessij *= modulus*charges;

	mov	DWORD PTR tv929[ebp], ebx
	fild	DWORD PTR tv929[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(1)

; 709  :         hessvw[i][j] = - hessij;

	fld	ST(0)
	fchs
	fstp	QWORD PTR [ecx]

; 710  :         hessvv[i][j] += 2*hessij;

	fmul	ST(0), ST(5)
	fadd	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	mov	ecx, DWORD PTR _web+616
	cmp	esi, ecx
	jl	SHORT $LN70@knot_energ@3

; 705  :       for ( j=0; j<SDIM; j++ )

	mov	eax, DWORD PTR tv989[ebp]
	fstp	ST(3)
	mov	edx, DWORD PTR tv1013[ebp]
	fstp	ST(2)
	fld	QWORD PTR _charges$89782[ebp]
	fxch	ST(2)
$LN5@knot_energ@3:

; 704  :     for ( i=0; i<SDIM; i++ )

	mov	esi, DWORD PTR _i$[ebp]
	add	DWORD PTR tv993[ebp], 8
	inc	esi
	add	eax, 4
	mov	DWORD PTR _i$[ebp], esi
	mov	DWORD PTR tv989[ebp], eax
	cmp	esi, ecx
	jl	$LN75@knot_energ@3
$LN114@knot_energ@3:

; 711  :       }
; 712  :     fill_mixed_entry(v_info->S, v_info->id, w_id, hessvw);

	mov	eax, DWORD PTR _hessvw$[ebp]
	fstp	ST(4)
	mov	ecx, DWORD PTR _w_id$[ebp]
	fstp	ST(2)
	push	eax
	fstp	ST(0)
	mov	eax, DWORD PTR _v_info$GSCopy$[ebp]
	fstp	ST(1)
	mov	edx, DWORD PTR [eax]
	fstp	ST(0)
	mov	eax, DWORD PTR [eax+1348]
	push	ecx
	push	edx
	push	eax
	call	_fill_mixed_entry
	mov	edi, DWORD PTR _web+616
	mov	ebx, DWORD PTR _web+12
	mov	esi, DWORD PTR _charge_attr
	add	esp, 16					; 00000010H
$LN27@knot_energ@3:

; 690  : 
; 691  :   FOR_ALL_VERTICES(w_id)

	mov	ecx, DWORD PTR tv518[ebp]
	mov	edx, DWORD PTR [ecx+ebx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _w_id$[ebp], eax
	test	eax, 268435456				; 10000000H
	jne	$LL69@knot_energ@3
	mov	ebx, DWORD PTR _v_info$GSCopy$[ebp]
$LN26@knot_energ@3:

; 713  :   }
; 714  :   fill_self_entry(v_info->S, v_info->id, hessvv);

	mov	eax, DWORD PTR _hessvv$[ebp]
	mov	ecx, DWORD PTR [ebx]
	mov	edx, DWORD PTR [ebx+1348]
	push	eax
	push	ecx
	push	edx
	call	_fill_self_entry

; 715  :   return modulus*energy;

	fld	QWORD PTR _modulus$[ebp]

; 716  : } // end knot_energy_hessian()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fmul	QWORD PTR _energy$[ebp]
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_knot_energy_hessian ENDP
_TEXT	ENDS
PUBLIC	??_C@_07GIJDMJFD@KNOT1?4C?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_charge_gradient_init
EXTRN	_list_calloc:PROC
EXTRN	_list_free:PROC
;	COMDAT ??_C@_07GIJDMJFD@KNOT1?4C?$AA@
CONST	SEGMENT
??_C@_07GIJDMJFD@KNOT1?4C?$AA@ DB 'KNOT1.C', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _charge_gradient_init
_TEXT	SEGMENT
tv1028 = -84						; size = 4
tv1034 = -80						; size = 4
_w$89842 = -76						; size = 4
tv353 = -72						; size = 4
tv1030 = -68						; size = 4
_x$89837 = -64						; size = 4
tv326 = -60						; size = 4
_u_id$ = -56						; size = 4
_d$89862 = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_charge_gradient_init PROC				; COMDAT

; 736  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 737  :     vertex_id u_id,v_id;  /* two vertices */
; 738  :     int nv;
; 739  : 
; 740  :     knot_power_init(mode,mi);

	mov	eax, DWORD PTR _mi$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	push	ebx
	push	esi
	push	eax
	push	ecx
	call	_knot_power_init

; 741  : 
; 742  :     if ((nv = web.skel[VERTEX].max_ord+1) != cg_nverts)

	mov	esi, DWORD PTR _web+68
	inc	esi
	add	esp, 8
	cmp	esi, DWORD PTR _cg_nverts
	je	SHORT $LN40@charge_gra

; 743  :     {
; 744  :          if (charge_grads) list_free((char*)charge_grads,ETERNAL_BLOCK);

	mov	eax, DWORD PTR _charge_grads
	test	eax, eax
	je	SHORT $LN21@charge_gra
	push	60138					; 0000eaeaH
	push	eax
	call	_list_free
	add	esp, 8
$LN21@charge_gra:

; 745  :          charge_grads = (REAL*)my_list_calloc(nv, MAXCOORD*sizeof(REAL),ETERNAL_BLOCK);

	push	745					; 000002e9H
	push	OFFSET ??_C@_07GIJDMJFD@KNOT1?4C?$AA@
	push	60138					; 0000eaeaH
	push	48					; 00000030H
	push	esi
	call	_list_calloc
	add	esp, 20					; 00000014H
	mov	DWORD PTR _charge_grads, eax

; 746  :          cg_nverts = nv;

	mov	DWORD PTR _cg_nverts, esi
$LN40@charge_gra:

; 747  :      }
; 748  : 
; 749  :     FOR_ALL_VERTICES(u_id)

	mov	ebx, DWORD PTR _web+48
	mov	ecx, ebx
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	mov	DWORD PTR _u_id$[ebp], ebx
	je	$LN18@charge_gra
	mov	edx, DWORD PTR _web+12
	push	edi
	jmp	SHORT $LN20@charge_gra
	npad	3
$LL42@charge_gra:
	mov	ebx, DWORD PTR _u_id$[ebp]
$LN20@charge_gra:
	and	ebx, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+ebx*4]
	mov	eax, DWORD PTR [esi+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	mov	DWORD PTR tv326[ebp], ebx
	je	$LN19@charge_gra

; 750  :     {
; 751  :       int i;
; 752  :       REAL *x = get_coord(u_id);

	mov	eax, DWORD PTR _web+104
	mov	edi, DWORD PTR _dymem
	mov	ebx, DWORD PTR [eax+edi+64]
	add	ebx, esi
	mov	DWORD PTR _x$89837[ebp], ebx

; 753  :       REAL *w = charge_grads+MAXCOORD*ordinal(u_id);

	test	ecx, ecx
	je	SHORT $LN25@charge_gra
	mov	eax, DWORD PTR tv326[ebp]
	jmp	SHORT $LN26@charge_gra
$LN25@charge_gra:
	or	eax, -1
$LN26@charge_gra:
	lea	ecx, DWORD PTR [eax+eax*2]
	shl	ecx, 4
	add	ecx, DWORD PTR _charge_grads

; 754  : 
; 755  :       for ( i = 0 ; i < SDIM ; i++ ) w[i] = 0.;

	xor	eax, eax
	mov	DWORD PTR _w$89842[ebp], ecx
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN13@charge_gra
$LL15@charge_gra:
	fldz
	inc	eax
	fstp	QWORD PTR [ecx+eax*8-8]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LL15@charge_gra
	mov	edx, DWORD PTR _web+12
$LN13@charge_gra:

; 756  :       FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR _web+48
	test	ecx, 268435456				; 10000000H
	je	$LN43@charge_gra
	npad	1
$LL12@charge_gra:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+edx]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	mov	DWORD PTR tv353[ebp], esi
	je	$LN11@charge_gra

; 757  :       {
; 758  :           REAL *y = get_coord(v_id);

	mov	eax, DWORD PTR _web+104
	mov	edi, DWORD PTR _dymem
	mov	edi, DWORD PTR [eax+edi+64]
	add	edi, DWORD PTR [esi+edx]

; 759  :           REAL d[MAXCOORD];         /* difference vector */
; 760  :           REAL rr;
; 761  : 
; 762  :           if (u_id==v_id) continue;

	cmp	DWORD PTR _u_id$[ebp], ecx
	je	$LN11@charge_gra

; 763  :           for ( i = 0 ; i < SDIM ; i++ ) d[i] = x[i] - y[i];

	xor	edx, edx
	cmp	DWORD PTR _web+616, 4
	jl	SHORT $LC38@charge_gra
	mov	esi, edi
	neg	esi
	lea	ecx, DWORD PTR [ebx+24]
	add	ebx, esi
	mov	DWORD PTR tv1028[ebp], ebx
	lea	ebx, DWORD PTR _d$89862[ebp+esi]
	mov	DWORD PTR tv1030[ebp], ebx
	lea	ebx, DWORD PTR _d$89862[ebp+esi+8]
	lea	esi, DWORD PTR _d$89862[ebp+esi+16]
	lea	eax, DWORD PTR [edi+8]
	mov	DWORD PTR tv1034[ebp], esi
	npad	7
$LL39@charge_gra:
	fld	QWORD PTR [ecx-24]
	mov	esi, DWORD PTR tv1028[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _d$89862[ebp+edx*8-32]
	fld	QWORD PTR [eax+esi-32]
	mov	esi, DWORD PTR tv1030[ebp]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [eax+esi-32]
	mov	esi, DWORD PTR tv1034[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [eax+ebx-32]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [eax+esi-32]
	mov	esi, DWORD PTR _web+616
	add	esi, -3					; fffffffdH
	cmp	edx, esi
	jl	SHORT $LL39@charge_gra
	mov	esi, DWORD PTR tv353[ebp]
	mov	ebx, DWORD PTR _x$89837[ebp]
$LC38@charge_gra:
	cmp	edx, DWORD PTR _web+616
	jge	SHORT $LN37@charge_gra
	mov	ecx, DWORD PTR _web+616
	lea	eax, DWORD PTR [edi+edx*8]
	neg	edi
	add	ebx, edi
	lea	edi, DWORD PTR _d$89862[ebp+edi]
	sub	ecx, edx
	npad	7
$LC6@charge_gra:
	fld	QWORD PTR [eax+ebx]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax+edi-8]
	jne	SHORT $LC6@charge_gra
	mov	ebx, DWORD PTR _x$89837[ebp]
$LN37@charge_gra:

; 764  :           rr = SDIM_dot(d,d);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _d$89862[ebp]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot

; 765  :           for ( i = 0 ; i < SDIM ; i++ ) w[i] -= d[i]/pow(rr,(2*ke_power+2)/2);

	xor	edi, edi
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR _web+616, edi
	jle	SHORT $LN45@charge_gra
	fld	QWORD PTR _ke_power
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __real@3fe0000000000000
	call	__CIpow
	mov	eax, DWORD PTR _w$89842[ebp]
	lea	ecx, DWORD PTR _d$89862[ebp]
	sub	ecx, eax
$LN3@charge_gra:
	fld	QWORD PTR [eax+ecx]
	inc	edi
	fdiv	ST(0), ST(1)
	add	eax, 8
	fsubr	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax-8]
	cmp	edi, DWORD PTR _web+616
	jl	SHORT $LN3@charge_gra
$LN45@charge_gra:
	mov	edx, DWORD PTR _web+12
	fstp	ST(0)
$LN11@charge_gra:

; 756  :       FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR [esi+edx]
	mov	ecx, DWORD PTR [ecx]
	test	ecx, 268435456				; 10000000H
	jne	$LL12@charge_gra
$LN43@charge_gra:
	mov	ebx, DWORD PTR tv326[ebp]
$LN19@charge_gra:

; 747  :      }
; 748  : 
; 749  :     FOR_ALL_VERTICES(u_id)

	mov	eax, DWORD PTR [edx+ebx*4]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _u_id$[ebp], ecx
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	jne	$LL42@charge_gra
	pop	edi
$LN18@charge_gra:

; 766  :       }
; 767  :    }
; 768  : } // end charge_gradient_init()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_charge_gradient_init ENDP
_TEXT	ENDS
PUBLIC	_charge_gradient
; Function compile flags: /Ogtp
;	COMDAT _charge_gradient
_TEXT	SEGMENT
_wx$ = -8						; size = 8
_v_info$ = 8						; size = 4
_charge_gradient PROC					; COMDAT

; 781  : {

	push	ebp
	mov	ebp, esp

; 782  :   REAL *x = get_coord(v_info->id);

	mov	eax, DWORD PTR _v_info$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _web+12
	sub	esp, 8
	push	esi
	mov	esi, DWORD PTR _web+104
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]
	push	edi
	mov	edi, DWORD PTR _dymem
	add	ecx, DWORD PTR [esi+edi+64]

; 783  :   REAL *w = charge_grads+MAXCOORD*ordinal(v_info->id);

	test	edx, 268435456				; 10000000H
	jne	SHORT $LN4@charge_gra@2
	or	eax, -1
$LN4@charge_gra@2:

; 784  :   REAL wx = SDIM_dot(w,x);

	mov	edx, DWORD PTR _web+616
	lea	esi, DWORD PTR [eax+eax*2]
	push	edx
	shl	esi, 4
	add	esi, DWORD PTR _charge_grads
	push	ecx
	push	esi
	call	_dot
	fstp	QWORD PTR _wx$[ebp]

; 785  :   return SDIM_dot(w,w) - wx*wx;

	mov	eax, DWORD PTR _web+616
	push	eax
	push	esi
	push	esi
	call	_dot
	fld	QWORD PTR _wx$[ebp]
	add	esp, 24					; 00000018H
	fmul	ST(0), ST(0)
	pop	edi
	pop	esi
	fsubp	ST(1), ST(0)

; 786  : } // end charge_gradient()

	mov	esp, ebp
	pop	ebp
	ret	0
_charge_gradient ENDP
_TEXT	ENDS
PUBLIC	_v_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_charge_gradient_gradient
; Function compile flags: /Ogtp
;	COMDAT _charge_gradient_gradient
_TEXT	SEGMENT
_rr$ = -204						; size = 8
_ddd$ = -196						; size = 8
tv2817 = -192						; size = 4
tv807 = -188						; size = 8
_wj$ = -184						; size = 4
_v_info$GSCopy$ = -180					; size = 4
tv2807 = -176						; size = 4
tv2805 = -176						; size = 4
_xi$ = -172						; size = 4
tv2809 = -168						; size = 4
tv2803 = -168						; size = 4
tv1151 = -168						; size = 4
tv1147 = -164						; size = 4
tv722 = -164						; size = 4
tv2799 = -160						; size = 4
tv2249 = -160						; size = 4
_wi$ = -160						; size = 4
tv2811 = -156						; size = 4
tv1126 = -156						; size = 4
tv720 = -156						; size = 4
tv2813 = -152						; size = 4
tv2801 = -152						; size = 4
tv1143 = -152						; size = 4
_yd$ = -148						; size = 48
_d$ = -100						; size = 48
_yi$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_v_info$ = 8						; size = 4
_charge_gradient_gradient PROC				; COMDAT

; 801  : { REAL *xi = get_coord(v_info->id);

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _v_info$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _web+12
	mov	DWORD PTR _v_info$GSCopy$[ebp], eax
	push	ebx
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+104
	push	esi
	mov	esi, DWORD PTR _dymem
	add	ebx, DWORD PTR [edx+esi+64]
	push	edi
	mov	DWORD PTR _xi$[ebp], ebx

; 802  :   vertex_id v_id;
; 803  :   int i;
; 804  :   REAL d[MAXCOORD]; /* difference vector between vertices */
; 805  :   REAL *wi,*wj; /* force vectors at vertices */
; 806  :   REAL yi[MAXCOORD], yd[MAXCOORD]; /* more forces */
; 807  :   REAL rr,p,ddd;
; 808  : 
; 809  :   wi = charge_grads+MAXCOORD*ordinal(v_info->id);

	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN25@charge_gra@3
	or	eax, -1
$LN25@charge_gra@3:
	lea	edi, DWORD PTR [eax+eax*2]

; 810  :   ddd = SDIM_dot(wi,xi);

	mov	eax, DWORD PTR _web+616
	push	eax
	shl	edi, 4
	add	edi, DWORD PTR _charge_grads
	push	ebx
	push	edi
	mov	DWORD PTR _wi$[ebp], edi
	call	_dot

; 811  :   for ( i = 0 ; i < SDIM ; i++ ) 

	mov	esi, DWORD PTR _web+616
	add	esp, 12					; 0000000cH
	xor	eax, eax
	test	esi, esi
	jle	SHORT $LN19@charge_gra@3
	fld	QWORD PTR __real@c000000000000000
	fmul	ST(0), ST(1)
$LN21@charge_gra@3:

; 812  :       v_info->grad[0][i] = -2*ddd*wi[i]; /* diagonal term in gradient */

	fld	QWORD PTR [edi+eax*8]
	mov	ecx, DWORD PTR _v_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [ecx+1336]
	fmul	ST(0), ST(1)
	mov	ecx, DWORD PTR [edx]
	inc	eax
	fstp	QWORD PTR [ecx+eax*8-8]
	mov	esi, DWORD PTR _web+616
	cmp	eax, esi
	jl	SHORT $LN21@charge_gra@3

; 811  :   for ( i = 0 ; i < SDIM ; i++ ) 

	fstp	ST(0)
$LN19@charge_gra@3:

; 813  :   for ( i = 0 ; i < SDIM ; i++ )  yi[i] = wi[i] - ddd*xi[i];

	xor	edx, edx
	cmp	esi, 4
	jl	$LC41@charge_gra@3
	lea	ecx, DWORD PTR [edi+24]
	sub	edi, ebx
	mov	DWORD PTR tv1126[ebp], edi
	lea	edi, DWORD PTR _yi$[ebp]
	sub	edi, ebx
	mov	DWORD PTR tv1143[ebp], edi
	lea	edi, DWORD PTR _yi$[ebp+8]
	sub	edi, ebx
	mov	DWORD PTR tv1147[ebp], edi
	lea	edi, DWORD PTR _yi$[ebp+16]
	sub	edi, ebx
	lea	eax, DWORD PTR [ebx+8]
	mov	DWORD PTR tv1151[ebp], edi
$LN51@charge_gra@3:
	fld	QWORD PTR [eax-8]
	mov	edi, DWORD PTR tv1126[ebp]
	fmul	ST(0), ST(1)
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fsubr	QWORD PTR [ecx-56]
	fstp	QWORD PTR _yi$[ebp+edx*8-32]
	fld	QWORD PTR [eax-32]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv1143[ebp]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv1147[ebp]
	fld	QWORD PTR [eax-24]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [ecx-40]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv1151[ebp]
	fld	QWORD PTR [eax-16]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [ecx-32]
	fstp	QWORD PTR [edi+eax-32]
	lea	edi, DWORD PTR [esi-3]
	cmp	edx, edi
	jl	SHORT $LN51@charge_gra@3
	mov	edi, DWORD PTR _wi$[ebp]
$LC41@charge_gra@3:
	cmp	edx, esi
	jge	SHORT $LN68@charge_gra@3
	lea	ecx, DWORD PTR _yi$[ebp]
	sub	ecx, ebx
	mov	DWORD PTR tv1143[ebp], ecx
	mov	ecx, esi
	sub	edi, ebx
	lea	eax, DWORD PTR [ebx+edx*8]
	sub	ecx, edx
$LC18@charge_gra@3:
	mov	edx, DWORD PTR tv1143[ebp]
	fld	ST(0)
	fmul	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fsubr	QWORD PTR [eax+edi-8]
	fstp	QWORD PTR [eax+edx-8]
	jne	SHORT $LC18@charge_gra@3
$LN68@charge_gra@3:

; 814  :   FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR _web+48
	fstp	ST(0)
	mov	eax, ecx
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv720[ebp], eax
	je	$LN13@charge_gra@3
$LL52@charge_gra@3:
	mov	eax, DWORD PTR _web+12
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	mov	DWORD PTR tv722[ebp], edx
	je	$LN14@charge_gra@3

; 815  :   { REAL *xj = get_coord(v_id);

	mov	eax, DWORD PTR _dymem
	mov	edi, DWORD PTR _web+104
	mov	edi, DWORD PTR [edi+eax+64]
	mov	eax, DWORD PTR _web+12
	add	edi, DWORD PTR [eax+edx*4]

; 816  :     if ( equal_id(v_info->id,v_id) ) continue;

	mov	eax, DWORD PTR _v_info$GSCopy$[ebp]
	cmp	DWORD PTR [eax], ecx
	je	$LN14@charge_gra@3

; 817  :     for ( i = 0 ; i < SDIM ; i++ ) d[i] = xi[i] - xj[i];

	xor	edx, edx
	cmp	esi, 4
	jl	$LC44@charge_gra@3
	mov	esi, edi
	neg	esi
	lea	ecx, DWORD PTR [ebx+24]
	add	ebx, esi
	mov	DWORD PTR tv2799[ebp], ebx
	lea	ebx, DWORD PTR _d$[ebp+esi]
	mov	DWORD PTR tv2801[ebp], ebx
	lea	ebx, DWORD PTR _d$[ebp+esi+8]
	lea	esi, DWORD PTR _d$[ebp+esi+16]
	mov	DWORD PTR tv2805[ebp], esi
	mov	esi, DWORD PTR _web+616
	lea	eax, DWORD PTR [edi+8]
	mov	DWORD PTR tv2803[ebp], ebx
	npad	3
$LL50@charge_gra@3:
	fld	QWORD PTR [ecx-24]
	mov	ebx, DWORD PTR tv2799[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _d$[ebp+edx*8-32]
	fld	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv2801[ebp]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv2803[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv2805[ebp]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [ebx+eax-32]
	lea	ebx, DWORD PTR [esi-3]
	cmp	edx, ebx
	jl	SHORT $LL50@charge_gra@3
	mov	ebx, DWORD PTR _xi$[ebp]
$LC44@charge_gra@3:
	cmp	edx, esi
	jge	SHORT $LN43@charge_gra@3
	mov	ecx, edi
	neg	ecx
	add	ebx, ecx
	lea	ecx, DWORD PTR _d$[ebp+ecx]
	mov	DWORD PTR tv2801[ebp], ecx
	mov	ecx, esi
	lea	eax, DWORD PTR [edi+edx*8]
	sub	ecx, edx
$LC9@charge_gra@3:
	fld	QWORD PTR [eax+ebx]
	mov	edx, DWORD PTR tv2801[ebp]
	fsub	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fstp	QWORD PTR [eax+edx-8]
	jne	SHORT $LC9@charge_gra@3
	mov	ebx, DWORD PTR _xi$[ebp]
$LN43@charge_gra@3:

; 818  :     rr = SDIM_dot(d,d);

	lea	eax, DWORD PTR _d$[ebp]
	push	esi
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fstp	QWORD PTR _rr$[ebp]
	add	esp, 12					; 0000000cH

; 819  :     wj = charge_grads+MAXCOORD*ordinal(v_id);

	cmp	DWORD PTR tv720[ebp], 0
	je	SHORT $LN26@charge_gra@3
	mov	esi, DWORD PTR tv722[ebp]
	jmp	SHORT $LN27@charge_gra@3
$LN26@charge_gra@3:
	or	esi, -1
$LN27@charge_gra@3:

; 820  :     ddd = SDIM_dot(wj,xj);

	mov	edx, DWORD PTR _web+616
	lea	esi, DWORD PTR [esi+esi*2]
	push	edx
	shl	esi, 4
	add	esi, DWORD PTR _charge_grads
	push	edi
	push	esi
	mov	DWORD PTR _wj$[ebp], esi
	call	_dot
	add	esp, 12					; 0000000cH

; 821  :     for ( i = 0 ; i < SDIM ; i++ ) yd[i] = yi[i] - wj[i] + ddd*xj[i];

	xor	ecx, ecx
	cmp	DWORD PTR _web+616, 4
	jl	$LC47@charge_gra@3
	lea	edx, DWORD PTR [esi+24]
	sub	esi, edi
	mov	DWORD PTR tv2249[ebp], esi
	mov	esi, edi
	neg	esi
	lea	ebx, DWORD PTR _yi$[ebp+esi]
	mov	DWORD PTR tv2807[ebp], ebx
	lea	ebx, DWORD PTR _yd$[ebp+esi]
	mov	DWORD PTR tv2809[ebp], ebx
	lea	ebx, DWORD PTR _yi$[ebp+esi+8]
	mov	DWORD PTR tv2811[ebp], ebx
	lea	ebx, DWORD PTR _yd$[ebp+esi+8]
	mov	DWORD PTR tv2813[ebp], ebx
	lea	ebx, DWORD PTR _yi$[ebp+esi+16]
	lea	esi, DWORD PTR _yd$[ebp+esi+16]
	lea	eax, DWORD PTR [edi+8]
	mov	DWORD PTR tv2817[ebp], esi
$LN48@charge_gra@3:
	fld	QWORD PTR _yi$[ebp+ecx*8]
	mov	esi, DWORD PTR tv2807[ebp]
	fsub	QWORD PTR [edx-24]
	add	ecx, 4
	fld	QWORD PTR [eax-8]
	add	eax, 32					; 00000020H
	fmul	ST(0), ST(2)
	add	edx, 32					; 00000020H
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _yd$[ebp+ecx*8-32]
	fld	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv2249[ebp]
	fsub	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv2809[ebp]
	fld	QWORD PTR [eax-32]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv2811[ebp]
	fld	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv2813[ebp]
	fsub	QWORD PTR [edx-40]
	fld	QWORD PTR [eax-24]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv2817[ebp]
	fld	QWORD PTR [ebx+eax-32]
	fsub	QWORD PTR [edx-32]
	fld	QWORD PTR [eax-16]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR _web+616
	add	esi, -3					; fffffffdH
	cmp	ecx, esi
	jl	$LN48@charge_gra@3
	mov	ebx, DWORD PTR _xi$[ebp]
	mov	esi, DWORD PTR _wj$[ebp]
$LC47@charge_gra@3:
	cmp	ecx, DWORD PTR _web+616
	jge	SHORT $LN76@charge_gra@3
	mov	edx, esi
	neg	edx
	sub	edi, esi
	lea	eax, DWORD PTR [esi+ecx*8]
	lea	ebx, DWORD PTR _yi$[ebp+edx]
	lea	esi, DWORD PTR _yd$[ebp+edx]
	mov	edx, DWORD PTR _web+616
	sub	edx, ecx
$LC6@charge_gra@3:
	fld	QWORD PTR [ebx+eax]
	add	eax, 8
	dec	edx
	fsub	QWORD PTR [eax-8]
	fld	QWORD PTR [edi+eax-8]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [esi+eax-8]
	jne	SHORT $LC6@charge_gra@3
	mov	ebx, DWORD PTR _xi$[ebp]
$LN76@charge_gra@3:

; 822  :     ddd = SDIM_dot(yd,d);

	mov	eax, DWORD PTR _web+616
	fstp	ST(0)
	push	eax
	lea	ecx, DWORD PTR _d$[ebp]
	push	ecx
	lea	edx, DWORD PTR _yd$[ebp]
	push	edx
	call	_dot
	fstp	QWORD PTR _ddd$[ebp]

; 823  :     p = pow(rr,(2*ke_power+2)/2);  /* power of distance */

	fld	QWORD PTR _ke_power
	add	esp, 12					; 0000000cH
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fst	QWORD PTR tv807[ebp]
	fmul	QWORD PTR __real@3fe0000000000000
	fld	QWORD PTR _rr$[ebp]
	fxch	ST(1)
	call	__CIpow

; 824  :     for ( i = 0 ; i < SDIM ; i++ )

	mov	esi, DWORD PTR _web+616
	xor	eax, eax
	test	esi, esi
	jle	SHORT $LN82@charge_gra@3
	fld	QWORD PTR tv807[ebp]
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR _ddd$[ebp]
	fld	QWORD PTR _rr$[ebp]
$LN3@charge_gra@3:

; 825  :       v_info->grad[0][i] += (-2*yd[i] + 2*(2*ke_power+2)*ddd*d[i]/rr)/p;

	fld	QWORD PTR _d$[ebp+eax*8]
	mov	ecx, DWORD PTR _v_info$GSCopy$[ebp]
	fmul	ST(0), ST(2)
	mov	edx, DWORD PTR [ecx+1336]
	mov	ecx, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax*8]
	fdiv	ST(0), ST(1)
	inc	eax
	fld	QWORD PTR _yd$[ebp+eax*8-8]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	esi, DWORD PTR _web+616
	cmp	eax, esi
	jl	SHORT $LN3@charge_gra@3

; 824  :     for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(1)
	fstp	ST(2)
	fstp	ST(0)
$LN82@charge_gra@3:
	mov	edx, DWORD PTR tv722[ebp]
	fstp	ST(0)
$LN14@charge_gra@3:

; 814  :   FOR_ALL_VERTICES(v_id)

	mov	eax, DWORD PTR _web+12
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR [ecx]
	mov	eax, ecx
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv720[ebp], eax
	jne	$LL52@charge_gra@3
$LN13@charge_gra@3:

; 826  :   }
; 827  :   return SDIM_dot(yi,yi);

	lea	edx, DWORD PTR _yi$[ebp]
	push	esi
	push	edx
	mov	eax, edx
	push	eax
	call	_dot

; 828  : } // end charge_gradient_gradient()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_charge_gradient_gradient ENDP
_TEXT	ENDS
PUBLIC	_uniform_knot_energy_init
EXTRN	_calc_edge:PROC
EXTRN	_get_vertex_evalence:PROC
; Function compile flags: /Ogtp
;	COMDAT _uniform_knot_energy_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_uniform_knot_energy_init PROC				; COMDAT

; 844  : {

	push	ebp
	mov	ebp, esp

; 845  :   edge_id e_id;
; 846  :   vertex_id v_id;
; 847  : 
; 848  :   knot_power_init(mode,mi);

	mov	eax, DWORD PTR _mi$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	push	esi
	push	edi
	push	eax
	push	ecx
	call	_knot_power_init

; 849  : 
; 850  :   FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR _web+48
	add	esp, 8
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN8@uniform_kn
	mov	edi, DWORD PTR _web+12
	npad	7
$LL10@uniform_kn:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+edi]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN9@uniform_kn

; 851  :   {
; 852  :      get_vertex_evalence(v_id);

	push	ecx
	call	_get_vertex_evalence
	mov	edi, DWORD PTR _web+12
	add	esp, 4
$LN9@uniform_kn:

; 849  : 
; 850  :   FOR_ALL_VERTICES(v_id)

	mov	edx, DWORD PTR [esi+edi]
	mov	ecx, DWORD PTR [edx]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LL10@uniform_kn
$LN8@uniform_kn:

; 853  :   }
; 854  :   FOR_ALL_EDGES(e_id)

	mov	ecx, DWORD PTR _web+160
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN3@uniform_kn
	mov	edi, DWORD PTR _web+124
	npad	5
$LL5@uniform_kn:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+edi]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN4@uniform_kn

; 855  :   {
; 856  :      calc_edge(e_id);

	push	ecx
	call	_calc_edge
	mov	edi, DWORD PTR _web+124
	add	esp, 4
$LN4@uniform_kn:

; 853  :   }
; 854  :   FOR_ALL_EDGES(e_id)

	mov	eax, DWORD PTR [esi+edi]
	mov	ecx, DWORD PTR [eax]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LL5@uniform_kn
$LN3@uniform_kn:
	pop	edi
	pop	esi

; 857  :   } /* each vertex_star is now half the total length of incident edges */
; 858  : } // end uniform_knot_energy_init()

	pop	ebp
	ret	0
_uniform_knot_energy_init ENDP
_TEXT	ENDS
PUBLIC	_v_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_uniform_knot_energy
; Function compile flags: /Ogtp
;	COMDAT _uniform_knot_energy
_TEXT	SEGMENT
_ti$ = -100						; size = 8
_v_info$GSCopy$ = -92					; size = 4
tv1050 = -88						; size = 4
_energy$ = -84						; size = 8
tv1048 = -76						; size = 4
tv368 = -72						; size = 4
_x$ = -68						; size = 4
_v_id$ = -64						; size = 4
_p$ = -60						; size = 8
tv1054 = -56						; size = 4
_d$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_v_info$ = 8						; size = 4
_uniform_knot_energy PROC				; COMDAT

; 872  : { REAL *x = get_coord(v_info->id);

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _v_info$[ebp]

; 873  :   REAL energy = 0.0;  /* for this vertex */

	fldz
	mov	edx, DWORD PTR _web+12
	fstp	QWORD PTR _energy$[ebp]
	mov	DWORD PTR _v_info$GSCopy$[ebp], eax
	mov	eax, DWORD PTR [eax]
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _web+104
	push	ebx
	push	esi
	mov	esi, DWORD PTR _dymem
	add	ecx, DWORD PTR [edx+esi+64]

; 874  :   vertex_id v_id;  /* other vertex */
; 875  :   int i;
; 876  :   REAL d[MAXCOORD]; /* difference vector between vertices */
; 877  :   REAL rr;
; 878  :   REAL ti;  /* length weights of vertices, ti for home vertex */
; 879  :   REAL p;
; 880  : 
; 881  :   ti = get_vertex_length_star(v_info->id);

	push	eax
	mov	DWORD PTR _x$[ebp], ecx
	call	_get_vertex_length_star
	fstp	QWORD PTR _ti$[ebp]

; 882  :   FOR_ALL_VERTICES(v_id)

	mov	ebx, DWORD PTR _web+48
	add	esp, 4
	mov	DWORD PTR _v_id$[ebp], ebx
	test	ebx, 268435456				; 10000000H
	je	$LN39@uniform_kn@2
	push	edi
	jmp	SHORT $LN19@uniform_kn@2
	npad	9
$LL40@uniform_kn@2:
	mov	ebx, DWORD PTR _v_id$[ebp]
$LN19@uniform_kn@2:
	mov	eax, DWORD PTR _web+12
	mov	esi, ebx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	ecx, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	mov	DWORD PTR tv368[ebp], esi
	je	$LN18@uniform_kn@2

; 883  :   { REAL *y = get_coord(v_id);

	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR _web+104
	mov	edi, DWORD PTR [eax+edx+64]
	add	edi, ecx

; 884  :     if ( v_id <= v_info->id ) continue; /* each pair once */

	mov	ecx, DWORD PTR _v_info$GSCopy$[ebp]
	cmp	ebx, DWORD PTR [ecx]
	jbe	$LN18@uniform_kn@2

; 885  :       for ( i = 0 ; i < SDIM ; i++ ) d[i] = x[i] - y[i];

	mov	ebx, DWORD PTR _web+616
	xor	edx, edx
	cmp	ebx, 4
	jl	SHORT $LC31@uniform_kn@2
	mov	ecx, DWORD PTR _x$[ebp]
	mov	ebx, DWORD PTR _x$[ebp]
	mov	esi, edi
	neg	esi
	add	ecx, 24					; 00000018H
	add	ebx, esi
	mov	DWORD PTR tv1048[ebp], ebx
	lea	ebx, DWORD PTR _d$[ebp+esi]
	mov	DWORD PTR tv1050[ebp], ebx
	lea	ebx, DWORD PTR _d$[ebp+esi+8]
	lea	esi, DWORD PTR _d$[ebp+esi+16]
	lea	eax, DWORD PTR [edi+8]
	mov	DWORD PTR tv1054[ebp], esi
	npad	6
$LL32@uniform_kn@2:
	fld	QWORD PTR [ecx-24]
	mov	esi, DWORD PTR tv1048[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _d$[ebp+edx*8-32]
	fld	QWORD PTR [eax+esi-32]
	mov	esi, DWORD PTR tv1050[ebp]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [eax+esi-32]
	mov	esi, DWORD PTR tv1054[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [eax+ebx-32]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [eax+esi-32]
	mov	esi, DWORD PTR _web+616
	add	esi, -3					; fffffffdH
	cmp	edx, esi
	jl	SHORT $LL32@uniform_kn@2
	mov	ebx, DWORD PTR _web+616
	mov	esi, DWORD PTR tv368[ebp]
$LC31@uniform_kn@2:
	cmp	edx, ebx
	jge	SHORT $LN30@uniform_kn@2
	mov	ecx, DWORD PTR _x$[ebp]
	lea	eax, DWORD PTR [edi+edx*8]
	neg	edi
	lea	esi, DWORD PTR [edi+ecx]
	mov	ecx, ebx
	lea	edi, DWORD PTR _d$[ebp+edi]
	sub	ecx, edx
$LC13@uniform_kn@2:
	fld	QWORD PTR [eax+esi]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax+edi-8]
	jne	SHORT $LC13@uniform_kn@2
	mov	esi, DWORD PTR tv368[ebp]
$LN30@uniform_kn@2:

; 886  :     rr = SDIM_dot(d,d);

	lea	edx, DWORD PTR _d$[ebp]
	push	ebx
	push	edx
	mov	eax, edx
	push	eax
	call	_dot

; 887  :     ke_pow(rr,p);

	mov	eax, DWORD PTR _ke_power_flag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jle	SHORT $LN76@uniform_kn@2
	mov	ecx, DWORD PTR _ke_power_i
	fld	ST(0)
	mov	edx, 1
	fst	QWORD PTR _p$[ebp]
	cmp	ecx, edx
	jle	$LN56@uniform_kn@2
	lea	eax, DWORD PTR [ecx-1]
	cmp	eax, 8
	jl	SHORT $LC34@uniform_kn@2
	lea	eax, DWORD PTR [ecx-9]
	shr	eax, 3
	inc	eax
	lea	edx, DWORD PTR [eax*8+1]
$LN35@uniform_kn@2:
	dec	eax
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	jne	SHORT $LN35@uniform_kn@2
	fst	QWORD PTR _p$[ebp]
$LC34@uniform_kn@2:
	cmp	edx, ecx
	jge	SHORT $LN56@uniform_kn@2
	sub	ecx, edx
$LC9@uniform_kn@2:
	dec	ecx
	fmul	ST(0), ST(1)
	jne	SHORT $LC9@uniform_kn@2
	fstp	ST(1)
	fstp	QWORD PTR _p$[ebp]
	jmp	SHORT $LN1@uniform_kn@2
$LN76@uniform_kn@2:
	jns	SHORT $LN5@uniform_kn@2
	mov	ecx, DWORD PTR _ke_power_l
	fst	QWORD PTR _p$[ebp]
	xor	edx, edx
	cmp	ecx, 8
	jl	SHORT $LN41@uniform_kn@2
	lea	eax, DWORD PTR [ecx-8]
	shr	eax, 3
	inc	eax
	lea	edx, DWORD PTR [eax*8]
$LN38@uniform_kn@2:
	dec	eax
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	jne	SHORT $LN38@uniform_kn@2
	fst	QWORD PTR _p$[ebp]
$LN41@uniform_kn@2:
	cmp	edx, ecx
	jge	SHORT $LN71@uniform_kn@2
	sub	ecx, edx
$LC4@uniform_kn@2:
	dec	ecx
	fmul	ST(0), ST(0)
	jne	SHORT $LC4@uniform_kn@2
	fstp	QWORD PTR _p$[ebp]
	jmp	SHORT $LN1@uniform_kn@2
$LN5@uniform_kn@2:
	fld	QWORD PTR _ke_power
	call	__CIpow
	fstp	QWORD PTR _p$[ebp]
	jmp	SHORT $LN1@uniform_kn@2
$LN56@uniform_kn@2:
	fstp	ST(0)
$LN71@uniform_kn@2:
	fstp	ST(0)
$LN1@uniform_kn@2:

; 888  :     energy += ti*get_vertex_length_star(v_id)/p;

	mov	ecx, DWORD PTR _v_id$[ebp]
	push	ecx
	call	_get_vertex_length_star
	fmul	QWORD PTR _ti$[ebp]
	add	esp, 4
	fdiv	QWORD PTR _p$[ebp]
	fadd	QWORD PTR _energy$[ebp]
	fstp	QWORD PTR _energy$[ebp]
$LN18@uniform_kn@2:

; 882  :   FOR_ALL_VERTICES(v_id)

	mov	edx, DWORD PTR _web+12
	mov	eax, DWORD PTR [esi+edx]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _v_id$[ebp], eax
	test	eax, 268435456				; 10000000H
	jne	$LL40@uniform_kn@2
	pop	edi
$LN39@uniform_kn@2:

; 889  :   }
; 890  :   return 2*energy; /* since each pair once */
; 891  : } // end uniform_knot_energy()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _energy$[ebp]
	pop	esi
	fadd	ST(0), ST(0)
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_uniform_knot_energy ENDP
_TEXT	ENDS
PUBLIC	__real@3c32725dd1d243ac
PUBLIC	_v_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_uniform_knot_energy_gradient
;	COMDAT __real@3c32725dd1d243ac
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@3c32725dd1d243ac DQ 03c32725dd1d243acr	; 1e-018
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\knot1.c
CONST	ENDS
;	COMDAT _uniform_knot_energy_gradient
_TEXT	SEGMENT
_sum$ = -240						; size = 8
_leftmag$ = -232					; size = 8
_ti$ = -232						; size = 8
_sumleft$ = -224					; size = 8
_sumright$ = -216					; size = 8
_rr$ = -208						; size = 8
tv3794 = -204						; size = 4
_energy$ = -200						; size = 8
_v_info$GSCopy$ = -192					; size = 4
_tj$ = -188						; size = 8
tv3798 = -184						; size = 4
tv3646 = -180						; size = 4
tv1218 = -180						; size = 4
_x$ = -176						; size = 4
_xright$ = -172						; size = 4
tv3782 = -168						; size = 4
tv1179 = -168						; size = 4
_v_id$ = -168						; size = 4
_xleft$ = -164						; size = 4
tv3786 = -160						; size = 4
tv1827 = -160						; size = 4
tv3790 = -156						; size = 4
tv1823 = -156						; size = 4
tv3633 = -152						; size = 4
tv1831 = -152						; size = 4
_right$ = -148						; size = 48
_left$ = -100						; size = 48
_d$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_v_info$ = 8						; size = 4
_uniform_knot_energy_gradient PROC			; COMDAT

; 906  : { REAL *x = get_coord(v_info->id);

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _web+12

; 907  :   REAL energy = 0.0;  /* for this vertex */

	fldz
	mov	edx, DWORD PTR _web+104
	fst	QWORD PTR _energy$[ebp]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _v_info$[ebp]
	mov	eax, DWORD PTR [esi]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _dymem
	add	eax, DWORD PTR [edx+ecx+64]
	push	edi
	mov	DWORD PTR _x$[ebp], eax

; 908  :   vertex_id v_id;
; 909  :   int i;
; 910  :   REAL d[MAXCOORD]; /* difference vector between vertices */
; 911  :   REAL rr,p;
; 912  :   REAL ti,tj;  /* length weights of vertices, ti for home vertex */
; 913  :   edge_id e_id;
; 914  :   REAL left[MAXCOORD],right[MAXCOORD]; /* edge vectors */
; 915  :   REAL sum,sumleft,sumright;
; 916  :   REAL *xleft,*xright;
; 917  :   REAL leftmag,rightmag;
; 918  : 
; 919  :   for ( i = 0 ; i < SDIM ; i++ ) 

	xor	eax, eax
	mov	DWORD PTR _v_info$GSCopy$[ebp], esi
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN144@uniform_kn@3
$LN59@uniform_kn@3:

; 920  :       v_info->grad[0][i] = 0.0; /* initialize gradient */

	mov	edx, DWORD PTR [esi+1336]
	mov	ecx, DWORD PTR [edx]
	fst	QWORD PTR [ecx+eax*8]
	inc	eax
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN59@uniform_kn@3
$LN144@uniform_kn@3:

; 921  :   ti = get_vertex_length_star(v_info->id);

	mov	edx, DWORD PTR [esi]
	fstp	ST(0)
	push	edx
	call	_get_vertex_length_star
	fstp	QWORD PTR _ti$[ebp]

; 922  :   e_id = get_vertex_edge(v_info->id);

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR _web+12

; 923  :   xright = get_coord(get_edge_headv(e_id));

	mov	esi, DWORD PTR _dymem
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [ecx+28]
	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	add	esp, 4
	and	ecx, 1
	mov	DWORD PTR tv1179[ebp], ecx
	mov	ecx, DWORD PTR _web+124
	je	SHORT $LN63@uniform_kn@3
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _web+216
	mov	esi, DWORD PTR [ecx+esi+304]
	mov	ecx, DWORD PTR [esi+eax]
	jmp	SHORT $LN62@uniform_kn@3
$LN63@uniform_kn@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _web+216
	mov	esi, DWORD PTR [ecx+esi+304]
	mov	ecx, DWORD PTR _web+636
	lea	ecx, DWORD PTR [esi+ecx*4]
	mov	ecx, DWORD PTR [ecx+eax]
$LN62@uniform_kn@3:
	mov	edi, DWORD PTR _web+104
	mov	ebx, DWORD PTR _dymem
	mov	edi, DWORD PTR [edi+ebx+64]
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	add	ecx, edi
	mov	DWORD PTR _xright$[ebp], ecx

; 924  :   e_id = get_next_tail_edge(e_id);  /* assuming exactly two edges per vertex */

	mov	ecx, DWORD PTR tv1179[ebp]
	mov	eax, DWORD PTR [eax+ecx*4+32]

; 925  :   xleft = get_coord(get_edge_headv(e_id));

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN69@uniform_kn@3
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [esi+eax]
	jmp	SHORT $LN68@uniform_kn@3
$LN69@uniform_kn@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _web+636
	lea	eax, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [eax+esi]
$LN68@uniform_kn@3:

; 926  :   sum = sumleft = sumright = 0.0;

	fldz

; 927  :   FOR_ALL_VERTICES(v_id)

	mov	ebx, DWORD PTR _web+48
	and	eax, 134217727				; 07ffffffH
	fst	QWORD PTR _sumright$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	fst	QWORD PTR _sumleft$[ebp]
	add	eax, edi
	fstp	QWORD PTR _sum$[ebp]
	mov	DWORD PTR _xleft$[ebp], eax
	mov	DWORD PTR _v_id$[ebp], ebx
	test	ebx, 268435456				; 10000000H
	je	$LN54@uniform_kn@3
	npad	3
$LL56@uniform_kn@3:
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR tv1218[ebp], eax
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 1
	xor	esi, esi
	or	eax, esi
	je	$LN55@uniform_kn@3

; 928  :   { REAL *y = get_coord(v_id);

	mov	edx, DWORD PTR _web+104
	mov	eax, DWORD PTR _dymem
	mov	esi, DWORD PTR [edx+eax+64]

; 929  :     REAL fact;
; 930  : 
; 931  :     tj = get_vertex_length_star(v_id);

	push	ebx
	add	esi, ecx
	call	_get_vertex_length_star
	fstp	QWORD PTR _tj$[ebp]
	add	esp, 4

; 932  : 
; 933  :     for ( i = 0 ; i < SDIM ; i++ ) d[i] = x[i] - y[i];

	xor	edx, edx
	cmp	DWORD PTR _web+616, 4
	jl	$LN133@uniform_kn@3
	mov	edi, DWORD PTR _x$[ebp]
	lea	ebx, DWORD PTR _d$[ebp]
	sub	ebx, esi
	mov	DWORD PTR tv1823[ebp], ebx
	lea	ebx, DWORD PTR _d$[ebp+8]
	sub	ebx, esi
	mov	DWORD PTR tv1827[ebp], ebx
	lea	ecx, DWORD PTR [edi+24]
	lea	ebx, DWORD PTR _d$[ebp+16]
	sub	edi, esi
	sub	ebx, esi
	lea	eax, DWORD PTR [esi+8]
	mov	DWORD PTR tv1831[ebp], ebx
$LL102@uniform_kn@3:
	fld	QWORD PTR [ecx-24]
	mov	ebx, DWORD PTR tv1823[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _d$[ebp+edx*8-32]
	fld	QWORD PTR [edi+eax-32]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv1827[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv1831[ebp]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR _web+616
	add	ebx, -3					; fffffffdH
	cmp	edx, ebx
	jl	SHORT $LL102@uniform_kn@3
	mov	ebx, DWORD PTR _v_id$[ebp]
$LN133@uniform_kn@3:
	cmp	edx, DWORD PTR _web+616
	jge	SHORT $LN100@uniform_kn@3
	mov	edi, DWORD PTR _x$[ebp]
	lea	ecx, DWORD PTR _d$[ebp]
	sub	ecx, esi
	mov	DWORD PTR tv1823[ebp], ecx
	mov	ecx, DWORD PTR _web+616
	sub	edi, esi
	lea	eax, DWORD PTR [esi+edx*8]
	sub	ecx, edx
	mov	edx, DWORD PTR tv1823[ebp]
$LC51@uniform_kn@3:
	fld	QWORD PTR [eax+edi]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax+edx-8]
	jne	SHORT $LC51@uniform_kn@3
$LN100@uniform_kn@3:

; 934  :     rr = SDIM_dot(d,d);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _d$[ebp]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	fst	QWORD PTR _rr$[ebp]

; 935  :     if (v_id != v_info->id)

	mov	edi, DWORD PTR _v_info$GSCopy$[ebp]
	add	esp, 12					; 0000000cH
	cmp	ebx, DWORD PTR [edi]
	je	$LN146@uniform_kn@3

; 936  :     {
; 937  :       ke_pow(rr,p);

	mov	eax, DWORD PTR _ke_power_flag
	test	eax, eax
	jle	SHORT $LN247@uniform_kn@3
	mov	ecx, DWORD PTR _ke_power_i
	fld	ST(0)
	mov	edx, 1
	cmp	ecx, edx
	jle	$LN38@uniform_kn@3
	lea	eax, DWORD PTR [ecx-1]
	cmp	eax, 8
	jl	SHORT $LC104@uniform_kn@3
	lea	eax, DWORD PTR [ecx-9]
	shr	eax, 3
	inc	eax
	lea	edx, DWORD PTR [eax*8+1]
$LN105@uniform_kn@3:
	dec	eax
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	jne	SHORT $LN105@uniform_kn@3
$LC104@uniform_kn@3:
	cmp	edx, ecx
	jge	SHORT $LN38@uniform_kn@3
	sub	ecx, edx
$LC46@uniform_kn@3:
	dec	ecx
	fmul	ST(0), ST(1)
	jne	SHORT $LC46@uniform_kn@3
	jmp	SHORT $LN38@uniform_kn@3
$LN247@uniform_kn@3:
	jns	SHORT $LN42@uniform_kn@3
	mov	ecx, DWORD PTR _ke_power_l
	fld	ST(0)
	xor	edx, edx
	cmp	ecx, 8
	jl	SHORT $LN138@uniform_kn@3
	lea	eax, DWORD PTR [ecx-8]
	shr	eax, 3
	inc	eax
	lea	edx, DWORD PTR [eax*8]
$LN108@uniform_kn@3:
	dec	eax
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	jne	SHORT $LN108@uniform_kn@3
$LN138@uniform_kn@3:
	cmp	edx, ecx
	jge	SHORT $LN38@uniform_kn@3
	sub	ecx, edx
$LC41@uniform_kn@3:
	dec	ecx
	fmul	ST(0), ST(0)
	jne	SHORT $LC41@uniform_kn@3
	jmp	SHORT $LN38@uniform_kn@3
$LN42@uniform_kn@3:
	fld	QWORD PTR _ke_power
	call	__CIpow
	fld	QWORD PTR _rr$[ebp]
	fxch	ST(1)
$LN38@uniform_kn@3:

; 938  :       fact = ti*tj/p;

	fld	QWORD PTR _tj$[ebp]

; 939  :       energy += fact;
; 940  :       fact *= 4*ke_power/rr;
; 941  :       for ( i = 0 ; i < SDIM ; i++ ) 

	xor	eax, eax
	fld	QWORD PTR _ti$[ebp]
	fmul	ST(0), ST(1)
	fdiv	ST(0), ST(2)
	fld	QWORD PTR _energy$[ebp]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR _energy$[ebp]
	fld	QWORD PTR _ke_power
	fmul	QWORD PTR __real@4010000000000000
	fdivrp	ST(4), ST(0)
	fmulp	ST(3), ST(0)
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN165@uniform_kn@3
$LN37@uniform_kn@3:

; 942  :         v_info->grad[0][i] -= fact*d[i];

	mov	ecx, DWORD PTR [edi+1336]
	fld	QWORD PTR _d$[ebp+eax*8]
	mov	edx, DWORD PTR [ecx]
	fmul	ST(0), ST(3)
	lea	ecx, DWORD PTR [edx+eax*8]
	inc	eax
	fsubr	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN37@uniform_kn@3
$LN165@uniform_kn@3:

; 939  :       energy += fact;
; 940  :       fact *= 4*ke_power/rr;
; 941  :       for ( i = 0 ; i < SDIM ; i++ ) 

	fstp	ST(2)

; 943  :       sum += tj/p;

	fdivp	ST(1), ST(0)
	fadd	QWORD PTR _sum$[ebp]
	fstp	QWORD PTR _sum$[ebp]
	jmp	SHORT $LN131@uniform_kn@3
$LN146@uniform_kn@3:
	fstp	ST(0)
$LN131@uniform_kn@3:

; 944  :     }
; 945  : 
; 946  :     for ( i = 0 ; i < SDIM ; i++ ) d[i] = xleft[i] - y[i];

	xor	edx, edx
	cmp	DWORD PTR _web+616, 4
	jl	$LN134@uniform_kn@3
	mov	ebx, DWORD PTR _xleft$[ebp]
	lea	edi, DWORD PTR _d$[ebp]
	sub	edi, esi
	mov	DWORD PTR tv1823[ebp], edi
	lea	edi, DWORD PTR _d$[ebp+8]
	sub	edi, esi
	mov	DWORD PTR tv1827[ebp], edi
	lea	ecx, DWORD PTR [ebx+24]
	lea	edi, DWORD PTR _d$[ebp+16]
	sub	ebx, esi
	sub	edi, esi
	lea	eax, DWORD PTR [esi+8]
	mov	DWORD PTR tv1831[ebp], edi
	npad	3
$LL111@uniform_kn@3:
	fld	QWORD PTR [ecx-24]
	mov	edi, DWORD PTR tv1823[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _d$[ebp+edx*8-32]
	fld	QWORD PTR [ebx+eax-32]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv1827[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv1831[ebp]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR _web+616
	add	edi, -3					; fffffffdH
	cmp	edx, edi
	jl	SHORT $LL111@uniform_kn@3
$LN134@uniform_kn@3:
	cmp	edx, DWORD PTR _web+616
	jge	SHORT $LN109@uniform_kn@3
	mov	edi, DWORD PTR _xleft$[ebp]
	mov	ecx, DWORD PTR _web+616
	lea	ebx, DWORD PTR _d$[ebp]
	sub	edi, esi
	sub	ebx, esi
	lea	eax, DWORD PTR [esi+edx*8]
	sub	ecx, edx
$LC34@uniform_kn@3:
	fld	QWORD PTR [eax+edi]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [ebx+eax-8]
	jne	SHORT $LC34@uniform_kn@3
$LN109@uniform_kn@3:

; 947  :     rr = SDIM_dot(d,d);

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _d$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot

; 948  :     if ( rr > 1e-18) /* don't do self */

	fld	QWORD PTR __real@3c32725dd1d243ac
	fcomp	ST(1)
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 5
	jp	$LN180@uniform_kn@3

; 949  :      { 
; 950  :        ke_pow(rr,p);

	mov	eax, DWORD PTR _ke_power_flag
	test	eax, eax
	jle	SHORT $LN248@uniform_kn@3
	mov	ecx, DWORD PTR _ke_power_i
	fld	ST(0)
	mov	edx, 1
	cmp	ecx, edx
	jle	SHORT $LN193@uniform_kn@3
	lea	eax, DWORD PTR [ecx-1]
	cmp	eax, 8
	jl	SHORT $LC113@uniform_kn@3
	lea	eax, DWORD PTR [ecx-9]
	shr	eax, 3
	inc	eax
	lea	edx, DWORD PTR [eax*8+1]
$LN114@uniform_kn@3:
	dec	eax
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	jne	SHORT $LN114@uniform_kn@3
$LC113@uniform_kn@3:
	cmp	edx, ecx
	jge	SHORT $LN193@uniform_kn@3
	sub	ecx, edx
$LC29@uniform_kn@3:
	dec	ecx
	fmul	ST(0), ST(1)
	jne	SHORT $LC29@uniform_kn@3
$LN193@uniform_kn@3:
	fstp	ST(1)
$LN21@uniform_kn@3:

; 951  :        sumleft += tj/p;

	fdivr	QWORD PTR _tj$[ebp]
	fadd	QWORD PTR _sumleft$[ebp]
	fstp	QWORD PTR _sumleft$[ebp]
	jmp	SHORT $LN140@uniform_kn@3
$LN248@uniform_kn@3:

; 949  :      { 
; 950  :        ke_pow(rr,p);

	jns	SHORT $LN25@uniform_kn@3
	mov	ecx, DWORD PTR _ke_power_l
	xor	edx, edx
	cmp	ecx, 8
	jl	SHORT $LN139@uniform_kn@3
	lea	eax, DWORD PTR [ecx-8]
	shr	eax, 3
	inc	eax
	lea	edx, DWORD PTR [eax*8]
$LN117@uniform_kn@3:
	dec	eax
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	jne	SHORT $LN117@uniform_kn@3
$LN139@uniform_kn@3:
	cmp	edx, ecx
	jge	SHORT $LN21@uniform_kn@3
	sub	ecx, edx
$LC24@uniform_kn@3:
	dec	ecx
	fmul	ST(0), ST(0)
	jne	SHORT $LC24@uniform_kn@3

; 951  :        sumleft += tj/p;

	fdivr	QWORD PTR _tj$[ebp]
	fadd	QWORD PTR _sumleft$[ebp]
	fstp	QWORD PTR _sumleft$[ebp]
	jmp	SHORT $LN140@uniform_kn@3
$LN25@uniform_kn@3:

; 949  :      { 
; 950  :        ke_pow(rr,p);

	fld	QWORD PTR _ke_power
	call	__CIpow

; 951  :        sumleft += tj/p;

	fdivr	QWORD PTR _tj$[ebp]
	fadd	QWORD PTR _sumleft$[ebp]
	fstp	QWORD PTR _sumleft$[ebp]
	jmp	SHORT $LN140@uniform_kn@3
$LN180@uniform_kn@3:
	fstp	ST(0)
$LN140@uniform_kn@3:

; 952  :      }
; 953  : 
; 954  :     for ( i = 0 ; i < SDIM ; i++ ) d[i] = xright[i] - y[i];

	xor	edx, edx
	cmp	DWORD PTR _web+616, 4
	jl	$LN135@uniform_kn@3
	mov	edi, DWORD PTR _xright$[ebp]
	lea	ebx, DWORD PTR _d$[ebp]
	sub	ebx, esi
	mov	DWORD PTR tv1823[ebp], ebx
	lea	ebx, DWORD PTR _d$[ebp+8]
	sub	ebx, esi
	mov	DWORD PTR tv1827[ebp], ebx
	lea	ecx, DWORD PTR [edi+24]
	lea	ebx, DWORD PTR _d$[ebp+16]
	sub	edi, esi
	sub	ebx, esi
	lea	eax, DWORD PTR [esi+8]
	mov	DWORD PTR tv1831[ebp], ebx
	npad	5
$LL120@uniform_kn@3:
	fld	QWORD PTR [ecx-24]
	mov	ebx, DWORD PTR tv1823[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _d$[ebp+edx*8-32]
	fld	QWORD PTR [edi+eax-32]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv1827[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv1831[ebp]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR _web+616
	add	ebx, -3					; fffffffdH
	cmp	edx, ebx
	jl	SHORT $LL120@uniform_kn@3
$LN135@uniform_kn@3:
	cmp	edx, DWORD PTR _web+616
	jge	SHORT $LN136@uniform_kn@3
	mov	ebx, DWORD PTR _xright$[ebp]
	mov	ecx, DWORD PTR _web+616
	lea	edi, DWORD PTR _d$[ebp]
	sub	ebx, esi
	sub	edi, esi
	lea	eax, DWORD PTR [esi+edx*8]
	sub	ecx, edx
$LC20@uniform_kn@3:
	fld	QWORD PTR [eax+ebx]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax+edi-8]
	jne	SHORT $LC20@uniform_kn@3
$LN136@uniform_kn@3:

; 955  :     rr = SDIM_dot(d,d);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _d$[ebp]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot

; 956  :     if ( rr > 1e-18) /* don't do self */

	fld	QWORD PTR __real@3c32725dd1d243ac
	fcomp	ST(1)
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 5
	jp	$LN211@uniform_kn@3

; 957  :      {
; 958  :        ke_pow(rr,p);

	mov	eax, DWORD PTR _ke_power_flag
	test	eax, eax
	jle	SHORT $LN249@uniform_kn@3
	mov	ecx, DWORD PTR _ke_power_i
	fld	ST(0)
	mov	edx, 1
	cmp	ecx, edx
	jle	SHORT $LN224@uniform_kn@3
	lea	eax, DWORD PTR [ecx-1]
	cmp	eax, 8
	jl	SHORT $LC122@uniform_kn@3
	lea	eax, DWORD PTR [ecx-9]
	shr	eax, 3
	inc	eax
	lea	edx, DWORD PTR [eax*8+1]
$LN123@uniform_kn@3:
	dec	eax
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	jne	SHORT $LN123@uniform_kn@3
$LC122@uniform_kn@3:
	cmp	edx, ecx
	jge	SHORT $LN224@uniform_kn@3
	sub	ecx, edx
$LC15@uniform_kn@3:
	dec	ecx
	fmul	ST(0), ST(1)
	jne	SHORT $LC15@uniform_kn@3
$LN224@uniform_kn@3:
	fstp	ST(1)
$LN7@uniform_kn@3:

; 959  :        sumright += tj/p;

	fdivr	QWORD PTR _tj$[ebp]
	fadd	QWORD PTR _sumright$[ebp]
	fstp	QWORD PTR _sumright$[ebp]
	jmp	SHORT $LN250@uniform_kn@3
$LN249@uniform_kn@3:

; 957  :      {
; 958  :        ke_pow(rr,p);

	jns	SHORT $LN11@uniform_kn@3
	mov	ecx, DWORD PTR _ke_power_l
	xor	edx, edx
	cmp	ecx, 8
	jl	SHORT $LN141@uniform_kn@3
	lea	eax, DWORD PTR [ecx-8]
	shr	eax, 3
	inc	eax
	lea	edx, DWORD PTR [eax*8]
$LN126@uniform_kn@3:
	dec	eax
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(0)
	jne	SHORT $LN126@uniform_kn@3
$LN141@uniform_kn@3:
	cmp	edx, ecx
	jge	SHORT $LN7@uniform_kn@3
	sub	ecx, edx
$LC10@uniform_kn@3:
	dec	ecx
	fmul	ST(0), ST(0)
	jne	SHORT $LC10@uniform_kn@3

; 959  :        sumright += tj/p;

	fdivr	QWORD PTR _tj$[ebp]
	fadd	QWORD PTR _sumright$[ebp]
	fstp	QWORD PTR _sumright$[ebp]
	jmp	SHORT $LN250@uniform_kn@3
$LN11@uniform_kn@3:

; 957  :      {
; 958  :        ke_pow(rr,p);

	fld	QWORD PTR _ke_power
	call	__CIpow

; 959  :        sumright += tj/p;

	fdivr	QWORD PTR _tj$[ebp]
	fadd	QWORD PTR _sumright$[ebp]
	fstp	QWORD PTR _sumright$[ebp]
	jmp	SHORT $LN250@uniform_kn@3
$LN211@uniform_kn@3:

; 956  :     if ( rr > 1e-18) /* don't do self */

	fstp	ST(0)
$LN250@uniform_kn@3:

; 959  :        sumright += tj/p;

	mov	edx, DWORD PTR _web+12
$LN55@uniform_kn@3:

; 927  :   FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR tv1218[ebp]
	mov	eax, DWORD PTR [ecx+edx]
	mov	ebx, DWORD PTR [eax]
	mov	DWORD PTR _v_id$[ebp], ebx
	test	ebx, 268435456				; 10000000H
	jne	$LL56@uniform_kn@3
$LN54@uniform_kn@3:

; 960  :      }
; 961  :   }
; 962  :   for ( i = 0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	cmp	DWORD PTR _web+616, 4
	jl	$LN137@uniform_kn@3
	mov	edi, DWORD PTR _x$[ebp]
	mov	ebx, DWORD PTR _xright$[ebp]
	lea	edx, DWORD PTR [ebx+16]

; 964  :     right[i] = x[i] - xright[i];

	sub	ebx, edi
	mov	DWORD PTR tv3633[ebp], ebx
	mov	esi, DWORD PTR _xleft$[ebp]
	lea	ebx, DWORD PTR _left$[ebp]
	sub	ebx, edi
	mov	DWORD PTR tv3646[ebp], ebx
	lea	ebx, DWORD PTR _right$[ebp]
	sub	ebx, edi
	mov	DWORD PTR tv3782[ebp], ebx
	lea	ebx, DWORD PTR _left$[ebp+8]
	sub	ebx, edi
	mov	DWORD PTR tv3786[ebp], ebx
	lea	ebx, DWORD PTR _right$[ebp+8]
	sub	ebx, edi
	mov	DWORD PTR tv3790[ebp], ebx
	lea	ebx, DWORD PTR _left$[ebp+16]
	sub	ebx, edi
	mov	DWORD PTR tv3794[ebp], ebx
	lea	ebx, DWORD PTR _right$[ebp+16]
	sub	ebx, edi
	mov	DWORD PTR tv3798[ebp], ebx
	mov	ebx, DWORD PTR _xleft$[ebp]
	sub	esi, edi
	sub	ebx, DWORD PTR _xright$[ebp]
	lea	eax, DWORD PTR [edi+8]
	npad	7
$LL129@uniform_kn@3:

; 963  :   { left[i] = x[i] - xleft[i];

	fld	QWORD PTR [eax-8]
	mov	edi, DWORD PTR _xleft$[ebp]
	fsub	QWORD PTR [edi+ecx*8]
	mov	edi, DWORD PTR tv3646[ebp]

; 964  :     right[i] = x[i] - xright[i];

	add	ecx, 4
	add	eax, 32					; 00000020H
	fstp	QWORD PTR _left$[ebp+ecx*8-32]
	add	edx, 32					; 00000020H
	fld	QWORD PTR [eax-40]
	fsub	QWORD PTR [edx-48]
	fstp	QWORD PTR _right$[ebp+ecx*8-32]
	fld	QWORD PTR [eax-32]
	fsub	QWORD PTR [esi+eax-32]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv3633[ebp]
	fld	QWORD PTR [eax-32]
	fsub	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv3782[ebp]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv3786[ebp]
	fld	QWORD PTR [eax-24]
	fsub	QWORD PTR [ebx+edx-32]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv3790[ebp]
	fld	QWORD PTR [eax-24]
	fsub	QWORD PTR [edx-32]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR _xleft$[ebp]
	fld	QWORD PTR [eax-16]
	fsub	QWORD PTR [edi+ecx*8-8]
	mov	edi, DWORD PTR tv3794[ebp]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv3798[ebp]
	fld	QWORD PTR [eax-16]
	fsub	QWORD PTR [edx-24]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR _web+616
	add	edi, -3					; fffffffdH
	cmp	ecx, edi
	jl	$LL129@uniform_kn@3
$LN137@uniform_kn@3:
	mov	edx, DWORD PTR _x$[ebp]
	cmp	ecx, DWORD PTR _web+616
	jge	SHORT $LN127@uniform_kn@3

; 960  :      }
; 961  :   }
; 962  :   for ( i = 0 ; i < SDIM ; i++ )

	mov	ebx, DWORD PTR _xright$[ebp]
	mov	esi, DWORD PTR _xleft$[ebp]
	sub	ebx, edx
	lea	edi, DWORD PTR _left$[ebp]
	mov	DWORD PTR tv3633[ebp], ebx
	sub	esi, edi
	lea	ebx, DWORD PTR _right$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	sub	edi, edx
	sub	ebx, edx
	mov	edx, DWORD PTR _web+616
	sub	edx, ecx
$LC6@uniform_kn@3:

; 963  :   { left[i] = x[i] - xleft[i];

	fld	QWORD PTR [eax]
	lea	ecx, DWORD PTR [edi+eax]
	fsub	QWORD PTR [ecx+esi]
	add	eax, 8
	dec	edx
	fstp	QWORD PTR [ecx]

; 964  :     right[i] = x[i] - xright[i];

	mov	ecx, DWORD PTR tv3633[ebp]
	fld	QWORD PTR [eax-8]
	fsub	QWORD PTR [ecx+eax-8]
	fstp	QWORD PTR [ebx+eax-8]
	jne	SHORT $LC6@uniform_kn@3
$LN127@uniform_kn@3:

; 965  :   }
; 966  :   leftmag = sqrt(SDIM_dot(left,left));

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _left$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR _leftmag$[ebp]

; 967  :   rightmag = sqrt(SDIM_dot(right,right));

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	pop	edi

; 968  :   for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	pop	esi
	pop	ebx
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN242@uniform_kn@3
	fld	QWORD PTR _leftmag$[ebp]
	fld	QWORD PTR _sumright$[ebp]
	fld	QWORD PTR _sumleft$[ebp]
	fld	QWORD PTR _sum$[ebp]
$LN3@uniform_kn@3:

; 969  :       v_info->grad[0][i] += ((left[i]/leftmag + right[i]/rightmag)*sum
; 970  :                      + left[i]/leftmag*sumleft + right[i]/rightmag*sumright);

	fld	QWORD PTR _right$[ebp+eax*8]
	mov	edx, DWORD PTR _v_info$GSCopy$[ebp]
	fdiv	ST(0), ST(5)
	mov	ecx, DWORD PTR [edx+1336]
	mov	edx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [edx+eax*8]
	inc	eax
	fld	QWORD PTR _left$[ebp+eax*8-8]
	fdiv	ST(0), ST(5)
	fld	ST(0)
	fadd	ST(0), ST(2)
	fmul	ST(0), ST(3)
	fxch	ST(1)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN3@uniform_kn@3

; 968  :   for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(4)
	fstp	ST(2)
	fstp	ST(0)
	fstp	ST(0)
$LN242@uniform_kn@3:

; 971  :   return energy;
; 972  : } // end uniform_knot_energy_gradient()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(0)
	fld	QWORD PTR _energy$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_uniform_knot_energy_gradient ENDP
_TEXT	ENDS
PUBLIC	_uniform_normalization
; Function compile flags: /Ogtp
;	COMDAT _uniform_normalization
_TEXT	SEGMENT
_power$ = -40						; size = 8
tv343 = -32						; size = 8
_tj$ = -32						; size = 8
_energy$ = -24						; size = 8
_dist$ = -16						; size = 8
_ti$ = -8						; size = 8
_v_info$ = 8						; size = 4
_uniform_normalization PROC				; COMDAT

; 983  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 984  :   vertex_id v_id;
; 985  :   edge_id e_id,ee_id;
; 986  :   REAL ti,tj;
; 987  :   REAL dist=0.,energy=0.;
; 988  :   REAL power;
; 989  : 
; 990  :   e_id = get_vertex_edge(v_info->id);

	mov	ecx, DWORD PTR _web+12
	fldz
	push	ebx
	fst	QWORD PTR _dist$[ebp]
	mov	ebx, DWORD PTR _v_info$[ebp]
	fst	QWORD PTR _energy$[ebp]
	mov	eax, DWORD PTR [ebx]
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edi
	mov	edi, DWORD PTR [edx+28]

; 991  :   if ( !valid_id(e_id) ) return 0.0;

	test	edi, 268435456				; 10000000H
	je	$LN5@uniform_no

; 992  :   ti = get_edge_length(e_id);

	push	edi
	fstp	ST(0)
	call	_get_edge_length
	fstp	QWORD PTR _ti$[ebp]

; 993  :   ee_id = get_next_tail_edge(e_id); /* assuming exactly two edges per vertex */

	mov	edx, DWORD PTR _web+124
	mov	eax, edi
	shr	eax, 27					; 0000001bH
	mov	ecx, edi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	and	eax, 1
	mov	eax, DWORD PTR [ecx+eax*4+32]

; 994  :   ti = (ti + get_edge_length(ee_id))/2;

	push	eax
	call	_get_edge_length
	fadd	QWORD PTR _ti$[ebp]

; 995  : 
; 996  :   power = globals(exponent_param)->value.real;

	mov	eax, DWORD PTR _exponent_param
	mov	ecx, eax
	fmul	QWORD PTR __real@3fe0000000000000
	and	ecx, -16777216				; ff000000H
	add	esp, 8
	fstp	QWORD PTR _ti$[ebp]
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN7@uniform_no
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN9@uniform_no
	mov	edx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [edx]
	jmp	SHORT $LN8@uniform_no
$LN9@uniform_no:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN7@uniform_no
	mov	ecx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN8@uniform_no
$LN7@uniform_no:
	mov	edx, DWORD PTR _web+5652
	mov	ecx, DWORD PTR _dymem
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ecx]
$LN8@uniform_no:
	fld	QWORD PTR [eax+64]

; 997  :   for ( v_id = get_edge_headv(e_id) ; v_id != v_info->id ;
; 998  :              e_id = ee_id, v_id = get_edge_headv(e_id) )

	push	edi
	fstp	QWORD PTR _power$[ebp]
	call	_get_edge_headv
	add	esp, 4
	cmp	eax, DWORD PTR [ebx]
	je	$LN23@uniform_no
	push	esi
$LL24@uniform_no:

; 999  :   {
; 1000 :     dist += (tj = get_edge_length(e_id));

	push	edi
	call	_get_edge_length
	fst	QWORD PTR _tj$[ebp]

; 1001 :     ee_id = inverse_id(get_next_head_edge(e_id));

	mov	eax, DWORD PTR _web+124
	fadd	QWORD PTR _dist$[ebp]
	mov	edx, edi
	shr	edx, 27					; 0000001bH
	not	edx
	fstp	QWORD PTR _dist$[ebp]
	and	edi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edi*4]
	and	edx, 1
	mov	esi, DWORD PTR [ecx+edx*4+32]

; 1002 :     tj = (tj + get_edge_length(ee_id))/2;

	push	esi
	call	_get_edge_length
	fadd	QWORD PTR _tj$[ebp]
	add	esp, 8
	fmul	QWORD PTR __real@3fe0000000000000

; 1003 :     energy += ti*tj/pow(dist,power);

	fmul	QWORD PTR _ti$[ebp]
	fstp	QWORD PTR tv343[ebp]
	fld	QWORD PTR _dist$[ebp]
	fld	QWORD PTR _power$[ebp]
	call	__CIpow
	fdivr	QWORD PTR tv343[ebp]
	mov	edx, DWORD PTR _web+124
	mov	ecx, DWORD PTR _web+216
	mov	edi, esi
	fadd	QWORD PTR _energy$[ebp]
	fstp	QWORD PTR _energy$[ebp]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN16@uniform_no

; 997  :   for ( v_id = get_edge_headv(e_id) ; v_id != v_info->id ;
; 998  :              e_id = ee_id, v_id = get_edge_headv(e_id) )

	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edx+304]
	mov	eax, DWORD PTR [eax+ecx]
	jmp	SHORT $LN22@uniform_no
$LN16@uniform_no:
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR _dymem
	add	eax, DWORD PTR [ecx+edx+304]
	mov	ecx, DWORD PTR _web+636
	mov	eax, DWORD PTR [eax+ecx*4]
$LN22@uniform_no:
	cmp	eax, DWORD PTR [ebx]
	jne	$LL24@uniform_no
	pop	esi
$LN23@uniform_no:

; 1004 :   }
; 1005 :   return 2*energy;

	fld	QWORD PTR _energy$[ebp]
	fadd	ST(0), ST(0)
$LN5@uniform_no:
	pop	edi
	pop	ebx

; 1006 : } // end uniform_normalization()

	mov	esp, ebp
	pop	ebp
	ret	0
_uniform_normalization ENDP
_TEXT	ENDS
PUBLIC	_uniform_binormalization
; Function compile flags: /Ogtp
;	COMDAT _uniform_binormalization
_TEXT	SEGMENT
_power$ = -48						; size = 8
_energy$ = -40						; size = 8
_ti$ = -32						; size = 8
_comp_len$ = -24					; size = 8
_dist$ = -16						; size = 8
tv467 = -8						; size = 8
_tj$ = -8						; size = 8
tv430 = -4						; size = 4
_v_info$ = 8						; size = 4
_uniform_binormalization PROC				; COMDAT

; 1017 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H

; 1018 :   vertex_id v_id;
; 1019 :   edge_id e_id,ee_id;
; 1020 :   REAL ti,tj;
; 1021 :   REAL dist=0.,energy=0.,comp_len;
; 1022 :   REAL power;
; 1023 : 
; 1024 :   e_id = get_vertex_edge(v_info->id);

	mov	eax, DWORD PTR _v_info$[ebp]
	fldz
	mov	ecx, DWORD PTR [eax]
	fst	QWORD PTR _dist$[ebp]
	mov	edx, DWORD PTR _web+12
	fst	QWORD PTR _energy$[ebp]
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	push	esi
	mov	esi, DWORD PTR [eax+28]

; 1025 :   if ( !valid_id(e_id) ) return 0.0;

	test	esi, 268435456				; 10000000H
	je	$LN8@uniform_bi
	push	ebx
	fstp	ST(0)
	push	edi

; 1026 :   comp_len = ti = get_edge_length(e_id);

	push	esi
	call	_get_edge_length
	fst	QWORD PTR _ti$[ebp]

; 1027 :   ee_id = get_next_tail_edge(e_id); /* assuming exactly two edges per vertex */

	mov	ecx, DWORD PTR _web+124
	fstp	QWORD PTR _comp_len$[ebp]
	mov	ebx, esi
	mov	edi, esi
	and	ebx, 134217727				; 07ffffffH
	shr	edi, 27					; 0000001bH
	add	ebx, ebx
	mov	eax, edi
	and	eax, 1
	add	ebx, ebx
	mov	edx, DWORD PTR [ebx+ecx]
	mov	DWORD PTR tv430[ebp], eax
	mov	eax, DWORD PTR [edx+eax*4+32]

; 1028 :   ti = (ti + get_edge_length(ee_id))/2;

	push	eax
	call	_get_edge_length
	fadd	QWORD PTR _ti$[ebp]

; 1029 : 
; 1030 :   power = globals(exponent_param)->value.real;

	mov	eax, DWORD PTR _exponent_param
	mov	edx, DWORD PTR _dymem
	fmul	QWORD PTR __real@3fe0000000000000
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	add	esp, 8
	fstp	QWORD PTR _ti$[ebp]
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN10@uniform_bi
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN12@uniform_bi
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN11@uniform_bi
$LN12@uniform_bi:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN10@uniform_bi
	mov	ecx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN11@uniform_bi
$LN10@uniform_bi:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+edx]
$LN11@uniform_bi:
	fld	QWORD PTR [eax+64]

; 1031 :   for ( ee_id = inverse_id(get_next_head_edge(e_id)); ee_id != e_id;
; 1032 :           ee_id = inverse_id(get_next_head_edge(ee_id)) )

	mov	eax, DWORD PTR _web+124
	mov	ecx, DWORD PTR [ebx+eax]
	fstp	QWORD PTR _power$[ebp]
	not	edi
	and	edi, 1
	mov	edi, DWORD PTR [ecx+edi*4+32]
	cmp	edi, esi
	je	SHORT $LN4@uniform_bi
	npad	7
$LL6@uniform_bi:

; 1033 :      comp_len += get_edge_length(ee_id);

	push	edi
	call	_get_edge_length
	fadd	QWORD PTR _comp_len$[ebp]
	mov	eax, DWORD PTR _web+124
	mov	edx, edi
	shr	edx, 27					; 0000001bH
	fstp	QWORD PTR _comp_len$[ebp]
	and	edi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edi*4]
	not	edx
	and	edx, 1
	mov	edi, DWORD PTR [ecx+edx*4+32]
	add	esp, 4
	cmp	edi, esi
	jne	SHORT $LL6@uniform_bi

; 1031 :   for ( ee_id = inverse_id(get_next_head_edge(e_id)); ee_id != e_id;
; 1032 :           ee_id = inverse_id(get_next_head_edge(ee_id)) )

	mov	edx, DWORD PTR _dymem
$LN4@uniform_bi:

; 1034 :   for ( v_id = get_edge_headv(e_id) ; v_id != v_info->id ;
; 1035 :              e_id = ee_id, v_id = get_edge_headv(e_id) )

	cmp	DWORD PTR tv430[ebp], 0
	mov	eax, DWORD PTR [ebx+eax]
	mov	ecx, DWORD PTR _web+216
	je	SHORT $LN25@uniform_bi
	mov	edx, DWORD PTR [ecx+edx+304]
	mov	eax, DWORD PTR [eax+edx]
	jmp	SHORT $LN24@uniform_bi
$LN25@uniform_bi:
	add	eax, DWORD PTR [ecx+edx+304]
	mov	edx, DWORD PTR _web+636
	mov	eax, DWORD PTR [eax+edx*4]
$LN24@uniform_bi:
	mov	ebx, DWORD PTR _v_info$[ebp]
	cmp	eax, DWORD PTR [ebx]
	je	$LN38@uniform_bi
	npad	5
$LL28@uniform_bi:

; 1036 :   {
; 1037 :     dist += (tj = get_edge_length(e_id));

	push	esi
	call	_get_edge_length
	fst	QWORD PTR _tj$[ebp]

; 1038 :     ee_id = inverse_id(get_next_head_edge(e_id));

	mov	ecx, DWORD PTR _web+124
	fadd	QWORD PTR _dist$[ebp]
	mov	eax, esi
	shr	eax, 27					; 0000001bH
	not	eax
	fstp	QWORD PTR _dist$[ebp]
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+esi*4]
	and	eax, 1
	mov	edi, DWORD PTR [edx+eax*4+32]

; 1039 :     tj = (tj + get_edge_length(ee_id))/2;

	push	edi
	call	_get_edge_length
	fadd	QWORD PTR _tj$[ebp]
	add	esp, 8
	fmul	QWORD PTR __real@3fe0000000000000

; 1040 :     energy += ti*tj/pow((2*dist<comp_len? dist : comp_len-dist), power);

	fld	QWORD PTR _dist$[ebp]
	fld	ST(0)
	fadd	ST(0), ST(1)
	fld	QWORD PTR _comp_len$[ebp]
	fcom	ST(1)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 65					; 00000041H
	jne	SHORT $LN16@uniform_bi
	fstp	ST(0)
	jmp	SHORT $LN17@uniform_bi
$LN16@uniform_bi:
	fsubrp	ST(1), ST(0)
$LN17@uniform_bi:
	fxch	ST(1)
	fmul	QWORD PTR _ti$[ebp]
	fstp	QWORD PTR tv467[ebp]
	fld	QWORD PTR _power$[ebp]
	call	__CIpow
	fdivr	QWORD PTR tv467[ebp]
	mov	eax, DWORD PTR _web+124
	mov	edx, DWORD PTR _web+216
	mov	esi, edi
	fadd	QWORD PTR _energy$[ebp]
	fstp	QWORD PTR _energy$[ebp]
	test	edi, 134217728				; 08000000H
	je	SHORT $LN29@uniform_bi

; 1034 :   for ( v_id = get_edge_headv(e_id) ; v_id != v_info->id ;
; 1035 :              e_id = ee_id, v_id = get_edge_headv(e_id) )

	and	edi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edi*4]
	mov	eax, DWORD PTR _dymem
	mov	edx, DWORD PTR [edx+eax+304]
	mov	eax, DWORD PTR [ecx+edx]
	jmp	SHORT $LN37@uniform_bi
$LN29@uniform_bi:
	and	edi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edi*4]
	mov	eax, DWORD PTR _dymem
	add	ecx, DWORD PTR [edx+eax+304]
	mov	edx, DWORD PTR _web+636
	mov	eax, DWORD PTR [ecx+edx*4]
$LN37@uniform_bi:
	cmp	eax, DWORD PTR [ebx]
	jne	$LL28@uniform_bi
$LN38@uniform_bi:

; 1041 :   }
; 1042 :   return energy;

	fld	QWORD PTR _energy$[ebp]
	pop	edi
	pop	ebx
$LN8@uniform_bi:
	pop	esi

; 1043 : } // end uniform_binormalization()

	mov	esp, ebp
	pop	ebp
	ret	0
_uniform_binormalization ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@CINEMMIH@surface_knot_power?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_facet_knot_energy_init
EXTRN	_kb_calloc:PROC
EXTRN	_myfree:PROC
EXTRN	_f_sums:DWORD
;	COMDAT ??_C@_0BD@CINEMMIH@surface_knot_power?$AA@
CONST	SEGMENT
??_C@_0BD@CINEMMIH@surface_knot_power?$AA@ DB 'surface_knot_power', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _facet_knot_energy_init
_TEXT	SEGMENT
_tj$ = -112						; size = 8
_ti$90195 = -104					; size = 8
_power$ = -96						; size = 8
tv1008 = -88						; size = 4
tv1010 = -84						; size = 4
tv448 = -80						; size = 4
tv1014 = -76						; size = 4
tv1012 = -72						; size = 4
tv466 = -68						; size = 4
_ordv$90191 = -64					; size = 4
_x$ = -60						; size = 4
_ordvv$90214 = -56					; size = 4
_d$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_facet_knot_energy_init PROC				; COMDAT

; 1059 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1060 :   REAL *x;
; 1061 :   vertex_id v_id,vv_id; 
; 1062 :   int i;
; 1063 :   REAL d[MAXCOORD]; /* difference vector between vertices */
; 1064 :   REAL rr;
; 1065 :   REAL power;
; 1066 :   REAL tj;  
; 1067 : 
; 1068 :    exponent_param = lookup_global(SURF_KNOTPOW_NAME);

	push	OFFSET ??_C@_0BD@CINEMMIH@surface_knot_power?$AA@
	call	_lookup_global
	add	esp, 4
	mov	DWORD PTR _exponent_param, eax

; 1069 :   if ( exponent_param < 0 ) /* missing, so add */

	test	eax, eax
	jns	$LN16@facet_knot

; 1070 :   { exponent_param = add_global(SURF_KNOTPOW_NAME);

	push	OFFSET ??_C@_0BD@CINEMMIH@surface_knot_power?$AA@
	call	_add_global

; 1071 :     globals(exponent_param)->value.real = 4.0;  /* default */

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	add	esp, 4
	mov	DWORD PTR _exponent_param, eax
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN19@facet_knot
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN21@facet_knot
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN20@facet_knot
$LN21@facet_knot:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN19@facet_knot
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN20@facet_knot
$LN19@facet_knot:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN20@facet_knot:
	fld	QWORD PTR __real@4010000000000000
	fstp	QWORD PTR [eax+64]

; 1072 :     globals(exponent_param)->flags |=  ORDINARY_PARAM | RECALC_PARAMETER | ALWAYS_RECALC;

	mov	eax, DWORD PTR _exponent_param
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN25@facet_knot
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN27@facet_knot
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN26@facet_knot
$LN27@facet_knot:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN25@facet_knot
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN26@facet_knot
$LN25@facet_knot:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN26@facet_knot:
	or	DWORD PTR [eax+192], 134217737		; 08000009H
	mov	eax, DWORD PTR _exponent_param
$LN16@facet_knot:

; 1073 :   }
; 1074 :     
; 1075 :   power = globals(exponent_param)->value.real;

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN31@facet_knot
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN33@facet_knot
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN32@facet_knot
$LN33@facet_knot:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN31@facet_knot
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN32@facet_knot
$LN31@facet_knot:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN32@facet_knot:
	fld	QWORD PTR [eax+64]

; 1076 : 
; 1077 :   /* basic sums */
; 1078 :   if ( f_sums ) myfree((char*)f_sums);

	mov	eax, DWORD PTR _f_sums
	fstp	QWORD PTR _power$[ebp]
	test	eax, eax
	je	SHORT $LN15@facet_knot
	push	eax
	call	_myfree
	add	esp, 4
$LN15@facet_knot:

; 1079 :   f_sums = (REAL *)mycalloc(web.skel[VERTEX].max_ord+1,sizeof(REAL));

	mov	ecx, DWORD PTR _web+68
	push	1079					; 00000437H
	push	OFFSET ??_C@_07GIJDMJFD@KNOT1?4C?$AA@
	inc	ecx
	push	8
	push	ecx
	call	_kb_calloc

; 1080 : 
; 1081 :   FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR _web+48
	mov	edx, ecx
	shr	edx, 28					; 0000001cH
	add	esp, 16					; 00000010H
	and	edx, 1
	mov	DWORD PTR _f_sums, eax
	je	$LN12@facet_knot
	push	ebx
	push	esi
	push	edi
	npad	6
$LL52@facet_knot:
	mov	eax, DWORD PTR _web+12
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	mov	DWORD PTR tv448[ebp], esi
	je	$LN13@facet_knot

; 1082 :   { int ordv = ordinal(v_id);

	mov	DWORD PTR _ordv$90191[ebp], esi
	test	edx, edx
	jne	SHORT $LN38@facet_knot
	mov	DWORD PTR _ordv$90191[ebp], -1
$LN38@facet_knot:

; 1083 :      REAL val;
; 1084 :      REAL ti = get_vertex_length_star(v_id);

	push	ecx
	call	_get_vertex_length_star
	fstp	QWORD PTR _ti$90195[ebp]

; 1085 :      x = get_coord(v_id);

	mov	ecx, DWORD PTR _web+12
	mov	eax, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR _web+104
	mov	ecx, DWORD PTR _dymem
	add	eax, DWORD PTR [edx+ecx+64]

; 1086 :      FOR_ALL_VERTICES(vv_id)

	mov	edx, DWORD PTR _web+48
	mov	ecx, edx
	shr	ecx, 28					; 0000001cH
	add	esp, 4
	and	ecx, 1
	mov	DWORD PTR _x$[ebp], eax
	je	$LN13@facet_knot
	npad	3
$LL50@facet_knot:
	mov	eax, DWORD PTR _web+12
	mov	esi, edx
	and	esi, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR [ebx+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	mov	DWORD PTR tv466[ebp], esi
	je	$LN8@facet_knot

; 1087 :      { REAL *y = get_coord(vv_id);

	mov	eax, DWORD PTR _web+104
	mov	edi, DWORD PTR _dymem
	mov	edi, DWORD PTR [eax+edi+64]
	add	edi, ebx

; 1088 :         int ordvv = ordinal(vv_id);

	mov	DWORD PTR _ordvv$90214[ebp], esi
	test	ecx, ecx
	jne	SHORT $LN40@facet_knot
	mov	DWORD PTR _ordvv$90214[ebp], -1
$LN40@facet_knot:

; 1089 :         if ( ordvv <= ordv ) continue;

	mov	ecx, DWORD PTR _ordvv$90214[ebp]
	cmp	ecx, DWORD PTR _ordv$90191[ebp]
	jle	$LN8@facet_knot

; 1090 :         tj = get_vertex_length_star(vv_id);

	push	edx
	call	_get_vertex_length_star
	fstp	QWORD PTR _tj$[ebp]

; 1091 :         for ( i = 0 ; i < SDIM ; i++ ) d[i] = x[i] - y[i];

	mov	ebx, DWORD PTR _web+616
	add	esp, 4
	xor	edx, edx
	cmp	ebx, 4
	jl	SHORT $LC48@facet_knot
	mov	ecx, DWORD PTR _x$[ebp]
	mov	ebx, DWORD PTR _x$[ebp]
	mov	esi, edi
	neg	esi
	add	ecx, 24					; 00000018H
	add	ebx, esi
	mov	DWORD PTR tv1008[ebp], ebx
	lea	ebx, DWORD PTR _d$[ebp+esi]
	mov	DWORD PTR tv1010[ebp], ebx
	lea	ebx, DWORD PTR _d$[ebp+esi+8]
	lea	esi, DWORD PTR _d$[ebp+esi+16]
	mov	DWORD PTR tv1012[ebp], ebx
	mov	ebx, DWORD PTR _web+616
	lea	eax, DWORD PTR [edi+8]
	mov	DWORD PTR tv1014[ebp], esi
$LL49@facet_knot:
	fld	QWORD PTR [ecx-24]
	mov	esi, DWORD PTR tv1008[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _d$[ebp+edx*8-32]
	fld	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv1010[ebp]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv1012[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv1014[ebp]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [esi+eax-32]
	lea	esi, DWORD PTR [ebx-3]
	cmp	edx, esi
	jl	SHORT $LL49@facet_knot
	mov	esi, DWORD PTR tv466[ebp]
$LC48@facet_knot:
	cmp	edx, ebx
	jge	SHORT $LN47@facet_knot
	mov	ecx, DWORD PTR _x$[ebp]
	lea	eax, DWORD PTR [edi+edx*8]
	neg	edi
	lea	esi, DWORD PTR [edi+ecx]
	mov	ecx, ebx
	lea	edi, DWORD PTR _d$[ebp+edi]
	sub	ecx, edx
$LC3@facet_knot:
	fld	QWORD PTR [esi+eax]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [edi+eax-8]
	jne	SHORT $LC3@facet_knot
	mov	esi, DWORD PTR tv466[ebp]
$LN47@facet_knot:

; 1092 :         rr = SDIM_dot(d,d);

	lea	edx, DWORD PTR _d$[ebp]
	push	ebx
	push	edx
	mov	eax, edx
	push	eax
	call	_dot

; 1093 :         val = pow(rr,power/2);  /* inverse power potential */

	fld	QWORD PTR _power$[ebp]
	fmul	QWORD PTR __real@3fe0000000000000
	add	esp, 12					; 0000000cH
	call	__CIpow

; 1094 :         f_sums[ordv] += tj/val;

	fld	QWORD PTR _tj$[ebp]
	fdiv	ST(0), ST(1)
	mov	eax, DWORD PTR _f_sums
	mov	ecx, DWORD PTR _ordv$90191[ebp]
	fadd	QWORD PTR [eax+ecx*8]
	fstp	QWORD PTR [eax+ecx*8]

; 1095 :         f_sums[ordvv] += ti/val;

	mov	eax, DWORD PTR _f_sums
	mov	ecx, DWORD PTR _ordvv$90214[ebp]
	fdivr	QWORD PTR _ti$90195[ebp]
	fadd	QWORD PTR [eax+ecx*8]
	fstp	QWORD PTR [eax+ecx*8]
$LN8@facet_knot:

; 1086 :      FOR_ALL_VERTICES(vv_id)

	mov	ecx, DWORD PTR _web+12
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR [edx]
	mov	ecx, edx
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	jne	$LL50@facet_knot
	mov	esi, DWORD PTR tv448[ebp]
$LN13@facet_knot:

; 1080 : 
; 1081 :   FOR_ALL_VERTICES(v_id)

	mov	eax, DWORD PTR _web+12
	mov	ecx, DWORD PTR [eax+esi*4]
	mov	ecx, DWORD PTR [ecx]
	mov	edx, ecx
	shr	edx, 28					; 0000001cH
	and	edx, 1
	jne	$LL52@facet_knot
	pop	edi
	pop	esi
	pop	ebx
$LN12@facet_knot:

; 1096 :      }
; 1097 :   }
; 1098 : } // end facet_knot_energy_init()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_knot_energy_init ENDP
_TEXT	ENDS
PUBLIC	_facet_knot_energy
EXTRN	_get_vertex_area_star:PROC
; Function compile flags: /Ogtp
;	COMDAT _facet_knot_energy
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_facet_knot_energy PROC					; COMDAT

; 1112 : { REAL ti,energy;

	push	ebp
	mov	ebp, esp
	push	esi

; 1113 : 
; 1114 :   ti = get_vertex_area_star(v_info->id);

	mov	esi, DWORD PTR _v_info$[ebp]
	mov	eax, DWORD PTR [esi]
	push	eax
	call	_get_vertex_area_star

; 1115 :   energy = ti*f_sums[ordinal(v_info->id)];

	mov	eax, DWORD PTR [esi]
	add	esp, 4
	pop	esi
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@facet_knot@2
	mov	ecx, DWORD PTR _f_sums
	and	eax, 134217727				; 07ffffffH
	fmul	QWORD PTR [ecx+eax*8]

; 1116 :   return energy; /* because pair counts in both orders */
; 1117 : } // end facet_knot_energy()

	pop	ebp
	ret	0
$LN3@facet_knot@2:

; 1115 :   energy = ti*f_sums[ordinal(v_info->id)];

	mov	ecx, DWORD PTR _f_sums
	or	eax, -1
	fmul	QWORD PTR [ecx+eax*8]

; 1116 :   return energy; /* because pair counts in both orders */
; 1117 : } // end facet_knot_energy()

	pop	ebp
	ret	0
_facet_knot_energy ENDP
_TEXT	ENDS
PUBLIC	__real@4018000000000000
PUBLIC	_v_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_facet_knot_energy_gradient
;	COMDAT __real@4018000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\knot1.c
CONST	ENDS
;	COMDAT _facet_knot_energy_gradient
_TEXT	SEGMENT
_power$ = -268						; size = 8
_ti$ = -260						; size = 8
tv2418 = -252						; size = 8
_tj$ = -252						; size = 8
_s11$ = -244						; size = 8
_halfpower$ = -244					; size = 8
_s22$ = -236						; size = 8
tv2008 = -232						; size = 4
_sumi$ = -228						; size = 8
tv2006 = -224						; size = 4
_s12$ = -220						; size = 8
tv2010 = -216						; size = 4
_v_info$GSCopy$ = -212					; size = 4
_x$ = -208						; size = 4
tv2012 = -204						; size = 4
_start_fe$ = -204					; size = 4
tv1010 = -200						; size = 4
_next_fe$ = -200					; size = 4
_side2$ = -196						; size = 48
_side1$ = -148						; size = 48
_d$ = -100						; size = 48
_da$ = -52						; size = 48
_sum$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_v_info$ = 8						; size = 4
_facet_knot_energy_gradient PROC			; COMDAT

; 1132 : { REAL *x = get_coord(v_info->id);

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	edx, DWORD PTR _web+12
	push	ebx
	push	esi
	mov	esi, DWORD PTR _v_info$[ebp]
	mov	eax, DWORD PTR [esi]
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _dymem
	push	edi
	mov	edi, DWORD PTR _web+104
	add	ecx, DWORD PTR [edi+edx+64]

; 1133 :   vertex_id v_id;
; 1134 :   int i;
; 1135 :   REAL d[MAXCOORD]; /* difference vector between vertices */
; 1136 :   REAL rr,p;
; 1137 :   REAL power,halfpower;
; 1138 :   REAL ti,tj;  /* length weights of vertices, ti for home vertex */
; 1139 :   facetedge_id fe,start_fe,next_fe;
; 1140 :   REAL sumi,sumj,sumjj,area;
; 1141 :   REAL s11,s12,s22,side1[MAXCOORD],side2[MAXCOORD];
; 1142 :   REAL da[MAXCOORD],sum[MAXCOORD];
; 1143 : 
; 1144 :   ti = get_vertex_area_star(v_info->id);

	push	eax
	mov	DWORD PTR _v_info$GSCopy$[ebp], esi
	mov	DWORD PTR _x$[ebp], ecx
	call	_get_vertex_area_star
	fstp	QWORD PTR _ti$[ebp]

; 1145 :   power = globals(exponent_param)->value.real;

	mov	eax, DWORD PTR _exponent_param
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	add	esp, 4
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN34@facet_knot@3
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN36@facet_knot@3
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN35@facet_knot@3
$LN36@facet_knot@3:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN34@facet_knot@3
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN35@facet_knot@3
$LN34@facet_knot@3:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN35@facet_knot@3:
	fld	QWORD PTR [eax+64]

; 1146 :   halfpower = power/2;
; 1147 :   for ( i = 0 ; i < SDIM ; i++ ) 

	mov	ebx, DWORD PTR _web+616
	fst	QWORD PTR _power$[ebp]
	xor	eax, eax
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _halfpower$[ebp]
	test	ebx, ebx
	jle	SHORT $LN28@facet_knot@3
	fldz
$LN31@facet_knot@3:

; 1148 :     v_info->grad[0][i] = 0.0; /* intialize gradient */

	mov	ecx, DWORD PTR [esi+1336]
	mov	edx, DWORD PTR [ecx]
	fst	QWORD PTR [edx+eax*8]
	mov	ebx, DWORD PTR _web+616
	inc	eax
	cmp	eax, ebx
	jl	SHORT $LN31@facet_knot@3

; 1149 : 
; 1150 :   /* distant change part */
; 1151 :   for ( i = 0 ; i < SDIM ; i++ ) sum[i] = 0.0;

	fstp	ST(0)
	test	ebx, ebx
	jle	SHORT $LN28@facet_knot@3
	mov	ecx, ebx
	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	xor	eax, eax
	lea	edi, DWORD PTR _sum$[ebp]
	rep stosd
$LN28@facet_knot@3:

; 1152 :   FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR _web+48
	test	ecx, 268435456				; 10000000H
	je	$LN118@facet_knot@3
	npad	7
$LL25@facet_knot@3:
	mov	eax, DWORD PTR _web+12
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	edx, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	mov	DWORD PTR tv1010[ebp], esi
	je	$LN24@facet_knot@3

; 1153 :   { REAL *y = get_coord(v_id);

	mov	eax, DWORD PTR _web+104
	mov	edi, DWORD PTR _dymem
	mov	edi, DWORD PTR [eax+edi+64]

; 1154 : 
; 1155 :     tj = get_vertex_area_star(v_id);

	push	ecx
	add	edi, edx
	call	_get_vertex_area_star
	fstp	QWORD PTR _tj$[ebp]

; 1156 :     for ( i = 0 ; i < SDIM ; i++ ) d[i] = x[i] - y[i];

	mov	ebx, DWORD PTR _web+616
	add	esp, 4
	xor	edx, edx
	cmp	ebx, 4
	jl	$LC105@facet_knot@3
	mov	ecx, DWORD PTR _x$[ebp]
	mov	ebx, DWORD PTR _x$[ebp]
	mov	esi, edi
	neg	esi
	add	ecx, 24					; 00000018H
	add	ebx, esi
	mov	DWORD PTR tv2006[ebp], ebx
	lea	ebx, DWORD PTR _d$[ebp+esi]
	mov	DWORD PTR tv2008[ebp], ebx
	lea	ebx, DWORD PTR _d$[ebp+esi+8]
	lea	esi, DWORD PTR _d$[ebp+esi+16]
	mov	DWORD PTR tv2010[ebp], ebx
	mov	ebx, DWORD PTR _web+616
	lea	eax, DWORD PTR [edi+8]
	mov	DWORD PTR tv2012[ebp], esi
	npad	3
$LL106@facet_knot@3:
	fld	QWORD PTR [ecx-24]
	mov	esi, DWORD PTR tv2006[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _d$[ebp+edx*8-32]
	fld	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv2008[ebp]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv2010[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv2012[ebp]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [esi+eax-32]
	lea	esi, DWORD PTR [ebx-3]
	cmp	edx, esi
	jl	SHORT $LL106@facet_knot@3
	mov	esi, DWORD PTR tv1010[ebp]
$LC105@facet_knot@3:
	cmp	edx, ebx
	jge	SHORT $LN104@facet_knot@3
	mov	ecx, DWORD PTR _x$[ebp]
	lea	eax, DWORD PTR [edi+edx*8]
	neg	edi
	lea	esi, DWORD PTR [edi+ecx]
	mov	ecx, ebx
	lea	edi, DWORD PTR _d$[ebp+edi]
	sub	ecx, edx
$LC20@facet_knot@3:
	fld	QWORD PTR [esi+eax]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [edi+eax-8]
	jne	SHORT $LC20@facet_knot@3
	mov	esi, DWORD PTR tv1010[ebp]
$LN104@facet_knot@3:

; 1157 :     rr = SDIM_dot(d,d);

	lea	edx, DWORD PTR _d$[ebp]
	push	ebx
	push	edx
	mov	eax, edx
	push	eax
	call	_dot

; 1158 :     if ( rr > 1e-12 ) /* don't do self */

	fld	QWORD PTR __real@3d719799812dea11
	fcomp	ST(1)
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 5
	jp	$LN122@facet_knot@3

; 1159 :      { p = power*tj/rr/pow(rr,halfpower);  /* inverse power potential */

	fld	QWORD PTR _tj$[ebp]
	fmul	QWORD PTR _power$[ebp]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR tv2418[ebp]
	fld	QWORD PTR _halfpower$[ebp]
	call	__CIpow
	fdivr	QWORD PTR tv2418[ebp]

; 1160 :        for ( i = 0 ; i < SDIM ; i++ ) 

	mov	ebx, DWORD PTR _web+616
	xor	eax, eax
	cmp	ebx, 4
	jl	SHORT $LC108@facet_knot@3
	lea	ecx, DWORD PTR [ebx-3]
$LN109@facet_knot@3:

; 1161 :           sum[i] -= p*d[i];

	fld	QWORD PTR _d$[ebp+eax*8]
	add	eax, 4
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR _sum$[ebp+eax*8-32]
	fstp	QWORD PTR _sum$[ebp+eax*8-32]
	fld	QWORD PTR _d$[ebp+eax*8-24]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR _sum$[ebp+eax*8-24]
	fstp	QWORD PTR _sum$[ebp+eax*8-24]
	fld	QWORD PTR _d$[ebp+eax*8-16]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR _sum$[ebp+eax*8-16]
	fstp	QWORD PTR _sum$[ebp+eax*8-16]
	fld	QWORD PTR _d$[ebp+eax*8-8]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR _sum$[ebp+eax*8-8]
	fstp	QWORD PTR _sum$[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LN109@facet_knot@3
$LC108@facet_knot@3:

; 1160 :        for ( i = 0 ; i < SDIM ; i++ ) 

	cmp	eax, ebx
	jge	SHORT $LN128@facet_knot@3
$LC16@facet_knot@3:

; 1161 :           sum[i] -= p*d[i];

	fld	QWORD PTR _d$[ebp+eax*8]
	inc	eax
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR _sum$[ebp+eax*8-8]
	fstp	QWORD PTR _sum$[ebp+eax*8-8]
	cmp	eax, ebx
	jl	SHORT $LC16@facet_knot@3

; 1160 :        for ( i = 0 ; i < SDIM ; i++ ) 

	jmp	SHORT $LN128@facet_knot@3
$LN122@facet_knot@3:
	mov	ebx, DWORD PTR _web+616
$LN128@facet_knot@3:
	fstp	ST(0)
$LN24@facet_knot@3:

; 1152 :   FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR _web+12
	mov	edx, DWORD PTR [esi+ecx]
	mov	ecx, DWORD PTR [edx]
	test	ecx, 268435456				; 10000000H
	jne	$LL25@facet_knot@3
	mov	esi, DWORD PTR _v_info$GSCopy$[ebp]
$LN118@facet_knot@3:

; 1162 :      }
; 1163 :   }
; 1164 :   for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	test	ebx, ebx
	jle	SHORT $LN11@facet_knot@3
	fld	QWORD PTR _ti$[ebp]
	fadd	ST(0), ST(0)
$LN13@facet_knot@3:

; 1165 :       v_info->grad[0][i] += 2*ti*sum[i];

	mov	ecx, DWORD PTR [esi+1336]
	fld	QWORD PTR _sum$[ebp+eax*8]
	mov	edx, DWORD PTR [ecx]
	fmul	ST(0), ST(1)
	lea	ecx, DWORD PTR [edx+eax*8]
	inc	eax
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN13@facet_knot@3

; 1162 :      }
; 1163 :   }
; 1164 :   for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)
$LN11@facet_knot@3:

; 1166 :  
; 1167 :   /* area change part */
; 1168 :   /* go around all neighbor vertices */
; 1169 :   start_fe = get_vertex_fe(v_info->id);

	mov	esi, DWORD PTR [esi]
	push	esi
	call	_get_vertex_fe
	add	esp, 4
	mov	DWORD PTR _start_fe$[ebp], eax

; 1170 :   sumi = f_sums[ordinal(v_info->id)];

	test	esi, 268435456				; 10000000H
	je	SHORT $LN40@facet_knot@3
	and	esi, 134217727				; 07ffffffH
	jmp	SHORT $LN41@facet_knot@3
$LN40@facet_knot@3:
	or	esi, -1
$LN41@facet_knot@3:
	mov	ecx, DWORD PTR _f_sums
	fld	QWORD PTR [ecx+esi*8]
	fst	QWORD PTR _sumi$[ebp]

; 1171 :   if ( valid_id(start_fe) )

	test	eax, 268435456				; 10000000H
	je	$LN117@facet_knot@3

; 1172 :     for ( fe = start_fe ; ; )

	mov	edx, eax
$LN169@facet_knot@3:

; 1173 :     { 
; 1174 :       next_fe = inverse_id(get_next_facet(get_prev_edge(fe)));

	mov	edi, DWORD PTR _web+460
	fstp	ST(0)
	mov	esi, edx
	and	esi, 134217727				; 07ffffffH
	mov	ebx, edx
	add	esi, esi
	shr	ebx, 27					; 0000001bH
	add	esi, esi
	and	ebx, 1
	je	SHORT $LN47@facet_knot@3
	mov	ecx, DWORD PTR [esi+edi]
	mov	eax, DWORD PTR [ecx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN46@facet_knot@3
$LN47@facet_knot@3:
	mov	eax, DWORD PTR _web+460
	mov	ecx, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [ecx+28]
$LN46@facet_knot@3:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN51@facet_knot@3
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN50@facet_knot@3
$LN51@facet_knot@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [eax+40]
$LN50@facet_knot@3:
	xor	eax, 134217728				; 08000000H

; 1175 :       get_edge_side(get_fe_edge(fe),side1);

	mov	edi, edx
	mov	DWORD PTR _next_fe$[ebp], eax
	mov	eax, DWORD PTR [ecx+20]
	lea	edx, DWORD PTR _side1$[ebp]
	and	edi, 134217728				; 08000000H
	push	edx
	xor	eax, edi
	push	eax
	call	_get_edge_side

; 1176 :       get_edge_side(get_fe_edge(get_next_edge(fe)),side2);

	mov	ecx, DWORD PTR _web+460
	add	esp, 8
	test	ebx, ebx
	je	SHORT $LN57@facet_knot@3
	mov	edx, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN56@facet_knot@3
$LN57@facet_knot@3:
	mov	eax, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [eax+32]
$LN56@facet_knot@3:
	lea	edx, DWORD PTR _side2$[ebp]
	push	edx
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	push	eax
	call	_get_edge_side

; 1177 :       s11 = SDIM_dot(side1,side1);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _side1$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fstp	QWORD PTR _s11$[ebp]

; 1178 :       s12 = SDIM_dot(side1,side2);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _side2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _side1$[ebp]
	push	ecx
	call	_dot
	fstp	QWORD PTR _s12$[ebp]

; 1179 :       s22 = SDIM_dot(side2,side2);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _side2$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fst	QWORD PTR _s22$[ebp]

; 1180 :       area = sqrt(s11*s22 - s12*s12);

	fmul	QWORD PTR _s11$[ebp]
	add	esp, 44					; 0000002cH
	fld	QWORD PTR _s12$[ebp]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	call	__CIsqrt

; 1181 :       for ( i = 0 ; i < SDIM ; i++ )

	fld	QWORD PTR __real@4018000000000000
	mov	edx, DWORD PTR _web+616
	fld	QWORD PTR _s22$[ebp]
	fld	QWORD PTR _s12$[ebp]
	xor	eax, eax
	cmp	edx, 4
	jl	$LC111@facet_knot@3
	lea	ecx, DWORD PTR [edx-3]
$LN112@facet_knot@3:

; 1182 :          da[i] = (s12*side2[i] - s22*side1[i])/area/6;

	fld	QWORD PTR _side2$[ebp+eax*8]
	add	eax, 4
	fmul	ST(0), ST(1)
	fld	QWORD PTR _side1$[ebp+eax*8-32]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR _da$[ebp+eax*8-32]
	fld	QWORD PTR _side2$[ebp+eax*8-24]
	fmul	ST(0), ST(1)
	fld	QWORD PTR _side1$[ebp+eax*8-24]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR _da$[ebp+eax*8-24]
	fld	QWORD PTR _side2$[ebp+eax*8-16]
	fmul	ST(0), ST(1)
	fld	QWORD PTR _side1$[ebp+eax*8-16]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR _da$[ebp+eax*8-16]
	fld	QWORD PTR _side2$[ebp+eax*8-8]
	fmul	ST(0), ST(1)
	fld	QWORD PTR _side1$[ebp+eax*8-8]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR _da$[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LN112@facet_knot@3
$LC111@facet_knot@3:

; 1181 :       for ( i = 0 ; i < SDIM ; i++ )

	cmp	eax, edx
	jge	SHORT $LN146@facet_knot@3
$LC7@facet_knot@3:

; 1182 :          da[i] = (s12*side2[i] - s22*side1[i])/area/6;

	fld	QWORD PTR _side2$[ebp+eax*8]
	inc	eax
	fmul	ST(0), ST(1)
	fld	QWORD PTR _side1$[ebp+eax*8-8]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR _da$[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LC7@facet_knot@3
$LN146@facet_knot@3:

; 1183 :       sumj = f_sums[ordinal(get_fe_headv(fe))];

	mov	ebx, DWORD PTR _web+460
	fstp	ST(3)
	mov	edx, DWORD PTR [esi+ebx]
	fstp	ST(2)
	mov	eax, DWORD PTR [edx+20]
	fstp	ST(1)
	mov	edx, DWORD PTR _dymem
	fstp	ST(0)
	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+edx+304]
	mov	edx, DWORD PTR _web+124
	xor	eax, edi
	mov	edi, DWORD PTR _web+636
	mov	esi, eax
	test	eax, 134217728				; 08000000H
	je	SHORT $LN65@facet_knot@3
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+esi*4]
	mov	esi, DWORD PTR [ecx+esi]
	jmp	SHORT $LN64@facet_knot@3
$LN65@facet_knot@3:
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+esi*4]
	lea	esi, DWORD PTR [esi+edi*4]
	mov	esi, DWORD PTR [esi+ecx]
$LN64@facet_knot@3:
	test	esi, 268435456				; 10000000H
	je	SHORT $LN42@facet_knot@3
	test	eax, 134217728				; 08000000H
	je	SHORT $LN71@facet_knot@3
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [ecx+eax]
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN43@facet_knot@3
$LN71@facet_knot@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	lea	eax, DWORD PTR [eax+edi*4]
	mov	eax, DWORD PTR [eax+ecx]
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN43@facet_knot@3
$LN42@facet_knot@3:
	or	eax, -1
$LN43@facet_knot@3:
	mov	esi, DWORD PTR _f_sums
	fld	QWORD PTR [esi+eax*8]

; 1184 :       sumjj = f_sums[ordinal(get_fe_headv(next_fe))];

	mov	eax, DWORD PTR _next_fe$[ebp]
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ebx+esi*4]
	mov	ebx, eax
	mov	eax, DWORD PTR [esi+20]
	and	ebx, 134217728				; 08000000H
	xor	eax, ebx
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+esi*4]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN77@facet_knot@3
	mov	esi, DWORD PTR [ecx+esi]
	jmp	SHORT $LN76@facet_knot@3
$LN77@facet_knot@3:
	lea	esi, DWORD PTR [esi+edi*4]
	mov	esi, DWORD PTR [esi+ecx]
$LN76@facet_knot@3:
	test	esi, 268435456				; 10000000H
	je	SHORT $LN44@facet_knot@3
	test	eax, 134217728				; 08000000H
	je	SHORT $LN83@facet_knot@3
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR [ecx+edx]
	and	ecx, 134217727				; 07ffffffH
	jmp	SHORT $LN45@facet_knot@3
$LN83@facet_knot@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	lea	edx, DWORD PTR [eax+edi*4]
	mov	ecx, DWORD PTR [edx+ecx]
	and	ecx, 134217727				; 07ffffffH
	jmp	SHORT $LN45@facet_knot@3
$LN44@facet_knot@3:
	or	ecx, -1
$LN45@facet_knot@3:
	mov	eax, DWORD PTR _f_sums
	fld	QWORD PTR [eax+ecx*8]

; 1185 :       for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN160@facet_knot@3
	fld	QWORD PTR _sumi$[ebp]
$LN4@facet_knot@3:

; 1186 :          v_info->grad[0][i] += 2*(sumj*da[i] + sumjj*da[i] + sumi*da[i]);

	fld	QWORD PTR _da$[ebp+eax*8]
	mov	ecx, DWORD PTR _v_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [ecx+1336]
	fmul	ST(0), ST(2)
	fld	QWORD PTR _da$[ebp+eax*8]
	mov	ecx, DWORD PTR [edx]
	fmul	ST(0), ST(4)
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	faddp	ST(1), ST(0)
	fld	QWORD PTR _da$[ebp+eax*8-8]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fadd	ST(0), ST(0)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN4@facet_knot@3

; 1185 :       for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(1)
	fstp	ST(1)
	jmp	SHORT $LN2@facet_knot@3
$LN160@facet_knot@3:
	fstp	ST(0)
	fstp	ST(0)
	fld	QWORD PTR _sumi$[ebp]
$LN2@facet_knot@3:

; 1187 :       if ( next_fe == start_fe ) break;

	mov	edx, DWORD PTR _next_fe$[ebp]
	cmp	edx, DWORD PTR _start_fe$[ebp]

; 1188 :       fe = next_fe;
; 1189 :     }

	jne	$LN169@facet_knot@3
$LN117@facet_knot@3:

; 1190 :   return 2*ti*sumi;

	fld	QWORD PTR _ti$[ebp]

; 1191 : } // end facet_knot_energy_gradient()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	fadd	ST(0), ST(0)
	pop	esi
	xor	ecx, ebp
	fmulp	ST(1), ST(0)
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_knot_energy_gradient ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_facet_knot_energy_fix_init
_BSS	SEGMENT
_fix_sums DD	01H DUP (?)
; Function compile flags: /Ogtp
_BSS	ENDS
;	COMDAT _facet_knot_energy_fix_init
_TEXT	SEGMENT
_tj$90347 = -108					; size = 8
_ti$90346 = -100					; size = 8
_power$ = -92						; size = 8
tv847 = -84						; size = 4
tv1060 = -80						; size = 4
tv482 = -76						; size = 4
_x$ = -72						; size = 4
tv1062 = -68						; size = 4
_ordvv$90348 = -64					; size = 4
_ordv$90344 = -60					; size = 4
tv1058 = -56						; size = 4
_d$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_facet_knot_energy_fix_init PROC			; COMDAT

; 1216 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1217 :   edge_id e_id;
; 1218 :   REAL *x;
; 1219 :   vertex_id v_id,vv_id; 
; 1220 :   int i;
; 1221 :   REAL d[MAXCOORD]; /* difference vector between vertices */
; 1222 :   REAL rr;
; 1223 :   REAL power;
; 1224 : 
; 1225 :   exponent_param = lookup_global(SURF_KNOTPOW_NAME);

	push	OFFSET ??_C@_0BD@CINEMMIH@surface_knot_power?$AA@
	call	_lookup_global
	add	esp, 4
	mov	DWORD PTR _exponent_param, eax

; 1226 :   if ( exponent_param < 0 ) /* missing, so add */

	test	eax, eax
	jns	$LN50@facet_knot@4

; 1227 :    { exponent_param = add_global(SURF_KNOTPOW_NAME);

	push	OFFSET ??_C@_0BD@CINEMMIH@surface_knot_power?$AA@
	call	_add_global

; 1228 :      globals(exponent_param)->value.real = 4.0;  /* default */

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	add	esp, 4
	mov	DWORD PTR _exponent_param, eax
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN13@facet_knot@4
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN15@facet_knot@4
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN14@facet_knot@4
$LN15@facet_knot@4:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN13@facet_knot@4
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN14@facet_knot@4
$LN13@facet_knot@4:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN14@facet_knot@4:
	fld	QWORD PTR __real@4010000000000000
	fstp	QWORD PTR [eax+64]

; 1229 :      globals(exponent_param)->flags |=  ORDINARY_PARAM | RECALC_PARAMETER | ALWAYS_RECALC;

	mov	eax, DWORD PTR _exponent_param
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN19@facet_knot@4
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN21@facet_knot@4
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN20@facet_knot@4
$LN21@facet_knot@4:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN19@facet_knot@4
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN20@facet_knot@4
$LN19@facet_knot@4:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN20@facet_knot@4:
	or	DWORD PTR [eax+192], 134217737		; 08000009H
	mov	eax, DWORD PTR _exponent_param
$LN50@facet_knot@4:

; 1230 :    }
; 1231 :     
; 1232 :   /* get basic sums */
; 1233 :   power = globals(exponent_param)->value.real/2; /* since rr already square */

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN25@facet_knot@4
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN27@facet_knot@4
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN26@facet_knot@4
$LN27@facet_knot@4:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN25@facet_knot@4
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN26@facet_knot@4
$LN25@facet_knot@4:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN26@facet_knot@4:
	fld	QWORD PTR [eax+64]

; 1234 :   if ( fix_sums ) myfree((char*)fix_sums);

	mov	eax, DWORD PTR _fix_sums
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _power$[ebp]
	test	eax, eax
	je	SHORT $LN9@facet_knot@4
	push	eax
	call	_myfree
	add	esp, 4
$LN9@facet_knot@4:

; 1235 :   fix_sums = (REAL *)mycalloc(web.skel[VERTEX].max_ord+1,sizeof(REAL));

	mov	ecx, DWORD PTR _web+68
	push	1235					; 000004d3H
	push	OFFSET ??_C@_07GIJDMJFD@KNOT1?4C?$AA@
	inc	ecx
	push	8
	push	ecx
	call	_kb_calloc

; 1236 :   FOR_ALL_EDGES(e_id)

	mov	edx, DWORD PTR _web+160
	add	esp, 16					; 00000010H
	mov	DWORD PTR _fix_sums, eax
	test	edx, 268435456				; 10000000H
	je	$LN6@facet_knot@4
	push	ebx
	mov	ebx, DWORD PTR _web+124
	push	esi
	push	edi
$LL8@facet_knot@4:
	mov	ecx, edx
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	esi, DWORD PTR [ecx+ebx]
	mov	eax, DWORD PTR [esi+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	mov	DWORD PTR tv482[ebp], ecx
	je	$LN7@facet_knot@4

; 1237 :   { 
; 1238 :      REAL val;
; 1239 :      int ordv;
; 1240 :      REAL *y;
; 1241 :      REAL ti,tj;
; 1242 :      int ordvv;
; 1243 :      v_id = get_edge_tailv(e_id);

	mov	edi, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+216
	mov	eax, DWORD PTR _web+636
	mov	ecx, DWORD PTR [ecx+edi+304]
	shr	edx, 27					; 0000001bH
	and	edx, 1
	je	SHORT $LN36@facet_knot@4
	add	esi, ecx
	mov	ecx, DWORD PTR [esi+eax*4]
	jmp	SHORT $LN35@facet_knot@4
$LN36@facet_knot@4:
	add	esi, ecx
	mov	ecx, DWORD PTR [esi]
$LN35@facet_knot@4:

; 1244 :      vv_id = get_edge_headv(e_id);

	test	edx, edx
	je	SHORT $LN40@facet_knot@4
	mov	ebx, DWORD PTR [esi]
	jmp	SHORT $LN39@facet_knot@4
$LN40@facet_knot@4:
	mov	ebx, DWORD PTR [esi+eax*4]
$LN39@facet_knot@4:

; 1245 :      ordv = ordinal(v_id);

	test	ecx, 268435456				; 10000000H
	je	SHORT $LN31@facet_knot@4
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	DWORD PTR _ordv$90344[ebp], eax
	jmp	SHORT $LN32@facet_knot@4
$LN31@facet_knot@4:
	mov	DWORD PTR _ordv$90344[ebp], -1
$LN32@facet_knot@4:

; 1246 :      ordvv = ordinal(vv_id);

	test	ebx, 268435456				; 10000000H
	je	SHORT $LN33@facet_knot@4
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	DWORD PTR _ordvv$90348[ebp], eax
	jmp	SHORT $LN34@facet_knot@4
$LN33@facet_knot@4:
	mov	DWORD PTR _ordvv$90348[ebp], -1
$LN34@facet_knot@4:

; 1247 :      x = get_coord(v_id);

	mov	edx, DWORD PTR _web+104
	mov	eax, DWORD PTR [edx+edi+64]
	mov	edx, DWORD PTR _web+12
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edx+esi*4]

; 1248 :      y = get_coord(vv_id);

	mov	esi, ebx
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+esi*4]
	add	edi, eax

; 1249 :      ti = get_vertex_area_star(v_id);

	push	ecx
	mov	DWORD PTR _x$[ebp], edi
	add	esi, eax
	call	_get_vertex_area_star
	fstp	QWORD PTR _ti$90346[ebp]

; 1250 :      tj = get_vertex_area_star(vv_id);

	push	ebx
	call	_get_vertex_area_star
	fstp	QWORD PTR _tj$90347[ebp]

; 1251 :      for ( i = 0 ; i < SDIM ; i++ ) d[i] = x[i] - y[i];

	mov	ebx, DWORD PTR _web+616
	add	esp, 8
	xor	edx, edx
	cmp	ebx, 4
	jl	SHORT $LC48@facet_knot@4
	lea	ecx, DWORD PTR [edi+24]
	sub	edi, esi
	mov	DWORD PTR tv847[ebp], edi
	mov	edi, esi
	neg	edi
	lea	ebx, DWORD PTR _d$[ebp+edi]
	mov	DWORD PTR tv1058[ebp], ebx
	lea	ebx, DWORD PTR _d$[ebp+edi+8]
	lea	edi, DWORD PTR _d$[ebp+edi+16]
	mov	DWORD PTR tv1060[ebp], ebx
	mov	ebx, DWORD PTR _web+616
	lea	eax, DWORD PTR [esi+8]
	mov	DWORD PTR tv1062[ebp], edi
	npad	5
$LL49@facet_knot@4:
	fld	QWORD PTR [ecx-24]
	mov	edi, DWORD PTR tv847[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _d$[ebp+edx*8-32]
	fld	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv1058[ebp]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [eax+edi-32]
	mov	edi, DWORD PTR tv1060[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [eax+edi-32]
	mov	edi, DWORD PTR tv1062[ebp]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [eax+edi-32]
	lea	edi, DWORD PTR [ebx-3]
	cmp	edx, edi
	jl	SHORT $LL49@facet_knot@4
	mov	edi, DWORD PTR _x$[ebp]
$LC48@facet_knot@4:
	cmp	edx, ebx
	jge	SHORT $LN47@facet_knot@4
	lea	ecx, DWORD PTR _d$[ebp]
	sub	ecx, esi
	mov	DWORD PTR tv1058[ebp], ecx
	mov	ecx, ebx
	sub	edi, esi
	lea	eax, DWORD PTR [esi+edx*8]
	sub	ecx, edx
	npad	3
$LC3@facet_knot@4:
	fld	QWORD PTR [eax+edi]
	mov	edx, DWORD PTR tv1058[ebp]
	fsub	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fstp	QWORD PTR [eax+edx-8]
	jne	SHORT $LC3@facet_knot@4
$LN47@facet_knot@4:

; 1252 :      rr = SDIM_dot(d,d);

	lea	eax, DWORD PTR _d$[ebp]
	push	ebx
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot

; 1253 :      val = pow(rr,power);  /* inverse power potential */

	fld	QWORD PTR _power$[ebp]
	add	esp, 12					; 0000000cH
	call	__CIpow

; 1254 :      fix_sums[ordv] += tj/val;

	fld	QWORD PTR _tj$90347[ebp]
	fdiv	ST(0), ST(1)
	mov	eax, DWORD PTR _fix_sums
	mov	ecx, DWORD PTR _ordv$90344[ebp]
	fadd	QWORD PTR [eax+ecx*8]
	fstp	QWORD PTR [eax+ecx*8]

; 1255 :      fix_sums[ordvv] += ti/val;

	mov	ecx, DWORD PTR _ordvv$90348[ebp]
	fdivr	QWORD PTR _ti$90346[ebp]
	fadd	QWORD PTR [eax+ecx*8]
	fstp	QWORD PTR [eax+ecx*8]
	mov	ebx, DWORD PTR _web+124
	mov	ecx, DWORD PTR tv482[ebp]
$LN7@facet_knot@4:

; 1236 :   FOR_ALL_EDGES(e_id)

	mov	edx, DWORD PTR [ecx+ebx]
	mov	edx, DWORD PTR [edx]
	test	edx, 268435456				; 10000000H
	jne	$LL8@facet_knot@4
	pop	edi
	pop	esi
	pop	ebx
$LN6@facet_knot@4:

; 1256 :   }
; 1257 : } // end facet_knot_energy_fix_init()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_knot_energy_fix_init ENDP
_TEXT	ENDS
PUBLIC	_facet_knot_energy_fix
; Function compile flags: /Ogtp
;	COMDAT _facet_knot_energy_fix
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_facet_knot_energy_fix PROC				; COMDAT

; 1271 : { REAL ti,energy;

	push	ebp
	mov	ebp, esp
	push	esi

; 1272 : 
; 1273 :   ti = get_vertex_area_star(v_info->id);

	mov	esi, DWORD PTR _v_info$[ebp]
	mov	eax, DWORD PTR [esi]
	push	eax
	call	_get_vertex_area_star

; 1274 :   energy = ti*fix_sums[ordinal(v_info->id)];

	mov	eax, DWORD PTR [esi]
	add	esp, 4
	pop	esi
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@facet_knot@5
	mov	ecx, DWORD PTR _fix_sums
	and	eax, 134217727				; 07ffffffH
	fmul	QWORD PTR [ecx+eax*8]

; 1275 :   return energy;
; 1276 : } // end facet_knot_energy_fix()

	pop	ebp
	ret	0
$LN3@facet_knot@5:

; 1274 :   energy = ti*fix_sums[ordinal(v_info->id)];

	mov	ecx, DWORD PTR _fix_sums
	or	eax, -1
	fmul	QWORD PTR [ecx+eax*8]

; 1275 :   return energy;
; 1276 : } // end facet_knot_energy_fix()

	pop	ebp
	ret	0
_facet_knot_energy_fix ENDP
_TEXT	ENDS
PUBLIC	_v_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_facet_knot_energy_fix_gradient
; Function compile flags: /Ogtp
;	COMDAT _facet_knot_energy_fix_gradient
_TEXT	SEGMENT
_power$ = -276						; size = 8
_ti$ = -268						; size = 8
tv2127 = -260						; size = 4
_s11$ = -256						; size = 8
_halfpower$ = -256					; size = 8
tv2441 = -248						; size = 8
_tj$ = -248						; size = 8
_s22$ = -240						; size = 8
tv2131 = -236						; size = 4
_sumi$ = -232						; size = 8
tv2129 = -228						; size = 4
_x$ = -224						; size = 4
_start_fe$ = -220					; size = 4
_v_info$GSCopy$ = -216					; size = 4
_fe$ = -212						; size = 4
_s12$ = -208						; size = 8
tv2424 = -204						; size = 4
tv2133 = -204						; size = 4
tv1224 = -204						; size = 4
tv1106 = -200						; size = 4
_next_fe$ = -200					; size = 4
_side1$ = -196						; size = 48
_side2$ = -148						; size = 48
_d$ = -100						; size = 48
_da$ = -52						; size = 48
_sum$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_v_info$ = 8						; size = 4
_facet_knot_energy_fix_gradient PROC			; COMDAT

; 1291 : { REAL *x = get_coord(v_info->id);

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	edx, DWORD PTR _web+12
	push	ebx
	mov	ebx, DWORD PTR _v_info$[ebp]
	mov	eax, DWORD PTR [ebx]
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _dymem
	push	esi
	mov	esi, DWORD PTR _web+104
	add	ecx, DWORD PTR [esi+edx+64]
	push	edi

; 1292 :   vertex_id v_id;
; 1293 :   int i;
; 1294 :   REAL d[MAXCOORD]; /* difference vector between vertices */
; 1295 :   REAL rr,p;
; 1296 :   REAL power,halfpower;
; 1297 :   REAL ti,tj;  /* length weights of vertices, ti for home vertex */
; 1298 :   facetedge_id fe,start_fe,next_fe;
; 1299 :   REAL sumi,sumj,sumjj,area;
; 1300 :   REAL s11,s12,s22,side1[MAXCOORD],side2[MAXCOORD];
; 1301 :   REAL da[MAXCOORD],sum[MAXCOORD];
; 1302 : 
; 1303 :   ti = get_vertex_area_star(v_info->id);

	push	eax
	mov	DWORD PTR _v_info$GSCopy$[ebp], ebx
	mov	DWORD PTR _x$[ebp], ecx
	call	_get_vertex_area_star
	fstp	QWORD PTR _ti$[ebp]

; 1304 :   power = globals(exponent_param)->value.real;

	mov	eax, DWORD PTR _exponent_param
	mov	esi, DWORD PTR _dymem
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	add	esp, 4
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN33@facet_knot@6
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN35@facet_knot@6
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN34@facet_knot@6
$LN35@facet_knot@6:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN33@facet_knot@6
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN34@facet_knot@6
$LN33@facet_knot@6:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+esi]
$LN34@facet_knot@6:
	fld	QWORD PTR [eax+64]

; 1305 :   halfpower = power/2;
; 1306 :   for ( i = 0 ; i < SDIM ; i++ ) 

	mov	ecx, DWORD PTR _web+616
	fst	QWORD PTR _power$[ebp]
	xor	eax, eax
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _halfpower$[ebp]
	test	ecx, ecx
	jle	SHORT $LN27@facet_knot@6
	fldz
$LN30@facet_knot@6:

; 1307 :     v_info->grad[0][i] = 0.0; /* intialize gradient */

	mov	ecx, DWORD PTR [ebx+1336]
	mov	edx, DWORD PTR [ecx]
	fst	QWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _web+616
	inc	eax
	cmp	eax, ecx
	jl	SHORT $LN30@facet_knot@6

; 1305 :   halfpower = power/2;
; 1306 :   for ( i = 0 ; i < SDIM ; i++ ) 

	mov	esi, DWORD PTR _dymem
	fstp	ST(0)

; 1308 : 
; 1309 :   /* distant change part */
; 1310 :   for ( i = 0 ; i < SDIM ; i++ ) sum[i] = 0.0;

	test	ecx, ecx
	jle	SHORT $LN27@facet_knot@6
	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	xor	eax, eax
	lea	edi, DWORD PTR _sum$[ebp]
	rep stosd
$LN27@facet_knot@6:

; 1311 :   /* go around all neighbor vertices */
; 1312 :   start_fe = get_vertex_fe(v_info->id);

	mov	eax, DWORD PTR [ebx]
	push	eax
	call	_get_vertex_fe

; 1313 :   if (valid_id(start_fe))
; 1314 :     for ( fe = start_fe ; ; )

	mov	ebx, DWORD PTR _web+460
	add	esp, 4
	mov	DWORD PTR _start_fe$[ebp], eax
	test	eax, 268435456				; 10000000H
	je	$LN108@facet_knot@6
	mov	DWORD PTR _fe$[ebp], eax
$LL23@facet_knot@6:

; 1315 :     { 
; 1316 :       REAL *y;
; 1317 :       v_id = get_fe_headv(fe);

	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	DWORD PTR tv1106[ebp], ecx
	mov	ecx, DWORD PTR [ecx+ebx]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN48@facet_knot@6
	mov	edx, DWORD PTR _web+124
	mov	ecx, DWORD PTR _web+216
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+esi+304]
	mov	eax, DWORD PTR [eax+edx]
	jmp	SHORT $LN47@facet_knot@6
$LN48@facet_knot@6:
	mov	ecx, DWORD PTR _web+124
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	add	edx, DWORD PTR [eax+esi+304]
	mov	ecx, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+ecx*4]
$LN47@facet_knot@6:

; 1318 :       y = get_coord(v_id);

	mov	ecx, DWORD PTR _web+12
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ecx+edx*4]
	mov	edx, DWORD PTR _web+104
	add	edi, DWORD PTR [edx+esi+64]

; 1319 : 
; 1320 :       tj = get_vertex_area_star(v_id);

	push	eax
	call	_get_vertex_area_star
	fstp	QWORD PTR _tj$[ebp]

; 1321 :       for ( i = 0 ; i < SDIM ; i++ ) d[i] = x[i] - y[i];

	mov	ebx, DWORD PTR _web+616
	add	esp, 4
	xor	edx, edx
	cmp	ebx, 4
	jl	$LN129@facet_knot@6

; 1318 :       y = get_coord(v_id);

	mov	ebx, DWORD PTR _x$[ebp]
	lea	ecx, DWORD PTR [ebx+24]

; 1321 :       for ( i = 0 ; i < SDIM ; i++ ) d[i] = x[i] - y[i];

	mov	esi, edi
	neg	esi
	add	ebx, esi
	mov	DWORD PTR tv2127[ebp], ebx
	lea	ebx, DWORD PTR _d$[ebp+esi]
	mov	DWORD PTR tv2129[ebp], ebx
	lea	ebx, DWORD PTR _d$[ebp+esi+8]
	lea	esi, DWORD PTR _d$[ebp+esi+16]
	mov	DWORD PTR tv2131[ebp], ebx
	mov	ebx, DWORD PTR _web+616
	lea	eax, DWORD PTR [edi+8]
	mov	DWORD PTR tv2133[ebp], esi
$LL119@facet_knot@6:
	fld	QWORD PTR [ecx-24]
	mov	esi, DWORD PTR tv2127[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _d$[ebp+edx*8-32]
	fld	QWORD PTR [eax+esi-32]
	mov	esi, DWORD PTR tv2129[ebp]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [eax+esi-32]
	mov	esi, DWORD PTR tv2131[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [eax+esi-32]
	mov	esi, DWORD PTR tv2133[ebp]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [eax+esi-32]
	lea	esi, DWORD PTR [ebx-3]
	cmp	edx, esi
	jl	SHORT $LL119@facet_knot@6
$LN129@facet_knot@6:
	cmp	edx, ebx
	jge	SHORT $LN132@facet_knot@6
	mov	ecx, DWORD PTR _x$[ebp]
	lea	eax, DWORD PTR [edi+edx*8]
	neg	edi
	lea	esi, DWORD PTR [edi+ecx]
	mov	ecx, ebx
	lea	edi, DWORD PTR _d$[ebp+edi]
	sub	ecx, edx
$LC21@facet_knot@6:
	fld	QWORD PTR [eax+esi]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax+edi-8]
	jne	SHORT $LC21@facet_knot@6
$LN132@facet_knot@6:

; 1322 :       rr = SDIM_dot(d,d);

	lea	edx, DWORD PTR _d$[ebp]
	push	ebx
	push	edx
	mov	eax, edx
	push	eax
	call	_dot

; 1323 :       if ( rr > 1e-12 ) /* don't do self */

	fld	QWORD PTR __real@3d719799812dea11
	mov	esi, DWORD PTR _web+616
	fcomp	ST(1)
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 5
	jp	$LN145@facet_knot@6

; 1324 :        { p = power*tj/rr/pow(rr,halfpower);  /* inverse power potential */

	fld	QWORD PTR _tj$[ebp]
	fmul	QWORD PTR _power$[ebp]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR tv2441[ebp]
	fld	QWORD PTR _halfpower$[ebp]
	call	__CIpow
	fdivr	QWORD PTR tv2441[ebp]

; 1325 :          for ( i = 0 ; i < SDIM ; i++ ) 

	xor	eax, eax
	cmp	esi, 4
	jl	SHORT $LC121@facet_knot@6
	lea	ecx, DWORD PTR [esi-3]
$LN122@facet_knot@6:

; 1326 :            sum[i] -= p*d[i];

	fld	QWORD PTR _d$[ebp+eax*8]
	add	eax, 4
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR _sum$[ebp+eax*8-32]
	fstp	QWORD PTR _sum$[ebp+eax*8-32]
	fld	QWORD PTR _d$[ebp+eax*8-24]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR _sum$[ebp+eax*8-24]
	fstp	QWORD PTR _sum$[ebp+eax*8-24]
	fld	QWORD PTR _d$[ebp+eax*8-16]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR _sum$[ebp+eax*8-16]
	fstp	QWORD PTR _sum$[ebp+eax*8-16]
	fld	QWORD PTR _d$[ebp+eax*8-8]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR _sum$[ebp+eax*8-8]
	fstp	QWORD PTR _sum$[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LN122@facet_knot@6
$LC121@facet_knot@6:

; 1325 :          for ( i = 0 ; i < SDIM ; i++ ) 

	cmp	eax, esi
	jge	SHORT $LN145@facet_knot@6
$LC17@facet_knot@6:

; 1326 :            sum[i] -= p*d[i];

	fld	QWORD PTR _d$[ebp+eax*8]
	inc	eax
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR _sum$[ebp+eax*8-8]
	fstp	QWORD PTR _sum$[ebp+eax*8-8]
	cmp	eax, esi
	jl	SHORT $LC17@facet_knot@6
$LN145@facet_knot@6:

; 1327 :        }
; 1328 :       next_fe = inverse_id(get_next_facet(get_prev_edge(fe)));

	test	DWORD PTR _fe$[ebp], 134217728		; 08000000H
	fstp	ST(0)
	mov	ebx, DWORD PTR _web+460
	je	SHORT $LN52@facet_knot@6
	mov	ecx, DWORD PTR tv1106[ebp]
	mov	edx, DWORD PTR [ecx+ebx]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN51@facet_knot@6
$LN52@facet_knot@6:
	mov	eax, DWORD PTR tv1106[ebp]
	mov	ecx, DWORD PTR [eax+ebx]
	mov	eax, DWORD PTR [ecx+28]
$LN51@facet_knot@6:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN56@facet_knot@6
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+eax*4]
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN55@facet_knot@6
$LN56@facet_knot@6:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	eax, DWORD PTR [eax+40]
$LN55@facet_knot@6:
	xor	eax, 134217728				; 08000000H

; 1329 :       if ( next_fe == start_fe ) break;

	cmp	eax, DWORD PTR _start_fe$[ebp]
	je	SHORT $LN108@facet_knot@6

; 1330 :       fe = next_fe;
; 1331 :     }

	mov	esi, DWORD PTR _dymem
	mov	DWORD PTR _fe$[ebp], eax
	jmp	$LL23@facet_knot@6
$LN108@facet_knot@6:

; 1332 :   for ( i = 0 ; i < SDIM ; i++ )

	mov	edx, DWORD PTR _v_info$GSCopy$[ebp]
	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN11@facet_knot@6
	fld	QWORD PTR _ti$[ebp]
$LN13@facet_knot@6:

; 1333 :       v_info->grad[0][i] += ti*sum[i];

	mov	ecx, DWORD PTR [edx+1336]
	fld	QWORD PTR _sum$[ebp+eax*8]
	mov	ecx, DWORD PTR [ecx]
	fmul	ST(0), ST(1)
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN13@facet_knot@6

; 1332 :   for ( i = 0 ; i < SDIM ; i++ )

	mov	ebx, DWORD PTR _web+460
	fstp	ST(0)
$LN11@facet_knot@6:

; 1334 :  
; 1335 :   /* area change part */
; 1336 :   /* go around all neighbor vertices */
; 1337 :   start_fe = get_vertex_fe(v_info->id);

	mov	esi, DWORD PTR [edx]
	push	esi
	call	_get_vertex_fe
	add	esp, 4
	mov	DWORD PTR _start_fe$[ebp], eax

; 1338 :   sumi = fix_sums[ordinal(v_info->id)];

	test	esi, 268435456				; 10000000H
	je	SHORT $LN39@facet_knot@6
	and	esi, 134217727				; 07ffffffH
	jmp	SHORT $LN40@facet_knot@6
$LN39@facet_knot@6:
	or	esi, -1
$LN40@facet_knot@6:
	mov	edx, DWORD PTR _fix_sums
	fld	QWORD PTR [edx+esi*8]
	fst	QWORD PTR _sumi$[ebp]

; 1339 :   if (valid_id(start_fe))

	test	eax, 268435456				; 10000000H
	je	$LN109@facet_knot@6

; 1340 :     for ( fe = start_fe ; ; )

	mov	edx, eax
$LN184@facet_knot@6:

; 1341 :     { 
; 1342 :       next_fe = inverse_id(get_next_facet(get_prev_edge(fe)));

	mov	eax, edx
	fstp	ST(0)
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR tv1224[ebp], eax
	mov	esi, edx
	je	SHORT $LN60@facet_knot@6
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	ecx, DWORD PTR [esi+ebx]
	mov	eax, DWORD PTR [ecx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN59@facet_knot@6
$LN60@facet_knot@6:
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	ecx, DWORD PTR [esi+ebx]
	mov	eax, DWORD PTR [ecx+28]
$LN59@facet_knot@6:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN64@facet_knot@6
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN63@facet_knot@6
$LN64@facet_knot@6:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	eax, DWORD PTR [eax+40]
$LN63@facet_knot@6:
	xor	eax, 134217728				; 08000000H

; 1343 :       get_edge_side(get_fe_edge(fe),side1);

	mov	edi, edx
	mov	DWORD PTR _next_fe$[ebp], eax
	mov	eax, DWORD PTR [ecx+20]
	lea	edx, DWORD PTR _side1$[ebp]
	and	edi, 134217728				; 08000000H
	push	edx
	xor	eax, edi
	push	eax
	call	_get_edge_side

; 1344 :       get_edge_side(get_fe_edge(get_next_edge(fe)),side2);

	mov	ecx, DWORD PTR _web+460
	add	esp, 8
	cmp	DWORD PTR tv1224[ebp], 0
	je	SHORT $LN70@facet_knot@6
	mov	edx, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN69@facet_knot@6
$LN70@facet_knot@6:
	mov	eax, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [eax+32]
$LN69@facet_knot@6:
	lea	edx, DWORD PTR _side2$[ebp]
	push	edx
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	push	eax
	call	_get_edge_side

; 1345 :       s11 = SDIM_dot(side1,side1);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _side1$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fstp	QWORD PTR _s11$[ebp]

; 1346 :       s12 = SDIM_dot(side1,side2);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _side2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _side1$[ebp]
	push	ecx
	call	_dot
	fstp	QWORD PTR _s12$[ebp]

; 1347 :       s22 = SDIM_dot(side2,side2);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _side2$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fst	QWORD PTR _s22$[ebp]

; 1348 :       area = sqrt(s11*s22 - s12*s12);

	fmul	QWORD PTR _s11$[ebp]
	add	esp, 44					; 0000002cH
	fld	QWORD PTR _s12$[ebp]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	call	__CIsqrt

; 1349 :       for ( i = 0 ; i < SDIM ; i++ )

	fld	QWORD PTR __real@4018000000000000
	mov	ecx, DWORD PTR _web+616
	fld	QWORD PTR _s22$[ebp]
	fld	QWORD PTR _s12$[ebp]
	xor	eax, eax
	cmp	ecx, 4
	jl	$LC124@facet_knot@6
	lea	edx, DWORD PTR [ecx-3]
$LN125@facet_knot@6:

; 1350 :          da[i] = (s12*side2[i] - s22*side1[i])/area/6;

	fld	QWORD PTR _side2$[ebp+eax*8]
	add	eax, 4
	fmul	ST(0), ST(1)
	fld	QWORD PTR _side1$[ebp+eax*8-32]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR _da$[ebp+eax*8-32]
	fld	QWORD PTR _side2$[ebp+eax*8-24]
	fmul	ST(0), ST(1)
	fld	QWORD PTR _side1$[ebp+eax*8-24]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR _da$[ebp+eax*8-24]
	fld	QWORD PTR _side2$[ebp+eax*8-16]
	fmul	ST(0), ST(1)
	fld	QWORD PTR _side1$[ebp+eax*8-16]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR _da$[ebp+eax*8-16]
	fld	QWORD PTR _side2$[ebp+eax*8-8]
	fmul	ST(0), ST(1)
	fld	QWORD PTR _side1$[ebp+eax*8-8]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR _da$[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LN125@facet_knot@6
$LC124@facet_knot@6:

; 1349 :       for ( i = 0 ; i < SDIM ; i++ )

	cmp	eax, ecx
	jge	SHORT $LN161@facet_knot@6
$LC7@facet_knot@6:

; 1350 :          da[i] = (s12*side2[i] - s22*side1[i])/area/6;

	fld	QWORD PTR _side2$[ebp+eax*8]
	inc	eax
	fmul	ST(0), ST(1)
	fld	QWORD PTR _side1$[ebp+eax*8-8]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR _da$[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LC7@facet_knot@6
$LN161@facet_knot@6:

; 1351 :       sumj = fix_sums[ordinal(get_fe_headv(fe))];

	mov	ebx, DWORD PTR _web+460
	fstp	ST(3)
	mov	edx, DWORD PTR [esi+ebx]
	fstp	ST(2)
	mov	eax, DWORD PTR [edx+20]
	fstp	ST(1)
	mov	edx, DWORD PTR _dymem
	fstp	ST(0)
	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+edx+304]
	mov	edx, DWORD PTR _web+124
	xor	eax, edi
	mov	edi, DWORD PTR _web+636
	mov	esi, eax
	test	eax, 134217728				; 08000000H
	je	SHORT $LN78@facet_knot@6
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+esi*4]
	mov	esi, DWORD PTR [ecx+esi]
	jmp	SHORT $LN77@facet_knot@6
$LN78@facet_knot@6:
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+esi*4]
	lea	esi, DWORD PTR [esi+edi*4]
	mov	esi, DWORD PTR [esi+ecx]
$LN77@facet_knot@6:
	test	esi, 268435456				; 10000000H
	je	SHORT $LN41@facet_knot@6
	test	eax, 134217728				; 08000000H
	je	SHORT $LN84@facet_knot@6
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [ecx+eax]
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN42@facet_knot@6
$LN84@facet_knot@6:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	lea	eax, DWORD PTR [eax+edi*4]
	mov	eax, DWORD PTR [eax+ecx]
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN42@facet_knot@6
$LN41@facet_knot@6:
	or	eax, -1
$LN42@facet_knot@6:
	mov	esi, DWORD PTR _fix_sums
	fld	QWORD PTR [esi+eax*8]

; 1352 :       sumjj = fix_sums[ordinal(get_fe_headv(next_fe))];

	mov	eax, DWORD PTR _next_fe$[ebp]
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ebx+esi*4]
	and	eax, 134217728				; 08000000H
	mov	DWORD PTR tv2424[ebp], eax
	mov	eax, DWORD PTR [esi+20]
	xor	eax, DWORD PTR tv2424[ebp]
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+esi*4]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN90@facet_knot@6
	mov	esi, DWORD PTR [ecx+esi]
	jmp	SHORT $LN89@facet_knot@6
$LN90@facet_knot@6:
	lea	esi, DWORD PTR [esi+edi*4]
	mov	esi, DWORD PTR [esi+ecx]
$LN89@facet_knot@6:
	test	esi, 268435456				; 10000000H
	je	SHORT $LN43@facet_knot@6
	test	eax, 134217728				; 08000000H
	je	SHORT $LN96@facet_knot@6
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR [ecx+edx]
	and	ecx, 134217727				; 07ffffffH
	jmp	SHORT $LN44@facet_knot@6
$LN96@facet_knot@6:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	lea	edx, DWORD PTR [eax+edi*4]
	mov	ecx, DWORD PTR [edx+ecx]
	and	ecx, 134217727				; 07ffffffH
	jmp	SHORT $LN44@facet_knot@6
$LN43@facet_knot@6:
	or	ecx, -1
$LN44@facet_knot@6:
	mov	eax, DWORD PTR _fix_sums
	fld	QWORD PTR [eax+ecx*8]

; 1353 :       for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN175@facet_knot@6
	fld	QWORD PTR _sumi$[ebp]
	mov	edx, DWORD PTR _v_info$GSCopy$[ebp]
$LN4@facet_knot@6:

; 1354 :          v_info->grad[0][i] += sumj*da[i] + sumjj*da[i] + sumi*da[i];

	fld	QWORD PTR _da$[ebp+eax*8]
	mov	ecx, DWORD PTR [edx+1336]
	mov	ecx, DWORD PTR [ecx]
	fmul	ST(0), ST(2)
	fld	QWORD PTR _da$[ebp+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	fmul	ST(0), ST(4)
	inc	eax
	faddp	ST(1), ST(0)
	fld	QWORD PTR _da$[ebp+eax*8-8]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN4@facet_knot@6

; 1353 :       for ( i = 0 ; i < SDIM ; i++ )

	mov	ebx, DWORD PTR _web+460
	fstp	ST(1)
	fstp	ST(1)
	jmp	SHORT $LN2@facet_knot@6
$LN175@facet_knot@6:
	fstp	ST(0)
	fstp	ST(0)
	fld	QWORD PTR _sumi$[ebp]
$LN2@facet_knot@6:

; 1355 :       if ( next_fe == start_fe ) break;

	mov	edx, DWORD PTR _next_fe$[ebp]
	cmp	edx, DWORD PTR _start_fe$[ebp]

; 1356 :       fe = next_fe;
; 1357 :     }

	jne	$LN184@facet_knot@6
$LN109@facet_knot@6:

; 1358 :   return ti*sumi;
; 1359 : } // end facet_knot_energy_fix_gradient()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fmul	QWORD PTR _ti$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_facet_knot_energy_fix_gradient ENDP
_TEXT	ENDS
PUBLIC	_xfacet_knot_energy_init
; Function compile flags: /Ogtp
;	COMDAT _xfacet_knot_energy_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_xfacet_knot_energy_init PROC				; COMDAT

; 1378 :   exponent_param = lookup_global(SURF_KNOTPOW_NAME);

	push	OFFSET ??_C@_0BD@CINEMMIH@surface_knot_power?$AA@
	call	_lookup_global
	add	esp, 4
	mov	DWORD PTR _exponent_param, eax

; 1379 :   if ( exponent_param < 0 ) /* missing, so add */

	test	eax, eax
	jns	$LN1@xfacet_kno

; 1380 :   { exponent_param = add_global(SURF_KNOTPOW_NAME);

	push	OFFSET ??_C@_0BD@CINEMMIH@surface_knot_power?$AA@
	call	_add_global

; 1381 :     globals(exponent_param)->value.real = 4.0;  /* default */

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	add	esp, 4
	mov	DWORD PTR _exponent_param, eax
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN4@xfacet_kno
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN6@xfacet_kno
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN5@xfacet_kno
$LN6@xfacet_kno:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN4@xfacet_kno
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN5@xfacet_kno
$LN4@xfacet_kno:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN5@xfacet_kno:
	fld	QWORD PTR __real@4010000000000000
	fstp	QWORD PTR [eax+64]

; 1382 :     globals(exponent_param)->flags |=  ORDINARY_PARAM | RECALC_PARAMETER | ALWAYS_RECALC;

	mov	eax, DWORD PTR _exponent_param
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN10@xfacet_kno
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN12@xfacet_kno
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	or	DWORD PTR [eax+192], 134217737		; 08000009H

; 1383 :   }
; 1384 : 
; 1385 : } // end xfacet_knot_energy_init()

	ret	0
$LN12@xfacet_kno:

; 1382 :     globals(exponent_param)->flags |=  ORDINARY_PARAM | RECALC_PARAMETER | ALWAYS_RECALC;

	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN10@xfacet_kno
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	or	DWORD PTR [eax+192], 134217737		; 08000009H

; 1383 :   }
; 1384 : 
; 1385 : } // end xfacet_knot_energy_init()

	ret	0
$LN10@xfacet_kno:

; 1382 :     globals(exponent_param)->flags |=  ORDINARY_PARAM | RECALC_PARAMETER | ALWAYS_RECALC;

	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
	or	DWORD PTR [eax+192], 134217737		; 08000009H
$LN1@xfacet_kno:

; 1383 :   }
; 1384 : 
; 1385 : } // end xfacet_knot_energy_init()

	ret	0
_xfacet_knot_energy_init ENDP
_TEXT	ENDS
PUBLIC	_xfacet_knot_energy
; Function compile flags: /Ogtp
;	COMDAT _xfacet_knot_energy
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_xfacet_knot_energy PROC				; COMDAT

; 1399 : { REAL ti,energy;

	push	ebp
	mov	ebp, esp
	push	esi

; 1400 : 
; 1401 :   ti = get_vertex_area_star(v_info->id);

	mov	esi, DWORD PTR _v_info$[ebp]
	mov	eax, DWORD PTR [esi]
	push	eax
	call	_get_vertex_area_star

; 1402 :   energy = ti*f_sums[ordinal(v_info->id)];

	mov	eax, DWORD PTR [esi]
	add	esp, 4
	pop	esi
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@xfacet_kno@2
	mov	ecx, DWORD PTR _f_sums
	and	eax, 134217727				; 07ffffffH
	fmul	QWORD PTR [ecx+eax*8]

; 1403 :   return energy;
; 1404 : } // end xfacet_knot_energy()

	pop	ebp
	ret	0
$LN3@xfacet_kno@2:

; 1402 :   energy = ti*f_sums[ordinal(v_info->id)];

	mov	ecx, DWORD PTR _f_sums
	or	eax, -1
	fmul	QWORD PTR [ecx+eax*8]

; 1403 :   return energy;
; 1404 : } // end xfacet_knot_energy()

	pop	ebp
	ret	0
_xfacet_knot_energy ENDP
_TEXT	ENDS
PUBLIC	_v_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_xfacet_knot_energy_gradient
; Function compile flags: /Ogtp
;	COMDAT _xfacet_knot_energy_gradient
_TEXT	SEGMENT
_power$ = -268						; size = 8
_ti$ = -260						; size = 8
tv2401 = -252						; size = 8
_tj$ = -252						; size = 8
_s11$ = -244						; size = 8
_halfpower$ = -244					; size = 8
_s22$ = -236						; size = 8
tv2005 = -232						; size = 4
_sumi$ = -228						; size = 8
tv2003 = -224						; size = 4
_s12$ = -220						; size = 8
tv2007 = -216						; size = 4
_v_info$GSCopy$ = -212					; size = 4
_x$ = -208						; size = 4
tv2009 = -204						; size = 4
_start_fe$ = -204					; size = 4
tv1010 = -200						; size = 4
_next_fe$ = -200					; size = 4
_side2$ = -196						; size = 48
_side1$ = -148						; size = 48
_d$ = -100						; size = 48
_da$ = -52						; size = 48
_sum$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_v_info$ = 8						; size = 4
_xfacet_knot_energy_gradient PROC			; COMDAT

; 1419 : { REAL *x = get_coord(v_info->id);

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	edx, DWORD PTR _web+12
	push	ebx
	push	esi
	mov	esi, DWORD PTR _v_info$[ebp]
	mov	eax, DWORD PTR [esi]
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _dymem
	push	edi
	mov	edi, DWORD PTR _web+104
	add	ecx, DWORD PTR [edi+edx+64]

; 1420 :   vertex_id v_id;
; 1421 :   int i;
; 1422 :   REAL d[MAXCOORD]; /* difference vector between vertices */
; 1423 :   REAL rr,p;
; 1424 :   REAL power,halfpower;
; 1425 :   REAL ti,tj;  /* length weights of vertices, ti for home vertex */
; 1426 :   facetedge_id fe,start_fe,next_fe;
; 1427 :   REAL sumi,sumj,sumjj,area;
; 1428 :   REAL s11,s12,s22,side1[MAXCOORD],side2[MAXCOORD];
; 1429 :   REAL da[MAXCOORD],sum[MAXCOORD];
; 1430 : 
; 1431 :   ti = get_vertex_length_star(v_info->id);

	push	eax
	mov	DWORD PTR _v_info$GSCopy$[ebp], esi
	mov	DWORD PTR _x$[ebp], ecx
	call	_get_vertex_length_star
	fst	QWORD PTR _ti$[ebp]

; 1432 :   power = globals(exponent_param)->value.real;

	mov	eax, DWORD PTR _exponent_param
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	add	esp, 4
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN34@xfacet_kno@3
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN36@xfacet_kno@3
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN35@xfacet_kno@3
$LN36@xfacet_kno@3:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN34@xfacet_kno@3
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN35@xfacet_kno@3
$LN34@xfacet_kno@3:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN35@xfacet_kno@3:
	fld	QWORD PTR [eax+64]

; 1433 :   halfpower = power/2;
; 1434 :   for ( i = 0 ; i < SDIM ; i++ ) 

	mov	ebx, DWORD PTR _web+616
	fst	QWORD PTR _power$[ebp]
	xor	eax, eax
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR _halfpower$[ebp]
	test	ebx, ebx
	jle	SHORT $LN28@xfacet_kno@3
	fldz
$LN31@xfacet_kno@3:

; 1435 :     v_info->grad[0][i] = 0.0; /* intialize gradient */

	mov	ecx, DWORD PTR [esi+1336]
	mov	edx, DWORD PTR [ecx]
	fst	QWORD PTR [edx+eax*8]
	mov	ebx, DWORD PTR _web+616
	inc	eax
	cmp	eax, ebx
	jl	SHORT $LN31@xfacet_kno@3

; 1436 : 
; 1437 :   /* distant change part */
; 1438 :   for ( i = 0 ; i < SDIM ; i++ ) sum[i] = 0.0;

	fstp	ST(0)
	test	ebx, ebx
	jle	SHORT $LN28@xfacet_kno@3
	mov	ecx, ebx
	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	xor	eax, eax
	lea	edi, DWORD PTR _sum$[ebp]
	rep stosd
$LN28@xfacet_kno@3:

; 1439 :   FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR _web+48
	test	ecx, 268435456				; 10000000H
	je	$LN117@xfacet_kno@3
	fstp	ST(0)
$LN25@xfacet_kno@3:
	mov	eax, DWORD PTR _web+12
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	edx, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	mov	DWORD PTR tv1010[ebp], esi
	je	$LN24@xfacet_kno@3

; 1440 :   { REAL *y = get_coord(v_id);

	mov	eax, DWORD PTR _web+104
	mov	edi, DWORD PTR _dymem
	mov	edi, DWORD PTR [eax+edi+64]

; 1441 : 
; 1442 :     tj = get_vertex_length_star(v_id);

	push	ecx
	add	edi, edx
	call	_get_vertex_length_star
	fstp	QWORD PTR _tj$[ebp]

; 1443 :     for ( i = 0 ; i < SDIM ; i++ ) d[i] = x[i] - y[i];

	mov	ebx, DWORD PTR _web+616
	add	esp, 4
	xor	edx, edx
	cmp	ebx, 4
	jl	$LC105@xfacet_kno@3
	mov	ecx, DWORD PTR _x$[ebp]
	mov	ebx, DWORD PTR _x$[ebp]
	mov	esi, edi
	neg	esi
	add	ecx, 24					; 00000018H
	add	ebx, esi
	mov	DWORD PTR tv2003[ebp], ebx
	lea	ebx, DWORD PTR _d$[ebp+esi]
	mov	DWORD PTR tv2005[ebp], ebx
	lea	ebx, DWORD PTR _d$[ebp+esi+8]
	lea	esi, DWORD PTR _d$[ebp+esi+16]
	mov	DWORD PTR tv2007[ebp], ebx
	mov	ebx, DWORD PTR _web+616
	lea	eax, DWORD PTR [edi+8]
	mov	DWORD PTR tv2009[ebp], esi
	npad	8
$LL106@xfacet_kno@3:
	fld	QWORD PTR [ecx-24]
	mov	esi, DWORD PTR tv2003[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _d$[ebp+edx*8-32]
	fld	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv2005[ebp]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv2007[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv2009[ebp]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [esi+eax-32]
	lea	esi, DWORD PTR [ebx-3]
	cmp	edx, esi
	jl	SHORT $LL106@xfacet_kno@3
	mov	esi, DWORD PTR tv1010[ebp]
$LC105@xfacet_kno@3:
	cmp	edx, ebx
	jge	SHORT $LN104@xfacet_kno@3
	mov	ecx, DWORD PTR _x$[ebp]
	lea	eax, DWORD PTR [edi+edx*8]
	neg	edi
	lea	esi, DWORD PTR [edi+ecx]
	mov	ecx, ebx
	lea	edi, DWORD PTR _d$[ebp+edi]
	sub	ecx, edx
$LC20@xfacet_kno@3:
	fld	QWORD PTR [esi+eax]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [edi+eax-8]
	jne	SHORT $LC20@xfacet_kno@3
	mov	esi, DWORD PTR tv1010[ebp]
$LN104@xfacet_kno@3:

; 1444 :     rr = SDIM_dot(d,d);

	lea	edx, DWORD PTR _d$[ebp]
	push	ebx
	push	edx
	mov	eax, edx
	push	eax
	call	_dot

; 1445 :     if ( rr > 1e-12 ) /* don't do self */

	fld	QWORD PTR __real@3d719799812dea11
	fcomp	ST(1)
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 5
	jp	$LN142@xfacet_kno@3

; 1446 :      { p = power*tj/rr/pow(rr,halfpower);  /* inverse power potential */

	fld	QWORD PTR _tj$[ebp]
	fmul	QWORD PTR _power$[ebp]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR tv2401[ebp]
	fld	QWORD PTR _halfpower$[ebp]
	call	__CIpow
	fdivr	QWORD PTR tv2401[ebp]

; 1447 :        for ( i = 0 ; i < SDIM ; i++ ) 

	mov	ebx, DWORD PTR _web+616
	xor	eax, eax
	cmp	ebx, 4
	jl	SHORT $LC108@xfacet_kno@3
	lea	ecx, DWORD PTR [ebx-3]
$LN109@xfacet_kno@3:

; 1448 :           sum[i] -= p*d[i];

	fld	QWORD PTR _d$[ebp+eax*8]
	add	eax, 4
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR _sum$[ebp+eax*8-32]
	fstp	QWORD PTR _sum$[ebp+eax*8-32]
	fld	QWORD PTR _d$[ebp+eax*8-24]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR _sum$[ebp+eax*8-24]
	fstp	QWORD PTR _sum$[ebp+eax*8-24]
	fld	QWORD PTR _d$[ebp+eax*8-16]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR _sum$[ebp+eax*8-16]
	fstp	QWORD PTR _sum$[ebp+eax*8-16]
	fld	QWORD PTR _d$[ebp+eax*8-8]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR _sum$[ebp+eax*8-8]
	fstp	QWORD PTR _sum$[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LN109@xfacet_kno@3
$LC108@xfacet_kno@3:

; 1447 :        for ( i = 0 ; i < SDIM ; i++ ) 

	cmp	eax, ebx
	jge	SHORT $LN148@xfacet_kno@3
$LC16@xfacet_kno@3:

; 1448 :           sum[i] -= p*d[i];

	fld	QWORD PTR _d$[ebp+eax*8]
	inc	eax
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR _sum$[ebp+eax*8-8]
	fstp	QWORD PTR _sum$[ebp+eax*8-8]
	cmp	eax, ebx
	jl	SHORT $LC16@xfacet_kno@3

; 1447 :        for ( i = 0 ; i < SDIM ; i++ ) 

	jmp	SHORT $LN148@xfacet_kno@3
$LN142@xfacet_kno@3:
	mov	ebx, DWORD PTR _web+616
$LN148@xfacet_kno@3:
	fstp	ST(0)
$LN24@xfacet_kno@3:

; 1439 :   FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR _web+12
	mov	edx, DWORD PTR [esi+ecx]
	mov	ecx, DWORD PTR [edx]
	test	ecx, 268435456				; 10000000H
	jne	$LN25@xfacet_kno@3
	fld	QWORD PTR _ti$[ebp]
	mov	esi, DWORD PTR _v_info$GSCopy$[ebp]
$LN117@xfacet_kno@3:

; 1449 :      }
; 1450 :   }
; 1451 :   for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	test	ebx, ebx
	jle	SHORT $LN134@xfacet_kno@3
$LN13@xfacet_kno@3:

; 1452 :       v_info->grad[0][i] += ti*sum[i];

	mov	ecx, DWORD PTR [esi+1336]
	fld	QWORD PTR _sum$[ebp+eax*8]
	mov	edx, DWORD PTR [ecx]
	fmul	ST(0), ST(1)
	lea	ecx, DWORD PTR [edx+eax*8]
	inc	eax
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN13@xfacet_kno@3
$LN134@xfacet_kno@3:

; 1453 :  
; 1454 :   /* area change part */
; 1455 :   /* go around all neighbor vertices */
; 1456 :   start_fe = get_vertex_fe(v_info->id);

	mov	esi, DWORD PTR [esi]
	fstp	ST(0)
	push	esi
	call	_get_vertex_fe
	add	esp, 4
	mov	DWORD PTR _start_fe$[ebp], eax

; 1457 :   sumi = f_sums[ordinal(v_info->id)];

	test	esi, 268435456				; 10000000H
	je	SHORT $LN40@xfacet_kno@3
	and	esi, 134217727				; 07ffffffH
	jmp	SHORT $LN41@xfacet_kno@3
$LN40@xfacet_kno@3:
	or	esi, -1
$LN41@xfacet_kno@3:
	mov	ecx, DWORD PTR _f_sums
	fld	QWORD PTR [ecx+esi*8]
	fst	QWORD PTR _sumi$[ebp]

; 1458 :   if ( valid_id(start_fe) )

	test	eax, 268435456				; 10000000H
	je	$LN95@xfacet_kno@3

; 1459 :     for ( fe = start_fe ; ; )

	mov	edx, eax
$LN187@xfacet_kno@3:

; 1460 :     { 
; 1461 :       next_fe = inverse_id(get_next_facet(get_prev_edge(fe)));

	mov	edi, DWORD PTR _web+460
	fstp	ST(0)
	mov	esi, edx
	and	esi, 134217727				; 07ffffffH
	mov	ebx, edx
	add	esi, esi
	shr	ebx, 27					; 0000001bH
	add	esi, esi
	and	ebx, 1
	je	SHORT $LN47@xfacet_kno@3
	mov	ecx, DWORD PTR [esi+edi]
	mov	eax, DWORD PTR [ecx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN46@xfacet_kno@3
$LN47@xfacet_kno@3:
	mov	eax, DWORD PTR _web+460
	mov	ecx, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [ecx+28]
$LN46@xfacet_kno@3:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN51@xfacet_kno@3
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN50@xfacet_kno@3
$LN51@xfacet_kno@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [eax+40]
$LN50@xfacet_kno@3:
	xor	eax, 134217728				; 08000000H

; 1462 :       get_edge_side(get_fe_edge(fe),side1);

	mov	edi, edx
	mov	DWORD PTR _next_fe$[ebp], eax
	mov	eax, DWORD PTR [ecx+20]
	lea	edx, DWORD PTR _side1$[ebp]
	and	edi, 134217728				; 08000000H
	push	edx
	xor	eax, edi
	push	eax
	call	_get_edge_side

; 1463 :       get_edge_side(get_fe_edge(get_next_edge(fe)),side2);

	mov	ecx, DWORD PTR _web+460
	add	esp, 8
	test	ebx, ebx
	je	SHORT $LN57@xfacet_kno@3
	mov	edx, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN56@xfacet_kno@3
$LN57@xfacet_kno@3:
	mov	eax, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [eax+32]
$LN56@xfacet_kno@3:
	lea	edx, DWORD PTR _side2$[ebp]
	push	edx
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	push	eax
	call	_get_edge_side

; 1464 :       s11 = SDIM_dot(side1,side1);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _side1$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fstp	QWORD PTR _s11$[ebp]

; 1465 :       s12 = SDIM_dot(side1,side2);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _side2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _side1$[ebp]
	push	ecx
	call	_dot
	fstp	QWORD PTR _s12$[ebp]

; 1466 :       s22 = SDIM_dot(side2,side2);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _side2$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fst	QWORD PTR _s22$[ebp]

; 1467 :       area = sqrt(s11*s22 - s12*s12);

	fmul	QWORD PTR _s11$[ebp]
	add	esp, 44					; 0000002cH
	fld	QWORD PTR _s12$[ebp]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	call	__CIsqrt

; 1468 :       for ( i = 0 ; i < SDIM ; i++ )

	fld	QWORD PTR __real@4018000000000000
	mov	edx, DWORD PTR _web+616
	fld	QWORD PTR _s22$[ebp]
	fld	QWORD PTR _s12$[ebp]
	xor	eax, eax
	cmp	edx, 4
	jl	SHORT $LC111@xfacet_kno@3
	lea	ecx, DWORD PTR [edx-3]
$LN112@xfacet_kno@3:

; 1469 :          da[i] = (s12*side2[i] - s22*side1[i])/area/6;

	fld	QWORD PTR _side2$[ebp+eax*8]
	add	eax, 4
	fmul	ST(0), ST(1)
	fld	QWORD PTR _side1$[ebp+eax*8-32]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR _da$[ebp+eax*8-32]
	fld	QWORD PTR _side2$[ebp+eax*8-24]
	fmul	ST(0), ST(1)
	fld	QWORD PTR _side1$[ebp+eax*8-24]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR _da$[ebp+eax*8-24]
	fld	QWORD PTR _side2$[ebp+eax*8-16]
	fmul	ST(0), ST(1)
	fld	QWORD PTR _side1$[ebp+eax*8-16]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR _da$[ebp+eax*8-16]
	fld	QWORD PTR _side2$[ebp+eax*8-8]
	fmul	ST(0), ST(1)
	fld	QWORD PTR _side1$[ebp+eax*8-8]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR _da$[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LN112@xfacet_kno@3
$LC111@xfacet_kno@3:

; 1468 :       for ( i = 0 ; i < SDIM ; i++ )

	cmp	eax, edx
	jge	SHORT $LN164@xfacet_kno@3
$LC7@xfacet_kno@3:

; 1469 :          da[i] = (s12*side2[i] - s22*side1[i])/area/6;

	fld	QWORD PTR _side2$[ebp+eax*8]
	inc	eax
	fmul	ST(0), ST(1)
	fld	QWORD PTR _side1$[ebp+eax*8-8]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR _da$[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LC7@xfacet_kno@3
$LN164@xfacet_kno@3:

; 1470 :       sumj = f_sums[ordinal(get_fe_headv(fe))];

	mov	ebx, DWORD PTR _web+460
	fstp	ST(3)
	mov	edx, DWORD PTR [esi+ebx]
	fstp	ST(2)
	mov	eax, DWORD PTR [edx+20]
	fstp	ST(1)
	mov	edx, DWORD PTR _dymem
	fstp	ST(0)
	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+edx+304]
	mov	edx, DWORD PTR _web+124
	xor	eax, edi
	mov	edi, DWORD PTR _web+636
	mov	esi, eax
	test	eax, 134217728				; 08000000H
	je	SHORT $LN65@xfacet_kno@3
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+esi*4]
	mov	esi, DWORD PTR [ecx+esi]
	jmp	SHORT $LN64@xfacet_kno@3
$LN65@xfacet_kno@3:
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+esi*4]
	lea	esi, DWORD PTR [esi+edi*4]
	mov	esi, DWORD PTR [esi+ecx]
$LN64@xfacet_kno@3:
	test	esi, 268435456				; 10000000H
	je	SHORT $LN42@xfacet_kno@3
	test	eax, 134217728				; 08000000H
	je	SHORT $LN71@xfacet_kno@3
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [ecx+eax]
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN43@xfacet_kno@3
$LN71@xfacet_kno@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	lea	eax, DWORD PTR [eax+edi*4]
	mov	eax, DWORD PTR [eax+ecx]
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN43@xfacet_kno@3
$LN42@xfacet_kno@3:
	or	eax, -1
$LN43@xfacet_kno@3:
	mov	esi, DWORD PTR _f_sums
	fld	QWORD PTR [esi+eax*8]

; 1471 :       sumjj = f_sums[ordinal(get_fe_headv(next_fe))];

	mov	eax, DWORD PTR _next_fe$[ebp]
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ebx+esi*4]
	mov	ebx, eax
	mov	eax, DWORD PTR [esi+20]
	and	ebx, 134217728				; 08000000H
	xor	eax, ebx
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+esi*4]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN77@xfacet_kno@3
	mov	esi, DWORD PTR [ecx+esi]
	jmp	SHORT $LN76@xfacet_kno@3
$LN77@xfacet_kno@3:
	lea	esi, DWORD PTR [esi+edi*4]
	mov	esi, DWORD PTR [esi+ecx]
$LN76@xfacet_kno@3:
	test	esi, 268435456				; 10000000H
	je	SHORT $LN44@xfacet_kno@3
	test	eax, 134217728				; 08000000H
	je	SHORT $LN83@xfacet_kno@3
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR [ecx+edx]
	and	ecx, 134217727				; 07ffffffH
	jmp	SHORT $LN45@xfacet_kno@3
$LN83@xfacet_kno@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	lea	edx, DWORD PTR [eax+edi*4]
	mov	ecx, DWORD PTR [edx+ecx]
	and	ecx, 134217727				; 07ffffffH
	jmp	SHORT $LN45@xfacet_kno@3
$LN44@xfacet_kno@3:
	or	ecx, -1
$LN45@xfacet_kno@3:
	mov	eax, DWORD PTR _f_sums
	fld	QWORD PTR [eax+ecx*8]

; 1472 :       for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN178@xfacet_kno@3
	fld	QWORD PTR _sumi$[ebp]
$LN4@xfacet_kno@3:

; 1473 :          v_info->grad[0][i] += sumj*da[i] + sumjj*da[i] + sumi*da[i];

	fld	QWORD PTR _da$[ebp+eax*8]
	mov	ecx, DWORD PTR _v_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [ecx+1336]
	fmul	ST(0), ST(2)
	fld	QWORD PTR _da$[ebp+eax*8]
	mov	ecx, DWORD PTR [edx]
	fmul	ST(0), ST(4)
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	faddp	ST(1), ST(0)
	fld	QWORD PTR _da$[ebp+eax*8-8]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN4@xfacet_kno@3

; 1472 :       for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(1)
	fstp	ST(1)
	jmp	SHORT $LN2@xfacet_kno@3
$LN178@xfacet_kno@3:
	fstp	ST(0)
	fstp	ST(0)
	fld	QWORD PTR _sumi$[ebp]
$LN2@xfacet_kno@3:

; 1474 :       if ( next_fe == start_fe ) break;

	mov	edx, DWORD PTR _next_fe$[ebp]
	cmp	edx, DWORD PTR _start_fe$[ebp]

; 1475 :       fe = next_fe;
; 1476 :     }

	jne	$LN187@xfacet_kno@3
$LN95@xfacet_kno@3:

; 1477 :   return ti*sumi;
; 1478 : } // end xfacet_knot_energy_gradient()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fmul	QWORD PTR _ti$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_xfacet_knot_energy_gradient ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@GEMJCNAE@Buck?5denominator?5nonpositive?4?6?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_buck_knot_energy
EXTRN	_kb_error:PROC
;	COMDAT ??_C@_0BP@GEMJCNAE@Buck?5denominator?5nonpositive?4?6?$AA@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0BP@GEMJCNAE@Buck?5denominator?5nonpositive?4?6?$AA@ DB 'Buck denom'
	DB	'inator nonpositive.', 0aH, 00H		; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\knot1.c
CONST	ENDS
;	COMDAT _buck_knot_energy
_TEXT	SEGMENT
_d2$ = -140						; size = 8
_L1$ = -132						; size = 8
_power$ = -124						; size = 8
_d1$ = -116						; size = 8
_denom$ = -108						; size = 8
_L2$ = -108						; size = 8
_e1$ = -100						; size = 4
_energy$ = -96						; size = 8
_x1$ = -88						; size = 4
_x2$ = -84						; size = 4
tv1538 = -80						; size = 4
tv1103 = -80						; size = 4
_d3$ = -76						; size = 8
tv4427 = -72						; size = 4
tv4424 = -72						; size = 4
tv2901 = -72						; size = 4
tv2311 = -72						; size = 4
tv1555 = -68						; size = 4
tv4429 = -64						; size = 4
tv4119 = -64						; size = 4
tv1114 = -64						; size = 4
_y2$ = -64						; size = 4
tv4420 = -60						; size = 4
tv2986 = -60						; size = 4
tv1559 = -60						; size = 4
tv4431 = -56						; size = 4
tv2982 = -56						; size = 4
tv1845 = -56						; size = 4
tv1563 = -56						; size = 4
_dx$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_v_info$ = 8						; size = 4
_buck_knot_energy PROC					; COMDAT

; 1507 : { edge_id e1 = v_info->id,e2;

	push	ebp
	mov	ebp, esp
	sub	esp, 140				; 0000008cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _v_info$[ebp]

; 1508 :   REAL *x1,*x2,*yy1,*y2; /* end coordinates */
; 1509 :   REAL d1,d2,d3,d4,L1,L2;
; 1510 :   REAL power,denom;
; 1511 :   REAL energy = 0.0;

	fldz

; 1512 :   REAL dx[MAXCOORD];
; 1513 :   int j;
; 1514 : 
; 1515 :   power = globals(exponent_param)->value.real;

	mov	ecx, DWORD PTR _dymem
	fstp	QWORD PTR _energy$[ebp]
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR [eax]
	mov	eax, DWORD PTR _exponent_param
	mov	edx, eax
	and	edx, -16777216				; ff000000H
	mov	DWORD PTR _e1$[ebp], edi
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN32@buck_knot_
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN34@buck_knot_
	mov	edx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [edx]
	jmp	SHORT $LN33@buck_knot_
$LN34@buck_knot_:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN32@buck_knot_
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN33@buck_knot_
$LN32@buck_knot_:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ecx]
$LN33@buck_knot_:

; 1516 :   x1 = get_coord(get_edge_tailv(e1));

	mov	edx, DWORD PTR _web+124
	fld	QWORD PTR [eax+64]
	mov	esi, edi
	fstp	QWORD PTR _power$[ebp]
	and	edi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR _web+216
	mov	edx, DWORD PTR [edx+ecx+304]
	shr	esi, 27					; 0000001bH
	add	edx, eax
	and	esi, 1
	je	SHORT $LN39@buck_knot_
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN38@buck_knot_
$LN39@buck_knot_:
	mov	eax, DWORD PTR [edx]
$LN38@buck_knot_:
	mov	edi, DWORD PTR _web+104
	mov	ecx, DWORD PTR [edi+ecx+64]
	mov	edi, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [edi+eax*4]
	add	ebx, ecx
	mov	DWORD PTR _x1$[ebp], ebx

; 1517 :   x2 = get_coord(get_edge_headv(e1));

	test	esi, esi
	je	SHORT $LN43@buck_knot_
	mov	eax, DWORD PTR [edx]
	jmp	SHORT $LN42@buck_knot_
$LN43@buck_knot_:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
$LN42@buck_knot_:
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edi+eax*4]
	add	esi, ecx

; 1518 :   for ( j = 0 ; j < SDIM ; j++ ) dx[j] = x2[j] - x1[j];

	mov	ecx, DWORD PTR _web+616
	xor	edx, edx
	mov	DWORD PTR _x2$[ebp], esi
	cmp	ecx, 4
	jl	SHORT $LC69@buck_knot_
	mov	edi, esi
	sub	edi, ebx
	mov	DWORD PTR tv1538[ebp], edi
	lea	edi, DWORD PTR _dx$[ebp]
	sub	edi, ebx
	mov	DWORD PTR tv1555[ebp], edi
	lea	edi, DWORD PTR _dx$[ebp+8]
	sub	edi, ebx
	mov	DWORD PTR tv1559[ebp], edi
	lea	edi, DWORD PTR _dx$[ebp+16]
	sub	edi, ebx
	lea	ecx, DWORD PTR [esi+24]
	lea	eax, DWORD PTR [ebx+8]
	mov	DWORD PTR tv1563[ebp], edi
	npad	6
$LL70@buck_knot_:
	fld	QWORD PTR [ecx-24]
	mov	edi, DWORD PTR tv1538[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _dx$[ebp+edx*8-32]
	fld	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv1555[ebp]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv1559[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv1563[ebp]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR _web+616
	add	edi, -3					; fffffffdH
	cmp	edx, edi
	jl	SHORT $LL70@buck_knot_
	mov	ecx, DWORD PTR _web+616
$LC69@buck_knot_:
	cmp	edx, ecx
	jge	SHORT $LN68@buck_knot_
	lea	edi, DWORD PTR _dx$[ebp]
	sub	esi, ebx
	sub	edi, ebx
	lea	eax, DWORD PTR [ebx+edx*8]
	sub	ecx, edx
$LC29@buck_knot_:
	fld	QWORD PTR [eax+esi]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax+edi-8]
	jne	SHORT $LC29@buck_knot_
	mov	ecx, DWORD PTR _web+616
$LN68@buck_knot_:

; 1519 :   L1 = sqrt(SDIM_dot(dx,dx));

	push	ecx
	lea	ecx, DWORD PTR _dx$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR _L1$[ebp]

; 1520 :   FOR_ALL_EDGES(e2)

	mov	edx, DWORD PTR _web+160
	test	edx, 268435456				; 10000000H
	je	$LN87@buck_knot_
	npad	12
$LL94@buck_knot_:
	mov	eax, DWORD PTR _web+124
	mov	ecx, edx
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	esi, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR [esi+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	mov	DWORD PTR tv1103[ebp], ecx
	je	$LN25@buck_knot_

; 1521 :     { if ( e2 <= e1 ) continue; /* each pair once */

	cmp	edx, DWORD PTR _e1$[ebp]
	jbe	$LN25@buck_knot_

; 1522 :       yy1 = get_coord(get_edge_tailv(e2));

	mov	ecx, DWORD PTR _dymem
	shr	edx, 27					; 0000001bH
	and	edx, 1
	mov	DWORD PTR tv1114[ebp], edx
	je	SHORT $LN47@buck_knot_
	mov	edx, DWORD PTR _web+216
	mov	edi, DWORD PTR [edx+ecx+304]
	mov	edx, DWORD PTR _web+636
	add	edi, esi
	mov	eax, DWORD PTR [edi+edx*4]
	jmp	SHORT $LN46@buck_knot_
$LN47@buck_knot_:
	mov	eax, DWORD PTR _web+216
	mov	edi, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edi+esi]
	add	edi, esi
$LN46@buck_knot_:
	mov	edx, DWORD PTR _web+104
	mov	ecx, DWORD PTR [edx+ecx+64]
	mov	edx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+eax*4]
	add	esi, ecx

; 1523 :       y2 = get_coord(get_edge_headv(e2));

	cmp	DWORD PTR tv1114[ebp], 0
	je	SHORT $LN51@buck_knot_
	mov	eax, DWORD PTR [edi]
	jmp	SHORT $LN50@buck_knot_
$LN51@buck_knot_:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edi+eax*4]
$LN50@buck_knot_:
	and	eax, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edx+eax*4]
	add	edi, ecx

; 1524 :       for ( j = 0 ; j < SDIM ; j++ ) dx[j] = y2[j] - yy1[j];

	xor	edx, edx
	cmp	DWORD PTR _web+616, 4
	mov	DWORD PTR _y2$[ebp], edi
	jl	SHORT $LC72@buck_knot_
	lea	ecx, DWORD PTR [edi+24]
	sub	edi, esi
	mov	DWORD PTR tv1845[ebp], edi
	mov	edi, esi
	neg	edi
	lea	ebx, DWORD PTR _dx$[ebp+edi]
	mov	DWORD PTR tv4420[ebp], ebx
	lea	ebx, DWORD PTR _dx$[ebp+edi+8]
	lea	edi, DWORD PTR _dx$[ebp+edi+16]
	lea	eax, DWORD PTR [esi+8]
	mov	DWORD PTR tv4424[ebp], edi
$LL73@buck_knot_:
	fld	QWORD PTR [ecx-24]
	mov	edi, DWORD PTR tv1845[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _dx$[ebp+edx*8-32]
	fld	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv4420[ebp]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [eax+edi-32]
	mov	edi, DWORD PTR tv4424[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [eax+ebx-32]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [eax+edi-32]
	mov	edi, DWORD PTR _web+616
	add	edi, -3					; fffffffdH
	cmp	edx, edi
	jl	SHORT $LL73@buck_knot_
	mov	ebx, DWORD PTR _x1$[ebp]
	mov	edi, DWORD PTR _y2$[ebp]
$LC72@buck_knot_:
	cmp	edx, DWORD PTR _web+616
	jge	SHORT $LN71@buck_knot_
	mov	ecx, edi
	sub	ecx, esi
	mov	DWORD PTR tv1845[ebp], ecx
	lea	ecx, DWORD PTR _dx$[ebp]
	sub	ecx, esi
	mov	DWORD PTR tv4420[ebp], ecx
	mov	ecx, DWORD PTR _web+616
	lea	eax, DWORD PTR [esi+edx*8]
	sub	ecx, edx
$LL92@buck_knot_:
	mov	edx, DWORD PTR tv1845[ebp]
	fld	QWORD PTR [eax+edx]
	mov	edx, DWORD PTR tv4420[ebp]
	fsub	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fstp	QWORD PTR [eax+edx-8]
	jne	SHORT $LL92@buck_knot_
$LN71@buck_knot_:

; 1525 :       L2 = sqrt(SDIM_dot(dx,dx));

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _dx$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR _L2$[ebp]

; 1526 :       for ( j = 0 ; j < SDIM ; j++ ) dx[j] = yy1[j] - x1[j];

	xor	edx, edx
	cmp	DWORD PTR _web+616, 4
	jl	SHORT $LC75@buck_knot_
	mov	edi, esi
	sub	edi, ebx
	mov	DWORD PTR tv2311[ebp], edi
	lea	edi, DWORD PTR _dx$[ebp]
	sub	edi, ebx
	mov	DWORD PTR tv1555[ebp], edi
	lea	edi, DWORD PTR _dx$[ebp+8]
	sub	edi, ebx
	mov	DWORD PTR tv1559[ebp], edi
	lea	edi, DWORD PTR _dx$[ebp+16]
	sub	edi, ebx
	lea	ecx, DWORD PTR [esi+24]
	lea	eax, DWORD PTR [ebx+8]
	mov	DWORD PTR tv1563[ebp], edi
$LL88@buck_knot_:
	fld	QWORD PTR [ecx-24]
	mov	edi, DWORD PTR tv2311[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _dx$[ebp+edx*8-32]
	fld	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv1555[ebp]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv1559[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv1563[ebp]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR _web+616
	add	edi, -3					; fffffffdH
	cmp	edx, edi
	jl	SHORT $LL88@buck_knot_
	mov	edi, DWORD PTR _y2$[ebp]
$LC75@buck_knot_:
	cmp	edx, DWORD PTR _web+616
	jge	SHORT $LN74@buck_knot_
	mov	ecx, esi
	sub	ecx, ebx
	mov	DWORD PTR tv2311[ebp], ecx
	lea	ecx, DWORD PTR _dx$[ebp]
	sub	ecx, ebx
	mov	DWORD PTR tv1555[ebp], ecx
	mov	ecx, DWORD PTR _web+616
	lea	eax, DWORD PTR [ebx+edx*8]
	sub	ecx, edx
$LL91@buck_knot_:
	mov	edx, DWORD PTR tv2311[ebp]
	fld	QWORD PTR [eax+edx]
	mov	edx, DWORD PTR tv1555[ebp]
	fsub	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fstp	QWORD PTR [eax+edx-8]
	jne	SHORT $LL91@buck_knot_
$LN74@buck_knot_:

; 1527 :       d1 = sqrt(SDIM_dot(dx,dx));

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _dx$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fst	QWORD PTR _d1$[ebp]

; 1528 :       if ( d1 <= 0.0 ) continue; /* prevent division by 0 */

	fldz
	fcompp
	fnstsw	ax
	test	ah, 1
	je	$LN86@buck_knot_

; 1529 :       for ( j = 0 ; j < SDIM ; j++ ) dx[j] = yy1[j] - x2[j];

	xor	edx, edx
	cmp	DWORD PTR _web+616, 4
	jl	SHORT $LC78@buck_knot_
	mov	edi, DWORD PTR _x2$[ebp]
	mov	ebx, esi
	sub	ebx, edi
	mov	DWORD PTR tv2901[ebp], ebx
	lea	ebx, DWORD PTR _dx$[ebp]
	sub	ebx, edi
	mov	DWORD PTR tv2982[ebp], ebx
	lea	ebx, DWORD PTR _dx$[ebp+8]
	sub	ebx, edi
	mov	DWORD PTR tv2986[ebp], ebx
	lea	ebx, DWORD PTR _dx$[ebp+16]
	lea	ecx, DWORD PTR [esi+24]
	lea	eax, DWORD PTR [edi+8]
	sub	ebx, edi
$LL79@buck_knot_:
	fld	QWORD PTR [ecx-24]
	mov	edi, DWORD PTR tv2901[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _dx$[ebp+edx*8-32]
	fld	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv2982[ebp]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv2986[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR _web+616
	fld	QWORD PTR [ecx-32]
	add	edi, -3					; fffffffdH
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [ebx+eax-32]
	cmp	edx, edi
	jl	SHORT $LL79@buck_knot_
	mov	edi, DWORD PTR _y2$[ebp]
	mov	ebx, DWORD PTR _x1$[ebp]
$LC78@buck_knot_:
	cmp	edx, DWORD PTR _web+616
	jge	SHORT $LN77@buck_knot_
	mov	ecx, DWORD PTR _x2$[ebp]
	sub	esi, ecx
	mov	DWORD PTR tv2901[ebp], esi
	lea	eax, DWORD PTR [ecx+edx*8]
	lea	esi, DWORD PTR _dx$[ebp]
	sub	esi, ecx
	mov	ecx, DWORD PTR _web+616
	sub	ecx, edx
	mov	edx, DWORD PTR tv2901[ebp]
$LC13@buck_knot_:
	fld	QWORD PTR [edx+eax]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [esi+eax-8]
	jne	SHORT $LC13@buck_knot_
$LN77@buck_knot_:

; 1530 :       d2 = sqrt(SDIM_dot(dx,dx));

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _dx$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fst	QWORD PTR _d2$[ebp]

; 1531 :       if ( d2 <= 0.0 ) continue; /* for adjacent edges     */

	fldz
	fcompp
	fnstsw	ax
	test	ah, 1
	je	$LN86@buck_knot_

; 1532 :       for ( j = 0 ; j < SDIM ; j++ ) dx[j] = x2[j] - y2[j];

	xor	edx, edx
	cmp	DWORD PTR _web+616, 4
	jl	SHORT $LC81@buck_knot_
	mov	ebx, DWORD PTR _x2$[ebp]
	mov	esi, edi
	neg	esi
	lea	ecx, DWORD PTR [ebx+24]
	add	ebx, esi
	mov	DWORD PTR tv4427[ebp], ebx
	lea	ebx, DWORD PTR _dx$[ebp+esi]
	mov	DWORD PTR tv4429[ebp], ebx
	lea	ebx, DWORD PTR _dx$[ebp+esi+8]
	lea	eax, DWORD PTR [edi+8]
	mov	DWORD PTR tv4431[ebp], ebx
	lea	esi, DWORD PTR _dx$[ebp+esi+16]
$LL90@buck_knot_:
	fld	QWORD PTR [ecx-24]
	mov	ebx, DWORD PTR tv4427[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _dx$[ebp+edx*8-32]
	fld	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv4429[ebp]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR tv4431[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [eax+ebx-32]
	mov	ebx, DWORD PTR _web+616
	fld	QWORD PTR [ecx-32]
	add	ebx, -3					; fffffffdH
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [eax+esi-32]
	cmp	edx, ebx
	jl	SHORT $LL90@buck_knot_
	mov	ebx, DWORD PTR _x1$[ebp]
$LC81@buck_knot_:
	cmp	edx, DWORD PTR _web+616
	jge	SHORT $LN80@buck_knot_
	mov	esi, DWORD PTR _x2$[ebp]
	mov	ecx, edi
	neg	ecx
	add	esi, ecx
	lea	ecx, DWORD PTR _dx$[ebp+ecx]
	mov	DWORD PTR tv4429[ebp], ecx
	mov	ecx, DWORD PTR _web+616
	lea	eax, DWORD PTR [edi+edx*8]
	sub	ecx, edx
$LC9@buck_knot_:
	fld	QWORD PTR [eax+esi]
	mov	edx, DWORD PTR tv4429[ebp]
	fsub	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fstp	QWORD PTR [eax+edx-8]
	jne	SHORT $LC9@buck_knot_
$LN80@buck_knot_:

; 1533 :       d3 = sqrt(SDIM_dot(dx,dx));

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _dx$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fst	QWORD PTR _d3$[ebp]

; 1534 :       if ( d3 <= 0.0 ) continue; /* prevent division by 0 */

	fldz
	fcompp
	fnstsw	ax
	test	ah, 1
	je	$LN86@buck_knot_

; 1535 :       for ( j = 0 ; j < SDIM ; j++ ) dx[j] = y2[j] - x1[j];

	mov	ecx, DWORD PTR _web+616
	xor	edx, edx
	cmp	ecx, 4
	jl	SHORT $LC84@buck_knot_
	mov	esi, edi
	sub	esi, ebx
	mov	DWORD PTR tv4119[ebp], esi
	lea	esi, DWORD PTR _dx$[ebp]
	sub	esi, ebx
	mov	DWORD PTR tv1555[ebp], esi
	lea	esi, DWORD PTR _dx$[ebp+8]
	sub	esi, ebx
	mov	DWORD PTR tv1559[ebp], esi
	lea	esi, DWORD PTR _dx$[ebp+16]
	sub	esi, ebx
	lea	ecx, DWORD PTR [edi+24]
	lea	eax, DWORD PTR [ebx+8]
	mov	DWORD PTR tv1563[ebp], esi
$LL89@buck_knot_:
	fld	QWORD PTR [ecx-24]
	mov	esi, DWORD PTR tv4119[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _dx$[ebp+edx*8-32]
	fld	QWORD PTR [eax+esi-32]
	mov	esi, DWORD PTR tv1555[ebp]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [eax+esi-32]
	mov	esi, DWORD PTR tv1559[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [eax+esi-32]
	mov	esi, DWORD PTR tv1563[ebp]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [eax+esi-32]
	mov	esi, DWORD PTR _web+616
	add	esi, -3					; fffffffdH
	cmp	edx, esi
	jl	SHORT $LL89@buck_knot_
	mov	ecx, DWORD PTR _web+616
$LC84@buck_knot_:
	cmp	edx, ecx
	jge	SHORT $LN83@buck_knot_
	lea	esi, DWORD PTR _dx$[ebp]
	sub	edi, ebx
	sub	esi, ebx
	lea	eax, DWORD PTR [ebx+edx*8]
	sub	ecx, edx
$LC5@buck_knot_:
	fld	QWORD PTR [eax+edi]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [esi+eax-8]
	jne	SHORT $LC5@buck_knot_
	mov	ecx, DWORD PTR _web+616
$LN83@buck_knot_:

; 1536 :       d4 = sqrt(SDIM_dot(dx,dx));

	push	ecx
	lea	eax, DWORD PTR _dx$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt

; 1537 :       if ( d4 <= 0.0 ) continue; /* prevent division by 0 */

	fldz
	fcom	ST(1)
	fnstsw	ax
	test	ah, 1
	je	SHORT $LN96@buck_knot_

; 1538 :       denom = d1+d2+d3+d4-2*(L1+L2);

	fld	QWORD PTR _d2$[ebp]
	fadd	QWORD PTR _d1$[ebp]
	fadd	QWORD PTR _d3$[ebp]
	faddp	ST(2), ST(0)
	fld	QWORD PTR _L2$[ebp]
	fadd	QWORD PTR _L1$[ebp]
	fadd	ST(0), ST(0)
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _denom$[ebp]

; 1539 :       if ( denom <= 0.0 )

	fcom	ST(1)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 65					; 00000041H
	jp	SHORT $LN1@buck_knot_

; 1540 :          kb_error(1543,"Buck denominator nonpositive.\n",RECOVERABLE);

	push	1
	fstp	ST(0)
	push	OFFSET ??_C@_0BP@GEMJCNAE@Buck?5denominator?5nonpositive?4?6?$AA@
	push	1543					; 00000607H
	call	_kb_error
	fld	QWORD PTR _denom$[ebp]
	add	esp, 12					; 0000000cH
$LN1@buck_knot_:

; 1541 : 
; 1542 :       energy += pow(denom ,-power);

	fld	QWORD PTR _power$[ebp]
	fchs
	call	__CIpow
	fadd	QWORD PTR _energy$[ebp]
	fstp	QWORD PTR _energy$[ebp]
	jmp	SHORT $LN86@buck_knot_
$LN96@buck_knot_:

; 1537 :       if ( d4 <= 0.0 ) continue; /* prevent division by 0 */

	fstp	ST(1)
	fstp	ST(0)
$LN86@buck_knot_:

; 1541 : 
; 1542 :       energy += pow(denom ,-power);

	mov	ecx, DWORD PTR tv1103[ebp]
$LN25@buck_knot_:

; 1520 :   FOR_ALL_EDGES(e2)

	mov	edx, DWORD PTR _web+124
	mov	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR [eax]
	test	edx, 268435456				; 10000000H
	jne	$LL94@buck_knot_
$LN87@buck_knot_:

; 1543 :     }
; 1544 :   return 2*energy; /* since each pair once */
; 1545 : } // end buck_knot_energy()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _energy$[ebp]
	pop	edi
	fadd	ST(0), ST(0)
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_buck_knot_energy ENDP
_TEXT	ENDS
PUBLIC	_v_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_buck_knot_energy_gradient
; Function compile flags: /Ogtp
;	COMDAT _buck_knot_energy_gradient
_TEXT	SEGMENT
_L1$ = -384						; size = 8
_d3$ = -376						; size = 8
_d1$ = -368						; size = 8
_power$ = -360						; size = 8
_v_info$GSCopy$ = -352					; size = 4
tv1379 = -348						; size = 8
_L2$ = -348						; size = 8
tv1243 = -340						; size = 4
_energy$ = -336						; size = 8
_x1$ = -328						; size = 4
_x2$ = -324						; size = 4
_d4$ = -320						; size = 8
tv4835 = -316						; size = 4
tv4830 = -316						; size = 4
tv4822 = -316						; size = 4
tv4313 = -316						; size = 4
tv3094 = -316						; size = 4
tv1764 = -316						; size = 4
_denom$ = -312						; size = 8
tv4833 = -308						; size = 4
tv4824 = -308						; size = 4
tv4296 = -308						; size = 4
tv3077 = -308						; size = 4
tv2050 = -308						; size = 4
tv1768 = -308						; size = 4
_d2$ = -304						; size = 8
tv4826 = -300						; size = 4
tv4818 = -300						; size = 4
tv3098 = -300						; size = 4
tv1760 = -300						; size = 4
tv4839 = -296						; size = 4
tv4317 = -296						; size = 4
tv1743 = -296						; size = 4
_y2$ = -296						; size = 4
_dL2$ = -292						; size = 48
_dd4$ = -244						; size = 48
_dd2$ = -196						; size = 48
_dd1$ = -148						; size = 48
_dd3$ = -100						; size = 48
_dL1$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_v_info$ = 8						; size = 4
_buck_knot_energy_gradient PROC				; COMDAT

; 1559 : { edge_id e1 = v_info->id,e2;

	push	ebp
	mov	ebp, esp
	sub	esp, 384				; 00000180H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	edx, DWORD PTR _v_info$[ebp]

; 1560 :   REAL *x1,*x2,*yy1,*y2; /* end coordinates */
; 1561 :   REAL d1,d2,d3,d4,L1,L2;
; 1562 :   REAL power;
; 1563 :   REAL energy = 0.0;

	fldz
	push	ebx
	fst	QWORD PTR _energy$[ebp]
	mov	ebx, DWORD PTR [edx]
	push	esi

; 1564 :   REAL denom,coeff;
; 1565 :   int i,j;
; 1566 :   REAL dL1[MAXCOORD], dL2[MAXCOORD], dd1[MAXCOORD], dd2[MAXCOORD], 
; 1567 :          dd3[MAXCOORD], dd4[MAXCOORD];
; 1568 : 
; 1569 :   for ( i = 0 ; i < 2 ; i++ )

	mov	esi, DWORD PTR _web+616
	push	edi

; 1582 :       for ( j = 0 ; j < SDIM ; j++ ) dd1[j] = x1[j] - yy1[j];

	mov	DWORD PTR _v_info$GSCopy$[ebp], edx
	xor	ecx, ecx
$LN37@buck_knot_@2:

; 1570 :      for ( j = 0 ; j < SDIM ; j++ ) v_info->grad[i][j] = 0.0;

	xor	eax, eax
	test	esi, esi
	jle	SHORT $LN36@buck_knot_@2
$LN34@buck_knot_@2:
	mov	esi, DWORD PTR [edx+1336]
	mov	esi, DWORD PTR [ecx+esi]
	fst	QWORD PTR [esi+eax*8]
	mov	esi, DWORD PTR _web+616
	inc	eax
	cmp	eax, esi
	jl	SHORT $LN34@buck_knot_@2
$LN36@buck_knot_@2:

; 1564 :   REAL denom,coeff;
; 1565 :   int i,j;
; 1566 :   REAL dL1[MAXCOORD], dL2[MAXCOORD], dd1[MAXCOORD], dd2[MAXCOORD], 
; 1567 :          dd3[MAXCOORD], dd4[MAXCOORD];
; 1568 : 
; 1569 :   for ( i = 0 ; i < 2 ; i++ )

	add	ecx, 4
	cmp	ecx, 8
	jl	SHORT $LN37@buck_knot_@2

; 1571 :   power = globals(exponent_param)->value.real;

	mov	eax, DWORD PTR _exponent_param
	fstp	ST(0)
	mov	ecx, DWORD PTR _dymem
	mov	edx, eax
	and	edx, -16777216				; ff000000H
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN40@buck_knot_@2
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN42@buck_knot_@2
	mov	edx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [edx]
	jmp	SHORT $LN41@buck_knot_@2
$LN42@buck_knot_@2:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN40@buck_knot_@2
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN41@buck_knot_@2
$LN40@buck_knot_@2:
	mov	edx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ecx]
$LN41@buck_knot_@2:

; 1572 :   x1 = get_coord(get_edge_tailv(e1));

	mov	edx, DWORD PTR _web+124
	fld	QWORD PTR [eax+64]
	mov	edi, ebx
	fstp	QWORD PTR _power$[ebp]
	and	ebx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR _web+216
	mov	edx, DWORD PTR [edx+ecx+304]
	shr	edi, 27					; 0000001bH
	add	edx, eax
	and	edi, 1
	je	SHORT $LN47@buck_knot_@2
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN46@buck_knot_@2
$LN47@buck_knot_@2:
	mov	eax, DWORD PTR [edx]
$LN46@buck_knot_@2:
	mov	esi, DWORD PTR _web+104
	mov	ecx, DWORD PTR [esi+ecx+64]
	mov	ebx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ebx+eax*4]
	add	esi, ecx
	mov	DWORD PTR _x1$[ebp], esi

; 1573 :   x2 = get_coord(get_edge_headv(e1));

	test	edi, edi
	je	SHORT $LN51@buck_knot_@2
	mov	eax, DWORD PTR [edx]
	jmp	SHORT $LN50@buck_knot_@2
$LN51@buck_knot_@2:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]
$LN50@buck_knot_@2:
	and	eax, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ebx+eax*4]
	add	edi, ecx

; 1574 :   for ( j = 0 ; j < SDIM ; j++ ) dL1[j] = x2[j] - x1[j];

	xor	edx, edx
	cmp	DWORD PTR _web+616, 4
	mov	DWORD PTR _x2$[ebp], edi
	jl	$LN109@buck_knot_@2
	mov	ebx, edi
	sub	ebx, esi
	mov	DWORD PTR tv1743[ebp], ebx
	lea	ebx, DWORD PTR _dL1$[ebp]
	sub	ebx, esi
	mov	DWORD PTR tv1760[ebp], ebx
	lea	ebx, DWORD PTR _dL1$[ebp+8]
	sub	ebx, esi
	mov	DWORD PTR tv1764[ebp], ebx
	lea	ebx, DWORD PTR _dL1$[ebp+16]
	sub	ebx, esi
	lea	ecx, DWORD PTR [edi+24]
	lea	eax, DWORD PTR [esi+8]
	mov	DWORD PTR tv1768[ebp], ebx
	npad	10
$LL84@buck_knot_@2:
	fld	QWORD PTR [ecx-24]
	mov	ebx, DWORD PTR tv1743[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _dL1$[ebp+edx*8-32]
	fld	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv1760[ebp]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv1764[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR tv1768[ebp]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [ebx+eax-32]
	mov	ebx, DWORD PTR _web+616
	add	ebx, -3					; fffffffdH
	cmp	edx, ebx
	jl	SHORT $LL84@buck_knot_@2
$LN109@buck_knot_@2:
	cmp	edx, DWORD PTR _web+616
	jge	SHORT $LN82@buck_knot_@2
	mov	ecx, DWORD PTR _web+616
	lea	ebx, DWORD PTR _dL1$[ebp]
	sub	edi, esi
	sub	ebx, esi
	lea	eax, DWORD PTR [esi+edx*8]
	sub	ecx, edx
$LC31@buck_knot_@2:
	fld	QWORD PTR [eax+edi]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax+ebx-8]
	jne	SHORT $LC31@buck_knot_@2
$LN82@buck_knot_@2:

; 1575 :   L1 = sqrt(SDIM_dot(dL1,dL1));

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _dL1$[ebp]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR _L1$[ebp]

; 1576 :   FOR_ALL_EDGES(e2)

	mov	ecx, DWORD PTR _web+160
	test	ecx, 268435456				; 10000000H
	je	$LN100@buck_knot_@2
	npad	12
$LL105@buck_knot_@2:
	mov	edx, DWORD PTR _web+124
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR tv1243[ebp], eax
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	xor	esi, esi
	or	eax, esi
	je	$LN27@buck_knot_@2

; 1577 :     { 
; 1578 :       yy1 = get_coord(get_edge_tailv(e2));

	mov	esi, DWORD PTR _dymem
	mov	eax, DWORD PTR _web+216
	mov	edi, DWORD PTR [eax+esi+304]
	shr	ecx, 27					; 0000001bH
	add	edi, edx
	and	ecx, 1
	je	SHORT $LN55@buck_knot_@2
	mov	edx, DWORD PTR _web+636
	mov	eax, DWORD PTR [edi+edx*4]
	jmp	SHORT $LN54@buck_knot_@2
$LN55@buck_knot_@2:
	mov	eax, DWORD PTR [edi]
$LN54@buck_knot_@2:
	mov	edx, DWORD PTR _web+104
	mov	edx, DWORD PTR [edx+esi+64]
	mov	ebx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ebx+eax*4]
	add	esi, edx

; 1579 :       y2 = get_coord(get_edge_headv(e2));

	test	ecx, ecx
	je	SHORT $LN59@buck_knot_@2
	mov	eax, DWORD PTR [edi]
	jmp	SHORT $LN58@buck_knot_@2
$LN59@buck_knot_@2:
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edi+eax*4]
$LN58@buck_knot_@2:
	and	eax, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ebx+eax*4]
	add	edi, edx

; 1580 :       for ( j = 0 ; j < SDIM ; j++ ) dL2[j] = y2[j] - yy1[j];

	xor	edx, edx
	cmp	DWORD PTR _web+616, 4
	mov	DWORD PTR _y2$[ebp], edi
	jl	$LN104@buck_knot_@2
	lea	ecx, DWORD PTR [edi+24]
	sub	edi, esi
	mov	DWORD PTR tv2050[ebp], edi
	mov	edi, esi
	neg	edi
	lea	ebx, DWORD PTR _dL2$[ebp+edi]
	mov	DWORD PTR tv4818[ebp], ebx
	lea	ebx, DWORD PTR _dL2$[ebp+edi+8]
	lea	edi, DWORD PTR _dL2$[ebp+edi+16]
	lea	eax, DWORD PTR [esi+8]
	mov	DWORD PTR tv4822[ebp], edi
	npad	1
$LL87@buck_knot_@2:
	fld	QWORD PTR [ecx-24]
	mov	edi, DWORD PTR tv2050[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _dL2$[ebp+edx*8-32]
	fld	QWORD PTR [eax+edi-32]
	mov	edi, DWORD PTR tv4818[ebp]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [eax+edi-32]
	mov	edi, DWORD PTR tv4822[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [eax+ebx-32]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [eax+edi-32]
	mov	edi, DWORD PTR _web+616
	add	edi, -3					; fffffffdH
	cmp	edx, edi
	jl	SHORT $LL87@buck_knot_@2
	mov	edi, DWORD PTR _y2$[ebp]
$LN104@buck_knot_@2:
	cmp	edx, DWORD PTR _web+616
	jge	SHORT $LN85@buck_knot_@2
	lea	ecx, DWORD PTR _dL2$[ebp]
	sub	ecx, esi
	mov	DWORD PTR tv4818[ebp], ecx
	mov	ecx, DWORD PTR _web+616
	mov	ebx, edi
	sub	ebx, esi
	lea	eax, DWORD PTR [esi+edx*8]
	sub	ecx, edx
	mov	edx, DWORD PTR tv4818[ebp]
$LC23@buck_knot_@2:
	fld	QWORD PTR [eax+ebx]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [edx+eax-8]
	jne	SHORT $LC23@buck_knot_@2
$LN85@buck_knot_@2:

; 1581 :       L2 = sqrt(SDIM_dot(dL2,dL2));

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _dL2$[ebp]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR _L2$[ebp]

; 1582 :       for ( j = 0 ; j < SDIM ; j++ ) dd1[j] = x1[j] - yy1[j];

	xor	edx, edx
	cmp	DWORD PTR _web+616, 4
	jl	$LC89@buck_knot_@2
	mov	ebx, DWORD PTR _x1$[ebp]
	mov	edi, esi
	neg	edi
	lea	ecx, DWORD PTR [ebx+24]
	add	ebx, edi
	mov	DWORD PTR tv4824[ebp], ebx
	lea	ebx, DWORD PTR _dd1$[ebp+edi]
	mov	DWORD PTR tv4826[ebp], ebx
	lea	ebx, DWORD PTR _dd1$[ebp+edi+8]
	lea	edi, DWORD PTR _dd1$[ebp+edi+16]
	lea	eax, DWORD PTR [esi+8]
	mov	DWORD PTR tv4830[ebp], edi
$LL90@buck_knot_@2:
	fld	QWORD PTR [ecx-24]
	mov	edi, DWORD PTR tv4824[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _dd1$[ebp+edx*8-32]
	fld	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv4826[ebp]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR tv4830[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [ebx+eax-32]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [edi+eax-32]
	mov	edi, DWORD PTR _web+616
	add	edi, -3					; fffffffdH
	cmp	edx, edi
	jl	SHORT $LL90@buck_knot_@2
	mov	edi, DWORD PTR _y2$[ebp]
$LC89@buck_knot_@2:
	cmp	edx, DWORD PTR _web+616
	jge	SHORT $LN88@buck_knot_@2
	mov	ebx, DWORD PTR _x1$[ebp]
	mov	ecx, esi
	neg	ecx
	add	ebx, ecx
	lea	ecx, DWORD PTR _dd1$[ebp+ecx]
	mov	DWORD PTR tv4826[ebp], ecx
	mov	ecx, DWORD PTR _web+616
	lea	eax, DWORD PTR [esi+edx*8]
	sub	ecx, edx
	npad	9
$LC20@buck_knot_@2:
	fld	QWORD PTR [ebx+eax]
	mov	edx, DWORD PTR tv4826[ebp]
	fsub	QWORD PTR [eax]
	add	eax, 8
	dec	ecx
	fstp	QWORD PTR [edx+eax-8]
	jne	SHORT $LC20@buck_knot_@2
$LN88@buck_knot_@2:

; 1583 :       d1 = sqrt(SDIM_dot(dd1,dd1));

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _dd1$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fst	QWORD PTR _d1$[ebp]

; 1584 :       if ( d1 <= 0.0 ) continue; /* prevent division by 0 */

	fldz
	fcompp
	fnstsw	ax
	test	ah, 1
	je	$LN27@buck_knot_@2

; 1585 :       for ( j = 0 ; j < SDIM ; j++ ) dd2[j] = yy1[j] - x2[j];

	xor	edx, edx
	cmp	DWORD PTR _web+616, 4
	jl	$LC92@buck_knot_@2
	mov	edi, DWORD PTR _x2$[ebp]
	mov	ebx, esi
	sub	ebx, edi
	mov	DWORD PTR tv3077[ebp], ebx
	lea	ebx, DWORD PTR _dd2$[ebp]
	sub	ebx, edi
	mov	DWORD PTR tv3094[ebp], ebx
	lea	ebx, DWORD PTR _dd2$[ebp+8]
	sub	ebx, edi
	mov	DWORD PTR tv3098[ebp], ebx
	lea	ebx, DWORD PTR _dd2$[ebp+16]
	lea	ecx, DWORD PTR [esi+24]
	lea	eax, DWORD PTR [edi+8]
	sub	ebx, edi
$LL93@buck_knot_@2:
	fld	QWORD PTR [ecx-24]
	mov	edi, DWORD PTR tv3077[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _dd2$[ebp+edx*8-32]
	fld	QWORD PTR [eax+edi-32]
	mov	edi, DWORD PTR tv3094[ebp]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [eax+edi-32]
	mov	edi, DWORD PTR tv3098[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [eax+edi-32]
	mov	edi, DWORD PTR _web+616
	fld	QWORD PTR [ecx-32]
	add	edi, -3					; fffffffdH
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [eax+ebx-32]
	cmp	edx, edi
	jl	SHORT $LL93@buck_knot_@2
	mov	edi, DWORD PTR _y2$[ebp]
$LC92@buck_knot_@2:
	cmp	edx, DWORD PTR _web+616
	jge	SHORT $LN108@buck_knot_@2
	mov	ecx, DWORD PTR _x2$[ebp]
	lea	ebx, DWORD PTR _dd2$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	sub	esi, ecx
	sub	ebx, ecx
	mov	ecx, DWORD PTR _web+616
	sub	ecx, edx
	npad	3
$LC16@buck_knot_@2:
	fld	QWORD PTR [eax+esi]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax+ebx-8]
	jne	SHORT $LC16@buck_knot_@2
$LN108@buck_knot_@2:

; 1586 :       d2 = sqrt(SDIM_dot(dd2,dd2));

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _dd2$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fst	QWORD PTR _d2$[ebp]

; 1587 :       if ( d2 <= 0.0 ) continue; /* for identical vertices */

	fldz
	fcompp
	fnstsw	ax
	test	ah, 1
	je	$LN27@buck_knot_@2

; 1588 :       for ( j = 0 ; j < SDIM ; j++ ) dd3[j] = x2[j] - y2[j];

	xor	edx, edx
	cmp	DWORD PTR _web+616, 4
	jl	$LN106@buck_knot_@2
	mov	ebx, DWORD PTR _x2$[ebp]
	mov	esi, edi
	neg	esi
	lea	ecx, DWORD PTR [ebx+24]
	add	ebx, esi
	mov	DWORD PTR tv4833[ebp], ebx
	lea	ebx, DWORD PTR _dd3$[ebp+esi]
	mov	DWORD PTR tv4835[ebp], ebx
	lea	ebx, DWORD PTR _dd3$[ebp+esi+8]
	lea	esi, DWORD PTR _dd3$[ebp+esi+16]
	lea	eax, DWORD PTR [edi+8]
	mov	DWORD PTR tv4839[ebp], esi
$LL96@buck_knot_@2:
	fld	QWORD PTR [ecx-24]
	mov	esi, DWORD PTR tv4833[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _dd3$[ebp+edx*8-32]
	fld	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv4835[ebp]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv4839[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [ebx+eax-32]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR _web+616
	add	esi, -3					; fffffffdH
	cmp	edx, esi
	jl	SHORT $LL96@buck_knot_@2
$LN106@buck_knot_@2:
	cmp	edx, DWORD PTR _web+616
	jge	SHORT $LN94@buck_knot_@2
	mov	esi, DWORD PTR _x2$[ebp]
	mov	ecx, edi
	neg	ecx
	add	esi, ecx
	lea	ebx, DWORD PTR _dd3$[ebp+ecx]
	mov	ecx, DWORD PTR _web+616
	lea	eax, DWORD PTR [edi+edx*8]
	sub	ecx, edx
$LC12@buck_knot_@2:
	fld	QWORD PTR [eax+esi]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax+ebx-8]
	jne	SHORT $LC12@buck_knot_@2
$LN94@buck_knot_@2:

; 1589 :       d3 = sqrt(SDIM_dot(dd3,dd3));

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _dd3$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fst	QWORD PTR _d3$[ebp]

; 1590 :       if ( d3 <= 0.0 ) continue; /* since contribution  */

	fldz
	fcompp
	fnstsw	ax
	test	ah, 1
	je	$LN27@buck_knot_@2

; 1591 :       for ( j = 0 ; j < SDIM ; j++ ) dd4[j] = y2[j] - x1[j];

	xor	edx, edx
	cmp	DWORD PTR _web+616, 4
	jl	$LN107@buck_knot_@2
	mov	esi, DWORD PTR _x1$[ebp]
	mov	ebx, edi
	sub	ebx, esi
	mov	DWORD PTR tv4296[ebp], ebx
	lea	ebx, DWORD PTR _dd4$[ebp]
	sub	ebx, esi
	mov	DWORD PTR tv4313[ebp], ebx
	lea	ebx, DWORD PTR _dd4$[ebp+8]
	sub	ebx, esi
	mov	DWORD PTR tv4317[ebp], ebx
	lea	ebx, DWORD PTR _dd4$[ebp+16]
	lea	ecx, DWORD PTR [edi+24]
	lea	eax, DWORD PTR [esi+8]
	sub	ebx, esi
$LL99@buck_knot_@2:
	fld	QWORD PTR [ecx-24]
	mov	esi, DWORD PTR tv4296[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _dd4$[ebp+edx*8-32]
	fld	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv4313[ebp]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv4317[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR _web+616
	fld	QWORD PTR [ecx-32]
	add	esi, -3					; fffffffdH
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [ebx+eax-32]
	cmp	edx, esi
	jl	SHORT $LL99@buck_knot_@2
$LN107@buck_knot_@2:
	mov	ebx, DWORD PTR _web+616
	cmp	edx, ebx
	jge	SHORT $LN97@buck_knot_@2
	mov	ecx, DWORD PTR _x1$[ebp]
	lea	esi, DWORD PTR _dd4$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	sub	edi, ecx
	sub	esi, ecx
	mov	ecx, ebx
	sub	ecx, edx
$LC8@buck_knot_@2:
	fld	QWORD PTR [eax+edi]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [eax+esi-8]
	jne	SHORT $LC8@buck_knot_@2
$LN97@buck_knot_@2:

; 1592 :       d4 = sqrt(SDIM_dot(dd4,dd4));

	lea	eax, DWORD PTR _dd4$[ebp]
	push	ebx
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fst	QWORD PTR _d4$[ebp]

; 1593 :       if ( d4 <= 0.0 ) continue; /* fixed at 0.  Burma Shave */

	fldz
	fcom	ST(1)
	fnstsw	ax
	test	ah, 1
	je	$LN116@buck_knot_@2

; 1594 :       denom = d1+d2+d3+d4-2*(L1+L2);

	fld	QWORD PTR _d2$[ebp]
	fadd	QWORD PTR _d1$[ebp]
	fadd	QWORD PTR _d3$[ebp]
	faddp	ST(2), ST(0)
	fld	QWORD PTR _L2$[ebp]
	fadd	QWORD PTR _L1$[ebp]
	fadd	ST(0), ST(0)
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _denom$[ebp]

; 1595 :       if ( denom <= 0.0 )

	fcom	ST(1)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 65					; 00000041H
	jp	SHORT $LN4@buck_knot_@2

; 1596 :          kb_error(1544,"Buck denominator nonpositive.\n",RECOVERABLE);

	push	1
	fstp	ST(0)
	push	OFFSET ??_C@_0BP@GEMJCNAE@Buck?5denominator?5nonpositive?4?6?$AA@
	push	1544					; 00000608H
	call	_kb_error
	fld	QWORD PTR _denom$[ebp]
	add	esp, 12					; 0000000cH
$LN4@buck_knot_@2:

; 1597 : 
; 1598 :       energy += pow(denom ,-power);

	fld	QWORD PTR _power$[ebp]
	fchs
	fst	QWORD PTR tv1379[ebp]
	call	__CIpow
	fadd	QWORD PTR _energy$[ebp]
	fstp	QWORD PTR _energy$[ebp]

; 1599 :       coeff = -2*power*pow(denom,-power-1);

	fld	QWORD PTR tv1379[ebp]
	fsub	QWORD PTR __real@3ff0000000000000
	fld	QWORD PTR _denom$[ebp]
	fxch	ST(1)
	call	__CIpow
	fld	QWORD PTR _power$[ebp]
	fmul	QWORD PTR __real@c000000000000000

; 1600 :       for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	fmulp	ST(1), ST(0)
	cmp	DWORD PTR _web+616, eax
	jle	$LN122@buck_knot_@2
	fld	QWORD PTR _d2$[ebp]
	mov	edx, DWORD PTR _v_info$GSCopy$[ebp]
	fld	QWORD PTR _L1$[ebp]
	fld	QWORD PTR _d3$[ebp]
	fld	QWORD PTR _d4$[ebp]
	fld	QWORD PTR __real@4000000000000000
$LN103@buck_knot_@2:

; 1601 :          { v_info->grad[0][j] += coeff*(dd1[j]/d1 - dd4[j]/d4 + 2*dL1[j]/L1);

	fld	QWORD PTR _dd1$[ebp+eax*8]
	mov	ecx, DWORD PTR [edx+1336]
	fdiv	QWORD PTR _d1$[ebp]
	mov	ecx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx+eax*8]
	fld	QWORD PTR _dd4$[ebp+eax*8]
	fdiv	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _dL1$[ebp+eax*8]
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(6)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+1336]

; 1602 :             v_info->grad[1][j] += coeff*(dd3[j]/d3 - dd2[j]/d2 - 2*dL1[j]/L1);

	fld	QWORD PTR _dd3$[ebp+eax*8]
	mov	ecx, DWORD PTR [ecx+4]
	fdiv	ST(0), ST(3)
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fld	QWORD PTR _dd2$[ebp+eax*8-8]
	fdiv	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _dL1$[ebp+eax*8-8]
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(5)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(6)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN103@buck_knot_@2

; 1600 :       for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(5)
	fstp	ST(4)
	fstp	ST(1)
	fstp	ST(2)
$LN116@buck_knot_@2:
	fstp	ST(1)
$LN122@buck_knot_@2:
	fstp	ST(0)
$LN27@buck_knot_@2:

; 1576 :   FOR_ALL_EDGES(e2)

	mov	edx, DWORD PTR tv1243[ebp]
	mov	eax, DWORD PTR _web+124
	mov	ecx, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [ecx]
	test	ecx, 268435456				; 10000000H
	jne	$LL105@buck_knot_@2
$LN100@buck_knot_@2:

; 1603 :          }
; 1604 :     }
; 1605 :   return energy;
; 1606 : } // end buck_knot_energy_gradient()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _energy$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_buck_knot_energy_gradient ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DP@DCFGAKMP@The?5type?5of?5vertex?5attribute?5bi_@ ; `string'
PUBLIC	_mi$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_bi_surface_init
EXTRN	_eval:PROC
;	COMDAT ??_C@_0DP@DCFGAKMP@The?5type?5of?5vertex?5attribute?5bi_@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0DP@DCFGAKMP@The?5type?5of?5vertex?5attribute?5bi_@ DB 'The type of'
	DB	' vertex attribute bi_surface_attr must be integer.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\knot1.c
CONST	ENDS
;	COMDAT _bi_surface_init
_TEXT	SEGMENT
_ti$90741 = -96						; size = 8
_tj$ = -88						; size = 8
tv365 = -80						; size = 4
_mi$GSCopy$ = -76					; size = 4
_x$ = -72						; size = 4
_vattr$90739 = -68					; size = 4
_ordvv$90763 = -64					; size = 4
_ordv$90736 = -60					; size = 4
_v_id$ = -56						; size = 4
_d$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_bi_surface_init PROC					; COMDAT

; 1638 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1639 :   REAL *x;
; 1640 :   vertex_id v_id,vv_id; 
; 1641 :   int i;
; 1642 :   REAL d[MAXCOORD]; /* difference vector between vertices */
; 1643 :   REAL tj;  
; 1644 : 
; 1645 :   bi_surface_attr = find_attribute(VERTEX,bi_surface_attr_name);

	mov	ecx, DWORD PTR _bi_surface_attr_name
	mov	eax, DWORD PTR _mi$[ebp]
	push	ecx
	push	0

; 1666 :     FOR_ALL_VERTICES(vv_id)

	mov	DWORD PTR _mi$GSCopy$[ebp], eax
	call	_find_attribute
	add	esp, 8
	mov	DWORD PTR _bi_surface_attr, eax
	test	eax, eax
	js	SHORT $LN37@bi_surface

; 1646 :   if ( bi_surface_attr >= 0 )
; 1647 :   { /* check proper type */
; 1648 : 	  if ( EXTRAS(VERTEX)[bi_surface_attr].type != INTEGER_TYPE )

	mov	edx, DWORD PTR _dymem
	imul	eax, 240				; 000000f0H
	add	eax, DWORD PTR _web+104
	cmp	DWORD PTR [eax+edx+68], 2
	je	SHORT $LN37@bi_surface

; 1649 :       kb_error(4927,
; 1650 :        "The type of vertex attribute bi_surface_attr must be integer.\n",
; 1651 :          RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DP@DCFGAKMP@The?5type?5of?5vertex?5attribute?5bi_@
	push	4927					; 0000133fH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN37@bi_surface:

; 1652 :   }
; 1653 : 
; 1654 :   /* basic sums */
; 1655 :   if ( bi_sums ) myfree((char*)bi_sums);

	mov	eax, DWORD PTR _bi_sums
	test	eax, eax
	je	SHORT $LN18@bi_surface
	push	eax
	call	_myfree
	add	esp, 4
$LN18@bi_surface:

; 1656 :   bi_sums = (REAL *)mycalloc(web.skel[VERTEX].max_ord+1,sizeof(REAL));

	mov	eax, DWORD PTR _web+68
	push	edi
	push	1656					; 00000678H
	push	OFFSET ??_C@_07GIJDMJFD@KNOT1?4C?$AA@
	inc	eax
	push	8
	push	eax
	call	_kb_calloc

; 1657 : 
; 1658 :   FOR_ALL_VERTICES(v_id)

	mov	edi, DWORD PTR _web+48
	mov	ecx, edi
	shr	ecx, 28					; 0000001cH
	add	esp, 16					; 00000010H
	and	ecx, 1
	mov	DWORD PTR _bi_sums, eax
	mov	DWORD PTR _v_id$[ebp], edi
	je	$LN15@bi_surface
	push	ebx
	push	esi
	jmp	SHORT $LN17@bi_surface
	npad	5
$LL38@bi_surface:
	mov	edi, DWORD PTR _v_id$[ebp]
$LN17@bi_surface:
	mov	edx, DWORD PTR _web+12
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+esi*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	mov	DWORD PTR tv365[ebp], esi
	je	$LN16@bi_surface

; 1659 :   { int ordv = ordinal(v_id);

	mov	DWORD PTR _ordv$90736[ebp], esi
	test	ecx, ecx
	jne	SHORT $LN24@bi_surface
	mov	DWORD PTR _ordv$90736[ebp], -1
$LN24@bi_surface:

; 1660 :     int vattr=0;
; 1661 :     REAL val;
; 1662 :     REAL ti = get_vertex_area_star(v_id);

	push	edi
	mov	DWORD PTR _vattr$90739[ebp], edx
	call	_get_vertex_area_star
	fstp	QWORD PTR _ti$90741[ebp]

; 1663 :     x = get_coord(v_id);

	mov	eax, DWORD PTR _web+12
	mov	ecx, DWORD PTR _web+104
	mov	eax, DWORD PTR [eax+esi*4]
	mov	edx, DWORD PTR _dymem
	add	eax, DWORD PTR [ecx+edx+64]

; 1664 :     if ( bi_surface_attr >= 0) 

	mov	ecx, DWORD PTR _bi_surface_attr
	add	esp, 4
	mov	DWORD PTR _x$[ebp], eax
	test	ecx, ecx
	js	SHORT $LN12@bi_surface

; 1665 :       vattr = *(int*)get_extra(v_id,bi_surface_attr);

	mov	eax, edi
	imul	ecx, 240				; 000000f0H
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	edi, DWORD PTR _web[eax+104]
	mov	eax, DWORD PTR _web[eax+12]
	add	edi, ecx
	mov	ecx, DWORD PTR [edi+edx+64]
	mov	edx, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _vattr$90739[ebp], eax
$LN12@bi_surface:

; 1666 :     FOR_ALL_VERTICES(vv_id)

	mov	edx, DWORD PTR _web+48
	mov	ecx, edx
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	je	$LN16@bi_surface
	npad	10
$LL39@bi_surface:
	mov	eax, DWORD PTR _web+12
	mov	ebx, edx
	and	ebx, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR [edi+8]
	and	eax, 1
	xor	esi, esi
	or	eax, esi
	je	$LN10@bi_surface

; 1667 :     { 
; 1668 :       int vvattr;
; 1669 :       REAL *y = get_coord(vv_id);

	mov	eax, DWORD PTR _web+104
	mov	esi, DWORD PTR _dymem
	mov	esi, DWORD PTR [eax+esi+64]
	add	esi, edi

; 1670 :       int ordvv = ordinal(vv_id);

	mov	DWORD PTR _ordvv$90763[ebp], ebx
	test	ecx, ecx
	jne	SHORT $LN26@bi_surface
	mov	DWORD PTR _ordvv$90763[ebp], -1
$LN26@bi_surface:

; 1671 :       if ( ordvv <= ordv ) continue;

	mov	ecx, DWORD PTR _ordvv$90763[ebp]
	cmp	ecx, DWORD PTR _ordv$90736[ebp]
	jle	$LN10@bi_surface

; 1672 :       if ( bi_surface_attr >= 0) 

	mov	ecx, DWORD PTR _bi_surface_attr
	test	ecx, ecx
	js	SHORT $LN4@bi_surface

; 1673 :       { vvattr = *(int*)get_extra(vv_id,bi_surface_attr);

	mov	eax, edx
	imul	ecx, 240				; 000000f0H
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	edi, DWORD PTR _web[eax+104]

; 1674 :         if ( vvattr == vattr ) continue; /* only do for different values */

	mov	eax, DWORD PTR _web[eax+12]
	mov	eax, DWORD PTR [eax+ebx*4]
	add	edi, ecx
	mov	ecx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [edi+ecx+64]
	mov	edi, DWORD PTR _vattr$90739[ebp]
	cmp	DWORD PTR [ecx+eax], edi
	je	SHORT $LN10@bi_surface
$LN4@bi_surface:

; 1675 :       }
; 1676 :       tj = get_vertex_area_star(vv_id);

	push	edx
	call	_get_vertex_area_star
	fstp	QWORD PTR _tj$[ebp]

; 1677 :       for ( i = 0 ; i < SDIM ; i++ ) d[i] = x[i] - y[i];

	mov	edi, DWORD PTR _web+616
	add	esp, 4
	test	edi, edi
	jle	SHORT $LN1@bi_surface
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, esi
	neg	esi
	add	edx, esi
	lea	esi, DWORD PTR _d$[ebp+esi]
	mov	ecx, edi
	npad	5
$LL3@bi_surface:
	fld	QWORD PTR [edx+eax]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [esi+eax-8]
	jne	SHORT $LL3@bi_surface
$LN1@bi_surface:

; 1678 :       val = eval(mi->expr[0],d,v_id,NULL); 

	mov	eax, DWORD PTR _v_id$[ebp]
	mov	edx, DWORD PTR _mi$GSCopy$[ebp]
	push	0
	push	eax
	mov	eax, DWORD PTR [edx+232]
	lea	ecx, DWORD PTR _d$[ebp]
	push	ecx
	push	eax
	call	_eval

; 1679 :       bi_sums[ordv] += tj*val;

	fld	QWORD PTR _tj$[ebp]
	mov	eax, DWORD PTR _bi_sums
	fmul	ST(0), ST(1)
	mov	ecx, DWORD PTR _ordv$90736[ebp]
	add	esp, 16					; 00000010H
	fadd	QWORD PTR [eax+ecx*8]
	fstp	QWORD PTR [eax+ecx*8]

; 1680 :       bi_sums[ordvv] += ti*val;

	mov	eax, DWORD PTR _bi_sums
	mov	ecx, DWORD PTR _ordvv$90763[ebp]
	fmul	QWORD PTR _ti$90741[ebp]
	fadd	QWORD PTR [eax+ecx*8]
	fstp	QWORD PTR [eax+ecx*8]
$LN10@bi_surface:

; 1666 :     FOR_ALL_VERTICES(vv_id)

	mov	ecx, DWORD PTR _web+12
	mov	edx, DWORD PTR [ecx+ebx*4]
	mov	edx, DWORD PTR [edx]
	mov	ecx, edx
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	jne	$LL39@bi_surface
	mov	esi, DWORD PTR tv365[ebp]
$LN16@bi_surface:

; 1657 : 
; 1658 :   FOR_ALL_VERTICES(v_id)

	mov	eax, DWORD PTR _web+12
	mov	ecx, DWORD PTR [eax+esi*4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR _v_id$[ebp], ecx
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	jne	$LL38@bi_surface
	pop	esi
	pop	ebx
$LN15@bi_surface:

; 1681 :     }
; 1682 :   }
; 1683 :  
; 1684 : } // end bi_surface_init()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	pop	edi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_bi_surface_init ENDP
_TEXT	ENDS
PUBLIC	_bi_surface_energy
; Function compile flags: /Ogtp
;	COMDAT _bi_surface_energy
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_bi_surface_energy PROC					; COMDAT

; 1698 : { REAL ti,energy;

	push	ebp
	mov	ebp, esp
	push	esi

; 1699 : 
; 1700 :   ti = get_vertex_area_star(v_info->id);

	mov	esi, DWORD PTR _v_info$[ebp]
	mov	eax, DWORD PTR [esi]
	push	eax
	call	_get_vertex_area_star

; 1701 :   energy = ti*bi_sums[ordinal(v_info->id)];

	mov	eax, DWORD PTR [esi]
	add	esp, 4
	pop	esi
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@bi_surface@2
	mov	ecx, DWORD PTR _bi_sums
	and	eax, 134217727				; 07ffffffH
	fmul	QWORD PTR [ecx+eax*8]

; 1702 :   return energy; /* because pair counts in both orders */
; 1703 : } // end bi_surface_energy()

	pop	ebp
	ret	0
$LN3@bi_surface@2:

; 1701 :   energy = ti*bi_sums[ordinal(v_info->id)];

	mov	ecx, DWORD PTR _bi_sums
	or	eax, -1
	fmul	QWORD PTR [ecx+eax*8]

; 1702 :   return energy; /* because pair counts in both orders */
; 1703 : } // end bi_surface_energy()

	pop	ebp
	ret	0
_bi_surface_energy ENDP
_TEXT	ENDS
PUBLIC	_v_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_bi_surface_gradient
EXTRN	_eval_all:PROC
; Function compile flags: /Ogtp
;	COMDAT _bi_surface_gradient
_TEXT	SEGMENT
_s11$ = -296						; size = 8
_s22$ = -288						; size = 8
_val$90832 = -288					; size = 8
_ti$ = -280						; size = 8
_s12$ = -272						; size = 8
_x$ = -268						; size = 4
_sumi$ = -264						; size = 8
_tj$ = -264						; size = 8
_start_fe$ = -256					; size = 4
_mi$ = -256						; size = 4
_next_fe$ = -252					; size = 4
_vattr$ = -252						; size = 4
_v_info$GSCopy$ = -248					; size = 4
_partials$90833 = -244					; size = 48
_d$ = -196						; size = 48
_side2$ = -148						; size = 48
_side1$ = -100						; size = 48
_da$ = -52						; size = 48
_sum$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_v_info$ = 8						; size = 4
_bi_surface_gradient PROC				; COMDAT

; 1719 : { REAL *x = get_coord(v_info->id);

	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	edx, DWORD PTR _web+12
	push	ebx
	push	esi
	mov	esi, DWORD PTR _dymem
	push	edi
	mov	edi, DWORD PTR _v_info$[ebp]
	mov	ecx, DWORD PTR [edi]
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+104
	add	eax, DWORD PTR [edx+esi+64]
	mov	DWORD PTR _v_info$GSCopy$[ebp], edi
	mov	DWORD PTR _x$[ebp], eax

; 1720 :   vertex_id v_id;
; 1721 :   int i;
; 1722 :   REAL d[MAXCOORD]; /* difference vector between vertices */
; 1723 :   REAL ti,tj;  /* length weights of vertices, ti for home vertex */
; 1724 :   facetedge_id fe,start_fe,next_fe;
; 1725 :   REAL sumi,sumj,sumjj,area;
; 1726 :   REAL s11,s12,s22,side1[MAXCOORD],side2[MAXCOORD];
; 1727 :   REAL da[MAXCOORD],sum[MAXCOORD];
; 1728 :   int vattr = 0;
; 1729 :   struct method_instance *mi = METH_INSTANCE(v_info->method);

	mov	eax, DWORD PTR [edi+8]
	cdq
	xor	eax, edx
	sub	eax, edx

; 1730 : 
; 1731 :   if ( bi_surface_attr >= 0)

	mov	edx, DWORD PTR _bi_surface_attr
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list
	mov	DWORD PTR _vattr$[ebp], 0
	mov	DWORD PTR _mi$[ebp], eax
	test	edx, edx
	js	SHORT $LN35@bi_surface@3

; 1732 :     vattr = *(int*)get_extra(v_info->id,bi_surface_attr);

	mov	eax, ecx
	imul	edx, 240				; 000000f0H
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	ebx, DWORD PTR _web[eax+104]
	mov	eax, DWORD PTR _web[eax+12]
	add	ebx, edx
	mov	esi, DWORD PTR [ebx+esi+64]
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [esi+edx]
	mov	DWORD PTR _vattr$[ebp], eax
$LN35@bi_surface@3:

; 1733 : 
; 1734 :   ti = get_vertex_area_star(v_info->id);

	push	ecx
	call	_get_vertex_area_star
	fstp	QWORD PTR _ti$[ebp]

; 1735 :   for ( i = 0 ; i < SDIM ; i++ ) 

	mov	ebx, DWORD PTR _web+616
	add	esp, 4
	xor	eax, eax
	test	ebx, ebx
	jle	SHORT $LN31@bi_surface@3
	fldz
$LN34@bi_surface@3:

; 1736 :     v_info->grad[0][i] = 0.0; /* intialize gradient */

	mov	ecx, DWORD PTR [edi+1336]
	mov	edx, DWORD PTR [ecx]
	fst	QWORD PTR [edx+eax*8]
	mov	ebx, DWORD PTR _web+616
	inc	eax
	cmp	eax, ebx
	jl	SHORT $LN34@bi_surface@3

; 1737 : 
; 1738 :   /* distant change part */
; 1739 :   for ( i = 0 ; i < SDIM ; i++ ) sum[i] = 0.0;

	fstp	ST(0)
	test	ebx, ebx
	jle	SHORT $LN31@bi_surface@3
	mov	ecx, ebx
	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	xor	eax, eax
	lea	edi, DWORD PTR _sum$[ebp]
	rep stosd
$LN31@bi_surface@3:

; 1740 :   FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR _web+48
	test	ecx, 268435456				; 10000000H
	je	$LN110@bi_surface@3
	npad	11
$LL113@bi_surface@3:
	mov	eax, DWORD PTR _web+12
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN27@bi_surface@3

; 1741 :   { REAL *y = get_coord(v_id);

	mov	edx, DWORD PTR _web+104
	mov	eax, DWORD PTR _dymem
	mov	edi, DWORD PTR [edx+eax+64]
	mov	edx, DWORD PTR _web+12
	add	edi, DWORD PTR [esi+edx]

; 1742 :     REAL val;
; 1743 : 	REAL partials[MAXCOORD];
; 1744 : 
; 1745 :     if ( bi_surface_attr >= 0)

	mov	edx, DWORD PTR _bi_surface_attr
	test	edx, edx
	js	$LN23@bi_surface@3

; 1746 :     { int vvattr = *(int*)get_extra(v_id,bi_surface_attr);

	mov	eax, ecx
	imul	edx, 240				; 000000f0H
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	ebx, DWORD PTR _web[eax+104]

; 1747 :       if ( vvattr == vattr )

	mov	eax, DWORD PTR _web[eax+12]
	mov	eax, DWORD PTR [eax+esi]
	add	ebx, edx
	mov	edx, DWORD PTR _dymem
	mov	edx, DWORD PTR [ebx+edx+64]
	mov	ebx, DWORD PTR _vattr$[ebp]
	cmp	DWORD PTR [edx+eax], ebx
	jne	$LN20@bi_surface@3

; 1757 :     for ( i = 0 ; i < SDIM ; i++ ) 

	mov	ebx, DWORD PTR _web+616
$LN27@bi_surface@3:

; 1740 :   FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR _web+12
	mov	edx, DWORD PTR [esi+ecx]
	mov	ecx, DWORD PTR [edx]
	test	ecx, 268435456				; 10000000H
	jne	$LL113@bi_surface@3
$LN110@bi_surface@3:

; 1759 :   }
; 1760 :   for ( i = 0 ; i < SDIM ; i++ )

	mov	edx, DWORD PTR _v_info$GSCopy$[ebp]
	xor	eax, eax
	test	ebx, ebx
	jle	SHORT $LN11@bi_surface@3
	fld	QWORD PTR _ti$[ebp]
	fadd	ST(0), ST(0)
$LN13@bi_surface@3:

; 1761 :       v_info->grad[0][i] += 2*ti*sum[i];

	mov	ecx, DWORD PTR [edx+1336]
	fld	QWORD PTR _sum$[ebp+eax*8]
	mov	ecx, DWORD PTR [ecx]
	fmul	ST(0), ST(1)
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN13@bi_surface@3

; 1759 :   }
; 1760 :   for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)
$LN11@bi_surface@3:

; 1762 :  
; 1763 :   /* area change part */
; 1764 :   /* go around all neighbor vertices */
; 1765 :   start_fe = get_vertex_fe(v_info->id);

	mov	esi, DWORD PTR [edx]
	push	esi
	call	_get_vertex_fe
	add	esp, 4
	mov	DWORD PTR _start_fe$[ebp], eax

; 1766 :   sumi = bi_sums[ordinal(v_info->id)];

	test	esi, 268435456				; 10000000H
	je	$LN38@bi_surface@3
	and	esi, 134217727				; 07ffffffH
	jmp	$LN39@bi_surface@3
$LN23@bi_surface@3:

; 1748 :         continue;
; 1749 :     }
; 1750 :     else
; 1751 :       if ( equal_id(v_id,v_info->id) )

	mov	edx, DWORD PTR _v_info$GSCopy$[ebp]
	cmp	ecx, DWORD PTR [edx]
	je	SHORT $LN27@bi_surface@3
$LN20@bi_surface@3:

; 1752 :         continue; /* don't do self */
; 1753 : 
; 1754 :     tj = get_vertex_area_star(v_id);

	push	ecx
	call	_get_vertex_area_star
	fstp	QWORD PTR _tj$[ebp]

; 1755 :     for ( i = 0 ; i < SDIM ; i++ ) d[i] = x[i] - y[i];

	mov	edx, DWORD PTR _web+616
	add	esp, 4
	test	edx, edx
	jle	SHORT $LN17@bi_surface@3
	mov	ecx, edi
	mov	eax, edi
	mov	edi, DWORD PTR _x$[ebp]
	neg	ecx
	add	edi, ecx
	lea	ecx, DWORD PTR _d$[ebp+ecx]
	npad	1
$LL19@bi_surface@3:
	fld	QWORD PTR [edi+eax]
	add	eax, 8
	dec	edx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [ecx+eax-8]
	jne	SHORT $LL19@bi_surface@3
$LN17@bi_surface@3:

; 1756 :     eval_all(mi->expr[0],d,3,&val,partials,v_info->id);

	mov	eax, DWORD PTR _v_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR _partials$90833[ebp]
	push	edx
	mov	edx, DWORD PTR _mi$[ebp]
	lea	eax, DWORD PTR _val$90832[ebp]
	push	eax
	mov	eax, DWORD PTR [edx+232]
	push	3
	lea	ecx, DWORD PTR _d$[ebp]
	push	ecx
	push	eax
	call	_eval_all

; 1757 :     for ( i = 0 ; i < SDIM ; i++ ) 

	mov	ebx, DWORD PTR _web+616
	add	esp, 24					; 00000018H
	xor	eax, eax
	test	ebx, ebx
	jle	$LN27@bi_surface@3
	fld	QWORD PTR _tj$[ebp]
$LN16@bi_surface@3:

; 1758 :       sum[i] += tj*partials[i];

	fld	QWORD PTR _partials$90833[ebp+eax*8]
	inc	eax
	fmul	ST(0), ST(1)
	fadd	QWORD PTR _sum$[ebp+eax*8-8]
	fstp	QWORD PTR _sum$[ebp+eax*8-8]
	cmp	eax, ebx
	jl	SHORT $LN16@bi_surface@3

; 1757 :     for ( i = 0 ; i < SDIM ; i++ ) 

	fstp	ST(0)
	jmp	$LN27@bi_surface@3
$LN38@bi_surface@3:

; 1766 :   sumi = bi_sums[ordinal(v_info->id)];

	or	esi, -1
$LN39@bi_surface@3:
	mov	edx, DWORD PTR _bi_sums
	fld	QWORD PTR [edx+esi*8]
	fst	QWORD PTR _sumi$[ebp]

; 1767 :   if ( valid_id(start_fe) )

	test	eax, 268435456				; 10000000H
	je	$LN108@bi_surface@3

; 1768 :     for ( fe = start_fe ; ; )

	mov	edx, eax
$LN152@bi_surface@3:

; 1769 :     { 
; 1770 :       next_fe = inverse_id(get_next_facet(get_prev_edge(fe)));

	mov	edi, DWORD PTR _web+460
	fstp	ST(0)
	mov	esi, edx
	and	esi, 134217727				; 07ffffffH
	mov	ebx, edx
	add	esi, esi
	shr	ebx, 27					; 0000001bH
	add	esi, esi
	and	ebx, 1
	je	SHORT $LN49@bi_surface@3
	mov	ecx, DWORD PTR [esi+edi]
	mov	eax, DWORD PTR [ecx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN48@bi_surface@3
$LN49@bi_surface@3:
	mov	eax, DWORD PTR _web+460
	mov	ecx, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [ecx+28]
$LN48@bi_surface@3:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN53@bi_surface@3
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN52@bi_surface@3
$LN53@bi_surface@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [eax+40]
$LN52@bi_surface@3:
	xor	eax, 134217728				; 08000000H

; 1771 :       get_edge_side(get_fe_edge(fe),side1);

	mov	edi, edx
	mov	DWORD PTR _next_fe$[ebp], eax
	mov	eax, DWORD PTR [ecx+20]
	lea	edx, DWORD PTR _side1$[ebp]
	and	edi, 134217728				; 08000000H
	push	edx
	xor	eax, edi
	push	eax
	call	_get_edge_side

; 1772 :       get_edge_side(get_fe_edge(get_next_edge(fe)),side2);

	mov	ecx, DWORD PTR _web+460
	add	esp, 8
	test	ebx, ebx
	je	SHORT $LN59@bi_surface@3
	mov	edx, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN58@bi_surface@3
$LN59@bi_surface@3:
	mov	eax, DWORD PTR [esi+ecx]
	mov	eax, DWORD PTR [eax+32]
$LN58@bi_surface@3:
	lea	edx, DWORD PTR _side2$[ebp]
	push	edx
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+edx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	push	eax
	call	_get_edge_side

; 1773 :       s11 = SDIM_dot(side1,side1);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _side1$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fstp	QWORD PTR _s11$[ebp]

; 1774 :       s12 = SDIM_dot(side1,side2);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _side2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _side1$[ebp]
	push	ecx
	call	_dot
	fstp	QWORD PTR _s12$[ebp]

; 1775 :       s22 = SDIM_dot(side2,side2);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _side2$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fst	QWORD PTR _s22$[ebp]

; 1776 :       area = sqrt(s11*s22 - s12*s12);

	fmul	QWORD PTR _s11$[ebp]
	add	esp, 44					; 0000002cH
	fld	QWORD PTR _s12$[ebp]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	call	__CIsqrt

; 1777 :       for ( i = 0 ; i < SDIM ; i++ )

	mov	ecx, DWORD PTR _web+616
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN126@bi_surface@3
	fld	QWORD PTR __real@4018000000000000
	fld	QWORD PTR _s22$[ebp]
	fld	QWORD PTR _s12$[ebp]
$LN7@bi_surface@3:

; 1778 :          da[i] = (s12*side2[i] - s22*side1[i])/area/6;

	fld	QWORD PTR _side2$[ebp+eax*8]
	inc	eax
	fmul	ST(0), ST(1)
	fld	QWORD PTR _side1$[ebp+eax*8-8]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR _da$[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LN7@bi_surface@3

; 1777 :       for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(3)
	fstp	ST(2)
	fstp	ST(1)
$LN126@bi_surface@3:

; 1779 :       sumj = bi_sums[ordinal(get_fe_headv(fe))];

	mov	ebx, DWORD PTR _web+460
	fstp	ST(0)
	mov	edx, DWORD PTR [esi+ebx]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+edx+304]
	mov	edx, DWORD PTR _web+124
	xor	eax, edi
	mov	edi, DWORD PTR _web+636
	mov	esi, eax
	test	eax, 134217728				; 08000000H
	je	SHORT $LN67@bi_surface@3
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+esi*4]
	mov	esi, DWORD PTR [ecx+esi]
	jmp	SHORT $LN66@bi_surface@3
$LN67@bi_surface@3:
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+esi*4]
	lea	esi, DWORD PTR [esi+edi*4]
	mov	esi, DWORD PTR [esi+ecx]
$LN66@bi_surface@3:
	test	esi, 268435456				; 10000000H
	je	SHORT $LN40@bi_surface@3
	test	eax, 134217728				; 08000000H
	je	SHORT $LN73@bi_surface@3
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [ecx+eax]
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN41@bi_surface@3
$LN73@bi_surface@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	lea	eax, DWORD PTR [eax+edi*4]
	mov	eax, DWORD PTR [eax+ecx]
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN41@bi_surface@3
$LN40@bi_surface@3:
	or	eax, -1
$LN41@bi_surface@3:
	mov	esi, DWORD PTR _bi_sums
	fld	QWORD PTR [esi+eax*8]

; 1780 :       sumjj = bi_sums[ordinal(get_fe_headv(next_fe))];

	mov	eax, DWORD PTR _next_fe$[ebp]
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ebx+esi*4]
	mov	ebx, eax
	mov	eax, DWORD PTR [esi+20]
	and	ebx, 134217728				; 08000000H
	xor	eax, ebx
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+esi*4]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN79@bi_surface@3
	mov	esi, DWORD PTR [ecx+esi]
	jmp	SHORT $LN78@bi_surface@3
$LN79@bi_surface@3:
	lea	esi, DWORD PTR [esi+edi*4]
	mov	esi, DWORD PTR [esi+ecx]
$LN78@bi_surface@3:
	test	esi, 268435456				; 10000000H
	je	SHORT $LN42@bi_surface@3
	test	eax, 134217728				; 08000000H
	je	SHORT $LN85@bi_surface@3
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR [ecx+edx]
	and	ecx, 134217727				; 07ffffffH
	jmp	SHORT $LN43@bi_surface@3
$LN85@bi_surface@3:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	lea	edx, DWORD PTR [eax+edi*4]
	mov	ecx, DWORD PTR [edx+ecx]
	and	ecx, 134217727				; 07ffffffH
	jmp	SHORT $LN43@bi_surface@3
$LN42@bi_surface@3:
	or	ecx, -1
$LN43@bi_surface@3:
	mov	eax, DWORD PTR _bi_sums
	fld	QWORD PTR [eax+ecx*8]

; 1781 :       for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN143@bi_surface@3
	fld	QWORD PTR _sumi$[ebp]
$LN4@bi_surface@3:

; 1782 :          v_info->grad[0][i] += 2*(sumj*da[i] + sumjj*da[i] + sumi*da[i]);

	mov	ecx, DWORD PTR _v_info$GSCopy$[ebp]
	fld	ST(1)
	fmul	QWORD PTR _da$[ebp+eax*8]
	mov	edx, DWORD PTR [ecx+1336]
	mov	ecx, DWORD PTR [edx]
	fld	ST(3)
	fmul	QWORD PTR _da$[ebp+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	faddp	ST(1), ST(0)
	fld	ST(1)
	fmul	QWORD PTR _da$[ebp+eax*8-8]
	faddp	ST(1), ST(0)
	fadd	ST(0), ST(0)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN4@bi_surface@3

; 1781 :       for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(1)
	fstp	ST(1)
	jmp	SHORT $LN2@bi_surface@3
$LN143@bi_surface@3:
	fstp	ST(0)
	fstp	ST(0)
	fld	QWORD PTR _sumi$[ebp]
$LN2@bi_surface@3:

; 1783 :       if ( next_fe == start_fe ) break;

	mov	edx, DWORD PTR _next_fe$[ebp]
	cmp	edx, DWORD PTR _start_fe$[ebp]

; 1784 :       fe = next_fe;
; 1785 :     }

	jne	$LN152@bi_surface@3
$LN108@bi_surface@3:

; 1786 :   return 2*ti*sumi;

	fld	QWORD PTR _ti$[ebp]

; 1787 : } // end bi_surface_gradient()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	fadd	ST(0), ST(0)
	pop	esi
	xor	ecx, ebp
	fmulp	ST(1), ST(0)
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_bi_surface_gradient ENDP
_TEXT	ENDS
PUBLIC	_knot_thickness_p2
; Function compile flags: /Ogtp
;	COMDAT _knot_thickness_p2
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_knot_thickness_p2 PROC					; COMDAT

; 359  : { return knot_thickness_id2(v_info->id); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v_info$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_knot_thickness_id2
	add	esp, 4
	pop	ebp
	ret	0
_knot_thickness_p2 ENDP
_TEXT	ENDS
PUBLIC	_knot_thickness_p
; Function compile flags: /Ogtp
;	COMDAT _knot_thickness_p
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_knot_thickness_p PROC					; COMDAT

; 496  : { return knot_thickness_id(v_info->id); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v_info$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_knot_thickness_id
	add	esp, 4
	pop	ebp
	ret	0
_knot_thickness_p ENDP
_TEXT	ENDS
END
