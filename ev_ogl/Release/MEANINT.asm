; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\MEANINT.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_get_fe_facet
EXTRN	_web:BYTE
EXTRN	_NULLFACET:DWORD
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
;	COMDAT _get_fe_facet
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_facet PROC					; COMDAT

; 58   : {

	push	ebp
	mov	ebp, esp

; 59   :   facet_id f_id;
; 60   :   
; 61   :   if ( !valid_id(fe_id) ) return NULLFACET;

	mov	ecx, DWORD PTR _fe_id$[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN2@get_fe_fac
	mov	eax, DWORD PTR _NULLFACET

; 64   :   return f_id;
; 65   : }

	pop	ebp
	ret	0
$LN2@get_fe_fac:

; 62   :   f_id = feptr(fe_id)->fe_facet_id;

	mov	edx, DWORD PTR _web+460
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+24]

; 63   :   if ( inverted(fe_id) ) invert(f_id);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_fe_fac
	xor	eax, 134217728				; 08000000H
$LN3@get_fe_fac:

; 64   :   return f_id;
; 65   : }

	pop	ebp
	ret	0
_get_fe_facet ENDP
_TEXT	ENDS
PUBLIC	_get_edge_fe
; Function compile flags: /Ogtp
;	COMDAT _get_edge_fe
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_fe PROC					; COMDAT

; 179  : {   struct edge *ep;

	push	ebp
	mov	ebp, esp

; 180  :     facetedge_id fe;
; 181  : 
; 182  :  	ep = eptr(e_id);

	mov	ecx, DWORD PTR _e_id$[ebp]
	mov	edx, DWORD PTR _web+124
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]

; 183  :     if ( !ep ) return NULLID;

	test	eax, eax
	jne	SHORT $LN2@get_edge_f

; 186  :     return fe;
; 187  : }

	pop	ebp
	ret	0
$LN2@get_edge_f:

; 184  :     fe = ep->fe_id; 

	mov	eax, DWORD PTR [eax+28]

; 185  :     if ( inverted(e_id) ) invert(fe);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_edge_f
	xor	eax, 134217728				; 08000000H
$LN3@get_edge_f:

; 186  :     return fe;
; 187  : }

	pop	ebp
	ret	0
_get_edge_fe ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DH@FCOBLBPL@mean_curvature_integral?5method?5o@ ; `string'
PUBLIC	??_C@_0DE@PFCNNFEF@mean_curvature_integral?5method?5o@ ; `string'
PUBLIC	_mean_int_init
EXTRN	_gen_quant_list:DWORD
EXTRN	_mean_curv_int_quantity_num:DWORD
EXTRN	_dymem:DWORD
EXTRN	_localbase:DWORD
EXTRN	_mean_curvature_param:DWORD
EXTRN	_mean_curv_int_flag:DWORD
EXTRN	_everything_quantities_flag:DWORD
EXTRN	_kb_error:PROC
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_0DH@FCOBLBPL@mean_curvature_integral?5method?5o@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\meanint.c
CONST	SEGMENT
??_C@_0DH@FCOBLBPL@mean_curvature_integral?5method?5o@ DB 'mean_curvature'
	DB	'_integral method only for LINEAR model.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@PFCNNFEF@mean_curvature_integral?5method?5o@
CONST	SEGMENT
??_C@_0DE@PFCNNFEF@mean_curvature_integral?5method?5o@ DB 'mean_curvature'
	DB	'_integral method only for 2D facets.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _mean_int_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_mean_int_init PROC					; COMDAT

; 53   :   if ( web.dimension != 2 )

	cmp	DWORD PTR _web+620, 2
	je	SHORT $LN3@mean_int_i

; 54   :      kb_error(1594,"mean_curvature_integral method only for 2D facets.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DE@PFCNNFEF@mean_curvature_integral?5method?5o@
	push	1594					; 0000063aH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN3@mean_int_i:

; 55   : 
; 56   :   if ( web.modeltype != LINEAR )

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN2@mean_int_i

; 57   :      kb_error(1595,"mean_curvature_integral method only for LINEAR model.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DH@FCOBLBPL@mean_curvature_integral?5method?5o@
	push	1595					; 0000063bH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN2@mean_int_i:

; 58   : 
; 59   : 
; 60   :   if ( everything_quantities_flag && mean_curv_int_flag )

	cmp	DWORD PTR _everything_quantities_flag, 0
	je	$LN1@mean_int_i
	cmp	DWORD PTR _mean_curv_int_flag, 0
	je	SHORT $LN1@mean_int_i

; 61   :      GEN_QUANT(mean_curv_int_quantity_num)->modulus = 
; 62   :         globals(mean_curvature_param)->value.real;

	mov	eax, DWORD PTR _mean_curvature_param
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN6@mean_int_i
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN8@mean_int_i
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN7@mean_int_i
$LN8@mean_int_i:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN6@mean_int_i
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN7@mean_int_i
$LN6@mean_int_i:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN7@mean_int_i:
	mov	ecx, DWORD PTR _mean_curv_int_quantity_num
	fld	QWORD PTR [eax+64]
	mov	edx, DWORD PTR _gen_quant_list
	imul	ecx, 368				; 00000170H
	fstp	QWORD PTR [ecx+edx+176]
$LN1@mean_int_i:

; 63   : } // end mean_int_init()

	ret	0
_mean_int_init ENDP
_TEXT	ENDS
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@0000000000000000
PUBLIC	_mean_int_value
EXTRN	_triple_prod:PROC
EXTRN	_mat_tsquare:PROC
EXTRN	__CIatan2:PROC
EXTRN	__CIsqrt:PROC
;	COMDAT __real@3fe0000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\meanint.c
CONST	ENDS
;	COMDAT _mean_int_value
_TEXT	SEGMENT
_len$ = -8						; size = 8
tv290 = 8						; size = 4
_e_info$ = 8						; size = 4
_mean_int_value PROC					; COMDAT

; 73   : { REAL sinq,cosq; /* proprotional to sin and cos of angle */

	push	ebp
	mov	ebp, esp

; 74   :   REAL theta; /* the angle */
; 75   :   REAL len; /* length of side */
; 76   :   REAL vol; /* volume of parallelpiped of sides */
; 77   :   int sign = inverted(get_fe_facet(get_edge_fe(e_info->id))) ? 1 : -1;

	mov	edx, DWORD PTR _web+124
	sub	esp, 8
	push	esi
	push	edi
	mov	edi, DWORD PTR _e_info$[ebp]
	mov	eax, DWORD PTR [edi]
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	test	ecx, ecx
	jne	SHORT $LN5@mean_int_v
	xor	eax, eax
	jmp	SHORT $LN6@mean_int_v
$LN5@mean_int_v:
	mov	ecx, DWORD PTR [ecx+28]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN4@mean_int_v
	xor	ecx, 134217728				; 08000000H
$LN4@mean_int_v:
	mov	eax, ecx
$LN6@mean_int_v:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN9@mean_int_v
	mov	esi, DWORD PTR _NULLFACET
	jmp	SHORT $LN8@mean_int_v
$LN9@mean_int_v:
	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	esi, DWORD PTR [ecx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN8@mean_int_v
	xor	esi, 134217728				; 08000000H
$LN8@mean_int_v:

; 78   :   
; 79   :   mat_tsquare(e_info->sides[0],e_info->ss,3,SDIM); /* side products */

	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR [edi+1280]
	mov	ecx, DWORD PTR [edi+1276]
	push	edx
	mov	edx, DWORD PTR [ecx]
	push	3
	push	eax
	push	edx
	call	_mat_tsquare

; 80   :   len = sqrt(e_info->ss[0][0]);

	mov	eax, DWORD PTR [edi+1280]
	mov	ecx, DWORD PTR [eax]
	fld	QWORD PTR [ecx]
	add	esp, 16					; 00000010H
	call	__CIsqrt
	fstp	QWORD PTR _len$[ebp]

; 81   :   vol = triple_prod(e_info->sides[0][0],e_info->sides[0][1],e_info->sides[0][2]);

	mov	edx, DWORD PTR [edi+1276]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	push	ecx
	push	edx
	push	eax
	call	_triple_prod

; 82   :   if ( vol == 0.0 ) return vol;

	fld	ST(0)
	fldz
	add	esp, 12					; 0000000cH
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@mean_int_v

; 83   :   sinq = len*vol;

	fmul	QWORD PTR _len$[ebp]

; 84   :   cosq = e_info->ss[0][1]*e_info->ss[0][2] - e_info->ss[0][0]*e_info->ss[1][2];

	mov	ecx, DWORD PTR [edi+1280]
	mov	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+16]
	mov	ecx, DWORD PTR [ecx+4]
	fmul	QWORD PTR [eax+8]
	fld	QWORD PTR [ecx+16]
	fmul	QWORD PTR [eax]
	fsubp	ST(1), ST(0)

; 85   :   theta = atan2(sinq,cosq);

	call	__CIatan2

; 86   :   return sign*theta*len/2;

	and	esi, 134217728				; 08000000H
	neg	esi
	sbb	esi, esi
	and	esi, 2
	dec	esi
	mov	DWORD PTR tv290[ebp], esi
	fild	DWORD PTR tv290[ebp]
	fmulp	ST(1), ST(0)
	fmul	QWORD PTR _len$[ebp]
	fmul	QWORD PTR __real@3fe0000000000000
$LN2@mean_int_v:
	pop	edi
	pop	esi

; 87   : } // end mean_int_value()

	mov	esp, ebp
	pop	ebp
	ret	0
_mean_int_value ENDP
_TEXT	ENDS
PUBLIC	_mean_int_gradient
; Function compile flags: /Ogtp
;	COMDAT _mean_int_gradient
_TEXT	SEGMENT
_dlen$ = -56						; size = 8
_vol$ = -48						; size = 8
_theta$ = -40						; size = 8
tv792 = -32						; size = 8
_cosq$ = -32						; size = 8
_len$ = -24						; size = 8
tv1020 = -20						; size = 4
tv883 = -20						; size = 4
tv819 = -20						; size = 4
_sign$ = -16						; size = 4
_sinq$ = -12						; size = 8
tv904 = -8						; size = 4
tv840 = -8						; size = 4
tv729 = -8						; size = 4
tv720 = -4						; size = 4
tv1015 = 8						; size = 4
_e_info$ = 8						; size = 4
_mean_int_gradient PROC					; COMDAT

; 97   : { REAL sinq,cosq; /* proprotional to sin and cos of angle */

	push	ebp
	mov	ebp, esp

; 98   :   REAL dsinq,dcosq; /* derivatives */
; 99   :   REAL theta;
; 100  :   REAL dtheta;
; 101  :   REAL len,dlen;
; 102  :   REAL vol,dvol;
; 103  :   int i,j;
; 104  :   REAL g;
; 105  :   int sign = inverted(get_fe_facet(get_edge_fe(e_info->id))) ? 1 : -1;

	mov	edx, DWORD PTR _web+124
	sub	esp, 56					; 00000038H
	push	esi
	mov	esi, DWORD PTR _e_info$[ebp]
	mov	eax, DWORD PTR [esi]
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	test	ecx, ecx
	je	SHORT $LN13@mean_int_g
$LN14@mean_int_g:
	mov	ecx, DWORD PTR [ecx+28]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN13@mean_int_g
	xor	ecx, 134217728				; 08000000H
$LN13@mean_int_g:
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN18@mean_int_g
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN17@mean_int_g
$LN18@mean_int_g:
	mov	edx, DWORD PTR _web+460
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+24]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN17@mean_int_g
	xor	eax, 134217728				; 08000000H
$LN17@mean_int_g:
	fldz
	mov	edx, DWORD PTR _web+616
	and	eax, 134217728				; 08000000H
	neg	eax
	sbb	eax, eax
	and	eax, 2
	dec	eax
	mov	DWORD PTR _sign$[ebp], eax
	xor	ecx, ecx
$LN10@mean_int_g:

; 108  :     for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN9@mean_int_g
$LN7@mean_int_g:

; 109  :       e_info->grad[i][j] = 0.0;

	mov	edx, DWORD PTR [esi+1336]
	mov	edx, DWORD PTR [ecx+edx]
	fst	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _web+616
	inc	eax
	cmp	eax, edx
	jl	SHORT $LN7@mean_int_g
$LN9@mean_int_g:

; 106  :   
; 107  :   for ( i = 0 ; i < 4 ; i++ )

	add	ecx, 4
	cmp	ecx, 16					; 00000010H
	jl	SHORT $LN10@mean_int_g

; 110  : 
; 111  :   mat_tsquare(e_info->sides[0],e_info->ss,3,SDIM); /* side products */

	mov	eax, DWORD PTR [esi+1280]
	fstp	ST(0)
	mov	ecx, DWORD PTR [esi+1276]
	push	edx
	mov	edx, DWORD PTR [ecx]
	push	3
	push	eax
	push	edx
	call	_mat_tsquare

; 112  :   len = sqrt(e_info->ss[0][0]);

	mov	eax, DWORD PTR [esi+1280]
	mov	ecx, DWORD PTR [eax]
	fld	QWORD PTR [ecx]
	add	esp, 16					; 00000010H
	call	__CIsqrt
	fstp	QWORD PTR _len$[ebp]

; 113  :   vol = triple_prod(e_info->sides[0][0],e_info->sides[0][1],e_info->sides[0][2]);

	mov	edx, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	push	ecx
	push	edx
	push	eax
	call	_triple_prod
	fst	QWORD PTR _vol$[ebp]

; 114  :   if ( vol == 0.0 )  return 0.0;

	fld	ST(0)
	add	esp, 12					; 0000000cH
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	SHORT $LN35@mean_int_g
	fstp	ST(1)
	pop	esi

; 158  : } // end mean_int_gradient()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN35@mean_int_g:

; 115  :   sinq = len*vol;
; 116  :   cosq = e_info->ss[0][1]*e_info->ss[0][2] - e_info->ss[0][0]*e_info->ss[1][2];

	mov	ecx, DWORD PTR [esi+1280]
	fstp	ST(0)
	fmul	QWORD PTR _len$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+4]
	fst	QWORD PTR _sinq$[ebp]
	fld	QWORD PTR [eax+16]
	fmul	QWORD PTR [eax+8]
	fld	QWORD PTR [ecx+16]
	fmul	QWORD PTR [eax]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _cosq$[ebp]

; 117  :   theta = atan2(sinq,cosq);

	call	__CIatan2

; 118  : 
; 119  :   /* derivatives of stuff, side by side */
; 120  :   /* doing partial derivatives in each coordinate */
; 121  :   for ( i = 0 ; i < SDIM ; i++ )

	cmp	DWORD PTR _web+616, 0
	fstp	QWORD PTR _theta$[ebp]
	fld	QWORD PTR __real@3fe0000000000000
	jle	$LN27@mean_int_g
	fstp	ST(0)
	push	ebx
	fld	QWORD PTR _cosq$[ebp]
	xor	ecx, ecx
	fld	ST(0)
	mov	DWORD PTR tv1015[ebp], 2
	fmul	ST(0), ST(1)
	push	edi
	fld	QWORD PTR _sinq$[ebp]
	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(2), ST(0)
	fild	DWORD PTR _sign$[ebp]
	fstp	QWORD PTR tv792[ebp]
	fld	QWORD PTR _len$[ebp]
	jmp	SHORT $LN28@mean_int_g
$LN43@mean_int_g:
	fstp	ST(0)
$LN28@mean_int_g:

; 122  :     { /* main edge */
; 123  :       dlen = e_info->sides[0][0][i]/len;

	mov	edx, DWORD PTR [esi+1276]
	mov	ebx, DWORD PTR [edx]
	mov	eax, DWORD PTR [ebx]
	fld	QWORD PTR [eax+ecx]

; 124  :       dvol = e_info->sides[0][1][(i+1)%3]*e_info->sides[0][2][(i+2)%3]
; 125  :                 - e_info->sides[0][1][(i+2)%3]*e_info->sides[0][2][(i+1)%3];

	mov	edx, DWORD PTR [ebx+8]
	add	eax, ecx
	fdiv	ST(0), ST(1)
	mov	DWORD PTR tv1020[ebp], eax
	mov	eax, DWORD PTR tv1015[ebp]
	mov	DWORD PTR tv720[ebp], edx
	cdq
	mov	edi, 3
	idiv	edi
	mov	eax, DWORD PTR [ebx+4]
	mov	DWORD PTR tv729[ebp], eax
	mov	eax, DWORD PTR tv1015[ebp]
	dec	eax
	mov	ebx, 3
	fst	QWORD PTR _dlen$[ebp]
	mov	edi, edx
	cdq
	idiv	ebx
	mov	ebx, DWORD PTR tv720[ebp]

; 126  :       dsinq = dlen*vol + len*dvol;
; 127  :       dcosq = e_info->sides[0][1][i]*e_info->ss[0][2]
; 128  :               + e_info->ss[0][1]*e_info->sides[0][2][i]
; 129  :             - 2*e_info->sides[0][0][i]*e_info->ss[1][2];

	mov	eax, DWORD PTR [esi+1280]
	add	edi, edi
	add	edi, edi
	add	edi, edi
	fld	QWORD PTR [ebx+edi]
	mov	ebx, DWORD PTR tv729[ebp]
	add	edx, edx
	add	edx, edx
	add	edx, edx
	fmul	QWORD PTR [ebx+edx]
	fld	QWORD PTR [ebx+edi]
	mov	ebx, DWORD PTR tv720[ebp]
	fmul	QWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR tv729[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fxch	ST(1)
	fmul	QWORD PTR _vol$[ebp]
	faddp	ST(1), ST(0)

; 130  :       dtheta = (cosq*dsinq-dcosq*sinq)/(sinq*sinq+cosq*cosq);

	fmul	ST(0), ST(4)
	fld	QWORD PTR [ecx+ebx]
	mov	ebx, DWORD PTR [eax]
	fmul	QWORD PTR [ebx+16]
	mov	ebx, DWORD PTR tv720[ebp]
	fld	QWORD PTR [ecx+ebx]
	mov	ebx, DWORD PTR [eax]
	fmul	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR tv1020[ebp]
	mov	eax, DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx]
	fadd	ST(0), ST(0)
	fmul	QWORD PTR [eax+16]

; 131  :       g = sign*(dtheta*len + theta*dlen)/2;
; 132  :       e_info->grad[1][i] += g;

	mov	eax, DWORD PTR [esi+1336]
	mov	eax, DWORD PTR [eax+4]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(3)
	fmul	ST(0), ST(1)
	fld	QWORD PTR _dlen$[ebp]
	fmul	QWORD PTR _theta$[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR tv792[ebp]
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR [eax+ecx]
	fadd	ST(0), ST(2)
	fstp	QWORD PTR [eax+ecx]

; 133  :       e_info->grad[0][i] -= g;

	mov	eax, DWORD PTR [esi+1336]
	mov	eax, DWORD PTR [eax]
	fld	QWORD PTR [eax+ecx]
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax+ecx]

; 134  : 
; 135  :       /* left edge */
; 136  :       dvol = e_info->sides[0][2][(i+1)%3]*e_info->sides[0][0][(i+2)%3]
; 137  :                 - e_info->sides[0][2][(i+2)%3]*e_info->sides[0][0][(i+1)%3];

	mov	eax, DWORD PTR [esi+1276]
	mov	ebx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ebx+8]
	mov	ebx, DWORD PTR [ebx]
	mov	DWORD PTR tv819[ebp], ebx

; 138  :       dsinq = len*dvol;
; 139  :       dcosq = e_info->sides[0][0][i]*e_info->ss[0][2]
; 140  :                     - e_info->ss[0][0]*e_info->sides[0][2][i];

	mov	ebx, DWORD PTR [esi+1280]
	mov	ebx, DWORD PTR [ebx]
	mov	DWORD PTR tv840[ebp], ebx
	mov	ebx, DWORD PTR tv819[ebp]
	fld	QWORD PTR [ebx+edi]
	add	ecx, 8
	fmul	QWORD PTR [eax+edx]
	fld	QWORD PTR [eax+edi]
	fmul	QWORD PTR [ebx+edx]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(2)

; 141  :       dtheta = (cosq*dsinq-dcosq*sinq)/(sinq*sinq+cosq*cosq);

	fmul	ST(0), ST(5)
	fld	QWORD PTR [ecx+ebx-8]
	mov	ebx, DWORD PTR tv840[ebp]
	fmul	QWORD PTR [ebx+16]
	fld	QWORD PTR [ecx+eax-8]

; 142  :       g = sign*dtheta*len/2;
; 143  :       e_info->grad[2][i] += g;

	mov	eax, DWORD PTR [esi+1336]
	fmul	QWORD PTR [ebx]
	mov	eax, DWORD PTR [eax+8]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fmul	QWORD PTR tv792[ebp]
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(1)
	fld	QWORD PTR [eax+ecx-8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax+ecx-8]

; 144  :       e_info->grad[0][i] -= g;

	mov	eax, DWORD PTR [esi+1336]
	mov	eax, DWORD PTR [eax]
	fsubr	QWORD PTR [eax+ecx-8]
	fstp	QWORD PTR [eax+ecx-8]

; 145  : 
; 146  :       /* right edge */
; 147  :       dvol = e_info->sides[0][0][(i+1)%3]*e_info->sides[0][1][(i+2)%3]
; 148  :                 - e_info->sides[0][0][(i+2)%3]*e_info->sides[0][1][(i+1)%3];

	mov	eax, DWORD PTR [esi+1276]
	mov	ebx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ebx+4]
	mov	ebx, DWORD PTR [ebx]
	fld	QWORD PTR [eax+edi]
	mov	DWORD PTR tv883[ebp], ebx

; 149  :       dsinq = len*dvol;
; 150  :       dcosq = e_info->sides[0][0][i]*e_info->ss[0][1]
; 151  :                  - e_info->ss[0][0]*e_info->sides[0][1][i];

	mov	ebx, DWORD PTR [esi+1280]
	mov	ebx, DWORD PTR [ebx]
	mov	DWORD PTR tv904[ebp], ebx
	mov	ebx, DWORD PTR tv883[ebp]
	fmul	QWORD PTR [ebx+edx]
	fld	QWORD PTR [ebx+edi]
	fmul	QWORD PTR [eax+edx]
	mov	edx, DWORD PTR tv904[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(2)

; 152  :       dtheta = (cosq*dsinq-dcosq*sinq)/(sinq*sinq+cosq*cosq);

	fmul	ST(0), ST(5)
	fld	QWORD PTR [ecx+ebx-8]
	fmul	QWORD PTR [edx+8]
	fld	QWORD PTR [ecx+eax-8]
	fmul	QWORD PTR [edx]

; 153  :       g = sign*dtheta*len/2;
; 154  :       e_info->grad[3][i] += g;

	mov	edx, DWORD PTR [esi+1336]
	mov	eax, DWORD PTR [edx+12]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fmul	QWORD PTR tv792[ebp]
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(1)
	fld	QWORD PTR [eax+ecx-8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax+ecx-8]

; 155  :       e_info->grad[0][i] -= g;

	mov	edx, DWORD PTR [esi+1336]
	mov	eax, DWORD PTR [edx]
	fsubr	QWORD PTR [eax+ecx-8]
	fstp	QWORD PTR [eax+ecx-8]
	mov	eax, DWORD PTR tv1015[ebp]
	inc	eax
	mov	DWORD PTR tv1015[ebp], eax
	add	eax, -2					; fffffffeH
	cmp	eax, DWORD PTR _web+616
	jl	$LN43@mean_int_g

; 118  : 
; 119  :   /* derivatives of stuff, side by side */
; 120  :   /* doing partial derivatives in each coordinate */
; 121  :   for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(2)
	pop	edi
	fstp	ST(3)
	pop	ebx
	fstp	ST(1)
	pop	esi
	fxch	ST(1)

; 156  :     }
; 157  :   return sign*theta*len/2;

	fild	DWORD PTR _sign$[ebp]
	fmul	QWORD PTR _theta$[ebp]
	fmulp	ST(1), ST(0)
	fmulp	ST(1), ST(0)

; 158  : } // end mean_int_gradient()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN27@mean_int_g:

; 118  : 
; 119  :   /* derivatives of stuff, side by side */
; 120  :   /* doing partial derivatives in each coordinate */
; 121  :   for ( i = 0 ; i < SDIM ; i++ )

	fld	QWORD PTR _len$[ebp]
	pop	esi

; 156  :     }
; 157  :   return sign*theta*len/2;

	fild	DWORD PTR _sign$[ebp]
	fmul	QWORD PTR _theta$[ebp]
	fmulp	ST(1), ST(0)
	fmulp	ST(1), ST(0)

; 158  : } // end mean_int_gradient()

	mov	esp, ebp
	pop	ebp
	ret	0
_mean_int_gradient ENDP
_TEXT	ENDS
PUBLIC	__real@4008000000000000
PUBLIC	_mean_int_hessian
;	COMDAT __real@4008000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\meanint.c
CONST	ENDS
;	COMDAT _mean_int_hessian
_TEXT	SEGMENT
tv11409 = -776						; size = 8
tv11250 = -768						; size = 8
_theta$ = -760						; size = 8
tv11217 = -752						; size = 8
_len$ = -744						; size = 8
tv11464 = -736						; size = 8
tv13232 = -728						; size = 8
tv11404 = -720						; size = 8
tv11430 = -712						; size = 8
tv13145 = -704						; size = 8
tv11606 = -704						; size = 8
tv11433 = -696						; size = 8
tv11571 = -688						; size = 8
tv11398 = -688						; size = 8
tv11476 = -680						; size = 8
tv11219 = -672						; size = 8
tv11223 = -664						; size = 8
tv11537 = -656						; size = 8
tv11226 = -648						; size = 8
tv11245 = -640						; size = 8
tv11375 = -632						; size = 8
tv11438 = -624						; size = 8
tv11822 = -616						; size = 8
tv11442 = -616						; size = 8
tv11921 = -608						; size = 8
tv11252 = -608						; size = 8
tv16133 = -600						; size = 8
tv11680 = -600						; size = 8
tv11379 = -592						; size = 8
tv11389 = -584						; size = 8
tv13389 = -576						; size = 8
tv11423 = -576						; size = 8
tv11524 = -568						; size = 8
tv11276 = -568						; size = 8
tv11480 = -560						; size = 8
tv11271 = -552						; size = 8
tv13260 = -544						; size = 8
tv11301 = -544						; size = 8
tv11568 = -536						; size = 8
tv11383 = -536						; size = 8
tv13407 = -528						; size = 8
tv12111 = -528						; size = 8
tv11627 = -528						; size = 8
tv11394 = -528						; size = 8
tv13421 = -520						; size = 8
tv11844 = -520						; size = 8
tv11232 = -520						; size = 8
tv13080 = -512						; size = 8
tv11907 = -512						; size = 8
tv12309 = -504						; size = 8
tv12035 = -504						; size = 8
tv11714 = -504						; size = 8
tv11471 = -504						; size = 8
tv13248 = -496						; size = 8
tv11852 = -496						; size = 8
tv11213 = -496						; size = 8
_sign$ = -488						; size = 4
tv13920 = -484						; size = 8
tv11544 = -484						; size = 8
tv11342 = -476						; size = 8
tv13122 = -468						; size = 8
tv12204 = -468						; size = 8
tv12180 = -460						; size = 8
tv11870 = -460						; size = 8
tv11256 = -460						; size = 8
tv11396 = -452						; size = 8
tv12155 = -444						; size = 8
tv11851 = -444						; size = 8
tv11218 = -444						; size = 8
tv13397 = -436						; size = 8
tv11821 = -436						; size = 8
tv11231 = -436						; size = 8
tv13375 = -428						; size = 8
tv13197 = -428						; size = 8
tv11608 = -428						; size = 8
tv13165 = -420						; size = 8
_bx$ = -412						; size = 8
tv13836 = -404						; size = 8
tv11381 = -404						; size = 8
tv13230 = -396						; size = 8
tv12794 = -396						; size = 8
tv12462 = -396						; size = 8
tv12009 = -396						; size = 8
tv11776 = -396						; size = 8
tv13401 = -388						; size = 8
tv11477 = -388						; size = 8
tv11374 = -388						; size = 8
tv11576 = -380						; size = 8
tv11479 = -380						; size = 8
tv11378 = -380						; size = 8
tv13256 = -372						; size = 8
tv11885 = -372						; size = 8
tv11300 = -372						; size = 8
tv13052 = -364						; size = 8
tv11835 = -356						; size = 8
tv11224 = -356						; size = 8
tv13280 = -348						; size = 8
tv12255 = -348						; size = 8
tv11869 = -348						; size = 8
tv11225 = -348						; size = 8
tv11238 = -340						; size = 8
tv13210 = -332						; size = 8
tv13070 = -332						; size = 8
tv12131 = -332						; size = 8
tv11827 = -332						; size = 8
tv11212 = -324						; size = 8
tv13448 = -316						; size = 8
tv11220 = -316						; size = 8
tv13266 = -308						; size = 8
tv11786 = -308						; size = 8
tv11274 = -308						; size = 8
tv13579 = -300						; size = 8
tv11296 = -300						; size = 8
tv11497 = -292						; size = 8
tv13240 = -284						; size = 8
tv14886 = -276						; size = 4
tv11364 = -276						; size = 4
tv13048 = -272						; size = 8
tv12196 = -272						; size = 8
tv11846 = -272						; size = 8
tv11518 = -264						; size = 8
tv11448 = -264						; size = 8
tv11289 = -264						; size = 8
tv11246 = -264						; size = 8
tv11107 = -264						; size = 8
_sinq$ = -264						; size = 8
tv13569 = -256						; size = 8
tv11431 = -256						; size = 8
tv12135 = -248						; size = 8
tv11876 = -248						; size = 8
tv11501 = -248						; size = 8
tv11318 = -248						; size = 8
tv11249 = -248						; size = 8
tv11877 = -240						; size = 8
tv11387 = -240						; size = 8
tv13072 = -232						; size = 8
tv11872 = -232						; size = 8
tv11823 = -224						; size = 8
tv11227 = -224						; size = 8
tv13873 = -216						; size = 8
tv13185 = -216						; size = 8
tv11391 = -216						; size = 8
tv11922 = -208						; size = 8
tv11234 = -208						; size = 8
tv13616 = -200						; size = 8
tv13046 = -200						; size = 8
tv13606 = -192						; size = 8
tv11268 = -192						; size = 8
tv12227 = -184						; size = 8
tv11241 = -184						; size = 8
tv11926 = -176						; size = 8
tv11434 = -176						; size = 8
tv12223 = -168						; size = 8
tv11503 = -168						; size = 8
tv11483 = -168						; size = 8
tv11294 = -168						; size = 8
_aa$ = -168						; size = 8
tv12235 = -160						; size = 8
_ab$ = -160						; size = 8
tv13910 = -152						; size = 8
tv13305 = -152						; size = 8
tv11293 = -152						; size = 8
_vol$ = -152						; size = 8
tv13653 = -144						; size = 8
tv13218 = -144						; size = 8
tv13060 = -144						; size = 8
tv12757 = -136						; size = 8
tv12502 = -136						; size = 8
tv12444 = -136						; size = 8
tv12336 = -136						; size = 8
tv12226 = -136						; size = 8
tv12060 = -136						; size = 8
tv11925 = -136						; size = 8
tv11791 = -136						; size = 8
tv11444 = -136						; size = 8
_bz$ = -128						; size = 8
tv11029 = -124						; size = 4
_bc$ = -120						; size = 8
tv11027 = -116						; size = 4
tv13643 = -112						; size = 8
_ac$ = -112						; size = 8
tv12144 = -104						; size = 8
tv11894 = -104						; size = 8
tv11302 = -104						; size = 8
tv13846 = -96						; size = 8
tv11312 = -96						; size = 8
tv14265 = -88						; size = 8
tv12739 = -88						; size = 8
tv11534 = -88						; size = 8
tv11475 = -88						; size = 8
tv11376 = -88						; size = 8
tv11290 = -88						; size = 8
tv11247 = -88						; size = 8
_dlen$ = -88						; size = 8
_cosq$ = -88						; size = 8
tv13883 = -80						; size = 8
_aaa$ = -80						; size = 8
tv11828 = -72						; size = 8
_a$ = -72						; size = 8
_az$ = -64						; size = 8
tv15311 = -60						; size = 4
tv11214 = -56						; size = 8
tv15289 = -52						; size = 4
tv11060 = -52						; size = 4
_ax$ = -48						; size = 8
tv15740 = -44						; size = 4
tv15305 = -44						; size = 4
tv12176 = -40						; size = 8
_cx$ = -40						; size = 8
tv11024 = -36						; size = 4
_by$ = -32						; size = 8
tv15550 = -28						; size = 4
tv15295 = -28						; size = 4
_jj$ = -28						; size = 4
tv12181 = -24						; size = 8
_cy$ = -24						; size = 8
tv15300 = -20						; size = 4
tv12136 = -16						; size = 8
_cz$ = -16						; size = 8
tv15283 = -12						; size = 4
_ay$ = -8						; size = 8
tv15892 = -4						; size = 4
tv15721 = -4						; size = 4
tv10723 = -4						; size = 4
tv10227 = -4						; size = 4
_i$ = 8							; size = 4
_e_info$ = 8						; size = 4
_mean_int_hessian PROC					; COMDAT

; 168  : { REAL sinq,cosq; /* proprotional to sin and cos of angle */

	push	ebp
	mov	ebp, esp

; 169  :   REAL dsinq,dcosq; /* derivatives */
; 170  :   REAL theta;
; 171  :   REAL dtheta;
; 172  :   REAL len,dlen;
; 173  :   REAL vol,dvol;
; 174  :   int i,j,ii,jj;
; 175  :   REAL g;
; 176  :   int sign = inverted(get_fe_facet(get_edge_fe(e_info->id))) ? 1 : -1;

	mov	edx, DWORD PTR _web+124
	sub	esp, 776				; 00000308H
	push	edi
	mov	edi, DWORD PTR _e_info$[ebp]
	mov	eax, DWORD PTR [edi]
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	test	ecx, ecx
	je	SHORT $LN43@mean_int_h
$LN44@mean_int_h:
	mov	ecx, DWORD PTR [ecx+28]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN43@mean_int_h
	xor	ecx, 134217728				; 08000000H
$LN43@mean_int_h:
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN48@mean_int_h
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN47@mean_int_h
$LN48@mean_int_h:
	mov	edx, DWORD PTR _web+460
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+24]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN47@mean_int_h
	xor	eax, 134217728				; 08000000H
$LN47@mean_int_h:

; 177  :   REAL ax,ay,az,bx,by,bz,cx,cy,cz;
; 178  :   REAL aa,ab,ac,bc,a,aaa,det;
; 179  :  
; 180  :   /* same value and gradient calculation as mean_int_gradient() */
; 181  :   mat_tsquare(e_info->sides[0],e_info->ss,3,SDIM); /* side products */

	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR [edi+1280]
	and	eax, 134217728				; 08000000H
	neg	eax
	sbb	eax, eax
	and	eax, 2
	push	ecx
	dec	eax
	mov	DWORD PTR _sign$[ebp], eax
	mov	eax, DWORD PTR [edi+1276]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	edx
	push	ecx
	call	_mat_tsquare

; 182  :   len = sqrt(e_info->ss[0][0]);

	mov	edx, DWORD PTR [edi+1280]
	mov	eax, DWORD PTR [edx]
	fld	QWORD PTR [eax]
	add	esp, 16					; 00000010H
	call	__CIsqrt
	fstp	QWORD PTR _len$[ebp]

; 183  :   vol = triple_prod(e_info->sides[0][0],e_info->sides[0][1],e_info->sides[0][2]);

	mov	ecx, DWORD PTR [edi+1276]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR [eax+4]
	push	edx
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	edx
	call	_triple_prod
	fst	QWORD PTR _vol$[ebp]

; 184  :   if ( vol == 0.0 )  return 0.0;

	fld	ST(0)
	add	esp, 12					; 0000000cH
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	SHORT $LN86@mean_int_h
	fstp	ST(1)
	pop	edi

; 910  : 
; 911  : } // end mean_int_hessian()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN86@mean_int_h:

; 185  :   sinq = len*vol;
; 186  :   cosq = e_info->ss[0][1]*e_info->ss[0][2] - e_info->ss[0][0]*e_info->ss[1][2];

	mov	eax, DWORD PTR [edi+1280]
	fstp	ST(0)
	fmul	QWORD PTR _len$[ebp]
	push	ebx
	mov	ebx, DWORD PTR [eax+4]
	push	esi
	mov	esi, DWORD PTR [eax]
	fst	QWORD PTR _sinq$[ebp]
	fld	QWORD PTR [esi+8]
	mov	DWORD PTR tv10227[ebp], ebx
	fmul	QWORD PTR [esi+16]
	fld	QWORD PTR [ebx+16]
	fmul	QWORD PTR [esi]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _cosq$[ebp]

; 187  :   theta = atan2(sinq,cosq);

	call	__CIatan2

; 188  : 
; 189  :   /* derivatives of stuff, side by side */
; 190  :   /* doing partial derivatives in each coordinate */
; 191  :   for ( i = 0 ; i < SDIM ; i++ )

	cmp	DWORD PTR _web+616, 0
	fstp	QWORD PTR _theta$[ebp]
	jle	$LN37@mean_int_h
	mov	ecx, DWORD PTR [edi+1276]
	fld	QWORD PTR _cosq$[ebp]
	mov	eax, DWORD PTR [edi+1336]
	fld	ST(0)
	mov	edi, DWORD PTR [ecx]
	fmul	ST(0), ST(1)
	mov	ecx, DWORD PTR [edi+8]
	fld	QWORD PTR _sinq$[ebp]
	mov	edx, DWORD PTR [edi]
	fld	ST(0)
	mov	edi, DWORD PTR [edi+4]
	fmul	ST(0), ST(1)
	mov	DWORD PTR tv11027[ebp], edi
	mov	edi, DWORD PTR [eax+4]
	sub	edi, ecx
	faddp	ST(2), ST(0)
	fild	DWORD PTR _sign$[ebp]
	mov	DWORD PTR tv15283[ebp], edi
	mov	edi, DWORD PTR [eax+8]
	sub	edi, ecx
	mov	DWORD PTR tv15289[ebp], edi
	fstp	QWORD PTR tv11107[ebp]
	mov	edi, DWORD PTR tv11027[ebp]
	fld	QWORD PTR _len$[ebp]
	sub	edi, ecx
	mov	DWORD PTR tv15300[ebp], edi
	mov	edi, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv11029[ebp], edx
	sub	edx, ecx
	sub	edi, ecx
	mov	ebx, 2
	sub	eax, ecx
	mov	DWORD PTR tv11024[ebp], ecx
	mov	DWORD PTR tv14886[ebp], ebx
	mov	DWORD PTR tv15295[ebp], edx
	mov	DWORD PTR tv15305[ebp], edi
	mov	DWORD PTR tv15311[ebp], eax
$LN77@mean_int_h:

; 192  :     { /* main edge */
; 193  :       dlen = e_info->sides[0][0][i]/len;

	fld	QWORD PTR [edx+ecx]

; 194  :       dvol = e_info->sides[0][1][(i+1)%3]*e_info->sides[0][2][(i+2)%3]
; 195  :                 - e_info->sides[0][1][(i+2)%3]*e_info->sides[0][2][(i+1)%3];

	mov	eax, ebx
	cdq
	fdiv	ST(0), ST(1)
	mov	edi, 3
	idiv	edi
	lea	eax, DWORD PTR [ebx-1]
	mov	ebx, 3
	fst	QWORD PTR _dlen$[ebp]
	mov	edi, edx
	cdq
	idiv	ebx
	mov	ebx, DWORD PTR tv11024[ebp]
	mov	eax, DWORD PTR tv11027[ebp]
	add	edi, edi
	add	edi, edi
	add	edi, edi
	fld	QWORD PTR [ebx+edi]
	add	edx, edx
	add	edx, edx
	add	edx, edx
	fmul	QWORD PTR [edx+eax]
	fld	QWORD PTR [edx+ebx]
	fmul	QWORD PTR [eax+edi]

; 196  :       dsinq = dlen*vol + len*dvol;
; 197  :       dcosq = e_info->sides[0][1][i]*e_info->ss[0][2]
; 198  :               + e_info->ss[0][1]*e_info->sides[0][2][i]
; 199  :             - 2*e_info->sides[0][0][i]*e_info->ss[1][2];

	mov	eax, DWORD PTR tv15300[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fxch	ST(1)
	fmul	QWORD PTR _vol$[ebp]
	faddp	ST(1), ST(0)

; 200  :       dtheta = (cosq*dsinq-dcosq*sinq)/(sinq*sinq+cosq*cosq);

	fmul	ST(0), ST(4)
	fld	QWORD PTR [esi+8]
	fmul	QWORD PTR [ecx]
	fld	QWORD PTR [eax+ecx]
	mov	eax, DWORD PTR tv15295[ebp]
	fmul	QWORD PTR [esi+16]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax+ecx]
	mov	eax, DWORD PTR tv10227[ebp]
	fadd	ST(0), ST(0)
	fmul	QWORD PTR [eax+16]

; 201  :       g = sign*(dtheta*len + theta*dlen)/2;
; 202  :       e_info->grad[1][i] += g;

	mov	eax, DWORD PTR tv15283[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(3)
	fmul	ST(0), ST(1)
	fld	QWORD PTR _dlen$[ebp]
	fmul	QWORD PTR _theta$[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv11107[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR __real@3fe0000000000000
	fld	ST(0)
	fadd	QWORD PTR [eax+ecx]
	fstp	QWORD PTR [eax+ecx]

; 203  :       e_info->grad[0][i] -= g;

	mov	eax, DWORD PTR tv15311[ebp]
	fsubr	QWORD PTR [eax+ecx]
	fstp	QWORD PTR [eax+ecx]

; 204  : 
; 205  :       /* left edge */
; 206  :       dvol = e_info->sides[0][2][(i+1)%3]*e_info->sides[0][0][(i+2)%3]
; 207  :                 - e_info->sides[0][2][(i+2)%3]*e_info->sides[0][0][(i+1)%3];

	fld	QWORD PTR [edx+ebx]
	mov	ebx, DWORD PTR tv11029[ebp]
	fmul	QWORD PTR [ebx+edi]
	mov	ebx, DWORD PTR tv11024[ebp]
	fld	QWORD PTR [ebx+edi]
	mov	ebx, DWORD PTR tv11029[ebp]
	fmul	QWORD PTR [edx+ebx]

; 208  :       dsinq = len*dvol;
; 209  :       dcosq = e_info->sides[0][0][i]*e_info->ss[0][2]
; 210  :                     - e_info->ss[0][0]*e_info->sides[0][2][i];

	mov	ebx, DWORD PTR tv15295[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(2)

; 211  :       dtheta = (cosq*dsinq-dcosq*sinq)/(sinq*sinq+cosq*cosq);

	fmul	ST(0), ST(5)
	fld	QWORD PTR [ebx+ecx]
	fmul	QWORD PTR [esi+16]
	fld	QWORD PTR [ecx]
	fmul	QWORD PTR [esi]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)

; 212  :       g = sign*dtheta*len/2;

	fmul	ST(0), ST(1)
	fmul	ST(0), ST(2)
	fmul	QWORD PTR __real@3fe0000000000000

; 213  :       e_info->grad[2][i] += g;

	mov	ebx, DWORD PTR tv15289[ebp]
	fld	QWORD PTR [ebx+ecx]
	add	ecx, 8
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [ebx+ecx-8]

; 214  :       e_info->grad[0][i] -= g;
; 215  : 
; 216  :       /* right edge */
; 217  :       dvol = e_info->sides[0][0][(i+1)%3]*e_info->sides[0][1][(i+2)%3]
; 218  :                 - e_info->sides[0][0][(i+2)%3]*e_info->sides[0][1][(i+1)%3];

	mov	ebx, DWORD PTR tv11029[ebp]
	fsubr	QWORD PTR [eax+ecx-8]
	fstp	QWORD PTR [eax+ecx-8]
	fld	QWORD PTR [edx+ebx]
	mov	ebx, DWORD PTR tv11027[ebp]
	fmul	QWORD PTR [ebx+edi]
	fld	QWORD PTR [edx+ebx]
	mov	edx, DWORD PTR tv11029[ebp]
	fmul	QWORD PTR [edx+edi]

; 219  :       dsinq = len*dvol;
; 220  :       dcosq = e_info->sides[0][0][i]*e_info->ss[0][1]
; 221  :                  - e_info->ss[0][0]*e_info->sides[0][1][i];

	mov	edx, DWORD PTR tv15295[ebp]
	mov	edi, DWORD PTR tv15300[ebp]
	mov	ebx, DWORD PTR tv14886[ebp]
	fsubp	ST(1), ST(0)
	inc	ebx
	mov	DWORD PTR tv14886[ebp], ebx
	fmul	ST(0), ST(2)

; 222  :       dtheta = (cosq*dsinq-dcosq*sinq)/(sinq*sinq+cosq*cosq);

	fmul	ST(0), ST(5)
	fld	QWORD PTR [esi+8]
	fmul	QWORD PTR [edx+ecx-8]
	fld	QWORD PTR [esi]
	fmul	QWORD PTR [edi+ecx-8]

; 223  :       g = sign*dtheta*len/2;
; 224  :       e_info->grad[3][i] += g;

	mov	edi, DWORD PTR tv15305[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fmulp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fmul	QWORD PTR __real@3fe0000000000000
	fld	QWORD PTR [edi+ecx-8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edi+ecx-8]

; 225  :       e_info->grad[0][i] -= g;

	fsubr	QWORD PTR [eax+ecx-8]
	fstp	QWORD PTR [eax+ecx-8]
	lea	eax, DWORD PTR [ebx-2]
	cmp	eax, DWORD PTR _web+616
	jl	$LN77@mean_int_h

; 188  : 
; 189  :   /* derivatives of stuff, side by side */
; 190  :   /* doing partial derivatives in each coordinate */
; 191  :   for ( i = 0 ; i < SDIM ; i++ )

	mov	edi, DWORD PTR _e_info$[ebp]
	fstp	ST(0)
	mov	ebx, DWORD PTR tv10227[ebp]
	fstp	ST(0)
	fstp	ST(1)
	fstp	ST(0)
$LN37@mean_int_h:

; 226  :     }
; 227  : 
; 228  : 
; 229  :   /* Now Hessian, as ground out by Mathematica, in meanint.m */
; 230  :   ax = e_info->sides[0][0][0];

	mov	ecx, DWORD PTR [edi+1276]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax]
	fld	QWORD PTR [ecx]
	fstp	QWORD PTR _ax$[ebp]

; 231  :   ay = e_info->sides[0][0][1];

	fld	QWORD PTR [ecx+8]
	fstp	QWORD PTR _ay$[ebp]

; 232  :   az = e_info->sides[0][0][2];

	fld	QWORD PTR [ecx+16]

; 233  :   bx = e_info->sides[0][1][0];

	mov	ecx, DWORD PTR [eax+4]

; 234  :   by = e_info->sides[0][1][1];
; 235  :   bz = e_info->sides[0][1][2];
; 236  :   cx = e_info->sides[0][2][0];

	mov	eax, DWORD PTR [eax+8]
	fstp	QWORD PTR _az$[ebp]
	fld	QWORD PTR [ecx]
	fstp	QWORD PTR _bx$[ebp]
	fld	QWORD PTR [ecx+8]
	fstp	QWORD PTR _by$[ebp]
	fld	QWORD PTR [ecx+16]
	fstp	QWORD PTR _bz$[ebp]
	fld	QWORD PTR [eax]
	fstp	QWORD PTR _cx$[ebp]

; 237  :   cy = e_info->sides[0][2][1];

	fld	QWORD PTR [eax+8]
	fstp	QWORD PTR _cy$[ebp]

; 238  :   cz = e_info->sides[0][2][2];

	fld	QWORD PTR [eax+16]
	fstp	QWORD PTR _cz$[ebp]

; 239  :   aa = e_info->ss[0][0];

	fld	QWORD PTR [esi]
	fst	QWORD PTR _aa$[ebp]

; 240  :   ab = e_info->ss[0][1];

	fld	QWORD PTR [esi+8]
	fstp	QWORD PTR _ab$[ebp]

; 241  :   ac = e_info->ss[0][2];

	fld	QWORD PTR [esi+16]
	fstp	QWORD PTR _ac$[ebp]

; 242  :   bc = e_info->ss[1][2];

	fld	QWORD PTR [ebx+16]
	fstp	QWORD PTR _bc$[ebp]

; 243  :   a = sqrt(aa);

	call	__CIsqrt
	fst	QWORD PTR _a$[ebp]

; 244  :   aaa = a*aa;

	fld	ST(0)
	fld	QWORD PTR _aa$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _aaa$[ebp]

; 245  :   det = vol;
; 246  : 
; 247  :   /* Copied from Mathematica */
; 248  : #define Power(q,p)  ((q)*(q))
; 249  : #define ArcTan(x,y) atan2((y),(x))
; 250  : 
; 251  :     e_info->hess[1][1][0][0] = ((2*a*ax*
; 252  :             ((ab*ac - aa*bc)*(ax*(-(az*by*cx) + ay*bz*cx + az*bx*cy - 
; 253  :                     ay*bx*cz) + aa*(-(bz*cy) + by*cz) + 
; 254  :                  Power(ax,2)*(-(bz*cy) + by*cz)) + 
; 255  :               aa*(2*ax*bc - ac*bx - ab*cx)*det))/
; 256  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) - 
; 257  :          (2*aaa*((ab*ac - aa*bc)*(ax*
; 258  :                   (-(az*by*cx) + ay*bz*cx + az*bx*cy - ay*bx*cz) + 
; 259  :                  aa*(-(bz*cy) + by*cz) + Power(ax,2)*(-(bz*cy) + by*cz)) + 
; 260  :               aa*(2*ax*bc - ac*bx - ab*cx)*det)*
; 261  :             ((ab*ac - aa*bc)*(-2*ax*bc + ac*bx + ab*cx) - 
; 262  :               aa*(bz*cy - by*cz)*det + ax*Power(det,2)))/
; 263  :           Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2) + 
; 264  :          (a*(Power(aa,2)*(az*(bc - 2*bx*cx)*(-(by*cx) + bx*cy) + 
; 265  :                  ay*(bc - 2*bx*cx)*(bz*cx - bx*cz) + 
; 266  :                  ax*(bc + 2*bx*cx)*(bz*cy - by*cz)) - ab*ac*Power(ax,2)*det + 
; 267  :               aa*(ab*ac*(-(az*by*cx) + ay*bz*cx + az*bx*cy - 3*ax*bz*cy - 
; 268  :                     ay*bx*cz + 3*ax*by*cz) + Power(ax,2)*bc*det)))/
; 269  :           (Power(ab,2)*Power(ac,2) - 2*aa*ab*ac*bc + 
; 270  :             aa*(aa*Power(bc,2) + Power(det,2))) + 
; 271  :          aa*ArcTan(ab*ac - aa*bc,a*det) - Power(ax,2)*ArcTan(ab*ac - aa*bc,a*det)\
; 272  :     )/aaa;

	fld	QWORD PTR _ac$[ebp]
	fmul	QWORD PTR _ab$[ebp]
	fst	QWORD PTR tv11212[ebp]
	fld	QWORD PTR _bc$[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv11213[ebp]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR tv11214[ebp]
	fxch	ST(1)
	fmul	QWORD PTR _vol$[ebp]
	fxch	ST(1)
	call	__CIatan2
	fst	QWORD PTR tv13046[ebp]
	fld	QWORD PTR _aa$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv13048[ebp]
	fld	QWORD PTR _bz$[ebp]
	fld	QWORD PTR _ay$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv11217[ebp]
	fld	QWORD PTR _cx$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv11218[ebp]
	fld	QWORD PTR _by$[ebp]
	fld	QWORD PTR _az$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv11219[ebp]
	fmul	ST(0), ST(3)
	fst	QWORD PTR tv11220[ebp]
	fld	QWORD PTR _bx$[ebp]
	fld	ST(0)
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fst	QWORD PTR tv11223[ebp]
	fld	QWORD PTR _cy$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv11224[ebp]
	fxch	ST(4)
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fst	QWORD PTR tv11225[ebp]
	fld	ST(1)
	fmulp	ST(5), ST(0)
	fxch	ST(4)
	fst	QWORD PTR tv11226[ebp]
	fld	QWORD PTR _cz$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv11227[ebp]
	fxch	ST(1)
	fmul	QWORD PTR _by$[ebp]
	fst	QWORD PTR tv11231[ebp]
	fxch	ST(3)
	fmul	QWORD PTR _bz$[ebp]
	fst	QWORD PTR tv11232[ebp]
	fsubp	ST(3), ST(0)
	fxch	ST(2)
	fst	QWORD PTR tv11234[ebp]
	fld	QWORD PTR _ax$[ebp]
	fld	ST(0)
	fmul	ST(0), ST(1)
	fst	QWORD PTR tv11238[ebp]
	fxch	ST(6)
	fsubrp	ST(4), ST(0)
	fmul	ST(3), ST(0)
	fld	ST(1)
	fmul	ST(0), ST(7)
	faddp	ST(4), ST(0)
	fxch	ST(5)
	fmulp	ST(1), ST(0)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv11241[ebp]
	fld	ST(3)
	fadd	ST(0), ST(0)
	fst	QWORD PTR tv11245[ebp]
	fmul	QWORD PTR _bc$[ebp]
	fst	QWORD PTR tv11246[ebp]
	fld	QWORD PTR _ac$[ebp]
	fmul	ST(0), ST(3)
	fst	QWORD PTR tv11247[ebp]
	fld	QWORD PTR _ab$[ebp]
	fmulp	ST(5), ST(0)
	fxch	ST(4)
	fst	QWORD PTR tv11249[ebp]
	fxch	ST(1)
	fsubrp	ST(4), ST(0)
	fsubp	ST(3), ST(0)
	fxch	ST(2)
	fst	QWORD PTR tv11250[ebp]
	fmul	ST(0), ST(4)
	fst	QWORD PTR tv11252[ebp]
	fld	QWORD PTR _vol$[ebp]
	fmul	ST(1), ST(0)
	fld	QWORD PTR tv11214[ebp]
	fmul	ST(4), ST(0)
	fxch	ST(2)
	faddp	ST(4), ST(0)
	fxch	ST(3)
	fstp	QWORD PTR tv13052[ebp]
	fld	QWORD PTR _a$[ebp]
	fadd	ST(0), ST(0)
	fst	QWORD PTR tv11256[ebp]
	fld	ST(1)
	fld	ST(4)
	fmul	ST(0), ST(5)
	fstp	QWORD PTR tv13060[ebp]
	fmul	ST(0), ST(0)
	fld	QWORD PTR tv13060[ebp]
	fmul	ST(0), ST(7)
	faddp	ST(1), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(5)
	fmul	QWORD PTR tv13052[ebp]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR tv13070[ebp]
	fld	QWORD PTR _aaa$[ebp]
	mov	edi, DWORD PTR [edi+1340]
	fadd	ST(0), ST(0)
	mov	DWORD PTR tv11364[ebp], edi
	fst	QWORD PTR tv11268[ebp]
	fmul	QWORD PTR tv13052[ebp]
	fstp	QWORD PTR tv13072[ebp]
	fld	QWORD PTR tv11247[ebp]
	fsub	QWORD PTR tv11246[ebp]
	fadd	QWORD PTR tv11249[ebp]
	fstp	QWORD PTR tv11271[ebp]
	fld	QWORD PTR tv11232[ebp]
	fsub	QWORD PTR tv11231[ebp]
	fst	QWORD PTR tv11274[ebp]
	fmul	ST(0), ST(6)
	fst	QWORD PTR tv11276[ebp]
	fxch	ST(2)
	fmul	QWORD PTR tv11271[ebp]
	fxch	ST(2)
	fmul	ST(0), ST(4)
	fsubp	ST(2), ST(0)
	fld	QWORD PTR tv13060[ebp]
	fmul	ST(0), ST(5)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv13080[ebp]
	fld	ST(0)
	fmul	ST(0), ST(0)
	fld	ST(2)
	fadd	ST(0), ST(0)
	fmul	QWORD PTR _cx$[ebp]
	fst	QWORD PTR tv11289[ebp]
	fsubr	QWORD PTR _bc$[ebp]
	fstp	QWORD PTR tv11290[ebp]
	fld	QWORD PTR _cy$[ebp]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR tv11293[ebp]
	fld	QWORD PTR _cx$[ebp]
	fmul	QWORD PTR _by$[ebp]
	fst	QWORD PTR tv11294[ebp]
	fsubr	QWORD PTR tv11293[ebp]
	fstp	QWORD PTR tv11296[ebp]
	fld	QWORD PTR _cx$[ebp]
	fmul	QWORD PTR _bz$[ebp]
	fst	QWORD PTR tv11300[ebp]
	fld	QWORD PTR _cz$[ebp]
	fmulp	ST(4), ST(0)
	fxch	ST(3)
	fst	QWORD PTR tv11301[ebp]
	fsubp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR tv11302[ebp]
	fld	ST(4)
	fmul	ST(0), ST(5)
	fstp	QWORD PTR tv11312[ebp]
	fld	ST(3)
	fmul	QWORD PTR __real@4008000000000000
	fstp	QWORD PTR tv11318[ebp]
	fld	ST(4)
	fadd	ST(0), ST(0)
	fstp	QWORD PTR tv11342[ebp]
	fld	QWORD PTR _ac$[ebp]
	fmul	ST(0), ST(0)
	fld	QWORD PTR _ab$[ebp]
	fld	ST(0)
	fmul	ST(0), ST(1)
	fmulp	ST(2), ST(0)
	fmul	QWORD PTR tv11342[ebp]
	fmul	QWORD PTR _ac$[ebp]
	fld	QWORD PTR _bc$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(2)
	fsubrp	ST(1), ST(0)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(6)
	fadd	QWORD PTR tv13060[ebp]
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR tv13122[ebp]
	fld	QWORD PTR tv11290[ebp]
	mov	eax, DWORD PTR [edi+4]
	fld	QWORD PTR _ay$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	fmul	ST(0), ST(1)
	mov	edx, DWORD PTR [ecx]
	fmul	QWORD PTR tv11302[ebp]
	fxch	ST(1)
	fmul	QWORD PTR _az$[ebp]
	fmul	QWORD PTR tv11296[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv11289[ebp]
	fadd	QWORD PTR _bc$[ebp]
	fmulp	ST(5), ST(0)
	fxch	ST(4)
	fmul	QWORD PTR tv11274[ebp]
	faddp	ST(4), ST(0)
	fxch	ST(3)
	fmul	QWORD PTR tv11312[ebp]
	fld	QWORD PTR tv11238[ebp]
	fmul	QWORD PTR tv11212[ebp]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv11318[ebp]
	fld	QWORD PTR _bz$[ebp]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR _cy$[ebp]
	fsubr	QWORD PTR tv11225[ebp]
	fsub	QWORD PTR tv11227[ebp]
	fxch	ST(1)
	fmul	QWORD PTR _by$[ebp]
	fmul	QWORD PTR _cz$[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR tv11212[ebp]
	fld	QWORD PTR tv11238[ebp]
	fld	QWORD PTR _bc$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(5)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(6)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR _a$[ebp]
	fdiv	QWORD PTR tv13122[ebp]
	fld	QWORD PTR tv13080[ebp]
	fmul	QWORD PTR tv13072[ebp]
	fdiv	ST(0), ST(3)
	fsubr	QWORD PTR tv13070[ebp]
	faddp	ST(1), ST(0)
	fadd	QWORD PTR tv13048[ebp]
	fld	QWORD PTR tv11238[ebp]
	fld	QWORD PTR tv13046[ebp]
	fmul	ST(0), ST(1)
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	QWORD PTR _aaa$[ebp]
	fstp	QWORD PTR [edx]

; 273  :     e_info->hess[1][1][0][1] = ((a*ay*
; 274  :             ((ab*ac - aa*bc)*(ax*(-(az*by*cx) + ay*bz*cx + az*bx*cy - 
; 275  :                     ay*bx*cz) + aa*(-(bz*cy) + by*cz) + 
; 276  :                  Power(ax,2)*(-(bz*cy) + by*cz)) + 
; 277  :               aa*(2*ax*bc - ac*bx - ab*cx)*det))/
; 278  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) + 
; 279  :          (a*ax*((ab*ac - aa*bc)*(aa*(bz*cx - bx*cz) + 
; 280  :                  Power(ay,2)*(bz*cx - bx*cz) + 
; 281  :                  ay*(-(az*by*cx) + az*bx*cy - ax*bz*cy + ax*by*cz)) + 
; 282  :               aa*(2*ay*bc - ac*by - ab*cy)*det))/
; 283  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) + 
; 284  :          (a*(-(Power(aa,2)*(-2*ax*bc + ac*bx + ab*cx)*(bz*cx - bx*cz)) + 
; 285  :               aa*(-2*ay*bc + ac*by + ab*cy)*
; 286  :                (ax*(-(az*by*cx) + ay*bz*cx + az*bx*cy - ay*bx*cz) + 
; 287  :                  aa*(-(bz*cy) + by*cz) + Power(ax,2)*(-(bz*cy) + by*cz)) + 
; 288  :               (ab*ac - aa*bc)*(Power(ax,2)*ay*(bz*cy - by*cz) + 
; 289  :                  aa*ay*(-(bz*cy) + by*cz) + 
; 290  :                  ax*(ay*az*(by*cx - bx*cy) + aa*(bz*cx - bx*cz) + 
; 291  :                     Power(ay,2)*(-(bz*cx) + bx*cz))) + 
; 292  :               aa*ay*(2*ax*bc - ac*bx - ab*cx)*det - 
; 293  :               Power(aa,2)*(by*cx + bx*cy)*det))/
; 294  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) - 
; 295  :          (2*aaa*((ab*ac - aa*bc)*(ax*
; 296  :                   (-(az*by*cx) + ay*bz*cx + az*bx*cy - ay*bx*cz) + 
; 297  :                  aa*(-(bz*cy) + by*cz) + Power(ax,2)*(-(bz*cy) + by*cz)) + 
; 298  :               aa*(2*ax*bc - ac*bx - ab*cx)*det)*
; 299  :             ((ab*ac - aa*bc)*(-2*ay*bc + ac*by + ab*cy) + 
; 300  :               aa*(bz*cx - bx*cz)*det + ay*Power(det,2)))/
; 301  :           Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2) - 
; 302  :          ax*ay*ArcTan(ab*ac - aa*bc,a*det))/aaa;

	fld	QWORD PTR _ac$[ebp]
	fmul	QWORD PTR _by$[ebp]
	fstp	QWORD PTR tv11374[ebp]
	fld	QWORD PTR _ay$[ebp]
	fld	ST(0)
	fadd	ST(0), ST(1)
	fst	QWORD PTR tv11375[ebp]
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fst	QWORD PTR tv11376[ebp]
	fld	QWORD PTR _ab$[ebp]
	fmul	QWORD PTR _cy$[ebp]
	fstp	QWORD PTR tv11378[ebp]
	fsubr	QWORD PTR tv11374[ebp]
	fadd	QWORD PTR tv11378[ebp]
	fst	QWORD PTR tv11379[ebp]
	fmul	ST(0), ST(6)
	fstp	QWORD PTR tv11381[ebp]
	fld	QWORD PTR tv11312[ebp]
	fmul	QWORD PTR tv11271[ebp]
	fstp	QWORD PTR tv11383[ebp]
	fld	QWORD PTR tv11294[ebp]
	fsub	QWORD PTR tv11293[ebp]
	fstp	QWORD PTR tv11387[ebp]
	fld	QWORD PTR _az$[ebp]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv11389[ebp]
	fld	QWORD PTR tv11302[ebp]
	fmul	ST(0), ST(6)
	fstp	QWORD PTR tv11391[ebp]
	fld	QWORD PTR tv11301[ebp]
	fsub	QWORD PTR tv11300[ebp]
	fst	QWORD PTR tv11394[ebp]
	fld	ST(2)
	fmul	ST(0), ST(3)
	fst	QWORD PTR tv11396[ebp]
	fmulp	ST(1), ST(0)
	fstp	QWORD PTR tv11398[ebp]
	fld	ST(5)
	fmul	ST(0), ST(2)
	fst	QWORD PTR tv11404[ebp]
	fxch	ST(1)
	fmul	ST(0), ST(2)
	fmul	QWORD PTR tv11274[ebp]
	fld	QWORD PTR tv11234[ebp]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv11389[ebp]
	fmul	QWORD PTR tv11387[ebp]
	fadd	QWORD PTR tv11391[ebp]
	fadd	QWORD PTR tv11398[ebp]
	fld	QWORD PTR _ax$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR tv11214[ebp]
	fstp	QWORD PTR tv11409[ebp]
	fld	QWORD PTR tv11294[ebp]
	fadd	QWORD PTR tv11293[ebp]
	fmul	QWORD PTR tv11312[ebp]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR tv13145[ebp]
	fld	QWORD PTR _a$[ebp]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv11423[ebp]
	fld	QWORD PTR _bz$[ebp]
	fmul	ST(0), ST(1)
	fst	QWORD PTR tv11430[ebp]
	fmul	QWORD PTR _cy$[ebp]
	fst	QWORD PTR tv11431[ebp]
	fld	QWORD PTR _by$[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv11433[ebp]
	fmul	QWORD PTR _cz$[ebp]
	fst	QWORD PTR tv11434[ebp]
	fld	QWORD PTR tv11224[ebp]
	fsub	QWORD PTR tv11220[ebp]
	fsubrp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fld	QWORD PTR tv11396[ebp]
	fmul	QWORD PTR tv11302[ebp]
	fadd	QWORD PTR tv11391[ebp]
	faddp	ST(1), ST(0)
	fst	QWORD PTR tv11438[ebp]
	fld	QWORD PTR tv11376[ebp]
	fsub	QWORD PTR tv11374[ebp]
	fsub	QWORD PTR tv11378[ebp]
	fst	QWORD PTR tv11442[ebp]
	fmul	ST(0), ST(6)
	fst	QWORD PTR tv11444[ebp]
	fld	QWORD PTR tv11214[ebp]
	fmulp	ST(2), ST(0)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fst	QWORD PTR tv13165[ebp]
	fld	QWORD PTR _a$[ebp]
	fmul	QWORD PTR _ax$[ebp]
	fst	QWORD PTR tv11448[ebp]
	fmulp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fld	QWORD PTR tv13052[ebp]
	fmul	QWORD PTR tv11423[ebp]
	fdiv	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR tv16133[ebp]
	fld	QWORD PTR tv11214[ebp]
	fmul	QWORD PTR tv11379[ebp]
	fld	QWORD PTR tv11391[ebp]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv13060[ebp]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR tv13185[ebp]
	fld	QWORD PTR _ax$[ebp]
	fmul	ST(0), ST(1)
	fst	QWORD PTR tv11464[ebp]
	fmul	QWORD PTR tv13046[ebp]
	fstp	QWORD PTR tv13197[ebp]
	fld	QWORD PTR tv11241[ebp]
	fmul	QWORD PTR tv11381[ebp]
	fld	QWORD PTR tv11383[ebp]
	fmul	QWORD PTR tv11302[ebp]
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR tv11409[ebp]
	fld	QWORD PTR tv11250[ebp]
	fmul	QWORD PTR tv11404[ebp]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fsub	QWORD PTR tv13145[ebp]
	fmul	QWORD PTR _a$[ebp]
	fdiv	ST(0), ST(4)
	fadd	QWORD PTR tv16133[ebp]
	fld	QWORD PTR tv13185[ebp]
	fmul	QWORD PTR tv13072[ebp]
	fdiv	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fsub	QWORD PTR tv13197[ebp]
	fdiv	QWORD PTR _aaa$[ebp]
	fstp	QWORD PTR [edx+8]

; 303  :     e_info->hess[1][1][0][2] = ((a*az*
; 304  :             ((ab*ac - aa*bc)*(ax*(-(az*by*cx) + ay*bz*cx + az*bx*cy - 
; 305  :                     ay*bx*cz) + aa*(-(bz*cy) + by*cz) + 
; 306  :                  Power(ax,2)*(-(bz*cy) + by*cz)) + 
; 307  :               aa*(2*ax*bc - ac*bx - ab*cx)*det))/
; 308  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) - 
; 309  :          (2*aaa*((ab*ac - aa*bc)*(ax*
; 310  :                   (-(az*by*cx) + ay*bz*cx + az*bx*cy - ay*bx*cz) + 
; 311  :                  aa*(-(bz*cy) + by*cz) + Power(ax,2)*(-(bz*cy) + by*cz)) + 
; 312  :               aa*(2*ax*bc - ac*bx - ab*cx)*det)*
; 313  :             ((ab*ac - aa*bc)*(-2*az*bc + ac*bz + ab*cz) - 
; 314  :               aa*(by*cx - bx*cy)*det + az*Power(det,2)))/
; 315  :           Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2) + 
; 316  :          (a*ax*(aa*(2*az*bc - ac*bz - ab*cz)*det + 
; 317  :               (-(ab*ac) + aa*bc)*(aa*(by*cx - bx*cy) - az*det)))/
; 318  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) + 
; 319  :          (a*(-(Power(aa,2)*(-2*ax*bc + ac*bx + ab*cx)*(-(by*cx) + bx*cy)) + 
; 320  :               aa*(2*az*bc - ac*bz - ab*cz)*
; 321  :                (ax*(az*by*cx - ay*bz*cx - az*bx*cy + ay*bx*cz) + 
; 322  :                  aa*(bz*cy - by*cz) + Power(ax,2)*(bz*cy - by*cz)) + 
; 323  :               aa*az*(2*ax*bc - ac*bx - ab*cx)*det - 
; 324  :               Power(aa,2)*(bz*cx + bx*cz)*det + 
; 325  :               (-(ab*ac) + aa*bc)*(aa*
; 326  :                   (ax*by*cx - ax*bx*cy + az*bz*cy - az*by*cz) + ax*az*det)))/
; 327  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) - 
; 328  :          ax*az*ArcTan(ab*ac - aa*bc,a*det))/aaa;

	fld	QWORD PTR _a$[ebp]
	fld	QWORD PTR _az$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv11471[ebp]
	fmul	QWORD PTR tv13052[ebp]
	fdiv	ST(0), ST(5)
	fstp	QWORD PTR tv13210[ebp]
	fld	QWORD PTR _ac$[ebp]
	fmul	QWORD PTR _bz$[ebp]
	fst	QWORD PTR tv11475[ebp]
	fld	ST(1)
	fadd	ST(0), ST(0)
	fst	QWORD PTR tv11476[ebp]
	fmul	QWORD PTR _bc$[ebp]
	fstp	QWORD PTR tv11477[ebp]
	fld	QWORD PTR _ab$[ebp]
	fmul	QWORD PTR _cz$[ebp]
	fstp	QWORD PTR tv11479[ebp]
	fsub	QWORD PTR tv11477[ebp]
	fadd	QWORD PTR tv11479[ebp]
	fst	QWORD PTR tv11480[ebp]
	fld	QWORD PTR tv11387[ebp]
	fmul	ST(0), ST(7)
	fstp	QWORD PTR tv11483[ebp]
	fmul	QWORD PTR tv11214[ebp]
	fld	QWORD PTR tv11483[ebp]
	fmul	ST(0), ST(5)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv13060[ebp]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR tv13218[ebp]
	fmul	ST(0), ST(3)
	fst	QWORD PTR tv13230[ebp]
	fsubr	QWORD PTR tv11483[ebp]
	fst	QWORD PTR tv13232[ebp]
	fld	QWORD PTR tv11213[ebp]
	fsub	QWORD PTR tv11212[ebp]
	fst	QWORD PTR tv11497[ebp]
	fld	QWORD PTR tv11477[ebp]
	fsub	QWORD PTR tv11475[ebp]
	fsub	QWORD PTR tv11479[ebp]
	fst	QWORD PTR tv11501[ebp]
	fmul	ST(0), ST(7)
	fst	QWORD PTR tv11503[ebp]
	fxch	ST(2)
	fmulp	ST(1), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fst	QWORD PTR tv13240[ebp]
	fmul	QWORD PTR tv11448[ebp]
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR tv13248[ebp]
	fld	QWORD PTR tv11220[ebp]
	fsub	QWORD PTR tv11218[ebp]
	fsub	QWORD PTR tv11224[ebp]
	fadd	QWORD PTR tv11227[ebp]
	fmul	QWORD PTR _ax$[ebp]
	fadd	QWORD PTR tv11276[ebp]
	fld	QWORD PTR tv11238[ebp]
	fmul	QWORD PTR tv11274[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR tv11518[ebp]
	fld	ST(4)
	fld	QWORD PTR _az$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv11524[ebp]
	fld	QWORD PTR tv11301[ebp]
	fadd	QWORD PTR tv11300[ebp]
	fmul	QWORD PTR tv11312[ebp]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR tv13256[ebp]
	fld	QWORD PTR _bx$[ebp]
	fmul	QWORD PTR _ax$[ebp]
	fst	QWORD PTR tv11534[ebp]
	fld	QWORD PTR _bz$[ebp]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv11537[ebp]
	fxch	ST(1)
	fmul	QWORD PTR _ax$[ebp]
	fst	QWORD PTR tv11544[ebp]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR tv13260[ebp]
	fld	QWORD PTR tv11433[ebp]
	fmul	QWORD PTR _cx$[ebp]
	fld	QWORD PTR _cy$[ebp]
	fmul	ST(2), ST(0)
	fxch	ST(1)
	fsubrp	ST(2), ST(0)
	fmul	QWORD PTR tv11537[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv11219[ebp]
	fmul	QWORD PTR _cz$[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fadd	QWORD PTR tv13260[ebp]
	fmul	QWORD PTR tv11497[ebp]
	fstp	QWORD PTR tv13266[ebp]
	fld	QWORD PTR tv13046[ebp]
	fmul	QWORD PTR tv11544[ebp]
	fstp	QWORD PTR tv13280[ebp]
	fld	QWORD PTR tv11518[ebp]
	fmul	QWORD PTR tv11503[ebp]
	fld	QWORD PTR tv11383[ebp]
	fmul	QWORD PTR tv11296[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv11250[ebp]
	fmul	QWORD PTR tv11524[ebp]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fsub	QWORD PTR tv13256[ebp]
	fadd	QWORD PTR tv13266[ebp]
	fmul	QWORD PTR _a$[ebp]
	fdiv	ST(0), ST(4)
	fld	QWORD PTR tv13218[ebp]
	fmul	QWORD PTR tv13072[ebp]
	fdiv	ST(0), ST(3)
	fsubr	QWORD PTR tv13210[ebp]
	fadd	QWORD PTR tv13248[ebp]
	faddp	ST(1), ST(0)
	fsub	QWORD PTR tv13280[ebp]
	fdiv	QWORD PTR _aaa$[ebp]
	fstp	QWORD PTR [edx+16]

; 329  :     e_info->hess[1][1][1][0] = ((a*ay*
; 330  :             ((ab*ac - aa*bc)*(ax*(-(az*by*cx) + ay*bz*cx + az*bx*cy - 
; 331  :                     ay*bx*cz) + aa*(-(bz*cy) + by*cz) + 
; 332  :                  Power(ax,2)*(-(bz*cy) + by*cz)) + 
; 333  :               aa*(2*ax*bc - ac*bx - ab*cx)*det))/
; 334  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) + 
; 335  :          (a*ax*((ab*ac - aa*bc)*(aa*(bz*cx - bx*cz) + 
; 336  :                  Power(ay,2)*(bz*cx - bx*cz) + 
; 337  :                  ay*(-(az*by*cx) + az*bx*cy - ax*bz*cy + ax*by*cz)) + 
; 338  :               aa*(2*ay*bc - ac*by - ab*cy)*det))/
; 339  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) + 
; 340  :          (a*(-(Power(aa,2)*(-2*ay*bc + ac*by + ab*cy)*(-(bz*cy) + by*cz)) + 
; 341  :               aa*(2*ax*bc - ac*bx - ab*cx)*
; 342  :                (aa*(-(bz*cx) + bx*cz) + Power(ay,2)*(-(bz*cx) + bx*cz) + 
; 343  :                  ay*(az*by*cx - az*bx*cy + ax*bz*cy - ax*by*cz)) + 
; 344  :               (ab*ac - aa*bc)*(Power(ax,2)*ay*(bz*cy - by*cz) + 
; 345  :                  aa*ay*(-(bz*cy) + by*cz) + 
; 346  :                  ax*(ay*az*(by*cx - bx*cy) + aa*(bz*cx - bx*cz) + 
; 347  :                     Power(ay,2)*(-(bz*cx) + bx*cz))) + 
; 348  :               aa*ax*(2*ay*bc - ac*by - ab*cy)*det - 
; 349  :               Power(aa,2)*(by*cx + bx*cy)*det))/
; 350  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) - 
; 351  :          (2*aaa*((ab*ac - aa*bc)*(aa*(bz*cx - bx*cz) + 
; 352  :                  Power(ay,2)*(bz*cx - bx*cz) + 
; 353  :                  ay*(-(az*by*cx) + az*bx*cy - ax*bz*cy + ax*by*cz)) + 
; 354  :               aa*(2*ay*bc - ac*by - ab*cy)*det)*
; 355  :             ((ab*ac - aa*bc)*(-2*ax*bc + ac*bx + ab*cx) - 
; 356  :               aa*(bz*cy - by*cz)*det + ax*Power(det,2)))/
; 357  :           Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2) - 
; 358  :          ax*ay*ArcTan(ab*ac - aa*bc,a*det))/aaa;

	fld	QWORD PTR tv11220[ebp]
	fsub	QWORD PTR tv11224[ebp]
	mov	edx, DWORD PTR [ecx+4]
	fadd	QWORD PTR tv11431[ebp]
	fsub	QWORD PTR tv11434[ebp]
	fmul	ST(0), ST(1)
	fld	QWORD PTR tv11394[ebp]
	fmul	ST(0), ST(6)
	fadd	QWORD PTR tv11398[ebp]
	faddp	ST(1), ST(0)
	fst	QWORD PTR tv11568[ebp]
	fld	QWORD PTR tv11379[ebp]
	fmul	QWORD PTR tv11312[ebp]
	fst	QWORD PTR tv11571[ebp]
	fld	ST(6)
	fmul	QWORD PTR _ax$[ebp]
	fstp	QWORD PTR tv11576[ebp]
	fld	QWORD PTR tv13165[ebp]
	fmul	QWORD PTR tv11268[ebp]
	fstp	QWORD PTR tv13305[ebp]
	fld	QWORD PTR tv11252[ebp]
	fmulp	ST(2), ST(0)
	fmul	QWORD PTR tv11234[ebp]
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR tv11409[ebp]
	fld	QWORD PTR tv11576[ebp]
	fmul	QWORD PTR tv11442[ebp]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fsub	QWORD PTR tv13145[ebp]
	fmul	QWORD PTR _a$[ebp]
	fdiv	ST(0), ST(4)
	fadd	QWORD PTR tv16133[ebp]
	fld	QWORD PTR tv13305[ebp]
	fmul	QWORD PTR tv13080[ebp]
	fdiv	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fsub	QWORD PTR tv13197[ebp]
	fdiv	QWORD PTR _aaa$[ebp]
	fstp	QWORD PTR [edx]

; 359  :     e_info->hess[1][1][1][1] = ((2*a*ay*
; 360  :             ((ab*ac - aa*bc)*(aa*(bz*cx - bx*cz) + 
; 361  :                  Power(ay,2)*(bz*cx - bx*cz) + 
; 362  :                  ay*(-(az*by*cx) + az*bx*cy - ax*bz*cy + ax*by*cz)) + 
; 363  :               aa*(2*ay*bc - ac*by - ab*cy)*det))/
; 364  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) - 
; 365  :          (2*aaa*((ab*ac - aa*bc)*(aa*(bz*cx - bx*cz) + 
; 366  :                  Power(ay,2)*(bz*cx - bx*cz) + 
; 367  :                  ay*(-(az*by*cx) + az*bx*cy - ax*bz*cy + ax*by*cz)) + 
; 368  :               aa*(2*ay*bc - ac*by - ab*cy)*det)*
; 369  :             ((ab*ac - aa*bc)*(-2*ay*bc + ac*by + ab*cy) + 
; 370  :               aa*(bz*cx - bx*cz)*det + ay*Power(det,2)))/
; 371  :           Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2) + 
; 372  :          (a*(Power(aa,2)*(az*(by*cx - bx*cy)*(-bc + 2*by*cy) - 
; 373  :                  ay*(bc + 2*by*cy)*(bz*cx - bx*cz) + 
; 374  :                  ax*(bc - 2*by*cy)*(-(bz*cy) + by*cz)) - 
; 375  :               ab*ac*Power(ay,2)*det + 
; 376  :               aa*(ab*ac*(-(az*by*cx) + 3*ay*bz*cx + az*bx*cy - ax*bz*cy - 
; 377  :                     3*ay*bx*cz + ax*by*cz) + Power(ay,2)*bc*det)))/
; 378  :           (Power(ab,2)*Power(ac,2) - 2*aa*ab*ac*bc + 
; 379  :             aa*(aa*Power(bc,2) + Power(det,2))) + 
; 380  :          aa*ArcTan(ab*ac - aa*bc,a*det) - Power(ay,2)*ArcTan(ab*ac - aa*bc,a*det)\
; 381  :     )/aaa;

	fld	QWORD PTR tv11387[ebp]
	fmul	QWORD PTR _az$[ebp]
	fst	QWORD PTR tv11606[ebp]
	fld	QWORD PTR _by$[ebp]
	fadd	ST(0), ST(0)
	fmul	QWORD PTR _cy$[ebp]
	fst	QWORD PTR tv11608[ebp]
	fld	ST(2)
	fmul	QWORD PTR __real@4008000000000000
	fstp	QWORD PTR tv11627[ebp]
	fld	QWORD PTR _bc$[ebp]
	fsub	ST(1), ST(0)
	fxch	ST(1)
	fmulp	ST(2), ST(0)
	fld	QWORD PTR tv11608[ebp]
	fadd	ST(0), ST(1)
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fmul	QWORD PTR tv11302[ebp]
	fsubp	ST(1), ST(0)
	fxch	ST(1)
	fsub	QWORD PTR tv11608[ebp]
	fmul	QWORD PTR _ax$[ebp]
	fmul	QWORD PTR tv11234[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR tv11312[ebp]
	fld	QWORD PTR tv11212[ebp]
	fmul	QWORD PTR tv11396[ebp]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv11627[ebp]
	fld	QWORD PTR _bz$[ebp]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR _cx$[ebp]
	fsub	QWORD PTR tv11220[ebp]
	fadd	QWORD PTR tv11224[ebp]
	fsub	QWORD PTR tv11431[ebp]
	fxch	ST(1)
	fmul	QWORD PTR _bx$[ebp]
	fmul	QWORD PTR _cz$[ebp]
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR tv11434[ebp]
	fmul	QWORD PTR tv11212[ebp]
	fld	QWORD PTR tv11396[ebp]
	fmul	QWORD PTR _bc$[ebp]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR _a$[ebp]
	fdiv	QWORD PTR tv13122[ebp]
	fld	QWORD PTR tv11256[ebp]
	fmul	QWORD PTR _ay$[ebp]
	fmul	QWORD PTR tv13165[ebp]
	fdiv	ST(0), ST(4)
	fld	QWORD PTR tv13305[ebp]
	fmul	QWORD PTR tv13185[ebp]
	fdiv	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fadd	QWORD PTR tv13048[ebp]
	fld	QWORD PTR tv13046[ebp]
	fld	QWORD PTR tv11396[ebp]
	fmul	ST(0), ST(1)
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	QWORD PTR _aaa$[ebp]
	fstp	QWORD PTR [edx+8]

; 382  :     e_info->hess[1][1][1][2] = ((a*az*
; 383  :             ((ab*ac - aa*bc)*(aa*(bz*cx - bx*cz) + 
; 384  :                  Power(ay,2)*(bz*cx - bx*cz) + 
; 385  :                  ay*(-(az*by*cx) + az*bx*cy - ax*bz*cy + ax*by*cz)) + 
; 386  :               aa*(2*ay*bc - ac*by - ab*cy)*det))/
; 387  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) - 
; 388  :          (2*aaa*((ab*ac - aa*bc)*(aa*(bz*cx - bx*cz) + 
; 389  :                  Power(ay,2)*(bz*cx - bx*cz) + 
; 390  :                  ay*(-(az*by*cx) + az*bx*cy - ax*bz*cy + ax*by*cz)) + 
; 391  :               aa*(2*ay*bc - ac*by - ab*cy)*det)*
; 392  :             ((ab*ac - aa*bc)*(-2*az*bc + ac*bz + ab*cz) - 
; 393  :               aa*(by*cx - bx*cy)*det + az*Power(det,2)))/
; 394  :           Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2) + 
; 395  :          (a*ay*(aa*(2*az*bc - ac*bz - ab*cz)*det + 
; 396  :               (-(ab*ac) + aa*bc)*(aa*(by*cx - bx*cy) - az*det)))/
; 397  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) + 
; 398  :          (a*(-(Power(aa,2)*(-2*ay*bc + ac*by + ab*cy)*(-(by*cx) + bx*cy)) + 
; 399  :               aa*(2*az*bc - ac*bz - ab*cz)*
; 400  :                (aa*(-(bz*cx) + bx*cz) + Power(ay,2)*(-(bz*cx) + bx*cz) + 
; 401  :                  ay*(az*by*cx - az*bx*cy + ax*bz*cy - ax*by*cz)) + 
; 402  :               aa*az*(2*ay*bc - ac*by - ab*cy)*det - 
; 403  :               Power(aa,2)*(bz*cy + by*cz)*det + 
; 404  :               (-(ab*ac) + aa*bc)*(aa*
; 405  :                   (ay*by*cx - az*bz*cx - ay*bx*cy + az*bx*cz) + ay*az*det)))/
; 406  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) - 
; 407  :          ay*az*ArcTan(ab*ac - aa*bc,a*det))/aaa;

	fld	QWORD PTR tv13165[ebp]
	fmul	QWORD PTR tv11471[ebp]
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR tv13375[ebp]
	fld	QWORD PTR tv13240[ebp]
	fmul	QWORD PTR tv11423[ebp]
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR tv13389[ebp]
	fld	QWORD PTR tv11232[ebp]
	fadd	QWORD PTR tv11231[ebp]
	fmul	QWORD PTR tv11312[ebp]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR tv13397[ebp]
	fld	QWORD PTR _by$[ebp]
	fmul	QWORD PTR _ay$[ebp]
	fst	QWORD PTR tv11680[ebp]
	fld	QWORD PTR tv11389[ebp]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR tv13401[ebp]
	fld	QWORD PTR _cx$[ebp]
	fmul	ST(1), ST(0)
	fmul	QWORD PTR tv11537[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv11226[ebp]
	fmul	QWORD PTR _cy$[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv11223[ebp]
	fmul	QWORD PTR _cz$[ebp]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fadd	QWORD PTR tv13401[ebp]
	fmul	QWORD PTR tv11497[ebp]
	fst	QWORD PTR tv13407[ebp]
	fxch	ST(1)
	fmul	QWORD PTR tv11389[ebp]
	fstp	QWORD PTR tv13421[ebp]
	fld	QWORD PTR tv11568[ebp]
	fmul	QWORD PTR tv11503[ebp]
	fld	QWORD PTR tv11571[ebp]
	fmul	QWORD PTR tv11296[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv11524[ebp]
	fmul	QWORD PTR tv11442[ebp]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fsub	QWORD PTR tv13397[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _a$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(4)
	fld	QWORD PTR tv13305[ebp]

; 408  :     e_info->hess[1][1][2][0] = ((a*az*
; 409  :             ((ab*ac - aa*bc)*(ax*(-(az*by*cx) + ay*bz*cx + az*bx*cy - 
; 410  :                     ay*bx*cz) + aa*(-(bz*cy) + by*cz) + 
; 411  :                  Power(ax,2)*(-(bz*cy) + by*cz)) + 
; 412  :               aa*(2*ax*bc - ac*bx - ab*cx)*det))/
; 413  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) + 
; 414  :          (a*ax*(aa*(2*az*bc - ac*bz - ab*cz)*det + 
; 415  :               (-(ab*ac) + aa*bc)*(aa*(by*cx - bx*cy) - az*det)))/
; 416  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) - 
; 417  :          (2*aaa*((ab*ac - aa*bc)*(-2*ax*bc + ac*bx + ab*cx) - 
; 418  :               aa*(bz*cy - by*cz)*det + ax*Power(det,2))*
; 419  :             (aa*(2*az*bc - ac*bz - ab*cz)*det + 
; 420  :               (-(ab*ac) + aa*bc)*(aa*(by*cx - bx*cy) - az*det)))/
; 421  :           Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2) + 
; 422  :          (a*(-(Power(aa,2)*(-2*az*bc + ac*bz + ab*cz)*(-(bz*cy) + by*cz)) + 
; 423  :               aa*ax*(2*az*bc - ac*bz - ab*cz)*det - 
; 424  :               Power(aa,2)*(bz*cx + bx*cz)*det - 
; 425  :               aa*(2*ax*bc - ac*bx - ab*cx)*(aa*(-(by*cx) + bx*cy) + az*det) + 
; 426  :               (-(ab*ac) + aa*bc)*(aa*
; 427  :                   (ax*by*cx - ax*bx*cy + az*bz*cy - az*by*cz) + ax*az*det)))/
; 428  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) - 
; 429  :          ax*az*ArcTan(ab*ac - aa*bc,a*det))/aaa;

	mov	ecx, DWORD PTR [ecx+8]
	fmul	QWORD PTR tv13218[ebp]
	fdiv	ST(0), ST(3)
	fsubr	QWORD PTR tv13375[ebp]
	fadd	QWORD PTR tv13389[ebp]
	faddp	ST(1), ST(0)
	fsub	QWORD PTR tv13421[ebp]
	fdiv	QWORD PTR _aaa$[ebp]
	fstp	QWORD PTR [edx+16]
	fld	QWORD PTR tv11480[ebp]
	fmul	QWORD PTR tv11312[ebp]
	fst	QWORD PTR tv11714[ebp]
	fld	QWORD PTR tv11296[ebp]
	fmul	ST(0), ST(6)
	fadd	QWORD PTR tv13230[ebp]
	fstp	QWORD PTR tv13448[ebp]
	fld	QWORD PTR tv11576[ebp]
	fmul	QWORD PTR tv11501[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv11234[ebp]
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	fsub	QWORD PTR tv13256[ebp]
	fld	QWORD PTR tv11252[ebp]
	fmul	QWORD PTR tv13448[ebp]
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR tv13266[ebp]
	fmulp	ST(1), ST(0)
	fdiv	ST(0), ST(3)
	fld	QWORD PTR tv13248[ebp]
	fadd	QWORD PTR tv13210[ebp]
	fld	QWORD PTR tv13080[ebp]
	fmul	QWORD PTR tv11268[ebp]
	fmul	QWORD PTR tv13240[ebp]
	fdiv	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fsub	QWORD PTR tv13280[ebp]
	fdiv	QWORD PTR _aaa$[ebp]
	fstp	QWORD PTR [ecx]

; 430  :     e_info->hess[1][1][2][1] = ((a*az*
; 431  :             ((ab*ac - aa*bc)*(aa*(bz*cx - bx*cz) + 
; 432  :                  Power(ay,2)*(bz*cx - bx*cz) + 
; 433  :                  ay*(-(az*by*cx) + az*bx*cy - ax*bz*cy + ax*by*cz)) + 
; 434  :               aa*(2*ay*bc - ac*by - ab*cy)*det))/
; 435  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) + 
; 436  :          (a*ay*(aa*(2*az*bc - ac*bz - ab*cz)*det + 
; 437  :               (-(ab*ac) + aa*bc)*(aa*(by*cx - bx*cy) - az*det)))/
; 438  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) - 
; 439  :          (2*aaa*((ab*ac - aa*bc)*(-2*ay*bc + ac*by + ab*cy) + 
; 440  :               aa*(bz*cx - bx*cz)*det + ay*Power(det,2))*
; 441  :             (aa*(2*az*bc - ac*bz - ab*cz)*det + 
; 442  :               (-(ab*ac) + aa*bc)*(aa*(by*cx - bx*cy) - az*det)))/
; 443  :           Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2) + 
; 444  :          (a*(-(Power(aa,2)*(-2*az*bc + ac*bz + ab*cz)*(bz*cx - bx*cz)) + 
; 445  :               aa*ay*(2*az*bc - ac*bz - ab*cz)*det - 
; 446  :               Power(aa,2)*(bz*cy + by*cz)*det + 
; 447  :               aa*(2*ay*bc - ac*by - ab*cy)*(aa*(by*cx - bx*cy) - az*det) + 
; 448  :               (-(ab*ac) + aa*bc)*(aa*
; 449  :                   (ay*by*cx - az*bz*cx - ay*bx*cy + az*bx*cz) + ay*az*det)))/
; 450  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) - 
; 451  :          ay*az*ArcTan(ab*ac - aa*bc,a*det))/aaa;

	fld	QWORD PTR tv11501[ebp]
	fmul	QWORD PTR tv11404[ebp]
	fmul	ST(0), ST(2)
	fld	QWORD PTR tv11714[ebp]
	fmul	QWORD PTR tv11302[ebp]
	fsubp	ST(1), ST(0)
	fsub	QWORD PTR tv13397[ebp]
	fld	QWORD PTR tv13232[ebp]
	fmul	QWORD PTR tv11444[ebp]
	faddp	ST(1), ST(0)
	fadd	QWORD PTR tv13407[ebp]
	fmul	QWORD PTR _a$[ebp]
	fdiv	ST(0), ST(3)
	fld	QWORD PTR tv13389[ebp]
	fadd	QWORD PTR tv13375[ebp]
	fld	QWORD PTR tv13185[ebp]
	fmul	QWORD PTR tv11268[ebp]
	fmul	QWORD PTR tv13240[ebp]
	fdiv	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fsub	QWORD PTR tv13421[ebp]
	fdiv	QWORD PTR _aaa$[ebp]
	fstp	QWORD PTR [ecx+8]

; 452  :     e_info->hess[1][1][2][2] = ((2*a*az*
; 453  :             (aa*(2*az*bc - ac*bz - ab*cz)*det + 
; 454  :               (-(ab*ac) + aa*bc)*(aa*(by*cx - bx*cy) - az*det)))/
; 455  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) - 
; 456  :          (2*aaa*((ab*ac - aa*bc)*(-2*az*bc + ac*bz + ab*cz) - 
; 457  :               aa*(by*cx - bx*cy)*det + az*Power(det,2))*
; 458  :             (aa*(2*az*bc - ac*bz - ab*cz)*det + 
; 459  :               (-(ab*ac) + aa*bc)*(aa*(by*cx - bx*cy) - az*det)))/
; 460  :           Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2) + 
; 461  :          (a*(Power(aa,2)*((ay*bz*cx - ax*bz*cy - ay*bx*cz + ax*by*cz)*
; 462  :                   (bc - 2*bz*cz) + az*(by*cx - bx*cy)*(bc + 2*bz*cz)) - 
; 463  :               ab*ac*Power(az,2)*det + 
; 464  :               aa*(ab*ac*(-3*az*by*cx + ay*bz*cx + 3*az*bx*cy - ax*bz*cy - 
; 465  :                     ay*bx*cz + ax*by*cz) + Power(az,2)*bc*det)))/
; 466  :           (Power(ab,2)*Power(ac,2) - 2*aa*ab*ac*bc + 
; 467  :             aa*(aa*Power(bc,2) + Power(det,2))) + 
; 468  :          aa*ArcTan(ab*ac - aa*bc,a*det) - Power(az,2)*ArcTan(ab*ac - aa*bc,a*det)\
; 469  :     )/aaa;

	fld	QWORD PTR _bz$[ebp]
	fadd	ST(0), ST(0)
	fmul	QWORD PTR _cz$[ebp]
	fstp	QWORD PTR tv11776[ebp]
	fld	QWORD PTR _az$[ebp]
	fld	ST(0)
	fmul	ST(0), ST(1)
	fst	QWORD PTR tv11786[ebp]
	fxch	ST(1)
	fmul	QWORD PTR __real@4008000000000000
	fst	QWORD PTR tv11791[ebp]
	fmul	QWORD PTR _by$[ebp]
	fmul	QWORD PTR _cx$[ebp]
	fld	QWORD PTR tv11218[ebp]
	fld	ST(0)
	fsubrp	ST(2), ST(0)
	fld	QWORD PTR tv11791[ebp]
	fmul	QWORD PTR _bx$[ebp]
	fmul	QWORD PTR _cy$[ebp]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fsub	QWORD PTR tv11431[ebp]
	fsub	QWORD PTR tv11227[ebp]
	fadd	QWORD PTR tv11434[ebp]
	fmul	QWORD PTR tv11212[ebp]
	fld	QWORD PTR _bc$[ebp]
	fmul	ST(3), ST(0)
	fxch	ST(3)
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(6)
	fxch	ST(1)
	fsub	QWORD PTR tv11431[ebp]
	fsub	QWORD PTR tv11227[ebp]
	fadd	QWORD PTR tv11434[ebp]
	fld	QWORD PTR tv11776[ebp]
	fsub	ST(3), ST(0)
	fxch	ST(1)
	fmulp	ST(3), ST(0)
	fadd	QWORD PTR _bc$[ebp]
	fmul	QWORD PTR tv11606[ebp]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR tv11312[ebp]
	fld	QWORD PTR tv11212[ebp]
	fmul	QWORD PTR tv11786[ebp]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR _a$[ebp]
	fdiv	QWORD PTR tv13122[ebp]
	fld	QWORD PTR tv11256[ebp]
	fmul	QWORD PTR _az$[ebp]
	fmul	QWORD PTR tv13240[ebp]
	fdiv	ST(0), ST(4)
	fld	QWORD PTR tv13218[ebp]
	fmul	QWORD PTR tv11268[ebp]
	fmul	QWORD PTR tv13240[ebp]
	fdiv	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fadd	QWORD PTR tv13048[ebp]
	fld	QWORD PTR tv13046[ebp]
	fmul	QWORD PTR tv11786[ebp]
	fsubp	ST(1), ST(0)
	fdiv	QWORD PTR _aaa$[ebp]
	fstp	QWORD PTR [ecx+16]

; 470  :     e_info->hess[1][2][0][0] = (-(((ab*ac - aa*bc)*
; 471  :                (ax*(-(az*by*cx) + ay*bz*cx + az*bx*cy - ay*bx*cz) + 
; 472  :                  aa*(-(bz*cy) + by*cz) + Power(ax,2)*(-(bz*cy) + by*cz)) + 
; 473  :               aa*(2*ax*bc - ac*bx - ab*cx)*det)*
; 474  :             (2*(ab*ac - aa*bc)*(ac*ax - aa*cx) + 2*aa*(az*cy - ay*cz)*det)) + 
; 475  :          ax*((ab*ac - aa*bc)*(az*cy - ay*cz) - (ac*ax - aa*cx)*det)*
; 476  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) + 
; 477  :          (ax*(ab*ac - aa*bc)*(az*cy - ay*cz) - 
; 478  :             aa*(-2*ax*bc + ac*bx + ab*cx)*(az*cy - ay*cz) + 
; 479  :             (ac*ax - aa*cx)*(ax*(-(az*by*cx) + ay*bz*cx + az*bx*cy - 
; 480  :                   ay*bx*cz) + aa*(-(bz*cy) + by*cz) + 
; 481  :                Power(ax,2)*(-(bz*cy) + by*cz)) - aa*(ay*cy + az*cz)*det)*
; 482  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)))/
; 483  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	fld	QWORD PTR _cy$[ebp]
	fmul	QWORD PTR _az$[ebp]
	fst	QWORD PTR tv11821[ebp]
	fld	QWORD PTR _cz$[ebp]
	fmul	QWORD PTR _ay$[ebp]
	fst	QWORD PTR tv11822[ebp]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR tv11823[ebp]
	fld	ST(4)
	fmul	QWORD PTR _cx$[ebp]
	fst	QWORD PTR tv11827[ebp]
	fld	QWORD PTR _ac$[ebp]
	fmul	QWORD PTR _ax$[ebp]
	fsubrp	ST(1), ST(0)
	fst	QWORD PTR tv11828[ebp]
	fld	QWORD PTR tv11214[ebp]
	fmul	ST(0), ST(2)
	fld	ST(1)
	fmul	ST(0), ST(5)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR tv13569[ebp]
	fld	QWORD PTR tv11214[ebp]
	fadd	ST(0), ST(0)
	fst	QWORD PTR tv11835[ebp]
	fld	ST(2)
	fmul	QWORD PTR tv11342[ebp]
	fmul	ST(0), ST(5)
	fxch	ST(1)
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR tv13579[ebp]
	mov	ecx, DWORD PTR [eax+8]
	fld	QWORD PTR tv11214[ebp]
	mov	edx, DWORD PTR [ecx]
	fmul	QWORD PTR _ax$[ebp]
	fst	QWORD PTR tv11844[ebp]
	fld	ST(6)
	fmul	QWORD PTR tv11271[ebp]
	fstp	QWORD PTR tv11846[ebp]
	fld	QWORD PTR _cz$[ebp]
	fmul	QWORD PTR _az$[ebp]
	fstp	QWORD PTR tv11851[ebp]
	fld	QWORD PTR _cy$[ebp]
	fmul	QWORD PTR _ay$[ebp]
	fstp	QWORD PTR tv11852[ebp]
	fmul	ST(0), ST(2)
	fld	QWORD PTR tv11846[ebp]
	fmulp	ST(3), ST(0)
	fsubrp	ST(2), ST(0)
	fmul	QWORD PTR tv11241[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv11852[ebp]
	fadd	QWORD PTR tv11851[ebp]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fld	QWORD PTR tv13569[ebp]
	fmul	QWORD PTR _ax$[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13052[ebp]
	fmul	QWORD PTR tv13579[ebp]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 484  :     e_info->hess[1][2][0][1] = (-(((ab*ac - aa*bc)*
; 485  :                (ax*(-(az*by*cx) + ay*bz*cx + az*bx*cy - ay*bx*cz) + 
; 486  :                  aa*(-(bz*cy) + by*cz) + Power(ax,2)*(-(bz*cy) + by*cz)) + 
; 487  :               aa*(2*ax*bc - ac*bx - ab*cx)*det)*
; 488  :             (2*(ab*ac - aa*bc)*(ac*ay - aa*cy) - 2*aa*(az*cx - ax*cz)*det)) + 
; 489  :          ax*((ab*ac - aa*bc)*(-(az*cx) + ax*cz) - (ac*ay - aa*cy)*det)*
; 490  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) + 
; 491  :          (-(aa*(-2*ax*bc + ac*bx + ab*cx)*(-(az*cx) + ax*cz)) + 
; 492  :             (ab*ac - aa*bc)*(-(ax*az*cx) + aa*cz + Power(ax,2)*cz) + 
; 493  :             (ac*ay - aa*cy)*(ax*(-(az*by*cx) + ay*bz*cx + az*bx*cy - 
; 494  :                   ay*bx*cz) + aa*(-(bz*cy) + by*cz) + 
; 495  :                Power(ax,2)*(-(bz*cy) + by*cz)) - aa*(ay*cx - 2*ax*cy)*det)*
; 496  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)))/
; 497  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	fld	QWORD PTR _cz$[ebp]
	fmul	QWORD PTR _ax$[ebp]
	fst	QWORD PTR tv11869[ebp]
	fld	QWORD PTR _cx$[ebp]
	fld	QWORD PTR _az$[ebp]
	fmul	ST(0), ST(1)
	fst	QWORD PTR tv11870[ebp]
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv11872[ebp]
	fld	ST(5)
	fmul	QWORD PTR _cy$[ebp]
	fst	QWORD PTR tv11876[ebp]
	fld	QWORD PTR _ac$[ebp]
	fmul	QWORD PTR _ay$[ebp]
	fsubrp	ST(1), ST(0)
	fst	QWORD PTR tv11877[ebp]
	fld	QWORD PTR tv11214[ebp]
	fmulp	ST(2), ST(0)
	fld	ST(0)
	fmul	ST(0), ST(5)
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv13606[ebp]
	fld	QWORD PTR tv11870[ebp]
	fsub	QWORD PTR tv11869[ebp]
	fst	QWORD PTR tv11885[ebp]
	fld	ST(1)
	fmul	QWORD PTR tv11835[ebp]
	fxch	ST(1)
	fmul	QWORD PTR tv11342[ebp]
	fmul	ST(0), ST(5)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR tv13616[ebp]
	fld	ST(5)
	fmul	QWORD PTR _cz$[ebp]
	fstp	QWORD PTR tv11894[ebp]
	fld	ST(1)
	fmul	QWORD PTR _ay$[ebp]
	fstp	QWORD PTR tv11907[ebp]
	fld	QWORD PTR tv11544[ebp]
	fmulp	ST(2), ST(0)
	fld	QWORD PTR tv11894[ebp]
	fsubrp	ST(2), ST(0)
	fld	QWORD PTR tv11238[ebp]
	fmul	QWORD PTR _cz$[ebp]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR tv11214[ebp]
	fld	QWORD PTR tv11872[ebp]
	fmul	QWORD PTR tv11846[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv11241[ebp]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv11245[ebp]
	fmul	QWORD PTR _cy$[ebp]
	fsubr	QWORD PTR tv11907[ebp]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fld	QWORD PTR tv13606[ebp]
	fmul	QWORD PTR _ax$[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13052[ebp]
	fmul	QWORD PTR tv13616[ebp]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [edx+8]

; 498  :     e_info->hess[1][2][0][2] = (-(((ab*ac - aa*bc)*
; 499  :                (ax*(-(az*by*cx) + ay*bz*cx + az*bx*cy - ay*bx*cz) + 
; 500  :                  aa*(-(bz*cy) + by*cz) + Power(ax,2)*(-(bz*cy) + by*cz)) + 
; 501  :               aa*(2*ax*bc - ac*bx - ab*cx)*det)*
; 502  :             (2*(ab*ac - aa*bc)*(ac*az - aa*cz) + 2*aa*(ay*cx - ax*cy)*det)) + 
; 503  :          ax*((ab*ac - aa*bc)*(ay*cx - ax*cy) - (ac*az - aa*cz)*det)*
; 504  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) + 
; 505  :          (-(aa*(-2*ax*bc + ac*bx + ab*cx)*(ay*cx - ax*cy)) + 
; 506  :             (-(ab*ac) + aa*bc)*(-(ax*ay*cx) + aa*cy + Power(ax,2)*cy) + 
; 507  :             (ac*az - aa*cz)*(ax*(-(az*by*cx) + ay*bz*cx + az*bx*cy - 
; 508  :                   ay*bx*cz) + aa*(-(bz*cy) + by*cz) + 
; 509  :                Power(ax,2)*(-(bz*cy) + by*cz)) - aa*(az*cx - 2*ax*cz)*det)*
; 510  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)))/
; 511  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	fld	QWORD PTR _cy$[ebp]
	fld	QWORD PTR _ax$[ebp]
	fmul	ST(0), ST(1)
	fst	QWORD PTR tv11921[ebp]
	fsubr	QWORD PTR tv11907[ebp]
	fst	QWORD PTR tv11922[ebp]
	fld	QWORD PTR _ac$[ebp]
	fmul	QWORD PTR _az$[ebp]
	fst	QWORD PTR tv11925[ebp]
	fsub	QWORD PTR tv11894[ebp]
	fst	QWORD PTR tv11926[ebp]
	fld	QWORD PTR tv11214[ebp]
	fmul	ST(0), ST(2)
	fxch	ST(1)
	fmul	ST(0), ST(5)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR tv13643[ebp]
	fld	QWORD PTR tv11342[ebp]
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv11926[ebp]
	fmul	QWORD PTR tv11835[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR tv13653[ebp]
	fld	QWORD PTR tv11464[ebp]
	fmul	QWORD PTR _cx$[ebp]
	fsubr	QWORD PTR tv11876[ebp]
	fld	QWORD PTR tv11238[ebp]
	fmulp	ST(3), ST(0)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR tv11497[ebp]
	fxch	ST(1)
	fmul	QWORD PTR tv11846[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv11241[ebp]
	fmul	QWORD PTR tv11926[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv11245[ebp]
	fmul	QWORD PTR _cz$[ebp]
	fsubr	QWORD PTR tv11870[ebp]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fld	QWORD PTR tv13643[ebp]
	fmul	QWORD PTR _ax$[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13052[ebp]
	fmul	QWORD PTR tv13653[ebp]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [edx+16]

; 512  :     e_info->hess[1][2][1][0] = (-(((ab*ac - aa*bc)*
; 513  :                (aa*(bz*cx - bx*cz) + Power(ay,2)*(bz*cx - bx*cz) + 
; 514  :                  ay*(-(az*by*cx) + az*bx*cy - ax*bz*cy + ax*by*cz)) + 
; 515  :               aa*(2*ay*bc - ac*by - ab*cy)*det)*
; 516  :             (2*(ab*ac - aa*bc)*(ac*ax - aa*cx) + 2*aa*(az*cy - ay*cz)*det)) + 
; 517  :          ay*((ab*ac - aa*bc)*(az*cy - ay*cz) - (ac*ax - aa*cx)*det)*
; 518  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) + 
; 519  :          (-(aa*(-2*ay*bc + ac*by + ab*cy)*(az*cy - ay*cz)) + 
; 520  :             (-(ab*ac) + aa*bc)*(-(ay*az*cy) + aa*cz + Power(ay,2)*cz) + 
; 521  :             (ac*ax - aa*cx)*(aa*(bz*cx - bx*cz) + 
; 522  :                Power(ay,2)*(bz*cx - bx*cz) + 
; 523  :                ay*(-(az*by*cx) + az*bx*cy - ax*bz*cy + ax*by*cz)) + 
; 524  :             aa*(2*ay*cx - ax*cy)*det)*(Power(ab*ac - aa*bc,2) + aa*Power(det,2)))/
; 525  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	mov	edx, DWORD PTR [ecx+4]
	fld	QWORD PTR tv11389[ebp]
	fmul	QWORD PTR _cy$[ebp]
	fsubr	QWORD PTR tv11894[ebp]
	fld	QWORD PTR tv11396[ebp]
	fmul	QWORD PTR _cz$[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR tv11497[ebp]
	fld	QWORD PTR tv11823[ebp]
	fmul	QWORD PTR tv11381[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv11828[ebp]
	fmul	QWORD PTR tv11438[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv11375[ebp]
	fmul	QWORD PTR _cx$[ebp]
	fsub	QWORD PTR tv11921[ebp]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fld	QWORD PTR tv13569[ebp]
	fmul	QWORD PTR _ay$[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13165[ebp]
	fmul	QWORD PTR tv13579[ebp]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 526  :     e_info->hess[1][2][1][1] = (-(((ab*ac - aa*bc)*
; 527  :                (aa*(bz*cx - bx*cz) + Power(ay,2)*(bz*cx - bx*cz) + 
; 528  :                  ay*(-(az*by*cx) + az*bx*cy - ax*bz*cy + ax*by*cz)) + 
; 529  :               aa*(2*ay*bc - ac*by - ab*cy)*det)*
; 530  :             (2*(ab*ac - aa*bc)*(ac*ay - aa*cy) - 2*aa*(az*cx - ax*cz)*det)) + 
; 531  :          ay*((ab*ac - aa*bc)*(-(az*cx) + ax*cz) - (ac*ay - aa*cy)*det)*
; 532  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) + 
; 533  :          (ay*(-(ab*ac) + aa*bc)*(az*cx - ax*cz) - 
; 534  :             aa*(-2*ay*bc + ac*by + ab*cy)*(-(az*cx) + ax*cz) + 
; 535  :             (ac*ay - aa*cy)*(aa*(bz*cx - bx*cz) + 
; 536  :                Power(ay,2)*(bz*cx - bx*cz) + 
; 537  :                ay*(-(az*by*cx) + az*bx*cy - ax*bz*cy + ax*by*cz)) - 
; 538  :             aa*(ax*cx + az*cz)*det)*(Power(ab*ac - aa*bc,2) + aa*Power(det,2)))/
; 539  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	fld	QWORD PTR _cx$[ebp]
	fmul	QWORD PTR _ax$[ebp]
	fst	QWORD PTR tv12009[ebp]
	fld	QWORD PTR tv11497[ebp]
	fld	QWORD PTR _ay$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR tv11885[ebp]
	fld	QWORD PTR tv11872[ebp]
	fmul	QWORD PTR tv11381[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv11877[ebp]
	fmul	QWORD PTR tv11438[ebp]
	faddp	ST(1), ST(0)
	fxch	ST(2)
	fadd	QWORD PTR tv11851[ebp]
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(4)
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13606[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13165[ebp]
	fmul	QWORD PTR tv13616[ebp]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [edx+8]

; 540  :     e_info->hess[1][2][1][2] = (-(((ab*ac - aa*bc)*
; 541  :                (aa*(bz*cx - bx*cz) + Power(ay,2)*(bz*cx - bx*cz) + 
; 542  :                  ay*(-(az*by*cx) + az*bx*cy - ax*bz*cy + ax*by*cz)) + 
; 543  :               aa*(2*ay*bc - ac*by - ab*cy)*det)*
; 544  :             (2*(ab*ac - aa*bc)*(ac*az - aa*cz) + 2*aa*(ay*cx - ax*cy)*det)) + 
; 545  :          ay*((ab*ac - aa*bc)*(ay*cx - ax*cy) - (ac*az - aa*cz)*det)*
; 546  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) + 
; 547  :          (-(aa*(-2*ay*bc + ac*by + ab*cy)*(ay*cx - ax*cy)) + 
; 548  :             (ab*ac - aa*bc)*(aa*cx + ay*(ay*cx - ax*cy)) + 
; 549  :             (-(ac*az) + aa*cz)*(aa*(-(bz*cx) + bx*cz) + 
; 550  :                Power(ay,2)*(-(bz*cx) + bx*cz) + 
; 551  :                ay*(az*by*cx - az*bx*cy + ax*bz*cy - ax*by*cz)) - 
; 552  :             aa*(az*cy - 2*ay*cz)*det)*(Power(ab*ac - aa*bc,2) + aa*Power(det,2)))/
; 553  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	fld	QWORD PTR tv11894[ebp]
	fsub	QWORD PTR tv11925[ebp]
	fst	QWORD PTR tv12035[ebp]
	fld	QWORD PTR tv11922[ebp]
	fld	ST(0)
	fld	QWORD PTR _ay$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR tv11827[ebp]
	fmul	QWORD PTR tv11214[ebp]
	fxch	ST(2)
	fmul	QWORD PTR tv11381[ebp]
	fsubp	ST(2), ST(0)
	fxch	ST(2)
	fmul	QWORD PTR tv11568[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv11375[ebp]
	fmul	QWORD PTR _cz$[ebp]
	fsubr	QWORD PTR tv11821[ebp]
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)

; 554  :     e_info->hess[1][2][2][0] = (az*
; 555  :           ((ab*ac - aa*bc)*(az*cy - ay*cz) - (ac*ax - aa*cx)*det)*
; 556  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) - 
; 557  :          (2*(ab*ac - aa*bc)*(ac*ax - aa*cx) + 2*aa*(az*cy - ay*cz)*det)*
; 558  :           (aa*(2*az*bc - ac*bz - ab*cz)*det + 
; 559  :             (-(ab*ac) + aa*bc)*(aa*(by*cx - bx*cy) - az*det)) + 
; 560  :          (Power(ab*ac - aa*bc,2) + aa*Power(det,2))*
; 561  :           (-(aa*(-2*az*bc + ac*bz + ab*cz)*(az*cy - ay*cz)) + 
; 562  :             (ab*ac - aa*bc)*(aa*cy + az*(az*cy - ay*cz)) + 
; 563  :             aa*(2*az*cx - ax*cz)*det + 
; 564  :             (ac*ax - aa*cx)*(aa*(-(by*cx) + bx*cy) + az*det)))/
; 565  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	mov	ecx, DWORD PTR [ecx+8]
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13643[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13165[ebp]
	fmul	QWORD PTR tv13653[ebp]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [edx+16]
	fld	QWORD PTR tv11480[ebp]
	fmul	ST(0), ST(4)
	fst	QWORD PTR tv12060[ebp]
	fld	QWORD PTR tv11823[ebp]
	fld	ST(0)
	fld	QWORD PTR _az$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR tv11876[ebp]
	fmul	QWORD PTR tv11214[ebp]
	fxch	ST(3)
	fmulp	ST(2), ST(0)
	fxch	ST(2)
	fsubrp	ST(1), ST(0)
	fld	QWORD PTR tv11476[ebp]
	fmul	QWORD PTR _cx$[ebp]
	fsub	QWORD PTR tv11869[ebp]
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv11828[ebp]
	fmul	QWORD PTR tv13448[ebp]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13569[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13240[ebp]
	fmul	QWORD PTR tv13579[ebp]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ecx]

; 566  :     e_info->hess[1][2][2][1] = (az*
; 567  :           ((ab*ac - aa*bc)*(-(az*cx) + ax*cz) - (ac*ay - aa*cy)*det)*
; 568  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) - 
; 569  :          (2*(ab*ac - aa*bc)*(ac*ay - aa*cy) - 2*aa*(az*cx - ax*cz)*det)*
; 570  :           (aa*(2*az*bc - ac*bz - ab*cz)*det + 
; 571  :             (-(ab*ac) + aa*bc)*(aa*(by*cx - bx*cy) - az*det)) + 
; 572  :          (Power(ab*ac - aa*bc,2) + aa*Power(det,2))*
; 573  :           (-(aa*(-2*az*bc + ac*bz + ab*cz)*(-(az*cx) + ax*cz)) + 
; 574  :             (-(ab*ac) + aa*bc)*(aa*cx + az*(az*cx - ax*cz)) + 
; 575  :             aa*(2*az*cy - ay*cz)*det + 
; 576  :             (ac*ay - aa*cy)*(aa*(-(by*cx) + bx*cy) + az*det)))/
; 577  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	fld	QWORD PTR tv11885[ebp]
	fld	QWORD PTR _az$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR tv11827[ebp]
	fmul	QWORD PTR tv11497[ebp]
	fld	QWORD PTR tv12060[ebp]
	fmul	QWORD PTR tv11872[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv11476[ebp]
	fmul	QWORD PTR _cy$[ebp]
	fsub	QWORD PTR tv11822[ebp]
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv11877[ebp]
	fmul	QWORD PTR tv13448[ebp]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13606[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13240[ebp]
	fmul	QWORD PTR tv13616[ebp]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ecx+8]

; 578  :     e_info->hess[1][2][2][2] = (az*
; 579  :           ((ab*ac - aa*bc)*(ay*cx - ax*cy) - (ac*az - aa*cz)*det)*
; 580  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) - 
; 581  :          (2*(ab*ac - aa*bc)*(ac*az - aa*cz) + 2*aa*(ay*cx - ax*cy)*det)*
; 582  :           (aa*(2*az*bc - ac*bz - ab*cz)*det + 
; 583  :             (-(ab*ac) + aa*bc)*(aa*(by*cx - bx*cy) - az*det)) + 
; 584  :          (Power(ab*ac - aa*bc,2) + aa*Power(det,2))*
; 585  :           (az*(ab*ac - aa*bc)*(ay*cx - ax*cy) - 
; 586  :             aa*(ay*cx - ax*cy)*(-2*az*bc + ac*bz + ab*cz) - 
; 587  :             aa*(ax*cx + ay*cy)*det + 
; 588  :             (-(ac*az) + aa*cz)*(aa*(by*cx - bx*cy) - az*det)))/
; 589  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	fld	QWORD PTR tv11214[ebp]
	fld	QWORD PTR _az$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv12111[ebp]
	fld	QWORD PTR tv11922[ebp]

; 590  :     e_info->hess[1][3][0][0] = (-((2*(ab*ac - aa*bc)*(ab*ax - aa*bx) - 
; 591  :               2*aa*(az*by - ay*bz)*det)*
; 592  :             ((ab*ac - aa*bc)*(ax*(-(az*by*cx) + ay*bz*cx + az*bx*cy - 
; 593  :                     ay*bx*cz) + aa*(-(bz*cy) + by*cz) + 
; 594  :                  Power(ax,2)*(-(bz*cy) + by*cz)) + 
; 595  :               aa*(2*ax*bc - ac*bx - ab*cx)*det)) + 
; 596  :          ax*((ab*ac - aa*bc)*(-(az*by) + ay*bz) - (ab*ax - aa*bx)*det)*
; 597  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) + 
; 598  :          (ax*(-(ab*ac) + aa*bc)*(az*by - ay*bz) - 
; 599  :             aa*(-(az*by) + ay*bz)*(-2*ax*bc + ac*bx + ab*cx) + 
; 600  :             (ab*ax - aa*bx)*(ax*(-(az*by*cx) + ay*bz*cx + az*bx*cy - 
; 601  :                   ay*bx*cz) + aa*(-(bz*cy) + by*cz) + 
; 602  :                Power(ax,2)*(-(bz*cy) + by*cz)) - aa*(ay*by + az*bz)*det)*
; 603  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)))/
; 604  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	mov	eax, DWORD PTR [eax+12]
	fmul	ST(1), ST(0)
	fmul	ST(0), ST(6)
	fmul	QWORD PTR tv11480[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv12009[ebp]
	fadd	QWORD PTR tv11852[ebp]
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv13232[ebp]
	fmul	QWORD PTR tv12035[ebp]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13643[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13240[ebp]
	fmul	QWORD PTR tv13653[ebp]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ecx+16]
	fld	QWORD PTR tv11217[ebp]
	fsub	QWORD PTR tv11219[ebp]
	mov	ecx, DWORD PTR [eax]
	fst	QWORD PTR tv12131[ebp]
	fld	ST(4)
	fmul	QWORD PTR _bx$[ebp]
	fst	QWORD PTR tv12135[ebp]
	fld	QWORD PTR _ab$[ebp]
	fld	QWORD PTR _ax$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv12136[ebp]
	fld	QWORD PTR tv11214[ebp]
	fmulp	ST(3), ST(0)
	fld	ST(0)
	fmul	ST(0), ST(5)
	fsubp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR tv13836[ebp]
	fld	QWORD PTR tv11219[ebp]
	fsub	QWORD PTR tv11217[ebp]
	fst	QWORD PTR tv12144[ebp]
	fld	ST(2)
	fmul	QWORD PTR tv11835[ebp]
	fxch	ST(1)
	fmul	QWORD PTR tv11342[ebp]
	fmul	ST(0), ST(5)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR tv13846[ebp]
	fld	QWORD PTR tv12131[ebp]
	fmul	ST(0), ST(6)
	fstp	QWORD PTR tv12155[ebp]
	fld	QWORD PTR tv11497[ebp]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR tv12144[ebp]
	fld	QWORD PTR tv12155[ebp]
	fmul	QWORD PTR tv11271[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv11241[ebp]
	fmulp	ST(3), ST(0)
	faddp	ST(2), ST(0)
	fld	QWORD PTR tv11680[ebp]
	fadd	QWORD PTR tv11537[ebp]
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(4)
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13836[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13052[ebp]
	fmul	QWORD PTR tv13846[ebp]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ecx]

; 605  :     e_info->hess[1][3][0][1] = (-((2*(ab*ac - aa*bc)*(ab*ay - aa*by) + 
; 606  :               2*aa*(az*bx - ax*bz)*det)*
; 607  :             ((ab*ac - aa*bc)*(ax*(-(az*by*cx) + ay*bz*cx + az*bx*cy - 
; 608  :                     ay*bx*cz) + aa*(-(bz*cy) + by*cz) + 
; 609  :                  Power(ax,2)*(-(bz*cy) + by*cz)) + 
; 610  :               aa*(2*ax*bc - ac*bx - ab*cx)*det)) + 
; 611  :          ax*((ab*ac - aa*bc)*(az*bx - ax*bz) - (ab*ay - aa*by)*det)*
; 612  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) + 
; 613  :          ((-(ab*ac) + aa*bc)*(-(ax*az*bx) + aa*bz + Power(ax,2)*bz) - 
; 614  :             aa*(az*bx - ax*bz)*(-2*ax*bc + ac*bx + ab*cx) + 
; 615  :             (ab*ay - aa*by)*(ax*(-(az*by*cx) + ay*bz*cx + az*bx*cy - 
; 616  :                   ay*bx*cz) + aa*(-(bz*cy) + by*cz) + 
; 617  :                Power(ax,2)*(-(bz*cy) + by*cz)) - aa*(ay*bx - 2*ax*by)*det)*
; 618  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)))/
; 619  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	fld	QWORD PTR tv11223[ebp]
	fsub	QWORD PTR tv11430[ebp]
	fst	QWORD PTR tv12176[ebp]
	fld	ST(4)
	fmul	QWORD PTR _by$[ebp]
	fst	QWORD PTR tv12180[ebp]
	fld	QWORD PTR _ab$[ebp]
	fmul	QWORD PTR _ay$[ebp]
	fsubrp	ST(1), ST(0)
	fst	QWORD PTR tv12181[ebp]
	fld	QWORD PTR tv11214[ebp]
	fmul	ST(0), ST(2)
	fld	ST(1)
	fmul	ST(0), ST(5)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR tv13873[ebp]
	fld	ST(1)
	fmul	QWORD PTR tv11342[ebp]
	fmul	ST(0), ST(4)
	fld	ST(1)
	fmul	QWORD PTR tv11835[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR tv13883[ebp]
	fld	ST(5)
	fld	QWORD PTR _bz$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv12196[ebp]
	fxch	ST(3)
	fmul	ST(0), ST(7)
	fstp	QWORD PTR tv12204[ebp]
	fld	QWORD PTR tv11544[ebp]
	fmul	QWORD PTR _bx$[ebp]
	fsubp	ST(3), ST(0)
	fmul	QWORD PTR tv11238[ebp]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR tv11497[ebp]
	fld	QWORD PTR tv12204[ebp]
	fmul	QWORD PTR tv11271[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv11241[ebp]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv11245[ebp]
	fmul	QWORD PTR _by$[ebp]
	fsubr	QWORD PTR tv11226[ebp]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fld	QWORD PTR tv13873[ebp]
	fmul	QWORD PTR _ax$[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13052[ebp]
	fmul	QWORD PTR tv13883[ebp]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ecx+8]

; 620  :     e_info->hess[1][3][0][2] = (-((2*(ab*ac - aa*bc)*(ab*az - aa*bz) - 
; 621  :               2*aa*(ay*bx - ax*by)*det)*
; 622  :             ((ab*ac - aa*bc)*(ax*(-(az*by*cx) + ay*bz*cx + az*bx*cy - 
; 623  :                     ay*bx*cz) + aa*(-(bz*cy) + by*cz) + 
; 624  :                  Power(ax,2)*(-(bz*cy) + by*cz)) + 
; 625  :               aa*(2*ax*bc - ac*bx - ab*cx)*det)) + 
; 626  :          ax*((ab*ac - aa*bc)*(-(ay*bx) + ax*by) - (ab*az - aa*bz)*det)*
; 627  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) + 
; 628  :          ((ab*ac - aa*bc)*(-(ax*ay*bx) + aa*by + Power(ax,2)*by) + 
; 629  :             aa*(ay*bx - ax*by)*(-2*ax*bc + ac*bx + ab*cx) + 
; 630  :             (-(ab*az) + aa*bz)*(ax*
; 631  :                 (az*by*cx - ay*bz*cx - az*bx*cy + ay*bx*cz) + 
; 632  :                aa*(bz*cy - by*cz) + Power(ax,2)*(bz*cy - by*cz)) - 
; 633  :             aa*(az*bx - 2*ax*bz)*det)*(Power(ab*ac - aa*bc,2) + aa*Power(det,2)))/
; 634  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	fld	QWORD PTR tv11433[ebp]
	fsub	QWORD PTR tv11226[ebp]
	fst	QWORD PTR tv12223[ebp]
	fld	QWORD PTR _ab$[ebp]
	fmul	QWORD PTR _az$[ebp]
	fst	QWORD PTR tv12226[ebp]
	fsub	QWORD PTR tv12196[ebp]
	fst	QWORD PTR tv12227[ebp]
	fld	QWORD PTR tv11214[ebp]
	fld	ST(0)
	fmulp	ST(3), ST(0)
	fld	ST(1)
	fmul	ST(0), ST(5)
	fsubp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR tv13910[ebp]
	fld	QWORD PTR tv11226[ebp]
	fsub	QWORD PTR tv11433[ebp]
	fst	QWORD PTR tv12235[ebp]
	fxch	ST(1)
	fmul	QWORD PTR tv11835[ebp]
	fld	ST(1)
	fmul	QWORD PTR tv11342[ebp]
	fmul	ST(0), ST(5)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR tv13920[ebp]
	fld	QWORD PTR tv12196[ebp]
	fsub	QWORD PTR tv12226[ebp]
	fstp	QWORD PTR tv12255[ebp]
	fld	QWORD PTR tv11464[ebp]
	fmul	QWORD PTR _bx$[ebp]
	fsubr	QWORD PTR tv12180[ebp]
	fld	QWORD PTR tv11238[ebp]
	fmul	QWORD PTR _by$[ebp]
	faddp	ST(1), ST(0)
	fmulp	ST(2), ST(0)
	fmul	ST(0), ST(5)
	fmul	QWORD PTR tv11271[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv12255[ebp]
	fmul	QWORD PTR tv11518[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv11245[ebp]
	fmul	QWORD PTR _bz$[ebp]
	fsubr	QWORD PTR tv11223[ebp]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fld	QWORD PTR tv13910[ebp]
	fmul	QWORD PTR _ax$[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13052[ebp]
	fmul	QWORD PTR tv13920[ebp]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ecx+16]

; 635  :     e_info->hess[1][3][1][0] = (-((2*(ab*ac - aa*bc)*(ab*ax - aa*bx) - 
; 636  :               2*aa*(az*by - ay*bz)*det)*
; 637  :             ((ab*ac - aa*bc)*(aa*(bz*cx - bx*cz) + 
; 638  :                  Power(ay,2)*(bz*cx - bx*cz) + 
; 639  :                  ay*(-(az*by*cx) + az*bx*cy - ax*bz*cy + ax*by*cz)) + 
; 640  :               aa*(2*ay*bc - ac*by - ab*cy)*det)) + 
; 641  :          ay*((ab*ac - aa*bc)*(-(az*by) + ay*bz) - (ab*ax - aa*bx)*det)*
; 642  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) + 
; 643  :          ((ab*ac - aa*bc)*(-(ay*az*by) + aa*bz + Power(ay,2)*bz) + 
; 644  :             aa*(az*by - ay*bz)*(-2*ay*bc + ac*by + ab*cy) + 
; 645  :             (ab*ax - aa*bx)*(aa*(bz*cx - bx*cz) + 
; 646  :                Power(ay,2)*(bz*cx - bx*cz) + 
; 647  :                ay*(-(az*by*cx) + az*bx*cy - ax*bz*cy + ax*by*cz)) + 
; 648  :             aa*(2*ay*bx - ax*by)*det)*(Power(ab*ac - aa*bc,2) + aa*Power(det,2)))/
; 649  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	fld	QWORD PTR tv11389[ebp]
	fmul	QWORD PTR _by$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	fsubr	QWORD PTR tv12196[ebp]
	fld	QWORD PTR tv11396[ebp]
	fmul	QWORD PTR _bz$[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR tv11214[ebp]
	fld	QWORD PTR tv12144[ebp]
	fmul	ST(0), ST(5)
	fmul	QWORD PTR tv11379[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv12136[ebp]
	fmul	QWORD PTR tv11438[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv11375[ebp]
	fmul	QWORD PTR _bx$[ebp]
	fsub	QWORD PTR tv11433[ebp]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fld	QWORD PTR tv13836[ebp]
	fmul	QWORD PTR _ay$[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13165[ebp]
	fmul	QWORD PTR tv13846[ebp]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ecx]

; 650  :     e_info->hess[1][3][1][1] = (-((2*(ab*ac - aa*bc)*(ab*ay - aa*by) + 
; 651  :               2*aa*(az*bx - ax*bz)*det)*
; 652  :             ((ab*ac - aa*bc)*(aa*(bz*cx - bx*cz) + 
; 653  :                  Power(ay,2)*(bz*cx - bx*cz) + 
; 654  :                  ay*(-(az*by*cx) + az*bx*cy - ax*bz*cy + ax*by*cz)) + 
; 655  :               aa*(2*ay*bc - ac*by - ab*cy)*det)) + 
; 656  :          ay*((ab*ac - aa*bc)*(az*bx - ax*bz) - (ab*ay - aa*by)*det)*
; 657  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) + 
; 658  :          (ay*(ab*ac - aa*bc)*(az*bx - ax*bz) - 
; 659  :             aa*(az*bx - ax*bz)*(-2*ay*bc + ac*by + ab*cy) + 
; 660  :             (ab*ay - aa*by)*(aa*(bz*cx - bx*cz) + 
; 661  :                Power(ay,2)*(bz*cx - bx*cz) + 
; 662  :                ay*(-(az*by*cx) + az*bx*cy - ax*bz*cy + ax*by*cz)) - 
; 663  :             aa*(ax*bx + az*bz)*det)*(Power(ab*ac - aa*bc,2) + aa*Power(det,2)))/
; 664  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	fld	QWORD PTR tv11214[ebp]
	fld	QWORD PTR _ay$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv12309[ebp]
	fmul	QWORD PTR tv12176[ebp]
	fld	QWORD PTR tv12204[ebp]
	fmul	QWORD PTR tv11379[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv12181[ebp]

; 665  :     e_info->hess[1][3][1][2] = (-((2*(ab*ac - aa*bc)*(ab*az - aa*bz) - 
; 666  :               2*aa*(ay*bx - ax*by)*det)*
; 667  :             ((ab*ac - aa*bc)*(aa*(bz*cx - bx*cz) + 
; 668  :                  Power(ay,2)*(bz*cx - bx*cz) + 
; 669  :                  ay*(-(az*by*cx) + az*bx*cy - ax*bz*cy + ax*by*cz)) + 
; 670  :               aa*(2*ay*bc - ac*by - ab*cy)*det)) + 
; 671  :          ay*((ab*ac - aa*bc)*(-(ay*bx) + ax*by) - (ab*az - aa*bz)*det)*
; 672  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) + 
; 673  :          ((-(ab*ac) + aa*bc)*(aa*bx + ay*(ay*bx - ax*by)) - 
; 674  :             aa*(-(ay*bx) + ax*by)*(-2*ay*bc + ac*by + ab*cy) - 
; 675  :             (ab*az - aa*bz)*(aa*(-(bz*cx) + bx*cz) + 
; 676  :                Power(ay,2)*(-(bz*cx) + bx*cz) + 
; 677  :                ay*(az*by*cx - az*bx*cy + ax*bz*cy - ax*by*cz)) - 
; 678  :             aa*(az*by - 2*ay*bz)*det)*(Power(ab*ac - aa*bc,2) + aa*Power(det,2)))/
; 679  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);
; 680  :     e_info->hess[1][3][2][0] = (az*
; 681  :           ((ab*ac - aa*bc)*(-(az*by) + ay*bz) - (ab*ax - aa*bx)*det)*
; 682  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) - 
; 683  :          (2*(ab*ac - aa*bc)*(ab*ax - aa*bx) - 2*aa*(az*by - ay*bz)*det)*
; 684  :           (aa*(2*az*bc - ac*bz - ab*cz)*det + 
; 685  :             (-(ab*ac) + aa*bc)*(aa*(by*cx - bx*cy) - az*det)) + 
; 686  :          (Power(ab*ac - aa*bc,2) + aa*Power(det,2))*
; 687  :           ((-(ab*ac) + aa*bc)*(aa*by + az*(az*by - ay*bz)) - 
; 688  :             aa*(-(az*by) + ay*bz)*(-2*az*bc + ac*bz + ab*cz) + 
; 689  :             aa*(2*az*bx - ax*bz)*det + 
; 690  :             (ab*ax - aa*bx)*(aa*(-(by*cx) + bx*cy) + az*det)))/
; 691  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	mov	eax, DWORD PTR [eax+8]
	fmul	QWORD PTR tv11438[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv11537[ebp]
	fadd	QWORD PTR tv11534[ebp]
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13873[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13165[ebp]
	fmul	QWORD PTR tv13883[ebp]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ecx+8]
	fld	QWORD PTR tv12223[ebp]
	fmul	ST(0), ST(4)
	fst	QWORD PTR tv12336[ebp]
	fld	QWORD PTR tv12235[ebp]
	fld	QWORD PTR _ay$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR tv12135[ebp]
	fmul	QWORD PTR tv11497[ebp]
	fld	QWORD PTR tv11379[ebp]
	fmulp	ST(3), ST(0)
	fsubrp	ST(2), ST(0)
	fld	QWORD PTR tv12227[ebp]
	fmul	QWORD PTR tv11568[ebp]
	fsubp	ST(2), ST(0)
	fld	QWORD PTR tv11375[ebp]
	fmul	QWORD PTR _bz$[ebp]
	fsubr	QWORD PTR tv11219[ebp]
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(4)
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13910[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13165[ebp]
	fmul	QWORD PTR tv13920[ebp]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ecx+16]
	fld	QWORD PTR tv12144[ebp]
	fld	QWORD PTR _az$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR tv12180[ebp]
	fmul	QWORD PTR tv11497[ebp]
	fld	QWORD PTR tv12155[ebp]
	fmul	QWORD PTR tv11480[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv11476[ebp]
	fmul	QWORD PTR _bx$[ebp]
	fsub	QWORD PTR tv11430[ebp]
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv12136[ebp]
	fmul	QWORD PTR tv13448[ebp]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13836[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13240[ebp]
	fmul	QWORD PTR tv13846[ebp]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax]

; 692  :     e_info->hess[1][3][2][1] = (az*
; 693  :           ((ab*ac - aa*bc)*(az*bx - ax*bz) - (ab*ay - aa*by)*det)*
; 694  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) - 
; 695  :          (2*(ab*ac - aa*bc)*(ab*ay - aa*by) + 2*aa*(az*bx - ax*bz)*det)*
; 696  :           (aa*(2*az*bc - ac*bz - ab*cz)*det + 
; 697  :             (-(ab*ac) + aa*bc)*(aa*(by*cx - bx*cy) - az*det)) + 
; 698  :          (Power(ab*ac - aa*bc,2) + aa*Power(det,2))*
; 699  :           ((ab*ac - aa*bc)*(aa*bx + az*(az*bx - ax*bz)) - 
; 700  :             aa*(az*bx - ax*bz)*(-2*az*bc + ac*bz + ab*cz) + 
; 701  :             aa*(2*az*by - ay*bz)*det + 
; 702  :             (ab*ay - aa*by)*(aa*(-(by*cx) + bx*cy) + az*det)))/
; 703  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);
; 704  :     e_info->hess[1][3][2][2] = (az*
; 705  :           ((ab*ac - aa*bc)*(-(ay*bx) + ax*by) - (ab*az - aa*bz)*det)*
; 706  :           (Power(ab*ac - aa*bc,2) + aa*Power(det,2)) - 
; 707  :          (2*(ab*ac - aa*bc)*(ab*az - aa*bz) - 2*aa*(ay*bx - ax*by)*det)*
; 708  :           (aa*(2*az*bc - ac*bz - ab*cz)*det + 
; 709  :             (-(ab*ac) + aa*bc)*(aa*(by*cx - bx*cy) - az*det)) + 
; 710  :          (Power(ab*ac - aa*bc,2) + aa*Power(det,2))*
; 711  :           (az*(-(ab*ac) + aa*bc)*(ay*bx - ax*by) - 
; 712  :             aa*(-(ay*bx) + ax*by)*(-2*az*bc + ac*bz + ab*cz) - 
; 713  :             aa*(ax*bx + ay*by)*det + 
; 714  :             (-(ab*az) + aa*bz)*(aa*(by*cx - bx*cy) - az*det)))/
; 715  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);
; 716  :     e_info->hess[2][2][0][0] = -((aa*
; 717  :            ((ab*ac - aa*bc)*(az*cy - ay*cz) - (ac*ax - aa*cx)*det)*
; 718  :            (2*(ab*ac - aa*bc)*(ac*ax - aa*cx) + 2*aa*(az*cy - ay*cz)*det))/
; 719  :          Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2));

	mov	edx, DWORD PTR [edi+8]
	fld	QWORD PTR tv12176[ebp]
	fld	QWORD PTR _az$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR tv12135[ebp]
	fmul	QWORD PTR tv11214[ebp]
	fld	QWORD PTR tv12204[ebp]
	fmul	QWORD PTR tv11480[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv11476[ebp]
	fmul	QWORD PTR _by$[ebp]
	fsub	QWORD PTR tv11217[ebp]
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv12181[ebp]
	fmul	QWORD PTR tv13448[ebp]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13873[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13240[ebp]
	fmul	QWORD PTR tv13883[ebp]
	fsubp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax+8]
	fld	QWORD PTR tv11497[ebp]
	fld	QWORD PTR _az$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR tv12235[ebp]
	fld	QWORD PTR tv11480[ebp]
	fmul	QWORD PTR tv12336[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv11680[ebp]
	fadd	QWORD PTR tv11534[ebp]
	fmul	ST(0), ST(6)
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv12255[ebp]
	fmul	QWORD PTR tv13232[ebp]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13910[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13240[ebp]
	fld	QWORD PTR tv13920[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(2)
	fsubrp	ST(1), ST(0)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR [eax+16]
	fld	QWORD PTR tv13569[ebp]
	fld	ST(0)
	mov	eax, DWORD PTR [edx+8]
	fmul	ST(0), ST(6)
	mov	ecx, DWORD PTR [eax]
	fmul	QWORD PTR tv13579[ebp]
	fdiv	ST(0), ST(3)
	fchs
	fstp	QWORD PTR [ecx]

; 720  :     e_info->hess[2][2][0][1] = (aa*
; 721  :          (-(((ab*ac - aa*bc)*(az*cy - ay*cz) - (ac*ax - aa*cx)*det)*
; 722  :               (2*(ab*ac - aa*bc)*(ac*ay - aa*cy) - 2*aa*(az*cx - ax*cz)*det)) + 
; 723  :            (-((ac*ax - aa*cx)*(-(az*cx) + ax*cz)) + 
; 724  :               (ac*ay - aa*cy)*(az*cy - ay*cz))*
; 725  :             (Power(ab*ac - aa*bc,2) + aa*Power(det,2))))/
; 726  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	fld	QWORD PTR tv11872[ebp]
	fmul	QWORD PTR tv11828[ebp]
	fst	QWORD PTR tv12444[ebp]
	fld	QWORD PTR tv11877[ebp]
	fmul	QWORD PTR tv11823[ebp]
	fsubrp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fld	QWORD PTR tv13616[ebp]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(6)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR [ecx+8]

; 727  :     e_info->hess[2][2][0][2] = (aa*
; 728  :          (-(((ab*ac - aa*bc)*(az*cy - ay*cz) - (ac*ax - aa*cx)*det)*
; 729  :               (2*(ab*ac - aa*bc)*(ac*az - aa*cz) + 2*aa*(ay*cx - ax*cy)*det)) + 
; 730  :            ((ac*ax - aa*cx)*(-(ay*cx) + ax*cy) + 
; 731  :               (ac*az - aa*cz)*(az*cy - ay*cz))*
; 732  :             (Power(ab*ac - aa*bc,2) + aa*Power(det,2))))/
; 733  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	fld	QWORD PTR tv11926[ebp]
	fmul	QWORD PTR tv11823[ebp]
	fst	QWORD PTR tv12462[ebp]
	fld	QWORD PTR tv11921[ebp]
	fsub	QWORD PTR tv11907[ebp]
	fmul	QWORD PTR tv11828[ebp]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fld	QWORD PTR tv13653[ebp]
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR [ecx+16]

; 734  :     e_info->hess[2][2][1][0] = (aa*
; 735  :          (-(((ab*ac - aa*bc)*(-(az*cx) + ax*cz) - (ac*ay - aa*cy)*det)*
; 736  :               (2*(ab*ac - aa*bc)*(ac*ax - aa*cx) + 2*aa*(az*cy - ay*cz)*det)) + 
; 737  :            ((ac*ax - aa*cx)*(-(az*cx) + ax*cz) + 
; 738  :               (ac*ay - aa*cy)*(-(az*cy) + ay*cz))*
; 739  :             (Power(ab*ac - aa*bc,2) + aa*Power(det,2))))/
; 740  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	fld	QWORD PTR tv11822[ebp]
	fsub	QWORD PTR tv11821[ebp]
	mov	ecx, DWORD PTR [eax+4]

; 741  :     e_info->hess[2][2][1][1] = -((aa*
; 742  :            ((ab*ac - aa*bc)*(-(az*cx) + ax*cz) - (ac*ay - aa*cy)*det)*
; 743  :            (2*(ab*ac - aa*bc)*(ac*ay - aa*cy) - 2*aa*(az*cx - ax*cz)*det))/
; 744  :          Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2));
; 745  :     e_info->hess[2][2][1][2] = (aa*
; 746  :          (-(((ab*ac - aa*bc)*(-(az*cx) + ax*cz) - (ac*ay - aa*cy)*det)*
; 747  :               (2*(ab*ac - aa*bc)*(ac*az - aa*cz) + 2*aa*(ay*cx - ax*cy)*det)) + 
; 748  :            (-((ac*ay - aa*cy)*(ay*cx - ax*cy)) + 
; 749  :               (ac*az - aa*cz)*(-(az*cx) + ax*cz))*
; 750  :             (Power(ab*ac - aa*bc,2) + aa*Power(det,2))))/
; 751  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);
; 752  :     e_info->hess[2][2][2][0] = (aa*
; 753  :          (-(((ab*ac - aa*bc)*(ay*cx - ax*cy) - (ac*az - aa*cz)*det)*
; 754  :               (2*(ab*ac - aa*bc)*(ac*ax - aa*cx) + 2*aa*(az*cy - ay*cz)*det)) + 
; 755  :            ((ac*ax - aa*cx)*(ay*cx - ax*cy) - (ac*az - aa*cz)*(az*cy - ay*cz))*
; 756  :             (Power(ab*ac - aa*bc,2) + aa*Power(det,2))))/
; 757  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	mov	eax, DWORD PTR [eax+8]
	fmul	QWORD PTR tv11877[ebp]
	fadd	QWORD PTR tv12444[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13606[ebp]
	fmul	QWORD PTR tv13579[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR [ecx]
	fld	QWORD PTR tv13606[ebp]
	fld	ST(0)
	fmul	ST(0), ST(6)
	fmul	QWORD PTR tv13616[ebp]
	fdiv	ST(0), ST(3)
	fchs
	fstp	QWORD PTR [ecx+8]
	fld	QWORD PTR tv11922[ebp]
	fmul	QWORD PTR tv11877[ebp]
	fst	QWORD PTR tv12502[ebp]
	fld	QWORD PTR tv11926[ebp]
	fmul	QWORD PTR tv11872[ebp]
	fsubrp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fld	QWORD PTR tv13653[ebp]
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR [ecx+16]
	fld	QWORD PTR tv11922[ebp]
	fmul	QWORD PTR tv11828[ebp]
	fsub	QWORD PTR tv12462[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13643[ebp]
	fmul	QWORD PTR tv13579[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR [eax]

; 758  :     e_info->hess[2][2][2][1] = (aa*
; 759  :          (-(((ab*ac - aa*bc)*(ay*cx - ax*cy) - (ac*az - aa*cz)*det)*
; 760  :               (2*(ab*ac - aa*bc)*(ac*ay - aa*cy) - 2*aa*(az*cx - ax*cz)*det)) + 
; 761  :            ((ac*ay - aa*cy)*(ay*cx - ax*cy) + (ac*az - aa*cz)*(az*cx - ax*cz))*
; 762  :             (Power(ab*ac - aa*bc,2) + aa*Power(det,2))))/
; 763  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	fld	QWORD PTR tv11926[ebp]
	fmul	QWORD PTR tv11885[ebp]
	fadd	QWORD PTR tv12502[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13643[ebp]
	fmul	QWORD PTR tv13616[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR [eax+8]

; 764  :     e_info->hess[2][2][2][2] = -((aa*
; 765  :            (2*(ab*ac - aa*bc)*(ac*az - aa*cz) + 2*aa*(ay*cx - ax*cy)*det)*
; 766  :            ((ab*ac - aa*bc)*(ay*cx - ax*cy) - (ac*az - aa*cz)*det))/
; 767  :          Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2));

	fld	QWORD PTR tv13653[ebp]
	fmul	ST(0), ST(5)
	fmul	QWORD PTR tv13643[ebp]
	fdiv	ST(0), ST(2)
	fchs
	fstp	QWORD PTR [eax+16]

; 768  :     e_info->hess[2][3][0][0] = (aa*
; 769  :          (-((2*(ab*ac - aa*bc)*(ab*ax - aa*bx) - 2*aa*(az*by - ay*bz)*det)*
; 770  :               ((ab*ac - aa*bc)*(az*cy - ay*cz) - (ac*ax - aa*cx)*det)) + 
; 771  :            ((az*by - ay*bz)*(ac*ax - aa*cx) + (ab*ax - aa*bx)*(az*cy - ay*cz) + 
; 772  :               (Power(ay,2) + Power(az,2))*det)*
; 773  :             (Power(ab*ac - aa*bc,2) + aa*Power(det,2))))/
; 774  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	fld	QWORD PTR tv12144[ebp]
	fmul	QWORD PTR tv11828[ebp]
	mov	eax, DWORD PTR [edx+12]
	fld	QWORD PTR tv12136[ebp]
	mov	ecx, DWORD PTR [eax]
	fmul	QWORD PTR tv11823[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv11786[ebp]
	fadd	QWORD PTR tv11396[ebp]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13846[ebp]
	fmul	QWORD PTR tv13569[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR [ecx]

; 775  :     e_info->hess[2][3][0][1] = (aa*
; 776  :          (-((2*(ab*ac - aa*bc)*(ab*ay - aa*by) + 2*aa*(az*bx - ax*bz)*det)*
; 777  :               ((ab*ac - aa*bc)*(az*cy - ay*cz) - (ac*ax - aa*cx)*det)) + 
; 778  :            (az*(ab*ac - aa*bc) - (az*bx - ax*bz)*(ac*ax - aa*cx) + 
; 779  :               (ab*ay - aa*by)*(az*cy - ay*cz) - ax*ay*det)*
; 780  :             (Power(ab*ac - aa*bc,2) + aa*Power(det,2))))/
; 781  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	fld	QWORD PTR tv11464[ebp]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR tv14265[ebp]
	fld	QWORD PTR tv12176[ebp]
	fmul	QWORD PTR tv11828[ebp]
	fsubr	QWORD PTR tv12111[ebp]
	fld	QWORD PTR tv12181[ebp]
	fmul	QWORD PTR tv11823[ebp]
	faddp	ST(1), ST(0)
	fsub	QWORD PTR tv14265[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13883[ebp]
	fmul	QWORD PTR tv13569[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR [ecx+8]

; 782  :     e_info->hess[2][3][0][2] = (aa*
; 783  :          (-((2*(ab*ac - aa*bc)*(ab*az - aa*bz) - 2*aa*(ay*bx - ax*by)*det)*
; 784  :               ((ab*ac - aa*bc)*(az*cy - ay*cz) - (ac*ax - aa*cx)*det)) + 
; 785  :            (-(ab*ac*ay) + aa*ay*bc + (ay*bx - ax*by)*(ac*ax - aa*cx) + 
; 786  :               (ab*az - aa*bz)*(az*cy - ay*cz) - ax*az*det)*
; 787  :             (Power(ab*ac - aa*bc,2) + aa*Power(det,2))))/
; 788  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	fld	QWORD PTR tv11404[ebp]
	fmul	QWORD PTR _bc$[ebp]
	fld	QWORD PTR tv11212[ebp]
	fmul	QWORD PTR _ay$[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv12235[ebp]
	fmul	QWORD PTR tv11828[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv12227[ebp]
	fmul	QWORD PTR tv11823[ebp]
	faddp	ST(1), ST(0)
	fsub	QWORD PTR tv13260[ebp]
	fmul	ST(0), ST(4)
	fld	ST(1)
	fmul	QWORD PTR tv13569[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR [ecx+16]

; 789  :     e_info->hess[2][3][1][0] = (aa*
; 790  :          (-((2*(ab*ac - aa*bc)*(ab*ax - aa*bx) - 2*aa*(az*by - ay*bz)*det)*
; 791  :               ((ab*ac - aa*bc)*(-(az*cx) + ax*cz) - (ac*ay - aa*cy)*det)) + 
; 792  :            (-(ab*ac*az) + aa*az*bc + (az*by - ay*bz)*(ac*ay - aa*cy) + 
; 793  :               (ab*ax - aa*bx)*(-(az*cx) + ax*cz) - ax*ay*det)*
; 794  :             (Power(ab*ac - aa*bc,2) + aa*Power(det,2))))/
; 795  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	fld	QWORD PTR tv11524[ebp]
	fmul	QWORD PTR _bc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	fld	QWORD PTR tv11212[ebp]
	fmul	QWORD PTR _az$[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv12144[ebp]
	fmul	QWORD PTR tv11877[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv12136[ebp]
	fmul	QWORD PTR tv11872[ebp]
	faddp	ST(1), ST(0)
	fsub	QWORD PTR tv14265[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13846[ebp]
	fmul	QWORD PTR tv13606[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR [ecx]

; 796  :     e_info->hess[2][3][1][1] = (aa*
; 797  :          (-((2*(ab*ac - aa*bc)*(ab*ay - aa*by) + 2*aa*(az*bx - ax*bz)*det)*
; 798  :               ((ab*ac - aa*bc)*(-(az*cx) + ax*cz) - (ac*ay - aa*cy)*det)) + 
; 799  :            (-((az*bx - ax*bz)*(ac*ay - aa*cy)) + 
; 800  :               (ab*ay - aa*by)*(-(az*cx) + ax*cz) + 
; 801  :               (Power(ax,2) + Power(az,2))*det)*
; 802  :             (Power(ab*ac - aa*bc,2) + aa*Power(det,2))))/
; 803  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	fld	QWORD PTR tv12181[ebp]
	fmul	QWORD PTR tv11872[ebp]
	fld	QWORD PTR tv12176[ebp]
	fmul	QWORD PTR tv11877[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv11238[ebp]
	fadd	QWORD PTR tv11786[ebp]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13883[ebp]
	fmul	QWORD PTR tv13606[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(5)

; 804  :     e_info->hess[2][3][1][2] = (aa*
; 805  :          (-((2*(ab*ac - aa*bc)*(ab*az - aa*bz) - 2*aa*(ay*bx - ax*by)*det)*
; 806  :               ((ab*ac - aa*bc)*(-(az*cx) + ax*cz) - (ac*ay - aa*cy)*det)) + 
; 807  :            (ax*(ab*ac - aa*bc) + (ay*bx - ax*by)*(ac*ay - aa*cy) + 
; 808  :               (ab*az - aa*bz)*(-(az*cx) + ax*cz) - ay*az*det)*
; 809  :             (Power(ab*ac - aa*bc,2) + aa*Power(det,2))))/
; 810  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);
; 811  :     e_info->hess[2][3][2][0] = (aa*
; 812  :          (-((2*(ab*ac - aa*bc)*(ab*ax - aa*bx) - 2*aa*(az*by - ay*bz)*det)*
; 813  :               ((ab*ac - aa*bc)*(ay*cx - ax*cy) - (ac*az - aa*cz)*det)) + 
; 814  :            (ay*(ab*ac - aa*bc) + (ab*ax - aa*bx)*(ay*cx - ax*cy) + 
; 815  :               (az*by - ay*bz)*(ac*az - aa*cz) - ax*az*det)*
; 816  :             (Power(ab*ac - aa*bc,2) + aa*Power(det,2))))/
; 817  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	mov	eax, DWORD PTR [eax+8]

; 818  :     e_info->hess[2][3][2][1] = (aa*
; 819  :          (-((2*(ab*ac - aa*bc)*(ab*ay - aa*by) + 2*aa*(az*bx - ax*bz)*det)*
; 820  :               ((ab*ac - aa*bc)*(ay*cx - ax*cy) - (ac*az - aa*cz)*det)) + 
; 821  :            (-(ab*ac*ax) + aa*ax*bc + (ab*ay - aa*by)*(ay*cx - ax*cy) - 
; 822  :               (az*bx - ax*bz)*(ac*az - aa*cz) - ay*az*det)*
; 823  :             (Power(ab*ac - aa*bc,2) + aa*Power(det,2))))/
; 824  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);
; 825  :     e_info->hess[2][3][2][2] = (aa*
; 826  :          (-((2*(ab*ac - aa*bc)*(ab*az - aa*bz) - 2*aa*(ay*bx - ax*by)*det)*
; 827  :               ((ab*ac - aa*bc)*(ay*cx - ax*cy) - (ac*az - aa*cz)*det)) + 
; 828  :            ((ab*az - aa*bz)*(ay*cx - ax*cy) + (ay*bx - ax*by)*(ac*az - aa*cz) + 
; 829  :               (Power(ax,2) + Power(ay,2))*det)*
; 830  :             (Power(ab*ac - aa*bc,2) + aa*Power(det,2))))/
; 831  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);
; 832  :     e_info->hess[3][3][0][0] = -((aa*
; 833  :            ((ab*ac - aa*bc)*(-(az*by) + ay*bz) - (ab*ax - aa*bx)*det)*
; 834  :            (2*(ab*ac - aa*bc)*(ab*ax - aa*bx) - 2*aa*(az*by - ay*bz)*det))/
; 835  :          Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2));

	mov	edx, DWORD PTR [edi+12]
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR [ecx+8]
	fld	QWORD PTR tv12235[ebp]
	fmul	QWORD PTR tv11877[ebp]
	fadd	QWORD PTR tv11844[ebp]
	fld	QWORD PTR tv12227[ebp]
	fmul	QWORD PTR tv11872[ebp]
	faddp	ST(1), ST(0)
	fsub	QWORD PTR tv13401[ebp]
	fmul	ST(0), ST(4)
	fld	ST(1)
	fmul	QWORD PTR tv13606[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR [ecx+16]
	fld	QWORD PTR tv12136[ebp]
	fmul	QWORD PTR tv11922[ebp]
	fadd	QWORD PTR tv12309[ebp]
	fld	QWORD PTR tv12144[ebp]
	fmul	QWORD PTR tv11926[ebp]
	faddp	ST(1), ST(0)
	fsub	QWORD PTR tv13260[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13846[ebp]
	fmul	QWORD PTR tv13643[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR [eax]
	fld	QWORD PTR tv11576[ebp]
	fmul	QWORD PTR _bc$[ebp]
	fld	QWORD PTR tv11212[ebp]
	fmul	QWORD PTR _ax$[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv12181[ebp]
	fmul	QWORD PTR tv11922[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv12176[ebp]
	fmul	QWORD PTR tv11926[ebp]
	fsubp	ST(1), ST(0)
	fsub	QWORD PTR tv13401[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv13883[ebp]
	fmul	QWORD PTR tv13643[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR [eax+8]
	fld	QWORD PTR tv12235[ebp]
	fmul	QWORD PTR tv11926[ebp]
	fld	QWORD PTR tv12227[ebp]
	fmul	QWORD PTR tv11922[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv11238[ebp]
	fadd	QWORD PTR tv11396[ebp]
	fmulp	ST(4), ST(0)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fmul	ST(0), ST(3)
	fld	ST(2)
	fmul	QWORD PTR tv13643[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax+16]
	fld	QWORD PTR tv13836[ebp]
	fld	ST(0)
	mov	eax, DWORD PTR [edx+12]
	fmul	ST(0), ST(5)
	mov	ecx, DWORD PTR [eax]
	fmul	QWORD PTR tv13846[ebp]
	fdiv	ST(0), ST(2)
	fchs
	fstp	QWORD PTR [ecx]

; 836  :     e_info->hess[3][3][0][1] = (aa*
; 837  :          (-(((ab*ac - aa*bc)*(-(az*by) + ay*bz) - (ab*ax - aa*bx)*det)*
; 838  :               (2*(ab*ac - aa*bc)*(ab*ay - aa*by) + 2*aa*(az*bx - ax*bz)*det)) + 
; 839  :            ((ab*ax - aa*bx)*(-(az*bx) + ax*bz) + 
; 840  :               (ab*ay - aa*by)*(-(az*by) + ay*bz))*
; 841  :             (Power(ab*ac - aa*bc,2) + aa*Power(det,2))))/
; 842  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	fld	QWORD PTR tv12181[ebp]
	fld	QWORD PTR tv12131[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv12739[ebp]
	fld	QWORD PTR tv11430[ebp]
	fsub	QWORD PTR tv11223[ebp]
	fmul	QWORD PTR tv12136[ebp]
	fadd	QWORD PTR tv12739[ebp]
	fmul	ST(0), ST(5)
	fld	QWORD PTR tv13883[ebp]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(6)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR [ecx+8]

; 843  :     e_info->hess[3][3][0][2] = (aa*
; 844  :          (-(((ab*ac - aa*bc)*(-(az*by) + ay*bz) - (ab*ax - aa*bx)*det)*
; 845  :               (2*(ab*ac - aa*bc)*(ab*az - aa*bz) - 2*aa*(ay*bx - ax*by)*det)) + 
; 846  :            (-((ab*ax - aa*bx)*(-(ay*bx) + ax*by)) + 
; 847  :               (ab*az - aa*bz)*(-(az*by) + ay*bz))*
; 848  :             (Power(ab*ac - aa*bc,2) + aa*Power(det,2))))/
; 849  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	fld	QWORD PTR tv12223[ebp]
	fmul	QWORD PTR tv12136[ebp]
	fst	QWORD PTR tv12757[ebp]
	fld	QWORD PTR tv12227[ebp]
	fmulp	ST(2), ST(0)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fld	ST(3)
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ecx+16]

; 850  :     e_info->hess[3][3][1][0] = (aa*
; 851  :          (-(((ab*ac - aa*bc)*(az*bx - ax*bz) - (ab*ay - aa*by)*det)*
; 852  :               (2*(ab*ac - aa*bc)*(ab*ax - aa*bx) - 2*aa*(az*by - ay*bz)*det)) + 
; 853  :            ((ab*ax - aa*bx)*(az*bx - ax*bz) - 
; 854  :               (ab*ay - aa*by)*(-(az*by) + ay*bz))*
; 855  :             (Power(ab*ac - aa*bc,2) + aa*Power(det,2))))/
; 856  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	fld	QWORD PTR tv12176[ebp]
	fmul	QWORD PTR tv12136[ebp]
	mov	ecx, DWORD PTR [eax+4]

; 857  :     e_info->hess[3][3][1][1] = -((aa*
; 858  :            ((ab*ac - aa*bc)*(az*bx - ax*bz) - (ab*ay - aa*by)*det)*
; 859  :            (2*(ab*ac - aa*bc)*(ab*ay - aa*by) + 2*aa*(az*bx - ax*bz)*det))/
; 860  :          Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2));
; 861  :     e_info->hess[3][3][1][2] = (aa*
; 862  :          (-(((ab*ac - aa*bc)*(az*bx - ax*bz) - (ab*ay - aa*by)*det)*
; 863  :               (2*(ab*ac - aa*bc)*(ab*az - aa*bz) - 2*aa*(ay*bx - ax*by)*det)) + 
; 864  :            ((ab*ay - aa*by)*(ay*bx - ax*by) + (ab*az - aa*bz)*(az*bx - ax*bz))*
; 865  :             (Power(ab*ac - aa*bc,2) + aa*Power(det,2))))/
; 866  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);
; 867  :     e_info->hess[3][3][2][0] = (aa*
; 868  :          (-(((ab*ac - aa*bc)*(-(ay*bx) + ax*by) - (ab*az - aa*bz)*det)*
; 869  :               (2*(ab*ac - aa*bc)*(ab*ax - aa*bx) - 2*aa*(az*by - ay*bz)*det)) + 
; 870  :            ((ab*ax - aa*bx)*(-(ay*bx) + ax*by) + 
; 871  :               (ab*az - aa*bz)*(az*by - ay*bz))*
; 872  :             (Power(ab*ac - aa*bc,2) + aa*Power(det,2))))/
; 873  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	mov	eax, DWORD PTR [eax+8]
	fsub	QWORD PTR tv12739[ebp]
	fmul	ST(0), ST(3)
	fld	QWORD PTR tv13873[ebp]
	fld	QWORD PTR tv13846[ebp]
	fmul	ST(0), ST(1)
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR [ecx]
	fld	ST(0)
	fmul	ST(0), ST(5)
	fmul	QWORD PTR tv13883[ebp]
	fdiv	ST(0), ST(2)
	fchs
	fstp	QWORD PTR [ecx+8]
	fld	QWORD PTR tv12227[ebp]
	fld	QWORD PTR tv12176[ebp]
	fmul	ST(0), ST(1)
	fst	QWORD PTR tv12794[ebp]
	fld	QWORD PTR tv12235[ebp]
	fmul	QWORD PTR tv12181[ebp]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fld	ST(4)
	fmulp	ST(3), ST(0)
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR [ecx+16]
	fmul	QWORD PTR tv12144[ebp]
	fadd	QWORD PTR tv12757[ebp]
	fmul	ST(0), ST(3)
	fld	QWORD PTR tv13910[ebp]
	fld	QWORD PTR tv13846[ebp]
	fmul	ST(0), ST(1)
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(5)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR [eax]

; 874  :     e_info->hess[3][3][2][1] = (aa*
; 875  :          (-(((ab*ac - aa*bc)*(-(ay*bx) + ax*by) - (ab*az - aa*bz)*det)*
; 876  :               (2*(ab*ac - aa*bc)*(ab*ay - aa*by) + 2*aa*(az*bx - ax*bz)*det)) + 
; 877  :            ((ab*ay - aa*by)*(-(ay*bx) + ax*by) - 
; 878  :               (ab*az - aa*bz)*(az*bx - ax*bz))*
; 879  :             (Power(ab*ac - aa*bc,2) + aa*Power(det,2))))/
; 880  :        Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2);

	fld	QWORD PTR tv12223[ebp]
	fmul	QWORD PTR tv12181[ebp]
	fsub	QWORD PTR tv12794[ebp]
	fmulp	ST(4), ST(0)
	fld	QWORD PTR tv13883[ebp]
	fmul	ST(0), ST(1)
	fsubp	ST(4), ST(0)
	fxch	ST(3)
	fmul	ST(0), ST(4)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax+8]

; 881  :     e_info->hess[3][3][2][2] = -((aa*
; 882  :            (2*(ab*ac - aa*bc)*(ab*az - aa*bz) - 2*aa*(ay*bx - ax*by)*det)*
; 883  :            ((ab*ac - aa*bc)*(-(ay*bx) + ax*by) - (ab*az - aa*bz)*det))/
; 884  :          Power(Power(ab*ac - aa*bc,2) + aa*Power(det,2),2));

	fxch	ST(1)
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fmulp	ST(1), ST(0)
	fdivrp	ST(1), ST(0)
	fchs
	fstp	QWORD PTR [eax+16]

; 885  : 
; 886  :   /* take care of some fudge factors, including orientation */
; 887  :   for ( i = 1 ; i < 4 ; i++ )

	fld	QWORD PTR __real@3fe0000000000000
	mov	edx, DWORD PTR _web+616
	mov	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN36@mean_int_h:

; 888  :     for ( j = 1 ; j <= i ; j++ )

	cmp	eax, 1
	jl	SHORT $LN35@mean_int_h
	lea	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR tv15550[ebp], ecx
	mov	DWORD PTR tv10723[ebp], eax
$LN79@mean_int_h:

; 889  :       for ( ii = 0 ; ii < SDIM ; ii++ )

	xor	ebx, ebx
	test	edx, edx
	jle	SHORT $LN32@mean_int_h
$LN82@mean_int_h:

; 890  :         for ( jj = 0 ; jj < SDIM ; jj++ )

	xor	esi, esi
	test	edx, edx
	jle	SHORT $LN29@mean_int_h
	mov	ecx, DWORD PTR tv15550[ebp]
	fild	DWORD PTR _sign$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+eax*4]
	fmul	ST(0), ST(1)
$LN27@mean_int_h:

; 891  :           e_info->hess[j][i][jj][ii] *= 0.5*sign;

	mov	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+ebx*8]
	lea	eax, DWORD PTR [eax+ebx*8]
	fmul	ST(0), ST(1)
	inc	esi
	add	ecx, 4
	fstp	QWORD PTR [eax]
	mov	edx, DWORD PTR _web+616
	cmp	esi, edx
	jl	SHORT $LN27@mean_int_h

; 890  :         for ( jj = 0 ; jj < SDIM ; jj++ )

	mov	eax, DWORD PTR _i$[ebp]
	fstp	ST(0)
$LN29@mean_int_h:

; 889  :       for ( ii = 0 ; ii < SDIM ; ii++ )

	inc	ebx
	cmp	ebx, edx
	jl	SHORT $LN82@mean_int_h
$LN32@mean_int_h:

; 888  :     for ( j = 1 ; j <= i ; j++ )

	add	DWORD PTR tv15550[ebp], 4
	dec	DWORD PTR tv10723[ebp]
	jne	SHORT $LN79@mean_int_h
$LN35@mean_int_h:

; 885  : 
; 886  :   /* take care of some fudge factors, including orientation */
; 887  :   for ( i = 1 ; i < 4 ; i++ )

	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, 4
	jl	SHORT $LN36@mean_int_h

; 892  : 
; 893  :   /* Fill in rest of Hessian by symmetry */
; 894  :   for ( i = 1 ; i < 4 ; i++ )

	mov	esi, 4
	lea	eax, DWORD PTR [edi+4]
	sub	esi, edi
	mov	DWORD PTR _i$[ebp], 1
	mov	DWORD PTR tv15721[ebp], eax
	mov	DWORD PTR tv15740[ebp], esi
$LN81@mean_int_h:

; 895  :     for ( j = i+1 ; j < 4 ; j++ )

	mov	ecx, DWORD PTR _i$[ebp]
	inc	ecx
	mov	DWORD PTR tv11060[ebp], ecx
	cmp	ecx, 4
	jge	SHORT $LN23@mean_int_h

; 892  : 
; 893  :   /* Fill in rest of Hessian by symmetry */
; 894  :   for ( i = 1 ; i < 4 ; i++ )

	lea	edi, DWORD PTR [esi+eax]
$LN80@mean_int_h:

; 896  :       for ( ii = 0 ; ii < SDIM ; ii++ )

	xor	ebx, ebx
	test	edx, edx
	jle	SHORT $LN20@mean_int_h
$LN83@mean_int_h:

; 897  :         for ( jj = 0 ; jj < SDIM ; jj++ )

	xor	esi, esi
	test	edx, edx
	jle	SHORT $LN17@mean_int_h
	mov	ecx, DWORD PTR tv11364[ebp]
	mov	edx, DWORD PTR [edi+ecx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edi+edx]
	mov	eax, DWORD PTR [eax+ebx*4]
$LN15@mean_int_h:

; 898  :           e_info->hess[j][i][jj][ii] = e_info->hess[i][j][ii][jj];

	mov	edx, DWORD PTR [ecx]
	fld	QWORD PTR [eax]
	fstp	QWORD PTR [edx+ebx*8]
	mov	edx, DWORD PTR _web+616
	inc	esi
	add	eax, 8
	add	ecx, 4
	cmp	esi, edx
	jl	SHORT $LN15@mean_int_h

; 897  :         for ( jj = 0 ; jj < SDIM ; jj++ )

	mov	eax, DWORD PTR tv15721[ebp]
$LN17@mean_int_h:

; 896  :       for ( ii = 0 ; ii < SDIM ; ii++ )

	inc	ebx
	cmp	ebx, edx
	jl	SHORT $LN83@mean_int_h
$LN20@mean_int_h:

; 895  :     for ( j = i+1 ; j < 4 ; j++ )

	add	edi, 4
	cmp	edi, 16					; 00000010H
	jl	SHORT $LN80@mean_int_h
	mov	esi, DWORD PTR tv15740[ebp]
	mov	ecx, DWORD PTR tv11060[ebp]
$LN23@mean_int_h:

; 892  : 
; 893  :   /* Fill in rest of Hessian by symmetry */
; 894  :   for ( i = 1 ; i < 4 ; i++ )

	add	eax, 4
	mov	DWORD PTR _i$[ebp], ecx
	mov	DWORD PTR tv15721[ebp], eax
	cmp	ecx, 4
	jl	SHORT $LN81@mean_int_h

; 899  : 
; 900  :   for ( i = 1 ; i < 4 ; i++ )

	mov	esi, 1
	mov	DWORD PTR _i$[ebp], esi
$LN12@mean_int_h:

; 901  :     for ( j = 1 ; j < 4 ; j++ )

	mov	edi, 4
	mov	DWORD PTR tv15892[ebp], edi
$LN9@mean_int_h:

; 902  :       for ( ii = 0 ; ii < SDIM ; ii++ )

	xor	ebx, ebx
	test	edx, edx
	jle	SHORT $LN8@mean_int_h
$LN84@mean_int_h:

; 903  :         for ( jj = 0 ; jj < SDIM ; jj++ )

	mov	DWORD PTR _jj$[ebp], 0
	test	edx, edx
	jle	SHORT $LN5@mean_int_h
	mov	edx, DWORD PTR tv11364[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR [ecx+edi]
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	esi, DWORD PTR [ecx+ebx*4]
	mov	ecx, DWORD PTR [edx+edi]
	mov	eax, DWORD PTR [eax+ebx*4]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+ebx*4]
	mov	edi, DWORD PTR [edx+ebx*4]
	sub	esi, eax
	sub	ecx, eax
	sub	edi, eax
$LN78@mean_int_h:

; 904  :         { e_info->hess[0][0][ii][jj] += e_info->hess[i][j][ii][jj];

	fld	QWORD PTR [esi+eax]
	inc	DWORD PTR _jj$[ebp]
	fadd	QWORD PTR [ecx+eax]
	add	eax, 8
	fstp	QWORD PTR [esi+eax-8]

; 905  :           e_info->hess[0][j][ii][jj] -= e_info->hess[i][j][ii][jj];

	fld	QWORD PTR [eax-8]
	fsub	QWORD PTR [ecx+eax-8]
	fstp	QWORD PTR [eax-8]

; 906  :           e_info->hess[i][0][ii][jj] -= e_info->hess[i][j][ii][jj];

	fld	QWORD PTR [edi+eax-8]
	fsub	QWORD PTR [ecx+eax-8]
	fstp	QWORD PTR [edi+eax-8]
	mov	edx, DWORD PTR _web+616
	cmp	DWORD PTR _jj$[ebp], edx
	jl	SHORT $LN78@mean_int_h

; 903  :         for ( jj = 0 ; jj < SDIM ; jj++ )

	mov	edi, DWORD PTR tv15892[ebp]
	mov	esi, DWORD PTR _i$[ebp]
$LN5@mean_int_h:

; 902  :       for ( ii = 0 ; ii < SDIM ; ii++ )

	inc	ebx
	cmp	ebx, edx
	jl	SHORT $LN84@mean_int_h
$LN8@mean_int_h:

; 901  :     for ( j = 1 ; j < 4 ; j++ )

	add	edi, 4
	mov	DWORD PTR tv15892[ebp], edi
	cmp	edi, 16					; 00000010H
	jl	SHORT $LN9@mean_int_h

; 899  : 
; 900  :   for ( i = 1 ; i < 4 ; i++ )

	inc	esi
	mov	DWORD PTR _i$[ebp], esi
	cmp	esi, 4
	jl	$LN12@mean_int_h

; 907  :         }
; 908  :   
; 909  :   return sign*theta*len/2;

	fild	DWORD PTR _sign$[ebp]
	pop	esi
	pop	ebx
	pop	edi
	fmul	QWORD PTR _theta$[ebp]
	fmul	QWORD PTR _len$[ebp]
	fmulp	ST(1), ST(0)

; 910  : 
; 911  : } // end mean_int_hessian()

	mov	esp, ebp
	pop	ebp
	ret	0
_mean_int_hessian ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DJ@OCBFHOPK@mean_curvature_integral_a?5method@ ; `string'
PUBLIC	??_C@_0DG@BGPKDEMN@mean_curvature_integral_a?5method@ ; `string'
PUBLIC	_mean_int_a_init
;	COMDAT ??_C@_0DJ@OCBFHOPK@mean_curvature_integral_a?5method@
CONST	SEGMENT
??_C@_0DJ@OCBFHOPK@mean_curvature_integral_a?5method@ DB 'mean_curvature_'
	DB	'integral_a method only for LINEAR model.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@BGPKDEMN@mean_curvature_integral_a?5method@
CONST	SEGMENT
??_C@_0DG@BGPKDEMN@mean_curvature_integral_a?5method@ DB 'mean_curvature_'
	DB	'integral_a method only for 2D facets.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _mean_int_a_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_mean_int_a_init PROC					; COMDAT

; 939  :   if ( web.dimension != 2 )

	cmp	DWORD PTR _web+620, 2
	je	SHORT $LN2@mean_int_a

; 940  :      kb_error(4594,"mean_curvature_integral_a method only for 2D facets.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DG@BGPKDEMN@mean_curvature_integral_a?5method@
	push	4594					; 000011f2H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN2@mean_int_a:

; 941  : 
; 942  :   if ( web.modeltype != LINEAR )

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN1@mean_int_a

; 943  :      kb_error(4595,"mean_curvature_integral_a method only for LINEAR model.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DJ@OCBFHOPK@mean_curvature_integral_a?5method@
	push	4595					; 000011f3H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@mean_int_a:

; 944  : 
; 945  : } // end mean_int_a_init()

	ret	0
_mean_int_a_init ENDP
_TEXT	ENDS
PUBLIC	__real@4010000000000000
PUBLIC	__real@bfe0000000000000
PUBLIC	_mean_int_a_all
;	COMDAT __real@4010000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@bfe0000000000000
CONST	SEGMENT
__real@bfe0000000000000 DQ 0bfe0000000000000r	; -0.5
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\meanint.c
CONST	ENDS
;	COMDAT _mean_int_a_all
_TEXT	SEGMENT
tv8372 = -768						; size = 8
tv8359 = -760						; size = 8
tv6868 = -752						; size = 8
tv6881 = -744						; size = 8
_value$ = -736						; size = 8
tv6814 = -728						; size = 8
tv6708 = -720						; size = 8
tv6886 = -712						; size = 8
tv7220 = -704						; size = 8
tv6815 = -704						; size = 8
tv7305 = -696						; size = 8
tv6832 = -696						; size = 8
tv8320 = -688						; size = 8
tv7812 = -688						; size = 8
tv9100 = -680						; size = 8
tv8346 = -680						; size = 8
tv7180 = -672						; size = 8
tv6795 = -672						; size = 8
tv6846 = -664						; size = 8
tv6811 = -656						; size = 8
tv6865 = -648						; size = 8
tv7023 = -640						; size = 8
tv6714 = -640						; size = 8
tv6883 = -632						; size = 8
tv6992 = -624						; size = 8
tv6746 = -624						; size = 8
tv8448 = -616						; size = 8
tv6779 = -616						; size = 8
tv6867 = -608						; size = 8
tv7227 = -600						; size = 8
tv6831 = -600						; size = 8
tv7698 = -592						; size = 8
tv7482 = -592						; size = 8
tv6869 = -592						; size = 8
tv6750 = -584						; size = 8
tv7681 = -576						; size = 8
tv7451 = -576						; size = 8
tv6850 = -576						; size = 8
tv6791 = -568						; size = 8
tv7815 = -560						; size = 8
tv6864 = -560						; size = 8
tv6720 = -552						; size = 8
tv8966 = -544						; size = 8
tv6844 = -544						; size = 8
tv7250 = -536						; size = 8
tv6826 = -536						; size = 8
tv6772 = -528						; size = 8
tv7164 = -520						; size = 8
tv6780 = -520						; size = 8
tv7411 = -512						; size = 8
tv6771 = -512						; size = 8
tv7091 = -504						; size = 8
tv6758 = -504						; size = 8
tv7424 = -496						; size = 8
tv6790 = -496						; size = 8
tv7292 = -488						; size = 8
tv6827 = -488						; size = 8
tv6828 = -480						; size = 8
tv7423 = -472						; size = 8
tv6849 = -472						; size = 8
tv7163 = -464						; size = 8
tv6794 = -464						; size = 8
tv6940 = -456						; size = 8
tv6727 = -456						; size = 8
_ax$ = -448						; size = 8
tv8878 = -440						; size = 8
tv7853 = -440						; size = 8
tv7571 = -440						; size = 8
tv6887 = -440						; size = 8
tv9113 = -432						; size = 8
tv8333 = -432						; size = 8
tv7870 = -432						; size = 8
tv7780 = -432						; size = 8
tv8949 = -424						; size = 8
tv6830 = -424						; size = 8
tv6702 = -424						; size = 8
tv7822 = -416						; size = 8
tv6718 = -416						; size = 8
tv7471 = -408						; size = 8
tv6728 = -408						; size = 8
tv7430 = -400						; size = 8
tv6808 = -400						; size = 8
tv6870 = -392						; size = 8
tv7752 = -384						; size = 8
tv6843 = -384						; size = 8
tv7151 = -376						; size = 8
tv7121 = -376						; size = 8
tv6713 = -376						; size = 8
tv6983 = -368						; size = 8
tv6939 = -368						; size = 8
tv6724 = -368						; size = 8
tv7453 = -360						; size = 8
tv6789 = -360						; size = 8
tv9015 = -352						; size = 8
tv8891 = -352						; size = 8
tv8307 = -352						; size = 8
tv7683 = -352						; size = 8
tv6715 = -344						; size = 8
tv7810 = -336						; size = 8
tv6880 = -336						; size = 8
tv7759 = -328						; size = 8
tv7544 = -328						; size = 8
tv6863 = -328						; size = 8
tv6734 = -320						; size = 8
tv7448 = -312						; size = 8
tv7288 = -312						; size = 8
tv6809 = -312						; size = 8
tv6979 = -304						; size = 8
tv6796 = -296						; size = 8
tv6747 = -288						; size = 8
tv8427 = -280						; size = 8
tv7185 = -280						; size = 8
tv6931 = -280						; size = 8
tv8388 = -272						; size = 8
tv7217 = -272						; size = 8
tv6725 = -272						; size = 8
tv6987 = -264						; size = 8
tv6991 = -256						; size = 8
tv6773 = -248						; size = 8
tv6721 = -240						; size = 8
tv7484 = -232						; size = 8
tv6934 = -232						; size = 8
tv6751 = -224						; size = 8
tv7459 = -216						; size = 8
tv7159 = -216						; size = 8
tv6754 = -216						; size = 8
tv6833 = -208						; size = 8
tv6938 = -200						; size = 8
tv7417 = -192						; size = 8
tv7187 = -192						; size = 8
tv6755 = -192						; size = 8
tv7757 = -184						; size = 8
tv7687 = -184						; size = 8
tv6793 = -184						; size = 8
tv6701 = -184						; size = 8
_by$ = -176						; size = 8
tv7278 = -168						; size = 8
tv6981 = -168						; size = 8
tv7409 = -160						; size = 8
tv6993 = -160						; size = 8
tv7492 = -152						; size = 8
tv7002 = -152						; size = 8
tv6757 = -152						; size = 8
tv7486 = -144						; size = 8
tv7153 = -144						; size = 8
tv6745 = -144						; size = 8
tv7766 = -136						; size = 8
tv6769 = -136						; size = 8
_cy$ = -128						; size = 8
_bz$ = -120						; size = 8
_cx$ = -112						; size = 8
_cz$ = -104						; size = 8
_bx$ = -96						; size = 8
tv7754 = -88						; size = 8
tv6816 = -88						; size = 8
tv7027 = -80						; size = 8
tv6777 = -80						; size = 8
tv7783 = -72						; size = 8
tv7016 = -72						; size = 8
tv6767 = -72						; size = 8
tv6851 = -64						; size = 8
_ac$ = -64						; size = 8
tv7225 = -56						; size = 8
tv6941 = -56						; size = 8
tv6704 = -56						; size = 8
tv7179 = -48						; size = 8
_bc$ = -48						; size = 8
_ay$ = -40						; size = 8
tv7022 = -32						; size = 8
tv6776 = -32						; size = 8
tv6888 = -24						; size = 8
_ab$ = -24						; size = 8
_az$ = -16						; size = 8
tv6914 = -12						; size = 4
tv7790 = -8						; size = 8
tv7504 = -8						; size = 8
tv7024 = -8						; size = 8
tv6768 = -8						; size = 8
tv9984 = 8						; size = 4
_j$ = 8							; size = 4
_i$ = 8							; size = 4
_sign$ = 8						; size = 4
_e_info$ = 8						; size = 4
tv9947 = 12						; size = 4
tv9670 = 12						; size = 4
tv8100 = 12						; size = 4
_mode$ = 12						; size = 4
_mean_int_a_all PROC					; COMDAT

; 957  : { REAL vol;

	push	ebp
	mov	ebp, esp

; 958  :   int i,j,ii,jj;
; 959  :   int sign = inverted(get_fe_facet(get_edge_fe(e_info->id))) ? 1 : -1;

	mov	edx, DWORD PTR _web+124
	sub	esp, 768				; 00000300H
	push	ebx
	push	esi
	mov	esi, DWORD PTR _e_info$[ebp]
	mov	eax, DWORD PTR [esi]
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	test	ecx, ecx
	je	SHORT $LN53@mean_int_a@2
$LN54@mean_int_a@2:
	mov	ecx, DWORD PTR [ecx+28]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN53@mean_int_a@2
	xor	ecx, 134217728				; 08000000H
$LN53@mean_int_a@2:
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN58@mean_int_a@2
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN57@mean_int_a@2
$LN58@mean_int_a@2:
	mov	edx, DWORD PTR _web+460
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+24]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN57@mean_int_a@2
	xor	eax, 134217728				; 08000000H
$LN57@mean_int_a@2:

; 960  :   REAL ax,ay,az,bx,by,bz,cx,cy,cz;
; 961  :   REAL aa,ab,ac,bc,det;
; 962  :   REAL value;
; 963  : 
; 964  :   /* same value and gradient calculation as mean_int_gradient() */
; 965  :   mat_tsquare(e_info->sides[0],e_info->ss,3,SDIM); /* side products */

	mov	ecx, DWORD PTR _web+616
	mov	edx, DWORD PTR [esi+1280]
	and	eax, 134217728				; 08000000H
	neg	eax
	sbb	eax, eax
	and	eax, 2
	push	ecx
	dec	eax
	mov	DWORD PTR _sign$[ebp], eax
	mov	eax, DWORD PTR [esi+1276]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	edx
	push	ecx
	call	_mat_tsquare

; 966  :   vol = triple_prod(e_info->sides[0][0],e_info->sides[0][1],e_info->sides[0][2]);

	mov	edx, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	push	ecx
	push	edx
	push	eax
	call	_triple_prod

; 967  :  /* if ( vol == 0.0 )  return 0.0; */
; 968  :   
; 969  : 
; 970  :   /* Now Hessian, as ground out by Mathematica, in meanint.m */
; 971  :   ax = e_info->sides[0][0][0];

	mov	ecx, DWORD PTR [esi+1276]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax]
	fld	QWORD PTR [ecx]

; 972  :   ay = e_info->sides[0][0][1];
; 973  :   az = e_info->sides[0][0][2];
; 974  :   bx = e_info->sides[0][1][0];
; 975  :   by = e_info->sides[0][1][1];
; 976  :   bz = e_info->sides[0][1][2];
; 977  :   cx = e_info->sides[0][2][0];
; 978  :   cy = e_info->sides[0][2][1];
; 979  :   cz = e_info->sides[0][2][2];
; 980  :   aa = e_info->ss[0][0];
; 981  :   ab = e_info->ss[0][1];
; 982  :   ac = e_info->ss[0][2];
; 983  :   bc = e_info->ss[1][2];
; 984  :   det = vol;
; 985  : 
; 986  :   /* Copied from Mathematica */
; 987  : #undef  Power
; 988  : #define Power(a,b) ((b==2)?(a)*(a):(a)*(a)*(a))
; 989  : 
; 990  :     value = -((aa*det)/(-(ab*ac) + aa*bc))*sign/2.0;
; 991  : 
; 992  :   if ( mode == METHOD_VALUE ) 

	mov	ebx, DWORD PTR _mode$[ebp]
	fst	QWORD PTR _ax$[ebp]
	add	esp, 28					; 0000001cH
	fld	QWORD PTR [ecx+8]
	fstp	QWORD PTR _ay$[ebp]
	fld	QWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	fstp	QWORD PTR _az$[ebp]
	fld	QWORD PTR [ecx]
	fstp	QWORD PTR _bx$[ebp]
	fld	QWORD PTR [ecx+8]
	fst	QWORD PTR _by$[ebp]
	fld	QWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [esi+1280]
	fstp	QWORD PTR _bz$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	fld	QWORD PTR [eax]
	fstp	QWORD PTR _cx$[ebp]
	fld	QWORD PTR [eax+8]
	fstp	QWORD PTR _cy$[ebp]
	fld	QWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx]
	fstp	QWORD PTR _cz$[ebp]
	fld	QWORD PTR [eax]
	fld	QWORD PTR [eax+8]
	fst	QWORD PTR _ab$[ebp]
	fld	QWORD PTR [eax+16]
	fst	QWORD PTR _ac$[ebp]
	fld	QWORD PTR [edx+16]
	fst	QWORD PTR _bc$[ebp]
	fmul	ST(0), ST(3)
	fst	QWORD PTR tv6701[ebp]
	fld	ST(1)
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fst	QWORD PTR tv6702[ebp]
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv6704[ebp]
	fild	DWORD PTR _sign$[ebp]
	fst	QWORD PTR tv6708[ebp]
	fld	ST(3)
	fmul	ST(0), ST(7)
	fdiv	ST(0), ST(2)
	fmulp	ST(1), ST(0)
	fmul	QWORD PTR __real@bfe0000000000000
	fst	QWORD PTR _value$[ebp]
	cmp	ebx, 1767				; 000006e7H
	jne	SHORT $LN105@mean_int_a@2
	fstp	ST(6)
	pop	esi
	fstp	ST(0)
	pop	ebx
	fstp	ST(1)
	fstp	ST(2)
	fstp	ST(0)
	fstp	ST(0)

; 1383 : 
; 1384 : } // end mean_int_a_all()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN105@mean_int_a@2:

; 972  :   ay = e_info->sides[0][0][1];
; 973  :   az = e_info->sides[0][0][2];
; 974  :   bx = e_info->sides[0][1][0];
; 975  :   by = e_info->sides[0][1][1];
; 976  :   bz = e_info->sides[0][1][2];
; 977  :   cx = e_info->sides[0][2][0];
; 978  :   cy = e_info->sides[0][2][1];
; 979  :   cz = e_info->sides[0][2][2];
; 980  :   aa = e_info->ss[0][0];
; 981  :   ab = e_info->ss[0][1];
; 982  :   ac = e_info->ss[0][2];
; 983  :   bc = e_info->ss[1][2];
; 984  :   det = vol;
; 985  : 
; 986  :   /* Copied from Mathematica */
; 987  : #undef  Power
; 988  : #define Power(a,b) ((b==2)?(a)*(a):(a)*(a)*(a))
; 989  : 
; 990  :     value = -((aa*det)/(-(ab*ac) + aa*bc))*sign/2.0;
; 991  : 
; 992  :   if ( mode == METHOD_VALUE ) 

	fstp	ST(0)

; 993  :     return value;
; 994  : 
; 995  :     
; 996  :     e_info->grad[1][0] = (aa*(-(ab*ac) + aa*bc)*(bz*cy - by*cz) + 
; 997  :          2*ax*(ab*ac - aa*bc)*det + aa*(2*ax*bc - ac*bx - ab*cx)*det)/
; 998  :        Power(ab*ac - aa*bc,2);

	mov	eax, DWORD PTR [esi+1336]
	fmul	ST(0), ST(2)
	mov	ecx, DWORD PTR [eax+4]
	fld	QWORD PTR _cy$[ebp]
	fmul	QWORD PTR _bz$[ebp]
	fst	QWORD PTR tv6713[ebp]
	fld	QWORD PTR _cz$[ebp]
	fmulp	ST(5), ST(0)
	fxch	ST(4)
	fst	QWORD PTR tv6714[ebp]
	fsubp	ST(4), ST(0)
	fxch	ST(3)
	fstp	QWORD PTR tv6715[ebp]
	fld	QWORD PTR tv6702[ebp]
	fsub	QWORD PTR tv6701[ebp]
	fst	QWORD PTR tv6718[ebp]
	fld	ST(4)
	fadd	ST(0), ST(0)
	fst	QWORD PTR tv6720[ebp]
	fld	ST(0)
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv6721[ebp]
	fmul	QWORD PTR _bc$[ebp]
	fst	QWORD PTR tv6724[ebp]
	fxch	ST(2)
	fmul	QWORD PTR _bx$[ebp]
	fstp	QWORD PTR tv6725[ebp]
	fld	QWORD PTR _ab$[ebp]
	fmul	QWORD PTR _cx$[ebp]
	fst	QWORD PTR tv6727[ebp]
	fxch	ST(2)
	fsub	QWORD PTR tv6725[ebp]
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv6728[ebp]
	fld	ST(0)
	fmul	ST(0), ST(0)
	fst	QWORD PTR tv6734[ebp]
	fld	QWORD PTR tv6715[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv6721[ebp]
	fmul	ST(0), ST(7)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6728[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(7)
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ecx]

; 999  :     e_info->grad[1][1] = (aa*(ab*ac - aa*bc)*(bz*cx - bx*cz) + 
; 1000 :          2*ay*(ab*ac - aa*bc)*det + aa*(2*ay*bc - ac*by - ab*cy)*det)/
; 1001 :        Power(ab*ac - aa*bc,2);

	fld	QWORD PTR _cx$[ebp]
	fmul	QWORD PTR _bz$[ebp]
	fstp	QWORD PTR tv6745[ebp]
	fld	QWORD PTR _cz$[ebp]
	fmul	QWORD PTR _bx$[ebp]
	fst	QWORD PTR tv6746[ebp]
	fsubr	QWORD PTR tv6745[ebp]
	fstp	QWORD PTR tv6747[ebp]
	fld	QWORD PTR _ay$[ebp]
	fadd	ST(0), ST(0)
	fst	QWORD PTR tv6750[ebp]
	fld	ST(0)
	fmul	ST(0), ST(3)
	fstp	QWORD PTR tv6751[ebp]
	fmul	QWORD PTR _bc$[ebp]
	fstp	QWORD PTR tv6754[ebp]
	fld	QWORD PTR _ac$[ebp]
	fmul	QWORD PTR _by$[ebp]
	fstp	QWORD PTR tv6755[ebp]
	fld	QWORD PTR _ab$[ebp]
	fmul	QWORD PTR _cy$[ebp]
	fstp	QWORD PTR tv6757[ebp]
	fld	QWORD PTR tv6754[ebp]
	fsub	QWORD PTR tv6755[ebp]
	fsub	QWORD PTR tv6757[ebp]
	fstp	QWORD PTR tv6758[ebp]
	fld	ST(1)
	fmul	ST(0), ST(3)
	fmul	QWORD PTR tv6747[ebp]
	fld	QWORD PTR tv6751[ebp]
	fmul	ST(0), ST(7)
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR [esi+1336]
	fld	QWORD PTR tv6758[ebp]
	mov	eax, DWORD PTR [edx+4]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(7)
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax+8]

; 1002 :     e_info->grad[1][2] = (aa*(-(ab*ac) + aa*bc)*(by*cx - bx*cy) + 
; 1003 :          2*az*(ab*ac - aa*bc)*det + aa*(2*az*bc - ac*bz - ab*cz)*det)/
; 1004 :        Power(ab*ac - aa*bc,2);

	fld	QWORD PTR _cx$[ebp]
	fmul	QWORD PTR _by$[ebp]
	mov	ecx, DWORD PTR [esi+1336]
	mov	edx, DWORD PTR [ecx+4]
	fstp	QWORD PTR tv6767[ebp]
	fld	QWORD PTR _cy$[ebp]
	fmul	QWORD PTR _bx$[ebp]
	fst	QWORD PTR tv6768[ebp]
	fsubr	QWORD PTR tv6767[ebp]
	fst	QWORD PTR tv6769[ebp]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR tv6771[ebp]
	fld	QWORD PTR _az$[ebp]
	fadd	ST(0), ST(0)
	fst	QWORD PTR tv6772[ebp]
	fld	ST(0)
	fmul	ST(0), ST(3)
	fstp	QWORD PTR tv6773[ebp]
	fmul	QWORD PTR _bc$[ebp]
	fstp	QWORD PTR tv6776[ebp]
	fld	QWORD PTR _ac$[ebp]
	fmul	QWORD PTR _bz$[ebp]
	fstp	QWORD PTR tv6777[ebp]
	fld	QWORD PTR _ab$[ebp]
	fmul	QWORD PTR _cz$[ebp]
	fstp	QWORD PTR tv6779[ebp]
	fld	QWORD PTR tv6776[ebp]
	fsub	QWORD PTR tv6777[ebp]
	fsub	QWORD PTR tv6779[ebp]
	fstp	QWORD PTR tv6780[ebp]
	fld	QWORD PTR tv6773[ebp]
	fmul	ST(0), ST(6)
	fadd	QWORD PTR tv6771[ebp]
	fld	QWORD PTR tv6780[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(7)
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [edx+16]

; 1005 :     e_info->grad[2][0] = (aa*((ab*ac - aa*bc)*(az*cy - ay*cz) - 
; 1006 :            (ac*ax - aa*cx)*det))/Power(ab*ac - aa*bc,2);

	fld	QWORD PTR _cy$[ebp]
	fmul	QWORD PTR _az$[ebp]
	mov	eax, DWORD PTR [esi+1336]
	mov	ecx, DWORD PTR [eax+8]
	fstp	QWORD PTR tv6789[ebp]
	fld	QWORD PTR _cz$[ebp]
	fmul	QWORD PTR _ay$[ebp]
	fst	QWORD PTR tv6790[ebp]
	fsubr	QWORD PTR tv6789[ebp]
	fst	QWORD PTR tv6791[ebp]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv6793[ebp]
	fld	QWORD PTR _ac$[ebp]
	fmul	ST(0), ST(5)
	fstp	QWORD PTR tv6794[ebp]
	fld	ST(2)
	fmul	QWORD PTR _cx$[ebp]
	fst	QWORD PTR tv6795[ebp]
	fsubr	QWORD PTR tv6794[ebp]
	fst	QWORD PTR tv6796[ebp]
	fmul	ST(0), ST(6)
	fst	QWORD PTR tv8307[ebp]
	fsubr	QWORD PTR tv6793[ebp]
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ecx]

; 1007 :     e_info->grad[2][1] = (aa*((ab*ac - aa*bc)*(-(az*cx) + ax*cz) - 
; 1008 :            (ac*ay - aa*cy)*det))/Power(ab*ac - aa*bc,2);

	fld	QWORD PTR _cz$[ebp]
	fmul	ST(0), ST(5)
	fstp	QWORD PTR tv6808[ebp]
	fld	QWORD PTR _cx$[ebp]
	fmul	QWORD PTR _az$[ebp]
	fst	QWORD PTR tv6809[ebp]
	fsubr	QWORD PTR tv6808[ebp]
	fstp	QWORD PTR tv6811[ebp]
	mov	edx, DWORD PTR [esi+1336]
	fld	QWORD PTR _ac$[ebp]
	mov	eax, DWORD PTR [edx+8]
	fmul	QWORD PTR _ay$[ebp]
	fstp	QWORD PTR tv6814[ebp]
	fld	ST(2)
	fmul	QWORD PTR _cy$[ebp]
	fst	QWORD PTR tv6815[ebp]
	fsubr	QWORD PTR tv6814[ebp]
	fst	QWORD PTR tv6816[ebp]
	fmul	ST(0), ST(6)
	fst	QWORD PTR tv8320[ebp]
	fld	QWORD PTR tv6811[ebp]
	fmul	ST(0), ST(3)
	fsubrp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax+8]

; 1009 :     e_info->grad[2][2] = (aa*((ab*ac - aa*bc)*(ay*cx - ax*cy) - 
; 1010 :            (ac*az - aa*cz)*det))/Power(ab*ac - aa*bc,2);

	fld	QWORD PTR _cx$[ebp]
	fmul	QWORD PTR _ay$[ebp]
	mov	ecx, DWORD PTR [esi+1336]
	mov	edx, DWORD PTR [ecx+8]
	fst	QWORD PTR tv6826[ebp]
	fld	QWORD PTR _cy$[ebp]
	fmul	ST(0), ST(6)
	fst	QWORD PTR tv6827[ebp]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR tv6828[ebp]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv6830[ebp]
	fld	QWORD PTR _ac$[ebp]
	fmul	QWORD PTR _az$[ebp]
	fstp	QWORD PTR tv6831[ebp]
	fld	ST(2)
	fmul	QWORD PTR _cz$[ebp]
	fst	QWORD PTR tv6832[ebp]
	fsubr	QWORD PTR tv6831[ebp]
	fst	QWORD PTR tv6833[ebp]
	fmul	ST(0), ST(6)
	fst	QWORD PTR tv8333[ebp]
	fsubr	QWORD PTR tv6830[ebp]
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [edx+16]

; 1011 :     e_info->grad[3][0] = (aa*((ab*ac - aa*bc)*(-(az*by) + ay*bz) - 
; 1012 :            (ab*ax - aa*bx)*det))/Power(ab*ac - aa*bc,2);

	fld	QWORD PTR _bz$[ebp]
	fmul	QWORD PTR _ay$[ebp]
	mov	eax, DWORD PTR [esi+1336]
	mov	ecx, DWORD PTR [eax+12]
	fstp	QWORD PTR tv6843[ebp]
	fld	QWORD PTR _by$[ebp]
	fmul	QWORD PTR _az$[ebp]
	fst	QWORD PTR tv6844[ebp]
	fsubr	QWORD PTR tv6843[ebp]
	fstp	QWORD PTR tv6846[ebp]
	fld	QWORD PTR _ab$[ebp]
	fmul	ST(0), ST(5)
	fstp	QWORD PTR tv6849[ebp]
	fld	ST(2)
	fmul	QWORD PTR _bx$[ebp]
	fst	QWORD PTR tv6850[ebp]
	fsubr	QWORD PTR tv6849[ebp]
	fst	QWORD PTR tv6851[ebp]
	fmul	ST(0), ST(6)
	fst	QWORD PTR tv8346[ebp]
	fld	QWORD PTR tv6846[ebp]
	fmul	ST(0), ST(3)
	fsubrp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ecx]

; 1013 :     e_info->grad[3][1] = (aa*((ab*ac - aa*bc)*(az*bx - ax*bz) - 
; 1014 :            (ab*ay - aa*by)*det))/Power(ab*ac - aa*bc,2);

	fld	QWORD PTR _bx$[ebp]
	fmul	QWORD PTR _az$[ebp]
	fst	QWORD PTR tv6863[ebp]
	fld	QWORD PTR _bz$[ebp]
	fmul	ST(0), ST(6)
	fst	QWORD PTR tv6864[ebp]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR tv6865[ebp]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv6867[ebp]
	fld	QWORD PTR _ab$[ebp]
	mov	edx, DWORD PTR [esi+1336]
	fmul	QWORD PTR _ay$[ebp]
	mov	eax, DWORD PTR [edx+12]
	fstp	QWORD PTR tv6868[ebp]
	fld	ST(2)
	fmul	QWORD PTR _by$[ebp]
	fst	QWORD PTR tv6869[ebp]
	fsubr	QWORD PTR tv6868[ebp]
	fst	QWORD PTR tv6870[ebp]
	fmul	ST(0), ST(6)
	fst	QWORD PTR tv8359[ebp]
	fsubr	QWORD PTR tv6867[ebp]
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax+8]

; 1015 :     e_info->grad[3][2] = (aa*((ab*ac - aa*bc)*(-(ay*bx) + ax*by) - 
; 1016 :            (ab*az - aa*bz)*det))/Power(ab*ac - aa*bc,2);

	fld	QWORD PTR _by$[ebp]
	fmul	ST(0), ST(5)
	mov	ecx, DWORD PTR [esi+1336]
	mov	edx, DWORD PTR [ecx+12]
	fstp	QWORD PTR tv6880[ebp]
	fld	QWORD PTR _bx$[ebp]
	fmul	QWORD PTR _ay$[ebp]
	fst	QWORD PTR tv6881[ebp]
	fsubr	QWORD PTR tv6880[ebp]
	fstp	QWORD PTR tv6883[ebp]
	fld	QWORD PTR _ab$[ebp]
	fmul	QWORD PTR _az$[ebp]
	fstp	QWORD PTR tv6886[ebp]
	fld	ST(2)
	fmul	QWORD PTR _bz$[ebp]
	fst	QWORD PTR tv6887[ebp]
	fsubr	QWORD PTR tv6886[ebp]
	fst	QWORD PTR tv6888[ebp]
	fmul	ST(0), ST(6)
	fst	QWORD PTR tv8372[ebp]
	fld	QWORD PTR tv6883[ebp]
	fmul	ST(0), ST(3)
	fsubrp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [edx+16]
	mov	ecx, DWORD PTR _web+616
	mov	edx, 4
$LN49@mean_int_a@2:

; 1022 :       for ( ii = 0 ; ii < SDIM ; ii++ )

	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN48@mean_int_a@2
	fld	QWORD PTR tv6708[ebp]
	fmul	QWORD PTR __real@3fe0000000000000
$LN46@mean_int_a@2:
	mov	ecx, DWORD PTR [esi+1336]

; 1023 :           e_info->grad[i][ii] *= 0.5*sign;

	fld	ST(0)
	mov	ecx, DWORD PTR [ecx+edx]
	fmul	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _web+616
	cmp	eax, ecx
	jl	SHORT $LN46@mean_int_a@2

; 1022 :       for ( ii = 0 ; ii < SDIM ; ii++ )

	fstp	ST(0)
$LN48@mean_int_a@2:

; 1017 : 
; 1018 : 
; 1019 : 
; 1020 :   /* take care of some fudge factors, including orientation */
; 1021 :   for ( i = 1 ; i < 4 ; i++ )

	add	edx, 4
	cmp	edx, 16					; 00000010H
	jl	SHORT $LN49@mean_int_a@2

; 1024 : 
; 1025 :   /* set gradient of base vertex */
; 1026 :   for ( i = 1 ; i < 4 ; i++ )

	push	edi
	mov	edi, 4
$LN43@mean_int_a@2:

; 1027 :     for ( ii = 0 ; ii < SDIM ; ii++ )

	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN42@mean_int_a@2
$LN40@mean_int_a@2:

; 1028 :      e_info->grad[0][ii] -= e_info->grad[i][ii];

	mov	ecx, DWORD PTR [esi+1336]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+edi]
	fld	QWORD PTR [edx+eax*8]
	fsub	QWORD PTR [ecx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	inc	eax
	fstp	QWORD PTR [edx]
	mov	ecx, DWORD PTR _web+616
	cmp	eax, ecx
	jl	SHORT $LN40@mean_int_a@2
$LN42@mean_int_a@2:

; 1024 : 
; 1025 :   /* set gradient of base vertex */
; 1026 :   for ( i = 1 ; i < 4 ; i++ )

	add	edi, 4
	cmp	edi, 16					; 00000010H
	jl	SHORT $LN43@mean_int_a@2

; 1029 : 
; 1030 :   if ( mode == METHOD_GRADIENT ) 

	cmp	ebx, 4321				; 000010e1H
	jne	SHORT $LN37@mean_int_a@2
	fstp	ST(5)
	pop	edi
	fstp	ST(0)
	pop	esi
	fstp	ST(1)
	pop	ebx
	fstp	ST(0)
	fstp	ST(0)
	fstp	ST(0)

; 1380 :         }
; 1381 :   
; 1382 :   return value;

	fld	QWORD PTR _value$[ebp]

; 1383 : 
; 1384 : } // end mean_int_a_all()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN37@mean_int_a@2:

; 1031 :     return value;
; 1032 : 
; 1033 : 
; 1034 : 
; 1035 :     e_info->hess[1][1][0][0] = (-2*aa*(-(ab*ac) + aa*bc)*
; 1036 :           (-2*ax*bc + ac*bx + ab*cx)*(bz*cy - by*cz) + 
; 1037 :          4*ax*Power(ab*ac - aa*bc,2)*(-(bz*cy) + by*cz) + 
; 1038 :          2*Power(ab*ac - aa*bc,2)*det + 
; 1039 :          4*ax*(ab*ac - aa*bc)*(2*ax*bc - ac*bx - ab*cx)*det + 
; 1040 :          2*aa*Power(-2*ax*bc + ac*bx + ab*cx,2)*det - 
; 1041 :          2*aa*(-(ab*ac) + aa*bc)*(bc - bx*cx)*det)/Power(ab*ac - aa*bc,3);

	fxch	ST(4)
	mov	edx, DWORD PTR [esi+1340]
	fmul	QWORD PTR __real@4010000000000000
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	fstp	QWORD PTR tv6931[ebp]
	fld	QWORD PTR tv6714[ebp]
	fsub	QWORD PTR tv6713[ebp]
	fstp	QWORD PTR tv6934[ebp]
	fld	QWORD PTR tv6725[ebp]
	fsub	QWORD PTR tv6724[ebp]
	fadd	QWORD PTR tv6727[ebp]
	fstp	QWORD PTR tv6938[ebp]
	fld	ST(1)
	fadd	ST(0), ST(0)
	fst	QWORD PTR tv6940[ebp]
	fld	QWORD PTR tv6704[ebp]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv6941[ebp]
	fld	ST(4)
	fadd	ST(0), ST(0)
	fmul	ST(0), ST(6)
	fstp	QWORD PTR tv8388[ebp]
	fld	QWORD PTR tv6938[ebp]
	fst	QWORD PTR tv6939[ebp]
	fld	ST(5)
	fmulp	ST(3), ST(0)
	fld	QWORD PTR tv6931[ebp]
	fmulp	ST(6), ST(0)
	fxch	ST(5)
	fmul	QWORD PTR tv6934[ebp]
	fld	QWORD PTR tv6941[ebp]
	fmulp	ST(6), ST(0)
	fxch	ST(5)
	fmul	QWORD PTR tv6715[ebp]
	fsubp	ST(5), ST(0)
	fxch	ST(4)
	fadd	QWORD PTR tv8388[ebp]
	fld	QWORD PTR tv6931[ebp]
	fmul	QWORD PTR tv6718[ebp]
	fmul	QWORD PTR tv6728[ebp]
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6939[ebp]
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _cx$[ebp]
	fmul	QWORD PTR _bx$[ebp]
	fsubr	QWORD PTR _bc$[ebp]
	fmul	QWORD PTR tv6941[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 1042 :     e_info->hess[1][1][0][1] = (2*ax*Power(ab*ac - aa*bc,2)*(bz*cx - bx*cz) - 
; 1043 :          aa*(-(ab*ac) + aa*bc)*(-2*ax*bc + ac*bx + ab*cx)*(-(bz*cx) + bx*cz) + 
; 1044 :          2*ay*Power(ab*ac - aa*bc,2)*(-(bz*cy) + by*cz) + 
; 1045 :          aa*(-(ab*ac) + aa*bc)*(-2*ay*bc + ac*by + ab*cy)*(-(bz*cy) + by*cz) - 
; 1046 :          2*ay*(ab*ac - aa*bc)*(-2*ax*bc + ac*bx + ab*cx)*det - 
; 1047 :          2*ax*(ab*ac - aa*bc)*(-2*ay*bc + ac*by + ab*cy)*det + 
; 1048 :          2*aa*(-2*ax*bc + ac*bx + ab*cx)*(-2*ay*bc + ac*by + ab*cy)*det + 
; 1049 :          aa*(-(ab*ac) + aa*bc)*(by*cx + bx*cy)*det)/Power(ab*ac - aa*bc,3);

	fld	QWORD PTR tv6734[ebp]
	fld	QWORD PTR tv6720[ebp]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv6979[ebp]
	fld	QWORD PTR tv6938[ebp]
	fld	ST(0)
	fmul	ST(0), ST(5)
	fstp	QWORD PTR tv6981[ebp]
	fld	QWORD PTR tv6746[ebp]
	fsub	QWORD PTR tv6745[ebp]
	fstp	QWORD PTR tv6983[ebp]
	fld	QWORD PTR tv6750[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv6987[ebp]
	fld	QWORD PTR tv6755[ebp]
	fsub	QWORD PTR tv6754[ebp]
	fadd	QWORD PTR tv6757[ebp]
	fst	QWORD PTR tv6991[ebp]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR tv6993[ebp]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR tv7002[ebp]
	fld	QWORD PTR tv6979[ebp]
	fmul	QWORD PTR tv6747[ebp]
	mov	eax, DWORD PTR [esi+1340]
	fld	QWORD PTR tv6983[ebp]
	mov	ecx, DWORD PTR [eax+4]
	fmul	QWORD PTR tv6981[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv6987[ebp]
	fld	QWORD PTR tv6934[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6993[ebp]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6938[ebp]
	fmul	QWORD PTR tv6751[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv6991[ebp]
	fmul	QWORD PTR tv6721[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv7002[ebp]
	fmul	QWORD PTR tv6991[ebp]
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6768[ebp]
	fld	QWORD PTR tv6767[ebp]
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(7)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(2)
	fst	QWORD PTR tv8427[ebp]
	fstp	QWORD PTR [eax+8]

; 1050 :     e_info->hess[1][1][0][2] = (2*ax*Power(ab*ac - aa*bc,2)*
; 1051 :           (-(by*cx) + bx*cy) + aa*(-(ab*ac) + aa*bc)*(-2*ax*bc + ac*bx + ab*cx)*
; 1052 :           (-(by*cx) + bx*cy) - aa*(-(ab*ac) + aa*bc)*(-2*az*bc + ac*bz + ab*cz)*
; 1053 :           (bz*cy - by*cz) + 2*az*Power(ab*ac - aa*bc,2)*(-(bz*cy) + by*cz) - 
; 1054 :          2*az*(ab*ac - aa*bc)*(-2*ax*bc + ac*bx + ab*cx)*det - 
; 1055 :          2*ax*(ab*ac - aa*bc)*(-2*az*bc + ac*bz + ab*cz)*det + 
; 1056 :          2*aa*(-2*ax*bc + ac*bx + ab*cx)*(-2*az*bc + ac*bz + ab*cz)*det + 
; 1057 :          aa*(-(ab*ac) + aa*bc)*(bz*cx + bx*cz)*det)/Power(ab*ac - aa*bc,3);

	mov	ecx, DWORD PTR [esi+1340]
	fsubr	QWORD PTR tv6768[ebp]
	fst	QWORD PTR tv7016[ebp]
	fld	QWORD PTR tv6777[ebp]
	fsub	QWORD PTR tv6776[ebp]
	fadd	QWORD PTR tv6779[ebp]
	fst	QWORD PTR tv7022[ebp]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR tv7024[ebp]
	fld	QWORD PTR tv6772[ebp]
	fmul	QWORD PTR tv6734[ebp]
	fstp	QWORD PTR tv7027[ebp]
	fld	QWORD PTR tv6981[ebp]
	fmul	ST(0), ST(1)
	fxch	ST(1)
	fmul	QWORD PTR tv6979[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv7024[ebp]
	fmul	QWORD PTR tv6715[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv7027[ebp]
	fmul	QWORD PTR tv6934[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6938[ebp]
	fmul	QWORD PTR tv6773[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv7022[ebp]
	fmul	QWORD PTR tv6721[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv7022[ebp]
	fmul	QWORD PTR tv7002[ebp]
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6746[ebp]
	fadd	QWORD PTR tv6745[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fst	QWORD PTR tv8448[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax]
	fstp	QWORD PTR [ecx+16]

; 1058 :     e_info->hess[1][1][1][0] = (2*ax*Power(ab*ac - aa*bc,2)*(bz*cx - bx*cz) - 
; 1059 :          aa*(-(ab*ac) + aa*bc)*(-2*ax*bc + ac*bx + ab*cx)*(-(bz*cx) + bx*cz) + 
; 1060 :          2*ay*Power(ab*ac - aa*bc,2)*(-(bz*cy) + by*cz) + 
; 1061 :          aa*(-(ab*ac) + aa*bc)*(-2*ay*bc + ac*by + ab*cy)*(-(bz*cy) + by*cz) - 
; 1062 :          2*ay*(ab*ac - aa*bc)*(-2*ax*bc + ac*bx + ab*cx)*det - 
; 1063 :          2*ax*(ab*ac - aa*bc)*(-2*ay*bc + ac*by + ab*cy)*det + 
; 1064 :          2*aa*(-2*ax*bc + ac*bx + ab*cx)*(-2*ay*bc + ac*by + ab*cy)*det + 
; 1065 :          aa*(-(ab*ac) + aa*bc)*(by*cx + bx*cy)*det)/Power(ab*ac - aa*bc,3);

	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx+4]
	fld	QWORD PTR tv8427[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	fstp	QWORD PTR [edx]

; 1066 :     e_info->hess[1][1][1][1] = (2*
; 1067 :          (2*ay*Power(ab*ac - aa*bc,2)*(bz*cx - bx*cz) + 
; 1068 :            aa*(-(ab*ac) + aa*bc)*(-2*ay*bc + ac*by + ab*cy)*(bz*cx - bx*cz) + 
; 1069 :            Power(ab*ac - aa*bc,2)*det + 
; 1070 :            2*ay*(ab*ac - aa*bc)*(2*ay*bc - ac*by - ab*cy)*det + 
; 1071 :            aa*Power(-2*ay*bc + ac*by + ab*cy,2)*det - 
; 1072 :            aa*(-(ab*ac) + aa*bc)*(bc - by*cy)*det))/Power(ab*ac - aa*bc,3);

	mov	eax, DWORD PTR [esi+1340]
	fld	QWORD PTR tv6991[ebp]
	mov	ecx, DWORD PTR [eax+4]
	fstp	QWORD PTR tv6992[ebp]
	mov	edx, DWORD PTR [ecx+4]
	fld	QWORD PTR tv6993[ebp]
	mov	eax, DWORD PTR [edx+4]
	fld	QWORD PTR tv6747[ebp]
	fmul	ST(1), ST(0)
	fmul	QWORD PTR tv6987[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6734[ebp]
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6758[ebp]
	fmul	QWORD PTR tv6751[ebp]
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6992[ebp]
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _cy$[ebp]
	fmul	QWORD PTR _by$[ebp]
	fsubr	QWORD PTR _bc$[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fadd	ST(0), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax+8]

; 1073 :     e_info->hess[1][1][1][2] = (-(aa*(-(ab*ac) + aa*bc)*
; 1074 :             (-2*ay*bc + ac*by + ab*cy)*(by*cx - bx*cy)) + 
; 1075 :          2*ay*Power(ab*ac - aa*bc,2)*(-(by*cx) + bx*cy) + 
; 1076 :          2*az*Power(ab*ac - aa*bc,2)*(bz*cx - bx*cz) + 
; 1077 :          aa*(-(ab*ac) + aa*bc)*(-2*az*bc + ac*bz + ab*cz)*(bz*cx - bx*cz) - 
; 1078 :          2*az*(ab*ac - aa*bc)*(-2*ay*bc + ac*by + ab*cy)*det - 
; 1079 :          2*ay*(ab*ac - aa*bc)*(-2*az*bc + ac*bz + ab*cz)*det + 
; 1080 :          2*aa*(-2*ay*bc + ac*by + ab*cy)*(-2*az*bc + ac*bz + ab*cz)*det + 
; 1081 :          aa*(-(ab*ac) + aa*bc)*(bz*cy + by*cz)*det)/Power(ab*ac - aa*bc,3);

	fld	QWORD PTR tv6991[ebp]
	fmul	ST(0), ST(4)
	mov	ecx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	fstp	QWORD PTR tv7091[ebp]
	fld	QWORD PTR tv7016[ebp]
	fmul	QWORD PTR tv6987[ebp]
	fld	QWORD PTR tv6993[ebp]
	fmul	QWORD PTR tv6769[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv7027[ebp]
	fld	QWORD PTR tv6747[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv7024[ebp]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6991[ebp]
	fmul	QWORD PTR tv6773[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv7022[ebp]
	fmul	QWORD PTR tv6751[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv7091[ebp]
	fmul	QWORD PTR tv7022[ebp]
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6714[ebp]
	fadd	QWORD PTR tv6713[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fst	QWORD PTR [ecx+16]

; 1082 :     e_info->hess[1][1][2][0] = (2*ax*Power(ab*ac - aa*bc,2)*
; 1083 :           (-(by*cx) + bx*cy) + aa*(-(ab*ac) + aa*bc)*(-2*ax*bc + ac*bx + ab*cx)*
; 1084 :           (-(by*cx) + bx*cy) - aa*(-(ab*ac) + aa*bc)*(-2*az*bc + ac*bz + ab*cz)*
; 1085 :           (bz*cy - by*cz) + 2*az*Power(ab*ac - aa*bc,2)*(-(bz*cy) + by*cz) - 
; 1086 :          2*az*(ab*ac - aa*bc)*(-2*ax*bc + ac*bx + ab*cx)*det - 
; 1087 :          2*ax*(ab*ac - aa*bc)*(-2*az*bc + ac*bz + ab*cz)*det + 
; 1088 :          2*aa*(-2*ax*bc + ac*bx + ab*cx)*(-2*az*bc + ac*bz + ab*cz)*det + 
; 1089 :          aa*(-(ab*ac) + aa*bc)*(bz*cx + bx*cz)*det)/Power(ab*ac - aa*bc,3);

	mov	edx, DWORD PTR [esi+1340]
	fld	QWORD PTR tv8448[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	fstp	QWORD PTR [edx]

; 1090 :     e_info->hess[1][1][2][1] = (-(aa*(-(ab*ac) + aa*bc)*
; 1091 :             (-2*ay*bc + ac*by + ab*cy)*(by*cx - bx*cy)) + 
; 1092 :          2*ay*Power(ab*ac - aa*bc,2)*(-(by*cx) + bx*cy) + 
; 1093 :          2*az*Power(ab*ac - aa*bc,2)*(bz*cx - bx*cz) + 
; 1094 :          aa*(-(ab*ac) + aa*bc)*(-2*az*bc + ac*bz + ab*cz)*(bz*cx - bx*cz) - 
; 1095 :          2*az*(ab*ac - aa*bc)*(-2*ay*bc + ac*by + ab*cy)*det - 
; 1096 :          2*ay*(ab*ac - aa*bc)*(-2*az*bc + ac*bz + ab*cz)*det + 
; 1097 :          2*aa*(-2*ay*bc + ac*by + ab*cy)*(-2*az*bc + ac*bz + ab*cz)*det + 
; 1098 :          aa*(-(ab*ac) + aa*bc)*(bz*cy + by*cz)*det)/Power(ab*ac - aa*bc,3);

	mov	eax, DWORD PTR [esi+1340]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+8]
	fstp	QWORD PTR [eax+8]

; 1099 :     e_info->hess[1][1][2][2] = (4*az*Power(ab*ac - aa*bc,2)*
; 1100 :           (-(by*cx) + bx*cy) - 2*aa*(-(ab*ac) + aa*bc)*(by*cx - bx*cy)*
; 1101 :           (-2*az*bc + ac*bz + ab*cz) + 2*Power(ab*ac - aa*bc,2)*det + 
; 1102 :          4*az*(ab*ac - aa*bc)*(2*az*bc - ac*bz - ab*cz)*det + 
; 1103 :          2*aa*Power(-2*az*bc + ac*bz + ab*cz,2)*det - 
; 1104 :          2*aa*(-(ab*ac) + aa*bc)*(bc - bz*cz)*det)/Power(ab*ac - aa*bc,3);

	mov	ecx, DWORD PTR [esi+1340]
	fld	QWORD PTR _az$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	fmul	QWORD PTR __real@4010000000000000
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+8]
	fst	QWORD PTR tv7121[ebp]
	fld	QWORD PTR tv7022[ebp]
	fstp	QWORD PTR tv7023[ebp]
	fmul	QWORD PTR tv6734[ebp]
	fmul	QWORD PTR tv7016[ebp]
	fld	QWORD PTR tv6941[ebp]
	fmul	QWORD PTR tv6769[ebp]
	fmul	QWORD PTR tv7022[ebp]
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR tv8388[ebp]
	fld	QWORD PTR tv7121[ebp]
	fmul	QWORD PTR tv6718[ebp]
	fmul	QWORD PTR tv6780[ebp]
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv7023[ebp]
	fmul	ST(0), ST(0)
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _cz$[ebp]
	fmul	QWORD PTR _bz$[ebp]
	fsubr	QWORD PTR _bc$[ebp]
	fmul	QWORD PTR tv6941[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ecx+16]

; 1105 :     e_info->hess[1][2][0][0] = (2*ax*Power(ab*ac - aa*bc,2)*(az*cy - ay*cz) + 
; 1106 :          aa*(-(ab*ac) + aa*bc)*(-2*ax*bc + ac*bx + ab*cx)*(az*cy - ay*cz) + 
; 1107 :          aa*(-(ab*ac) + aa*bc)*(-(ac*ax) + aa*cx)*(bz*cy - by*cz) - 
; 1108 :          2*ax*(ab*ac - aa*bc)*(ac*ax - aa*cx)*det - 
; 1109 :          2*aa*(-(ac*ax) + aa*cx)*(-2*ax*bc + ac*bx + ab*cx)*det + 
; 1110 :          aa*(-(ab*ac) + aa*bc)*(ay*cy + az*cz)*det)/Power(ab*ac - aa*bc,3);

	fld	QWORD PTR tv6795[ebp]
	fsub	QWORD PTR tv6794[ebp]
	fst	QWORD PTR tv7151[ebp]
	fld	ST(0)
	fmul	ST(0), ST(4)
	fstp	QWORD PTR tv7153[ebp]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR tv7159[ebp]
	fld	QWORD PTR _cz$[ebp]
	fmul	QWORD PTR _az$[ebp]
	fstp	QWORD PTR tv7163[ebp]
	fld	QWORD PTR _cy$[ebp]
	fmul	QWORD PTR _ay$[ebp]
	fstp	QWORD PTR tv7164[ebp]
	fld	QWORD PTR tv6981[ebp]
	fld	QWORD PTR tv6791[ebp]
	fmul	ST(1), ST(0)
	fmul	QWORD PTR tv6979[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv7153[ebp]
	fmul	QWORD PTR tv6715[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6796[ebp]
	fmul	QWORD PTR tv6721[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv7159[ebp]
	fmul	QWORD PTR tv6938[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv7164[ebp]
	fadd	QWORD PTR tv7163[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	fstp	QWORD PTR [edx]

; 1111 :     e_info->hess[1][2][0][1] = (aa*Power(ab*ac - aa*bc,2)*cz + 
; 1112 :          2*ax*Power(ab*ac - aa*bc,2)*(-(az*cx) + ax*cz) + 
; 1113 :          aa*(-(ab*ac) + aa*bc)*(-2*ax*bc + ac*bx + ab*cx)*(-(az*cx) + ax*cz) + 
; 1114 :          aa*(-(ab*ac) + aa*bc)*(-(ac*ay) + aa*cy)*(bz*cy - by*cz) - 
; 1115 :          2*ax*(ab*ac - aa*bc)*(ac*ay - aa*cy)*det + 
; 1116 :          2*aa*(-2*ax*bc + ac*bx + ab*cx)*(ac*ay - aa*cy)*det + 
; 1117 :          aa*(-(ab*ac) + aa*bc)*(ay*cx - 2*ax*cy)*det)/Power(ab*ac - aa*bc,3);

	mov	eax, DWORD PTR [esi+1340]
	fld	QWORD PTR tv6734[ebp]
	mov	ecx, DWORD PTR [eax+4]
	fmul	ST(0), ST(2)
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx]
	fst	QWORD PTR tv7179[ebp]
	fmul	QWORD PTR _cz$[ebp]
	fst	QWORD PTR tv7180[ebp]
	fld	QWORD PTR tv6815[ebp]
	fsub	QWORD PTR tv6814[ebp]
	fst	QWORD PTR tv7185[ebp]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR tv7187[ebp]
	fld	QWORD PTR tv6979[ebp]
	fld	QWORD PTR tv6811[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	QWORD PTR tv6981[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6715[ebp]
	fmul	QWORD PTR tv7187[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6816[ebp]
	fmul	QWORD PTR tv6721[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv7002[ebp]
	fmul	QWORD PTR tv6816[ebp]
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6720[ebp]
	fmul	QWORD PTR _cy$[ebp]
	fsubr	QWORD PTR tv6826[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax+8]

; 1118 :     e_info->hess[1][2][0][2] = -((aa*Power(ab*ac - aa*bc,2)*cy + 
; 1119 :            2*ax*Power(ab*ac - aa*bc,2)*(-(ay*cx) + ax*cy) + 
; 1120 :            aa*(-(ab*ac) + aa*bc)*(-2*ax*bc + ac*bx + ab*cx)*(-(ay*cx) + ax*cy) + 
; 1121 :            aa*(-(ab*ac) + aa*bc)*(-(ac*az) + aa*cz)*(-(bz*cy) + by*cz) + 
; 1122 :            2*ax*(ab*ac - aa*bc)*(ac*az - aa*cz)*det - 
; 1123 :            2*aa*(2*ax*bc - ac*bx - ab*cx)*(-(ac*az) + aa*cz)*det - 
; 1124 :            aa*(-(ab*ac) + aa*bc)*(az*cx - 2*ax*cz)*det)/Power(ab*ac - aa*bc,3));

	fld	QWORD PTR tv6827[ebp]
	fsub	QWORD PTR tv6826[ebp]
	fstp	QWORD PTR tv7217[ebp]
	fld	QWORD PTR tv7179[ebp]
	fmul	QWORD PTR _cy$[ebp]
	fst	QWORD PTR tv7220[ebp]
	fld	QWORD PTR tv6832[ebp]
	fsub	QWORD PTR tv6831[ebp]
	fst	QWORD PTR tv7225[ebp]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR tv7227[ebp]
	fld	QWORD PTR tv6979[ebp]
	fld	QWORD PTR tv7217[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	QWORD PTR tv6981[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6934[ebp]
	fmul	QWORD PTR tv7227[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6833[ebp]
	fmul	QWORD PTR tv6721[ebp]
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	ST(4)
	fmul	QWORD PTR tv6728[ebp]
	fmul	QWORD PTR tv7225[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv6720[ebp]
	fmul	QWORD PTR _cz$[ebp]
	fsubr	QWORD PTR tv6809[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	mov	ecx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	fchs
	fstp	QWORD PTR [ecx+16]

; 1125 :     e_info->hess[1][2][1][0] = -((aa*Power(ab*ac - aa*bc,2)*cz + 
; 1126 :            2*ay*Power(ab*ac - aa*bc,2)*(-(az*cy) + ay*cz) + 
; 1127 :            aa*(-(ab*ac) + aa*bc)*(-2*ay*bc + ac*by + ab*cy)*(-(az*cy) + ay*cz) + 
; 1128 :            aa*(-(ab*ac) + aa*bc)*(-(ac*ax) + aa*cx)*(bz*cx - bx*cz) + 
; 1129 :            2*ay*(ab*ac - aa*bc)*(ac*ax - aa*cx)*det + 
; 1130 :            2*aa*(-(ac*ax) + aa*cx)*(-2*ay*bc + ac*by + ab*cy)*det + 
; 1131 :            aa*(-(ab*ac) + aa*bc)*(2*ay*cx - ax*cy)*det)/Power(ab*ac - aa*bc,3));

	fld	QWORD PTR tv6790[ebp]
	fsub	QWORD PTR tv6789[ebp]
	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	fst	QWORD PTR tv7250[ebp]
	fld	QWORD PTR tv6987[ebp]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR tv7180[ebp]
	fld	QWORD PTR tv6993[ebp]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv7153[ebp]
	fmul	QWORD PTR tv6747[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6796[ebp]
	fmul	QWORD PTR tv6751[ebp]
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv7159[ebp]
	fmul	QWORD PTR tv6991[ebp]
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6750[ebp]
	fmul	QWORD PTR _cx$[ebp]
	fsub	QWORD PTR tv6827[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fchs
	fstp	QWORD PTR [edx]

; 1132 :     e_info->hess[1][2][1][1] = -((2*ay*Power(ab*ac - aa*bc,2)*
; 1133 :             (az*cx - ax*cz) + aa*(-(ab*ac) + aa*bc)*(-2*ay*bc + ac*by + ab*cy)*
; 1134 :             (az*cx - ax*cz) + aa*(-(ab*ac) + aa*bc)*(-(ac*ay) + aa*cy)*
; 1135 :             (bz*cx - bx*cz) + 2*ay*(ab*ac - aa*bc)*(ac*ay - aa*cy)*det + 
; 1136 :            2*aa*(-(ac*ay) + aa*cy)*(-2*ay*bc + ac*by + ab*cy)*det - 
; 1137 :            aa*(-(ab*ac) + aa*bc)*(ax*cx + az*cz)*det)/Power(ab*ac - aa*bc,3));

	fld	QWORD PTR tv6809[ebp]
	fsub	QWORD PTR tv6808[ebp]
	mov	eax, DWORD PTR [esi+1340]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+4]
	fst	QWORD PTR tv7278[ebp]
	fld	ST(4)
	fmul	QWORD PTR tv7185[ebp]
	fstp	QWORD PTR tv7288[ebp]
	fld	QWORD PTR _cx$[ebp]
	fmul	QWORD PTR _ax$[ebp]
	fstp	QWORD PTR tv7292[ebp]
	fld	QWORD PTR tv6993[ebp]
	fmul	ST(0), ST(1)
	fld	QWORD PTR tv6987[ebp]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6747[ebp]
	fmul	QWORD PTR tv7187[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6816[ebp]
	fmul	QWORD PTR tv6751[ebp]
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6991[ebp]
	fmul	QWORD PTR tv7288[ebp]
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv7163[ebp]
	fadd	QWORD PTR tv7292[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fchs
	fstp	QWORD PTR [eax+8]

; 1138 :     e_info->hess[1][2][1][2] = (aa*Power(ab*ac - aa*bc,2)*cx + 
; 1139 :          2*ay*Power(ab*ac - aa*bc,2)*(ay*cx - ax*cy) + 
; 1140 :          aa*(-(ab*ac) + aa*bc)*(-2*ay*bc + ac*by + ab*cy)*(ay*cx - ax*cy) + 
; 1141 :          aa*(-(ab*ac) + aa*bc)*(-(ac*az) + aa*cz)*(-(bz*cx) + bx*cz) - 
; 1142 :          2*ay*(ab*ac - aa*bc)*(ac*az - aa*cz)*det + 
; 1143 :          2*aa*(-2*ay*bc + ac*by + ab*cy)*(ac*az - aa*cz)*det + 
; 1144 :          aa*(-(ab*ac) + aa*bc)*(az*cy - 2*ay*cz)*det)/Power(ab*ac - aa*bc,3);

	fld	QWORD PTR tv7179[ebp]
	fmul	QWORD PTR _cx$[ebp]
	fst	QWORD PTR tv7305[ebp]
	fld	QWORD PTR tv6987[ebp]
	fld	QWORD PTR tv6828[ebp]
	mov	ecx, DWORD PTR [esi+1340]
	fmul	ST(1), ST(0)
	mov	edx, DWORD PTR [ecx+4]
	fxch	ST(1)
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+4]
	faddp	ST(2), ST(0)
	fmul	QWORD PTR tv6993[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6983[ebp]
	fmul	QWORD PTR tv7227[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6833[ebp]
	fmul	QWORD PTR tv6751[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv7091[ebp]
	fmul	QWORD PTR tv6833[ebp]
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6750[ebp]
	fmul	QWORD PTR _cz$[ebp]
	fsubr	QWORD PTR tv6789[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ecx+16]

; 1145 :     e_info->hess[1][2][2][0] = (aa*Power(ab*ac - aa*bc,2)*cy + 
; 1146 :          aa*(-(ab*ac) + aa*bc)*(-(ac*ax) + aa*cx)*(by*cx - bx*cy) + 
; 1147 :          2*az*Power(ab*ac - aa*bc,2)*(az*cy - ay*cz) + 
; 1148 :          aa*(-(ab*ac) + aa*bc)*(-2*az*bc + ac*bz + ab*cz)*(az*cy - ay*cz) - 
; 1149 :          2*az*(ab*ac - aa*bc)*(ac*ax - aa*cx)*det - 
; 1150 :          2*aa*(-(ac*ax) + aa*cx)*(-2*az*bc + ac*bz + ab*cz)*det - 
; 1151 :          aa*(-(ab*ac) + aa*bc)*(2*az*cx - ax*cz)*det)/Power(ab*ac - aa*bc,3);

	fld	QWORD PTR tv7153[ebp]
	fmul	QWORD PTR tv6769[ebp]
	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	fadd	QWORD PTR tv7220[ebp]
	fld	QWORD PTR tv7027[ebp]
	fld	QWORD PTR tv6791[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv7024[ebp]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6796[ebp]
	fmul	QWORD PTR tv6773[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv7159[ebp]
	fmul	QWORD PTR tv7022[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv6772[ebp]
	fmul	QWORD PTR _cx$[ebp]
	fsub	QWORD PTR tv6808[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 1152 :     e_info->hess[1][2][2][1] = -((aa*Power(ab*ac - aa*bc,2)*cx + 
; 1153 :            aa*(-(ab*ac) + aa*bc)*(-(ac*ay) + aa*cy)*(-(by*cx) + bx*cy) + 
; 1154 :            2*az*Power(ab*ac - aa*bc,2)*(az*cx - ax*cz) + 
; 1155 :            aa*(-(ab*ac) + aa*bc)*(-2*az*bc + ac*bz + ab*cz)*(az*cx - ax*cz) + 
; 1156 :            2*az*(ab*ac - aa*bc)*(ac*ay - aa*cy)*det + 
; 1157 :            2*aa*(-(ac*ay) + aa*cy)*(-2*az*bc + ac*bz + ab*cz)*det + 
; 1158 :            aa*(-(ab*ac) + aa*bc)*(2*az*cy - ay*cz)*det)/Power(ab*ac - aa*bc,3));

	fld	QWORD PTR tv7016[ebp]
	fmul	QWORD PTR tv7187[ebp]
	fadd	QWORD PTR tv7305[ebp]
	fld	QWORD PTR tv7027[ebp]
	fld	QWORD PTR tv7278[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv7024[ebp]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6816[ebp]
	fmul	QWORD PTR tv6773[ebp]
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv7022[ebp]
	fmul	QWORD PTR tv7288[ebp]
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6772[ebp]
	fmul	QWORD PTR _cy$[ebp]
	fsub	QWORD PTR tv6790[ebp]
	mov	eax, DWORD PTR [esi+1340]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	fmul	ST(0), ST(4)
	mov	eax, DWORD PTR [edx+8]
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fchs
	fstp	QWORD PTR [eax+8]

; 1159 :     e_info->hess[1][2][2][2] = (2*az*Power(ab*ac - aa*bc,2)*(ay*cx - ax*cy) + 
; 1160 :          aa*(-(ab*ac) + aa*bc)*(by*cx - bx*cy)*(-(ac*az) + aa*cz) + 
; 1161 :          aa*(-(ab*ac) + aa*bc)*(ay*cx - ax*cy)*(-2*az*bc + ac*bz + ab*cz) + 
; 1162 :          aa*(-(ab*ac) + aa*bc)*(ax*cx + ay*cy)*det - 
; 1163 :          2*az*(ab*ac - aa*bc)*(ac*az - aa*cz)*det - 
; 1164 :          2*aa*(-(ac*az) + aa*cz)*(-2*az*bc + ac*bz + ab*cz)*det)/
; 1165 :        Power(ab*ac - aa*bc,3);

	fld	QWORD PTR tv6771[ebp]
	fmul	QWORD PTR tv7225[ebp]
	mov	ecx, DWORD PTR [esi+1340]
	fld	QWORD PTR tv7027[ebp]
	mov	edx, DWORD PTR [ecx+4]
	fld	QWORD PTR tv6828[ebp]
	mov	eax, DWORD PTR [edx+8]
	fmul	ST(1), ST(0)
	mov	ecx, DWORD PTR [eax+8]
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(4)
	fmul	QWORD PTR tv7022[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv7164[ebp]
	fadd	QWORD PTR tv7292[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6833[ebp]
	fmul	QWORD PTR tv6773[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fld	ST(4)
	fmul	QWORD PTR tv7225[ebp]
	fmul	QWORD PTR tv7022[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [ecx+16]

; 1166 :     e_info->hess[1][3][0][0] = (2*ax*Power(ab*ac - aa*bc,2)*
; 1167 :           (-(az*by) + ay*bz) - aa*(-(ab*ac) + aa*bc)*(az*by - ay*bz)*
; 1168 :           (-2*ax*bc + ac*bx + ab*cx) + 
; 1169 :          aa*(-(ab*ac) + aa*bc)*(-(ab*ax) + aa*bx)*(bz*cy - by*cz) - 
; 1170 :          2*ax*(ab*ac - aa*bc)*(ab*ax - aa*bx)*det + 
; 1171 :          aa*(-(ab*ac) + aa*bc)*(ay*by + az*bz)*det - 
; 1172 :          2*aa*(-(ab*ax) + aa*bx)*(-2*ax*bc + ac*bx + ab*cx)*det)/
; 1173 :        Power(ab*ac - aa*bc,3);

	fld	QWORD PTR tv6844[ebp]
	fsub	QWORD PTR tv6843[ebp]
	fst	QWORD PTR tv7409[ebp]
	fmul	ST(0), ST(3)
	fst	QWORD PTR tv7411[ebp]
	fld	QWORD PTR tv6850[ebp]
	fsub	QWORD PTR tv6849[ebp]
	fld	ST(4)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv7417[ebp]
	fld	QWORD PTR _bz$[ebp]
	fmul	QWORD PTR _az$[ebp]
	fstp	QWORD PTR tv7423[ebp]
	fld	QWORD PTR _by$[ebp]
	fmul	QWORD PTR _ay$[ebp]
	fstp	QWORD PTR tv7424[ebp]
	fmul	ST(0), ST(5)
	fstp	QWORD PTR tv7430[ebp]
	fld	QWORD PTR tv6979[ebp]
	fmul	QWORD PTR tv6846[ebp]
	fld	QWORD PTR tv6938[ebp]
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	fld	QWORD PTR tv6715[ebp]
	fmul	QWORD PTR tv7417[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6851[ebp]
	fmul	QWORD PTR tv6721[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv7424[ebp]
	fadd	QWORD PTR tv7423[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6938[ebp]
	fmul	QWORD PTR tv7430[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	fstp	QWORD PTR [edx]

; 1174 :     e_info->hess[1][3][0][1] = -((aa*Power(ab*ac - aa*bc,2)*bz + 
; 1175 :            2*ax*Power(ab*ac - aa*bc,2)*(-(az*bx) + ax*bz) - 
; 1176 :            aa*(-(ab*ac) + aa*bc)*(az*bx - ax*bz)*(-2*ax*bc + ac*bx + ab*cx) + 
; 1177 :            aa*(-(ab*ac) + aa*bc)*(-(ab*ay) + aa*by)*(-(bz*cy) + by*cz) + 
; 1178 :            2*ax*(ab*ac - aa*bc)*(ab*ay - aa*by)*det - 
; 1179 :            aa*(-(ab*ac) + aa*bc)*(ay*bx - 2*ax*by)*det + 
; 1180 :            2*aa*(-(ab*ay) + aa*by)*(-2*ax*bc + ac*bx + ab*cx)*det)/
; 1181 :          Power(ab*ac - aa*bc,3));

	fld	QWORD PTR tv6864[ebp]
	fsub	QWORD PTR tv6863[ebp]
	mov	eax, DWORD PTR [esi+1340]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	fstp	QWORD PTR tv7448[ebp]
	fld	QWORD PTR tv7179[ebp]
	fmul	QWORD PTR _bz$[ebp]
	fst	QWORD PTR tv7451[ebp]
	fld	QWORD PTR tv6865[ebp]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR tv7453[ebp]
	fld	QWORD PTR tv6869[ebp]
	fsub	QWORD PTR tv6868[ebp]
	fld	ST(4)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv7459[ebp]
	fmul	ST(0), ST(5)
	fstp	QWORD PTR tv7471[ebp]
	fld	QWORD PTR tv6979[ebp]
	fmul	QWORD PTR tv7448[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6938[ebp]
	fmul	QWORD PTR tv7453[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv6934[ebp]
	fmul	QWORD PTR tv7459[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6870[ebp]
	fmul	QWORD PTR tv6721[ebp]
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6720[ebp]
	fmul	QWORD PTR _by$[ebp]
	fsubr	QWORD PTR tv6881[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv6938[ebp]
	fmul	QWORD PTR tv7471[ebp]
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fchs
	fstp	QWORD PTR [eax+8]

; 1182 :     e_info->hess[1][3][0][2] = (aa*Power(ab*ac - aa*bc,2)*by + 
; 1183 :          2*ax*Power(ab*ac - aa*bc,2)*(-(ay*bx) + ax*by) - 
; 1184 :          aa*(-(ab*ac) + aa*bc)*(ay*bx - ax*by)*(-2*ax*bc + ac*bx + ab*cx) + 
; 1185 :          aa*(-(ab*ac) + aa*bc)*(-(ab*az) + aa*bz)*(bz*cy - by*cz) - 
; 1186 :          2*ax*(ab*ac - aa*bc)*(ab*az - aa*bz)*det + 
; 1187 :          aa*(-(ab*ac) + aa*bc)*(az*bx - 2*ax*bz)*det - 
; 1188 :          2*aa*(-(ab*az) + aa*bz)*(-2*ax*bc + ac*bx + ab*cx)*det)/
; 1189 :        Power(ab*ac - aa*bc,3);

	fld	QWORD PTR tv7179[ebp]
	fmul	QWORD PTR _by$[ebp]
	fst	QWORD PTR tv7482[ebp]
	fld	QWORD PTR tv6881[ebp]
	fsub	QWORD PTR tv6880[ebp]
	fst	QWORD PTR tv7484[ebp]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR tv7486[ebp]
	fld	QWORD PTR tv6887[ebp]
	fsub	QWORD PTR tv6886[ebp]
	fld	ST(4)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv7492[ebp]
	fmulp	ST(5), ST(0)
	fxch	ST(4)
	fstp	QWORD PTR tv7504[ebp]
	fld	QWORD PTR tv6979[ebp]
	fmul	QWORD PTR tv6883[ebp]
	faddp	ST(4), ST(0)
	fld	QWORD PTR tv6938[ebp]
	fld	QWORD PTR tv7486[ebp]
	fmul	ST(0), ST(1)
	fsubp	ST(5), ST(0)
	fld	QWORD PTR tv6715[ebp]
	fmul	QWORD PTR tv7492[ebp]
	faddp	ST(5), ST(0)
	fld	QWORD PTR tv6888[ebp]
	fmul	QWORD PTR tv6721[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(5), ST(0)
	mov	ecx, DWORD PTR [esi+1340]
	fld	QWORD PTR tv6720[ebp]
	mov	edx, DWORD PTR [ecx+4]
	fmul	QWORD PTR _bz$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	fsubr	QWORD PTR tv6863[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(6)
	faddp	ST(5), ST(0)
	fmul	QWORD PTR tv7504[ebp]
	fmul	ST(0), ST(5)
	fsubp	ST(4), ST(0)
	fdiv	ST(3), ST(0)
	fxch	ST(3)
	fstp	QWORD PTR [ecx+16]

; 1190 :     e_info->hess[1][3][1][0] = (aa*Power(ab*ac - aa*bc,2)*bz + 
; 1191 :          2*ay*Power(ab*ac - aa*bc,2)*(-(az*by) + ay*bz) - 
; 1192 :          aa*(-(ab*ac) + aa*bc)*(az*by - ay*bz)*(-2*ay*bc + ac*by + ab*cy) + 
; 1193 :          aa*(-(ab*ac) + aa*bc)*(-(ab*ax) + aa*bx)*(-(bz*cx) + bx*cz) - 
; 1194 :          2*ay*(ab*ac - aa*bc)*(ab*ax - aa*bx)*det - 
; 1195 :          aa*(-(ab*ac) + aa*bc)*(2*ay*bx - ax*by)*det - 
; 1196 :          2*aa*(-(ab*ax) + aa*bx)*(-2*ay*bc + ac*by + ab*cy)*det)/
; 1197 :        Power(ab*ac - aa*bc,3);

	fld	QWORD PTR tv6987[ebp]
	fmul	QWORD PTR tv6846[ebp]
	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	fadd	QWORD PTR tv7451[ebp]
	fld	QWORD PTR tv6991[ebp]
	fld	QWORD PTR tv7411[ebp]
	fmul	ST(0), ST(1)
	fsubp	ST(2), ST(0)
	fld	QWORD PTR tv6983[ebp]
	fmul	QWORD PTR tv7417[ebp]
	faddp	ST(2), ST(0)
	fld	QWORD PTR tv6851[ebp]
	fmul	QWORD PTR tv6751[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(2), ST(0)
	fld	QWORD PTR tv6750[ebp]
	fmul	QWORD PTR _bx$[ebp]
	fsub	QWORD PTR tv6880[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(6)
	fsubp	ST(2), ST(0)
	fld	QWORD PTR tv7430[ebp]
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(6)
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR [edx]

; 1198 :     e_info->hess[1][3][1][1] = -((-2*ay*Power(ab*ac - aa*bc,2)*
; 1199 :             (az*bx - ax*bz) - aa*(-(ab*ac) + aa*bc)*(az*bx - ax*bz)*
; 1200 :             (-2*ay*bc + ac*by + ab*cy) + 
; 1201 :            aa*(-(ab*ac) + aa*bc)*(-(ab*ay) + aa*by)*(bz*cx - bx*cz) + 
; 1202 :            2*ay*(ab*ac - aa*bc)*(ab*ay - aa*by)*det - 
; 1203 :            aa*(-(ab*ac) + aa*bc)*(ax*bx + az*bz)*det + 
; 1204 :            2*aa*(-(ab*ay) + aa*by)*(-2*ay*bc + ac*by + ab*cy)*det)/
; 1205 :          Power(ab*ac - aa*bc,3));

	fld	QWORD PTR _bx$[ebp]
	fmul	QWORD PTR _ax$[ebp]
	mov	eax, DWORD PTR [esi+1340]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	fstp	QWORD PTR tv7544[ebp]
	fld	QWORD PTR tv6747[ebp]
	fmul	QWORD PTR tv7459[ebp]
	fxch	ST(1)
	fmul	QWORD PTR tv7453[ebp]
	fld	QWORD PTR tv6987[ebp]
	fmul	QWORD PTR tv6865[ebp]
	faddp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv6870[ebp]
	fld	QWORD PTR tv6751[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(6)
	faddp	ST(2), ST(0)
	fld	QWORD PTR tv7544[ebp]
	fadd	QWORD PTR tv7423[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(6)
	fsubp	ST(2), ST(0)
	fld	QWORD PTR tv6991[ebp]
	fld	QWORD PTR tv7471[ebp]
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(7)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fdiv	ST(0), ST(5)
	fchs
	mov	eax, DWORD PTR [edx+4]
	fstp	QWORD PTR [eax+8]

; 1206 :     e_info->hess[1][3][1][2] = -((aa*Power(ab*ac - aa*bc,2)*bx + 
; 1207 :            2*ay*Power(ab*ac - aa*bc,2)*(ay*bx - ax*by) + 
; 1208 :            aa*(-(ab*ac) + aa*bc)*(ay*bx - ax*by)*(-2*ay*bc + ac*by + ab*cy) + 
; 1209 :            aa*(-(ab*ac) + aa*bc)*(-(ab*az) + aa*bz)*(bz*cx - bx*cz) + 
; 1210 :            2*ay*(ab*ac - aa*bc)*(ab*az - aa*bz)*det - 
; 1211 :            aa*(-(ab*ac) + aa*bc)*(az*by - 2*ay*bz)*det + 
; 1212 :            2*aa*(-(ab*az) + aa*bz)*(-2*ay*bc + ac*by + ab*cy)*det)/
; 1213 :          Power(ab*ac - aa*bc,3));

	mov	ecx, DWORD PTR [esi+1340]
	fld	QWORD PTR tv7179[ebp]
	mov	edx, DWORD PTR [ecx+4]
	fmul	QWORD PTR _bx$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	fst	QWORD PTR tv7571[ebp]
	fld	QWORD PTR tv6987[ebp]
	fmul	QWORD PTR tv7484[ebp]
	faddp	ST(1), ST(0)
	fld	ST(2)
	fmul	QWORD PTR tv7486[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6747[ebp]
	fmul	QWORD PTR tv7492[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6888[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6750[ebp]
	fmul	QWORD PTR _bz$[ebp]
	fsubr	QWORD PTR tv6844[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR tv7504[ebp]
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(3)
	fchs
	fstp	QWORD PTR [ecx+16]

; 1214 :     e_info->hess[1][3][2][0] = -((aa*Power(ab*ac - aa*bc,2)*by + 
; 1215 :            2*az*Power(ab*ac - aa*bc,2)*(az*by - ay*bz) + 
; 1216 :            aa*(-(ab*ac) + aa*bc)*(-(ab*ax) + aa*bx)*(-(by*cx) + bx*cy) + 
; 1217 :            aa*(-(ab*ac) + aa*bc)*(az*by - ay*bz)*(-2*az*bc + ac*bz + ab*cz) + 
; 1218 :            2*az*(ab*ac - aa*bc)*(ab*ax - aa*bx)*det + 
; 1219 :            aa*(-(ab*ac) + aa*bc)*(2*az*bx - ax*bz)*det + 
; 1220 :            2*aa*(-(ab*ax) + aa*bx)*(-2*az*bc + ac*bz + ab*cz)*det)/
; 1221 :          Power(ab*ac - aa*bc,3));

	fld	QWORD PTR tv7027[ebp]
	fmul	QWORD PTR tv7409[ebp]
	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	fadd	QWORD PTR tv7482[ebp]
	fld	QWORD PTR tv7016[ebp]
	fmul	QWORD PTR tv7417[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv7022[ebp]
	fld	QWORD PTR tv7411[ebp]
	fmul	ST(0), ST(1)
	faddp	ST(2), ST(0)
	fld	QWORD PTR tv6851[ebp]
	fmul	QWORD PTR tv6773[ebp]
	fmul	ST(0), ST(6)
	faddp	ST(2), ST(0)
	fld	QWORD PTR tv6772[ebp]
	fmul	QWORD PTR _bx$[ebp]
	fsub	QWORD PTR tv6864[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(6)
	faddp	ST(2), ST(0)
	fld	QWORD PTR tv7430[ebp]
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(6)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(4)
	fchs
	fstp	QWORD PTR [edx]

; 1222 :     e_info->hess[1][3][2][1] = (aa*Power(ab*ac - aa*bc,2)*bx + 
; 1223 :          2*az*Power(ab*ac - aa*bc,2)*(az*bx - ax*bz) + 
; 1224 :          aa*(-(ab*ac) + aa*bc)*(-(ab*ay) + aa*by)*(by*cx - bx*cy) + 
; 1225 :          aa*(-(ab*ac) + aa*bc)*(az*bx - ax*bz)*(-2*az*bc + ac*bz + ab*cz) - 
; 1226 :          2*az*(ab*ac - aa*bc)*(ab*ay - aa*by)*det - 
; 1227 :          aa*(-(ab*ac) + aa*bc)*(2*az*by - ay*bz)*det - 
; 1228 :          2*aa*(-(ab*ay) + aa*by)*(-2*az*bc + ac*bz + ab*cz)*det)/
; 1229 :        Power(ab*ac - aa*bc,3);

	fld	QWORD PTR tv7027[ebp]
	fmul	QWORD PTR tv6865[ebp]
	fadd	QWORD PTR tv7571[ebp]
	fld	QWORD PTR tv6769[ebp]
	fmul	QWORD PTR tv7459[ebp]
	faddp	ST(1), ST(0)
	fld	ST(1)
	fmul	QWORD PTR tv7453[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6870[ebp]
	fmul	QWORD PTR tv6773[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv6772[ebp]
	mov	eax, DWORD PTR [esi+1340]
	fmul	QWORD PTR _by$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+8]
	fsub	QWORD PTR tv6843[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fld	ST(1)
	fmul	QWORD PTR tv7471[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR [eax+8]

; 1230 :     e_info->hess[1][3][2][2] = (2*az*Power(ab*ac - aa*bc,2)*
; 1231 :           (-(ay*bx) + ax*by) + aa*(-(ab*ac) + aa*bc)*(-(ab*az) + aa*bz)*
; 1232 :           (by*cx - bx*cy) - aa*(-(ab*ac) + aa*bc)*(ay*bx - ax*by)*
; 1233 :           (-2*az*bc + ac*bz + ab*cz) + 
; 1234 :          aa*(-(ab*ac) + aa*bc)*(ax*bx + ay*by)*det - 
; 1235 :          2*az*(ab*ac - aa*bc)*(ab*az - aa*bz)*det - 
; 1236 :          2*aa*(-(ab*az) + aa*bz)*(-2*az*bc + ac*bz + ab*cz)*det)/
; 1237 :        Power(ab*ac - aa*bc,3);

	fld	QWORD PTR tv7027[ebp]
	fmul	QWORD PTR tv6883[ebp]
	mov	ecx, DWORD PTR [esi+1340]
	fld	QWORD PTR tv6769[ebp]
	mov	edx, DWORD PTR [ecx+4]
	fmul	QWORD PTR tv7492[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+8]
	faddp	ST(1), ST(0)
	fld	ST(1)
	fmul	QWORD PTR tv7486[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv7544[ebp]
	fadd	QWORD PTR tv7424[ebp]
	fmulp	ST(4), ST(0)
	fxch	ST(3)
	fmul	ST(0), ST(5)
	faddp	ST(3), ST(0)
	fld	QWORD PTR tv6888[ebp]
	fmul	QWORD PTR tv6773[ebp]
	fmul	ST(0), ST(5)
	fsubp	ST(3), ST(0)
	fmul	QWORD PTR tv7504[ebp]
	fmul	ST(0), ST(4)
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR [ecx+16]

; 1238 :     e_info->hess[2][2][0][0] = (2*aa*(ac*ax - aa*cx)*
; 1239 :          (-((ab*ac - aa*bc)*(az*cy - ay*cz)) + (ac*ax - aa*cx)*det))/
; 1240 :        Power(ab*ac - aa*bc,3);

	fld	QWORD PTR tv8307[ebp]
	fsub	QWORD PTR tv6793[ebp]
	mov	edx, DWORD PTR [esi+1340]
	fld	QWORD PTR tv6940[ebp]
	mov	eax, DWORD PTR [edx+8]
	fld	QWORD PTR tv6796[ebp]
	mov	ecx, DWORD PTR [eax+8]
	fmul	ST(1), ST(0)
	mov	edx, DWORD PTR [ecx]
	fxch	ST(2)
	fmulp	ST(1), ST(0)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR [edx]

; 1241 :     e_info->hess[2][2][0][1] = (aa*
; 1242 :          (-((ab*ac - aa*bc)*(ac*ax - aa*cx)*(-(az*cx) + ax*cz)) + 
; 1243 :            (ab*ac - aa*bc)*(ac*ay - aa*cy)*(-(az*cy) + ay*cz) + 
; 1244 :            2*(ac*ax - aa*cx)*(ac*ay - aa*cy)*det))/Power(ab*ac - aa*bc,3);

	fld	QWORD PTR tv6816[ebp]
	fld	ST(0)
	fld	QWORD PTR tv6718[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv7681[ebp]
	fld	ST(3)
	fmul	ST(0), ST(2)
	fst	QWORD PTR tv7683[ebp]
	fxch	ST(4)
	fadd	ST(0), ST(0)
	fstp	QWORD PTR tv7687[ebp]
	fmul	QWORD PTR tv7250[ebp]
	fld	QWORD PTR tv6811[ebp]
	fmulp	ST(4), ST(0)
	fsubrp	ST(3), ST(0)
	fld	ST(1)
	fmul	QWORD PTR tv7687[ebp]
	fmul	ST(0), ST(6)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(4)
	fst	QWORD PTR tv8878[ebp]
	mov	eax, DWORD PTR [esi+1340]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx]
	fstp	QWORD PTR [eax+8]

; 1245 :     e_info->hess[2][2][0][2] = (aa*
; 1246 :          ((ab*ac - aa*bc)*(ac*ax - aa*cx)*(-(ay*cx) + ax*cy) - 
; 1247 :            (ab*ac - aa*bc)*(ac*az - aa*cz)*(az*cy - ay*cz) + 
; 1248 :            2*(ac*ax - aa*cx)*(ac*az - aa*cz)*det))/Power(ab*ac - aa*bc,3);

	mov	ecx, DWORD PTR [esi+1340]
	fld	QWORD PTR tv6833[ebp]
	mov	edx, DWORD PTR [ecx+8]
	fmul	ST(0), ST(2)
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	fst	QWORD PTR tv7698[ebp]
	fld	QWORD PTR tv7683[ebp]
	fmul	QWORD PTR tv7217[ebp]
	fld	QWORD PTR tv6791[ebp]
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	fld	QWORD PTR tv6833[ebp]
	fmul	QWORD PTR tv7687[ebp]
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(4)
	fst	QWORD PTR tv8891[ebp]
	fstp	QWORD PTR [ecx+16]

; 1249 :     e_info->hess[2][2][1][0] = (aa*
; 1250 :          (-((ab*ac - aa*bc)*(ac*ax - aa*cx)*(-(az*cx) + ax*cz)) + 
; 1251 :            (ab*ac - aa*bc)*(ac*ay - aa*cy)*(-(az*cy) + ay*cz) + 
; 1252 :            2*(ac*ax - aa*cx)*(ac*ay - aa*cy)*det))/Power(ab*ac - aa*bc,3);

	fld	QWORD PTR tv8878[ebp]
	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	fstp	QWORD PTR [edx]

; 1253 :     e_info->hess[2][2][1][1] = (2*aa*(ac*ay - aa*cy)*
; 1254 :          ((ab*ac - aa*bc)*(az*cx - ax*cz) + (ac*ay - aa*cy)*det))/
; 1255 :        Power(ab*ac - aa*bc,3);

	mov	eax, DWORD PTR [esi+1340]
	fld	ST(1)
	mov	ecx, DWORD PTR [eax+8]
	fld	QWORD PTR tv7278[ebp]
	mov	edx, DWORD PTR [ecx+8]
	fmul	ST(1), ST(0)
	mov	eax, DWORD PTR [edx+4]
	fxch	ST(1)
	fadd	QWORD PTR tv8320[ebp]
	fld	QWORD PTR tv6940[ebp]
	fmul	ST(0), ST(3)
	fmulp	ST(1), ST(0)
	fdiv	ST(0), ST(5)
	fstp	QWORD PTR [eax+8]

; 1256 :     e_info->hess[2][2][1][2] = (aa*
; 1257 :          (-((ab*ac - aa*bc)*(ac*ay - aa*cy)*(ay*cx - ax*cy)) + 
; 1258 :            (ab*ac - aa*bc)*(ac*az - aa*cz)*(az*cx - ax*cz) + 
; 1259 :            2*(ac*ay - aa*cy)*(ac*az - aa*cz)*det))/Power(ab*ac - aa*bc,3);

	mov	ecx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [ecx+8]
	fmul	QWORD PTR tv7698[ebp]
	mov	eax, DWORD PTR [edx+8]
	fld	QWORD PTR tv6828[ebp]
	mov	ecx, DWORD PTR [eax+4]
	fmul	QWORD PTR tv7681[ebp]
	fsubp	ST(1), ST(0)
	fld	ST(1)
	fadd	ST(0), ST(0)
	fld	QWORD PTR tv6833[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(7)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(4)
	fdiv	ST(0), ST(5)
	fst	QWORD PTR [ecx+16]

; 1260 :     e_info->hess[2][2][2][0] = (aa*
; 1261 :          ((ab*ac - aa*bc)*(ac*ax - aa*cx)*(-(ay*cx) + ax*cy) - 
; 1262 :            (ab*ac - aa*bc)*(ac*az - aa*cz)*(az*cy - ay*cz) + 
; 1263 :            2*(ac*ax - aa*cx)*(ac*az - aa*cz)*det))/Power(ab*ac - aa*bc,3);

	fld	QWORD PTR tv8891[ebp]
	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	fstp	QWORD PTR [edx]

; 1264 :     e_info->hess[2][2][2][1] = (aa*
; 1265 :          (-((ab*ac - aa*bc)*(ac*ay - aa*cy)*(ay*cx - ax*cy)) + 
; 1266 :            (ab*ac - aa*bc)*(ac*az - aa*cz)*(az*cx - ax*cz) + 
; 1267 :            2*(ac*ay - aa*cy)*(ac*az - aa*cz)*det))/Power(ab*ac - aa*bc,3);

	mov	eax, DWORD PTR [esi+1340]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+8]
	fstp	QWORD PTR [eax+8]

; 1268 :     e_info->hess[2][2][2][2] = (2*aa*(ac*az - aa*cz)*
; 1269 :          (-((ab*ac - aa*bc)*(ay*cx - ax*cy)) + (ac*az - aa*cz)*det))/
; 1270 :        Power(ab*ac - aa*bc,3);

	fld	QWORD PTR tv8333[ebp]
	fsub	QWORD PTR tv6830[ebp]
	fld	QWORD PTR tv6940[ebp]
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	mov	ecx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+8]
	fstp	QWORD PTR [ecx+16]

; 1271 :     e_info->hess[2][3][0][0] = (aa*
; 1272 :          ((ab*ac - aa*bc)*(az*by - ay*bz)*(ac*ax - aa*cx) - 
; 1273 :            (ab*ac - aa*bc)*(ab*ax - aa*bx)*(az*cy - ay*cz) + 
; 1274 :            (Power(ay,2) + Power(az,2))*(ab*ac - aa*bc)*det + 
; 1275 :            2*(ab*ax - aa*bx)*(ac*ax - aa*cx)*det))/Power(ab*ac - aa*bc,3);

	mov	edx, DWORD PTR [esi+1340]
	fld	ST(1)
	mov	eax, DWORD PTR [edx+8]
	fmul	QWORD PTR tv7409[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	fst	QWORD PTR tv7752[ebp]
	fld	QWORD PTR tv6851[ebp]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR tv7754[ebp]
	fld	QWORD PTR _az$[ebp]
	fmul	ST(0), ST(0)
	fstp	QWORD PTR tv7757[ebp]
	fld	QWORD PTR _ay$[ebp]
	fmul	ST(0), ST(0)
	fstp	QWORD PTR tv7759[ebp]
	fld	QWORD PTR tv6851[ebp]
	fadd	ST(0), ST(0)
	fstp	QWORD PTR tv7766[ebp]
	fmul	QWORD PTR tv6796[ebp]
	fld	QWORD PTR tv6791[ebp]
	fmul	QWORD PTR tv7754[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv7759[ebp]
	fadd	QWORD PTR tv7757[ebp]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv6796[ebp]
	fmul	QWORD PTR tv7766[ebp]
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR [edx]

; 1276 :     e_info->hess[2][3][0][1] = (aa*
; 1277 :          (az*Power(ab*ac - aa*bc,2) - 
; 1278 :            (ab*ac - aa*bc)*(az*bx - ax*bz)*(ac*ax - aa*cx) + 
; 1279 :            (ab*ac - aa*bc)*(ab*ay - aa*by)*(-(az*cy) + ay*cz) - 
; 1280 :            ax*ay*(ab*ac - aa*bc)*det - 2*(ab*ay - aa*by)*(-(ac*ax) + aa*cx)*det))/
; 1281 :        Power(ab*ac - aa*bc,3);

	fld	QWORD PTR tv6734[ebp]
	fmul	QWORD PTR _az$[ebp]
	mov	eax, DWORD PTR [esi+1340]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	fst	QWORD PTR tv7780[ebp]
	fld	QWORD PTR tv6870[ebp]
	fmul	ST(0), ST(3)
	fst	QWORD PTR tv7783[ebp]
	fld	QWORD PTR _ay$[ebp]
	fmul	QWORD PTR _ax$[ebp]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(7)
	fstp	QWORD PTR tv8949[ebp]
	fld	QWORD PTR tv6870[ebp]
	fadd	ST(0), ST(0)
	fstp	QWORD PTR tv7790[ebp]
	fld	QWORD PTR tv6867[ebp]
	fmul	QWORD PTR tv6796[ebp]
	fsubp	ST(2), ST(0)
	fmul	QWORD PTR tv7250[ebp]
	faddp	ST(1), ST(0)
	fsub	QWORD PTR tv8949[ebp]
	fld	QWORD PTR tv7151[ebp]
	fmul	QWORD PTR tv7790[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR [eax+8]

; 1282 :     e_info->hess[2][3][0][2] = (aa*
; 1283 :          (-(ay*Power(ab*ac - aa*bc,2)) + 
; 1284 :            (ab*ac - aa*bc)*(ay*bx - ax*by)*(ac*ax - aa*cx) - 
; 1285 :            (ab*ac - aa*bc)*(ab*az - aa*bz)*(az*cy - ay*cz) - 
; 1286 :            ax*az*(ab*ac - aa*bc)*det - 2*(ab*az - aa*bz)*(-(ac*ax) + aa*cx)*det))/
; 1287 :        Power(ab*ac - aa*bc,3);

	fld	ST(1)
	fmul	QWORD PTR tv7484[ebp]
	fst	QWORD PTR tv7810[ebp]
	fld	QWORD PTR tv6734[ebp]
	fmul	QWORD PTR _ay$[ebp]
	fst	QWORD PTR tv7812[ebp]
	fld	QWORD PTR tv6888[ebp]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR tv7815[ebp]
	fld	QWORD PTR _az$[ebp]
	fmul	QWORD PTR _ax$[ebp]
	mov	ecx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+12]
	fmul	ST(0), ST(4)
	mov	ecx, DWORD PTR [eax]
	fmul	ST(0), ST(7)
	fstp	QWORD PTR tv8966[ebp]
	fld	QWORD PTR tv6888[ebp]
	fadd	ST(0), ST(0)
	fstp	QWORD PTR tv7822[ebp]
	fld	QWORD PTR tv6796[ebp]
	fmulp	ST(2), ST(0)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv7815[ebp]
	fmul	QWORD PTR tv6791[ebp]
	fsubp	ST(1), ST(0)
	fsub	QWORD PTR tv8966[ebp]
	fld	QWORD PTR tv7151[ebp]
	fmul	QWORD PTR tv7822[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR [ecx+16]

; 1288 :     e_info->hess[2][3][1][0] = (aa*
; 1289 :          (-(az*Power(ab*ac - aa*bc,2)) + 
; 1290 :            (ab*ac - aa*bc)*(az*by - ay*bz)*(ac*ay - aa*cy) - 
; 1291 :            (ab*ac - aa*bc)*(ab*ax - aa*bx)*(-(az*cx) + ax*cz) - 
; 1292 :            ax*ay*(ab*ac - aa*bc)*det - 2*(ab*ax - aa*bx)*(-(ac*ay) + aa*cy)*det))/
; 1293 :        Power(ab*ac - aa*bc,3);

	fld	QWORD PTR tv7752[ebp]
	fmul	ST(0), ST(1)
	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	fsub	QWORD PTR tv7780[ebp]
	fld	QWORD PTR tv6811[ebp]
	fmul	QWORD PTR tv7754[ebp]
	fsubp	ST(1), ST(0)
	fsub	QWORD PTR tv8949[ebp]
	fld	QWORD PTR tv7766[ebp]
	fmul	QWORD PTR tv7185[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR [edx]

; 1294 :     e_info->hess[2][3][1][1] = (aa*
; 1295 :          (-((ab*ac - aa*bc)*(az*bx - ax*bz)*(ac*ay - aa*cy)) + 
; 1296 :            (ab*ac - aa*bc)*(ab*ay - aa*by)*(az*cx - ax*cz) + 
; 1297 :            (Power(ax,2) + Power(az,2))*(ab*ac - aa*bc)*det + 
; 1298 :            2*(ab*ay - aa*by)*(ac*ay - aa*cy)*det))/Power(ab*ac - aa*bc,3);

	fld	QWORD PTR _ax$[ebp]
	fmul	ST(0), ST(0)
	mov	eax, DWORD PTR [esi+1340]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	fst	QWORD PTR tv7853[ebp]
	fld	QWORD PTR tv7783[ebp]
	fmul	QWORD PTR tv7278[ebp]
	fld	QWORD PTR tv6867[ebp]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR tv7757[ebp]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	ST(1)
	fmul	QWORD PTR tv7790[ebp]
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR [eax+8]

; 1299 :     e_info->hess[2][3][1][2] = (aa*
; 1300 :          (ax*Power(ab*ac - aa*bc,2) + 
; 1301 :            (ab*ac - aa*bc)*(ay*bx - ax*by)*(ac*ay - aa*cy) + 
; 1302 :            (ab*ac - aa*bc)*(ab*az - aa*bz)*(az*cx - ax*cz) - 
; 1303 :            ay*az*(ab*ac - aa*bc)*det - 2*(ab*az - aa*bz)*(-(ac*ay) + aa*cy)*det))/
; 1304 :        Power(ab*ac - aa*bc,3);

	fld	QWORD PTR tv6734[ebp]
	fmul	QWORD PTR _ax$[ebp]
	fst	QWORD PTR tv7870[ebp]
	fld	QWORD PTR _az$[ebp]
	fmul	QWORD PTR _ay$[ebp]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(6)
	fst	QWORD PTR tv9015[ebp]
	fxch	ST(2)
	fmul	QWORD PTR tv7810[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv7815[ebp]
	fld	QWORD PTR tv7278[ebp]
	fmul	ST(0), ST(1)
	faddp	ST(2), ST(0)
	mov	ecx, DWORD PTR [esi+1340]
	fxch	ST(1)
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+12]
	fsubrp	ST(2), ST(0)
	mov	ecx, DWORD PTR [eax+4]
	fld	QWORD PTR tv7822[ebp]
	fmul	QWORD PTR tv7185[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR [ecx+16]

; 1305 :     e_info->hess[2][3][2][0] = (aa*
; 1306 :          (ay*Power(ab*ac - aa*bc,2) + 
; 1307 :            (ab*ac - aa*bc)*(ab*ax - aa*bx)*(-(ay*cx) + ax*cy) + 
; 1308 :            (ab*ac - aa*bc)*(az*by - ay*bz)*(ac*az - aa*cz) - 
; 1309 :            ax*az*(ab*ac - aa*bc)*det - 2*(ab*ax - aa*bx)*(-(ac*az) + aa*cz)*det))/
; 1310 :        Power(ab*ac - aa*bc,3);

	fld	QWORD PTR tv7754[ebp]
	fmul	QWORD PTR tv7217[ebp]
	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	fadd	QWORD PTR tv7812[ebp]
	fld	QWORD PTR tv6833[ebp]
	fmul	QWORD PTR tv7752[ebp]
	faddp	ST(1), ST(0)
	fsub	QWORD PTR tv8966[ebp]
	fld	QWORD PTR tv7766[ebp]
	fmul	QWORD PTR tv7225[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR [edx]

; 1311 :     e_info->hess[2][3][2][1] = (aa*
; 1312 :          (-(ax*Power(ab*ac - aa*bc,2)) - 
; 1313 :            (ab*ac - aa*bc)*(ab*ay - aa*by)*(ay*cx - ax*cy) - 
; 1314 :            (ab*ac - aa*bc)*(az*bx - ax*bz)*(ac*az - aa*cz) - 
; 1315 :            ay*az*(ab*ac - aa*bc)*det - 2*(ab*ay - aa*by)*(-(ac*az) + aa*cz)*det))/
; 1316 :        Power(ab*ac - aa*bc,3);

	fld	QWORD PTR tv7870[ebp]
	fchs
	mov	eax, DWORD PTR [esi+1340]
	fld	QWORD PTR tv6828[ebp]
	mov	ecx, DWORD PTR [eax+8]
	fmul	QWORD PTR tv7783[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+8]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv6867[ebp]
	fmul	QWORD PTR tv6833[ebp]
	fsubp	ST(1), ST(0)
	fsub	QWORD PTR tv9015[ebp]
	fld	QWORD PTR tv7790[ebp]
	fmul	QWORD PTR tv7225[ebp]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR [eax+8]

; 1317 :     e_info->hess[2][3][2][2] = (aa*
; 1318 :          (-((ab*ac - aa*bc)*(ab*az - aa*bz)*(ay*cx - ax*cy)) + 
; 1319 :            (ab*ac - aa*bc)*(ay*bx - ax*by)*(ac*az - aa*cz) + 
; 1320 :            (Power(ax,2) + Power(ay,2))*(ab*ac - aa*bc)*det + 
; 1321 :            2*(ab*az - aa*bz)*(ac*az - aa*cz)*det))/Power(ab*ac - aa*bc,3);

	fld	QWORD PTR tv6833[ebp]
	fld	QWORD PTR tv7810[ebp]
	mov	ecx, DWORD PTR [esi+1340]
	fmul	ST(0), ST(1)
	mov	edx, DWORD PTR [ecx+8]
	fld	QWORD PTR tv6828[ebp]
	mov	eax, DWORD PTR [edx+12]
	fmul	ST(0), ST(3)
	mov	ecx, DWORD PTR [eax+8]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv7853[ebp]
	fadd	QWORD PTR tv7759[ebp]
	fmulp	ST(4), ST(0)
	fxch	ST(3)
	fmul	ST(0), ST(6)
	faddp	ST(3), ST(0)
	fmul	QWORD PTR tv7822[ebp]
	fmul	ST(0), ST(5)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR [ecx+16]

; 1322 :     e_info->hess[3][3][0][0] = (2*aa*(ab*ax - aa*bx)*
; 1323 :          ((ab*ac - aa*bc)*(az*by - ay*bz) + (ab*ax - aa*bx)*det))/
; 1324 :        Power(ab*ac - aa*bc,3);

	fld	QWORD PTR tv7752[ebp]
	fadd	QWORD PTR tv8346[ebp]
	fld	QWORD PTR tv6940[ebp]
	fld	QWORD PTR tv6851[ebp]
	fmul	ST(0), ST(1)
	fmulp	ST(2), ST(0)
	mov	edx, DWORD PTR [esi+1340]
	fxch	ST(1)
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+12]
	fdiv	ST(0), ST(4)
	mov	edx, DWORD PTR [ecx]
	fstp	QWORD PTR [edx]

; 1325 :     e_info->hess[3][3][0][1] = (aa*
; 1326 :          ((ab*ac - aa*bc)*(ab*ax - aa*bx)*(-(az*bx) + ax*bz) - 
; 1327 :            (ab*ac - aa*bc)*(ab*ay - aa*by)*(-(az*by) + ay*bz) + 
; 1328 :            2*(ab*ax - aa*bx)*(ab*ay - aa*by)*det))/Power(ab*ac - aa*bc,3);

	fld	QWORD PTR tv7754[ebp]
	fmul	QWORD PTR tv7448[ebp]
	mov	eax, DWORD PTR [esi+1340]
	fld	QWORD PTR tv6846[ebp]
	mov	ecx, DWORD PTR [eax+12]
	fmul	QWORD PTR tv7783[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv6870[ebp]
	fmul	QWORD PTR tv7766[ebp]
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(4)
	fst	QWORD PTR tv9100[ebp]
	fstp	QWORD PTR [eax+8]

; 1329 :     e_info->hess[3][3][0][2] = (aa*
; 1330 :          (-((ab*ac - aa*bc)*(ab*ax - aa*bx)*(-(ay*bx) + ax*by)) + 
; 1331 :            (ab*ac - aa*bc)*(ab*az - aa*bz)*(az*by - ay*bz) + 
; 1332 :            2*(ab*ax - aa*bx)*(ab*az - aa*bz)*det))/Power(ab*ac - aa*bc,3);

	fld	ST(1)
	fmul	QWORD PTR tv7409[ebp]
	mov	ecx, DWORD PTR [esi+1340]
	fld	QWORD PTR tv6883[ebp]
	mov	edx, DWORD PTR [ecx+12]
	fmul	QWORD PTR tv7754[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv6888[ebp]
	fmul	QWORD PTR tv7766[ebp]
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(4)
	fst	QWORD PTR tv9113[ebp]
	fstp	QWORD PTR [ecx+16]

; 1333 :     e_info->hess[3][3][1][0] = (aa*
; 1334 :          ((ab*ac - aa*bc)*(ab*ax - aa*bx)*(-(az*bx) + ax*bz) - 
; 1335 :            (ab*ac - aa*bc)*(ab*ay - aa*by)*(-(az*by) + ay*bz) + 
; 1336 :            2*(ab*ax - aa*bx)*(ab*ay - aa*by)*det))/Power(ab*ac - aa*bc,3);

	fld	QWORD PTR tv9100[ebp]
	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	fstp	QWORD PTR [edx]

; 1337 :     e_info->hess[3][3][1][1] = (2*aa*(ab*ay - aa*by)*
; 1338 :          (-((ab*ac - aa*bc)*(az*bx - ax*bz)) + (ab*ay - aa*by)*det))/
; 1339 :        Power(ab*ac - aa*bc,3);

	mov	eax, DWORD PTR [esi+1340]
	fld	QWORD PTR tv8359[ebp]
	mov	ecx, DWORD PTR [eax+12]
	fsub	QWORD PTR tv6867[ebp]
	mov	edx, DWORD PTR [ecx+12]
	fld	ST(1)
	mov	eax, DWORD PTR [edx+4]
	fmul	QWORD PTR tv6870[ebp]
	fmulp	ST(1), ST(0)
	fdiv	ST(0), ST(4)
	fstp	QWORD PTR [eax+8]

; 1340 :     e_info->hess[3][3][1][2] = (aa*
; 1341 :          ((ab*ac - aa*bc)*(ab*ay - aa*by)*(ay*bx - ax*by) - 
; 1342 :            (ab*ac - aa*bc)*(ab*az - aa*bz)*(az*bx - ax*bz) + 
; 1343 :            2*(ab*ay - aa*by)*(ab*az - aa*bz)*det))/Power(ab*ac - aa*bc,3);

	fld	QWORD PTR tv7783[ebp]
	fmul	QWORD PTR tv7484[ebp]
	mov	ecx, DWORD PTR [esi+1340]
	fld	QWORD PTR tv6865[ebp]
	mov	edx, DWORD PTR [ecx+12]
	fmulp	ST(3), ST(0)
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	fsubrp	ST(2), ST(0)
	fld	QWORD PTR tv6888[ebp]
	fld	QWORD PTR tv7790[ebp]
	fmul	ST(0), ST(1)
	fmulp	ST(6), ST(0)
	fxch	ST(2)
	faddp	ST(5), ST(0)
	fxch	ST(4)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(2)
	fst	QWORD PTR [ecx+16]

; 1344 :     e_info->hess[3][3][2][0] = (aa*
; 1345 :          (-((ab*ac - aa*bc)*(ab*ax - aa*bx)*(-(ay*bx) + ax*by)) + 
; 1346 :            (ab*ac - aa*bc)*(ab*az - aa*bz)*(az*by - ay*bz) + 
; 1347 :            2*(ab*ax - aa*bx)*(ab*az - aa*bz)*det))/Power(ab*ac - aa*bc,3);

	mov	edx, DWORD PTR [esi+1340]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+12]
	fld	QWORD PTR tv9113[ebp]
	mov	edx, DWORD PTR [ecx+8]
	fstp	QWORD PTR [edx]

; 1348 :     e_info->hess[3][3][2][1] = (aa*
; 1349 :          ((ab*ac - aa*bc)*(ab*ay - aa*by)*(ay*bx - ax*by) - 
; 1350 :            (ab*ac - aa*bc)*(ab*az - aa*bz)*(az*bx - ax*bz) + 
; 1351 :            2*(ab*ay - aa*by)*(ab*az - aa*bz)*det))/Power(ab*ac - aa*bc,3);

	mov	eax, DWORD PTR [esi+1340]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+8]
	fstp	QWORD PTR [eax+8]

; 1352 :     e_info->hess[3][3][2][2] = (2*aa*(ab*az - aa*bz)*
; 1353 :          ((ab*ac - aa*bc)*(ay*bx - ax*by) + (ab*az - aa*bz)*det))/
; 1354 :        Power(ab*ac - aa*bc,3);

	mov	ecx, DWORD PTR [esi+1340]
	fld	QWORD PTR tv7810[ebp]
	mov	edx, DWORD PTR [ecx+12]
	fadd	QWORD PTR tv8372[ebp]
	mov	eax, DWORD PTR [edx+12]
	fxch	ST(3)
	mov	ecx, DWORD PTR [eax+8]
	fmulp	ST(1), ST(0)

; 1355 : 
; 1356 : 
; 1357 : 
; 1358 : 
; 1359 :   /* take care of some fudge factors, including orientation */
; 1360 :   for ( i = 1 ; i < 4 ; i++ )

	mov	ebx, 1
	fmulp	ST(2), ST(0)
	fdivp	ST(1), ST(0)
	fstp	QWORD PTR [ecx+16]
	fld	QWORD PTR __real@3fe0000000000000
	mov	edi, DWORD PTR _web+616
	fld	QWORD PTR tv6708[ebp]
$LN36@mean_int_a@2:

; 1361 :     for ( j = 1 ; j <= i ; j++ )

	mov	DWORD PTR _j$[ebp], 1
	cmp	ebx, 1
	jl	SHORT $LN35@mean_int_a@2
$LN33@mean_int_a@2:

; 1362 :       for ( ii = 0 ; ii < SDIM ; ii++ )

	xor	edx, edx
	test	edi, edi
	jle	SHORT $LN32@mean_int_a@2
$LN100@mean_int_a@2:

; 1363 :         for ( jj = 0 ; jj < SDIM ; jj++ )

	xor	eax, eax
	test	edi, edi
	jle	SHORT $LN29@mean_int_a@2
	fld	ST(0)
	fmul	ST(0), ST(2)
$LN99@mean_int_a@2:

; 1364 :           e_info->hess[j][i][jj][ii] *= 0.5*sign;

	mov	ecx, DWORD PTR [esi+1340]
	fld	ST(0)
	mov	edi, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	ecx, DWORD PTR [ecx+ebx*4]
	mov	ecx, DWORD PTR [ecx+eax*4]
	fmul	QWORD PTR [ecx+edx*8]
	lea	ecx, DWORD PTR [ecx+edx*8]
	inc	eax
	fstp	QWORD PTR [ecx]
	mov	edi, DWORD PTR _web+616
	cmp	eax, edi
	jl	SHORT $LN99@mean_int_a@2

; 1363 :         for ( jj = 0 ; jj < SDIM ; jj++ )

	fstp	ST(0)
$LN29@mean_int_a@2:

; 1362 :       for ( ii = 0 ; ii < SDIM ; ii++ )

	inc	edx
	cmp	edx, edi
	jl	SHORT $LN100@mean_int_a@2
$LN32@mean_int_a@2:

; 1361 :     for ( j = 1 ; j <= i ; j++ )

	mov	eax, DWORD PTR _j$[ebp]
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, ebx
	jle	SHORT $LN33@mean_int_a@2
$LN35@mean_int_a@2:

; 1355 : 
; 1356 : 
; 1357 : 
; 1358 : 
; 1359 :   /* take care of some fudge factors, including orientation */
; 1360 :   for ( i = 1 ; i < 4 ; i++ )

	inc	ebx
	cmp	ebx, 4
	jl	SHORT $LN36@mean_int_a@2
	fstp	ST(1)

; 1365 : 
; 1366 :   /* Fill in rest of Hessian by symmetry */
; 1367 :   for ( i = 1 ; i < 4 ; i++ )

	mov	eax, 1
	fstp	ST(0)
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN24@mean_int_a@2
$LL95@mean_int_a@2:
	mov	eax, DWORD PTR _i$[ebp]
$LN24@mean_int_a@2:

; 1368 :     for ( j = i+1 ; j < 4 ; j++ )

	lea	ecx, DWORD PTR [eax+1]
	mov	DWORD PTR tv6914[ebp], ecx
	cmp	ecx, 4
	jge	SHORT $LN23@mean_int_a@2

; 1365 : 
; 1366 :   /* Fill in rest of Hessian by symmetry */
; 1367 :   for ( i = 1 ; i < 4 ; i++ )

	lea	ebx, DWORD PTR [eax*4+4]
	mov	DWORD PTR tv9670[ebp], ebx
	npad	3
$LL21@mean_int_a@2:

; 1369 :       for ( ii = 0 ; ii < SDIM ; ii++ )

	xor	edx, edx
	test	edi, edi
	jle	SHORT $LN20@mean_int_a@2
$LL101@mean_int_a@2:

; 1370 :         for ( jj = 0 ; jj < SDIM ; jj++ )

	xor	eax, eax
	test	edi, edi
	jle	SHORT $LN17@mean_int_a@2
	npad	4
$LL94@mean_int_a@2:

; 1371 :           e_info->hess[j][i][jj][ii] = e_info->hess[i][j][ii][jj];

	mov	ecx, DWORD PTR [esi+1340]
	mov	edi, DWORD PTR _i$[ebp]
	mov	edi, DWORD PTR [ecx+edi*4]
	mov	edi, DWORD PTR [edi+ebx]
	mov	ecx, DWORD PTR [ecx+ebx]
	mov	ebx, DWORD PTR _i$[ebp]
	mov	edi, DWORD PTR [edi+edx*4]
	mov	ecx, DWORD PTR [ecx+ebx*4]
	fld	QWORD PTR [edi+eax*8]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	ebx, DWORD PTR tv9670[ebp]
	fstp	QWORD PTR [ecx+edx*8]
	mov	edi, DWORD PTR _web+616
	inc	eax
	cmp	eax, edi
	jl	SHORT $LL94@mean_int_a@2
$LN17@mean_int_a@2:

; 1369 :       for ( ii = 0 ; ii < SDIM ; ii++ )

	inc	edx
	cmp	edx, edi
	jl	SHORT $LL101@mean_int_a@2
$LN20@mean_int_a@2:

; 1368 :     for ( j = i+1 ; j < 4 ; j++ )

	add	ebx, 4
	mov	DWORD PTR tv9670[ebp], ebx
	cmp	ebx, 16					; 00000010H
	jl	SHORT $LL21@mean_int_a@2
	mov	ecx, DWORD PTR tv6914[ebp]
$LN23@mean_int_a@2:

; 1365 : 
; 1366 :   /* Fill in rest of Hessian by symmetry */
; 1367 :   for ( i = 1 ; i < 4 ; i++ )

	mov	eax, ecx
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, 4
	jl	SHORT $LL95@mean_int_a@2

; 1372 : 
; 1373 :   for ( i = 1 ; i < 4 ; i++ )

	mov	DWORD PTR tv9984[ebp], 4
$LL97@mean_int_a@2:

; 1374 :     for ( j = 1 ; j < 4 ; j++ )

	mov	edx, 4
	npad	5
$LL9@mean_int_a@2:

; 1375 :       for ( ii = 0 ; ii < SDIM ; ii++ )

	xor	ecx, ecx
	test	edi, edi
	jle	$LN8@mean_int_a@2
	npad	6
$LL102@mean_int_a@2:

; 1376 :         for ( jj = 0 ; jj < SDIM ; jj++ )

	xor	eax, eax
	test	edi, edi
	jle	$LN5@mean_int_a@2
	npad	6
$LL93@mean_int_a@2:

; 1377 :         { e_info->hess[0][0][ii][jj] += e_info->hess[i][j][ii][jj];

	mov	edi, DWORD PTR [esi+1340]
	mov	ebx, DWORD PTR [edi]
	mov	ebx, DWORD PTR [ebx]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	lea	ebx, DWORD PTR [ebx+eax*8]
	mov	DWORD PTR tv8100[ebp], ebx
	mov	ebx, DWORD PTR tv9984[ebp]
	mov	edi, DWORD PTR [edi+ebx]
	mov	edi, DWORD PTR [edi+edx]
	mov	edi, DWORD PTR [edi+ecx*4]
	fld	QWORD PTR [edi+eax*8]
	mov	edi, DWORD PTR tv8100[ebp]
	fadd	QWORD PTR [edi]
	fstp	QWORD PTR [edi]

; 1378 :           e_info->hess[0][j][ii][jj] -= e_info->hess[i][j][ii][jj];

	mov	edi, DWORD PTR [esi+1340]
	mov	ebx, DWORD PTR [edi]
	mov	ebx, DWORD PTR [edx+ebx]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	lea	ebx, DWORD PTR [ebx+eax*8]
	mov	DWORD PTR tv9947[ebp], ebx
	mov	ebx, DWORD PTR tv9984[ebp]
	mov	edi, DWORD PTR [edi+ebx]
	mov	edi, DWORD PTR [edi+edx]
	mov	ebx, DWORD PTR [edi+ecx*4]
	mov	edi, DWORD PTR tv9947[ebp]
	fld	QWORD PTR [edi]
	fsub	QWORD PTR [ebx+eax*8]

; 1379 :           e_info->hess[i][0][ii][jj] -= e_info->hess[i][j][ii][jj];

	mov	ebx, DWORD PTR tv9984[ebp]
	fstp	QWORD PTR [edi]
	mov	edi, DWORD PTR [esi+1340]
	mov	edi, DWORD PTR [ebx+edi]
	mov	ebx, DWORD PTR [edi]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	mov	edi, DWORD PTR [edi+edx]
	fld	QWORD PTR [ebx+eax*8]
	mov	edi, DWORD PTR [edi+ecx*4]
	fsub	QWORD PTR [edi+eax*8]
	lea	ebx, DWORD PTR [ebx+eax*8]
	inc	eax
	fstp	QWORD PTR [ebx]
	mov	edi, DWORD PTR _web+616
	cmp	eax, edi
	jl	SHORT $LL93@mean_int_a@2
$LN5@mean_int_a@2:

; 1375 :       for ( ii = 0 ; ii < SDIM ; ii++ )

	inc	ecx
	cmp	ecx, edi
	jl	$LL102@mean_int_a@2
$LN8@mean_int_a@2:

; 1374 :     for ( j = 1 ; j < 4 ; j++ )

	add	edx, 4
	cmp	edx, 16					; 00000010H
	jl	$LL9@mean_int_a@2

; 1372 : 
; 1373 :   for ( i = 1 ; i < 4 ; i++ )

	mov	eax, DWORD PTR tv9984[ebp]
	add	eax, 4
	mov	DWORD PTR tv9984[ebp], eax
	cmp	eax, 16					; 00000010H
	jl	$LL97@mean_int_a@2

; 1380 :         }
; 1381 :   
; 1382 :   return value;

	fld	QWORD PTR _value$[ebp]
	pop	edi
	pop	esi
	pop	ebx

; 1383 : 
; 1384 : } // end mean_int_a_all()

	mov	esp, ebp
	pop	ebp
	ret	0
_mean_int_a_all ENDP
_TEXT	ENDS
PUBLIC	_mean_int_a_value
; Function compile flags: /Ogtp
;	COMDAT _mean_int_a_value
_TEXT	SEGMENT
_e_info$ = 8						; size = 4
_mean_int_a_value PROC					; COMDAT

; 1391 : {

	push	ebp
	mov	ebp, esp

; 1392 :   return mean_int_a_all(e_info,METHOD_VALUE);

	mov	eax, DWORD PTR _e_info$[ebp]
	push	1767					; 000006e7H
	push	eax
	call	_mean_int_a_all
	add	esp, 8

; 1393 : }

	pop	ebp
	ret	0
_mean_int_a_value ENDP
_TEXT	ENDS
PUBLIC	_mean_int_a_gradient
; Function compile flags: /Ogtp
;	COMDAT _mean_int_a_gradient
_TEXT	SEGMENT
_e_info$ = 8						; size = 4
_mean_int_a_gradient PROC				; COMDAT

; 1395 : {

	push	ebp
	mov	ebp, esp

; 1396 :   return mean_int_a_all(e_info,METHOD_GRADIENT);

	mov	eax, DWORD PTR _e_info$[ebp]
	push	4321					; 000010e1H
	push	eax
	call	_mean_int_a_all
	add	esp, 8

; 1397 : }

	pop	ebp
	ret	0
_mean_int_a_gradient ENDP
_TEXT	ENDS
PUBLIC	_mean_int_a_hessian
; Function compile flags: /Ogtp
;	COMDAT _mean_int_a_hessian
_TEXT	SEGMENT
_e_info$ = 8						; size = 4
_mean_int_a_hessian PROC				; COMDAT

; 1399 : {

	push	ebp
	mov	ebp, esp

; 1400 :   return mean_int_a_all(e_info,METHOD_HESSIAN);

	mov	eax, DWORD PTR _e_info$[ebp]
	push	8763					; 0000223bH
	push	eax
	call	_mean_int_a_all
	add	esp, 8

; 1401 : }

	pop	ebp
	ret	0
_mean_int_a_hessian ENDP
_TEXT	ENDS
END
