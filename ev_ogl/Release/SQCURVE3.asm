; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\SQCURVE3.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	__real@0000000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	??_C@_0DG@BIFLAOOM@Cannot?5use?5self?9similarity?5with?5@ ; `string'
PUBLIC	??_C@_0P@BKNJOKJM@self_sim_coeff?$AA@		; `string'
PUBLIC	??_C@_0DH@PANJPLAG@star_perp_sq_mean_curvature?5meth@ ; `string'
PUBLIC	??_C@_0DJ@KCKLIHOL@star_normal_sq_mean_curvature?5me@ ; `string'
PUBLIC	??_C@_0DL@IFCOMKLA@star_eff_area_sq_mean_curvature?5@ ; `string'
PUBLIC	??_C@_0BM@CMOEBLOH@star_perp_sq_mean_curvature?$AA@ ; `string'
PUBLIC	??_C@_0BO@KCONOJAA@star_normal_sq_mean_curvature?$AA@ ; `string'
PUBLIC	??_C@_0CA@FBEOEGDF@star_eff_area_sq_mean_curvature?$AA@ ; `string'
PUBLIC	??_C@_0BH@FKMGJNJP@star_sq_mean_curvature?$AA@	; `string'
PUBLIC	??_C@_06CNJIKMCI@h_zero?$AA@			; `string'
PUBLIC	??_C@_0DB@EABKODGM@sq_mean_curvature?5method?5only?5fo@ ; `string'
PUBLIC	??_C@_0CO@CPKPAJGD@sq_mean_curvature?5method?5only?5fo@ ; `string'
PUBLIC	_star_sqcurve_method_init
EXTRN	_add_global:PROC
EXTRN	_self_similar_flag:DWORD
EXTRN	_star_perp_sq_mean_curvature_mi:DWORD
EXTRN	_star_normal_sq_mean_curvature_mi:DWORD
EXTRN	_star_eff_area_sq_mean_curvature_mi:DWORD
EXTRN	_kb_stricmp:PROC
EXTRN	_basic_gen_methods:BYTE
EXTRN	_star_sq_mean_curvature_mi:DWORD
EXTRN	_lookup_global:PROC
EXTRN	_h0_attr:DWORD
EXTRN	_find_extra:PROC
EXTRN	_gen_quant_list:DWORD
EXTRN	_sq_mean_curv_quantity_num:DWORD
EXTRN	_dymem:DWORD
EXTRN	_localbase:DWORD
EXTRN	_square_curvature_param:DWORD
EXTRN	_everything_quantities_flag:DWORD
EXTRN	_square_curvature_flag:DWORD
EXTRN	_kb_error:PROC
EXTRN	_web:BYTE
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_h0_value DQ	01H DUP (?)
_h0_flag DD	01H DUP (?)
_BSS	ENDS
;	COMDAT __real@0000000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\sqcurve3.c
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT ??_C@_0DG@BIFLAOOM@Cannot?5use?5self?9similarity?5with?5@
CONST	SEGMENT
??_C@_0DG@BIFLAOOM@Cannot?5use?5self?9similarity?5with?5@ DB 'Cannot use '
	DB	'self-similarity with star_sq_... methods.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BKNJOKJM@self_sim_coeff?$AA@
CONST	SEGMENT
??_C@_0P@BKNJOKJM@self_sim_coeff?$AA@ DB 'self_sim_coeff', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@PANJPLAG@star_perp_sq_mean_curvature?5meth@
CONST	SEGMENT
??_C@_0DH@PANJPLAG@star_perp_sq_mean_curvature?5meth@ DB 'star_perp_sq_me'
	DB	'an_curvature method only for 3D space.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@KCKLIHOL@star_normal_sq_mean_curvature?5me@
CONST	SEGMENT
??_C@_0DJ@KCKLIHOL@star_normal_sq_mean_curvature?5me@ DB 'star_normal_sq_'
	DB	'mean_curvature method only for 3D space.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@IFCOMKLA@star_eff_area_sq_mean_curvature?5@
CONST	SEGMENT
??_C@_0DL@IFCOMKLA@star_eff_area_sq_mean_curvature?5@ DB 'star_eff_area_s'
	DB	'q_mean_curvature method only for 3D space.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@CMOEBLOH@star_perp_sq_mean_curvature?$AA@
CONST	SEGMENT
??_C@_0BM@CMOEBLOH@star_perp_sq_mean_curvature?$AA@ DB 'star_perp_sq_mean'
	DB	'_curvature', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@KCONOJAA@star_normal_sq_mean_curvature?$AA@
CONST	SEGMENT
??_C@_0BO@KCONOJAA@star_normal_sq_mean_curvature?$AA@ DB 'star_normal_sq_'
	DB	'mean_curvature', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FBEOEGDF@star_eff_area_sq_mean_curvature?$AA@
CONST	SEGMENT
??_C@_0CA@FBEOEGDF@star_eff_area_sq_mean_curvature?$AA@ DB 'star_eff_area'
	DB	'_sq_mean_curvature', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FKMGJNJP@star_sq_mean_curvature?$AA@
CONST	SEGMENT
??_C@_0BH@FKMGJNJP@star_sq_mean_curvature?$AA@ DB 'star_sq_mean_curvature'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_06CNJIKMCI@h_zero?$AA@
CONST	SEGMENT
??_C@_06CNJIKMCI@h_zero?$AA@ DB 'h_zero', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@EABKODGM@sq_mean_curvature?5method?5only?5fo@
CONST	SEGMENT
??_C@_0DB@EABKODGM@sq_mean_curvature?5method?5only?5fo@ DB 'sq_mean_curva'
	DB	'ture method only for LINEAR model.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@CPKPAJGD@sq_mean_curvature?5method?5only?5fo@
CONST	SEGMENT
??_C@_0CO@CPKPAJGD@sq_mean_curvature?5method?5only?5fo@ DB 'sq_mean_curva'
	DB	'ture method only for 2D facets.', 0aH, 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _star_sqcurve_method_init
_TEXT	SEGMENT
_eltype$ = -4						; size = 4
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_star_sqcurve_method_init PROC				; COMDAT

; 53   : { int k,n;

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi

; 54   :   struct gen_quant_method *gm;
; 55   :   int eltype;
; 56   : 
; 57   :   if ( web.dimension != 2 )

	mov	esi, 2
	cmp	DWORD PTR _web+620, esi
	je	SHORT $LN23@star_sqcur

; 58   :     kb_error(1610,"sq_mean_curvature method only for 2D facets.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CO@CPKPAJGD@sq_mean_curvature?5method?5only?5fo@
	push	1610					; 0000064aH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN23@star_sqcur:

; 59   : 
; 60   :   if ( web.modeltype != LINEAR )

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN22@star_sqcur

; 61   :      kb_error(1611,"sq_mean_curvature method only for LINEAR model.\n",
; 62   :         RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DB@EABKODGM@sq_mean_curvature?5method?5only?5fo@
	push	1611					; 0000064bH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN22@star_sqcur:

; 63   : 
; 64   :   if ( everything_quantities_flag & square_curvature_flag )

	mov	eax, DWORD PTR _square_curvature_flag
	test	DWORD PTR _everything_quantities_flag, eax
	je	SHORT $LN55@star_sqcur

; 65   :      GEN_QUANT(sq_mean_curv_quantity_num)->modulus = 
; 66   :         globals(square_curvature_param)->value.real;

	mov	eax, DWORD PTR _square_curvature_param
	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN26@star_sqcur
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN28@star_sqcur
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN27@star_sqcur
$LN28@star_sqcur:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN26@star_sqcur
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN27@star_sqcur
$LN26@star_sqcur:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN27@star_sqcur:
	mov	ecx, DWORD PTR _sq_mean_curv_quantity_num
	fld	QWORD PTR [eax+64]
	mov	edx, DWORD PTR _gen_quant_list
	imul	ecx, 368				; 00000170H
	fstp	QWORD PTR [ecx+edx+176]
$LN55@star_sqcur:

; 67   : 
; 68   :   /* see if using (H - H_0)^2 adjustment */
; 69   :   h0_flag = 0;
; 70   :   h0_attr = find_extra("h_zero",&eltype);

	push	edi
	lea	eax, DWORD PTR _eltype$[ebp]
	push	eax
	xor	edi, edi
	push	OFFSET ??_C@_06CNJIKMCI@h_zero?$AA@
	mov	DWORD PTR _h0_flag, edi
	call	_find_extra
	add	esp, 8
	mov	DWORD PTR _h0_attr, eax

; 71   :   if ( h0_attr >= 0 )

	cmp	eax, edi
	jl	SHORT $LN20@star_sqcur

; 72   :     h0_flag = H0_IN_ATTR; 

	mov	DWORD PTR _h0_flag, esi

; 73   :   else

	jmp	SHORT $LN18@star_sqcur
$LN20@star_sqcur:

; 74   :   { k = lookup_global("h_zero");

	push	OFFSET ??_C@_06CNJIKMCI@h_zero?$AA@
	call	_lookup_global
	add	esp, 4

; 75   :     if ( k >= 0 ) 

	cmp	eax, edi
	jl	SHORT $LN18@star_sqcur

; 76   :     { h0_flag = H0_IN_GLOBAL;
; 77   :       h0_value = globals(k)->value.real;

	mov	ecx, eax
	and	ecx, -16777216				; ff000000H
	mov	DWORD PTR _h0_flag, 1
	cmp	ecx, 268435456				; 10000000H
	je	SHORT $LN32@star_sqcur
	cmp	ecx, 805306368				; 30000000H
	jne	SHORT $LN34@star_sqcur
	mov	ecx, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN33@star_sqcur
$LN34@star_sqcur:
	cmp	ecx, 536870912				; 20000000H
	jne	SHORT $LN32@star_sqcur
	mov	edx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN33@star_sqcur
$LN32@star_sqcur:
	mov	ecx, DWORD PTR _web+5652
	and	eax, 16777215				; 00ffffffH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax]
$LN33@star_sqcur:
	fld	QWORD PTR [eax+64]
	fstp	QWORD PTR _h0_value
$LN18@star_sqcur:

; 78   :     }
; 79   :   }
; 80   : 
; 81   :   if ( star_sq_mean_curvature_mi < 0 )

	cmp	DWORD PTR _star_sq_mean_curvature_mi, edi
	jge	SHORT $LN56@star_sqcur

; 82   :   { /* see what method indices correspond to what methods */
; 83   :      for ( n=0,gm = basic_gen_methods ; gm->name[0] != ' ' ; gm++,n++ )

	cmp	BYTE PTR _basic_gen_methods, 32		; 00000020H
	mov	esi, OFFSET _basic_gen_methods
	je	SHORT $LN56@star_sqcur
	npad	4
$LL16@star_sqcur:

; 84   :      { if ( stricmp(gm->name,"star_sq_mean_curvature") == 0 ) 

	push	OFFSET ??_C@_0BH@FKMGJNJP@star_sq_mean_curvature?$AA@
	push	esi
	call	_kb_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@star_sqcur

; 85   :             star_sq_mean_curvature_mi = n;

	mov	DWORD PTR _star_sq_mean_curvature_mi, edi
$LN13@star_sqcur:

; 86   :        if ( stricmp(gm->name,"star_eff_area_sq_mean_curvature") == 0 ) 

	push	OFFSET ??_C@_0CA@FBEOEGDF@star_eff_area_sq_mean_curvature?$AA@
	push	esi
	call	_kb_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN12@star_sqcur

; 87   :             star_eff_area_sq_mean_curvature_mi = n;

	mov	DWORD PTR _star_eff_area_sq_mean_curvature_mi, edi
$LN12@star_sqcur:

; 88   :        if ( stricmp(gm->name,"star_normal_sq_mean_curvature") == 0 ) 

	push	OFFSET ??_C@_0BO@KCONOJAA@star_normal_sq_mean_curvature?$AA@
	push	esi
	call	_kb_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN11@star_sqcur

; 89   :             star_normal_sq_mean_curvature_mi = n;

	mov	DWORD PTR _star_normal_sq_mean_curvature_mi, edi
$LN11@star_sqcur:

; 90   :        if ( stricmp(gm->name,"star_perp_sq_mean_curvature") == 0 ) 

	push	OFFSET ??_C@_0BM@CMOEBLOH@star_perp_sq_mean_curvature?$AA@
	push	esi
	call	_kb_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN15@star_sqcur

; 91   :             star_perp_sq_mean_curvature_mi = n;

	mov	DWORD PTR _star_perp_sq_mean_curvature_mi, edi
$LN15@star_sqcur:

; 82   :   { /* see what method indices correspond to what methods */
; 83   :      for ( n=0,gm = basic_gen_methods ; gm->name[0] != ' ' ; gm++,n++ )

	add	esi, 160				; 000000a0H
	inc	edi
	cmp	BYTE PTR [esi], 32			; 00000020H
	jne	SHORT $LL16@star_sqcur
$LN56@star_sqcur:

; 92   :      }
; 93   :   }
; 94   :   if ( mi->gen_method == star_eff_area_sq_mean_curvature_mi )

	mov	esi, DWORD PTR _mi$[ebp]
	mov	ecx, DWORD PTR [esi+148]
	mov	edi, 3
	cmp	ecx, DWORD PTR _star_eff_area_sq_mean_curvature_mi
	jne	SHORT $LN54@star_sqcur

; 95   :       if ( SDIM < 3 )

	cmp	DWORD PTR _web+616, edi
	jge	SHORT $LN54@star_sqcur

; 96   :              kb_error(1612,"star_eff_area_sq_mean_curvature method only for 3D space.\n",
; 97   :                 RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DL@IFCOMKLA@star_eff_area_sq_mean_curvature?5@
	push	1612					; 0000064cH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN54@star_sqcur:

; 98   :   if ( mi->gen_method == star_normal_sq_mean_curvature_mi )

	mov	edx, DWORD PTR [esi+148]
	cmp	edx, DWORD PTR _star_normal_sq_mean_curvature_mi
	jne	SHORT $LN6@star_sqcur

; 99   :    if ( SDIM < 3 )

	cmp	DWORD PTR _web+616, edi
	jge	SHORT $LN6@star_sqcur

; 100  :      kb_error(1613,"star_normal_sq_mean_curvature method only for 3D space.\n",
; 101  :                 RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DJ@KCKLIHOL@star_normal_sq_mean_curvature?5me@
	push	1613					; 0000064dH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN6@star_sqcur:

; 102  : 
; 103  :   if ( mi->gen_method == star_perp_sq_mean_curvature_mi )

	mov	eax, DWORD PTR _star_perp_sq_mean_curvature_mi
	cmp	DWORD PTR [esi+148], eax
	jne	SHORT $LN4@star_sqcur

; 104  :    if ( SDIM < 3 )

	cmp	DWORD PTR _web+616, edi
	jge	SHORT $LN4@star_sqcur

; 105  :      kb_error(2810,"star_perp_sq_mean_curvature method only for 3D space.\n",
; 106  :                 RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DH@PANJPLAG@star_perp_sq_mean_curvature?5meth@
	push	2810					; 00000afaH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN4@star_sqcur:

; 107  : 
; 108  :   if ( self_similar_flag )

	cmp	DWORD PTR _self_similar_flag, 0
	pop	edi
	je	$LN1@star_sqcur

; 109  :   { int param = lookup_global(SELFSIM_NAME);

	push	OFFSET ??_C@_0P@BKNJOKJM@self_sim_coeff?$AA@
	call	_lookup_global

; 110  :     kb_error(1614,"Cannot use self-similarity with star_sq_... methods.\n",
; 111  :       RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DG@BIFLAOOM@Cannot?5use?5self?9similarity?5with?5@
	push	1614					; 0000064eH
	mov	esi, eax
	call	_kb_error
	add	esp, 16					; 00000010H

; 112  : 
; 113  :     if ( param < 0 ) /* missing, so add */

	test	esi, esi
	jns	$LN2@star_sqcur

; 114  :     { param = add_global(SELFSIM_NAME);

	push	OFFSET ??_C@_0P@BKNJOKJM@self_sim_coeff?$AA@
	call	_add_global

; 115  :       globals(param)->value.real = 1.0;  /* default */

	mov	edx, eax
	and	edx, -16777216				; ff000000H
	add	esp, 4
	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN38@star_sqcur
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN40@star_sqcur
	mov	esi, DWORD PTR _localbase
	and	eax, 16777215				; 00ffffffH
	mov	ecx, eax
	imul	ecx, 224				; 000000e0H
	add	ecx, DWORD PTR [esi]
	jmp	SHORT $LN39@star_sqcur
$LN40@star_sqcur:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN38@star_sqcur
	mov	ecx, DWORD PTR _web+5656
	and	eax, 16777215				; 00ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN39@star_sqcur
$LN38@star_sqcur:
	mov	ecx, DWORD PTR _web+5652
	mov	esi, DWORD PTR _dymem
	and	eax, 16777215				; 00ffffffH
	lea	ecx, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR [ecx+esi]
$LN39@star_sqcur:
	fld1
	fstp	QWORD PTR [ecx+64]

; 116  :       globals(param)->flags |=  ORDINARY_PARAM | RECALC_PARAMETER | ALWAYS_RECALC;

	cmp	edx, 268435456				; 10000000H
	je	SHORT $LN44@star_sqcur
	cmp	edx, 805306368				; 30000000H
	jne	SHORT $LN46@star_sqcur
	mov	edx, DWORD PTR _localbase
	imul	eax, 224				; 000000e0H
	add	eax, DWORD PTR [edx]
	jmp	SHORT $LN45@star_sqcur
$LN46@star_sqcur:
	cmp	edx, 536870912				; 20000000H
	jne	SHORT $LN44@star_sqcur
	mov	ecx, DWORD PTR _web+5656
	mov	eax, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN45@star_sqcur
$LN44@star_sqcur:
	mov	edx, DWORD PTR _web+5652
	mov	ecx, DWORD PTR _dymem
	lea	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ecx]
$LN45@star_sqcur:
	or	DWORD PTR [eax+192], 134217737		; 08000009H
$LN2@star_sqcur:

; 117  :     }
; 118  :     if ( h0_flag == 0 ) { h0_flag = H0_IN_GLOBAL; h0_value = 0.0; }

	cmp	DWORD PTR _h0_flag, 0
	jne	SHORT $LN1@star_sqcur
	fldz
	mov	DWORD PTR _h0_flag, 1
	fstp	QWORD PTR _h0_value
$LN1@star_sqcur:
	pop	esi

; 119  :   }
; 120  : } // end star_sqcurve_method_init()

	mov	esp, ebp
	pop	ebp
	ret	0
_star_sqcurve_method_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DB@LNJPCKCN@Star?5sq?5curvature?5hessian?5infini@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	__real@7e37e43c8800759c
PUBLIC	__real@fe37e43c8800759c
PUBLIC	__real@3fd0000000000000
PUBLIC	??_C@_0DA@GLBEFEEH@Can?5only?5use?5h_zero?5with?5star_no@ ; `string'
PUBLIC	__real@bff8000000000000
PUBLIC	__real@3ff8000000000000
PUBLIC	__real@bfe0000000000000
PUBLIC	__real@c000000000000000
PUBLIC	__real@4010000000000000
PUBLIC	__real@3f847ae147ae147b
PUBLIC	__real@4008000000000000
PUBLIC	__real@3eb0c6f7a0b5ed8d
PUBLIC	__real@3fe8000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@3fc0000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	??_C@_0L@CMLMDOAO@SQCURVE3?4C?$AA@		; `string'
PUBLIC	_v_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_star_sqcurve_method_all
EXTRN	_free_matrix3:PROC
EXTRN	_free_matrix:PROC
EXTRN	_myfree:PROC
EXTRN	_errmsg:BYTE
EXTRN	_sprintf:PROC
EXTRN	_elnames:BYTE
EXTRN	_kb_dmatrix3:PROC
EXTRN	_rotorder:DWORD
EXTRN	_sym_flags:DWORD
EXTRN	_matvec_mul:PROC
EXTRN	_constr_proj_matrix_wall:PROC
EXTRN	_cross_prod:PROC
EXTRN	_dot:PROC
EXTRN	_kb_dmatrix:PROC
EXTRN	_kb_calloc:PROC
EXTRN	_meth_inst_list:DWORD
EXTRN	_mat3d_setup:PROC
EXTRN	_mat2d_setup:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	__CIsqrt:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_0DB@LNJPCKCN@Star?5sq?5curvature?5hessian?5infini@
CONST	SEGMENT
??_C@_0DB@LNJPCKCN@Star?5sq?5curvature?5hessian?5infini@ DB 'Star sq curv'
	DB	'ature hessian infinite at vertex %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT __real@7e37e43c8800759c
CONST	SEGMENT
__real@7e37e43c8800759c DQ 07e37e43c8800759cr	; 1e+300
CONST	ENDS
;	COMDAT __real@fe37e43c8800759c
CONST	SEGMENT
__real@fe37e43c8800759c DQ 0fe37e43c8800759cr	; -1e+300
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT ??_C@_0DA@GLBEFEEH@Can?5only?5use?5h_zero?5with?5star_no@
CONST	SEGMENT
??_C@_0DA@GLBEFEEH@Can?5only?5use?5h_zero?5with?5star_no@ DB 'Can only us'
	DB	'e h_zero with star_normal_sq_curve.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT __real@bff8000000000000
CONST	SEGMENT
__real@bff8000000000000 DQ 0bff8000000000000r	; -1.5
CONST	ENDS
;	COMDAT __real@3ff8000000000000
CONST	SEGMENT
__real@3ff8000000000000 DQ 03ff8000000000000r	; 1.5
CONST	ENDS
;	COMDAT __real@bfe0000000000000
CONST	SEGMENT
__real@bfe0000000000000 DQ 0bfe0000000000000r	; -0.5
CONST	ENDS
;	COMDAT __real@c000000000000000
CONST	SEGMENT
__real@c000000000000000 DQ 0c000000000000000r	; -2
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@3f847ae147ae147b
CONST	SEGMENT
__real@3f847ae147ae147b DQ 03f847ae147ae147br	; 0.01
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@3eb0c6f7a0b5ed8d
CONST	SEGMENT
__real@3eb0c6f7a0b5ed8d DQ 03eb0c6f7a0b5ed8dr	; 1e-006
CONST	ENDS
;	COMDAT __real@3fe8000000000000
CONST	SEGMENT
__real@3fe8000000000000 DQ 03fe8000000000000r	; 0.75
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3fc0000000000000
CONST	SEGMENT
__real@3fc0000000000000 DQ 03fc0000000000000r	; 0.125
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT ??_C@_0L@CMLMDOAO@SQCURVE3?4C?$AA@
CONST	SEGMENT
??_C@_0L@CMLMDOAO@SQCURVE3?4C?$AA@ DB 'SQCURVE3.C', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _star_sqcurve_method_all
_TEXT	SEGMENT
_ddss11qXvS$ = -116084					; size = 8960
_ds1qXvS$ = -107124					; size = 960
_projqXvS$ = -106164					; size = 24
tv20258 = -106140					; size = 4
tv20275 = -106136					; size = 4
tv20293 = -106132					; size = 4
tv20272 = -106128					; size = 4
tv20266 = -106124					; size = 4
tv20263 = -106120					; size = 4
_an75$ = -106116					; size = 8
_afnfn$ = -106108					; size = 8
tv28967 = -106100					; size = 4
_afffffnfnfnfn$ = -106096				; size = 8
_ffaa$ = -106088					; size = 8
_fffffnfnfn$ = -106080					; size = 8
_a75$ = -106072						; size = 8
_ffafnfnfn$ = -106064					; size = 8
_aa75$ = -106056					; size = 8
_fnn75$ = -106048					; size = 8
_ffaaa$ = -106040					; size = 8
_ann75$ = -106032					; size = 8
_fn75$ = -106024					; size = 8
_fffnfn$ = -106016					; size = 8
_fnna$ = -106008					; size = 8
_afffnfn$ = -106000					; size = 8
tv28957 = -105992					; size = 4
_ffn75$ = -105988					; size = 8
_fnnna$ = -105980					; size = 8
_fffffnfn$ = -105972					; size = 8
_fffffnfnfna$ = -105964					; size = 8
tv26848 = -105956					; size = 4
tv20278 = -105956					; size = 4
_s2f$89385 = -105952					; size = 8
tv26840 = -105948					; size = 4
tv24610 = -105948					; size = 4
tv20287 = -105948					; size = 4
_s1f$89384 = -105944					; size = 8
tv26844 = -105940					; size = 4
tv24614 = -105940					; size = 4
tv20281 = -105940					; size = 4
_energy$ = -105936					; size = 8
_dssf$89383 = -105928					; size = 8
tv26836 = -105924					; size = 4
tv24606 = -105924					; size = 4
tv20296 = -105924					; size = 4
tv28977 = -105920					; size = 4
_h02$89402 = -105920					; size = 4
tv28972 = -105916					; size = 4
_h20$89403 = -105916					; size = 4
tv28907 = -105912					; size = 4
_h01$89404 = -105912					; size = 4
_s$ = -105908						; size = 4
_a$ = -105904						; size = 4
_ddAdv1dv1$ = -105900					; size = 4
_nn$ = -105896						; size = 8
tv13695 = -105888					; size = 8
tv29460 = -105884					; size = 4
tv29320 = -105884					; size = 4
tv27661 = -105884					; size = 4
tv26856 = -105884					; size = 4
tv25063 = -105884					; size = 4
tv24622 = -105884					; size = 4
tv20308 = -105884					; size = 4
_h12$89397 = -105884					; size = 4
_co3$89382 = -105880					; size = 8
tv26828 = -105876					; size = 4
tv24598 = -105876					; size = 4
tv20302 = -105876					; size = 4
tv13689 = -105872					; size = 8
tv29457 = -105868					; size = 4
tv27655 = -105868					; size = 4
tv26852 = -105868					; size = 4
tv25059 = -105868					; size = 4
tv24618 = -105868					; size = 4
tv20329 = -105868					; size = 4
tv13208 = -105868					; size = 4
_h11$89396 = -105868					; size = 4
tv28987 = -105864					; size = 4
tv26816 = -105864					; size = 4
tv25075 = -105864					; size = 4
tv24590 = -105864					; size = 4
_h22$89399 = -105864					; size = 4
tv28962 = -105860					; size = 4
tv26820 = -105860					; size = 4
tv25036 = -105860					; size = 4
tv24586 = -105860					; size = 4
tv14057 = -105860					; size = 4
_area$ = -105856					; size = 8
_hh0$ = -105848						; size = 8
_fn$ = -105840						; size = 8
_ddss22$ = -105832					; size = 4
_ddss21$ = -105828					; size = 4
_ds2$ = -105824						; size = 4
_dfndv2$ = -105820					; size = 4
_dfndv1$ = -105816					; size = 4
tv29596 = -105812					; size = 4
tv28997 = -105812					; size = 4
tv26798 = -105812					; size = 4
tv25067 = -105812					; size = 4
tv24582 = -105812					; size = 4
_h21$89398 = -105812					; size = 4
_final_edge$ = -105808					; size = 4
tv28982 = -105804					; size = 4
tv26739 = -105804					; size = 4
tv24505 = -105804					; size = 4
_h10$89401 = -105804					; size = 4
tv27348 = -105800					; size = 8
tv27298 = -105800					; size = 8
tv13634 = -105800					; size = 8
_ddff$89405 = -105800					; size = 8
tv26832 = -105796					; size = 4
tv24602 = -105796					; size = 4
tv20299 = -105796					; size = 4
_co1$89380 = -105792					; size = 8
_ff$ = -105792						; size = 8
_dnndv2$ = -105784					; size = 4
_dfdv2$ = -105780					; size = 4
_dfdv1$ = -105776					; size = 4
tv17815 = -105772					; size = 4
_ddAdv1dv2$ = -105772					; size = 4
tv18144 = -105768					; size = 4
_ddAdv2dv2$ = -105768					; size = 4
tv18141 = -105764					; size = 4
_ddAdv2dv1$ = -105764					; size = 4
tv26754 = -105760					; size = 4
tv24520 = -105760					; size = 4
tv15312 = -105760					; size = 4
tv14240 = -105760					; size = 4
tv6688 = -105760					; size = 4
tv28992 = -105756					; size = 4
tv26759 = -105756					; size = 4
tv24525 = -105756					; size = 4
tv15332 = -105756					; size = 4
tv14261 = -105756					; size = 4
_dffdv2$ = -105752					; size = 4
_variety$ = -105748					; size = 4
_ddss11$ = -105744					; size = 4
_ds1$ = -105740						; size = 4
_dnndv1$ = -105736					; size = 4
_dvnorm1$ = -105732					; size = 4
_dffdv1$ = -105728					; size = 4
tv17026 = -105724					; size = 4
_ddss12$ = -105724					; size = 4
tv13640 = -105720					; size = 8
_co2$89381 = -105720					; size = 8
tv28952 = -105716					; size = 4
tv26824 = -105716					; size = 4
tv24594 = -105716					; size = 4
tv29417 = -105712					; size = 4
tv26790 = -105712					; size = 4
tv24556 = -105712					; size = 4
tv21187 = -105712					; size = 4
tv4887 = -105712					; size = 4
_concount$ = -105712					; size = 4
_v_info$GSCopy$ = -105708				; size = 4
tv26794 = -105704					; size = 4
tv24552 = -105704					; size = 4
tv22725 = -105704					; size = 4
tv20323 = -105704					; size = 4
_s1s1$ = -105704					; size = 4
_pairs$ = -105700					; size = 4
tv25440 = -105696					; size = 4
tv23185 = -105696					; size = 4
tv22730 = -105696					; size = 4
tv20332 = -105696					; size = 4
_s1s2$ = -105696					; size = 4
tv29325 = -105692					; size = 4
tv26762 = -105692					; size = 4
tv24528 = -105692					; size = 4
tv21676 = -105692					; size = 4
tv19906 = -105692					; size = 4
tv17832 = -105692					; size = 4
tv29437 = -105688					; size = 4
tv28942 = -105688					; size = 4
tv28654 = -105688					; size = 4
tv28579 = -105688					; size = 4
tv28527 = -105688					; size = 4
tv28475 = -105688					; size = 4
tv28420 = -105688					; size = 4
tv26786 = -105688					; size = 4
tv24548 = -105688					; size = 4
tv26602 = -105684					; size = 4
tv24368 = -105684					; size = 4
tv22735 = -105684					; size = 4
tv20269 = -105684					; size = 4
_s2s2$ = -105684					; size = 4
tv29440 = -105680					; size = 4
tv28638 = -105680					; size = 4
tv28571 = -105680					; size = 4
tv28519 = -105680					; size = 4
tv28467 = -105680					; size = 4
tv28405 = -105680					; size = 4
tv26782 = -105680					; size = 4
tv24544 = -105680					; size = 4
tv20290 = -105680					; size = 4
tv18126 = -105676					; size = 4
_dvnorm2$ = -105676					; size = 4
tv29431 = -105672					; size = 4
tv24560 = -105672					; size = 4
_s2$ = -105672						; size = 4
tv26749 = -105668					; size = 4
tv24515 = -105668					; size = 4
tv20314 = -105668					; size = 4
tv17816 = -105668					; size = 4
tv15424 = -105668					; size = 4
tv15324 = -105668					; size = 4
tv14997 = -105668					; size = 4
tv14766 = -105668					; size = 4
tv14650 = -105668					; size = 4
tv14350 = -105668					; size = 4
tv14253 = -105668					; size = 4
tv12444 = -105668					; size = 4
tv20311 = -105664					; size = 4
tv18133 = -105664					; size = 4
tv12453 = -105664					; size = 4
_dAdv2$ = -105660					; size = 4
_dAdv1$ = -105656					; size = 4
tv28859 = -105652					; size = 4
tv26802 = -105652					; size = 4
tv24568 = -105652					; size = 4
tv21904 = -105652					; size = 4
tv18722 = -105652					; size = 4
tv18138 = -105652					; size = 4
_grad2$89306 = -105652					; size = 4
tv29422 = -105648					; size = 4
tv27098 = -105648					; size = 4
tv26752 = -105648					; size = 4
tv24518 = -105648					; size = 4
tv20718 = -105648					; size = 4
tv20147 = -105648					; size = 4
_h00$89400 = -105648					; size = 4
_j$ = -105648						; size = 4
tv27630 = -105644					; size = 4
tv27244 = -105644					; size = 4
tv26757 = -105644					; size = 4
tv24523 = -105644					; size = 4
_i$ = -105644						; size = 4
_proj$ = -105644					; size = 4
_ddfn$89408 = -105640					; size = 8
tv29463 = -105636					; size = 4
tv26860 = -105636					; size = 4
tv25071 = -105636					; size = 4
tv24626 = -105636					; size = 4
tv20305 = -105636					; size = 4
tv15112 = -105636					; size = 4
tv29328 = -105632					; size = 4
tv28947 = -105632					; size = 4
tv18729 = -105632					; size = 4
tv18119 = -105632					; size = 4
_grad2$89342 = -105632					; size = 4
_grad2$89322 = -105632					; size = 4
_grad2$89314 = -105632					; size = 4
tv28618 = -105628					; size = 4
tv28557 = -105628					; size = 4
tv28505 = -105628					; size = 4
tv28453 = -105628					; size = 4
tv28387 = -105628					; size = 4
tv27484 = -105628					; size = 4
tv26778 = -105628					; size = 4
tv22721 = -105628					; size = 4
tv20284 = -105628					; size = 4
tv15490 = -105628					; size = 4
tv15386 = -105628					; size = 4
tv14443 = -105628					; size = 4
tv14334 = -105628					; size = 4
tv27344 = -105624					; size = 8
tv27342 = -105624					; size = 8
tv27340 = -105624					; size = 8
tv27337 = -105624					; size = 8
tv27327 = -105624					; size = 8
tv27325 = -105624					; size = 8
tv27323 = -105624					; size = 8
tv27321 = -105624					; size = 8
tv27311 = -105624					; size = 8
tv27308 = -105624					; size = 8
tv27306 = -105624					; size = 8
tv27304 = -105624					; size = 8
tv27293 = -105624					; size = 8
tv27291 = -105624					; size = 8
tv27289 = -105624					; size = 8
tv27287 = -105624					; size = 8
tv4069 = -105624					; size = 8
tv3169 = -105624					; size = 8
_ddnn$89407 = -105624					; size = 8
_h$ = -105624						; size = 8
tv27275 = -105616					; size = 4
tv26744 = -105616					; size = 4
tv24974 = -105616					; size = 4
tv24510 = -105616					; size = 4
tv21365 = -105616					; size = 4
tv20320 = -105616					; size = 4
tv18115 = -105616					; size = 4
tv15402 = -105616					; size = 4
tv15306 = -105616					; size = 4
tv15090 = -105616					; size = 4
tv14991 = -105616					; size = 4
tv14759 = -105616					; size = 4
tv14644 = -105616					; size = 4
tv14343 = -105616					; size = 4
tv14234 = -105616					; size = 4
tv3154 = -105616					; size = 4
tv27352 = -105612					; size = 8
tv27350 = -105612					; size = 8
tv27346 = -105612					; size = 8
tv27335 = -105612					; size = 8
tv27333 = -105612					; size = 8
tv27331 = -105612					; size = 8
tv27329 = -105612					; size = 8
tv27319 = -105612					; size = 8
tv27317 = -105612					; size = 8
tv27315 = -105612					; size = 8
tv27313 = -105612					; size = 8
tv27302 = -105612					; size = 8
tv27300 = -105612					; size = 8
tv27295 = -105612					; size = 8
tv27285 = -105612					; size = 8
tv27283 = -105612					; size = 8
tv27281 = -105612					; size = 8
tv4352 = -105612					; size = 8
tv3452 = -105612					; size = 8
tv29454 = -105608					; size = 4
tv28466 = -105608					; size = 4
tv27725 = -105608					; size = 4
tv27696 = -105608					; size = 4
tv27683 = -105608					; size = 4
tv27361 = -105608					; size = 4
tv26735 = -105608					; size = 4
tv25049 = -105608					; size = 4
tv24501 = -105608					; size = 4
tv21361 = -105608					; size = 4
tv20338 = -105608					; size = 4
tv15469 = -105608					; size = 4
tv15440 = -105608					; size = 4
tv15394 = -105608					; size = 4
tv15349 = -105608					; size = 4
tv15279 = -105608					; size = 4
tv15148 = -105608					; size = 4
tv15082 = -105608					; size = 4
tv15017 = -105608					; size = 4
tv14962 = -105608					; size = 4
tv14817 = -105608					; size = 4
tv14751 = -105608					; size = 4
tv14670 = -105608					; size = 4
tv14608 = -105608					; size = 4
tv14420 = -105608					; size = 4
tv14391 = -105608					; size = 4
tv14360 = -105608					; size = 4
tv14278 = -105608					; size = 4
tv14196 = -105608					; size = 4
tv12639 = -105608					; size = 4
tv29443 = -105604					; size = 4
tv20317 = -105604					; size = 4
_s1$ = -105604						; size = 4
_k$ = -105604						; size = 4
tv29466 = -105600					; size = 4
tv29064 = -105600					; size = 4
tv29055 = -105600					; size = 4
tv27812 = -105600					; size = 4
tv27425 = -105600					; size = 4
tv27269 = -105600					; size = 4
tv26747 = -105600					; size = 4
tv24513 = -105600					; size = 4
tv18110 = -105600					; size = 4
tv16472 = -105600					; size = 4
tv15484 = -105600					; size = 4
tv15409 = -105600					; size = 4
tv15293 = -105600					; size = 4
tv15074 = -105600					; size = 4
tv14978 = -105600					; size = 4
tv14742 = -105600					; size = 4
tv14630 = -105600					; size = 4
tv14437 = -105600					; size = 4
tv14367 = -105600					; size = 4
tv14220 = -105600					; size = 4
tv13057 = -105600					; size = 4
tv12163 = -105600					; size = 4
tv4173 = -105600					; size = 4
tv3820 = -105600					; size = 4
tv2179 = -105600					; size = 4
_grad2$89331 = -105600					; size = 4
tv29434 = -105596					; size = 4
tv24564 = -105596					; size = 4
tv17120 = -105596					; size = 4
_kk$ = -105596						; size = 4
_eff_dim$ = -105592					; size = 4
_ds1xJ$ = -105588					; size = 11520
_ddss11xJ$ = -94068					; size = 92160
_aa$ = -1908						; size = 800
_projxJ$ = -1108					; size = 288
_antisymf$ = -820					; size = 288
_antisymnorm$ = -532					; size = 288
_ddssf2$89387 = -244					; size = 48
_ddssf1$89386 = -196					; size = 48
_temp$ = -148						; size = 48
_dAdv$ = -100						; size = 48
_vnorm$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_v_info$ = 8						; size = 4
_mode$ = 12						; size = 4
_star_sqcurve_method_all PROC				; COMDAT

; 134  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 116084				; 0001c574H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 135  :   int variety; /* PLAIN_SQ, EFF_SQ, NORMAL_SQ, PERP_SQ */
; 136  :   int pairs;
; 137  :   int i,j,k,ii,kk;
; 138  :   REAL energy=0.0,ff,fn=0.0,nn=0.0,area,g,h=0.0;

	fldz
	push	ebx
	mov	ebx, DWORD PTR _v_info$[ebp]
	fst	QWORD PTR _energy$[ebp]

; 139  :   REAL dAdv[MAXCOORD], *a, *d, *s1s1, *s1s2, *s2s2;
; 140  :   REAL vnorm[MAXCOORD];
; 141  :   REAL **dAdv1,**dAdv2,***dvnorm1,***dvnorm2,**ds2;
; 142  :   REAL ***ddAdv1dv1,***ddAdv2dv1,***ddAdv1dv2,***ddAdv2dv2;
; 143  :   REAL ***ddss12,***ddss21,***ddss22;
; 144  :   REAL **dfndv1,**dfndv2,**dffdv1,**dffdv2,**dnndv1,**dnndv2;
; 145  :   REAL ***dfdv1,***dfdv2;
; 146  :   REAL *s1,*s2;
; 147  :   REAL **s = v_info->sides[0];

	mov	eax, DWORD PTR [ebx+1276]
	fst	QWORD PTR _fn$[ebp]
	mov	ecx, DWORD PTR [eax]
	fst	QWORD PTR _nn$[ebp]
	fst	QWORD PTR _h$[ebp]
	push	esi

; 148  :   REAL temp[MAXCOORD];
; 149  :   REAL antisymnorm[MAXCOORD][MAXCOORD];
; 150  :   REAL antisymf[MAXCOORD][MAXCOORD];
; 151  :   REAL aa75=0.0,a75=0.0,ffaaa=0.0,ffaa=0.0,an75=0.0,ann75=0.0,fnnna=0.0;

	fst	QWORD PTR _aa75$[ebp]
	push	edi
	fst	QWORD PTR _a75$[ebp]

; 152  :   REAL fnna=0.0,fn75=0.0,fnn75=0.0,ffn75=0.0,afnfn=0.0,afffnfn=0.0,fffnfn=0.0;
; 153  :   REAL ffafnfnfn=0.0,afffffnfnfnfn=0.0,fffffnfnfna=0.0,fffffnfnfn=0.0,
; 154  :         fffffnfn=0.0; /* common subexpressions */
; 155  :   REAL aa[MAXV*5];
; 156  :   MAT2D(ds1,12*MAXV,MAXCOORD);

	push	6
	fst	QWORD PTR _ffaaa$[ebp]
	push	240					; 000000f0H
	fst	QWORD PTR _ffaa$[ebp]
	lea	edx, DWORD PTR _ds1xJ$[ebp]
	fst	QWORD PTR _an75$[ebp]
	push	edx
	fst	QWORD PTR _ann75$[ebp]
	lea	eax, DWORD PTR _ds1qXvS$[ebp]
	fst	QWORD PTR _fnnna$[ebp]
	push	eax
	fst	QWORD PTR _fnna$[ebp]

; 541  :       }
; 542  :       s1 = s[k]; s2 = s[(k+1==pairs)?final_edge:k+1];

	mov	DWORD PTR _v_info$GSCopy$[ebp], ebx
	fst	QWORD PTR _fn75$[ebp]
	mov	DWORD PTR _s$[ebp], ecx
	fst	QWORD PTR _fnn75$[ebp]
	fst	QWORD PTR _ffn75$[ebp]
	fst	QWORD PTR _afnfn$[ebp]
	fst	QWORD PTR _afffnfn$[ebp]
	fst	QWORD PTR _fffnfn$[ebp]
	fst	QWORD PTR _ffafnfnfn$[ebp]
	fst	QWORD PTR _afffffnfnfnfn$[ebp]
	fst	QWORD PTR _fffffnfnfna$[ebp]
	fst	QWORD PTR _fffffnfnfn$[ebp]
	fstp	QWORD PTR _fffffnfn$[ebp]
	call	_mat2d_setup
	push	6
	push	6
	push	320					; 00000140H
	lea	ecx, DWORD PTR _ddss11xJ$[ebp]
	push	ecx
	lea	edx, DWORD PTR _ddss11qXvS$[ebp]
	push	edx
	mov	DWORD PTR _ds1$[ebp], eax
	call	_mat3d_setup
	fldz
	push	6
	fstp	QWORD PTR _hh0$[ebp]
	mov	esi, eax
	push	6
	lea	eax, DWORD PTR _projxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _projqXvS$[ebp]
	push	ecx
	mov	DWORD PTR _ddss11$[ebp], esi
	call	_mat2d_setup
	mov	DWORD PTR _proj$[ebp], eax
	mov	eax, DWORD PTR [ebx+8]
	cdq
	xor	eax, edx
	sub	eax, edx
	imul	eax, 2928				; 00000b70H
	add	eax, DWORD PTR _meth_inst_list
	add	esp, 52					; 00000034H
	test	BYTE PTR [eax+144], 1
	mov	ecx, 3
	je	SHORT $LN265@star_sqcur@2

; 157  :   MAT3D(ddss11,16*MAXV,MAXCOORD,MAXCOORD);
; 158  :   REAL vertex_h0;
; 159  :   REAL hh0=0.0;  /* curvature adjusted for h-h0 */
; 160  :   int concount; /* number of constraints vertex is on */
; 161  :   int final_edge; /* of pairs; wrap to first for complete star */
; 162  :   MAT2D(proj,MAXCOORD,MAXCOORD);
; 163  :   struct method_instance *mi = METH_INSTANCE(v_info->method);
; 164  :   int eff_dim = (mi->flags2 & CALC_IN_3D) ? 3 : SDIM;

	mov	DWORD PTR _eff_dim$[ebp], ecx
	jmp	SHORT $LN266@star_sqcur@2
$LN265@star_sqcur@2:
	mov	edx, DWORD PTR _web+616
	mov	DWORD PTR _eff_dim$[ebp], edx
$LN266@star_sqcur@2:

; 165  : 
; 166  :   if ( mi->gen_method == star_normal_sq_mean_curvature_mi )

	mov	eax, DWORD PTR [eax+148]
	cmp	eax, DWORD PTR _star_normal_sq_mean_curvature_mi

; 167  :      variety = NORMAL_SQ;

	je	SHORT $LN1062@star_sqcur@2

; 168  :   else if ( mi->gen_method == star_perp_sq_mean_curvature_mi )

	cmp	eax, DWORD PTR _star_perp_sq_mean_curvature_mi
	jne	SHORT $LN260@star_sqcur@2

; 169  :      variety = PERP_SQ;

	mov	DWORD PTR _variety$[ebp], 4
	jmp	SHORT $LN258@star_sqcur@2
$LN260@star_sqcur@2:

; 170  :   else if ( mi->gen_method == star_eff_area_sq_mean_curvature_mi )

	xor	ecx, ecx
	cmp	eax, DWORD PTR _star_eff_area_sq_mean_curvature_mi
	sete	cl
	inc	ecx
$LN1062@star_sqcur@2:
	mov	DWORD PTR _variety$[ebp], ecx
$LN258@star_sqcur@2:

; 171  :      variety = EFF_SQ;
; 172  :   else variety = PLAIN_SQ;
; 173  : 
; 174  :   pairs = (v_info->vcount - 1);

	mov	eax, DWORD PTR [ebx+12]
	lea	edi, DWORD PTR [eax-1]
	mov	DWORD PTR _pairs$[ebp], edi

; 175  :   if ( pairs <= 0 ) return 0.0;

	test	edi, edi
	jg	SHORT $LN256@star_sqcur@2
	fldz
	pop	edi
	pop	esi
	pop	ebx

; 1053 :   }
; 1054 :   return energy;
; 1055 : } /* end star_sq_curve_method_all() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN256@star_sqcur@2:

; 176  :   if ( v_info->flags & INCOMPLETE_STAR )

	test	BYTE PTR [ebx+4], 1
	je	SHORT $LN255@star_sqcur@2

; 177  :   { pairs--;

	dec	edi
	mov	DWORD PTR _pairs$[ebp], edi

; 178  :     final_edge = pairs;

	mov	DWORD PTR _final_edge$[ebp], edi

; 179  :   }
; 180  :   else 

	jmp	SHORT $LN254@star_sqcur@2
$LN255@star_sqcur@2:

; 181  :     final_edge = 0;

	mov	DWORD PTR _final_edge$[ebp], 0
$LN254@star_sqcur@2:

; 182  : 
; 183  : 
; 184  :   if ( v_info->vcount > MAXV )
; 185  :   { a = (REAL*)mycalloc(5*pairs,sizeof(REAL));

	lea	edx, DWORD PTR [edi+edi*4]
	cmp	eax, 20					; 00000014H
	jle	SHORT $LN253@star_sqcur@2
	push	185					; 000000b9H
	push	OFFSET ??_C@_0L@CMLMDOAO@SQCURVE3?4C?$AA@
	push	8
	push	edx
	call	_kb_calloc
	mov	DWORD PTR _a$[ebp], eax

; 186  :     ds1 = dmatrix(0,12*v_info->vcount,0,SDIM-1);

	mov	eax, DWORD PTR _web+616
	push	186					; 000000baH
	push	OFFSET ??_C@_0L@CMLMDOAO@SQCURVE3?4C?$AA@
	dec	eax
	push	eax
	mov	eax, DWORD PTR [ebx+12]
	lea	ecx, DWORD PTR [eax+eax*2]
	add	ecx, ecx
	push	0
	add	ecx, ecx
	push	ecx
	push	0
	call	_kb_dmatrix
	add	esp, 40					; 00000028H
	mov	DWORD PTR _ds1$[ebp], eax

; 187  :   } else

	jmp	SHORT $LN252@star_sqcur@2
$LN253@star_sqcur@2:

; 188  :   { memset((char*)aa,0,sizeof(REAL)*5*pairs);

	add	edx, edx
	add	edx, edx
	add	edx, edx
	push	edx
	lea	eax, DWORD PTR _aa$[ebp]
	push	0
	push	eax
	call	_memset

; 189  :     a = aa;
; 190  :     memset((char*)ds1[0],0,sizeof(REAL)*12*v_info->vcount*MAXCOORD);

	mov	eax, DWORD PTR [ebx+12]
	lea	edx, DWORD PTR [eax+eax*8]
	mov	eax, DWORD PTR _ds1$[ebp]
	shl	edx, 6
	lea	ecx, DWORD PTR _aa$[ebp]
	push	edx
	mov	DWORD PTR _a$[ebp], ecx
	mov	ecx, DWORD PTR [eax]
	push	0
	push	ecx
	call	_memset
	add	esp, 24					; 00000018H
$LN252@star_sqcur@2:

; 191  :   }
; 192  :   d = a+pairs; s1s1 = d + pairs; s1s2 = s1s1 + pairs; s2s2 = s1s2 + pairs;

	mov	edx, DWORD PTR _a$[ebp]

; 193  :   ds2 = ds1 + pairs; dAdv1 = ds2 + pairs; dAdv2 = dAdv1 + pairs;
; 194  :   dfndv1 = dAdv2 + pairs; dfndv2 = dfndv1 + pairs; dffdv1 = dfndv2 + pairs;
; 195  :   dffdv2 = dffdv1 + pairs; dnndv1 = dffdv2 + pairs; dnndv2 = dnndv1 + pairs;
; 196  : 
; 197  :   /* basic dot products */
; 198  :   area = 0.0;

	fldz
	mov	ecx, DWORD PTR _ds1$[ebp]
	fstp	QWORD PTR _area$[ebp]
	lea	edx, DWORD PTR [edx+edi*8]
	lea	eax, DWORD PTR [edx+edi*8]
	mov	DWORD PTR _s1s1$[ebp], eax
	lea	eax, DWORD PTR [eax+edi*8]
	mov	DWORD PTR _s1s2$[ebp], eax
	lea	eax, DWORD PTR [eax+edi*8]
	mov	DWORD PTR _s2s2$[ebp], eax
	lea	eax, DWORD PTR [ecx+edi*4]
	mov	DWORD PTR _ds2$[ebp], eax
	lea	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR _dAdv1$[ebp], eax
	lea	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR _dAdv2$[ebp], eax
	lea	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR _dfndv1$[ebp], eax
	lea	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR _dfndv2$[ebp], eax
	lea	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR _dffdv1$[ebp], eax
	lea	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR _dffdv2$[ebp], eax
	lea	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR _dnndv1$[ebp], eax
	lea	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR _dnndv2$[ebp], eax

; 199  :   for ( j = 0 ; j < SDIM ; j++ ) dAdv[j] = vnorm[j] = 0.0;

	mov	eax, DWORD PTR _web+616
	test	eax, eax
	jle	SHORT $LN251@star_sqcur@2

; 191  :   }
; 192  :   d = a+pairs; s1s1 = d + pairs; s1s2 = s1s1 + pairs; s2s2 = s1s2 + pairs;

	lea	ecx, DWORD PTR [eax*8]
	mov	DWORD PTR tv16472[ebp], ecx
	shr	ecx, 2
	xor	eax, eax
	lea	edi, DWORD PTR _dAdv$[ebp]
	rep stosd

; 199  :   for ( j = 0 ; j < SDIM ; j++ ) dAdv[j] = vnorm[j] = 0.0;

	mov	ecx, DWORD PTR tv16472[ebp]
	shr	ecx, 2
	lea	edi, DWORD PTR _vnorm$[ebp]
	rep stosd
	mov	edi, DWORD PTR _pairs$[ebp]
$LN251@star_sqcur@2:

; 200  :   for ( k = 0 ; k < pairs ; k++ )

	test	edi, edi
	jle	$LN507@star_sqcur@2
	mov	esi, DWORD PTR _ds1$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	edi, DWORD PTR _s1s1$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv18110[ebp], eax
	mov	eax, DWORD PTR _s2s2$[ebp]
	sub	eax, edi
	sub	edx, DWORD PTR _s2s2$[ebp]
	mov	DWORD PTR tv18119[ebp], eax
	mov	eax, DWORD PTR _s1s2$[ebp]
	mov	ecx, DWORD PTR _pairs$[ebp]
	sub	eax, edi
	mov	DWORD PTR tv18126[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	sub	eax, edi
	mov	DWORD PTR tv18133[ebp], eax
	mov	eax, DWORD PTR _ds2$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv18138[ebp], eax
	mov	eax, DWORD PTR _dAdv2$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv18141[ebp], eax
	mov	eax, DWORD PTR _dAdv1$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv17832[ebp], 1
	mov	DWORD PTR tv18115[ebp], edx
	mov	DWORD PTR tv18144[ebp], eax
	mov	DWORD PTR tv4887[ebp], ecx
	npad	14
$LL248@star_sqcur@2:

; 201  :   { s1 = s[k]; s2 = s[(k+1==pairs)?final_edge:k+1];

	mov	edx, DWORD PTR tv18110[ebp]
	mov	eax, DWORD PTR [edx+esi]
	mov	DWORD PTR _s1$[ebp], eax
	mov	eax, DWORD PTR tv17832[ebp]
	cmp	eax, DWORD PTR _pairs$[ebp]
	jne	SHORT $LN267@star_sqcur@2
	mov	eax, DWORD PTR _final_edge$[ebp]
$LN267@star_sqcur@2:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]

; 202  :     s1s1[k] = dot(s1,s1,eff_dim);

	mov	eax, DWORD PTR _eff_dim$[ebp]
	push	eax
	mov	eax, DWORD PTR _s1$[ebp]
	push	eax
	push	eax
	mov	DWORD PTR _s2$[ebp], edx
	call	_dot
	fstp	QWORD PTR [edi]

; 203  :     s1s2[k] = dot(s1,s2,eff_dim);

	mov	ecx, DWORD PTR _eff_dim$[ebp]
	mov	edx, DWORD PTR _s2$[ebp]
	mov	eax, DWORD PTR _s1$[ebp]
	push	ecx
	push	edx
	push	eax
	call	_dot

; 204  :     s2s2[k] = dot(s2,s2,eff_dim);

	mov	edx, DWORD PTR _eff_dim$[ebp]
	mov	eax, DWORD PTR _s2$[ebp]
	mov	ecx, DWORD PTR tv18126[ebp]
	push	edx
	fstp	QWORD PTR [ecx+edi]
	push	eax
	push	eax
	call	_dot
	mov	eax, DWORD PTR tv18119[ebp]

; 205  :     d[k] = s1s1[k]*s2s2[k] - s1s2[k]*s1s2[k];

	mov	ecx, DWORD PTR tv18126[ebp]
	fst	QWORD PTR [eax+edi]
	fld	QWORD PTR [ecx+edi]
	mov	edx, DWORD PTR tv18115[ebp]
	fld	QWORD PTR [edi]
	add	eax, edi
	fmulp	ST(2), ST(0)
	add	esp, 36					; 00000024H
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	fst	QWORD PTR [eax+edx]

; 206  :     a[k] = 0.5*sqrt(d[k]);

	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000
	mov	eax, DWORD PTR tv18133[ebp]

; 207  :     area += a[k];
; 208  :     for ( j = 0 ; j < eff_dim ; j++ )

	xor	ecx, ecx
	cmp	DWORD PTR _eff_dim$[ebp], 4
	fst	QWORD PTR [eax+edi]
	mov	DWORD PTR _j$[ebp], ecx
	fadd	QWORD PTR _area$[ebp]
	fstp	QWORD PTR _area$[ebp]

; 213  :       dAdv[j] -= dAdv1[k][j] + dAdv2[k][j];

	fld	QWORD PTR __real@3fc0000000000000
	fld	QWORD PTR __real@4000000000000000
	jl	$LC412@star_sqcur@2

; 201  :   { s1 = s[k]; s2 = s[(k+1==pairs)?final_edge:k+1];

	mov	edx, DWORD PTR _s2$[ebp]
	lea	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR tv17026[ebp], ecx
	mov	ecx, DWORD PTR _s1$[ebp]

; 213  :       dAdv[j] -= dAdv1[k][j] + dAdv2[k][j];

	sub	edx, ecx
	lea	eax, DWORD PTR [ecx+8]
	neg	ecx
	mov	DWORD PTR tv17120[ebp], edx
	mov	DWORD PTR tv17815[ebp], ecx
	jmp	SHORT $LN413@star_sqcur@2
$LN502@star_sqcur@2:
	mov	ecx, DWORD PTR tv17815[ebp]

; 207  :     area += a[k];
; 208  :     for ( j = 0 ; j < eff_dim ; j++ )

$LN413@star_sqcur@2:

; 209  :     { ds1[k][j] = 2*(s2s2[k]*s1[j] - s1s2[k]*s2[j]);

	mov	edx, DWORD PTR [esi]
	fld	QWORD PTR [eax-8]
	lea	ecx, DWORD PTR [eax+ecx-8]
	add	edx, ecx
	mov	DWORD PTR tv28387[ebp], edx
	mov	edx, DWORD PTR tv18119[ebp]
	fmul	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv18126[ebp]
	fld	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv17026[ebp]
	fmul	QWORD PTR [edx-24]
	mov	edx, DWORD PTR tv28387[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 210  :       ds2[k][j] = 2*(s1s1[k]*s2[j] - s1s2[k]*s1[j]);

	mov	edx, DWORD PTR tv18138[ebp]
	mov	edx, DWORD PTR [edx+esi]
	add	edx, ecx
	mov	DWORD PTR tv28405[ebp], edx
	mov	edx, DWORD PTR tv17026[ebp]
	fld	QWORD PTR [edx-24]
	mov	edx, DWORD PTR tv18126[ebp]
	fmul	QWORD PTR [edi]
	fld	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv28405[ebp]
	fmul	QWORD PTR [eax-8]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 211  :       dAdv1[k][j] = 0.125/a[k]*ds1[k][j];

	mov	edx, DWORD PTR tv18144[ebp]
	mov	edx, DWORD PTR [edx+esi]
	fld	ST(1)
	add	edx, ecx
	mov	DWORD PTR tv28420[ebp], edx
	mov	edx, DWORD PTR tv18133[ebp]
	fdiv	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv28387[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv28420[ebp]
	fstp	QWORD PTR [edx]

; 212  :       dAdv2[k][j] = 0.125/a[k]*ds2[k][j];

	mov	edx, DWORD PTR tv18133[ebp]
	fld	ST(1)
	fdiv	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv28405[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv18141[ebp]
	mov	edx, DWORD PTR [edx+esi]
	fst	QWORD PTR [ecx+edx]

; 213  :       dAdv[j] -= dAdv1[k][j] + dAdv2[k][j];

	mov	edx, DWORD PTR _j$[ebp]
	lea	edx, DWORD PTR _dAdv$[ebp+edx*8]
	mov	DWORD PTR tv12444[ebp], edx
	mov	edx, DWORD PTR tv28420[ebp]
	fadd	QWORD PTR [edx]
	mov	edx, DWORD PTR tv12444[ebp]
	fsubr	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR [esi]
	fld	QWORD PTR [eax]
	lea	edx, DWORD PTR [ecx+edx+8]
	mov	DWORD PTR tv28453[ebp], edx
	mov	edx, DWORD PTR tv18119[ebp]
	fmul	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv18126[ebp]
	fld	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv17120[ebp]
	fmul	QWORD PTR [edx+eax]
	mov	edx, DWORD PTR tv28453[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR tv18138[ebp]
	mov	edx, DWORD PTR [edx+esi]
	lea	edx, DWORD PTR [edx+ecx+8]
	mov	DWORD PTR tv28467[ebp], edx
	mov	edx, DWORD PTR tv17120[ebp]
	fld	QWORD PTR [edx+eax]
	mov	edx, DWORD PTR tv18126[ebp]
	fmul	QWORD PTR [edi]
	fld	QWORD PTR [edx+edi]
	fmul	QWORD PTR [eax]
	fsubp	ST(1), ST(0)

; 210  :       ds2[k][j] = 2*(s1s1[k]*s2[j] - s1s2[k]*s1[j]);

	fmul	ST(0), ST(1)
	mov	edx, DWORD PTR tv28467[ebp]
	fstp	QWORD PTR [edx]

; 211  :       dAdv1[k][j] = 0.125/a[k]*ds1[k][j];

	mov	edx, DWORD PTR tv18144[ebp]
	mov	edx, DWORD PTR [edx+esi]
	fld	ST(1)
	lea	edx, DWORD PTR [ecx+edx+8]
	mov	DWORD PTR tv28475[ebp], edx
	mov	edx, DWORD PTR tv18133[ebp]
	fdiv	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv28453[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv28475[ebp]
	fstp	QWORD PTR [edx]

; 212  :       dAdv2[k][j] = 0.125/a[k]*ds2[k][j];

	mov	edx, DWORD PTR tv18133[ebp]
	fld	ST(1)
	fdiv	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv28467[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv18141[ebp]
	mov	edx, DWORD PTR [edx+esi]
	fst	QWORD PTR [edx+ecx+8]

; 213  :       dAdv[j] -= dAdv1[k][j] + dAdv2[k][j];

	mov	ecx, DWORD PTR tv28475[ebp]
	fadd	QWORD PTR [ecx]
	mov	edx, DWORD PTR tv17815[ebp]
	lea	ecx, DWORD PTR _dAdv$[ebp+edx]
	fsubr	QWORD PTR [eax+ecx]
	fstp	QWORD PTR [eax+ecx]
	lea	ecx, DWORD PTR [eax+edx+8]
	mov	edx, DWORD PTR [esi]
	fld	QWORD PTR [eax+8]
	add	edx, ecx
	mov	DWORD PTR tv28505[ebp], edx
	mov	edx, DWORD PTR tv18119[ebp]
	fmul	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv18126[ebp]
	fld	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv17026[ebp]
	fmul	QWORD PTR [edx-8]
	mov	edx, DWORD PTR tv28505[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR tv18138[ebp]
	mov	edx, DWORD PTR [edx+esi]
	add	edx, ecx
	mov	DWORD PTR tv28519[ebp], edx
	mov	edx, DWORD PTR tv17026[ebp]
	fld	QWORD PTR [edx-8]
	mov	edx, DWORD PTR tv18126[ebp]
	fmul	QWORD PTR [edi]
	fld	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv28519[ebp]
	fmul	QWORD PTR [eax+8]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR tv18144[ebp]
	mov	edx, DWORD PTR [edx+esi]
	fld	ST(1)
	add	edx, ecx
	mov	DWORD PTR tv28527[ebp], edx
	mov	edx, DWORD PTR tv18133[ebp]
	fdiv	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv28505[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv28527[ebp]
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR tv18133[ebp]
	fld	ST(1)
	fdiv	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv28519[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv18141[ebp]
	mov	edx, DWORD PTR [edx+esi]
	fst	QWORD PTR [ecx+edx]
	mov	ecx, DWORD PTR tv28527[ebp]
	fadd	QWORD PTR [ecx]
	mov	edx, DWORD PTR tv17815[ebp]
	lea	ecx, DWORD PTR _dAdv$[ebp+edx+8]
	fsubr	QWORD PTR [eax+ecx]
	fstp	QWORD PTR [eax+ecx]
	lea	ecx, DWORD PTR [eax+edx+16]
	mov	edx, DWORD PTR [esi]
	fld	QWORD PTR [eax+16]
	add	edx, ecx
	mov	DWORD PTR tv28557[ebp], edx
	mov	edx, DWORD PTR tv18119[ebp]
	fmul	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv18126[ebp]
	fld	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv17026[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv28557[ebp]
	add	eax, 32					; 00000020H
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR tv18138[ebp]
	mov	edx, DWORD PTR [edx+esi]
	add	edx, ecx
	mov	DWORD PTR tv28571[ebp], edx
	mov	edx, DWORD PTR tv17026[ebp]
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR tv18126[ebp]
	fmul	QWORD PTR [edi]
	add	DWORD PTR tv17026[ebp], 32		; 00000020H
	fld	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv28571[ebp]
	fmul	QWORD PTR [eax-16]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR tv18144[ebp]
	mov	edx, DWORD PTR [edx+esi]
	fld	ST(1)
	add	edx, ecx
	mov	DWORD PTR tv28579[ebp], edx
	mov	edx, DWORD PTR tv18133[ebp]
	fdiv	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv28557[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv28579[ebp]
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR tv18133[ebp]
	fld	ST(1)
	fdiv	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv28571[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv18141[ebp]
	mov	edx, DWORD PTR [edx+esi]
	fst	QWORD PTR [ecx+edx]
	mov	ecx, DWORD PTR tv28579[ebp]
	fadd	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv17815[ebp]
	mov	edx, DWORD PTR _eff_dim$[ebp]
	lea	ecx, DWORD PTR _dAdv$[ebp+ecx+16]
	fsubr	QWORD PTR [eax+ecx-32]
	add	edx, -3					; fffffffdH
	fstp	QWORD PTR [eax+ecx-32]
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 4
	mov	DWORD PTR _j$[ebp], ecx
	cmp	ecx, edx
	jl	$LN502@star_sqcur@2
$LC412@star_sqcur@2:

; 207  :     area += a[k];
; 208  :     for ( j = 0 ; j < eff_dim ; j++ )

	cmp	ecx, DWORD PTR _eff_dim$[ebp]
	jge	$LN541@star_sqcur@2
	mov	eax, DWORD PTR _s1$[ebp]
	mov	edx, DWORD PTR _s2$[ebp]
	sub	edx, eax
	mov	DWORD PTR tv17120[ebp], edx
	lea	edx, DWORD PTR _dAdv$[ebp]
	sub	edx, eax
	mov	DWORD PTR tv17816[ebp], edx
	jmp	SHORT $LC245@star_sqcur@2
$LN510@star_sqcur@2:
	mov	eax, DWORD PTR _s1$[ebp]
$LC245@star_sqcur@2:
	mov	edx, DWORD PTR [esi]

; 209  :     { ds1[k][j] = 2*(s2s2[k]*s1[j] - s1s2[k]*s2[j]);

	fld	QWORD PTR [eax+ecx*8]
	lea	edx, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR tv28618[ebp], edx
	mov	edx, DWORD PTR tv18119[ebp]
	fmul	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv18126[ebp]
	fld	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv17120[ebp]
	lea	eax, DWORD PTR [eax+ecx*8]
	fmul	QWORD PTR [edx+eax]
	mov	edx, DWORD PTR tv28618[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR tv18138[ebp]
	mov	edx, DWORD PTR [edx+esi]
	lea	edx, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR tv28638[ebp], edx

; 210  :       ds2[k][j] = 2*(s1s1[k]*s2[j] - s1s2[k]*s1[j]);

	mov	edx, DWORD PTR tv17120[ebp]
	fld	QWORD PTR [edx+eax]
	mov	edx, DWORD PTR tv18126[ebp]
	fmul	QWORD PTR [edi]
	fld	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv28638[ebp]
	fmul	QWORD PTR [eax]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR tv18144[ebp]
	mov	edx, DWORD PTR [edx+esi]

; 211  :       dAdv1[k][j] = 0.125/a[k]*ds1[k][j];

	fld	ST(1)
	lea	edx, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR tv28654[ebp], edx
	mov	edx, DWORD PTR tv18133[ebp]
	fdiv	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv28618[ebp]
	inc	ecx
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv28654[ebp]
	fstp	QWORD PTR [edx]

; 212  :       dAdv2[k][j] = 0.125/a[k]*ds2[k][j];

	mov	edx, DWORD PTR tv18133[ebp]
	fld	ST(1)
	fdiv	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv28638[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv18141[ebp]
	mov	edx, DWORD PTR [edx+esi]
	fst	QWORD PTR [edx+ecx*8-8]

; 213  :       dAdv[j] -= dAdv1[k][j] + dAdv2[k][j];

	mov	edx, DWORD PTR tv28654[ebp]
	fadd	QWORD PTR [edx]
	mov	edx, DWORD PTR tv17816[ebp]
	fsubr	QWORD PTR [edx+eax]
	fstp	QWORD PTR [edx+eax]
	cmp	ecx, DWORD PTR _eff_dim$[ebp]
	jl	$LN510@star_sqcur@2
$LN541@star_sqcur@2:

; 214  :     }
; 215  :     if ( variety != PLAIN_SQ )

	cmp	DWORD PTR _variety$[ebp], 1
	fstp	ST(0)
	fstp	ST(0)
	je	$LN247@star_sqcur@2

; 216  :     { cross_prod(s1,s2,temp);

	mov	ecx, DWORD PTR _s2$[ebp]
	mov	edx, DWORD PTR _s1$[ebp]
	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	push	ecx
	push	edx
	call	_cross_prod

; 217  :       for ( j = 0 ; j < eff_dim ; j++ )

	fld	QWORD PTR __real@3fe0000000000000
	add	esp, 12					; 0000000cH
	xor	eax, eax
	cmp	DWORD PTR _eff_dim$[ebp], 4
	jl	SHORT $LC415@star_sqcur@2
	mov	ecx, DWORD PTR _eff_dim$[ebp]
	add	ecx, -3					; fffffffdH
$LN416@star_sqcur@2:

; 218  :         vnorm[j] += 0.5*temp[j];

	fld	QWORD PTR _temp$[ebp+eax*8]
	add	eax, 4
	fmul	ST(0), ST(1)
	fadd	QWORD PTR _vnorm$[ebp+eax*8-32]
	fstp	QWORD PTR _vnorm$[ebp+eax*8-32]
	fld	QWORD PTR _temp$[ebp+eax*8-24]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR _vnorm$[ebp+eax*8-24]
	fstp	QWORD PTR _vnorm$[ebp+eax*8-24]
	fld	QWORD PTR _temp$[ebp+eax*8-16]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR _vnorm$[ebp+eax*8-16]
	fstp	QWORD PTR _vnorm$[ebp+eax*8-16]
	fld	QWORD PTR _temp$[ebp+eax*8-8]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR _vnorm$[ebp+eax*8-8]
	fstp	QWORD PTR _vnorm$[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LN416@star_sqcur@2
$LC415@star_sqcur@2:

; 217  :       for ( j = 0 ; j < eff_dim ; j++ )

	mov	ecx, DWORD PTR _eff_dim$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN549@star_sqcur@2
$LC241@star_sqcur@2:

; 218  :         vnorm[j] += 0.5*temp[j];

	fld	QWORD PTR _temp$[ebp+eax*8]
	inc	eax
	fmul	ST(0), ST(1)
	fadd	QWORD PTR _vnorm$[ebp+eax*8-8]
	fstp	QWORD PTR _vnorm$[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LC241@star_sqcur@2
$LN549@star_sqcur@2:

; 217  :       for ( j = 0 ; j < eff_dim ; j++ )

	fstp	ST(0)
$LN247@star_sqcur@2:

; 200  :   for ( k = 0 ; k < pairs ; k++ )

	mov	eax, 1
	add	DWORD PTR tv17832[ebp], eax
	add	edi, 8
	add	esi, 4
	sub	DWORD PTR tv4887[ebp], eax
	jne	$LL248@star_sqcur@2
	mov	esi, DWORD PTR _ddss11$[ebp]
$LN507@star_sqcur@2:

; 219  :     }
; 220  :   }
; 221  : 
; 222  :   /* constraint projection */
; 223  :   concount = constr_proj_matrix_wall(v_info->id,proj);

	mov	eax, DWORD PTR _proj$[ebp]
	mov	ecx, DWORD PTR [ebx]
	mov	edi, DWORD PTR _dffdv1$[ebp]
	push	eax
	push	ecx
	call	_constr_proj_matrix_wall
	add	esp, 8
	mov	DWORD PTR _concount$[ebp], eax

; 224  : 
; 225  :   if ( concount && (v_info->flags & INCOMPLETE_STAR) )

	test	eax, eax
	je	$LN238@star_sqcur@2
	test	BYTE PTR [ebx+4], 1
	je	$LN238@star_sqcur@2

; 226  :   { /* project force and normal to constraints. This is enough to take
; 227  :        care of energy and gradient, since force and energy occur only in
; 228  :        dot products.
; 229  :        */
; 230  :     int i;
; 231  :     for ( i = 0 ; i < eff_dim ; i++ )

	cmp	DWORD PTR _eff_dim$[ebp], 0
	jle	SHORT $LN237@star_sqcur@2
	mov	ecx, DWORD PTR _eff_dim$[ebp]
	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	lea	esi, DWORD PTR _dAdv$[ebp]
	lea	edi, DWORD PTR _temp$[ebp]
	rep movsd
	mov	esi, DWORD PTR _ddss11$[ebp]
	mov	edi, DWORD PTR _dffdv1$[ebp]
$LN237@star_sqcur@2:

; 232  :        temp[i] = dAdv[i];
; 233  :     matvec_mul(proj,temp,dAdv,eff_dim,eff_dim);

	mov	eax, DWORD PTR _eff_dim$[ebp]
	mov	ecx, DWORD PTR _proj$[ebp]
	push	eax
	push	eax
	lea	edx, DWORD PTR _dAdv$[ebp]
	push	edx
	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	push	ecx
	call	_matvec_mul
	add	esp, 20					; 00000014H

; 234  :     for ( i = 0 ; i < eff_dim ; i++ )

	cmp	DWORD PTR _eff_dim$[ebp], 0
	jle	SHORT $LN234@star_sqcur@2

; 232  :        temp[i] = dAdv[i];
; 233  :     matvec_mul(proj,temp,dAdv,eff_dim,eff_dim);

	mov	ecx, DWORD PTR _eff_dim$[ebp]
	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	lea	esi, DWORD PTR _vnorm$[ebp]
	lea	edi, DWORD PTR _temp$[ebp]
	rep movsd
	mov	esi, DWORD PTR _ddss11$[ebp]
	mov	edi, DWORD PTR _dffdv1$[ebp]
$LN234@star_sqcur@2:

; 235  :         temp[i] = vnorm[i];
; 236  :     matvec_mul(proj,temp,vnorm,eff_dim,eff_dim);

	mov	eax, DWORD PTR _eff_dim$[ebp]
	mov	ecx, DWORD PTR _proj$[ebp]
	push	eax
	push	eax
	lea	edx, DWORD PTR _vnorm$[ebp]
	push	edx
	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	push	ecx
	call	_matvec_mul
	add	esp, 20					; 00000014H
$LN238@star_sqcur@2:

; 237  :   }
; 238  : 
; 239  :   /* energy */
; 240  :   ff = dot(dAdv,dAdv,eff_dim);

	mov	edx, DWORD PTR _eff_dim$[ebp]
	push	edx
	lea	eax, DWORD PTR _dAdv$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fst	QWORD PTR _ff$[ebp]
	add	esp, 12					; 0000000cH

; 241  :   switch ( variety )

	cmp	DWORD PTR _variety$[ebp], 4
	ja	$LN553@star_sqcur@2
	mov	edx, DWORD PTR _variety$[ebp]
	jmp	DWORD PTR $LN1078@star_sqcur@2[edx*4]
$LN557@star_sqcur@2:

; 242  :   { case TEST_SQ:
; 243  :         nn = dot(vnorm,vnorm,eff_dim);

	mov	eax, DWORD PTR _eff_dim$[ebp]

; 279  :         energy = 0.75*area*hh0*hh0;

	fstp	ST(0)
	push	eax
	lea	ecx, DWORD PTR _vnorm$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	fst	QWORD PTR _nn$[ebp]
	fstp	QWORD PTR _energy$[ebp]
	add	esp, 12					; 0000000cH
	jmp	$LN456@star_sqcur@2
$LN228@star_sqcur@2:

; 244  :         energy = nn; break; 
; 245  :      case PLAIN_SQ: 
; 246  :         energy = 0.75/area*ff;

	fld	QWORD PTR __real@3fe8000000000000
	fdiv	QWORD PTR _area$[ebp]
	fmulp	ST(1), ST(0)
	fstp	QWORD PTR _energy$[ebp]

; 247  :         break;

	jmp	$LN456@star_sqcur@2
$LN556@star_sqcur@2:

; 248  :      case EFF_SQ:
; 249  :         nn = dot(vnorm,vnorm,eff_dim);

	mov	eax, DWORD PTR _eff_dim$[ebp]

; 279  :         energy = 0.75*area*hh0*hh0;

	fstp	ST(0)
	push	eax
	lea	ecx, DWORD PTR _vnorm$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	fst	QWORD PTR _nn$[ebp]
	fldz
	add	esp, 12					; 0000000cH
	fcom	ST(1)
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN560@star_sqcur@2

; 250  :         if  ( nn <= 0.0 ) return 0.0;

	pop	edi
	fstp	ST(1)
	pop	esi
	pop	ebx

; 1053 :   }
; 1054 :   return energy;
; 1055 : } /* end star_sq_curve_method_all() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN560@star_sqcur@2:

; 250  :         if  ( nn <= 0.0 ) return 0.0;

	fstp	ST(0)

; 251  :         energy = 0.75*area*ff/nn;

	fld	QWORD PTR _area$[ebp]
	fmul	QWORD PTR __real@3fe8000000000000
	fmul	QWORD PTR _ff$[ebp]
	fdivrp	ST(1), ST(0)
	fstp	QWORD PTR _energy$[ebp]

; 252  :         break;

	jmp	$LN456@star_sqcur@2
$LN555@star_sqcur@2:

; 253  :      case NORMAL_SQ:
; 254  :         fn = dot(dAdv,vnorm,eff_dim);

	mov	eax, DWORD PTR _eff_dim$[ebp]

; 279  :         energy = 0.75*area*hh0*hh0;

	fstp	ST(0)
	push	eax
	lea	ecx, DWORD PTR _vnorm$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dAdv$[ebp]
	push	edx
	call	_dot
	fst	QWORD PTR _fn$[ebp]
	fld	ST(0)
	add	esp, 12					; 0000000cH
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	SHORT $LN563@star_sqcur@2

; 256  :         { ff = 0.0; fn = 1e-6; }

	fstp	ST(1)
	fst	QWORD PTR _ff$[ebp]
	fld	QWORD PTR __real@3eb0c6f7a0b5ed8d
	fst	QWORD PTR _fn$[ebp]
	jmp	SHORT $LN224@star_sqcur@2
$LN563@star_sqcur@2:

; 255  :         if ( fn == 0.0 ) 

	fstp	ST(0)

; 256  :         { ff = 0.0; fn = 1e-6; }

	fld	QWORD PTR _ff$[ebp]
	fxch	ST(1)
$LN224@star_sqcur@2:

; 257  :         switch ( h0_flag )

	mov	eax, DWORD PTR _h0_flag

; 261  :             default: hh0 = ff/fn; break;

	fdivp	ST(1), ST(0)
	dec	eax
	je	SHORT $LN221@star_sqcur@2

; 257  :         switch ( h0_flag )

	dec	eax

; 261  :             default: hh0 = ff/fn; break;

	jne	SHORT $LN1063@star_sqcur@2

; 259  :             case H0_IN_ATTR:   hh0 = ff/fn-2*(*VREAL(v_info->id,h0_attr))/3;

	mov	ecx, DWORD PTR _h0_attr
	mov	eax, DWORD PTR [ebx]
	imul	ecx, 240				; 000000f0H
	mov	edx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	add	ecx, DWORD PTR _web+104
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edx+64]
	fld	QWORD PTR [eax+ecx]

; 260  :                   break;

	jmp	SHORT $LN1064@star_sqcur@2
$LN221@star_sqcur@2:

; 258  :           { case H0_IN_GLOBAL: hh0 = ff/fn - 2*h0_value/3; break;

	fld	QWORD PTR _h0_value
$LN1064@star_sqcur@2:
	fadd	ST(0), ST(0)
	fdiv	QWORD PTR __real@4008000000000000
	fsubp	ST(1), ST(0)
$LN1063@star_sqcur@2:
	fst	QWORD PTR _hh0$[ebp]

; 262  :           }
; 263  :         energy = 0.75*area*hh0*hh0;

	fld	QWORD PTR _area$[ebp]
	fmul	QWORD PTR __real@3fe8000000000000
	fmul	ST(0), ST(1)
	fmulp	ST(1), ST(0)
	fstp	QWORD PTR _energy$[ebp]

; 264  :         break;

	jmp	$LN456@star_sqcur@2
$LN554@star_sqcur@2:

; 265  :      case PERP_SQ:
; 266  :         fn = dot(dAdv,vnorm,eff_dim);

	mov	edx, DWORD PTR _eff_dim$[ebp]

; 279  :         energy = 0.75*area*hh0*hh0;

	fstp	ST(0)
	push	edx
	lea	eax, DWORD PTR _vnorm$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dAdv$[ebp]
	push	ecx
	call	_dot
	fstp	QWORD PTR _fn$[ebp]
	mov	edx, DWORD PTR _eff_dim$[ebp]
	push	edx
	lea	eax, DWORD PTR _vnorm$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fst	QWORD PTR _nn$[ebp]
	mov	eax, DWORD PTR _h0_flag
	add	esp, 24					; 00000018H
	dec	eax
	je	SHORT $LN215@star_sqcur@2

; 267  :         nn = dot(vnorm,vnorm,eff_dim);
; 268  :         switch ( h0_flag )

	dec	eax
	je	SHORT $LN214@star_sqcur@2

; 272  :             default: vertex_h0 = 0.0; break;

	fldz
	jmp	SHORT $LN216@star_sqcur@2
$LN214@star_sqcur@2:

; 270  :             case H0_IN_ATTR:   vertex_h0 = (*VREAL(v_info->id,h0_attr));

	mov	eax, DWORD PTR _h0_attr
	mov	edx, DWORD PTR [ebx]
	imul	eax, 240				; 000000f0H
	mov	ecx, DWORD PTR _web+12
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	add	eax, DWORD PTR _web+104
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+64]
	fld	QWORD PTR [edx+eax]

; 271  :                   break;

	jmp	SHORT $LN216@star_sqcur@2
$LN215@star_sqcur@2:

; 269  :           { case H0_IN_GLOBAL: vertex_h0 = h0_value; break;

	fld	QWORD PTR _h0_value
$LN216@star_sqcur@2:

; 273  :           }
; 274  :         if ( nn == 0.0 || (concount == 2 && nn < 0.01*area*area) )

	fld	ST(1)
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jnp	SHORT $LN588@star_sqcur@2
	cmp	DWORD PTR _concount$[ebp], 2
	jne	SHORT $LN585@star_sqcur@2
	fld	QWORD PTR _area$[ebp]
	fld	QWORD PTR __real@3f847ae147ae147b
	fmul	ST(0), ST(1)
	fmulp	ST(1), ST(0)
	fcomp	ST(3)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN585@star_sqcur@2
$LN588@star_sqcur@2:
	fstp	ST(2)

; 275  :         { /* C2 line, probably, so h = 0 */
; 276  :           fn = 0.0; nn = 1.0;

	fxch	ST(1)
	fstp	QWORD PTR _fn$[ebp]
	fld1
	fst	QWORD PTR _nn$[ebp]
	fxch	ST(1)

; 277  :         }
; 278  :         hh0 = (fn/nn - 2*vertex_h0/3);

	fld	QWORD PTR _fn$[ebp]
	fdivrp	ST(2), ST(0)

; 279  :         energy = 0.75*area*hh0*hh0;

	jmp	$LN1064@star_sqcur@2
$LN585@star_sqcur@2:

; 275  :         { /* C2 line, probably, so h = 0 */
; 276  :           fn = 0.0; nn = 1.0;

	fstp	ST(0)

; 277  :         }
; 278  :         hh0 = (fn/nn - 2*vertex_h0/3);

	fld	QWORD PTR _fn$[ebp]
	fdivrp	ST(2), ST(0)

; 279  :         energy = 0.75*area*hh0*hh0;

	jmp	$LN1064@star_sqcur@2
$LN553@star_sqcur@2:
	fstp	ST(0)
$LN456@star_sqcur@2:

; 280  :         break;
; 281  :     }
; 282  :     if ( get_vattr(v_info->id) & AXIAL_POINT )

	mov	ecx, DWORD PTR [ebx]
	mov	edx, DWORD PTR _web+12
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 8388608				; 00800000H
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN210@star_sqcur@2

; 283  :     { if ( sym_flags & DOUBLE_AXIAL )

	test	BYTE PTR _sym_flags, 4
	mov	ecx, DWORD PTR _rotorder
	je	SHORT $LN209@star_sqcur@2

; 284  :           energy /= rotorder/2;

	mov	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv29064[ebp], eax
	fild	DWORD PTR tv29064[ebp]
	jmp	SHORT $LN1065@star_sqcur@2
$LN209@star_sqcur@2:

; 285  :       else energy /= rotorder;

	fild	DWORD PTR _rotorder
$LN1065@star_sqcur@2:

; 286  :       energy *= rotorder/v_info->axial_order;

	mov	eax, ecx
	fdivr	QWORD PTR _energy$[ebp]
	cdq
	idiv	DWORD PTR [ebx+1344]
	mov	DWORD PTR tv29055[ebp], eax
	fild	DWORD PTR tv29055[ebp]
	fmulp	ST(1), ST(0)
	fstp	QWORD PTR _energy$[ebp]
$LN210@star_sqcur@2:

; 287  :     }
; 288  :     if ( mode == METHOD_VALUE ) goto all_exit;

	cmp	DWORD PTR _mode$[ebp], 1767		; 000006e7H
	je	$all_exit$89257

; 289  : 
; 290  :     /* Gradient */
; 291  : 
; 292  :     if ( v_info->vcount > MAXV )

	cmp	DWORD PTR [ebx+12], 20			; 00000014H
	jle	SHORT $LN206@star_sqcur@2

; 293  :       ddss11 = dmatrix3(16*pairs,eff_dim,eff_dim);

	mov	eax, DWORD PTR _eff_dim$[ebp]
	push	293					; 00000125H
	push	OFFSET ??_C@_0L@CMLMDOAO@SQCURVE3?4C?$AA@
	push	eax
	push	eax
	mov	eax, DWORD PTR _pairs$[ebp]
	shl	eax, 4
	push	eax
	call	_kb_dmatrix3
	mov	esi, eax
	add	esp, 20					; 00000014H
	mov	DWORD PTR _ddss11$[ebp], esi
	jmp	SHORT $LN205@star_sqcur@2
$LN206@star_sqcur@2:

; 294  :     else memset((char*)ddss11[0][0],0,sizeof(REAL)*16*pairs*MAXCOORD*MAXCOORD);

	mov	ecx, DWORD PTR _pairs$[ebp]
	mov	edx, DWORD PTR [esi]
	imul	ecx, 4608				; 00001200H
	mov	eax, DWORD PTR [edx]
	push	ecx
	push	0
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
$LN205@star_sqcur@2:

; 295  :     ddss12 = ddss11 + pairs; ddss21 = ddss12 + pairs; ddss22 = ddss21 + pairs;

	mov	ecx, DWORD PTR _pairs$[ebp]

; 296  :     ddAdv1dv1 = ddss22 + pairs; ddAdv1dv2 = ddAdv1dv1 + pairs;
; 297  :     ddAdv2dv1 = ddAdv1dv2 + pairs; ddAdv2dv2 = ddAdv2dv1 + pairs;
; 298  :     dvnorm1 = ddAdv2dv2 + pairs; dvnorm2 = dvnorm1 + pairs;
; 299  :     dfdv1 = dvnorm2 + pairs; dfdv2 = dfdv1 + pairs;
; 300  : 
; 301  :     /* first, some more common terms */
; 302  :     for ( k = 0 ; k < pairs ; k++ )

	fld	QWORD PTR __real@4010000000000000
	lea	edx, DWORD PTR [esi+ecx*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _ddss21$[ebp], eax
	lea	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _ddss22$[ebp], eax
	lea	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _ddAdv1dv1$[ebp], eax
	lea	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _ddAdv1dv2$[ebp], eax
	lea	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _ddAdv2dv1$[ebp], eax
	lea	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _ddAdv2dv2$[ebp], eax
	lea	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _dvnorm1$[ebp], eax
	lea	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _dvnorm2$[ebp], eax
	lea	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _dfdv1$[ebp], eax
	lea	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _ddss12$[ebp], edx
	mov	DWORD PTR _dfdv2$[ebp], eax
	test	ecx, ecx
	jle	$LN592@star_sqcur@2
	mov	eax, DWORD PTR _s1s2$[ebp]
	mov	ebx, DWORD PTR _s2s2$[ebp]
	sub	ebx, eax
	mov	DWORD PTR tv20147[ebp], eax
	mov	DWORD PTR tv20263[ebp], ebx
	mov	ebx, DWORD PTR _s1s1$[ebp]
	sub	ebx, eax
	mov	DWORD PTR tv20266[ebp], ebx
	mov	ebx, DWORD PTR _a$[ebp]
	sub	ebx, eax
	mov	eax, edx
	sub	eax, esi
	mov	DWORD PTR tv20272[ebp], eax
	mov	eax, DWORD PTR _dAdv1$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv20275[ebp], eax
	mov	eax, DWORD PTR _ddAdv1dv2$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv20278[ebp], eax
	mov	eax, DWORD PTR _ddAdv1dv1$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv20281[ebp], eax
	mov	eax, DWORD PTR _ddss21$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv20284[ebp], eax
	mov	eax, DWORD PTR _ds1$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv20287[ebp], eax
	mov	eax, DWORD PTR _ddss22$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv20290[ebp], eax
	mov	eax, DWORD PTR _dAdv2$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv20293[ebp], eax
	mov	eax, DWORD PTR _ds2$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv20296[ebp], eax
	mov	eax, DWORD PTR _ddAdv2dv2$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv20299[ebp], eax
	mov	eax, DWORD PTR _ddAdv2dv1$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv20302[ebp], eax
	mov	eax, DWORD PTR _dffdv1$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv20305[ebp], eax
	mov	eax, DWORD PTR _dffdv2$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv20308[ebp], eax
	mov	eax, DWORD PTR _dfdv1$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv20311[ebp], eax
	mov	eax, DWORD PTR _dfndv1$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv20314[ebp], eax
	mov	eax, DWORD PTR _dfdv2$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv20317[ebp], eax
	mov	eax, DWORD PTR _dfndv2$[ebp]
	mov	edx, DWORD PTR _pairs$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv20320[ebp], eax
	mov	eax, DWORD PTR _dvnorm1$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv20323[ebp], eax
	mov	eax, DWORD PTR _dnndv1$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv20329[ebp], eax
	mov	eax, DWORD PTR _dvnorm2$[ebp]
	sub	eax, esi
	mov	DWORD PTR tv20332[ebp], eax
	mov	eax, DWORD PTR _dnndv2$[ebp]
	sub	ecx, esi
	sub	eax, esi
	mov	DWORD PTR tv19906[ebp], 1
	mov	edi, esi
	mov	DWORD PTR tv20258[ebp], ecx
	mov	DWORD PTR tv20269[ebp], ebx
	mov	DWORD PTR tv20338[ebp], eax
	mov	DWORD PTR tv4173[ebp], edx

; 295  :     ddss12 = ddss11 + pairs; ddss21 = ddss12 + pairs; ddss22 = ddss21 + pairs;

	fld	QWORD PTR __real@4000000000000000
	jmp	SHORT $LN1066@star_sqcur@2
$LN505@star_sqcur@2:
	mov	ecx, DWORD PTR tv20258[ebp]
$LN1066@star_sqcur@2:
	mov	eax, DWORD PTR tv19906[ebp]

; 303  :     { s1 = s[k]; s2 = s[(k+1==pairs)?final_edge:k+1];

	mov	ebx, DWORD PTR [ecx+edi]
	cmp	eax, DWORD PTR _pairs$[ebp]
	jne	SHORT $LN269@star_sqcur@2
	mov	eax, DWORD PTR _final_edge$[ebp]
$LN269@star_sqcur@2:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]

; 304  :       for ( i = 0 ; i < eff_dim ; i++ )

	xor	esi, esi
	mov	DWORD PTR _s2$[ebp], edx
	cmp	DWORD PTR _eff_dim$[ebp], esi
	jle	$LN199@star_sqcur@2
	mov	eax, edx
	sub	eax, ebx
	mov	DWORD PTR tv17120[ebp], eax
$LN201@star_sqcur@2:

; 305  :       { ddss11[k][i][i] = 2*s2s2[k];

	mov	eax, DWORD PTR tv20147[ebp]
	mov	ecx, DWORD PTR tv20263[ebp]
	fld	QWORD PTR [ecx+eax]
	mov	edx, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edx+esi*4]
	fmul	ST(0), ST(1)

; 306  :         ddss12[k][i][i] = -2*s1s2[k];

	mov	edx, DWORD PTR tv20272[ebp]
	fstp	QWORD PTR [ecx+esi*8]
	mov	ecx, DWORD PTR [edx+edi]
	mov	ecx, DWORD PTR [ecx+esi*4]
	fld	QWORD PTR [eax]
	fld	QWORD PTR __real@c000000000000000

; 307  :         ddss21[k][i][i] = -2*s1s2[k];
; 308  :         ddss22[k][i][i] = 2*s1s1[k];
; 309  :         for ( j = 0 ; j < eff_dim ; j++ )

	mov	edx, DWORD PTR [edx+edi]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [ecx+esi*8]
	mov	ecx, DWORD PTR tv20284[ebp]
	mov	ecx, DWORD PTR [ecx+edi]
	mov	ecx, DWORD PTR [ecx+esi*4]
	fmul	QWORD PTR [eax]
	fstp	QWORD PTR [ecx+esi*8]
	mov	ecx, DWORD PTR tv20266[ebp]
	fld	QWORD PTR [ecx+eax]
	mov	eax, DWORD PTR tv20290[ebp]
	mov	ecx, DWORD PTR [eax+edi]
	fmul	ST(0), ST(1)
	mov	eax, DWORD PTR [ecx+esi*4]
	mov	ecx, DWORD PTR tv20275[ebp]
	fstp	QWORD PTR [eax+esi*8]
	mov	eax, DWORD PTR [ecx+edi]
	lea	ecx, DWORD PTR [eax+esi*8]
	mov	eax, DWORD PTR tv20293[ebp]
	mov	DWORD PTR tv28859[ebp], ecx
	mov	ecx, DWORD PTR [eax+edi]
	lea	eax, DWORD PTR [ecx+esi*8]
	mov	ecx, DWORD PTR [edi]
	mov	ecx, DWORD PTR [ecx+esi*4]
	sub	ecx, ebx
	mov	DWORD PTR tv28942[ebp], ecx
	mov	ecx, DWORD PTR [edx+esi*4]
	sub	ecx, ebx
	mov	DWORD PTR tv28947[ebp], ecx
	mov	ecx, DWORD PTR tv20278[ebp]
	mov	edx, DWORD PTR [ecx+edi]
	mov	ecx, DWORD PTR [edx+esi*4]
	sub	ecx, ebx
	mov	DWORD PTR tv28952[ebp], ecx
	mov	ecx, DWORD PTR tv20281[ebp]
	mov	edx, DWORD PTR [ecx+edi]
	mov	ecx, DWORD PTR [edx+esi*4]
	sub	ecx, ebx
	mov	DWORD PTR tv28957[ebp], ecx
	mov	ecx, DWORD PTR tv20311[ebp]
	mov	edx, DWORD PTR [ecx+edi]
	mov	ecx, DWORD PTR [edx+esi*4]
	sub	ecx, ebx
	mov	DWORD PTR tv28962[ebp], ecx
	mov	ecx, DWORD PTR tv20284[ebp]
	mov	edx, DWORD PTR [ecx+edi]
	mov	ecx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR tv20290[ebp]
	sub	ecx, ebx
	mov	DWORD PTR tv28967[ebp], ecx
	mov	ecx, DWORD PTR tv20287[ebp]
	mov	ecx, DWORD PTR [ecx+edi]
	sub	ecx, ebx
	mov	DWORD PTR tv28972[ebp], ecx
	mov	ecx, DWORD PTR [edx+edi]
	mov	ecx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR tv20296[ebp]
	sub	ecx, ebx
	mov	DWORD PTR tv28977[ebp], ecx
	mov	ecx, DWORD PTR [edx+edi]
	sub	ecx, ebx
	mov	DWORD PTR tv28982[ebp], ecx
	mov	ecx, DWORD PTR tv20299[ebp]
	mov	edx, DWORD PTR [ecx+edi]
	mov	ecx, DWORD PTR [edx+esi*4]
	mov	DWORD PTR tv28907[ebp], eax
	mov	eax, ebx
	sub	ecx, ebx
	fld	QWORD PTR __real@3fc0000000000000
	mov	DWORD PTR tv28987[ebp], ecx
	mov	ecx, DWORD PTR tv20302[ebp]
	mov	edx, DWORD PTR [ecx+edi]
	mov	ecx, DWORD PTR [edx+esi*4]
	sub	ecx, ebx
	mov	DWORD PTR tv28992[ebp], ecx
	mov	ecx, DWORD PTR tv20317[ebp]
	mov	edx, DWORD PTR [ecx+edi]
	mov	ecx, DWORD PTR [edx+esi*4]
	sub	ecx, ebx
	mov	DWORD PTR tv28997[ebp], ecx
	mov	ecx, DWORD PTR _eff_dim$[ebp]
	mov	DWORD PTR tv6688[ebp], ecx
$LN198@star_sqcur@2:

; 310  :         { ddss11[k][i][j] -= 2*s2[i]*s2[j];

	mov	edx, DWORD PTR tv17120[ebp]
	lea	ecx, DWORD PTR [ebx+esi*8]
	fld	QWORD PTR [edx+ecx]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [eax+edx]
	mov	edx, DWORD PTR tv28942[ebp]
	fsubr	QWORD PTR [eax+edx]
	fstp	QWORD PTR [eax+edx]

; 311  :           ddss12[k][i][j] += 4*s1[i]*s2[j] - 2*s2[i]*s1[j];

	mov	edx, DWORD PTR tv17120[ebp]
	fld	QWORD PTR [ecx]
	fmul	ST(0), ST(3)
	fmul	QWORD PTR [eax+edx]
	fld	QWORD PTR [edx+ecx]
	mov	edx, DWORD PTR tv28947[ebp]
	fmul	ST(0), ST(3)
	fmul	QWORD PTR [eax]
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR [eax+edx]
	fstp	QWORD PTR [eax+edx]

; 312  :           ddss21[k][i][j] += 4*s2[i]*s1[j] - 2*s1[i]*s2[j];

	mov	edx, DWORD PTR tv17120[ebp]
	fld	QWORD PTR [edx+ecx]
	fmul	ST(0), ST(3)
	fmul	QWORD PTR [eax]
	fld	QWORD PTR [ecx]
	fmul	ST(0), ST(3)
	fmul	QWORD PTR [eax+edx]
	mov	edx, DWORD PTR tv28967[ebp]
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR [eax+edx]
	fstp	QWORD PTR [eax+edx]

; 313  :           ddss22[k][i][j] -= 2*s1[i]*s1[j];
; 314  : 
; 315  :           ddAdv1dv1[k][i][j] = -0.125/a[k]/a[k]*dAdv1[k][i]*ds1[k][j]
; 316  :                       + 0.125/a[k]*ddss11[k][i][j];

	mov	edx, DWORD PTR tv20269[ebp]
	fld	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv28977[ebp]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [eax]
	fsubr	QWORD PTR [eax+ecx]
	fstp	QWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR tv20147[ebp]
	fld	ST(0)
	fdiv	QWORD PTR [edx+ecx]
	mov	edx, DWORD PTR tv28942[ebp]
	fld	QWORD PTR [eax+edx]
	fmul	ST(0), ST(1)
	mov	edx, DWORD PTR tv20269[ebp]
	fxch	ST(1)
	fdiv	QWORD PTR [edx+ecx]
	mov	edx, DWORD PTR tv28859[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv28972[ebp]
	fmul	QWORD PTR [eax+edx]
	mov	edx, DWORD PTR tv28957[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR [eax+edx]

; 317  :           ddAdv1dv2[k][i][j] = -0.125/a[k]/a[k]*dAdv1[k][i]*ds2[k][j]
; 318  :                       + 0.125/a[k]*ddss12[k][i][j];

	mov	edx, DWORD PTR tv20269[ebp]
	fld	ST(0)
	fdiv	QWORD PTR [edx+ecx]
	mov	edx, DWORD PTR tv28947[ebp]
	fld	QWORD PTR [eax+edx]
	fmul	ST(0), ST(1)
	mov	edx, DWORD PTR tv20269[ebp]
	fxch	ST(1)
	fdiv	QWORD PTR [edx+ecx]
	mov	edx, DWORD PTR tv28859[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv28982[ebp]
	fmul	QWORD PTR [eax+edx]
	mov	edx, DWORD PTR tv28952[ebp]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR [eax+edx]

; 319  :           dfdv1[k][i][j] = -ddAdv1dv1[k][i][j] - ddAdv1dv2[k][i][j];

	mov	edx, DWORD PTR tv28957[ebp]
	fld	QWORD PTR [eax+edx]
	mov	edx, DWORD PTR tv28962[ebp]
	fchs
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR [eax+edx]

; 320  :           ddAdv2dv1[k][i][j] = -0.125/a[k]/a[k]*dAdv2[k][i]*ds1[k][j]
; 321  :                       + 0.125/a[k]*ddss21[k][i][j];

	mov	edx, DWORD PTR tv20269[ebp]
	fld	ST(0)
	fdiv	QWORD PTR [edx+ecx]
	mov	edx, DWORD PTR tv28967[ebp]
	fld	QWORD PTR [eax+edx]
	fmul	ST(0), ST(1)
	mov	edx, DWORD PTR tv20269[ebp]
	fxch	ST(1)
	fdiv	QWORD PTR [edx+ecx]
	mov	edx, DWORD PTR tv28907[ebp]
	add	eax, 8
	dec	DWORD PTR tv6688[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv28972[ebp]
	fmul	QWORD PTR [eax+edx-8]
	mov	edx, DWORD PTR tv28992[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR [eax+edx-8]

; 322  :           ddAdv2dv2[k][i][j] = -0.125/a[k]/a[k]*dAdv2[k][i]*ds2[k][j]
; 323  :                       + 0.125/a[k]*ddss22[k][i][j];

	mov	edx, DWORD PTR tv20269[ebp]
	fld	ST(0)
	fdiv	QWORD PTR [edx+ecx]
	mov	edx, DWORD PTR tv28977[ebp]
	fld	QWORD PTR [eax+edx-8]
	fmul	ST(0), ST(1)
	mov	edx, DWORD PTR tv20269[ebp]
	fxch	ST(1)
	fdiv	QWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR tv28907[ebp]
	mov	edx, DWORD PTR tv28982[ebp]
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv28987[ebp]
	fmul	QWORD PTR [eax+edx-8]

; 324  :           dfdv2[k][i][j] = -ddAdv2dv1[k][i][j] - ddAdv2dv2[k][i][j];

	mov	edx, DWORD PTR tv28992[ebp]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR [eax+ecx-8]
	mov	ecx, DWORD PTR tv28997[ebp]
	fld	QWORD PTR [eax+edx-8]
	fchs
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR [eax+ecx-8]
	jne	$LN198@star_sqcur@2

; 325  :         }
; 326  :         if ( concount  && (v_info->flags & INCOMPLETE_STAR))

	cmp	DWORD PTR _concount$[ebp], 0
	fstp	ST(0)
	fstp	ST(0)
	fstp	ST(0)
	je	$LN195@star_sqcur@2
	mov	edx, DWORD PTR _v_info$GSCopy$[ebp]
	test	BYTE PTR [edx+4], 1
	je	$LN195@star_sqcur@2

; 327  :         { /* project force and normal to constraints.  */
; 328  :           for ( j = 0 ; j < eff_dim ; j++ )

	mov	edx, DWORD PTR _eff_dim$[ebp]
	xor	eax, eax
	cmp	edx, 4
	jl	$LN500@star_sqcur@2

; 329  :             temp[j] = dfdv1[k][i][j];

	lea	edx, DWORD PTR _temp$[ebp+8]
	mov	ecx, 16					; 00000010H
	sub	ecx, edx
	mov	DWORD PTR tv18722[ebp], ecx
	mov	ecx, 24					; 00000018H
	sub	ecx, edx
	mov	DWORD PTR tv18729[ebp], ecx
	npad	10
$LL516@star_sqcur@2:
	mov	edx, DWORD PTR tv20311[ebp]
	mov	edx, DWORD PTR [edx+edi]
	mov	edx, DWORD PTR [edx+esi*4]
	fld	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR tv20311[ebp]
	fstp	QWORD PTR _temp$[ebp+eax*8]
	mov	edx, DWORD PTR [edx+edi]
	mov	edx, DWORD PTR [edx+esi*4]
	fld	QWORD PTR [edx+eax*8+8]
	mov	edx, DWORD PTR tv20311[ebp]
	lea	ecx, DWORD PTR _temp$[ebp+eax*8+8]
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+edi]
	mov	edx, DWORD PTR [edx+esi*4]
	add	edx, ecx
	mov	ecx, DWORD PTR tv18722[ebp]
	fld	QWORD PTR [edx+ecx]
	mov	edx, DWORD PTR tv20311[ebp]
	fstp	QWORD PTR _temp$[ebp+eax*8+16]
	mov	edx, DWORD PTR [edx+edi]
	mov	edx, DWORD PTR [edx+esi*4]
	lea	ecx, DWORD PTR _temp$[ebp+eax*8+8]
	add	edx, ecx
	mov	ecx, DWORD PTR tv18729[ebp]
	fld	QWORD PTR [edx+ecx]
	mov	edx, DWORD PTR _eff_dim$[ebp]
	fstp	QWORD PTR _temp$[ebp+eax*8+24]
	add	eax, 4
	lea	ecx, DWORD PTR [edx-3]
	cmp	eax, ecx
	jl	SHORT $LL516@star_sqcur@2
$LN500@star_sqcur@2:

; 327  :         { /* project force and normal to constraints.  */
; 328  :           for ( j = 0 ; j < eff_dim ; j++ )

	cmp	eax, edx
	jge	SHORT $LN417@star_sqcur@2
$LC194@star_sqcur@2:

; 329  :             temp[j] = dfdv1[k][i][j];

	mov	ecx, DWORD PTR tv20311[ebp]
	mov	ecx, DWORD PTR [ecx+edi]
	mov	ecx, DWORD PTR [ecx+esi*4]
	fld	QWORD PTR [ecx+eax*8]
	inc	eax
	fstp	QWORD PTR _temp$[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LC194@star_sqcur@2
$LN417@star_sqcur@2:

; 330  :           matvec_mul(proj,temp,dfdv1[k][i],eff_dim,eff_dim);

	mov	eax, DWORD PTR _eff_dim$[ebp]
	mov	edx, DWORD PTR tv20311[ebp]
	push	eax
	push	eax
	mov	eax, DWORD PTR [edx+edi]
	mov	ecx, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR _proj$[ebp]
	push	ecx
	lea	edx, DWORD PTR _temp$[ebp]
	push	edx
	push	eax
	call	_matvec_mul
	add	esp, 20					; 00000014H

; 331  :           for ( j = 0 ; j < eff_dim ; j++ )

	xor	eax, eax
	cmp	DWORD PTR _eff_dim$[ebp], 4
	jl	$LN506@star_sqcur@2

; 332  :             temp[j] = dfdv2[k][i][j];

	lea	edx, DWORD PTR _temp$[ebp+8]
	mov	ecx, 16					; 00000010H
	sub	ecx, edx
	mov	DWORD PTR tv18722[ebp], ecx
	mov	ecx, 24					; 00000018H
	sub	ecx, edx
	mov	DWORD PTR tv18729[ebp], ecx
	npad	8
$LL515@star_sqcur@2:
	mov	edx, DWORD PTR tv20317[ebp]
	mov	edx, DWORD PTR [edx+edi]
	mov	edx, DWORD PTR [edx+esi*4]
	fld	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR tv20317[ebp]
	fstp	QWORD PTR _temp$[ebp+eax*8]
	mov	edx, DWORD PTR [edx+edi]
	mov	edx, DWORD PTR [edx+esi*4]
	fld	QWORD PTR [edx+eax*8+8]
	mov	edx, DWORD PTR tv20317[ebp]
	lea	ecx, DWORD PTR _temp$[ebp+eax*8+8]
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+edi]
	mov	edx, DWORD PTR [edx+esi*4]
	add	edx, ecx
	mov	ecx, DWORD PTR tv18722[ebp]
	fld	QWORD PTR [edx+ecx]
	mov	edx, DWORD PTR tv20317[ebp]
	fstp	QWORD PTR _temp$[ebp+eax*8+16]
	mov	edx, DWORD PTR [edx+edi]
	mov	edx, DWORD PTR [edx+esi*4]
	lea	ecx, DWORD PTR _temp$[ebp+eax*8+8]
	add	edx, ecx
	mov	ecx, DWORD PTR tv18729[ebp]
	fld	QWORD PTR [edx+ecx]
	mov	edx, DWORD PTR _eff_dim$[ebp]
	fstp	QWORD PTR _temp$[ebp+eax*8+24]
	add	eax, 4
	lea	ecx, DWORD PTR [edx-3]
	cmp	eax, ecx
	jl	SHORT $LL515@star_sqcur@2
	jmp	SHORT $LC421@star_sqcur@2
$LN506@star_sqcur@2:
	mov	edx, DWORD PTR _eff_dim$[ebp]
$LC421@star_sqcur@2:

; 331  :           for ( j = 0 ; j < eff_dim ; j++ )

	cmp	eax, edx
	jge	SHORT $LN420@star_sqcur@2
	npad	5
$LC191@star_sqcur@2:

; 332  :             temp[j] = dfdv2[k][i][j];

	mov	ecx, DWORD PTR tv20317[ebp]
	mov	ecx, DWORD PTR [ecx+edi]
	mov	ecx, DWORD PTR [ecx+esi*4]
	fld	QWORD PTR [ecx+eax*8]
	inc	eax
	fstp	QWORD PTR _temp$[ebp+eax*8-8]
	cmp	eax, edx
	jl	SHORT $LC191@star_sqcur@2
$LN420@star_sqcur@2:

; 333  :           matvec_mul(proj,temp,dfdv2[k][i],eff_dim,eff_dim);

	mov	eax, DWORD PTR _eff_dim$[ebp]
	mov	edx, DWORD PTR tv20317[ebp]
	push	eax
	push	eax
	mov	eax, DWORD PTR [edx+edi]
	mov	ecx, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR _proj$[ebp]
	push	ecx
	lea	edx, DWORD PTR _temp$[ebp]
	push	edx
	push	eax
	call	_matvec_mul
	add	esp, 20					; 00000014H
$LN195@star_sqcur@2:

; 334  :         }
; 335  :         dffdv1[k][i] = 2*dot(dfdv1[k][i],dAdv,eff_dim);

	mov	ecx, DWORD PTR _eff_dim$[ebp]
	mov	eax, DWORD PTR tv20311[ebp]
	push	ecx
	mov	ecx, DWORD PTR [eax+edi]
	lea	edx, DWORD PTR _dAdv$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+esi*4]
	push	edx
	call	_dot
	fadd	ST(0), ST(0)
	mov	eax, DWORD PTR tv20305[ebp]
	mov	ecx, DWORD PTR [eax+edi]

; 336  :         dffdv2[k][i] = 2*dot(dfdv2[k][i],dAdv,eff_dim);

	mov	edx, DWORD PTR _eff_dim$[ebp]
	fstp	QWORD PTR [ecx+esi*8]
	mov	ecx, DWORD PTR tv20317[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+edi]
	lea	eax, DWORD PTR _dAdv$[ebp]
	push	eax
	mov	eax, DWORD PTR [edx+esi*4]
	push	eax
	call	_dot
	fld	QWORD PTR __real@4000000000000000
	mov	ecx, DWORD PTR tv20308[ebp]
	fmul	ST(1), ST(0)
	mov	edx, DWORD PTR [ecx+edi]
	fxch	ST(1)
	inc	esi
	fstp	QWORD PTR [edx+esi*8-8]
	add	esp, 24					; 00000018H
	fld	QWORD PTR __real@4010000000000000
	fxch	ST(1)
	cmp	esi, DWORD PTR _eff_dim$[ebp]
	jl	$LN201@star_sqcur@2
$LN199@star_sqcur@2:

; 337  :       }
; 338  : 
; 339  :       if ( variety == PLAIN_SQ ) continue;

	cmp	DWORD PTR _variety$[ebp], 1
	je	$LN203@star_sqcur@2

; 340  :       dvnorm1[k][0][1] = -0.5*s2[2];
; 341  :       dvnorm1[k][0][2] =  0.5*s2[1];
; 342  :       dvnorm1[k][1][0] =  0.5*s2[2];
; 343  :       dvnorm1[k][1][2] = -0.5*s2[0];
; 344  :       dvnorm1[k][2][0] = -0.5*s2[1];
; 345  :       dvnorm1[k][2][1] =  0.5*s2[0];
; 346  :       dvnorm2[k][0][1] =  0.5*s1[2];
; 347  :       dvnorm2[k][0][2] = -0.5*s1[1];
; 348  :       dvnorm2[k][1][0] = -0.5*s1[2];
; 349  :       dvnorm2[k][1][2] =  0.5*s1[0];
; 350  :       dvnorm2[k][2][0] =  0.5*s1[1];
; 351  :       dvnorm2[k][2][1] = -0.5*s1[0];
; 352  :       if ( concount  && (v_info->flags & INCOMPLETE_STAR) )

	cmp	DWORD PTR _concount$[ebp], 0
	mov	eax, DWORD PTR tv20323[ebp]
	mov	ecx, DWORD PTR [eax+edi]
	mov	eax, DWORD PTR _s2$[ebp]
	fld	QWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx]
	fld	QWORD PTR __real@bfe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [edx+8]
	fld	QWORD PTR [eax+8]
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [edx+16]
	mov	edx, DWORD PTR [ecx+4]
	fld	QWORD PTR [eax+16]
	mov	ecx, DWORD PTR [ecx+8]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [edx]
	fld	QWORD PTR [eax]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [edx+16]
	fld	QWORD PTR [eax+8]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [ecx]
	fld	QWORD PTR [eax]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [ecx+8]
	mov	ecx, DWORD PTR tv20332[ebp]
	fld	QWORD PTR [ebx+16]
	mov	eax, DWORD PTR [ecx+edi]
	mov	ecx, DWORD PTR [eax]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [ecx+8]
	fld	QWORD PTR [ebx+8]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [eax+4]
	fld	QWORD PTR [ebx+16]
	mov	eax, DWORD PTR [eax+8]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [ecx]
	fld	QWORD PTR [ebx]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [ecx+16]
	fmul	QWORD PTR [ebx+8]
	fstp	QWORD PTR [eax]
	fmul	QWORD PTR [ebx]
	fstp	QWORD PTR [eax+8]
	je	$LN495@star_sqcur@2
	mov	edx, DWORD PTR _v_info$GSCopy$[ebp]
	test	BYTE PTR [edx+4], 1
	je	$LN495@star_sqcur@2

; 353  :         for ( i = 0 ; i < eff_dim ; i++ )

	mov	esi, DWORD PTR _eff_dim$[ebp]
	xor	ebx, ebx
	test	esi, esi
	jle	$LN184@star_sqcur@2
	fstp	ST(0)
	fstp	ST(0)
$LN512@star_sqcur@2:

; 354  :         { /* project force and normal to constraints.  */
; 355  :           for ( j = 0 ; j < eff_dim ; j++ )

	xor	eax, eax
	cmp	esi, 4
	jl	$LN501@star_sqcur@2

; 356  :             temp[j] = dvnorm1[k][i][j];

	lea	edx, DWORD PTR _temp$[ebp+8]
	mov	ecx, 16					; 00000010H
	sub	ecx, edx
	mov	DWORD PTR tv18722[ebp], ecx
	mov	ecx, 24					; 00000018H
	sub	ecx, edx
	mov	DWORD PTR tv18729[ebp], ecx
$LL425@star_sqcur@2:
	mov	edx, DWORD PTR tv20323[ebp]
	mov	edx, DWORD PTR [edx+edi]
	mov	edx, DWORD PTR [edx+ebx*4]
	fld	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR tv20323[ebp]
	fstp	QWORD PTR _temp$[ebp+eax*8]
	mov	edx, DWORD PTR [edx+edi]
	mov	edx, DWORD PTR [edx+ebx*4]
	fld	QWORD PTR [edx+eax*8+8]
	mov	edx, DWORD PTR tv20323[ebp]
	lea	ecx, DWORD PTR _temp$[ebp+eax*8+8]
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+edi]
	mov	edx, DWORD PTR [edx+ebx*4]
	add	edx, ecx
	mov	ecx, DWORD PTR tv18722[ebp]
	fld	QWORD PTR [edx+ecx]
	mov	edx, DWORD PTR tv20323[ebp]
	fstp	QWORD PTR _temp$[ebp+eax*8+16]
	mov	edx, DWORD PTR [edx+edi]
	mov	edx, DWORD PTR [edx+ebx*4]
	lea	ecx, DWORD PTR _temp$[ebp+eax*8+8]
	add	edx, ecx
	mov	ecx, DWORD PTR tv18729[ebp]
	fld	QWORD PTR [edx+ecx]
	add	eax, 4
	fstp	QWORD PTR _temp$[ebp+eax*8-8]
	lea	ecx, DWORD PTR [esi-3]
	cmp	eax, ecx
	jl	SHORT $LL425@star_sqcur@2
$LN501@star_sqcur@2:

; 354  :         { /* project force and normal to constraints.  */
; 355  :           for ( j = 0 ; j < eff_dim ; j++ )

	cmp	eax, esi
	jge	SHORT $LN423@star_sqcur@2
$LC183@star_sqcur@2:

; 356  :             temp[j] = dvnorm1[k][i][j];

	mov	edx, DWORD PTR tv20323[ebp]
	mov	ecx, DWORD PTR [edx+edi]
	mov	edx, DWORD PTR [ecx+ebx*4]
	fld	QWORD PTR [edx+eax*8]
	inc	eax
	fstp	QWORD PTR _temp$[ebp+eax*8-8]
	cmp	eax, esi
	jl	SHORT $LC183@star_sqcur@2
$LN423@star_sqcur@2:

; 357  :           matvec_mul(proj,temp,dvnorm1[k][i],eff_dim,eff_dim);

	mov	eax, DWORD PTR tv20323[ebp]
	mov	ecx, DWORD PTR [eax+edi]
	mov	edx, DWORD PTR [ecx+ebx*4]
	mov	ecx, DWORD PTR _proj$[ebp]
	push	esi
	push	esi
	push	edx
	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	push	ecx
	call	_matvec_mul
	add	esp, 20					; 00000014H

; 358  :           for ( j = 0 ; j < eff_dim ; j++ )

	xor	eax, eax
	cmp	esi, 4
	jl	$LN513@star_sqcur@2

; 359  :             temp[j] = dvnorm2[k][i][j];

	lea	edx, DWORD PTR _temp$[ebp+8]
	mov	ecx, 16					; 00000010H
	sub	ecx, edx
	mov	DWORD PTR tv18722[ebp], ecx
	mov	ecx, 24					; 00000018H
	sub	ecx, edx
	mov	DWORD PTR tv18729[ebp], ecx
	npad	3
$LL514@star_sqcur@2:
	mov	edx, DWORD PTR tv20332[ebp]
	mov	edx, DWORD PTR [edx+edi]
	mov	edx, DWORD PTR [edx+ebx*4]
	fld	QWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR tv20332[ebp]
	fstp	QWORD PTR _temp$[ebp+eax*8]
	mov	edx, DWORD PTR [edx+edi]
	mov	edx, DWORD PTR [edx+ebx*4]
	fld	QWORD PTR [edx+eax*8+8]
	mov	edx, DWORD PTR tv20332[ebp]
	lea	ecx, DWORD PTR _temp$[ebp+eax*8+8]
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+edi]
	mov	edx, DWORD PTR [edx+ebx*4]
	add	edx, ecx
	mov	ecx, DWORD PTR tv18722[ebp]
	fld	QWORD PTR [edx+ecx]
	mov	edx, DWORD PTR tv20332[ebp]
	fstp	QWORD PTR _temp$[ebp+eax*8+16]
	mov	edx, DWORD PTR [edx+edi]
	mov	edx, DWORD PTR [edx+ebx*4]
	lea	ecx, DWORD PTR _temp$[ebp+eax*8+8]
	add	edx, ecx
	mov	ecx, DWORD PTR tv18729[ebp]
	fld	QWORD PTR [edx+ecx]
	add	eax, 4
	fstp	QWORD PTR _temp$[ebp+eax*8-8]
	lea	ecx, DWORD PTR [esi-3]
	cmp	eax, ecx
	jl	SHORT $LL514@star_sqcur@2
$LN513@star_sqcur@2:

; 358  :           for ( j = 0 ; j < eff_dim ; j++ )

	cmp	eax, esi
	jge	SHORT $LN426@star_sqcur@2
$LC180@star_sqcur@2:

; 359  :             temp[j] = dvnorm2[k][i][j];

	mov	edx, DWORD PTR tv20332[ebp]
	mov	ecx, DWORD PTR [edx+edi]
	mov	edx, DWORD PTR [ecx+ebx*4]
	fld	QWORD PTR [edx+eax*8]
	inc	eax
	fstp	QWORD PTR _temp$[ebp+eax*8-8]
	cmp	eax, esi
	jl	SHORT $LC180@star_sqcur@2
$LN426@star_sqcur@2:

; 360  :           matvec_mul(proj,temp,dvnorm2[k][i],eff_dim,eff_dim);

	mov	eax, DWORD PTR tv20332[ebp]
	mov	ecx, DWORD PTR [eax+edi]
	mov	edx, DWORD PTR [ecx+ebx*4]
	mov	ecx, DWORD PTR _proj$[ebp]
	push	esi
	push	esi
	push	edx
	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	push	ecx
	call	_matvec_mul
	inc	ebx
	add	esp, 20					; 00000014H
	cmp	ebx, esi
	jl	$LN512@star_sqcur@2

; 353  :         for ( i = 0 ; i < eff_dim ; i++ )

	fld	QWORD PTR __real@4010000000000000
	fld	QWORD PTR __real@4000000000000000
	jmp	SHORT $LN184@star_sqcur@2
$LN495@star_sqcur@2:
	mov	esi, DWORD PTR _eff_dim$[ebp]
$LN184@star_sqcur@2:

; 361  :         }
; 362  :       for ( i = 0 ; i < SDIM ; i++ )

	xor	ebx, ebx
	cmp	DWORD PTR _web+616, ebx
	jle	$LN203@star_sqcur@2
	fstp	ST(0)
$LN854@star_sqcur@2:

; 363  :       { dfndv1[k][i] = dot(dfdv1[k][i],vnorm,eff_dim);

	mov	eax, DWORD PTR tv20311[ebp]
	fstp	ST(0)
	mov	ecx, DWORD PTR [eax+edi]
	push	esi
	lea	edx, DWORD PTR _vnorm$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+ebx*4]
	push	edx
	call	_dot
	mov	eax, DWORD PTR tv20314[ebp]
	mov	ecx, DWORD PTR [eax+edi]

; 364  :         dfndv1[k][i] += dot(dAdv,dvnorm1[k][i],eff_dim);

	mov	edx, DWORD PTR tv20323[ebp]
	fstp	QWORD PTR [ecx+ebx*8]
	mov	eax, DWORD PTR [edx+edi]
	mov	ecx, DWORD PTR [eax+ebx*4]
	push	esi
	push	ecx
	lea	edx, DWORD PTR _dAdv$[ebp]
	push	edx
	call	_dot
	mov	eax, DWORD PTR tv20314[ebp]
	mov	ecx, DWORD PTR [eax+edi]
	fadd	QWORD PTR [ecx+ebx*8]
	mov	edx, ecx

; 365  :         dfndv2[k][i] = dot(dfdv2[k][i],vnorm,eff_dim);

	mov	ecx, DWORD PTR tv20317[ebp]
	push	esi
	fstp	QWORD PTR [edx+ebx*8]
	mov	edx, DWORD PTR [ecx+edi]
	lea	eax, DWORD PTR _vnorm$[ebp]
	push	eax
	mov	eax, DWORD PTR [edx+ebx*4]
	push	eax
	call	_dot
	mov	ecx, DWORD PTR tv20320[ebp]
	mov	edx, DWORD PTR [ecx+edi]

; 366  :         dfndv2[k][i] += dot(dAdv,dvnorm2[k][i],eff_dim);

	mov	eax, DWORD PTR tv20332[ebp]
	fstp	QWORD PTR [edx+ebx*8]
	mov	ecx, DWORD PTR [eax+edi]
	mov	edx, DWORD PTR [ecx+ebx*4]
	push	esi
	push	edx
	lea	eax, DWORD PTR _dAdv$[ebp]
	push	eax
	call	_dot
	mov	eax, DWORD PTR tv20320[ebp]
	mov	ecx, DWORD PTR [eax+edi]
	fadd	QWORD PTR [ecx+ebx*8]

; 367  :         dnndv1[k][i] = 2*dot(vnorm,dvnorm1[k][i],eff_dim);

	mov	eax, DWORD PTR tv20323[ebp]
	mov	edx, ecx
	mov	ecx, DWORD PTR [eax+edi]
	fstp	QWORD PTR [edx+ebx*8]
	mov	edx, DWORD PTR [ecx+ebx*4]
	push	esi
	push	edx
	lea	eax, DWORD PTR _vnorm$[ebp]
	push	eax
	call	_dot
	fadd	ST(0), ST(0)
	mov	ecx, DWORD PTR tv20329[ebp]
	mov	edx, DWORD PTR [ecx+edi]

; 368  :         dnndv2[k][i] = 2*dot(vnorm,dvnorm2[k][i],eff_dim);

	mov	eax, DWORD PTR tv20332[ebp]
	fstp	QWORD PTR [edx+ebx*8]
	mov	ecx, DWORD PTR [eax+edi]
	mov	edx, DWORD PTR [ecx+ebx*4]
	push	esi
	push	edx
	lea	eax, DWORD PTR _vnorm$[ebp]
	push	eax
	call	_dot
	fld	QWORD PTR __real@4000000000000000
	mov	ecx, DWORD PTR tv20338[ebp]
	fmul	ST(1), ST(0)
	mov	edx, DWORD PTR [ecx+edi]
	fxch	ST(1)
	inc	ebx
	fstp	QWORD PTR [edx+ebx*8-8]
	add	esp, 72					; 00000048H
	cmp	ebx, DWORD PTR _web+616
	jl	$LN854@star_sqcur@2

; 361  :         }
; 362  :       for ( i = 0 ; i < SDIM ; i++ )

	fld	QWORD PTR __real@4010000000000000
	fxch	ST(1)
$LN203@star_sqcur@2:

; 296  :     ddAdv1dv1 = ddss22 + pairs; ddAdv1dv2 = ddAdv1dv1 + pairs;
; 297  :     ddAdv2dv1 = ddAdv1dv2 + pairs; ddAdv2dv2 = ddAdv2dv1 + pairs;
; 298  :     dvnorm1 = ddAdv2dv2 + pairs; dvnorm2 = dvnorm1 + pairs;
; 299  :     dfdv1 = dvnorm2 + pairs; dfdv2 = dfdv1 + pairs;
; 300  : 
; 301  :     /* first, some more common terms */
; 302  :     for ( k = 0 ; k < pairs ; k++ )

	add	DWORD PTR tv20147[ebp], 8
	mov	eax, 1
	add	DWORD PTR tv19906[ebp], eax
	add	edi, 4
	sub	DWORD PTR tv4173[ebp], eax
	jne	$LN505@star_sqcur@2
	mov	ebx, DWORD PTR _v_info$GSCopy$[ebp]
	fstp	ST(1)
	mov	edi, DWORD PTR _dffdv1$[ebp]
	mov	ecx, DWORD PTR _pairs$[ebp]
	jmp	SHORT $LN202@star_sqcur@2
$LN592@star_sqcur@2:
	fstp	ST(0)
	fld	QWORD PTR __real@4000000000000000
$LN202@star_sqcur@2:

; 369  :       }
; 370  :     }
; 371  : 
; 372  :   /* now, the actual gradients */
; 373  :   for ( k = 0 ; k < v_info->vcount ; k++ )

	fldz
	xor	edx, edx
	cmp	DWORD PTR [ebx+12], edx
	jle	SHORT $LN172@star_sqcur@2
	mov	esi, DWORD PTR _eff_dim$[ebp]
$LN523@star_sqcur@2:

; 374  :      for ( i = 0 ; i < eff_dim ; i++ )

	xor	eax, eax
	cmp	esi, 4
	jl	SHORT $LC430@star_sqcur@2
$LN431@star_sqcur@2:

; 375  :         v_info->grad[k][i] = 0.0;

	mov	esi, DWORD PTR [ebx+1336]
	mov	esi, DWORD PTR [esi+edx*4]
	fst	QWORD PTR [esi+eax*8]
	mov	esi, DWORD PTR [ebx+1336]
	mov	esi, DWORD PTR [esi+edx*4]
	fst	QWORD PTR [esi+eax*8+8]
	mov	esi, DWORD PTR [ebx+1336]
	mov	esi, DWORD PTR [esi+edx*4]
	fst	QWORD PTR [esi+eax*8+16]
	mov	esi, DWORD PTR [ebx+1336]
	mov	esi, DWORD PTR [esi+edx*4]
	fst	QWORD PTR [esi+eax*8+24]

; 460  :             }
; 461  :          }
; 462  :         break;
; 463  :     }
; 464  : 
; 465  :     if ( get_vattr(v_info->id) & AXIAL_POINT )

	mov	esi, DWORD PTR _eff_dim$[ebp]
	add	eax, 4
	add	esi, -3					; fffffffdH
	cmp	eax, esi
	jl	SHORT $LN431@star_sqcur@2

; 375  :         v_info->grad[k][i] = 0.0;

	mov	esi, DWORD PTR _eff_dim$[ebp]
$LC430@star_sqcur@2:

; 374  :      for ( i = 0 ; i < eff_dim ; i++ )

	cmp	eax, esi
	jge	SHORT $LN173@star_sqcur@2
$LC171@star_sqcur@2:

; 375  :         v_info->grad[k][i] = 0.0;

	mov	esi, DWORD PTR [ebx+1336]
	mov	esi, DWORD PTR [esi+edx*4]
	fst	QWORD PTR [esi+eax*8]
	mov	esi, DWORD PTR _eff_dim$[ebp]
	inc	eax
	cmp	eax, esi
	jl	SHORT $LC171@star_sqcur@2
$LN173@star_sqcur@2:

; 369  :       }
; 370  :     }
; 371  : 
; 372  :   /* now, the actual gradients */
; 373  :   for ( k = 0 ; k < v_info->vcount ; k++ )

	inc	edx
	cmp	edx, DWORD PTR [ebx+12]
	jl	SHORT $LN523@star_sqcur@2
$LN172@star_sqcur@2:

; 376  : 
; 377  :   switch ( variety )

	mov	eax, DWORD PTR _variety$[ebp]
	cmp	eax, 4
	ja	$LN638@star_sqcur@2
	jmp	DWORD PTR $LN1079@star_sqcur@2[eax*4]
$LN643@star_sqcur@2:

; 378  :   { case TEST_SQ:
; 379  :         for ( k = 0 ; k < pairs ; k++ )

	xor	esi, esi
	fstp	ST(0)
	mov	DWORD PTR _k$[ebp], esi
	test	ecx, ecx
	jle	$LN467@star_sqcur@2
	mov	eax, DWORD PTR _dnndv1$[ebp]
	mov	edi, DWORD PTR _dnndv2$[ebp]
	mov	ecx, 8
	sub	ecx, eax
	sub	edi, eax
	mov	DWORD PTR tv21361[ebp], ecx
	mov	DWORD PTR tv21365[ebp], edi
	jmp	SHORT $LN165@star_sqcur@2
$LN530@star_sqcur@2:
	mov	edi, DWORD PTR tv21365[ebp]
	mov	ecx, DWORD PTR tv21361[ebp]
$LN165@star_sqcur@2:

; 380  :         { REAL *grad2 = (k+1==pairs)?v_info->grad[final_edge+1]:v_info->grad[k+2];

	lea	eax, DWORD PTR [esi+1]
	mov	DWORD PTR tv12453[ebp], eax
	cmp	eax, DWORD PTR _pairs$[ebp]
	jne	SHORT $LN271@star_sqcur@2
	mov	eax, DWORD PTR [ebx+1336]
	mov	ecx, DWORD PTR _final_edge$[ebp]
	mov	ecx, DWORD PTR [eax+ecx*4+4]
	jmp	SHORT $LN1067@star_sqcur@2
$LN271@star_sqcur@2:
	mov	eax, DWORD PTR _dnndv1$[ebp]
	lea	edx, DWORD PTR [ecx+esi*4]
	add	edx, DWORD PTR [ebx+1336]
	mov	ecx, DWORD PTR [edx+eax]
$LN1067@star_sqcur@2:

; 381  :           for ( i = 0 ; i < eff_dim ; i++ )

	xor	eax, eax
	cmp	DWORD PTR _eff_dim$[ebp], 4
	mov	DWORD PTR _grad2$89306[ebp], ecx
	jl	$LN521@star_sqcur@2

; 378  :   { case TEST_SQ:
; 379  :         for ( k = 0 ; k < pairs ; k++ )

	mov	edx, DWORD PTR _dnndv1$[ebp]
	lea	eax, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [eax]
	mov	edi, DWORD PTR [eax+edi]

; 381  :           for ( i = 0 ; i < eff_dim ; i++ )

	lea	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR tv13208[ebp], edx
	mov	DWORD PTR tv29320[ebp], edi
	mov	DWORD PTR tv20718[ebp], edx
	lea	edx, DWORD PTR [edi+16]

; 387  :             v_info->grad[0][i] -= g;

	sub	edi, ecx
	neg	ecx
	mov	DWORD PTR tv21187[ebp], ecx
	mov	ecx, DWORD PTR tv13208[ebp]
	sub	ecx, DWORD PTR tv29320[ebp]
	mov	DWORD PTR tv29325[ebp], edi
	mov	DWORD PTR tv29328[ebp], ecx
	mov	ecx, DWORD PTR _eff_dim$[ebp]
	add	ecx, -4					; fffffffcH
	shr	ecx, 2
	inc	ecx
	mov	DWORD PTR tv3820[ebp], ecx
	add	ecx, ecx
	add	ecx, ecx
	mov	DWORD PTR _i$[ebp], ecx
$LN434@star_sqcur@2:

; 383  :             v_info->grad[k+1][i] += g;

	mov	edi, DWORD PTR [ebx+1336]
	mov	esi, DWORD PTR [edi+esi*4+4]
	mov	ecx, DWORD PTR tv20718[ebp]
	fld	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv21187[ebp]
	lea	ecx, DWORD PTR [ecx+eax-8]
	fld	QWORD PTR [esi+ecx]
	mov	edi, DWORD PTR tv29328[ebp]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [esi+ecx]

; 384  :             v_info->grad[0][i] -= g;

	mov	esi, DWORD PTR [ebx+1336]
	mov	esi, DWORD PTR [esi]
	fsubr	QWORD PTR [esi+ecx]
	fstp	QWORD PTR [esi+ecx]

; 385  :             g = dnndv2[k][i];

	fld	QWORD PTR [edx-16]

; 386  :             grad2[i] += g;

	fld	QWORD PTR [eax-8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax-8]

; 387  :             v_info->grad[0][i] -= g;

	mov	esi, DWORD PTR [ebx+1336]
	mov	esi, DWORD PTR [esi]
	fsubr	QWORD PTR [esi+ecx]
	fstp	QWORD PTR [esi+ecx]
	mov	esi, DWORD PTR tv29325[ebp]
	add	esi, eax
	fld	QWORD PTR [esi+edi]
	mov	edi, DWORD PTR [ebx+1336]
	mov	esi, DWORD PTR _k$[ebp]
	mov	edi, DWORD PTR [edi+esi*4+4]
	fld	QWORD PTR [edi+ecx+8]
	lea	edi, DWORD PTR [edi+ecx+8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edi]
	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [edi+ecx+8]
	lea	edi, DWORD PTR [edi+ecx+8]
	fstp	QWORD PTR [edi]
	mov	edi, DWORD PTR tv29325[ebp]
	fld	QWORD PTR [edi+eax]
	fld	ST(0)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [edi+ecx+8]
	lea	ecx, DWORD PTR [edi+ecx+8]
	fstp	QWORD PTR [ecx]
	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi+esi*4+4]
	mov	ecx, DWORD PTR tv29328[ebp]
	fld	QWORD PTR [ecx+edx]
	mov	ecx, DWORD PTR tv21187[ebp]
	lea	ecx, DWORD PTR [ecx+eax+8]
	fld	QWORD PTR [edi+ecx]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edi+ecx]
	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [edi+ecx]
	fstp	QWORD PTR [edi+ecx]
	fld	QWORD PTR [edx]
	fld	ST(0)
	fadd	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]
	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [ecx+edi]
	fstp	QWORD PTR [ecx+edi]
	mov	ecx, DWORD PTR tv20718[ebp]
	fld	QWORD PTR [ecx+24]
	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi+esi*4+4]
	mov	ecx, DWORD PTR tv21187[ebp]
	lea	ecx, DWORD PTR [ecx+eax+16]
	fld	QWORD PTR [edi+ecx]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edi+ecx]
	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [edi+ecx]
	fstp	QWORD PTR [edi+ecx]
	fld	QWORD PTR [edx+8]
	add	DWORD PTR tv20718[ebp], 32		; 00000020H
	fld	QWORD PTR [eax+16]
	add	eax, 32					; 00000020H
	fadd	ST(0), ST(1)
	add	edx, 32					; 00000020H
	dec	DWORD PTR tv3820[ebp]
	fstp	QWORD PTR [eax-16]
	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [ecx+edi]
	fstp	QWORD PTR [ecx+edi]
	jne	$LN434@star_sqcur@2

; 381  :           for ( i = 0 ; i < eff_dim ; i++ )

	mov	ecx, DWORD PTR _grad2$89306[ebp]
	mov	eax, DWORD PTR _i$[ebp]
$LN521@star_sqcur@2:
	cmp	eax, DWORD PTR _eff_dim$[ebp]
	jge	$LN164@star_sqcur@2

; 378  :   { case TEST_SQ:
; 379  :         for ( k = 0 ; k < pairs ; k++ )

	mov	edx, DWORD PTR _dnndv1$[ebp]
	lea	edi, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR tv21365[ebp]
	mov	edx, DWORD PTR [edi+edx]

; 381  :           for ( i = 0 ; i < eff_dim ; i++ )

	mov	edi, DWORD PTR [edi]
	sub	edi, edx
	sub	edx, ecx
	mov	DWORD PTR tv29328[ebp], edi
	mov	DWORD PTR tv29325[ebp], edx
	jmp	SHORT $LC162@star_sqcur@2
$LN519@star_sqcur@2:
	mov	ecx, DWORD PTR _grad2$89306[ebp]
	mov	edx, DWORD PTR tv29325[ebp]
	mov	edi, DWORD PTR tv29328[ebp]
$LC162@star_sqcur@2:
	lea	ecx, DWORD PTR [ecx+eax*8]

; 382  :           { g = dnndv1[k][i];

	add	edx, ecx
	fld	QWORD PTR [edx+edi]
	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi+esi*4+4]

; 383  :             v_info->grad[k+1][i] += g;

	fld	QWORD PTR [edi+eax*8]
	lea	edi, DWORD PTR [edi+eax*8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edi]

; 384  :             v_info->grad[0][i] -= g;

	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [edi+eax*8]
	lea	edi, DWORD PTR [edi+eax*8]
	fstp	QWORD PTR [edi]

; 385  :             g = dnndv2[k][i];

	fld	QWORD PTR [edx]

; 386  :             grad2[i] += g;

	fld	QWORD PTR [ecx]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [ecx]

; 387  :             v_info->grad[0][i] -= g;

	mov	ecx, DWORD PTR [ebx+1336]
	mov	edx, DWORD PTR [ecx]
	fsubr	QWORD PTR [edx+eax*8]
	lea	ecx, DWORD PTR [edx+eax*8]
	inc	eax
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _eff_dim$[ebp]
	jl	SHORT $LN519@star_sqcur@2
$LN164@star_sqcur@2:

; 378  :   { case TEST_SQ:
; 379  :         for ( k = 0 ; k < pairs ; k++ )

	mov	esi, DWORD PTR tv12453[ebp]
	mov	DWORD PTR _k$[ebp], esi
	cmp	esi, DWORD PTR _pairs$[ebp]
	jl	$LN530@star_sqcur@2

; 388  :           }
; 389  :          }
; 390  :         break;

	jmp	$LN467@star_sqcur@2
$LN642@star_sqcur@2:

; 391  : 
; 392  :      case PLAIN_SQ: 
; 393  :         for ( k = 0 ; k < pairs ; k++ )

	xor	esi, esi
	fstp	ST(0)
	test	ecx, ecx
	jle	$LN467@star_sqcur@2
	mov	eax, DWORD PTR _dffdv2$[ebp]
	fld	QWORD PTR _area$[ebp]
	mov	edx, DWORD PTR _dAdv1$[ebp]
	fld	QWORD PTR __real@3fe8000000000000
	sub	eax, edi
	mov	DWORD PTR tv22730[ebp], eax
	mov	eax, DWORD PTR _dAdv2$[ebp]
	mov	ecx, 8
	sub	ecx, edi
	sub	edx, edi
	sub	eax, edi
	mov	DWORD PTR tv22721[ebp], ecx
	mov	DWORD PTR tv22725[ebp], edx
	mov	DWORD PTR tv22735[ebp], eax
	jmp	SHORT $LN158@star_sqcur@2
$LN531@star_sqcur@2:
	mov	ecx, DWORD PTR tv22721[ebp]
$LN158@star_sqcur@2:

; 394  :         { REAL *grad2 = (k+1==pairs)?v_info->grad[final_edge+1]:v_info->grad[k+2];

	lea	eax, DWORD PTR [esi+1]
	cmp	eax, DWORD PTR _pairs$[ebp]
	mov	DWORD PTR tv12453[ebp], eax
	mov	eax, DWORD PTR [ebx+1336]
	jne	SHORT $LN273@star_sqcur@2
	mov	ecx, DWORD PTR _final_edge$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4+4]
	mov	DWORD PTR _grad2$89314[ebp], eax
	jmp	SHORT $LN274@star_sqcur@2
$LN273@star_sqcur@2:
	lea	eax, DWORD PTR [eax+esi*4]
	add	eax, ecx
	mov	ecx, DWORD PTR [eax+edi]
	mov	DWORD PTR _grad2$89314[ebp], ecx
$LN274@star_sqcur@2:

; 395  :           for ( i = 0 ; i < eff_dim ; i++ )

	xor	ecx, ecx
	cmp	DWORD PTR _eff_dim$[ebp], 4
	jl	$LN488@star_sqcur@2

; 391  : 
; 392  :      case PLAIN_SQ: 
; 393  :         for ( k = 0 ; k < pairs ; k++ )

	mov	ecx, DWORD PTR tv22730[ebp]
	fld	ST(0)
	lea	eax, DWORD PTR [edi+esi*4]
	fdiv	ST(0), ST(2)
	mov	edx, DWORD PTR [eax+edx]
	mov	edi, DWORD PTR [eax]

; 395  :           for ( i = 0 ; i < eff_dim ; i++ )

	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR tv13057[ebp], edi

; 401  :             v_info->grad[0][i] -= g;

	sub	edi, edx
	mov	DWORD PTR tv29431[ebp], edi
	mov	DWORD PTR tv29417[ebp], ecx
	mov	ecx, DWORD PTR tv22735[ebp]
	mov	eax, DWORD PTR [eax+ecx]
	mov	edi, DWORD PTR tv29417[ebp]
	sub	edi, edx
	mov	DWORD PTR tv29434[ebp], edi
	mov	DWORD PTR tv29422[ebp], eax
	mov	edi, eax
	sub	edi, edx
	mov	DWORD PTR tv29437[ebp], edi
	mov	edi, DWORD PTR _grad2$89314[ebp]
	sub	edi, edx
	mov	DWORD PTR tv21676[ebp], eax
	mov	eax, DWORD PTR _grad2$89314[ebp]
	mov	DWORD PTR tv29440[ebp], edi
	mov	edi, DWORD PTR tv13057[ebp]
	add	eax, 24					; 00000018H
	mov	ecx, DWORD PTR tv29417[ebp]
	mov	DWORD PTR tv21904[ebp], eax
	lea	eax, DWORD PTR [edx+8]
	neg	edx
	mov	DWORD PTR tv29443[ebp], edx
	mov	edx, DWORD PTR tv29417[ebp]
	sub	edi, edx
	mov	DWORD PTR tv29454[ebp], edi
	mov	edi, DWORD PTR tv29422[ebp]
	sub	edi, edx
	mov	DWORD PTR tv29457[ebp], edi
	mov	edi, DWORD PTR _grad2$89314[ebp]
	sub	edi, edx
	fld	QWORD PTR _ff$[ebp]
	mov	edx, DWORD PTR tv29422[ebp]
	fmul	ST(0), ST(2)
	sub	edx, DWORD PTR _grad2$89314[ebp]
	mov	DWORD PTR tv29460[ebp], edi
	mov	edi, DWORD PTR _eff_dim$[ebp]
	add	edi, -4					; fffffffcH
	shr	edi, 2
	fdiv	ST(0), ST(3)
	inc	edi
	mov	DWORD PTR tv29463[ebp], edx
	mov	edx, DWORD PTR tv13057[ebp]
	sub	edx, DWORD PTR tv29422[ebp]
	mov	DWORD PTR tv3154[ebp], edi
	add	edi, edi
	add	ecx, 16					; 00000010H
	add	edi, edi
	mov	DWORD PTR tv29466[ebp], edx
	mov	DWORD PTR _i$[ebp], edi
	fdiv	ST(0), ST(3)
	jmp	SHORT $LN437@star_sqcur@2
$LN511@star_sqcur@2:

; 395  :           for ( i = 0 ; i < eff_dim ; i++ )

	mov	edx, DWORD PTR tv29466[ebp]
$LN437@star_sqcur@2:

; 396  :           { g = -0.75*ff/area/area*dAdv1[k][i] + 0.75/area*dffdv1[k][i];

	mov	edi, DWORD PTR tv21676[ebp]
	fld	QWORD PTR [edx+edi]

; 397  :             v_info->grad[k+1][i] += g;

	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi+esi*4+4]
	fmul	ST(0), ST(2)
	fld	QWORD PTR [eax-8]
	mov	edx, DWORD PTR tv29443[ebp]
	fmul	ST(0), ST(2)
	lea	edx, DWORD PTR [edx+eax-8]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edi+edx]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edi+edx]

; 398  :             v_info->grad[0][i] -= g;

	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [edi+edx]
	fstp	QWORD PTR [edi+edx]

; 399  :             g = -0.75*ff/area/area*dAdv2[k][i] + 0.75/area*dffdv2[k][i];

	mov	edi, DWORD PTR tv21676[ebp]
	fld	QWORD PTR [ecx-16]
	fmul	ST(0), ST(2)
	fld	ST(1)
	fmul	QWORD PTR [edi]

; 400  :             grad2[i] += g;

	mov	edi, DWORD PTR tv21904[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edi-24]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edi-24]

; 401  :             v_info->grad[0][i] -= g;

	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [edi+edx]
	fstp	QWORD PTR [edi+edx]
	mov	edi, DWORD PTR tv29431[ebp]
	fld	QWORD PTR [edi+eax]
	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi+esi*4+4]
	fmul	ST(0), ST(2)
	fld	QWORD PTR [eax]
	lea	edi, DWORD PTR [edi+edx+8]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edi]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edi]
	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [edi+edx+8]
	lea	edi, DWORD PTR [edi+edx+8]
	fstp	QWORD PTR [edi]
	mov	edi, DWORD PTR tv29434[ebp]
	fld	QWORD PTR [edi+eax]
	mov	edi, DWORD PTR tv29437[ebp]
	fmul	ST(0), ST(2)
	fld	QWORD PTR [edi+eax]
	mov	edi, DWORD PTR tv29440[ebp]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edi+eax]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edi+eax]
	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [edi+edx+8]
	lea	edx, DWORD PTR [edi+edx+8]
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR tv29454[ebp]
	fld	QWORD PTR [edx+ecx]
	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi+esi*4+4]
	fmul	ST(0), ST(2)
	fld	QWORD PTR [eax+8]
	mov	edx, DWORD PTR tv29443[ebp]
	fmul	ST(0), ST(2)
	lea	edx, DWORD PTR [edx+eax+8]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edi+edx]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edi+edx]
	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [edi+edx]
	fstp	QWORD PTR [edi+edx]

; 399  :             g = -0.75*ff/area/area*dAdv2[k][i] + 0.75/area*dffdv2[k][i];

	fld	QWORD PTR [ecx]
	mov	edi, DWORD PTR tv29457[ebp]
	fmul	ST(0), ST(2)
	fld	QWORD PTR [edi+ecx]

; 400  :             grad2[i] += g;

	mov	edi, DWORD PTR tv29460[ebp]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fld	ST(0)
	fadd	QWORD PTR [edi+ecx]
	fstp	QWORD PTR [edi+ecx]

; 401  :             v_info->grad[0][i] -= g;

	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [edx+edi]
	fstp	QWORD PTR [edx+edi]
	mov	edx, DWORD PTR tv29463[ebp]
	add	edx, DWORD PTR tv21904[ebp]
	mov	edi, DWORD PTR tv29466[ebp]
	fld	QWORD PTR [edx+edi]
	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi+esi*4+4]
	fmul	ST(0), ST(2)
	fld	QWORD PTR [eax+16]
	mov	DWORD PTR tv29596[ebp], edx
	mov	edx, DWORD PTR tv29443[ebp]
	fmul	ST(0), ST(2)
	lea	edx, DWORD PTR [edx+eax+16]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edi+edx]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edi+edx]
	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [edi+edx]
	fstp	QWORD PTR [edi+edx]
	mov	edi, DWORD PTR tv29596[ebp]
	fld	QWORD PTR [ecx+8]
	fmul	ST(0), ST(2)
	fld	ST(1)
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR tv21904[ebp]
	fsubp	ST(1), ST(0)
	fld	ST(0)
	fadd	QWORD PTR [edi]
	fstp	QWORD PTR [edi]
	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [edx+edi]
	fstp	QWORD PTR [edx+edi]
	mov	edx, 32					; 00000020H
	add	DWORD PTR tv21676[ebp], edx
	add	DWORD PTR tv21904[ebp], edx
	add	eax, edx
	add	ecx, edx
	dec	DWORD PTR tv3154[ebp]
	jne	$LN511@star_sqcur@2

; 395  :           for ( i = 0 ; i < eff_dim ; i++ )

	mov	ecx, DWORD PTR _i$[ebp]
	fstp	ST(1)
	mov	edx, DWORD PTR tv22725[ebp]
	fstp	ST(0)
	mov	edi, DWORD PTR _dffdv1$[ebp]
$LN488@star_sqcur@2:
	cmp	ecx, DWORD PTR _eff_dim$[ebp]
	jge	$LN157@star_sqcur@2

; 391  : 
; 392  :      case PLAIN_SQ: 
; 393  :         for ( k = 0 ; k < pairs ; k++ )

	fld	ST(0)
	lea	eax, DWORD PTR [edi+esi*4]
	mov	edx, DWORD PTR [eax+edx]
	fdiv	ST(0), ST(2)

; 395  :           for ( i = 0 ; i < eff_dim ; i++ )

	mov	edi, DWORD PTR [eax]
	sub	edi, edx
	mov	DWORD PTR tv29431[ebp], edi
	mov	edi, DWORD PTR tv22730[ebp]
	mov	edi, DWORD PTR [eax+edi]
	sub	edi, edx
	mov	DWORD PTR tv29434[ebp], edi
	mov	edi, DWORD PTR tv22735[ebp]
	mov	eax, DWORD PTR [eax+edi]
	sub	eax, edx
	mov	DWORD PTR tv29437[ebp], eax
	mov	eax, DWORD PTR _grad2$89314[ebp]
	sub	eax, edx
	mov	DWORD PTR tv29440[ebp], eax
	fld	QWORD PTR _ff$[ebp]
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
$LC155@star_sqcur@2:

; 396  :           { g = -0.75*ff/area/area*dAdv1[k][i] + 0.75/area*dffdv1[k][i];

	mov	edi, DWORD PTR tv29431[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	fld	QWORD PTR [eax+edi]
	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi+esi*4+4]
	fmul	ST(0), ST(2)
	fld	QWORD PTR [eax]
	lea	edi, DWORD PTR [edi+ecx*8]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)

; 397  :             v_info->grad[k+1][i] += g;

	fld	QWORD PTR [edi]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edi]

; 398  :             v_info->grad[0][i] -= g;

	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [edi+ecx*8]
	lea	edi, DWORD PTR [edi+ecx*8]
	fstp	QWORD PTR [edi]

; 399  :             g = -0.75*ff/area/area*dAdv2[k][i] + 0.75/area*dffdv2[k][i];

	mov	edi, DWORD PTR tv29434[ebp]
	fld	QWORD PTR [eax+edi]
	mov	edi, DWORD PTR tv29437[ebp]
	fmul	ST(0), ST(2)
	fld	QWORD PTR [eax+edi]

; 400  :             grad2[i] += g;

	mov	edi, DWORD PTR tv29440[ebp]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+edi]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax+edi]

; 401  :             v_info->grad[0][i] -= g;

	mov	eax, DWORD PTR [ebx+1336]
	mov	eax, DWORD PTR [eax]
	fsubr	QWORD PTR [eax+ecx*8]
	lea	eax, DWORD PTR [eax+ecx*8]
	inc	ecx
	fstp	QWORD PTR [eax]
	cmp	ecx, DWORD PTR _eff_dim$[ebp]
	jl	SHORT $LC155@star_sqcur@2

; 395  :           for ( i = 0 ; i < eff_dim ; i++ )

	mov	edx, DWORD PTR tv22725[ebp]
	fstp	ST(1)
	mov	edi, DWORD PTR _dffdv1$[ebp]
	fstp	ST(0)
$LN157@star_sqcur@2:

; 391  : 
; 392  :      case PLAIN_SQ: 
; 393  :         for ( k = 0 ; k < pairs ; k++ )

	mov	esi, DWORD PTR tv12453[ebp]
	cmp	esi, DWORD PTR _pairs$[ebp]
	jl	$LN531@star_sqcur@2

; 402  :           }
; 403  :          }
; 404  :         break;

	fld	QWORD PTR _hh0$[ebp]
	fld	QWORD PTR _nn$[ebp]
	fld	QWORD PTR _fn$[ebp]
	fxch	ST(2)
	fxch	ST(3)
	fxch	ST(2)
	jmp	$LN134@star_sqcur@2
$LN641@star_sqcur@2:

; 405  : 
; 406  :      case EFF_SQ:
; 407  :         for ( k = 0 ; k < pairs ; k++ )

	xor	esi, esi
	fstp	ST(0)
	mov	DWORD PTR _k$[ebp], esi
	test	ecx, ecx
	jle	$LN467@star_sqcur@2
	mov	eax, DWORD PTR _dAdv1$[ebp]
	fld	QWORD PTR _area$[ebp]
	mov	edx, DWORD PTR _dnndv1$[ebp]
	fld	QWORD PTR _nn$[ebp]
	sub	edx, eax
	mov	DWORD PTR tv24510[ebp], edx
	mov	edx, DWORD PTR _dAdv2$[ebp]
	sub	edx, eax
	mov	DWORD PTR tv24515[ebp], edx
	mov	edx, DWORD PTR _dffdv2$[ebp]
	mov	ecx, 8
	sub	ecx, eax
	sub	edx, eax
	mov	DWORD PTR tv24501[ebp], ecx
	mov	DWORD PTR tv24520[ebp], edx
	mov	edx, DWORD PTR _dnndv2$[ebp]
	mov	ecx, edi
	sub	ecx, eax
	sub	edx, eax
	mov	DWORD PTR tv24368[ebp], eax
	mov	DWORD PTR tv24505[ebp], ecx
	mov	DWORD PTR tv24525[ebp], edx
$LN151@star_sqcur@2:

; 408  :         { REAL *grad2 = (k+1==pairs)?v_info->grad[final_edge+1]:v_info->grad[k+2];

	inc	esi
	mov	DWORD PTR tv12453[ebp], esi
	cmp	esi, DWORD PTR _pairs$[ebp]
	jne	SHORT $LN275@star_sqcur@2
	mov	edx, DWORD PTR [ebx+1336]
	mov	esi, DWORD PTR _final_edge$[ebp]
	mov	edx, DWORD PTR [edx+esi*4+4]
	jmp	SHORT $LN1068@star_sqcur@2
$LN275@star_sqcur@2:
	mov	edx, DWORD PTR tv24501[ebp]
	mov	esi, DWORD PTR [ebx+1336]
	add	edx, eax
	mov	edx, DWORD PTR [edx+esi]
$LN1068@star_sqcur@2:
	mov	DWORD PTR _grad2$89322[ebp], edx

; 409  :           for ( i = 0 ; i < eff_dim ; i++ )

	xor	edx, edx
	cmp	DWORD PTR _eff_dim$[ebp], 4
	jl	$LN508@star_sqcur@2
	fld	QWORD PTR _ff$[ebp]
	mov	esi, DWORD PTR [ecx+eax]
	mov	edi, DWORD PTR [eax]
	fld	ST(0)
	fld	QWORD PTR __real@3fe8000000000000
	mov	ecx, DWORD PTR tv24510[ebp]
	mov	ecx, DWORD PTR [ecx+eax]
	fmul	ST(1), ST(0)

; 419  :              v_info->grad[0][i] -= g;

	sub	edi, esi
	fxch	ST(1)
	mov	edx, DWORD PTR tv24515[ebp]
	mov	edx, DWORD PTR [edx+eax]
	fdiv	ST(0), ST(3)
	mov	DWORD PTR tv24544[ebp], edi
	mov	DWORD PTR tv24518[ebp], edx
	mov	edx, DWORD PTR tv24520[ebp]
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR tv24513[ebp], ecx
	mov	edi, ecx
	sub	edi, esi
	mov	DWORD PTR tv24548[ebp], edi
	mov	edi, DWORD PTR tv24518[ebp]
	sub	edi, esi
	mov	DWORD PTR tv24552[ebp], edi
	mov	DWORD PTR tv24523[ebp], edx
	mov	edx, DWORD PTR tv24525[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	edi, DWORD PTR tv24523[ebp]
	sub	edi, esi
	mov	DWORD PTR tv24556[ebp], edi
	mov	DWORD PTR tv24528[ebp], eax
	mov	edi, eax
	sub	edi, esi
	mov	DWORD PTR tv24560[ebp], edi
	mov	edi, DWORD PTR _grad2$89322[ebp]
	sub	edi, esi
	mov	DWORD PTR tv24564[ebp], edi
	lea	eax, DWORD PTR [esi+8]
	neg	esi
	mov	DWORD PTR tv24568[ebp], esi
	mov	esi, DWORD PTR tv24368[ebp]
	mov	edi, DWORD PTR [esi]
	mov	esi, DWORD PTR tv24513[ebp]
	sub	edi, esi
	mov	DWORD PTR tv24582[ebp], edi
	mov	edi, DWORD PTR tv24518[ebp]
	sub	edi, esi
	mov	DWORD PTR tv24586[ebp], edi
	mov	edi, DWORD PTR tv24523[ebp]
	fld	ST(4)
	mov	edx, DWORD PTR tv24523[ebp]
	fmulp	ST(2), ST(0)
	sub	edi, esi
	fxch	ST(1)
	mov	DWORD PTR tv24590[ebp], edi
	mov	edi, DWORD PTR tv24528[ebp]
	sub	edi, esi
	mov	DWORD PTR tv24594[ebp], edi
	fdiv	ST(0), ST(3)
	mov	edi, DWORD PTR _grad2$89322[ebp]
	sub	edi, esi
	mov	esi, DWORD PTR tv24368[ebp]
	mov	DWORD PTR tv24598[ebp], edi
	mov	edi, DWORD PTR [esi]
	mov	esi, DWORD PTR tv24518[ebp]
	sub	edi, esi
	mov	DWORD PTR tv24602[ebp], edi
	mov	edi, DWORD PTR tv24523[ebp]
	sub	edi, esi
	mov	DWORD PTR tv23185[ebp], edx
	mov	edx, DWORD PTR tv24518[ebp]
	mov	DWORD PTR tv24606[ebp], edi
	mov	edi, DWORD PTR tv24528[ebp]
	add	edx, 24					; 00000018H
	add	ecx, 16					; 00000010H
	sub	edi, esi
	mov	DWORD PTR tv24610[ebp], edi
	mov	edi, DWORD PTR _grad2$89322[ebp]
	fld	ST(0)
	fdiv	ST(0), ST(4)
	fmulp	ST(3), ST(0)
	sub	edi, esi
	mov	esi, DWORD PTR tv24368[ebp]
	mov	DWORD PTR tv24614[ebp], edi
	mov	edi, DWORD PTR [esi]
	mov	esi, DWORD PTR tv24523[ebp]
	sub	edi, esi
	mov	DWORD PTR tv24618[ebp], edi
	mov	edi, DWORD PTR tv24528[ebp]
	sub	edi, esi
	mov	DWORD PTR tv24622[ebp], edi
	mov	edi, DWORD PTR _grad2$89322[ebp]
	sub	edi, esi
	mov	esi, DWORD PTR _eff_dim$[ebp]
	add	esi, -4					; fffffffcH
	shr	esi, 2
	inc	esi
	mov	DWORD PTR tv2179[ebp], esi
	add	esi, esi
	add	esi, esi
	mov	DWORD PTR tv24626[ebp], edi
	mov	DWORD PTR _i$[ebp], esi
$LN440@star_sqcur@2:

; 410  :           { g = 0.75*ff/nn*dAdv1[k][i] 
; 411  :                     + 0.75*area/nn*dffdv1[k][i]
; 412  :                       - 0.75*area/nn/nn*ff*dnndv1[k][i];

	mov	esi, DWORD PTR tv24618[ebp]
	mov	edi, DWORD PTR tv23185[ebp]
	fld	QWORD PTR [edi+esi]

; 413  :              v_info->grad[k+1][i] += g;

	mov	esi, DWORD PTR [ebx+1336]
	fmul	ST(0), ST(2)
	mov	edi, DWORD PTR _k$[ebp]
	mov	esi, DWORD PTR [esi+edi*4+4]
	fld	QWORD PTR [eax-8]
	fmul	ST(0), ST(2)
	mov	edi, DWORD PTR tv24568[ebp]
	lea	edi, DWORD PTR [eax+edi-8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-16]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	ST(0)
	fadd	QWORD PTR [esi+edi]
	fstp	QWORD PTR [esi+edi]

; 414  :              v_info->grad[0][i] -= g;

	mov	esi, DWORD PTR [ebx+1336]
	mov	esi, DWORD PTR [esi]
	fsubr	QWORD PTR [esi+edi]
	fstp	QWORD PTR [esi+edi]

; 415  :              g = 0.75*ff/nn*dAdv2[k][i] 
; 416  :                     + 0.75*area/nn*dffdv2[k][i]
; 417  :                       - 0.75*area/nn/nn*ff*dnndv2[k][i];

	mov	esi, DWORD PTR tv23185[ebp]
	fld	QWORD PTR [edx-24]
	mov	edi, DWORD PTR tv24622[ebp]
	fmul	ST(0), ST(2)
	fld	QWORD PTR [esi]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [esi+edi]

; 418  :              grad2[i] += g;

	mov	edi, DWORD PTR tv24626[ebp]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [esi+edi]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [esi+edi]

; 419  :              v_info->grad[0][i] -= g;

	mov	esi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [esi]
	mov	esi, DWORD PTR tv24568[ebp]
	lea	esi, DWORD PTR [eax+esi-8]
	fsubr	QWORD PTR [esi+edi]
	fstp	QWORD PTR [esi+edi]
	mov	esi, DWORD PTR tv24544[ebp]
	fld	QWORD PTR [eax+esi]
	mov	esi, DWORD PTR tv24548[ebp]
	mov	edi, DWORD PTR _k$[ebp]
	fmul	ST(0), ST(2)
	fld	QWORD PTR [eax]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax+esi]
	mov	esi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [esi+edi*4+4]
	fmul	ST(0), ST(4)
	mov	esi, DWORD PTR tv24568[ebp]
	lea	esi, DWORD PTR [eax+esi-8]
	fsubp	ST(1), ST(0)
	lea	edi, DWORD PTR [edi+esi+8]
	fld	QWORD PTR [edi]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edi]
	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [edi+esi+8]
	lea	edi, DWORD PTR [edi+esi+8]
	fstp	QWORD PTR [edi]
	mov	edi, DWORD PTR tv24556[ebp]
	fld	QWORD PTR [edi+eax]
	mov	edi, DWORD PTR tv24552[ebp]
	fmul	ST(0), ST(1)
	fld	QWORD PTR [eax+edi]
	mov	edi, DWORD PTR tv24560[ebp]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi+eax]
	mov	edi, DWORD PTR tv24564[ebp]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edi+eax]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edi+eax]
	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [edi+esi+8]
	lea	esi, DWORD PTR [edi+esi+8]
	mov	edi, DWORD PTR _k$[ebp]
	fstp	QWORD PTR [esi]
	mov	esi, DWORD PTR tv24582[ebp]
	fld	QWORD PTR [ecx+esi]
	mov	esi, DWORD PTR [ebx+1336]
	fmul	ST(0), ST(2)
	mov	edi, DWORD PTR [esi+edi*4+4]
	fld	QWORD PTR [eax+8]
	mov	esi, DWORD PTR tv24568[ebp]
	fmul	ST(0), ST(2)
	lea	esi, DWORD PTR [esi+eax+8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edi+esi]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edi+esi]
	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [edi+esi]
	fstp	QWORD PTR [edi+esi]
	mov	edi, DWORD PTR tv24590[ebp]
	fld	QWORD PTR [ecx+edi]
	mov	edi, DWORD PTR tv24586[ebp]
	fmul	ST(0), ST(1)
	fld	QWORD PTR [ecx+edi]
	mov	edi, DWORD PTR tv24594[ebp]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx+edi]
	mov	edi, DWORD PTR tv24598[ebp]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ecx+edi]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [ecx+edi]
	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [esi+edi]
	fstp	QWORD PTR [esi+edi]
	mov	esi, DWORD PTR tv24602[ebp]
	fld	QWORD PTR [edx+esi]
	mov	esi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR _k$[ebp]
	fmul	ST(0), ST(2)
	fld	QWORD PTR [eax+16]
	mov	edi, DWORD PTR [esi+edi*4+4]
	mov	esi, DWORD PTR tv24568[ebp]
	fmul	ST(0), ST(2)
	lea	esi, DWORD PTR [esi+eax+16]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx+8]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edi+esi]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edi+esi]
	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [edi+esi]
	fstp	QWORD PTR [edi+esi]
	mov	edi, DWORD PTR tv24606[ebp]
	fld	QWORD PTR [edx+edi]
	mov	edi, DWORD PTR tv24610[ebp]
	fmul	ST(0), ST(1)
	fld	QWORD PTR [edx]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx+edi]
	mov	edi, DWORD PTR tv24614[ebp]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	ST(0)
	fadd	QWORD PTR [edx+edi]
	fstp	QWORD PTR [edx+edi]
	mov	edi, DWORD PTR [ebx+1336]
	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [esi+edi]
	add	DWORD PTR tv23185[ebp], 32		; 00000020H
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	add	edx, 32					; 00000020H
	fstp	QWORD PTR [esi+edi]
	dec	DWORD PTR tv2179[ebp]
	jne	$LN440@star_sqcur@2

; 409  :           for ( i = 0 ; i < eff_dim ; i++ )

	mov	edx, DWORD PTR _i$[ebp]
	fstp	ST(0)
	mov	ecx, DWORD PTR tv24505[ebp]
	fstp	ST(0)
	mov	eax, DWORD PTR tv24368[ebp]
	fstp	ST(0)
$LN508@star_sqcur@2:
	cmp	edx, DWORD PTR _eff_dim$[ebp]
	jge	$LN150@star_sqcur@2
	fld	QWORD PTR _ff$[ebp]
	mov	esi, DWORD PTR [ecx+eax]
	fld	ST(0)
	mov	edi, DWORD PTR [eax]
	fld	QWORD PTR __real@3fe8000000000000
	sub	edi, esi
	fmul	ST(1), ST(0)
	mov	DWORD PTR tv24544[ebp], edi
	fxch	ST(1)
	mov	edi, DWORD PTR tv24510[ebp]
	mov	edi, DWORD PTR [edi+eax]
	fdiv	ST(0), ST(3)
	sub	edi, esi
	mov	DWORD PTR tv24548[ebp], edi
	mov	edi, DWORD PTR tv24515[ebp]
	mov	edi, DWORD PTR [edi+eax]
	sub	edi, esi
	mov	DWORD PTR tv24552[ebp], edi
	mov	edi, DWORD PTR tv24520[ebp]
	mov	edi, DWORD PTR [edi+eax]
	sub	edi, esi
	mov	DWORD PTR tv24556[ebp], edi
	mov	edi, DWORD PTR tv24525[ebp]
	mov	edi, DWORD PTR [edi+eax]
	sub	edi, esi
	mov	DWORD PTR tv24560[ebp], edi
	mov	edi, DWORD PTR _grad2$89322[ebp]
	sub	edi, esi
	mov	DWORD PTR tv24564[ebp], edi
	mov	edi, DWORD PTR _k$[ebp]
	lea	ecx, DWORD PTR [esi+edx*8]
	fld	ST(4)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(3)
	fld	ST(0)
	fdiv	ST(0), ST(4)
	fmulp	ST(3), ST(0)
$LC148@star_sqcur@2:

; 410  :           { g = 0.75*ff/nn*dAdv1[k][i] 
; 411  :                     + 0.75*area/nn*dffdv1[k][i]
; 412  :                       - 0.75*area/nn/nn*ff*dnndv1[k][i];

	mov	esi, DWORD PTR tv24544[ebp]
	fld	QWORD PTR [esi+ecx]
	mov	esi, DWORD PTR tv24548[ebp]
	fmul	ST(0), ST(2)
	add	ecx, 8
	fld	QWORD PTR [ecx-8]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [esi+ecx-8]
	mov	esi, DWORD PTR [ebx+1336]
	mov	esi, DWORD PTR [esi+edi*4+4]
	fmul	ST(0), ST(4)
	lea	esi, DWORD PTR [esi+edx*8]
	fsubp	ST(1), ST(0)

; 413  :              v_info->grad[k+1][i] += g;

	fld	QWORD PTR [esi]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [esi]

; 414  :              v_info->grad[0][i] -= g;

	mov	esi, DWORD PTR [ebx+1336]
	mov	esi, DWORD PTR [esi]
	fsubr	QWORD PTR [esi+edx*8]
	lea	esi, DWORD PTR [esi+edx*8]
	fstp	QWORD PTR [esi]

; 415  :              g = 0.75*ff/nn*dAdv2[k][i] 
; 416  :                     + 0.75*area/nn*dffdv2[k][i]
; 417  :                       - 0.75*area/nn/nn*ff*dnndv2[k][i];

	mov	esi, DWORD PTR tv24556[ebp]
	fld	QWORD PTR [esi+ecx-8]
	mov	esi, DWORD PTR tv24552[ebp]
	fmul	ST(0), ST(1)
	fld	QWORD PTR [esi+ecx-8]
	mov	esi, DWORD PTR tv24560[ebp]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [esi+ecx-8]

; 418  :              grad2[i] += g;

	mov	esi, DWORD PTR tv24564[ebp]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [esi+ecx-8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [esi+ecx-8]

; 419  :              v_info->grad[0][i] -= g;

	mov	esi, DWORD PTR [ebx+1336]
	mov	esi, DWORD PTR [esi]
	fsubr	QWORD PTR [esi+edx*8]
	lea	esi, DWORD PTR [esi+edx*8]
	inc	edx
	fstp	QWORD PTR [esi]
	cmp	edx, DWORD PTR _eff_dim$[ebp]
	jl	$LC148@star_sqcur@2

; 409  :           for ( i = 0 ; i < eff_dim ; i++ )

	mov	ecx, DWORD PTR tv24505[ebp]
	fstp	ST(0)
	fstp	ST(0)
	fstp	ST(0)
$LN150@star_sqcur@2:

; 405  : 
; 406  :      case EFF_SQ:
; 407  :         for ( k = 0 ; k < pairs ; k++ )

	mov	esi, DWORD PTR tv12453[ebp]
	add	eax, 4
	mov	DWORD PTR _k$[ebp], esi
	mov	DWORD PTR tv24368[ebp], eax
	cmp	esi, DWORD PTR _pairs$[ebp]
	jl	$LN151@star_sqcur@2

; 420  :           }
; 421  :         } 
; 422  :         break;

	fld	QWORD PTR _hh0$[ebp]
	fld	QWORD PTR _fn$[ebp]
	fld	QWORD PTR __real@3fe8000000000000
	fxch	ST(2)
	fxch	ST(3)
	jmp	$LN1071@star_sqcur@2
$LN145@star_sqcur@2:

; 423  : 
; 424  :      case NORMAL_SQ:
; 425  :       if ( fn != 0.0 )

	fld	QWORD PTR _fn$[ebp]
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jnp	$LN468@star_sqcur@2

; 426  :         for ( k = 0 ; k < pairs ; k++ )

	mov	DWORD PTR _k$[ebp], 0
	test	ecx, ecx
	jle	$LN468@star_sqcur@2
	mov	ecx, DWORD PTR _dAdv2$[ebp]
	fld	QWORD PTR _area$[ebp]
	mov	esi, DWORD PTR _dfndv1$[ebp]
	fld	QWORD PTR _hh0$[ebp]
	mov	ebx, DWORD PTR _dffdv2$[ebp]
	fld	QWORD PTR __real@3fe8000000000000
	mov	eax, 8
	sub	eax, edi
	sub	ecx, edi
	mov	DWORD PTR tv22721[ebp], eax
	mov	eax, DWORD PTR _dAdv1$[ebp]
	mov	DWORD PTR tv22735[ebp], ecx
	mov	ecx, DWORD PTR _dfndv2$[ebp]
	sub	eax, edi
	sub	esi, edi
	sub	ebx, edi
	sub	ecx, edi
	mov	edx, edi
	mov	DWORD PTR tv25049[ebp], ecx
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR tv24974[ebp], edx
	mov	DWORD PTR tv22725[ebp], eax
	mov	DWORD PTR tv25036[ebp], esi
	mov	DWORD PTR tv22730[ebp], ebx
$LN143@star_sqcur@2:

; 427  :         { REAL *grad2 = (k+1==pairs)?v_info->grad[final_edge+1]:v_info->grad[k+2];

	inc	ecx
	cmp	ecx, DWORD PTR _pairs$[ebp]
	mov	DWORD PTR tv12453[ebp], ecx
	mov	ecx, DWORD PTR _v_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [ecx+1336]
	jne	SHORT $LN277@star_sqcur@2
	mov	edi, DWORD PTR _final_edge$[ebp]
	mov	ecx, DWORD PTR [ecx+edi*4+4]
	jmp	SHORT $LN1069@star_sqcur@2
$LN277@star_sqcur@2:
	mov	edi, DWORD PTR tv22721[ebp]
	add	ecx, edx
	mov	ecx, DWORD PTR [ecx+edi]
$LN1069@star_sqcur@2:
	mov	DWORD PTR _grad2$89331[ebp], ecx

; 428  :           REAL g1,g2,g3;
; 429  :           for ( i = 0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	cmp	DWORD PTR _web+616, ecx
	jle	$LN142@star_sqcur@2
	fld	ST(2)
	mov	esi, DWORD PTR [esi+edx]
	fmul	QWORD PTR __real@3ff8000000000000
	mov	eax, DWORD PTR [edx+eax]
	mov	edi, DWORD PTR [edx]
	sub	esi, eax
	fdiv	ST(0), ST(4)
	mov	DWORD PTR tv25063[ebp], esi
	mov	esi, DWORD PTR [edx+ebx]
	mov	ebx, DWORD PTR _grad2$89331[ebp]
	sub	esi, eax
	mov	DWORD PTR tv25067[ebp], esi
	mov	esi, DWORD PTR tv22735[ebp]
	mov	esi, DWORD PTR [edx+esi]
	sub	esi, eax
	mov	DWORD PTR tv25071[ebp], esi
	mov	esi, DWORD PTR tv25049[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	esi, DWORD PTR _v_info$GSCopy$[ebp]
	sub	edi, eax
	sub	edx, eax
	mov	DWORD PTR tv25059[ebp], edi
	mov	DWORD PTR tv25075[ebp], edx
	sub	ebx, eax
	fmul	ST(0), ST(2)
	fld	ST(2)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv13640[ebp]
	fld	ST(2)
	fmul	QWORD PTR __real@bff8000000000000
	fmul	QWORD PTR _ff$[ebp]
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	jmp	SHORT $LN140@star_sqcur@2
$LN487@star_sqcur@2:
	mov	edi, DWORD PTR tv25059[ebp]
$LN140@star_sqcur@2:

; 430  :           { g1 = 0.75*hh0*hh0*dAdv1[k][i]; 
; 431  :                 g2 = 1.5*area/fn*hh0*dffdv1[k][i];

	fld	QWORD PTR [edi+eax]

; 432  :                  g3 =   - 1.5*area*ff*hh0/fn/fn*dfndv1[k][i]; 

	mov	edx, DWORD PTR tv25063[ebp]
	fmul	ST(0), ST(2)
	mov	edi, DWORD PTR _k$[ebp]
	fld	QWORD PTR tv13640[ebp]
	add	eax, 8
	fmul	QWORD PTR [eax-8]

; 433  :              g = g1 + g2 + g3;

	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx+eax-8]
	mov	edx, DWORD PTR [esi+1336]
	mov	edx, DWORD PTR [edx+edi*4+4]
	fmul	ST(0), ST(2)
	lea	edx, DWORD PTR [edx+ecx*8]
	faddp	ST(1), ST(0)

; 434  :              v_info->grad[k+1][i] += g;

	fld	QWORD PTR [edx]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 435  :              v_info->grad[0][i] -= g;

	mov	edx, DWORD PTR [esi+1336]
	mov	edx, DWORD PTR [edx]
	fsubr	QWORD PTR [edx+ecx*8]
	lea	edx, DWORD PTR [edx+ecx*8]
	fstp	QWORD PTR [edx]

; 436  :              g1 = 0.75*hh0*hh0*dAdv2[k][i] ;

	mov	edx, DWORD PTR tv25071[ebp]
	fld	QWORD PTR [edx+eax-8]

; 437  :                   g2 =  1.5*area/fn*hh0*dffdv2[k][i];

	mov	edx, DWORD PTR tv25067[ebp]
	fmul	QWORD PTR tv13640[ebp]
	fld	QWORD PTR [edx+eax-8]

; 438  :                  g3 =    - 1.5*area*ff*hh0/fn/fn*dfndv2[k][i]; 

	mov	edx, DWORD PTR tv25075[ebp]
	fmul	ST(0), ST(3)

; 439  :              g = g1 + g2 + g3;

	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx+eax-8]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)

; 440  :              grad2[i] += g;

	fld	ST(0)
	fadd	QWORD PTR [ebx+eax-8]
	fstp	QWORD PTR [ebx+eax-8]

; 441  :              v_info->grad[0][i] -= g;

	mov	edx, DWORD PTR [esi+1336]
	mov	edx, DWORD PTR [edx]
	fsubr	QWORD PTR [edx+ecx*8]
	lea	edx, DWORD PTR [edx+ecx*8]
	inc	ecx
	fstp	QWORD PTR [edx]
	cmp	ecx, DWORD PTR _web+616
	jl	$LN487@star_sqcur@2

; 428  :           REAL g1,g2,g3;
; 429  :           for ( i = 0 ; i < SDIM ; i++ )

	mov	ebx, DWORD PTR tv22730[ebp]
	fstp	ST(1)
	mov	eax, DWORD PTR tv22725[ebp]
	fstp	ST(0)
	fld	QWORD PTR __real@3fe8000000000000
	mov	esi, DWORD PTR tv25036[ebp]
	mov	edx, DWORD PTR tv24974[ebp]
$LN142@star_sqcur@2:

; 426  :         for ( k = 0 ; k < pairs ; k++ )

	mov	ecx, DWORD PTR tv12453[ebp]
	add	edx, 4
	mov	DWORD PTR _k$[ebp], ecx
	mov	DWORD PTR tv24974[ebp], edx
	cmp	ecx, DWORD PTR _pairs$[ebp]
	jl	$LN143@star_sqcur@2

; 442  :             }
; 443  :          }
; 444  :         break;

	fld	QWORD PTR _nn$[ebp]
	mov	ebx, DWORD PTR _v_info$GSCopy$[ebp]
	fxch	ST(3)
	fxch	ST(4)
	fxch	ST(2)
	fxch	ST(3)
	fxch	ST(1)
	fxch	ST(2)
	jmp	$LN134@star_sqcur@2
$LN639@star_sqcur@2:

; 376  : 
; 377  :   switch ( variety )

	fstp	ST(0)

; 445  : 
; 446  :      case PERP_SQ:
; 447  :         for ( k = 0 ; k < pairs ; k++ )

	mov	DWORD PTR _k$[ebp], 0
	test	ecx, ecx
	jle	$LN467@star_sqcur@2
	mov	eax, DWORD PTR _dfndv1$[ebp]
	fld	QWORD PTR _area$[ebp]
	mov	ecx, DWORD PTR _dnndv1$[ebp]
	fld	QWORD PTR _hh0$[ebp]
	mov	esi, DWORD PTR _dAdv1$[ebp]
	fld	QWORD PTR _nn$[ebp]
	fld	QWORD PTR _fn$[ebp]
	sub	ecx, eax
	mov	DWORD PTR tv26744[ebp], ecx
	mov	ecx, DWORD PTR _dfndv2$[ebp]
	sub	ecx, eax
	mov	DWORD PTR tv26749[ebp], ecx
	mov	ecx, DWORD PTR _dAdv2$[ebp]
	sub	ecx, eax
	mov	DWORD PTR tv26754[ebp], ecx
	mov	ecx, DWORD PTR _dnndv2$[ebp]
	mov	edx, 8
	sub	edx, eax
	sub	esi, eax
	sub	ecx, eax
	mov	DWORD PTR tv26602[ebp], eax
	mov	DWORD PTR tv26735[ebp], edx
	mov	DWORD PTR tv26739[ebp], esi
	mov	DWORD PTR tv26759[ebp], ecx
	jmp	SHORT $LN136@star_sqcur@2
$LN520@star_sqcur@2:
	mov	edx, DWORD PTR tv26735[ebp]
$LN136@star_sqcur@2:

; 448  :         { REAL *grad2 = (k+1==pairs)?v_info->grad[final_edge+1]:v_info->grad[k+2];

	mov	ecx, DWORD PTR _k$[ebp]
	inc	ecx
	cmp	ecx, DWORD PTR _pairs$[ebp]
	mov	DWORD PTR tv12453[ebp], ecx
	mov	ecx, DWORD PTR _v_info$GSCopy$[ebp]
	jne	SHORT $LN279@star_sqcur@2
	mov	edx, DWORD PTR [ecx+1336]
	mov	edi, DWORD PTR _final_edge$[ebp]
	mov	edx, DWORD PTR [edx+edi*4+4]
	jmp	SHORT $LN1070@star_sqcur@2
$LN279@star_sqcur@2:
	mov	edi, DWORD PTR [ecx+1336]
	add	edi, eax
	mov	edx, DWORD PTR [edi+edx]
$LN1070@star_sqcur@2:
	mov	DWORD PTR _grad2$89342[ebp], edx

; 449  :           for ( i = 0 ; i < eff_dim ; i++ )

	xor	edx, edx
	cmp	DWORD PTR _eff_dim$[ebp], 4
	jl	$LN485@star_sqcur@2
	mov	edi, DWORD PTR [eax+esi]
	fxch	ST(3)
	fmul	QWORD PTR __real@3ff8000000000000
	mov	ebx, DWORD PTR [eax]
	mov	edx, DWORD PTR tv26744[ebp]
	mov	edx, DWORD PTR [eax+edx]
	fld	ST(0)

; 459  :              v_info->grad[0][i] -= g;

	sub	ebx, edi
	fdiv	ST(0), ST(2)
	mov	esi, DWORD PTR tv26749[ebp]
	mov	esi, DWORD PTR [eax+esi]
	mov	DWORD PTR tv26778[ebp], ebx
	mov	DWORD PTR tv26747[ebp], edx
	mov	ebx, edx
	sub	ebx, edi
	mov	DWORD PTR tv26782[ebp], ebx
	mov	DWORD PTR tv26752[ebp], esi
	mov	esi, DWORD PTR tv26754[ebp]
	mov	esi, DWORD PTR [eax+esi]
	mov	ebx, DWORD PTR tv26752[ebp]
	sub	ebx, edi
	mov	DWORD PTR tv26786[ebp], ebx
	mov	DWORD PTR tv26757[ebp], esi
	mov	esi, DWORD PTR tv26759[ebp]
	mov	eax, DWORD PTR [eax+esi]
	mov	ebx, DWORD PTR tv26757[ebp]
	sub	ebx, edi
	mov	DWORD PTR tv26790[ebp], ebx
	mov	DWORD PTR tv26762[ebp], eax
	mov	ebx, eax
	mov	eax, DWORD PTR tv26757[ebp]
	sub	ebx, edi
	mov	DWORD PTR tv26794[ebp], ebx
	mov	ebx, DWORD PTR _grad2$89342[ebp]
	sub	ebx, edi
	mov	DWORD PTR tv26798[ebp], ebx
	mov	DWORD PTR tv25440[ebp], eax
	lea	eax, DWORD PTR [edi+8]
	neg	edi
	mov	DWORD PTR tv26802[ebp], edi
	mov	edi, DWORD PTR tv26602[ebp]
	mov	ebx, DWORD PTR [edi]
	mov	edi, DWORD PTR tv26747[ebp]
	sub	ebx, edi
	mov	DWORD PTR tv26816[ebp], ebx
	mov	ebx, DWORD PTR tv26752[ebp]
	fmul	ST(0), ST(3)
	sub	ebx, edi
	fld	ST(3)
	mov	DWORD PTR tv26820[ebp], ebx
	fmul	QWORD PTR __real@3fe8000000000000
	mov	ebx, DWORD PTR tv26757[ebp]
	sub	ebx, edi
	mov	esi, DWORD PTR tv26752[ebp]
	mov	DWORD PTR tv26824[ebp], ebx
	mov	ebx, DWORD PTR tv26762[ebp]
	fmul	ST(0), ST(4)
	sub	ebx, edi
	fxch	ST(2)
	mov	DWORD PTR tv26828[ebp], ebx
	mov	ebx, DWORD PTR _grad2$89342[ebp]
	fmul	ST(0), ST(5)
	sub	ebx, edi
	mov	edi, DWORD PTR tv26602[ebp]
	fmul	ST(0), ST(4)
	mov	DWORD PTR tv26832[ebp], ebx
	mov	ebx, DWORD PTR [edi]
	mov	edi, DWORD PTR tv26752[ebp]
	fdiv	ST(0), ST(3)
	sub	ebx, edi
	mov	DWORD PTR tv26836[ebp], ebx
	mov	ebx, DWORD PTR tv26757[ebp]
	sub	ebx, edi
	mov	DWORD PTR tv26840[ebp], ebx
	mov	ebx, DWORD PTR tv26762[ebp]
	add	esi, 24					; 00000018H
	add	edx, 16					; 00000010H
	sub	ebx, edi
	mov	DWORD PTR tv26844[ebp], ebx
	mov	ebx, DWORD PTR _grad2$89342[ebp]
	fdivrp	ST(3), ST(0)
	sub	ebx, edi
	mov	edi, DWORD PTR tv26602[ebp]
	mov	DWORD PTR tv26848[ebp], ebx
	mov	ebx, DWORD PTR [edi]
	mov	edi, DWORD PTR tv26757[ebp]
	sub	ebx, edi
	mov	DWORD PTR tv26852[ebp], ebx
	mov	ebx, DWORD PTR tv26762[ebp]
	sub	ebx, edi
	mov	DWORD PTR tv26856[ebp], ebx
	mov	ebx, DWORD PTR _grad2$89342[ebp]
	sub	ebx, edi
	mov	edi, DWORD PTR _eff_dim$[ebp]
	add	edi, -4					; fffffffcH
	shr	edi, 2
	inc	edi
	mov	DWORD PTR tv12163[ebp], edi
	add	edi, edi
	add	edi, edi
	mov	DWORD PTR tv26860[ebp], ebx
	mov	DWORD PTR _i$[ebp], edi
$LN443@star_sqcur@2:

; 450  :           { g = 0.75*hh0*hh0*dAdv1[k][i] 
; 451  :                     + 1.5*area/nn*hh0*dfndv1[k][i]
; 452  :                     - 1.5*area*fn*hh0/nn/nn*dnndv1[k][i]; 

	mov	edi, DWORD PTR tv26852[ebp]
	mov	ebx, DWORD PTR tv25440[ebp]
	fld	QWORD PTR [ebx+edi]

; 453  :              v_info->grad[k+1][i] += g;

	mov	edi, DWORD PTR [ecx+1336]
	fmul	ST(0), ST(1)
	mov	ebx, DWORD PTR _k$[ebp]
	mov	edi, DWORD PTR [edi+ebx*4+4]
	fld	QWORD PTR [eax-8]
	fmul	ST(0), ST(3)
	mov	ebx, DWORD PTR tv26802[ebp]
	lea	ebx, DWORD PTR [ebx+eax-8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx-16]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edi+ebx]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edi+ebx]

; 454  :              v_info->grad[0][i] -= g;

	mov	edi, DWORD PTR [ecx+1336]
	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [edi+ebx]
	fstp	QWORD PTR [edi+ebx]

; 455  :              g = 0.75*hh0*hh0*dAdv2[k][i] 
; 456  :                     + 1.5*area/nn*hh0*dfndv2[k][i]
; 457  :                     - 1.5*area*fn*hh0/nn/nn*dnndv2[k][i]; 

	mov	edi, DWORD PTR tv25440[ebp]
	fld	QWORD PTR [esi-24]
	mov	ebx, DWORD PTR tv26856[ebp]
	fmul	ST(0), ST(1)
	fld	ST(2)
	fmul	QWORD PTR [edi]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi+ebx]

; 458  :              grad2[i] += g;

	mov	ebx, DWORD PTR tv26860[ebp]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	ST(0)
	fadd	QWORD PTR [edi+ebx]
	fstp	QWORD PTR [edi+ebx]

; 459  :              v_info->grad[0][i] -= g;

	mov	edi, DWORD PTR [ecx+1336]
	mov	ebx, DWORD PTR [edi]
	mov	edi, DWORD PTR tv26802[ebp]
	lea	edi, DWORD PTR [edi+eax-8]
	fsubr	QWORD PTR [edi+ebx]
	fstp	QWORD PTR [edi+ebx]
	mov	edi, DWORD PTR tv26778[ebp]
	fld	QWORD PTR [eax+edi]
	mov	edi, DWORD PTR tv26782[ebp]
	mov	ebx, DWORD PTR _k$[ebp]
	fmul	ST(0), ST(1)
	fld	ST(2)
	fmul	QWORD PTR [eax]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax+edi]
	mov	edi, DWORD PTR [ecx+1336]
	mov	edi, DWORD PTR [edi+ebx*4+4]
	fmul	ST(0), ST(4)
	mov	ebx, DWORD PTR tv26802[ebp]
	lea	ebx, DWORD PTR [ebx+eax-8]
	fsubp	ST(1), ST(0)
	lea	edi, DWORD PTR [edi+ebx+8]
	fld	QWORD PTR [edi]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edi]
	mov	edi, DWORD PTR [ecx+1336]
	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [edi+ebx+8]
	lea	edi, DWORD PTR [edi+ebx+8]
	fstp	QWORD PTR [edi]
	mov	edi, DWORD PTR tv26786[ebp]
	fld	QWORD PTR [eax+edi]
	mov	edi, DWORD PTR tv26790[ebp]
	fmul	ST(0), ST(1)
	fld	QWORD PTR [eax+edi]
	mov	edi, DWORD PTR tv26794[ebp]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax+edi]
	mov	edi, DWORD PTR tv26798[ebp]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+edi]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax+edi]
	mov	edi, DWORD PTR [ecx+1336]
	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [edi+ebx+8]
	lea	edi, DWORD PTR [edi+ebx+8]
	mov	ebx, DWORD PTR _k$[ebp]
	fstp	QWORD PTR [edi]
	mov	edi, DWORD PTR tv26816[ebp]
	fld	QWORD PTR [edi+edx]
	mov	edi, DWORD PTR [ecx+1336]
	fmul	ST(0), ST(1)
	mov	edi, DWORD PTR [edi+ebx*4+4]
	fld	QWORD PTR [eax+8]
	mov	ebx, DWORD PTR tv26802[ebp]
	fmul	ST(0), ST(3)
	lea	ebx, DWORD PTR [eax+ebx+8]
	faddp	ST(1), ST(0)
	fld	ST(3)
	fmul	QWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edi+ebx]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edi+ebx]
	mov	edi, DWORD PTR [ecx+1336]
	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [edi+ebx]
	fstp	QWORD PTR [edi+ebx]
	mov	edi, DWORD PTR tv26820[ebp]
	fld	QWORD PTR [edi+edx]
	mov	edi, DWORD PTR tv26824[ebp]
	fmul	ST(0), ST(1)
	fld	QWORD PTR [edi+edx]
	mov	edi, DWORD PTR tv26828[ebp]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi+edx]
	mov	edi, DWORD PTR tv26832[ebp]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edi+edx]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edi+edx]
	mov	edi, DWORD PTR [ecx+1336]
	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [edi+ebx]
	fstp	QWORD PTR [edi+ebx]
	mov	edi, DWORD PTR tv26836[ebp]
	fld	QWORD PTR [edi+esi]
	mov	edi, DWORD PTR [ecx+1336]
	mov	ebx, DWORD PTR _k$[ebp]
	fmul	ST(0), ST(1)
	fld	QWORD PTR [eax+16]
	mov	edi, DWORD PTR [edi+ebx*4+4]
	mov	ebx, DWORD PTR tv26802[ebp]
	fmul	ST(0), ST(3)
	lea	ebx, DWORD PTR [eax+ebx+16]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx+8]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edi+ebx]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edi+ebx]
	mov	edi, DWORD PTR [ecx+1336]
	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [edi+ebx]
	fstp	QWORD PTR [edi+ebx]
	mov	edi, DWORD PTR tv26840[ebp]
	fld	QWORD PTR [edi+esi]
	mov	edi, DWORD PTR tv26844[ebp]
	fmul	ST(0), ST(2)
	fld	ST(1)
	fmul	QWORD PTR [esi]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi+esi]
	mov	edi, DWORD PTR tv26848[ebp]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edi+esi]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edi+esi]
	mov	edi, DWORD PTR [ecx+1336]
	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [edi+ebx]
	add	DWORD PTR tv25440[ebp], 32		; 00000020H
	add	eax, 32					; 00000020H
	add	edx, 32					; 00000020H
	add	esi, 32					; 00000020H
	fstp	QWORD PTR [edi+ebx]
	dec	DWORD PTR tv12163[ebp]
	jne	$LN443@star_sqcur@2

; 449  :           for ( i = 0 ; i < eff_dim ; i++ )

	mov	edx, DWORD PTR _i$[ebp]
	fstp	ST(0)
	mov	esi, DWORD PTR tv26739[ebp]
	fstp	ST(0)
	mov	eax, DWORD PTR tv26602[ebp]
	fstp	ST(0)
	fld	QWORD PTR _area$[ebp]
	fld	QWORD PTR _nn$[ebp]
	fxch	ST(1)
	fxch	ST(3)
$LN485@star_sqcur@2:
	cmp	edx, DWORD PTR _eff_dim$[ebp]
	jge	$LN135@star_sqcur@2
	fld	ST(3)
	mov	esi, DWORD PTR [eax+esi]
	fmul	QWORD PTR __real@3ff8000000000000
	mov	edi, DWORD PTR [eax]
	sub	edi, esi
	mov	DWORD PTR tv26778[ebp], edi
	fld	ST(0)
	mov	edi, DWORD PTR tv26744[ebp]
	fdiv	ST(0), ST(3)
	mov	edi, DWORD PTR [eax+edi]
	sub	edi, esi
	mov	DWORD PTR tv26782[ebp], edi
	mov	edi, DWORD PTR tv26749[ebp]
	mov	edi, DWORD PTR [eax+edi]
	mov	ebx, DWORD PTR _v_info$GSCopy$[ebp]
	sub	edi, esi
	mov	DWORD PTR tv26786[ebp], edi
	mov	edi, DWORD PTR tv26754[ebp]
	mov	edi, DWORD PTR [eax+edi]
	sub	edi, esi
	mov	DWORD PTR tv26790[ebp], edi
	mov	edi, DWORD PTR tv26759[ebp]
	mov	edi, DWORD PTR [eax+edi]
	sub	edi, esi
	mov	DWORD PTR tv26794[ebp], edi
	mov	edi, DWORD PTR _grad2$89342[ebp]
	lea	ecx, DWORD PTR [esi+edx*8]
	sub	edi, esi
	fmul	ST(0), ST(4)
	fstp	QWORD PTR tv13689[ebp]
	fld	ST(3)
	fmul	QWORD PTR __real@3fe8000000000000
	fmul	ST(0), ST(4)
	fstp	QWORD PTR tv13640[ebp]
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(2)
	fst	QWORD PTR tv13695[ebp]
$LN486@star_sqcur@2:

; 450  :           { g = 0.75*hh0*hh0*dAdv1[k][i] 
; 451  :                     + 1.5*area/nn*hh0*dfndv1[k][i]
; 452  :                     - 1.5*area*fn*hh0/nn/nn*dnndv1[k][i]; 

	mov	esi, DWORD PTR tv26778[ebp]
	fld	QWORD PTR [ecx+esi]
	mov	esi, DWORD PTR tv26782[ebp]
	fmul	QWORD PTR tv13689[ebp]
	add	ecx, 8
	fld	QWORD PTR tv13640[ebp]
	fmul	QWORD PTR [ecx-8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx+esi-8]
	mov	esi, DWORD PTR [ebx+1336]
	mov	ebx, DWORD PTR _k$[ebp]
	fmulp	ST(2), ST(0)
	mov	esi, DWORD PTR [esi+ebx*4+4]

; 454  :              v_info->grad[0][i] -= g;

	mov	ebx, DWORD PTR _v_info$GSCopy$[ebp]
	fsubrp	ST(1), ST(0)
	lea	esi, DWORD PTR [esi+edx*8]
	fld	ST(0)
	fadd	QWORD PTR [esi]
	fstp	QWORD PTR [esi]
	mov	esi, DWORD PTR [ebx+1336]
	mov	esi, DWORD PTR [esi]
	fsubr	QWORD PTR [esi+edx*8]
	lea	esi, DWORD PTR [esi+edx*8]
	fstp	QWORD PTR [esi]

; 455  :              g = 0.75*hh0*hh0*dAdv2[k][i] 
; 456  :                     + 1.5*area/nn*hh0*dfndv2[k][i]
; 457  :                     - 1.5*area*fn*hh0/nn/nn*dnndv2[k][i]; 

	mov	esi, DWORD PTR tv26786[ebp]
	fld	QWORD PTR [ecx+esi-8]
	mov	esi, DWORD PTR tv26790[ebp]
	fmul	QWORD PTR tv13689[ebp]
	fld	QWORD PTR [ecx+esi-8]
	mov	esi, DWORD PTR tv26794[ebp]
	fmul	QWORD PTR tv13640[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx+esi-8]
	fld	QWORD PTR tv13695[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(2)
	fsubrp	ST(1), ST(0)

; 458  :              grad2[i] += g;

	fld	ST(0)
	fadd	QWORD PTR [ecx+edi-8]
	fstp	QWORD PTR [ecx+edi-8]

; 459  :              v_info->grad[0][i] -= g;

	mov	esi, DWORD PTR [ebx+1336]
	mov	esi, DWORD PTR [esi]
	fsubr	QWORD PTR [esi+edx*8]
	lea	esi, DWORD PTR [esi+edx*8]
	inc	edx
	fstp	QWORD PTR [esi]
	cmp	edx, DWORD PTR _eff_dim$[ebp]
	jl	$LN486@star_sqcur@2

; 449  :           for ( i = 0 ; i < eff_dim ; i++ )

	mov	esi, DWORD PTR tv26739[ebp]
	fstp	ST(0)
$LN135@star_sqcur@2:

; 445  : 
; 446  :      case PERP_SQ:
; 447  :         for ( k = 0 ; k < pairs ; k++ )

	mov	ecx, DWORD PTR tv12453[ebp]
	add	eax, 4
	mov	DWORD PTR _k$[ebp], ecx
	mov	DWORD PTR tv26602[ebp], eax
	cmp	ecx, DWORD PTR _pairs$[ebp]
	jl	$LN520@star_sqcur@2
	fld	QWORD PTR __real@3fe8000000000000
	mov	ebx, DWORD PTR _v_info$GSCopy$[ebp]
	fxch	ST(2)
$LN1071@star_sqcur@2:
	fxch	ST(1)
$LN134@star_sqcur@2:

; 460  :             }
; 461  :          }
; 462  :         break;
; 463  :     }
; 464  : 
; 465  :     if ( get_vattr(v_info->id) & AXIAL_POINT )

	mov	ecx, DWORD PTR [ebx]
	mov	edx, DWORD PTR _web+12
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 8388608				; 00800000H
	xor	ecx, ecx
	or	eax, ecx
	je	$LN458@star_sqcur@2

; 466  :     { REAL fudge = 1./rotorder;
; 467  :       if ( sym_flags & DOUBLE_AXIAL ) fudge *= 2;

	test	BYTE PTR _sym_flags, 4
	fild	DWORD PTR _rotorder
	fld1
	fdivrp	ST(1), ST(0)
	je	SHORT $LN129@star_sqcur@2
	fmul	ST(0), ST(6)
$LN129@star_sqcur@2:

; 468  :       fudge *= rotorder/v_info->axial_order;

	mov	eax, DWORD PTR _rotorder
	cdq
	idiv	DWORD PTR [ebx+1344]

; 469  :       for ( i = 0 ; i < v_info->vcount ; i++ )

	mov	edi, DWORD PTR _eff_dim$[ebp]
	xor	ecx, ecx
	mov	DWORD PTR tv28466[ebp], eax
	fild	DWORD PTR tv28466[ebp]
	fmulp	ST(1), ST(0)
	cmp	DWORD PTR [ebx+12], ecx
	jle	$LN673@star_sqcur@2
$LN128@star_sqcur@2:

; 470  :          for ( j = 0 ; j < eff_dim ; j++ )

	xor	eax, eax
	cmp	edi, 4
	jl	SHORT $LC445@star_sqcur@2
	lea	esi, DWORD PTR [edi-3]
$LN446@star_sqcur@2:

; 471  :           v_info->grad[i][j] *= fudge;

	mov	edx, DWORD PTR [ebx+1336]
	fld	ST(0)
	mov	edx, DWORD PTR [edx+ecx*4]
	fmul	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR [ebx+1336]
	mov	edx, DWORD PTR [edx+ecx*4]
	lea	edx, DWORD PTR [edx+eax*8+8]
	fld	ST(0)
	fmul	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR [ebx+1336]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8+16]
	lea	edx, DWORD PTR [edx+eax*8+16]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR [ebx+1336]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8+24]
	lea	edx, DWORD PTR [edx+eax*8+24]
	fmul	ST(0), ST(1)
	add	eax, 4
	fstp	QWORD PTR [edx]
	cmp	eax, esi
	jl	SHORT $LN446@star_sqcur@2
$LC445@star_sqcur@2:

; 470  :          for ( j = 0 ; j < eff_dim ; j++ )

	cmp	eax, edi
	jge	SHORT $LN127@star_sqcur@2
$LC125@star_sqcur@2:
	mov	edx, DWORD PTR [ebx+1336]
	mov	edx, DWORD PTR [edx+ecx*4]

; 471  :           v_info->grad[i][j] *= fudge;

	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fmul	ST(0), ST(1)
	inc	eax
	fstp	QWORD PTR [edx]
	cmp	eax, edi
	jl	SHORT $LC125@star_sqcur@2
$LN127@star_sqcur@2:

; 469  :       for ( i = 0 ; i < v_info->vcount ; i++ )

	inc	ecx
	cmp	ecx, DWORD PTR [ebx+12]
	jl	$LN128@star_sqcur@2
$LN673@star_sqcur@2:
	fstp	ST(0)
$LN126@star_sqcur@2:

; 472  :     }
; 473  :     if ( mode == METHOD_GRADIENT ) goto all_exit;

	cmp	DWORD PTR _mode$[ebp], 4321		; 000010e1H
	je	$LN686@star_sqcur@2

; 474  : 
; 475  :     /* Hessian */
; 476  :     if ( (variety == EFF_SQ) || (variety==PERP_SQ) || (variety == TEST_SQ) )

	mov	eax, DWORD PTR _variety$[ebp]
	cmp	eax, 2
	je	SHORT $LN120@star_sqcur@2
	cmp	eax, 4
	je	SHORT $LN120@star_sqcur@2
	test	eax, eax
	jne	$LN518@star_sqcur@2
	mov	edi, DWORD PTR _eff_dim$[ebp]
$LN120@star_sqcur@2:

; 477  :     { for ( i = 0 ; i < eff_dim ; i++ )

	xor	ecx, ecx
	cmp	edi, 4
	jl	$LC448@star_sqcur@2
	mov	eax, DWORD PTR _eff_dim$[ebp]
	mov	ebx, DWORD PTR _eff_dim$[ebp]
	add	eax, -3					; fffffffdH
	lea	edx, DWORD PTR _antisymnorm$[ebp+56]
	mov	DWORD PTR tv12639[ebp], eax
	xor	edi, edi
	mov	esi, 2
	mov	DWORD PTR tv27244[ebp], edx
$LN490@star_sqcur@2:

; 478  :       { antisymnorm[i][(i+1)%eff_dim] = vnorm[(i+2)%eff_dim]/2;

	mov	eax, esi
	cdq
	idiv	ebx
	lea	eax, DWORD PTR [esi-1]
	mov	DWORD PTR tv27098[ebp], edx
	cdq
	idiv	ebx
	mov	eax, DWORD PTR tv27098[ebp]
	fld	QWORD PTR _vnorm$[ebp+eax*8]
	fmul	QWORD PTR __real@3fe0000000000000
	lea	eax, DWORD PTR [edx+edi]
	fstp	QWORD PTR _antisymnorm$[ebp+eax*8]

; 479  :         antisymnorm[(i+1)%eff_dim][i] = -vnorm[(i+2)%eff_dim]/2;

	mov	eax, DWORD PTR tv27098[ebp]
	fld	QWORD PTR _vnorm$[ebp+eax*8]
	lea	edx, DWORD PTR [edx+edx*2]
	fmul	QWORD PTR __real@bfe0000000000000
	lea	eax, DWORD PTR [ecx+edx*2]

; 480  :         antisymnorm[i][i] = 0.0;

	mov	edx, DWORD PTR tv27244[ebp]
	fstp	QWORD PTR _antisymnorm$[ebp+eax*8]
	lea	eax, DWORD PTR [esi+1]
	fldz
	fstp	QWORD PTR [edx-56]
	cdq
	idiv	ebx
	fld	QWORD PTR _vnorm$[ebp+edx*8]
	fmul	QWORD PTR __real@3fe0000000000000
	lea	eax, DWORD PTR _vnorm$[ebp+edx*8]
	mov	DWORD PTR tv27269[ebp], edx
	mov	edx, DWORD PTR tv27098[ebp]
	add	edx, edi
	fstp	QWORD PTR _antisymnorm$[ebp+edx*8+48]
	fld	QWORD PTR [eax]
	mov	eax, DWORD PTR tv27098[ebp]
	fmul	QWORD PTR __real@bfe0000000000000
	lea	eax, DWORD PTR [eax+eax*2]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR tv27244[ebp]
	fstp	QWORD PTR _antisymnorm$[ebp+edx*8+8]
	fldz
	fstp	QWORD PTR [eax]
	lea	eax, DWORD PTR [esi+2]
	cdq
	idiv	ebx
	fld	QWORD PTR _vnorm$[ebp+edx*8]
	fmul	QWORD PTR __real@3fe0000000000000
	lea	eax, DWORD PTR _vnorm$[ebp+edx*8]
	mov	DWORD PTR tv27275[ebp], edx
	mov	edx, DWORD PTR tv27269[ebp]
	add	edx, edi
	fstp	QWORD PTR _antisymnorm$[ebp+edx*8+96]
	fld	QWORD PTR [eax]
	mov	eax, DWORD PTR tv27269[ebp]
	fmul	QWORD PTR __real@bfe0000000000000
	lea	eax, DWORD PTR [eax+eax*2]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR tv27244[ebp]
	fstp	QWORD PTR _antisymnorm$[ebp+edx*8+16]
	fldz
	fstp	QWORD PTR [eax+56]
	lea	eax, DWORD PTR [esi+3]
	cdq
	idiv	ebx
	fld	QWORD PTR _vnorm$[ebp+edx*8]
	fmul	QWORD PTR __real@3fe0000000000000
	add	esi, 4
	lea	eax, DWORD PTR _vnorm$[ebp+edx*8]
	mov	edx, DWORD PTR tv27275[ebp]
	add	edx, edi
	fstp	QWORD PTR _antisymnorm$[ebp+edx*8+144]
	add	edi, 24					; 00000018H
	fld	QWORD PTR [eax]
	mov	eax, DWORD PTR tv27275[ebp]
	fmul	QWORD PTR __real@bfe0000000000000
	lea	eax, DWORD PTR [eax+eax*2]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR tv27244[ebp]
	fstp	QWORD PTR _antisymnorm$[ebp+edx*8+24]
	add	ecx, 4
	fldz
	add	eax, 224				; 000000e0H
	fstp	QWORD PTR [eax-112]
	mov	DWORD PTR tv27244[ebp], eax
	cmp	ecx, DWORD PTR tv12639[ebp]
	jl	$LN490@star_sqcur@2
$LC448@star_sqcur@2:

; 477  :     { for ( i = 0 ; i < eff_dim ; i++ )

	cmp	ecx, DWORD PTR _eff_dim$[ebp]
	jge	$LN518@star_sqcur@2
	mov	edi, DWORD PTR _eff_dim$[ebp]
	lea	ebx, DWORD PTR [ecx+ecx*2]
	lea	eax, DWORD PTR [ecx*8]
	add	ebx, ebx
	sub	eax, ecx
	lea	esi, DWORD PTR [ecx+1]
	lea	ecx, DWORD PTR _antisymnorm$[ebp+eax*8]
	mov	DWORD PTR tv27425[ebp], ecx
$LN491@star_sqcur@2:

; 478  :       { antisymnorm[i][(i+1)%eff_dim] = vnorm[(i+2)%eff_dim]/2;

	lea	eax, DWORD PTR [esi+1]
	cdq
	idiv	edi
	fld	QWORD PTR _vnorm$[ebp+edx*8]
	fmul	QWORD PTR __real@3fe0000000000000
	mov	eax, esi
	lea	edi, DWORD PTR _vnorm$[ebp+edx*8]
	cdq
	idiv	DWORD PTR _eff_dim$[ebp]
	lea	eax, DWORD PTR [edx+ebx]
	fstp	QWORD PTR _antisymnorm$[ebp+eax*8]

; 479  :         antisymnorm[(i+1)%eff_dim][i] = -vnorm[(i+2)%eff_dim]/2;

	lea	edx, DWORD PTR [edx+edx*2]
	fld	QWORD PTR [edi]
	mov	edi, DWORD PTR _eff_dim$[ebp]
	fmul	QWORD PTR __real@bfe0000000000000
	lea	eax, DWORD PTR [esi+edx*2]
	inc	esi
	lea	ecx, DWORD PTR [esi-1]
	fstp	QWORD PTR _antisymnorm$[ebp+eax*8-8]

; 480  :         antisymnorm[i][i] = 0.0;

	mov	eax, DWORD PTR tv27425[ebp]
	fldz
	add	eax, 56					; 00000038H
	fstp	QWORD PTR [eax-56]
	add	ebx, 6
	mov	DWORD PTR tv27425[ebp], eax
	cmp	ecx, edi
	jl	SHORT $LN491@star_sqcur@2
$LN518@star_sqcur@2:

; 481  :       }
; 482  :     }
; 483  :     if ( (variety == NORMAL_SQ) || (variety==PERP_SQ) || (variety == TEST_SQ) )

	mov	eax, DWORD PTR _variety$[ebp]
	cmp	eax, 3
	je	SHORT $LN497@star_sqcur@2
	cmp	eax, 4
	je	SHORT $LN497@star_sqcur@2
	test	eax, eax
	jne	$LN517@star_sqcur@2
$LN497@star_sqcur@2:

; 484  :     { for ( i = 0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	cmp	DWORD PTR _web+616, 4
	jl	$LC451@star_sqcur@2
	mov	ebx, DWORD PTR _eff_dim$[ebp]
	lea	edx, DWORD PTR _antisymf$[ebp+56]
	xor	edi, edi
	mov	esi, 2
	mov	DWORD PTR tv27630[ebp], edx
$LN492@star_sqcur@2:

; 485  :       { antisymf[i][(i+1)%eff_dim] = dAdv[(i+2)%eff_dim]/2;

	mov	eax, esi
	cdq
	idiv	ebx
	lea	eax, DWORD PTR [esi-1]
	mov	DWORD PTR tv27484[ebp], edx
	cdq
	idiv	ebx
	mov	eax, DWORD PTR tv27484[ebp]
	fld	QWORD PTR _dAdv$[ebp+eax*8]
	fmul	QWORD PTR __real@3fe0000000000000
	lea	eax, DWORD PTR [edi+edx]
	fstp	QWORD PTR _antisymf$[ebp+eax*8]

; 486  :         antisymf[(i+1)%eff_dim][i] = -dAdv[(i+2)%eff_dim]/2;

	mov	eax, DWORD PTR tv27484[ebp]
	fld	QWORD PTR _dAdv$[ebp+eax*8]
	lea	edx, DWORD PTR [edx+edx*2]
	fmul	QWORD PTR __real@bfe0000000000000
	lea	eax, DWORD PTR [ecx+edx*2]

; 487  :         antisymf[i][i] = 0.0;

	mov	edx, DWORD PTR tv27630[ebp]
	fstp	QWORD PTR _antisymf$[ebp+eax*8]
	lea	eax, DWORD PTR [esi+1]
	fldz
	fstp	QWORD PTR [edx-56]
	cdq
	idiv	ebx
	fld	QWORD PTR _dAdv$[ebp+edx*8]
	fmul	QWORD PTR __real@3fe0000000000000
	lea	eax, DWORD PTR _dAdv$[ebp+edx*8]
	mov	DWORD PTR tv27683[ebp], eax
	mov	eax, DWORD PTR tv27484[ebp]
	mov	DWORD PTR tv27655[ebp], edx
	lea	edx, DWORD PTR [eax+edi]
	fstp	QWORD PTR _antisymf$[ebp+edx*8+48]
	mov	edx, DWORD PTR tv27683[ebp]
	fld	QWORD PTR [edx]
	lea	eax, DWORD PTR [eax+eax*2]
	fmul	QWORD PTR __real@bfe0000000000000
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR tv27630[ebp]
	fstp	QWORD PTR _antisymf$[ebp+edx*8+8]
	fldz
	fstp	QWORD PTR [eax]
	lea	eax, DWORD PTR [esi+2]
	cdq
	idiv	ebx
	fld	QWORD PTR _dAdv$[ebp+edx*8]
	fmul	QWORD PTR __real@3fe0000000000000
	lea	eax, DWORD PTR _dAdv$[ebp+edx*8]
	mov	DWORD PTR tv27696[ebp], eax
	mov	eax, DWORD PTR tv27655[ebp]
	mov	DWORD PTR tv27661[ebp], edx
	lea	edx, DWORD PTR [edi+eax]
	fstp	QWORD PTR _antisymf$[ebp+edx*8+96]
	mov	edx, DWORD PTR tv27696[ebp]
	fld	QWORD PTR [edx]
	lea	eax, DWORD PTR [eax+eax*2]
	fmul	QWORD PTR __real@bfe0000000000000
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR tv27630[ebp]
	fstp	QWORD PTR _antisymf$[ebp+edx*8+16]
	fldz
	fstp	QWORD PTR [eax+56]
	lea	eax, DWORD PTR [esi+3]
	cdq
	idiv	ebx
	fld	QWORD PTR _dAdv$[ebp+edx*8]
	fmul	QWORD PTR __real@3fe0000000000000
	lea	eax, DWORD PTR _dAdv$[ebp+edx*8]
	mov	DWORD PTR tv27725[ebp], eax
	mov	eax, DWORD PTR tv27661[ebp]
	lea	edx, DWORD PTR [edi+eax]
	fstp	QWORD PTR _antisymf$[ebp+edx*8+144]
	mov	edx, DWORD PTR tv27725[ebp]
	fld	QWORD PTR [edx]
	lea	eax, DWORD PTR [eax+eax*2]
	fmul	QWORD PTR __real@bfe0000000000000
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR tv27630[ebp]
	add	ecx, 4
	fstp	QWORD PTR _antisymf$[ebp+edx*8+24]
	fldz
	fstp	QWORD PTR [eax+112]
	add	eax, 224				; 000000e0H
	mov	DWORD PTR tv27630[ebp], eax
	mov	eax, DWORD PTR _web+616
	add	eax, -3					; fffffffdH
	add	esi, 4
	add	edi, 24					; 00000018H
	cmp	ecx, eax
	jl	$LN492@star_sqcur@2
$LC451@star_sqcur@2:

; 484  :     { for ( i = 0 ; i < SDIM ; i++ )

	cmp	ecx, DWORD PTR _web+616
	jge	$LN517@star_sqcur@2
	lea	ebx, DWORD PTR [ecx+ecx*2]
	lea	eax, DWORD PTR [ecx*8]
	add	ebx, ebx
	sub	eax, ecx
	lea	esi, DWORD PTR [ecx+1]
	lea	ecx, DWORD PTR _antisymf$[ebp+eax*8]
	mov	DWORD PTR tv27812[ebp], ecx
$LN493@star_sqcur@2:

; 485  :       { antisymf[i][(i+1)%eff_dim] = dAdv[(i+2)%eff_dim]/2;

	lea	eax, DWORD PTR [esi+1]
	cdq
	idiv	DWORD PTR _eff_dim$[ebp]
	fld	QWORD PTR _dAdv$[ebp+edx*8]
	fmul	QWORD PTR __real@3fe0000000000000
	mov	eax, esi
	lea	edi, DWORD PTR _dAdv$[ebp+edx*8]
	cdq
	idiv	DWORD PTR _eff_dim$[ebp]
	lea	eax, DWORD PTR [edx+ebx]
	fstp	QWORD PTR _antisymf$[ebp+eax*8]

; 486  :         antisymf[(i+1)%eff_dim][i] = -dAdv[(i+2)%eff_dim]/2;

	lea	edx, DWORD PTR [edx+edx*2]
	fld	QWORD PTR [edi]
	lea	eax, DWORD PTR [esi+edx*2]
	fmul	QWORD PTR __real@bfe0000000000000
	inc	esi
	lea	ecx, DWORD PTR [esi-1]
	add	ebx, 6
	fstp	QWORD PTR _antisymf$[ebp+eax*8-8]

; 487  :         antisymf[i][i] = 0.0;

	mov	eax, DWORD PTR tv27812[ebp]
	fldz
	add	eax, 56					; 00000038H
	fstp	QWORD PTR [eax-56]
	mov	DWORD PTR tv27812[ebp], eax
	cmp	ecx, DWORD PTR _web+616
	jl	SHORT $LN493@star_sqcur@2
$LN517@star_sqcur@2:

; 488  :       }
; 489  :     }
; 490  : 
; 491  :     
; 492  :     if ( h0_flag && (variety != NORMAL_SQ) && (variety != PERP_SQ) ) 

	cmp	DWORD PTR _h0_flag, 0
	mov	esi, DWORD PTR _variety$[ebp]
	je	SHORT $LN499@star_sqcur@2
	cmp	esi, 3
	je	SHORT $LN499@star_sqcur@2
	cmp	esi, 4
	je	SHORT $LN499@star_sqcur@2
	fstp	ST(5)

; 493  :       kb_error(1615,
; 494  :         "Can only use h_zero with star_normal_sq_curve.\n",RECOVERABLE);

	push	1
	fstp	ST(1)
	push	OFFSET ??_C@_0DA@GLBEFEEH@Can?5only?5use?5h_zero?5with?5star_no@
	fstp	ST(1)
	push	1615					; 0000064fH
	fstp	ST(2)
	fstp	ST(1)
	fstp	ST(0)
	call	_kb_error
	fld	QWORD PTR _area$[ebp]
	add	esp, 12					; 0000000cH
	fld	QWORD PTR _hh0$[ebp]
	fld	QWORD PTR __real@4000000000000000
	fld	QWORD PTR _nn$[ebp]
	fld	QWORD PTR _fn$[ebp]
	fld	QWORD PTR __real@3fe8000000000000
	fxch	ST(3)
	fxch	ST(5)
	fxch	ST(4)
	fxch	ST(3)
	fxch	ST(2)
	fxch	ST(1)
$LN499@star_sqcur@2:

; 495  : 
; 496  : 
; 497  :     switch ( variety )

	mov	eax, esi
	dec	eax
	je	$LN711@star_sqcur@2
	dec	eax
	je	$LN714@star_sqcur@2
	dec	eax
	fstp	ST(1)
	jne	$LN717@star_sqcur@2

; 513  :       case NORMAL_SQ:
; 514  :           afnfn = 1.5*area/fn/fn;

	fld	ST(3)
	fld	QWORD PTR __real@3ff8000000000000
	fmul	ST(1), ST(0)
	fld	ST(1)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR _afnfn$[ebp]

; 515  :           fffnfn = 1.5*hh0/fn;

	fmul	ST(0), ST(4)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR _fffnfn$[ebp]

; 516  :           afffnfn = 1.5*area*hh0/fn;

	fld	ST(0)
	fmul	ST(0), ST(4)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR _afffnfn$[ebp]

; 517  :           ffafnfnfn = 1.5*area*(ff/fn + hh0)/fn/fn;

	fld	QWORD PTR _ff$[ebp]
	fdiv	ST(0), ST(2)
	fld	ST(0)
	fadd	ST(0), ST(5)
	fmul	ST(0), ST(2)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR _ffafnfnfn$[ebp]

; 518  :           afffffnfnfnfn = 1.5*area*ff*(ff/fn+2*hh0)/fn/fn/fn;

	fld	ST(4)
	fmul	ST(0), ST(7)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ff$[ebp]
	fmul	ST(2), ST(0)
	fxch	ST(1)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR _afffffnfnfnfn$[ebp]

; 519  :           fffffnfnfna = 1.5*ff*hh0/fn/fn*area;

	fmul	QWORD PTR __real@3ff8000000000000
	fmul	ST(0), ST(3)
	fdiv	ST(0), ST(1)
	fdivrp	ST(1), ST(0)
	fld	ST(0)
	fmulp	ST(4), ST(0)
	fxch	ST(3)
	fstp	QWORD PTR _fffffnfnfna$[ebp]

; 520  :           fffffnfnfn  = 1.5*ff*hh0/fn/fn;

	fxch	ST(2)
	fstp	QWORD PTR _fffffnfnfn$[ebp]

; 521  :           fffffnfn = 0.75*hh0*hh0;

	fld	ST(0)
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	fstp	QWORD PTR _fffffnfn$[ebp]

; 522  : 
; 523  :           break;

	jmp	$LN109@star_sqcur@2
$LN638@star_sqcur@2:

; 376  : 
; 377  :   switch ( variety )

	fstp	ST(0)
$LN467@star_sqcur@2:

; 445  : 
; 446  :      case PERP_SQ:
; 447  :         for ( k = 0 ; k < pairs ; k++ )

	fld	QWORD PTR _area$[ebp]
	fld	QWORD PTR _hh0$[ebp]
	fld	QWORD PTR __real@3fe8000000000000
	fld	QWORD PTR _nn$[ebp]
	fld	QWORD PTR _fn$[ebp]
	jmp	$LN134@star_sqcur@2
$LN468@star_sqcur@2:

; 442  :             }
; 443  :          }
; 444  :         break;

	fld	QWORD PTR _area$[ebp]
	fld	QWORD PTR _hh0$[ebp]
	fld	QWORD PTR __real@3fe8000000000000
	fld	QWORD PTR _nn$[ebp]
	fxch	ST(3)
	fxch	ST(4)
	fxch	ST(2)
	fxch	ST(3)
	fxch	ST(1)
	fxch	ST(2)
	jmp	$LN134@star_sqcur@2
$LN458@star_sqcur@2:

; 469  :       for ( i = 0 ; i < v_info->vcount ; i++ )

	mov	edi, DWORD PTR _eff_dim$[ebp]
	jmp	$LN126@star_sqcur@2
$LN714@star_sqcur@2:

; 495  : 
; 496  : 
; 497  :     switch ( variety )

	fstp	ST(3)
	fstp	ST(2)

; 503  :           break;
; 504  :       case EFF_SQ:
; 505  :           an75 = 0.75*area/nn;

	fld	ST(2)
	fmul	ST(0), ST(1)
	fdiv	ST(0), ST(2)
	fst	QWORD PTR _an75$[ebp]

; 506  :           ann75 = 0.75*area/nn/nn;

	fdiv	ST(0), ST(2)
	fstp	QWORD PTR _ann75$[ebp]

; 507  :           fnnna = 1.5*ff/nn/nn/nn*area;

	fld	QWORD PTR _ff$[ebp]
	fld	QWORD PTR __real@3ff8000000000000
	fmul	ST(0), ST(1)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fmul	ST(0), ST(4)
	fstp	QWORD PTR _fnnna$[ebp]

; 508  :           fnna = 0.75*ff/nn/nn*area;

	fmul	ST(0), ST(1)
	fdiv	ST(0), ST(2)
	fld	ST(0)
	fdiv	ST(0), ST(3)
	fld	ST(0)
	fmulp	ST(5), ST(0)
	fxch	ST(4)
	fstp	QWORD PTR _fnna$[ebp]

; 509  :           fn75 = 0.75/nn;

	fxch	ST(1)
	fdivrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _fn75$[ebp]

; 510  :           fnn75 = 0.75*ff/nn/nn;

	fxch	ST(1)
	fstp	QWORD PTR _fnn75$[ebp]

; 511  :           ffn75 = 0.75*ff/nn;

	fstp	QWORD PTR _ffn75$[ebp]

; 512  :           break;

	jmp	SHORT $LN109@star_sqcur@2
$LN711@star_sqcur@2:

; 495  : 
; 496  : 
; 497  :     switch ( variety )

	fstp	ST(3)
	fstp	ST(2)
	fstp	ST(1)

; 498  :     { case PLAIN_SQ:
; 499  :           aa75 = 0.75/area/area;

	fld	ST(0)
	fdiv	ST(0), ST(2)
	fld	ST(0)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR _aa75$[ebp]

; 500  :           a75 = 0.75/area;

	fstp	QWORD PTR _a75$[ebp]

; 501  :           ffaaa = 1.5*ff/area/area/area;

	fld	QWORD PTR _ff$[ebp]
	fld	QWORD PTR __real@3ff8000000000000
	fmul	ST(0), ST(1)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR _ffaaa$[ebp]

; 502  :           ffaa = 0.75*ff/area/area;

	fmulp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fdivrp	ST(1), ST(0)
	fstp	QWORD PTR _ffaa$[ebp]
	jmp	SHORT $LN109@star_sqcur@2
$LN717@star_sqcur@2:
	fstp	ST(1)
	fstp	ST(1)
	fstp	ST(0)
	fstp	ST(0)
$LN109@star_sqcur@2:

; 524  :     }
; 525  : 
; 526  : 
; 527  :     for ( k = 0 ; k < pairs ; k++ ) 

	xor	ebx, ebx
	cmp	DWORD PTR _pairs$[ebp], ebx
	jle	$LN103@star_sqcur@2
$LN871@star_sqcur@2:

; 528  :     { REAL co1 = 0.25/a[k]/a[k]/a[k];

	mov	eax, DWORD PTR _a$[ebp]

; 545  : 
; 546  :       for ( kk = 0 ; kk < pairs ; kk++ )

	fstp	ST(0)
	fld	QWORD PTR __real@3fd0000000000000
	mov	edi, DWORD PTR _eff_dim$[ebp]
	fdiv	QWORD PTR [eax+ebx*8]
	push	edi
	lea	edx, DWORD PTR _dAdv$[ebp]
	push	edx
	fdiv	QWORD PTR [eax+ebx*8]
	fdiv	QWORD PTR [eax+ebx*8]
	fstp	QWORD PTR _co1$89380[ebp]
	fld	QWORD PTR __real@3fc0000000000000
	fdiv	QWORD PTR [eax+ebx*8]
	fld	ST(0)
	fdiv	QWORD PTR [eax+ebx*8]
	mov	eax, DWORD PTR _ds2$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	push	ecx
	fstp	QWORD PTR _co2$89381[ebp]
	fstp	QWORD PTR _co3$89382[ebp]
	call	_dot
	mov	eax, DWORD PTR _ds1$[ebp]
	fstp	QWORD PTR tv27281[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	push	edi
	lea	edx, DWORD PTR _dAdv$[ebp]
	push	edx
	push	ecx
	call	_dot
	fadd	QWORD PTR tv27281[ebp]
	add	esp, 24					; 00000018H
	xor	esi, esi
	fstp	QWORD PTR _dssf$89383[ebp]
	test	edi, edi
	jle	$LN100@star_sqcur@2
$LL102@star_sqcur@2:

; 529  :       REAL co2 = 0.125/a[k]/a[k];
; 530  :       REAL co3 = 0.125/a[k];
; 531  :       REAL dssf = (dot(ds1[k],dAdv,eff_dim)+dot(ds2[k],dAdv,eff_dim));
; 532  :       REAL s1f,s2f;
; 533  :       REAL ddssf1[MAXCOORD],ddssf2[MAXCOORD];
; 534  : 
; 535  : 
; 536  :       for ( i = 0 ; i < eff_dim ; i++ )
; 537  :       { ddssf1[i] = 
; 538  :             (dot(ddss11[k][i],dAdv,eff_dim)+dot(ddss12[k][i],dAdv,eff_dim));

	mov	eax, DWORD PTR _ddss12$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	push	edi
	lea	edx, DWORD PTR _dAdv$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+esi*4]
	push	edx
	call	_dot
	fstp	QWORD PTR tv27283[ebp]
	mov	ecx, DWORD PTR _ddss11$[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	push	edi
	lea	eax, DWORD PTR _dAdv$[ebp]
	push	eax
	mov	eax, DWORD PTR [edx+esi*4]
	push	eax
	call	_dot
	fadd	QWORD PTR tv27283[ebp]

; 539  :         ddssf2[i] =
; 540  :             (dot(ddss21[k][i],dAdv,eff_dim)+dot(ddss22[k][i],dAdv,eff_dim));

	mov	edx, DWORD PTR _ddss22$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	push	edi
	fstp	QWORD PTR _ddssf1$89386[ebp+esi*8]
	lea	ecx, DWORD PTR _dAdv$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [eax+esi*4]
	push	ecx
	call	_dot
	fstp	QWORD PTR tv27285[ebp]
	mov	eax, DWORD PTR _ddss21$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	push	edi
	lea	edx, DWORD PTR _dAdv$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+esi*4]
	push	edx
	call	_dot
	fadd	QWORD PTR tv27285[ebp]
	inc	esi
	add	esp, 48					; 00000030H
	fstp	QWORD PTR _ddssf2$89387[ebp+esi*8-8]
	cmp	esi, edi
	jl	$LL102@star_sqcur@2
$LN100@star_sqcur@2:

; 541  :       }
; 542  :       s1 = s[k]; s2 = s[(k+1==pairs)?final_edge:k+1];

	mov	edx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+ebx*4]
	lea	eax, DWORD PTR [ebx+1]
	mov	DWORD PTR _s1$[ebp], ecx
	mov	DWORD PTR tv12453[ebp], eax
	cmp	eax, DWORD PTR _pairs$[ebp]
	jne	SHORT $LN281@star_sqcur@2
	mov	eax, DWORD PTR _final_edge$[ebp]
$LN281@star_sqcur@2:
	mov	esi, DWORD PTR [edx+eax*4]

; 543  :       s1f = dot(s1,dAdv,eff_dim);

	push	edi
	lea	eax, DWORD PTR _dAdv$[ebp]
	push	eax
	push	ecx
	mov	DWORD PTR _s2$[ebp], esi
	call	_dot
	fstp	QWORD PTR _s1f$89384[ebp]

; 544  :       s2f = dot(s2,dAdv,eff_dim);

	push	edi
	lea	ecx, DWORD PTR _dAdv$[ebp]
	push	ecx
	push	esi
	call	_dot
	fstp	QWORD PTR _s2f$89385[ebp]

; 545  : 
; 546  :       for ( kk = 0 ; kk < pairs ; kk++ )

	fld	QWORD PTR __real@4000000000000000
	add	esp, 24					; 00000018H
	mov	DWORD PTR _kk$[ebp], 0
$LN99@star_sqcur@2:

; 547  :       { int nextk = (k+1==pairs) ? final_edge : k+1 ; 

	mov	edx, DWORD PTR tv12453[ebp]
	mov	eax, DWORD PTR _pairs$[ebp]
	cmp	edx, eax
	jne	SHORT $LN283@star_sqcur@2
	mov	edx, DWORD PTR _final_edge$[ebp]
$LN283@star_sqcur@2:

; 548  :         int nextkk = (kk+1==pairs) ? final_edge : kk+1 ; 

	mov	edi, DWORD PTR _kk$[ebp]
	lea	esi, DWORD PTR [edi+1]
	mov	DWORD PTR tv14057[ebp], esi
	cmp	esi, eax
	jne	SHORT $LN285@star_sqcur@2
	mov	esi, DWORD PTR _final_edge$[ebp]
$LN285@star_sqcur@2:

; 549  :         REAL **h11 = v_info->hess[k+1][kk+1];

	mov	eax, DWORD PTR _v_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [eax+1340]
	mov	ecx, DWORD PTR [eax+ebx*4+4]
	mov	edi, DWORD PTR [ecx+edi*4+4]

; 550  :         REAL **h12 = v_info->hess[k+1][nextkk+1];
; 551  :         REAL **h21 = v_info->hess[nextk+1][kk+1];

	mov	edx, DWORD PTR [eax+edx*4+4]

; 552  :         REAL **h22 = v_info->hess[nextk+1][nextkk+1];
; 553  :         REAL **h00 = v_info->hess[0][0];

	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _h11$89396[ebp], edi
	mov	edi, DWORD PTR [ecx+esi*4+4]

; 554  :         REAL **h10 = v_info->hess[k+1][0];

	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR _h12$89397[ebp], edi
	mov	edi, DWORD PTR _kk$[ebp]
	mov	edi, DWORD PTR [edx+edi*4+4]
	mov	DWORD PTR _h21$89398[ebp], edi
	mov	edi, DWORD PTR [edx+esi*4+4]

; 555  :         REAL **h02 = v_info->hess[0][nextkk+1];
; 556  :         REAL **h20 = v_info->hess[nextk+1][0];

	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR _h10$89401[ebp], ecx
	mov	ecx, DWORD PTR [eax+esi*4+4]
	mov	DWORD PTR _h22$89399[ebp], edi
	mov	edi, DWORD PTR [eax]
	mov	DWORD PTR _h02$89402[ebp], ecx

; 557  :         REAL **h01 = v_info->hess[0][kk+1];

	mov	ecx, DWORD PTR _kk$[ebp]
	mov	DWORD PTR _h00$89400[ebp], edi
	mov	DWORD PTR _h20$89403[ebp], edx
	mov	edx, DWORD PTR [eax+ecx*4+4]

; 558  :         REAL ddff,dddsf,ddnn,ddfn;
; 559  : 
; 560  :         for ( i = 0 ; i < eff_dim ; i++ )

	xor	edi, edi
	mov	DWORD PTR _h01$89404[ebp], edx
	cmp	DWORD PTR _eff_dim$[ebp], edi
	jle	$LN98@star_sqcur@2
$LN983@star_sqcur@2:

; 561  :           for ( ii = 0 ; ii < eff_dim ; ii++ )

	xor	esi, esi
	npad	4
$LL981@star_sqcur@2:

; 562  :           { /* 11 term */
; 563  :             ddff = dot(dfdv1[k][i],dfdv1[kk][ii],eff_dim);

	mov	eax, DWORD PTR _eff_dim$[ebp]
	fstp	ST(0)
	mov	ecx, DWORD PTR _kk$[ebp]
	push	eax
	mov	eax, DWORD PTR _dfdv1$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR [edx+edi*4]
	push	ecx
	push	eax
	call	_dot
	add	esp, 12					; 0000000cH

; 564  :             if ( k == kk )

	cmp	ebx, DWORD PTR _kk$[ebp]
	jne	$LN470@star_sqcur@2

; 565  :             {
; 566  :               ddff += (-co1*dAdv1[k][i]*dAdv1[k][ii] + co2*ddAdv1dv1[k][i][ii])
; 567  :                               *dssf;

	mov	edx, DWORD PTR _ddAdv1dv1$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	ecx, DWORD PTR _dAdv1$[ebp]
	fld	QWORD PTR [edx+esi*8]
	mov	eax, DWORD PTR [ecx+ebx*4]
	fld	QWORD PTR _co2$89381[ebp]
	fmul	ST(1), ST(0)
	fld	QWORD PTR [eax+edi*8]
	fmul	QWORD PTR _co1$89380[ebp]
	fmul	QWORD PTR [eax+esi*8]
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR _dssf$89383[ebp]
	faddp	ST(2), ST(0)

; 568  :               ddff += co2*dAdv1[k][i]*ddssf1[ii];

	fld	QWORD PTR [eax+edi*8]

; 569  :               ddff += co2*dAdv1[kk][ii]*ddssf1[i];

	mov	eax, DWORD PTR _kk$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR _ddssf1$89386[ebp+esi*8]
	faddp	ST(2), ST(0)
	fmul	QWORD PTR [ecx+esi*8]
	fmul	QWORD PTR _ddssf1$89386[ebp+edi*8]
	faddp	ST(1), ST(0)

; 570  :               dddsf = ((i==ii) ? 4*s2f : 0. )
; 571  :                             - 2*s2[i]*dAdv[ii] - 2*s2[ii]*dAdv[i];

	cmp	edi, esi
	jne	SHORT $LN287@star_sqcur@2
	fld	QWORD PTR _s2f$89385[ebp]
	fmul	QWORD PTR __real@4010000000000000
	jmp	SHORT $LN288@star_sqcur@2
$LN287@star_sqcur@2:
	fldz
$LN288@star_sqcur@2:
	mov	eax, DWORD PTR _s2$[ebp]
	fld	QWORD PTR [eax+edi*8]
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR _dAdv$[ebp+esi*8]
	fsubp	ST(2), ST(0)
	fld	QWORD PTR [eax+esi*8]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR _dAdv$[ebp+edi*8]
	fsubp	ST(2), ST(0)

; 572  :               ddff -= co3*dddsf;

	fxch	ST(1)
	fmul	QWORD PTR _co3$89382[ebp]
	fsubp	ST(2), ST(0)
	jmp	SHORT $LN90@star_sqcur@2
$LN470@star_sqcur@2:
	fld	QWORD PTR __real@4000000000000000
$LN90@star_sqcur@2:

; 573  :             }
; 574  :             ddff *= 2;
; 575  :             switch ( variety )

	mov	eax, DWORD PTR _variety$[ebp]
	fmulp	ST(1), ST(0)
	fst	QWORD PTR _ddff$89405[ebp]
	cmp	eax, 4
	ja	$LN883@star_sqcur@2
	jmp	DWORD PTR $LN1080@star_sqcur@2[eax*4]
$LN887@star_sqcur@2:

; 576  :               { case TEST_SQ:
; 577  :                       h = ddnn = 2*dot(dvnorm1[k][i],dvnorm1[kk][ii],eff_dim);

	mov	edx, DWORD PTR _eff_dim$[ebp]
	fstp	ST(0)
	mov	eax, DWORD PTR _dvnorm1$[ebp]
	mov	ecx, DWORD PTR _kk$[ebp]
	push	edx
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR [edx+edi*4]
	push	ecx
	push	eax
	call	_dot
	fadd	ST(0), ST(0)
	add	esp, 12					; 0000000cH
	fst	QWORD PTR _h$[ebp]

; 578  :                      break;

	jmp	$LN77@star_sqcur@2
$LN86@star_sqcur@2:

; 579  :                  case PLAIN_SQ:
; 580  :                      h = -aa75*(dffdv1[k][i]*dAdv1[kk][ii]
; 581  :                                  + dffdv1[kk][ii]*dAdv1[k][i])
; 582  :                          + ffaaa*dAdv1[k][i]*dAdv1[kk][ii]
; 583  :                          + a75*ddff;

	mov	edx, DWORD PTR _dAdv1$[ebp]
	mov	ecx, DWORD PTR [edx+ebx*4]
	mov	eax, DWORD PTR _kk$[ebp]
	fld	QWORD PTR [ecx+edi*8]
	fmul	QWORD PTR _ffaaa$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	lea	ecx, DWORD PTR [ecx+edi*8]
	lea	edx, DWORD PTR [edx+esi*8]
	fmul	QWORD PTR [edx]
	mov	DWORD PTR tv14196[ebp], edx
	mov	edx, DWORD PTR _dffdv1$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [edx+esi*8]
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _dffdv1$[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	fld	QWORD PTR [edx+edi*8]
	mov	ecx, DWORD PTR tv14196[ebp]
	fmul	QWORD PTR [ecx]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR _aa75$[ebp]
	fsubp	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR _a75$[ebp]
	faddp	ST(1), ST(0)
	fst	QWORD PTR _h$[ebp]

; 584  :                      if ( k == kk )

	cmp	ebx, eax
	jne	$LN77@star_sqcur@2

; 585  :                         h -= ffaa*ddAdv1dv1[k][i][ii];

	mov	edx, DWORD PTR _ddAdv1dv1$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	mov	ecx, DWORD PTR [eax+edi*4]
	fld	QWORD PTR [ecx+esi*8]
	fmul	QWORD PTR _ffaa$[ebp]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _h$[ebp]

; 586  :                      break;

	jmp	$LN77@star_sqcur@2
$LN886@star_sqcur@2:

; 587  :                  case EFF_SQ:
; 588  :                       ddnn = 2*dot(dvnorm1[k][i],dvnorm1[kk][ii],eff_dim);

	mov	edx, DWORD PTR _eff_dim$[ebp]
	fstp	ST(0)
	mov	eax, DWORD PTR _dvnorm1$[ebp]
	mov	ecx, DWORD PTR _kk$[ebp]
	push	edx
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR [edx+edi*4]
	push	ecx
	push	eax
	call	_dot
	fadd	ST(0), ST(0)

; 589  :                       h = an75*ddff
; 590  :                          - ann75*dffdv1[k][i]*dnndv1[kk][ii]
; 591  :                          - ann75*dffdv1[kk][ii]*dnndv1[k][i]
; 592  :                          + fnnna*dnndv1[k][i]*dnndv1[kk][ii]
; 593  :                          - fnna*ddnn
; 594  :                          + fn75*dffdv1[k][i]*dAdv1[kk][ii]
; 595  :                          + fn75*dffdv1[kk][ii]*dAdv1[k][i]
; 596  :                          - fnn75*dAdv1[kk][ii]*dnndv1[k][i]
; 597  :                          - fnn75*dnndv1[kk][ii]*dAdv1[k][i];

	mov	edx, DWORD PTR _dffdv1$[ebp]
	fld	QWORD PTR _ddff$89405[ebp]
	mov	ecx, DWORD PTR [edx+ebx*4]
	fmul	QWORD PTR _an75$[ebp]
	fld	QWORD PTR _ann75$[ebp]
	lea	eax, DWORD PTR [ecx+edi*8]
	mov	ecx, DWORD PTR _kk$[ebp]
	fld	ST(0)
	mov	edx, DWORD PTR [edx+ecx*4]
	lea	edx, DWORD PTR [edx+esi*8]
	mov	DWORD PTR tv14234[ebp], edx
	mov	edx, DWORD PTR _dnndv1$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	lea	edx, DWORD PTR [edx+edi*8]
	mov	DWORD PTR tv14240[ebp], edx
	mov	edx, DWORD PTR _dAdv1$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	lea	edx, DWORD PTR [edx+esi*8]
	mov	DWORD PTR tv14253[ebp], edx
	mov	edx, DWORD PTR _dAdv1$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	lea	edx, DWORD PTR [edx+edi*8]
	mov	DWORD PTR tv14261[ebp], edx
	mov	DWORD PTR tv14220[ebp], eax
	mov	edx, eax
	fmul	QWORD PTR [edx]
	mov	eax, DWORD PTR _dnndv1$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	edx, DWORD PTR tv14234[ebp]
	fmul	QWORD PTR [eax+esi*8]
	lea	eax, DWORD PTR [eax+esi*8]
	add	esp, 12					; 0000000cH
	fsubp	ST(2), ST(0)
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14240[ebp]
	fmul	QWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _fnnna$[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14220[ebp]
	fmul	QWORD PTR [eax]
	faddp	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR _fnna$[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _fn75$[ebp]
	fld	ST(0)
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14253[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14234[ebp]
	faddp	ST(2), ST(0)
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14261[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14253[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14240[ebp]
	fld	QWORD PTR _fnn75$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR [edx]
	fsubp	ST(2), ST(0)
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv14261[ebp]
	fmul	QWORD PTR [eax]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _h$[ebp]

; 598  :                       if ( k == kk )

	cmp	ebx, ecx
	jne	$LN77@star_sqcur@2

; 599  :                          h += ffn75*ddAdv1dv1[k][i][ii];

	mov	ecx, DWORD PTR _ddAdv1dv1$[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	mov	eax, DWORD PTR [edx+edi*4]
	fld	QWORD PTR [eax+esi*8]
	fmul	QWORD PTR _ffn75$[ebp]
	faddp	ST(1), ST(0)
	fst	QWORD PTR _h$[ebp]

; 600  :                       break;

	jmp	$LN77@star_sqcur@2
$LN885@star_sqcur@2:

; 601  :                  case NORMAL_SQ:
; 602  :                       ddfn = dot(dfdv1[k][i],dvnorm1[kk][ii],eff_dim)
; 603  :                               + dot(dvnorm1[k][i],dfdv1[kk][ii],eff_dim);

	mov	ecx, DWORD PTR _eff_dim$[ebp]
	fstp	ST(0)
	mov	edx, DWORD PTR _dvnorm1$[ebp]
	mov	eax, DWORD PTR _kk$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR _dfdv1$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	push	edx
	mov	edx, DWORD PTR [ecx+edi*4]
	push	edx
	call	_dot
	fstp	QWORD PTR tv27287[ebp]
	mov	eax, DWORD PTR _eff_dim$[ebp]
	mov	ecx, DWORD PTR _dfdv1$[ebp]
	mov	edx, DWORD PTR _kk$[ebp]
	push	eax
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [eax+esi*4]
	mov	edx, DWORD PTR _dvnorm1$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	push	ecx
	mov	ecx, DWORD PTR [eax+edi*4]
	push	ecx
	call	_dot
	fadd	QWORD PTR tv27287[ebp]
	add	esp, 24					; 00000018H
	fst	QWORD PTR _ddfn$89408[ebp]

; 604  :                       if ( k == kk )

	cmp	ebx, DWORD PTR _kk$[ebp]
	jne	$LN81@star_sqcur@2

; 605  :                       {
; 606  :                          ddfn += (-co1*dAdv1[k][i]*dAdv1[k][ii]
; 607  :                                      + co2*ddAdv1dv1[k][i][ii])
; 608  :                             *(dot(ds1[k],vnorm,eff_dim)+dot(ds2[k],vnorm,eff_dim));

	mov	edx, DWORD PTR _dAdv1$[ebp]
	fstp	ST(0)
	mov	eax, DWORD PTR [edx+ebx*4]
	mov	ecx, DWORD PTR _eff_dim$[ebp]
	push	ecx
	mov	DWORD PTR tv14278[ebp], eax
	mov	eax, DWORD PTR _ds2$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	lea	edx, DWORD PTR _vnorm$[ebp]
	push	edx
	push	ecx
	call	_dot
	fstp	QWORD PTR tv27289[ebp]
	mov	edx, DWORD PTR _eff_dim$[ebp]
	mov	ecx, DWORD PTR _ds1$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+ebx*4]
	lea	eax, DWORD PTR _vnorm$[ebp]
	push	eax
	push	edx
	call	_dot
	fadd	QWORD PTR tv27289[ebp]
	mov	eax, DWORD PTR _ddAdv1dv1$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	mov	edx, DWORD PTR [ecx+edi*4]
	fld	QWORD PTR [edx+esi*8]
	mov	eax, DWORD PTR tv14278[ebp]
	fmul	QWORD PTR _co2$89381[ebp]

; 609  :                          ddfn += co2*dAdv1[k][i]*
; 610  :                           (dot(ddss11[kk][ii],vnorm,eff_dim)
; 611  :                               +dot(ddss12[kk][ii],vnorm,eff_dim));

	mov	edx, DWORD PTR _ddss12$[ebp]
	fld	QWORD PTR [eax+edi*8]
	lea	ecx, DWORD PTR _vnorm$[ebp]
	fmul	QWORD PTR _co1$89380[ebp]
	fmul	QWORD PTR [eax+esi*8]
	mov	eax, DWORD PTR _eff_dim$[ebp]
	push	eax
	mov	eax, DWORD PTR _kk$[ebp]
	fsubp	ST(1), ST(0)
	push	ecx
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+esi*4]
	fmulp	ST(1), ST(0)
	push	edx
	fadd	QWORD PTR _ddfn$89408[ebp]
	fstp	QWORD PTR _ddfn$89408[ebp]
	call	_dot
	mov	eax, DWORD PTR _eff_dim$[ebp]
	fstp	QWORD PTR tv27291[ebp]
	mov	edx, DWORD PTR _ddss11$[ebp]
	push	eax
	mov	eax, DWORD PTR _kk$[ebp]
	lea	ecx, DWORD PTR _vnorm$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+esi*4]
	push	edx
	call	_dot
	fadd	QWORD PTR tv27291[ebp]
	mov	eax, DWORD PTR _dAdv1$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	fld	QWORD PTR [ecx+edi*8]

; 612  :                          ddfn += co2*dAdv1[kk][ii]*
; 613  :                             (dot(ddss11[k][i],vnorm,eff_dim)
; 614  :                               +dot(ddss12[k][i],vnorm,eff_dim));

	mov	edx, DWORD PTR _eff_dim$[ebp]
	fmul	QWORD PTR _co2$89381[ebp]
	mov	ecx, DWORD PTR _ddss12$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+ebx*4]
	fmulp	ST(1), ST(0)
	lea	eax, DWORD PTR _vnorm$[ebp]
	push	eax
	mov	eax, DWORD PTR [edx+edi*4]
	fadd	QWORD PTR _ddfn$89408[ebp]
	push	eax
	fstp	QWORD PTR _ddfn$89408[ebp]
	call	_dot
	mov	ecx, DWORD PTR _eff_dim$[ebp]
	fstp	QWORD PTR tv27293[ebp]
	mov	eax, DWORD PTR _ddss11$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [eax+ebx*4]
	lea	edx, DWORD PTR _vnorm$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+edi*4]
	push	edx
	call	_dot
	fadd	QWORD PTR tv27293[ebp]
	mov	eax, DWORD PTR _dAdv1$[ebp]
	mov	ecx, DWORD PTR _kk$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	fld	QWORD PTR [edx+esi*8]
	add	esp, 72					; 00000048H
	fmul	QWORD PTR _co2$89381[ebp]
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR _ddfn$89408[ebp]
	fstp	QWORD PTR _ddfn$89408[ebp]

; 615  :                          dddsf = ((i==ii) ? 4*dot(s2,vnorm,eff_dim) : 0. )
; 616  :                                     - 2*s2[i]*vnorm[ii] - 2*s2[ii]*vnorm[i];

	cmp	edi, esi
	jne	SHORT $LN289@star_sqcur@2
	mov	eax, DWORD PTR _eff_dim$[ebp]
	mov	edx, DWORD PTR _s2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vnorm$[ebp]
	push	ecx
	push	edx
	call	_dot
	fmul	QWORD PTR __real@4010000000000000
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN290@star_sqcur@2
$LN289@star_sqcur@2:
	fldz
$LN290@star_sqcur@2:
	mov	eax, DWORD PTR _s2$[ebp]
	fld	QWORD PTR [eax+edi*8]
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR _vnorm$[ebp+esi*8]
	fsubp	ST(2), ST(0)
	fmul	QWORD PTR [eax+esi*8]
	fmul	QWORD PTR _vnorm$[ebp+edi*8]
	fsubp	ST(1), ST(0)

; 617  :                          ddfn -= co3*dddsf;

	fmul	QWORD PTR _co3$89382[ebp]
	fsubr	QWORD PTR _ddfn$89408[ebp]
$LN81@star_sqcur@2:

; 618  :                       }
; 619  :                       h  = afnfn*dffdv1[k][i]*dffdv1[kk][ii]
; 620  :                           + afffnfn*ddff
; 621  :                           + fffnfn*dffdv1[k][i]*dAdv1[kk][ii]
; 622  :                           + fffnfn*dAdv1[k][i]*dffdv1[kk][ii]
; 623  :                           - ffafnfnfn*dffdv1[k][i]*dfndv1[kk][ii]
; 624  :                           - ffafnfnfn*dfndv1[k][i]*dffdv1[kk][ii]
; 625  :                           + afffffnfnfnfn*dfndv1[k][i]*dfndv1[kk][ii]
; 626  :                           - fffffnfnfna*ddfn
; 627  :                           - fffffnfnfn*dfndv1[k][i]*dAdv1[kk][ii]
; 628  :                           - fffffnfnfn*dAdv1[k][i]*dfndv1[kk][ii];

	mov	edx, DWORD PTR _dffdv1$[ebp]
	fld	QWORD PTR _afnfn$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	fmul	QWORD PTR [eax+edi*8]
	lea	ecx, DWORD PTR [eax+edi*8]
	mov	eax, DWORD PTR _kk$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	lea	edx, DWORD PTR [edx+esi*8]
	mov	DWORD PTR tv14334[ebp], edx
	mov	edx, DWORD PTR _dAdv1$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	lea	edx, DWORD PTR [edx+esi*8]
	mov	DWORD PTR tv14343[ebp], edx
	mov	edx, DWORD PTR _dAdv1$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	lea	edx, DWORD PTR [edx+edi*8]
	mov	DWORD PTR tv14350[ebp], edx
	mov	edx, DWORD PTR _dfndv1$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	lea	edx, DWORD PTR [edx+esi*8]
	mov	DWORD PTR tv14360[ebp], edx
	mov	edx, DWORD PTR _dfndv1$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	lea	edx, DWORD PTR [edx+edi*8]
	mov	DWORD PTR tv14367[ebp], edx
	mov	edx, DWORD PTR tv14334[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14343[ebp]
	fld	QWORD PTR _ddff$89405[ebp]
	fmul	QWORD PTR _afffnfn$[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _fffnfn$[ebp]
	fld	ST(0)
	fmul	QWORD PTR [ecx]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14350[ebp]
	faddp	ST(2), ST(0)
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14334[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14367[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ffafnfnfn$[ebp]
	fld	ST(0)
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv14360[ebp]
	fmul	QWORD PTR [ecx]
	fsubp	ST(2), ST(0)
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14334[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14367[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx]
	fmul	QWORD PTR _afffffnfnfnfn$[ebp]
	fmul	QWORD PTR [ecx]
	faddp	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR _fffffnfnfna$[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14343[ebp]
	fld	QWORD PTR _fffffnfnfn$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14350[ebp]
	fsubp	ST(2), ST(0)
	fmul	QWORD PTR [edx]
	fmul	QWORD PTR [ecx]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _h$[ebp]

; 629  :                       if ( k == kk ) 

	cmp	ebx, eax
	jne	$LN77@star_sqcur@2

; 630  :                          h += fffffnfn*ddAdv1dv1[k][i][ii];

	mov	eax, DWORD PTR _ddAdv1dv1$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	mov	edx, DWORD PTR [ecx+edi*4]
	fld	QWORD PTR [edx+esi*8]
	fmul	QWORD PTR _fffffnfn$[ebp]
	faddp	ST(1), ST(0)
	fst	QWORD PTR _h$[ebp]

; 631  :                       break;

	jmp	$LN77@star_sqcur@2
$LN884@star_sqcur@2:

; 632  :                   case PERP_SQ:
; 633  :                       ddnn = 2*dot(dvnorm1[k][i],dvnorm1[kk][ii],eff_dim);

	mov	eax, DWORD PTR _eff_dim$[ebp]
	fstp	ST(0)
	mov	ecx, DWORD PTR _kk$[ebp]
	push	eax
	mov	eax, DWORD PTR _dvnorm1$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR [edx+edi*4]
	push	ecx
	push	eax
	call	_dot
	fadd	ST(0), ST(0)

; 634  :                       ddfn = dot(dfdv1[k][i],dvnorm1[kk][ii],eff_dim)
; 635  :                               + dot(dvnorm1[k][i],dfdv1[kk][ii],eff_dim);

	mov	ecx, DWORD PTR _eff_dim$[ebp]
	mov	edx, DWORD PTR _dfdv1$[ebp]
	mov	eax, DWORD PTR _kk$[ebp]
	fstp	QWORD PTR _ddnn$89407[ebp]
	push	ecx
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR _dvnorm1$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	push	edx
	mov	edx, DWORD PTR [ecx+edi*4]
	push	edx
	call	_dot
	fstp	QWORD PTR tv27295[ebp]
	mov	eax, DWORD PTR _eff_dim$[ebp]
	mov	ecx, DWORD PTR _dvnorm1$[ebp]
	mov	edx, DWORD PTR _kk$[ebp]
	push	eax
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [eax+esi*4]
	mov	edx, DWORD PTR _dfdv1$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	push	ecx
	mov	ecx, DWORD PTR [eax+edi*4]
	push	ecx
	call	_dot
	fadd	QWORD PTR tv27295[ebp]
	add	esp, 36					; 00000024H
	fstp	QWORD PTR _ddfn$89408[ebp]

; 636  :                       if ( k == kk )

	cmp	ebx, DWORD PTR _kk$[ebp]
	jne	$LN471@star_sqcur@2

; 637  :                       {
; 638  :                          ddfn += (-co1*dAdv1[k][i]*dAdv1[k][ii]
; 639  :                                      + co2*ddAdv1dv1[k][i][ii])
; 640  :                             *(dot(ds1[k],vnorm,eff_dim)+dot(ds2[k],vnorm,eff_dim));

	mov	edx, DWORD PTR _dAdv1$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	mov	ecx, DWORD PTR _eff_dim$[ebp]
	push	ecx
	mov	DWORD PTR tv14391[ebp], eax
	mov	eax, DWORD PTR _ds2$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	lea	edx, DWORD PTR _vnorm$[ebp]
	push	edx
	push	ecx
	call	_dot
	fstp	QWORD PTR tv27298[ebp]
	mov	edx, DWORD PTR _eff_dim$[ebp]
	mov	ecx, DWORD PTR _ds1$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+ebx*4]
	lea	eax, DWORD PTR _vnorm$[ebp]
	push	eax
	push	edx
	call	_dot
	fadd	QWORD PTR tv27298[ebp]
	mov	eax, DWORD PTR _ddAdv1dv1$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	mov	edx, DWORD PTR [ecx+edi*4]
	fld	QWORD PTR [edx+esi*8]
	mov	eax, DWORD PTR tv14391[ebp]
	fmul	QWORD PTR _co2$89381[ebp]

; 641  :                          ddfn += co2*dAdv1[k][i]*
; 642  :                           (dot(ddss11[kk][ii],vnorm,eff_dim)
; 643  :                               +dot(ddss12[kk][ii],vnorm,eff_dim));

	mov	edx, DWORD PTR _ddss12$[ebp]
	fld	QWORD PTR [eax+edi*8]
	lea	ecx, DWORD PTR _vnorm$[ebp]
	fmul	QWORD PTR _co1$89380[ebp]
	fmul	QWORD PTR [eax+esi*8]
	mov	eax, DWORD PTR _eff_dim$[ebp]
	push	eax
	mov	eax, DWORD PTR _kk$[ebp]
	fsubp	ST(1), ST(0)
	push	ecx
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+esi*4]
	fmulp	ST(1), ST(0)
	push	edx
	fadd	QWORD PTR _ddfn$89408[ebp]
	fstp	QWORD PTR _ddfn$89408[ebp]
	call	_dot
	mov	eax, DWORD PTR _eff_dim$[ebp]
	fstp	QWORD PTR tv27300[ebp]
	mov	edx, DWORD PTR _ddss11$[ebp]
	push	eax
	mov	eax, DWORD PTR _kk$[ebp]
	lea	ecx, DWORD PTR _vnorm$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+esi*4]
	push	edx
	call	_dot
	fadd	QWORD PTR tv27300[ebp]
	mov	eax, DWORD PTR _dAdv1$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	fld	QWORD PTR [ecx+edi*8]

; 644  :                          ddfn += co2*dAdv1[kk][ii]*
; 645  :                             (dot(ddss11[k][i],vnorm,eff_dim)
; 646  :                               +dot(ddss12[k][i],vnorm,eff_dim));

	mov	edx, DWORD PTR _eff_dim$[ebp]
	fmul	QWORD PTR _co2$89381[ebp]
	mov	ecx, DWORD PTR _ddss12$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+ebx*4]
	fmulp	ST(1), ST(0)
	lea	eax, DWORD PTR _vnorm$[ebp]
	push	eax
	mov	eax, DWORD PTR [edx+edi*4]
	fadd	QWORD PTR _ddfn$89408[ebp]
	push	eax
	fstp	QWORD PTR _ddfn$89408[ebp]
	call	_dot
	mov	ecx, DWORD PTR _eff_dim$[ebp]
	fstp	QWORD PTR tv27302[ebp]
	mov	eax, DWORD PTR _ddss11$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [eax+ebx*4]
	lea	edx, DWORD PTR _vnorm$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+edi*4]
	push	edx
	call	_dot
	fadd	QWORD PTR tv27302[ebp]
	mov	eax, DWORD PTR _dAdv1$[ebp]
	mov	ecx, DWORD PTR _kk$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	fld	QWORD PTR [edx+esi*8]
	add	esp, 72					; 00000048H
	fmul	QWORD PTR _co2$89381[ebp]
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR _ddfn$89408[ebp]
	fstp	QWORD PTR _ddfn$89408[ebp]

; 647  :                          dddsf = ((i==ii) ? 4*dot(s2,vnorm,eff_dim) : 0. )
; 648  :                                     - 2*s2[i]*vnorm[ii] - 2*s2[ii]*vnorm[i];

	cmp	edi, esi
	jne	SHORT $LN291@star_sqcur@2
	mov	eax, DWORD PTR _eff_dim$[ebp]
	mov	edx, DWORD PTR _s2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vnorm$[ebp]
	push	ecx
	push	edx
	call	_dot
	fmul	QWORD PTR __real@4010000000000000
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN292@star_sqcur@2
$LN291@star_sqcur@2:
	fldz
$LN292@star_sqcur@2:
	mov	eax, DWORD PTR _s2$[ebp]
	fld	QWORD PTR [eax+edi*8]
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR _vnorm$[ebp+esi*8]
	fsubp	ST(2), ST(0)
	fmul	QWORD PTR [eax+esi*8]
	fmul	QWORD PTR _vnorm$[ebp+edi*8]
	fsubp	ST(1), ST(0)

; 649  :                          ddfn -= co3*dddsf;

	fmul	QWORD PTR _co3$89382[ebp]
	fsubr	QWORD PTR _ddfn$89408[ebp]
	fstp	QWORD PTR _ddfn$89408[ebp]
$LN471@star_sqcur@2:

; 650  :                       }
; 651  :            h = 1.5*hh0*dAdv1[k][i]*(dfndv1[kk][ii]/nn-fn/nn/nn*dnndv1[kk][ii])
; 652  :              + 1.5*hh0*dAdv1[kk][ii]*(dfndv1[k][i]/nn-fn/nn/nn*dnndv1[k][i])
; 653  :              + 1.5*area*(dfndv1[k][i]/nn-fn/nn/nn*dnndv1[k][i])*
; 654  :                            (dfndv1[kk][ii]/nn-fn/nn/nn*dnndv1[kk][ii])
; 655  :              + 1.5*area*hh0*(ddfn/nn - dfndv1[k][i]*dnndv1[kk][ii]/nn/nn
; 656  :                     - dfndv1[kk][ii]*dnndv1[k][i]/nn/nn
; 657  :                     +2*fn*dnndv1[k][i]*dnndv1[kk][ii]/nn/nn/nn
; 658  :                      - fn*ddnn/nn/nn);

	fld	QWORD PTR _fn$[ebp]
	mov	eax, DWORD PTR _kk$[ebp]
	fld	ST(0)
	mov	ecx, DWORD PTR _dfndv1$[ebp]
	fld	QWORD PTR _nn$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	fdiv	ST(1), ST(0)
	lea	edx, DWORD PTR [edx+esi*8]
	mov	ecx, DWORD PTR _dnndv1$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv14420[ebp], edx
	lea	ecx, DWORD PTR [ecx+esi*8]
	fdiv	ST(1), ST(0)
	fld	QWORD PTR [edx]
	fdiv	ST(0), ST(1)
	mov	edx, DWORD PTR _dfndv1$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	lea	edx, DWORD PTR [edx+edi*8]
	mov	DWORD PTR tv14437[ebp], edx
	mov	edx, DWORD PTR _dnndv1$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	lea	edx, DWORD PTR [edx+edi*8]
	mov	DWORD PTR tv14443[ebp], edx
	mov	edx, DWORD PTR tv14437[ebp]
	fld	QWORD PTR [ecx]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _hh0$[ebp]
	fld	QWORD PTR __real@3ff8000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14443[ebp]
	fdiv	ST(0), ST(4)
	fld	QWORD PTR [edx]
	fmulp	ST(6), ST(0)
	mov	edx, DWORD PTR tv14437[ebp]
	fsubrp	ST(5), ST(0)
	fmul	QWORD PTR _area$[ebp]
	fld	QWORD PTR _ddfn$89408[ebp]
	fdiv	ST(0), ST(4)
	fld	QWORD PTR [ecx]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14443[ebp]
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(5)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14420[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14443[ebp]
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(5)
	fsubp	ST(1), ST(0)
	fxch	ST(6)
	fadd	ST(0), ST(0)
	fmul	QWORD PTR [edx]
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _dAdv1$[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	mov	ecx, DWORD PTR [ecx+eax*4]
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	faddp	ST(6), ST(0)
	fld	QWORD PTR _ddnn$89407[ebp]
	fmul	QWORD PTR _fn$[ebp]
	fdiv	ST(0), ST(4)
	fdivrp	ST(4), ST(0)
	fxch	ST(5)
	fsubrp	ST(3), ST(0)
	fld	ST(4)
	fld	QWORD PTR _hh0$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(4)
	fmulp	ST(1), ST(0)
	fld	QWORD PTR [edx+edi*8]
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(3)
	fld	QWORD PTR [ecx+esi*8]
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fmul	ST(0), ST(5)
	faddp	ST(2), ST(0)
	fxch	ST(5)
	fmulp	ST(4), ST(0)
	fxch	ST(3)
	fmulp	ST(1), ST(0)
	faddp	ST(2), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fst	QWORD PTR _h$[ebp]

; 659  :            if ( k == kk )

	cmp	ebx, eax
	jne	SHORT $LN994@star_sqcur@2

; 660  :               h += 0.75*ddAdv1dv1[k][i][ii]*hh0*hh0;

	mov	edx, DWORD PTR _ddAdv1dv1$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	mov	ecx, DWORD PTR [eax+edi*4]
	fld	QWORD PTR [ecx+esi*8]
	fmul	QWORD PTR __real@3fe8000000000000
	fmul	ST(0), ST(2)
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fst	QWORD PTR _h$[ebp]
	jmp	SHORT $LN77@star_sqcur@2
$LN883@star_sqcur@2:

; 573  :             }
; 574  :             ddff *= 2;
; 575  :             switch ( variety )

	fstp	ST(0)

; 660  :               h += 0.75*ddAdv1dv1[k][i][ii]*hh0*hh0;

	fld	QWORD PTR _h$[ebp]
	jmp	SHORT $LN77@star_sqcur@2
$LN994@star_sqcur@2:

; 659  :            if ( k == kk )

	fstp	ST(1)
$LN77@star_sqcur@2:

; 661  :                       break;
; 662  :                 }
; 663  :                 if ( !is_finite(h) )

	fld	QWORD PTR __real@fe37e43c8800759c
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN895@star_sqcur@2
	fld	QWORD PTR __real@7e37e43c8800759c
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN76@star_sqcur@2
$LN895@star_sqcur@2:

; 664  :                 { sprintf(errmsg,
; 665  :                     "Star sq curvature hessian infinite at vertex %s\n",
; 666  :                        ELNAME(v_info->id));

	mov	edx, DWORD PTR _v_info$GSCopy$[ebp]
	fstp	ST(0)
	mov	eax, DWORD PTR [edx]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN293@star_sqcur@2
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN294@star_sqcur@2
$LN293@star_sqcur@2:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN294@star_sqcur@2:
	push	eax
	push	OFFSET ??_C@_0DB@LNJPCKCN@Star?5sq?5curvature?5hessian?5infini@
	push	OFFSET _errmsg
	call	_sprintf

; 667  :                   kb_error(3617,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	3617					; 00000e21H
	call	_kb_error
	fld	QWORD PTR _h$[ebp]
	add	esp, 24					; 00000018H
$LN76@star_sqcur@2:

; 668  :                 }
; 669  :                 h11[i][ii] += h;

	mov	eax, DWORD PTR _h11$89396[ebp]
	mov	ecx, DWORD PTR [eax+edi*4]
	fld	QWORD PTR [ecx+esi*8]

; 670  :                 h01[i][ii] -= h;

	mov	edx, DWORD PTR _h01$89404[ebp]
	lea	eax, DWORD PTR [ecx+esi*8]
	fadd	ST(0), ST(1)

; 671  :                 h10[i][ii] -= h;

	mov	ecx, DWORD PTR _h10$89401[ebp]
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR [edx+edi*4]
	fld	QWORD PTR [eax+esi*8]
	mov	edx, DWORD PTR [ecx+edi*4]
	lea	eax, DWORD PTR [eax+esi*8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [eax]
	lea	eax, DWORD PTR [edx+esi*8]
	fld	QWORD PTR [eax]

; 672  :                 h00[i][ii] += h;
; 673  : 
; 674  :                 /* 12 term */
; 675  :                 ddff = dot(dfdv1[k][i],dfdv2[kk][ii],eff_dim);

	mov	edx, DWORD PTR _eff_dim$[ebp]
	fsub	ST(0), ST(1)
	push	edx
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR _h00$89400[ebp]
	mov	ecx, DWORD PTR [eax+edi*4]
	fadd	QWORD PTR [ecx+esi*8]
	lea	eax, DWORD PTR [ecx+esi*8]
	mov	ecx, DWORD PTR _kk$[ebp]
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR _dfdv2$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [edx+esi*4]
	mov	ecx, DWORD PTR _dfdv1$[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	push	eax
	mov	eax, DWORD PTR [edx+edi*4]
	push	eax
	call	_dot
	add	esp, 12					; 0000000cH

; 676  :                 if ( k == kk )

	cmp	ebx, DWORD PTR _kk$[ebp]
	jne	$LN473@star_sqcur@2

; 677  :                 { ddff += (-co1*dAdv1[k][i]*dAdv2[k][ii] + co2*ddAdv1dv2[k][i][ii])
; 678  :                               *dssf;

	mov	ecx, DWORD PTR _dAdv1$[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	mov	ecx, DWORD PTR _ddAdv1dv2$[ebp]
	lea	eax, DWORD PTR [edx+edi*8]
	mov	edx, DWORD PTR [ecx+ebx*4]
	mov	ecx, DWORD PTR [edx+edi*4]
	fld	QWORD PTR [ecx+esi*8]
	mov	ecx, DWORD PTR _dAdv2$[ebp]
	fld	QWORD PTR _co2$89381[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	fmul	ST(1), ST(0)
	fld	QWORD PTR [eax]
	fmul	QWORD PTR _co1$89380[ebp]
	fmul	QWORD PTR [edx+esi*8]
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR _dssf$89383[ebp]
	faddp	ST(2), ST(0)

; 679  :                   ddff += co2*dAdv1[k][i]*ddssf2[ii];

	fld	QWORD PTR [eax]

; 680  :                   ddff += co2*dAdv2[kk][ii]*ddssf1[i];

	mov	eax, DWORD PTR _kk$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR _ddssf2$89387[ebp+esi*8]
	faddp	ST(2), ST(0)
	fmul	QWORD PTR [ecx+esi*8]
	fmul	QWORD PTR _ddssf1$89386[ebp+edi*8]
	faddp	ST(1), ST(0)

; 681  :                   dddsf = 4*dAdv[i]*s2[ii] -2*dAdv[ii]*s2[i] 
; 682  :                               - 2*((i==ii) ? s2f : 0.0)
; 683  :                           + 4*dAdv[ii]*s1[i] - 2*dAdv[i]*s1[ii]
; 684  :                               - 2*((i==ii) ? s1f : 0.0);

	cmp	edi, esi
	jne	SHORT $LN295@star_sqcur@2
	fld	QWORD PTR _s2f$89385[ebp]
	jmp	SHORT $LN296@star_sqcur@2
$LN295@star_sqcur@2:
	fldz
$LN296@star_sqcur@2:
	cmp	edi, esi
	jne	SHORT $LN297@star_sqcur@2
	fld	QWORD PTR _s1f$89384[ebp]
	jmp	SHORT $LN298@star_sqcur@2
$LN297@star_sqcur@2:
	fldz
$LN298@star_sqcur@2:
	fld	QWORD PTR _dAdv$[ebp+edi*8]
	mov	eax, DWORD PTR _s2$[ebp]
	fld	QWORD PTR __real@4010000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR [eax+esi*8]
	fmulp	ST(2), ST(0)
	fld	QWORD PTR _dAdv$[ebp+esi*8]
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR [eax+edi*8]
	mov	eax, DWORD PTR _s1$[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(3)
	fsubrp	ST(1), ST(0)
	fxch	ST(4)
	fmul	ST(0), ST(2)
	fsubp	ST(4), ST(0)
	fmul	QWORD PTR _dAdv$[ebp+esi*8]
	fmul	QWORD PTR [eax+edi*8]
	faddp	ST(3), ST(0)
	fld	QWORD PTR _dAdv$[ebp+edi*8]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [eax+esi*8]
	fsubp	ST(3), ST(0)
	fmul	ST(1), ST(0)
	fxch	ST(2)
	fsubrp	ST(1), ST(0)

; 685  :                   ddff -= co3*dddsf;

	fmul	QWORD PTR _co3$89382[ebp]
	fsubp	ST(2), ST(0)
	jmp	SHORT $LN74@star_sqcur@2
$LN473@star_sqcur@2:
	fld	QWORD PTR __real@4000000000000000
$LN74@star_sqcur@2:

; 686  :                 }
; 687  :               ddff *= 2;
; 688  :               switch ( variety )

	mov	eax, DWORD PTR _variety$[ebp]
	fmulp	ST(1), ST(0)
	fst	QWORD PTR _ddff$89405[ebp]
	cmp	eax, 4
	ja	$LN912@star_sqcur@2
	jmp	DWORD PTR $LN1081@star_sqcur@2[eax*4]
$LN916@star_sqcur@2:

; 689  :               { case TEST_SQ:
; 690  :                       ddnn = 2*dot(dvnorm1[k][i],dvnorm2[kk][ii],eff_dim);

	mov	edx, DWORD PTR _eff_dim$[ebp]
	fstp	ST(0)
	mov	eax, DWORD PTR _dvnorm2$[ebp]
	mov	ecx, DWORD PTR _kk$[ebp]
	push	edx
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [edx+esi*4]
	mov	ecx, DWORD PTR _dvnorm1$[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	push	eax
	mov	eax, DWORD PTR [edx+edi*4]
	push	eax
	call	_dot
	fld	QWORD PTR __real@4000000000000000
	add	esp, 12					; 0000000cH
	fmul	ST(1), ST(0)

; 691  :                       if ( k == kk ) ddnn += 2*antisymnorm[i][ii];

	cmp	ebx, DWORD PTR _kk$[ebp]
	jne	SHORT $LN997@star_sqcur@2
	lea	ecx, DWORD PTR [edi+edi*2]
	lea	edx, DWORD PTR [esi+ecx*2]
	fmul	QWORD PTR _antisymnorm$[ebp+edx*8]
	faddp	ST(1), ST(0)

; 692  :                       h = ddnn;

	fst	QWORD PTR _h$[ebp]

; 693  :                      break;

	jmp	$LN56@star_sqcur@2
$LN997@star_sqcur@2:

; 691  :                       if ( k == kk ) ddnn += 2*antisymnorm[i][ii];

	fstp	ST(0)

; 692  :                       h = ddnn;

	fst	QWORD PTR _h$[ebp]

; 693  :                      break;

	jmp	$LN56@star_sqcur@2
$LN69@star_sqcur@2:

; 694  :                  case PLAIN_SQ:
; 695  :                      h = -aa75*dffdv1[k][i]*dAdv2[kk][ii]
; 696  :                          - aa75*dffdv2[kk][ii]*dAdv1[k][i]
; 697  :                          + ffaaa*dAdv1[k][i]*dAdv2[kk][ii]
; 698  :                          + a75*ddff;

	mov	eax, DWORD PTR _dAdv1$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	fld	QWORD PTR [ecx+edi*8]
	mov	edx, DWORD PTR _dAdv2$[ebp]
	fmul	QWORD PTR _ffaaa$[ebp]
	lea	eax, DWORD PTR [ecx+edi*8]
	mov	ecx, DWORD PTR _kk$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	fmul	QWORD PTR [edx+esi*8]
	lea	edx, DWORD PTR [edx+esi*8]
	mov	DWORD PTR tv14608[ebp], edx
	mov	edx, DWORD PTR _dffdv2$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+esi*8]
	fld	QWORD PTR _aa75$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR _dffdv1$[ebp]
	mov	edx, DWORD PTR [eax+ebx*4]
	fld	QWORD PTR [edx+edi*8]
	mov	eax, DWORD PTR tv14608[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR [eax]
	faddp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR _a75$[ebp]
	faddp	ST(1), ST(0)
	fst	QWORD PTR _h$[ebp]

; 699  :                      if ( k == kk )

	cmp	ebx, ecx
	jne	$LN56@star_sqcur@2

; 700  :                         h -= ffaa*ddAdv1dv2[k][i][ii];

	mov	ecx, DWORD PTR _ddAdv1dv2$[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	mov	eax, DWORD PTR [edx+edi*4]
	fld	QWORD PTR [eax+esi*8]
	fmul	QWORD PTR _ffaa$[ebp]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _h$[ebp]

; 701  :                       break;

	jmp	$LN56@star_sqcur@2
$LN915@star_sqcur@2:

; 702  :                  case EFF_SQ:
; 703  :                       ddnn = 2*dot(dvnorm1[k][i],dvnorm2[kk][ii],eff_dim);

	mov	ecx, DWORD PTR _eff_dim$[ebp]
	fstp	ST(0)
	mov	edx, DWORD PTR _dvnorm2$[ebp]
	mov	eax, DWORD PTR _kk$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR _dvnorm1$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	push	edx
	mov	edx, DWORD PTR [ecx+edi*4]
	push	edx
	call	_dot
	fld	QWORD PTR __real@4000000000000000
	add	esp, 12					; 0000000cH
	fmul	ST(1), ST(0)

; 704  :                       if ( k == kk ) ddnn += 2*antisymnorm[i][ii];

	cmp	ebx, DWORD PTR _kk$[ebp]
	jne	SHORT $LN1000@star_sqcur@2
	lea	eax, DWORD PTR [edi+edi*2]
	lea	ecx, DWORD PTR [esi+eax*2]
	fmul	QWORD PTR _antisymnorm$[ebp+ecx*8]
	faddp	ST(1), ST(0)
	jmp	SHORT $LN66@star_sqcur@2
$LN1000@star_sqcur@2:
	fstp	ST(0)
$LN66@star_sqcur@2:

; 705  :                       h = an75*ddff
; 706  :                          - ann75*dffdv1[k][i]*dnndv2[kk][ii]
; 707  :                          - ann75*dffdv2[kk][ii]*dnndv1[k][i]
; 708  :                          + fnnna*dnndv1[k][i]*dnndv2[kk][ii]
; 709  :                          - fnna*ddnn
; 710  :                          + fn75*dffdv1[k][i]*dAdv2[kk][ii]
; 711  :                          + fn75*dffdv2[kk][ii]*dAdv1[k][i]
; 712  :                          - fnn75*dAdv2[kk][ii]*dnndv1[k][i]
; 713  :                          - fnn75*dnndv2[kk][ii]*dAdv1[k][i];

	mov	edx, DWORD PTR _dffdv1$[ebp]
	fld	QWORD PTR _ddff$89405[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	fmul	QWORD PTR _an75$[ebp]
	mov	edx, DWORD PTR _dnndv2$[ebp]
	lea	ecx, DWORD PTR [eax+edi*8]
	mov	DWORD PTR tv14630[ebp], ecx
	mov	ecx, DWORD PTR _kk$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _dffdv2$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	lea	edx, DWORD PTR [edx+esi*8]
	mov	DWORD PTR tv14644[ebp], edx
	mov	edx, DWORD PTR _dnndv1$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	lea	edx, DWORD PTR [edx+edi*8]
	mov	DWORD PTR tv14650[ebp], edx
	mov	edx, DWORD PTR _dAdv2$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _dAdv1$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	lea	edx, DWORD PTR [edx+edi*8]
	mov	DWORD PTR tv14670[ebp], edx
	mov	edx, DWORD PTR tv14630[ebp]
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14644[ebp]
	fld	QWORD PTR _ann75$[ebp]
	lea	eax, DWORD PTR [eax+esi*8]
	fmul	ST(1), ST(0)
	lea	ecx, DWORD PTR [ecx+esi*8]
	fxch	ST(1)
	fmul	QWORD PTR [eax]
	fsubp	ST(2), ST(0)
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14650[ebp]
	fmul	QWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14630[ebp]
	fmul	QWORD PTR _fnnna$[ebp]
	fmul	QWORD PTR [eax]
	faddp	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR _fnna$[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14644[ebp]
	fld	QWORD PTR _fn75$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR [ecx]
	faddp	ST(2), ST(0)
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14670[ebp]
	fmul	QWORD PTR [edx]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv14650[ebp]
	fld	QWORD PTR _fnn75$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR [ecx]
	fsubp	ST(2), ST(0)
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _h$[ebp]

; 714  :                       if ( k == kk )

	cmp	ebx, DWORD PTR _kk$[ebp]
	jne	$LN56@star_sqcur@2

; 715  :                          h += ffn75*ddAdv1dv2[k][i][ii];

	mov	edx, DWORD PTR _ddAdv1dv2$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	mov	ecx, DWORD PTR [eax+edi*4]
	fld	QWORD PTR [ecx+esi*8]
	fmul	QWORD PTR _ffn75$[ebp]
	faddp	ST(1), ST(0)
	fst	QWORD PTR _h$[ebp]

; 716  :                       break;

	jmp	$LN56@star_sqcur@2
$LN914@star_sqcur@2:

; 717  :                  case NORMAL_SQ:
; 718  :                       ddfn = dot(dfdv1[k][i],dvnorm2[kk][ii],eff_dim)
; 719  :                               + dot(dvnorm1[k][i],dfdv2[kk][ii],eff_dim);

	mov	edx, DWORD PTR _eff_dim$[ebp]
	fstp	ST(0)
	mov	eax, DWORD PTR _dvnorm2$[ebp]
	mov	ecx, DWORD PTR _kk$[ebp]
	push	edx
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [edx+esi*4]
	mov	ecx, DWORD PTR _dfdv1$[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	push	eax
	mov	eax, DWORD PTR [edx+edi*4]
	push	eax
	call	_dot
	fstp	QWORD PTR tv27304[ebp]
	mov	ecx, DWORD PTR _eff_dim$[ebp]
	mov	edx, DWORD PTR _dfdv2$[ebp]
	mov	eax, DWORD PTR _kk$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR _dvnorm1$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	push	edx
	mov	edx, DWORD PTR [ecx+edi*4]
	push	edx
	call	_dot
	fadd	QWORD PTR tv27304[ebp]
	add	esp, 24					; 00000018H

; 720  :                       if ( k == kk ) ddfn += antisymf[i][ii];

	cmp	ebx, DWORD PTR _kk$[ebp]
	jne	$LN62@star_sqcur@2

; 721  :                       if ( k == kk )
; 722  :                       {
; 723  :                          ddfn += (-co1*dAdv1[k][i]*dAdv2[k][ii]
; 724  :                                      + co2*ddAdv1dv2[k][i][ii])
; 725  :                                      *(dot(ds1[k],vnorm,eff_dim)+dot(ds2[k],vnorm,eff_dim));

	mov	edx, DWORD PTR _eff_dim$[ebp]
	lea	eax, DWORD PTR [edi+edi*2]
	lea	ecx, DWORD PTR [esi+eax*2]
	fadd	QWORD PTR _antisymf$[ebp+ecx*8]
	mov	ecx, DWORD PTR _ds2$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+ebx*4]
	lea	eax, DWORD PTR _vnorm$[ebp]
	fstp	QWORD PTR _ddfn$89408[ebp]
	push	eax
	push	edx
	call	_dot
	fstp	QWORD PTR tv27306[ebp]
	mov	eax, DWORD PTR _eff_dim$[ebp]
	mov	edx, DWORD PTR _ds1$[ebp]
	push	eax
	mov	eax, DWORD PTR [edx+ebx*4]
	lea	ecx, DWORD PTR _vnorm$[ebp]
	push	ecx
	push	eax
	call	_dot
	fadd	QWORD PTR tv27306[ebp]
	mov	ecx, DWORD PTR _ddAdv1dv2$[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	mov	eax, DWORD PTR [edx+edi*4]
	fld	QWORD PTR [eax+esi*8]
	mov	ecx, DWORD PTR _dAdv2$[ebp]
	fmul	QWORD PTR _co2$89381[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	mov	eax, DWORD PTR _dAdv1$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	fld	QWORD PTR [ecx+edi*8]

; 726  :                          ddfn += co2*dAdv1[k][i]*
; 727  :                           (dot(ddss21[kk][ii],vnorm,eff_dim)
; 728  :                               +dot(ddss22[kk][ii],vnorm,eff_dim));

	mov	ecx, DWORD PTR _ddss22$[ebp]
	fmul	QWORD PTR _co1$89380[ebp]
	lea	eax, DWORD PTR _vnorm$[ebp]
	fmul	QWORD PTR [edx+esi*8]
	mov	edx, DWORD PTR _eff_dim$[ebp]
	push	edx
	mov	edx, DWORD PTR _kk$[ebp]
	fsubp	ST(1), ST(0)
	push	eax
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [eax+esi*4]
	fmulp	ST(1), ST(0)
	push	ecx
	fadd	QWORD PTR _ddfn$89408[ebp]
	fstp	QWORD PTR _ddfn$89408[ebp]
	call	_dot
	mov	edx, DWORD PTR _eff_dim$[ebp]
	fstp	QWORD PTR tv27308[ebp]
	mov	ecx, DWORD PTR _ddss21$[ebp]
	push	edx
	mov	edx, DWORD PTR _kk$[ebp]
	lea	eax, DWORD PTR _vnorm$[ebp]
	push	eax
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [eax+esi*4]
	push	ecx
	call	_dot
	fadd	QWORD PTR tv27308[ebp]
	mov	edx, DWORD PTR _dAdv1$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	fld	QWORD PTR [eax+edi*8]

; 729  :                          ddfn += co2*dAdv2[kk][ii]*
; 730  :                             (dot(ddss11[k][i],vnorm,eff_dim)
; 731  :                               +dot(ddss12[k][i],vnorm,eff_dim));

	mov	ecx, DWORD PTR _eff_dim$[ebp]
	fmul	QWORD PTR _co2$89381[ebp]
	mov	eax, DWORD PTR _ddss12$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [eax+ebx*4]
	fmulp	ST(1), ST(0)
	lea	edx, DWORD PTR _vnorm$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+edi*4]
	fadd	QWORD PTR _ddfn$89408[ebp]
	push	edx
	fstp	QWORD PTR _ddfn$89408[ebp]
	call	_dot
	mov	eax, DWORD PTR _eff_dim$[ebp]
	fstp	QWORD PTR tv27311[ebp]
	push	eax
	lea	ecx, DWORD PTR _vnorm$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ddss11$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	mov	ecx, DWORD PTR [eax+edi*4]
	push	ecx
	call	_dot
	fadd	QWORD PTR tv27311[ebp]
	mov	edx, DWORD PTR _dAdv2$[ebp]
	mov	eax, DWORD PTR _kk$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [ecx+esi*8]
	add	esp, 72					; 00000048H
	fmul	QWORD PTR _co2$89381[ebp]
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR _ddfn$89408[ebp]
	fstp	QWORD PTR _ddfn$89408[ebp]

; 732  :                          dddsf = 4*vnorm[i]*s2[ii] -2*vnorm[ii]*s2[i] 
; 733  :                                      - 2*((i==ii) ? dot(s2,vnorm,eff_dim) : 0.0)
; 734  :                                  + 4*vnorm[ii]*s1[i] - 2*vnorm[i]*s1[ii]
; 735  :                                      - 2*((i==ii) ? dot(s1,vnorm,eff_dim) : 0.0);

	cmp	edi, esi
	jne	SHORT $LN299@star_sqcur@2
	mov	edx, DWORD PTR _eff_dim$[ebp]
	mov	ecx, DWORD PTR _s2$[ebp]
	push	edx
	lea	eax, DWORD PTR _vnorm$[ebp]
	push	eax
	push	ecx
	call	_dot
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1072@star_sqcur@2
$LN299@star_sqcur@2:
	fldz
$LN1072@star_sqcur@2:
	fstp	QWORD PTR tv3169[ebp]
	cmp	edi, esi
	jne	SHORT $LN301@star_sqcur@2
	mov	edx, DWORD PTR _eff_dim$[ebp]
	mov	ecx, DWORD PTR _s1$[ebp]
	push	edx
	lea	eax, DWORD PTR _vnorm$[ebp]
	push	eax
	push	ecx
	call	_dot
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN302@star_sqcur@2
$LN301@star_sqcur@2:
	fldz
$LN302@star_sqcur@2:
	fld	QWORD PTR _vnorm$[ebp+edi*8]
	mov	eax, DWORD PTR _s2$[ebp]
	fld	QWORD PTR __real@4010000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR [eax+esi*8]
	fmulp	ST(2), ST(0)
	fld	QWORD PTR _vnorm$[ebp+esi*8]
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR [eax+edi*8]
	mov	eax, DWORD PTR _s1$[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(3)
	fsubrp	ST(1), ST(0)
	fld	QWORD PTR tv3169[ebp]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _vnorm$[ebp+esi*8]
	fmulp	ST(2), ST(0)
	fld	QWORD PTR [eax+edi*8]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _vnorm$[ebp+edi*8]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [eax+esi*8]
	fsubp	ST(1), ST(0)
	fxch	ST(2)
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)

; 736  :                          ddfn -= co3*dddsf;

	fmul	QWORD PTR _co3$89382[ebp]
	fsubr	QWORD PTR _ddfn$89408[ebp]
$LN62@star_sqcur@2:

; 737  :                       }
; 738  :                       h  = afnfn*dffdv1[k][i]*dffdv2[kk][ii]
; 739  :                           + afffnfn*ddff
; 740  :                           - ffafnfnfn*dffdv1[k][i]*dfndv2[kk][ii]
; 741  :                           + fffnfn*dffdv1[k][i]*dAdv2[kk][ii]
; 742  :                           + fffnfn*dAdv1[k][i]*dffdv2[kk][ii]
; 743  :                           - ffafnfnfn*dfndv1[k][i]*dffdv2[kk][ii]
; 744  :                           + afffffnfnfnfn*dfndv1[k][i]*dfndv2[kk][ii]
; 745  :                           - fffffnfnfna*ddfn
; 746  :                           - fffffnfnfn*dfndv1[k][i]*dAdv2[kk][ii]
; 747  :                           - fffffnfnfn*dAdv1[k][i]*dfndv2[kk][ii];

	mov	edx, DWORD PTR _dffdv1$[ebp]
	fld	QWORD PTR _afnfn$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	fmul	QWORD PTR [eax+edi*8]
	mov	ecx, DWORD PTR _kk$[ebp]
	mov	edx, DWORD PTR _dffdv2$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	lea	edx, DWORD PTR [edx+esi*8]
	mov	DWORD PTR tv14742[ebp], edx
	mov	edx, DWORD PTR _dfndv2$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	lea	edx, DWORD PTR [edx+esi*8]
	mov	DWORD PTR tv14751[ebp], edx
	mov	edx, DWORD PTR _dAdv2$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	lea	edx, DWORD PTR [ecx+esi*8]
	mov	ecx, DWORD PTR _dAdv1$[ebp]
	mov	DWORD PTR tv14759[ebp], edx
	mov	edx, DWORD PTR [ecx+ebx*4]
	lea	eax, DWORD PTR [eax+edi*8]
	lea	ecx, DWORD PTR [edx+edi*8]
	mov	edx, DWORD PTR _dfndv1$[ebp]
	mov	DWORD PTR tv14766[ebp], ecx
	mov	ecx, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR tv14742[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14751[ebp]
	fld	QWORD PTR _ddff$89405[ebp]
	lea	ecx, DWORD PTR [ecx+edi*8]
	fmul	QWORD PTR _afffnfn$[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ffafnfnfn$[ebp]
	fld	ST(0)
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR [edx]
	fsubp	ST(2), ST(0)
	fld	QWORD PTR _fffnfn$[ebp]
	fld	ST(0)
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv14759[ebp]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv14766[ebp]
	faddp	ST(3), ST(0)
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv14742[ebp]
	fmul	QWORD PTR [eax]
	faddp	ST(2), ST(0)
	fmul	QWORD PTR [ecx]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv14766[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ecx]
	fmul	QWORD PTR _afffffnfnfnfn$[ebp]
	fmul	QWORD PTR [edx]
	faddp	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR _fffffnfnfna$[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv14759[ebp]
	fld	QWORD PTR _fffffnfnfn$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR [ecx]
	fsubp	ST(2), ST(0)
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _h$[ebp]

; 748  :                       if ( k == kk ) 

	cmp	ebx, DWORD PTR _kk$[ebp]
	jne	$LN56@star_sqcur@2

; 749  :                          h += fffffnfn*ddAdv1dv2[k][i][ii];

	mov	ecx, DWORD PTR _ddAdv1dv2$[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	mov	eax, DWORD PTR [edx+edi*4]
	fld	QWORD PTR [eax+esi*8]
	fmul	QWORD PTR _fffffnfn$[ebp]
	faddp	ST(1), ST(0)
	fst	QWORD PTR _h$[ebp]

; 750  :                       break;

	jmp	$LN56@star_sqcur@2
$LN913@star_sqcur@2:

; 751  :                case PERP_SQ:
; 752  :                       ddnn = 2*dot(dvnorm1[k][i],dvnorm2[kk][ii],eff_dim);

	mov	ecx, DWORD PTR _eff_dim$[ebp]
	fstp	ST(0)
	mov	edx, DWORD PTR _dvnorm2$[ebp]
	mov	eax, DWORD PTR _kk$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR _dvnorm1$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	push	edx
	mov	edx, DWORD PTR [ecx+edi*4]
	push	edx
	call	_dot
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	add	esp, 12					; 0000000cH
	fxch	ST(1)
	fst	QWORD PTR _ddnn$89407[ebp]

; 753  :                       if ( k == kk ) ddnn += 2*antisymnorm[i][ii];

	cmp	ebx, DWORD PTR _kk$[ebp]
	jne	SHORT $LN1011@star_sqcur@2
	lea	eax, DWORD PTR [edi+edi*2]
	lea	ecx, DWORD PTR [esi+eax*2]
	fld	QWORD PTR _antisymnorm$[ebp+ecx*8]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _ddnn$89407[ebp]
	jmp	SHORT $LN59@star_sqcur@2
$LN1011@star_sqcur@2:
	fstp	ST(0)
	fstp	ST(0)
$LN59@star_sqcur@2:

; 754  :                       ddfn = dot(dfdv1[k][i],dvnorm2[kk][ii],eff_dim)
; 755  :                               + dot(dvnorm1[k][i],dfdv2[kk][ii],eff_dim);

	mov	edx, DWORD PTR _eff_dim$[ebp]
	mov	eax, DWORD PTR _dfdv2$[ebp]
	mov	ecx, DWORD PTR _kk$[ebp]
	push	edx
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [edx+esi*4]
	mov	ecx, DWORD PTR _dvnorm1$[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	push	eax
	mov	eax, DWORD PTR [edx+edi*4]
	push	eax
	call	_dot
	fstp	QWORD PTR tv27313[ebp]
	mov	ecx, DWORD PTR _eff_dim$[ebp]
	mov	edx, DWORD PTR _dvnorm2$[ebp]
	mov	eax, DWORD PTR _kk$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR _dfdv1$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	push	edx
	mov	edx, DWORD PTR [ecx+edi*4]
	push	edx
	call	_dot
	fadd	QWORD PTR tv27313[ebp]
	add	esp, 24					; 00000018H

; 756  :                       if ( k == kk ) ddfn += antisymf[i][ii];

	cmp	ebx, DWORD PTR _kk$[ebp]
	jne	$LN474@star_sqcur@2

; 757  :                       if ( k == kk )
; 758  :                       {
; 759  :                          ddfn += (-co1*dAdv1[k][i]*dAdv2[k][ii]
; 760  :                                      + co2*ddAdv1dv2[k][i][ii])
; 761  :                                      *(dot(ds1[k],vnorm,eff_dim)+dot(ds2[k],vnorm,eff_dim));

	mov	edx, DWORD PTR _eff_dim$[ebp]
	lea	eax, DWORD PTR [edi+edi*2]
	lea	ecx, DWORD PTR [esi+eax*2]
	fadd	QWORD PTR _antisymf$[ebp+ecx*8]
	mov	ecx, DWORD PTR _ds2$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+ebx*4]
	lea	eax, DWORD PTR _vnorm$[ebp]
	fstp	QWORD PTR _ddfn$89408[ebp]
	push	eax
	push	edx
	call	_dot
	fstp	QWORD PTR tv27315[ebp]
	mov	eax, DWORD PTR _eff_dim$[ebp]
	mov	edx, DWORD PTR _ds1$[ebp]
	push	eax
	mov	eax, DWORD PTR [edx+ebx*4]
	lea	ecx, DWORD PTR _vnorm$[ebp]
	push	ecx
	push	eax
	call	_dot
	fadd	QWORD PTR tv27315[ebp]
	mov	ecx, DWORD PTR _ddAdv1dv2$[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	mov	eax, DWORD PTR [edx+edi*4]
	fld	QWORD PTR [eax+esi*8]
	mov	ecx, DWORD PTR _dAdv2$[ebp]
	fmul	QWORD PTR _co2$89381[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	mov	eax, DWORD PTR _dAdv1$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	fld	QWORD PTR [ecx+edi*8]

; 762  :                          ddfn += co2*dAdv1[k][i]*
; 763  :                           (dot(ddss21[kk][ii],vnorm,eff_dim)
; 764  :                               +dot(ddss22[kk][ii],vnorm,eff_dim));

	mov	ecx, DWORD PTR _ddss22$[ebp]
	fmul	QWORD PTR _co1$89380[ebp]
	lea	eax, DWORD PTR _vnorm$[ebp]
	fmul	QWORD PTR [edx+esi*8]
	mov	edx, DWORD PTR _eff_dim$[ebp]
	push	edx
	mov	edx, DWORD PTR _kk$[ebp]
	fsubp	ST(1), ST(0)
	push	eax
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [eax+esi*4]
	fmulp	ST(1), ST(0)
	push	ecx
	fadd	QWORD PTR _ddfn$89408[ebp]
	fstp	QWORD PTR _ddfn$89408[ebp]
	call	_dot
	mov	edx, DWORD PTR _eff_dim$[ebp]
	fstp	QWORD PTR tv27317[ebp]
	mov	ecx, DWORD PTR _ddss21$[ebp]
	push	edx
	mov	edx, DWORD PTR _kk$[ebp]
	lea	eax, DWORD PTR _vnorm$[ebp]
	push	eax
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [eax+esi*4]
	push	ecx
	call	_dot
	fadd	QWORD PTR tv27317[ebp]
	mov	edx, DWORD PTR _dAdv1$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	fld	QWORD PTR [eax+edi*8]

; 765  :                          ddfn += co2*dAdv2[kk][ii]*
; 766  :                             (dot(ddss11[k][i],vnorm,eff_dim)
; 767  :                               +dot(ddss12[k][i],vnorm,eff_dim));

	mov	ecx, DWORD PTR _eff_dim$[ebp]
	fmul	QWORD PTR _co2$89381[ebp]
	mov	eax, DWORD PTR _ddss12$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [eax+ebx*4]
	fmulp	ST(1), ST(0)
	lea	edx, DWORD PTR _vnorm$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+edi*4]
	fadd	QWORD PTR _ddfn$89408[ebp]
	push	edx
	fstp	QWORD PTR _ddfn$89408[ebp]
	call	_dot
	mov	eax, DWORD PTR _eff_dim$[ebp]
	fstp	QWORD PTR tv27319[ebp]
	push	eax
	lea	ecx, DWORD PTR _vnorm$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ddss11$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	mov	ecx, DWORD PTR [eax+edi*4]
	push	ecx
	call	_dot
	fadd	QWORD PTR tv27319[ebp]
	mov	edx, DWORD PTR _dAdv2$[ebp]
	mov	eax, DWORD PTR _kk$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [ecx+esi*8]
	add	esp, 72					; 00000048H
	fmul	QWORD PTR _co2$89381[ebp]
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR _ddfn$89408[ebp]
	fstp	QWORD PTR _ddfn$89408[ebp]

; 768  :                          dddsf = 4*vnorm[i]*s2[ii] -2*vnorm[ii]*s2[i] 
; 769  :                                      - 2*((i==ii) ? dot(s2,vnorm,eff_dim) : 0.0)
; 770  :                                  + 4*vnorm[ii]*s1[i] - 2*vnorm[i]*s1[ii]
; 771  :                                      - 2*((i==ii) ? dot(s1,vnorm,eff_dim) : 0.0);

	cmp	edi, esi
	jne	SHORT $LN303@star_sqcur@2
	mov	edx, DWORD PTR _eff_dim$[ebp]
	mov	ecx, DWORD PTR _s2$[ebp]
	push	edx
	lea	eax, DWORD PTR _vnorm$[ebp]
	push	eax
	push	ecx
	call	_dot
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1073@star_sqcur@2
$LN303@star_sqcur@2:
	fldz
$LN1073@star_sqcur@2:
	fstp	QWORD PTR tv3452[ebp]
	cmp	edi, esi
	jne	SHORT $LN305@star_sqcur@2
	mov	edx, DWORD PTR _eff_dim$[ebp]
	mov	ecx, DWORD PTR _s1$[ebp]
	push	edx
	lea	eax, DWORD PTR _vnorm$[ebp]
	push	eax
	push	ecx
	call	_dot
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN306@star_sqcur@2
$LN305@star_sqcur@2:
	fldz
$LN306@star_sqcur@2:
	fld	QWORD PTR _vnorm$[ebp+edi*8]
	mov	eax, DWORD PTR _s2$[ebp]
	fld	QWORD PTR __real@4010000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR [eax+esi*8]
	fmulp	ST(2), ST(0)
	fld	QWORD PTR _vnorm$[ebp+esi*8]
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR [eax+edi*8]
	mov	eax, DWORD PTR _s1$[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(3)
	fsubrp	ST(1), ST(0)
	fld	QWORD PTR tv3452[ebp]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _vnorm$[ebp+esi*8]
	fmulp	ST(2), ST(0)
	fld	QWORD PTR [eax+edi*8]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _vnorm$[ebp+edi*8]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [eax+esi*8]
	fsubp	ST(1), ST(0)
	fxch	ST(2)
	fmul	ST(0), ST(1)
	fsubp	ST(2), ST(0)

; 772  :                          ddfn -= co3*dddsf;

	fxch	ST(1)
	fmul	QWORD PTR _co3$89382[ebp]
	fsubr	QWORD PTR _ddfn$89408[ebp]
	fxch	ST(1)
$LN57@star_sqcur@2:

; 773  :                       }
; 774  :            h = 1.5*hh0*dAdv1[k][i]*(dfndv2[kk][ii]/nn-fn/nn/nn*dnndv2[kk][ii])
; 775  :              + 1.5*hh0*dAdv2[kk][ii]*(dfndv1[k][i]/nn-fn/nn/nn*dnndv1[k][i])
; 776  :              + 1.5*area*(dfndv1[k][i]/nn-fn/nn/nn*dnndv1[k][i])*
; 777  :                            (dfndv2[kk][ii]/nn-fn/nn/nn*dnndv2[kk][ii])
; 778  :              + 1.5*area*hh0*(ddfn/nn - dfndv1[k][i]*dnndv2[kk][ii]/nn/nn
; 779  :                     - dfndv2[kk][ii]*dnndv1[k][i]/nn/nn
; 780  :                     +2*fn*dnndv1[k][i]*dnndv2[kk][ii]/nn/nn/nn
; 781  :                      - fn*ddnn/nn/nn);

	fld	QWORD PTR _fn$[ebp]
	mov	edx, DWORD PTR _dfndv2$[ebp]
	fld	QWORD PTR _nn$[ebp]
	mov	eax, DWORD PTR _kk$[ebp]
	fdiv	ST(1), ST(0)
	mov	ecx, DWORD PTR [edx+eax*4]
	lea	ecx, DWORD PTR [ecx+esi*8]
	mov	edx, DWORD PTR _dnndv2$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	lea	eax, DWORD PTR [eax+esi*8]
	mov	DWORD PTR tv14817[ebp], ecx
	fdiv	ST(1), ST(0)
	fld	QWORD PTR [ecx]
	fdiv	ST(0), ST(1)
	mov	ecx, DWORD PTR _dfndv1$[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	lea	edx, DWORD PTR [edx+edi*8]
	mov	ecx, DWORD PTR _dnndv1$[ebp]
	mov	ecx, DWORD PTR [ecx+ebx*4]
	lea	ecx, DWORD PTR [ecx+edi*8]
	fld	QWORD PTR [eax]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _hh0$[ebp]
	fmul	QWORD PTR __real@3ff8000000000000
	fld	QWORD PTR [edx]
	fdiv	ST(0), ST(3)
	fld	QWORD PTR [ecx]
	fmulp	ST(5), ST(0)
	fsubrp	ST(4), ST(0)
	fld	QWORD PTR _area$[ebp]
	fmul	QWORD PTR __real@3ff8000000000000
	fxch	ST(6)
	fdiv	ST(0), ST(3)
	fld	QWORD PTR [eax]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14817[ebp]
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ecx]
	fmul	QWORD PTR [edx]
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _fn$[ebp]
	fmulp	ST(6), ST(0)
	fxch	ST(5)
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _dAdv2$[ebp]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR _kk$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _dAdv1$[ebp]
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	faddp	ST(5), ST(0)
	fld	QWORD PTR _ddnn$89407[ebp]
	fmul	QWORD PTR _fn$[ebp]
	fdiv	ST(0), ST(3)
	fdivrp	ST(3), ST(0)
	fxch	ST(4)
	fsubrp	ST(2), ST(0)
	fld	ST(4)
	fld	QWORD PTR _hh0$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(3)
	fmulp	ST(1), ST(0)
	fld	QWORD PTR [edx+esi*8]
	mov	edx, DWORD PTR [ecx+ebx*4]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(4)
	fld	QWORD PTR [edx+edi*8]
	fmulp	ST(6), ST(0)
	fxch	ST(5)
	fmul	ST(0), ST(2)
	faddp	ST(5), ST(0)
	fxch	ST(3)
	fmulp	ST(5), ST(0)
	fmulp	ST(4), ST(0)
	fxch	ST(2)
	faddp	ST(3), ST(0)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _h$[ebp]

; 782  :            if ( k == kk )

	cmp	ebx, eax
	jne	SHORT $LN1018@star_sqcur@2

; 783  :               h += 0.75*ddAdv1dv2[k][i][ii]*hh0*hh0;

	mov	eax, DWORD PTR _ddAdv1dv2$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	mov	edx, DWORD PTR [ecx+edi*4]
	fld	QWORD PTR [edx+esi*8]
	fmul	QWORD PTR __real@3fe8000000000000
	fmul	ST(0), ST(2)
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fst	QWORD PTR _h$[ebp]
	jmp	SHORT $LN56@star_sqcur@2
$LN474@star_sqcur@2:

; 772  :                          ddfn -= co3*dddsf;

	fld	QWORD PTR __real@4000000000000000
	jmp	$LN57@star_sqcur@2
$LN912@star_sqcur@2:

; 686  :                 }
; 687  :               ddff *= 2;
; 688  :               switch ( variety )

	fstp	ST(0)

; 783  :               h += 0.75*ddAdv1dv2[k][i][ii]*hh0*hh0;

	fld	QWORD PTR _h$[ebp]
	jmp	SHORT $LN56@star_sqcur@2
$LN1018@star_sqcur@2:

; 782  :            if ( k == kk )

	fstp	ST(1)
$LN56@star_sqcur@2:

; 784  :                       break;
; 785  :                 }
; 786  :                 if ( !is_finite(h) )

	fld	QWORD PTR __real@fe37e43c8800759c
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN924@star_sqcur@2
	fld	QWORD PTR __real@7e37e43c8800759c
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN55@star_sqcur@2
$LN924@star_sqcur@2:

; 787  :                 { sprintf(errmsg,
; 788  :                     "Star sq curvature hessian infinite at vertex %s\n",
; 789  :                        ELNAME(v_info->id));

	mov	eax, DWORD PTR _v_info$GSCopy$[ebp]
	fstp	ST(0)
	mov	eax, DWORD PTR [eax]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN307@star_sqcur@2
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN308@star_sqcur@2
$LN307@star_sqcur@2:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN308@star_sqcur@2:
	push	eax
	push	OFFSET ??_C@_0DB@LNJPCKCN@Star?5sq?5curvature?5hessian?5infini@
	push	OFFSET _errmsg
	call	_sprintf

; 790  :                   kb_error(3618,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	3618					; 00000e22H
	call	_kb_error
	fld	QWORD PTR _h$[ebp]
	add	esp, 24					; 00000018H
$LN55@star_sqcur@2:

; 791  :                 }
; 792  :                 h12[i][ii] += h;

	mov	ecx, DWORD PTR _h12$89397[ebp]
	mov	edx, DWORD PTR [ecx+edi*4]
	fld	QWORD PTR [edx+esi*8]
	lea	eax, DWORD PTR [edx+esi*8]

; 793  :                 h02[i][ii] -= h;
; 794  :                 h10[i][ii] -= h;

	mov	edx, DWORD PTR _h10$89401[ebp]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR _h02$89402[ebp]
	mov	ecx, DWORD PTR [eax+edi*4]
	fld	QWORD PTR [ecx+esi*8]
	lea	eax, DWORD PTR [ecx+esi*8]

; 795  :                 h00[i][ii] += h;

	mov	ecx, DWORD PTR _h00$89400[ebp]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR [edx+edi*4]
	fld	QWORD PTR [eax+esi*8]
	mov	edx, DWORD PTR [ecx+edi*4]

; 796  : 
; 797  :                 /* 21 term */
; 798  :                 ddff = dot(dfdv2[k][i],dfdv1[kk][ii],eff_dim);

	mov	ecx, DWORD PTR _dfdv1$[ebp]
	fsub	ST(0), ST(1)
	lea	eax, DWORD PTR [eax+esi*8]
	fstp	QWORD PTR [eax]
	lea	eax, DWORD PTR [edx+esi*8]
	mov	edx, DWORD PTR _kk$[ebp]
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR _eff_dim$[ebp]
	push	eax
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [eax+esi*4]
	mov	edx, DWORD PTR _dfdv2$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	push	ecx
	mov	ecx, DWORD PTR [eax+edi*4]
	push	ecx
	call	_dot
	add	esp, 12					; 0000000cH

; 799  :                 if ( k == kk )

	cmp	ebx, DWORD PTR _kk$[ebp]
	jne	$LN476@star_sqcur@2

; 800  :                 { ddff += (-co1*dAdv2[k][i]*dAdv1[k][ii] + co2*ddAdv2dv1[k][i][ii])
; 801  :                               *dssf;

	mov	edx, DWORD PTR _dAdv2$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	mov	ecx, DWORD PTR _ddAdv2dv1$[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	mov	ecx, DWORD PTR [edx+edi*4]
	fld	QWORD PTR [ecx+esi*8]
	mov	ecx, DWORD PTR _dAdv1$[ebp]
	fld	QWORD PTR _co2$89381[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	fmul	ST(1), ST(0)
	lea	eax, DWORD PTR [eax+edi*8]
	fld	QWORD PTR [eax]
	fmul	QWORD PTR _co1$89380[ebp]
	fmul	QWORD PTR [edx+esi*8]
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR _dssf$89383[ebp]
	faddp	ST(2), ST(0)

; 802  :                   ddff += co2*dAdv2[k][i]*ddssf1[ii];

	fld	QWORD PTR [eax]

; 803  :                   ddff += co2*dAdv1[kk][ii]*ddssf2[i];

	mov	eax, DWORD PTR _kk$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR _ddssf1$89386[ebp+esi*8]
	faddp	ST(2), ST(0)
	fmul	QWORD PTR [ecx+esi*8]
	fmul	QWORD PTR _ddssf2$89387[ebp+edi*8]
	faddp	ST(1), ST(0)

; 804  :                   dddsf = 4*dAdv[i]*s1[ii] -2*dAdv[ii]*s1[i] 
; 805  :                               - 2*((i==ii) ? s1f: 0.0)
; 806  :                           + 4*dAdv[ii]*s2[i] - 2*dAdv[i]*s2[ii]
; 807  :                               - 2*((i==ii) ? s2f : 0.0);

	cmp	edi, esi
	jne	SHORT $LN309@star_sqcur@2
	fld	QWORD PTR _s1f$89384[ebp]
	jmp	SHORT $LN310@star_sqcur@2
$LN309@star_sqcur@2:
	fldz
$LN310@star_sqcur@2:
	cmp	edi, esi
	jne	SHORT $LN311@star_sqcur@2
	fld	QWORD PTR _s2f$89385[ebp]
	jmp	SHORT $LN312@star_sqcur@2
$LN311@star_sqcur@2:
	fldz
$LN312@star_sqcur@2:
	fld	QWORD PTR _dAdv$[ebp+edi*8]
	mov	eax, DWORD PTR _s1$[ebp]
	fld	QWORD PTR __real@4010000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR [eax+esi*8]
	fmulp	ST(2), ST(0)
	fld	QWORD PTR _dAdv$[ebp+esi*8]
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR [eax+edi*8]
	mov	eax, DWORD PTR _s2$[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(3)
	fsubrp	ST(1), ST(0)
	fxch	ST(4)
	fmul	ST(0), ST(2)
	fsubp	ST(4), ST(0)
	fmul	QWORD PTR _dAdv$[ebp+esi*8]
	fmul	QWORD PTR [eax+edi*8]
	faddp	ST(3), ST(0)
	fld	QWORD PTR _dAdv$[ebp+edi*8]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [eax+esi*8]
	fsubp	ST(3), ST(0)
	fmul	ST(1), ST(0)
	fxch	ST(2)
	fsubrp	ST(1), ST(0)

; 808  :                   ddff -= co3*dddsf;

	fmul	QWORD PTR _co3$89382[ebp]
	fsubp	ST(2), ST(0)
	jmp	SHORT $LN53@star_sqcur@2
$LN476@star_sqcur@2:
	fld	QWORD PTR __real@4000000000000000
$LN53@star_sqcur@2:

; 809  :                 }
; 810  :               ddff *= 2;
; 811  :               switch ( variety )

	mov	eax, DWORD PTR _variety$[ebp]
	fmulp	ST(1), ST(0)
	fst	QWORD PTR _ddff$89405[ebp]
	cmp	eax, 4
	ja	$LN941@star_sqcur@2
	jmp	DWORD PTR $LN1082@star_sqcur@2[eax*4]
$LN945@star_sqcur@2:

; 812  :               { case TEST_SQ:
; 813  :                       ddnn = 2*dot(dvnorm2[k][i],dvnorm1[kk][ii],eff_dim);

	mov	edx, DWORD PTR _eff_dim$[ebp]
	fstp	ST(0)
	mov	eax, DWORD PTR _dvnorm1$[ebp]
	mov	ecx, DWORD PTR _kk$[ebp]
	push	edx
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [edx+esi*4]
	mov	ecx, DWORD PTR _dvnorm2$[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	push	eax
	mov	eax, DWORD PTR [edx+edi*4]
	push	eax
	call	_dot
	fld	QWORD PTR __real@4000000000000000
	add	esp, 12					; 0000000cH
	fmul	ST(1), ST(0)

; 814  :                       if ( k == kk ) ddnn += 2*antisymnorm[ii][i];

	cmp	ebx, DWORD PTR _kk$[ebp]
	jne	SHORT $LN1023@star_sqcur@2
	lea	ecx, DWORD PTR [esi+esi*2]
	lea	edx, DWORD PTR [edi+ecx*2]
	fmul	QWORD PTR _antisymnorm$[ebp+edx*8]
	faddp	ST(1), ST(0)

; 815  :                       h = ddnn;

	fst	QWORD PTR _h$[ebp]

; 816  :                      break;

	jmp	$LN35@star_sqcur@2
$LN1023@star_sqcur@2:

; 814  :                       if ( k == kk ) ddnn += 2*antisymnorm[ii][i];

	fstp	ST(0)

; 815  :                       h = ddnn;

	fst	QWORD PTR _h$[ebp]

; 816  :                      break;

	jmp	$LN35@star_sqcur@2
$LN48@star_sqcur@2:

; 817  :                  case PLAIN_SQ:
; 818  :                      h = -aa75*dffdv2[k][i]*dAdv1[kk][ii]
; 819  :                          - aa75*dffdv1[kk][ii]*dAdv2[k][i]
; 820  :                          + ffaaa*dAdv2[k][i]*dAdv1[kk][ii]
; 821  :                          + a75*ddff;

	mov	eax, DWORD PTR _dAdv2$[ebp]
	fld	QWORD PTR _ffaaa$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	fmul	QWORD PTR [ecx+edi*8]
	mov	edx, DWORD PTR _dAdv1$[ebp]
	lea	eax, DWORD PTR [ecx+edi*8]
	mov	ecx, DWORD PTR _kk$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	fmul	QWORD PTR [edx+esi*8]
	lea	edx, DWORD PTR [edx+esi*8]
	mov	DWORD PTR tv14962[ebp], edx
	mov	edx, DWORD PTR _dffdv1$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+esi*8]
	fld	QWORD PTR _aa75$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR _dffdv2$[ebp]
	mov	edx, DWORD PTR [eax+ebx*4]
	fld	QWORD PTR [edx+edi*8]
	mov	eax, DWORD PTR tv14962[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR [eax]
	faddp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR _a75$[ebp]
	faddp	ST(1), ST(0)
	fst	QWORD PTR _h$[ebp]

; 822  :                      if ( k == kk )

	cmp	ebx, ecx
	jne	$LN35@star_sqcur@2

; 823  :                         h -= ffaa*ddAdv2dv1[k][i][ii];

	mov	ecx, DWORD PTR _ddAdv2dv1$[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	mov	eax, DWORD PTR [edx+edi*4]
	fld	QWORD PTR [eax+esi*8]
	fmul	QWORD PTR _ffaa$[ebp]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _h$[ebp]

; 824  :                       break;

	jmp	$LN35@star_sqcur@2
$LN944@star_sqcur@2:

; 825  :                  case EFF_SQ:
; 826  :                       ddnn = 2*dot(dvnorm2[k][i],dvnorm1[kk][ii],eff_dim);

	mov	ecx, DWORD PTR _eff_dim$[ebp]
	fstp	ST(0)
	mov	edx, DWORD PTR _dvnorm1$[ebp]
	mov	eax, DWORD PTR _kk$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR _dvnorm2$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	push	edx
	mov	edx, DWORD PTR [ecx+edi*4]
	push	edx
	call	_dot
	fld	QWORD PTR __real@4000000000000000
	add	esp, 12					; 0000000cH
	fmul	ST(1), ST(0)

; 827  :                       if ( k == kk ) ddnn += 2*antisymnorm[ii][i];

	cmp	ebx, DWORD PTR _kk$[ebp]
	jne	SHORT $LN1026@star_sqcur@2
	lea	eax, DWORD PTR [esi+esi*2]
	lea	ecx, DWORD PTR [edi+eax*2]
	fmul	QWORD PTR _antisymnorm$[ebp+ecx*8]
	faddp	ST(1), ST(0)
	jmp	SHORT $LN45@star_sqcur@2
$LN1026@star_sqcur@2:
	fstp	ST(0)
$LN45@star_sqcur@2:

; 828  :                       h = an75*ddff
; 829  :                          - ann75*dffdv2[k][i]*dnndv1[kk][ii]
; 830  :                          - ann75*dffdv1[kk][ii]*dnndv2[k][i]
; 831  :                          + fnnna*dnndv2[k][i]*dnndv1[kk][ii]
; 832  :                          - fnna*ddnn
; 833  :                          + fn75*dffdv2[k][i]*dAdv1[kk][ii]
; 834  :                          + fn75*dffdv1[kk][ii]*dAdv2[k][i]
; 835  :                          - fnn75*dAdv1[kk][ii]*dnndv2[k][i]
; 836  :                          - fnn75*dnndv1[kk][ii]*dAdv2[k][i];

	mov	edx, DWORD PTR _dffdv2$[ebp]
	fld	QWORD PTR _ddff$89405[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	fmul	QWORD PTR _an75$[ebp]
	mov	edx, DWORD PTR _dnndv1$[ebp]
	lea	ecx, DWORD PTR [eax+edi*8]
	mov	DWORD PTR tv14978[ebp], ecx
	mov	ecx, DWORD PTR _kk$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _dffdv1$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	lea	edx, DWORD PTR [edx+esi*8]
	mov	DWORD PTR tv14991[ebp], edx
	mov	edx, DWORD PTR _dnndv2$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	lea	edx, DWORD PTR [edx+edi*8]
	mov	DWORD PTR tv14997[ebp], edx
	mov	edx, DWORD PTR _dAdv1$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _dAdv2$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	lea	edx, DWORD PTR [edx+edi*8]
	mov	DWORD PTR tv15017[ebp], edx
	mov	edx, DWORD PTR tv14978[ebp]
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14991[ebp]
	fld	QWORD PTR _ann75$[ebp]
	lea	eax, DWORD PTR [eax+esi*8]
	fmul	ST(1), ST(0)
	lea	ecx, DWORD PTR [ecx+esi*8]
	fxch	ST(1)
	fmul	QWORD PTR [eax]
	fsubp	ST(2), ST(0)
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14997[ebp]
	fmul	QWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14978[ebp]
	fmul	QWORD PTR _fnnna$[ebp]
	fmul	QWORD PTR [eax]
	faddp	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR _fnna$[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR tv14991[ebp]
	fld	QWORD PTR _fn75$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR [ecx]
	faddp	ST(2), ST(0)
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv15017[ebp]
	fmul	QWORD PTR [edx]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv14997[ebp]
	fld	QWORD PTR _fnn75$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR [ecx]
	fsubp	ST(2), ST(0)
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _h$[ebp]

; 837  :                       if ( k == kk )

	cmp	ebx, DWORD PTR _kk$[ebp]
	jne	$LN35@star_sqcur@2

; 838  :                          h += ffn75*ddAdv2dv1[k][i][ii];

	mov	edx, DWORD PTR _ddAdv2dv1$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	mov	ecx, DWORD PTR [eax+edi*4]
	fld	QWORD PTR [ecx+esi*8]
	fmul	QWORD PTR _ffn75$[ebp]
	faddp	ST(1), ST(0)
	fst	QWORD PTR _h$[ebp]

; 839  :                       break;

	jmp	$LN35@star_sqcur@2
$LN943@star_sqcur@2:

; 840  :                  case NORMAL_SQ:
; 841  :                       ddfn = dot(dfdv2[k][i],dvnorm1[kk][ii],eff_dim)
; 842  :                               + dot(dvnorm2[k][i],dfdv1[kk][ii],eff_dim);

	mov	edx, DWORD PTR _eff_dim$[ebp]
	fstp	ST(0)
	mov	eax, DWORD PTR _dvnorm1$[ebp]
	mov	ecx, DWORD PTR _kk$[ebp]
	push	edx
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [edx+esi*4]
	mov	ecx, DWORD PTR _dfdv2$[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	push	eax
	mov	eax, DWORD PTR [edx+edi*4]
	push	eax
	call	_dot
	fstp	QWORD PTR tv27321[ebp]
	mov	ecx, DWORD PTR _eff_dim$[ebp]
	mov	edx, DWORD PTR _dfdv1$[ebp]
	mov	eax, DWORD PTR _kk$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR _dvnorm2$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	push	edx
	mov	edx, DWORD PTR [ecx+edi*4]
	push	edx
	call	_dot
	fadd	QWORD PTR tv27321[ebp]
	add	esp, 24					; 00000018H

; 843  :                       if ( k == kk ) ddfn += antisymf[ii][i];

	cmp	ebx, DWORD PTR _kk$[ebp]
	jne	$LN41@star_sqcur@2

; 844  :                       if ( k == kk )
; 845  :                       {
; 846  :                          ddfn += (-co1*dAdv2[k][i]*dAdv1[k][ii]
; 847  :                                      + co2*ddAdv2dv1[k][i][ii])
; 848  :                                      *(dot(ds1[k],vnorm,eff_dim)+dot(ds2[k],vnorm,eff_dim));

	mov	edx, DWORD PTR _eff_dim$[ebp]
	lea	eax, DWORD PTR [esi+esi*2]
	lea	ecx, DWORD PTR [edi+eax*2]
	fadd	QWORD PTR _antisymf$[ebp+ecx*8]
	mov	ecx, DWORD PTR _ds2$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+ebx*4]
	lea	eax, DWORD PTR _vnorm$[ebp]
	fstp	QWORD PTR _ddfn$89408[ebp]
	push	eax
	push	edx
	call	_dot
	fstp	QWORD PTR tv27323[ebp]
	mov	eax, DWORD PTR _eff_dim$[ebp]
	mov	edx, DWORD PTR _ds1$[ebp]
	push	eax
	mov	eax, DWORD PTR [edx+ebx*4]
	lea	ecx, DWORD PTR _vnorm$[ebp]
	push	ecx
	push	eax
	call	_dot
	fadd	QWORD PTR tv27323[ebp]
	mov	ecx, DWORD PTR _ddAdv2dv1$[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	mov	eax, DWORD PTR [edx+edi*4]
	fld	QWORD PTR [eax+esi*8]
	mov	ecx, DWORD PTR _dAdv1$[ebp]
	fmul	QWORD PTR _co2$89381[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	mov	eax, DWORD PTR _dAdv2$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	fld	QWORD PTR [ecx+edi*8]

; 849  :                          ddfn += co2*dAdv2[k][i]*
; 850  :                           (dot(ddss11[kk][ii],vnorm,eff_dim)
; 851  :                               +dot(ddss12[kk][ii],vnorm,eff_dim));

	mov	ecx, DWORD PTR _ddss12$[ebp]
	fmul	QWORD PTR _co1$89380[ebp]
	lea	eax, DWORD PTR _vnorm$[ebp]
	fmul	QWORD PTR [edx+esi*8]
	mov	edx, DWORD PTR _eff_dim$[ebp]
	push	edx
	mov	edx, DWORD PTR _kk$[ebp]
	fsubp	ST(1), ST(0)
	push	eax
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [eax+esi*4]
	fmulp	ST(1), ST(0)
	push	ecx
	fadd	QWORD PTR _ddfn$89408[ebp]
	fstp	QWORD PTR _ddfn$89408[ebp]
	call	_dot
	mov	edx, DWORD PTR _eff_dim$[ebp]
	fstp	QWORD PTR tv27325[ebp]
	mov	ecx, DWORD PTR _ddss11$[ebp]
	push	edx
	mov	edx, DWORD PTR _kk$[ebp]
	lea	eax, DWORD PTR _vnorm$[ebp]
	push	eax
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [eax+esi*4]
	push	ecx
	call	_dot
	fadd	QWORD PTR tv27325[ebp]
	mov	edx, DWORD PTR _dAdv2$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	fld	QWORD PTR [eax+edi*8]

; 852  :                          ddfn += co2*dAdv1[kk][ii]*
; 853  :                             (dot(ddss21[k][i],vnorm,eff_dim)
; 854  :                               +dot(ddss22[k][i],vnorm,eff_dim));

	mov	ecx, DWORD PTR _eff_dim$[ebp]
	fmul	QWORD PTR _co2$89381[ebp]
	mov	eax, DWORD PTR _ddss22$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [eax+ebx*4]
	fmulp	ST(1), ST(0)
	lea	edx, DWORD PTR _vnorm$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+edi*4]
	fadd	QWORD PTR _ddfn$89408[ebp]
	push	edx
	fstp	QWORD PTR _ddfn$89408[ebp]
	call	_dot
	mov	eax, DWORD PTR _eff_dim$[ebp]
	fstp	QWORD PTR tv27327[ebp]
	push	eax
	lea	ecx, DWORD PTR _vnorm$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ddss21$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	mov	ecx, DWORD PTR [eax+edi*4]
	push	ecx
	call	_dot
	fadd	QWORD PTR tv27327[ebp]
	mov	edx, DWORD PTR _dAdv1$[ebp]
	mov	eax, DWORD PTR _kk$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [ecx+esi*8]
	add	esp, 72					; 00000048H
	fmul	QWORD PTR _co2$89381[ebp]
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR _ddfn$89408[ebp]
	fstp	QWORD PTR _ddfn$89408[ebp]

; 855  :                          dddsf = 4*vnorm[i]*s1[ii] -2*vnorm[ii]*s1[i] 
; 856  :                                      - 2*((i==ii) ? dot(s1,vnorm,eff_dim) : 0.0)
; 857  :                                  + 4*vnorm[ii]*s2[i] - 2*vnorm[i]*s2[ii]
; 858  :                                      - 2*((i==ii) ? dot(s2,vnorm,eff_dim) : 0.0);

	cmp	edi, esi
	jne	SHORT $LN313@star_sqcur@2
	mov	edx, DWORD PTR _eff_dim$[ebp]
	mov	ecx, DWORD PTR _s1$[ebp]
	push	edx
	lea	eax, DWORD PTR _vnorm$[ebp]
	push	eax
	push	ecx
	call	_dot
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1074@star_sqcur@2
$LN313@star_sqcur@2:
	fldz
$LN1074@star_sqcur@2:
	fstp	QWORD PTR tv4069[ebp]
	cmp	edi, esi
	jne	SHORT $LN315@star_sqcur@2
	mov	edx, DWORD PTR _eff_dim$[ebp]
	mov	ecx, DWORD PTR _s2$[ebp]
	push	edx
	lea	eax, DWORD PTR _vnorm$[ebp]
	push	eax
	push	ecx
	call	_dot
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN316@star_sqcur@2
$LN315@star_sqcur@2:
	fldz
$LN316@star_sqcur@2:
	fld	QWORD PTR _vnorm$[ebp+edi*8]
	mov	eax, DWORD PTR _s1$[ebp]
	fld	QWORD PTR __real@4010000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR [eax+esi*8]
	fmulp	ST(2), ST(0)
	fld	QWORD PTR _vnorm$[ebp+esi*8]
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR [eax+edi*8]
	mov	eax, DWORD PTR _s2$[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(3)
	fsubrp	ST(1), ST(0)
	fld	QWORD PTR tv4069[ebp]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _vnorm$[ebp+esi*8]
	fmulp	ST(2), ST(0)
	fld	QWORD PTR [eax+edi*8]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _vnorm$[ebp+edi*8]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [eax+esi*8]
	fsubp	ST(1), ST(0)
	fxch	ST(2)
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)

; 859  :                          ddfn -= co3*dddsf;

	fmul	QWORD PTR _co3$89382[ebp]
	fsubr	QWORD PTR _ddfn$89408[ebp]
$LN41@star_sqcur@2:

; 860  :                       }
; 861  :                       h  = afnfn*dffdv2[k][i]*dffdv1[kk][ii]
; 862  :                           + afffnfn*ddff
; 863  :                           - ffafnfnfn*dffdv2[k][i]*dfndv1[kk][ii]
; 864  :                           + fffnfn*dffdv2[k][i]*dAdv1[kk][ii]
; 865  :                           - ffafnfnfn*dfndv2[k][i]*dffdv1[kk][ii]
; 866  :                           + afffffnfnfnfn*dfndv2[k][i]*dfndv1[kk][ii]
; 867  :                           - fffffnfnfna*ddfn
; 868  :                           - fffffnfnfn*dfndv2[k][i]*dAdv1[kk][ii]
; 869  :                           + fffnfn*dAdv2[k][i]*dffdv1[kk][ii]
; 870  :                           - fffffnfnfn*dAdv2[k][i]*dfndv1[kk][ii];

	mov	edx, DWORD PTR _dffdv2$[ebp]
	fld	QWORD PTR _afnfn$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	fmul	QWORD PTR [eax+edi*8]
	mov	ecx, DWORD PTR _kk$[ebp]
	mov	edx, DWORD PTR _dffdv1$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	lea	edx, DWORD PTR [edx+esi*8]
	mov	DWORD PTR tv15074[ebp], edx
	mov	edx, DWORD PTR _dfndv1$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	lea	edx, DWORD PTR [edx+esi*8]
	mov	DWORD PTR tv15082[ebp], edx
	mov	edx, DWORD PTR _dAdv1$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	lea	edx, DWORD PTR [ecx+esi*8]
	mov	ecx, DWORD PTR _dfndv2$[ebp]
	mov	DWORD PTR tv15090[ebp], edx
	mov	edx, DWORD PTR [ecx+ebx*4]
	lea	ecx, DWORD PTR [edx+edi*8]
	mov	edx, DWORD PTR _dAdv2$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	lea	eax, DWORD PTR [eax+edi*8]
	lea	edx, DWORD PTR [edx+edi*8]
	mov	DWORD PTR tv15112[ebp], edx
	mov	edx, DWORD PTR tv15074[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv15082[ebp]
	fld	QWORD PTR _ddff$89405[ebp]
	fmul	QWORD PTR _afffnfn$[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ffafnfnfn$[ebp]
	fld	ST(0)
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR [edx]
	fsubp	ST(2), ST(0)
	fld	QWORD PTR _fffnfn$[ebp]
	fld	ST(0)
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv15090[ebp]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv15074[ebp]
	faddp	ST(3), ST(0)
	fld	QWORD PTR [ecx]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR [eax]
	fsubp	ST(2), ST(0)
	fld	QWORD PTR [ecx]
	fmul	QWORD PTR _afffffnfnfnfn$[ebp]
	fmul	QWORD PTR [edx]
	faddp	ST(2), ST(0)
	fxch	ST(2)
	fmul	QWORD PTR _fffffnfnfna$[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv15090[ebp]
	fld	QWORD PTR _fffffnfnfn$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv15112[ebp]
	fsubp	ST(2), ST(0)
	fxch	ST(2)
	fmul	QWORD PTR [ecx]
	fmul	QWORD PTR [eax]
	faddp	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR [ecx]
	fmul	QWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _h$[ebp]

; 871  :                       if ( k == kk ) 

	cmp	ebx, DWORD PTR _kk$[ebp]
	jne	$LN35@star_sqcur@2

; 872  :                          h += fffffnfn*ddAdv2dv1[k][i][ii];

	mov	edx, DWORD PTR _ddAdv2dv1$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	mov	ecx, DWORD PTR [eax+edi*4]
	fld	QWORD PTR [ecx+esi*8]
	fmul	QWORD PTR _fffffnfn$[ebp]
	faddp	ST(1), ST(0)
	fst	QWORD PTR _h$[ebp]

; 873  :                       break;

	jmp	$LN35@star_sqcur@2
$LN942@star_sqcur@2:

; 874  :                  case PERP_SQ:
; 875  :                       ddnn = 2*dot(dvnorm2[k][i],dvnorm1[kk][ii],eff_dim);

	mov	edx, DWORD PTR _eff_dim$[ebp]
	fstp	ST(0)
	mov	eax, DWORD PTR _dvnorm1$[ebp]
	mov	ecx, DWORD PTR _kk$[ebp]
	push	edx
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [edx+esi*4]
	mov	ecx, DWORD PTR _dvnorm2$[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	push	eax
	mov	eax, DWORD PTR [edx+edi*4]
	push	eax
	call	_dot
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	add	esp, 12					; 0000000cH
	fxch	ST(1)
	fst	QWORD PTR _ddnn$89407[ebp]

; 876  :                       if ( k == kk ) ddnn += 2*antisymnorm[ii][i];

	cmp	ebx, DWORD PTR _kk$[ebp]
	jne	SHORT $LN1037@star_sqcur@2
	lea	ecx, DWORD PTR [esi+esi*2]
	lea	edx, DWORD PTR [edi+ecx*2]
	fld	QWORD PTR _antisymnorm$[ebp+edx*8]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _ddnn$89407[ebp]
	jmp	SHORT $LN38@star_sqcur@2
$LN1037@star_sqcur@2:
	fstp	ST(0)
	fstp	ST(0)
$LN38@star_sqcur@2:

; 877  :                       ddfn = dot(dfdv2[k][i],dvnorm1[kk][ii],eff_dim)
; 878  :                               + dot(dvnorm2[k][i],dfdv1[kk][ii],eff_dim);

	mov	eax, DWORD PTR _eff_dim$[ebp]
	mov	ecx, DWORD PTR _dvnorm1$[ebp]
	mov	edx, DWORD PTR _kk$[ebp]
	push	eax
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [eax+esi*4]
	mov	edx, DWORD PTR _dfdv2$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	push	ecx
	mov	ecx, DWORD PTR [eax+edi*4]
	push	ecx
	call	_dot
	fstp	QWORD PTR tv27329[ebp]
	mov	edx, DWORD PTR _eff_dim$[ebp]
	mov	eax, DWORD PTR _dfdv1$[ebp]
	mov	ecx, DWORD PTR _kk$[ebp]
	push	edx
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [edx+esi*4]
	mov	ecx, DWORD PTR _dvnorm2$[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	push	eax
	mov	eax, DWORD PTR [edx+edi*4]
	push	eax
	call	_dot
	fadd	QWORD PTR tv27329[ebp]
	add	esp, 24					; 00000018H

; 879  :                       if ( k == kk ) ddfn += antisymf[ii][i];

	cmp	ebx, DWORD PTR _kk$[ebp]
	jne	$LN477@star_sqcur@2

; 880  :                       if ( k == kk )
; 881  :                       {
; 882  :                          ddfn += (-co1*dAdv2[k][i]*dAdv1[k][ii]
; 883  :                                      + co2*ddAdv2dv1[k][i][ii])
; 884  :                                      *(dot(ds1[k],vnorm,eff_dim)+dot(ds2[k],vnorm,eff_dim));

	mov	eax, DWORD PTR _eff_dim$[ebp]
	lea	ecx, DWORD PTR [esi+esi*2]
	lea	edx, DWORD PTR [edi+ecx*2]
	fadd	QWORD PTR _antisymf$[ebp+edx*8]
	mov	edx, DWORD PTR _ds2$[ebp]
	push	eax
	mov	eax, DWORD PTR [edx+ebx*4]
	lea	ecx, DWORD PTR _vnorm$[ebp]
	fstp	QWORD PTR _ddfn$89408[ebp]
	push	ecx
	push	eax
	call	_dot
	fstp	QWORD PTR tv27331[ebp]
	mov	ecx, DWORD PTR _eff_dim$[ebp]
	mov	eax, DWORD PTR _ds1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [eax+ebx*4]
	lea	edx, DWORD PTR _vnorm$[ebp]
	push	edx
	push	ecx
	call	_dot
	fadd	QWORD PTR tv27331[ebp]
	mov	edx, DWORD PTR _ddAdv2dv1$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	mov	ecx, DWORD PTR [eax+edi*4]
	fld	QWORD PTR [ecx+esi*8]
	mov	edx, DWORD PTR _dAdv1$[ebp]
	fmul	QWORD PTR _co2$89381[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	mov	ecx, DWORD PTR _dAdv2$[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	fld	QWORD PTR [edx+edi*8]

; 885  :                          ddfn += co2*dAdv2[k][i]*
; 886  :                           (dot(ddss11[kk][ii],vnorm,eff_dim)
; 887  :                               +dot(ddss12[kk][ii],vnorm,eff_dim));

	mov	edx, DWORD PTR _ddss12$[ebp]
	fmul	QWORD PTR _co1$89380[ebp]
	lea	ecx, DWORD PTR _vnorm$[ebp]
	fmul	QWORD PTR [eax+esi*8]
	mov	eax, DWORD PTR _eff_dim$[ebp]
	push	eax
	mov	eax, DWORD PTR _kk$[ebp]
	fsubp	ST(1), ST(0)
	push	ecx
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+esi*4]
	fmulp	ST(1), ST(0)
	push	edx
	fadd	QWORD PTR _ddfn$89408[ebp]
	fstp	QWORD PTR _ddfn$89408[ebp]
	call	_dot
	mov	eax, DWORD PTR _eff_dim$[ebp]
	fstp	QWORD PTR tv27333[ebp]
	mov	edx, DWORD PTR _ddss11$[ebp]
	push	eax
	mov	eax, DWORD PTR _kk$[ebp]
	lea	ecx, DWORD PTR _vnorm$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+esi*4]
	push	edx
	call	_dot
	fadd	QWORD PTR tv27333[ebp]
	mov	eax, DWORD PTR _dAdv2$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	fld	QWORD PTR [ecx+edi*8]

; 888  :                          ddfn += co2*dAdv1[kk][ii]*
; 889  :                             (dot(ddss21[k][i],vnorm,eff_dim)
; 890  :                               +dot(ddss22[k][i],vnorm,eff_dim));

	mov	edx, DWORD PTR _eff_dim$[ebp]
	fmul	QWORD PTR _co2$89381[ebp]
	mov	ecx, DWORD PTR _ddss22$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+ebx*4]
	fmulp	ST(1), ST(0)
	lea	eax, DWORD PTR _vnorm$[ebp]
	push	eax
	mov	eax, DWORD PTR [edx+edi*4]
	fadd	QWORD PTR _ddfn$89408[ebp]
	push	eax
	fstp	QWORD PTR _ddfn$89408[ebp]
	call	_dot
	mov	ecx, DWORD PTR _eff_dim$[ebp]
	fstp	QWORD PTR tv27335[ebp]
	push	ecx
	lea	edx, DWORD PTR _vnorm$[ebp]
	push	edx
	mov	eax, DWORD PTR _ddss21$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	mov	edx, DWORD PTR [ecx+edi*4]
	push	edx
	call	_dot
	fadd	QWORD PTR tv27335[ebp]
	mov	eax, DWORD PTR _dAdv1$[ebp]
	mov	ecx, DWORD PTR _kk$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	fld	QWORD PTR [edx+esi*8]
	add	esp, 72					; 00000048H
	fmul	QWORD PTR _co2$89381[ebp]
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR _ddfn$89408[ebp]
	fstp	QWORD PTR _ddfn$89408[ebp]

; 891  :                          dddsf = 4*vnorm[i]*s1[ii] -2*vnorm[ii]*s1[i] 
; 892  :                                      - 2*((i==ii) ? dot(s1,vnorm,eff_dim) : 0.0)
; 893  :                                  + 4*vnorm[ii]*s2[i] - 2*vnorm[i]*s2[ii]
; 894  :                                      - 2*((i==ii) ? dot(s2,vnorm,eff_dim) : 0.0);

	cmp	edi, esi
	jne	SHORT $LN317@star_sqcur@2
	mov	eax, DWORD PTR _eff_dim$[ebp]
	mov	edx, DWORD PTR _s1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vnorm$[ebp]
	push	ecx
	push	edx
	call	_dot
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1075@star_sqcur@2
$LN317@star_sqcur@2:
	fldz
$LN1075@star_sqcur@2:
	fstp	QWORD PTR tv4352[ebp]
	cmp	edi, esi
	jne	SHORT $LN319@star_sqcur@2
	mov	eax, DWORD PTR _eff_dim$[ebp]
	mov	edx, DWORD PTR _s2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vnorm$[ebp]
	push	ecx
	push	edx
	call	_dot
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN320@star_sqcur@2
$LN319@star_sqcur@2:
	fldz
$LN320@star_sqcur@2:
	fld	QWORD PTR _vnorm$[ebp+edi*8]
	mov	eax, DWORD PTR _s1$[ebp]
	fld	QWORD PTR __real@4010000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR [eax+esi*8]
	fmulp	ST(2), ST(0)
	fld	QWORD PTR _vnorm$[ebp+esi*8]
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fld	QWORD PTR [eax+edi*8]
	mov	eax, DWORD PTR _s2$[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(3)
	fsubrp	ST(1), ST(0)
	fld	QWORD PTR tv4352[ebp]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _vnorm$[ebp+esi*8]
	fmulp	ST(2), ST(0)
	fld	QWORD PTR [eax+edi*8]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _vnorm$[ebp+edi*8]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [eax+esi*8]
	fsubp	ST(1), ST(0)
	fxch	ST(2)
	fmul	ST(0), ST(1)
	fsubp	ST(2), ST(0)

; 895  :                          ddfn -= co3*dddsf;

	fxch	ST(1)
	fmul	QWORD PTR _co3$89382[ebp]
	fsubr	QWORD PTR _ddfn$89408[ebp]
	fxch	ST(1)
$LN36@star_sqcur@2:

; 896  :                       }
; 897  :            h = 1.5*hh0*dAdv2[k][i]*(dfndv1[kk][ii]/nn-fn/nn/nn*dnndv1[kk][ii])
; 898  :              + 1.5*hh0*dAdv1[kk][ii]*(dfndv2[k][i]/nn-fn/nn/nn*dnndv2[k][i])
; 899  :              + 1.5*area*(dfndv2[k][i]/nn-fn/nn/nn*dnndv2[k][i])*
; 900  :                            (dfndv1[kk][ii]/nn-fn/nn/nn*dnndv1[kk][ii])
; 901  :              + 1.5*area*hh0*(ddfn/nn - dfndv2[k][i]*dnndv1[kk][ii]/nn/nn
; 902  :                     - dfndv1[kk][ii]*dnndv2[k][i]/nn/nn
; 903  :                     +2*fn*dnndv2[k][i]*dnndv1[kk][ii]/nn/nn/nn
; 904  :                      - fn*ddnn/nn/nn);

	fld	QWORD PTR _fn$[ebp]
	mov	ecx, DWORD PTR _dfndv1$[ebp]
	fld	QWORD PTR _nn$[ebp]
	mov	eax, DWORD PTR _kk$[ebp]
	fdiv	ST(1), ST(0)
	mov	edx, DWORD PTR [ecx+eax*4]
	lea	ecx, DWORD PTR [edx+esi*8]
	mov	edx, DWORD PTR _dnndv1$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	lea	eax, DWORD PTR [eax+esi*8]
	mov	DWORD PTR tv15148[ebp], ecx
	fdiv	ST(1), ST(0)
	fld	QWORD PTR [ecx]
	fdiv	ST(0), ST(1)
	mov	ecx, DWORD PTR _dfndv2$[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	lea	edx, DWORD PTR [edx+edi*8]
	mov	ecx, DWORD PTR _dnndv2$[ebp]
	mov	ecx, DWORD PTR [ecx+ebx*4]
	lea	ecx, DWORD PTR [ecx+edi*8]
	fld	QWORD PTR [eax]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _hh0$[ebp]
	fmul	QWORD PTR __real@3ff8000000000000
	fld	QWORD PTR [edx]
	fdiv	ST(0), ST(3)
	fld	QWORD PTR [ecx]
	fmulp	ST(5), ST(0)
	fsubrp	ST(4), ST(0)
	fld	QWORD PTR _area$[ebp]
	fmul	QWORD PTR __real@3ff8000000000000
	fxch	ST(6)
	fdiv	ST(0), ST(3)
	fld	QWORD PTR [eax]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv15148[ebp]
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ecx]
	fmul	QWORD PTR [edx]
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _fn$[ebp]
	fmulp	ST(6), ST(0)
	fxch	ST(5)
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _dAdv1$[ebp]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR _kk$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _dAdv2$[ebp]
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(3)
	faddp	ST(5), ST(0)
	fld	QWORD PTR _ddnn$89407[ebp]
	fmul	QWORD PTR _fn$[ebp]
	fdiv	ST(0), ST(3)
	fdivrp	ST(3), ST(0)
	fxch	ST(4)
	fsubrp	ST(2), ST(0)
	fld	ST(4)
	fld	QWORD PTR _hh0$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(3)
	fmulp	ST(1), ST(0)
	fld	QWORD PTR [edx+esi*8]
	mov	edx, DWORD PTR [ecx+ebx*4]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(4)
	fld	QWORD PTR [edx+edi*8]
	fmulp	ST(6), ST(0)
	fxch	ST(5)
	fmul	ST(0), ST(2)
	faddp	ST(5), ST(0)
	fxch	ST(3)
	fmulp	ST(5), ST(0)
	fmulp	ST(4), ST(0)
	fxch	ST(2)
	faddp	ST(3), ST(0)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _h$[ebp]

; 905  :            if ( k == kk )

	cmp	ebx, eax
	jne	SHORT $LN1044@star_sqcur@2

; 906  :               h += 0.75*ddAdv2dv1[k][i][ii]*hh0*hh0;

	mov	eax, DWORD PTR _ddAdv2dv1$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	mov	edx, DWORD PTR [ecx+edi*4]
	fld	QWORD PTR [edx+esi*8]
	fmul	QWORD PTR __real@3fe8000000000000
	fmul	ST(0), ST(2)
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fst	QWORD PTR _h$[ebp]
	jmp	SHORT $LN35@star_sqcur@2
$LN477@star_sqcur@2:

; 895  :                          ddfn -= co3*dddsf;

	fld	QWORD PTR __real@4000000000000000
	jmp	$LN36@star_sqcur@2
$LN941@star_sqcur@2:

; 809  :                 }
; 810  :               ddff *= 2;
; 811  :               switch ( variety )

	fstp	ST(0)

; 906  :               h += 0.75*ddAdv2dv1[k][i][ii]*hh0*hh0;

	fld	QWORD PTR _h$[ebp]
	jmp	SHORT $LN35@star_sqcur@2
$LN1044@star_sqcur@2:

; 905  :            if ( k == kk )

	fstp	ST(1)
$LN35@star_sqcur@2:

; 907  :                       break;
; 908  :                 }
; 909  :                 if ( !is_finite(h) )

	fld	QWORD PTR __real@fe37e43c8800759c
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN953@star_sqcur@2
	fld	QWORD PTR __real@7e37e43c8800759c
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN34@star_sqcur@2
$LN953@star_sqcur@2:

; 910  :                 { sprintf(errmsg,
; 911  :                     "Star sq curvature hessian infinite at vertex %s\n",
; 912  :                        ELNAME(v_info->id));

	mov	eax, DWORD PTR _v_info$GSCopy$[ebp]
	fstp	ST(0)
	mov	eax, DWORD PTR [eax]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN321@star_sqcur@2
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN322@star_sqcur@2
$LN321@star_sqcur@2:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN322@star_sqcur@2:
	push	eax
	push	OFFSET ??_C@_0DB@LNJPCKCN@Star?5sq?5curvature?5hessian?5infini@
	push	OFFSET _errmsg
	call	_sprintf

; 913  :                   kb_error(3619,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	3619					; 00000e23H
	call	_kb_error
	fld	QWORD PTR _h$[ebp]
	add	esp, 24					; 00000018H
$LN34@star_sqcur@2:

; 914  :                 }
; 915  :                 h21[i][ii] += h;

	mov	ecx, DWORD PTR _h21$89398[ebp]
	mov	edx, DWORD PTR [ecx+edi*4]
	fld	QWORD PTR [edx+esi*8]
	lea	eax, DWORD PTR [edx+esi*8]

; 916  :                 h01[i][ii] -= h;
; 917  :                 h20[i][ii] -= h;

	mov	edx, DWORD PTR _h20$89403[ebp]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR _h01$89404[ebp]
	mov	ecx, DWORD PTR [eax+edi*4]
	fld	QWORD PTR [ecx+esi*8]
	lea	eax, DWORD PTR [ecx+esi*8]

; 918  :                 h00[i][ii] += h;

	mov	ecx, DWORD PTR _h00$89400[ebp]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR [edx+edi*4]
	fld	QWORD PTR [eax+esi*8]
	mov	edx, DWORD PTR [ecx+edi*4]

; 919  : 
; 920  :                 /* 22 term */
; 921  :                 ddff = dot(dfdv2[k][i],dfdv2[kk][ii],eff_dim);

	mov	ecx, DWORD PTR _kk$[ebp]
	fsub	ST(0), ST(1)
	lea	eax, DWORD PTR [eax+esi*8]
	fstp	QWORD PTR [eax]
	lea	eax, DWORD PTR [edx+esi*8]
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR _eff_dim$[ebp]
	push	eax
	mov	eax, DWORD PTR _dfdv2$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR [edx+edi*4]
	push	ecx
	push	eax
	call	_dot
	add	esp, 12					; 0000000cH

; 922  :                 if ( k == kk )

	cmp	ebx, DWORD PTR _kk$[ebp]
	jne	$LN479@star_sqcur@2

; 923  :                 { ddff += (-co1*dAdv2[k][i]*dAdv2[k][ii] + co2*ddAdv2dv2[k][i][ii])
; 924  :                               *dssf;

	mov	edx, DWORD PTR _ddAdv2dv2$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR [edx+edi*4]
	fld	QWORD PTR [edx+esi*8]
	mov	ecx, DWORD PTR _dAdv2$[ebp]
	mov	eax, DWORD PTR [ecx+ebx*4]
	fld	QWORD PTR _co2$89381[ebp]
	fmul	ST(1), ST(0)
	fld	QWORD PTR _co1$89380[ebp]
	fmul	QWORD PTR [eax+edi*8]
	fmul	QWORD PTR [eax+esi*8]
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR _dssf$89383[ebp]
	faddp	ST(2), ST(0)

; 925  :                   ddff += co2*dAdv2[k][i]*ddssf2[ii];

	fld	ST(0)
	fmul	QWORD PTR [eax+edi*8]

; 926  :                   ddff += co2*dAdv2[kk][ii]*ddssf2[i];

	mov	eax, DWORD PTR _kk$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	fmul	QWORD PTR _ddssf2$89387[ebp+esi*8]
	faddp	ST(2), ST(0)
	fmul	QWORD PTR [ecx+esi*8]
	fmul	QWORD PTR _ddssf2$89387[ebp+edi*8]
	faddp	ST(1), ST(0)

; 927  :                   dddsf = ((i==ii) ? 4*s1f : 0. )
; 928  :                              - 2*s1[i]*dAdv[ii] - 2*s1[ii]*dAdv[i];

	cmp	edi, esi
	jne	SHORT $LN323@star_sqcur@2
	fld	QWORD PTR _s1f$89384[ebp]
	fmul	QWORD PTR __real@4010000000000000
	jmp	SHORT $LN324@star_sqcur@2
$LN323@star_sqcur@2:
	fldz
$LN324@star_sqcur@2:
	mov	eax, DWORD PTR _s1$[ebp]
	fld	QWORD PTR [eax+edi*8]
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR _dAdv$[ebp+esi*8]
	fsubp	ST(2), ST(0)
	fld	QWORD PTR [eax+esi*8]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR _dAdv$[ebp+edi*8]
	fsubp	ST(2), ST(0)

; 929  :                   ddff -= co3*dddsf;

	fxch	ST(1)
	fmul	QWORD PTR _co3$89382[ebp]
	fsubp	ST(2), ST(0)
	jmp	SHORT $LN32@star_sqcur@2
$LN479@star_sqcur@2:
	fld	QWORD PTR __real@4000000000000000
$LN32@star_sqcur@2:

; 930  :                 }
; 931  :               ddff *= 2;
; 932  :               switch ( variety )

	mov	eax, DWORD PTR _variety$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _ddff$89405[ebp]
	cmp	eax, 4
	ja	$LN966@star_sqcur@2
	jmp	DWORD PTR $LN1083@star_sqcur@2[eax*4]
$LN970@star_sqcur@2:

; 933  :               { case TEST_SQ:
; 934  :                       ddnn = 2*dot(dvnorm2[k][i],dvnorm2[kk][ii],eff_dim);

	mov	edx, DWORD PTR _eff_dim$[ebp]
	fstp	ST(1)
	mov	eax, DWORD PTR _dvnorm2$[ebp]
	fstp	ST(0)
	mov	ecx, DWORD PTR _kk$[ebp]
	push	edx
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR [edx+edi*4]
	push	ecx
	push	eax
	call	_dot
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	add	esp, 12					; 0000000cH

; 935  :                       h = ddnn;

	fxch	ST(1)
	fst	QWORD PTR _h$[ebp]

; 936  :                      break;

	jmp	$LN19@star_sqcur@2
$LN28@star_sqcur@2:

; 937  :                  case PLAIN_SQ:
; 938  :                      h = -aa75*dffdv2[k][i]*dAdv2[kk][ii]
; 939  :                          - aa75*dffdv2[kk][ii]*dAdv2[k][i]
; 940  :                          + ffaaa*dAdv2[k][i]*dAdv2[kk][ii]
; 941  :                          + a75*ddff;

	mov	edx, DWORD PTR _dAdv2$[ebp]
	mov	ecx, DWORD PTR [edx+ebx*4]
	mov	eax, DWORD PTR _kk$[ebp]
	fld	QWORD PTR [ecx+edi*8]
	fmul	QWORD PTR _ffaaa$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	lea	ecx, DWORD PTR [ecx+edi*8]
	lea	edx, DWORD PTR [edx+esi*8]
	fmul	QWORD PTR [edx]
	mov	DWORD PTR tv15279[ebp], edx
	mov	edx, DWORD PTR _dffdv2$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [edx+esi*8]
	fld	QWORD PTR _aa75$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _dffdv2$[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	fld	QWORD PTR [edx+edi*8]
	mov	ecx, DWORD PTR tv15279[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR [ecx]
	faddp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR _a75$[ebp]
	faddp	ST(1), ST(0)
	fst	QWORD PTR _h$[ebp]

; 942  :                      if ( k == kk )

	cmp	ebx, eax
	jne	$LN19@star_sqcur@2

; 943  :                         h -= ffaa*ddAdv2dv2[k][i][ii];

	mov	edx, DWORD PTR _ddAdv2dv2$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	mov	ecx, DWORD PTR [eax+edi*4]
	fld	QWORD PTR [ecx+esi*8]
	fmul	QWORD PTR _ffaa$[ebp]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _h$[ebp]

; 944  :                       break;

	jmp	$LN19@star_sqcur@2
$LN969@star_sqcur@2:

; 945  :                  case EFF_SQ:
; 946  :                       ddnn = 2*dot(dvnorm2[k][i],dvnorm2[kk][ii],eff_dim);

	mov	edx, DWORD PTR _eff_dim$[ebp]
	fstp	ST(1)
	mov	eax, DWORD PTR _dvnorm2$[ebp]
	fstp	ST(0)
	mov	ecx, DWORD PTR _kk$[ebp]
	push	edx
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR [edx+edi*4]
	push	ecx
	push	eax
	call	_dot
	fld	QWORD PTR __real@4000000000000000

; 947  :                       h = an75*ddff
; 948  :                          - ann75*dffdv2[k][i]*dnndv2[kk][ii]
; 949  :                          - ann75*dffdv2[kk][ii]*dnndv2[k][i]
; 950  :                          + fnnna*dnndv2[k][i]*dnndv2[kk][ii]
; 951  :                          - fnna*ddnn
; 952  :                          + fn75*dffdv2[k][i]*dAdv2[kk][ii]
; 953  :                          + fn75*dffdv2[kk][ii]*dAdv2[k][i]
; 954  :                          - fnn75*dAdv2[kk][ii]*dnndv2[k][i]
; 955  :                          - fnn75*dnndv2[kk][ii]*dAdv2[k][i];

	mov	edx, DWORD PTR _dffdv2$[ebp]
	fmul	ST(1), ST(0)
	mov	ecx, DWORD PTR [edx+ebx*4]
	fld	QWORD PTR _ddff$89405[ebp]
	fmul	QWORD PTR _an75$[ebp]
	lea	eax, DWORD PTR [ecx+edi*8]
	mov	ecx, DWORD PTR _kk$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	lea	edx, DWORD PTR [edx+esi*8]
	mov	DWORD PTR tv15306[ebp], edx
	mov	edx, DWORD PTR _dnndv2$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	lea	edx, DWORD PTR [edx+edi*8]
	mov	DWORD PTR tv15312[ebp], edx
	mov	edx, DWORD PTR _dAdv2$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	lea	edx, DWORD PTR [edx+esi*8]
	mov	DWORD PTR tv15324[ebp], edx
	mov	edx, DWORD PTR _dAdv2$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	lea	edx, DWORD PTR [edx+edi*8]
	mov	DWORD PTR tv15332[ebp], edx
	mov	DWORD PTR tv15293[ebp], eax
	mov	edx, eax
	fld	QWORD PTR [edx]
	mov	eax, DWORD PTR _dnndv2$[ebp]
	fld	QWORD PTR _ann75$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	fmul	ST(1), ST(0)
	mov	edx, DWORD PTR tv15306[ebp]
	fxch	ST(1)
	lea	eax, DWORD PTR [eax+esi*8]
	add	esp, 12					; 0000000cH
	fmul	QWORD PTR [eax]
	fsubp	ST(2), ST(0)
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv15312[ebp]
	fmul	QWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _fnnna$[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv15293[ebp]
	fmul	QWORD PTR [eax]
	faddp	ST(1), ST(0)
	fxch	ST(2)
	fmul	QWORD PTR _fnna$[ebp]
	fsubp	ST(2), ST(0)
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR tv15324[ebp]
	fld	QWORD PTR _fn75$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv15306[ebp]
	faddp	ST(3), ST(0)
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv15332[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv15324[ebp]
	faddp	ST(2), ST(0)
	fld	QWORD PTR _fnn75$[ebp]
	fld	ST(0)
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv15312[ebp]
	fmul	QWORD PTR [edx]
	fsubp	ST(3), ST(0)
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv15332[ebp]
	fmul	QWORD PTR [eax]
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _h$[ebp]

; 956  :                       if ( k == kk )

	cmp	ebx, ecx
	jne	$LN19@star_sqcur@2

; 957  :                          h += ffn75*ddAdv2dv2[k][i][ii];

	mov	ecx, DWORD PTR _ddAdv2dv2$[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	mov	eax, DWORD PTR [edx+edi*4]
	fld	QWORD PTR [eax+esi*8]
	fmul	QWORD PTR _ffn75$[ebp]
	faddp	ST(1), ST(0)
	fst	QWORD PTR _h$[ebp]

; 958  :                       break;

	jmp	$LN19@star_sqcur@2
$LN968@star_sqcur@2:

; 959  :                  case NORMAL_SQ:
; 960  :                       ddfn = dot(dfdv2[k][i],dvnorm2[kk][ii],eff_dim)
; 961  :                               + dot(dvnorm2[k][i],dfdv2[kk][ii],eff_dim);

	mov	ecx, DWORD PTR _eff_dim$[ebp]
	fstp	ST(1)
	mov	edx, DWORD PTR _dvnorm2$[ebp]
	fstp	ST(0)
	mov	eax, DWORD PTR _kk$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR _dfdv2$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	push	edx
	mov	edx, DWORD PTR [ecx+edi*4]
	push	edx
	call	_dot
	fstp	QWORD PTR tv27337[ebp]
	mov	eax, DWORD PTR _eff_dim$[ebp]
	mov	ecx, DWORD PTR _dfdv2$[ebp]
	mov	edx, DWORD PTR _kk$[ebp]
	push	eax
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [eax+esi*4]
	mov	edx, DWORD PTR _dvnorm2$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	push	ecx
	mov	ecx, DWORD PTR [eax+edi*4]
	push	ecx
	call	_dot
	fadd	QWORD PTR tv27337[ebp]
	add	esp, 24					; 00000018H
	fst	QWORD PTR _ddfn$89408[ebp]

; 962  :                       if ( k == kk )

	cmp	ebx, DWORD PTR _kk$[ebp]
	jne	$LN480@star_sqcur@2

; 963  :                       {
; 964  :                          ddfn += (-co1*dAdv2[k][i]*dAdv2[k][ii]
; 965  :                                      + co2*ddAdv2dv2[k][i][ii])
; 966  :                                      *(dot(ds1[k],vnorm,eff_dim)+dot(ds2[k],vnorm,eff_dim));

	mov	edx, DWORD PTR _dAdv2$[ebp]
	fstp	ST(0)
	mov	eax, DWORD PTR [edx+ebx*4]
	mov	ecx, DWORD PTR _eff_dim$[ebp]
	push	ecx
	mov	DWORD PTR tv15349[ebp], eax
	mov	eax, DWORD PTR _ds2$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	lea	edx, DWORD PTR _vnorm$[ebp]
	push	edx
	push	ecx
	call	_dot
	fstp	QWORD PTR tv27340[ebp]
	mov	edx, DWORD PTR _eff_dim$[ebp]
	mov	ecx, DWORD PTR _ds1$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+ebx*4]
	lea	eax, DWORD PTR _vnorm$[ebp]
	push	eax
	push	edx
	call	_dot
	fadd	QWORD PTR tv27340[ebp]
	mov	eax, DWORD PTR _ddAdv2dv2$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	mov	edx, DWORD PTR [ecx+edi*4]
	fld	QWORD PTR [edx+esi*8]
	mov	eax, DWORD PTR tv15349[ebp]
	fmul	QWORD PTR _co2$89381[ebp]

; 967  :                          ddfn += co2*dAdv2[k][i]*
; 968  :                           (dot(ddss21[kk][ii],vnorm,eff_dim)
; 969  :                               +dot(ddss22[kk][ii],vnorm,eff_dim));

	mov	edx, DWORD PTR _ddss22$[ebp]
	fld	QWORD PTR [eax+edi*8]
	lea	ecx, DWORD PTR _vnorm$[ebp]
	fmul	QWORD PTR _co1$89380[ebp]
	fmul	QWORD PTR [eax+esi*8]
	mov	eax, DWORD PTR _eff_dim$[ebp]
	push	eax
	mov	eax, DWORD PTR _kk$[ebp]
	fsubp	ST(1), ST(0)
	push	ecx
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+esi*4]
	fmulp	ST(1), ST(0)
	push	edx
	fadd	QWORD PTR _ddfn$89408[ebp]
	fstp	QWORD PTR _ddfn$89408[ebp]
	call	_dot
	mov	eax, DWORD PTR _eff_dim$[ebp]
	fstp	QWORD PTR tv27342[ebp]
	mov	edx, DWORD PTR _ddss21$[ebp]
	push	eax
	mov	eax, DWORD PTR _kk$[ebp]
	lea	ecx, DWORD PTR _vnorm$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+esi*4]
	push	edx
	call	_dot
	fadd	QWORD PTR tv27342[ebp]
	mov	eax, DWORD PTR _dAdv2$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	fld	QWORD PTR [ecx+edi*8]

; 970  :                          ddfn += co2*dAdv2[kk][ii]*
; 971  :                             (dot(ddss21[k][i],vnorm,eff_dim)
; 972  :                               +dot(ddss22[k][i],vnorm,eff_dim));

	mov	edx, DWORD PTR _eff_dim$[ebp]
	fmul	QWORD PTR _co2$89381[ebp]
	mov	ecx, DWORD PTR _ddss22$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+ebx*4]
	fmulp	ST(1), ST(0)
	lea	eax, DWORD PTR _vnorm$[ebp]
	push	eax
	mov	eax, DWORD PTR [edx+edi*4]
	fadd	QWORD PTR _ddfn$89408[ebp]
	push	eax
	fstp	QWORD PTR _ddfn$89408[ebp]
	call	_dot
	mov	ecx, DWORD PTR _eff_dim$[ebp]
	fstp	QWORD PTR tv27344[ebp]
	mov	eax, DWORD PTR _ddss21$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [eax+ebx*4]
	lea	edx, DWORD PTR _vnorm$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+edi*4]
	push	edx
	call	_dot
	fadd	QWORD PTR tv27344[ebp]
	mov	eax, DWORD PTR _dAdv2$[ebp]
	mov	ecx, DWORD PTR _kk$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	fld	QWORD PTR [edx+esi*8]
	add	esp, 72					; 00000048H
	fmul	QWORD PTR _co2$89381[ebp]
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR _ddfn$89408[ebp]
	fstp	QWORD PTR _ddfn$89408[ebp]

; 973  :                          dddsf = ((i==ii) ? 4*dot(s1,vnorm,eff_dim) : 0. )
; 974  :                                     - 2*s1[i]*vnorm[ii] - 2*s1[ii]*vnorm[i];

	cmp	edi, esi
	jne	SHORT $LN325@star_sqcur@2
	mov	eax, DWORD PTR _eff_dim$[ebp]
	mov	edx, DWORD PTR _s1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vnorm$[ebp]
	push	ecx
	push	edx
	call	_dot
	fmul	QWORD PTR __real@4010000000000000
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN326@star_sqcur@2
$LN325@star_sqcur@2:
	fldz
$LN326@star_sqcur@2:
	mov	eax, DWORD PTR _s1$[ebp]
	fld	QWORD PTR [eax+edi*8]
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR _vnorm$[ebp+esi*8]
	fsubp	ST(2), ST(0)
	fld	QWORD PTR [eax+esi*8]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR _vnorm$[ebp+edi*8]
	fsubp	ST(2), ST(0)

; 975  :                          ddfn -= co3*dddsf;

	fxch	ST(1)
	fmul	QWORD PTR _co3$89382[ebp]
	fsubr	QWORD PTR _ddfn$89408[ebp]
	fxch	ST(1)
$LN23@star_sqcur@2:

; 976  :                       }
; 977  :                       h  = afnfn*dffdv2[k][i]*dffdv2[kk][ii]
; 978  :                           + afffnfn*ddff
; 979  :                           - ffafnfnfn*dffdv2[k][i]*dfndv2[kk][ii]
; 980  :                           + fffnfn*dffdv2[k][i]*dAdv2[kk][ii]
; 981  :                           - ffafnfnfn*dfndv2[k][i]*dffdv2[kk][ii]
; 982  :                           + afffffnfnfnfn*dfndv2[k][i]*dfndv2[kk][ii]
; 983  :                           - fffffnfnfna*ddfn
; 984  :                           - fffffnfnfn*dfndv2[k][i]*dAdv2[kk][ii]
; 985  :                           + fffnfn*dAdv2[k][i]*dffdv2[kk][ii]
; 986  :                           - fffffnfnfn*dAdv2[k][i]*dfndv2[kk][ii];

	mov	edx, DWORD PTR _dffdv2$[ebp]
	fld	QWORD PTR _afnfn$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	fmul	QWORD PTR [eax+edi*8]
	lea	ecx, DWORD PTR [eax+edi*8]
	mov	eax, DWORD PTR _kk$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	lea	edx, DWORD PTR [edx+esi*8]
	mov	DWORD PTR tv15386[ebp], edx
	mov	edx, DWORD PTR _dfndv2$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	lea	edx, DWORD PTR [edx+esi*8]
	mov	DWORD PTR tv15394[ebp], edx
	mov	edx, DWORD PTR _dAdv2$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	lea	edx, DWORD PTR [edx+esi*8]
	mov	DWORD PTR tv15402[ebp], edx
	mov	edx, DWORD PTR _dfndv2$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	lea	edx, DWORD PTR [edx+edi*8]
	mov	DWORD PTR tv15409[ebp], edx
	mov	edx, DWORD PTR _dAdv2$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	lea	edx, DWORD PTR [edx+edi*8]
	mov	DWORD PTR tv15424[ebp], edx
	mov	edx, DWORD PTR tv15386[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv15394[ebp]
	fld	QWORD PTR _ddff$89405[ebp]
	fmul	QWORD PTR _afffnfn$[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ffafnfnfn$[ebp]
	fld	ST(0)
	fmul	QWORD PTR [ecx]
	fmul	QWORD PTR [edx]
	fsubp	ST(2), ST(0)
	fld	QWORD PTR _fffnfn$[ebp]
	fld	ST(0)
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv15402[ebp]
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv15409[ebp]
	faddp	ST(3), ST(0)
	fld	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv15386[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv15409[ebp]
	fsubp	ST(2), ST(0)
	fld	QWORD PTR [ecx]
	fmul	QWORD PTR _afffffnfnfnfn$[ebp]
	fmul	QWORD PTR [edx]
	faddp	ST(2), ST(0)
	fxch	ST(3)
	fmul	QWORD PTR _fffffnfnfna$[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv15402[ebp]
	fld	QWORD PTR _fffffnfnfn$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv15424[ebp]
	fsubp	ST(2), ST(0)
	fxch	ST(3)
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv15386[ebp]
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv15424[ebp]
	faddp	ST(1), ST(0)
	fxch	ST(2)
	fmul	QWORD PTR [ecx]
	fmul	QWORD PTR [edx]
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _h$[ebp]

; 987  :                       if ( k == kk ) 

	cmp	ebx, eax
	jne	$LN19@star_sqcur@2

; 988  :                          h += fffffnfn*ddAdv2dv2[k][i][ii];

	mov	edx, DWORD PTR _ddAdv2dv2$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	mov	ecx, DWORD PTR [eax+edi*4]
	fld	QWORD PTR [ecx+esi*8]
	fmul	QWORD PTR _fffffnfn$[ebp]
	faddp	ST(1), ST(0)
	fst	QWORD PTR _h$[ebp]

; 989  :                       break;

	jmp	$LN19@star_sqcur@2
$LN480@star_sqcur@2:

; 975  :                          ddfn -= co3*dddsf;

	fld	QWORD PTR __real@4000000000000000
	jmp	$LN23@star_sqcur@2
$LN967@star_sqcur@2:

; 990  :                    case PERP_SQ:
; 991  :                       ddnn = 2*dot(dvnorm2[k][i],dvnorm2[kk][ii],eff_dim);

	mov	edx, DWORD PTR _eff_dim$[ebp]
	fstp	ST(1)
	mov	eax, DWORD PTR _dvnorm2$[ebp]
	fstp	ST(0)
	mov	ecx, DWORD PTR _kk$[ebp]
	push	edx
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR [edx+edi*4]
	push	ecx
	push	eax
	call	_dot
	fadd	ST(0), ST(0)

; 992  :                       ddfn = dot(dfdv2[k][i],dvnorm2[kk][ii],eff_dim)
; 993  :                               + dot(dvnorm2[k][i],dfdv2[kk][ii],eff_dim);

	mov	ecx, DWORD PTR _eff_dim$[ebp]
	mov	edx, DWORD PTR _dvnorm2$[ebp]
	mov	eax, DWORD PTR _kk$[ebp]
	fstp	QWORD PTR _ddnn$89407[ebp]
	push	ecx
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	eax, DWORD PTR _dfdv2$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	push	edx
	mov	edx, DWORD PTR [ecx+edi*4]
	push	edx
	call	_dot
	fstp	QWORD PTR tv27346[ebp]
	mov	eax, DWORD PTR _eff_dim$[ebp]
	mov	ecx, DWORD PTR _dfdv2$[ebp]
	mov	edx, DWORD PTR _kk$[ebp]
	push	eax
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [eax+esi*4]
	mov	edx, DWORD PTR _dvnorm2$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	push	ecx
	mov	ecx, DWORD PTR [eax+edi*4]
	push	ecx
	call	_dot
	fadd	QWORD PTR tv27346[ebp]
	add	esp, 36					; 00000024H
	fstp	QWORD PTR _ddfn$89408[ebp]

; 994  :                       if ( k == kk )

	cmp	ebx, DWORD PTR _kk$[ebp]
	jne	$LN481@star_sqcur@2

; 995  :                       {
; 996  :                          ddfn += (-co1*dAdv2[k][i]*dAdv2[k][ii]
; 997  :                                      + co2*ddAdv2dv2[k][i][ii])
; 998  :                                      *(dot(ds1[k],vnorm,eff_dim)+dot(ds2[k],vnorm,eff_dim));

	mov	edx, DWORD PTR _dAdv2$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	mov	ecx, DWORD PTR _eff_dim$[ebp]
	push	ecx
	mov	DWORD PTR tv15440[ebp], eax
	mov	eax, DWORD PTR _ds2$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	lea	edx, DWORD PTR _vnorm$[ebp]
	push	edx
	push	ecx
	call	_dot
	fstp	QWORD PTR tv27348[ebp]
	mov	edx, DWORD PTR _eff_dim$[ebp]
	mov	ecx, DWORD PTR _ds1$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+ebx*4]
	lea	eax, DWORD PTR _vnorm$[ebp]
	push	eax
	push	edx
	call	_dot
	fadd	QWORD PTR tv27348[ebp]
	mov	eax, DWORD PTR _ddAdv2dv2$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	mov	edx, DWORD PTR [ecx+edi*4]
	fld	QWORD PTR [edx+esi*8]
	mov	eax, DWORD PTR tv15440[ebp]
	fmul	QWORD PTR _co2$89381[ebp]

; 999  :                          ddfn += co2*dAdv2[k][i]*
; 1000 :                           (dot(ddss21[kk][ii],vnorm,eff_dim)
; 1001 :                               +dot(ddss22[kk][ii],vnorm,eff_dim));

	mov	edx, DWORD PTR _ddss22$[ebp]
	fld	QWORD PTR [eax+edi*8]
	lea	ecx, DWORD PTR _vnorm$[ebp]
	fmul	QWORD PTR _co1$89380[ebp]
	fmul	QWORD PTR [eax+esi*8]
	mov	eax, DWORD PTR _eff_dim$[ebp]
	push	eax
	mov	eax, DWORD PTR _kk$[ebp]
	fsubp	ST(1), ST(0)
	push	ecx
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+esi*4]
	fmulp	ST(1), ST(0)
	push	edx
	fadd	QWORD PTR _ddfn$89408[ebp]
	fstp	QWORD PTR _ddfn$89408[ebp]
	call	_dot
	mov	eax, DWORD PTR _eff_dim$[ebp]
	fstp	QWORD PTR tv27350[ebp]
	mov	edx, DWORD PTR _ddss21$[ebp]
	push	eax
	mov	eax, DWORD PTR _kk$[ebp]
	lea	ecx, DWORD PTR _vnorm$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+esi*4]
	push	edx
	call	_dot
	fadd	QWORD PTR tv27350[ebp]
	mov	eax, DWORD PTR _dAdv2$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	fld	QWORD PTR [ecx+edi*8]

; 1002 :                          ddfn += co2*dAdv2[kk][ii]*
; 1003 :                             (dot(ddss21[k][i],vnorm,eff_dim)
; 1004 :                               +dot(ddss22[k][i],vnorm,eff_dim));

	mov	edx, DWORD PTR _eff_dim$[ebp]
	fmul	QWORD PTR _co2$89381[ebp]
	mov	ecx, DWORD PTR _ddss22$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+ebx*4]
	fmulp	ST(1), ST(0)
	lea	eax, DWORD PTR _vnorm$[ebp]
	push	eax
	mov	eax, DWORD PTR [edx+edi*4]
	fadd	QWORD PTR _ddfn$89408[ebp]
	push	eax
	fstp	QWORD PTR _ddfn$89408[ebp]
	call	_dot
	mov	ecx, DWORD PTR _eff_dim$[ebp]
	fstp	QWORD PTR tv27352[ebp]
	mov	eax, DWORD PTR _ddss21$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [eax+ebx*4]
	lea	edx, DWORD PTR _vnorm$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+edi*4]
	push	edx
	call	_dot
	fadd	QWORD PTR tv27352[ebp]
	mov	eax, DWORD PTR _dAdv2$[ebp]
	mov	ecx, DWORD PTR _kk$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	fld	QWORD PTR [edx+esi*8]
	add	esp, 72					; 00000048H
	fmul	QWORD PTR _co2$89381[ebp]
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR _ddfn$89408[ebp]
	fstp	QWORD PTR _ddfn$89408[ebp]

; 1005 :                          dddsf = ((i==ii) ? 4*dot(s1,vnorm,eff_dim) : 0. )
; 1006 :                                     - 2*s1[i]*vnorm[ii] - 2*s1[ii]*vnorm[i];

	cmp	edi, esi
	jne	SHORT $LN327@star_sqcur@2
	mov	eax, DWORD PTR _eff_dim$[ebp]
	mov	edx, DWORD PTR _s1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vnorm$[ebp]
	push	ecx
	push	edx
	call	_dot
	fmul	QWORD PTR __real@4010000000000000
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN328@star_sqcur@2
$LN327@star_sqcur@2:
	fldz
$LN328@star_sqcur@2:
	mov	eax, DWORD PTR _s1$[ebp]
	fld	QWORD PTR [eax+edi*8]
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR _vnorm$[ebp+esi*8]
	fsubp	ST(2), ST(0)
	fld	QWORD PTR [eax+esi*8]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR _vnorm$[ebp+edi*8]
	fsubp	ST(2), ST(0)

; 1007 :                          ddfn -= co3*dddsf;

	fxch	ST(1)
	fmul	QWORD PTR _co3$89382[ebp]
	fsubr	QWORD PTR _ddfn$89408[ebp]
	fstp	QWORD PTR _ddfn$89408[ebp]
	jmp	SHORT $LN20@star_sqcur@2
$LN481@star_sqcur@2:
	fld	QWORD PTR __real@4000000000000000
$LN20@star_sqcur@2:

; 1008 :                       }
; 1009 :            h = 1.5*hh0*dAdv2[k][i]*(dfndv2[kk][ii]/nn-fn/nn/nn*dnndv2[kk][ii])
; 1010 :              + 1.5*hh0*dAdv2[kk][ii]*(dfndv2[k][i]/nn-fn/nn/nn*dnndv2[k][i])
; 1011 :              + 1.5*area*(dfndv2[k][i]/nn-fn/nn/nn*dnndv2[k][i])*
; 1012 :                            (dfndv2[kk][ii]/nn-fn/nn/nn*dnndv2[kk][ii])
; 1013 :              + 1.5*area*hh0*(ddfn/nn - dfndv2[k][i]*dnndv2[kk][ii]/nn/nn
; 1014 :                     - dfndv2[kk][ii]*dnndv2[k][i]/nn/nn
; 1015 :                     +2*fn*dnndv2[k][i]*dnndv2[kk][ii]/nn/nn/nn
; 1016 :                      - fn*ddnn/nn/nn);

	fld	QWORD PTR _fn$[ebp]
	mov	eax, DWORD PTR _kk$[ebp]
	fld	ST(0)
	mov	ecx, DWORD PTR _dfndv2$[ebp]
	fld	QWORD PTR _nn$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	fdiv	ST(1), ST(0)
	lea	edx, DWORD PTR [edx+esi*8]
	mov	ecx, DWORD PTR _dnndv2$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv15469[ebp], edx
	lea	ecx, DWORD PTR [ecx+esi*8]
	fdiv	ST(1), ST(0)
	fld	QWORD PTR [edx]
	fdiv	ST(0), ST(1)
	mov	edx, DWORD PTR _dfndv2$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	lea	edx, DWORD PTR [edx+edi*8]
	mov	DWORD PTR tv15484[ebp], edx
	mov	edx, DWORD PTR _dnndv2$[ebp]
	mov	edx, DWORD PTR [edx+ebx*4]
	lea	edx, DWORD PTR [edx+edi*8]
	mov	DWORD PTR tv15490[ebp], edx
	mov	edx, DWORD PTR tv15484[ebp]
	fld	QWORD PTR [ecx]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _hh0$[ebp]
	fmul	QWORD PTR __real@3ff8000000000000
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR tv15490[ebp]
	fdiv	ST(0), ST(3)
	fld	QWORD PTR [edx]
	fmulp	ST(5), ST(0)
	mov	edx, DWORD PTR tv15484[ebp]
	fsubrp	ST(4), ST(0)
	fld	QWORD PTR _area$[ebp]
	fmul	QWORD PTR __real@3ff8000000000000
	fstp	QWORD PTR tv13634[ebp]
	fld	QWORD PTR _ddfn$89408[ebp]
	fdiv	ST(0), ST(3)
	fld	QWORD PTR [ecx]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv15490[ebp]
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR tv15469[ebp]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR tv15490[ebp]
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	ST(5)
	fmul	ST(0), ST(7)
	fmul	QWORD PTR [edx]
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _dAdv2$[ebp]
	mov	edx, DWORD PTR [ecx+ebx*4]
	mov	ecx, DWORD PTR [ecx+eax*4]
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddnn$89407[ebp]
	fmulp	ST(6), ST(0)
	fxch	ST(5)
	fdiv	ST(0), ST(3)
	fdivrp	ST(3), ST(0)
	fxch	ST(4)
	fsubrp	ST(2), ST(0)
	fld	QWORD PTR tv13634[ebp]
	fld	QWORD PTR _hh0$[ebp]
	fmul	ST(0), ST(1)
	fmulp	ST(3), ST(0)
	fld	QWORD PTR [edx+edi*8]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(2)
	fld	QWORD PTR [ecx+esi*8]
	fmulp	ST(6), ST(0)
	fxch	ST(5)
	fmul	ST(0), ST(4)
	faddp	ST(5), ST(0)
	fmulp	ST(3), ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fst	QWORD PTR _h$[ebp]

; 1017 :            if ( k == kk )

	cmp	ebx, eax
	jne	SHORT $LN19@star_sqcur@2

; 1018 :               h += 0.75*ddAdv2dv2[k][i][ii]*hh0*hh0;

	mov	edx, DWORD PTR _ddAdv2dv2$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	mov	ecx, DWORD PTR [eax+edi*4]
	fld	QWORD PTR [ecx+esi*8]
	fmul	QWORD PTR __real@3fe8000000000000
	fld	QWORD PTR _hh0$[ebp]
	fmul	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fst	QWORD PTR _h$[ebp]
	jmp	SHORT $LN19@star_sqcur@2
$LN966@star_sqcur@2:

; 930  :                 }
; 931  :               ddff *= 2;
; 932  :               switch ( variety )

	fstp	ST(0)

; 1018 :               h += 0.75*ddAdv2dv2[k][i][ii]*hh0*hh0;

	fld	QWORD PTR _h$[ebp]
$LN19@star_sqcur@2:

; 1019 :                       break;
; 1020 :                 }
; 1021 :                 if ( !is_finite(h) )

	fld	QWORD PTR __real@fe37e43c8800759c
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN978@star_sqcur@2
	fld	QWORD PTR __real@7e37e43c8800759c
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN18@star_sqcur@2
$LN978@star_sqcur@2:

; 1022 :                 { sprintf(errmsg,
; 1023 :                     "Star sq curvature hessian infinite at vertex %s\n",
; 1024 :                        ELNAME(v_info->id));

	mov	edx, DWORD PTR _v_info$GSCopy$[ebp]
	fstp	ST(0)
	mov	eax, DWORD PTR [edx]
	fstp	ST(0)
	test	eax, 268435456				; 10000000H
	je	SHORT $LN329@star_sqcur@2
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN330@star_sqcur@2
$LN329@star_sqcur@2:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN330@star_sqcur@2:
	push	eax
	push	OFFSET ??_C@_0DB@LNJPCKCN@Star?5sq?5curvature?5hessian?5infini@
	push	OFFSET _errmsg
	call	_sprintf

; 1025 :                   kb_error(3620,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	3620					; 00000e24H
	call	_kb_error
	fld	QWORD PTR __real@4000000000000000
	fld	QWORD PTR _h$[ebp]
	add	esp, 24					; 00000018H
$LN18@star_sqcur@2:

; 1026 :                 } 
; 1027 :                 h22[i][ii] += h;

	mov	eax, DWORD PTR _h22$89399[ebp]
	mov	ecx, DWORD PTR [eax+edi*4]
	fld	QWORD PTR [ecx+esi*8]

; 1028 :                 h02[i][ii] -= h;

	mov	edx, DWORD PTR _h02$89402[ebp]
	lea	eax, DWORD PTR [ecx+esi*8]
	fadd	ST(0), ST(1)

; 1029 :                 h20[i][ii] -= h;

	mov	ecx, DWORD PTR _h20$89403[ebp]
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR [edx+edi*4]
	fld	QWORD PTR [eax+esi*8]
	mov	edx, DWORD PTR [ecx+edi*4]
	lea	eax, DWORD PTR [eax+esi*8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [eax]
	lea	eax, DWORD PTR [edx+esi*8]
	fld	QWORD PTR [eax]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [eax]

; 1030 :                 h00[i][ii] += h;

	mov	eax, DWORD PTR _h00$89400[ebp]
	mov	ecx, DWORD PTR [eax+edi*4]
	fadd	QWORD PTR [ecx+esi*8]
	lea	eax, DWORD PTR [ecx+esi*8]
	inc	esi
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR _eff_dim$[ebp]
	cmp	esi, eax
	jl	$LL981@star_sqcur@2

; 558  :         REAL ddff,dddsf,ddnn,ddfn;
; 559  : 
; 560  :         for ( i = 0 ; i < eff_dim ; i++ )

	inc	edi
	cmp	edi, eax
	jl	$LN983@star_sqcur@2
$LN98@star_sqcur@2:

; 545  : 
; 546  :       for ( kk = 0 ; kk < pairs ; kk++ )

	mov	eax, DWORD PTR tv14057[ebp]
	mov	DWORD PTR _kk$[ebp], eax
	cmp	eax, DWORD PTR _pairs$[ebp]
	jl	$LN99@star_sqcur@2

; 524  :     }
; 525  : 
; 526  : 
; 527  :     for ( k = 0 ; k < pairs ; k++ ) 

	mov	ebx, DWORD PTR tv12453[ebp]
	cmp	ebx, DWORD PTR _pairs$[ebp]
	jl	$LN871@star_sqcur@2
$LN103@star_sqcur@2:

; 1031 : 
; 1032 :              } /* end for i, ii */
; 1033 :         } /* end for kk */
; 1034 :      } /* end for k */
; 1035 : 
; 1036 :     if ( get_vattr(v_info->id) & AXIAL_POINT )

	mov	edx, DWORD PTR _v_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 8388608				; 00800000H
	xor	ecx, ecx
	or	eax, ecx
	je	$LN728@star_sqcur@2

; 1037 :     { REAL fudge = 1./rotorder;
; 1038 :       if ( sym_flags & DOUBLE_AXIAL ) fudge *= 2;

	test	BYTE PTR _sym_flags, 4
	fild	DWORD PTR _rotorder
	fld1
	fdivrp	ST(1), ST(0)
	je	SHORT $LN725@star_sqcur@2
	fmulp	ST(1), ST(0)
	jmp	SHORT $LN15@star_sqcur@2
$LN725@star_sqcur@2:
	fstp	ST(1)
$LN15@star_sqcur@2:

; 1039 :       fudge *= rotorder/v_info->axial_order;

	mov	eax, DWORD PTR _rotorder
	mov	ecx, DWORD PTR _v_info$GSCopy$[ebp]
	cdq
	idiv	DWORD PTR [ecx+1344]

; 1040 :       for ( i = 0 ; i < v_info->vcount ; i++ )

	xor	edi, edi
	mov	DWORD PTR tv27361[ebp], eax
	fild	DWORD PTR tv27361[ebp]
	mov	eax, DWORD PTR [ecx+12]
	fmulp	ST(1), ST(0)
	test	eax, eax
	jle	$LN728@star_sqcur@2
	mov	ebx, DWORD PTR _eff_dim$[ebp]
	mov	esi, ecx
$LN14@star_sqcur@2:

; 1041 :         for ( ii = 0 ; ii < v_info->vcount ; ii++ )

	xor	edx, edx
	test	eax, eax
	jle	$LN13@star_sqcur@2
$LN527@star_sqcur@2:

; 1042 :          for ( k = 0 ; k < eff_dim ; k++ )

	xor	ecx, ecx
	test	ebx, ebx
	jle	$LN10@star_sqcur@2
$LN8@star_sqcur@2:

; 1043 :           for ( kk = 0 ; kk < eff_dim ; kk++ )

	xor	eax, eax
	cmp	ebx, 4
	jl	$LC454@star_sqcur@2
$LN455@star_sqcur@2:

; 1044 :              v_info->hess[i][ii][k][kk] *= fudge;

	mov	ebx, DWORD PTR [esi+1340]
	fld	ST(0)
	mov	ebx, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR [ebx+edx*4]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fmul	QWORD PTR [ebx+eax*8]
	lea	ebx, DWORD PTR [ebx+eax*8]
	fstp	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [esi+1340]
	mov	ebx, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR [ebx+edx*4]
	fld	ST(0)
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fmul	QWORD PTR [ebx+eax*8+8]
	lea	ebx, DWORD PTR [ebx+eax*8+8]
	fstp	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [esi+1340]
	mov	ebx, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR [ebx+edx*4]
	fld	ST(0)
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fmul	QWORD PTR [ebx+eax*8+16]
	lea	ebx, DWORD PTR [ebx+eax*8+16]
	fstp	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [esi+1340]
	mov	ebx, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR [ebx+edx*4]
	fld	ST(0)
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fmul	QWORD PTR [ebx+eax*8+24]
	lea	ebx, DWORD PTR [ebx+eax*8+24]
	add	eax, 4
	fstp	QWORD PTR [ebx]
	mov	ebx, DWORD PTR _eff_dim$[ebp]
	add	ebx, -3					; fffffffdH
	cmp	eax, ebx
	jl	SHORT $LN455@star_sqcur@2
	mov	ebx, DWORD PTR _eff_dim$[ebp]
$LC454@star_sqcur@2:

; 1043 :           for ( kk = 0 ; kk < eff_dim ; kk++ )

	cmp	eax, ebx
	jge	SHORT $LN7@star_sqcur@2
$LC5@star_sqcur@2:
	mov	ebx, DWORD PTR [esi+1340]

; 1044 :              v_info->hess[i][ii][k][kk] *= fudge;

	fld	ST(0)
	mov	ebx, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR [ebx+edx*4]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fmul	QWORD PTR [ebx+eax*8]
	lea	ebx, DWORD PTR [ebx+eax*8]
	inc	eax
	fstp	QWORD PTR [ebx]
	mov	ebx, DWORD PTR _eff_dim$[ebp]
	cmp	eax, ebx
	jl	SHORT $LC5@star_sqcur@2
$LN7@star_sqcur@2:

; 1042 :          for ( k = 0 ; k < eff_dim ; k++ )

	inc	ecx
	cmp	ecx, ebx
	jl	$LN8@star_sqcur@2
$LN10@star_sqcur@2:

; 1041 :         for ( ii = 0 ; ii < v_info->vcount ; ii++ )

	inc	edx
	cmp	edx, DWORD PTR [esi+12]
	jl	$LN527@star_sqcur@2
$LN13@star_sqcur@2:

; 1040 :       for ( i = 0 ; i < v_info->vcount ; i++ )

	mov	eax, DWORD PTR [esi+12]
	inc	edi
	cmp	edi, eax
	jl	$LN14@star_sqcur@2
	mov	ebx, esi
	jmp	SHORT $LN1077@star_sqcur@2
$LN686@star_sqcur@2:

; 472  :     }
; 473  :     if ( mode == METHOD_GRADIENT ) goto all_exit;

	fstp	ST(5)
	fstp	ST(1)
	fstp	ST(1)
	fstp	ST(2)
	fstp	ST(1)
$LN728@star_sqcur@2:

; 1040 :       for ( i = 0 ; i < v_info->vcount ; i++ )

	mov	ebx, DWORD PTR _v_info$GSCopy$[ebp]
$LN1077@star_sqcur@2:
	mov	esi, DWORD PTR _ddss11$[ebp]
	fstp	ST(0)
$all_exit$89257:

; 1045 :     }
; 1046 : 
; 1047 : all_exit:
; 1048 : 
; 1049 :   if ( v_info->vcount > MAXV )

	cmp	DWORD PTR [ebx+12], 20			; 00000014H
	jle	SHORT $LN484@star_sqcur@2

; 1050 :   { myfree((char*)a);

	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	call	_myfree

; 1051 :     free_matrix(ds1);

	mov	eax, DWORD PTR _ds1$[ebp]
	push	eax
	call	_free_matrix
	add	esp, 8

; 1052 :     if ( mode != METHOD_VALUE ) free_matrix3(ddss11);

	cmp	DWORD PTR _mode$[ebp], 1767		; 000006e7H
	je	SHORT $LN484@star_sqcur@2
	push	esi
	call	_free_matrix3
	add	esp, 4
$LN484@star_sqcur@2:

; 1053 :   }
; 1054 :   return energy;
; 1055 : } /* end star_sq_curve_method_all() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _energy$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN1078@star_sqcur@2:
	DD	$LN557@star_sqcur@2
	DD	$LN228@star_sqcur@2
	DD	$LN556@star_sqcur@2
	DD	$LN555@star_sqcur@2
	DD	$LN554@star_sqcur@2
$LN1079@star_sqcur@2:
	DD	$LN643@star_sqcur@2
	DD	$LN642@star_sqcur@2
	DD	$LN641@star_sqcur@2
	DD	$LN145@star_sqcur@2
	DD	$LN639@star_sqcur@2
$LN1080@star_sqcur@2:
	DD	$LN887@star_sqcur@2
	DD	$LN86@star_sqcur@2
	DD	$LN886@star_sqcur@2
	DD	$LN885@star_sqcur@2
	DD	$LN884@star_sqcur@2
$LN1081@star_sqcur@2:
	DD	$LN916@star_sqcur@2
	DD	$LN69@star_sqcur@2
	DD	$LN915@star_sqcur@2
	DD	$LN914@star_sqcur@2
	DD	$LN913@star_sqcur@2
$LN1082@star_sqcur@2:
	DD	$LN945@star_sqcur@2
	DD	$LN48@star_sqcur@2
	DD	$LN944@star_sqcur@2
	DD	$LN943@star_sqcur@2
	DD	$LN942@star_sqcur@2
$LN1083@star_sqcur@2:
	DD	$LN970@star_sqcur@2
	DD	$LN28@star_sqcur@2
	DD	$LN969@star_sqcur@2
	DD	$LN968@star_sqcur@2
	DD	$LN967@star_sqcur@2
_star_sqcurve_method_all ENDP
_TEXT	ENDS
PUBLIC	_star_sqcurve_method_value
; Function compile flags: /Ogtp
;	COMDAT _star_sqcurve_method_value
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_star_sqcurve_method_value PROC				; COMDAT

; 1067 : {

	push	ebp
	mov	ebp, esp

; 1068 :   return star_sqcurve_method_all(v_info,METHOD_VALUE);  

	mov	eax, DWORD PTR _v_info$[ebp]
	push	1767					; 000006e7H
	push	eax
	call	_star_sqcurve_method_all
	add	esp, 8

; 1069 : } // end star_sqcurve_method_value()

	pop	ebp
	ret	0
_star_sqcurve_method_value ENDP
_TEXT	ENDS
PUBLIC	_star_sqcurve_method_grad
; Function compile flags: /Ogtp
;	COMDAT _star_sqcurve_method_grad
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_star_sqcurve_method_grad PROC				; COMDAT

; 1080 : {

	push	ebp
	mov	ebp, esp

; 1081 :   return star_sqcurve_method_all(v_info,METHOD_GRADIENT); 

	mov	eax, DWORD PTR _v_info$[ebp]
	push	4321					; 000010e1H
	push	eax
	call	_star_sqcurve_method_all
	add	esp, 8

; 1082 : } // end star_sqcurve_method_grad()

	pop	ebp
	ret	0
_star_sqcurve_method_grad ENDP
_TEXT	ENDS
PUBLIC	_star_sqcurve_method_hess
; Function compile flags: /Ogtp
;	COMDAT _star_sqcurve_method_hess
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_star_sqcurve_method_hess PROC				; COMDAT

; 1092 : {

	push	ebp
	mov	ebp, esp

; 1093 :    return star_sqcurve_method_all(v_info,METHOD_HESSIAN);  

	mov	eax, DWORD PTR _v_info$[ebp]
	push	8763					; 0000223bH
	push	eax
	call	_star_sqcurve_method_all
	add	esp, 8

; 1094 : } // end star_sqcurve_method_hess()

	pop	ebp
	ret	0
_star_sqcurve_method_hess ENDP
_TEXT	ENDS
PUBLIC	__real@c00921fb54442d18
PUBLIC	??_C@_0DF@KOFGLMFD@circle_willmore?5method?5requires?5@ ; `string'
PUBLIC	??_C@_0DD@LJPLNKIF@circle_willmore?5method?5requires?5@ ; `string'
PUBLIC	_circle_willmore_init
EXTRN	_binary_tree_add:PROC
;	COMDAT __real@c00921fb54442d18
CONST	SEGMENT
__real@c00921fb54442d18 DQ 0c00921fb54442d18r	; -3.14159
CONST	ENDS
;	COMDAT ??_C@_0DF@KOFGLMFD@circle_willmore?5method?5requires?5@
CONST	SEGMENT
??_C@_0DF@KOFGLMFD@circle_willmore?5method?5requires?5@ DB 'circle_willmo'
	DB	're method requires the SOAPFILM model.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@LJPLNKIF@circle_willmore?5method?5requires?5@
CONST	SEGMENT
??_C@_0DD@LJPLNKIF@circle_willmore?5method?5requires?5@ DB 'circle_willmo'
	DB	're method requires the LINEAR model.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _circle_willmore_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_circle_willmore_init PROC				; COMDAT

; 1123 : { REAL vertex_adjust;

	push	ebp
	mov	ebp, esp

; 1124 : 
; 1125 :   if ( web.modeltype != LINEAR )

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN2@circle_wil

; 1126 :     kb_error(4007,"circle_willmore method requires the LINEAR model.\n",
; 1127 :       RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DD@LJPLNKIF@circle_willmore?5method?5requires?5@
	push	4007					; 00000fa7H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN2@circle_wil:

; 1128 :   if ( web.representation != SOAPFILM )

	cmp	DWORD PTR _web+624, 2
	je	SHORT $LN1@circle_wil

; 1129 :     kb_error(3222,"circle_willmore method requires the SOAPFILM model.\n",
; 1130 :       RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DF@KOFGLMFD@circle_willmore?5method?5requires?5@
	push	3222					; 00000c96H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@circle_wil:

; 1131 : 
; 1132 :   vertex_adjust = -M_PI*web.skel[VERTEX].count;
; 1133 : 
; 1134 :   binary_tree_add(mi->value_addends,vertex_adjust);

	fild	DWORD PTR _web+64
	mov	eax, DWORD PTR _mi$[ebp]
	sub	esp, 8
	add	eax, 344				; 00000158H
	fmul	QWORD PTR __real@c00921fb54442d18
	fstp	QWORD PTR [esp]
	push	eax
	call	_binary_tree_add
	add	esp, 12					; 0000000cH

; 1135 : }

	pop	ebp
	ret	0
_circle_willmore_init ENDP
_TEXT	ENDS
PUBLIC	__real@bff0000000000000
PUBLIC	??_C@_0DK@MDDGKPBH@edge?5?$CFs?5cosine?5of?5angle?5out?5of?5r@ ; `string'
PUBLIC	_e_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_circle_willmore_all
EXTRN	__CIacos:PROC
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT ??_C@_0DK@MDDGKPBH@edge?5?$CFs?5cosine?5of?5angle?5out?5of?5r@
CONST	SEGMENT
??_C@_0DK@MDDGKPBH@edge?5?$CFs?5cosine?5of?5angle?5out?5of?5r@ DB 'edge %'
	DB	's cosine of angle out of range in circular_willmore', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _circle_willmore_all
_TEXT	SEGMENT
tv542 = -312						; size = 8
tv510 = -304						; size = 8
tv560 = -296						; size = 8
tv612 = -288						; size = 8
tv554 = -280						; size = 8
tv570 = -272						; size = 8
_value$ = -264						; size = 8
tv602 = -256						; size = 8
tv501 = -248						; size = 8
tv503 = -240						; size = 8
tv508 = -232						; size = 8
tv513 = -224						; size = 8
_pq$ = -216						; size = 8
tv512 = -208						; size = 8
tv1142 = -204						; size = 4
tv589 = -200						; size = 8
tv507 = -200						; size = 8
_rr$ = -192						; size = 8
_pr$ = -184						; size = 8
tv1148 = -180						; size = 4
_qq$ = -176						; size = 8
_pp$ = -168						; size = 8
tv635 = -160						; size = 4
_e_info$GSCopy$ = -160					; size = 4
_cosbeta$ = -156					; size = 8
_qr$ = -156						; size = 8
tv1154 = -152						; size = 4
_dcdr$ = -148						; size = 48
_dcdq$ = -100						; size = 48
_dcdp$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_mode$ = 12						; size = 4
_circle_willmore_all PROC				; COMDAT

; 1141 : { REAL *q = e_info->sides[0][0];

	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _e_info$[ebp]

; 1142 :   REAL *p = e_info->sides[0][1];
; 1143 :   REAL *r = e_info->sides[0][2];
; 1144 :   REAL pp = dot(p,p,SDIM);

	mov	ecx, DWORD PTR _web+616
	push	ebx
	push	esi

; 1172 :   { dcdp[i] = (rr*q[i] - qq*r[i] - 2*rr*p[i] + 2*qr*p[i])/sqrt(pp)/sqrt(rr)/
; 1173 :               sqrt(qq-2*pq+pp)/sqrt(rr-2*qr+qq)
; 1174 :             - cosbeta/pp*p[i]
; 1175 :             - cosbeta/(qq-2*pq+pp)*(-q[i] + p[i]);

	mov	DWORD PTR _e_info$GSCopy$[ebp], eax
	mov	eax, DWORD PTR [eax+1276]
	mov	eax, DWORD PTR [eax]
	mov	ebx, DWORD PTR [eax+4]
	mov	esi, DWORD PTR [eax]
	push	edi
	mov	edi, DWORD PTR [eax+8]
	push	ecx
	push	ebx
	push	ebx
	call	_dot
	fstp	QWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR _web+616
	push	edx
	push	esi
	push	esi
	call	_dot
	fstp	QWORD PTR _qq$[ebp]
	mov	eax, DWORD PTR _web+616
	push	eax
	push	edi
	push	edi
	call	_dot
	fstp	QWORD PTR _rr$[ebp]
	mov	ecx, DWORD PTR _web+616
	push	ecx
	push	esi
	push	ebx
	call	_dot
	fstp	QWORD PTR _pq$[ebp]
	mov	edx, DWORD PTR _web+616
	push	edx
	push	edi
	push	ebx
	call	_dot
	fstp	QWORD PTR _pr$[ebp]
	mov	eax, DWORD PTR _web+616
	push	eax
	push	edi
	push	esi
	call	_dot
	fstp	QWORD PTR _qr$[ebp]
	fld	QWORD PTR _pp$[ebp]
	add	esp, 72					; 00000048H
	call	__CIsqrt
	fstp	QWORD PTR tv501[ebp]
	fld	QWORD PTR _rr$[ebp]
	call	__CIsqrt
	fstp	QWORD PTR tv503[ebp]
	fld	QWORD PTR _pq$[ebp]
	fadd	ST(0), ST(0)
	fsubr	QWORD PTR _qq$[ebp]
	fadd	QWORD PTR _pp$[ebp]
	fst	QWORD PTR tv507[ebp]
	call	__CIsqrt
	fstp	QWORD PTR tv508[ebp]
	fld	QWORD PTR _qr$[ebp]
	fadd	ST(0), ST(0)
	fst	QWORD PTR tv510[ebp]
	fsubr	QWORD PTR _rr$[ebp]
	fadd	QWORD PTR _qq$[ebp]
	fst	QWORD PTR tv512[ebp]
	call	__CIsqrt
	fst	QWORD PTR tv513[ebp]
	fld	QWORD PTR _pq$[ebp]
	fld	QWORD PTR _rr$[ebp]
	fmul	ST(1), ST(0)
	fld	QWORD PTR _pr$[ebp]
	fmul	QWORD PTR _qq$[ebp]
	fsubp	ST(2), ST(0)
	fld	QWORD PTR _pp$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(2)
	fsubrp	ST(1), ST(0)
	fld	QWORD PTR _qr$[ebp]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)

; 1145 :   REAL qq = dot(q,q,SDIM);
; 1146 :   REAL rr = dot(r,r,SDIM);
; 1147 :   REAL pq = dot(p,q,SDIM);
; 1148 :   REAL pr = dot(p,r,SDIM);
; 1149 :   REAL qr = dot(q,r,SDIM);
; 1150 :   REAL value;
; 1151 :   REAL cosbeta;
; 1152 :   REAL dcdp[MAXCOORD],dcdq[MAXCOORD],dcdr[MAXCOORD];
; 1153 :   REAL coeff;
; 1154 :   int i;
; 1155 : 
; 1156 :   cosbeta = (rr*pq - qq*pr - pp*rr + pp*qr)/sqrt(pp)/sqrt(rr)/
; 1157 :               sqrt(qq-2*pq+pp)/sqrt(rr-2*qr+qq);

	fdiv	QWORD PTR tv501[ebp]
	fdiv	QWORD PTR tv503[ebp]
	fdiv	QWORD PTR tv508[ebp]
	fdivrp	ST(1), ST(0)
	fst	QWORD PTR _cosbeta$[ebp]

; 1158 :   if ( fabs(cosbeta) > 1.0 )

	fld	ST(0)
	fabs
	fcomp	QWORD PTR __real@3ff0000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@circle_wil@2

; 1159 :   { sprintf(errmsg,"edge %s cosine of angle out of range in circular_willmore",
; 1160 :       ELNAME(e_info->id));

	mov	ecx, DWORD PTR _e_info$GSCopy$[ebp]
	fstp	ST(0)
	mov	eax, DWORD PTR [ecx]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN10@circle_wil@2
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN11@circle_wil@2
$LN10@circle_wil@2:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN11@circle_wil@2:
	push	eax
	push	OFFSET ??_C@_0DK@MDDGKPBH@edge?5?$CFs?5cosine?5of?5angle?5out?5of?5r@
	push	OFFSET _errmsg
	call	_sprintf

; 1161 :      kb_error(3850,errmsg,WARNING);

	push	2
	push	OFFSET _errmsg
	push	3850					; 00000f0aH
	call	_kb_error
	fld	QWORD PTR _cosbeta$[ebp]
	add	esp, 24					; 00000018H
$LN7@circle_wil@2:

; 1162 :   }
; 1163 :   value = acos(cosbeta);

	call	__CIacos
	fst	QWORD PTR _value$[ebp]

; 1164 : 
; 1165 :   if ( mode == METHOD_VALUE ) 

	cmp	DWORD PTR _mode$[ebp], 1767		; 000006e7H

; 1166 :     return value;

	je	$LN1@circle_wil@2

; 1167 :  
; 1168 :   /* Gradient */
; 1169 :   if ( cosbeta*cosbeta >= 1.0 ) coeff = 0.0;
; 1170 :   coeff = -1/sqrt(1 - cosbeta*cosbeta);

	fstp	ST(0)
	fld	QWORD PTR _cosbeta$[ebp]
	fmul	ST(0), ST(0)
	fld1
	fsubrp	ST(1), ST(0)
	call	__CIsqrt
	fdivr	QWORD PTR __real@bff0000000000000

; 1171 :   for ( i = 0 ; i < SDIM ; i++ )

	xor	ecx, ecx
	cmp	DWORD PTR _web+616, ecx
	jle	$LN22@circle_wil@2
	fld	QWORD PTR _rr$[ebp]
	mov	edx, ebx
	fld	ST(0)
	lea	ebx, DWORD PTR _dcdq$[ebp]
	fld	QWORD PTR __real@4000000000000000
	sub	ebx, edi
	fmul	ST(1), ST(0)
	sub	edx, edi
	fxch	ST(1)
	sub	esi, edi
	mov	eax, edi
	fstp	QWORD PTR tv542[ebp]
	fld	QWORD PTR _cosbeta$[ebp]
	fld	ST(0)
	fld	QWORD PTR _pp$[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv554[ebp]
	fld	QWORD PTR _pr$[ebp]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR tv570[ebp]
	fld	ST(1)
	fdiv	QWORD PTR tv507[ebp]
	fstp	QWORD PTR tv560[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv602[ebp]
	fld	ST(0)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR tv612[ebp]
	fdiv	QWORD PTR tv512[ebp]
	mov	DWORD PTR tv1142[ebp], ebx
	lea	ebx, DWORD PTR _dcdp$[ebp]
	sub	ebx, edi
	mov	DWORD PTR tv1148[ebp], ebx
	lea	ebx, DWORD PTR _dcdr$[ebp]
	sub	ebx, edi
	mov	edi, DWORD PTR _e_info$GSCopy$[ebp]
	mov	DWORD PTR tv1154[ebp], ebx
	fstp	QWORD PTR tv589[ebp]
	fld	QWORD PTR tv501[ebp]
	fld	QWORD PTR tv503[ebp]
	fld	QWORD PTR tv508[ebp]
	jmp	SHORT $LN4@circle_wil@2
$LN14@circle_wil@2:
	fld	QWORD PTR _rr$[ebp]
	fxch	ST(3)
$LN4@circle_wil@2:

; 1172 :   { dcdp[i] = (rr*q[i] - qq*r[i] - 2*rr*p[i] + 2*qr*p[i])/sqrt(pp)/sqrt(rr)/
; 1173 :               sqrt(qq-2*pq+pp)/sqrt(rr-2*qr+qq)
; 1174 :             - cosbeta/pp*p[i]
; 1175 :             - cosbeta/(qq-2*pq+pp)*(-q[i] + p[i]);

	fld	ST(3)
	mov	ebx, DWORD PTR tv1148[ebp]
	fmul	QWORD PTR [eax+esi]
	fld	QWORD PTR [eax]
	fmul	QWORD PTR _qq$[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv542[ebp]
	fmul	QWORD PTR [eax+edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv510[ebp]
	fmul	QWORD PTR [eax+edx]
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(1)
	fdiv	QWORD PTR tv513[ebp]
	fld	QWORD PTR tv554[ebp]
	fmul	QWORD PTR [eax+edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+edx]
	fsub	QWORD PTR [eax+esi]
	fld	QWORD PTR tv560[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(2)
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR [eax+ebx]

; 1176 :     dcdq[i] = (rr*p[i] - 2*pr*q[i] + pp*r[i])/sqrt(pp)/sqrt(rr)/
; 1177 :               sqrt(qq-2*pq+pp)/sqrt(rr-2*qr+qq)
; 1178 :             - cosbeta/(qq-2*pq+pp)*(q[i] - p[i])
; 1179 :             - cosbeta/(rr-2*qr+qq)*(-r[i] + q[i]);

	mov	ebx, DWORD PTR tv1142[ebp]
	fld	QWORD PTR [eax+edx]
	fmulp	ST(5), ST(0)
	fld	QWORD PTR tv570[ebp]
	fmul	QWORD PTR [eax+esi]
	fsubp	ST(5), ST(0)
	fld	QWORD PTR [eax]
	fmul	QWORD PTR _pp$[ebp]
	faddp	ST(5), ST(0)
	fxch	ST(4)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(1)
	fdiv	QWORD PTR tv513[ebp]
	fld	QWORD PTR [eax+esi]
	fsub	QWORD PTR [eax+edx]
	fmulp	ST(5), ST(0)
	fsubrp	ST(4), ST(0)
	fld	QWORD PTR [eax+esi]
	fsub	QWORD PTR [eax]
	fmul	QWORD PTR tv589[ebp]
	fsubp	ST(4), ST(0)
	fxch	ST(3)
	fst	QWORD PTR [eax+ebx]

; 1180 :     dcdr[i] = (2*r[i]*pq - qq*p[i] - 2*pp*r[i]+ pp*q[i])/sqrt(pp)/sqrt(rr)/
; 1181 :               sqrt(qq-2*pq+pp)/sqrt(rr-2*qr+qq)
; 1182 :             - cosbeta/rr*r[i]
; 1183 :             - cosbeta/(rr-2*qr+qq)*(r[i] - q[i]);

	mov	ebx, DWORD PTR tv1154[ebp]
	fld	QWORD PTR [eax]
	fadd	ST(0), ST(0)
	fmul	QWORD PTR _pq$[ebp]
	fld	QWORD PTR [eax+edx]
	fmul	QWORD PTR _qq$[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax]
	fmul	QWORD PTR tv602[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _pp$[ebp]
	fmul	QWORD PTR [eax+esi]
	faddp	ST(1), ST(0)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(4)
	fdiv	QWORD PTR tv513[ebp]
	fld	QWORD PTR [eax]
	fmul	QWORD PTR tv612[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax]
	fsub	QWORD PTR [eax+esi]
	fmul	QWORD PTR tv589[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR [eax+ebx]

; 1184 :     e_info->grad[1][i] = coeff*dcdq[i]; 

	mov	ebx, DWORD PTR [edi+1336]
	mov	ebx, DWORD PTR [ebx+4]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR [ebx+ecx*8]

; 1185 :     e_info->grad[0][i] -= coeff*dcdq[i]; 

	mov	ebx, DWORD PTR [edi+1336]
	mov	ebx, DWORD PTR [ebx]

; 1171 :   for ( i = 0 ; i < SDIM ; i++ )

	lea	ebx, DWORD PTR [ebx+ecx*8]
	mov	DWORD PTR tv635[ebp], ebx

; 1185 :     e_info->grad[0][i] -= coeff*dcdq[i]; 

	mov	ebx, DWORD PTR tv1142[ebp]
	fld	QWORD PTR [eax+ebx]
	mov	ebx, DWORD PTR tv635[ebp]
	fmul	ST(0), ST(4)
	add	eax, 8
	fsubr	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]

; 1186 :     e_info->grad[2][i] = coeff*dcdp[i]; 

	mov	ebx, DWORD PTR tv1148[ebp]
	fld	QWORD PTR [eax+ebx-8]
	mov	ebx, DWORD PTR [edi+1336]
	mov	ebx, DWORD PTR [ebx+8]
	fmul	ST(0), ST(4)
	fst	QWORD PTR [ebx+ecx*8]

; 1187 :     e_info->grad[0][i] -= coeff*dcdp[i]; 

	mov	ebx, DWORD PTR [edi+1336]
	mov	ebx, DWORD PTR [ebx]
	fsubr	QWORD PTR [ebx+ecx*8]
	lea	ebx, DWORD PTR [ebx+ecx*8]
	fstp	QWORD PTR [ebx]

; 1188 :     e_info->grad[3][i] = coeff*dcdr[i]; 

	mov	ebx, DWORD PTR tv1154[ebp]
	fld	QWORD PTR [eax+ebx-8]
	mov	ebx, DWORD PTR [edi+1336]
	mov	ebx, DWORD PTR [ebx+12]
	fmul	ST(0), ST(4)
	fst	QWORD PTR [ebx+ecx*8]

; 1189 :     e_info->grad[0][i] -= coeff*dcdr[i]; 

	mov	ebx, DWORD PTR [edi+1336]
	mov	ebx, DWORD PTR [ebx]
	fsubr	QWORD PTR [ebx+ecx*8]
	lea	ebx, DWORD PTR [ebx+ecx*8]
	inc	ecx
	fstp	QWORD PTR [ebx]
	cmp	ecx, DWORD PTR _web+616
	jl	$LN14@circle_wil@2

; 1171 :   for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(3)
	fstp	ST(0)
	fstp	ST(1)
$LN22@circle_wil@2:
	fstp	ST(0)

; 1190 :   }
; 1191 : 
; 1192 :   if ( mode == METHOD_GRADIENT ) 

	fld	QWORD PTR _value$[ebp]
$LN1@circle_wil@2:

; 1193 :     return value;
; 1194 : 
; 1195 : 
; 1196 :   /* Hessian */
; 1197 :  
; 1198 :   
; 1199 : 
; 1200 :     return value;
; 1201 :   
; 1202 : } // end circle_willmore_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_circle_willmore_all ENDP
_TEXT	ENDS
PUBLIC	_circle_willmore_value
; Function compile flags: /Ogtp
;	COMDAT _circle_willmore_value
_TEXT	SEGMENT
_e_info$ = 8						; size = 4
_circle_willmore_value PROC				; COMDAT

; 1206 : { return circle_willmore_all(e_info,METHOD_VALUE);

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _e_info$[ebp]
	push	1767					; 000006e7H
	push	eax
	call	_circle_willmore_all
	add	esp, 8

; 1207 : }

	pop	ebp
	ret	0
_circle_willmore_value ENDP
_TEXT	ENDS
PUBLIC	_circle_willmore_grad
; Function compile flags: /Ogtp
;	COMDAT _circle_willmore_grad
_TEXT	SEGMENT
_e_info$ = 8						; size = 4
_circle_willmore_grad PROC				; COMDAT

; 1211 : { return circle_willmore_all(e_info,METHOD_GRADIENT);

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _e_info$[ebp]
	push	4321					; 000010e1H
	push	eax
	call	_circle_willmore_all
	add	esp, 8

; 1212 : }

	pop	ebp
	ret	0
_circle_willmore_grad ENDP
_TEXT	ENDS
PUBLIC	_circle_willmore_hess
; Function compile flags: /Ogtp
;	COMDAT _circle_willmore_hess
_TEXT	SEGMENT
_e_info$ = 8						; size = 4
_circle_willmore_hess PROC				; COMDAT

; 1216 : { return circle_willmore_all(e_info,METHOD_HESSIAN);

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _e_info$[ebp]
	push	8763					; 0000223bH
	push	eax
	call	_circle_willmore_all
	add	esp, 8

; 1217 : }

	pop	ebp
	ret	0
_circle_willmore_hess ENDP
_TEXT	ENDS
END
