; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\TORDUP.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_dt_eps
PUBLIC	_dt_random_vector
_DATA	SEGMENT
COMM	_dt_ealloc:DWORD
COMM	_dt_falloc:DWORD
COMM	_dt_flist:DWORD
COMM	_dt_vcount:DWORD
COMM	_dt_x_space:DWORD
COMM	_dt_valloc:DWORD
COMM	_dt_vlist:DWORD
COMM	_dt_v_space:DWORD
COMM	_dt_ecount:DWORD
COMM	_dt_elist:DWORD
COMM	_dt_transform_count:DWORD
COMM	_dt_fcount:DWORD
_dt_eps	DQ	03eb0c6f7a0b5ed8dr		; 1e-006
_dt_random_vector DQ 03ff226f951d044a6r		; 1.13452
	DQ	03fe770f0e1ecae84r		; 0.732537
	DQ	03fc16cd7fe0abbb4r		; 0.136134
	DQ	03ff0a3cad8fe9a05r		; 1.03999
	ORG $+16
_DATA	ENDS
PUBLIC	_set_attr
EXTRN	_web:BYTE
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
;	COMDAT _set_attr
_TEXT	SEGMENT
_id$ = 8						; size = 4
_attrib$ = 12						; size = 8
_set_attr PROC						; COMDAT

; 21   : {

	push	ebp
	mov	ebp, esp

; 22   :   elptr(id)->attr |= attrib;

	mov	eax, DWORD PTR _id$[ebp]
	mov	ecx, eax
	shr	ecx, 29					; 0000001dH
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _web[ecx+12]
	mov	ecx, DWORD PTR _attrib$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _attrib$[ebp+4]
	or	DWORD PTR [eax+8], ecx
	or	DWORD PTR [eax+12], edx

; 23   : }

	pop	ebp
	ret	0
_set_attr ENDP
_TEXT	ENDS
PUBLIC	_unset_attr
; Function compile flags: /Ogtp
;	COMDAT _unset_attr
_TEXT	SEGMENT
_id$ = 8						; size = 4
_attrib$ = 12						; size = 8
_unset_attr PROC					; COMDAT

; 28   : {

	push	ebp
	mov	ebp, esp

; 29   :   elptr(id)->attr &= ~attrib;

	mov	eax, DWORD PTR _id$[ebp]
	mov	ecx, eax
	shr	ecx, 29					; 0000001dH
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _web[ecx+12]
	mov	ecx, DWORD PTR _attrib$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _attrib$[ebp+4]
	not	ecx
	and	DWORD PTR [eax+8], ecx
	not	edx
	and	DWORD PTR [eax+12], edx

; 30   : }

	pop	ebp
	ret	0
_unset_attr ENDP
_TEXT	ENDS
PUBLIC	_set_fe_edge
EXTRN	_top_timestamp:DWORD
EXTRN	_global_timestamp:DWORD
; Function compile flags: /Ogtp
;	COMDAT _set_fe_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_e_id$ = 12						; size = 4
_set_fe_edge PROC					; COMDAT

; 35   : {

	push	ebp
	mov	ebp, esp

; 36   :   if ( inverted(fe_id) ) invert(e_id);

	mov	eax, DWORD PTR _fe_id$[ebp]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN1@set_fe_edg
	xor	DWORD PTR _e_id$[ebp], 134217728	; 08000000H
$LN1@set_fe_edg:

; 37   :   feptr(fe_id)->fe_edge_id = e_id;

	mov	ecx, DWORD PTR _web+460
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _e_id$[ebp]
	mov	DWORD PTR [edx+20], eax

; 38   :   top_timestamp = ++global_timestamp;

	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax

; 39   : }

	pop	ebp
	ret	0
_set_fe_edge ENDP
_TEXT	ENDS
PUBLIC	_get_fe_edge
; Function compile flags: /Ogtp
;	COMDAT _get_fe_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_edge PROC					; COMDAT

; 43   : {

	push	ebp
	mov	ebp, esp

; 44   :   edge_id e_id;
; 45   :     
; 46   :   e_id = feptr(fe_id)->fe_edge_id;

	mov	eax, DWORD PTR _fe_id$[ebp]

; 47   : 
; 48   :   /*
; 49   :   if ( inverted(fe_id) ) invert(e_id);
; 50   :   return e_id;
; 51   :   */
; 52   :   
; 53   :   return same_sign(e_id,fe_id);

	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]

; 54   : }

	pop	ebp
	ret	0
_get_fe_edge ENDP
_TEXT	ENDS
PUBLIC	_get_fe_facet
EXTRN	_NULLFACET:DWORD
; Function compile flags: /Ogtp
;	COMDAT _get_fe_facet
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_facet PROC					; COMDAT

; 58   : {

	push	ebp
	mov	ebp, esp

; 59   :   facet_id f_id;
; 60   :   
; 61   :   if ( !valid_id(fe_id) ) return NULLFACET;

	mov	ecx, DWORD PTR _fe_id$[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN2@get_fe_fac
	mov	eax, DWORD PTR _NULLFACET

; 64   :   return f_id;
; 65   : }

	pop	ebp
	ret	0
$LN2@get_fe_fac:

; 62   :   f_id = feptr(fe_id)->fe_facet_id;

	mov	edx, DWORD PTR _web+460
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+24]

; 63   :   if ( inverted(fe_id) ) invert(f_id);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_fe_fac
	xor	eax, 134217728				; 08000000H
$LN3@get_fe_fac:

; 64   :   return f_id;
; 65   : }

	pop	ebp
	ret	0
_get_fe_facet ENDP
_TEXT	ENDS
PUBLIC	_get_prev_edge
; Function compile flags: /Ogtp
;	COMDAT _get_prev_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_prev_edge PROC					; COMDAT

; 69   : {

	push	ebp
	mov	ebp, esp

; 70   :   if ( inverted(fe_id) ) return inverse_id(feptr(fe_id)->nextedge[1]);

	mov	eax, DWORD PTR _fe_id$[ebp]
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_prev_e
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H

; 72   : }

	pop	ebp
	ret	0
$LN2@get_prev_e:

; 71   :   else return feptr(fe_id)->nextedge[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]

; 72   : }

	pop	ebp
	ret	0
_get_prev_edge ENDP
_TEXT	ENDS
PUBLIC	_get_next_edge
; Function compile flags: /Ogtp
;	COMDAT _get_next_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_next_edge PROC					; COMDAT

; 76   : {

	push	ebp
	mov	ebp, esp

; 77   :   if ( inverted(fe_id) ) return inverse_id(feptr(fe_id)->nextedge[0]);

	mov	eax, DWORD PTR _fe_id$[ebp]
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_next_e
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H

; 79   : }

	pop	ebp
	ret	0
$LN2@get_next_e:

; 78   :   else return feptr(fe_id)->nextedge[1];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]

; 79   : }

	pop	ebp
	ret	0
_get_next_edge ENDP
_TEXT	ENDS
PUBLIC	_get_prev_facet
; Function compile flags: /Ogtp
;	COMDAT _get_prev_facet
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_prev_facet PROC					; COMDAT

; 83   : {

	push	ebp
	mov	ebp, esp

; 84   :   if ( inverted(fe_id) ) 

	mov	eax, DWORD PTR _fe_id$[ebp]

; 85   :     return inverse_id(feptr(fe_id)->nextfacet[1]);

	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_prev_f
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+40]
	xor	eax, 134217728				; 08000000H

; 88   : }

	pop	ebp
	ret	0
$LN2@get_prev_f:

; 86   :   else 
; 87   :     return feptr(fe_id)->nextfacet[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+36]

; 88   : }

	pop	ebp
	ret	0
_get_prev_facet ENDP
_TEXT	ENDS
PUBLIC	_get_next_facet
; Function compile flags: /Ogtp
;	COMDAT _get_next_facet
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_next_facet PROC					; COMDAT

; 92   : {

	push	ebp
	mov	ebp, esp

; 93   :   if ( inverted(fe_id) ) 

	mov	eax, DWORD PTR _fe_id$[ebp]

; 94   :     return inverse_id(feptr(fe_id)->nextfacet[0]);

	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_next_f
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H

; 97   : }

	pop	ebp
	ret	0
$LN2@get_next_f:

; 95   :   else 
; 96   :     return feptr(fe_id)->nextfacet[1];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+40]

; 97   : }

	pop	ebp
	ret	0
_get_next_facet ENDP
_TEXT	ENDS
PUBLIC	_set_prev_edge
; Function compile flags: /Ogtp
;	COMDAT _set_prev_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_fe$ = 12						; size = 4
_set_prev_edge PROC					; COMDAT

; 102  : {

	push	ebp
	mov	ebp, esp

; 103  :   if ( !valid_id(fe_id) ) return;

	mov	eax, DWORD PTR _fe_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN4@set_prev_e

; 104  :   if ( inverted(fe_id) )

	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@set_prev_e

; 105  :     { invert(fe);
; 106  :       feptr(fe_id)->nextedge[1] = fe;

	mov	edx, DWORD PTR _web+460
	mov	ecx, DWORD PTR _fe$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	xor	ecx, 134217728				; 08000000H
	mov	DWORD PTR [eax+32], ecx

; 110  :   top_timestamp = ++global_timestamp;

	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax

; 111  : }

	pop	ebp
	ret	0
$LN2@set_prev_e:

; 107  :     }
; 108  :   else
; 109  :       feptr(fe_id)->nextedge[0] = fe;

	mov	ecx, DWORD PTR _web+460
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _fe$[ebp]
	mov	DWORD PTR [edx+28], eax

; 110  :   top_timestamp = ++global_timestamp;

	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN4@set_prev_e:

; 111  : }

	pop	ebp
	ret	0
_set_prev_edge ENDP
_TEXT	ENDS
PUBLIC	_set_next_edge
; Function compile flags: /Ogtp
;	COMDAT _set_next_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_fe$ = 12						; size = 4
_set_next_edge PROC					; COMDAT

; 116  : {

	push	ebp
	mov	ebp, esp

; 117  :   if ( !valid_id(fe_id) ) return;

	mov	eax, DWORD PTR _fe_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN1@set_next_e

; 118  :   if ( inverted(fe_id) )

	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@set_next_e

; 119  :     { invert(fe);

	mov	ecx, DWORD PTR _fe$[ebp]

; 120  :       feptr(fe_id)->nextedge[0] = fe;

	mov	edx, DWORD PTR _web+460
	xor	ecx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [eax+28], ecx

; 124  : }

	pop	ebp
	ret	0
$LN2@set_next_e:

; 121  :     }
; 122  :   else
; 123  :       feptr(fe_id)->nextedge[1] = fe;

	mov	ecx, DWORD PTR _web+460
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _fe$[ebp]
	mov	DWORD PTR [edx+32], eax
$LN1@set_next_e:

; 124  : }

	pop	ebp
	ret	0
_set_next_edge ENDP
_TEXT	ENDS
PUBLIC	_set_prev_facet
; Function compile flags: /Ogtp
;	COMDAT _set_prev_facet
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_fe$ = 12						; size = 4
_set_prev_facet PROC					; COMDAT

; 129  : {

	push	ebp
	mov	ebp, esp

; 130  :   if ( !valid_id(fe_id) ) return;

	mov	eax, DWORD PTR _fe_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN4@set_prev_f

; 131  :   if ( inverted(fe_id) )

	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@set_prev_f

; 132  :   { invert(fe);
; 133  :     feptr(fe_id)->nextfacet[1] = fe;

	mov	edx, DWORD PTR _web+460
	mov	ecx, DWORD PTR _fe$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	xor	ecx, 134217728				; 08000000H
	mov	DWORD PTR [eax+40], ecx

; 137  :   top_timestamp = ++global_timestamp;

	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax

; 138  : }

	pop	ebp
	ret	0
$LN2@set_prev_f:

; 134  :   }
; 135  :   else
; 136  :     feptr(fe_id)->nextfacet[0] = fe;

	mov	ecx, DWORD PTR _web+460
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _fe$[ebp]
	mov	DWORD PTR [edx+36], eax

; 137  :   top_timestamp = ++global_timestamp;

	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN4@set_prev_f:

; 138  : }

	pop	ebp
	ret	0
_set_prev_facet ENDP
_TEXT	ENDS
PUBLIC	_set_next_facet
; Function compile flags: /Ogtp
;	COMDAT _set_next_facet
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_fe$ = 12						; size = 4
_set_next_facet PROC					; COMDAT

; 143  : {

	push	ebp
	mov	ebp, esp

; 144  :   if ( !valid_id(fe_id) ) return;

	mov	eax, DWORD PTR _fe_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN1@set_next_f

; 145  :   if ( inverted(fe_id) )

	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@set_next_f

; 146  :   { invert(fe);

	mov	ecx, DWORD PTR _fe$[ebp]

; 147  :     feptr(fe_id)->nextfacet[0] = fe;

	mov	edx, DWORD PTR _web+460
	xor	ecx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [eax+36], ecx

; 151  : }

	pop	ebp
	ret	0
$LN2@set_next_f:

; 148  :   }
; 149  :   else
; 150  :     feptr(fe_id)->nextfacet[1] = fe;

	mov	ecx, DWORD PTR _web+460
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _fe$[ebp]
	mov	DWORD PTR [edx+40], eax
$LN1@set_next_f:

; 151  : }

	pop	ebp
	ret	0
_set_next_facet ENDP
_TEXT	ENDS
PUBLIC	_set_edge_wrap
EXTRN	_dymem:DWORD
EXTRN	_sym_inverse:DWORD
; Function compile flags: /Ogtp
;	COMDAT _set_edge_wrap
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_wrap$ = 12						; size = 4
_set_edge_wrap PROC					; COMDAT

; 157  : {

	push	ebp
	mov	ebp, esp

; 158  :  *EINT(e_id,E_WRAP_ATTR) =  inverted(e_id)  ? (*sym_inverse)(wrap) : wrap ;

	mov	eax, DWORD PTR _wrap$[ebp]
	push	esi
	mov	esi, DWORD PTR _e_id$[ebp]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN4@set_edge_w
	push	eax
	call	DWORD PTR _sym_inverse
	add	esp, 4
$LN4@set_edge_w:
	mov	ecx, DWORD PTR _web+124
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	esi, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+esi+784]
	mov	DWORD PTR [edx+ecx], eax
	pop	esi

; 159  : }

	pop	ebp
	ret	0
_set_edge_wrap ENDP
_TEXT	ENDS
PUBLIC	_get_edge_wrap
; Function compile flags: /Ogtp
;	COMDAT _get_edge_wrap
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_wrap PROC					; COMDAT

; 163  : {

	push	ebp
	mov	ebp, esp

; 164  :   WRAPTYPE wrap = *EINT(e_id,E_WRAP_ATTR) ;

	mov	ecx, DWORD PTR _e_id$[ebp]
	mov	edx, DWORD PTR _web+124
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+216
	push	esi
	mov	esi, DWORD PTR _dymem
	mov	edx, DWORD PTR [edx+esi+784]
	mov	eax, DWORD PTR [eax+edx]
	pop	esi

; 165  :   return    ( inverted(e_id) ? (*sym_inverse)(wrap) : wrap );

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN4@get_edge_w
	push	eax
	call	DWORD PTR _sym_inverse
	add	esp, 4
$LN4@get_edge_w:

; 166  : }

	pop	ebp
	ret	0
_get_edge_wrap ENDP
_TEXT	ENDS
PUBLIC	_set_edge_fe
; Function compile flags: /Ogtp
;	COMDAT _set_edge_fe
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_fe$ = 12						; size = 4
_set_edge_fe PROC					; COMDAT

; 171  : {

	push	ebp
	mov	ebp, esp

; 172  :   if ( inverted(e_id) ) invert(fe);

	mov	eax, DWORD PTR _e_id$[ebp]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN1@set_edge_f
	xor	DWORD PTR _fe$[ebp], 134217728		; 08000000H
$LN1@set_edge_f:

; 173  :   eptr(e_id)->fe_id = fe;

	mov	ecx, DWORD PTR _web+124
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _fe$[ebp]
	mov	DWORD PTR [edx+28], eax

; 174  :   top_timestamp = ++global_timestamp;

	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax

; 175  : }

	pop	ebp
	ret	0
_set_edge_fe ENDP
_TEXT	ENDS
PUBLIC	_get_edge_fe
; Function compile flags: /Ogtp
;	COMDAT _get_edge_fe
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_fe PROC					; COMDAT

; 179  : {   struct edge *ep;

	push	ebp
	mov	ebp, esp

; 180  :     facetedge_id fe;
; 181  : 
; 182  :  	ep = eptr(e_id);

	mov	ecx, DWORD PTR _e_id$[ebp]
	mov	edx, DWORD PTR _web+124
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]

; 183  :     if ( !ep ) return NULLID;

	test	eax, eax
	jne	SHORT $LN2@get_edge_f

; 186  :     return fe;
; 187  : }

	pop	ebp
	ret	0
$LN2@get_edge_f:

; 184  :     fe = ep->fe_id; 

	mov	eax, DWORD PTR [eax+28]

; 185  :     if ( inverted(e_id) ) invert(fe);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_edge_f
	xor	eax, 134217728				; 08000000H
$LN3@get_edge_f:

; 186  :     return fe;
; 187  : }

	pop	ebp
	ret	0
_get_edge_fe ENDP
_TEXT	ENDS
PUBLIC	_get_edge_tailv
; Function compile flags: /Ogtp
;	COMDAT _get_edge_tailv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_tailv PROC					; COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp

; 192  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 193  :      return get_edge_vertices(e_id)[web.headvnum];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_t
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 196  : }

	pop	ebp
	ret	0
$LN2@get_edge_t:

; 194  :   else
; 195  :      return get_edge_vertices(e_id)[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 196  : }

	pop	ebp
	ret	0
_get_edge_tailv ENDP
_TEXT	ENDS
PUBLIC	_get_edge_headv
; Function compile flags: /Ogtp
;	COMDAT _get_edge_headv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_headv PROC					; COMDAT

; 200  : {

	push	ebp
	mov	ebp, esp

; 201  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 202  :      return get_edge_vertices(e_id)[0];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_h
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 205  : }

	pop	ebp
	ret	0
$LN2@get_edge_h:

; 203  :   else
; 204  :      return get_edge_vertices(e_id)[web.headvnum];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 205  : }

	pop	ebp
	ret	0
_get_edge_headv ENDP
_TEXT	ENDS
PUBLIC	_set_edge_tailv
EXTRN	_insert_vertex_edge:PROC
EXTRN	_remove_vertex_edge:PROC
; Function compile flags: /Ogtp
;	COMDAT _set_edge_tailv
_TEXT	SEGMENT
tv225 = -4						; size = 4
_e_id$ = 8						; size = 4
_v_id$ = 12						; size = 4
_set_edge_tailv PROC					; COMDAT

; 210  : { vertex_id oldv;

	push	ebp
	mov	ebp, esp
	push	ecx

; 211  : 
; 212  :   /* make sure edge not in loop of old vertex */
; 213  :   oldv = get_edge_tailv(e_id);

	mov	edx, DWORD PTR _web+124
	mov	ecx, DWORD PTR _web+216
	push	ebx
	push	esi
	mov	esi, DWORD PTR _e_id$[ebp]
	mov	eax, esi
	shr	eax, 27					; 0000001bH
	and	eax, 1
	push	edi
	mov	edi, DWORD PTR _dymem
	mov	DWORD PTR tv225[ebp], eax
	je	SHORT $LN7@set_edge_t
	mov	ebx, DWORD PTR _web+636
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+edx]
	add	eax, DWORD PTR [ecx+edi+304]
	mov	eax, DWORD PTR [eax+ebx*4]
	jmp	SHORT $LN6@set_edge_t
$LN7@set_edge_t:
	mov	ebx, DWORD PTR [ecx+edi+304]
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+edx]
	mov	eax, DWORD PTR [eax+ebx]
$LN6@set_edge_t:

; 214  :   if ( valid_id(oldv) && !equal_id(oldv,v_id) )

	mov	ebx, DWORD PTR _v_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN10@set_edge_t
	cmp	eax, ebx
	je	SHORT $LN10@set_edge_t

; 215  :     remove_vertex_edge(oldv,e_id);

	mov	ecx, DWORD PTR _e_id$[ebp]
	push	ecx
	push	eax
	call	_remove_vertex_edge
	mov	ecx, DWORD PTR _web+216
	mov	edx, DWORD PTR _web+124
	mov	edi, DWORD PTR _dymem
	add	esp, 8
$LN10@set_edge_t:

; 216  : 
; 217  :   if ( inverted(e_id) )

	cmp	DWORD PTR tv225[ebp], 0

; 218  :      get_edge_vertices(e_id)[web.headvnum] = v_id;

	mov	edx, DWORD PTR [esi+edx]
	je	SHORT $LN2@set_edge_t
	add	edx, DWORD PTR [ecx+edi+304]
	mov	eax, DWORD PTR _web+636
	mov	DWORD PTR [edx+eax*4], ebx

; 219  :   else

	jmp	SHORT $LN1@set_edge_t
$LN2@set_edge_t:

; 220  :      get_edge_vertices(e_id)[0] = v_id;

	mov	eax, DWORD PTR [ecx+edi+304]
	mov	DWORD PTR [edx+eax], ebx
$LN1@set_edge_t:

; 221  :   insert_vertex_edge(v_id,e_id);

	mov	ecx, DWORD PTR _e_id$[ebp]
	push	ecx
	push	ebx
	call	_insert_vertex_edge

; 222  :   top_timestamp = ++global_timestamp;

	mov	eax, DWORD PTR _global_timestamp
	add	esp, 8
	pop	edi
	inc	eax
	pop	esi
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	pop	ebx

; 223  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_set_edge_tailv ENDP
_TEXT	ENDS
PUBLIC	_set_edge_headv
; Function compile flags: /Ogtp
;	COMDAT _set_edge_headv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_v_id$ = 12						; size = 4
_set_edge_headv PROC					; COMDAT

; 229  : {

	push	ebp
	mov	ebp, esp

; 230  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]
	push	esi

; 231  :      get_edge_vertices(e_id)[0] = v_id;

	mov	esi, DWORD PTR _dymem
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@set_edge_h
	mov	edx, DWORD PTR _web+124
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _web+216
	mov	esi, DWORD PTR [ecx+esi+304]
	mov	ecx, DWORD PTR _v_id$[ebp]
	mov	DWORD PTR [edx+esi], ecx

; 232  :   else

	jmp	SHORT $LN1@set_edge_h
$LN2@set_edge_h:

; 233  :      get_edge_vertices(e_id)[web.headvnum] = v_id;

	mov	ecx, DWORD PTR _web+124
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _web+216
	add	edx, DWORD PTR [ecx+esi+304]
	mov	ecx, DWORD PTR _v_id$[ebp]
	mov	esi, DWORD PTR _web+636
	mov	DWORD PTR [edx+esi*4], ecx
$LN1@set_edge_h:

; 234  :   insert_vertex_edge(v_id,inverse_id(e_id));

	xor	eax, 134217728				; 08000000H
	push	eax
	push	ecx
	call	_insert_vertex_edge

; 235  :   top_timestamp = ++global_timestamp;

	mov	eax, DWORD PTR _global_timestamp
	add	esp, 8
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	pop	esi

; 236  : }

	pop	ebp
	ret	0
_set_edge_headv ENDP
_TEXT	ENDS
PUBLIC	_set_edge_midv
; Function compile flags: /Ogtp
;	COMDAT _set_edge_midv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_v_id$ = 12						; size = 4
_set_edge_midv PROC					; COMDAT

; 241  : { get_edge_vertices(e_id)[2] = v_id;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _e_id$[ebp]
	mov	ecx, DWORD PTR _web+124
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	push	esi
	mov	esi, DWORD PTR _dymem
	mov	esi, DWORD PTR [eax+esi+304]
	mov	eax, DWORD PTR _v_id$[ebp]
	mov	DWORD PTR [ecx+esi+8], eax

; 242  :   set_vertex_edge(v_id,e_id);

	mov	esi, DWORD PTR _web+12
	mov	ecx, eax

; 243  :   set_attr(v_id,Q_MIDPOINT);

	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	esi, DWORD PTR [ecx+esi]
	mov	DWORD PTR [esi+28], edx
	mov	edx, DWORD PTR _web[eax+12]
	mov	ecx, DWORD PTR [edx+ecx]
	mov	eax, DWORD PTR [ecx+12]
	or	DWORD PTR [ecx+8], 131072		; 00020000H
	mov	DWORD PTR [ecx+12], eax

; 244  :   top_timestamp = ++global_timestamp;

	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	pop	esi

; 245  : }

	pop	ebp
	ret	0
_set_edge_midv ENDP
_TEXT	ENDS
PUBLIC	_get_facet_body
; Function compile flags: /Ogtp
;	COMDAT _get_facet_body
_TEXT	SEGMENT
_f_id$ = 8						; size = 4
_get_facet_body PROC					; COMDAT

; 250  : {

	push	ebp
	mov	ebp, esp

; 251  :   if ( web.skel[BODY].count == 0 ) return NULLID;

	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN4@get_facet_
$LN7@get_facet_:
	xor	eax, eax

; 255  : }

	pop	ebp
	ret	0
$LN4@get_facet_:

; 252  :   if ( !valid_id(f_id) ) return NULLID;

	mov	eax, DWORD PTR _f_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN7@get_facet_

; 253  :   if ( inverted(f_id) ) return F_ELID(f_id,F_BODY_LIST_ATTR)[1];

	mov	ecx, DWORD PTR _web+236
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_facet_
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax+4]

; 255  : }

	pop	ebp
	ret	0
$LN2@get_facet_:

; 254  :   else  return F_ELID(f_id,F_BODY_LIST_ATTR)[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax]

; 255  : }

	pop	ebp
	ret	0
_get_facet_body ENDP
_TEXT	ENDS
PUBLIC	_get_facet_fe
; Function compile flags: /Ogtp
;	COMDAT _get_facet_fe
_TEXT	SEGMENT
_f_id$ = 8						; size = 4
_get_facet_fe PROC					; COMDAT

; 260  : {

	push	ebp
	mov	ebp, esp

; 261  :   facetedge_id fe;
; 262  :   
; 263  :   if ( !valid_id(f_id) ) return NULLID;

	mov	ecx, DWORD PTR _f_id$[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN2@get_facet_@2
	xor	eax, eax

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
$LN2@get_facet_@2:

; 264  :   fe = fptr(f_id)->fe_id;

	mov	edx, DWORD PTR _web+236
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]

; 265  :   if ( inverted(f_id) ) invert(fe);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_facet_@2
	xor	eax, 134217728				; 08000000H
$LN3@get_facet_@2:

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
_get_facet_fe ENDP
_TEXT	ENDS
PUBLIC	_get_body_facet
; Function compile flags: /Ogtp
;	COMDAT _get_body_facet
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_facet PROC					; COMDAT

; 279  : { return ( valid_id(b_id) ? bptr(b_id)->f_id : NULLID ); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_f
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+400]
	pop	ebp
	ret	0
$LN3@get_body_f:
	xor	eax, eax
	pop	ebp
	ret	0
_get_body_facet ENDP
_TEXT	ENDS
PUBLIC	_get_body_fe
; Function compile flags: /Ogtp
;	COMDAT _get_body_fe
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_fe PROC					; COMDAT

; 282  : { facet_id f_id =  valid_id(b_id) ? bptr(b_id)->f_id : NULLID ;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_f@2
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR [edx+400]
	jmp	SHORT $LN4@get_body_f@2
$LN3@get_body_f@2:
	xor	ecx, ecx
$LN4@get_body_f@2:

; 283  :   return valid_id(f_id) ? get_facet_fe(f_id) : NULLID;

	test	ecx, 268435456				; 10000000H
	je	SHORT $LN5@get_body_f@2
	mov	edx, DWORD PTR _web+236
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN6@get_body_f@2
	xor	eax, 134217728				; 08000000H

; 284  : }

	pop	ebp
	ret	0
$LN5@get_body_f@2:

; 283  :   return valid_id(f_id) ? get_facet_fe(f_id) : NULLID;

	xor	eax, eax
$LN6@get_body_f@2:

; 284  : }

	pop	ebp
	ret	0
_get_body_fe ENDP
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	_get_body_volume
EXTRN	__fltused:DWORD
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _get_body_volume
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_volume PROC					; COMDAT

; 308  :     { return    ( valid_id(b_id) ?  bptr(b_id)->volume : 0.0 ) ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_v
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+40]
	pop	ebp
	ret	0
$LN3@get_body_v:
	fldz
	pop	ebp
	ret	0
_get_body_volume ENDP
_TEXT	ENDS
PUBLIC	_get_body_fixvol
; Function compile flags: /Ogtp
;	COMDAT _get_body_fixvol
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_fixvol PROC					; COMDAT

; 311  :      { return ( valid_id(b_id) ?  bptr(b_id)->fixvol : 0.0 ) ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_f@3
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+32]
	pop	ebp
	ret	0
$LN3@get_body_f@3:
	fldz
	pop	ebp
	ret	0
_get_body_fixvol ENDP
_TEXT	ENDS
PUBLIC	_get_body_volconst
; Function compile flags: /Ogtp
;	COMDAT _get_body_volconst
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_volconst PROC					; COMDAT

; 320  :   { return    ( valid_id(b_id) ?  bptr(b_id)->volconst : 0.0 ) ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_v@2
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+328]
	pop	ebp
	ret	0
$LN3@get_body_v@2:
	fldz
	pop	ebp
	ret	0
_get_body_volconst ENDP
_TEXT	ENDS
PUBLIC	_set_body_volconst
EXTRN	_gen_quant_list:DWORD
EXTRN	_everything_quantities_flag:DWORD
; Function compile flags: /Ogtp
;	COMDAT _set_body_volconst
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_v$ = 12						; size = 8
_set_body_volconst PROC					; COMDAT

; 329  : { if ( !valid_id(b_id) ) return;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN1@set_body_v

; 330  :   bptr(b_id)->volconst = v;

	mov	ecx, DWORD PTR _web+348
	fld	QWORD PTR _v$[ebp]
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	edx, DWORD PTR [eax+ecx]
	fst	QWORD PTR [edx+328]

; 331  :   if ( everything_quantities_flag )

	cmp	DWORD PTR _everything_quantities_flag, 0
	je	SHORT $LN6@set_body_v

; 332  :   { struct gen_quant *q = GEN_QUANT(get_body_volquant(b_id));

	mov	ecx, DWORD PTR _web+348
	mov	edx, DWORD PTR [eax+ecx]
	mov	eax, DWORD PTR [edx+404]

; 333  :     q->volconst = v;

	mov	ecx, DWORD PTR _gen_quant_list
	imul	eax, 368				; 00000170H
	fstp	QWORD PTR [eax+ecx+208]

; 334  :   }
; 335  : }

	pop	ebp
	ret	0
$LN6@set_body_v:

; 333  :     q->volconst = v;

	fstp	ST(0)
$LN1@set_body_v:

; 334  :   }
; 335  : }

	pop	ebp
	ret	0
_set_body_volconst ENDP
_TEXT	ENDS
PUBLIC	_get_meth_offset
; Function compile flags: /Ogtp
;	COMDAT _get_meth_offset
_TEXT	SEGMENT
_type$ = 8						; size = 4
_get_meth_offset PROC					; COMDAT

; 376  : { int meth_offset;

	push	ebp
	mov	ebp, esp

; 377  :   meth_offset = EXTRAS(type)[web.meth_attr[type]].offset; 

	mov	eax, DWORD PTR _type$[ebp]
	mov	ecx, DWORD PTR _web[eax*4+5664]
	imul	eax, 112				; 00000070H

; 378  :   return meth_offset;

	mov	edx, DWORD PTR _dymem
	imul	ecx, 240				; 000000f0H
	add	ecx, DWORD PTR _web[eax+104]
	mov	eax, DWORD PTR [ecx+edx+64]

; 379  : }

	pop	ebp
	ret	0
_get_meth_offset ENDP
_TEXT	ENDS
PUBLIC	_upgrade
_BSS	SEGMENT
_felist	DD	01H DUP (?)
_fecount DD	01H DUP (?)
_blist	DD	01H DUP (?)
_bcount	DD	01H DUP (?)
_flist	DD	01H DUP (?)
_fcount	DD	01H DUP (?)
_elist	DD	01H DUP (?)
_ecount	DD	01H DUP (?)
_vlist	DD	01H DUP (?)
_v_count DD	01H DUP (?)
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\tordup.c
_BSS	ENDS
;	COMDAT _upgrade
_TEXT	SEGMENT
_id$ = 8						; size = 4
_upgrade PROC						; COMDAT

; 477  : {

	push	ebp
	mov	ebp, esp

; 478  :     int j = loc_ordinal(id);

	mov	edx, DWORD PTR _id$[ebp]
	mov	eax, edx
	shr	eax, 28					; 0000001cH
	and	eax, 1
	je	SHORT $LN17@upgrade
	mov	ecx, edx
	and	ecx, 134217727				; 07ffffffH
	jmp	SHORT $LN18@upgrade
$LN17@upgrade:
	or	ecx, -1
$LN18@upgrade:

; 479  :     element_id new_id;
; 480  : 
; 481  :     if ( !valid_id(id) ) return NULLID;

	test	eax, eax
	jne	SHORT $LN14@upgrade

; 501  :       }
; 502  :     return new_id;
; 503  : } // end upgrade()

	pop	ebp
	ret	0
$LN14@upgrade:

; 482  : 
; 483  :     switch( id_type(id) )

	mov	eax, edx
	shr	eax, 29					; 0000001dH
	push	esi
	cmp	eax, 4
	ja	SHORT $LN1@upgrade
	jmp	DWORD PTR $LN21@upgrade[eax*4]
$LN11@upgrade:

; 484  :       {
; 485  :          case VERTEX: new_id = vlist[j+v_count];

	mov	eax, DWORD PTR _v_count
	mov	esi, DWORD PTR _vlist
$LN20@upgrade:
	add	eax, ecx
	mov	eax, DWORD PTR [esi+eax*4]

; 486  :                       if ( !equal_id(id,vlist[j]) ) invert(new_id);

	cmp	edx, DWORD PTR [esi+ecx*4]
	je	SHORT $LN12@upgrade
	xor	eax, 134217728				; 08000000H
	pop	esi

; 501  :       }
; 502  :     return new_id;
; 503  : } // end upgrade()

	pop	ebp
	ret	0
$LN9@upgrade:

; 487  :                       break;
; 488  :          case EDGE  : new_id = elist[j+ecount];

	mov	eax, DWORD PTR _ecount
	mov	esi, DWORD PTR _elist

; 489  :                       if ( !equal_id(id,elist[j]) ) invert(new_id);
; 490  :                       break;

	jmp	SHORT $LN20@upgrade
$LN7@upgrade:

; 491  :          case FACET : new_id = flist[j+fcount];

	mov	eax, DWORD PTR _fcount
	mov	esi, DWORD PTR _flist

; 492  :                       if ( !equal_id(id,flist[j]) ) invert(new_id);
; 493  :                       break;

	jmp	SHORT $LN20@upgrade
$LN5@upgrade:

; 494  :          case BODY  : new_id = blist[j+bcount];

	mov	eax, DWORD PTR _bcount
	mov	esi, DWORD PTR _blist

; 495  :                       if ( !equal_id(id,blist[j]) ) invert(new_id);
; 496  :                       break;

	jmp	SHORT $LN20@upgrade
$LN3@upgrade:

; 497  :          case FACETEDGE: new_id = felist[j+fecount];

	mov	eax, DWORD PTR _fecount
	mov	esi, DWORD PTR _felist

; 498  :                       if ( !equal_id(id,felist[j]) ) invert(new_id);
; 499  :                       break;

	jmp	SHORT $LN20@upgrade
$LN1@upgrade:

; 500  :          default:     new_id = NULLID;

	xor	eax, eax
$LN12@upgrade:
	pop	esi

; 501  :       }
; 502  :     return new_id;
; 503  : } // end upgrade()

	pop	ebp
	ret	0
	npad	1
$LN21@upgrade:
	DD	$LN11@upgrade
	DD	$LN9@upgrade
	DD	$LN7@upgrade
	DD	$LN5@upgrade
	DD	$LN3@upgrade
_upgrade ENDP
_TEXT	ENDS
PUBLIC	_reconvert_bodies_to_quantities
EXTRN	_convert_bodies_to_quantities:PROC
EXTRN	_convert_new_body_to_quantity:PROC
EXTRN	_meth_inst_list:DWORD
; Function compile flags: /Ogtp
;	COMDAT _reconvert_bodies_to_quantities
_TEXT	SEGMENT
tv315 = -16						; size = 4
_meth_offset$89390 = -12				; size = 4
tv503 = -8						; size = 4
tv507 = -4						; size = 4
_reconvert_bodies_to_quantities PROC			; COMDAT

; 515  : { int type;

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx

; 516  :   int k;
; 517  :   struct method_instance *mi;
; 518  :   struct element *e_ptr;
; 519  :   body_id b_id;
; 520  :   element_id id;
; 521  : 
; 522  :   for ( type = VERTEX ; type <= FACET ; type++ )

	mov	ecx, OFFSET _web+48
	mov	edx, OFFSET _web+5664
	push	esi
	mov	DWORD PTR tv503[ebp], ecx
	mov	DWORD PTR tv507[ebp], edx
	push	edi
	npad	7
$LL17@reconvert_:

; 523  :   { int meth_offset = get_meth_offset(type);

	mov	eax, DWORD PTR [edx]
	mov	esi, DWORD PTR _dymem
	imul	eax, 240				; 000000f0H
	add	eax, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [eax+esi+64]
	mov	DWORD PTR _meth_offset$89390[ebp], eax

; 524  :     int *methlist;
; 525  :     FOR_ALL_ELEMENTS(type,id)

	mov	eax, DWORD PTR [ecx]
	test	eax, 268435456				; 10000000H
	je	$LN16@reconvert_
$LL32@reconvert_:
	mov	ecx, eax
	shr	ecx, 29					; 0000001dH
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _web[ecx+12]
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	lea	ebx, DWORD PTR _web[ecx+12]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR tv315[ebp], eax
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN13@reconvert_

; 526  :     { e_ptr = elptr(id);
; 527  :       methlist = (int*)((char*)e_ptr+meth_offset);

	mov	eax, DWORD PTR _meth_offset$89390[ebp]

; 528  :       for ( k = 0 ; k < (int)e_ptr->method_count ; k++ )

	xor	esi, esi
	lea	edi, DWORD PTR [ecx+eax]
	cmp	dx, WORD PTR [ecx+24]
	jae	SHORT $LN13@reconvert_
$LL9@reconvert_:

; 529  :       { 
; 530  :         mi = METH_INSTANCE(abs(methlist[k]));

	mov	eax, DWORD PTR [edi+esi*4]
	cdq
	xor	eax, edx
	sub	eax, edx
	cdq
	xor	eax, edx
	sub	eax, edx

; 531  :         if ( mi->flags & BODY_INSTANCE )

	mov	edx, DWORD PTR _meth_inst_list
	imul	eax, 2928				; 00000b70H
	test	DWORD PTR [eax+edx+140], 16777216	; 01000000H
	je	SHORT $LN8@reconvert_

; 532  :         { methlist[k] = methlist[--(e_ptr->method_count)];

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx+24], ax
	movzx	edx, WORD PTR [ecx+24]
	mov	eax, DWORD PTR [edi+edx*4]
	mov	DWORD PTR [edi+esi*4], eax

; 533  :           k--;

	dec	esi
$LN8@reconvert_:

; 528  :       for ( k = 0 ; k < (int)e_ptr->method_count ; k++ )

	movzx	edx, WORD PTR [ecx+24]
	inc	esi
	cmp	esi, edx
	jl	SHORT $LL9@reconvert_
$LN13@reconvert_:

; 524  :     int *methlist;
; 525  :     FOR_ALL_ELEMENTS(type,id)

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR tv315[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR [edx]
	test	eax, 268435456				; 10000000H
	jne	$LL32@reconvert_
	mov	ecx, DWORD PTR tv503[ebp]
	mov	edx, DWORD PTR tv507[ebp]
$LN16@reconvert_:

; 516  :   int k;
; 517  :   struct method_instance *mi;
; 518  :   struct element *e_ptr;
; 519  :   body_id b_id;
; 520  :   element_id id;
; 521  : 
; 522  :   for ( type = VERTEX ; type <= FACET ; type++ )

	add	edx, 4
	add	ecx, 112				; 00000070H
	mov	DWORD PTR tv507[ebp], edx
	mov	DWORD PTR tv503[ebp], ecx
	cmp	edx, OFFSET _web+5672
	jle	$LL17@reconvert_

; 534  :         }
; 535  :       }
; 536  :     }
; 537  :   }
; 538  :   FOR_ALL_BODIES(b_id)

	mov	ecx, DWORD PTR _web+384
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN3@reconvert_
	mov	edi, DWORD PTR _web+348
	npad	4
$LL5@reconvert_:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+edi]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN4@reconvert_

; 539  :      convert_new_body_to_quantity(b_id);

	push	ecx
	call	_convert_new_body_to_quantity
	mov	edi, DWORD PTR _web+348
	add	esp, 4
$LN4@reconvert_:

; 534  :         }
; 535  :       }
; 536  :     }
; 537  :   }
; 538  :   FOR_ALL_BODIES(b_id)

	mov	eax, DWORD PTR [esi+edi]
	mov	ecx, DWORD PTR [eax]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LL5@reconvert_
$LN3@reconvert_:

; 540  :   convert_bodies_to_quantities();

	call	_convert_bodies_to_quantities
	pop	edi
	pop	esi
	pop	ebx

; 541  : } // end reconvert_bodies_to_quantities()

	mov	esp, ebp
	pop	ebp
	ret	0
_reconvert_bodies_to_quantities ENDP
_TEXT	ENDS
PUBLIC	??_C@_02PHMGELLB@?6?6?$AA@			; `string'
PUBLIC	??_C@_0BN@HBEKJDAL@?$CF3d?5?5?5?$CF3s?5?5?5?5?5?5?$CF3d?5?5?$CF3d?5?$CF3d?6?$AA@ ; `string'
PUBLIC	??_C@_0BP@CBLPKFPI@?5?5N?5?5?5?5f_id?5?5?5?5e?$FL0?$FN?5e?$FL1?$FN?5e?$FL2?$FN?6?$AA@ ; `string'
PUBLIC	??_C@_0BB@DGMMOHEI@?6detorus?5facets?6?$AA@	; `string'
PUBLIC	??_C@_0CA@BHGDAHIE@?$CF3d?5?5?5?$CF3s?5?5?5?5?$CF3d?5?5?5?5?5?5?$CF3d?5?5?$CF3d?6?$AA@ ; `string'
PUBLIC	??_C@_0CD@LBKGBJIA@?5?5N?5?5?5?5e_id?5?5?5orig?5?5?5?5?5v?$FL0?$FN?5?5v?$FL1@ ; `string'
PUBLIC	??_C@_0BA@EAGPKOGA@?6detorus?5edges?6?$AA@	; `string'
PUBLIC	??_C@_0CL@IBBJJEON@?$CF3d?5?5?5?$CF3s?5?5?5?5?$CF3d?5?5?5?5?5?$CF10?48f?5?$CF10?4@ ; `string'
PUBLIC	??_C@_04HGGBINEM@?$CFs?$CFd?$AA@		; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_01JOAMLHOP@?9?$AA@			; `string'
PUBLIC	??_C@_0DG@KAFIOMNE@?5?5N?5?5?5?5v_id?5?5?5orig?5?5?5?5?5?5?5?5?5x?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BD@BNIBKNCA@?6detorus?5vertices?6?$AA@	; `string'
PUBLIC	_detorus_dump
EXTRN	_sprintf:PROC
EXTRN	_elnames:BYTE
EXTRN	_printf:PROC
;	COMDAT ??_C@_02PHMGELLB@?6?6?$AA@
CONST	SEGMENT
??_C@_02PHMGELLB@?6?6?$AA@ DB 0aH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HBEKJDAL@?$CF3d?5?5?5?$CF3s?5?5?5?5?5?5?$CF3d?5?5?$CF3d?5?$CF3d?6?$AA@
CONST	SEGMENT
??_C@_0BN@HBEKJDAL@?$CF3d?5?5?5?$CF3s?5?5?5?5?5?5?$CF3d?5?5?$CF3d?5?$CF3d?6?$AA@ DB '%'
	DB	'3d   %3s      %3d  %3d %3d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@CBLPKFPI@?5?5N?5?5?5?5f_id?5?5?5?5e?$FL0?$FN?5e?$FL1?$FN?5e?$FL2?$FN?6?$AA@
CONST	SEGMENT
??_C@_0BP@CBLPKFPI@?5?5N?5?5?5?5f_id?5?5?5?5e?$FL0?$FN?5e?$FL1?$FN?5e?$FL2?$FN?6?$AA@ DB ' '
	DB	' N    f_id    e[0] e[1] e[2]', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DGMMOHEI@?6detorus?5facets?6?$AA@
CONST	SEGMENT
??_C@_0BB@DGMMOHEI@?6detorus?5facets?6?$AA@ DB 0aH, 'detorus facets', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@BHGDAHIE@?$CF3d?5?5?5?$CF3s?5?5?5?5?$CF3d?5?5?5?5?5?5?$CF3d?5?5?$CF3d?6?$AA@
CONST	SEGMENT
??_C@_0CA@BHGDAHIE@?$CF3d?5?5?5?$CF3s?5?5?5?5?$CF3d?5?5?5?5?5?5?$CF3d?5?5?$CF3d?6?$AA@ DB '%'
	DB	'3d   %3s    %3d      %3d  %3d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LBKGBJIA@?5?5N?5?5?5?5e_id?5?5?5orig?5?5?5?5?5v?$FL0?$FN?5?5v?$FL1@
CONST	SEGMENT
??_C@_0CD@LBKGBJIA@?5?5N?5?5?5?5e_id?5?5?5orig?5?5?5?5?5v?$FL0?$FN?5?5v?$FL1@ DB ' '
	DB	' N    e_id   orig     v[0]  v[1]', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EAGPKOGA@?6detorus?5edges?6?$AA@
CONST	SEGMENT
??_C@_0BA@EAGPKOGA@?6detorus?5edges?6?$AA@ DB 0aH, 'detorus edges', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@IBBJJEON@?$CF3d?5?5?5?$CF3s?5?5?5?5?$CF3d?5?5?5?5?5?$CF10?48f?5?$CF10?4@
CONST	SEGMENT
??_C@_0CL@IBBJJEON@?$CF3d?5?5?5?$CF3s?5?5?5?5?$CF3d?5?5?5?5?5?$CF10?48f?5?$CF10?4@ DB '%'
	DB	'3d   %3s    %3d     %10.8f %10.8f %10.8f', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04HGGBINEM@?$CFs?$CFd?$AA@
CONST	SEGMENT
??_C@_04HGGBINEM@?$CFs?$CFd?$AA@ DB '%s%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01JOAMLHOP@?9?$AA@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9?$AA@ DB '-', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@KAFIOMNE@?5?5N?5?5?5?5v_id?5?5?5orig?5?5?5?5?5?5?5?5?5x?5?5?5?5@
CONST	SEGMENT
??_C@_0DG@KAFIOMNE@?5?5N?5?5?5?5v_id?5?5?5orig?5?5?5?5?5?5?5?5?5x?5?5?5?5@ DB ' '
	DB	' N    v_id   orig         x           y           z', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BNIBKNCA@?6detorus?5vertices?6?$AA@
CONST	SEGMENT
??_C@_0BD@BNIBKNCA@?6detorus?5vertices?6?$AA@ DB 0aH, 'detorus vertices', 0aH
	DB	00H						; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _detorus_dump
_TEXT	SEGMENT
_detorus_dump PROC					; COMDAT

; 592  : { int i;

	push	esi
	push	edi

; 593  :   printf("\ndetorus vertices\n");

	push	OFFSET ??_C@_0BD@BNIBKNCA@?6detorus?5vertices?6?$AA@
	call	_printf

; 594  :   printf("  N    v_id   orig         x           y           z\n");

	push	OFFSET ??_C@_0DG@KAFIOMNE@?5?5N?5?5?5?5v_id?5?5?5orig?5?5?5?5?5?5?5?5?5x?5?5?5?5@
	call	_printf

; 595  :   for ( i = 0 ; i < dt_vcount ; i++ )

	xor	edi, edi
	add	esp, 8
	cmp	DWORD PTR _dt_vcount, edi
	jle	$LN7@detorus_du

; 593  :   printf("\ndetorus vertices\n");

	xor	esi, esi
	npad	7
$LL9@detorus_du:

; 596  : 	printf("%3d   %3s    %3d     %10.8f %10.8f %10.8f\n",i,
; 597  :            SELNAME(dt_vlist[i].v_id),
; 598  :  dt_vlist[i].orig,
; 599  :            (DOUBLE)dt_vlist[i].x[0],(DOUBLE)dt_vlist[i].x[1],
; 600  :            (DOUBLE)dt_vlist[i].x[2]);

	mov	ecx, DWORD PTR _dt_vlist
	mov	eax, DWORD PTR [esi+ecx]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN14@detorus_du
	mov	ecx, OFFSET ??_C@_01JOAMLHOP@?9?$AA@
	test	eax, 134217728				; 08000000H
	jne	SHORT $LN13@detorus_du
	mov	ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN13@detorus_du:
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	ecx
	push	OFFSET ??_C@_04HGGBINEM@?$CFs?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	mov	ecx, DWORD PTR _dt_vlist
	add	esp, 16					; 00000010H
	mov	edx, OFFSET _elnames
	jmp	SHORT $LN15@detorus_du
$LN14@detorus_du:
	mov	edx, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN15@detorus_du:
	mov	eax, DWORD PTR [esi+ecx+20]
	fld	QWORD PTR [eax+16]
	sub	esp, 24					; 00000018H
	fstp	QWORD PTR [esp+16]
	fld	QWORD PTR [eax+8]
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR [eax]
	mov	eax, DWORD PTR [esi+ecx+8]
	fstp	QWORD PTR [esp]
	push	eax
	push	edx
	push	edi
	push	OFFSET ??_C@_0CL@IBBJJEON@?$CF3d?5?5?5?$CF3s?5?5?5?5?$CF3d?5?5?5?5?5?$CF10?48f?5?$CF10?4@
	call	_printf
	inc	edi
	add	esp, 40					; 00000028H
	add	esi, 24					; 00000018H
	cmp	edi, DWORD PTR _dt_vcount
	jl	$LL9@detorus_du
$LN7@detorus_du:

; 601  :   printf("\ndetorus edges\n");

	push	OFFSET ??_C@_0BA@EAGPKOGA@?6detorus?5edges?6?$AA@
	call	_printf

; 602  :   printf("  N    e_id   orig     v[0]  v[1]\n");

	push	OFFSET ??_C@_0CD@LBKGBJIA@?5?5N?5?5?5?5e_id?5?5?5orig?5?5?5?5?5v?$FL0?$FN?5?5v?$FL1@
	call	_printf

; 603  :   for ( i = 1 ; i < dt_ecount ; i++ )

	mov	edi, 1
	add	esp, 8
	cmp	DWORD PTR _dt_ecount, edi
	jle	$LN4@detorus_du

; 601  :   printf("\ndetorus edges\n");

	mov	esi, 12					; 0000000cH
	push	ebx
	npad	7
$LL30@detorus_du:

; 604  : 	printf("%3d   %3s    %3d      %3d  %3d\n",i,SELNAME(dt_elist[i].e_id),
; 605  : 	   dt_elist[i].orig,dt_elist[i].v[0],dt_elist[i].v[1]);

	mov	ecx, DWORD PTR _dt_elist
	mov	eax, DWORD PTR [esi+ecx]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN18@detorus_du
	mov	ecx, OFFSET ??_C@_01JOAMLHOP@?9?$AA@
	test	eax, 134217728				; 08000000H
	jne	SHORT $LN17@detorus_du
	mov	ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN17@detorus_du:
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	ecx
	push	OFFSET ??_C@_04HGGBINEM@?$CFs?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	mov	ecx, DWORD PTR _dt_elist
	add	esp, 16					; 00000010H
	mov	edx, OFFSET _elnames
	jmp	SHORT $LN19@detorus_du
$LN18@detorus_du:
	mov	edx, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN19@detorus_du:
	mov	eax, DWORD PTR [esi+ecx+8]
	mov	ebx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [esi+ecx+4]
	push	ebx
	push	eax
	push	ecx
	push	edx
	push	edi
	push	OFFSET ??_C@_0CA@BHGDAHIE@?$CF3d?5?5?5?$CF3s?5?5?5?5?$CF3d?5?5?5?5?5?5?$CF3d?5?5?$CF3d?6?$AA@
	call	_printf
	inc	edi
	add	esp, 24					; 00000018H
	add	esi, 12					; 0000000cH
	cmp	edi, DWORD PTR _dt_ecount
	jl	SHORT $LL30@detorus_du
	pop	ebx
$LN4@detorus_du:

; 606  :   printf("\ndetorus facets\n");

	push	OFFSET ??_C@_0BB@DGMMOHEI@?6detorus?5facets?6?$AA@
	call	_printf

; 607  :   printf("  N    f_id    e[0] e[1] e[2]\n");

	push	OFFSET ??_C@_0BP@CBLPKFPI@?5?5N?5?5?5?5f_id?5?5?5?5e?$FL0?$FN?5e?$FL1?$FN?5e?$FL2?$FN?6?$AA@
	call	_printf

; 608  :   for ( i = 0 ; i < dt_fcount ; i++ )

	xor	edi, edi
	add	esp, 8
	cmp	DWORD PTR _dt_fcount, edi
	jle	SHORT $LN1@detorus_du

; 606  :   printf("\ndetorus facets\n");

	xor	esi, esi
	npad	4
$LL3@detorus_du:

; 609  : 	printf("%3d   %3s      %3d  %3d %3d\n",i,SELNAME(dt_flist[i].f_id),
; 610  : 	  dt_flist[i].e[0], dt_flist[i].e[1],dt_flist[i].e[2]);

	mov	ecx, DWORD PTR _dt_flist
	mov	eax, DWORD PTR [esi+ecx]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN22@detorus_du
	mov	ecx, OFFSET ??_C@_01JOAMLHOP@?9?$AA@
	test	eax, 134217728				; 08000000H
	jne	SHORT $LN21@detorus_du
	mov	ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN21@detorus_du:
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	ecx
	push	OFFSET ??_C@_04HGGBINEM@?$CFs?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	mov	ecx, DWORD PTR _dt_flist
	add	esp, 16					; 00000010H
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN23@detorus_du
$LN22@detorus_du:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN23@detorus_du:
	mov	edx, DWORD PTR [esi+ecx+12]
	push	edx
	mov	edx, DWORD PTR [esi+ecx+8]
	mov	ecx, DWORD PTR [esi+ecx+4]
	push	edx
	push	ecx
	push	eax
	push	edi
	push	OFFSET ??_C@_0BN@HBEKJDAL@?$CF3d?5?5?5?$CF3s?5?5?5?5?5?5?$CF3d?5?5?$CF3d?5?$CF3d?6?$AA@
	call	_printf
	inc	edi
	add	esp, 24					; 00000018H
	add	esi, 24					; 00000018H
	cmp	edi, DWORD PTR _dt_fcount
	jl	SHORT $LL3@detorus_du
$LN1@detorus_du:

; 611  :   printf("\n\n");

	push	OFFSET ??_C@_02PHMGELLB@?6?6?$AA@
	call	_printf
	add	esp, 4
	pop	edi
	pop	esi

; 612  : 
; 613  : }

	ret	0
_detorus_dump ENDP
_TEXT	ENDS
PUBLIC	_dt_vertex_key
EXTRN	_dot:PROC
; Function compile flags: /Ogtp
;	COMDAT _dt_vertex_key
_TEXT	SEGMENT
_a$ = 8							; size = 4
_dt_vertex_key PROC					; COMDAT

; 624  : { return dot(a->x,dt_random_vector,SDIM);

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _web+616
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	eax
	push	OFFSET _dt_random_vector
	push	edx
	call	_dot
	add	esp, 12					; 0000000cH

; 625  : }

	pop	ebp
	ret	0
_dt_vertex_key ENDP
_TEXT	ENDS
PUBLIC	_dt_vertex_comp
; Function compile flags: /Ogtp
;	COMDAT _dt_vertex_comp
_TEXT	SEGMENT
_akey$ = -8						; size = 8
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dt_vertex_comp PROC					; COMDAT

; 632  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 633  :   REAL akey,bkey;
; 634  : 
; 635  :   akey = dt_vertex_key(a);

	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	call	_dt_vertex_key
	fstp	QWORD PTR _akey$[ebp]

; 636  :   bkey = dt_vertex_key(b);

	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_dt_vertex_key

; 637  : 
; 638  :   if ( akey < bkey ) return -1;

	fld	QWORD PTR _akey$[ebp]
	fcom	ST(1)
	add	esp, 8
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@dt_vertex_
	fstp	ST(1)
	or	eax, -1
	fstp	ST(0)

; 642  : } // end dt_vertex_comp()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@dt_vertex_:

; 639  :   if ( akey > bkey ) return  1;

	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN1@dt_vertex_
	mov	eax, 1

; 642  : } // end dt_vertex_comp()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN1@dt_vertex_:

; 640  :   
; 641  :   return 0;

	xor	eax, eax

; 642  : } // end dt_vertex_comp()

	mov	esp, ebp
	pop	ebp
	ret	0
_dt_vertex_comp ENDP
_TEXT	ENDS
PUBLIC	_dt_vid_comp
; Function compile flags: /Ogtp
;	COMDAT _dt_vid_comp
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dt_vid_comp PROC					; COMDAT

; 649  : { 

	push	ebp
	mov	ebp, esp

; 650  :   if ( a->orig_v_id < b->orig_v_id ) return -1;

	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	esi
	mov	esi, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [esi+4]
	cmp	eax, ecx
	jae	SHORT $LN5@dt_vid_com
	or	eax, -1
	pop	esi

; 654  : } // end dt_vid_comp()

	pop	ebp
	ret	0
$LN5@dt_vid_com:

; 651  :   if ( a->orig_v_id > b->orig_v_id ) return  1;

	jbe	SHORT $LN1@dt_vid_com
	mov	eax, 1
	pop	esi

; 654  : } // end dt_vid_comp()

	pop	ebp
	ret	0
$LN1@dt_vid_com:

; 652  :   
; 653  :   return dt_vertex_comp(a,b);

	push	esi
	push	edx
	call	_dt_vertex_comp
	add	esp, 8
	pop	esi

; 654  : } // end dt_vid_comp()

	pop	ebp
	ret	0
_dt_vid_comp ENDP
_TEXT	ENDS
PUBLIC	_dt_vertex_diff
EXTRN	_detorus_sticky:DWORD
; Function compile flags: /Ogtp
;	COMDAT _dt_vertex_diff
_TEXT	SEGMENT
_akey$ = -8						; size = 8
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dt_vertex_diff PROC					; COMDAT

; 665  : { int i;

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx
	push	esi

; 666  :   REAL akey,bkey;
; 667  : 
; 668  :   akey = dt_vertex_key(a);

	mov	esi, DWORD PTR _a$[ebp]
	push	esi
	call	_dt_vertex_key
	fstp	QWORD PTR _akey$[ebp]

; 669  :   bkey = dt_vertex_key(b);

	mov	ebx, DWORD PTR _b$[ebp]
	push	ebx
	call	_dt_vertex_key

; 670  : 
; 671  :   if ( fabs(akey-bkey) > 2*dt_eps )

	fsubr	QWORD PTR _akey$[ebp]
	add	esp, 8
	fabs
	fld	QWORD PTR _dt_eps
	fld	ST(0)
	fadd	ST(0), ST(1)
	fcomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 5
	jp	SHORT $LN9@dt_vertex_@2

; 678  :     }
; 679  :   }
; 680  : 
; 681  :   for ( i = 0 ; i < SDIM; i++ )

	pop	esi
	fstp	ST(0)
	mov	eax, 2
	pop	ebx

; 686  : } // end dt_vertex_diff()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@dt_vertex_@2:

; 672  :     return DT_OUT_OF_RANGE;
; 673  : 
; 674  :   // Compare parent vertices only if both have them.
; 675  :   if ( !detorus_sticky )

	cmp	DWORD PTR _detorus_sticky, 0
	jne	SHORT $LN6@dt_vertex_@2

; 676  :   { if ( valid_id(a->v_id) && valid_id(b->v_id) )

	mov	ecx, DWORD PTR [esi]
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN6@dt_vertex_@2
	mov	eax, DWORD PTR [ebx]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN6@dt_vertex_@2

; 677  :     { if ( a->v_id != b->v_id ) return DT_DIFF_IN_RANGE;

	cmp	ecx, eax
	je	SHORT $LN6@dt_vertex_@2

; 678  :     }
; 679  :   }
; 680  : 
; 681  :   for ( i = 0 ; i < SDIM; i++ )

	pop	esi
	fstp	ST(0)
	xor	eax, eax
	pop	ebx

; 686  : } // end dt_vertex_diff()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@dt_vertex_@2:
	push	edi

; 678  :     }
; 679  :   }
; 680  : 
; 681  :   for ( i = 0 ; i < SDIM; i++ )

	mov	edi, DWORD PTR _web+616
	xor	edx, edx
	test	edi, edi
	jle	SHORT $LN30@dt_vertex_@2
	mov	ecx, DWORD PTR [ebx+20]
	mov	esi, DWORD PTR [esi+20]
	sub	esi, ecx
$LN5@dt_vertex_@2:

; 682  :   { if ( a->x[i] < b->x[i] - dt_eps ) return DT_DIFF_IN_RANGE;

	fld	QWORD PTR [ecx]
	fsub	ST(0), ST(1)
	fcomp	QWORD PTR [esi+ecx]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN37@dt_vertex_@2

; 683  :     if ( a->x[i] > b->x[i] + dt_eps ) return DT_DIFF_IN_RANGE;

	fld	QWORD PTR [ecx]
	fadd	ST(0), ST(1)
	fcomp	QWORD PTR [esi+ecx]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN37@dt_vertex_@2

; 678  :     }
; 679  :   }
; 680  : 
; 681  :   for ( i = 0 ; i < SDIM; i++ )

	inc	edx
	add	ecx, 8
	cmp	edx, edi
	jl	SHORT $LN5@dt_vertex_@2
$LN30@dt_vertex_@2:
	pop	edi
	fstp	ST(0)
	pop	esi

; 684  :   }
; 685  :   return DT_MERGEABLE;

	mov	eax, 1
	pop	ebx

; 686  : } // end dt_vertex_diff()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN37@dt_vertex_@2:
	pop	edi

; 678  :     }
; 679  :   }
; 680  : 
; 681  :   for ( i = 0 ; i < SDIM; i++ )

	fstp	ST(0)
	pop	esi

; 683  :     if ( a->x[i] > b->x[i] + dt_eps ) return DT_DIFF_IN_RANGE;

	xor	eax, eax
	pop	ebx

; 686  : } // end dt_vertex_diff()

	mov	esp, ebp
	pop	ebp
	ret	0
_dt_vertex_diff ENDP
_TEXT	ENDS
PUBLIC	_dt_edge_comp
; Function compile flags: /Ogtp
;	COMDAT _dt_edge_comp
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dt_edge_comp PROC					; COMDAT

; 693  : { int i;

	push	ebp
	mov	ebp, esp

; 694  :   /* sort by low vertex number, high vertex number, regardless of head/tail */
; 695  :   for ( i = 0 ; i < EDGE_VERTS ; i++ )

	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	push	ebx
	push	esi
	mov	esi, DWORD PTR [ecx+8]
	mov	ebx, DWORD PTR [esi]
	push	edi
	mov	edi, DWORD PTR [edx+8]
	xor	eax, eax
	mov	ecx, edi
$LL16@dt_edge_co:

; 696  :     if ( (a->v[i] < b->v[0]) && (a->v[i] < b->v[1]) ) return -1;

	mov	edx, DWORD PTR [ecx]
	cmp	edx, ebx
	jge	SHORT $LN15@dt_edge_co
	cmp	edx, DWORD PTR [esi+4]
	jl	SHORT $LN23@dt_edge_co
$LN15@dt_edge_co:

; 694  :   /* sort by low vertex number, high vertex number, regardless of head/tail */
; 695  :   for ( i = 0 ; i < EDGE_VERTS ; i++ )

	inc	eax
	add	ecx, 4
	cmp	eax, 2
	jl	SHORT $LL16@dt_edge_co

; 697  :   for ( i = 0 ; i < EDGE_VERTS ; i++ )

	mov	ebx, DWORD PTR [edi]
	xor	eax, eax
	mov	ecx, esi
$LL12@dt_edge_co:

; 698  :     if ( (b->v[i] < a->v[0]) && (b->v[i] < a->v[1]) ) return  1;

	mov	edx, DWORD PTR [ecx]
	cmp	edx, ebx
	jge	SHORT $LN11@dt_edge_co
	cmp	edx, DWORD PTR [edi+4]
	jl	SHORT $LN24@dt_edge_co
$LN11@dt_edge_co:

; 697  :   for ( i = 0 ; i < EDGE_VERTS ; i++ )

	inc	eax
	add	ecx, 4
	cmp	eax, 2
	jl	SHORT $LL12@dt_edge_co

; 699  :   for ( i = 0 ; i < EDGE_VERTS ; i++ )

	xor	eax, eax
	mov	ecx, edi
	npad	6
$LL8@dt_edge_co:

; 700  :     if ( (a->v[i] > b->v[0]) && (a->v[i] > b->v[1]) ) return  1;

	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR [esi]
	jle	SHORT $LN7@dt_edge_co
	cmp	edx, DWORD PTR [esi+4]
	jg	SHORT $LN24@dt_edge_co
$LN7@dt_edge_co:

; 699  :   for ( i = 0 ; i < EDGE_VERTS ; i++ )

	inc	eax
	add	ecx, 4
	cmp	eax, 2
	jl	SHORT $LL8@dt_edge_co

; 701  :   for ( i = 0 ; i < EDGE_VERTS ; i++ )

	xor	eax, eax
	mov	ecx, esi
$LL4@dt_edge_co:

; 702  :     if ( (b->v[i] > a->v[0]) && (b->v[i] > a->v[1]) ) return -1;

	mov	edx, DWORD PTR [ecx]
	cmp	edx, ebx
	jle	SHORT $LN3@dt_edge_co
	cmp	edx, DWORD PTR [edi+4]
	jg	SHORT $LN23@dt_edge_co
$LN3@dt_edge_co:

; 701  :   for ( i = 0 ; i < EDGE_VERTS ; i++ )

	inc	eax
	add	ecx, 4
	cmp	eax, 2
	jl	SHORT $LL4@dt_edge_co

; 703  :    
; 704  :   return 0;

	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx

; 705  : } // end dt_edge_comp()

	pop	ebp
	ret	0
$LN23@dt_edge_co:
	pop	edi
	pop	esi

; 696  :     if ( (a->v[i] < b->v[0]) && (a->v[i] < b->v[1]) ) return -1;

	or	eax, -1
	pop	ebx

; 705  : } // end dt_edge_comp()

	pop	ebp
	ret	0
$LN24@dt_edge_co:
	pop	edi
	pop	esi

; 698  :     if ( (b->v[i] < a->v[0]) && (b->v[i] < a->v[1]) ) return  1;

	mov	eax, 1
	pop	ebx

; 705  : } // end dt_edge_comp()

	pop	ebp
	ret	0
_dt_edge_comp ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_dt_fcompare
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogtp
;	COMDAT _dt_fcompare
_TEXT	SEGMENT
_bb$ = -28						; size = 12
_aa$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dt_fcompare PROC					; COMDAT

; 712  : { int i;

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 713  :   int aa[FACET_EDGES],bb[FACET_EDGES];
; 714  : 
; 715  :   if ( !detorus_sticky )

	cmp	DWORD PTR _detorus_sticky, 0
	push	ebx
	push	esi
	push	edi
	jne	$LN39@dt_fcompar

; 716  :     if ( !equal_element(a->f_id,b->f_id) )

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx]
	mov	edx, ecx
	mov	esi, eax
	or	edx, 134217728				; 08000000H
	or	esi, 134217728				; 08000000H
	cmp	esi, edx
	je	SHORT $LN39@dt_fcompar

; 717  :     { if ( loc_ordinal(a->f_id) < loc_ordinal(b->f_id) ) return -1;

	mov	esi, eax
	shr	esi, 28					; 0000001cH
	and	esi, 1
	je	SHORT $LN21@dt_fcompar
	mov	ebx, eax
	and	ebx, 134217727				; 07ffffffH
	jmp	SHORT $LN22@dt_fcompar
$LN21@dt_fcompar:
	or	ebx, -1
$LN22@dt_fcompar:
	mov	edi, ecx
	shr	edi, 28					; 0000001cH
	and	edi, 1
	je	SHORT $LN23@dt_fcompar
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	jmp	SHORT $LN24@dt_fcompar
$LN23@dt_fcompar:
	or	edx, -1
$LN24@dt_fcompar:
	cmp	ebx, edx
	jge	SHORT $LN16@dt_fcompar
$LN31@dt_fcompar:
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx

; 737  :   }
; 738  : 
; 739  :   return 0;
; 740  : } // end dt_fcompare()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@dt_fcompar:

; 718  :       if ( loc_ordinal(a->f_id) > loc_ordinal(b->f_id) ) return  1;

	test	esi, esi
	je	SHORT $LN25@dt_fcompar
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN26@dt_fcompar
$LN25@dt_fcompar:
	or	eax, -1
$LN26@dt_fcompar:
	test	edi, edi
	je	SHORT $LN27@dt_fcompar
	and	ecx, 134217727				; 07ffffffH
	jmp	SHORT $LN28@dt_fcompar
$LN27@dt_fcompar:
	or	ecx, -1
$LN28@dt_fcompar:
	cmp	eax, ecx
	jle	SHORT $LN39@dt_fcompar
$LN32@dt_fcompar:
	pop	edi
	pop	esi
	mov	eax, 1
	pop	ebx

; 737  :   }
; 738  : 
; 739  :   return 0;
; 740  : } // end dt_fcompare()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN39@dt_fcompar:

; 719  :     }
; 720  : 
; 721  :   // compare absolute values of edge numbers in numerical order
; 722  :   for ( i = 0 ; i < FACET_EDGES ; i++ )
; 723  :   { aa[i] = abs(a->e[i]);

	mov	ecx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [ecx+4]

; 724  :     bb[i] = abs(b->e[i]);

	mov	edi, DWORD PTR _b$[ebp]
	cdq
	mov	esi, eax
	mov	eax, DWORD PTR [edi+4]
	xor	esi, edx
	sub	esi, edx
	cdq
	mov	ebx, eax
	mov	eax, DWORD PTR [ecx+8]
	xor	ebx, edx
	sub	ebx, edx
	cdq
	mov	ecx, eax
	mov	eax, DWORD PTR [edi+8]
	xor	ecx, edx
	sub	ecx, edx
	cdq
	mov	edi, eax
	mov	eax, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [eax+12]
	xor	edi, edx
	sub	edi, edx
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _aa$[ebp+8], eax
	mov	eax, DWORD PTR [edx+12]
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	DWORD PTR _aa$[ebp], esi
	mov	DWORD PTR _bb$[ebp], ebx
	mov	DWORD PTR _aa$[ebp+4], ecx
	mov	DWORD PTR _bb$[ebp+4], edi
	mov	DWORD PTR _bb$[ebp+8], eax

; 725  :   }
; 726  :   // bubble sort
; 727  :   if ( aa[1] < aa[0] ) { int tmp = aa[1]; aa[1] = aa[0]; aa[0] = tmp; }

	cmp	ecx, esi
	jge	SHORT $LN11@dt_fcompar
	mov	edx, ecx
	mov	ecx, esi
	mov	esi, edx
	mov	DWORD PTR _aa$[ebp+4], ecx
	mov	DWORD PTR _aa$[ebp], esi
$LN11@dt_fcompar:

; 728  :   if ( aa[2] < aa[1] ) { int tmp = aa[2]; aa[2] = aa[1]; aa[1] = tmp; }

	mov	edx, DWORD PTR _aa$[ebp+8]
	cmp	edx, ecx
	jge	SHORT $LN10@dt_fcompar
	mov	DWORD PTR _aa$[ebp+8], ecx
	mov	ecx, edx
	mov	DWORD PTR _aa$[ebp+4], ecx
$LN10@dt_fcompar:

; 729  :   if ( aa[1] < aa[0] ) { int tmp = aa[1]; aa[1] = aa[0]; aa[0] = tmp; }

	cmp	ecx, esi
	jge	SHORT $LN9@dt_fcompar
	mov	DWORD PTR _aa$[ebp+4], esi
	mov	DWORD PTR _aa$[ebp], ecx
$LN9@dt_fcompar:

; 730  :   if ( bb[1] < bb[0] ) { int tmp = bb[1]; bb[1] = bb[0]; bb[0] = tmp; }

	cmp	edi, ebx
	jge	SHORT $LN8@dt_fcompar
	mov	ecx, edi
	mov	edi, ebx
	mov	ebx, ecx
	mov	DWORD PTR _bb$[ebp+4], edi
	mov	DWORD PTR _bb$[ebp], ebx
$LN8@dt_fcompar:

; 731  :   if ( bb[2] < bb[1] ) { int tmp = bb[2]; bb[2] = bb[1]; bb[1] = tmp; }

	cmp	eax, edi
	jge	SHORT $LN7@dt_fcompar
	mov	DWORD PTR _bb$[ebp+8], edi
	mov	edi, eax
	mov	DWORD PTR _bb$[ebp+4], edi
$LN7@dt_fcompar:

; 732  :   if ( bb[1] < bb[0] ) { int tmp = bb[1]; bb[1] = bb[0]; bb[0] = tmp; }

	cmp	edi, ebx
	jge	SHORT $LN6@dt_fcompar
	mov	DWORD PTR _bb$[ebp+4], ebx
	mov	DWORD PTR _bb$[ebp], edi
$LN6@dt_fcompar:

; 733  : 
; 734  :   for ( i = 0 ; i < FACET_EDGES ; i++ )

	xor	eax, eax
$LL5@dt_fcompar:

; 735  :   { if ( aa[i] < bb[i] ) return -1;

	mov	ecx, DWORD PTR _bb$[ebp+eax]
	mov	edx, DWORD PTR _aa$[ebp+eax]
	cmp	edx, ecx
	jl	$LN31@dt_fcompar

; 736  :     if ( aa[i] > bb[i] ) return  1;

	jg	$LN32@dt_fcompar

; 733  : 
; 734  :   for ( i = 0 ; i < FACET_EDGES ; i++ )

	add	eax, 4
	cmp	eax, 12					; 0000000cH
	jl	SHORT $LL5@dt_fcompar

; 737  :   }
; 738  : 
; 739  :   return 0;
; 740  : } // end dt_fcompare()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	xor	eax, eax
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_dt_fcompare ENDP
_TEXT	ENDS
PUBLIC	??_C@_08DEAPKDLL@TORDUP?4C?$AA@			; `string'
PUBLIC	_detorus_start
EXTRN	_kb_temp_calloc:PROC
;	COMDAT ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
CONST	SEGMENT
??_C@_08DEAPKDLL@TORDUP?4C?$AA@ DB 'TORDUP.C', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _detorus_start
_TEXT	SEGMENT
_detorus_start PROC					; COMDAT

; 783  :   
; 784  :   dt_valloc = 2*web.skel[VERTEX].count;

	mov	eax, DWORD PTR _web+64
	push	esi
	mov	esi, DWORD PTR _web+120
	push	edi

; 785  :   dt_vlist = (struct dt_vertex*)temp_calloc(dt_valloc,sizeof(struct dt_vertex));

	push	785					; 00000311H
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	add	eax, eax
	push	24					; 00000018H
	push	eax
	mov	DWORD PTR _dt_valloc, eax
	call	_kb_temp_calloc

; 786  :   dt_vcount = 0;
; 787  :   dt_x_space = (REAL*)temp_calloc(dt_valloc,SDIM*sizeof(REAL));

	mov	edx, DWORD PTR _dt_valloc
	mov	DWORD PTR _dt_vlist, eax
	mov	eax, DWORD PTR _web+616
	push	787					; 00000313H
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	lea	ecx, DWORD PTR [eax*8]
	push	ecx
	push	edx
	mov	DWORD PTR _dt_vcount, 0
	call	_kb_temp_calloc
	mov	DWORD PTR _dt_x_space, eax

; 788  :   for ( i = 0 ; i < dt_valloc ; i++ )

	xor	eax, eax
	add	esp, 32					; 00000020H
	cmp	DWORD PTR _dt_valloc, eax
	jle	SHORT $LN4@detorus_st

; 782  :   int ctrl_pts = web.skel[EDGE].ctrlpts;

	xor	ecx, ecx
	npad	4
$LL13@detorus_st:

; 789  :     dt_vlist[i].x = dt_x_space + SDIM*i;

	mov	edx, DWORD PTR _web+616
	mov	edi, DWORD PTR _dt_x_space
	imul	edx, eax
	lea	edx, DWORD PTR [edi+edx*8]
	mov	edi, DWORD PTR _dt_vlist
	mov	DWORD PTR [ecx+edi+20], edx
	inc	eax
	add	ecx, 24					; 00000018H
	cmp	eax, DWORD PTR _dt_valloc
	jl	SHORT $LL13@detorus_st
$LN4@detorus_st:

; 790  : 
; 791  :   dt_ealloc = 2*web.skel[EDGE].count;

	mov	eax, DWORD PTR _web+176

; 792  :   dt_elist = (struct dt_edge*)temp_calloc(dt_ealloc,sizeof(struct dt_edge));

	push	792					; 00000318H
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	add	eax, eax
	push	12					; 0000000cH
	push	eax
	mov	DWORD PTR _dt_ealloc, eax
	call	_kb_temp_calloc

; 793  :   dt_ecount = 1;  /* start at 1 so can use signed indexes */
; 794  :   dt_v_space = (int*)temp_calloc(dt_ealloc,ctrl_pts*sizeof(int));

	push	794					; 0000031aH
	add	esi, esi
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	mov	DWORD PTR _dt_elist, eax
	mov	eax, DWORD PTR _dt_ealloc
	add	esi, esi
	push	esi
	push	eax
	mov	DWORD PTR _dt_ecount, 1
	call	_kb_temp_calloc
	mov	DWORD PTR _dt_v_space, eax

; 795  :   for ( i = 0 ; i < dt_ealloc ; i++ )

	xor	eax, eax
	add	esp, 32					; 00000020H
	cmp	DWORD PTR _dt_ealloc, eax
	jle	SHORT $LN1@detorus_st

; 790  : 
; 791  :   dt_ealloc = 2*web.skel[EDGE].count;

	xor	edx, edx
	xor	ecx, ecx
	push	ebx
	npad	10
$LL14@detorus_st:

; 796  :     dt_elist[i].v = dt_v_space + ctrl_pts*i;

	mov	edi, DWORD PTR _dt_v_space
	mov	ebx, DWORD PTR _dt_elist
	add	edi, ecx
	mov	DWORD PTR [edx+ebx+8], edi
	inc	eax
	add	ecx, esi
	add	edx, 12					; 0000000cH
	cmp	eax, DWORD PTR _dt_ealloc
	jl	SHORT $LL14@detorus_st
	pop	ebx
$LN1@detorus_st:

; 797  :     
; 798  :   dt_falloc = 2*web.skel[FACET].count;

	mov	eax, DWORD PTR _web+288

; 799  :   dt_flist = (struct dt_facet*)temp_calloc(dt_falloc,sizeof(struct dt_facet));

	push	799					; 0000031fH
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	add	eax, eax
	push	24					; 00000018H
	push	eax
	mov	DWORD PTR _dt_falloc, eax
	call	_kb_temp_calloc
	add	esp, 16					; 00000010H
	pop	edi
	mov	DWORD PTR _dt_flist, eax

; 800  :   dt_fcount = 0;

	mov	DWORD PTR _dt_fcount, 0
	pop	esi

; 801  : 
; 802  : } // end detorus_start()

	ret	0
_detorus_start ENDP
_TEXT	ENDS
PUBLIC	_detorus_vertex
EXTRN	_kb_temp_realloc:PROC
; Function compile flags: /Ogtp
;	COMDAT _detorus_vertex
_TEXT	SEGMENT
_vs$ = -12						; size = 4
_i$ = -8						; size = 4
tv635 = -4						; size = 4
_g$ = 8							; size = 4
_v_id$ = 12						; size = 4
_detorus_vertex PROC					; COMDAT

; 813  : { int i;

	push	ebp
	mov	ebp, esp

; 814  :   struct dt_vertex *vs;
; 815  : 
; 816  :   if ( dt_vcount >= dt_valloc )

	mov	eax, DWORD PTR _dt_valloc
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	cmp	DWORD PTR _dt_vcount, eax
	jl	$LN27@detorus_ve

; 818  :     dt_vlist = (struct dt_vertex*)temp_realloc((char*)dt_vlist,
; 819  :        dt_valloc*sizeof(struct dt_vertex));

	mov	ecx, DWORD PTR _dt_vlist
	add	eax, eax
	mov	DWORD PTR _dt_valloc, eax
	lea	eax, DWORD PTR [eax+eax*2]
	add	eax, eax
	push	819					; 00000333H
	add	eax, eax
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	add	eax, eax
	push	eax
	push	ecx
	call	_kb_temp_realloc

; 820  :     dt_x_space = (REAL*)temp_realloc((char*)dt_x_space,dt_valloc*SDIM*sizeof(REAL));

	mov	edx, DWORD PTR _web+616
	imul	edx, DWORD PTR _dt_valloc
	add	edx, edx
	push	820					; 00000334H
	add	edx, edx
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	add	edx, edx
	mov	DWORD PTR _dt_vlist, eax
	mov	eax, DWORD PTR _dt_x_space
	push	edx
	push	eax
	call	_kb_temp_realloc
	mov	DWORD PTR _dt_x_space, eax

; 821  :     for ( i = 0 ; i < dt_valloc ; i++ )

	xor	eax, eax
	add	esp, 32					; 00000020H
	cmp	DWORD PTR _dt_valloc, eax
	jle	SHORT $LN27@detorus_ve

; 817  :   { dt_valloc *= 2;

	xor	ecx, ecx
	npad	14
$LL26@detorus_ve:

; 822  :       dt_vlist[i].x = dt_x_space + SDIM*i;

	mov	edx, DWORD PTR _web+616
	mov	esi, DWORD PTR _dt_x_space
	imul	edx, eax
	lea	edx, DWORD PTR [esi+edx*8]
	mov	esi, DWORD PTR _dt_vlist
	mov	DWORD PTR [ecx+esi+20], edx
	inc	eax
	add	ecx, 24					; 00000018H
	cmp	eax, DWORD PTR _dt_valloc
	jl	SHORT $LL26@detorus_ve
$LN27@detorus_ve:

; 823  :   }
; 824  : 
; 825  :   vs = dt_vlist + dt_vcount;

	mov	eax, DWORD PTR _dt_vcount
	mov	ecx, DWORD PTR _dt_vlist

; 826  : 
; 827  :   for ( i = 0 ; i < SDIM ; i++ )

	mov	edx, DWORD PTR _g$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	ebx, DWORD PTR [ecx+eax*8]
	xor	eax, eax
	mov	DWORD PTR _vs$[ebp], ebx
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN6@detorus_ve
	npad	7
$LL8@detorus_ve:

; 828  :     vs->x[i] = g->x[i];

	fld	QWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR [ebx+20]
	fstp	QWORD PTR [ecx+eax*8]
	inc	eax
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LL8@detorus_ve
$LN6@detorus_ve:

; 829  : 
; 830  :   // See if same coordinates as proposed old v_id
; 831  :   vs->v_id = NULLID;
; 832  :   if ( valid_id(v_id) )

	mov	eax, DWORD PTR _v_id$[ebp]
	mov	DWORD PTR [ebx], 0
	test	eax, 268435456				; 10000000H
	je	$LN25@detorus_ve

; 836  :     x = get_coord(v_id);
; 837  :     for ( i = 0, diff = 0 ; i < SDIM ; i++ )

	fldz
	mov	DWORD PTR [ebx+4], eax
	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR _web+104
	add	esi, DWORD PTR [eax+ecx+64]
	push	edi
	mov	edi, DWORD PTR _web+616
	xor	ecx, ecx
	cmp	edi, 4
	jl	SHORT $LC22@detorus_ve

; 838  :       diff += fabs(x[i] - g->x[i]);

	lea	eax, DWORD PTR [edx+8]
	mov	ebx, esi
	sub	ebx, edx
	lea	edx, DWORD PTR [edi-4]
	shr	edx, 2
	mov	DWORD PTR tv635[ebp], ebx
	inc	edx
	lea	ebx, DWORD PTR [edx*4]
	mov	DWORD PTR _i$[ebp], ebx
	mov	ebx, DWORD PTR tv635[ebp]
	lea	ecx, DWORD PTR [esi+24]
$LN23@detorus_ve:
	fld	QWORD PTR [ecx-24]
	add	eax, 32					; 00000020H
	fsub	QWORD PTR [eax-40]
	add	ecx, 32					; 00000020H
	dec	edx
	fabs
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+eax-32]
	fsub	QWORD PTR [eax-32]
	fabs
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fabs
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fabs
	faddp	ST(1), ST(0)
	jne	SHORT $LN23@detorus_ve

; 833  :   { REAL *x;
; 834  :     REAL diff;
; 835  :     vs->orig_v_id = v_id;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _g$[ebp]
	mov	ebx, DWORD PTR _vs$[ebp]
$LC22@detorus_ve:

; 836  :     x = get_coord(v_id);
; 837  :     for ( i = 0, diff = 0 ; i < SDIM ; i++ )

	cmp	ecx, edi
	jge	SHORT $LN21@detorus_ve
	sub	esi, edx
	lea	eax, DWORD PTR [edx+ecx*8]
	sub	edi, ecx
$LC4@detorus_ve:

; 838  :       diff += fabs(x[i] - g->x[i]);

	fld	QWORD PTR [eax+esi]
	add	eax, 8
	dec	edi
	fsub	QWORD PTR [eax-8]
	fabs
	faddp	ST(1), ST(0)
	jne	SHORT $LC4@detorus_ve
$LN21@detorus_ve:

; 839  :     if ( diff < dt_eps )

	fcomp	QWORD PTR _dt_eps
	pop	edi
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN25@detorus_ve

; 840  :       vs->v_id = v_id;

	mov	edx, DWORD PTR _v_id$[ebp]
	mov	DWORD PTR [ebx], edx
$LN25@detorus_ve:

; 841  :   }
; 842  : 
; 843  :   dt_vcount++;

	inc	DWORD PTR _dt_vcount
	pop	esi
	pop	ebx

; 844  : } // end detorus_vertex()   

	mov	esp, ebp
	pop	ebp
	ret	0
_detorus_vertex ENDP
_TEXT	ENDS
PUBLIC	_detorus_edge
; Function compile flags: /Ogtp
;	COMDAT _detorus_edge
_TEXT	SEGMENT
_g$ = 8							; size = 4
_e_id$ = 12						; size = 4
_detorus_edge PROC					; COMDAT

; 854  : {

	push	ebp
	mov	ebp, esp

; 855  :   struct dt_edge   *es;
; 856  :    
; 857  :   if ( dt_ecount >= dt_ealloc )

	mov	eax, DWORD PTR _dt_ealloc
	push	esi
	cmp	DWORD PTR _dt_ecount, eax
	jl	$LN10@detorus_ed

; 859  :     int i;
; 860  :     
; 861  :     dt_ealloc *= 2;
; 862  :     dt_elist = (struct dt_edge*)temp_realloc((char*)dt_elist,
; 863  :        dt_ealloc*sizeof(struct dt_edge));

	mov	ecx, DWORD PTR _dt_elist
	mov	esi, DWORD PTR _web+120
	add	eax, eax
	mov	DWORD PTR _dt_ealloc, eax
	lea	eax, DWORD PTR [eax+eax*2]
	push	863					; 0000035fH
	add	eax, eax
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	add	eax, eax
	push	eax
	push	ecx
	call	_kb_temp_realloc

; 864  :     dt_v_space = (int*)temp_realloc((char*)dt_v_space,dt_ealloc*ctrl_pts*sizeof(int));

	mov	edx, DWORD PTR _dt_ealloc
	imul	edx, esi
	push	864					; 00000360H
	add	edx, edx
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	add	edx, edx
	mov	DWORD PTR _dt_elist, eax
	mov	eax, DWORD PTR _dt_v_space
	push	edx
	push	eax
	call	_kb_temp_realloc

; 865  :     for ( i = 0 ; i < dt_ealloc ; i++ )

	xor	edx, edx
	add	esp, 32					; 00000020H
	mov	DWORD PTR _dt_v_space, eax
	cmp	DWORD PTR _dt_ealloc, edx
	jle	SHORT $LN10@detorus_ed

; 858  :   { int ctrl_pts = web.skel[EDGE].ctrlpts;

	add	esi, esi
	push	ebx
	xor	ecx, ecx
	xor	eax, eax
	add	esi, esi
	push	edi
	npad	12
$LL9@detorus_ed:

; 866  :       dt_elist[i].v = dt_v_space + ctrl_pts*i;

	mov	edi, DWORD PTR _dt_v_space
	mov	ebx, DWORD PTR _dt_elist
	add	edi, eax
	mov	DWORD PTR [ecx+ebx+8], edi
	inc	edx
	add	eax, esi
	add	ecx, 12					; 0000000cH
	cmp	edx, DWORD PTR _dt_ealloc
	jl	SHORT $LL9@detorus_ed
	pop	edi
	pop	ebx
$LN10@detorus_ed:

; 867  :   }
; 868  :   
; 869  :   es  = dt_elist + dt_ecount;

	mov	eax, DWORD PTR _dt_ecount
	mov	edx, DWORD PTR _dt_elist

; 870  :   es->e_id = g->id;  //  e_id;

	mov	esi, DWORD PTR _g$[ebp]
	lea	ecx, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [esi+128]

; 871  :  
; 872  :   // create vertices
; 873  :   es->v[0] = dt_vcount;

	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _dt_vcount
	mov	DWORD PTR [edx], ecx

; 874  :   es->v[1] = dt_vcount+1;

	mov	edx, DWORD PTR _dt_vcount
	mov	eax, DWORD PTR [eax+8]
	inc	edx
	mov	DWORD PTR [eax+4], edx

; 875  : 
; 876  :   detorus_vertex(g,g[0].v_id);

	mov	ecx, DWORD PTR [esi+132]
	push	ecx
	push	esi
	call	_detorus_vertex

; 877  :   detorus_vertex(g+1,g[1].v_id);

	mov	edx, DWORD PTR [esi+276]
	push	edx
	add	esi, 144				; 00000090H
	push	esi
	call	_detorus_vertex
	add	esp, 16					; 00000010H

; 878  : 
; 879  :   dt_ecount++;

	inc	DWORD PTR _dt_ecount
	pop	esi

; 880  :     
; 881  : } // end detorus_edge()

	pop	ebp
	ret	0
_detorus_edge ENDP
_TEXT	ENDS
PUBLIC	_detorus_facet
; Function compile flags: /Ogtp
;	COMDAT _detorus_facet
_TEXT	SEGMENT
_fs$ = -8						; size = 4
tv168 = -4						; size = 4
_g$ = 8							; size = 4
_f_id$ = 12						; size = 4
_detorus_facet PROC					; COMDAT

; 891  : { int i;

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 892  :   struct dt_facet *fs;
; 893  :   facet_id fe = NULLID;
; 894  : 
; 895  :   if ( web.representation != SOAPFILM )

	cmp	DWORD PTR _web+624, 2
	jne	$LN11@detorus_fa

; 896  :     return;
; 897  : 
; 898  :   g[3] = g[0]; /* convenient wrap */

	push	ebx
	mov	ebx, DWORD PTR _g$[ebp]
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebx+432]
	mov	ecx, 36					; 00000024H
	mov	esi, ebx
	rep movsd

; 899  : 
; 900  :   if ( dt_fcount >= dt_falloc )

	mov	eax, DWORD PTR _dt_fcount
	mov	ecx, DWORD PTR _dt_falloc
	cmp	eax, ecx
	jl	SHORT $LN29@detorus_fa

; 901  :   { dt_falloc *= 2;

	lea	eax, DWORD PTR [ecx+ecx]

; 902  :     dt_flist = (struct dt_facet*)temp_realloc((char*)dt_flist,
; 903  :        dt_falloc*sizeof(struct dt_facet));

	mov	ecx, DWORD PTR _dt_flist
	mov	DWORD PTR _dt_falloc, eax
	lea	eax, DWORD PTR [eax+eax*2]
	add	eax, eax
	push	903					; 00000387H
	add	eax, eax
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	add	eax, eax
	push	eax
	push	ecx
	call	_kb_temp_realloc
	mov	DWORD PTR _dt_flist, eax
	mov	eax, DWORD PTR _dt_fcount
	add	esp, 16					; 00000010H
$LN29@detorus_fa:

; 904  :   }
; 905  : 
; 906  :   fs  = dt_flist + dt_fcount;
; 907  :   fs->f_id = f_id;

	mov	ecx, DWORD PTR _f_id$[ebp]
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR _dt_flist
	lea	eax, DWORD PTR [eax+edx*8]
	mov	DWORD PTR _fs$[ebp], eax
	mov	DWORD PTR [eax], ecx

; 908  :   if ( valid_id(f_id) )

	test	ecx, 268435456				; 10000000H
	je	$LN8@detorus_fa

; 909  :   {
; 910  :     fe = get_facet_fe(f_id);

	mov	esi, DWORD PTR _web+236
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	mov	esi, DWORD PTR [edx+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN15@detorus_fa
	xor	esi, 134217728				; 08000000H
$LN15@detorus_fa:

; 911  :     for ( i = 0 ; i < FACET_VERTS ; i++ )

	mov	edi, ebx
	lea	ebx, DWORD PTR [eax+4]
	mov	DWORD PTR tv168[ebp], 3
	npad	7
$LL30@detorus_fa:

; 912  :     { // only a possible progenator, in case of clipping
; 913  :       fs->e[i] = dt_ecount;

	mov	eax, DWORD PTR _dt_ecount
	mov	DWORD PTR [ebx], eax

; 914  :       detorus_edge(g+i, (g[i].etype==INVISIBLE_EDGE)?NULLID:get_fe_edge(fe));

	cmp	WORD PTR [edi+124], 0
	jne	SHORT $LN13@detorus_fa
	xor	eax, eax
	jmp	SHORT $LN14@detorus_fa
$LN13@detorus_fa:
	mov	edx, DWORD PTR _web+460
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	eax, esi
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
$LN14@detorus_fa:
	push	eax
	push	edi
	call	_detorus_edge
	add	esp, 8

; 915  :       fe = get_next_edge(fe);

	test	esi, 134217728				; 08000000H
	je	SHORT $LN22@detorus_fa
	mov	edx, DWORD PTR _web+460
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+esi*4]
	mov	esi, DWORD PTR [eax+28]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN6@detorus_fa
$LN22@detorus_fa:
	mov	ecx, DWORD PTR _web+460
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	esi, DWORD PTR [edx+32]
$LN6@detorus_fa:

; 911  :     for ( i = 0 ; i < FACET_VERTS ; i++ )

	add	ebx, 4
	add	edi, 144				; 00000090H
	dec	DWORD PTR tv168[ebp]
	jne	SHORT $LL30@detorus_fa

; 916  :     }
; 917  :   }
; 918  :   else

	jmp	SHORT $LN1@detorus_fa
$LN8@detorus_fa:

; 919  :     for ( i = 0 ; i < FACET_VERTS ; i++ )

	mov	edi, ebx
	lea	esi, DWORD PTR [eax+4]
	mov	ebx, 3
$LL3@detorus_fa:

; 920  :     { 
; 921  :       fs->e[i] = dt_ecount;

	mov	eax, DWORD PTR _dt_ecount

; 922  :       detorus_edge(g+i, NULLID);

	push	0
	push	edi
	mov	DWORD PTR [esi], eax
	call	_detorus_edge
	add	esp, 8
	add	esi, 4
	add	edi, 144				; 00000090H
	dec	ebx
	jne	SHORT $LL3@detorus_fa
$LN1@detorus_fa:

; 923  :     }
; 924  : 
; 925  :   fs->flags = g[0].flags;  // for COLORS_SWAPPED

	mov	ecx, DWORD PTR _g$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	mov	eax, DWORD PTR _fs$[ebp]
	pop	edi
	pop	esi
	mov	DWORD PTR [eax+20], edx

; 926  : 
; 927  :   dt_fcount++;

	inc	DWORD PTR _dt_fcount
	pop	ebx
$LN11@detorus_fa:

; 928  : } // end detorus_facet()

	mov	esp, ebp
	pop	ebp
	ret	0
_detorus_facet ENDP
_TEXT	ENDS
PUBLIC	_detorus_unify_vertices
EXTRN	_new_vertex:PROC
EXTRN	_unset_v_all_constraints:PROC
EXTRN	_V_BOUNDARY_ATTR:DWORD
EXTRN	_dup_vertex:PROC
EXTRN	_qsort:PROC
; Function compile flags: /Ogtp
;	COMDAT _detorus_unify_vertices
_TEXT	SEGMENT
tv763 = -24						; size = 4
_tcount$ = -24						; size = 4
tv756 = -20						; size = 4
_keep$ = -16						; size = 4
tv882 = -12						; size = 4
tv478 = -12						; size = 4
_translate$ = -8					; size = 4
_i$ = -4						; size = 4
_detorus_unify_vertices PROC				; COMDAT

; 1035 : { int i,j,k,keep;

	push	ebp
	mov	ebp, esp

; 1036 :   int *translate;
; 1037 :   int tcount;
; 1038 : 
; 1039 :   /* unify vertices */
; 1040 :   for ( i = 0 ; i < dt_vcount ; i++ )

	mov	ecx, DWORD PTR _dt_vcount
	sub	esp, 24					; 00000018H
	push	ebx
	xor	ebx, ebx
	push	esi
	xor	eax, eax
	push	edi
	cmp	ecx, ebx
	jle	SHORT $LN38@detorus_un
	xor	edx, edx
	npad	7
$LL40@detorus_un:

; 1041 :     dt_vlist[i].orig = i;

	mov	ecx, DWORD PTR _dt_vlist
	mov	DWORD PTR [edx+ecx+8], eax
	mov	ecx, DWORD PTR _dt_vcount
	inc	eax
	add	edx, 24					; 00000018H
	cmp	eax, ecx
	jl	SHORT $LL40@detorus_un
$LN38@detorus_un:

; 1042 :   // sort along random direction
; 1043 :   qsort((char*)dt_vlist,dt_vcount,sizeof(struct dt_vertex),
; 1044 :       FCAST dt_vertex_comp);

	mov	edx, DWORD PTR _dt_vlist
	push	OFFSET _dt_vertex_comp
	push	24					; 00000018H
	push	ecx
	push	edx
	call	_qsort

; 1045 :   translate = (int*)temp_calloc(dt_vcount,sizeof(int));

	mov	eax, DWORD PTR _dt_vcount
	push	1045					; 00000415H
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	push	4
	push	eax
	call	_kb_temp_calloc

; 1046 :   translate[dt_vlist[0].orig] = 0;

	mov	ecx, DWORD PTR _dt_vlist
	mov	edx, DWORD PTR [ecx+8]
	mov	edi, eax
	mov	DWORD PTR [edi+edx*4], ebx

; 1047 :   for ( i = 1, keep = 0 ; i < dt_vcount ; i++ )

	mov	eax, DWORD PTR _dt_vcount
	add	esp, 32					; 00000020H
	mov	DWORD PTR _translate$[ebp], edi
	mov	DWORD PTR _i$[ebp], 1
	mov	DWORD PTR _keep$[ebp], ebx
	cmp	eax, 1
	jle	$LN35@detorus_un

; 1042 :   // sort along random direction
; 1043 :   qsort((char*)dt_vlist,dt_vcount,sizeof(struct dt_vertex),
; 1044 :       FCAST dt_vertex_comp);

	mov	edi, 24					; 00000018H
	mov	DWORD PTR tv756[ebp], ebx
	npad	9
$LL37@detorus_un:

; 1048 :   { // hunt down keep list as long as within range
; 1049 :     for ( j = keep ; j >= 0 ; j-- )

	mov	esi, ebx
	test	ebx, ebx
	js	$LN72@detorus_un
	npad	6
$LL34@detorus_un:

; 1050 :     { int retval = dt_vertex_diff(dt_vlist+i,dt_vlist+j);

	mov	eax, DWORD PTR _dt_vlist
	lea	ecx, DWORD PTR [esi+esi*2]
	lea	edx, DWORD PTR [eax+ecx*8]
	push	edx
	add	eax, edi
	push	eax
	call	_dt_vertex_diff
	add	esp, 8

; 1051 :       if ( retval == DT_MERGEABLE )

	cmp	eax, 1
	je	SHORT $LN59@detorus_un

; 1059 :         break;
; 1060 :       }
; 1061 :       else if ( retval == DT_OUT_OF_RANGE )

	cmp	eax, 2
	jne	SHORT $LN33@detorus_un

; 1062 :         j = -1; // force break 

	or	esi, -1
$LN33@detorus_un:

; 1048 :   { // hunt down keep list as long as within range
; 1049 :     for ( j = keep ; j >= 0 ; j-- )

	dec	esi
	jns	SHORT $LL34@detorus_un

; 1051 :       if ( retval == DT_MERGEABLE )

	jmp	SHORT $LN72@detorus_un
$LN59@detorus_un:

; 1052 :       { // merge with previous
; 1053 :         // Take average of coordinates
; 1054 :         for ( k = 0 ; k < SDIM ; k++ )

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN28@detorus_un
	mov	ecx, DWORD PTR _dt_vlist
	lea	edx, DWORD PTR [edi+ecx+20]
	mov	DWORD PTR tv763[ebp], edx
	lea	edx, DWORD PTR [esi+esi*2]
	lea	edx, DWORD PTR [ecx+edx*8]
$LL30@detorus_un:

; 1055 :           dt_vlist[j].x[k] = (dt_vlist[j].x[k]*dt_vlist[j].merge_count + dt_vlist[i].x[k])/
; 1056 :              (dt_vlist[j].merge_count + 1);

	mov	ebx, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR tv478[ebp], ebx
	fild	DWORD PTR tv478[ebp]
	mov	ebx, DWORD PTR tv763[ebp]
	mov	ebx, DWORD PTR [ebx]
	lea	ecx, DWORD PTR [ecx+eax*8]
	fmul	QWORD PTR [ecx]
	inc	eax
	fadd	QWORD PTR [ebx+eax*8-8]
	mov	ebx, DWORD PTR tv478[ebp]
	inc	ebx
	mov	DWORD PTR tv882[ebp], ebx
	fild	DWORD PTR tv882[ebp]
	fdivp	ST(1), ST(0)
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LL30@detorus_un

; 1052 :       { // merge with previous
; 1053 :         // Take average of coordinates
; 1054 :         for ( k = 0 ; k < SDIM ; k++ )

	mov	ebx, DWORD PTR _keep$[ebp]
$LN28@detorus_un:

; 1057 :         translate[dt_vlist[i].orig] = j;

	mov	edx, DWORD PTR _dt_vlist
	mov	eax, DWORD PTR [edi+edx+8]
	mov	ecx, DWORD PTR _translate$[ebp]
	mov	DWORD PTR [ecx+eax*4], esi

; 1058 :         dt_vlist[j].merge_count++;

	mov	eax, DWORD PTR _dt_vlist
	lea	edx, DWORD PTR [esi+esi*2]
	inc	DWORD PTR [eax+edx*8+12]
	lea	eax, DWORD PTR [eax+edx*8+12]

; 1063 :     }
; 1064 :     if ( j < 0 )

	test	esi, esi
	jns	SHORT $LN36@detorus_un
$LN72@detorus_un:

; 1065 :     { // new keep list entry
; 1066 :       dt_vlist[++keep] = dt_vlist[i];

	mov	ecx, DWORD PTR _dt_vlist
	mov	esi, DWORD PTR [edi+ecx]
	mov	edx, DWORD PTR tv756[ebp]
	lea	eax, DWORD PTR [edi+ecx]
	add	edx, 24					; 00000018H
	mov	DWORD PTR [ecx+edx], esi
	mov	esi, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+edx+4], esi
	mov	esi, DWORD PTR [eax+8]
	inc	ebx
	add	ecx, edx
	mov	DWORD PTR [ecx+8], esi
	mov	esi, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], esi
	mov	esi, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], esi
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax

; 1067 :       dt_vlist[keep].merge_count = 1;

	mov	ecx, DWORD PTR _dt_vlist
	mov	DWORD PTR [edx+ecx+12], 1

; 1068 :       translate[dt_vlist[i].orig] = keep;

	mov	ecx, DWORD PTR _translate$[ebp]
	mov	DWORD PTR tv756[ebp], edx
	mov	edx, DWORD PTR _dt_vlist
	mov	eax, DWORD PTR [edi+edx+8]
	mov	DWORD PTR _keep$[ebp], ebx
	mov	DWORD PTR [ecx+eax*4], ebx
$LN36@detorus_un:

; 1047 :   for ( i = 1, keep = 0 ; i < dt_vcount ; i++ )

	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _dt_vcount
	inc	ecx
	add	edi, 24					; 00000018H
	mov	DWORD PTR _i$[ebp], ecx
	cmp	ecx, eax
	jl	$LL37@detorus_un
	mov	edi, DWORD PTR _translate$[ebp]
$LN35@detorus_un:

; 1069 :     }
; 1070 :   }
; 1071 :   tcount = dt_vcount;

	mov	esi, eax

; 1072 :   dt_vcount = keep+1;

	inc	ebx

; 1073 :   
; 1074 :   // Sort keep vertices based on original v_id, so that
; 1075 :   // slight movements of the surface will have the 
; 1076 :   // same unwrapped structure.
; 1077 :   for ( i = 0 ; i < dt_vcount ; i++ )

	xor	eax, eax
	mov	DWORD PTR _tcount$[ebp], esi
	mov	DWORD PTR _dt_vcount, ebx
	test	ebx, ebx
	jle	SHORT $LN22@detorus_un

; 1069 :     }
; 1070 :   }
; 1071 :   tcount = dt_vcount;

	xor	ecx, ecx
	npad	9
$LL24@detorus_un:

; 1078 :     dt_vlist[i].orig = i;

	mov	edx, DWORD PTR _dt_vlist
	mov	DWORD PTR [ecx+edx+8], eax
	mov	ebx, DWORD PTR _dt_vcount
	inc	eax
	add	ecx, 24					; 00000018H
	cmp	eax, ebx
	jl	SHORT $LL24@detorus_un
$LN22@detorus_un:

; 1079 :   qsort(dt_vlist,dt_vcount,sizeof(struct dt_vertex),FCAST dt_vid_comp);

	mov	eax, DWORD PTR _dt_vlist
	push	OFFSET _dt_vid_comp
	push	24					; 00000018H
	push	ebx
	push	eax
	call	_qsort

; 1080 :   for ( i = 0 ; i < dt_vcount ; i++ )

	xor	eax, eax
	add	esp, 16					; 00000010H
	cmp	DWORD PTR _dt_vcount, eax
	jle	SHORT $LN19@detorus_un

; 1079 :   qsort(dt_vlist,dt_vcount,sizeof(struct dt_vertex),FCAST dt_vid_comp);

	xor	edx, edx
	npad	6
$LL21@detorus_un:

; 1081 :     dt_vlist[dt_vlist[i].orig].newspot = i;

	mov	esi, DWORD PTR _dt_vlist
	mov	ecx, DWORD PTR [edx+esi+8]
	lea	ecx, DWORD PTR [ecx+ecx*2]
	mov	DWORD PTR [esi+ecx*8+16], eax
	inc	eax
	add	edx, 24					; 00000018H
	cmp	eax, DWORD PTR _dt_vcount
	jl	SHORT $LL21@detorus_un

; 1080 :   for ( i = 0 ; i < dt_vcount ; i++ )

	mov	esi, DWORD PTR _tcount$[ebp]
$LN19@detorus_un:

; 1082 :   for ( i = 0 ; i < tcount ; i++ )

	xor	ebx, ebx
	xor	eax, eax
	cmp	esi, ebx
	jle	SHORT $LN16@detorus_un
	npad	8
$LL18@detorus_un:

; 1083 :     translate[i] = dt_vlist[translate[i]].newspot;

	mov	ecx, DWORD PTR [edi+eax*4]
	lea	edx, DWORD PTR [ecx+ecx*2]
	mov	ecx, DWORD PTR _dt_vlist
	mov	edx, DWORD PTR [ecx+edx*8+16]
	mov	DWORD PTR [edi+eax*4], edx
	inc	eax
	cmp	eax, esi
	jl	SHORT $LL18@detorus_un
$LN16@detorus_un:

; 1084 : 
; 1085 :   // Make new vertices as needed
; 1086 : 
; 1087 :   for ( i = 0 ; i < dt_vcount ; i++ )

	mov	DWORD PTR _i$[ebp], ebx
	cmp	DWORD PTR _dt_vcount, ebx
	jle	$LN71@detorus_un
	mov	edi, DWORD PTR _web+616
	npad	3
$LL15@detorus_un:

; 1088 :   { REAL *z;
; 1089 :     struct dt_vertex *vs = dt_vlist + i;

	mov	eax, DWORD PTR _dt_vlist
	lea	esi, DWORD PTR [ebx+eax]

; 1090 :    
; 1091 :     if ( valid_id(vs->v_id) )

	mov	eax, DWORD PTR [esi]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN75@detorus_un

; 1092 :     { /* see if same position as existing vertex */
; 1093 :       REAL diff = 0.0;
; 1094 :       REAL *x = get_coord(vs->v_id);

	mov	ecx, DWORD PTR _web+12
	fldz
	mov	edx, DWORD PTR _dymem
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+104
	add	ecx, DWORD PTR [eax+edx+64]

; 1095 : 
; 1096 :       for ( j = 0 ; j < SDIM ; j++ )

	test	edi, edi
	jle	SHORT $LN9@detorus_un
	mov	eax, DWORD PTR [esi+20]
	sub	ecx, eax
	mov	edx, edi
$LN11@detorus_un:

; 1097 :         diff += fabs(x[j] - vs->x[j]);

	fld	QWORD PTR [ecx+eax]
	add	eax, 8
	dec	edx
	fsub	QWORD PTR [eax-8]
	fabs
	faddp	ST(1), ST(0)
	jne	SHORT $LN11@detorus_un
$LN9@detorus_un:

; 1098 :       if ( diff < dt_eps )

	fcomp	QWORD PTR _dt_eps
	fnstsw	ax
	test	ah, 5
	jnp	$LN14@detorus_un
$LN75@detorus_un:

; 1099 :         continue;
; 1100 :     }
; 1101 : 
; 1102 :     if ( valid_id(vs->orig_v_id) )

	mov	eax, DWORD PTR [esi+4]
	test	eax, 268435456				; 10000000H
	je	$LN7@detorus_un

; 1103 :     {
; 1104 :       vs->v_id = dup_vertex(vs->orig_v_id);

	push	eax
	call	_dup_vertex
	mov	DWORD PTR [esi], eax

; 1105 : 
; 1106 :       // remove from any constraints or boundaries
; 1107 :       if ( get_vattr(vs->v_id) & BOUNDARY )

	mov	edx, DWORD PTR _web+12
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [edx+8]
	and	ecx, 128				; 00000080H
	xor	edi, edi
	add	esp, 4
	or	ecx, edi
	je	SHORT $LN6@detorus_un

; 1108 :       { set_boundary_num(vs->v_id,0);

	mov	eax, DWORD PTR _V_BOUNDARY_ATTR
	test	eax, eax
	je	SHORT $LN43@detorus_un
	mov	ecx, DWORD PTR _dymem
	imul	eax, 240				; 000000f0H
	add	eax, DWORD PTR _web+104
	mov	eax, DWORD PTR [eax+ecx+64]
	mov	DWORD PTR [edx+eax], edi
$LN43@detorus_un:

; 1109 :         unset_attr(vs->v_id,BOUNDARY|HIT_PARTNER);

	mov	eax, DWORD PTR [esi]
	mov	ecx, eax
	shr	ecx, 29					; 0000001dH
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _web[ecx+12]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR [eax+12]
	and	DWORD PTR [eax+8], -32897		; ffff7f7fH
	mov	DWORD PTR [eax+12], ecx

; 1110 :       }
; 1111 :       else

	jmp	SHORT $LN5@detorus_un
$LN6@detorus_un:

; 1112 :         unset_v_all_constraints(vs->v_id);

	push	eax
	call	_unset_v_all_constraints
	add	esp, 4
$LN5@detorus_un:

; 1113 :  
; 1114 :       set_original(vs->v_id,vs->orig_v_id);  

	mov	eax, DWORD PTR [esi]
	mov	edx, eax
	shr	edx, 29					; 0000001dH
	imul	edx, 112				; 00000070H
	mov	ecx, DWORD PTR _web[edx+12]
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edx+20], eax

; 1115 :       
; 1116 :       z = get_coord(vs->v_id);

	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR _web+12
	mov	eax, DWORD PTR _web+104
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _dymem
	add	ecx, DWORD PTR [eax+edx+64]

; 1117 :       for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN1@detorus_un
	npad	1
$LL4@detorus_un:

; 1118 :         z[j] = vs->x[j];     

	mov	edx, DWORD PTR [esi+20]
	fld	QWORD PTR [edx+eax*8]
	inc	eax
	fstp	QWORD PTR [ecx+eax*8-8]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LL4@detorus_un

; 1119 :     }
; 1120 :     else 

	jmp	SHORT $LN1@detorus_un
$LN7@detorus_un:

; 1121 :       vs->v_id = new_vertex(vs->x,NULLID);

	mov	eax, DWORD PTR [esi+20]
	push	0
	push	eax
	call	_new_vertex
	add	esp, 8
	mov	DWORD PTR [esi], eax
$LN1@detorus_un:

; 1122 :     
; 1123 :     set_attr(vs->v_id,NEWELEMENT); 

	mov	esi, DWORD PTR [esi]
	mov	ecx, esi
	shr	ecx, 29					; 0000001dH
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _web[ecx+12]
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+esi*4]
	mov	eax, DWORD PTR [esi+12]
	or	DWORD PTR [esi+8], 4
	mov	DWORD PTR [esi+12], eax
	mov	edi, DWORD PTR _web+616
$LN14@detorus_un:

; 1084 : 
; 1085 :   // Make new vertices as needed
; 1086 : 
; 1087 :   for ( i = 0 ; i < dt_vcount ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	add	ebx, 24					; 00000018H
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _dt_vcount
	jl	$LL15@detorus_un

; 1124 :   }
; 1125 :   return translate;

	mov	eax, DWORD PTR _translate$[ebp]
	pop	edi
	pop	esi
	pop	ebx

; 1126 : } // end detorus_unify_vertices()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN71@detorus_un:

; 1124 :   }
; 1125 :   return translate;

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx

; 1126 : } // end detorus_unify_vertices()

	mov	esp, ebp
	pop	ebp
	ret	0
_detorus_unify_vertices ENDP
_TEXT	ENDS
PUBLIC	_detorus_unify_edges
EXTRN	_new_edge:PROC
EXTRN	_set_facet_fe:PROC
EXTRN	_new_facetedge:PROC
EXTRN	_unset_e_all_constraints:PROC
EXTRN	_E_BOUNDARY_ATTR:DWORD
EXTRN	_free_element:PROC
EXTRN	_dup_edge:PROC
; Function compile flags: /Ogtp
;	COMDAT _detorus_unify_edges
_TEXT	SEGMENT
tv1995 = -52						; size = 4
tv1963 = -48						; size = 4
_f_id$89972 = -48					; size = 4
tv2122 = -44						; size = 4
_start_fe$89967 = -40					; size = 4
_headinx$ = -40						; size = 4
_ctrl_pts$ = -36					; size = 4
tv2133 = -32						; size = 4
_prev_fe$89971 = -32					; size = 4
_headinx$89929 = -32					; size = 4
tv2138 = -28						; size = 4
_newe_id$89928 = -24					; size = 4
tv2612 = -20						; size = 4
_new_start_fe$89969 = -20				; size = 4
_translate$ = -16					; size = 4
tv2616 = -12						; size = 4
_fe$89968 = -12						; size = 4
_es$89927 = -8						; size = 4
_keep$ = -8						; size = 4
_i$ = -4						; size = 4
_detorus_unify_edges PROC				; COMDAT

; 1139 : { int i,j,keep;

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 1140 :   int ctrl_pts = web.skel[EDGE].ctrlpts;
; 1141 :   int headinx = (web.modeltype == LAGRANGE) ? ctrl_pts-1 : 1;

	cmp	DWORD PTR _web+628, 3
	mov	eax, DWORD PTR _web+120
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _ctrl_pts$[ebp], eax
	mov	esi, 1
	jne	SHORT $LN60@detorus_un@2
	dec	eax
	mov	DWORD PTR _headinx$[ebp], eax
	jmp	SHORT $LN61@detorus_un@2
$LN60@detorus_un@2:
	mov	DWORD PTR _headinx$[ebp], esi
$LN61@detorus_un@2:

; 1142 :   int *translate;
; 1143 : 
; 1144 :   // Unify edges.  Note we still have edges in both directions.
; 1145 :   // Not using dt_elist[0] so can used signed edge indices in facets.
; 1146 :   for ( i = 1 ; i < dt_ecount ; i++ )

	mov	ecx, DWORD PTR _dt_ecount
	mov	eax, esi
	cmp	ecx, esi
	jle	SHORT $LN55@detorus_un@2
	mov	edx, 12					; 0000000cH
	npad	7
$LL57@detorus_un@2:

; 1147 :     dt_elist[i].orig = i;

	mov	ecx, DWORD PTR _dt_elist
	mov	DWORD PTR [edx+ecx+4], eax
	mov	ecx, DWORD PTR _dt_ecount
	add	eax, esi
	add	edx, 12					; 0000000cH
	cmp	eax, ecx
	jl	SHORT $LL57@detorus_un@2
$LN55@detorus_un@2:

; 1148 :   qsort((char*)(dt_elist+1),dt_ecount-1,sizeof(struct dt_edge),
; 1149 :       FCAST dt_edge_comp);

	mov	edx, DWORD PTR _dt_elist
	push	OFFSET _dt_edge_comp
	push	12					; 0000000cH
	dec	ecx
	push	ecx
	add	edx, 12					; 0000000cH
	push	edx
	call	_qsort

; 1150 : 
; 1151 :   translate = (int*)temp_calloc(dt_ecount,sizeof(int));

	mov	eax, DWORD PTR _dt_ecount
	push	1151					; 0000047fH
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	push	4
	push	eax
	call	_kb_temp_calloc
	mov	ecx, eax

; 1152 :   translate[dt_elist[1].orig] = inverted(dt_elist[1].e_id) ? -1 : 1;

	mov	eax, DWORD PTR _dt_elist
	mov	edx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [eax+16]
	and	edx, 134217728				; 08000000H
	add	esp, 32					; 00000020H
	neg	edx
	sbb	edx, edx
	and	edx, -2					; fffffffeH
	add	edx, esi
	mov	DWORD PTR [ecx+eax*4], edx
	mov	edi, DWORD PTR _dt_elist

; 1153 :   for ( i = 1, keep = 0 ; i < dt_ecount ; i++ )

	xor	ebx, ebx
	mov	DWORD PTR _translate$[ebp], ecx
	mov	DWORD PTR _i$[ebp], esi
	mov	DWORD PTR _keep$[ebp], ebx
	cmp	DWORD PTR _dt_ecount, esi
	jle	$LN52@detorus_un@2

; 1148 :   qsort((char*)(dt_elist+1),dt_ecount-1,sizeof(struct dt_edge),
; 1149 :       FCAST dt_edge_comp);

	mov	DWORD PTR tv2612[ebp], 12		; 0000000cH
	mov	DWORD PTR tv2616[ebp], ebx
$LL54@detorus_un@2:

; 1154 :   { // check for degenerate edges and omit
; 1155 :     if ( equal_id(dt_vlist[dt_elist[i].v[0]].v_id,dt_vlist[dt_elist[i].v[headinx]].v_id) )

	mov	esi, DWORD PTR tv2612[ebp]
	mov	eax, DWORD PTR [esi+edi+8]
	mov	edx, DWORD PTR _headinx$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [eax]
	add	esi, edi
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR _dt_vlist
	mov	edx, DWORD PTR [eax+edx*8]
	lea	ecx, DWORD PTR [ecx+ecx*2]
	cmp	edx, DWORD PTR [eax+ecx*8]
	jne	SHORT $LN51@detorus_un@2

; 1156 :     { translate[dt_elist[i].orig] = 0; 

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR _translate$[ebp]
	mov	DWORD PTR [ecx+eax*4], 0

; 1157 :       continue;

	jmp	$LN224@detorus_un@2
$LN51@detorus_un@2:

; 1158 :     }
; 1159 :     
; 1160 :     if ( keep > 0 )

	cmp	DWORD PTR _keep$[ebp], 0
	jle	SHORT $LN50@detorus_un@2

; 1161 :     { // see if we have a new edge
; 1162 :       if ( dt_edge_comp(dt_elist+i,dt_elist+keep) != 0 )

	lea	edx, DWORD PTR [ebx+edi]
	push	edx
	push	esi
	call	_dt_edge_comp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN218@detorus_un@2
$LN50@detorus_un@2:

; 1163 :         dt_elist[++keep] = dt_elist[i];
; 1164 :     }
; 1165 :     else
; 1166 :       dt_elist[++keep] = dt_elist[i];

	mov	eax, 1
	add	DWORD PTR _keep$[ebp], eax
	sub	DWORD PTR tv2616[ebp], eax
	mov	eax, DWORD PTR [esi]
	add	ebx, 12					; 0000000cH
	mov	DWORD PTR [edi+ebx], eax
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+ebx+4], ecx
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+ebx+8], edx
	mov	edi, DWORD PTR _dt_elist
$LN218@detorus_un@2:

; 1167 : 
; 1168 :     /* Store in translate list; might be in reverse orientation */
; 1169 :     if ( dt_elist[i].v[0] == dt_elist[keep].v[0] )

	mov	eax, DWORD PTR tv2612[ebp]
	mov	edx, DWORD PTR [eax+edi+8]
	mov	ecx, DWORD PTR [ebx+edi+8]
	mov	edx, DWORD PTR [edx]
	cmp	edx, DWORD PTR [ecx]

; 1170 :       translate[dt_elist[i].orig] = keep;

	mov	eax, DWORD PTR [eax+edi+4]
	mov	ecx, DWORD PTR _translate$[ebp]
	mov	edx, DWORD PTR _keep$[ebp]
	je	SHORT $LN225@detorus_un@2

; 1171 :     else
; 1172 :       translate[dt_elist[i].orig] = -keep;

	mov	edx, DWORD PTR tv2616[ebp]
$LN225@detorus_un@2:
	mov	DWORD PTR [ecx+eax*4], edx

; 1173 :     if ( inverted(dt_elist[keep].e_id) )

	mov	edi, DWORD PTR _dt_elist
	test	DWORD PTR [ebx+edi], 134217728		; 08000000H
	je	SHORT $LN53@detorus_un@2

; 1174 :       translate[dt_elist[i].orig] *= -1;

	mov	eax, DWORD PTR tv2612[ebp]
	mov	ecx, DWORD PTR [eax+edi+4]
	mov	edx, DWORD PTR _translate$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [eax]
	neg	ecx
	mov	DWORD PTR [eax], ecx
$LN224@detorus_un@2:
	mov	edi, DWORD PTR _dt_elist
$LN53@detorus_un@2:

; 1153 :   for ( i = 1, keep = 0 ; i < dt_ecount ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	add	DWORD PTR tv2612[ebp], 12		; 0000000cH
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _dt_ecount
	jl	$LL54@detorus_un@2
	mov	esi, 1
$LN52@detorus_un@2:

; 1175 :   }
; 1176 :   dt_ecount = keep+1;

	mov	eax, DWORD PTR _keep$[ebp]
	inc	eax
	mov	DWORD PTR _dt_ecount, eax

; 1177 : 
; 1178 :   // Get existing edges in positive orientation
; 1179 :   for ( i = 1 ; i < dt_ecount ; i++ )

	mov	DWORD PTR _i$[ebp], esi
	cmp	eax, esi
	jle	$LN42@detorus_un@2

; 1175 :   }
; 1176 :   dt_ecount = keep+1;

	mov	ecx, 12					; 0000000cH
$LL44@detorus_un@2:

; 1180 :     if ( inverted(dt_elist[i].e_id) )

	test	DWORD PTR [ecx+edi], 134217728		; 08000000H
	je	$LN43@detorus_un@2

; 1181 :     { if ( web.modeltype == LAGRANGE )

	cmp	DWORD PTR _web+628, 3
	jne	SHORT $LN40@detorus_un@2

; 1182 :       { for ( j = 0 ; j < ctrl_pts/2 ; j++ )

	mov	eax, DWORD PTR _ctrl_pts$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	test	eax, eax
	jle	SHORT $LN36@detorus_un@2
	mov	edx, DWORD PTR _ctrl_pts$[ebp]
	add	edx, edx
	add	edx, edx
	mov	esi, eax
	npad	2
$LL205@detorus_un@2:

; 1183 :         { int tmp = dt_elist[i].v[0];

	mov	edi, DWORD PTR [ecx+edi+8]

; 1184 :           dt_elist[i].v[0] = dt_elist[i].v[ctrl_pts-1-j];

	mov	ebx, DWORD PTR [edi+edx-4]
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [edi], ebx

; 1185 :           dt_elist[i].v[ctrl_pts-1-j] = tmp;

	mov	edi, DWORD PTR _dt_elist
	mov	edi, DWORD PTR [ecx+edi+8]
	mov	DWORD PTR [edi+edx-4], eax

; 1186 :         }
; 1187 :       }
; 1188 :       else

	mov	edi, DWORD PTR _dt_elist
	sub	edx, 4
	dec	esi
	jne	SHORT $LL205@detorus_un@2
	jmp	SHORT $LN36@detorus_un@2
$LN40@detorus_un@2:

; 1189 :       { int tmp = dt_elist[i].v[0];

	mov	edi, DWORD PTR [ecx+edi+8]

; 1190 :         dt_elist[i].v[0] = dt_elist[i].v[1];

	mov	edx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [edi], edx

; 1191 :         dt_elist[i].v[1] = tmp;

	mov	edx, DWORD PTR _dt_elist
	mov	edx, DWORD PTR [ecx+edx+8]
	mov	DWORD PTR [edx+4], eax
	mov	edi, DWORD PTR _dt_elist
$LN36@detorus_un@2:

; 1192 :       }
; 1193 :       invert(dt_elist[i].e_id);

	xor	DWORD PTR [ecx+edi], 134217728		; 08000000H
	mov	eax, DWORD PTR _dt_ecount
	mov	edi, DWORD PTR _dt_elist
	mov	esi, 1
$LN43@detorus_un@2:

; 1177 : 
; 1178 :   // Get existing edges in positive orientation
; 1179 :   for ( i = 1 ; i < dt_ecount ; i++ )

	mov	edx, DWORD PTR _i$[ebp]
	add	edx, esi
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _i$[ebp], edx
	cmp	edx, eax
	jl	$LL44@detorus_un@2
$LN42@detorus_un@2:

; 1194 :     }
; 1195 :   
; 1196 :   // Create new edges as needed, and reset heads of existing edges as needed.
; 1197 :   for ( i = 1 ; i < dt_ecount ; i++ )

	mov	DWORD PTR _i$[ebp], esi
	cmp	eax, esi
	jle	$LN203@detorus_un@2
	jmp	SHORT $LN35@detorus_un@2
	npad	3
$LL206@detorus_un@2:
	mov	edi, DWORD PTR _dt_elist
$LN35@detorus_un@2:

; 1198 :   { struct dt_edge *es = dt_elist + i;
; 1199 :     edge_id newe_id;
; 1200 :     int headinx = (web.modeltype == LAGRANGE) ? web.skel[EDGE].ctrlpts-1 : 1;

	cmp	DWORD PTR _web+628, 3
	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	ebx, DWORD PTR [edi+eax*4]
	mov	DWORD PTR _es$89927[ebp], ebx
	jne	SHORT $LN62@detorus_un@2
	mov	ecx, DWORD PTR _web+120
	dec	ecx
	jmp	SHORT $LN226@detorus_un@2
$LN62@detorus_un@2:
	mov	ecx, 1
$LN226@detorus_un@2:

; 1201 :     
; 1202 :     if ( valid_id(es->e_id) )

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR _headinx$89929[ebp], ecx
	test	eax, 268435456				; 10000000H
	je	$LN32@detorus_un@2

; 1203 :     { // first see if same as old edge
; 1204 :       
; 1205 :       if ( equal_id(get_edge_tailv(es->e_id),dt_vlist[es->v[0]].v_id) 
; 1206 :        && equal_id(get_edge_headv(es->e_id),dt_vlist[es->v[headinx]].v_id) )

	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+edx+304]
	mov	esi, DWORD PTR _web+124
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN67@detorus_un@2
	mov	esi, DWORD PTR _web+636
	lea	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx+ecx]
	jmp	SHORT $LN66@detorus_un@2
$LN67@detorus_un@2:
	mov	edx, DWORD PTR [ecx+edx]
$LN66@detorus_un@2:
	mov	esi, DWORD PTR [ebx+8]
	mov	esi, DWORD PTR [esi]
	lea	edi, DWORD PTR [esi+esi*2]
	mov	esi, DWORD PTR _dt_vlist
	cmp	edx, DWORD PTR [esi+edi*8]
	jne	SHORT $LN217@detorus_un@2
	mov	edi, DWORD PTR _web+124
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+edx*4]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN71@detorus_un@2
	mov	ecx, DWORD PTR [ecx+edx]
	jmp	SHORT $LN70@detorus_un@2
$LN71@detorus_un@2:
	mov	edi, DWORD PTR _web+636
	lea	edx, DWORD PTR [edx+edi*4]
	mov	ecx, DWORD PTR [edx+ecx]
$LN70@detorus_un@2:
	mov	edx, DWORD PTR [ebx+8]
	mov	edi, DWORD PTR _headinx$89929[ebp]
	mov	edx, DWORD PTR [edx+edi*4]
	lea	edx, DWORD PTR [edx+edx*2]
	cmp	ecx, DWORD PTR [esi+edx*8]
	je	$LN7@detorus_un@2
$LN217@detorus_un@2:

; 1207 :     { // keep old edge
; 1208 :     /* not worth the trouble of trying to keep old edge in case one
; 1209 :        endpoint has changed.
; 1210 :     
; 1211 :         vertex_id old_headv = get_edge_headv(es->e_id);
; 1212 :         vertex_id new_headv = dt_vlist[es->v[1]].v_id;
; 1213 :         if ( !equal_id(old_headv,new_headv) )
; 1214 :         { remove_vertex_edge(old_headv,inverse_id(es->e_id));
; 1215 :           set_edge_headv(es->e_id,new_headv);
; 1216 :           set_vertex_edge(new_headv,inverse_id(es->e_id));
; 1217 :         }
; 1218 :       */
; 1219 :       }
; 1220 :       else
; 1221 :       { newe_id = dup_edge(es->e_id);

	push	eax
	call	_dup_edge
	mov	edi, eax

; 1222 :         switch ( web.modeltype )

	mov	eax, DWORD PTR _web+628
	add	esp, 4
	dec	eax
	mov	DWORD PTR _newe_id$89928[ebp], edi
	je	$LN27@detorus_un@2
	dec	eax
	je	$LN26@detorus_un@2
	dec	eax
	jne	$LN214@detorus_un@2

; 1233 :           case LAGRANGE:
; 1234 :           { vertex_id *v = get_edge_vertices(newe_id);

	mov	ecx, DWORD PTR _web+124
	mov	edx, DWORD PTR _web+216
	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	add	esi, DWORD PTR [edx+eax+304]

; 1235 :             set_edge_tailv(newe_id,dt_vlist[es->v[0]].v_id);

	mov	ecx, DWORD PTR [ebx+8]
	mov	eax, DWORD PTR [ecx]
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR _dt_vlist
	mov	ecx, DWORD PTR [eax+edx*8]
	push	ecx
	push	edi
	call	_set_edge_tailv

; 1236 :             set_edge_headv(newe_id,dt_vlist[es->v[headinx]].v_id);

	mov	edx, DWORD PTR [ebx+8]
	mov	eax, DWORD PTR _headinx$89929[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dt_vlist
	lea	ecx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR [edx+ecx*8]
	push	eax
	push	edi
	call	_set_edge_headv

; 1237 :             for ( j = 1 ; j < ctrl_pts-1 ; j++ )

	mov	edx, DWORD PTR _ctrl_pts$[ebp]
	mov	ecx, 1
	dec	edx
	add	esp, 16					; 00000010H
	cmp	edx, ecx
	jle	$LN214@detorus_un@2
	npad	9
$LL213@detorus_un@2:

; 1238 :             {
; 1239 :               v[j] = dt_vlist[es->v[j]].v_id;

	mov	eax, DWORD PTR [ebx+8]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	ebx, DWORD PTR _dt_vlist
	lea	eax, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR [ebx+eax*8]

; 1240 :               set_attr(v[j],Q_MIDEDGE);

	mov	ebx, eax
	shr	ebx, 29					; 0000001dH
	imul	ebx, 112				; 00000070H
	mov	DWORD PTR [esi+ecx*4], eax
	mov	ebx, DWORD PTR _web[ebx+12]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	ebx, DWORD PTR [eax+12]
	or	DWORD PTR [eax+8], 4194304		; 00400000H
	mov	DWORD PTR [eax+12], ebx

; 1241 :               set_vertex_edge(v[j],newe_id);

	mov	eax, DWORD PTR [esi+ecx*4]
	mov	ebx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]

; 1242 :             }
; 1243 :             break;

	mov	ebx, DWORD PTR _es$89927[ebp]
	inc	ecx
	mov	DWORD PTR [eax+28], edi
	cmp	ecx, edx
	jl	SHORT $LL213@detorus_un@2
	jmp	$LN214@detorus_un@2
$LN26@detorus_un@2:

; 1226 :             break;
; 1227 :           case QUADRATIC:
; 1228 :             set_edge_tailv(newe_id,dt_vlist[es->v[0]].v_id);           

	mov	ecx, DWORD PTR [ebx+8]
	mov	eax, DWORD PTR [ecx]
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR _dt_vlist
	mov	ecx, DWORD PTR [eax+edx*8]
	push	ecx
	push	edi
	call	_set_edge_tailv

; 1229 :             set_edge_headv(newe_id,dt_vlist[es->v[1]].v_id);

	mov	edx, DWORD PTR [ebx+8]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _dt_vlist
	lea	eax, DWORD PTR [eax+eax*2]
	mov	edx, DWORD PTR [ecx+eax*8]
	push	edx
	push	edi
	call	_set_edge_headv

; 1230 :             free_element(get_edge_midv(newe_id));

	mov	eax, DWORD PTR _web+124
	mov	edx, DWORD PTR _web+216
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	ecx, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR _dymem
	mov	edx, DWORD PTR [edx+eax+304]
	mov	eax, DWORD PTR [ecx+edx+8]
	push	eax
	call	_free_element

; 1231 :             set_edge_midv(newe_id,dt_vlist[es->v[2]].v_id);

	mov	ecx, DWORD PTR [ebx+8]
	mov	eax, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _web+124
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR _dt_vlist
	mov	eax, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR [esi+ecx]
	mov	ecx, DWORD PTR _web+216
	mov	esi, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+esi+304]
	mov	DWORD PTR [edx+ecx+8], eax
	mov	edx, DWORD PTR _web+12
	mov	ecx, eax
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	edx, DWORD PTR [edx+ecx]
	mov	DWORD PTR [edx+28], edi
	mov	eax, DWORD PTR _web[eax+12]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	edx, DWORD PTR [ecx+12]
	or	DWORD PTR [ecx+8], 131072		; 00020000H
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR _global_timestamp
	add	esp, 20					; 00000014H
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax

; 1232 :             break;

	jmp	SHORT $LN214@detorus_un@2
$LN27@detorus_un@2:

; 1223 :         { case LINEAR:
; 1224 :             set_edge_tailv(newe_id,dt_vlist[es->v[0]].v_id);

	mov	eax, DWORD PTR [ebx+8]
	mov	eax, DWORD PTR [eax]
	mov	edx, DWORD PTR _dt_vlist
	lea	ecx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR [edx+ecx*8]
	push	eax
	push	edi
	call	_set_edge_tailv

; 1225 :             set_edge_headv(newe_id,dt_vlist[es->v[1]].v_id);

	mov	ecx, DWORD PTR [ebx+8]
	mov	eax, DWORD PTR [ecx+4]
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR _dt_vlist
	mov	ecx, DWORD PTR [eax+edx*8]
	push	ecx
	push	edi
	call	_set_edge_headv
	add	esp, 16					; 00000010H
$LN214@detorus_un@2:

; 1244 :           }  
; 1245 :         } 
; 1246 : 
; 1247 :         if ( get_eattr(newe_id) & BOUNDARY )

	mov	edx, DWORD PTR _web+124
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	ecx, DWORD PTR [esi+edx]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 128				; 00000080H
	xor	edx, edx
	or	eax, edx
	mov	DWORD PTR tv1995[ebp], esi
	je	SHORT $LN21@detorus_un@2

; 1248 :         { set_edge_boundary_num(newe_id,0);

	mov	eax, DWORD PTR _E_BOUNDARY_ATTR
	test	eax, eax
	je	SHORT $LN64@detorus_un@2
	mov	edx, DWORD PTR _dymem
	imul	eax, 240				; 000000f0H
	add	eax, DWORD PTR _web+216
	mov	eax, DWORD PTR [eax+edx+64]
	mov	DWORD PTR [ecx+eax], 0
$LN64@detorus_un@2:

; 1249 :           unset_attr(newe_id,BOUNDARY);

	mov	ecx, edi
	shr	ecx, 29					; 0000001dH
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _web[ecx+12]
	mov	eax, DWORD PTR [edx+esi]
	mov	ecx, DWORD PTR [eax+12]
	and	DWORD PTR [eax+8], -129			; ffffff7fH
	mov	DWORD PTR [eax+12], ecx

; 1250 :         }
; 1251 :         else

	jmp	SHORT $LN20@detorus_un@2
$LN21@detorus_un@2:

; 1252 :           unset_e_all_constraints(newe_id);

	push	edi
	call	_unset_e_all_constraints
	add	esp, 4
$LN20@detorus_un@2:

; 1253 : 
; 1254 :         if ( web.representation == SOAPFILM )

	mov	eax, DWORD PTR _web+624
	cmp	eax, 2
	jne	SHORT $LN19@detorus_un@2

; 1255 :         {
; 1256 : 		  set_edge_fe(newe_id,NULLID);

	xor	eax, eax
	test	edi, 134217728				; 08000000H
	je	SHORT $LN82@detorus_un@2
	mov	eax, 134217728				; 08000000H
$LN82@detorus_un@2:
	mov	edx, DWORD PTR _web+124
	mov	ecx, DWORD PTR [esi+edx]
	jmp	$LN227@detorus_un@2
$LN19@detorus_un@2:

; 1257 :         }
; 1258 :         else if ( web.representation == STRING )

	cmp	eax, 1
	jne	$LN178@detorus_un@2

; 1259 :         { // copy facet links
; 1260 :           facetedge_id start_fe,fe,new_start_fe=NULLID,new_fe,prev_fe;
; 1261 :           facet_id f_id;
; 1262 : 
; 1263 :           fe = start_fe = get_edge_fe(es->e_id);

	mov	eax, DWORD PTR [ebx]
	mov	esi, DWORD PTR _web+124
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	xor	edx, edx
	mov	DWORD PTR _new_start_fe$89969[ebp], edx
	cmp	ecx, edx
	jne	SHORT $LN86@detorus_un@2
	xor	eax, eax
	mov	DWORD PTR _start_fe$89967[ebp], eax
	jmp	SHORT $LN87@detorus_un@2
$LN86@detorus_un@2:
	mov	ecx, DWORD PTR [ecx+28]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN85@detorus_un@2
	xor	ecx, 134217728				; 08000000H
$LN85@detorus_un@2:
	mov	eax, ecx
	mov	DWORD PTR _start_fe$89967[ebp], ecx
$LN87@detorus_un@2:
	mov	DWORD PTR _fe$89968[ebp], eax

; 1264 :           prev_fe = NULLID;

	mov	DWORD PTR _prev_fe$89971[ebp], edx

; 1265 :           if ( valid_id(start_fe) )

	test	eax, 268435456				; 10000000H
	je	$LN178@detorus_un@2
	mov	esi, DWORD PTR _web+460
	npad	6
$LL15@detorus_un@2:

; 1266 :           { do
; 1267 :             { f_id = get_fe_facet(fe);

	mov	ebx, DWORD PTR _fe$89968[ebp]
	mov	eax, ebx
	shr	eax, 28					; 0000001cH
	and	eax, 1
	mov	DWORD PTR tv2122[ebp], eax
	jne	SHORT $LN90@detorus_un@2
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN89@detorus_un@2
$LN90@detorus_un@2:
	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+edx*4]
	mov	eax, DWORD PTR [eax+24]
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN89@detorus_un@2
	xor	eax, 134217728				; 08000000H
$LN89@detorus_un@2:

; 1268 :               new_fe = new_facetedge(f_id,newe_id);

	mov	ecx, DWORD PTR _newe_id$89928[ebp]
	push	ecx
	push	eax
	mov	DWORD PTR _f_id$89972[ebp], eax
	call	_new_facetedge
	mov	edi, eax
	add	esp, 8

; 1269 :               if ( equal_id(fe,start_fe) )
; 1270 :               { new_start_fe = new_fe;
; 1271 :                 set_next_facet(new_fe,new_fe);

	shr	eax, 28					; 0000001cH
	cmp	ebx, DWORD PTR _start_fe$89967[ebp]
	jne	$LN12@detorus_un@2
	and	eax, 1
	mov	DWORD PTR _new_start_fe$89969[ebp], edi
	mov	DWORD PTR tv2138[ebp], eax
	je	SHORT $LN221@detorus_un@2
	mov	edx, edi
	test	edi, 134217728				; 08000000H
	je	SHORT $LN94@detorus_un@2
	mov	esi, DWORD PTR _web+460
	xor	edx, 134217728				; 08000000H
	mov	ecx, edi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [ecx+36], edx
	jmp	SHORT $LN221@detorus_un@2
$LN94@detorus_un@2:
	mov	ecx, DWORD PTR _web+460
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edx+40], edi
$LN221@detorus_un@2:

; 1272 :                 set_prev_facet(new_fe,new_fe);

	test	eax, eax
	je	$LN210@detorus_un@2
	test	edi, 134217728				; 08000000H
	je	SHORT $LN99@detorus_un@2
	mov	edx, DWORD PTR _web+460
	mov	eax, edi
	xor	eax, 134217728				; 08000000H
	mov	ecx, edi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+40], eax
	jmp	SHORT $LN98@detorus_un@2
$LN99@detorus_un@2:
	mov	eax, DWORD PTR _web+460
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [ecx+36], edi
$LN98@detorus_un@2:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax

; 1273 :               }
; 1274 :               else

	jmp	$LN210@detorus_un@2
$LN12@detorus_un@2:

; 1275 :               { set_next_facet(new_fe,new_start_fe);

	and	eax, 1
	mov	DWORD PTR tv2138[ebp], eax
	je	SHORT $LN209@detorus_un@2
	test	edi, 134217728				; 08000000H
	je	SHORT $LN104@detorus_un@2
	mov	ecx, DWORD PTR _new_start_fe$89969[ebp]
	mov	esi, DWORD PTR _web+460
	mov	edx, ecx
	xor	edx, 134217728				; 08000000H
	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [eax+36], edx
	mov	eax, DWORD PTR tv2138[ebp]
	jmp	SHORT $LN103@detorus_un@2
$LN104@detorus_un@2:
	mov	edx, DWORD PTR _web+460
	mov	ecx, edi
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _new_start_fe$89969[ebp]
	mov	DWORD PTR [edx+40], ecx
	jmp	SHORT $LN103@detorus_un@2
$LN209@detorus_un@2:
	mov	ecx, DWORD PTR _new_start_fe$89969[ebp]
$LN103@detorus_un@2:

; 1276 :                 set_prev_facet(new_fe,prev_fe);

	test	eax, eax
	je	SHORT $LN215@detorus_un@2
	test	edi, 134217728				; 08000000H
	je	SHORT $LN109@detorus_un@2
	mov	eax, DWORD PTR _prev_fe$89971[ebp]
	mov	ebx, DWORD PTR _web+460
	mov	edx, eax
	xor	edx, 134217728				; 08000000H
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ebx+esi*4]
	mov	ebx, DWORD PTR _fe$89968[ebp]
	mov	DWORD PTR [esi+40], edx
	jmp	SHORT $LN108@detorus_un@2
$LN109@detorus_un@2:
	mov	edx, DWORD PTR _web+460
	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR _prev_fe$89971[ebp]
	mov	DWORD PTR [edx+36], eax
$LN108@detorus_un@2:
	mov	edx, DWORD PTR _global_timestamp
	inc	edx
	mov	DWORD PTR _global_timestamp, edx
	mov	DWORD PTR _top_timestamp, edx
	jmp	SHORT $LN111@detorus_un@2
$LN215@detorus_un@2:
	mov	eax, DWORD PTR _prev_fe$89971[ebp]
$LN111@detorus_un@2:

; 1277 :                 set_prev_facet(new_start_fe,new_fe);

	test	ecx, 268435456				; 10000000H
	je	SHORT $LN116@detorus_un@2
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN114@detorus_un@2
	mov	esi, DWORD PTR _web+460
	mov	edx, edi
	xor	edx, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN113@detorus_un@2
$LN114@detorus_un@2:
	mov	edx, DWORD PTR _web+460
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+36], edi
$LN113@detorus_un@2:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN116@detorus_un@2:

; 1278 :                 set_next_facet(prev_fe,new_fe);

	test	eax, 268435456				; 10000000H
	je	SHORT $LN210@detorus_un@2
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN119@detorus_un@2
	mov	edx, edi
	xor	edx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+36], edx
	jmp	SHORT $LN210@detorus_un@2
$LN119@detorus_un@2:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx+40], edi
$LN210@detorus_un@2:

; 1279 :               }
; 1280 :               // Maybe splice in where tail of old was
; 1281 :               if ( equal_id(get_edge_tailv(newe_id),get_edge_tailv(es->e_id)) )

	mov	eax, DWORD PTR _es$89927[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN124@detorus_un@2
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+216
	add	edx, DWORD PTR [ecx+eax+304]
	mov	eax, DWORD PTR _web+636
	mov	esi, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN123@detorus_un@2
$LN124@detorus_un@2:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+216
	mov	eax, DWORD PTR [ecx+eax+304]
	mov	esi, DWORD PTR [edx+eax]
$LN123@detorus_un@2:
	mov	ecx, DWORD PTR _newe_id$89928[ebp]
	push	ecx
	call	_get_edge_tailv
	add	esp, 4
	cmp	eax, esi

; 1282 :               { facetedge_id ffe = get_prev_edge(fe);

	mov	esi, DWORD PTR _web+460
	jne	$LN220@detorus_un@2
	mov	edx, ebx
	shr	edx, 27					; 0000001bH
	and	edx, 1
	mov	DWORD PTR tv2133[ebp], edx
	mov	ecx, ebx
	je	SHORT $LN128@detorus_un@2
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	eax, DWORD PTR [ecx+esi]
	mov	eax, DWORD PTR [eax+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN127@detorus_un@2
$LN128@detorus_un@2:
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	eax, DWORD PTR [ecx+esi]
	mov	eax, DWORD PTR [eax+28]
$LN127@detorus_un@2:

; 1283 :                 set_next_edge(ffe,new_fe);

	test	eax, 268435456				; 10000000H
	je	SHORT $LN222@detorus_un@2
	mov	ebx, eax
	test	eax, 134217728				; 08000000H
	je	SHORT $LN132@detorus_un@2
	mov	edx, edi
	xor	edx, 134217728				; 08000000H
	and	ebx, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+ebx*4]
	mov	DWORD PTR [esi+28], edx
	mov	edx, DWORD PTR tv2133[ebp]
	jmp	SHORT $LN228@detorus_un@2
$LN132@detorus_un@2:
	and	ebx, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+ebx*4]
	mov	DWORD PTR [esi+32], edi
$LN228@detorus_un@2:
	mov	esi, DWORD PTR _web+460
$LN222@detorus_un@2:

; 1284 :                 set_prev_edge(new_fe,ffe);

	cmp	DWORD PTR tv2138[ebp], 0
	je	SHORT $LN219@detorus_un@2
	mov	ebx, edi
	test	edi, 134217728				; 08000000H
	je	SHORT $LN137@detorus_un@2
	xor	eax, 134217728				; 08000000H
	and	ebx, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+ebx*4]
	mov	DWORD PTR [esi+32], eax
	jmp	SHORT $LN136@detorus_un@2
$LN137@detorus_un@2:
	and	ebx, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+ebx*4]
	mov	DWORD PTR [esi+28], eax
$LN136@detorus_un@2:
	mov	eax, DWORD PTR _global_timestamp
	mov	esi, DWORD PTR _web+460
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN219@detorus_un@2:

; 1285 :                 set_prev_edge(fe,NULLID);

	cmp	DWORD PTR tv2122[ebp], 0
	je	SHORT $LN220@detorus_un@2
	test	edx, edx
	je	SHORT $LN142@detorus_un@2
	mov	eax, DWORD PTR [ecx+esi]
	mov	DWORD PTR [eax+32], 134217728		; 08000000H
	jmp	SHORT $LN141@detorus_un@2
$LN142@detorus_un@2:
	mov	ecx, DWORD PTR [ecx+esi]
	mov	DWORD PTR [ecx+28], 0
$LN141@detorus_un@2:
	mov	eax, DWORD PTR _global_timestamp
	mov	esi, DWORD PTR _web+460
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN220@detorus_un@2:

; 1286 :               }
; 1287 :               // Maybe splice in where head of old was
; 1288 :               if ( equal_id(get_edge_headv(newe_id),get_edge_headv(es->e_id)) )

	mov	edx, DWORD PTR _es$89927[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN147@detorus_un@2
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	ebx, DWORD PTR [edx+eax]
	jmp	SHORT $LN146@detorus_un@2
$LN147@detorus_un@2:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	ebx, DWORD PTR [edx+eax*4]
$LN146@detorus_un@2:
	mov	ecx, DWORD PTR _newe_id$89928[ebp]
	push	ecx
	call	_get_edge_headv
	add	esp, 4
	cmp	eax, ebx

; 1289 :               { facetedge_id ffe = get_next_edge(fe);

	mov	ebx, DWORD PTR _fe$89968[ebp]
	jne	$LN164@detorus_un@2
	mov	eax, ebx
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR tv2133[ebp], eax
	mov	ecx, ebx
	je	SHORT $LN151@detorus_un@2
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	edx, DWORD PTR [ecx+esi]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN150@detorus_un@2
$LN151@detorus_un@2:
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	eax, DWORD PTR [ecx+esi]
	mov	eax, DWORD PTR [eax+32]
$LN150@detorus_un@2:

; 1290 :                 set_prev_edge(ffe,new_fe);

	test	eax, 268435456				; 10000000H
	je	SHORT $LN211@detorus_un@2
	test	eax, 134217728				; 08000000H
	je	SHORT $LN155@detorus_un@2
	mov	edx, edi
	xor	edx, 134217728				; 08000000H
	mov	ebx, eax
	and	ebx, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+ebx*4]
	mov	ebx, DWORD PTR _fe$89968[ebp]
	mov	DWORD PTR [esi+32], edx
	jmp	SHORT $LN154@detorus_un@2
$LN155@detorus_un@2:
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [edx+28], edi
$LN154@detorus_un@2:
	mov	edx, DWORD PTR _global_timestamp
	mov	esi, DWORD PTR _web+460
	inc	edx
	mov	DWORD PTR _global_timestamp, edx
	mov	DWORD PTR _top_timestamp, edx
$LN211@detorus_un@2:

; 1291 :                 set_next_edge(new_fe,ffe);

	cmp	DWORD PTR tv2138[ebp], 0
	je	SHORT $LN159@detorus_un@2
	mov	edx, edi
	test	edi, 134217728				; 08000000H
	je	SHORT $LN160@detorus_un@2
	xor	eax, 134217728				; 08000000H
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [edx+28], eax
	jmp	SHORT $LN229@detorus_un@2
$LN160@detorus_un@2:
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [edx+32], eax
$LN229@detorus_un@2:
	mov	esi, DWORD PTR _web+460
$LN159@detorus_un@2:

; 1292 :                 set_next_edge(fe,NULLID);

	cmp	DWORD PTR tv2122[ebp], 0
	je	SHORT $LN164@detorus_un@2
	cmp	DWORD PTR tv2133[ebp], 0
	je	SHORT $LN165@detorus_un@2
	mov	eax, DWORD PTR [ecx+esi]
	mov	DWORD PTR [eax+28], 134217728		; 08000000H
	jmp	SHORT $LN231@detorus_un@2
$LN165@detorus_un@2:
	mov	ecx, DWORD PTR [ecx+esi]
	mov	DWORD PTR [ecx+32], 0
$LN231@detorus_un@2:
	mov	esi, DWORD PTR _web+460
$LN164@detorus_un@2:

; 1293 :               }
; 1294 :    
; 1295 :               if ( !valid_id(get_prev_edge(new_fe)) )

	test	edi, 134217728				; 08000000H
	je	SHORT $LN170@detorus_un@2
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+edx*4]
	mov	eax, DWORD PTR [eax+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN169@detorus_un@2
$LN170@detorus_un@2:
	mov	ecx, edi
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+ecx*4]
	mov	eax, DWORD PTR [edx+28]
$LN169@detorus_un@2:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN8@detorus_un@2

; 1296 :                   set_facet_fe(f_id,new_fe);

	mov	eax, DWORD PTR _f_id$89972[ebp]
	push	edi
	push	eax
	call	_set_facet_fe
	mov	esi, DWORD PTR _web+460
	add	esp, 8
$LN8@detorus_un@2:

; 1297 : 
; 1298 :              
; 1299 :               prev_fe = new_fe;

	mov	DWORD PTR _prev_fe$89971[ebp], edi

; 1300 :               fe = get_next_facet(fe);

	test	ebx, 134217728				; 08000000H
	je	SHORT $LN174@detorus_un@2
	and	ebx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ebx*4]
	mov	eax, DWORD PTR [ecx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN230@detorus_un@2
$LN174@detorus_un@2:
	and	ebx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+ebx*4]
	mov	eax, DWORD PTR [edx+40]
$LN230@detorus_un@2:
	mov	DWORD PTR _fe$89968[ebp], eax

; 1301 :             } while ( !equal_id(fe,start_fe));

	cmp	eax, DWORD PTR _start_fe$89967[ebp]
	jne	$LL15@detorus_un@2

; 1302 :             set_edge_fe(newe_id,new_start_fe);

	test	DWORD PTR _newe_id$89928[ebp], 134217728 ; 08000000H
	mov	eax, DWORD PTR _new_start_fe$89969[ebp]
	je	SHORT $LN177@detorus_un@2
	xor	eax, 134217728				; 08000000H
$LN177@detorus_un@2:
	mov	ecx, DWORD PTR tv1995[ebp]
	mov	edx, DWORD PTR _web+124
	mov	ecx, DWORD PTR [ecx+edx]
	mov	ebx, DWORD PTR _es$89927[ebp]
	mov	edi, DWORD PTR _newe_id$89928[ebp]
$LN227@detorus_un@2:
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _top_timestamp, eax
	mov	DWORD PTR _global_timestamp, eax
$LN178@detorus_un@2:

; 1303 :           }
; 1304 : 
; 1305 :         }
; 1306 : 
; 1307 :         es->e_id = newe_id;

	mov	DWORD PTR [ebx], edi

; 1308 :       }
; 1309 :     }
; 1310 :     else

	jmp	$LN7@detorus_un@2
$LN32@detorus_un@2:

; 1311 :     {    
; 1312 :       /* new edge */
; 1313 :       newe_id = new_edge(dt_vlist[es->v[0]].v_id,
; 1314 :                                dt_vlist[es->v[headinx]].v_id,NULLID);

	mov	eax, DWORD PTR [ebx+8]
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [eax]
	lea	edx, DWORD PTR [ecx+ecx*2]
	mov	ecx, DWORD PTR _dt_vlist
	mov	edx, DWORD PTR [ecx+edx*8]
	push	0
	lea	eax, DWORD PTR [eax+eax*2]
	mov	ecx, DWORD PTR [ecx+eax*8]
	push	edx
	push	ecx
	call	_new_edge

; 1315 :       if ( web.modeltype == QUADRATIC )

	mov	ecx, DWORD PTR _web+628
	add	esp, 12					; 0000000cH
	cmp	ecx, 2
	jne	$LN6@detorus_un@2

; 1316 :       { vertex_id v_id = dt_vlist[es->v[2]].v_id;

	mov	edx, DWORD PTR [ebx+8]
	mov	ecx, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _dt_vlist

; 1317 :         set_edge_midv(newe_id,v_id);

	mov	esi, DWORD PTR _web+124
	mov	edi, DWORD PTR _dymem
	lea	ecx, DWORD PTR [ecx+ecx*2]
	mov	ecx, DWORD PTR [edx+ecx*8]
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	mov	esi, DWORD PTR _web+216
	mov	esi, DWORD PTR [esi+edi+304]
	mov	DWORD PTR [edx+esi+8], ecx
	mov	esi, DWORD PTR _web+12
	mov	edx, ecx
	shr	ecx, 29					; 0000001dH
	imul	ecx, 112				; 00000070H
	and	edx, 134217727				; 07ffffffH
	add	edx, edx
	add	edx, edx
	mov	esi, DWORD PTR [edx+esi]
	mov	DWORD PTR [esi+28], eax
	mov	ecx, DWORD PTR _web[ecx+12]
	mov	edx, DWORD PTR [ecx+edx]
	mov	ecx, DWORD PTR [edx+12]
	or	DWORD PTR [edx+8], 131072		; 00020000H
	mov	DWORD PTR [edx+12], ecx
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
	jmp	$LN1@detorus_un@2
$LN6@detorus_un@2:

; 1318 :       }
; 1319 :       else if ( web.modeltype == LAGRANGE )

	cmp	ecx, 3
	jne	$LN1@detorus_un@2

; 1320 :       { vertex_id *v = get_edge_vertices(newe_id);

	mov	ecx, DWORD PTR _web+124

; 1321 :         for ( j = 1 ; j < ctrl_pts-1 ; j++ )

	mov	edi, DWORD PTR _ctrl_pts$[ebp]
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ecx+edx*4]
	mov	edx, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	esi, DWORD PTR [edx+ecx+304]
	mov	edx, 1
	dec	edi
	cmp	edi, edx
	jle	SHORT $LN1@detorus_un@2
	npad	3
$LL208@detorus_un@2:

; 1322 :         { v[j] = dt_vlist[es->v[j]].v_id;

	mov	ecx, DWORD PTR _es$89927[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	ebx, DWORD PTR _dt_vlist
	lea	ecx, DWORD PTR [ecx+ecx*2]
	mov	ecx, DWORD PTR [ebx+ecx*8]

; 1323 :           set_attr(v[j],Q_MIDEDGE);

	mov	ebx, ecx
	shr	ebx, 29					; 0000001dH
	imul	ebx, 112				; 00000070H
	mov	DWORD PTR [esi+edx*4], ecx
	mov	ebx, DWORD PTR _web[ebx+12]
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	mov	ebx, DWORD PTR [ecx+12]
	or	DWORD PTR [ecx+8], 4194304		; 00400000H
	mov	DWORD PTR [ecx+12], ebx

; 1324 :           set_vertex_edge(v[j],newe_id);

	mov	ecx, DWORD PTR [esi+edx*4]
	mov	ebx, DWORD PTR _web+12
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	inc	edx
	mov	DWORD PTR [ecx+28], eax
	cmp	edx, edi
	jl	SHORT $LL208@detorus_un@2
$LN1@detorus_un@2:

; 1325 :         }
; 1326 :       }
; 1327 :       es->e_id = newe_id;

	mov	edx, DWORD PTR _es$89927[ebp]
	mov	DWORD PTR [edx], eax
	mov	ebx, edx
$LN7@detorus_un@2:

; 1328 :     }
; 1329 :     set_attr(es->e_id,NEWELEMENT);

	mov	eax, DWORD PTR [ebx]
	mov	ecx, eax
	shr	ecx, 29					; 0000001dH
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _web[ecx+12]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR [eax+12]
	or	DWORD PTR [eax+8], 4
	mov	DWORD PTR [eax+12], ecx
	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _dt_ecount
	jl	$LL206@detorus_un@2
$LN203@detorus_un@2:

; 1330 :   }
; 1331 :   return translate;

	mov	eax, DWORD PTR _translate$[ebp]
	pop	edi
	pop	esi
	pop	ebx

; 1332 : } // end detorus_unify_edges()

	mov	esp, ebp
	pop	ebp
	ret	0
_detorus_unify_edges ENDP
_TEXT	ENDS
PUBLIC	_fs$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_detorus_handle_facet
EXTRN	_reverse_orientation_facet:PROC
EXTRN	_new_facet:PROC
EXTRN	_unset_f_all_constraints:PROC
EXTRN	_F_BOUNDARY_ATTR:DWORD
EXTRN	_dup_facet:PROC
; Function compile flags: /Ogtp
;	COMDAT _detorus_handle_facet
_TEXT	SEGMENT
tv2975 = -52						; size = 4
tv2071 = -52						; size = 4
tv2285 = -48						; size = 4
tv2087 = -48						; size = 4
_fs$GSCopy$ = -44					; size = 4
tv1994 = -40						; size = 4
_old_facet_flag$ = -40					; size = 4
tv3135 = -36						; size = 4
tv2301 = -36						; size = 4
tv344 = -36						; size = 4
tv3352 = -32						; size = 4
_want_e$90028 = -32					; size = 4
tv3249 = -28						; size = 4
_e_id$ = -28						; size = 4
_base_fe$90013 = -28					; size = 4
tv2014 = -24						; size = 4
_newf$ = -24						; size = 4
_fe_id$90024 = -20					; size = 4
_j$ = -20						; size = 4
_fe$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_fs$ = 8						; size = 4
_detorus_handle_facet PROC				; COMDAT

; 1342 : {   int j;

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _fs$[ebp]
	push	ebx

; 1343 :     facetedge_id fe[FACET_EDGES];
; 1344 :     facet_id newf = NULLID;
; 1345 :     int old_facet_flag = 0;
; 1346 :     edge_id e_id;
; 1347 : 
; 1348 :     if ( valid_id(fs->f_id) )

	mov	ebx, DWORD PTR [ecx]
	push	esi
	push	edi
	xor	edi, edi

; 1390 :               set_prev_facet(next,prev);

	mov	DWORD PTR _fs$GSCopy$[ebp], ecx
	mov	DWORD PTR _old_facet_flag$[ebp], edi
	test	ebx, 268435456				; 10000000H
	je	$LN48@detorus_ha

; 1349 :     {   
; 1350 :       /* see if same as original facet */
; 1351 :       facetedge_id fe,base_fe = get_facet_fe(fs->f_id);

	mov	edx, DWORD PTR _web+236
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN57@detorus_ha
	xor	eax, 134217728				; 08000000H
$LN57@detorus_ha:
	mov	DWORD PTR _base_fe$90013[ebp], eax

; 1352 : 
; 1353 :       fe = get_facet_fe(fs->f_id);

	test	ebx, 268435456				; 10000000H
	jne	SHORT $LN62@detorus_ha
	xor	esi, esi
	jmp	SHORT $LN61@detorus_ha
$LN62@detorus_ha:
	mov	eax, ebx
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
	mov	esi, DWORD PTR [edx+28]
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN61@detorus_ha
	xor	esi, 134217728				; 08000000H
$LN61@detorus_ha:

; 1354 :       for ( j = 0 ; j < FACET_EDGES ; j++ )

	lea	edx, DWORD PTR [ecx+4]
	xor	eax, eax
	mov	DWORD PTR tv3135[ebp], edx
	mov	ecx, edx
$LL47@detorus_ha:

; 1355 :       { if ( fs->e[j] == 0)

	cmp	DWORD PTR [ecx], edi
	je	$LN1@detorus_ha

; 1354 :       for ( j = 0 ; j < FACET_EDGES ; j++ )

	inc	eax
	add	ecx, 4
	cmp	eax, 3
	jl	SHORT $LL47@detorus_ha

; 1356 :           return;  // skip facet with edge collapsed
; 1357 :       }
; 1358 :       for ( j = 0 ; j < FACET_EDGES ; j++ )

	mov	DWORD PTR _j$[ebp], edi
	mov	edi, edx
$LL43@detorus_ha:

; 1359 :       {        e_id = dt_elist[abs(fs->e[j])].e_id;

	mov	ecx, DWORD PTR [edi]
	mov	eax, ecx
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	edx, DWORD PTR _dt_elist
	lea	eax, DWORD PTR [eax+eax*2]
	mov	edx, DWORD PTR [edx+eax*4]

; 1360 :         if ( fs->e[j] < 0 )

	test	ecx, ecx
	jns	SHORT $LN40@detorus_ha

; 1361 :            invert(e_id);

	xor	edx, 134217728				; 08000000H
$LN40@detorus_ha:

; 1362 :         if ( !equal_id(get_fe_edge(fe),e_id) )

	mov	ecx, DWORD PTR _web+460
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, esi
	and	ecx, 134217728				; 08000000H
	xor	ecx, DWORD PTR [eax+20]
	cmp	ecx, edx
	jne	SHORT $LN284@detorus_ha

; 1363 :           break;
; 1364 :         fe = get_next_edge(fe);

	test	esi, 134217728				; 08000000H
	je	SHORT $LN68@detorus_ha
	mov	esi, DWORD PTR [eax+28]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN42@detorus_ha
$LN68@detorus_ha:
	mov	esi, DWORD PTR [eax+32]
$LN42@detorus_ha:

; 1356 :           return;  // skip facet with edge collapsed
; 1357 :       }
; 1358 :       for ( j = 0 ; j < FACET_EDGES ; j++ )

	mov	eax, DWORD PTR _j$[ebp]
	inc	eax
	add	edi, 4
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, 3
	jl	SHORT $LL43@detorus_ha
$LN284@detorus_ha:

; 1365 :       }
; 1366 :       if ( j == FACET_EDGES )

	mov	eax, 3
	cmp	DWORD PTR _j$[ebp], eax
	jne	$LN38@detorus_ha

; 1367 :       { /* same edges, so same facet */
; 1368 :        
; 1369 :         // Set up facetedges with possibly changed edges
; 1370 : 	    facetedge_id fe_id = base_fe;

	mov	edi, DWORD PTR _base_fe$90013[ebp]
	mov	edx, DWORD PTR tv3135[ebp]
	mov	DWORD PTR tv344[ebp], eax
	mov	eax, DWORD PTR _web+460
	mov	DWORD PTR _fe_id$90024[ebp], edi
	mov	DWORD PTR tv3249[ebp], edx
	npad	5
$LL37@detorus_ha:

; 1372 : 		{ 
; 1373 :           edge_id want_e; // the edge that should be there 
; 1374 :           edge_id have_e; // edge already there
; 1375 :  		
; 1376 : 		  have_e = get_fe_edge(fe_id);
; 1377 : 		  if ( fs->e[j] > 0 )

	mov	ecx, DWORD PTR tv3249[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	ebx, edi
	and	ebx, 134217727				; 07ffffffH
	add	ebx, ebx
	add	ebx, ebx
	mov	esi, DWORD PTR [ebx+eax]
	mov	eax, edi
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [esi+20]

; 1378 : 		    want_e = dt_elist[fs->e[j]].e_id;

	lea	edx, DWORD PTR [ecx+ecx*2]
	test	ecx, ecx
	mov	ecx, DWORD PTR _dt_elist
	mov	DWORD PTR tv1994[ebp], ebx
	jle	SHORT $LN34@detorus_ha
	mov	ecx, DWORD PTR [ecx+edx*4]

; 1379 : 		  else 

	jmp	SHORT $LN294@detorus_ha
$LN34@detorus_ha:

; 1380 : 			want_e = inverse_id(dt_elist[-fs->e[j]].e_id);

	add	edx, edx
	add	edx, edx
	sub	ecx, edx
	mov	ecx, DWORD PTR [ecx]
	xor	ecx, 134217728				; 08000000H
$LN294@detorus_ha:
	mov	DWORD PTR _want_e$90028[ebp], ecx

; 1381 : 		
; 1382 :           if ( !equal_id(want_e,have_e) )

	cmp	ecx, eax
	je	$LN283@detorus_ha

; 1383 :           { 
; 1384 :             // remove fe_id from old edge
; 1385 :             facetedge_id prev,next,ffe;
; 1386 :             prev = get_prev_facet(fe_id);

	mov	ecx, edi
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR tv2014[ebp], ecx
	je	SHORT $LN74@detorus_ha
	mov	edx, DWORD PTR [esi+40]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN73@detorus_ha
$LN74@detorus_ha:
	mov	edx, DWORD PTR [esi+36]
$LN73@detorus_ha:

; 1387 :             next = get_next_facet(fe_id);

	cmp	DWORD PTR tv2014[ebp], 0
	je	SHORT $LN78@detorus_ha
	mov	ecx, DWORD PTR [esi+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN77@detorus_ha
$LN78@detorus_ha:
	mov	ecx, DWORD PTR [esi+40]
$LN77@detorus_ha:

; 1388 :             if ( !equal_id(prev,fe_id) )

	cmp	edx, edi
	je	$LN31@detorus_ha

; 1389 :             { set_next_facet(prev,next);

	test	edx, 268435456				; 10000000H
	je	SHORT $LN282@detorus_ha
	test	edx, 134217728				; 08000000H
	je	SHORT $LN82@detorus_ha
	mov	ebx, DWORD PTR _web+460
	mov	esi, ecx
	xor	esi, 134217728				; 08000000H
	mov	edi, edx
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR tv1994[ebp]
	mov	DWORD PTR [edi+36], esi
	jmp	SHORT $LN295@detorus_ha
$LN82@detorus_ha:
	mov	edi, DWORD PTR _web+460
	mov	esi, edx
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edi+esi*4]
	mov	DWORD PTR [esi+40], ecx
$LN295@detorus_ha:
	mov	edi, DWORD PTR _fe_id$90024[ebp]
$LN282@detorus_ha:

; 1390 :               set_prev_facet(next,prev);

	test	ecx, 268435456				; 10000000H
	je	SHORT $LN289@detorus_ha
	mov	edi, DWORD PTR _web+460
	mov	esi, ecx
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN87@detorus_ha
	xor	edx, 134217728				; 08000000H
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edi+esi*4]
	mov	DWORD PTR [esi+40], edx
	jmp	SHORT $LN86@detorus_ha
$LN87@detorus_ha:
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edi+esi*4]
	mov	DWORD PTR [esi+36], edx
$LN86@detorus_ha:
	mov	edx, DWORD PTR _global_timestamp
	mov	edi, DWORD PTR _fe_id$90024[ebp]
	inc	edx
	mov	DWORD PTR _global_timestamp, edx
	mov	DWORD PTR _top_timestamp, edx
$LN289@detorus_ha:

; 1391 :               set_edge_fe(have_e,next);

	test	eax, 134217728				; 08000000H
	je	SHORT $LN94@detorus_ha
	xor	ecx, 134217728				; 08000000H

; 1392 :             }
; 1393 :             else

	jmp	SHORT $LN94@detorus_ha
$LN31@detorus_ha:

; 1394 :             {
; 1395 :               set_edge_fe(have_e,NULLID);          

	xor	ecx, ecx
	test	eax, 134217728				; 08000000H
	je	SHORT $LN94@detorus_ha
	mov	ecx, 134217728				; 08000000H
$LN94@detorus_ha:
	mov	edx, DWORD PTR _web+124
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [eax+28], ecx
	mov	eax, DWORD PTR _global_timestamp

; 1396 :             }
; 1397 :             
; 1398 :             // install on new edge
; 1399 : 	        ffe = get_edge_fe(want_e);

	mov	ecx, DWORD PTR _want_e$90028[ebp]
	mov	edx, DWORD PTR _web+124
	inc	eax
	mov	DWORD PTR _top_timestamp, eax
	mov	DWORD PTR _global_timestamp, eax
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv2071[ebp], eax
	mov	eax, DWORD PTR [edx+eax]
	test	eax, eax
	jne	SHORT $LN98@detorus_ha
	xor	esi, esi
	jmp	SHORT $LN99@detorus_ha
$LN98@detorus_ha:
	mov	eax, DWORD PTR [eax+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN97@detorus_ha
	xor	eax, 134217728				; 08000000H
$LN97@detorus_ha:
	mov	esi, eax
$LN99@detorus_ha:

; 1400 : 	        if ( valid_id(ffe) )

	test	esi, 268435456				; 10000000H
	je	$LN29@detorus_ha

; 1401 : 	        { /* insert in edge facet loop */
; 1402 : 	          set_next_facet(fe_id,get_next_facet(ffe));

	mov	edx, DWORD PTR _web+460
	mov	eax, esi
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR tv2087[ebp], eax
	mov	eax, esi
	je	SHORT $LN102@detorus_ha
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	ecx, DWORD PTR [eax+edx]
	mov	ecx, DWORD PTR [ecx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN101@detorus_ha
$LN102@detorus_ha:
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	ecx, DWORD PTR [eax+edx]
	mov	ecx, DWORD PTR [ecx+40]
$LN101@detorus_ha:
	mov	edi, DWORD PTR _fe_id$90024[ebp]
	shr	edi, 28					; 0000001cH
	and	edi, 1
	je	SHORT $LN105@detorus_ha
	cmp	DWORD PTR tv2014[ebp], 0
	mov	ebx, DWORD PTR tv1994[ebp]
	mov	edx, DWORD PTR [ebx+edx]
	je	SHORT $LN106@detorus_ha
	xor	ecx, 134217728				; 08000000H
	mov	DWORD PTR [edx+36], ecx
	jmp	SHORT $LN296@detorus_ha
$LN106@detorus_ha:
	mov	DWORD PTR [edx+40], ecx
$LN296@detorus_ha:
	mov	edx, DWORD PTR _web+460
$LN105@detorus_ha:

; 1403 : 	       	  set_prev_facet(fe_id,ffe);

	test	edi, edi
	je	SHORT $LN113@detorus_ha
	cmp	DWORD PTR tv2014[ebp], 0
	je	SHORT $LN111@detorus_ha
	mov	ecx, DWORD PTR [ebx+edx]
	xor	esi, 134217728				; 08000000H
	mov	DWORD PTR [ecx+40], esi
	jmp	SHORT $LN110@detorus_ha
$LN111@detorus_ha:
	mov	edx, DWORD PTR [ebx+edx]
	mov	DWORD PTR [edx+36], esi
$LN110@detorus_ha:
	mov	ecx, DWORD PTR _global_timestamp
	mov	edx, DWORD PTR _web+460
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN113@detorus_ha:

; 1404 : 		      set_prev_facet(get_next_facet(ffe),fe_id);

	cmp	DWORD PTR tv2087[ebp], 0
	mov	ecx, DWORD PTR [eax+edx]
	je	SHORT $LN116@detorus_ha
	mov	ecx, DWORD PTR [ecx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN115@detorus_ha
$LN116@detorus_ha:
	mov	ecx, DWORD PTR [ecx+40]
$LN115@detorus_ha:
	mov	esi, DWORD PTR _fe_id$90024[ebp]
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN122@detorus_ha
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN120@detorus_ha
	mov	edi, esi
	xor	edi, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [edx+40], edi
	jmp	SHORT $LN119@detorus_ha
$LN120@detorus_ha:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+36], esi
$LN119@detorus_ha:
	mov	ecx, DWORD PTR _global_timestamp
	mov	edx, DWORD PTR _web+460
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN122@detorus_ha:

; 1405 : 		      set_next_facet(ffe,fe_id);

	cmp	DWORD PTR tv2087[ebp], 0
	je	SHORT $LN125@detorus_ha
	mov	edx, DWORD PTR [eax+edx]
	xor	esi, 134217728				; 08000000H
	mov	DWORD PTR [edx+36], esi
	jmp	SHORT $LN137@detorus_ha
$LN125@detorus_ha:
	mov	eax, DWORD PTR [eax+edx]
	mov	DWORD PTR [eax+40], esi

; 1406 : 	        }
; 1407 : 	        else

	jmp	SHORT $LN137@detorus_ha
$LN29@detorus_ha:

; 1408 : 	        {
; 1409 : 	          set_next_facet(fe_id,fe_id);

	mov	eax, edi
	shr	eax, 28					; 0000001cH
	and	eax, 1
	je	SHORT $LN290@detorus_ha
	cmp	DWORD PTR tv2014[ebp], 0
	mov	ecx, DWORD PTR _web+460
	mov	edx, DWORD PTR [ebx+ecx]
	je	SHORT $LN130@detorus_ha
	xor	edi, 134217728				; 08000000H
	mov	DWORD PTR [edx+36], edi
	jmp	SHORT $LN290@detorus_ha
$LN130@detorus_ha:
	mov	DWORD PTR [edx+40], edi
$LN290@detorus_ha:

; 1410 : 		      set_prev_facet(fe_id,fe_id);

	test	eax, eax
	je	SHORT $LN137@detorus_ha
	cmp	DWORD PTR tv2014[ebp], 0
	je	SHORT $LN135@detorus_ha
	mov	ecx, DWORD PTR _web+460
	mov	eax, DWORD PTR _fe_id$90024[ebp]
	mov	edx, DWORD PTR [ebx+ecx]
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN134@detorus_ha
$LN135@detorus_ha:
	mov	eax, DWORD PTR _web+460
	mov	ecx, DWORD PTR [ebx+eax]
	mov	edx, DWORD PTR _fe_id$90024[ebp]
	mov	DWORD PTR [ecx+36], edx
$LN134@detorus_ha:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN137@detorus_ha:

; 1411 : 	        }
; 1412 : 	        set_edge_fe(want_e,fe_id);

	mov	ecx, DWORD PTR _want_e$90028[ebp]
	mov	eax, DWORD PTR _fe_id$90024[ebp]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN139@detorus_ha
	xor	eax, 134217728				; 08000000H
$LN139@detorus_ha:
	mov	esi, DWORD PTR _web+124
	mov	edx, DWORD PTR tv2071[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [edx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax

; 1413 : 	        set_fe_edge(fe_id,want_e);

	cmp	DWORD PTR tv2014[ebp], 0
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
	mov	eax, ecx
	je	SHORT $LN142@detorus_ha
	xor	ecx, 134217728				; 08000000H
	mov	eax, ecx
$LN142@detorus_ha:
	mov	ecx, DWORD PTR _web+460
	mov	edx, DWORD PTR [ebx+ecx]
	mov	edi, DWORD PTR _fe_id$90024[ebp]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN283@detorus_ha:

; 1414 :           }
; 1415 : 		  
; 1416 : 		  fe_id = get_next_edge(fe_id);

	mov	eax, DWORD PTR _web+460
	test	edi, 134217728				; 08000000H
	je	SHORT $LN146@detorus_ha
	mov	ecx, DWORD PTR [ebx+eax]
	mov	edi, DWORD PTR [ecx+28]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN297@detorus_ha
$LN146@detorus_ha:
	mov	edx, DWORD PTR [ebx+eax]
	mov	edi, DWORD PTR [edx+32]
$LN297@detorus_ha:

; 1371 : 	    for ( j = 0 ; j < FACET_EDGES ; j++ )

	mov	edx, 4
	add	DWORD PTR tv3249[ebp], edx
	mov	esi, 1
	sub	DWORD PTR tv344[ebp], esi

; 1414 :           }
; 1415 : 		  
; 1416 : 		  fe_id = get_next_edge(fe_id);

	mov	DWORD PTR _fe_id$90024[ebp], edi
	jne	$LL37@detorus_ha

; 1417 : 		}
; 1418 :         set_attr(fs->f_id,NEWELEMENT);

	mov	ecx, DWORD PTR _fs$GSCopy$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	edi, eax
	shr	edi, 29					; 0000001dH
	imul	edi, 112				; 00000070H
	mov	edi, DWORD PTR _web[edi+12]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	or	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+12], edx

; 1419 :         newf = fs->f_id;

	mov	eax, DWORD PTR [ecx]

; 1445 :     {
; 1446 :       fe[0] = get_facet_fe(fs->f_id);

	mov	ecx, eax
	mov	DWORD PTR _newf$[ebp], eax
	mov	DWORD PTR _old_facet_flag$[ebp], esi
	test	ecx, 268435456				; 10000000H
	jne	$LN158@detorus_ha
	xor	eax, eax
	jmp	$LN157@detorus_ha
$LN38@detorus_ha:

; 1420 :         old_facet_flag = 1;
; 1421 :       }
; 1422 :       else 
; 1423 :       { newf = dup_facet(fs->f_id);

	push	ebx
	call	_dup_facet
	mov	esi, eax

; 1424 : 	    set_facet_fe(newf,NULLID);

	push	0
	push	esi
	mov	DWORD PTR _newf$[ebp], esi
	call	_set_facet_fe

; 1425 :         set_attr(newf,NEWELEMENT);
; 1426 :         fs->f_id = newf;

	mov	edi, DWORD PTR _fs$GSCopy$[ebp]
	mov	ecx, esi
	shr	ecx, 29					; 0000001dH
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _web[ecx+12]
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	ecx, DWORD PTR [edx+eax]
	mov	edx, DWORD PTR [ecx+12]
	or	DWORD PTR [ecx+8], 4
	mov	DWORD PTR [ecx+12], edx
	mov	DWORD PTR [edi], esi

; 1427 :         if ( get_fattr(fs->f_id) & BOUNDARY )

	mov	ecx, DWORD PTR _web+236
	mov	eax, DWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 128				; 00000080H
	xor	edx, edx
	add	esp, 12					; 0000000cH
	or	ecx, edx
	je	SHORT $LN26@detorus_ha

; 1428 :         { set_facet_boundary_num(fs->f_id,0);

	mov	ecx, DWORD PTR _F_BOUNDARY_ATTR
	test	ecx, ecx
	je	SHORT $LN51@detorus_ha
	mov	edx, DWORD PTR _dymem
	imul	ecx, 240				; 000000f0H
	add	ecx, DWORD PTR _web+328
	mov	ecx, DWORD PTR [ecx+edx+64]
	mov	DWORD PTR [eax+ecx], 0
$LN51@detorus_ha:

; 1429 :           unset_attr(fs->f_id,BOUNDARY);

	mov	eax, DWORD PTR [edi]
	mov	edx, eax
	shr	edx, 29					; 0000001dH
	imul	edx, 112				; 00000070H
	mov	ecx, DWORD PTR _web[edx+12]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR [eax+12]
	and	DWORD PTR [eax+8], -129			; ffffff7fH
	mov	DWORD PTR [eax+12], edx

; 1430 :         }
; 1431 :         else

	mov	edx, DWORD PTR _web+460
	jmp	$LN23@detorus_ha
$LN26@detorus_ha:

; 1432 :           unset_f_all_constraints(fs->f_id);

	push	esi
	call	_unset_f_all_constraints

; 1433 : 
; 1434 :       }
; 1435 :     }
; 1436 :     else

	mov	edx, DWORD PTR _web+460
	add	esp, 4
	jmp	$LN23@detorus_ha
$LN48@detorus_ha:

; 1437 :     {
; 1438 :       newf = new_facet();

	call	_new_facet
	mov	ecx, eax

; 1439 :       set_attr(newf,NEWELEMENT);

	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	eax, DWORD PTR _web[eax+12]
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR [eax+12]
	or	DWORD PTR [eax+8], 4
	mov	DWORD PTR [eax+12], edx

; 1440 :       fs->f_id = newf;

	mov	eax, DWORD PTR _fs$GSCopy$[ebp]
	mov	DWORD PTR [eax], ecx

; 1441 :     }
; 1442 : 
; 1443 :     /* install edges */
; 1444 :     if ( old_facet_flag )

	mov	edx, DWORD PTR _web+460
	mov	DWORD PTR _newf$[ebp], ecx
	jmp	SHORT $LN23@detorus_ha

; 1445 :     {
; 1446 :       fe[0] = get_facet_fe(fs->f_id);

$LN158@detorus_ha:
	mov	eax, DWORD PTR _web+236
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [edx+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN157@detorus_ha
	xor	eax, 134217728				; 08000000H
$LN157@detorus_ha:

; 1447 :       fe[1] = get_next_edge(fe[0]);

	mov	edx, DWORD PTR _web+460
	mov	DWORD PTR _fe$[ebp], eax
	test	eax, 134217728				; 08000000H
	je	SHORT $LN162@detorus_ha
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN161@detorus_ha
$LN162@detorus_ha:
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [ecx+32]
$LN161@detorus_ha:
	mov	DWORD PTR _fe$[ebp+4], eax

; 1448 :       fe[2] = get_next_edge(fe[1]);

	test	eax, 134217728				; 08000000H
	je	SHORT $LN166@detorus_ha
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN165@detorus_ha
$LN166@detorus_ha:
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [ecx+32]
$LN165@detorus_ha:
	mov	DWORD PTR _fe$[ebp+8], eax
$LN23@detorus_ha:

; 1449 :     }
; 1450 :     for ( j = 0 ; j < FACET_EDGES ; j++ )

	mov	eax, DWORD PTR _fs$GSCopy$[ebp]
	mov	ecx, DWORD PTR _dt_elist
	xor	esi, esi
	add	eax, 4
	mov	DWORD PTR _j$[ebp], esi
	mov	DWORD PTR tv3352[ebp], eax
	npad	3
$LL288@detorus_ha:

; 1451 :     { int inx;
; 1452 : 	  facetedge_id ffe;
; 1453 : 
; 1454 :       inx = fs->e[j];

	mov	eax, DWORD PTR tv3352[ebp]
	mov	eax, DWORD PTR [eax]

; 1455 :       if ( inx < 0 )

	test	eax, eax

; 1456 :         e_id = inverse_id(dt_elist[-inx].e_id);

	lea	eax, DWORD PTR [eax+eax*2]
	jns	SHORT $LN19@detorus_ha
	add	eax, eax
	add	eax, eax
	mov	edi, ecx
	sub	edi, eax
	mov	ebx, DWORD PTR [edi]
	xor	ebx, 134217728				; 08000000H

; 1457 :       else

	jmp	SHORT $LN298@detorus_ha
$LN19@detorus_ha:

; 1458 :         e_id = dt_elist[inx].e_id;

	mov	ebx, DWORD PTR [ecx+eax*4]
$LN298@detorus_ha:

; 1459 :       if ( !old_facet_flag )

	cmp	DWORD PTR _old_facet_flag$[ebp], 0
	mov	DWORD PTR _e_id$[ebp], ebx
	jne	SHORT $LN17@detorus_ha

; 1460 :         fe[j] = new_facetedge(newf,e_id);

	mov	ecx, DWORD PTR _newf$[ebp]
	push	ebx
	push	ecx
	call	_new_facetedge
	add	esp, 8
	mov	DWORD PTR _fe$[ebp+esi*4], eax

; 1461 :       else

	jmp	SHORT $LN172@detorus_ha
$LN17@detorus_ha:

; 1462 :       { if ( equal_id(e_id,get_fe_edge(fe[j])) )

	mov	eax, DWORD PTR _fe$[ebp+esi*4]
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+esi*4]
	mov	edi, eax
	and	edi, 134217728				; 08000000H
	xor	edi, DWORD PTR [esi+20]
	cmp	ebx, edi
	je	$LN21@detorus_ha

; 1463 :           continue;  // everything fine
; 1464 :         else
; 1465 :         { 
; 1466 :           set_fe_edge(fe[j],e_id);

	mov	ecx, ebx
	test	eax, 134217728				; 08000000H
	je	SHORT $LN171@detorus_ha
	xor	ecx, 134217728				; 08000000H
$LN171@detorus_ha:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN172@detorus_ha:

; 1467 :         }
; 1468 :       }
; 1469 :  	  ffe = get_edge_fe(e_id);

	mov	eax, DWORD PTR _web+124
	mov	edx, ebx
	and	edx, 134217727				; 07ffffffH
	add	edx, edx
	add	edx, edx
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR tv2285[ebp], edx
	test	eax, eax
	jne	SHORT $LN175@detorus_ha
	xor	edi, edi
	jmp	SHORT $LN176@detorus_ha
$LN175@detorus_ha:
	mov	eax, DWORD PTR [eax+28]
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN174@detorus_ha
	xor	eax, 134217728				; 08000000H
$LN174@detorus_ha:
	mov	edi, eax
$LN176@detorus_ha:

; 1470 : 	  if ( valid_id(ffe) )

	test	edi, 268435456				; 10000000H
	je	$LN13@detorus_ha

; 1471 : 	  { /* insert in edge facet loop */
; 1472 : 	    set_next_facet(fe[j],get_next_facet(ffe));

	mov	esi, DWORD PTR _web+460
	mov	eax, edi
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR tv2301[ebp], eax
	mov	edx, edi
	je	SHORT $LN179@detorus_ha
	and	edx, 134217727				; 07ffffffH
	add	edx, edx
	add	edx, edx
	mov	ecx, DWORD PTR [edx+esi]
	mov	ecx, DWORD PTR [ecx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN178@detorus_ha
$LN179@detorus_ha:
	and	edx, 134217727				; 07ffffffH
	add	edx, edx
	add	edx, edx
	mov	eax, DWORD PTR [edx+esi]
	mov	ecx, DWORD PTR [eax+40]
$LN178@detorus_ha:
	mov	eax, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _fe$[ebp+eax*4]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN190@detorus_ha
	mov	ebx, eax
	test	eax, 134217728				; 08000000H
	je	SHORT $LN183@detorus_ha
	xor	ecx, 134217728				; 08000000H
	and	ebx, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+ebx*4]
	mov	DWORD PTR [esi+36], ecx
	jmp	SHORT $LN300@detorus_ha
$LN183@detorus_ha:
	and	ebx, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+ebx*4]
	mov	DWORD PTR [esi+40], ecx
$LN300@detorus_ha:
	mov	ebx, DWORD PTR _e_id$[ebp]
	mov	esi, DWORD PTR _web+460

; 1473 : 		set_prev_facet(fe[j],ffe);

	test	eax, 268435456				; 10000000H
	je	SHORT $LN190@detorus_ha
	mov	ecx, eax
	test	eax, 134217728				; 08000000H
	je	SHORT $LN188@detorus_ha
	xor	edi, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [ecx+40], edi
	jmp	SHORT $LN187@detorus_ha
$LN188@detorus_ha:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [ecx+36], edi
$LN187@detorus_ha:
	mov	ecx, DWORD PTR _global_timestamp
	mov	esi, DWORD PTR _web+460
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN190@detorus_ha:

; 1474 : 		set_prev_facet(get_next_facet(ffe),fe[j]);

	cmp	DWORD PTR tv2301[ebp], 0
	mov	ecx, DWORD PTR [edx+esi]
	je	SHORT $LN193@detorus_ha
	mov	ecx, DWORD PTR [ecx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN192@detorus_ha
$LN193@detorus_ha:
	mov	ecx, DWORD PTR [ecx+40]
$LN192@detorus_ha:
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN199@detorus_ha
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN197@detorus_ha
	mov	edi, eax
	xor	edi, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [ecx+40], edi
	jmp	SHORT $LN196@detorus_ha
$LN197@detorus_ha:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [ecx+36], eax
$LN196@detorus_ha:
	mov	ecx, DWORD PTR _global_timestamp
	mov	esi, DWORD PTR _web+460
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN199@detorus_ha:

; 1475 : 		set_next_facet(ffe,fe[j]);

	cmp	DWORD PTR tv2301[ebp], 0
	je	SHORT $LN202@detorus_ha
	mov	edx, DWORD PTR [edx+esi]
	mov	ecx, eax
	xor	ecx, 134217728				; 08000000H
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR tv2285[ebp]
	jmp	$LN281@detorus_ha
$LN202@detorus_ha:
	mov	ecx, DWORD PTR [edx+esi]

; 1476 : 	  }
; 1477 : 	  else

	mov	edx, DWORD PTR tv2285[ebp]
	mov	DWORD PTR [ecx+40], eax
	jmp	$LN281@detorus_ha
$LN13@detorus_ha:

; 1478 : 	  {
; 1479 : 	    set_next_facet(fe[j],fe[j]);

	mov	eax, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _fe$[ebp+eax*4]
	test	eax, 268435456				; 10000000H
	je	$LN281@detorus_ha
	mov	ecx, eax
	test	eax, 134217728				; 08000000H
	je	SHORT $LN207@detorus_ha
	mov	edi, DWORD PTR _web+460
	xor	ecx, 134217728				; 08000000H
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edi+esi*4]
	mov	DWORD PTR [esi+36], ecx
	jmp	SHORT $LN280@detorus_ha
$LN207@detorus_ha:
	mov	esi, DWORD PTR _web+460
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [ecx+40], eax
$LN280@detorus_ha:

; 1480 : 		set_prev_facet(fe[j],fe[j]);

	test	eax, 268435456				; 10000000H
	je	SHORT $LN281@detorus_ha
	mov	ecx, eax
	test	eax, 134217728				; 08000000H
	je	SHORT $LN212@detorus_ha
	mov	edi, DWORD PTR _web+460
	xor	ecx, 134217728				; 08000000H
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edi+esi*4]
	mov	DWORD PTR [esi+40], ecx
	jmp	SHORT $LN211@detorus_ha
$LN212@detorus_ha:
	mov	esi, DWORD PTR _web+460
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [ecx+36], eax
$LN211@detorus_ha:
	mov	ecx, DWORD PTR _global_timestamp
	inc	ecx
	mov	DWORD PTR _global_timestamp, ecx
	mov	DWORD PTR _top_timestamp, ecx
$LN281@detorus_ha:

; 1481 : 	  }
; 1482 : 	  set_edge_fe(e_id,fe[j]);

	test	ebx, 134217728				; 08000000H
	je	SHORT $LN216@detorus_ha
	xor	eax, 134217728				; 08000000H
$LN216@detorus_ha:
	mov	ecx, DWORD PTR _web+124
	mov	edx, DWORD PTR [edx+ecx]
	mov	DWORD PTR [edx+28], eax
	mov	eax, DWORD PTR _global_timestamp
	mov	ecx, DWORD PTR _dt_elist
	mov	edx, DWORD PTR _web+460
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN21@detorus_ha:

; 1449 :     }
; 1450 :     for ( j = 0 ; j < FACET_EDGES ; j++ )

	mov	esi, DWORD PTR _j$[ebp]
	add	DWORD PTR tv3352[ebp], 4
	inc	esi
	mov	DWORD PTR _j$[ebp], esi
	cmp	esi, 3
	jl	$LL288@detorus_ha

; 1483 :     }
; 1484 :     if ( !old_facet_flag )

	cmp	DWORD PTR _old_facet_flag$[ebp], 0
	jne	$LN286@detorus_ha

; 1485 :     {
; 1486 : 	  set_facet_fe(newf,fe[0]);

	mov	esi, DWORD PTR _fe$[ebp]
	mov	eax, DWORD PTR _newf$[ebp]
	push	esi
	push	eax
	call	_set_facet_fe

; 1487 :       for ( j = 0 ; j < FACET_EDGES ; j++ )
; 1488 :       { set_next_edge(fe[j],fe[(j<2)?(j+1):0]);

	mov	ecx, DWORD PTR _fe$[ebp+4]
	mov	eax, esi
	shr	eax, 28					; 0000001cH
	add	esp, 8
	and	eax, 1
	je	SHORT $LN285@detorus_ha
	test	esi, 134217728				; 08000000H
	je	SHORT $LN220@detorus_ha
	mov	ebx, DWORD PTR _web+460
	mov	edx, ecx
	xor	edx, 134217728				; 08000000H
	mov	edi, esi
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR [edi+28], edx
	jmp	SHORT $LN285@detorus_ha
$LN220@detorus_ha:
	mov	edi, DWORD PTR _web+460
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+edx*4]
	mov	DWORD PTR [edx+32], ecx
$LN285@detorus_ha:

; 1489 :         set_prev_edge(fe[j],fe[j?(j-1):2]);

	test	eax, eax
	mov	eax, DWORD PTR _fe$[ebp+8]
	je	SHORT $LN9@detorus_ha
	test	esi, 134217728				; 08000000H
	je	SHORT $LN225@detorus_ha
	mov	ebx, DWORD PTR _web+460
	mov	edx, eax
	xor	edx, 134217728				; 08000000H
	mov	edi, esi
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR [edi+32], edx
	jmp	SHORT $LN224@detorus_ha
$LN225@detorus_ha:
	mov	edi, DWORD PTR _web+460
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+edx*4]
	mov	DWORD PTR [edx+28], eax
$LN224@detorus_ha:
	mov	edx, DWORD PTR _global_timestamp
	inc	edx
	mov	DWORD PTR _global_timestamp, edx
	mov	DWORD PTR _top_timestamp, edx
$LN9@detorus_ha:

; 1487 :       for ( j = 0 ; j < FACET_EDGES ; j++ )
; 1488 :       { set_next_edge(fe[j],fe[(j<2)?(j+1):0]);

	mov	edx, ecx
	shr	edx, 28					; 0000001cH
	and	edx, 1
	mov	DWORD PTR tv2975[ebp], edx
	je	SHORT $LN260@detorus_ha
	mov	ebx, DWORD PTR _web+460
	mov	edi, ecx
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN259@detorus_ha
	mov	edx, eax
	xor	edx, 134217728				; 08000000H
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR [edi+28], edx
	mov	edx, DWORD PTR tv2975[ebp]
	jmp	SHORT $LN260@detorus_ha
$LN259@detorus_ha:
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR [edi+32], eax
$LN260@detorus_ha:

; 1489 :         set_prev_edge(fe[j],fe[j?(j-1):2]);

	test	edx, edx
	je	SHORT $LN292@detorus_ha
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN263@detorus_ha
	mov	ebx, DWORD PTR _web+460
	mov	edx, esi
	xor	edx, 134217728				; 08000000H
	mov	edi, ecx
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR [edi+32], edx
	jmp	SHORT $LN264@detorus_ha
$LN263@detorus_ha:
	mov	edi, DWORD PTR _web+460
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+edx*4]
	mov	DWORD PTR [edx+28], esi
$LN264@detorus_ha:
	mov	edx, DWORD PTR _global_timestamp
	inc	edx
	mov	DWORD PTR _global_timestamp, edx
	mov	DWORD PTR _top_timestamp, edx
$LN292@detorus_ha:

; 1487 :       for ( j = 0 ; j < FACET_EDGES ; j++ )
; 1488 :       { set_next_edge(fe[j],fe[(j<2)?(j+1):0]);

	mov	edx, eax
	shr	edx, 28					; 0000001cH
	and	edx, 1
	je	SHORT $LN270@detorus_ha
	mov	ebx, DWORD PTR _web+460
	mov	edi, eax
	test	eax, 134217728				; 08000000H
	je	SHORT $LN269@detorus_ha
	xor	esi, 134217728				; 08000000H
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR [edi+28], esi
	jmp	SHORT $LN270@detorus_ha
$LN269@detorus_ha:
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR [edi+32], esi
$LN270@detorus_ha:

; 1489 :         set_prev_edge(fe[j],fe[j?(j-1):2]);

	test	edx, edx
	je	SHORT $LN286@detorus_ha
	mov	edx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN273@detorus_ha
	xor	ecx, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [eax+32], ecx
	jmp	SHORT $LN274@detorus_ha
$LN273@detorus_ha:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [eax+28], ecx
$LN274@detorus_ha:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN286@detorus_ha:

; 1490 :       }
; 1491 :     }
; 1492 : 
; 1493 :     if ( web.modeltype == LAGRANGE )

	cmp	DWORD PTR _web+628, 3
	jne	$LN4@detorus_ha

; 1494 :     { // set up facet vertex list
; 1495 :       vertex_id *v = get_facet_vertices(newf);

	mov	ecx, DWORD PTR _newf$[ebp]
	mov	edx, DWORD PTR _web+236
	mov	eax, DWORD PTR _web+328
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]

; 1496 :       for ( j = 0 ; j < web.skel[FACET].ctrlpts ; j++ )

	xor	ecx, ecx
	cmp	DWORD PTR _web+232, ecx
	jle	$LN4@detorus_ha
	mov	esi, 2097152				; 00200000H
	npad	1
$LL293@detorus_ha:

; 1497 :       { if ( !equal_id(v[j],dt_vlist[fs->fv[j]].v_id) )

	mov	eax, DWORD PTR _fs$GSCopy$[ebp]
	mov	eax, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	edi, DWORD PTR _dt_vlist
	lea	eax, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR [edi+eax*8]
	cmp	DWORD PTR [edx+ecx*4], eax
	je	SHORT $LN5@detorus_ha

; 1498 :         {
; 1499 :           v[j] = dt_vlist[fs->fv[j]].v_id;

	mov	DWORD PTR [edx+ecx*4], eax

; 1500 :           if ( !valid_id(get_vertex_edge(v[j])) )

	mov	ebx, DWORD PTR _web+12
	mov	edi, eax
	and	edi, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ebx+edi*4]
	test	DWORD PTR [edi+28], 268435456		; 10000000H
	jne	SHORT $LN5@detorus_ha

; 1501 :           { set_attr(v[j],Q_MIDFACET);

	mov	edi, eax
	shr	edi, 29					; 0000001dH
	imul	edi, 112				; 00000070H
	mov	edi, DWORD PTR _web[edi+12]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	edi, DWORD PTR [eax+12]
	or	DWORD PTR [eax+8], esi
	mov	DWORD PTR [eax+12], edi

; 1502 :             set_vertex_facet(v[j],newf); 

	mov	eax, DWORD PTR [edx+ecx*4]
	mov	edi, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	edi, DWORD PTR _newf$[ebp]
	mov	DWORD PTR [eax+32], edi
$LN5@detorus_ha:

; 1496 :       for ( j = 0 ; j < web.skel[FACET].ctrlpts ; j++ )

	inc	ecx
	cmp	ecx, DWORD PTR _web+232
	jl	SHORT $LL293@detorus_ha
$LN4@detorus_ha:

; 1503 :           }
; 1504 :         }
; 1505 :       }
; 1506 :     }
; 1507 : 
; 1508 :     if ( fs->flags & COLORS_SWAPPED )

	mov	ecx, DWORD PTR _fs$GSCopy$[ebp]
	test	DWORD PTR [ecx+20], 32768		; 00008000H
	je	SHORT $LN1@detorus_ha

; 1509 :       reverse_orientation_facet(newf);

	mov	edx, DWORD PTR _newf$[ebp]
	push	edx
	call	_reverse_orientation_facet
	add	esp, 4
$LN1@detorus_ha:

; 1510 : 
; 1511 : }  // end detorus_handle_facet()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_detorus_handle_facet ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@PABBNCGC@detorus?3?5still?5body?5errors?5after@ ; `string'
PUBLIC	_detorus_string_cleanup
EXTRN	_dissolve_body:PROC
EXTRN	_torus_display_mode:DWORD
EXTRN	_recalc:PROC
EXTRN	_kb_error:PROC
EXTRN	_make_vfacet_lists:PROC
EXTRN	_facet_body_check:PROC
EXTRN	_suppress_erroutstring:DWORD
EXTRN	_merge_bodies:PROC
EXTRN	_string_rebody:PROC
EXTRN	_transform_gen_expr:PROC
EXTRN	_view_transform_gens:DWORD
EXTRN	_torus_display_period_expr:BYTE
EXTRN	_identity_compose:PROC
EXTRN	_sym_compose:DWORD
EXTRN	_identity_inverse:PROC
EXTRN	_identity_form_pullback:PROC
EXTRN	_sym_form_pullback:DWORD
EXTRN	_identity_wrap:PROC
EXTRN	_sym_wrap:DWORD
EXTRN	_symmetry_name:DWORD
EXTRN	_sym_flags:DWORD
EXTRN	_torus_period_expr:BYTE
EXTRN	_transform_gen_count:DWORD
EXTRN	_dissolve_vertex:PROC
EXTRN	_dissolve_edge:PROC
EXTRN	_set_fe_facet:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_0CO@PABBNCGC@detorus?3?5still?5body?5errors?5after@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0CO@PABBNCGC@detorus?3?5still?5body?5errors?5after@ DB 'detorus: st'
	DB	'ill body errors after 5 rebodies.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\tordup.c
CONST	ENDS
;	COMDAT _detorus_string_cleanup
_TEXT	SEGMENT
tv533 = -8						; size = 8
tv490 = -8						; size = 8
_start_fe$90109 = -4					; size = 4
_detorus_string_cleanup PROC				; COMDAT

; 1521 : { int i;

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx

; 1522 :   edge_id e_id;
; 1523 :   vertex_id v_id;
; 1524 :   body_id b_id;
; 1525 :   
; 1526 :  /* get rid of all old stuff not used */
; 1527 : 
; 1528 :   MFOR_ALL_EDGES(e_id)

	mov	ebx, DWORD PTR _web+160
	push	esi
	push	edi
	test	ebx, 268435456				; 10000000H
	je	$LN32@detorus_st@2
	npad	5
$LL34@detorus_st@2:
	mov	eax, DWORD PTR _web+124
	mov	edi, ebx
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	edx, DWORD PTR [edi+eax]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR tv490[ebp+4], eax
	mov	eax, ecx
	and	eax, 1
	xor	esi, esi
	or	eax, esi
	je	$LN33@detorus_st@2

; 1529 : 	if ( !(get_eattr(e_id) & NEWELEMENT) )

	and	ecx, 4
	xor	eax, eax
	or	ecx, eax
	jne	SHORT $LN33@detorus_st@2

; 1530 :     { if ( web.representation == STRING )

	cmp	DWORD PTR _web+624, 1
	jne	SHORT $LN33@detorus_st@2

; 1531 :       { // cut fe facet links first so dissolve doesn't mess up facet fe
; 1532 :         facetedge_id fe,start_fe;
; 1533 :         fe = start_fe = get_edge_fe(e_id);

	cmp	edx, eax
	jne	SHORT $LN38@detorus_st@2
	mov	DWORD PTR _start_fe$90109[ebp], eax
	jmp	SHORT $LN39@detorus_st@2
$LN38@detorus_st@2:
	mov	edx, DWORD PTR [edx+28]
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN37@detorus_st@2
	xor	edx, 134217728				; 08000000H
$LN37@detorus_st@2:
	mov	DWORD PTR _start_fe$90109[ebp], edx
$LN39@detorus_st@2:
	mov	esi, DWORD PTR _start_fe$90109[ebp]
	npad	2
$LL27@detorus_st@2:

; 1534 :         do
; 1535 :         { set_fe_facet(fe,NULLID);

	push	0
	push	esi
	call	_set_fe_facet
	add	esp, 8

; 1536 :           fe = get_next_facet(fe);

	test	esi, 134217728				; 08000000H
	je	SHORT $LN42@detorus_st@2
	mov	ecx, DWORD PTR _web+460
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	esi, DWORD PTR [edx+36]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN26@detorus_st@2
$LN42@detorus_st@2:
	mov	eax, DWORD PTR _web+460
	and	esi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+esi*4]
	mov	esi, DWORD PTR [ecx+40]
$LN26@detorus_st@2:

; 1537 :         } while ( !equal_id(fe,start_fe) );

	cmp	esi, DWORD PTR _start_fe$90109[ebp]
	jne	SHORT $LL27@detorus_st@2

; 1538 : 		dissolve_edge(e_id);

	push	ebx
	call	_dissolve_edge
	add	esp, 4
$LN33@detorus_st@2:

; 1522 :   edge_id e_id;
; 1523 :   vertex_id v_id;
; 1524 :   body_id b_id;
; 1525 :   
; 1526 :  /* get rid of all old stuff not used */
; 1527 : 
; 1528 :   MFOR_ALL_EDGES(e_id)

	mov	edx, DWORD PTR _web+124
	mov	eax, DWORD PTR [edi+edx]
	mov	ebx, DWORD PTR [eax]
	test	ebx, 268435456				; 10000000H
	jne	$LL34@detorus_st@2
$LN32@detorus_st@2:

; 1539 :       }
; 1540 :     }
; 1541 :   MFOR_ALL_VERTICES(v_id)

	mov	edi, DWORD PTR _web+48
	test	edi, 268435456				; 10000000H
	je	SHORT $LN69@detorus_st@2
	mov	ebx, DWORD PTR _web+12
	npad	9
$LL24@detorus_st@2:
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+ebx]
	mov	edx, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, ecx
	mov	DWORD PTR tv533[ebp+4], edx
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN23@detorus_st@2

; 1542 : 	if ( !(get_vattr(v_id) & NEWELEMENT) )

	and	ecx, 4
	xor	eax, eax
	or	ecx, eax
	jne	SHORT $LN23@detorus_st@2

; 1543 : 		  dissolve_vertex(v_id);

	push	edi
	call	_dissolve_vertex
	mov	ebx, DWORD PTR _web+12
	add	esp, 4
$LN23@detorus_st@2:

; 1539 :       }
; 1540 :     }
; 1541 :   MFOR_ALL_VERTICES(v_id)

	mov	eax, DWORD PTR [esi+ebx]
	mov	edi, DWORD PTR [eax]
	test	edi, 268435456				; 10000000H
	jne	SHORT $LL24@detorus_st@2
$LN69@detorus_st@2:

; 1544 :   
; 1545 :  
; 1546 :   // Unset torus model
; 1547 :   if ( web.symmetry_flag )

	xor	edi, edi
	cmp	DWORD PTR _web+856, edi
	je	SHORT $LN18@detorus_st@2

; 1548 :   {
; 1549 :     web.torus_flag = 0;
; 1550 :     web.full_flag = 0;
; 1551 :     web.symmetry_flag = 0;
; 1552 :     sym_flags = 0;
; 1553 :     symmetry_name = NULL;
; 1554 :     sym_wrap = identity_wrap;
; 1555 :     sym_form_pullback = identity_form_pullback;
; 1556 :     sym_inverse = identity_inverse;
; 1557 :     sym_compose = identity_compose;
; 1558 :     transform_gen_count -= 3;

	sub	DWORD PTR _transform_gen_count, 3

; 1559 :     memset(torus_period_expr,0,sizeof(torus_period_expr));

	push	3744					; 00000ea0H
	push	edi
	push	OFFSET _torus_period_expr
	mov	DWORD PTR _web+860, edi
	mov	DWORD PTR _web+864, edi
	mov	DWORD PTR _web+856, edi
	mov	DWORD PTR _sym_flags, edi
	mov	DWORD PTR _symmetry_name, edi
	mov	DWORD PTR _sym_wrap, OFFSET _identity_wrap
	mov	DWORD PTR _sym_form_pullback, OFFSET _identity_form_pullback
	mov	DWORD PTR _sym_inverse, OFFSET _identity_inverse
	mov	DWORD PTR _sym_compose, OFFSET _identity_compose
	call	_memset

; 1560 :     memset(torus_display_period_expr,0,sizeof(torus_display_period_expr));

	push	3744					; 00000ea0H
	push	edi
	push	OFFSET _torus_display_period_expr
	call	_memset
	add	esp, 24					; 00000018H

; 1561 :     view_transform_gens = NULL;

	mov	DWORD PTR _view_transform_gens, edi
$LN18@detorus_st@2:

; 1562 :   }
; 1563 :   transform_gen_expr("");

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	call	_transform_gen_expr

; 1564 : 
; 1565 : 
; 1566 :   FOR_ALL_BODIES(b_id)

	fldz
	mov	eax, DWORD PTR _web+384
	mov	ecx, eax
	shr	ecx, 28					; 0000001cH
	add	esp, 4
	and	ecx, 1
	je	SHORT $LN81@detorus_st@2
$LN17@detorus_st@2:
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	lea	edx, DWORD PTR [eax+eax]
	mov	eax, DWORD PTR _web+348
	mov	esi, DWORD PTR [edx+eax]
	mov	eax, DWORD PTR [esi+8]
	and	eax, 1
	or	eax, edi
	je	SHORT $LN16@detorus_st@2

; 1567 :     set_body_volconst(b_id,0.0);

	cmp	ecx, edi
	je	SHORT $LN16@detorus_st@2
	fst	QWORD PTR [esi+328]
	cmp	DWORD PTR _everything_quantities_flag, edi
	je	SHORT $LN16@detorus_st@2
	mov	ecx, DWORD PTR _web+348
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR [eax+404]
	mov	eax, DWORD PTR _gen_quant_list
	imul	ecx, 368				; 00000170H
	fst	QWORD PTR [ecx+eax+208]
$LN16@detorus_st@2:

; 1564 : 
; 1565 : 
; 1566 :   FOR_ALL_BODIES(b_id)

	mov	ecx, DWORD PTR _web+348
	mov	edx, DWORD PTR [edx+ecx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, eax
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	jne	SHORT $LN17@detorus_st@2
$LN81@detorus_st@2:

; 1567 :     set_body_volconst(b_id,0.0);

	fstp	ST(0)

; 1568 :   for ( i = 0 ; i < 5 ; i++ )

	xor	esi, esi
	npad	2
$LL12@detorus_st@2:

; 1569 :   { string_rebody();   // seems to be needed again in some cases

	call	_string_rebody

; 1570 :     merge_bodies();

	call	_merge_bodies

; 1571 :     suppress_erroutstring = 1;

	mov	DWORD PTR _suppress_erroutstring, 1

; 1572 :     if ( facet_body_check() == 0 )

	call	_facet_body_check
	test	eax, eax
	je	SHORT $LN59@detorus_st@2

; 1573 :        break;
; 1574 :     suppress_erroutstring = 0;

	inc	esi
	mov	DWORD PTR _suppress_erroutstring, edi
	cmp	esi, 5
	jl	SHORT $LL12@detorus_st@2
$LN59@detorus_st@2:

; 1575 :   } 
; 1576 : 
; 1577 :   // fix up facet lists around vertices
; 1578 :   make_vfacet_lists();

	call	_make_vfacet_lists

; 1579 :   
; 1580 :   suppress_erroutstring = 0;

	mov	DWORD PTR _suppress_erroutstring, edi

; 1581 :   if ( i == 5 )

	cmp	esi, 5
	jne	SHORT $LN8@detorus_st@2

; 1582 :     kb_error(1936,"detorus: still body errors after 5 rebodies.\n",WARNING);

	push	2
	push	OFFSET ??_C@_0CO@PABBNCGC@detorus?3?5still?5body?5errors?5after@
	push	1936					; 00000790H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN8@detorus_st@2:

; 1583 :   recalc();

	call	_recalc

; 1584 :   
; 1585 :   
; 1586 :   if ( torus_display_mode == TORUS_CONNECTED_MODE )

	cmp	DWORD PTR _torus_display_mode, 2
	jne	SHORT $LN4@detorus_st@2

; 1587 :   { // Get rid of outer body, as identified by negative volume
; 1588 :     FOR_ALL_BODIES(b_id)

	mov	edx, DWORD PTR _web+384
	mov	ecx, edx
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	je	SHORT $LN4@detorus_st@2
	npad	5
$LL66@detorus_st@2:
	mov	eax, DWORD PTR _web+348
	mov	esi, edx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	edi, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [edi+8]
	and	eax, 1
	xor	ebx, ebx
	or	eax, ebx
	je	SHORT $LN5@detorus_st@2

; 1589 :     { if ( get_body_volume(b_id) < 0 )

	test	ecx, ecx
	je	SHORT $LN5@detorus_st@2
	fld	QWORD PTR [edi+40]
	fldz
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN5@detorus_st@2

; 1590 :         dissolve_body(b_id);

	push	edx
	call	_dissolve_body
	add	esp, 4
$LN5@detorus_st@2:

; 1587 :   { // Get rid of outer body, as identified by negative volume
; 1588 :     FOR_ALL_BODIES(b_id)

	mov	ecx, DWORD PTR _web+348
	mov	edx, DWORD PTR [esi+ecx]
	mov	edx, DWORD PTR [edx]
	mov	ecx, edx
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	jne	SHORT $LL66@detorus_st@2
$LN4@detorus_st@2:
	pop	edi
	pop	esi
	pop	ebx

; 1591 :     }
; 1592 :   }
; 1593 :   
; 1594 : 
; 1595 : } // end detorus_string_cleanup()

	mov	esp, ebp
	pop	ebp
	ret	0
_detorus_string_cleanup ENDP
_TEXT	ENDS
PUBLIC	_detorus_soapfilm_cleanup
EXTRN	_rebody:PROC
EXTRN	_raw_fe_reorder:PROC
EXTRN	_transforms_flag:DWORD
EXTRN	_merge_facet:PROC
EXTRN	_dissolve_facet:PROC
EXTRN	_set_facet_body:PROC
; Function compile flags: /Ogtp
;	COMDAT _detorus_soapfilm_cleanup
_TEXT	SEGMENT
tv879 = -36						; size = 8
tv861 = -36						; size = 8
tv842 = -36						; size = 8
tv855 = -32						; size = 4
_e_id$91645 = -28					; size = 4
tv906 = -24						; size = 4
_start_fe$90206 = -20					; size = 4
tv903 = -16						; size = 4
tv900 = -12						; size = 4
tv930 = -8						; size = 4
_fe$90207 = -4						; size = 4
_detorus_soapfilm_cleanup PROC				; COMDAT

; 1605 : { int i;

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
	push	edi

; 1606 :   edge_id e_id;
; 1607 :   vertex_id v_id;
; 1608 :   facet_id f_id;
; 1609 :   body_id b_id;
; 1610 :   
; 1611 :  /* get rid of all old stuff not used */
; 1612 :   MFOR_ALL_FACETS(f_id)

	mov	edi, DWORD PTR _web+272
	test	edi, 268435456				; 10000000H
	je	SHORT $LN55@detorus_so
	mov	ebx, DWORD PTR _web+236
	npad	3
$LL57@detorus_so:
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+ebx]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR tv842[ebp+4], eax
	mov	eax, ecx
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN56@detorus_so

; 1613 : 	  if ( !(get_fattr(f_id) & NEWELEMENT) )

	and	ecx, 4
	xor	eax, eax
	or	ecx, eax
	jne	SHORT $LN56@detorus_so

; 1614 :       { set_facet_body(f_id,NULLID);

	push	ecx
	push	edi
	call	_set_facet_body

; 1615 :         set_facet_body(inverse_id(f_id),NULLID);

	mov	ecx, edi
	xor	ecx, 134217728				; 08000000H
	push	0
	push	ecx
	call	_set_facet_body

; 1616 : 	    dissolve_facet(f_id);

	push	edi
	call	_dissolve_facet
	mov	ebx, DWORD PTR _web+236
	add	esp, 20					; 00000014H
$LN56@detorus_so:

; 1606 :   edge_id e_id;
; 1607 :   vertex_id v_id;
; 1608 :   facet_id f_id;
; 1609 :   body_id b_id;
; 1610 :   
; 1611 :  /* get rid of all old stuff not used */
; 1612 :   MFOR_ALL_FACETS(f_id)

	mov	edx, DWORD PTR [esi+ebx]
	mov	edi, DWORD PTR [edx]
	test	edi, 268435456				; 10000000H
	jne	SHORT $LL57@detorus_so
$LN55@detorus_so:

; 1617 :       }
; 1618 :   MFOR_ALL_EDGES(e_id)

	mov	edx, DWORD PTR _web+160
	mov	ebx, DWORD PTR _web+124
	test	edx, 268435456				; 10000000H
	je	SHORT $LN49@detorus_so
$LL51@detorus_so:
	mov	esi, edx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+ebx]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR tv861[ebp+4], eax
	mov	eax, ecx
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	je	SHORT $LN50@detorus_so

; 1619 : 	  if ( !(get_eattr(e_id) & NEWELEMENT) )

	and	ecx, 4
	xor	eax, eax
	or	ecx, eax
	jne	SHORT $LN50@detorus_so

; 1620 : 		  dissolve_edge(e_id);

	push	edx
	call	_dissolve_edge
	mov	ebx, DWORD PTR _web+124
	add	esp, 4
$LN50@detorus_so:

; 1617 :       }
; 1618 :   MFOR_ALL_EDGES(e_id)

	mov	ecx, DWORD PTR [esi+ebx]
	mov	edx, DWORD PTR [ecx]
	test	edx, 268435456				; 10000000H
	jne	SHORT $LL51@detorus_so
$LN49@detorus_so:

; 1621 :   MFOR_ALL_VERTICES(v_id)

	mov	edi, DWORD PTR _web+48
	test	edi, 268435456				; 10000000H
	je	SHORT $LN124@detorus_so
	mov	ebx, DWORD PTR _web+12
	npad	1
$LL45@detorus_so:
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+ebx]
	mov	edx, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, ecx
	mov	DWORD PTR tv879[ebp+4], edx
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN44@detorus_so

; 1622 : 	  if ( !(get_vattr(v_id) & NEWELEMENT) )

	and	ecx, 4
	xor	eax, eax
	or	ecx, eax
	jne	SHORT $LN44@detorus_so

; 1623 : 		  dissolve_vertex(v_id);

	push	edi
	call	_dissolve_vertex
	mov	ebx, DWORD PTR _web+12
	add	esp, 4
$LN44@detorus_so:

; 1621 :   MFOR_ALL_VERTICES(v_id)

	mov	eax, DWORD PTR [esi+ebx]
	mov	edi, DWORD PTR [eax]
	test	edi, 268435456				; 10000000H
	jne	SHORT $LL45@detorus_so
	mov	ebx, DWORD PTR _web+124
$LN124@detorus_so:

; 1624 : 
; 1625 :   /* merge facets with common edges */
; 1626 :   if ( detorus_sticky )

	cmp	DWORD PTR _detorus_sticky, 0
	je	$LN36@detorus_so

; 1627 :   { MFOR_ALL_EDGES(e_id)

	mov	edx, DWORD PTR _web+160
	test	edx, 268435456				; 10000000H
	je	$LN36@detorus_so
	mov	edi, DWORD PTR _web+460
$LL38@detorus_so:
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	ecx, DWORD PTR [eax+ebx]
	mov	DWORD PTR tv855[ebp], eax
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 1
	xor	esi, esi
	or	eax, esi
	je	$LN37@detorus_so

; 1628 :     { facetedge_id start_fe,fe,ffe;
; 1629 :       start_fe = fe = get_edge_fe(e_id);

	test	ecx, ecx
	je	SHORT $LN60@detorus_so
$LN61@detorus_so:
	mov	ecx, DWORD PTR [ecx+28]
	test	edx, 134217728				; 08000000H
	je	SHORT $LN60@detorus_so
	xor	ecx, 134217728				; 08000000H
$LN60@detorus_so:
	mov	DWORD PTR _fe$90207[ebp], ecx
	mov	DWORD PTR _start_fe$90206[ebp], ecx

; 1630 :       if ( !valid_id(start_fe) ) continue;

	test	ecx, 268435456				; 10000000H
	je	$LN37@detorus_so
	npad	5
$LL32@detorus_so:

; 1631 :       do
; 1632 :       { ffe = get_next_facet(fe);

	mov	ebx, ecx
	shr	ebx, 27					; 0000001bH
	and	ebx, 1
	mov	DWORD PTR tv900[ebp], ebx
	mov	eax, ecx
	je	SHORT $LN65@detorus_so
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	edx, DWORD PTR [eax+edi]
	mov	esi, DWORD PTR [edx+36]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN143@detorus_so
$LN65@detorus_so:
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	edx, DWORD PTR [eax+edi]
	mov	esi, DWORD PTR [edx+40]
$LN143@detorus_so:
	mov	DWORD PTR tv906[ebp], edx
	mov	DWORD PTR tv903[ebp], eax

; 1633 :         while ( !equal_id(ffe,start_fe) )

	cmp	esi, DWORD PTR _start_fe$90206[ebp]
	je	$LN128@detorus_so
	jmp	SHORT $LN29@detorus_so
$LL123@detorus_so:
	mov	ecx, DWORD PTR _fe$90207[ebp]
$LN29@detorus_so:

; 1634 :         { if ( equal_id(get_fe_edge(get_next_edge(fe)),get_fe_edge(get_next_edge(ffe))) )

	push	ecx
	call	_get_next_edge
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+ecx*4]
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR _e_id$91645[ebp], ecx
	mov	ecx, esi
	mov	edx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	shr	edx, 27					; 0000001bH
	add	esp, 4
	and	edx, 1
	mov	DWORD PTR tv930[ebp], ecx
	je	SHORT $LN71@detorus_so
	mov	ecx, DWORD PTR [ecx+28]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN70@detorus_so
$LN71@detorus_so:
	mov	ecx, DWORD PTR [ecx+32]
$LN70@detorus_so:
	mov	ebx, ecx
	and	ebx, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [edi+ebx*4]
	and	ecx, 134217728				; 08000000H
	xor	ecx, DWORD PTR [ebx+20]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR _e_id$91645[ebp]
	cmp	eax, ecx
	je	SHORT $LN110@detorus_so

; 1636 :             break;
; 1637 :           }
; 1638 :           ffe = get_next_facet(ffe);

	test	edx, edx
	je	SHORT $LN85@detorus_so
	mov	edx, DWORD PTR tv930[ebp]
	mov	esi, DWORD PTR [edx+36]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN84@detorus_so
$LN85@detorus_so:
	mov	eax, DWORD PTR tv930[ebp]
	mov	esi, DWORD PTR [eax+40]
$LN84@detorus_so:

; 1633 :         while ( !equal_id(ffe,start_fe) )

	cmp	esi, DWORD PTR _start_fe$90206[ebp]
	jne	SHORT $LL123@detorus_so

; 1685 :     if ( rebnum == 0 && mergenum == 0 )

	mov	ebx, DWORD PTR tv900[ebp]
	jmp	SHORT $LN144@detorus_so
$LN110@detorus_so:

; 1635 :           { merge_facet(get_fe_facet(fe),get_fe_facet(ffe));

	mov	ecx, DWORD PTR _NULLFACET
	test	esi, 268435456				; 10000000H
	jne	SHORT $LN77@detorus_so
	mov	eax, ecx
	jmp	SHORT $LN76@detorus_so
$LN77@detorus_so:
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+edx*4]
	mov	eax, DWORD PTR [eax+24]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN76@detorus_so
	xor	eax, 134217728				; 08000000H
$LN76@detorus_so:
	test	DWORD PTR _fe$90207[ebp], 268435456	; 10000000H
	mov	ebx, DWORD PTR tv900[ebp]
	je	SHORT $LN80@detorus_so
	mov	ecx, DWORD PTR tv906[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	test	ebx, ebx
	je	SHORT $LN80@detorus_so
	xor	ecx, 134217728				; 08000000H
$LN80@detorus_so:
	push	eax
	push	ecx
	call	_merge_facet
	mov	edi, DWORD PTR _web+460
	add	esp, 8
$LN144@detorus_so:
	mov	eax, DWORD PTR tv903[ebp]
$LN128@detorus_so:

; 1639 :         } 
; 1640 :         fe = get_next_facet(fe);

	test	ebx, ebx
	je	SHORT $LN89@detorus_so
	mov	edx, DWORD PTR [eax+edi]
	mov	ecx, DWORD PTR [edx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN145@detorus_so
$LN89@detorus_so:
	mov	eax, DWORD PTR [eax+edi]
	mov	ecx, DWORD PTR [eax+40]
$LN145@detorus_so:
	mov	DWORD PTR _fe$90207[ebp], ecx

; 1641 :       } while (!equal_id(fe,start_fe));

	cmp	ecx, DWORD PTR _start_fe$90206[ebp]
	jne	$LL32@detorus_so
	mov	ebx, DWORD PTR _web+124
$LN37@detorus_so:

; 1627 :   { MFOR_ALL_EDGES(e_id)

	mov	ecx, DWORD PTR tv855[ebp]
	mov	edx, DWORD PTR [ecx+ebx]
	mov	edx, DWORD PTR [edx]
	test	edx, 268435456				; 10000000H
	jne	$LL38@detorus_so
$LN36@detorus_so:

; 1642 :     }
; 1643 :   }
; 1644 : 
; 1645 :    
; 1646 :   // Unset torus model
; 1647 :   if ( web.symmetry_flag )

	xor	esi, esi
	cmp	DWORD PTR _web+856, esi
	je	SHORT $LN121@detorus_so

; 1648 :   {
; 1649 :     web.torus_flag = 0;
; 1650 :     web.full_flag = 0;
; 1651 :     web.symmetry_flag = 0;
; 1652 :     sym_flags = 0;
; 1653 :     symmetry_name = NULL;
; 1654 :     sym_wrap = identity_wrap;
; 1655 :     sym_form_pullback = identity_form_pullback;
; 1656 :     sym_inverse = identity_inverse;
; 1657 :     sym_compose = identity_compose;
; 1658 :     transform_gen_count -= 3;

	sub	DWORD PTR _transform_gen_count, 3

; 1659 :     memset(torus_period_expr,0,sizeof(torus_period_expr));

	push	3744					; 00000ea0H
	push	esi
	push	OFFSET _torus_period_expr
	mov	DWORD PTR _web+860, esi
	mov	DWORD PTR _web+864, esi
	mov	DWORD PTR _web+856, esi
	mov	DWORD PTR _sym_flags, esi
	mov	DWORD PTR _symmetry_name, esi
	mov	DWORD PTR _sym_wrap, OFFSET _identity_wrap
	mov	DWORD PTR _sym_form_pullback, OFFSET _identity_form_pullback
	mov	DWORD PTR _sym_inverse, OFFSET _identity_inverse
	mov	DWORD PTR _sym_compose, OFFSET _identity_compose
	call	_memset

; 1660 :     memset(torus_display_period_expr,0,sizeof(torus_display_period_expr));

	push	3744					; 00000ea0H
	push	esi
	push	OFFSET _torus_display_period_expr
	call	_memset
	add	esp, 24					; 00000018H

; 1661 :      view_transform_gens = NULL;

	mov	DWORD PTR _view_transform_gens, esi
$LN121@detorus_so:

; 1662 :   }
; 1663 :   if ( transform_gen_count )

	cmp	DWORD PTR _transform_gen_count, esi
	je	SHORT $LN25@detorus_so

; 1664 :     transform_gen_expr("");

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	call	_transform_gen_expr

; 1665 :   else

	mov	ebx, DWORD PTR _web+124
	add	esp, 4
	jmp	SHORT $LN24@detorus_so
$LN25@detorus_so:

; 1666 :     transforms_flag = 0;

	mov	DWORD PTR _transforms_flag, esi
$LN24@detorus_so:

; 1667 : 
; 1668 :   /* straighten out facet order around edges */
; 1669 :   if ( web.representation == SOAPFILM )

	mov	edi, 2
	cmp	DWORD PTR _web+624, edi
	jne	SHORT $LN20@detorus_so

; 1670 :   { edge_id e_id;
; 1671 :     MFOR_ALL_EDGES(e_id)

	mov	ecx, DWORD PTR _web+160
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN20@detorus_so
$LL22@detorus_so:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+ebx]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN21@detorus_so

; 1672 :       raw_fe_reorder(e_id);

	push	ecx
	call	_raw_fe_reorder
	mov	ebx, DWORD PTR _web+124
	add	esp, 4
$LN21@detorus_so:

; 1670 :   { edge_id e_id;
; 1671 :     MFOR_ALL_EDGES(e_id)

	mov	eax, DWORD PTR [esi+ebx]
	mov	ecx, DWORD PTR [eax]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LL22@detorus_so
$LN20@detorus_so:

; 1673 :   }
; 1674 :   
; 1675 :   // fix up facet lists around vertices
; 1676 :   make_vfacet_lists();

	call	_make_vfacet_lists

; 1677 : 
; 1678 :   FOR_ALL_BODIES(b_id)

	fldz
	mov	eax, DWORD PTR _web+384
	mov	ecx, eax
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	je	SHORT $LN142@detorus_so
$LN17@detorus_so:
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	lea	edx, DWORD PTR [eax+eax]
	mov	eax, DWORD PTR _web+348
	mov	esi, DWORD PTR [edx+eax]
	mov	eax, DWORD PTR [esi+8]
	and	eax, 1
	xor	ebx, ebx
	or	eax, ebx
	je	SHORT $LN16@detorus_so

; 1679 :     set_body_volconst(b_id,0.0);

	test	ecx, ecx
	je	SHORT $LN16@detorus_so
	fst	QWORD PTR [esi+328]
	cmp	DWORD PTR _everything_quantities_flag, ebx
	je	SHORT $LN16@detorus_so
	mov	ecx, DWORD PTR _web+348
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR [eax+404]
	mov	eax, DWORD PTR _gen_quant_list
	imul	ecx, 368				; 00000170H
	fst	QWORD PTR [ecx+eax+208]
$LN16@detorus_so:

; 1677 : 
; 1678 :   FOR_ALL_BODIES(b_id)

	mov	ecx, DWORD PTR _web+348
	mov	edx, DWORD PTR [edx+ecx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, eax
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	jne	SHORT $LN17@detorus_so
$LN142@detorus_so:

; 1679 :     set_body_volconst(b_id,0.0);

	fstp	ST(0)

; 1680 : 
; 1681 : 
; 1682 :   for ( i = 0 ; i < 5 ; i++ )

	xor	ebx, ebx
	npad	6
$LL12@detorus_so:

; 1683 :   { int rebnum = rebody();   // seems to be needed again in some cases

	call	_rebody
	mov	esi, eax

; 1684 :     int mergenum = merge_bodies();

	call	_merge_bodies

; 1685 :     if ( rebnum == 0 && mergenum == 0 )

	test	esi, esi
	jne	SHORT $LN11@detorus_so
	test	eax, eax
	je	SHORT $LN131@detorus_so
$LN11@detorus_so:

; 1680 : 
; 1681 : 
; 1682 :   for ( i = 0 ; i < 5 ; i++ )

	inc	ebx
	cmp	ebx, 5
	jl	SHORT $LL12@detorus_so
$LN131@detorus_so:

; 1686 :       break;
; 1687 :   } 
; 1688 : 
; 1689 :   suppress_erroutstring = 0;

	mov	DWORD PTR _suppress_erroutstring, 0

; 1690 :   if ( i == 5 )

	cmp	ebx, 5
	jne	SHORT $LN8@detorus_so

; 1691 :     kb_error(5480,"detorus: still body errors after 5 rebodies.\n",WARNING);

	push	edi
	push	OFFSET ??_C@_0CO@PABBNCGC@detorus?3?5still?5body?5errors?5after@
	push	5480					; 00001568H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN8@detorus_so:

; 1692 :   recalc();

	call	_recalc

; 1693 : 
; 1694 :   if ( torus_display_mode == TORUS_CONNECTED_MODE )

	cmp	DWORD PTR _torus_display_mode, edi
	jne	SHORT $LN4@detorus_so

; 1695 :   { // Get rid of outer body, as identified by negative volume
; 1696 :     FOR_ALL_BODIES(b_id)

	mov	edx, DWORD PTR _web+384
	mov	ecx, edx
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	je	SHORT $LN4@detorus_so
	npad	7
$LL126@detorus_so:
	mov	eax, DWORD PTR _web+348
	mov	esi, edx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	edi, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [edi+8]
	and	eax, 1
	xor	ebx, ebx
	or	eax, ebx
	je	SHORT $LN5@detorus_so

; 1697 :     { if ( get_body_volume(b_id) < 0 )

	test	ecx, ecx
	je	SHORT $LN5@detorus_so
	fld	QWORD PTR [edi+40]
	fldz
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN5@detorus_so

; 1698 :         dissolve_body(b_id);

	push	edx
	call	_dissolve_body
	add	esp, 4
$LN5@detorus_so:

; 1695 :   { // Get rid of outer body, as identified by negative volume
; 1696 :     FOR_ALL_BODIES(b_id)

	mov	ecx, DWORD PTR _web+348
	mov	edx, DWORD PTR [esi+ecx]
	mov	edx, DWORD PTR [edx]
	mov	ecx, edx
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	jne	SHORT $LL126@detorus_so
$LN4@detorus_so:
	pop	edi
	pop	esi
	pop	ebx

; 1699 :     }
; 1700 :   }
; 1701 : } // end detorus_soapfilm_cleanup()

	mov	esp, ebp
	pop	ebp
	ret	0
_detorus_soapfilm_cleanup ENDP
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	__$ArrayPad$
PUBLIC	_detorus_soapfilm_generate
EXTRN	_temp_free:PROC
EXTRN	_transform_colors:DWORD
EXTRN	_view_transform_det:DWORD
EXTRN	_matvec_mul:PROC
EXTRN	_view_transforms:DWORD
;	COMDAT __real@3ff0000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\tordup.c
CONST	ENDS
;	COMDAT _detorus_soapfilm_generate
_TEXT	SEGMENT
tv1835 = -1676						; size = 4
_vstarts$ = -1672					; size = 4
tv1815 = -1668						; size = 4
_translate$ = -1664					; size = 4
_estarts$ = -1660					; size = 4
_maxi$90391 = -1656					; size = 4
_v$90353 = -1656					; size = 4
tv1306 = -1652						; size = 4
_ctrl_pts$90358 = -1652					; size = 4
tv1148 = -1648						; size = 4
_start_fe$90363 = -1648					; size = 4
_ctrl_pts$ = -1648					; size = 4
tv1091 = -1644						; size = 4
_etranslate$ = -1644					; size = 4
tv1119 = -1640						; size = 4
_f_id$ = -1640						; size = 4
_maxi$90359 = -1636					; size = 4
_i$ = -1636						; size = 4
_j$ = -1632						; size = 4
_e_id$ = -1632						; size = 4
_dtf$ = -1628						; size = 24
_fv_space$90411 = -1604					; size = 1600
__$ArrayPad$ = -4					; size = 4
_detorus_soapfilm_generate PROC				; COMDAT

; 1713 : { int *vstarts,*estarts;

	push	ebp
	mov	ebp, esp
	sub	esp, 1676				; 0000068cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1714 :   vertex_id v_id;
; 1715 :   edge_id e_id;
; 1716 :   facet_id f_id;
; 1717 :   int i,j;
; 1718 :   int *translate;
; 1719 :   struct dt_facet dtf;
; 1720 :   int ctrl_pts = web.skel[EDGE].ctrlpts;
; 1721 :   int *etranslate;
; 1722 : 
; 1723 :  // Using NEWELEMENT attribute to tell which elements needed.
; 1724 :   MFOR_ALL_VERTICES(v_id)

	mov	edx, DWORD PTR _web+48
	mov	eax, DWORD PTR _web+120
	push	ebx
	push	esi
	xor	esi, esi
	push	edi
	mov	DWORD PTR _ctrl_pts$[ebp], eax
	test	edx, 268435456				; 10000000H
	je	SHORT $LN70@detorus_so@2
	mov	edi, DWORD PTR _web+12
$LL177@detorus_so@2:
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	ecx, DWORD PTR [eax+edi]
	mov	ecx, DWORD PTR [ecx+8]
	and	ecx, 1
	or	ecx, esi
	je	SHORT $LN71@detorus_so@2

; 1725 : 	  unset_attr(v_id,NEWELEMENT);

	shr	edx, 29					; 0000001dH
	imul	edx, 112				; 00000070H
	mov	ecx, DWORD PTR _web[edx+12]
	mov	ecx, DWORD PTR [ecx+eax]
	mov	edx, DWORD PTR [ecx+12]
	and	DWORD PTR [ecx+8], -5			; fffffffbH
	mov	DWORD PTR [ecx+12], edx
	mov	edi, DWORD PTR _web+12
$LN71@detorus_so@2:

; 1714 :   vertex_id v_id;
; 1715 :   edge_id e_id;
; 1716 :   facet_id f_id;
; 1717 :   int i,j;
; 1718 :   int *translate;
; 1719 :   struct dt_facet dtf;
; 1720 :   int ctrl_pts = web.skel[EDGE].ctrlpts;
; 1721 :   int *etranslate;
; 1722 : 
; 1723 :  // Using NEWELEMENT attribute to tell which elements needed.
; 1724 :   MFOR_ALL_VERTICES(v_id)

	mov	eax, DWORD PTR [eax+edi]
	mov	edx, DWORD PTR [eax]
	test	edx, 268435456				; 10000000H
	jne	SHORT $LL177@detorus_so@2
$LN70@detorus_so@2:

; 1726 :   MFOR_ALL_EDGES(e_id)

	mov	edx, DWORD PTR _web+160
	test	edx, 268435456				; 10000000H
	je	SHORT $LN65@detorus_so@2
	mov	edi, DWORD PTR _web+124
	npad	1
$LL178@detorus_so@2:
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	ecx, DWORD PTR [eax+edi]
	mov	ecx, DWORD PTR [ecx+8]
	and	ecx, 1
	or	ecx, esi
	je	SHORT $LN66@detorus_so@2

; 1727 : 	  unset_attr(e_id,NEWELEMENT);

	shr	edx, 29					; 0000001dH
	imul	edx, 112				; 00000070H
	mov	ecx, DWORD PTR _web[edx+12]
	mov	ecx, DWORD PTR [ecx+eax]
	mov	edx, DWORD PTR [ecx+12]
	and	DWORD PTR [ecx+8], -5			; fffffffbH
	mov	DWORD PTR [ecx+12], edx
	mov	edi, DWORD PTR _web+124
$LN66@detorus_so@2:

; 1726 :   MFOR_ALL_EDGES(e_id)

	mov	eax, DWORD PTR [eax+edi]
	mov	edx, DWORD PTR [eax]
	test	edx, 268435456				; 10000000H
	jne	SHORT $LL178@detorus_so@2
$LN65@detorus_so@2:

; 1728 :   MFOR_ALL_FACETS(f_id)

	mov	edx, DWORD PTR _web+272
	test	edx, 268435456				; 10000000H
	je	SHORT $LN60@detorus_so@2
	mov	edi, DWORD PTR _web+236
	npad	8
$LL179@detorus_so@2:
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	ecx, DWORD PTR [eax+edi]
	mov	ecx, DWORD PTR [ecx+8]
	and	ecx, 1
	or	ecx, esi
	je	SHORT $LN61@detorus_so@2

; 1729 : 	  unset_attr(f_id,NEWELEMENT);

	shr	edx, 29					; 0000001dH
	imul	edx, 112				; 00000070H
	mov	ecx, DWORD PTR _web[edx+12]
	mov	ecx, DWORD PTR [ecx+eax]
	mov	edx, DWORD PTR [ecx+12]
	and	DWORD PTR [ecx+8], -5			; fffffffbH
	mov	DWORD PTR [ecx+12], edx
	mov	edi, DWORD PTR _web+236
$LN61@detorus_so@2:

; 1728 :   MFOR_ALL_FACETS(f_id)

	mov	eax, DWORD PTR [eax+edi]
	mov	edx, DWORD PTR [eax]
	test	edx, 268435456				; 10000000H
	jne	SHORT $LL179@detorus_so@2
$LN60@detorus_so@2:

; 1730 : 	  
; 1731 :   // Allocate lists
; 1732 :   dt_valloc = dt_transform_count*web.skel[VERTEX].count+5;

	mov	eax, DWORD PTR _web+64
	imul	eax, DWORD PTR _dt_transform_count

; 1733 :   dt_vlist = (struct dt_vertex*)temp_calloc(dt_valloc,sizeof(struct dt_vertex));

	push	1733					; 000006c5H
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	add	eax, 5
	push	24					; 00000018H
	push	eax
	mov	DWORD PTR _dt_valloc, eax
	call	_kb_temp_calloc

; 1734 :   dt_vcount = 0;
; 1735 :   dt_x_space = (REAL*)temp_calloc(dt_valloc,SDIM*sizeof(REAL));

	mov	ecx, DWORD PTR _web+616
	push	1735					; 000006c7H
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	lea	edx, DWORD PTR [ecx*8]
	mov	DWORD PTR _dt_vlist, eax
	mov	eax, DWORD PTR _dt_valloc
	push	edx
	push	eax
	mov	DWORD PTR _dt_vcount, esi
	call	_kb_temp_calloc
	mov	DWORD PTR _dt_x_space, eax
	add	esp, 32					; 00000020H

; 1736 :   for ( i = 0 ; i < dt_valloc ; i++ )

	xor	eax, eax
	cmp	DWORD PTR _dt_valloc, esi
	jle	SHORT $LN55@detorus_so@2

; 1730 : 	  
; 1731 :   // Allocate lists
; 1732 :   dt_valloc = dt_transform_count*web.skel[VERTEX].count+5;

	xor	ecx, ecx
	npad	4
$LL166@detorus_so@2:

; 1737 :     dt_vlist[i].x = dt_x_space + SDIM*i;

	mov	edx, DWORD PTR _web+616
	mov	esi, DWORD PTR _dt_x_space
	imul	edx, eax
	lea	edx, DWORD PTR [esi+edx*8]
	mov	esi, DWORD PTR _dt_vlist
	mov	DWORD PTR [ecx+esi+20], edx
	inc	eax
	add	ecx, 24					; 00000018H
	cmp	eax, DWORD PTR _dt_valloc
	jl	SHORT $LL166@detorus_so@2
$LN55@detorus_so@2:

; 1738 : 
; 1739 :   dt_ealloc = dt_transform_count*web.skel[EDGE].count+5;

	mov	eax, DWORD PTR _web+176
	imul	eax, DWORD PTR _dt_transform_count

; 1740 :   dt_elist = (struct dt_edge*)temp_calloc(dt_ealloc,sizeof(struct dt_edge));

	push	1740					; 000006ccH
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	add	eax, 5
	push	12					; 0000000cH
	push	eax
	mov	DWORD PTR _dt_ealloc, eax
	call	_kb_temp_calloc

; 1741 :   dt_ecount = 1;  /* start at 1 so can use signed indexes */
; 1742 :   dt_v_space = (int*)temp_calloc(dt_ealloc,web.skel[EDGE].ctrlpts*sizeof(int));

	mov	edx, DWORD PTR _dt_ealloc
	mov	DWORD PTR _dt_elist, eax
	mov	eax, DWORD PTR _web+120
	push	1742					; 000006ceH
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	lea	ecx, DWORD PTR [eax*4]
	push	ecx
	push	edx
	mov	DWORD PTR _dt_ecount, 1
	call	_kb_temp_calloc
	mov	DWORD PTR _dt_v_space, eax

; 1743 :   for ( i = 0 ; i < dt_ealloc ; i++ )

	xor	eax, eax
	add	esp, 32					; 00000020H
	cmp	DWORD PTR _dt_ealloc, eax
	jle	SHORT $LN52@detorus_so@2

; 1738 : 
; 1739 :   dt_ealloc = dt_transform_count*web.skel[EDGE].count+5;

	mov	esi, DWORD PTR _ctrl_pts$[ebp]
	add	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	add	esi, esi
$LL167@detorus_so@2:

; 1744 :     dt_elist[i].v = dt_v_space + ctrl_pts*i;

	mov	edi, DWORD PTR _dt_v_space
	mov	ebx, DWORD PTR _dt_elist
	add	edi, ecx
	mov	DWORD PTR [edx+ebx+8], edi
	inc	eax
	add	ecx, esi
	add	edx, 12					; 0000000cH
	cmp	eax, DWORD PTR _dt_ealloc
	jl	SHORT $LL167@detorus_so@2
$LN52@detorus_so@2:

; 1745 : 
; 1746 :   vstarts = (int*)temp_calloc(web.skel[VERTEX].max_ord+5,sizeof(int));

	mov	eax, DWORD PTR _web+68
	push	1746					; 000006d2H
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	add	eax, 5
	push	4
	push	eax
	call	_kb_temp_calloc

; 1747 :   estarts = (int*)temp_calloc(web.skel[EDGE].max_ord+5,sizeof(int));

	mov	ecx, DWORD PTR _web+180
	push	1747					; 000006d3H
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	add	ecx, 5
	push	4
	push	ecx
	mov	DWORD PTR _vstarts$[ebp], eax
	call	_kb_temp_calloc

; 1748 :   
; 1749 :   // Generate all transforms
; 1750 :   FOR_ALL_VERTICES(v_id)

	mov	edi, DWORD PTR _web+48
	mov	edx, edi
	shr	edx, 28					; 0000001cH
	add	esp, 32					; 00000020H
	and	edx, 1
	mov	DWORD PTR _estarts$[ebp], eax
	je	$LN171@detorus_so@2
	mov	ecx, DWORD PTR _dt_vcount
	npad	2
$LL51@detorus_so@2:
	mov	esi, DWORD PTR _web+12
	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+eax*4]
	mov	DWORD PTR tv1091[ebp], eax
	mov	eax, DWORD PTR [esi+8]
	and	eax, 1
	xor	ebx, ebx
	or	eax, ebx
	je	$LN50@detorus_so@2

; 1751 :   { int ord = loc_ordinal(v_id);

	test	edx, edx
	je	SHORT $LN75@detorus_so@2
	mov	eax, DWORD PTR tv1091[ebp]
	jmp	SHORT $LN76@detorus_so@2
$LN75@detorus_so@2:
	or	eax, -1
$LN76@detorus_so@2:

; 1752 :     REAL *x = get_coord(v_id);

	mov	edx, DWORD PTR _web+104

; 1753 :     vstarts[ord] = dt_vcount;
; 1754 :     x[SDIM] = 1.0;

	fld1
	mov	ebx, DWORD PTR _dymem
	mov	ebx, DWORD PTR [edx+ebx+64]
	mov	edx, DWORD PTR _vstarts$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	eax, DWORD PTR _web+616
	add	ebx, esi
	fstp	QWORD PTR [ebx+eax*8]

; 1755 :     for ( i = 0 ;  i < dt_transform_count ; i++ )

	mov	ecx, DWORD PTR _dt_vcount
	xor	esi, esi
	cmp	DWORD PTR _dt_transform_count, esi
	jle	SHORT $LN50@detorus_so@2
	npad	6
$LL46@detorus_so@2:

; 1756 :     { dt_vlist[dt_vcount].v_id = v_id;

	mov	edx, DWORD PTR _dt_vlist
	lea	ecx, DWORD PTR [ecx+ecx*2]
	mov	DWORD PTR [edx+ecx*8], edi

; 1757 :       dt_vlist[dt_vcount].orig_v_id = v_id;

	mov	eax, DWORD PTR _dt_vcount
	mov	ecx, DWORD PTR _dt_vlist
	lea	eax, DWORD PTR [eax+eax*2]
	mov	DWORD PTR [ecx+eax*8+4], edi

; 1758 :       matvec_mul(view_transforms[i],x,dt_vlist[dt_vcount].x,
; 1759 :                   SDIM+1,SDIM+1);

	mov	eax, DWORD PTR _web+616
	inc	eax
	push	eax
	push	eax
	mov	eax, DWORD PTR _dt_vcount
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR _dt_vlist
	mov	ecx, DWORD PTR [eax+edx*8+20]
	mov	edx, DWORD PTR _view_transforms
	mov	eax, DWORD PTR [edx+esi*4]
	push	ecx
	push	ebx
	push	eax
	call	_matvec_mul

; 1760 :       dt_vcount++;

	mov	ecx, DWORD PTR _dt_vcount
	inc	ecx
	inc	esi
	add	esp, 20					; 00000014H
	mov	DWORD PTR _dt_vcount, ecx
	cmp	esi, DWORD PTR _dt_transform_count
	jl	SHORT $LL46@detorus_so@2
$LN50@detorus_so@2:

; 1748 :   
; 1749 :   // Generate all transforms
; 1750 :   FOR_ALL_VERTICES(v_id)

	mov	edx, DWORD PTR tv1091[ebp]
	mov	eax, DWORD PTR _web+12
	mov	edx, DWORD PTR [eax+edx*4]
	mov	edi, DWORD PTR [edx]
	mov	edx, edi
	shr	edx, 28					; 0000001cH
	and	edx, 1
	jne	$LL51@detorus_so@2
$LN171@detorus_so@2:

; 1761 :     } 
; 1762 :   }
; 1763 :   translate = detorus_unify_vertices();

	call	_detorus_unify_vertices

; 1764 :   
; 1765 :   FOR_ALL_EDGES(e_id)

	mov	edi, DWORD PTR _web+160
	mov	DWORD PTR _e_id$[ebp], edi
	shr	edi, 28					; 0000001cH
	and	edi, 1
	mov	DWORD PTR _translate$[ebp], eax
	je	$LN172@detorus_so@2
	mov	ebx, DWORD PTR _web+124
	mov	edx, DWORD PTR _dt_ecount
	npad	2
$LL43@detorus_so@2:
	mov	eax, DWORD PTR _e_id$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ebx+eax*4]
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR tv1119[ebp], eax
	and	ecx, 1
	xor	eax, eax
	or	ecx, eax
	je	$LN42@detorus_so@2

; 1766 :   { int ord = loc_ordinal(e_id);

	test	edi, edi
	je	SHORT $LN77@detorus_so@2
	mov	eax, DWORD PTR tv1119[ebp]
	jmp	SHORT $LN78@detorus_so@2
$LN77@detorus_so@2:
	or	eax, -1
$LN78@detorus_so@2:

; 1767 :     vertex_id *v = get_edge_vertices(e_id);

	mov	edi, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+edi+304]

; 1768 :     int ctrl_pts = web.skel[EDGE].ctrlpts;

	mov	edi, DWORD PTR _web+120
	add	ecx, esi
	mov	DWORD PTR _v$90353[ebp], ecx

; 1769 :     int maxi;
; 1770 : 
; 1771 :     estarts[ord] = dt_ecount;

	mov	ecx, DWORD PTR _estarts$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 1772 :     if ( get_eattr(e_id) & NO_TRANSFORM )

	mov	edx, DWORD PTR tv1119[ebp]
	mov	ebx, DWORD PTR _web+124
	mov	esi, DWORD PTR [ebx+edx*4]
	mov	edx, DWORD PTR [esi+12]
	and	edx, 1
	xor	ecx, ecx
	or	ecx, edx
	mov	DWORD PTR _ctrl_pts$90358[ebp], edi
	je	$LN38@detorus_so@2

; 1773 :     { // see if any adjacent facets need it
; 1774 :       facetedge_id start_fe,fe_id;
; 1775 :       maxi = 1;

	mov	DWORD PTR _maxi$90359[ebp], 1

; 1776 :       start_fe = fe_id = get_edge_fe(e_id);

	test	esi, esi
	je	SHORT $LN93@detorus_so@2
$LN94@detorus_so@2:
	test	DWORD PTR _e_id$[ebp], 134217728	; 08000000H
	mov	esi, DWORD PTR [esi+28]
	je	SHORT $LN93@detorus_so@2
	xor	esi, 134217728				; 08000000H
$LN93@detorus_so@2:
	mov	DWORD PTR _start_fe$90363[ebp], esi

; 1777 :       if ( valid_id(start_fe) )

	test	esi, 268435456				; 10000000H
	je	$LN175@detorus_so@2
	mov	eax, DWORD PTR _web+460
	npad	4
$LL36@detorus_so@2:

; 1778 :       do 
; 1779 :       { if ( get_eattr(get_fe_facet(fe_id)) & NO_TRANSFORM )

	test	esi, 268435456				; 10000000H
	jne	SHORT $LN98@detorus_so@2
	mov	ecx, DWORD PTR _NULLFACET
	jmp	SHORT $LN97@detorus_so@2
$LN98@detorus_so@2:
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [edx+24]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN97@detorus_so@2
	xor	ecx, 134217728				; 08000000H
$LN97@detorus_so@2:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 1
	xor	ecx, ecx
	or	ecx, edx
	jne	SHORT $LN130@detorus_so@2

; 1781 :            break;
; 1782 :         }
; 1783 :         fe_id = get_next_facet(fe_id);

	test	esi, 134217728				; 08000000H
	je	SHORT $LN102@detorus_so@2
	and	esi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+esi*4]
	mov	esi, DWORD PTR [ecx+36]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN35@detorus_so@2
$LN102@detorus_so@2:
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+esi*4]
	mov	esi, DWORD PTR [edx+40]
$LN35@detorus_so@2:

; 1784 :       } while ( !equal_id(fe_id,start_fe) );

	cmp	esi, DWORD PTR _start_fe$90363[ebp]
	jne	SHORT $LL36@detorus_so@2
	jmp	SHORT $LN175@detorus_so@2
$LN130@detorus_so@2:

; 1780 :         {  maxi = dt_transform_count;

	mov	eax, DWORD PTR _dt_transform_count
	mov	DWORD PTR _maxi$90359[ebp], eax

; 1785 :     }
; 1786 :     else maxi = dt_transform_count;

	jmp	SHORT $LN175@detorus_so@2
$LN38@detorus_so@2:
	mov	ecx, DWORD PTR _dt_transform_count
	mov	DWORD PTR _maxi$90359[ebp], ecx
$LN175@detorus_so@2:

; 1787 :     for ( i = 0 ;  i < maxi ; i++ )

	mov	edx, DWORD PTR _dt_ecount
	xor	esi, esi
	cmp	DWORD PTR _maxi$90359[ebp], esi
	jle	$LN42@detorus_so@2
	mov	eax, DWORD PTR _translate$[ebp]
	npad	10
$LL31@detorus_so@2:

; 1788 :     { dt_elist[dt_ecount].e_id = e_id;

	mov	ecx, DWORD PTR _dt_elist
	mov	ebx, DWORD PTR _e_id$[ebp]
	lea	edx, DWORD PTR [edx+edx*2]
	mov	DWORD PTR [ecx+edx*4], ebx

; 1789 :       for ( j = 0 ; j < ctrl_pts ; j++ )

	xor	ecx, ecx
	test	edi, edi
	jle	SHORT $LN26@detorus_so@2
	npad	8
$LL176@detorus_so@2:

; 1790 :         dt_elist[dt_ecount].v[j] = translate[vstarts[loc_ordinal(v[j])] + i];

	mov	edx, DWORD PTR _v$90353[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	test	edx, 268435456				; 10000000H
	je	SHORT $LN79@detorus_so@2
	and	edx, 134217727				; 07ffffffH
	jmp	SHORT $LN80@detorus_so@2
$LN79@detorus_so@2:
	or	edx, -1
$LN80@detorus_so@2:
	mov	edi, DWORD PTR _vstarts$[ebp]
	mov	edi, DWORD PTR [edi+edx*4]
	mov	edx, DWORD PTR _dt_ecount
	mov	ebx, DWORD PTR _dt_elist
	add	edi, esi
	mov	edi, DWORD PTR [eax+edi*4]
	lea	edx, DWORD PTR [edx+edx*2]
	mov	edx, DWORD PTR [ebx+edx*4+8]
	mov	DWORD PTR [edx+ecx*4], edi
	mov	edi, DWORD PTR _ctrl_pts$90358[ebp]
	inc	ecx
	cmp	ecx, edi
	jl	SHORT $LL176@detorus_so@2
$LN26@detorus_so@2:

; 1791 :       dt_ecount++;

	mov	edx, DWORD PTR _dt_ecount
	inc	edx
	inc	esi
	mov	DWORD PTR _dt_ecount, edx
	cmp	esi, DWORD PTR _maxi$90359[ebp]
	jl	$LL31@detorus_so@2

; 1787 :     for ( i = 0 ;  i < maxi ; i++ )

	mov	ebx, DWORD PTR _web+124
$LN42@detorus_so@2:

; 1764 :   
; 1765 :   FOR_ALL_EDGES(e_id)

	mov	eax, DWORD PTR tv1119[ebp]
	mov	ecx, DWORD PTR [ebx+eax*4]
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR _e_id$[ebp], edi
	shr	edi, 28					; 0000001cH
	and	edi, 1
	jne	$LL43@detorus_so@2
$LN172@detorus_so@2:

; 1792 :     } 
; 1793 :   }
; 1794 :   
; 1795 :   etranslate = detorus_unify_edges();

	call	_detorus_unify_edges
	mov	DWORD PTR _etranslate$[ebp], eax

; 1796 :  
; 1797 :   FOR_ALL_FACETS(f_id)

	mov	eax, DWORD PTR _web+272
	mov	DWORD PTR _f_id$[ebp], eax
	test	eax, 268435456				; 10000000H
	je	$LN23@detorus_so@2
	mov	edi, DWORD PTR _web+236
	npad	1
$LL25@detorus_so@2:
	mov	eax, DWORD PTR _f_id$[ebp]
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv1148[ebp], eax
	mov	eax, DWORD PTR [eax+edi]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [eax+12]
	mov	eax, ecx
	and	eax, 1
	xor	esi, esi
	or	eax, esi
	je	$LN24@detorus_so@2

; 1798 :   { int maxi;
; 1799 :     if ( get_fattr(f_id) & NEWELEMENT )

	and	ecx, 4
	xor	eax, eax
	or	ecx, eax
	jne	$LN24@detorus_so@2

; 1800 :       continue;
; 1801 :     maxi = get_fattr(f_id) & NO_TRANSFORM ? 1 : dt_transform_count;

	and	edx, 1
	or	eax, edx
	lea	eax, DWORD PTR [esi+1]
	jne	SHORT $LN180@detorus_so@2
	mov	eax, DWORD PTR _dt_transform_count
$LN180@detorus_so@2:
	mov	DWORD PTR _maxi$90391[ebp], eax

; 1802 :     for ( i = 0 ; i < maxi ; i++ )

	mov	DWORD PTR _i$[ebp], esi
	test	eax, eax
	jle	$LN24@detorus_so@2
	npad	3
$LL170@detorus_so@2:

; 1803 :     {
; 1804 :       facetedge_id fe;
; 1805 :       
; 1806 :       dtf.flags = 0;
; 1807 :       fe = get_facet_fe(f_id);

	mov	edx, DWORD PTR _f_id$[ebp]
	push	edx
	mov	DWORD PTR _dtf$[ebp+20], 0
	call	_get_facet_fe

; 1808 :       e_id = get_fe_edge(fe);

	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+ecx*4]
	mov	ecx, eax
	and	ecx, 134217728				; 08000000H
	xor	ecx, DWORD PTR [esi+20]
	add	esp, 4

; 1809 :       for ( j = 0 ; j < FACET_EDGES ; j++ )
; 1810 :       { dtf.e[j] = etranslate[estarts[loc_ordinal(e_id)] + i];

	test	ecx, 268435456				; 10000000H
	je	SHORT $LN83@detorus_so@2
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	jmp	SHORT $LN84@detorus_so@2
$LN83@detorus_so@2:
	or	edx, -1
$LN84@detorus_so@2:
	mov	edi, DWORD PTR _estarts$[ebp]
	mov	edx, DWORD PTR [edi+edx*4]
	mov	edi, DWORD PTR _i$[ebp]
	mov	ebx, DWORD PTR _etranslate$[ebp]
	add	edx, edi
	mov	edx, DWORD PTR [ebx+edx*4]
	mov	DWORD PTR _dtf$[ebp+4], edx

; 1811 :         if ( inverted(e_id) )

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN13@detorus_so@2

; 1812 :            dtf.e[j] *= -1;

	neg	edx
	mov	DWORD PTR _dtf$[ebp+4], edx
$LN13@detorus_so@2:

; 1813 :         fe = get_next_edge(fe);

	test	eax, 134217728				; 08000000H
	je	SHORT $LN108@detorus_so@2
	mov	ecx, DWORD PTR [esi+28]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN107@detorus_so@2
$LN108@detorus_so@2:
	mov	ecx, DWORD PTR [esi+32]
$LN107@detorus_so@2:

; 1814 :         e_id = get_fe_edge(fe);

	mov	edx, DWORD PTR _web+460
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+eax*4]
	mov	eax, ecx
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [esi+20]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN155@detorus_so@2

; 1809 :       for ( j = 0 ; j < FACET_EDGES ; j++ )
; 1810 :       { dtf.e[j] = etranslate[estarts[loc_ordinal(e_id)] + i];

	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	jmp	SHORT $LN156@detorus_so@2
$LN155@detorus_so@2:
	or	edx, -1
$LN156@detorus_so@2:
	mov	ebx, DWORD PTR _estarts$[ebp]
	mov	edx, DWORD PTR [ebx+edx*4]
	mov	ebx, DWORD PTR _etranslate$[ebp]
	add	edx, edi
	mov	edx, DWORD PTR [ebx+edx*4]
	mov	DWORD PTR _dtf$[ebp+8], edx

; 1811 :         if ( inverted(e_id) )

	test	eax, 134217728				; 08000000H
	je	SHORT $LN157@detorus_so@2

; 1812 :            dtf.e[j] *= -1;

	neg	edx
	mov	DWORD PTR _dtf$[ebp+8], edx
$LN157@detorus_so@2:

; 1813 :         fe = get_next_edge(fe);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN158@detorus_so@2
	mov	eax, DWORD PTR [esi+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN159@detorus_so@2
$LN158@detorus_so@2:
	mov	eax, DWORD PTR [esi+32]
$LN159@detorus_so@2:

; 1814 :         e_id = get_fe_edge(fe);

	mov	esi, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN161@detorus_so@2

; 1809 :       for ( j = 0 ; j < FACET_EDGES ; j++ )
; 1810 :       { dtf.e[j] = etranslate[estarts[loc_ordinal(e_id)] + i];

	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	jmp	SHORT $LN162@detorus_so@2
$LN161@detorus_so@2:
	or	ecx, -1
$LN162@detorus_so@2:
	mov	esi, DWORD PTR _estarts$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4]
	add	ecx, edi
	mov	ecx, DWORD PTR [ebx+ecx*4]
	mov	DWORD PTR _dtf$[ebp+12], ecx

; 1811 :         if ( inverted(e_id) )

	test	eax, 134217728				; 08000000H
	je	SHORT $LN163@detorus_so@2

; 1812 :            dtf.e[j] *= -1;

	neg	ecx
	mov	DWORD PTR _dtf$[ebp+12], ecx
$LN163@detorus_so@2:

; 1815 :       }
; 1816 :       if ( view_transform_det && ((view_transform_det[i] < 0)
; 1817 :          != (transform_colors[i] == SWAP_COLORS)) )

	mov	esi, DWORD PTR _view_transform_det
	test	esi, esi
	je	SHORT $LN12@detorus_so@2
	mov	ebx, DWORD PTR _transform_colors
	xor	eax, eax
	cmp	DWORD PTR [ebx+edi*4], 1
	sete	al
	xor	ebx, ebx
	cmp	DWORD PTR [esi+edi*4], ebx
	setl	bl
	cmp	ebx, eax
	je	SHORT $LN12@detorus_so@2

; 1818 :       { // inverted
; 1819 :         int tmp = dtf.e[0];

	mov	eax, DWORD PTR _dtf$[ebp+4]

; 1820 :         dtf.e[0] = -dtf.e[2];

	neg	ecx

; 1821 :         dtf.e[1] = -dtf.e[1];

	neg	edx

; 1822 :         dtf.e[2] = -tmp;

	neg	eax
	mov	DWORD PTR _dtf$[ebp+4], ecx
	mov	DWORD PTR _dtf$[ebp+8], edx
	mov	DWORD PTR _dtf$[ebp+12], eax
$LN12@detorus_so@2:

; 1823 :       }
; 1824 :       dtf.f_id = f_id;
; 1825 :       if ( web.modeltype == LAGRANGE )

	cmp	DWORD PTR _web+628, 3
	mov	ecx, DWORD PTR _f_id$[ebp]
	mov	DWORD PTR _dtf$[ebp], ecx
	jne	$LN4@detorus_so@2

; 1826 :       { int fv_space[MAXLAGRANGE*MAXLAGRANGE];
; 1827 :         vertex_id *v = get_facet_vertices(f_id);

	mov	edx, DWORD PTR _web+328
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax+304]
	mov	ecx, DWORD PTR tv1148[ebp]
	mov	edx, DWORD PTR _web+236
	add	eax, DWORD PTR [ecx+edx]

; 1828 :         dtf.fv = fv_space;

	lea	ecx, DWORD PTR _fv_space$90411[ebp]
	mov	DWORD PTR _dtf$[ebp+16], ecx

; 1829 :         for ( j = 0 ; j < web.skel[FACET].ctrlpts ; j++ )

	xor	ecx, ecx
	cmp	DWORD PTR _web+232, ecx
	jle	SHORT $LN8@detorus_so@2
	mov	edi, DWORD PTR _i$[ebp]
	lea	esi, DWORD PTR _fv_space$90411[ebp]
	sub	esi, eax
	npad	4
$LL174@detorus_so@2:

; 1830 :           dtf.fv[j] = translate[vstarts[loc_ordinal(v[j])] + i];

	mov	edx, DWORD PTR [eax]
	test	edx, 268435456				; 10000000H
	je	SHORT $LN85@detorus_so@2
	and	edx, 134217727				; 07ffffffH
	jmp	SHORT $LN86@detorus_so@2
$LN85@detorus_so@2:
	or	edx, -1
$LN86@detorus_so@2:
	mov	ebx, DWORD PTR _vstarts$[ebp]
	mov	edx, DWORD PTR [ebx+edx*4]
	mov	ebx, DWORD PTR _translate$[ebp]
	add	edx, edi
	mov	edx, DWORD PTR [ebx+edx*4]
	mov	DWORD PTR [esi+eax], edx
	inc	ecx
	add	eax, 4
	cmp	ecx, DWORD PTR _web+232
	jl	SHORT $LL174@detorus_so@2

; 1829 :         for ( j = 0 ; j < web.skel[FACET].ctrlpts ; j++ )

	mov	esi, DWORD PTR _view_transform_det
$LN8@detorus_so@2:

; 1831 :         if ( view_transform_det && view_transform_det[i] < 0 )

	test	esi, esi
	je	$LN4@detorus_so@2
	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR [esi+eax*4], 0
	jge	$LN4@detorus_so@2

; 1832 :         { // inverted
; 1833 :           int ii;
; 1834 :           for ( j = 0 ; j < web.lagrange_order/2 ; j++ )

	mov	ecx, DWORD PTR _web+632
	mov	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _j$[ebp], 0
	test	eax, eax
	jle	$LN4@detorus_so@2
	mov	DWORD PTR tv1815[ebp], -1
	npad	1
$LL6@detorus_so@2:

; 1835 :             for ( ii = j+1 ; ii+j <= web.lagrange_order ; ii++ )

	mov	eax, DWORD PTR _j$[ebp]
	lea	edi, DWORD PTR [eax+1]
	lea	ebx, DWORD PTR [edi+eax]
	mov	DWORD PTR tv1306[ebp], edi
	cmp	ebx, ecx
	jg	SHORT $LN5@detorus_so@2
	mov	eax, edi
	add	eax, -2					; fffffffeH
	imul	eax, DWORD PTR _j$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv1835[ebp], eax
	npad	3
$LL3@detorus_so@2:
	mov	eax, DWORD PTR tv1815[ebp]
	add	eax, ebx

; 1836 :             { int k = ii + j*(web.lagrange_order+1) - (j*(j-1))/2;
; 1837 :               int kk = j + ii*(web.lagrange_order+1) - (ii*(ii-1))/2;

	imul	eax, edi
	inc	ecx
	mov	esi, ecx
	imul	ecx, edi
	imul	esi, DWORD PTR _j$[ebp]
	sub	esi, DWORD PTR tv1835[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	ecx, eax
	add	ecx, DWORD PTR _j$[ebp]
	add	esi, edi

; 1838 :               int tmp = dtf.fv[k];

	mov	edx, DWORD PTR _fv_space$90411[ebp+esi*4]

; 1839 :               dtf.fv[k] = dtf.fv[kk];

	lea	eax, DWORD PTR _fv_space$90411[ebp+ecx*4]
	mov	ecx, DWORD PTR [eax]
	lea	esi, DWORD PTR _fv_space$90411[ebp+esi*4]
	mov	DWORD PTR [esi], ecx

; 1840 :               dtf.fv[kk] = tmp;

	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _web+632
	inc	ebx
	inc	edi
	cmp	ebx, ecx
	jle	SHORT $LL3@detorus_so@2
$LN5@detorus_so@2:

; 1832 :         { // inverted
; 1833 :           int ii;
; 1834 :           for ( j = 0 ; j < web.lagrange_order/2 ; j++ )

	mov	esi, DWORD PTR tv1306[ebp]
	dec	DWORD PTR tv1815[ebp]
	mov	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _j$[ebp], esi
	cmp	esi, eax
	jl	$LL6@detorus_so@2
$LN4@detorus_so@2:

; 1841 :             }
; 1842 : 
; 1843 :         }
; 1844 :       }
; 1845 :       detorus_handle_facet(&dtf);   

	lea	edx, DWORD PTR _dtf$[ebp]
	push	edx
	call	_detorus_handle_facet
	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _maxi$90391[ebp]
	jl	$LL170@detorus_so@2

; 1802 :     for ( i = 0 ; i < maxi ; i++ )

	mov	edi, DWORD PTR _web+236
$LN24@detorus_so@2:

; 1796 :  
; 1797 :   FOR_ALL_FACETS(f_id)

	mov	eax, DWORD PTR tv1148[ebp]
	mov	ecx, DWORD PTR [eax+edi]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR _f_id$[ebp], eax
	test	eax, 268435456				; 10000000H
	jne	$LL25@detorus_so@2
$LN23@detorus_so@2:

; 1846 : 
; 1847 :     }
; 1848 :   }
; 1849 :   
; 1850 :   detorus_soapfilm_cleanup();

	call	_detorus_soapfilm_cleanup

; 1851 :   
; 1852 :   temp_free((char*)dt_vlist);

	mov	edx, DWORD PTR _dt_vlist
	push	edx
	call	_temp_free

; 1853 :   temp_free((char*)dt_x_space);

	mov	eax, DWORD PTR _dt_x_space
	push	eax
	call	_temp_free

; 1854 :   temp_free((char*)dt_elist);

	mov	ecx, DWORD PTR _dt_elist
	push	ecx
	call	_temp_free

; 1855 :   temp_free((char*)dt_v_space);

	mov	edx, DWORD PTR _dt_v_space
	push	edx
	call	_temp_free

; 1856 :   temp_free((char*)translate);

	mov	eax, DWORD PTR _translate$[ebp]
	push	eax
	call	_temp_free

; 1857 :   temp_free((char*)etranslate);

	mov	ecx, DWORD PTR _etranslate$[ebp]
	push	ecx
	call	_temp_free

; 1858 : 
; 1859 :  } // end detorus_soapfilm_generate()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 24					; 00000018H
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_detorus_soapfilm_generate ENDP
_TEXT	ENDS
PUBLIC	_detorus_string_generate
; Function compile flags: /Ogtp
;	COMDAT _detorus_string_generate
_TEXT	SEGMENT
tv639 = -28						; size = 4
_v$90519 = -24						; size = 4
_estarts$ = -20						; size = 4
tv615 = -16						; size = 4
_translate$ = -16					; size = 4
_ctrl_pts$ = -16					; size = 4
tv611 = -12						; size = 4
_e_id$ = -12						; size = 4
_maxi$90525 = -8					; size = 4
_vstarts$ = -4						; size = 4
_detorus_string_generate PROC				; COMDAT

; 1873 : { int *vstarts,*estarts;

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 1874 :   vertex_id v_id;
; 1875 :   edge_id e_id;
; 1876 :   int i,j;
; 1877 :   int *translate;
; 1878 :   int ctrl_pts = web.skel[EDGE].ctrlpts;
; 1879 :   int *etranslate;
; 1880 : 
; 1881 :  // Using NEWELEMENT attribute to tell which elements needed.
; 1882 :   MFOR_ALL_VERTICES(v_id)

	mov	edx, DWORD PTR _web+48
	mov	eax, DWORD PTR _web+120
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _ctrl_pts$[ebp], eax
	mov	ebx, -5					; fffffffbH
	test	edx, 268435456				; 10000000H
	je	SHORT $LN72@detorus_st@3
	mov	edi, DWORD PTR _web+12
	npad	6
$LL35@detorus_st@3:
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	ecx, DWORD PTR [eax+edi]
	mov	ecx, DWORD PTR [ecx+8]
	and	ecx, 1
	xor	esi, esi
	or	ecx, esi
	je	SHORT $LN34@detorus_st@3

; 1883 : 	  unset_attr(v_id,NEWELEMENT);

	shr	edx, 29					; 0000001dH
	imul	edx, 112				; 00000070H
	mov	ecx, DWORD PTR _web[edx+12]
	mov	ecx, DWORD PTR [ecx+eax]
	mov	edx, DWORD PTR [ecx+12]
	and	DWORD PTR [ecx+8], ebx
	mov	DWORD PTR [ecx+12], edx
	mov	edi, DWORD PTR _web+12
$LN34@detorus_st@3:

; 1874 :   vertex_id v_id;
; 1875 :   edge_id e_id;
; 1876 :   int i,j;
; 1877 :   int *translate;
; 1878 :   int ctrl_pts = web.skel[EDGE].ctrlpts;
; 1879 :   int *etranslate;
; 1880 : 
; 1881 :  // Using NEWELEMENT attribute to tell which elements needed.
; 1882 :   MFOR_ALL_VERTICES(v_id)

	mov	eax, DWORD PTR [eax+edi]
	mov	edx, DWORD PTR [eax]
	test	edx, 268435456				; 10000000H
	jne	SHORT $LL35@detorus_st@3
$LN72@detorus_st@3:

; 1884 :   MFOR_ALL_EDGES(e_id)

	mov	edx, DWORD PTR _web+160
	test	edx, 268435456				; 10000000H
	je	SHORT $LN28@detorus_st@3
	mov	edi, DWORD PTR _web+124
	npad	7
$LL30@detorus_st@3:
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	ecx, DWORD PTR [eax+edi]
	mov	ecx, DWORD PTR [ecx+8]
	and	ecx, 1
	xor	esi, esi
	or	ecx, esi
	je	SHORT $LN29@detorus_st@3

; 1885 : 	  unset_attr(e_id,NEWELEMENT);

	shr	edx, 29					; 0000001dH
	imul	edx, 112				; 00000070H
	mov	ecx, DWORD PTR _web[edx+12]
	mov	ecx, DWORD PTR [ecx+eax]
	mov	edx, DWORD PTR [ecx+12]
	and	DWORD PTR [ecx+8], ebx
	mov	DWORD PTR [ecx+12], edx
	mov	edi, DWORD PTR _web+124
$LN29@detorus_st@3:

; 1884 :   MFOR_ALL_EDGES(e_id)

	mov	eax, DWORD PTR [eax+edi]
	mov	edx, DWORD PTR [eax]
	test	edx, 268435456				; 10000000H
	jne	SHORT $LL30@detorus_st@3
$LN28@detorus_st@3:

; 1886 : 	  
; 1887 :   // Allocate lists
; 1888 :   dt_valloc = dt_transform_count*web.skel[VERTEX].count+5;

	mov	eax, DWORD PTR _web+64
	imul	eax, DWORD PTR _dt_transform_count

; 1889 :   dt_vlist = (struct dt_vertex*)temp_calloc(dt_valloc,sizeof(struct dt_vertex));

	push	1889					; 00000761H
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	add	eax, 5
	push	24					; 00000018H
	push	eax
	mov	DWORD PTR _dt_valloc, eax
	call	_kb_temp_calloc

; 1890 :   dt_vcount = 0;
; 1891 :   dt_x_space = (REAL*)temp_calloc(dt_valloc,SDIM*sizeof(REAL));

	mov	ecx, DWORD PTR _web+616
	push	1891					; 00000763H
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	lea	edx, DWORD PTR [ecx*8]
	mov	DWORD PTR _dt_vlist, eax
	mov	eax, DWORD PTR _dt_valloc
	push	edx
	push	eax
	mov	DWORD PTR _dt_vcount, 0
	call	_kb_temp_calloc
	mov	DWORD PTR _dt_x_space, eax

; 1892 :   for ( i = 0 ; i < dt_valloc ; i++ )

	xor	eax, eax
	add	esp, 32					; 00000020H
	cmp	DWORD PTR _dt_valloc, eax
	jle	SHORT $LN23@detorus_st@3

; 1886 : 	  
; 1887 :   // Allocate lists
; 1888 :   dt_valloc = dt_transform_count*web.skel[VERTEX].count+5;

	xor	ecx, ecx
$LL68@detorus_st@3:

; 1893 :     dt_vlist[i].x = dt_x_space + SDIM*i;

	mov	edx, DWORD PTR _web+616
	mov	esi, DWORD PTR _dt_x_space
	imul	edx, eax
	lea	edx, DWORD PTR [esi+edx*8]
	mov	esi, DWORD PTR _dt_vlist
	mov	DWORD PTR [ecx+esi+20], edx
	inc	eax
	add	ecx, 24					; 00000018H
	cmp	eax, DWORD PTR _dt_valloc
	jl	SHORT $LL68@detorus_st@3
$LN23@detorus_st@3:

; 1894 : 
; 1895 :   dt_ealloc = dt_transform_count*web.skel[EDGE].count+5;

	mov	eax, DWORD PTR _web+176
	imul	eax, DWORD PTR _dt_transform_count

; 1896 :   dt_elist = (struct dt_edge*)temp_calloc(dt_ealloc,sizeof(struct dt_edge));

	push	1896					; 00000768H
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	add	eax, 5
	push	12					; 0000000cH
	push	eax
	mov	DWORD PTR _dt_ealloc, eax
	call	_kb_temp_calloc

; 1897 :   dt_ecount = 1;  /* start at 1 so can use signed indexes */
; 1898 :   dt_v_space = (int*)temp_calloc(dt_ealloc,web.skel[EDGE].ctrlpts*sizeof(int));

	mov	edx, DWORD PTR _dt_ealloc
	mov	DWORD PTR _dt_elist, eax
	mov	eax, DWORD PTR _web+120
	push	1898					; 0000076aH
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	lea	ecx, DWORD PTR [eax*4]
	push	ecx
	push	edx
	mov	DWORD PTR _dt_ecount, 1
	call	_kb_temp_calloc
	mov	DWORD PTR _dt_v_space, eax

; 1899 :   for ( i = 0 ; i < dt_ealloc ; i++ )

	xor	eax, eax
	add	esp, 32					; 00000020H
	cmp	DWORD PTR _dt_ealloc, eax
	jle	SHORT $LN20@detorus_st@3

; 1894 : 
; 1895 :   dt_ealloc = dt_transform_count*web.skel[EDGE].count+5;

	mov	esi, DWORD PTR _ctrl_pts$[ebp]
	add	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	add	esi, esi
	npad	2
$LL69@detorus_st@3:

; 1900 :     dt_elist[i].v = dt_v_space + ctrl_pts*i;

	mov	edi, DWORD PTR _dt_v_space
	mov	ebx, DWORD PTR _dt_elist
	add	edi, ecx
	mov	DWORD PTR [edx+ebx+8], edi
	inc	eax
	add	ecx, esi
	add	edx, 12					; 0000000cH
	cmp	eax, DWORD PTR _dt_ealloc
	jl	SHORT $LL69@detorus_st@3
$LN20@detorus_st@3:

; 1901 : 
; 1902 :   vstarts = (int*)temp_calloc(web.skel[VERTEX].max_ord+5,sizeof(int));

	mov	eax, DWORD PTR _web+68
	push	1902					; 0000076eH
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	add	eax, 5
	push	4
	push	eax
	call	_kb_temp_calloc

; 1903 :   estarts = (int*)temp_calloc(web.skel[EDGE].max_ord+5,sizeof(int));

	mov	ecx, DWORD PTR _web+180
	push	1903					; 0000076fH
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	add	ecx, 5
	push	4
	push	ecx
	mov	DWORD PTR _vstarts$[ebp], eax
	call	_kb_temp_calloc

; 1904 :   
; 1905 :   // Generate all transforms
; 1906 :   FOR_ALL_VERTICES(v_id)

	mov	edi, DWORD PTR _web+48
	mov	ebx, edi
	shr	ebx, 28					; 0000001cH
	add	esp, 32					; 00000020H
	and	ebx, 1
	mov	DWORD PTR _estarts$[ebp], eax
	je	$LN17@detorus_st@3
	mov	ecx, DWORD PTR _dt_vcount
	npad	8
$LL77@detorus_st@3:
	mov	eax, DWORD PTR _web+12
	mov	edx, edi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv615[ebp], eax
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	esi, esi
	or	eax, esi
	mov	DWORD PTR tv611[ebp], edx
	je	$LN18@detorus_st@3

; 1907 :   { int ord = loc_ordinal(v_id);

	test	ebx, ebx
	je	SHORT $LN38@detorus_st@3
	mov	eax, edx
	jmp	SHORT $LN39@detorus_st@3
$LN38@detorus_st@3:
	or	eax, -1
$LN39@detorus_st@3:

; 1908 :     REAL *x = get_coord(v_id);

	mov	esi, DWORD PTR _web+104

; 1909 :     vstarts[ord] = dt_vcount;
; 1910 :     x[SDIM] = 1.0;

	fld1
	mov	ebx, DWORD PTR _dymem
	mov	ebx, DWORD PTR [esi+ebx+64]
	mov	esi, DWORD PTR _vstarts$[ebp]
	add	ebx, DWORD PTR tv615[ebp]
	mov	DWORD PTR [esi+eax*4], ecx
	mov	ecx, DWORD PTR _web+616
	fstp	QWORD PTR [ebx+ecx*8]

; 1911 :     for ( i = 0 ;  i < dt_transform_count ; i++ )

	mov	ecx, DWORD PTR _dt_vcount
	xor	esi, esi
	cmp	DWORD PTR _dt_transform_count, esi
	jle	SHORT $LN18@detorus_st@3
$LL14@detorus_st@3:

; 1912 :     { dt_vlist[dt_vcount].v_id = v_id;

	mov	eax, DWORD PTR _dt_vlist
	lea	edx, DWORD PTR [ecx+ecx*2]
	mov	DWORD PTR [eax+edx*8], edi

; 1913 :       dt_vlist[dt_vcount].orig_v_id = v_id;

	mov	eax, DWORD PTR _dt_vcount
	mov	edx, DWORD PTR _dt_vlist
	lea	ecx, DWORD PTR [eax+eax*2]
	mov	DWORD PTR [edx+ecx*8+4], edi

; 1914 :       matvec_mul(view_transforms[i],x,dt_vlist[dt_vcount].x,
; 1915 :                   SDIM+1,SDIM+1);

	mov	eax, DWORD PTR _web+616
	mov	ecx, DWORD PTR _dt_vlist
	inc	eax
	push	eax
	push	eax
	mov	eax, DWORD PTR _dt_vcount
	lea	eax, DWORD PTR [eax+eax*2]
	mov	edx, DWORD PTR [ecx+eax*8+20]
	mov	eax, DWORD PTR _view_transforms
	mov	ecx, DWORD PTR [eax+esi*4]
	push	edx
	push	ebx
	push	ecx
	call	_matvec_mul

; 1916 :       dt_vcount++;

	mov	ecx, DWORD PTR _dt_vcount
	inc	ecx
	inc	esi
	add	esp, 20					; 00000014H
	mov	DWORD PTR _dt_vcount, ecx
	cmp	esi, DWORD PTR _dt_transform_count
	jl	SHORT $LL14@detorus_st@3

; 1911 :     for ( i = 0 ;  i < dt_transform_count ; i++ )

	mov	edx, DWORD PTR tv611[ebp]
$LN18@detorus_st@3:

; 1904 :   
; 1905 :   // Generate all transforms
; 1906 :   FOR_ALL_VERTICES(v_id)

	mov	eax, DWORD PTR _web+12
	mov	edx, DWORD PTR [eax+edx*4]
	mov	edi, DWORD PTR [edx]
	mov	ebx, edi
	shr	ebx, 28					; 0000001cH
	and	ebx, 1
	jne	$LL77@detorus_st@3
$LN17@detorus_st@3:

; 1917 :     } 
; 1918 :   }
; 1919 :   translate = detorus_unify_vertices();

	call	_detorus_unify_vertices

; 1920 :   
; 1921 :   FOR_ALL_EDGES(e_id)

	mov	esi, DWORD PTR _web+160
	mov	edi, esi
	shr	edi, 28					; 0000001cH
	and	edi, 1
	mov	DWORD PTR _translate$[ebp], eax
	mov	DWORD PTR _e_id$[ebp], esi
	je	$LN9@detorus_st@3
	mov	ecx, DWORD PTR _dt_ecount
	npad	11
$LL11@detorus_st@3:
	mov	eax, DWORD PTR _web+124
	and	esi, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	xor	ebx, ebx
	or	eax, ebx
	mov	DWORD PTR tv639[ebp], esi
	je	$LN10@detorus_st@3

; 1922 :   { int ord = loc_ordinal(e_id);

	test	edi, edi
	je	SHORT $LN40@detorus_st@3
	mov	edi, esi
	jmp	SHORT $LN41@detorus_st@3
$LN40@detorus_st@3:
	or	edi, -1
$LN41@detorus_st@3:

; 1923 :     vertex_id *v = get_edge_vertices(e_id);

	mov	eax, DWORD PTR _web+216
	mov	ebx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ebx+304]
	add	eax, edx

; 1924 :     int ctrl_pts = web.skel[EDGE].ctrlpts;

	mov	edx, DWORD PTR _web+120
	mov	DWORD PTR _v$90519[ebp], eax

; 1925 :     int maxi;
; 1926 : 
; 1927 :     estarts[ord] = dt_ecount;

	mov	eax, DWORD PTR _estarts$[ebp]
	mov	DWORD PTR [eax+edi*4], ecx

; 1928 : 
; 1929 :     maxi = get_fattr(e_id) & NO_TRANSFORM ? 1 : dt_transform_count;

	mov	ecx, DWORD PTR _web+236
	mov	eax, DWORD PTR [ecx+esi*4]
	mov	ecx, DWORD PTR [eax+12]
	xor	eax, eax
	and	ecx, 1
	or	eax, ecx
	mov	eax, 1
	jne	SHORT $LN78@detorus_st@3
	mov	eax, DWORD PTR _dt_transform_count
$LN78@detorus_st@3:

; 1930 :     for ( i = 0 ; i < maxi ; i++ )

	mov	ecx, DWORD PTR _dt_ecount
	xor	edi, edi
	mov	DWORD PTR _maxi$90525[ebp], eax
	test	eax, eax
	jle	SHORT $LN10@detorus_st@3
	npad	3
$LL6@detorus_st@3:

; 1931 :     { dt_elist[dt_ecount].e_id = e_id;

	mov	ebx, DWORD PTR _e_id$[ebp]
	lea	eax, DWORD PTR [ecx+ecx*2]
	mov	ecx, DWORD PTR _dt_elist
	mov	DWORD PTR [ecx+eax*4], ebx

; 1932 :       for ( j = 0 ; j < ctrl_pts ; j++ )

	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN74@detorus_st@3
	npad	11
$LL73@detorus_st@3:

; 1933 :         dt_elist[dt_ecount].v[j] = translate[vstarts[loc_ordinal(v[j])] + i];

	mov	ecx, DWORD PTR _v$90519[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN44@detorus_st@3
	and	ecx, 134217727				; 07ffffffH
	jmp	SHORT $LN45@detorus_st@3
$LN44@detorus_st@3:
	or	ecx, -1
$LN45@detorus_st@3:
	mov	esi, DWORD PTR _vstarts$[ebp]
	mov	esi, DWORD PTR [esi+ecx*4]
	mov	ecx, DWORD PTR _dt_ecount
	mov	ebx, DWORD PTR _dt_elist
	lea	ecx, DWORD PTR [ecx+ecx*2]
	mov	ecx, DWORD PTR [ebx+ecx*4+8]
	mov	ebx, DWORD PTR _translate$[ebp]
	add	esi, edi
	mov	esi, DWORD PTR [ebx+esi*4]
	mov	DWORD PTR [ecx+eax*4], esi
	inc	eax
	cmp	eax, edx
	jl	SHORT $LL73@detorus_st@3

; 1932 :       for ( j = 0 ; j < ctrl_pts ; j++ )

	mov	esi, DWORD PTR tv639[ebp]
$LN74@detorus_st@3:

; 1934 :       dt_ecount++;

	mov	ecx, DWORD PTR _dt_ecount
	inc	ecx
	inc	edi
	mov	DWORD PTR _dt_ecount, ecx
	cmp	edi, DWORD PTR _maxi$90525[ebp]
	jl	SHORT $LL6@detorus_st@3
$LN10@detorus_st@3:

; 1920 :   
; 1921 :   FOR_ALL_EDGES(e_id)

	mov	edx, DWORD PTR _web+124
	mov	eax, DWORD PTR [edx+esi*4]
	mov	esi, DWORD PTR [eax]
	mov	edi, esi
	shr	edi, 28					; 0000001cH
	and	edi, 1
	mov	DWORD PTR _e_id$[ebp], esi
	jne	$LL11@detorus_st@3
$LN9@detorus_st@3:

; 1935 :     } 
; 1936 :   }
; 1937 :   
; 1938 :   etranslate = detorus_unify_edges();

	call	_detorus_unify_edges
	mov	esi, eax

; 1939 :  
; 1940 :   
; 1941 :   detorus_string_cleanup();

	call	_detorus_string_cleanup

; 1942 : 
; 1943 :   temp_free((char*)dt_vlist);

	mov	ecx, DWORD PTR _dt_vlist
	push	ecx
	call	_temp_free

; 1944 :   temp_free((char*)dt_x_space);

	mov	edx, DWORD PTR _dt_x_space
	push	edx
	call	_temp_free

; 1945 :   temp_free((char*)dt_elist);

	mov	eax, DWORD PTR _dt_elist
	push	eax
	call	_temp_free

; 1946 :   temp_free((char*)dt_v_space);

	mov	ecx, DWORD PTR _dt_v_space
	push	ecx
	call	_temp_free

; 1947 :   temp_free((char*)translate);

	mov	edx, DWORD PTR _translate$[ebp]
	push	edx
	call	_temp_free

; 1948 :   temp_free((char*)etranslate);

	push	esi
	call	_temp_free
	add	esp, 24					; 00000018H
	pop	edi
	pop	esi
	pop	ebx

; 1949 : 
; 1950 :  } // end detorus_string_generate()

	mov	esp, ebp
	pop	ebp
	ret	0
_detorus_string_generate ENDP
_TEXT	ENDS
PUBLIC	??_C@_06IPPEMAIB@2?$CK?$CI?$CFs?$CJ?$AA@	; `string'
PUBLIC	__real@4000000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	_tordup
EXTRN	_calc_content:PROC
EXTRN	_set_f_phase_density:PROC
EXTRN	_set_e_phase_density:PROC
EXTRN	_phase_flag:DWORD
EXTRN	_calc_periods:PROC
EXTRN	_exparse:PROC
EXTRN	_cmdptr:DWORD
EXTRN	_msg:DWORD
EXTRN	_print_express:PROC
EXTRN	_set_body_fixvol:PROC
EXTRN	_set_body_volume:PROC
EXTRN	_generate_all:PROC
EXTRN	_NULLFACETEDGE:DWORD
EXTRN	_dup_body:PROC
EXTRN	_NULLBODY:DWORD
EXTRN	_floor:PROC
;	COMDAT ??_C@_06IPPEMAIB@2?$CK?$CI?$CFs?$CJ?$AA@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_06IPPEMAIB@2?$CK?$CI?$CFs?$CJ?$AA@ DB '2*(%s)', 00H ; `string'
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\tordup.c
CONST	ENDS
;	COMDAT _tordup
_TEXT	SEGMENT
_adjust$ = -60						; size = 8
_sentinel$89288 = -56					; size = 4
_sentinel$89260 = -56					; size = 4
_mask$89214 = -56					; size = 4
_new_fe$ = -56						; size = 4
_calcvol$89353 = -52					; size = 8
tv3315 = -48						; size = 4
tv3355 = -44						; size = 4
tv3168 = -44						; size = 4
_e_id$ = -44						; size = 4
tv3107 = -40						; size = 4
_new_f$ = -40						; size = 4
_b_id$ = -40						; size = 4
_f_id$ = -36						; size = 4
tv3252 = -32						; size = 4
_newflag$89186 = -32					; size = 4
_h$89119 = -32						; size = 4
_sign$89198 = -28					; size = 4
_t$89120 = -28						; size = 4
_new_next_fe$89189 = -24				; size = 4
_body_fe_list$ = -20					; size = 4
_fe$92058 = -16						; size = 4
_next_fe$89190 = -12					; size = 4
_changeflag$89250 = -8					; size = 4
_i$ = -8						; size = 4
_fe_id$ = -4						; size = 4
_m$ = 8							; size = 4
_tordup	PROC						; COMDAT

; 41   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH

; 42   :   vertex_id v_id;
; 43   :   edge_id    e_id;
; 44   :   facet_id  f_id;
; 45   :   body_id    b_id;
; 46   :   facetedge_id fe_id;
; 47   :   facetedge_id new_fe;
; 48   :   facet_id new_f;
; 49   :   body_id new_b;
; 50   :   edge_id new_e;
; 51   :   int i,j;
; 52   :   REAL *x;
; 53   :   REAL adjust;
; 54   :   facetedge_id *body_fe_list;
; 55   : 
; 56   :   v_count = web.skel[VERTEX].max_ord+1;

	mov	eax, DWORD PTR _web+68

; 57   :   ecount = web.skel[EDGE].max_ord+1;

	mov	ecx, DWORD PTR _web+180

; 58   :   fcount = web.skel[FACET].max_ord+1;

	mov	edx, DWORD PTR _web+292
	push	ebx
	push	esi
	push	edi
	inc	eax
	inc	ecx
	inc	edx

; 59   :   bcount = web.skel[BODY].max_ord+1;
; 60   :   fecount = web.skel[FACETEDGE].max_ord+1;
; 61   : 
; 62   :   /* allocate room for lists of old and new elements */
; 63   :   vlist = (element_id *)temp_calloc(sizeof(element_id),2*v_count);

	push	63					; 0000003fH
	mov	DWORD PTR _v_count, eax
	mov	DWORD PTR _ecount, ecx
	mov	ecx, DWORD PTR _web+404
	mov	DWORD PTR _fcount, edx
	mov	edx, DWORD PTR _web+516
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	add	eax, eax
	push	eax
	inc	ecx
	inc	edx
	push	4
	mov	DWORD PTR _bcount, ecx
	mov	DWORD PTR _fecount, edx
	call	_kb_temp_calloc

; 64   :   elist = (element_id *)temp_calloc(sizeof(element_id),2*ecount);

	mov	ecx, DWORD PTR _ecount
	push	64					; 00000040H
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	lea	edx, DWORD PTR [ecx+ecx]
	push	edx
	push	4
	mov	DWORD PTR _vlist, eax
	call	_kb_temp_calloc
	mov	DWORD PTR _elist, eax

; 65   :   flist = (element_id *)temp_calloc(sizeof(element_id),2*fcount);

	mov	eax, DWORD PTR _fcount
	push	65					; 00000041H
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	lea	ecx, DWORD PTR [eax+eax]
	push	ecx
	push	4
	call	_kb_temp_calloc

; 66   :   blist = (element_id *)temp_calloc(sizeof(element_id),2*bcount);

	mov	edx, DWORD PTR _bcount
	push	66					; 00000042H
	mov	DWORD PTR _flist, eax
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	lea	eax, DWORD PTR [edx+edx]
	push	eax
	push	4
	call	_kb_temp_calloc

; 67   :   felist = (element_id *)temp_calloc(sizeof(element_id),2*fecount);

	mov	ecx, DWORD PTR _fecount
	add	esp, 64					; 00000040H
	push	67					; 00000043H
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	lea	edx, DWORD PTR [ecx+ecx]
	push	edx
	push	4
	mov	DWORD PTR _blist, eax
	call	_kb_temp_calloc
	mov	DWORD PTR _felist, eax

; 68   :   body_fe_list = (element_id *)temp_calloc(sizeof(element_id),2*bcount);

	mov	eax, DWORD PTR _bcount
	push	68					; 00000044H
	push	OFFSET ??_C@_08DEAPKDLL@TORDUP?4C?$AA@
	lea	ecx, DWORD PTR [eax+eax]
	push	ecx
	push	4
	call	_kb_temp_calloc

; 69   :   
; 70   :   /* record old body data */
; 71   :   FOR_ALL_BODIES(b_id)

	mov	edx, DWORD PTR _web+384
	mov	DWORD PTR _body_fe_list$[ebp], eax
	mov	eax, edx
	shr	eax, 28					; 0000001cH
	add	esp, 32					; 00000020H
	and	eax, 1
	je	$LN449@tordup
	mov	ebx, DWORD PTR _web+348
	npad	5
$LL152@tordup:
	mov	esi, edx
	and	esi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+esi*4]
	mov	ecx, DWORD PTR [ecx+8]
	and	ecx, 1
	xor	edi, edi
	or	ecx, edi
	je	SHORT $LN151@tordup

; 72   :   { blist[loc_ordinal(b_id)] = b_id;

	test	eax, eax
	je	SHORT $LN155@tordup
	mov	ecx, esi
	jmp	SHORT $LN156@tordup
$LN155@tordup:
	or	ecx, -1
$LN156@tordup:
	mov	edi, DWORD PTR _blist
	mov	DWORD PTR [edi+ecx*4], edx

; 73   :     body_fe_list[loc_ordinal(b_id)] = get_body_fe(b_id);

	test	eax, eax
	je	SHORT $LN157@tordup
	mov	eax, DWORD PTR _web+348
	mov	ecx, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR [ecx+400]
	mov	edx, esi
	jmp	SHORT $LN174@tordup
$LN157@tordup:
	or	edx, -1
	xor	eax, eax
$LN174@tordup:
	test	eax, 268435456				; 10000000H
	je	SHORT $LN175@tordup
	mov	edi, DWORD PTR _web+236
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	ecx, DWORD PTR [ecx+28]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN177@tordup
	xor	ecx, 134217728				; 08000000H
$LN177@tordup:
	mov	eax, ecx
	jmp	SHORT $LN176@tordup
$LN175@tordup:
	xor	eax, eax
$LN176@tordup:
	mov	ecx, DWORD PTR _body_fe_list$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
	mov	ebx, DWORD PTR _web+348
$LN151@tordup:

; 69   :   
; 70   :   /* record old body data */
; 71   :   FOR_ALL_BODIES(b_id)

	mov	edx, DWORD PTR [ebx+esi*4]
	mov	edx, DWORD PTR [edx]
	mov	eax, edx
	shr	eax, 28					; 0000001cH
	and	eax, 1
	jne	$LL152@tordup
$LN449@tordup:

; 74   :   }
; 75   : 
; 76   :   /* relocate new vertices */
; 77   :   FOR_ALL_VERTICES(v_id)

	mov	esi, DWORD PTR _web+48
	mov	edx, esi
	shr	edx, 28					; 0000001cH
	and	edx, 1
	je	SHORT $LN145@tordup
	mov	ebx, DWORD PTR _web+12
	npad	7
$LL147@tordup:
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+ecx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	je	SHORT $LN146@tordup

; 78   :   { /* list old vertices */
; 79   :     i = loc_ordinal(v_id);

	test	edx, edx
	je	SHORT $LN159@tordup
	mov	eax, ecx
	jmp	SHORT $LN160@tordup
$LN159@tordup:
	or	eax, -1
$LN160@tordup:

; 80   :     vlist[i] = v_id;

	mov	edx, DWORD PTR _vlist
	mov	DWORD PTR [edx+eax*4], esi
	mov	ebx, DWORD PTR _web+12
$LN146@tordup:

; 74   :   }
; 75   : 
; 76   :   /* relocate new vertices */
; 77   :   FOR_ALL_VERTICES(v_id)

	mov	eax, DWORD PTR [ebx+ecx*4]
	mov	esi, DWORD PTR [eax]
	mov	edx, esi
	shr	edx, 28					; 0000001cH
	and	edx, 1
	jne	SHORT $LL147@tordup
$LN145@tordup:

; 81   :   }
; 82   :   for ( i = 0 ; i < v_count ; i++ )

	mov	edx, DWORD PTR _v_count
	mov	edi, DWORD PTR _m$[ebp]
	xor	esi, esi
	test	edx, edx
	jle	SHORT $LN450@tordup
	npad	1
$LL142@tordup:

; 83   :   { /* create corresponding new vertices */
; 84   :     v_id = vlist[i];

	mov	ecx, DWORD PTR _vlist
	mov	eax, DWORD PTR [ecx+esi*4]

; 85   :     if ( !valid_id(v_id) ) continue;

	test	eax, 268435456				; 10000000H
	je	SHORT $LN141@tordup

; 86   :     vlist[i+v_count] = dup_vertex(v_id);

	push	eax
	call	_dup_vertex
	mov	edx, DWORD PTR _v_count
	mov	ebx, DWORD PTR _vlist
	lea	ecx, DWORD PTR [edx+esi]
	mov	DWORD PTR [ebx+ecx*4], eax

; 87   :     x = get_coord(vlist[i+v_count]);

	mov	ecx, DWORD PTR _web+12
	mov	ebx, DWORD PTR _dymem
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+104
	add	ecx, DWORD PTR [eax+ebx+64]

; 88   :     for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	add	esp, 4
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN141@tordup
$LL138@tordup:

; 89   :       x[j] += web.torus_period[m][j];

	mov	ebx, DWORD PTR _web+1608
	mov	ebx, DWORD PTR [ebx+edi*4]
	fld	QWORD PTR [ebx+eax*8]
	inc	eax
	fadd	QWORD PTR [ecx+eax*8-8]
	fstp	QWORD PTR [ecx+eax*8-8]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LL138@tordup
$LN141@tordup:

; 81   :   }
; 82   :   for ( i = 0 ; i < v_count ; i++ )

	inc	esi
	cmp	esi, edx
	jl	SHORT $LL142@tordup
$LN450@tordup:

; 90   :   }  
; 91   : 
; 92   :   /* fix edge endpoints */
; 93   :   FOR_ALL_EDGES(e_id)

	mov	esi, DWORD PTR _web+160
	mov	edx, esi
	shr	edx, 28					; 0000001cH
	and	edx, 1
	je	SHORT $LN451@tordup
	mov	ebx, DWORD PTR _web+124
	npad	6
$LL135@tordup:
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+ecx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	je	SHORT $LN134@tordup

; 94   :   { /* list old edges */
; 95   :     i = loc_ordinal(e_id);

	test	edx, edx
	je	SHORT $LN161@tordup
	mov	eax, ecx
	jmp	SHORT $LN162@tordup
$LN161@tordup:
	or	eax, -1
$LN162@tordup:

; 96   :     elist[i] = e_id;

	mov	edx, DWORD PTR _elist
	mov	DWORD PTR [edx+eax*4], esi
	mov	ebx, DWORD PTR _web+124
$LN134@tordup:

; 90   :   }  
; 91   : 
; 92   :   /* fix edge endpoints */
; 93   :   FOR_ALL_EDGES(e_id)

	mov	eax, DWORD PTR [ebx+ecx*4]
	mov	esi, DWORD PTR [eax]
	mov	edx, esi
	shr	edx, 28					; 0000001cH
	and	edx, 1
	jne	SHORT $LL135@tordup
$LN451@tordup:

; 97   :   }
; 98   :   for ( i = 0 ; i < ecount ; i++ )

	xor	esi, esi
	mov	DWORD PTR _i$[ebp], esi
	cmp	DWORD PTR _ecount, esi
	jle	$LN128@tordup
$LL130@tordup:

; 99   :   { /* create corresponding new edges */
; 100  :     vertex_id h,t;
; 101  :     WRAPTYPE wrap;
; 102  : 
; 103  :     e_id = elist[i];

	mov	ecx, DWORD PTR _elist
	mov	edi, DWORD PTR [ecx+esi*4]
	mov	DWORD PTR _e_id$[ebp], edi

; 104  :     if ( !valid_id(e_id) ) continue;

	test	edi, 268435456				; 10000000H
	je	$LN129@tordup

; 105  :     new_e = dup_edge(e_id);

	push	edi
	call	_dup_edge

; 106  :     elist[i+ecount] = new_e;

	mov	edx, DWORD PTR _ecount
	mov	ebx, eax
	mov	eax, DWORD PTR _elist
	add	edx, esi
	mov	DWORD PTR [eax+edx*4], ebx

; 107  :     h = get_edge_headv(e_id);

	mov	ecx, DWORD PTR _web+216
	mov	eax, edi
	shr	eax, 27					; 0000001bH
	add	esp, 4
	and	eax, 1
	mov	DWORD PTR tv3107[ebp], eax
	mov	esi, edi
	je	SHORT $LN182@tordup
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR [ecx+edx+304]
	mov	ecx, DWORD PTR _web+124
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	ecx, DWORD PTR [ecx+esi]
	mov	edx, DWORD PTR [ecx+eax]
	add	ecx, eax
	jmp	SHORT $LN517@tordup
$LN182@tordup:
	mov	eax, DWORD PTR _dymem
	mov	edx, DWORD PTR _web+124
	mov	eax, DWORD PTR [ecx+eax+304]
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	ecx, DWORD PTR [edx+esi]
	mov	edx, DWORD PTR _web+636
	add	ecx, eax
	mov	edx, DWORD PTR [ecx+edx*4]
$LN517@tordup:

; 108  :     t = get_edge_tailv(e_id);

	cmp	DWORD PTR tv3107[ebp], 0
	mov	DWORD PTR _h$89119[ebp], edx
	je	SHORT $LN186@tordup
	mov	edx, DWORD PTR _web+636
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _t$89120[ebp], ecx
	jmp	SHORT $LN185@tordup
$LN186@tordup:
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _t$89120[ebp], edx
$LN185@tordup:

; 109  :     if ( web.modeltype == QUADRATIC )

	cmp	DWORD PTR _web+628, 2
	jne	$LN189@tordup

; 110  :     { free_element(get_edge_midv(new_e));

	mov	ecx, DWORD PTR _web+124
	mov	edi, ebx
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	edx, DWORD PTR [ecx+edi]
	mov	eax, DWORD PTR [edx+eax+8]
	push	eax
	call	_free_element

; 111  :       set_edge_midv(new_e,vlist[v_count+loc_ordinal(get_edge_midv(e_id))]);

	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+216
	mov	eax, DWORD PTR _web+124
	mov	ecx, DWORD PTR [ecx+edx+304]
	mov	edx, DWORD PTR [eax+esi]
	mov	eax, DWORD PTR [edx+ecx+8]
	add	esp, 4
	test	eax, 268435456				; 10000000H
	je	SHORT $LN163@tordup
	and	eax, 134217727				; 07ffffffH
	jmp	SHORT $LN164@tordup
$LN163@tordup:
	or	eax, -1
$LN164@tordup:
	add	eax, DWORD PTR _v_count
	mov	edx, DWORD PTR _vlist
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+124
	mov	edx, DWORD PTR [edx+edi]
	mov	DWORD PTR [edx+ecx+8], eax
	mov	edx, DWORD PTR _web+12
	mov	edi, DWORD PTR _e_id$[ebp]
	mov	ecx, eax
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	edx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [edx+28], ebx
	mov	eax, DWORD PTR _web[eax+12]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	edx, DWORD PTR [ecx+12]
	or	DWORD PTR [ecx+8], 131072		; 00020000H
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN189@tordup:

; 112  :     }
; 113  :     wrap = get_edge_wrap(e_id);

	cmp	DWORD PTR tv3107[ebp], 0
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	edx, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR _web+124
	mov	ecx, DWORD PTR [eax+esi]
	mov	eax, DWORD PTR [edx+ecx]
	je	SHORT $LN195@tordup
	push	eax
	call	DWORD PTR _sym_inverse
	add	esp, 4
$LN195@tordup:
	mov	esi, eax

; 114  :     if ( (wrap >> (TWRAPBITS*m)) & WRAPMASK )

	mov	eax, DWORD PTR _m$[ebp]
	lea	ecx, DWORD PTR [eax+eax*2]
	add	ecx, ecx
	mov	edx, esi
	sar	edx, cl
	test	dl, 31					; 0000001fH
	je	SHORT $LN125@tordup

; 115  :     { remove_vertex_edge(h,inverse_id(e_id));

	mov	esi, DWORD PTR _h$89119[ebp]
	mov	eax, edi
	xor	eax, 134217728				; 08000000H
	push	eax
	push	esi
	call	_remove_vertex_edge

; 116  :       set_edge_headv(e_id,upgrade(h));

	push	esi
	call	_upgrade
	push	eax
	push	edi
	call	_set_edge_headv

; 117  :       set_edge_headv(new_e,h);

	push	esi
	push	ebx
	call	_set_edge_headv

; 118  :       set_edge_tailv(new_e,upgrade(t));

	mov	ecx, DWORD PTR _t$89120[ebp]
	push	ecx
	call	_upgrade
	push	eax
	push	ebx
	call	_set_edge_tailv
	add	esp, 40					; 00000028H

; 119  :     }
; 120  :     else

	jmp	SHORT $LN518@tordup
$LN125@tordup:

; 121  :     { set_edge_headv(new_e,upgrade(h));

	mov	edx, DWORD PTR _h$89119[ebp]
	push	edx
	call	_upgrade
	push	eax
	push	ebx
	call	_set_edge_headv

; 122  :       set_edge_tailv(new_e,upgrade(t));

	mov	eax, DWORD PTR _t$89120[ebp]
	push	eax
	call	_upgrade
	push	eax
	push	ebx
	call	_set_edge_tailv
	add	esp, 24					; 00000018H
$LN518@tordup:
	mov	esi, DWORD PTR _i$[ebp]
$LN129@tordup:

; 97   :   }
; 98   :   for ( i = 0 ; i < ecount ; i++ )

	inc	esi
	mov	DWORD PTR _i$[ebp], esi
	cmp	esi, DWORD PTR _ecount
	jl	$LL130@tordup
$LN128@tordup:

; 123  :     }
; 124  :   }
; 125  :         
; 126  :   /* new facets */
; 127  :   FOR_ALL_FACETS(f_id)

	mov	esi, DWORD PTR _web+272
	mov	edx, esi
	shr	edx, 28					; 0000001cH
	and	edx, 1
	je	SHORT $LN452@tordup
	mov	ebx, DWORD PTR _web+236
	npad	2
$LL123@tordup:
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+ecx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	je	SHORT $LN122@tordup

; 128  :   {
; 129  :     i = loc_ordinal(f_id);

	test	edx, edx
	je	SHORT $LN165@tordup
	mov	eax, ecx
	jmp	SHORT $LN166@tordup
$LN165@tordup:
	or	eax, -1
$LN166@tordup:

; 130  :     flist[i]= f_id;

	mov	edx, DWORD PTR _flist
	mov	DWORD PTR [edx+eax*4], esi
	mov	ebx, DWORD PTR _web+236
$LN122@tordup:

; 123  :     }
; 124  :   }
; 125  :         
; 126  :   /* new facets */
; 127  :   FOR_ALL_FACETS(f_id)

	mov	eax, DWORD PTR [ebx+ecx*4]
	mov	esi, DWORD PTR [eax]
	mov	edx, esi
	shr	edx, 28					; 0000001cH
	and	edx, 1
	jne	SHORT $LL123@tordup
$LN452@tordup:

; 131  :   }
; 132  :   for ( i = 0 ; i < fcount ; i++ )

	mov	ecx, DWORD PTR _fcount
	xor	esi, esi
	test	ecx, ecx
	jle	SHORT $LN482@tordup
	mov	edx, DWORD PTR _flist
$LL118@tordup:

; 133  :   { /* create corresponding new facets */
; 134  : 
; 135  :     f_id = flist[i];

	mov	eax, DWORD PTR [edx+esi*4]

; 136  :     if ( !valid_id(f_id) ) continue;

	test	eax, 268435456				; 10000000H
	je	SHORT $LN117@tordup

; 137  :     new_f = dup_facet(f_id);

	push	eax
	call	_dup_facet

; 138  :     flist[i+fcount] = new_f;

	mov	ecx, DWORD PTR _fcount
	mov	edx, DWORD PTR _flist
	lea	edi, DWORD PTR [ecx+esi]
	add	esp, 4
	mov	DWORD PTR [edx+edi*4], eax
$LN117@tordup:

; 131  :   }
; 132  :   for ( i = 0 ; i < fcount ; i++ )

	inc	esi
	cmp	esi, ecx
	jl	SHORT $LL118@tordup
$LN482@tordup:

; 139  :      
; 140  :   }
; 141  : 
; 142  :   /* new facet-edges */
; 143  :   FOR_ALL_FACETEDGES(fe_id)

	mov	ecx, DWORD PTR _web+496
	mov	edi, DWORD PTR _web+460
	mov	esi, ecx
	shr	esi, 28					; 0000001cH
	and	esi, 1
	mov	DWORD PTR _fe_id$[ebp], ecx
	je	SHORT $LN112@tordup
$LL114@tordup:
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+edx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	ebx, ebx
	or	eax, ebx
	je	SHORT $LN113@tordup

; 144  :   {
; 145  :     i = loc_ordinal(fe_id);

	test	esi, esi
	jne	SHORT $LN168@tordup
	or	edx, -1
$LN168@tordup:

; 146  :     felist[i] = fe_id;

	mov	eax, DWORD PTR _felist
	mov	DWORD PTR [eax+edx*4], ecx
	mov	ecx, DWORD PTR _fe_id$[ebp]
	mov	edi, DWORD PTR _web+460
$LN113@tordup:

; 139  :      
; 140  :   }
; 141  : 
; 142  :   /* new facet-edges */
; 143  :   FOR_ALL_FACETEDGES(fe_id)

	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ecx*4]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, ecx
	shr	esi, 28					; 0000001cH
	and	esi, 1
	mov	DWORD PTR _fe_id$[ebp], ecx
	jne	SHORT $LL114@tordup
$LN112@tordup:

; 147  :   }
; 148  :   for ( i = 0 ; i < fecount ; i++ )

	mov	ecx, DWORD PTR _fecount
	xor	ebx, ebx
	test	ecx, ecx
	jle	$LN466@tordup
	npad	4
$LL483@tordup:

; 149  :   { /* create corresponding new facet-edges */
; 150  : 
; 151  :     fe_id = felist[i];

	mov	edx, DWORD PTR _felist
	mov	eax, DWORD PTR [edx+ebx*4]
	mov	DWORD PTR _fe_id$[ebp], eax

; 152  :     if ( !valid_id(fe_id) ) continue;

	test	eax, 268435456				; 10000000H
	je	SHORT $LN108@tordup

; 153  :     f_id = get_fe_facet(fe_id);

	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [edi+ecx*4]
	mov	esi, DWORD PTR [edi+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN197@tordup
	xor	esi, 134217728				; 08000000H
$LN197@tordup:

; 154  :     e_id = get_fe_edge(fe_id);

	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edi+20]

; 155  :     new_fe = new_facetedge(upgrade(f_id),upgrade(e_id));

	push	eax
	call	_upgrade
	add	esp, 4
	push	eax
	push	esi
	call	_upgrade
	add	esp, 4
	push	eax
	call	_new_facetedge

; 156  :     felist[i+fecount] = new_fe;

	mov	ecx, DWORD PTR _fecount
	mov	esi, DWORD PTR _felist
	lea	edx, DWORD PTR [ecx+ebx]
	mov	DWORD PTR [esi+edx*4], eax
	mov	edi, DWORD PTR _web+460
	add	esp, 8
$LN108@tordup:

; 147  :   }
; 148  :   for ( i = 0 ; i < fecount ; i++ )

	inc	ebx
	cmp	ebx, ecx
	jl	SHORT $LL483@tordup
$LN466@tordup:

; 157  :   }
; 158  : 
; 159  :   for ( i = 0 ; i < fecount ; i++ )

	xor	eax, eax
	mov	DWORD PTR _i$[ebp], eax
	test	ecx, ecx
	jle	$LN479@tordup
	npad	4
$LL469@tordup:

; 160  :   { /* upgrade links */
; 161  : 
; 162  :     fe_id = felist[i];

	mov	ecx, DWORD PTR _felist
	mov	esi, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _fe_id$[ebp], esi

; 163  :     if ( !valid_id(fe_id) ) continue;  /* only want old ones */

	test	esi, 268435456				; 10000000H
	je	$LN104@tordup

; 164  :     new_fe = upgrade(fe_id);

	push	esi
	call	_upgrade
	add	esp, 4
	mov	ebx, eax

; 165  :     set_next_edge(new_fe,upgrade(get_next_edge(fe_id)));

	test	esi, 134217728				; 08000000H
	je	SHORT $LN204@tordup
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+edx*4]
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN203@tordup
$LN204@tordup:
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+ecx*4]
	mov	eax, DWORD PTR [edx+32]
$LN203@tordup:
	push	eax
	call	_upgrade
	mov	ecx, ebx
	shr	ecx, 28					; 0000001cH
	add	esp, 4
	and	ecx, 1
	mov	DWORD PTR tv3252[ebp], ecx
	je	SHORT $LN470@tordup
	mov	ecx, ebx
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN208@tordup
	xor	eax, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR [edx+28], eax
	jmp	SHORT $LN519@tordup
$LN208@tordup:
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR [edx+32], eax
$LN519@tordup:
	mov	edi, DWORD PTR _web+460
	mov	esi, DWORD PTR _fe_id$[ebp]
$LN470@tordup:

; 166  :     set_prev_edge(new_fe,upgrade(get_prev_edge(fe_id)));

	test	esi, 134217728				; 08000000H
	je	SHORT $LN213@tordup
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [ecx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN212@tordup
$LN213@tordup:
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+edx*4]
	mov	eax, DWORD PTR [eax+28]
$LN212@tordup:
	push	eax
	call	_upgrade
	add	esp, 4
	cmp	DWORD PTR tv3252[ebp], 0
	je	SHORT $LN471@tordup
	mov	ecx, ebx
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN217@tordup
	xor	eax, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR [edx+32], eax
	jmp	SHORT $LN216@tordup
$LN217@tordup:
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR [edx+28], eax
$LN216@tordup:
	mov	eax, DWORD PTR _global_timestamp
	mov	esi, DWORD PTR _fe_id$[ebp]
	mov	edi, DWORD PTR _web+460
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN471@tordup:

; 167  :     set_next_facet(new_fe,upgrade(get_next_facet(fe_id)));

	test	esi, 134217728				; 08000000H
	je	SHORT $LN222@tordup
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [ecx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN221@tordup
$LN222@tordup:
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+edx*4]
	mov	eax, DWORD PTR [eax+40]
$LN221@tordup:
	push	eax
	call	_upgrade
	add	esp, 4
	cmp	DWORD PTR tv3252[ebp], 0
	je	SHORT $LN472@tordup
	mov	ecx, ebx
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN226@tordup
	xor	eax, 134217728				; 08000000H
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR [edx+36], eax
	jmp	SHORT $LN520@tordup
$LN226@tordup:
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR [edx+40], eax
$LN520@tordup:
	mov	edi, DWORD PTR _web+460
	mov	esi, DWORD PTR _fe_id$[ebp]
$LN472@tordup:

; 168  :     set_prev_facet(new_fe,upgrade(get_prev_facet(fe_id)));

	test	esi, 134217728				; 08000000H
	je	SHORT $LN231@tordup
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+esi*4]
	mov	eax, DWORD PTR [eax+40]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN230@tordup
$LN231@tordup:
	and	esi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+esi*4]
	mov	eax, DWORD PTR [ecx+36]
$LN230@tordup:
	push	eax
	call	_upgrade
	add	esp, 4
	cmp	DWORD PTR tv3252[ebp], 0
	je	SHORT $LN104@tordup
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN235@tordup
	xor	eax, 134217728				; 08000000H
	and	ebx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+ebx*4]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN234@tordup
$LN235@tordup:
	and	ebx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+ebx*4]
	mov	DWORD PTR [ecx+36], eax
$LN234@tordup:
	mov	eax, DWORD PTR _global_timestamp
	mov	edi, DWORD PTR _web+460
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN104@tordup:

; 157  :   }
; 158  : 
; 159  :   for ( i = 0 ; i < fecount ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _fecount
	jl	$LL469@tordup
$LN479@tordup:

; 169  :   }
; 170  :   
; 171  :   /* upgrade edge fe links */
; 172  :   for ( i = 0 ; i < ecount ; i++ )

	xor	ebx, ebx
	cmp	DWORD PTR _ecount, ebx
	jle	$LN473@tordup
$LL487@tordup:

; 173  :   {
; 174  :     e_id = elist[i];

	mov	edx, DWORD PTR _elist
	mov	esi, DWORD PTR [edx+ebx*4]

; 175  :     if ( !valid_id(e_id) ) continue;

	test	esi, 268435456				; 10000000H
	je	$LN100@tordup

; 176  :     fe_id = get_edge_fe(e_id);

	mov	ecx, DWORD PTR _web+124
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	test	eax, eax
	je	SHORT $LN239@tordup
$LN240@tordup:
	mov	eax, DWORD PTR [eax+28]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN239@tordup
	xor	eax, 134217728				; 08000000H
$LN239@tordup:

; 177  :     set_edge_fe(upgrade(e_id),upgrade(fe_id));

	push	eax
	mov	DWORD PTR _fe_id$[ebp], eax
	call	_upgrade
	push	esi
	mov	edi, eax
	call	_upgrade
	add	esp, 8
	test	eax, 134217728				; 08000000H
	je	SHORT $LN243@tordup
	xor	edi, 134217728				; 08000000H
$LN243@tordup:
	mov	edx, DWORD PTR _web+124
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [eax+28], edi
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN100@tordup:

; 169  :   }
; 170  :   
; 171  :   /* upgrade edge fe links */
; 172  :   for ( i = 0 ; i < ecount ; i++ )

	inc	ebx
	cmp	ebx, DWORD PTR _ecount
	jl	$LL487@tordup
$LN473@tordup:

; 178  :   }        
; 179  : 
; 180  :   /* go around old facets, linking in new facetedges if necessary */
; 181  :   for ( i = 0 ; i < fcount ; i++ )

	cmp	DWORD PTR _fcount, 0
	mov	DWORD PTR _i$[ebp], 0
	jle	$LN455@tordup
	npad	4
$LL97@tordup:

; 182  :   {
; 183  :     int newflag;
; 184  :     facetedge_id fe,first_fe,new_next_fe,next_fe;
; 185  : 
; 186  :     f_id = flist[i];

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _flist
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _f_id$[ebp], eax

; 187  :     if ( !valid_id(f_id) ) continue;

	test	eax, 268435456				; 10000000H
	je	$LN96@tordup

; 188  :     new_f = upgrade(f_id);

	mov	esi, eax
	push	esi
	call	_upgrade

; 189  : 
; 190  :     newflag = 0;  /* whether we should be doing new fe's */
; 191  :     fe = first_fe = get_facet_fe(f_id);

	mov	ecx, DWORD PTR _web+236
	mov	DWORD PTR _new_f$[ebp], eax
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	edi, DWORD PTR [edx+28]
	add	esp, 4
	mov	DWORD PTR _newflag$89186[ebp], 0
	mov	DWORD PTR _fe$92058[ebp], edi
	test	esi, 134217728				; 08000000H
	je	SHORT $LN246@tordup
	xor	edi, 134217728				; 08000000H
	mov	DWORD PTR _fe$92058[ebp], edi
$LN246@tordup:

; 192  :     if ( !valid_id(fe) ) continue;

	test	edi, 268435456				; 10000000H
	je	$LN96@tordup

; 193  : 
; 194  :     set_facet_fe(new_f,upgrade(fe));

	mov	eax, DWORD PTR _fe$92058[ebp]
	push	eax
	call	_upgrade
	mov	ecx, DWORD PTR _new_f$[ebp]
	push	eax
	push	ecx
	call	_set_facet_fe
	add	esp, 12					; 0000000cH
$LL92@tordup:

; 195  : 
; 196  :     do
; 197  :     {
; 198  :       int sign;
; 199  : 
; 200  :       new_fe = upgrade(fe);

	push	edi
	call	_upgrade
	add	esp, 4

; 201  :       if ( newflag )

	cmp	DWORD PTR _newflag$89186[ebp], 0
	mov	esi, eax
	mov	DWORD PTR _new_fe$[ebp], esi
	je	SHORT $LN89@tordup

; 202  :       {
; 203  :         set_fe_facet(fe,new_f);

	mov	edx, DWORD PTR _new_f$[ebp]
	push	edx
	push	edi
	call	_set_fe_facet

; 204  :         set_fe_facet(new_fe,f_id);

	mov	eax, DWORD PTR _f_id$[ebp]
	push	eax
	push	esi
	call	_set_fe_facet
	add	esp, 16					; 00000010H
$LN89@tordup:

; 205  :       }
; 206  :       next_fe = get_next_edge(fe);

	mov	eax, edi
	shr	eax, 27					; 0000001bH
	and	eax, 1
	mov	DWORD PTR tv3315[ebp], eax
	mov	esi, edi
	je	SHORT $LN251@tordup
	mov	ecx, DWORD PTR _web+460
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+ecx]
	mov	ebx, DWORD PTR [eax+28]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN521@tordup
$LN251@tordup:
	mov	edx, DWORD PTR _web+460
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+edx]
	mov	ebx, DWORD PTR [eax+32]
$LN521@tordup:

; 207  :       new_next_fe = upgrade(next_fe);

	push	ebx
	mov	DWORD PTR _next_fe$89190[ebp], ebx
	call	_upgrade

; 208  :       sign = 0;
; 209  :       if ( !inverted(get_fe_edge(fe)) )

	mov	ecx, DWORD PTR _web+460
	mov	ecx, DWORD PTR [esi+ecx]
	mov	ecx, DWORD PTR [ecx+20]
	mov	edx, ecx
	xor	edx, edi
	add	esp, 4
	mov	DWORD PTR _new_next_fe$89189[ebp], eax
	mov	DWORD PTR _sign$89198[ebp], 0
	test	edx, 134217728				; 08000000H
	jne	SHORT $LN462@tordup

; 210  :         if ( get_fe_wrap(fe) & (WRAPMASK<<(TWRAPBITS*m)) )

	mov	edx, DWORD PTR _web+124
	mov	ebx, DWORD PTR _dymem
	mov	eax, edi
	and	eax, 134217728				; 08000000H
	xor	eax, ecx
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _web+216
	mov	edx, DWORD PTR [edx+ebx+784]
	mov	ecx, DWORD PTR [ecx+edx]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN260@tordup
	push	ecx
	call	DWORD PTR _sym_inverse
	add	esp, 4
	jmp	SHORT $LN261@tordup
$LN260@tordup:
	mov	eax, ecx
$LN261@tordup:
	mov	ecx, DWORD PTR _m$[ebp]

; 211  :           sign++;

	mov	ebx, DWORD PTR _next_fe$89190[ebp]
	lea	ecx, DWORD PTR [ecx+ecx*2]
	add	ecx, ecx
	mov	edx, 31					; 0000001fH
	shl	edx, cl
	test	edx, eax
	mov	eax, DWORD PTR _new_next_fe$89189[ebp]
	je	SHORT $LN462@tordup
	mov	DWORD PTR _sign$89198[ebp], 1
$LN462@tordup:

; 212  :       if ( inverted(get_fe_edge(next_fe)) )

	mov	edx, DWORD PTR _web+460
	mov	ecx, ebx
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	DWORD PTR tv3355[ebp], ecx
	mov	ecx, DWORD PTR [ecx+edx]
	mov	ecx, DWORD PTR [ecx+20]
	mov	edx, ecx
	xor	edx, ebx
	test	edx, 134217728				; 08000000H
	je	SHORT $LN465@tordup

; 213  :         if ( get_fe_wrap(next_fe) & (WRAPMASK<<(TWRAPBITS*m)) )

	mov	edx, DWORD PTR _web+124
	mov	eax, ebx
	mov	ebx, DWORD PTR _dymem
	and	eax, 134217728				; 08000000H
	xor	eax, ecx
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _web+216
	mov	edx, DWORD PTR [edx+ebx+784]
	mov	ecx, DWORD PTR [ecx+edx]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN268@tordup
	push	ecx
	call	DWORD PTR _sym_inverse
	add	esp, 4
	jmp	SHORT $LN269@tordup
$LN268@tordup:
	mov	eax, ecx
$LN269@tordup:
	mov	ecx, DWORD PTR _m$[ebp]

; 214  :           sign++;

	mov	ebx, DWORD PTR _next_fe$89190[ebp]
	lea	ecx, DWORD PTR [ecx+ecx*2]
	add	ecx, ecx
	mov	edx, 31					; 0000001fH
	shl	edx, cl
	test	edx, eax
	mov	eax, DWORD PTR _new_next_fe$89189[ebp]
	je	SHORT $LN465@tordup
	inc	DWORD PTR _sign$89198[ebp]
$LN465@tordup:

; 215  :       if ( sign == 1 )

	cmp	DWORD PTR _sign$89198[ebp], 1
	jne	$LN84@tordup

; 216  :       {
; 217  :         /* cross-link */
; 218  :         set_next_edge(fe,new_next_fe);

	test	edi, 268435456				; 10000000H
	je	SHORT $LN463@tordup
	cmp	DWORD PTR tv3315[ebp], 0
	je	SHORT $LN271@tordup
	mov	edx, DWORD PTR _web+460
	mov	edx, DWORD PTR [esi+edx]
	mov	ecx, eax
	xor	ecx, 134217728				; 08000000H
	mov	DWORD PTR [edx+28], ecx
	jmp	SHORT $LN463@tordup
$LN271@tordup:
	mov	ecx, DWORD PTR _web+460
	mov	edx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+32], eax
$LN463@tordup:

; 219  :         set_prev_edge(new_next_fe,fe);

	test	eax, 268435456				; 10000000H
	je	SHORT $LN464@tordup
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN276@tordup
	xor	edi, 134217728				; 08000000H
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx+32], edi
	jmp	SHORT $LN275@tordup
$LN276@tordup:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx+28], edi
$LN275@tordup:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN464@tordup:

; 220  :         set_next_edge(new_fe,next_fe);

	mov	eax, DWORD PTR _new_fe$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN488@tordup
	test	eax, 134217728				; 08000000H
	je	SHORT $LN281@tordup
	mov	esi, DWORD PTR _web+460
	mov	ecx, ebx
	xor	ecx, 134217728				; 08000000H
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [edx+28], ecx
	jmp	SHORT $LN488@tordup
$LN281@tordup:
	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+32], ebx
$LN488@tordup:

; 221  :         set_prev_edge(next_fe,new_fe);

	test	ebx, 268435456				; 10000000H
	je	SHORT $LN288@tordup
	test	ebx, 134217728				; 08000000H
	je	SHORT $LN286@tordup
	mov	ecx, DWORD PTR _web+460
	mov	edx, DWORD PTR tv3355[ebp]
	mov	edx, DWORD PTR [edx+ecx]
	xor	eax, 134217728				; 08000000H
	mov	DWORD PTR [edx+32], eax
	jmp	SHORT $LN285@tordup
$LN286@tordup:
	mov	edx, DWORD PTR _web+460
	mov	ecx, DWORD PTR tv3355[ebp]
	mov	ecx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [ecx+28], eax
$LN285@tordup:
	mov	eax, DWORD PTR _global_timestamp
	inc	eax
	mov	DWORD PTR _global_timestamp, eax
	mov	DWORD PTR _top_timestamp, eax
$LN288@tordup:

; 222  :         newflag = !newflag;

	xor	edx, edx
	cmp	DWORD PTR _newflag$89186[ebp], edx
	sete	dl
	mov	DWORD PTR _newflag$89186[ebp], edx
$LN84@tordup:

; 223  :       }
; 224  :       fe = next_fe;

	mov	edi, ebx

; 225  :     }
; 226  :     while ( !equal_id(fe,first_fe) );

	cmp	ebx, DWORD PTR _fe$92058[ebp]
	jne	$LL92@tordup

; 227  : 
; 228  :     if ( newflag )

	cmp	DWORD PTR _newflag$89186[ebp], 0
	je	SHORT $LN96@tordup

; 229  :     { /* really only one facet, so get rid of new one */
; 230  :       fe = first_fe;

	mov	esi, DWORD PTR _fe$92058[ebp]
	mov	edi, DWORD PTR _f_id$[ebp]
	mov	ebx, esi
	npad	7
$LL82@tordup:

; 231  :       do 
; 232  :       {
; 233  :         set_fe_facet(fe,f_id);

	push	edi
	push	esi
	call	_set_fe_facet
	add	esp, 8

; 234  :         fe = get_next_edge(fe);

	test	esi, 134217728				; 08000000H
	je	SHORT $LN291@tordup
	mov	eax, DWORD PTR _web+460
	and	esi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+esi*4]
	mov	esi, DWORD PTR [ecx+28]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN81@tordup
$LN291@tordup:
	mov	edx, DWORD PTR _web+460
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+esi*4]
	mov	esi, DWORD PTR [eax+32]
$LN81@tordup:

; 235  :       }
; 236  :       while ( !equal_id(fe,first_fe) );

	cmp	esi, ebx
	jne	SHORT $LL82@tordup

; 237  :       free_element(new_f);

	mov	ecx, DWORD PTR _new_f$[ebp]
	push	ecx
	call	_free_element
	add	esp, 4
$LN96@tordup:

; 178  :   }        
; 179  : 
; 180  :   /* go around old facets, linking in new facetedges if necessary */
; 181  :   for ( i = 0 ; i < fcount ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _fcount
	jl	$LL97@tordup
$LN455@tordup:

; 238  :     }
; 239  :   }
; 240  : 
; 241  :   /* unwrapping appropriate edges */
; 242  :   for ( i = 0 ; i < ecount ; i++ )

	xor	ebx, ebx
	cmp	DWORD PTR _ecount, ebx
	jle	$LN467@tordup
	mov	eax, DWORD PTR _m$[ebp]
	lea	esi, DWORD PTR [eax+eax*2]
	add	esi, esi
	mov	eax, 31					; 0000001fH
	mov	ecx, esi
	shl	eax, cl
	mov	DWORD PTR tv3168[ebp], esi
	mov	DWORD PTR _mask$89214[ebp], eax
	npad	11
$LL79@tordup:

; 243  :   { WRAPTYPE mask = WRAPMASK<<(TWRAPBITS*m);
; 244  :     WRAPTYPE wrap,oldwrap,newwrap;
; 245  :     int wrapnum;
; 246  :      
; 247  :     if ( !valid_id(elist[i]) ) continue;

	mov	edx, DWORD PTR _elist
	mov	ecx, DWORD PTR [edx+ebx*4]
	test	ecx, 268435456				; 10000000H
	je	$LN78@tordup

; 248  :     wrap = get_edge_wrap(elist[i]); 

	mov	edx, DWORD PTR _web+124
	mov	edi, DWORD PTR _web+216
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _dymem
	mov	edx, DWORD PTR [edi+edx+784]
	mov	eax, DWORD PTR [eax+edx]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN296@tordup
	push	eax
	call	DWORD PTR _sym_inverse
	add	esp, 4
$LN296@tordup:

; 249  :     wrapnum = WRAPNUM((wrap>>(TWRAPBITS*m)) & WRAPMASK);

	mov	ecx, esi
	mov	edx, eax
	sar	edx, cl
	and	edx, 31					; 0000001fH
	lea	esi, DWORD PTR [edx-32]
	cmp	edx, 16					; 00000010H
	jg	SHORT $LN170@tordup
	mov	esi, edx
$LN170@tordup:

; 250  :     oldwrap = (wrap & (~mask))|(((wrapnum>>1)&WRAPMASK)<<(TWRAPBITS*m));

	mov	edx, DWORD PTR _mask$89214[ebp]
	mov	ecx, DWORD PTR tv3168[ebp]
	not	edx
	and	edx, eax
	mov	eax, esi

; 251  :     newwrap = (wrap & (~mask))|((((wrapnum+1)>>1)&WRAPMASK)<<(TWRAPBITS*m));

	inc	esi
	sar	eax, 1
	sar	esi, 1
	and	eax, 31					; 0000001fH
	and	esi, 31					; 0000001fH
	shl	eax, cl
	shl	esi, cl

; 252  :     set_edge_wrap(elist[i],oldwrap);

	mov	ecx, DWORD PTR _elist
	mov	edi, DWORD PTR [ecx+ebx*4]
	or	eax, edx
	or	esi, edx
	test	edi, 134217728				; 08000000H
	je	SHORT $LN300@tordup
	push	eax
	call	DWORD PTR _sym_inverse
	add	esp, 4
$LN300@tordup:
	mov	edx, DWORD PTR _web+124
	and	edi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+edi*4]
	mov	edi, DWORD PTR _dymem
	mov	edx, DWORD PTR _web+216
	mov	edx, DWORD PTR [edx+edi+784]
	mov	DWORD PTR [ecx+edx], eax

; 253  :     set_edge_wrap(elist[i+ecount],newwrap);

	mov	eax, DWORD PTR _ecount
	mov	ecx, DWORD PTR _elist
	add	eax, ebx
	mov	edi, DWORD PTR [ecx+eax*4]
	test	edi, 134217728				; 08000000H
	je	SHORT $LN304@tordup
	push	esi
	call	DWORD PTR _sym_inverse
	add	esp, 4
	jmp	SHORT $LN305@tordup
$LN304@tordup:
	mov	eax, esi
$LN305@tordup:
	mov	edx, DWORD PTR _web+124
	mov	esi, DWORD PTR _dymem
	and	edi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR _web+216
	mov	edx, DWORD PTR [edx+esi+784]
	mov	esi, DWORD PTR tv3168[ebp]
	mov	DWORD PTR [ecx+edx], eax
$LN78@tordup:

; 238  :     }
; 239  :   }
; 240  : 
; 241  :   /* unwrapping appropriate edges */
; 242  :   for ( i = 0 ; i < ecount ; i++ )

	inc	ebx
	cmp	ebx, DWORD PTR _ecount
	jl	$LL79@tordup
$LN467@tordup:

; 254  :   }
; 255  : 
; 256  :   /* create corresponding new facets */
; 257  :   for ( i = 0 ; i < fcount ; i++ )

	xor	ebx, ebx
	cmp	DWORD PTR _fcount, ebx
	jle	SHORT $LN480@tordup
	npad	12
$LL75@tordup:

; 258  :   {
; 259  :     f_id = flist[i];

	mov	eax, DWORD PTR _flist
	mov	esi, DWORD PTR [eax+ebx*4]

; 260  :     if ( !valid_id(f_id) ) continue;

	test	esi, 268435456				; 10000000H
	je	SHORT $LN74@tordup

; 261  :     new_f =  flist[i+fcount];

	mov	ecx, DWORD PTR _fcount
	mov	edx, eax

; 262  :    
; 263  :     /* erase body-facet links; will reset later */
; 264  :     set_facet_body(f_id,NULLBODY);

	mov	eax, DWORD PTR _NULLBODY
	push	eax
	add	ecx, ebx
	mov	edi, DWORD PTR [edx+ecx*4]
	push	esi
	call	_set_facet_body

; 265  :     set_facet_body(inverse_id(f_id), NULLBODY);

	mov	ecx, DWORD PTR _NULLBODY
	push	ecx
	xor	esi, 134217728				; 08000000H
	push	esi
	call	_set_facet_body

; 266  :     set_facet_body(new_f,NULLBODY);

	mov	edx, DWORD PTR _NULLBODY
	push	edx
	push	edi
	call	_set_facet_body

; 267  :     set_facet_body(inverse_id(new_f), NULLBODY);

	mov	eax, DWORD PTR _NULLBODY
	push	eax
	xor	edi, 134217728				; 08000000H
	push	edi
	call	_set_facet_body
	add	esp, 32					; 00000020H
$LN74@tordup:

; 254  :   }
; 255  : 
; 256  :   /* create corresponding new facets */
; 257  :   for ( i = 0 ; i < fcount ; i++ )

	inc	ebx
	cmp	ebx, DWORD PTR _fcount
	jl	SHORT $LL75@tordup
$LN480@tordup:

; 268  :    
; 269  :   }
; 270  :   
; 271  :   /* new bodies */
; 272  :   for ( i = 0 ; i < bcount ; i++ )

	mov	eax, DWORD PTR _bcount
	xor	edi, edi
	test	eax, eax
	jle	$LN468@tordup
	npad	10
$LL71@tordup:

; 273  :   { /* create corresponding new facet-edges */
; 274  : 
; 275  :     b_id = blist[i];

	mov	ecx, DWORD PTR _blist
	mov	esi, DWORD PTR [ecx+edi*4]

; 276  :     if ( !valid_id(b_id) ) continue;

	test	esi, 268435456				; 10000000H
	je	$LN70@tordup

; 277  :     new_b = dup_body(b_id);

	push	esi
	call	_dup_body

; 278  :     blist[i+bcount] = new_b;

	mov	edx, DWORD PTR _bcount

; 279  :     fe_id = body_fe_list[i];

	mov	ecx, DWORD PTR _body_fe_list$[ebp]
	mov	ebx, eax
	mov	eax, DWORD PTR _blist
	add	edx, edi
	mov	DWORD PTR [eax+edx*4], ebx
	mov	eax, DWORD PTR [ecx+edi*4]
	add	esp, 4
	mov	DWORD PTR _fe_id$[ebp], eax

; 280  :     f_id = get_fe_facet(fe_id);

	test	eax, 268435456				; 10000000H
	jne	SHORT $LN307@tordup
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN308@tordup
$LN307@tordup:
	mov	ecx, DWORD PTR _web+460
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [edx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN306@tordup
	xor	ecx, 134217728				; 08000000H
$LN306@tordup:
	mov	eax, ecx
$LN308@tordup:

; 281  :     set_facet_body(f_id,b_id);

	push	esi
	push	eax
	call	_set_facet_body

; 282  :     /* reset, since was wiped earlier */
; 283  :     body_fe_list[bcount+i] = upgrade(fe_id);

	mov	eax, DWORD PTR _fe_id$[ebp]
	push	eax
	call	_upgrade
	mov	ecx, DWORD PTR _bcount
	mov	edx, DWORD PTR _body_fe_list$[ebp]
	add	ecx, edi
	mov	DWORD PTR [edx+ecx*4], eax

; 284  :     if ( get_battr(b_id) & WANT_CENTEROFMASS )

	mov	eax, DWORD PTR _web+348
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [eax+esi*4]
	mov	ecx, DWORD PTR [esi+12]
	and	ecx, 2
	xor	eax, eax
	add	esp, 12					; 0000000cH
	or	eax, ecx
	je	SHORT $LN70@tordup

; 285  :     { REAL *oldcm = get_body_cm(b_id);
; 286  :       REAL *newcm = get_body_cm(new_b);

	mov	ecx, DWORD PTR _web+348

; 287  :       oldcm[m] = 0.5;

	fld	QWORD PTR __real@3fe0000000000000
	and	ebx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+ebx*4]
	mov	ecx, DWORD PTR _m$[ebp]
	fst	QWORD PTR [esi+ecx*8+352]

; 288  :       newcm[m] = 0.5;

	fstp	QWORD PTR [eax+ecx*8+352]
$LN70@tordup:

; 268  :    
; 269  :   }
; 270  :   
; 271  :   /* new bodies */
; 272  :   for ( i = 0 ; i < bcount ; i++ )

	mov	eax, DWORD PTR _bcount
	inc	edi
	cmp	edi, eax
	jl	$LL71@tordup
$LN468@tordup:

; 289  :     }
; 290  :   }
; 291  : 
; 292  :   /* adjust facet bodies */
; 293  :   if ( web.representation == STRING )
; 294  :   {
; 295  :     for ( i = 0 ; i < fcount ; i++ )

	xor	esi, esi
	cmp	DWORD PTR _web+624, 1
	jne	$LN66@tordup
	cmp	DWORD PTR _fcount, esi
	jle	$LN35@tordup
	npad	12
$LL65@tordup:

; 296  :       if ( valid_id(flist[i]) )

	mov	edx, DWORD PTR _flist
	mov	eax, DWORD PTR [edx+esi*4]
	test	eax, 268435456				; 10000000H
	je	$LN64@tordup

; 297  :       { b_id = get_facet_body(flist[i]);

	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN313@tordup
	xor	eax, eax
	jmp	SHORT $LN310@tordup
$LN313@tordup:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN312@tordup
	xor	eax, eax
	jmp	SHORT $LN310@tordup
$LN312@tordup:
	mov	ecx, DWORD PTR _web+236
	test	eax, 134217728				; 08000000H
	je	SHORT $LN311@tordup
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax+4]
	jmp	SHORT $LN310@tordup
$LN311@tordup:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax]
$LN310@tordup:

; 298  :         if ( !valid_id(b_id) ) continue;

	test	eax, 268435456				; 10000000H
	je	SHORT $LN64@tordup

; 299  :         b_id = upgrade(b_id);

	push	eax
	call	_upgrade

; 300  :         if ( valid_id(flist[i+fcount]) )

	mov	ecx, DWORD PTR _fcount
	mov	edx, DWORD PTR _flist
	add	ecx, esi
	mov	ecx, DWORD PTR [edx+ecx*4]
	add	esp, 4

; 301  :            set_facet_body(flist[i+fcount],b_id);

	push	eax
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN60@tordup
	push	ecx
	call	_set_facet_body
	add	esp, 8
	jmp	SHORT $LN64@tordup
$LN60@tordup:

; 302  :         else free_element(b_id);

	call	_free_element
	add	esp, 4
$LN64@tordup:

; 289  :     }
; 290  :   }
; 291  : 
; 292  :   /* adjust facet bodies */
; 293  :   if ( web.representation == STRING )
; 294  :   {
; 295  :     for ( i = 0 ; i < fcount ; i++ )

	inc	esi
	cmp	esi, DWORD PTR _fcount
	jl	$LL65@tordup

; 303  :       }
; 304  :   }
; 305  :   else  /* SOAPFILM */

	jmp	$LN35@tordup
$LN66@tordup:

; 306  :   { /* have to go around finding contiguous facets of bodies */
; 307  :     int changeflag;
; 308  :     facet_id ff_id;
; 309  : 
; 310  :     /* start with canonical facets of old bodies */
; 311  :     for ( i = 0 ; i < bcount ; i++ )

	test	eax, eax
	jle	SHORT $LL53@tordup
	npad	7
$LL57@tordup:

; 312  :     {
; 313  :       b_id = blist[i];

	mov	eax, DWORD PTR _blist
	mov	eax, DWORD PTR [eax+esi*4]

; 314  :       if ( !valid_id(b_id) ) continue;

	test	eax, 268435456				; 10000000H
	je	SHORT $LN56@tordup

; 315  :       f_id = get_body_facet(b_id);

	mov	edx, DWORD PTR _web+348
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [ecx+400]

; 316  :       set_facet_body(f_id,b_id);

	push	eax
	push	ecx
	call	_set_facet_body
	add	esp, 8
$LN56@tordup:

; 306  :   { /* have to go around finding contiguous facets of bodies */
; 307  :     int changeflag;
; 308  :     facet_id ff_id;
; 309  : 
; 310  :     /* start with canonical facets of old bodies */
; 311  :     for ( i = 0 ; i < bcount ; i++ )

	inc	esi
	cmp	esi, DWORD PTR _bcount
	jl	SHORT $LL57@tordup
	npad	7
$LL53@tordup:

; 317  :     }
; 318  :  
; 319  :     /* go around finding adjacent facets */
; 320  :     do
; 321  :     { facetedge_id sentinel;
; 322  :       changeflag = 0;
; 323  :       fe_id = NULLFACETEDGE;

	mov	edx, DWORD PTR _NULLFACETEDGE

; 324  :       while ( generate_all(FACETEDGE,&fe_id,&sentinel) )

	lea	eax, DWORD PTR _sentinel$89260[ebp]
	push	eax
	lea	ecx, DWORD PTR _fe_id$[ebp]
	push	ecx
	push	4
	mov	DWORD PTR _changeflag$89250[ebp], 0
	mov	DWORD PTR _fe_id$[ebp], edx
	call	_generate_all
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN481@tordup
	npad	6
$LL50@tordup:

; 325  :       { if ( equal_id(get_next_facet(fe_id),fe_id) )

	mov	esi, DWORD PTR _fe_id$[ebp]
	push	esi
	call	_get_next_facet
	add	esp, 4
	cmp	eax, esi
	je	$LN44@tordup

; 326  :           continue; /* valence 1 edge */
; 327  :         f_id = get_fe_facet(fe_id);

	push	esi
	call	_get_fe_facet

; 328  :         b_id = get_facet_body(f_id);

	push	eax
	call	_get_facet_body
	mov	ebx, eax
	add	esp, 8

; 329  :         if ( valid_id(b_id) ) 

	test	ebx, 268435456				; 10000000H
	je	SHORT $LN46@tordup

; 330  :         { ff_id = inverse_id(get_fe_facet(get_prev_facet(fe_id)));

	push	esi
	call	_get_prev_facet
	push	eax
	call	_get_fe_facet
	mov	edi, eax
	xor	edi, 134217728				; 08000000H

; 331  :           if ( !valid_id(get_facet_body(ff_id)) )

	push	edi
	call	_get_facet_body
	add	esp, 12					; 0000000cH
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN46@tordup

; 332  :           { set_facet_body(ff_id,b_id);

	push	ebx
	push	edi
	call	_set_facet_body

; 333  :             changeflag++;

	mov	esi, DWORD PTR _fe_id$[ebp]
	add	esp, 8
	inc	DWORD PTR _changeflag$89250[ebp]
$LN46@tordup:

; 334  :           }
; 335  :         }
; 336  :         invert(fe_id);

	xor	esi, 134217728				; 08000000H

; 337  :         f_id = get_fe_facet(fe_id);

	push	esi
	mov	DWORD PTR _fe_id$[ebp], esi
	call	_get_fe_facet

; 338  :         b_id = get_facet_body(f_id);

	push	eax
	call	_get_facet_body
	mov	edi, eax
	add	esp, 8

; 339  :         if ( valid_id(b_id) ) 

	test	edi, 268435456				; 10000000H
	je	SHORT $LN44@tordup

; 340  :         { ff_id = inverse_id(get_fe_facet(get_prev_facet(fe_id)));

	push	esi
	call	_get_prev_facet
	push	eax
	call	_get_fe_facet
	mov	esi, eax
	xor	esi, 134217728				; 08000000H

; 341  :           if ( !valid_id(get_facet_body(ff_id)) )

	push	esi
	call	_get_facet_body
	add	esp, 12					; 0000000cH
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN44@tordup

; 342  :           { set_facet_body(ff_id,b_id);

	push	edi
	push	esi
	call	_set_facet_body
	add	esp, 8

; 343  :             changeflag++;

	inc	DWORD PTR _changeflag$89250[ebp]
$LN44@tordup:

; 324  :       while ( generate_all(FACETEDGE,&fe_id,&sentinel) )

	lea	edx, DWORD PTR _sentinel$89260[ebp]
	push	edx
	lea	eax, DWORD PTR _fe_id$[ebp]
	push	eax
	push	4
	call	_generate_all
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LL50@tordup

; 344  :           }
; 345  :         }
; 346  :       }
; 347  :     } while ( changeflag );

	cmp	DWORD PTR _changeflag$89250[ebp], eax
	jne	$LL53@tordup
$LN481@tordup:

; 348  : 
; 349  :     /* now find new bodies whose canonical faces 
; 350  :        have not been usurped */
; 351  :     for ( i = 0 ; i < bcount ; i++ )

	mov	eax, DWORD PTR _bcount
	xor	edi, edi
	test	eax, eax
	jle	$LL37@tordup
$LL491@tordup:

; 352  :     {
; 353  :       b_id = blist[i+bcount];

	mov	ecx, DWORD PTR _blist
	add	eax, edi
	add	eax, eax
	add	eax, eax
	mov	esi, DWORD PTR [eax+ecx]

; 354  :       if ( !valid_id(b_id) ) continue;

	test	esi, 268435456				; 10000000H
	je	$LN42@tordup

; 355  : 
; 356  :       f_id = get_fe_facet(body_fe_list[i+bcount]);

	mov	edx, DWORD PTR _body_fe_list$[ebp]
	mov	eax, DWORD PTR [eax+edx]
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN321@tordup
	mov	eax, DWORD PTR _NULLFACET
	jmp	SHORT $LN322@tordup
$LN321@tordup:
	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [ecx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN320@tordup
	xor	ecx, 134217728				; 08000000H
$LN320@tordup:
	mov	eax, ecx
$LN322@tordup:

; 357  :       if ( valid_id(get_facet_body(f_id)) )

	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN327@tordup
	xor	ecx, ecx
	jmp	SHORT $LN324@tordup
$LN327@tordup:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN326@tordup
	xor	ecx, ecx
	jmp	SHORT $LN324@tordup
$LN326@tordup:
	mov	ecx, DWORD PTR _web+236
	mov	ebx, DWORD PTR _dymem
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _web+328
	mov	ecx, DWORD PTR [ecx+ebx+784]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN325@tordup
	mov	ecx, DWORD PTR [edx+ecx+4]
	jmp	SHORT $LN324@tordup
$LN325@tordup:
	mov	ecx, DWORD PTR [edx+ecx]
$LN324@tordup:

; 358  :       { /* two bodies are really one */
; 359  :         free_element(b_id);

	push	esi
	test	ecx, 268435456				; 10000000H
	je	$LN39@tordup
	call	_free_element

; 360  :         set_body_volume(blist[i],2*get_body_volume(blist[i]),SETSTAMP);

	mov	edx, DWORD PTR _blist
	mov	eax, DWORD PTR [edx+edi*4]
	add	esp, 4
	test	eax, 268435456				; 10000000H
	je	SHORT $LN332@tordup
	mov	edx, DWORD PTR _web+348
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [ecx+40]
	jmp	SHORT $LN333@tordup
$LN332@tordup:
	fldz
$LN333@tordup:
	push	1
	fadd	ST(0), ST(0)
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	eax
	call	_set_body_volume
	mov	ebx, DWORD PTR _blist

; 361  :         set_body_oldvolume(blist[i],2*get_body_oldvolume(blist[i]));

	mov	edx, DWORD PTR [ebx+edi*4]
	mov	eax, DWORD PTR _web+348
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+edx*4]
	fld	QWORD PTR [eax+288]

; 362  :         if ( get_battr(b_id) & FIXEDVOL )

	and	esi, 134217727				; 07ffffffH
	fld	QWORD PTR __real@4000000000000000
	xor	ecx, ecx
	fmul	ST(1), ST(0)
	add	esp, 16					; 00000010H
	fxch	ST(1)
	fstp	QWORD PTR [eax+288]
	mov	edx, DWORD PTR _web+348
	mov	esi, DWORD PTR [edx+esi*4]
	mov	eax, DWORD PTR [esi+8]
	and	eax, 32					; 00000020H
	or	eax, ecx
	je	SHORT $LN501@tordup

; 363  :           set_body_fixvol(blist[i],2*get_body_fixvol(blist[i]));

	mov	eax, DWORD PTR [ebx+edi*4]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN336@tordup
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+32]
	jmp	SHORT $LN337@tordup
$LN336@tordup:
	fldz
$LN337@tordup:
	fmulp	ST(1), ST(0)
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	eax
	call	_set_body_fixvol
	add	esp, 12					; 0000000cH

; 364  :         continue;

	jmp	SHORT $LN42@tordup
$LN39@tordup:

; 365  :       } 
; 366  :       set_facet_body(f_id,b_id);

	push	eax
	call	_set_facet_body
	add	esp, 8
	jmp	SHORT $LN42@tordup
$LN501@tordup:
	fstp	ST(0)
$LN42@tordup:

; 348  : 
; 349  :     /* now find new bodies whose canonical faces 
; 350  :        have not been usurped */
; 351  :     for ( i = 0 ; i < bcount ; i++ )

	mov	eax, DWORD PTR _bcount
	inc	edi
	cmp	edi, eax
	jl	$LL491@tordup
$LL37@tordup:

; 367  :     }
; 368  :  
; 369  :     /* go around finding adjacent facets */
; 370  :     do
; 371  :     { facetedge_id sentinel;
; 372  :       changeflag = 0;
; 373  :       fe_id = NULLFACETEDGE;

	mov	eax, DWORD PTR _NULLFACETEDGE

; 374  :       while ( generate_all(FACETEDGE,&fe_id,&sentinel) )

	lea	ecx, DWORD PTR _sentinel$89288[ebp]
	push	ecx
	lea	edx, DWORD PTR _fe_id$[ebp]
	push	edx
	push	4
	mov	DWORD PTR _changeflag$89250[ebp], 0
	mov	DWORD PTR _fe_id$[ebp], eax
	call	_generate_all
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN35@tordup
	npad	1
$LL34@tordup:

; 375  :       { if ( equal_id(get_next_facet(fe_id),fe_id) )

	mov	esi, DWORD PTR _fe_id$[ebp]
	push	esi
	call	_get_next_facet
	add	esp, 4
	cmp	eax, esi
	je	$LN28@tordup

; 376  :           continue; /* valence 1 edge */
; 377  :         f_id = get_fe_facet(fe_id);

	push	esi
	call	_get_fe_facet

; 378  :         b_id = get_facet_body(f_id);

	push	eax
	call	_get_facet_body
	mov	ebx, eax
	add	esp, 8

; 379  :         if ( valid_id(b_id) ) 

	test	ebx, 268435456				; 10000000H
	je	SHORT $LN30@tordup

; 380  :         { ff_id = inverse_id(get_fe_facet(get_prev_facet(fe_id)));

	push	esi
	call	_get_prev_facet
	push	eax
	call	_get_fe_facet
	mov	edi, eax
	xor	edi, 134217728				; 08000000H

; 381  :           if ( !valid_id(get_facet_body(ff_id)) )

	push	edi
	call	_get_facet_body
	add	esp, 12					; 0000000cH
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN30@tordup

; 382  :           { set_facet_body(ff_id,b_id);

	push	ebx
	push	edi
	call	_set_facet_body

; 383  :             changeflag++;

	mov	esi, DWORD PTR _fe_id$[ebp]
	add	esp, 8
	inc	DWORD PTR _changeflag$89250[ebp]
$LN30@tordup:

; 384  :           }
; 385  :         }
; 386  :         invert(fe_id);

	xor	esi, 134217728				; 08000000H

; 387  :         f_id = get_fe_facet(fe_id);

	push	esi
	mov	DWORD PTR _fe_id$[ebp], esi
	call	_get_fe_facet

; 388  :         b_id = get_facet_body(f_id);

	push	eax
	call	_get_facet_body
	mov	edi, eax
	add	esp, 8

; 389  :         if ( valid_id(b_id) ) 

	test	edi, 268435456				; 10000000H
	je	SHORT $LN28@tordup

; 390  :         { ff_id = inverse_id(get_fe_facet(get_prev_facet(fe_id)));

	push	esi
	call	_get_prev_facet
	push	eax
	call	_get_fe_facet
	mov	esi, eax
	xor	esi, 134217728				; 08000000H

; 391  :           if ( !valid_id(get_facet_body(ff_id)) )

	push	esi
	call	_get_facet_body
	add	esp, 12					; 0000000cH
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN28@tordup

; 392  :           { set_facet_body(ff_id,b_id);

	push	edi
	push	esi
	call	_set_facet_body
	add	esp, 8

; 393  :             changeflag++;

	inc	DWORD PTR _changeflag$89250[ebp]
$LN28@tordup:

; 374  :       while ( generate_all(FACETEDGE,&fe_id,&sentinel) )

	lea	eax, DWORD PTR _sentinel$89288[ebp]
	push	eax
	lea	ecx, DWORD PTR _fe_id$[ebp]
	push	ecx
	push	4
	call	_generate_all
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LL34@tordup

; 394  :           }
; 395  :         }
; 396  :       }
; 397  :     } while ( changeflag );

	cmp	DWORD PTR _changeflag$89250[ebp], eax
	jne	$LL37@tordup
$LN35@tordup:

; 398  :   }
; 399  :   /* adjust torus period and inverse period matrix */
; 400  :   for ( i = 0 ; i < SDIM ; i++ )

	mov	ebx, DWORD PTR _m$[ebp]
	xor	edi, edi
	cmp	DWORD PTR _web+616, edi
	jle	SHORT $LN25@tordup
	mov	esi, ebx
	imul	esi, 624				; 00000270H
	add	esi, OFFSET _torus_period_expr
$LL494@tordup:

; 401  :   { sprintf(msg,"2*(%s)",print_express(&torus_period_expr[m][i],' '));

	push	32					; 00000020H
	push	esi
	call	_print_express
	mov	edx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_06IPPEMAIB@2?$CK?$CI?$CFs?$CJ?$AA@
	push	edx
	call	_sprintf

; 402  :     cmdptr = msg;

	mov	eax, DWORD PTR _msg

; 403  :     exparse(0,&torus_period_expr[m][i],USERCOPY);

	push	1
	push	esi
	push	0
	mov	DWORD PTR _cmdptr, eax
	call	_exparse
	inc	edi
	add	esp, 32					; 00000020H
	add	esi, 104				; 00000068H

; 404  :     cmdptr = NULL;

	mov	DWORD PTR _cmdptr, 0
	cmp	edi, DWORD PTR _web+616
	jl	SHORT $LL494@tordup
$LN25@tordup:

; 405  :   }
; 406  :   if ( web.torus_display_period )

	cmp	DWORD PTR _web+1620, 0
	je	SHORT $LN21@tordup

; 407  :   for ( i = 0 ; i < SDIM ; i++ )

	xor	edi, edi
	cmp	DWORD PTR _web+616, edi
	jle	SHORT $LN21@tordup
	imul	ebx, 624				; 00000270H
	add	ebx, OFFSET _torus_display_period_expr
	mov	esi, ebx
	xor	ebx, ebx
	npad	4
$LL495@tordup:

; 408  :   { sprintf(msg,"2*(%s)",print_express(&torus_display_period_expr[m][i],' '));

	push	32					; 00000020H
	push	esi
	call	_print_express
	mov	ecx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_06IPPEMAIB@2?$CK?$CI?$CFs?$CJ?$AA@
	push	ecx
	call	_sprintf

; 409  :     cmdptr = msg;

	mov	edx, DWORD PTR _msg

; 410  :     exparse(0,&torus_display_period_expr[m][i],USERCOPY);

	push	1
	push	esi
	push	ebx
	mov	DWORD PTR _cmdptr, edx
	call	_exparse
	inc	edi
	add	esp, 32					; 00000020H
	add	esi, 104				; 00000068H

; 411  :     cmdptr = NULL;

	mov	DWORD PTR _cmdptr, ebx
	cmp	edi, DWORD PTR _web+616
	jl	SHORT $LL495@tordup
$LN21@tordup:

; 412  :   }
; 413  :   calc_periods(NO_ADJUST_VOLUMES);

	push	0
	call	_calc_periods
	add	esp, 4

; 414  : 
; 415  :   /* phase boundary energies */
; 416  :   if ( phase_flag && (web.representation == STRING) )

	cmp	DWORD PTR _phase_flag, 0
	je	$LN485@tordup
	mov	ebx, 1
	cmp	DWORD PTR _web+624, ebx
	jne	SHORT $LN476@tordup

; 417  :   { FOR_ALL_EDGES(e_id)

	mov	ecx, DWORD PTR _web+160
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN476@tordup
	mov	edi, DWORD PTR _web+124
	npad	4
$LL496@tordup:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [edi+esi]
	mov	eax, DWORD PTR [eax+8]
	and	eax, ebx
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN18@tordup

; 418  :       set_e_phase_density(e_id);

	push	ecx
	call	_set_e_phase_density
	mov	edi, DWORD PTR _web+124
	add	esp, 4
$LN18@tordup:

; 417  :   { FOR_ALL_EDGES(e_id)

	mov	eax, DWORD PTR [edi+esi]
	mov	ecx, DWORD PTR [eax]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LL496@tordup
$LN476@tordup:

; 419  :   }
; 420  : 
; 421  :   if ( phase_flag && (web.representation != STRING) )

	cmp	DWORD PTR _phase_flag, 0
	je	SHORT $LN485@tordup
	cmp	DWORD PTR _web+624, ebx
	je	SHORT $LN485@tordup

; 422  :   { FOR_ALL_FACETS(f_id)

	mov	ecx, DWORD PTR _web+272
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN485@tordup
	mov	edi, DWORD PTR _web+236
	npad	5
$LL497@tordup:
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [edi+esi]
	mov	eax, DWORD PTR [eax+8]
	and	eax, ebx
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN12@tordup

; 423  :       set_f_phase_density(f_id);

	push	ecx
	call	_set_f_phase_density
	mov	edi, DWORD PTR _web+236
	add	esp, 4
$LN12@tordup:

; 422  :   { FOR_ALL_FACETS(f_id)

	mov	ecx, DWORD PTR [edi+esi]
	mov	ecx, DWORD PTR [ecx]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LL497@tordup
$LN485@tordup:

; 424  :   }
; 425  : 
; 426  :   if ( everything_quantities_flag )

	cmp	DWORD PTR _everything_quantities_flag, 0
	je	SHORT $LN8@tordup

; 427  :      reconvert_bodies_to_quantities();

	call	_reconvert_bodies_to_quantities
$LN8@tordup:

; 428  : 
; 429  :   /* free lists */
; 430  :   temp_free((char *)vlist);

	mov	edx, DWORD PTR _vlist
	push	edx
	call	_temp_free

; 431  :   temp_free((char *)elist);

	mov	eax, DWORD PTR _elist
	push	eax
	call	_temp_free

; 432  :   temp_free((char *)flist);

	mov	ecx, DWORD PTR _flist
	push	ecx
	call	_temp_free

; 433  :   temp_free((char *)blist);

	mov	edx, DWORD PTR _blist
	push	edx
	call	_temp_free

; 434  :   temp_free((char *)felist);

	mov	eax, DWORD PTR _felist
	push	eax
	call	_temp_free

; 435  :   temp_free((char *)body_fe_list);

	mov	ecx, DWORD PTR _body_fe_list$[ebp]
	push	ecx
	call	_temp_free

; 436  : 
; 437  :   /* fix up volconsts */
; 438  : 
; 439  :   calc_content(Q_INFO|Q_FIXED);  /* all volumes */

	push	6
	call	_calc_content
	fstp	ST(0)

; 440  : 
; 441  :   /* get volume of piece of unit cell */
; 442  :   if ( SDIM == 2 )
; 443  :   {
; 444  :      adjust = web.torusv  /* /2 */;
; 445  :   }
; 446  :   else /* web.representation == SOAPFILM */
; 447  :   {
; 448  :      adjust = web.torusv  /* /6 */;
; 449  :   }
; 450  : 
; 451  :   /* adjust volconsts */
; 452  :   FOR_ALL_BODIES(b_id)

	mov	edi, DWORD PTR _web+384
	fld	QWORD PTR _web+1600
	mov	DWORD PTR _b_id$[ebp], edi
	fstp	QWORD PTR _adjust$[ebp]
	shr	edi, 28					; 0000001cH
	add	esp, 28					; 0000001cH
	and	edi, 1
	je	$LN448@tordup
	mov	edx, DWORD PTR _web+348
	mov	esi, DWORD PTR _b_id$[ebp]
	npad	6
$LL498@tordup:
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	ebx, DWORD PTR [esi+edx]
	mov	eax, DWORD PTR [ebx+8]
	and	eax, 1
	xor	ecx, ecx
	or	eax, ecx
	je	$LN4@tordup

; 453  :     { REAL vol = get_body_volume(b_id);

	test	edi, edi
	je	SHORT $LN340@tordup
	fld	QWORD PTR [ebx+40]
	jmp	SHORT $LN341@tordup
$LN340@tordup:
	fldz
$LN341@tordup:

; 454  :       REAL old = get_body_oldvolume(b_id);

	fld	QWORD PTR [ebx+288]

; 455  :       REAL vc = get_body_volconst(b_id);

	test	edi, edi
	je	SHORT $LN344@tordup
	fld	QWORD PTR [ebx+328]
	jmp	SHORT $LN345@tordup
$LN344@tordup:
	fldz
$LN345@tordup:

; 456  :       REAL calcvol = vol-vc;

	fsubp	ST(2), ST(0)

; 457  :       REAL newvc = old - calcvol;
; 458  :       newvc = adjust*floor(0.5+newvc/adjust);

	sub	esp, 8
	fxch	ST(1)
	fst	QWORD PTR _calcvol$89353[ebp]
	fsubp	ST(1), ST(0)
	fdiv	QWORD PTR _adjust$[ebp]
	fadd	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR [esp]
	call	_floor
	fmul	QWORD PTR _adjust$[ebp]
	add	esp, 8

; 459  :       set_body_volconst(b_id,newvc);

	test	edi, edi
	je	SHORT $LN346@tordup
	fst	QWORD PTR [ebx+328]
	cmp	DWORD PTR _everything_quantities_flag, 0
	je	SHORT $LN346@tordup
	mov	edx, DWORD PTR _web+348
	mov	eax, DWORD PTR [esi+edx]
	mov	ecx, DWORD PTR [eax+404]
	mov	edx, DWORD PTR _gen_quant_list
	imul	ecx, 368				; 00000170H
	fst	QWORD PTR [ecx+edx+208]
$LN346@tordup:

; 460  :       set_body_volume(b_id,calcvol+newvc,SETSTAMP);

	fadd	QWORD PTR _calcvol$89353[ebp]
	mov	eax, DWORD PTR _b_id$[ebp]
	push	1
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	eax
	call	_set_body_volume
	mov	edx, DWORD PTR _web+348
	add	esp, 16					; 00000010H
$LN4@tordup:

; 440  : 
; 441  :   /* get volume of piece of unit cell */
; 442  :   if ( SDIM == 2 )
; 443  :   {
; 444  :      adjust = web.torusv  /* /2 */;
; 445  :   }
; 446  :   else /* web.representation == SOAPFILM */
; 447  :   {
; 448  :      adjust = web.torusv  /* /6 */;
; 449  :   }
; 450  : 
; 451  :   /* adjust volconsts */
; 452  :   FOR_ALL_BODIES(b_id)

	mov	ecx, DWORD PTR [esi+edx]
	mov	esi, DWORD PTR [ecx]
	mov	edi, esi
	shr	edi, 28					; 0000001cH
	and	edi, 1
	mov	DWORD PTR _b_id$[ebp], esi
	jne	$LL498@tordup
$LN448@tordup:

; 461  :    }
; 462  : 
; 463  :   top_timestamp = ++global_timestamp;

	mov	eax, DWORD PTR _global_timestamp
	pop	edi
	inc	eax
	pop	esi
	mov	DWORD PTR _top_timestamp, eax
	mov	DWORD PTR _global_timestamp, eax
	pop	ebx

; 464  : 
; 465  : } // end tordup()

	mov	esp, ebp
	pop	ebp
	ret	0
_tordup	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CN@HEKAFPFH@detorus?5not?5doing?5Lagrange?5torus@ ; `string'
PUBLIC	??_C@_0CO@JOCLHNAK@detorus?5not?5doing?5quadratic?5toru@ ; `string'
PUBLIC	??_C@_0CG@DKLDNOIK@detorus?5not?5doing?5simplex?5model?5@ ; `string'
PUBLIC	_detorus
EXTRN	_do_gfile:PROC
EXTRN	_transform_count:DWORD
EXTRN	_box_flag:DWORD
;	COMDAT ??_C@_0CN@HEKAFPFH@detorus?5not?5doing?5Lagrange?5torus@
CONST	SEGMENT
??_C@_0CN@HEKAFPFH@detorus?5not?5doing?5Lagrange?5torus@ DB 'detorus not '
	DB	'doing Lagrange torus model yet.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@JOCLHNAK@detorus?5not?5doing?5quadratic?5toru@
CONST	SEGMENT
??_C@_0CO@JOCLHNAK@detorus?5not?5doing?5quadratic?5toru@ DB 'detorus not '
	DB	'doing quadratic torus model yet.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@DKLDNOIK@detorus?5not?5doing?5simplex?5model?5@
CONST	SEGMENT
??_C@_0CG@DKLDNOIK@detorus?5not?5doing?5simplex?5model?5@ DB 'detorus not'
	DB	' doing simplex model yet.', 0aH, 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _detorus
_TEXT	SEGMENT
_detorus PROC						; COMDAT

; 750  : 
; 751  :   if ( web.representation == SIMPLEX )

	cmp	DWORD PTR _web+624, 3
	push	esi
	mov	esi, DWORD PTR _box_flag
	jne	SHORT $LN9@detorus

; 752  :     kb_error(5396,"detorus not doing simplex model yet.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CG@DKLDNOIK@detorus?5not?5doing?5simplex?5model?5@
	push	5396					; 00001514H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN9@detorus:

; 753  :   if ( web.torus_flag)

	cmp	DWORD PTR _web+860, 0
	je	SHORT $LN6@detorus

; 754  :   { if ( web.modeltype == QUADRATIC )

	cmp	DWORD PTR _web+628, 2
	jne	SHORT $LN7@detorus

; 755  :       kb_error(5397,"detorus not doing quadratic torus model yet.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CO@JOCLHNAK@detorus?5not?5doing?5quadratic?5toru@
	push	5397					; 00001515H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN7@detorus:

; 756  :     if ( web.modeltype == LAGRANGE )

	cmp	DWORD PTR _web+628, 3
	jne	SHORT $LN6@detorus

; 757  :       kb_error(5398,"detorus not doing Lagrange torus model yet.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CN@HEKAFPFH@detorus?5not?5doing?5Lagrange?5torus@
	push	5398					; 00001516H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN6@detorus:

; 758  :   }
; 759  :   
; 760  :   box_flag = 0; // don't want box edges 
; 761  :   dt_transform_count = (transforms_flag ? transform_count : 1);

	cmp	DWORD PTR _transforms_flag, 0
	mov	DWORD PTR _box_flag, 0
	je	SHORT $LN12@detorus
	mov	eax, DWORD PTR _transform_count
	mov	DWORD PTR _dt_transform_count, eax
	jmp	SHORT $LN13@detorus
$LN12@detorus:
	mov	DWORD PTR _dt_transform_count, 1
$LN13@detorus:

; 762  : 
; 763  :   if ( !web.torus_flag )

	cmp	DWORD PTR _web+860, 0
	jne	SHORT $LN5@detorus

; 764  :   { if ( web.representation == STRING )

	mov	eax, DWORD PTR _web+624
	cmp	eax, 1
	jne	SHORT $LN4@detorus

; 765  :       detorus_string_generate();

	call	_detorus_string_generate

; 772  : 
; 773  :   box_flag = old_box_flag;

	mov	DWORD PTR _box_flag, esi
	pop	esi

; 774  : } // end void detorus()

	ret	0
$LN4@detorus:

; 766  :     else if (web.representation == SOAPFILM )

	cmp	eax, 2
	jne	SHORT $LN14@detorus

; 767  :       detorus_soapfilm_generate();

	call	_detorus_soapfilm_generate

; 772  : 
; 773  :   box_flag = old_box_flag;

	mov	DWORD PTR _box_flag, esi
	pop	esi

; 774  : } // end void detorus()

	ret	0
$LN5@detorus:

; 768  :   }
; 769  :   else
; 770  :      /* Use graphics generator to generate facets and edges */
; 771  :     do_gfile('D',NULL);

	push	0
	push	68					; 00000044H
	call	_do_gfile
	add	esp, 8
$LN14@detorus:

; 772  : 
; 773  :   box_flag = old_box_flag;

	mov	DWORD PTR _box_flag, esi
	pop	esi

; 774  : } // end void detorus()

	ret	0
_detorus ENDP
_TEXT	ENDS
PUBLIC	_detorus_end
; Function compile flags: /Ogtp
;	COMDAT _detorus_end
_TEXT	SEGMENT
_translate$ = -12					; size = 4
_i$ = -8						; size = 4
tv1089 = -4						; size = 4
_detorus_end PROC					; COMDAT

; 935  : { int *translate;

	push	ebp
	mov	ebp, esp

; 936  :   int i,j,keep;
; 937  :   vertex_id v_id;
; 938  :   edge_id e_id;
; 939  :   facet_id f_id;
; 940  :   facetedge_id fe_id;
; 941  :   
; 942  : #ifdef _DEBUGX
; 943  :  printf("start of detorus_end\n");
; 944  :   detorus_dump();
; 945  : #endif
; 946  : 
; 947  :   // Using NEWELEMENT attribute to tell which elements needed.
; 948  :   MFOR_ALL_VERTICES(v_id)

	mov	edx, DWORD PTR _web+48
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	ebx, -5					; fffffffbH
	test	edx, 268435456				; 10000000H
	je	SHORT $LN84@detorus_en
	mov	edi, DWORD PTR _web+12
$LL44@detorus_en:
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	ecx, DWORD PTR [eax+edi]
	mov	ecx, DWORD PTR [ecx+8]
	and	ecx, 1
	xor	esi, esi
	or	ecx, esi
	je	SHORT $LN43@detorus_en

; 949  : 	  unset_attr(v_id,NEWELEMENT);

	shr	edx, 29					; 0000001dH
	imul	edx, 112				; 00000070H
	mov	ecx, DWORD PTR _web[edx+12]
	mov	ecx, DWORD PTR [ecx+eax]
	mov	edx, DWORD PTR [ecx+12]
	and	DWORD PTR [ecx+8], ebx
	mov	DWORD PTR [ecx+12], edx
	mov	edi, DWORD PTR _web+12
$LN43@detorus_en:

; 936  :   int i,j,keep;
; 937  :   vertex_id v_id;
; 938  :   edge_id e_id;
; 939  :   facet_id f_id;
; 940  :   facetedge_id fe_id;
; 941  :   
; 942  : #ifdef _DEBUGX
; 943  :  printf("start of detorus_end\n");
; 944  :   detorus_dump();
; 945  : #endif
; 946  : 
; 947  :   // Using NEWELEMENT attribute to tell which elements needed.
; 948  :   MFOR_ALL_VERTICES(v_id)

	mov	eax, DWORD PTR [eax+edi]
	mov	edx, DWORD PTR [eax]
	test	edx, 268435456				; 10000000H
	jne	SHORT $LL44@detorus_en
$LN84@detorus_en:

; 950  :   MFOR_ALL_EDGES(e_id)

	mov	edx, DWORD PTR _web+160
	test	edx, 268435456				; 10000000H
	je	SHORT $LN37@detorus_en
	mov	edi, DWORD PTR _web+124
	npad	5
$LL39@detorus_en:
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	ecx, DWORD PTR [eax+edi]
	mov	ecx, DWORD PTR [ecx+8]
	and	ecx, 1
	xor	esi, esi
	or	ecx, esi
	je	SHORT $LN38@detorus_en

; 951  : 	  unset_attr(e_id,NEWELEMENT);

	shr	edx, 29					; 0000001dH
	imul	edx, 112				; 00000070H
	mov	ecx, DWORD PTR _web[edx+12]
	mov	ecx, DWORD PTR [ecx+eax]
	mov	edx, DWORD PTR [ecx+12]
	and	DWORD PTR [ecx+8], ebx
	mov	DWORD PTR [ecx+12], edx
	mov	edi, DWORD PTR _web+124
$LN38@detorus_en:

; 950  :   MFOR_ALL_EDGES(e_id)

	mov	eax, DWORD PTR [eax+edi]
	mov	edx, DWORD PTR [eax]
	test	edx, 268435456				; 10000000H
	jne	SHORT $LL39@detorus_en
$LN37@detorus_en:

; 952  :   MFOR_ALL_FACETS(f_id)

	mov	edx, DWORD PTR _web+272
	test	edx, 268435456				; 10000000H
	je	SHORT $LN32@detorus_en
	mov	edi, DWORD PTR _web+236
	npad	7
$LL34@detorus_en:
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	ecx, DWORD PTR [eax+edi]
	mov	ecx, DWORD PTR [ecx+8]
	and	ecx, 1
	xor	esi, esi
	or	ecx, esi
	je	SHORT $LN33@detorus_en

; 953  : 	  unset_attr(f_id,NEWELEMENT);

	shr	edx, 29					; 0000001dH
	imul	edx, 112				; 00000070H
	mov	ecx, DWORD PTR _web[edx+12]
	mov	ecx, DWORD PTR [ecx+eax]
	mov	edx, DWORD PTR [ecx+12]
	and	DWORD PTR [ecx+8], ebx
	mov	DWORD PTR [ecx+12], edx
	mov	edi, DWORD PTR _web+236
$LN33@detorus_en:

; 952  :   MFOR_ALL_FACETS(f_id)

	mov	eax, DWORD PTR [eax+edi]
	mov	edx, DWORD PTR [eax]
	test	edx, 268435456				; 10000000H
	jne	SHORT $LL34@detorus_en
$LN32@detorus_en:

; 954  :   MFOR_ALL_FACETEDGES(fe_id)

	mov	edx, DWORD PTR _web+496
	test	edx, 268435456				; 10000000H
	je	SHORT $LN27@detorus_en
	mov	edi, DWORD PTR _web+460
	npad	7
$LL29@detorus_en:
	mov	eax, edx
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	ecx, DWORD PTR [eax+edi]
	mov	ecx, DWORD PTR [ecx+8]
	and	ecx, 1
	xor	esi, esi
	or	ecx, esi
	je	SHORT $LN28@detorus_en

; 955  : 	  unset_attr(fe_id,NEWELEMENT);

	shr	edx, 29					; 0000001dH
	imul	edx, 112				; 00000070H
	mov	ecx, DWORD PTR _web[edx+12]
	mov	ecx, DWORD PTR [ecx+eax]
	mov	edx, DWORD PTR [ecx+12]
	and	DWORD PTR [ecx+8], ebx
	mov	DWORD PTR [ecx+12], edx
	mov	edi, DWORD PTR _web+460
$LN28@detorus_en:

; 954  :   MFOR_ALL_FACETEDGES(fe_id)

	mov	eax, DWORD PTR [eax+edi]
	mov	edx, DWORD PTR [eax]
	test	edx, 268435456				; 10000000H
	jne	SHORT $LL29@detorus_en
$LN27@detorus_en:

; 956  : 
; 957  :   translate = detorus_unify_vertices();  

	call	_detorus_unify_vertices

; 958  : 
; 959  :   /* convert vertex indices in edge list */
; 960  :   for ( i = 1 ; i < dt_ecount ; i++ )

	mov	edi, 1
	mov	esi, edi
	cmp	DWORD PTR _dt_ecount, edi
	jle	SHORT $LN22@detorus_en

; 956  : 
; 957  :   translate = detorus_unify_vertices();  

	mov	ecx, 12					; 0000000cH
	npad	2
$LL24@detorus_en:

; 961  :   { for ( j = 0 ; j < EDGE_VERTS ; j++ )
; 962  :       dt_elist[i].v[j] = translate[dt_elist[i].v[j]];

	mov	edx, DWORD PTR _dt_elist
	mov	edx, DWORD PTR [ecx+edx+8]
	mov	ebx, DWORD PTR [edx]
	mov	ebx, DWORD PTR [eax+ebx*4]
	mov	DWORD PTR [edx], ebx
	mov	edx, DWORD PTR _dt_elist
	mov	edx, DWORD PTR [ecx+edx+8]
	mov	ebx, DWORD PTR [edx+4]
	mov	ebx, DWORD PTR [eax+ebx*4]
	add	esi, edi
	mov	DWORD PTR [edx+4], ebx
	add	ecx, 12					; 0000000cH
	cmp	esi, DWORD PTR _dt_ecount
	jl	SHORT $LL24@detorus_en
$LN22@detorus_en:

; 963  :   }
; 964  : 
; 965  :   temp_free((char*)translate);

	push	eax
	call	_temp_free
	add	esp, 4

; 966  :   translate = detorus_unify_edges();

	call	_detorus_unify_edges

; 967  :   
; 968  :   // translate edge lists in dt_flist
; 969  :   for ( i = 0 ; i < dt_fcount ; i++ )

	mov	edx, DWORD PTR _dt_fcount
	mov	esi, eax
	xor	ecx, ecx
	mov	DWORD PTR _translate$[ebp], esi
	test	edx, edx
	jle	SHORT $LN16@detorus_en

; 963  :   }
; 964  : 
; 965  :   temp_free((char*)translate);

	mov	eax, 12					; 0000000cH
	npad	11
$LL18@detorus_en:

; 970  :   { for ( j = 0 ; j < FACET_EDGES ; j++ )
; 971  :       dt_flist[i].e[j] = translate[dt_flist[i].e[j]];

	mov	edx, DWORD PTR _dt_flist
	mov	ebx, DWORD PTR [eax+edx-8]
	mov	ebx, DWORD PTR [esi+ebx*4]
	mov	DWORD PTR [eax+edx-8], ebx
	mov	edx, DWORD PTR _dt_flist
	mov	ebx, DWORD PTR [eax+edx-4]
	mov	ebx, DWORD PTR [esi+ebx*4]
	mov	DWORD PTR [eax+edx-4], ebx
	mov	edx, DWORD PTR _dt_flist
	mov	ebx, DWORD PTR [eax+edx]
	mov	ebx, DWORD PTR [esi+ebx*4]
	mov	DWORD PTR [eax+edx], ebx
	mov	edx, DWORD PTR _dt_fcount
	add	ecx, edi
	add	eax, 24					; 00000018H
	cmp	ecx, edx
	jl	SHORT $LL18@detorus_en
$LN16@detorus_en:

; 972  :   }
; 973  :   
; 974  : #ifdef _DEBUGX
; 975  : printf("After edge list\n");
; 976  :   detorus_dump();
; 977  : #endif
; 978  :   
; 979  :   if ( web.representation == STRING )

	mov	eax, DWORD PTR _web+624
	cmp	eax, edi
	jne	SHORT $LN12@detorus_en

; 980  :   { detorus_string_cleanup();

	call	_detorus_string_cleanup
	jmp	$LN10@detorus_en
$LN12@detorus_en:

; 981  :   }
; 982  :   else if ( web.representation == SOAPFILM )

	cmp	eax, 2
	jne	$LN10@detorus_en

; 983  :   {
; 984  :     // Sort facet list to get rid of duplicates with same edges
; 985  :     qsort(dt_flist,dt_fcount,sizeof(struct dt_facet), FCAST dt_fcompare);

	mov	eax, DWORD PTR _dt_flist
	push	OFFSET _dt_fcompare
	push	24					; 00000018H
	push	edx
	push	eax
	call	_qsort
	add	esp, 16					; 00000010H

; 986  :     for ( i = 1, keep = 0 ; i < dt_fcount ; i++ )

	xor	ebx, ebx
	mov	DWORD PTR _i$[ebp], edi
	cmp	DWORD PTR _dt_fcount, edi
	jle	SHORT $LN82@detorus_en
	xor	edi, edi
	mov	DWORD PTR tv1089[ebp], 24		; 00000018H
	npad	8
$LL85@detorus_en:

; 987  :     { if ( dt_fcompare(dt_flist+i,dt_flist+keep) != 0 )

	mov	eax, DWORD PTR _dt_flist
	mov	esi, DWORD PTR tv1089[ebp]
	lea	edx, DWORD PTR [edi+eax]
	add	esi, eax
	push	edx
	push	esi
	call	_dt_fcompare
	add	esp, 8
	test	eax, eax
	je	SHORT $LN8@detorus_en

; 988  :         dt_flist[++keep] = dt_flist[i];

	mov	eax, DWORD PTR _dt_flist
	mov	ecx, DWORD PTR [esi]
	inc	ebx
	lea	edi, DWORD PTR [ebx+ebx*2]
	add	edi, edi
	add	edi, edi
	add	edi, edi
	mov	DWORD PTR [eax+edi], ecx
	mov	edx, DWORD PTR [esi+4]
	add	eax, edi
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR [esi+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR [esi+20]
	mov	DWORD PTR [eax+20], edx
$LN8@detorus_en:

; 986  :     for ( i = 1, keep = 0 ; i < dt_fcount ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	add	DWORD PTR tv1089[ebp], 24		; 00000018H
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _dt_fcount
	jl	SHORT $LL85@detorus_en
	mov	esi, DWORD PTR _translate$[ebp]
$LN82@detorus_en:

; 989  :     }
; 990  :     dt_fcount = keep + 1;

	lea	eax, DWORD PTR [ebx+1]

; 991  : 
; 992  :     // Massage facet list
; 993  :     for ( i = 0 ; i < dt_fcount ; i++ )

	xor	ebx, ebx
	mov	DWORD PTR _dt_fcount, eax
	test	eax, eax
	jle	SHORT $LN3@detorus_en

; 989  :     }
; 990  :     dt_fcount = keep + 1;

	xor	edi, edi
$LL83@detorus_en:

; 994  :     { struct dt_facet *fs = dt_flist + i;

	mov	eax, DWORD PTR _dt_flist
	add	eax, edi

; 995  : 
; 996  :       // check for degenerate edges
; 997  :       if ( !fs->e[0] || !fs->e[1] || !fs->e[2] )

	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@detorus_en
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@detorus_en
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@detorus_en

; 999  :         continue;
; 1000 :       }
; 1001 : 
; 1002 :       detorus_handle_facet(fs);

	push	eax
	call	_detorus_handle_facet
	add	esp, 4

; 1003 : 
; 1004 :     }

	jmp	SHORT $LN4@detorus_en
$LN1@detorus_en:

; 998  :       { fs->f_id = NULLID;

	mov	DWORD PTR [eax], 0
$LN4@detorus_en:

; 991  : 
; 992  :     // Massage facet list
; 993  :     for ( i = 0 ; i < dt_fcount ; i++ )

	inc	ebx
	add	edi, 24					; 00000018H
	cmp	ebx, DWORD PTR _dt_fcount
	jl	SHORT $LL83@detorus_en
$LN3@detorus_en:

; 1005 : #ifdef _DEBUGX
; 1006 :    printf("After facet list \n");
; 1007 :     detorus_dump();
; 1008 : #endif
; 1009 : 
; 1010 :     detorus_soapfilm_cleanup();

	call	_detorus_soapfilm_cleanup
$LN10@detorus_en:

; 1011 :   }
; 1012 :   
; 1013 :   torus_display_mode = TORUS_DEFAULT_MODE;
; 1014 :   web.torus_clip_flag = 0;
; 1015 :   web.torus_body_flag = 0;
; 1016 : 
; 1017 :   temp_free((char*)dt_vlist);

	mov	ecx, DWORD PTR _dt_vlist
	xor	eax, eax
	push	ecx
	mov	DWORD PTR _torus_display_mode, eax
	mov	DWORD PTR _web+800, eax
	mov	DWORD PTR _web+804, eax
	call	_temp_free

; 1018 :   temp_free((char*)dt_x_space);

	mov	edx, DWORD PTR _dt_x_space
	push	edx
	call	_temp_free

; 1019 :   temp_free((char*)dt_elist);

	mov	eax, DWORD PTR _dt_elist
	push	eax
	call	_temp_free

; 1020 :   temp_free((char*)dt_v_space);

	mov	ecx, DWORD PTR _dt_v_space
	push	ecx
	call	_temp_free

; 1021 :   temp_free((char*)dt_flist);

	mov	edx, DWORD PTR _dt_flist
	push	edx
	call	_temp_free

; 1022 :   temp_free((char*)translate);

	push	esi
	call	_temp_free
	add	esp, 24					; 00000018H
	pop	edi
	pop	esi
	pop	ebx

; 1023 : 
; 1024 : }  // end detorus_end()

	mov	esp, ebp
	pop	ebp
	ret	0
_detorus_end ENDP
_TEXT	ENDS
END
