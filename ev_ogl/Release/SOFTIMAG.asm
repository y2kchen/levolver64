; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\SOFTIMAG.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_get_fe_edge
EXTRN	_web:BYTE
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
;	COMDAT _get_fe_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_edge PROC					; COMDAT

; 43   : {

	push	ebp
	mov	ebp, esp

; 44   :   edge_id e_id;
; 45   :     
; 46   :   e_id = feptr(fe_id)->fe_edge_id;

	mov	eax, DWORD PTR _fe_id$[ebp]

; 47   : 
; 48   :   /*
; 49   :   if ( inverted(fe_id) ) invert(e_id);
; 50   :   return e_id;
; 51   :   */
; 52   :   
; 53   :   return same_sign(e_id,fe_id);

	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]

; 54   : }

	pop	ebp
	ret	0
_get_fe_edge ENDP
_TEXT	ENDS
PUBLIC	_get_next_edge
; Function compile flags: /Ogtp
;	COMDAT _get_next_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_next_edge PROC					; COMDAT

; 76   : {

	push	ebp
	mov	ebp, esp

; 77   :   if ( inverted(fe_id) ) return inverse_id(feptr(fe_id)->nextedge[0]);

	mov	eax, DWORD PTR _fe_id$[ebp]
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_next_e
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H

; 79   : }

	pop	ebp
	ret	0
$LN2@get_next_e:

; 78   :   else return feptr(fe_id)->nextedge[1];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]

; 79   : }

	pop	ebp
	ret	0
_get_next_edge ENDP
_TEXT	ENDS
PUBLIC	_get_edge_tailv
EXTRN	_dymem:DWORD
; Function compile flags: /Ogtp
;	COMDAT _get_edge_tailv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_tailv PROC					; COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp

; 192  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 193  :      return get_edge_vertices(e_id)[web.headvnum];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_t
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 196  : }

	pop	ebp
	ret	0
$LN2@get_edge_t:

; 194  :   else
; 195  :      return get_edge_vertices(e_id)[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 196  : }

	pop	ebp
	ret	0
_get_edge_tailv ENDP
_TEXT	ENDS
PUBLIC	_get_edge_headv
; Function compile flags: /Ogtp
;	COMDAT _get_edge_headv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_headv PROC					; COMDAT

; 200  : {

	push	ebp
	mov	ebp, esp

; 201  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 202  :      return get_edge_vertices(e_id)[0];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_h
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 205  : }

	pop	ebp
	ret	0
$LN2@get_edge_h:

; 203  :   else
; 204  :      return get_edge_vertices(e_id)[web.headvnum];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 205  : }

	pop	ebp
	ret	0
_get_edge_headv ENDP
_TEXT	ENDS
PUBLIC	_get_facet_fe
; Function compile flags: /Ogtp
;	COMDAT _get_facet_fe
_TEXT	SEGMENT
_f_id$ = 8						; size = 4
_get_facet_fe PROC					; COMDAT

; 260  : {

	push	ebp
	mov	ebp, esp

; 261  :   facetedge_id fe;
; 262  :   
; 263  :   if ( !valid_id(f_id) ) return NULLID;

	mov	ecx, DWORD PTR _f_id$[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN2@get_facet_
	xor	eax, eax

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
$LN2@get_facet_:

; 264  :   fe = fptr(f_id)->fe_id;

	mov	edx, DWORD PTR _web+236
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]

; 265  :   if ( inverted(f_id) ) invert(fe);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_facet_
	xor	eax, 134217728				; 08000000H
$LN3@get_facet_:

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
_get_facet_fe ENDP
_TEXT	ENDS
PUBLIC	??_C@_07EFGEEHD@?5?5?5?5?$HN?6?6?$AA@		; `string'
PUBLIC	??_C@_0BK@EHIOMFII@?5?5?5?5?5?$CF10d?5?$CF10d?5?$CF10d?5?$CF10d?6?$AA@ ; `string'
PUBLIC	??_C@_0BC@GGPANAOB@?6?5?5?5?5polygon?5?$CFld?6?$AA@ ; `string'
PUBLIC	??_C@_0BO@MIANDKCP@?$CF12d?5?$CF14?412f?5?$CF14?412f?5?$CF14?412f?6?$AA@ ; `string'
PUBLIC	??_C@_0BA@MKGDENGK@?5?5?5?5vertex?5?$CFld?6?$AA@ ; `string'
PUBLIC	??_C@_0L@IOPDGBOD@SOFTIMAG?4C?$AA@		; `string'
PUBLIC	??_C@_0BE@NMDGDPDO@PMSH?5?5?5?5?$CC?$CFs?$CC?6?5?5?$HL?6?5?5?$AA@ ; `string'
PUBLIC	??_C@_0DG@GICDJNDA@SOFTIMAGE?54D?5Creative?5Environmen@ ; `string'
PUBLIC	??_C@_04IONDDMDJ@?4def?$AA@			; `string'
PUBLIC	??_C@_04POOIJLFB@?5?5?$HN?6?$AA@		; `string'
PUBLIC	??_C@_0CO@GMJIHOND@?5?5?5?5?5trans?5?5?5?5?5?50?4000000?5?50?40000@ ; `string'
PUBLIC	??_C@_0CP@LDEGKDDM@?5?5?5?5?5rot?5?5?5?5?5?5?5?5?50?4000000?5?50?4000@ ; `string'
PUBLIC	??_C@_0CP@CCAIFHPI@?5?5?5?5?5scal?5?5?5?5?5?5?5?51?4000000?5?51?4000@ ; `string'
PUBLIC	??_C@_0BB@JOFAMIPJ@?5?5?5?5?5nbdef?5?5?5?51?6?$AA@ ; `string'
PUBLIC	??_C@_0CH@EBLDMGFE@?5?5MODL?5?5?5?5?$CC?$CFs?$CC?6?5?5?$HL?6?5?5?5?5?5type?5?5?5?5@ ; `string'
PUBLIC	??_C@_0DH@NMFOPLLL@SOFTIMAGE?54D?5Creative?5Environmen@ ; `string'
PUBLIC	??_C@_01NOFIACDB@w?$AA@				; `string'
PUBLIC	??_C@_04IPGPBAO@?4mdl?$AA@			; `string'
PUBLIC	??_C@_0BO@FEPLGGGE@Enter?5file?5name?5?$CIno?5suffix?$CJ?3?5?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_softimage
EXTRN	_temp_free:PROC
EXTRN	_kb_temp_calloc:PROC
EXTRN	_fclose:PROC
EXTRN	_fprintf:PROC
EXTRN	_erroutstring:PROC
EXTRN	_perror:PROC
EXTRN	_l_evolver_mode:DWORD
EXTRN	_l_redirect:DWORD
EXTRN	_fopen:PROC
EXTRN	_prompt:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_fd	DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_07EFGEEHD@?5?5?5?5?$HN?6?6?$AA@
CONST	SEGMENT
??_C@_07EFGEEHD@?5?5?5?5?$HN?6?6?$AA@ DB '    }', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EHIOMFII@?5?5?5?5?5?$CF10d?5?$CF10d?5?$CF10d?5?$CF10d?6?$AA@
CONST	SEGMENT
??_C@_0BK@EHIOMFII@?5?5?5?5?5?$CF10d?5?$CF10d?5?$CF10d?5?$CF10d?6?$AA@ DB ' '
	DB	'    %10d %10d %10d %10d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GGPANAOB@?6?5?5?5?5polygon?5?$CFld?6?$AA@
CONST	SEGMENT
??_C@_0BC@GGPANAOB@?6?5?5?5?5polygon?5?$CFld?6?$AA@ DB 0aH, '    polygon '
	DB	'%ld', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MIANDKCP@?$CF12d?5?$CF14?412f?5?$CF14?412f?5?$CF14?412f?6?$AA@
CONST	SEGMENT
??_C@_0BO@MIANDKCP@?$CF12d?5?$CF14?412f?5?$CF14?412f?5?$CF14?412f?6?$AA@ DB '%'
	DB	'12d %14.12f %14.12f %14.12f', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MKGDENGK@?5?5?5?5vertex?5?$CFld?6?$AA@
CONST	SEGMENT
??_C@_0BA@MKGDENGK@?5?5?5?5vertex?5?$CFld?6?$AA@ DB '    vertex %ld', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IOPDGBOD@SOFTIMAG?4C?$AA@
CONST	SEGMENT
??_C@_0L@IOPDGBOD@SOFTIMAG?4C?$AA@ DB 'SOFTIMAG.C', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NMDGDPDO@PMSH?5?5?5?5?$CC?$CFs?$CC?6?5?5?$HL?6?5?5?$AA@
CONST	SEGMENT
??_C@_0BE@NMDGDPDO@PMSH?5?5?5?5?$CC?$CFs?$CC?6?5?5?$HL?6?5?5?$AA@ DB 'PMS'
	DB	'H    "%s"', 0aH, '  {', 0aH, '  ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@GICDJNDA@SOFTIMAGE?54D?5Creative?5Environmen@
CONST	SEGMENT
??_C@_0DG@GICDJNDA@SOFTIMAGE?54D?5Creative?5Environmen@ DB 'SOFTIMAGE 4D '
	DB	'Creative Environment    v 1.6  "ASCII"', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04IONDDMDJ@?4def?$AA@
CONST	SEGMENT
??_C@_04IONDDMDJ@?4def?$AA@ DB '.def', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04POOIJLFB@?5?5?$HN?6?$AA@
CONST	SEGMENT
??_C@_04POOIJLFB@?5?5?$HN?6?$AA@ DB '  }', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@GMJIHOND@?5?5?5?5?5trans?5?5?5?5?5?50?4000000?5?50?40000@
CONST	SEGMENT
??_C@_0CO@GMJIHOND@?5?5?5?5?5trans?5?5?5?5?5?50?4000000?5?50?40000@ DB ' '
	DB	'    trans      0.000000  0.000000  0.000000', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@LDEGKDDM@?5?5?5?5?5rot?5?5?5?5?5?5?5?5?50?4000000?5?50?4000@
CONST	SEGMENT
??_C@_0CP@LDEGKDDM@?5?5?5?5?5rot?5?5?5?5?5?5?5?5?50?4000000?5?50?4000@ DB ' '
	DB	'    rot         0.000000  0.000000  0.000000', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@CCAIFHPI@?5?5?5?5?5scal?5?5?5?5?5?5?5?51?4000000?5?51?4000@
CONST	SEGMENT
??_C@_0CP@CCAIFHPI@?5?5?5?5?5scal?5?5?5?5?5?5?5?51?4000000?5?51?4000@ DB ' '
	DB	'    scal        1.000000  1.000000  1.000000', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JOFAMIPJ@?5?5?5?5?5nbdef?5?5?5?51?6?$AA@
CONST	SEGMENT
??_C@_0BB@JOFAMIPJ@?5?5?5?5?5nbdef?5?5?5?51?6?$AA@ DB '     nbdef    1', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@EBLDMGFE@?5?5MODL?5?5?5?5?$CC?$CFs?$CC?6?5?5?$HL?6?5?5?5?5?5type?5?5?5?5@
CONST	SEGMENT
??_C@_0CH@EBLDMGFE@?5?5MODL?5?5?5?5?$CC?$CFs?$CC?6?5?5?$HL?6?5?5?5?5?5type?5?5?5?5@ DB ' '
	DB	' MODL    "%s"', 0aH, '  {', 0aH, '     type     PMSH', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@NMFOPLLL@SOFTIMAGE?54D?5Creative?5Environmen@
CONST	SEGMENT
??_C@_0DH@NMFOPLLL@SOFTIMAGE?54D?5Creative?5Environmen@ DB 'SOFTIMAGE 4D '
	DB	'Creative Environment    v 1.6  "ASCII"', 0aH, 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w?$AA@
CONST	SEGMENT
??_C@_01NOFIACDB@w?$AA@ DB 'w', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IPGPBAO@?4mdl?$AA@
CONST	SEGMENT
??_C@_04IPGPBAO@?4mdl?$AA@ DB '.mdl', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@FEPLGGGE@Enter?5file?5name?5?$CIno?5suffix?$CJ?3?5?$AA@
CONST	SEGMENT
??_C@_0BO@FEPLGGGE@Enter?5file?5name?5?$CIno?5suffix?$CJ?3?5?$AA@ DB 'Ent'
	DB	'er file name (no suffix): ', 00H		; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\softimag.c
CONST	ENDS
;	COMDAT _softimage
_TEXT	SEGMENT
_oh$89096 = -2028					; size = 4
tv1045 = -2024						; size = 4
tv292 = -2020						; size = 4
tv308 = -2016						; size = 4
_vnumber$ = -2012					; size = 4
_next_fe$89095 = -2008					; size = 4
_n$ = -2008						; size = 4
_name$ = -2004						; size = 1000
_file_name$ = -1004					; size = 1000
__$ArrayPad$ = -4					; size = 4
_softimage PROC						; COMDAT

; 25   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2028				; 000007ecH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 26   :   char file_name[1000];
; 27   :   char name[1000];
; 28   :   vertex_id v_id;
; 29   :   facet_id f_id;
; 30   :   int *vnumber;
; 31   :   int n;
; 32   : 
; 33   :   prompt("Enter file name (no suffix): ",name,sizeof(name));

	push	1000					; 000003e8H
	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_0BO@FEPLGGGE@Enter?5file?5name?5?$CIno?5suffix?$CJ?3?5?$AA@
	call	_prompt
	add	esp, 12					; 0000000cH

; 34   : 
; 35   :   /* model file */
; 36   :   strcpy(file_name,name);

	xor	eax, eax
	npad	2
$LL21@softimage:
	mov	cl, BYTE PTR _name$[ebp+eax]
	mov	BYTE PTR _file_name$[ebp+eax], cl
	inc	eax
	test	cl, cl
	jne	SHORT $LL21@softimage

; 37   :   strcat(file_name,".mdl");

	lea	eax, DWORD PTR _file_name$[ebp]
	dec	eax
	npad	6
$LL95@softimage:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL95@softimage
	mov	ecx, DWORD PTR ??_C@_04IPGPBAO@?4mdl?$AA@
	mov	dl, BYTE PTR ??_C@_04IPGPBAO@?4mdl?$AA@+4
	mov	DWORD PTR [eax], ecx
	mov	BYTE PTR [eax+4], dl

; 38   :   fd = fopen(file_name,"w");

	lea	eax, DWORD PTR _file_name$[ebp]
	push	OFFSET ??_C@_01NOFIACDB@w?$AA@
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fd, eax

; 39   :   if ( fd == NULL )

	test	eax, eax
	jne	SHORT $LN18@softimage

; 40   :   {
; 41   : #ifdef __L_EVOLVER__		 
; 42   : 		   		     if (l_redirect||l_evolver_mode)

	cmp	DWORD PTR _l_redirect, eax
	jne	SHORT $LN16@softimage
	cmp	DWORD PTR _l_evolver_mode, eax
	jne	SHORT $LN16@softimage

; 44   : 		   		     else
; 45   : 					   perror(file_name);

	lea	ecx, DWORD PTR _file_name$[ebp]
	push	ecx
	call	_perror
	add	esp, 4

; 109  : } // end softimage()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@softimage:

; 43   : 			   		   erroutstring(file_name);

	lea	edx, DWORD PTR _file_name$[ebp]
	push	edx
	call	_erroutstring
	add	esp, 4

; 109  : } // end softimage()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@softimage:

; 46   : #else
; 47   : 					 perror(file_name);
; 48   : #endif
; 49   :     return;
; 50   :   }
; 51   :   fprintf(fd,"SOFTIMAGE 4D Creative Environment    v 1.6  \"ASCII\"\n\n\n");

	push	OFFSET ??_C@_0DH@NMFOPLLL@SOFTIMAGE?54D?5Creative?5Environmen@
	push	eax
	call	_fprintf

; 52   :   fprintf(fd,"  MODL    \"%s\"\n  {\n     type     PMSH\n",name);

	mov	ecx, DWORD PTR _fd
	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_0CH@EBLDMGFE@?5?5MODL?5?5?5?5?$CC?$CFs?$CC?6?5?5?$HL?6?5?5?5?5?5type?5?5?5?5@
	push	ecx
	call	_fprintf

; 53   :   fprintf(fd,"     nbdef    1\n");

	mov	edx, DWORD PTR _fd
	push	OFFSET ??_C@_0BB@JOFAMIPJ@?5?5?5?5?5nbdef?5?5?5?51?6?$AA@
	push	edx
	call	_fprintf

; 54   :   fprintf(fd,"     scal        1.000000  1.000000  1.000000\n");

	mov	eax, DWORD PTR _fd
	push	OFFSET ??_C@_0CP@CCAIFHPI@?5?5?5?5?5scal?5?5?5?5?5?5?5?51?4000000?5?51?4000@
	push	eax
	call	_fprintf

; 55   :   fprintf(fd,"     rot         0.000000  0.000000  0.000000\n");

	mov	ecx, DWORD PTR _fd
	push	OFFSET ??_C@_0CP@LDEGKDDM@?5?5?5?5?5rot?5?5?5?5?5?5?5?5?50?4000000?5?50?4000@
	push	ecx
	call	_fprintf

; 56   :   fprintf(fd,"     trans      0.000000  0.000000  0.000000\n");

	mov	edx, DWORD PTR _fd
	push	OFFSET ??_C@_0CO@GMJIHOND@?5?5?5?5?5trans?5?5?5?5?5?50?4000000?5?50?40000@
	push	edx
	call	_fprintf

; 57   :   fprintf(fd,"  }\n");

	mov	eax, DWORD PTR _fd
	push	OFFSET ??_C@_04POOIJLFB@?5?5?$HN?6?$AA@
	push	eax
	call	_fprintf

; 58   :   fclose(fd);

	mov	ecx, DWORD PTR _fd
	push	ecx
	call	_fclose
	add	esp, 64					; 00000040H

; 59   : 
; 60   : 
; 61   :   strcpy(file_name,name);

	xor	eax, eax
	npad	9
$LL22@softimage:
	mov	cl, BYTE PTR _name$[ebp+eax]
	mov	BYTE PTR _file_name$[ebp+eax], cl
	inc	eax
	test	cl, cl
	jne	SHORT $LL22@softimage

; 62   :   strcat(file_name,".def");

	lea	eax, DWORD PTR _file_name$[ebp]
	dec	eax
	npad	6
$LL96@softimage:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL96@softimage
	mov	edx, DWORD PTR ??_C@_04IONDDMDJ@?4def?$AA@
	mov	cl, BYTE PTR ??_C@_04IONDDMDJ@?4def?$AA@+4
	mov	DWORD PTR [eax], edx

; 63   :   fd = fopen(file_name,"w");

	lea	edx, DWORD PTR _file_name$[ebp]
	push	OFFSET ??_C@_01NOFIACDB@w?$AA@
	push	edx
	mov	BYTE PTR [eax+4], cl
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fd, eax

; 64   :   if ( fd == NULL )

	test	eax, eax
	jne	SHORT $LN14@softimage

; 65   :   {
; 66   : #ifdef __L_EVOLVER__		 
; 67   : 		   		     if (l_redirect||l_evolver_mode)

	cmp	DWORD PTR _l_redirect, eax
	jne	SHORT $LN12@softimage
	cmp	DWORD PTR _l_evolver_mode, eax
	jne	SHORT $LN12@softimage

; 69   : 		   		     else
; 70   : 					   perror(file_name);

	lea	eax, DWORD PTR _file_name$[ebp]
	push	eax
	call	_perror
	add	esp, 4

; 109  : } // end softimage()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@softimage:

; 68   : 			   		   erroutstring(file_name);

	lea	ecx, DWORD PTR _file_name$[ebp]
	push	ecx
	call	_erroutstring
	add	esp, 4

; 109  : } // end softimage()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@softimage:
	push	ebx
	push	esi
	push	edi

; 71   : #else
; 72   : 					 perror(file_name);
; 73   : #endif	
; 74   :     return;
; 75   :   }
; 76   :   fprintf(fd,"SOFTIMAGE 4D Creative Environment    v 1.6  \"ASCII\"\n\n");

	push	OFFSET ??_C@_0DG@GICDJNDA@SOFTIMAGE?54D?5Creative?5Environmen@
	push	eax
	call	_fprintf

; 77   :   fprintf(fd,"PMSH    \"%s\"\n  {\n  ",name);

	mov	eax, DWORD PTR _fd
	lea	edx, DWORD PTR _name$[ebp]
	push	edx
	push	OFFSET ??_C@_0BE@NMDGDPDO@PMSH?5?5?5?5?$CC?$CFs?$CC?6?5?5?$HL?6?5?5?$AA@
	push	eax
	call	_fprintf

; 78   : 
; 79   :   /* vertex list */
; 80   :   vnumber = (int*)temp_calloc(web.skel[VERTEX].max_ord+1,sizeof(int*));

	mov	ecx, DWORD PTR _web+68
	push	80					; 00000050H
	push	OFFSET ??_C@_0L@IOPDGBOD@SOFTIMAG?4C?$AA@
	inc	ecx
	push	4
	push	ecx
	call	_kb_temp_calloc

; 81   : 
; 82   :   fprintf(fd,"    vertex %ld\n",web.skel[VERTEX].count);

	mov	edx, DWORD PTR _web+64
	push	edx
	mov	DWORD PTR _vnumber$[ebp], eax
	mov	eax, DWORD PTR _fd
	push	OFFSET ??_C@_0BA@MKGDENGK@?5?5?5?5vertex?5?$CFld?6?$AA@
	push	eax
	call	_fprintf

; 83   :   n = 1;
; 84   :   FOR_ALL_VERTICES(v_id)

	mov	edi, DWORD PTR _web+48
	mov	esi, edi
	shr	esi, 28					; 0000001cH
	add	esp, 48					; 00000030H
	and	esi, 1
	mov	DWORD PTR _n$[ebp], 1
	je	$LN8@softimage
	mov	ebx, DWORD PTR _web+12
	npad	1
$LL10@softimage:
	and	edi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+edi*4]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN9@softimage

; 85   :   { REAL *x = get_coord(v_id);

	mov	edx, DWORD PTR _web+104
	mov	eax, DWORD PTR _dymem
	mov	eax, DWORD PTR [edx+eax+64]

; 86   :     fprintf(fd,"%12d %14.12f %14.12f %14.12f\n",n,
; 87   :       (DOUBLE)x[0],(DOUBLE)x[1],(DOUBLE)x[2]);

	fld	QWORD PTR [eax+ecx+16]
	mov	ebx, DWORD PTR _n$[ebp]
	sub	esp, 24					; 00000018H
	fstp	QWORD PTR [esp+16]
	fld	QWORD PTR [eax+ecx+8]
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR _fd
	fstp	QWORD PTR [esp]
	push	ebx
	push	OFFSET ??_C@_0BO@MIANDKCP@?$CF12d?5?$CF14?412f?5?$CF14?412f?5?$CF14?412f?6?$AA@
	push	ecx
	call	_fprintf
	add	esp, 36					; 00000024H

; 88   :     vnumber[loc_ordinal(v_id)] = n;

	test	esi, esi
	je	SHORT $LN23@softimage
	mov	eax, edi
	jmp	SHORT $LN24@softimage
$LN23@softimage:
	or	eax, -1
$LN24@softimage:
	mov	edx, DWORD PTR _vnumber$[ebp]
	mov	DWORD PTR [edx+eax*4], ebx

; 89   :     n++;

	inc	ebx
	mov	DWORD PTR _n$[ebp], ebx
	mov	ebx, DWORD PTR _web+12
$LN9@softimage:

; 83   :   n = 1;
; 84   :   FOR_ALL_VERTICES(v_id)

	mov	eax, DWORD PTR [ebx+edi*4]
	mov	edi, DWORD PTR [eax]
	mov	esi, edi
	shr	esi, 28					; 0000001cH
	and	esi, 1
	jne	$LL10@softimage
$LN8@softimage:

; 90   :   } 
; 91   :  
; 92   : 
; 93   :   /* triangle list */
; 94   :   fprintf(fd,"\n    polygon %ld\n",web.skel[FACET].count);

	mov	ecx, DWORD PTR _web+288
	mov	edx, DWORD PTR _fd
	push	ecx
	push	OFFSET ??_C@_0BC@GGPANAOB@?6?5?5?5?5polygon?5?$CFld?6?$AA@
	push	edx
	call	_fprintf

; 95   :   FOR_ALL_FACETS(f_id)

	mov	ecx, DWORD PTR _web+272
	mov	edx, ecx
	shr	edx, 28					; 0000001cH
	add	esp, 12					; 0000000cH
	and	edx, 1
	je	$LN3@softimage
	mov	ebx, DWORD PTR _web+236
$LL5@softimage:
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	esi, DWORD PTR [ebx+eax]
	mov	DWORD PTR tv1045[ebp], eax
	mov	eax, DWORD PTR [esi+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	je	$LN4@softimage

; 96   :   { facetedge_id fe = get_facet_fe(f_id);

	test	edx, edx
	jne	SHORT $LN34@softimage
	xor	eax, eax
	jmp	SHORT $LN35@softimage
$LN34@softimage:
	mov	esi, DWORD PTR [esi+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN33@softimage
	xor	esi, 134217728				; 08000000H
$LN33@softimage:
	mov	eax, esi
$LN35@softimage:

; 97   :     facetedge_id next_fe = get_next_edge(fe);

	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN38@softimage
	mov	edx, DWORD PTR [ecx+28]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN98@softimage
$LN38@softimage:
	mov	edx, DWORD PTR [ecx+32]
$LN98@softimage:

; 98   :     int oh = vnumber[loc_ordinal(get_fe_headv(fe))];

	mov	ebx, DWORD PTR _web+636
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _web+216
	mov	DWORD PTR _next_fe$89095[ebp], edx
	mov	edx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ecx+edx+304]
	mov	edx, DWORD PTR _web+124
	mov	esi, eax
	test	eax, 134217728				; 08000000H
	je	SHORT $LN44@softimage
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+esi*4]
	mov	esi, DWORD PTR [ecx+esi]
	jmp	SHORT $LN43@softimage
$LN44@softimage:
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+esi*4]
	lea	esi, DWORD PTR [esi+ebx*4]
	mov	esi, DWORD PTR [esi+ecx]
$LN43@softimage:
	test	esi, 268435456				; 10000000H
	je	SHORT $LN25@softimage
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+esi*4]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN50@softimage
	mov	esi, DWORD PTR [ecx+esi]
	and	esi, 134217727				; 07ffffffH
	jmp	SHORT $LN26@softimage
$LN50@softimage:
	lea	esi, DWORD PTR [esi+ebx*4]
	mov	esi, DWORD PTR [esi+ecx]
	and	esi, 134217727				; 07ffffffH
	jmp	SHORT $LN26@softimage
$LN25@softimage:
	or	esi, -1
$LN26@softimage:
	mov	edi, DWORD PTR _vnumber$[ebp]
	mov	esi, DWORD PTR [edi+esi*4]
	mov	DWORD PTR _oh$89096[ebp], esi

; 99   :     fprintf(fd,"     %10d %10d %10d %10d\n",oh,
; 100  :             vnumber[loc_ordinal(get_fe_headv(next_fe))],
; 101  :             vnumber[loc_ordinal(get_fe_tailv(fe))],
; 102  :             vnumber[loc_ordinal(get_fe_tailv(fe))]);

	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+esi*4]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN56@softimage
	lea	esi, DWORD PTR [esi+ebx*4]
	mov	esi, DWORD PTR [esi+ecx]
	jmp	SHORT $LN55@softimage
$LN56@softimage:
	mov	esi, DWORD PTR [ecx+esi]
$LN55@softimage:
	test	esi, 268435456				; 10000000H
	je	SHORT $LN27@softimage
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+esi*4]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN62@softimage
	lea	esi, DWORD PTR [esi+ebx*4]
	mov	esi, DWORD PTR [esi+ecx]
	and	esi, 134217727				; 07ffffffH
	mov	DWORD PTR tv292[ebp], esi
	jmp	SHORT $LN28@softimage
$LN62@softimage:
	mov	esi, DWORD PTR [ecx+esi]
	and	esi, 134217727				; 07ffffffH
	mov	DWORD PTR tv292[ebp], esi
	jmp	SHORT $LN28@softimage
$LN27@softimage:
	mov	DWORD PTR tv292[ebp], -1
$LN28@softimage:
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+esi*4]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN68@softimage
	lea	esi, DWORD PTR [esi+ebx*4]
	mov	edi, DWORD PTR [esi+ecx]
	jmp	SHORT $LN67@softimage
$LN68@softimage:
	mov	edi, DWORD PTR [ecx+esi]
$LN67@softimage:
	test	edi, 268435456				; 10000000H
	je	SHORT $LN29@softimage
	test	eax, 134217728				; 08000000H
	je	SHORT $LN74@softimage
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	lea	eax, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR [eax+ecx]
	and	eax, 134217727				; 07ffffffH
	mov	DWORD PTR tv308[ebp], eax
	jmp	SHORT $LN30@softimage
$LN74@softimage:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [ecx+eax]
	and	eax, 134217727				; 07ffffffH
	mov	DWORD PTR tv308[ebp], eax
	jmp	SHORT $LN30@softimage
$LN29@softimage:
	mov	DWORD PTR tv308[ebp], -1
$LN30@softimage:
	mov	edi, DWORD PTR _next_fe$89095[ebp]
	mov	esi, DWORD PTR _web+460
	mov	eax, edi
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [eax+20]
	and	edi, 134217728				; 08000000H
	xor	eax, edi
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+esi*4]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN80@softimage
	mov	edi, DWORD PTR [ecx+esi]
	jmp	SHORT $LN79@softimage
$LN80@softimage:
	lea	esi, DWORD PTR [esi+ebx*4]
	mov	edi, DWORD PTR [esi+ecx]
$LN79@softimage:
	test	edi, 268435456				; 10000000H
	je	SHORT $LN31@softimage
	test	eax, 134217728				; 08000000H
	je	SHORT $LN86@softimage
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR [ecx+edx]
	and	ecx, 134217727				; 07ffffffH
	jmp	SHORT $LN32@softimage
$LN86@softimage:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	lea	edx, DWORD PTR [eax+ebx*4]
	mov	ecx, DWORD PTR [edx+ecx]
	and	ecx, 134217727				; 07ffffffH
	jmp	SHORT $LN32@softimage
$LN31@softimage:
	or	ecx, -1
$LN32@softimage:
	mov	eax, DWORD PTR _vnumber$[ebp]
	mov	edx, DWORD PTR tv292[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	push	edx
	mov	edx, DWORD PTR tv308[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR _oh$89096[ebp]
	push	edx
	mov	edx, DWORD PTR _fd
	push	eax
	push	ecx
	push	OFFSET ??_C@_0BK@EHIOMFII@?5?5?5?5?5?$CF10d?5?$CF10d?5?$CF10d?5?$CF10d?6?$AA@
	push	edx
	call	_fprintf
	mov	ebx, DWORD PTR _web+236
	add	esp, 24					; 00000018H
$LN4@softimage:

; 95   :   FOR_ALL_FACETS(f_id)

	mov	eax, DWORD PTR tv1045[ebp]
	mov	ecx, DWORD PTR [ebx+eax]
	mov	ecx, DWORD PTR [ecx]
	mov	edx, ecx
	shr	edx, 28					; 0000001cH
	and	edx, 1
	jne	$LL5@softimage
$LN3@softimage:

; 103  :   } 
; 104  :   fprintf(fd,"    }\n\n");

	mov	edx, DWORD PTR _fd
	push	OFFSET ??_C@_07EFGEEHD@?5?5?5?5?$HN?6?6?$AA@
	push	edx
	call	_fprintf

; 105  :  
; 106  :   fclose(fd);

	mov	eax, DWORD PTR _fd
	push	eax
	call	_fclose

; 107  : 
; 108  :   temp_free((char*)vnumber);

	mov	ecx, DWORD PTR _vnumber$[ebp]
	push	ecx
	call	_temp_free

; 109  : } // end softimage()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_softimage ENDP
_TEXT	ENDS
END
