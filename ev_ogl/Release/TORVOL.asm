; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\TORVOL.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_get_fe_edge
EXTRN	_web:BYTE
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
;	COMDAT _get_fe_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_edge PROC					; COMDAT

; 43   : {

	push	ebp
	mov	ebp, esp

; 44   :   edge_id e_id;
; 45   :     
; 46   :   e_id = feptr(fe_id)->fe_edge_id;

	mov	eax, DWORD PTR _fe_id$[ebp]

; 47   : 
; 48   :   /*
; 49   :   if ( inverted(fe_id) ) invert(e_id);
; 50   :   return e_id;
; 51   :   */
; 52   :   
; 53   :   return same_sign(e_id,fe_id);

	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]

; 54   : }

	pop	ebp
	ret	0
_get_fe_edge ENDP
_TEXT	ENDS
PUBLIC	_get_next_edge
; Function compile flags: /Ogtp
;	COMDAT _get_next_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_next_edge PROC					; COMDAT

; 76   : {

	push	ebp
	mov	ebp, esp

; 77   :   if ( inverted(fe_id) ) return inverse_id(feptr(fe_id)->nextedge[0]);

	mov	eax, DWORD PTR _fe_id$[ebp]
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_next_e
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H

; 79   : }

	pop	ebp
	ret	0
$LN2@get_next_e:

; 78   :   else return feptr(fe_id)->nextedge[1];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]

; 79   : }

	pop	ebp
	ret	0
_get_next_edge ENDP
_TEXT	ENDS
PUBLIC	_get_edge_wrap
EXTRN	_sym_inverse:DWORD
EXTRN	_dymem:DWORD
; Function compile flags: /Ogtp
;	COMDAT _get_edge_wrap
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_wrap PROC					; COMDAT

; 163  : {

	push	ebp
	mov	ebp, esp

; 164  :   WRAPTYPE wrap = *EINT(e_id,E_WRAP_ATTR) ;

	mov	ecx, DWORD PTR _e_id$[ebp]
	mov	edx, DWORD PTR _web+124
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+216
	push	esi
	mov	esi, DWORD PTR _dymem
	mov	edx, DWORD PTR [edx+esi+784]
	mov	eax, DWORD PTR [eax+edx]
	pop	esi

; 165  :   return    ( inverted(e_id) ? (*sym_inverse)(wrap) : wrap );

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN4@get_edge_w
	push	eax
	call	DWORD PTR _sym_inverse
	add	esp, 4
$LN4@get_edge_w:

; 166  : }

	pop	ebp
	ret	0
_get_edge_wrap ENDP
_TEXT	ENDS
PUBLIC	_get_facet_body
; Function compile flags: /Ogtp
;	COMDAT _get_facet_body
_TEXT	SEGMENT
_f_id$ = 8						; size = 4
_get_facet_body PROC					; COMDAT

; 250  : {

	push	ebp
	mov	ebp, esp

; 251  :   if ( web.skel[BODY].count == 0 ) return NULLID;

	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN4@get_facet_
$LN7@get_facet_:
	xor	eax, eax

; 255  : }

	pop	ebp
	ret	0
$LN4@get_facet_:

; 252  :   if ( !valid_id(f_id) ) return NULLID;

	mov	eax, DWORD PTR _f_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN7@get_facet_

; 253  :   if ( inverted(f_id) ) return F_ELID(f_id,F_BODY_LIST_ATTR)[1];

	mov	ecx, DWORD PTR _web+236
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_facet_
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax+4]

; 255  : }

	pop	ebp
	ret	0
$LN2@get_facet_:

; 254  :   else  return F_ELID(f_id,F_BODY_LIST_ATTR)[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax]

; 255  : }

	pop	ebp
	ret	0
_get_facet_body ENDP
_TEXT	ENDS
PUBLIC	_get_facet_fe
; Function compile flags: /Ogtp
;	COMDAT _get_facet_fe
_TEXT	SEGMENT
_f_id$ = 8						; size = 4
_get_facet_fe PROC					; COMDAT

; 260  : {

	push	ebp
	mov	ebp, esp

; 261  :   facetedge_id fe;
; 262  :   
; 263  :   if ( !valid_id(f_id) ) return NULLID;

	mov	ecx, DWORD PTR _f_id$[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN2@get_facet_@2
	xor	eax, eax

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
$LN2@get_facet_@2:

; 264  :   fe = fptr(f_id)->fe_id;

	mov	edx, DWORD PTR _web+236
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]

; 265  :   if ( inverted(f_id) ) invert(fe);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_facet_@2
	xor	eax, 134217728				; 08000000H
$LN3@get_facet_@2:

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
_get_facet_fe ENDP
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	_get_body_volconst
EXTRN	__fltused:DWORD
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _get_body_volconst
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_volconst PROC					; COMDAT

; 320  :   { return    ( valid_id(b_id) ?  bptr(b_id)->volconst : 0.0 ) ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_v
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+328]
	pop	ebp
	ret	0
$LN3@get_body_v:
	fldz
	pop	ebp
	ret	0
_get_body_volconst ENDP
_TEXT	ENDS
PUBLIC	_cut_int
EXTRN	_scoeff:BYTE
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\torvol.c
;	COMDAT _cut_int
_TEXT	SEGMENT
_u$ = 8							; size = 4
_cut_int PROC						; COMDAT

; 493  : { REAL area = 0.0;

	push	ebp
	mov	ebp, esp

; 494  :   int i,j;
; 495  :   for ( i = 0 ; i < EDGE_CTRL ; i++ )
; 496  :      for ( j = 0 ; j < EDGE_CTRL ; j ++ )
; 497  :         area += scoeff[i][j]*u[i][0]*u[j][1];

	mov	edx, DWORD PTR _u$[ebp]
	fld	QWORD PTR _scoeff
	mov	eax, DWORD PTR [edx]
	fmul	QWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx+8]
	fmul	QWORD PTR [eax+8]
	fadd	QWORD PTR __real@0000000000000000
	fld	QWORD PTR _scoeff+8
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR [ecx+8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _scoeff+16
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _scoeff+24
	fmul	QWORD PTR [ecx]
	fmul	QWORD PTR [eax+8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _scoeff+32
	fmul	QWORD PTR [ecx]
	fmul	QWORD PTR [ecx+8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _scoeff+40
	fmul	QWORD PTR [ecx]
	fmul	QWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx]
	fmul	QWORD PTR _scoeff+48
	fmul	QWORD PTR [eax+8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx]
	fmul	QWORD PTR _scoeff+56
	fmul	QWORD PTR [ecx+8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx]
	fmul	QWORD PTR _scoeff+64
	fmul	QWORD PTR [edx+8]
	faddp	ST(1), ST(0)

; 498  :   return area;
; 499  : } // end cut_int()

	pop	ebp
	ret	0
_cut_int ENDP
_TEXT	ENDS
PUBLIC	_cut_grad
; Function compile flags: /Ogtp
;	COMDAT _cut_grad
_TEXT	SEGMENT
tv1872 = -4						; size = 4
_u$ = 8							; size = 4
_ugrad$ = 12						; size = 4
_sign$ = 16						; size = 4
_cut_grad PROC						; COMDAT

; 511  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 512  :   int i,j;
; 513  :   for ( i = 0 ; i < EDGE_CTRL ; i++ )
; 514  :      for ( j = 0 ; j < EDGE_CTRL ; j ++ )
; 515  :      { ugrad[i][0] += sign*scoeff[i][j]*u[j][1];

	fild	DWORD PTR _sign$[ebp]
	mov	eax, DWORD PTR _ugrad$[ebp]
	fld	QWORD PTR _scoeff
	mov	edx, DWORD PTR [eax]
	push	ebx
	fmul	ST(0), ST(1)
	push	esi
	push	edi
	mov	edi, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [edi]
	fmul	QWORD PTR [ecx+8]

; 516  :        ugrad[j][1] += sign*scoeff[i][j]*u[i][0];

	mov	ebx, DWORD PTR [eax+4]
	mov	esi, edx
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	fld	QWORD PTR _scoeff
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [ecx]
	fadd	QWORD PTR [esi+8]
	fstp	QWORD PTR [esi+8]
	mov	esi, DWORD PTR [edi+4]
	fld	QWORD PTR _scoeff+8
	mov	edi, DWORD PTR [edi+8]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [esi+8]
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	fld	QWORD PTR _scoeff+8
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [ecx]
	fadd	QWORD PTR [ebx+8]
	fstp	QWORD PTR [ebx+8]
	fld	QWORD PTR _scoeff+16
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [edi+8]
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR [eax+8]
	fld	QWORD PTR _scoeff+16
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [ecx]
	fadd	QWORD PTR [edx+8]
	fstp	QWORD PTR [edx+8]
	mov	edx, ebx
	fld	QWORD PTR _scoeff+24
	mov	ebx, DWORD PTR [eax]
	fmul	ST(0), ST(1)
	mov	DWORD PTR tv1872[ebp], ebx
	fmul	QWORD PTR [ecx+8]
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	fld	QWORD PTR _scoeff+24
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [esi]
	fadd	QWORD PTR [ebx+8]
	fstp	QWORD PTR [ebx+8]
	mov	ebx, edx
	fld	QWORD PTR _scoeff+32
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [esi+8]
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	fld	QWORD PTR _scoeff+32
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [esi]
	fadd	QWORD PTR [ebx+8]
	fstp	QWORD PTR [ebx+8]
	fld	QWORD PTR _scoeff+40
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [edi+8]
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR [eax+8]
	fld	QWORD PTR _scoeff+40
	mov	eax, edx
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [esi]
	fadd	QWORD PTR [edx+8]
	fstp	QWORD PTR [edx+8]
	fld	QWORD PTR _scoeff+48
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [ecx+8]
	mov	ecx, DWORD PTR tv1872[ebp]
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	fld	QWORD PTR _scoeff+48
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [edi]
	fadd	QWORD PTR [ecx+8]
	fstp	QWORD PTR [ecx+8]
	fld	QWORD PTR _scoeff+56
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [esi+8]
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	fld	QWORD PTR _scoeff+56
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [edi]
	fadd	QWORD PTR [ebx+8]
	fstp	QWORD PTR [ebx+8]
	fld	QWORD PTR _scoeff+64
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [edi+8]
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	fmul	QWORD PTR _scoeff+64
	fmul	QWORD PTR [edi]
	pop	edi
	pop	esi
	pop	ebx
	fadd	QWORD PTR [edx+8]
	fstp	QWORD PTR [edx+8]

; 517  :      }
; 518  : } // end cut_grad()

	mov	esp, ebp
	pop	ebp
	ret	0
_cut_grad ENDP
_TEXT	ENDS
PUBLIC	_cut_hess
; Function compile flags: /Ogtp
;	COMDAT _cut_hess
_TEXT	SEGMENT
tv2249 = -48						; size = 4
tv2427 = -44						; size = 4
tv2426 = -40						; size = 4
tv2425 = -36						; size = 4
tv2424 = -32						; size = 4
tv2224 = -28						; size = 4
tv2229 = -24						; size = 4
tv2239 = -20						; size = 4
tv2422 = -16						; size = 4
tv2423 = -12						; size = 4
tv2247 = -8						; size = 4
tv2244 = -4						; size = 4
_u$ = 8							; size = 4
_ugrad$ = 12						; size = 4
_uhess$ = 16						; size = 4
_sign$ = 20						; size = 4
_cut_hess PROC						; COMDAT

; 531  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H

; 532  :   int i,j;
; 533  :   for ( i = 0 ; i < EDGE_CTRL ; i++ )

	push	ebx
	push	esi
	push	edi
	mov	edx, DWORD PTR _u$[ebp]
	fild	DWORD PTR _sign$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ugrad$[ebp]
	mov	DWORD PTR tv2422[ebp], eax
	mov	eax, DWORD PTR [edx+4]
	mov	ebx, DWORD PTR _uhess$[ebp]
	mov	DWORD PTR tv2424[ebp], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	esi, DWORD PTR [ebx+4]
	mov	ebx, DWORD PTR [ebx]
	mov	DWORD PTR tv2425[ebp], eax
	mov	eax, DWORD PTR [edx+8]
	sub	edx, ecx
	sub	ebx, esi
	mov	DWORD PTR tv2239[ebp], edx
	mov	edx, DWORD PTR _uhess$[ebp]
	mov	DWORD PTR tv2224[ebp], ebx
	mov	ebx, edx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR tv2426[ebp], eax
	mov	eax, DWORD PTR [ecx+8]
	sub	esi, ecx
	sub	ebx, ecx
	mov	edi, DWORD PTR [ecx]
	sub	edx, ecx
	mov	DWORD PTR tv2427[ebp], eax
	mov	DWORD PTR tv2423[ebp], edi
	mov	eax, OFFSET _scoeff+8
	mov	DWORD PTR tv2229[ebp], esi
	mov	DWORD PTR tv2244[ebp], ebx
	mov	DWORD PTR tv2249[ebp], edx
	jmp	SHORT $LN6@cut_hess
$LN17@cut_hess:
	mov	edi, DWORD PTR tv2423[ebp]
	mov	ebx, DWORD PTR tv2244[ebp]
$LN6@cut_hess:

; 534  :      for ( j = 0 ; j < EDGE_CTRL ; j ++ )
; 535  :      { ugrad[i][0] += sign*scoeff[i][j]*u[j][1];

	fld	ST(0)
	mov	edx, DWORD PTR [ecx]
	fmul	QWORD PTR [eax-8]
	mov	esi, DWORD PTR tv2422[ebp]
	fmul	QWORD PTR [esi+8]

; 536  :        ugrad[j][1] += sign*scoeff[i][j]*u[i][0];

	mov	esi, DWORD PTR tv2239[ebp]
	mov	esi, DWORD PTR [ecx+esi]
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	fld	ST(0)
	fmul	QWORD PTR [eax-8]
	fmul	QWORD PTR [esi]
	fadd	QWORD PTR [edi+8]
	fstp	QWORD PTR [edi+8]

; 537  :        uhess[i][j][0][1] += sign*scoeff[i][j];

	mov	edi, DWORD PTR [ecx+ebx]
	mov	edi, DWORD PTR [edi]
	fld	ST(0)
	mov	edi, DWORD PTR [edi]
	fmul	QWORD PTR [eax-8]

; 538  :        uhess[j][i][1][0] += sign*scoeff[i][j];

	mov	ebx, DWORD PTR tv2224[ebp]
	fadd	QWORD PTR [edi+8]
	fstp	QWORD PTR [edi+8]
	mov	edi, DWORD PTR tv2229[ebp]
	add	edi, ecx
	mov	ebx, DWORD PTR [edi+ebx]
	fld	ST(0)
	fmul	QWORD PTR [eax-8]
	mov	ebx, DWORD PTR [ebx+4]
	fadd	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv2424[ebp]
	fld	QWORD PTR [eax]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR tv2425[ebp]
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	fld	QWORD PTR [eax]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [esi]
	fadd	QWORD PTR [ebx+8]
	fstp	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR tv2244[ebp]
	mov	ebx, DWORD PTR [ecx+ebx]
	fld	QWORD PTR [eax]
	fmul	ST(0), ST(1)
	mov	DWORD PTR tv2247[ebp], ebx
	mov	ebx, DWORD PTR [ebx+4]
	mov	ebx, DWORD PTR [ebx]
	fadd	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR tv2247[ebp]
	mov	ebx, DWORD PTR [ebx+4]
	mov	ebx, DWORD PTR [ebx]
	fstp	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR [edi]
	fld	QWORD PTR [eax]
	mov	ebx, DWORD PTR [ebx+4]
	mov	edi, DWORD PTR [edi]
	fmul	ST(0), ST(1)
	mov	edi, DWORD PTR [edi+4]
	fadd	QWORD PTR [ebx]
	fstp	QWORD PTR [edi]
	mov	edi, DWORD PTR tv2426[ebp]
	fld	ST(0)
	fmul	QWORD PTR [eax+8]
	fmul	QWORD PTR [edi+8]
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR tv2427[ebp]
	fld	ST(0)
	fmul	QWORD PTR [eax+8]
	fmul	QWORD PTR [esi]
	fadd	QWORD PTR [edx+8]
	fstp	QWORD PTR [edx+8]
	mov	edx, DWORD PTR tv2247[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	esi, DWORD PTR [edx]
	fld	ST(0)
	fmul	QWORD PTR [eax+8]
	mov	edx, esi
	fadd	QWORD PTR [esi+8]
	fstp	QWORD PTR [edx+8]
	mov	edx, DWORD PTR tv2249[ebp]
	mov	esi, DWORD PTR [ecx+edx]
	mov	esi, DWORD PTR [esi+4]
	fld	ST(0)
	fmul	QWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR [edx+4]
	add	eax, 24					; 00000018H
	fadd	QWORD PTR [esi]
	add	ecx, 4
	fstp	QWORD PTR [edx]
	cmp	eax, OFFSET _scoeff+80
	jl	$LN17@cut_hess

; 532  :   int i,j;
; 533  :   for ( i = 0 ; i < EDGE_CTRL ; i++ )

	pop	edi
	fstp	ST(0)
	pop	esi
	pop	ebx

; 539  :      }
; 540  : } // end cut_hess()

	mov	esp, ebp
	pop	ebp
	ret	0
_cut_hess ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@CFIBBAKF@Internal?5error?3?5Bad?5allwrap?5in?5f@ ; `string'
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_q_facet_torus_volume_q
EXTRN	_kb_error:PROC
EXTRN	_vcoeff:BYTE
EXTRN	_mat_mul_tr:PROC
EXTRN	_mat2d_setup:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0CO@CFIBBAKF@Internal?5error?3?5Bad?5allwrap?5in?5f@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0CO@CFIBBAKF@Internal?5error?3?5Bad?5allwrap?5in?5f@ DB 'Internal e'
	DB	'rror: Bad allwrap in facet_volume.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\torvol.c
CONST	ENDS
;	COMDAT _q_facet_torus_volume_q
_TEXT	SEGMENT
_uqXvS$ = -404						; size = 28
_vol$ = -376						; size = 8
_f_info$GSCopy$ = -368					; size = 4
_fe$ = -364						; size = 4
tv2101 = -360						; size = 8
tv2099 = -360						; size = 8
tv2097 = -360						; size = 8
tv2095 = -360						; size = 8
_i$ = -356						; size = 4
_uxJ$ = -352						; size = 336
_w$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_q_facet_torus_volume_q PROC				; COMDAT

; 550  : { REAL **x;

	push	ebp
	mov	ebp, esp
	sub	esp, 404				; 00000194H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	mov	ebx, DWORD PTR _f_info$[ebp]
	push	esi
	push	edi

; 551  :   REAL vol;
; 552  :   int i,j,k;
; 553  :   REAL **dx = web.inverse_periods;

	mov	edi, DWORD PTR _web+1612

; 554  :   WRAPTYPE w[FACET_EDGES];
; 555  :   unsigned long allwrap;
; 556  :   MAT2D(u,FACET_CTRL+1,MAXCOORD); /* affine coordinates of vertices */

	push	6
	push	7
	lea	eax, DWORD PTR _uxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _uqXvS$[ebp]
	push	ecx

; 579  :   for ( i = 0 ; i < FACET_EDGES ; i++, fe = get_next_edge(fe) ) 

	mov	DWORD PTR _f_info$GSCopy$[ebp], ebx
	call	_mat2d_setup
	mov	esi, eax
	mov	eax, DWORD PTR _web+616
	push	eax
	push	eax
	push	6
	push	esi
	push	edi
	add	ebx, 416				; 000001a0H
	push	ebx
	call	_mat_mul_tr
	fldz
	mov	edx, DWORD PTR [esi]
	fld	ST(0)
	mov	DWORD PTR [esi+24], edx
	fst	QWORD PTR _vol$[ebp]
	add	esp, 40					; 00000028H
	mov	edx, esi
	mov	eax, OFFSET _vcoeff+8
$LN43@q_facet_to:

; 570  :      for ( j = 0 ; j < FACET_CTRL ; j++ )

	xor	ecx, ecx
	mov	ebx, eax
$LN40@q_facet_to:

; 571  :         for ( k = 0 ; k < FACET_CTRL ; k++ )
; 572  :         { REAL v = vcoeff[i][j][k];

	fld	QWORD PTR [ebx-8]

; 573  :           if ( v == 0.0 ) continue;

	fld	ST(0)
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN86@q_facet_to

; 574  :           vol += v*u[i][2]*(u[j][0]*u[k][1]-u[j][1]*u[k][0]);

	mov	eax, DWORD PTR [esi]
	mov	edi, DWORD PTR [esi+ecx*4]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [edi]
	fld	QWORD PTR [edi+8]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+16]
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN36@q_facet_to
$LN86@q_facet_to:
	fstp	ST(0)
$LN36@q_facet_to:

; 571  :         for ( k = 0 ; k < FACET_CTRL ; k++ )
; 572  :         { REAL v = vcoeff[i][j][k];

	fld	QWORD PTR [ebx]

; 573  :           if ( v == 0.0 ) continue;

	fld	ST(0)
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN89@q_facet_to

; 574  :           vol += v*u[i][2]*(u[j][0]*u[k][1]-u[j][1]*u[k][0]);

	mov	eax, DWORD PTR [esi+4]
	mov	edi, DWORD PTR [esi+ecx*4]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [edi]
	fld	QWORD PTR [edi+8]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+16]
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN73@q_facet_to
$LN89@q_facet_to:
	fstp	ST(0)
$LN73@q_facet_to:

; 571  :         for ( k = 0 ; k < FACET_CTRL ; k++ )
; 572  :         { REAL v = vcoeff[i][j][k];

	fld	QWORD PTR [ebx+8]

; 573  :           if ( v == 0.0 ) continue;

	fld	ST(0)
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN92@q_facet_to

; 574  :           vol += v*u[i][2]*(u[j][0]*u[k][1]-u[j][1]*u[k][0]);

	mov	eax, DWORD PTR [esi+8]
	mov	edi, DWORD PTR [esi+ecx*4]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [edi]
	fld	QWORD PTR [edi+8]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+16]
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN75@q_facet_to
$LN92@q_facet_to:
	fstp	ST(0)
$LN75@q_facet_to:

; 571  :         for ( k = 0 ; k < FACET_CTRL ; k++ )
; 572  :         { REAL v = vcoeff[i][j][k];

	fld	QWORD PTR [ebx+16]

; 573  :           if ( v == 0.0 ) continue;

	fld	ST(0)
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN95@q_facet_to

; 574  :           vol += v*u[i][2]*(u[j][0]*u[k][1]-u[j][1]*u[k][0]);

	mov	eax, DWORD PTR [esi+12]
	mov	edi, DWORD PTR [esi+ecx*4]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [edi]
	fld	QWORD PTR [edi+8]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+16]
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN77@q_facet_to
$LN95@q_facet_to:
	fstp	ST(0)
$LN77@q_facet_to:

; 571  :         for ( k = 0 ; k < FACET_CTRL ; k++ )
; 572  :         { REAL v = vcoeff[i][j][k];

	fld	QWORD PTR [ebx+24]

; 573  :           if ( v == 0.0 ) continue;

	fld	ST(0)
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN98@q_facet_to

; 574  :           vol += v*u[i][2]*(u[j][0]*u[k][1]-u[j][1]*u[k][0]);

	mov	eax, DWORD PTR [esi+16]
	mov	edi, DWORD PTR [esi+ecx*4]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [edi]
	fld	QWORD PTR [edi+8]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+16]
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN79@q_facet_to
$LN98@q_facet_to:
	fstp	ST(0)
$LN79@q_facet_to:

; 571  :         for ( k = 0 ; k < FACET_CTRL ; k++ )
; 572  :         { REAL v = vcoeff[i][j][k];

	fld	QWORD PTR [ebx+32]

; 573  :           if ( v == 0.0 ) continue;

	fld	ST(0)
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN101@q_facet_to

; 574  :           vol += v*u[i][2]*(u[j][0]*u[k][1]-u[j][1]*u[k][0]);

	mov	eax, DWORD PTR [esi+20]
	mov	edi, DWORD PTR [esi+ecx*4]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [edi]
	fld	QWORD PTR [edi+8]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+16]
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN39@q_facet_to
$LN101@q_facet_to:
	fstp	ST(0)
$LN39@q_facet_to:

; 570  :      for ( j = 0 ; j < FACET_CTRL ; j++ )

	inc	ecx
	add	ebx, 48					; 00000030H
	cmp	ecx, 6
	jl	$LN40@q_facet_to

; 557  :   facetedge_id fe;
; 558  : 
; 559  :   x = f_info->x;
; 560  : 
; 561  :   /* get affine coordinates of vertices */
; 562  :   mat_mul_tr(x,dx,u,FACET_CTRL,SDIM,SDIM);
; 563  :   u[FACET_CTRL] = u[0]; /* handy wrap around */
; 564  : 
; 565  :   /* main integral over facet */
; 566  : 
; 567  :   /* volume, integral of z dx dy */
; 568  :   vol = 0.0;
; 569  :   for ( i = 0 ; i < FACET_CTRL ; i++ )

	add	edx, 4
	mov	eax, ebx
	cmp	ebx, OFFSET _vcoeff+1736
	jl	$LN43@q_facet_to

; 575  :         }
; 576  : 
; 577  :   /* add corrections due to wraps */
; 578  :   fe = get_facet_fe(f_info->id);

	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	fstp	ST(1)
	mov	ecx, DWORD PTR [ecx]
	fst	QWORD PTR _vol$[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN48@q_facet_to
	xor	eax, eax
	jmp	SHORT $LN47@q_facet_to
$LN48@q_facet_to:
	mov	eax, DWORD PTR _web+236
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [edx+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN47@q_facet_to
	xor	eax, 134217728				; 08000000H
$LN47@q_facet_to:

; 579  :   for ( i = 0 ; i < FACET_EDGES ; i++, fe = get_next_edge(fe) ) 

	mov	ecx, DWORD PTR _web+460
	mov	DWORD PTR _fe$[ebp], eax
	mov	DWORD PTR _i$[ebp], 0
$LN82@q_facet_to:

; 580  :      w[i] = get_fe_wrap(fe);

	mov	ebx, DWORD PTR _web+216
	mov	edi, eax
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	ecx, DWORD PTR [edi+ecx]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _web+124
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ebx+ecx+784]
	mov	ecx, DWORD PTR [edx+ecx]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN59@q_facet_to
	push	ecx
	fstp	ST(0)
	call	DWORD PTR _sym_inverse
	fld	QWORD PTR _vol$[ebp]
	add	esp, 4
	jmp	SHORT $LN174@q_facet_to
$LN59@q_facet_to:
	mov	eax, ecx
$LN174@q_facet_to:
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _web+460
	mov	DWORD PTR _w$[ebp+edx*4], eax
	mov	eax, DWORD PTR [edi+ecx]
	inc	edx
	test	DWORD PTR _fe$[ebp], 134217728		; 08000000H
	mov	DWORD PTR _i$[ebp], edx
	je	SHORT $LN52@q_facet_to

; 579  :   for ( i = 0 ; i < FACET_EDGES ; i++, fe = get_next_edge(fe) ) 

	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN175@q_facet_to
$LN52@q_facet_to:
	mov	eax, DWORD PTR [eax+32]
$LN175@q_facet_to:
	mov	DWORD PTR _fe$[ebp], eax
	cmp	edx, 3
	jl	$LN82@q_facet_to

; 581  : 
; 582  :   allwrap = WR(w[0],2)+(WR(w[1],2)<<TWRAPBITS)+(WR(w[2],2)<<(2*TWRAPBITS));

	mov	eax, DWORD PTR _w$[ebp+8]
	mov	ecx, DWORD PTR _w$[ebp+4]
	mov	edx, DWORD PTR _w$[ebp]
	sar	eax, 12					; 0000000cH
	and	eax, 31					; 0000001fH
	shl	eax, 6
	sar	ecx, 12					; 0000000cH
	and	ecx, 31					; 0000001fH
	add	eax, ecx
	sar	edx, 12					; 0000000cH
	shl	eax, 6
	and	edx, 31					; 0000001fH
	add	eax, edx

; 583  :   switch ( allwrap )

	cmp	eax, 4127				; 0000101fH
	ja	$LN46@q_facet_to
	je	$LN126@q_facet_to
	test	eax, eax
	je	$LN4@q_facet_to
	cmp	eax, 95					; 0000005fH
	je	SHORT $LN132@q_facet_to
	cmp	eax, 1985				; 000007c1H
	jne	$LN143@q_facet_to

; 584  :      { case 0: break;
; 585  :         case (POSWRAP)+(NEGWRAP << TWRAPBITS): break;

	jmp	$LN4@q_facet_to
$LN132@q_facet_to:

; 601  :         case  (NEGWRAP) + (POSWRAP << TWRAPBITS):
; 602  :             vol -= cut_int(u) + cut_int(u+2);

	lea	eax, DWORD PTR [esi+8]
	fstp	ST(0)
	push	eax
	call	_cut_int
	fstp	QWORD PTR tv2095[ebp]
	push	esi
	call	_cut_int
	fadd	QWORD PTR tv2095[ebp]

; 603  :             switch ( WR(f_info->wraps[4],0) )

	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [ecx+832]
	fsubr	QWORD PTR _vol$[ebp]
	and	eax, 31					; 0000001fH
	add	esp, 8
	dec	eax
	je	SHORT $LN12@q_facet_to
	sub	eax, 30					; 0000001eH
	jne	SHORT $LN13@q_facet_to

; 605  :               case NEGWRAP: vol += u[4][1]; break;

	mov	edx, DWORD PTR [esi+16]
	fadd	QWORD PTR [edx+8]
	jmp	SHORT $LN13@q_facet_to
$LN12@q_facet_to:

; 604  :             { case POSWRAP: vol -= u[4][1]; break;

	mov	eax, DWORD PTR [esi+16]
	fsub	QWORD PTR [eax+8]
$LN13@q_facet_to:

; 606  :             }
; 607  :             switch ( WR(f_info->wraps[0],0) )

	mov	eax, DWORD PTR [ecx+816]
	and	eax, 31					; 0000001fH
	dec	eax
	je	SHORT $LN8@q_facet_to
	sub	eax, 30					; 0000001eH
	jne	$LN4@q_facet_to

; 609  :               case NEGWRAP: vol -= u[0][1]; break;

	mov	ecx, DWORD PTR [esi]
	fsub	QWORD PTR [ecx+8]
	jmp	$LN4@q_facet_to
$LN8@q_facet_to:

; 608  :             { case POSWRAP: vol += u[0][1]; break;

	mov	edx, DWORD PTR [esi]

; 610  :             }
; 611  :             break;

	jmp	$LN176@q_facet_to
$LN126@q_facet_to:

; 586  :         case (POSWRAP << TWRAPBITS) + (NEGWRAP << (2*TWRAPBITS)): break; 
; 587  :         case (NEGWRAP) + (POSWRAP << (2*TWRAPBITS)):
; 588  :             vol -= cut_int(u) + cut_int(u+2) + cut_int(u+4);

	lea	eax, DWORD PTR [esi+8]
	fstp	ST(0)
	push	eax
	call	_cut_int
	fstp	QWORD PTR tv2097[ebp]
	push	esi
	call	_cut_int
	fadd	QWORD PTR tv2097[ebp]
	add	esi, 16					; 00000010H
	push	esi
	fstp	QWORD PTR tv2099[ebp]
	call	_cut_int
	fadd	QWORD PTR tv2099[ebp]
	add	esp, 12					; 0000000cH
	fsubr	QWORD PTR _vol$[ebp]

; 589  :             break;

	jmp	$LN4@q_facet_to
$LN46@q_facet_to:

; 583  :   switch ( allwrap )

	sub	eax, 6080				; 000017c0H
	je	$LN138@q_facet_to
	sub	eax, 120897				; 0001d841H
	je	SHORT $LN141@q_facet_to
	sub	eax, 63					; 0000003fH
	je	$LN4@q_facet_to
$LN143@q_facet_to:

; 617  :             }
; 618  :             break;
; 619  :          default: kb_error(1331,"Internal error: Bad allwrap in facet_volume.\n",RECOVERABLE);

	push	1
	fstp	ST(0)
	push	OFFSET ??_C@_0CO@CFIBBAKF@Internal?5error?3?5Bad?5allwrap?5in?5f@
	push	1331					; 00000533H
	call	_kb_error
	fld	QWORD PTR _vol$[ebp]
	add	esp, 12					; 0000000cH
	jmp	$LN4@q_facet_to
$LN141@q_facet_to:

; 590  :         case (POSWRAP ) + (NEGWRAP << (2*TWRAPBITS)):
; 591  :             vol += cut_int(u+2);

	lea	edi, DWORD PTR [esi+8]
	fstp	ST(0)
	push	edi
	call	_cut_int
	fadd	QWORD PTR _vol$[ebp]

; 592  :             switch ( WR(f_info->wraps[2],0) )

	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [ecx+824]
	and	eax, 31					; 0000001fH
	add	esp, 4
	dec	eax
	je	SHORT $LN21@q_facet_to
	sub	eax, 30					; 0000001eH
	jne	SHORT $LN22@q_facet_to

; 594  :               case NEGWRAP: vol += u[2][1];break;

	mov	edx, DWORD PTR [edi]
	fadd	QWORD PTR [edx+8]
	jmp	SHORT $LN22@q_facet_to
$LN21@q_facet_to:

; 593  :             { case POSWRAP: vol -= u[2][1];break;

	mov	eax, DWORD PTR [edi]
	fsub	QWORD PTR [eax+8]
$LN22@q_facet_to:

; 595  :             }
; 596  :             switch ( WR(f_info->wraps[4],0) )

	mov	eax, DWORD PTR [ecx+832]
	and	eax, 31					; 0000001fH
	dec	eax
	je	SHORT $LN17@q_facet_to
	sub	eax, 30					; 0000001eH
	jne	SHORT $LN4@q_facet_to

; 598  :               case NEGWRAP: vol -= u[4][1]; break;

	mov	ecx, DWORD PTR [esi+16]
	fsub	QWORD PTR [ecx+8]
	jmp	SHORT $LN4@q_facet_to
$LN17@q_facet_to:

; 597  :             { case POSWRAP: vol += u[4][1]; break;

	mov	edx, DWORD PTR [esi+16]

; 599  :             }
; 600  :             break;

	jmp	SHORT $LN176@q_facet_to
$LN138@q_facet_to:

; 612  :         case (NEGWRAP << TWRAPBITS) + (POSWRAP << (2*TWRAPBITS)):
; 613  :             vol -= cut_int(u+2) + cut_int(u+4);

	lea	edi, DWORD PTR [esi+8]
	fstp	ST(0)
	add	esi, 16					; 00000010H
	push	esi
	call	_cut_int
	fstp	QWORD PTR tv2101[ebp]
	push	edi
	call	_cut_int
	fadd	QWORD PTR tv2101[ebp]

; 614  :             switch ( WR(f_info->wraps[2],0) )

	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [eax+824]
	fsubr	QWORD PTR _vol$[ebp]
	and	eax, 31					; 0000001fH
	add	esp, 8
	dec	eax
	je	SHORT $LN3@q_facet_to
	sub	eax, 30					; 0000001eH
	jne	SHORT $LN4@q_facet_to

; 616  :               case NEGWRAP: vol -= u[2][1]; break;

	mov	ecx, DWORD PTR [edi]
	fsub	QWORD PTR [ecx+8]
	jmp	SHORT $LN4@q_facet_to
$LN3@q_facet_to:

; 615  :             { case POSWRAP: vol += u[2][1]; break;

	mov	edx, DWORD PTR [edi]
$LN176@q_facet_to:
	fadd	QWORD PTR [edx+8]
$LN4@q_facet_to:

; 620  : 
; 621  :      }
; 622  :   vol *= web.torusv;
; 623  :  
; 624  :   return vol;
; 625  : } // end  q_facet_torus_volume_q()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fmul	QWORD PTR _web+1600
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_q_facet_torus_volume_q ENDP
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_q_facet_torus_volume_q_grad
EXTRN	_mat_mult:PROC
;	COMDAT __real@3ff0000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\torvol.c
CONST	ENDS
;	COMDAT _q_facet_torus_volume_q_grad
_TEXT	SEGMENT
_ugradqXvS$ = -796					; size = 28
_uqXvS$ = -768						; size = 28
_dx$ = -740						; size = 4
tv3065 = -736						; size = 4
tv231 = -732						; size = 4
tv3075 = -728						; size = 8
tv3073 = -728						; size = 8
tv2877 = -724						; size = 4
tv2871 = -720						; size = 4
tv3151 = -716						; size = 4
tv193 = -712						; size = 4
_i$ = -712						; size = 4
_f_info$GSCopy$ = -708					; size = 4
tv2995 = -704						; size = 4
_fe$ = -704						; size = 4
_vol$ = -700						; size = 8
_ugrad$ = -692						; size = 4
_uxJ$ = -688						; size = 336
_ugradxJ$ = -352					; size = 336
_w$ = -16						; size = 12
tv3078 = -12						; size = 8
tv3071 = -12						; size = 8
tv1671 = -8						; size = 4
_u$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_q_facet_torus_volume_q_grad PROC			; COMDAT

; 635  : { REAL **x;

	push	ebp
	mov	ebp, esp
	sub	esp, 796				; 0000031cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 636  :   REAL vol;
; 637  :   int i,j,k;
; 638  :   REAL **dx = web.inverse_periods;
; 639  :   WRAPTYPE w[FACET_EDGES];
; 640  :   unsigned long allwrap;
; 641  :   MAT2D(u,FACET_CTRL+1,MAXCOORD); /* affine coordinates of vertices */
; 642  :   MAT2D(ugrad,FACET_CTRL+1,MAXCOORD);
; 643  :   facetedge_id fe;
; 644  : 
; 645  :   x = f_info->x;
; 646  : 
; 647  :   /* get affine coordinates of vertices */
; 648  :   mat_mul_tr(x,dx,u,FACET_CTRL,SDIM,SDIM);
; 649  :   u[FACET_CTRL] = u[0]; /* handy wrap around */
; 650  :   ugrad[FACET_CTRL] = ugrad[0]; /* handy wrap around */
; 651  : 
; 652  :   /* main integral over facet */
; 653  : 
; 654  :   /* volume, integral of z dx dy */
; 655  :   vol = 0.0;
; 656  :   for ( i = 0 ; i < FACET_CTRL ; i++ )

	mov	eax, DWORD PTR _f_info$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _web+1612
	push	esi
	push	edi
	push	6
	push	7
	lea	ecx, DWORD PTR _uxJ$[ebp]
	push	ecx
	lea	edx, DWORD PTR _uqXvS$[ebp]
	push	edx
	mov	DWORD PTR _f_info$GSCopy$[ebp], eax
	mov	DWORD PTR _dx$[ebp], ebx
	call	_mat2d_setup
	push	6
	mov	esi, eax
	push	7
	lea	eax, DWORD PTR _ugradxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ugradqXvS$[ebp]
	push	ecx
	mov	DWORD PTR _u$[ebp], esi
	call	_mat2d_setup
	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edi, eax
	mov	eax, DWORD PTR _web+616
	push	eax
	push	eax
	push	6
	push	esi
	add	edx, 416				; 000001a0H
	push	ebx
	push	edx
	mov	DWORD PTR _ugrad$[ebp], edi
	call	_mat_mul_tr
	fldz
	mov	eax, DWORD PTR [esi]
	fld	ST(0)
	mov	DWORD PTR [esi+24], eax
	fst	QWORD PTR _vol$[ebp]
	mov	ecx, DWORD PTR [edi]
	add	esp, 56					; 00000038H
	mov	DWORD PTR [edi+24], ecx

; 657  :      for ( j = 0 ; j < FACET_CTRL ; j++ )

	mov	edx, esi
	mov	eax, OFFSET _vcoeff+8
$LN65@q_facet_to@2:
	xor	ecx, ecx
	mov	edi, eax
$LN62@q_facet_to@2:

; 658  :         for ( k = 0 ; k < FACET_CTRL ; k++ )
; 659  :         { REAL v = vcoeff[i][j][k];

	fld	QWORD PTR [edi-8]

; 660  :           if ( v == 0.0 ) continue;

	fld	ST(0)
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN127@q_facet_to@2

; 661  :           vol += v*u[i][2]*(u[j][0]*u[k][1]-u[j][1]*u[k][0]);

	mov	eax, DWORD PTR [esi]
	mov	ebx, DWORD PTR [esi+ecx*4]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [ebx+8]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+16]
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN58@q_facet_to@2
$LN127@q_facet_to@2:
	fstp	ST(0)
$LN58@q_facet_to@2:

; 658  :         for ( k = 0 ; k < FACET_CTRL ; k++ )
; 659  :         { REAL v = vcoeff[i][j][k];

	fld	QWORD PTR [edi]

; 660  :           if ( v == 0.0 ) continue;

	fld	ST(0)
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN130@q_facet_to@2

; 661  :           vol += v*u[i][2]*(u[j][0]*u[k][1]-u[j][1]*u[k][0]);

	mov	eax, DWORD PTR [esi+4]
	mov	ebx, DWORD PTR [esi+ecx*4]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [ebx+8]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+16]
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN109@q_facet_to@2
$LN130@q_facet_to@2:
	fstp	ST(0)
$LN109@q_facet_to@2:

; 658  :         for ( k = 0 ; k < FACET_CTRL ; k++ )
; 659  :         { REAL v = vcoeff[i][j][k];

	fld	QWORD PTR [edi+8]

; 660  :           if ( v == 0.0 ) continue;

	fld	ST(0)
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN133@q_facet_to@2

; 661  :           vol += v*u[i][2]*(u[j][0]*u[k][1]-u[j][1]*u[k][0]);

	mov	eax, DWORD PTR [esi+8]
	mov	ebx, DWORD PTR [esi+ecx*4]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [ebx+8]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+16]
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN111@q_facet_to@2
$LN133@q_facet_to@2:
	fstp	ST(0)
$LN111@q_facet_to@2:

; 658  :         for ( k = 0 ; k < FACET_CTRL ; k++ )
; 659  :         { REAL v = vcoeff[i][j][k];

	fld	QWORD PTR [edi+16]

; 660  :           if ( v == 0.0 ) continue;

	fld	ST(0)
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN136@q_facet_to@2

; 661  :           vol += v*u[i][2]*(u[j][0]*u[k][1]-u[j][1]*u[k][0]);

	mov	eax, DWORD PTR [esi+12]
	mov	ebx, DWORD PTR [esi+ecx*4]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [ebx+8]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+16]
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN113@q_facet_to@2
$LN136@q_facet_to@2:
	fstp	ST(0)
$LN113@q_facet_to@2:

; 658  :         for ( k = 0 ; k < FACET_CTRL ; k++ )
; 659  :         { REAL v = vcoeff[i][j][k];

	fld	QWORD PTR [edi+24]

; 660  :           if ( v == 0.0 ) continue;

	fld	ST(0)
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN139@q_facet_to@2

; 661  :           vol += v*u[i][2]*(u[j][0]*u[k][1]-u[j][1]*u[k][0]);

	mov	eax, DWORD PTR [esi+16]
	mov	ebx, DWORD PTR [esi+ecx*4]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [ebx+8]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+16]
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN115@q_facet_to@2
$LN139@q_facet_to@2:
	fstp	ST(0)
$LN115@q_facet_to@2:

; 658  :         for ( k = 0 ; k < FACET_CTRL ; k++ )
; 659  :         { REAL v = vcoeff[i][j][k];

	fld	QWORD PTR [edi+32]

; 660  :           if ( v == 0.0 ) continue;

	fld	ST(0)
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN142@q_facet_to@2

; 661  :           vol += v*u[i][2]*(u[j][0]*u[k][1]-u[j][1]*u[k][0]);

	mov	eax, DWORD PTR [esi+20]
	mov	ebx, DWORD PTR [esi+ecx*4]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [ebx+8]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+16]
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN61@q_facet_to@2
$LN142@q_facet_to@2:
	fstp	ST(0)
$LN61@q_facet_to@2:

; 657  :      for ( j = 0 ; j < FACET_CTRL ; j++ )

	inc	ecx
	add	edi, 48					; 00000030H
	cmp	ecx, 6
	jl	$LN62@q_facet_to@2

; 636  :   REAL vol;
; 637  :   int i,j,k;
; 638  :   REAL **dx = web.inverse_periods;
; 639  :   WRAPTYPE w[FACET_EDGES];
; 640  :   unsigned long allwrap;
; 641  :   MAT2D(u,FACET_CTRL+1,MAXCOORD); /* affine coordinates of vertices */
; 642  :   MAT2D(ugrad,FACET_CTRL+1,MAXCOORD);
; 643  :   facetedge_id fe;
; 644  : 
; 645  :   x = f_info->x;
; 646  : 
; 647  :   /* get affine coordinates of vertices */
; 648  :   mat_mul_tr(x,dx,u,FACET_CTRL,SDIM,SDIM);
; 649  :   u[FACET_CTRL] = u[0]; /* handy wrap around */
; 650  :   ugrad[FACET_CTRL] = ugrad[0]; /* handy wrap around */
; 651  : 
; 652  :   /* main integral over facet */
; 653  : 
; 654  :   /* volume, integral of z dx dy */
; 655  :   vol = 0.0;
; 656  :   for ( i = 0 ; i < FACET_CTRL ; i++ )

	add	edx, 4
	mov	eax, edi
	cmp	edi, OFFSET _vcoeff+1736
	jl	$LN65@q_facet_to@2

; 662  :         }
; 663  : 
; 664  :   /* gradients */
; 665  :   for ( k = 0 ; k < FACET_CTRL ; k++ )

	mov	edx, DWORD PTR _web+616
	fst	QWORD PTR _vol$[ebp]
	mov	ebx, DWORD PTR _ugrad$[ebp]
	xor	edi, edi
$LN55@q_facet_to@2:

; 666  :      for ( j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN54@q_facet_to@2

; 662  :         }
; 663  : 
; 664  :   /* gradients */
; 665  :   for ( k = 0 ; k < FACET_CTRL ; k++ )

	mov	eax, DWORD PTR [ebx+edi*4]
$LN154@q_facet_to@2:

; 667  :         ugrad[k][j] = 0.0;

	fxch	ST(1)
	inc	ecx
	fst	QWORD PTR [eax]
	mov	edx, DWORD PTR _web+616
	add	eax, 8
	fxch	ST(1)
	cmp	ecx, edx
	jl	SHORT $LN154@q_facet_to@2
$LN54@q_facet_to@2:

; 662  :         }
; 663  : 
; 664  :   /* gradients */
; 665  :   for ( k = 0 ; k < FACET_CTRL ; k++ )

	inc	edi
	cmp	edi, 6
	jl	SHORT $LN55@q_facet_to@2
	mov	eax, esi
	sub	eax, ebx

; 668  : 
; 669  :   for ( i = 0 ; i < FACET_CTRL ; i++ )

	mov	DWORD PTR tv2877[ebp], eax
	mov	eax, ebx
	sub	eax, esi
	mov	DWORD PTR tv3151[ebp], esi
	mov	ecx, OFFSET _vcoeff
	mov	DWORD PTR tv3065[ebp], eax
$LN49@q_facet_to@2:

; 670  :     for ( j = 0 ; j < FACET_CTRL ; j++ )

	mov	DWORD PTR tv2995[ebp], esi
	mov	DWORD PTR tv193[ebp], 6
	mov	edx, 1
$LN46@q_facet_to@2:

; 671  :      for ( k = 0 ; k < FACET_CTRL ; k++ )

	mov	ebx, DWORD PTR _ugrad$[ebp]
	mov	DWORD PTR tv2871[ebp], ecx
	mov	DWORD PTR tv231[ebp], 6
$LN43@q_facet_to@2:

; 672  :      { REAL v = vcoeff[i][j][k];

	fld	QWORD PTR [ecx]

; 673  :         if ( v == 0.0 ) continue;

	fld	ST(0)
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN161@q_facet_to@2

; 674  :         ugrad[i][2] += v*(u[j][0]*u[k][1]-u[j][1]*u[k][0]);

	mov	ecx, DWORD PTR tv2877[ebp]
	mov	eax, DWORD PTR [ecx+ebx]
	fld	QWORD PTR [eax+8]
	mov	edi, DWORD PTR tv2995[ebp]
	mov	ecx, DWORD PTR [edi]
	fmul	QWORD PTR [ecx]
	mov	esi, DWORD PTR tv3151[ebp]
	fld	QWORD PTR [ecx+8]
	mov	edx, DWORD PTR tv3065[ebp]
	fmul	QWORD PTR [eax]
	mov	edx, DWORD PTR [edx+esi]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [edx+16]
	fstp	QWORD PTR [edx+16]

; 675  :         ugrad[j][0] += v*u[i][2]*u[k][1];

	mov	edx, DWORD PTR [esi]
	fld	QWORD PTR [edx+16]
	mov	esi, DWORD PTR tv3065[ebp]
	mov	esi, DWORD PTR [esi+edi]
	fmul	ST(0), ST(1)

; 676  :         ugrad[k][1] += v*u[i][2]*u[j][0];

	mov	edi, DWORD PTR [ebx]
	fmul	QWORD PTR [eax+8]
	fadd	QWORD PTR [esi]
	fstp	QWORD PTR [esi]
	fld	QWORD PTR [edx+16]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [ecx]
	fadd	QWORD PTR [edi+8]
	fstp	QWORD PTR [edi+8]

; 677  :         ugrad[j][1] -= v*u[i][2]*u[k][0];

	fld	QWORD PTR [edx+16]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [eax]
	fsubr	QWORD PTR [esi+8]
	fstp	QWORD PTR [esi+8]

; 678  :         ugrad[k][0] -= v*u[i][2]*u[j][1];

	mov	esi, DWORD PTR _u$[ebp]
	fmul	QWORD PTR [edx+16]
	mov	edx, 1
	fmul	QWORD PTR [ecx+8]
	mov	ecx, DWORD PTR tv2871[ebp]
	fsubr	QWORD PTR [edi]
	fstp	QWORD PTR [edi]
	jmp	SHORT $LN42@q_facet_to@2
$LN161@q_facet_to@2:
	fstp	ST(0)
$LN42@q_facet_to@2:

; 671  :      for ( k = 0 ; k < FACET_CTRL ; k++ )

	add	ecx, 8
	add	ebx, 4
	sub	DWORD PTR tv231[ebp], edx
	mov	DWORD PTR tv2871[ebp], ecx
	jne	$LN43@q_facet_to@2

; 670  :     for ( j = 0 ; j < FACET_CTRL ; j++ )

	add	DWORD PTR tv2995[ebp], 4
	sub	DWORD PTR tv193[ebp], edx
	jne	$LN46@q_facet_to@2

; 668  : 
; 669  :   for ( i = 0 ; i < FACET_CTRL ; i++ )

	add	DWORD PTR tv3151[ebp], 4
	cmp	ecx, OFFSET _vcoeff+1728
	jl	$LN49@q_facet_to@2

; 679  :      }
; 680  : 
; 681  :   /* add corrections due to wraps */
; 682  :   fe = get_facet_fe(f_info->id);

	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	fstp	ST(1)
	mov	ecx, DWORD PTR [eax]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN70@q_facet_to@2
	xor	eax, eax
	jmp	SHORT $LN69@q_facet_to@2
$LN70@q_facet_to@2:
	mov	eax, DWORD PTR _web+236
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [edx+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN69@q_facet_to@2
	xor	eax, 134217728				; 08000000H
$LN69@q_facet_to@2:

; 683  :   for ( i = 0 ; i < FACET_EDGES ; i++, fe = get_next_edge(fe) ) 

	mov	ecx, DWORD PTR _web+460
	mov	DWORD PTR _fe$[ebp], eax
	mov	DWORD PTR _i$[ebp], 0
$LN122@q_facet_to@2:

; 684  :      w[i] = get_fe_wrap(fe);

	mov	edi, DWORD PTR _web+216
	mov	ebx, eax
	and	ebx, 134217727				; 07ffffffH
	add	ebx, ebx
	add	ebx, ebx
	mov	ecx, DWORD PTR [ebx+ecx]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _web+124
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [edi+ecx+784]
	mov	ecx, DWORD PTR [edx+ecx]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN81@q_facet_to@2
	push	ecx
	fstp	ST(0)
	call	DWORD PTR _sym_inverse
	fld	QWORD PTR _vol$[ebp]
	add	esp, 4
	jmp	SHORT $LN235@q_facet_to@2
$LN81@q_facet_to@2:
	mov	eax, ecx
$LN235@q_facet_to@2:
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _web+460
	mov	DWORD PTR _w$[ebp+edx*4], eax
	mov	eax, DWORD PTR [ebx+ecx]
	inc	edx
	test	DWORD PTR _fe$[ebp], 134217728		; 08000000H
	mov	DWORD PTR _i$[ebp], edx
	je	SHORT $LN74@q_facet_to@2

; 683  :   for ( i = 0 ; i < FACET_EDGES ; i++, fe = get_next_edge(fe) ) 

	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN236@q_facet_to@2
$LN74@q_facet_to@2:
	mov	eax, DWORD PTR [eax+32]
$LN236@q_facet_to@2:
	mov	DWORD PTR _fe$[ebp], eax
	cmp	edx, 3
	jl	$LN122@q_facet_to@2

; 685  : 
; 686  :   allwrap = WR(w[0],2)+(WR(w[1],2)<<TWRAPBITS)+(WR(w[2],2)<<(2*TWRAPBITS));

	mov	eax, DWORD PTR _w$[ebp+8]
	mov	ecx, DWORD PTR _w$[ebp+4]
	mov	edx, DWORD PTR _w$[ebp]
	sar	eax, 12					; 0000000cH
	and	eax, 31					; 0000001fH
	shl	eax, 6
	sar	ecx, 12					; 0000000cH
	and	ecx, 31					; 0000001fH
	add	eax, ecx
	sar	edx, 12					; 0000000cH
	shl	eax, 6
	and	edx, 31					; 0000001fH
	add	eax, edx

; 687  :   switch ( allwrap )

	cmp	eax, 4127				; 0000101fH
	ja	$LN68@q_facet_to@2
	je	$LN188@q_facet_to@2
	test	eax, eax
	je	$LN123@q_facet_to@2
	cmp	eax, 95					; 0000005fH
	je	SHORT $LN194@q_facet_to@2
	cmp	eax, 1985				; 000007c1H
	jne	$LN205@q_facet_to@2

; 688  :      { case 0: break;
; 689  :         case (POSWRAP)+(NEGWRAP << TWRAPBITS): break;

	jmp	$LN123@q_facet_to@2
$LN194@q_facet_to@2:

; 710  :         case  (NEGWRAP) + (POSWRAP << TWRAPBITS):
; 711  :             vol -= cut_int(u) + cut_int(u+2);

	lea	edi, DWORD PTR [esi+8]
	fstp	ST(0)
	push	edi
	call	_cut_int
	fstp	QWORD PTR tv3071[ebp]
	push	esi
	call	_cut_int
	fadd	QWORD PTR tv3071[ebp]

; 712  :             cut_grad(u,ugrad,-1);

	mov	ebx, DWORD PTR _ugrad$[ebp]
	push	-1
	fsubr	QWORD PTR _vol$[ebp]
	push	ebx
	push	esi
	fstp	QWORD PTR _vol$[ebp]
	call	_cut_grad

; 713  :             cut_grad(u+2,ugrad+2,-1);

	push	-1
	lea	eax, DWORD PTR [ebx+8]
	push	eax
	push	edi
	call	_cut_grad

; 714  :             switch ( WR(f_info->wraps[4],0) )

	fld1
	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [ecx+832]
	and	eax, 31					; 0000001fH
	add	esp, 32					; 00000020H
	dec	eax
	je	SHORT $LN18@q_facet_to@2
	sub	eax, 30					; 0000001eH
	jne	SHORT $LN119@q_facet_to@2

; 716  :               case NEGWRAP: vol += u[4][1]; ugrad[4][1] += 1.0; break;

	mov	edx, DWORD PTR [esi+16]
	fld	QWORD PTR [edx+8]
	mov	eax, DWORD PTR [ebx+16]
	fadd	QWORD PTR _vol$[ebp]
	fld	QWORD PTR [eax+8]
	fadd	ST(0), ST(2)
	fstp	QWORD PTR [eax+8]
	jmp	SHORT $LN19@q_facet_to@2
$LN18@q_facet_to@2:

; 715  :             { case POSWRAP: vol -= u[4][1]; ugrad[4][1] -= 1.0; break;

	mov	eax, DWORD PTR [esi+16]
	fld	QWORD PTR _vol$[ebp]
	fsub	QWORD PTR [eax+8]
	mov	eax, DWORD PTR [ebx+16]
	fld	QWORD PTR [eax+8]
	fsub	ST(0), ST(2)
	fstp	QWORD PTR [eax+8]
	jmp	SHORT $LN19@q_facet_to@2
$LN119@q_facet_to@2:
	fld	QWORD PTR _vol$[ebp]
$LN19@q_facet_to@2:

; 717  :             }
; 718  :             switch ( WR(f_info->wraps[0],0) )

	mov	eax, DWORD PTR [ecx+816]
	and	eax, 31					; 0000001fH
	dec	eax
	je	SHORT $LN14@q_facet_to@2
	sub	eax, 30					; 0000001eH
	jne	$LN233@q_facet_to@2

; 720  :               case NEGWRAP: vol -= u[0][1]; ugrad[0][1] -= 1.0;break;

	mov	ecx, DWORD PTR [esi]
	fsub	QWORD PTR [ecx+8]
	mov	ebx, DWORD PTR [ebx]
	fld	QWORD PTR [ebx+8]
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [ebx+8]
	jmp	$LN123@q_facet_to@2
$LN14@q_facet_to@2:

; 719  :             { case POSWRAP: vol += u[0][1]; ugrad[0][1] += 1.0;break;

	mov	edx, DWORD PTR [esi]
	fadd	QWORD PTR [edx+8]
	mov	ebx, DWORD PTR [ebx]
	fld	QWORD PTR [ebx+8]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [ebx+8]

; 721  :             }
; 722  :             break;

	jmp	$LN123@q_facet_to@2
$LN188@q_facet_to@2:

; 690  :         case (POSWRAP << TWRAPBITS) + (NEGWRAP << (2*TWRAPBITS)): break; 
; 691  :         case (NEGWRAP) + (POSWRAP << (2*TWRAPBITS)):
; 692  :             vol -= cut_int(u) + cut_int(u+2) + cut_int(u+4);

	lea	ebx, DWORD PTR [esi+8]
	fstp	ST(0)
	lea	edi, DWORD PTR [esi+16]
	push	ebx
	mov	DWORD PTR tv1671[ebp], edi
	call	_cut_int
	fstp	QWORD PTR tv3073[ebp]
	push	esi
	call	_cut_int
	fadd	QWORD PTR tv3073[ebp]
	push	edi
	fstp	QWORD PTR tv3075[ebp]
	call	_cut_int
	fadd	QWORD PTR tv3075[ebp]

; 693  :             cut_grad(u,ugrad,-1); 

	mov	edi, DWORD PTR _ugrad$[ebp]
	push	-1
	push	edi
	fsubr	QWORD PTR _vol$[ebp]
	push	esi
	fstp	QWORD PTR _vol$[ebp]
	call	_cut_grad

; 694  :             cut_grad(u+2,ugrad+2,-1); 

	push	-1
	lea	eax, DWORD PTR [edi+8]
	push	eax
	push	ebx
	call	_cut_grad

; 695  :             cut_grad(u+4,ugrad+4,-1);

	mov	ecx, DWORD PTR tv1671[ebp]
	push	-1
	add	edi, 16					; 00000010H
	push	edi
	push	ecx
	call	_cut_grad

; 696  :             break;

	fld	QWORD PTR _vol$[ebp]
	add	esp, 48					; 00000030H
	jmp	$LN123@q_facet_to@2
$LN68@q_facet_to@2:

; 687  :   switch ( allwrap )

	sub	eax, 6080				; 000017c0H
	je	$LN200@q_facet_to@2
	sub	eax, 120897				; 0001d841H
	je	SHORT $LN203@q_facet_to@2
	sub	eax, 63					; 0000003fH
	je	$LN123@q_facet_to@2
$LN205@q_facet_to@2:

; 730  :             }
; 731  :             break;
; 732  :          default: kb_error(1332,"Internal error: Bad allwrap in facet_volume.\n",RECOVERABLE);

	push	1
	fstp	ST(0)
	push	OFFSET ??_C@_0CO@CFIBBAKF@Internal?5error?3?5Bad?5allwrap?5in?5f@
	push	1332					; 00000534H
	call	_kb_error
	fld	QWORD PTR _vol$[ebp]
	add	esp, 12					; 0000000cH
	jmp	$LN123@q_facet_to@2
$LN203@q_facet_to@2:

; 697  : 
; 698  :         case (POSWRAP ) + (NEGWRAP << (2*TWRAPBITS)):
; 699  :             vol += cut_int(u+2);

	lea	edi, DWORD PTR [esi+8]
	fstp	ST(0)
	push	edi
	call	_cut_int
	fadd	QWORD PTR _vol$[ebp]

; 700  :             cut_grad(u+2,ugrad+2,1);

	mov	ebx, DWORD PTR _ugrad$[ebp]
	push	1
	add	ebx, 8
	fstp	QWORD PTR _vol$[ebp]
	push	ebx
	push	edi
	call	_cut_grad

; 701  :             switch ( WR(f_info->wraps[2],0) )

	fld1
	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [ecx+824]
	and	eax, 31					; 0000001fH
	add	esp, 16					; 00000010H
	dec	eax
	je	SHORT $LN27@q_facet_to@2
	sub	eax, 30					; 0000001eH
	jne	SHORT $LN120@q_facet_to@2

; 703  :               case NEGWRAP: vol += u[2][1]; ugrad[2][1] += 1.0; break;

	mov	edx, DWORD PTR [edi]
	fld	QWORD PTR [edx+8]
	mov	ebx, DWORD PTR [ebx]
	fadd	QWORD PTR _vol$[ebp]
	fld	QWORD PTR [ebx+8]
	fadd	ST(0), ST(2)
	fstp	QWORD PTR [ebx+8]
	jmp	SHORT $LN28@q_facet_to@2
$LN27@q_facet_to@2:

; 702  :             { case POSWRAP: vol -= u[2][1]; ugrad[2][1] -= 1.0; break;

	mov	eax, DWORD PTR [edi]
	fld	QWORD PTR _vol$[ebp]
	fsub	QWORD PTR [eax+8]
	mov	ebx, DWORD PTR [ebx]
	fld	QWORD PTR [ebx+8]
	fsub	ST(0), ST(2)
	fstp	QWORD PTR [ebx+8]
	jmp	SHORT $LN28@q_facet_to@2
$LN120@q_facet_to@2:
	fld	QWORD PTR _vol$[ebp]
$LN28@q_facet_to@2:

; 704  :             }
; 705  :             switch ( WR(f_info->wraps[4],0) )

	mov	eax, DWORD PTR [ecx+832]
	and	eax, 31					; 0000001fH
	dec	eax
	je	SHORT $LN23@q_facet_to@2
	sub	eax, 30					; 0000001eH
	jne	$LN233@q_facet_to@2

; 707  :               case NEGWRAP: vol -= u[4][1]; ugrad[4][1] -= 1.0; break;

	mov	ecx, DWORD PTR [esi+16]
	fsub	QWORD PTR [ecx+8]
	mov	edx, DWORD PTR _ugrad$[ebp]
	mov	eax, DWORD PTR [edx+16]
	fld	QWORD PTR [eax+8]
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax+8]
	jmp	$LN123@q_facet_to@2
$LN23@q_facet_to@2:

; 706  :             { case POSWRAP: vol += u[4][1]; ugrad[4][1] += 1.0; break;

	mov	eax, DWORD PTR [esi+16]
	fadd	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR _ugrad$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	fld	QWORD PTR [eax+8]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax+8]

; 708  :             }
; 709  :             break;

	jmp	$LN123@q_facet_to@2
$LN200@q_facet_to@2:

; 723  :         case (NEGWRAP << TWRAPBITS) + (POSWRAP << (2*TWRAPBITS)):
; 724  :             vol -= cut_int(u+2) + cut_int(u+4);

	lea	edi, DWORD PTR [esi+16]
	fstp	ST(0)
	push	edi
	add	esi, 8
	call	_cut_int
	fstp	QWORD PTR tv3078[ebp]
	push	esi
	call	_cut_int
	fadd	QWORD PTR tv3078[ebp]

; 725  :             cut_grad(u+2,ugrad+2,-1);

	mov	ebx, DWORD PTR _ugrad$[ebp]
	push	-1
	fsubr	QWORD PTR _vol$[ebp]
	add	ebx, 8
	push	ebx
	push	esi
	fstp	QWORD PTR _vol$[ebp]
	call	_cut_grad

; 726  :             cut_grad(u+4,ugrad+4,-1);

	mov	edx, DWORD PTR _ugrad$[ebp]
	push	-1
	add	edx, 16					; 00000010H
	push	edx
	push	edi
	call	_cut_grad

; 727  :             switch ( WR(f_info->wraps[2],0) )

	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [eax+824]
	and	eax, 31					; 0000001fH
	add	esp, 32					; 00000020H
	dec	eax
	je	SHORT $LN9@q_facet_to@2
	sub	eax, 30					; 0000001eH

; 729  :               case NEGWRAP: vol -= u[2][1]; ugrad[2][1] -= 1.0; break;

	fld	QWORD PTR _vol$[ebp]
	jne	SHORT $LN123@q_facet_to@2
	mov	ecx, DWORD PTR [esi]
	fsub	QWORD PTR [ecx+8]
	mov	ebx, DWORD PTR [ebx]
	fld	QWORD PTR [ebx+8]
	fsub	QWORD PTR __real@3ff0000000000000
	fstp	QWORD PTR [ebx+8]
	jmp	SHORT $LN123@q_facet_to@2
$LN9@q_facet_to@2:

; 728  :             { case POSWRAP: vol += u[2][1]; ugrad[2][1] += 1.0; break;

	mov	edx, DWORD PTR [esi]
	fld	QWORD PTR [edx+8]
	mov	ebx, DWORD PTR [ebx]
	fadd	QWORD PTR _vol$[ebp]
	fld	QWORD PTR [ebx+8]
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	QWORD PTR [ebx+8]
	jmp	SHORT $LN123@q_facet_to@2
$LN233@q_facet_to@2:

; 704  :             }
; 705  :             switch ( WR(f_info->wraps[4],0) )

	fstp	ST(1)
$LN123@q_facet_to@2:

; 733  : 
; 734  :      }
; 735  :   vol *= web.torusv;

	fmul	QWORD PTR _web+1600

; 736  :   for ( i = 0 ; i < FACET_CTRL ; i++ )

	mov	edx, DWORD PTR _web+616
	xor	esi, esi
	fstp	QWORD PTR _vol$[ebp]
	npad	6
$LL6@q_facet_to@2:

; 737  :      for ( j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN5@q_facet_to@2

; 736  :   for ( i = 0 ; i < FACET_CTRL ; i++ )

	mov	eax, DWORD PTR _ugrad$[ebp]
	mov	eax, DWORD PTR [eax+esi*4]
	npad	1
$LL118@q_facet_to@2:

; 738  :        ugrad[i][j] *= web.torusv;

	fld	QWORD PTR [eax]
	inc	ecx
	fmul	QWORD PTR _web+1600
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	mov	edx, DWORD PTR _web+616
	cmp	ecx, edx
	jl	SHORT $LL118@q_facet_to@2
$LN5@q_facet_to@2:

; 736  :   for ( i = 0 ; i < FACET_CTRL ; i++ )

	inc	esi
	cmp	esi, 6
	jl	SHORT $LL6@q_facet_to@2

; 739  :   mat_mult(ugrad,dx,f_info->grad,FACET_CTRL,SDIM,SDIM);

	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR _dx$[ebp]
	push	edx
	push	edx
	mov	edx, DWORD PTR [ecx+1336]
	mov	ecx, DWORD PTR _ugrad$[ebp]
	push	6
	push	edx
	push	eax
	push	ecx
	call	_mat_mult

; 740  :  
; 741  :   return vol;

	fld	QWORD PTR _vol$[ebp]

; 742  : } // end q_facet_torus_volume_q_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 24					; 00000018H
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_q_facet_torus_volume_q_grad ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_q_facet_torus_volume_q_hess
EXTRN	_tr_mat_mul:PROC
EXTRN	_mat4d_setup:PROC
EXTRN	__chkstk:PROC
; Function compile flags: /Ogtp
;	COMDAT _q_facet_torus_volume_q_hess
_TEXT	SEGMENT
_hqXvS$ = -16680					; size = 1400
_ugradqXvS$ = -15280					; size = 28
_uqXvS$ = -15252					; size = 28
_temphqXvS$ = -15224					; size = 24
tv4673 = -15200						; size = 4
tv5525 = -15196						; size = 8
tv5523 = -15196						; size = 8
tv4678 = -15192						; size = 4
tv5130 = -15188						; size = 4
tv5135 = -15184						; size = 4
_temph$ = -15180					; size = 4
tv5217 = -15176						; size = 4
tv4973 = -15172						; size = 4
_dx$ = -15168						; size = 4
tv5327 = -15164						; size = 4
tv2919 = -15164						; size = 4
tv5396 = -15160						; size = 4
_hh$ = -15156						; size = 28
tv4309 = -15128						; size = 4
_u$ = -15124						; size = 4
_f_info$GSCopy$ = -15120				; size = 4
tv5346 = -15116						; size = 4
tv4510 = -15116						; size = 4
tv2914 = -15116						; size = 4
_h$ = -15112						; size = 4
tv4775 = -15108						; size = 4
tv4252 = -15108						; size = 4
_vol$ = -15104						; size = 8
_ugrad$ = -15096					; size = 4
tv4667 = -15092						; size = 4
tv3994 = -15092						; size = 4
_i$ = -15092						; size = 4
_hxJ$ = -15088						; size = 14112
_uxJ$ = -976						; size = 336
_ugradxJ$ = -640					; size = 336
_temphxJ$ = -304					; size = 288
_w$ = -16						; size = 12
tv5527 = -12						; size = 8
tv5521 = -12						; size = 8
tv5076 = -8						; size = 4
tv2891 = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_q_facet_torus_volume_q_hess PROC			; COMDAT

; 753  : { REAL **x;

	push	ebp
	mov	ebp, esp
	mov	eax, 16680				; 00004128H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 754  :   REAL vol;
; 755  :   int i,j,k;
; 756  :   REAL **dx = web.inverse_periods;

	mov	eax, DWORD PTR _f_info$[ebp]
	mov	ecx, DWORD PTR _web+1612
	push	ebx
	push	esi
	push	edi

; 757  :   WRAPTYPE w[FACET_EDGES];
; 758  :   unsigned long allwrap;
; 759  :   MAT2D(u,FACET_CTRL+1,MAXCOORD); /* affine coordinates of vertices */

	push	6
	push	7
	lea	edx, DWORD PTR _uxJ$[ebp]
	mov	DWORD PTR _f_info$GSCopy$[ebp], eax
	push	edx
	lea	eax, DWORD PTR _uqXvS$[ebp]
	push	eax
	mov	DWORD PTR _dx$[ebp], ecx
	call	_mat2d_setup

; 760  :   MAT2D(ugrad,FACET_CTRL+1,MAXCOORD);

	push	6
	push	7
	lea	ecx, DWORD PTR _ugradxJ$[ebp]
	push	ecx
	lea	edx, DWORD PTR _ugradqXvS$[ebp]
	mov	esi, eax
	push	edx
	mov	DWORD PTR _u$[ebp], esi
	call	_mat2d_setup

; 761  :   facetedge_id fe;
; 762  :   int ii,jj;
; 763  :   MAT4D(h,FACET_CTRL+1,FACET_CTRL+1,MAXCOORD,MAXCOORD);

	push	6
	push	6
	push	7
	mov	ebx, eax
	push	7
	lea	eax, DWORD PTR _hxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _hqXvS$[ebp]
	push	ecx
	mov	DWORD PTR _ugrad$[ebp], ebx
	call	_mat4d_setup

; 764  :   MAT2D(temph,MAXCOORD,MAXCOORD);

	push	6
	mov	edi, eax
	push	6
	lea	edx, DWORD PTR _temphxJ$[ebp]
	push	edx
	lea	eax, DWORD PTR _temphqXvS$[ebp]
	push	eax
	mov	DWORD PTR _h$[ebp], edi
	call	_mat2d_setup

; 765  :   REAL ***hh[FACET_CTRL+1];
; 766  : 
; 767  :   x = f_info->x;
; 768  : 
; 769  :   /* get affine coordinates of vertices */
; 770  :   mat_mul_tr(x,dx,u,FACET_CTRL,SDIM,SDIM);

	mov	ecx, DWORD PTR _dx$[ebp]
	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	add	esp, 72					; 00000048H
	mov	DWORD PTR _temph$[ebp], eax
	mov	eax, DWORD PTR _web+616
	push	eax
	push	eax
	push	6
	push	esi
	push	ecx
	add	edx, 416				; 000001a0H
	push	edx
	call	_mat_mul_tr

; 771  :   u[FACET_CTRL] = u[0]; /* handy wrap around */

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [esi+24], eax

; 772  :   ugrad[FACET_CTRL] = ugrad[0]; /* handy wrap around */

	mov	ecx, DWORD PTR [ebx]
	mov	DWORD PTR [ebx+24], ecx

; 773  :   h[FACET_CTRL] = h[0];

	mov	edx, DWORD PTR [edi]
	mov	DWORD PTR [edi+24], edx

; 774  :   for ( i = 0 ; i < FACET_CTRL ; i++ ) h[i][FACET_CTRL] = h[i][0];

	mov	eax, edx
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [eax+24], ecx
	mov	eax, DWORD PTR [edi+4]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR [edi+8]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [eax+24], ecx
	mov	eax, DWORD PTR [edi+12]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR [edi+16]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [eax+24], ecx
	mov	eax, DWORD PTR [edi+20]
	mov	edx, DWORD PTR [eax]
	add	esp, 24					; 00000018H
	mov	DWORD PTR [eax+24], edx

; 775  : 
; 776  :   /* main integral over facet */
; 777  : 
; 778  :   /* volume, integral of z dx dy */
; 779  :   vol = 0.0;

	fldz

; 781  :      for ( j = 0 ; j < FACET_CTRL ; j++ )

	mov	edx, esi
	fld	ST(0)
	mov	ebx, OFFSET _vcoeff+8
	fst	QWORD PTR _vol$[ebp]
$LN113@q_facet_to@3:
	xor	ecx, ecx
	mov	DWORD PTR tv3994[ebp], ebx
$LN110@q_facet_to@3:

; 782  :         for ( k = 0 ; k < FACET_CTRL ; k++ )
; 783  :         { REAL v = vcoeff[i][j][k];

	fld	QWORD PTR [ebx-8]

; 784  :           if ( v == 0.0 ) continue;

	fld	ST(0)
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN253@q_facet_to@3

; 785  :           vol += v*u[i][2]*(u[j][0]*u[k][1]-u[j][1]*u[k][0]);

	mov	eax, DWORD PTR [esi]
	mov	ebx, DWORD PTR [esi+ecx*4]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR tv3994[ebp]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+16]
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN106@q_facet_to@3
$LN253@q_facet_to@3:
	fstp	ST(0)
$LN106@q_facet_to@3:

; 782  :         for ( k = 0 ; k < FACET_CTRL ; k++ )
; 783  :         { REAL v = vcoeff[i][j][k];

	fld	QWORD PTR [ebx]

; 784  :           if ( v == 0.0 ) continue;

	fld	ST(0)
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN256@q_facet_to@3

; 785  :           vol += v*u[i][2]*(u[j][0]*u[k][1]-u[j][1]*u[k][0]);

	mov	eax, DWORD PTR [esi+4]
	mov	ebx, DWORD PTR [esi+ecx*4]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR tv3994[ebp]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+16]
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN201@q_facet_to@3
$LN256@q_facet_to@3:
	fstp	ST(0)
$LN201@q_facet_to@3:

; 782  :         for ( k = 0 ; k < FACET_CTRL ; k++ )
; 783  :         { REAL v = vcoeff[i][j][k];

	fld	QWORD PTR [ebx+8]

; 784  :           if ( v == 0.0 ) continue;

	fld	ST(0)
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN259@q_facet_to@3

; 785  :           vol += v*u[i][2]*(u[j][0]*u[k][1]-u[j][1]*u[k][0]);

	mov	eax, DWORD PTR [esi+8]
	mov	ebx, DWORD PTR [esi+ecx*4]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR tv3994[ebp]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+16]
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN203@q_facet_to@3
$LN259@q_facet_to@3:
	fstp	ST(0)
$LN203@q_facet_to@3:

; 782  :         for ( k = 0 ; k < FACET_CTRL ; k++ )
; 783  :         { REAL v = vcoeff[i][j][k];

	fld	QWORD PTR [ebx+16]

; 784  :           if ( v == 0.0 ) continue;

	fld	ST(0)
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN262@q_facet_to@3

; 785  :           vol += v*u[i][2]*(u[j][0]*u[k][1]-u[j][1]*u[k][0]);

	mov	eax, DWORD PTR [esi+12]
	mov	ebx, DWORD PTR [esi+ecx*4]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR tv3994[ebp]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+16]
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN205@q_facet_to@3
$LN262@q_facet_to@3:
	fstp	ST(0)
$LN205@q_facet_to@3:

; 782  :         for ( k = 0 ; k < FACET_CTRL ; k++ )
; 783  :         { REAL v = vcoeff[i][j][k];

	fld	QWORD PTR [ebx+24]

; 784  :           if ( v == 0.0 ) continue;

	fld	ST(0)
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN265@q_facet_to@3

; 785  :           vol += v*u[i][2]*(u[j][0]*u[k][1]-u[j][1]*u[k][0]);

	mov	eax, DWORD PTR [esi+16]
	mov	ebx, DWORD PTR [esi+ecx*4]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR tv3994[ebp]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+16]
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN207@q_facet_to@3
$LN265@q_facet_to@3:
	fstp	ST(0)
$LN207@q_facet_to@3:

; 782  :         for ( k = 0 ; k < FACET_CTRL ; k++ )
; 783  :         { REAL v = vcoeff[i][j][k];

	fld	QWORD PTR [ebx+32]

; 784  :           if ( v == 0.0 ) continue;

	fld	ST(0)
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN268@q_facet_to@3

; 785  :           vol += v*u[i][2]*(u[j][0]*u[k][1]-u[j][1]*u[k][0]);

	mov	eax, DWORD PTR [esi+20]
	mov	ebx, DWORD PTR [esi+ecx*4]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [ebx]
	fld	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR tv3994[ebp]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR [edx]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+16]
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	jmp	SHORT $LN109@q_facet_to@3
$LN268@q_facet_to@3:
	fstp	ST(0)
$LN109@q_facet_to@3:

; 781  :      for ( j = 0 ; j < FACET_CTRL ; j++ )

	inc	ecx
	add	ebx, 48					; 00000030H
	mov	DWORD PTR tv3994[ebp], ebx
	cmp	ecx, 6
	jl	$LN110@q_facet_to@3

; 780  :   for ( i = 0 ; i < FACET_CTRL ; i++ )

	add	edx, 4
	cmp	ebx, OFFSET _vcoeff+1736
	jl	$LN113@q_facet_to@3

; 786  :         }
; 787  : 
; 788  :   for ( i = 0 ; i < FACET_CTRL ; i++ )

	mov	edx, DWORD PTR _web+616
	fst	QWORD PTR _vol$[ebp]
	xor	ebx, ebx
$LN103@q_facet_to@3:

; 789  :          for ( j = 0 ; j < SDIM ; j++ ) 

	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN102@q_facet_to@3

; 786  :         }
; 787  : 
; 788  :   for ( i = 0 ; i < FACET_CTRL ; i++ )

	mov	edx, DWORD PTR _ugrad$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
$LN280@q_facet_to@3:

; 790  :               ugrad[i][j] = 0.0;

	fxch	ST(1)
	inc	ecx
	fst	QWORD PTR [eax]
	mov	edx, DWORD PTR _web+616
	add	eax, 8
	fxch	ST(1)
	cmp	ecx, edx
	jl	SHORT $LN280@q_facet_to@3
$LN102@q_facet_to@3:

; 786  :         }
; 787  : 
; 788  :   for ( i = 0 ; i < FACET_CTRL ; i++ )

	inc	ebx
	cmp	ebx, 6
	jl	SHORT $LN103@q_facet_to@3

; 791  : 
; 792  :   for ( i = 0 ; i < FACET_CTRL ; i++ )

	mov	DWORD PTR _i$[ebp], 0
$LN97@q_facet_to@3:

; 793  :      for ( ii = 0 ; ii < FACET_CTRL ; ii++ )

	mov	DWORD PTR tv4252[ebp], 0
$LN94@q_facet_to@3:

; 794  :          for ( j = 0 ; j < SDIM ; j++ ) 

	xor	ebx, ebx
	test	edx, edx
	jle	SHORT $LN93@q_facet_to@3
$LN91@q_facet_to@3:

; 795  :             for ( jj = 0 ; jj < SDIM ; jj++ ) 

	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN90@q_facet_to@3
	mov	eax, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR tv4252[ebp]
	mov	edx, DWORD PTR [edx+eax]
	mov	eax, DWORD PTR [edx+ebx*4]
$LN292@q_facet_to@3:

; 796  :               h[i][ii][j][jj] = 0.0;

	fxch	ST(1)
	inc	ecx
	fst	QWORD PTR [eax]
	mov	edx, DWORD PTR _web+616
	add	eax, 8
	fxch	ST(1)
	cmp	ecx, edx
	jl	SHORT $LN292@q_facet_to@3
$LN90@q_facet_to@3:

; 794  :          for ( j = 0 ; j < SDIM ; j++ ) 

	inc	ebx
	cmp	ebx, edx
	jl	SHORT $LN91@q_facet_to@3
$LN93@q_facet_to@3:

; 793  :      for ( ii = 0 ; ii < FACET_CTRL ; ii++ )

	mov	eax, DWORD PTR tv4252[ebp]
	add	eax, 4
	mov	DWORD PTR tv4252[ebp], eax
	cmp	eax, 24					; 00000018H
	jl	SHORT $LN94@q_facet_to@3

; 791  : 
; 792  :   for ( i = 0 ; i < FACET_CTRL ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, 6
	jl	SHORT $LN97@q_facet_to@3
	mov	edx, DWORD PTR _ugrad$[ebp]
	mov	eax, edx
	sub	eax, esi

; 797  : 
; 798  :   for ( i = 0 ; i < FACET_CTRL ; i++ )

	mov	DWORD PTR tv4673[ebp], eax
	mov	eax, edi
	sub	eax, esi
	sub	edx, edi
	mov	ecx, esi
	mov	ebx, edi
	sub	ecx, edi
	mov	DWORD PTR tv4678[ebp], eax
	mov	DWORD PTR tv5217[ebp], 0
	mov	DWORD PTR tv5396[ebp], ebx
	mov	eax, OFFSET _vcoeff
	mov	DWORD PTR tv5130[ebp], edx
	mov	DWORD PTR tv5135[ebp], ecx
$LN85@q_facet_to@3:

; 799  :     for ( j = 0 ; j < FACET_CTRL ; j++ )

	mov	esi, DWORD PTR _h$[ebp]
	mov	DWORD PTR tv4775[ebp], 0
	mov	DWORD PTR tv4973[ebp], esi
$LN82@q_facet_to@3:

; 800  :      for ( k = 0 ; k < FACET_CTRL ; k++ )

	mov	edi, DWORD PTR _u$[ebp]
	mov	DWORD PTR tv4309[ebp], 0
	mov	DWORD PTR tv4510[ebp], edi
	mov	DWORD PTR tv4667[ebp], eax
$LN79@q_facet_to@3:

; 801  :      { REAL v = vcoeff[i][j][k];

	mov	eax, DWORD PTR tv4667[ebp]
	fld	QWORD PTR [eax]

; 802  :         if ( v == 0.0 ) continue;

	fld	ST(0)
	fld	ST(3)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN301@q_facet_to@3

; 803  :         ugrad[i][2] += v*(u[j][0]*u[k][1]-u[j][1]*u[k][0]);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [esi+ecx]
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [ecx]
	mov	edx, DWORD PTR [ebx+edx]
	fld	QWORD PTR [ecx+8]
	fmul	QWORD PTR [eax]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [edx+16]
	fstp	QWORD PTR [edx+16]

; 804  :         ugrad[j][0] += v*u[i][2]*u[k][1];

	mov	edx, DWORD PTR tv5135[ebp]
	mov	edx, DWORD PTR [ebx+edx]
	fld	QWORD PTR [edx+16]
	mov	ebx, DWORD PTR tv5130[ebp]
	mov	esi, DWORD PTR [esi+ebx]
	fmul	ST(0), ST(1)

; 805  :         ugrad[k][1] += v*u[i][2]*u[j][0];

	mov	ebx, DWORD PTR tv4673[ebp]
	mov	edi, DWORD PTR [ebx+edi]
	fmul	QWORD PTR [eax+8]

; 806  :         ugrad[j][1] -= v*u[i][2]*u[k][0];
; 807  :         ugrad[k][0] -= v*u[i][2]*u[j][1];
; 808  :         h[i][j][2][0] += v*u[k][1];
; 809  :         h[i][k][2][1] += v*u[j][0];

	mov	ebx, DWORD PTR tv4309[ebp]
	fadd	QWORD PTR [esi]
	fstp	QWORD PTR [esi]
	fld	QWORD PTR [edx+16]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [ecx]
	fadd	QWORD PTR [edi+8]
	fstp	QWORD PTR [edi+8]
	fld	QWORD PTR [edx+16]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [eax]
	fsubr	QWORD PTR [esi+8]
	fstp	QWORD PTR [esi+8]
	mov	esi, DWORD PTR tv5396[ebp]
	fld	QWORD PTR [edx+16]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [ecx+8]
	fsubr	QWORD PTR [edi]
	fstp	QWORD PTR [edi]
	mov	edi, DWORD PTR [esi]
	fld	QWORD PTR [eax+8]
	mov	esi, DWORD PTR tv4775[ebp]
	mov	esi, DWORD PTR [esi+edi]
	fmul	ST(0), ST(1)
	mov	esi, DWORD PTR [esi+8]
	mov	edi, DWORD PTR [edi+ebx]
	fadd	QWORD PTR [esi]
	mov	edi, DWORD PTR [edi+8]

; 810  :         h[i][j][2][1] -= v*u[k][0];
; 811  :         h[i][k][2][0] -= v*u[j][1];
; 812  :         h[j][i][0][2] += v*u[k][1];

	mov	ebx, DWORD PTR tv5217[ebp]
	fstp	QWORD PTR [esi]
	fld	QWORD PTR [ecx]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [edi+8]
	fstp	QWORD PTR [edi+8]
	fld	ST(0)
	fmul	QWORD PTR [eax]
	fsubr	QWORD PTR [esi+8]
	fstp	QWORD PTR [esi+8]
	mov	esi, DWORD PTR tv4973[ebp]
	fld	QWORD PTR [ecx+8]
	mov	esi, DWORD PTR [esi]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [edi]
	fstp	QWORD PTR [edi]
	mov	edi, DWORD PTR [esi+ebx]
	fld	QWORD PTR [eax+8]
	mov	DWORD PTR tv5327[ebp], edi
	mov	edi, DWORD PTR [edi]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [edi+16]
	fstp	QWORD PTR [edi+16]

; 813  :         h[j][k][0][1] += v*u[i][2];

	mov	edi, DWORD PTR tv4309[ebp]
	mov	esi, DWORD PTR [esi+edi]
	fld	QWORD PTR [edx+16]

; 814  :         h[k][i][1][2] += v*u[j][0];

	mov	edi, DWORD PTR tv4510[ebp]
	fmul	ST(0), ST(1)
	mov	DWORD PTR tv5076[ebp], esi
	mov	esi, DWORD PTR [esi]
	fadd	QWORD PTR [esi+8]
	fstp	QWORD PTR [esi+8]
	mov	esi, DWORD PTR tv4678[ebp]
	fld	QWORD PTR [ecx]
	mov	esi, DWORD PTR [esi+edi]
	mov	ebx, DWORD PTR [esi+ebx]
	fmul	ST(0), ST(1)
	mov	DWORD PTR tv5346[ebp], ebx
	mov	ebx, DWORD PTR [ebx+4]
	fadd	QWORD PTR [ebx+16]
	fstp	QWORD PTR [ebx+16]

; 815  :         h[k][j][1][0] += v*u[i][2];

	mov	ebx, DWORD PTR tv4775[ebp]
	fld	QWORD PTR [edx+16]
	mov	esi, DWORD PTR [ebx+esi]
	mov	ebx, DWORD PTR [esi+4]
	fmul	ST(0), ST(1)

; 816  :         h[j][i][1][2] -= v*u[k][0];
; 817  :         h[j][k][1][0] -= v*u[i][2];
; 818  :         h[k][i][0][2] -= v*u[j][1];
; 819  :         h[k][j][0][1] -= v*u[i][2];

	mov	esi, DWORD PTR [esi]
	fadd	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv5327[ebp]
	mov	ebx, DWORD PTR [ebx+4]
	fld	ST(0)
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv5076[ebp]
	mov	eax, DWORD PTR [eax+4]
	fsubr	QWORD PTR [ebx+16]
	fstp	QWORD PTR [ebx+16]
	mov	ebx, DWORD PTR tv5396[ebp]
	fld	QWORD PTR [edx+16]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR tv5346[ebp]
	fld	QWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv5135[ebp]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [eax+16]
	fstp	QWORD PTR [eax+16]
	fmul	QWORD PTR [edx+16]
	mov	edx, DWORD PTR tv5130[ebp]
	fsubr	QWORD PTR [esi+8]
	fstp	QWORD PTR [esi+8]
	mov	esi, DWORD PTR tv4973[ebp]
	jmp	SHORT $LN78@q_facet_to@3
$LN301@q_facet_to@3:
	fstp	ST(0)
$LN78@q_facet_to@3:

; 800  :      for ( k = 0 ; k < FACET_CTRL ; k++ )

	mov	eax, DWORD PTR tv4309[ebp]
	add	DWORD PTR tv4667[ebp], 8
	add	eax, 4
	add	edi, 4
	mov	DWORD PTR tv4309[ebp], eax
	mov	DWORD PTR tv4510[ebp], edi
	cmp	eax, 24					; 00000018H
	jl	$LN79@q_facet_to@3

; 799  :     for ( j = 0 ; j < FACET_CTRL ; j++ )

	mov	edi, DWORD PTR tv4775[ebp]
	mov	eax, DWORD PTR tv4667[ebp]
	add	edi, 4
	add	esi, 4
	mov	DWORD PTR tv4775[ebp], edi
	mov	DWORD PTR tv4973[ebp], esi
	cmp	edi, 24					; 00000018H
	jl	$LN82@q_facet_to@3

; 797  : 
; 798  :   for ( i = 0 ; i < FACET_CTRL ; i++ )

	add	DWORD PTR tv5217[ebp], 4
	add	ebx, 4
	mov	DWORD PTR tv5396[ebp], ebx
	cmp	eax, OFFSET _vcoeff+1728
	jl	$LN85@q_facet_to@3

; 820  :      }
; 821  : 
; 822  :   /* add corrections due to wraps */
; 823  :   fe = get_facet_fe(f_info->id);

	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	fstp	ST(1)
	mov	eax, DWORD PTR [ecx]
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN121@q_facet_to@3
	xor	edi, edi
	jmp	SHORT $LN120@q_facet_to@3
$LN121@q_facet_to@3:
	mov	ecx, DWORD PTR _web+236
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	edi, DWORD PTR [edx+28]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN120@q_facet_to@3
	xor	edi, 134217728				; 08000000H
$LN120@q_facet_to@3:

; 824  :   for ( i = 0 ; i < FACET_EDGES ; i++, fe = get_next_edge(fe) ) 

	mov	ecx, DWORD PTR _web+460
	mov	DWORD PTR _i$[ebp], 0
$LN247@q_facet_to@3:

; 825  :      w[i] = get_fe_wrap(fe);

	mov	ebx, DWORD PTR _web+216
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	ecx, DWORD PTR [esi+ecx]
	mov	eax, edi
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _web+124
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ebx+ecx+784]
	mov	ecx, DWORD PTR [edx+ecx]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN132@q_facet_to@3
	push	ecx
	fstp	ST(0)
	call	DWORD PTR _sym_inverse
	fld	QWORD PTR _vol$[ebp]
	add	esp, 4
	jmp	SHORT $LN375@q_facet_to@3
$LN132@q_facet_to@3:
	mov	eax, ecx
$LN375@q_facet_to@3:
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _web+460
	mov	DWORD PTR _w$[ebp+edx*4], eax
	mov	eax, DWORD PTR [esi+ecx]
	inc	edx
	mov	DWORD PTR _i$[ebp], edx
	test	edi, 134217728				; 08000000H
	je	SHORT $LN125@q_facet_to@3

; 824  :   for ( i = 0 ; i < FACET_EDGES ; i++, fe = get_next_edge(fe) ) 

	mov	edi, DWORD PTR [eax+28]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN175@q_facet_to@3
$LN125@q_facet_to@3:
	mov	edi, DWORD PTR [eax+32]
$LN175@q_facet_to@3:
	cmp	edx, 3
	jl	$LN247@q_facet_to@3

; 826  : 
; 827  :   allwrap = WR(w[0],2)+(WR(w[1],2)<<TWRAPBITS)+(WR(w[2],2)<<(2*TWRAPBITS));

	mov	eax, DWORD PTR _w$[ebp+8]
	mov	ecx, DWORD PTR _w$[ebp+4]
	mov	edx, DWORD PTR _w$[ebp]
	sar	eax, 12					; 0000000cH
	and	eax, 31					; 0000001fH
	shl	eax, 6
	sar	ecx, 12					; 0000000cH
	and	ecx, 31					; 0000001fH
	add	eax, ecx
	sar	edx, 12					; 0000000cH
	shl	eax, 6
	and	edx, 31					; 0000001fH
	add	eax, edx

; 828  :   switch ( allwrap )

	cmp	eax, 4127				; 0000101fH
	ja	$LN119@q_facet_to@3
	je	$LN328@q_facet_to@3
	test	eax, eax
	je	$LN246@q_facet_to@3
	cmp	eax, 95					; 0000005fH
	je	SHORT $LN334@q_facet_to@3
	cmp	eax, 1985				; 000007c1H
	jne	$LN345@q_facet_to@3

; 829  :      { case 0: break;
; 830  :         case (POSWRAP)+(NEGWRAP << TWRAPBITS): break;

	jmp	$LN246@q_facet_to@3
$LN334@q_facet_to@3:

; 855  :         case  (NEGWRAP) + (POSWRAP << TWRAPBITS):
; 856  :             vol -= cut_int(u) + cut_int(u+2);

	mov	edi, DWORD PTR _u$[ebp]
	fstp	ST(0)
	lea	ebx, DWORD PTR [edi+8]
	push	ebx
	call	_cut_int
	fstp	QWORD PTR tv5521[ebp]
	push	edi
	call	_cut_int
	fadd	QWORD PTR tv5521[ebp]

; 857  :             for ( i = 0 ; i < EDGE_CTRL ; i++ ) hh[i] = h[i];

	mov	esi, DWORD PTR _h$[ebp]
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [esi+4]
	fsubr	QWORD PTR _vol$[ebp]
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR _hh$[ebp], eax

; 858  :             cut_hess(u,ugrad,hh,-1); 

	push	-1
	fstp	QWORD PTR _vol$[ebp]
	lea	eax, DWORD PTR _hh$[ebp]
	mov	DWORD PTR _hh$[ebp+4], ecx
	mov	ecx, DWORD PTR _ugrad$[ebp]
	push	eax
	push	ecx
	push	edi
	mov	DWORD PTR _hh$[ebp+8], edx
	call	_cut_hess

; 859  :             for ( i = 0 ; i < EDGE_CTRL ; i++ ) hh[i] = h[i+2]+2;

	mov	edx, DWORD PTR [esi+8]
	mov	eax, DWORD PTR [esi+12]
	mov	ecx, DWORD PTR [esi+16]
	add	eax, 8
	add	edx, 8
	mov	DWORD PTR _hh$[ebp+4], eax

; 860  :             cut_hess(u+2,ugrad+2,hh,-1); 

	mov	eax, DWORD PTR _ugrad$[ebp]
	mov	DWORD PTR _hh$[ebp], edx
	push	-1
	lea	edx, DWORD PTR _hh$[ebp]
	push	edx
	add	eax, 8
	push	eax
	add	ecx, 8
	push	ebx
	mov	DWORD PTR _hh$[ebp+8], ecx
	call	_cut_hess

; 861  :             switch ( WR(f_info->wraps[4],0) )

	fld1
	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [ecx+832]
	and	eax, 31					; 0000001fH
	add	esp, 40					; 00000028H
	dec	eax
	je	SHORT $LN36@q_facet_to@3
	sub	eax, 30					; 0000001eH
	jne	SHORT $LN243@q_facet_to@3

; 863  :               case NEGWRAP: vol += u[4][1]; ugrad[4][1] += 1.0; break;

	mov	edx, DWORD PTR [edi+16]
	fld	QWORD PTR [edx+8]
	mov	eax, DWORD PTR _ugrad$[ebp]
	fadd	QWORD PTR _vol$[ebp]
	mov	eax, DWORD PTR [eax+16]
	fld	QWORD PTR [eax+8]
	fadd	ST(0), ST(2)
	fstp	QWORD PTR [eax+8]
	jmp	SHORT $LN37@q_facet_to@3
$LN36@q_facet_to@3:

; 862  :             { case POSWRAP: vol -= u[4][1]; ugrad[4][1] -= 1.0; break;

	mov	edx, DWORD PTR [edi+16]
	fld	QWORD PTR _vol$[ebp]
	mov	eax, DWORD PTR _ugrad$[ebp]
	fsub	QWORD PTR [edx+8]
	mov	eax, DWORD PTR [eax+16]
	fld	QWORD PTR [eax+8]
	fsub	ST(0), ST(2)
	fstp	QWORD PTR [eax+8]
	jmp	SHORT $LN37@q_facet_to@3
$LN243@q_facet_to@3:
	fld	QWORD PTR _vol$[ebp]
$LN37@q_facet_to@3:

; 864  :             }
; 865  :             switch ( WR(f_info->wraps[0],0) )

	mov	eax, DWORD PTR [ecx+816]
	and	eax, 31					; 0000001fH
	dec	eax
	je	SHORT $LN32@q_facet_to@3
	sub	eax, 30					; 0000001eH
	jne	$LN373@q_facet_to@3

; 867  :               case NEGWRAP: vol -= u[0][1]; ugrad[0][1] -= 1.0;break;

	mov	ecx, DWORD PTR [edi]
	fsub	QWORD PTR [ecx+8]
	mov	edx, DWORD PTR _ugrad$[ebp]
	mov	eax, DWORD PTR [edx]
	fld	QWORD PTR [eax+8]
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax+8]
	jmp	$LN246@q_facet_to@3
$LN32@q_facet_to@3:

; 866  :             { case POSWRAP: vol += u[0][1]; ugrad[0][1] += 1.0;break;

	mov	eax, DWORD PTR [edi]
	fadd	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR _ugrad$[ebp]
	mov	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+8]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax+8]

; 868  :             }
; 869  :             break;

	jmp	$LN246@q_facet_to@3
$LN328@q_facet_to@3:

; 831  :         case (POSWRAP << TWRAPBITS) + (NEGWRAP << (2*TWRAPBITS)): break; 
; 832  :         case (NEGWRAP) + (POSWRAP << (2*TWRAPBITS)):
; 833  :             vol -= cut_int(u) + cut_int(u+2) + cut_int(u+4);

	mov	edi, DWORD PTR _u$[ebp]
	fstp	ST(0)
	lea	eax, DWORD PTR [edi+8]
	lea	esi, DWORD PTR [edi+16]
	push	eax
	mov	DWORD PTR tv2891[ebp], eax
	mov	DWORD PTR tv2919[ebp], esi
	call	_cut_int
	fstp	QWORD PTR tv5523[ebp]
	push	edi
	call	_cut_int
	fadd	QWORD PTR tv5523[ebp]
	push	esi
	fstp	QWORD PTR tv5525[ebp]
	call	_cut_int

; 834  :             for ( i = 0 ; i < EDGE_CTRL ; i++ ) hh[i] = h[i];

	mov	esi, DWORD PTR _h$[ebp]
	fadd	QWORD PTR tv5525[ebp]
	mov	edx, DWORD PTR [esi]

; 835  :             cut_hess(u,ugrad,hh,-1); 

	mov	ebx, DWORD PTR _ugrad$[ebp]
	fsubr	QWORD PTR _vol$[ebp]
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR _hh$[ebp], edx
	push	-1
	fstp	QWORD PTR _vol$[ebp]
	lea	edx, DWORD PTR _hh$[ebp]
	push	edx
	push	ebx
	push	edi
	mov	DWORD PTR _hh$[ebp+4], eax
	mov	DWORD PTR _hh$[ebp+8], ecx
	call	_cut_hess

; 836  :             for ( i = 0 ; i < EDGE_CTRL ; i++ ) hh[i] = h[i+2]+2;

	mov	eax, DWORD PTR [esi+8]
	mov	ecx, DWORD PTR [esi+12]
	mov	edx, DWORD PTR [esi+16]
	add	eax, 8
	add	ecx, 8
	mov	DWORD PTR _hh$[ebp], eax

; 837  :             cut_hess(u+2,ugrad+2,hh,-1); 

	push	-1
	add	edx, 8
	lea	eax, DWORD PTR _hh$[ebp]
	mov	DWORD PTR _hh$[ebp+4], ecx
	push	eax
	lea	ecx, DWORD PTR [ebx+8]
	mov	DWORD PTR _hh$[ebp+8], edx
	mov	edx, DWORD PTR tv2891[ebp]
	push	ecx
	push	edx
	call	_cut_hess

; 838  :             for ( i = 0 ; i < EDGE_CTRL ; i++ ) hh[i] = h[i+4]+4;

	mov	eax, DWORD PTR [esi+16]
	mov	ecx, DWORD PTR [esi+20]
	mov	edx, DWORD PTR [esi+24]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _hh$[ebp], eax

; 839  :             cut_hess(u+4,ugrad+4,hh,-1);

	push	-1
	add	ecx, 16					; 00000010H
	lea	eax, DWORD PTR _hh$[ebp]
	push	eax
	mov	DWORD PTR _hh$[ebp+4], ecx
	mov	ecx, DWORD PTR tv2919[ebp]
	add	ebx, 16					; 00000010H
	add	edx, 16					; 00000010H
	push	ebx
	push	ecx
	mov	DWORD PTR _hh$[ebp+8], edx
	call	_cut_hess

; 840  :             break;

	fld	QWORD PTR _vol$[ebp]
	add	esp, 60					; 0000003cH
	jmp	$LN246@q_facet_to@3
$LN119@q_facet_to@3:

; 828  :   switch ( allwrap )

	sub	eax, 6080				; 000017c0H
	je	$LN340@q_facet_to@3
	sub	eax, 120897				; 0001d841H
	je	SHORT $LN343@q_facet_to@3
	sub	eax, 63					; 0000003fH
	je	$LN246@q_facet_to@3
$LN345@q_facet_to@3:

; 879  :             }
; 880  :             break;
; 881  :          default: kb_error(1333,
; 882  :             "Internal error: Bad allwrap in facet_volume.\n",RECOVERABLE);

	push	1
	fstp	ST(0)
	push	OFFSET ??_C@_0CO@CFIBBAKF@Internal?5error?3?5Bad?5allwrap?5in?5f@
	push	1333					; 00000535H
	call	_kb_error
	fld	QWORD PTR _vol$[ebp]
	add	esp, 12					; 0000000cH
	jmp	$LN246@q_facet_to@3
$LN343@q_facet_to@3:

; 841  : 
; 842  :         case (POSWRAP ) + (NEGWRAP << (2*TWRAPBITS)):
; 843  :             vol += cut_int(u+2);

	mov	ebx, DWORD PTR _u$[ebp]
	fstp	ST(0)
	lea	esi, DWORD PTR [ebx+8]
	push	esi
	call	_cut_int
	fadd	QWORD PTR _vol$[ebp]

; 844  :             for ( i = 0 ; i < EDGE_CTRL ; i++ ) hh[i] = h[i+2]+2;

	mov	eax, DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR [eax+12]
	fstp	QWORD PTR _vol$[ebp]

; 845  :             cut_hess(u+2,ugrad+2,hh,1); 

	mov	edi, DWORD PTR _ugrad$[ebp]
	add	edx, 8
	mov	DWORD PTR _hh$[ebp], edx
	mov	edx, DWORD PTR [eax+16]
	push	1
	lea	eax, DWORD PTR _hh$[ebp]
	push	eax
	add	edi, 8
	add	ecx, 8
	add	edx, 8
	push	edi
	push	esi
	mov	DWORD PTR _hh$[ebp+4], ecx
	mov	DWORD PTR _hh$[ebp+8], edx
	call	_cut_hess

; 846  :             switch ( WR(f_info->wraps[2],0) )

	fld1
	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [ecx+824]
	and	eax, 31					; 0000001fH
	add	esp, 20					; 00000014H
	dec	eax
	je	SHORT $LN51@q_facet_to@3
	sub	eax, 30					; 0000001eH
	jne	SHORT $LN244@q_facet_to@3

; 848  :               case NEGWRAP: vol += u[2][1]; ugrad[2][1] += 1.0; break;

	mov	edx, DWORD PTR [esi]
	fld	QWORD PTR [edx+8]
	mov	edi, DWORD PTR [edi]
	fadd	QWORD PTR _vol$[ebp]
	fld	QWORD PTR [edi+8]
	fadd	ST(0), ST(2)
	fstp	QWORD PTR [edi+8]
	jmp	SHORT $LN52@q_facet_to@3
$LN51@q_facet_to@3:

; 847  :             { case POSWRAP: vol -= u[2][1]; ugrad[2][1] -= 1.0; break;

	mov	eax, DWORD PTR [esi]
	fld	QWORD PTR _vol$[ebp]
	fsub	QWORD PTR [eax+8]
	mov	edi, DWORD PTR [edi]
	fld	QWORD PTR [edi+8]
	fsub	ST(0), ST(2)
	fstp	QWORD PTR [edi+8]
	jmp	SHORT $LN52@q_facet_to@3
$LN244@q_facet_to@3:
	fld	QWORD PTR _vol$[ebp]
$LN52@q_facet_to@3:

; 849  :             }
; 850  :             switch ( WR(f_info->wraps[4],0) )

	mov	eax, DWORD PTR [ecx+832]
	and	eax, 31					; 0000001fH
	dec	eax
	je	SHORT $LN47@q_facet_to@3
	sub	eax, 30					; 0000001eH
	jne	$LN373@q_facet_to@3

; 852  :               case NEGWRAP: vol -= u[4][1]; ugrad[4][1] -= 1.0; break;

	mov	ecx, DWORD PTR [ebx+16]
	fsub	QWORD PTR [ecx+8]
	mov	edx, DWORD PTR _ugrad$[ebp]
	mov	eax, DWORD PTR [edx+16]
	fld	QWORD PTR [eax+8]
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax+8]
	jmp	$LN246@q_facet_to@3
$LN47@q_facet_to@3:

; 851  :             { case POSWRAP: vol += u[4][1]; ugrad[4][1] += 1.0; break;

	mov	eax, DWORD PTR [ebx+16]
	fadd	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR _ugrad$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	fld	QWORD PTR [eax+8]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax+8]

; 853  :             }
; 854  :             break;

	jmp	$LN246@q_facet_to@3
$LN340@q_facet_to@3:

; 870  :         case (NEGWRAP << TWRAPBITS) + (POSWRAP << (2*TWRAPBITS)):
; 871  :             vol -= cut_int(u+2) + cut_int(u+4);

	mov	edi, DWORD PTR _u$[ebp]
	fstp	ST(0)
	lea	ebx, DWORD PTR [edi+16]
	push	ebx
	add	edi, 8
	call	_cut_int
	fstp	QWORD PTR tv5527[ebp]
	push	edi
	call	_cut_int
	fadd	QWORD PTR tv5527[ebp]

; 872  :             for ( i = 0 ; i < EDGE_CTRL ; i++ ) hh[i] = h[i+2]+2;

	mov	esi, DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR [esi+8]
	mov	eax, DWORD PTR [esi+12]
	fsubr	QWORD PTR _vol$[ebp]
	mov	ecx, DWORD PTR [esi+16]
	add	eax, 8
	add	edx, 8
	fstp	QWORD PTR _vol$[ebp]
	mov	DWORD PTR _hh$[ebp+4], eax

; 873  :             cut_hess(u+2,ugrad+2,hh,-1); 

	mov	eax, DWORD PTR _ugrad$[ebp]
	mov	DWORD PTR _hh$[ebp], edx
	push	-1
	lea	edx, DWORD PTR _hh$[ebp]
	add	eax, 8
	push	edx
	push	eax
	add	ecx, 8
	push	edi
	mov	DWORD PTR _hh$[ebp+8], ecx
	mov	DWORD PTR tv2914[ebp], eax
	call	_cut_hess

; 874  :             for ( i = 0 ; i < EDGE_CTRL ; i++ ) hh[i] = h[i+4]+4;

	mov	eax, DWORD PTR [esi+16]
	mov	ecx, DWORD PTR [esi+20]
	mov	edx, DWORD PTR [esi+24]
	add	ecx, 16					; 00000010H
	add	eax, 16					; 00000010H
	mov	DWORD PTR _hh$[ebp+4], ecx

; 875  :             cut_hess(u+4,ugrad+4,hh,-1);

	mov	ecx, DWORD PTR _ugrad$[ebp]
	mov	DWORD PTR _hh$[ebp], eax
	push	-1
	lea	eax, DWORD PTR _hh$[ebp]
	push	eax
	add	ecx, 16					; 00000010H
	push	ecx
	add	edx, 16					; 00000010H
	push	ebx
	mov	DWORD PTR _hh$[ebp+8], edx
	call	_cut_hess

; 876  :             switch ( WR(f_info->wraps[2],0) )

	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [edx+824]
	and	eax, 31					; 0000001fH
	add	esp, 40					; 00000028H
	dec	eax
	je	SHORT $LN21@q_facet_to@3
	sub	eax, 30					; 0000001eH

; 878  :               case NEGWRAP: vol -= u[2][1]; ugrad[2][1] -= 1.0; break;

	fld	QWORD PTR _vol$[ebp]
	jne	SHORT $LN246@q_facet_to@3
	mov	eax, DWORD PTR [edi]
	fsub	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR tv2914[ebp]
	mov	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+8]
	fsub	QWORD PTR __real@3ff0000000000000
	fstp	QWORD PTR [eax+8]
	jmp	SHORT $LN246@q_facet_to@3
$LN21@q_facet_to@3:

; 877  :             { case POSWRAP: vol += u[2][1]; ugrad[2][1] += 1.0; break;

	mov	edx, DWORD PTR [edi]
	fld	QWORD PTR [edx+8]
	mov	eax, DWORD PTR tv2914[ebp]
	fadd	QWORD PTR _vol$[ebp]
	mov	eax, DWORD PTR [eax]
	fld	QWORD PTR [eax+8]
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	QWORD PTR [eax+8]
	jmp	SHORT $LN246@q_facet_to@3
$LN373@q_facet_to@3:

; 849  :             }
; 850  :             switch ( WR(f_info->wraps[4],0) )

	fstp	ST(1)
$LN246@q_facet_to@3:

; 883  : 
; 884  :      }
; 885  :   vol *= web.torusv;

	fmul	QWORD PTR _web+1600

; 886  :   for ( i = 0 ; i < FACET_CTRL ; i++ )

	mov	edx, DWORD PTR _web+616
	xor	esi, esi
	fstp	QWORD PTR _vol$[ebp]
	npad	3
$LL18@q_facet_to@3:

; 887  :      for ( j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN17@q_facet_to@3

; 886  :   for ( i = 0 ; i < FACET_CTRL ; i++ )

	mov	edx, DWORD PTR _ugrad$[ebp]
	mov	eax, DWORD PTR [edx+esi*4]
	npad	1
$LL242@q_facet_to@3:

; 888  :        ugrad[i][j] *= web.torusv;

	fld	QWORD PTR [eax]
	inc	ecx
	fmul	QWORD PTR _web+1600
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	mov	edx, DWORD PTR _web+616
	cmp	ecx, edx
	jl	SHORT $LL242@q_facet_to@3
$LN17@q_facet_to@3:

; 886  :   for ( i = 0 ; i < FACET_CTRL ; i++ )

	inc	esi
	cmp	esi, 6
	jl	SHORT $LL18@q_facet_to@3

; 889  :   mat_mult(ugrad,dx,f_info->grad,FACET_CTRL,SDIM,SDIM);

	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [eax+1336]
	mov	eax, DWORD PTR _ugrad$[ebp]
	push	edx
	push	edx
	mov	edx, DWORD PTR _dx$[ebp]
	push	6
	push	ecx
	push	edx
	push	eax
	call	_mat_mult
	add	esp, 24					; 00000018H
	xor	edi, edi
	npad	8
$LL248@q_facet_to@3:

; 891  :      for ( ii = 0 ; ii < FACET_CTRL ; ii++ )

	xor	esi, esi
$LL9@q_facet_to@3:

; 892  :      { for ( j = 0 ; j < SDIM ; j++ ) 

	mov	ecx, DWORD PTR _web+616
	xor	ebx, ebx
	test	ecx, ecx
	jle	SHORT $LN4@q_facet_to@3
	npad	2
$LL6@q_facet_to@3:

; 893  :           for ( jj = 0 ; jj < SDIM ; jj++ ) 

	xor	edx, edx
	test	ecx, ecx
	jle	SHORT $LN5@q_facet_to@3
	mov	ecx, DWORD PTR _h$[ebp]
	mov	eax, DWORD PTR [edi+ecx]
	mov	ecx, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [ecx+ebx*4]
$LL3@q_facet_to@3:

; 894  :              h[i][ii][j][jj] *= web.torusv;

	fld	QWORD PTR [eax]
	inc	edx
	fmul	QWORD PTR _web+1600
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	mov	ecx, DWORD PTR _web+616
	cmp	edx, ecx
	jl	SHORT $LL3@q_facet_to@3
$LN5@q_facet_to@3:

; 892  :      { for ( j = 0 ; j < SDIM ; j++ ) 

	inc	ebx
	cmp	ebx, ecx
	jl	SHORT $LL6@q_facet_to@3
$LN4@q_facet_to@3:

; 895  :        mat_mult(h[i][ii],dx,temph,SDIM,SDIM,SDIM);

	mov	edx, DWORD PTR _temph$[ebp]
	mov	eax, DWORD PTR _h$[ebp]
	mov	ebx, DWORD PTR _dx$[ebp]
	push	ecx
	push	ecx
	push	ecx
	mov	ecx, DWORD PTR [edi+eax]
	push	edx
	mov	edx, DWORD PTR [esi+ecx]
	push	ebx
	push	edx
	call	_mat_mult

; 896  :        tr_mat_mul(dx,temph,f_info->hess[i][ii],SDIM,SDIM,SDIM);

	mov	eax, DWORD PTR _web+616
	push	eax
	push	eax
	push	eax
	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [eax+1340]
	mov	edx, DWORD PTR [edi+ecx]
	mov	eax, DWORD PTR [edx+esi]
	mov	ecx, DWORD PTR _temph$[ebp]
	push	eax
	push	ecx
	push	ebx
	call	_tr_mat_mul
	add	esi, 4
	add	esp, 48					; 00000030H
	cmp	esi, 24					; 00000018H
	jl	$LL9@q_facet_to@3

; 890  :   for ( i = 0 ; i < FACET_CTRL ; i++ )

	add	edi, 4
	cmp	edi, 24					; 00000018H
	jl	$LL248@q_facet_to@3

; 897  :      }
; 898  :  
; 899  :   return vol;
; 900  : } // end q_facet_torus_volume_q_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _vol$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_q_facet_torus_volume_q_hess ENDP
_TEXT	ENDS
PUBLIC	_lagr_cut_int
EXTRN	_gauss_lagrange:BYTE
; Function compile flags: /Ogtp
;	COMDAT _lagr_cut_int
_TEXT	SEGMENT
$T90905 = -24						; size = 4
tv1399 = -20						; size = 4
_k$ = -20						; size = 4
_gl$ = -16						; size = 4
tv1112 = -12						; size = 4
tv1503 = -8						; size = 4
_m$ = -4						; size = 4
_u$ = 8							; size = 4
_lagr_cut_int PROC					; COMDAT

; 913  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 914  :   REAL area;
; 915  :   struct gauss_lag *gl = &gauss_lagrange[1][web.gauss1D_order];

	mov	ecx, DWORD PTR _web+1592

; 916  :   int ctrl = web.skel[EDGE].ctrlpts;
; 917  :   int m,k;
; 918  : 
; 919  :   /* main integral over edge */
; 920  :   area = 0.0;

	fldz
	shl	ecx, 5
	fld	ST(0)
	add	ecx, DWORD PTR _gauss_lagrange+4
	push	ebx
	mov	eax, DWORD PTR [ecx+4]

; 921  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	xor	ebx, ebx
	push	esi
	mov	esi, DWORD PTR _web+120
	mov	DWORD PTR _gl$[ebp], ecx
	mov	DWORD PTR _m$[ebp], ebx

; 924  :     { x += gl->gpoly[m][k]*u[k][0];

	mov	DWORD PTR $T90905[ebp], eax
	test	eax, eax
	jle	$LN21@lagr_cut_i

; 914  :   REAL area;
; 915  :   struct gauss_lag *gl = &gauss_lagrange[1][web.gauss1D_order];

	mov	eax, DWORD PTR [ecx+12]
	push	edi
	mov	DWORD PTR tv1503[ebp], eax
$LN18@lagr_cut_i:

; 922  :   { REAL dy,x;
; 923  :     for ( x = 0.0, dy = 0.0, k = 0 ; k < ctrl ; k++ )

	xor	eax, eax
	fld	ST(1)
	fld	ST(2)
	cmp	esi, 4
	jl	$LC14@lagr_cut_i
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [ecx+24]
	mov	edi, DWORD PTR [edx+ebx*4]
	mov	ecx, DWORD PTR [eax+ebx*4]
	mov	ebx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _u$[ebp]
	add	esi, -4					; fffffffcH
	lea	edx, DWORD PTR [ebx+24]

; 925  :       dy += gl->gpolypart[m][0][k]*u[k][1];

	sub	ebx, edi
	shr	esi, 2
	add	ecx, 8
	inc	esi
	lea	eax, DWORD PTR [edi+16]
	lea	edi, DWORD PTR [esi*4]
	mov	DWORD PTR tv1112[ebp], ebx
	mov	DWORD PTR _k$[ebp], edi
$LN15@lagr_cut_i:

; 924  :     { x += gl->gpoly[m][k]*u[k][0];

	mov	edi, DWORD PTR [ecx-8]
	fld	QWORD PTR [eax-16]
	fmul	QWORD PTR [edi]
	mov	ebx, DWORD PTR [ecx-4]

; 925  :       dy += gl->gpolypart[m][0][k]*u[k][1];

	add	eax, 32					; 00000020H
	add	edx, 32					; 00000020H
	faddp	ST(2), ST(0)
	add	ecx, 16					; 00000010H
	dec	esi
	fld	QWORD PTR [eax-40]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [ecx-16]
	faddp	ST(2), ST(0)
	fld	QWORD PTR [eax-32]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [ecx-12]
	faddp	ST(2), ST(0)
	fld	QWORD PTR [eax-24]
	fmul	QWORD PTR [ebx]
	faddp	ST(2), ST(0)
	fld	QWORD PTR [edx-56]
	fmul	QWORD PTR [edi+8]
	mov	edi, DWORD PTR [ecx-20]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx-48]
	fmul	QWORD PTR [edi+8]
	mov	edi, DWORD PTR tv1112[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax+edi-32]
	mov	edi, DWORD PTR [ecx-16]
	fmul	QWORD PTR [edi+8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+8]
	fmul	QWORD PTR [edx-32]
	faddp	ST(1), ST(0)
	jne	SHORT $LN15@lagr_cut_i

; 922  :   { REAL dy,x;
; 923  :     for ( x = 0.0, dy = 0.0, k = 0 ; k < ctrl ; k++ )

	mov	ecx, DWORD PTR _gl$[ebp]
	mov	ebx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _k$[ebp]
$LC14@lagr_cut_i:
	mov	esi, DWORD PTR _web+120
	cmp	eax, esi
	jge	SHORT $LN19@lagr_cut_i
	mov	edx, DWORD PTR [ecx+24]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	esi, DWORD PTR [ecx+20]
	mov	edi, DWORD PTR [edx]
	mov	esi, DWORD PTR [esi+ebx*4]
	sub	esi, edi
	lea	edx, DWORD PTR [edi+eax*8]
	mov	DWORD PTR tv1399[ebp], esi
	jmp	SHORT $LC3@lagr_cut_i
$LN17@lagr_cut_i:
	mov	esi, DWORD PTR tv1399[ebp]
$LC3@lagr_cut_i:

; 924  :     { x += gl->gpoly[m][k]*u[k][0];

	mov	edi, DWORD PTR _u$[ebp]
	fld	QWORD PTR [esi+edx]
	mov	edi, DWORD PTR [edi+eax*4]
	fmul	QWORD PTR [edi]
	mov	esi, DWORD PTR _web+120
	inc	eax
	add	edx, 8
	faddp	ST(2), ST(0)

; 925  :       dy += gl->gpolypart[m][0][k]*u[k][1];

	fld	QWORD PTR [edi+8]
	fmul	QWORD PTR [edx-8]
	faddp	ST(1), ST(0)
	cmp	eax, esi
	jl	SHORT $LN17@lagr_cut_i
$LN19@lagr_cut_i:

; 926  :     }
; 927  :     area -= gl->gausswt[m]*x*dy;

	mov	eax, DWORD PTR tv1503[ebp]
	fld	QWORD PTR [eax]
	inc	ebx
	fmulp	ST(2), ST(0)
	add	eax, 8
	mov	DWORD PTR _m$[ebp], ebx
	mov	DWORD PTR tv1503[ebp], eax
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	cmp	ebx, DWORD PTR $T90905[ebp]
	jl	$LN18@lagr_cut_i
	pop	edi
$LN21@lagr_cut_i:
	pop	esi

; 921  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	fstp	ST(1)
	pop	ebx

; 928  :   }
; 929  :   return area;
; 930  : } // end lagr_cut_int()

	mov	esp, ebp
	pop	ebp
	ret	0
_lagr_cut_int ENDP
_TEXT	ENDS
PUBLIC	_lagr_cut_grad
; Function compile flags: /Ogtp
;	COMDAT _lagr_cut_grad
_TEXT	SEGMENT
tv2089 = -20						; size = 4
_k$ = -20						; size = 4
tv2120 = -16						; size = 4
tv1929 = -16						; size = 4
tv1820 = -12						; size = 4
tv545 = -8						; size = 4
_ctrl$ = -4						; size = 4
_u$ = 8							; size = 4
_ugrad$ = 12						; size = 4
_sign$ = 16						; size = 4
_lagr_cut_grad PROC					; COMDAT

; 942  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 943  :   int m,k;
; 944  :   struct gauss_lag *gl = &gauss_lagrange[1][web.gauss1D_order];

	mov	eax, DWORD PTR _web+1592
	shl	eax, 5
	add	eax, DWORD PTR _gauss_lagrange+4
	push	esi

; 945  :   int ctrl = web.skel[EDGE].ctrlpts;

	mov	esi, DWORD PTR _web+120

; 946  : 
; 947  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	xor	ecx, ecx
	mov	DWORD PTR _ctrl$[ebp], esi
	cmp	DWORD PTR [eax+4], ecx
	jle	$LN7@lagr_cut_g
	fldz
	push	ebx
	push	edi
$LN26@lagr_cut_g:

; 948  :   { REAL x,dy;
; 949  :     for ( x = 0.0, dy = 0.0, k = 0 ; k < ctrl ; k++ )

	xor	edx, edx
	fld	ST(0)
	fld	ST(1)
	cmp	esi, 4
	jl	$LC19@lagr_cut_g
	mov	edx, DWORD PTR [eax+20]
	mov	edi, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	ebx, DWORD PTR [edx]
	mov	esi, DWORD PTR _u$[ebp]
	lea	edx, DWORD PTR [ebx+24]

; 951  :       dy += gl->gpolypart[m][0][k]*u[k][1];

	sub	ebx, edi
	mov	DWORD PTR tv1820[ebp], edx
	lea	edx, DWORD PTR [edi+16]
	mov	edi, DWORD PTR _ctrl$[ebp]
	add	edi, -4					; fffffffcH
	shr	edi, 2
	inc	edi
	mov	DWORD PTR tv545[ebp], edi
	add	edi, edi
	add	esi, 8
	add	edi, edi
	mov	DWORD PTR _k$[ebp], edi
	mov	edi, DWORD PTR tv1820[ebp]
	mov	DWORD PTR tv1929[ebp], ebx
$LN20@lagr_cut_g:

; 950  :     { x += gl->gpoly[m][k]*u[k][0];

	mov	ebx, DWORD PTR [esi-8]
	fld	QWORD PTR [edx-16]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [esi-4]

; 951  :       dy += gl->gpolypart[m][0][k]*u[k][1];

	add	edx, 32					; 00000020H
	add	edi, 32					; 00000020H
	faddp	ST(2), ST(0)
	add	esi, 16					; 00000010H
	dec	DWORD PTR tv545[ebp]
	fld	QWORD PTR [edx-40]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [esi-16]
	faddp	ST(2), ST(0)
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [esi-12]
	fmul	QWORD PTR [edx-32]
	faddp	ST(2), ST(0)
	fld	QWORD PTR [edx-24]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [esi-24]
	faddp	ST(2), ST(0)
	fld	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR [esi-20]
	fmul	QWORD PTR [edi-56]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR tv1929[ebp]
	fmul	QWORD PTR [edi-48]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+edx-32]
	mov	ebx, DWORD PTR [esi-16]
	fmul	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR [esi-12]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+8]
	fmul	QWORD PTR [edi-32]
	faddp	ST(1), ST(0)
	jne	SHORT $LN20@lagr_cut_g

; 948  :   { REAL x,dy;
; 949  :     for ( x = 0.0, dy = 0.0, k = 0 ; k < ctrl ; k++ )

	mov	esi, DWORD PTR _ctrl$[ebp]
	mov	edx, DWORD PTR _k$[ebp]
$LC19@lagr_cut_g:
	cmp	edx, esi
	jge	SHORT $LN18@lagr_cut_g
	mov	edi, DWORD PTR [eax+24]
	mov	edi, DWORD PTR [edi+ecx*4]
	mov	ebx, DWORD PTR [edi]
	lea	edi, DWORD PTR [ebx+edx*8]
	mov	DWORD PTR tv2089[ebp], edi
	mov	edi, DWORD PTR [eax+20]
	mov	edi, DWORD PTR [edi+ecx*4]
	sub	edi, ebx
	mov	ebx, DWORD PTR tv2089[ebp]
	mov	DWORD PTR tv2120[ebp], edi
	jmp	SHORT $LC6@lagr_cut_g
$LN25@lagr_cut_g:
	mov	edi, DWORD PTR tv2120[ebp]
$LC6@lagr_cut_g:

; 950  :     { x += gl->gpoly[m][k]*u[k][0];

	fld	QWORD PTR [edi+ebx]
	mov	edi, DWORD PTR _u$[ebp]
	mov	edi, DWORD PTR [edi+edx*4]
	fmul	QWORD PTR [edi]
	inc	edx
	add	ebx, 8
	faddp	ST(2), ST(0)

; 951  :       dy += gl->gpolypart[m][0][k]*u[k][1];

	fld	QWORD PTR [edi+8]
	fmul	QWORD PTR [ebx-8]
	faddp	ST(1), ST(0)
	cmp	edx, esi
	jl	SHORT $LN25@lagr_cut_g
$LN18@lagr_cut_g:

; 952  :     }
; 953  :     for ( k = 0 ; k < ctrl ; k++ )

	xor	edx, edx
	cmp	esi, 4
	jl	$LC22@lagr_cut_g
	mov	edi, DWORD PTR _ugrad$[ebp]

; 955  :       ugrad[k][0] -= sign*gl->gausswt[m]*dy*gl->gpoly[m][k];

	fild	DWORD PTR _sign$[ebp]
	add	edi, 8
$LN23@lagr_cut_g:

; 954  :     { ugrad[k][1] -= sign*gl->gausswt[m]*x*gl->gpolypart[m][0][k];

	mov	ebx, DWORD PTR [eax+12]
	fld	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR [eax+24]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fmul	ST(0), ST(1)
	mov	ebx, DWORD PTR [ebx]
	mov	esi, DWORD PTR [edi-8]
	fmul	ST(0), ST(3)

; 955  :       ugrad[k][0] -= sign*gl->gausswt[m]*dy*gl->gpoly[m][k];

	add	edx, 4
	fmul	QWORD PTR [ebx+edx*8-32]
	fsubr	QWORD PTR [esi+8]
	fstp	QWORD PTR [esi+8]
	mov	ebx, DWORD PTR [eax+12]
	fld	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR [eax+20]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ebx+edx*8-32]
	fsubr	QWORD PTR [esi]
	fstp	QWORD PTR [esi]
	mov	ebx, DWORD PTR [eax+12]
	fld	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR [eax+24]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fmul	ST(0), ST(1)
	mov	ebx, DWORD PTR [ebx]
	mov	esi, DWORD PTR [edi-4]
	fmul	ST(0), ST(3)
	fmul	QWORD PTR [ebx+edx*8-24]
	fsubr	QWORD PTR [esi+8]
	fstp	QWORD PTR [esi+8]
	mov	ebx, DWORD PTR [eax+12]
	fld	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR [eax+20]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ebx+edx*8-24]
	fsubr	QWORD PTR [esi]
	fstp	QWORD PTR [esi]
	mov	ebx, DWORD PTR [eax+12]
	fld	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR [eax+24]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fmul	ST(0), ST(1)
	mov	ebx, DWORD PTR [ebx]
	mov	esi, DWORD PTR [edi]
	fmul	ST(0), ST(3)
	fmul	QWORD PTR [ebx+edx*8-16]
	fsubr	QWORD PTR [esi+8]
	fstp	QWORD PTR [esi+8]
	mov	ebx, DWORD PTR [eax+12]
	fld	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR [eax+20]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ebx+edx*8-16]
	fsubr	QWORD PTR [esi]
	fstp	QWORD PTR [esi]
	mov	ebx, DWORD PTR [eax+12]
	fld	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR [eax+24]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fmul	ST(0), ST(1)
	mov	ebx, DWORD PTR [ebx]
	mov	esi, DWORD PTR [edi+4]
	fmul	ST(0), ST(3)
	fmul	QWORD PTR [ebx+edx*8-8]
	fsubr	QWORD PTR [esi+8]
	fstp	QWORD PTR [esi+8]
	mov	ebx, DWORD PTR [eax+12]
	fld	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR [eax+20]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ebx+edx*8-8]
	fsubr	QWORD PTR [esi]
	fstp	QWORD PTR [esi]
	mov	esi, DWORD PTR _ctrl$[ebp]
	lea	ebx, DWORD PTR [esi-3]
	add	edi, 16					; 00000010H
	cmp	edx, ebx
	jl	$LN23@lagr_cut_g

; 952  :     }
; 953  :     for ( k = 0 ; k < ctrl ; k++ )

	fstp	ST(0)
$LC22@lagr_cut_g:
	cmp	edx, esi
	jge	SHORT $LN46@lagr_cut_g
	fild	DWORD PTR _sign$[ebp]
$LN24@lagr_cut_g:

; 954  :     { ugrad[k][1] -= sign*gl->gausswt[m]*x*gl->gpolypart[m][0][k];

	mov	edi, DWORD PTR _ugrad$[ebp]
	mov	ebx, DWORD PTR [edi+edx*4]
	mov	edi, DWORD PTR [eax+12]
	fld	QWORD PTR [edi+ecx*8]
	mov	edi, DWORD PTR [eax+24]
	mov	edi, DWORD PTR [edi+ecx*4]
	fmul	ST(0), ST(1)
	mov	edi, DWORD PTR [edi]
	inc	edx
	fmul	ST(0), ST(3)
	fmul	QWORD PTR [edi+edx*8-8]
	fsubr	QWORD PTR [ebx+8]
	fstp	QWORD PTR [ebx+8]

; 955  :       ugrad[k][0] -= sign*gl->gausswt[m]*dy*gl->gpoly[m][k];

	mov	edi, DWORD PTR [eax+12]
	fld	QWORD PTR [edi+ecx*8]
	mov	edi, DWORD PTR [eax+20]
	mov	edi, DWORD PTR [edi+ecx*4]
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [edi+edx*8-8]
	fsubr	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]
	cmp	edx, esi
	jl	SHORT $LN24@lagr_cut_g

; 952  :     }
; 953  :     for ( k = 0 ; k < ctrl ; k++ )

	fstp	ST(0)
$LN46@lagr_cut_g:

; 946  : 
; 947  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	inc	ecx

; 952  :     }
; 953  :     for ( k = 0 ; k < ctrl ; k++ )

	fstp	ST(1)
	fstp	ST(0)
	cmp	ecx, DWORD PTR [eax+4]
	jl	$LN26@lagr_cut_g

; 946  : 
; 947  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	pop	edi
	fstp	ST(0)
	pop	ebx
$LN7@lagr_cut_g:
	pop	esi

; 956  :     }
; 957  :   }
; 958  : } // end lagr_cut_grad()

	mov	esp, ebp
	pop	ebp
	ret	0
_lagr_cut_grad ENDP
_TEXT	ENDS
PUBLIC	_lagr_cut_hess
; Function compile flags: /Ogtp
;	COMDAT _lagr_cut_hess
_TEXT	SEGMENT
tv4566 = -24						; size = 4
tv3743 = -24						; size = 4
tv4223 = -20						; size = 4
tv3102 = -20						; size = 4
tv2942 = -20						; size = 4
_ctrl$ = -16						; size = 4
tv4188 = -12						; size = 4
tv3133 = -12						; size = 4
tv2833 = -12						; size = 4
tv3930 = -8						; size = 4
_k$ = -8						; size = 4
tv3601 = -4						; size = 4
tv991 = -4						; size = 4
_u$ = 8							; size = 4
_ugrad$ = 12						; size = 4
_uhess$ = 16						; size = 4
_sign$ = 20						; size = 4
_lagr_cut_hess PROC					; COMDAT

; 971  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 972  :   int m,k,kk;
; 973  :   struct gauss_lag *gl = &gauss_lagrange[1][web.gauss1D_order];

	mov	eax, DWORD PTR _web+1592
	shl	eax, 5
	add	eax, DWORD PTR _gauss_lagrange+4
	push	edi

; 974  :   int ctrl = web.skel[EDGE].ctrlpts;

	mov	edi, DWORD PTR _web+120

; 975  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	xor	ecx, ecx
	mov	DWORD PTR _ctrl$[ebp], edi
	cmp	DWORD PTR [eax+4], ecx
	jle	$LN10@lagr_cut_h
	fild	DWORD PTR _sign$[ebp]
	push	ebx
	fldz
	push	esi
$LN33@lagr_cut_h:

; 976  :   { REAL x,dy;
; 977  :     REAL wt = sign*gl->gausswt[m];

	mov	edx, DWORD PTR [eax+12]
	fld	QWORD PTR [edx+ecx*8]

; 978  :     for ( x = 0.0, dy = 0.0, k = 0 ; k < ctrl ; k++ )

	xor	edx, edx
	fmul	ST(0), ST(2)
	fld	ST(1)
	fld	ST(2)
	cmp	edi, 4
	jl	$LC24@lagr_cut_h

; 976  :   { REAL x,dy;
; 977  :     REAL wt = sign*gl->gausswt[m];

	mov	edx, DWORD PTR [eax+20]
	mov	edi, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	ebx, DWORD PTR [edx]
	mov	esi, DWORD PTR _u$[ebp]
	lea	edx, DWORD PTR [ebx+24]

; 980  :       dy += gl->gpolypart[m][0][k]*u[k][1];

	sub	ebx, edi
	mov	DWORD PTR tv2942[ebp], ebx
	mov	DWORD PTR tv2833[ebp], edx
	lea	edx, DWORD PTR [edi+16]
	mov	edi, DWORD PTR _ctrl$[ebp]
	lea	ebx, DWORD PTR [edi-4]
	shr	ebx, 2
	inc	ebx
	mov	DWORD PTR tv991[ebp], ebx
	add	ebx, ebx
	add	esi, 8
	add	ebx, ebx
	mov	DWORD PTR _k$[ebp], ebx
$LN25@lagr_cut_h:

; 979  :     { x += gl->gpoly[m][k]*u[k][0];

	mov	ebx, DWORD PTR [esi-8]
	fld	QWORD PTR [edx-16]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [esi-4]

; 980  :       dy += gl->gpolypart[m][0][k]*u[k][1];

	add	edx, 32					; 00000020H
	add	esi, 16					; 00000010H
	faddp	ST(2), ST(0)
	fld	QWORD PTR [edx-40]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [esi-16]
	faddp	ST(2), ST(0)
	fld	QWORD PTR [edx-32]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [esi-12]
	faddp	ST(2), ST(0)
	fld	QWORD PTR [edx-24]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [esi-24]
	faddp	ST(2), ST(0)
	fld	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR tv2833[ebp]
	fmul	QWORD PTR [ebx-24]
	mov	ebx, DWORD PTR [esi-20]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR tv2833[ebp]
	fmul	QWORD PTR [ebx-16]
	mov	ebx, DWORD PTR tv2942[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+edx-32]
	mov	ebx, DWORD PTR [esi-16]
	fmul	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR [esi-12]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR tv2833[ebp]
	fmul	QWORD PTR [ebx]
	add	ebx, 32					; 00000020H
	dec	DWORD PTR tv991[ebp]
	mov	DWORD PTR tv2833[ebp], ebx
	faddp	ST(1), ST(0)
	jne	SHORT $LN25@lagr_cut_h

; 976  :   { REAL x,dy;
; 977  :     REAL wt = sign*gl->gausswt[m];

	mov	edx, DWORD PTR _k$[ebp]
$LC24@lagr_cut_h:

; 978  :     for ( x = 0.0, dy = 0.0, k = 0 ; k < ctrl ; k++ )

	cmp	edx, edi
	jge	SHORT $LN23@lagr_cut_h
	mov	esi, DWORD PTR [eax+24]
	mov	esi, DWORD PTR [esi+ecx*4]
	mov	ebx, DWORD PTR [esi]
	lea	esi, DWORD PTR [ebx+edx*8]
	mov	DWORD PTR tv3102[ebp], esi
	mov	esi, DWORD PTR [eax+20]
	mov	esi, DWORD PTR [esi+ecx*4]
	sub	esi, ebx
	mov	ebx, DWORD PTR tv3102[ebp]
	mov	DWORD PTR tv3133[ebp], esi
	jmp	SHORT $LC9@lagr_cut_h
$LN30@lagr_cut_h:
	mov	esi, DWORD PTR tv3133[ebp]
$LC9@lagr_cut_h:

; 979  :     { x += gl->gpoly[m][k]*u[k][0];

	fld	QWORD PTR [esi+ebx]
	mov	esi, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR [esi+edx*4]
	fmul	QWORD PTR [esi]
	inc	edx
	add	ebx, 8
	faddp	ST(2), ST(0)

; 980  :       dy += gl->gpolypart[m][0][k]*u[k][1];

	fld	QWORD PTR [esi+8]
	fmul	QWORD PTR [ebx-8]
	faddp	ST(1), ST(0)
	cmp	edx, edi
	jl	SHORT $LN30@lagr_cut_h
$LN23@lagr_cut_h:

; 981  :     }
; 982  :     for ( k = 0 ; k < ctrl ; k++ )

	xor	esi, esi
	mov	DWORD PTR _k$[ebp], esi
	test	edi, edi
	jle	$LN60@lagr_cut_h
	mov	edx, DWORD PTR _ugrad$[ebp]
	fxch	ST(1)
	mov	DWORD PTR tv4188[ebp], edx
	fmul	ST(0), ST(2)
	mov	edx, DWORD PTR _uhess$[ebp]
	fxch	ST(1)
	sub	edx, DWORD PTR _ugrad$[ebp]
	fmul	ST(0), ST(2)
	mov	DWORD PTR tv4223[ebp], edx
$LN6@lagr_cut_h:

; 983  :     { ugrad[k][1] -= wt*x*gl->gpolypart[m][0][k];

	mov	ebx, DWORD PTR [eax+24]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	mov	ebx, DWORD PTR [ebx]
	fld	QWORD PTR [ebx+esi*8]
	mov	edx, DWORD PTR tv4188[ebp]
	mov	edx, DWORD PTR [edx]
	fmul	ST(0), ST(2)
	fsubr	QWORD PTR [edx+8]
	fstp	QWORD PTR [edx+8]

; 984  :       ugrad[k][0] -= wt*dy*gl->gpoly[m][k];

	mov	ebx, DWORD PTR [eax+20]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fld	QWORD PTR [ebx+esi*8]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [edx]
	fstp	QWORD PTR [edx]

; 985  :       for ( kk = 0 ; kk < ctrl ; kk++ )

	xor	edx, edx
	cmp	edi, 4
	jl	$LN29@lagr_cut_h

; 983  :     { ugrad[k][1] -= wt*x*gl->gpolypart[m][0][k];

	mov	edi, DWORD PTR tv4223[ebp]
	mov	ebx, DWORD PTR tv4188[ebp]
	mov	edi, DWORD PTR [edi+ebx]
	add	edi, 8
	mov	DWORD PTR tv3601[ebp], edi

; 985  :       for ( kk = 0 ; kk < ctrl ; kk++ )

$LN28@lagr_cut_h:

; 986  :       { uhess[k][kk][1][0] -= wt*gl->gpoly[m][kk]*gl->gpolypart[m][0][k];

	mov	ebx, DWORD PTR [edi-8]
	mov	ebx, DWORD PTR [ebx+4]
	mov	DWORD PTR tv3743[ebp], ebx
	mov	ebx, DWORD PTR [eax+20]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR [eax+24]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fmul	ST(0), ST(3)
	mov	ebx, DWORD PTR [ebx]
	fmul	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR tv3743[ebp]
	fsubr	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]

; 987  :         uhess[k][kk][0][1] -= wt*gl->gpolypart[m][0][kk]*gl->gpoly[m][k];

	mov	ebx, DWORD PTR [edi-8]
	mov	ebx, DWORD PTR [ebx]
	mov	DWORD PTR tv4566[ebp], ebx
	mov	ebx, DWORD PTR [eax+24]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	mov	ebx, DWORD PTR [ebx]
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR [eax+20]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fmul	ST(0), ST(3)
	mov	edi, DWORD PTR [edi-4]
	mov	edi, DWORD PTR [edi+4]
	fmul	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR tv4566[ebp]
	fsubr	QWORD PTR [ebx+8]
	fstp	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR [eax+20]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fld	QWORD PTR [ebx+edx*8+8]
	mov	ebx, DWORD PTR [eax+24]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fmul	ST(0), ST(3)
	mov	ebx, DWORD PTR [ebx]
	fmul	QWORD PTR [ebx+esi*8]
	fsubr	QWORD PTR [edi]
	mov	edi, DWORD PTR tv3601[ebp]
	mov	edi, DWORD PTR [edi-4]
	mov	ebx, DWORD PTR [edi+4]
	mov	edi, DWORD PTR [edi]
	fstp	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [eax+24]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	mov	ebx, DWORD PTR [ebx]
	fld	QWORD PTR [ebx+edx*8+8]
	mov	ebx, DWORD PTR [eax+20]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fmul	ST(0), ST(3)
	fmul	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR _k$[ebp]
	fsubr	QWORD PTR [edi+8]
	mov	edi, DWORD PTR tv3601[ebp]
	mov	esi, DWORD PTR [edi-4]
	mov	esi, DWORD PTR [esi]
	fstp	QWORD PTR [esi+8]
	mov	esi, DWORD PTR [edi]
	mov	edi, DWORD PTR [eax+20]
	mov	edi, DWORD PTR [edi+ecx*4]
	fld	QWORD PTR [edi+edx*8+16]
	mov	edi, DWORD PTR [eax+24]
	mov	edi, DWORD PTR [edi+ecx*4]
	fmul	ST(0), ST(3)
	mov	edi, DWORD PTR [edi]
	mov	esi, DWORD PTR [esi+4]
	fmul	QWORD PTR [edi+ebx*8]
	fsubr	QWORD PTR [esi]
	mov	esi, DWORD PTR tv3601[ebp]
	mov	esi, DWORD PTR [esi]
	mov	edi, DWORD PTR [esi+4]
	mov	esi, DWORD PTR [esi]
	fstp	QWORD PTR [edi]
	mov	edi, DWORD PTR [eax+24]
	mov	edi, DWORD PTR [edi+ecx*4]
	mov	edi, DWORD PTR [edi]
	fld	QWORD PTR [edi+edx*8+16]
	mov	edi, DWORD PTR [eax+20]
	mov	edi, DWORD PTR [edi+ecx*4]
	fmul	ST(0), ST(3)
	fmul	QWORD PTR [edi+ebx*8]
	mov	edi, DWORD PTR tv3601[ebp]
	add	edx, 4
	fsubr	QWORD PTR [esi+8]
	mov	esi, DWORD PTR [edi]
	mov	esi, DWORD PTR [esi]
	fstp	QWORD PTR [esi+8]
	mov	esi, DWORD PTR [edi+4]
	mov	edi, DWORD PTR [eax+20]
	mov	edi, DWORD PTR [edi+ecx*4]
	fld	QWORD PTR [edi+edx*8-8]
	mov	edi, DWORD PTR [eax+24]
	mov	edi, DWORD PTR [edi+ecx*4]
	fmul	ST(0), ST(3)
	mov	edi, DWORD PTR [edi]
	mov	esi, DWORD PTR [esi+4]
	fmul	QWORD PTR [edi+ebx*8]
	fsubr	QWORD PTR [esi]
	mov	esi, DWORD PTR tv3601[ebp]
	mov	esi, DWORD PTR [esi+4]
	mov	edi, DWORD PTR [esi+4]
	fstp	QWORD PTR [edi]
	mov	edi, DWORD PTR [esi]
	mov	esi, DWORD PTR [eax+24]
	mov	esi, DWORD PTR [esi+ecx*4]
	mov	esi, DWORD PTR [esi]
	fld	QWORD PTR [esi+edx*8-8]
	mov	esi, DWORD PTR [eax+20]
	mov	ebx, DWORD PTR [esi+ecx*4]
	fmul	ST(0), ST(3)
	mov	esi, DWORD PTR _k$[ebp]
	fmul	QWORD PTR [ebx+esi*8]
	fsubr	QWORD PTR [edi+8]
	mov	edi, DWORD PTR tv3601[ebp]
	mov	ebx, DWORD PTR [edi+4]
	mov	ebx, DWORD PTR [ebx]
	fstp	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR _ctrl$[ebp]
	add	edi, 16					; 00000010H
	add	ebx, -3					; fffffffdH
	mov	DWORD PTR tv3601[ebp], edi
	cmp	edx, ebx
	jl	$LN28@lagr_cut_h
	mov	edi, DWORD PTR _ctrl$[ebp]
$LN29@lagr_cut_h:

; 985  :       for ( kk = 0 ; kk < ctrl ; kk++ )

	cmp	edx, edi
	jge	SHORT $LN5@lagr_cut_h
	mov	edi, DWORD PTR tv4223[ebp]
	mov	ebx, DWORD PTR tv4188[ebp]
	mov	edi, DWORD PTR [edi+ebx]
	lea	edi, DWORD PTR [edi+edx*4]
	mov	DWORD PTR tv3930[ebp], edi
$LC3@lagr_cut_h:

; 986  :       { uhess[k][kk][1][0] -= wt*gl->gpoly[m][kk]*gl->gpolypart[m][0][k];

	mov	ebx, DWORD PTR [eax+20]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR [eax+24]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fmul	ST(0), ST(3)
	mov	ebx, DWORD PTR [ebx]
	mov	edi, DWORD PTR tv3930[ebp]
	fmul	QWORD PTR [ebx+esi*8]
	mov	edi, DWORD PTR [edi]
	mov	ebx, DWORD PTR [edi+4]

; 987  :         uhess[k][kk][0][1] -= wt*gl->gpolypart[m][0][kk]*gl->gpoly[m][k];

	mov	edi, DWORD PTR [edi]
	fsubr	QWORD PTR [ebx]
	add	DWORD PTR tv3930[ebp], 4
	inc	edx
	fstp	QWORD PTR [ebx]
	mov	ebx, DWORD PTR [eax+24]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	mov	ebx, DWORD PTR [ebx]
	fld	QWORD PTR [ebx+edx*8-8]
	mov	ebx, DWORD PTR [eax+20]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fmul	ST(0), ST(3)
	fmul	QWORD PTR [ebx+esi*8]
	fsubr	QWORD PTR [edi+8]
	fstp	QWORD PTR [edi+8]
	mov	edi, DWORD PTR _ctrl$[ebp]
	cmp	edx, edi
	jl	SHORT $LC3@lagr_cut_h
$LN5@lagr_cut_h:

; 981  :     }
; 982  :     for ( k = 0 ; k < ctrl ; k++ )

	add	DWORD PTR tv4188[ebp], 4
	inc	esi
	mov	DWORD PTR _k$[ebp], esi
	cmp	esi, edi
	jl	$LN6@lagr_cut_h
$LN60@lagr_cut_h:

; 985  :       for ( kk = 0 ; kk < ctrl ; kk++ )

	fstp	ST(2)
	inc	ecx
	fstp	ST(0)
	fstp	ST(0)
	cmp	ecx, DWORD PTR [eax+4]
	jl	$LN33@lagr_cut_h

; 975  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	fstp	ST(0)
	pop	esi
	fstp	ST(0)
	pop	ebx
$LN10@lagr_cut_h:
	pop	edi

; 988  :       }
; 989  :     }
; 990  :   }
; 991  : } // end lagr_cut_hess()

	mov	esp, ebp
	pop	ebp
	ret	0
_lagr_cut_hess ENDP
_TEXT	ENDS
PUBLIC	__real@bff0000000000000
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_q_facet_torus_volume_lagr
EXTRN	_factorial:BYTE
EXTRN	_det_adjoint:PROC
;	COMDAT __real@bff0000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\torvol.c
CONST	ENDS
;	COMDAT _q_facet_torus_volume_lagr
_TEXT	SEGMENT
_matqXvS$ = -372					; size = 24
_u$ = -348						; size = 4
_z$89811 = -344						; size = 8
_order$ = -340						; size = 4
_f_info$GSCopy$ = -336					; size = 4
_vol$ = -332						; size = 8
tv610 = -328						; size = 4
_gl$ = -324						; size = 4
_i$ = -320						; size = 4
_mat$ = -320						; size = 4
tv941 = -316						; size = 4
_dx$ = -316						; size = 4
_ctrl$ = -312						; size = 4
tv991 = -308						; size = 4
_fe$ = -308						; size = 4
_m$ = -308						; size = 4
_matxJ$ = -304						; size = 288
_w$ = -16						; size = 12
tv1297 = -12						; size = 8
tv1295 = -12						; size = 8
tv1293 = -12						; size = 8
tv1291 = -12						; size = 8
_sign$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_q_facet_torus_volume_lagr PROC				; COMDAT

; 1001 : { REAL **x;

	push	ebp
	mov	ebp, esp
	sub	esp, 372				; 00000174H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1002 :   REAL vol;
; 1003 :   int i,m;
; 1004 :   int ctrl = web.skel[FACET].ctrlpts;

	mov	eax, DWORD PTR _web+232

; 1005 :   REAL **dx = web.inverse_periods;

	mov	ecx, DWORD PTR _web+1612
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _f_info$[ebp]

; 1006 :   WRAPTYPE w[FACET_EDGES];
; 1007 :   unsigned long allwrap;
; 1008 :   REAL **u = f_info->u;

	mov	ebx, DWORD PTR [edi+1220]

; 1009 :   facetedge_id fe;
; 1010 :   MAT2D(mat,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	edx, DWORD PTR _matxJ$[ebp]
	mov	DWORD PTR _ctrl$[ebp], eax
	push	edx
	lea	eax, DWORD PTR _matqXvS$[ebp]
	push	eax
	mov	DWORD PTR _f_info$GSCopy$[ebp], edi
	mov	DWORD PTR _dx$[ebp], ecx
	mov	DWORD PTR _u$[ebp], ebx
	call	_mat2d_setup

; 1011 :   int dim = web.dimension;
; 1012 :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR _web+236
	mov	esi, DWORD PTR _web+620
	mov	DWORD PTR _mat$[ebp], eax
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	add	esp, 16					; 00000010H
	or	eax, ecx
	je	SHORT $LN45@q_facet_to@4
	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN161@q_facet_to@4
$LN45@q_facet_to@4:
	fld1
$LN161@q_facet_to@4:

; 1013 :   struct gauss_lag *gl = &gauss_lagrange[dim][web.gauss2D_order];

	mov	eax, DWORD PTR _web+1596
	fstp	QWORD PTR _sign$[ebp]

; 1014 :   REAL ***uu = f_info->uu;  /* side vertex coords */
; 1015 :   int order = web.lagrange_order;
; 1016 : 
; 1017 :   x = f_info->x;
; 1018 : 
; 1019 :   /* get affine coordinates of vertices */
; 1020 :   mat_mul_tr(x,dx,u,ctrl,SDIM,SDIM);

	mov	ecx, DWORD PTR _ctrl$[ebp]
	mov	edx, DWORD PTR _dx$[ebp]
	shl	eax, 5
	add	eax, DWORD PTR _gauss_lagrange[esi*4]
	mov	DWORD PTR _gl$[ebp], eax
	mov	eax, DWORD PTR _web+632
	mov	DWORD PTR _order$[ebp], eax
	mov	eax, DWORD PTR _web+616
	push	eax
	push	eax
	push	ecx
	push	ebx
	push	edx
	lea	eax, DWORD PTR [edi+416]
	push	eax
	call	_mat_mul_tr

; 1021 : 
; 1022 :   for ( i = 0 ; i <= web.lagrange_order ; i++ )

	xor	ecx, ecx
	add	esp, 24					; 00000018H
	cmp	DWORD PTR _web+632, ecx
	jl	$LN74@q_facet_to@4

; 1013 :   struct gauss_lag *gl = &gauss_lagrange[dim][web.gauss2D_order];

	mov	edx, DWORD PTR _order$[ebp]
	mov	DWORD PTR tv941[ebp], ecx
	mov	DWORD PTR tv991[ebp], edx
	npad	7
$LL73@q_facet_to@4:

; 1023 :   { uu[0][i] = u[i];

	mov	eax, DWORD PTR [edi+1224]
	mov	edx, DWORD PTR [ebx+ecx*4]
	mov	DWORD PTR [eax+ecx*4], edx

; 1024 :     uu[1][i] = u[(i+1)*order - (i-1)*i/2];

	lea	eax, DWORD PTR [ecx-1]
	imul	eax, ecx
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR tv991[ebp]
	sar	eax, 1
	sub	edx, eax
	mov	edx, DWORD PTR [ebx+edx*4]
	mov	DWORD PTR tv610[ebp], eax
	mov	eax, DWORD PTR [edi+1228]
	mov	DWORD PTR [eax+ecx*4], edx

; 1025 :     uu[2][web.lagrange_order-i] = u[i*(order+1) - i*(i-1)/2];

	mov	eax, DWORD PTR tv941[ebp]
	sub	eax, DWORD PTR tv610[ebp]
	mov	edx, DWORD PTR _web+632
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	edi, DWORD PTR [edi+1232]
	sub	edx, ecx
	mov	DWORD PTR [edi+edx*4], eax
	mov	eax, DWORD PTR _order$[ebp]
	add	DWORD PTR tv991[ebp], eax
	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	inc	eax
	add	DWORD PTR tv941[ebp], eax
	inc	ecx
	cmp	ecx, DWORD PTR _web+632
	jle	SHORT $LL73@q_facet_to@4
$LN74@q_facet_to@4:

; 1026 :   }
; 1027 : 
; 1028 :   /* main integral over facet */
; 1029 : 
; 1030 :   /* volume, integral of z dx dy */
; 1031 :   vol = 0.0;

	fldz

; 1032 :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	mov	ecx, DWORD PTR _gl$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	fst	QWORD PTR _vol$[ebp]
	mov	DWORD PTR _m$[ebp], 0
	jle	$LN37@q_facet_to@4
$LN132@q_facet_to@4:

; 1033 :   { REAL z;
; 1034 :     mat_mult(gl->gpolypart[m],u,mat,dim,ctrl,SDIM);

	mov	edx, DWORD PTR _web+616
	fstp	ST(0)
	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	push	edx
	mov	edx, DWORD PTR _gl$[ebp]
	push	eax
	mov	eax, DWORD PTR [edx+24]
	push	esi
	push	ecx
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	ebx
	push	edx
	call	_mat_mult

; 1035 :     for ( z = 0.0, i = 0 ; i < ctrl ; i++ ) z += gl->gpoly[m][i]*u[i][dim];

	fldz
	mov	edx, DWORD PTR _ctrl$[ebp]
	fst	QWORD PTR _z$89811[ebp]
	add	esp, 24					; 00000018H
	xor	edi, edi
	cmp	edx, 4
	jl	SHORT $LC71@q_facet_to@4

; 1033 :   { REAL z;
; 1034 :     mat_mult(gl->gpolypart[m],u,mat,dim,ctrl,SDIM);

	mov	eax, DWORD PTR _gl$[ebp]
	mov	eax, DWORD PTR [eax+20]
	mov	edi, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [eax+edi*4]
	add	edx, -4					; fffffffcH
	shr	edx, 2
	add	eax, 16					; 00000010H
	inc	edx
	lea	ecx, DWORD PTR [ebx+8]
	lea	edi, DWORD PTR [edx*4]

; 1035 :     for ( z = 0.0, i = 0 ; i < ctrl ; i++ ) z += gl->gpoly[m][i]*u[i][dim];

$LN72@q_facet_to@4:
	mov	ebx, DWORD PTR [ecx-8]
	fld	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR [ecx-4]
	fmul	QWORD PTR [eax-16]
	add	eax, 32					; 00000020H
	add	ecx, 16					; 00000010H
	dec	edx
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR [ecx-16]
	fmul	QWORD PTR [eax-40]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+esi*8]
	mov	ebx, DWORD PTR [ecx-12]
	fmul	QWORD PTR [eax-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+esi*8]
	fmul	QWORD PTR [eax-24]
	faddp	ST(1), ST(0)
	jne	SHORT $LN72@q_facet_to@4
	mov	ebx, DWORD PTR _u$[ebp]
	fst	QWORD PTR _z$89811[ebp]
	mov	edx, DWORD PTR _ctrl$[ebp]
$LC71@q_facet_to@4:
	cmp	edi, edx
	jge	SHORT $LN126@q_facet_to@4
	mov	ecx, DWORD PTR _gl$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	lea	eax, DWORD PTR [eax+edi*8]
$LC36@q_facet_to@4:
	mov	ecx, DWORD PTR [ebx+edi*4]
	fld	QWORD PTR [ecx+esi*8]
	inc	edi
	fmul	QWORD PTR [eax]
	add	eax, 8
	faddp	ST(1), ST(0)
	cmp	edi, edx
	jl	SHORT $LC36@q_facet_to@4
	fstp	QWORD PTR _z$89811[ebp]
	jmp	SHORT $LN70@q_facet_to@4
$LN126@q_facet_to@4:
	fstp	ST(0)
$LN70@q_facet_to@4:

; 1036 :     vol += gl->gausswt[m]*det_adjoint(mat,dim)*z;

	mov	edx, DWORD PTR _mat$[ebp]
	push	esi
	push	edx
	call	_det_adjoint
	mov	ecx, DWORD PTR _gl$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	fmul	QWORD PTR [edx+eax*8]
	inc	eax
	add	esp, 8
	mov	DWORD PTR _m$[ebp], eax
	fmul	QWORD PTR _z$89811[ebp]
	fadd	QWORD PTR _vol$[ebp]
	fst	QWORD PTR _vol$[ebp]
	cmp	eax, DWORD PTR [ecx+4]
	jl	$LN132@q_facet_to@4

; 1032 :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
$LN37@q_facet_to@4:

; 1037 :   }
; 1038 :   vol *= sign/factorial[dim];

	fld	QWORD PTR _sign$[ebp]

; 1039 : 
; 1040 : 
; 1041 :   /* add corrections due to wraps */
; 1042 :   fe = get_facet_fe(f_info->id);

	mov	ecx, DWORD PTR [edi]
	fdiv	QWORD PTR _factorial[esi*8]
	fmulp	ST(1), ST(0)
	fst	QWORD PTR _vol$[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN49@q_facet_to@4
	xor	eax, eax
	jmp	SHORT $LN48@q_facet_to@4
$LN49@q_facet_to@4:
	mov	edx, DWORD PTR _web+236
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN48@q_facet_to@4
	xor	eax, 134217728				; 08000000H
$LN48@q_facet_to@4:

; 1043 :   for ( i = 0 ; i < FACET_EDGES ; i++, fe = get_next_edge(fe) ) 

	mov	ecx, DWORD PTR _web+460
	mov	DWORD PTR _fe$[ebp], eax
	mov	DWORD PTR _i$[ebp], 0
$LN76@q_facet_to@4:

; 1044 :     w[i] = get_fe_wrap(fe);

	mov	ebx, DWORD PTR _web+216
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	ecx, DWORD PTR [esi+ecx]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _web+124
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ebx+ecx+784]
	mov	ecx, DWORD PTR [edx+ecx]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN60@q_facet_to@4
	push	ecx
	fstp	ST(0)
	call	DWORD PTR _sym_inverse
	fld	QWORD PTR _vol$[ebp]
	add	esp, 4
	jmp	SHORT $LN162@q_facet_to@4
$LN60@q_facet_to@4:
	mov	eax, ecx
$LN162@q_facet_to@4:
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _web+460
	mov	DWORD PTR _w$[ebp+edx*4], eax
	mov	eax, DWORD PTR [esi+ecx]
	inc	edx
	test	DWORD PTR _fe$[ebp], 134217728		; 08000000H
	mov	DWORD PTR _i$[ebp], edx
	je	SHORT $LN53@q_facet_to@4

; 1043 :   for ( i = 0 ; i < FACET_EDGES ; i++, fe = get_next_edge(fe) ) 

	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN163@q_facet_to@4
$LN53@q_facet_to@4:
	mov	eax, DWORD PTR [eax+32]
$LN163@q_facet_to@4:
	mov	DWORD PTR _fe$[ebp], eax
	cmp	edx, 3
	jl	$LN76@q_facet_to@4

; 1045 : 
; 1046 :   allwrap = WR(w[0],2)+(WR(w[1],2)<<TWRAPBITS)+(WR(w[2],2)<<(2*TWRAPBITS));

	mov	eax, DWORD PTR _w$[ebp+8]
	mov	ecx, DWORD PTR _w$[ebp+4]
	mov	edx, DWORD PTR _w$[ebp]
	sar	eax, 12					; 0000000cH
	and	eax, 31					; 0000001fH
	shl	eax, 6
	sar	ecx, 12					; 0000000cH
	and	ecx, 31					; 0000001fH
	add	eax, ecx
	sar	edx, 12					; 0000000cH
	shl	eax, 6
	and	edx, 31					; 0000001fH
	add	eax, edx

; 1047 :   switch ( allwrap )

	cmp	eax, 4127				; 0000101fH
	ja	$LN47@q_facet_to@4
	je	$LN98@q_facet_to@4
	test	eax, eax
	je	$LN4@q_facet_to@4
	cmp	eax, 95					; 0000005fH
	je	SHORT $LN104@q_facet_to@4
	cmp	eax, 1985				; 000007c1H
	jne	$LN115@q_facet_to@4

; 1048 :      { case 0: break;
; 1049 :        case (POSWRAP)+(NEGWRAP << TWRAPBITS): break;

	jmp	$LN4@q_facet_to@4
$LN104@q_facet_to@4:

; 1067 :        case  (NEGWRAP) + (POSWRAP << TWRAPBITS):
; 1068 :             vol -= lagr_cut_int(uu[0]);

	mov	esi, DWORD PTR [edi+1224]
	fstp	ST(0)
	push	esi
	call	_lagr_cut_int
	fsubr	QWORD PTR _vol$[ebp]

; 1069 :             vol -= lagr_cut_int(uu[1]);

	mov	eax, DWORD PTR [edi+1228]
	push	eax
	fstp	QWORD PTR tv1291[ebp]
	call	_lagr_cut_int

; 1070 :             switch ( WR(f_info->wraps[ctrl-1],0) )

	mov	ecx, DWORD PTR _ctrl$[ebp]
	fsubr	QWORD PTR tv1291[ebp]
	mov	eax, DWORD PTR [edi+ecx*4+812]
	and	eax, 31					; 0000001fH
	add	esp, 8
	dec	eax
	je	SHORT $LN12@q_facet_to@4
	sub	eax, 30					; 0000001eH
	jne	SHORT $LN13@q_facet_to@4

; 1072 :               case NEGWRAP: vol += uu[2][0][1]; break;

	mov	edx, DWORD PTR [edi+1232]
	mov	eax, DWORD PTR [edx]
	fadd	QWORD PTR [eax+8]

; 1073 :             }
; 1074 :             switch ( WR(f_info->wraps[0],0) )

	mov	edi, DWORD PTR [edi+816]

; 1075 :             { case POSWRAP: vol += uu[0][0][1]; break;
; 1076 :               case NEGWRAP: vol -= uu[0][0][1]; break;
; 1077 :             }
; 1078 :             break;

	jmp	$LN166@q_facet_to@4
$LN12@q_facet_to@4:

; 1071 :             { case POSWRAP: vol -= uu[2][0][1]; break;

	mov	ecx, DWORD PTR [edi+1232]
	mov	edx, DWORD PTR [ecx]
	fsub	QWORD PTR [edx+8]
$LN13@q_facet_to@4:

; 1073 :             }
; 1074 :             switch ( WR(f_info->wraps[0],0) )

	mov	edi, DWORD PTR [edi+816]

; 1075 :             { case POSWRAP: vol += uu[0][0][1]; break;
; 1076 :               case NEGWRAP: vol -= uu[0][0][1]; break;
; 1077 :             }
; 1078 :             break;

	jmp	$LN166@q_facet_to@4
$LN98@q_facet_to@4:

; 1050 :        case (POSWRAP << TWRAPBITS) + (NEGWRAP << (2*TWRAPBITS)): break; 
; 1051 :        case (NEGWRAP) + (POSWRAP << (2*TWRAPBITS)):
; 1052 :             vol -= lagr_cut_int(uu[0]);

	mov	edx, DWORD PTR [edi+1224]
	fstp	ST(0)
	push	edx
	call	_lagr_cut_int
	fsubr	QWORD PTR _vol$[ebp]

; 1053 :             vol -= lagr_cut_int(uu[1]);

	mov	eax, DWORD PTR [edi+1228]
	push	eax
	fstp	QWORD PTR tv1293[ebp]
	call	_lagr_cut_int
	fsubr	QWORD PTR tv1293[ebp]

; 1054 :             vol -= lagr_cut_int(uu[2]);

	mov	ecx, DWORD PTR [edi+1232]
	push	ecx
	fstp	QWORD PTR tv1295[ebp]
	call	_lagr_cut_int
	fsubr	QWORD PTR tv1295[ebp]
	add	esp, 12					; 0000000cH

; 1055 :             break;

	jmp	$LN4@q_facet_to@4
$LN47@q_facet_to@4:

; 1047 :   switch ( allwrap )

	sub	eax, 6080				; 000017c0H
	je	$LN110@q_facet_to@4
	sub	eax, 120897				; 0001d841H
	je	SHORT $LN113@q_facet_to@4
	sub	eax, 63					; 0000003fH
	je	$LN4@q_facet_to@4
$LN115@q_facet_to@4:

; 1085 :             }
; 1086 :             break;
; 1087 :          default: kb_error(1334,"Internal error: Bad allwrap in facet_volume.\n",RECOVERABLE);

	push	1
	fstp	ST(0)
	push	OFFSET ??_C@_0CO@CFIBBAKF@Internal?5error?3?5Bad?5allwrap?5in?5f@
	push	1334					; 00000536H
	call	_kb_error
	fld	QWORD PTR _vol$[ebp]
	add	esp, 12					; 0000000cH
	jmp	$LN4@q_facet_to@4
$LN113@q_facet_to@4:

; 1056 :        case (POSWRAP ) + (NEGWRAP << (2*TWRAPBITS)):
; 1057 :             vol += lagr_cut_int(uu[1]);

	mov	esi, DWORD PTR [edi+1228]
	fstp	ST(0)
	push	esi
	call	_lagr_cut_int
	fadd	QWORD PTR _vol$[ebp]

; 1058 :             switch ( WR(f_info->wraps[web.lagrange_order],0) )

	mov	edx, DWORD PTR _web+632
	mov	eax, DWORD PTR [edi+edx*4+816]
	and	eax, 31					; 0000001fH
	add	esp, 4
	dec	eax
	je	SHORT $LN21@q_facet_to@4
	sub	eax, 30					; 0000001eH
	jne	SHORT $LN22@q_facet_to@4

; 1060 :               case NEGWRAP: vol += uu[1][0][1];break;

	mov	eax, DWORD PTR [esi]
	fadd	QWORD PTR [eax+8]
	jmp	SHORT $LN22@q_facet_to@4
$LN21@q_facet_to@4:

; 1059 :             { case POSWRAP: vol -= uu[1][0][1];break;

	mov	ecx, DWORD PTR [esi]
	fsub	QWORD PTR [ecx+8]
$LN22@q_facet_to@4:

; 1061 :             }
; 1062 :             switch ( WR(f_info->wraps[ctrl-1],0) )

	mov	edx, DWORD PTR _ctrl$[ebp]
	mov	eax, DWORD PTR [edi+edx*4+812]
	and	eax, 31					; 0000001fH
	dec	eax
	je	SHORT $LN17@q_facet_to@4
	sub	eax, 30					; 0000001eH
	jne	SHORT $LN4@q_facet_to@4

; 1064 :               case NEGWRAP: vol -= uu[2][0][1]; break;

	mov	eax, DWORD PTR [edi+1232]
	mov	ecx, DWORD PTR [eax]
	fsub	QWORD PTR [ecx+8]
	jmp	SHORT $LN4@q_facet_to@4
$LN17@q_facet_to@4:

; 1063 :             { case POSWRAP: vol += uu[2][0][1]; break;

	mov	edx, DWORD PTR [edi+1232]
	mov	eax, DWORD PTR [edx]
	fadd	QWORD PTR [eax+8]

; 1065 :             }
; 1066 :             break;

	jmp	SHORT $LN4@q_facet_to@4
$LN110@q_facet_to@4:

; 1079 :        case (NEGWRAP << TWRAPBITS) + (POSWRAP << (2*TWRAPBITS)):
; 1080 :             vol -= lagr_cut_int(uu[1]);

	mov	esi, DWORD PTR [edi+1228]
	fstp	ST(0)
	push	esi
	call	_lagr_cut_int
	fsubr	QWORD PTR _vol$[ebp]

; 1081 :             vol -= lagr_cut_int(uu[2]);

	mov	ecx, DWORD PTR [edi+1232]
	push	ecx
	fstp	QWORD PTR tv1297[ebp]
	call	_lagr_cut_int

; 1082 :             switch ( WR(f_info->wraps[web.lagrange_order],0) )

	mov	edx, DWORD PTR _web+632
	fsubr	QWORD PTR tv1297[ebp]
	mov	edi, DWORD PTR [edi+edx*4+816]
	add	esp, 8
$LN166@q_facet_to@4:
	and	edi, 31					; 0000001fH
	dec	edi
	je	SHORT $LN3@q_facet_to@4
	sub	edi, 30					; 0000001eH
	jne	SHORT $LN4@q_facet_to@4

; 1084 :               case NEGWRAP: vol -= uu[1][0][1]; break;

	mov	eax, DWORD PTR [esi]
	fsub	QWORD PTR [eax+8]
	jmp	SHORT $LN4@q_facet_to@4
$LN3@q_facet_to@4:

; 1083 :             { case POSWRAP: vol += uu[1][0][1]; break;

	mov	ecx, DWORD PTR [esi]
	fadd	QWORD PTR [ecx+8]
$LN4@q_facet_to@4:

; 1088 : 
; 1089 :      }
; 1090 :   vol *= web.torusv;
; 1091 :  
; 1092 :   return vol;
; 1093 : } // end q_facet_torus_volume_lagr()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fmul	QWORD PTR _web+1600
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_q_facet_torus_volume_lagr ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_q_facet_torus_volume_lagr_grad
; Function compile flags: /Ogtp
;	COMDAT _q_facet_torus_volume_lagr_grad
_TEXT	SEGMENT
_matqXvS$ = -396					; size = 24
_sign$ = -372						; size = 8
_dim$ = -364						; size = 4
_dx$ = -360						; size = 4
_z$ = -356						; size = 8
tv1505 = -352						; size = 4
tv1302 = -352						; size = 4
_order$ = -348						; size = 4
_f_info$GSCopy$ = -344					; size = 4
_u$ = -340						; size = 4
_fe$ = -336						; size = 4
_mat$ = -336						; size = 4
_ugrad$ = -332						; size = 4
_ctrl$ = -328						; size = 4
tv1905 = -324						; size = 4
tv422 = -324						; size = 4
_j$ = -324						; size = 4
tv1979 = -320						; size = 4
_i$ = -320						; size = 4
_vol$ = -316						; size = 8
tv2011 = -312						; size = 4
_gl$ = -308						; size = 4
_matxJ$ = -304						; size = 288
_w$ = -16						; size = 12
tv3060 = -12						; size = 8
tv3058 = -12						; size = 8
tv3056 = -12						; size = 8
tv3054 = -12						; size = 8
_weight$89901 = -12					; size = 8
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_q_facet_torus_volume_lagr_grad PROC			; COMDAT

; 1103 : { REAL **x;

	push	ebp
	mov	ebp, esp
	sub	esp, 396				; 0000018cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1104 :   REAL vol;
; 1105 :   int i,j,k;
; 1106 :   REAL **dx = web.inverse_periods;

	mov	eax, DWORD PTR _web+1612
	mov	DWORD PTR _dx$[ebp], eax
	push	ebx
	mov	ebx, DWORD PTR _f_info$[ebp]

; 1107 :   WRAPTYPE w[FACET_EDGES];
; 1108 :   unsigned long allwrap;
; 1109 :   facetedge_id fe;
; 1110 :   REAL **ugrad = f_info->ugrad;

	mov	ecx, DWORD PTR [ebx+1236]

; 1111 :   REAL ***uu = f_info->uu;  /* side vertex coords */
; 1112 :   REAL ***uugrad = f_info->uugrad;  /* side vertex coords */
; 1113 :   REAL **u = f_info->u;
; 1114 :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	eax, DWORD PTR [ebx]
	mov	edx, DWORD PTR [ebx+1220]
	and	eax, 134217727				; 07ffffffH
	mov	DWORD PTR _ugrad$[ebp], ecx
	mov	ecx, DWORD PTR _web+236
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	or	eax, ecx
	push	esi
	mov	DWORD PTR _f_info$GSCopy$[ebp], ebx
	mov	DWORD PTR _u$[ebp], edx
	je	SHORT $LN69@q_facet_to@5
	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN232@q_facet_to@5
$LN69@q_facet_to@5:
	fld1
$LN232@q_facet_to@5:

; 1115 :   int order = web.lagrange_order;
; 1116 :   int m;
; 1117 :   int dim = web.dimension;
; 1118 :   struct gauss_lag *gl = &gauss_lagrange[dim][web.gauss2D_order];

	mov	eax, DWORD PTR _web+1596
	fstp	QWORD PTR _sign$[ebp]
	mov	esi, DWORD PTR _web+620
	mov	edx, DWORD PTR _web+632
	shl	eax, 5
	add	eax, DWORD PTR _gauss_lagrange[esi*4]
	push	edi

; 1119 :   MAT2D(mat,MAXCOORD,MAXCOORD);

	push	6
	mov	DWORD PTR _gl$[ebp], eax
	push	6
	lea	eax, DWORD PTR _matxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _matqXvS$[ebp]
	push	ecx
	mov	DWORD PTR _order$[ebp], edx
	mov	DWORD PTR _dim$[ebp], esi
	call	_mat2d_setup

; 1120 :   REAL z;
; 1121 :   int ctrl = web.skel[FACET].ctrlpts;
; 1122 : 
; 1123 :   x = f_info->x;
; 1124 : 
; 1125 :   for ( i = 0 ; i < ctrl ; i++ )

	fldz
	mov	edi, DWORD PTR _web+232
	mov	edx, DWORD PTR _web+616
	add	esp, 16					; 00000010H
	mov	DWORD PTR _mat$[ebp], eax
	mov	DWORD PTR _ctrl$[ebp], edi
	mov	DWORD PTR _i$[ebp], 0
	test	edi, edi
	jle	SHORT $LN132@q_facet_to@5
$LN66@q_facet_to@5:

; 1126 :     for ( j = 0 ; j < SDIM; j++ )

	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN65@q_facet_to@5

; 1120 :   REAL z;
; 1121 :   int ctrl = web.skel[FACET].ctrlpts;
; 1122 : 
; 1123 :   x = f_info->x;
; 1124 : 
; 1125 :   for ( i = 0 ; i < ctrl ; i++ )

	mov	edx, DWORD PTR _ugrad$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
$LN63@q_facet_to@5:

; 1127 :       ugrad[i][j] = 0.0;

	fst	QWORD PTR [eax]
	mov	edx, DWORD PTR _web+616
	inc	ecx
	add	eax, 8
	cmp	ecx, edx
	jl	SHORT $LN63@q_facet_to@5
$LN65@q_facet_to@5:

; 1120 :   REAL z;
; 1121 :   int ctrl = web.skel[FACET].ctrlpts;
; 1122 : 
; 1123 :   x = f_info->x;
; 1124 : 
; 1125 :   for ( i = 0 ; i < ctrl ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, edi
	jl	SHORT $LN66@q_facet_to@5
$LN132@q_facet_to@5:

; 1128 : 
; 1129 :   /* get affine coordinates of vertices */
; 1130 :   mat_mul_tr(x,dx,u,ctrl,SDIM,SDIM);

	mov	ecx, DWORD PTR _u$[ebp]
	fstp	ST(0)
	push	edx
	push	edx
	mov	edx, DWORD PTR _dx$[ebp]
	push	edi
	push	ecx
	push	edx
	lea	eax, DWORD PTR [ebx+416]
	push	eax
	call	_mat_mul_tr

; 1131 :   for ( i = 0 ; i <= web.lagrange_order ; i++ )

	xor	ecx, ecx
	add	esp, 24					; 00000018H
	cmp	DWORD PTR _web+632, ecx
	jl	$LN58@q_facet_to@5
	mov	edx, DWORD PTR _u$[ebp]
	sub	edx, DWORD PTR _ugrad$[ebp]
	mov	eax, DWORD PTR _order$[ebp]
	mov	edi, DWORD PTR _ugrad$[ebp]
	mov	DWORD PTR tv1905[ebp], ecx
	mov	DWORD PTR tv1979[ebp], eax
	mov	DWORD PTR tv2011[ebp], edx
	jmp	SHORT $LN60@q_facet_to@5
$LL124@q_facet_to@5:
	mov	edx, DWORD PTR tv2011[ebp]
$LN60@q_facet_to@5:
	lea	eax, DWORD PTR [edi+ecx*4]

; 1132 :   { uu[0][i] = u[i];

	mov	edx, DWORD PTR [edx+eax]
	mov	edi, DWORD PTR [ebx+1224]
	mov	DWORD PTR [edi+ecx*4], edx

; 1133 :     uugrad[0][i] = ugrad[i];

	mov	eax, DWORD PTR [eax]
	mov	edx, DWORD PTR [ebx+1240]
	mov	DWORD PTR [edx+ecx*4], eax

; 1134 : 
; 1135 :     uu[1][i] = u[(i+1)*order - (i-1)*i/2];

	mov	edi, DWORD PTR _u$[ebp]
	lea	eax, DWORD PTR [ecx-1]
	imul	eax, ecx
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR tv1979[ebp]
	sar	eax, 1
	sub	edx, eax
	add	edx, edx
	mov	DWORD PTR tv1302[ebp], eax
	mov	eax, DWORD PTR [ebx+1228]
	add	edx, edx
	mov	edi, DWORD PTR [edx+edi]
	mov	DWORD PTR [eax+ecx*4], edi

; 1136 :     uugrad[1][i] = ugrad[(i+1)*order - (i-1)*i/2];

	mov	eax, DWORD PTR [ebx+1244]
	mov	edi, DWORD PTR _ugrad$[ebp]
	mov	edx, DWORD PTR [edx+edi]
	mov	DWORD PTR [eax+ecx*4], edx

; 1137 : 
; 1138 :     uu[2][web.lagrange_order-i] = u[i*(order+1) - i*(i-1)/2];

	mov	edx, DWORD PTR tv1905[ebp]
	sub	edx, DWORD PTR tv1302[ebp]
	mov	edi, DWORD PTR [ebx+1232]
	mov	eax, DWORD PTR _web+632
	mov	ebx, DWORD PTR _u$[ebp]
	add	edx, edx
	sub	eax, ecx
	add	edx, edx
	mov	ebx, DWORD PTR [edx+ebx]
	mov	DWORD PTR [edi+eax*4], ebx

; 1139 :     uugrad[2][web.lagrange_order-i] = ugrad[i*(order+1) - i*(i-1)/2];

	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ebx, DWORD PTR [edi+1248]
	mov	eax, DWORD PTR _web+632
	mov	edi, DWORD PTR _ugrad$[ebp]
	mov	edx, DWORD PTR [edx+edi]
	sub	eax, ecx
	mov	DWORD PTR [ebx+eax*4], edx
	mov	eax, DWORD PTR _order$[ebp]
	add	DWORD PTR tv1979[ebp], eax
	mov	ebx, DWORD PTR _f_info$GSCopy$[ebp]
	inc	eax
	add	DWORD PTR tv1905[ebp], eax
	inc	ecx
	cmp	ecx, DWORD PTR _web+632
	jle	$LL124@q_facet_to@5
$LN58@q_facet_to@5:

; 1140 :   }
; 1141 : 
; 1142 :   /* main integral over facet */
; 1143 :   /* volume, integral of z dx dy */
; 1144 :   vol = 0.0;

	fldz

; 1145 :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	mov	eax, DWORD PTR _gl$[ebp]
	xor	edi, edi
	fst	QWORD PTR _vol$[ebp]
	cmp	DWORD PTR [eax+4], edi
	jle	$LN55@q_facet_to@5
$LN215@q_facet_to@5:

; 1146 :   { REAL weight = sign* gl->gausswt[m]/factorial[dim];

	mov	eax, DWORD PTR _gl$[ebp]

; 1156 :     for ( k = 0 ; k < gl->lagpts ; k++ )

	fstp	ST(0)
	mov	ecx, DWORD PTR [eax+12]
	fld	QWORD PTR [ecx+edi*8]
	mov	edx, DWORD PTR _web+616
	fmul	QWORD PTR _sign$[ebp]
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	edx
	mov	edx, DWORD PTR _mat$[ebp]
	fdiv	QWORD PTR _factorial[esi*8]
	push	ecx
	mov	ecx, DWORD PTR _u$[ebp]
	push	esi
	push	edx
	mov	edx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR [edx+edi*4]
	push	ecx
	push	eax
	fstp	QWORD PTR _weight$89901[ebp]
	call	_mat_mult
	fldz
	add	esp, 24					; 00000018H
	fst	QWORD PTR _z$[ebp]
	xor	eax, eax
	cmp	DWORD PTR _ctrl$[ebp], 4
	jl	SHORT $LN125@q_facet_to@5

; 1146 :   { REAL weight = sign* gl->gausswt[m]/factorial[dim];

	mov	edx, DWORD PTR _gl$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [eax+edi*4]
	add	edx, -4					; fffffffcH
	shr	edx, 2
	inc	edx
	mov	DWORD PTR tv422[ebp], edx
	add	edx, edx
	add	ecx, 8
	add	eax, 16					; 00000010H
	add	edx, edx
	mov	DWORD PTR _i$[ebp], edx

; 1147 :     REAL det;
; 1148 :     mat_mult(gl->gpolypart[m],u,mat,dim,ctrl,SDIM);
; 1149 :     for ( z = 0.0, i = 0 ; i < ctrl ; i++ ) z += gl->gpoly[m][i]*u[i][dim];

$LN112@q_facet_to@5:
	mov	edx, DWORD PTR [ecx-8]
	fld	QWORD PTR [edx+esi*8]
	mov	edx, DWORD PTR [ecx-4]
	fmul	QWORD PTR [eax-16]
	add	eax, 32					; 00000020H
	add	ecx, 16					; 00000010H
	dec	DWORD PTR tv422[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx+esi*8]
	mov	edx, DWORD PTR [ecx-16]
	fmul	QWORD PTR [eax-40]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx+esi*8]
	mov	edx, DWORD PTR [ecx-12]
	fmul	QWORD PTR [eax-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx+esi*8]
	fmul	QWORD PTR [eax-24]
	faddp	ST(1), ST(0)
	jne	SHORT $LN112@q_facet_to@5
	mov	eax, DWORD PTR _i$[ebp]
	fst	QWORD PTR _z$[ebp]
$LN125@q_facet_to@5:
	cmp	eax, DWORD PTR _ctrl$[ebp]
	jge	SHORT $LN190@q_facet_to@5
	mov	ecx, DWORD PTR _gl$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR [edx+edi*4]
	lea	ecx, DWORD PTR [ecx+eax*8]
$LC54@q_facet_to@5:
	mov	edx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [edx+esi*8]
	inc	eax
	fmul	QWORD PTR [ecx]
	add	ecx, 8
	faddp	ST(1), ST(0)
	cmp	eax, DWORD PTR _ctrl$[ebp]
	jl	SHORT $LC54@q_facet_to@5
	fstp	QWORD PTR _z$[ebp]
	jmp	SHORT $LN110@q_facet_to@5
$LN190@q_facet_to@5:
	fstp	ST(0)
$LN110@q_facet_to@5:

; 1150 :     det = det_adjoint(mat,dim);

	mov	eax, DWORD PTR _mat$[ebp]
	push	esi
	push	eax
	call	_det_adjoint

; 1151 :     vol += weight*det*z;

	fld	ST(0)
	fld	QWORD PTR _weight$89901[ebp]

; 1152 :     for ( k = 0 ; k < gl->lagpts; k++ )

	mov	ecx, DWORD PTR _gl$[ebp]
	fmul	ST(1), ST(0)
	xor	edx, edx
	fld	QWORD PTR _z$[ebp]
	add	esp, 8
	fmul	ST(2), ST(0)
	fxch	ST(2)
	fadd	QWORD PTR _vol$[ebp]
	fst	QWORD PTR _vol$[ebp]
	cmp	DWORD PTR [ecx+16], edx
	jle	$LN211@q_facet_to@5
$LN51@q_facet_to@5:

; 1153 :       for ( j = 0 ; j < dim ; j++ )

	xor	ecx, ecx
	mov	DWORD PTR _j$[ebp], ecx
	test	esi, esi
	jle	$LN50@q_facet_to@5
$LN48@q_facet_to@5:

; 1154 :         for ( i = 0 ; i < dim ; i++ )

	xor	eax, eax
	cmp	esi, 4
	jl	$LC114@q_facet_to@5
	mov	esi, DWORD PTR _ugrad$[ebp]
	fld	ST(2)
	mov	esi, DWORD PTR [esi+edx*4]
	fmul	ST(0), ST(2)
	mov	ebx, DWORD PTR _mat$[ebp]
	lea	esi, DWORD PTR [esi+ecx*8]
	mov	ecx, DWORD PTR [ebx+ecx*4]
	add	ecx, 16					; 00000010H
$LN122@q_facet_to@5:

; 1155 :           ugrad[k][j] += weight*z*gl->gpolypart[m][i][k]*mat[j][i];

	mov	ebx, DWORD PTR _gl$[ebp]
	mov	ebx, DWORD PTR [ebx+24]
	mov	ebx, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR [ebx+eax*4]
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR _gl$[ebp]
	fmul	ST(0), ST(1)
	add	eax, 4
	add	ecx, 32					; 00000020H
	fmul	QWORD PTR [ecx-48]
	fadd	QWORD PTR [esi]
	fst	QWORD PTR [esi]
	mov	ebx, DWORD PTR [ebx+24]
	mov	ebx, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR [ebx+eax*4-12]
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR _gl$[ebp]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ecx-40]
	faddp	ST(1), ST(0)
	fst	QWORD PTR [esi]
	mov	ebx, DWORD PTR [ebx+24]
	mov	ebx, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR [ebx+eax*4-8]
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR _gl$[ebp]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ecx-32]
	faddp	ST(1), ST(0)
	fst	QWORD PTR [esi]
	mov	ebx, DWORD PTR [ebx+24]
	mov	ebx, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR [ebx+eax*4-4]
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR _dim$[ebp]
	fmul	ST(0), ST(2)
	add	ebx, -3					; fffffffdH
	fmul	QWORD PTR [ecx-24]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [esi]
	cmp	eax, ebx
	jl	$LN122@q_facet_to@5
	mov	ebx, DWORD PTR _f_info$GSCopy$[ebp]
	fstp	ST(0)
	mov	ecx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _dim$[ebp]
$LC114@q_facet_to@5:

; 1154 :         for ( i = 0 ; i < dim ; i++ )

	cmp	eax, esi
	jge	SHORT $LN47@q_facet_to@5
	mov	ebx, DWORD PTR _ugrad$[ebp]
	fld	ST(2)
	mov	ebx, DWORD PTR [ebx+edx*4]
	fmul	ST(0), ST(2)
	lea	ebx, DWORD PTR [ebx+ecx*8]
	mov	DWORD PTR tv1505[ebp], ebx
	mov	ebx, DWORD PTR _mat$[ebp]
	mov	ecx, DWORD PTR [ebx+ecx*4]
	lea	ecx, DWORD PTR [ecx+eax*8]
$LN123@q_facet_to@5:

; 1155 :           ugrad[k][j] += weight*z*gl->gpolypart[m][i][k]*mat[j][i];

	mov	ebx, DWORD PTR _gl$[ebp]
	mov	ebx, DWORD PTR [ebx+24]
	mov	ebx, DWORD PTR [ebx+edi*4]
	mov	ebx, DWORD PTR [ebx+eax*4]
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR tv1505[ebp]
	fmul	ST(0), ST(1)
	inc	eax
	add	ecx, 8
	fmul	QWORD PTR [ecx-8]
	fadd	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]
	cmp	eax, esi
	jl	SHORT $LN123@q_facet_to@5

; 1154 :         for ( i = 0 ; i < dim ; i++ )

	mov	ebx, DWORD PTR _f_info$GSCopy$[ebp]
	fstp	ST(0)
	mov	ecx, DWORD PTR _j$[ebp]
$LN47@q_facet_to@5:

; 1153 :       for ( j = 0 ; j < dim ; j++ )

	inc	ecx
	mov	DWORD PTR _j$[ebp], ecx
	cmp	ecx, esi
	jl	$LN48@q_facet_to@5
$LN50@q_facet_to@5:

; 1152 :     for ( k = 0 ; k < gl->lagpts; k++ )

	mov	eax, DWORD PTR _gl$[ebp]
	inc	edx
	cmp	edx, DWORD PTR [eax+16]
	jl	$LN51@q_facet_to@5
$LN211@q_facet_to@5:

; 1156 :     for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	edx, DWORD PTR _gl$[ebp]
	fstp	ST(2)
	xor	eax, eax
	cmp	DWORD PTR [edx+16], eax
	jle	SHORT $LN214@q_facet_to@5
$LN130@q_facet_to@5:

; 1157 :         ugrad[k][dim] += weight*gl->gpoly[m][k]*det;

	mov	edx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [edx+edi*4]
	fld	QWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _ugrad$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	fmul	ST(0), ST(1)
	mov	edx, DWORD PTR _gl$[ebp]
	lea	ecx, DWORD PTR [ecx+esi*8]
	fmul	ST(0), ST(3)
	inc	eax
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx+16]
	jl	SHORT $LN130@q_facet_to@5
$LN214@q_facet_to@5:

; 1145 :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	inc	edi

; 1156 :     for ( k = 0 ; k < gl->lagpts ; k++ )

	fstp	ST(0)
	fstp	ST(1)
	cmp	edi, DWORD PTR [edx+4]
	jl	$LN215@q_facet_to@5
$LN55@q_facet_to@5:

; 1158 :   }
; 1159 : 
; 1160 :   /* add corrections due to wraps */
; 1161 :   fe = get_facet_fe(f_info->id);

	mov	ecx, DWORD PTR [ebx]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN73@q_facet_to@5
	xor	eax, eax
	jmp	SHORT $LN72@q_facet_to@5
$LN73@q_facet_to@5:
	mov	edx, DWORD PTR _web+236
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN72@q_facet_to@5
	xor	eax, 134217728				; 08000000H
$LN72@q_facet_to@5:

; 1162 :   for ( i = 0 ; i < FACET_EDGES ; i++, fe = get_next_edge(fe) ) 

	mov	ecx, DWORD PTR _web+460
	mov	DWORD PTR _fe$[ebp], eax
	mov	DWORD PTR _i$[ebp], 0
$LN76@q_facet_to@5:

; 1163 :      w[i] = get_fe_wrap(fe);

	mov	edi, DWORD PTR _web+216
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	ecx, DWORD PTR [esi+ecx]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _web+124
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [edi+ecx+784]
	mov	ecx, DWORD PTR [edx+ecx]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN84@q_facet_to@5
	push	ecx
	fstp	ST(0)
	call	DWORD PTR _sym_inverse
	fld	QWORD PTR _vol$[ebp]
	add	esp, 4
	jmp	SHORT $LN233@q_facet_to@5
$LN84@q_facet_to@5:
	mov	eax, ecx
$LN233@q_facet_to@5:
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _web+460
	mov	DWORD PTR _w$[ebp+edx*4], eax
	mov	eax, DWORD PTR [esi+ecx]
	inc	edx
	test	DWORD PTR _fe$[ebp], 134217728		; 08000000H
	mov	DWORD PTR _i$[ebp], edx
	je	SHORT $LN77@q_facet_to@5

; 1162 :   for ( i = 0 ; i < FACET_EDGES ; i++, fe = get_next_edge(fe) ) 

	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN234@q_facet_to@5
$LN77@q_facet_to@5:
	mov	eax, DWORD PTR [eax+32]
$LN234@q_facet_to@5:
	mov	DWORD PTR _fe$[ebp], eax
	cmp	edx, 3
	jl	$LN76@q_facet_to@5

; 1164 : 
; 1165 :   allwrap = WR(w[0],2)+(WR(w[1],2)<<TWRAPBITS)+(WR(w[2],2)<<(2*TWRAPBITS));

	mov	eax, DWORD PTR _w$[ebp+8]
	mov	ecx, DWORD PTR _w$[ebp+4]
	mov	edx, DWORD PTR _w$[ebp]
	sar	eax, 12					; 0000000cH
	and	eax, 31					; 0000001fH
	shl	eax, 6
	sar	ecx, 12					; 0000000cH
	and	ecx, 31					; 0000001fH
	add	eax, ecx
	sar	edx, 12					; 0000000cH
	shl	eax, 6
	and	edx, 31					; 0000001fH
	add	eax, edx
	pop	edi

; 1166 :   switch ( allwrap )

	cmp	eax, 4127				; 0000101fH
	ja	$LN71@q_facet_to@5
	je	$LN162@q_facet_to@5
	test	eax, eax
	je	$LN127@q_facet_to@5
	cmp	eax, 95					; 0000005fH
	je	SHORT $LN168@q_facet_to@5
	cmp	eax, 1985				; 000007c1H
	jne	$LN179@q_facet_to@5

; 1167 :      { case 0: break;
; 1168 :        case (POSWRAP)+(NEGWRAP << TWRAPBITS): break;

	jmp	$LN127@q_facet_to@5
$LN168@q_facet_to@5:

; 1189 :         case  (NEGWRAP) + (POSWRAP << TWRAPBITS):
; 1190 :             vol -= lagr_cut_int(uu[0]) + lagr_cut_int(uu[1]);

	mov	esi, DWORD PTR [ebx+1224]
	fstp	ST(0)
	push	esi
	call	_lagr_cut_int
	fstp	QWORD PTR tv3054[ebp]
	mov	eax, DWORD PTR [ebx+1228]
	push	eax
	call	_lagr_cut_int
	fadd	QWORD PTR tv3054[ebp]

; 1191 :             lagr_cut_grad(uu[0],uugrad[0],-1);

	mov	ecx, DWORD PTR [ebx+1240]
	push	-1
	fsubr	QWORD PTR _vol$[ebp]
	push	ecx
	push	esi
	fstp	QWORD PTR _vol$[ebp]
	call	_lagr_cut_grad

; 1192 :             lagr_cut_grad(uu[1],uugrad[1],-1);

	mov	edx, DWORD PTR [ebx+1244]
	mov	eax, DWORD PTR [ebx+1228]
	push	-1
	push	edx
	push	eax
	call	_lagr_cut_grad

; 1193 :             switch ( WR(f_info->wraps[ctrl-1],0) )

	mov	ecx, DWORD PTR _ctrl$[ebp]
	mov	eax, DWORD PTR [ebx+ecx*4+812]
	and	eax, 31					; 0000001fH
	add	esp, 32					; 00000020H
	dec	eax
	je	SHORT $LN18@q_facet_to@5
	sub	eax, 30					; 0000001eH
	jne	SHORT $LN119@q_facet_to@5

; 1195 :               case NEGWRAP: vol += uu[2][0][1]; uugrad[2][0][1] += 1.0; break;

	mov	edx, DWORD PTR [ebx+1232]
	mov	eax, DWORD PTR [edx]
	fld	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR [ebx+1248]
	fadd	QWORD PTR _vol$[ebp]
	mov	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+8]
	fld1
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax+8]
	jmp	SHORT $LN19@q_facet_to@5
$LN18@q_facet_to@5:

; 1194 :             { case POSWRAP: vol -= uu[2][0][1]; uugrad[2][0][1] -= 1.0; break;

	mov	edx, DWORD PTR [ebx+1232]
	fld	QWORD PTR _vol$[ebp]
	mov	eax, DWORD PTR [edx]
	fsub	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR [ebx+1248]
	mov	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+8]
	fld1
	fsub	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax+8]
	jmp	SHORT $LN19@q_facet_to@5
$LN119@q_facet_to@5:
	fld	QWORD PTR _vol$[ebp]
	fld1
$LN19@q_facet_to@5:

; 1196 :             }
; 1197 :             switch ( WR(f_info->wraps[0],0) )

	mov	eax, DWORD PTR [ebx+816]
	and	eax, 31					; 0000001fH
	dec	eax
	je	SHORT $LN14@q_facet_to@5
	sub	eax, 30					; 0000001eH
	jne	$LN229@q_facet_to@5

; 1199 :               case NEGWRAP: vol -= uu[0][0][1]; uugrad[0][0][1] -= 1.0;break;

	mov	edx, DWORD PTR [ebx+1224]
	fxch	ST(1)
	mov	eax, DWORD PTR [edx]
	fsub	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR [ebx+1240]
	mov	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+8]
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax+8]
	jmp	$LN127@q_facet_to@5
$LN14@q_facet_to@5:

; 1198 :             { case POSWRAP: vol += uu[0][0][1]; uugrad[0][0][1] += 1.0;break;

	mov	edx, DWORD PTR [ebx+1224]
	mov	eax, DWORD PTR [edx]
	fld	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR [ebx+1240]
	mov	eax, DWORD PTR [ecx]
	faddp	ST(2), ST(0)
	fadd	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]

; 1200 :             }
; 1201 :             break;

	jmp	$LN127@q_facet_to@5
$LN162@q_facet_to@5:

; 1169 :        case (POSWRAP << TWRAPBITS) + (NEGWRAP << (2*TWRAPBITS)): break; 
; 1170 :        case (NEGWRAP) + (POSWRAP << (2*TWRAPBITS)):
; 1171 :             vol -= lagr_cut_int(uu[0])+lagr_cut_int(uu[1])+lagr_cut_int(uu[2]);

	mov	esi, DWORD PTR [ebx+1224]
	fstp	ST(0)
	push	esi
	call	_lagr_cut_int
	fstp	QWORD PTR tv3056[ebp]
	mov	edx, DWORD PTR [ebx+1228]
	push	edx
	call	_lagr_cut_int
	fadd	QWORD PTR tv3056[ebp]
	mov	eax, DWORD PTR [ebx+1232]
	push	eax
	fstp	QWORD PTR tv3058[ebp]
	call	_lagr_cut_int
	fadd	QWORD PTR tv3058[ebp]

; 1172 :             lagr_cut_grad(uu[0],uugrad[0],-1); 

	mov	ecx, DWORD PTR [ebx+1240]
	push	-1
	push	ecx
	fsubr	QWORD PTR _vol$[ebp]
	push	esi
	fstp	QWORD PTR _vol$[ebp]
	call	_lagr_cut_grad

; 1173 :             lagr_cut_grad(uu[1],uugrad[1],-1); 

	mov	edx, DWORD PTR [ebx+1244]
	mov	eax, DWORD PTR [ebx+1228]
	push	-1
	push	edx
	push	eax
	call	_lagr_cut_grad

; 1174 :             lagr_cut_grad(uu[2],uugrad[2],-1);

	mov	ecx, DWORD PTR [ebx+1248]
	mov	edx, DWORD PTR [ebx+1232]
	push	-1
	push	ecx
	push	edx
	call	_lagr_cut_grad

; 1175 :             break;

	fld	QWORD PTR _vol$[ebp]
	add	esp, 48					; 00000030H
	jmp	$LN127@q_facet_to@5
$LN71@q_facet_to@5:

; 1166 :   switch ( allwrap )

	sub	eax, 6080				; 000017c0H
	je	$LN174@q_facet_to@5
	sub	eax, 120897				; 0001d841H
	je	SHORT $LN177@q_facet_to@5
	sub	eax, 63					; 0000003fH
	je	$LN127@q_facet_to@5
$LN179@q_facet_to@5:

; 1209 :             }
; 1210 :             break;
; 1211 :          default: kb_error(1202,"Internal error: Bad allwrap in facet_volume.\n",RECOVERABLE);

	push	1
	fstp	ST(0)
	push	OFFSET ??_C@_0CO@CFIBBAKF@Internal?5error?3?5Bad?5allwrap?5in?5f@
	push	1202					; 000004b2H
	call	_kb_error
	fld	QWORD PTR _vol$[ebp]
	add	esp, 12					; 0000000cH
	jmp	$LN127@q_facet_to@5
$LN177@q_facet_to@5:

; 1176 : 
; 1177 :        case (POSWRAP ) + (NEGWRAP << (2*TWRAPBITS)):
; 1178 :             vol += lagr_cut_int(uu[1]);

	mov	esi, DWORD PTR [ebx+1228]
	fstp	ST(0)
	push	esi
	call	_lagr_cut_int
	fadd	QWORD PTR _vol$[ebp]

; 1179 :             lagr_cut_grad(uu[1],uugrad[1],1);

	mov	eax, DWORD PTR [ebx+1244]
	push	1
	push	eax
	fstp	QWORD PTR _vol$[ebp]
	push	esi
	call	_lagr_cut_grad

; 1180 :             switch ( WR(f_info->wraps[order],0) )

	mov	ecx, DWORD PTR _order$[ebp]
	mov	eax, DWORD PTR [ebx+ecx*4+816]
	and	eax, 31					; 0000001fH
	add	esp, 16					; 00000010H
	dec	eax
	je	SHORT $LN27@q_facet_to@5
	sub	eax, 30					; 0000001eH
	jne	SHORT $LN120@q_facet_to@5

; 1182 :               case NEGWRAP: vol += uu[1][0][1]; uugrad[1][0][1] += 1.0; break;

	mov	edx, DWORD PTR [ebx+1228]
	mov	eax, DWORD PTR [edx]
	fld	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR [ebx+1244]
	fadd	QWORD PTR _vol$[ebp]
	mov	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+8]
	fld1
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax+8]
	jmp	SHORT $LN28@q_facet_to@5
$LN27@q_facet_to@5:

; 1181 :             { case POSWRAP: vol -= uu[1][0][1]; uugrad[1][0][1] -= 1.0; break;

	mov	edx, DWORD PTR [ebx+1228]
	fld	QWORD PTR _vol$[ebp]
	mov	eax, DWORD PTR [edx]
	fsub	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR [ebx+1244]
	mov	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+8]
	fld1
	fsub	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax+8]
	jmp	SHORT $LN28@q_facet_to@5
$LN120@q_facet_to@5:
	fld	QWORD PTR _vol$[ebp]
	fld1
$LN28@q_facet_to@5:

; 1183 :             }
; 1184 :             switch ( WR(f_info->wraps[ctrl-1],0) )

	mov	edx, DWORD PTR _ctrl$[ebp]
	mov	eax, DWORD PTR [ebx+edx*4+812]
	and	eax, 31					; 0000001fH
	dec	eax
	je	SHORT $LN23@q_facet_to@5
	sub	eax, 30					; 0000001eH
	jne	$LN229@q_facet_to@5

; 1186 :               case NEGWRAP: vol -= uu[2][0][1]; uugrad[2][0][1] -= 1.0; break;

	mov	eax, DWORD PTR [ebx+1232]
	fxch	ST(1)
	mov	ecx, DWORD PTR [eax]
	fsub	QWORD PTR [ecx+8]
	mov	edx, DWORD PTR [ebx+1248]
	mov	eax, DWORD PTR [edx]
	fld	QWORD PTR [eax+8]
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax+8]
	jmp	$LN127@q_facet_to@5
$LN23@q_facet_to@5:

; 1185 :             { case POSWRAP: vol += uu[2][0][1]; uugrad[2][0][1] += 1.0; break;

	mov	eax, DWORD PTR [ebx+1232]
	mov	ecx, DWORD PTR [eax]
	fld	QWORD PTR [ecx+8]
	mov	edx, DWORD PTR [ebx+1248]
	mov	eax, DWORD PTR [edx]
	faddp	ST(2), ST(0)
	fadd	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]

; 1187 :             }
; 1188 :             break;

	jmp	$LN127@q_facet_to@5
$LN174@q_facet_to@5:

; 1202 :         case (NEGWRAP << TWRAPBITS) + (POSWRAP << (2*TWRAPBITS)):
; 1203 :             vol -= lagr_cut_int(uu[1]) + lagr_cut_int(uu[2]);

	mov	esi, DWORD PTR [ebx+1228]
	fstp	ST(0)
	push	esi
	call	_lagr_cut_int
	fstp	QWORD PTR tv3060[ebp]
	mov	eax, DWORD PTR [ebx+1232]
	push	eax
	call	_lagr_cut_int
	fadd	QWORD PTR tv3060[ebp]

; 1204 :             lagr_cut_grad(uu[1],uugrad[1],-1);

	mov	ecx, DWORD PTR [ebx+1244]
	push	-1
	fsubr	QWORD PTR _vol$[ebp]
	push	ecx
	push	esi
	fstp	QWORD PTR _vol$[ebp]
	call	_lagr_cut_grad

; 1205 :             lagr_cut_grad(uu[2],uugrad[2],-1);

	mov	edx, DWORD PTR [ebx+1248]
	mov	eax, DWORD PTR [ebx+1232]
	push	-1
	push	edx
	push	eax
	call	_lagr_cut_grad

; 1206 :             switch ( WR(f_info->wraps[order],0) )

	mov	ecx, DWORD PTR _order$[ebp]
	mov	eax, DWORD PTR [ebx+ecx*4+816]
	and	eax, 31					; 0000001fH
	add	esp, 32					; 00000020H
	dec	eax
	je	SHORT $LN9@q_facet_to@5
	sub	eax, 30					; 0000001eH

; 1208 :               case NEGWRAP: vol -= uu[1][0][1]; uugrad[1][0][1] -= 1.0; break;

	fld	QWORD PTR _vol$[ebp]
	jne	SHORT $LN127@q_facet_to@5
	mov	edx, DWORD PTR [ebx+1228]
	mov	eax, DWORD PTR [edx]
	fsub	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR [ebx+1244]
	mov	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+8]
	fsub	QWORD PTR __real@3ff0000000000000
	fstp	QWORD PTR [eax+8]
	jmp	SHORT $LN127@q_facet_to@5
$LN9@q_facet_to@5:

; 1207 :             { case POSWRAP: vol += uu[1][0][1]; uugrad[1][0][1] += 1.0; break;

	mov	edx, DWORD PTR [ebx+1228]
	mov	eax, DWORD PTR [edx]
	fld	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR [ebx+1244]
	fadd	QWORD PTR _vol$[ebp]
	mov	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+8]
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	QWORD PTR [eax+8]
	jmp	SHORT $LN127@q_facet_to@5
$LN229@q_facet_to@5:

; 1183 :             }
; 1184 :             switch ( WR(f_info->wraps[ctrl-1],0) )

	fstp	ST(0)
$LN127@q_facet_to@5:

; 1212 : 
; 1213 :      }
; 1214 :   vol *= web.torusv;

	fmul	QWORD PTR _web+1600

; 1215 :   for ( i = 0 ; i < ctrl ; i++ )

	mov	edx, DWORD PTR _web+616
	xor	esi, esi
	fstp	QWORD PTR _vol$[ebp]
	cmp	DWORD PTR _ctrl$[ebp], esi
	jle	SHORT $LN4@q_facet_to@5
$LL6@q_facet_to@5:

; 1216 :      for ( j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN5@q_facet_to@5

; 1215 :   for ( i = 0 ; i < ctrl ; i++ )

	mov	edx, DWORD PTR _ugrad$[ebp]
	mov	eax, DWORD PTR [edx+esi*4]
	npad	1
$LL117@q_facet_to@5:

; 1217 :        ugrad[i][j] *= web.torusv;

	fld	QWORD PTR [eax]
	inc	ecx
	fmul	QWORD PTR _web+1600
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	mov	edx, DWORD PTR _web+616
	cmp	ecx, edx
	jl	SHORT $LL117@q_facet_to@5
$LN5@q_facet_to@5:

; 1215 :   for ( i = 0 ; i < ctrl ; i++ )

	inc	esi
	cmp	esi, DWORD PTR _ctrl$[ebp]
	jl	SHORT $LL6@q_facet_to@5
$LN4@q_facet_to@5:

; 1218 :   mat_mult(ugrad,dx,f_info->grad,ctrl,SDIM,SDIM);

	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR [ebx+1336]
	push	edx
	push	edx
	mov	edx, DWORD PTR _dx$[ebp]
	push	eax
	mov	eax, DWORD PTR _ugrad$[ebp]
	push	ecx
	push	edx
	push	eax
	call	_mat_mult

; 1219 :  
; 1220 :   return vol;

	fld	QWORD PTR _vol$[ebp]

; 1221 : } // end q_facet_torus_volume_lagr_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 24					; 00000018H
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_q_facet_torus_volume_lagr_grad ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_q_facet_torus_volume_lagr_hess
EXTRN	_det_hess:PROC
; Function compile flags: /Ogtp
;	COMDAT _q_facet_torus_volume_lagr_hess
_TEXT	SEGMENT
_dethessqXvS$ = -12152					; size = 1032
_temphqXvS$ = -11120					; size = 24
_matqXvS$ = -11096					; size = 24
tv2914 = -11072						; size = 4
_dim$ = -11068						; size = 4
_temph$ = -11064					; size = 4
tv4425 = -11060						; size = 4
tv3268 = -11060						; size = 4
_dethess$ = -11056					; size = 4
_dx$ = -11052						; size = 4
_order$ = -11048					; size = 4
tv8640 = -11044						; size = 4
tv3433 = -11044						; size = 4
tv3301 = -11044						; size = 4
tv3016 = -11044						; size = 4
_weight$90040 = -11040					; size = 8
tv6803 = -11036						; size = 4
tv4441 = -11036						; size = 4
tv3410 = -11036						; size = 4
tv3284 = -11036						; size = 4
tv3247 = -11036						; size = 4
tv3238 = -11036						; size = 4
tv3213 = -11036						; size = 4
_u$ = -11032						; size = 4
_mat$ = -11028						; size = 4
_gl$ = -11024						; size = 4
_ugrad$ = -11020					; size = 4
_uhess$ = -11016					; size = 4
tv4400 = -11012						; size = 4
tv2823 = -11012						; size = 4
tv2125 = -11012						; size = 4
tv1024 = -11012						; size = 4
_x$ = -11012						; size = 4
_vol$ = -11008						; size = 8
tv4405 = -11004						; size = 4
tv7260 = -11000						; size = 4
tv6787 = -11000						; size = 4
tv4138 = -11000						; size = 4
tv3347 = -11000						; size = 4
_j$ = -10996						; size = 4
_ctrl$ = -10992						; size = 4
_f_info$GSCopy$ = -10988				; size = 4
tv6813 = -10984						; size = 4
tv4074 = -10984						; size = 4
tv3324 = -10984						; size = 4
_k$ = -10984						; size = 4
tv7205 = -10980						; size = 4
tv6730 = -10980						; size = 4
tv5652 = -10980						; size = 4
tv4158 = -10980						; size = 4
tv3241 = -10980						; size = 4
tv2958 = -10980						; size = 4
tv747 = -10980						; size = 4
tv4216 = -10976						; size = 4
_m$ = -10976						; size = 4
tv7203 = -10972						; size = 4
tv6728 = -10972						; size = 4
tv6002 = -10972						; size = 4
tv5232 = -10972						; size = 4
tv4378 = -10972						; size = 4
tv3312 = -10972						; size = 4
tv4325 = -10968						; size = 4
tv3168 = -10968						; size = 4
tv1909 = -10968						; size = 4
_ii$ = -10968						; size = 4
_jj$ = -10964						; size = 4
_i$ = -10964						; size = 4
_dethessxJ$ = -10960					; size = 10368
_temphxJ$ = -592					; size = 288
_matxJ$ = -304						; size = 288
_w$ = -16						; size = 12
tv8348 = -12						; size = 8
tv8346 = -12						; size = 8
tv8344 = -12						; size = 8
tv8342 = -12						; size = 8
_sign$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_q_facet_torus_volume_lagr_hess PROC			; COMDAT

; 1232 : { REAL **x;

	push	ebp
	mov	ebp, esp
	mov	eax, 12152				; 00002f78H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1233 :   REAL vol;
; 1234 :   int i,j,k,kk,m;
; 1235 :   REAL **dx = web.inverse_periods;

	mov	eax, DWORD PTR _web+1612
	push	ebx
	push	esi
	mov	esi, DWORD PTR _f_info$[ebp]
	push	edi

; 1236 :   WRAPTYPE w[FACET_EDGES];
; 1237 :   unsigned long allwrap;
; 1238 :   facetedge_id fe;
; 1239 :   int ii,jj;
; 1240 :   MAT2D(temph,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	ecx, DWORD PTR _temphxJ$[ebp]
	push	ecx
	lea	edx, DWORD PTR _temphqXvS$[ebp]
	push	edx
	mov	DWORD PTR _f_info$GSCopy$[ebp], esi
	mov	DWORD PTR _dx$[ebp], eax
	call	_mat2d_setup

; 1241 :   int ctrl = web.skel[FACET].ctrlpts;
; 1242 :   REAL **ugrad = f_info->ugrad;
; 1243 :   REAL ***uu = f_info->uu;  /* side vertex coords */
; 1244 :   REAL ***uugrad = f_info->uugrad;  /* side vertex grads */
; 1245 :   REAL *****uuhess = f_info->uuhess;  /* side vertex hessians */
; 1246 :   REAL ****uhess = f_info->uhess;  /* vertex hessians */

	mov	edx, DWORD PTR [esi+1252]
	mov	ecx, DWORD PTR [esi+1236]
	mov	DWORD PTR _temph$[ebp], eax
	mov	eax, DWORD PTR _web+232
	mov	DWORD PTR _ctrl$[ebp], eax

; 1247 :   int order = web.lagrange_order;

	mov	eax, DWORD PTR _web+632

; 1248 :   REAL **u = f_info->u;
; 1249 :   MAT2D(mat,MAXCOORD,MAXCOORD);

	push	6
	mov	DWORD PTR _uhess$[ebp], edx
	push	6
	lea	edx, DWORD PTR _matxJ$[ebp]
	mov	DWORD PTR _order$[ebp], eax
	mov	DWORD PTR _ugrad$[ebp], ecx
	mov	ecx, DWORD PTR [esi+1220]
	push	edx
	lea	eax, DWORD PTR _matqXvS$[ebp]
	push	eax
	mov	DWORD PTR _u$[ebp], ecx
	call	_mat2d_setup

; 1250 :   int dim = web.dimension;
; 1251 :   struct gauss_lag *gl = &gauss_lagrange[dim][web.gauss2D_order];

	mov	ebx, DWORD PTR _web+1596
	mov	edi, DWORD PTR _web+620

; 1252 :   MAT4D(dethess,MAXCOORD,MAXCOORD,MAXCOORD,MAXCOORD);

	push	6
	push	6
	push	6
	push	6
	lea	ecx, DWORD PTR _dethessxJ$[ebp]
	shl	ebx, 5
	add	ebx, DWORD PTR _gauss_lagrange[edi*4]
	push	ecx
	lea	edx, DWORD PTR _dethessqXvS$[ebp]
	push	edx
	mov	DWORD PTR _mat$[ebp], eax
	mov	DWORD PTR _dim$[ebp], edi
	mov	DWORD PTR _gl$[ebp], ebx
	call	_mat4d_setup

; 1253 :   REAL sign = (get_fattr(f_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	ecx, DWORD PTR _web+236
	mov	DWORD PTR _dethess$[ebp], eax
	mov	eax, DWORD PTR [esi]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	ecx, ecx
	add	esp, 56					; 00000038H
	or	eax, ecx
	je	SHORT $LN129@q_facet_to@6
	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN436@q_facet_to@6
$LN129@q_facet_to@6:
	fld1
$LN436@q_facet_to@6:

; 1254 : 
; 1255 :   x = f_info->x;

	add	esi, 416				; 000001a0H
	fstp	QWORD PTR _sign$[ebp]

; 1256 : 
; 1257 :   for ( i = 0 ; i < ctrl ; i++ )

	fldz
	mov	DWORD PTR _x$[ebp], esi
	xor	esi, esi
	cmp	DWORD PTR _ctrl$[ebp], ecx
	mov	ecx, DWORD PTR _web+616
	jle	SHORT $LN124@q_facet_to@6
$LN126@q_facet_to@6:

; 1258 :    for ( j = 0 ; j < SDIM ; j++ ) 

	xor	edx, edx
	test	ecx, ecx
	jle	SHORT $LN125@q_facet_to@6

; 1256 : 
; 1257 :   for ( i = 0 ; i < ctrl ; i++ )

	mov	eax, DWORD PTR _ugrad$[ebp]
	mov	eax, DWORD PTR [eax+esi*4]
$LN123@q_facet_to@6:

; 1259 :      ugrad[i][j] = 0.0;

	fst	QWORD PTR [eax]
	mov	ecx, DWORD PTR _web+616
	inc	edx
	add	eax, 8
	cmp	edx, ecx
	jl	SHORT $LN123@q_facet_to@6
$LN125@q_facet_to@6:

; 1256 : 
; 1257 :   for ( i = 0 ; i < ctrl ; i++ )

	inc	esi
	cmp	esi, DWORD PTR _ctrl$[ebp]
	jl	SHORT $LN126@q_facet_to@6
$LN124@q_facet_to@6:

; 1260 : 
; 1261 :   for ( i = 0 ; i < ctrl ; i++ )

	cmp	DWORD PTR _ctrl$[ebp], 0
	mov	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN275@q_facet_to@6
$LN120@q_facet_to@6:

; 1262 :      for ( ii = 0 ; ii < ctrl ; ii++ )

	mov	DWORD PTR _ii$[ebp], 0
$LN117@q_facet_to@6:

; 1263 :          for ( j = 0 ; j < SDIM ; j++ ) 

	xor	esi, esi
	test	ecx, ecx
	jle	SHORT $LN116@q_facet_to@6
$LN114@q_facet_to@6:

; 1264 :             for ( jj = 0 ; jj < SDIM ; jj++ ) 

	xor	edx, edx
	test	ecx, ecx
	jle	SHORT $LN113@q_facet_to@6
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _uhess$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _ii$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [ecx+esi*4]
$LN111@q_facet_to@6:

; 1265 :               uhess[i][ii][j][jj] = 0.0;

	fst	QWORD PTR [eax]
	mov	ecx, DWORD PTR _web+616
	inc	edx
	add	eax, 8
	cmp	edx, ecx
	jl	SHORT $LN111@q_facet_to@6
$LN113@q_facet_to@6:

; 1263 :          for ( j = 0 ; j < SDIM ; j++ ) 

	inc	esi
	cmp	esi, ecx
	jl	SHORT $LN114@q_facet_to@6
$LN116@q_facet_to@6:

; 1262 :      for ( ii = 0 ; ii < ctrl ; ii++ )

	mov	eax, DWORD PTR _ii$[ebp]
	inc	eax
	mov	DWORD PTR _ii$[ebp], eax
	cmp	eax, DWORD PTR _ctrl$[ebp]
	jl	SHORT $LN117@q_facet_to@6

; 1260 : 
; 1261 :   for ( i = 0 ; i < ctrl ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _ctrl$[ebp]
	jl	SHORT $LN120@q_facet_to@6
$LN275@q_facet_to@6:

; 1266 : 
; 1267 :   /* get affine coordinates of vertices */
; 1268 :   mat_mul_tr(x,dx,u,ctrl,SDIM,SDIM);

	mov	edx, DWORD PTR _ctrl$[ebp]
	fstp	ST(0)
	mov	eax, DWORD PTR _u$[ebp]
	push	ecx
	push	ecx
	mov	ecx, DWORD PTR _dx$[ebp]
	push	edx
	mov	edx, DWORD PTR _x$[ebp]
	push	eax
	push	ecx
	push	edx
	call	_mat_mul_tr

; 1269 : 
; 1270 :   /* set up edge pointers */
; 1271 :   for ( i = 0 ; i <= web.lagrange_order ; i++ )

	xor	ecx, ecx
	add	esp, 24					; 00000018H
	mov	DWORD PTR _i$[ebp], ecx
	cmp	DWORD PTR _web+632, ecx
	jl	$LN106@q_facet_to@6
	mov	eax, DWORD PTR _order$[ebp]
	mov	esi, DWORD PTR _ugrad$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	mov	DWORD PTR tv4325[ebp], eax
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv4378[ebp], eax
	mov	eax, DWORD PTR _uhess$[ebp]
	sub	edx, esi
	sub	eax, esi
	mov	DWORD PTR tv4216[ebp], ecx
	mov	DWORD PTR tv4400[ebp], edx
	mov	DWORD PTR tv4405[ebp], eax
	jmp	SHORT $LN108@q_facet_to@6
	npad	8
$LL235@q_facet_to@6:
	mov	edx, DWORD PTR tv4400[ebp]
$LN108@q_facet_to@6:
	mov	eax, DWORD PTR _ugrad$[ebp]

; 1272 :   { uu[0][i] = u[i];

	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	esi, DWORD PTR [esi+1224]
	lea	eax, DWORD PTR [eax+ecx*4]
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [esi+ecx*4], edx

; 1273 :     uugrad[0][i] = ugrad[i];

	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [esi+1240]
	mov	DWORD PTR tv2914[ebp], eax
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 1274 : 
; 1275 :     uu[1][i] = u[(i+1)*order - (i-1)*i/2];

	lea	eax, DWORD PTR [ecx-1]
	imul	eax, ecx
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR tv4325[ebp]
	sar	eax, 1
	sub	edx, eax
	mov	DWORD PTR tv2958[ebp], eax
	mov	eax, DWORD PTR [esi+1228]
	mov	esi, DWORD PTR _u$[ebp]
	add	edx, edx
	add	edx, edx
	mov	esi, DWORD PTR [edx+esi]
	mov	DWORD PTR [eax+ecx*4], esi

; 1276 :     uugrad[1][i] = ugrad[(i+1)*order - (i-1)*i/2];

	mov	esi, DWORD PTR _ugrad$[ebp]
	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [eax+1244]
	mov	DWORD PTR tv4425[ebp], edx
	mov	edx, DWORD PTR [edx+esi]

; 1277 : 
; 1278 :     uu[2][web.lagrange_order-i] = u[i*(order+1) - i*(i-1)/2];

	mov	esi, DWORD PTR _u$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR tv4216[ebp]
	sub	eax, DWORD PTR tv2958[ebp]
	mov	edx, DWORD PTR _web+632
	sub	edx, ecx
	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [ecx+1232]
	add	eax, eax
	add	eax, eax
	mov	esi, DWORD PTR [eax+esi]
	mov	DWORD PTR [ecx+edx*4], esi

; 1279 :     uugrad[2][web.lagrange_order-i] = ugrad[i*(order+1) - i*(i-1)/2];

	mov	edx, DWORD PTR _web+632
	sub	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	esi, DWORD PTR _ugrad$[ebp]
	mov	ecx, DWORD PTR [ecx+1248]
	mov	DWORD PTR tv4441[ebp], eax
	mov	eax, DWORD PTR [eax+esi]
	mov	DWORD PTR [ecx+edx*4], eax

; 1280 : 
; 1281 :     for ( j = 0 ; j <= web.lagrange_order ; j++ )

	mov	eax, DWORD PTR _web+632
	xor	ecx, ecx
	mov	DWORD PTR _j$[ebp], ecx
	cmp	eax, ecx
	jl	$LN107@q_facet_to@6

; 1272 :   { uu[0][i] = u[i];

	mov	eax, DWORD PTR _order$[ebp]
	mov	DWORD PTR tv4138[ebp], eax
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv4074[ebp], ecx
	mov	DWORD PTR tv4158[ebp], eax
$LL105@q_facet_to@6:

; 1282 :     { uuhess[0][i][j] = uhess[i][j];

	mov	eax, DWORD PTR tv4405[ebp]
	mov	edx, DWORD PTR tv2914[ebp]
	mov	edx, DWORD PTR [edx+eax]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [eax+1256]
	mov	esi, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [eax+ecx*4], edx

; 1283 :       uuhess[1][i][j] = uhess[(i+1)*order-(i-1)*i/2][(j+1)*order-(j-1)*j/2];

	lea	eax, DWORD PTR [ecx-1]
	imul	eax, ecx
	mov	ecx, DWORD PTR tv4138[ebp]
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR tv4425[ebp]
	sar	eax, 1
	sub	ecx, eax
	mov	DWORD PTR tv3016[ebp], eax
	mov	eax, DWORD PTR _uhess$[ebp]
	mov	edx, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [eax+1260]
	mov	eax, DWORD PTR [eax+esi*4]
	mov	edx, DWORD PTR _j$[ebp]

; 1284 :       uuhess[2][order-i][order-j] = 
; 1285 :           uhess[i*(order+1) - i*(i-1)/2][j*(order+1) - j*(j-1)/2];

	mov	esi, DWORD PTR tv4378[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
	mov	edx, DWORD PTR _uhess$[ebp]
	mov	eax, DWORD PTR tv4074[ebp]
	sub	eax, DWORD PTR tv3016[ebp]
	mov	ecx, DWORD PTR tv4441[ebp]
	mov	ecx, DWORD PTR [ecx+edx]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [edx+1264]
	mov	edx, DWORD PTR [edx+esi]
	mov	eax, DWORD PTR tv4158[ebp]
	mov	DWORD PTR [eax+edx], ecx
	mov	edx, DWORD PTR _order$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	add	DWORD PTR tv4138[ebp], edx
	sub	eax, 4
	inc	edx
	add	DWORD PTR tv4074[ebp], edx
	inc	ecx
	mov	DWORD PTR tv4158[ebp], eax
	mov	eax, DWORD PTR _web+632
	mov	DWORD PTR _j$[ebp], ecx
	cmp	ecx, eax
	jle	$LL105@q_facet_to@6
$LN107@q_facet_to@6:

; 1269 : 
; 1270 :   /* set up edge pointers */
; 1271 :   for ( i = 0 ; i <= web.lagrange_order ; i++ )

	mov	edx, DWORD PTR _order$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	add	DWORD PTR tv4325[ebp], edx
	sub	DWORD PTR tv4378[ebp], 4
	inc	edx
	add	DWORD PTR tv4216[ebp], edx
	inc	ecx
	mov	DWORD PTR _i$[ebp], ecx
	cmp	ecx, eax
	jle	$LL235@q_facet_to@6
$LN106@q_facet_to@6:

; 1286 :     }
; 1287 :   }
; 1288 : 
; 1289 :   /* main integral over facet, without wraps */
; 1290 :   for ( m = 0, vol = 0.0 ; m < gl->gnumpts ; m++ )

	fldz
	xor	esi, esi
	fst	QWORD PTR _vol$[ebp]
	mov	DWORD PTR _m$[ebp], esi
	cmp	DWORD PTR [ebx+4], esi
	jle	$LN100@q_facet_to@6
$LN419@q_facet_to@6:

; 1291 :   { REAL det;
; 1292 :     REAL z,sum;
; 1293 :     REAL weight = sign*gl->gausswt[m]/factorial[dim];

	mov	edx, DWORD PTR [ebx+12]

; 1331 :                 }
; 1332 :              }
; 1333 :           }
; 1334 :           for ( j = 0 ; j < dim ; j++ )

	fstp	ST(0)
	fld	QWORD PTR [edx+esi*8]
	mov	eax, DWORD PTR _web+616
	fmul	QWORD PTR _sign$[ebp]
	mov	ecx, DWORD PTR _ctrl$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	push	eax
	fdiv	QWORD PTR _factorial[edi*8]
	mov	eax, DWORD PTR _u$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [ebx+24]
	push	edi
	push	edx
	mov	edx, DWORD PTR [ecx+esi*4]
	push	eax
	push	edx
	fstp	QWORD PTR _weight$90040[ebp]
	call	_mat_mult
	mov	eax, DWORD PTR _dethess$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	push	edi
	push	eax
	push	ecx
	call	_det_hess
	mov	edx, DWORD PTR _mat$[ebp]
	push	edi
	push	edx
	call	_det_adjoint
	fldz
	add	esp, 44					; 0000002cH
	fld	ST(0)
	xor	eax, eax
	cmp	DWORD PTR _ctrl$[ebp], 4
	jl	SHORT $LN237@q_facet_to@6

; 1291 :   { REAL det;
; 1292 :     REAL z,sum;
; 1293 :     REAL weight = sign*gl->gausswt[m]/factorial[dim];

	mov	edx, DWORD PTR _ctrl$[ebp]
	mov	eax, DWORD PTR [ebx+20]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [eax+esi*4]
	add	edx, -4					; fffffffcH
	shr	edx, 2
	inc	edx
	mov	DWORD PTR tv747[ebp], edx
	add	edx, edx
	add	ecx, 8
	add	eax, 16					; 00000010H
	add	edx, edx
	mov	DWORD PTR _i$[ebp], edx

; 1294 : 
; 1295 :     mat_mult(gl->gpolypart[m],u,mat,dim,ctrl,SDIM);
; 1296 :     det_hess(mat,dethess,dim);
; 1297 :     det = det_adjoint(mat,dim);
; 1298 :     for ( z = 0.0, i = 0 ; i < ctrl ; i++ ) z += gl->gpoly[m][i]*u[i][dim];

$LN210@q_facet_to@6:
	mov	edx, DWORD PTR [ecx-8]
	fld	QWORD PTR [edx+edi*8]
	mov	edx, DWORD PTR [ecx-4]
	fmul	QWORD PTR [eax-16]
	add	eax, 32					; 00000020H
	add	ecx, 16					; 00000010H
	dec	DWORD PTR tv747[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx+edi*8]
	mov	edx, DWORD PTR [ecx-16]
	fmul	QWORD PTR [eax-40]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx+edi*8]
	mov	edx, DWORD PTR [ecx-12]
	fmul	QWORD PTR [eax-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx+edi*8]
	fmul	QWORD PTR [eax-24]
	faddp	ST(1), ST(0)
	jne	SHORT $LN210@q_facet_to@6

; 1291 :   { REAL det;
; 1292 :     REAL z,sum;
; 1293 :     REAL weight = sign*gl->gausswt[m]/factorial[dim];

	mov	eax, DWORD PTR _i$[ebp]
$LN237@q_facet_to@6:

; 1294 : 
; 1295 :     mat_mult(gl->gpolypart[m],u,mat,dim,ctrl,SDIM);
; 1296 :     det_hess(mat,dethess,dim);
; 1297 :     det = det_adjoint(mat,dim);
; 1298 :     for ( z = 0.0, i = 0 ; i < ctrl ; i++ ) z += gl->gpoly[m][i]*u[i][dim];

	cmp	eax, DWORD PTR _ctrl$[ebp]
	jge	SHORT $LN208@q_facet_to@6
	mov	ecx, DWORD PTR [ebx+20]
	mov	edx, DWORD PTR [ecx+esi*4]
	lea	ecx, DWORD PTR [edx+eax*8]
$LN252@q_facet_to@6:
	mov	edx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [edx+edi*8]
	inc	eax
	fmul	QWORD PTR [ecx]
	add	ecx, 8
	faddp	ST(1), ST(0)
	cmp	eax, DWORD PTR _ctrl$[ebp]
	jl	SHORT $LN252@q_facet_to@6
$LN208@q_facet_to@6:

; 1299 : 
; 1300 :     vol += weight*det*z;

	fld	ST(2)

; 1301 :      
; 1302 :     /* gradient */
; 1303 :     for ( k = 0 ; k < gl->lagpts; k++ )

	xor	edx, edx
	fld	QWORD PTR _weight$90040[ebp]
	mov	DWORD PTR _k$[ebp], edx
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(2)
	fadd	QWORD PTR _vol$[ebp]
	fst	QWORD PTR _vol$[ebp]
	cmp	DWORD PTR [ebx+16], edx
	jle	$LN94@q_facet_to@6
$LN96@q_facet_to@6:

; 1304 :      for ( j = 0 ; j < dim ; j++ ) 

	mov	DWORD PTR _j$[ebp], 0
	test	edi, edi
	jle	$LN95@q_facet_to@6
$LN93@q_facet_to@6:

; 1305 :        for ( i = 0 ; i < dim ; i++ )

	xor	eax, eax
	cmp	edi, 4
	jl	$LC212@q_facet_to@6
	mov	ecx, DWORD PTR _ugrad$[ebp]
	fld	ST(2)
	mov	edx, DWORD PTR [ecx+edx*4]
	fmul	ST(0), ST(2)
	mov	ecx, DWORD PTR _j$[ebp]
	lea	edx, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR tv3168[ebp], edx
	mov	edx, DWORD PTR _mat$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	add	ecx, 16					; 00000010H
$LN213@q_facet_to@6:

; 1306 :          ugrad[k][j] += weight*z*gl->gpolypart[m][i][k]*mat[j][i];

	mov	edx, DWORD PTR [ebx+24]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	esi, DWORD PTR _k$[ebp]
	fld	QWORD PTR [edx+esi*8]
	mov	edx, DWORD PTR tv3168[ebp]
	mov	esi, DWORD PTR _m$[ebp]
	fmul	ST(0), ST(1)
	add	eax, 4
	add	ecx, 32					; 00000020H
	fmul	QWORD PTR [ecx-48]
	fadd	QWORD PTR [edx]
	fst	QWORD PTR [edx]
	mov	edx, DWORD PTR [ebx+24]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx+eax*4-12]
	mov	esi, DWORD PTR _k$[ebp]
	fld	QWORD PTR [edx+esi*8]
	mov	edx, DWORD PTR tv3168[ebp]
	mov	esi, DWORD PTR _m$[ebp]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ecx-40]
	faddp	ST(1), ST(0)
	fst	QWORD PTR [edx]
	mov	edx, DWORD PTR [ebx+24]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [edx+eax*4-8]
	mov	esi, DWORD PTR _k$[ebp]
	fld	QWORD PTR [edx+esi*8]
	mov	edx, DWORD PTR tv3168[ebp]
	mov	esi, DWORD PTR _m$[ebp]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ecx-32]
	faddp	ST(1), ST(0)
	fst	QWORD PTR [edx]
	mov	edx, DWORD PTR [ebx+24]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	esi, DWORD PTR [edx+eax*4-4]
	mov	edx, DWORD PTR _k$[ebp]
	fld	QWORD PTR [esi+edx*8]
	mov	esi, DWORD PTR tv3168[ebp]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ecx-24]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [esi]
	lea	esi, DWORD PTR [edi-3]
	cmp	eax, esi
	mov	esi, DWORD PTR _m$[ebp]
	jl	$LN213@q_facet_to@6
	fstp	ST(0)
$LC212@q_facet_to@6:

; 1305 :        for ( i = 0 ; i < dim ; i++ )

	cmp	eax, edi
	jge	SHORT $LN92@q_facet_to@6
	mov	ecx, DWORD PTR _ugrad$[ebp]
	fld	ST(2)
	mov	edx, DWORD PTR [ecx+edx*4]
	fmul	ST(0), ST(2)
	mov	ecx, DWORD PTR _j$[ebp]
	lea	edx, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR tv3213[ebp], edx
	mov	edx, DWORD PTR _mat$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR tv5232[ebp], edx
	mov	edx, DWORD PTR _k$[ebp]
$LC90@q_facet_to@6:

; 1306 :          ugrad[k][j] += weight*z*gl->gpolypart[m][i][k]*mat[j][i];

	mov	ecx, DWORD PTR [ebx+24]
	mov	ecx, DWORD PTR [ecx+esi*4]
	mov	ecx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR tv5232[ebp]
	add	DWORD PTR tv5232[ebp], 8
	fmul	ST(0), ST(1)
	inc	eax
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv3213[ebp]
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, edi
	jl	SHORT $LC90@q_facet_to@6

; 1305 :        for ( i = 0 ; i < dim ; i++ )

	fstp	ST(0)
$LN92@q_facet_to@6:

; 1304 :      for ( j = 0 ; j < dim ; j++ ) 

	mov	eax, DWORD PTR _j$[ebp]
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, edi
	jl	$LN93@q_facet_to@6
$LN95@q_facet_to@6:

; 1301 :      
; 1302 :     /* gradient */
; 1303 :     for ( k = 0 ; k < gl->lagpts; k++ )

	inc	edx
	mov	DWORD PTR _k$[ebp], edx
	cmp	edx, DWORD PTR [ebx+16]
	jl	$LN96@q_facet_to@6
$LN94@q_facet_to@6:

; 1307 :     for ( k = 0 ; k < gl->lagpts ; k++ )

	xor	eax, eax
	cmp	DWORD PTR [ebx+16], eax
	jle	SHORT $LN348@q_facet_to@6
$LN250@q_facet_to@6:

; 1308 :         ugrad[k][dim] += weight*gl->gpoly[m][k]*det;

	mov	edx, DWORD PTR _ugrad$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ebx+20]
	mov	edx, DWORD PTR [edx+esi*4]
	fld	QWORD PTR [edx+eax*8]
	lea	ecx, DWORD PTR [ecx+edi*8]
	fmul	ST(0), ST(2)
	inc	eax
	fmul	ST(0), ST(5)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR [ebx+16]
	jl	SHORT $LN250@q_facet_to@6
$LN348@q_facet_to@6:

; 1309 :      
; 1310 :     /* hessian */
; 1311 :     for ( k = 0 ; k < gl->lagpts  ; k++ )

	mov	eax, DWORD PTR [ebx+16]
	fstp	ST(4)
	xor	edx, edx
	test	eax, eax
	jle	$LN418@q_facet_to@6
$LN84@q_facet_to@6:

; 1312 :        for ( kk = 0 ; kk < gl->lagpts ; kk++ )

	xor	ecx, ecx
	test	eax, eax
	jle	$LN83@q_facet_to@6
$LN81@q_facet_to@6:

; 1313 :        { 
; 1314 :           if ( dim == 2 )

	cmp	edi, 2
	jne	$LN437@q_facet_to@6

; 1315 :           {
; 1316 :              uhess[k][kk][0][1]  += weight*z*
; 1317 :                     (gl->gpolypart[m][0][k]*gl->gpolypart[m][1][kk]
; 1318 :                      - gl->gpolypart[m][1][k]*gl->gpolypart[m][0][kk]);

	mov	eax, DWORD PTR [ebx+24]
	fld	ST(1)
	mov	eax, DWORD PTR [eax+esi*4]
	fmul	ST(0), ST(1)
	mov	DWORD PTR tv3238[ebp], eax
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR tv3241[ebp], eax
	mov	eax, DWORD PTR tv3238[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv3247[ebp], eax
	mov	eax, DWORD PTR _uhess$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv3268[ebp], eax
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv8640[ebp], eax
	mov	eax, DWORD PTR tv3241[ebp]
	fld	QWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR tv3247[ebp]
	fmul	QWORD PTR [eax+edx*8]
	fld	QWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR tv3241[ebp]
	fmul	QWORD PTR [eax+edx*8]
	mov	eax, DWORD PTR tv8640[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]

; 1319 :              uhess[k][kk][1][0]  += weight*z*
; 1320 :                     (gl->gpolypart[m][1][k]*gl->gpolypart[m][0][kk]
; 1321 :                      - gl->gpolypart[m][0][k]*gl->gpolypart[m][1][kk]);

	mov	eax, DWORD PTR [ebx+24]
	mov	esi, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR [esi+4]
	mov	esi, DWORD PTR [esi]
	mov	DWORD PTR tv3284[ebp], esi
	mov	esi, DWORD PTR tv3268[ebp]
	mov	esi, DWORD PTR [esi+4]
	mov	DWORD PTR tv3301[ebp], esi
	mov	esi, DWORD PTR tv3284[ebp]
	fld	QWORD PTR [esi+ecx*8]
	fmul	QWORD PTR [eax+edx*8]
	fld	QWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR tv3301[ebp]
	fmul	QWORD PTR [esi+edx*8]
	fsubp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	jmp	$LN223@q_facet_to@6
$LN437@q_facet_to@6:

; 1322 :           }
; 1323 :           else if ( dim > 2 )

	jle	$LN73@q_facet_to@6

; 1324 :           { for ( j = 0 ; j < dim ; j++ )

	xor	ebx, ebx
	mov	DWORD PTR _j$[ebp], ebx
	test	edi, edi
	jle	$LN234@q_facet_to@6
$LN75@q_facet_to@6:

; 1325 :              { for ( jj = 0 ; jj < dim ; jj++ )

	mov	DWORD PTR _jj$[ebp], 0
$LN72@q_facet_to@6:

; 1326 :                   for ( i = 0 ; i < dim ; i++ )

	xor	esi, esi
$LN69@q_facet_to@6:

; 1327 :                      for ( ii = 0 ; ii < dim ; ii++ )

	xor	eax, eax
	mov	DWORD PTR _ii$[ebp], eax
	cmp	edi, 4
	jl	$LC215@q_facet_to@6

; 1325 :              { for ( jj = 0 ; jj < dim ; jj++ )

	mov	eax, DWORD PTR _dethess$[ebp]
	fld	ST(1)
	mov	eax, DWORD PTR [eax+esi*4]
	fmul	ST(0), ST(1)
	mov	eax, DWORD PTR [eax+ebx*4]
	mov	DWORD PTR tv3312[ebp], eax
	mov	eax, DWORD PTR _uhess$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [eax+ebx*4]
	mov	ebx, DWORD PTR _jj$[ebp]

; 1327 :                      for ( ii = 0 ; ii < dim ; ii++ )

	add	edi, -4					; fffffffcH
	shr	edi, 2
	lea	eax, DWORD PTR [eax+ebx*8]
	mov	ebx, DWORD PTR tv3312[ebp]
	inc	edi
	mov	DWORD PTR tv2823[ebp], edi
	mov	DWORD PTR tv3347[ebp], eax
	lea	eax, DWORD PTR [ebx+8]

; 1328 :                 { 
; 1329 :                   uhess[k][kk][j][jj]  += weight*z*dethess[i][j][ii][jj]
; 1330 :                     *gl->gpolypart[m][i][k]*gl->gpolypart[m][ii][kk];

	neg	ebx
	add	edi, edi
	add	edi, edi
	mov	DWORD PTR tv5652[ebp], 8
	mov	DWORD PTR tv6002[ebp], ebx
	mov	DWORD PTR _ii$[ebp], edi
$LN231@q_facet_to@6:
	mov	edi, DWORD PTR _gl$[ebp]
	mov	edi, DWORD PTR [edi+24]
	mov	ebx, DWORD PTR _m$[ebp]
	mov	edi, DWORD PTR [edi+ebx*4]
	mov	ebx, DWORD PTR _jj$[ebp]
	mov	DWORD PTR tv3324[ebp], edi
	mov	edi, DWORD PTR [eax-8]
	fld	QWORD PTR [edi+ebx*8]
	mov	edi, DWORD PTR tv3324[ebp]
	mov	ebx, DWORD PTR [edi+esi*4]
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR tv6002[ebp]
	lea	ebx, DWORD PTR [ebx+eax-8]
	mov	edi, DWORD PTR [edi+ebx]
	fmul	QWORD PTR [edi+ecx*8]
	mov	edi, DWORD PTR tv3347[ebp]
	mov	ebx, DWORD PTR _m$[ebp]
	fadd	QWORD PTR [edi]
	fst	QWORD PTR [edi]
	mov	edi, DWORD PTR _gl$[ebp]
	mov	edi, DWORD PTR [edi+24]
	mov	edi, DWORD PTR [edi+ebx*4]
	mov	ebx, DWORD PTR _jj$[ebp]
	mov	DWORD PTR tv3324[ebp], edi
	mov	edi, DWORD PTR [eax-4]
	fld	QWORD PTR [edi+ebx*8]
	mov	ebx, DWORD PTR tv3324[ebp]
	mov	edi, DWORD PTR [ebx+esi*4]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [edi+edx*8]
	mov	edi, DWORD PTR tv6002[ebp]
	lea	edi, DWORD PTR [edi+eax-8]
	mov	edi, DWORD PTR [ebx+edi+4]
	fmul	QWORD PTR [edi+ecx*8]
	mov	edi, DWORD PTR tv3347[ebp]
	mov	ebx, DWORD PTR _m$[ebp]
	faddp	ST(1), ST(0)
	fst	QWORD PTR [edi]
	mov	edi, DWORD PTR _gl$[ebp]
	mov	edi, DWORD PTR [edi+24]
	mov	edi, DWORD PTR [edi+ebx*4]
	mov	ebx, DWORD PTR _jj$[ebp]
	mov	DWORD PTR tv3324[ebp], edi
	mov	edi, DWORD PTR [eax]
	fld	QWORD PTR [edi+ebx*8]
	mov	edi, DWORD PTR tv3324[ebp]
	mov	ebx, DWORD PTR [edi+esi*4]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR tv5652[ebp]
	mov	edi, DWORD PTR [ebx+edi]
	mov	ebx, DWORD PTR _m$[ebp]
	fmul	QWORD PTR [edi+ecx*8]
	mov	edi, DWORD PTR tv3347[ebp]
	add	DWORD PTR tv5652[ebp], 16		; 00000010H
	faddp	ST(1), ST(0)
	fst	QWORD PTR [edi]
	mov	edi, DWORD PTR _gl$[ebp]
	mov	edi, DWORD PTR [edi+24]
	mov	edi, DWORD PTR [edi+ebx*4]
	mov	ebx, DWORD PTR _jj$[ebp]
	mov	DWORD PTR tv3324[ebp], edi
	mov	edi, DWORD PTR [eax+4]
	fld	QWORD PTR [edi+ebx*8]
	mov	edi, DWORD PTR tv3324[ebp]
	mov	ebx, DWORD PTR [edi+esi*4]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR tv6002[ebp]
	lea	ebx, DWORD PTR [ebx+eax+4]
	mov	edi, DWORD PTR [ebx+edi]
	fmul	QWORD PTR [edi+ecx*8]
	mov	edi, DWORD PTR tv3347[ebp]
	add	eax, 16					; 00000010H
	dec	DWORD PTR tv2823[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [edi]
	jne	$LN231@q_facet_to@6

; 1327 :                      for ( ii = 0 ; ii < dim ; ii++ )

	mov	eax, DWORD PTR _ii$[ebp]
	fstp	ST(0)
	mov	ebx, DWORD PTR _j$[ebp]
	mov	edi, DWORD PTR _dim$[ebp]
$LC215@q_facet_to@6:
	cmp	eax, edi
	jge	$LN68@q_facet_to@6

; 1325 :              { for ( jj = 0 ; jj < dim ; jj++ )

	mov	edi, DWORD PTR _dethess$[ebp]
	fld	ST(1)
	mov	edi, DWORD PTR [edi+esi*4]
	fmul	ST(0), ST(1)

; 1409 :   for ( i = 0 ; i < ctrl ; i++ )

	mov	edi, DWORD PTR [edi+ebx*4]
	mov	DWORD PTR tv3312[ebp], edi
	mov	edi, DWORD PTR _uhess$[ebp]
	mov	edi, DWORD PTR [edi+edx*4]
	mov	edi, DWORD PTR [edi+ecx*4]
	mov	edi, DWORD PTR [edi+ebx*4]
	mov	ebx, DWORD PTR _jj$[ebp]
	lea	edi, DWORD PTR [edi+ebx*8]
	mov	DWORD PTR tv3433[ebp], edi
$LN232@q_facet_to@6:

; 1328 :                 { 
; 1329 :                   uhess[k][kk][j][jj]  += weight*z*dethess[i][j][ii][jj]
; 1330 :                     *gl->gpolypart[m][i][k]*gl->gpolypart[m][ii][kk];

	mov	edi, DWORD PTR _gl$[ebp]
	mov	edi, DWORD PTR [edi+24]
	mov	ebx, DWORD PTR _m$[ebp]
	mov	edi, DWORD PTR [edi+ebx*4]
	mov	ebx, DWORD PTR tv3312[ebp]
	mov	eax, DWORD PTR [ebx+eax*4]
	mov	ebx, DWORD PTR _jj$[ebp]
	fld	QWORD PTR [eax+ebx*8]
	mov	eax, DWORD PTR _ii$[ebp]
	mov	DWORD PTR tv3410[ebp], edi
	fmul	ST(0), ST(1)
	mov	edi, DWORD PTR [edi+esi*4]
	inc	eax
	fmul	QWORD PTR [edi+edx*8]
	mov	edi, DWORD PTR tv3410[ebp]
	mov	edi, DWORD PTR [edi+eax*4-4]
	mov	DWORD PTR _ii$[ebp], eax
	fmul	QWORD PTR [edi+ecx*8]
	mov	edi, DWORD PTR tv3433[ebp]
	fadd	QWORD PTR [edi]
	fstp	QWORD PTR [edi]
	mov	edi, DWORD PTR _dim$[ebp]
	cmp	eax, edi
	jl	SHORT $LN232@q_facet_to@6

; 1327 :                      for ( ii = 0 ; ii < dim ; ii++ )

	mov	ebx, DWORD PTR _j$[ebp]
	fstp	ST(0)
$LN68@q_facet_to@6:

; 1326 :                   for ( i = 0 ; i < dim ; i++ )

	inc	esi
	cmp	esi, edi
	jl	$LN69@q_facet_to@6

; 1325 :              { for ( jj = 0 ; jj < dim ; jj++ )

	mov	eax, DWORD PTR _jj$[ebp]
	inc	eax
	mov	DWORD PTR _jj$[ebp], eax
	cmp	eax, edi
	jl	$LN72@q_facet_to@6

; 1324 :           { for ( j = 0 ; j < dim ; j++ )

	inc	ebx
	mov	DWORD PTR _j$[ebp], ebx
	cmp	ebx, edi
	jl	$LN75@q_facet_to@6
$LN73@q_facet_to@6:

; 1331 :                 }
; 1332 :              }
; 1333 :           }
; 1334 :           for ( j = 0 ; j < dim ; j++ )

	mov	ebx, DWORD PTR _gl$[ebp]
	test	edi, edi
	jle	$LN61@q_facet_to@6
$LN223@q_facet_to@6:
	mov	eax, DWORD PTR _uhess$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	esi, DWORD PTR _mat$[ebp]
	sub	esi, eax
	mov	DWORD PTR tv6787[ebp], eax
	mov	DWORD PTR tv6813[ebp], esi
	mov	DWORD PTR tv1909[ebp], edi
$LN239@q_facet_to@6:

; 1335 :           { for ( i = 0, sum = 0.0 ; i < dim ; i++ )

	mov	DWORD PTR _i$[ebp], 0
	fld	ST(2)
	cmp	edi, 4
	jl	SHORT $LN244@q_facet_to@6
	mov	esi, DWORD PTR tv6813[ebp]
	mov	esi, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [ebx+24]
	mov	ebx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [eax+ebx*4]
	lea	ebx, DWORD PTR [edi-4]
	shr	ebx, 2
	inc	ebx
	mov	DWORD PTR tv2125[ebp], ebx
	add	ebx, ebx
	add	esi, 16					; 00000010H
	add	eax, 8
	add	ebx, ebx
	mov	DWORD PTR _i$[ebp], ebx
$LN219@q_facet_to@6:

; 1336 :                   sum += gl->gpolypart[m][i][k]*mat[j][i];

	mov	ebx, DWORD PTR [eax-8]
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR [eax-4]
	fmul	QWORD PTR [esi-16]
	add	eax, 16					; 00000010H
	add	esi, 32					; 00000020H
	dec	DWORD PTR tv2125[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR [eax-16]
	fmul	QWORD PTR [esi-40]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR [eax-12]
	fmul	QWORD PTR [esi-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+edx*8]
	fmul	QWORD PTR [esi-24]
	faddp	ST(1), ST(0)
	jne	SHORT $LN219@q_facet_to@6

; 1335 :           { for ( i = 0, sum = 0.0 ; i < dim ; i++ )

	mov	eax, DWORD PTR tv6787[ebp]
	mov	ebx, DWORD PTR _gl$[ebp]
$LN244@q_facet_to@6:
	cmp	DWORD PTR _i$[ebp], edi
	jge	SHORT $LN217@q_facet_to@6
	mov	esi, DWORD PTR tv6813[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	esi, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+esi*8]
	mov	esi, DWORD PTR _m$[ebp]
	mov	DWORD PTR tv6728[ebp], eax
	mov	eax, DWORD PTR [ebx+24]
	mov	eax, DWORD PTR [eax+esi*4]
	mov	esi, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR tv6730[ebp], eax
	mov	eax, edi
	sub	eax, esi
$LN243@q_facet_to@6:

; 1336 :                   sum += gl->gpolypart[m][i][k]*mat[j][i];

	mov	esi, DWORD PTR tv6730[ebp]
	mov	esi, DWORD PTR [esi]
	fld	QWORD PTR [esi+edx*8]
	mov	esi, DWORD PTR tv6728[ebp]
	fmul	QWORD PTR [esi]
	add	DWORD PTR tv6730[ebp], 4
	add	DWORD PTR tv6728[ebp], 8
	dec	eax
	faddp	ST(1), ST(0)
	jne	SHORT $LN243@q_facet_to@6

; 1335 :           { for ( i = 0, sum = 0.0 ; i < dim ; i++ )

	mov	eax, DWORD PTR tv6787[ebp]
$LN217@q_facet_to@6:

; 1337 :              uhess[k][kk][j][dim] += weight*gl->gpoly[m][kk]*sum;

	mov	eax, DWORD PTR [eax]
	mov	esi, DWORD PTR _m$[ebp]
	lea	eax, DWORD PTR [eax+edi*8]
	mov	DWORD PTR tv6803[ebp], eax
	mov	eax, DWORD PTR [ebx+20]
	mov	eax, DWORD PTR [eax+esi*4]
	fld	QWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR tv6803[ebp]
	fmul	ST(0), ST(2)
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR tv6787[ebp]
	add	eax, 4
	dec	DWORD PTR tv1909[ebp]
	mov	DWORD PTR tv6787[ebp], eax
	jne	$LN239@q_facet_to@6

; 1331 :                 }
; 1332 :              }
; 1333 :           }
; 1334 :           for ( j = 0 ; j < dim ; j++ )

	jmp	SHORT $LN61@q_facet_to@6
$LN234@q_facet_to@6:
	mov	ebx, DWORD PTR _gl$[ebp]
$LN61@q_facet_to@6:

; 1338 :           }
; 1339 :           for ( jj = 0 ; jj < dim ; jj++ )

	xor	eax, eax
	mov	DWORD PTR _jj$[ebp], eax
	test	edi, edi
	jle	$LN80@q_facet_to@6
	mov	esi, DWORD PTR _uhess$[ebp]
	mov	esi, DWORD PTR [esi+edx*4]
	mov	esi, DWORD PTR [esi+ecx*4]
	mov	esi, DWORD PTR [esi+edi*4]
	mov	DWORD PTR tv7260[ebp], esi
$LN240@q_facet_to@6:

; 1340 :           { for ( ii = 0,sum = 0.0 ; ii < dim ; ii++ )

	mov	DWORD PTR _ii$[ebp], 0
	fld	ST(2)
	cmp	edi, 4
	jl	SHORT $LN246@q_facet_to@6
	mov	esi, DWORD PTR _mat$[ebp]
	mov	esi, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [ebx+24]
	mov	ebx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [eax+ebx*4]
	lea	ebx, DWORD PTR [edi-4]
	shr	ebx, 2
	inc	ebx
	mov	DWORD PTR tv1024[ebp], ebx
	add	ebx, ebx
	add	esi, 16					; 00000010H
	add	eax, 8
	add	ebx, ebx
	mov	DWORD PTR _ii$[ebp], ebx
$LN222@q_facet_to@6:

; 1341 :                 sum +=  gl->gpolypart[m][ii][kk]*mat[jj][ii];

	mov	ebx, DWORD PTR [eax-8]
	fld	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR [eax-4]
	fmul	QWORD PTR [esi-16]
	add	eax, 16					; 00000010H
	add	esi, 32					; 00000020H
	dec	DWORD PTR tv1024[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR [eax-16]
	fmul	QWORD PTR [esi-40]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR [eax-12]
	fmul	QWORD PTR [esi-32]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+ecx*8]
	fmul	QWORD PTR [esi-24]
	faddp	ST(1), ST(0)
	jne	SHORT $LN222@q_facet_to@6

; 1340 :           { for ( ii = 0,sum = 0.0 ; ii < dim ; ii++ )

	mov	ebx, DWORD PTR _gl$[ebp]
	mov	eax, DWORD PTR _jj$[ebp]
$LN246@q_facet_to@6:
	cmp	DWORD PTR _ii$[ebp], edi
	jge	SHORT $LN220@q_facet_to@6
	mov	esi, DWORD PTR _mat$[ebp]
	mov	eax, DWORD PTR [esi+eax*4]
	mov	esi, DWORD PTR _ii$[ebp]
	lea	eax, DWORD PTR [eax+esi*8]
	mov	esi, DWORD PTR _m$[ebp]
	mov	DWORD PTR tv7203[ebp], eax
	mov	eax, DWORD PTR [ebx+24]
	mov	eax, DWORD PTR [eax+esi*4]
	mov	esi, DWORD PTR _ii$[ebp]
	lea	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR tv7205[ebp], eax
	mov	eax, edi
	sub	eax, esi
$LN242@q_facet_to@6:

; 1341 :                 sum +=  gl->gpolypart[m][ii][kk]*mat[jj][ii];

	mov	esi, DWORD PTR tv7205[ebp]
	mov	esi, DWORD PTR [esi]
	fld	QWORD PTR [esi+ecx*8]
	mov	esi, DWORD PTR tv7203[ebp]
	fmul	QWORD PTR [esi]
	add	DWORD PTR tv7205[ebp], 4
	add	DWORD PTR tv7203[ebp], 8
	dec	eax
	faddp	ST(1), ST(0)
	jne	SHORT $LN242@q_facet_to@6
$LN220@q_facet_to@6:

; 1342 :              uhess[k][kk][dim][jj] += weight*gl->gpoly[m][k]*sum;

	mov	eax, DWORD PTR [ebx+20]
	mov	esi, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [eax+esi*4]
	fld	QWORD PTR [eax+edx*8]
	mov	esi, DWORD PTR tv7260[ebp]
	mov	eax, DWORD PTR _jj$[ebp]
	fmul	ST(0), ST(2)
	inc	eax
	add	esi, 8
	fmulp	ST(1), ST(0)
	mov	DWORD PTR _jj$[ebp], eax
	mov	DWORD PTR tv7260[ebp], esi
	fadd	QWORD PTR [esi-8]
	fstp	QWORD PTR [esi-8]
	cmp	eax, edi
	jl	$LN240@q_facet_to@6
$LN80@q_facet_to@6:

; 1312 :        for ( kk = 0 ; kk < gl->lagpts ; kk++ )

	mov	esi, DWORD PTR _m$[ebp]
	inc	ecx
	cmp	ecx, DWORD PTR [ebx+16]
	jl	$LN81@q_facet_to@6
$LN83@q_facet_to@6:

; 1309 :      
; 1310 :     /* hessian */
; 1311 :     for ( k = 0 ; k < gl->lagpts  ; k++ )

	mov	eax, DWORD PTR [ebx+16]
	inc	edx
	cmp	edx, eax
	jl	$LN84@q_facet_to@6
$LN418@q_facet_to@6:

; 1331 :                 }
; 1332 :              }
; 1333 :           }
; 1334 :           for ( j = 0 ; j < dim ; j++ )

	fstp	ST(0)
	inc	esi
	fstp	ST(0)
	mov	DWORD PTR _m$[ebp], esi
	fstp	ST(0)
	cmp	esi, DWORD PTR [ebx+4]
	jl	$LN419@q_facet_to@6
$LN100@q_facet_to@6:

; 1343 :           }
; 1344 :         }
; 1345 :   }
; 1346 : 
; 1347 :   /* add corrections due to wraps */
; 1348 :   fe = get_facet_fe(f_info->id);

	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [ecx]
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN133@q_facet_to@6
	xor	edi, edi
	jmp	SHORT $LN132@q_facet_to@6
$LN133@q_facet_to@6:
	mov	ecx, DWORD PTR _web+236
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	edi, DWORD PTR [edx+28]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN132@q_facet_to@6
	xor	edi, 134217728				; 08000000H
$LN132@q_facet_to@6:

; 1349 :   for ( i = 0 ; i < FACET_EDGES ; i++, fe = get_next_edge(fe) ) 

	mov	ecx, DWORD PTR _web+460
	mov	DWORD PTR _i$[ebp], 0
$LN136@q_facet_to@6:

; 1350 :      w[i] = get_fe_wrap(fe);

	mov	ebx, DWORD PTR _web+216
	mov	esi, edi
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	ecx, DWORD PTR [esi+ecx]
	mov	eax, edi
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _web+124
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ebx+ecx+784]
	mov	ecx, DWORD PTR [edx+ecx]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN144@q_facet_to@6
	push	ecx
	fstp	ST(0)
	call	DWORD PTR _sym_inverse
	fld	QWORD PTR _vol$[ebp]
	add	esp, 4
	jmp	SHORT $LN438@q_facet_to@6
$LN144@q_facet_to@6:
	mov	eax, ecx
$LN438@q_facet_to@6:
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _web+460
	mov	DWORD PTR _w$[ebp+edx*4], eax
	mov	eax, DWORD PTR [esi+ecx]
	inc	edx
	mov	DWORD PTR _i$[ebp], edx
	test	edi, 134217728				; 08000000H
	je	SHORT $LN137@q_facet_to@6

; 1349 :   for ( i = 0 ; i < FACET_EDGES ; i++, fe = get_next_edge(fe) ) 

	mov	edi, DWORD PTR [eax+28]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN201@q_facet_to@6
$LN137@q_facet_to@6:
	mov	edi, DWORD PTR [eax+32]
$LN201@q_facet_to@6:
	cmp	edx, 3
	jl	$LN136@q_facet_to@6

; 1351 : 
; 1352 :   allwrap = WR(w[0],2)+(WR(w[1],2)<<TWRAPBITS)+(WR(w[2],2)<<(2*TWRAPBITS));

	mov	eax, DWORD PTR _w$[ebp+8]
	mov	ecx, DWORD PTR _w$[ebp+4]
	mov	edx, DWORD PTR _w$[ebp]
	sar	eax, 12					; 0000000cH
	and	eax, 31					; 0000001fH
	shl	eax, 6
	sar	ecx, 12					; 0000000cH
	and	ecx, 31					; 0000001fH
	add	eax, ecx
	sar	edx, 12					; 0000000cH
	shl	eax, 6
	and	edx, 31					; 0000001fH
	add	eax, edx

; 1353 : 
; 1354 :   switch ( allwrap )

	cmp	eax, 4127				; 0000101fH
	ja	$LN131@q_facet_to@6
	je	$LN297@q_facet_to@6
	test	eax, eax
	je	$LN248@q_facet_to@6
	cmp	eax, 95					; 0000005fH
	je	SHORT $LN303@q_facet_to@6
	cmp	eax, 1985				; 000007c1H
	jne	$LN315@q_facet_to@6

; 1355 :      { case 0: break;
; 1356 :        case (POSWRAP)+(NEGWRAP << TWRAPBITS): break;

	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	jmp	$LN22@q_facet_to@6
$LN303@q_facet_to@6:

; 1377 :        case  (NEGWRAP) + (POSWRAP << TWRAPBITS):
; 1378 :             vol -= lagr_cut_int(uu[0]) + lagr_cut_int(uu[1]);

	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	fstp	ST(0)
	mov	edi, DWORD PTR [esi+1224]
	push	edi
	call	_lagr_cut_int
	fstp	QWORD PTR tv8342[ebp]
	mov	eax, DWORD PTR [esi+1228]
	push	eax
	call	_lagr_cut_int
	fadd	QWORD PTR tv8342[ebp]

; 1379 :             lagr_cut_hess(uu[0],uugrad[0],uuhess[0],-1);

	mov	ecx, DWORD PTR [esi+1256]
	mov	edx, DWORD PTR [esi+1240]
	fsubr	QWORD PTR _vol$[ebp]
	push	-1
	push	ecx
	push	edx
	push	edi
	fstp	QWORD PTR _vol$[ebp]
	call	_lagr_cut_hess

; 1380 :             lagr_cut_hess(uu[1],uugrad[1],uuhess[1],-1);

	mov	eax, DWORD PTR [esi+1260]
	mov	ecx, DWORD PTR [esi+1244]
	mov	edx, DWORD PTR [esi+1228]
	push	-1
	push	eax
	push	ecx
	push	edx
	call	_lagr_cut_hess

; 1381 :             switch ( WR(f_info->wraps[ctrl-1],0) )

	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	eax, DWORD PTR [esi+eax*4+812]
	and	eax, 31					; 0000001fH
	add	esp, 40					; 00000028H
	dec	eax
	je	SHORT $LN30@q_facet_to@6
	sub	eax, 30					; 0000001eH
	jne	SHORT $LN228@q_facet_to@6

; 1383 :               case NEGWRAP: vol += uu[2][0][1]; uugrad[2][0][1] += 1.0; break;

	mov	ecx, DWORD PTR [esi+1232]
	mov	edx, DWORD PTR [ecx]
	fld	QWORD PTR [edx+8]
	mov	eax, DWORD PTR [esi+1248]
	fadd	QWORD PTR _vol$[ebp]
	mov	eax, DWORD PTR [eax]
	fld	QWORD PTR [eax+8]
	fld1
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax+8]
	jmp	SHORT $LN31@q_facet_to@6
$LN30@q_facet_to@6:

; 1382 :             { case POSWRAP: vol -= uu[2][0][1]; uugrad[2][0][1] -= 1.0; break;

	mov	ecx, DWORD PTR [esi+1232]
	fld	QWORD PTR _vol$[ebp]
	mov	eax, DWORD PTR [esi+1248]
	mov	edx, DWORD PTR [ecx]
	fsub	QWORD PTR [edx+8]
	mov	eax, DWORD PTR [eax]
	fld	QWORD PTR [eax+8]
	fld1
	fsub	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax+8]
	jmp	SHORT $LN31@q_facet_to@6
$LN228@q_facet_to@6:
	fld	QWORD PTR _vol$[ebp]
	fld1
$LN31@q_facet_to@6:

; 1384 :             }
; 1385 :             switch ( WR(f_info->wraps[0],0) )

	mov	eax, DWORD PTR [esi+816]
	and	eax, 31					; 0000001fH
	dec	eax
	je	SHORT $LN26@q_facet_to@6
	sub	eax, 30					; 0000001eH
	jne	$LN425@q_facet_to@6

; 1387 :               case NEGWRAP: vol -= uu[0][0][1]; uugrad[0][0][1] -= 1.0;break;

	mov	ecx, DWORD PTR [esi+1224]
	fxch	ST(1)
	mov	eax, DWORD PTR [esi+1240]
	mov	edx, DWORD PTR [ecx]
	fsub	QWORD PTR [edx+8]
	mov	eax, DWORD PTR [eax]
	fld	QWORD PTR [eax+8]
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax+8]
	jmp	$LN22@q_facet_to@6
$LN26@q_facet_to@6:

; 1386 :             { case POSWRAP: vol += uu[0][0][1]; uugrad[0][0][1] += 1.0;break;

	mov	ecx, DWORD PTR [esi+1224]
	mov	edx, DWORD PTR [ecx]
	fld	QWORD PTR [edx+8]
	mov	eax, DWORD PTR [esi+1240]
	mov	eax, DWORD PTR [eax]
	faddp	ST(2), ST(0)
	fadd	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]

; 1388 :             }
; 1389 :             break;

	jmp	$LN22@q_facet_to@6
$LN297@q_facet_to@6:

; 1357 :        case (POSWRAP << TWRAPBITS) + (NEGWRAP << (2*TWRAPBITS)): break; 
; 1358 :        case (NEGWRAP) + (POSWRAP << (2*TWRAPBITS)):
; 1359 :             vol -= lagr_cut_int(uu[0])+lagr_cut_int(uu[1])+lagr_cut_int(uu[2]);

	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	fstp	ST(0)
	mov	edi, DWORD PTR [esi+1224]
	push	edi
	call	_lagr_cut_int
	fstp	QWORD PTR tv8344[ebp]
	mov	ecx, DWORD PTR [esi+1228]
	push	ecx
	call	_lagr_cut_int
	fadd	QWORD PTR tv8344[ebp]
	mov	edx, DWORD PTR [esi+1232]
	push	edx
	fstp	QWORD PTR tv8346[ebp]
	call	_lagr_cut_int
	fadd	QWORD PTR tv8346[ebp]

; 1360 :             lagr_cut_hess(uu[0],uugrad[0],uuhess[0],-1); 

	mov	eax, DWORD PTR [esi+1256]
	mov	ecx, DWORD PTR [esi+1240]
	push	-1
	fsubr	QWORD PTR _vol$[ebp]
	push	eax
	push	ecx
	push	edi
	fstp	QWORD PTR _vol$[ebp]
	call	_lagr_cut_hess

; 1361 :             lagr_cut_hess(uu[1],uugrad[1],uuhess[1],-1); 

	mov	edx, DWORD PTR [esi+1260]
	mov	eax, DWORD PTR [esi+1244]
	mov	ecx, DWORD PTR [esi+1228]
	push	-1
	push	edx
	push	eax
	push	ecx
	call	_lagr_cut_hess

; 1362 :             lagr_cut_hess(uu[2],uugrad[2],uuhess[2],-1);

	mov	edx, DWORD PTR [esi+1264]
	mov	eax, DWORD PTR [esi+1248]
	mov	ecx, DWORD PTR [esi+1232]
	push	-1
	push	edx
	push	eax
	push	ecx
	call	_lagr_cut_hess

; 1363 :             break;

	fld	QWORD PTR _vol$[ebp]
	add	esp, 60					; 0000003cH
	jmp	$LN22@q_facet_to@6
$LN131@q_facet_to@6:

; 1353 : 
; 1354 :   switch ( allwrap )

	sub	eax, 6080				; 000017c0H
	je	$LN310@q_facet_to@6
	sub	eax, 120897				; 0001d841H
	je	SHORT $LN313@q_facet_to@6
	sub	eax, 63					; 0000003fH
	je	SHORT $LN248@q_facet_to@6
$LN315@q_facet_to@6:

; 1397 :             }
; 1398 :             break;
; 1399 :        default: kb_error(1335,"Internal error: Bad allwrap in facet_volume.\n",
; 1400 :                RECOVERABLE);

	push	1
	fstp	ST(0)
	push	OFFSET ??_C@_0CO@CFIBBAKF@Internal?5error?3?5Bad?5allwrap?5in?5f@
	push	1335					; 00000537H
	call	_kb_error
	fld	QWORD PTR _vol$[ebp]
	add	esp, 12					; 0000000cH
$LN248@q_facet_to@6:
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	jmp	$LN22@q_facet_to@6
$LN313@q_facet_to@6:

; 1364 : 
; 1365 :        case (POSWRAP ) + (NEGWRAP << (2*TWRAPBITS)):
; 1366 :             vol += lagr_cut_int(uu[1]);

	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	fstp	ST(0)
	mov	edi, DWORD PTR [esi+1228]
	push	edi
	call	_lagr_cut_int
	fadd	QWORD PTR _vol$[ebp]

; 1367 :             lagr_cut_hess(uu[1],uugrad[1],uuhess[1],1);

	mov	edx, DWORD PTR [esi+1260]
	mov	eax, DWORD PTR [esi+1244]
	push	1
	fstp	QWORD PTR _vol$[ebp]
	push	edx
	push	eax
	push	edi
	call	_lagr_cut_hess

; 1368 :             switch ( WR(f_info->wraps[order],0) )

	mov	ecx, DWORD PTR _order$[ebp]
	mov	eax, DWORD PTR [esi+ecx*4+816]
	and	eax, 31					; 0000001fH
	add	esp, 20					; 00000014H
	dec	eax
	je	SHORT $LN39@q_facet_to@6
	sub	eax, 30					; 0000001eH
	jne	SHORT $LN229@q_facet_to@6

; 1370 :               case NEGWRAP: vol += uu[1][0][1]; uugrad[1][0][1] += 1.0; break;

	mov	edx, DWORD PTR [esi+1228]
	mov	eax, DWORD PTR [edx]
	fld	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR [esi+1244]
	fadd	QWORD PTR _vol$[ebp]
	mov	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+8]
	fld1
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax+8]
	jmp	SHORT $LN40@q_facet_to@6
$LN39@q_facet_to@6:

; 1369 :             { case POSWRAP: vol -= uu[1][0][1]; uugrad[1][0][1] -= 1.0; break;

	mov	edx, DWORD PTR [esi+1228]
	fld	QWORD PTR _vol$[ebp]
	mov	eax, DWORD PTR [edx]
	fsub	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR [esi+1244]
	mov	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+8]
	fld1
	fsub	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax+8]
	jmp	SHORT $LN40@q_facet_to@6
$LN229@q_facet_to@6:
	fld	QWORD PTR _vol$[ebp]
	fld1
$LN40@q_facet_to@6:

; 1371 :             }
; 1372 :           switch ( WR(f_info->wraps[ctrl-1],0) )

	mov	edx, DWORD PTR _ctrl$[ebp]
	mov	eax, DWORD PTR [esi+edx*4+812]
	and	eax, 31					; 0000001fH
	dec	eax
	je	SHORT $LN35@q_facet_to@6
	sub	eax, 30					; 0000001eH
	jne	$LN425@q_facet_to@6

; 1374 :               case NEGWRAP: vol -= uu[2][0][1]; uugrad[2][0][1] -= 1.0; break;

	mov	eax, DWORD PTR [esi+1232]
	fxch	ST(1)
	mov	ecx, DWORD PTR [eax]
	fsub	QWORD PTR [ecx+8]
	mov	edx, DWORD PTR [esi+1248]
	mov	eax, DWORD PTR [edx]
	fld	QWORD PTR [eax+8]
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax+8]
	jmp	$LN22@q_facet_to@6
$LN35@q_facet_to@6:

; 1373 :             { case POSWRAP: vol += uu[2][0][1]; uugrad[2][0][1] += 1.0; break;

	mov	eax, DWORD PTR [esi+1232]
	mov	ecx, DWORD PTR [eax]
	fld	QWORD PTR [ecx+8]
	mov	edx, DWORD PTR [esi+1248]
	mov	eax, DWORD PTR [edx]
	faddp	ST(2), ST(0)
	fadd	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]

; 1375 :             }
; 1376 :             break;

	jmp	$LN22@q_facet_to@6
$LN310@q_facet_to@6:

; 1390 :        case (NEGWRAP << TWRAPBITS) + (POSWRAP << (2*TWRAPBITS)):
; 1391 :             vol -= lagr_cut_int(uu[1]) + lagr_cut_int(uu[2]);

	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	fstp	ST(0)
	mov	edi, DWORD PTR [esi+1228]
	push	edi
	call	_lagr_cut_int
	fstp	QWORD PTR tv8348[ebp]
	mov	eax, DWORD PTR [esi+1232]
	push	eax
	call	_lagr_cut_int
	fadd	QWORD PTR tv8348[ebp]

; 1392 :             lagr_cut_hess(uu[1],uugrad[1],uuhess[1],-1);

	mov	ecx, DWORD PTR [esi+1260]
	mov	edx, DWORD PTR [esi+1244]
	fsubr	QWORD PTR _vol$[ebp]
	push	-1
	push	ecx
	push	edx
	push	edi
	fstp	QWORD PTR _vol$[ebp]
	call	_lagr_cut_hess

; 1393 :             lagr_cut_hess(uu[2],uugrad[2],uuhess[2],-1);

	mov	eax, DWORD PTR [esi+1264]
	mov	ecx, DWORD PTR [esi+1248]
	mov	edx, DWORD PTR [esi+1232]
	push	-1
	push	eax
	push	ecx
	push	edx
	call	_lagr_cut_hess

; 1394 :             switch ( WR(f_info->wraps[order],0) )

	mov	eax, DWORD PTR _order$[ebp]
	mov	eax, DWORD PTR [esi+eax*4+816]
	and	eax, 31					; 0000001fH
	add	esp, 40					; 00000028H
	dec	eax
	je	SHORT $LN21@q_facet_to@6
	sub	eax, 30					; 0000001eH

; 1396 :               case NEGWRAP: vol -= uu[1][0][1]; uugrad[1][0][1] -= 1.0; break;

	fld	QWORD PTR _vol$[ebp]
	jne	SHORT $LN22@q_facet_to@6
	mov	ecx, DWORD PTR [esi+1228]
	mov	eax, DWORD PTR [esi+1244]
	mov	edx, DWORD PTR [ecx]
	fsub	QWORD PTR [edx+8]
	mov	eax, DWORD PTR [eax]
	fld	QWORD PTR [eax+8]
	fsub	QWORD PTR __real@3ff0000000000000
	fstp	QWORD PTR [eax+8]
	jmp	SHORT $LN22@q_facet_to@6
$LN21@q_facet_to@6:

; 1395 :             { case POSWRAP: vol += uu[1][0][1]; uugrad[1][0][1] += 1.0; break;

	mov	ecx, DWORD PTR [esi+1228]
	mov	edx, DWORD PTR [ecx]
	fld	QWORD PTR [edx+8]
	mov	eax, DWORD PTR [esi+1244]
	fadd	QWORD PTR _vol$[ebp]
	mov	eax, DWORD PTR [eax]
	fld	QWORD PTR [eax+8]
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	QWORD PTR [eax+8]
	jmp	SHORT $LN22@q_facet_to@6
$LN425@q_facet_to@6:

; 1384 :             }
; 1385 :             switch ( WR(f_info->wraps[0],0) )

	fstp	ST(0)
$LN22@q_facet_to@6:

; 1401 :      }
; 1402 : 
; 1403 :   /* pull back gradient and hessian to Euclidean coords */
; 1404 :   vol *= web.torusv;

	fmul	QWORD PTR _web+1600

; 1405 :   for ( i = 0 ; i < ctrl ; i++ )

	mov	edi, DWORD PTR _ctrl$[ebp]
	mov	edx, DWORD PTR _web+616
	xor	ebx, ebx
	fstp	QWORD PTR _vol$[ebp]
	test	edi, edi
	jle	SHORT $LN16@q_facet_to@6
	npad	5
$LL18@q_facet_to@6:

; 1406 :      for ( j = 0 ; j < SDIM ; j++ )

	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN17@q_facet_to@6

; 1405 :   for ( i = 0 ; i < ctrl ; i++ )

	mov	edx, DWORD PTR _ugrad$[ebp]
	mov	eax, DWORD PTR [edx+ebx*4]
	npad	1
$LL226@q_facet_to@6:

; 1407 :        ugrad[i][j] *= web.torusv;

	fld	QWORD PTR [eax]
	inc	ecx
	fmul	QWORD PTR _web+1600
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	mov	edx, DWORD PTR _web+616
	cmp	ecx, edx
	jl	SHORT $LL226@q_facet_to@6
$LN17@q_facet_to@6:

; 1405 :   for ( i = 0 ; i < ctrl ; i++ )

	inc	ebx
	cmp	ebx, edi
	jl	SHORT $LL18@q_facet_to@6
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
$LN16@q_facet_to@6:

; 1408 :   mat_mult(ugrad,dx,f_info->grad,ctrl,SDIM,SDIM);

	mov	eax, DWORD PTR [esi+1336]
	mov	ecx, DWORD PTR _dx$[ebp]
	push	edx
	push	edx
	mov	edx, DWORD PTR _ugrad$[ebp]
	push	edi
	push	eax
	push	ecx
	push	edx
	call	_mat_mult
	add	esp, 24					; 00000018H

; 1409 :   for ( i = 0 ; i < ctrl ; i++ )

	xor	ebx, ebx
	test	edi, edi
	jle	$LN224@q_facet_to@6
	npad	2
$LL12@q_facet_to@6:

; 1410 :      for ( ii = 0 ; ii < ctrl ; ii++ )

	xor	edi, edi
	npad	14
$LL251@q_facet_to@6:

; 1411 :      { for ( j = 0 ; j < SDIM ; j++ ) 

	mov	ecx, DWORD PTR _web+616
	mov	DWORD PTR _j$[ebp], 0
	test	ecx, ecx
	jle	SHORT $LN4@q_facet_to@6
$LL6@q_facet_to@6:

; 1412 :           for ( jj = 0 ; jj < SDIM ; jj++ ) 

	xor	edx, edx
	test	ecx, ecx
	jle	SHORT $LN5@q_facet_to@6
	mov	eax, DWORD PTR _uhess$[ebp]
	mov	ecx, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR [ecx+edi*4]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	npad	1
$LL3@q_facet_to@6:

; 1413 :           { uhess[i][ii][j][jj] *= web.torusv;

	fld	QWORD PTR _web+1600
	inc	edx
	fmul	QWORD PTR [eax]
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	mov	ecx, DWORD PTR _web+616
	cmp	edx, ecx
	jl	SHORT $LL3@q_facet_to@6
$LN5@q_facet_to@6:

; 1411 :      { for ( j = 0 ; j < SDIM ; j++ ) 

	mov	eax, DWORD PTR _j$[ebp]
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, ecx
	jl	SHORT $LL6@q_facet_to@6
$LN4@q_facet_to@6:

; 1414 :            }
; 1415 :        mat_mult(uhess[i][ii],dx,temph,SDIM,SDIM,SDIM);

	mov	edx, DWORD PTR _temph$[ebp]
	mov	eax, DWORD PTR _dx$[ebp]
	push	ecx
	push	ecx
	push	ecx
	mov	ecx, DWORD PTR _uhess$[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+ebx*4]
	push	eax
	mov	eax, DWORD PTR [edx+edi*4]
	push	eax
	call	_mat_mult

; 1416 :        tr_mat_mul(dx,temph,f_info->hess[i][ii],SDIM,SDIM,SDIM);

	mov	eax, DWORD PTR _web+616
	mov	ecx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [ecx+ebx*4]
	mov	ecx, DWORD PTR _temph$[ebp]
	push	eax
	push	eax
	push	eax
	mov	eax, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR _dx$[ebp]
	push	eax
	push	ecx
	push	edx
	call	_tr_mat_mul
	inc	edi
	add	esp, 48					; 00000030H
	cmp	edi, DWORD PTR _ctrl$[ebp]
	jl	$LL251@q_facet_to@6

; 1409 :   for ( i = 0 ; i < ctrl ; i++ )

	inc	ebx
	cmp	ebx, DWORD PTR _ctrl$[ebp]
	jl	$LL12@q_facet_to@6
$LN224@q_facet_to@6:

; 1417 :      }
; 1418 :  
; 1419 :   return vol;
; 1420 : } // end q_facet_torus_volume_lagr_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _vol$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_q_facet_torus_volume_lagr_hess ENDP
_TEXT	ENDS
PUBLIC	??_C@_0ED@EDJABIEK@Internal?5error?3?5Bad?5allwrap?5?$CF08l@ ; `string'
PUBLIC	__real@3fe0000000000000
PUBLIC	??_C@_0EB@INCJEDP@Base?5vertex?5of?5facet?5?$CFs?5has?5nonz@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	__real@4018000000000000
PUBLIC	??_C@_0DB@BBKFHFNA@Method?5facet_torus_volume?5requir@ ; `string'
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_q_facet_torus_volume
EXTRN	_errmsg:BYTE
EXTRN	_sprintf:PROC
EXTRN	_elnames:BYTE
;	COMDAT ??_C@_0ED@EDJABIEK@Internal?5error?3?5Bad?5allwrap?5?$CF08l@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0ED@EDJABIEK@Internal?5error?3?5Bad?5allwrap?5?$CF08l@ DB 'Internal'
	DB	' error: Bad allwrap %08lX in facet_torus_volume facet %s.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT ??_C@_0EB@INCJEDP@Base?5vertex?5of?5facet?5?$CFs?5has?5nonz@
CONST	SEGMENT
??_C@_0EB@INCJEDP@Base?5vertex?5of?5facet?5?$CFs?5has?5nonz@ DB 'Base ver'
	DB	'tex of facet %s has nonzero wrap in facet_torus_volume.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT __real@4018000000000000
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
CONST	ENDS
;	COMDAT ??_C@_0DB@BBKFHFNA@Method?5facet_torus_volume?5requir@
CONST	SEGMENT
??_C@_0DB@BBKFHFNA@Method?5facet_torus_volume?5requir@ DB 'Method facet_t'
	DB	'orus_volume requires torus model.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\torvol.c
CONST	ENDS
;	COMDAT _q_facet_torus_volume
_TEXT	SEGMENT
_uqXvS$ = -192						; size = 12
_f_info$GSCopy$ = -180					; size = 4
_vol$ = -176						; size = 8
_i$ = -168						; size = 4
_fe$ = -164						; size = 4
_uxJ$ = -160						; size = 144
_w$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_q_facet_torus_volume PROC				; COMDAT

; 73   : { REAL **x;

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx

; 74   :   REAL vol;
; 75   :   int i;
; 76   :   REAL **dx = web.inverse_periods;

	mov	ebx, DWORD PTR _web+1612
	push	esi
	mov	esi, DWORD PTR _f_info$[ebp]
	push	edi

; 77   :   unsigned long allwrap;
; 78   :   MAT2D(u,FACET_VERTS,MAXCOORD); /* affine coordinates of vertices */

	push	6
	push	3
	lea	eax, DWORD PTR _uxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _uqXvS$[ebp]
	push	ecx

; 148  :             { case POSWRAP: vol += u[1][1]; ; break;

	mov	DWORD PTR _f_info$GSCopy$[ebp], esi
	call	_mat2d_setup
	add	esp, 16					; 00000010H
	mov	edi, eax
	test	ebx, ebx
	jne	SHORT $LN33@q_facet_to@7

; 79   :   facetedge_id fe;
; 80   :   WRAPTYPE w[FACET_EDGES];
; 81   : 
; 82   :   if ( !dx )
; 83   :     kb_error(3370,"Method facet_torus_volume requires torus model.\n",
; 84   :        RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DB@BBKFHFNA@Method?5facet_torus_volume?5requir@
	push	3370					; 00000d2aH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN33@q_facet_to@7:

; 85   :        
; 86   :   if ( web.modeltype == QUADRATIC ) return q_facet_torus_volume_q(f_info);

	mov	eax, DWORD PTR _web+628
	cmp	eax, 2
	jne	SHORT $LN32@q_facet_to@7
	push	esi
	call	_q_facet_torus_volume_q
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 158  :      }
; 159  :      vol *= web.torusv;
; 160  :  
; 161  :   return vol;
; 162  : } // end q_facet_torus_volume()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN32@q_facet_to@7:

; 87   :   if ( web.modeltype == LAGRANGE )return q_facet_torus_volume_lagr(f_info);

	cmp	eax, 3
	jne	SHORT $LN31@q_facet_to@7
	push	esi
	call	_q_facet_torus_volume_lagr
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 158  :      }
; 159  :      vol *= web.torusv;
; 160  :  
; 161  :   return vol;
; 162  : } // end q_facet_torus_volume()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN31@q_facet_to@7:

; 88   : 
; 89   :   x = f_info->x;
; 90   : 
; 91   :   /* get affine coordinates of vertices */
; 92   :   mat_mul_tr(x,dx,u,FACET_VERTS,SDIM,SDIM);

	mov	eax, DWORD PTR _web+616
	push	eax
	push	eax
	push	3
	push	edi
	lea	edx, DWORD PTR [esi+416]
	push	ebx
	push	edx
	call	_mat_mul_tr

; 93   :   /* main integral over facet */
; 94   :   vol = ((u[1][0]-u[0][0])*(u[2][1]-u[0][1])
; 95   :                     - (u[1][1]-u[0][1])*(u[2][0]-u[0][0]));

	mov	ecx, DWORD PTR [edi+8]
	mov	eax, DWORD PTR [edi]
	fld	QWORD PTR [ecx+8]
	fsub	QWORD PTR [eax+8]
	mov	edx, DWORD PTR [edi+4]
	fld	QWORD PTR [edx]
	add	esp, 24					; 00000018H
	fsub	QWORD PTR [eax]
	fmulp	ST(1), ST(0)
	fld	QWORD PTR [edx+8]
	fsub	QWORD PTR [eax+8]
	fld	QWORD PTR [ecx]
	fsub	QWORD PTR [eax]
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)

; 96   :   vol *= (u[0][2]+u[1][2]+u[2][2])/6;

	fld	QWORD PTR [edx+16]
	fadd	QWORD PTR [eax+16]
	fadd	QWORD PTR [ecx+16]

; 97   : 
; 98   :   /* add corrections due to wraps */
; 99   :   fe = get_facet_fe(f_info->id);

	mov	ecx, DWORD PTR [esi]
	fdiv	QWORD PTR __real@4018000000000000
	fmulp	ST(1), ST(0)
	fst	QWORD PTR _vol$[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN42@q_facet_to@7
	xor	eax, eax
	jmp	SHORT $LN41@q_facet_to@7
$LN42@q_facet_to@7:
	mov	edx, DWORD PTR _web+236
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN41@q_facet_to@7
	xor	eax, 134217728				; 08000000H
$LN41@q_facet_to@7:

; 100  :   for ( i = 0 ; i < FACET_EDGES ; i++, fe = get_next_edge(fe) )

	mov	ecx, DWORD PTR _web+460
	mov	DWORD PTR _fe$[ebp], eax
	mov	DWORD PTR _i$[ebp], 0
$LN57@q_facet_to@7:

; 101  :      w[i] = get_fe_wrap(fe);

	mov	ebx, DWORD PTR _web+216
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	ecx, DWORD PTR [esi+ecx]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _web+124
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ebx+ecx+784]
	mov	ecx, DWORD PTR [edx+ecx]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN53@q_facet_to@7
	push	ecx
	fstp	ST(0)
	call	DWORD PTR _sym_inverse
	fld	QWORD PTR _vol$[ebp]
	add	esp, 4
	jmp	SHORT $LN123@q_facet_to@7
$LN53@q_facet_to@7:
	mov	eax, ecx
$LN123@q_facet_to@7:
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _web+460
	mov	DWORD PTR _w$[ebp+edx*4], eax
	mov	eax, DWORD PTR [esi+ecx]
	inc	edx
	test	DWORD PTR _fe$[ebp], 134217728		; 08000000H
	mov	DWORD PTR _i$[ebp], edx
	je	SHORT $LN46@q_facet_to@7

; 100  :   for ( i = 0 ; i < FACET_EDGES ; i++, fe = get_next_edge(fe) )

	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN124@q_facet_to@7
$LN46@q_facet_to@7:
	mov	eax, DWORD PTR [eax+32]
$LN124@q_facet_to@7:
	mov	DWORD PTR _fe$[ebp], eax
	cmp	edx, 3
	jl	$LN57@q_facet_to@7

; 102  : 
; 103  : if ( f_info->wraps[0] )

	mov	ebx, DWORD PTR _f_info$GSCopy$[ebp]
	cmp	DWORD PTR [ebx+816], 0
	je	SHORT $LN58@q_facet_to@7

; 104  : { sprintf(errmsg,"Base vertex of facet %s has nonzero wrap in facet_torus_volume.\n",
; 105  :      ELNAME(f_info->id));

	mov	eax, DWORD PTR [ebx]
	fstp	ST(0)
	test	eax, 268435456				; 10000000H
	je	SHORT $LN36@q_facet_to@7
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN37@q_facet_to@7
$LN36@q_facet_to@7:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN37@q_facet_to@7:
	push	eax
	push	OFFSET ??_C@_0EB@INCJEDP@Base?5vertex?5of?5facet?5?$CFs?5has?5nonz@
	push	OFFSET _errmsg
	call	_sprintf

; 106  :   kb_error(1326,errmsg,WARNING);

	push	2
	push	OFFSET _errmsg
	push	1326					; 0000052eH
	call	_kb_error
	fld	QWORD PTR _vol$[ebp]
	add	esp, 24					; 00000018H
$LN58@q_facet_to@7:

; 107  : }
; 108  : 
; 109  : #define WR(w,i)  (w>>((i)*TWRAPBITS) & WRAPMASK)
; 110  :   allwrap = WR(w[0],2)+(WR(w[1],2)<<TWRAPBITS)+(WR(w[2],2)<<(2*TWRAPBITS));

	mov	esi, DWORD PTR _w$[ebp+8]
	mov	ecx, DWORD PTR _w$[ebp+4]
	mov	edx, DWORD PTR _w$[ebp]
	sar	esi, 12					; 0000000cH
	and	esi, 31					; 0000001fH
	shl	esi, 6
	sar	ecx, 12					; 0000000cH
	and	ecx, 31					; 0000001fH
	add	esi, ecx
	sar	edx, 12					; 0000000cH
	shl	esi, 6
	and	edx, 31					; 0000001fH
	add	esi, edx

; 111  :   switch ( allwrap )

	cmp	esi, 4127				; 0000101fH
	ja	$LN40@q_facet_to@7
	je	SHORT $LN21@q_facet_to@7
	test	esi, esi
	je	$LN4@q_facet_to@7
	cmp	esi, 95					; 0000005fH
	je	SHORT $LN11@q_facet_to@7
	cmp	esi, 1985				; 000007c1H
	jne	$LN103@q_facet_to@7

; 112  :       { case 0: break;
; 113  :         case (POSWRAP)+(NEGWRAP << TWRAPBITS): break;

	jmp	$LN4@q_facet_to@7
$LN11@q_facet_to@7:

; 134  : 
; 135  :         case  (NEGWRAP) + (POSWRAP << TWRAPBITS):
; 136  :             vol += ((u[1][0]+u[0][0])*(u[1][1]-u[0][1])
; 137  :                       +(u[2][0]+u[1][0])*(u[2][1]-u[1][1]))/2;

	mov	eax, DWORD PTR [edi+4]
	fld	QWORD PTR [eax+8]
	mov	edx, DWORD PTR [edi]
	fsub	QWORD PTR [edx+8]
	mov	ecx, DWORD PTR [edi+8]
	fld	QWORD PTR [edx]
	fadd	QWORD PTR [eax]
	fmulp	ST(1), ST(0)
	fld	QWORD PTR [ecx+8]
	fsub	QWORD PTR [eax+8]
	fld	QWORD PTR [ecx]
	fadd	QWORD PTR [eax]

; 138  :             switch ( WR(f_info->wraps[2],0) )

	mov	eax, DWORD PTR [ebx+824]
	and	eax, 31					; 0000001fH
	dec	eax
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __real@3fe0000000000000
	faddp	ST(1), ST(0)
	je	$LN8@q_facet_to@7
	sub	eax, 30					; 0000001eH
	jne	$LN4@q_facet_to@7

; 139  :             { case POSWRAP: vol -= u[2][1]; break;
; 140  :               case NEGWRAP: vol += u[2][1]; break;

	mov	eax, ecx
	fadd	QWORD PTR [eax+8]
	jmp	$LN4@q_facet_to@7
$LN21@q_facet_to@7:

; 114  :         case (POSWRAP << TWRAPBITS) + (NEGWRAP << (2*TWRAPBITS)): break; 
; 115  : 
; 116  :         case (NEGWRAP) + (POSWRAP << (2*TWRAPBITS)):
; 117  :             vol +=  ((u[1][0]+u[0][0])*(u[1][1]-u[0][1])
; 118  :                       +(u[2][0]+u[1][0])*(u[2][1]-u[1][1])
; 119  :                       +(u[0][0]+u[2][0])*(u[0][1]-u[2][1]))/2;

	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi+8]
	fld	QWORD PTR [ecx]
	fadd	QWORD PTR [eax]
	mov	edi, DWORD PTR [edi]
	fld	QWORD PTR [eax+8]
	fsub	QWORD PTR [ecx+8]
	fmulp	ST(1), ST(0)
	fld	QWORD PTR [ecx]
	fadd	QWORD PTR [edi]
	fld	QWORD PTR [ecx+8]
	fsub	QWORD PTR [edi+8]
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edi]
	fadd	QWORD PTR [eax]
	fld	QWORD PTR [edi+8]
	fsub	QWORD PTR [eax+8]
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __real@3fe0000000000000
	faddp	ST(1), ST(0)

; 120  :             break;

	jmp	$LN4@q_facet_to@7
$LN40@q_facet_to@7:

; 111  :   switch ( allwrap )

	mov	eax, esi
	sub	eax, 6080				; 000017c0H
	je	$LN6@q_facet_to@7
	sub	eax, 120897				; 0001d841H
	je	SHORT $LN20@q_facet_to@7
	sub	eax, 63					; 0000003fH
	je	$LN4@q_facet_to@7
$LN103@q_facet_to@7:

; 150  :             }
; 151  :             break;
; 152  : 
; 153  :          default: 
; 154  :            sprintf(errmsg,
; 155  :         "Internal error: Bad allwrap %08lX in facet_torus_volume facet %s.\n",
; 156  :              allwrap,ELNAME(f_info->id));

	mov	eax, DWORD PTR [ebx]
	fstp	ST(0)
	test	eax, 268435456				; 10000000H
	je	SHORT $LN38@q_facet_to@7
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN39@q_facet_to@7
$LN38@q_facet_to@7:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN39@q_facet_to@7:
	push	eax
	push	esi
	push	OFFSET ??_C@_0ED@EDJABIEK@Internal?5error?3?5Bad?5allwrap?5?$CF08l@
	push	OFFSET _errmsg
	call	_sprintf

; 157  :            kb_error(1327,errmsg, RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	1327					; 0000052fH
	call	_kb_error
	fld	QWORD PTR _vol$[ebp]
	add	esp, 28					; 0000001cH
	jmp	$LN4@q_facet_to@7
$LN20@q_facet_to@7:

; 121  : 
; 122  :         case (POSWRAP ) + (NEGWRAP << (2*TWRAPBITS)):
; 123  :             vol +=  (u[1][0]+u[2][0])*(u[1][1]-u[2][1])/2;

	mov	eax, DWORD PTR [edi+4]
	fld	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR [edi+8]
	fsub	QWORD PTR [ecx+8]
	fld	QWORD PTR [eax]

; 124  : 
; 125  :             switch ( WR(f_info->wraps[1],0) )

	mov	eax, DWORD PTR [ebx+820]
	fadd	QWORD PTR [ecx]
	and	eax, 31					; 0000001fH
	dec	eax
	fmulp	ST(1), ST(0)
	fmul	QWORD PTR __real@3fe0000000000000
	faddp	ST(1), ST(0)
	je	SHORT $LN17@q_facet_to@7
	sub	eax, 30					; 0000001eH
	jne	SHORT $LN18@q_facet_to@7

; 127  :               case NEGWRAP: vol += u[1][1]; break;

	mov	edx, DWORD PTR [edi+4]
	fadd	QWORD PTR [edx+8]
	jmp	SHORT $LN18@q_facet_to@7
$LN17@q_facet_to@7:

; 126  :             { case POSWRAP: vol -= u[1][1]; break;

	mov	eax, DWORD PTR [edi+4]
	fsub	QWORD PTR [eax+8]
$LN18@q_facet_to@7:

; 128  :             }
; 129  :             switch ( WR(f_info->wraps[2],0) )

	mov	ebx, DWORD PTR [ebx+824]
	and	ebx, 31					; 0000001fH
	dec	ebx
	je	SHORT $LN13@q_facet_to@7
	sub	ebx, 30					; 0000001eH
	jne	SHORT $LN4@q_facet_to@7
$LN8@q_facet_to@7:

; 131  :               case NEGWRAP: vol -= u[2][1]; break;

	fsub	QWORD PTR [ecx+8]
	jmp	SHORT $LN4@q_facet_to@7
$LN13@q_facet_to@7:

; 130  :             { case POSWRAP: vol += u[2][1]; break;

	mov	edx, ecx
	fadd	QWORD PTR [edx+8]

; 132  :             }
; 133  :             break;

	jmp	SHORT $LN4@q_facet_to@7
$LN6@q_facet_to@7:

; 141  :             }
; 142  :           break;
; 143  : 
; 144  :         case (NEGWRAP << TWRAPBITS) + (POSWRAP << (2*TWRAPBITS)):
; 145  :             vol +=  ((u[2][0]+u[1][0])*(u[2][1]-u[1][1])
; 146  :                       +(u[0][0]+u[2][0])*(u[0][1]-u[2][1]))/2;

	mov	eax, DWORD PTR [edi+8]
	mov	edx, DWORD PTR [edi]
	fld	QWORD PTR [edx+8]
	mov	ecx, DWORD PTR [edi+4]
	fsub	QWORD PTR [eax+8]
	fld	QWORD PTR [edx]
	fadd	QWORD PTR [eax]
	fmulp	ST(1), ST(0)
	fld	QWORD PTR [eax+8]
	fsub	QWORD PTR [ecx+8]
	fld	QWORD PTR [eax]

; 147  :             switch ( WR(f_info->wraps[1],0) )

	mov	eax, DWORD PTR [ebx+820]
	fadd	QWORD PTR [ecx]
	and	eax, 31					; 0000001fH
	dec	eax
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __real@3fe0000000000000
	faddp	ST(1), ST(0)
	je	SHORT $LN3@q_facet_to@7
	sub	eax, 30					; 0000001eH
	jne	SHORT $LN4@q_facet_to@7

; 149  :               case NEGWRAP: vol -= u[1][1]; ; break;

	mov	eax, ecx
	fsub	QWORD PTR [eax+8]
	jmp	SHORT $LN4@q_facet_to@7
$LN3@q_facet_to@7:

; 148  :             { case POSWRAP: vol += u[1][1]; ; break;

	fadd	QWORD PTR [ecx+8]
$LN4@q_facet_to@7:

; 158  :      }
; 159  :      vol *= web.torusv;
; 160  :  
; 161  :   return vol;
; 162  : } // end q_facet_torus_volume()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fmul	QWORD PTR _web+1600
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_q_facet_torus_volume ENDP
_TEXT	ENDS
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_q_facet_torus_volume_grad
; Function compile flags: /Ogtp
;	COMDAT _q_facet_torus_volume_grad
_TEXT	SEGMENT
_ugradqXvS$ = -356					; size = 12
_uqXvS$ = -344						; size = 12
_vol$ = -332						; size = 8
_i$ = -324						; size = 4
_dx$ = -320						; size = 4
tv1180 = -316						; size = 4
_f_info$GSCopy$ = -312					; size = 4
_fe$ = -308						; size = 4
_uxJ$ = -304						; size = 144
_ugradxJ$ = -160					; size = 144
_w$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_q_facet_torus_volume_grad PROC				; COMDAT

; 172  : { REAL **x;

	push	ebp
	mov	ebp, esp
	sub	esp, 356				; 00000164H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 173  :   REAL zsum,ssum;
; 174  :   int i,j;
; 175  :   REAL **dx = web.inverse_periods;

	mov	eax, DWORD PTR _web+1612
	push	ebx
	mov	ebx, DWORD PTR _f_info$[ebp]
	push	esi
	push	edi

; 176  :   WRAPTYPE w[FACET_EDGES];
; 177  :   unsigned long allwrap;
; 178  :   MAT2D(u,FACET_VERTS,MAXCOORD); /* affine coordinates of vertices */

	push	6
	push	3
	lea	ecx, DWORD PTR _uxJ$[ebp]
	push	ecx
	lea	edx, DWORD PTR _uqXvS$[ebp]
	push	edx
	mov	DWORD PTR _f_info$GSCopy$[ebp], ebx
	mov	DWORD PTR _dx$[ebp], eax
	call	_mat2d_setup

; 179  :   facetedge_id fe;
; 180  :   MAT2D(ugrad,FACET_VERTS,MAXCOORD);

	push	6
	mov	esi, eax
	push	3
	lea	eax, DWORD PTR _ugradxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ugradqXvS$[ebp]
	push	ecx
	call	_mat2d_setup
	mov	edi, eax

; 181  :   REAL vol;
; 182  : 
; 183  :   if ( web.modeltype == QUADRATIC ) return q_facet_torus_volume_q_grad(f_info);

	mov	eax, DWORD PTR _web+628
	add	esp, 32					; 00000020H
	cmp	eax, 2
	jne	SHORT $LN41@q_facet_to@8
	push	ebx
	call	_q_facet_torus_volume_q_grad
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 282  : } // end q_facet_torus_volume_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN41@q_facet_to@8:

; 184  :   if ( web.modeltype == LAGRANGE ) 

	cmp	eax, 3
	jne	SHORT $LN40@q_facet_to@8

; 185  :      return q_facet_torus_volume_lagr_grad(f_info);

	push	ebx
	call	_q_facet_torus_volume_lagr_grad
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 282  : } // end q_facet_torus_volume_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN40@q_facet_to@8:

; 186  : 
; 187  : 
; 188  :   x = f_info->x;
; 189  : 
; 190  :   /* get affine coordinates of vertices */
; 191  :   mat_mul_tr(x,dx,u,FACET_VERTS,SDIM,SDIM);

	mov	eax, DWORD PTR _web+616
	mov	edx, DWORD PTR _dx$[ebp]
	push	eax
	push	eax
	push	3
	push	esi
	push	edx
	lea	eax, DWORD PTR [ebx+416]
	push	eax
	call	_mat_mul_tr

; 192  :   /* main integral over facet */
; 193  :   zsum = (u[0][2]+u[1][2]+u[2][2])/6;

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [esi+4]
	fld	QWORD PTR [eax+16]
	fadd	QWORD PTR [ecx+16]
	mov	edx, DWORD PTR [esi+8]
	add	esp, 24					; 00000018H
	fadd	QWORD PTR [edx+16]
	fld	QWORD PTR __real@4018000000000000
	fdiv	ST(1), ST(0)

; 194  :   ssum = (u[1][0]-u[0][0])*(u[2][1]-u[0][1]) 
; 195  :             - (u[1][1]-u[0][1])*(u[2][0]-u[0][0]);

	fld	QWORD PTR [edx+8]
	fsub	QWORD PTR [eax+8]
	fld	QWORD PTR [ecx]
	fsub	QWORD PTR [eax]
	fmulp	ST(1), ST(0)
	fld	QWORD PTR [ecx+8]
	fsub	QWORD PTR [eax+8]
	fld	QWORD PTR [edx]
	fsub	QWORD PTR [eax]

; 196  :   vol = zsum*ssum;
; 197  :   ugrad[0][0] = zsum*(u[1][1]-u[2][1]);

	mov	eax, DWORD PTR [edi]
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fld	ST(0)
	fmul	ST(0), ST(3)
	fst	QWORD PTR _vol$[ebp]
	fld	QWORD PTR [ecx+8]
	fsub	QWORD PTR [edx+8]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR [eax]

; 198  :   ugrad[0][1] = zsum*(u[2][0]-u[1][0]);

	mov	ecx, DWORD PTR [esi+8]
	fld	QWORD PTR [ecx]
	mov	edx, DWORD PTR [esi+4]
	fsub	QWORD PTR [edx]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR [eax+8]

; 199  :   ugrad[0][2] = ssum/6;

	fxch	ST(1)
	fdivrp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR [eax+16]

; 200  :   ugrad[1][0] = zsum*(u[2][1]-u[0][1]);

	mov	ecx, DWORD PTR [esi+8]
	fld	QWORD PTR [ecx+8]
	mov	edx, DWORD PTR [esi]
	fsub	QWORD PTR [edx+8]
	mov	eax, DWORD PTR [edi+4]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR [eax]

; 201  :   ugrad[1][1] = zsum*(u[0][0]-u[2][0]);

	mov	ecx, DWORD PTR [esi]
	fld	QWORD PTR [ecx]
	mov	edx, DWORD PTR [esi+8]
	fsub	QWORD PTR [edx]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR [eax+8]

; 202  :   ugrad[1][2] = ssum/6;

	fst	QWORD PTR [eax+16]

; 203  :   ugrad[2][0] = zsum*(u[0][1]-u[1][1]);

	mov	ecx, DWORD PTR [esi]
	fld	QWORD PTR [ecx+8]
	mov	edx, DWORD PTR [esi+4]
	fsub	QWORD PTR [edx+8]
	mov	eax, DWORD PTR [edi+8]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR [eax]

; 204  :   ugrad[2][1] = zsum*(u[1][0]-u[0][0]);

	mov	ecx, DWORD PTR [esi+4]
	fld	QWORD PTR [ecx]
	mov	edx, DWORD PTR [esi]
	fsub	QWORD PTR [edx]
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR [eax+8]

; 205  :   ugrad[2][2] = ssum/6;

	fxch	ST(1)
	fstp	QWORD PTR [eax+16]

; 206  :   /* add corrections due to wraps */
; 207  :   fe = get_facet_fe(f_info->id);

	mov	ecx, DWORD PTR [ebx]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN46@q_facet_to@8
	xor	eax, eax
	jmp	SHORT $LN45@q_facet_to@8
$LN46@q_facet_to@8:
	mov	edx, DWORD PTR _web+236
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN45@q_facet_to@8
	xor	eax, 134217728				; 08000000H
$LN45@q_facet_to@8:

; 208  :   for ( i = 0 ; i < FACET_EDGES ; i++, fe = get_next_edge(fe) )

	mov	edx, DWORD PTR _web+460
	mov	DWORD PTR _fe$[ebp], eax
	mov	DWORD PTR _i$[ebp], 0
$LN66@q_facet_to@8:

; 209  :      w[i] = get_fe_wrap(fe);

	mov	ebx, DWORD PTR _web+216
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	add	ecx, ecx
	add	ecx, ecx
	mov	DWORD PTR tv1180[ebp], ecx
	mov	ecx, DWORD PTR [ecx+edx]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _web+124
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _dymem
	mov	ecx, DWORD PTR [ebx+ecx+784]
	mov	ecx, DWORD PTR [edx+ecx]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN57@q_facet_to@8
	push	ecx
	fstp	ST(0)
	call	DWORD PTR _sym_inverse
	fld	QWORD PTR _vol$[ebp]
	add	esp, 4
	jmp	SHORT $LN143@q_facet_to@8
$LN57@q_facet_to@8:
	mov	eax, ecx
$LN143@q_facet_to@8:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _web+460
	mov	DWORD PTR _w$[ebp+ecx*4], eax
	mov	eax, DWORD PTR tv1180[ebp]
	mov	eax, DWORD PTR [eax+edx]
	inc	ecx
	test	DWORD PTR _fe$[ebp], 134217728		; 08000000H
	mov	DWORD PTR _i$[ebp], ecx
	je	SHORT $LN50@q_facet_to@8

; 208  :   for ( i = 0 ; i < FACET_EDGES ; i++, fe = get_next_edge(fe) )

	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN144@q_facet_to@8
$LN50@q_facet_to@8:
	mov	eax, DWORD PTR [eax+32]
$LN144@q_facet_to@8:
	mov	DWORD PTR _fe$[ebp], eax
	cmp	ecx, 3
	jl	$LN66@q_facet_to@8

; 210  : 
; 211  :   allwrap = WR(w[0],2)+(WR(w[1],2)<<TWRAPBITS)+(WR(w[2],2)<<(2*TWRAPBITS));

	mov	eax, DWORD PTR _w$[ebp+8]
	mov	ecx, DWORD PTR _w$[ebp+4]
	mov	edx, DWORD PTR _w$[ebp]
	sar	eax, 12					; 0000000cH
	and	eax, 31					; 0000001fH
	shl	eax, 6
	sar	ecx, 12					; 0000000cH
	and	ecx, 31					; 0000001fH
	add	eax, ecx
	sar	edx, 12					; 0000000cH
	shl	eax, 6
	and	edx, 31					; 0000001fH
	add	eax, edx

; 212  :   switch ( allwrap )

	cmp	eax, 4127				; 0000101fH
	ja	$LN44@q_facet_to@8
	je	$LN31@q_facet_to@8
	test	eax, eax
	je	$LN71@q_facet_to@8
	cmp	eax, 95					; 0000005fH
	je	SHORT $LN21@q_facet_to@8
	cmp	eax, 1985				; 000007c1H
	jne	$LN121@q_facet_to@8

; 213  :       { case 0: break;
; 214  :         case (POSWRAP)+(NEGWRAP << TWRAPBITS): break;

	jmp	$LN71@q_facet_to@8
$LN21@q_facet_to@8:

; 242  :         case  (NEGWRAP) + (POSWRAP << TWRAPBITS):
; 243  :             vol += ((u[1][0]+u[0][0])*(u[1][1]-u[0][1])
; 244  :                       +(u[2][0]+u[1][0])*(u[2][1]-u[1][1]))/2;

	mov	eax, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	fld	QWORD PTR [eax+8]
	fsub	QWORD PTR [edx+8]
	mov	ecx, DWORD PTR [esi+8]
	fld	QWORD PTR [ecx+8]
	fsub	QWORD PTR [eax+8]
	fld	QWORD PTR [ecx]
	fadd	QWORD PTR [eax]
	fmulp	ST(1), ST(0)
	fld	QWORD PTR [edx]
	fadd	QWORD PTR [eax]

; 245  :             ugrad[0][0] += (u[1][1]-u[0][1])/2;

	mov	eax, DWORD PTR [edi]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	faddp	ST(3), ST(0)
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]

; 246  :             ugrad[0][1] -= (u[1][0]+u[0][0])/2;

	mov	ecx, DWORD PTR [esi+4]
	fld	QWORD PTR [ecx]
	mov	edx, DWORD PTR [esi]
	fadd	QWORD PTR [edx]

; 247  :             ugrad[1][0] += (u[2][1]-u[0][1])/2;

	mov	ecx, DWORD PTR [edi+4]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]
	mov	edx, DWORD PTR [esi+8]
	fld	QWORD PTR [edx+8]
	mov	ebx, DWORD PTR [esi]
	fsub	QWORD PTR [ebx+8]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]

; 248  :             ugrad[1][1] += (u[0][0]-u[2][0])/2;

	mov	edx, DWORD PTR [esi]
	fld	QWORD PTR [edx]
	mov	ebx, DWORD PTR [esi+8]
	fsub	QWORD PTR [ebx]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [ecx+8]
	fstp	QWORD PTR [ecx+8]

; 249  :             ugrad[2][0] += (u[2][1]-u[1][1])/2;

	mov	edx, DWORD PTR [esi+8]
	fld	QWORD PTR [edx+8]
	mov	ebx, DWORD PTR [esi+4]
	fsub	QWORD PTR [ebx+8]
	mov	ecx, DWORD PTR [edi+8]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]

; 250  :             ugrad[2][1] += (u[2][0]+u[1][0])/2;

	mov	edx, DWORD PTR [esi+8]
	fld	QWORD PTR [edx]
	mov	ebx, DWORD PTR [esi+4]
	fadd	QWORD PTR [ebx]

; 251  :             switch ( WR(f_info->wraps[2],0) )

	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR [ecx+8]
	fstp	QWORD PTR [ecx+8]
	mov	ecx, DWORD PTR [edx+824]
	fld1
	and	ecx, 31					; 0000001fH
	dec	ecx
	je	SHORT $LN18@q_facet_to@8
	sub	ecx, 30					; 0000001eH
	jne	SHORT $LN19@q_facet_to@8

; 253  :               case NEGWRAP: vol += u[2][1]; ugrad[2][1] += 1.0; break;

	mov	ecx, DWORD PTR [esi+8]
	fld	QWORD PTR [ecx+8]
	mov	ecx, DWORD PTR [edi+8]
	faddp	ST(2), ST(0)
	fld	QWORD PTR [ecx+8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [ecx+8]
	jmp	SHORT $LN19@q_facet_to@8
$LN18@q_facet_to@8:

; 252  :             { case POSWRAP: vol -= u[2][1]; ugrad[2][1] -= 1.0; break;

	mov	ecx, DWORD PTR [esi+8]
	fxch	ST(1)
	fsub	QWORD PTR [ecx+8]
	mov	ecx, DWORD PTR [edi+8]
	fld	QWORD PTR [ecx+8]
	fsub	ST(0), ST(2)
	fstp	QWORD PTR [ecx+8]
	fxch	ST(1)
$LN19@q_facet_to@8:

; 254  :             }
; 255  :             switch ( WR(f_info->wraps[0],0) )

	mov	ecx, DWORD PTR [edx+816]
	and	ecx, 31					; 0000001fH
	dec	ecx
	je	SHORT $LN14@q_facet_to@8
	sub	ecx, 30					; 0000001eH
	jne	$LN132@q_facet_to@8

; 257  :               case NEGWRAP: vol -= u[0][1]; ugrad[0][1] -= 1.0;break;

	mov	edx, DWORD PTR [esi]
	fxch	ST(1)
	fsub	QWORD PTR [edx+8]
	fld	QWORD PTR [eax+8]
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax+8]
	jmp	$LN71@q_facet_to@8
$LN14@q_facet_to@8:

; 256  :             { case POSWRAP: vol += u[0][1]; ugrad[0][1] += 1.0;break;

	mov	ecx, DWORD PTR [esi]
	fld	QWORD PTR [ecx+8]
	faddp	ST(2), ST(0)
	fadd	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]

; 258  :             }
; 259  :             break;

	jmp	$LN71@q_facet_to@8
$LN31@q_facet_to@8:

; 215  :         case (POSWRAP << TWRAPBITS) + (NEGWRAP << (2*TWRAPBITS)): break; 
; 216  :         case (NEGWRAP) + (POSWRAP << (2*TWRAPBITS)):
; 217  :             vol += ((u[1][0]+u[0][0])*(u[1][1]-u[0][1])
; 218  :                       +(u[2][0]+u[1][0])*(u[2][1]-u[1][1])
; 219  :                       +(u[0][0]+u[2][0])*(u[0][1]-u[2][1]))/2;

	mov	ecx, DWORD PTR [esi+4]
	fld	QWORD PTR [ecx]
	mov	edx, DWORD PTR [esi]
	fadd	QWORD PTR [edx]
	mov	eax, DWORD PTR [esi+8]
	fld	QWORD PTR [ecx+8]
	fsub	QWORD PTR [edx+8]
	fmulp	ST(1), ST(0)
	fld	QWORD PTR [eax+8]
	fsub	QWORD PTR [ecx+8]
	fld	QWORD PTR [ecx]
	fadd	QWORD PTR [eax]
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax]
	fadd	QWORD PTR [edx]
	fld	QWORD PTR [edx+8]

; 220  :             ugrad[0][0] += (u[1][1]-u[2][1])/2;

	mov	edx, DWORD PTR [edi]
	fsub	QWORD PTR [eax+8]
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fld	QWORD PTR [ecx+8]
	fsub	QWORD PTR [eax+8]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]

; 221  :             ugrad[0][1] -= (u[1][0]-u[2][0])/2;

	mov	eax, DWORD PTR [esi+4]
	fld	QWORD PTR [eax]
	mov	ecx, DWORD PTR [esi+8]
	fsub	QWORD PTR [ecx]

; 222  :             ugrad[1][0] += (u[2][1]-u[0][1])/2;

	mov	eax, DWORD PTR [edi+4]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [edx+8]
	fstp	QWORD PTR [edx+8]
	mov	edx, DWORD PTR [esi+8]
	fld	QWORD PTR [edx+8]
	mov	ecx, DWORD PTR [esi]
	fsub	QWORD PTR [ecx+8]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]

; 223  :             ugrad[1][1] -= (u[2][0]-u[0][0])/2;

	mov	edx, DWORD PTR [esi+8]
	fld	QWORD PTR [edx]
	mov	ecx, DWORD PTR [esi]
	fsub	QWORD PTR [ecx]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]

; 224  :             ugrad[2][0] += (u[0][1]-u[1][1])/2;

	mov	edx, DWORD PTR [esi]
	mov	ecx, DWORD PTR [esi+4]
	fld	QWORD PTR [edx+8]
	fsub	QWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edi+8]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]

; 225  :             ugrad[2][1] -= (u[0][0]-u[1][0])/2; 

	mov	edx, DWORD PTR [esi]
	mov	ecx, DWORD PTR [esi+4]
	fld	QWORD PTR [edx]
	fsub	QWORD PTR [ecx]
	fmulp	ST(1), ST(0)
	fsubr	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]

; 226  :             break;

	jmp	$LN71@q_facet_to@8
$LN44@q_facet_to@8:

; 212  :   switch ( allwrap )

	sub	eax, 6080				; 000017c0H
	je	$LN12@q_facet_to@8
	sub	eax, 120897				; 0001d841H
	je	SHORT $LN30@q_facet_to@8
	sub	eax, 63					; 0000003fH
	je	$LN71@q_facet_to@8
$LN121@q_facet_to@8:

; 272  :             }
; 273  :             break;
; 274  :          default: kb_error(1328,"Internal error: Bad allwrap in facet_volume.\n",RECOVERABLE);

	push	1
	fstp	ST(0)
	push	OFFSET ??_C@_0CO@CFIBBAKF@Internal?5error?3?5Bad?5allwrap?5in?5f@
	push	1328					; 00000530H
	call	_kb_error
	fld	QWORD PTR _vol$[ebp]
	add	esp, 12					; 0000000cH
	jmp	$LN71@q_facet_to@8
$LN30@q_facet_to@8:

; 227  :         case (POSWRAP ) + (NEGWRAP << (2*TWRAPBITS)):
; 228  :             vol += (u[1][0]+u[2][0])*(u[1][1]-u[2][1])/2;

	mov	eax, DWORD PTR [esi+4]
	fld	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR [esi+8]
	fsub	QWORD PTR [ecx+8]
	fld	QWORD PTR [ecx]

; 229  :             ugrad[1][0] += (u[1][1]-u[2][1])/2;
; 230  :             ugrad[2][0] += (u[1][1]-u[2][1])/2;

	mov	ecx, DWORD PTR [edi+8]
	fadd	QWORD PTR [eax]
	mov	eax, DWORD PTR [edi+4]
	fmul	ST(0), ST(1)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	faddp	ST(3), ST(0)
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	mov	edx, DWORD PTR [esi+4]
	fld	QWORD PTR [edx+8]
	mov	ebx, DWORD PTR [esi+8]
	fsub	QWORD PTR [ebx+8]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]

; 231  :             ugrad[1][1] += (u[1][0]+u[2][0])/2;

	mov	edx, DWORD PTR [esi+8]
	fld	QWORD PTR [edx]
	mov	ebx, DWORD PTR [esi+4]
	fadd	QWORD PTR [ebx]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]

; 232  :             ugrad[2][1] -= (u[1][0]+u[2][0])/2;

	mov	eax, DWORD PTR [esi+8]
	fld	QWORD PTR [eax]
	mov	edx, DWORD PTR [esi+4]
	fadd	QWORD PTR [edx]
	fmulp	ST(1), ST(0)
	fsubr	QWORD PTR [ecx+8]
	fstp	QWORD PTR [ecx+8]

; 233  :             switch ( WR(f_info->wraps[1],0) )

	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [ecx+820]
	fld1
	and	eax, 31					; 0000001fH
	dec	eax
	je	SHORT $LN27@q_facet_to@8
	sub	eax, 30					; 0000001eH
	jne	SHORT $LN28@q_facet_to@8

; 235  :               case NEGWRAP: vol += u[1][1]; ugrad[1][1] += 1.0; break;

	mov	eax, DWORD PTR [esi+4]
	fld	QWORD PTR [eax+8]
	mov	eax, DWORD PTR [edi+4]
	faddp	ST(2), ST(0)
	fld	QWORD PTR [eax+8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax+8]
	jmp	SHORT $LN28@q_facet_to@8
$LN27@q_facet_to@8:

; 234  :             { case POSWRAP: vol -= u[1][1]; ugrad[1][1] -= 1.0; break;

	mov	edx, DWORD PTR [esi+4]
	fxch	ST(1)
	fsub	QWORD PTR [edx+8]
	mov	eax, DWORD PTR [edi+4]
	fld	QWORD PTR [eax+8]
	fsub	ST(0), ST(2)
	fstp	QWORD PTR [eax+8]
	fxch	ST(1)
$LN28@q_facet_to@8:

; 236  :             }
; 237  :             switch ( WR(f_info->wraps[2],0) )

	mov	eax, DWORD PTR [ecx+824]
	and	eax, 31					; 0000001fH
	dec	eax
	je	SHORT $LN23@q_facet_to@8
	sub	eax, 30					; 0000001eH
	jne	$LN132@q_facet_to@8

; 239  :               case NEGWRAP: vol -= u[2][1]; ugrad[2][1] -= 1.0; break;

	mov	eax, DWORD PTR [esi+8]
	fxch	ST(1)
	fsub	QWORD PTR [eax+8]
	mov	eax, DWORD PTR [edi+8]
	fld	QWORD PTR [eax+8]
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax+8]
	jmp	$LN71@q_facet_to@8
$LN23@q_facet_to@8:

; 238  :             { case POSWRAP: vol += u[2][1]; ugrad[2][1] += 1.0; break;

	mov	ecx, DWORD PTR [esi+8]
	fld	QWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edi+8]
	faddp	ST(2), ST(0)
	fadd	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]

; 240  :             }
; 241  :             break;

	jmp	$LN71@q_facet_to@8
$LN12@q_facet_to@8:

; 260  :         case (NEGWRAP << TWRAPBITS) + (POSWRAP << (2*TWRAPBITS)):
; 261  :             vol += ((u[2][0]+u[1][0])*(u[2][1]-u[1][1])
; 262  :                       +(u[0][0]+u[2][0])*(u[0][1]-u[2][1]))/2;

	mov	eax, DWORD PTR [esi+8]
	mov	edx, DWORD PTR [esi]
	fld	QWORD PTR [edx+8]
	mov	ecx, DWORD PTR [esi+4]
	fsub	QWORD PTR [eax+8]
	fld	QWORD PTR [eax+8]
	fsub	QWORD PTR [ecx+8]
	fld	QWORD PTR [eax]
	fadd	QWORD PTR [ecx]
	fmulp	ST(1), ST(0)
	fld	QWORD PTR [eax]

; 263  :             ugrad[0][0] += (u[0][1]-u[2][1])/2;

	mov	eax, DWORD PTR [edi]
	fadd	QWORD PTR [edx]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	faddp	ST(3), ST(0)
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]

; 264  :             ugrad[0][1] += (u[0][0]+u[2][0])/2;

	mov	edx, DWORD PTR [esi+8]
	fld	QWORD PTR [edx]
	mov	ecx, DWORD PTR [esi]
	fadd	QWORD PTR [ecx]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]

; 265  :             ugrad[1][0] += (u[2][1]-u[1][1])/2;

	mov	edx, DWORD PTR [esi+8]
	fld	QWORD PTR [edx+8]
	mov	ecx, DWORD PTR [esi+4]
	fsub	QWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edi+4]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]

; 266  :             ugrad[1][1] -= (u[2][0]+u[1][0])/2;

	mov	edx, DWORD PTR [esi+8]
	fld	QWORD PTR [edx]
	mov	ecx, DWORD PTR [esi+4]
	fadd	QWORD PTR [ecx]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]

; 267  :             ugrad[2][0] += (u[0][1]-u[1][1])/2;

	mov	edx, DWORD PTR [esi]
	fld	QWORD PTR [edx+8]
	mov	ecx, DWORD PTR [esi+4]
	fsub	QWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edi+8]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]

; 268  :             ugrad[2][1] += (u[1][0]-u[0][0])/2;

	mov	edx, DWORD PTR [esi+4]
	fld	QWORD PTR [edx]
	mov	ecx, DWORD PTR [esi]
	fsub	QWORD PTR [ecx]

; 269  :             switch ( WR(f_info->wraps[1],0) )

	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]
	mov	eax, DWORD PTR [edx+820]
	and	eax, 31					; 0000001fH
	dec	eax
	je	SHORT $LN9@q_facet_to@8
	sub	eax, 30					; 0000001eH
	jne	SHORT $LN71@q_facet_to@8

; 271  :               case NEGWRAP: vol -= u[1][1]; ugrad[1][1] -= 1.0; break;

	mov	eax, DWORD PTR [esi+4]
	fsub	QWORD PTR [eax+8]
	mov	eax, DWORD PTR [edi+4]
	fld	QWORD PTR [eax+8]
	fsub	QWORD PTR __real@3ff0000000000000
	fstp	QWORD PTR [eax+8]
	jmp	SHORT $LN71@q_facet_to@8
$LN9@q_facet_to@8:

; 270  :             { case POSWRAP: vol += u[1][1]; ugrad[1][1] += 1.0; break;

	mov	ecx, DWORD PTR [esi+4]
	fadd	QWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edi+4]
	fld	QWORD PTR [eax+8]
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	QWORD PTR [eax+8]
	jmp	SHORT $LN71@q_facet_to@8
$LN132@q_facet_to@8:

; 236  :             }
; 237  :             switch ( WR(f_info->wraps[2],0) )

	fstp	ST(0)
$LN71@q_facet_to@8:

; 275  :      }
; 276  :      vol *= web.torusv;

	fmul	QWORD PTR _web+1600

; 277  :      for ( i = 0 ; i < FACET_VERTS ; i++ )

	mov	edx, DWORD PTR _web+616
	xor	esi, esi
	fstp	QWORD PTR _vol$[ebp]
$LL6@q_facet_to@8:

; 278  :         for ( j = 0 ; j < SDIM ; j++ ) 

	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN5@q_facet_to@8

; 277  :      for ( i = 0 ; i < FACET_VERTS ; i++ )

	mov	eax, DWORD PTR [edi+esi*4]
	npad	4
$LL65@q_facet_to@8:

; 279  :           ugrad[i][j] *= web.torusv;

	fld	QWORD PTR _web+1600
	inc	ecx
	fmul	QWORD PTR [eax]
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	mov	edx, DWORD PTR _web+616
	cmp	ecx, edx
	jl	SHORT $LL65@q_facet_to@8
$LN5@q_facet_to@8:

; 277  :      for ( i = 0 ; i < FACET_VERTS ; i++ )

	inc	esi
	cmp	esi, 3
	jl	SHORT $LL6@q_facet_to@8

; 280  :      mat_mult(ugrad,dx,f_info->grad,FACET_VERTS,SDIM,SDIM);

	mov	ecx, DWORD PTR _dx$[ebp]
	push	edx
	push	edx
	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [edx+1336]
	push	3
	push	eax
	push	ecx
	push	edi
	call	_mat_mult

; 281  :      return vol;

	fld	QWORD PTR _vol$[ebp]

; 282  : } // end q_facet_torus_volume_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 24					; 00000018H
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_q_facet_torus_volume_grad ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@BMCIJOCI@Need?5torus?5model?5to?5do?5facet_tor@ ; `string'
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_q_facet_torus_volume_hess
;	COMDAT ??_C@_0CM@BMCIJOCI@Need?5torus?5model?5to?5do?5facet_tor@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0CM@BMCIJOCI@Need?5torus?5model?5to?5do?5facet_tor@ DB 'Need torus '
	DB	'model to do facet_torus_volume.', 0aH, 00H	; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\torvol.c
CONST	ENDS
;	COMDAT _q_facet_torus_volume_hess
_TEXT	SEGMENT
_hqXvS$ = -3540						; size = 264
_temphqXvS$ = -3276					; size = 24
_uqXvS$ = -3252						; size = 12
_ugradqXvS$ = -3240					; size = 12
_vol$ = -3228						; size = 8
_temph$ = -3220						; size = 4
tv3671 = -3216						; size = 4
tv2114 = -3216						; size = 4
_dx$ = -3212						; size = 4
tv3718 = -3208						; size = 4
tv3609 = -3208						; size = 4
tv3574 = -3208						; size = 4
tv2798 = -3208						; size = 4
_f_info$GSCopy$ = -3204					; size = 4
tv3666 = -3200						; size = 4
tv2789 = -3200						; size = 4
tv2470 = -3200						; size = 4
tv2439 = -3200						; size = 4
tv2408 = -3200						; size = 4
$T91920 = -3200						; size = 4
tv2128 = -3196						; size = 4
tv1196 = -3196						; size = 4
_i$ = -3196						; size = 4
tv3661 = -3192						; size = 4
tv2098 = -3192						; size = 4
_fe$ = -3192						; size = 4
_jj$ = -3192						; size = 4
tv3644 = -3188						; size = 4
tv3547 = -3188						; size = 4
tv3373 = -3188						; size = 4
tv2276 = -3188						; size = 4
tv2105 = -3188						; size = 4
_j$ = -3188						; size = 4
_hxJ$ = -3184						; size = 2592
_temphxJ$ = -592					; size = 288
_uxJ$ = -304						; size = 144
_ugradxJ$ = -160					; size = 144
_w$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_q_facet_torus_volume_hess PROC				; COMDAT

; 292  : { REAL **x;

	push	ebp
	mov	ebp, esp
	sub	esp, 3540				; 00000dd4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _f_info$[ebp]

; 293  :   REAL zsum,ssum;
; 294  :   int i,j,ii,jj;
; 295  :   REAL **dx = web.inverse_periods;

	mov	ecx, DWORD PTR _web+1612
	push	ebx
	push	esi
	push	edi

; 296  :   WRAPTYPE w[FACET_EDGES];
; 297  :   unsigned long allwrap;
; 298  :   MAT2D(u,FACET_VERTS,MAXCOORD); /* affine coordinates of vertices */

	push	6
	push	3
	lea	edx, DWORD PTR _uxJ$[ebp]
	mov	DWORD PTR _f_info$GSCopy$[ebp], eax
	push	edx
	lea	eax, DWORD PTR _uqXvS$[ebp]
	push	eax
	mov	DWORD PTR _dx$[ebp], ecx
	call	_mat2d_setup

; 299  :   facetedge_id fe;
; 300  :   MAT2D(ugrad,FACET_VERTS,MAXCOORD);

	push	6
	push	3
	lea	ecx, DWORD PTR _ugradxJ$[ebp]
	push	ecx
	lea	edx, DWORD PTR _ugradqXvS$[ebp]
	push	edx
	mov	esi, eax
	call	_mat2d_setup

; 301  :   MAT4D(h,FACET_VERTS,FACET_VERTS,MAXCOORD,MAXCOORD);

	push	6
	push	6
	push	3
	mov	ebx, eax
	push	3
	lea	eax, DWORD PTR _hxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _hqXvS$[ebp]
	push	ecx
	call	_mat4d_setup

; 302  :   MAT2D(temph,MAXCOORD,MAXCOORD);

	push	6
	push	6
	lea	edx, DWORD PTR _temphxJ$[ebp]
	mov	edi, eax
	push	edx
	lea	eax, DWORD PTR _temphqXvS$[ebp]
	push	eax
	call	_mat2d_setup
	add	esp, 72					; 00000048H

; 303  :   REAL vol;
; 304  :   
; 305  :   if ( !dx ) 

	cmp	DWORD PTR _dx$[ebp], 0
	mov	DWORD PTR _temph$[ebp], eax
	jne	SHORT $LN69@q_facet_to@9

; 306  :      kb_error(2194,"Need torus model to do facet_torus_volume.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CM@BMCIJOCI@Need?5torus?5model?5to?5do?5facet_tor@
	push	2194					; 00000892H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN69@q_facet_to@9:

; 307  :   if ( web.modeltype == QUADRATIC ) return q_facet_torus_volume_q_hess(f_info);

	mov	eax, DWORD PTR _web+628
	cmp	eax, 2
	jne	SHORT $LN68@q_facet_to@9
	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	push	ecx
	call	_q_facet_torus_volume_q_hess
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 477  :         }
; 478  :   return vol;
; 479  : } // end q_facet_torus_volume_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN68@q_facet_to@9:

; 308  :   if ( web.modeltype == LAGRANGE ) return q_facet_torus_volume_lagr_hess(f_info);

	cmp	eax, 3
	jne	SHORT $LN67@q_facet_to@9
	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	push	edx
	call	_q_facet_torus_volume_lagr_hess
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 477  :         }
; 478  :   return vol;
; 479  : } // end q_facet_torus_volume_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN67@q_facet_to@9:

; 309  : 
; 310  :   x = f_info->x;
; 311  : 
; 312  :   /* get affine coordinates of vertices */
; 313  :   mat_mul_tr(x,dx,u,FACET_VERTS,SDIM,SDIM);

	mov	eax, DWORD PTR _web+616
	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	push	eax
	push	eax
	mov	eax, DWORD PTR _dx$[ebp]
	push	3
	push	esi
	push	eax
	add	ecx, 416				; 000001a0H
	push	ecx
	call	_mat_mul_tr

; 314  :   /* main integral over facet */
; 315  :   zsum = (u[0][2]+u[1][2]+u[2][2])/6;

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [esi+4]
	fld	QWORD PTR [eax+16]
	fadd	QWORD PTR [ecx+16]
	mov	edx, DWORD PTR [esi+8]
	add	esp, 24					; 00000018H

; 316  :   ssum = (u[1][0]-u[0][0])*(u[2][1]-u[0][1]) 
; 317  :                         - (u[1][1]-u[0][1])*(u[2][0]-u[0][0]);
; 318  :   vol = zsum*ssum;
; 319  :   ugrad[0][0] = zsum*(u[1][1]-u[2][1]);
; 320  :   ugrad[0][1] = zsum*(u[2][0]-u[1][0]);
; 321  :   ugrad[0][2] = ssum/6;
; 322  :   ugrad[1][0] = zsum*(u[2][1]-u[0][1]);
; 323  :   ugrad[1][1] = zsum*(u[0][0]-u[2][0]);
; 324  :   ugrad[1][2] = ssum/6;
; 325  :   ugrad[2][0] = zsum*(u[0][1]-u[1][1]);
; 326  :   ugrad[2][1] = zsum*(u[1][0]-u[0][0]);
; 327  :   ugrad[2][2] = ssum/6;
; 328  : 
; 329  :   for ( i = 0 ; i < FACET_VERTS ; i++ )

	mov	DWORD PTR _i$[ebp], 0
	fadd	QWORD PTR [edx+16]
	fld	QWORD PTR __real@4018000000000000
	fdiv	ST(1), ST(0)
	fld	QWORD PTR [edx+8]
	fsub	QWORD PTR [eax+8]
	fld	QWORD PTR [ecx]
	fsub	QWORD PTR [eax]
	fmulp	ST(1), ST(0)
	fld	QWORD PTR [ecx+8]
	fsub	QWORD PTR [eax+8]
	fld	QWORD PTR [edx]
	fsub	QWORD PTR [eax]
	mov	eax, DWORD PTR [ebx]
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fld	ST(0)
	fmul	ST(0), ST(3)
	fst	QWORD PTR _vol$[ebp]
	fld	QWORD PTR [ecx+8]
	fsub	QWORD PTR [edx+8]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR [eax]
	mov	edx, DWORD PTR [esi+8]
	fld	QWORD PTR [edx]
	mov	ecx, DWORD PTR [esi+4]
	fsub	QWORD PTR [ecx]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR [eax+8]
	fxch	ST(1)
	fdiv	ST(0), ST(2)
	fst	QWORD PTR [eax+16]
	mov	edx, DWORD PTR [esi+8]
	fld	QWORD PTR [edx+8]
	mov	ecx, DWORD PTR [esi]
	fsub	QWORD PTR [ecx+8]
	mov	eax, DWORD PTR [ebx+4]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR [eax]
	mov	edx, DWORD PTR [esi]
	fld	QWORD PTR [edx]
	mov	ecx, DWORD PTR [esi+8]
	fsub	QWORD PTR [ecx]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR [eax+8]
	fst	QWORD PTR [eax+16]
	mov	edx, DWORD PTR [esi]
	mov	ecx, DWORD PTR [esi+4]
	fld	QWORD PTR [edx+8]
	fsub	QWORD PTR [ecx+8]
	mov	eax, DWORD PTR [ebx+8]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR [eax]
	mov	edx, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	fld	QWORD PTR [edx]
	fsub	QWORD PTR [ecx]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+16]
	mov	ecx, DWORD PTR _web+616
	fldz
$LN66@q_facet_to@9:

; 330  :      for ( ii = 0 ; ii < FACET_VERTS ; ii++ )

	mov	DWORD PTR tv3373[ebp], 0
$LN119@q_facet_to@9:

; 331  :         for ( j = 0 ; j < SDIM ; j++ ) 

	xor	edx, edx
	test	ecx, ecx
	jle	SHORT $LN62@q_facet_to@9
$LN60@q_facet_to@9:

; 332  :           for ( jj = 0 ; jj < SDIM ; jj++ ) 

	mov	DWORD PTR _jj$[ebp], 0
	test	ecx, ecx
	jle	SHORT $LN59@q_facet_to@9
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR tv3373[ebp]
	mov	ecx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR [ecx+edx*4]
$LN114@q_facet_to@9:
	inc	DWORD PTR _jj$[ebp]

; 333  :               h[i][ii][j][jj] = 0.0;

	fst	QWORD PTR [eax]
	mov	ecx, DWORD PTR _web+616
	add	eax, 8
	cmp	DWORD PTR _jj$[ebp], ecx
	jl	SHORT $LN114@q_facet_to@9
$LN59@q_facet_to@9:

; 331  :         for ( j = 0 ; j < SDIM ; j++ ) 

	inc	edx
	cmp	edx, ecx
	jl	SHORT $LN60@q_facet_to@9
$LN62@q_facet_to@9:

; 330  :      for ( ii = 0 ; ii < FACET_VERTS ; ii++ )

	mov	eax, DWORD PTR tv3373[ebp]
	add	eax, 4
	mov	DWORD PTR tv3373[ebp], eax
	cmp	eax, 12					; 0000000cH
	jl	SHORT $LN119@q_facet_to@9

; 316  :   ssum = (u[1][0]-u[0][0])*(u[2][1]-u[0][1]) 
; 317  :                         - (u[1][1]-u[0][1])*(u[2][0]-u[0][0]);
; 318  :   vol = zsum*ssum;
; 319  :   ugrad[0][0] = zsum*(u[1][1]-u[2][1]);
; 320  :   ugrad[0][1] = zsum*(u[2][0]-u[1][0]);
; 321  :   ugrad[0][2] = ssum/6;
; 322  :   ugrad[1][0] = zsum*(u[2][1]-u[0][1]);
; 323  :   ugrad[1][1] = zsum*(u[0][0]-u[2][0]);
; 324  :   ugrad[1][2] = ssum/6;
; 325  :   ugrad[2][0] = zsum*(u[0][1]-u[1][1]);
; 326  :   ugrad[2][1] = zsum*(u[1][0]-u[0][0]);
; 327  :   ugrad[2][2] = ssum/6;
; 328  : 
; 329  :   for ( i = 0 ; i < FACET_VERTS ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, 3
	jl	SHORT $LN66@q_facet_to@9

; 334  : 
; 335  :   h[1][2][0][1] = h[1][0][1][0] = h[0][2][1][0] =  zsum;

	mov	eax, DWORD PTR [edi]
	fstp	ST(0)
	mov	ecx, DWORD PTR [eax+8]
	fxch	ST(2)
	mov	edx, DWORD PTR [ecx+4]
	fst	QWORD PTR [edx]
	mov	edx, DWORD PTR [edi+4]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR tv2098[ebp], edx
	mov	edx, DWORD PTR [edx+4]
	fst	QWORD PTR [edx]
	mov	edx, DWORD PTR [edi+4]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR tv2105[ebp], edx
	mov	edx, DWORD PTR [edx]
	fst	QWORD PTR [edx+8]

; 336  :   h[2][1][1][0] = h[0][1][0][1] = h[2][0][0][1] =  zsum;

	mov	edx, DWORD PTR [edi+8]
	mov	edx, DWORD PTR [edx]

; 337  :   h[1][0][0][1] = h[0][2][0][1] = h[1][2][1][0] = -zsum;

	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR tv2114[ebp], edx
	mov	edx, DWORD PTR [edx]
	fst	QWORD PTR [edx+8]
	mov	edx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [edx]
	fst	QWORD PTR [edx+8]
	mov	edx, DWORD PTR [edi+8]
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR tv2128[ebp], edx
	mov	edx, DWORD PTR [edx+4]
	fst	QWORD PTR [edx]
	mov	edx, DWORD PTR tv2105[ebp]
	mov	edx, DWORD PTR [edx+4]
	fchs
	fst	QWORD PTR [edx]
	mov	edx, DWORD PTR tv2098[ebp]
	fst	QWORD PTR [ecx+8]
	mov	ecx, DWORD PTR [edx]

; 338  :   h[0][1][1][0] = h[2][0][1][0] = h[2][1][0][1] = -zsum;

	mov	edx, DWORD PTR tv2128[ebp]
	fst	QWORD PTR [ecx+8]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR tv2114[ebp]
	fst	QWORD PTR [ecx+8]
	mov	ecx, DWORD PTR [edx+4]
	fst	QWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR [edi+4]

; 339  : 
; 340  :   for ( i = 0 ; i < 3 ; i++ )

	sub	eax, edx
	mov	DWORD PTR tv3661[ebp], eax
	mov	eax, DWORD PTR [edi+8]
	sub	eax, edx
	mov	ecx, edi
	sub	edx, edi
	mov	DWORD PTR tv3547[ebp], ecx
	mov	DWORD PTR tv3666[ebp], eax
	mov	DWORD PTR tv3671[ebp], edx
	mov	DWORD PTR tv1196[ebp], 3
$LN116@q_facet_to@9:

; 341  :   { h[i][0][2][0] = h[0][i][0][2] = (u[1][1]-u[2][1])/6;

	mov	eax, DWORD PTR [esi+4]
	fld	QWORD PTR [eax+8]
	mov	edx, DWORD PTR [esi+8]
	fsub	QWORD PTR [edx+8]
	mov	eax, DWORD PTR tv3671[ebp]
	mov	edx, DWORD PTR tv3661[ebp]
	add	eax, ecx
	fdiv	ST(0), ST(1)
	mov	edx, DWORD PTR [eax+edx]
	mov	ecx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR tv3574[ebp], ecx
	fst	QWORD PTR [edx+16]
	fstp	QWORD PTR [ecx]

; 342  :      h[i][0][2][1] = h[0][i][1][2] = (u[2][0]-u[1][0])/6;

	mov	edx, DWORD PTR [esi+8]
	fld	QWORD PTR [edx]
	mov	ecx, DWORD PTR [esi+4]
	fsub	QWORD PTR [ecx]
	mov	edx, DWORD PTR tv3661[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	ecx, DWORD PTR [ecx+4]
	fdiv	ST(0), ST(1)
	mov	edx, DWORD PTR tv3574[ebp]
	fst	QWORD PTR [ecx+16]
	fstp	QWORD PTR [edx+8]

; 343  :      h[i][1][2][0] = h[1][i][0][2] = (u[2][1]-u[0][1])/6;

	mov	ecx, DWORD PTR [esi+8]
	fld	QWORD PTR [ecx+8]
	mov	edx, DWORD PTR [esi]
	fsub	QWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR tv3547[ebp]
	fdiv	ST(0), ST(1)
	fst	QWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx+8]
	fstp	QWORD PTR [ecx]

; 344  :      h[i][1][2][1] = h[1][i][1][2] = (u[0][0]-u[2][0])/6;

	mov	edx, DWORD PTR [esi]
	fld	QWORD PTR [edx]
	mov	DWORD PTR tv3609[ebp], ecx
	mov	ecx, DWORD PTR [esi+8]
	fsub	QWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR tv3609[ebp]
	fdiv	ST(0), ST(1)
	fst	QWORD PTR [edx+16]
	fstp	QWORD PTR [ecx+8]

; 345  :      h[i][2][2][0] = h[2][i][0][2] = (u[0][1]-u[1][1])/6;

	mov	edx, DWORD PTR [esi]
	fld	QWORD PTR [edx+8]
	mov	ecx, DWORD PTR [esi+4]
	fsub	QWORD PTR [ecx+8]
	mov	edx, DWORD PTR tv3666[ebp]
	mov	eax, DWORD PTR [eax+edx]
	mov	ecx, DWORD PTR tv3547[ebp]
	fdiv	ST(0), ST(1)
	mov	DWORD PTR tv3718[ebp], eax
	mov	eax, DWORD PTR [eax]
	add	ecx, 4
	dec	DWORD PTR tv1196[ebp]
	fst	QWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx-4]
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [edx+8]
	fstp	QWORD PTR [eax]

; 346  :      h[i][2][2][1] = h[2][i][1][2] = (u[1][0]-u[0][0])/6;

	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR tv3644[ebp], eax
	mov	eax, DWORD PTR [esi+4]
	fld	QWORD PTR [eax]
	mov	eax, DWORD PTR tv3718[ebp]
	fsub	QWORD PTR [edx]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR tv3644[ebp]
	mov	DWORD PTR tv3547[ebp], ecx
	fdiv	ST(0), ST(1)
	fst	QWORD PTR [edx+16]
	fstp	QWORD PTR [eax+8]
	jne	$LN116@q_facet_to@9

; 347  :   }
; 348  :   /* add corrections due to wraps */
; 349  :   fe = get_facet_fe(f_info->id);

	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	fstp	ST(0)
	mov	eax, DWORD PTR [ecx]
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN74@q_facet_to@9
	xor	ecx, ecx
	jmp	SHORT $LN73@q_facet_to@9
$LN74@q_facet_to@9:
	mov	ecx, DWORD PTR _web+236
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [edx+28]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN73@q_facet_to@9
	xor	ecx, 134217728				; 08000000H
$LN73@q_facet_to@9:

; 350  :   for ( i = 0 ; i < FACET_EDGES ; i++, fe = get_next_edge(fe) ) 

	mov	edx, DWORD PTR _web+460
	mov	DWORD PTR _fe$[ebp], ecx
	mov	DWORD PTR _i$[ebp], 0
$LN112@q_facet_to@9:

; 351  :      w[i] = get_fe_wrap(fe);

	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	add	eax, eax
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR tv2276[ebp], eax
	mov	eax, ecx
	mov	ecx, DWORD PTR _web+124
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]
	mov	DWORD PTR $T91920[ebp], eax
	and	eax, 134217727				; 07ffffffH
	test	DWORD PTR $T91920[ebp], 134217728	; 08000000H
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dymem
	mov	ecx, DWORD PTR _web+216
	mov	eax, DWORD PTR [ecx+eax+784]
	mov	eax, DWORD PTR [edx+eax]
	je	SHORT $LN85@q_facet_to@9
	push	eax
	fstp	ST(0)
	call	DWORD PTR _sym_inverse
	fld	QWORD PTR _vol$[ebp]
	add	esp, 4
$LN85@q_facet_to@9:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _web+460
	mov	DWORD PTR _w$[ebp+ecx*4], eax
	inc	ecx
	test	DWORD PTR _fe$[ebp], 134217728		; 08000000H
	mov	DWORD PTR _i$[ebp], ecx
	mov	ecx, DWORD PTR tv2276[ebp]
	mov	eax, DWORD PTR [ecx+edx]
	je	SHORT $LN78@q_facet_to@9

; 350  :   for ( i = 0 ; i < FACET_EDGES ; i++, fe = get_next_edge(fe) ) 

	mov	ecx, DWORD PTR [eax+28]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN206@q_facet_to@9
$LN78@q_facet_to@9:
	mov	ecx, DWORD PTR [eax+32]
$LN206@q_facet_to@9:
	cmp	DWORD PTR _i$[ebp], 3
	mov	DWORD PTR _fe$[ebp], ecx
	jl	$LN112@q_facet_to@9

; 352  : 
; 353  :   allwrap = WR(w[0],2)+(WR(w[1],2)<<TWRAPBITS)+(WR(w[2],2)<<(2*TWRAPBITS));

	mov	eax, DWORD PTR _w$[ebp+8]
	mov	ecx, DWORD PTR _w$[ebp+4]
	mov	edx, DWORD PTR _w$[ebp]
	sar	eax, 12					; 0000000cH
	and	eax, 31					; 0000001fH
	shl	eax, 6
	sar	ecx, 12					; 0000000cH
	and	ecx, 31					; 0000001fH
	add	eax, ecx
	sar	edx, 12					; 0000000cH
	shl	eax, 6
	and	edx, 31					; 0000001fH
	add	eax, edx

; 354  :   switch ( allwrap )

	cmp	eax, 4127				; 0000101fH
	ja	$LN72@q_facet_to@9
	je	$LN43@q_facet_to@9
	test	eax, eax
	je	$LN113@q_facet_to@9
	cmp	eax, 95					; 0000005fH
	je	SHORT $LN33@q_facet_to@9
	cmp	eax, 1985				; 000007c1H
	jne	$LN184@q_facet_to@9

; 355  :       { case 0: break;
; 356  :         case (POSWRAP)+(NEGWRAP << TWRAPBITS): break;

	jmp	$LN113@q_facet_to@9
$LN33@q_facet_to@9:

; 404  :         case  (NEGWRAP) + (POSWRAP << TWRAPBITS):
; 405  :             vol += ((u[1][0]+u[0][0])*(u[1][1]-u[0][1])
; 406  :                       +(u[2][0]+u[1][0])*(u[2][1]-u[1][1]))/2;

	mov	eax, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	fld	QWORD PTR [eax+8]
	fsub	QWORD PTR [edx+8]
	mov	ecx, DWORD PTR [esi+8]
	fld	QWORD PTR [ecx+8]
	fsub	QWORD PTR [eax+8]
	fld	QWORD PTR [eax]
	fadd	QWORD PTR [ecx]
	fmulp	ST(1), ST(0)
	fld	QWORD PTR [edx]
	fadd	QWORD PTR [eax]

; 407  :             ugrad[0][0] += (u[1][1]-u[0][1])/2;

	mov	eax, DWORD PTR [ebx]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	faddp	ST(3), ST(0)
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]

; 408  :             ugrad[0][1] -= (u[1][0]+u[0][0])/2;

	mov	ecx, DWORD PTR [esi]
	fld	QWORD PTR [ecx]
	mov	edx, DWORD PTR [esi+4]
	fadd	QWORD PTR [edx]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]

; 409  :             ugrad[1][0] += (u[2][1]-u[0][1])/2;

	mov	ecx, DWORD PTR [esi+8]
	fld	QWORD PTR [ecx+8]
	mov	edx, DWORD PTR [esi]
	fsub	QWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ebx+4]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]

; 410  :             ugrad[1][1] += (u[0][0]-u[2][0])/2;

	mov	ecx, DWORD PTR [esi]
	fld	QWORD PTR [ecx]
	mov	edx, DWORD PTR [esi+8]
	fsub	QWORD PTR [edx]
	mov	ecx, DWORD PTR [ebx+4]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [ecx+8]
	fstp	QWORD PTR [ecx+8]

; 411  :             ugrad[2][0] += (u[2][1]-u[1][1])/2;

	mov	ecx, DWORD PTR [esi+8]
	fld	QWORD PTR [ecx+8]
	mov	edx, DWORD PTR [esi+4]
	fsub	QWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ebx+8]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]

; 412  :             ugrad[2][1] += (u[2][0]+u[1][0])/2;

	mov	ecx, DWORD PTR [esi+8]
	fld	QWORD PTR [ecx]
	mov	edx, DWORD PTR [esi+4]
	fadd	QWORD PTR [edx]
	mov	ecx, DWORD PTR [ebx+8]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [ecx+8]
	fstp	QWORD PTR [ecx+8]

; 413  :             h[0][1][0][1] += 0.5;

	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR [ecx+4]

; 414  :             h[0][0][0][1] -= 0.5;

	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR tv2408[ebp], edx
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx+8]
	mov	edx, DWORD PTR [ecx]
	fld	QWORD PTR [edx+8]

; 415  :             h[0][1][1][0] -= 0.5;
; 416  :             h[0][0][1][0] -= 0.5;

	mov	ecx, DWORD PTR [ecx+4]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx+8]
	mov	edx, DWORD PTR tv2408[ebp]
	mov	edx, DWORD PTR [edx+4]
	fld	QWORD PTR [edx]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx]
	fld	QWORD PTR [ecx]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [ecx]

; 417  :             h[1][2][0][1] += 0.5;

	mov	ecx, DWORD PTR [edi+4]
	mov	edx, DWORD PTR [ecx+8]

; 418  :             h[1][0][0][1] -= 0.5;

	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR tv2439[ebp], edx
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx+8]
	mov	edx, DWORD PTR [ecx]
	fld	QWORD PTR [edx+8]

; 419  :             h[1][0][1][0] += 0.5;

	mov	ecx, DWORD PTR [ecx+4]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx+8]
	fld	QWORD PTR [ecx]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [ecx]

; 420  :             h[1][2][1][0] -= 0.5;

	mov	ecx, DWORD PTR tv2439[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	fld	QWORD PTR [ecx]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [ecx]

; 421  :             h[2][2][0][1] += 0.5;

	mov	ecx, DWORD PTR [edi+8]
	mov	edx, DWORD PTR [ecx+8]

; 422  :             h[2][1][0][1] -= 0.5;

	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv2470[ebp], edx
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx+8]
	mov	edx, DWORD PTR [ecx]
	fld	QWORD PTR [edx+8]

; 423  :             h[2][2][1][0] += 0.5;
; 424  :             h[2][1][1][0] += 0.5;

	mov	ecx, DWORD PTR [ecx+4]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx+8]
	mov	edx, DWORD PTR tv2470[ebp]
	mov	edx, DWORD PTR [edx+4]
	fld	QWORD PTR [edx]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 425  :             switch ( WR(f_info->wraps[2],0) )

	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+824]
	fld1
	and	ecx, 31					; 0000001fH
	dec	ecx
	je	SHORT $LN30@q_facet_to@9
	sub	ecx, 30					; 0000001eH
	jne	SHORT $LN31@q_facet_to@9

; 427  :               case NEGWRAP: vol += u[2][1]; ugrad[2][1] += 1.0; break;

	mov	ecx, DWORD PTR [esi+8]
	fld	QWORD PTR [ecx+8]
	mov	ecx, DWORD PTR [ebx+8]
	faddp	ST(2), ST(0)
	fld	QWORD PTR [ecx+8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [ecx+8]
	jmp	SHORT $LN31@q_facet_to@9
$LN30@q_facet_to@9:

; 426  :             { case POSWRAP: vol -= u[2][1]; ugrad[2][1] -= 1.0; break;

	mov	ecx, DWORD PTR [esi+8]
	fxch	ST(1)
	fsub	QWORD PTR [ecx+8]
	mov	ecx, DWORD PTR [ebx+8]
	fld	QWORD PTR [ecx+8]
	fsub	ST(0), ST(2)
	fstp	QWORD PTR [ecx+8]
	fxch	ST(1)
$LN31@q_facet_to@9:

; 428  :             }
; 429  :             switch ( WR(f_info->wraps[0],0) )

	mov	edx, DWORD PTR [edx+816]
	and	edx, 31					; 0000001fH
	dec	edx
	je	SHORT $LN26@q_facet_to@9
	sub	edx, 30					; 0000001eH
	jne	$LN195@q_facet_to@9

; 431  :               case NEGWRAP: vol -= u[0][1]; ugrad[0][1] -= 1.0;break;

	mov	edx, DWORD PTR [esi]
	fxch	ST(1)
	fsub	QWORD PTR [edx+8]
	fld	QWORD PTR [eax+8]
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax+8]
	jmp	$LN113@q_facet_to@9
$LN26@q_facet_to@9:

; 430  :             { case POSWRAP: vol += u[0][1]; ugrad[0][1] += 1.0;break;

	mov	ecx, DWORD PTR [esi]
	fld	QWORD PTR [ecx+8]
	faddp	ST(2), ST(0)
	fadd	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]

; 432  :             }
; 433  :             break;

	jmp	$LN113@q_facet_to@9
$LN43@q_facet_to@9:

; 357  :         case (POSWRAP << TWRAPBITS) + (NEGWRAP << (2*TWRAPBITS)): break; 
; 358  :         case (NEGWRAP) + (POSWRAP << (2*TWRAPBITS)):
; 359  :             vol += ((u[1][0]+u[0][0])*(u[1][1]-u[0][1])
; 360  :                       +(u[2][0]+u[1][0])*(u[2][1]-u[1][1])
; 361  :                       +(u[0][0]+u[2][0])*(u[0][1]-u[2][1]))/2;

	mov	ecx, DWORD PTR [esi+4]
	fld	QWORD PTR [ecx]
	mov	edx, DWORD PTR [esi]
	fadd	QWORD PTR [edx]
	mov	eax, DWORD PTR [esi+8]
	fld	QWORD PTR [ecx+8]
	fsub	QWORD PTR [edx+8]
	fmulp	ST(1), ST(0)
	fld	QWORD PTR [eax+8]
	fsub	QWORD PTR [ecx+8]
	fld	QWORD PTR [ecx]
	fadd	QWORD PTR [eax]
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx]
	fadd	QWORD PTR [eax]
	fld	QWORD PTR [edx+8]

; 362  :             ugrad[0][0] += (u[1][1]-u[2][1])/2;

	mov	edx, DWORD PTR [ebx]
	fsub	QWORD PTR [eax+8]
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fld	QWORD PTR [ecx+8]
	fsub	QWORD PTR [eax+8]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]

; 363  :             ugrad[0][1] -= (u[1][0]-u[2][0])/2;

	mov	eax, DWORD PTR [esi+4]
	fld	QWORD PTR [eax]
	mov	ecx, DWORD PTR [esi+8]
	fsub	QWORD PTR [ecx]

; 364  :             ugrad[1][0] += (u[2][1]-u[0][1])/2;

	mov	eax, DWORD PTR [ebx+4]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [edx+8]
	fstp	QWORD PTR [edx+8]
	mov	edx, DWORD PTR [esi+8]
	fld	QWORD PTR [edx+8]
	mov	ecx, DWORD PTR [esi]
	fsub	QWORD PTR [ecx+8]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]

; 365  :             ugrad[1][1] -= (u[2][0]-u[0][0])/2;

	mov	edx, DWORD PTR [esi+8]
	fld	QWORD PTR [edx]
	mov	ecx, DWORD PTR [esi]
	fsub	QWORD PTR [ecx]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]

; 366  :             ugrad[2][0] += (u[0][1]-u[1][1])/2;

	mov	edx, DWORD PTR [esi]
	fld	QWORD PTR [edx+8]
	mov	ecx, DWORD PTR [esi+4]
	fsub	QWORD PTR [ecx+8]
	mov	eax, DWORD PTR [ebx+8]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]

; 367  :             ugrad[2][1] -= (u[0][0]-u[1][0])/2; 

	mov	edx, DWORD PTR [esi]
	fld	QWORD PTR [edx]
	mov	ecx, DWORD PTR [esi+4]
	fsub	QWORD PTR [ecx]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]

; 368  :             h[0][1][0][1] += 0.5;

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	fld	QWORD PTR [edx+8]

; 369  :             h[0][2][0][1] -= 0.5;

	mov	eax, DWORD PTR [eax+8]

; 370  :             h[0][1][1][0] -= 0.5;

	mov	ecx, DWORD PTR [ecx+4]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx+8]
	mov	edx, DWORD PTR [eax]
	fld	QWORD PTR [edx+8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx+8]
	fld	QWORD PTR [ecx]
	fsub	ST(0), ST(1)

; 371  :             h[0][2][1][0] += 0.5;

	mov	eax, DWORD PTR [eax+4]
	fstp	QWORD PTR [ecx]
	fld	QWORD PTR [eax]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax]

; 372  :             h[1][2][0][1] += 0.5;

	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	fld	QWORD PTR [edx+8]

; 373  :             h[1][0][0][1] -= 0.5;

	mov	eax, DWORD PTR [eax]

; 374  :             h[1][2][1][0] -= 0.5;

	mov	ecx, DWORD PTR [ecx+4]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx+8]
	mov	edx, DWORD PTR [eax]
	fld	QWORD PTR [edx+8]

; 375  :             h[1][0][1][0] += 0.5;

	mov	eax, DWORD PTR [eax+4]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx+8]
	fld	QWORD PTR [ecx]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [ecx]
	fld	QWORD PTR [eax]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax]

; 376  :             h[2][0][0][1] += 0.5;

	mov	eax, DWORD PTR [edi+8]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	fld	QWORD PTR [edx+8]

; 377  :             h[2][1][0][1] -= 0.5;

	mov	eax, DWORD PTR [eax+4]

; 378  :             h[2][0][1][0] -= 0.5;

	mov	ecx, DWORD PTR [ecx+4]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx+8]
	mov	edx, DWORD PTR [eax]
	fld	QWORD PTR [edx+8]

; 379  :             h[2][1][1][0] += 0.5;

	mov	eax, DWORD PTR [eax+4]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx+8]
	fld	QWORD PTR [ecx]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [ecx]
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]

; 380  :             break;

	jmp	$LN113@q_facet_to@9
$LN72@q_facet_to@9:

; 354  :   switch ( allwrap )

	sub	eax, 6080				; 000017c0H
	je	$LN24@q_facet_to@9
	sub	eax, 120897				; 0001d841H
	je	SHORT $LN42@q_facet_to@9
	sub	eax, 63					; 0000003fH
	je	$LN113@q_facet_to@9
$LN184@q_facet_to@9:

; 458  :             }
; 459  :             break;
; 460  :          default: kb_error(1330,"Internal error: Bad allwrap in facet_volume.\n",RECOVERABLE);

	push	1
	fstp	ST(0)
	push	OFFSET ??_C@_0CO@CFIBBAKF@Internal?5error?3?5Bad?5allwrap?5in?5f@
	push	1330					; 00000532H
	call	_kb_error
	fld	QWORD PTR _vol$[ebp]
	add	esp, 12					; 0000000cH
	jmp	$LN113@q_facet_to@9
$LN42@q_facet_to@9:

; 381  :         case (POSWRAP ) + (NEGWRAP << (2*TWRAPBITS)):
; 382  :             vol += (u[1][0]+u[2][0])*(u[1][1]-u[2][1])/2;

	mov	eax, DWORD PTR [esi+4]
	fld	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR [esi+8]
	fsub	QWORD PTR [ecx+8]
	fld	QWORD PTR [ecx]
	fadd	QWORD PTR [eax]

; 383  :             ugrad[1][0] += (u[1][1]-u[2][1])/2;

	mov	eax, DWORD PTR [ebx+4]
	fmul	ST(0), ST(1)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	faddp	ST(3), ST(0)
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]

; 384  :             ugrad[2][0] += (u[1][1]-u[2][1])/2;

	mov	edx, DWORD PTR [esi+4]
	fld	QWORD PTR [edx+8]
	mov	ecx, DWORD PTR [esi+8]
	fsub	QWORD PTR [ecx+8]
	mov	ecx, DWORD PTR [ebx+8]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]

; 385  :             ugrad[1][1] += (u[1][0]+u[2][0])/2;

	mov	edx, DWORD PTR [esi+8]
	fld	QWORD PTR [edx]
	mov	ecx, DWORD PTR [esi+4]
	fadd	QWORD PTR [ecx]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]

; 386  :             ugrad[2][1] -= (u[1][0]+u[2][0])/2;

	mov	edx, DWORD PTR [esi+8]
	fld	QWORD PTR [edx]
	mov	eax, DWORD PTR [esi+4]
	fadd	QWORD PTR [eax]
	mov	eax, DWORD PTR [ebx+8]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]

; 387  :             h[1][1][0][1] += 0.5;

	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	fld	QWORD PTR [edx+8]

; 388  :             h[1][2][0][1] -= 0.5;

	mov	eax, DWORD PTR [eax+8]
	fadd	ST(0), ST(1)

; 389  :             h[2][1][0][1] += 0.5;
; 390  :             h[2][2][0][1] -= 0.5;
; 391  :             h[1][1][1][0] += 0.5;

	mov	ecx, DWORD PTR [ecx+4]
	fstp	QWORD PTR [edx+8]
	mov	edx, DWORD PTR [eax]
	fld	QWORD PTR [edx+8]

; 392  :             h[1][2][1][0] += 0.5;

	mov	eax, DWORD PTR [eax+4]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx+8]
	mov	edx, DWORD PTR [edi+8]
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR tv2789[ebp], edx
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx+8]
	mov	edx, DWORD PTR [edi+8]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR tv2798[ebp], edx
	mov	edx, DWORD PTR [edx]
	fld	QWORD PTR [edx+8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx+8]

; 393  :             h[2][1][1][0] -= 0.5;
; 394  :             h[2][2][1][0] -= 0.5;

	mov	edx, DWORD PTR tv2798[ebp]
	fld	QWORD PTR [ecx]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv2789[ebp]
	fld	QWORD PTR [eax]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR [ecx+4]
	fld	QWORD PTR [eax]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR [edx+4]
	fsubr	QWORD PTR [eax]
	fstp	QWORD PTR [eax]

; 395  :             switch ( WR(f_info->wraps[1],0) )

	mov	ecx, DWORD PTR _f_info$GSCopy$[ebp]
	fld1
	mov	eax, DWORD PTR [ecx+820]
	and	eax, 31					; 0000001fH
	dec	eax
	je	SHORT $LN39@q_facet_to@9
	sub	eax, 30					; 0000001eH
	jne	SHORT $LN40@q_facet_to@9

; 397  :               case NEGWRAP: vol += u[1][1]; ugrad[1][1] += 1.0; break;

	mov	eax, DWORD PTR [esi+4]
	fld	QWORD PTR [eax+8]
	mov	eax, DWORD PTR [ebx+4]
	faddp	ST(2), ST(0)
	fld	QWORD PTR [eax+8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax+8]
	jmp	SHORT $LN40@q_facet_to@9
$LN39@q_facet_to@9:

; 396  :             { case POSWRAP: vol -= u[1][1]; ugrad[1][1] -= 1.0; break;

	mov	edx, DWORD PTR [esi+4]
	fxch	ST(1)
	fsub	QWORD PTR [edx+8]
	mov	eax, DWORD PTR [ebx+4]
	fld	QWORD PTR [eax+8]
	fsub	ST(0), ST(2)
	fstp	QWORD PTR [eax+8]
	fxch	ST(1)
$LN40@q_facet_to@9:

; 398  :             }
; 399  :             switch ( WR(f_info->wraps[2],0) )

	mov	ecx, DWORD PTR [ecx+824]
	and	ecx, 31					; 0000001fH
	dec	ecx
	je	SHORT $LN35@q_facet_to@9
	sub	ecx, 30					; 0000001eH
	jne	$LN195@q_facet_to@9

; 401  :               case NEGWRAP: vol -= u[2][1]; ugrad[2][1] -= 1.0; break;

	mov	eax, DWORD PTR [esi+8]
	fxch	ST(1)
	fsub	QWORD PTR [eax+8]
	mov	eax, DWORD PTR [ebx+8]
	fld	QWORD PTR [eax+8]
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [eax+8]
	jmp	$LN113@q_facet_to@9
$LN35@q_facet_to@9:

; 400  :             { case POSWRAP: vol += u[2][1]; ugrad[2][1] += 1.0; break;

	mov	ecx, DWORD PTR [esi+8]
	fld	QWORD PTR [ecx+8]
	mov	eax, DWORD PTR [ebx+8]
	faddp	ST(2), ST(0)
	fadd	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]

; 402  :             }
; 403  :             break;

	jmp	$LN113@q_facet_to@9
$LN24@q_facet_to@9:

; 434  :         case (NEGWRAP << TWRAPBITS) + (POSWRAP << (2*TWRAPBITS)):
; 435  :             vol += ((u[2][0]+u[1][0])*(u[2][1]-u[1][1])
; 436  :                       +(u[0][0]+u[2][0])*(u[0][1]-u[2][1]))/2;

	mov	eax, DWORD PTR [esi+8]
	mov	edx, DWORD PTR [esi]
	fld	QWORD PTR [edx+8]
	mov	ecx, DWORD PTR [esi+4]
	fsub	QWORD PTR [eax+8]
	fld	QWORD PTR [eax+8]
	fsub	QWORD PTR [ecx+8]
	fld	QWORD PTR [ecx]
	fadd	QWORD PTR [eax]
	fmulp	ST(1), ST(0)
	fld	QWORD PTR [edx]
	fadd	QWORD PTR [eax]

; 437  :             ugrad[0][0] += (u[0][1]-u[2][1])/2;

	mov	eax, DWORD PTR [ebx]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	faddp	ST(3), ST(0)
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]

; 438  :             ugrad[0][1] += (u[0][0]+u[2][0])/2;

	mov	edx, DWORD PTR [esi]
	fld	QWORD PTR [edx]
	mov	ecx, DWORD PTR [esi+8]
	fadd	QWORD PTR [ecx]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]

; 439  :             ugrad[1][0] += (u[2][1]-u[1][1])/2;

	mov	edx, DWORD PTR [esi+8]
	fld	QWORD PTR [edx+8]
	mov	ecx, DWORD PTR [esi+4]
	fsub	QWORD PTR [ecx+8]
	mov	eax, DWORD PTR [ebx+4]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]

; 440  :             ugrad[1][1] -= (u[2][0]+u[1][0])/2;

	mov	edx, DWORD PTR [esi+8]
	fld	QWORD PTR [edx]
	mov	ecx, DWORD PTR [esi+4]
	fadd	QWORD PTR [ecx]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]

; 441  :             ugrad[2][0] += (u[0][1]-u[1][1])/2;

	mov	edx, DWORD PTR [esi]
	fld	QWORD PTR [edx+8]
	mov	ecx, DWORD PTR [esi+4]
	fsub	QWORD PTR [ecx+8]
	mov	eax, DWORD PTR [ebx+8]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]

; 442  :             ugrad[2][1] += (u[1][0]-u[0][0])/2;

	mov	edx, DWORD PTR [esi+4]
	fld	QWORD PTR [edx]
	mov	ecx, DWORD PTR [esi]
	fsub	QWORD PTR [ecx]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]

; 443  :             h[0][0][0][1] += 0.5;

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	fld	QWORD PTR [edx+8]

; 444  :             h[0][2][0][1] -= 0.5;

	mov	eax, DWORD PTR [eax+8]

; 445  :             h[0][0][1][0] += 0.5;

	mov	ecx, DWORD PTR [ecx+4]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx+8]
	mov	edx, DWORD PTR [eax]
	fld	QWORD PTR [edx+8]

; 446  :             h[0][2][1][0] += 0.5;

	mov	eax, DWORD PTR [eax+4]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx+8]
	fld	QWORD PTR [ecx]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [ecx]
	fld	QWORD PTR [eax]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax]

; 447  :             h[1][2][0][1] += 0.5;

	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	fld	QWORD PTR [edx+8]

; 448  :             h[1][1][0][1] -= 0.5;

	mov	eax, DWORD PTR [eax+4]

; 449  :             h[1][2][1][0] -= 0.5;

	mov	ecx, DWORD PTR [ecx+4]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx+8]
	mov	edx, DWORD PTR [eax]
	fld	QWORD PTR [edx+8]

; 450  :             h[1][1][1][0] -= 0.5;

	mov	eax, DWORD PTR [eax+4]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx+8]
	fld	QWORD PTR [ecx]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [ecx]
	fld	QWORD PTR [eax]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [eax]

; 451  :             h[2][0][0][1] += 0.5;

	mov	eax, DWORD PTR [edi+8]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	fld	QWORD PTR [edx+8]

; 452  :             h[2][1][0][1] -= 0.5;

	mov	eax, DWORD PTR [eax+4]

; 453  :             h[2][1][1][0] += 0.5;
; 454  :             h[2][0][1][0] -= 0.5;

	mov	ecx, DWORD PTR [ecx+4]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx+8]
	mov	edx, DWORD PTR [eax]
	fld	QWORD PTR [edx+8]
	mov	eax, DWORD PTR [eax+4]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx+8]

; 455  :             switch ( WR(f_info->wraps[1],0) )

	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	fld	QWORD PTR [eax]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax]
	fsubr	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+820]
	and	eax, 31					; 0000001fH
	dec	eax
	je	SHORT $LN21@q_facet_to@9
	sub	eax, 30					; 0000001eH
	jne	SHORT $LN113@q_facet_to@9

; 457  :               case NEGWRAP: vol -= u[1][1]; ugrad[1][1] -= 1.0; break;

	mov	eax, DWORD PTR [esi+4]
	fsub	QWORD PTR [eax+8]
	mov	eax, DWORD PTR [ebx+4]
	fld	QWORD PTR [eax+8]
	fsub	QWORD PTR __real@3ff0000000000000
	fstp	QWORD PTR [eax+8]
	jmp	SHORT $LN113@q_facet_to@9
$LN21@q_facet_to@9:

; 456  :             { case POSWRAP: vol += u[1][1]; ugrad[1][1] += 1.0; break;

	mov	ecx, DWORD PTR [esi+4]
	fadd	QWORD PTR [ecx+8]
	mov	eax, DWORD PTR [ebx+4]
	fld	QWORD PTR [eax+8]
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	QWORD PTR [eax+8]
	jmp	SHORT $LN113@q_facet_to@9
$LN195@q_facet_to@9:

; 398  :             }
; 399  :             switch ( WR(f_info->wraps[2],0) )

	fstp	ST(0)
$LN113@q_facet_to@9:

; 461  : 
; 462  :      }
; 463  :   vol *= web.torusv;

	fmul	QWORD PTR _web+1600

; 464  :   for ( i = 0 ; i < FACET_VERTS ; i++ )

	mov	edx, DWORD PTR _web+616
	xor	esi, esi
	fstp	QWORD PTR _vol$[ebp]
	npad	6
$LL18@q_facet_to@9:

; 465  :      for ( j = 0 ; j < SDIM ; j++ ) 

	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN17@q_facet_to@9

; 464  :   for ( i = 0 ; i < FACET_VERTS ; i++ )

	mov	eax, DWORD PTR [ebx+esi*4]
	npad	7
$LL111@q_facet_to@9:

; 466  :        ugrad[i][j] *= web.torusv;

	fld	QWORD PTR _web+1600
	inc	ecx
	fmul	QWORD PTR [eax]
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	mov	edx, DWORD PTR _web+616
	cmp	ecx, edx
	jl	SHORT $LL111@q_facet_to@9
$LN17@q_facet_to@9:

; 464  :   for ( i = 0 ; i < FACET_VERTS ; i++ )

	inc	esi
	cmp	esi, 3
	jl	SHORT $LL18@q_facet_to@9

; 467  :   mat_mult(ugrad,dx,f_info->grad,FACET_VERTS,SDIM,SDIM);

	mov	ecx, DWORD PTR _dx$[ebp]
	push	edx
	push	edx
	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	eax, DWORD PTR [edx+1336]
	push	3
	push	eax
	push	ecx
	push	ebx
	call	_mat_mult
	add	esp, 24					; 00000018H
	xor	esi, esi
$LL12@q_facet_to@9:

; 469  :      for ( ii = 0 ; ii < FACET_VERTS ; ii++ )

	xor	ebx, ebx
	npad	12
$LL117@q_facet_to@9:

; 470  :         { for ( j = 0 ; j < SDIM ; j++ ) 

	mov	ecx, DWORD PTR _web+616
	mov	DWORD PTR _j$[ebp], 0
	test	ecx, ecx
	jle	SHORT $LN4@q_facet_to@9
$LL6@q_facet_to@9:

; 471  :              for ( jj = 0 ; jj < SDIM ; jj++ ) 

	xor	edx, edx
	test	ecx, ecx
	jle	SHORT $LN5@q_facet_to@9
	mov	eax, DWORD PTR [esi+edi]
	mov	ecx, DWORD PTR [ebx+eax]
	mov	eax, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	npad	7
$LL3@q_facet_to@9:

; 472  :              {
; 473  :                h[i][ii][j][jj] *= web.torusv;

	fld	QWORD PTR [eax]
	inc	edx
	fmul	QWORD PTR _web+1600
	add	eax, 8
	fstp	QWORD PTR [eax-8]
	mov	ecx, DWORD PTR _web+616
	cmp	edx, ecx
	jl	SHORT $LL3@q_facet_to@9
$LN5@q_facet_to@9:

; 470  :         { for ( j = 0 ; j < SDIM ; j++ ) 

	mov	eax, DWORD PTR _j$[ebp]
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, ecx
	jl	SHORT $LL6@q_facet_to@9
$LN4@q_facet_to@9:

; 474  :               }
; 475  :           mat_mult(h[i][ii],dx,temph,SDIM,SDIM,SDIM);

	mov	edx, DWORD PTR _dx$[ebp]
	mov	eax, DWORD PTR [esi+edi]
	push	ecx
	push	ecx
	push	ecx
	mov	ecx, DWORD PTR _temph$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [ebx+eax]
	push	edx
	push	ecx
	call	_mat_mult

; 476  :           tr_mat_mul(dx,temph,f_info->hess[i][ii],SDIM,SDIM,SDIM);

	mov	eax, DWORD PTR _web+616
	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	push	eax
	push	eax
	push	eax
	mov	eax, DWORD PTR [edx+1340]
	mov	ecx, DWORD PTR [esi+eax]
	mov	edx, DWORD PTR [ecx+ebx]
	mov	eax, DWORD PTR _temph$[ebp]
	mov	ecx, DWORD PTR _dx$[ebp]
	push	edx
	push	eax
	push	ecx
	call	_tr_mat_mul
	add	ebx, 4
	add	esp, 48					; 00000030H
	cmp	ebx, 12					; 0000000cH
	jl	$LL117@q_facet_to@9

; 468  :   for ( i = 0 ; i < FACET_VERTS ; i++ )

	add	esi, 4
	cmp	esi, 12					; 0000000cH
	jl	$LL12@q_facet_to@9

; 477  :         }
; 478  :   return vol;
; 479  : } // end q_facet_torus_volume_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	QWORD PTR _vol$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_q_facet_torus_volume_hess ENDP
_TEXT	ENDS
PUBLIC	_torvol
EXTRN	_add_body_volume:PROC
EXTRN	_q_facet_setup:PROC
EXTRN	_set_body_volume:PROC
EXTRN	_q_info_init:PROC
EXTRN	_win_get_thread_data:PROC
EXTRN	_thread_data_key:DWORD
; Function compile flags: /Ogtp
;	COMDAT _torvol
_TEXT	SEGMENT
_f_info$ = -20						; size = 4
_t$89066 = -16						; size = 8
_f_id$ = -12						; size = 4
tv483 = -8						; size = 8
_b0_id$ = -4						; size = 4
_torvol	PROC						; COMDAT

; 20   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 21   :   facet_id f_id;    /* main facet iterator */
; 22   :   body_id b_id;
; 23   :   body_id b0_id,b1_id;    /* facet adjacent bodies */
; 24   :   struct qinfo *f_info = &(GET_THREAD_DATA->q_info); /* for calling q_facet_torus_volume */

	mov	eax, DWORD PTR _thread_data_key
	push	eax
	call	_win_get_thread_data
	add	eax, 56					; 00000038H
	add	esp, 4

; 25   : 
; 26   :   if ( f_info->xx == NULL )

	cmp	DWORD PTR [eax+1216], 0
	mov	DWORD PTR _f_info$[ebp], eax
	jne	SHORT $LN21@torvol

; 27   :     q_info_init(f_info,METHOD_GRADIENT);

	push	4321					; 000010e1H
	push	eax
	call	_q_info_init
	add	esp, 8
$LN21@torvol:

; 28   : 
; 29   :   /* adjust body volumes to the invariant constant for each */
; 30   :   FOR_ALL_BODIES(b_id)

	mov	edx, DWORD PTR _web+384
	fldz
	push	ebx
	mov	ecx, edx
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	push	esi
	push	edi
	je	SHORT $LN18@torvol
$LN50@torvol:
	mov	eax, DWORD PTR _web+348
	mov	esi, edx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	edi, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [edi+8]
	and	eax, 1
	xor	ebx, ebx
	or	eax, ebx
	je	SHORT $LN19@torvol

; 31   :     set_body_volume(b_id,get_body_volconst(b_id),NOSETSTAMP);

	test	ecx, ecx
	je	SHORT $LN27@torvol
	fstp	ST(0)
	fld	QWORD PTR [edi+328]
$LN27@torvol:
	push	0
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	edx
	call	_set_body_volume
	fldz
	add	esp, 16					; 00000010H
$LN19@torvol:

; 28   : 
; 29   :   /* adjust body volumes to the invariant constant for each */
; 30   :   FOR_ALL_BODIES(b_id)

	mov	ecx, DWORD PTR _web+348
	mov	edx, DWORD PTR [esi+ecx]
	mov	edx, DWORD PTR [edx]
	mov	ecx, edx
	shr	ecx, 28					; 0000001cH
	and	ecx, 1
	jne	SHORT $LN50@torvol
$LN18@torvol:

; 32   :   if ( web.representation == STRING )

	cmp	DWORD PTR _web+624, 1
	jne	SHORT $LN70@torvol

; 33   :   { FOR_ALL_FACETS(f_id)

	mov	eax, DWORD PTR _web+272
	test	eax, 268435456				; 10000000H
	je	SHORT $LN70@torvol
$LN14@torvol:
	and	eax, 134217727				; 07ffffffH
	add	eax, eax
	lea	ecx, DWORD PTR [eax+eax]
	mov	eax, DWORD PTR _web+236
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	xor	esi, esi
	or	eax, esi
	je	SHORT $LN13@torvol

; 34   :       set_facet_area(f_id,0.0);

	fst	QWORD PTR [edx+40]
$LN13@torvol:

; 33   :   { FOR_ALL_FACETS(f_id)

	mov	edx, DWORD PTR _web+236
	mov	eax, DWORD PTR [ecx+edx]
	mov	eax, DWORD PTR [eax]
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN14@torvol
$LN70@torvol:

; 35   :   }
; 36   : 
; 37   :   FOR_ALL_FACETS(f_id)

	mov	edi, DWORD PTR _web+272
	fstp	ST(0)
	mov	esi, edi
	shr	esi, 28					; 0000001cH
	and	esi, 1
	mov	DWORD PTR _f_id$[ebp], edi
	je	$LN7@torvol
	npad	5
$LL52@torvol:
	mov	ecx, DWORD PTR _web+236
	and	edi, 134217727				; 07ffffffH
	add	edi, edi
	add	edi, edi
	mov	edx, DWORD PTR [edi+ecx]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR tv483[ebp+4], eax
	mov	eax, ecx
	and	eax, 1
	xor	ebx, ebx
	or	eax, ebx
	je	$LN8@torvol

; 38   :   {
; 39   :     REAL t;     /* accumulator for this facet */
; 40   : 
; 41   :     if ( get_fattr(f_id) & NONCONTENT ) continue;

	and	ecx, 536870912				; 20000000H
	xor	eax, eax
	or	ecx, eax
	jne	$LN8@torvol

; 42   : 
; 43   :     /* find adjacent bodies */
; 44   :     b0_id = get_facet_body(f_id);

	mov	ecx, DWORD PTR _web+400
	cmp	ecx, ebx
	jne	SHORT $LN31@torvol
	mov	DWORD PTR _b0_id$[ebp], ebx
	jmp	SHORT $LN28@torvol
$LN31@torvol:
	cmp	esi, ebx
	jne	SHORT $LN30@torvol
	mov	DWORD PTR _b0_id$[ebp], ebx
	jmp	SHORT $LN28@torvol
$LN30@torvol:
	test	DWORD PTR _f_id$[ebp], 134217728	; 08000000H
	mov	eax, DWORD PTR _dymem
	mov	esi, DWORD PTR _web+328
	mov	eax, DWORD PTR [esi+eax+784]
	je	SHORT $LN29@torvol
	mov	edx, DWORD PTR [eax+edx+4]
	jmp	SHORT $LN77@torvol
$LN29@torvol:
	mov	edx, DWORD PTR [edx+eax]
$LN77@torvol:
	mov	DWORD PTR _b0_id$[ebp], edx
$LN28@torvol:

; 45   :     b1_id = get_facet_body(facet_inverse(f_id));

	mov	eax, DWORD PTR _f_id$[ebp]
	xor	eax, 134217728				; 08000000H
	cmp	ecx, ebx
	jne	SHORT $LN37@torvol
	xor	esi, esi
	jmp	SHORT $LN34@torvol
$LN37@torvol:
	test	eax, 268435456				; 10000000H
	jne	SHORT $LN36@torvol
	xor	esi, esi
	jmp	SHORT $LN34@torvol
$LN36@torvol:
	mov	ecx, DWORD PTR _web+236
	test	eax, 134217728				; 08000000H
	je	SHORT $LN35@torvol
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	esi, DWORD PTR [edx+eax+4]
	jmp	SHORT $LN34@torvol
$LN35@torvol:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	esi, DWORD PTR [edx+eax]
$LN34@torvol:

; 46   :     if ( !valid_id(b0_id) && !valid_id(b1_id) ) continue;

	mov	ebx, DWORD PTR _b0_id$[ebp]
	shr	ebx, 28					; 0000001cH
	and	ebx, 1
	jne	SHORT $LN3@torvol
	test	esi, 268435456				; 10000000H
	je	SHORT $LN8@torvol
$LN3@torvol:

; 47   : 
; 48   :     f_info->id = f_id;

	mov	eax, DWORD PTR _f_info$[ebp]
	mov	ecx, DWORD PTR _f_id$[ebp]

; 49   :     q_facet_setup(NULL,f_info,NEED_SIDE|TORUS_MODULO_MUNGE|ORIENTABLE_METHOD);

	push	327696					; 00050010H
	push	eax
	push	0
	mov	DWORD PTR [eax], ecx
	call	_q_facet_setup

; 50   :     t = q_facet_torus_volume(f_info);

	mov	edx, DWORD PTR _f_info$[ebp]
	push	edx
	call	_q_facet_torus_volume
	fst	QWORD PTR _t$89066[ebp]
	add	esp, 16					; 00000010H

; 51   :     if ( valid_id(b0_id) )

	test	ebx, ebx
	je	SHORT $LN2@torvol

; 52   :         add_body_volume(b0_id,t);

	mov	eax, DWORD PTR _b0_id$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	eax
	call	_add_body_volume
	fld	QWORD PTR _t$89066[ebp]
	add	esp, 12					; 0000000cH
$LN2@torvol:

; 53   :     if ( valid_id(b1_id) )

	test	esi, 268435456				; 10000000H
	je	SHORT $LN75@torvol

; 54   :         add_body_volume(b1_id,-t);

	sub	esp, 8
	fchs
	fstp	QWORD PTR [esp]
	push	esi
	call	_add_body_volume
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN8@torvol
$LN75@torvol:
	fstp	ST(0)
$LN8@torvol:

; 35   :   }
; 36   : 
; 37   :   FOR_ALL_FACETS(f_id)

	mov	ecx, DWORD PTR _web+236
	mov	edx, DWORD PTR [edi+ecx]
	mov	edi, DWORD PTR [edx]
	mov	esi, edi
	shr	esi, 28					; 0000001cH
	and	esi, 1
	mov	DWORD PTR _f_id$[ebp], edi
	jne	$LL52@torvol
$LN7@torvol:
	pop	edi
	pop	esi
	pop	ebx

; 55   : 
; 56   :   }
; 57   : } // end torvol()

	mov	esp, ebp
	pop	ebp
	ret	0
_torvol	ENDP
_TEXT	ENDS
END
