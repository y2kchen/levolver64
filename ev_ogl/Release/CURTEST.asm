; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\CURTEST.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_uu
PUBLIC	_b1
PUBLIC	_b2
PUBLIC	_b3
PUBLIC	_denom
_DATA	SEGMENT
_uu	DQ	00000000000000000r		; 0
	DQ	03fe6666666666666r		; 0.7
	DQ	03ff4cccccccccccdr		; 1.3
	DQ	04000000000000000r		; 2
_b1	DQ	03fd3333333333333r		; 0.3
_b2	DQ	03fb70a3d70a3d70ar		; 0.09
_b3	DQ	03f9ba5e353f7ced9r		; 0.027
_denom	DQ	03ff1951951951951r		; 1.0989
_DATA	ENDS
PUBLIC	_get_fe_edge
EXTRN	_web:BYTE
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
;	COMDAT _get_fe_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_edge PROC					; COMDAT

; 43   : {

	push	ebp
	mov	ebp, esp

; 44   :   edge_id e_id;
; 45   :     
; 46   :   e_id = feptr(fe_id)->fe_edge_id;

	mov	eax, DWORD PTR _fe_id$[ebp]

; 47   : 
; 48   :   /*
; 49   :   if ( inverted(fe_id) ) invert(e_id);
; 50   :   return e_id;
; 51   :   */
; 52   :   
; 53   :   return same_sign(e_id,fe_id);

	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]

; 54   : }

	pop	ebp
	ret	0
_get_fe_edge ENDP
_TEXT	ENDS
PUBLIC	_get_fe_facet
EXTRN	_NULLFACET:DWORD
; Function compile flags: /Ogtp
;	COMDAT _get_fe_facet
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_facet PROC					; COMDAT

; 58   : {

	push	ebp
	mov	ebp, esp

; 59   :   facet_id f_id;
; 60   :   
; 61   :   if ( !valid_id(fe_id) ) return NULLFACET;

	mov	ecx, DWORD PTR _fe_id$[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN2@get_fe_fac
	mov	eax, DWORD PTR _NULLFACET

; 64   :   return f_id;
; 65   : }

	pop	ebp
	ret	0
$LN2@get_fe_fac:

; 62   :   f_id = feptr(fe_id)->fe_facet_id;

	mov	edx, DWORD PTR _web+460
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+24]

; 63   :   if ( inverted(fe_id) ) invert(f_id);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_fe_fac
	xor	eax, 134217728				; 08000000H
$LN3@get_fe_fac:

; 64   :   return f_id;
; 65   : }

	pop	ebp
	ret	0
_get_fe_facet ENDP
_TEXT	ENDS
PUBLIC	_get_prev_edge
; Function compile flags: /Ogtp
;	COMDAT _get_prev_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_prev_edge PROC					; COMDAT

; 69   : {

	push	ebp
	mov	ebp, esp

; 70   :   if ( inverted(fe_id) ) return inverse_id(feptr(fe_id)->nextedge[1]);

	mov	eax, DWORD PTR _fe_id$[ebp]
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_prev_e
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H

; 72   : }

	pop	ebp
	ret	0
$LN2@get_prev_e:

; 71   :   else return feptr(fe_id)->nextedge[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]

; 72   : }

	pop	ebp
	ret	0
_get_prev_edge ENDP
_TEXT	ENDS
PUBLIC	_get_next_edge
; Function compile flags: /Ogtp
;	COMDAT _get_next_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_next_edge PROC					; COMDAT

; 76   : {

	push	ebp
	mov	ebp, esp

; 77   :   if ( inverted(fe_id) ) return inverse_id(feptr(fe_id)->nextedge[0]);

	mov	eax, DWORD PTR _fe_id$[ebp]
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_next_e
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H

; 79   : }

	pop	ebp
	ret	0
$LN2@get_next_e:

; 78   :   else return feptr(fe_id)->nextedge[1];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]

; 79   : }

	pop	ebp
	ret	0
_get_next_edge ENDP
_TEXT	ENDS
PUBLIC	_get_next_facet
; Function compile flags: /Ogtp
;	COMDAT _get_next_facet
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_next_facet PROC					; COMDAT

; 92   : {

	push	ebp
	mov	ebp, esp

; 93   :   if ( inverted(fe_id) ) 

	mov	eax, DWORD PTR _fe_id$[ebp]

; 94   :     return inverse_id(feptr(fe_id)->nextfacet[0]);

	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_next_f
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H

; 97   : }

	pop	ebp
	ret	0
$LN2@get_next_f:

; 95   :   else 
; 96   :     return feptr(fe_id)->nextfacet[1];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+40]

; 97   : }

	pop	ebp
	ret	0
_get_next_facet ENDP
_TEXT	ENDS
PUBLIC	_get_edge_fe
; Function compile flags: /Ogtp
;	COMDAT _get_edge_fe
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_fe PROC					; COMDAT

; 179  : {   struct edge *ep;

	push	ebp
	mov	ebp, esp

; 180  :     facetedge_id fe;
; 181  : 
; 182  :  	ep = eptr(e_id);

	mov	ecx, DWORD PTR _e_id$[ebp]
	mov	edx, DWORD PTR _web+124
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]

; 183  :     if ( !ep ) return NULLID;

	test	eax, eax
	jne	SHORT $LN2@get_edge_f

; 186  :     return fe;
; 187  : }

	pop	ebp
	ret	0
$LN2@get_edge_f:

; 184  :     fe = ep->fe_id; 

	mov	eax, DWORD PTR [eax+28]

; 185  :     if ( inverted(e_id) ) invert(fe);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_edge_f
	xor	eax, 134217728				; 08000000H
$LN3@get_edge_f:

; 186  :     return fe;
; 187  : }

	pop	ebp
	ret	0
_get_edge_fe ENDP
_TEXT	ENDS
PUBLIC	_get_edge_tailv
EXTRN	_dymem:DWORD
; Function compile flags: /Ogtp
;	COMDAT _get_edge_tailv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_tailv PROC					; COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp

; 192  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 193  :      return get_edge_vertices(e_id)[web.headvnum];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_t
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 196  : }

	pop	ebp
	ret	0
$LN2@get_edge_t:

; 194  :   else
; 195  :      return get_edge_vertices(e_id)[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 196  : }

	pop	ebp
	ret	0
_get_edge_tailv ENDP
_TEXT	ENDS
PUBLIC	_get_edge_headv
; Function compile flags: /Ogtp
;	COMDAT _get_edge_headv
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_headv PROC					; COMDAT

; 200  : {

	push	ebp
	mov	ebp, esp

; 201  :   if ( inverted(e_id) )

	mov	eax, DWORD PTR _e_id$[ebp]

; 202  :      return get_edge_vertices(e_id)[0];

	mov	ecx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_edge_h
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR [edx+eax]

; 205  : }

	pop	ebp
	ret	0
$LN2@get_edge_h:

; 203  :   else
; 204  :      return get_edge_vertices(e_id)[web.headvnum];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	add	edx, DWORD PTR [eax+ecx+304]
	mov	eax, DWORD PTR _web+636
	mov	eax, DWORD PTR [edx+eax*4]

; 205  : }

	pop	ebp
	ret	0
_get_edge_headv ENDP
_TEXT	ENDS
PUBLIC	_get_facet_fe
; Function compile flags: /Ogtp
;	COMDAT _get_facet_fe
_TEXT	SEGMENT
_f_id$ = 8						; size = 4
_get_facet_fe PROC					; COMDAT

; 260  : {

	push	ebp
	mov	ebp, esp

; 261  :   facetedge_id fe;
; 262  :   
; 263  :   if ( !valid_id(f_id) ) return NULLID;

	mov	ecx, DWORD PTR _f_id$[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN2@get_facet_
	xor	eax, eax

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
$LN2@get_facet_:

; 264  :   fe = fptr(f_id)->fe_id;

	mov	edx, DWORD PTR _web+236
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]

; 265  :   if ( inverted(f_id) ) invert(fe);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_facet_
	xor	eax, 134217728				; 08000000H
$LN3@get_facet_:

; 266  :   return fe;
; 267  : }

	pop	ebp
	ret	0
_get_facet_fe ENDP
_TEXT	ENDS
PUBLIC	__real@bff0000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@3ff8000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__$ArrayPad$
PUBLIC	_curtest_edge
EXTRN	_triple_prod:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CIsqrt:PROC
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff8000000000000
CONST	SEGMENT
__real@3ff8000000000000 DQ 03ff8000000000000r	; 1.5
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\curtest.c
CONST	ENDS
;	COMDAT _curtest_edge
_TEXT	SEGMENT
_x$ = -264						; size = 48
_a$ = -248						; size = 32
_r$ = -216						; size = 16
tv1454 = -208						; size = 8
tv1911 = -204						; size = 4
tv1173 = -204						; size = 4
tv1115 = -204						; size = 4
tv1141 = -200						; size = 4
tv1132 = -196						; size = 4
tv1916 = -192						; size = 4
tv1135 = -192						; size = 4
tv1089 = -192						; size = 4
tv1921 = -188						; size = 4
$T89392 = -188						; size = 4
$T89375 = -188						; size = 4
tv1926 = -184						; size = 4
tv1179 = -184						; size = 4
$T89349 = -184						; size = 4
_tv$ = -180						; size = 96
_tu$ = -84						; size = 48
_h$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_e_id$ = 8						; size = 4
_fe_1$ = 12						; size = 4
_fe_2$ = 16						; size = 4
_curtest_edge PROC					; COMDAT

; 112  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 113  :   REAL *x[2][FACET_CTRL];  /* pointers to sets of vertices, starting along edge */
; 114  :   REAL h[4];        /* values of curvature polynomial */
; 115  :   REAL a[4];        /* polynomial coefficients */
; 116  :   int i,j,k;
; 117  :   int sign;         /* return value */
; 118  :   REAL tu[MAXCOORD];  /* common tangent along edge */
; 119  :   REAL tv[2][MAXCOORD]; /* the other tangent for each face */
; 120  :   REAL discr;     /* quadratic formula discriminant */
; 121  :   REAL r[2];      /* quadratic roots */
; 122  :   REAL val;        /* curvature values */
; 123  : 
; 124  :   /* gather vertex coordinates */
; 125  :   x[0][0] = x[1][0] = get_coord(get_edge_tailv(e_id));

	mov	eax, DWORD PTR _e_id$[ebp]
	mov	edx, DWORD PTR _dymem
	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	mov	DWORD PTR tv1089[ebp], ecx
	mov	ecx, DWORD PTR _web+216
	push	esi
	mov	esi, DWORD PTR [ecx+edx+304]
	mov	ecx, DWORD PTR _web+124
	je	SHORT $LN31@curtest_ed
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+636
	add	edx, esi
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN30@curtest_ed
$LN31@curtest_ed:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+esi]
	add	edx, esi
$LN30@curtest_ed:
	mov	ecx, DWORD PTR _web+104
	push	ebx
	push	edi
	mov	edi, DWORD PTR _dymem
	mov	ebx, DWORD PTR [ecx+edi+64]
	mov	ecx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	edi, DWORD PTR [ecx+eax*4]

; 126  :   x[0][1] = x[1][1] = get_coord(get_edge_midv(e_id));

	mov	eax, DWORD PTR [edx+8]
	add	edi, ebx
	and	eax, 134217727				; 07ffffffH
	mov	DWORD PTR tv1115[ebp], ebx
	mov	ebx, DWORD PTR [ecx+eax*4]
	add	ebx, DWORD PTR tv1115[ebp]

; 127  :   x[0][2] = x[1][2] = get_coord(get_edge_headv(e_id));

	cmp	DWORD PTR tv1089[ebp], 0
	je	SHORT $LN35@curtest_ed
	mov	edx, DWORD PTR [edx]
	jmp	SHORT $LN140@curtest_ed
$LN35@curtest_ed:
	mov	eax, DWORD PTR _web+636
	mov	edx, DWORD PTR [edx+eax*4]
$LN140@curtest_ed:
	mov	eax, DWORD PTR _web+104
	mov	DWORD PTR $T89349[ebp], edx
	mov	edx, DWORD PTR _dymem
	mov	edx, DWORD PTR [eax+edx+64]
	mov	eax, DWORD PTR $T89349[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	add	eax, edx
	mov	DWORD PTR tv1132[ebp], edx
	mov	DWORD PTR _x$[ebp+32], eax

; 128  :   x[0][3] = get_coord(get_fe_midv(get_next_edge(fe_1)));

	mov	eax, DWORD PTR _fe_1$[ebp]
	mov	edx, eax
	shr	edx, 27					; 0000001bH
	and	edx, 1
	mov	DWORD PTR tv1135[ebp], edx
	mov	edx, DWORD PTR _web+460
	je	SHORT $LN39@curtest_ed
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv1141[ebp], eax
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN38@curtest_ed
$LN39@curtest_ed:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv1141[ebp], eax
	mov	eax, DWORD PTR [eax+32]
$LN38@curtest_ed:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _web+124
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [edx+esi+8]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	add	eax, DWORD PTR tv1132[ebp]
	mov	DWORD PTR _x$[ebp+12], eax

; 129  :   x[1][3] = get_coord(get_fe_midv(get_next_edge(fe_2)));

	mov	eax, DWORD PTR _fe_2$[ebp]
	mov	edx, eax
	shr	edx, 27					; 0000001bH
	and	edx, 1
	mov	DWORD PTR tv1173[ebp], edx
	mov	edx, DWORD PTR _web+460
	je	SHORT $LN45@curtest_ed
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv1179[ebp], eax
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN44@curtest_ed
$LN45@curtest_ed:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv1179[ebp], eax
	mov	eax, DWORD PTR [eax+32]
$LN44@curtest_ed:
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _web+124
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [eax+esi+8]
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+edx*4]
	add	eax, DWORD PTR tv1132[ebp]

; 130  :   x[0][4] = get_coord(get_fe_headv(get_next_edge(fe_1)));

	cmp	DWORD PTR tv1135[ebp], 0
	mov	DWORD PTR _x$[ebp+36], eax
	je	SHORT $LN51@curtest_ed
	mov	eax, DWORD PTR tv1141[ebp]
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN141@curtest_ed
$LN51@curtest_ed:
	mov	edx, DWORD PTR tv1141[ebp]
	mov	eax, DWORD PTR [edx+32]
$LN141@curtest_ed:
	mov	edx, DWORD PTR _web+460
	mov	DWORD PTR $T89375[ebp], eax
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR $T89375[ebp]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN57@curtest_ed
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [esi+eax]
	jmp	SHORT $LN56@curtest_ed
$LN57@curtest_ed:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+636
	lea	eax, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [eax+esi]
$LN56@curtest_ed:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	add	eax, DWORD PTR tv1132[ebp]

; 131  :   x[1][4] = get_coord(get_fe_headv(get_next_edge(fe_2)));

	cmp	DWORD PTR tv1173[ebp], 0
	mov	DWORD PTR _x$[ebp+16], eax
	je	SHORT $LN61@curtest_ed
	mov	edx, DWORD PTR tv1179[ebp]
	mov	eax, DWORD PTR [edx+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN142@curtest_ed
$LN61@curtest_ed:
	mov	eax, DWORD PTR tv1179[ebp]
	mov	eax, DWORD PTR [eax+32]
$LN142@curtest_ed:
	mov	edx, DWORD PTR _web+460
	mov	DWORD PTR $T89392[ebp], eax
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR $T89392[ebp]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN67@curtest_ed
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [esi+eax]
	jmp	SHORT $LN66@curtest_ed
$LN67@curtest_ed:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+636
	lea	eax, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [eax+esi]
$LN66@curtest_ed:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	add	eax, DWORD PTR tv1132[ebp]

; 132  :   x[0][5] = get_coord(get_fe_midv(get_prev_edge(fe_1)));

	cmp	DWORD PTR tv1135[ebp], 0
	mov	DWORD PTR _x$[ebp+40], eax
	je	SHORT $LN71@curtest_ed
	mov	edx, DWORD PTR tv1141[ebp]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN70@curtest_ed
$LN71@curtest_ed:
	mov	eax, DWORD PTR tv1141[ebp]
	mov	eax, DWORD PTR [eax+28]
$LN70@curtest_ed:
	mov	edx, DWORD PTR _web+460
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _web+124
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [edx+esi+8]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ecx+eax*4]
	add	eax, DWORD PTR tv1132[ebp]

; 133  :   x[1][5] = get_coord(get_fe_midv(get_prev_edge(fe_2)));

	cmp	DWORD PTR tv1173[ebp], 0
	mov	DWORD PTR _x$[ebp+20], eax
	je	SHORT $LN77@curtest_ed
	mov	edx, DWORD PTR tv1179[ebp]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN76@curtest_ed
$LN77@curtest_ed:
	mov	eax, DWORD PTR tv1179[ebp]
	mov	eax, DWORD PTR [eax+28]
$LN76@curtest_ed:
	mov	edx, DWORD PTR _web+460
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _web+124
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [edx+esi+8]
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]
	add	ecx, DWORD PTR tv1132[ebp]

; 134  : 
; 135  :   /* calculate test triple product at 4 points (it being cubic) */
; 136  :   for ( i = 0 ; i < 4 ; i++ )

	xor	esi, esi
	mov	DWORD PTR _x$[ebp+44], ecx
	npad	9
$LL94@curtest_ed:
	fld	QWORD PTR __real@3fe0000000000000

; 137  :     {
; 138  :       /* edge tangent */
; 139  :       for ( j = 0 ; j < SDIM ; j++ )

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	$LN99@curtest_ed
	mov	ecx, DWORD PTR _x$[ebp+32]
	fld1
	fsub	QWORD PTR _uu[esi]
	lea	edx, DWORD PTR _tu$[ebp]
	fld	QWORD PTR _uu[esi]
	sub	ecx, edx
	mov	DWORD PTR tv1911[ebp], ecx
	fsub	ST(0), ST(2)
	mov	ecx, DWORD PTR _x$[ebp+12]
	fld	QWORD PTR _uu[esi]
	fsub	QWORD PTR __real@3ff8000000000000
	sub	ecx, edx
	mov	DWORD PTR tv1916[ebp], ecx
	mov	ecx, DWORD PTR _x$[ebp+16]
	sub	ecx, edx
	mov	DWORD PTR tv1921[ebp], ecx

; 147  :          }
; 148  :       h[i] = triple_prod(tv[0],tv[1],tu);

	fld	ST(0)
	mov	ecx, DWORD PTR _x$[ebp+20]
	fld	QWORD PTR __real@4000000000000000
	fsub	QWORD PTR _uu[esi]
	sub	ecx, edx
	mov	DWORD PTR tv1926[ebp], ecx
$LN95@curtest_ed:

; 140  :          {
; 141  :             tu[j] = x[0][0][j]*(uu[i] - 1.5) + 2*x[0][1][j]*(1 - uu[i])
; 142  :                         + x[0][2][j]*(uu[i] - 0.5);

	fld	QWORD PTR [ebx+eax*8]
	mov	edx, DWORD PTR tv1911[ebp]
	fadd	ST(0), ST(0)
	lea	ecx, DWORD PTR _tu$[ebp+eax*8]
	inc	eax
	fmul	ST(0), ST(5)
	fld	QWORD PTR [edi+eax*8-8]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx+ecx]

; 143  :             for ( k = 0 ; k < 2 ; k++ )
; 144  :               tv[k][j] = x[k][0][j]*(uu[i] - 1.5) - x[k][1][j]*uu[i]
; 145  :                               + x[k][3][j]*uu[i] - 0.5*x[k][4][j]
; 146  :                                 + x[k][5][j]*(2.0 - uu[i]);

	mov	edx, DWORD PTR tv1916[ebp]
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [ecx]
	fld	QWORD PTR [edi+eax*8-8]
	fmul	ST(0), ST(3)
	fld	QWORD PTR _uu[esi]
	fmul	QWORD PTR [ebx+eax*8-8]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx+ecx]
	mov	edx, DWORD PTR tv1921[ebp]
	fmul	QWORD PTR _uu[esi]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx+ecx]
	mov	edx, DWORD PTR tv1926[ebp]
	fmul	ST(0), ST(7)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _x$[ebp+36]
	fmul	ST(0), ST(2)
	mov	edx, DWORD PTR _x$[ebp+40]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _tv$[ebp+eax*8-8]
	fld	ST(1)
	fmul	QWORD PTR [edi+eax*8-8]
	fld	QWORD PTR _uu[esi]
	fmul	QWORD PTR [ebx+eax*8-8]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ecx+eax*8-8]
	mov	ecx, DWORD PTR _x$[ebp+44]
	fmul	QWORD PTR _uu[esi]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [edx+eax*8-8]
	fmul	ST(0), ST(7)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ecx+eax*8-8]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _tv$[ebp+eax*8+40]
	cmp	eax, DWORD PTR _web+616
	jl	$LN95@curtest_ed

; 137  :     {
; 138  :       /* edge tangent */
; 139  :       for ( j = 0 ; j < SDIM ; j++ )

	fstp	ST(2)
	fstp	ST(1)
	fstp	ST(3)
	fstp	ST(1)
	fstp	ST(0)
$LN99@curtest_ed:

; 147  :          }
; 148  :       h[i] = triple_prod(tv[0],tv[1],tu);

	lea	edx, DWORD PTR _tu$[ebp]
	fstp	ST(0)
	push	edx
	lea	eax, DWORD PTR _tv$[ebp+48]
	push	eax
	lea	ecx, DWORD PTR _tv$[ebp]
	push	ecx
	call	_triple_prod
	fstp	QWORD PTR _h$[ebp+esi]
	add	esi, 8
	add	esp, 12					; 0000000cH
	cmp	esi, 32					; 00000020H
	jl	$LL94@curtest_ed

; 149  :     }
; 150  :  
; 151  :   /* see if signs at endpoints same or opposite */
; 152  :   if ( (h[0] > 0.0) != (h[3] > 0.0) )  return 0;

	fldz
	pop	edi
	fld	QWORD PTR _h$[ebp]
	pop	ebx
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN24@curtest_ed
	mov	ecx, 1
	jmp	SHORT $LN25@curtest_ed
$LN24@curtest_ed:
	xor	ecx, ecx
$LN25@curtest_ed:
	fld	QWORD PTR _h$[ebp+24]
	fcom	ST(2)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN22@curtest_ed
	mov	eax, 1
	jmp	SHORT $LN23@curtest_ed
$LN22@curtest_ed:
	xor	eax, eax
$LN23@curtest_ed:
	cmp	ecx, eax
	je	SHORT $LN10@curtest_ed
	fstp	ST(2)
	xor	eax, eax
	fstp	ST(0)
	pop	esi
	fstp	ST(0)

; 179  : } // end curtest_edge()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@curtest_ed:

; 153  :   if ( h[0] > 0.0 ) sign = 1;

	fxch	ST(2)
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN9@curtest_ed
	mov	esi, 1
	jmp	SHORT $LN8@curtest_ed
$LN9@curtest_ed:

; 154  :      else sign = -1;

	or	esi, -1
$LN8@curtest_ed:

; 155  : 
; 156  :   /* get polynomial coefficients */
; 157  :   /* (remapping to points -1, -0.3, 0.3, 1) */
; 158  :   a[0] = (h[1] + h[2] - b2*(h[0] + h[3]))/denom;

	fld	QWORD PTR _h$[ebp+16]
	fld	ST(0)
	fld	QWORD PTR _h$[ebp+8]
	fadd	ST(1), ST(0)
	fld	ST(4)
	fadd	ST(0), ST(4)
	fmul	QWORD PTR _b2
	fsubp	ST(2), ST(0)
	fld	QWORD PTR _denom
	fdiv	ST(2), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR _a$[ebp]

; 159  :   a[1] = (h[2] - h[1] - b3*(h[3] - h[0]))/denom;

	fld	ST(2)
	fsub	ST(0), ST(1)
	fld	ST(5)
	fsub	ST(0), ST(5)
	fst	QWORD PTR tv1454[ebp]
	fmul	QWORD PTR _b3
	fsubr	ST(0), ST(1)
	fdiv	ST(0), ST(3)
	fst	QWORD PTR _a$[ebp+8]

; 160  :   a[2] = (h[0] - h[2] + h[3] - h[1])/denom;

	fxch	ST(5)
	fsubrp	ST(4), ST(0)
	fxch	ST(3)
	faddp	ST(5), ST(0)
	fsubp	ST(4), ST(0)
	fdiv	ST(3), ST(0)
	fxch	ST(3)
	fst	QWORD PTR _a$[ebp+16]

; 161  :   a[3] = (b1*(h[3] - h[0]) - (h[2] - h[1]))/denom;

	fld	QWORD PTR tv1454[ebp]
	fmul	QWORD PTR _b1
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fdivrp	ST(3), ST(0)
	fxch	ST(2)
	fst	QWORD PTR _a$[ebp+24]

; 162  : 
; 163  : 
; 164  :   /* now decide on sign of cubic polynomial fitting h[] */
; 165  :   /* find max and min points */
; 166  :   discr = a[2]*a[2] - 3*a[1]*a[3];

	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR __real@4008000000000000
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)

; 167  :   if ( discr <= 0.0 ) return sign;  /* no critical points */

	fldz
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 1
	je	$LN143@curtest_ed

; 168  : 
; 169  :   discr = sqrt(discr);

	call	__CIsqrt

; 170  :   r[0] = (-a[2] + discr)/3/a[3];

	fld	ST(0)
	fld	QWORD PTR _a$[ebp+16]

; 171  :   r[1] = (-a[2] - discr)/3/a[3];
; 172  :   for ( i = 0 ; i < 2 ; i++ )

	xor	edx, edx
	fsub	ST(1), ST(0)
	fld	QWORD PTR __real@4008000000000000
	fdiv	ST(2), ST(0)
	fld	QWORD PTR _a$[ebp+24]
	fdiv	ST(3), ST(0)
	fxch	ST(3)
	fstp	QWORD PTR _r$[ebp]
	fld	ST(1)
	fchs
	fsubrp	ST(4), ST(0)
	fdivp	ST(3), ST(0)
	fxch	ST(2)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR _r$[ebp+8]
	fld	QWORD PTR __real@bff0000000000000
	fld	QWORD PTR _a$[ebp+8]
	fld	QWORD PTR _a$[ebp]
	fld	QWORD PTR _h$[ebp]
	fldz
	jmp	SHORT $LN6@curtest_ed
$LN139@curtest_ed:
	fxch	ST(4)
$LN6@curtest_ed:

; 173  :      { if ( (r[i] < -1.0) || (r[i] > 1.0) ) continue;

	fxch	ST(4)
	fcom	QWORD PTR _r$[ebp+edx*8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN5@curtest_ed
	fld1
	fcomp	QWORD PTR _r$[ebp+edx*8]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN5@curtest_ed

; 174  :        val = a[0] + r[i]*(a[1] + r[i]*(a[2] + r[i]*a[3]));

	fld	QWORD PTR _r$[ebp+edx*8]
	fmul	ST(0), ST(6)
	fadd	ST(0), ST(7)
	fmul	QWORD PTR _r$[ebp+edx*8]
	fadd	ST(0), ST(4)
	fmul	QWORD PTR _r$[ebp+edx*8]
	fadd	ST(0), ST(3)

; 175  :        if ( (val > 0.0) != (h[0] > 0.0) ) return 0;

	fcomp	ST(5)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN28@curtest_ed
	mov	ecx, 1
	jmp	SHORT $LN29@curtest_ed
$LN28@curtest_ed:
	xor	ecx, ecx
$LN29@curtest_ed:
	fxch	ST(1)
	fcom	ST(4)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN26@curtest_ed
	mov	eax, 1
	jmp	SHORT $LN27@curtest_ed
$LN26@curtest_ed:
	xor	eax, eax
$LN27@curtest_ed:
	cmp	ecx, eax
	jne	SHORT $LN135@curtest_ed
	fxch	ST(1)
$LN5@curtest_ed:

; 171  :   r[1] = (-a[2] - discr)/3/a[3];
; 172  :   for ( i = 0 ; i < 2 ; i++ )

	inc	edx
	cmp	edx, 2
	jl	SHORT $LN139@curtest_ed
	fstp	ST(4)
	fstp	ST(5)
	fstp	ST(3)
	fstp	ST(2)
	fstp	ST(1)
	fstp	ST(1)
$LN143@curtest_ed:

; 176  :      }
; 177  : 
; 178  :   return sign;

	mov	eax, esi
	fstp	ST(0)
	pop	esi

; 179  : } // end curtest_edge()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN135@curtest_ed:
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(4)
	fstp	ST(5)
	xor	ecx, ebp
	fstp	ST(3)
	xor	eax, eax
	fstp	ST(2)
	pop	esi
	fstp	ST(1)
	fstp	ST(0)
	fstp	ST(0)
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_curtest_edge ENDP
_TEXT	ENDS
PUBLIC	__real@3fd999999999999a
PUBLIC	__real@400000053e2d6239
PUBLIC	__$ArrayPad$
PUBLIC	_curtest_facet
EXTRN	_dot:PROC
EXTRN	_intpoly6part:PROC
EXTRN	_poly2partial:BYTE
;	COMDAT __real@3fd999999999999a
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@3fd999999999999a DQ 03fd999999999999ar	; 0.4
CONST	ENDS
;	COMDAT __real@400000053e2d6239
CONST	SEGMENT
__real@400000053e2d6239 DQ 0400000053e2d6239r	; 2.00001
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\curtest.c
CONST	ENDS
;	COMDAT _curtest_facet
_TEXT	SEGMENT
tv1969 = -432						; size = 4
_x$ = -428						; size = 24
tv2031 = -404						; size = 4
tv2027 = -400						; size = 4
tv2029 = -396						; size = 4
tv2033 = -392						; size = 4
_tutu$ = -388						; size = 8
tv2035 = -384						; size = 4
_tutv$ = -380						; size = 8
tv1974 = -376						; size = 4
_v$ = -372						; size = 8
tv2037 = -368						; size = 4
_u$ = -364						; size = 8
tv1979 = -360						; size = 4
_sign$ = -356						; size = 4
tv2146 = -352						; size = 4
tv2020 = -352						; size = 4
tv1270 = -352						; size = 4
tv1370 = -348						; size = 4
_j$ = -348						; size = 4
_fe$ = -348						; size = 4
tv1267 = -344						; size = 4
tv1165 = -344						; size = 4
$T89563 = -344						; size = 4
_i$ = -344						; size = 4
_tt$ = -340						; size = 192
_t$ = -148						; size = 96
_vv$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_f_id$ = 8						; size = 4
_curtest_facet PROC					; COMDAT

; 194  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 432				; 000001b0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 195  :   REAL *x[FACET_CTRL];  /* pointers to coordinates */
; 196  :   facetedge_id fe;
; 197  :   REAL tt[2][2][MAXCOORD];  /* position second partials */
; 198  :   REAL tutu,tvtv,tutv,t[2][MAXCOORD];
; 199  :   int i,j,k,m;
; 200  :   int sign = 0;    /* return value 1 or -1 at end if all same curvature */
; 201  :   REAL u,v;
; 202  :   REAL vv[MAXCOORD];  /* first variation vector, sort of */
; 203  :   REAL h;                 /* curvature at test point */
; 204  : 
; 205  :   /* gather vertices */
; 206  :   fe = get_facet_fe(f_id);

	mov	ecx, DWORD PTR _f_id$[ebp]
	xor	eax, eax
	mov	DWORD PTR _sign$[ebp], eax
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN41@curtest_fa
	mov	edx, DWORD PTR _web+236
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN41@curtest_fa
	xor	eax, 134217728				; 08000000H
$LN41@curtest_fa:

; 207  :   x[0] = get_coord(get_fe_tailv(fe));

	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _fe$[ebp], eax
	push	ebx
	and	eax, 134217728				; 08000000H
	push	esi
	mov	esi, DWORD PTR _dymem
	mov	DWORD PTR tv1267[ebp], ecx
	mov	ecx, DWORD PTR _web+216
	mov	ecx, DWORD PTR [ecx+esi+304]
	xor	eax, edx
	push	edi
	mov	edi, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN48@curtest_fa
	mov	ebx, DWORD PTR _web+636
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	lea	eax, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR [eax+ecx]
	jmp	SHORT $LN47@curtest_fa
$LN48@curtest_fa:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [ecx+eax]
$LN47@curtest_fa:
	mov	ebx, DWORD PTR _web+104
	mov	esi, DWORD PTR [ebx+esi+64]
	mov	ebx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+eax*4]
	add	eax, esi

; 208  :   x[1] =  get_coord(get_fe_midv(fe));

	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+edx*4]
	mov	DWORD PTR _x$[ebp], eax
	mov	eax, DWORD PTR [edx+ecx+8]
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+eax*4]

; 209  :   fe = get_next_edge(fe);

	mov	eax, DWORD PTR tv1267[ebp]
	add	edx, esi
	test	DWORD PTR _fe$[ebp], 134217728		; 08000000H
	mov	DWORD PTR _x$[ebp+4], edx
	je	SHORT $LN54@curtest_fa
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN171@curtest_fa
$LN54@curtest_fa:
	mov	eax, DWORD PTR [eax+32]
$LN171@curtest_fa:

; 210  :   x[2] =  get_coord(get_fe_tailv(fe));

	mov	ebx, DWORD PTR _web+460
	mov	esi, eax
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [ebx+esi*4]
	mov	DWORD PTR _fe$[ebp], eax
	mov	DWORD PTR tv1267[ebp], esi
	mov	esi, DWORD PTR [esi+20]
	and	eax, 134217728				; 08000000H
	xor	eax, esi
	test	eax, 134217728				; 08000000H
	je	SHORT $LN60@curtest_fa
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	edi, DWORD PTR _web+636
	lea	eax, DWORD PTR [eax+edi*4]
	mov	eax, DWORD PTR [eax+ecx]
	jmp	SHORT $LN59@curtest_fa
$LN60@curtest_fa:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [ecx+eax]
$LN59@curtest_fa:
	mov	ebx, DWORD PTR _dymem
	mov	edi, DWORD PTR _web+104
	mov	edi, DWORD PTR [edi+ebx+64]
	mov	ebx, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	ebx, DWORD PTR [ebx+eax*4]

; 211  :   x[3] =  get_coord(get_fe_midv(fe));

	mov	eax, DWORD PTR _web+124
	and	esi, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR [eax+ecx+8]
	mov	esi, DWORD PTR _web+12
	and	eax, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+eax*4]

; 212  :   fe = get_next_edge(fe);

	mov	eax, DWORD PTR tv1267[ebp]
	add	ebx, edi
	add	esi, edi
	test	DWORD PTR _fe$[ebp], 134217728		; 08000000H
	mov	DWORD PTR _x$[ebp+8], ebx
	mov	DWORD PTR _x$[ebp+12], esi
	je	SHORT $LN66@curtest_fa
	mov	eax, DWORD PTR [eax+28]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN172@curtest_fa
$LN66@curtest_fa:
	mov	eax, DWORD PTR [eax+32]
$LN172@curtest_fa:

; 213  :   x[4] =  get_coord(get_fe_tailv(fe));

	mov	edi, DWORD PTR _web+460
	mov	DWORD PTR _fe$[ebp], eax
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	edi, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _fe$[ebp]
	and	eax, 134217728				; 08000000H
	xor	eax, edi
	mov	DWORD PTR tv1270[ebp], edi
	mov	edi, DWORD PTR _web+124
	test	eax, 134217728				; 08000000H
	je	SHORT $LN72@curtest_fa
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	edi, DWORD PTR _web+636
	lea	eax, DWORD PTR [eax+edi*4]
	mov	eax, DWORD PTR [eax+ecx]
	jmp	SHORT $LN173@curtest_fa
$LN72@curtest_fa:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [ecx+eax]
$LN173@curtest_fa:
	mov	edi, DWORD PTR _dymem
	fldz
	mov	DWORD PTR $T89563[ebp], eax
	mov	eax, DWORD PTR _web+104
	mov	eax, DWORD PTR [eax+edi+64]
	mov	edi, DWORD PTR _web+12
	mov	DWORD PTR tv1370[ebp], eax
	mov	eax, DWORD PTR $T89563[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	add	eax, DWORD PTR tv1370[ebp]

; 214  :   x[5] =  get_coord(get_fe_midv(fe));

	mov	edi, DWORD PTR _web+124
	mov	DWORD PTR _x$[ebp+16], eax
	mov	eax, DWORD PTR tv1270[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	mov	ecx, DWORD PTR [eax+ecx+8]
	mov	eax, DWORD PTR _web+12
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [eax+ecx*4]
	add	eax, DWORD PTR tv1370[ebp]
	mov	ecx, DWORD PTR _web+616
	mov	DWORD PTR _x$[ebp+20], eax
	xor	eax, eax
	mov	DWORD PTR tv2020[ebp], eax
$LN38@curtest_fa:

; 218  :      for ( j = 0 ; j < 2 ; j++ )

	xor	edi, edi
	mov	DWORD PTR _j$[ebp], edi
$LN35@curtest_fa:

; 219  :         for ( k = 0 ; k < SDIM ; k++ )

	test	ecx, ecx
	jle	$LN34@curtest_fa

; 220  :           { tt[i][j][k] = 0.0;

	lea	ecx, DWORD PTR [eax+edi]
	mov	edi, DWORD PTR _x$[ebp]
	lea	eax, DWORD PTR _poly2partial[ecx*8]
	mov	DWORD PTR tv2027[ebp], eax
	lea	eax, DWORD PTR _poly2partial[ecx*8+32]
	mov	DWORD PTR tv2029[ebp], eax
	lea	eax, DWORD PTR _poly2partial[ecx*8+64]
	sub	esi, edx
	mov	DWORD PTR tv2031[ebp], eax
	lea	eax, DWORD PTR _poly2partial[ecx*8+96]
	mov	DWORD PTR tv1969[ebp], esi
	mov	esi, DWORD PTR _x$[ebp+16]
	mov	DWORD PTR tv2033[ebp], eax
	lea	eax, DWORD PTR _poly2partial[ecx*8+128]
	sub	esi, edx
	mov	DWORD PTR tv2035[ebp], eax
	lea	eax, DWORD PTR _poly2partial[ecx*8+160]
	mov	DWORD PTR tv1974[ebp], esi
	mov	esi, DWORD PTR _x$[ebp+20]
	lea	ecx, DWORD PTR [ecx+ecx*2]
	add	ecx, ecx
	sub	edi, edx
	sub	ebx, edx
	sub	esi, edx
	mov	DWORD PTR tv1979[ebp], esi
	mov	esi, DWORD PTR _web+616
	mov	DWORD PTR tv2037[ebp], eax
	mov	eax, edx
	lea	ecx, DWORD PTR _tt$[ebp+ecx*8]
	mov	DWORD PTR tv1165[ebp], esi
$LN32@curtest_fa:

; 221  :              for ( m = 0 ; m < FACET_CTRL ; m++ )
; 222  :                 tt[i][j][k] += poly2partial[m][i][j]*x[m][k];

	mov	esi, DWORD PTR tv2027[ebp]
	fst	QWORD PTR [ecx]
	fld	QWORD PTR [edi+eax]
	add	eax, 8
	fmul	QWORD PTR [esi]
	mov	esi, DWORD PTR tv2029[ebp]
	add	ecx, 8
	dec	DWORD PTR tv1165[ebp]
	fadd	QWORD PTR [ecx-8]
	fld	QWORD PTR [esi]
	mov	esi, DWORD PTR tv2031[ebp]
	fmul	QWORD PTR [eax-8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+eax-8]
	fmul	QWORD PTR [esi]
	mov	esi, DWORD PTR tv1969[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [esi+eax-8]
	mov	esi, DWORD PTR tv2033[ebp]
	fmul	QWORD PTR [esi]
	mov	esi, DWORD PTR tv1974[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [esi+eax-8]
	mov	esi, DWORD PTR tv2035[ebp]
	fmul	QWORD PTR [esi]
	mov	esi, DWORD PTR tv1979[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [esi+eax-8]
	mov	esi, DWORD PTR tv2037[ebp]
	fmul	QWORD PTR [esi]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [ecx-8]
	jne	SHORT $LN32@curtest_fa

; 219  :         for ( k = 0 ; k < SDIM ; k++ )

	mov	eax, DWORD PTR tv2020[ebp]
	mov	ecx, DWORD PTR _web+616
	mov	edi, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _x$[ebp+12]
	mov	ebx, DWORD PTR _x$[ebp+8]
$LN34@curtest_fa:

; 218  :      for ( j = 0 ; j < 2 ; j++ )

	inc	edi
	mov	DWORD PTR _j$[ebp], edi
	cmp	edi, 2
	jl	$LN35@curtest_fa

; 215  : 
; 216  :   /* calculate position second partials (independent of u,v) */
; 217  :   for ( i = 0 ; i < 2 ; i++ )

	add	eax, 2
	mov	DWORD PTR tv2020[ebp], eax
	cmp	eax, 4
	jl	$LN38@curtest_fa

; 223  :           }
; 224  : 
; 225  :     /* loop for sampling curvature */
; 226  :     for ( u = 0.0 ; u < 2.00001 ; u += 0.4 )

	fld	ST(0)
	fst	QWORD PTR _u$[ebp]
	fld	QWORD PTR __real@400000053e2d6239
	fld	QWORD PTR __real@3fd999999999999a
	jmp	SHORT $LN26@curtest_fa
$LN140@curtest_fa:
	fxch	ST(2)
	fxch	ST(3)
$LN26@curtest_fa:

; 227  :       for ( v = 0.0 ; u+v < 2.00001 ; v += 0.4 )

	fxch	ST(3)
	fst	QWORD PTR _v$[ebp]
	fld	ST(2)
	fadd	ST(0), ST(1)
	fcomp	ST(2)
	fnstsw	ax
	test	ah, 5
	jp	$LN25@curtest_fa
	fstp	ST(1)
	fstp	ST(2)
	jmp	SHORT $LN174@curtest_fa
	npad	8
$LL162@curtest_fa:
	fstp	ST(1)
	fstp	ST(1)
$LN174@curtest_fa:

; 228  :          {
; 229  :             /* inner loop does test at one point */
; 230  : 
; 231  :             /* calculate tangents */
; 232  :             for ( i = 0 ; i < 2 ; i++ )

	lea	edi, DWORD PTR _t$[ebp]
	fstp	ST(0)
	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR tv2146[ebp], edi
$LN113@curtest_fa:

; 233  :               for ( k = 0 ; k < SDIM ; k++ )

	xor	ebx, ebx
	test	ecx, ecx
	jle	SHORT $LN19@curtest_fa
$LL17@curtest_fa:

; 234  :                  { t[i][k] = 0.0;

	fstp	QWORD PTR [edi]

; 235  :                     for ( m = 0 ; m < FACET_CTRL ; m++ )

	xor	esi, esi
	npad	10
$LL111@curtest_fa:

; 236  :                       t[i][k] += intpoly6part(m,i,u,v)*x[m][k];

	fld	QWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	sub	esp, 16					; 00000010H
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR _u$[ebp]
	fstp	QWORD PTR [esp]
	push	ecx
	push	esi
	call	_intpoly6part
	mov	edx, DWORD PTR _x$[ebp+esi*4]
	fmul	QWORD PTR [edx+ebx*8]
	inc	esi
	add	esp, 24					; 00000018H
	fadd	QWORD PTR [edi]
	fstp	QWORD PTR [edi]
	cmp	esi, 6
	jl	SHORT $LL111@curtest_fa

; 233  :               for ( k = 0 ; k < SDIM ; k++ )

	mov	ecx, DWORD PTR _web+616
	fldz
	inc	ebx
	add	edi, 8
	cmp	ebx, ecx
	jl	SHORT $LL17@curtest_fa
$LN19@curtest_fa:

; 228  :          {
; 229  :             /* inner loop does test at one point */
; 230  : 
; 231  :             /* calculate tangents */
; 232  :             for ( i = 0 ; i < 2 ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	mov	edi, DWORD PTR tv2146[ebp]
	inc	eax
	add	edi, 48					; 00000030H
	mov	DWORD PTR _i$[ebp], eax
	mov	DWORD PTR tv2146[ebp], edi
	cmp	eax, 2
	jl	SHORT $LN113@curtest_fa

; 237  :                  }
; 238  : 
; 239  :             /* tangent dot products */
; 240  :             tutu = SDIM_dot(t[0],t[0]);

	push	ecx
	fstp	ST(0)
	lea	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fstp	QWORD PTR _tutu$[ebp]

; 241  :             tutv = SDIM_dot(t[0],t[1]);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _t$[ebp+48]
	push	eax
	lea	ecx, DWORD PTR _t$[ebp]
	push	ecx
	call	_dot
	fstp	QWORD PTR _tutv$[ebp]

; 242  :             tvtv = SDIM_dot(t[1],t[1]);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _t$[ebp+48]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot

; 243  : 
; 244  :             /* assemble variation vector */
; 245  :             for ( k = 0 ; k < SDIM ; k++ )

	mov	ecx, DWORD PTR _web+616
	add	esp, 36					; 00000024H
	xor	eax, eax
	cmp	ecx, 4
	jl	$LN112@curtest_fa
	fld	QWORD PTR _tutv$[ebp]
	lea	edx, DWORD PTR [ecx-3]
	fadd	ST(0), ST(0)
	fld	QWORD PTR _tutu$[ebp]
$LN108@curtest_fa:

; 246  :               vv[k] = 2*tutv*tt[0][1][k] - tutu*tt[1][1][k] - tvtv*tt[0][0][k];

	fld	QWORD PTR _tt$[ebp+eax*8+48]
	add	eax, 4
	fmul	ST(0), ST(2)
	fld	ST(1)
	fmul	QWORD PTR _tt$[ebp+eax*8+112]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _tt$[ebp+eax*8-32]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _vv$[ebp+eax*8-32]
	fld	QWORD PTR _tt$[ebp+eax*8+24]
	fmul	ST(0), ST(2)
	fld	QWORD PTR _tt$[ebp+eax*8+120]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _tt$[ebp+eax*8-24]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _vv$[ebp+eax*8-24]
	fld	QWORD PTR _tt$[ebp+eax*8+32]
	fmul	ST(0), ST(2)
	fld	QWORD PTR _tt$[ebp+eax*8+128]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _tt$[ebp+eax*8-16]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _vv$[ebp+eax*8-16]
	fld	QWORD PTR _tt$[ebp+eax*8+40]
	fmul	ST(0), ST(2)
	fld	QWORD PTR _tt$[ebp+eax*8+136]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _tt$[ebp+eax*8-8]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _vv$[ebp+eax*8-8]
	cmp	eax, edx
	jl	$LN108@curtest_fa
	fstp	ST(1)
	jmp	SHORT $LC107@curtest_fa
$LN112@curtest_fa:
	fld	QWORD PTR _tutu$[ebp]
$LC107@curtest_fa:

; 243  : 
; 244  :             /* assemble variation vector */
; 245  :             for ( k = 0 ; k < SDIM ; k++ )

	cmp	eax, ecx
	jge	SHORT $LN149@curtest_fa
	fld	QWORD PTR _tutv$[ebp]
	fadd	ST(0), ST(0)
$LC11@curtest_fa:

; 246  :               vv[k] = 2*tutv*tt[0][1][k] - tutu*tt[1][1][k] - tvtv*tt[0][0][k];

	fld	QWORD PTR _tt$[ebp+eax*8+48]
	inc	eax
	fmul	ST(0), ST(1)
	fld	ST(2)
	fmul	QWORD PTR _tt$[ebp+eax*8+136]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _tt$[ebp+eax*8-8]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR _vv$[ebp+eax*8-8]
	cmp	eax, ecx
	jl	SHORT $LC11@curtest_fa

; 243  : 
; 244  :             /* assemble variation vector */
; 245  :             for ( k = 0 ; k < SDIM ; k++ )

	fstp	ST(2)
	fstp	ST(0)
$LN175@curtest_fa:

; 247  : 
; 248  :             /* test normal component */
; 249  :             h = triple_prod(t[0],t[1],vv);

	lea	edx, DWORD PTR _vv$[ebp]
	fstp	ST(0)
	push	edx
	lea	eax, DWORD PTR _t$[ebp+48]
	push	eax
	lea	ecx, DWORD PTR _t$[ebp]
	push	ecx
	call	_triple_prod

; 250  :             if ( h > 0.0 )

	fldz
	fcom	ST(1)
	add	esp, 12					; 0000000cH
	fnstsw	ax
	fstp	ST(1)
	test	ah, 5

; 251  :               { if ( sign == 0 ) sign = 1;

	mov	eax, DWORD PTR _sign$[ebp]
	jp	SHORT $LN8@curtest_fa
	test	eax, eax
	jne	SHORT $LN176@curtest_fa
	mov	DWORD PTR _sign$[ebp], 1
	jmp	SHORT $LN22@curtest_fa
$LN149@curtest_fa:

; 243  : 
; 244  :             /* assemble variation vector */
; 245  :             for ( k = 0 ; k < SDIM ; k++ )

	fstp	ST(1)
	jmp	SHORT $LN175@curtest_fa
$LN176@curtest_fa:

; 252  :                  else if ( sign < 0 ) return 0;

	jns	SHORT $LN22@curtest_fa
$LN165@curtest_fa:
	pop	edi
	fstp	ST(0)
	pop	esi
	xor	eax, eax
	pop	ebx

; 257  : 
; 258  :             /* end inner loop */
; 259  : 
; 260  :          }
; 261  : 
; 262  :   return sign;
; 263  : } // end curtest_facet()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@curtest_fa:

; 253  :               }
; 254  :             else
; 255  :               if ( sign == 0 ) sign = -1;

	test	eax, eax
	jne	SHORT $LN177@curtest_fa
	mov	DWORD PTR _sign$[ebp], -1
	jmp	SHORT $LN22@curtest_fa
$LN177@curtest_fa:

; 256  :               else if ( sign > 0 ) return 0;

	jg	SHORT $LN165@curtest_fa
$LN22@curtest_fa:

; 227  :       for ( v = 0.0 ; u+v < 2.00001 ; v += 0.4 )

	fld	QWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _web+616
	fld	QWORD PTR __real@3fd999999999999a
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _v$[ebp]
	fld	QWORD PTR _u$[ebp]
	fadd	ST(1), ST(0)
	fld	QWORD PTR __real@400000053e2d6239
	fcom	ST(2)
	fnstsw	ax
	fstp	ST(2)
	test	ah, 65					; 00000041H
	je	$LL162@curtest_fa
	fxch	ST(2)
	fxch	ST(3)
$LN25@curtest_fa:

; 223  :           }
; 224  : 
; 225  :     /* loop for sampling curvature */
; 226  :     for ( u = 0.0 ; u < 2.00001 ; u += 0.4 )

	fxch	ST(2)
	fadd	ST(0), ST(3)
	fst	QWORD PTR _u$[ebp]
	fcom	ST(1)
	fnstsw	ax
	test	ah, 5
	jnp	$LN140@curtest_fa

; 257  : 
; 258  :             /* end inner loop */
; 259  : 
; 260  :          }
; 261  : 
; 262  :   return sign;
; 263  : } // end curtest_facet()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(1)
	mov	eax, DWORD PTR _sign$[ebp]
	fstp	ST(1)
	pop	edi
	fstp	ST(1)
	pop	esi
	fstp	ST(0)
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_curtest_facet ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@CKNLIHBM@Mixed?5curvature?5facets?3?5?5?5?5?5?$CF6d?6@ ; `string'
PUBLIC	??_C@_0CA@FIGCEOOL@Negative?5curvature?5facets?3?5?$CF6d?6?$AA@ ; `string'
PUBLIC	??_C@_0CA@KKCDOBMD@Positive?5curvature?5facets?3?5?$CF6d?6?$AA@ ; `string'
PUBLIC	??_C@_0CB@GLCGJFGC@Mixed?5curvature?5edges?3?5?5?5?5?5?5?$CF6d?6@ ; `string'
PUBLIC	??_C@_0CA@FMMPFBDI@Negative?5curvature?5edges?3?5?5?$CF6d?6?$AA@ ; `string'
PUBLIC	??_C@_0CB@MMPIDBAP@?6Positive?5curvature?5edges?3?5?5?$CF6d?6@ ; `string'
PUBLIC	??_C@_0DI@LMOJGEGP@Cannot?5only?5do?5curvature?5sign?5te@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_curtest
EXTRN	_sprintf:PROC
EXTRN	_msg:DWORD
EXTRN	_outstring:PROC
;	COMDAT ??_C@_0CC@CKNLIHBM@Mixed?5curvature?5facets?3?5?5?5?5?5?$CF6d?6@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0CC@CKNLIHBM@Mixed?5curvature?5facets?3?5?5?5?5?5?$CF6d?6@ DB 'Mixe'
	DB	'd curvature facets:     %6d', 0aH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FIGCEOOL@Negative?5curvature?5facets?3?5?$CF6d?6?$AA@
CONST	SEGMENT
??_C@_0CA@FIGCEOOL@Negative?5curvature?5facets?3?5?$CF6d?6?$AA@ DB 'Negat'
	DB	'ive curvature facets: %6d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KKCDOBMD@Positive?5curvature?5facets?3?5?$CF6d?6?$AA@
CONST	SEGMENT
??_C@_0CA@KKCDOBMD@Positive?5curvature?5facets?3?5?$CF6d?6?$AA@ DB 'Posit'
	DB	'ive curvature facets: %6d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@GLCGJFGC@Mixed?5curvature?5edges?3?5?5?5?5?5?5?$CF6d?6@
CONST	SEGMENT
??_C@_0CB@GLCGJFGC@Mixed?5curvature?5edges?3?5?5?5?5?5?5?$CF6d?6@ DB 'Mix'
	DB	'ed curvature edges:      %6d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FMMPFBDI@Negative?5curvature?5edges?3?5?5?$CF6d?6?$AA@
CONST	SEGMENT
??_C@_0CA@FMMPFBDI@Negative?5curvature?5edges?3?5?5?$CF6d?6?$AA@ DB 'Nega'
	DB	'tive curvature edges:  %6d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MMPIDBAP@?6Positive?5curvature?5edges?3?5?5?$CF6d?6@
CONST	SEGMENT
??_C@_0CB@MMPIDBAP@?6Positive?5curvature?5edges?3?5?5?$CF6d?6@ DB 0aH, 'P'
	DB	'ositive curvature edges:  %6d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@LMOJGEGP@Cannot?5only?5do?5curvature?5sign?5te@
CONST	SEGMENT
??_C@_0DI@LMOJGEGP@Cannot?5only?5do?5curvature?5sign?5te@ DB 'Cannot only'
	DB	' do curvature sign test on QUADRATIC model.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\curtest.c
CONST	ENDS
;	COMDAT _curtest
_TEXT	SEGMENT
_edgetally$ = -28					; size = 12
_facettally$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_curtest PROC						; COMDAT

; 26   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 27   :   facet_id f_id;
; 28   :   edge_id e_id;
; 29   :   int retval;
; 30   :   int edgetally[3],facettally[3];
; 31   :   int i;
; 32   : 
; 33   :   if ( web.modeltype != QUADRATIC )

	cmp	DWORD PTR _web+628, 2
	je	SHORT $LN26@curtest

; 34   :      { outstring("Cannot only do curvature sign test on QUADRATIC model.\n");

	push	OFFSET ??_C@_0DI@LMOJGEGP@Cannot?5only?5do?5curvature?5sign?5te@
	call	_outstring
	add	esp, 4

; 85   : 
; 86   : } // end curtest()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN26@curtest:

; 35   :         return;
; 36   :      }
; 37   : 
; 38   :   for ( i = 0 ; i < 3; i++ )
; 39   :      edgetally[i] = facettally[i] = 0;
; 40   :      
; 41   : 
; 42   :   FOR_ALL_FACETS(f_id)

	mov	ecx, DWORD PTR _web+272
	push	ebx
	push	esi
	push	edi
	xor	edi, edi
	xor	ebx, ebx
	mov	DWORD PTR _facettally$[ebp], edi
	mov	DWORD PTR _edgetally$[ebp], edi
	mov	DWORD PTR _facettally$[ebp+4], edi
	mov	DWORD PTR _edgetally$[ebp+4], edi
	mov	DWORD PTR _facettally$[ebp+8], edi
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN20@curtest
	npad	8
$LL22@curtest:
	mov	eax, DWORD PTR _web+236
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	eax, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN21@curtest

; 43   :      {
; 44   :         retval = curtest_facet(f_id);

	push	ecx
	call	_curtest_facet
	add	esp, 4

; 45   :         if ( retval < 0 ) facettally[0]++;

	test	eax, eax
	jns	SHORT $LN58@curtest
	inc	DWORD PTR _facettally$[ebp]
	jmp	SHORT $LN21@curtest
$LN58@curtest:

; 46   :         else if ( retval == 0 ) facettally[1]++;

	jne	SHORT $LN15@curtest
	inc	DWORD PTR _facettally$[ebp+4]
	jmp	SHORT $LN21@curtest
$LN15@curtest:

; 47   :         else facettally[2]++;

	inc	edi
$LN21@curtest:

; 35   :         return;
; 36   :      }
; 37   : 
; 38   :   for ( i = 0 ; i < 3; i++ )
; 39   :      edgetally[i] = facettally[i] = 0;
; 40   :      
; 41   : 
; 42   :   FOR_ALL_FACETS(f_id)

	mov	ecx, DWORD PTR _web+236
	mov	edx, DWORD PTR [esi+ecx]
	mov	ecx, DWORD PTR [edx]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LL22@curtest

; 47   :         else facettally[2]++;

	mov	DWORD PTR _facettally$[ebp+8], edi
$LN20@curtest:

; 48   :      }
; 49   : 
; 50   :   FOR_ALL_EDGES(e_id)

	mov	esi, DWORD PTR _web+160
	test	esi, 268435456				; 10000000H
	je	$LN11@curtest
	mov	edi, DWORD PTR _web+460
	npad	8
$LL13@curtest:
	mov	ecx, DWORD PTR _web+124
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, 1
	xor	edx, edx
	or	eax, edx
	je	$LN12@curtest

; 51   :      {
; 52   :         facetedge_id fe1,fe2;
; 53   : 
; 54   :         fe1 = get_edge_fe(e_id);

	test	ecx, ecx
	je	SHORT $LN29@curtest
$LN30@curtest:
	mov	ecx, DWORD PTR [ecx+28]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN29@curtest
	xor	ecx, 134217728				; 08000000H
$LN29@curtest:

; 55   :         if ( !valid_id(fe1) )  continue;

	test	ecx, 268435456				; 10000000H
	je	$LN12@curtest

; 56   : 
; 57   :         /* ensure orientation lines up with original definition */
; 58   :         if ( inverted(get_fe_facet(fe1)) )

	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+edx*4]
	mov	eax, DWORD PTR [eax+24]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN33@curtest
	xor	eax, 134217728				; 08000000H
$LN33@curtest:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN7@curtest

; 59   :           { invert(e_id);

	xor	esi, 134217728				; 08000000H

; 60   :              invert(fe1);

	xor	ecx, 134217728				; 08000000H
$LN7@curtest:

; 61   :           }
; 62   : 
; 63   :         fe2 = get_next_facet(fe1);

	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+edx*4]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN38@curtest
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN37@curtest
$LN38@curtest:
	mov	eax, DWORD PTR [eax+40]
$LN37@curtest:

; 64   :         if ( equal_id(fe1,fe2) ) continue; /* only 1 facet on edge */

	cmp	ecx, eax
	je	SHORT $LN12@curtest

; 65   :         if ( !equal_id(fe1,get_next_facet(fe2)) ) continue; /* more than 2 */

	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+edx*4]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN42@curtest
	mov	edx, DWORD PTR [edx+36]
	xor	edx, 134217728				; 08000000H
	jmp	SHORT $LN41@curtest
$LN42@curtest:
	mov	edx, DWORD PTR [edx+40]
$LN41@curtest:
	cmp	ecx, edx
	jne	SHORT $LN12@curtest

; 66   :         retval = curtest_edge(e_id,fe1,fe2);

	push	eax
	push	ecx
	push	esi
	call	_curtest_edge
	add	esp, 12					; 0000000cH

; 67   :         if ( retval < 0 ) edgetally[0]++;

	test	eax, eax
	jns	SHORT $LN59@curtest
	inc	DWORD PTR _edgetally$[ebp]
	jmp	SHORT $LN60@curtest
$LN59@curtest:

; 68   :         else if ( retval == 0 ) edgetally[1]++;

	jne	SHORT $LN2@curtest
	inc	DWORD PTR _edgetally$[ebp+4]
	jmp	SHORT $LN60@curtest
$LN2@curtest:

; 69   :         else edgetally[2]++;

	inc	ebx
$LN60@curtest:
	mov	edi, DWORD PTR _web+460
$LN12@curtest:

; 48   :      }
; 49   : 
; 50   :   FOR_ALL_EDGES(e_id)

	mov	eax, DWORD PTR _web+124
	and	esi, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+esi*4]
	mov	esi, DWORD PTR [ecx]
	test	esi, 268435456				; 10000000H
	jne	$LL13@curtest
	mov	edi, DWORD PTR _facettally$[ebp+8]
$LN11@curtest:

; 70   :      }
; 71   : 
; 72   :   /* report results */
; 73   :   sprintf(msg,"\nPositive curvature edges:  %6d\n",edgetally[2]);

	mov	edx, DWORD PTR _msg
	push	ebx
	push	OFFSET ??_C@_0CB@MMPIDBAP@?6Positive?5curvature?5edges?3?5?5?$CF6d?6@
	push	edx
	call	_sprintf

; 74   :      outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring

; 75   :   sprintf(msg,"Negative curvature edges:  %6d\n",edgetally[0]);

	mov	ecx, DWORD PTR _edgetally$[ebp]
	mov	edx, DWORD PTR _msg
	push	ecx
	push	OFFSET ??_C@_0CA@FMMPFBDI@Negative?5curvature?5edges?3?5?5?$CF6d?6?$AA@
	push	edx
	call	_sprintf

; 76   :      outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring

; 77   :   sprintf(msg,"Mixed curvature edges:      %6d\n",edgetally[1]);

	mov	ecx, DWORD PTR _edgetally$[ebp+4]
	mov	edx, DWORD PTR _msg
	push	ecx
	push	OFFSET ??_C@_0CB@GLCGJFGC@Mixed?5curvature?5edges?3?5?5?5?5?5?5?$CF6d?6@
	push	edx
	call	_sprintf

; 78   :      outstring(msg);

	mov	eax, DWORD PTR _msg
	push	eax
	call	_outstring

; 79   :   sprintf(msg,"Positive curvature facets: %6d\n",facettally[2]);

	mov	ecx, DWORD PTR _msg
	push	edi
	push	OFFSET ??_C@_0CA@KKCDOBMD@Positive?5curvature?5facets?3?5?$CF6d?6?$AA@
	push	ecx
	call	_sprintf

; 80   :      outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 81   :   sprintf(msg,"Negative curvature facets: %6d\n",facettally[0]);

	mov	eax, DWORD PTR _facettally$[ebp]
	mov	ecx, DWORD PTR _msg
	add	esp, 64					; 00000040H
	push	eax
	push	OFFSET ??_C@_0CA@FIGCEOOL@Negative?5curvature?5facets?3?5?$CF6d?6?$AA@
	push	ecx
	call	_sprintf

; 82   :      outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 83   :   sprintf(msg,"Mixed curvature facets:     %6d\n\n",facettally[1]);

	mov	eax, DWORD PTR _facettally$[ebp+4]
	mov	ecx, DWORD PTR _msg
	push	eax
	push	OFFSET ??_C@_0CC@CKNLIHBM@Mixed?5curvature?5facets?3?5?5?5?5?5?$CF6d?6@
	push	ecx
	call	_sprintf

; 84   :      outstring(msg);

	mov	edx, DWORD PTR _msg
	push	edx
	call	_outstring

; 85   : 
; 86   : } // end curtest()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 32					; 00000020H
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_curtest ENDP
_TEXT	ENDS
END
