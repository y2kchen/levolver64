; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\levolver\yonkang-sefit\levolver\ev_ogl\METHOD4.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_poisson_attr:DWORD
COMM	_LEBweight_attr:DWORD
COMM	_form_factors_attr:DWORD
_DATA	ENDS
PUBLIC	_get_fe_edge
EXTRN	_web:BYTE
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
;	COMDAT _get_fe_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_edge PROC					; COMDAT

; 43   : {

	push	ebp
	mov	ebp, esp

; 44   :   edge_id e_id;
; 45   :     
; 46   :   e_id = feptr(fe_id)->fe_edge_id;

	mov	eax, DWORD PTR _fe_id$[ebp]

; 47   : 
; 48   :   /*
; 49   :   if ( inverted(fe_id) ) invert(e_id);
; 50   :   return e_id;
; 51   :   */
; 52   :   
; 53   :   return same_sign(e_id,fe_id);

	mov	edx, DWORD PTR _web+460
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [ecx+20]

; 54   : }

	pop	ebp
	ret	0
_get_fe_edge ENDP
_TEXT	ENDS
PUBLIC	_get_fe_facet
EXTRN	_NULLFACET:DWORD
; Function compile flags: /Ogtp
;	COMDAT _get_fe_facet
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_fe_facet PROC					; COMDAT

; 58   : {

	push	ebp
	mov	ebp, esp

; 59   :   facet_id f_id;
; 60   :   
; 61   :   if ( !valid_id(fe_id) ) return NULLFACET;

	mov	ecx, DWORD PTR _fe_id$[ebp]
	test	ecx, 268435456				; 10000000H
	jne	SHORT $LN2@get_fe_fac
	mov	eax, DWORD PTR _NULLFACET

; 64   :   return f_id;
; 65   : }

	pop	ebp
	ret	0
$LN2@get_fe_fac:

; 62   :   f_id = feptr(fe_id)->fe_facet_id;

	mov	edx, DWORD PTR _web+460
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+24]

; 63   :   if ( inverted(fe_id) ) invert(f_id);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_fe_fac
	xor	eax, 134217728				; 08000000H
$LN3@get_fe_fac:

; 64   :   return f_id;
; 65   : }

	pop	ebp
	ret	0
_get_fe_facet ENDP
_TEXT	ENDS
PUBLIC	_get_prev_edge
; Function compile flags: /Ogtp
;	COMDAT _get_prev_edge
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_prev_edge PROC					; COMDAT

; 69   : {

	push	ebp
	mov	ebp, esp

; 70   :   if ( inverted(fe_id) ) return inverse_id(feptr(fe_id)->nextedge[1]);

	mov	eax, DWORD PTR _fe_id$[ebp]
	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_prev_e
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+32]
	xor	eax, 134217728				; 08000000H

; 72   : }

	pop	ebp
	ret	0
$LN2@get_prev_e:

; 71   :   else return feptr(fe_id)->nextedge[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+28]

; 72   : }

	pop	ebp
	ret	0
_get_prev_edge ENDP
_TEXT	ENDS
PUBLIC	_get_next_facet
; Function compile flags: /Ogtp
;	COMDAT _get_next_facet
_TEXT	SEGMENT
_fe_id$ = 8						; size = 4
_get_next_facet PROC					; COMDAT

; 92   : {

	push	ebp
	mov	ebp, esp

; 93   :   if ( inverted(fe_id) ) 

	mov	eax, DWORD PTR _fe_id$[ebp]

; 94   :     return inverse_id(feptr(fe_id)->nextfacet[0]);

	mov	ecx, DWORD PTR _web+460
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_next_f
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H

; 97   : }

	pop	ebp
	ret	0
$LN2@get_next_f:

; 95   :   else 
; 96   :     return feptr(fe_id)->nextfacet[1];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+40]

; 97   : }

	pop	ebp
	ret	0
_get_next_facet ENDP
_TEXT	ENDS
PUBLIC	_get_edge_fe
; Function compile flags: /Ogtp
;	COMDAT _get_edge_fe
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_edge_fe PROC					; COMDAT

; 179  : {   struct edge *ep;

	push	ebp
	mov	ebp, esp

; 180  :     facetedge_id fe;
; 181  : 
; 182  :  	ep = eptr(e_id);

	mov	ecx, DWORD PTR _e_id$[ebp]
	mov	edx, DWORD PTR _web+124
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]

; 183  :     if ( !ep ) return NULLID;

	test	eax, eax
	jne	SHORT $LN2@get_edge_f

; 186  :     return fe;
; 187  : }

	pop	ebp
	ret	0
$LN2@get_edge_f:

; 184  :     fe = ep->fe_id; 

	mov	eax, DWORD PTR [eax+28]

; 185  :     if ( inverted(e_id) ) invert(fe);

	test	ecx, 134217728				; 08000000H
	je	SHORT $LN3@get_edge_f
	xor	eax, 134217728				; 08000000H
$LN3@get_edge_f:

; 186  :     return fe;
; 187  : }

	pop	ebp
	ret	0
_get_edge_fe ENDP
_TEXT	ENDS
PUBLIC	_get_facet_body
EXTRN	_dymem:DWORD
; Function compile flags: /Ogtp
;	COMDAT _get_facet_body
_TEXT	SEGMENT
_f_id$ = 8						; size = 4
_get_facet_body PROC					; COMDAT

; 250  : {

	push	ebp
	mov	ebp, esp

; 251  :   if ( web.skel[BODY].count == 0 ) return NULLID;

	cmp	DWORD PTR _web+400, 0
	jne	SHORT $LN4@get_facet_
$LN7@get_facet_:
	xor	eax, eax

; 255  : }

	pop	ebp
	ret	0
$LN4@get_facet_:

; 252  :   if ( !valid_id(f_id) ) return NULLID;

	mov	eax, DWORD PTR _f_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN7@get_facet_

; 253  :   if ( inverted(f_id) ) return F_ELID(f_id,F_BODY_LIST_ATTR)[1];

	mov	ecx, DWORD PTR _web+236
	test	eax, 134217728				; 08000000H
	je	SHORT $LN2@get_facet_
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax+4]

; 255  : }

	pop	ebp
	ret	0
$LN2@get_facet_:

; 254  :   else  return F_ELID(f_id,F_BODY_LIST_ATTR)[0];

	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _web+328
	mov	ecx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+ecx+784]
	mov	eax, DWORD PTR [edx+eax]

; 255  : }

	pop	ebp
	ret	0
_get_facet_body ENDP
_TEXT	ENDS
PUBLIC	_get_next_tail_edge
; Function compile flags: /Ogtp
;	COMDAT _get_next_tail_edge
_TEXT	SEGMENT
_e_id$ = 8						; size = 4
_get_next_tail_edge PROC				; COMDAT

; 270  : { return eptr(e_id)->next_vedge[inverted(e_id) ?1: 0] ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _e_id$[ebp]
	mov	edx, DWORD PTR _web+124
	mov	ecx, eax
	shr	ecx, 27					; 0000001bH
	and	ecx, 1
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+ecx*4+32]
	pop	ebp
	ret	0
_get_next_tail_edge ENDP
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	_get_body_density
EXTRN	__fltused:DWORD
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _get_body_density
_TEXT	SEGMENT
_b_id$ = 8						; size = 4
_get_body_density PROC					; COMDAT

; 305  :     { return  ( valid_id(b_id) ?  bptr(b_id)->density : 0.0 ) ; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b_id$[ebp]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN3@get_body_d
	mov	ecx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	QWORD PTR [edx+344]
	pop	ebp
	ret	0
$LN3@get_body_d:
	fldz
	pop	ebp
	ret	0
_get_body_density ENDP
_TEXT	ENDS
PUBLIC	_get_extra
; Function compile flags: /Ogtp
;	COMDAT _get_extra
_TEXT	SEGMENT
_id$ = 8						; size = 4
_n$ = 12						; size = 4
_get_extra PROC						; COMDAT

; 348  : { int type = id_type(id);

	push	ebp
	mov	ebp, esp

; 349  : 
; 350  :   return ( (char*)elptr(id) + EXTRAS(type)[n].offset);

	mov	ecx, DWORD PTR _id$[ebp]
	mov	eax, ecx
	push	esi
	mov	esi, DWORD PTR _n$[ebp]
	shr	eax, 29					; 0000001dH
	imul	esi, 240				; 000000f0H
	imul	eax, 112				; 00000070H
	mov	edx, DWORD PTR _web[eax+12]
	push	edi
	mov	edi, DWORD PTR _web[eax+104]
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _dymem
	add	edi, esi
	add	eax, DWORD PTR [edi+ecx+64]
	pop	edi
	pop	esi

; 351  : }

	pop	ebp
	ret	0
_get_extra ENDP
_TEXT	ENDS
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe921fb54442d18
PUBLIC	__real@4000000000000000
PUBLIC	__$ArrayPad$
PUBLIC	_johndust_energy
EXTRN	_dot:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CIasin:PROC
EXTRN	__CIsqrt:PROC
;	COMDAT __real@400921fb54442d18
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\method4.c
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fe921fb54442d18
CONST	SEGMENT
__real@3fe921fb54442d18 DQ 03fe921fb54442d18r	; 0.785398
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _johndust_energy
_TEXT	SEGMENT
tv903 = -84						; size = 4
_d$ = -80						; size = 8
tv304 = -76						; size = 4
tv905 = -72						; size = 4
tv909 = -68						; size = 4
_energy$ = -64						; size = 8
_x$ = -56						; size = 4
_r$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_v_info$ = 8						; size = 4
_johndust_energy PROC					; COMDAT

; 27   : { vertex_id v_id;

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 28   :   int i;
; 29   :   REAL energy = 0.0;
; 30   :   REAL d,r[MAXCOORD];
; 31   :   REAL *x = get_coord(v_info->id);

	mov	eax, DWORD PTR _v_info$[ebp]
	fldz
	mov	ecx, DWORD PTR [eax]
	fst	QWORD PTR _energy$[ebp]
	mov	edx, DWORD PTR _web+12
	mov	eax, DWORD PTR _web+104
	and	ecx, 134217727				; 07ffffffH
	push	ebx
	mov	ebx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _dymem
	add	ebx, DWORD PTR [eax+ecx+64]

; 32   : 
; 33   :   FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR _web+48
	mov	DWORD PTR _x$[ebp], ebx
	test	ecx, 268435456				; 10000000H
	je	$LN9@johndust_e
	push	esi
	push	edi
$LN22@johndust_e:
	mov	edx, DWORD PTR _web+12
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	edx, DWORD PTR [esi+edx]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	mov	DWORD PTR tv304[ebp], esi
	je	$LN10@johndust_e

; 34   :   { REAL *y = get_coord(v_id);

	mov	eax, DWORD PTR _web+104
	mov	edi, DWORD PTR _dymem
	mov	edi, DWORD PTR [eax+edi+64]
	add	edi, edx

; 35   :     if ( v_id <= v_info->id ) continue; /* each pair once */

	mov	edx, DWORD PTR _v_info$[ebp]
	cmp	ecx, DWORD PTR [edx]
	jbe	$LN10@johndust_e

; 36   :     for ( i = 0 ; i < SDIM ; i++ ) r[i] = x[i] - y[i];

	mov	ecx, DWORD PTR _web+616
	fstp	ST(0)
	xor	edx, edx
	cmp	ecx, 4
	jl	SHORT $LC19@johndust_e
	mov	esi, edi
	neg	esi
	lea	ecx, DWORD PTR [ebx+24]
	add	ebx, esi
	mov	DWORD PTR tv903[ebp], ebx
	lea	ebx, DWORD PTR _r$[ebp+esi]
	mov	DWORD PTR tv905[ebp], ebx
	lea	ebx, DWORD PTR _r$[ebp+esi+8]
	lea	esi, DWORD PTR _r$[ebp+esi+16]
	lea	eax, DWORD PTR [edi+8]
	mov	DWORD PTR tv909[ebp], esi
$LL20@johndust_e:
	fld	QWORD PTR [ecx-24]
	mov	esi, DWORD PTR tv903[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _r$[ebp+edx*8-32]
	fld	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv905[ebp]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv909[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [ebx+eax-32]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR _web+616
	add	esi, -3					; fffffffdH
	cmp	edx, esi
	jl	SHORT $LL20@johndust_e
	mov	esi, DWORD PTR tv304[ebp]
	mov	ebx, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _web+616
$LC19@johndust_e:
	cmp	edx, ecx
	jge	SHORT $LN18@johndust_e
	lea	eax, DWORD PTR [edi+edx*8]
	neg	edi
	add	ebx, edi
	lea	edi, DWORD PTR _r$[ebp+edi]
	sub	ecx, edx
	npad	7
$LC5@johndust_e:
	fld	QWORD PTR [ebx+eax]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [edi+eax-8]
	jne	SHORT $LC5@johndust_e
	mov	ebx, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _web+616
$LN18@johndust_e:

; 37   :     d = sqrt(SDIM_dot(r,r));

	push	ecx
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fst	QWORD PTR _d$[ebp]

; 38   :     if ( d >= 2.0 ) energy += M_PI/4;  /* antipodes */

	fld	QWORD PTR __real@4000000000000000
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN2@johndust_e
	fstp	ST(0)
	fld	QWORD PTR _energy$[ebp]
	fadd	QWORD PTR __real@3fe921fb54442d18
	jmp	SHORT $LN37@johndust_e
$LN2@johndust_e:

; 39   :     else  energy += (M_PI - asin(d/2))/d;    

	fmul	QWORD PTR __real@3fe0000000000000
	call	__CIasin
	fsubr	QWORD PTR __real@400921fb54442d18
	fdiv	QWORD PTR _d$[ebp]
	fadd	QWORD PTR _energy$[ebp]
$LN37@johndust_e:
	fst	QWORD PTR _energy$[ebp]
$LN10@johndust_e:

; 32   : 
; 33   :   FOR_ALL_VERTICES(v_id)

	mov	edx, DWORD PTR _web+12
	mov	eax, DWORD PTR [esi+edx]
	mov	ecx, DWORD PTR [eax]
	test	ecx, 268435456				; 10000000H
	jne	$LN22@johndust_e
	pop	edi
	pop	esi
$LN9@johndust_e:

; 40   :   }
; 41   :   return energy;
; 42   : } // end johndust_energy()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_johndust_energy ENDP
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3fd0000000000000
PUBLIC	_v_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_johndust_gradient
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _johndust_gradient
_TEXT	SEGMENT
tv939 = -100						; size = 8
tv989 = -96						; size = 4
tv985 = -92						; size = 4
_energy$ = -88						; size = 8
tv941 = -80						; size = 8
tv987 = -76						; size = 4
_d$ = -72						; size = 8
tv347 = -68						; size = 4
_v_info$GSCopy$ = -64					; size = 4
_x$ = -60						; size = 4
tv983 = -56						; size = 4
_r$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_v_info$ = 8						; size = 4
_johndust_gradient PROC					; COMDAT

; 55   : { REAL *x = get_coord(v_info->id);

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _v_info$[ebp]

; 56   :   REAL energy = 0.0;  /* for this vertex */

	fldz
	mov	eax, DWORD PTR [ecx]
	fld	ST(0)
	mov	edx, DWORD PTR _web+12
	fst	QWORD PTR _energy$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _web+104
	push	ebx

; 57   :   vertex_id v_id;
; 58   :   int i;
; 59   :   REAL r[MAXCOORD]; /* difference vector between vertices */
; 60   :   REAL d,p,dp;
; 61   : 
; 62   :   for ( i = 0 ; i < SDIM ; i++ ) 

	mov	ebx, DWORD PTR _web+616
	push	esi
	mov	esi, DWORD PTR _dymem
	add	eax, DWORD PTR [edx+esi+64]
	mov	DWORD PTR _v_info$GSCopy$[ebp], ecx
	mov	DWORD PTR _x$[ebp], eax
	xor	eax, eax
	test	ebx, ebx
	jg	SHORT $LN16@johndust_g
	fstp	ST(1)
	jmp	SHORT $LN14@johndust_g
$LN37@johndust_g:
	fxch	ST(1)
$LN16@johndust_g:

; 63   :       v_info->grad[0][i] = 0.0; /* intialize gradient */

	mov	edx, DWORD PTR [ecx+1336]
	fxch	ST(1)
	mov	edx, DWORD PTR [edx]
	fst	QWORD PTR [edx+eax*8]
	mov	ebx, DWORD PTR _web+616
	inc	eax
	cmp	eax, ebx
	jl	SHORT $LN37@johndust_g

; 57   :   vertex_id v_id;
; 58   :   int i;
; 59   :   REAL r[MAXCOORD]; /* difference vector between vertices */
; 60   :   REAL d,p,dp;
; 61   : 
; 62   :   for ( i = 0 ; i < SDIM ; i++ ) 

	fstp	ST(0)
$LN14@johndust_g:

; 64   :   FOR_ALL_VERTICES(v_id)

	mov	ecx, DWORD PTR _web+48
	test	ecx, 268435456				; 10000000H
	je	$LN11@johndust_g
	fstp	ST(0)
	push	edi
$LL33@johndust_g:
	mov	eax, DWORD PTR _web+12
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	add	esi, esi
	add	esi, esi
	mov	edx, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	xor	edi, edi
	or	eax, edi
	mov	DWORD PTR tv347[ebp], esi
	je	$LN12@johndust_g

; 65   :   { REAL *y = get_coord(v_id);

	mov	eax, DWORD PTR _web+104
	mov	edi, DWORD PTR _dymem
	mov	edi, DWORD PTR [eax+edi+64]
	add	edi, edx

; 66   :     if ( equal_id(v_info->id,v_id) ) continue;

	mov	edx, DWORD PTR _v_info$GSCopy$[ebp]
	cmp	DWORD PTR [edx], ecx
	je	$LN12@johndust_g

; 67   :     for ( i = 0 ; i < SDIM ; i++ ) r[i] = x[i] - y[i];

	xor	edx, edx
	cmp	ebx, 4
	jl	SHORT $LC28@johndust_g
	mov	ecx, DWORD PTR _x$[ebp]
	mov	ebx, DWORD PTR _x$[ebp]
	mov	esi, edi
	neg	esi
	add	ecx, 24					; 00000018H
	add	ebx, esi
	mov	DWORD PTR tv983[ebp], ebx
	lea	ebx, DWORD PTR _r$[ebp+esi]
	mov	DWORD PTR tv985[ebp], ebx
	lea	ebx, DWORD PTR _r$[ebp+esi+8]
	lea	esi, DWORD PTR _r$[ebp+esi+16]
	mov	DWORD PTR tv987[ebp], ebx
	mov	ebx, DWORD PTR _web+616
	lea	eax, DWORD PTR [edi+8]
	mov	DWORD PTR tv989[ebp], esi
	npad	3
$LL29@johndust_g:
	fld	QWORD PTR [ecx-24]
	mov	esi, DWORD PTR tv983[ebp]
	fsub	QWORD PTR [eax-8]
	add	edx, 4
	add	eax, 32					; 00000020H
	add	ecx, 32					; 00000020H
	fstp	QWORD PTR _r$[ebp+edx*8-32]
	fld	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv985[ebp]
	fsub	QWORD PTR [eax-32]
	fstp	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv987[ebp]
	fld	QWORD PTR [ecx-40]
	fsub	QWORD PTR [eax-24]
	fstp	QWORD PTR [esi+eax-32]
	mov	esi, DWORD PTR tv989[ebp]
	fld	QWORD PTR [ecx-32]
	fsub	QWORD PTR [eax-16]
	fstp	QWORD PTR [esi+eax-32]
	lea	esi, DWORD PTR [ebx-3]
	cmp	edx, esi
	jl	SHORT $LL29@johndust_g
	mov	esi, DWORD PTR tv347[ebp]
$LC28@johndust_g:
	cmp	edx, ebx
	jge	SHORT $LN27@johndust_g
	mov	ecx, DWORD PTR _x$[ebp]
	lea	eax, DWORD PTR [edi+edx*8]
	neg	edi
	add	ecx, edi
	mov	DWORD PTR tv983[ebp], ecx
	mov	ecx, ebx
	lea	edi, DWORD PTR _r$[ebp+edi]
	sub	ecx, edx
$LC7@johndust_g:
	mov	edx, DWORD PTR tv983[ebp]
	fld	QWORD PTR [edx+eax]
	add	eax, 8
	dec	ecx
	fsub	QWORD PTR [eax-8]
	fstp	QWORD PTR [edi+eax-8]
	jne	SHORT $LC7@johndust_g
$LN27@johndust_g:

; 68   :     d = sqrt(SDIM_dot(r,r));

	lea	eax, DWORD PTR _r$[ebp]
	push	ebx
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fst	QWORD PTR _d$[ebp]

; 69   :     if ( d >= 2.0 ) continue; /* antipodes have no force */

	fld	QWORD PTR __real@4000000000000000
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jnp	SHORT $LN42@johndust_g

; 70   :     p = (M_PI - asin(d/2))/d;

	fmul	QWORD PTR __real@3fe0000000000000
	call	__CIasin
	fsubr	QWORD PTR __real@400921fb54442d18
	fld	QWORD PTR _d$[ebp]
	fdiv	ST(1), ST(0)

; 71   :     energy += p;

	fld	ST(1)
	fadd	QWORD PTR _energy$[ebp]
	fstp	QWORD PTR _energy$[ebp]

; 72   :     dp = -p/d - 0.5/d/sqrt(1 - d*d/4);

	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fchs
	fstp	QWORD PTR tv941[ebp]
	fld	QWORD PTR __real@3fe0000000000000
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR tv939[ebp]
	fmul	ST(0), ST(0)
	fmul	QWORD PTR __real@3fd0000000000000
	fld1
	fsubrp	ST(1), ST(0)
	call	__CIsqrt
	fdivr	QWORD PTR tv939[ebp]

; 73   :     for ( i = 0 ; i < SDIM ; i++ ) 

	mov	ebx, DWORD PTR _web+616
	xor	eax, eax
	fsubr	QWORD PTR tv941[ebp]
	test	ebx, ebx
	jle	SHORT $LN45@johndust_g
	fdiv	QWORD PTR _d$[ebp]
$LN3@johndust_g:

; 74   :       v_info->grad[0][i] += dp/d*r[i];

	mov	edx, DWORD PTR _v_info$GSCopy$[ebp]
	fld	QWORD PTR _r$[ebp+eax*8]
	mov	ecx, DWORD PTR [edx+1336]
	fmul	ST(0), ST(1)
	mov	edx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [edx+eax*8]
	fadd	QWORD PTR [ecx]
	inc	eax
	fstp	QWORD PTR [ecx]
	mov	ebx, DWORD PTR _web+616
	cmp	eax, ebx
	jl	SHORT $LN3@johndust_g

; 73   :     for ( i = 0 ; i < SDIM ; i++ ) 

	jmp	SHORT $LN45@johndust_g
$LN42@johndust_g:
	mov	ebx, DWORD PTR _web+616
$LN45@johndust_g:
	fstp	ST(0)
$LN12@johndust_g:

; 64   :   FOR_ALL_VERTICES(v_id)

	mov	eax, DWORD PTR _web+12
	mov	ecx, DWORD PTR [esi+eax]
	mov	ecx, DWORD PTR [ecx]
	test	ecx, 268435456				; 10000000H
	jne	$LL33@johndust_g

; 75   :   }
; 76   :   return energy;

	fld	QWORD PTR _energy$[ebp]
	pop	edi
$LN11@johndust_g:

; 77   : } // end REAL johndust_gradient()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_johndust_gradient ENDP
_TEXT	ENDS
PUBLIC	_string_gravity_init
EXTRN	_gen_quant_list:DWORD
EXTRN	_gravity_quantity_num:DWORD
; Function compile flags: /Ogtp
;	COMDAT _string_gravity_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_string_gravity_init PROC				; COMDAT

; 99   :   /* method modulus is gravitation constant */
; 100  :   if ( gravity_quantity_num >= 0 )

	mov	eax, DWORD PTR _gravity_quantity_num
	test	eax, eax
	js	SHORT $LN1@string_gra

; 101  :      GEN_QUANT(gravity_quantity_num)->modulus =
; 102  :          web.gravflag ? web.grav_const : 0.0;

	cmp	DWORD PTR _web+824, 0
	je	SHORT $LN4@string_gra
	fld	QWORD PTR _web+832
	mov	ecx, DWORD PTR _gen_quant_list
	imul	eax, 368				; 00000170H
	fstp	QWORD PTR [eax+ecx+176]

; 103  : } // end string_gravity_init()

	ret	0
$LN4@string_gra:

; 101  :      GEN_QUANT(gravity_quantity_num)->modulus =
; 102  :          web.gravflag ? web.grav_const : 0.0;

	fldz
	mov	ecx, DWORD PTR _gen_quant_list
	imul	eax, 368				; 00000170H
	fstp	QWORD PTR [eax+ecx+176]
$LN1@string_gra:

; 103  : } // end string_gravity_init()

	ret	0
_string_gravity_init ENDP
_TEXT	ENDS
PUBLIC	_get_edge_gdensity
; Function compile flags: /Ogtp
;	COMDAT _get_edge_gdensity
_TEXT	SEGMENT
_gdensity$ = -8						; size = 8
_e_id$ = 8						; size = 4
_get_edge_gdensity PROC					; COMDAT

; 122  : { REAL gdensity;

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 123  :   facetedge_id fe,ffe;
; 124  :   facet_id f_id;
; 125  :   body_id b_id;
; 126  : 
; 127  :   gdensity = 0.0;
; 128  :   fe = get_edge_fe(e_id);

	mov	ecx, DWORD PTR _e_id$[ebp]
	fldz
	mov	edx, DWORD PTR _web+124
	fstp	QWORD PTR _gdensity$[ebp]
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	push	ebx
	push	esi
	push	edi
	test	eax, eax
	jne	SHORT $LN9@get_edge_g
	xor	esi, esi
	jmp	SHORT $LN10@get_edge_g
$LN9@get_edge_g:
	mov	eax, DWORD PTR [eax+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN8@get_edge_g
	xor	eax, 134217728				; 08000000H
$LN8@get_edge_g:
	mov	esi, eax
$LN10@get_edge_g:

; 129  :   f_id = get_fe_facet(fe);

	mov	ebx, DWORD PTR _web+460
	test	esi, 268435456				; 10000000H
	jne	SHORT $LN13@get_edge_g
	mov	edi, DWORD PTR _NULLFACET
	jmp	SHORT $LN12@get_edge_g
$LN13@get_edge_g:
	mov	eax, esi
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+eax*4]
	mov	edi, DWORD PTR [ecx+24]
	test	esi, 134217728				; 08000000H
	je	SHORT $LN12@get_edge_g
	xor	edi, 134217728				; 08000000H
$LN12@get_edge_g:

; 130  :   b_id = get_facet_body(f_id);

	push	edi
	call	_get_facet_body
	add	esp, 4

; 131  :   if ( valid_id(b_id) )

	test	eax, 268435456				; 10000000H
	je	SHORT $LN5@get_edge_g

; 132  :           gdensity += get_body_density(b_id);

	mov	edx, DWORD PTR _web+348
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	fld	QWORD PTR [eax+344]
	fadd	QWORD PTR __real@0000000000000000
	fstp	QWORD PTR _gdensity$[ebp]
$LN5@get_edge_g:

; 133  :   b_id = get_facet_body(facet_inverse(f_id));

	xor	edi, 134217728				; 08000000H
	push	edi
	call	_get_facet_body

; 134  :   if ( valid_id(b_id) )
; 135  :           gdensity -= get_body_density(b_id);

	mov	edi, DWORD PTR _web+348
	add	esp, 4
	test	eax, 268435456				; 10000000H
	je	SHORT $LN4@get_edge_g
	fld	QWORD PTR _gdensity$[ebp]
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+eax*4]
	fsub	QWORD PTR [ecx+344]
	fstp	QWORD PTR _gdensity$[ebp]
$LN4@get_edge_g:

; 136  :   ffe = get_next_facet(fe);

	test	esi, 134217728				; 08000000H
	je	SHORT $LN25@get_edge_g
	mov	edx, esi
	and	edx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [ebx+edx*4]
	mov	eax, DWORD PTR [eax+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN24@get_edge_g
$LN25@get_edge_g:
	mov	ecx, esi
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+ecx*4]
	mov	eax, DWORD PTR [edx+40]
$LN24@get_edge_g:

; 137  :   if ( !equal_id(fe,ffe) )

	cmp	esi, eax
	je	SHORT $LN41@get_edge_g

; 138  :   { f_id = get_fe_facet(ffe);

	test	eax, 268435456				; 10000000H
	jne	SHORT $LN29@get_edge_g
	mov	esi, DWORD PTR _NULLFACET
	jmp	SHORT $LN28@get_edge_g
$LN29@get_edge_g:
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ebx+ecx*4]
	mov	esi, DWORD PTR [edx+24]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN28@get_edge_g
	xor	esi, 134217728				; 08000000H
$LN28@get_edge_g:

; 139  :     b_id = get_facet_body(f_id);

	push	esi
	call	_get_facet_body
	add	esp, 4

; 140  :     if ( valid_id(b_id) )

	test	eax, 268435456				; 10000000H
	je	SHORT $LN43@get_edge_g

; 141  :           gdensity += get_body_density(b_id);

	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edi+eax*4]
	fld	QWORD PTR [eax+344]
	fadd	QWORD PTR _gdensity$[ebp]
	fstp	QWORD PTR _gdensity$[ebp]
$LN43@get_edge_g:

; 142  :     b_id = get_facet_body(facet_inverse(f_id));

	xor	esi, 134217728				; 08000000H
	push	esi
	call	_get_facet_body

; 143  :     if ( valid_id(b_id) )
; 144  :           gdensity -= get_body_density(b_id);

	fld	QWORD PTR _gdensity$[ebp]
	add	esp, 4
	test	eax, 268435456				; 10000000H
	je	SHORT $LN1@get_edge_g
	and	eax, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edi+eax*4]
	fsub	QWORD PTR [ecx+344]
	pop	edi
	pop	esi
	pop	ebx

; 147  : } // end get_edge_gdensity()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN41@get_edge_g:

; 145  :   }
; 146  :   return gdensity;

	fld	QWORD PTR _gdensity$[ebp]
$LN1@get_edge_g:
	pop	edi
	pop	esi
	pop	ebx

; 147  : } // end get_edge_gdensity()

	mov	esp, ebp
	pop	ebp
	ret	0
_get_edge_gdensity ENDP
_TEXT	ENDS
PUBLIC	__real@bfe0000000000000
PUBLIC	_string_gravity_all_q
EXTRN	_gauss1poly:DWORD
EXTRN	_gauss1polyd:DWORD
EXTRN	_gauss1Dwt:DWORD
EXTRN	_edge_ctrl:DWORD
EXTRN	_gauss1D_num:DWORD
;	COMDAT __real@bfe0000000000000
CONST	SEGMENT
__real@bfe0000000000000 DQ 0bfe0000000000000r	; -0.5
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _string_gravity_all_q
_TEXT	SEGMENT
_value$ = -48						; size = 8
tv1612 = -44						; size = 4
tv1600 = -40						; size = 4
tv1884 = -36						; size = 4
tv1617 = -32						; size = 4
tv1507 = -28						; size = 4
tv1586 = -24						; size = 4
tv1292 = -24						; size = 4
_kk$ = -20						; size = 4
_h$ = -16						; size = 4
tv1287 = -12						; size = 4
tv255 = -12						; size = 4
_k$ = -8						; size = 4
_g$ = -4						; size = 4
_e_info$ = 8						; size = 4
_mode$ = 12						; size = 4
_string_gravity_all_q PROC				; COMDAT

; 224  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H

; 225  :   int i,k,kk,m;
; 226  :   REAL **g=NULL,****h=NULL;
; 227  :   REAL value = 0.0;

	fldz

; 228  :   REAL gdensity,w,z;
; 229  :   REAL tang,sum;
; 230  : 
; 231  :   if ( mode == METHOD_GRADIENT ) 

	mov	eax, DWORD PTR _mode$[ebp]
	push	ebx
	fstp	QWORD PTR _value$[ebp]
	mov	ebx, DWORD PTR _e_info$[ebp]
	push	esi
	xor	esi, esi
	mov	DWORD PTR _g$[ebp], esi
	mov	DWORD PTR _h$[ebp], esi
	cmp	eax, 4321				; 000010e1H
	jne	SHORT $LN21@string_gra@2

; 232  :   { g = e_info->grad;

	mov	eax, DWORD PTR [ebx+1336]
	mov	DWORD PTR _g$[ebp], eax
	jmp	SHORT $LN19@string_gra@2
$LN21@string_gra@2:

; 233  :   }
; 234  :   else if ( mode == METHOD_HESSIAN ) 

	cmp	eax, 8763				; 0000223bH
	jne	SHORT $LN19@string_gra@2

; 235  :   { g = e_info->grad;

	mov	ecx, DWORD PTR [ebx+1336]

; 236  :     h = e_info->hess;

	mov	edx, DWORD PTR [ebx+1340]
	mov	DWORD PTR _g$[ebp], ecx
	mov	DWORD PTR _h$[ebp], edx
$LN19@string_gra@2:

; 237  :   }
; 238  : 
; 239  :   gdensity = get_edge_gdensity(e_info->id);

	mov	eax, DWORD PTR [ebx]
	push	eax
	call	_get_edge_gdensity

; 240  :   if ( gdensity == 0.0 ) return 0.0;

	fld	ST(0)
	fldz
	add	esp, 4
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	SHORT $LN18@string_gra@2
	pop	esi
	fstp	ST(1)
	pop	ebx

; 265  :       }
; 266  :   }
; 267  :   return value;
; 268  : } // end string_gravity_all_q()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@string_gra@2:

; 241  : 
; 242  :   for ( m = 0 ; m < gauss1D_num ; m++ )

	xor	ecx, ecx
	cmp	DWORD PTR _gauss1D_num, esi
	jle	$LN49@string_gra@2
	mov	esi, DWORD PTR _edge_ctrl
	fld	QWORD PTR _value$[ebp]
	push	edi
$LN44@string_gra@2:

; 243  :    { z = e_info->gauss_pt[m][1];

	mov	edx, DWORD PTR [ebx+1268]
	mov	eax, DWORD PTR [edx+ecx*4]

; 244  :      w = gdensity*gauss1Dwt[m];

	mov	edx, DWORD PTR _gauss1Dwt
	fld	QWORD PTR [eax+8]
	fld	QWORD PTR [edx+ecx*8]

; 245  :      tang = 0.0;
; 246  :      for ( k = 0 ; k < edge_ctrl ; k++ )

	xor	edx, edx
	fmul	ST(0), ST(4)
	fld	ST(3)
	cmp	esi, 4
	jl	SHORT $LN39@string_gra@2

; 243  :    { z = e_info->gauss_pt[m][1];

	mov	edi, DWORD PTR _gauss1polyd
	lea	eax, DWORD PTR [esi-4]
	shr	eax, 2
	inc	eax
	mov	DWORD PTR tv255[ebp], eax
	add	eax, eax
	add	edi, 8
	add	eax, eax
	lea	edx, DWORD PTR [ebx+420]
	mov	DWORD PTR _k$[ebp], eax

; 245  :      tang = 0.0;
; 246  :      for ( k = 0 ; k < edge_ctrl ; k++ )

$LN36@string_gra@2:

; 247  :           tang += gauss1polyd[k][m]*e_info->x[k][0];

	mov	eax, DWORD PTR [edi-8]
	fld	QWORD PTR [eax+ecx*8]
	mov	ebx, DWORD PTR [edx-4]
	fmul	QWORD PTR [ebx]
	mov	eax, DWORD PTR [edi-4]
	mov	ebx, DWORD PTR [edx]
	add	edx, 16					; 00000010H
	faddp	ST(1), ST(0)
	add	edi, 16					; 00000010H
	dec	DWORD PTR tv255[ebp]
	fld	QWORD PTR [eax+ecx*8]
	fmul	QWORD PTR [ebx]
	mov	eax, DWORD PTR [edx-12]
	mov	ebx, DWORD PTR [edi-16]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax]
	mov	eax, DWORD PTR [edi-12]
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR [edx-8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax+ecx*8]
	fmul	QWORD PTR [ebx]
	faddp	ST(1), ST(0)
	jne	SHORT $LN36@string_gra@2

; 243  :    { z = e_info->gauss_pt[m][1];

	mov	ebx, DWORD PTR _e_info$[ebp]
	mov	edx, DWORD PTR _k$[ebp]
$LN39@string_gra@2:

; 245  :      tang = 0.0;
; 246  :      for ( k = 0 ; k < edge_ctrl ; k++ )

	cmp	edx, esi
	jge	SHORT $LN34@string_gra@2
	lea	edi, DWORD PTR [ebx+edx*4+416]
$LN41@string_gra@2:

; 247  :           tang += gauss1polyd[k][m]*e_info->x[k][0];

	mov	eax, DWORD PTR _gauss1polyd
	mov	eax, DWORD PTR [eax+edx*4]
	mov	ebx, DWORD PTR [edi]
	fld	QWORD PTR [eax+ecx*8]
	fmul	QWORD PTR [ebx]
	inc	edx
	add	edi, 4
	faddp	ST(1), ST(0)
	cmp	edx, esi
	jl	SHORT $LN41@string_gra@2

; 245  :      tang = 0.0;
; 246  :      for ( k = 0 ; k < edge_ctrl ; k++ )

	mov	ebx, DWORD PTR _e_info$[ebp]
$LN34@string_gra@2:

; 248  :      value += w*tang*(-z*z/2);
; 249  :      if ( mode == METHOD_VALUE ) continue;

	cmp	DWORD PTR _mode$[ebp], 1767		; 000006e7H
	fld	ST(2)
	fmul	ST(0), ST(3)
	fmul	QWORD PTR __real@bfe0000000000000
	fld	ST(1)
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(1)
	faddp	ST(5), ST(0)
	je	$LN65@string_gra@2

; 250  : 
; 251  :       sum = (-z)*tang;

	fxch	ST(3)

; 252  :       for ( i = 0 ; i < edge_ctrl ; i++ )

	xor	edi, edi
	fchs
	fld	ST(0)
	fmul	ST(0), ST(2)
	test	esi, esi
	jle	$LN68@string_gra@2
	mov	esi, DWORD PTR _gauss1poly
	fstp	ST(6)
	mov	ebx, DWORD PTR _gauss1polyd
	mov	edx, DWORD PTR _g$[ebp]
	sub	ebx, esi
	sub	esi, edx
	mov	DWORD PTR tv1287[ebp], ebx
	mov	DWORD PTR tv1292[ebp], esi
	jmp	SHORT $LN10@string_gra@2
$LN40@string_gra@2:
	mov	esi, DWORD PTR tv1292[ebp]
	mov	ebx, DWORD PTR tv1287[ebp]
$LN10@string_gra@2:

; 253  :       { g[i][0] += w*gauss1polyd[i][m]*(-z*z/2);

	mov	eax, DWORD PTR [edx]
	add	esi, edx
	mov	ebx, DWORD PTR [esi+ebx]
	fld	QWORD PTR [ebx+ecx*8]

; 254  :          g[i][1] += w*gauss1poly[i][m]*sum;

	mov	esi, DWORD PTR [esi]
	fmul	ST(0), ST(3)
	inc	edi
	add	edx, 4
	fmul	ST(0), ST(4)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	fld	QWORD PTR [esi+ecx*8]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(6)
	fadd	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax+8]
	mov	esi, DWORD PTR _edge_ctrl
	cmp	edi, esi
	jl	SHORT $LN40@string_gra@2

; 252  :       for ( i = 0 ; i < edge_ctrl ; i++ )

	mov	ebx, DWORD PTR _e_info$[ebp]
	fstp	ST(3)
	fstp	ST(4)
	fldz
	fxch	ST(4)
$LN8@string_gra@2:

; 255  :       }
; 256  :       if ( mode == METHOD_GRADIENT ) continue;

	cmp	DWORD PTR _mode$[ebp], 4321		; 000010e1H
	je	$LN79@string_gra@2

; 257  : 
; 258  :       sum = -tang;

	fchs

; 259  :       for ( k = 0 ; k < edge_ctrl ; k++ )

	mov	DWORD PTR _k$[ebp], 0
	test	esi, esi
	jle	$LN79@string_gra@2
	mov	edx, DWORD PTR _gauss1poly
	mov	edi, DWORD PTR _gauss1polyd
	mov	eax, DWORD PTR _h$[ebp]
	sub	edi, edx
	sub	eax, edx
	mov	DWORD PTR tv1586[ebp], edx
	mov	DWORD PTR tv1287[ebp], edi
	mov	DWORD PTR tv1612[ebp], eax
$LN42@string_gra@2:

; 260  :       for ( kk = 0 ; kk < edge_ctrl ; kk++ )

	mov	DWORD PTR _kk$[ebp], 0
	test	esi, esi
	jle	$LN5@string_gra@2
	mov	esi, DWORD PTR [edx+edi]
	fld	ST(0)
	lea	esi, DWORD PTR [esi+ecx*8]
	fmul	ST(0), ST(2)
	mov	DWORD PTR tv1617[ebp], esi
	mov	esi, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+edx]
	lea	ebx, DWORD PTR [esi+ecx*8]
	mov	esi, DWORD PTR _gauss1poly
	sub	esi, edx
	mov	DWORD PTR tv1600[ebp], ebx
	mov	DWORD PTR tv1507[ebp], esi
	jmp	SHORT $LN3@string_gra@2
$LN68@string_gra@2:

; 252  :       for ( i = 0 ; i < edge_ctrl ; i++ )

	fstp	ST(4)
	fstp	ST(3)
	jmp	SHORT $LN8@string_gra@2
$LN38@string_gra@2:

; 260  :       for ( kk = 0 ; kk < edge_ctrl ; kk++ )

	mov	esi, DWORD PTR tv1507[ebp]
$LN3@string_gra@2:

; 241  : 
; 242  :   for ( m = 0 ; m < gauss1D_num ; m++ )

	mov	eax, DWORD PTR [esi+edx]

; 261  :       {
; 262  :          h[k][kk][1][1] += w*sum*gauss1poly[k][m]*gauss1poly[kk][m];

	fld	ST(0)
	fmul	QWORD PTR [ebx]

; 263  :          h[k][kk][0][1] += w*gauss1polyd[k][m]*(-z)*gauss1poly[kk][m];

	mov	ebx, DWORD PTR [edx]
	mov	ebx, DWORD PTR [ebx]
	add	esi, edx
	fmul	QWORD PTR [eax+ecx*8]
	lea	edi, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR [edx]
	mov	eax, DWORD PTR [eax+4]
	fadd	QWORD PTR [eax+8]
	mov	DWORD PTR tv1884[ebp], ebx
	mov	ebx, DWORD PTR tv1617[ebp]
	add	edx, 4
	fstp	QWORD PTR [eax+8]
	fld	QWORD PTR [ebx]

; 264  :          h[k][kk][1][0] += w*gauss1polyd[kk][m]*(-z)*gauss1poly[k][m];

	mov	ebx, DWORD PTR tv1600[ebp]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(4)
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR tv1884[ebp]
	fadd	QWORD PTR [edi+8]
	fstp	QWORD PTR [edi+8]
	mov	edi, DWORD PTR tv1287[ebp]
	mov	esi, DWORD PTR [esi+edi]
	fld	QWORD PTR [esi+ecx*8]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(4)
	fmul	QWORD PTR [ebx]
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR _kk$[ebp]
	mov	esi, DWORD PTR _edge_ctrl
	inc	eax
	mov	DWORD PTR _kk$[ebp], eax
	cmp	eax, esi
	jl	SHORT $LN38@string_gra@2

; 260  :       for ( kk = 0 ; kk < edge_ctrl ; kk++ )

	mov	edx, DWORD PTR tv1586[ebp]
	fstp	ST(0)
	mov	eax, DWORD PTR tv1612[ebp]
$LN5@string_gra@2:

; 259  :       for ( k = 0 ; k < edge_ctrl ; k++ )

	mov	ebx, DWORD PTR _k$[ebp]
	inc	ebx
	add	edx, 4
	mov	DWORD PTR _k$[ebp], ebx
	mov	DWORD PTR tv1586[ebp], edx
	cmp	ebx, esi
	jl	$LN42@string_gra@2
	mov	ebx, DWORD PTR _e_info$[ebp]
$LN79@string_gra@2:
	fstp	ST(1)
$LN94@string_gra@2:

; 241  : 
; 242  :   for ( m = 0 ; m < gauss1D_num ; m++ )

	inc	ecx

; 259  :       for ( k = 0 ; k < edge_ctrl ; k++ )

	fstp	ST(1)
	fstp	ST(0)
	cmp	ecx, DWORD PTR _gauss1D_num
	jl	$LN44@string_gra@2

; 241  : 
; 242  :   for ( m = 0 ; m < gauss1D_num ; m++ )

	pop	edi
	fstp	ST(2)
	pop	esi
	fstp	ST(0)
	pop	ebx

; 265  :       }
; 266  :   }
; 267  :   return value;
; 268  : } // end string_gravity_all_q()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN65@string_gra@2:

; 259  :       for ( k = 0 ; k < edge_ctrl ; k++ )

	fstp	ST(2)
	fstp	ST(2)
	jmp	SHORT $LN94@string_gra@2
$LN49@string_gra@2:

; 241  : 
; 242  :   for ( m = 0 ; m < gauss1D_num ; m++ )

	fstp	ST(1)
	pop	esi
	fstp	ST(0)
	pop	ebx
	fld	QWORD PTR _value$[ebp]

; 265  :       }
; 266  :   }
; 267  :   return value;
; 268  : } // end string_gravity_all_q()

	mov	esp, ebp
	pop	ebp
	ret	0
_string_gravity_all_q ENDP
_TEXT	ENDS
PUBLIC	__real@bff0000000000000
PUBLIC	_string_gravity_all_lagrange
EXTRN	_gauss_lagrange:BYTE
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _string_gravity_all_lagrange
_TEXT	SEGMENT
tv506 = -24						; size = 8
_sign$ = -16						; size = 8
tv1690 = -12						; size = 4
_k$ = -12						; size = 4
_value$ = -8						; size = 8
tv1158 = -4						; size = 4
tv179 = -4						; size = 4
tv1693 = 8						; size = 4
tv1177 = 8						; size = 4
tv992 = 8						; size = 4
tv720 = 8						; size = 4
tv644 = 8						; size = 4
_e_info$ = 8						; size = 4
_mode$ = 12						; size = 4
_string_gravity_all_lagrange PROC			; COMDAT

; 287  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 288  :   REAL gdensity;
; 289  :   REAL sum,y;
; 290  :   int m,i,k,kk;
; 291  :   REAL value = 0.0;
; 292  :   REAL val;
; 293  :   REAL tang;
; 294  :   REAL sign = (get_eattr(e_info->id) & NEGBOUNDARY) ? -1.0 : 1.0;

	mov	edx, DWORD PTR _web+124
	fldz
	push	esi
	fstp	QWORD PTR _value$[ebp]
	push	edi
	mov	edi, DWORD PTR _e_info$[ebp]
	mov	ecx, DWORD PTR [edi]
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 256				; 00000100H
	xor	edx, edx
	or	eax, edx
	je	SHORT $LN21@string_gra@3
	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN82@string_gra@3
$LN21@string_gra@3:
	fld1
$LN82@string_gra@3:

; 295  :   struct gauss_lag *gl = &gauss_lagrange[1][web.gauss1D_order];

	mov	esi, DWORD PTR _web+1592
	fstp	QWORD PTR _sign$[ebp]
	shl	esi, 5
	add	esi, DWORD PTR _gauss_lagrange+4

; 296  : 
; 297  :   gdensity = get_edge_gdensity(e_info->id);

	push	ecx
	call	_get_edge_gdensity

; 298  :   if ( gdensity == 0.0 ) return 0.0;

	fld	ST(0)
	fldz
	add	esp, 4
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	SHORT $LN18@string_gra@3
	pop	edi
	fstp	ST(1)
	pop	esi

; 326  :         }
; 327  :    }
; 328  : 
; 329  :   return value;
; 330  : } // end string_gravity_all_lagrange()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@string_gra@3:

; 299  : 
; 300  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	xor	edx, edx
	cmp	DWORD PTR [esi+4], edx
	jle	$LN47@string_gra@3
	fxch	ST(1)
	push	ebx
	fmul	QWORD PTR _sign$[ebp]
	mov	ebx, DWORD PTR [esi+16]
	fstp	QWORD PTR tv506[ebp]
	fld	QWORD PTR __real@bfe0000000000000
	fld	QWORD PTR _value$[ebp]
	jmp	SHORT $LN17@string_gra@3
$LN38@string_gra@3:
	fldz
	fxch	ST(2)
$LN17@string_gra@3:

; 301  :   { REAL weight = sign*gdensity*gl->gausswt[m];

	mov	eax, DWORD PTR [esi+12]
	fld	QWORD PTR [eax+edx*8]

; 302  :     tang = 0.0;
; 303  :     for ( k = 0 ; k < gl->lagpts ; k++ )

	xor	ecx, ecx
	fmul	QWORD PTR tv506[ebp]
	cmp	ebx, 4
	jl	SHORT $LC34@string_gra@3

; 301  :   { REAL weight = sign*gdensity*gl->gausswt[m];

	mov	ecx, DWORD PTR [esi+24]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	eax, DWORD PTR [eax]
	lea	ecx, DWORD PTR [edi+420]
	mov	DWORD PTR tv992[ebp], ecx
	lea	ecx, DWORD PTR [ebx-4]
	shr	ecx, 2
	inc	ecx
	mov	DWORD PTR tv179[ebp], ecx
	add	ecx, ecx
	add	eax, 16					; 00000010H
	add	ecx, ecx
	mov	DWORD PTR _k$[ebp], ecx

; 302  :     tang = 0.0;
; 303  :     for ( k = 0 ; k < gl->lagpts ; k++ )

$LN35@string_gra@3:

; 304  :        tang += gl->gpolypart[m][0][k]*e_info->x[k][0];

	mov	ecx, DWORD PTR tv992[ebp]
	mov	ecx, DWORD PTR [ecx-4]
	fld	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv992[ebp]
	fmul	QWORD PTR [eax-16]
	mov	ecx, DWORD PTR [ecx]
	add	eax, 32					; 00000020H
	faddp	ST(4), ST(0)
	fld	QWORD PTR [eax-40]
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv992[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	faddp	ST(4), ST(0)
	fld	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv992[ebp]
	fmul	QWORD PTR [eax-32]
	mov	ecx, DWORD PTR [ecx+8]
	add	DWORD PTR tv992[ebp], 16		; 00000010H
	dec	DWORD PTR tv179[ebp]
	faddp	ST(4), ST(0)
	fld	QWORD PTR [ecx]
	fmul	QWORD PTR [eax-24]
	faddp	ST(4), ST(0)
	jne	SHORT $LN35@string_gra@3

; 301  :   { REAL weight = sign*gdensity*gl->gausswt[m];

	mov	ecx, DWORD PTR _k$[ebp]
$LC34@string_gra@3:

; 302  :     tang = 0.0;
; 303  :     for ( k = 0 ; k < gl->lagpts ; k++ )

	cmp	ecx, ebx
	jge	SHORT $LN33@string_gra@3
	mov	eax, DWORD PTR [esi+24]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [eax]
	lea	eax, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR tv1158[ebp], eax
	lea	eax, DWORD PTR [edi+ecx*4+416]
	mov	DWORD PTR tv1177[ebp], eax
	mov	eax, ebx
	sub	eax, ecx
$LN42@string_gra@3:

; 304  :        tang += gl->gpolypart[m][0][k]*e_info->x[k][0];

	mov	ecx, DWORD PTR tv1177[ebp]
	mov	ecx, DWORD PTR [ecx]
	fld	QWORD PTR [ecx]
	mov	ecx, DWORD PTR tv1158[ebp]
	fmul	QWORD PTR [ecx]
	add	DWORD PTR tv1177[ebp], 4
	add	DWORD PTR tv1158[ebp], 8
	dec	eax
	faddp	ST(4), ST(0)
	jne	SHORT $LN42@string_gra@3
$LN33@string_gra@3:

; 305  :     y = e_info->gauss_pt[m][1];
; 306  :     val = -y*y/2; 
; 307  :     value += weight*val*tang;
; 308  :     if ( mode == METHOD_VALUE ) continue;

	cmp	DWORD PTR _mode$[ebp], 1767		; 000006e7H
	mov	eax, DWORD PTR [edi+1268]
	mov	ecx, DWORD PTR [eax+edx*4]
	fld	QWORD PTR [ecx+8]
	fld	ST(0)
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(4)
	fld	ST(0)
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(6)
	faddp	ST(4), ST(0)
	je	$LN61@string_gra@3

; 309  :             
; 310  :     sum = -y*tang;

	fld	ST(1)

; 311  :     for ( i = 0 ; i < gl->lagpts ; i++ )

	xor	eax, eax
	fmul	ST(0), ST(6)
	fchs
	test	ebx, ebx
	jle	SHORT $LN65@string_gra@3
$LN10@string_gra@3:

; 312  :     { e_info->grad[i][0] += weight*gl->gpolypart[m][0][i]*val;

	mov	ecx, DWORD PTR [edi+1336]
	mov	ebx, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR [esi+24]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [ecx]
	fld	QWORD PTR [ecx+eax*8]
	inc	eax
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(2)
	fadd	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]

; 313  :       e_info->grad[i][1] += weight*gl->gpoly[m][i]*sum;

	mov	ebx, DWORD PTR [esi+20]
	mov	ebx, DWORD PTR [ebx+edx*4]
	fld	QWORD PTR [ebx+eax*8-8]
	mov	ecx, DWORD PTR [edi+1336]
	mov	ecx, DWORD PTR [ecx+eax*4-4]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [ecx+8]
	fstp	QWORD PTR [ecx+8]
	mov	ebx, DWORD PTR [esi+16]
	cmp	eax, ebx
	jl	SHORT $LN10@string_gra@3
$LN65@string_gra@3:

; 314  :     }
; 315  :     if ( mode == METHOD_GRADIENT ) continue;

	cmp	DWORD PTR _mode$[ebp], 4321		; 000010e1H
	fstp	ST(1)
	fstp	ST(0)
	je	$LN76@string_gra@3

; 316  : 
; 317  :     sum = -tang;
; 318  :     for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	ebx, DWORD PTR [esi+16]
	fxch	ST(4)
	xor	ecx, ecx
	fchs
	test	ebx, ebx
	jle	$LN76@string_gra@3
$LN39@string_gra@3:

; 319  :       for ( kk = 0 ; kk < gl->lagpts ; kk++ )

	xor	eax, eax
	test	ebx, ebx
	jle	$LN5@string_gra@3
	fld	ST(0)
	fmul	ST(0), ST(2)
	fld	ST(5)
	fchs
$LN3@string_gra@3:

; 320  :         { e_info->hess[k][kk][1][1] += weight*
; 321  :                     sum*gl->gpoly[m][k]*gl->gpoly[m][kk];

	mov	ebx, DWORD PTR [esi+20]
	mov	ebx, DWORD PTR [ebx+edx*4]
	mov	DWORD PTR tv644[ebp], ebx
	mov	ebx, DWORD PTR [edi+1340]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	mov	ebx, DWORD PTR [ebx+eax*4]
	mov	ebx, DWORD PTR [ebx+4]
	mov	DWORD PTR tv1690[ebp], ebx
	mov	ebx, DWORD PTR tv644[ebp]
	fld	QWORD PTR [ebx+ecx*8]
	inc	eax
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ebx+eax*8-8]
	mov	ebx, DWORD PTR tv1690[ebp]
	fadd	QWORD PTR [ebx+8]
	fstp	QWORD PTR [ebx+8]

; 322  :           e_info->hess[k][kk][0][1] += weight*
; 323  :                       gl->gpolypart[m][0][k]*(-y)*gl->gpoly[m][kk];

	mov	ebx, DWORD PTR [edi+1340]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	mov	ebx, DWORD PTR [ebx+eax*4-4]
	mov	ebx, DWORD PTR [ebx]
	mov	DWORD PTR tv1693[ebp], ebx
	mov	ebx, DWORD PTR [esi+24]
	mov	ebx, DWORD PTR [ebx+edx*4]
	mov	ebx, DWORD PTR [ebx]
	fld	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR [esi+20]
	mov	ebx, DWORD PTR [ebx+edx*4]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [ebx+eax*8-8]
	mov	ebx, DWORD PTR tv1693[ebp]
	fadd	QWORD PTR [ebx+8]
	fstp	QWORD PTR [ebx+8]

; 324  :           e_info->hess[k][kk][1][0] += weight*
; 325  :                       gl->gpolypart[m][0][kk]*(-y)*gl->gpoly[m][k];

	mov	ebx, DWORD PTR [edi+1340]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	mov	ebx, DWORD PTR [ebx+eax*4-4]
	mov	ebx, DWORD PTR [ebx+4]
	mov	DWORD PTR tv720[ebp], ebx
	mov	ebx, DWORD PTR [esi+24]
	mov	ebx, DWORD PTR [ebx+edx*4]
	mov	ebx, DWORD PTR [ebx]
	fld	QWORD PTR [ebx+eax*8-8]
	mov	ebx, DWORD PTR [esi+20]
	mov	ebx, DWORD PTR [ebx+edx*4]
	fmul	ST(0), ST(4)
	fmul	ST(0), ST(1)
	fmul	QWORD PTR [ebx+ecx*8]
	mov	ebx, DWORD PTR tv720[ebp]
	fadd	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]
	cmp	eax, DWORD PTR [esi+16]
	jl	$LN3@string_gra@3

; 319  :       for ( kk = 0 ; kk < gl->lagpts ; kk++ )

	fstp	ST(0)
	fstp	ST(0)
$LN5@string_gra@3:

; 316  : 
; 317  :     sum = -tang;
; 318  :     for ( k = 0 ; k < gl->lagpts ; k++ )

	mov	ebx, DWORD PTR [esi+16]
	inc	ecx
	cmp	ecx, ebx
	jl	$LN39@string_gra@3
$LN76@string_gra@3:

; 319  :       for ( kk = 0 ; kk < gl->lagpts ; kk++ )

	fstp	ST(1)
	fstp	ST(3)
$LN83@string_gra@3:
	inc	edx
	fstp	ST(2)
	cmp	edx, DWORD PTR [esi+4]
	jl	$LN38@string_gra@3

; 299  : 
; 300  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	pop	ebx
	fstp	ST(0)
	pop	edi
	pop	esi

; 326  :         }
; 327  :    }
; 328  : 
; 329  :   return value;
; 330  : } // end string_gravity_all_lagrange()

	mov	esp, ebp
	pop	ebp
	ret	0
$LN61@string_gra@3:

; 316  : 
; 317  :     sum = -tang;
; 318  :     for ( k = 0 ; k < gl->lagpts ; k++ )

	fstp	ST(2)
	fstp	ST(4)
	fstp	ST(0)
	jmp	SHORT $LN83@string_gra@3
$LN47@string_gra@3:

; 299  : 
; 300  :   for ( m = 0 ; m < gl->gnumpts ; m++ )

	fstp	ST(1)
	pop	edi
	fstp	ST(0)
	pop	esi
	fld	QWORD PTR _value$[ebp]

; 326  :         }
; 327  :    }
; 328  : 
; 329  :   return value;
; 330  : } // end string_gravity_all_lagrange()

	mov	esp, ebp
	pop	ebp
	ret	0
_string_gravity_all_lagrange ENDP
_TEXT	ENDS
PUBLIC	_curvature_binormal_init
; Function compile flags: /Ogtp
;	COMDAT _curvature_binormal_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_curvature_binormal_init PROC				; COMDAT

; 396  : }

	ret	0
_curvature_binormal_init ENDP
_TEXT	ENDS
PUBLIC	_curvature_binormal_energy
; Function compile flags: /Ogtp
;	COMDAT _curvature_binormal_energy
_TEXT	SEGMENT
_v_info$ = 8						; size = 4
_curvature_binormal_energy PROC				; COMDAT

; 399  : { return 0.0;

	fldz

; 400  : }

	ret	0
_curvature_binormal_energy ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_curvature_binormal_force
EXTRN	_cross_prod:PROC
EXTRN	_get_edge_side:PROC
; Function compile flags: /Ogtp
;	COMDAT _curvature_binormal_force
_TEXT	SEGMENT
_l1$ = -112						; size = 8
_sign$ = -104						; size = 4
_s2$ = -100						; size = 48
_s1$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_v_info$ = 8						; size = 4
_curvature_binormal_force PROC				; COMDAT

; 403  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 404  :   vertex_id v_id = v_info->id;
; 405  :   edge_id e1,e2;
; 406  :   REAL s1[MAXCOORD],s2[MAXCOORD];
; 407  :   REAL l1,l2;
; 408  :   REAL denom;
; 409  :   int i;
; 410  :   int sign = 1;  /* orientation correction */
; 411  : 
; 412  :   e1 = get_vertex_edge(v_id);

	mov	ecx, DWORD PTR _web+12
	push	esi
	mov	esi, DWORD PTR _v_info$[ebp]
	mov	eax, DWORD PTR [esi]
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR [edx+28]

; 413  :   e2 = get_next_tail_edge(e1);

	mov	eax, ecx
	push	edi
	mov	edi, DWORD PTR _web+124
	shr	eax, 27					; 0000001bH
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [edi+edx*4]
	and	eax, 1
	mov	edi, DWORD PTR [edx+eax*4+32]
	mov	DWORD PTR _sign$[ebp], 1

; 414  :   if ( inverted(e1) ) { invert(e1); sign = -1; }

	test	eax, eax
	je	SHORT $LN5@curvature_
	xor	ecx, 134217728				; 08000000H
	mov	DWORD PTR _sign$[ebp], -1
$LN5@curvature_:

; 415  :   if ( inverted(e2) ) invert(e2);

	test	edi, 134217728				; 08000000H
	je	SHORT $LN4@curvature_
	xor	edi, 134217728				; 08000000H
$LN4@curvature_:

; 416  :   get_edge_side(e1,s1);

	lea	eax, DWORD PTR _s1$[ebp]
	push	eax
	push	ecx
	call	_get_edge_side

; 417  :   get_edge_side(e2,s2);

	lea	ecx, DWORD PTR _s2$[ebp]
	push	ecx
	push	edi
	call	_get_edge_side

; 418  :   cross_prod(s1,s2,v_info->grad[0]);

	mov	edx, DWORD PTR [esi+1336]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR _s2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _s1$[ebp]
	push	edx
	call	_cross_prod

; 419  :   l1 = sqrt(SDIM_dot(s1,s1));

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _s1$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	add	esp, 40					; 00000028H
	call	__CIsqrt
	fstp	QWORD PTR _l1$[ebp]

; 420  :   l2 = sqrt(SDIM_dot(s2,s2));

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _s2$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt

; 421  :   denom = sign*l1*l2*(l1+l2)/2;

	fild	DWORD PTR _sign$[ebp]
	fld	QWORD PTR _l1$[ebp]

; 422  :   for ( i = 0 ; i < SDIM ; i++ )

	xor	eax, eax
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(2)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	fmul	QWORD PTR __real@3fe0000000000000
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN13@curvature_
$LN3@curvature_:

; 423  :      v_info->grad[0][i] /= denom;

	mov	ecx, DWORD PTR [esi+1336]
	mov	edx, DWORD PTR [ecx]
	fld	QWORD PTR [edx+eax*8]
	lea	ecx, DWORD PTR [edx+eax*8]
	fdiv	ST(0), ST(1)
	inc	eax
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN3@curvature_
$LN13@curvature_:

; 424  :   return 0.0; /* energy */
; 425  : } // end curvature_binormal_force()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(0)
	fldz
	pop	edi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_curvature_binormal_force ENDP
_TEXT	ENDS
PUBLIC	_ddd_gamma_sq_init
; Function compile flags: /Ogtp
;	COMDAT _ddd_gamma_sq_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_ddd_gamma_sq_init PROC					; COMDAT

; 447  : }

	ret	0
_ddd_gamma_sq_init ENDP
_TEXT	ENDS
PUBLIC	__real@4042000000000000
PUBLIC	__$ArrayPad$
PUBLIC	_ddd_gamma_sq_energy
;	COMDAT __real@4042000000000000
CONST	SEGMENT
__real@4042000000000000 DQ 04042000000000000r	; 36
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _ddd_gamma_sq_energy
_TEXT	SEGMENT
tv1431 = -108						; size = 4
tv1452 = -104						; size = 4
_s2$ = -100						; size = 8
tv1448 = -92						; size = 4
tv1426 = -88						; size = 4
tv1573 = -84						; size = 4
_side2$ = -80						; size = 4
tv1456 = -76						; size = 4
tv1460 = -72						; size = 4
_i$ = -68						; size = 4
_side3$ = -64						; size = 4
tv684 = -60						; size = 8
_s1$ = -60						; size = 8
_dddgamma$ = -52					; size = 48
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_ddd_gamma_sq_energy PROC				; COMDAT

; 450  : { REAL *side1,*side2,*side3;

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _e_info$[ebp]

; 451  :   REAL s1,s2,s3;
; 452  :   REAL dddgamma[MAXCOORD];
; 453  :   int i;
; 454  : 
; 455  :   side1 = e_info->sides[0][1];

	mov	eax, DWORD PTR [eax+1276]
	mov	eax, DWORD PTR [eax]

; 456  :   side2 = e_info->sides[0][0];
; 457  :   side3 = e_info->sides[0][2];
; 458  :   s1 = sqrt(SDIM_dot(side1,side1));

	mov	ecx, DWORD PTR _web+616
	push	ebx
	mov	ebx, DWORD PTR [eax+8]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	push	edi
	mov	edi, DWORD PTR [eax]
	push	ecx
	push	esi
	push	esi
	mov	DWORD PTR _side2$[ebp], edi
	mov	DWORD PTR _side3$[ebp], ebx
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR _s1$[ebp]

; 459  :   s2 = sqrt(SDIM_dot(side2,side2));

	mov	edx, DWORD PTR _web+616
	push	edx
	push	edi
	push	edi
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR _s2$[ebp]

; 460  :   s3 = sqrt(SDIM_dot(side3,side3));

	mov	eax, DWORD PTR _web+616
	push	eax
	push	ebx
	push	ebx
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt

; 461  :   for ( i = 0 ; i < SDIM ; i++ )

	mov	ecx, DWORD PTR _web+616
	xor	eax, eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	ecx, 4
	jl	$LN11@ddd_gamma_

; 462  :      dddgamma[i] = side1[i]/s1/s2/(s2+s3)
; 463  :                       - (side1[i]+side2[i])/s2/s3/(s1+s2)
; 464  :                       + (side1[i]+side2[i]+side3[i])/s3/(s2+s3)/(s1+s2+s3);

	mov	edx, ebx
	fld	ST(0)
	fld	QWORD PTR _s2$[ebp]
	mov	ebx, edi
	sub	ebx, esi
	fadd	ST(1), ST(0)
	mov	DWORD PTR tv1426[ebp], ebx
	fld	ST(0)
	fld	QWORD PTR _s1$[ebp]
	mov	ebx, edx
	sub	ebx, esi
	fadd	ST(1), ST(0)
	mov	DWORD PTR tv1431[ebp], ebx
	lea	ebx, DWORD PTR _dddgamma$[ebp]
	sub	ebx, esi
	fld	ST(1)
	mov	DWORD PTR tv1448[ebp], ebx
	fadd	ST(0), ST(5)
	lea	ebx, DWORD PTR _dddgamma$[ebp+8]
	sub	ebx, esi
	mov	DWORD PTR tv1452[ebp], ebx
	fstp	QWORD PTR tv684[ebp]
	lea	ebx, DWORD PTR _dddgamma$[ebp+16]
	sub	ebx, esi
	lea	ecx, DWORD PTR [edi+16]
	mov	DWORD PTR tv1456[ebp], ebx
	mov	ebx, edx
	sub	ebx, edi
	lea	edi, DWORD PTR _dddgamma$[ebp]
	sub	edi, edx
	mov	DWORD PTR tv1573[ebp], edi
	mov	edi, DWORD PTR _web+616
	add	edi, -4					; fffffffcH
	shr	edi, 2
	inc	edi
	mov	DWORD PTR tv1460[ebp], ebx
	lea	ebx, DWORD PTR [edi*4]
	lea	eax, DWORD PTR [esi+8]
	mov	DWORD PTR _i$[ebp], ebx
$LN10@ddd_gamma_:
	fld	QWORD PTR [ecx-16]
	mov	ebx, DWORD PTR tv1573[ebp]
	fadd	QWORD PTR [eax-8]
	fld	QWORD PTR [eax-8]
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(5)
	fld	ST(1)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(7)
	fdiv	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(5)
	fdiv	QWORD PTR tv684[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR tv1426[ebp]
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv1431[ebp]
	fadd	QWORD PTR [eax]
	fld	QWORD PTR [eax]
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(5)
	fld	ST(1)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(7)
	fdiv	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ebx+eax]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	mov	ebx, DWORD PTR tv1448[ebp]
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(5)
	fdiv	QWORD PTR tv684[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv1460[ebp]
	fld	QWORD PTR [ecx]
	fadd	QWORD PTR [eax+8]
	fld	QWORD PTR [eax+8]
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(5)
	fld	ST(1)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(7)
	fdiv	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ebx+ecx]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	mov	ebx, DWORD PTR tv1452[ebp]
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(5)
	fdiv	QWORD PTR tv684[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [ebx+eax]
	fld	QWORD PTR [ecx+8]
	fadd	QWORD PTR [eax+16]
	fld	QWORD PTR [eax+16]
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(5)
	fld	ST(1)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(7)
	fdiv	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx+24]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(5)
	fdiv	QWORD PTR tv684[ebp]
	faddp	ST(1), ST(0)
	mov	ebx, DWORD PTR tv1456[ebp]
	fstp	QWORD PTR [ebx+eax]
	add	eax, 32					; 00000020H
	add	edx, 32					; 00000020H
	add	ecx, 32					; 00000020H
	dec	edi
	jne	$LN10@ddd_gamma_
	mov	edi, DWORD PTR _side2$[ebp]
	fstp	ST(3)
	mov	ebx, DWORD PTR _side3$[ebp]
	fstp	ST(0)
	mov	ecx, DWORD PTR _web+616
	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LC9@ddd_gamma_
$LN11@ddd_gamma_:
	fld	QWORD PTR _s1$[ebp]
	fld	QWORD PTR _s2$[ebp]
$LC9@ddd_gamma_:

; 461  :   for ( i = 0 ; i < SDIM ; i++ )

	cmp	eax, ecx
	jge	SHORT $LN20@ddd_gamma_
	fld	ST(2)
	lea	edx, DWORD PTR _dddgamma$[ebp]
	fadd	ST(0), ST(1)
	sub	edi, esi
	fld	ST(1)
	sub	ebx, esi
	fadd	ST(0), ST(3)
	sub	edx, esi
	sub	ecx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [esi+eax*8]
	fld	ST(0)
	fadd	ST(0), ST(5)
	fstp	QWORD PTR tv684[ebp]
$LC3@ddd_gamma_:

; 462  :      dddgamma[i] = side1[i]/s1/s2/(s2+s3)
; 463  :                       - (side1[i]+side2[i])/s2/s3/(s1+s2)
; 464  :                       + (side1[i]+side2[i]+side3[i])/s3/(s2+s3)/(s1+s2+s3);

	fld	QWORD PTR [eax+edi]
	add	eax, 8
	dec	ecx
	fadd	QWORD PTR [eax-8]
	fld	QWORD PTR [eax-8]
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(3)
	fld	ST(1)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(7)
	fdiv	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+ebx-8]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(3)
	fdiv	QWORD PTR tv684[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [eax+edx-8]
	jne	SHORT $LC3@ddd_gamma_

; 461  :   for ( i = 0 ; i < SDIM ; i++ )

	mov	ecx, DWORD PTR _web+616
	fstp	ST(4)
	fstp	ST(1)
	fstp	ST(1)
	fstp	ST(0)
	jmp	SHORT $LN26@ddd_gamma_
$LN20@ddd_gamma_:
	fstp	ST(2)
	fstp	ST(1)
$LN26@ddd_gamma_:

; 465  :   return 36*SDIM_dot(dddgamma,dddgamma)*s2;

	push	ecx
	fstp	ST(0)
	lea	ecx, DWORD PTR _dddgamma$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	fmul	QWORD PTR __real@4042000000000000

; 466  : } // end ddd_gamma_sq_energy()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 12					; 0000000cH
	fmul	QWORD PTR _s2$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_ddd_gamma_sq_energy ENDP
_TEXT	ENDS
PUBLIC	_e_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_ddd_gamma_sq_gradient
; Function compile flags: /Ogtp
;	COMDAT _ddd_gamma_sq_gradient
_TEXT	SEGMENT
tv3147 = -1328						; size = 8
_energy$ = -1320					; size = 8
tv1633 = -1312						; size = 8
tv3143 = -1304						; size = 8
_s3$ = -1296						; size = 8
tv1626 = -1288						; size = 8
tv2485 = -1284						; size = 4
tv1627 = -1280						; size = 8
tv2506 = -1276						; size = 4
_s1$ = -1272						; size = 8
_e_info$GSCopy$ = -1264					; size = 4
tv1622 = -1260						; size = 8
tv3312 = -1256						; size = 4
_i$ = -1256						; size = 4
tv3680 = -1252						; size = 8
tv3655 = -1252						; size = 8
tv2510 = -1248						; size = 4
tv1473 = -1244						; size = 8
_s2$ = -1244						; size = 8
_side2$ = -1236						; size = 4
tv1484 = -1232						; size = 8
tv1463 = -1232						; size = 8
tv2514 = -1224						; size = 4
tv158 = -1224						; size = 4
tv4461 = -1220						; size = 4
tv2531 = -1220						; size = 4
tv726 = -1220						; size = 4
tv1320 = -1216						; size = 4
_side3$ = -1216						; size = 4
tv4459 = -1212						; size = 4
tv2480 = -1212						; size = 4
tv181 = -1212						; size = 4
tv4457 = -1208						; size = 4
tv3521 = -1208						; size = 4
tv2885 = -1208						; size = 4
tv2502 = -1208						; size = 4
_Ddddgamma$ = -1204					; size = 1152
_dddgamma$ = -52					; size = 48
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_ddd_gamma_sq_gradient PROC				; COMDAT

; 469  : { REAL *side1,*side2,*side3;

	push	ebp
	mov	ebp, esp
	sub	esp, 1328				; 00000530H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _e_info$[ebp]

; 470  :   REAL s1,s2,s3;
; 471  :   REAL dddgamma[MAXCOORD];
; 472  :   REAL Ddddgamma[4][MAXCOORD][MAXCOORD];
; 473  :   REAL energy;
; 474  :   int i,j,k;
; 475  : 
; 476  :   side1 = e_info->sides[0][1];
; 477  :   side2 = e_info->sides[0][0];
; 478  :   side3 = e_info->sides[0][2];
; 479  :   s1 = sqrt(SDIM_dot(side1,side1));

	mov	ecx, DWORD PTR _web+616
	push	ebx
	push	esi
	mov	DWORD PTR _e_info$GSCopy$[ebp], eax
	mov	eax, DWORD PTR [eax+1276]
	mov	eax, DWORD PTR [eax]
	mov	esi, DWORD PTR [eax+4]
	mov	ebx, DWORD PTR [eax+8]
	push	edi
	mov	edi, DWORD PTR [eax]
	push	ecx
	push	esi
	push	esi
	mov	DWORD PTR _side2$[ebp], edi
	mov	DWORD PTR _side3$[ebp], ebx
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR _s1$[ebp]

; 480  :   s2 = sqrt(SDIM_dot(side2,side2));

	mov	edx, DWORD PTR _web+616
	push	edx
	push	edi
	push	edi
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fstp	QWORD PTR _s2$[ebp]

; 481  :   s3 = sqrt(SDIM_dot(side3,side3));

	mov	eax, DWORD PTR _web+616
	push	eax
	push	ebx
	push	ebx
	call	_dot
	add	esp, 12					; 0000000cH
	call	__CIsqrt
	fst	QWORD PTR _s3$[ebp]

; 482  :   for ( i = 0 ; i < SDIM ; i++ )

	xor	edx, edx
	cmp	DWORD PTR _web+616, 4
	jl	$LN60@ddd_gamma_@2

; 483  :      dddgamma[i]  = side1[i]/s1/s2/(s2+s3)
; 484  :                       - (side1[i]+side2[i])/s2/s3/(s1+s2)
; 485  :                       + (side1[i]+side2[i]+side3[i])/s3/(s2+s3)/(s1+s2+s3);

	mov	edx, ebx
	fld	ST(0)
	fld	QWORD PTR _s2$[ebp]
	mov	ebx, edi
	sub	ebx, esi
	fadd	ST(1), ST(0)
	mov	DWORD PTR tv2480[ebp], ebx
	fld	ST(0)
	fld	QWORD PTR _s1$[ebp]
	mov	ebx, edx
	sub	ebx, esi
	fadd	ST(1), ST(0)
	mov	DWORD PTR tv2485[ebp], ebx
	lea	ebx, DWORD PTR _dddgamma$[ebp]
	sub	ebx, esi
	fld	ST(1)
	mov	DWORD PTR tv2502[ebp], ebx
	fadd	ST(0), ST(5)
	lea	ebx, DWORD PTR _dddgamma$[ebp+8]
	sub	ebx, esi
	mov	DWORD PTR tv2506[ebp], ebx
	fstp	QWORD PTR tv1484[ebp]
	lea	ebx, DWORD PTR _dddgamma$[ebp+16]
	sub	ebx, esi
	lea	ecx, DWORD PTR [edi+16]
	mov	DWORD PTR tv2510[ebp], ebx
	mov	ebx, edx
	sub	ebx, edi
	lea	edi, DWORD PTR _dddgamma$[ebp]
	sub	edi, edx
	mov	DWORD PTR tv2531[ebp], edi
	mov	edi, DWORD PTR _web+616
	add	edi, -4					; fffffffcH
	shr	edi, 2
	inc	edi
	mov	DWORD PTR tv2514[ebp], ebx
	lea	ebx, DWORD PTR [edi*4]
	lea	eax, DWORD PTR [esi+8]
	mov	DWORD PTR _i$[ebp], ebx
$LN55@ddd_gamma_@2:
	fld	QWORD PTR [ecx-16]
	mov	ebx, DWORD PTR tv2531[ebp]
	fadd	QWORD PTR [eax-8]
	fld	QWORD PTR [eax-8]
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(5)
	fld	ST(1)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(7)
	fdiv	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR [edx]
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(5)
	fdiv	QWORD PTR tv1484[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR tv2480[ebp]
	fld	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv2485[ebp]
	fadd	QWORD PTR [eax]
	fld	QWORD PTR [eax]
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(5)
	fld	ST(1)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(7)
	fdiv	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ebx+eax]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	mov	ebx, DWORD PTR tv2502[ebp]
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(5)
	fdiv	QWORD PTR tv1484[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv2514[ebp]
	fld	QWORD PTR [ecx]
	fadd	QWORD PTR [eax+8]
	fld	QWORD PTR [eax+8]
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(5)
	fld	ST(1)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(7)
	fdiv	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ebx+ecx]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	mov	ebx, DWORD PTR tv2506[ebp]
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(5)
	fdiv	QWORD PTR tv1484[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR tv2510[ebp]
	fld	QWORD PTR [ecx+8]
	fadd	QWORD PTR [eax+16]
	fld	QWORD PTR [eax+16]
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(5)
	fld	ST(1)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(7)
	fdiv	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [edx+24]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(5)
	fdiv	QWORD PTR tv1484[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [ebx+eax]
	add	eax, 32					; 00000020H
	add	edx, 32					; 00000020H
	add	ecx, 32					; 00000020H
	dec	edi
	jne	$LN55@ddd_gamma_@2
	mov	edx, DWORD PTR _i$[ebp]
	fstp	ST(3)
	mov	edi, DWORD PTR _side2$[ebp]
	fstp	ST(0)
	mov	ebx, DWORD PTR _side3$[ebp]
	jmp	SHORT $LC54@ddd_gamma_@2
$LN60@ddd_gamma_@2:
	fld	QWORD PTR _s1$[ebp]
	fld	QWORD PTR _s2$[ebp]
$LC54@ddd_gamma_@2:

; 482  :   for ( i = 0 ; i < SDIM ; i++ )

	cmp	edx, DWORD PTR _web+616
	jge	$LN76@ddd_gamma_@2
	fld	ST(2)
	lea	ecx, DWORD PTR _dddgamma$[ebp]
	fadd	ST(0), ST(1)
	sub	ecx, esi
	fld	ST(1)
	mov	DWORD PTR tv2502[ebp], ecx
	mov	ecx, DWORD PTR _web+616
	fadd	ST(0), ST(3)
	sub	edi, esi
	sub	ebx, esi
	fld	ST(0)
	lea	eax, DWORD PTR [esi+edx*8]
	fadd	ST(0), ST(5)
	sub	ecx, edx
	mov	edx, DWORD PTR tv2502[ebp]
	fstp	QWORD PTR tv1484[ebp]
$LC30@ddd_gamma_@2:

; 483  :      dddgamma[i]  = side1[i]/s1/s2/(s2+s3)
; 484  :                       - (side1[i]+side2[i])/s2/s3/(s1+s2)
; 485  :                       + (side1[i]+side2[i]+side3[i])/s3/(s2+s3)/(s1+s2+s3);

	fld	QWORD PTR [eax+edi]
	add	eax, 8
	dec	ecx
	fadd	QWORD PTR [eax-8]
	fld	QWORD PTR [eax-8]
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(3)
	fld	ST(1)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(7)
	fdiv	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+ebx-8]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(3)
	fdiv	QWORD PTR tv1484[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [eax+edx-8]
	jne	SHORT $LC30@ddd_gamma_@2

; 482  :   for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(4)
	fstp	ST(1)
	fstp	ST(1)
	fstp	ST(0)
$LN124@ddd_gamma_@2:

; 486  : 
; 487  :   energy = 36*SDIM_dot(dddgamma,dddgamma)*s2;

	mov	ecx, DWORD PTR _web+616
	fstp	ST(0)
	push	ecx
	lea	edx, DWORD PTR _dddgamma$[ebp]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	fld	QWORD PTR __real@4042000000000000
	mov	ebx, DWORD PTR _web+616
	fmul	ST(1), ST(0)
	fld	QWORD PTR _s2$[ebp]
	lea	edx, DWORD PTR _Ddddgamma$[ebp]
	add	esp, 12					; 0000000cH
	fmul	ST(2), ST(0)
	mov	DWORD PTR tv2885[ebp], edx
	fxch	ST(2)
	mov	DWORD PTR tv158[ebp], 4
	fst	QWORD PTR _energy$[ebp]
$LN27@ddd_gamma_@2:

; 490  :     for ( i = 0 ; i < SDIM ; i++ )

	test	ebx, ebx
	jle	SHORT $LN26@ddd_gamma_@2
	mov	DWORD PTR tv181[ebp], ebx
$LN24@ddd_gamma_@2:

; 491  :      for ( j = 0 ; j < SDIM ; j++ )

	lea	ecx, DWORD PTR [ebx*8]
	mov	edi, edx
	shr	ecx, 2
	xor	eax, eax
	add	edx, 48					; 00000030H
	dec	DWORD PTR tv181[ebp]
	rep stosd
	jne	SHORT $LN24@ddd_gamma_@2
$LN26@ddd_gamma_@2:

; 488  : 
; 489  :   for ( k = 0 ; k < 4 ; k++ )

	mov	edx, DWORD PTR tv2885[ebp]
	add	edx, 288				; 00000120H
	dec	DWORD PTR tv158[ebp]
	mov	DWORD PTR tv2885[ebp], edx
	jne	SHORT $LN27@ddd_gamma_@2

; 492  :       Ddddgamma[k][i][j] = 0.0;
; 493  : 
; 494  :   /* now the gradients on the four vertices */
; 495  :   /* recalling numbering order 2 0 1 3 */
; 496  :   for ( i = 0 ; i < SDIM ; i++ )

	test	ebx, ebx
	jle	$LN63@ddd_gamma_@2
	fstp	ST(1)
	mov	edx, DWORD PTR _side2$[ebp]
	fstp	ST(0)
	mov	edi, DWORD PTR _side3$[ebp]
	fld	QWORD PTR _s3$[ebp]
	mov	eax, esi
	fld	ST(0)
	sub	eax, edx
	fadd	ST(0), ST(2)
	sub	edi, edx
	lea	ecx, DWORD PTR _Ddddgamma$[ebp]
	mov	DWORD PTR tv3521[ebp], ecx
	fst	QWORD PTR tv1463[ebp]
	mov	DWORD PTR tv2514[ebp], edi
	fld	ST(2)
	mov	DWORD PTR tv726[ebp], ebx
	fld	QWORD PTR _s1$[ebp]
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv1473[ebp]
	fld1
	fld	ST(0)
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR tv1622[ebp]
	fld	ST(1)
	fadd	ST(0), ST(5)
	fld	ST(1)
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR tv1626[ebp]
	fxch	ST(1)
	fdiv	ST(0), ST(3)
	fdiv	ST(0), ST(6)
	fdiv	ST(0), ST(4)
	fsub	QWORD PTR tv1622[ebp]
	fld	QWORD PTR tv1626[ebp]
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv1627[ebp]
	fsub	QWORD PTR tv1622[ebp]
	mov	DWORD PTR tv3312[ebp], eax
	mov	eax, edx
	sub	eax, esi
	fstp	QWORD PTR tv1633[ebp]
	mov	DWORD PTR tv2480[ebp], eax
	fld	QWORD PTR tv1627[ebp]
	jmp	SHORT $LN18@ddd_gamma_@2
$LN76@ddd_gamma_@2:

; 482  :   for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(2)
	fstp	ST(1)
	jmp	$LN124@ddd_gamma_@2
$LN61@ddd_gamma_@2:

; 492  :       Ddddgamma[k][i][j] = 0.0;
; 493  : 
; 494  :   /* now the gradients on the four vertices */
; 495  :   /* recalling numbering order 2 0 1 3 */
; 496  :   for ( i = 0 ; i < SDIM ; i++ )

	fld	QWORD PTR tv1473[ebp]
	mov	eax, DWORD PTR tv2480[ebp]
	fld	QWORD PTR tv1463[ebp]
	mov	edx, DWORD PTR _side2$[ebp]
	fld	QWORD PTR _s1$[ebp]
	fld	QWORD PTR _s3$[ebp]
	fld	QWORD PTR tv1627[ebp]
	fxch	ST(1)
	fxch	ST(5)
	fxch	ST(3)
	fxch	ST(4)
	fxch	ST(2)
	fxch	ST(3)
	fxch	ST(1)
$LN18@ddd_gamma_@2:

; 497  :   { 
; 498  :      Ddddgamma[2][i][i] -=  1.0/s1/s2/(s2+s3) - 1.0/s2/s3/(s1+s2)
; 499  :                                     + 1.0/s3/(s2+s3)/(s1+s2+s3);

	fld	QWORD PTR [ecx+576]
	add	eax, esi
	fsub	ST(0), ST(1)
	mov	DWORD PTR tv1320[ebp], ebx
	fstp	QWORD PTR [ecx+576]

; 500  :      Ddddgamma[0][i][i] +=  1.0/s1/s2/(s2+s3) - 1.0/s2/s3/(s1+s2)
; 501  :                                     + 1.0/s3/(s2+s3)/(s1+s2+s3);

	fadd	QWORD PTR [ecx]

; 502  :      Ddddgamma[0][i][i] -= -1/s2/s3/(s1+s2) + 1/s3/(s2+s3)/(s1+s2+s3);

	fld	QWORD PTR tv1633[ebp]
	fsub	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [ecx]

; 503  :      Ddddgamma[1][i][i] += -1/s2/s3/(s1+s2) + 1/s3/(s2+s3)/(s1+s2+s3);

	fadd	QWORD PTR [ecx+288]

; 504  :      Ddddgamma[1][i][i] -= 1.0/s3/(s2+s3)/(s1+s2+s3);

	fld	QWORD PTR tv1626[ebp]
	fsub	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [ecx+288]

; 505  :      Ddddgamma[3][i][i] += 1.0/s3/(s2+s3)/(s1+s2+s3);

	fadd	QWORD PTR [ecx+864]
	fstp	QWORD PTR [ecx+864]
	fld	QWORD PTR [esi]
	fadd	QWORD PTR [eax]
	fst	QWORD PTR tv3655[ebp]
	fadd	QWORD PTR [eax+edi]
	mov	eax, DWORD PTR tv3521[ebp]
	fdiv	ST(0), ST(5)
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(1)
	fld	QWORD PTR [esi]
	fdiv	ST(0), ST(4)
	fdiv	ST(0), ST(7)
	fdivrp	ST(5), ST(0)
	fld	QWORD PTR tv3655[ebp]
	fdiv	ST(0), ST(7)
	fdivrp	ST(6), ST(0)
	fxch	ST(5)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR tv3680[ebp]
	jmp	SHORT $LN15@ddd_gamma_@2
$LN62@ddd_gamma_@2:

; 497  :   { 
; 498  :      Ddddgamma[2][i][i] -=  1.0/s1/s2/(s2+s3) - 1.0/s2/s3/(s1+s2)
; 499  :                                     + 1.0/s3/(s2+s3)/(s1+s2+s3);

	fld	QWORD PTR tv1473[ebp]
	fld	QWORD PTR _s1$[ebp]
	fxch	ST(2)
$LN15@ddd_gamma_@2:

; 507  :      { REAL d;
; 508  :         d = side1[i]/s1/s2/(s2+s3)*(-side1[j]/s1/s1)
; 509  :          - (side1[i]+side2[i])/s2/s3/(s1+s2)*(-side1[j]/s1/(s1+s2))
; 510  :          + (side1[i]+side2[i]+side3[i])/s3/(s2+s3)/(s1+s2+s3)
; 511  :                   *(-side1[j]/s1/(s1+s2+s3));

	mov	edi, DWORD PTR tv3312[ebp]
	fld	QWORD PTR [edx+edi]

; 512  :         Ddddgamma[2][i][j] -= d; 
; 513  :         Ddddgamma[0][i][j] += d;
; 514  :         d = side1[i]/s1/s2/(s2+s3)*(-side2[j]/s2/s2-side2[j]/s2/(s2+s3))
; 515  :         - (side1[i]+side2[i])/s2/s3/(s1+s2)*(-side2[j]/s2/s2-side2[j]/s2/(s1+s2))
; 516  : + (side1[i]+side2[i]+side3[i])/s3/(s2+s3)/(s1+s2+s3)*(-side2[j]/s2/(s2+s3)
; 517  :      - side2[j]/s2/(s1+s2+s3));
; 518  :         Ddddgamma[0][i][j] -= d; 
; 519  :         Ddddgamma[1][i][j] += d;
; 520  :         d = side1[i]/s1/s2/(s2+s3)*(-side3[j]/s3/(s2+s3))
; 521  :             - (side1[i]+side2[i])/s2/s3/(s1+s2)*(-side3[j]/s3/s3)
; 522  :             + (side1[i]+side2[i]+side3[i])/s3/(s2+s3)/(s1+s2+s3)
; 523  :             *(-side3[j]/s3/s3 - side3[j]/s3/(s2+s3) -side3[j]/s3/(s1+s2+s3));

	mov	edi, DWORD PTR tv2514[ebp]
	fdiv	ST(0), ST(3)
	add	edx, 8
	fld	ST(0)
	fdivrp	ST(4), ST(0)
	fxch	ST(3)
	fchs
	fmul	ST(0), ST(4)
	fld	ST(3)
	fdivrp	ST(3), ST(0)
	fxch	ST(2)
	fchs
	fmul	QWORD PTR tv3680[ebp]
	fsubp	ST(2), ST(0)
	fdiv	ST(2), ST(0)
	fxch	ST(2)
	fchs
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax+576]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [eax+576]
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	fld	QWORD PTR [edx-8]
	fdiv	ST(0), ST(4)
	fld	ST(0)
	fdiv	ST(0), ST(5)
	fchs
	fst	QWORD PTR tv3143[ebp]
	fld	ST(1)
	fdiv	QWORD PTR tv1463[ebp]
	fst	QWORD PTR tv3147[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fld	ST(1)
	fdiv	QWORD PTR tv1473[ebp]
	fsubr	QWORD PTR tv3143[ebp]
	fmul	QWORD PTR tv3680[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR tv3147[ebp]
	fchs
	fxch	ST(2)
	fdiv	ST(0), ST(3)
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [eax]
	fadd	QWORD PTR [eax+288]
	fstp	QWORD PTR [eax+288]
	fld	QWORD PTR [edx+edi-8]
	fld	QWORD PTR _s3$[ebp]
	fdiv	ST(1), ST(0)
	fdivr	ST(0), ST(1)
	fchs
	fld	ST(1)
	fdiv	QWORD PTR tv1463[ebp]
	fld	ST(1)
	fsub	ST(0), ST(1)
	fxch	ST(3)
	fdiv	ST(0), ST(4)
	fsubp	ST(3), ST(0)
	fxch	ST(2)
	fmul	ST(0), ST(5)
	fxch	ST(2)
	fchs
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv3680[ebp]
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	faddp	ST(1), ST(0)

; 524  :         Ddddgamma[1][i][j] -= d; 

	fld	QWORD PTR [eax+288]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [eax+288]

; 525  :         Ddddgamma[3][i][j] += d;

	fadd	QWORD PTR [eax+864]
	fstp	QWORD PTR [eax+864]

; 506  :      for ( j = 0 ; j < SDIM ; j++ )

	add	eax, 8
	dec	DWORD PTR tv1320[ebp]
	jne	$LN62@ddd_gamma_@2
	add	DWORD PTR tv3521[ebp], 48		; 00000030H
	fstp	ST(2)
	add	ecx, 56					; 00000038H
	fstp	ST(0)
	add	esi, 8
	dec	DWORD PTR tv726[ebp]
	jne	$LN61@ddd_gamma_@2

; 492  :       Ddddgamma[k][i][j] = 0.0;
; 493  : 
; 494  :   /* now the gradients on the four vertices */
; 495  :   /* recalling numbering order 2 0 1 3 */
; 496  :   for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(0)
	fld	QWORD PTR __real@4042000000000000
	fld	QWORD PTR _energy$[ebp]
$LN63@ddd_gamma_@2:

; 526  :      }
; 527  :   }
; 528  :   for ( k = 0 ; k < 4; k++ )

	fldz
	xor	eax, eax
	fld	QWORD PTR __real@4000000000000000
	mov	DWORD PTR tv4457[ebp], eax
	mov	DWORD PTR tv4459[ebp], eax
	mov	DWORD PTR tv4461[ebp], eax
$LN67@ddd_gamma_@2:

; 529  :   { for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	test	ebx, ebx
	jle	$LN11@ddd_gamma_@2
	mov	edx, DWORD PTR _e_info$GSCopy$[ebp]
	mov	ecx, DWORD PTR [edx+1336]
	mov	edi, DWORD PTR [eax+ecx]
$LN65@ddd_gamma_@2:

; 530  :      { REAL g;
; 531  :         for ( i = 0, g = 0.0 ; i < SDIM ; i++ )

	xor	eax, eax
	fld	ST(1)
	cmp	ebx, 4
	jl	SHORT $LC57@ddd_gamma_@2
	mov	ecx, DWORD PTR tv4459[ebp]
	add	ecx, esi
	lea	edx, DWORD PTR [ebx-3]
	lea	ecx, DWORD PTR _Ddddgamma$[ebp+ecx*8+48]
$LN58@ddd_gamma_@2:

; 532  :           g += 2*dddgamma[i]*Ddddgamma[k][i][j];

	fld	QWORD PTR _dddgamma$[ebp+eax*8]
	add	eax, 4
	fmul	ST(0), ST(2)
	add	ecx, 192				; 000000c0H
	fmul	QWORD PTR [ecx-240]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dddgamma$[ebp+eax*8-24]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ecx-192]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dddgamma$[ebp+eax*8-16]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ecx-144]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dddgamma$[ebp+eax*8-8]
	fmul	ST(0), ST(2)
	fmul	QWORD PTR [ecx-96]
	faddp	ST(1), ST(0)
	cmp	eax, edx
	jl	SHORT $LN58@ddd_gamma_@2
$LC57@ddd_gamma_@2:

; 530  :      { REAL g;
; 531  :         for ( i = 0, g = 0.0 ; i < SDIM ; i++ )

	cmp	eax, ebx
	jge	SHORT $LN66@ddd_gamma_@2
	mov	ecx, DWORD PTR tv4457[ebp]
	add	ecx, eax
	lea	ecx, DWORD PTR [ecx+ecx*2]
	lea	ecx, DWORD PTR [esi+ecx*2]
	lea	ecx, DWORD PTR _Ddddgamma$[ebp+ecx*8]
$LC6@ddd_gamma_@2:

; 532  :           g += 2*dddgamma[i]*Ddddgamma[k][i][j];

	fld	QWORD PTR _dddgamma$[ebp+eax*8]
	inc	eax
	fmul	ST(0), ST(2)
	add	ecx, 48					; 00000030H
	fmul	QWORD PTR [ecx-48]
	faddp	ST(1), ST(0)
	cmp	eax, ebx
	jl	SHORT $LC6@ddd_gamma_@2
$LN66@ddd_gamma_@2:

; 533  :         e_info->grad[k][j] = 36*g*s2;

	fmul	ST(0), ST(4)
	inc	esi
	add	edi, 8
	fmul	ST(0), ST(5)
	fstp	QWORD PTR [edi-8]
	mov	ebx, DWORD PTR _web+616
	cmp	esi, ebx
	jl	$LN65@ddd_gamma_@2

; 529  :   { for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR tv4461[ebp]
$LN11@ddd_gamma_@2:

; 526  :      }
; 527  :   }
; 528  :   for ( k = 0 ; k < 4; k++ )

	add	DWORD PTR tv4459[ebp], 36		; 00000024H
	add	DWORD PTR tv4457[ebp], 6
	add	eax, 4
	mov	DWORD PTR tv4461[ebp], eax
	cmp	eax, 16					; 00000010H
	jl	$LN67@ddd_gamma_@2
	fstp	ST(0)

; 534  :      }
; 535  :   }
; 536  :   for ( j = 0 ; j < SDIM ; j++ )

	xor	esi, esi
	fstp	ST(2)
	fstp	ST(1)
	test	ebx, ebx
	jle	SHORT $LN119@ddd_gamma_@2
	mov	edx, DWORD PTR _e_info$GSCopy$[ebp]
	mov	edx, DWORD PTR [edx+1336]
	mov	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _side2$[ebp]
	mov	edx, DWORD PTR [edx+4]
	sub	ecx, eax
	sub	edx, eax
$LN3@ddd_gamma_@2:

; 537  :   { e_info->grad[0][j] -= energy*side2[j]/s2/s2;

	fld	QWORD PTR [eax]
	inc	esi
	fmul	ST(0), ST(1)
	add	eax, 8
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(2)
	fsubr	QWORD PTR [ecx+eax-8]
	fstp	QWORD PTR [ecx+eax-8]

; 538  :      e_info->grad[1][j] += energy*side2[j]/s2/s2;

	fld	QWORD PTR [eax-8]
	fmul	ST(0), ST(1)
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(2)
	fadd	QWORD PTR [edx+eax-8]
	fstp	QWORD PTR [edx+eax-8]
	cmp	esi, DWORD PTR _web+616
	jl	SHORT $LN3@ddd_gamma_@2
$LN119@ddd_gamma_@2:

; 539  :   }
; 540  :   return energy;
; 541  : } // end ddd_gamma_sq_gradient()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(1)
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_ddd_gamma_sq_gradient ENDP
_TEXT	ENDS
PUBLIC	__real@4028000000000000
PUBLIC	??_C@_0DF@JGHBGLO@Edge?5?$CFs?5is?5on?5a?5CONVEX?5constrain@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	_e_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_gap_energy
EXTRN	_kb_error:PROC
EXTRN	_errmsg:BYTE
EXTRN	_sprintf:PROC
EXTRN	_elnames:BYTE
EXTRN	_eval_all:PROC
EXTRN	_nullcon:QWORD
;	COMDAT __real@4028000000000000
CONST	SEGMENT
__real@4028000000000000 DQ 04028000000000000r	; 12
CONST	ENDS
;	COMDAT ??_C@_0DF@JGHBGLO@Edge?5?$CFs?5is?5on?5a?5CONVEX?5constrain@
CONST	SEGMENT
??_C@_0DF@JGHBGLO@Edge?5?$CFs?5is?5on?5a?5CONVEX?5constrain@ DB 'Edge %s '
	DB	'is on a CONVEX constraint at zero gradient.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _gap_energy
_TEXT	SEGMENT
_constr$ = -136						; size = 28
_ss$ = -108						; size = 8
tv329 = -100						; size = 8
_fval$89392 = -100					; size = 8
_e_id$ = -92						; size = 4
_concount$ = -88					; size = 4
tv438 = -84						; size = 8
tv436 = -84						; size = 8
_ff$89390 = -76						; size = 8
_sprenergy$ = -68					; size = 8
$T91684 = -60						; size = 4
_s$ = -60						; size = 4
_e_info$GSCopy$ = -56					; size = 4
_i$ = -56						; size = 4
_grad$89393 = -52					; size = 48
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_gap_energy PROC					; COMDAT

; 560  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _e_info$[ebp]

; 561  :   edge_id e_id = e_info->id;
; 562  :   REAL sprenergy = 0.0;

	fldz

; 563  :   REAL *s;
; 564  :   REAL ss;
; 565  :   struct constraint *constr[MAXCONHIT];
; 566  :   int concount;
; 567  :   conmap_t * conmap;
; 568  :   int i,j; 
; 569  : 
; 570  :   if ( get_eattr(e_id) & FIXED ) return 0.0;

	mov	ecx, DWORD PTR _web+124
	fst	QWORD PTR _sprenergy$[ebp]
	mov	DWORD PTR _e_info$GSCopy$[ebp], eax
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _e_id$[ebp], eax
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR tv329[ebp+4], eax
	mov	eax, ecx
	push	esi
	and	eax, 64					; 00000040H
	xor	esi, esi
	or	eax, esi
	jne	$LN13@gap_energy

; 571  :   if ( !(get_eattr(e_id) & CONSTRAINT) ) return 0.0;

	and	ecx, 1024				; 00000400H
	or	ecx, eax
	je	$LN13@gap_energy

; 572  : 
; 573  :   /* find which constraints have CONVEX attribute */
; 574  :   conmap = get_e_constraint_map(e_id);

	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	push	edi
	cmp	DWORD PTR [eax+ecx+1048], esi
	je	SHORT $LN15@gap_energy
	mov	edi, DWORD PTR [eax+ecx+1024]
	add	edi, edx
	jmp	SHORT $LN16@gap_energy
$LN15@gap_energy:
	mov	edi, OFFSET _nullcon
$LN16@gap_energy:
	mov	eax, DWORD PTR [edi]

; 575  :   for ( j = 1,i = 0 ; j <= (int)conmap[0] ; j++ )

	mov	esi, 1
	xor	edx, edx
	push	ebx
	mov	DWORD PTR $T91684[ebp], eax
	cmp	eax, esi
	jl	$LN32@gap_energy
	mov	ebx, DWORD PTR _web+652
$LN10@gap_energy:

; 576  :   { constr[i] = get_constraint(conmap[j]);

	mov	eax, DWORD PTR [edi+esi*4]
	and	eax, 1073741823				; 3fffffffH
	imul	eax, 176				; 000000b0H
	add	eax, ebx
	mov	DWORD PTR _constr$[ebp+edx*4], eax

; 577  :     if ( (constr[i]->attr & B_CONVEX) && ( i < MAXCONHIT-1) ) 

	mov	eax, DWORD PTR [eax+32]
	and	eax, 8
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN9@gap_energy
	cmp	edx, 6
	jge	SHORT $LN9@gap_energy

; 578  :       i++;    /* keep this one */

	inc	edx
$LN9@gap_energy:

; 575  :   for ( j = 1,i = 0 ; j <= (int)conmap[0] ; j++ )

	inc	esi
	cmp	esi, DWORD PTR $T91684[ebp]
	jle	SHORT $LN10@gap_energy

; 579  :   }
; 580  :   if ( i == 0 ) return 0.0;

	test	edx, edx
	je	$LN32@gap_energy

; 581  :   concount = i;  
; 582  : 
; 583  :   /* now the calculation */
; 584  :   s = e_info->sides[0][0];

	mov	edi, DWORD PTR _e_info$GSCopy$[ebp]
	fstp	ST(0)

; 585  :   ss = SDIM_dot(s,s);

	mov	ecx, DWORD PTR _web+616
	mov	esi, edx
	mov	edx, DWORD PTR [edi+1276]
	mov	eax, DWORD PTR [edx]
	mov	eax, DWORD PTR [eax]
	push	ecx
	push	eax
	push	eax
	mov	DWORD PTR _concount$[ebp], esi
	mov	DWORD PTR _s$[ebp], eax
	call	_dot
	fstp	QWORD PTR _ss$[ebp]
	add	esp, 12					; 0000000cH

; 586  : 
; 587  :   for ( i = 0 ; i < concount ; i++ )

	mov	DWORD PTR _i$[ebp], 0
	test	esi, esi
	jle	$LN26@gap_energy
	npad	7
$LL29@gap_energy:

; 588  :   { REAL *coord,ff,fs;
; 589  :     REAL fval,grad[MAXCOORD];
; 590  :     coord = e_info->x[0];
; 591  :     eval_all(constr[i]->formula,coord,SDIM,&fval,grad,e_id);

	mov	ebx, DWORD PTR _e_id$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _constr$[ebp+edx*4]
	mov	edx, DWORD PTR _web+616
	push	ebx
	lea	eax, DWORD PTR _grad$89393[ebp]
	push	eax
	mov	eax, DWORD PTR [edi+416]
	lea	ecx, DWORD PTR _fval$89392[ebp]
	push	ecx
	mov	ecx, DWORD PTR [esi+40]
	push	edx
	push	eax
	push	ecx
	call	_eval_all

; 592  :     ff = SDIM_dot(grad,grad);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _grad$89393[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fst	QWORD PTR _ff$89390[ebp]

; 593  :     if ( ff <= 0.0 )

	fldz
	add	esp, 36					; 00000024H
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN28@gap_energy

; 594  :     { sprintf(errmsg,"Edge %s is on a CONVEX constraint at zero gradient.\n",
; 595  :           ELNAME(e_info->id));

	mov	eax, DWORD PTR [edi]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN17@gap_energy
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN18@gap_energy
$LN17@gap_energy:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN18@gap_energy:
	push	eax
	push	OFFSET ??_C@_0DF@JGHBGLO@Edge?5?$CFs?5is?5on?5a?5CONVEX?5constrain@
	push	OFFSET _errmsg
	call	_sprintf

; 596  :       kb_error(2148,errmsg,WARNING);

	push	2
	push	OFFSET _errmsg
	push	2148					; 00000864H
	call	_kb_error

; 597  :       ff = 1.0;

	fld1
	fstp	QWORD PTR _ff$89390[ebp]
	add	esp, 24					; 00000018H
$LN28@gap_energy:

; 598  :     }
; 599  :     fs = SDIM_dot(s,grad);

	mov	edx, DWORD PTR _web+616
	mov	ecx, DWORD PTR _s$[ebp]
	push	edx
	lea	eax, DWORD PTR _grad$89393[ebp]
	push	eax
	push	ecx
	call	_dot

; 600  :     sprenergy += fabs(fs)*sqrt(ss/ff)/12;

	fabs
	fstp	QWORD PTR tv436[ebp]
	add	esp, 12					; 0000000cH
	fld	QWORD PTR _ss$[ebp]
	fdiv	QWORD PTR _ff$89390[ebp]
	call	__CIsqrt
	fmul	QWORD PTR tv436[ebp]

; 601  : 
; 602  :     coord = e_info->x[1];
; 603  :     eval_all(constr[i]->formula,coord,SDIM,&fval,grad,e_id);

	mov	ecx, DWORD PTR _web+616
	push	ebx
	fdiv	QWORD PTR __real@4028000000000000
	lea	edx, DWORD PTR _grad$89393[ebp]
	push	edx
	mov	edx, DWORD PTR [edi+420]
	lea	eax, DWORD PTR _fval$89392[ebp]
	push	eax
	mov	eax, DWORD PTR [esi+40]
	push	ecx
	push	edx
	push	eax
	fadd	QWORD PTR _sprenergy$[ebp]
	fstp	QWORD PTR _sprenergy$[ebp]
	call	_eval_all

; 604  :     ff = SDIM_dot(grad,grad);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _grad$89393[ebp]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	fst	QWORD PTR _ff$89390[ebp]

; 605  :     if ( ff <= 0.0 )

	fldz
	add	esp, 36					; 00000024H
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN30@gap_energy

; 606  :     { sprintf(errmsg,"Edge %s is on a CONVEX constraint at zero gradient.\n",
; 607  :           ELNAME(e_info->id)+1);

	mov	eax, DWORD PTR [edi]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN19@gap_energy
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN20@gap_energy
$LN19@gap_energy:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN20@gap_energy:
	inc	eax
	push	eax
	push	OFFSET ??_C@_0DF@JGHBGLO@Edge?5?$CFs?5is?5on?5a?5CONVEX?5constrain@
	push	OFFSET _errmsg
	call	_sprintf

; 608  :       kb_error(2149,errmsg,WARNING);

	push	2
	push	OFFSET _errmsg
	push	2149					; 00000865H
	call	_kb_error

; 609  :       ff = 1.0;

	fld1
	fstp	QWORD PTR _ff$89390[ebp]
	add	esp, 24					; 00000018H
$LN30@gap_energy:

; 610  :     }
; 611  :     fs = SDIM_dot(s,grad);

	mov	ecx, DWORD PTR _web+616
	mov	eax, DWORD PTR _s$[ebp]
	push	ecx
	lea	edx, DWORD PTR _grad$89393[ebp]
	push	edx
	push	eax
	call	_dot

; 612  :     sprenergy += fabs(fs)*sqrt(ss/ff)/12;

	fabs
	fstp	QWORD PTR tv438[ebp]
	add	esp, 12					; 0000000cH
	fld	QWORD PTR _ss$[ebp]
	fdiv	QWORD PTR _ff$89390[ebp]
	call	__CIsqrt
	fmul	QWORD PTR tv438[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	fdiv	QWORD PTR __real@4028000000000000
	mov	DWORD PTR _i$[ebp], eax
	fadd	QWORD PTR _sprenergy$[ebp]
	fstp	QWORD PTR _sprenergy$[ebp]
	cmp	eax, DWORD PTR _concount$[ebp]
	jl	$LL29@gap_energy
$LN26@gap_energy:

; 613  :   }
; 614  : 
; 615  :   sprenergy *= web.spring_constant;

	fld	QWORD PTR _web+1584
	fmul	QWORD PTR _sprenergy$[ebp]
$LN32@gap_energy:
	pop	ebx
	pop	edi
$LN13@gap_energy:

; 616  :   return sprenergy;
; 617  : } // end gap_energy()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_gap_energy ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_gap_grads
EXTRN	_eval_second:PROC
EXTRN	_mat2d_setup:PROC
; Function compile flags: /Ogtp
;	COMDAT _gap_grads
_TEXT	SEGMENT
_secondqXvS$ = -488					; size = 24
_constr$ = -464						; size = 28
_ss$ = -436						; size = 8
tv425 = -428						; size = 8
_fval$89442 = -428					; size = 8
tv522 = -420						; size = 8
tv502 = -412						; size = 8
_concount$ = -404					; size = 4
_sprenergy$ = -400					; size = 8
_t$89446 = -392						; size = 8
tv361 = -384						; size = 8
tv242 = -384						; size = 8
tv239 = -384						; size = 8
tv185 = -384						; size = 8
tv498 = -376						; size = 8
tv480 = -376						; size = 8
_ff$89444 = -368					; size = 8
_i$ = -360						; size = 4
_fs$89445 = -356					; size = 8
tv954 = -352						; size = 4
tv808 = -352						; size = 4
$T91731 = -352						; size = 4
_s$ = -348						; size = 4
_second$ = -344						; size = 4
_secondxJ$ = -340					; size = 288
_grad$89443 = -52					; size = 48
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_gap_grads PROC						; COMDAT

; 637  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 488				; 000001e8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	mov	ebx, DWORD PTR _e_info$[ebp]
	push	esi

; 638  :   edge_id e_id = e_info->id;

	mov	esi, DWORD PTR [ebx]

; 639  :   REAL *s;
; 640  :   REAL ss; /* square lengths */
; 641  :   struct constraint *constr[MAXCONHIT];
; 642  :   int concount;
; 643  :   conmap_t * conmap;
; 644  :   int i,j; 
; 645  :   MAT2D(second,MAXCOORD,MAXCOORD); /* for second partials */

	push	6
	push	6
	lea	eax, DWORD PTR _secondxJ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _secondqXvS$[ebp]
	push	ecx
	call	_mat2d_setup

; 646  :   REAL sprenergy = 0.0;

	fldz

; 647  : 
; 648  :   if ( get_eattr(e_id) & FIXED ) return 0.0;

	mov	edx, DWORD PTR _web+124
	fst	QWORD PTR _sprenergy$[ebp]
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edx+esi*4]
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR _second$[ebp], eax
	mov	eax, DWORD PTR [esi+12]
	mov	DWORD PTR tv425[ebp+4], eax
	mov	eax, ecx
	and	eax, 64					; 00000040H
	xor	edx, edx
	add	esp, 16					; 00000010H
	or	eax, edx
	jne	$LN21@gap_grads

; 649  :   if ( !(get_eattr(e_id) & CONSTRAINT) ) return 0.0;

	and	ecx, 1024				; 00000400H
	or	ecx, eax
	je	$LN21@gap_grads

; 650  : 
; 651  :   /* find which constraints have CONVEX attribute */
; 652  :   conmap = get_e_constraint_map(e_id);

	mov	eax, DWORD PTR _web+216
	mov	ecx, DWORD PTR _dymem
	push	edi
	cmp	DWORD PTR [eax+ecx+1048], edx
	je	SHORT $LN23@gap_grads
	mov	edi, DWORD PTR [eax+ecx+1024]
	add	edi, esi
	jmp	SHORT $LN24@gap_grads
$LN23@gap_grads:
	mov	edi, OFFSET _nullcon
$LN24@gap_grads:
	mov	eax, DWORD PTR [edi]

; 653  :   for ( j = 1,i=0 ; j <= (int)conmap[0] ; j++ )

	mov	esi, 1
	xor	edx, edx
	mov	DWORD PTR $T91731[ebp], eax
	cmp	eax, esi
	jl	$LN39@gap_grads
$LN18@gap_grads:

; 654  :   {
; 655  :     constr[i] = get_constraint(conmap[j]);

	mov	ecx, DWORD PTR [edi+esi*4]
	mov	eax, DWORD PTR _web+652
	and	ecx, 1073741823				; 3fffffffH
	imul	ecx, 176				; 000000b0H
	add	eax, ecx
	mov	DWORD PTR _constr$[ebp+edx*4], eax

; 656  :     if ( (constr[i]->attr & B_CONVEX) && (i < MAXCONHIT-1) ) i++;    /* keep this one */

	mov	eax, DWORD PTR [eax+32]
	and	eax, 8
	xor	ecx, ecx
	or	eax, ecx
	je	SHORT $LN17@gap_grads
	cmp	edx, 6
	jge	SHORT $LN17@gap_grads
	inc	edx
$LN17@gap_grads:

; 653  :   for ( j = 1,i=0 ; j <= (int)conmap[0] ; j++ )

	inc	esi
	cmp	esi, DWORD PTR $T91731[ebp]
	jle	SHORT $LN18@gap_grads

; 657  :   }
; 658  :   if ( i == 0 ) return 0.0;

	test	edx, edx
	je	$LN39@gap_grads

; 659  :   concount = i;  
; 660  : 
; 661  :   /* now the calculation */
; 662  :   s = e_info->sides[0][0];

	mov	ecx, DWORD PTR [ebx+1276]
	fstp	ST(0)

; 663  :   ss = SDIM_dot(s,s);

	mov	eax, DWORD PTR _web+616
	mov	esi, edx
	mov	edx, DWORD PTR [ecx]
	mov	edi, DWORD PTR [edx]
	push	eax
	push	edi
	push	edi
	mov	DWORD PTR _concount$[ebp], esi
	mov	DWORD PTR _s$[ebp], edi
	call	_dot
	fstp	QWORD PTR _ss$[ebp]
	add	esp, 12					; 0000000cH

; 664  : 
; 665  :   for ( i = 0 ; i < concount ; i++ )

	mov	DWORD PTR _i$[ebp], 0
	test	esi, esi
	jle	$LN36@gap_grads
	mov	eax, DWORD PTR _web+616
	npad	3
$LL37@gap_grads:

; 666  :   { REAL *coord;
; 667  :     REAL fval,grad[MAXCOORD];
; 668  :     REAL ff,fs,t;
; 669  : 
; 670  :     coord = e_info->x[0];
; 671  :     eval_second(constr[i]->formula,coord,SDIM,&fval,grad,second,e_info->id);

	mov	edx, DWORD PTR [ebx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _constr$[ebp+ecx*4]
	mov	ecx, DWORD PTR [ecx+40]
	push	edx
	mov	edx, DWORD PTR _second$[ebp]
	push	edx
	lea	edx, DWORD PTR _grad$89443[ebp]
	push	edx
	lea	edx, DWORD PTR _fval$89442[ebp]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ebx+416]
	push	eax
	push	ecx
	call	_eval_second

; 672  :     ff = SDIM_dot(grad,grad);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _grad$89443[ebp]
	push	eax
	mov	ecx, eax
	push	ecx
	call	_dot
	fst	QWORD PTR _ff$89444[ebp]

; 673  :     if ( ff <= 0.0 ) ff = 1.0;

	fldz
	add	esp, 40					; 00000028H
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN10@gap_grads
	fld1
	fstp	QWORD PTR _ff$89444[ebp]
$LN10@gap_grads:

; 674  :     fs = SDIM_dot(s,grad);

	mov	edx, DWORD PTR _web+616
	push	edx
	lea	eax, DWORD PTR _grad$89443[ebp]
	push	eax
	push	edi
	call	_dot
	fstp	QWORD PTR _fs$89445[ebp]

; 675  :     t = sqrt(ss/ff);

	fld	QWORD PTR _ss$[ebp]
	add	esp, 12					; 0000000cH
	fdiv	QWORD PTR _ff$89444[ebp]
	fst	QWORD PTR tv480[ebp]
	call	__CIsqrt
	fld	ST(0)
	fst	QWORD PTR _t$89446[ebp]

; 676  :     sprenergy += fabs(fs)*sqrt(ss/ff)/12;

	fld	QWORD PTR _fs$89445[ebp]
	fld	ST(0)
	fabs
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fdiv	QWORD PTR __real@4028000000000000
	fadd	QWORD PTR _sprenergy$[ebp]
	fstp	QWORD PTR _sprenergy$[ebp]

; 677  :     if ( fs < 0.0 ) t = -t;  /* to take care of fabs() */

	fldz
	fcomp	ST(2)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN9@gap_grads
	fchs
	fst	QWORD PTR _t$89446[ebp]
$LN9@gap_grads:

; 678  :     for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR _web+616
	xor	esi, esi
	test	eax, eax
	jle	$LN64@gap_grads
	fld	QWORD PTR tv480[ebp]
	mov	ecx, edi
	fld	QWORD PTR _ff$89444[ebp]
	lea	edx, DWORD PTR _grad$89443[ebp]
	fdiv	ST(1), ST(0)
	sub	ecx, edx
	mov	DWORD PTR tv808[ebp], ecx
	fxch	ST(1)
	fstp	QWORD PTR tv498[ebp]
	fxch	ST(2)
	fdivrp	ST(1), ST(0)
	fst	QWORD PTR tv502[ebp]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR tv522[ebp]
	jmp	SHORT $LN8@gap_grads
	npad	12
$LL34@gap_grads:
	fld	QWORD PTR _ff$89444[ebp]
	mov	ecx, DWORD PTR tv808[ebp]
$LN8@gap_grads:
	lea	edi, DWORD PTR _grad$89443[ebp+esi*8]

; 679  :     { REAL g;
; 680  :       g = -t*grad[j] + t*SDIM_dot(s,second[j]) 
; 681  :                      + fs/t*(-s[j]/ff - ss/ff/ff*SDIM_dot(grad,second[j]));

	fdivr	QWORD PTR [ecx+edi]
	push	eax
	mov	eax, DWORD PTR _second$[ebp]
	mov	ecx, DWORD PTR [eax+esi*4]
	push	ecx
	lea	edx, DWORD PTR _grad$89443[ebp]
	push	edx
	fchs
	fstp	QWORD PTR tv185[ebp]
	call	_dot
	fmul	QWORD PTR tv498[ebp]
	mov	eax, DWORD PTR _web+616
	mov	ecx, DWORD PTR _second$[ebp]
	mov	edx, DWORD PTR [ecx+esi*4]
	fsubr	QWORD PTR tv185[ebp]
	push	eax
	mov	eax, DWORD PTR _s$[ebp]
	push	edx
	fmul	QWORD PTR tv502[ebp]
	push	eax
	fstp	QWORD PTR tv361[ebp]
	call	_dot
	fld	QWORD PTR _t$89446[ebp]

; 682  :       e_info->grad[0][j] += web.spring_constant*g/12;

	mov	ecx, DWORD PTR [ebx+1336]
	fmul	ST(1), ST(0)
	mov	edx, DWORD PTR [ecx]
	fld	QWORD PTR [edi]
	lea	eax, DWORD PTR [edx+esi*8]

; 683  :       g = t*grad[j] + fs/t/ff*s[j];

	mov	edx, DWORD PTR tv808[ebp]
	fmul	ST(0), ST(1)
	add	esp, 24					; 00000018H
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR tv361[ebp]
	fmul	QWORD PTR _web+1584
	fld	QWORD PTR __real@4028000000000000
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR [ebx+1336]
	fld	QWORD PTR tv522[ebp]
	mov	ecx, DWORD PTR [eax+4]
	fmul	QWORD PTR [edx+edi]
	lea	eax, DWORD PTR [ecx+esi*8]
	fld	QWORD PTR [edi]
	inc	esi
	fmulp	ST(3), ST(0)
	faddp	ST(2), ST(0)

; 684  :       e_info->grad[1][j] += web.spring_constant*g/12;

	fxch	ST(1)
	fmul	QWORD PTR _web+1584
	fdivrp	ST(1), ST(0)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR _web+616
	cmp	esi, eax
	jl	$LL34@gap_grads

; 678  :     for ( j = 0 ; j < SDIM ; j++ )

	mov	edi, DWORD PTR _s$[ebp]
	jmp	SHORT $LN6@gap_grads
$LN64@gap_grads:
	fstp	ST(1)
	fstp	ST(0)
$LN6@gap_grads:

; 685  :     }
; 686  :     coord = e_info->x[1];
; 687  :     eval_second(constr[i]->formula,coord,SDIM,&fval,grad,second,e_info->id);

	mov	ecx, DWORD PTR [ebx]
	mov	edx, DWORD PTR _second$[ebp]
	push	ecx
	push	edx
	lea	ecx, DWORD PTR _grad$89443[ebp]
	push	ecx
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR _fval$89442[ebp]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ebx+420]
	push	eax
	mov	eax, DWORD PTR _constr$[ebp+ecx*4]
	mov	edx, DWORD PTR [eax+40]
	push	edx
	call	_eval_second

; 688  :     ff = SDIM_dot(grad,grad);

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _grad$89443[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	fst	QWORD PTR _ff$89444[ebp]

; 689  :     if ( ff <= 0.0 ) ff = 1.0;

	fldz
	add	esp, 40					; 00000028H
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN5@gap_grads
	fld1
	fstp	QWORD PTR _ff$89444[ebp]
$LN5@gap_grads:

; 690  :     fs = SDIM_dot(s,grad);

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _grad$89443[ebp]
	push	ecx
	push	edi
	call	_dot
	fstp	QWORD PTR _fs$89445[ebp]

; 691  :     sprenergy += fabs(fs)*sqrt(ss/ff)/12;

	fld	QWORD PTR _ss$[ebp]
	add	esp, 12					; 0000000cH
	fdiv	QWORD PTR _ff$89444[ebp]
	fst	QWORD PTR tv480[ebp]
	call	__CIsqrt
	fld	QWORD PTR _fs$89445[ebp]
	fld	ST(0)
	fabs
	fmul	ST(0), ST(2)
	fdiv	QWORD PTR __real@4028000000000000
	fadd	QWORD PTR _sprenergy$[ebp]
	fstp	QWORD PTR _sprenergy$[ebp]

; 692  :     t = sqrt(ss/ff);

	fxch	ST(1)
	fst	QWORD PTR _t$89446[ebp]

; 693  :     if ( fs < 0.0 ) t = -t;  /* to take care of fabs() */

	fldz
	fcomp	ST(2)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN4@gap_grads
	fchs
	fst	QWORD PTR _t$89446[ebp]
$LN4@gap_grads:

; 694  :     for ( j = 0 ; j < SDIM ; j++ )

	mov	eax, DWORD PTR _web+616
	xor	esi, esi
	test	eax, eax
	jle	$LN71@gap_grads
	fld	QWORD PTR tv480[ebp]
	lea	ecx, DWORD PTR _grad$89443[ebp]
	fld	QWORD PTR _ff$89444[ebp]
	sub	ecx, edi
	fdiv	ST(1), ST(0)
	mov	DWORD PTR tv954[ebp], ecx
	fxch	ST(1)
	fstp	QWORD PTR tv498[ebp]
	fxch	ST(2)
	fdivrp	ST(1), ST(0)
	fst	QWORD PTR tv502[ebp]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR tv522[ebp]
	jmp	SHORT $LN3@gap_grads
$LL35@gap_grads:
	fld	QWORD PTR _ff$89444[ebp]
$LN3@gap_grads:

; 695  :     { REAL g;
; 696  :       g = t*grad[j] + t*SDIM_dot(s,second[j]) 
; 697  :                     + fs/t*(s[j]/ff - ss/ff/ff*SDIM_dot(grad,second[j]));

	fdivr	QWORD PTR [edi+esi*8]
	lea	edi, DWORD PTR [edi+esi*8]
	mov	edx, DWORD PTR _second$[ebp]
	push	eax
	mov	eax, DWORD PTR [edx+esi*4]
	push	eax
	lea	ecx, DWORD PTR _grad$89443[ebp]
	push	ecx
	fstp	QWORD PTR tv242[ebp]
	call	_dot
	fmul	QWORD PTR tv498[ebp]
	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR _second$[ebp]
	mov	ecx, DWORD PTR [eax+esi*4]
	fsubr	QWORD PTR tv242[ebp]
	push	edx
	mov	edx, DWORD PTR _s$[ebp]
	push	ecx
	fmul	QWORD PTR tv502[ebp]
	push	edx
	fstp	QWORD PTR tv239[ebp]
	call	_dot
	fld	QWORD PTR _t$89446[ebp]
	mov	ecx, DWORD PTR tv954[ebp]
	fmul	ST(1), ST(0)
	mov	eax, DWORD PTR [ebx+1336]
	fld	QWORD PTR [ecx+edi]
	mov	edx, DWORD PTR [eax+4]
	lea	eax, DWORD PTR [edx+esi*8]
	fmul	ST(0), ST(1)
	add	esp, 24					; 00000018H
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR tv239[ebp]

; 698  :       e_info->grad[1][j] += web.spring_constant*g/12;

	fmul	QWORD PTR _web+1584
	fld	QWORD PTR __real@4028000000000000
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]

; 699  :       g = -t*grad[j] - fs/t/ff*s[j];
; 700  :       e_info->grad[0][j] += web.spring_constant*g/12;

	mov	eax, DWORD PTR [ebx+1336]
	fld	QWORD PTR [ecx+edi]
	mov	edx, DWORD PTR [eax]
	fmulp	ST(2), ST(0)
	lea	eax, DWORD PTR [edx+esi*8]
	fxch	ST(1)
	inc	esi
	fchs
	fld	QWORD PTR tv522[ebp]
	fmul	QWORD PTR [edi]
	mov	edi, DWORD PTR _s$[ebp]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR _web+1584
	fdivrp	ST(1), ST(0)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR _web+616
	cmp	esi, eax
	jl	$LL35@gap_grads

; 694  :     for ( j = 0 ; j < SDIM ; j++ )

	jmp	SHORT $LN12@gap_grads
$LN71@gap_grads:
	fstp	ST(0)
	fstp	ST(0)
$LN12@gap_grads:

; 664  : 
; 665  :   for ( i = 0 ; i < concount ; i++ )

	mov	ecx, DWORD PTR _i$[ebp]
	inc	ecx
	mov	DWORD PTR _i$[ebp], ecx
	cmp	ecx, DWORD PTR _concount$[ebp]
	jl	$LL37@gap_grads
$LN36@gap_grads:

; 701  :     }
; 702  :   }
; 703  : 
; 704  :   sprenergy *= web.spring_constant;

	fld	QWORD PTR _web+1584
	fmul	QWORD PTR _sprenergy$[ebp]
$LN39@gap_grads:
	pop	edi
$LN21@gap_grads:

; 705  :   return sprenergy;
; 706  : } /* end gap_grads() */

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_gap_grads ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DG@EAIIMJGF@Facet?5extra?5attribute?5form_facto@ ; `string'
PUBLIC	??_C@_0EP@NGFLBDKH@Facet?5extra?5attribute?5form_facto@ ; `string'
PUBLIC	??_C@_0N@KCLCABBK@form_factors?$AA@		; `string'
PUBLIC	??_C@_0EI@GDOJIKLM@Facet?5extra?5attribute?5poisson_ra@ ; `string'
PUBLIC	??_C@_0O@BCENEBHP@poisson_ratio?$AA@		; `string'
PUBLIC	??_C@_0DA@PHMKCJAP@linear_elastic?5method?5only?5for?5S@ ; `string'
PUBLIC	??_C@_0CO@HOMMCBLJ@linear_elastic?5method?5only?5for?5L@ ; `string'
PUBLIC	_linear_elastic_init
EXTRN	_find_attribute:PROC
;	COMDAT ??_C@_0DG@EAIIMJGF@Facet?5extra?5attribute?5form_facto@
CONST	SEGMENT
??_C@_0DG@EAIIMJGF@Facet?5extra?5attribute?5form_facto@ DB 'Facet extra a'
	DB	'ttribute form_factors must have size 3.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@NGFLBDKH@Facet?5extra?5attribute?5form_facto@
CONST	SEGMENT
??_C@_0EP@NGFLBDKH@Facet?5extra?5attribute?5form_facto@ DB 'Facet extra a'
	DB	'ttribute form_factors real[3] missing. Needed by linear_elast'
	DB	'ic.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KCLCABBK@form_factors?$AA@
CONST	SEGMENT
??_C@_0N@KCLCABBK@form_factors?$AA@ DB 'form_factors', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@GDOJIKLM@Facet?5extra?5attribute?5poisson_ra@
CONST	SEGMENT
??_C@_0EI@GDOJIKLM@Facet?5extra?5attribute?5poisson_ra@ DB 'Facet extra a'
	DB	'ttribute poisson_ratio missing. Needed by linear_elastic.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BCENEBHP@poisson_ratio?$AA@
CONST	SEGMENT
??_C@_0O@BCENEBHP@poisson_ratio?$AA@ DB 'poisson_ratio', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@PHMKCJAP@linear_elastic?5method?5only?5for?5S@
CONST	SEGMENT
??_C@_0DA@PHMKCJAP@linear_elastic?5method?5only?5for?5S@ DB 'linear_elast'
	DB	'ic method only for SOAPFILM model.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@HOMMCBLJ@linear_elastic?5method?5only?5for?5L@
CONST	SEGMENT
??_C@_0CO@HOMMCBLJ@linear_elastic?5method?5only?5for?5L@ DB 'linear_elast'
	DB	'ic method only for LINEAR model.', 0aH, 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _linear_elastic_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_linear_elastic_init PROC				; COMDAT

; 748  : 
; 749  :   if ( web.modeltype != LINEAR )

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN5@linear_ela

; 750  :      kb_error(2529,"linear_elastic method only for LINEAR model.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CO@HOMMCBLJ@linear_elastic?5method?5only?5for?5L@
	push	2529					; 000009e1H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN5@linear_ela:

; 751  : 
; 752  :   if ( web.dimension != 2 )

	cmp	DWORD PTR _web+620, 2
	je	SHORT $LN4@linear_ela

; 753  :      kb_error(2150,"linear_elastic method only for SOAPFILM model.\n",
; 754  :         RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DA@PHMKCJAP@linear_elastic?5method?5only?5for?5S@
	push	2150					; 00000866H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN4@linear_ela:

; 755  : 
; 756  :   /* extra edge atribute */
; 757  :   poisson_attr = find_attribute(FACET,POISSON_NAME);

	push	OFFSET ??_C@_0O@BCENEBHP@poisson_ratio?$AA@
	push	2
	call	_find_attribute
	add	esp, 8
	mov	DWORD PTR _poisson_attr, eax

; 758  :   if ( poisson_attr < 0 ) /* not found */

	test	eax, eax
	jns	SHORT $LN3@linear_ela

; 759  :      kb_error(3200,"Facet extra attribute poisson_ratio missing. Needed by linear_elastic.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0EI@GDOJIKLM@Facet?5extra?5attribute?5poisson_ra@
	push	3200					; 00000c80H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN3@linear_ela:

; 760  : 
; 761  :   form_factors_attr = find_attribute(FACET,FORM_FACTORS_NAME);

	push	OFFSET ??_C@_0N@KCLCABBK@form_factors?$AA@
	push	2
	call	_find_attribute
	add	esp, 8
	mov	DWORD PTR _form_factors_attr, eax

; 762  :   if ( form_factors_attr < 0 ) /* not found */

	test	eax, eax
	jns	SHORT $LN2@linear_ela

; 763  :      kb_error(2152,"Facet extra attribute form_factors real[3] missing. Needed by linear_elastic.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0EP@NGFLBDKH@Facet?5extra?5attribute?5form_facto@
	push	2152					; 00000868H
	call	_kb_error
	mov	eax, DWORD PTR _form_factors_attr
	add	esp, 12					; 0000000cH
$LN2@linear_ela:

; 764  : 
; 765  :   if ( EXTRAS(FACET)[form_factors_attr].array_spec.datacount != 3 )

	mov	ecx, DWORD PTR _dymem
	imul	eax, 240				; 000000f0H
	add	eax, DWORD PTR _web+328
	cmp	DWORD PTR [eax+ecx+88], 3
	je	SHORT $LN1@linear_ela

; 766  :      kb_error(2153,"Facet extra attribute form_factors must have size 3.\n",
; 767  :         RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DG@EAIIMJGF@Facet?5extra?5attribute?5form_facto@
	push	2153					; 00000869H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@linear_ela:

; 768  : } // end linear_elastic_init()

	ret	0
_linear_elastic_init ENDP
_TEXT	ENDS
PUBLIC	__real@3fc0000000000000
PUBLIC	??_C@_0DE@NGJDFJCA@linear_elastic?3?5Facet?5?$CFs?5has?5uns@ ; `string'
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_linear_elastic_all
;	COMDAT __real@3fc0000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@3fc0000000000000 DQ 03fc0000000000000r	; 0.125
CONST	ENDS
;	COMDAT ??_C@_0DE@NGJDFJCA@linear_elastic?3?5Facet?5?$CFs?5has?5uns@
CONST	SEGMENT
??_C@_0DE@NGJDFJCA@linear_elastic?3?5Facet?5?$CFs?5has?5uns@ DB 'linear_e'
	DB	'lastic: Facet %s has unstrained area <= 0.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\method4.c
CONST	ENDS
;	COMDAT _linear_elastic_all
_TEXT	SEGMENT
_coeff2$ = -2432					; size = 8
tv1235 = -2424						; size = 8
_c12$ = -2416						; size = 8
_q11$ = -2416						; size = 8
tv1267 = -2408						; size = 8
tv4341 = -2404						; size = 4
_c22$ = -2400						; size = 8
_q12$ = -2400						; size = 8
_c21$ = -2392						; size = 8
_f11$ = -2392						; size = 8
tv1324 = -2384						; size = 8
tv1264 = -2384						; size = 8
tv1319 = -2376						; size = 8
tv1261 = -2376						; size = 8
tv4963 = -2372						; size = 4
tv1393 = -2368						; size = 8
tv1330 = -2368						; size = 8
tv1253 = -2368						; size = 8
tv4844 = -2360						; size = 4
_c11$ = -2356						; size = 8
tv5146 = -2352						; size = 4
tv4961 = -2352						; size = 4
tv4965 = -2348						; size = 4
tv1214 = -2344						; size = 8
_energy$ = -2344					; size = 8
_f12$ = -2344						; size = 8
_poisson$ = -2344					; size = 8
tv1360 = -2336						; size = 8
tv1336 = -2336						; size = 8
_coeff1$ = -2336					; size = 8
_f_info$GSCopy$ = -2328					; size = 4
_i$ = -2324						; size = 4
tv4174 = -2320						; size = 4
tv1370 = -2316						; size = 8
tv1344 = -2316						; size = 8
tv1279 = -2316						; size = 8
tv1270 = -2316						; size = 8
_q22$ = -2316						; size = 8
_det$ = -2316						; size = 8
_ddc12dv$ = -2308					; size = 432
_ddc21dv$ = -1876					; size = 432
_ddc11dv$ = -1444					; size = 432
_ddc22dv$ = -1012					; size = 432
_dc12dv$ = -580						; size = 144
_dc21dv$ = -436						; size = 144
_dc22dv$ = -292						; size = 144
_dc11dv$ = -148						; size = 144
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_mode$ = 12						; size = 4
_linear_elastic_all PROC				; COMDAT

; 782  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2432				; 00000980H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _f_info$[ebp]

; 783  :   REAL *s;  /* pointer to extra attributes */
; 784  :   REAL **side; 
; 785  :   REAL q11,q12,q22;  /* Q entries */
; 786  :   REAL det;    /* det S */
; 787  :   REAL area;  /* reference area of facet */
; 788  :   REAL poisson; /* poisson ratio */
; 789  :   REAL f11,f12,f22;
; 790  :   REAL c11,c12,c21,c22;
; 791  :   REAL energy;
; 792  :   REAL dc11dv[FACET_VERTS][MAXCOORD];
; 793  :   REAL dc12dv[FACET_VERTS][MAXCOORD];
; 794  :   REAL dc21dv[FACET_VERTS][MAXCOORD];
; 795  :   REAL dc22dv[FACET_VERTS][MAXCOORD];
; 796  :   REAL ddc11dv[FACET_VERTS][MAXCOORD][FACET_VERTS];
; 797  :   REAL ddc12dv[FACET_VERTS][MAXCOORD][FACET_VERTS];
; 798  :   REAL ddc21dv[FACET_VERTS][MAXCOORD][FACET_VERTS];
; 799  :   REAL ddc22dv[FACET_VERTS][MAXCOORD][FACET_VERTS];
; 800  :   int i,j,ii,jj;
; 801  :   REAL coeff1,coeff2;
; 802  : 
; 803  :   poisson = *(REAL*)get_extra(f_info->id,poisson_attr);

	mov	ecx, DWORD PTR [eax]

; 917  : 
; 918  :           for ( ii = 0 ; ii < SDIM  ; ii++ )

	mov	DWORD PTR _f_info$GSCopy$[ebp], eax
	push	ebx
	push	esi
	mov	ebx, DWORD PTR _form_factors_attr
	mov	eax, ecx
	imul	ebx, 240				; 000000f0H
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	esi, DWORD PTR _web[eax+12]
	mov	eax, DWORD PTR _web[eax+104]
	push	edi
	mov	edi, DWORD PTR _poisson_attr
	imul	edi, 240				; 000000f0H
	add	eax, edi
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [esi+edx*4]
	mov	edx, DWORD PTR _dymem
	mov	eax, DWORD PTR [eax+edx+64]
	fld	QWORD PTR [esi+eax]
	mov	eax, ecx
	shr	eax, 29					; 0000001dH
	fstp	QWORD PTR _poisson$[ebp]
	imul	eax, 112				; 00000070H
	mov	edi, DWORD PTR _web[eax+12]
	mov	eax, DWORD PTR _web[eax+104]
	mov	esi, ecx
	and	esi, 134217727				; 07ffffffH
	mov	esi, DWORD PTR [edi+esi*4]
	add	eax, ebx
	add	esi, DWORD PTR [eax+edx+64]
	mov	ebx, DWORD PTR _mode$[ebp]
	fld	QWORD PTR [esi+8]
	fld	QWORD PTR [esi]
	fmul	QWORD PTR [esi+16]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	fst	QWORD PTR _det$[ebp]
	fldz
	fcom	ST(1)
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN68@linear_ela@2

; 804  :   s = (REAL*)get_extra(f_info->id,form_factors_attr);
; 805  :   det = s[0]*s[2] - s[1]*s[1];
; 806  :   if ( det <= 0.0 )
; 807  :   { if ( mode == METHOD_VALUE ) return 0.0;

	fstp	ST(1)
	cmp	ebx, 1767				; 000006e7H
	je	$LN32@linear_ela@2
	fstp	ST(0)

; 808  :     sprintf(errmsg,"linear_elastic: Facet %s has unstrained area <= 0.\n",
; 809  :       ELNAME(f_info->id));

	test	ecx, 268435456				; 10000000H
	je	SHORT $LN34@linear_ela@2
	and	ecx, 134217727				; 07ffffffH
	inc	ecx
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN35@linear_ela@2
$LN34@linear_ela@2:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN35@linear_ela@2:
	push	eax
	push	OFFSET ??_C@_0DE@NGJDFJCA@linear_elastic?3?5Facet?5?$CFs?5has?5uns@
	push	OFFSET _errmsg
	call	_sprintf

; 810  :     kb_error(2154,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2154					; 0000086aH
	call	_kb_error
	fld	QWORD PTR _det$[ebp]
	add	esp, 24					; 00000018H
	jmp	SHORT $LN64@linear_ela@2
$LN68@linear_ela@2:
	fstp	ST(0)
$LN64@linear_ela@2:

; 811  :   }
; 812  :   area = sqrt(det)/2;

	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000

; 813  :   coeff1 = area/8/(1 + poisson);
; 814  :   coeff2 = coeff1*poisson/(1 - (web.dimension-1)*poisson);

	mov	ecx, DWORD PTR _web+620
	dec	ecx
	fmul	QWORD PTR __real@3fc0000000000000
	mov	DWORD PTR tv5146[ebp], ecx
	fld	QWORD PTR _poisson$[ebp]

; 815  :   q11 = s[2]/det; q12 = -s[1]/det; q22 = s[0]/det;
; 816  : 
; 817  :   side = f_info->sides[0];

	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	fld	ST(0)
	mov	eax, DWORD PTR [edx+1276]
	fld1
	mov	edi, DWORD PTR [eax]
	fadd	ST(1), ST(0)

; 818  :   f11 = SDIM_dot(side[0],side[0]);

	mov	ecx, DWORD PTR _web+616
	fxch	ST(3)
	mov	eax, DWORD PTR [edi]
	push	ecx
	push	eax
	fdivrp	ST(1), ST(0)
	push	eax
	fst	QWORD PTR _coeff1$[ebp]
	fmul	ST(0), ST(1)
	fild	DWORD PTR tv5146[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(2)
	fsubrp	ST(1), ST(0)
	fdivp	ST(1), ST(0)
	fstp	QWORD PTR _coeff2$[ebp]
	fld	QWORD PTR [esi+16]
	fld	QWORD PTR _det$[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _q11$[ebp]
	fld	QWORD PTR [esi+8]
	fdiv	ST(0), ST(1)
	fchs
	fstp	QWORD PTR _q12$[ebp]
	fdivr	QWORD PTR [esi]
	fstp	QWORD PTR _q22$[ebp]
	call	_dot
	fstp	QWORD PTR _f11$[ebp]

; 819  :   f12 = SDIM_dot(side[0],side[1]);

	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [edi]
	push	edx
	push	eax
	push	ecx
	call	_dot
	fstp	QWORD PTR _f12$[ebp]

; 820  :   f22 = SDIM_dot(side[1],side[1]);

	mov	edx, DWORD PTR _web+616
	mov	eax, DWORD PTR [edi+4]
	push	edx
	push	eax
	push	eax
	call	_dot

; 821  : 
; 822  :   c11 = f11*q11 + f12*q12 - 1;

	fld	QWORD PTR _f12$[ebp]
	fld	ST(0)
	add	esp, 36					; 00000024H
	fld	QWORD PTR _q12$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv1214[ebp]
	fld	QWORD PTR _f11$[ebp]
	fld	ST(0)
	fld	QWORD PTR _q11$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fsub	QWORD PTR __real@3ff0000000000000
	fst	QWORD PTR _c11$[ebp]

; 823  :   c12 = f11*q12 + f12*q22;

	fld	ST(4)
	fld	QWORD PTR _q22$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(3)
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fst	QWORD PTR _c12$[ebp]

; 824  :   c21 = f12*q11 + f22*q12;

	fld	ST(6)
	fmul	ST(0), ST(5)
	fxch	ST(6)
	fmul	ST(0), ST(4)
	faddp	ST(6), ST(0)
	fxch	ST(5)
	fst	QWORD PTR _c21$[ebp]

; 825  :   c22 = f12*q12 + f22*q22 - 1;

	fxch	ST(6)
	fmul	ST(0), ST(2)
	fadd	QWORD PTR tv1214[ebp]
	fsub	QWORD PTR __real@3ff0000000000000
	fst	QWORD PTR _c22$[ebp]

; 826  : 
; 827  :   energy = coeff1*(c11*c11+c12*c21+c12*c21+c22*c22)
; 828  :                  + coeff2*(c11+c22)*(c11+c22);

	fxch	ST(6)
	fmulp	ST(5), ST(0)
	fld	ST(5)
	fadd	ST(0), ST(1)
	fst	QWORD PTR tv1235[ebp]
	fld	ST(1)
	fmul	ST(0), ST(2)
	fadd	ST(0), ST(6)
	faddp	ST(6), ST(0)
	fld	ST(6)
	fmulp	ST(7), ST(0)
	fxch	ST(5)
	faddp	ST(6), ST(0)
	fld	QWORD PTR _coeff1$[ebp]
	fmul	ST(6), ST(0)
	fxch	ST(5)
	fmul	QWORD PTR _coeff2$[ebp]
	fmul	QWORD PTR tv1235[ebp]
	faddp	ST(6), ST(0)
	fxch	ST(5)
	fst	QWORD PTR _energy$[ebp]

; 829  : 
; 830  :   if ( mode == METHOD_VALUE ) return energy;

	cmp	ebx, 1767				; 000006e7H
	jne	SHORT $LN74@linear_ela@2
	fstp	ST(3)
	pop	edi
	fstp	ST(1)
	pop	esi
	fstp	ST(0)
	pop	ebx
	fstp	ST(1)
	fstp	ST(1)

; 930  : } // end linear_elastic_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN74@linear_ela@2:

; 831  : 
; 832  :   /* gradient */
; 833  : 
; 834  :   for ( i = 0 ; i < SDIM  ; i++ )

	mov	esi, DWORD PTR _web+616
	fstp	ST(0)
	fld	QWORD PTR __real@4000000000000000
	xor	eax, eax
	test	esi, esi
	jle	$LN59@linear_ela@2
	mov	ecx, DWORD PTR [edi+4]
	fstp	ST(4)
	mov	edi, DWORD PTR [edi]
	fstp	ST(4)
$LN28@linear_ela@2:

; 835  :   {
; 836  :      dc11dv[1][i] = 2*side[0][i]*q11 + side[1][i]*q12;

	fld	ST(1)
	inc	eax
	fmul	QWORD PTR [ecx+eax*8-8]
	fld	QWORD PTR [edi+eax*8-8]
	fmul	ST(0), ST(4)
	fld	ST(0)
	fmul	ST(0), ST(3)
	fadd	ST(0), ST(2)
	fst	QWORD PTR tv1253[ebp]
	fstp	QWORD PTR _dc11dv$[ebp+eax*8+40]

; 837  :      dc11dv[2][i] =                          side[0][i]*q12;

	fld	ST(3)
	fmul	QWORD PTR [edi+eax*8-8]
	fst	QWORD PTR _dc11dv$[ebp+eax*8+88]

; 838  :      dc12dv[1][i] = 2*side[0][i]*q12 + side[1][i]*q22;

	fxch	ST(1)
	fmul	ST(0), ST(4)
	fld	ST(6)
	fmul	QWORD PTR [ecx+eax*8-8]
	faddp	ST(1), ST(0)
	fst	QWORD PTR tv1261[ebp]
	fstp	QWORD PTR _dc12dv$[ebp+eax*8+40]

; 839  :      dc12dv[2][i] =                          side[0][i]*q22;

	fld	ST(5)
	fmul	QWORD PTR [edi+eax*8-8]
	fst	QWORD PTR tv1264[ebp]
	fstp	QWORD PTR _dc12dv$[ebp+eax*8+88]

; 840  :      dc21dv[1][i] = side[1][i]*q11;

	fld	ST(2)
	fmul	QWORD PTR [ecx+eax*8-8]
	fst	QWORD PTR tv1267[ebp]
	fstp	QWORD PTR _dc21dv$[ebp+eax*8+40]

; 841  :      dc21dv[2][i] = side[0][i]*q11 + 2*side[1][i]*q12;

	fld	QWORD PTR [ecx+eax*8-8]
	fmul	ST(0), ST(5)
	fst	QWORD PTR tv1270[ebp]
	fmul	ST(0), ST(4)
	fld	ST(3)
	fmul	QWORD PTR [edi+eax*8-8]
	faddp	ST(1), ST(0)
	fst	QWORD PTR _dc21dv$[ebp+eax*8+88]

; 842  :      dc22dv[1][i] = side[1][i]*q12;

	fxch	ST(2)
	fst	QWORD PTR _dc22dv$[ebp+eax*8+40]

; 843  :      dc22dv[2][i] = side[0][i]*q12 + 2*side[1][i]*q22;

	fld	QWORD PTR tv1270[ebp]
	fmul	ST(0), ST(7)
	fadd	ST(0), ST(2)
	fst	QWORD PTR tv1279[ebp]
	fstp	QWORD PTR _dc22dv$[ebp+eax*8+88]

; 844  :      dc11dv[0][i] = -(dc11dv[1][i] + dc11dv[2][i]);

	fxch	ST(1)
	fadd	QWORD PTR tv1253[ebp]
	fchs
	fstp	QWORD PTR _dc11dv$[ebp+eax*8-8]

; 845  :      dc12dv[0][i] = -(dc12dv[1][i] + dc12dv[2][i]);

	fld	QWORD PTR tv1264[ebp]
	fadd	QWORD PTR tv1261[ebp]
	fchs
	fstp	QWORD PTR _dc12dv$[ebp+eax*8-8]

; 846  :      dc21dv[0][i] = -(dc21dv[1][i] + dc21dv[2][i]);

	fxch	ST(1)
	fadd	QWORD PTR tv1267[ebp]
	fchs
	fstp	QWORD PTR _dc21dv$[ebp+eax*8-8]

; 847  :      dc22dv[0][i] = -(dc22dv[1][i] + dc22dv[2][i]);

	fadd	QWORD PTR tv1279[ebp]
	fchs
	fstp	QWORD PTR _dc22dv$[ebp+eax*8-8]
	cmp	eax, esi
	jl	$LN28@linear_ela@2

; 831  : 
; 832  :   /* gradient */
; 833  : 
; 834  :   for ( i = 0 ; i < SDIM  ; i++ )

	fld	QWORD PTR _coeff1$[ebp]
	fld	QWORD PTR _c11$[ebp]
	fxch	ST(5)
	fxch	ST(1)
	fxch	ST(4)
$LN59@linear_ela@2:

; 848  :   }
; 849  : 
; 850  : 
; 851  :   for ( j = 0 ; j < FACET_VERTS  ; j++ )

	xor	edi, edi
	xor	ecx, ecx
$LN65@linear_ela@2:

; 852  :      for ( i = 0 ; i < SDIM  ; i++ )

	xor	eax, eax
	test	esi, esi
	jle	$LN24@linear_ela@2
	fld	QWORD PTR _c12$[ebp]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv1319[ebp]
	fmul	ST(5), ST(0)
	fxch	ST(5)
	fstp	QWORD PTR tv1324[ebp]
	fld	QWORD PTR _c21$[ebp]
	fmul	ST(0), ST(5)
	fstp	QWORD PTR tv1330[ebp]
	fld	QWORD PTR _c22$[ebp]
	fmul	ST(0), ST(5)
	fstp	QWORD PTR tv1336[ebp]
	fld	QWORD PTR _coeff2$[ebp]
	fmul	ST(0), ST(5)
	fmul	QWORD PTR tv1235[ebp]
	fstp	QWORD PTR tv1344[ebp]
$LN58@linear_ela@2:
	lea	ebx, DWORD PTR [ecx+eax*8]

; 853  :      { f_info->grad[j][i] = (coeff1*(2*c11*dc11dv[j][i]  
; 854  :                                  + 2*c12*dc21dv[j][i]
; 855  :                                  + 2*c21*dc12dv[j][i]
; 856  :                                  + 2*c22*dc22dv[j][i]) 
; 857  :                   + 2*coeff2*(c11+c22)*(dc11dv[j][i] +dc22dv[j][i]));

	fld	QWORD PTR _dc21dv$[ebp+ebx]
	lea	edx, DWORD PTR [ecx+eax*8]
	fmul	QWORD PTR tv1319[ebp]
	lea	edx, DWORD PTR _dc11dv$[ebp+edx]
	fld	QWORD PTR [edx]
	lea	ebx, DWORD PTR [ecx+eax*8]
	fmul	QWORD PTR tv1324[ebp]
	lea	esi, DWORD PTR [ecx+eax*8]
	lea	esi, DWORD PTR _dc22dv$[ebp+esi]
	inc	eax
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dc12dv$[ebp+ebx]
	fmul	QWORD PTR tv1330[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv1336[ebp]
	fmul	QWORD PTR [esi]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	fadd	QWORD PTR [esi]
	mov	edx, DWORD PTR [edx+1336]
	mov	edx, DWORD PTR [edi+edx]
	fmul	QWORD PTR tv1344[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [edx+eax*8-8]
	mov	esi, DWORD PTR _web+616
	cmp	eax, esi
	jl	SHORT $LN58@linear_ela@2

; 852  :      for ( i = 0 ; i < SDIM  ; i++ )

	fld	QWORD PTR _c11$[ebp]
	fxch	ST(5)
$LN24@linear_ela@2:

; 848  :   }
; 849  : 
; 850  : 
; 851  :   for ( j = 0 ; j < FACET_VERTS  ; j++ )

	add	ecx, 48					; 00000030H
	add	edi, 4
	cmp	ecx, 144				; 00000090H
	jl	$LN65@linear_ela@2

; 858  :      }
; 859  : 
; 860  :   if ( mode == METHOD_GRADIENT ) return energy;

	cmp	DWORD PTR _mode$[ebp], 4321		; 000010e1H
	jne	SHORT $LN19@linear_ela@2
	fstp	ST(0)
	fstp	ST(2)
	fstp	ST(0)
	jmp	$LN123@linear_ela@2
$LN19@linear_ela@2:

; 861  : 
; 862  :   /* hessian */
; 863  : 
; 864  :   for ( i = 0 ; i < SDIM  ; i++ )

	test	esi, esi
	jle	$LN97@linear_ela@2
	fld	ST(2)
	xor	edx, edx
	fmul	ST(0), ST(1)
	mov	ebx, esi
	fstp	QWORD PTR tv1360[ebp]
	fld	ST(3)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv1370[ebp]
	fld	ST(1)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv1393[ebp]
	fldz
	jmp	SHORT $LN60@linear_ela@2
$LN104@linear_ela@2:
	fxch	ST(4)
$LN60@linear_ela@2:

; 865  :   {
; 866  :      ddc11dv[1][i][1] = 2*q11;

	fld	QWORD PTR tv1360[ebp]

; 867  :      ddc11dv[1][i][2] = q12;
; 868  : 
; 869  :      ddc11dv[2][i][1] = q12;
; 870  :      ddc11dv[2][i][2] = 0.0;
; 871  : 
; 872  :      ddc12dv[1][i][1] = 2*q12;
; 873  :      ddc12dv[1][i][2] = q22;
; 874  : 
; 875  :      ddc12dv[2][i][1] = q22;
; 876  :      ddc12dv[2][i][2] = 0.0;
; 877  : 
; 878  :      ddc21dv[1][i][1] = 0.0;
; 879  :      ddc21dv[1][i][2] = q11;
; 880  : 
; 881  :      ddc21dv[2][i][1] = q11;
; 882  :      ddc21dv[2][i][2] = 2*q12;
; 883  : 
; 884  :      ddc22dv[1][i][1] = 0.0;
; 885  :      ddc22dv[1][i][2] = q12;
; 886  : 
; 887  :      ddc22dv[2][i][1] = q12;
; 888  :      ddc22dv[2][i][2] = 2*q22;
; 889  : 
; 890  :      for ( j = 1 ; j < FACET_VERTS;  j++ )

	mov	ecx, edx
	fstp	QWORD PTR _ddc11dv$[ebp+edx+152]
	mov	eax, edx
	fxch	ST(4)
	mov	edi, 2
	fst	QWORD PTR _ddc11dv$[ebp+edx+160]
	fst	QWORD PTR _ddc11dv$[ebp+edx+296]
	fxch	ST(4)
	fst	QWORD PTR _ddc11dv$[ebp+edx+304]
	fld	QWORD PTR tv1370[ebp]
	fstp	QWORD PTR _ddc12dv$[ebp+edx+152]
	fxch	ST(2)
	fst	QWORD PTR _ddc12dv$[ebp+edx+160]
	fst	QWORD PTR _ddc12dv$[ebp+edx+296]
	fxch	ST(2)
	fst	QWORD PTR _ddc12dv$[ebp+edx+304]
	fst	QWORD PTR _ddc21dv$[ebp+edx+152]
	fxch	ST(3)
	fst	QWORD PTR _ddc21dv$[ebp+edx+160]
	fst	QWORD PTR _ddc21dv$[ebp+edx+296]
	fld	QWORD PTR tv1370[ebp]
	fstp	QWORD PTR _ddc21dv$[ebp+edx+304]
	fxch	ST(3)
	fst	QWORD PTR _ddc22dv$[ebp+edx+152]
	fxch	ST(4)
	fst	QWORD PTR _ddc22dv$[ebp+edx+160]
	fst	QWORD PTR _ddc22dv$[ebp+edx+296]
	fld	QWORD PTR tv1393[ebp]
	fstp	QWORD PTR _ddc22dv$[ebp+edx+304]
$LN15@linear_ela@2:

; 891  :      { 
; 892  :         ddc11dv[0][i][j] = -(ddc11dv[1][i][j] + ddc11dv[2][i][j]);

	fld	QWORD PTR _ddc11dv$[ebp+eax+296]
	add	eax, 8
	fadd	QWORD PTR _ddc11dv$[ebp+eax+144]
	add	ecx, 144				; 00000090H
	dec	edi
	fchs
	fstp	QWORD PTR _ddc11dv$[ebp+eax]

; 893  :         ddc12dv[0][i][j] = -(ddc12dv[1][i][j] + ddc12dv[2][i][j]);

	fld	QWORD PTR _ddc12dv$[ebp+eax+288]
	fadd	QWORD PTR _ddc12dv$[ebp+eax+144]
	fchs
	fstp	QWORD PTR _ddc12dv$[ebp+eax]

; 894  :         ddc21dv[0][i][j] = -(ddc21dv[1][i][j] + ddc21dv[2][i][j]);

	fld	QWORD PTR _ddc21dv$[ebp+eax+288]
	fadd	QWORD PTR _ddc21dv$[ebp+eax+144]
	fchs
	fstp	QWORD PTR _ddc21dv$[ebp+eax]

; 895  :         ddc22dv[0][i][j] = -(ddc22dv[1][i][j] + ddc22dv[2][i][j]);

	fld	QWORD PTR _ddc22dv$[ebp+eax+288]
	fadd	QWORD PTR _ddc22dv$[ebp+eax+144]
	fchs
	fstp	QWORD PTR _ddc22dv$[ebp+eax]

; 896  :         ddc11dv[j][i][0] = -(ddc11dv[j][i][1] + ddc11dv[j][i][2]);

	fld	QWORD PTR _ddc11dv$[ebp+ecx+16]
	fadd	QWORD PTR _ddc11dv$[ebp+ecx+8]
	fchs
	fstp	QWORD PTR _ddc11dv$[ebp+ecx]

; 897  :         ddc12dv[j][i][0] = -(ddc12dv[j][i][1] + ddc12dv[j][i][2]);

	fld	QWORD PTR _ddc12dv$[ebp+ecx+16]
	fadd	QWORD PTR _ddc12dv$[ebp+ecx+8]
	fchs
	fstp	QWORD PTR _ddc12dv$[ebp+ecx]

; 898  :         ddc21dv[j][i][0] = -(ddc21dv[j][i][1] + ddc21dv[j][i][2]);

	fld	QWORD PTR _ddc21dv$[ebp+ecx+16]
	fadd	QWORD PTR _ddc21dv$[ebp+ecx+8]
	fchs
	fstp	QWORD PTR _ddc21dv$[ebp+ecx]

; 899  :         ddc22dv[j][i][0] = -(ddc22dv[j][i][1] + ddc22dv[j][i][2]);

	fld	QWORD PTR _ddc22dv$[ebp+ecx+16]
	fadd	QWORD PTR _ddc22dv$[ebp+ecx+8]
	fchs
	fstp	QWORD PTR _ddc22dv$[ebp+ecx]
	jne	$LN15@linear_ela@2

; 900  :      }
; 901  :      ddc11dv[0][i][0] = -(ddc11dv[1][i][0] + ddc11dv[2][i][0]);

	fld	QWORD PTR _ddc11dv$[ebp+edx+288]
	add	edx, 24					; 00000018H
	dec	ebx
	fadd	QWORD PTR _ddc11dv$[ebp+edx+120]
	fchs
	fstp	QWORD PTR _ddc11dv$[ebp+edx-24]

; 902  :      ddc12dv[0][i][0] = -(ddc12dv[1][i][0] + ddc12dv[2][i][0]);

	fld	QWORD PTR _ddc12dv$[ebp+edx+264]
	fadd	QWORD PTR _ddc12dv$[ebp+edx+120]
	fchs
	fstp	QWORD PTR _ddc12dv$[ebp+edx-24]

; 903  :      ddc21dv[0][i][0] = -(ddc21dv[1][i][0] + ddc21dv[2][i][0]);

	fld	QWORD PTR _ddc21dv$[ebp+edx+264]
	fadd	QWORD PTR _ddc21dv$[ebp+edx+120]
	fchs
	fstp	QWORD PTR _ddc21dv$[ebp+edx-24]

; 904  :      ddc22dv[0][i][0] = -(ddc22dv[1][i][0] + ddc22dv[2][i][0]);

	fld	QWORD PTR _ddc22dv$[ebp+edx+264]
	fadd	QWORD PTR _ddc22dv$[ebp+edx+120]
	fchs
	fstp	QWORD PTR _ddc22dv$[ebp+edx-24]
	jne	$LN104@linear_ela@2

; 861  : 
; 862  :   /* hessian */
; 863  : 
; 864  :   for ( i = 0 ; i < SDIM  ; i++ )

	fstp	ST(0)
	fstp	ST(2)
	fstp	ST(0)
	fstp	ST(1)
$LN16@linear_ela@2:

; 905  :   }
; 906  : 
; 907  :   for ( j = 0 ; j < FACET_VERTS  ; j++ )

	xor	edx, edx
	xor	ebx, ebx
	xor	edi, edi
	mov	DWORD PTR tv4961[ebp], edx
	mov	DWORD PTR tv4963[ebp], ebx
	mov	DWORD PTR tv4965[ebp], edi
$LN66@linear_ela@2:

; 908  :      for ( i = 0 ; i < SDIM  ; i++ )

	mov	DWORD PTR _i$[ebp], 0
	test	esi, esi
	jle	$LN11@linear_ela@2
	fld	QWORD PTR _c12$[ebp]
	mov	DWORD PTR tv4844[ebp], ebx
	fmul	ST(0), ST(1)
	fld	ST(3)
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv1324[ebp]
	fld	QWORD PTR _c21$[ebp]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv1330[ebp]
	fld	QWORD PTR _c22$[ebp]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv1336[ebp]
	fld	QWORD PTR _coeff2$[ebp]
	fmul	ST(0), ST(2)
	fld	QWORD PTR tv1235[ebp]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv1344[ebp]
$LN61@linear_ela@2:

; 909  :         for ( jj = 0 ; jj < FACET_VERTS  ; jj++ )

	xor	ecx, ecx
	mov	DWORD PTR tv4174[ebp], ecx
	mov	DWORD PTR tv4341[ebp], edx
$LN62@linear_ela@2:

; 910  :         {
; 911  :           f_info->hess[j][jj][i][i] += 
; 912  :                 (coeff1*( 2*c11*ddc11dv[j][i][jj]
; 913  :                          + 2*c12*ddc21dv[j][i][jj]
; 914  :                          + 2*c21*ddc12dv[j][i][jj]
; 915  :                          + 2*c22*ddc22dv[j][i][jj]) 
; 916  :                  + 2*coeff2*(c11+c22)*(ddc11dv[j][i][jj]+ddc22dv[j][i][jj]));

	fld	QWORD PTR _ddc21dv$[ebp+edx]
	mov	eax, DWORD PTR _f_info$GSCopy$[ebp]
	fmul	ST(0), ST(2)
	mov	eax, DWORD PTR [eax+1340]
	fld	QWORD PTR _ddc11dv$[ebp+edx]
	mov	eax, DWORD PTR [edi+eax]
	fmul	QWORD PTR tv1324[ebp]
	mov	esi, DWORD PTR tv4174[ebp]
	mov	esi, DWORD PTR [eax+esi]
	mov	eax, DWORD PTR _i$[ebp]
	faddp	ST(1), ST(0)
	mov	esi, DWORD PTR [esi+eax*4]
	fld	QWORD PTR _ddc12dv$[ebp+edx]
	lea	eax, DWORD PTR [esi+eax*8]
	fmul	QWORD PTR tv1330[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv1336[ebp]
	fmul	QWORD PTR _ddc22dv$[ebp+edx]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fld	QWORD PTR _ddc11dv$[ebp+edx]
	fadd	QWORD PTR _ddc22dv$[ebp+edx]
	fmul	QWORD PTR tv1344[ebp]
	faddp	ST(1), ST(0)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]

; 917  : 
; 918  :           for ( ii = 0 ; ii < SDIM  ; ii++ )

	mov	esi, DWORD PTR _web+616
	xor	eax, eax
	test	esi, esi
	jle	$LN5@linear_ela@2
	fld	QWORD PTR _dc11dv$[ebp+ebx]
	fadd	QWORD PTR _dc22dv$[ebp+ebx]
$LN3@linear_ela@2:
	mov	ebx, DWORD PTR _f_info$GSCopy$[ebp]
	mov	ebx, DWORD PTR [ebx+1340]
	mov	edi, DWORD PTR [edi+ebx]
	mov	ebx, DWORD PTR tv4174[ebp]
	mov	edi, DWORD PTR [edi+ebx]
	mov	ebx, DWORD PTR _i$[ebp]
	mov	edi, DWORD PTR [edi+ebx*4]
	lea	ebx, DWORD PTR [ecx+eax*8]

; 919  :              f_info->hess[j][jj][i][ii] += 
; 920  :                   (coeff1*(2*dc11dv[jj][ii]*dc11dv[j][i] 
; 921  :                           + 2*dc12dv[jj][ii]*dc21dv[j][i]
; 922  :                           + 2*dc21dv[jj][ii]*dc12dv[j][i]
; 923  :                           + 2*dc22dv[jj][ii]*dc22dv[j][i]
; 924  :                          ) 
; 925  :                   + 2*coeff2*(dc11dv[jj][ii]+dc22dv[jj][ii])
; 926  :                                      *(dc11dv[j][i] +dc22dv[j][i]));

	fld	QWORD PTR _dc12dv$[ebp+ebx]
	mov	ebx, DWORD PTR tv4844[ebp]
	fmul	ST(0), ST(4)
	lea	edx, DWORD PTR [ecx+eax*8]
	lea	edx, DWORD PTR _dc11dv$[ebp+edx]
	lea	esi, DWORD PTR [ecx+eax*8]
	fmul	QWORD PTR _dc21dv$[ebp+ebx]
	lea	esi, DWORD PTR _dc22dv$[ebp+esi]
	fld	QWORD PTR [edx]
	lea	edi, DWORD PTR [edi+eax*8]
	fmul	ST(0), ST(5)
	fmul	QWORD PTR _dc11dv$[ebp+ebx]
	lea	ebx, DWORD PTR [ecx+eax*8]
	inc	eax
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dc21dv$[ebp+ebx]
	mov	ebx, DWORD PTR tv4844[ebp]
	fmul	ST(0), ST(5)
	fmul	QWORD PTR _dc12dv$[ebp+ebx]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [esi]
	fmul	ST(0), ST(5)
	fmul	QWORD PTR _dc22dv$[ebp+ebx]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(5)
	fld	QWORD PTR [edx]
	fadd	QWORD PTR [esi]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fadd	QWORD PTR [edi]
	fstp	QWORD PTR [edi]
	mov	esi, DWORD PTR _web+616
	mov	edi, DWORD PTR tv4965[ebp]
	cmp	eax, esi
	jl	$LN3@linear_ela@2

; 917  : 
; 918  :           for ( ii = 0 ; ii < SDIM  ; ii++ )

	mov	edx, DWORD PTR tv4341[ebp]
	fstp	ST(0)
$LN5@linear_ela@2:

; 909  :         for ( jj = 0 ; jj < FACET_VERTS  ; jj++ )

	add	DWORD PTR tv4174[ebp], 4
	add	edx, 8
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv4341[ebp], edx
	cmp	ecx, 144				; 00000090H
	jl	$LN62@linear_ela@2

; 908  :      for ( i = 0 ; i < SDIM  ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	add	ebx, 8
	mov	DWORD PTR _i$[ebp], eax
	mov	DWORD PTR tv4844[ebp], ebx
	cmp	eax, esi
	jl	$LN61@linear_ela@2

; 909  :         for ( jj = 0 ; jj < FACET_VERTS  ; jj++ )

	fstp	ST(0)
	fstp	ST(0)
$LN11@linear_ela@2:

; 905  :   }
; 906  : 
; 907  :   for ( j = 0 ; j < FACET_VERTS  ; j++ )

	mov	ebx, DWORD PTR tv4963[ebp]
	mov	edx, DWORD PTR tv4961[ebp]
	add	edi, 4
	add	ebx, 48					; 00000030H
	add	edx, 144				; 00000090H
	mov	DWORD PTR tv4965[ebp], edi
	mov	DWORD PTR tv4963[ebp], ebx
	mov	DWORD PTR tv4961[ebp], edx
	cmp	edi, 12					; 0000000cH
	jl	$LN66@linear_ela@2
$LN123@linear_ela@2:
	fstp	ST(0)
	fstp	ST(0)
	fstp	ST(0)

; 927  :          }
; 928  : 
; 929  :   return energy;

	fld	QWORD PTR _energy$[ebp]
$LN32@linear_ela@2:

; 930  : } // end linear_elastic_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN97@linear_ela@2:

; 861  : 
; 862  :   /* hessian */
; 863  : 
; 864  :   for ( i = 0 ; i < SDIM  ; i++ )

	fstp	ST(3)
	fstp	ST(1)
	fstp	ST(0)
	jmp	$LN16@linear_ela@2
_linear_elastic_all ENDP
_TEXT	ENDS
PUBLIC	_linear_elastic_energy
; Function compile flags: /Ogtp
;	COMDAT _linear_elastic_energy
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_linear_elastic_energy PROC				; COMDAT

; 943  : {

	push	ebp
	mov	ebp, esp

; 944  :  return linear_elastic_all(f_info,METHOD_VALUE);

	mov	eax, DWORD PTR _f_info$[ebp]
	push	1767					; 000006e7H
	push	eax
	call	_linear_elastic_all
	add	esp, 8

; 945  : }

	pop	ebp
	ret	0
_linear_elastic_energy ENDP
_TEXT	ENDS
PUBLIC	_linear_elastic_gradient
; Function compile flags: /Ogtp
;	COMDAT _linear_elastic_gradient
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_linear_elastic_gradient PROC				; COMDAT

; 960  : {

	push	ebp
	mov	ebp, esp

; 961  :  return linear_elastic_all(f_info,METHOD_GRADIENT);

	mov	eax, DWORD PTR _f_info$[ebp]
	push	4321					; 000010e1H
	push	eax
	call	_linear_elastic_all
	add	esp, 8

; 962  : }

	pop	ebp
	ret	0
_linear_elastic_gradient ENDP
_TEXT	ENDS
PUBLIC	_linear_elastic_hessian
; Function compile flags: /Ogtp
;	COMDAT _linear_elastic_hessian
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_linear_elastic_hessian PROC				; COMDAT

; 976  : {

	push	ebp
	mov	ebp, esp

; 977  :  return linear_elastic_all(f_info,METHOD_HESSIAN);

	mov	eax, DWORD PTR _f_info$[ebp]
	push	8763					; 0000223bH
	push	eax
	call	_linear_elastic_all
	add	esp, 8

; 978  : }

	pop	ebp
	ret	0
_linear_elastic_hessian ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DC@BNJBENLA@linear_elastic_B?5method?5only?5for@ ; `string'
PUBLIC	??_C@_09CJPMHPNP@LEBweight?$AA@			; `string'
PUBLIC	??_C@_0EK@BHDDNCKO@Facet?5extra?5attribute?5poisson_ra@ ; `string'
PUBLIC	??_C@_0DA@ODKFFMCE@linear_elastic_B?5method?5only?5for@ ; `string'
PUBLIC	_linear_elastic_B_init
;	COMDAT ??_C@_0DC@BNJBENLA@linear_elastic_B?5method?5only?5for@
CONST	SEGMENT
??_C@_0DC@BNJBENLA@linear_elastic_B?5method?5only?5for@ DB 'linear_elasti'
	DB	'c_B method only for SOAPFILM model.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09CJPMHPNP@LEBweight?$AA@
CONST	SEGMENT
??_C@_09CJPMHPNP@LEBweight?$AA@ DB 'LEBweight', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@BHDDNCKO@Facet?5extra?5attribute?5poisson_ra@
CONST	SEGMENT
??_C@_0EK@BHDDNCKO@Facet?5extra?5attribute?5poisson_ra@ DB 'Facet extra a'
	DB	'ttribute poisson_ratio missing. Needed by linear_elastic_B.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@ODKFFMCE@linear_elastic_B?5method?5only?5for@
CONST	SEGMENT
??_C@_0DA@ODKFFMCE@linear_elastic_B?5method?5only?5for@ DB 'linear_elasti'
	DB	'c_B method only for LINEAR model.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _linear_elastic_B_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_linear_elastic_B_init PROC				; COMDAT

; 1020 : 
; 1021 :   if ( web.modeltype != LINEAR )

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN3@linear_ela@3

; 1022 :      kb_error(2155,"linear_elastic_B method only for LINEAR model.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DA@ODKFFMCE@linear_elastic_B?5method?5only?5for@
	push	2155					; 0000086bH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN3@linear_ela@3:

; 1023 : 
; 1024 :   /* extra facet attribute for poisson_ratio */
; 1025 :   poisson_attr = find_attribute(FACET,POISSON_NAME);

	push	OFFSET ??_C@_0O@BCENEBHP@poisson_ratio?$AA@
	push	2
	call	_find_attribute
	add	esp, 8
	mov	DWORD PTR _poisson_attr, eax

; 1026 :   if ( poisson_attr < 0 ) /* not found */

	test	eax, eax
	jns	SHORT $LN2@linear_ela@3

; 1027 :      kb_error(2156,"Facet extra attribute poisson_ratio missing. Needed by linear_elastic_B.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0EK@BHDDNCKO@Facet?5extra?5attribute?5poisson_ra@
	push	2156					; 0000086cH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN2@linear_ela@3:

; 1028 : 
; 1029 :   LEBweight_attr = find_attribute(FACET,LEBWEIGHT_NAME); /* optional */

	push	OFFSET ??_C@_09CJPMHPNP@LEBweight?$AA@
	push	2
	call	_find_attribute
	add	esp, 8

; 1030 : 
; 1031 :   if ( web.dimension != 2 )

	cmp	DWORD PTR _web+620, 2
	mov	DWORD PTR _LEBweight_attr, eax
	je	SHORT $LN1@linear_ela@3

; 1032 :      kb_error(2157,"linear_elastic_B method only for SOAPFILM model.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DC@BNJBENLA@linear_elastic_B?5method?5only?5for@
	push	2157					; 0000086dH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@linear_ela@3:

; 1033 : } // end linear_elastic_B_init()

	ret	0
_linear_elastic_B_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DD@LNDHCMPA@linear_elastic_B?3?5Facet?5?$CFs?5has?5u@ ; `string'
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_linear_elastic_B_all
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_0DD@LNDHCMPA@linear_elastic_B?3?5Facet?5?$CFs?5has?5u@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0DD@LNDHCMPA@linear_elastic_B?3?5Facet?5?$CFs?5has?5u@ DB 'linear_e'
	DB	'lastic_B: Facet %s has unstrained area 0.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\method4.c
CONST	ENDS
;	COMDAT _linear_elastic_B_all
_TEXT	SEGMENT
_combo$ = -29192					; size = 8
_area$ = -29184						; size = 8
_coeff2$ = -29176					; size = 8
_c11$ = -29168						; size = 8
_energy$ = -29160					; size = 8
_areasign$ = -29152					; size = 8
tv2540 = -29144						; size = 8
tv9169 = -29140						; size = 4
_c12$ = -29136						; size = 8
_q22$ = -29136						; size = 8
tv2546 = -29128						; size = 8
tv9068 = -29124						; size = 4
_weight$ = -29120					; size = 8
tv2554 = -29112						; size = 8
tv8902 = -29108						; size = 4
tv2534 = -29104						; size = 8
tv9478 = -29100						; size = 4
tv14627 = -29096					; size = 8
tv8925 = -29092						; size = 4
_coeff1$ = -29088					; size = 8
_c21$ = -29080						; size = 8
_q11$ = -29080						; size = 8
_c22$ = -29072						; size = 8
_f11$ = -29072						; size = 8
tv2553 = -29064						; size = 8
tv13015 = -29060					; size = 4
tv4011 = -29060						; size = 4
_stuff$ = -29056					; size = 8
_f12$ = -29056						; size = 8
_det$ = -29056						; size = 8
tv2401 = -29048						; size = 8
_q12$ = -29048						; size = 8
_poisson$ = -29048					; size = 8
tv2529 = -29040						; size = 8
tv12715 = -29036					; size = 4
tv9769 = -29036						; size = 4
tv2357 = -29036						; size = 4
tv14731 = -29032					; size = 8
tv12886 = -29028					; size = 4
tv8492 = -29028						; size = 4
tv504 = -29028						; size = 4
tv12395 = -29024					; size = 4
tv9310 = -29024						; size = 4
tv12123 = -29020					; size = 4
tv9661 = -29020						; size = 4
tv10430 = -29016					; size = 4
tv9887 = -29016						; size = 4
tv12205 = -29012					; size = 4
tv9707 = -29012						; size = 4
tv11581 = -29008					; size = 4
tv9833 = -29008						; size = 4
tv12207 = -29004					; size = 4
tv9550 = -29004						; size = 4
tv11003 = -29000					; size = 4
tv9876 = -29000						; size = 4
tv12657 = -28996					; size = 4
tv8112 = -28996						; size = 4
tv1967 = -28996						; size = 4
tv12650 = -28992					; size = 4
tv8782 = -28992						; size = 4
tv2315 = -28992						; size = 4
tv14807 = -28988					; size = 4
tv11579 = -28988					; size = 4
tv9943 = -28988						; size = 4
tv2351 = -28988						; size = 4
tv15899 = -28984					; size = 4
_f_info$GSCopy$ = -28984				; size = 4
tv16608 = -28980					; size = 4
tv15991 = -28980					; size = 4
tv15184 = -28980					; size = 4
tv14673 = -28980					; size = 4
tv11561 = -28980					; size = 4
tv9992 = -28980						; size = 4
tv12598 = -28976					; size = 4
tv8913 = -28976						; size = 4
tv5744 = -28976						; size = 4
tv4854 = -28976						; size = 4
tv4469 = -28976						; size = 4
tv12600 = -28972					; size = 4
tv8506 = -28972						; size = 4
tv5753 = -28972						; size = 4
tv4908 = -28972						; size = 4
tv4485 = -28972						; size = 4
tv14816 = -28968					; size = 4
tv12995 = -28968					; size = 4
tv8494 = -28968						; size = 4
tv5851 = -28968						; size = 4
tv5034 = -28968						; size = 4
tv1878 = -28968						; size = 4
_sdim$ = -28964						; size = 4
tv14830 = -28960					; size = 4
tv13020 = -28960					; size = 4
tv8496 = -28960						; size = 4
tv6976 = -28960						; size = 4
tv5540 = -28960						; size = 4
tv4934 = -28960						; size = 4
tv4373 = -28960						; size = 4
tv2313 = -28956						; size = 4
_j$ = -28956						; size = 4
tv8198 = -28952						; size = 4
tv4982 = -28952						; size = 4
tv4412 = -28952						; size = 4
_a$ = -28952						; size = 4
tv15464 = -28948					; size = 4
tv9301 = -28948						; size = 4
tv5866 = -28948						; size = 4
tv4434 = -28948						; size = 4
tv3998 = -28948						; size = 4
tv3760 = -28948						; size = 4
tv3523 = -28948						; size = 4
_n$ = -28948						; size = 4
tv15583 = -28944					; size = 4
tv9450 = -28944						; size = 4
tv5818 = -28944						; size = 4
tv4365 = -28944						; size = 4
tv3912 = -28944						; size = 4
tv3671 = -28944						; size = 4
tv3544 = -28944						; size = 4
_m$ = -28944						; size = 4
_i$ = -28940						; size = 4
tv16142 = -28936					; size = 4
tv15212 = -28936					; size = 4
tv14776 = -28936					; size = 4
tv13003 = -28936					; size = 4
tv7014 = -28936						; size = 4
tv6799 = -28936						; size = 4
tv5617 = -28936						; size = 4
tv4789 = -28936						; size = 4
tv4000 = -28936						; size = 4
tv3762 = -28936						; size = 4
tv3388 = -28936						; size = 4
tv2002 = -28936						; size = 4
_ddQdv$ = -28932					; size = 10368
_ddCdv$ = -18564					; size = 10368
_ddstuff$ = -8196					; size = 2592
_ddadv$ = -5604						; size = 2592
_dSdv$ = -3012						; size = 576
_dFdv$ = -2436						; size = 576
_dQdv$ = -1860						; size = 576
_ddFdv$ = -1284						; size = 128
_ddSdv$ = -1156						; size = 128
_dCdv$ = -1028						; size = 576
_dstuff$ = -452						; size = 144
_dadv$ = -308						; size = 144
_side$ = -164						; size = 96
_Q$ = -68						; size = 32
_F$ = -36						; size = 32
_s$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_mode$ = 12						; size = 4
_linear_elastic_B_all PROC				; COMDAT

; 1047 : {

	push	ebp
	mov	ebp, esp
	mov	eax, 29192				; 00007208H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _f_info$[ebp]
	push	ebx

; 1048 :   REAL q11,q12,q22;  /* Q entries */
; 1049 :   REAL Q[2][2];
; 1050 :   REAL det;    /* det S */
; 1051 :   REAL area;  /* reference area of facet */
; 1052 :   REAL areasign; /* for reference area orientation */
; 1053 :   REAL poisson; /* poisson ratio */
; 1054 :   REAL f11,f12,f22;
; 1055 :   REAL F[2][2];
; 1056 :   REAL c11,c12,c21,c22;
; 1057 :   REAL energy;
; 1058 :   REAL stuff;
; 1059 :   REAL dadv[FACET_VERTS][MAXCOORD];
; 1060 :   REAL dstuff[FACET_VERTS][MAXCOORD];
; 1061 :   REAL dCdv[2][2][FACET_VERTS][MAXCOORD];
; 1062 :   REAL dFdv[2][2][FACET_VERTS][MAXCOORD];
; 1063 :   REAL dQdv[2][2][FACET_VERTS][MAXCOORD];
; 1064 :   REAL dSdv[2][2][FACET_VERTS][MAXCOORD];
; 1065 :   REAL ddFdv[2][2][2][2];
; 1066 :   REAL ddSdv[2][2][2][2];
; 1067 :   REAL ddCdv[2][2][FACET_VERTS][FACET_VERTS][MAXCOORD][MAXCOORD];
; 1068 :   REAL ddQdv[2][2][FACET_VERTS][FACET_VERTS][MAXCOORD][MAXCOORD];
; 1069 :   REAL ddstuff[FACET_VERTS][FACET_VERTS][MAXCOORD][MAXCOORD];
; 1070 :   REAL ddadv[FACET_VERTS][FACET_VERTS][MAXCOORD][MAXCOORD];
; 1071 :   int i,j,m,n,a,b,c,d,e;
; 1072 :   REAL coeff1,coeff2;
; 1073 :   REAL s[2][2];  /* form factors matrix */
; 1074 :   int sdim = SDIM - web.dimension; /* true space dimension */
; 1075 :   REAL combo;  /* combination coeff for second edge orthogonality */
; 1076 :   REAL weight;  /* facet weighting factor */
; 1077 :   REAL side[2][MAXCOORD]; 
; 1078 : 
; 1079 :   poisson = *(REAL*)get_extra(f_info->id,poisson_attr);

	mov	ebx, DWORD PTR _poisson_attr
	push	esi
	imul	ebx, 240				; 000000f0H
	push	edi
	mov	edi, DWORD PTR _web+616
	mov	eax, edi
	sub	eax, DWORD PTR _web+620
	mov	DWORD PTR _f_info$GSCopy$[ebp], ecx
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR _sdim$[ebp], eax
	mov	eax, ecx
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	esi, DWORD PTR _web[eax+12]
	mov	eax, DWORD PTR _web[eax+104]
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	mov	esi, DWORD PTR _dymem
	add	eax, ebx
	mov	eax, DWORD PTR [eax+esi+64]
	fld	QWORD PTR [edx+eax]

; 1080 :   if ( LEBweight_attr >= 0 )

	mov	edx, DWORD PTR _LEBweight_attr
	fstp	QWORD PTR _poisson$[ebp]
	test	edx, edx
	js	SHORT $LN214@linear_ela@4

; 1081 :     weight = *(REAL*)get_extra(f_info->id,LEBweight_attr);

	mov	eax, ecx
	imul	edx, 240				; 000000f0H
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	ebx, DWORD PTR _web[eax+12]
	mov	eax, DWORD PTR _web[eax+104]
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	add	eax, edx
	mov	edx, DWORD PTR [eax+esi+64]
	fld	QWORD PTR [ecx+edx]
	jmp	SHORT $LN792@linear_ela@4
$LN214@linear_ela@4:

; 1082 :   else weight = 1.0;

	fld1
$LN792@linear_ela@4:

; 1083 : 
; 1084 :   /* compute orthogonal second side */
; 1085 :   for ( j = 0 ; j < 2 ; j++ ) 

	lea	ecx, DWORD PTR _side$[ebp]
	fstp	QWORD PTR _weight$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv3388[ebp], ecx
$LL436@linear_ela@4:

; 1086 :    for ( i = 0 ; i < SDIM ; i++ ) 

	xor	eax, eax
	test	edi, edi
	jle	SHORT $LN211@linear_ela@4
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	esi, DWORD PTR [esi+1276]
	npad	7
$LL209@linear_ela@4:

; 1087 :     side[j][i] = f_info->sides[0][j][i];

	mov	ebx, DWORD PTR [esi]
	mov	ebx, DWORD PTR [edx+ebx]
	fld	QWORD PTR [ebx+eax*8]
	inc	eax
	fstp	QWORD PTR [ecx]
	add	ecx, 8
	cmp	eax, edi
	jl	SHORT $LL209@linear_ela@4
$LN211@linear_ela@4:

; 1083 : 
; 1084 :   /* compute orthogonal second side */
; 1085 :   for ( j = 0 ; j < 2 ; j++ ) 

	mov	ecx, DWORD PTR tv3388[ebp]
	add	edx, 4
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv3388[ebp], ecx
	cmp	edx, 8
	jl	SHORT $LL436@linear_ela@4

; 1088 :   s[0][0] = dot(side[0]+sdim,side[0]+sdim,web.dimension);  /* in ref */

	mov	eax, DWORD PTR _web+620
	mov	edi, DWORD PTR _sdim$[ebp]
	lea	esi, DWORD PTR _side$[ebp+edi*8]
	push	eax
	push	esi
	push	esi
	mov	DWORD PTR tv2313[ebp], esi
	call	_dot
	fst	QWORD PTR _s$[ebp]

; 1089 :   if ( s[0][0] == 0.0 ) return 0.0;

	fldz
	add	esp, 12					; 0000000cH
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jnp	$LN215@linear_ela@4

; 1090 :   s[0][1] = dot(side[0]+sdim,side[1]+sdim,web.dimension);  /* in ref */

	mov	ecx, DWORD PTR _web+620
	fstp	ST(0)
	lea	eax, DWORD PTR _side$[ebp+edi*8+48]
	push	ecx
	push	eax
	push	esi
	mov	DWORD PTR tv2315[ebp], eax
	call	_dot
	fst	QWORD PTR _s$[ebp+8]

; 1091 :   combo = s[0][1]/s[0][0];

	fld	QWORD PTR _s$[ebp]

; 1092 :   for ( i = 0 ; i < SDIM ; i++ ) 

	mov	ecx, DWORD PTR _web+616
	fdivr	ST(0), ST(1)
	add	esp, 12					; 0000000cH
	xor	eax, eax
	fst	QWORD PTR _combo$[ebp]
	test	ecx, ecx
	jle	SHORT $LN447@linear_ela@4
$LN205@linear_ela@4:

; 1093 :     side[1][i] -= combo*side[0][i];

	fld	QWORD PTR _side$[ebp+eax*8]
	inc	eax
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR _side$[ebp+eax*8+40]
	fstp	QWORD PTR _side$[ebp+eax*8+40]
	cmp	eax, ecx
	jl	SHORT $LN205@linear_ela@4
$LN447@linear_ela@4:

; 1094 : 
; 1095 :   /* compute form factors */
; 1096 :   for ( i = 0 ; i < web.dimension ; i++ )

	mov	ecx, DWORD PTR _web+620
	fstp	ST(0)
	mov	DWORD PTR _i$[ebp], 0
	test	ecx, ecx
	jle	SHORT $LN200@linear_ela@4
	lea	edx, DWORD PTR _s$[ebp]
	fstp	ST(0)
	mov	eax, esi
	mov	DWORD PTR tv3523[ebp], edx
	mov	DWORD PTR tv3544[ebp], eax
$LL202@linear_ela@4:

; 1097 :     for ( j = 0 ; j < web.dimension ; j++ )

	xor	edi, edi
	test	ecx, ecx
	jle	SHORT $LN201@linear_ela@4
	mov	esi, DWORD PTR tv3523[ebp]
	mov	ebx, DWORD PTR tv2313[ebp]
	npad	6
$LL199@linear_ela@4:

; 1098 :       s[i][j] = dot(side[i]+sdim,side[j]+sdim,web.dimension); 

	push	ecx
	mov	ecx, DWORD PTR tv3544[ebp]
	push	ebx
	push	ecx
	call	_dot
	fstp	QWORD PTR [esi]
	mov	ecx, DWORD PTR _web+620
	inc	edi
	add	esp, 12					; 0000000cH
	add	esi, 8
	add	ebx, 48					; 00000030H
	cmp	edi, ecx
	jl	SHORT $LL199@linear_ela@4
$LN201@linear_ela@4:

; 1094 : 
; 1095 :   /* compute form factors */
; 1096 :   for ( i = 0 ; i < web.dimension ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	add	DWORD PTR tv3544[ebp], 48		; 00000030H
	add	DWORD PTR tv3523[ebp], 16		; 00000010H
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, ecx
	jl	SHORT $LL202@linear_ela@4
	fld	QWORD PTR _s$[ebp+8]
$LN200@linear_ela@4:

; 1099 :   det = s[0][0]*s[1][1] - s[0][1]*s[1][0];

	fld	QWORD PTR _s$[ebp+24]

; 1100 :   if ( det <= 0.0 )

	mov	edi, DWORD PTR _mode$[ebp]
	fmul	QWORD PTR _s$[ebp]
	fld	QWORD PTR _s$[ebp+16]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _det$[ebp]
	fldz
	fcom	ST(1)
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN423@linear_ela@4

; 1104 :        kb_error(2158,errmsg,RECOVERABLE);

	fstp	ST(1)
	fstp	ST(1)
	cmp	edi, 1767				; 000006e7H
	je	$LN215@linear_ela@4

; 1101 :      { if ( mode == METHOD_VALUE ) return 0.0;

	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	fstp	ST(0)

; 1102 :        sprintf(errmsg,"linear_elastic_B: Facet %s has unstrained area 0.\n",
; 1103 :           ELNAME(f_info->id));

	mov	eax, DWORD PTR [edx]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN217@linear_ela@4
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN218@linear_ela@4
$LN217@linear_ela@4:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN218@linear_ela@4:
	push	eax
	push	OFFSET ??_C@_0DD@LNDHCMPA@linear_elastic_B?3?5Facet?5?$CFs?5has?5u@
	push	OFFSET _errmsg
	call	_sprintf

; 1104 :        kb_error(2158,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2158					; 0000086eH
	call	_kb_error
	fldz
	fld	QWORD PTR _det$[ebp]
	mov	ecx, DWORD PTR _web+620
	fld	QWORD PTR _s$[ebp+8]
	add	esp, 24					; 00000018H
	fxch	ST(2)
$LN423@linear_ela@4:

; 1105 :      }
; 1106 :   area = side[0][sdim]*side[1][sdim+1] - side[0][sdim+1]*side[1][sdim];

	mov	esi, DWORD PTR _sdim$[ebp]
	fld	QWORD PTR _side$[ebp+esi*8+56]
	lea	eax, DWORD PTR _side$[ebp+esi*8+56]
	mov	DWORD PTR tv2351[ebp], eax
	mov	eax, DWORD PTR tv2313[ebp]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv2315[ebp]
	fld	QWORD PTR [eax]
	lea	edx, DWORD PTR _side$[ebp+esi*8+8]
	fmul	QWORD PTR [edx]
	mov	DWORD PTR tv2357[ebp], edx
	fsubp	ST(1), ST(0)

; 1107 :   areasign = (area < 0.0) ? -0.5 : 0.5; /* triangle factor and orientation */

	fcom	ST(1)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 5
	jp	SHORT $LN219@linear_ela@4
	fld	QWORD PTR __real@bfe0000000000000
	jmp	SHORT $LN793@linear_ela@4
$LN219@linear_ela@4:
	fld	QWORD PTR __real@3fe0000000000000
$LN793@linear_ela@4:
	fst	QWORD PTR _areasign$[ebp]

; 1108 :   area *= areasign;
; 1109 :   coeff1 = 1.0/8/(1 + poisson);
; 1110 :   coeff2 = coeff1*poisson/(1 - (web.dimension-1)*poisson);

	dec	ecx
	fmulp	ST(1), ST(0)
	mov	DWORD PTR tv16608[ebp], ecx

; 1111 :   Q[0][0] = q11 = s[1][1]/det; 
; 1112 :   Q[0][1] = Q[1][0] = q12 = -s[0][1]/det; 
; 1113 :   Q[1][1] = q22 = s[0][0]/det;
; 1114 : 
; 1115 :   F[0][0] = f11 = dot(side[0],side[0],sdim);

	lea	ecx, DWORD PTR _side$[ebp]
	push	esi
	fstp	QWORD PTR _area$[ebp]
	push	ecx
	fld	QWORD PTR _poisson$[ebp]
	mov	edx, ecx
	fld	ST(0)
	push	edx
	fld1
	fadd	ST(1), ST(0)
	fld	QWORD PTR __real@3fc0000000000000
	fdivrp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _coeff1$[ebp]
	fmul	ST(0), ST(2)
	fild	DWORD PTR tv16608[ebp]
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	fsubrp	ST(2), ST(0)
	fdivrp	ST(1), ST(0)
	fstp	QWORD PTR _coeff2$[ebp]
	fld	QWORD PTR _s$[ebp+24]
	fdiv	ST(0), ST(1)
	fst	QWORD PTR _q11$[ebp]
	fstp	QWORD PTR _Q$[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fchs
	fst	QWORD PTR _q12$[ebp]
	fst	QWORD PTR _Q$[ebp+16]
	fstp	QWORD PTR _Q$[ebp+8]
	fdivr	QWORD PTR _s$[ebp]
	fst	QWORD PTR _q22$[ebp]
	fstp	QWORD PTR _Q$[ebp+24]
	call	_dot
	fst	QWORD PTR _f11$[ebp]

; 1116 :   F[0][1] = F[1][0] = f12 = dot(side[0],side[1],sdim);

	push	esi
	fstp	QWORD PTR _F$[ebp]
	lea	eax, DWORD PTR _side$[ebp+48]
	push	eax
	lea	ecx, DWORD PTR _side$[ebp]
	push	ecx
	call	_dot
	fst	QWORD PTR _f12$[ebp]

; 1117 :   F[1][1] = f22 = dot(side[1],side[1],sdim);

	lea	edx, DWORD PTR _side$[ebp+48]
	fst	QWORD PTR _F$[ebp+16]
	push	esi
	fstp	QWORD PTR _F$[ebp+8]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	fst	QWORD PTR _F$[ebp+24]

; 1118 : 
; 1119 :   c11 = f11*q11 + f12*q12 - 1;

	fld	QWORD PTR _f12$[ebp]
	add	esp, 36					; 00000024H
	fld	ST(0)
	fld	QWORD PTR _q12$[ebp]
	fmul	ST(1), ST(0)
	fld	QWORD PTR _f11$[ebp]
	fld	ST(0)
	fld	QWORD PTR _q11$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fadd	ST(0), ST(4)
	fsub	QWORD PTR __real@3ff0000000000000
	fstp	QWORD PTR _c11$[ebp]

; 1120 :   c12 = f11*q12 + f12*q22;

	fld	ST(4)
	fld	QWORD PTR _q22$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(3)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fst	QWORD PTR _c12$[ebp]

; 1121 :   c21 = f12*q11 + f22*q12;

	fld	ST(6)
	fmulp	ST(4), ST(0)
	fxch	ST(5)
	fmulp	ST(1), ST(0)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _c21$[ebp]

; 1122 :   c22 = f12*q12 + f22*q22 - 1;

	fxch	ST(4)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fld1
	fsub	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _c22$[ebp]

; 1123 : 
; 1124 :   stuff = coeff1*(c11*c11+c12*c21+c12*c21+c22*c22)
; 1125 :                  + coeff2*(c11+c22)*(c11+c22);

	fxch	ST(3)
	fmulp	ST(2), ST(0)
	fld	ST(2)
	fld	QWORD PTR _c11$[ebp]
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv2401[ebp]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fadd	ST(0), ST(3)
	faddp	ST(3), ST(0)
	fld	ST(3)
	fmulp	ST(4), ST(0)
	fxch	ST(2)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fmul	QWORD PTR _coeff1$[ebp]
	fld	ST(1)
	fmul	QWORD PTR _coeff2$[ebp]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fst	QWORD PTR _stuff$[ebp]

; 1126 :   energy = weight*area*stuff;

	fld	QWORD PTR _area$[ebp]
	fmul	QWORD PTR _weight$[ebp]
	fmulp	ST(1), ST(0)
	fstp	QWORD PTR _energy$[ebp]

; 1127 : 
; 1128 :   if ( mode == METHOD_VALUE ) return energy;

	cmp	edi, 1767				; 000006e7H
	je	$LN790@linear_ela@4

; 1129 : 
; 1130 :   /* gradient */
; 1131 : 
; 1132 :   for ( i = 0 ; i < sdim  ; i++ )  /* with respect to space coord */

	mov	ebx, DWORD PTR _web+620
	fldz
	xor	eax, eax
	mov	DWORD PTR _i$[ebp], eax
	test	esi, esi
	jle	$LN191@linear_ela@4
$LN437@linear_ela@4:

; 1133 :   {  
; 1134 :     for ( a = 0 ; a < web.dimension ; a++ )

	mov	DWORD PTR _a$[ebp], 0
	test	ebx, ebx
	jle	$LN192@linear_ela@4

; 1129 : 
; 1130 :   /* gradient */
; 1131 : 
; 1132 :   for ( i = 0 ; i < sdim  ; i++ )  /* with respect to space coord */

	lea	ecx, DWORD PTR _side$[ebp+eax*8]
	lea	esi, DWORD PTR _dFdv$[ebp+eax*8]

; 1133 :   {  
; 1134 :     for ( a = 0 ; a < web.dimension ; a++ )

	mov	DWORD PTR tv3760[ebp], ecx
	mov	DWORD PTR tv3762[ebp], esi
$LN190@linear_ela@4:

; 1135 :       for ( b = 0 ; b < web.dimension ; b++ )

	lea	eax, DWORD PTR _side$[ebp+eax*8]
	xor	edx, edx
	mov	DWORD PTR tv3671[ebp], eax
$LN428@linear_ela@4:

; 1136 :         for ( m = 0 ; m < web.dimension ; m++ )

	xor	eax, eax
	mov	ecx, esi
$LN433@linear_ela@4:

; 1137 :           dFdv[a][b][m][i] = (m==a ? side[b][i] : 0.0)
; 1138 :                            + (m==b ? side[a][i] : 0.0);

	cmp	eax, DWORD PTR _a$[ebp]
	jne	SHORT $LN221@linear_ela@4
	mov	edi, DWORD PTR tv3671[ebp]
	fld	QWORD PTR [edi]
	jmp	SHORT $LN222@linear_ela@4
$LN221@linear_ela@4:
	fld	ST(0)
$LN222@linear_ela@4:
	cmp	eax, edx
	jne	SHORT $LN223@linear_ela@4
	mov	edi, DWORD PTR tv3760[ebp]
	fld	QWORD PTR [edi]
	jmp	SHORT $LN224@linear_ela@4
$LN223@linear_ela@4:
	fld	ST(1)
$LN224@linear_ela@4:
	faddp	ST(1), ST(0)
	inc	eax
	add	ecx, 48					; 00000030H
	fstp	QWORD PTR [ecx-48]
	cmp	eax, ebx
	jl	SHORT $LN433@linear_ela@4

; 1135 :       for ( b = 0 ; b < web.dimension ; b++ )

	add	DWORD PTR tv3671[ebp], 48		; 00000030H
	inc	edx
	add	esi, 144				; 00000090H
	cmp	edx, ebx
	jl	SHORT $LN428@linear_ela@4

; 1133 :   {  
; 1134 :     for ( a = 0 ; a < web.dimension ; a++ )

	mov	eax, DWORD PTR _a$[ebp]
	mov	esi, DWORD PTR tv3762[ebp]
	add	DWORD PTR tv3760[ebp], 48		; 00000030H
	inc	eax
	add	esi, 288				; 00000120H
	mov	DWORD PTR _a$[ebp], eax
	cmp	eax, ebx
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv3762[ebp], esi
	jl	$LN190@linear_ela@4
	mov	esi, DWORD PTR _sdim$[ebp]
$LN192@linear_ela@4:

; 1129 : 
; 1130 :   /* gradient */
; 1131 : 
; 1132 :   for ( i = 0 ; i < sdim  ; i++ )  /* with respect to space coord */

	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, esi
	jl	$LN437@linear_ela@4
$LN191@linear_ela@4:

; 1139 :   }
; 1140 :   for ( i = sdim ; i < SDIM  ; i++ )  /* with respect to ref coord */

	mov	ecx, DWORD PTR _web+616
	mov	eax, esi
	mov	DWORD PTR _i$[ebp], eax
	cmp	esi, ecx
	jge	$LN179@linear_ela@4
$LN438@linear_ela@4:

; 1141 :   {  
; 1142 :     for ( a = 0 ; a < web.dimension ; a++ )

	mov	DWORD PTR _a$[ebp], 0
	test	ebx, ebx
	jle	$LN180@linear_ela@4

; 1139 :   }
; 1140 :   for ( i = sdim ; i < SDIM  ; i++ )  /* with respect to ref coord */

	lea	ecx, DWORD PTR _side$[ebp+eax*8]
	lea	esi, DWORD PTR _dSdv$[ebp+eax*8]

; 1141 :   {  
; 1142 :     for ( a = 0 ; a < web.dimension ; a++ )

	mov	DWORD PTR tv3998[ebp], ecx
	mov	DWORD PTR tv4000[ebp], esi
$LN178@linear_ela@4:

; 1143 :       for ( b = 0 ; b < web.dimension ; b++ )

	lea	eax, DWORD PTR _side$[ebp+eax*8]
	xor	edx, edx
	mov	DWORD PTR tv3912[ebp], eax
$LN426@linear_ela@4:

; 1144 :         for ( m = 0 ; m < web.dimension ; m++ )

	xor	eax, eax
	mov	ecx, esi
$LN434@linear_ela@4:

; 1145 :           dSdv[a][b][m][i] = (m==a ? side[b][i] : 0.0)
; 1146 :                            + (m==b ? side[a][i] : 0.0);

	cmp	eax, DWORD PTR _a$[ebp]
	jne	SHORT $LN225@linear_ela@4
	mov	edi, DWORD PTR tv3912[ebp]
	fld	QWORD PTR [edi]
	jmp	SHORT $LN226@linear_ela@4
$LN225@linear_ela@4:
	fld	ST(0)
$LN226@linear_ela@4:
	cmp	eax, edx
	jne	SHORT $LN227@linear_ela@4
	mov	edi, DWORD PTR tv3998[ebp]
	fld	QWORD PTR [edi]
	jmp	SHORT $LN228@linear_ela@4
$LN227@linear_ela@4:
	fld	ST(1)
$LN228@linear_ela@4:
	faddp	ST(1), ST(0)
	inc	eax
	add	ecx, 48					; 00000030H
	fstp	QWORD PTR [ecx-48]
	cmp	eax, ebx
	jl	SHORT $LN434@linear_ela@4

; 1143 :       for ( b = 0 ; b < web.dimension ; b++ )

	add	DWORD PTR tv3912[ebp], 48		; 00000030H
	inc	edx
	add	esi, 144				; 00000090H
	cmp	edx, ebx
	jl	SHORT $LN426@linear_ela@4

; 1141 :   {  
; 1142 :     for ( a = 0 ; a < web.dimension ; a++ )

	mov	eax, DWORD PTR _a$[ebp]
	mov	esi, DWORD PTR tv4000[ebp]
	add	DWORD PTR tv3998[ebp], 48		; 00000030H
	inc	eax
	add	esi, 288				; 00000120H
	mov	DWORD PTR _a$[ebp], eax
	cmp	eax, ebx
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv4000[ebp], esi
	jl	$LN178@linear_ela@4
	mov	esi, DWORD PTR _sdim$[ebp]
	mov	ecx, DWORD PTR _web+616
$LN180@linear_ela@4:

; 1139 :   }
; 1140 :   for ( i = sdim ; i < SDIM  ; i++ )  /* with respect to ref coord */

	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, ecx
	jl	$LN438@linear_ela@4
$LN179@linear_ela@4:

; 1147 :   }
; 1148 :   for ( i = sdim ; i < SDIM  ; i++ )  /* with respect to ref coord */

	mov	DWORD PTR _i$[ebp], esi
	cmp	esi, ecx
	jge	$LN167@linear_ela@4
$LN169@linear_ela@4:

; 1149 :   {  
; 1150 :     for ( a = 0 ; a < web.dimension ; a++ )

	test	ebx, ebx
	jle	$LN168@linear_ela@4
	mov	edx, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR _Q$[ebp]
	lea	eax, DWORD PTR _dQdv$[ebp+edx*8]
	mov	DWORD PTR tv4469[ebp], ecx
	mov	DWORD PTR tv4485[ebp], eax
	mov	DWORD PTR tv1967[ebp], ebx
$LN166@linear_ela@4:

; 1151 :       for ( b = 0 ; b < web.dimension ; b++ )

	mov	edx, DWORD PTR tv4485[ebp]
	lea	ecx, DWORD PTR _Q$[ebp]
	mov	DWORD PTR tv4412[ebp], ecx
	mov	DWORD PTR tv4434[ebp], edx
	mov	DWORD PTR tv504[ebp], ebx
$LN163@linear_ela@4:

; 1152 :         for ( m = 0 ; m < web.dimension ; m++ )

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR _dSdv$[ebp+eax*8]
	mov	DWORD PTR tv4365[ebp], eax
	mov	eax, DWORD PTR tv4434[ebp]
	mov	DWORD PTR tv4373[ebp], eax
	mov	DWORD PTR tv1878[ebp], ebx
$LN160@linear_ela@4:

; 1153 :         { REAL sum = 0.0;

	mov	edx, DWORD PTR tv4469[ebp]
	fld	ST(0)
	mov	edi, DWORD PTR tv4365[ebp]
	mov	DWORD PTR tv2002[ebp], ebx
$LN157@linear_ela@4:

; 1155 :             for ( d = 0 ; d < web.dimension ; d++ )

	mov	ecx, DWORD PTR tv4412[ebp]
	mov	eax, edi
	mov	esi, ebx
$LN154@linear_ela@4:

; 1156 :                 sum -= Q[a][c]*dSdv[c][d][m][i]*Q[d][b];

	fld	QWORD PTR [eax]
	add	eax, 144				; 00000090H
	fmul	QWORD PTR [edx]
	add	ecx, 16					; 00000010H
	dec	esi
	fmul	QWORD PTR [ecx-16]
	fsubp	ST(1), ST(0)
	jne	SHORT $LN154@linear_ela@4

; 1154 :           for ( c = 0 ; c < web.dimension ; c++ )

	mov	ecx, 1
	add	edx, 8
	add	edi, 288				; 00000120H
	sub	DWORD PTR tv2002[ebp], ecx
	jne	SHORT $LN157@linear_ela@4

; 1157 :             dQdv[a][b][m][i] = sum;

	mov	eax, DWORD PTR tv4373[ebp]
	add	DWORD PTR tv4365[ebp], 48		; 00000030H
	fstp	QWORD PTR [eax]
	add	eax, 48					; 00000030H
	sub	DWORD PTR tv1878[ebp], ecx
	mov	DWORD PTR tv4373[ebp], eax
	jne	SHORT $LN160@linear_ela@4

; 1151 :       for ( b = 0 ; b < web.dimension ; b++ )

	add	DWORD PTR tv4434[ebp], 144		; 00000090H
	add	DWORD PTR tv4412[ebp], 8
	dec	DWORD PTR tv504[ebp]
	jne	$LN163@linear_ela@4

; 1149 :   {  
; 1150 :     for ( a = 0 ; a < web.dimension ; a++ )

	add	DWORD PTR tv4469[ebp], 16		; 00000010H
	add	DWORD PTR tv4485[ebp], 288		; 00000120H
	dec	DWORD PTR tv1967[ebp]
	jne	$LN166@linear_ela@4
$LN168@linear_ela@4:

; 1147 :   }
; 1148 :   for ( i = sdim ; i < SDIM  ; i++ )  /* with respect to ref coord */

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _web+616
	jl	$LN169@linear_ela@4
$LN167@linear_ela@4:

; 1158 :         }
; 1159 :   }
; 1160 : 
; 1161 :   for ( i = 0 ; i < sdim  ; i++ )  /* with respect to space coord */

	mov	eax, DWORD PTR _sdim$[ebp]
	mov	DWORD PTR _i$[ebp], 0
	test	eax, eax
	jle	$LN422@linear_ela@4
$LN151@linear_ela@4:

; 1162 :   {
; 1163 :      for ( a = 0 ; a < web.dimension ; a++ )

	test	ebx, ebx
	jle	$LN150@linear_ela@4

; 1158 :         }
; 1159 :   }
; 1160 : 
; 1161 :   for ( i = 0 ; i < sdim  ; i++ )  /* with respect to space coord */

	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [ecx*8]
	mov	DWORD PTR tv4982[ebp], edx

; 1162 :   {
; 1163 :      for ( a = 0 ; a < web.dimension ; a++ )

	mov	DWORD PTR tv5034[ebp], ebx
$LN148@linear_ela@4:

; 1164 :         for ( b = 0 ; b < web.dimension ; b++ )

	mov	ecx, DWORD PTR tv4982[ebp]
	lea	eax, DWORD PTR _Q$[ebp]
	lea	edx, DWORD PTR _dCdv$[ebp+ecx]
	mov	DWORD PTR tv4854[ebp], eax
	mov	DWORD PTR tv4908[ebp], edx
	mov	DWORD PTR tv4934[ebp], ebx
$LN145@linear_ela@4:

; 1165 :           for ( m = 0 ; m < web.dimension ; m++ )

	mov	esi, DWORD PTR tv4982[ebp]
	mov	edi, DWORD PTR tv4908[ebp]
	lea	esi, DWORD PTR _dFdv$[ebp+esi]
	mov	DWORD PTR tv4789[ebp], ebx
$LN142@linear_ela@4:

; 1166 :           { REAL sum = 0.0;

	mov	ecx, DWORD PTR tv4854[ebp]
	fld	ST(0)
	mov	eax, esi
	mov	edx, ebx
$LN139@linear_ela@4:

; 1167 :              for ( c = 0 ; c < web.dimension ; c++ )
; 1168 :                 sum += dFdv[a][c][m][i]*Q[c][b];

	fld	QWORD PTR [eax]
	add	eax, 144				; 00000090H
	fmul	QWORD PTR [ecx]
	add	ecx, 16					; 00000010H
	dec	edx
	faddp	ST(1), ST(0)
	jne	SHORT $LN139@linear_ela@4

; 1169 :              dCdv[a][b][m][i] = sum;

	fstp	QWORD PTR [edi]
	mov	eax, 1
	add	esi, 48					; 00000030H
	add	edi, 48					; 00000030H
	sub	DWORD PTR tv4789[ebp], eax
	jne	SHORT $LN142@linear_ela@4

; 1164 :         for ( b = 0 ; b < web.dimension ; b++ )

	add	DWORD PTR tv4908[ebp], 144		; 00000090H
	add	DWORD PTR tv4854[ebp], 8
	sub	DWORD PTR tv4934[ebp], eax
	jne	SHORT $LN145@linear_ela@4

; 1162 :   {
; 1163 :      for ( a = 0 ; a < web.dimension ; a++ )

	add	DWORD PTR tv4982[ebp], 288		; 00000120H
	dec	DWORD PTR tv5034[ebp]
	jne	$LN148@linear_ela@4
$LN150@linear_ela@4:

; 1158 :         }
; 1159 :   }
; 1160 : 
; 1161 :   for ( i = 0 ; i < sdim  ; i++ )  /* with respect to space coord */

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _sdim$[ebp]
	jl	$LN151@linear_ela@4
	mov	eax, DWORD PTR _sdim$[ebp]
$LN422@linear_ela@4:

; 1170 :           }
; 1171 :   }
; 1172 :   for ( i = sdim ; i < SDIM  ; i++ )  /* with respect to ref coord */

	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _web+616
	jge	$LN134@linear_ela@4
$LN136@linear_ela@4:

; 1173 :   { 
; 1174 :      for ( a = 0 ; a < web.dimension ; a++ )

	test	ebx, ebx
	jle	$LN135@linear_ela@4
	mov	ecx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR _F$[ebp]
	lea	edx, DWORD PTR _dCdv$[ebp+ecx*8]
	mov	DWORD PTR tv5818[ebp], eax
	mov	DWORD PTR tv5866[ebp], edx
	mov	DWORD PTR tv5851[ebp], ebx
$LN133@linear_ela@4:

; 1175 :         for ( e = 0 ; e < web.dimension ; e++ )

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR _dQdv$[ebp+eax*8]
	mov	DWORD PTR tv5744[ebp], eax
	mov	eax, DWORD PTR tv5866[ebp]
	mov	DWORD PTR tv5753[ebp], eax
	mov	DWORD PTR tv5540[ebp], ebx
$LN130@linear_ela@4:

; 1176 :           for ( m = 0 ; m < web.dimension ; m++ )

	mov	edi, DWORD PTR tv5753[ebp]
	mov	esi, DWORD PTR tv5744[ebp]
	mov	DWORD PTR tv5617[ebp], ebx
$LN127@linear_ela@4:

; 1177 :           { REAL sum = 0.0;

	mov	eax, DWORD PTR tv5818[ebp]
	fld	ST(0)
	mov	ecx, esi
	mov	edx, ebx
$LN124@linear_ela@4:

; 1178 :              for ( b = 0 ; b < web.dimension ; b++ )
; 1179 :                 sum += F[a][b]*dQdv[b][e][m][i];

	fld	QWORD PTR [eax]
	add	eax, 8
	fmul	QWORD PTR [ecx]
	add	ecx, 288				; 00000120H
	dec	edx
	faddp	ST(1), ST(0)
	jne	SHORT $LN124@linear_ela@4

; 1180 :              dCdv[a][e][m][i] = sum;

	fstp	QWORD PTR [edi]
	mov	eax, 1
	add	esi, 48					; 00000030H
	add	edi, 48					; 00000030H
	sub	DWORD PTR tv5617[ebp], eax
	jne	SHORT $LN127@linear_ela@4

; 1175 :         for ( e = 0 ; e < web.dimension ; e++ )

	mov	ecx, 144				; 00000090H
	add	DWORD PTR tv5753[ebp], ecx
	add	DWORD PTR tv5744[ebp], ecx
	sub	DWORD PTR tv5540[ebp], eax
	jne	SHORT $LN130@linear_ela@4

; 1173 :   { 
; 1174 :      for ( a = 0 ; a < web.dimension ; a++ )

	add	DWORD PTR tv5818[ebp], 16		; 00000010H
	add	DWORD PTR tv5866[ebp], 288		; 00000120H
	sub	DWORD PTR tv5851[ebp], eax
	jne	$LN133@linear_ela@4
$LN135@linear_ela@4:

; 1170 :           }
; 1171 :   }
; 1172 :   for ( i = sdim ; i < SDIM  ; i++ )  /* with respect to ref coord */

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _web+616
	jl	$LN136@linear_ela@4
$LN134@linear_ela@4:

; 1181 :           }
; 1182 :   }
; 1183 : 
; 1184 : 
; 1185 :   for ( j = 0 ; j < web.dimension  ; j++ )

	fld	QWORD PTR __real@4000000000000000
	test	ebx, ebx
	jle	$LN119@linear_ela@4
	xor	edx, edx
	mov	esi, ebx
$LN121@linear_ela@4:

; 1186 :      for ( i = 0 ; i < SDIM  ; i++ )

	cmp	DWORD PTR _web+616, 0
	jle	$LN120@linear_ela@4
	mov	ecx, DWORD PTR _web+616
	fstp	ST(2)
	fld	QWORD PTR _c12$[ebp]
	mov	eax, edx
	fmul	ST(0), ST(2)
	fld	QWORD PTR _c11$[ebp]
	fmul	ST(0), ST(3)
	fld	QWORD PTR _c21$[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR _c22$[ebp]
	fmul	ST(0), ST(5)
	fld	QWORD PTR _coeff2$[ebp]
	fmulp	ST(6), ST(0)
	fxch	ST(5)
	fmul	QWORD PTR tv2401[ebp]
$LN399@linear_ela@4:

; 1187 :      { dstuff[j][i] = (coeff1*(2*c11*dCdv[0][0][j][i]  
; 1188 :                                  + 2*c12*dCdv[1][0][j][i]
; 1189 :                                  + 2*c21*dCdv[0][1][j][i]
; 1190 :                                  + 2*c22*dCdv[1][1][j][i]) 
; 1191 :                   + 2*coeff2*(c11+c22)*(dCdv[0][0][j][i] +dCdv[1][1][j][i])); 

	fld	QWORD PTR _dCdv$[ebp+eax+288]
	add	eax, 8
	dec	ecx
	fmul	ST(0), ST(4)
	fld	QWORD PTR _dCdv$[ebp+eax-8]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	ST(2)
	fmul	QWORD PTR _dCdv$[ebp+eax+136]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dCdv$[ebp+eax+424]
	fmul	ST(0), ST(7)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR _coeff1$[ebp]
	fld	QWORD PTR _dCdv$[ebp+eax+424]
	fadd	QWORD PTR _dCdv$[ebp+eax-8]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _dstuff$[ebp+eax-8]
	jne	SHORT $LN399@linear_ela@4

; 1186 :      for ( i = 0 ; i < SDIM  ; i++ )

	fstp	ST(3)
	fstp	ST(1)
	fstp	ST(0)
	fstp	ST(2)
	fstp	ST(1)
	fld	QWORD PTR __real@4000000000000000
	fld1
	fxch	ST(2)
	fxch	ST(1)
$LN120@linear_ela@4:

; 1181 :           }
; 1182 :   }
; 1183 : 
; 1184 : 
; 1185 :   for ( j = 0 ; j < web.dimension  ; j++ )

	add	edx, 48					; 00000030H
	dec	esi
	jne	$LN121@linear_ela@4
$LN119@linear_ela@4:

; 1192 :      }
; 1193 : 
; 1194 :   /* reference area change */
; 1195 :   for ( i = 0 ; i < SDIM  ; i++ ) 

	mov	ecx, DWORD PTR _web+616
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN405@linear_ela@4
$LN579@linear_ela@4:

; 1196 :     for ( a = 0 ; a < FACET_VERTS ; a++ ) dadv[a][i] = 0.0;

	fxch	ST(1)
	inc	eax
	fst	QWORD PTR _dadv$[ebp+eax*8-8]
	fst	QWORD PTR _dadv$[ebp+eax*8+40]
	fst	QWORD PTR _dadv$[ebp+eax*8+88]
	fxch	ST(1)
	cmp	eax, ecx
	jl	SHORT $LN579@linear_ela@4
$LN405@linear_ela@4:

; 1197 :   dadv[0][sdim] = side[1][sdim+1]*areasign;

	mov	edx, DWORD PTR tv2351[ebp]
	fld	QWORD PTR [edx]
	mov	eax, DWORD PTR _sdim$[ebp]
	fld	QWORD PTR _areasign$[ebp]

; 1198 :   dadv[1][sdim+1] = side[0][sdim]*areasign;

	mov	edx, DWORD PTR tv2313[ebp]
	fmul	ST(1), ST(0)

; 1199 :   dadv[0][sdim+1] = -side[1][sdim]*areasign;
; 1200 :   dadv[1][sdim] = -side[0][sdim+1]*areasign;
; 1201 : 
; 1202 :   /* grand finale for gradient */
; 1203 :   for ( a = 0 ; a < web.dimension ; a++ )

	xor	edi, edi
	fxch	ST(1)
	fstp	QWORD PTR _dadv$[ebp+eax*8]
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR tv2315[ebp]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _dadv$[ebp+eax*8+56]
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR tv2357[ebp]
	fmul	ST(0), ST(1)
	fchs
	fstp	QWORD PTR _dadv$[ebp+eax*8+8]
	fmul	QWORD PTR [edx]
	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	fchs
	fstp	QWORD PTR _dadv$[ebp+eax*8+48]
	test	ebx, ebx
	jle	SHORT $LN107@linear_ela@4

; 1197 :   dadv[0][sdim] = side[1][sdim+1]*areasign;

	fld	QWORD PTR _stuff$[ebp]
	xor	esi, esi
	fld	QWORD PTR _weight$[ebp]
	fld	QWORD PTR _area$[ebp]
$LN109@linear_ela@4:

; 1204 :      for ( i = 0 ; i < SDIM  ; i++ ) 

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN108@linear_ela@4
$LN106@linear_ela@4:
	lea	ecx, DWORD PTR [esi+eax*8]

; 1205 :      { f_info->grad[a+1][i] = weight*(dadv[a][i]*stuff + area*dstuff[a][i]);

	fld	QWORD PTR _dadv$[ebp+ecx]
	lea	ecx, DWORD PTR [esi+eax*8]
	fmul	ST(0), ST(3)
	fld	QWORD PTR _dstuff$[ebp+ecx]
	mov	ecx, DWORD PTR [edx+1336]
	mov	ecx, DWORD PTR [ecx+edi*4+4]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fst	QWORD PTR [ecx+eax*8]

; 1206 :        f_info->grad[0][i] -= weight*(dadv[a][i]*stuff + area*dstuff[a][i]);

	mov	ecx, DWORD PTR [edx+1336]
	mov	ecx, DWORD PTR [ecx]
	fsubr	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN106@linear_ela@4

; 1204 :      for ( i = 0 ; i < SDIM  ; i++ ) 

	mov	ebx, DWORD PTR _web+620
$LN108@linear_ela@4:

; 1199 :   dadv[0][sdim+1] = -side[1][sdim]*areasign;
; 1200 :   dadv[1][sdim] = -side[0][sdim+1]*areasign;
; 1201 : 
; 1202 :   /* grand finale for gradient */
; 1203 :   for ( a = 0 ; a < web.dimension ; a++ )

	inc	edi
	add	esi, 48					; 00000030H
	cmp	edi, ebx
	jl	SHORT $LN109@linear_ela@4
	mov	ecx, DWORD PTR _web+616
	fstp	ST(0)
	fstp	ST(1)
	fstp	ST(0)
$LN107@linear_ela@4:

; 1207 :      }
; 1208 :   /* combo correction */
; 1209 :   for ( i = 0 ; i < SDIM  ; i++ ) 

	fld	QWORD PTR _combo$[ebp]
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN101@linear_ela@4
$LN103@linear_ela@4:

; 1210 :   { f_info->grad[1][i] -= combo*f_info->grad[2][i];

	mov	ecx, DWORD PTR [edx+1336]
	mov	esi, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx+8]
	fld	QWORD PTR [ecx+eax*8]
	lea	esi, DWORD PTR [esi+eax*8]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [esi]
	fstp	QWORD PTR [esi]

; 1211 :     f_info->grad[0][i] += combo*f_info->grad[2][i];

	mov	ecx, DWORD PTR [edx+1336]
	mov	esi, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+8]
	fld	QWORD PTR [ecx+eax*8]
	lea	esi, DWORD PTR [esi+eax*8]
	fmul	ST(0), ST(1)
	inc	eax
	fadd	QWORD PTR [esi]
	fstp	QWORD PTR [esi]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN103@linear_ela@4

; 1207 :      }
; 1208 :   /* combo correction */
; 1209 :   for ( i = 0 ; i < SDIM  ; i++ ) 

	mov	ebx, DWORD PTR _web+620
$LN101@linear_ela@4:

; 1212 :   }
; 1213 :  
; 1214 :   if ( mode == METHOD_GRADIENT ) return energy;

	cmp	DWORD PTR _mode$[ebp], 4321		; 000010e1H
	jne	SHORT $LN100@linear_ela@4
	fstp	ST(3)
	fstp	ST(1)
	fstp	ST(0)
	jmp	$LN790@linear_ela@4
$LN100@linear_ela@4:

; 1215 : 
; 1216 :   /* hessian */
; 1217 : 
; 1218 :   /* calculate ddFdv and ddSdv, which are same and nonzero only for 
; 1219 :       like coordinates, so coordinate index not used */
; 1220 :   for ( a = 0 ; a < web.dimension ; a++ )

	xor	edi, edi
	test	ebx, ebx
	jle	$LN636@linear_ela@4
$LN99@linear_ela@4:
	mov	ecx, edi

; 1221 :      for ( b = 0 ; b < web.dimension ; b++ )

	xor	esi, esi
	shl	ecx, 6
	mov	DWORD PTR tv6976[ebp], ecx
$LN96@linear_ela@4:

; 1222 :         for ( m = 0 ; m < web.dimension ; m++ )

	xor	edx, edx
	mov	DWORD PTR tv6799[ebp], ecx
$LN93@linear_ela@4:

; 1223 :           for ( n = 0 ; n < web.dimension ; n++ )

	xor	eax, eax
$LN90@linear_ela@4:

; 1224 :           { ddFdv[a][b][m][n] = (a==m && b==n ? 1.0 : 0.0) + (a==n && b==m ? 1.0 : 0.0);

	cmp	edi, edx
	jne	SHORT $LN229@linear_ela@4
	cmp	esi, eax
	jne	SHORT $LN229@linear_ela@4
	fld	ST(3)
	jmp	SHORT $LN230@linear_ela@4
$LN229@linear_ela@4:
	fld	ST(2)
$LN230@linear_ela@4:
	cmp	edi, eax
	jne	SHORT $LN231@linear_ela@4
	cmp	esi, edx
	jne	SHORT $LN231@linear_ela@4
	fld	ST(4)
	jmp	SHORT $LN232@linear_ela@4
$LN231@linear_ela@4:
	fld	ST(3)
$LN232@linear_ela@4:
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _ddFdv$[ebp+ecx]

; 1225 :              ddSdv[a][b][m][n] = (a==m && b==n ? 1.0 : 0.0) + (a==n && b==m ? 1.0 : 0.0);

	cmp	edi, edx
	jne	SHORT $LN233@linear_ela@4
	cmp	esi, eax
	jne	SHORT $LN233@linear_ela@4
	fld	ST(3)
	jmp	SHORT $LN234@linear_ela@4
$LN233@linear_ela@4:
	fld	ST(2)
$LN234@linear_ela@4:
	cmp	edi, eax
	jne	SHORT $LN235@linear_ela@4
	cmp	esi, edx
	jne	SHORT $LN235@linear_ela@4
	fld	ST(4)
	jmp	SHORT $LN236@linear_ela@4
$LN235@linear_ela@4:
	fld	ST(3)
$LN236@linear_ela@4:
	faddp	ST(1), ST(0)
	inc	eax
	add	ecx, 8
	fstp	QWORD PTR _ddSdv$[ebp+ecx-8]
	cmp	eax, ebx
	jl	SHORT $LN90@linear_ela@4

; 1222 :         for ( m = 0 ; m < web.dimension ; m++ )

	mov	ecx, DWORD PTR tv6799[ebp]
	inc	edx
	add	ecx, 16					; 00000010H
	mov	DWORD PTR tv6799[ebp], ecx
	cmp	edx, ebx
	jl	SHORT $LN93@linear_ela@4

; 1221 :      for ( b = 0 ; b < web.dimension ; b++ )

	mov	ecx, DWORD PTR tv6976[ebp]
	inc	esi
	add	ecx, 32					; 00000020H
	mov	DWORD PTR tv6976[ebp], ecx
	cmp	esi, ebx
	jl	$LN96@linear_ela@4

; 1215 : 
; 1216 :   /* hessian */
; 1217 : 
; 1218 :   /* calculate ddFdv and ddSdv, which are same and nonzero only for 
; 1219 :       like coordinates, so coordinate index not used */
; 1220 :   for ( a = 0 ; a < web.dimension ; a++ )

	inc	edi
	cmp	edi, ebx
	jl	$LN99@linear_ela@4
$LN636@linear_ela@4:

; 1226 :           }
; 1227 : 
; 1228 :   /* calculate ddQdv */
; 1229 :   for ( i = sdim ; i < SDIM  ; i++ )

	mov	esi, DWORD PTR _sdim$[ebp]
	fstp	ST(3)
	mov	edx, DWORD PTR _web+616
	mov	eax, esi
	mov	DWORD PTR _i$[ebp], eax
	cmp	esi, edx
	jge	$LN424@linear_ela@4
	lea	ecx, DWORD PTR [esi+esi*2]
	add	ecx, ecx
	mov	DWORD PTR tv9992[ebp], ecx
$LN87@linear_ela@4:

; 1230 :     for ( j = sdim ; j < SDIM  ; j++ )

	mov	edi, esi
	mov	DWORD PTR _j$[ebp], esi
$LN84@linear_ela@4:

; 1231 :      for ( a = 0 ; a < web.dimension ; a++ )

	test	ebx, ebx
	jle	$LN83@linear_ela@4
	lea	edx, DWORD PTR _dSdv$[ebp+eax*8]
	add	ecx, edi
	mov	DWORD PTR tv4011[ebp], edx
	lea	edx, DWORD PTR _Q$[ebp]
	lea	eax, DWORD PTR _dQdv$[ebp+eax*8]
	lea	ecx, DWORD PTR _ddQdv$[ebp+ecx*8]
	mov	DWORD PTR tv9833[ebp], edx
	mov	DWORD PTR tv9876[ebp], eax
	mov	DWORD PTR tv9887[ebp], ecx
	mov	DWORD PTR tv9943[ebp], ebx
$LN81@linear_ela@4:

; 1232 :         for ( b = 0 ; b < web.dimension ; b++ )

	lea	eax, DWORD PTR _dQdv$[ebp+edi*8]
	mov	DWORD PTR tv9661[ebp], eax
	mov	eax, DWORD PTR tv9887[ebp]
	lea	edx, DWORD PTR _Q$[ebp]
	mov	DWORD PTR tv9550[ebp], edx
	mov	DWORD PTR tv9707[ebp], eax
	mov	DWORD PTR tv9769[ebp], ebx
$LN78@linear_ela@4:

; 1233 :           for ( m = 0 ; m < web.dimension ; m++ )

	mov	ecx, DWORD PTR tv4011[ebp]
	mov	edx, DWORD PTR tv9876[ebp]
	mov	eax, DWORD PTR tv9707[ebp]
	lea	edi, DWORD PTR _ddSdv$[ebp]
	mov	DWORD PTR tv9169[ebp], edi
	mov	DWORD PTR tv9301[ebp], ecx
	mov	DWORD PTR tv9310[ebp], edx
	mov	DWORD PTR tv9450[ebp], eax
	mov	DWORD PTR tv9478[ebp], ebx
	jmp	SHORT $LN75@linear_ela@4
$LN402@linear_ela@4:
	mov	ebx, DWORD PTR _web+620
$LN75@linear_ela@4:

; 1234 :              for ( n = 0 ; n < web.dimension ; n++ )

	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR tv9661[ebp]
	mov	eax, DWORD PTR tv9450[ebp]
	lea	ecx, DWORD PTR _dSdv$[ebp+ecx*8]
	mov	DWORD PTR tv8782[ebp], edi
	mov	DWORD PTR tv8902[ebp], ecx
	mov	DWORD PTR tv8913[ebp], edx
	mov	DWORD PTR tv8925[ebp], eax
	mov	DWORD PTR tv9068[ebp], ebx
	jmp	SHORT $LN72@linear_ela@4
$LN403@linear_ela@4:
	mov	ebx, DWORD PTR _web+620
$LN72@linear_ela@4:

; 1235 :              { REAL sum = 0.0;

	mov	edx, DWORD PTR tv9833[ebp]
	fld	ST(1)
	mov	eax, DWORD PTR tv9310[ebp]
	mov	DWORD PTR tv8198[ebp], edx
	mov	edx, DWORD PTR tv9301[ebp]
	mov	DWORD PTR tv8492[ebp], edi
	mov	DWORD PTR tv8494[ebp], ecx
	mov	DWORD PTR tv8496[ebp], edx
	mov	DWORD PTR tv8506[ebp], eax
	mov	DWORD PTR tv8112[ebp], ebx
	jmp	SHORT $LN69@linear_ela@4
$LN404@linear_ela@4:
	mov	ebx, DWORD PTR _web+620
$LN69@linear_ela@4:

; 1237 :                   for ( d = 0 ; d < web.dimension ; d++ )

	mov	eax, DWORD PTR tv9550[ebp]
	mov	esi, DWORD PTR tv8913[ebp]
	mov	DWORD PTR tv7014[ebp], ebx
$LN66@linear_ela@4:

; 1238 :                      sum += - dQdv[a][c][m][i]*dSdv[c][d][n][j]*Q[d][b]
; 1239 :                               - ( i==j ? Q[a][c]*ddSdv[c][d][m][n]*Q[d][b] : 0.0 )
; 1240 :                               - Q[a][c]*dSdv[c][d][m][i]*dQdv[d][b][n][j];

	mov	ebx, DWORD PTR _j$[ebp]
	cmp	DWORD PTR _i$[ebp], ebx
	jne	SHORT $LN237@linear_ela@4
	mov	ebx, DWORD PTR tv8198[ebp]
	fld	QWORD PTR [ebx]
	fmul	QWORD PTR [edi]
	fmul	QWORD PTR [eax]
	jmp	SHORT $LN238@linear_ela@4
$LN237@linear_ela@4:
	fld	ST(2)
$LN238@linear_ela@4:
	fld	QWORD PTR [ecx]
	mov	ebx, DWORD PTR tv8506[ebp]
	fmul	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv8198[ebp]
	add	ecx, 144				; 00000090H
	add	edx, 144				; 00000090H
	fmul	QWORD PTR [eax]
	add	edi, 32					; 00000020H
	add	eax, 16					; 00000010H
	add	esi, 288				; 00000120H
	dec	DWORD PTR tv7014[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx]
	fmul	QWORD PTR [edx-144]
	fmul	QWORD PTR [esi-288]
	faddp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	jne	SHORT $LN66@linear_ela@4

; 1236 :                 for ( c = 0 ; c < web.dimension ; c++ )

	mov	edx, DWORD PTR tv8496[ebp]
	mov	ecx, DWORD PTR tv8494[ebp]
	mov	edi, DWORD PTR tv8492[ebp]
	add	DWORD PTR tv8506[ebp], 144		; 00000090H
	mov	ebx, 8
	add	DWORD PTR tv8198[ebp], ebx
	add	edx, 288				; 00000120H
	add	ecx, 288				; 00000120H
	add	edi, 64					; 00000040H
	mov	esi, 1
	sub	DWORD PTR tv8112[ebp], esi
	mov	DWORD PTR tv8496[ebp], edx
	mov	DWORD PTR tv8494[ebp], ecx
	mov	DWORD PTR tv8492[ebp], edi
	jne	$LN404@linear_ela@4

; 1241 :                 ddQdv[a][b][m][n][i][j] = sum; 

	mov	eax, DWORD PTR tv8925[ebp]
	mov	edi, DWORD PTR tv8782[ebp]
	fstp	QWORD PTR [eax]
	mov	ecx, DWORD PTR tv8902[ebp]
	add	eax, 288				; 00000120H
	mov	DWORD PTR tv8925[ebp], eax
	mov	eax, 48					; 00000030H
	add	DWORD PTR tv8913[ebp], eax
	add	edi, ebx
	add	ecx, eax
	sub	DWORD PTR tv9068[ebp], esi
	mov	DWORD PTR tv8782[ebp], edi
	mov	DWORD PTR tv8902[ebp], ecx
	jne	$LN403@linear_ela@4

; 1233 :           for ( m = 0 ; m < web.dimension ; m++ )

	mov	edi, DWORD PTR tv9169[ebp]
	add	DWORD PTR tv9450[ebp], 864		; 00000360H
	add	DWORD PTR tv9301[ebp], eax
	add	DWORD PTR tv9310[ebp], eax
	add	edi, 16					; 00000010H
	sub	DWORD PTR tv9478[ebp], esi
	mov	DWORD PTR tv9169[ebp], edi
	jne	$LN402@linear_ela@4

; 1232 :         for ( b = 0 ; b < web.dimension ; b++ )

	add	DWORD PTR tv9550[ebp], ebx
	add	DWORD PTR tv9707[ebp], 2592		; 00000a20H
	add	DWORD PTR tv9661[ebp], 144		; 00000090H
	sub	DWORD PTR tv9769[ebp], esi
	mov	ebx, DWORD PTR _web+620
	jne	$LN78@linear_ela@4

; 1231 :      for ( a = 0 ; a < web.dimension ; a++ )

	add	DWORD PTR tv9833[ebp], 16		; 00000010H
	add	DWORD PTR tv9876[ebp], 288		; 00000120H
	add	DWORD PTR tv9887[ebp], 5184		; 00001440H
	sub	DWORD PTR tv9943[ebp], esi
	mov	edi, DWORD PTR _j$[ebp]
	jne	$LN81@linear_ela@4
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR tv9992[ebp]
	mov	esi, DWORD PTR _sdim$[ebp]
	mov	edx, DWORD PTR _web+616
$LN83@linear_ela@4:

; 1230 :     for ( j = sdim ; j < SDIM  ; j++ )

	inc	edi
	mov	DWORD PTR _j$[ebp], edi
	cmp	edi, edx
	jl	$LN84@linear_ela@4

; 1226 :           }
; 1227 : 
; 1228 :   /* calculate ddQdv */
; 1229 :   for ( i = sdim ; i < SDIM  ; i++ )

	inc	eax
	add	ecx, 6
	mov	DWORD PTR _i$[ebp], eax
	mov	DWORD PTR tv9992[ebp], ecx
	cmp	eax, edx
	jl	$LN87@linear_ela@4
$LN424@linear_ela@4:

; 1242 :              }
; 1243 : 
; 1244 :   /* calculate ddCdv */
; 1245 :   for ( i = 0 ; i < SDIM  ; i++ )

	mov	DWORD PTR _i$[ebp], 0
	test	edx, edx
	jle	$LN61@linear_ela@4
	lea	ecx, DWORD PTR _dQdv$[ebp]
	mov	DWORD PTR tv13003[ebp], 0
	mov	DWORD PTR tv13020[ebp], ecx
$LN63@linear_ela@4:

; 1246 :     for ( j = 0 ; j < SDIM  ; j++ )

	xor	edx, edx
	lea	eax, DWORD PTR _dQdv$[ebp]
	mov	DWORD PTR _j$[ebp], edx
	mov	DWORD PTR tv12995[ebp], eax
$LN435@linear_ela@4:

; 1247 :      for ( a = 0 ; a < web.dimension ; a++ )

	mov	DWORD PTR _a$[ebp], 0
	test	ebx, ebx
	jle	$LN59@linear_ela@4
	mov	eax, DWORD PTR tv13003[ebp]
	add	eax, edx
	add	eax, eax
	add	eax, eax
	add	eax, eax
	lea	ecx, DWORD PTR _ddQdv$[ebp+eax]
	lea	eax, DWORD PTR _ddCdv$[ebp+eax]
	mov	DWORD PTR tv13015[ebp], ecx
	mov	DWORD PTR tv12886[ebp], eax
$LN409@linear_ela@4:

; 1248 :         for ( b = 0 ; b < web.dimension ; b++ )

	mov	eax, DWORD PTR tv13020[ebp]
	lea	ecx, DWORD PTR _Q$[ebp]
	mov	DWORD PTR tv12395[ebp], ecx
	mov	ecx, DWORD PTR tv12995[ebp]
	mov	DWORD PTR tv12598[ebp], eax
	mov	eax, DWORD PTR tv13015[ebp]
	mov	DWORD PTR tv12600[ebp], ecx
	mov	ecx, DWORD PTR tv12886[ebp]
	mov	DWORD PTR tv12650[ebp], eax
	mov	DWORD PTR tv12657[ebp], ecx
	mov	DWORD PTR tv12715[ebp], ebx
$LN410@linear_ela@4:

; 1249 :         { 
; 1250 :           for ( m = 0 ; m < web.dimension ; m++ )

	mov	eax, DWORD PTR tv12598[ebp]
	mov	ecx, DWORD PTR tv12650[ebp]
	mov	DWORD PTR tv12123[ebp], eax
	mov	eax, DWORD PTR tv12657[ebp]
	mov	DWORD PTR _m$[ebp], 0
	mov	DWORD PTR tv12205[ebp], ecx
	mov	DWORD PTR tv12207[ebp], eax
$LN411@linear_ela@4:

; 1251 :              for ( n = 0 ; n < web.dimension ; n++ )

	mov	esi, DWORD PTR tv12600[ebp]
	mov	ecx, DWORD PTR tv12207[ebp]
	mov	eax, DWORD PTR tv12205[ebp]
	mov	DWORD PTR _n$[ebp], 0
	mov	DWORD PTR tv11561[ebp], esi
	mov	DWORD PTR tv11579[ebp], ecx
	mov	DWORD PTR tv11581[ebp], eax
$LN412@linear_ela@4:

; 1252 :              { REAL sum = 0.0;

	mov	ecx, DWORD PTR tv12395[ebp]
	fld	ST(1)
	mov	edi, DWORD PTR tv12123[ebp]
	mov	DWORD PTR tv10430[ebp], ecx
	mov	ecx, DWORD PTR tv11581[ebp]

; 1253 :                 for ( c = 0 ; c < web.dimension ; c++ )

	xor	eax, eax
	mov	DWORD PTR tv11003[ebp], ecx
$LN429@linear_ela@4:

; 1254 :                   sum += ( (i==j && i < sdim) ? ddFdv[a][c][m][n]*Q[c][b] : 0.0 )
; 1255 :                          + ( (i < sdim && j >= sdim) ? dFdv[a][c][m][i]*dQdv[c][b][n][j] : 0.0)
; 1256 :                          + ( (j < sdim && i >= sdim) ? dFdv[a][c][n][j]*dQdv[c][b][m][i] : 0.0)
; 1257 :                          + ( (i >= sdim && j >= sdim) ? F[a][c]*ddQdv[c][b][m][n][i][j] : 0.0);

	mov	ecx, DWORD PTR _sdim$[ebp]
	cmp	DWORD PTR _i$[ebp], edx
	jne	SHORT $LN239@linear_ela@4
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $LN239@linear_ela@4
	mov	edx, DWORD PTR _a$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	edx, DWORD PTR _m$[ebp]
	lea	ecx, DWORD PTR [edx+ecx*2]
	mov	edx, DWORD PTR _n$[ebp]
	lea	ecx, DWORD PTR [edx+ecx*2]
	fld	QWORD PTR _ddFdv$[ebp+ecx*8]
	mov	edx, DWORD PTR tv10430[ebp]
	fmul	QWORD PTR [edx]
	mov	ecx, DWORD PTR _sdim$[ebp]
	jmp	SHORT $LN240@linear_ela@4
$LN239@linear_ela@4:
	fld	ST(2)
$LN240@linear_ela@4:
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $LN414@linear_ela@4
	cmp	DWORD PTR _j$[ebp], ecx
	jl	SHORT $LN414@linear_ela@4
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	ecx, DWORD PTR _m$[ebp]
	lea	ecx, DWORD PTR [ecx+edx*2]
	add	ecx, edx
	lea	edx, DWORD PTR [ecx+ecx*2]
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [ecx+edx*2]
	fld	QWORD PTR _dFdv$[ebp+edx*8]
	mov	ecx, DWORD PTR _sdim$[ebp]
	fmul	QWORD PTR [esi]
	jmp	SHORT $LN242@linear_ela@4
$LN414@linear_ela@4:
	fld	ST(3)
$LN242@linear_ela@4:
	cmp	DWORD PTR _j$[ebp], ecx
	jge	SHORT $LN415@linear_ela@4
	cmp	DWORD PTR _i$[ebp], ecx
	jl	SHORT $LN415@linear_ela@4
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	ecx, DWORD PTR _n$[ebp]
	lea	ecx, DWORD PTR [ecx+edx*2]
	add	ecx, edx
	lea	edx, DWORD PTR [ecx+ecx*2]
	mov	ecx, DWORD PTR _j$[ebp]
	lea	edx, DWORD PTR [ecx+edx*2]
	fld	QWORD PTR _dFdv$[ebp+edx*8]
	mov	ecx, DWORD PTR _sdim$[ebp]
	fmul	QWORD PTR [edi]
	jmp	SHORT $LN244@linear_ela@4
$LN415@linear_ela@4:
	fld	ST(4)
$LN244@linear_ela@4:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	DWORD PTR _i$[ebp], ecx
	jl	SHORT $LN417@linear_ela@4
	cmp	edx, ecx
	jl	SHORT $LN417@linear_ela@4
	mov	ecx, DWORD PTR _a$[ebp]
	lea	ecx, DWORD PTR [eax+ecx*2]
	fld	QWORD PTR _F$[ebp+ecx*8]
	mov	ecx, DWORD PTR tv11003[ebp]
	fmul	QWORD PTR [ecx]
	jmp	SHORT $LN246@linear_ela@4
$LN417@linear_ela@4:
	fld	ST(5)
$LN246@linear_ela@4:

; 1253 :                 for ( c = 0 ; c < web.dimension ; c++ )

	add	DWORD PTR tv10430[ebp], 16		; 00000010H

; 1254 :                   sum += ( (i==j && i < sdim) ? ddFdv[a][c][m][n]*Q[c][b] : 0.0 )
; 1255 :                          + ( (i < sdim && j >= sdim) ? dFdv[a][c][m][i]*dQdv[c][b][n][j] : 0.0)
; 1256 :                          + ( (j < sdim && i >= sdim) ? dFdv[a][c][n][j]*dQdv[c][b][m][i] : 0.0)
; 1257 :                          + ( (i >= sdim && j >= sdim) ? F[a][c]*ddQdv[c][b][m][n][i][j] : 0.0);

	fxch	ST(2)
	add	DWORD PTR tv11003[ebp], 5184		; 00001440H
	faddp	ST(3), ST(0)
	inc	eax
	add	esi, 288				; 00000120H
	faddp	ST(2), ST(0)
	add	edi, 288				; 00000120H
	faddp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	cmp	eax, ebx
	jl	$LN429@linear_ela@4

; 1258 :                 ddCdv[a][b][m][n][i][j] = sum;

	mov	ecx, DWORD PTR tv11579[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	fstp	QWORD PTR [ecx]
	mov	esi, DWORD PTR tv11561[ebp]
	add	DWORD PTR tv11581[ebp], 288		; 00000120H
	inc	eax
	add	esi, 48					; 00000030H
	add	ecx, 288				; 00000120H
	mov	DWORD PTR _n$[ebp], eax
	mov	DWORD PTR tv11561[ebp], esi
	mov	DWORD PTR tv11579[ebp], ecx
	cmp	eax, ebx
	jl	$LN412@linear_ela@4

; 1249 :         { 
; 1250 :           for ( m = 0 ; m < web.dimension ; m++ )

	mov	eax, DWORD PTR _m$[ebp]
	add	DWORD PTR tv12123[ebp], 48		; 00000030H
	mov	ecx, 864				; 00000360H
	add	DWORD PTR tv12207[ebp], ecx
	add	DWORD PTR tv12205[ebp], ecx
	inc	eax
	mov	DWORD PTR _m$[ebp], eax
	cmp	eax, ebx
	jl	$LN411@linear_ela@4

; 1248 :         for ( b = 0 ; b < web.dimension ; b++ )

	add	DWORD PTR tv12395[ebp], 8
	mov	eax, 144				; 00000090H
	add	DWORD PTR tv12600[ebp], eax
	add	DWORD PTR tv12598[ebp], eax
	mov	eax, 2592				; 00000a20H
	add	DWORD PTR tv12650[ebp], eax
	add	DWORD PTR tv12657[ebp], eax
	dec	DWORD PTR tv12715[ebp]
	jne	$LN410@linear_ela@4

; 1247 :      for ( a = 0 ; a < web.dimension ; a++ )

	mov	eax, DWORD PTR _a$[ebp]
	add	DWORD PTR tv12886[ebp], 5184		; 00001440H
	inc	eax
	mov	DWORD PTR _a$[ebp], eax
	cmp	eax, ebx
	jl	$LN409@linear_ela@4
$LN59@linear_ela@4:

; 1246 :     for ( j = 0 ; j < SDIM  ; j++ )

	add	DWORD PTR tv12995[ebp], 8
	inc	edx
	mov	DWORD PTR _j$[ebp], edx
	cmp	edx, DWORD PTR _web+616
	jl	$LN435@linear_ela@4

; 1242 :              }
; 1243 : 
; 1244 :   /* calculate ddCdv */
; 1245 :   for ( i = 0 ; i < SDIM  ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	add	DWORD PTR tv13020[ebp], 8
	add	DWORD PTR tv13003[ebp], 6
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _web+616
	jl	$LN63@linear_ela@4
$LN61@linear_ela@4:

; 1259 :              }
; 1260 :   }
; 1261 :   /* calculate ddstuff */
; 1262 :   for ( i = 0 ; i < SDIM  ; i++ )

	cmp	DWORD PTR _web+616, 0
	jle	$LN742@linear_ela@4
	mov	eax, DWORD PTR _web+616
	lea	edx, DWORD PTR _dCdv$[ebp+432]
	mov	DWORD PTR tv14816[ebp], 0
	mov	DWORD PTR tv14830[ebp], edx
	mov	DWORD PTR tv14807[ebp], eax
$LN42@linear_ela@4:

; 1263 :     for ( j = 0 ; j < SDIM  ; j++ )

	lea	ecx, DWORD PTR _dCdv$[ebp+432]
	mov	DWORD PTR _j$[ebp], 0
	mov	DWORD PTR tv14776[ebp], ecx
$LN39@linear_ela@4:

; 1264 :      for ( a = 0 ; a < web.dimension ; a++ )

	test	ebx, ebx
	jle	$LN38@linear_ela@4
	fstp	ST(2)
	mov	edi, DWORD PTR tv14816[ebp]
	fld	QWORD PTR _c12$[ebp]
	add	edi, DWORD PTR _j$[ebp]
	fmul	ST(0), ST(2)
	mov	edx, DWORD PTR tv14830[ebp]
	add	edi, edi
	add	edi, edi
	fstp	QWORD PTR tv2529[ebp]
	add	edi, edi
	fld	QWORD PTR _c11$[ebp]
	mov	DWORD PTR tv14673[ebp], ebx
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv2534[ebp]
	fld	QWORD PTR _c21$[ebp]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv2540[ebp]
	fld	QWORD PTR _c22$[ebp]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv2546[ebp]
	fld	QWORD PTR _coeff2$[ebp]
	fmul	ST(0), ST(2)
	fst	QWORD PTR tv2553[ebp]
	fld	QWORD PTR tv2401[ebp]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv2554[ebp]
	jmp	SHORT $LN36@linear_ela@4
$LN397@linear_ela@4:
	fld	QWORD PTR tv2553[ebp]
	fld	QWORD PTR __real@4000000000000000
	fxch	ST(2)
	fxch	ST(1)
$LN36@linear_ela@4:
	fld	QWORD PTR [edx-288]

; 1265 :         for ( b = 0 ; b < web.dimension ; b++ )

	mov	eax, DWORD PTR tv14776[ebp]
	fmul	ST(0), ST(3)
	mov	ecx, edi
	fld	QWORD PTR [edx-432]
	mov	esi, ebx
	fmul	ST(0), ST(4)
	fld	QWORD PTR [edx-144]
	fmul	ST(0), ST(5)
	fld	QWORD PTR [edx]
	fmulp	ST(6), ST(0)
	fxch	ST(5)
	fstp	QWORD PTR tv14627[ebp]
	fld	QWORD PTR [edx]
	fadd	QWORD PTR [edx-432]
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR tv14731[ebp]
$LN398@linear_ela@4:

; 1266 :         { REAL term; 
; 1267 :           term = (coeff1*( 2*c11*ddCdv[0][0][a][b][i][j]
; 1268 :                          + 2*c12*ddCdv[1][0][a][b][i][j]
; 1269 :                          + 2*c21*ddCdv[0][1][a][b][i][j]
; 1270 :                          + 2*c22*ddCdv[1][1][a][b][i][j]) 
; 1271 :                  + 2*coeff2*(c11+c22)*(ddCdv[0][0][a][b][i][j]+ddCdv[1][1][a][b][i][j]))
; 1272 : 
; 1273 :                  + (coeff1*(2*dCdv[0][0][a][i]*dCdv[0][0][b][j] 
; 1274 :                           + 2*dCdv[0][1][a][i]*dCdv[1][0][b][j]
; 1275 :                           + 2*dCdv[1][0][a][i]*dCdv[0][1][b][j]
; 1276 :                           + 2*dCdv[1][1][a][i]*dCdv[1][1][b][j]
; 1277 :                          ) 
; 1278 :                   + 2*coeff2*(dCdv[0][0][a][i]+dCdv[1][1][a][i])
; 1279 :                                      *(dCdv[0][0][b][j] +dCdv[1][1][b][j]));

	fld	QWORD PTR _ddCdv$[ebp+ecx+5184]
	add	ecx, 288				; 00000120H
	fmul	QWORD PTR tv2529[ebp]
	add	eax, 48					; 00000030H
	dec	esi
	fld	QWORD PTR tv2534[ebp]
	fmul	QWORD PTR _ddCdv$[ebp+ecx-288]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddCdv$[ebp+ecx+2304]
	fmul	QWORD PTR tv2540[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddCdv$[ebp+ecx+7488]
	fmul	QWORD PTR tv2546[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR _coeff1$[ebp]
	fld	QWORD PTR _ddCdv$[ebp+ecx+7488]
	fadd	QWORD PTR _ddCdv$[ebp+ecx-288]
	fmul	QWORD PTR tv2554[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax-192]
	fmul	ST(0), ST(2)
	fld	ST(3)
	fmul	QWORD PTR [eax-480]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax-336]
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax-48]
	fmul	QWORD PTR tv14627[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR _coeff1$[ebp]
	fld	QWORD PTR [eax-48]
	fadd	QWORD PTR [eax-480]
	fmul	QWORD PTR tv14731[ebp]
	faddp	ST(1), ST(0)
	faddp	ST(1), ST(0)

; 1280 :             ddstuff[a][b][i][j] = term;

	fstp	QWORD PTR _ddstuff$[ebp+ecx-288]
	jne	$LN398@linear_ela@4

; 1264 :      for ( a = 0 ; a < web.dimension ; a++ )

	fstp	ST(0)
	add	edx, 48					; 00000030H

; 1265 :         for ( b = 0 ; b < web.dimension ; b++ )

	fstp	ST(0)
	add	edi, 864				; 00000360H
	dec	DWORD PTR tv14673[ebp]
	fstp	ST(1)
	jne	$LN397@linear_ela@4

; 1264 :      for ( a = 0 ; a < web.dimension ; a++ )

	fld	QWORD PTR __real@4000000000000000
	fld	QWORD PTR _combo$[ebp]
	fxch	ST(2)
	fxch	ST(1)
$LN38@linear_ela@4:

; 1263 :     for ( j = 0 ; j < SDIM  ; j++ )

	mov	eax, DWORD PTR _j$[ebp]
	add	DWORD PTR tv14776[ebp], 8
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, DWORD PTR _web+616
	jl	$LN39@linear_ela@4

; 1259 :              }
; 1260 :   }
; 1261 :   /* calculate ddstuff */
; 1262 :   for ( i = 0 ; i < SDIM  ; i++ )

	add	DWORD PTR tv14830[ebp], 8
	add	DWORD PTR tv14816[ebp], 6
	dec	DWORD PTR tv14807[ebp]
	jne	$LN42@linear_ela@4
$LN742@linear_ela@4:

; 1281 :          }
; 1282 : 
; 1283 :   /* area hessian */
; 1284 :   for ( i = sdim ; i < SDIM  ; i++ )

	mov	eax, DWORD PTR _sdim$[ebp]
	fstp	ST(0)
	mov	edx, DWORD PTR _web+616
	cmp	eax, edx
	jge	SHORT $LN407@linear_ela@4
	lea	ecx, DWORD PTR [eax+eax*2]
	add	ecx, ecx
	mov	DWORD PTR tv15212[ebp], ecx
	mov	ecx, edx
	sub	ecx, eax
	mov	DWORD PTR tv15184[ebp], ecx
$LN30@linear_ela@4:

; 1285 :     for ( j = sdim ; j < SDIM  ; j++ )

	mov	eax, DWORD PTR _sdim$[ebp]
	mov	DWORD PTR _j$[ebp], eax
$LN27@linear_ela@4:

; 1286 :      for ( a = 0 ; a < web.dimension ; a++ )

	test	ebx, ebx
	jle	SHORT $LN26@linear_ela@4
	mov	esi, DWORD PTR tv15212[ebp]
	add	esi, DWORD PTR _j$[ebp]
	mov	edi, ebx
	lea	esi, DWORD PTR _ddadv$[ebp+esi*8]
$LN24@linear_ela@4:

; 1287 :         for ( b = 0 ; b < web.dimension ; b++ )

	mov	eax, esi
	mov	ecx, ebx
$LN21@linear_ela@4:

; 1288 :           ddadv[a][b][i][j] = 0.0;

	fst	QWORD PTR [eax]
	add	eax, 288				; 00000120H
	dec	ecx
	jne	SHORT $LN21@linear_ela@4

; 1286 :      for ( a = 0 ; a < web.dimension ; a++ )

	add	esi, 864				; 00000360H
	dec	edi
	jne	SHORT $LN24@linear_ela@4
$LN26@linear_ela@4:

; 1285 :     for ( j = sdim ; j < SDIM  ; j++ )

	mov	eax, DWORD PTR _j$[ebp]
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, edx
	jl	SHORT $LN27@linear_ela@4

; 1281 :          }
; 1282 : 
; 1283 :   /* area hessian */
; 1284 :   for ( i = sdim ; i < SDIM  ; i++ )

	add	DWORD PTR tv15212[ebp], 6
	dec	DWORD PTR tv15184[ebp]
	jne	SHORT $LN30@linear_ela@4
$LN407@linear_ela@4:

; 1289 :   ddadv[0][1][sdim][sdim+1] = areasign;

	mov	ecx, DWORD PTR _sdim$[ebp]
	fld	QWORD PTR _areasign$[ebp]
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	lea	eax, DWORD PTR [ecx*8]
	sub	eax, ecx
	add	eax, eax
	add	eax, eax
	add	eax, eax
	fst	QWORD PTR _ddadv$[ebp+eax+296]

; 1290 :   ddadv[1][0][sdim+1][sdim] = areasign;
; 1291 :   ddadv[0][1][sdim+1][sdim] = -areasign;
; 1292 :   ddadv[1][0][sdim][sdim+1] = -areasign;
; 1293 : 
; 1294 : 
; 1295 :   /* big Hessian finale */
; 1296 :   for ( i = 0 ; i < SDIM  ; i++ )

	xor	ecx, ecx
	fst	QWORD PTR _ddadv$[ebp+eax+912]
	fchs
	fst	QWORD PTR _ddadv$[ebp+eax+336]
	fstp	QWORD PTR _ddadv$[ebp+eax+872]
	cmp	edx, ecx
	jle	$LN758@linear_ela@4

; 1289 :   ddadv[0][1][sdim][sdim+1] = areasign;

	fld	QWORD PTR _stuff$[ebp]
	mov	DWORD PTR tv16142[ebp], ecx
	fld	QWORD PTR _weight$[ebp]
	fld	QWORD PTR _area$[ebp]
$LN441@linear_ela@4:

; 1297 :     for ( j = 0 ; j < SDIM  ; j++ )

	mov	DWORD PTR _j$[ebp], 0
	test	edx, edx
	jle	$LN17@linear_ela@4
$LN430@linear_ela@4:

; 1298 :      for ( a = 0 ; a < web.dimension ; a++ )

	xor	edi, edi
	mov	DWORD PTR _a$[ebp], edi
	test	ebx, ebx
	jle	$LN14@linear_ela@4
	mov	eax, DWORD PTR tv16142[ebp]
	add	eax, DWORD PTR _j$[ebp]
	lea	edx, DWORD PTR [ecx*8]
	add	eax, eax
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv15991[ebp], eax
	mov	DWORD PTR tv15899[ebp], edx
$LN12@linear_ela@4:

; 1299 :         for ( b = 0 ; b < web.dimension ; b++ )

	xor	edx, edx
	test	ebx, ebx
	jle	$LN11@linear_ela@4
	mov	DWORD PTR tv15583[ebp], eax
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, eax
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv15464[ebp], eax
$LN419@linear_ela@4:
	mov	ebx, DWORD PTR _sdim$[ebp]

; 1300 :         { REAL term;
; 1301 :             term =
; 1302 :                  ( (i >= sdim && j >= sdim) ? ddadv[a][b][i][j]*stuff : 0.0)
; 1303 :               + dadv[a][i]*dstuff[b][j]
; 1304 :               + dadv[b][j]*dstuff[a][i]
; 1305 :               + area*ddstuff[a][b][i][j];

	cmp	ecx, ebx
	jl	SHORT $LN247@linear_ela@4
	cmp	DWORD PTR _j$[ebp], ebx
	jl	SHORT $LN420@linear_ela@4
	mov	edi, DWORD PTR tv15583[ebp]
	fld	QWORD PTR _ddadv$[ebp+edi]
	mov	edi, DWORD PTR _a$[ebp]
	fmul	ST(0), ST(3)
	jmp	SHORT $LN248@linear_ela@4
$LN420@linear_ela@4:
	mov	edi, DWORD PTR _a$[ebp]
$LN247@linear_ela@4:
	fld	ST(3)
$LN248@linear_ela@4:
	mov	ebx, DWORD PTR tv15899[ebp]
	fld	QWORD PTR _dadv$[ebp+ebx]
	mov	ebx, DWORD PTR tv15464[ebp]
	fmul	QWORD PTR _dstuff$[ebp+ebx]
	mov	ebx, DWORD PTR tv15899[ebp]
	inc	edx
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dstuff$[ebp+ebx]
	mov	ebx, DWORD PTR tv15464[ebp]
	fmul	QWORD PTR _dadv$[ebp+ebx]
	mov	ebx, DWORD PTR tv15583[ebp]
	add	DWORD PTR tv15583[ebp], 288		; 00000120H
	add	DWORD PTR tv15464[ebp], 48		; 00000030H
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddstuff$[ebp+ebx]

; 1306 :           term *= weight;
; 1307 :           f_info->hess[a+1][b+1][i][j] = term;

	mov	ebx, DWORD PTR [esi+1340]
	mov	ebx, DWORD PTR [ebx+edi*4+4]
	fmul	ST(0), ST(2)
	mov	ebx, DWORD PTR [ebx+edx*4]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fst	QWORD PTR [eax+ebx]

; 1308 :           f_info->hess[a+1][0][i][j] -= term;

	mov	ebx, DWORD PTR [esi+1340]
	mov	ebx, DWORD PTR [ebx+edi*4+4]
	mov	ebx, DWORD PTR [ebx]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fld	QWORD PTR [ebx+eax]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [ebx+eax]

; 1309 :           f_info->hess[0][b+1][i][j] -= term;

	mov	ebx, DWORD PTR [esi+1340]
	mov	ebx, DWORD PTR [ebx]
	mov	ebx, DWORD PTR [ebx+edx*4]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fld	QWORD PTR [ebx+eax]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [ebx+eax]

; 1310 :           f_info->hess[0][0][i][j] += term;

	mov	ebx, DWORD PTR [esi+1340]
	mov	ebx, DWORD PTR [ebx]
	mov	ebx, DWORD PTR [ebx]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fadd	QWORD PTR [ebx+eax]
	fstp	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR _web+620
	cmp	edx, ebx
	jl	$LN419@linear_ela@4

; 1299 :         for ( b = 0 ; b < web.dimension ; b++ )

	mov	eax, DWORD PTR tv15991[ebp]
$LN11@linear_ela@4:

; 1298 :      for ( a = 0 ; a < web.dimension ; a++ )

	add	DWORD PTR tv15899[ebp], 48		; 00000030H
	inc	edi
	add	eax, 864				; 00000360H
	mov	DWORD PTR _a$[ebp], edi
	mov	DWORD PTR tv15991[ebp], eax
	cmp	edi, ebx
	jl	$LN12@linear_ela@4
	mov	edx, DWORD PTR _web+616
$LN14@linear_ela@4:

; 1297 :     for ( j = 0 ; j < SDIM  ; j++ )

	mov	eax, DWORD PTR _j$[ebp]
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, edx
	jl	$LN430@linear_ela@4
$LN17@linear_ela@4:

; 1290 :   ddadv[1][0][sdim+1][sdim] = areasign;
; 1291 :   ddadv[0][1][sdim+1][sdim] = -areasign;
; 1292 :   ddadv[1][0][sdim][sdim+1] = -areasign;
; 1293 : 
; 1294 : 
; 1295 :   /* big Hessian finale */
; 1296 :   for ( i = 0 ; i < SDIM  ; i++ )

	add	DWORD PTR tv16142[ebp], 6
	inc	ecx
	cmp	ecx, edx
	jl	$LN441@linear_ela@4
	fstp	ST(0)
	fstp	ST(0)
	fstp	ST(1)
$LN758@linear_ela@4:

; 1311 :         }
; 1312 :   /* combo correction */
; 1313 :   for ( i = 0 ; i < SDIM  ; i++ ) 

	xor	ecx, ecx
	fstp	ST(0)
	test	edx, edx
	jle	$LN790@linear_ela@4
$LN439@linear_ela@4:

; 1314 :    for ( j = 0 ; j < SDIM  ; j++ ) 

	xor	eax, eax
	test	edx, edx
	jle	$LN5@linear_ela@4
$LN3@linear_ela@4:

; 1315 :    { REAL term;
; 1316 :      term = combo*(combo*f_info->hess[2][2][i][j]-f_info->hess[1][2][i][j]
; 1317 :                           -f_info->hess[2][1][i][j]);

	mov	edx, DWORD PTR [esi+1340]
	mov	edi, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [edx+4]
	mov	ebx, DWORD PTR [edi+8]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fld	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [edx+4]
	fmul	ST(0), ST(1)
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	edi, DWORD PTR [edi+4]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fsub	QWORD PTR [ebx+eax*8]
	mov	edi, DWORD PTR [edi+ecx*4]
	lea	edx, DWORD PTR [edx+eax*8]
	fsub	QWORD PTR [edi+eax*8]
	fmul	ST(0), ST(1)

; 1318 :      f_info->hess[1][1][i][j] += term;

	fld	ST(0)
	fadd	QWORD PTR [edx]
	fstp	QWORD PTR [edx]

; 1319 :      f_info->hess[0][1][i][j] -= term;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 1320 :      f_info->hess[1][0][i][j] -= term;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 1321 :      f_info->hess[0][0][i][j] += term;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ecx*4]
	fadd	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fstp	QWORD PTR [edx]

; 1322 :      term = combo*f_info->hess[2][2][i][j];

	mov	edx, DWORD PTR [esi+1340]
	mov	edi, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	edi, DWORD PTR [edi+8]
	mov	edi, DWORD PTR [edi+ecx*4]
	fld	QWORD PTR [edi+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fmul	ST(0), ST(1)

; 1323 :      f_info->hess[1][2][i][j] -= term;

	fld	QWORD PTR [edx]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 1324 :      f_info->hess[0][2][i][j] += term;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 1325 :      f_info->hess[1][0][i][j] += term;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx]
	fld	ST(0)
	mov	edx, DWORD PTR [edx+ecx*4]
	fadd	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fstp	QWORD PTR [edx]

; 1326 :      f_info->hess[0][0][i][j] -= term;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ecx*4]
	fsubr	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fstp	QWORD PTR [edx]

; 1327 :      term = combo*f_info->hess[2][2][i][j];

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx+8]
	mov	edi, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	edi, DWORD PTR [edi+ecx*4]
	fld	QWORD PTR [edi+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fmul	ST(0), ST(1)

; 1328 :      f_info->hess[2][1][i][j] -= term;

	fld	QWORD PTR [edx]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 1329 :      f_info->hess[0][1][i][j] += term;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 1330 :      f_info->hess[2][0][i][j] += term;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [edx]
	fld	ST(0)
	mov	edx, DWORD PTR [edx+ecx*4]
	fadd	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fstp	QWORD PTR [edx]

; 1331 :      f_info->hess[0][0][i][j] -= term;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ecx*4]
	fsubr	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	inc	eax
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR _web+616
	cmp	eax, edx
	jl	$LN3@linear_ela@4
$LN5@linear_ela@4:

; 1311 :         }
; 1312 :   /* combo correction */
; 1313 :   for ( i = 0 ; i < SDIM  ; i++ ) 

	inc	ecx
	cmp	ecx, edx
	jl	$LN439@linear_ela@4
$LN790@linear_ela@4:

; 1314 :    for ( j = 0 ; j < SDIM  ; j++ ) 

	fstp	ST(0)

; 1332 :    }
; 1333 :   return energy;

	fld	QWORD PTR _energy$[ebp]
$LN215@linear_ela@4:

; 1334 : } // end linear_elastic_B_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_linear_elastic_B_all ENDP
_TEXT	ENDS
PUBLIC	_linear_elastic_B_energy
; Function compile flags: /Ogtp
;	COMDAT _linear_elastic_B_energy
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_linear_elastic_B_energy PROC				; COMDAT

; 1347 : {

	push	ebp
	mov	ebp, esp

; 1348 :  return linear_elastic_B_all(f_info,METHOD_VALUE);

	mov	eax, DWORD PTR _f_info$[ebp]
	push	1767					; 000006e7H
	push	eax
	call	_linear_elastic_B_all
	add	esp, 8

; 1349 : }

	pop	ebp
	ret	0
_linear_elastic_B_energy ENDP
_TEXT	ENDS
PUBLIC	_linear_elastic_B_gradient
; Function compile flags: /Ogtp
;	COMDAT _linear_elastic_B_gradient
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_linear_elastic_B_gradient PROC				; COMDAT

; 1364 : {

	push	ebp
	mov	ebp, esp

; 1365 :  return linear_elastic_B_all(f_info,METHOD_GRADIENT);

	mov	eax, DWORD PTR _f_info$[ebp]
	push	4321					; 000010e1H
	push	eax
	call	_linear_elastic_B_all
	add	esp, 8

; 1366 : }

	pop	ebp
	ret	0
_linear_elastic_B_gradient ENDP
_TEXT	ENDS
PUBLIC	_linear_elastic_B_hessian
; Function compile flags: /Ogtp
;	COMDAT _linear_elastic_B_hessian
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_linear_elastic_B_hessian PROC				; COMDAT

; 1380 : {

	push	ebp
	mov	ebp, esp

; 1381 :  return linear_elastic_B_all(f_info,METHOD_HESSIAN);

	mov	eax, DWORD PTR _f_info$[ebp]
	push	8763					; 0000223bH
	push	eax
	call	_linear_elastic_B_all
	add	esp, 8

; 1382 : }

	pop	ebp
	ret	0
_linear_elastic_B_hessian ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EJ@GMFONJCG@Facet?5extra?5attribute?5poisson_ra@ ; `string'
PUBLIC	??_C@_0DB@DBBMLJCF@relaxed_elastic?5method?5only?5for?5@ ; `string'
PUBLIC	??_C@_0CP@FHOMMLNC@relaxed_elastic?5method?5only?5for?5@ ; `string'
PUBLIC	_relaxed_elastic_init
;	COMDAT ??_C@_0EJ@GMFONJCG@Facet?5extra?5attribute?5poisson_ra@
CONST	SEGMENT
??_C@_0EJ@GMFONJCG@Facet?5extra?5attribute?5poisson_ra@ DB 'Facet extra a'
	DB	'ttribute poisson_ratio missing. Needed by relaxed_elastic.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@DBBMLJCF@relaxed_elastic?5method?5only?5for?5@
CONST	SEGMENT
??_C@_0DB@DBBMLJCF@relaxed_elastic?5method?5only?5for?5@ DB 'relaxed_elas'
	DB	'tic method only for SOAPFILM model.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@FHOMMLNC@relaxed_elastic?5method?5only?5for?5@
CONST	SEGMENT
??_C@_0CP@FHOMMLNC@relaxed_elastic?5method?5only?5for?5@ DB 'relaxed_elas'
	DB	'tic method only for LINEAR model.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _relaxed_elastic_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_relaxed_elastic_init PROC				; COMDAT

; 1430 : 
; 1431 :   if ( web.modeltype != LINEAR )

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN3@relaxed_el

; 1432 :      kb_error(2159,"relaxed_elastic method only for LINEAR model.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0CP@FHOMMLNC@relaxed_elastic?5method?5only?5for?5@
	push	2159					; 0000086fH
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN3@relaxed_el:

; 1433 : 
; 1434 :   if ( web.dimension != 2 )

	cmp	DWORD PTR _web+620, 2
	je	SHORT $LN2@relaxed_el

; 1435 :      kb_error(2160,"relaxed_elastic method only for SOAPFILM model.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DB@DBBMLJCF@relaxed_elastic?5method?5only?5for?5@
	push	2160					; 00000870H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN2@relaxed_el:

; 1436 : 
; 1437 :   /* extra facet attribute for poisson_ratio */
; 1438 :   poisson_attr = find_attribute(FACET,POISSON_NAME);

	push	OFFSET ??_C@_0O@BCENEBHP@poisson_ratio?$AA@
	push	2
	call	_find_attribute
	add	esp, 8
	mov	DWORD PTR _poisson_attr, eax

; 1439 :   if ( poisson_attr < 0 ) /* not found */

	test	eax, eax
	jns	SHORT $LN1@relaxed_el

; 1440 :      kb_error(2161,"Facet extra attribute poisson_ratio missing. Needed by relaxed_elastic.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0EJ@GMFONJCG@Facet?5extra?5attribute?5poisson_ra@
	push	2161					; 00000871H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@relaxed_el:

; 1441 : 
; 1442 :   LEBweight_attr = find_attribute(FACET,LEBWEIGHT_NAME); /* optional */

	push	OFFSET ??_C@_09CJPMHPNP@LEBweight?$AA@
	push	2
	call	_find_attribute
	add	esp, 8
	mov	DWORD PTR _LEBweight_attr, eax

; 1443 : 
; 1444 : } // end relaxed_elastic_init()

	ret	0
_relaxed_elastic_init ENDP
_TEXT	ENDS
PUBLIC	__real@4010000000000000
PUBLIC	??_C@_0DC@BBGBNFO@relaxed_elastic_?5Facet?5?$CFs?5has?5un@ ; `string'
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_relaxed_elastic_all
;	COMDAT __real@4010000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT ??_C@_0DC@BBGBNFO@relaxed_elastic_?5Facet?5?$CFs?5has?5un@
CONST	SEGMENT
??_C@_0DC@BBGBNFO@relaxed_elastic_?5Facet?5?$CFs?5has?5un@ DB 'relaxed_el'
	DB	'astic_ Facet %s has unstrained area 0.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\method4.c
CONST	ENDS
;	COMDAT _relaxed_elastic_all
_TEXT	SEGMENT
tv3281 = -29208						; size = 8
tv3071 = -29208						; size = 8
_area$ = -29200						; size = 8
_weight$ = -29192					; size = 8
tv18178 = -29184					; size = 8
tv10499 = -29180					; size = 4
_combo$ = -29176					; size = 8
_areasign$ = -29168					; size = 8
tv9903 = -29160						; size = 4
tv3553 = -29156						; size = 8
_coeff2$ = -29156					; size = 8
tv10202 = -29148					; size = 4
tv10089 = -29144					; size = 4
_c12$ = -29140						; size = 8
tv3260 = -29132						; size = 8
_eps1$ = -29132						; size = 8
_q12$ = -29132						; size = 8
_c21$ = -29124						; size = 8
tv3557 = -29116						; size = 8
tv3065 = -29116						; size = 8
_c22$ = -29108						; size = 8
_stuff$ = -29100					; size = 8
_q22$ = -29100						; size = 8
_c11$ = -29092						; size = 8
tv3269 = -29084						; size = 8
_TrC$ = -29084						; size = 8
_f11$ = -29084						; size = 8
tv3604 = -29076						; size = 8
tv3282 = -29076						; size = 8
tv10790 = -29072					; size = 4
tv3029 = -29072						; size = 4
tv3560 = -29068						; size = 8
_dTrCa$90173 = -29068					; size = 8
_coeff1$ = -29068					; size = 8
tv3067 = -29060						; size = 8
_energy$ = -29060					; size = 8
_f12$ = -29060						; size = 8
_det$ = -29060						; size = 8
tv3264 = -29052						; size = 8
tv3232 = -29052						; size = 8
tv3081 = -29052						; size = 8
_disc$90168 = -29052					; size = 8
_q11$ = -29052						; size = 8
tv3554 = -29044						; size = 8
tv3274 = -29044						; size = 8
tv3255 = -29044						; size = 8
_poisson$ = -29044					; size = 8
tv14048 = -29040					; size = 4
tv4895 = -29040						; size = 4
tv13535 = -29036					; size = 4
tv10022 = -29036					; size = 4
tv12678 = -29032					; size = 4
tv10726 = -29032					; size = 4
tv11463 = -29028					; size = 4
tv10984 = -29028					; size = 4
tv13188 = -29024					; size = 4
tv10583 = -29024					; size = 4
tv12562 = -29020					; size = 4
tv10866 = -29020					; size = 4
tv13208 = -29016					; size = 4
tv10740 = -29016					; size = 4
tv13206 = -29012					; size = 4
tv10439 = -29012					; size = 4
tv12100 = -29008					; size = 4
tv10909 = -29008					; size = 4
tv13887 = -29004					; size = 4
tv9493 = -29004						; size = 4
tv2636 = -29004						; size = 4
tv13619 = -29000					; size = 4
tv9815 = -29000						; size = 4
tv2987 = -29000						; size = 4
tv13626 = -28996					; size = 4
tv9133 = -28996						; size = 4
tv1433 = -28996						; size = 4
tv19449 = -28992					; size = 4
_f_info$GSCopy$ = -28992				; size = 4
tv3072 = -28988						; size = 8
tv20127 = -28984					; size = 4
tv19509 = -28984					; size = 4
tv18712 = -28984					; size = 4
tv18169 = -28984					; size = 4
tv16430 = -28984					; size = 4
tv14416 = -28984					; size = 4
tv12676 = -28984					; size = 4
tv11025 = -28984					; size = 4
tv18335 = -28980					; size = 4
tv16564 = -28980					; size = 4
tv13720 = -28980					; size = 4
tv10964 = -28980					; size = 4
tv3023 = -28980						; size = 4
tv13601 = -28976					; size = 4
tv9914 = -28976						; size = 4
tv6212 = -28976						; size = 4
tv5674 = -28976						; size = 4
tv5353 = -28976						; size = 4
tv13428 = -28972					; size = 4
tv9571 = -28972						; size = 4
tv6221 = -28972						; size = 4
tv5696 = -28972						; size = 4
tv5369 = -28972						; size = 4
_sdim$ = -28968						; size = 4
tv18302 = -28964					; size = 4
tv16527 = -28964					; size = 4
tv14028 = -28964					; size = 4
tv9495 = -28964						; size = 4
tv6322 = -28964						; size = 4
tv2684 = -28964						; size = 4
tv2482 = -28964						; size = 4
tv18348 = -28960					; size = 4
tv16541 = -28960					; size = 4
tv14053 = -28960					; size = 4
tv9497 = -28960						; size = 4
tv7977 = -28960						; size = 4
tv5257 = -28960						; size = 4
tv4219 = -28960						; size = 4
tv2498 = -28960						; size = 4
tv9231 = -28956						; size = 4
tv5738 = -28956						; size = 4
tv5296 = -28956						; size = 4
_a$ = -28956						; size = 4
tv18982 = -28952					; size = 4
tv10334 = -28952					; size = 4
tv6302 = -28952						; size = 4
tv5318 = -28952						; size = 4
tv4882 = -28952						; size = 4
tv4644 = -28952						; size = 4
tv4407 = -28952						; size = 4
_n$ = -28952						; size = 4
tv19133 = -28948					; size = 4
tv10451 = -28948					; size = 4
tv6286 = -28948						; size = 4
tv5249 = -28948						; size = 4
tv4796 = -28948						; size = 4
tv4555 = -28948						; size = 4
tv4428 = -28948						; size = 4
_m$ = -28948						; size = 4
_i$ = -28944						; size = 4
tv2985 = -28940						; size = 4
_j$ = -28940						; size = 4
tv19660 = -28936					; size = 4
tv18730 = -28936					; size = 4
tv18294 = -28936					; size = 4
tv16519 = -28936					; size = 4
tv14435 = -28936					; size = 4
tv14036 = -28936					; size = 4
tv8035 = -28936						; size = 4
tv7832 = -28936						; size = 4
tv6056 = -28936						; size = 4
tv4884 = -28936						; size = 4
tv4646 = -28936						; size = 4
tv4272 = -28936						; size = 4
tv2714 = -28936						; size = 4
tv2531 = -28936						; size = 4
_ddQdv$ = -28932					; size = 10368
_ddstuff$ = -18564					; size = 2592
_ddCdv$ = -15972					; size = 10368
_ddadv$ = -5604						; size = 2592
_dFdv$ = -3012						; size = 576
_dSdv$ = -2436						; size = 576
_dQdv$ = -1860						; size = 576
_ddSdv$ = -1284						; size = 128
_ddFdv$ = -1156						; size = 128
_dCdv$ = -1028						; size = 576
_dstuff$ = -452						; size = 144
_dadv$ = -308						; size = 144
_side$ = -164						; size = 96
_Q$ = -68						; size = 32
_F$ = -36						; size = 32
_s$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_mode$ = 12						; size = 4
_part$ = 16						; size = 4
_relaxed_elastic_all PROC				; COMDAT

; 1462 : {

	push	ebp
	mov	ebp, esp
	mov	eax, 29208				; 00007218H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _f_info$[ebp]

; 1463 :   REAL q11,q12,q22;  /* Q entries */
; 1464 :   REAL Q[2][2];
; 1465 :   REAL det;    /* det S */
; 1466 :   REAL area;  /* reference area of facet */
; 1467 :   REAL areasign; /* for reference area orientation */
; 1468 :   REAL poisson; /* poisson ratio */
; 1469 :   REAL f11,f12,f22;
; 1470 :   REAL F[2][2];
; 1471 :   REAL c11,c12,c21,c22;
; 1472 :   REAL energy;
; 1473 :   REAL stuff;
; 1474 :   REAL dadv[FACET_VERTS][MAXCOORD];
; 1475 :   REAL dstuff[FACET_VERTS][MAXCOORD];
; 1476 :   REAL dCdv[2][2][FACET_VERTS][MAXCOORD];
; 1477 :   REAL dFdv[2][2][FACET_VERTS][MAXCOORD];
; 1478 :   REAL dQdv[2][2][FACET_VERTS][MAXCOORD];
; 1479 :   REAL dSdv[2][2][FACET_VERTS][MAXCOORD];
; 1480 :   REAL ddFdv[2][2][2][2];
; 1481 :   REAL ddSdv[2][2][2][2];
; 1482 :   REAL ddCdv[2][2][FACET_VERTS][FACET_VERTS][MAXCOORD][MAXCOORD];
; 1483 :   REAL ddQdv[2][2][FACET_VERTS][FACET_VERTS][MAXCOORD][MAXCOORD];
; 1484 :   REAL ddstuff[FACET_VERTS][FACET_VERTS][MAXCOORD][MAXCOORD];
; 1485 :   REAL ddadv[FACET_VERTS][FACET_VERTS][MAXCOORD][MAXCOORD];
; 1486 :   int i,j,m,n,a,b,c,d,e;
; 1487 :   REAL coeff1,coeff2;
; 1488 :   REAL s[2][2];  /* form factors matrix */
; 1489 :   int sdim = SDIM - web.dimension; /* true space dimension */
; 1490 :   REAL combo;  /* combination coeff for second edge orthogonality */
; 1491 :   REAL weight;  /* facet weighting factor */
; 1492 :   REAL side[2][MAXCOORD]; 
; 1493 :   REAL eps1,eps2; /* strain eigenvalues */
; 1494 :   REAL TrC,DetC;  /* trace and determinant of C */
; 1495 : 
; 1496 :   poisson = *(REAL*)get_extra(f_info->id,poisson_attr);

	mov	edx, DWORD PTR _poisson_attr
	push	ebx
	imul	edx, 240				; 000000f0H
	push	esi
	mov	esi, DWORD PTR _dymem
	push	edi
	mov	edi, DWORD PTR _web+616
	mov	eax, edi
	sub	eax, DWORD PTR _web+620
	mov	DWORD PTR _f_info$GSCopy$[ebp], ecx
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR _sdim$[ebp], eax
	mov	eax, ecx
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	ebx, DWORD PTR _web[eax+104]
	mov	eax, DWORD PTR _web[eax+12]
	add	ebx, edx
	mov	ebx, DWORD PTR [ebx+esi+64]
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	fld	QWORD PTR [ebx+edx]

; 1497 :   if ( LEBweight_attr >= 0 )

	mov	edx, DWORD PTR _LEBweight_attr
	fstp	QWORD PTR _poisson$[ebp]
	test	edx, edx
	js	SHORT $LN263@relaxed_el@2

; 1498 :     weight = *(REAL*)get_extra(f_info->id,LEBweight_attr);

	mov	eax, ecx
	imul	edx, 240				; 000000f0H
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	ebx, DWORD PTR _web[eax+12]
	mov	eax, DWORD PTR _web[eax+104]
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [ebx+ecx*4]
	add	eax, edx
	mov	edx, DWORD PTR [eax+esi+64]
	fld	QWORD PTR [ecx+edx]
	jmp	SHORT $LN962@relaxed_el@2
$LN263@relaxed_el@2:

; 1499 :   else weight = 1.0;

	fld1
$LN962@relaxed_el@2:

; 1500 : 
; 1501 :   /* compute orthogonal second side */
; 1502 :   for ( j = 0 ; j < 2 ; j++ ) 

	lea	ecx, DWORD PTR _side$[ebp]
	fstp	QWORD PTR _weight$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv4272[ebp], ecx
$LL515@relaxed_el@2:

; 1503 :    for ( i = 0 ; i < SDIM ; i++ ) 

	xor	eax, eax
	test	edi, edi
	jle	SHORT $LN260@relaxed_el@2
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	esi, DWORD PTR [esi+1276]
	npad	7
$LL258@relaxed_el@2:

; 1504 :     side[j][i] = f_info->sides[0][j][i];

	mov	ebx, DWORD PTR [esi]
	mov	ebx, DWORD PTR [edx+ebx]
	fld	QWORD PTR [ebx+eax*8]
	inc	eax
	fstp	QWORD PTR [ecx]
	add	ecx, 8
	cmp	eax, edi
	jl	SHORT $LL258@relaxed_el@2
$LN260@relaxed_el@2:

; 1500 : 
; 1501 :   /* compute orthogonal second side */
; 1502 :   for ( j = 0 ; j < 2 ; j++ ) 

	mov	ecx, DWORD PTR tv4272[ebp]
	add	edx, 4
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv4272[ebp], ecx
	cmp	edx, 8
	jl	SHORT $LL515@relaxed_el@2

; 1505 :   s[0][0] = dot(side[0]+sdim,side[0]+sdim,web.dimension);  /* in ref */

	mov	eax, DWORD PTR _web+620
	mov	edi, DWORD PTR _sdim$[ebp]
	lea	esi, DWORD PTR _side$[ebp+edi*8]
	push	eax
	push	esi
	push	esi
	mov	DWORD PTR tv2985[ebp], esi
	call	_dot
	fst	QWORD PTR _s$[ebp]

; 1506 :   if ( s[0][0] == 0.0 ) return 0.0;

	fldz
	add	esp, 12					; 0000000cH
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jnp	$LN264@relaxed_el@2

; 1507 :   s[0][1] = dot(side[0]+sdim,side[1]+sdim,web.dimension);  /* in ref */

	mov	ecx, DWORD PTR _web+620
	fstp	ST(0)
	lea	eax, DWORD PTR _side$[ebp+edi*8+48]
	push	ecx
	push	eax
	push	esi
	mov	DWORD PTR tv2987[ebp], eax
	call	_dot
	fst	QWORD PTR _s$[ebp+8]

; 1508 :   combo = s[0][1]/s[0][0];

	fld	QWORD PTR _s$[ebp]

; 1509 :   for ( i = 0 ; i < SDIM ; i++ ) 

	mov	ecx, DWORD PTR _web+616
	fdivr	ST(0), ST(1)
	add	esp, 12					; 0000000cH
	xor	eax, eax
	fst	QWORD PTR _combo$[ebp]
	test	ecx, ecx
	jle	SHORT $LN527@relaxed_el@2
$LN254@relaxed_el@2:

; 1510 :     side[1][i] -= combo*side[0][i];

	fld	QWORD PTR _side$[ebp+eax*8]
	inc	eax
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR _side$[ebp+eax*8+40]
	fstp	QWORD PTR _side$[ebp+eax*8+40]
	cmp	eax, ecx
	jl	SHORT $LN254@relaxed_el@2
$LN527@relaxed_el@2:

; 1511 : 
; 1512 :   /* compute form factors */
; 1513 :   for ( i = 0 ; i < web.dimension ; i++ )

	mov	ecx, DWORD PTR _web+620
	fstp	ST(0)
	mov	DWORD PTR _i$[ebp], 0
	test	ecx, ecx
	jle	SHORT $LN249@relaxed_el@2
	lea	edx, DWORD PTR _s$[ebp]
	fstp	ST(0)
	mov	eax, esi
	mov	DWORD PTR tv4407[ebp], edx
	mov	DWORD PTR tv4428[ebp], eax
$LL251@relaxed_el@2:

; 1514 :     for ( j = 0 ; j < web.dimension ; j++ )

	xor	edi, edi
	test	ecx, ecx
	jle	SHORT $LN250@relaxed_el@2
	mov	esi, DWORD PTR tv4407[ebp]
	mov	ebx, DWORD PTR tv2985[ebp]
	npad	6
$LL248@relaxed_el@2:

; 1515 :       s[i][j] = dot(side[i]+sdim,side[j]+sdim,web.dimension); 

	push	ecx
	mov	ecx, DWORD PTR tv4428[ebp]
	push	ebx
	push	ecx
	call	_dot
	fstp	QWORD PTR [esi]
	mov	ecx, DWORD PTR _web+620
	inc	edi
	add	esp, 12					; 0000000cH
	add	esi, 8
	add	ebx, 48					; 00000030H
	cmp	edi, ecx
	jl	SHORT $LL248@relaxed_el@2
$LN250@relaxed_el@2:

; 1511 : 
; 1512 :   /* compute form factors */
; 1513 :   for ( i = 0 ; i < web.dimension ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	add	DWORD PTR tv4428[ebp], 48		; 00000030H
	add	DWORD PTR tv4407[ebp], 16		; 00000010H
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, ecx
	jl	SHORT $LL251@relaxed_el@2
	fld	QWORD PTR _s$[ebp+8]
$LN249@relaxed_el@2:

; 1516 :   det = s[0][0]*s[1][1] - s[0][1]*s[1][0];

	fld	QWORD PTR _s$[ebp+24]

; 1517 :   if ( det <= 0.0 )

	mov	edi, DWORD PTR _mode$[ebp]
	fmul	QWORD PTR _s$[ebp]
	fld	QWORD PTR _s$[ebp+16]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _det$[ebp]
	fldz
	fcom	ST(1)
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN482@relaxed_el@2

; 1521 :        kb_error(2162,errmsg,RECOVERABLE);

	fstp	ST(1)
	fstp	ST(1)
	cmp	edi, 1767				; 000006e7H
	je	$LN264@relaxed_el@2

; 1518 :      { if ( mode == METHOD_VALUE ) return 0.0;

	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	fstp	ST(0)

; 1519 :        sprintf(errmsg,"relaxed_elastic_ Facet %s has unstrained area 0.\n",
; 1520 :           ELNAME(f_info->id));

	mov	eax, DWORD PTR [edx]
	test	eax, 268435456				; 10000000H
	je	SHORT $LN266@relaxed_el@2
	and	eax, 134217727				; 07ffffffH
	inc	eax
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN267@relaxed_el@2
$LN266@relaxed_el@2:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN267@relaxed_el@2:
	push	eax
	push	OFFSET ??_C@_0DC@BBGBNFO@relaxed_elastic_?5Facet?5?$CFs?5has?5un@
	push	OFFSET _errmsg
	call	_sprintf

; 1521 :        kb_error(2162,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2162					; 00000872H
	call	_kb_error
	fldz
	fld	QWORD PTR _det$[ebp]
	mov	ecx, DWORD PTR _web+620
	fld	QWORD PTR _s$[ebp+8]
	add	esp, 24					; 00000018H
	fxch	ST(2)
$LN482@relaxed_el@2:

; 1522 :      }
; 1523 :   area = side[0][sdim]*side[1][sdim+1] - side[0][sdim+1]*side[1][sdim];

	mov	esi, DWORD PTR _sdim$[ebp]
	fld	QWORD PTR _side$[ebp+esi*8+56]
	lea	eax, DWORD PTR _side$[ebp+esi*8+56]
	mov	DWORD PTR tv3023[ebp], eax
	mov	eax, DWORD PTR tv2985[ebp]
	fmul	QWORD PTR [eax]
	mov	eax, DWORD PTR tv2987[ebp]
	fld	QWORD PTR [eax]
	lea	edx, DWORD PTR _side$[ebp+esi*8+8]
	fmul	QWORD PTR [edx]
	mov	DWORD PTR tv3029[ebp], edx
	fsubp	ST(1), ST(0)

; 1524 :   areasign = (area < 0.0) ? -0.5 : 0.5; /* triangle factor and orientation */

	fcom	ST(1)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 5
	jp	SHORT $LN268@relaxed_el@2
	fld	QWORD PTR __real@bfe0000000000000
	jmp	SHORT $LN963@relaxed_el@2
$LN268@relaxed_el@2:
	fld	QWORD PTR __real@3fe0000000000000
$LN963@relaxed_el@2:
	fst	QWORD PTR _areasign$[ebp]

; 1525 :   area *= areasign;
; 1526 :   coeff1 = 1.0/8/(1 + poisson);
; 1527 :   coeff2 = coeff1*poisson/(1 - (web.dimension-1)*poisson);

	dec	ecx
	fmulp	ST(1), ST(0)
	mov	DWORD PTR tv20127[ebp], ecx

; 1528 :   Q[0][0] = q11 = s[1][1]/det; 
; 1529 :   Q[0][1] = Q[1][0] = q12 = -s[0][1]/det; 
; 1530 :   Q[1][1] = q22 = s[0][0]/det;
; 1531 : 
; 1532 :   F[0][0] = f11 = dot(side[0],side[0],sdim);

	lea	ecx, DWORD PTR _side$[ebp]
	push	esi
	fstp	QWORD PTR _area$[ebp]
	push	ecx
	fld	QWORD PTR _poisson$[ebp]
	mov	edx, ecx
	fld	ST(0)
	push	edx
	fld1
	fadd	ST(1), ST(0)
	fld	QWORD PTR __real@3fc0000000000000
	fdivrp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _coeff1$[ebp]
	fmul	ST(0), ST(2)
	fild	DWORD PTR tv20127[ebp]
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	fsubrp	ST(2), ST(0)
	fdivrp	ST(1), ST(0)
	fstp	QWORD PTR _coeff2$[ebp]
	fld	QWORD PTR _s$[ebp+24]
	fdiv	ST(0), ST(1)
	fst	QWORD PTR _q11$[ebp]
	fstp	QWORD PTR _Q$[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fchs
	fst	QWORD PTR _q12$[ebp]
	fst	QWORD PTR _Q$[ebp+16]
	fstp	QWORD PTR _Q$[ebp+8]
	fdivr	QWORD PTR _s$[ebp]
	fst	QWORD PTR _q22$[ebp]
	fstp	QWORD PTR _Q$[ebp+24]
	call	_dot
	fst	QWORD PTR _f11$[ebp]

; 1533 :   F[0][1] = F[1][0] = f12 = dot(side[0],side[1],sdim);

	push	esi
	fstp	QWORD PTR _F$[ebp]
	lea	eax, DWORD PTR _side$[ebp+48]
	push	eax
	lea	ecx, DWORD PTR _side$[ebp]
	push	ecx
	call	_dot
	fst	QWORD PTR _f12$[ebp]

; 1534 :   F[1][1] = f22 = dot(side[1],side[1],sdim);

	lea	edx, DWORD PTR _side$[ebp+48]
	fst	QWORD PTR _F$[ebp+16]
	push	esi
	fstp	QWORD PTR _F$[ebp+8]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	fst	QWORD PTR _F$[ebp+24]

; 1535 : 
; 1536 :   c11 = f11*q11 + f12*q12 - 1;

	fld	QWORD PTR _f12$[ebp]
	add	esp, 36					; 00000024H
	fld	ST(0)
	fld	QWORD PTR _q12$[ebp]
	fmul	ST(1), ST(0)
	fld	QWORD PTR _f11$[ebp]
	fld	QWORD PTR _q11$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fadd	ST(0), ST(3)
	fsub	QWORD PTR __real@3ff0000000000000
	fst	QWORD PTR _c11$[ebp]

; 1537 :   c12 = f11*q12 + f12*q22;

	fld	ST(4)
	fmul	QWORD PTR _q22$[ebp]
	fld	QWORD PTR _f11$[ebp]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fst	QWORD PTR _c12$[ebp]

; 1538 :   c21 = f12*q11 + f22*q12;

	fld	ST(6)
	fmulp	ST(4), ST(0)
	fxch	ST(5)
	fmulp	ST(2), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fst	QWORD PTR _c21$[ebp]

; 1539 :   c22 = f12*q12 + f22*q22 - 1;

	fxch	ST(4)
	fmul	QWORD PTR _q22$[ebp]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fsub	QWORD PTR __real@3ff0000000000000
	fst	QWORD PTR _c22$[ebp]

; 1540 : 
; 1541 :   TrC = c11 + c22;

	fld	ST(0)
	fadd	ST(0), ST(2)
	fst	QWORD PTR tv3065[ebp]
	fst	QWORD PTR _TrC$[ebp]

; 1542 :   DetC = c11*c22 - c12*c21;

	fxch	ST(4)
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fst	QWORD PTR tv3067[ebp]
	fxch	ST(2)
	fmulp	ST(1), ST(0)
	fsubrp	ST(1), ST(0)

; 1543 :   eps1 = (TrC + sqrt(TrC*TrC - 4*DetC))/2;

	fld	ST(1)
	fmulp	ST(2), ST(0)
	fmul	QWORD PTR __real@4010000000000000
	fsubp	ST(1), ST(0)
	fst	QWORD PTR tv3071[ebp]
	call	__CIsqrt
	fst	QWORD PTR tv3072[ebp]
	fld	QWORD PTR _TrC$[ebp]
	fld	ST(0)
	fadd	ST(0), ST(2)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _eps1$[ebp]

; 1544 :   eps2 = (TrC - sqrt(TrC*TrC - 4*DetC))/2;

	fld	ST(2)
	fsub	ST(0), ST(4)
	fmul	ST(0), ST(2)

; 1545 :  
; 1546 :   if ( eps1 <= 0.0 ) return 0.0;  /* relaxed in both directions */

	fldz
	fcom	ST(2)
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN243@relaxed_el@2
$LN964@relaxed_el@2:
	fstp	ST(1)
	pop	edi
	fstp	ST(4)
	pop	esi
	fstp	ST(0)
	pop	ebx
	fstp	ST(0)
	fstp	ST(0)

; 1836 : } // end relaxed_elastic_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN243@relaxed_el@2:

; 1547 :   stuff = 0.0;

	fld	ST(0)
	fst	QWORD PTR _stuff$[ebp]

; 1548 :   if ( eps2 + poisson*eps1 <= 0.0 )

	fld	ST(3)
	fmul	QWORD PTR _poisson$[ebp]
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fst	QWORD PTR tv3081[ebp]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN242@relaxed_el@2

; 1549 :   { /* relaxed in one dimension */
; 1550 :     if ( part & ONE_STRESS )

	test	BYTE PTR _part$[ebp], 1
	je	SHORT $LN483@relaxed_el@2

; 1556 :       stuff = coeff1*(c11*c11+c12*c21+c12*c21+c22*c22)
; 1557 :                  + coeff2*(c11+c22)*(c11+c22);

	fstp	ST(1)
	fld	ST(1)
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(3)
	fmul	QWORD PTR __real@3fd0000000000000
	jmp	SHORT $LN965@relaxed_el@2
$LN242@relaxed_el@2:

; 1551 :       stuff = eps1*eps1/2/4;  /* 1/4 fudge factor to agree with other */
; 1552 :   }
; 1553 :   else
; 1554 :   { /* stressed in both directions */
; 1555 :     if ( part & TWO_STRESS )

	test	BYTE PTR _part$[ebp], 2
	je	SHORT $LN483@relaxed_el@2
	fstp	ST(1)

; 1556 :       stuff = coeff1*(c11*c11+c12*c21+c12*c21+c22*c22)
; 1557 :                  + coeff2*(c11+c22)*(c11+c22);

	fld	QWORD PTR _c11$[ebp]
	fmul	ST(0), ST(0)
	fld	QWORD PTR tv3067[ebp]
	fadd	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _c22$[ebp]
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR _coeff1$[ebp]
	fld	QWORD PTR tv3065[ebp]
	fmul	QWORD PTR _coeff2$[ebp]
	fmul	QWORD PTR tv3065[ebp]
	faddp	ST(1), ST(0)
$LN965@relaxed_el@2:
	fst	QWORD PTR _stuff$[ebp]
	fxch	ST(1)
$LN483@relaxed_el@2:

; 1558 :   }
; 1559 :   energy = weight*area*stuff;

	fld	QWORD PTR _area$[ebp]
	fmul	QWORD PTR _weight$[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _energy$[ebp]

; 1560 : 
; 1561 :   if ( mode == METHOD_VALUE ) return energy;

	cmp	edi, 1767				; 000006e7H
	je	$LN964@relaxed_el@2

; 1562 : 
; 1563 :   /* gradient */
; 1564 : 
; 1565 :   for ( i = 0 ; i < sdim  ; i++ )  /* with respect to space coord */

	mov	ebx, DWORD PTR _web+620
	fstp	ST(0)
	xor	eax, eax
	mov	DWORD PTR _i$[ebp], eax
	test	esi, esi
	jle	$LN498@relaxed_el@2
$LN516@relaxed_el@2:

; 1566 :   {  
; 1567 :     for ( a = 0 ; a < web.dimension ; a++ )

	mov	DWORD PTR _a$[ebp], 0
	test	ebx, ebx
	jle	$LN236@relaxed_el@2

; 1562 : 
; 1563 :   /* gradient */
; 1564 : 
; 1565 :   for ( i = 0 ; i < sdim  ; i++ )  /* with respect to space coord */

	lea	ecx, DWORD PTR _side$[ebp+eax*8]
	lea	esi, DWORD PTR _dFdv$[ebp+eax*8]

; 1566 :   {  
; 1567 :     for ( a = 0 ; a < web.dimension ; a++ )

	mov	DWORD PTR tv4644[ebp], ecx
	mov	DWORD PTR tv4646[ebp], esi
$LN234@relaxed_el@2:

; 1568 :       for ( b = 0 ; b < web.dimension ; b++ )

	lea	eax, DWORD PTR _side$[ebp+eax*8]
	xor	edx, edx
	mov	DWORD PTR tv4555[ebp], eax
$LN504@relaxed_el@2:

; 1569 :         for ( m = 0 ; m < web.dimension ; m++ )

	xor	eax, eax
	mov	ecx, esi
$LN512@relaxed_el@2:

; 1570 :           dFdv[a][b][m][i] = (m==a ? side[b][i] : 0.0)
; 1571 :                            + (m==b ? side[a][i] : 0.0);

	cmp	eax, DWORD PTR _a$[ebp]
	jne	SHORT $LN270@relaxed_el@2
	mov	edi, DWORD PTR tv4555[ebp]
	fld	QWORD PTR [edi]
	jmp	SHORT $LN271@relaxed_el@2
$LN270@relaxed_el@2:
	fld	ST(0)
$LN271@relaxed_el@2:
	cmp	eax, edx
	jne	SHORT $LN272@relaxed_el@2
	mov	edi, DWORD PTR tv4644[ebp]
	fld	QWORD PTR [edi]
	jmp	SHORT $LN273@relaxed_el@2
$LN272@relaxed_el@2:
	fld	ST(1)
$LN273@relaxed_el@2:
	faddp	ST(1), ST(0)
	inc	eax
	add	ecx, 48					; 00000030H
	fstp	QWORD PTR [ecx-48]
	cmp	eax, ebx
	jl	SHORT $LN512@relaxed_el@2

; 1568 :       for ( b = 0 ; b < web.dimension ; b++ )

	add	DWORD PTR tv4555[ebp], 48		; 00000030H
	inc	edx
	add	esi, 144				; 00000090H
	cmp	edx, ebx
	jl	SHORT $LN504@relaxed_el@2

; 1566 :   {  
; 1567 :     for ( a = 0 ; a < web.dimension ; a++ )

	mov	eax, DWORD PTR _a$[ebp]
	mov	esi, DWORD PTR tv4646[ebp]
	add	DWORD PTR tv4644[ebp], 48		; 00000030H
	inc	eax
	add	esi, 288				; 00000120H
	mov	DWORD PTR _a$[ebp], eax
	cmp	eax, ebx
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv4646[ebp], esi
	jl	$LN234@relaxed_el@2
	mov	esi, DWORD PTR _sdim$[ebp]
$LN236@relaxed_el@2:

; 1562 : 
; 1563 :   /* gradient */
; 1564 : 
; 1565 :   for ( i = 0 ; i < sdim  ; i++ )  /* with respect to space coord */

	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, esi
	jl	$LN516@relaxed_el@2
$LN498@relaxed_el@2:

; 1572 :   }
; 1573 :   for ( i = sdim ; i < SDIM  ; i++ )  /* with respect to ref coord */

	mov	ecx, DWORD PTR _web+616
	mov	eax, esi
	mov	DWORD PTR _i$[ebp], eax
	cmp	esi, ecx
	jge	$LN223@relaxed_el@2
$LN517@relaxed_el@2:

; 1574 :   {  
; 1575 :     for ( a = 0 ; a < web.dimension ; a++ )

	mov	DWORD PTR _a$[ebp], 0
	test	ebx, ebx
	jle	$LN224@relaxed_el@2

; 1572 :   }
; 1573 :   for ( i = sdim ; i < SDIM  ; i++ )  /* with respect to ref coord */

	lea	ecx, DWORD PTR _side$[ebp+eax*8]
	lea	esi, DWORD PTR _dSdv$[ebp+eax*8]

; 1574 :   {  
; 1575 :     for ( a = 0 ; a < web.dimension ; a++ )

	mov	DWORD PTR tv4882[ebp], ecx
	mov	DWORD PTR tv4884[ebp], esi
$LN222@relaxed_el@2:

; 1576 :       for ( b = 0 ; b < web.dimension ; b++ )

	lea	eax, DWORD PTR _side$[ebp+eax*8]
	xor	edx, edx
	mov	DWORD PTR tv4796[ebp], eax
$LN502@relaxed_el@2:

; 1577 :         for ( m = 0 ; m < web.dimension ; m++ )

	xor	eax, eax
	mov	ecx, esi
$LN513@relaxed_el@2:

; 1578 :           dSdv[a][b][m][i] = (m==a ? side[b][i] : 0.0)
; 1579 :                            + (m==b ? side[a][i] : 0.0);

	cmp	eax, DWORD PTR _a$[ebp]
	jne	SHORT $LN274@relaxed_el@2
	mov	edi, DWORD PTR tv4796[ebp]
	fld	QWORD PTR [edi]
	jmp	SHORT $LN275@relaxed_el@2
$LN274@relaxed_el@2:
	fld	ST(0)
$LN275@relaxed_el@2:
	cmp	eax, edx
	jne	SHORT $LN276@relaxed_el@2
	mov	edi, DWORD PTR tv4882[ebp]
	fld	QWORD PTR [edi]
	jmp	SHORT $LN277@relaxed_el@2
$LN276@relaxed_el@2:
	fld	ST(1)
$LN277@relaxed_el@2:
	faddp	ST(1), ST(0)
	inc	eax
	add	ecx, 48					; 00000030H
	fstp	QWORD PTR [ecx-48]
	cmp	eax, ebx
	jl	SHORT $LN513@relaxed_el@2

; 1576 :       for ( b = 0 ; b < web.dimension ; b++ )

	add	DWORD PTR tv4796[ebp], 48		; 00000030H
	inc	edx
	add	esi, 144				; 00000090H
	cmp	edx, ebx
	jl	SHORT $LN502@relaxed_el@2

; 1574 :   {  
; 1575 :     for ( a = 0 ; a < web.dimension ; a++ )

	mov	eax, DWORD PTR _a$[ebp]
	mov	esi, DWORD PTR tv4884[ebp]
	add	DWORD PTR tv4882[ebp], 48		; 00000030H
	inc	eax
	add	esi, 288				; 00000120H
	mov	DWORD PTR _a$[ebp], eax
	cmp	eax, ebx
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv4884[ebp], esi
	jl	$LN222@relaxed_el@2
	mov	esi, DWORD PTR _sdim$[ebp]
	mov	ecx, DWORD PTR _web+616
$LN224@relaxed_el@2:

; 1572 :   }
; 1573 :   for ( i = sdim ; i < SDIM  ; i++ )  /* with respect to ref coord */

	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, ecx
	jl	$LN517@relaxed_el@2
$LN223@relaxed_el@2:

; 1580 :   }
; 1581 :   for ( i = sdim ; i < SDIM  ; i++ )  /* with respect to ref coord */

	mov	DWORD PTR _i$[ebp], esi
	cmp	esi, ecx
	jge	$LN211@relaxed_el@2
$LN213@relaxed_el@2:

; 1582 :   {  
; 1583 :     for ( a = 0 ; a < web.dimension ; a++ )

	test	ebx, ebx
	jle	$LN212@relaxed_el@2
	mov	edx, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR _Q$[ebp]
	lea	eax, DWORD PTR _dQdv$[ebp+edx*8]
	mov	DWORD PTR tv5353[ebp], ecx
	mov	DWORD PTR tv5369[ebp], eax
	mov	DWORD PTR tv1433[ebp], ebx
$LN210@relaxed_el@2:

; 1584 :       for ( b = 0 ; b < web.dimension ; b++ )

	mov	edx, DWORD PTR tv5369[ebp]
	lea	ecx, DWORD PTR _Q$[ebp]
	mov	DWORD PTR tv5296[ebp], ecx
	mov	DWORD PTR tv5318[ebp], edx
	mov	DWORD PTR tv2636[ebp], ebx
$LN207@relaxed_el@2:

; 1585 :         for ( m = 0 ; m < web.dimension ; m++ )

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR _dSdv$[ebp+eax*8]
	mov	DWORD PTR tv5249[ebp], eax
	mov	eax, DWORD PTR tv5318[ebp]
	mov	DWORD PTR tv5257[ebp], eax
	mov	DWORD PTR tv2684[ebp], ebx
$LN204@relaxed_el@2:

; 1586 :         { REAL sum = 0.0;

	mov	edx, DWORD PTR tv5353[ebp]
	fld	ST(0)
	mov	esi, DWORD PTR tv5249[ebp]
	mov	DWORD PTR tv2714[ebp], ebx
$LN201@relaxed_el@2:

; 1588 :             for ( d = 0 ; d < web.dimension ; d++ )

	mov	ecx, DWORD PTR tv5296[ebp]
	mov	eax, esi
	mov	edi, ebx
$LN198@relaxed_el@2:

; 1589 :                 sum -= Q[a][c]*dSdv[c][d][m][i]*Q[d][b];

	fld	QWORD PTR [eax]
	add	eax, 144				; 00000090H
	fmul	QWORD PTR [edx]
	add	ecx, 16					; 00000010H
	dec	edi
	fmul	QWORD PTR [ecx-16]
	fsubp	ST(1), ST(0)
	jne	SHORT $LN198@relaxed_el@2

; 1587 :           for ( c = 0 ; c < web.dimension ; c++ )

	mov	ecx, 1
	add	edx, 8
	add	esi, 288				; 00000120H
	sub	DWORD PTR tv2714[ebp], ecx
	jne	SHORT $LN201@relaxed_el@2

; 1590 :             dQdv[a][b][m][i] = sum;

	mov	eax, DWORD PTR tv5257[ebp]
	add	DWORD PTR tv5249[ebp], 48		; 00000030H
	fstp	QWORD PTR [eax]
	add	eax, 48					; 00000030H
	sub	DWORD PTR tv2684[ebp], ecx
	mov	DWORD PTR tv5257[ebp], eax
	jne	SHORT $LN204@relaxed_el@2

; 1584 :       for ( b = 0 ; b < web.dimension ; b++ )

	add	DWORD PTR tv5318[ebp], 144		; 00000090H
	add	DWORD PTR tv5296[ebp], 8
	dec	DWORD PTR tv2636[ebp]
	jne	$LN207@relaxed_el@2

; 1582 :   {  
; 1583 :     for ( a = 0 ; a < web.dimension ; a++ )

	add	DWORD PTR tv5353[ebp], 16		; 00000010H
	add	DWORD PTR tv5369[ebp], 288		; 00000120H
	dec	DWORD PTR tv1433[ebp]
	jne	$LN210@relaxed_el@2
$LN212@relaxed_el@2:

; 1580 :   }
; 1581 :   for ( i = sdim ; i < SDIM  ; i++ )  /* with respect to ref coord */

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _web+616
	jl	$LN213@relaxed_el@2
$LN211@relaxed_el@2:

; 1591 :         }
; 1592 :   }
; 1593 : 
; 1594 :   for ( i = 0 ; i < sdim  ; i++ )  /* with respect to space coord */

	mov	eax, DWORD PTR _sdim$[ebp]
	mov	DWORD PTR _i$[ebp], 0
	test	eax, eax
	jle	$LN496@relaxed_el@2
$LN195@relaxed_el@2:

; 1595 :   {
; 1596 :      for ( a = 0 ; a < web.dimension ; a++ )

	test	ebx, ebx
	jle	$LN194@relaxed_el@2

; 1591 :         }
; 1592 :   }
; 1593 : 
; 1594 :   for ( i = 0 ; i < sdim  ; i++ )  /* with respect to space coord */

	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [ecx*8]
	mov	DWORD PTR tv5738[ebp], edx

; 1595 :   {
; 1596 :      for ( a = 0 ; a < web.dimension ; a++ )

	mov	DWORD PTR tv2482[ebp], ebx
$LN192@relaxed_el@2:

; 1597 :         for ( b = 0 ; b < web.dimension ; b++ )

	mov	ecx, DWORD PTR tv5738[ebp]
	lea	eax, DWORD PTR _Q$[ebp]
	lea	edx, DWORD PTR _dCdv$[ebp+ecx]
	mov	DWORD PTR tv5674[ebp], eax
	mov	DWORD PTR tv5696[ebp], edx
	mov	DWORD PTR tv2498[ebp], ebx
$LN189@relaxed_el@2:

; 1598 :           for ( m = 0 ; m < web.dimension ; m++ )

	mov	esi, DWORD PTR tv5738[ebp]
	mov	edi, DWORD PTR tv5696[ebp]
	lea	esi, DWORD PTR _dFdv$[ebp+esi]
	mov	DWORD PTR tv2531[ebp], ebx
$LN186@relaxed_el@2:

; 1599 :           { REAL sum = 0.0;

	mov	ecx, DWORD PTR tv5674[ebp]
	fld	ST(0)
	mov	eax, esi
	mov	edx, ebx
$LN183@relaxed_el@2:

; 1600 :              for ( c = 0 ; c < web.dimension ; c++ )
; 1601 :                 sum += dFdv[a][c][m][i]*Q[c][b];

	fld	QWORD PTR [eax]
	add	eax, 144				; 00000090H
	fmul	QWORD PTR [ecx]
	add	ecx, 16					; 00000010H
	dec	edx
	faddp	ST(1), ST(0)
	jne	SHORT $LN183@relaxed_el@2

; 1602 :              dCdv[a][b][m][i] = sum;

	fstp	QWORD PTR [edi]
	mov	eax, 1
	add	esi, 48					; 00000030H
	add	edi, 48					; 00000030H
	sub	DWORD PTR tv2531[ebp], eax
	jne	SHORT $LN186@relaxed_el@2

; 1597 :         for ( b = 0 ; b < web.dimension ; b++ )

	add	DWORD PTR tv5696[ebp], 144		; 00000090H
	add	DWORD PTR tv5674[ebp], 8
	sub	DWORD PTR tv2498[ebp], eax
	jne	SHORT $LN189@relaxed_el@2

; 1595 :   {
; 1596 :      for ( a = 0 ; a < web.dimension ; a++ )

	add	DWORD PTR tv5738[ebp], 288		; 00000120H
	dec	DWORD PTR tv2482[ebp]
	jne	$LN192@relaxed_el@2
$LN194@relaxed_el@2:

; 1591 :         }
; 1592 :   }
; 1593 : 
; 1594 :   for ( i = 0 ; i < sdim  ; i++ )  /* with respect to space coord */

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _sdim$[ebp]
	jl	$LN195@relaxed_el@2
	mov	eax, DWORD PTR _sdim$[ebp]
$LN496@relaxed_el@2:

; 1603 :           }
; 1604 :   }
; 1605 :   for ( i = sdim ; i < SDIM  ; i++ )  /* with respect to ref coord */

	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _web+616
	jge	$LN178@relaxed_el@2
$LN180@relaxed_el@2:

; 1606 :   { 
; 1607 :      for ( a = 0 ; a < web.dimension ; a++ )

	test	ebx, ebx
	jle	$LN179@relaxed_el@2
	mov	ecx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR _F$[ebp]
	lea	edx, DWORD PTR _dCdv$[ebp+ecx*8]
	mov	DWORD PTR tv6286[ebp], eax
	mov	DWORD PTR tv6302[ebp], edx
	mov	DWORD PTR tv6322[ebp], ebx
$LN177@relaxed_el@2:

; 1608 :         for ( e = 0 ; e < web.dimension ; e++ )

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR _dQdv$[ebp+eax*8]
	mov	DWORD PTR tv6212[ebp], eax
	mov	eax, DWORD PTR tv6302[ebp]
	mov	DWORD PTR tv6221[ebp], eax
	mov	DWORD PTR tv4219[ebp], ebx
$LN174@relaxed_el@2:

; 1609 :           for ( m = 0 ; m < web.dimension ; m++ )

	mov	edi, DWORD PTR tv6221[ebp]
	mov	esi, DWORD PTR tv6212[ebp]
	mov	DWORD PTR tv6056[ebp], ebx
$LN171@relaxed_el@2:

; 1610 :           { REAL sum = 0.0;

	mov	eax, DWORD PTR tv6286[ebp]
	fld	ST(0)
	mov	ecx, esi
	mov	edx, ebx
$LN168@relaxed_el@2:

; 1611 :              for ( b = 0 ; b < web.dimension ; b++ )
; 1612 :                 sum += F[a][b]*dQdv[b][e][m][i];

	fld	QWORD PTR [eax]
	add	eax, 8
	fmul	QWORD PTR [ecx]
	add	ecx, 288				; 00000120H
	dec	edx
	faddp	ST(1), ST(0)
	jne	SHORT $LN168@relaxed_el@2

; 1613 :              dCdv[a][e][m][i] = sum;

	fstp	QWORD PTR [edi]
	mov	eax, 1
	add	esi, 48					; 00000030H
	add	edi, 48					; 00000030H
	sub	DWORD PTR tv6056[ebp], eax
	jne	SHORT $LN171@relaxed_el@2

; 1608 :         for ( e = 0 ; e < web.dimension ; e++ )

	mov	ecx, 144				; 00000090H
	add	DWORD PTR tv6221[ebp], ecx
	add	DWORD PTR tv6212[ebp], ecx
	sub	DWORD PTR tv4219[ebp], eax
	jne	SHORT $LN174@relaxed_el@2

; 1606 :   { 
; 1607 :      for ( a = 0 ; a < web.dimension ; a++ )

	add	DWORD PTR tv6286[ebp], 16		; 00000010H
	add	DWORD PTR tv6302[ebp], 288		; 00000120H
	sub	DWORD PTR tv6322[ebp], eax
	jne	$LN177@relaxed_el@2
$LN179@relaxed_el@2:

; 1603 :           }
; 1604 :   }
; 1605 :   for ( i = sdim ; i < SDIM  ; i++ )  /* with respect to ref coord */

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _web+616
	jl	$LN180@relaxed_el@2
$LN178@relaxed_el@2:

; 1614 :           }
; 1615 :   }
; 1616 : 
; 1617 : 
; 1618 :   for ( j = 0 ; j < web.dimension  ; j++ )

	test	ebx, ebx
	jle	SHORT $LN499@relaxed_el@2
	lea	edx, DWORD PTR _dstuff$[ebp]
	mov	esi, ebx
$LN518@relaxed_el@2:

; 1619 :     for ( i = 0 ; i < SDIM  ; i++ ) dstuff[j][i] = 0.0;

	cmp	DWORD PTR _web+616, 0
	jle	SHORT $LN164@relaxed_el@2
	mov	ecx, DWORD PTR _web+616
	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	xor	eax, eax
	mov	edi, edx
	rep stosd
$LN164@relaxed_el@2:

; 1614 :           }
; 1615 :   }
; 1616 : 
; 1617 : 
; 1618 :   for ( j = 0 ; j < web.dimension  ; j++ )

	add	edx, 48					; 00000030H
	dec	esi
	jne	SHORT $LN518@relaxed_el@2
$LN499@relaxed_el@2:

; 1620 :   if ( eps2 + poisson*eps1 <= 0.0 )

	fcom	QWORD PTR tv3081[ebp]
	fnstsw	ax
	fld	QWORD PTR __real@4000000000000000
	test	ah, 1
	jne	$LN658@relaxed_el@2

; 1621 :   { /* relaxed in one dimension */
; 1622 :     if ( part & ONE_STRESS )

	test	BYTE PTR _part$[ebp], 1
	je	$LN664@relaxed_el@2

; 1623 :     for ( j = 0 ; j < web.dimension  ; j++ )

	test	ebx, ebx
	jle	$LN664@relaxed_el@2
	xor	edx, edx
	mov	esi, ebx
$LN157@relaxed_el@2:

; 1624 :      for ( i = 0 ; i < SDIM  ; i++ )

	cmp	DWORD PTR _web+616, 0
	jle	$LN156@relaxed_el@2
	fld	ST(3)
	mov	ecx, DWORD PTR _web+616
	fdivrp	ST(6), ST(0)
	mov	eax, edx
	fmulp	ST(4), ST(0)
	fxch	ST(1)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR __real@3fd0000000000000
	fstp	QWORD PTR tv3255[ebp]
$LN475@relaxed_el@2:

; 1625 :      { dstuff[j][i] = eps1*0.5/4*(dCdv[0][0][j][i]+dCdv[1][1][j][i]
; 1626 :         + 0.5/sqrt(TrC*TrC - 4*DetC)*(2*TrC*(dCdv[0][0][j][i]+dCdv[1][1][j][i])
; 1627 :            - 4*(c11*dCdv[1][1][j][i] + dCdv[0][0][j][i]*c22
; 1628 :                  - c12*dCdv[1][0][j][i] - c21*dCdv[0][1][j][i])));

	fld	QWORD PTR _dCdv$[ebp+eax+432]
	add	eax, 8
	dec	ecx
	fadd	QWORD PTR _dCdv$[ebp+eax-8]
	fld	ST(0)
	fmul	ST(0), ST(3)
	fld	QWORD PTR _dCdv$[ebp+eax+424]
	fmul	QWORD PTR _c11$[ebp]
	fld	QWORD PTR _dCdv$[ebp+eax-8]
	fmul	QWORD PTR _c22$[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dCdv$[ebp+eax+280]
	fmul	QWORD PTR _c12$[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _dCdv$[ebp+eax+136]
	fmul	QWORD PTR _c21$[ebp]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR __real@4010000000000000
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR tv3255[ebp]
	fstp	QWORD PTR _dstuff$[ebp+eax-8]
	jne	SHORT $LN475@relaxed_el@2

; 1624 :      for ( i = 0 ; i < SDIM  ; i++ )

	fstp	ST(2)
	fstp	ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fld	QWORD PTR tv3072[ebp]
	fld	QWORD PTR _TrC$[ebp]
	fld	QWORD PTR _eps1$[ebp]
	fld	QWORD PTR __real@4000000000000000
	fxch	ST(3)
	fxch	ST(5)
	fxch	ST(2)
	fxch	ST(4)
	fxch	ST(3)
	fxch	ST(1)
	fxch	ST(2)
	fxch	ST(1)
$LN156@relaxed_el@2:

; 1623 :     for ( j = 0 ; j < web.dimension  ; j++ )

	add	edx, 48					; 00000030H
	dec	esi
	jne	$LN157@relaxed_el@2
$LN664@relaxed_el@2:
	fstp	ST(5)
	fstp	ST(1)
	fstp	ST(1)
	fstp	ST(1)
$LN469@relaxed_el@2:

; 1641 :      }
; 1642 :   }
; 1643 : 
; 1644 :   /* reference area change */
; 1645 :   for ( i = 0 ; i < SDIM  ; i++ ) 

	mov	ecx, DWORD PTR _web+616
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN141@relaxed_el@2
$LN143@relaxed_el@2:

; 1646 :     for ( a = 0 ; a < FACET_VERTS ; a++ ) dadv[a][i] = 0.0;

	fst	QWORD PTR _dadv$[ebp+eax*8]
	inc	eax
	fst	QWORD PTR _dadv$[ebp+eax*8+40]
	fst	QWORD PTR _dadv$[ebp+eax*8+88]
	cmp	eax, ecx
	jl	SHORT $LN143@relaxed_el@2
$LN141@relaxed_el@2:

; 1647 :   dadv[0][sdim] = side[1][sdim+1]*areasign;

	mov	ecx, DWORD PTR tv3023[ebp]
	fld	QWORD PTR [ecx]
	mov	eax, DWORD PTR _sdim$[ebp]
	fld	QWORD PTR _areasign$[ebp]

; 1648 :   dadv[1][sdim+1] = side[0][sdim]*areasign;

	mov	edx, DWORD PTR tv2985[ebp]

; 1649 :   dadv[0][sdim+1] = -side[1][sdim]*areasign;

	mov	ecx, DWORD PTR tv2987[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)

; 1650 :   dadv[1][sdim] = -side[0][sdim+1]*areasign;
; 1651 : 
; 1652 :   /* grand finale for gradient */
; 1653 :   for ( a = 0 ; a < web.dimension ; a++ )

	xor	edi, edi
	fstp	QWORD PTR _dadv$[ebp+eax*8]
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR tv3029[ebp]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _dadv$[ebp+eax*8+56]
	fld	QWORD PTR [ecx]
	fmul	ST(0), ST(1)
	fchs
	fstp	QWORD PTR _dadv$[ebp+eax*8+8]
	fld	QWORD PTR [edx]
	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	fmul	ST(0), ST(1)
	fchs
	fstp	QWORD PTR _dadv$[ebp+eax*8+48]
	test	ebx, ebx
	jle	SHORT $LN135@relaxed_el@2

; 1647 :   dadv[0][sdim] = side[1][sdim+1]*areasign;

	mov	ecx, DWORD PTR _web+616
	xor	esi, esi
$LN137@relaxed_el@2:

; 1654 :      for ( i = 0 ; i < SDIM  ; i++ ) 

	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN136@relaxed_el@2
	fld	QWORD PTR _area$[ebp]
	fld	QWORD PTR _weight$[ebp]
	fld	QWORD PTR _stuff$[ebp]
$LN134@relaxed_el@2:
	lea	ecx, DWORD PTR [esi+eax*8]

; 1655 :      { f_info->grad[a+1][i] = weight*(dadv[a][i]*stuff + area*dstuff[a][i]);

	fld	QWORD PTR _dstuff$[ebp+ecx]
	lea	ecx, DWORD PTR [esi+eax*8]
	fmul	ST(0), ST(3)
	fld	QWORD PTR _dadv$[ebp+ecx]
	mov	ecx, DWORD PTR [edx+1336]
	mov	ecx, DWORD PTR [ecx+edi*4+4]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fst	QWORD PTR [ecx+eax*8]

; 1656 :        f_info->grad[0][i] -= weight*(dadv[a][i]*stuff + area*dstuff[a][i]);

	mov	ecx, DWORD PTR [edx+1336]
	mov	ecx, DWORD PTR [ecx]
	fsubr	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _web+616
	cmp	eax, ecx
	jl	SHORT $LN134@relaxed_el@2

; 1654 :      for ( i = 0 ; i < SDIM  ; i++ ) 

	mov	ebx, DWORD PTR _web+620
	fstp	ST(0)
	fstp	ST(1)
	fstp	ST(0)
$LN136@relaxed_el@2:

; 1650 :   dadv[1][sdim] = -side[0][sdim+1]*areasign;
; 1651 : 
; 1652 :   /* grand finale for gradient */
; 1653 :   for ( a = 0 ; a < web.dimension ; a++ )

	inc	edi
	add	esi, 48					; 00000030H
	cmp	edi, ebx
	jl	SHORT $LN137@relaxed_el@2
$LN135@relaxed_el@2:

; 1657 :      }
; 1658 :   /* combo correction */
; 1659 :   for ( i = 0 ; i < SDIM  ; i++ ) 

	fld	QWORD PTR _combo$[ebp]
	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN129@relaxed_el@2
$LN131@relaxed_el@2:

; 1660 :   { f_info->grad[1][i] -= combo*f_info->grad[2][i];

	mov	ecx, DWORD PTR [edx+1336]
	mov	esi, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx+8]
	fld	QWORD PTR [ecx+eax*8]
	lea	esi, DWORD PTR [esi+eax*8]
	fmul	ST(0), ST(1)
	fsubr	QWORD PTR [esi]
	fstp	QWORD PTR [esi]

; 1661 :     f_info->grad[0][i] += combo*f_info->grad[2][i];

	mov	ecx, DWORD PTR [edx+1336]
	mov	esi, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+8]
	fld	QWORD PTR [ecx+eax*8]
	lea	esi, DWORD PTR [esi+eax*8]
	fmul	ST(0), ST(1)
	inc	eax
	fadd	QWORD PTR [esi]
	fstp	QWORD PTR [esi]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN131@relaxed_el@2

; 1657 :      }
; 1658 :   /* combo correction */
; 1659 :   for ( i = 0 ; i < SDIM  ; i++ ) 

	mov	ebx, DWORD PTR _web+620
$LN129@relaxed_el@2:

; 1662 :   }
; 1663 :  
; 1664 :   if ( mode == METHOD_GRADIENT ) return energy;

	cmp	DWORD PTR _mode$[ebp], 4321		; 000010e1H
	jne	$LN128@relaxed_el@2
	fstp	ST(2)
	fstp	ST(0)
	fstp	ST(0)
	jmp	$LN911@relaxed_el@2
$LN658@relaxed_el@2:

; 1629 :      }
; 1630 :   }
; 1631 :   else /* stressed in both directions */
; 1632 :   { 
; 1633 :     if ( part & TWO_STRESS )

	test	BYTE PTR _part$[ebp], 2
	fstp	ST(5)
	fstp	ST(1)
	fstp	ST(1)
	fstp	ST(1)
	je	$LN469@relaxed_el@2

; 1634 :     for ( j = 0 ; j < web.dimension  ; j++ )

	test	ebx, ebx
	jle	$LN469@relaxed_el@2
	xor	edx, edx
	mov	esi, ebx
$LN149@relaxed_el@2:

; 1635 :      for ( i = 0 ; i < SDIM  ; i++ )

	cmp	DWORD PTR _web+616, 0
	jle	$LN148@relaxed_el@2
	fld	QWORD PTR _c12$[ebp]
	mov	ecx, DWORD PTR _web+616
	fmul	ST(0), ST(2)
	mov	eax, edx
	fld	QWORD PTR _c11$[ebp]
	fmul	ST(0), ST(3)
	fld	QWORD PTR _c21$[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR _c22$[ebp]
	fmul	ST(0), ST(5)
	fld	QWORD PTR _coeff2$[ebp]
	fmulp	ST(6), ST(0)
	fxch	ST(5)
	fmul	QWORD PTR tv3065[ebp]
$LN476@relaxed_el@2:

; 1636 :      { dstuff[j][i] = (coeff1*(2*c11*dCdv[0][0][j][i]  
; 1637 :                                  + 2*c12*dCdv[1][0][j][i]
; 1638 :                                  + 2*c21*dCdv[0][1][j][i]
; 1639 :                                  + 2*c22*dCdv[1][1][j][i]) 
; 1640 :                   + 2*coeff2*(c11+c22)*(dCdv[0][0][j][i] +dCdv[1][1][j][i])); 

	fld	QWORD PTR _dCdv$[ebp+eax+288]
	add	eax, 8
	dec	ecx
	fmul	ST(0), ST(4)
	fld	ST(3)
	fmul	QWORD PTR _dCdv$[ebp+eax-8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dCdv$[ebp+eax+136]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	ST(6)
	fmul	QWORD PTR _dCdv$[ebp+eax+424]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR _coeff1$[ebp]
	fld	QWORD PTR _dCdv$[ebp+eax+424]
	fadd	QWORD PTR _dCdv$[ebp+eax-8]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _dstuff$[ebp+eax-8]
	jne	SHORT $LN476@relaxed_el@2

; 1635 :      for ( i = 0 ; i < SDIM  ; i++ )

	fstp	ST(3)
	fstp	ST(1)
	fstp	ST(0)
	fstp	ST(2)
	fstp	ST(1)
	fld	QWORD PTR __real@4000000000000000
	fxch	ST(1)
$LN148@relaxed_el@2:

; 1634 :     for ( j = 0 ; j < web.dimension  ; j++ )

	add	edx, 48					; 00000030H
	dec	esi
	jne	$LN149@relaxed_el@2
	jmp	$LN469@relaxed_el@2
$LN128@relaxed_el@2:

; 1665 : 
; 1666 :   /* hessian */
; 1667 : 
; 1668 :   /* calculate ddFdv and ddSdv, which are same and nonzero only for 
; 1669 :       like coordinates, so coordinate index not used */
; 1670 :   for ( a = 0 ; a < web.dimension ; a++ )

	xor	edi, edi
	test	ebx, ebx
	jle	$LN125@relaxed_el@2
	fld1
$LN505@relaxed_el@2:
	mov	ecx, edi

; 1671 :      for ( b = 0 ; b < web.dimension ; b++ )

	xor	esi, esi
	shl	ecx, 6
	mov	DWORD PTR tv7977[ebp], ecx
$LN506@relaxed_el@2:

; 1672 :         for ( m = 0 ; m < web.dimension ; m++ )

	xor	edx, edx
	mov	DWORD PTR tv7832[ebp], ecx
$LN507@relaxed_el@2:

; 1673 :           for ( n = 0 ; n < web.dimension ; n++ )

	xor	eax, eax
$LN118@relaxed_el@2:

; 1674 :           { ddFdv[a][b][m][n] = (a==m && b==n ? 1.0 : 0.0) + (a==n && b==m ? 1.0 : 0.0);

	cmp	edi, edx
	jne	SHORT $LN278@relaxed_el@2
	cmp	esi, eax
	jne	SHORT $LN278@relaxed_el@2
	fld	ST(0)
	jmp	SHORT $LN279@relaxed_el@2
$LN278@relaxed_el@2:
	fld	ST(3)
$LN279@relaxed_el@2:
	cmp	edi, eax
	jne	SHORT $LN280@relaxed_el@2
	cmp	esi, edx
	jne	SHORT $LN280@relaxed_el@2
	fld	ST(1)
	jmp	SHORT $LN281@relaxed_el@2
$LN280@relaxed_el@2:
	fld	ST(4)
$LN281@relaxed_el@2:
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _ddFdv$[ebp+ecx]

; 1675 :              ddSdv[a][b][m][n] = (a==m && b==n ? 1.0 : 0.0) + (a==n && b==m ? 1.0 : 0.0);

	cmp	edi, edx
	jne	SHORT $LN282@relaxed_el@2
	cmp	esi, eax
	jne	SHORT $LN282@relaxed_el@2
	fld	ST(0)
	jmp	SHORT $LN283@relaxed_el@2
$LN282@relaxed_el@2:
	fld	ST(3)
$LN283@relaxed_el@2:
	cmp	edi, eax
	jne	SHORT $LN284@relaxed_el@2
	cmp	esi, edx
	jne	SHORT $LN284@relaxed_el@2
	fld	ST(1)
	jmp	SHORT $LN285@relaxed_el@2
$LN284@relaxed_el@2:
	fld	ST(4)
$LN285@relaxed_el@2:
	faddp	ST(1), ST(0)
	inc	eax
	add	ecx, 8
	fstp	QWORD PTR _ddSdv$[ebp+ecx-8]
	cmp	eax, ebx
	jl	SHORT $LN118@relaxed_el@2

; 1672 :         for ( m = 0 ; m < web.dimension ; m++ )

	mov	ecx, DWORD PTR tv7832[ebp]
	inc	edx
	add	ecx, 16					; 00000010H
	mov	DWORD PTR tv7832[ebp], ecx
	cmp	edx, ebx
	jl	SHORT $LN507@relaxed_el@2

; 1671 :      for ( b = 0 ; b < web.dimension ; b++ )

	mov	ecx, DWORD PTR tv7977[ebp]
	inc	esi
	add	ecx, 32					; 00000020H
	mov	DWORD PTR tv7977[ebp], ecx
	cmp	esi, ebx
	jl	$LN506@relaxed_el@2

; 1665 : 
; 1666 :   /* hessian */
; 1667 : 
; 1668 :   /* calculate ddFdv and ddSdv, which are same and nonzero only for 
; 1669 :       like coordinates, so coordinate index not used */
; 1670 :   for ( a = 0 ; a < web.dimension ; a++ )

	inc	edi
	cmp	edi, ebx
	jl	$LN505@relaxed_el@2

; 1671 :      for ( b = 0 ; b < web.dimension ; b++ )

	fstp	ST(0)
$LN125@relaxed_el@2:

; 1676 :           }
; 1677 : 
; 1678 :   /* calculate ddQdv */
; 1679 :   for ( i = sdim ; i < SDIM  ; i++ )

	mov	eax, DWORD PTR _sdim$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _web+616
	jge	$LN113@relaxed_el@2
	mov	ecx, eax
	lea	ecx, DWORD PTR [ecx+ecx*2]
	add	ecx, ecx
	mov	DWORD PTR tv11025[ebp], ecx
$LN115@relaxed_el@2:

; 1680 :     for ( j = sdim ; j < SDIM  ; j++ )

	mov	edx, DWORD PTR _sdim$[ebp]
	mov	DWORD PTR _j$[ebp], edx
$LN112@relaxed_el@2:

; 1681 :      for ( a = 0 ; a < web.dimension ; a++ )

	test	ebx, ebx
	jle	$LN111@relaxed_el@2
	lea	esi, DWORD PTR _dSdv$[ebp+eax*8]
	add	ecx, edx
	mov	DWORD PTR tv4895[ebp], esi
	lea	esi, DWORD PTR _Q$[ebp]
	lea	eax, DWORD PTR _dQdv$[ebp+eax*8]
	lea	ecx, DWORD PTR _ddQdv$[ebp+ecx*8]
	mov	DWORD PTR tv10866[ebp], esi
	mov	DWORD PTR tv10909[ebp], eax
	mov	DWORD PTR tv10984[ebp], ecx
	mov	DWORD PTR tv10964[ebp], ebx
$LN109@relaxed_el@2:

; 1682 :         for ( b = 0 ; b < web.dimension ; b++ )

	mov	eax, DWORD PTR _j$[ebp]
	lea	eax, DWORD PTR _dQdv$[ebp+eax*8]
	mov	DWORD PTR tv10726[ebp], eax
	mov	eax, DWORD PTR tv10984[ebp]
	lea	edx, DWORD PTR _Q$[ebp]
	mov	DWORD PTR tv10583[ebp], edx
	mov	DWORD PTR tv10740[ebp], eax
	mov	DWORD PTR tv10790[ebp], ebx
$LN106@relaxed_el@2:

; 1683 :           for ( m = 0 ; m < web.dimension ; m++ )

	mov	ecx, DWORD PTR tv4895[ebp]
	mov	edx, DWORD PTR tv10909[ebp]
	mov	eax, DWORD PTR tv10740[ebp]
	lea	edi, DWORD PTR _ddSdv$[ebp]
	mov	DWORD PTR tv10202[ebp], edi
	mov	DWORD PTR tv10334[ebp], ecx
	mov	DWORD PTR tv10439[ebp], edx
	mov	DWORD PTR tv10451[ebp], eax
	mov	DWORD PTR tv10499[ebp], ebx
	jmp	SHORT $LN103@relaxed_el@2
$LN479@relaxed_el@2:
	mov	ebx, DWORD PTR _web+620
$LN103@relaxed_el@2:

; 1684 :              for ( n = 0 ; n < web.dimension ; n++ )

	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR tv10726[ebp]
	mov	eax, DWORD PTR tv10451[ebp]
	lea	ecx, DWORD PTR _dSdv$[ebp+ecx*8]
	mov	DWORD PTR tv9815[ebp], edi
	mov	DWORD PTR tv9903[ebp], ecx
	mov	DWORD PTR tv9914[ebp], edx
	mov	DWORD PTR tv10022[ebp], eax
	mov	DWORD PTR tv10089[ebp], ebx
	jmp	SHORT $LN100@relaxed_el@2
$LN480@relaxed_el@2:
	mov	ebx, DWORD PTR _web+620
$LN100@relaxed_el@2:

; 1685 :              { REAL sum = 0.0;

	mov	edx, DWORD PTR tv10866[ebp]
	fld	ST(2)
	mov	eax, DWORD PTR tv10439[ebp]
	mov	DWORD PTR tv9231[ebp], edx
	mov	edx, DWORD PTR tv10334[ebp]
	mov	DWORD PTR tv9493[ebp], edi
	mov	DWORD PTR tv9495[ebp], ecx
	mov	DWORD PTR tv9497[ebp], edx
	mov	DWORD PTR tv9571[ebp], eax
	mov	DWORD PTR tv9133[ebp], ebx
	jmp	SHORT $LN97@relaxed_el@2
$LN481@relaxed_el@2:
	mov	ebx, DWORD PTR _web+620
$LN97@relaxed_el@2:

; 1687 :                   for ( d = 0 ; d < web.dimension ; d++ )

	mov	eax, DWORD PTR tv10583[ebp]
	mov	esi, DWORD PTR tv9914[ebp]
	mov	DWORD PTR tv8035[ebp], ebx
$LN94@relaxed_el@2:

; 1688 :                      sum += - dQdv[a][c][m][i]*dSdv[c][d][n][j]*Q[d][b]
; 1689 :                               - ( i==j ? Q[a][c]*ddSdv[c][d][m][n]*Q[d][b] : 0.0 )
; 1690 :                               - Q[a][c]*dSdv[c][d][m][i]*dQdv[d][b][n][j];

	mov	ebx, DWORD PTR _j$[ebp]
	cmp	DWORD PTR _i$[ebp], ebx
	jne	SHORT $LN286@relaxed_el@2
	mov	ebx, DWORD PTR tv9231[ebp]
	fld	QWORD PTR [ebx]
	fmul	QWORD PTR [edi]
	fmul	QWORD PTR [eax]
	jmp	SHORT $LN287@relaxed_el@2
$LN286@relaxed_el@2:
	fld	ST(3)
$LN287@relaxed_el@2:
	mov	ebx, DWORD PTR tv9571[ebp]
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv9231[ebp]
	fmul	QWORD PTR [ecx]
	add	ecx, 144				; 00000090H
	add	edx, 144				; 00000090H
	add	edi, 32					; 00000020H
	fmul	QWORD PTR [eax]
	add	eax, 16					; 00000010H
	add	esi, 288				; 00000120H
	dec	DWORD PTR tv8035[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx]
	fmul	QWORD PTR [edx-144]
	fmul	QWORD PTR [esi-288]
	faddp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	jne	SHORT $LN94@relaxed_el@2

; 1686 :                 for ( c = 0 ; c < web.dimension ; c++ )

	mov	edx, DWORD PTR tv9497[ebp]
	mov	ecx, DWORD PTR tv9495[ebp]
	mov	edi, DWORD PTR tv9493[ebp]
	add	DWORD PTR tv9571[ebp], 144		; 00000090H
	mov	ebx, 8
	add	DWORD PTR tv9231[ebp], ebx
	add	edx, 288				; 00000120H
	add	ecx, 288				; 00000120H
	add	edi, 64					; 00000040H
	mov	esi, 1
	sub	DWORD PTR tv9133[ebp], esi
	mov	DWORD PTR tv9497[ebp], edx
	mov	DWORD PTR tv9495[ebp], ecx
	mov	DWORD PTR tv9493[ebp], edi
	jne	$LN481@relaxed_el@2

; 1691 :                 ddQdv[a][b][m][n][i][j] = sum; 

	mov	eax, DWORD PTR tv10022[ebp]
	mov	edi, DWORD PTR tv9815[ebp]
	fstp	QWORD PTR [eax]
	mov	ecx, DWORD PTR tv9903[ebp]
	add	eax, 288				; 00000120H
	mov	DWORD PTR tv10022[ebp], eax
	mov	eax, 48					; 00000030H
	add	DWORD PTR tv9914[ebp], eax
	add	edi, ebx
	add	ecx, eax
	sub	DWORD PTR tv10089[ebp], esi
	mov	DWORD PTR tv9815[ebp], edi
	mov	DWORD PTR tv9903[ebp], ecx
	jne	$LN480@relaxed_el@2

; 1683 :           for ( m = 0 ; m < web.dimension ; m++ )

	mov	edi, DWORD PTR tv10202[ebp]
	add	DWORD PTR tv10451[ebp], 864		; 00000360H
	add	DWORD PTR tv10334[ebp], eax
	add	DWORD PTR tv10439[ebp], eax
	add	edi, 16					; 00000010H
	sub	DWORD PTR tv10499[ebp], esi
	mov	DWORD PTR tv10202[ebp], edi
	jne	$LN479@relaxed_el@2

; 1682 :         for ( b = 0 ; b < web.dimension ; b++ )

	add	DWORD PTR tv10583[ebp], ebx
	add	DWORD PTR tv10740[ebp], 2592		; 00000a20H
	add	DWORD PTR tv10726[ebp], 144		; 00000090H
	sub	DWORD PTR tv10790[ebp], esi
	mov	ebx, DWORD PTR _web+620
	jne	$LN106@relaxed_el@2

; 1681 :      for ( a = 0 ; a < web.dimension ; a++ )

	add	DWORD PTR tv10866[ebp], 16		; 00000010H
	add	DWORD PTR tv10909[ebp], 288		; 00000120H
	add	DWORD PTR tv10984[ebp], 5184		; 00001440H
	sub	DWORD PTR tv10964[ebp], esi
	jne	$LN109@relaxed_el@2
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR tv11025[ebp]
$LN111@relaxed_el@2:

; 1680 :     for ( j = sdim ; j < SDIM  ; j++ )

	mov	edx, DWORD PTR _j$[ebp]
	inc	edx
	mov	DWORD PTR _j$[ebp], edx
	cmp	edx, DWORD PTR _web+616
	jl	$LN112@relaxed_el@2

; 1676 :           }
; 1677 : 
; 1678 :   /* calculate ddQdv */
; 1679 :   for ( i = sdim ; i < SDIM  ; i++ )

	inc	eax
	add	ecx, 6
	mov	DWORD PTR _i$[ebp], eax
	mov	DWORD PTR tv11025[ebp], ecx
	cmp	eax, DWORD PTR _web+616
	jl	$LN115@relaxed_el@2
$LN113@relaxed_el@2:

; 1692 :              }
; 1693 : 
; 1694 :   /* calculate ddCdv */
; 1695 :   for ( i = 0 ; i < SDIM  ; i++ )

	cmp	DWORD PTR _web+616, 0
	mov	DWORD PTR _i$[ebp], 0
	jle	$LN89@relaxed_el@2
	lea	ecx, DWORD PTR _dQdv$[ebp]
	fstp	ST(1)
	mov	DWORD PTR tv14036[ebp], 0
	mov	DWORD PTR tv14053[ebp], ecx
$LN91@relaxed_el@2:

; 1696 :     for ( j = 0 ; j < SDIM  ; j++ )

	lea	edx, DWORD PTR _dQdv$[ebp]
	mov	DWORD PTR _j$[ebp], 0
	mov	DWORD PTR tv14028[ebp], edx
$LN88@relaxed_el@2:

; 1697 :      for ( a = 0 ; a < web.dimension ; a++ )

	mov	DWORD PTR _a$[ebp], 0
	test	ebx, ebx
	jle	$LN87@relaxed_el@2
	mov	eax, DWORD PTR tv14036[ebp]
	add	eax, DWORD PTR _j$[ebp]
	add	eax, eax
	add	eax, eax
	add	eax, eax
	lea	edx, DWORD PTR _ddQdv$[ebp+eax]
	lea	eax, DWORD PTR _ddCdv$[ebp+eax]
	mov	DWORD PTR tv14048[ebp], edx
	mov	DWORD PTR tv13887[ebp], eax
$LN85@relaxed_el@2:

; 1698 :         for ( b = 0 ; b < web.dimension ; b++ )

	mov	edx, DWORD PTR tv14053[ebp]
	mov	eax, DWORD PTR tv14028[ebp]
	lea	ecx, DWORD PTR _Q$[ebp]
	mov	DWORD PTR tv13428[ebp], ecx
	mov	ecx, DWORD PTR tv14048[ebp]
	mov	DWORD PTR tv13535[ebp], edx
	mov	edx, DWORD PTR tv13887[ebp]
	mov	DWORD PTR tv13601[ebp], eax
	mov	DWORD PTR tv13619[ebp], ecx
	mov	DWORD PTR tv13626[ebp], edx
	mov	DWORD PTR tv13720[ebp], ebx
$LN82@relaxed_el@2:

; 1699 :         { 
; 1700 :           for ( m = 0 ; m < web.dimension ; m++ )

	mov	eax, DWORD PTR tv13535[ebp]
	mov	ecx, DWORD PTR tv13619[ebp]
	mov	edx, DWORD PTR tv13626[ebp]
	mov	DWORD PTR _m$[ebp], 0
	mov	DWORD PTR tv13188[ebp], eax
	mov	DWORD PTR tv13206[ebp], ecx
	mov	DWORD PTR tv13208[ebp], edx
$LN79@relaxed_el@2:

; 1701 :              for ( n = 0 ; n < web.dimension ; n++ )

	mov	eax, DWORD PTR tv13601[ebp]
	mov	ecx, DWORD PTR tv13208[ebp]
	mov	edx, DWORD PTR tv13206[ebp]
	mov	DWORD PTR _n$[ebp], 0
	mov	DWORD PTR tv12562[ebp], eax
	mov	DWORD PTR tv12676[ebp], ecx
	mov	DWORD PTR tv12678[ebp], edx
$LN76@relaxed_el@2:

; 1702 :              { REAL sum = 0.0;

	mov	ecx, DWORD PTR tv13428[ebp]
	fld	ST(1)
	mov	edx, DWORD PTR tv12678[ebp]
	mov	esi, DWORD PTR tv13188[ebp]
	mov	edi, DWORD PTR tv12562[ebp]

; 1703 :                 for ( c = 0 ; c < web.dimension ; c++ )

	xor	eax, eax
	mov	DWORD PTR tv11463[ebp], ecx
	mov	DWORD PTR tv12100[ebp], edx
$LN73@relaxed_el@2:

; 1704 :                   sum += ( (i==j && i < sdim) ? ddFdv[a][c][m][n]*Q[c][b] : 0.0 )
; 1705 :                          + ( (i < sdim && j >= sdim) ? dFdv[a][c][m][i]*dQdv[c][b][n][j] : 0.0)
; 1706 :                          + ( (j < sdim && i >= sdim) ? dFdv[a][c][n][j]*dQdv[c][b][m][i] : 0.0)
; 1707 :                          + ( (i >= sdim && j >= sdim) ? F[a][c]*ddQdv[c][b][m][n][i][j] : 0.0);

	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _sdim$[ebp]
	cmp	edx, DWORD PTR _j$[ebp]
	jne	SHORT $LN288@relaxed_el@2
	cmp	edx, ecx
	jge	SHORT $LN288@relaxed_el@2
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	ecx, DWORD PTR _m$[ebp]
	lea	edx, DWORD PTR [ecx+edx*2]
	mov	ecx, DWORD PTR _n$[ebp]
	lea	edx, DWORD PTR [ecx+edx*2]
	mov	ecx, DWORD PTR tv11463[ebp]
	fld	QWORD PTR _ddFdv$[ebp+edx*8]
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _sdim$[ebp]
	jmp	SHORT $LN289@relaxed_el@2
$LN288@relaxed_el@2:
	fld	ST(2)
$LN289@relaxed_el@2:
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $LN486@relaxed_el@2
	cmp	DWORD PTR _j$[ebp], ecx
	jl	SHORT $LN486@relaxed_el@2
	mov	edx, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	lea	edx, DWORD PTR [eax+edx*2]
	lea	ecx, DWORD PTR [ecx+edx*2]
	add	ecx, edx
	lea	edx, DWORD PTR [ecx+ecx*2]
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [ecx+edx*2]
	fld	QWORD PTR _dFdv$[ebp+edx*8]
	mov	ecx, DWORD PTR _sdim$[ebp]
	fmul	QWORD PTR [edi]
	jmp	SHORT $LN291@relaxed_el@2
$LN486@relaxed_el@2:
	fld	ST(3)
$LN291@relaxed_el@2:
	cmp	DWORD PTR _j$[ebp], ecx
	jge	SHORT $LN487@relaxed_el@2
	cmp	DWORD PTR _i$[ebp], ecx
	jl	SHORT $LN487@relaxed_el@2
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	ecx, DWORD PTR _n$[ebp]
	lea	ecx, DWORD PTR [ecx+edx*2]
	add	ecx, edx
	lea	edx, DWORD PTR [ecx+ecx*2]
	mov	ecx, DWORD PTR _j$[ebp]
	lea	edx, DWORD PTR [ecx+edx*2]
	fld	QWORD PTR _dFdv$[ebp+edx*8]
	mov	ecx, DWORD PTR _sdim$[ebp]
	fmul	QWORD PTR [esi]
	jmp	SHORT $LN293@relaxed_el@2
$LN487@relaxed_el@2:
	fld	ST(4)
$LN293@relaxed_el@2:
	cmp	DWORD PTR _i$[ebp], ecx
	jl	SHORT $LN488@relaxed_el@2
	cmp	DWORD PTR _j$[ebp], ecx
	jl	SHORT $LN488@relaxed_el@2
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	fld	QWORD PTR _F$[ebp+edx*8]
	mov	ecx, DWORD PTR tv12100[ebp]
	fmul	QWORD PTR [ecx]
	jmp	SHORT $LN295@relaxed_el@2
$LN488@relaxed_el@2:
	fld	ST(5)
$LN295@relaxed_el@2:

; 1703 :                 for ( c = 0 ; c < web.dimension ; c++ )

	add	DWORD PTR tv11463[ebp], 16		; 00000010H

; 1704 :                   sum += ( (i==j && i < sdim) ? ddFdv[a][c][m][n]*Q[c][b] : 0.0 )
; 1705 :                          + ( (i < sdim && j >= sdim) ? dFdv[a][c][m][i]*dQdv[c][b][n][j] : 0.0)
; 1706 :                          + ( (j < sdim && i >= sdim) ? dFdv[a][c][n][j]*dQdv[c][b][m][i] : 0.0)
; 1707 :                          + ( (i >= sdim && j >= sdim) ? F[a][c]*ddQdv[c][b][m][n][i][j] : 0.0);

	fxch	ST(2)
	add	DWORD PTR tv12100[ebp], 5184		; 00001440H
	faddp	ST(3), ST(0)
	inc	eax
	add	edi, 288				; 00000120H
	faddp	ST(2), ST(0)
	add	esi, 288				; 00000120H
	faddp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	cmp	eax, ebx
	jl	$LN73@relaxed_el@2

; 1708 :                 ddCdv[a][b][m][n][i][j] = sum;

	mov	ecx, DWORD PTR tv12676[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	fstp	QWORD PTR [ecx]
	add	DWORD PTR tv12678[ebp], 288		; 00000120H
	inc	eax
	mov	edx, 48					; 00000030H
	add	DWORD PTR tv12562[ebp], edx
	add	ecx, 288				; 00000120H
	mov	DWORD PTR _n$[ebp], eax
	mov	DWORD PTR tv12676[ebp], ecx
	cmp	eax, ebx
	jl	$LN76@relaxed_el@2

; 1699 :         { 
; 1700 :           for ( m = 0 ; m < web.dimension ; m++ )

	mov	eax, DWORD PTR _m$[ebp]
	add	DWORD PTR tv13188[ebp], edx
	mov	ecx, 864				; 00000360H
	add	DWORD PTR tv13208[ebp], ecx
	add	DWORD PTR tv13206[ebp], ecx
	inc	eax
	mov	DWORD PTR _m$[ebp], eax
	cmp	eax, ebx
	jl	$LN79@relaxed_el@2

; 1698 :         for ( b = 0 ; b < web.dimension ; b++ )

	add	DWORD PTR tv13428[ebp], 8
	mov	eax, 144				; 00000090H
	add	DWORD PTR tv13601[ebp], eax
	add	DWORD PTR tv13535[ebp], eax
	mov	eax, 2592				; 00000a20H
	add	DWORD PTR tv13619[ebp], eax
	add	DWORD PTR tv13626[ebp], eax
	dec	DWORD PTR tv13720[ebp]
	jne	$LN82@relaxed_el@2

; 1697 :      for ( a = 0 ; a < web.dimension ; a++ )

	mov	eax, DWORD PTR _a$[ebp]
	add	DWORD PTR tv13887[ebp], 5184		; 00001440H
	inc	eax
	mov	DWORD PTR _a$[ebp], eax
	cmp	eax, ebx
	jl	$LN85@relaxed_el@2
$LN87@relaxed_el@2:

; 1696 :     for ( j = 0 ; j < SDIM  ; j++ )

	mov	eax, DWORD PTR _j$[ebp]
	add	DWORD PTR tv14028[ebp], 8
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, DWORD PTR _web+616
	jl	$LN88@relaxed_el@2

; 1692 :              }
; 1693 : 
; 1694 :   /* calculate ddCdv */
; 1695 :   for ( i = 0 ; i < SDIM  ; i++ )

	mov	eax, DWORD PTR _i$[ebp]
	add	DWORD PTR tv14053[ebp], 8
	add	DWORD PTR tv14036[ebp], 6
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _web+616
	jl	$LN91@relaxed_el@2
	fld	QWORD PTR _areasign$[ebp]
	fxch	ST(1)
$LN89@relaxed_el@2:

; 1709 :              }
; 1710 :   }
; 1711 :   /* calculate ddstuff */
; 1712 :     for ( i = 0 ; i < SDIM  ; i++ )

	mov	eax, DWORD PTR _web+616
	test	eax, eax
	jle	SHORT $LN68@relaxed_el@2
	mov	DWORD PTR tv14435[ebp], 0
	mov	DWORD PTR tv14416[ebp], eax
$LN511@relaxed_el@2:

; 1713 :      for ( j = 0 ; j < SDIM  ; j++ )

	xor	edi, edi
$LN67@relaxed_el@2:

; 1714 :       for ( a = 0 ; a < web.dimension ; a++ )

	test	ebx, ebx
	jle	SHORT $LN66@relaxed_el@2
	mov	edx, DWORD PTR tv14435[ebp]
	add	edx, edi
	lea	edx, DWORD PTR _ddstuff$[ebp+edx*8]
	mov	esi, ebx
$LN64@relaxed_el@2:

; 1715 :         for ( b = 0 ; b < web.dimension ; b++ )

	mov	eax, edx
	mov	ecx, ebx
$LN61@relaxed_el@2:

; 1716 :          ddstuff[a][b][i][j] = 0.0;

	fxch	ST(2)
	add	eax, 288				; 00000120H
	dec	ecx
	fst	QWORD PTR [eax-288]
	fxch	ST(2)
	jne	SHORT $LN61@relaxed_el@2

; 1714 :       for ( a = 0 ; a < web.dimension ; a++ )

	add	edx, 864				; 00000360H
	dec	esi
	jne	SHORT $LN64@relaxed_el@2
$LN66@relaxed_el@2:

; 1713 :      for ( j = 0 ; j < SDIM  ; j++ )

	inc	edi
	cmp	edi, DWORD PTR _web+616
	jl	SHORT $LN67@relaxed_el@2

; 1709 :              }
; 1710 :   }
; 1711 :   /* calculate ddstuff */
; 1712 :     for ( i = 0 ; i < SDIM  ; i++ )

	add	DWORD PTR tv14435[ebp], 6
	dec	DWORD PTR tv14416[ebp]
	jne	SHORT $LN511@relaxed_el@2
$LN68@relaxed_el@2:

; 1717 :   if ( eps2 + poisson*eps1 <= 0.0 )

	fxch	ST(2)
	fcom	QWORD PTR tv3081[ebp]
	fnstsw	ax
	test	ah, 1
	jne	$LN58@relaxed_el@2

; 1718 :   { /* relaxed in one dimension */
; 1719 :     if ( part & ONE_STRESS )

	test	BYTE PTR _part$[ebp], 1
	fstp	ST(3)
	je	$LN40@relaxed_el@2

; 1720 :     for ( i = 0 ; i < SDIM  ; i++ )

	cmp	DWORD PTR _web+616, 0
	jle	$LN40@relaxed_el@2
	mov	ecx, DWORD PTR _web+616
	fstp	ST(0)
	lea	eax, DWORD PTR _dCdv$[ebp+432]
	mov	DWORD PTR tv16527[ebp], 0
	mov	DWORD PTR tv16541[ebp], eax
	mov	DWORD PTR tv16564[ebp], ecx
$LN56@relaxed_el@2:

; 1721 :      for ( j = 0 ; j < SDIM  ; j++ )

	xor	esi, esi
	lea	edx, DWORD PTR _dCdv$[ebp]
	mov	DWORD PTR _j$[ebp], esi
	mov	DWORD PTR tv16519[ebp], edx
$LN514@relaxed_el@2:

; 1722 :       for ( a = 0 ; a < web.dimension ; a++ )

	test	ebx, ebx
	jle	$LN52@relaxed_el@2
	fstp	ST(1)
	fstp	ST(0)

; 1730 :     dDetCa = c11*dCdv[1][1][a][i] + dCdv[0][0][a][i]*c22
; 1731 :                  - c12*dCdv[1][0][a][i] - c21*dCdv[0][1][a][i];
; 1732 :     dDetCb = c11*dCdv[1][1][b][j] + dCdv[0][0][b][j]*c22
; 1733 :                  - c12*dCdv[1][0][b][j] - c21*dCdv[0][1][b][j];
; 1734 : 
; 1735 :     disc = TrC*TrC - 4*DetC;

	fld	QWORD PTR tv3071[ebp]
	fst	QWORD PTR _disc$90168[ebp]
	call	__CIsqrt

; 1739 : 
; 1740 :     deps1a = (dTrCa + 0.5/sqrt(disc)*ddisca)/2;
; 1741 :     deps1b = (dTrCb + 0.5/sqrt(disc)*ddiscb)/2;
; 1742 : 
; 1743 :     dddisc = 2*dTrCa*dTrCb +
; 1744 :            + 2*TrC*(ddCdv[0][0][a][b][i][j]+ddCdv[1][1][a][b][i][j])
; 1745 : 
; 1746 :            - 4*(dCdv[0][0][b][j]*dCdv[1][1][a][i] + dCdv[0][0][a][i]*dCdv[1][1][b][j]
; 1747 :                  - dCdv[0][1][b][j]*dCdv[1][0][a][i] - dCdv[1][0][b][j]*dCdv[0][1][a][i])
; 1748 : 
; 1749 :            - 4*(c11*ddCdv[1][1][a][b][i][j] + ddCdv[0][0][a][b][i][j]*c22
; 1750 :                  - c12*ddCdv[1][0][a][b][i][j] - c21*ddCdv[0][1][a][b][i][j]);
; 1751 : 
; 1752 :     ddeps = 0.5*(ddCdv[0][0][a][b][i][j]+ddCdv[1][1][a][b][i][j]
; 1753 :               -.25/sqrt(disc)/disc*ddisca*ddiscb + 0.5/sqrt(disc)*dddisc);

	fld	QWORD PTR __real@3fd0000000000000
	mov	edi, DWORD PTR tv16527[ebp]
	fdiv	ST(0), ST(1)
	mov	ecx, DWORD PTR tv16541[ebp]
	add	edi, esi
	add	edi, edi
	add	edi, edi
	add	edi, edi
	mov	DWORD PTR tv16430[ebp], ebx
	fdiv	QWORD PTR _disc$90168[ebp]
	fstp	QWORD PTR tv3553[ebp]
	fld	QWORD PTR _TrC$[ebp]
	fadd	ST(0), ST(0)
	fst	QWORD PTR tv3232[ebp]
	fld	QWORD PTR __real@3fe0000000000000
	fdivrp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv3557[ebp]
	fld	QWORD PTR _c21$[ebp]
	fld	QWORD PTR _c11$[ebp]
	fld	QWORD PTR __real@4010000000000000
	jmp	SHORT $LN50@relaxed_el@2
$LN471@relaxed_el@2:

; 1722 :       for ( a = 0 ; a < web.dimension ; a++ )

	fld	QWORD PTR _c11$[ebp]
	fld	QWORD PTR tv3232[ebp]
	fxch	ST(4)
	fxch	ST(3)
	fxch	ST(2)
$LN50@relaxed_el@2:
	fld	QWORD PTR [ecx]

; 1723 :         for ( b = 0 ; b < web.dimension ; b++ )

	mov	eax, DWORD PTR tv16519[ebp]
	fadd	QWORD PTR [ecx-432]
	mov	edx, edi
	mov	esi, ebx

; 1724 :      { REAL deps1a,deps1b,disc,ddisca,ddiscb,dddisc,ddeps;
; 1725 :        REAL dTrCa,dTrCb,dDetCa,dDetCb;
; 1726 : 
; 1727 : 
; 1728 :     dTrCa = dCdv[0][0][a][i]+dCdv[1][1][a][i];

	fst	QWORD PTR _dTrCa$90173[ebp]
	fmul	ST(0), ST(5)
	fld	QWORD PTR [ecx-432]
	fmul	QWORD PTR _c22$[ebp]
	fld	QWORD PTR [ecx]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-144]
	fmul	QWORD PTR _c12$[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ecx-288]
	fmulp	ST(5), ST(0)
	fsubrp	ST(4), ST(0)
	fxch	ST(3)
	fmul	ST(0), ST(1)
	fsubp	ST(3), ST(0)

; 1736 : 
; 1737 :     ddisca = 2*TrC*dTrCa - 4*dDetCa;

	fld	QWORD PTR tv3553[ebp]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR tv3554[ebp]
	fld	QWORD PTR _dTrCa$90173[ebp]
	fld	ST(0)
	fadd	ST(0), ST(1)
	fstp	QWORD PTR tv3560[ebp]
	fxch	ST(4)
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR tv3604[ebp]
	jmp	SHORT $LN47@relaxed_el@2
$LL956@relaxed_el@2:

; 1723 :         for ( b = 0 ; b < web.dimension ; b++ )

	fstp	ST(2)
	fstp	ST(0)
	fld	QWORD PTR _c11$[ebp]
	fld	QWORD PTR tv3232[ebp]
	fxch	ST(2)
$LN47@relaxed_el@2:

; 1729 :     dTrCb = dCdv[0][0][b][j]+dCdv[1][1][b][j];

	fld	QWORD PTR [eax]
	add	edx, 288				; 00000120H
	fadd	QWORD PTR [eax+432]
	add	eax, 48					; 00000030H
	dec	esi

; 1738 :     ddiscb = 2*TrC*dTrCb - 4*dDetCb;

	fld	ST(0)
	fmul	ST(0), ST(4)
	fld	QWORD PTR [eax+384]
	fmul	ST(0), ST(4)
	fld	QWORD PTR [eax-48]
	fmul	QWORD PTR _c22$[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax+240]
	fmul	QWORD PTR _c12$[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax+96]
	fmul	QWORD PTR _c21$[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)

; 1739 : 
; 1740 :     deps1a = (dTrCa + 0.5/sqrt(disc)*ddisca)/2;
; 1741 :     deps1b = (dTrCb + 0.5/sqrt(disc)*ddiscb)/2;
; 1742 : 
; 1743 :     dddisc = 2*dTrCa*dTrCb +
; 1744 :            + 2*TrC*(ddCdv[0][0][a][b][i][j]+ddCdv[1][1][a][b][i][j])
; 1745 : 
; 1746 :            - 4*(dCdv[0][0][b][j]*dCdv[1][1][a][i] + dCdv[0][0][a][i]*dCdv[1][1][b][j]
; 1747 :                  - dCdv[0][1][b][j]*dCdv[1][0][a][i] - dCdv[1][0][b][j]*dCdv[0][1][a][i])
; 1748 : 
; 1749 :            - 4*(c11*ddCdv[1][1][a][b][i][j] + ddCdv[0][0][a][b][i][j]*c22
; 1750 :                  - c12*ddCdv[1][0][a][b][i][j] - c21*ddCdv[0][1][a][b][i][j]);
; 1751 : 
; 1752 :     ddeps = 0.5*(ddCdv[0][0][a][b][i][j]+ddCdv[1][1][a][b][i][j]
; 1753 :               -.25/sqrt(disc)/disc*ddisca*ddiscb + 0.5/sqrt(disc)*dddisc);

	fld	QWORD PTR _ddCdv$[ebp+edx-288]
	fadd	QWORD PTR _ddCdv$[ebp+edx+7488]
	fld	ST(0)
	fmulp	ST(6), ST(0)
	fld	QWORD PTR tv3560[ebp]
	fmul	ST(0), ST(3)
	faddp	ST(6), ST(0)
	fld	QWORD PTR [ecx]
	fmul	QWORD PTR [eax-48]
	fld	QWORD PTR [ecx-432]
	fmul	QWORD PTR [eax+384]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx-144]
	fmul	QWORD PTR [eax+96]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ecx-288]
	fmul	QWORD PTR [eax+240]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fsubp	ST(6), ST(0)
	fld	QWORD PTR _ddCdv$[ebp+edx+7488]
	fmulp	ST(5), ST(0)
	fld	QWORD PTR _ddCdv$[ebp+edx-288]
	fmul	QWORD PTR _c22$[ebp]
	faddp	ST(5), ST(0)
	fld	QWORD PTR _ddCdv$[ebp+edx+4896]
	fmul	QWORD PTR _c12$[ebp]
	fsubp	ST(5), ST(0)
	fld	QWORD PTR _ddCdv$[ebp+edx+2304]
	fld	QWORD PTR _c21$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(6)
	fsubrp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fsubp	ST(6), ST(0)
	fld	QWORD PTR tv3557[ebp]
	fmul	ST(6), ST(0)
	fld	QWORD PTR tv3554[ebp]
	fmul	ST(0), ST(3)
	fsubp	ST(2), ST(0)
	fxch	ST(6)
	faddp	ST(1), ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)

; 1754 : 
; 1755 :             ddstuff[a][b][i][j] = (deps1a*deps1b + eps1*ddeps)/4; 

	fxch	ST(1)
	fmul	QWORD PTR _eps1$[ebp]
	fld	ST(6)
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	faddp	ST(3), ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR tv3604[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __real@3fd0000000000000
	fstp	QWORD PTR _ddstuff$[ebp+edx-288]
	jne	$LL956@relaxed_el@2

; 1722 :       for ( a = 0 ; a < web.dimension ; a++ )

	add	ecx, 48					; 00000030H
	add	edi, 864				; 00000360H
	dec	DWORD PTR tv16430[ebp]
	jne	$LN471@relaxed_el@2
	mov	esi, DWORD PTR _j$[ebp]
	fstp	ST(0)
	fstp	ST(1)
	fstp	ST(0)
	fldz
	fld	QWORD PTR _combo$[ebp]
$LN52@relaxed_el@2:

; 1721 :      for ( j = 0 ; j < SDIM  ; j++ )

	add	DWORD PTR tv16519[ebp], 8
	inc	esi
	mov	DWORD PTR _j$[ebp], esi
	cmp	esi, DWORD PTR _web+616
	jl	$LN514@relaxed_el@2

; 1720 :     for ( i = 0 ; i < SDIM  ; i++ )

	add	DWORD PTR tv16541[ebp], 8
	add	DWORD PTR tv16527[ebp], 6
	dec	DWORD PTR tv16564[ebp]
	jne	$LN56@relaxed_el@2

; 1756 :    
; 1757 : 
; 1758 :      }
; 1759 :   }
; 1760 :   else

	fld	QWORD PTR _areasign$[ebp]
	jmp	$LN40@relaxed_el@2
$LN58@relaxed_el@2:

; 1761 :   { 
; 1762 :     if ( part & TWO_STRESS )

	test	BYTE PTR _part$[ebp], 2
	je	$LN916@relaxed_el@2

; 1763 :     for ( i = 0 ; i < SDIM  ; i++ )

	cmp	DWORD PTR _web+616, 0
	jle	$LN916@relaxed_el@2
	mov	edx, DWORD PTR _web+616
	fstp	ST(1)
	lea	ecx, DWORD PTR _dCdv$[ebp+432]
	mov	DWORD PTR tv18302[ebp], 0
	mov	DWORD PTR tv18348[ebp], ecx
	mov	DWORD PTR tv18335[ebp], edx
$LN42@relaxed_el@2:

; 1764 :      for ( j = 0 ; j < SDIM  ; j++ )

	lea	eax, DWORD PTR _dCdv$[ebp+432]
	mov	DWORD PTR _j$[ebp], 0
	mov	DWORD PTR tv18294[ebp], eax
$LN39@relaxed_el@2:

; 1765 :       for ( a = 0 ; a < web.dimension ; a++ )

	test	ebx, ebx
	jle	$LN38@relaxed_el@2
	fstp	ST(1)
	mov	edi, DWORD PTR tv18302[ebp]
	fld	QWORD PTR _c12$[ebp]
	add	edi, DWORD PTR _j$[ebp]
	fmul	ST(0), ST(2)
	mov	edx, DWORD PTR tv18348[ebp]
	add	edi, edi
	add	edi, edi
	fstp	QWORD PTR tv3260[ebp]
	add	edi, edi
	fld	QWORD PTR _c11$[ebp]
	mov	DWORD PTR tv18169[ebp], ebx
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv3264[ebp]
	fld	QWORD PTR _c21$[ebp]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv3269[ebp]
	fld	QWORD PTR _c22$[ebp]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv3274[ebp]
	fld	QWORD PTR _coeff2$[ebp]
	fmul	ST(0), ST(2)
	fst	QWORD PTR tv3281[ebp]
	fld	QWORD PTR tv3065[ebp]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv3282[ebp]
	jmp	SHORT $LN36@relaxed_el@2
$LN473@relaxed_el@2:
	fld	QWORD PTR tv3281[ebp]
	fld	QWORD PTR __real@4000000000000000
	fxch	ST(2)
	fxch	ST(1)
$LN36@relaxed_el@2:
	fld	QWORD PTR [edx-288]

; 1766 :         for ( b = 0 ; b < web.dimension ; b++ )

	mov	eax, DWORD PTR tv18294[ebp]
	fmul	ST(0), ST(3)
	mov	ecx, edi
	fld	QWORD PTR [edx-432]
	mov	esi, ebx
	fmul	ST(0), ST(4)
	fld	QWORD PTR [edx-144]
	fmul	ST(0), ST(5)
	fld	QWORD PTR [edx]
	fmulp	ST(6), ST(0)
	fxch	ST(5)
	fstp	QWORD PTR tv18178[ebp]
	fld	QWORD PTR [edx-432]
	fadd	QWORD PTR [edx]
	fmulp	ST(3), ST(0)
$LN474@relaxed_el@2:

; 1767 :         { REAL term; 
; 1768 :           term = (coeff1*( 2*c11*ddCdv[0][0][a][b][i][j]
; 1769 :                          + 2*c12*ddCdv[1][0][a][b][i][j]
; 1770 :                          + 2*c21*ddCdv[0][1][a][b][i][j]
; 1771 :                          + 2*c22*ddCdv[1][1][a][b][i][j]) 
; 1772 :                  + 2*coeff2*(c11+c22)*(ddCdv[0][0][a][b][i][j]+ddCdv[1][1][a][b][i][j]))
; 1773 : 
; 1774 :                  + (coeff1*(2*dCdv[0][0][a][i]*dCdv[0][0][b][j] 
; 1775 :                           + 2*dCdv[0][1][a][i]*dCdv[1][0][b][j]
; 1776 :                           + 2*dCdv[1][0][a][i]*dCdv[0][1][b][j]
; 1777 :                           + 2*dCdv[1][1][a][i]*dCdv[1][1][b][j]
; 1778 :                          ) 
; 1779 :                   + 2*coeff2*(dCdv[0][0][a][i]+dCdv[1][1][a][i])
; 1780 :                                      *(dCdv[0][0][b][j] +dCdv[1][1][b][j]));

	fld	QWORD PTR _ddCdv$[ebp+ecx+5184]
	add	ecx, 288				; 00000120H
	fmul	QWORD PTR tv3260[ebp]
	add	eax, 48					; 00000030H
	dec	esi
	fld	QWORD PTR tv3264[ebp]
	fmul	QWORD PTR _ddCdv$[ebp+ecx-288]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddCdv$[ebp+ecx+2304]
	fmul	QWORD PTR tv3269[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddCdv$[ebp+ecx+7488]
	fmul	QWORD PTR tv3274[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR _coeff1$[ebp]
	fld	QWORD PTR _ddCdv$[ebp+ecx+7488]
	fadd	QWORD PTR _ddCdv$[ebp+ecx-288]
	fmul	QWORD PTR tv3282[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax-192]
	fmul	ST(0), ST(3)
	fld	ST(2)
	fmul	QWORD PTR [eax-480]
	faddp	ST(1), ST(0)
	fld	ST(6)
	fmul	QWORD PTR [eax-336]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv18178[ebp]
	fmul	QWORD PTR [eax-48]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR _coeff1$[ebp]
	fld	QWORD PTR [eax-48]
	fadd	QWORD PTR [eax-480]
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	faddp	ST(1), ST(0)

; 1781 :             ddstuff[a][b][i][j] = term;

	fstp	QWORD PTR _ddstuff$[ebp+ecx-288]
	jne	$LN474@relaxed_el@2

; 1765 :       for ( a = 0 ; a < web.dimension ; a++ )

	fstp	ST(1)
	add	edx, 48					; 00000030H

; 1766 :         for ( b = 0 ; b < web.dimension ; b++ )

	fstp	ST(0)
	add	edi, 864				; 00000360H
	dec	DWORD PTR tv18169[ebp]
	fstp	ST(2)
	fstp	ST(1)
	jne	$LN473@relaxed_el@2

; 1765 :       for ( a = 0 ; a < web.dimension ; a++ )

	fld	QWORD PTR _combo$[ebp]
	fld	QWORD PTR __real@4000000000000000
	fxch	ST(2)
$LN38@relaxed_el@2:

; 1764 :      for ( j = 0 ; j < SDIM  ; j++ )

	mov	eax, DWORD PTR _j$[ebp]
	add	DWORD PTR tv18294[ebp], 8
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, DWORD PTR _web+616
	jl	$LN39@relaxed_el@2

; 1763 :     for ( i = 0 ; i < SDIM  ; i++ )

	add	DWORD PTR tv18348[ebp], 8
	add	DWORD PTR tv18302[ebp], 6
	dec	DWORD PTR tv18335[ebp]
	jne	$LN42@relaxed_el@2
	fstp	ST(2)
	fld	QWORD PTR _areasign$[ebp]
	jmp	SHORT $LN40@relaxed_el@2
$LN916@relaxed_el@2:
	fstp	ST(3)
$LN40@relaxed_el@2:

; 1782 :          }
; 1783 :   }
; 1784 : 
; 1785 :   /* area hessian */
; 1786 :   for ( i = sdim ; i < SDIM  ; i++ )

	mov	eax, DWORD PTR _sdim$[ebp]
	mov	edx, DWORD PTR _web+616
	cmp	eax, edx
	jge	SHORT $LN491@relaxed_el@2
	lea	ecx, DWORD PTR [eax+eax*2]
	add	ecx, ecx
	mov	DWORD PTR tv18730[ebp], ecx
	mov	ecx, edx
	sub	ecx, eax
	mov	DWORD PTR tv18712[ebp], ecx
$LN30@relaxed_el@2:

; 1787 :     for ( j = sdim ; j < SDIM  ; j++ )

	mov	ecx, DWORD PTR _sdim$[ebp]
	mov	DWORD PTR _j$[ebp], ecx
$LN27@relaxed_el@2:

; 1788 :      for ( a = 0 ; a < web.dimension ; a++ )

	test	ebx, ebx
	jle	SHORT $LN26@relaxed_el@2
	mov	esi, DWORD PTR tv18730[ebp]
	add	esi, DWORD PTR _j$[ebp]
	mov	edi, ebx
	lea	esi, DWORD PTR _ddadv$[ebp+esi*8]
$LN24@relaxed_el@2:

; 1789 :         for ( b = 0 ; b < web.dimension ; b++ )

	mov	eax, esi
	mov	ecx, ebx
$LN21@relaxed_el@2:

; 1790 :           ddadv[a][b][i][j] = 0.0;

	fxch	ST(2)
	add	eax, 288				; 00000120H
	dec	ecx
	fst	QWORD PTR [eax-288]
	fxch	ST(2)
	jne	SHORT $LN21@relaxed_el@2

; 1788 :      for ( a = 0 ; a < web.dimension ; a++ )

	add	esi, 864				; 00000360H
	dec	edi
	jne	SHORT $LN24@relaxed_el@2
$LN26@relaxed_el@2:

; 1787 :     for ( j = sdim ; j < SDIM  ; j++ )

	mov	eax, DWORD PTR _j$[ebp]
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, edx
	jl	SHORT $LN27@relaxed_el@2

; 1782 :          }
; 1783 :   }
; 1784 : 
; 1785 :   /* area hessian */
; 1786 :   for ( i = sdim ; i < SDIM  ; i++ )

	add	DWORD PTR tv18730[ebp], 6
	dec	DWORD PTR tv18712[ebp]
	jne	SHORT $LN30@relaxed_el@2
$LN491@relaxed_el@2:

; 1791 :   ddadv[0][1][sdim][sdim+1] = areasign;

	mov	ecx, DWORD PTR _sdim$[ebp]
	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	lea	eax, DWORD PTR [ecx*8]
	sub	eax, ecx
	add	eax, eax
	add	eax, eax
	add	eax, eax
	fst	QWORD PTR _ddadv$[ebp+eax+296]

; 1792 :   ddadv[1][0][sdim+1][sdim] = areasign;
; 1793 :   ddadv[0][1][sdim+1][sdim] = -areasign;
; 1794 :   ddadv[1][0][sdim][sdim+1] = -areasign;
; 1795 : 
; 1796 : 
; 1797 :   /* big Hessian finale */
; 1798 :   for ( i = 0 ; i < SDIM  ; i++ )

	xor	ecx, ecx
	fst	QWORD PTR _ddadv$[ebp+eax+912]
	fchs
	fst	QWORD PTR _ddadv$[ebp+eax+336]
	fstp	QWORD PTR _ddadv$[ebp+eax+872]
	cmp	edx, ecx
	jle	$LN879@relaxed_el@2

; 1791 :   ddadv[0][1][sdim][sdim+1] = areasign;

	fld	QWORD PTR _area$[ebp]
	mov	DWORD PTR tv19660[ebp], ecx
	fld	QWORD PTR _weight$[ebp]
	fld	QWORD PTR _stuff$[ebp]
$LN521@relaxed_el@2:

; 1799 :     for ( j = 0 ; j < SDIM  ; j++ )

	mov	DWORD PTR _j$[ebp], 0
	test	edx, edx
	jle	$LN17@relaxed_el@2
$LN508@relaxed_el@2:

; 1800 :      for ( a = 0 ; a < web.dimension ; a++ )

	xor	edi, edi
	mov	DWORD PTR _a$[ebp], edi
	test	ebx, ebx
	jle	$LN14@relaxed_el@2
	mov	eax, DWORD PTR tv19660[ebp]
	add	eax, DWORD PTR _j$[ebp]
	lea	edx, DWORD PTR [ecx*8]
	add	eax, eax
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv19509[ebp], eax
	mov	DWORD PTR tv19449[ebp], edx
$LN12@relaxed_el@2:

; 1801 :         for ( b = 0 ; b < web.dimension ; b++ )

	xor	edx, edx
	test	ebx, ebx
	jle	$LN11@relaxed_el@2
	mov	DWORD PTR tv19133[ebp], eax
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, eax
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv18982[ebp], eax
$LN493@relaxed_el@2:
	mov	ebx, DWORD PTR _sdim$[ebp]

; 1802 :         { REAL term;
; 1803 :             term =
; 1804 :                  ( (i >= sdim && j >= sdim) ? ddadv[a][b][i][j]*stuff : 0.0)
; 1805 :               + dadv[a][i]*dstuff[b][j]
; 1806 :               + dadv[b][j]*dstuff[a][i]
; 1807 :               + area*ddstuff[a][b][i][j];

	cmp	ecx, ebx
	jl	SHORT $LN296@relaxed_el@2
	cmp	DWORD PTR _j$[ebp], ebx
	jl	SHORT $LN494@relaxed_el@2
	mov	edi, DWORD PTR tv19133[ebp]
	fld	QWORD PTR _ddadv$[ebp+edi]
	mov	edi, DWORD PTR _a$[ebp]
	fmul	ST(0), ST(1)
	jmp	SHORT $LN297@relaxed_el@2
$LN494@relaxed_el@2:
	mov	edi, DWORD PTR _a$[ebp]
$LN296@relaxed_el@2:
	fld	ST(4)
$LN297@relaxed_el@2:
	mov	ebx, DWORD PTR tv18982[ebp]
	fld	QWORD PTR _dstuff$[ebp+ebx]
	mov	ebx, DWORD PTR tv19449[ebp]
	fmul	QWORD PTR _dadv$[ebp+ebx]
	mov	ebx, DWORD PTR tv18982[ebp]
	add	DWORD PTR tv18982[ebp], 48		; 00000030H
	inc	edx
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dadv$[ebp+ebx]
	mov	ebx, DWORD PTR tv19449[ebp]
	fmul	QWORD PTR _dstuff$[ebp+ebx]
	mov	ebx, DWORD PTR tv19133[ebp]
	add	DWORD PTR tv19133[ebp], 288		; 00000120H
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddstuff$[ebp+ebx]

; 1808 :           term *= weight;
; 1809 :           f_info->hess[a+1][b+1][i][j] = term;

	mov	ebx, DWORD PTR [esi+1340]
	mov	ebx, DWORD PTR [ebx+edi*4+4]
	fmul	ST(0), ST(4)
	mov	ebx, DWORD PTR [ebx+edx*4]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fst	QWORD PTR [eax+ebx]

; 1810 :           f_info->hess[a+1][0][i][j] -= term;

	mov	ebx, DWORD PTR [esi+1340]
	mov	ebx, DWORD PTR [ebx+edi*4+4]
	mov	ebx, DWORD PTR [ebx]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fld	QWORD PTR [ebx+eax]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [ebx+eax]

; 1811 :           f_info->hess[0][b+1][i][j] -= term;

	mov	ebx, DWORD PTR [esi+1340]
	mov	ebx, DWORD PTR [ebx]
	mov	ebx, DWORD PTR [ebx+edx*4]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fld	QWORD PTR [ebx+eax]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [ebx+eax]

; 1812 :           f_info->hess[0][0][i][j] += term;

	mov	ebx, DWORD PTR [esi+1340]
	mov	ebx, DWORD PTR [ebx]
	mov	ebx, DWORD PTR [ebx]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fadd	QWORD PTR [ebx+eax]
	fstp	QWORD PTR [ebx+eax]
	mov	ebx, DWORD PTR _web+620
	cmp	edx, ebx
	jl	$LN493@relaxed_el@2

; 1801 :         for ( b = 0 ; b < web.dimension ; b++ )

	mov	eax, DWORD PTR tv19509[ebp]
$LN11@relaxed_el@2:

; 1800 :      for ( a = 0 ; a < web.dimension ; a++ )

	add	DWORD PTR tv19449[ebp], 48		; 00000030H
	inc	edi
	add	eax, 864				; 00000360H
	mov	DWORD PTR _a$[ebp], edi
	mov	DWORD PTR tv19509[ebp], eax
	cmp	edi, ebx
	jl	$LN12@relaxed_el@2
	mov	edx, DWORD PTR _web+616
$LN14@relaxed_el@2:

; 1799 :     for ( j = 0 ; j < SDIM  ; j++ )

	mov	eax, DWORD PTR _j$[ebp]
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, edx
	jl	$LN508@relaxed_el@2
$LN17@relaxed_el@2:

; 1792 :   ddadv[1][0][sdim+1][sdim] = areasign;
; 1793 :   ddadv[0][1][sdim+1][sdim] = -areasign;
; 1794 :   ddadv[1][0][sdim][sdim+1] = -areasign;
; 1795 : 
; 1796 : 
; 1797 :   /* big Hessian finale */
; 1798 :   for ( i = 0 ; i < SDIM  ; i++ )

	add	DWORD PTR tv19660[ebp], 6
	inc	ecx
	cmp	ecx, edx
	jl	$LN521@relaxed_el@2
	fstp	ST(2)
	fstp	ST(3)
	fstp	ST(2)
$LN879@relaxed_el@2:

; 1813 :         }
; 1814 :   /* combo correction */
; 1815 :   for ( i = 0 ; i < SDIM  ; i++ ) 

	xor	ecx, ecx
	fstp	ST(1)
	test	edx, edx
	jle	$LN911@relaxed_el@2
$LN519@relaxed_el@2:

; 1816 :    for ( j = 0 ; j < SDIM  ; j++ ) 

	xor	eax, eax
	test	edx, edx
	jle	$LN5@relaxed_el@2
$LN3@relaxed_el@2:

; 1817 :    { REAL term;
; 1818 :      term = combo*(combo*f_info->hess[2][2][i][j]-f_info->hess[1][2][i][j]
; 1819 :                           -f_info->hess[2][1][i][j]);

	mov	edx, DWORD PTR [esi+1340]
	mov	edi, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [edx+4]
	mov	ebx, DWORD PTR [edi+8]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fld	QWORD PTR [ebx+eax*8]
	mov	ebx, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [edx+4]
	fmul	ST(0), ST(1)
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	edi, DWORD PTR [edi+4]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	fsub	QWORD PTR [ebx+eax*8]
	mov	edi, DWORD PTR [edi+ecx*4]
	lea	edx, DWORD PTR [edx+eax*8]
	fsub	QWORD PTR [edi+eax*8]
	fmul	ST(0), ST(1)

; 1820 :      f_info->hess[1][1][i][j] += term;

	fld	QWORD PTR [edx]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 1821 :      f_info->hess[0][1][i][j] -= term;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 1822 :      f_info->hess[1][0][i][j] -= term;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 1823 :      f_info->hess[0][0][i][j] += term;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ecx*4]
	fadd	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fstp	QWORD PTR [edx]

; 1824 :      term = combo*f_info->hess[2][2][i][j];

	mov	edx, DWORD PTR [esi+1340]
	mov	edi, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	edi, DWORD PTR [edi+8]
	mov	edi, DWORD PTR [edi+ecx*4]
	fld	QWORD PTR [edi+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fmul	ST(0), ST(1)

; 1825 :      f_info->hess[1][2][i][j] -= term;

	fld	QWORD PTR [edx]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 1826 :      f_info->hess[0][2][i][j] += term;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+8]
	fld	ST(0)
	mov	edx, DWORD PTR [edx+ecx*4]
	fadd	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fstp	QWORD PTR [edx]

; 1827 :      f_info->hess[1][0][i][j] += term;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx]
	fld	ST(0)
	mov	edx, DWORD PTR [edx+ecx*4]
	fadd	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fstp	QWORD PTR [edx]

; 1828 :      f_info->hess[0][0][i][j] -= term;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ecx*4]
	fsubr	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fstp	QWORD PTR [edx]

; 1829 :      term = combo*f_info->hess[2][2][i][j];

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx+8]
	mov	edi, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	edi, DWORD PTR [edi+ecx*4]
	fld	QWORD PTR [edi+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fmul	ST(0), ST(1)

; 1830 :      f_info->hess[2][1][i][j] -= term;

	fld	QWORD PTR [edx]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [edx]

; 1831 :      f_info->hess[0][1][i][j] += term;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+4]
	fld	ST(0)
	mov	edx, DWORD PTR [edx+ecx*4]
	fadd	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fstp	QWORD PTR [edx]

; 1832 :      f_info->hess[2][0][i][j] += term;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [edx]
	fld	ST(0)
	mov	edx, DWORD PTR [edx+ecx*4]
	fadd	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	fstp	QWORD PTR [edx]

; 1833 :      f_info->hess[0][0][i][j] -= term;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+ecx*4]
	fsubr	QWORD PTR [edx+eax*8]
	lea	edx, DWORD PTR [edx+eax*8]
	inc	eax
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR _web+616
	cmp	eax, edx
	jl	$LN3@relaxed_el@2
$LN5@relaxed_el@2:

; 1813 :         }
; 1814 :   /* combo correction */
; 1815 :   for ( i = 0 ; i < SDIM  ; i++ ) 

	inc	ecx
	cmp	ecx, edx
	jl	$LN519@relaxed_el@2
$LN911@relaxed_el@2:

; 1816 :    for ( j = 0 ; j < SDIM  ; j++ ) 

	fstp	ST(0)

; 1834 :    }
; 1835 :   return energy;

	fld	QWORD PTR _energy$[ebp]
$LN264@relaxed_el@2:

; 1836 : } // end relaxed_elastic_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_relaxed_elastic_all ENDP
_TEXT	ENDS
PUBLIC	_relaxed_elastic_energy
; Function compile flags: /Ogtp
;	COMDAT _relaxed_elastic_energy
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_relaxed_elastic_energy PROC				; COMDAT

; 1849 : {

	push	ebp
	mov	ebp, esp

; 1850 :  return relaxed_elastic_all(f_info,METHOD_VALUE,ONE_STRESS|TWO_STRESS);

	mov	eax, DWORD PTR _f_info$[ebp]
	push	3
	push	1767					; 000006e7H
	push	eax
	call	_relaxed_elastic_all
	add	esp, 12					; 0000000cH

; 1851 : }

	pop	ebp
	ret	0
_relaxed_elastic_energy ENDP
_TEXT	ENDS
PUBLIC	_relaxed_elastic_gradient
; Function compile flags: /Ogtp
;	COMDAT _relaxed_elastic_gradient
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_relaxed_elastic_gradient PROC				; COMDAT

; 1866 : {

	push	ebp
	mov	ebp, esp

; 1867 :  return relaxed_elastic_all(f_info,METHOD_GRADIENT,ONE_STRESS|TWO_STRESS);

	mov	eax, DWORD PTR _f_info$[ebp]
	push	3
	push	4321					; 000010e1H
	push	eax
	call	_relaxed_elastic_all
	add	esp, 12					; 0000000cH

; 1868 : }

	pop	ebp
	ret	0
_relaxed_elastic_gradient ENDP
_TEXT	ENDS
PUBLIC	_relaxed_elastic_hessian
; Function compile flags: /Ogtp
;	COMDAT _relaxed_elastic_hessian
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_relaxed_elastic_hessian PROC				; COMDAT

; 1882 : {

	push	ebp
	mov	ebp, esp

; 1883 :  return relaxed_elastic_all(f_info,METHOD_HESSIAN,ONE_STRESS|TWO_STRESS);

	mov	eax, DWORD PTR _f_info$[ebp]
	push	3
	push	8763					; 0000223bH
	push	eax
	call	_relaxed_elastic_all
	add	esp, 12					; 0000000cH

; 1884 : }

	pop	ebp
	ret	0
_relaxed_elastic_hessian ENDP
_TEXT	ENDS
PUBLIC	_relaxed_elastic1_energy
; Function compile flags: /Ogtp
;	COMDAT _relaxed_elastic1_energy
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_relaxed_elastic1_energy PROC				; COMDAT

; 1889 : { return relaxed_elastic_all(f_info,METHOD_VALUE,ONE_STRESS); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _f_info$[ebp]
	push	1
	push	1767					; 000006e7H
	push	eax
	call	_relaxed_elastic_all
	add	esp, 12					; 0000000cH
	pop	ebp
	ret	0
_relaxed_elastic1_energy ENDP
_TEXT	ENDS
PUBLIC	_relaxed_elastic1_gradient
; Function compile flags: /Ogtp
;	COMDAT _relaxed_elastic1_gradient
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_relaxed_elastic1_gradient PROC				; COMDAT

; 1892 : { return relaxed_elastic_all(f_info,METHOD_GRADIENT,ONE_STRESS); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _f_info$[ebp]
	push	1
	push	4321					; 000010e1H
	push	eax
	call	_relaxed_elastic_all
	add	esp, 12					; 0000000cH
	pop	ebp
	ret	0
_relaxed_elastic1_gradient ENDP
_TEXT	ENDS
PUBLIC	_relaxed_elastic1_hessian
; Function compile flags: /Ogtp
;	COMDAT _relaxed_elastic1_hessian
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_relaxed_elastic1_hessian PROC				; COMDAT

; 1895 : { return relaxed_elastic_all(f_info,METHOD_HESSIAN,ONE_STRESS); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _f_info$[ebp]
	push	1
	push	8763					; 0000223bH
	push	eax
	call	_relaxed_elastic_all
	add	esp, 12					; 0000000cH
	pop	ebp
	ret	0
_relaxed_elastic1_hessian ENDP
_TEXT	ENDS
PUBLIC	_relaxed_elastic2_energy
; Function compile flags: /Ogtp
;	COMDAT _relaxed_elastic2_energy
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_relaxed_elastic2_energy PROC				; COMDAT

; 1898 : { return relaxed_elastic_all(f_info,METHOD_VALUE,TWO_STRESS); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _f_info$[ebp]
	push	2
	push	1767					; 000006e7H
	push	eax
	call	_relaxed_elastic_all
	add	esp, 12					; 0000000cH
	pop	ebp
	ret	0
_relaxed_elastic2_energy ENDP
_TEXT	ENDS
PUBLIC	_relaxed_elastic2_gradient
; Function compile flags: /Ogtp
;	COMDAT _relaxed_elastic2_gradient
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_relaxed_elastic2_gradient PROC				; COMDAT

; 1901 : { return relaxed_elastic_all(f_info,METHOD_GRADIENT,TWO_STRESS); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _f_info$[ebp]
	push	2
	push	4321					; 000010e1H
	push	eax
	call	_relaxed_elastic_all
	add	esp, 12					; 0000000cH
	pop	ebp
	ret	0
_relaxed_elastic2_gradient ENDP
_TEXT	ENDS
PUBLIC	_relaxed_elastic2_hessian
; Function compile flags: /Ogtp
;	COMDAT _relaxed_elastic2_hessian
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_relaxed_elastic2_hessian PROC				; COMDAT

; 1904 : { return relaxed_elastic_all(f_info,METHOD_HESSIAN,TWO_STRESS); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _f_info$[ebp]
	push	2
	push	8763					; 0000223bH
	push	eax
	call	_relaxed_elastic_all
	add	esp, 12					; 0000000cH
	pop	ebp
	ret	0
_relaxed_elastic2_hessian ENDP
_TEXT	ENDS
PUBLIC	??_C@_0FC@OJNFLPPO@Facet?5extra?5attribute?5form_facto@ ; `string'
PUBLIC	??_C@_0EL@HMEKBACJ@Facet?5extra?5attribute?5poisson_ra@ ; `string'
PUBLIC	??_C@_0DD@JCGOKBD@relaxed_elastic_A?5method?5only?5fo@ ; `string'
PUBLIC	??_C@_0DB@HOGEHNBL@relaxed_elastic_A?5method?5only?5fo@ ; `string'
PUBLIC	_relaxed_elastic_A_init
;	COMDAT ??_C@_0FC@OJNFLPPO@Facet?5extra?5attribute?5form_facto@
CONST	SEGMENT
??_C@_0FC@OJNFLPPO@Facet?5extra?5attribute?5form_facto@ DB 'Facet extra a'
	DB	'ttribute form_factors real[3] missing. Needed by relaxed_elas'
	DB	'tic_A.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@HMEKBACJ@Facet?5extra?5attribute?5poisson_ra@
CONST	SEGMENT
??_C@_0EL@HMEKBACJ@Facet?5extra?5attribute?5poisson_ra@ DB 'Facet extra a'
	DB	'ttribute poisson_ratio missing. Needed by relaxed_elastic_A.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@JCGOKBD@relaxed_elastic_A?5method?5only?5fo@
CONST	SEGMENT
??_C@_0DD@JCGOKBD@relaxed_elastic_A?5method?5only?5fo@ DB 'relaxed_elasti'
	DB	'c_A method only for SOAPFILM model.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@HOGEHNBL@relaxed_elastic_A?5method?5only?5fo@
CONST	SEGMENT
??_C@_0DB@HOGEHNBL@relaxed_elastic_A?5method?5only?5fo@ DB 'relaxed_elast'
	DB	'ic_A method only for LINEAR model.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _relaxed_elastic_A_init
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_mi$ = 12						; size = 4
_relaxed_elastic_A_init PROC				; COMDAT

; 1952 : 
; 1953 :   if ( web.modeltype != LINEAR )

	cmp	DWORD PTR _web+628, 1
	je	SHORT $LN5@relaxed_el@3

; 1954 :      kb_error(2163,"relaxed_elastic_A method only for LINEAR model.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DB@HOGEHNBL@relaxed_elastic_A?5method?5only?5fo@
	push	2163					; 00000873H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN5@relaxed_el@3:

; 1955 : 
; 1956 :   if ( web.dimension != 2 )

	cmp	DWORD PTR _web+620, 2
	je	SHORT $LN4@relaxed_el@3

; 1957 :      kb_error(2164,"relaxed_elastic_A method only for SOAPFILM model.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DD@JCGOKBD@relaxed_elastic_A?5method?5only?5fo@
	push	2164					; 00000874H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN4@relaxed_el@3:

; 1958 : 
; 1959 :   /* extra facet attribute for poisson_ratio */
; 1960 :   poisson_attr = find_attribute(FACET,POISSON_NAME);

	push	OFFSET ??_C@_0O@BCENEBHP@poisson_ratio?$AA@
	push	2
	call	_find_attribute
	add	esp, 8
	mov	DWORD PTR _poisson_attr, eax

; 1961 :   if ( poisson_attr < 0 ) /* not found */

	test	eax, eax
	jns	SHORT $LN3@relaxed_el@3

; 1962 :      kb_error(2165,"Facet extra attribute poisson_ratio missing. Needed by relaxed_elastic_A.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0EL@HMEKBACJ@Facet?5extra?5attribute?5poisson_ra@
	push	2165					; 00000875H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN3@relaxed_el@3:

; 1963 : 
; 1964 :   form_factors_attr = find_attribute(FACET,FORM_FACTORS_NAME);

	push	OFFSET ??_C@_0N@KCLCABBK@form_factors?$AA@
	push	2
	call	_find_attribute
	add	esp, 8
	mov	DWORD PTR _form_factors_attr, eax

; 1965 :   if ( form_factors_attr < 0 ) /* not found */

	test	eax, eax
	jns	SHORT $LN2@relaxed_el@3

; 1966 :      kb_error(2166,"Facet extra attribute form_factors real[3] missing. Needed by relaxed_elastic_A.\n",RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0FC@OJNFLPPO@Facet?5extra?5attribute?5form_facto@
	push	2166					; 00000876H
	call	_kb_error
	mov	eax, DWORD PTR _form_factors_attr
	add	esp, 12					; 0000000cH
$LN2@relaxed_el@3:

; 1967 : 
; 1968 :   if ( EXTRAS(FACET)[form_factors_attr].array_spec.datacount != 3 )

	mov	ecx, DWORD PTR _dymem
	imul	eax, 240				; 000000f0H
	add	eax, DWORD PTR _web+328
	cmp	DWORD PTR [eax+ecx+88], 3
	je	SHORT $LN1@relaxed_el@3

; 1969 :      kb_error(2167,"Facet extra attribute form_factors must have size 3.\n",
; 1970 :         RECOVERABLE);

	push	1
	push	OFFSET ??_C@_0DG@EAIIMJGF@Facet?5extra?5attribute?5form_facto@
	push	2167					; 00000877H
	call	_kb_error
	add	esp, 12					; 0000000cH
$LN1@relaxed_el@3:

; 1971 : 
; 1972 :   LEBweight_attr = find_attribute(FACET,LEBWEIGHT_NAME); /* optional */

	push	OFFSET ??_C@_09CJPMHPNP@LEBweight?$AA@
	push	2
	call	_find_attribute
	add	esp, 8
	mov	DWORD PTR _LEBweight_attr, eax

; 1973 : 
; 1974 : } // end relaxed_elastic_A_init()

	ret	0
_relaxed_elastic_A_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DE@PCPMGJAF@relaxed_elastic_A?3?5Facet?5?$CFs?5has?5@ ; `string'
PUBLIC	_f_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_relaxed_elastic_A_all
;	COMDAT ??_C@_0DE@PCPMGJAF@relaxed_elastic_A?3?5Facet?5?$CFs?5has?5@
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
??_C@_0DE@PCPMGJAF@relaxed_elastic_A?3?5Facet?5?$CFs?5has?5@ DB 'relaxed_'
	DB	'elastic_A: Facet %s has unstrained area 0.', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\method4.c
CONST	ENDS
;	COMDAT _relaxed_elastic_A_all
_TEXT	SEGMENT
_area$ = -14476						; size = 8
_weight$ = -14468					; size = 8
tv1799 = -14460						; size = 8
tv1638 = -14460						; size = 8
tv1936 = -14452						; size = 8
_coeff2$ = -14452					; size = 8
tv1933 = -14444						; size = 8
_coeff1$ = -14444					; size = 8
tv1776 = -14436						; size = 8
_eps1$ = -14436						; size = 8
_q12$ = -14436						; size = 8
_c21$ = -14428						; size = 8
tv1634 = -14420						; size = 8
_energy$ = -14420					; size = 8
_f12$ = -14420						; size = 8
_c12$ = -14412						; size = 8
_c11$ = -14404						; size = 8
_c22$ = -14396						; size = 8
tv9066 = -14388						; size = 8
tv1932 = -14388						; size = 8
tv1639 = -14388						; size = 8
_disc$90451 = -14388					; size = 8
tv1983 = -14380						; size = 8
tv1632 = -14380						; size = 8
_q22$ = -14380						; size = 8
tv1939 = -14372						; size = 8
tv1780 = -14372						; size = 8
tv1648 = -14372						; size = 8
_dTrCa$90456 = -14372					; size = 8
_q11$ = -14372						; size = 8
tv1785 = -14364						; size = 8
_TrC$ = -14364						; size = 8
_f11$ = -14364						; size = 8
_det$ = -14364						; size = 8
tv1790 = -14356						; size = 8
tv1750 = -14356						; size = 8
tv4645 = -14352						; size = 4
tv1668 = -14348						; size = 8
_poisson$ = -14348					; size = 8
tv9150 = -14344						; size = 4
tv7379 = -14344						; size = 4
tv4165 = -14344						; size = 4
_f_info$GSCopy$ = -14340				; size = 4
tv1773 = -14336						; size = 8
tv9711 = -14332						; size = 4
tv8984 = -14332						; size = 4
tv7245 = -14332						; size = 4
tv5231 = -14332						; size = 4
tv4638 = -14332						; size = 4
tv1800 = -14328						; size = 8
tv3591 = -14324						; size = 4
tv2748 = -14324						; size = 4
tv2417 = -14324						; size = 4
_m$ = -14324						; size = 4
_i$ = -14320						; size = 4
tv4401 = -14316						; size = 4
tv2726 = -14316						; size = 4
tv2349 = -14316						; size = 4
tv2790 = -14312						; size = 4
_a$ = -14312						; size = 4
_j$ = -14308						; size = 4
_sdim$ = -14308						; size = 4
tv9119 = -14304						; size = 4
tv7344 = -14304						; size = 4
tv4505 = -14304						; size = 4
tv3843 = -14304						; size = 4
tv456 = -14304						; size = 4
tv9707 = -14300						; size = 4
tv9165 = -14300						; size = 4
tv7358 = -14300						; size = 4
tv4785 = -14300						; size = 4
tv3796 = -14300						; size = 4
tv496 = -14300						; size = 4
tv9605 = -14296						; size = 4
tv9111 = -14296						; size = 4
tv7336 = -14296						; size = 4
tv5254 = -14296						; size = 4
tv4870 = -14296						; size = 4
tv3707 = -14296						; size = 4
tv1040 = -14296						; size = 4
_side$ = -14296						; size = 4
_ddstuff$ = -14292					; size = 2592
_ddCdv$ = -11700					; size = 10368
_dFdv$ = -1332						; size = 576
_dCdv$ = -756						; size = 576
_dstuff$ = -180						; size = 144
_ddFdv$ = -164						; size = 128
_Q$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_f_info$ = 8						; size = 4
_mode$ = 12						; size = 4
_part$ = 16						; size = 4
_relaxed_elastic_A_all PROC				; COMDAT

; 1992 : {

	push	ebp
	mov	ebp, esp
	mov	eax, 14476				; 0000388cH
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _f_info$[ebp]

; 1993 :   REAL q11,q12,q22;  /* Q entries */
; 1994 :   REAL Q[2][2];
; 1995 :   REAL det;    /* det S */
; 1996 :   REAL area;  /* reference area of facet */
; 1997 :   REAL poisson; /* poisson ratio */
; 1998 :   REAL f11,f12,f22;
; 1999 :   REAL c11,c12,c21,c22;
; 2000 :   REAL energy;
; 2001 :   REAL stuff;
; 2002 :   REAL dstuff[FACET_VERTS][MAXCOORD];
; 2003 :   REAL dCdv[2][2][FACET_VERTS][MAXCOORD];
; 2004 :   REAL dFdv[2][2][FACET_VERTS][MAXCOORD];
; 2005 :   REAL ddFdv[2][2][2][2];
; 2006 :   REAL ddCdv[2][2][FACET_VERTS][FACET_VERTS][MAXCOORD][MAXCOORD];
; 2007 :   REAL ddstuff[FACET_VERTS][FACET_VERTS][MAXCOORD][MAXCOORD];
; 2008 :   int i,j,m,n,a,b,c;
; 2009 :   REAL coeff1,coeff2;
; 2010 :   REAL *s;  /* form factors */
; 2011 :   int sdim = SDIM; /* true space dimension */
; 2012 :   REAL weight;  /* facet weighting factor */
; 2013 :   REAL **side;  /* sides of facet */
; 2014 :   REAL eps1,eps2; /* strain eigenvalues */
; 2015 :   REAL TrC,DetC;  /* trace and determinant of C */
; 2016 : 
; 2017 :   poisson = *(REAL*)get_extra(f_info->id,poisson_attr);

	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _poisson_attr

; 2226 :          }
; 2227 :   }
; 2228 : 
; 2229 :   /* big Hessian finale */
; 2230 :   for ( i = 0 ; i < SDIM  ; i++ )

	mov	DWORD PTR _f_info$GSCopy$[ebp], eax
	imul	edx, 240				; 000000f0H
	mov	eax, ecx
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	push	ebx
	mov	ebx, DWORD PTR _web[eax+104]
	mov	eax, DWORD PTR _web[eax+12]
	add	ebx, edx
	push	esi
	mov	esi, DWORD PTR _dymem
	mov	ebx, DWORD PTR [ebx+esi+64]
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	push	edi
	mov	edi, DWORD PTR _web+616
	fld	QWORD PTR [ebx+edx]
	mov	edx, DWORD PTR _LEBweight_attr
	fstp	QWORD PTR _poisson$[ebp]
	mov	DWORD PTR _sdim$[ebp], edi
	test	edx, edx
	js	SHORT $LN151@relaxed_el@4

; 2018 :   if ( LEBweight_attr >= 0 )
; 2019 :     weight = *(REAL*)get_extra(f_info->id,LEBweight_attr);

	mov	eax, ecx
	imul	edx, 240				; 000000f0H
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	ebx, DWORD PTR _web[eax+104]
	mov	eax, DWORD PTR _web[eax+12]
	add	ebx, edx
	mov	ebx, DWORD PTR [ebx+esi+64]
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [eax+edx*4]
	fld	QWORD PTR [ebx+edx]
	jmp	SHORT $LN499@relaxed_el@4
$LN151@relaxed_el@4:

; 2020 :   else weight = 1.0;

	fld1
$LN499@relaxed_el@4:

; 2021 : 
; 2022 :   s = (REAL*)get_extra(f_info->id,form_factors_attr);

	mov	edx, DWORD PTR _form_factors_attr
	fstp	QWORD PTR _weight$[ebp]
	mov	eax, ecx
	imul	edx, 240				; 000000f0H
	shr	eax, 29					; 0000001dH
	imul	eax, 112				; 00000070H
	mov	ebx, DWORD PTR _web[eax+104]
	mov	eax, DWORD PTR _web[eax+12]
	add	ebx, edx
	mov	esi, DWORD PTR [ebx+esi+64]
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	add	esi, DWORD PTR [eax+edx*4]

; 2023 :   det = s[0]*s[2] - s[1]*s[1];

	fld	QWORD PTR [esi+8]
	fld	QWORD PTR [esi+16]
	fmul	QWORD PTR [esi]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	fst	QWORD PTR _det$[ebp]

; 2024 : 
; 2025 :   if ( det <= 0.0 )

	fldz
	fcom	ST(1)
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN281@relaxed_el@4

; 2026 :   { if ( mode == METHOD_VALUE ) return 0.0;

	cmp	DWORD PTR _mode$[ebp], 1767		; 000006e7H

; 2029 :     kb_error(2168,errmsg,RECOVERABLE);

	fstp	ST(1)
	je	$LN152@relaxed_el@4

; 2027 :     sprintf(errmsg,"relaxed_elastic_A: Facet %s has unstrained area 0.\n",
; 2028 :         ELNAME(f_info->id));

	fstp	ST(0)
	test	ecx, 268435456				; 10000000H
	je	SHORT $LN154@relaxed_el@4
	and	ecx, 134217727				; 07ffffffH
	inc	ecx
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET _elnames
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	eax, OFFSET _elnames
	jmp	SHORT $LN155@relaxed_el@4
$LN154@relaxed_el@4:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN155@relaxed_el@4:
	push	eax
	push	OFFSET ??_C@_0DE@PCPMGJAF@relaxed_elastic_A?3?5Facet?5?$CFs?5has?5@
	push	OFFSET _errmsg
	call	_sprintf

; 2029 :     kb_error(2168,errmsg,RECOVERABLE);

	push	1
	push	OFFSET _errmsg
	push	2168					; 00000878H
	call	_kb_error
	fld	QWORD PTR _det$[ebp]
	add	esp, 24					; 00000018H
	jmp	SHORT $LN149@relaxed_el@4
$LN281@relaxed_el@4:
	fstp	ST(0)
$LN149@relaxed_el@4:

; 2030 :   }
; 2031 :   area = sqrt(det)/2;

	call	__CIsqrt
	fmul	QWORD PTR __real@3fe0000000000000

; 2032 :   coeff1 = 1.0/8/(1 + poisson);
; 2033 :   coeff2 = coeff1*poisson/(1 - (web.dimension-1)*poisson);

	mov	ecx, DWORD PTR _web+620
	dec	ecx
	fstp	QWORD PTR _area$[ebp]
	mov	DWORD PTR tv9711[ebp], ecx
	fld	QWORD PTR _poisson$[ebp]

; 2034 :   Q[0][0] = q11 = s[2]/det; 
; 2035 :   Q[0][1] = Q[1][0] = q12 = -s[1]/det; 
; 2036 :   Q[1][1] = q22 = s[0]/det;
; 2037 : 
; 2038 :   side = f_info->sides[0];

	mov	edx, DWORD PTR _f_info$GSCopy$[ebp]
	fld	ST(0)
	mov	eax, DWORD PTR [edx+1276]
	fld1
	mov	ebx, DWORD PTR [eax]
	fadd	ST(1), ST(0)

; 2039 :   f11 = dot(side[0],side[0],sdim);

	mov	eax, DWORD PTR [ebx]
	fld	QWORD PTR __real@3fc0000000000000
	push	edi
	push	eax
	push	eax
	fdivrp	ST(2), ST(0)
	mov	DWORD PTR _side$[ebp], ebx
	fxch	ST(1)
	fst	QWORD PTR _coeff1$[ebp]
	fmul	ST(0), ST(2)
	fild	DWORD PTR tv9711[ebp]
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	fsubrp	ST(2), ST(0)
	fdivrp	ST(1), ST(0)
	fstp	QWORD PTR _coeff2$[ebp]
	fld	QWORD PTR [esi+16]
	fld	QWORD PTR _det$[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _q11$[ebp]
	fstp	QWORD PTR _Q$[ebp]
	fld	QWORD PTR [esi+8]
	fdiv	ST(0), ST(1)
	fchs
	fst	QWORD PTR _q12$[ebp]
	fst	QWORD PTR _Q$[ebp+16]
	fstp	QWORD PTR _Q$[ebp+8]
	fdivr	QWORD PTR [esi]
	fst	QWORD PTR _q22$[ebp]
	fstp	QWORD PTR _Q$[ebp+24]
	call	_dot
	fstp	QWORD PTR _f11$[ebp]

; 2040 :   f12 = dot(side[0],side[1],sdim);

	mov	ecx, DWORD PTR [ebx+4]
	mov	edx, DWORD PTR [ebx]
	push	edi
	push	ecx
	push	edx
	call	_dot
	fstp	QWORD PTR _f12$[ebp]

; 2041 :   f22 = dot(side[1],side[1],sdim);

	mov	eax, DWORD PTR [ebx+4]
	push	edi
	push	eax
	push	eax
	call	_dot

; 2042 : 
; 2043 :   c11 = f11*q11 + f12*q12 - 1;

	fld	QWORD PTR _f12$[ebp]
	fld	ST(0)
	add	esp, 36					; 00000024H
	fld	QWORD PTR _q12$[ebp]
	fmul	ST(1), ST(0)
	fld	QWORD PTR _f11$[ebp]
	fld	QWORD PTR _q11$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fadd	ST(0), ST(3)
	fsub	QWORD PTR __real@3ff0000000000000
	fst	QWORD PTR _c11$[ebp]

; 2044 :   c12 = f11*q12 + f12*q22;

	fld	ST(4)
	fmul	QWORD PTR _q22$[ebp]
	fld	QWORD PTR _f11$[ebp]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fst	QWORD PTR _c12$[ebp]

; 2045 :   c21 = f12*q11 + f22*q12;

	fld	ST(6)
	fmulp	ST(4), ST(0)
	fxch	ST(5)
	fmulp	ST(2), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fst	QWORD PTR _c21$[ebp]

; 2046 :   c22 = f12*q12 + f22*q22 - 1;

	fxch	ST(4)
	fmul	QWORD PTR _q22$[ebp]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fsub	QWORD PTR __real@3ff0000000000000
	fst	QWORD PTR _c22$[ebp]

; 2047 : 
; 2048 :   TrC = c11 + c22; 

	fld	ST(0)
	fadd	ST(0), ST(2)
	fst	QWORD PTR tv1632[ebp]
	fst	QWORD PTR _TrC$[ebp]

; 2049 :   DetC = c11*c22 - c12*c21;

	fxch	ST(4)
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fst	QWORD PTR tv1634[ebp]
	fxch	ST(2)
	fmulp	ST(1), ST(0)
	fsubrp	ST(1), ST(0)

; 2050 :   eps1 = (TrC + sqrt(TrC*TrC - 4*DetC))/2;

	fld	ST(1)
	fmulp	ST(2), ST(0)
	fmul	QWORD PTR __real@4010000000000000
	fsubp	ST(1), ST(0)
	fst	QWORD PTR tv1638[ebp]
	call	__CIsqrt
	fst	QWORD PTR tv1639[ebp]
	fld	ST(0)
	fld	QWORD PTR _TrC$[ebp]
	fadd	ST(1), ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(2), ST(0)
	fxch	ST(2)
	fst	QWORD PTR _eps1$[ebp]

; 2051 :   eps2 = (TrC - sqrt(TrC*TrC - 4*DetC))/2;

	fld	ST(1)
	fsub	ST(0), ST(4)
	fmul	ST(0), ST(3)

; 2052 :  
; 2053 :   if ( eps1 <= 0.0 ) return 0.0;  /* relaxed in both directions */

	fldz
	fcom	ST(2)
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN147@relaxed_el@4
$LN501@relaxed_el@4:
	fstp	ST(1)
	pop	edi
	fstp	ST(3)
	pop	esi
	fstp	ST(0)
	pop	ebx
	fstp	ST(2)
	fstp	ST(1)

; 2243 : } // end relaxed_elastic_A_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN147@relaxed_el@4:

; 2054 :   stuff = 0.0;

	fld	ST(0)

; 2055 :   if ( eps2 + poisson*eps1 <= 0.0 )

	fld	ST(3)
	fmul	QWORD PTR _poisson$[ebp]
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fst	QWORD PTR tv1648[ebp]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN146@relaxed_el@4

; 2056 :   { /* relaxed in one dimension */
; 2057 :     if ( part & ONE_STRESS )

	test	BYTE PTR _part$[ebp], 1
	je	SHORT $LN275@relaxed_el@4

; 2063 :       stuff = coeff1*(c11*c11+c12*c21+c12*c21+c22*c22)
; 2064 :                  + coeff2*(c11+c22)*(c11+c22);

	fstp	ST(1)
	fld	ST(1)
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(4)
	fmul	QWORD PTR __real@3fd0000000000000
	jmp	SHORT $LN476@relaxed_el@4
$LN146@relaxed_el@4:

; 2058 :       stuff = eps1*eps1/2/4;  /* 1/4 fudge factor to agree with other */
; 2059 :   }
; 2060 :   else
; 2061 :   { /* stressed in both directions */
; 2062 :     if ( part & TWO_STRESS )

	test	BYTE PTR _part$[ebp], 2
	je	SHORT $LN275@relaxed_el@4
	fstp	ST(1)

; 2063 :       stuff = coeff1*(c11*c11+c12*c21+c12*c21+c22*c22)
; 2064 :                  + coeff2*(c11+c22)*(c11+c22);

	fld	QWORD PTR _c11$[ebp]
	fmul	ST(0), ST(0)
	fld	QWORD PTR tv1634[ebp]
	fadd	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fld	QWORD PTR _c22$[ebp]
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR _coeff1$[ebp]
	fld	QWORD PTR tv1632[ebp]
	fmul	QWORD PTR _coeff2$[ebp]
	fmul	QWORD PTR tv1632[ebp]
	faddp	ST(1), ST(0)
$LN476@relaxed_el@4:
	fxch	ST(1)
$LN275@relaxed_el@4:

; 2065 :   }
; 2066 :   energy = weight*area*stuff;
; 2067 : 
; 2068 :   if ( mode == METHOD_VALUE ) return energy;

	cmp	DWORD PTR _mode$[ebp], 1767		; 000006e7H
	fld	QWORD PTR _area$[ebp]
	fmul	QWORD PTR _weight$[ebp]
	fst	QWORD PTR tv1668[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _energy$[ebp]
	je	$LN501@relaxed_el@4

; 2069 : 
; 2070 :   /* gradient */
; 2071 : 
; 2072 :   for ( i = 0 ; i < sdim  ; i++ )  /* with respect to space coord */

	mov	esi, DWORD PTR _web+620
	fstp	ST(0)
	xor	edi, edi
	mov	DWORD PTR _i$[ebp], edi
	cmp	DWORD PTR _sdim$[ebp], edi
	jle	$LN139@relaxed_el@4
$LN141@relaxed_el@4:

; 2073 :   {  
; 2074 :     for ( a = 0 ; a < web.dimension ; a++ )

	mov	DWORD PTR _a$[ebp], 0
	test	esi, esi
	jle	$LN140@relaxed_el@4

; 2069 : 
; 2070 :   /* gradient */
; 2071 : 
; 2072 :   for ( i = 0 ; i < sdim  ; i++ )  /* with respect to space coord */

	lea	eax, DWORD PTR _dFdv$[ebp+edi*8]
	mov	DWORD PTR tv2417[ebp], eax
$LN138@relaxed_el@4:

; 2075 :       for ( b = 0 ; b < web.dimension ; b++ )

	mov	ecx, DWORD PTR tv2417[ebp]
	xor	edx, edx
	mov	DWORD PTR tv2349[ebp], ecx
$LN135@relaxed_el@4:

; 2076 :         for ( m = 0 ; m < web.dimension ; m++ )

	mov	ecx, DWORD PTR tv2349[ebp]
	xor	eax, eax
$LN132@relaxed_el@4:

; 2077 :           dFdv[a][b][m][i] = (m==a ? side[b][i] : 0.0)
; 2078 :                            + (m==b ? side[a][i] : 0.0);

	cmp	eax, DWORD PTR _a$[ebp]
	jne	SHORT $LN156@relaxed_el@4
	mov	ebx, DWORD PTR [ebx+edx*4]
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR _side$[ebp]
	jmp	SHORT $LN157@relaxed_el@4
$LN156@relaxed_el@4:
	fld	ST(0)
$LN157@relaxed_el@4:
	cmp	eax, edx
	jne	SHORT $LN158@relaxed_el@4
	mov	edi, DWORD PTR _a$[ebp]
	mov	ebx, DWORD PTR [ebx+edi*4]
	mov	edi, DWORD PTR _i$[ebp]
	fld	QWORD PTR [ebx+edi*8]
	mov	ebx, DWORD PTR _side$[ebp]
	jmp	SHORT $LN159@relaxed_el@4
$LN158@relaxed_el@4:
	fld	ST(1)
$LN159@relaxed_el@4:
	faddp	ST(1), ST(0)
	inc	eax
	add	ecx, 48					; 00000030H
	fstp	QWORD PTR [ecx-48]
	cmp	eax, esi
	jl	SHORT $LN132@relaxed_el@4

; 2075 :       for ( b = 0 ; b < web.dimension ; b++ )

	add	DWORD PTR tv2349[ebp], 144		; 00000090H
	inc	edx
	cmp	edx, esi
	jl	SHORT $LN135@relaxed_el@4

; 2073 :   {  
; 2074 :     for ( a = 0 ; a < web.dimension ; a++ )

	mov	eax, DWORD PTR _a$[ebp]
	add	DWORD PTR tv2417[ebp], 288		; 00000120H
	inc	eax
	mov	DWORD PTR _a$[ebp], eax
	cmp	eax, esi
	jl	$LN138@relaxed_el@4
$LN140@relaxed_el@4:

; 2069 : 
; 2070 :   /* gradient */
; 2071 : 
; 2072 :   for ( i = 0 ; i < sdim  ; i++ )  /* with respect to space coord */

	inc	edi
	mov	DWORD PTR _i$[ebp], edi
	cmp	edi, DWORD PTR _sdim$[ebp]
	jl	$LN141@relaxed_el@4
$LN139@relaxed_el@4:

; 2079 :   }
; 2080 : 
; 2081 :   for ( i = 0 ; i < sdim  ; i++ )  /* with respect to space coord */

	cmp	DWORD PTR _sdim$[ebp], 0
	mov	DWORD PTR _i$[ebp], 0
	jle	$LN127@relaxed_el@4
$LN129@relaxed_el@4:

; 2082 :   {
; 2083 :      for ( a = 0 ; a < web.dimension ; a++ )

	test	esi, esi
	jle	$LN128@relaxed_el@4

; 2079 :   }
; 2080 : 
; 2081 :   for ( i = 0 ; i < sdim  ; i++ )  /* with respect to space coord */

	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [edx*8]
	mov	DWORD PTR tv2790[ebp], eax

; 2082 :   {
; 2083 :      for ( a = 0 ; a < web.dimension ; a++ )

	mov	DWORD PTR tv456[ebp], esi
$LN126@relaxed_el@4:

; 2084 :         for ( b = 0 ; b < web.dimension ; b++ )

	mov	edx, DWORD PTR tv2790[ebp]
	lea	ecx, DWORD PTR _Q$[ebp]
	lea	eax, DWORD PTR _dCdv$[ebp+edx]
	mov	DWORD PTR tv2726[ebp], ecx
	mov	DWORD PTR tv2748[ebp], eax
	mov	DWORD PTR tv496[ebp], esi
$LN123@relaxed_el@4:

; 2085 :           for ( m = 0 ; m < web.dimension ; m++ )

	mov	edi, DWORD PTR tv2790[ebp]
	mov	ebx, DWORD PTR tv2748[ebp]
	lea	edi, DWORD PTR _dFdv$[ebp+edi]
	mov	DWORD PTR tv1040[ebp], esi
$LN120@relaxed_el@4:

; 2086 :           { REAL sum = 0.0;

	mov	ecx, DWORD PTR tv2726[ebp]
	fld	ST(0)
	mov	eax, edi
	mov	edx, esi
$LN117@relaxed_el@4:

; 2087 :              for ( c = 0 ; c < web.dimension ; c++ )
; 2088 :                 sum += dFdv[a][c][m][i]*Q[c][b];

	fld	QWORD PTR [eax]
	add	eax, 144				; 00000090H
	fmul	QWORD PTR [ecx]
	add	ecx, 16					; 00000010H
	dec	edx
	faddp	ST(1), ST(0)
	jne	SHORT $LN117@relaxed_el@4

; 2089 :              dCdv[a][b][m][i] = sum;

	fstp	QWORD PTR [ebx]
	mov	eax, 1
	add	edi, 48					; 00000030H
	add	ebx, 48					; 00000030H
	sub	DWORD PTR tv1040[ebp], eax
	jne	SHORT $LN120@relaxed_el@4

; 2084 :         for ( b = 0 ; b < web.dimension ; b++ )

	add	DWORD PTR tv2748[ebp], 144		; 00000090H
	add	DWORD PTR tv2726[ebp], 8
	sub	DWORD PTR tv496[ebp], eax
	jne	SHORT $LN123@relaxed_el@4

; 2082 :   {
; 2083 :      for ( a = 0 ; a < web.dimension ; a++ )

	add	DWORD PTR tv2790[ebp], 288		; 00000120H
	dec	DWORD PTR tv456[ebp]
	jne	$LN126@relaxed_el@4
$LN128@relaxed_el@4:

; 2079 :   }
; 2080 : 
; 2081 :   for ( i = 0 ; i < sdim  ; i++ )  /* with respect to space coord */

	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _sdim$[ebp]
	jl	$LN129@relaxed_el@4
$LN127@relaxed_el@4:

; 2090 :           }
; 2091 :   }
; 2092 : 
; 2093 :   for ( j = 0 ; j < web.dimension  ; j++ )

	test	esi, esi
	jle	SHORT $LN276@relaxed_el@4
	lea	edx, DWORD PTR _dstuff$[ebp]
	mov	ebx, esi
$LN279@relaxed_el@4:

; 2094 :     for ( i = 0 ; i < SDIM  ; i++ ) dstuff[j][i] = 0.0;

	mov	ecx, DWORD PTR _web+616
	test	ecx, ecx
	jle	SHORT $LN113@relaxed_el@4
	and	ecx, 536870911				; 1fffffffH
	add	ecx, ecx
	xor	eax, eax
	mov	edi, edx
	rep stosd
$LN113@relaxed_el@4:

; 2090 :           }
; 2091 :   }
; 2092 : 
; 2093 :   for ( j = 0 ; j < web.dimension  ; j++ )

	add	edx, 48					; 00000030H
	dec	ebx
	jne	SHORT $LN279@relaxed_el@4
$LN276@relaxed_el@4:

; 2095 :   if ( eps2 + poisson*eps1 <= 0.0 )

	fcom	QWORD PTR tv1648[ebp]
	fnstsw	ax
	fld	QWORD PTR __real@4000000000000000
	test	ah, 1
	jne	$LN342@relaxed_el@4

; 2096 :   { /* relaxed in one dimension */
; 2097 :     if ( part & ONE_STRESS )

	test	BYTE PTR _part$[ebp], 1
	je	$LN348@relaxed_el@4

; 2098 :     for ( j = 0 ; j < web.dimension  ; j++ )

	test	esi, esi
	jle	$LN348@relaxed_el@4
	xor	edx, edx
	mov	edi, esi
$LN106@relaxed_el@4:

; 2099 :      for ( i = 0 ; i < SDIM  ; i++ )

	cmp	DWORD PTR _web+616, 0
	jle	$LN105@relaxed_el@4
	fld	ST(4)
	mov	ecx, DWORD PTR _web+616
	fdivrp	ST(6), ST(0)
	mov	eax, edx
	fmul	ST(3), ST(0)
	fxch	ST(3)
	fstp	QWORD PTR tv1750[ebp]
	fxch	ST(1)
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fmul	QWORD PTR __real@3fd0000000000000
	fstp	QWORD PTR tv1773[ebp]
$LN266@relaxed_el@4:

; 2100 :      { dstuff[j][i] = eps1*0.5/4*(dCdv[0][0][j][i]+dCdv[1][1][j][i]
; 2101 :         + 0.5/sqrt(TrC*TrC - 4*DetC)*(2*TrC*(dCdv[0][0][j][i]+dCdv[1][1][j][i])
; 2102 :            - 4*(c11*dCdv[1][1][j][i] + dCdv[0][0][j][i]*c22
; 2103 :                  - c12*dCdv[1][0][j][i] - c21*dCdv[0][1][j][i])));

	fld	QWORD PTR _dCdv$[ebp+eax+432]
	add	eax, 8
	dec	ecx
	fadd	QWORD PTR _dCdv$[ebp+eax-8]
	fld	QWORD PTR tv1750[ebp]
	fmul	ST(0), ST(1)
	fld	QWORD PTR _dCdv$[ebp+eax+424]
	fmul	QWORD PTR _c11$[ebp]
	fld	QWORD PTR _dCdv$[ebp+eax-8]
	fmul	QWORD PTR _c22$[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dCdv$[ebp+eax+280]
	fmul	QWORD PTR _c12$[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR _dCdv$[ebp+eax+136]
	fmul	QWORD PTR _c21$[ebp]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR __real@4010000000000000
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR tv1773[ebp]
	fstp	QWORD PTR _dstuff$[ebp+eax-8]
	jne	SHORT $LN266@relaxed_el@4

; 2099 :      for ( i = 0 ; i < SDIM  ; i++ )

	fstp	ST(2)
	fld	QWORD PTR tv1639[ebp]
	fld	QWORD PTR _TrC$[ebp]
	fld	QWORD PTR _eps1$[ebp]
	fld	QWORD PTR __real@3fe0000000000000
	fxch	ST(3)
	fxch	ST(5)
	fxch	ST(3)
	fxch	ST(4)
	fxch	ST(2)
	fxch	ST(3)
	fxch	ST(1)
	fxch	ST(2)
	fxch	ST(1)
$LN105@relaxed_el@4:

; 2098 :     for ( j = 0 ; j < web.dimension  ; j++ )

	add	edx, 48					; 00000030H
	dec	edi
	jne	$LN106@relaxed_el@4
$LN348@relaxed_el@4:
	fstp	ST(4)
	fstp	ST(1)
	fstp	ST(3)
	fstp	ST(0)
$LN261@relaxed_el@4:

; 2116 :      }
; 2117 :   }
; 2118 : 
; 2119 :   /* grand finale for gradient */
; 2120 :   for ( a = 0 ; a < web.dimension ; a++ )

	xor	ebx, ebx
	test	esi, esi
	jle	SHORT $LN90@relaxed_el@4
	mov	edi, DWORD PTR _f_info$GSCopy$[ebp]
	lea	ecx, DWORD PTR _dstuff$[ebp]
	mov	DWORD PTR tv3591[ebp], ecx
$LN92@relaxed_el@4:

; 2121 :      for ( i = 0 ; i < SDIM  ; i++ ) 

	xor	eax, eax
	cmp	DWORD PTR _web+616, eax
	jle	SHORT $LN91@relaxed_el@4
	mov	edx, DWORD PTR tv3591[ebp]
	fld	QWORD PTR tv1668[ebp]
$LN89@relaxed_el@4:

; 2122 :      { f_info->grad[a+1][i] = weight*area*dstuff[a][i];

	fld	QWORD PTR [edx]
	mov	ecx, DWORD PTR [edi+1336]
	mov	ecx, DWORD PTR [ecx+ebx*4+4]
	fmul	ST(0), ST(1)
	add	edx, 8
	fst	QWORD PTR [ecx+eax*8]

; 2123 :        f_info->grad[0][i] -= weight*area*dstuff[a][i];

	mov	ecx, DWORD PTR [edi+1336]
	mov	ecx, DWORD PTR [ecx]
	fsubr	QWORD PTR [ecx+eax*8]
	lea	ecx, DWORD PTR [ecx+eax*8]
	inc	eax
	fstp	QWORD PTR [ecx]
	cmp	eax, DWORD PTR _web+616
	jl	SHORT $LN89@relaxed_el@4

; 2121 :      for ( i = 0 ; i < SDIM  ; i++ ) 

	mov	esi, DWORD PTR _web+620
	fstp	ST(0)
$LN91@relaxed_el@4:

; 2116 :      }
; 2117 :   }
; 2118 : 
; 2119 :   /* grand finale for gradient */
; 2120 :   for ( a = 0 ; a < web.dimension ; a++ )

	add	DWORD PTR tv3591[ebp], 48		; 00000030H
	inc	ebx
	cmp	ebx, esi
	jl	SHORT $LN92@relaxed_el@4
$LN90@relaxed_el@4:

; 2124 :      }
; 2125 :  
; 2126 :   if ( mode == METHOD_GRADIENT ) return energy;

	cmp	DWORD PTR _mode$[ebp], 4321		; 000010e1H
	je	$LN500@relaxed_el@4

; 2127 : 
; 2128 :   /* hessian */
; 2129 : 
; 2130 :   /* calculate ddFdv */ 
; 2131 :   for ( a = 0 ; a < web.dimension ; a++ )

	xor	ebx, ebx
	test	esi, esi
	jle	$LN83@relaxed_el@4
	fld1
	lea	ecx, DWORD PTR _ddFdv$[ebp]
	mov	DWORD PTR tv3843[ebp], ecx
$LN85@relaxed_el@4:

; 2132 :     for ( b = 0 ; b < web.dimension ; b++ )

	xor	edi, edi
	mov	DWORD PTR tv3796[ebp], ecx
$LN82@relaxed_el@4:

; 2133 :       for ( m = 0 ; m < web.dimension ; m++ )

	xor	edx, edx
	mov	DWORD PTR tv3707[ebp], ecx
$LN79@relaxed_el@4:

; 2134 :         for ( n = 0 ; n < web.dimension ; n++ )

	xor	eax, eax
$LN76@relaxed_el@4:

; 2135 :         { ddFdv[a][b][m][n] =
; 2136 :                  (a==m && b==n ? 1.0 : 0.0) + (a==n && b==m ? 1.0 : 0.0);

	cmp	ebx, edx
	jne	$LN160@relaxed_el@4
	cmp	edi, eax
	jne	$LN160@relaxed_el@4
	fld	ST(0)
	jmp	$LN161@relaxed_el@4
$LN342@relaxed_el@4:

; 2104 :      }
; 2105 :   }
; 2106 :   else /* stressed in both directions */
; 2107 :   { 
; 2108 :     if ( part & TWO_STRESS )

	test	BYTE PTR _part$[ebp], 2
	fstp	ST(4)
	fstp	ST(1)
	fstp	ST(3)
	fstp	ST(0)
	je	$LN261@relaxed_el@4

; 2109 :     for ( j = 0 ; j < web.dimension  ; j++ )

	test	esi, esi
	jle	$LN261@relaxed_el@4
	xor	edx, edx
	mov	edi, esi
$LN98@relaxed_el@4:

; 2110 :      for ( i = 0 ; i < SDIM  ; i++ )

	cmp	DWORD PTR _web+616, 0
	jle	$LN97@relaxed_el@4
	fld	QWORD PTR _c12$[ebp]
	mov	ecx, DWORD PTR _web+616
	fmul	ST(0), ST(1)
	mov	eax, edx
	fld	QWORD PTR _c11$[ebp]
	fmul	ST(0), ST(2)
	fld	QWORD PTR _c21$[ebp]
	fmul	ST(0), ST(3)
	fld	QWORD PTR _c22$[ebp]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR tv1790[ebp]
	fld	QWORD PTR _coeff2$[ebp]
	fmul	ST(0), ST(4)
	fmul	QWORD PTR tv1632[ebp]
$LN267@relaxed_el@4:

; 2111 :      { dstuff[j][i] = (coeff1*(2*c11*dCdv[0][0][j][i]  
; 2112 :                                  + 2*c12*dCdv[1][0][j][i]
; 2113 :                                  + 2*c21*dCdv[0][1][j][i]
; 2114 :                                  + 2*c22*dCdv[1][1][j][i]) 
; 2115 :                   + 2*coeff2*(c11+c22)*(dCdv[0][0][j][i] +dCdv[1][1][j][i])); 

	fld	QWORD PTR _dCdv$[ebp+eax+288]
	add	eax, 8
	dec	ecx
	fmul	ST(0), ST(4)
	fld	ST(3)
	fmul	QWORD PTR _dCdv$[ebp+eax-8]
	faddp	ST(1), ST(0)
	fld	ST(2)
	fmul	QWORD PTR _dCdv$[ebp+eax+136]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv1790[ebp]
	fmul	QWORD PTR _dCdv$[ebp+eax+424]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR _coeff1$[ebp]
	fld	QWORD PTR _dCdv$[ebp+eax-8]
	fadd	QWORD PTR _dCdv$[ebp+eax+424]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _dstuff$[ebp+eax-8]
	jne	SHORT $LN267@relaxed_el@4

; 2110 :      for ( i = 0 ; i < SDIM  ; i++ )

	fstp	ST(3)
	fstp	ST(1)
	fstp	ST(0)
	fstp	ST(0)
$LN97@relaxed_el@4:

; 2109 :     for ( j = 0 ; j < web.dimension  ; j++ )

	add	edx, 48					; 00000030H
	dec	edi
	jne	$LN98@relaxed_el@4
	jmp	$LN261@relaxed_el@4
$LN160@relaxed_el@4:

; 2135 :         { ddFdv[a][b][m][n] =
; 2136 :                  (a==m && b==n ? 1.0 : 0.0) + (a==n && b==m ? 1.0 : 0.0);

	fld	ST(2)
$LN161@relaxed_el@4:
	cmp	ebx, eax
	jne	SHORT $LN162@relaxed_el@4
	cmp	edi, edx
	jne	SHORT $LN162@relaxed_el@4
	fld	ST(1)
	jmp	SHORT $LN163@relaxed_el@4
$LN162@relaxed_el@4:
	fld	ST(3)
$LN163@relaxed_el@4:
	faddp	ST(1), ST(0)
	inc	eax
	add	ecx, 8
	fstp	QWORD PTR [ecx-8]
	cmp	eax, esi
	jl	$LN76@relaxed_el@4

; 2133 :       for ( m = 0 ; m < web.dimension ; m++ )

	mov	ecx, DWORD PTR tv3707[ebp]
	inc	edx
	add	ecx, 16					; 00000010H
	mov	DWORD PTR tv3707[ebp], ecx
	cmp	edx, esi
	jl	$LN79@relaxed_el@4

; 2132 :     for ( b = 0 ; b < web.dimension ; b++ )

	mov	ecx, DWORD PTR tv3796[ebp]
	inc	edi
	add	ecx, 32					; 00000020H
	mov	DWORD PTR tv3796[ebp], ecx
	cmp	edi, esi
	jl	$LN82@relaxed_el@4

; 2127 : 
; 2128 :   /* hessian */
; 2129 : 
; 2130 :   /* calculate ddFdv */ 
; 2131 :   for ( a = 0 ; a < web.dimension ; a++ )

	mov	ecx, DWORD PTR tv3843[ebp]
	inc	ebx
	add	ecx, 64					; 00000040H
	mov	DWORD PTR tv3843[ebp], ecx
	cmp	ebx, esi
	jl	$LN85@relaxed_el@4

; 2132 :     for ( b = 0 ; b < web.dimension ; b++ )

	fstp	ST(0)
$LN83@relaxed_el@4:

; 2137 :         }
; 2138 : 
; 2139 :   /* calculate ddCdv */
; 2140 :   for ( i = 0 ; i < SDIM  ; i++ )

	xor	ebx, ebx
	mov	DWORD PTR _i$[ebp], ebx
	cmp	DWORD PTR _web+616, ebx
	jle	$LN71@relaxed_el@4
	mov	DWORD PTR tv4870[ebp], ebx
$LN73@relaxed_el@4:

; 2141 :     for ( j = 0 ; j < SDIM  ; j++ )

	xor	edi, edi
	mov	DWORD PTR _j$[ebp], edi
$LN278@relaxed_el@4:

; 2142 :      for ( a = 0 ; a < web.dimension ; a++ )

	mov	DWORD PTR _a$[ebp], 0
	test	esi, esi
	jle	$LN69@relaxed_el@4
	mov	edx, DWORD PTR tv4870[ebp]
	add	edx, edi
	lea	eax, DWORD PTR _ddCdv$[ebp+edx*8]
	mov	DWORD PTR tv4785[ebp], eax
$LN268@relaxed_el@4:

; 2143 :         for ( b = 0 ; b < web.dimension ; b++ )

	mov	edx, DWORD PTR tv4785[ebp]
	lea	ecx, DWORD PTR _Q$[ebp]
	mov	DWORD PTR tv4505[ebp], ecx
	mov	DWORD PTR tv4645[ebp], edx
	mov	DWORD PTR tv4638[ebp], esi
$LN269@relaxed_el@4:

; 2144 :         { 
; 2145 :           for ( m = 0 ; m < web.dimension ; m++ )

	mov	eax, DWORD PTR tv4645[ebp]
	mov	DWORD PTR _m$[ebp], 0
	mov	DWORD PTR tv4401[ebp], eax
$LN270@relaxed_el@4:

; 2146 :              for ( n = 0 ; n < web.dimension ; n++ )

	mov	ecx, DWORD PTR tv4401[ebp]
	xor	edx, edx
	mov	DWORD PTR tv4165[ebp], ecx
$LN271@relaxed_el@4:

; 2147 :              { REAL sum = 0.0;

	mov	ecx, DWORD PTR tv4505[ebp]
	fld	ST(1)

; 2148 :                 for ( c = 0 ; c < web.dimension ; c++ )

	xor	eax, eax
$LN55@relaxed_el@4:

; 2149 :                   sum += ( i==j ? ddFdv[a][c][m][n]*Q[c][b] : 0.0 );

	cmp	ebx, edi
	jne	SHORT $LN164@relaxed_el@4
	mov	edi, DWORD PTR _a$[ebp]
	mov	ebx, DWORD PTR _m$[ebp]
	lea	edi, DWORD PTR [eax+edi*2]
	lea	edi, DWORD PTR [ebx+edi*2]
	mov	ebx, DWORD PTR _i$[ebp]
	lea	edi, DWORD PTR [edx+edi*2]
	fld	QWORD PTR _ddFdv$[ebp+edi*8]
	mov	edi, DWORD PTR _j$[ebp]
	fmul	QWORD PTR [ecx]
	jmp	SHORT $LN165@relaxed_el@4
$LN164@relaxed_el@4:
	fld	ST(2)
$LN165@relaxed_el@4:

; 2148 :                 for ( c = 0 ; c < web.dimension ; c++ )

	inc	eax

; 2149 :                   sum += ( i==j ? ddFdv[a][c][m][n]*Q[c][b] : 0.0 );

	faddp	ST(1), ST(0)
	add	ecx, 16					; 00000010H
	cmp	eax, esi
	jl	SHORT $LN55@relaxed_el@4

; 2150 :                 ddCdv[a][b][m][n][i][j] = sum;

	mov	eax, DWORD PTR tv4165[ebp]
	fstp	QWORD PTR [eax]
	inc	edx
	add	eax, 288				; 00000120H
	mov	DWORD PTR tv4165[ebp], eax
	cmp	edx, esi
	jl	SHORT $LN271@relaxed_el@4

; 2144 :         { 
; 2145 :           for ( m = 0 ; m < web.dimension ; m++ )

	mov	eax, DWORD PTR _m$[ebp]
	add	DWORD PTR tv4401[ebp], 864		; 00000360H
	inc	eax
	mov	DWORD PTR _m$[ebp], eax
	cmp	eax, esi
	jl	$LN270@relaxed_el@4

; 2143 :         for ( b = 0 ; b < web.dimension ; b++ )

	add	DWORD PTR tv4645[ebp], 2592		; 00000a20H
	add	DWORD PTR tv4505[ebp], 8
	dec	DWORD PTR tv4638[ebp]
	jne	$LN269@relaxed_el@4

; 2142 :      for ( a = 0 ; a < web.dimension ; a++ )

	mov	eax, DWORD PTR _a$[ebp]
	add	DWORD PTR tv4785[ebp], 5184		; 00001440H
	inc	eax
	mov	DWORD PTR _a$[ebp], eax
	cmp	eax, esi
	jl	$LN268@relaxed_el@4
$LN69@relaxed_el@4:

; 2141 :     for ( j = 0 ; j < SDIM  ; j++ )

	inc	edi
	mov	DWORD PTR _j$[ebp], edi
	cmp	edi, DWORD PTR _web+616
	jl	$LN278@relaxed_el@4

; 2137 :         }
; 2138 : 
; 2139 :   /* calculate ddCdv */
; 2140 :   for ( i = 0 ; i < SDIM  ; i++ )

	add	DWORD PTR tv4870[ebp], 6
	inc	ebx
	mov	DWORD PTR _i$[ebp], ebx
	cmp	ebx, DWORD PTR _web+616
	jl	$LN73@relaxed_el@4
$LN71@relaxed_el@4:

; 2151 :              }
; 2152 :   }
; 2153 :   /* calculate ddstuff */
; 2154 : 
; 2155 :   for ( i = 0 ; i < SDIM  ; i++ )

	mov	eax, DWORD PTR _web+616
	test	eax, eax
	jle	SHORT $LN50@relaxed_el@4
	mov	DWORD PTR tv5254[ebp], 0
	mov	DWORD PTR tv5231[ebp], eax
$LN277@relaxed_el@4:

; 2156 :    for ( j = 0 ; j < SDIM  ; j++ )

	xor	ebx, ebx
$LN49@relaxed_el@4:

; 2157 :     for ( a = 0 ; a < web.dimension ; a++ )

	test	esi, esi
	jle	SHORT $LN48@relaxed_el@4
	mov	edx, DWORD PTR tv5254[ebp]
	add	edx, ebx
	lea	edx, DWORD PTR _ddstuff$[ebp+edx*8]
	mov	edi, esi
$LN46@relaxed_el@4:

; 2158 :       for ( b = 0 ; b < web.dimension ; b++ )

	mov	eax, edx
	mov	ecx, esi
$LN43@relaxed_el@4:

; 2159 :        ddstuff[a][b][i][j] = 0.0;

	fxch	ST(1)
	add	eax, 288				; 00000120H
	dec	ecx
	fst	QWORD PTR [eax-288]
	fxch	ST(1)
	jne	SHORT $LN43@relaxed_el@4

; 2157 :     for ( a = 0 ; a < web.dimension ; a++ )

	add	edx, 864				; 00000360H
	dec	edi
	jne	SHORT $LN46@relaxed_el@4
$LN48@relaxed_el@4:

; 2156 :    for ( j = 0 ; j < SDIM  ; j++ )

	inc	ebx
	cmp	ebx, DWORD PTR _web+616
	jl	SHORT $LN49@relaxed_el@4

; 2151 :              }
; 2152 :   }
; 2153 :   /* calculate ddstuff */
; 2154 : 
; 2155 :   for ( i = 0 ; i < SDIM  ; i++ )

	add	DWORD PTR tv5254[ebp], 6
	dec	DWORD PTR tv5231[ebp]
	jne	SHORT $LN277@relaxed_el@4
$LN50@relaxed_el@4:

; 2160 : 
; 2161 :   if ( eps2 + poisson*eps1 <= 0.0 )

	fxch	ST(1)
	fcomp	QWORD PTR tv1648[ebp]
	fnstsw	ax
	test	ah, 1
	jne	$LN40@relaxed_el@4

; 2162 :   { /* relaxed in one dimension */
; 2163 :     if ( part & ONE_STRESS )

	test	BYTE PTR _part$[ebp], 1
	fstp	ST(0)
	je	$LN22@relaxed_el@4

; 2164 :     for ( i = 0 ; i < SDIM  ; i++ )

	cmp	DWORD PTR _web+616, 0
	jle	$LN22@relaxed_el@4
	mov	ecx, DWORD PTR _web+616
	lea	eax, DWORD PTR _dCdv$[ebp]
	mov	DWORD PTR tv7344[ebp], 0
	mov	DWORD PTR tv7358[ebp], eax
	mov	DWORD PTR tv7379[ebp], ecx
	npad	13
$LL38@relaxed_el@4:

; 2165 :      for ( j = 0 ; j < SDIM  ; j++ )

	lea	edx, DWORD PTR _dCdv$[ebp+432]
	mov	DWORD PTR _j$[ebp], 0
	mov	DWORD PTR tv7336[ebp], edx
$LL35@relaxed_el@4:

; 2166 :       for ( a = 0 ; a < web.dimension ; a++ )

	test	esi, esi
	jle	$LN34@relaxed_el@4

; 2174 :           dDetCa = c11*dCdv[1][1][a][i] + dCdv[0][0][a][i]*c22
; 2175 :                        - c12*dCdv[1][0][a][i] - c21*dCdv[0][1][a][i];
; 2176 :           dDetCb = c11*dCdv[1][1][b][j] + dCdv[0][0][b][j]*c22
; 2177 :                        - c12*dCdv[1][0][b][j] - c21*dCdv[0][1][b][j];
; 2178 : 
; 2179 :           disc = TrC*TrC - 4*DetC;

	fld	QWORD PTR tv1638[ebp]
	fst	QWORD PTR _disc$90451[ebp]
	call	__CIsqrt

; 2183 : 
; 2184 :           deps1a = (dTrCa + 0.5/sqrt(disc)*ddisca)/2;
; 2185 :           deps1b = (dTrCb + 0.5/sqrt(disc)*ddiscb)/2;
; 2186 : 
; 2187 :           dddisc = 2*dTrCa*dTrCb +
; 2188 :                  + 2*TrC*(ddCdv[0][0][a][b][i][j]+ddCdv[1][1][a][b][i][j])
; 2189 : 
; 2190 :                  - 4*(dCdv[0][0][b][j]*dCdv[1][1][a][i] + dCdv[0][0][a][i]*dCdv[1][1][b][j]
; 2191 :                  - dCdv[0][1][b][j]*dCdv[1][0][a][i] - dCdv[1][0][b][j]*dCdv[0][1][a][i])
; 2192 : 
; 2193 :                  - 4*(c11*ddCdv[1][1][a][b][i][j] + ddCdv[0][0][a][b][i][j]*c22
; 2194 :                  - c12*ddCdv[1][0][a][b][i][j] - c21*ddCdv[0][1][a][b][i][j]);
; 2195 : 
; 2196 :           ddeps = 0.5*(ddCdv[0][0][a][b][i][j]+ddCdv[1][1][a][b][i][j]
; 2197 :                     -.25/sqrt(disc)/disc*ddisca*ddiscb + 0.5/sqrt(disc)*dddisc);

	fld	QWORD PTR __real@3fd0000000000000
	mov	ebx, DWORD PTR tv7344[ebp]
	fdiv	ST(0), ST(1)
	add	ebx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR tv7358[ebp]
	add	ebx, ebx
	add	ebx, ebx
	add	ebx, ebx
	mov	DWORD PTR tv7245[ebp], esi
	fdiv	QWORD PTR _disc$90451[ebp]
	fstp	QWORD PTR tv1932[ebp]
	fld	QWORD PTR _TrC$[ebp]
	fadd	ST(0), ST(0)
	fst	QWORD PTR tv1750[ebp]
	fld	QWORD PTR __real@3fe0000000000000
	fdivrp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv1936[ebp]
	fld	QWORD PTR __real@4010000000000000
	fld	QWORD PTR _c21$[ebp]
	fld	QWORD PTR _c11$[ebp]
	jmp	SHORT $LN32@relaxed_el@4
$LN262@relaxed_el@4:

; 2166 :       for ( a = 0 ; a < web.dimension ; a++ )

	fld	QWORD PTR _c11$[ebp]
	fld	QWORD PTR tv1750[ebp]
	fxch	ST(4)
	fxch	ST(3)
	fxch	ST(1)
$LN32@relaxed_el@4:
	fld	QWORD PTR [ecx+432]

; 2167 :         for ( b = 0 ; b < web.dimension ; b++ )

	mov	eax, DWORD PTR tv7336[ebp]
	fadd	QWORD PTR [ecx]
	mov	edx, ebx
	mov	edi, esi

; 2168 :         { REAL deps1a,deps1b,disc,ddisca,ddiscb,dddisc,ddeps;
; 2169 :           REAL dTrCa,dTrCb,dDetCa,dDetCb;
; 2170 : 
; 2171 : 
; 2172 :           dTrCa = dCdv[0][0][a][i]+dCdv[1][1][a][i];

	fst	QWORD PTR _dTrCa$90456[ebp]
	fmul	ST(0), ST(5)
	fld	QWORD PTR [ecx+432]
	fmul	ST(0), ST(2)
	fld	QWORD PTR _c22$[ebp]
	fmul	QWORD PTR [ecx]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx+288]
	fmul	QWORD PTR _c12$[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ecx+144]
	fmulp	ST(4), ST(0)
	fsubrp	ST(3), ST(0)
	fxch	ST(2)
	fmul	ST(0), ST(3)
	fsubp	ST(2), ST(0)

; 2180 :       
; 2181 :           ddisca = 2*TrC*dTrCa - 4*dDetCa;

	fld	QWORD PTR tv1932[ebp]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv1933[ebp]
	fld	QWORD PTR _dTrCa$90456[ebp]
	fld	ST(0)
	fadd	ST(0), ST(1)
	fstp	QWORD PTR tv1939[ebp]
	fxch	ST(4)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	QWORD PTR tv1983[ebp]
	jmp	SHORT $LN29@relaxed_el@4
$LL481@relaxed_el@4:

; 2167 :         for ( b = 0 ; b < web.dimension ; b++ )

	fstp	ST(2)
	fstp	ST(0)
	fld	QWORD PTR _c11$[ebp]
	fld	QWORD PTR tv1750[ebp]
	fxch	ST(2)
$LN29@relaxed_el@4:

; 2173 :           dTrCb = dCdv[0][0][b][j]+dCdv[1][1][b][j];

	fld	QWORD PTR [eax]
	add	edx, 288				; 00000120H
	fadd	QWORD PTR [eax-432]
	add	eax, 48					; 00000030H
	dec	edi

; 2182 :           ddiscb = 2*TrC*dTrCb - 4*dDetCb;

	fld	ST(3)
	fmul	ST(0), ST(1)
	fld	QWORD PTR [eax-48]
	fmul	ST(0), ST(4)
	fld	QWORD PTR [eax-480]
	fmul	QWORD PTR _c22$[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax-192]
	fmul	QWORD PTR _c12$[ebp]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [eax-336]
	fmul	QWORD PTR _c21$[ebp]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)

; 2183 : 
; 2184 :           deps1a = (dTrCa + 0.5/sqrt(disc)*ddisca)/2;
; 2185 :           deps1b = (dTrCb + 0.5/sqrt(disc)*ddiscb)/2;
; 2186 : 
; 2187 :           dddisc = 2*dTrCa*dTrCb +
; 2188 :                  + 2*TrC*(ddCdv[0][0][a][b][i][j]+ddCdv[1][1][a][b][i][j])
; 2189 : 
; 2190 :                  - 4*(dCdv[0][0][b][j]*dCdv[1][1][a][i] + dCdv[0][0][a][i]*dCdv[1][1][b][j]
; 2191 :                  - dCdv[0][1][b][j]*dCdv[1][0][a][i] - dCdv[1][0][b][j]*dCdv[0][1][a][i])
; 2192 : 
; 2193 :                  - 4*(c11*ddCdv[1][1][a][b][i][j] + ddCdv[0][0][a][b][i][j]*c22
; 2194 :                  - c12*ddCdv[1][0][a][b][i][j] - c21*ddCdv[0][1][a][b][i][j]);
; 2195 : 
; 2196 :           ddeps = 0.5*(ddCdv[0][0][a][b][i][j]+ddCdv[1][1][a][b][i][j]
; 2197 :                     -.25/sqrt(disc)/disc*ddisca*ddiscb + 0.5/sqrt(disc)*dddisc);

	fld	QWORD PTR _ddCdv$[ebp+edx-288]
	fadd	QWORD PTR _ddCdv$[ebp+edx+7488]
	fmul	ST(5), ST(0)
	fld	QWORD PTR tv1939[ebp]
	fmul	ST(0), ST(3)
	faddp	ST(6), ST(0)
	fld	QWORD PTR [eax-48]
	fmul	QWORD PTR [ecx]
	fld	QWORD PTR [ecx+432]
	fmul	QWORD PTR [eax-480]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx+288]
	fmul	QWORD PTR [eax-336]
	fsubp	ST(1), ST(0)
	fld	QWORD PTR [ecx+144]
	fmul	QWORD PTR [eax-192]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fsubp	ST(6), ST(0)
	fld	QWORD PTR _ddCdv$[ebp+edx-288]
	fmul	QWORD PTR _c22$[ebp]
	fld	QWORD PTR _ddCdv$[ebp+edx+7488]
	fmulp	ST(6), ST(0)
	faddp	ST(5), ST(0)
	fld	QWORD PTR _ddCdv$[ebp+edx+4896]
	fmul	QWORD PTR _c12$[ebp]
	fsubp	ST(5), ST(0)
	fld	QWORD PTR _ddCdv$[ebp+edx+2304]
	fld	QWORD PTR _c21$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(6)
	fsubrp	ST(1), ST(0)
	fmul	ST(0), ST(4)
	fsubp	ST(6), ST(0)
	fld	QWORD PTR tv1936[ebp]
	fmul	ST(6), ST(0)
	fld	QWORD PTR tv1933[ebp]
	fmul	ST(0), ST(3)
	fsubp	ST(2), ST(0)
	fxch	ST(6)
	faddp	ST(1), ST(0)
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(1), ST(0)

; 2198 : 
; 2199 :           ddstuff[a][b][i][j] = (deps1a*deps1b + eps1*ddeps)/4; 

	fxch	ST(1)
	fmul	QWORD PTR _eps1$[ebp]
	fld	ST(6)
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	faddp	ST(3), ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR tv1983[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __real@3fd0000000000000
	fstp	QWORD PTR _ddstuff$[ebp+edx-288]
	jne	$LL481@relaxed_el@4

; 2166 :       for ( a = 0 ; a < web.dimension ; a++ )

	add	ecx, 48					; 00000030H
	add	ebx, 864				; 00000360H
	dec	DWORD PTR tv7245[ebp]
	jne	$LN262@relaxed_el@4
	fstp	ST(0)
	fstp	ST(1)
	fstp	ST(0)
$LN34@relaxed_el@4:

; 2165 :      for ( j = 0 ; j < SDIM  ; j++ )

	mov	eax, DWORD PTR _j$[ebp]
	add	DWORD PTR tv7336[ebp], 8
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, DWORD PTR _web+616
	jl	$LL35@relaxed_el@4

; 2164 :     for ( i = 0 ; i < SDIM  ; i++ )

	add	DWORD PTR tv7358[ebp], 8
	add	DWORD PTR tv7344[ebp], 6
	dec	DWORD PTR tv7379[ebp]
	jne	$LL38@relaxed_el@4

; 2200 :    
; 2201 : 
; 2202 :         }
; 2203 :   }
; 2204 :   else

	jmp	$LN22@relaxed_el@4
$LN40@relaxed_el@4:

; 2205 :   { 
; 2206 :     if ( part & TWO_STRESS )

	test	BYTE PTR _part$[ebp], 2
	je	$LN463@relaxed_el@4

; 2207 :     for ( i = 0 ; i < SDIM  ; i++ )

	cmp	DWORD PTR _web+616, 0
	jle	$LN463@relaxed_el@4
	mov	ecx, DWORD PTR _web+616
	lea	eax, DWORD PTR _dCdv$[ebp+432]
	mov	DWORD PTR tv9119[ebp], 0
	mov	DWORD PTR tv9165[ebp], eax
	mov	DWORD PTR tv9150[ebp], ecx
$LN24@relaxed_el@4:

; 2208 :      for ( j = 0 ; j < SDIM  ; j++ )

	lea	edx, DWORD PTR _dCdv$[ebp+432]
	mov	DWORD PTR _j$[ebp], 0
	mov	DWORD PTR tv9111[ebp], edx
$LN21@relaxed_el@4:

; 2209 :       for ( a = 0 ; a < web.dimension ; a++ )

	test	esi, esi
	jle	$LN20@relaxed_el@4
	fld	QWORD PTR _c12$[ebp]
	mov	ebx, DWORD PTR tv9119[ebp]
	fmul	ST(0), ST(1)
	add	ebx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR tv9165[ebp]
	add	ebx, ebx
	fstp	QWORD PTR tv1776[ebp]
	add	ebx, ebx
	fld	QWORD PTR _c11$[ebp]
	add	ebx, ebx
	fmul	ST(0), ST(1)
	mov	DWORD PTR tv8984[ebp], esi
	fstp	QWORD PTR tv1780[ebp]
	fld	QWORD PTR _c21$[ebp]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv1785[ebp]
	fld	QWORD PTR _c22$[ebp]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv1790[ebp]
	fld	QWORD PTR _coeff2$[ebp]
	fmul	ST(0), ST(1)
	fst	QWORD PTR tv1799[ebp]
	fld	QWORD PTR tv1632[ebp]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv1800[ebp]
	jmp	SHORT $LN18@relaxed_el@4
	npad	3
$LL264@relaxed_el@4:
	fld	QWORD PTR tv1799[ebp]
$LN18@relaxed_el@4:
	fld	QWORD PTR [edx-288]

; 2210 :         for ( b = 0 ; b < web.dimension ; b++ )

	mov	eax, DWORD PTR tv9111[ebp]
	fmul	ST(0), ST(2)
	mov	ecx, ebx
	fld	QWORD PTR [edx-432]
	mov	edi, esi
	fmul	ST(0), ST(3)
	fld	QWORD PTR [edx-144]
	fmul	ST(0), ST(4)
	fld	QWORD PTR [edx]
	fmulp	ST(5), ST(0)
	fld	QWORD PTR [edx-432]
	fadd	QWORD PTR [edx]
	fmulp	ST(4), ST(0)
	fxch	ST(3)
	fstp	QWORD PTR tv9066[ebp]
$LN265@relaxed_el@4:

; 2211 :         { REAL term; 
; 2212 :           term = (coeff1*( 2*c11*ddCdv[0][0][a][b][i][j]
; 2213 :                          + 2*c12*ddCdv[1][0][a][b][i][j]
; 2214 :                          + 2*c21*ddCdv[0][1][a][b][i][j]
; 2215 :                          + 2*c22*ddCdv[1][1][a][b][i][j]) 
; 2216 :                  + 2*coeff2*(c11+c22)*(ddCdv[0][0][a][b][i][j]+ddCdv[1][1][a][b][i][j]))
; 2217 : 
; 2218 :                  + (coeff1*(2*dCdv[0][0][a][i]*dCdv[0][0][b][j] 
; 2219 :                           + 2*dCdv[0][1][a][i]*dCdv[1][0][b][j]
; 2220 :                           + 2*dCdv[1][0][a][i]*dCdv[0][1][b][j]
; 2221 :                           + 2*dCdv[1][1][a][i]*dCdv[1][1][b][j]
; 2222 :                          ) 
; 2223 :                   + 2*coeff2*(dCdv[0][0][a][i]+dCdv[1][1][a][i])
; 2224 :                                      *(dCdv[0][0][b][j] +dCdv[1][1][b][j]));

	fld	QWORD PTR [eax-144]
	add	ecx, 288				; 00000120H
	fmul	ST(0), ST(2)
	add	eax, 48					; 00000030H
	dec	edi
	fld	ST(1)
	fmul	QWORD PTR [eax-480]
	faddp	ST(1), ST(0)
	fld	ST(3)
	fmul	QWORD PTR [eax-336]
	faddp	ST(1), ST(0)
	fld	ST(4)
	fmul	QWORD PTR [eax-48]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR _coeff1$[ebp]
	fld	QWORD PTR [eax-48]
	fadd	QWORD PTR [eax-480]
	fmul	QWORD PTR tv9066[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddCdv$[ebp+ecx+4896]
	fmul	QWORD PTR tv1776[ebp]
	fld	QWORD PTR tv1780[ebp]
	fmul	QWORD PTR _ddCdv$[ebp+ecx-288]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddCdv$[ebp+ecx+2304]
	fmul	QWORD PTR tv1785[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _ddCdv$[ebp+ecx+7488]
	fmul	QWORD PTR tv1790[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR _coeff1$[ebp]
	fld	QWORD PTR _ddCdv$[ebp+ecx+7488]
	fadd	QWORD PTR _ddCdv$[ebp+ecx-288]
	fmul	QWORD PTR tv1800[ebp]
	faddp	ST(1), ST(0)
	faddp	ST(1), ST(0)

; 2225 :             ddstuff[a][b][i][j] = term;

	fstp	QWORD PTR _ddstuff$[ebp+ecx-288]
	jne	$LN265@relaxed_el@4

; 2209 :       for ( a = 0 ; a < web.dimension ; a++ )

	fstp	ST(1)
	add	edx, 48					; 00000030H

; 2210 :         for ( b = 0 ; b < web.dimension ; b++ )

	fstp	ST(0)
	add	ebx, 864				; 00000360H
	dec	DWORD PTR tv8984[ebp]
	fstp	ST(0)
	fstp	ST(0)
	fld	QWORD PTR __real@4000000000000000
	jne	$LL264@relaxed_el@4
$LN20@relaxed_el@4:

; 2208 :      for ( j = 0 ; j < SDIM  ; j++ )

	mov	eax, DWORD PTR _j$[ebp]
	add	DWORD PTR tv9111[ebp], 8
	inc	eax
	mov	DWORD PTR _j$[ebp], eax
	cmp	eax, DWORD PTR _web+616
	jl	$LN21@relaxed_el@4

; 2207 :     for ( i = 0 ; i < SDIM  ; i++ )

	add	DWORD PTR tv9165[ebp], 8
	add	DWORD PTR tv9119[ebp], 6
	dec	DWORD PTR tv9150[ebp]
	jne	$LN24@relaxed_el@4
$LN463@relaxed_el@4:

; 2208 :      for ( j = 0 ; j < SDIM  ; j++ )

	fstp	ST(0)
$LN22@relaxed_el@4:

; 2226 :          }
; 2227 :   }
; 2228 : 
; 2229 :   /* big Hessian finale */
; 2230 :   for ( i = 0 ; i < SDIM  ; i++ )

	xor	edx, edx
	cmp	DWORD PTR _web+616, edx
	jle	$LN10@relaxed_el@4
	fld	QWORD PTR _area$[ebp]
	mov	DWORD PTR tv9707[ebp], edx
	fld	QWORD PTR _weight$[ebp]
$LN272@relaxed_el@4:

; 2231 :     for ( j = 0 ; j < SDIM  ; j++ )

	xor	ecx, ecx
	cmp	DWORD PTR _web+616, ecx
	jle	$LN11@relaxed_el@4
$LN9@relaxed_el@4:

; 2232 :      for ( a = 0 ; a < web.dimension ; a++ )

	xor	edi, edi
	test	esi, esi
	jle	$LN8@relaxed_el@4
	mov	eax, DWORD PTR tv9707[ebp]
	add	eax, ecx
	lea	eax, DWORD PTR _ddstuff$[ebp+eax*8]
	mov	DWORD PTR tv9605[ebp], eax
$LN6@relaxed_el@4:

; 2233 :         for ( b = 0 ; b < web.dimension ; b++ )

	xor	eax, eax
	test	esi, esi
	jle	$LN5@relaxed_el@4
	mov	ebx, DWORD PTR tv9605[ebp]
$LN3@relaxed_el@4:

; 2234 :         { REAL term;
; 2235 :           term = area*ddstuff[a][b][i][j];

	fld	QWORD PTR [ebx]

; 2236 :           term *= weight;
; 2237 :           f_info->hess[a+1][b+1][i][j] = term;

	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	esi, DWORD PTR [esi+1340]
	fmul	ST(0), ST(2)
	mov	esi, DWORD PTR [esi+edi*4+4]
	mov	esi, DWORD PTR [esi+eax*4+4]
	mov	esi, DWORD PTR [esi+edx*4]
	fmul	ST(0), ST(1)
	inc	eax
	add	ebx, 288				; 00000120H
	fst	QWORD PTR [esi+ecx*8]

; 2238 :           f_info->hess[a+1][0][i][j] -= term;

	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	esi, DWORD PTR [esi+1340]
	mov	esi, DWORD PTR [esi+edi*4+4]
	mov	esi, DWORD PTR [esi]
	mov	esi, DWORD PTR [esi+edx*4]
	fld	QWORD PTR [esi+ecx*8]
	lea	esi, DWORD PTR [esi+ecx*8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [esi]

; 2239 :           f_info->hess[0][b+1][i][j] -= term;

	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	esi, DWORD PTR [esi+1340]
	mov	esi, DWORD PTR [esi]
	mov	esi, DWORD PTR [esi+eax*4]
	mov	esi, DWORD PTR [esi+edx*4]
	fld	QWORD PTR [esi+ecx*8]
	lea	esi, DWORD PTR [esi+ecx*8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [esi]

; 2240 :           f_info->hess[0][0][i][j] += term;

	mov	esi, DWORD PTR _f_info$GSCopy$[ebp]
	mov	esi, DWORD PTR [esi+1340]
	mov	esi, DWORD PTR [esi]
	mov	esi, DWORD PTR [esi]
	mov	esi, DWORD PTR [esi+edx*4]
	fadd	QWORD PTR [esi+ecx*8]
	lea	esi, DWORD PTR [esi+ecx*8]
	fstp	QWORD PTR [esi]
	mov	esi, DWORD PTR _web+620
	cmp	eax, esi
	jl	$LN3@relaxed_el@4
$LN5@relaxed_el@4:

; 2232 :      for ( a = 0 ; a < web.dimension ; a++ )

	add	DWORD PTR tv9605[ebp], 864		; 00000360H
	inc	edi
	cmp	edi, esi
	jl	$LN6@relaxed_el@4
$LN8@relaxed_el@4:

; 2231 :     for ( j = 0 ; j < SDIM  ; j++ )

	inc	ecx
	cmp	ecx, DWORD PTR _web+616
	jl	$LN9@relaxed_el@4
$LN11@relaxed_el@4:

; 2226 :          }
; 2227 :   }
; 2228 : 
; 2229 :   /* big Hessian finale */
; 2230 :   for ( i = 0 ; i < SDIM  ; i++ )

	add	DWORD PTR tv9707[ebp], 6
	inc	edx
	cmp	edx, DWORD PTR _web+616
	jl	$LN272@relaxed_el@4
$LN500@relaxed_el@4:
	fstp	ST(1)
	fstp	ST(0)
$LN10@relaxed_el@4:

; 2241 :         }
; 2242 :   return energy;

	fld	QWORD PTR _energy$[ebp]
$LN152@relaxed_el@4:

; 2243 : } // end relaxed_elastic_A_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_relaxed_elastic_A_all ENDP
_TEXT	ENDS
PUBLIC	_relaxed_elastic_A_energy
; Function compile flags: /Ogtp
;	COMDAT _relaxed_elastic_A_energy
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_relaxed_elastic_A_energy PROC				; COMDAT

; 2256 : {

	push	ebp
	mov	ebp, esp

; 2257 :  return relaxed_elastic_A_all(f_info,METHOD_VALUE,ONE_STRESS|TWO_STRESS);

	mov	eax, DWORD PTR _f_info$[ebp]
	push	3
	push	1767					; 000006e7H
	push	eax
	call	_relaxed_elastic_A_all
	add	esp, 12					; 0000000cH

; 2258 : }

	pop	ebp
	ret	0
_relaxed_elastic_A_energy ENDP
_TEXT	ENDS
PUBLIC	_relaxed_elastic_A_gradient
; Function compile flags: /Ogtp
;	COMDAT _relaxed_elastic_A_gradient
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_relaxed_elastic_A_gradient PROC			; COMDAT

; 2273 : {

	push	ebp
	mov	ebp, esp

; 2274 :  return relaxed_elastic_A_all(f_info,METHOD_GRADIENT,ONE_STRESS|TWO_STRESS);

	mov	eax, DWORD PTR _f_info$[ebp]
	push	3
	push	4321					; 000010e1H
	push	eax
	call	_relaxed_elastic_A_all
	add	esp, 12					; 0000000cH

; 2275 : }

	pop	ebp
	ret	0
_relaxed_elastic_A_gradient ENDP
_TEXT	ENDS
PUBLIC	_relaxed_elastic_A_hessian
; Function compile flags: /Ogtp
;	COMDAT _relaxed_elastic_A_hessian
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_relaxed_elastic_A_hessian PROC				; COMDAT

; 2289 : {

	push	ebp
	mov	ebp, esp

; 2290 :  return relaxed_elastic_A_all(f_info,METHOD_HESSIAN,ONE_STRESS|TWO_STRESS);

	mov	eax, DWORD PTR _f_info$[ebp]
	push	3
	push	8763					; 0000223bH
	push	eax
	call	_relaxed_elastic_A_all
	add	esp, 12					; 0000000cH

; 2291 : }

	pop	ebp
	ret	0
_relaxed_elastic_A_hessian ENDP
_TEXT	ENDS
PUBLIC	_relaxed_elastic1_A_energy
; Function compile flags: /Ogtp
;	COMDAT _relaxed_elastic1_A_energy
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_relaxed_elastic1_A_energy PROC				; COMDAT

; 2296 : { return relaxed_elastic_A_all(f_info,METHOD_VALUE,ONE_STRESS); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _f_info$[ebp]
	push	1
	push	1767					; 000006e7H
	push	eax
	call	_relaxed_elastic_A_all
	add	esp, 12					; 0000000cH
	pop	ebp
	ret	0
_relaxed_elastic1_A_energy ENDP
_TEXT	ENDS
PUBLIC	_relaxed_elastic1_A_gradient
; Function compile flags: /Ogtp
;	COMDAT _relaxed_elastic1_A_gradient
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_relaxed_elastic1_A_gradient PROC			; COMDAT

; 2299 : { return relaxed_elastic_A_all(f_info,METHOD_GRADIENT,ONE_STRESS); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _f_info$[ebp]
	push	1
	push	4321					; 000010e1H
	push	eax
	call	_relaxed_elastic_A_all
	add	esp, 12					; 0000000cH
	pop	ebp
	ret	0
_relaxed_elastic1_A_gradient ENDP
_TEXT	ENDS
PUBLIC	_relaxed_elastic1_A_hessian
; Function compile flags: /Ogtp
;	COMDAT _relaxed_elastic1_A_hessian
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_relaxed_elastic1_A_hessian PROC			; COMDAT

; 2302 : { return relaxed_elastic_A_all(f_info,METHOD_HESSIAN,ONE_STRESS); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _f_info$[ebp]
	push	1
	push	8763					; 0000223bH
	push	eax
	call	_relaxed_elastic_A_all
	add	esp, 12					; 0000000cH
	pop	ebp
	ret	0
_relaxed_elastic1_A_hessian ENDP
_TEXT	ENDS
PUBLIC	_relaxed_elastic2_A_energy
; Function compile flags: /Ogtp
;	COMDAT _relaxed_elastic2_A_energy
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_relaxed_elastic2_A_energy PROC				; COMDAT

; 2305 : { return relaxed_elastic_A_all(f_info,METHOD_VALUE,TWO_STRESS); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _f_info$[ebp]
	push	2
	push	1767					; 000006e7H
	push	eax
	call	_relaxed_elastic_A_all
	add	esp, 12					; 0000000cH
	pop	ebp
	ret	0
_relaxed_elastic2_A_energy ENDP
_TEXT	ENDS
PUBLIC	_relaxed_elastic2_A_gradient
; Function compile flags: /Ogtp
;	COMDAT _relaxed_elastic2_A_gradient
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_relaxed_elastic2_A_gradient PROC			; COMDAT

; 2308 : { return relaxed_elastic_A_all(f_info,METHOD_GRADIENT,TWO_STRESS); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _f_info$[ebp]
	push	2
	push	4321					; 000010e1H
	push	eax
	call	_relaxed_elastic_A_all
	add	esp, 12					; 0000000cH
	pop	ebp
	ret	0
_relaxed_elastic2_A_gradient ENDP
_TEXT	ENDS
PUBLIC	_relaxed_elastic2_A_hessian
; Function compile flags: /Ogtp
;	COMDAT _relaxed_elastic2_A_hessian
_TEXT	SEGMENT
_f_info$ = 8						; size = 4
_relaxed_elastic2_A_hessian PROC			; COMDAT

; 2311 : { return relaxed_elastic_A_all(f_info,METHOD_HESSIAN,TWO_STRESS); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _f_info$[ebp]
	push	2
	push	8763					; 0000223bH
	push	eax
	call	_relaxed_elastic_A_all
	add	esp, 12					; 0000000cH
	pop	ebp
	ret	0
_relaxed_elastic2_A_hessian ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_dihedral_hooke_energy
; Function compile flags: /Ogtp
;	COMDAT _dihedral_hooke_energy
_TEXT	SEGMENT
_s1s2$ = -196						; size = 8
_s1t2$ = -188						; size = 8
_s1s1$ = -180						; size = 8
tv356 = -172						; size = 8
tv354 = -172						; size = 8
tv360 = -164						; size = 8
_s2s2$ = -164						; size = 8
tv358 = -156						; size = 8
_t2t2$ = -156						; size = 8
_t2$ = -148						; size = 48
_s2$ = -100						; size = 48
_s1$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_dihedral_hooke_energy PROC				; COMDAT

; 2332 : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _e_info$[ebp]

; 2333 :   REAL s1[MAXCOORD],s2[MAXCOORD],t2[MAXCOORD];
; 2334 :   REAL s1s1,s1s2,s1t2,s2s2,t2t2,s2t2;
; 2335 :   REAL a1,a2;
; 2336 :   REAL det;
; 2337 :   facetedge_id fe_s1,fe_s2,fe_t2;
; 2338 :   edge_id e_id = e_info->id;

	mov	eax, DWORD PTR [eax]

; 2339 :   REAL cos_th;    /* cosine of angle between facets */
; 2340 : 
; 2341 :   /* get edge vectors away from tail vertex */
; 2342 :   fe_s1 = get_edge_fe(e_id);

	mov	edx, DWORD PTR _web+124
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [edx+ecx*4]
	test	ecx, ecx
	je	SHORT $LN3@dihedral_h
$LN4@dihedral_h:
	mov	ecx, DWORD PTR [ecx+28]
	test	eax, 134217728				; 08000000H
	je	SHORT $LN3@dihedral_h
	xor	ecx, 134217728				; 08000000H
$LN3@dihedral_h:

; 2343 :   fe_s2 = get_prev_edge(get_next_facet(fe_s1));

	push	esi
	mov	esi, DWORD PTR _web+460
	push	edi
	mov	edi, ecx
	shr	edi, 27					; 0000001bH
	and	edi, 1
	je	SHORT $LN8@dihedral_h
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [edx+36]
	xor	eax, 134217728				; 08000000H
	jmp	SHORT $LN7@dihedral_h
$LN8@dihedral_h:
	mov	edx, ecx
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	mov	eax, DWORD PTR [edx+40]
$LN7@dihedral_h:
	test	eax, 134217728				; 08000000H
	je	SHORT $LN12@dihedral_h
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	esi, DWORD PTR [eax+32]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN11@dihedral_h
$LN12@dihedral_h:
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [esi+eax*4]
	mov	esi, DWORD PTR [eax+28]
$LN11@dihedral_h:

; 2344 :   fe_s2 = inverse_id(fe_s2);

	xor	esi, 134217728				; 08000000H

; 2345 :   fe_t2 = get_prev_edge(fe_s1);

	test	edi, edi
	je	SHORT $LN16@dihedral_h
	mov	edi, DWORD PTR [edx+32]
	xor	edi, 134217728				; 08000000H
	jmp	SHORT $LN15@dihedral_h
$LN16@dihedral_h:
	mov	edi, DWORD PTR [edx+28]
$LN15@dihedral_h:

; 2346 :   fe_t2 = inverse_id(fe_t2);
; 2347 :   get_fe_side(fe_s1,s1);

	and	ecx, 134217728				; 08000000H
	xor	ecx, DWORD PTR [edx+20]
	lea	eax, DWORD PTR _s1$[ebp]
	push	eax
	push	ecx
	xor	edi, 134217728				; 08000000H
	call	_get_edge_side

; 2348 :   get_fe_side(fe_s2,s2);

	mov	eax, DWORD PTR _web+460
	mov	edx, esi
	lea	ecx, DWORD PTR _s2$[ebp]
	push	ecx
	and	edx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [eax+edx*4]
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [ecx+20]
	push	esi
	call	_get_edge_side

; 2349 :   get_fe_side(fe_t2,t2);

	mov	ecx, DWORD PTR _web+460
	mov	eax, edi
	lea	edx, DWORD PTR _t2$[ebp]
	push	edx
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	and	edi, 134217728				; 08000000H
	xor	edi, DWORD PTR [edx+20]
	push	edi
	call	_get_edge_side

; 2350 : 
; 2351 :   s1s1 = SDIM_dot(s1,s1);

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _s1$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	fstp	QWORD PTR _s1s1$[ebp]

; 2352 :   s1s2 = SDIM_dot(s1,s2);

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _s2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _s1$[ebp]
	push	edx
	call	_dot
	fstp	QWORD PTR _s1s2$[ebp]

; 2353 :   s1t2 = SDIM_dot(s1,t2);

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _t2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _s1$[ebp]
	push	edx
	call	_dot
	fstp	QWORD PTR _s1t2$[ebp]

; 2354 :   t2t2 = SDIM_dot(t2,t2);

	mov	eax, DWORD PTR _web+616
	push	eax
	lea	ecx, DWORD PTR _t2$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	fstp	QWORD PTR _t2t2$[ebp]

; 2355 :   s2s2 = SDIM_dot(s2,s2);

	mov	eax, DWORD PTR _web+616
	add	esp, 72					; 00000048H
	push	eax
	lea	ecx, DWORD PTR _s2$[ebp]
	push	ecx
	mov	edx, ecx
	push	edx
	call	_dot
	fstp	QWORD PTR _s2s2$[ebp]

; 2356 :   s2t2 = SDIM_dot(s2,t2);

	mov	eax, DWORD PTR _web+616

; 2357 : 
; 2358 :   det = s1s1*t2t2 - s1t2*s1t2;
; 2359 :   a1 = sqrt(det);
; 2360 :   det = s1s1*s2s2 - s1s2*s1s2;
; 2361 :   a2 = sqrt(det);
; 2362 : 
; 2363 :   cos_th = (s1s2*s1t2 - s2t2*s1s1)/a1/a2;

	fld	QWORD PTR _s1t2$[ebp]
	fmul	QWORD PTR _s1s2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _t2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _s2$[ebp]
	fstp	QWORD PTR tv354[ebp]
	push	edx
	call	_dot
	fld	QWORD PTR _s1s1$[ebp]
	add	esp, 24					; 00000018H
	fmul	ST(1), ST(0)
	fld	QWORD PTR tv354[ebp]
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv356[ebp]
	fmul	QWORD PTR _t2t2$[ebp]
	fld	QWORD PTR _s1t2$[ebp]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	call	__CIsqrt
	fdivr	QWORD PTR tv356[ebp]
	fstp	QWORD PTR tv358[ebp]
	fld	QWORD PTR _s2s2$[ebp]
	fmul	QWORD PTR _s1s1$[ebp]
	fld	QWORD PTR _s1s2$[ebp]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)
	call	__CIsqrt
	fdivr	QWORD PTR tv358[ebp]

; 2364 : 
; 2365 :   return sqrt(s1s1)*(1 - cos_th);

	fld1
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR tv360[ebp]
	fld	QWORD PTR _s1s1$[ebp]
	call	__CIsqrt
	fmul	QWORD PTR tv360[ebp]

; 2366 : } // end dihedral_hooke_energy()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_dihedral_hooke_energy ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_dihedral_hooke_grad
; Function compile flags: /Ogtp
;	COMDAT _dihedral_hooke_grad
_TEXT	SEGMENT
tv677 = -604						; size = 8
tv727 = -596						; size = 8
tv697 = -588						; size = 8
tv717 = -580						; size = 8
tv687 = -572						; size = 8
tv703 = -564						; size = 8
_t2t2$ = -556						; size = 8
tv683 = -548						; size = 8
_s2s2$ = -540						; size = 8
tv757 = -532						; size = 8
tv704 = -532						; size = 8
tv723 = -524						; size = 8
_a1$ = -524						; size = 8
_cos_th$ = -516						; size = 8
_s2t2$ = -516						; size = 8
_s1t2$ = -508						; size = 8
_s1s1$ = -500						; size = 8
_s1s2$ = -492						; size = 8
_da1dt2$ = -484						; size = 48
_da2ds1$ = -436						; size = 48
_da1ds1$ = -388						; size = 48
_da2ds2$ = -340						; size = 48
_dcosdt2$ = -292					; size = 48
_dcosds2$ = -244					; size = 48
_dcosds1$ = -196					; size = 48
_s2$ = -148						; size = 48
_t2$ = -100						; size = 48
_s1$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_dihedral_hooke_grad PROC				; COMDAT

; 2378 : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 604				; 0000025cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2379 :   REAL s1[MAXCOORD],s2[MAXCOORD],t2[MAXCOORD];
; 2380 :   REAL s1s1,s1s2,s1t2,s2s2,t2t2,s2t2;
; 2381 :   REAL a1,a2;
; 2382 :   REAL det;
; 2383 :   facetedge_id fe_s1,fe_s2,fe_t2;
; 2384 :   edge_id e_id = e_info->id;
; 2385 :   REAL cos_th;    /* cosine of angle between facets */
; 2386 :   REAL dcosds1[MAXCOORD],dcosds2[MAXCOORD],dcosdt2[MAXCOORD];
; 2387 :   REAL da1ds1[MAXCOORD], da1dt2[MAXCOORD];
; 2388 :   REAL da2ds1[MAXCOORD], da2ds2[MAXCOORD];
; 2389 :   int i;
; 2390 : 
; 2391 :   /* get edge vectors away from tail vertex */
; 2392 :   fe_s1 = get_edge_fe(e_id);

	mov	edx, DWORD PTR _web+124
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _e_info$[ebp]
	mov	ecx, DWORD PTR [edi]
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]
	test	eax, eax
	je	SHORT $LN9@dihedral_h@2
$LN10@dihedral_h@2:
	mov	eax, DWORD PTR [eax+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN9@dihedral_h@2
	xor	eax, 134217728				; 08000000H
$LN9@dihedral_h@2:

; 2393 :   fe_s2 = get_prev_edge(get_next_facet(fe_s1));

	mov	esi, DWORD PTR _web+460
	mov	ebx, eax
	shr	ebx, 27					; 0000001bH
	and	ebx, 1
	je	SHORT $LN14@dihedral_h@2
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+ecx*4]
	mov	ecx, DWORD PTR [edx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN13@dihedral_h@2
$LN14@dihedral_h@2:
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	mov	ecx, DWORD PTR [edx+40]
$LN13@dihedral_h@2:
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN18@dihedral_h@2
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	esi, DWORD PTR [ecx+32]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN17@dihedral_h@2
$LN18@dihedral_h@2:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	esi, DWORD PTR [ecx+28]
$LN17@dihedral_h@2:

; 2394 :   fe_s2 = inverse_id(fe_s2);

	xor	esi, 134217728				; 08000000H

; 2395 :   fe_t2 = get_prev_edge(fe_s1);

	test	ebx, ebx
	je	SHORT $LN22@dihedral_h@2
	mov	ebx, DWORD PTR [edx+32]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN21@dihedral_h@2
$LN22@dihedral_h@2:
	mov	ebx, DWORD PTR [edx+28]
$LN21@dihedral_h@2:

; 2396 :   fe_t2 = inverse_id(fe_t2);
; 2397 :   get_fe_side(fe_s1,s1);

	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]
	lea	ecx, DWORD PTR _s1$[ebp]
	push	ecx
	push	eax
	xor	ebx, 134217728				; 08000000H
	call	_get_edge_side

; 2398 :   get_fe_side(fe_s2,s2);

	mov	ecx, DWORD PTR _web+460
	mov	eax, esi
	lea	edx, DWORD PTR _s2$[ebp]
	push	edx
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [edx+20]
	push	esi
	call	_get_edge_side

; 2399 :   get_fe_side(fe_t2,t2);

	mov	edx, DWORD PTR _web+460
	mov	ecx, ebx
	lea	eax, DWORD PTR _t2$[ebp]
	push	eax
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	and	ebx, 134217728				; 08000000H
	xor	ebx, DWORD PTR [eax+20]
	push	ebx
	call	_get_edge_side

; 2400 : 
; 2401 :   s1s1 = SDIM_dot(s1,s1);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _s1$[ebp]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	fstp	QWORD PTR _s1s1$[ebp]

; 2402 :   s1s2 = SDIM_dot(s1,s2);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _s2$[ebp]
	push	edx
	lea	eax, DWORD PTR _s1$[ebp]
	push	eax
	call	_dot
	fstp	QWORD PTR _s1s2$[ebp]

; 2403 :   s1t2 = SDIM_dot(s1,t2);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _t2$[ebp]
	push	edx
	lea	eax, DWORD PTR _s1$[ebp]
	push	eax
	call	_dot
	fstp	QWORD PTR _s1t2$[ebp]

; 2404 :   t2t2 = SDIM_dot(t2,t2);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _t2$[ebp]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	fstp	QWORD PTR _t2t2$[ebp]

; 2405 :   s2s2 = SDIM_dot(s2,s2);

	mov	ecx, DWORD PTR _web+616
	add	esp, 72					; 00000048H
	push	ecx
	lea	edx, DWORD PTR _s2$[ebp]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	fstp	QWORD PTR _s2s2$[ebp]

; 2406 :   s2t2 = SDIM_dot(s2,t2);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _t2$[ebp]
	push	edx
	lea	eax, DWORD PTR _s2$[ebp]
	push	eax
	call	_dot
	fstp	QWORD PTR _s2t2$[ebp]

; 2407 : 
; 2408 :   det = s1s1*t2t2 - s1t2*s1t2;

	fld	QWORD PTR _t2t2$[ebp]
	add	esp, 24					; 00000018H
	fmul	QWORD PTR _s1s1$[ebp]
	fld	QWORD PTR _s1t2$[ebp]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)

; 2409 :   a1 = sqrt(det);

	call	__CIsqrt
	fstp	QWORD PTR _a1$[ebp]

; 2410 :   det = s1s1*s2s2 - s1s2*s1s2;

	fld	QWORD PTR _s2s2$[ebp]
	fmul	QWORD PTR _s1s1$[ebp]
	fld	QWORD PTR _s1s2$[ebp]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)

; 2411 :   a2 = sqrt(det);

	call	__CIsqrt

; 2412 : 
; 2413 :   cos_th = (s1s2*s1t2 - s2t2*s1s1)/a1/a2;

	fld	QWORD PTR _s1t2$[ebp]
	fld	QWORD PTR _s1s2$[ebp]

; 2414 : 
; 2415 :   /* gradients of various terms */
; 2416 :   for ( i = 0 ; i < SDIM ; i++ )

	mov	ecx, DWORD PTR _web+616
	fmul	ST(0), ST(1)
	xor	eax, eax
	fld	QWORD PTR _s2t2$[ebp]
	fld	ST(0)
	fld	QWORD PTR _s1s1$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(3)
	fsubrp	ST(1), ST(0)
	fld	QWORD PTR _a1$[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(5)
	fst	QWORD PTR _cos_th$[ebp]
	test	ecx, ecx
	jle	$LN37@dihedral_h@2
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(5), ST(0)
	fxch	ST(5)
	fst	QWORD PTR tv677[ebp]
	fld	QWORD PTR __real@3fe0000000000000
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR tv683[ebp]
	fld	ST(4)
	fmul	ST(0), ST(6)
	fstp	QWORD PTR tv687[ebp]
	fld	QWORD PTR _s1s2$[ebp]
	fmul	ST(0), ST(6)
	fstp	QWORD PTR tv697[ebp]
	fld	QWORD PTR __real@3fe0000000000000
	fdiv	ST(0), ST(7)
	fstp	QWORD PTR tv703[ebp]
	fxch	ST(3)
	fmul	ST(0), ST(5)
	fstp	QWORD PTR tv717[ebp]
	fld	ST(0)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR tv723[ebp]
	fdiv	ST(0), ST(5)
	fstp	QWORD PTR tv727[ebp]
	jmp	SHORT $LN6@dihedral_h@2
$LN35@dihedral_h@2:
	fld	QWORD PTR tv677[ebp]
	fld	QWORD PTR __real@4000000000000000
	fxch	ST(3)
$LN6@dihedral_h@2:

; 2417 :   { da1ds1[i] = 0.5/a1*(2*s1[i]*t2t2 - 2*s1t2*t2[i]);

	fld	QWORD PTR _s1$[ebp+eax*8]
	inc	eax
	fmulp	ST(4), ST(0)
	fld	ST(3)
	fmul	QWORD PTR _t2t2$[ebp]
	fld	ST(2)
	fmul	QWORD PTR _t2$[ebp+eax*8-8]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR tv683[ebp]
	fst	QWORD PTR _da1ds1$[ebp+eax*8-8]

; 2418 :     da1dt2[i] = 0.5/a1*(2*s1s1*t2[i] - 2*s1t2*s1[i]);

	fld	QWORD PTR tv687[ebp]
	fmul	QWORD PTR _t2$[ebp+eax*8-8]
	fld	QWORD PTR _s1$[ebp+eax*8-8]
	fmulp	ST(4), ST(0)
	fsubrp	ST(3), ST(0)
	fxch	ST(2)
	fmul	QWORD PTR tv683[ebp]
	fst	QWORD PTR _da1dt2$[ebp+eax*8-8]

; 2419 :     da2ds1[i] = 0.5/a2*(2*s1[i]*s2s2 - 2*s1s2*s2[i]);

	fxch	ST(4)
	fmul	QWORD PTR _s2s2$[ebp]
	fld	QWORD PTR tv697[ebp]
	fld	ST(0)
	fmul	QWORD PTR _s2$[ebp+eax*8-8]
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR tv703[ebp]
	fst	QWORD PTR tv704[ebp]
	fstp	QWORD PTR _da2ds1$[ebp+eax*8-8]

; 2420 :     da2ds2[i] = 0.5/a2*(2*s1s1*s2[i] - 2*s1s2*s1[i]);

	fld	QWORD PTR tv687[ebp]
	fmul	QWORD PTR _s2$[ebp+eax*8-8]
	fld	QWORD PTR _s1$[ebp+eax*8-8]
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	fmul	QWORD PTR tv703[ebp]
	fst	QWORD PTR _da2ds2$[ebp+eax*8-8]

; 2421 :     dcosds1[i] = (s2[i]*s1t2 + s1s2*t2[i] - 2*s2t2*s1[i])/a1/a2
; 2422 :                     - cos_th/a1*da1ds1[i] - cos_th/a2*da2ds1[i];

	fld	QWORD PTR _s1t2$[ebp]
	fmul	QWORD PTR _s2$[ebp+eax*8-8]
	fld	QWORD PTR _s1s2$[ebp]
	fmul	QWORD PTR _t2$[ebp+eax*8-8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _s1$[ebp+eax*8-8]
	fmul	QWORD PTR tv717[ebp]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(6)
	fld	QWORD PTR tv723[ebp]
	fmulp	ST(4), ST(0)
	fsubrp	ST(3), ST(0)
	fld	QWORD PTR tv727[ebp]
	fld	QWORD PTR tv704[ebp]
	fmul	ST(0), ST(1)
	fsubp	ST(4), ST(0)
	fxch	ST(3)
	fstp	QWORD PTR _dcosds1$[ebp+eax*8-8]

; 2423 :     dcosdt2[i] = (s1s2*s1[i] - s2[i]*s1s1)/a1/a2
; 2424 :                     - cos_th/a1*da1dt2[i];

	fld	QWORD PTR _s1$[ebp+eax*8-8]
	fmul	QWORD PTR _s1s2$[ebp]
	fld	ST(4)
	fmul	QWORD PTR _s2$[ebp+eax*8-8]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(6)
	fld	QWORD PTR tv723[ebp]
	fmulp	ST(6), ST(0)
	fsubrp	ST(5), ST(0)
	fxch	ST(4)
	fstp	QWORD PTR _dcosdt2$[ebp+eax*8-8]

; 2425 :     dcosds2[i] = (s1[i]*s1t2 - t2[i]*s1s1)/a1/a2
; 2426 :                     - cos_th/a2*da2ds2[i];

	fld	QWORD PTR _s1$[ebp+eax*8-8]
	fmul	QWORD PTR _s1t2$[ebp]
	fld	ST(3)
	fmul	QWORD PTR _t2$[ebp+eax*8-8]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fdiv	ST(0), ST(5)
	fxch	ST(2)
	fmulp	ST(4), ST(0)
	fxch	ST(1)
	fsubrp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR _dcosds2$[ebp+eax*8-8]
	cmp	eax, ecx
	jl	$LN35@dihedral_h@2

; 2414 : 
; 2415 :   /* gradients of various terms */
; 2416 :   for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(1)
	fstp	ST(1)
	fld	QWORD PTR _cos_th$[ebp]
	fxch	ST(1)
$LN4@dihedral_h@2:

; 2427 :   }
; 2428 : 
; 2429 :   for ( i = 0 ; i < SDIM ; i++ )

	xor	esi, esi
	test	ecx, ecx
	jle	$LN46@dihedral_h@2
	fld1
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv757[ebp]
	call	__CIsqrt

; 2443 : 
; 2444 :     f = -sqrt(s1s1)*dcosdt2[i];

	fld	QWORD PTR tv757[ebp]
$LN3@dihedral_h@2:

; 2427 :   }
; 2428 : 
; 2429 :   for ( i = 0 ; i < SDIM ; i++ )

	fld	QWORD PTR _s1$[ebp+esi*8]
	mov	ecx, DWORD PTR [edi+1336]

; 2430 :   { REAL f;  /* part of force */
; 2431 : 
; 2432 :     f = s1[i]*(1 - cos_th)/sqrt(s1s1);

	fmul	ST(0), ST(1)
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [edx+esi*8]
	fdiv	ST(0), ST(2)

; 2433 :     e_info->grad[1][i] += f;

	fld	ST(0)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]

; 2434 :     e_info->grad[0][i] -= f;

	mov	eax, DWORD PTR [edi+1336]
	mov	ecx, DWORD PTR [eax]
	fsubr	QWORD PTR [ecx+esi*8]
	lea	eax, DWORD PTR [ecx+esi*8]
	fstp	QWORD PTR [eax]
	mov	edx, DWORD PTR [edi+1336]

; 2435 : 
; 2436 :     f = -sqrt(s1s1)*dcosds1[i];

	fld	QWORD PTR _dcosds1$[ebp+esi*8]
	mov	eax, DWORD PTR [edx+4]
	fmul	ST(0), ST(2)
	lea	eax, DWORD PTR [eax+esi*8]
	fchs

; 2437 :     e_info->grad[1][i] += f;

	fld	QWORD PTR [eax]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax]

; 2438 :     e_info->grad[0][i] -= f;

	mov	ecx, DWORD PTR [edi+1336]
	mov	edx, DWORD PTR [ecx]
	fsubr	QWORD PTR [edx+esi*8]
	lea	eax, DWORD PTR [edx+esi*8]
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR [edi+1336]
	mov	ecx, DWORD PTR [eax+12]

; 2439 : 
; 2440 :     f = -sqrt(s1s1)*dcosds2[i];

	fld	QWORD PTR _dcosds2$[ebp+esi*8]
	fmul	ST(0), ST(2)
	lea	eax, DWORD PTR [ecx+esi*8]
	fchs

; 2441 :     e_info->grad[3][i] += f;

	fld	QWORD PTR [eax]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax]

; 2442 :     e_info->grad[0][i] -= f;

	mov	edx, DWORD PTR [edi+1336]
	mov	eax, DWORD PTR [edx]
	fsubr	QWORD PTR [eax+esi*8]
	lea	eax, DWORD PTR [eax+esi*8]
	fstp	QWORD PTR [eax]
	mov	ecx, DWORD PTR [edi+1336]

; 2443 : 
; 2444 :     f = -sqrt(s1s1)*dcosdt2[i];

	fld	QWORD PTR _dcosdt2$[ebp+esi*8]
	mov	edx, DWORD PTR [ecx+8]
	fmul	ST(0), ST(2)
	lea	eax, DWORD PTR [edx+esi*8]
	fchs

; 2445 :     e_info->grad[2][i] += f;

	fld	QWORD PTR [eax]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax]

; 2446 :     e_info->grad[0][i] -= f;

	mov	eax, DWORD PTR [edi+1336]
	mov	ecx, DWORD PTR [eax]
	fsubr	QWORD PTR [ecx+esi*8]
	lea	eax, DWORD PTR [ecx+esi*8]
	inc	esi
	fstp	QWORD PTR [eax]
	cmp	esi, DWORD PTR _web+616
	jl	$LN3@dihedral_h@2

; 2427 :   }
; 2428 : 
; 2429 :   for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(1)
	fstp	ST(0)
	fld	QWORD PTR _s1s1$[ebp]
	jmp	SHORT $LN1@dihedral_h@2
$LN37@dihedral_h@2:

; 2414 : 
; 2415 :   /* gradients of various terms */
; 2416 :   for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(1)
	fstp	ST(4)
	fstp	ST(2)
	fstp	ST(1)
	jmp	$LN4@dihedral_h@2
$LN46@dihedral_h@2:

; 2427 :   }
; 2428 : 
; 2429 :   for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(1)
$LN1@dihedral_h@2:

; 2447 :   }
; 2448 :   return sqrt(s1s1)*(1 - cos_th);

	call	__CIsqrt
	fld1
	fsub	QWORD PTR _cos_th$[ebp]

; 2449 : } // end dihedral_hooke_grad()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	fmulp	ST(1), ST(0)
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_dihedral_hooke_grad ENDP
_TEXT	ENDS
PUBLIC	_gradList
_BSS	SEGMENT
_Gtemp	DQ	06H DUP (?)
; Function compile flags: /Ogtp
_BSS	ENDS
;	COMDAT _gradList
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
_d$ = 32						; size = 8
_e$ = 40						; size = 8
_f$ = 48						; size = 8
_gradList PROC						; COMDAT

; 2472 : { Gtemp[0] = a;

	push	ebp
	mov	ebp, esp
	fld	QWORD PTR _a$[ebp]
	fstp	QWORD PTR _Gtemp

; 2473 :   Gtemp[1] = b;

	fld	QWORD PTR _b$[ebp]
	fstp	QWORD PTR _Gtemp+8

; 2474 :   Gtemp[2] = c;

	fld	QWORD PTR _c$[ebp]
	fstp	QWORD PTR _Gtemp+16

; 2475 :   Gtemp[3] = d;

	fld	QWORD PTR _d$[ebp]
	fstp	QWORD PTR _Gtemp+24

; 2476 :   Gtemp[4] = e;

	fld	QWORD PTR _e$[ebp]
	fstp	QWORD PTR _Gtemp+32

; 2477 :   Gtemp[5] = f;

	fld	QWORD PTR _f$[ebp]
	fstp	QWORD PTR _Gtemp+40

; 2478 : } //end gradList()

	pop	ebp
	ret	0
_gradList ENDP
_TEXT	ENDS
PUBLIC	_LList
_BSS	SEGMENT
_Htemp	DQ	024H DUP (?)
; Function compile flags: /Ogtp
_BSS	ENDS
;	COMDAT _LList
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
_e$ = 24						; size = 4
_f$ = 28						; size = 4
_LList	PROC						; COMDAT

; 2483 : { int i;

	push	ebp
	mov	ebp, esp

; 2484 :   for ( i = 0 ; i < 6 ; i++ ) 
; 2485 :   { Htemp[0][i] = a[i];

	mov	eax, DWORD PTR _a$[ebp]
	fld	QWORD PTR [eax]

; 2486 :      Htemp[1][i] = b[i];

	mov	ecx, DWORD PTR _b$[ebp]
	fstp	QWORD PTR _Htemp

; 2487 :      Htemp[2][i] = c[i];

	mov	edx, DWORD PTR _c$[ebp]
	fld	QWORD PTR [ecx]
	push	ebx
	fstp	QWORD PTR _Htemp+48

; 2488 :      Htemp[3][i] = d[i];
; 2489 :      Htemp[4][i] = e[i];
; 2490 :      Htemp[5][i] = f[i];

	mov	ebx, DWORD PTR _f$[ebp]
	fld	QWORD PTR [edx]
	push	esi
	fstp	QWORD PTR _Htemp+96
	mov	esi, DWORD PTR _d$[ebp]
	fld	QWORD PTR [esi]
	push	edi
	fstp	QWORD PTR _Htemp+144
	mov	edi, DWORD PTR _e$[ebp]
	fld	QWORD PTR [edi]
	fstp	QWORD PTR _Htemp+192
	fld	QWORD PTR [ebx]
	fstp	QWORD PTR _Htemp+240
	fld	QWORD PTR [eax+8]
	fstp	QWORD PTR _Htemp+8
	fld	QWORD PTR [ecx+8]
	fstp	QWORD PTR _Htemp+56
	fld	QWORD PTR [edx+8]
	fstp	QWORD PTR _Htemp+104
	fld	QWORD PTR [esi+8]
	fstp	QWORD PTR _Htemp+152
	fld	QWORD PTR [edi+8]
	fstp	QWORD PTR _Htemp+200
	fld	QWORD PTR [ebx+8]
	fstp	QWORD PTR _Htemp+248
	fld	QWORD PTR [eax+16]
	fstp	QWORD PTR _Htemp+16
	fld	QWORD PTR [ecx+16]
	fstp	QWORD PTR _Htemp+64
	fld	QWORD PTR [edx+16]
	fstp	QWORD PTR _Htemp+112
	fld	QWORD PTR [esi+16]
	fstp	QWORD PTR _Htemp+160
	fld	QWORD PTR [edi+16]
	fstp	QWORD PTR _Htemp+208
	fld	QWORD PTR [ebx+16]
	fstp	QWORD PTR _Htemp+256
	fld	QWORD PTR [eax+24]
	fstp	QWORD PTR _Htemp+24
	fld	QWORD PTR [ecx+24]
	fstp	QWORD PTR _Htemp+72
	fld	QWORD PTR [edx+24]
	fstp	QWORD PTR _Htemp+120
	fld	QWORD PTR [esi+24]
	fstp	QWORD PTR _Htemp+168
	fld	QWORD PTR [edi+24]
	fstp	QWORD PTR _Htemp+216
	fld	QWORD PTR [ebx+24]
	fstp	QWORD PTR _Htemp+264
	fld	QWORD PTR [eax+32]
	fstp	QWORD PTR _Htemp+32
	fld	QWORD PTR [ecx+32]
	fstp	QWORD PTR _Htemp+80
	fld	QWORD PTR [edx+32]
	fstp	QWORD PTR _Htemp+128
	fld	QWORD PTR [esi+32]
	fstp	QWORD PTR _Htemp+176
	fld	QWORD PTR [edi+32]
	fstp	QWORD PTR _Htemp+224
	fld	QWORD PTR [ebx+32]
	fstp	QWORD PTR _Htemp+272
	fld	QWORD PTR [eax+40]
	fstp	QWORD PTR _Htemp+40
	fld	QWORD PTR [ecx+40]
	fstp	QWORD PTR _Htemp+88
	fld	QWORD PTR [edx+40]
	fstp	QWORD PTR _Htemp+136
	fld	QWORD PTR [esi+40]
	fstp	QWORD PTR _Htemp+184
	fld	QWORD PTR [edi+40]
	fstp	QWORD PTR _Htemp+232
	fld	QWORD PTR [ebx+40]
	fstp	QWORD PTR _Htemp+280
	pop	edi
	pop	esi
	pop	ebx

; 2491 :   }
; 2492 : } // end LList()

	pop	ebp
	ret	0
_LList	ENDP
_TEXT	ENDS
PUBLIC	_List
_BSS	SEGMENT
_Ltemp	DQ	024H DUP (?)
_Lcount	DD	01H DUP (?)
; Function compile flags: /Ogtp
_BSS	ENDS
;	COMDAT _List
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
_d$ = 32						; size = 8
_e$ = 40						; size = 8
_f$ = 48						; size = 8
_List	PROC						; COMDAT

; 2497 : { Ltemp[Lcount][0] = a;

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _Lcount
	fld	QWORD PTR _a$[ebp]
	lea	ecx, DWORD PTR [edx+edx*2]
	shl	ecx, 4
	fstp	QWORD PTR _Ltemp[ecx]
	lea	eax, DWORD PTR _Ltemp[ecx]

; 2498 :   Ltemp[Lcount][1] = b;

	fld	QWORD PTR _b$[ebp]

; 2499 :   Ltemp[Lcount][2] = c;
; 2500 :   Ltemp[Lcount][3] = d;
; 2501 :   Ltemp[Lcount][4] = e;
; 2502 :   Ltemp[Lcount][5] = f;
; 2503 :   return Ltemp[Lcount++];

	inc	edx
	fstp	QWORD PTR _Ltemp[ecx+8]
	mov	DWORD PTR _Lcount, edx
	fld	QWORD PTR _c$[ebp]
	fstp	QWORD PTR _Ltemp[ecx+16]
	fld	QWORD PTR _d$[ebp]
	fstp	QWORD PTR _Ltemp[ecx+24]
	fld	QWORD PTR _e$[ebp]
	fstp	QWORD PTR _Ltemp[ecx+32]
	fld	QWORD PTR _f$[ebp]
	fstp	QWORD PTR _Ltemp[ecx+40]

; 2504 : } // end List()

	pop	ebp
	ret	0
_List	ENDP
_TEXT	ENDS
PUBLIC	__real@c000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@c008000000000000
PUBLIC	__real@4004000000000000
PUBLIC	__real@3ff8000000000000
PUBLIC	_e_info$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_dihedral_hooke_hess
EXTRN	__CIpow:PROC
;	COMDAT __real@c000000000000000
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\inline.h
CONST	SEGMENT
__real@c000000000000000 DQ 0c000000000000000r	; -2
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@c008000000000000
CONST	SEGMENT
__real@c008000000000000 DQ 0c008000000000000r	; -3
CONST	ENDS
;	COMDAT __real@4004000000000000
CONST	SEGMENT
__real@4004000000000000 DQ 04004000000000000r	; 2.5
CONST	ENDS
;	COMDAT __real@3ff8000000000000
CONST	SEGMENT
__real@3ff8000000000000 DQ 03ff8000000000000r	; 1.5
; Function compile flags: /Ogtp
; File c:\levolver\yonkang-sefit\levolver\ev_ogl\method4.c
CONST	ENDS
;	COMDAT _dihedral_hooke_hess
_TEXT	SEGMENT
tv4645 = -2248						; size = 8
tv4631 = -2240						; size = 8
tv4726 = -2232						; size = 8
tv4677 = -2224						; size = 8
tv4582 = -2216						; size = 8
tv4643 = -2208						; size = 8
tv4408 = -2200						; size = 8
tv4706 = -2192						; size = 8
tv4709 = -2184						; size = 8
tv4658 = -2176						; size = 8
tv4710 = -2168						; size = 8
tv4713 = -2160						; size = 8
tv4651 = -2152						; size = 8
tv4399 = -2144						; size = 8
tv4585 = -2136						; size = 8
tv4699 = -2128						; size = 8
tv4712 = -2120						; size = 8
tv4659 = -2112						; size = 8
tv4707 = -2104						; size = 8
tv4666 = -2096						; size = 8
tv4403 = -2088						; size = 8
tv4663 = -2080						; size = 8
_e_info$GSCopy$ = -2072					; size = 4
tv4817 = -2068						; size = 8
tv4407 = -2068						; size = 8
tv4889 = -2060						; size = 8
tv4620 = -2060						; size = 8
tv4898 = -2052						; size = 8
tv4615 = -2052						; size = 8
tv6785 = -2044						; size = 8
tv4628 = -2044						; size = 8
tv4580 = -2036						; size = 8
tv4461 = -2036						; size = 8
tv4603 = -2028						; size = 8
tv4701 = -2020						; size = 8
tv4646 = -2020						; size = 8
tv4587 = -2012						; size = 8
_cos_th$ = -2004					; size = 8
_a1$ = -2004						; size = 8
tv4592 = -1996						; size = 8
tv4893 = -1988						; size = 8
tv4609 = -1988						; size = 8
tv4617 = -1980						; size = 8
tv4655 = -1972						; size = 8
tv4468 = -1972						; size = 8
tv4764 = -1964						; size = 8
tv4588 = -1964						; size = 8
tv4472 = -1964						; size = 8
tv4899 = -1956						; size = 8
tv4637 = -1956						; size = 8
tv4635 = -1948						; size = 8
tv4501 = -1948						; size = 8
tv4423 = -1948						; size = 8
tv4807 = -1940						; size = 8
tv4596 = -1940						; size = 8
tv4579 = -1932						; size = 8
tv4722 = -1924						; size = 8
tv4597 = -1924						; size = 8
tv4448 = -1924						; size = 8
_s2t2$ = -1916						; size = 8
tv4647 = -1908						; size = 8
tv4431 = -1908						; size = 8
tv4742 = -1900						; size = 8
tv4593 = -1900						; size = 8
tv4833 = -1892						; size = 8
tv4584 = -1892						; size = 8
tv4883 = -1884						; size = 8
tv4654 = -1884						; size = 8
tv4641 = -1884						; size = 8
tv4443 = -1884						; size = 8
tv4504 = -1876						; size = 8
tv4728 = -1868						; size = 8
tv4583 = -1868						; size = 8
tv4427 = -1868						; size = 8
tv4768 = -1860						; size = 8
tv4586 = -1860						; size = 8
tv4447 = -1860						; size = 8
tv4589 = -1852						; size = 8
tv6367 = -1848						; size = 4
_t2t2$ = -1844						; size = 8
tv6720 = -1840						; size = 4
tv4674 = -1836						; size = 8
tv7252 = -1832						; size = 4
_s2s2$ = -1828						; size = 8
tv7140 = -1824						; size = 4
tv4598 = -1820						; size = 8
_nn$ = -1816						; size = 4
_s1s1$ = -1812						; size = 8
tv7254 = -1808						; size = 4
tv4409 = -1804						; size = 8
tv7265 = -1800						; size = 4
_s1t2$ = -1796						; size = 8
tv7256 = -1792						; size = 4
_s1s2$ = -1788						; size = 8
tv7271 = -1784						; size = 4
_dqdx$ = -1780						; size = 864
_da2ds1$ = -916						; size = 48
_da2ds2$ = -868						; size = 48
_da1dt2$ = -820						; size = 48
_da1ds1$ = -772						; size = 48
_ddqdxx$ = -724						; size = 432
_dcosds2$ = -292					; size = 48
_dcosdt2$ = -244					; size = 48
_dcosds1$ = -196					; size = 48
_s2$ = -148						; size = 48
_t2$ = -100						; size = 48
_s1$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_dihedral_hooke_hess PROC				; COMDAT

; 2512 : {  

	push	ebp
	mov	ebp, esp
	sub	esp, 2248				; 000008c8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2513 : #ifndef MAC_CW
; 2514 :   int i,j,k,n,jj,nn;
; 2515 :   REAL s1[MAXCOORD],s2[MAXCOORD],t2[MAXCOORD];
; 2516 :   REAL s1s1,s1s2,s1t2,s2s2,t2t2,s2t2;
; 2517 :   REAL a1,a2;
; 2518 :   REAL det;
; 2519 :   facetedge_id fe_s1,fe_s2,fe_t2;
; 2520 :   edge_id e_id = e_info->id;
; 2521 :   REAL cos_th;    /* cosine of angle between facets */
; 2522 :   REAL dcosds1[MAXCOORD],dcosds2[MAXCOORD],dcosdt2[MAXCOORD];
; 2523 :   REAL da1ds1[MAXCOORD], da1dt2[MAXCOORD];
; 2524 :   REAL da2ds1[MAXCOORD], da2ds2[MAXCOORD];
; 2525 :   REAL dqdx[6][3][MAXCOORD];
; 2526 :   REAL ddqdxx[6][3][3];
; 2527 : 
; 2528 :   /* get edge vectors away from tail vertex */
; 2529 :   fe_s1 = get_edge_fe(e_id);

	mov	edx, DWORD PTR _web+124
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _e_info$[ebp]
	mov	ecx, DWORD PTR [edi]
	mov	eax, ecx
	and	eax, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+eax*4]

; 2967 :      for ( i = 0 ; i < SDIM ; i++ ) /* dimension on first */

	mov	DWORD PTR _e_info$GSCopy$[ebp], edi
	test	eax, eax
	je	SHORT $LN49@dihedral_h@3

; 2513 : #ifndef MAC_CW
; 2514 :   int i,j,k,n,jj,nn;
; 2515 :   REAL s1[MAXCOORD],s2[MAXCOORD],t2[MAXCOORD];
; 2516 :   REAL s1s1,s1s2,s1t2,s2s2,t2t2,s2t2;
; 2517 :   REAL a1,a2;
; 2518 :   REAL det;
; 2519 :   facetedge_id fe_s1,fe_s2,fe_t2;
; 2520 :   edge_id e_id = e_info->id;
; 2521 :   REAL cos_th;    /* cosine of angle between facets */
; 2522 :   REAL dcosds1[MAXCOORD],dcosds2[MAXCOORD],dcosdt2[MAXCOORD];
; 2523 :   REAL da1ds1[MAXCOORD], da1dt2[MAXCOORD];
; 2524 :   REAL da2ds1[MAXCOORD], da2ds2[MAXCOORD];
; 2525 :   REAL dqdx[6][3][MAXCOORD];
; 2526 :   REAL ddqdxx[6][3][3];
; 2527 : 
; 2528 :   /* get edge vectors away from tail vertex */
; 2529 :   fe_s1 = get_edge_fe(e_id);

$LN50@dihedral_h@3:
	mov	eax, DWORD PTR [eax+28]
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN49@dihedral_h@3
	xor	eax, 134217728				; 08000000H
$LN49@dihedral_h@3:

; 2530 :   fe_s2 = get_prev_edge(get_next_facet(fe_s1));

	mov	esi, DWORD PTR _web+460
	mov	ebx, eax
	shr	ebx, 27					; 0000001bH
	and	ebx, 1
	je	SHORT $LN54@dihedral_h@3
	mov	ecx, eax
	and	ecx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+ecx*4]
	mov	ecx, DWORD PTR [edx+36]
	xor	ecx, 134217728				; 08000000H
	jmp	SHORT $LN53@dihedral_h@3
$LN54@dihedral_h@3:
	mov	edx, eax
	and	edx, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [esi+edx*4]
	mov	ecx, DWORD PTR [edx+40]
$LN53@dihedral_h@3:
	test	ecx, 134217728				; 08000000H
	je	SHORT $LN58@dihedral_h@3
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	esi, DWORD PTR [ecx+32]
	xor	esi, 134217728				; 08000000H
	jmp	SHORT $LN57@dihedral_h@3
$LN58@dihedral_h@3:
	and	ecx, 134217727				; 07ffffffH
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	esi, DWORD PTR [ecx+28]
$LN57@dihedral_h@3:

; 2531 :   fe_s2 = inverse_id(fe_s2);

	xor	esi, 134217728				; 08000000H

; 2532 :   fe_t2 = get_prev_edge(fe_s1);

	test	ebx, ebx
	je	SHORT $LN62@dihedral_h@3
	mov	ebx, DWORD PTR [edx+32]
	xor	ebx, 134217728				; 08000000H
	jmp	SHORT $LN61@dihedral_h@3
$LN62@dihedral_h@3:
	mov	ebx, DWORD PTR [edx+28]
$LN61@dihedral_h@3:

; 2533 :   fe_t2 = inverse_id(fe_t2);
; 2534 :   get_fe_side(fe_s1,s1);

	and	eax, 134217728				; 08000000H
	xor	eax, DWORD PTR [edx+20]
	lea	ecx, DWORD PTR _s1$[ebp]
	push	ecx
	push	eax
	xor	ebx, 134217728				; 08000000H
	call	_get_edge_side

; 2535 :   get_fe_side(fe_s2,s2);

	mov	ecx, DWORD PTR _web+460
	mov	eax, esi
	lea	edx, DWORD PTR _s2$[ebp]
	push	edx
	and	eax, 134217727				; 07ffffffH
	mov	edx, DWORD PTR [ecx+eax*4]
	and	esi, 134217728				; 08000000H
	xor	esi, DWORD PTR [edx+20]
	push	esi
	call	_get_edge_side

; 2536 :   get_fe_side(fe_t2,t2);

	mov	edx, DWORD PTR _web+460
	mov	ecx, ebx
	lea	eax, DWORD PTR _t2$[ebp]
	push	eax
	and	ecx, 134217727				; 07ffffffH
	mov	eax, DWORD PTR [edx+ecx*4]
	and	ebx, 134217728				; 08000000H
	xor	ebx, DWORD PTR [eax+20]
	push	ebx
	call	_get_edge_side

; 2537 : 
; 2538 :   s1s1 = SDIM_dot(s1,s1);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _s1$[ebp]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	fstp	QWORD PTR _s1s1$[ebp]

; 2539 :   s1s2 = SDIM_dot(s1,s2);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _s2$[ebp]
	push	edx
	lea	eax, DWORD PTR _s1$[ebp]
	push	eax
	call	_dot
	fstp	QWORD PTR _s1s2$[ebp]

; 2540 :   s1t2 = SDIM_dot(s1,t2);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _t2$[ebp]
	push	edx
	lea	eax, DWORD PTR _s1$[ebp]
	push	eax
	call	_dot
	fstp	QWORD PTR _s1t2$[ebp]

; 2541 :   t2t2 = SDIM_dot(t2,t2);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _t2$[ebp]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	fstp	QWORD PTR _t2t2$[ebp]

; 2542 :   s2s2 = SDIM_dot(s2,s2);

	mov	ecx, DWORD PTR _web+616
	add	esp, 72					; 00000048H
	push	ecx
	lea	edx, DWORD PTR _s2$[ebp]
	push	edx
	mov	eax, edx
	push	eax
	call	_dot
	fstp	QWORD PTR _s2s2$[ebp]

; 2543 :   s2t2 = SDIM_dot(s2,t2);

	mov	ecx, DWORD PTR _web+616
	push	ecx
	lea	edx, DWORD PTR _t2$[ebp]
	push	edx
	lea	eax, DWORD PTR _s2$[ebp]
	push	eax
	call	_dot
	fstp	QWORD PTR _s2t2$[ebp]

; 2544 : 
; 2545 :   det = s1s1*t2t2 - s1t2*s1t2;

	fld	QWORD PTR _t2t2$[ebp]
	add	esp, 24					; 00000018H
	fmul	QWORD PTR _s1s1$[ebp]
	fst	QWORD PTR tv4399[ebp]
	fld	QWORD PTR _s1t2$[ebp]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)

; 2546 :   a1 = sqrt(det);

	call	__CIsqrt
	fstp	QWORD PTR _a1$[ebp]

; 2547 :   det = s1s1*s2s2 - s1s2*s1s2;

	fld	QWORD PTR _s2s2$[ebp]
	fmul	QWORD PTR _s1s1$[ebp]
	fst	QWORD PTR tv4403[ebp]
	fld	QWORD PTR _s1s2$[ebp]
	fmul	ST(0), ST(0)
	fsubp	ST(1), ST(0)

; 2548 :   a2 = sqrt(det);

	call	__CIsqrt

; 2549 : 
; 2550 :   cos_th = (s1s2*s1t2 - s2t2*s1s1)/a1/a2;

	fld	QWORD PTR _s1t2$[ebp]
	fld	QWORD PTR _s1s2$[ebp]

; 2551 : 
; 2552 :   /* gradients of various terms */
; 2553 :   for ( i = 0 ; i < SDIM ; i++ )

	mov	ebx, DWORD PTR _web+616
	fmul	ST(0), ST(1)
	xor	eax, eax
	fst	QWORD PTR tv4407[ebp]
	fld	QWORD PTR _s2t2$[ebp]
	fld	ST(0)
	fld	QWORD PTR _s1s1$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv4408[ebp]
	fsubp	ST(3), ST(0)
	fxch	ST(2)
	fst	QWORD PTR tv4409[ebp]
	fld	QWORD PTR _a1$[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fdiv	ST(0), ST(5)
	fst	QWORD PTR _cos_th$[ebp]
	fld	QWORD PTR __real@4000000000000000
	test	ebx, ebx
	jle	$LN120@dihedral_h@3
	fmul	ST(5), ST(0)
	fxch	ST(5)
	fst	QWORD PTR tv4423[ebp]
	fld	QWORD PTR __real@3fe0000000000000
	fdiv	ST(0), ST(3)
	fstp	QWORD PTR tv4427[ebp]
	fld	ST(4)
	fmul	ST(0), ST(6)
	fstp	QWORD PTR tv4431[ebp]
	fld	QWORD PTR _s1s2$[ebp]
	fmul	ST(0), ST(6)
	fstp	QWORD PTR tv4443[ebp]
	fld	QWORD PTR __real@3fe0000000000000
	fdiv	ST(0), ST(7)
	fstp	QWORD PTR tv4447[ebp]
	fxch	ST(3)
	fmul	ST(0), ST(5)
	fstp	QWORD PTR tv4461[ebp]
	fld	ST(0)
	fdiv	ST(0), ST(2)
	fstp	QWORD PTR tv4468[ebp]
	fdiv	ST(0), ST(5)
	fstp	QWORD PTR tv4472[ebp]
	jmp	SHORT $LN46@dihedral_h@3
$LN109@dihedral_h@3:
	fld	QWORD PTR tv4423[ebp]
	fld	QWORD PTR __real@4000000000000000
	fxch	ST(3)
$LN46@dihedral_h@3:

; 2554 :   { da1ds1[i] = 0.5/a1*(2*s1[i]*t2t2 - 2*s1t2*t2[i]);

	fld	QWORD PTR _s1$[ebp+eax*8]
	inc	eax
	fmulp	ST(4), ST(0)
	fld	ST(3)
	fmul	QWORD PTR _t2t2$[ebp]
	fld	ST(2)
	fmul	QWORD PTR _t2$[ebp+eax*8-8]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR tv4427[ebp]
	fst	QWORD PTR _da1ds1$[ebp+eax*8-8]

; 2555 :     da1dt2[i] = 0.5/a1*(2*s1s1*t2[i] - 2*s1t2*s1[i]);

	fld	QWORD PTR tv4431[ebp]
	fmul	QWORD PTR _t2$[ebp+eax*8-8]
	fld	QWORD PTR _s1$[ebp+eax*8-8]
	fmulp	ST(4), ST(0)
	fsubrp	ST(3), ST(0)
	fxch	ST(2)
	fmul	QWORD PTR tv4427[ebp]
	fst	QWORD PTR _da1dt2$[ebp+eax*8-8]

; 2556 :     da2ds1[i] = 0.5/a2*(2*s1[i]*s2s2 - 2*s1s2*s2[i]);

	fxch	ST(4)
	fmul	QWORD PTR _s2s2$[ebp]
	fld	QWORD PTR tv4443[ebp]
	fld	ST(0)
	fmul	QWORD PTR _s2$[ebp+eax*8-8]
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR tv4447[ebp]
	fst	QWORD PTR tv4448[ebp]
	fstp	QWORD PTR _da2ds1$[ebp+eax*8-8]

; 2557 :     da2ds2[i] = 0.5/a2*(2*s1s1*s2[i] - 2*s1s2*s1[i]);

	fld	QWORD PTR tv4431[ebp]
	fmul	QWORD PTR _s2$[ebp+eax*8-8]
	fld	QWORD PTR _s1$[ebp+eax*8-8]
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	fmul	QWORD PTR tv4447[ebp]
	fst	QWORD PTR _da2ds2$[ebp+eax*8-8]

; 2558 :     dcosds1[i] = (s2[i]*s1t2 + s1s2*t2[i] - 2*s2t2*s1[i])/a1/a2
; 2559 :                     - cos_th/a1*da1ds1[i] - cos_th/a2*da2ds1[i];

	fld	QWORD PTR _s1t2$[ebp]
	fmul	QWORD PTR _s2$[ebp+eax*8-8]
	fld	QWORD PTR _s1s2$[ebp]
	fmul	QWORD PTR _t2$[ebp+eax*8-8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _s1$[ebp+eax*8-8]
	fmul	QWORD PTR tv4461[ebp]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(6)
	fld	QWORD PTR tv4468[ebp]
	fmulp	ST(4), ST(0)
	fsubrp	ST(3), ST(0)
	fld	QWORD PTR tv4472[ebp]
	fld	QWORD PTR tv4448[ebp]
	fmul	ST(0), ST(1)
	fsubp	ST(4), ST(0)
	fxch	ST(3)
	fstp	QWORD PTR _dcosds1$[ebp+eax*8-8]

; 2560 :     dcosdt2[i] = (s1s2*s1[i] - s2[i]*s1s1)/a1/a2
; 2561 :                     - cos_th/a1*da1dt2[i];

	fld	QWORD PTR _s1$[ebp+eax*8-8]
	fmul	QWORD PTR _s1s2$[ebp]
	fld	ST(4)
	fmul	QWORD PTR _s2$[ebp+eax*8-8]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(2)
	fdiv	ST(0), ST(6)
	fld	QWORD PTR tv4468[ebp]
	fmulp	ST(6), ST(0)
	fsubrp	ST(5), ST(0)
	fxch	ST(4)
	fstp	QWORD PTR _dcosdt2$[ebp+eax*8-8]

; 2562 :     dcosds2[i] = (s1[i]*s1t2 - t2[i]*s1s1)/a1/a2
; 2563 :                     - cos_th/a2*da2ds2[i];

	fld	QWORD PTR _s1$[ebp+eax*8-8]
	fmul	QWORD PTR _s1t2$[ebp]
	fld	ST(3)
	fmul	QWORD PTR _t2$[ebp+eax*8-8]
	fsubp	ST(1), ST(0)
	fdiv	ST(0), ST(1)
	fdiv	ST(0), ST(5)
	fxch	ST(2)
	fmulp	ST(4), ST(0)
	fxch	ST(1)
	fsubrp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR _dcosds2$[ebp+eax*8-8]
	cmp	eax, ebx
	jl	$LN109@dihedral_h@3

; 2551 : 
; 2552 :   /* gradients of various terms */
; 2553 :   for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(2)
	fstp	ST(0)
	fld	QWORD PTR _cos_th$[ebp]
	fxch	ST(1)
$LN44@dihedral_h@3:

; 2564 :   }
; 2565 : 
; 2566 :   /* gradients */
; 2567 :   for ( i = 0 ; i < SDIM ; i++ )

	xor	esi, esi
	test	ebx, ebx
	jle	$LN129@dihedral_h@3
	fld1
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv4501[ebp]
	call	__CIsqrt

; 2581 : 
; 2582 :     f = -sqrt(s1s1)*dcosdt2[i];

	fld	QWORD PTR tv4501[ebp]
$LN43@dihedral_h@3:

; 2564 :   }
; 2565 : 
; 2566 :   /* gradients */
; 2567 :   for ( i = 0 ; i < SDIM ; i++ )

	fld	QWORD PTR _s1$[ebp+esi*8]
	mov	ecx, DWORD PTR [edi+1336]

; 2568 :   { REAL f;  /* part of force */
; 2569 : 
; 2570 :     f = s1[i]*(1 - cos_th)/sqrt(s1s1);

	fmul	ST(0), ST(1)
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [edx+esi*8]
	fdiv	ST(0), ST(2)

; 2571 :     e_info->grad[1][i] += f;

	fld	ST(0)
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [eax]

; 2572 :     e_info->grad[0][i] -= f;

	mov	eax, DWORD PTR [edi+1336]
	mov	ecx, DWORD PTR [eax]
	fsubr	QWORD PTR [ecx+esi*8]
	lea	eax, DWORD PTR [ecx+esi*8]
	fstp	QWORD PTR [eax]
	mov	edx, DWORD PTR [edi+1336]

; 2573 : 
; 2574 :     f = -sqrt(s1s1)*dcosds1[i];

	fld	QWORD PTR _dcosds1$[ebp+esi*8]
	mov	eax, DWORD PTR [edx+4]
	fmul	ST(0), ST(2)
	lea	eax, DWORD PTR [eax+esi*8]
	fchs

; 2575 :     e_info->grad[1][i] += f;

	fld	QWORD PTR [eax]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax]

; 2576 :     e_info->grad[0][i] -= f;

	mov	ecx, DWORD PTR [edi+1336]
	mov	edx, DWORD PTR [ecx]
	fsubr	QWORD PTR [edx+esi*8]
	lea	eax, DWORD PTR [edx+esi*8]
	fstp	QWORD PTR [eax]
	mov	eax, DWORD PTR [edi+1336]
	mov	ecx, DWORD PTR [eax+12]

; 2577 : 
; 2578 :     f = -sqrt(s1s1)*dcosds2[i];

	fld	QWORD PTR _dcosds2$[ebp+esi*8]
	fmul	ST(0), ST(2)
	lea	eax, DWORD PTR [ecx+esi*8]
	fchs

; 2579 :     e_info->grad[3][i] += f;

	fld	QWORD PTR [eax]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax]

; 2580 :     e_info->grad[0][i] -= f;

	mov	edx, DWORD PTR [edi+1336]
	mov	eax, DWORD PTR [edx]
	fsubr	QWORD PTR [eax+esi*8]
	lea	eax, DWORD PTR [eax+esi*8]
	fstp	QWORD PTR [eax]
	mov	ecx, DWORD PTR [edi+1336]

; 2581 : 
; 2582 :     f = -sqrt(s1s1)*dcosdt2[i];

	fld	QWORD PTR _dcosdt2$[ebp+esi*8]
	mov	edx, DWORD PTR [ecx+8]
	fmul	ST(0), ST(2)
	lea	eax, DWORD PTR [edx+esi*8]
	fchs

; 2583 :     e_info->grad[2][i] += f;

	fld	QWORD PTR [eax]
	fadd	ST(0), ST(1)
	fstp	QWORD PTR [eax]

; 2584 :     e_info->grad[0][i] -= f;

	mov	eax, DWORD PTR [edi+1336]
	mov	ecx, DWORD PTR [eax]
	fsubr	QWORD PTR [ecx+esi*8]
	lea	eax, DWORD PTR [ecx+esi*8]
	inc	esi
	fstp	QWORD PTR [eax]
	cmp	esi, DWORD PTR _web+616
	jl	$LN43@dihedral_h@3

; 2564 :   }
; 2565 : 
; 2566 :   /* gradients */
; 2567 :   for ( i = 0 ; i < SDIM ; i++ )

	mov	ebx, DWORD PTR _web+616
	fstp	ST(1)
	fstp	ST(0)
	fld	QWORD PTR _s1s1$[ebp]
	jmp	SHORT $LN41@dihedral_h@3
$LN120@dihedral_h@3:

; 2551 : 
; 2552 :   /* gradients of various terms */
; 2553 :   for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(6)
	fstp	ST(1)
	fstp	ST(4)
	fstp	ST(2)
	fstp	ST(1)
	jmp	$LN44@dihedral_h@3
$LN129@dihedral_h@3:

; 2564 :   }
; 2565 : 
; 2566 :   /* gradients */
; 2567 :   for ( i = 0 ; i < SDIM ; i++ )

	fstp	ST(1)
$LN41@dihedral_h@3:

; 2585 :   }
; 2586 : 
; 2587 :   /* hessian */
; 2588 : 
; 2589 :   /* from Mathematica */
; 2590 : #define Sqrt(a) sqrt(a)
; 2591 : #define Power(a,b)  pow(a,(REAL)(b))
; 2592 : 
; 2593 :   gradList(Sqrt(s1s1)*(((s1s2*s1t2 - s1s1*s2t2)*t2t2)/
; 2594 :           (2.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2595 :              Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) + 
; 2596 :          s2t2/(Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2597 :              Sqrt(-Power(s1t2,2) + s1s1*t2t2)) + 
; 2598 :          (s2s2*(s1s2*s1t2 - s1s1*s2t2))/
; 2599 :           (2.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2600 :              Sqrt(-Power(s1t2,2) + s1s1*t2t2))) + 
; 2601 :      (1 - (s1s2*s1t2 - s1s1*s2t2)/
; 2602 :           (Sqrt(-Power(s1s2,2) + s1s1*s2s2)*Sqrt(-Power(s1t2,2) + s1s1*t2t2)))/
; 2603 :       (2.*Sqrt(s1s1)),Sqrt(s1s1)*
; 2604 :      (-(s1t2/(Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2605 :               Sqrt(-Power(s1t2,2) + s1s1*t2t2))) - 
; 2606 :         (s1s2*(s1s2*s1t2 - s1s1*s2t2))/
; 2607 :          (Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2608 :             Sqrt(-Power(s1t2,2) + s1s1*t2t2))),
; 2609 :     Sqrt(s1s1)*(-((s1t2*(s1s2*s1t2 - s1s1*s2t2))/
; 2610 :             (Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2611 :               Power(-Power(s1t2,2) + s1s1*t2t2,1.5))) - 
; 2612 :         s1s2/(Sqrt(-Power(s1s2,2) + s1s1*s2s2)*Sqrt(-Power(s1t2,2) + s1s1*t2t2))
; 2613 :         ),(Power(s1s1,1.5)*(s1s2*s1t2 - s1s1*s2t2))/
; 2614 :      (2.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2615 :         Sqrt(-Power(s1t2,2) + s1s1*t2t2)),
; 2616 :     Power(s1s1,1.5)/
; 2617 :      (Sqrt(-Power(s1s2,2) + s1s1*s2s2)*Sqrt(-Power(s1t2,2) + s1s1*t2t2)),
; 2618 :     (Power(s1s1,1.5)*(s1s2*s1t2 - s1s1*s2t2))/
; 2619 :      (2.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2620 :         Power(-Power(s1t2,2) + s1s1*t2t2,1.5)));

	fld	QWORD PTR __real@3ff8000000000000
	call	__CIpow
	fst	QWORD PTR tv4579[ebp]
	fmul	QWORD PTR tv4409[ebp]
	fstp	QWORD PTR tv4580[ebp]
	fld	QWORD PTR _s1t2$[ebp]
	fld	QWORD PTR __real@4000000000000000
	call	__CIpow
	fst	QWORD PTR tv4582[ebp]
	fsubr	QWORD PTR tv4399[ebp]
	fst	QWORD PTR tv4583[ebp]
	fld	QWORD PTR __real@3ff8000000000000
	call	__CIpow
	fstp	QWORD PTR tv4584[ebp]
	fld	QWORD PTR _s1s2$[ebp]
	fld	QWORD PTR __real@4000000000000000
	call	__CIpow
	fst	QWORD PTR tv4585[ebp]
	fsubr	QWORD PTR tv4403[ebp]
	fst	QWORD PTR tv4586[ebp]
	call	__CIsqrt
	fst	QWORD PTR tv4587[ebp]
	fadd	ST(0), ST(0)
	fst	QWORD PTR tv4588[ebp]
	fmul	QWORD PTR tv4584[ebp]
	fstp	QWORD PTR tv4589[ebp]
	fld	QWORD PTR tv4583[ebp]
	call	__CIsqrt
	fst	QWORD PTR tv4592[ebp]
	fmul	QWORD PTR tv4587[ebp]
	fstp	QWORD PTR tv4593[ebp]
	fld	QWORD PTR tv4586[ebp]
	fld	QWORD PTR __real@3ff8000000000000
	call	__CIpow
	fst	QWORD PTR tv4596[ebp]
	fadd	ST(0), ST(0)
	fst	QWORD PTR tv4597[ebp]
	fmul	QWORD PTR tv4592[ebp]
	fstp	QWORD PTR tv4598[ebp]
	fld	QWORD PTR tv4587[ebp]
	fmul	QWORD PTR tv4584[ebp]
	fst	QWORD PTR tv4603[ebp]
	fld	QWORD PTR tv4409[ebp]
	fmul	QWORD PTR _s1t2$[ebp]
	fdivrp	ST(1), ST(0)
	fchs
	fld	QWORD PTR _s1s2$[ebp]
	fdiv	QWORD PTR tv4593[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR tv4609[ebp]
	fld	QWORD PTR _s1s1$[ebp]
	call	__CIsqrt
	fst	QWORD PTR tv4504[ebp]
	fld	QWORD PTR tv4409[ebp]
	fld	QWORD PTR _s1s2$[ebp]
	fmul	ST(0), ST(1)
	fst	QWORD PTR tv4615[ebp]
	fld	QWORD PTR tv4596[ebp]
	fmul	QWORD PTR tv4592[ebp]
	fst	QWORD PTR tv4617[ebp]
	fld	QWORD PTR _s1t2$[ebp]
	fld	QWORD PTR tv4593[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fchs
	fxch	ST(3)
	fdivrp	ST(2), ST(0)
	fxch	ST(2)
	fsubrp	ST(1), ST(0)
	fst	QWORD PTR tv4620[ebp]
	fld	ST(2)
	fmul	QWORD PTR _s2s2$[ebp]
	fst	QWORD PTR tv4628[ebp]
	fld	ST(3)
	fmul	QWORD PTR _t2t2$[ebp]
	fld	QWORD PTR tv4589[ebp]
	fdiv	ST(1), ST(0)
	fld	QWORD PTR _s2t2$[ebp]
	fdiv	ST(0), ST(5)
	faddp	ST(2), ST(0)
	fld	QWORD PTR tv4598[ebp]
	fdiv	ST(3), ST(0)
	sub	esp, 48					; 00000030H
	fxch	ST(2)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fst	QWORD PTR tv4631[ebp]
	fxch	ST(5)
	fdiv	ST(0), ST(4)
	fld1
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR tv4635[ebp]
	fld	ST(5)
	fadd	ST(0), ST(0)
	fstp	QWORD PTR tv4637[ebp]
	fld	QWORD PTR tv4580[ebp]
	fld	ST(0)
	fdivrp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR [esp+40]
	fld	QWORD PTR tv4579[ebp]
	fdivrp	ST(4), ST(0)
	fxch	ST(3)
	fstp	QWORD PTR [esp+32]
	fdivrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [esp+24]
	fld	QWORD PTR tv4609[ebp]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR [esp+16]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR tv4635[ebp]
	fdiv	QWORD PTR tv4637[ebp]
	fxch	ST(1)
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [esp]
	call	_gradList

; 2621 : 
; 2622 :      Lcount = 0;
; 2623 :      LList(List(Sqrt(s1s1)*((-3*(s1s2*s1t2 - s1s1*s2t2)*Power(t2t2,2))/
; 2624 :             (4.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2625 :               Power(-Power(s1t2,2) + s1s1*t2t2,2.5)) - 
; 2626 :           (s2t2*t2t2)/
; 2627 :             (Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2628 :               Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) - 
; 2629 :           (s2s2*(s1s2*s1t2 - s1s1*s2t2)*t2t2)/
; 2630 :             (2.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2631 :               Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) - 
; 2632 :           (s2s2*s2t2)/
; 2633 :             (Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2634 :               Sqrt(-Power(s1t2,2) + s1s1*t2t2)) - 
; 2635 :           (3*Power(s2s2,2)*(s1s2*s1t2 - s1s1*s2t2))/
; 2636 :             (4.*Power(-Power(s1s2,2) + s1s1*s2s2,2.5)*
; 2637 :               Sqrt(-Power(s1t2,2) + s1s1*t2t2))) + 
; 2638 :       (((s1s2*s1t2 - s1s1*s2t2)*t2t2)/
; 2639 :             (2.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2640 :               Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) + 
; 2641 :           s2t2/(Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2642 :               Sqrt(-Power(s1t2,2) + s1s1*t2t2)) + 
; 2643 :           (s2s2*(s1s2*s1t2 - s1s1*s2t2))/
; 2644 :             (2.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2645 :               Sqrt(-Power(s1t2,2) + s1s1*t2t2)))/Sqrt(s1s1) - 
; 2646 :       (1 - (s1s2*s1t2 - s1s1*s2t2)/
; 2647 :             (Sqrt(-Power(s1s2,2) + s1s1*s2s2)*Sqrt(-Power(s1t2,2) + s1s1*t2t2)))/
; 2648 :         (4.*Power(s1s1,1.5)),Sqrt(s1s1)*
; 2649 :         ((s1t2*t2t2)/
; 2650 :             (2.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2651 :               Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) + 
; 2652 :           (s1s2*(s1s2*s1t2 - s1s1*s2t2)*t2t2)/
; 2653 :             (2.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2654 :               Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) + 
; 2655 :           (s1t2*s2s2)/
; 2656 :             (2.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2657 :               Sqrt(-Power(s1t2,2) + s1s1*t2t2)) + 
; 2658 :           (s1s2*s2t2)/
; 2659 :             (Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2660 :               Sqrt(-Power(s1t2,2) + s1s1*t2t2)) + 
; 2661 :           (3*s1s2*s2s2*(s1s2*s1t2 - s1s1*s2t2))/
; 2662 :             (2.*Power(-Power(s1s2,2) + s1s1*s2s2,2.5)*
; 2663 :               Sqrt(-Power(s1t2,2) + s1s1*t2t2))) + 
; 2664 :       (-(s1t2/(Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2665 :                  Sqrt(-Power(s1t2,2) + s1s1*t2t2))) - 
; 2666 :           (s1s2*(s1s2*s1t2 - s1s1*s2t2))/
; 2667 :             (Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2668 :               Sqrt(-Power(s1t2,2) + s1s1*t2t2)))/(2.*Sqrt(s1s1)),
; 2669 :      Sqrt(s1s1)*((3*s1t2*(s1s2*s1t2 - s1s1*s2t2)*t2t2)/
; 2670 :             (2.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2671 :               Power(-Power(s1t2,2) + s1s1*t2t2,2.5)) + 
; 2672 :           (s1t2*s2t2)/
; 2673 :             (Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2674 :               Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) + 
; 2675 :           (s1t2*s2s2*(s1s2*s1t2 - s1s1*s2t2))/
; 2676 :             (2.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2677 :               Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) + 
; 2678 :           (s1s2*t2t2)/
; 2679 :             (2.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2680 :               Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) + 
; 2681 :           (s1s2*s2s2)/
; 2682 :             (2.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2683 :               Sqrt(-Power(s1t2,2) + s1s1*t2t2))) + 
; 2684 :       (-((s1t2*(s1s2*s1t2 - s1s1*s2t2))/
; 2685 :               (Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2686 :                  Power(-Power(s1t2,2) + s1s1*t2t2,1.5))) - 
; 2687 :           s1s2/(Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2688 :               Sqrt(-Power(s1t2,2) + s1s1*t2t2)))/(2.*Sqrt(s1s1)),
; 2689 :      -(Power(s1s1,1.5)*(s1s2*s1t2 - s1s1*s2t2)*t2t2)/
; 2690 :         (4.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2691 :           Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) - 
; 2692 :       (Power(s1s1,1.5)*s2t2)/
; 2693 :         (2.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2694 :           Sqrt(-Power(s1t2,2) + s1s1*t2t2)) - 
; 2695 :       (3*Power(s1s1,1.5)*s2s2*(s1s2*s1t2 - s1s1*s2t2))/
; 2696 :         (4.*Power(-Power(s1s2,2) + s1s1*s2s2,2.5)*
; 2697 :           Sqrt(-Power(s1t2,2) + s1s1*t2t2)) + 
; 2698 :       (3*Sqrt(s1s1)*(s1s2*s1t2 - s1s1*s2t2))/
; 2699 :         (4.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2700 :           Sqrt(-Power(s1t2,2) + s1s1*t2t2)),
; 2701 :      -(Power(s1s1,1.5)*t2t2)/
; 2702 :         (2.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2703 :           Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) - 
; 2704 :       (Power(s1s1,1.5)*s2s2)/
; 2705 :         (2.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2706 :           Sqrt(-Power(s1t2,2) + s1s1*t2t2)) + 
; 2707 :       (3*Sqrt(s1s1))/
; 2708 :         (2.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*Sqrt(-Power(s1t2,2) + s1s1*t2t2)),
; 2709 :      (-3*Power(s1s1,1.5)*(s1s2*s1t2 - s1s1*s2t2)*t2t2)/
; 2710 :         (4.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2711 :           Power(-Power(s1t2,2) + s1s1*t2t2,2.5)) - 
; 2712 :       (Power(s1s1,1.5)*s2t2)/
; 2713 :         (2.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2714 :           Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) - 
; 2715 :       (Power(s1s1,1.5)*s2s2*(s1s2*s1t2 - s1s1*s2t2))/
; 2716 :         (4.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2717 :           Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) + 
; 2718 :       (3*Sqrt(s1s1)*(s1s2*s1t2 - s1s1*s2t2))/
; 2719 :         (4.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2720 :           Power(-Power(s1t2,2) + s1s1*t2t2,1.5))),
; 2721 :     List(Sqrt(s1s1)*((s1t2*t2t2)/
; 2722 :             (2.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2723 :               Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) + 
; 2724 :           (s1s2*(s1s2*s1t2 - s1s1*s2t2)*t2t2)/
; 2725 :             (2.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2726 :               Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) + 
; 2727 :           (s1t2*s2s2)/
; 2728 :             (2.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2729 :               Sqrt(-Power(s1t2,2) + s1s1*t2t2)) + 
; 2730 :           (s1s2*s2t2)/
; 2731 :             (Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2732 :               Sqrt(-Power(s1t2,2) + s1s1*t2t2)) + 
; 2733 :           (3*s1s2*s2s2*(s1s2*s1t2 - s1s1*s2t2))/
; 2734 :             (2.*Power(-Power(s1s2,2) + s1s1*s2s2,2.5)*
; 2735 :               Sqrt(-Power(s1t2,2) + s1s1*t2t2))) + 
; 2736 :       (-(s1t2/(Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2737 :                  Sqrt(-Power(s1t2,2) + s1s1*t2t2))) - 
; 2738 :           (s1s2*(s1s2*s1t2 - s1s1*s2t2))/
; 2739 :             (Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2740 :               Sqrt(-Power(s1t2,2) + s1s1*t2t2)))/(2.*Sqrt(s1s1)),
; 2741 :      Sqrt(s1s1)*((-2*s1s2*s1t2)/
; 2742 :           (Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2743 :              Sqrt(-Power(s1t2,2) + s1s1*t2t2)) - 
; 2744 :          (3*Power(s1s2,2)*(s1s2*s1t2 - s1s1*s2t2))/
; 2745 :           (Power(-Power(s1s2,2) + s1s1*s2s2,2.5)*
; 2746 :              Sqrt(-Power(s1t2,2) + s1s1*t2t2)) - 
; 2747 :          (s1s2*s1t2 - s1s1*s2t2)/
; 2748 :           (Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2749 :              Sqrt(-Power(s1t2,2) + s1s1*t2t2))),
; 2750 :      Sqrt(s1s1)*(-(Power(s1t2,2)/
; 2751 :              (Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2752 :                 Power(-Power(s1t2,2) + s1s1*t2t2,1.5))) - 
; 2753 :          (s1s2*s1t2*(s1s2*s1t2 - s1s1*s2t2))/
; 2754 :           (Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2755 :              Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) - 
; 2756 :          Power(s1s2,2)/
; 2757 :           (Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2758 :              Sqrt(-Power(s1t2,2) + s1s1*t2t2)) - 
; 2759 :          1/(Sqrt(-Power(s1s2,2) + s1s1*s2s2)*Sqrt(-Power(s1t2,2) + s1s1*t2t2))),
; 2760 :      (Power(s1s1,1.5)*s1t2)/
; 2761 :         (2.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2762 :           Sqrt(-Power(s1t2,2) + s1s1*t2t2)) + 
; 2763 :       (3*Power(s1s1,1.5)*s1s2*(s1s2*s1t2 - s1s1*s2t2))/
; 2764 :         (2.*Power(-Power(s1s2,2) + s1s1*s2s2,2.5)*
; 2765 :           Sqrt(-Power(s1t2,2) + s1s1*t2t2)),
; 2766 :      (Power(s1s1,1.5)*s1s2)/
; 2767 :       (Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*Sqrt(-Power(s1t2,2) + s1s1*t2t2)),
; 2768 :      (Power(s1s1,1.5)*s1t2)/
; 2769 :         (2.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2770 :           Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) + 
; 2771 :       (Power(s1s1,1.5)*s1s2*(s1s2*s1t2 - s1s1*s2t2))/
; 2772 :         (2.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2773 :           Power(-Power(s1t2,2) + s1s1*t2t2,1.5))),
; 2774 :     List(Sqrt(s1s1)*((3*s1t2*(s1s2*s1t2 - s1s1*s2t2)*t2t2)/
; 2775 :             (2.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2776 :               Power(-Power(s1t2,2) + s1s1*t2t2,2.5)) + 
; 2777 :           (s1t2*s2t2)/
; 2778 :             (Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2779 :               Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) + 
; 2780 :           (s1t2*s2s2*(s1s2*s1t2 - s1s1*s2t2))/
; 2781 :             (2.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2782 :               Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) + 
; 2783 :           (s1s2*t2t2)/
; 2784 :             (2.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2785 :               Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) + 
; 2786 :           (s1s2*s2s2)/
; 2787 :             (2.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2788 :               Sqrt(-Power(s1t2,2) + s1s1*t2t2))) + 
; 2789 :       (-((s1t2*(s1s2*s1t2 - s1s1*s2t2))/
; 2790 :               (Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2791 :                  Power(-Power(s1t2,2) + s1s1*t2t2,1.5))) - 
; 2792 :           s1s2/(Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2793 :               Sqrt(-Power(s1t2,2) + s1s1*t2t2)))/(2.*Sqrt(s1s1)),
; 2794 :      Sqrt(s1s1)*(-(Power(s1t2,2)/
; 2795 :              (Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2796 :                 Power(-Power(s1t2,2) + s1s1*t2t2,1.5))) - 
; 2797 :          (s1s2*s1t2*(s1s2*s1t2 - s1s1*s2t2))/
; 2798 :           (Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2799 :              Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) - 
; 2800 :          Power(s1s2,2)/
; 2801 :           (Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2802 :              Sqrt(-Power(s1t2,2) + s1s1*t2t2)) - 
; 2803 :          1/(Sqrt(-Power(s1s2,2) + s1s1*s2s2)*Sqrt(-Power(s1t2,2) + s1s1*t2t2))),
; 2804 :      Sqrt(s1s1)*((-3*Power(s1t2,2)*(s1s2*s1t2 - s1s1*s2t2))/
; 2805 :           (Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2806 :              Power(-Power(s1t2,2) + s1s1*t2t2,2.5)) - 
; 2807 :          (2*s1s2*s1t2)/
; 2808 :           (Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2809 :              Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) - 
; 2810 :          (s1s2*s1t2 - s1s1*s2t2)/
; 2811 :           (Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2812 :              Power(-Power(s1t2,2) + s1s1*t2t2,1.5))),
; 2813 :      (Power(s1s1,1.5)*s1t2*(s1s2*s1t2 - s1s1*s2t2))/
; 2814 :         (2.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2815 :           Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) + 
; 2816 :       (Power(s1s1,1.5)*s1s2)/
; 2817 :         (2.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2818 :           Sqrt(-Power(s1t2,2) + s1s1*t2t2)),
; 2819 :      (Power(s1s1,1.5)*s1t2)/
; 2820 :       (Sqrt(-Power(s1s2,2) + s1s1*s2s2)*Power(-Power(s1t2,2) + s1s1*t2t2,1.5)),
; 2821 :      (3*Power(s1s1,1.5)*s1t2*(s1s2*s1t2 - s1s1*s2t2))/
; 2822 :         (2.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2823 :           Power(-Power(s1t2,2) + s1s1*t2t2,2.5)) + 
; 2824 :       (Power(s1s1,1.5)*s1s2)/
; 2825 :         (2.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2826 :           Power(-Power(s1t2,2) + s1s1*t2t2,1.5))),
; 2827 :     List((Sqrt(s1s1)*(s1s2*s1t2 - s1s1*s2t2))/
; 2828 :         (4.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2829 :           Sqrt(-Power(s1t2,2) + s1s1*t2t2)) + 
; 2830 :       Sqrt(s1s1)*(-(s1s1*(s1s2*s1t2 - s1s1*s2t2)*t2t2)/
; 2831 :             (4.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2832 :               Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) - 
; 2833 :           (s1s1*s2t2)/
; 2834 :             (2.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2835 :               Sqrt(-Power(s1t2,2) + s1s1*t2t2)) - 
; 2836 :           (3*s1s1*s2s2*(s1s2*s1t2 - s1s1*s2t2))/
; 2837 :             (4.*Power(-Power(s1s2,2) + s1s1*s2s2,2.5)*
; 2838 :               Sqrt(-Power(s1t2,2) + s1s1*t2t2)) + 
; 2839 :           (s1s2*s1t2 - s1s1*s2t2)/
; 2840 :             (2.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2841 :               Sqrt(-Power(s1t2,2) + s1s1*t2t2))),
; 2842 :      Sqrt(s1s1)*((s1s1*s1t2)/
; 2843 :           (2.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2844 :              Sqrt(-Power(s1t2,2) + s1s1*t2t2)) + 
; 2845 :          (3*s1s1*s1s2*(s1s2*s1t2 - s1s1*s2t2))/
; 2846 :           (2.*Power(-Power(s1s2,2) + s1s1*s2s2,2.5)*
; 2847 :              Sqrt(-Power(s1t2,2) + s1s1*t2t2))),
; 2848 :      Sqrt(s1s1)*((s1s1*s1t2*(s1s2*s1t2 - s1s1*s2t2))/
; 2849 :           (2.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2850 :              Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) + 
; 2851 :          (s1s1*s1s2)/
; 2852 :           (2.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2853 :              Sqrt(-Power(s1t2,2) + s1s1*t2t2))),
; 2854 :      (-3*Power(s1s1,2.5)*(s1s2*s1t2 - s1s1*s2t2))/
; 2855 :       (4.*Power(-Power(s1s2,2) + s1s1*s2s2,2.5)*
; 2856 :          Sqrt(-Power(s1t2,2) + s1s1*t2t2)),
; 2857 :      -Power(s1s1,2.5)/
; 2858 :       (2.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2859 :          Sqrt(-Power(s1t2,2) + s1s1*t2t2)),
; 2860 :      -(Power(s1s1,2.5)*(s1s2*s1t2 - s1s1*s2t2))/
; 2861 :       (4.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2862 :          Power(-Power(s1t2,2) + s1s1*t2t2,1.5))),
; 2863 :     List(Sqrt(s1s1)/
; 2864 :         (2.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*Sqrt(-Power(s1t2,2) + s1s1*t2t2))
; 2865 :         + Sqrt(s1s1)*(-(s1s1*t2t2)/
; 2866 :             (2.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2867 :               Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) - 
; 2868 :           (s1s1*s2s2)/
; 2869 :             (2.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2870 :               Sqrt(-Power(s1t2,2) + s1s1*t2t2)) + 
; 2871 :           1/(Sqrt(-Power(s1s2,2) + s1s1*s2s2)*Sqrt(-Power(s1t2,2) + s1s1*t2t2)))
; 2872 :       ,(Power(s1s1,1.5)*s1s2)/
; 2873 :       (Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*Sqrt(-Power(s1t2,2) + s1s1*t2t2)),
; 2874 :      (Power(s1s1,1.5)*s1t2)/
; 2875 :       (Sqrt(-Power(s1s2,2) + s1s1*s2s2)*Power(-Power(s1t2,2) + s1s1*t2t2,1.5)),
; 2876 :      -Power(s1s1,2.5)/
; 2877 :       (2.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2878 :          Sqrt(-Power(s1t2,2) + s1s1*t2t2)),0,
; 2879 :      -Power(s1s1,2.5)/
; 2880 :       (2.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2881 :          Power(-Power(s1t2,2) + s1s1*t2t2,1.5))),
; 2882 :     List((Sqrt(s1s1)*(s1s2*s1t2 - s1s1*s2t2))/
; 2883 :         (4.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2884 :           Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) + 
; 2885 :       Sqrt(s1s1)*((-3*s1s1*(s1s2*s1t2 - s1s1*s2t2)*t2t2)/
; 2886 :             (4.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2887 :               Power(-Power(s1t2,2) + s1s1*t2t2,2.5)) - 
; 2888 :           (s1s1*s2t2)/
; 2889 :             (2.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2890 :               Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) - 
; 2891 :           (s1s1*s2s2*(s1s2*s1t2 - s1s1*s2t2))/
; 2892 :             (4.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2893 :               Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) + 
; 2894 :           (s1s2*s1t2 - s1s1*s2t2)/
; 2895 :             (2.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2896 :               Power(-Power(s1t2,2) + s1s1*t2t2,1.5))),
; 2897 :      Sqrt(s1s1)*((s1s1*s1t2)/
; 2898 :           (2.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2899 :              Power(-Power(s1t2,2) + s1s1*t2t2,1.5)) + 
; 2900 :          (s1s1*s1s2*(s1s2*s1t2 - s1s1*s2t2))/
; 2901 :           (2.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2902 :              Power(-Power(s1t2,2) + s1s1*t2t2,1.5))),
; 2903 :      Sqrt(s1s1)*((3*s1s1*s1t2*(s1s2*s1t2 - s1s1*s2t2))/
; 2904 :           (2.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2905 :              Power(-Power(s1t2,2) + s1s1*t2t2,2.5)) + 
; 2906 :          (s1s1*s1s2)/
; 2907 :           (2.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2908 :              Power(-Power(s1t2,2) + s1s1*t2t2,1.5))),
; 2909 :      -(Power(s1s1,2.5)*(s1s2*s1t2 - s1s1*s2t2))/
; 2910 :       (4.*Power(-Power(s1s2,2) + s1s1*s2s2,1.5)*
; 2911 :          Power(-Power(s1t2,2) + s1s1*t2t2,1.5)),
; 2912 :      -Power(s1s1,2.5)/
; 2913 :       (2.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2914 :          Power(-Power(s1t2,2) + s1s1*t2t2,1.5)),
; 2915 :      (-3*Power(s1s1,2.5)*(s1s2*s1t2 - s1s1*s2t2))/
; 2916 :       (4.*Sqrt(-Power(s1s2,2) + s1s1*s2s2)*
; 2917 :          Power(-Power(s1t2,2) + s1s1*t2t2,2.5))));

	fld	QWORD PTR _s1s1$[ebp]
	xor	esi, esi
	fld	QWORD PTR __real@4004000000000000
	add	esp, 48					; 00000030H
	mov	DWORD PTR _Lcount, esi
	call	__CIpow
	fst	QWORD PTR tv4641[ebp]
	fmul	QWORD PTR __real@c008000000000000
	fmul	QWORD PTR tv4409[ebp]
	fstp	QWORD PTR tv4643[ebp]
	fld	QWORD PTR tv4583[ebp]
	fld	QWORD PTR __real@4004000000000000
	call	__CIpow
	fst	QWORD PTR tv4645[ebp]
	fld	QWORD PTR tv4587[ebp]
	fld	QWORD PTR __real@4010000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv4646[ebp]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv4647[ebp]
	fld	QWORD PTR tv4641[ebp]
	fld	QWORD PTR tv4589[ebp]
	fdivr	ST(0), ST(1)
	fchs
	fstp	QWORD PTR tv4651[ebp]
	fld	QWORD PTR tv4596[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv4654[ebp]
	fld	QWORD PTR tv4584[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv4655[ebp]
	fld	ST(2)
	fld	QWORD PTR tv4409[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fdivrp	ST(2), ST(0)
	fxch	ST(1)
	fchs
	fstp	QWORD PTR tv4658[ebp]
	fld	QWORD PTR _s1s1$[ebp]
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv4659[ebp]
	fld	QWORD PTR tv4588[ebp]
	fmul	ST(5), ST(0)
	fxch	ST(5)
	fstp	QWORD PTR tv4663[ebp]
	fld	QWORD PTR _s1s2$[ebp]
	fld	ST(0)
	fmul	ST(0), ST(2)
	fstp	QWORD PTR tv4666[ebp]
	fld	QWORD PTR tv4597[ebp]
	fmul	ST(0), ST(4)
	fstp	QWORD PTR tv4674[ebp]
	fld	QWORD PTR _s1t2$[ebp]
	fld	ST(0)
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR tv4677[ebp]
	fld	QWORD PTR tv4504[ebp]
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR tv4699[ebp]
	fld	QWORD PTR tv4646[ebp]
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR tv4701[ebp]
	fxch	ST(2)
	fdiv	QWORD PTR tv4598[ebp]
	fchs
	fstp	QWORD PTR tv4706[ebp]
	fld	QWORD PTR tv4579[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv4707[ebp]
	fdiv	QWORD PTR tv4603[ebp]
	fstp	QWORD PTR tv4709[ebp]
	fmulp	ST(1), ST(0)
	fst	QWORD PTR tv4710[ebp]
	fdiv	QWORD PTR tv4617[ebp]
	fstp	QWORD PTR tv4712[ebp]
	fld1
	fdiv	QWORD PTR tv4593[ebp]
	fstp	QWORD PTR tv4713[ebp]
	fmul	QWORD PTR tv4592[ebp]
	fstp	QWORD PTR tv4722[ebp]
	fld	QWORD PTR tv4586[ebp]
	fld	QWORD PTR __real@4004000000000000
	call	__CIpow
	fst	QWORD PTR tv4726[ebp]
	fld	QWORD PTR __real@4010000000000000
	fmul	ST(0), ST(1)
	fld	QWORD PTR tv4592[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv4728[ebp]
	fxch	ST(1)
	fadd	ST(0), ST(0)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv4742[ebp]
	fmul	QWORD PTR tv4654[ebp]
	fstp	QWORD PTR tv4764[ebp]
	fld	QWORD PTR tv4579[ebp]
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv4768[ebp]
	fld	QWORD PTR tv4582[ebp]
	fld	QWORD PTR tv4603[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fchs
	fld	QWORD PTR tv4409[ebp]
	fld	QWORD PTR tv4407[ebp]
	fmul	ST(0), ST(1)
	fld	QWORD PTR tv4596[ebp]
	fmul	QWORD PTR tv4584[ebp]
	fdivp	ST(1), ST(0)
	fsubp	ST(2), ST(0)
	fld	QWORD PTR tv4585[ebp]
	fdiv	QWORD PTR tv4617[ebp]
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fsub	QWORD PTR tv4713[ebp]
	fld	QWORD PTR tv4504[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv4807[ebp]
	fld	QWORD PTR _s2s2$[ebp]
	fld	QWORD PTR _s1t2$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv4817[ebp]
	fld	ST(1)
	fmulp	ST(6), ST(0)
	fxch	ST(5)
	fmul	ST(0), ST(3)
	fld	QWORD PTR _t2t2$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fdiv	QWORD PTR tv4663[ebp]
	fld	QWORD PTR _s2t2$[ebp]
	fmul	ST(0), ST(3)
	fdivrp	ST(6), ST(0)
	faddp	ST(5), ST(0)
	fxch	ST(5)
	fmul	ST(0), ST(3)
	fdiv	QWORD PTR tv4674[ebp]
	faddp	ST(4), ST(0)
	fld	ST(4)
	fld	QWORD PTR _s1s2$[ebp]
	fmul	ST(1), ST(0)
	fld	QWORD PTR tv4589[ebp]
	fdiv	ST(2), ST(0)
	fxch	ST(6)
	faddp	ST(2), ST(0)
	fmul	QWORD PTR _s2s2$[ebp]
	fdiv	QWORD PTR tv4598[ebp]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fld	QWORD PTR tv4609[ebp]
	fdiv	QWORD PTR tv4637[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR tv4833[ebp]
	fld	ST(4)
	fmul	ST(0), ST(1)
	fdiv	ST(0), ST(4)
	fld	QWORD PTR tv4615[ebp]
	fmul	ST(0), ST(6)
	fdiv	QWORD PTR tv4674[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv4817[ebp]
	fdiv	QWORD PTR tv4598[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _s2t2$[ebp]
	fmul	QWORD PTR _s1s2$[ebp]
	fdiv	QWORD PTR tv4617[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _s1s2$[ebp]
	fmul	QWORD PTR __real@4008000000000000
	fmul	QWORD PTR _s2s2$[ebp]
	fmul	ST(0), ST(4)
	fdiv	QWORD PTR tv4742[ebp]
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fld	QWORD PTR tv4620[ebp]
	fdiv	QWORD PTR tv4637[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR tv4883[ebp]
	fld	QWORD PTR tv4579[ebp]
	fld	QWORD PTR _s2t2$[ebp]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR tv4889[ebp]
	fmul	QWORD PTR _s2s2$[ebp]
	fstp	QWORD PTR tv4893[ebp]
	fld	ST(1)
	fmul	QWORD PTR __real@4008000000000000
	fst	QWORD PTR tv4898[ebp]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR tv4899[ebp]
	fld	QWORD PTR tv4643[ebp]
	fld	QWORD PTR tv4647[ebp]
	sub	esp, 48					; 00000030H
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [esp+40]
	fld	QWORD PTR tv4651[ebp]
	fstp	QWORD PTR [esp+32]
	fld	QWORD PTR tv4658[ebp]
	fstp	QWORD PTR [esp+24]
	fld	QWORD PTR tv4659[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(3)
	fdiv	QWORD PTR tv4663[ebp]
	fld	QWORD PTR tv4666[ebp]
	fld	ST(0)
	fdiv	ST(0), ST(6)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(3)
	fstp	QWORD PTR [esp+16]
	fmul	ST(0), ST(3)
	fdiv	QWORD PTR tv4674[ebp]
	fld	QWORD PTR tv4677[ebp]
	fdiv	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR _s1s1$[ebp]
	fmul	QWORD PTR __real@c008000000000000
	fmul	ST(0), ST(3)
	fmulp	ST(5), ST(0)
	fdivp	ST(4), ST(0)
	fld	QWORD PTR tv4408[ebp]
	fdiv	ST(0), ST(3)
	fsubp	ST(4), ST(0)
	fld	ST(1)
	fmul	QWORD PTR tv4403[ebp]
	fdiv	QWORD PTR tv4655[ebp]
	fsubp	ST(4), ST(0)
	fxch	ST(1)
	fdivrp	ST(2), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	fld	QWORD PTR tv4699[ebp]
	fdiv	QWORD PTR tv4701[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [esp]
	call	_List
	fld	QWORD PTR tv4651[ebp]
	add	esp, 48					; 00000030H
	push	eax
	sub	esp, 48					; 00000030H
	fstp	QWORD PTR [esp+40]
	fldz
	fstp	QWORD PTR [esp+32]
	fld	QWORD PTR tv4706[ebp]
	fstp	QWORD PTR [esp+24]
	fld	QWORD PTR tv4709[ebp]
	fstp	QWORD PTR [esp+16]
	fld	QWORD PTR tv4712[ebp]
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR tv4403[ebp]
	fdiv	QWORD PTR tv4598[ebp]
	fld	QWORD PTR tv4399[ebp]
	fdiv	QWORD PTR tv4589[ebp]
	faddp	ST(1), ST(0)
	fsubr	QWORD PTR tv4713[ebp]
	fld	QWORD PTR tv4504[ebp]
	fmul	ST(1), ST(0)
	fdiv	QWORD PTR tv4722[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [esp]
	call	_List
	fld	QWORD PTR tv4658[ebp]
	add	esp, 48					; 00000030H
	push	eax
	sub	esp, 48					; 00000030H
	fstp	QWORD PTR [esp+40]
	fld	QWORD PTR tv4706[ebp]
	fstp	QWORD PTR [esp+32]
	fld	QWORD PTR tv4643[ebp]
	fld	QWORD PTR tv4728[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [esp+24]
	fld	QWORD PTR tv4677[ebp]
	fld	ST(0)
	fld	QWORD PTR tv4409[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fdiv	QWORD PTR tv4674[ebp]
	fld	QWORD PTR tv4666[ebp]
	fld	QWORD PTR tv4598[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv4504[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [esp+16]
	fld	QWORD PTR tv4659[ebp]
	fld	QWORD PTR _s1s2$[ebp]
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(4)
	fdiv	QWORD PTR tv4742[ebp]
	fxch	ST(5)
	fdiv	ST(0), ST(3)
	faddp	ST(5), ST(0)
	fxch	ST(4)
	fmul	ST(0), ST(1)
	fstp	QWORD PTR [esp+8]
	fld	ST(2)
	fdiv	ST(0), ST(2)
	fld	ST(3)
	fmul	QWORD PTR _s1s1$[ebp]
	fmul	QWORD PTR _t2t2$[ebp]
	fdiv	QWORD PTR tv4655[ebp]
	fld	QWORD PTR tv4408[ebp]
	fdivrp	ST(4), ST(0)
	faddp	ST(3), ST(0)
	fxch	ST(4)
	fmul	QWORD PTR _s2s2$[ebp]
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fdivrp	ST(4), ST(0)
	faddp	ST(3), ST(0)
	fxch	ST(1)
	fsubrp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	fld	QWORD PTR tv4699[ebp]
	fdiv	QWORD PTR tv4764[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [esp]
	call	_List
	fld	QWORD PTR tv4768[ebp]
	add	esp, 48					; 00000030H
	fld	QWORD PTR _s1t2$[ebp]
	push	eax
	fmul	ST(1), ST(0)
	sub	esp, 48					; 00000030H
	fld	QWORD PTR tv4409[ebp]
	fmul	ST(2), ST(0)
	fxch	ST(2)
	fdiv	QWORD PTR tv4663[ebp]
	fld	QWORD PTR tv4710[ebp]
	fld	QWORD PTR tv4589[ebp]
	fdivr	ST(0), ST(1)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [esp+40]
	fld	QWORD PTR tv4709[ebp]
	fstp	QWORD PTR [esp+32]
	fld	QWORD PTR tv4707[ebp]
	fmul	ST(0), ST(3)
	fdiv	QWORD PTR tv4674[ebp]
	fxch	ST(1)
	fdiv	QWORD PTR tv4598[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [esp+24]
	fld	QWORD PTR tv4582[ebp]
	fmul	QWORD PTR __real@c008000000000000
	fmul	ST(0), ST(2)
	fld	QWORD PTR tv4645[ebp]
	fmul	QWORD PTR tv4587[ebp]
	fdivp	ST(1), ST(0)
	fld	QWORD PTR _s1s2$[ebp]
	fadd	ST(0), ST(0)
	fmulp	ST(2), ST(0)
	fld	QWORD PTR tv4603[ebp]
	fdiv	ST(2), ST(0)
	fxch	ST(1)
	fsubrp	ST(2), ST(0)
	fdivp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	fmul	QWORD PTR tv4504[ebp]
	fstp	QWORD PTR [esp+16]
	fld	QWORD PTR tv4807[ebp]
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR tv4833[ebp]
	fstp	QWORD PTR [esp]
	call	_List
	fld	QWORD PTR tv4710[ebp]
	add	esp, 48					; 00000030H
	fld	QWORD PTR tv4409[ebp]
	push	eax
	fmul	ST(1), ST(0)
	sub	esp, 48					; 00000030H
	fxch	ST(1)
	fdiv	QWORD PTR tv4674[ebp]
	fld	QWORD PTR tv4707[ebp]
	fld	QWORD PTR tv4589[ebp]
	fdivr	ST(0), ST(1)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [esp+40]
	fld	QWORD PTR tv4712[ebp]
	fstp	QWORD PTR [esp+32]
	fld	QWORD PTR tv4768[ebp]
	fld	QWORD PTR _s1s2$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(3)
	fdiv	QWORD PTR tv4742[ebp]
	fxch	ST(2)
	fdiv	QWORD PTR tv4598[ebp]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [esp+24]
	fld	QWORD PTR tv4807[ebp]
	fstp	QWORD PTR [esp+16]
	fmul	QWORD PTR __real@c000000000000000
	fmul	QWORD PTR _s1t2$[ebp]
	fld	QWORD PTR tv4617[ebp]
	fdiv	ST(1), ST(0)
	fld	QWORD PTR tv4585[ebp]
	fmul	QWORD PTR __real@4008000000000000
	fmul	ST(0), ST(3)
	fld	QWORD PTR tv4726[ebp]
	fmul	QWORD PTR tv4592[ebp]
	fdivp	ST(1), ST(0)
	fsubp	ST(2), ST(0)
	fdivp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	fmul	QWORD PTR tv4504[ebp]
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR tv4883[ebp]
	fstp	QWORD PTR [esp]
	call	_List
	fld	QWORD PTR tv4579[ebp]
	add	esp, 48					; 00000030H
	fld	QWORD PTR __real@c008000000000000
	push	eax
	fmul	ST(0), ST(1)
	fld	QWORD PTR tv4409[ebp]
	fmul	ST(1), ST(0)
	fld	QWORD PTR _t2t2$[ebp]
	fmul	ST(2), ST(0)
	fxch	ST(2)
	fdiv	QWORD PTR tv4647[ebp]
	fld	QWORD PTR tv4889[ebp]
	fld	ST(0)
	fld	QWORD PTR tv4589[ebp]
	sub	esp, 40					; 00000028H
	fdiv	ST(1), ST(0)
	fxch	ST(3)
	fsubrp	ST(1), ST(0)
	fld	QWORD PTR tv4893[ebp]
	fmul	ST(0), ST(4)
	fld	QWORD PTR tv4655[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(2)
	fsubrp	ST(1), ST(0)
	fld	QWORD PTR tv4899[ebp]
	fdiv	QWORD PTR tv4701[ebp]
	faddp	ST(1), ST(0)
	fstp	QWORD PTR [esp+32]
	fld	QWORD PTR tv4898[ebp]
	fdiv	QWORD PTR tv4722[ebp]
	fxch	ST(6)
	fmul	ST(0), ST(5)
	fdivrp	ST(3), ST(0)
	fld	QWORD PTR tv4893[ebp]
	fld	QWORD PTR tv4598[ebp]
	fdiv	ST(1), ST(0)
	fxch	ST(4)
	faddp	ST(1), ST(0)
	fsubp	ST(6), ST(0)
	fxch	ST(5)
	fstp	QWORD PTR [esp+24]
	fld	QWORD PTR tv4899[ebp]
	fdiv	QWORD PTR tv4764[ebp]
	fld	QWORD PTR tv4580[ebp]
	fmul	ST(0), ST(5)
	fdivrp	ST(6), ST(0)
	fxch	ST(1)
	fdivrp	ST(2), ST(0)
	fxch	ST(4)
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv4768[ebp]
	fmul	QWORD PTR _s2s2$[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fdiv	QWORD PTR tv4728[ebp]
	faddp	ST(1), ST(0)
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [esp+16]
	fld	QWORD PTR tv4833[ebp]
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR tv4883[ebp]
	fstp	QWORD PTR [esp]
	fld	QWORD PTR __real@4000000000000000
	call	__CIpow
	fld	QWORD PTR tv4409[ebp]
	fmul	QWORD PTR __real@c008000000000000
	fmulp	ST(1), ST(0)
	fdiv	QWORD PTR tv4647[ebp]
	fld	QWORD PTR _s2t2$[ebp]
	fld	ST(0)
	fld	QWORD PTR _t2t2$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fdiv	QWORD PTR tv4603[ebp]
	fsubp	ST(3), ST(0)
	fmul	QWORD PTR tv4628[ebp]
	fdiv	QWORD PTR tv4674[ebp]
	fsubp	ST(2), ST(0)
	fld	QWORD PTR _s2s2$[ebp]
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fdiv	QWORD PTR tv4617[ebp]
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR tv6785[ebp]
	fld	QWORD PTR __real@4000000000000000
	call	__CIpow
	fmul	QWORD PTR __real@4008000000000000
	fmul	QWORD PTR tv4409[ebp]
	fdiv	QWORD PTR tv4728[ebp]
	fsubr	QWORD PTR tv6785[ebp]
	fld	QWORD PTR tv4504[ebp]
	fmul	ST(1), ST(0)
	fdivr	QWORD PTR tv4631[ebp]
	sub	esp, 8
	faddp	ST(1), ST(0)
	fld	QWORD PTR tv4579[ebp]
	fmul	QWORD PTR __real@4010000000000000
	fdivr	QWORD PTR tv4635[ebp]
	fsubp	ST(1), ST(0)
	fstp	QWORD PTR [esp]
	call	_List
	add	esp, 48					; 00000030H
	push	eax
	call	_LList
	add	esp, 24					; 00000018H
	npad	4
$LL116@dihedral_h@3:

; 2932 :       for ( j = 0 ; j < 3 ; j++ )

	xor	edx, edx
$LL117@dihedral_h@3:

; 2933 :          for ( k = 0 ; k < SDIM ; k++ )

	test	ebx, ebx
	jle	SHORT $LN36@dihedral_h@3
	lea	eax, DWORD PTR [esi+edx]
	lea	edi, DWORD PTR [eax+eax*2]
	mov	ecx, ebx
	and	ecx, 536870911				; 1fffffffH
	add	edi, edi
	add	ecx, ecx
	lea	edi, DWORD PTR _dqdx$[ebp+edi*8]
	xor	eax, eax
	rep stosd
$LN36@dihedral_h@3:

; 2932 :       for ( j = 0 ; j < 3 ; j++ )

	inc	edx
	cmp	edx, 3
	jl	SHORT $LL117@dihedral_h@3

; 2918 : 
; 2919 : #define S1S1 0
; 2920 : #define S1S2 1
; 2921 : #define S1T2 2
; 2922 : #define S2S2 3
; 2923 : #define S2T2 4
; 2924 : #define T2T2 5
; 2925 : #define S1 0
; 2926 : #define T2 1
; 2927 : #define S2 2
; 2928 :  
; 2929 :     /* chain rule intermediate partials */
; 2930 : 
; 2931 :     for ( i = 0 ; i < 6 ; i++ )

	add	esi, 3
	cmp	esi, 18					; 00000012H
	jl	SHORT $LL116@dihedral_h@3

; 2934 :              dqdx[i][j][k] = 0.0;
; 2935 : 
; 2936 :     for ( i = 0 ; i < SDIM ; i++ )

	fld	QWORD PTR __real@4000000000000000
	xor	eax, eax
	test	ebx, ebx
	jle	SHORT $LN29@dihedral_h@3
$LN31@dihedral_h@3:

; 2937 :     {
; 2938 :       dqdx[S1S1][S1][i] = 2*s1[i];

	fld	QWORD PTR _s1$[ebp+eax*8]
	inc	eax
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _dqdx$[ebp+eax*8-8]

; 2939 :       dqdx[S1S2][S1][i] = s2[i];

	fld	QWORD PTR _s2$[ebp+eax*8-8]
	fstp	QWORD PTR _dqdx$[ebp+eax*8+136]

; 2940 :       dqdx[S1S2][S2][i] = s1[i];

	fld	QWORD PTR _s1$[ebp+eax*8-8]
	fstp	QWORD PTR _dqdx$[ebp+eax*8+232]

; 2941 :       dqdx[S1T2][S1][i] = t2[i];

	fld	QWORD PTR _t2$[ebp+eax*8-8]
	fstp	QWORD PTR _dqdx$[ebp+eax*8+280]

; 2942 :       dqdx[S1T2][T2][i] = s1[i];

	fld	QWORD PTR _s1$[ebp+eax*8-8]
	fstp	QWORD PTR _dqdx$[ebp+eax*8+328]

; 2943 :       dqdx[S2S2][S2][i] = 2*s2[i];

	fld	QWORD PTR _s2$[ebp+eax*8-8]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _dqdx$[ebp+eax*8+520]

; 2944 :       dqdx[S2T2][S2][i] = t2[i];

	fld	QWORD PTR _t2$[ebp+eax*8-8]
	fstp	QWORD PTR _dqdx$[ebp+eax*8+664]

; 2945 :       dqdx[S2T2][T2][i] = s2[i];

	fld	QWORD PTR _s2$[ebp+eax*8-8]
	fstp	QWORD PTR _dqdx$[ebp+eax*8+616]

; 2946 :       dqdx[T2T2][T2][i] = 2*t2[i];

	fld	QWORD PTR _t2$[ebp+eax*8-8]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _dqdx$[ebp+eax*8+760]
	cmp	eax, ebx
	jl	SHORT $LN31@dihedral_h@3
$LN29@dihedral_h@3:

; 2947 :     }
; 2948 : 
; 2949 :     for ( i = 0 ; i < 6 ; i++ )
; 2950 :       for ( j = 0 ; j < 3 ; j++ )
; 2951 :          for ( k = 0 ; k < 3 ; k++ )
; 2952 :              ddqdxx[i][j][k] = 0.0;

	xor	eax, eax
	mov	ecx, 108				; 0000006cH
	lea	edi, DWORD PTR _ddqdxx$[ebp]
	rep stosd

; 2953 : 
; 2954 :     ddqdxx[S1S1][S1][S1] = 2.0;

	fst	QWORD PTR _ddqdxx$[ebp]

; 2955 :     ddqdxx[S1S2][S1][S2] = 1.0;

	fld1
	fst	QWORD PTR _ddqdxx$[ebp+88]

; 2956 :     ddqdxx[S1S2][S2][S1] = 1.0;

	fst	QWORD PTR _ddqdxx$[ebp+120]

; 2957 :     ddqdxx[S1T2][S1][T2] = 1.0;

	fst	QWORD PTR _ddqdxx$[ebp+152]
	mov	DWORD PTR tv7252[ebp], eax

; 2958 :     ddqdxx[S1T2][T2][S1] = 1.0;

	fst	QWORD PTR _ddqdxx$[ebp+168]
	mov	DWORD PTR tv7254[ebp], eax

; 2959 :     ddqdxx[S2S2][S2][S2] = 2.0;
; 2960 :     ddqdxx[S2T2][S2][T2] = 1.0;

	fst	QWORD PTR _ddqdxx$[ebp+344]
	mov	DWORD PTR tv7256[ebp], eax

; 2961 :     ddqdxx[S2T2][T2][S2] = 1.0;

	fst	QWORD PTR _ddqdxx$[ebp+328]
	fxch	ST(1)
	fst	QWORD PTR _ddqdxx$[ebp+280]

; 2962 :     ddqdxx[T2T2][T2][T2] = 2.0;

	fstp	QWORD PTR _ddqdxx$[ebp+392]
	fldz
$LN118@dihedral_h@3:

; 2967 :      for ( i = 0 ; i < SDIM ; i++ ) /* dimension on first */

	xor	edi, edi
	test	ebx, ebx
	jle	$LN18@dihedral_h@3
$LN112@dihedral_h@3:

; 2968 :       for ( nn = 0 ; nn < 3 ; nn++ ) /* which edge fan vertex */

	xor	ebx, ebx
	lea	esi, DWORD PTR _dqdx$[ebp+144]
	mov	DWORD PTR _nn$[ebp], ebx
	mov	DWORD PTR tv7140[ebp], esi
$LN114@dihedral_h@3:

; 2969 :         for ( k = 0 ; k < SDIM ; k++ ) /* dimension on second */

	xor	edx, edx
	cmp	DWORD PTR _web+616, edx
	jle	$LN12@dihedral_h@3
	mov	ecx, DWORD PTR tv7254[ebp]
	add	ebx, eax

; 2970 :          { REAL sum = 0.0;

	lea	eax, DWORD PTR _ddqdxx$[ebp+ebx*8]
	add	ecx, edi
	mov	DWORD PTR tv7265[ebp], eax
	lea	eax, DWORD PTR _dqdx$[ebp+ecx*8]
	mov	DWORD PTR tv7271[ebp], eax
$LN110@dihedral_h@3:
	mov	ecx, DWORD PTR tv7265[ebp]
	fld	ST(0)
	mov	DWORD PTR tv6720[ebp], ecx
	mov	ecx, DWORD PTR tv7271[ebp]
	mov	DWORD PTR tv6367[ebp], OFFSET _Gtemp
	mov	eax, OFFSET _Htemp+8
$LN111@dihedral_h@3:

; 2972 :             { for ( jj = 0 ; jj < 6; jj++ )
; 2973 :                 sum += Htemp[j][jj]*dqdx[j][n][i]*dqdx[jj][nn][k];

	fld	QWORD PTR [eax-8]
	fmul	QWORD PTR [ecx]
	fmul	QWORD PTR [esi-144]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ecx]
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR [esi]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax+8]
	fmul	QWORD PTR [ecx]
	fmul	QWORD PTR [esi+144]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax+16]
	fmul	QWORD PTR [ecx]
	fmul	QWORD PTR [esi+288]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax+24]
	fmul	QWORD PTR [ecx]
	fmul	QWORD PTR [esi+432]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [eax+32]
	fmul	QWORD PTR [ecx]
	fmul	QWORD PTR [esi+576]
	faddp	ST(1), ST(0)

; 2974 :               if ( i == k ) sum += Gtemp[j]*ddqdxx[j][n][nn];

	cmp	edi, edx
	jne	SHORT $LN6@dihedral_h@3
	mov	ebx, DWORD PTR tv6367[ebp]
	fld	QWORD PTR [ebx]
	mov	ebx, DWORD PTR tv6720[ebp]
	fmul	QWORD PTR [ebx]
	faddp	ST(1), ST(0)
$LN6@dihedral_h@3:

; 2971 :             for ( j = 0 ; j < 6 ; j++ )

	add	DWORD PTR tv6720[ebp], 72		; 00000048H
	add	DWORD PTR tv6367[ebp], 8
	add	eax, 48					; 00000030H
	add	ecx, 144				; 00000090H
	cmp	eax, OFFSET _Htemp+296
	jl	SHORT $LN111@dihedral_h@3

; 2975 :             }
; 2976 :             e_info->hess[n+1][nn+1][i][k] += sum;

	mov	eax, DWORD PTR _e_info$GSCopy$[ebp]
	fld	ST(0)
	mov	ecx, DWORD PTR [eax+1340]
	mov	ebx, DWORD PTR tv7252[ebp]
	mov	ecx, DWORD PTR [ecx+ebx+4]
	mov	ebx, DWORD PTR _nn$[ebp]
	mov	ecx, DWORD PTR [ecx+ebx*4+4]
	mov	ecx, DWORD PTR [ecx+edi*4]
	fadd	QWORD PTR [ecx+edx*8]

; 2977 :             e_info->hess[n+1][0][i][k] -= sum;

	mov	ebx, DWORD PTR tv7252[ebp]
	lea	ecx, DWORD PTR [ecx+edx*8]
	add	esi, 8
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+1340]
	mov	ecx, DWORD PTR [ecx+ebx+4]
	mov	ecx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+edi*4]
	fld	QWORD PTR [ecx+edx*8]
	mov	ebx, DWORD PTR _nn$[ebp]
	lea	ecx, DWORD PTR [ecx+edx*8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [ecx]

; 2978 :             e_info->hess[0][nn+1][i][k] -= sum;

	mov	ecx, DWORD PTR [eax+1340]
	mov	ecx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+ebx*4+4]
	mov	ecx, DWORD PTR [ecx+edi*4]
	fld	QWORD PTR [ecx+edx*8]
	lea	ecx, DWORD PTR [ecx+edx*8]
	fsub	ST(0), ST(1)
	fstp	QWORD PTR [ecx]

; 2979 :             e_info->hess[0][0][i][k] += sum;

	mov	eax, DWORD PTR [eax+1340]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+edi*4]
	fadd	QWORD PTR [ecx+edx*8]
	lea	eax, DWORD PTR [ecx+edx*8]
	inc	edx
	fstp	QWORD PTR [eax]
	cmp	edx, DWORD PTR _web+616
	jl	$LN110@dihedral_h@3

; 2969 :         for ( k = 0 ; k < SDIM ; k++ ) /* dimension on second */

	mov	eax, DWORD PTR tv7256[ebp]
$LN12@dihedral_h@3:

; 2968 :       for ( nn = 0 ; nn < 3 ; nn++ ) /* which edge fan vertex */

	mov	esi, DWORD PTR tv7140[ebp]
	inc	ebx
	add	esi, 48					; 00000030H
	mov	DWORD PTR _nn$[ebp], ebx
	mov	DWORD PTR tv7140[ebp], esi
	cmp	ebx, 3
	jl	$LN114@dihedral_h@3

; 2967 :      for ( i = 0 ; i < SDIM ; i++ ) /* dimension on first */

	inc	edi
	cmp	edi, DWORD PTR _web+616
	jl	$LN112@dihedral_h@3
	mov	ebx, DWORD PTR _web+616
$LN18@dihedral_h@3:

; 2963 : 
; 2964 :     /* now assemble */
; 2965 : 
; 2966 :     for ( n = 0 ; n < 3 ; n++ ) /* which edge fan vertex */

	add	DWORD PTR tv7254[ebp], 6
	add	DWORD PTR tv7252[ebp], 4
	add	eax, 3
	mov	DWORD PTR tv7256[ebp], eax
	cmp	eax, 9
	jl	$LN118@dihedral_h@3

; 2980 :          }
; 2981 : 
; 2982 :     return sqrt(s1s1)*(1 - cos_th);
; 2983 : #else
; 2984 :     kb_error(2169,"dihedral_hooke hessian not implemented on Mac 68K.\n",WARNING);
; 2985 :     return 0.0;
; 2986 : #endif
; 2987 : } // end dihedral_hooke_hess()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(0)
	fsub	QWORD PTR _cos_th$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	fmul	QWORD PTR tv4504[ebp]
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_dihedral_hooke_hess ENDP
_TEXT	ENDS
PUBLIC	__real@3fc5555555555555
PUBLIC	__$ArrayPad$
PUBLIC	_string_gravity_all
EXTRN	_ctrl_num:DWORD
;	COMDAT __real@3fc5555555555555
CONST	SEGMENT
__real@3fc5555555555555 DQ 03fc5555555555555r	; 0.166667
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _string_gravity_all
_TEXT	SEGMENT
_sum$ = -116						; size = 8
_i$ = -108						; size = 4
tv1043 = -104						; size = 4
_djdx$ = -100						; size = 48
_dsdz$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_e_info$ = 8						; size = 4
_mode$ = 12						; size = 4
_string_gravity_all PROC				; COMDAT

; 153  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 154  :   int i,j;
; 155  :   REAL jac; /* jacobian */
; 156  :   REAL sum = 0.0;  /* quadratic z sum of facet */

	fldz

; 157  :   REAL djdx[MAXCOORD],dsdz[MAXCOORD];
; 158  :   REAL c = 1/6.;  /* coefficient */
; 159  :   REAL gdensity;
; 160  : 
; 161  :   if ( web.modeltype == QUADRATIC ) return string_gravity_all_q(e_info,mode);

	mov	eax, DWORD PTR _web+628
	push	esi
	fstp	QWORD PTR _sum$[ebp]
	mov	esi, DWORD PTR _e_info$[ebp]
	cmp	eax, 2
	jne	SHORT $LN24@string_gra@4
	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	push	esi
	call	_string_gravity_all_q
	add	esp, 8
	pop	esi

; 205  :      }
; 206  :   return jac*sum*c;
; 207  : } // end string_gravity_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN24@string_gra@4:

; 162  :   if ( web.modeltype == LAGRANGE ) 

	cmp	eax, 3
	jne	SHORT $LN23@string_gra@4

; 163  :      return string_gravity_all_lagrange(e_info,mode);

	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	push	esi
	call	_string_gravity_all_lagrange
	add	esp, 8
	pop	esi

; 205  :      }
; 206  :   return jac*sum*c;
; 207  : } // end string_gravity_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN23@string_gra@4:

; 164  : 
; 165  :   gdensity = get_edge_gdensity(e_info->id);

	mov	edx, DWORD PTR [esi]
	push	edx
	call	_get_edge_gdensity

; 166  :   if ( gdensity == 0.0 )

	fld	ST(0)
	fldz
	add	esp, 4
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	SHORT $LN22@string_gra@4
	fstp	ST(1)
	pop	esi

; 205  :      }
; 206  :   return jac*sum*c;
; 207  : } // end string_gravity_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN22@string_gra@4:

; 171  : 
; 172  :   jac = -e_info->sides[0][0][0];

	mov	eax, DWORD PTR [esi+1276]
	fxch	ST(1)
	mov	ecx, DWORD PTR [eax]
	fmul	QWORD PTR __real@3fc5555555555555
	mov	edx, DWORD PTR [ecx]
	fld	QWORD PTR [edx]
	mov	eax, DWORD PTR [esi+12]
	push	ebx
	fchs
	fld	QWORD PTR _sum$[ebp]

; 173  :   for ( i = 0 ; i < e_info->vcount ; i++ )

	xor	ebx, ebx
	push	edi
	mov	DWORD PTR _i$[ebp], ebx
	test	eax, eax
	jle	$LN19@string_gra@4

; 167  :   { 
; 168  :      return 0.0;
; 169  :   }
; 170  :   c *= gdensity;

	lea	eax, DWORD PTR [esi+416]
	mov	DWORD PTR tv1043[ebp], eax
$LN45@string_gra@4:

; 174  :     for ( j = 0 ; j <= i ; j++ )

	xor	edi, edi
	test	ebx, ebx
	js	SHORT $LN20@string_gra@4
	lea	edx, DWORD PTR [ebx+1]
	cmp	edx, 4
	jl	SHORT $LC40@string_gra@4

; 175  :       sum += e_info->x[i][1]*e_info->x[j][1];

	mov	ecx, DWORD PTR tv1043[ebp]
	mov	ecx, DWORD PTR [ecx]
	shr	edx, 2
	lea	eax, DWORD PTR [esi+420]
	lea	edi, DWORD PTR [edx*4]
$LN41@string_gra@4:
	mov	ebx, DWORD PTR [eax-4]
	fld	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR [eax]
	fmul	QWORD PTR [ecx+8]
	add	eax, 16					; 00000010H
	dec	edx
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR [eax-12]
	fmul	QWORD PTR [ecx+8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+8]
	mov	ebx, DWORD PTR [eax-8]
	fmul	QWORD PTR [ecx+8]
	faddp	ST(1), ST(0)
	fld	QWORD PTR [ebx+8]
	fmul	QWORD PTR [ecx+8]
	faddp	ST(1), ST(0)
	jne	SHORT $LN41@string_gra@4
	mov	ebx, DWORD PTR _i$[ebp]
$LC40@string_gra@4:

; 174  :     for ( j = 0 ; j <= i ; j++ )

	cmp	edi, ebx
	jg	SHORT $LN20@string_gra@4
	mov	edx, DWORD PTR tv1043[ebp]
	mov	edx, DWORD PTR [edx]
	mov	eax, ebx
	sub	eax, edi
	lea	ecx, DWORD PTR [esi+edi*4+416]
	inc	eax
$LC18@string_gra@4:

; 175  :       sum += e_info->x[i][1]*e_info->x[j][1];

	mov	edi, DWORD PTR [ecx]
	fld	QWORD PTR [edi+8]
	add	ecx, 4
	dec	eax
	fmul	QWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	jne	SHORT $LC18@string_gra@4
$LN20@string_gra@4:

; 173  :   for ( i = 0 ; i < e_info->vcount ; i++ )

	add	DWORD PTR tv1043[ebp], 4
	inc	ebx
	mov	DWORD PTR _i$[ebp], ebx
	cmp	ebx, DWORD PTR [esi+12]
	jl	$LN45@string_gra@4
$LN19@string_gra@4:

; 176  :   if ( mode == METHOD_VALUE ) return jac*sum*c;

	mov	edi, DWORD PTR _mode$[ebp]
	cmp	edi, 1767				; 000006e7H
	je	$LN91@string_gra@4

; 177  : 
; 178  :   djdx[0] = 1.0;

	fld1

; 179  :   djdx[1] = -1.0;
; 180  :   dsdz[0] = 2*e_info->x[0][1]+e_info->x[1][1];

	mov	eax, DWORD PTR [esi+416]
	mov	ecx, DWORD PTR [esi+420]
	fstp	QWORD PTR _djdx$[ebp]
	fld	QWORD PTR __real@bff0000000000000

; 181  :   dsdz[1] = e_info->x[0][1]+2*e_info->x[1][1];
; 182  : 
; 183  :   for ( i = 0 ; i < ctrl_num;  i++ )

	mov	edx, DWORD PTR _ctrl_num
	fstp	QWORD PTR _djdx$[ebp+8]
	fld	QWORD PTR [eax+8]
	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR [ecx+8]
	fstp	QWORD PTR _dsdz$[ebp]
	fld	QWORD PTR [ecx+8]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR [eax+8]
	xor	eax, eax
	fstp	QWORD PTR _dsdz$[ebp+8]
	test	edx, edx
	jle	SHORT $LN12@string_gra@4
$LN14@string_gra@4:

; 184  :   { e_info->grad[i][0] = djdx[i]*sum*c;

	fld	QWORD PTR _djdx$[ebp+eax*8]
	mov	ecx, DWORD PTR [esi+1336]
	mov	edx, DWORD PTR [ecx+eax*4]
	fmul	ST(0), ST(2)
	inc	eax
	fmul	ST(0), ST(4)
	fstp	QWORD PTR [edx]

; 185  :     e_info->grad[i][1] = dsdz[i]*jac*c;

	mov	ecx, DWORD PTR [esi+1336]
	fld	QWORD PTR _dsdz$[ebp+eax*8-8]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(4)
	fstp	QWORD PTR [edx+8]
	mov	edx, DWORD PTR _ctrl_num
	cmp	eax, edx
	jl	SHORT $LN14@string_gra@4
$LN12@string_gra@4:

; 186  :   }
; 187  : 
; 188  :   if ( mode == METHOD_GRADIENT ) return jac*sum*c;

	cmp	edi, 4321				; 000010e1H
	jne	SHORT $LN11@string_gra@4
	fstp	ST(0)
	jmp	$LN91@string_gra@4
$LN11@string_gra@4:

; 189  : 
; 190  :   /* second partials, self */
; 191  :   for ( i = 0 ; i < ctrl_num;  i++ )

	xor	eax, eax
	test	edx, edx
	jle	$LN78@string_gra@4
	fmul	ST(0), ST(2)
	fmul	ST(0), ST(3)
	jmp	SHORT $LN10@string_gra@4
$LN82@string_gra@4:
	fxch	ST(4)
$LN10@string_gra@4:

; 192  :   { e_info->hess[i][i][0][1] = e_info->hess[i][i][1][0] = djdx[i]*dsdz[i]*c;

	mov	ecx, DWORD PTR [esi+1340]
	fld	QWORD PTR _dsdz$[ebp+eax*8]
	mov	edx, DWORD PTR [ecx+eax*4]
	fmul	QWORD PTR _djdx$[ebp+eax*8]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+4]
	fmul	ST(0), ST(4)
	inc	eax
	fst	QWORD PTR [edx]
	mov	ecx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	ecx, DWORD PTR [edx+eax*4-4]
	mov	edx, DWORD PTR [ecx]
	fstp	QWORD PTR [edx+8]

; 193  :     e_info->hess[i][i][1][1] = 2*jac*c;

	mov	ecx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	ecx, DWORD PTR [edx+eax*4-4]
	mov	edx, DWORD PTR [ecx+4]
	fst	QWORD PTR [edx+8]

; 194  :     e_info->hess[i][i][0][0] = 0.0;

	mov	ecx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	fxch	ST(4)
	mov	ecx, DWORD PTR [edx+eax*4-4]
	mov	edx, DWORD PTR [ecx]
	fst	QWORD PTR [edx]
	mov	edx, DWORD PTR _ctrl_num
	cmp	eax, edx
	jl	SHORT $LN82@string_gra@4

; 189  : 
; 190  :   /* second partials, self */
; 191  :   for ( i = 0 ; i < ctrl_num;  i++ )

	fstp	ST(4)
$LN8@string_gra@4:

; 195  :   }
; 196  : 
; 197  :   /* second partials, mixed */
; 198  :   for ( i = 0 ; i < ctrl_num ; i++ )

	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN91@string_gra@4
$LN7@string_gra@4:

; 199  :     for ( j = 0 ; j < ctrl_num ; j++ )

	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN6@string_gra@4
$LN4@string_gra@4:

; 200  :      { if ( j == i ) continue;

	cmp	eax, ecx
	je	SHORT $LN3@string_gra@4

; 201  :        e_info->hess[i][j][0][0] = 0.0;

	mov	edx, DWORD PTR [esi+1340]
	fxch	ST(3)
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [edx]
	fst	QWORD PTR [edx]

; 202  :        e_info->hess[i][j][0][1] = djdx[i]*dsdz[j]*c;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR _dsdz$[ebp+eax*8]
	fmul	QWORD PTR _djdx$[ebp+ecx*8]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [edx]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR [edx+8]

; 203  :        e_info->hess[i][j][1][0] = djdx[j]*dsdz[i]*c;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	QWORD PTR _djdx$[ebp+eax*8]
	fmul	QWORD PTR _dsdz$[ebp+ecx*8]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [edx+4]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR [edx]

; 204  :        e_info->hess[i][j][1][1] = jac*c;

	mov	edx, DWORD PTR [esi+1340]
	mov	edx, DWORD PTR [edx+ecx*4]
	fld	ST(1)
	mov	edx, DWORD PTR [edx+eax*4]
	fmul	ST(0), ST(3)
	mov	edx, DWORD PTR [edx+4]
	fstp	QWORD PTR [edx+8]
	mov	edx, DWORD PTR _ctrl_num
	fxch	ST(3)
$LN3@string_gra@4:

; 199  :     for ( j = 0 ; j < ctrl_num ; j++ )

	inc	eax
	cmp	eax, edx
	jl	SHORT $LN4@string_gra@4
$LN6@string_gra@4:

; 195  :   }
; 196  : 
; 197  :   /* second partials, mixed */
; 198  :   for ( i = 0 ; i < ctrl_num ; i++ )

	inc	ecx
	cmp	ecx, edx
	jl	SHORT $LN7@string_gra@4
$LN91@string_gra@4:

; 205  :      }
; 206  :   return jac*sum*c;
; 207  : } // end string_gravity_all()

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(3)
	pop	edi
	fmulp	ST(2), ST(0)
	pop	ebx
	xor	ecx, ebp
	fmulp	ST(1), ST(0)
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN78@string_gra@4:

; 189  : 
; 190  :   /* second partials, self */
; 191  :   for ( i = 0 ; i < ctrl_num;  i++ )

	fstp	ST(0)
	jmp	$LN8@string_gra@4
_string_gravity_all ENDP
_TEXT	ENDS
PUBLIC	_string_gravity_energy
; Function compile flags: /Ogtp
;	COMDAT _string_gravity_energy
_TEXT	SEGMENT
_e_info$ = 8						; size = 4
_string_gravity_energy PROC				; COMDAT

; 345  : {

	push	ebp
	mov	ebp, esp

; 346  :  return string_gravity_all(e_info,METHOD_VALUE);

	mov	eax, DWORD PTR _e_info$[ebp]
	push	1767					; 000006e7H
	push	eax
	call	_string_gravity_all
	add	esp, 8

; 347  : }

	pop	ebp
	ret	0
_string_gravity_energy ENDP
_TEXT	ENDS
PUBLIC	_string_gravity_grads
; Function compile flags: /Ogtp
;	COMDAT _string_gravity_grads
_TEXT	SEGMENT
_e_info$ = 8						; size = 4
_string_gravity_grads PROC				; COMDAT

; 362  : {

	push	ebp
	mov	ebp, esp

; 363  :  return string_gravity_all(e_info,METHOD_GRADIENT);

	mov	eax, DWORD PTR _e_info$[ebp]
	push	4321					; 000010e1H
	push	eax
	call	_string_gravity_all
	add	esp, 8

; 364  : }

	pop	ebp
	ret	0
_string_gravity_grads ENDP
_TEXT	ENDS
PUBLIC	_string_gravity_hessian
; Function compile flags: /Ogtp
;	COMDAT _string_gravity_hessian
_TEXT	SEGMENT
_e_info$ = 8						; size = 4
_string_gravity_hessian PROC				; COMDAT

; 378  : {

	push	ebp
	mov	ebp, esp

; 379  :  return string_gravity_all(e_info,METHOD_HESSIAN);

	mov	eax, DWORD PTR _e_info$[ebp]
	push	8763					; 0000223bH
	push	eax
	call	_string_gravity_all
	add	esp, 8

; 380  : }

	pop	ebp
	ret	0
_string_gravity_hessian ENDP
_TEXT	ENDS
END
